{"file_name": "/home/qj213/afp-2021-10-22/thys/LTL/Equivalence_Relations.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/LTL", "problem_names": ["lemma ltl_lang_equiv_equivp:\n  \"equivp (\\<sim>\\<^sub>L)\"", "lemma ltl_lang_equiv_and_true[simp]:\n  \"\\<phi>\\<^sub>1 and\\<^sub>n \\<phi>\\<^sub>2 \\<sim>\\<^sub>L true\\<^sub>n \\<longleftrightarrow> \\<phi>\\<^sub>1 \\<sim>\\<^sub>L true\\<^sub>n \\<and> \\<phi>\\<^sub>2 \\<sim>\\<^sub>L true\\<^sub>n\"", "lemma ltl_lang_equiv_and_false[intro, simp]:\n  \"\\<phi>\\<^sub>1 \\<sim>\\<^sub>L false\\<^sub>n \\<Longrightarrow> \\<phi>\\<^sub>1 and\\<^sub>n \\<phi>\\<^sub>2 \\<sim>\\<^sub>L false\\<^sub>n\"\n  \"\\<phi>\\<^sub>2 \\<sim>\\<^sub>L false\\<^sub>n \\<Longrightarrow> \\<phi>\\<^sub>1 and\\<^sub>n \\<phi>\\<^sub>2 \\<sim>\\<^sub>L false\\<^sub>n\"", "lemma ltl_lang_equiv_or_false[simp]:\n  \"\\<phi>\\<^sub>1 or\\<^sub>n \\<phi>\\<^sub>2 \\<sim>\\<^sub>L false\\<^sub>n \\<longleftrightarrow> \\<phi>\\<^sub>1 \\<sim>\\<^sub>L false\\<^sub>n \\<and> \\<phi>\\<^sub>2 \\<sim>\\<^sub>L false\\<^sub>n\"", "lemma ltl_lang_equiv_or_const[intro, simp]:\n  \"\\<phi>\\<^sub>1 \\<sim>\\<^sub>L true\\<^sub>n \\<Longrightarrow> \\<phi>\\<^sub>1 or\\<^sub>n \\<phi>\\<^sub>2 \\<sim>\\<^sub>L true\\<^sub>n\"\n  \"\\<phi>\\<^sub>2 \\<sim>\\<^sub>L true\\<^sub>n \\<Longrightarrow> \\<phi>\\<^sub>1 or\\<^sub>n \\<phi>\\<^sub>2 \\<sim>\\<^sub>L true\\<^sub>n\"", "lemma ltl_prop_entailment_monotonI[intro]:\n  \"S \\<Turnstile>\\<^sub>P \\<phi> \\<Longrightarrow> S \\<subseteq> S' \\<Longrightarrow> S' \\<Turnstile>\\<^sub>P \\<phi>\"", "lemma ltl_models_equiv_prop_entailment:\n  \"w \\<Turnstile>\\<^sub>n \\<phi> \\<longleftrightarrow> {\\<psi>. w \\<Turnstile>\\<^sub>n \\<psi>} \\<Turnstile>\\<^sub>P \\<phi>\"", "lemma ltl_prop_implies_equiv:\n  \"\\<phi> \\<sim>\\<^sub>P \\<psi> \\<longleftrightarrow> (\\<phi> \\<longrightarrow>\\<^sub>P \\<psi> \\<and> \\<psi> \\<longrightarrow>\\<^sub>P \\<phi>)\"", "lemma ltl_prop_equiv_equivp:\n  \"equivp (\\<sim>\\<^sub>P)\"", "lemma ltl_prop_equiv_trans[trans]:\n  \"\\<phi> \\<sim>\\<^sub>P \\<psi> \\<Longrightarrow> \\<psi> \\<sim>\\<^sub>P \\<chi> \\<Longrightarrow> \\<phi> \\<sim>\\<^sub>P \\<chi>\"", "lemma ltl_prop_equiv_true:\n  \"\\<phi> \\<sim>\\<^sub>P true\\<^sub>n \\<longleftrightarrow> {} \\<Turnstile>\\<^sub>P \\<phi>\"", "lemma ltl_prop_equiv_false:\n  \"\\<phi> \\<sim>\\<^sub>P false\\<^sub>n \\<longleftrightarrow> \\<not> UNIV \\<Turnstile>\\<^sub>P \\<phi>\"", "lemma ltl_prop_equiv_true_implies_true:\n  \"x \\<sim>\\<^sub>P true\\<^sub>n \\<Longrightarrow> x \\<longrightarrow>\\<^sub>P y \\<Longrightarrow> y \\<sim>\\<^sub>P true\\<^sub>n\"", "lemma ltl_prop_equiv_false_implied_by_false:\n  \"y \\<sim>\\<^sub>P false\\<^sub>n \\<Longrightarrow> x \\<longrightarrow>\\<^sub>P y \\<Longrightarrow> x \\<sim>\\<^sub>P false\\<^sub>n\"", "lemma ltl_prop_implication_implies_ltl_implication:\n  \"w \\<Turnstile>\\<^sub>n \\<phi> \\<Longrightarrow> \\<phi> \\<longrightarrow>\\<^sub>P \\<psi> \\<Longrightarrow> w \\<Turnstile>\\<^sub>n \\<psi>\"", "lemma ltl_prop_equiv_implies_ltl_lang_equiv:\n  \"\\<phi> \\<sim>\\<^sub>P \\<psi> \\<Longrightarrow> \\<phi> \\<sim>\\<^sub>L \\<psi>\"", "lemma ltl_prop_equiv_lt_ltl_lang_equiv[simp]:\n  \"(\\<sim>\\<^sub>P) \\<le> (\\<sim>\\<^sub>L)\"", "lemma eval_and_const[simp]:\n  \"eval_and \\<phi> \\<psi> = No \\<longleftrightarrow> \\<phi> = No \\<or> \\<psi> = No\"\n  \"eval_and \\<phi> \\<psi> = Yes \\<longleftrightarrow> \\<phi> = Yes \\<and> \\<psi> = Yes\"", "lemma eval_or_const[simp]:\n  \"eval_or \\<phi> \\<psi> = Yes \\<longleftrightarrow> \\<phi> = Yes \\<or> \\<psi> = Yes\"\n  \"eval_or \\<phi> \\<psi> = No \\<longleftrightarrow> \\<phi> = No \\<and> \\<psi> = No\"", "lemma eval_prop_entailment:\n  \"eval \\<phi> = Yes \\<longleftrightarrow> {} \\<Turnstile>\\<^sub>P \\<phi>\"\n  \"eval \\<phi> = No \\<longleftrightarrow> \\<not> UNIV \\<Turnstile>\\<^sub>P \\<phi>\"", "lemma ltl_const_equiv_equivp:\n  \"equivp (\\<sim>\\<^sub>C)\"", "lemma ltl_const_equiv_const:\n  \"\\<phi> \\<sim>\\<^sub>C true\\<^sub>n \\<longleftrightarrow> eval \\<phi> = Yes\"\n  \"\\<phi> \\<sim>\\<^sub>C false\\<^sub>n \\<longleftrightarrow> eval \\<phi> = No\"", "lemma ltl_const_equiv_and_const[simp]:\n  \"\\<phi>\\<^sub>1 and\\<^sub>n \\<phi>\\<^sub>2 \\<sim>\\<^sub>C true\\<^sub>n \\<longleftrightarrow> \\<phi>\\<^sub>1 \\<sim>\\<^sub>C true\\<^sub>n \\<and> \\<phi>\\<^sub>2 \\<sim>\\<^sub>C true\\<^sub>n\"\n  \"\\<phi>\\<^sub>1 and\\<^sub>n \\<phi>\\<^sub>2 \\<sim>\\<^sub>C false\\<^sub>n \\<longleftrightarrow> \\<phi>\\<^sub>1 \\<sim>\\<^sub>C false\\<^sub>n \\<or> \\<phi>\\<^sub>2 \\<sim>\\<^sub>C false\\<^sub>n\"", "lemma ltl_const_equiv_or_const[simp]:\n  \"\\<phi>\\<^sub>1 or\\<^sub>n \\<phi>\\<^sub>2 \\<sim>\\<^sub>C true\\<^sub>n \\<longleftrightarrow> \\<phi>\\<^sub>1 \\<sim>\\<^sub>C true\\<^sub>n \\<or> \\<phi>\\<^sub>2 \\<sim>\\<^sub>C true\\<^sub>n\"\n  \"\\<phi>\\<^sub>1 or\\<^sub>n \\<phi>\\<^sub>2 \\<sim>\\<^sub>C false\\<^sub>n \\<longleftrightarrow> \\<phi>\\<^sub>1 \\<sim>\\<^sub>C false\\<^sub>n \\<and> \\<phi>\\<^sub>2 \\<sim>\\<^sub>C false\\<^sub>n\"", "lemma ltl_const_equiv_other[simp]:\n  \"\\<phi> \\<sim>\\<^sub>C prop\\<^sub>n(a) \\<longleftrightarrow> \\<phi> = prop\\<^sub>n(a)\"\n  \"\\<phi> \\<sim>\\<^sub>C nprop\\<^sub>n(a) \\<longleftrightarrow> \\<phi> = nprop\\<^sub>n(a)\"\n  \"\\<phi> \\<sim>\\<^sub>C X\\<^sub>n \\<psi> \\<longleftrightarrow> \\<phi> = X\\<^sub>n \\<psi>\"\n  \"\\<phi> \\<sim>\\<^sub>C \\<psi>\\<^sub>1 U\\<^sub>n \\<psi>\\<^sub>2 \\<longleftrightarrow> \\<phi> = \\<psi>\\<^sub>1 U\\<^sub>n \\<psi>\\<^sub>2\"\n  \"\\<phi> \\<sim>\\<^sub>C \\<psi>\\<^sub>1 R\\<^sub>n \\<psi>\\<^sub>2 \\<longleftrightarrow> \\<phi> = \\<psi>\\<^sub>1 R\\<^sub>n \\<psi>\\<^sub>2\"\n  \"\\<phi> \\<sim>\\<^sub>C \\<psi>\\<^sub>1 W\\<^sub>n \\<psi>\\<^sub>2 \\<longleftrightarrow> \\<phi> = \\<psi>\\<^sub>1 W\\<^sub>n \\<psi>\\<^sub>2\"\n  \"\\<phi> \\<sim>\\<^sub>C \\<psi>\\<^sub>1 M\\<^sub>n \\<psi>\\<^sub>2 \\<longleftrightarrow> \\<phi> = \\<psi>\\<^sub>1 M\\<^sub>n \\<psi>\\<^sub>2\"", "lemma ltl_const_equiv_no_const_singleton:\n  \"eval \\<psi> = Maybe \\<Longrightarrow> \\<phi> \\<sim>\\<^sub>C \\<psi> \\<Longrightarrow> \\<phi> = \\<psi>\"", "lemma ltl_const_equiv_implies_prop_equiv:\n  \"\\<phi> \\<sim>\\<^sub>C true\\<^sub>n \\<longleftrightarrow> \\<phi> \\<sim>\\<^sub>P true\\<^sub>n\"\n  \"\\<phi> \\<sim>\\<^sub>C false\\<^sub>n \\<longleftrightarrow> \\<phi> \\<sim>\\<^sub>P false\\<^sub>n\"", "lemma ltl_const_equiv_no_const_prop_equiv:\n  \"eval \\<psi> = Maybe \\<Longrightarrow> \\<phi> \\<sim>\\<^sub>C \\<psi> \\<Longrightarrow> \\<phi> \\<sim>\\<^sub>P \\<psi>\"", "lemma ltl_const_equiv_implies_ltl_prop_equiv:\n  \"\\<phi> \\<sim>\\<^sub>C \\<psi> \\<Longrightarrow> \\<phi> \\<sim>\\<^sub>P \\<psi>\"", "lemma ltl_const_equiv_lt_ltl_prop_equiv[simp]:\n  \"(\\<sim>\\<^sub>C) \\<le> (\\<sim>\\<^sub>P)\"", "lemma Rep_Abs_prop_entailment[simp]:\n  \"\\<A> \\<Turnstile>\\<^sub>P rep_ltln\\<^sub>P (abs_ltln\\<^sub>P \\<phi>) = \\<A> \\<Turnstile>\\<^sub>P \\<phi>\"", "lemma sat_models_Abs:\n  \"\\<A> \\<in> sat_models (abs_ltln\\<^sub>P \\<phi>) = \\<A> \\<Turnstile>\\<^sub>P \\<phi>\"", "lemma sat_models_inj:\n  \"inj sat_models\"", "lemma prop_atoms_nested_prop_atoms:\n  \"prop_atoms \\<phi> \\<subseteq> nested_prop_atoms \\<phi>\"", "lemma prop_atoms_subfrmlsn:\n  \"prop_atoms \\<phi> \\<subseteq> subfrmlsn \\<phi>\"", "lemma nested_prop_atoms_subfrmlsn:\n  \"nested_prop_atoms \\<phi> \\<subseteq> subfrmlsn \\<phi>\"", "lemma prop_atoms_notin[simp]:\n  \"true\\<^sub>n \\<notin> prop_atoms \\<phi>\"\n  \"false\\<^sub>n \\<notin> prop_atoms \\<phi>\"\n  \"\\<phi>\\<^sub>1 and\\<^sub>n \\<phi>\\<^sub>2 \\<notin> prop_atoms \\<phi>\"\n  \"\\<phi>\\<^sub>1 or\\<^sub>n \\<phi>\\<^sub>2 \\<notin> prop_atoms \\<phi>\"", "lemma nested_prop_atoms_notin[simp]:\n  \"true\\<^sub>n \\<notin> nested_prop_atoms \\<phi>\"\n  \"false\\<^sub>n \\<notin> nested_prop_atoms \\<phi>\"\n  \"\\<phi>\\<^sub>1 and\\<^sub>n \\<phi>\\<^sub>2 \\<notin> nested_prop_atoms \\<phi>\"\n  \"\\<phi>\\<^sub>1 or\\<^sub>n \\<phi>\\<^sub>2 \\<notin> nested_prop_atoms \\<phi>\"", "lemma prop_atoms_finite:\n  \"finite (prop_atoms \\<phi>)\"", "lemma nested_prop_atoms_finite:\n  \"finite (nested_prop_atoms \\<phi>)\"", "lemma prop_atoms_entailment_iff:\n  \"\\<phi> \\<in> prop_atoms \\<psi> \\<Longrightarrow> \\<A> \\<Turnstile>\\<^sub>P \\<phi> \\<longleftrightarrow> \\<phi> \\<in> \\<A>\"", "lemma prop_atoms_entailment_inter:\n  \"prop_atoms \\<phi> \\<subseteq> P \\<Longrightarrow> (\\<A> \\<inter> P) \\<Turnstile>\\<^sub>P \\<phi> = \\<A> \\<Turnstile>\\<^sub>P \\<phi>\"", "lemma nested_prop_atoms_entailment_inter:\n  \"nested_prop_atoms \\<phi> \\<subseteq> P \\<Longrightarrow> (\\<A> \\<inter> P) \\<Turnstile>\\<^sub>P \\<phi> = \\<A> \\<Turnstile>\\<^sub>P \\<phi>\"", "lemma sat_models_inter_inj_helper:\n  assumes\n    \"prop_atoms \\<phi> \\<subseteq> P\"\n  and\n    \"prop_atoms \\<psi> \\<subseteq> P\"\n  and\n    \"sat_models (abs_ltln\\<^sub>P \\<phi>) \\<inter> Pow P = sat_models (abs_ltln\\<^sub>P \\<psi>) \\<inter> Pow P\"\n  shows\n    \"\\<phi> \\<sim>\\<^sub>P \\<psi>\"", "lemma sat_models_inter_inj:\n  \"inj_on (\\<lambda>\\<phi>. sat_models \\<phi> \\<inter> Pow P) {abs_ltln\\<^sub>P \\<phi> |\\<phi>. prop_atoms \\<phi> \\<subseteq> P}\"", "lemma sat_models_pow_pow:\n  \"{sat_models (abs_ltln\\<^sub>P \\<phi>) \\<inter> Pow P | \\<phi>. prop_atoms \\<phi> \\<subseteq> P} \\<subseteq> Pow (Pow P)\"", "lemma sat_models_finite:\n  \"finite P \\<Longrightarrow> finite {sat_models (abs_ltln\\<^sub>P \\<phi>) \\<inter> Pow P | \\<phi>. prop_atoms \\<phi> \\<subseteq> P}\"", "lemma sat_models_card:\n  \"finite P \\<Longrightarrow> card ({sat_models (abs_ltln\\<^sub>P \\<phi>) \\<inter> Pow P | \\<phi>. prop_atoms \\<phi> \\<subseteq> P}) \\<le> 2 ^ 2 ^ card P\"", "lemma image_filter:\n  \"f ` {g a | a. P a} = {f (g a) | a. P a}\"", "lemma prop_equiv_finite:\n  \"finite P \\<Longrightarrow> finite {abs_ltln\\<^sub>P \\<psi> | \\<psi>. prop_atoms \\<psi> \\<subseteq> P}\"", "lemma prop_equiv_card:\n  \"finite P \\<Longrightarrow> card {abs_ltln\\<^sub>P \\<psi> | \\<psi>. prop_atoms \\<psi> \\<subseteq> P} \\<le> 2 ^ 2 ^ card P\"", "lemma prop_equiv_subset:\n  \"{abs_ltln\\<^sub>P \\<psi> |\\<psi>. nested_prop_atoms \\<psi> \\<subseteq> P} \\<subseteq> {abs_ltln\\<^sub>P \\<psi> |\\<psi>. prop_atoms \\<psi> \\<subseteq> P}\"", "lemma prop_equiv_finite':\n  \"finite P \\<Longrightarrow> finite {abs_ltln\\<^sub>P \\<psi> | \\<psi>. nested_prop_atoms \\<psi> \\<subseteq> P}\"", "lemma prop_equiv_card':\n  \"finite P \\<Longrightarrow> card {abs_ltln\\<^sub>P \\<psi> | \\<psi>. nested_prop_atoms \\<psi> \\<subseteq> P} \\<le> 2 ^ 2 ^ card P\"", "lemma ltl_prop_equiv_subst_S:\n  \"S \\<Turnstile>\\<^sub>P subst \\<phi> m = ((S - dom m) \\<union> {\\<chi> | \\<chi> \\<chi>'. \\<chi> \\<in> dom m \\<and> m \\<chi> = Some \\<chi>' \\<and> S \\<Turnstile>\\<^sub>P \\<chi>'}) \\<Turnstile>\\<^sub>P \\<phi>\"", "lemma subst_respects_ltl_prop_entailment:\n  \"\\<phi> \\<longrightarrow>\\<^sub>P \\<psi> \\<Longrightarrow> subst \\<phi> m \\<longrightarrow>\\<^sub>P subst \\<psi> m\"\n  \"\\<phi> \\<sim>\\<^sub>P \\<psi> \\<Longrightarrow> subst \\<phi> m \\<sim>\\<^sub>P subst \\<psi> m\"", "lemma eval_subst:\n  \"eval \\<phi> = Yes \\<Longrightarrow> eval (subst \\<phi> m) = Yes\"\n  \"eval \\<phi> = No \\<Longrightarrow> eval (subst \\<phi> m) = No\"", "lemma subst_respects_ltl_const_entailment:\n  \"\\<phi> \\<sim>\\<^sub>C \\<psi> \\<Longrightarrow> subst \\<phi> m \\<sim>\\<^sub>C subst \\<psi> m\"", "lemma eq_implies_ltl_equiv:\n  \"\\<phi> \\<sim> \\<psi> \\<Longrightarrow> w \\<Turnstile>\\<^sub>n \\<phi> = w \\<Turnstile>\\<^sub>n \\<psi>\"", "lemma const_implies_eq:\n  \"\\<phi> \\<sim>\\<^sub>C \\<psi> \\<Longrightarrow> \\<phi> \\<sim> \\<psi>\"", "lemma eq_implies_lang:\n  \"\\<phi> \\<sim> \\<psi> \\<Longrightarrow> \\<phi> \\<sim>\\<^sub>L \\<psi>\"", "lemma eq_refl[simp]:\n  \"\\<phi> \\<sim> \\<phi>\"", "lemma eq_sym[sym]:\n  \"\\<phi> \\<sim> \\<psi> \\<Longrightarrow> \\<psi> \\<sim> \\<phi>\"", "lemma eq_trans[trans]:\n  \"\\<phi> \\<sim> \\<psi> \\<Longrightarrow> \\<psi> \\<sim> \\<chi> \\<Longrightarrow> \\<phi> \\<sim> \\<chi>\""], "translations": [["", "lemma ltl_lang_equiv_equivp:\n  \"equivp (\\<sim>\\<^sub>L)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. equivp (\\<sim>\\<^sub>L)", "unfolding ltl_lang_equiv_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. equivp\n     (\\<lambda>\\<phi> \\<psi>.\n         \\<forall>w.\n            w \\<Turnstile>\\<^sub>n \\<phi> = w \\<Turnstile>\\<^sub>n \\<psi>)", "by (simp add: equivpI reflp_def symp_def transp_def)"], ["", "lemma ltl_lang_equiv_and_true[simp]:\n  \"\\<phi>\\<^sub>1 and\\<^sub>n \\<phi>\\<^sub>2 \\<sim>\\<^sub>L true\\<^sub>n \\<longleftrightarrow> \\<phi>\\<^sub>1 \\<sim>\\<^sub>L true\\<^sub>n \\<and> \\<phi>\\<^sub>2 \\<sim>\\<^sub>L true\\<^sub>n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<phi>\\<^sub>1 and\\<^sub>n \\<phi>\\<^sub>2 \\<sim>\\<^sub>L true\\<^sub>n =\n    (\\<phi>\\<^sub>1 \\<sim>\\<^sub>L true\\<^sub>n \\<and>\n     \\<phi>\\<^sub>2 \\<sim>\\<^sub>L true\\<^sub>n)", "unfolding ltl_lang_equiv_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>w.\n        w \\<Turnstile>\\<^sub>n \\<phi>\\<^sub>1 and\\<^sub>n \\<phi>\\<^sub>2 =\n        w \\<Turnstile>\\<^sub>n true\\<^sub>n) =\n    ((\\<forall>w.\n         w \\<Turnstile>\\<^sub>n \\<phi>\\<^sub>1 =\n         w \\<Turnstile>\\<^sub>n true\\<^sub>n) \\<and>\n     (\\<forall>w.\n         w \\<Turnstile>\\<^sub>n \\<phi>\\<^sub>2 =\n         w \\<Turnstile>\\<^sub>n true\\<^sub>n))", "by auto"], ["", "lemma ltl_lang_equiv_and_false[intro, simp]:\n  \"\\<phi>\\<^sub>1 \\<sim>\\<^sub>L false\\<^sub>n \\<Longrightarrow> \\<phi>\\<^sub>1 and\\<^sub>n \\<phi>\\<^sub>2 \\<sim>\\<^sub>L false\\<^sub>n\"\n  \"\\<phi>\\<^sub>2 \\<sim>\\<^sub>L false\\<^sub>n \\<Longrightarrow> \\<phi>\\<^sub>1 and\\<^sub>n \\<phi>\\<^sub>2 \\<sim>\\<^sub>L false\\<^sub>n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<phi>\\<^sub>1 \\<sim>\\<^sub>L false\\<^sub>n \\<Longrightarrow>\n     \\<phi>\\<^sub>1 and\\<^sub>n \\<phi>\\<^sub>2 \\<sim>\\<^sub>L\n     false\\<^sub>n) &&&\n    (\\<phi>\\<^sub>2 \\<sim>\\<^sub>L false\\<^sub>n \\<Longrightarrow>\n     \\<phi>\\<^sub>1 and\\<^sub>n \\<phi>\\<^sub>2 \\<sim>\\<^sub>L false\\<^sub>n)", "unfolding ltl_lang_equiv_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>w.\n        w \\<Turnstile>\\<^sub>n \\<phi>\\<^sub>1 =\n        w \\<Turnstile>\\<^sub>n false\\<^sub>n \\<Longrightarrow>\n     \\<forall>w.\n        w \\<Turnstile>\\<^sub>n \\<phi>\\<^sub>1 and\\<^sub>n \\<phi>\\<^sub>2 =\n        w \\<Turnstile>\\<^sub>n false\\<^sub>n) &&&\n    (\\<forall>w.\n        w \\<Turnstile>\\<^sub>n \\<phi>\\<^sub>2 =\n        w \\<Turnstile>\\<^sub>n false\\<^sub>n \\<Longrightarrow>\n     \\<forall>w.\n        w \\<Turnstile>\\<^sub>n \\<phi>\\<^sub>1 and\\<^sub>n \\<phi>\\<^sub>2 =\n        w \\<Turnstile>\\<^sub>n false\\<^sub>n)", "by auto"], ["", "lemma ltl_lang_equiv_or_false[simp]:\n  \"\\<phi>\\<^sub>1 or\\<^sub>n \\<phi>\\<^sub>2 \\<sim>\\<^sub>L false\\<^sub>n \\<longleftrightarrow> \\<phi>\\<^sub>1 \\<sim>\\<^sub>L false\\<^sub>n \\<and> \\<phi>\\<^sub>2 \\<sim>\\<^sub>L false\\<^sub>n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<phi>\\<^sub>1 or\\<^sub>n \\<phi>\\<^sub>2 \\<sim>\\<^sub>L false\\<^sub>n =\n    (\\<phi>\\<^sub>1 \\<sim>\\<^sub>L false\\<^sub>n \\<and>\n     \\<phi>\\<^sub>2 \\<sim>\\<^sub>L false\\<^sub>n)", "unfolding ltl_lang_equiv_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>w.\n        w \\<Turnstile>\\<^sub>n \\<phi>\\<^sub>1 or\\<^sub>n \\<phi>\\<^sub>2 =\n        w \\<Turnstile>\\<^sub>n false\\<^sub>n) =\n    ((\\<forall>w.\n         w \\<Turnstile>\\<^sub>n \\<phi>\\<^sub>1 =\n         w \\<Turnstile>\\<^sub>n false\\<^sub>n) \\<and>\n     (\\<forall>w.\n         w \\<Turnstile>\\<^sub>n \\<phi>\\<^sub>2 =\n         w \\<Turnstile>\\<^sub>n false\\<^sub>n))", "by auto"], ["", "lemma ltl_lang_equiv_or_const[intro, simp]:\n  \"\\<phi>\\<^sub>1 \\<sim>\\<^sub>L true\\<^sub>n \\<Longrightarrow> \\<phi>\\<^sub>1 or\\<^sub>n \\<phi>\\<^sub>2 \\<sim>\\<^sub>L true\\<^sub>n\"\n  \"\\<phi>\\<^sub>2 \\<sim>\\<^sub>L true\\<^sub>n \\<Longrightarrow> \\<phi>\\<^sub>1 or\\<^sub>n \\<phi>\\<^sub>2 \\<sim>\\<^sub>L true\\<^sub>n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<phi>\\<^sub>1 \\<sim>\\<^sub>L true\\<^sub>n \\<Longrightarrow>\n     \\<phi>\\<^sub>1 or\\<^sub>n \\<phi>\\<^sub>2 \\<sim>\\<^sub>L\n     true\\<^sub>n) &&&\n    (\\<phi>\\<^sub>2 \\<sim>\\<^sub>L true\\<^sub>n \\<Longrightarrow>\n     \\<phi>\\<^sub>1 or\\<^sub>n \\<phi>\\<^sub>2 \\<sim>\\<^sub>L true\\<^sub>n)", "unfolding ltl_lang_equiv_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>w.\n        w \\<Turnstile>\\<^sub>n \\<phi>\\<^sub>1 =\n        w \\<Turnstile>\\<^sub>n true\\<^sub>n \\<Longrightarrow>\n     \\<forall>w.\n        w \\<Turnstile>\\<^sub>n \\<phi>\\<^sub>1 or\\<^sub>n \\<phi>\\<^sub>2 =\n        w \\<Turnstile>\\<^sub>n true\\<^sub>n) &&&\n    (\\<forall>w.\n        w \\<Turnstile>\\<^sub>n \\<phi>\\<^sub>2 =\n        w \\<Turnstile>\\<^sub>n true\\<^sub>n \\<Longrightarrow>\n     \\<forall>w.\n        w \\<Turnstile>\\<^sub>n \\<phi>\\<^sub>1 or\\<^sub>n \\<phi>\\<^sub>2 =\n        w \\<Turnstile>\\<^sub>n true\\<^sub>n)", "by auto"], ["", "subsection \\<open>Propositional Equivalence\\<close>"], ["", "fun ltl_prop_entailment :: \"'a ltln set \\<Rightarrow> 'a ltln \\<Rightarrow> bool\" (infix \"\\<Turnstile>\\<^sub>P\" 80)\nwhere\n  \"\\<A> \\<Turnstile>\\<^sub>P true\\<^sub>n = True\"\n| \"\\<A> \\<Turnstile>\\<^sub>P false\\<^sub>n = False\"\n| \"\\<A> \\<Turnstile>\\<^sub>P \\<phi> and\\<^sub>n \\<psi> = (\\<A> \\<Turnstile>\\<^sub>P \\<phi> \\<and> \\<A> \\<Turnstile>\\<^sub>P \\<psi>)\"\n| \"\\<A> \\<Turnstile>\\<^sub>P \\<phi> or\\<^sub>n \\<psi> = (\\<A> \\<Turnstile>\\<^sub>P \\<phi> \\<or> \\<A> \\<Turnstile>\\<^sub>P \\<psi>)\"\n| \"\\<A> \\<Turnstile>\\<^sub>P \\<phi> = (\\<phi> \\<in> \\<A>)\""], ["", "lemma ltl_prop_entailment_monotonI[intro]:\n  \"S \\<Turnstile>\\<^sub>P \\<phi> \\<Longrightarrow> S \\<subseteq> S' \\<Longrightarrow> S' \\<Turnstile>\\<^sub>P \\<phi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S \\<Turnstile>\\<^sub>P \\<phi>; S \\<subseteq> S'\\<rbrakk>\n    \\<Longrightarrow> S' \\<Turnstile>\\<^sub>P \\<phi>", "by (induction \\<phi>) auto"], ["", "lemma ltl_models_equiv_prop_entailment:\n  \"w \\<Turnstile>\\<^sub>n \\<phi> \\<longleftrightarrow> {\\<psi>. w \\<Turnstile>\\<^sub>n \\<psi>} \\<Turnstile>\\<^sub>P \\<phi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. w \\<Turnstile>\\<^sub>n \\<phi> =\n    {\\<psi>. w \\<Turnstile>\\<^sub>n \\<psi>} \\<Turnstile>\\<^sub>P \\<phi>", "by (induction \\<phi>) auto"], ["", "definition ltl_prop_equiv :: \"'a ltln \\<Rightarrow> 'a ltln \\<Rightarrow> bool\" (infix \"\\<sim>\\<^sub>P\" 75)\nwhere\n  \"\\<phi> \\<sim>\\<^sub>P \\<psi> \\<equiv> \\<forall>\\<A>. \\<A> \\<Turnstile>\\<^sub>P \\<phi> \\<longleftrightarrow> \\<A> \\<Turnstile>\\<^sub>P \\<psi>\""], ["", "definition ltl_prop_implies :: \"'a ltln \\<Rightarrow> 'a ltln \\<Rightarrow> bool\" (infix \"\\<longrightarrow>\\<^sub>P\" 75)\nwhere\n  \"\\<phi> \\<longrightarrow>\\<^sub>P \\<psi> \\<equiv> \\<forall>\\<A>. \\<A> \\<Turnstile>\\<^sub>P \\<phi> \\<longrightarrow> \\<A> \\<Turnstile>\\<^sub>P \\<psi>\""], ["", "lemma ltl_prop_implies_equiv:\n  \"\\<phi> \\<sim>\\<^sub>P \\<psi> \\<longleftrightarrow> (\\<phi> \\<longrightarrow>\\<^sub>P \\<psi> \\<and> \\<psi> \\<longrightarrow>\\<^sub>P \\<phi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<phi> \\<sim>\\<^sub>P \\<psi> =\n    (\\<phi> \\<longrightarrow>\\<^sub>P \\<psi> \\<and>\n     \\<psi> \\<longrightarrow>\\<^sub>P \\<phi>)", "unfolding ltl_prop_equiv_def ltl_prop_implies_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>\\<A>.\n        \\<A> \\<Turnstile>\\<^sub>P \\<phi> =\n        \\<A> \\<Turnstile>\\<^sub>P \\<psi>) =\n    ((\\<forall>\\<A>.\n         \\<A> \\<Turnstile>\\<^sub>P \\<phi> \\<longrightarrow>\n         \\<A> \\<Turnstile>\\<^sub>P \\<psi>) \\<and>\n     (\\<forall>\\<A>.\n         \\<A> \\<Turnstile>\\<^sub>P \\<psi> \\<longrightarrow>\n         \\<A> \\<Turnstile>\\<^sub>P \\<phi>))", "by meson"], ["", "lemma ltl_prop_equiv_equivp:\n  \"equivp (\\<sim>\\<^sub>P)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. equivp (\\<sim>\\<^sub>P)", "by (simp add: ltl_prop_equiv_def equivpI reflp_def symp_def transp_def)"], ["", "lemma ltl_prop_equiv_trans[trans]:\n  \"\\<phi> \\<sim>\\<^sub>P \\<psi> \\<Longrightarrow> \\<psi> \\<sim>\\<^sub>P \\<chi> \\<Longrightarrow> \\<phi> \\<sim>\\<^sub>P \\<chi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<phi> \\<sim>\\<^sub>P \\<psi>;\n     \\<psi> \\<sim>\\<^sub>P \\<chi>\\<rbrakk>\n    \\<Longrightarrow> \\<phi> \\<sim>\\<^sub>P \\<chi>", "by (simp add: ltl_prop_equiv_def)"], ["", "lemma ltl_prop_equiv_true:\n  \"\\<phi> \\<sim>\\<^sub>P true\\<^sub>n \\<longleftrightarrow> {} \\<Turnstile>\\<^sub>P \\<phi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<phi> \\<sim>\\<^sub>P true\\<^sub>n = {} \\<Turnstile>\\<^sub>P \\<phi>", "using bot.extremum ltl_prop_entailment.simps(1) ltl_prop_equiv_def"], ["proof (prove)\nusing this:\n  bot \\<le> ?a\n  ?\\<A> \\<Turnstile>\\<^sub>P true\\<^sub>n = True\n  ?\\<phi> \\<sim>\\<^sub>P ?\\<psi> \\<equiv>\n  \\<forall>\\<A>.\n     \\<A> \\<Turnstile>\\<^sub>P ?\\<phi> = \\<A> \\<Turnstile>\\<^sub>P ?\\<psi>\n\ngoal (1 subgoal):\n 1. \\<phi> \\<sim>\\<^sub>P true\\<^sub>n = {} \\<Turnstile>\\<^sub>P \\<phi>", "by blast"], ["", "lemma ltl_prop_equiv_false:\n  \"\\<phi> \\<sim>\\<^sub>P false\\<^sub>n \\<longleftrightarrow> \\<not> UNIV \\<Turnstile>\\<^sub>P \\<phi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<phi> \\<sim>\\<^sub>P false\\<^sub>n =\n    (\\<not> UNIV \\<Turnstile>\\<^sub>P \\<phi>)", "by (meson ltl_prop_entailment.simps(2) ltl_prop_entailment_monotonI ltl_prop_equiv_def top_greatest)"], ["", "lemma ltl_prop_equiv_true_implies_true:\n  \"x \\<sim>\\<^sub>P true\\<^sub>n \\<Longrightarrow> x \\<longrightarrow>\\<^sub>P y \\<Longrightarrow> y \\<sim>\\<^sub>P true\\<^sub>n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<sim>\\<^sub>P true\\<^sub>n;\n     x \\<longrightarrow>\\<^sub>P y\\<rbrakk>\n    \\<Longrightarrow> y \\<sim>\\<^sub>P true\\<^sub>n", "by (simp add: ltl_prop_equiv_def ltl_prop_implies_def)"], ["", "lemma ltl_prop_equiv_false_implied_by_false:\n  \"y \\<sim>\\<^sub>P false\\<^sub>n \\<Longrightarrow> x \\<longrightarrow>\\<^sub>P y \\<Longrightarrow> x \\<sim>\\<^sub>P false\\<^sub>n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>y \\<sim>\\<^sub>P false\\<^sub>n;\n     x \\<longrightarrow>\\<^sub>P y\\<rbrakk>\n    \\<Longrightarrow> x \\<sim>\\<^sub>P false\\<^sub>n", "by (simp add: ltl_prop_equiv_def ltl_prop_implies_def)"], ["", "lemma ltl_prop_implication_implies_ltl_implication:\n  \"w \\<Turnstile>\\<^sub>n \\<phi> \\<Longrightarrow> \\<phi> \\<longrightarrow>\\<^sub>P \\<psi> \\<Longrightarrow> w \\<Turnstile>\\<^sub>n \\<psi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>w \\<Turnstile>\\<^sub>n \\<phi>;\n     \\<phi> \\<longrightarrow>\\<^sub>P \\<psi>\\<rbrakk>\n    \\<Longrightarrow> w \\<Turnstile>\\<^sub>n \\<psi>", "using ltl_models_equiv_prop_entailment ltl_prop_implies_def"], ["proof (prove)\nusing this:\n  ?w \\<Turnstile>\\<^sub>n ?\\<phi> =\n  {\\<psi>. ?w \\<Turnstile>\\<^sub>n \\<psi>} \\<Turnstile>\\<^sub>P ?\\<phi>\n  ?\\<phi> \\<longrightarrow>\\<^sub>P ?\\<psi> \\<equiv>\n  \\<forall>\\<A>.\n     \\<A> \\<Turnstile>\\<^sub>P ?\\<phi> \\<longrightarrow>\n     \\<A> \\<Turnstile>\\<^sub>P ?\\<psi>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>w \\<Turnstile>\\<^sub>n \\<phi>;\n     \\<phi> \\<longrightarrow>\\<^sub>P \\<psi>\\<rbrakk>\n    \\<Longrightarrow> w \\<Turnstile>\\<^sub>n \\<psi>", "by blast"], ["", "lemma ltl_prop_equiv_implies_ltl_lang_equiv:\n  \"\\<phi> \\<sim>\\<^sub>P \\<psi> \\<Longrightarrow> \\<phi> \\<sim>\\<^sub>L \\<psi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<phi> \\<sim>\\<^sub>P \\<psi> \\<Longrightarrow>\n    \\<phi> \\<sim>\\<^sub>L \\<psi>", "using ltl_lang_equiv_def ltl_prop_implication_implies_ltl_implication ltl_prop_implies_equiv"], ["proof (prove)\nusing this:\n  ?\\<phi> \\<sim>\\<^sub>L ?\\<psi> \\<equiv>\n  \\<forall>w.\n     w \\<Turnstile>\\<^sub>n ?\\<phi> = w \\<Turnstile>\\<^sub>n ?\\<psi>\n  \\<lbrakk>?w \\<Turnstile>\\<^sub>n ?\\<phi>;\n   ?\\<phi> \\<longrightarrow>\\<^sub>P ?\\<psi>\\<rbrakk>\n  \\<Longrightarrow> ?w \\<Turnstile>\\<^sub>n ?\\<psi>\n  ?\\<phi> \\<sim>\\<^sub>P ?\\<psi> =\n  (?\\<phi> \\<longrightarrow>\\<^sub>P ?\\<psi> \\<and>\n   ?\\<psi> \\<longrightarrow>\\<^sub>P ?\\<phi>)\n\ngoal (1 subgoal):\n 1. \\<phi> \\<sim>\\<^sub>P \\<psi> \\<Longrightarrow>\n    \\<phi> \\<sim>\\<^sub>L \\<psi>", "by blast"], ["", "lemma ltl_prop_equiv_lt_ltl_lang_equiv[simp]:\n  \"(\\<sim>\\<^sub>P) \\<le> (\\<sim>\\<^sub>L)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<sim>\\<^sub>P) \\<le> (\\<sim>\\<^sub>L)", "using ltl_prop_equiv_implies_ltl_lang_equiv"], ["proof (prove)\nusing this:\n  ?\\<phi> \\<sim>\\<^sub>P ?\\<psi> \\<Longrightarrow>\n  ?\\<phi> \\<sim>\\<^sub>L ?\\<psi>\n\ngoal (1 subgoal):\n 1. (\\<sim>\\<^sub>P) \\<le> (\\<sim>\\<^sub>L)", "by blast"], ["", "subsection \\<open>Constants Equivalence\\<close>"], ["", "datatype tvl = Yes | No | Maybe"], ["", "definition eval_and :: \"tvl \\<Rightarrow> tvl \\<Rightarrow> tvl\"\nwhere\n  \"eval_and \\<phi> \\<psi> =\n    (case (\\<phi>, \\<psi>) of\n      (Yes, Yes) \\<Rightarrow> Yes\n    | (No, _) \\<Rightarrow> No\n    | (_, No) \\<Rightarrow> No\n    | _ \\<Rightarrow> Maybe)\""], ["", "definition eval_or :: \"tvl \\<Rightarrow> tvl \\<Rightarrow> tvl\"\nwhere\n  \"eval_or \\<phi> \\<psi> =\n    (case (\\<phi>, \\<psi>) of\n      (No, No) \\<Rightarrow> No\n    | (Yes, _) \\<Rightarrow> Yes\n    | (_, Yes) \\<Rightarrow> Yes\n    | _ \\<Rightarrow> Maybe)\""], ["", "fun eval :: \"'a ltln \\<Rightarrow> tvl\"\nwhere\n  \"eval true\\<^sub>n = Yes\"\n| \"eval false\\<^sub>n = No\"\n| \"eval (\\<phi> and\\<^sub>n \\<psi>) = eval_and (eval \\<phi>) (eval \\<psi>)\"\n| \"eval (\\<phi> or\\<^sub>n \\<psi>) = eval_or (eval \\<phi>) (eval \\<psi>)\"\n| \"eval \\<phi> = Maybe\""], ["", "lemma eval_and_const[simp]:\n  \"eval_and \\<phi> \\<psi> = No \\<longleftrightarrow> \\<phi> = No \\<or> \\<psi> = No\"\n  \"eval_and \\<phi> \\<psi> = Yes \\<longleftrightarrow> \\<phi> = Yes \\<and> \\<psi> = Yes\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (eval_and \\<phi> \\<psi> = No) = (\\<phi> = No \\<or> \\<psi> = No) &&&\n    (eval_and \\<phi> \\<psi> = Yes) = (\\<phi> = Yes \\<and> \\<psi> = Yes)", "unfolding eval_and_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((case (\\<phi>, \\<psi>) of (Yes, Yes) \\<Rightarrow> Yes\n      | (Yes, No) \\<Rightarrow> No | (Yes, Maybe) \\<Rightarrow> Maybe\n      | (No, xa) \\<Rightarrow> No | (Maybe, No) \\<Rightarrow> No\n      | (Maybe, _) \\<Rightarrow> Maybe) =\n     No) =\n    (\\<phi> = No \\<or> \\<psi> = No) &&&\n    ((case (\\<phi>, \\<psi>) of (Yes, Yes) \\<Rightarrow> Yes\n      | (Yes, No) \\<Rightarrow> No | (Yes, Maybe) \\<Rightarrow> Maybe\n      | (No, xa) \\<Rightarrow> No | (Maybe, No) \\<Rightarrow> No\n      | (Maybe, _) \\<Rightarrow> Maybe) =\n     Yes) =\n    (\\<phi> = Yes \\<and> \\<psi> = Yes)", "by (cases \\<phi>; cases \\<psi>, auto)+"], ["", "lemma eval_or_const[simp]:\n  \"eval_or \\<phi> \\<psi> = Yes \\<longleftrightarrow> \\<phi> = Yes \\<or> \\<psi> = Yes\"\n  \"eval_or \\<phi> \\<psi> = No \\<longleftrightarrow> \\<phi> = No \\<and> \\<psi> = No\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (eval_or \\<phi> \\<psi> = Yes) = (\\<phi> = Yes \\<or> \\<psi> = Yes) &&&\n    (eval_or \\<phi> \\<psi> = No) = (\\<phi> = No \\<and> \\<psi> = No)", "unfolding eval_or_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((case (\\<phi>, \\<psi>) of (Yes, xa) \\<Rightarrow> Yes\n      | (No, Yes) \\<Rightarrow> Yes | (No, No) \\<Rightarrow> No\n      | (No, Maybe) \\<Rightarrow> Maybe | (Maybe, Yes) \\<Rightarrow> Yes\n      | (Maybe, _) \\<Rightarrow> Maybe) =\n     Yes) =\n    (\\<phi> = Yes \\<or> \\<psi> = Yes) &&&\n    ((case (\\<phi>, \\<psi>) of (Yes, xa) \\<Rightarrow> Yes\n      | (No, Yes) \\<Rightarrow> Yes | (No, No) \\<Rightarrow> No\n      | (No, Maybe) \\<Rightarrow> Maybe | (Maybe, Yes) \\<Rightarrow> Yes\n      | (Maybe, _) \\<Rightarrow> Maybe) =\n     No) =\n    (\\<phi> = No \\<and> \\<psi> = No)", "by (cases \\<phi>; cases \\<psi>, auto)+"], ["", "lemma eval_prop_entailment:\n  \"eval \\<phi> = Yes \\<longleftrightarrow> {} \\<Turnstile>\\<^sub>P \\<phi>\"\n  \"eval \\<phi> = No \\<longleftrightarrow> \\<not> UNIV \\<Turnstile>\\<^sub>P \\<phi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (eval \\<phi> = Yes) = {} \\<Turnstile>\\<^sub>P \\<phi> &&&\n    (eval \\<phi> = No) = (\\<not> UNIV \\<Turnstile>\\<^sub>P \\<phi>)", "by (induction \\<phi>) auto"], ["", "definition ltl_const_equiv :: \"'a ltln \\<Rightarrow> 'a ltln \\<Rightarrow> bool\" (infix \"\\<sim>\\<^sub>C\" 75)\nwhere\n  \"\\<phi> \\<sim>\\<^sub>C \\<psi> \\<equiv> \\<phi> = \\<psi> \\<or> (eval \\<phi> = eval \\<psi> \\<and> eval \\<psi> \\<noteq> Maybe)\""], ["", "lemma ltl_const_equiv_equivp:\n  \"equivp (\\<sim>\\<^sub>C)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. equivp (\\<sim>\\<^sub>C)", "unfolding ltl_const_equiv_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. equivp\n     (\\<lambda>\\<phi> \\<psi>.\n         \\<phi> = \\<psi> \\<or>\n         eval \\<phi> = eval \\<psi> \\<and> eval \\<psi> \\<noteq> Maybe)", "by (intro equivpI reflpI sympI transpI) auto"], ["", "lemma ltl_const_equiv_const:\n  \"\\<phi> \\<sim>\\<^sub>C true\\<^sub>n \\<longleftrightarrow> eval \\<phi> = Yes\"\n  \"\\<phi> \\<sim>\\<^sub>C false\\<^sub>n \\<longleftrightarrow> eval \\<phi> = No\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<phi> \\<sim>\\<^sub>C true\\<^sub>n = (eval \\<phi> = Yes) &&&\n    \\<phi> \\<sim>\\<^sub>C false\\<^sub>n = (eval \\<phi> = No)", "unfolding ltl_const_equiv_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<phi> = true\\<^sub>n \\<or>\n     eval \\<phi> = eval true\\<^sub>n \\<and>\n     eval true\\<^sub>n \\<noteq> Maybe) =\n    (eval \\<phi> = Yes) &&&\n    (\\<phi> = false\\<^sub>n \\<or>\n     eval \\<phi> = eval false\\<^sub>n \\<and>\n     eval false\\<^sub>n \\<noteq> Maybe) =\n    (eval \\<phi> = No)", "by force+"], ["", "lemma ltl_const_equiv_and_const[simp]:\n  \"\\<phi>\\<^sub>1 and\\<^sub>n \\<phi>\\<^sub>2 \\<sim>\\<^sub>C true\\<^sub>n \\<longleftrightarrow> \\<phi>\\<^sub>1 \\<sim>\\<^sub>C true\\<^sub>n \\<and> \\<phi>\\<^sub>2 \\<sim>\\<^sub>C true\\<^sub>n\"\n  \"\\<phi>\\<^sub>1 and\\<^sub>n \\<phi>\\<^sub>2 \\<sim>\\<^sub>C false\\<^sub>n \\<longleftrightarrow> \\<phi>\\<^sub>1 \\<sim>\\<^sub>C false\\<^sub>n \\<or> \\<phi>\\<^sub>2 \\<sim>\\<^sub>C false\\<^sub>n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<phi>\\<^sub>1 and\\<^sub>n \\<phi>\\<^sub>2 \\<sim>\\<^sub>C true\\<^sub>n =\n    (\\<phi>\\<^sub>1 \\<sim>\\<^sub>C true\\<^sub>n \\<and>\n     \\<phi>\\<^sub>2 \\<sim>\\<^sub>C true\\<^sub>n) &&&\n    \\<phi>\\<^sub>1 and\\<^sub>n \\<phi>\\<^sub>2 \\<sim>\\<^sub>C false\\<^sub>n =\n    (\\<phi>\\<^sub>1 \\<sim>\\<^sub>C false\\<^sub>n \\<or>\n     \\<phi>\\<^sub>2 \\<sim>\\<^sub>C false\\<^sub>n)", "unfolding ltl_const_equiv_const"], ["proof (prove)\ngoal (1 subgoal):\n 1. (eval (\\<phi>\\<^sub>1 and\\<^sub>n \\<phi>\\<^sub>2) = Yes) =\n    (eval \\<phi>\\<^sub>1 = Yes \\<and> eval \\<phi>\\<^sub>2 = Yes) &&&\n    (eval (\\<phi>\\<^sub>1 and\\<^sub>n \\<phi>\\<^sub>2) = No) =\n    (eval \\<phi>\\<^sub>1 = No \\<or> eval \\<phi>\\<^sub>2 = No)", "by force+"], ["", "lemma ltl_const_equiv_or_const[simp]:\n  \"\\<phi>\\<^sub>1 or\\<^sub>n \\<phi>\\<^sub>2 \\<sim>\\<^sub>C true\\<^sub>n \\<longleftrightarrow> \\<phi>\\<^sub>1 \\<sim>\\<^sub>C true\\<^sub>n \\<or> \\<phi>\\<^sub>2 \\<sim>\\<^sub>C true\\<^sub>n\"\n  \"\\<phi>\\<^sub>1 or\\<^sub>n \\<phi>\\<^sub>2 \\<sim>\\<^sub>C false\\<^sub>n \\<longleftrightarrow> \\<phi>\\<^sub>1 \\<sim>\\<^sub>C false\\<^sub>n \\<and> \\<phi>\\<^sub>2 \\<sim>\\<^sub>C false\\<^sub>n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<phi>\\<^sub>1 or\\<^sub>n \\<phi>\\<^sub>2 \\<sim>\\<^sub>C true\\<^sub>n =\n    (\\<phi>\\<^sub>1 \\<sim>\\<^sub>C true\\<^sub>n \\<or>\n     \\<phi>\\<^sub>2 \\<sim>\\<^sub>C true\\<^sub>n) &&&\n    \\<phi>\\<^sub>1 or\\<^sub>n \\<phi>\\<^sub>2 \\<sim>\\<^sub>C false\\<^sub>n =\n    (\\<phi>\\<^sub>1 \\<sim>\\<^sub>C false\\<^sub>n \\<and>\n     \\<phi>\\<^sub>2 \\<sim>\\<^sub>C false\\<^sub>n)", "unfolding ltl_const_equiv_const"], ["proof (prove)\ngoal (1 subgoal):\n 1. (eval (\\<phi>\\<^sub>1 or\\<^sub>n \\<phi>\\<^sub>2) = Yes) =\n    (eval \\<phi>\\<^sub>1 = Yes \\<or> eval \\<phi>\\<^sub>2 = Yes) &&&\n    (eval (\\<phi>\\<^sub>1 or\\<^sub>n \\<phi>\\<^sub>2) = No) =\n    (eval \\<phi>\\<^sub>1 = No \\<and> eval \\<phi>\\<^sub>2 = No)", "by force+"], ["", "lemma ltl_const_equiv_other[simp]:\n  \"\\<phi> \\<sim>\\<^sub>C prop\\<^sub>n(a) \\<longleftrightarrow> \\<phi> = prop\\<^sub>n(a)\"\n  \"\\<phi> \\<sim>\\<^sub>C nprop\\<^sub>n(a) \\<longleftrightarrow> \\<phi> = nprop\\<^sub>n(a)\"\n  \"\\<phi> \\<sim>\\<^sub>C X\\<^sub>n \\<psi> \\<longleftrightarrow> \\<phi> = X\\<^sub>n \\<psi>\"\n  \"\\<phi> \\<sim>\\<^sub>C \\<psi>\\<^sub>1 U\\<^sub>n \\<psi>\\<^sub>2 \\<longleftrightarrow> \\<phi> = \\<psi>\\<^sub>1 U\\<^sub>n \\<psi>\\<^sub>2\"\n  \"\\<phi> \\<sim>\\<^sub>C \\<psi>\\<^sub>1 R\\<^sub>n \\<psi>\\<^sub>2 \\<longleftrightarrow> \\<phi> = \\<psi>\\<^sub>1 R\\<^sub>n \\<psi>\\<^sub>2\"\n  \"\\<phi> \\<sim>\\<^sub>C \\<psi>\\<^sub>1 W\\<^sub>n \\<psi>\\<^sub>2 \\<longleftrightarrow> \\<phi> = \\<psi>\\<^sub>1 W\\<^sub>n \\<psi>\\<^sub>2\"\n  \"\\<phi> \\<sim>\\<^sub>C \\<psi>\\<^sub>1 M\\<^sub>n \\<psi>\\<^sub>2 \\<longleftrightarrow> \\<phi> = \\<psi>\\<^sub>1 M\\<^sub>n \\<psi>\\<^sub>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<phi> \\<sim>\\<^sub>C prop\\<^sub>n(a) = (\\<phi> = prop\\<^sub>n(a)) &&&\n     \\<phi> \\<sim>\\<^sub>C nprop\\<^sub>n(a) =\n     (\\<phi> = nprop\\<^sub>n(a)) &&&\n     \\<phi> \\<sim>\\<^sub>C X\\<^sub>n \\<psi> =\n     (\\<phi> = X\\<^sub>n \\<psi>)) &&&\n    (\\<phi> \\<sim>\\<^sub>C \\<psi>\\<^sub>1 U\\<^sub>n \\<psi>\\<^sub>2 =\n     (\\<phi> = \\<psi>\\<^sub>1 U\\<^sub>n \\<psi>\\<^sub>2) &&&\n     \\<phi> \\<sim>\\<^sub>C \\<psi>\\<^sub>1 R\\<^sub>n \\<psi>\\<^sub>2 =\n     (\\<phi> = \\<psi>\\<^sub>1 R\\<^sub>n \\<psi>\\<^sub>2)) &&&\n    \\<phi> \\<sim>\\<^sub>C \\<psi>\\<^sub>1 W\\<^sub>n \\<psi>\\<^sub>2 =\n    (\\<phi> = \\<psi>\\<^sub>1 W\\<^sub>n \\<psi>\\<^sub>2) &&&\n    \\<phi> \\<sim>\\<^sub>C \\<psi>\\<^sub>1 M\\<^sub>n \\<psi>\\<^sub>2 =\n    (\\<phi> = \\<psi>\\<^sub>1 M\\<^sub>n \\<psi>\\<^sub>2)", "using ltl_const_equiv_def"], ["proof (prove)\nusing this:\n  ?\\<phi> \\<sim>\\<^sub>C ?\\<psi> \\<equiv>\n  ?\\<phi> = ?\\<psi> \\<or>\n  eval ?\\<phi> = eval ?\\<psi> \\<and> eval ?\\<psi> \\<noteq> Maybe\n\ngoal (1 subgoal):\n 1. (\\<phi> \\<sim>\\<^sub>C prop\\<^sub>n(a) = (\\<phi> = prop\\<^sub>n(a)) &&&\n     \\<phi> \\<sim>\\<^sub>C nprop\\<^sub>n(a) =\n     (\\<phi> = nprop\\<^sub>n(a)) &&&\n     \\<phi> \\<sim>\\<^sub>C X\\<^sub>n \\<psi> =\n     (\\<phi> = X\\<^sub>n \\<psi>)) &&&\n    (\\<phi> \\<sim>\\<^sub>C \\<psi>\\<^sub>1 U\\<^sub>n \\<psi>\\<^sub>2 =\n     (\\<phi> = \\<psi>\\<^sub>1 U\\<^sub>n \\<psi>\\<^sub>2) &&&\n     \\<phi> \\<sim>\\<^sub>C \\<psi>\\<^sub>1 R\\<^sub>n \\<psi>\\<^sub>2 =\n     (\\<phi> = \\<psi>\\<^sub>1 R\\<^sub>n \\<psi>\\<^sub>2)) &&&\n    \\<phi> \\<sim>\\<^sub>C \\<psi>\\<^sub>1 W\\<^sub>n \\<psi>\\<^sub>2 =\n    (\\<phi> = \\<psi>\\<^sub>1 W\\<^sub>n \\<psi>\\<^sub>2) &&&\n    \\<phi> \\<sim>\\<^sub>C \\<psi>\\<^sub>1 M\\<^sub>n \\<psi>\\<^sub>2 =\n    (\\<phi> = \\<psi>\\<^sub>1 M\\<^sub>n \\<psi>\\<^sub>2)", "by fastforce+"], ["", "lemma ltl_const_equiv_no_const_singleton:\n  \"eval \\<psi> = Maybe \\<Longrightarrow> \\<phi> \\<sim>\\<^sub>C \\<psi> \\<Longrightarrow> \\<phi> = \\<psi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>eval \\<psi> = Maybe; \\<phi> \\<sim>\\<^sub>C \\<psi>\\<rbrakk>\n    \\<Longrightarrow> \\<phi> = \\<psi>", "unfolding ltl_const_equiv_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>eval \\<psi> = Maybe;\n     \\<phi> = \\<psi> \\<or>\n     eval \\<phi> = eval \\<psi> \\<and> eval \\<psi> \\<noteq> Maybe\\<rbrakk>\n    \\<Longrightarrow> \\<phi> = \\<psi>", "by fastforce"], ["", "lemma ltl_const_equiv_implies_prop_equiv:\n  \"\\<phi> \\<sim>\\<^sub>C true\\<^sub>n \\<longleftrightarrow> \\<phi> \\<sim>\\<^sub>P true\\<^sub>n\"\n  \"\\<phi> \\<sim>\\<^sub>C false\\<^sub>n \\<longleftrightarrow> \\<phi> \\<sim>\\<^sub>P false\\<^sub>n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<phi> \\<sim>\\<^sub>C true\\<^sub>n =\n    \\<phi> \\<sim>\\<^sub>P true\\<^sub>n &&&\n    \\<phi> \\<sim>\\<^sub>C false\\<^sub>n =\n    \\<phi> \\<sim>\\<^sub>P false\\<^sub>n", "unfolding ltl_const_equiv_const eval_prop_entailment ltl_prop_equiv_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {} \\<Turnstile>\\<^sub>P \\<phi> =\n    (\\<forall>\\<A>.\n        \\<A> \\<Turnstile>\\<^sub>P \\<phi> =\n        \\<A> \\<Turnstile>\\<^sub>P true\\<^sub>n) &&&\n    (\\<not> UNIV \\<Turnstile>\\<^sub>P \\<phi>) =\n    (\\<forall>\\<A>.\n        \\<A> \\<Turnstile>\\<^sub>P \\<phi> =\n        \\<A> \\<Turnstile>\\<^sub>P false\\<^sub>n)", "by auto"], ["", "lemma ltl_const_equiv_no_const_prop_equiv:\n  \"eval \\<psi> = Maybe \\<Longrightarrow> \\<phi> \\<sim>\\<^sub>C \\<psi> \\<Longrightarrow> \\<phi> \\<sim>\\<^sub>P \\<psi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>eval \\<psi> = Maybe; \\<phi> \\<sim>\\<^sub>C \\<psi>\\<rbrakk>\n    \\<Longrightarrow> \\<phi> \\<sim>\\<^sub>P \\<psi>", "using ltl_const_equiv_no_const_singleton equivp_reflp[OF ltl_prop_equiv_equivp]"], ["proof (prove)\nusing this:\n  \\<lbrakk>eval ?\\<psi> = Maybe; ?\\<phi> \\<sim>\\<^sub>C ?\\<psi>\\<rbrakk>\n  \\<Longrightarrow> ?\\<phi> = ?\\<psi>\n  ?x \\<sim>\\<^sub>P ?x\n\ngoal (1 subgoal):\n 1. \\<lbrakk>eval \\<psi> = Maybe; \\<phi> \\<sim>\\<^sub>C \\<psi>\\<rbrakk>\n    \\<Longrightarrow> \\<phi> \\<sim>\\<^sub>P \\<psi>", "by blast"], ["", "lemma ltl_const_equiv_implies_ltl_prop_equiv:\n  \"\\<phi> \\<sim>\\<^sub>C \\<psi> \\<Longrightarrow> \\<phi> \\<sim>\\<^sub>P \\<psi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<phi> \\<sim>\\<^sub>C \\<psi> \\<Longrightarrow>\n    \\<phi> \\<sim>\\<^sub>P \\<psi>", "proof (induction \\<psi>)"], ["proof (state)\ngoal (11 subgoals):\n 1. \\<phi> \\<sim>\\<^sub>C true\\<^sub>n \\<Longrightarrow>\n    \\<phi> \\<sim>\\<^sub>P true\\<^sub>n\n 2. \\<phi> \\<sim>\\<^sub>C false\\<^sub>n \\<Longrightarrow>\n    \\<phi> \\<sim>\\<^sub>P false\\<^sub>n\n 3. \\<And>x.\n       \\<phi> \\<sim>\\<^sub>C prop\\<^sub>n(x) \\<Longrightarrow>\n       \\<phi> \\<sim>\\<^sub>P prop\\<^sub>n(x)\n 4. \\<And>x.\n       \\<phi> \\<sim>\\<^sub>C nprop\\<^sub>n(x) \\<Longrightarrow>\n       \\<phi> \\<sim>\\<^sub>P nprop\\<^sub>n(x)\n 5. \\<And>\\<psi>1 \\<psi>2.\n       \\<lbrakk>\\<phi> \\<sim>\\<^sub>C \\<psi>1 \\<Longrightarrow>\n                \\<phi> \\<sim>\\<^sub>P \\<psi>1;\n        \\<phi> \\<sim>\\<^sub>C \\<psi>2 \\<Longrightarrow>\n        \\<phi> \\<sim>\\<^sub>P \\<psi>2;\n        \\<phi> \\<sim>\\<^sub>C \\<psi>1 and\\<^sub>n \\<psi>2\\<rbrakk>\n       \\<Longrightarrow> \\<phi> \\<sim>\\<^sub>P \\<psi>1 and\\<^sub>n \\<psi>2\n 6. \\<And>\\<psi>1 \\<psi>2.\n       \\<lbrakk>\\<phi> \\<sim>\\<^sub>C \\<psi>1 \\<Longrightarrow>\n                \\<phi> \\<sim>\\<^sub>P \\<psi>1;\n        \\<phi> \\<sim>\\<^sub>C \\<psi>2 \\<Longrightarrow>\n        \\<phi> \\<sim>\\<^sub>P \\<psi>2;\n        \\<phi> \\<sim>\\<^sub>C \\<psi>1 or\\<^sub>n \\<psi>2\\<rbrakk>\n       \\<Longrightarrow> \\<phi> \\<sim>\\<^sub>P \\<psi>1 or\\<^sub>n \\<psi>2\n 7. \\<And>\\<psi>.\n       \\<lbrakk>\\<phi> \\<sim>\\<^sub>C \\<psi> \\<Longrightarrow>\n                \\<phi> \\<sim>\\<^sub>P \\<psi>;\n        \\<phi> \\<sim>\\<^sub>C X\\<^sub>n \\<psi>\\<rbrakk>\n       \\<Longrightarrow> \\<phi> \\<sim>\\<^sub>P X\\<^sub>n \\<psi>\n 8. \\<And>\\<psi>1 \\<psi>2.\n       \\<lbrakk>\\<phi> \\<sim>\\<^sub>C \\<psi>1 \\<Longrightarrow>\n                \\<phi> \\<sim>\\<^sub>P \\<psi>1;\n        \\<phi> \\<sim>\\<^sub>C \\<psi>2 \\<Longrightarrow>\n        \\<phi> \\<sim>\\<^sub>P \\<psi>2;\n        \\<phi> \\<sim>\\<^sub>C \\<psi>1 U\\<^sub>n \\<psi>2\\<rbrakk>\n       \\<Longrightarrow> \\<phi> \\<sim>\\<^sub>P \\<psi>1 U\\<^sub>n \\<psi>2\n 9. \\<And>\\<psi>1 \\<psi>2.\n       \\<lbrakk>\\<phi> \\<sim>\\<^sub>C \\<psi>1 \\<Longrightarrow>\n                \\<phi> \\<sim>\\<^sub>P \\<psi>1;\n        \\<phi> \\<sim>\\<^sub>C \\<psi>2 \\<Longrightarrow>\n        \\<phi> \\<sim>\\<^sub>P \\<psi>2;\n        \\<phi> \\<sim>\\<^sub>C \\<psi>1 R\\<^sub>n \\<psi>2\\<rbrakk>\n       \\<Longrightarrow> \\<phi> \\<sim>\\<^sub>P \\<psi>1 R\\<^sub>n \\<psi>2\n 10. \\<And>\\<psi>1 \\<psi>2.\n        \\<lbrakk>\\<phi> \\<sim>\\<^sub>C \\<psi>1 \\<Longrightarrow>\n                 \\<phi> \\<sim>\\<^sub>P \\<psi>1;\n         \\<phi> \\<sim>\\<^sub>C \\<psi>2 \\<Longrightarrow>\n         \\<phi> \\<sim>\\<^sub>P \\<psi>2;\n         \\<phi> \\<sim>\\<^sub>C \\<psi>1 W\\<^sub>n \\<psi>2\\<rbrakk>\n        \\<Longrightarrow> \\<phi> \\<sim>\\<^sub>P \\<psi>1 W\\<^sub>n \\<psi>2\nA total of 11 subgoals...", "case (And_ltln \\<psi>1 \\<psi>2)"], ["proof (state)\nthis:\n  \\<phi> \\<sim>\\<^sub>C \\<psi>1 \\<Longrightarrow>\n  \\<phi> \\<sim>\\<^sub>P \\<psi>1\n  \\<phi> \\<sim>\\<^sub>C \\<psi>2 \\<Longrightarrow>\n  \\<phi> \\<sim>\\<^sub>P \\<psi>2\n  \\<phi> \\<sim>\\<^sub>C \\<psi>1 and\\<^sub>n \\<psi>2\n\ngoal (11 subgoals):\n 1. \\<phi> \\<sim>\\<^sub>C true\\<^sub>n \\<Longrightarrow>\n    \\<phi> \\<sim>\\<^sub>P true\\<^sub>n\n 2. \\<phi> \\<sim>\\<^sub>C false\\<^sub>n \\<Longrightarrow>\n    \\<phi> \\<sim>\\<^sub>P false\\<^sub>n\n 3. \\<And>x.\n       \\<phi> \\<sim>\\<^sub>C prop\\<^sub>n(x) \\<Longrightarrow>\n       \\<phi> \\<sim>\\<^sub>P prop\\<^sub>n(x)\n 4. \\<And>x.\n       \\<phi> \\<sim>\\<^sub>C nprop\\<^sub>n(x) \\<Longrightarrow>\n       \\<phi> \\<sim>\\<^sub>P nprop\\<^sub>n(x)\n 5. \\<And>\\<psi>1 \\<psi>2.\n       \\<lbrakk>\\<phi> \\<sim>\\<^sub>C \\<psi>1 \\<Longrightarrow>\n                \\<phi> \\<sim>\\<^sub>P \\<psi>1;\n        \\<phi> \\<sim>\\<^sub>C \\<psi>2 \\<Longrightarrow>\n        \\<phi> \\<sim>\\<^sub>P \\<psi>2;\n        \\<phi> \\<sim>\\<^sub>C \\<psi>1 and\\<^sub>n \\<psi>2\\<rbrakk>\n       \\<Longrightarrow> \\<phi> \\<sim>\\<^sub>P \\<psi>1 and\\<^sub>n \\<psi>2\n 6. \\<And>\\<psi>1 \\<psi>2.\n       \\<lbrakk>\\<phi> \\<sim>\\<^sub>C \\<psi>1 \\<Longrightarrow>\n                \\<phi> \\<sim>\\<^sub>P \\<psi>1;\n        \\<phi> \\<sim>\\<^sub>C \\<psi>2 \\<Longrightarrow>\n        \\<phi> \\<sim>\\<^sub>P \\<psi>2;\n        \\<phi> \\<sim>\\<^sub>C \\<psi>1 or\\<^sub>n \\<psi>2\\<rbrakk>\n       \\<Longrightarrow> \\<phi> \\<sim>\\<^sub>P \\<psi>1 or\\<^sub>n \\<psi>2\n 7. \\<And>\\<psi>.\n       \\<lbrakk>\\<phi> \\<sim>\\<^sub>C \\<psi> \\<Longrightarrow>\n                \\<phi> \\<sim>\\<^sub>P \\<psi>;\n        \\<phi> \\<sim>\\<^sub>C X\\<^sub>n \\<psi>\\<rbrakk>\n       \\<Longrightarrow> \\<phi> \\<sim>\\<^sub>P X\\<^sub>n \\<psi>\n 8. \\<And>\\<psi>1 \\<psi>2.\n       \\<lbrakk>\\<phi> \\<sim>\\<^sub>C \\<psi>1 \\<Longrightarrow>\n                \\<phi> \\<sim>\\<^sub>P \\<psi>1;\n        \\<phi> \\<sim>\\<^sub>C \\<psi>2 \\<Longrightarrow>\n        \\<phi> \\<sim>\\<^sub>P \\<psi>2;\n        \\<phi> \\<sim>\\<^sub>C \\<psi>1 U\\<^sub>n \\<psi>2\\<rbrakk>\n       \\<Longrightarrow> \\<phi> \\<sim>\\<^sub>P \\<psi>1 U\\<^sub>n \\<psi>2\n 9. \\<And>\\<psi>1 \\<psi>2.\n       \\<lbrakk>\\<phi> \\<sim>\\<^sub>C \\<psi>1 \\<Longrightarrow>\n                \\<phi> \\<sim>\\<^sub>P \\<psi>1;\n        \\<phi> \\<sim>\\<^sub>C \\<psi>2 \\<Longrightarrow>\n        \\<phi> \\<sim>\\<^sub>P \\<psi>2;\n        \\<phi> \\<sim>\\<^sub>C \\<psi>1 R\\<^sub>n \\<psi>2\\<rbrakk>\n       \\<Longrightarrow> \\<phi> \\<sim>\\<^sub>P \\<psi>1 R\\<^sub>n \\<psi>2\n 10. \\<And>\\<psi>1 \\<psi>2.\n        \\<lbrakk>\\<phi> \\<sim>\\<^sub>C \\<psi>1 \\<Longrightarrow>\n                 \\<phi> \\<sim>\\<^sub>P \\<psi>1;\n         \\<phi> \\<sim>\\<^sub>C \\<psi>2 \\<Longrightarrow>\n         \\<phi> \\<sim>\\<^sub>P \\<psi>2;\n         \\<phi> \\<sim>\\<^sub>C \\<psi>1 W\\<^sub>n \\<psi>2\\<rbrakk>\n        \\<Longrightarrow> \\<phi> \\<sim>\\<^sub>P \\<psi>1 W\\<^sub>n \\<psi>2\nA total of 11 subgoals...", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<phi> \\<sim>\\<^sub>P \\<psi>1 and\\<^sub>n \\<psi>2", "proof (cases \"eval (\\<psi>1 and\\<^sub>n \\<psi>2)\")"], ["proof (state)\ngoal (3 subgoals):\n 1. eval (\\<psi>1 and\\<^sub>n \\<psi>2) = Yes \\<Longrightarrow>\n    \\<phi> \\<sim>\\<^sub>P \\<psi>1 and\\<^sub>n \\<psi>2\n 2. eval (\\<psi>1 and\\<^sub>n \\<psi>2) = No \\<Longrightarrow>\n    \\<phi> \\<sim>\\<^sub>P \\<psi>1 and\\<^sub>n \\<psi>2\n 3. eval (\\<psi>1 and\\<^sub>n \\<psi>2) = Maybe \\<Longrightarrow>\n    \\<phi> \\<sim>\\<^sub>P \\<psi>1 and\\<^sub>n \\<psi>2", "case Yes"], ["proof (state)\nthis:\n  eval (\\<psi>1 and\\<^sub>n \\<psi>2) = Yes\n\ngoal (3 subgoals):\n 1. eval (\\<psi>1 and\\<^sub>n \\<psi>2) = Yes \\<Longrightarrow>\n    \\<phi> \\<sim>\\<^sub>P \\<psi>1 and\\<^sub>n \\<psi>2\n 2. eval (\\<psi>1 and\\<^sub>n \\<psi>2) = No \\<Longrightarrow>\n    \\<phi> \\<sim>\\<^sub>P \\<psi>1 and\\<^sub>n \\<psi>2\n 3. eval (\\<psi>1 and\\<^sub>n \\<psi>2) = Maybe \\<Longrightarrow>\n    \\<phi> \\<sim>\\<^sub>P \\<psi>1 and\\<^sub>n \\<psi>2", "then"], ["proof (chain)\npicking this:\n  eval (\\<psi>1 and\\<^sub>n \\<psi>2) = Yes", "have \"\\<phi> \\<sim>\\<^sub>C true\\<^sub>n\""], ["proof (prove)\nusing this:\n  eval (\\<psi>1 and\\<^sub>n \\<psi>2) = Yes\n\ngoal (1 subgoal):\n 1. \\<phi> \\<sim>\\<^sub>C true\\<^sub>n", "by (meson And_ltln.prems equivp_transp ltl_const_equiv_const(1) ltl_const_equiv_equivp)"], ["proof (state)\nthis:\n  \\<phi> \\<sim>\\<^sub>C true\\<^sub>n\n\ngoal (3 subgoals):\n 1. eval (\\<psi>1 and\\<^sub>n \\<psi>2) = Yes \\<Longrightarrow>\n    \\<phi> \\<sim>\\<^sub>P \\<psi>1 and\\<^sub>n \\<psi>2\n 2. eval (\\<psi>1 and\\<^sub>n \\<psi>2) = No \\<Longrightarrow>\n    \\<phi> \\<sim>\\<^sub>P \\<psi>1 and\\<^sub>n \\<psi>2\n 3. eval (\\<psi>1 and\\<^sub>n \\<psi>2) = Maybe \\<Longrightarrow>\n    \\<phi> \\<sim>\\<^sub>P \\<psi>1 and\\<^sub>n \\<psi>2", "then"], ["proof (chain)\npicking this:\n  \\<phi> \\<sim>\\<^sub>C true\\<^sub>n", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<phi> \\<sim>\\<^sub>C true\\<^sub>n\n\ngoal (1 subgoal):\n 1. \\<phi> \\<sim>\\<^sub>P \\<psi>1 and\\<^sub>n \\<psi>2", "by (metis (full_types) Yes ltl_const_equiv_const(1) ltl_const_equiv_implies_prop_equiv(1) ltl_prop_equiv_trans ltl_prop_implies_equiv)"], ["proof (state)\nthis:\n  \\<phi> \\<sim>\\<^sub>P \\<psi>1 and\\<^sub>n \\<psi>2\n\ngoal (2 subgoals):\n 1. eval (\\<psi>1 and\\<^sub>n \\<psi>2) = No \\<Longrightarrow>\n    \\<phi> \\<sim>\\<^sub>P \\<psi>1 and\\<^sub>n \\<psi>2\n 2. eval (\\<psi>1 and\\<^sub>n \\<psi>2) = Maybe \\<Longrightarrow>\n    \\<phi> \\<sim>\\<^sub>P \\<psi>1 and\\<^sub>n \\<psi>2", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. eval (\\<psi>1 and\\<^sub>n \\<psi>2) = No \\<Longrightarrow>\n    \\<phi> \\<sim>\\<^sub>P \\<psi>1 and\\<^sub>n \\<psi>2\n 2. eval (\\<psi>1 and\\<^sub>n \\<psi>2) = Maybe \\<Longrightarrow>\n    \\<phi> \\<sim>\\<^sub>P \\<psi>1 and\\<^sub>n \\<psi>2", "case No"], ["proof (state)\nthis:\n  eval (\\<psi>1 and\\<^sub>n \\<psi>2) = No\n\ngoal (2 subgoals):\n 1. eval (\\<psi>1 and\\<^sub>n \\<psi>2) = No \\<Longrightarrow>\n    \\<phi> \\<sim>\\<^sub>P \\<psi>1 and\\<^sub>n \\<psi>2\n 2. eval (\\<psi>1 and\\<^sub>n \\<psi>2) = Maybe \\<Longrightarrow>\n    \\<phi> \\<sim>\\<^sub>P \\<psi>1 and\\<^sub>n \\<psi>2", "then"], ["proof (chain)\npicking this:\n  eval (\\<psi>1 and\\<^sub>n \\<psi>2) = No", "have \"\\<phi> \\<sim>\\<^sub>C false\\<^sub>n\""], ["proof (prove)\nusing this:\n  eval (\\<psi>1 and\\<^sub>n \\<psi>2) = No\n\ngoal (1 subgoal):\n 1. \\<phi> \\<sim>\\<^sub>C false\\<^sub>n", "by (meson And_ltln.prems equivp_transp ltl_const_equiv_const(2) ltl_const_equiv_equivp)"], ["proof (state)\nthis:\n  \\<phi> \\<sim>\\<^sub>C false\\<^sub>n\n\ngoal (2 subgoals):\n 1. eval (\\<psi>1 and\\<^sub>n \\<psi>2) = No \\<Longrightarrow>\n    \\<phi> \\<sim>\\<^sub>P \\<psi>1 and\\<^sub>n \\<psi>2\n 2. eval (\\<psi>1 and\\<^sub>n \\<psi>2) = Maybe \\<Longrightarrow>\n    \\<phi> \\<sim>\\<^sub>P \\<psi>1 and\\<^sub>n \\<psi>2", "then"], ["proof (chain)\npicking this:\n  \\<phi> \\<sim>\\<^sub>C false\\<^sub>n", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<phi> \\<sim>\\<^sub>C false\\<^sub>n\n\ngoal (1 subgoal):\n 1. \\<phi> \\<sim>\\<^sub>P \\<psi>1 and\\<^sub>n \\<psi>2", "by (metis (full_types) No ltl_const_equiv_const(2) ltl_const_equiv_implies_prop_equiv(2) ltl_prop_equiv_trans ltl_prop_implies_equiv)"], ["proof (state)\nthis:\n  \\<phi> \\<sim>\\<^sub>P \\<psi>1 and\\<^sub>n \\<psi>2\n\ngoal (1 subgoal):\n 1. eval (\\<psi>1 and\\<^sub>n \\<psi>2) = Maybe \\<Longrightarrow>\n    \\<phi> \\<sim>\\<^sub>P \\<psi>1 and\\<^sub>n \\<psi>2", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. eval (\\<psi>1 and\\<^sub>n \\<psi>2) = Maybe \\<Longrightarrow>\n    \\<phi> \\<sim>\\<^sub>P \\<psi>1 and\\<^sub>n \\<psi>2", "case Maybe"], ["proof (state)\nthis:\n  eval (\\<psi>1 and\\<^sub>n \\<psi>2) = Maybe\n\ngoal (1 subgoal):\n 1. eval (\\<psi>1 and\\<^sub>n \\<psi>2) = Maybe \\<Longrightarrow>\n    \\<phi> \\<sim>\\<^sub>P \\<psi>1 and\\<^sub>n \\<psi>2", "then"], ["proof (chain)\npicking this:\n  eval (\\<psi>1 and\\<^sub>n \\<psi>2) = Maybe", "show ?thesis"], ["proof (prove)\nusing this:\n  eval (\\<psi>1 and\\<^sub>n \\<psi>2) = Maybe\n\ngoal (1 subgoal):\n 1. \\<phi> \\<sim>\\<^sub>P \\<psi>1 and\\<^sub>n \\<psi>2", "using And_ltln.prems ltl_const_equiv_no_const_prop_equiv"], ["proof (prove)\nusing this:\n  eval (\\<psi>1 and\\<^sub>n \\<psi>2) = Maybe\n  \\<phi> \\<sim>\\<^sub>C \\<psi>1 and\\<^sub>n \\<psi>2\n  \\<lbrakk>eval ?\\<psi> = Maybe; ?\\<phi> \\<sim>\\<^sub>C ?\\<psi>\\<rbrakk>\n  \\<Longrightarrow> ?\\<phi> \\<sim>\\<^sub>P ?\\<psi>\n\ngoal (1 subgoal):\n 1. \\<phi> \\<sim>\\<^sub>P \\<psi>1 and\\<^sub>n \\<psi>2", "by force"], ["proof (state)\nthis:\n  \\<phi> \\<sim>\\<^sub>P \\<psi>1 and\\<^sub>n \\<psi>2\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<phi> \\<sim>\\<^sub>P \\<psi>1 and\\<^sub>n \\<psi>2\n\ngoal (10 subgoals):\n 1. \\<phi> \\<sim>\\<^sub>C true\\<^sub>n \\<Longrightarrow>\n    \\<phi> \\<sim>\\<^sub>P true\\<^sub>n\n 2. \\<phi> \\<sim>\\<^sub>C false\\<^sub>n \\<Longrightarrow>\n    \\<phi> \\<sim>\\<^sub>P false\\<^sub>n\n 3. \\<And>x.\n       \\<phi> \\<sim>\\<^sub>C prop\\<^sub>n(x) \\<Longrightarrow>\n       \\<phi> \\<sim>\\<^sub>P prop\\<^sub>n(x)\n 4. \\<And>x.\n       \\<phi> \\<sim>\\<^sub>C nprop\\<^sub>n(x) \\<Longrightarrow>\n       \\<phi> \\<sim>\\<^sub>P nprop\\<^sub>n(x)\n 5. \\<And>\\<psi>1 \\<psi>2.\n       \\<lbrakk>\\<phi> \\<sim>\\<^sub>C \\<psi>1 \\<Longrightarrow>\n                \\<phi> \\<sim>\\<^sub>P \\<psi>1;\n        \\<phi> \\<sim>\\<^sub>C \\<psi>2 \\<Longrightarrow>\n        \\<phi> \\<sim>\\<^sub>P \\<psi>2;\n        \\<phi> \\<sim>\\<^sub>C \\<psi>1 or\\<^sub>n \\<psi>2\\<rbrakk>\n       \\<Longrightarrow> \\<phi> \\<sim>\\<^sub>P \\<psi>1 or\\<^sub>n \\<psi>2\n 6. \\<And>\\<psi>.\n       \\<lbrakk>\\<phi> \\<sim>\\<^sub>C \\<psi> \\<Longrightarrow>\n                \\<phi> \\<sim>\\<^sub>P \\<psi>;\n        \\<phi> \\<sim>\\<^sub>C X\\<^sub>n \\<psi>\\<rbrakk>\n       \\<Longrightarrow> \\<phi> \\<sim>\\<^sub>P X\\<^sub>n \\<psi>\n 7. \\<And>\\<psi>1 \\<psi>2.\n       \\<lbrakk>\\<phi> \\<sim>\\<^sub>C \\<psi>1 \\<Longrightarrow>\n                \\<phi> \\<sim>\\<^sub>P \\<psi>1;\n        \\<phi> \\<sim>\\<^sub>C \\<psi>2 \\<Longrightarrow>\n        \\<phi> \\<sim>\\<^sub>P \\<psi>2;\n        \\<phi> \\<sim>\\<^sub>C \\<psi>1 U\\<^sub>n \\<psi>2\\<rbrakk>\n       \\<Longrightarrow> \\<phi> \\<sim>\\<^sub>P \\<psi>1 U\\<^sub>n \\<psi>2\n 8. \\<And>\\<psi>1 \\<psi>2.\n       \\<lbrakk>\\<phi> \\<sim>\\<^sub>C \\<psi>1 \\<Longrightarrow>\n                \\<phi> \\<sim>\\<^sub>P \\<psi>1;\n        \\<phi> \\<sim>\\<^sub>C \\<psi>2 \\<Longrightarrow>\n        \\<phi> \\<sim>\\<^sub>P \\<psi>2;\n        \\<phi> \\<sim>\\<^sub>C \\<psi>1 R\\<^sub>n \\<psi>2\\<rbrakk>\n       \\<Longrightarrow> \\<phi> \\<sim>\\<^sub>P \\<psi>1 R\\<^sub>n \\<psi>2\n 9. \\<And>\\<psi>1 \\<psi>2.\n       \\<lbrakk>\\<phi> \\<sim>\\<^sub>C \\<psi>1 \\<Longrightarrow>\n                \\<phi> \\<sim>\\<^sub>P \\<psi>1;\n        \\<phi> \\<sim>\\<^sub>C \\<psi>2 \\<Longrightarrow>\n        \\<phi> \\<sim>\\<^sub>P \\<psi>2;\n        \\<phi> \\<sim>\\<^sub>C \\<psi>1 W\\<^sub>n \\<psi>2\\<rbrakk>\n       \\<Longrightarrow> \\<phi> \\<sim>\\<^sub>P \\<psi>1 W\\<^sub>n \\<psi>2\n 10. \\<And>\\<psi>1 \\<psi>2.\n        \\<lbrakk>\\<phi> \\<sim>\\<^sub>C \\<psi>1 \\<Longrightarrow>\n                 \\<phi> \\<sim>\\<^sub>P \\<psi>1;\n         \\<phi> \\<sim>\\<^sub>C \\<psi>2 \\<Longrightarrow>\n         \\<phi> \\<sim>\\<^sub>P \\<psi>2;\n         \\<phi> \\<sim>\\<^sub>C \\<psi>1 M\\<^sub>n \\<psi>2\\<rbrakk>\n        \\<Longrightarrow> \\<phi> \\<sim>\\<^sub>P \\<psi>1 M\\<^sub>n \\<psi>2", "next"], ["proof (state)\ngoal (10 subgoals):\n 1. \\<phi> \\<sim>\\<^sub>C true\\<^sub>n \\<Longrightarrow>\n    \\<phi> \\<sim>\\<^sub>P true\\<^sub>n\n 2. \\<phi> \\<sim>\\<^sub>C false\\<^sub>n \\<Longrightarrow>\n    \\<phi> \\<sim>\\<^sub>P false\\<^sub>n\n 3. \\<And>x.\n       \\<phi> \\<sim>\\<^sub>C prop\\<^sub>n(x) \\<Longrightarrow>\n       \\<phi> \\<sim>\\<^sub>P prop\\<^sub>n(x)\n 4. \\<And>x.\n       \\<phi> \\<sim>\\<^sub>C nprop\\<^sub>n(x) \\<Longrightarrow>\n       \\<phi> \\<sim>\\<^sub>P nprop\\<^sub>n(x)\n 5. \\<And>\\<psi>1 \\<psi>2.\n       \\<lbrakk>\\<phi> \\<sim>\\<^sub>C \\<psi>1 \\<Longrightarrow>\n                \\<phi> \\<sim>\\<^sub>P \\<psi>1;\n        \\<phi> \\<sim>\\<^sub>C \\<psi>2 \\<Longrightarrow>\n        \\<phi> \\<sim>\\<^sub>P \\<psi>2;\n        \\<phi> \\<sim>\\<^sub>C \\<psi>1 or\\<^sub>n \\<psi>2\\<rbrakk>\n       \\<Longrightarrow> \\<phi> \\<sim>\\<^sub>P \\<psi>1 or\\<^sub>n \\<psi>2\n 6. \\<And>\\<psi>.\n       \\<lbrakk>\\<phi> \\<sim>\\<^sub>C \\<psi> \\<Longrightarrow>\n                \\<phi> \\<sim>\\<^sub>P \\<psi>;\n        \\<phi> \\<sim>\\<^sub>C X\\<^sub>n \\<psi>\\<rbrakk>\n       \\<Longrightarrow> \\<phi> \\<sim>\\<^sub>P X\\<^sub>n \\<psi>\n 7. \\<And>\\<psi>1 \\<psi>2.\n       \\<lbrakk>\\<phi> \\<sim>\\<^sub>C \\<psi>1 \\<Longrightarrow>\n                \\<phi> \\<sim>\\<^sub>P \\<psi>1;\n        \\<phi> \\<sim>\\<^sub>C \\<psi>2 \\<Longrightarrow>\n        \\<phi> \\<sim>\\<^sub>P \\<psi>2;\n        \\<phi> \\<sim>\\<^sub>C \\<psi>1 U\\<^sub>n \\<psi>2\\<rbrakk>\n       \\<Longrightarrow> \\<phi> \\<sim>\\<^sub>P \\<psi>1 U\\<^sub>n \\<psi>2\n 8. \\<And>\\<psi>1 \\<psi>2.\n       \\<lbrakk>\\<phi> \\<sim>\\<^sub>C \\<psi>1 \\<Longrightarrow>\n                \\<phi> \\<sim>\\<^sub>P \\<psi>1;\n        \\<phi> \\<sim>\\<^sub>C \\<psi>2 \\<Longrightarrow>\n        \\<phi> \\<sim>\\<^sub>P \\<psi>2;\n        \\<phi> \\<sim>\\<^sub>C \\<psi>1 R\\<^sub>n \\<psi>2\\<rbrakk>\n       \\<Longrightarrow> \\<phi> \\<sim>\\<^sub>P \\<psi>1 R\\<^sub>n \\<psi>2\n 9. \\<And>\\<psi>1 \\<psi>2.\n       \\<lbrakk>\\<phi> \\<sim>\\<^sub>C \\<psi>1 \\<Longrightarrow>\n                \\<phi> \\<sim>\\<^sub>P \\<psi>1;\n        \\<phi> \\<sim>\\<^sub>C \\<psi>2 \\<Longrightarrow>\n        \\<phi> \\<sim>\\<^sub>P \\<psi>2;\n        \\<phi> \\<sim>\\<^sub>C \\<psi>1 W\\<^sub>n \\<psi>2\\<rbrakk>\n       \\<Longrightarrow> \\<phi> \\<sim>\\<^sub>P \\<psi>1 W\\<^sub>n \\<psi>2\n 10. \\<And>\\<psi>1 \\<psi>2.\n        \\<lbrakk>\\<phi> \\<sim>\\<^sub>C \\<psi>1 \\<Longrightarrow>\n                 \\<phi> \\<sim>\\<^sub>P \\<psi>1;\n         \\<phi> \\<sim>\\<^sub>C \\<psi>2 \\<Longrightarrow>\n         \\<phi> \\<sim>\\<^sub>P \\<psi>2;\n         \\<phi> \\<sim>\\<^sub>C \\<psi>1 M\\<^sub>n \\<psi>2\\<rbrakk>\n        \\<Longrightarrow> \\<phi> \\<sim>\\<^sub>P \\<psi>1 M\\<^sub>n \\<psi>2", "case (Or_ltln \\<psi>1 \\<psi>2)"], ["proof (state)\nthis:\n  \\<phi> \\<sim>\\<^sub>C \\<psi>1 \\<Longrightarrow>\n  \\<phi> \\<sim>\\<^sub>P \\<psi>1\n  \\<phi> \\<sim>\\<^sub>C \\<psi>2 \\<Longrightarrow>\n  \\<phi> \\<sim>\\<^sub>P \\<psi>2\n  \\<phi> \\<sim>\\<^sub>C \\<psi>1 or\\<^sub>n \\<psi>2\n\ngoal (10 subgoals):\n 1. \\<phi> \\<sim>\\<^sub>C true\\<^sub>n \\<Longrightarrow>\n    \\<phi> \\<sim>\\<^sub>P true\\<^sub>n\n 2. \\<phi> \\<sim>\\<^sub>C false\\<^sub>n \\<Longrightarrow>\n    \\<phi> \\<sim>\\<^sub>P false\\<^sub>n\n 3. \\<And>x.\n       \\<phi> \\<sim>\\<^sub>C prop\\<^sub>n(x) \\<Longrightarrow>\n       \\<phi> \\<sim>\\<^sub>P prop\\<^sub>n(x)\n 4. \\<And>x.\n       \\<phi> \\<sim>\\<^sub>C nprop\\<^sub>n(x) \\<Longrightarrow>\n       \\<phi> \\<sim>\\<^sub>P nprop\\<^sub>n(x)\n 5. \\<And>\\<psi>1 \\<psi>2.\n       \\<lbrakk>\\<phi> \\<sim>\\<^sub>C \\<psi>1 \\<Longrightarrow>\n                \\<phi> \\<sim>\\<^sub>P \\<psi>1;\n        \\<phi> \\<sim>\\<^sub>C \\<psi>2 \\<Longrightarrow>\n        \\<phi> \\<sim>\\<^sub>P \\<psi>2;\n        \\<phi> \\<sim>\\<^sub>C \\<psi>1 or\\<^sub>n \\<psi>2\\<rbrakk>\n       \\<Longrightarrow> \\<phi> \\<sim>\\<^sub>P \\<psi>1 or\\<^sub>n \\<psi>2\n 6. \\<And>\\<psi>.\n       \\<lbrakk>\\<phi> \\<sim>\\<^sub>C \\<psi> \\<Longrightarrow>\n                \\<phi> \\<sim>\\<^sub>P \\<psi>;\n        \\<phi> \\<sim>\\<^sub>C X\\<^sub>n \\<psi>\\<rbrakk>\n       \\<Longrightarrow> \\<phi> \\<sim>\\<^sub>P X\\<^sub>n \\<psi>\n 7. \\<And>\\<psi>1 \\<psi>2.\n       \\<lbrakk>\\<phi> \\<sim>\\<^sub>C \\<psi>1 \\<Longrightarrow>\n                \\<phi> \\<sim>\\<^sub>P \\<psi>1;\n        \\<phi> \\<sim>\\<^sub>C \\<psi>2 \\<Longrightarrow>\n        \\<phi> \\<sim>\\<^sub>P \\<psi>2;\n        \\<phi> \\<sim>\\<^sub>C \\<psi>1 U\\<^sub>n \\<psi>2\\<rbrakk>\n       \\<Longrightarrow> \\<phi> \\<sim>\\<^sub>P \\<psi>1 U\\<^sub>n \\<psi>2\n 8. \\<And>\\<psi>1 \\<psi>2.\n       \\<lbrakk>\\<phi> \\<sim>\\<^sub>C \\<psi>1 \\<Longrightarrow>\n                \\<phi> \\<sim>\\<^sub>P \\<psi>1;\n        \\<phi> \\<sim>\\<^sub>C \\<psi>2 \\<Longrightarrow>\n        \\<phi> \\<sim>\\<^sub>P \\<psi>2;\n        \\<phi> \\<sim>\\<^sub>C \\<psi>1 R\\<^sub>n \\<psi>2\\<rbrakk>\n       \\<Longrightarrow> \\<phi> \\<sim>\\<^sub>P \\<psi>1 R\\<^sub>n \\<psi>2\n 9. \\<And>\\<psi>1 \\<psi>2.\n       \\<lbrakk>\\<phi> \\<sim>\\<^sub>C \\<psi>1 \\<Longrightarrow>\n                \\<phi> \\<sim>\\<^sub>P \\<psi>1;\n        \\<phi> \\<sim>\\<^sub>C \\<psi>2 \\<Longrightarrow>\n        \\<phi> \\<sim>\\<^sub>P \\<psi>2;\n        \\<phi> \\<sim>\\<^sub>C \\<psi>1 W\\<^sub>n \\<psi>2\\<rbrakk>\n       \\<Longrightarrow> \\<phi> \\<sim>\\<^sub>P \\<psi>1 W\\<^sub>n \\<psi>2\n 10. \\<And>\\<psi>1 \\<psi>2.\n        \\<lbrakk>\\<phi> \\<sim>\\<^sub>C \\<psi>1 \\<Longrightarrow>\n                 \\<phi> \\<sim>\\<^sub>P \\<psi>1;\n         \\<phi> \\<sim>\\<^sub>C \\<psi>2 \\<Longrightarrow>\n         \\<phi> \\<sim>\\<^sub>P \\<psi>2;\n         \\<phi> \\<sim>\\<^sub>C \\<psi>1 M\\<^sub>n \\<psi>2\\<rbrakk>\n        \\<Longrightarrow> \\<phi> \\<sim>\\<^sub>P \\<psi>1 M\\<^sub>n \\<psi>2", "then"], ["proof (chain)\npicking this:\n  \\<phi> \\<sim>\\<^sub>C \\<psi>1 \\<Longrightarrow>\n  \\<phi> \\<sim>\\<^sub>P \\<psi>1\n  \\<phi> \\<sim>\\<^sub>C \\<psi>2 \\<Longrightarrow>\n  \\<phi> \\<sim>\\<^sub>P \\<psi>2\n  \\<phi> \\<sim>\\<^sub>C \\<psi>1 or\\<^sub>n \\<psi>2", "show ?case"], ["proof (prove)\nusing this:\n  \\<phi> \\<sim>\\<^sub>C \\<psi>1 \\<Longrightarrow>\n  \\<phi> \\<sim>\\<^sub>P \\<psi>1\n  \\<phi> \\<sim>\\<^sub>C \\<psi>2 \\<Longrightarrow>\n  \\<phi> \\<sim>\\<^sub>P \\<psi>2\n  \\<phi> \\<sim>\\<^sub>C \\<psi>1 or\\<^sub>n \\<psi>2\n\ngoal (1 subgoal):\n 1. \\<phi> \\<sim>\\<^sub>P \\<psi>1 or\\<^sub>n \\<psi>2", "proof (cases \"eval (\\<psi>1 or\\<^sub>n \\<psi>2)\")"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<lbrakk>\\<phi> \\<sim>\\<^sub>C \\<psi>1 \\<Longrightarrow>\n             \\<phi> \\<sim>\\<^sub>P \\<psi>1;\n     \\<phi> \\<sim>\\<^sub>C \\<psi>2 \\<Longrightarrow>\n     \\<phi> \\<sim>\\<^sub>P \\<psi>2;\n     \\<phi> \\<sim>\\<^sub>C \\<psi>1 or\\<^sub>n \\<psi>2;\n     eval (\\<psi>1 or\\<^sub>n \\<psi>2) = Yes\\<rbrakk>\n    \\<Longrightarrow> \\<phi> \\<sim>\\<^sub>P \\<psi>1 or\\<^sub>n \\<psi>2\n 2. \\<lbrakk>\\<phi> \\<sim>\\<^sub>C \\<psi>1 \\<Longrightarrow>\n             \\<phi> \\<sim>\\<^sub>P \\<psi>1;\n     \\<phi> \\<sim>\\<^sub>C \\<psi>2 \\<Longrightarrow>\n     \\<phi> \\<sim>\\<^sub>P \\<psi>2;\n     \\<phi> \\<sim>\\<^sub>C \\<psi>1 or\\<^sub>n \\<psi>2;\n     eval (\\<psi>1 or\\<^sub>n \\<psi>2) = No\\<rbrakk>\n    \\<Longrightarrow> \\<phi> \\<sim>\\<^sub>P \\<psi>1 or\\<^sub>n \\<psi>2\n 3. \\<lbrakk>\\<phi> \\<sim>\\<^sub>C \\<psi>1 \\<Longrightarrow>\n             \\<phi> \\<sim>\\<^sub>P \\<psi>1;\n     \\<phi> \\<sim>\\<^sub>C \\<psi>2 \\<Longrightarrow>\n     \\<phi> \\<sim>\\<^sub>P \\<psi>2;\n     \\<phi> \\<sim>\\<^sub>C \\<psi>1 or\\<^sub>n \\<psi>2;\n     eval (\\<psi>1 or\\<^sub>n \\<psi>2) = Maybe\\<rbrakk>\n    \\<Longrightarrow> \\<phi> \\<sim>\\<^sub>P \\<psi>1 or\\<^sub>n \\<psi>2", "case Yes"], ["proof (state)\nthis:\n  eval (\\<psi>1 or\\<^sub>n \\<psi>2) = Yes\n\ngoal (3 subgoals):\n 1. \\<lbrakk>\\<phi> \\<sim>\\<^sub>C \\<psi>1 \\<Longrightarrow>\n             \\<phi> \\<sim>\\<^sub>P \\<psi>1;\n     \\<phi> \\<sim>\\<^sub>C \\<psi>2 \\<Longrightarrow>\n     \\<phi> \\<sim>\\<^sub>P \\<psi>2;\n     \\<phi> \\<sim>\\<^sub>C \\<psi>1 or\\<^sub>n \\<psi>2;\n     eval (\\<psi>1 or\\<^sub>n \\<psi>2) = Yes\\<rbrakk>\n    \\<Longrightarrow> \\<phi> \\<sim>\\<^sub>P \\<psi>1 or\\<^sub>n \\<psi>2\n 2. \\<lbrakk>\\<phi> \\<sim>\\<^sub>C \\<psi>1 \\<Longrightarrow>\n             \\<phi> \\<sim>\\<^sub>P \\<psi>1;\n     \\<phi> \\<sim>\\<^sub>C \\<psi>2 \\<Longrightarrow>\n     \\<phi> \\<sim>\\<^sub>P \\<psi>2;\n     \\<phi> \\<sim>\\<^sub>C \\<psi>1 or\\<^sub>n \\<psi>2;\n     eval (\\<psi>1 or\\<^sub>n \\<psi>2) = No\\<rbrakk>\n    \\<Longrightarrow> \\<phi> \\<sim>\\<^sub>P \\<psi>1 or\\<^sub>n \\<psi>2\n 3. \\<lbrakk>\\<phi> \\<sim>\\<^sub>C \\<psi>1 \\<Longrightarrow>\n             \\<phi> \\<sim>\\<^sub>P \\<psi>1;\n     \\<phi> \\<sim>\\<^sub>C \\<psi>2 \\<Longrightarrow>\n     \\<phi> \\<sim>\\<^sub>P \\<psi>2;\n     \\<phi> \\<sim>\\<^sub>C \\<psi>1 or\\<^sub>n \\<psi>2;\n     eval (\\<psi>1 or\\<^sub>n \\<psi>2) = Maybe\\<rbrakk>\n    \\<Longrightarrow> \\<phi> \\<sim>\\<^sub>P \\<psi>1 or\\<^sub>n \\<psi>2", "then"], ["proof (chain)\npicking this:\n  eval (\\<psi>1 or\\<^sub>n \\<psi>2) = Yes", "have \"\\<phi> \\<sim>\\<^sub>C true\\<^sub>n\""], ["proof (prove)\nusing this:\n  eval (\\<psi>1 or\\<^sub>n \\<psi>2) = Yes\n\ngoal (1 subgoal):\n 1. \\<phi> \\<sim>\\<^sub>C true\\<^sub>n", "by (meson Or_ltln.prems equivp_transp ltl_const_equiv_const(1) ltl_const_equiv_equivp)"], ["proof (state)\nthis:\n  \\<phi> \\<sim>\\<^sub>C true\\<^sub>n\n\ngoal (3 subgoals):\n 1. \\<lbrakk>\\<phi> \\<sim>\\<^sub>C \\<psi>1 \\<Longrightarrow>\n             \\<phi> \\<sim>\\<^sub>P \\<psi>1;\n     \\<phi> \\<sim>\\<^sub>C \\<psi>2 \\<Longrightarrow>\n     \\<phi> \\<sim>\\<^sub>P \\<psi>2;\n     \\<phi> \\<sim>\\<^sub>C \\<psi>1 or\\<^sub>n \\<psi>2;\n     eval (\\<psi>1 or\\<^sub>n \\<psi>2) = Yes\\<rbrakk>\n    \\<Longrightarrow> \\<phi> \\<sim>\\<^sub>P \\<psi>1 or\\<^sub>n \\<psi>2\n 2. \\<lbrakk>\\<phi> \\<sim>\\<^sub>C \\<psi>1 \\<Longrightarrow>\n             \\<phi> \\<sim>\\<^sub>P \\<psi>1;\n     \\<phi> \\<sim>\\<^sub>C \\<psi>2 \\<Longrightarrow>\n     \\<phi> \\<sim>\\<^sub>P \\<psi>2;\n     \\<phi> \\<sim>\\<^sub>C \\<psi>1 or\\<^sub>n \\<psi>2;\n     eval (\\<psi>1 or\\<^sub>n \\<psi>2) = No\\<rbrakk>\n    \\<Longrightarrow> \\<phi> \\<sim>\\<^sub>P \\<psi>1 or\\<^sub>n \\<psi>2\n 3. \\<lbrakk>\\<phi> \\<sim>\\<^sub>C \\<psi>1 \\<Longrightarrow>\n             \\<phi> \\<sim>\\<^sub>P \\<psi>1;\n     \\<phi> \\<sim>\\<^sub>C \\<psi>2 \\<Longrightarrow>\n     \\<phi> \\<sim>\\<^sub>P \\<psi>2;\n     \\<phi> \\<sim>\\<^sub>C \\<psi>1 or\\<^sub>n \\<psi>2;\n     eval (\\<psi>1 or\\<^sub>n \\<psi>2) = Maybe\\<rbrakk>\n    \\<Longrightarrow> \\<phi> \\<sim>\\<^sub>P \\<psi>1 or\\<^sub>n \\<psi>2", "then"], ["proof (chain)\npicking this:\n  \\<phi> \\<sim>\\<^sub>C true\\<^sub>n", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<phi> \\<sim>\\<^sub>C true\\<^sub>n\n\ngoal (1 subgoal):\n 1. \\<phi> \\<sim>\\<^sub>P \\<psi>1 or\\<^sub>n \\<psi>2", "by (metis (full_types) Yes ltl_const_equiv_const(1) ltl_const_equiv_implies_prop_equiv(1) ltl_prop_equiv_trans ltl_prop_implies_equiv)"], ["proof (state)\nthis:\n  \\<phi> \\<sim>\\<^sub>P \\<psi>1 or\\<^sub>n \\<psi>2\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<phi> \\<sim>\\<^sub>C \\<psi>1 \\<Longrightarrow>\n             \\<phi> \\<sim>\\<^sub>P \\<psi>1;\n     \\<phi> \\<sim>\\<^sub>C \\<psi>2 \\<Longrightarrow>\n     \\<phi> \\<sim>\\<^sub>P \\<psi>2;\n     \\<phi> \\<sim>\\<^sub>C \\<psi>1 or\\<^sub>n \\<psi>2;\n     eval (\\<psi>1 or\\<^sub>n \\<psi>2) = No\\<rbrakk>\n    \\<Longrightarrow> \\<phi> \\<sim>\\<^sub>P \\<psi>1 or\\<^sub>n \\<psi>2\n 2. \\<lbrakk>\\<phi> \\<sim>\\<^sub>C \\<psi>1 \\<Longrightarrow>\n             \\<phi> \\<sim>\\<^sub>P \\<psi>1;\n     \\<phi> \\<sim>\\<^sub>C \\<psi>2 \\<Longrightarrow>\n     \\<phi> \\<sim>\\<^sub>P \\<psi>2;\n     \\<phi> \\<sim>\\<^sub>C \\<psi>1 or\\<^sub>n \\<psi>2;\n     eval (\\<psi>1 or\\<^sub>n \\<psi>2) = Maybe\\<rbrakk>\n    \\<Longrightarrow> \\<phi> \\<sim>\\<^sub>P \\<psi>1 or\\<^sub>n \\<psi>2", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<phi> \\<sim>\\<^sub>C \\<psi>1 \\<Longrightarrow>\n             \\<phi> \\<sim>\\<^sub>P \\<psi>1;\n     \\<phi> \\<sim>\\<^sub>C \\<psi>2 \\<Longrightarrow>\n     \\<phi> \\<sim>\\<^sub>P \\<psi>2;\n     \\<phi> \\<sim>\\<^sub>C \\<psi>1 or\\<^sub>n \\<psi>2;\n     eval (\\<psi>1 or\\<^sub>n \\<psi>2) = No\\<rbrakk>\n    \\<Longrightarrow> \\<phi> \\<sim>\\<^sub>P \\<psi>1 or\\<^sub>n \\<psi>2\n 2. \\<lbrakk>\\<phi> \\<sim>\\<^sub>C \\<psi>1 \\<Longrightarrow>\n             \\<phi> \\<sim>\\<^sub>P \\<psi>1;\n     \\<phi> \\<sim>\\<^sub>C \\<psi>2 \\<Longrightarrow>\n     \\<phi> \\<sim>\\<^sub>P \\<psi>2;\n     \\<phi> \\<sim>\\<^sub>C \\<psi>1 or\\<^sub>n \\<psi>2;\n     eval (\\<psi>1 or\\<^sub>n \\<psi>2) = Maybe\\<rbrakk>\n    \\<Longrightarrow> \\<phi> \\<sim>\\<^sub>P \\<psi>1 or\\<^sub>n \\<psi>2", "case No"], ["proof (state)\nthis:\n  eval (\\<psi>1 or\\<^sub>n \\<psi>2) = No\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<phi> \\<sim>\\<^sub>C \\<psi>1 \\<Longrightarrow>\n             \\<phi> \\<sim>\\<^sub>P \\<psi>1;\n     \\<phi> \\<sim>\\<^sub>C \\<psi>2 \\<Longrightarrow>\n     \\<phi> \\<sim>\\<^sub>P \\<psi>2;\n     \\<phi> \\<sim>\\<^sub>C \\<psi>1 or\\<^sub>n \\<psi>2;\n     eval (\\<psi>1 or\\<^sub>n \\<psi>2) = No\\<rbrakk>\n    \\<Longrightarrow> \\<phi> \\<sim>\\<^sub>P \\<psi>1 or\\<^sub>n \\<psi>2\n 2. \\<lbrakk>\\<phi> \\<sim>\\<^sub>C \\<psi>1 \\<Longrightarrow>\n             \\<phi> \\<sim>\\<^sub>P \\<psi>1;\n     \\<phi> \\<sim>\\<^sub>C \\<psi>2 \\<Longrightarrow>\n     \\<phi> \\<sim>\\<^sub>P \\<psi>2;\n     \\<phi> \\<sim>\\<^sub>C \\<psi>1 or\\<^sub>n \\<psi>2;\n     eval (\\<psi>1 or\\<^sub>n \\<psi>2) = Maybe\\<rbrakk>\n    \\<Longrightarrow> \\<phi> \\<sim>\\<^sub>P \\<psi>1 or\\<^sub>n \\<psi>2", "then"], ["proof (chain)\npicking this:\n  eval (\\<psi>1 or\\<^sub>n \\<psi>2) = No", "have \"\\<phi> \\<sim>\\<^sub>C false\\<^sub>n\""], ["proof (prove)\nusing this:\n  eval (\\<psi>1 or\\<^sub>n \\<psi>2) = No\n\ngoal (1 subgoal):\n 1. \\<phi> \\<sim>\\<^sub>C false\\<^sub>n", "by (meson Or_ltln.prems equivp_transp ltl_const_equiv_const(2) ltl_const_equiv_equivp)"], ["proof (state)\nthis:\n  \\<phi> \\<sim>\\<^sub>C false\\<^sub>n\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<phi> \\<sim>\\<^sub>C \\<psi>1 \\<Longrightarrow>\n             \\<phi> \\<sim>\\<^sub>P \\<psi>1;\n     \\<phi> \\<sim>\\<^sub>C \\<psi>2 \\<Longrightarrow>\n     \\<phi> \\<sim>\\<^sub>P \\<psi>2;\n     \\<phi> \\<sim>\\<^sub>C \\<psi>1 or\\<^sub>n \\<psi>2;\n     eval (\\<psi>1 or\\<^sub>n \\<psi>2) = No\\<rbrakk>\n    \\<Longrightarrow> \\<phi> \\<sim>\\<^sub>P \\<psi>1 or\\<^sub>n \\<psi>2\n 2. \\<lbrakk>\\<phi> \\<sim>\\<^sub>C \\<psi>1 \\<Longrightarrow>\n             \\<phi> \\<sim>\\<^sub>P \\<psi>1;\n     \\<phi> \\<sim>\\<^sub>C \\<psi>2 \\<Longrightarrow>\n     \\<phi> \\<sim>\\<^sub>P \\<psi>2;\n     \\<phi> \\<sim>\\<^sub>C \\<psi>1 or\\<^sub>n \\<psi>2;\n     eval (\\<psi>1 or\\<^sub>n \\<psi>2) = Maybe\\<rbrakk>\n    \\<Longrightarrow> \\<phi> \\<sim>\\<^sub>P \\<psi>1 or\\<^sub>n \\<psi>2", "then"], ["proof (chain)\npicking this:\n  \\<phi> \\<sim>\\<^sub>C false\\<^sub>n", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<phi> \\<sim>\\<^sub>C false\\<^sub>n\n\ngoal (1 subgoal):\n 1. \\<phi> \\<sim>\\<^sub>P \\<psi>1 or\\<^sub>n \\<psi>2", "by (metis (full_types) No ltl_const_equiv_const(2) ltl_const_equiv_implies_prop_equiv(2) ltl_prop_equiv_trans ltl_prop_implies_equiv)"], ["proof (state)\nthis:\n  \\<phi> \\<sim>\\<^sub>P \\<psi>1 or\\<^sub>n \\<psi>2\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<phi> \\<sim>\\<^sub>C \\<psi>1 \\<Longrightarrow>\n             \\<phi> \\<sim>\\<^sub>P \\<psi>1;\n     \\<phi> \\<sim>\\<^sub>C \\<psi>2 \\<Longrightarrow>\n     \\<phi> \\<sim>\\<^sub>P \\<psi>2;\n     \\<phi> \\<sim>\\<^sub>C \\<psi>1 or\\<^sub>n \\<psi>2;\n     eval (\\<psi>1 or\\<^sub>n \\<psi>2) = Maybe\\<rbrakk>\n    \\<Longrightarrow> \\<phi> \\<sim>\\<^sub>P \\<psi>1 or\\<^sub>n \\<psi>2", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<phi> \\<sim>\\<^sub>C \\<psi>1 \\<Longrightarrow>\n             \\<phi> \\<sim>\\<^sub>P \\<psi>1;\n     \\<phi> \\<sim>\\<^sub>C \\<psi>2 \\<Longrightarrow>\n     \\<phi> \\<sim>\\<^sub>P \\<psi>2;\n     \\<phi> \\<sim>\\<^sub>C \\<psi>1 or\\<^sub>n \\<psi>2;\n     eval (\\<psi>1 or\\<^sub>n \\<psi>2) = Maybe\\<rbrakk>\n    \\<Longrightarrow> \\<phi> \\<sim>\\<^sub>P \\<psi>1 or\\<^sub>n \\<psi>2", "case Maybe"], ["proof (state)\nthis:\n  eval (\\<psi>1 or\\<^sub>n \\<psi>2) = Maybe\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<phi> \\<sim>\\<^sub>C \\<psi>1 \\<Longrightarrow>\n             \\<phi> \\<sim>\\<^sub>P \\<psi>1;\n     \\<phi> \\<sim>\\<^sub>C \\<psi>2 \\<Longrightarrow>\n     \\<phi> \\<sim>\\<^sub>P \\<psi>2;\n     \\<phi> \\<sim>\\<^sub>C \\<psi>1 or\\<^sub>n \\<psi>2;\n     eval (\\<psi>1 or\\<^sub>n \\<psi>2) = Maybe\\<rbrakk>\n    \\<Longrightarrow> \\<phi> \\<sim>\\<^sub>P \\<psi>1 or\\<^sub>n \\<psi>2", "then"], ["proof (chain)\npicking this:\n  eval (\\<psi>1 or\\<^sub>n \\<psi>2) = Maybe", "show ?thesis"], ["proof (prove)\nusing this:\n  eval (\\<psi>1 or\\<^sub>n \\<psi>2) = Maybe\n\ngoal (1 subgoal):\n 1. \\<phi> \\<sim>\\<^sub>P \\<psi>1 or\\<^sub>n \\<psi>2", "using Or_ltln.prems ltl_const_equiv_no_const_prop_equiv"], ["proof (prove)\nusing this:\n  eval (\\<psi>1 or\\<^sub>n \\<psi>2) = Maybe\n  \\<phi> \\<sim>\\<^sub>C \\<psi>1 or\\<^sub>n \\<psi>2\n  \\<lbrakk>eval ?\\<psi> = Maybe; ?\\<phi> \\<sim>\\<^sub>C ?\\<psi>\\<rbrakk>\n  \\<Longrightarrow> ?\\<phi> \\<sim>\\<^sub>P ?\\<psi>\n\ngoal (1 subgoal):\n 1. \\<phi> \\<sim>\\<^sub>P \\<psi>1 or\\<^sub>n \\<psi>2", "by force"], ["proof (state)\nthis:\n  \\<phi> \\<sim>\\<^sub>P \\<psi>1 or\\<^sub>n \\<psi>2\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<phi> \\<sim>\\<^sub>P \\<psi>1 or\\<^sub>n \\<psi>2\n\ngoal (9 subgoals):\n 1. \\<phi> \\<sim>\\<^sub>C true\\<^sub>n \\<Longrightarrow>\n    \\<phi> \\<sim>\\<^sub>P true\\<^sub>n\n 2. \\<phi> \\<sim>\\<^sub>C false\\<^sub>n \\<Longrightarrow>\n    \\<phi> \\<sim>\\<^sub>P false\\<^sub>n\n 3. \\<And>x.\n       \\<phi> \\<sim>\\<^sub>C prop\\<^sub>n(x) \\<Longrightarrow>\n       \\<phi> \\<sim>\\<^sub>P prop\\<^sub>n(x)\n 4. \\<And>x.\n       \\<phi> \\<sim>\\<^sub>C nprop\\<^sub>n(x) \\<Longrightarrow>\n       \\<phi> \\<sim>\\<^sub>P nprop\\<^sub>n(x)\n 5. \\<And>\\<psi>.\n       \\<lbrakk>\\<phi> \\<sim>\\<^sub>C \\<psi> \\<Longrightarrow>\n                \\<phi> \\<sim>\\<^sub>P \\<psi>;\n        \\<phi> \\<sim>\\<^sub>C X\\<^sub>n \\<psi>\\<rbrakk>\n       \\<Longrightarrow> \\<phi> \\<sim>\\<^sub>P X\\<^sub>n \\<psi>\n 6. \\<And>\\<psi>1 \\<psi>2.\n       \\<lbrakk>\\<phi> \\<sim>\\<^sub>C \\<psi>1 \\<Longrightarrow>\n                \\<phi> \\<sim>\\<^sub>P \\<psi>1;\n        \\<phi> \\<sim>\\<^sub>C \\<psi>2 \\<Longrightarrow>\n        \\<phi> \\<sim>\\<^sub>P \\<psi>2;\n        \\<phi> \\<sim>\\<^sub>C \\<psi>1 U\\<^sub>n \\<psi>2\\<rbrakk>\n       \\<Longrightarrow> \\<phi> \\<sim>\\<^sub>P \\<psi>1 U\\<^sub>n \\<psi>2\n 7. \\<And>\\<psi>1 \\<psi>2.\n       \\<lbrakk>\\<phi> \\<sim>\\<^sub>C \\<psi>1 \\<Longrightarrow>\n                \\<phi> \\<sim>\\<^sub>P \\<psi>1;\n        \\<phi> \\<sim>\\<^sub>C \\<psi>2 \\<Longrightarrow>\n        \\<phi> \\<sim>\\<^sub>P \\<psi>2;\n        \\<phi> \\<sim>\\<^sub>C \\<psi>1 R\\<^sub>n \\<psi>2\\<rbrakk>\n       \\<Longrightarrow> \\<phi> \\<sim>\\<^sub>P \\<psi>1 R\\<^sub>n \\<psi>2\n 8. \\<And>\\<psi>1 \\<psi>2.\n       \\<lbrakk>\\<phi> \\<sim>\\<^sub>C \\<psi>1 \\<Longrightarrow>\n                \\<phi> \\<sim>\\<^sub>P \\<psi>1;\n        \\<phi> \\<sim>\\<^sub>C \\<psi>2 \\<Longrightarrow>\n        \\<phi> \\<sim>\\<^sub>P \\<psi>2;\n        \\<phi> \\<sim>\\<^sub>C \\<psi>1 W\\<^sub>n \\<psi>2\\<rbrakk>\n       \\<Longrightarrow> \\<phi> \\<sim>\\<^sub>P \\<psi>1 W\\<^sub>n \\<psi>2\n 9. \\<And>\\<psi>1 \\<psi>2.\n       \\<lbrakk>\\<phi> \\<sim>\\<^sub>C \\<psi>1 \\<Longrightarrow>\n                \\<phi> \\<sim>\\<^sub>P \\<psi>1;\n        \\<phi> \\<sim>\\<^sub>C \\<psi>2 \\<Longrightarrow>\n        \\<phi> \\<sim>\\<^sub>P \\<psi>2;\n        \\<phi> \\<sim>\\<^sub>C \\<psi>1 M\\<^sub>n \\<psi>2\\<rbrakk>\n       \\<Longrightarrow> \\<phi> \\<sim>\\<^sub>P \\<psi>1 M\\<^sub>n \\<psi>2", "qed (simp_all add: ltl_const_equiv_implies_prop_equiv equivp_reflp[OF ltl_prop_equiv_equivp])"], ["", "lemma ltl_const_equiv_lt_ltl_prop_equiv[simp]:\n  \"(\\<sim>\\<^sub>C) \\<le> (\\<sim>\\<^sub>P)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<sim>\\<^sub>C) \\<le> (\\<sim>\\<^sub>P)", "using ltl_const_equiv_implies_ltl_prop_equiv"], ["proof (prove)\nusing this:\n  ?\\<phi> \\<sim>\\<^sub>C ?\\<psi> \\<Longrightarrow>\n  ?\\<phi> \\<sim>\\<^sub>P ?\\<psi>\n\ngoal (1 subgoal):\n 1. (\\<sim>\\<^sub>C) \\<le> (\\<sim>\\<^sub>P)", "by blast"], ["", "subsection \\<open>Quotient types\\<close>"], ["", "quotient_type 'a ltln\\<^sub>L = \"'a ltln\" / \"(\\<sim>\\<^sub>L)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. equivp (\\<sim>\\<^sub>L)", "by (rule ltl_lang_equiv_equivp)"], ["", "instantiation ltln\\<^sub>L :: (type) equal\nbegin"], ["", "lift_definition ltln\\<^sub>L_eq_test :: \"'a ltln\\<^sub>L \\<Rightarrow> 'a ltln\\<^sub>L \\<Rightarrow> bool\" is \"\\<lambda>x y. x \\<sim>\\<^sub>L y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ltln1 ltln2 ltln3 ltln4.\n       \\<lbrakk>ltln1 \\<sim>\\<^sub>L ltln2;\n        ltln3 \\<sim>\\<^sub>L ltln4\\<rbrakk>\n       \\<Longrightarrow> ltln1 \\<sim>\\<^sub>L ltln3 =\n                         ltln2 \\<sim>\\<^sub>L ltln4", "by (metis ltln\\<^sub>L.abs_eq_iff)"], ["", "definition\n  eq\\<^sub>L: \"equal_class.equal \\<equiv> ltln\\<^sub>L_eq_test\""], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS('a ltln\\<^sub>L, equal_class)", "by (standard; simp add: eq\\<^sub>L ltln\\<^sub>L_eq_test.rep_eq, metis Quotient_ltln\\<^sub>L Quotient_rel_rep)"], ["", "end"], ["", "quotient_type 'a ltln\\<^sub>P = \"'a ltln\" / \"(\\<sim>\\<^sub>P)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. equivp (\\<sim>\\<^sub>P)", "by (rule ltl_prop_equiv_equivp)"], ["", "instantiation ltln\\<^sub>P :: (type) equal\nbegin"], ["", "lift_definition ltln\\<^sub>P_eq_test :: \"'a ltln\\<^sub>P \\<Rightarrow> 'a ltln\\<^sub>P \\<Rightarrow> bool\" is \"\\<lambda>x y. x \\<sim>\\<^sub>P y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ltln1 ltln2 ltln3 ltln4.\n       \\<lbrakk>ltln1 \\<sim>\\<^sub>P ltln2;\n        ltln3 \\<sim>\\<^sub>P ltln4\\<rbrakk>\n       \\<Longrightarrow> ltln1 \\<sim>\\<^sub>P ltln3 =\n                         ltln2 \\<sim>\\<^sub>P ltln4", "by (metis ltln\\<^sub>P.abs_eq_iff)"], ["", "definition\n  eq\\<^sub>P: \"equal_class.equal \\<equiv> ltln\\<^sub>P_eq_test\""], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS('a ltln\\<^sub>P, equal_class)", "by (standard; simp add: eq\\<^sub>P ltln\\<^sub>P_eq_test.rep_eq, metis Quotient_ltln\\<^sub>P Quotient_rel_rep)"], ["", "end"], ["", "quotient_type 'a ltln\\<^sub>C = \"'a ltln\" / \"(\\<sim>\\<^sub>C)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. equivp (\\<sim>\\<^sub>C)", "by (rule ltl_const_equiv_equivp)"], ["", "instantiation ltln\\<^sub>C :: (type) equal\nbegin"], ["", "lift_definition ltln\\<^sub>C_eq_test :: \"'a ltln\\<^sub>C \\<Rightarrow> 'a ltln\\<^sub>C \\<Rightarrow> bool\" is \"\\<lambda>x y. x \\<sim>\\<^sub>C y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ltln1 ltln2 ltln3 ltln4.\n       \\<lbrakk>ltln1 \\<sim>\\<^sub>C ltln2;\n        ltln3 \\<sim>\\<^sub>C ltln4\\<rbrakk>\n       \\<Longrightarrow> ltln1 \\<sim>\\<^sub>C ltln3 =\n                         ltln2 \\<sim>\\<^sub>C ltln4", "by (metis ltln\\<^sub>C.abs_eq_iff)"], ["", "definition\n  eq\\<^sub>C: \"equal_class.equal \\<equiv> ltln\\<^sub>C_eq_test\""], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS('a ltln\\<^sub>C, equal_class)", "by (standard; simp add: eq\\<^sub>C ltln\\<^sub>C_eq_test.rep_eq, metis Quotient_ltln\\<^sub>C Quotient_rel_rep)"], ["", "end"], ["", "subsection \\<open>Cardinality of propositional quotient sets\\<close>"], ["", "definition sat_models :: \"'a ltln\\<^sub>P \\<Rightarrow> 'a ltln set set\"\nwhere\n  \"sat_models \\<phi> = {\\<A>. \\<A> \\<Turnstile>\\<^sub>P rep_ltln\\<^sub>P \\<phi>}\""], ["", "lemma Rep_Abs_prop_entailment[simp]:\n  \"\\<A> \\<Turnstile>\\<^sub>P rep_ltln\\<^sub>P (abs_ltln\\<^sub>P \\<phi>) = \\<A> \\<Turnstile>\\<^sub>P \\<phi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<A> \\<Turnstile>\\<^sub>P rep_ltln\\<^sub>P (abs_ltln\\<^sub>P \\<phi>) =\n    \\<A> \\<Turnstile>\\<^sub>P \\<phi>", "by (metis Quotient3_ltln\\<^sub>P Quotient3_rep_abs ltl_prop_equiv_def)"], ["", "lemma sat_models_Abs:\n  \"\\<A> \\<in> sat_models (abs_ltln\\<^sub>P \\<phi>) = \\<A> \\<Turnstile>\\<^sub>P \\<phi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<A> \\<in> sat_models (abs_ltln\\<^sub>P \\<phi>)) =\n    \\<A> \\<Turnstile>\\<^sub>P \\<phi>", "by (simp add: sat_models_def)"], ["", "lemma sat_models_inj:\n  \"inj sat_models\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj sat_models", "proof (rule injI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y. sat_models x = sat_models y \\<Longrightarrow> x = y", "fix \\<phi> \\<psi> :: \"'a ltln\\<^sub>P\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y. sat_models x = sat_models y \\<Longrightarrow> x = y", "assume \"sat_models \\<phi> = sat_models \\<psi>\""], ["proof (state)\nthis:\n  sat_models \\<phi> = sat_models \\<psi>\n\ngoal (1 subgoal):\n 1. \\<And>x y. sat_models x = sat_models y \\<Longrightarrow> x = y", "then"], ["proof (chain)\npicking this:\n  sat_models \\<phi> = sat_models \\<psi>", "have \"rep_ltln\\<^sub>P \\<phi> \\<sim>\\<^sub>P rep_ltln\\<^sub>P \\<psi>\""], ["proof (prove)\nusing this:\n  sat_models \\<phi> = sat_models \\<psi>\n\ngoal (1 subgoal):\n 1. rep_ltln\\<^sub>P \\<phi> \\<sim>\\<^sub>P rep_ltln\\<^sub>P \\<psi>", "unfolding sat_models_def ltl_prop_equiv_def"], ["proof (prove)\nusing this:\n  {\\<A>. \\<A> \\<Turnstile>\\<^sub>P rep_ltln\\<^sub>P \\<phi>} =\n  {\\<A>. \\<A> \\<Turnstile>\\<^sub>P rep_ltln\\<^sub>P \\<psi>}\n\ngoal (1 subgoal):\n 1. \\<forall>\\<A>.\n       \\<A> \\<Turnstile>\\<^sub>P rep_ltln\\<^sub>P \\<phi> =\n       \\<A> \\<Turnstile>\\<^sub>P rep_ltln\\<^sub>P \\<psi>", "by force"], ["proof (state)\nthis:\n  rep_ltln\\<^sub>P \\<phi> \\<sim>\\<^sub>P rep_ltln\\<^sub>P \\<psi>\n\ngoal (1 subgoal):\n 1. \\<And>x y. sat_models x = sat_models y \\<Longrightarrow> x = y", "then"], ["proof (chain)\npicking this:\n  rep_ltln\\<^sub>P \\<phi> \\<sim>\\<^sub>P rep_ltln\\<^sub>P \\<psi>", "show \"\\<phi> = \\<psi>\""], ["proof (prove)\nusing this:\n  rep_ltln\\<^sub>P \\<phi> \\<sim>\\<^sub>P rep_ltln\\<^sub>P \\<psi>\n\ngoal (1 subgoal):\n 1. \\<phi> = \\<psi>", "by (meson Quotient3_ltln\\<^sub>P Quotient3_rel_rep)"], ["proof (state)\nthis:\n  \\<phi> = \\<psi>\n\ngoal:\nNo subgoals!", "qed"], ["", "fun prop_atoms :: \"'a ltln \\<Rightarrow> 'a ltln set\"\nwhere\n  \"prop_atoms true\\<^sub>n = {}\"\n| \"prop_atoms false\\<^sub>n = {}\"\n| \"prop_atoms (\\<phi> and\\<^sub>n \\<psi>) = prop_atoms \\<phi> \\<union> prop_atoms \\<psi>\"\n| \"prop_atoms (\\<phi> or\\<^sub>n \\<psi>) = prop_atoms \\<phi> \\<union> prop_atoms \\<psi>\"\n| \"prop_atoms \\<phi> = {\\<phi>}\""], ["", "fun nested_prop_atoms :: \"'a ltln \\<Rightarrow> 'a ltln set\"\nwhere\n  \"nested_prop_atoms true\\<^sub>n = {}\"\n| \"nested_prop_atoms false\\<^sub>n = {}\"\n| \"nested_prop_atoms (\\<phi> and\\<^sub>n \\<psi>) = nested_prop_atoms \\<phi> \\<union> nested_prop_atoms \\<psi>\"\n| \"nested_prop_atoms (\\<phi> or\\<^sub>n \\<psi>) = nested_prop_atoms \\<phi> \\<union> nested_prop_atoms \\<psi>\"\n| \"nested_prop_atoms (X\\<^sub>n \\<phi>) = {X\\<^sub>n \\<phi>} \\<union> nested_prop_atoms \\<phi>\"\n| \"nested_prop_atoms (\\<phi> U\\<^sub>n \\<psi>) = {\\<phi> U\\<^sub>n \\<psi>} \\<union> nested_prop_atoms \\<phi> \\<union> nested_prop_atoms \\<psi>\"\n| \"nested_prop_atoms (\\<phi> R\\<^sub>n \\<psi>) = {\\<phi> R\\<^sub>n \\<psi>} \\<union> nested_prop_atoms \\<phi> \\<union> nested_prop_atoms \\<psi>\"\n| \"nested_prop_atoms (\\<phi> W\\<^sub>n \\<psi>) = {\\<phi> W\\<^sub>n \\<psi>} \\<union> nested_prop_atoms \\<phi> \\<union> nested_prop_atoms \\<psi>\"\n| \"nested_prop_atoms (\\<phi> M\\<^sub>n \\<psi>) = {\\<phi> M\\<^sub>n \\<psi>} \\<union> nested_prop_atoms \\<phi> \\<union> nested_prop_atoms \\<psi>\"\n| \"nested_prop_atoms \\<phi> = {\\<phi>}\""], ["", "lemma prop_atoms_nested_prop_atoms:\n  \"prop_atoms \\<phi> \\<subseteq> nested_prop_atoms \\<phi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prop_atoms \\<phi> \\<subseteq> nested_prop_atoms \\<phi>", "by (induction \\<phi>) auto"], ["", "lemma prop_atoms_subfrmlsn:\n  \"prop_atoms \\<phi> \\<subseteq> subfrmlsn \\<phi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prop_atoms \\<phi> \\<subseteq> subfrmlsn \\<phi>", "by (induction \\<phi>) auto"], ["", "lemma nested_prop_atoms_subfrmlsn:\n  \"nested_prop_atoms \\<phi> \\<subseteq> subfrmlsn \\<phi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nested_prop_atoms \\<phi> \\<subseteq> subfrmlsn \\<phi>", "by (induction \\<phi>) auto"], ["", "lemma prop_atoms_notin[simp]:\n  \"true\\<^sub>n \\<notin> prop_atoms \\<phi>\"\n  \"false\\<^sub>n \\<notin> prop_atoms \\<phi>\"\n  \"\\<phi>\\<^sub>1 and\\<^sub>n \\<phi>\\<^sub>2 \\<notin> prop_atoms \\<phi>\"\n  \"\\<phi>\\<^sub>1 or\\<^sub>n \\<phi>\\<^sub>2 \\<notin> prop_atoms \\<phi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (true\\<^sub>n \\<notin> prop_atoms \\<phi> &&&\n     false\\<^sub>n \\<notin> prop_atoms \\<phi>) &&&\n    \\<phi>\\<^sub>1 and\\<^sub>n \\<phi>\\<^sub>2 \\<notin> prop_atoms \\<phi> &&&\n    \\<phi>\\<^sub>1 or\\<^sub>n \\<phi>\\<^sub>2 \\<notin> prop_atoms \\<phi>", "by (induction \\<phi>) auto"], ["", "lemma nested_prop_atoms_notin[simp]:\n  \"true\\<^sub>n \\<notin> nested_prop_atoms \\<phi>\"\n  \"false\\<^sub>n \\<notin> nested_prop_atoms \\<phi>\"\n  \"\\<phi>\\<^sub>1 and\\<^sub>n \\<phi>\\<^sub>2 \\<notin> nested_prop_atoms \\<phi>\"\n  \"\\<phi>\\<^sub>1 or\\<^sub>n \\<phi>\\<^sub>2 \\<notin> nested_prop_atoms \\<phi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (true\\<^sub>n \\<notin> nested_prop_atoms \\<phi> &&&\n     false\\<^sub>n \\<notin> nested_prop_atoms \\<phi>) &&&\n    \\<phi>\\<^sub>1 and\\<^sub>n \\<phi>\\<^sub>2\n    \\<notin> nested_prop_atoms \\<phi> &&&\n    \\<phi>\\<^sub>1 or\\<^sub>n \\<phi>\\<^sub>2\n    \\<notin> nested_prop_atoms \\<phi>", "by (induction \\<phi>) auto"], ["", "lemma prop_atoms_finite:\n  \"finite (prop_atoms \\<phi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (prop_atoms \\<phi>)", "by (induction \\<phi>) auto"], ["", "lemma nested_prop_atoms_finite:\n  \"finite (nested_prop_atoms \\<phi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (nested_prop_atoms \\<phi>)", "by (induction \\<phi>) auto"], ["", "lemma prop_atoms_entailment_iff:\n  \"\\<phi> \\<in> prop_atoms \\<psi> \\<Longrightarrow> \\<A> \\<Turnstile>\\<^sub>P \\<phi> \\<longleftrightarrow> \\<phi> \\<in> \\<A>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<phi> \\<in> prop_atoms \\<psi> \\<Longrightarrow>\n    \\<A> \\<Turnstile>\\<^sub>P \\<phi> = (\\<phi> \\<in> \\<A>)", "by (induction \\<phi>) auto"], ["", "lemma prop_atoms_entailment_inter:\n  \"prop_atoms \\<phi> \\<subseteq> P \\<Longrightarrow> (\\<A> \\<inter> P) \\<Turnstile>\\<^sub>P \\<phi> = \\<A> \\<Turnstile>\\<^sub>P \\<phi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prop_atoms \\<phi> \\<subseteq> P \\<Longrightarrow>\n    (\\<A> \\<inter> P) \\<Turnstile>\\<^sub>P \\<phi> =\n    \\<A> \\<Turnstile>\\<^sub>P \\<phi>", "by (induction \\<phi>) auto"], ["", "lemma nested_prop_atoms_entailment_inter:\n  \"nested_prop_atoms \\<phi> \\<subseteq> P \\<Longrightarrow> (\\<A> \\<inter> P) \\<Turnstile>\\<^sub>P \\<phi> = \\<A> \\<Turnstile>\\<^sub>P \\<phi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nested_prop_atoms \\<phi> \\<subseteq> P \\<Longrightarrow>\n    (\\<A> \\<inter> P) \\<Turnstile>\\<^sub>P \\<phi> =\n    \\<A> \\<Turnstile>\\<^sub>P \\<phi>", "by (induction \\<phi>) auto"], ["", "lemma sat_models_inter_inj_helper:\n  assumes\n    \"prop_atoms \\<phi> \\<subseteq> P\"\n  and\n    \"prop_atoms \\<psi> \\<subseteq> P\"\n  and\n    \"sat_models (abs_ltln\\<^sub>P \\<phi>) \\<inter> Pow P = sat_models (abs_ltln\\<^sub>P \\<psi>) \\<inter> Pow P\"\n  shows\n    \"\\<phi> \\<sim>\\<^sub>P \\<psi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<phi> \\<sim>\\<^sub>P \\<psi>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<phi> \\<sim>\\<^sub>P \\<psi>", "from assms"], ["proof (chain)\npicking this:\n  prop_atoms \\<phi> \\<subseteq> P\n  prop_atoms \\<psi> \\<subseteq> P\n  sat_models (abs_ltln\\<^sub>P \\<phi>) \\<inter> Pow P =\n  sat_models (abs_ltln\\<^sub>P \\<psi>) \\<inter> Pow P", "have \"\\<forall>\\<A>. (\\<A> \\<inter> P) \\<Turnstile>\\<^sub>P \\<phi> \\<longleftrightarrow> (\\<A> \\<inter> P) \\<Turnstile>\\<^sub>P \\<psi>\""], ["proof (prove)\nusing this:\n  prop_atoms \\<phi> \\<subseteq> P\n  prop_atoms \\<psi> \\<subseteq> P\n  sat_models (abs_ltln\\<^sub>P \\<phi>) \\<inter> Pow P =\n  sat_models (abs_ltln\\<^sub>P \\<psi>) \\<inter> Pow P\n\ngoal (1 subgoal):\n 1. \\<forall>\\<A>.\n       (\\<A> \\<inter> P) \\<Turnstile>\\<^sub>P \\<phi> =\n       (\\<A> \\<inter> P) \\<Turnstile>\\<^sub>P \\<psi>", "by (auto simp: sat_models_Abs)"], ["proof (state)\nthis:\n  \\<forall>\\<A>.\n     (\\<A> \\<inter> P) \\<Turnstile>\\<^sub>P \\<phi> =\n     (\\<A> \\<inter> P) \\<Turnstile>\\<^sub>P \\<psi>\n\ngoal (1 subgoal):\n 1. \\<phi> \\<sim>\\<^sub>P \\<psi>", "with assms"], ["proof (chain)\npicking this:\n  prop_atoms \\<phi> \\<subseteq> P\n  prop_atoms \\<psi> \\<subseteq> P\n  sat_models (abs_ltln\\<^sub>P \\<phi>) \\<inter> Pow P =\n  sat_models (abs_ltln\\<^sub>P \\<psi>) \\<inter> Pow P\n  \\<forall>\\<A>.\n     (\\<A> \\<inter> P) \\<Turnstile>\\<^sub>P \\<phi> =\n     (\\<A> \\<inter> P) \\<Turnstile>\\<^sub>P \\<psi>", "show \"\\<phi> \\<sim>\\<^sub>P \\<psi>\""], ["proof (prove)\nusing this:\n  prop_atoms \\<phi> \\<subseteq> P\n  prop_atoms \\<psi> \\<subseteq> P\n  sat_models (abs_ltln\\<^sub>P \\<phi>) \\<inter> Pow P =\n  sat_models (abs_ltln\\<^sub>P \\<psi>) \\<inter> Pow P\n  \\<forall>\\<A>.\n     (\\<A> \\<inter> P) \\<Turnstile>\\<^sub>P \\<phi> =\n     (\\<A> \\<inter> P) \\<Turnstile>\\<^sub>P \\<psi>\n\ngoal (1 subgoal):\n 1. \\<phi> \\<sim>\\<^sub>P \\<psi>", "by (simp add: prop_atoms_entailment_inter ltl_prop_equiv_def)"], ["proof (state)\nthis:\n  \\<phi> \\<sim>\\<^sub>P \\<psi>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma sat_models_inter_inj:\n  \"inj_on (\\<lambda>\\<phi>. sat_models \\<phi> \\<inter> Pow P) {abs_ltln\\<^sub>P \\<phi> |\\<phi>. prop_atoms \\<phi> \\<subseteq> P}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_on (\\<lambda>\\<phi>. sat_models \\<phi> \\<inter> Pow P)\n     {abs_ltln\\<^sub>P \\<phi> |\\<phi>. prop_atoms \\<phi> \\<subseteq> P}", "by (auto simp: inj_on_def sat_models_inter_inj_helper ltln\\<^sub>P.abs_eq_iff)"], ["", "lemma sat_models_pow_pow:\n  \"{sat_models (abs_ltln\\<^sub>P \\<phi>) \\<inter> Pow P | \\<phi>. prop_atoms \\<phi> \\<subseteq> P} \\<subseteq> Pow (Pow P)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {sat_models (abs_ltln\\<^sub>P \\<phi>) \\<inter> Pow P |\\<phi>.\n     prop_atoms \\<phi> \\<subseteq> P}\n    \\<subseteq> Pow (Pow P)", "by (auto simp: sat_models_def)"], ["", "lemma sat_models_finite:\n  \"finite P \\<Longrightarrow> finite {sat_models (abs_ltln\\<^sub>P \\<phi>) \\<inter> Pow P | \\<phi>. prop_atoms \\<phi> \\<subseteq> P}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite P \\<Longrightarrow>\n    finite\n     {sat_models (abs_ltln\\<^sub>P \\<phi>) \\<inter> Pow P |\\<phi>.\n      prop_atoms \\<phi> \\<subseteq> P}", "using sat_models_pow_pow finite_subset"], ["proof (prove)\nusing this:\n  {sat_models (abs_ltln\\<^sub>P \\<phi>) \\<inter> Pow ?P |\\<phi>.\n   prop_atoms \\<phi> \\<subseteq> ?P}\n  \\<subseteq> Pow (Pow ?P)\n  \\<lbrakk>?A \\<subseteq> ?B; finite ?B\\<rbrakk> \\<Longrightarrow> finite ?A\n\ngoal (1 subgoal):\n 1. finite P \\<Longrightarrow>\n    finite\n     {sat_models (abs_ltln\\<^sub>P \\<phi>) \\<inter> Pow P |\\<phi>.\n      prop_atoms \\<phi> \\<subseteq> P}", "by fastforce"], ["", "lemma sat_models_card:\n  \"finite P \\<Longrightarrow> card ({sat_models (abs_ltln\\<^sub>P \\<phi>) \\<inter> Pow P | \\<phi>. prop_atoms \\<phi> \\<subseteq> P}) \\<le> 2 ^ 2 ^ card P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite P \\<Longrightarrow>\n    card\n     {sat_models (abs_ltln\\<^sub>P \\<phi>) \\<inter> Pow P |\\<phi>.\n      prop_atoms \\<phi> \\<subseteq> P}\n    \\<le> 2 ^ 2 ^ card P", "by (metis (mono_tags, lifting) sat_models_pow_pow Pow_def card_Pow card_mono finite_Collect_subsets)"], ["", "lemma image_filter:\n  \"f ` {g a | a. P a} = {f (g a) | a. P a}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f ` {g a |a. P a} = {f (g a) |a. P a}", "by blast"], ["", "lemma prop_equiv_finite:\n  \"finite P \\<Longrightarrow> finite {abs_ltln\\<^sub>P \\<psi> | \\<psi>. prop_atoms \\<psi> \\<subseteq> P}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite P \\<Longrightarrow>\n    finite\n     {abs_ltln\\<^sub>P \\<psi> |\\<psi>. prop_atoms \\<psi> \\<subseteq> P}", "by (auto simp: image_filter sat_models_finite finite_imageD[OF _ sat_models_inter_inj])"], ["", "lemma prop_equiv_card:\n  \"finite P \\<Longrightarrow> card {abs_ltln\\<^sub>P \\<psi> | \\<psi>. prop_atoms \\<psi> \\<subseteq> P} \\<le> 2 ^ 2 ^ card P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite P \\<Longrightarrow>\n    card {abs_ltln\\<^sub>P \\<psi> |\\<psi>. prop_atoms \\<psi> \\<subseteq> P}\n    \\<le> 2 ^ 2 ^ card P", "by (auto simp: image_filter sat_models_card card_image[OF sat_models_inter_inj, symmetric])"], ["", "lemma prop_equiv_subset:\n  \"{abs_ltln\\<^sub>P \\<psi> |\\<psi>. nested_prop_atoms \\<psi> \\<subseteq> P} \\<subseteq> {abs_ltln\\<^sub>P \\<psi> |\\<psi>. prop_atoms \\<psi> \\<subseteq> P}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {abs_ltln\\<^sub>P \\<psi> |\\<psi>.\n     nested_prop_atoms \\<psi> \\<subseteq> P}\n    \\<subseteq> {abs_ltln\\<^sub>P \\<psi> |\\<psi>.\n                 prop_atoms \\<psi> \\<subseteq> P}", "using prop_atoms_nested_prop_atoms"], ["proof (prove)\nusing this:\n  prop_atoms ?\\<phi> \\<subseteq> nested_prop_atoms ?\\<phi>\n\ngoal (1 subgoal):\n 1. {abs_ltln\\<^sub>P \\<psi> |\\<psi>.\n     nested_prop_atoms \\<psi> \\<subseteq> P}\n    \\<subseteq> {abs_ltln\\<^sub>P \\<psi> |\\<psi>.\n                 prop_atoms \\<psi> \\<subseteq> P}", "by blast"], ["", "lemma prop_equiv_finite':\n  \"finite P \\<Longrightarrow> finite {abs_ltln\\<^sub>P \\<psi> | \\<psi>. nested_prop_atoms \\<psi> \\<subseteq> P}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite P \\<Longrightarrow>\n    finite\n     {abs_ltln\\<^sub>P \\<psi> |\\<psi>.\n      nested_prop_atoms \\<psi> \\<subseteq> P}", "using prop_equiv_finite prop_equiv_subset finite_subset"], ["proof (prove)\nusing this:\n  finite ?P \\<Longrightarrow>\n  finite {abs_ltln\\<^sub>P \\<psi> |\\<psi>. prop_atoms \\<psi> \\<subseteq> ?P}\n  {abs_ltln\\<^sub>P \\<psi> |\\<psi>. nested_prop_atoms \\<psi> \\<subseteq> ?P}\n  \\<subseteq> {abs_ltln\\<^sub>P \\<psi> |\\<psi>.\n               prop_atoms \\<psi> \\<subseteq> ?P}\n  \\<lbrakk>?A \\<subseteq> ?B; finite ?B\\<rbrakk> \\<Longrightarrow> finite ?A\n\ngoal (1 subgoal):\n 1. finite P \\<Longrightarrow>\n    finite\n     {abs_ltln\\<^sub>P \\<psi> |\\<psi>.\n      nested_prop_atoms \\<psi> \\<subseteq> P}", "by fast"], ["", "lemma prop_equiv_card':\n  \"finite P \\<Longrightarrow> card {abs_ltln\\<^sub>P \\<psi> | \\<psi>. nested_prop_atoms \\<psi> \\<subseteq> P} \\<le> 2 ^ 2 ^ card P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite P \\<Longrightarrow>\n    card\n     {abs_ltln\\<^sub>P \\<psi> |\\<psi>.\n      nested_prop_atoms \\<psi> \\<subseteq> P}\n    \\<le> 2 ^ 2 ^ card P", "by (metis (mono_tags, lifting) prop_equiv_card prop_equiv_subset prop_equiv_finite card_mono le_trans)"], ["", "subsection \\<open>Substitution\\<close>"], ["", "fun subst :: \"'a ltln \\<Rightarrow> ('a ltln \\<rightharpoonup> 'a ltln) \\<Rightarrow> 'a ltln\"\nwhere\n  \"subst true\\<^sub>n m = true\\<^sub>n\"\n| \"subst false\\<^sub>n m = false\\<^sub>n\"\n| \"subst (\\<phi> and\\<^sub>n \\<psi>) m = subst \\<phi> m and\\<^sub>n subst \\<psi> m\"\n| \"subst (\\<phi> or\\<^sub>n \\<psi>) m = subst \\<phi> m or\\<^sub>n subst \\<psi> m\"\n| \"subst \\<phi> m = (case m \\<phi> of Some \\<psi> \\<Rightarrow> \\<psi> | None \\<Rightarrow> \\<phi>)\""], ["", "text \\<open>Based on Uwe Schoening's Translation Lemma (Logic for CS, p. 54)\\<close>"], ["", "lemma ltl_prop_equiv_subst_S:\n  \"S \\<Turnstile>\\<^sub>P subst \\<phi> m = ((S - dom m) \\<union> {\\<chi> | \\<chi> \\<chi>'. \\<chi> \\<in> dom m \\<and> m \\<chi> = Some \\<chi>' \\<and> S \\<Turnstile>\\<^sub>P \\<chi>'}) \\<Turnstile>\\<^sub>P \\<phi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S \\<Turnstile>\\<^sub>P subst \\<phi> m =\n    (S - dom m \\<union>\n     {uu_.\n      \\<exists>\\<chi> \\<chi>'.\n         uu_ = \\<chi> \\<and>\n         \\<chi> \\<in> dom m \\<and>\n         m \\<chi> = Some \\<chi>' \\<and>\n         S \\<Turnstile>\\<^sub>P \\<chi>'}) \\<Turnstile>\\<^sub>P\n    \\<phi>", "by (induction \\<phi>) (auto split: option.split)"], ["", "lemma subst_respects_ltl_prop_entailment:\n  \"\\<phi> \\<longrightarrow>\\<^sub>P \\<psi> \\<Longrightarrow> subst \\<phi> m \\<longrightarrow>\\<^sub>P subst \\<psi> m\"\n  \"\\<phi> \\<sim>\\<^sub>P \\<psi> \\<Longrightarrow> subst \\<phi> m \\<sim>\\<^sub>P subst \\<psi> m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<phi> \\<longrightarrow>\\<^sub>P \\<psi> \\<Longrightarrow>\n     subst \\<phi> m \\<longrightarrow>\\<^sub>P subst \\<psi> m) &&&\n    (\\<phi> \\<sim>\\<^sub>P \\<psi> \\<Longrightarrow>\n     subst \\<phi> m \\<sim>\\<^sub>P subst \\<psi> m)", "unfolding ltl_prop_equiv_def ltl_prop_implies_def ltl_prop_equiv_subst_S"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>\\<A>.\n        \\<A> \\<Turnstile>\\<^sub>P \\<phi> \\<longrightarrow>\n        \\<A> \\<Turnstile>\\<^sub>P \\<psi> \\<Longrightarrow>\n     \\<forall>\\<A>.\n        (\\<A> - dom m \\<union>\n         {uu_.\n          \\<exists>\\<chi> \\<chi>'.\n             uu_ = \\<chi> \\<and>\n             \\<chi> \\<in> dom m \\<and>\n             m \\<chi> = Some \\<chi>' \\<and>\n             \\<A> \\<Turnstile>\\<^sub>P \\<chi>'}) \\<Turnstile>\\<^sub>P\n        \\<phi> \\<longrightarrow>\n        (\\<A> - dom m \\<union>\n         {uu_.\n          \\<exists>\\<chi> \\<chi>'.\n             uu_ = \\<chi> \\<and>\n             \\<chi> \\<in> dom m \\<and>\n             m \\<chi> = Some \\<chi>' \\<and>\n             \\<A> \\<Turnstile>\\<^sub>P \\<chi>'}) \\<Turnstile>\\<^sub>P\n        \\<psi>) &&&\n    (\\<forall>\\<A>.\n        \\<A> \\<Turnstile>\\<^sub>P \\<phi> =\n        \\<A> \\<Turnstile>\\<^sub>P \\<psi> \\<Longrightarrow>\n     \\<forall>\\<A>.\n        (\\<A> - dom m \\<union>\n         {uu_.\n          \\<exists>\\<chi> \\<chi>'.\n             uu_ = \\<chi> \\<and>\n             \\<chi> \\<in> dom m \\<and>\n             m \\<chi> = Some \\<chi>' \\<and>\n             \\<A> \\<Turnstile>\\<^sub>P \\<chi>'}) \\<Turnstile>\\<^sub>P\n        \\<phi> =\n        (\\<A> - dom m \\<union>\n         {uu_.\n          \\<exists>\\<chi> \\<chi>'.\n             uu_ = \\<chi> \\<and>\n             \\<chi> \\<in> dom m \\<and>\n             m \\<chi> = Some \\<chi>' \\<and>\n             \\<A> \\<Turnstile>\\<^sub>P \\<chi>'}) \\<Turnstile>\\<^sub>P\n        \\<psi>)", "by blast+"], ["", "lemma eval_subst:\n  \"eval \\<phi> = Yes \\<Longrightarrow> eval (subst \\<phi> m) = Yes\"\n  \"eval \\<phi> = No \\<Longrightarrow> eval (subst \\<phi> m) = No\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (eval \\<phi> = Yes \\<Longrightarrow> eval (subst \\<phi> m) = Yes) &&&\n    (eval \\<phi> = No \\<Longrightarrow> eval (subst \\<phi> m) = No)", "by (meson empty_subsetI eval_prop_entailment ltl_prop_entailment_monotonI ltl_prop_equiv_subst_S subset_UNIV)+"], ["", "lemma subst_respects_ltl_const_entailment:\n  \"\\<phi> \\<sim>\\<^sub>C \\<psi> \\<Longrightarrow> subst \\<phi> m \\<sim>\\<^sub>C subst \\<psi> m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<phi> \\<sim>\\<^sub>C \\<psi> \\<Longrightarrow>\n    subst \\<phi> m \\<sim>\\<^sub>C subst \\<psi> m", "unfolding ltl_const_equiv_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<phi> = \\<psi> \\<or>\n    eval \\<phi> = eval \\<psi> \\<and>\n    eval \\<psi> \\<noteq> Maybe \\<Longrightarrow>\n    subst \\<phi> m = subst \\<psi> m \\<or>\n    eval (subst \\<phi> m) = eval (subst \\<psi> m) \\<and>\n    eval (subst \\<psi> m) \\<noteq> Maybe", "by (cases \"eval \\<psi>\") (metis eval_subst(1), metis eval_subst(2), blast)"], ["", "subsection \\<open>Order of Equivalence Relations\\<close>"], ["", "locale ltl_equivalence =\n  fixes\n    eq :: \"'a ltln \\<Rightarrow> 'a ltln \\<Rightarrow> bool\" (infix \"\\<sim>\" 75)\n  assumes\n    eq_equivp: \"equivp (\\<sim>)\"\n  and\n    ge_const_equiv: \"(\\<sim>\\<^sub>C) \\<le> (\\<sim>)\"\n  and\n    le_lang_equiv: \"(\\<sim>) \\<le> (\\<sim>\\<^sub>L)\"\nbegin"], ["", "lemma eq_implies_ltl_equiv:\n  \"\\<phi> \\<sim> \\<psi> \\<Longrightarrow> w \\<Turnstile>\\<^sub>n \\<phi> = w \\<Turnstile>\\<^sub>n \\<psi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<phi> \\<sim> \\<psi> \\<Longrightarrow>\n    w \\<Turnstile>\\<^sub>n \\<phi> = w \\<Turnstile>\\<^sub>n \\<psi>", "using le_lang_equiv ltl_lang_equiv_def"], ["proof (prove)\nusing this:\n  (\\<sim>) \\<le> (\\<sim>\\<^sub>L)\n  ?\\<phi> \\<sim>\\<^sub>L ?\\<psi> \\<equiv>\n  \\<forall>w.\n     w \\<Turnstile>\\<^sub>n ?\\<phi> = w \\<Turnstile>\\<^sub>n ?\\<psi>\n\ngoal (1 subgoal):\n 1. \\<phi> \\<sim> \\<psi> \\<Longrightarrow>\n    w \\<Turnstile>\\<^sub>n \\<phi> = w \\<Turnstile>\\<^sub>n \\<psi>", "by blast"], ["", "lemma const_implies_eq:\n  \"\\<phi> \\<sim>\\<^sub>C \\<psi> \\<Longrightarrow> \\<phi> \\<sim> \\<psi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<phi> \\<sim>\\<^sub>C \\<psi> \\<Longrightarrow> \\<phi> \\<sim> \\<psi>", "using ge_const_equiv"], ["proof (prove)\nusing this:\n  (\\<sim>\\<^sub>C) \\<le> (\\<sim>)\n\ngoal (1 subgoal):\n 1. \\<phi> \\<sim>\\<^sub>C \\<psi> \\<Longrightarrow> \\<phi> \\<sim> \\<psi>", "by blast"], ["", "lemma eq_implies_lang:\n  \"\\<phi> \\<sim> \\<psi> \\<Longrightarrow> \\<phi> \\<sim>\\<^sub>L \\<psi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<phi> \\<sim> \\<psi> \\<Longrightarrow> \\<phi> \\<sim>\\<^sub>L \\<psi>", "using le_lang_equiv"], ["proof (prove)\nusing this:\n  (\\<sim>) \\<le> (\\<sim>\\<^sub>L)\n\ngoal (1 subgoal):\n 1. \\<phi> \\<sim> \\<psi> \\<Longrightarrow> \\<phi> \\<sim>\\<^sub>L \\<psi>", "by blast"], ["", "lemma eq_refl[simp]:\n  \"\\<phi> \\<sim> \\<phi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<phi> \\<sim> \\<phi>", "by (meson eq_equivp equivp_reflp)"], ["", "lemma eq_sym[sym]:\n  \"\\<phi> \\<sim> \\<psi> \\<Longrightarrow> \\<psi> \\<sim> \\<phi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<phi> \\<sim> \\<psi> \\<Longrightarrow> \\<psi> \\<sim> \\<phi>", "by (meson eq_equivp equivp_symp)"], ["", "lemma eq_trans[trans]:\n  \"\\<phi> \\<sim> \\<psi> \\<Longrightarrow> \\<psi> \\<sim> \\<chi> \\<Longrightarrow> \\<phi> \\<sim> \\<chi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<phi> \\<sim> \\<psi>; \\<psi> \\<sim> \\<chi>\\<rbrakk>\n    \\<Longrightarrow> \\<phi> \\<sim> \\<chi>", "by (meson eq_equivp equivp_transp)"], ["", "end"], ["", "interpretation ltl_lang_equivalence: ltl_equivalence \"(\\<sim>\\<^sub>L)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ltl_equivalence (\\<sim>\\<^sub>L)", "using ltl_lang_equiv_equivp ltl_const_equiv_lt_ltl_prop_equiv ltl_prop_equiv_lt_ltl_lang_equiv"], ["proof (prove)\nusing this:\n  equivp (\\<sim>\\<^sub>L)\n  (\\<sim>\\<^sub>C) \\<le> (\\<sim>\\<^sub>P)\n  (\\<sim>\\<^sub>P) \\<le> (\\<sim>\\<^sub>L)\n\ngoal (1 subgoal):\n 1. ltl_equivalence (\\<sim>\\<^sub>L)", "by unfold_locales blast+"], ["", "interpretation ltl_prop_equivalence: ltl_equivalence \"(\\<sim>\\<^sub>P)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ltl_equivalence (\\<sim>\\<^sub>P)", "using ltl_prop_equiv_equivp ltl_const_equiv_lt_ltl_prop_equiv ltl_prop_equiv_lt_ltl_lang_equiv"], ["proof (prove)\nusing this:\n  equivp (\\<sim>\\<^sub>P)\n  (\\<sim>\\<^sub>C) \\<le> (\\<sim>\\<^sub>P)\n  (\\<sim>\\<^sub>P) \\<le> (\\<sim>\\<^sub>L)\n\ngoal (1 subgoal):\n 1. ltl_equivalence (\\<sim>\\<^sub>P)", "by unfold_locales blast+"], ["", "interpretation ltl_const_equivalence: ltl_equivalence \"(\\<sim>\\<^sub>C)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ltl_equivalence (\\<sim>\\<^sub>C)", "using ltl_const_equiv_equivp ltl_const_equiv_lt_ltl_prop_equiv ltl_prop_equiv_lt_ltl_lang_equiv"], ["proof (prove)\nusing this:\n  equivp (\\<sim>\\<^sub>C)\n  (\\<sim>\\<^sub>C) \\<le> (\\<sim>\\<^sub>P)\n  (\\<sim>\\<^sub>P) \\<le> (\\<sim>\\<^sub>L)\n\ngoal (1 subgoal):\n 1. ltl_equivalence (\\<sim>\\<^sub>C)", "by unfold_locales blast+"], ["", "end"]]}