{"file_name": "/home/qj213/afp-2021-10-22/thys/Prime_Harmonic_Series/Squarefree_Nat.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Prime_Harmonic_Series", "problem_names": ["lemma squarefree_part_0 [simp]: \"squarefree_part 0 = {}\"", "lemma square_part_0 [simp]: \"square_part 0 = 0\"", "lemma squarefree_decompose: \"\\<Prod>(squarefree_part n) * square_part n ^ 2 = n\"", "lemma squarefree_part_pos [simp]: \"\\<Prod>(squarefree_part n) > 0\"", "lemma squarefree_part_ge_Suc_0 [simp]: \"\\<Prod>(squarefree_part n) \\<ge> Suc 0\"", "lemma squarefree_part_subset [intro]: \"squarefree_part n \\<subseteq> prime_factors n\"", "lemma squarefree_part_finite [simp]: \"finite (squarefree_part n)\"", "lemma squarefree_part_dvd [simp]: \"\\<Prod>(squarefree_part n) dvd n\"", "lemma squarefree_part_dvd' [simp]: \"p \\<in> squarefree_part n \\<Longrightarrow> p dvd n\"", "lemma square_part_dvd [simp]: \"square_part n ^ 2 dvd n\"", "lemma square_part_dvd' [simp]: \"square_part n dvd n\"", "lemma squarefree_part_le: \"p \\<in> squarefree_part n \\<Longrightarrow> p \\<le> n\"", "lemma square_part_le: \"square_part n \\<le> n\"", "lemma square_part_le_sqrt: \"square_part n \\<le> nat \\<lfloor>sqrt (real n)\\<rfloor>\"", "lemma square_part_pos [simp]: \"n > 0 \\<Longrightarrow> square_part n > 0\"", "lemma square_part_ge_Suc_0 [simp]: \"n > 0 \\<Longrightarrow> square_part n \\<ge> Suc 0\"", "lemma zero_not_in_squarefree_part [simp]: \"0 \\<notin> squarefree_part n\"", "lemma multiplicity_squarefree_part:\n  \"prime p \\<Longrightarrow> multiplicity p (\\<Prod>(squarefree_part n)) = (if p \\<in> squarefree_part n then 1 else 0)\"", "lemma square_dvd_squarefree_part_iff:\n  \"x^2 dvd \\<Prod>(squarefree_part n) \\<longleftrightarrow> x = 1\"", "lemma squarefree_decomposition_unique1:\n  assumes \"squarefree_part m = squarefree_part n\"\n  assumes \"square_part m = square_part n\"\n  shows   \"m = n\"", "lemma squarefree_decomposition_unique2:\n  assumes n: \"n > 0\"\n  assumes decomp: \"n = (\\<Prod>A2 * s2^2)\"\n  assumes prime: \"\\<And>x. x \\<in> A2 \\<Longrightarrow> prime x\"\n  assumes fin: \"finite A2\"\n  assumes s2_nonneg: \"s2 \\<ge> 0\"\n  shows \"A2 = squarefree_part n\" and \"s2 = square_part n\"", "lemma squarefree_decomposition_unique2':\n  assumes decomp: \"(\\<Prod>A1 * s1^2) = (\\<Prod>A2 * s2^2 :: nat)\"\n  assumes fin: \"finite A1\" \"finite A2\"\n  assumes subset: \"\\<And>x. x \\<in> A1 \\<Longrightarrow> prime x\" \"\\<And>x. x \\<in> A2 \\<Longrightarrow> prime x\"\n  assumes pos: \"s1 > 0\" \"s2 > 0\"\n  defines \"n \\<equiv> \\<Prod>A1 * s1^2\"\n  shows \"A1 = A2\" \"s1 = s2\"", "lemma primes_lower_bound:\n  fixes n :: nat\n  assumes \"n > 0\"\n  defines \"\\<pi> \\<equiv> \\<lambda>n. card {p. prime p \\<and> p \\<le> n}\"\n  shows   \"real (\\<pi> n) \\<ge> ln (real n) / ln 4\""], "translations": [["", "lemma squarefree_part_0 [simp]: \"squarefree_part 0 = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. squarefree_part 0 = {}", "by (simp add: squarefree_part_def)"], ["", "lemma square_part_0 [simp]: \"square_part 0 = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. square_part 0 = 0", "by (simp add: square_part_def)"], ["", "lemma squarefree_decompose: \"\\<Prod>(squarefree_part n) * square_part n ^ 2 = n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Prod>(squarefree_part n) * (square_part n)\\<^sup>2 = n", "proof (cases \"n = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<Prod>(squarefree_part n) * (square_part n)\\<^sup>2 = n\n 2. n \\<noteq> 0 \\<Longrightarrow>\n    \\<Prod>(squarefree_part n) * (square_part n)\\<^sup>2 = n", "case False"], ["proof (state)\nthis:\n  n \\<noteq> 0\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<Prod>(squarefree_part n) * (square_part n)\\<^sup>2 = n\n 2. n \\<noteq> 0 \\<Longrightarrow>\n    \\<Prod>(squarefree_part n) * (square_part n)\\<^sup>2 = n", "define A s where \"A = squarefree_part n\" and \"s = square_part n\""], ["proof (state)\nthis:\n  A = squarefree_part n\n  s = square_part n\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<Prod>(squarefree_part n) * (square_part n)\\<^sup>2 = n\n 2. n \\<noteq> 0 \\<Longrightarrow>\n    \\<Prod>(squarefree_part n) * (square_part n)\\<^sup>2 = n", "have \"(\\<Prod>A) = (\\<Prod>p\\<in>A. p ^ (multiplicity p n mod 2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Prod>A = (\\<Prod>p\\<in>A. p ^ (multiplicity p n mod 2))", "by (intro prod.cong) (auto simp: A_def squarefree_part_def elim!: oddE)"], ["proof (state)\nthis:\n  \\<Prod>A = (\\<Prod>p\\<in>A. p ^ (multiplicity p n mod 2))\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<Prod>(squarefree_part n) * (square_part n)\\<^sup>2 = n\n 2. n \\<noteq> 0 \\<Longrightarrow>\n    \\<Prod>(squarefree_part n) * (square_part n)\\<^sup>2 = n", "also"], ["proof (state)\nthis:\n  \\<Prod>A = (\\<Prod>p\\<in>A. p ^ (multiplicity p n mod 2))\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<Prod>(squarefree_part n) * (square_part n)\\<^sup>2 = n\n 2. n \\<noteq> 0 \\<Longrightarrow>\n    \\<Prod>(squarefree_part n) * (square_part n)\\<^sup>2 = n", "have \"\\<dots> = (\\<Prod>p\\<in>prime_factors n. p ^ (multiplicity p n mod 2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Prod>p\\<in>A. p ^ (multiplicity p n mod 2)) =\n    (\\<Prod>p\\<in>prime_factors n. p ^ (multiplicity p n mod 2))", "by (intro prod.mono_neutral_left) (auto simp: A_def  squarefree_part_def)"], ["proof (state)\nthis:\n  (\\<Prod>p\\<in>A. p ^ (multiplicity p n mod 2)) =\n  (\\<Prod>p\\<in>prime_factors n. p ^ (multiplicity p n mod 2))\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<Prod>(squarefree_part n) * (square_part n)\\<^sup>2 = n\n 2. n \\<noteq> 0 \\<Longrightarrow>\n    \\<Prod>(squarefree_part n) * (square_part n)\\<^sup>2 = n", "also"], ["proof (state)\nthis:\n  (\\<Prod>p\\<in>A. p ^ (multiplicity p n mod 2)) =\n  (\\<Prod>p\\<in>prime_factors n. p ^ (multiplicity p n mod 2))\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<Prod>(squarefree_part n) * (square_part n)\\<^sup>2 = n\n 2. n \\<noteq> 0 \\<Longrightarrow>\n    \\<Prod>(squarefree_part n) * (square_part n)\\<^sup>2 = n", "from False"], ["proof (chain)\npicking this:\n  n \\<noteq> 0", "have \"\\<dots> * s^2 = n\""], ["proof (prove)\nusing this:\n  n \\<noteq> 0\n\ngoal (1 subgoal):\n 1. (\\<Prod>p\\<in>prime_factors n. p ^ (multiplicity p n mod 2)) *\n    s\\<^sup>2 =\n    n", "by (simp add: s_def square_part_def prod.distrib [symmetric] power_add [symmetric] \n                  power_mult [symmetric] prime_factorization_nat [symmetric] algebra_simps\n                  prod_power_distrib)"], ["proof (state)\nthis:\n  (\\<Prod>p\\<in>prime_factors n. p ^ (multiplicity p n mod 2)) * s\\<^sup>2 =\n  n\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<Prod>(squarefree_part n) * (square_part n)\\<^sup>2 = n\n 2. n \\<noteq> 0 \\<Longrightarrow>\n    \\<Prod>(squarefree_part n) * (square_part n)\\<^sup>2 = n", "finally"], ["proof (chain)\npicking this:\n  \\<Prod>A * s\\<^sup>2 = n", "show \"\\<Prod>A * s^2 = n\""], ["proof (prove)\nusing this:\n  \\<Prod>A * s\\<^sup>2 = n\n\ngoal (1 subgoal):\n 1. \\<Prod>A * s\\<^sup>2 = n", "."], ["proof (state)\nthis:\n  \\<Prod>A * s\\<^sup>2 = n\n\ngoal (1 subgoal):\n 1. n = 0 \\<Longrightarrow>\n    \\<Prod>(squarefree_part n) * (square_part n)\\<^sup>2 = n", "qed simp"], ["", "lemma squarefree_part_pos [simp]: \"\\<Prod>(squarefree_part n) > 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < \\<Prod>(squarefree_part n)", "using prime_gt_0_nat"], ["proof (prove)\nusing this:\n  prime ?p \\<Longrightarrow> 0 < ?p\n\ngoal (1 subgoal):\n 1. 0 < \\<Prod>(squarefree_part n)", "unfolding squarefree_part_def"], ["proof (prove)\nusing this:\n  prime ?p \\<Longrightarrow> 0 < ?p\n\ngoal (1 subgoal):\n 1. 0 < \\<Prod>{p. p \\<in># prime_factorization n \\<and>\n                   odd (multiplicity p n)}", "by auto"], ["", "lemma squarefree_part_ge_Suc_0 [simp]: \"\\<Prod>(squarefree_part n) \\<ge> Suc 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Suc 0 \\<le> \\<Prod>(squarefree_part n)", "using squarefree_part_pos[of n]"], ["proof (prove)\nusing this:\n  0 < \\<Prod>(squarefree_part n)\n\ngoal (1 subgoal):\n 1. Suc 0 \\<le> \\<Prod>(squarefree_part n)", "by presburger"], ["", "lemma squarefree_part_subset [intro]: \"squarefree_part n \\<subseteq> prime_factors n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. squarefree_part n \\<subseteq> prime_factors n", "unfolding squarefree_part_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {p. p \\<in># prime_factorization n \\<and> odd (multiplicity p n)}\n    \\<subseteq> prime_factors n", "by auto"], ["", "lemma squarefree_part_finite [simp]: \"finite (squarefree_part n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (squarefree_part n)", "by (rule finite_subset[OF squarefree_part_subset]) simp"], ["", "lemma squarefree_part_dvd [simp]: \"\\<Prod>(squarefree_part n) dvd n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Prod>(squarefree_part n) dvd n", "by (subst (2) squarefree_decompose [of n, symmetric]) simp"], ["", "lemma squarefree_part_dvd' [simp]: \"p \\<in> squarefree_part n \\<Longrightarrow> p dvd n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<in> squarefree_part n \\<Longrightarrow> p dvd n", "by (rule dvd_prodD[OF _ squarefree_part_dvd]) simp_all"], ["", "lemma square_part_dvd [simp]: \"square_part n ^ 2 dvd n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (square_part n)\\<^sup>2 dvd n", "by (subst (2) squarefree_decompose [of n, symmetric]) simp"], ["", "lemma square_part_dvd' [simp]: \"square_part n dvd n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. square_part n dvd n", "by (subst (2) squarefree_decompose [of n, symmetric]) simp"], ["", "lemma squarefree_part_le: \"p \\<in> squarefree_part n \\<Longrightarrow> p \\<le> n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<in> squarefree_part n \\<Longrightarrow> p \\<le> n", "by (cases \"n = 0\") (simp_all add: dvd_imp_le)"], ["", "lemma square_part_le: \"square_part n \\<le> n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. square_part n \\<le> n", "by (cases \"n = 0\") (simp_all add: dvd_imp_le)"], ["", "lemma square_part_le_sqrt: \"square_part n \\<le> nat \\<lfloor>sqrt (real n)\\<rfloor>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. square_part n \\<le> nat \\<lfloor>sqrt (real n)\\<rfloor>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. square_part n \\<le> nat \\<lfloor>sqrt (real n)\\<rfloor>", "have \"1 * square_part n ^ 2 \\<le> \\<Prod>(squarefree_part n) * square_part n ^ 2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 * (square_part n)\\<^sup>2\n    \\<le> \\<Prod>(squarefree_part n) * (square_part n)\\<^sup>2", "by (intro mult_right_mono) simp_all"], ["proof (state)\nthis:\n  1 * (square_part n)\\<^sup>2\n  \\<le> \\<Prod>(squarefree_part n) * (square_part n)\\<^sup>2\n\ngoal (1 subgoal):\n 1. square_part n \\<le> nat \\<lfloor>sqrt (real n)\\<rfloor>", "also"], ["proof (state)\nthis:\n  1 * (square_part n)\\<^sup>2\n  \\<le> \\<Prod>(squarefree_part n) * (square_part n)\\<^sup>2\n\ngoal (1 subgoal):\n 1. square_part n \\<le> nat \\<lfloor>sqrt (real n)\\<rfloor>", "have \"\\<dots> = n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Prod>(squarefree_part n) * (square_part n)\\<^sup>2 = n", "by (rule squarefree_decompose)"], ["proof (state)\nthis:\n  \\<Prod>(squarefree_part n) * (square_part n)\\<^sup>2 = n\n\ngoal (1 subgoal):\n 1. square_part n \\<le> nat \\<lfloor>sqrt (real n)\\<rfloor>", "finally"], ["proof (chain)\npicking this:\n  1 * (square_part n)\\<^sup>2 \\<le> n", "have \"real (square_part n ^ 2) \\<le> real n\""], ["proof (prove)\nusing this:\n  1 * (square_part n)\\<^sup>2 \\<le> n\n\ngoal (1 subgoal):\n 1. real ((square_part n)\\<^sup>2) \\<le> real n", "by (subst of_nat_le_iff) simp"], ["proof (state)\nthis:\n  real ((square_part n)\\<^sup>2) \\<le> real n\n\ngoal (1 subgoal):\n 1. square_part n \\<le> nat \\<lfloor>sqrt (real n)\\<rfloor>", "hence \"sqrt (real (square_part n ^ 2)) \\<le> sqrt (real n)\""], ["proof (prove)\nusing this:\n  real ((square_part n)\\<^sup>2) \\<le> real n\n\ngoal (1 subgoal):\n 1. sqrt (real ((square_part n)\\<^sup>2)) \\<le> sqrt (real n)", "by (subst real_sqrt_le_iff) simp_all"], ["proof (state)\nthis:\n  sqrt (real ((square_part n)\\<^sup>2)) \\<le> sqrt (real n)\n\ngoal (1 subgoal):\n 1. square_part n \\<le> nat \\<lfloor>sqrt (real n)\\<rfloor>", "also"], ["proof (state)\nthis:\n  sqrt (real ((square_part n)\\<^sup>2)) \\<le> sqrt (real n)\n\ngoal (1 subgoal):\n 1. square_part n \\<le> nat \\<lfloor>sqrt (real n)\\<rfloor>", "have \"sqrt (real (square_part n ^ 2)) = real (square_part n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sqrt (real ((square_part n)\\<^sup>2)) = real (square_part n)", "by simp"], ["proof (state)\nthis:\n  sqrt (real ((square_part n)\\<^sup>2)) = real (square_part n)\n\ngoal (1 subgoal):\n 1. square_part n \\<le> nat \\<lfloor>sqrt (real n)\\<rfloor>", "finally"], ["proof (chain)\npicking this:\n  real (square_part n) \\<le> sqrt (real n)", "show ?thesis"], ["proof (prove)\nusing this:\n  real (square_part n) \\<le> sqrt (real n)\n\ngoal (1 subgoal):\n 1. square_part n \\<le> nat \\<lfloor>sqrt (real n)\\<rfloor>", "by linarith"], ["proof (state)\nthis:\n  square_part n \\<le> nat \\<lfloor>sqrt (real n)\\<rfloor>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma square_part_pos [simp]: \"n > 0 \\<Longrightarrow> square_part n > 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < n \\<Longrightarrow> 0 < square_part n", "unfolding square_part_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < n \\<Longrightarrow>\n    0 < (if n = 0 then 0\n         else \\<Prod>p\\<in>prime_factors n. p ^ (multiplicity p n div 2))", "using prime_gt_0_nat"], ["proof (prove)\nusing this:\n  prime ?p \\<Longrightarrow> 0 < ?p\n\ngoal (1 subgoal):\n 1. 0 < n \\<Longrightarrow>\n    0 < (if n = 0 then 0\n         else \\<Prod>p\\<in>prime_factors n. p ^ (multiplicity p n div 2))", "by auto"], ["", "lemma square_part_ge_Suc_0 [simp]: \"n > 0 \\<Longrightarrow> square_part n \\<ge> Suc 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < n \\<Longrightarrow> Suc 0 \\<le> square_part n", "using square_part_pos[of n]"], ["proof (prove)\nusing this:\n  0 < n \\<Longrightarrow> 0 < square_part n\n\ngoal (1 subgoal):\n 1. 0 < n \\<Longrightarrow> Suc 0 \\<le> square_part n", "by presburger"], ["", "lemma zero_not_in_squarefree_part [simp]: \"0 \\<notin> squarefree_part n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<notin> squarefree_part n", "unfolding squarefree_part_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<notin> {p. p \\<in># prime_factorization n \\<and>\n                   odd (multiplicity p n)}", "by auto"], ["", "lemma multiplicity_squarefree_part:\n  \"prime p \\<Longrightarrow> multiplicity p (\\<Prod>(squarefree_part n)) = (if p \\<in> squarefree_part n then 1 else 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prime p \\<Longrightarrow>\n    multiplicity p (\\<Prod>(squarefree_part n)) =\n    (if p \\<in> squarefree_part n then 1 else 0)", "using squarefree_part_subset[of n]"], ["proof (prove)\nusing this:\n  squarefree_part n \\<subseteq> prime_factors n\n\ngoal (1 subgoal):\n 1. prime p \\<Longrightarrow>\n    multiplicity p (\\<Prod>(squarefree_part n)) =\n    (if p \\<in> squarefree_part n then 1 else 0)", "by (intro multiplicity_prod_prime_powers_nat') auto"], ["", "text \\<open>\n  The squarefree part really is square, its only square divisor is 1.\n\\<close>"], ["", "lemma square_dvd_squarefree_part_iff:\n  \"x^2 dvd \\<Prod>(squarefree_part n) \\<longleftrightarrow> x = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x\\<^sup>2 dvd \\<Prod>(squarefree_part n)) = (x = 1)", "proof (rule iffI, rule multiplicity_eq_nat)"], ["proof (state)\ngoal (4 subgoals):\n 1. x\\<^sup>2 dvd \\<Prod>(squarefree_part n) \\<Longrightarrow> 0 < x\n 2. x\\<^sup>2 dvd \\<Prod>(squarefree_part n) \\<Longrightarrow> 0 < 1\n 3. \\<And>p.\n       \\<lbrakk>x\\<^sup>2 dvd \\<Prod>(squarefree_part n); prime p\\<rbrakk>\n       \\<Longrightarrow> multiplicity p x = multiplicity p 1\n 4. x = 1 \\<Longrightarrow> x\\<^sup>2 dvd \\<Prod>(squarefree_part n)", "assume dvd: \"x^2 dvd \\<Prod>(squarefree_part n)\""], ["proof (state)\nthis:\n  x\\<^sup>2 dvd \\<Prod>(squarefree_part n)\n\ngoal (4 subgoals):\n 1. x\\<^sup>2 dvd \\<Prod>(squarefree_part n) \\<Longrightarrow> 0 < x\n 2. x\\<^sup>2 dvd \\<Prod>(squarefree_part n) \\<Longrightarrow> 0 < 1\n 3. \\<And>p.\n       \\<lbrakk>x\\<^sup>2 dvd \\<Prod>(squarefree_part n); prime p\\<rbrakk>\n       \\<Longrightarrow> multiplicity p x = multiplicity p 1\n 4. x = 1 \\<Longrightarrow> x\\<^sup>2 dvd \\<Prod>(squarefree_part n)", "hence \"x \\<noteq> 0\""], ["proof (prove)\nusing this:\n  x\\<^sup>2 dvd \\<Prod>(squarefree_part n)\n\ngoal (1 subgoal):\n 1. x \\<noteq> 0", "using squarefree_part_subset[of n] prime_gt_0_nat"], ["proof (prove)\nusing this:\n  x\\<^sup>2 dvd \\<Prod>(squarefree_part n)\n  squarefree_part n \\<subseteq> prime_factors n\n  prime ?p \\<Longrightarrow> 0 < ?p\n\ngoal (1 subgoal):\n 1. x \\<noteq> 0", "by (intro notI) auto"], ["proof (state)\nthis:\n  x \\<noteq> 0\n\ngoal (4 subgoals):\n 1. x\\<^sup>2 dvd \\<Prod>(squarefree_part n) \\<Longrightarrow> 0 < x\n 2. x\\<^sup>2 dvd \\<Prod>(squarefree_part n) \\<Longrightarrow> 0 < 1\n 3. \\<And>p.\n       \\<lbrakk>x\\<^sup>2 dvd \\<Prod>(squarefree_part n); prime p\\<rbrakk>\n       \\<Longrightarrow> multiplicity p x = multiplicity p 1\n 4. x = 1 \\<Longrightarrow> x\\<^sup>2 dvd \\<Prod>(squarefree_part n)", "thus x: \"x > 0\""], ["proof (prove)\nusing this:\n  x \\<noteq> 0\n\ngoal (1 subgoal):\n 1. 0 < x", "by simp"], ["proof (state)\nthis:\n  0 < x\n\ngoal (3 subgoals):\n 1. x\\<^sup>2 dvd \\<Prod>(squarefree_part n) \\<Longrightarrow> 0 < 1\n 2. \\<And>p.\n       \\<lbrakk>x\\<^sup>2 dvd \\<Prod>(squarefree_part n); prime p\\<rbrakk>\n       \\<Longrightarrow> multiplicity p x = multiplicity p 1\n 3. x = 1 \\<Longrightarrow> x\\<^sup>2 dvd \\<Prod>(squarefree_part n)", "fix p :: nat"], ["proof (state)\ngoal (3 subgoals):\n 1. x\\<^sup>2 dvd \\<Prod>(squarefree_part n) \\<Longrightarrow> 0 < 1\n 2. \\<And>p.\n       \\<lbrakk>x\\<^sup>2 dvd \\<Prod>(squarefree_part n); prime p\\<rbrakk>\n       \\<Longrightarrow> multiplicity p x = multiplicity p 1\n 3. x = 1 \\<Longrightarrow> x\\<^sup>2 dvd \\<Prod>(squarefree_part n)", "assume p: \"prime p\""], ["proof (state)\nthis:\n  prime p\n\ngoal (3 subgoals):\n 1. x\\<^sup>2 dvd \\<Prod>(squarefree_part n) \\<Longrightarrow> 0 < 1\n 2. \\<And>p.\n       \\<lbrakk>x\\<^sup>2 dvd \\<Prod>(squarefree_part n); prime p\\<rbrakk>\n       \\<Longrightarrow> multiplicity p x = multiplicity p 1\n 3. x = 1 \\<Longrightarrow> x\\<^sup>2 dvd \\<Prod>(squarefree_part n)", "from p x"], ["proof (chain)\npicking this:\n  prime p\n  0 < x", "have \"2 * multiplicity p x = multiplicity p (x^2)\""], ["proof (prove)\nusing this:\n  prime p\n  0 < x\n\ngoal (1 subgoal):\n 1. 2 * multiplicity p x = multiplicity p (x\\<^sup>2)", "by (simp add: multiplicity_power_nat)"], ["proof (state)\nthis:\n  2 * multiplicity p x = multiplicity p (x\\<^sup>2)\n\ngoal (3 subgoals):\n 1. x\\<^sup>2 dvd \\<Prod>(squarefree_part n) \\<Longrightarrow> 0 < 1\n 2. \\<And>p.\n       \\<lbrakk>x\\<^sup>2 dvd \\<Prod>(squarefree_part n); prime p\\<rbrakk>\n       \\<Longrightarrow> multiplicity p x = multiplicity p 1\n 3. x = 1 \\<Longrightarrow> x\\<^sup>2 dvd \\<Prod>(squarefree_part n)", "also"], ["proof (state)\nthis:\n  2 * multiplicity p x = multiplicity p (x\\<^sup>2)\n\ngoal (3 subgoals):\n 1. x\\<^sup>2 dvd \\<Prod>(squarefree_part n) \\<Longrightarrow> 0 < 1\n 2. \\<And>p.\n       \\<lbrakk>x\\<^sup>2 dvd \\<Prod>(squarefree_part n); prime p\\<rbrakk>\n       \\<Longrightarrow> multiplicity p x = multiplicity p 1\n 3. x = 1 \\<Longrightarrow> x\\<^sup>2 dvd \\<Prod>(squarefree_part n)", "from dvd"], ["proof (chain)\npicking this:\n  x\\<^sup>2 dvd \\<Prod>(squarefree_part n)", "have \"\\<dots> \\<le> multiplicity p (\\<Prod>(squarefree_part n))\""], ["proof (prove)\nusing this:\n  x\\<^sup>2 dvd \\<Prod>(squarefree_part n)\n\ngoal (1 subgoal):\n 1. multiplicity p (x\\<^sup>2)\n    \\<le> multiplicity p (\\<Prod>(squarefree_part n))", "by (intro dvd_imp_multiplicity_le) simp_all"], ["proof (state)\nthis:\n  multiplicity p (x\\<^sup>2)\n  \\<le> multiplicity p (\\<Prod>(squarefree_part n))\n\ngoal (3 subgoals):\n 1. x\\<^sup>2 dvd \\<Prod>(squarefree_part n) \\<Longrightarrow> 0 < 1\n 2. \\<And>p.\n       \\<lbrakk>x\\<^sup>2 dvd \\<Prod>(squarefree_part n); prime p\\<rbrakk>\n       \\<Longrightarrow> multiplicity p x = multiplicity p 1\n 3. x = 1 \\<Longrightarrow> x\\<^sup>2 dvd \\<Prod>(squarefree_part n)", "also"], ["proof (state)\nthis:\n  multiplicity p (x\\<^sup>2)\n  \\<le> multiplicity p (\\<Prod>(squarefree_part n))\n\ngoal (3 subgoals):\n 1. x\\<^sup>2 dvd \\<Prod>(squarefree_part n) \\<Longrightarrow> 0 < 1\n 2. \\<And>p.\n       \\<lbrakk>x\\<^sup>2 dvd \\<Prod>(squarefree_part n); prime p\\<rbrakk>\n       \\<Longrightarrow> multiplicity p x = multiplicity p 1\n 3. x = 1 \\<Longrightarrow> x\\<^sup>2 dvd \\<Prod>(squarefree_part n)", "have \"\\<dots> \\<le> 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. multiplicity p (\\<Prod>(squarefree_part n)) \\<le> 1", "using multiplicity_squarefree_part[of p n] p"], ["proof (prove)\nusing this:\n  prime p \\<Longrightarrow>\n  multiplicity p (\\<Prod>(squarefree_part n)) =\n  (if p \\<in> squarefree_part n then 1 else 0)\n  prime p\n\ngoal (1 subgoal):\n 1. multiplicity p (\\<Prod>(squarefree_part n)) \\<le> 1", "by simp"], ["proof (state)\nthis:\n  multiplicity p (\\<Prod>(squarefree_part n)) \\<le> 1\n\ngoal (3 subgoals):\n 1. x\\<^sup>2 dvd \\<Prod>(squarefree_part n) \\<Longrightarrow> 0 < 1\n 2. \\<And>p.\n       \\<lbrakk>x\\<^sup>2 dvd \\<Prod>(squarefree_part n); prime p\\<rbrakk>\n       \\<Longrightarrow> multiplicity p x = multiplicity p 1\n 3. x = 1 \\<Longrightarrow> x\\<^sup>2 dvd \\<Prod>(squarefree_part n)", "finally"], ["proof (chain)\npicking this:\n  2 * multiplicity p x \\<le> 1", "show \"multiplicity p x = multiplicity p 1\""], ["proof (prove)\nusing this:\n  2 * multiplicity p x \\<le> 1\n\ngoal (1 subgoal):\n 1. multiplicity p x = multiplicity p 1", "by simp"], ["proof (state)\nthis:\n  multiplicity p x = multiplicity p 1\n\ngoal (2 subgoals):\n 1. x\\<^sup>2 dvd \\<Prod>(squarefree_part n) \\<Longrightarrow> 0 < 1\n 2. x = 1 \\<Longrightarrow> x\\<^sup>2 dvd \\<Prod>(squarefree_part n)", "qed simp_all"], ["", "lemma squarefree_decomposition_unique1:\n  assumes \"squarefree_part m = squarefree_part n\"\n  assumes \"square_part m = square_part n\"\n  shows   \"m = n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. m = n", "by (subst (1 2) squarefree_decompose [symmetric]) (simp add: assms)"], ["", "lemma squarefree_decomposition_unique2:\n  assumes n: \"n > 0\"\n  assumes decomp: \"n = (\\<Prod>A2 * s2^2)\"\n  assumes prime: \"\\<And>x. x \\<in> A2 \\<Longrightarrow> prime x\"\n  assumes fin: \"finite A2\"\n  assumes s2_nonneg: \"s2 \\<ge> 0\"\n  shows \"A2 = squarefree_part n\" and \"s2 = square_part n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A2 = squarefree_part n &&& s2 = square_part n", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. A2 = squarefree_part n\n 2. s2 = square_part n", "define A1 s1 where \"A1 = squarefree_part n\" and \"s1 = square_part n\""], ["proof (state)\nthis:\n  A1 = squarefree_part n\n  s1 = square_part n\n\ngoal (2 subgoals):\n 1. A2 = squarefree_part n\n 2. s2 = square_part n", "have \"finite A1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite A1", "unfolding A1_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (squarefree_part n)", "by simp"], ["proof (state)\nthis:\n  finite A1\n\ngoal (2 subgoals):\n 1. A2 = squarefree_part n\n 2. s2 = square_part n", "note fin = \\<open>finite A1\\<close> \\<open>finite A2\\<close>"], ["proof (state)\nthis:\n  finite A1\n  finite A2\n\ngoal (2 subgoals):\n 1. A2 = squarefree_part n\n 2. s2 = square_part n", "have \"A1 \\<subseteq> prime_factors n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A1 \\<subseteq> prime_factors n", "unfolding A1_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. squarefree_part n \\<subseteq> prime_factors n", "using squarefree_part_subset"], ["proof (prove)\nusing this:\n  squarefree_part ?n \\<subseteq> prime_factors ?n\n\ngoal (1 subgoal):\n 1. squarefree_part n \\<subseteq> prime_factors n", "."], ["proof (state)\nthis:\n  A1 \\<subseteq> prime_factors n\n\ngoal (2 subgoals):\n 1. A2 = squarefree_part n\n 2. s2 = square_part n", "note subset = this prime"], ["proof (state)\nthis:\n  A1 \\<subseteq> prime_factors n\n  ?x \\<in> A2 \\<Longrightarrow> prime ?x\n\ngoal (2 subgoals):\n 1. A2 = squarefree_part n\n 2. s2 = square_part n", "have \"\\<Prod>A1 > 0\" \"\\<Prod>A2 > 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < \\<Prod>A1 &&& 0 < \\<Prod>A2", "using subset(1)  prime_gt_0_nat"], ["proof (prove)\nusing this:\n  A1 \\<subseteq> prime_factors n\n  prime ?p \\<Longrightarrow> 0 < ?p\n\ngoal (1 subgoal):\n 1. 0 < \\<Prod>A1 &&& 0 < \\<Prod>A2", "by (auto intro!: prod_pos dest: prime)"], ["proof (state)\nthis:\n  0 < \\<Prod>A1\n  0 < \\<Prod>A2\n\ngoal (2 subgoals):\n 1. A2 = squarefree_part n\n 2. s2 = square_part n", "from n"], ["proof (chain)\npicking this:\n  0 < n", "have \"s1 > 0\""], ["proof (prove)\nusing this:\n  0 < n\n\ngoal (1 subgoal):\n 1. 0 < s1", "unfolding s1_def"], ["proof (prove)\nusing this:\n  0 < n\n\ngoal (1 subgoal):\n 1. 0 < square_part n", "by simp"], ["proof (state)\nthis:\n  0 < s1\n\ngoal (2 subgoals):\n 1. A2 = squarefree_part n\n 2. s2 = square_part n", "from assms"], ["proof (chain)\npicking this:\n  0 < n\n  n = \\<Prod>A2 * s2\\<^sup>2\n  ?x \\<in> A2 \\<Longrightarrow> prime ?x\n  finite A2\n  0 \\<le> s2", "have \"s2 \\<noteq> 0\""], ["proof (prove)\nusing this:\n  0 < n\n  n = \\<Prod>A2 * s2\\<^sup>2\n  ?x \\<in> A2 \\<Longrightarrow> prime ?x\n  finite A2\n  0 \\<le> s2\n\ngoal (1 subgoal):\n 1. s2 \\<noteq> 0", "by (intro notI) simp"], ["proof (state)\nthis:\n  s2 \\<noteq> 0\n\ngoal (2 subgoals):\n 1. A2 = squarefree_part n\n 2. s2 = square_part n", "hence \"s2 > 0\""], ["proof (prove)\nusing this:\n  s2 \\<noteq> 0\n\ngoal (1 subgoal):\n 1. 0 < s2", "by simp"], ["proof (state)\nthis:\n  0 < s2\n\ngoal (2 subgoals):\n 1. A2 = squarefree_part n\n 2. s2 = square_part n", "note pos = \\<open>\\<Prod>A1 > 0\\<close> \\<open>\\<Prod>A2 > 0\\<close> \\<open>s1 > 0\\<close> \\<open>s2 > 0\\<close>"], ["proof (state)\nthis:\n  0 < \\<Prod>A1\n  0 < \\<Prod>A2\n  0 < s1\n  0 < s2\n\ngoal (2 subgoals):\n 1. A2 = squarefree_part n\n 2. s2 = square_part n", "have eq': \"multiplicity p s1 = multiplicity p s2\" \n            \"multiplicity p (\\<Prod>A1) = multiplicity p (\\<Prod>A2)\" \n    if   p: \"prime p\" for p"], ["proof (prove)\ngoal (1 subgoal):\n 1. multiplicity p s1 = multiplicity p s2 &&&\n    multiplicity p (\\<Prod>A1) = multiplicity p (\\<Prod>A2)", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. multiplicity p s1 = multiplicity p s2\n 2. multiplicity p (\\<Prod>A1) = multiplicity p (\\<Prod>A2)", "define m where \"m = multiplicity p\""], ["proof (state)\nthis:\n  m = multiplicity p\n\ngoal (2 subgoals):\n 1. multiplicity p s1 = multiplicity p s2\n 2. multiplicity p (\\<Prod>A1) = multiplicity p (\\<Prod>A2)", "from decomp"], ["proof (chain)\npicking this:\n  n = \\<Prod>A2 * s2\\<^sup>2", "have \"m (\\<Prod>A1 * s1^2) = m (\\<Prod>A2 * s2^2)\""], ["proof (prove)\nusing this:\n  n = \\<Prod>A2 * s2\\<^sup>2\n\ngoal (1 subgoal):\n 1. m (\\<Prod>A1 * s1\\<^sup>2) = m (\\<Prod>A2 * s2\\<^sup>2)", "unfolding A1_def s1_def"], ["proof (prove)\nusing this:\n  n = \\<Prod>A2 * s2\\<^sup>2\n\ngoal (1 subgoal):\n 1. m (\\<Prod>(squarefree_part n) * (square_part n)\\<^sup>2) =\n    m (\\<Prod>A2 * s2\\<^sup>2)", "by (simp add: A1_def s1_def squarefree_decompose)"], ["proof (state)\nthis:\n  m (\\<Prod>A1 * s1\\<^sup>2) = m (\\<Prod>A2 * s2\\<^sup>2)\n\ngoal (2 subgoals):\n 1. multiplicity p s1 = multiplicity p s2\n 2. multiplicity p (\\<Prod>A1) = multiplicity p (\\<Prod>A2)", "with p pos"], ["proof (chain)\npicking this:\n  prime p\n  0 < \\<Prod>A1\n  0 < \\<Prod>A2\n  0 < s1\n  0 < s2\n  m (\\<Prod>A1 * s1\\<^sup>2) = m (\\<Prod>A2 * s2\\<^sup>2)", "have eq: \"m (\\<Prod>A1) + 2 * m s1 = m (\\<Prod>A2) + 2 * m s2\""], ["proof (prove)\nusing this:\n  prime p\n  0 < \\<Prod>A1\n  0 < \\<Prod>A2\n  0 < s1\n  0 < s2\n  m (\\<Prod>A1 * s1\\<^sup>2) = m (\\<Prod>A2 * s2\\<^sup>2)\n\ngoal (1 subgoal):\n 1. m (\\<Prod>A1) + 2 * m s1 = m (\\<Prod>A2) + 2 * m s2", "by (simp add: m_def prime_elem_multiplicity_mult_distrib multiplicity_power_nat)"], ["proof (state)\nthis:\n  m (\\<Prod>A1) + 2 * m s1 = m (\\<Prod>A2) + 2 * m s2\n\ngoal (2 subgoals):\n 1. multiplicity p s1 = multiplicity p s2\n 2. multiplicity p (\\<Prod>A1) = multiplicity p (\\<Prod>A2)", "moreover"], ["proof (state)\nthis:\n  m (\\<Prod>A1) + 2 * m s1 = m (\\<Prod>A2) + 2 * m s2\n\ngoal (2 subgoals):\n 1. multiplicity p s1 = multiplicity p s2\n 2. multiplicity p (\\<Prod>A1) = multiplicity p (\\<Prod>A2)", "from fin subset p"], ["proof (chain)\npicking this:\n  finite A1\n  finite A2\n  A1 \\<subseteq> prime_factors n\n  ?x \\<in> A2 \\<Longrightarrow> prime ?x\n  prime p", "have \"m (\\<Prod>A1) \\<le> 1\" \"m (\\<Prod>A2) \\<le> 1\""], ["proof (prove)\nusing this:\n  finite A1\n  finite A2\n  A1 \\<subseteq> prime_factors n\n  ?x \\<in> A2 \\<Longrightarrow> prime ?x\n  prime p\n\ngoal (1 subgoal):\n 1. m (\\<Prod>A1) \\<le> 1 &&& m (\\<Prod>A2) \\<le> 1", "unfolding m_def"], ["proof (prove)\nusing this:\n  finite A1\n  finite A2\n  A1 \\<subseteq> prime_factors n\n  ?x \\<in> A2 \\<Longrightarrow> prime ?x\n  prime p\n\ngoal (1 subgoal):\n 1. multiplicity p (\\<Prod>A1) \\<le> 1 &&&\n    multiplicity p (\\<Prod>A2) \\<le> 1", "by ((subst multiplicity_prod_prime_powers_nat', auto)[])+"], ["proof (state)\nthis:\n  m (\\<Prod>A1) \\<le> 1\n  m (\\<Prod>A2) \\<le> 1\n\ngoal (2 subgoals):\n 1. multiplicity p s1 = multiplicity p s2\n 2. multiplicity p (\\<Prod>A1) = multiplicity p (\\<Prod>A2)", "ultimately"], ["proof (chain)\npicking this:\n  m (\\<Prod>A1) + 2 * m s1 = m (\\<Prod>A2) + 2 * m s2\n  m (\\<Prod>A1) \\<le> 1\n  m (\\<Prod>A2) \\<le> 1", "show \"m s1 = m s2\""], ["proof (prove)\nusing this:\n  m (\\<Prod>A1) + 2 * m s1 = m (\\<Prod>A2) + 2 * m s2\n  m (\\<Prod>A1) \\<le> 1\n  m (\\<Prod>A2) \\<le> 1\n\ngoal (1 subgoal):\n 1. m s1 = m s2", "by linarith"], ["proof (state)\nthis:\n  m s1 = m s2\n\ngoal (1 subgoal):\n 1. multiplicity p (\\<Prod>A1) = multiplicity p (\\<Prod>A2)", "with eq"], ["proof (chain)\npicking this:\n  m (\\<Prod>A1) + 2 * m s1 = m (\\<Prod>A2) + 2 * m s2\n  m s1 = m s2", "show \"m (\\<Prod>A1) = m (\\<Prod>A2)\""], ["proof (prove)\nusing this:\n  m (\\<Prod>A1) + 2 * m s1 = m (\\<Prod>A2) + 2 * m s2\n  m s1 = m s2\n\ngoal (1 subgoal):\n 1. m (\\<Prod>A1) = m (\\<Prod>A2)", "by simp"], ["proof (state)\nthis:\n  m (\\<Prod>A1) = m (\\<Prod>A2)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  prime ?p \\<Longrightarrow> multiplicity ?p s1 = multiplicity ?p s2\n  prime ?p \\<Longrightarrow>\n  multiplicity ?p (\\<Prod>A1) = multiplicity ?p (\\<Prod>A2)\n\ngoal (2 subgoals):\n 1. A2 = squarefree_part n\n 2. s2 = square_part n", "show \"s2 = square_part n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s2 = square_part n", "by (rule multiplicity_eq_nat) (insert pos eq'(1), auto simp: s1_def)"], ["proof (state)\nthis:\n  s2 = square_part n\n\ngoal (1 subgoal):\n 1. A2 = squarefree_part n", "have \"\\<Prod>A2 = \\<Prod>(squarefree_part n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Prod>A2 = \\<Prod>(squarefree_part n)", "by (rule multiplicity_eq_nat) (insert pos eq'(2), auto simp: A1_def)"], ["proof (state)\nthis:\n  \\<Prod>A2 = \\<Prod>(squarefree_part n)\n\ngoal (1 subgoal):\n 1. A2 = squarefree_part n", "with fin subset"], ["proof (chain)\npicking this:\n  finite A1\n  finite A2\n  A1 \\<subseteq> prime_factors n\n  ?x \\<in> A2 \\<Longrightarrow> prime ?x\n  \\<Prod>A2 = \\<Prod>(squarefree_part n)", "show \"A2 = squarefree_part n\""], ["proof (prove)\nusing this:\n  finite A1\n  finite A2\n  A1 \\<subseteq> prime_factors n\n  ?x \\<in> A2 \\<Longrightarrow> prime ?x\n  \\<Prod>A2 = \\<Prod>(squarefree_part n)\n\ngoal (1 subgoal):\n 1. A2 = squarefree_part n", "unfolding A1_def"], ["proof (prove)\nusing this:\n  finite (squarefree_part n)\n  finite A2\n  squarefree_part n \\<subseteq> prime_factors n\n  ?x \\<in> A2 \\<Longrightarrow> prime ?x\n  \\<Prod>A2 = \\<Prod>(squarefree_part n)\n\ngoal (1 subgoal):\n 1. A2 = squarefree_part n", "by (intro prod_prime_eq) auto"], ["proof (state)\nthis:\n  A2 = squarefree_part n\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma squarefree_decomposition_unique2':\n  assumes decomp: \"(\\<Prod>A1 * s1^2) = (\\<Prod>A2 * s2^2 :: nat)\"\n  assumes fin: \"finite A1\" \"finite A2\"\n  assumes subset: \"\\<And>x. x \\<in> A1 \\<Longrightarrow> prime x\" \"\\<And>x. x \\<in> A2 \\<Longrightarrow> prime x\"\n  assumes pos: \"s1 > 0\" \"s2 > 0\"\n  defines \"n \\<equiv> \\<Prod>A1 * s1^2\"\n  shows \"A1 = A2\" \"s1 = s2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A1 = A2 &&& s1 = s2", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. A1 = A2\n 2. s1 = s2", "from pos"], ["proof (chain)\npicking this:\n  0 < s1\n  0 < s2", "have n: \"n > 0\""], ["proof (prove)\nusing this:\n  0 < s1\n  0 < s2\n\ngoal (1 subgoal):\n 1. 0 < n", "using prime_gt_0_nat"], ["proof (prove)\nusing this:\n  0 < s1\n  0 < s2\n  prime ?p \\<Longrightarrow> 0 < ?p\n\ngoal (1 subgoal):\n 1. 0 < n", "by (auto simp: n_def intro!: prod_pos dest: subset)"], ["proof (state)\nthis:\n  0 < n\n\ngoal (2 subgoals):\n 1. A1 = A2\n 2. s1 = s2", "have \"A1 = squarefree_part n\" \"s1 = square_part n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A1 = squarefree_part n &&& s1 = square_part n", "by ((rule squarefree_decomposition_unique2[of n A1 s1], insert assms n, simp_all)[])+"], ["proof (state)\nthis:\n  A1 = squarefree_part n\n  s1 = square_part n\n\ngoal (2 subgoals):\n 1. A1 = A2\n 2. s1 = s2", "moreover"], ["proof (state)\nthis:\n  A1 = squarefree_part n\n  s1 = square_part n\n\ngoal (2 subgoals):\n 1. A1 = A2\n 2. s1 = s2", "have \"A2 = squarefree_part n\" \"s2 = square_part n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A2 = squarefree_part n &&& s2 = square_part n", "by ((rule squarefree_decomposition_unique2[of n A2 s2], insert assms n, simp_all)[])+"], ["proof (state)\nthis:\n  A2 = squarefree_part n\n  s2 = square_part n\n\ngoal (2 subgoals):\n 1. A1 = A2\n 2. s1 = s2", "ultimately"], ["proof (chain)\npicking this:\n  A1 = squarefree_part n\n  s1 = square_part n\n  A2 = squarefree_part n\n  s2 = square_part n", "show \"A1 = A2\" \"s1 = s2\""], ["proof (prove)\nusing this:\n  A1 = squarefree_part n\n  s1 = square_part n\n  A2 = squarefree_part n\n  s2 = square_part n\n\ngoal (1 subgoal):\n 1. A1 = A2 &&& s1 = s2", "by simp_all"], ["proof (state)\nthis:\n  A1 = A2\n  s1 = s2\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>\n  The following is a nice and simple lower bound on the number of prime numbers less than \n  a given number due to Erd\\H{o}s. In particular, it implies that there are infinitely many primes.\n\\<close>"], ["", "lemma primes_lower_bound:\n  fixes n :: nat\n  assumes \"n > 0\"\n  defines \"\\<pi> \\<equiv> \\<lambda>n. card {p. prime p \\<and> p \\<le> n}\"\n  shows   \"real (\\<pi> n) \\<ge> ln (real n) / ln 4\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ln (real n) / ln 4 \\<le> real (\\<pi> n)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. ln (real n) / ln 4 \\<le> real (\\<pi> n)", "have \"real n = real (card {1..n})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. real n = real (card {1..n})", "by simp"], ["proof (state)\nthis:\n  real n = real (card {1..n})\n\ngoal (1 subgoal):\n 1. ln (real n) / ln 4 \\<le> real (\\<pi> n)", "also"], ["proof (state)\nthis:\n  real n = real (card {1..n})\n\ngoal (1 subgoal):\n 1. ln (real n) / ln 4 \\<le> real (\\<pi> n)", "have \"{1..n} = (\\<lambda>(A, b). \\<Prod>A * b^2) ` (\\<lambda>n. (squarefree_part n, square_part n)) ` {1..n}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {1..n} =\n    (\\<lambda>(A, b). \\<Prod>A * b\\<^sup>2) `\n    (\\<lambda>n. (squarefree_part n, square_part n)) ` {1..n}", "unfolding image_comp o_def squarefree_decompose case_prod_unfold fst_conv snd_conv"], ["proof (prove)\ngoal (1 subgoal):\n 1. {1..n} = (\\<lambda>x. x) ` {1..n}", "by simp"], ["proof (state)\nthis:\n  {1..n} =\n  (\\<lambda>(A, b). \\<Prod>A * b\\<^sup>2) `\n  (\\<lambda>n. (squarefree_part n, square_part n)) ` {1..n}\n\ngoal (1 subgoal):\n 1. ln (real n) / ln 4 \\<le> real (\\<pi> n)", "also"], ["proof (state)\nthis:\n  {1..n} =\n  (\\<lambda>(A, b). \\<Prod>A * b\\<^sup>2) `\n  (\\<lambda>n. (squarefree_part n, square_part n)) ` {1..n}\n\ngoal (1 subgoal):\n 1. ln (real n) / ln 4 \\<le> real (\\<pi> n)", "have \"card \\<dots> \\<le> card ((\\<lambda>n. (squarefree_part n, square_part n)) ` {1..n})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card\n     ((\\<lambda>(A, b). \\<Prod>A * b\\<^sup>2) `\n      (\\<lambda>n. (squarefree_part n, square_part n)) ` {1..n})\n    \\<le> card ((\\<lambda>n. (squarefree_part n, square_part n)) ` {1..n})", "by (rule card_image_le) simp_all"], ["proof (state)\nthis:\n  card\n   ((\\<lambda>(A, b). \\<Prod>A * b\\<^sup>2) `\n    (\\<lambda>n. (squarefree_part n, square_part n)) ` {1..n})\n  \\<le> card ((\\<lambda>n. (squarefree_part n, square_part n)) ` {1..n})\n\ngoal (1 subgoal):\n 1. ln (real n) / ln 4 \\<le> real (\\<pi> n)", "also"], ["proof (state)\nthis:\n  card\n   ((\\<lambda>(A, b). \\<Prod>A * b\\<^sup>2) `\n    (\\<lambda>n. (squarefree_part n, square_part n)) ` {1..n})\n  \\<le> card ((\\<lambda>n. (squarefree_part n, square_part n)) ` {1..n})\n\ngoal (1 subgoal):\n 1. ln (real n) / ln 4 \\<le> real (\\<pi> n)", "have \"\\<dots> \\<le> card (squarefree_part ` {1..n} \\<times> square_part ` {1..n})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card ((\\<lambda>n. (squarefree_part n, square_part n)) ` {1..n})\n    \\<le> card (squarefree_part ` {1..n} \\<times> square_part ` {1..n})", "by (rule card_mono) auto"], ["proof (state)\nthis:\n  card ((\\<lambda>n. (squarefree_part n, square_part n)) ` {1..n})\n  \\<le> card (squarefree_part ` {1..n} \\<times> square_part ` {1..n})\n\ngoal (1 subgoal):\n 1. ln (real n) / ln 4 \\<le> real (\\<pi> n)", "also"], ["proof (state)\nthis:\n  card ((\\<lambda>n. (squarefree_part n, square_part n)) ` {1..n})\n  \\<le> card (squarefree_part ` {1..n} \\<times> square_part ` {1..n})\n\ngoal (1 subgoal):\n 1. ln (real n) / ln 4 \\<le> real (\\<pi> n)", "have \"real \\<dots> = real (card (squarefree_part ` {1..n})) * real (card (square_part ` {1..n}))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. real (card (squarefree_part ` {1..n} \\<times> square_part ` {1..n})) =\n    real (card (squarefree_part ` {1..n})) *\n    real (card (square_part ` {1..n}))", "by simp"], ["proof (state)\nthis:\n  real (card (squarefree_part ` {1..n} \\<times> square_part ` {1..n})) =\n  real (card (squarefree_part ` {1..n})) *\n  real (card (square_part ` {1..n}))\n\ngoal (1 subgoal):\n 1. ln (real n) / ln 4 \\<le> real (\\<pi> n)", "also"], ["proof (state)\nthis:\n  real (card (squarefree_part ` {1..n} \\<times> square_part ` {1..n})) =\n  real (card (squarefree_part ` {1..n})) *\n  real (card (square_part ` {1..n}))\n\ngoal (1 subgoal):\n 1. ln (real n) / ln 4 \\<le> real (\\<pi> n)", "have \"\\<dots> \\<le> 2 ^ \\<pi> n * sqrt (real n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. real (card (squarefree_part ` {1..n})) *\n    real (card (square_part ` {1..n}))\n    \\<le> 2 ^ \\<pi> n * sqrt (real n)", "proof (rule mult_mono)"], ["proof (state)\ngoal (4 subgoals):\n 1. real (card (squarefree_part ` {1..n})) \\<le> 2 ^ \\<pi> n\n 2. real (card (square_part ` {1..n})) \\<le> sqrt (real n)\n 3. 0 \\<le> 2 ^ \\<pi> n\n 4. 0 \\<le> real (card (square_part ` {1..n}))", "have \"card (squarefree_part ` {1..n}) \\<le> card (Pow {p. prime p \\<and> p \\<le> n})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card (squarefree_part ` {1..n})\n    \\<le> card (Pow {p. prime p \\<and> p \\<le> n})", "using squarefree_part_subset squarefree_part_le"], ["proof (prove)\nusing this:\n  squarefree_part ?n \\<subseteq> prime_factors ?n\n  ?p \\<in> squarefree_part ?n \\<Longrightarrow> ?p \\<le> ?n\n\ngoal (1 subgoal):\n 1. card (squarefree_part ` {1..n})\n    \\<le> card (Pow {p. prime p \\<and> p \\<le> n})", "by (intro card_mono) force+"], ["proof (state)\nthis:\n  card (squarefree_part ` {1..n})\n  \\<le> card (Pow {p. prime p \\<and> p \\<le> n})\n\ngoal (4 subgoals):\n 1. real (card (squarefree_part ` {1..n})) \\<le> 2 ^ \\<pi> n\n 2. real (card (square_part ` {1..n})) \\<le> sqrt (real n)\n 3. 0 \\<le> 2 ^ \\<pi> n\n 4. 0 \\<le> real (card (square_part ` {1..n}))", "also"], ["proof (state)\nthis:\n  card (squarefree_part ` {1..n})\n  \\<le> card (Pow {p. prime p \\<and> p \\<le> n})\n\ngoal (4 subgoals):\n 1. real (card (squarefree_part ` {1..n})) \\<le> 2 ^ \\<pi> n\n 2. real (card (square_part ` {1..n})) \\<le> sqrt (real n)\n 3. 0 \\<le> 2 ^ \\<pi> n\n 4. 0 \\<le> real (card (square_part ` {1..n}))", "have \"real \\<dots> = 2 ^ \\<pi> n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. real (card (Pow {p. prime p \\<and> p \\<le> n})) = 2 ^ \\<pi> n", "by (simp add: \\<pi>_def card_Pow)"], ["proof (state)\nthis:\n  real (card (Pow {p. prime p \\<and> p \\<le> n})) = 2 ^ \\<pi> n\n\ngoal (4 subgoals):\n 1. real (card (squarefree_part ` {1..n})) \\<le> 2 ^ \\<pi> n\n 2. real (card (square_part ` {1..n})) \\<le> sqrt (real n)\n 3. 0 \\<le> 2 ^ \\<pi> n\n 4. 0 \\<le> real (card (square_part ` {1..n}))", "finally"], ["proof (chain)\npicking this:\n  (\\<And>x y.\n      x \\<le> y \\<Longrightarrow> real x \\<le> real y) \\<Longrightarrow>\n  real (card (squarefree_part ` {1..n})) \\<le> 2 ^ \\<pi> n", "show \"real (card (squarefree_part ` {1..n})) \\<le> 2 ^ \\<pi> n\""], ["proof (prove)\nusing this:\n  (\\<And>x y.\n      x \\<le> y \\<Longrightarrow> real x \\<le> real y) \\<Longrightarrow>\n  real (card (squarefree_part ` {1..n})) \\<le> 2 ^ \\<pi> n\n\ngoal (1 subgoal):\n 1. real (card (squarefree_part ` {1..n})) \\<le> 2 ^ \\<pi> n", "by - simp_all"], ["proof (state)\nthis:\n  real (card (squarefree_part ` {1..n})) \\<le> 2 ^ \\<pi> n\n\ngoal (3 subgoals):\n 1. real (card (square_part ` {1..n})) \\<le> sqrt (real n)\n 2. 0 \\<le> 2 ^ \\<pi> n\n 3. 0 \\<le> real (card (square_part ` {1..n}))", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. real (card (square_part ` {1..n})) \\<le> sqrt (real n)\n 2. 0 \\<le> 2 ^ \\<pi> n\n 3. 0 \\<le> real (card (square_part ` {1..n}))", "have \"square_part k \\<le> nat \\<lfloor>sqrt n\\<rfloor>\" if \"k \\<le> n\" for k"], ["proof (prove)\ngoal (1 subgoal):\n 1. square_part k \\<le> nat \\<lfloor>sqrt (real n)\\<rfloor>", "by (rule order.trans[OF square_part_le_sqrt])\n         (insert that, auto intro!: nat_mono floor_mono)"], ["proof (state)\nthis:\n  ?k \\<le> n \\<Longrightarrow>\n  square_part ?k \\<le> nat \\<lfloor>sqrt (real n)\\<rfloor>\n\ngoal (3 subgoals):\n 1. real (card (square_part ` {1..n})) \\<le> sqrt (real n)\n 2. 0 \\<le> 2 ^ \\<pi> n\n 3. 0 \\<le> real (card (square_part ` {1..n}))", "hence \"card (square_part ` {1..n}) \\<le> card {1..nat \\<lfloor>sqrt n\\<rfloor>}\""], ["proof (prove)\nusing this:\n  ?k \\<le> n \\<Longrightarrow>\n  square_part ?k \\<le> nat \\<lfloor>sqrt (real n)\\<rfloor>\n\ngoal (1 subgoal):\n 1. card (square_part ` {1..n})\n    \\<le> card {1..nat \\<lfloor>sqrt (real n)\\<rfloor>}", "by (intro card_mono) (auto intro: order.trans[OF square_part_le_sqrt])"], ["proof (state)\nthis:\n  card (square_part ` {1..n})\n  \\<le> card {1..nat \\<lfloor>sqrt (real n)\\<rfloor>}\n\ngoal (3 subgoals):\n 1. real (card (square_part ` {1..n})) \\<le> sqrt (real n)\n 2. 0 \\<le> 2 ^ \\<pi> n\n 3. 0 \\<le> real (card (square_part ` {1..n}))", "also"], ["proof (state)\nthis:\n  card (square_part ` {1..n})\n  \\<le> card {1..nat \\<lfloor>sqrt (real n)\\<rfloor>}\n\ngoal (3 subgoals):\n 1. real (card (square_part ` {1..n})) \\<le> sqrt (real n)\n 2. 0 \\<le> 2 ^ \\<pi> n\n 3. 0 \\<le> real (card (square_part ` {1..n}))", "have \"\\<dots> = nat \\<lfloor>sqrt n\\<rfloor>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card {1..nat \\<lfloor>sqrt (real n)\\<rfloor>} =\n    nat \\<lfloor>sqrt (real n)\\<rfloor>", "by simp"], ["proof (state)\nthis:\n  card {1..nat \\<lfloor>sqrt (real n)\\<rfloor>} =\n  nat \\<lfloor>sqrt (real n)\\<rfloor>\n\ngoal (3 subgoals):\n 1. real (card (square_part ` {1..n})) \\<le> sqrt (real n)\n 2. 0 \\<le> 2 ^ \\<pi> n\n 3. 0 \\<le> real (card (square_part ` {1..n}))", "also"], ["proof (state)\nthis:\n  card {1..nat \\<lfloor>sqrt (real n)\\<rfloor>} =\n  nat \\<lfloor>sqrt (real n)\\<rfloor>\n\ngoal (3 subgoals):\n 1. real (card (square_part ` {1..n})) \\<le> sqrt (real n)\n 2. 0 \\<le> 2 ^ \\<pi> n\n 3. 0 \\<le> real (card (square_part ` {1..n}))", "have \"real \\<dots> \\<le> sqrt n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. real (nat \\<lfloor>sqrt (real n)\\<rfloor>) \\<le> sqrt (real n)", "by simp"], ["proof (state)\nthis:\n  real (nat \\<lfloor>sqrt (real n)\\<rfloor>) \\<le> sqrt (real n)\n\ngoal (3 subgoals):\n 1. real (card (square_part ` {1..n})) \\<le> sqrt (real n)\n 2. 0 \\<le> 2 ^ \\<pi> n\n 3. 0 \\<le> real (card (square_part ` {1..n}))", "finally"], ["proof (chain)\npicking this:\n  (\\<And>x y.\n      x \\<le> y \\<Longrightarrow> real x \\<le> real y) \\<Longrightarrow>\n  real (card (square_part ` {1..n})) \\<le> sqrt (real n)", "show \"real (card (square_part ` {1..n})) \\<le> sqrt (real n)\""], ["proof (prove)\nusing this:\n  (\\<And>x y.\n      x \\<le> y \\<Longrightarrow> real x \\<le> real y) \\<Longrightarrow>\n  real (card (square_part ` {1..n})) \\<le> sqrt (real n)\n\ngoal (1 subgoal):\n 1. real (card (square_part ` {1..n})) \\<le> sqrt (real n)", "by - simp_all"], ["proof (state)\nthis:\n  real (card (square_part ` {1..n})) \\<le> sqrt (real n)\n\ngoal (2 subgoals):\n 1. 0 \\<le> 2 ^ \\<pi> n\n 2. 0 \\<le> real (card (square_part ` {1..n}))", "qed simp_all"], ["proof (state)\nthis:\n  real (card (squarefree_part ` {1..n})) *\n  real (card (square_part ` {1..n}))\n  \\<le> 2 ^ \\<pi> n * sqrt (real n)\n\ngoal (1 subgoal):\n 1. ln (real n) / ln 4 \\<le> real (\\<pi> n)", "finally"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<And>x y. x \\<le> y \\<Longrightarrow> real x \\<le> real y;\n   \\<And>x y. x \\<le> y \\<Longrightarrow> real x \\<le> real y\\<rbrakk>\n  \\<Longrightarrow> real n \\<le> 2 ^ \\<pi> n * sqrt (real n)", "have \"real n \\<le> 2 ^ \\<pi> n * sqrt (real n)\""], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>x y. x \\<le> y \\<Longrightarrow> real x \\<le> real y;\n   \\<And>x y. x \\<le> y \\<Longrightarrow> real x \\<le> real y\\<rbrakk>\n  \\<Longrightarrow> real n \\<le> 2 ^ \\<pi> n * sqrt (real n)\n\ngoal (1 subgoal):\n 1. real n \\<le> 2 ^ \\<pi> n * sqrt (real n)", "by - simp_all"], ["proof (state)\nthis:\n  real n \\<le> 2 ^ \\<pi> n * sqrt (real n)\n\ngoal (1 subgoal):\n 1. ln (real n) / ln 4 \\<le> real (\\<pi> n)", "with \\<open>n > 0\\<close>"], ["proof (chain)\npicking this:\n  0 < n\n  real n \\<le> 2 ^ \\<pi> n * sqrt (real n)", "have \"ln (real n) \\<le> ln (2 ^ \\<pi> n * sqrt (real n))\""], ["proof (prove)\nusing this:\n  0 < n\n  real n \\<le> 2 ^ \\<pi> n * sqrt (real n)\n\ngoal (1 subgoal):\n 1. ln (real n) \\<le> ln (2 ^ \\<pi> n * sqrt (real n))", "by (subst ln_le_cancel_iff) simp_all"], ["proof (state)\nthis:\n  ln (real n) \\<le> ln (2 ^ \\<pi> n * sqrt (real n))\n\ngoal (1 subgoal):\n 1. ln (real n) / ln 4 \\<le> real (\\<pi> n)", "moreover"], ["proof (state)\nthis:\n  ln (real n) \\<le> ln (2 ^ \\<pi> n * sqrt (real n))\n\ngoal (1 subgoal):\n 1. ln (real n) / ln 4 \\<le> real (\\<pi> n)", "have \"ln (4 :: real) = real 2 * ln 2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ln 4 = real 2 * ln 2", "by (subst ln_realpow [symmetric]) simp_all"], ["proof (state)\nthis:\n  ln 4 = real 2 * ln 2\n\ngoal (1 subgoal):\n 1. ln (real n) / ln 4 \\<le> real (\\<pi> n)", "ultimately"], ["proof (chain)\npicking this:\n  ln (real n) \\<le> ln (2 ^ \\<pi> n * sqrt (real n))\n  ln 4 = real 2 * ln 2", "show ?thesis"], ["proof (prove)\nusing this:\n  ln (real n) \\<le> ln (2 ^ \\<pi> n * sqrt (real n))\n  ln 4 = real 2 * ln 2\n\ngoal (1 subgoal):\n 1. ln (real n) / ln 4 \\<le> real (\\<pi> n)", "using \\<open>n > 0\\<close>"], ["proof (prove)\nusing this:\n  ln (real n) \\<le> ln (2 ^ \\<pi> n * sqrt (real n))\n  ln 4 = real 2 * ln 2\n  0 < n\n\ngoal (1 subgoal):\n 1. ln (real n) / ln 4 \\<le> real (\\<pi> n)", "by (simp add: ln_mult ln_realpow[of _ \"\\<pi> n\"] ln_sqrt field_simps)"], ["proof (state)\nthis:\n  ln (real n) / ln 4 \\<le> real (\\<pi> n)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}