{"file_name": "/home/qj213/afp-2021-10-22/thys/Groebner_Macaulay/Monomial_Module.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Groebner_Macaulay", "problem_names": ["lemma is_monomial_setI: \"(\\<And>p. p \\<in> A \\<Longrightarrow> is_monomial p) \\<Longrightarrow> is_monomial_set A\"", "lemma is_monomial_setD: \"is_monomial_set A \\<Longrightarrow> p \\<in> A \\<Longrightarrow> is_monomial p\"", "lemma is_monomial_set_subset: \"is_monomial_set B \\<Longrightarrow> A \\<subseteq> B \\<Longrightarrow> is_monomial_set A\"", "lemma is_monomial_set_Un: \"is_monomial_set (A \\<union> B) \\<longleftrightarrow> (is_monomial_set A \\<and> is_monomial_set B)\"", "lemma monomial_pmdl:\n  assumes \"is_monomial_set B\" and \"p \\<in> pmdl B\"\n  shows \"monomial (lookup p v) v \\<in> pmdl B\"", "lemma monomial_pmdl_field:\n  assumes \"is_monomial_set B\" and \"p \\<in> pmdl B\" and \"v \\<in> keys (p::_ \\<Rightarrow>\\<^sub>0 'b::field)\"\n  shows \"monomial c v \\<in> pmdl B\"", "lemma keys_monomial_pmdl:\n  assumes \"is_monomial_set F\" and \"p \\<in> pmdl F\" and \"t \\<in> keys p\"\n  obtains f where \"f \\<in> F\" and \"f \\<noteq> 0\" and \"lt f adds\\<^sub>t t\"", "lemma image_lt_monomial_lt: \"lt ` monomial (1::'b::zero_neq_one) ` lt ` F = lt ` F\"", "lemma red_setE2:\n  assumes \"red B p q\"\n  obtains b where \"b \\<in> B\" and \"b \\<noteq> 0\" and \"red {b} p q\"", "lemma red_monomial_keys:\n  assumes \"is_monomial r\" and \"red {r} p q\"\n  shows \"card (keys p) = Suc (card (keys q))\"", "lemma red_monomial_monomial_setD:\n  assumes \"is_monomial p\" and \"is_monomial_set B\" and \"red B p q\"\n  shows \"q = 0\"", "lemma is_red_monomial_lt:\n  assumes \"0 \\<notin> B\"\n  shows \"is_red (monomial (1::'b::field) ` lt ` B) = is_red B\"", "lemma monomial_set_is_GB:\n  assumes \"is_monomial_set G\"\n  shows \"is_Groebner_basis G\"", "lemma reduced_GB_subset_monic_dgrad_p_set: \"reduced_GB F \\<subseteq> monic ` F\"", "lemma is_red_reduced_GB_monomial_dgrad_set:\n  assumes \"finite (component_of_term ` S)\" and \"pp_of_term ` S \\<subseteq> dgrad_set d m\"\n  shows \"is_red (reduced_GB (monomial 1 ` S)) = is_red (monomial (1::'b::field) ` S)\"", "lemma reduced_GB_monomial_lt_reduced_GB_dgrad_p_set:\n  assumes \"finite (component_of_term ` Keys F)\" and \"F \\<subseteq> dgrad_p_set d m\"\n  shows \"reduced_GB (monomial 1 ` lt ` reduced_GB F) = monomial (1::'b::field) ` lt ` reduced_GB F\""], "translations": [["", "lemma is_monomial_setI: \"(\\<And>p. p \\<in> A \\<Longrightarrow> is_monomial p) \\<Longrightarrow> is_monomial_set A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>p. p \\<in> A \\<Longrightarrow> is_monomial p) \\<Longrightarrow>\n    is_monomial_set A", "by (simp add: is_monomial_set_def)"], ["", "lemma is_monomial_setD: \"is_monomial_set A \\<Longrightarrow> p \\<in> A \\<Longrightarrow> is_monomial p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_monomial_set A; p \\<in> A\\<rbrakk>\n    \\<Longrightarrow> is_monomial p", "by (simp add: is_monomial_set_def)"], ["", "lemma is_monomial_set_subset: \"is_monomial_set B \\<Longrightarrow> A \\<subseteq> B \\<Longrightarrow> is_monomial_set A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_monomial_set B; A \\<subseteq> B\\<rbrakk>\n    \\<Longrightarrow> is_monomial_set A", "by (auto simp: is_monomial_set_def)"], ["", "lemma is_monomial_set_Un: \"is_monomial_set (A \\<union> B) \\<longleftrightarrow> (is_monomial_set A \\<and> is_monomial_set B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_monomial_set (A \\<union> B) =\n    (is_monomial_set A \\<and> is_monomial_set B)", "by (auto simp: is_monomial_set_def)"], ["", "subsection \\<open>Modules\\<close>"], ["", "context term_powerprod\nbegin"], ["", "lemma monomial_pmdl:\n  assumes \"is_monomial_set B\" and \"p \\<in> pmdl B\"\n  shows \"monomial (lookup p v) v \\<in> pmdl B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. monomial (lookup p v) v \\<in> pmdl B", "using assms(2)"], ["proof (prove)\nusing this:\n  p \\<in> pmdl B\n\ngoal (1 subgoal):\n 1. monomial (lookup p v) v \\<in> pmdl B", "proof (induct p rule: pmdl_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. monomial (lookup 0 v) v \\<in> pmdl B\n 2. \\<And>a p c t.\n       \\<lbrakk>a \\<in> pmdl B; monomial (lookup a v) v \\<in> pmdl B;\n        p \\<in> B; c \\<noteq> (0::'b)\\<rbrakk>\n       \\<Longrightarrow> monomial (lookup (a + monom_mult c t p) v) v\n                         \\<in> pmdl B", "case base: module_0"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. monomial (lookup 0 v) v \\<in> pmdl B\n 2. \\<And>a p c t.\n       \\<lbrakk>a \\<in> pmdl B; monomial (lookup a v) v \\<in> pmdl B;\n        p \\<in> B; c \\<noteq> (0::'b)\\<rbrakk>\n       \\<Longrightarrow> monomial (lookup (a + monom_mult c t p) v) v\n                         \\<in> pmdl B", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. monomial (lookup 0 v) v \\<in> pmdl B", "by (simp add: pmdl.span_zero)"], ["proof (state)\nthis:\n  monomial (lookup 0 v) v \\<in> pmdl B\n\ngoal (1 subgoal):\n 1. \\<And>a p c t.\n       \\<lbrakk>a \\<in> pmdl B; monomial (lookup a v) v \\<in> pmdl B;\n        p \\<in> B; c \\<noteq> (0::'b)\\<rbrakk>\n       \\<Longrightarrow> monomial (lookup (a + monom_mult c t p) v) v\n                         \\<in> pmdl B", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a p c t.\n       \\<lbrakk>a \\<in> pmdl B; monomial (lookup a v) v \\<in> pmdl B;\n        p \\<in> B; c \\<noteq> (0::'b)\\<rbrakk>\n       \\<Longrightarrow> monomial (lookup (a + monom_mult c t p) v) v\n                         \\<in> pmdl B", "case step: (module_plus p b c t)"], ["proof (state)\nthis:\n  p \\<in> pmdl B\n  monomial (lookup p v) v \\<in> pmdl B\n  b \\<in> B\n  c \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. \\<And>a p c t.\n       \\<lbrakk>a \\<in> pmdl B; monomial (lookup a v) v \\<in> pmdl B;\n        p \\<in> B; c \\<noteq> (0::'b)\\<rbrakk>\n       \\<Longrightarrow> monomial (lookup (a + monom_mult c t p) v) v\n                         \\<in> pmdl B", "have eq: \"monomial (lookup (p + monom_mult c t b) v) v =\n            monomial (lookup p v) v + monomial (lookup (monom_mult c t b) v) v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. monomial (lookup (p + monom_mult c t b) v) v =\n    monomial (lookup p v) v + monomial (lookup (monom_mult c t b) v) v", "by (simp only: single_add lookup_add)"], ["proof (state)\nthis:\n  monomial (lookup (p + monom_mult c t b) v) v =\n  monomial (lookup p v) v + monomial (lookup (monom_mult c t b) v) v\n\ngoal (1 subgoal):\n 1. \\<And>a p c t.\n       \\<lbrakk>a \\<in> pmdl B; monomial (lookup a v) v \\<in> pmdl B;\n        p \\<in> B; c \\<noteq> (0::'b)\\<rbrakk>\n       \\<Longrightarrow> monomial (lookup (a + monom_mult c t p) v) v\n                         \\<in> pmdl B", "from assms(1) step.hyps(3)"], ["proof (chain)\npicking this:\n  is_monomial_set B\n  b \\<in> B", "have \"is_monomial b\""], ["proof (prove)\nusing this:\n  is_monomial_set B\n  b \\<in> B\n\ngoal (1 subgoal):\n 1. is_monomial b", "by (rule is_monomial_setD)"], ["proof (state)\nthis:\n  is_monomial b\n\ngoal (1 subgoal):\n 1. \\<And>a p c t.\n       \\<lbrakk>a \\<in> pmdl B; monomial (lookup a v) v \\<in> pmdl B;\n        p \\<in> B; c \\<noteq> (0::'b)\\<rbrakk>\n       \\<Longrightarrow> monomial (lookup (a + monom_mult c t p) v) v\n                         \\<in> pmdl B", "then"], ["proof (chain)\npicking this:\n  is_monomial b", "obtain d u where b: \"b = monomial d u\""], ["proof (prove)\nusing this:\n  is_monomial b\n\ngoal (1 subgoal):\n 1. (\\<And>u d. b = monomial d u \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule is_monomial_monomial)"], ["proof (state)\nthis:\n  b = monomial d u\n\ngoal (1 subgoal):\n 1. \\<And>a p c t.\n       \\<lbrakk>a \\<in> pmdl B; monomial (lookup a v) v \\<in> pmdl B;\n        p \\<in> B; c \\<noteq> (0::'b)\\<rbrakk>\n       \\<Longrightarrow> monomial (lookup (a + monom_mult c t p) v) v\n                         \\<in> pmdl B", "have \"monomial (lookup (monom_mult c t b) v) v \\<in> pmdl B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. monomial (lookup (monom_mult c t b) v) v \\<in> pmdl B", "proof (simp add: b monom_mult_monomial lookup_single when_def pmdl.span_zero, intro impI)"], ["proof (state)\ngoal (1 subgoal):\n 1. t \\<oplus> u = v \\<Longrightarrow> monomial (c * d) v \\<in> pmdl B", "assume \"t \\<oplus> u = v\""], ["proof (state)\nthis:\n  t \\<oplus> u = v\n\ngoal (1 subgoal):\n 1. t \\<oplus> u = v \\<Longrightarrow> monomial (c * d) v \\<in> pmdl B", "hence \"monomial (c * d) v = monom_mult c t b\""], ["proof (prove)\nusing this:\n  t \\<oplus> u = v\n\ngoal (1 subgoal):\n 1. monomial (c * d) v = monom_mult c t b", "by (simp add: b monom_mult_monomial)"], ["proof (state)\nthis:\n  monomial (c * d) v = monom_mult c t b\n\ngoal (1 subgoal):\n 1. t \\<oplus> u = v \\<Longrightarrow> monomial (c * d) v \\<in> pmdl B", "also"], ["proof (state)\nthis:\n  monomial (c * d) v = monom_mult c t b\n\ngoal (1 subgoal):\n 1. t \\<oplus> u = v \\<Longrightarrow> monomial (c * d) v \\<in> pmdl B", "from step.hyps(3)"], ["proof (chain)\npicking this:\n  b \\<in> B", "have \"\\<dots> \\<in> pmdl B\""], ["proof (prove)\nusing this:\n  b \\<in> B\n\ngoal (1 subgoal):\n 1. monom_mult c t b \\<in> pmdl B", "by (rule monom_mult_in_pmdl)"], ["proof (state)\nthis:\n  monom_mult c t b \\<in> pmdl B\n\ngoal (1 subgoal):\n 1. t \\<oplus> u = v \\<Longrightarrow> monomial (c * d) v \\<in> pmdl B", "finally"], ["proof (chain)\npicking this:\n  monomial (c * d) v \\<in> pmdl B", "show \"monomial (c * d) v \\<in> pmdl B\""], ["proof (prove)\nusing this:\n  monomial (c * d) v \\<in> pmdl B\n\ngoal (1 subgoal):\n 1. monomial (c * d) v \\<in> pmdl B", "."], ["proof (state)\nthis:\n  monomial (c * d) v \\<in> pmdl B\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  monomial (lookup (monom_mult c t b) v) v \\<in> pmdl B\n\ngoal (1 subgoal):\n 1. \\<And>a p c t.\n       \\<lbrakk>a \\<in> pmdl B; monomial (lookup a v) v \\<in> pmdl B;\n        p \\<in> B; c \\<noteq> (0::'b)\\<rbrakk>\n       \\<Longrightarrow> monomial (lookup (a + monom_mult c t p) v) v\n                         \\<in> pmdl B", "with step.hyps(2)"], ["proof (chain)\npicking this:\n  monomial (lookup p v) v \\<in> pmdl B\n  monomial (lookup (monom_mult c t b) v) v \\<in> pmdl B", "show ?case"], ["proof (prove)\nusing this:\n  monomial (lookup p v) v \\<in> pmdl B\n  monomial (lookup (monom_mult c t b) v) v \\<in> pmdl B\n\ngoal (1 subgoal):\n 1. monomial (lookup (p + monom_mult c t b) v) v \\<in> pmdl B", "unfolding eq"], ["proof (prove)\nusing this:\n  monomial (lookup p v) v \\<in> pmdl B\n  monomial (lookup (monom_mult c t b) v) v \\<in> pmdl B\n\ngoal (1 subgoal):\n 1. monomial (lookup p v) v + monomial (lookup (monom_mult c t b) v) v\n    \\<in> pmdl B", "by (rule pmdl.span_add)"], ["proof (state)\nthis:\n  monomial (lookup (p + monom_mult c t b) v) v \\<in> pmdl B\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma monomial_pmdl_field:\n  assumes \"is_monomial_set B\" and \"p \\<in> pmdl B\" and \"v \\<in> keys (p::_ \\<Rightarrow>\\<^sub>0 'b::field)\"\n  shows \"monomial c v \\<in> pmdl B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. monomial c v \\<in> pmdl B", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. monomial c v \\<in> pmdl B", "from assms(1, 2)"], ["proof (chain)\npicking this:\n  is_monomial_set B\n  p \\<in> pmdl B", "have \"monomial (lookup p v) v \\<in> pmdl B\""], ["proof (prove)\nusing this:\n  is_monomial_set B\n  p \\<in> pmdl B\n\ngoal (1 subgoal):\n 1. monomial (lookup p v) v \\<in> pmdl B", "by (rule monomial_pmdl)"], ["proof (state)\nthis:\n  monomial (lookup p v) v \\<in> pmdl B\n\ngoal (1 subgoal):\n 1. monomial c v \\<in> pmdl B", "hence \"monom_mult (c / lookup p v) 0 (monomial (lookup p v) v) \\<in> pmdl B\""], ["proof (prove)\nusing this:\n  monomial (lookup p v) v \\<in> pmdl B\n\ngoal (1 subgoal):\n 1. monom_mult (c / lookup p v) (0::'a) (monomial (lookup p v) v)\n    \\<in> pmdl B", "by (rule pmdl_closed_monom_mult)"], ["proof (state)\nthis:\n  monom_mult (c / lookup p v) (0::'a) (monomial (lookup p v) v) \\<in> pmdl B\n\ngoal (1 subgoal):\n 1. monomial c v \\<in> pmdl B", "with assms(3)"], ["proof (chain)\npicking this:\n  v \\<in> keys p\n  monom_mult (c / lookup p v) (0::'a) (monomial (lookup p v) v) \\<in> pmdl B", "show ?thesis"], ["proof (prove)\nusing this:\n  v \\<in> keys p\n  monom_mult (c / lookup p v) (0::'a) (monomial (lookup p v) v) \\<in> pmdl B\n\ngoal (1 subgoal):\n 1. monomial c v \\<in> pmdl B", "by (simp add: monom_mult_monomial splus_zero in_keys_iff)"], ["proof (state)\nthis:\n  monomial c v \\<in> pmdl B\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "(* term_powerprod *)"], ["", "context ordered_term\nbegin"], ["", "lemma keys_monomial_pmdl:\n  assumes \"is_monomial_set F\" and \"p \\<in> pmdl F\" and \"t \\<in> keys p\"\n  obtains f where \"f \\<in> F\" and \"f \\<noteq> 0\" and \"lt f adds\\<^sub>t t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>f.\n        \\<lbrakk>f \\<in> F; f \\<noteq> 0; lt f adds\\<^sub>t t\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms(2) assms(3)"], ["proof (prove)\nusing this:\n  p \\<in> pmdl F\n  t \\<in> keys p\n\ngoal (1 subgoal):\n 1. (\\<And>f.\n        \\<lbrakk>f \\<in> F; f \\<noteq> 0; lt f adds\\<^sub>t t\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof (induct arbitrary: thesis rule: pmdl_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>thesis.\n       \\<lbrakk>\\<And>f.\n                   \\<lbrakk>f \\<in> F; f \\<noteq> 0;\n                    lt f adds\\<^sub>t t\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        t \\<in> keys 0\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>a p c ta thesis.\n       \\<lbrakk>a \\<in> pmdl F;\n        \\<And>thesis.\n           \\<lbrakk>\\<And>f.\n                       \\<lbrakk>f \\<in> F; f \\<noteq> 0;\n                        lt f adds\\<^sub>t t\\<rbrakk>\n                       \\<Longrightarrow> thesis;\n            t \\<in> keys a\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        p \\<in> F; c \\<noteq> (0::'b);\n        \\<And>f.\n           \\<lbrakk>f \\<in> F; f \\<noteq> 0; lt f adds\\<^sub>t t\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        t \\<in> keys (a + monom_mult c ta p)\\<rbrakk>\n       \\<Longrightarrow> thesis", "case module_0"], ["proof (state)\nthis:\n  \\<lbrakk>?f32 \\<in> F; ?f32 \\<noteq> 0; lt ?f32 adds\\<^sub>t t\\<rbrakk>\n  \\<Longrightarrow> thesis\n  t \\<in> keys 0\n\ngoal (2 subgoals):\n 1. \\<And>thesis.\n       \\<lbrakk>\\<And>f.\n                   \\<lbrakk>f \\<in> F; f \\<noteq> 0;\n                    lt f adds\\<^sub>t t\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        t \\<in> keys 0\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>a p c ta thesis.\n       \\<lbrakk>a \\<in> pmdl F;\n        \\<And>thesis.\n           \\<lbrakk>\\<And>f.\n                       \\<lbrakk>f \\<in> F; f \\<noteq> 0;\n                        lt f adds\\<^sub>t t\\<rbrakk>\n                       \\<Longrightarrow> thesis;\n            t \\<in> keys a\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        p \\<in> F; c \\<noteq> (0::'b);\n        \\<And>f.\n           \\<lbrakk>f \\<in> F; f \\<noteq> 0; lt f adds\\<^sub>t t\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        t \\<in> keys (a + monom_mult c ta p)\\<rbrakk>\n       \\<Longrightarrow> thesis", "from this(2)"], ["proof (chain)\npicking this:\n  t \\<in> keys 0", "show ?case"], ["proof (prove)\nusing this:\n  t \\<in> keys 0\n\ngoal (1 subgoal):\n 1. thesis", "by simp"], ["proof (state)\nthis:\n  thesis\n\ngoal (1 subgoal):\n 1. \\<And>a p c ta thesis.\n       \\<lbrakk>a \\<in> pmdl F;\n        \\<And>thesis.\n           \\<lbrakk>\\<And>f.\n                       \\<lbrakk>f \\<in> F; f \\<noteq> 0;\n                        lt f adds\\<^sub>t t\\<rbrakk>\n                       \\<Longrightarrow> thesis;\n            t \\<in> keys a\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        p \\<in> F; c \\<noteq> (0::'b);\n        \\<And>f.\n           \\<lbrakk>f \\<in> F; f \\<noteq> 0; lt f adds\\<^sub>t t\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        t \\<in> keys (a + monom_mult c ta p)\\<rbrakk>\n       \\<Longrightarrow> thesis", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a p c ta thesis.\n       \\<lbrakk>a \\<in> pmdl F;\n        \\<And>thesis.\n           \\<lbrakk>\\<And>f.\n                       \\<lbrakk>f \\<in> F; f \\<noteq> 0;\n                        lt f adds\\<^sub>t t\\<rbrakk>\n                       \\<Longrightarrow> thesis;\n            t \\<in> keys a\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        p \\<in> F; c \\<noteq> (0::'b);\n        \\<And>f.\n           \\<lbrakk>f \\<in> F; f \\<noteq> 0; lt f adds\\<^sub>t t\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        t \\<in> keys (a + monom_mult c ta p)\\<rbrakk>\n       \\<Longrightarrow> thesis", "case step: (module_plus p f0 c s)"], ["proof (state)\nthis:\n  p \\<in> pmdl F\n  \\<lbrakk>\\<And>f.\n              \\<lbrakk>f \\<in> F; f \\<noteq> 0; lt f adds\\<^sub>t t\\<rbrakk>\n              \\<Longrightarrow> ?thesis32;\n   t \\<in> keys p\\<rbrakk>\n  \\<Longrightarrow> ?thesis32\n  f0 \\<in> F\n  c \\<noteq> (0::'b)\n  \\<lbrakk>?f32 \\<in> F; ?f32 \\<noteq> 0; lt ?f32 adds\\<^sub>t t\\<rbrakk>\n  \\<Longrightarrow> thesis\n  t \\<in> keys (p + monom_mult c s f0)\n\ngoal (1 subgoal):\n 1. \\<And>a p c ta thesis.\n       \\<lbrakk>a \\<in> pmdl F;\n        \\<And>thesis.\n           \\<lbrakk>\\<And>f.\n                       \\<lbrakk>f \\<in> F; f \\<noteq> 0;\n                        lt f adds\\<^sub>t t\\<rbrakk>\n                       \\<Longrightarrow> thesis;\n            t \\<in> keys a\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        p \\<in> F; c \\<noteq> (0::'b);\n        \\<And>f.\n           \\<lbrakk>f \\<in> F; f \\<noteq> 0; lt f adds\\<^sub>t t\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        t \\<in> keys (a + monom_mult c ta p)\\<rbrakk>\n       \\<Longrightarrow> thesis", "from assms(1) step(3)"], ["proof (chain)\npicking this:\n  is_monomial_set F\n  f0 \\<in> F", "have \"is_monomial f0\""], ["proof (prove)\nusing this:\n  is_monomial_set F\n  f0 \\<in> F\n\ngoal (1 subgoal):\n 1. is_monomial f0", "unfolding is_monomial_set_def"], ["proof (prove)\nusing this:\n  Ball F is_monomial\n  f0 \\<in> F\n\ngoal (1 subgoal):\n 1. is_monomial f0", ".."], ["proof (state)\nthis:\n  is_monomial f0\n\ngoal (1 subgoal):\n 1. \\<And>a p c ta thesis.\n       \\<lbrakk>a \\<in> pmdl F;\n        \\<And>thesis.\n           \\<lbrakk>\\<And>f.\n                       \\<lbrakk>f \\<in> F; f \\<noteq> 0;\n                        lt f adds\\<^sub>t t\\<rbrakk>\n                       \\<Longrightarrow> thesis;\n            t \\<in> keys a\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        p \\<in> F; c \\<noteq> (0::'b);\n        \\<And>f.\n           \\<lbrakk>f \\<in> F; f \\<noteq> 0; lt f adds\\<^sub>t t\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        t \\<in> keys (a + monom_mult c ta p)\\<rbrakk>\n       \\<Longrightarrow> thesis", "hence \"keys f0 = {lt f0}\" and \"f0 \\<noteq> 0\""], ["proof (prove)\nusing this:\n  is_monomial f0\n\ngoal (1 subgoal):\n 1. keys f0 = {lt f0} &&& f0 \\<noteq> 0", "by (rule keys_monomial, rule monomial_not_0)"], ["proof (state)\nthis:\n  keys f0 = {lt f0}\n  f0 \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<And>a p c ta thesis.\n       \\<lbrakk>a \\<in> pmdl F;\n        \\<And>thesis.\n           \\<lbrakk>\\<And>f.\n                       \\<lbrakk>f \\<in> F; f \\<noteq> 0;\n                        lt f adds\\<^sub>t t\\<rbrakk>\n                       \\<Longrightarrow> thesis;\n            t \\<in> keys a\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        p \\<in> F; c \\<noteq> (0::'b);\n        \\<And>f.\n           \\<lbrakk>f \\<in> F; f \\<noteq> 0; lt f adds\\<^sub>t t\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        t \\<in> keys (a + monom_mult c ta p)\\<rbrakk>\n       \\<Longrightarrow> thesis", "from Poly_Mapping.keys_add step(6)"], ["proof (chain)\npicking this:\n  keys (?f + ?g) \\<subseteq> keys ?f \\<union> keys ?g\n  t \\<in> keys (p + monom_mult c s f0)", "have \"t \\<in> keys p \\<union> keys (monom_mult c s f0)\""], ["proof (prove)\nusing this:\n  keys (?f + ?g) \\<subseteq> keys ?f \\<union> keys ?g\n  t \\<in> keys (p + monom_mult c s f0)\n\ngoal (1 subgoal):\n 1. t \\<in> keys p \\<union> keys (monom_mult c s f0)", ".."], ["proof (state)\nthis:\n  t \\<in> keys p \\<union> keys (monom_mult c s f0)\n\ngoal (1 subgoal):\n 1. \\<And>a p c ta thesis.\n       \\<lbrakk>a \\<in> pmdl F;\n        \\<And>thesis.\n           \\<lbrakk>\\<And>f.\n                       \\<lbrakk>f \\<in> F; f \\<noteq> 0;\n                        lt f adds\\<^sub>t t\\<rbrakk>\n                       \\<Longrightarrow> thesis;\n            t \\<in> keys a\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        p \\<in> F; c \\<noteq> (0::'b);\n        \\<And>f.\n           \\<lbrakk>f \\<in> F; f \\<noteq> 0; lt f adds\\<^sub>t t\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        t \\<in> keys (a + monom_mult c ta p)\\<rbrakk>\n       \\<Longrightarrow> thesis", "thus ?case"], ["proof (prove)\nusing this:\n  t \\<in> keys p \\<union> keys (monom_mult c s f0)\n\ngoal (1 subgoal):\n 1. thesis", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. t \\<in> keys p \\<Longrightarrow> thesis\n 2. t \\<in> keys (monom_mult c s f0) \\<Longrightarrow> thesis", "assume \"t \\<in> keys p\""], ["proof (state)\nthis:\n  t \\<in> keys p\n\ngoal (2 subgoals):\n 1. t \\<in> keys p \\<Longrightarrow> thesis\n 2. t \\<in> keys (monom_mult c s f0) \\<Longrightarrow> thesis", "from step(2)[OF _ this]"], ["proof (chain)\npicking this:\n  (\\<And>f.\n      \\<lbrakk>f \\<in> F; f \\<noteq> 0; lt f adds\\<^sub>t t\\<rbrakk>\n      \\<Longrightarrow> ?thesis32) \\<Longrightarrow>\n  ?thesis32", "obtain f where \"f \\<in> F\" and \"f \\<noteq> 0\" and \"lt f adds\\<^sub>t t\""], ["proof (prove)\nusing this:\n  (\\<And>f.\n      \\<lbrakk>f \\<in> F; f \\<noteq> 0; lt f adds\\<^sub>t t\\<rbrakk>\n      \\<Longrightarrow> ?thesis32) \\<Longrightarrow>\n  ?thesis32\n\ngoal (1 subgoal):\n 1. (\\<And>f.\n        \\<lbrakk>f \\<in> F; f \\<noteq> 0; lt f adds\\<^sub>t t\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  f \\<in> F\n  f \\<noteq> 0\n  lt f adds\\<^sub>t t\n\ngoal (2 subgoals):\n 1. t \\<in> keys p \\<Longrightarrow> thesis\n 2. t \\<in> keys (monom_mult c s f0) \\<Longrightarrow> thesis", "thus ?thesis"], ["proof (prove)\nusing this:\n  f \\<in> F\n  f \\<noteq> 0\n  lt f adds\\<^sub>t t\n\ngoal (1 subgoal):\n 1. thesis", "by (rule step(5))"], ["proof (state)\nthis:\n  thesis\n\ngoal (1 subgoal):\n 1. t \\<in> keys (monom_mult c s f0) \\<Longrightarrow> thesis", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. t \\<in> keys (monom_mult c s f0) \\<Longrightarrow> thesis", "assume \"t \\<in> keys (monom_mult c s f0)\""], ["proof (state)\nthis:\n  t \\<in> keys (monom_mult c s f0)\n\ngoal (1 subgoal):\n 1. t \\<in> keys (monom_mult c s f0) \\<Longrightarrow> thesis", "with keys_monom_mult_subset"], ["proof (chain)\npicking this:\n  keys (monom_mult ?c ?t ?p) \\<subseteq> (\\<oplus>) ?t ` keys ?p\n  t \\<in> keys (monom_mult c s f0)", "have \"t \\<in> (\\<oplus>) s ` keys f0\""], ["proof (prove)\nusing this:\n  keys (monom_mult ?c ?t ?p) \\<subseteq> (\\<oplus>) ?t ` keys ?p\n  t \\<in> keys (monom_mult c s f0)\n\ngoal (1 subgoal):\n 1. t \\<in> (\\<oplus>) s ` keys f0", ".."], ["proof (state)\nthis:\n  t \\<in> (\\<oplus>) s ` keys f0\n\ngoal (1 subgoal):\n 1. t \\<in> keys (monom_mult c s f0) \\<Longrightarrow> thesis", "hence \"t = s \\<oplus> lt f0\""], ["proof (prove)\nusing this:\n  t \\<in> (\\<oplus>) s ` keys f0\n\ngoal (1 subgoal):\n 1. t = s \\<oplus> lt f0", "by (simp add: \\<open>keys f0 = {lt f0}\\<close>)"], ["proof (state)\nthis:\n  t = s \\<oplus> lt f0\n\ngoal (1 subgoal):\n 1. t \\<in> keys (monom_mult c s f0) \\<Longrightarrow> thesis", "hence \"lt f0 adds\\<^sub>t t\""], ["proof (prove)\nusing this:\n  t = s \\<oplus> lt f0\n\ngoal (1 subgoal):\n 1. lt f0 adds\\<^sub>t t", "by (simp add: term_simps)"], ["proof (state)\nthis:\n  lt f0 adds\\<^sub>t t\n\ngoal (1 subgoal):\n 1. t \\<in> keys (monom_mult c s f0) \\<Longrightarrow> thesis", "with \\<open>f0 \\<in> F\\<close> \\<open>f0 \\<noteq> 0\\<close>"], ["proof (chain)\npicking this:\n  f0 \\<in> F\n  f0 \\<noteq> 0\n  lt f0 adds\\<^sub>t t", "show ?thesis"], ["proof (prove)\nusing this:\n  f0 \\<in> F\n  f0 \\<noteq> 0\n  lt f0 adds\\<^sub>t t\n\ngoal (1 subgoal):\n 1. thesis", "by (rule step(5))"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma image_lt_monomial_lt: \"lt ` monomial (1::'b::zero_neq_one) ` lt ` F = lt ` F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lt ` monomial (1::'b) ` lt ` F = lt ` F", "by (auto simp: lt_monomial intro!: image_eqI)"], ["", "subsection \\<open>Reduction\\<close>"], ["", "lemma red_setE2:\n  assumes \"red B p q\"\n  obtains b where \"b \\<in> B\" and \"b \\<noteq> 0\" and \"red {b} p q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>b.\n        \\<lbrakk>b \\<in> B; b \\<noteq> 0; red {b} p q\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>b.\n        \\<lbrakk>b \\<in> B; b \\<noteq> 0; red {b} p q\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from assms"], ["proof (chain)\npicking this:\n  red B p q", "obtain b t where \"b \\<in> B\" and \"red_single p q b t\""], ["proof (prove)\nusing this:\n  red B p q\n\ngoal (1 subgoal):\n 1. (\\<And>b t.\n        \\<lbrakk>b \\<in> B; red_single p q b t\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule red_setE)"], ["proof (state)\nthis:\n  b \\<in> B\n  red_single p q b t\n\ngoal (1 subgoal):\n 1. (\\<And>b.\n        \\<lbrakk>b \\<in> B; b \\<noteq> 0; red {b} p q\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from this(2)"], ["proof (chain)\npicking this:\n  red_single p q b t", "have \"b \\<noteq> 0\""], ["proof (prove)\nusing this:\n  red_single p q b t\n\ngoal (1 subgoal):\n 1. b \\<noteq> 0", "by (simp add: red_single_def)"], ["proof (state)\nthis:\n  b \\<noteq> 0\n\ngoal (1 subgoal):\n 1. (\\<And>b.\n        \\<lbrakk>b \\<in> B; b \\<noteq> 0; red {b} p q\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \"red {b} p q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. red {b} p q", "by (rule red_setI, simp, fact)"], ["proof (state)\nthis:\n  red {b} p q\n\ngoal (1 subgoal):\n 1. (\\<And>b.\n        \\<lbrakk>b \\<in> B; b \\<noteq> 0; red {b} p q\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. thesis", "by (rule, fact+)"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma red_monomial_keys:\n  assumes \"is_monomial r\" and \"red {r} p q\"\n  shows \"card (keys p) = Suc (card (keys q))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card (keys p) = Suc (card (keys q))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. card (keys p) = Suc (card (keys q))", "from assms(2)"], ["proof (chain)\npicking this:\n  red {r} p q", "obtain s where rs: \"red_single p q r s\""], ["proof (prove)\nusing this:\n  red {r} p q\n\ngoal (1 subgoal):\n 1. (\\<And>s. red_single p q r s \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding red_singleton"], ["proof (prove)\nusing this:\n  Ex (red_single p q r)\n\ngoal (1 subgoal):\n 1. (\\<And>s. red_single p q r s \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  red_single p q r s\n\ngoal (1 subgoal):\n 1. card (keys p) = Suc (card (keys q))", "hence cp0: \"lookup p (s \\<oplus> lt r) \\<noteq> 0\" and q_def0: \"q = p - monom_mult (lookup p (s \\<oplus> lt r) / lc r) s r\""], ["proof (prove)\nusing this:\n  red_single p q r s\n\ngoal (1 subgoal):\n 1. lookup p (s \\<oplus> lt r) \\<noteq> (0::'b) &&&\n    q = p - monom_mult (lookup p (s \\<oplus> lt r) / lc r) s r", "unfolding red_single_def"], ["proof (prove)\nusing this:\n  r \\<noteq> 0 \\<and>\n  lookup p (s \\<oplus> lt r) \\<noteq> (0::'b) \\<and>\n  q = p - monom_mult (lookup p (s \\<oplus> lt r) / lc r) s r\n\ngoal (1 subgoal):\n 1. lookup p (s \\<oplus> lt r) \\<noteq> (0::'b) &&&\n    q = p - monom_mult (lookup p (s \\<oplus> lt r) / lc r) s r", "by simp_all"], ["proof (state)\nthis:\n  lookup p (s \\<oplus> lt r) \\<noteq> (0::'b)\n  q = p - monom_mult (lookup p (s \\<oplus> lt r) / lc r) s r\n\ngoal (1 subgoal):\n 1. card (keys p) = Suc (card (keys q))", "from assms(1)"], ["proof (chain)\npicking this:\n  is_monomial r", "obtain c t where \"c \\<noteq> 0\" and r_def: \"r = monomial c t\""], ["proof (prove)\nusing this:\n  is_monomial r\n\ngoal (1 subgoal):\n 1. (\\<And>c t.\n        \\<lbrakk>c \\<noteq> (0::'b); r = monomial c t\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule is_monomial_monomial)"], ["proof (state)\nthis:\n  c \\<noteq> (0::'b)\n  r = monomial c t\n\ngoal (1 subgoal):\n 1. card (keys p) = Suc (card (keys q))", "have ltr: \"lt r = t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lt r = t", "unfolding r_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. lt (monomial c t) = t", "by (rule lt_monomial, fact)"], ["proof (state)\nthis:\n  lt r = t\n\ngoal (1 subgoal):\n 1. card (keys p) = Suc (card (keys q))", "have lcr: \"lc r = c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lc r = c", "unfolding r_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. lc (monomial c t) = c", "by (rule lc_monomial)"], ["proof (state)\nthis:\n  lc r = c\n\ngoal (1 subgoal):\n 1. card (keys p) = Suc (card (keys q))", "define u where \"u = s \\<oplus> t\""], ["proof (state)\nthis:\n  u = s \\<oplus> t\n\ngoal (1 subgoal):\n 1. card (keys p) = Suc (card (keys q))", "from q_def0"], ["proof (chain)\npicking this:\n  q = p - monom_mult (lookup p (s \\<oplus> lt r) / lc r) s r", "have \"q = p - monom_mult (lookup p u / c) s r\""], ["proof (prove)\nusing this:\n  q = p - monom_mult (lookup p (s \\<oplus> lt r) / lc r) s r\n\ngoal (1 subgoal):\n 1. q = p - monom_mult (lookup p u / c) s r", "unfolding u_def ltr lcr"], ["proof (prove)\nusing this:\n  q = p - monom_mult (lookup p (s \\<oplus> t) / c) s r\n\ngoal (1 subgoal):\n 1. q = p - monom_mult (lookup p (s \\<oplus> t) / c) s r", "."], ["proof (state)\nthis:\n  q = p - monom_mult (lookup p u / c) s r\n\ngoal (1 subgoal):\n 1. card (keys p) = Suc (card (keys q))", "also"], ["proof (state)\nthis:\n  q = p - monom_mult (lookup p u / c) s r\n\ngoal (1 subgoal):\n 1. card (keys p) = Suc (card (keys q))", "have \"... = p - monomial ((lookup p u / c) * c) u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p - monom_mult (lookup p u / c) s r =\n    p - monomial (lookup p u / c * c) u", "unfolding u_def r_def monom_mult_monomial"], ["proof (prove)\ngoal (1 subgoal):\n 1. p - monomial (lookup p (s \\<oplus> t) / c * c) (s \\<oplus> t) =\n    p - monomial (lookup p (s \\<oplus> t) / c * c) (s \\<oplus> t)", ".."], ["proof (state)\nthis:\n  p - monom_mult (lookup p u / c) s r = p - monomial (lookup p u / c * c) u\n\ngoal (1 subgoal):\n 1. card (keys p) = Suc (card (keys q))", "finally"], ["proof (chain)\npicking this:\n  q = p - monomial (lookup p u / c * c) u", "have q_def: \"q = p - monomial (lookup p u) u\""], ["proof (prove)\nusing this:\n  q = p - monomial (lookup p u / c * c) u\n\ngoal (1 subgoal):\n 1. q = p - monomial (lookup p u) u", "using \\<open>c \\<noteq> 0\\<close>"], ["proof (prove)\nusing this:\n  q = p - monomial (lookup p u / c * c) u\n  c \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. q = p - monomial (lookup p u) u", "by simp"], ["proof (state)\nthis:\n  q = p - monomial (lookup p u) u\n\ngoal (1 subgoal):\n 1. card (keys p) = Suc (card (keys q))", "from cp0"], ["proof (chain)\npicking this:\n  lookup p (s \\<oplus> lt r) \\<noteq> (0::'b)", "have \"lookup p u \\<noteq> 0\""], ["proof (prove)\nusing this:\n  lookup p (s \\<oplus> lt r) \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. lookup p u \\<noteq> (0::'b)", "unfolding u_def ltr"], ["proof (prove)\nusing this:\n  lookup p (s \\<oplus> t) \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. lookup p (s \\<oplus> t) \\<noteq> (0::'b)", "."], ["proof (state)\nthis:\n  lookup p u \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. card (keys p) = Suc (card (keys q))", "hence \"u \\<in> keys p\""], ["proof (prove)\nusing this:\n  lookup p u \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. u \\<in> keys p", "by (simp add: in_keys_iff)"], ["proof (state)\nthis:\n  u \\<in> keys p\n\ngoal (1 subgoal):\n 1. card (keys p) = Suc (card (keys q))", "have \"keys q = keys p - {u}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. keys q = keys p - {u}", "unfolding q_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. keys (p - monomial (lookup p u) u) = keys p - {u}", "proof (rule, rule)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> keys (p - monomial (lookup p u) u) \\<Longrightarrow>\n       x \\<in> keys p - {u}\n 2. keys p - {u} \\<subseteq> keys (p - monomial (lookup p u) u)", "fix x"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> keys (p - monomial (lookup p u) u) \\<Longrightarrow>\n       x \\<in> keys p - {u}\n 2. keys p - {u} \\<subseteq> keys (p - monomial (lookup p u) u)", "assume \"x \\<in> keys (p - monomial (lookup p u) u)\""], ["proof (state)\nthis:\n  x \\<in> keys (p - monomial (lookup p u) u)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> keys (p - monomial (lookup p u) u) \\<Longrightarrow>\n       x \\<in> keys p - {u}\n 2. keys p - {u} \\<subseteq> keys (p - monomial (lookup p u) u)", "hence \"lookup (p - monomial (lookup p u) u) x \\<noteq> 0\""], ["proof (prove)\nusing this:\n  x \\<in> keys (p - monomial (lookup p u) u)\n\ngoal (1 subgoal):\n 1. lookup (p - monomial (lookup p u) u) x \\<noteq> (0::'b)", "by (simp add: in_keys_iff)"], ["proof (state)\nthis:\n  lookup (p - monomial (lookup p u) u) x \\<noteq> (0::'b)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> keys (p - monomial (lookup p u) u) \\<Longrightarrow>\n       x \\<in> keys p - {u}\n 2. keys p - {u} \\<subseteq> keys (p - monomial (lookup p u) u)", "hence a: \"lookup p x - lookup (monomial (lookup p u) u) x \\<noteq> 0\""], ["proof (prove)\nusing this:\n  lookup (p - monomial (lookup p u) u) x \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. lookup p x - lookup (monomial (lookup p u) u) x \\<noteq> (0::'b)", "unfolding lookup_minus"], ["proof (prove)\nusing this:\n  lookup p x - lookup (monomial (lookup p u) u) x \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. lookup p x - lookup (monomial (lookup p u) u) x \\<noteq> (0::'b)", "."], ["proof (state)\nthis:\n  lookup p x - lookup (monomial (lookup p u) u) x \\<noteq> (0::'b)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> keys (p - monomial (lookup p u) u) \\<Longrightarrow>\n       x \\<in> keys p - {u}\n 2. keys p - {u} \\<subseteq> keys (p - monomial (lookup p u) u)", "hence \"x \\<noteq> u\""], ["proof (prove)\nusing this:\n  lookup p x - lookup (monomial (lookup p u) u) x \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. x \\<noteq> u", "unfolding lookup_single"], ["proof (prove)\nusing this:\n  lookup p x - (lookup p u when u = x) \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. x \\<noteq> u", "by auto"], ["proof (state)\nthis:\n  x \\<noteq> u\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> keys (p - monomial (lookup p u) u) \\<Longrightarrow>\n       x \\<in> keys p - {u}\n 2. keys p - {u} \\<subseteq> keys (p - monomial (lookup p u) u)", "with a"], ["proof (chain)\npicking this:\n  lookup p x - lookup (monomial (lookup p u) u) x \\<noteq> (0::'b)\n  x \\<noteq> u", "have \"lookup p x \\<noteq> 0\""], ["proof (prove)\nusing this:\n  lookup p x - lookup (monomial (lookup p u) u) x \\<noteq> (0::'b)\n  x \\<noteq> u\n\ngoal (1 subgoal):\n 1. lookup p x \\<noteq> (0::'b)", "unfolding lookup_single"], ["proof (prove)\nusing this:\n  lookup p x - (lookup p u when u = x) \\<noteq> (0::'b)\n  x \\<noteq> u\n\ngoal (1 subgoal):\n 1. lookup p x \\<noteq> (0::'b)", "by auto"], ["proof (state)\nthis:\n  lookup p x \\<noteq> (0::'b)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> keys (p - monomial (lookup p u) u) \\<Longrightarrow>\n       x \\<in> keys p - {u}\n 2. keys p - {u} \\<subseteq> keys (p - monomial (lookup p u) u)", "show \"x \\<in> keys p - {u}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> keys p - {u}", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. x \\<in> keys p\n 2. x \\<notin> {u}", "from \\<open>lookup p x \\<noteq> 0\\<close>"], ["proof (chain)\npicking this:\n  lookup p x \\<noteq> (0::'b)", "show \"x \\<in> keys p\""], ["proof (prove)\nusing this:\n  lookup p x \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. x \\<in> keys p", "by (simp add: in_keys_iff)"], ["proof (state)\nthis:\n  x \\<in> keys p\n\ngoal (1 subgoal):\n 1. x \\<notin> {u}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<notin> {u}", "from \\<open>x \\<noteq> u\\<close>"], ["proof (chain)\npicking this:\n  x \\<noteq> u", "show \"x \\<notin> {u}\""], ["proof (prove)\nusing this:\n  x \\<noteq> u\n\ngoal (1 subgoal):\n 1. x \\<notin> {u}", "by simp"], ["proof (state)\nthis:\n  x \\<notin> {u}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  x \\<in> keys p - {u}\n\ngoal (1 subgoal):\n 1. keys p - {u} \\<subseteq> keys (p - monomial (lookup p u) u)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. keys p - {u} \\<subseteq> keys (p - monomial (lookup p u) u)", "show \"keys p - {u} \\<subseteq> keys (p - monomial (lookup p u) u)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. keys p - {u} \\<subseteq> keys (p - monomial (lookup p u) u)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> keys p - {u} \\<Longrightarrow>\n       x \\<in> keys (p - monomial (lookup p u) u)", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> keys p - {u} \\<Longrightarrow>\n       x \\<in> keys (p - monomial (lookup p u) u)", "assume \"x \\<in> keys p - {u}\""], ["proof (state)\nthis:\n  x \\<in> keys p - {u}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> keys p - {u} \\<Longrightarrow>\n       x \\<in> keys (p - monomial (lookup p u) u)", "hence \"x \\<in> keys p\" and \"x \\<noteq> u\""], ["proof (prove)\nusing this:\n  x \\<in> keys p - {u}\n\ngoal (1 subgoal):\n 1. x \\<in> keys p &&& x \\<noteq> u", "by auto"], ["proof (state)\nthis:\n  x \\<in> keys p\n  x \\<noteq> u\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> keys p - {u} \\<Longrightarrow>\n       x \\<in> keys (p - monomial (lookup p u) u)", "from \\<open>x \\<in> keys p\\<close>"], ["proof (chain)\npicking this:\n  x \\<in> keys p", "have \"lookup p x \\<noteq> 0\""], ["proof (prove)\nusing this:\n  x \\<in> keys p\n\ngoal (1 subgoal):\n 1. lookup p x \\<noteq> (0::'b)", "by (simp add: in_keys_iff)"], ["proof (state)\nthis:\n  lookup p x \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> keys p - {u} \\<Longrightarrow>\n       x \\<in> keys (p - monomial (lookup p u) u)", "with \\<open>x \\<noteq> u\\<close>"], ["proof (chain)\npicking this:\n  x \\<noteq> u\n  lookup p x \\<noteq> (0::'b)", "have \"lookup (p - monomial (lookup p u) u) x \\<noteq> 0\""], ["proof (prove)\nusing this:\n  x \\<noteq> u\n  lookup p x \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. lookup (p - monomial (lookup p u) u) x \\<noteq> (0::'b)", "by (simp add: lookup_minus lookup_single)"], ["proof (state)\nthis:\n  lookup (p - monomial (lookup p u) u) x \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> keys p - {u} \\<Longrightarrow>\n       x \\<in> keys (p - monomial (lookup p u) u)", "thus \"x \\<in> keys (p - monomial (lookup p u) u)\""], ["proof (prove)\nusing this:\n  lookup (p - monomial (lookup p u) u) x \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. x \\<in> keys (p - monomial (lookup p u) u)", "by (simp add: in_keys_iff)"], ["proof (state)\nthis:\n  x \\<in> keys (p - monomial (lookup p u) u)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  keys p - {u} \\<subseteq> keys (p - monomial (lookup p u) u)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  keys q = keys p - {u}\n\ngoal (1 subgoal):\n 1. card (keys p) = Suc (card (keys q))", "have \"Suc (card (keys q)) = card (keys p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Suc (card (keys q)) = card (keys p)", "unfolding \\<open>keys q = keys p - {u}\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. Suc (card (keys p - {u})) = card (keys p)", "by (rule card_Suc_Diff1, rule finite_keys, fact)"], ["proof (state)\nthis:\n  Suc (card (keys q)) = card (keys p)\n\ngoal (1 subgoal):\n 1. card (keys p) = Suc (card (keys q))", "thus ?thesis"], ["proof (prove)\nusing this:\n  Suc (card (keys q)) = card (keys p)\n\ngoal (1 subgoal):\n 1. card (keys p) = Suc (card (keys q))", "by simp"], ["proof (state)\nthis:\n  card (keys p) = Suc (card (keys q))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma red_monomial_monomial_setD:\n  assumes \"is_monomial p\" and \"is_monomial_set B\" and \"red B p q\"\n  shows \"q = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. q = 0", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. q = 0", "from assms(3)"], ["proof (chain)\npicking this:\n  red B p q", "obtain b where \"b \\<in> B\" and \"b \\<noteq> 0\" and *: \"red {b} p q\""], ["proof (prove)\nusing this:\n  red B p q\n\ngoal (1 subgoal):\n 1. (\\<And>b.\n        \\<lbrakk>b \\<in> B; b \\<noteq> 0; red {b} p q\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule red_setE2)"], ["proof (state)\nthis:\n  b \\<in> B\n  b \\<noteq> 0\n  red {b} p q\n\ngoal (1 subgoal):\n 1. q = 0", "from assms(2) this(1)"], ["proof (chain)\npicking this:\n  is_monomial_set B\n  b \\<in> B", "have \"is_monomial b\""], ["proof (prove)\nusing this:\n  is_monomial_set B\n  b \\<in> B\n\ngoal (1 subgoal):\n 1. is_monomial b", "by (rule is_monomial_setD)"], ["proof (state)\nthis:\n  is_monomial b\n\ngoal (1 subgoal):\n 1. q = 0", "hence \"card (keys p) = Suc (card (keys q))\""], ["proof (prove)\nusing this:\n  is_monomial b\n\ngoal (1 subgoal):\n 1. card (keys p) = Suc (card (keys q))", "using *"], ["proof (prove)\nusing this:\n  is_monomial b\n  red {b} p q\n\ngoal (1 subgoal):\n 1. card (keys p) = Suc (card (keys q))", "by (rule red_monomial_keys)"], ["proof (state)\nthis:\n  card (keys p) = Suc (card (keys q))\n\ngoal (1 subgoal):\n 1. q = 0", "with assms(1)"], ["proof (chain)\npicking this:\n  is_monomial p\n  card (keys p) = Suc (card (keys q))", "show ?thesis"], ["proof (prove)\nusing this:\n  is_monomial p\n  card (keys p) = Suc (card (keys q))\n\ngoal (1 subgoal):\n 1. q = 0", "by (simp add: is_monomial_def)"], ["proof (state)\nthis:\n  q = 0\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary is_red_monomial_monomial_setD:\n  assumes \"is_monomial p\" and \"is_monomial_set B\" and \"is_red B p\"\n  shows \"red B p 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. red B p 0", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. red B p 0", "from assms(3)"], ["proof (chain)\npicking this:\n  is_red B p", "obtain q where \"red B p q\""], ["proof (prove)\nusing this:\n  is_red B p\n\ngoal (1 subgoal):\n 1. (\\<And>q. red B p q \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by (rule is_redE)"], ["proof (state)\nthis:\n  red B p q\n\ngoal (1 subgoal):\n 1. red B p 0", "moreover"], ["proof (state)\nthis:\n  red B p q\n\ngoal (1 subgoal):\n 1. red B p 0", "from assms(1, 2) this"], ["proof (chain)\npicking this:\n  is_monomial p\n  is_monomial_set B\n  red B p q", "have \"q = 0\""], ["proof (prove)\nusing this:\n  is_monomial p\n  is_monomial_set B\n  red B p q\n\ngoal (1 subgoal):\n 1. q = 0", "by (rule red_monomial_monomial_setD)"], ["proof (state)\nthis:\n  q = 0\n\ngoal (1 subgoal):\n 1. red B p 0", "ultimately"], ["proof (chain)\npicking this:\n  red B p q\n  q = 0", "show ?thesis"], ["proof (prove)\nusing this:\n  red B p q\n  q = 0\n\ngoal (1 subgoal):\n 1. red B p 0", "by simp"], ["proof (state)\nthis:\n  red B p 0\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary is_red_monomial_monomial_set_in_pmdl:\n  \"is_monomial p \\<Longrightarrow> is_monomial_set B \\<Longrightarrow> is_red B p \\<Longrightarrow> p \\<in> pmdl B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_monomial p; is_monomial_set B; is_red B p\\<rbrakk>\n    \\<Longrightarrow> p \\<in> pmdl B", "by (intro red_rtranclp_0_in_pmdl r_into_rtranclp is_red_monomial_monomial_setD)"], ["", "corollary red_rtrancl_monomial_monomial_set_cases:\n  assumes \"is_monomial p\" and \"is_monomial_set B\" and \"(red B)\\<^sup>*\\<^sup>* p q\"\n  obtains \"q = p\" | \"q = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>q = p \\<Longrightarrow> thesis;\n     q = 0 \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "using assms(3)"], ["proof (prove)\nusing this:\n  (red B)\\<^sup>*\\<^sup>* p q\n\ngoal (1 subgoal):\n 1. \\<lbrakk>q = p \\<Longrightarrow> thesis;\n     q = 0 \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "proof (induct q arbitrary: thesis rule: rtranclp_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>thesis.\n       \\<lbrakk>p = p \\<Longrightarrow> thesis;\n        p = 0 \\<Longrightarrow> thesis\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>y z thesis.\n       \\<lbrakk>(red B)\\<^sup>*\\<^sup>* p y; red B y z;\n        \\<And>thesis.\n           \\<lbrakk>y = p \\<Longrightarrow> thesis;\n            y = 0 \\<Longrightarrow> thesis\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        z = p \\<Longrightarrow> thesis;\n        z = 0 \\<Longrightarrow> thesis\\<rbrakk>\n       \\<Longrightarrow> thesis", "case base"], ["proof (state)\nthis:\n  p = p \\<Longrightarrow> thesis\n  p = 0 \\<Longrightarrow> thesis\n\ngoal (2 subgoals):\n 1. \\<And>thesis.\n       \\<lbrakk>p = p \\<Longrightarrow> thesis;\n        p = 0 \\<Longrightarrow> thesis\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>y z thesis.\n       \\<lbrakk>(red B)\\<^sup>*\\<^sup>* p y; red B y z;\n        \\<And>thesis.\n           \\<lbrakk>y = p \\<Longrightarrow> thesis;\n            y = 0 \\<Longrightarrow> thesis\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        z = p \\<Longrightarrow> thesis;\n        z = 0 \\<Longrightarrow> thesis\\<rbrakk>\n       \\<Longrightarrow> thesis", "from refl"], ["proof (chain)\npicking this:\n  ?t = ?t", "show ?case"], ["proof (prove)\nusing this:\n  ?t = ?t\n\ngoal (1 subgoal):\n 1. thesis", "by (rule base)"], ["proof (state)\nthis:\n  thesis\n\ngoal (1 subgoal):\n 1. \\<And>y z thesis.\n       \\<lbrakk>(red B)\\<^sup>*\\<^sup>* p y; red B y z;\n        \\<And>thesis.\n           \\<lbrakk>y = p \\<Longrightarrow> thesis;\n            y = 0 \\<Longrightarrow> thesis\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        z = p \\<Longrightarrow> thesis;\n        z = 0 \\<Longrightarrow> thesis\\<rbrakk>\n       \\<Longrightarrow> thesis", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y z thesis.\n       \\<lbrakk>(red B)\\<^sup>*\\<^sup>* p y; red B y z;\n        \\<And>thesis.\n           \\<lbrakk>y = p \\<Longrightarrow> thesis;\n            y = 0 \\<Longrightarrow> thesis\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        z = p \\<Longrightarrow> thesis;\n        z = 0 \\<Longrightarrow> thesis\\<rbrakk>\n       \\<Longrightarrow> thesis", "case (step y z)"], ["proof (state)\nthis:\n  (red B)\\<^sup>*\\<^sup>* p y\n  red B y z\n  \\<lbrakk>y = p \\<Longrightarrow> ?thesis32;\n   y = 0 \\<Longrightarrow> ?thesis32\\<rbrakk>\n  \\<Longrightarrow> ?thesis32\n  z = p \\<Longrightarrow> thesis\n  z = 0 \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. \\<And>y z thesis.\n       \\<lbrakk>(red B)\\<^sup>*\\<^sup>* p y; red B y z;\n        \\<And>thesis.\n           \\<lbrakk>y = p \\<Longrightarrow> thesis;\n            y = 0 \\<Longrightarrow> thesis\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        z = p \\<Longrightarrow> thesis;\n        z = 0 \\<Longrightarrow> thesis\\<rbrakk>\n       \\<Longrightarrow> thesis", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. thesis", "proof (rule step.hyps)"], ["proof (state)\ngoal (2 subgoals):\n 1. y = p \\<Longrightarrow> thesis\n 2. y = 0 \\<Longrightarrow> thesis", "assume \"y = p\""], ["proof (state)\nthis:\n  y = p\n\ngoal (2 subgoals):\n 1. y = p \\<Longrightarrow> thesis\n 2. y = 0 \\<Longrightarrow> thesis", "with step.hyps(2)"], ["proof (chain)\npicking this:\n  red B y z\n  y = p", "have \"red B p z\""], ["proof (prove)\nusing this:\n  red B y z\n  y = p\n\ngoal (1 subgoal):\n 1. red B p z", "by simp"], ["proof (state)\nthis:\n  red B p z\n\ngoal (2 subgoals):\n 1. y = p \\<Longrightarrow> thesis\n 2. y = 0 \\<Longrightarrow> thesis", "with assms(1, 2)"], ["proof (chain)\npicking this:\n  is_monomial p\n  is_monomial_set B\n  red B p z", "have \"z = 0\""], ["proof (prove)\nusing this:\n  is_monomial p\n  is_monomial_set B\n  red B p z\n\ngoal (1 subgoal):\n 1. z = 0", "by (rule red_monomial_monomial_setD)"], ["proof (state)\nthis:\n  z = 0\n\ngoal (2 subgoals):\n 1. y = p \\<Longrightarrow> thesis\n 2. y = 0 \\<Longrightarrow> thesis", "thus ?thesis"], ["proof (prove)\nusing this:\n  z = 0\n\ngoal (1 subgoal):\n 1. thesis", "by (rule step.prems)"], ["proof (state)\nthis:\n  thesis\n\ngoal (1 subgoal):\n 1. y = 0 \\<Longrightarrow> thesis", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. y = 0 \\<Longrightarrow> thesis", "assume \"y = 0\""], ["proof (state)\nthis:\n  y = 0\n\ngoal (1 subgoal):\n 1. y = 0 \\<Longrightarrow> thesis", "from step.hyps(2)"], ["proof (chain)\npicking this:\n  red B y z", "have \"is_red B 0\""], ["proof (prove)\nusing this:\n  red B y z\n\ngoal (1 subgoal):\n 1. is_red B 0", "unfolding \\<open>y = 0\\<close>"], ["proof (prove)\nusing this:\n  red B 0 z\n\ngoal (1 subgoal):\n 1. is_red B 0", "by (rule is_redI)"], ["proof (state)\nthis:\n  is_red B 0\n\ngoal (1 subgoal):\n 1. y = 0 \\<Longrightarrow> thesis", "with irred_0"], ["proof (chain)\npicking this:\n  \\<not> is_red ?F 0\n  is_red B 0", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> is_red ?F 0\n  is_red B 0\n\ngoal (1 subgoal):\n 1. thesis", ".."], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma is_red_monomial_lt:\n  assumes \"0 \\<notin> B\"\n  shows \"is_red (monomial (1::'b::field) ` lt ` B) = is_red B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_red (monomial (1::'b) ` lt ` B) = is_red B", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. is_red (monomial (1::'b) ` lt ` B) x = is_red B x", "fix p"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. is_red (monomial (1::'b) ` lt ` B) x = is_red B x", "let ?B = \"monomial (1::'b) ` lt ` B\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. is_red (monomial (1::'b) ` lt ` B) x = is_red B x", "show \"is_red ?B p \\<longleftrightarrow> is_red B p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_red (monomial (1::'b) ` lt ` B) p = is_red B p", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. is_red (monomial (1::'b) ` lt ` B) p \\<Longrightarrow> is_red B p\n 2. is_red B p \\<Longrightarrow> is_red (monomial (1::'b) ` lt ` B) p", "assume \"is_red ?B p\""], ["proof (state)\nthis:\n  is_red (monomial (1::'b) ` lt ` B) p\n\ngoal (2 subgoals):\n 1. is_red (monomial (1::'b) ` lt ` B) p \\<Longrightarrow> is_red B p\n 2. is_red B p \\<Longrightarrow> is_red (monomial (1::'b) ` lt ` B) p", "then"], ["proof (chain)\npicking this:\n  is_red (monomial (1::'b) ` lt ` B) p", "obtain f v where \"f \\<in> ?B\" and \"v \\<in> keys p\" and adds: \"lt f adds\\<^sub>t v\""], ["proof (prove)\nusing this:\n  is_red (monomial (1::'b) ` lt ` B) p\n\ngoal (1 subgoal):\n 1. (\\<And>f v.\n        \\<lbrakk>f \\<in> monomial (1::'b) ` lt ` B; v \\<in> keys p;\n         lt f adds\\<^sub>t v\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule is_red_addsE)"], ["proof (state)\nthis:\n  f \\<in> monomial (1::'b) ` lt ` B\n  v \\<in> keys p\n  lt f adds\\<^sub>t v\n\ngoal (2 subgoals):\n 1. is_red (monomial (1::'b) ` lt ` B) p \\<Longrightarrow> is_red B p\n 2. is_red B p \\<Longrightarrow> is_red (monomial (1::'b) ` lt ` B) p", "from this(1)"], ["proof (chain)\npicking this:\n  f \\<in> monomial (1::'b) ` lt ` B", "have \"lt f \\<in> lt ` ?B\""], ["proof (prove)\nusing this:\n  f \\<in> monomial (1::'b) ` lt ` B\n\ngoal (1 subgoal):\n 1. lt f \\<in> lt ` monomial (1::'b) ` lt ` B", "by (rule imageI)"], ["proof (state)\nthis:\n  lt f \\<in> lt ` monomial (1::'b) ` lt ` B\n\ngoal (2 subgoals):\n 1. is_red (monomial (1::'b) ` lt ` B) p \\<Longrightarrow> is_red B p\n 2. is_red B p \\<Longrightarrow> is_red (monomial (1::'b) ` lt ` B) p", "also"], ["proof (state)\nthis:\n  lt f \\<in> lt ` monomial (1::'b) ` lt ` B\n\ngoal (2 subgoals):\n 1. is_red (monomial (1::'b) ` lt ` B) p \\<Longrightarrow> is_red B p\n 2. is_red B p \\<Longrightarrow> is_red (monomial (1::'b) ` lt ` B) p", "have \"\\<dots> = lt ` B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lt ` monomial (1::'b) ` lt ` B = lt ` B", "by (fact image_lt_monomial_lt)"], ["proof (state)\nthis:\n  lt ` monomial (1::'b) ` lt ` B = lt ` B\n\ngoal (2 subgoals):\n 1. is_red (monomial (1::'b) ` lt ` B) p \\<Longrightarrow> is_red B p\n 2. is_red B p \\<Longrightarrow> is_red (monomial (1::'b) ` lt ` B) p", "finally"], ["proof (chain)\npicking this:\n  lt f \\<in> lt ` B", "obtain b where \"b \\<in> B\" and eq: \"lt f = lt b\""], ["proof (prove)\nusing this:\n  lt f \\<in> lt ` B\n\ngoal (1 subgoal):\n 1. (\\<And>b.\n        \\<lbrakk>b \\<in> B; lt f = lt b\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  b \\<in> B\n  lt f = lt b\n\ngoal (2 subgoals):\n 1. is_red (monomial (1::'b) ` lt ` B) p \\<Longrightarrow> is_red B p\n 2. is_red B p \\<Longrightarrow> is_red (monomial (1::'b) ` lt ` B) p", "note this(1)"], ["proof (state)\nthis:\n  b \\<in> B\n\ngoal (2 subgoals):\n 1. is_red (monomial (1::'b) ` lt ` B) p \\<Longrightarrow> is_red B p\n 2. is_red B p \\<Longrightarrow> is_red (monomial (1::'b) ` lt ` B) p", "moreover"], ["proof (state)\nthis:\n  b \\<in> B\n\ngoal (2 subgoals):\n 1. is_red (monomial (1::'b) ` lt ` B) p \\<Longrightarrow> is_red B p\n 2. is_red B p \\<Longrightarrow> is_red (monomial (1::'b) ` lt ` B) p", "from this assms"], ["proof (chain)\npicking this:\n  b \\<in> B\n  0 \\<notin> B", "have \"b \\<noteq> 0\""], ["proof (prove)\nusing this:\n  b \\<in> B\n  0 \\<notin> B\n\ngoal (1 subgoal):\n 1. b \\<noteq> 0", "by blast"], ["proof (state)\nthis:\n  b \\<noteq> 0\n\ngoal (2 subgoals):\n 1. is_red (monomial (1::'b) ` lt ` B) p \\<Longrightarrow> is_red B p\n 2. is_red B p \\<Longrightarrow> is_red (monomial (1::'b) ` lt ` B) p", "moreover"], ["proof (state)\nthis:\n  b \\<noteq> 0\n\ngoal (2 subgoals):\n 1. is_red (monomial (1::'b) ` lt ` B) p \\<Longrightarrow> is_red B p\n 2. is_red B p \\<Longrightarrow> is_red (monomial (1::'b) ` lt ` B) p", "note \\<open>v \\<in> keys p\\<close>"], ["proof (state)\nthis:\n  v \\<in> keys p\n\ngoal (2 subgoals):\n 1. is_red (monomial (1::'b) ` lt ` B) p \\<Longrightarrow> is_red B p\n 2. is_red B p \\<Longrightarrow> is_red (monomial (1::'b) ` lt ` B) p", "moreover"], ["proof (state)\nthis:\n  v \\<in> keys p\n\ngoal (2 subgoals):\n 1. is_red (monomial (1::'b) ` lt ` B) p \\<Longrightarrow> is_red B p\n 2. is_red B p \\<Longrightarrow> is_red (monomial (1::'b) ` lt ` B) p", "from adds"], ["proof (chain)\npicking this:\n  lt f adds\\<^sub>t v", "have \"lt b adds\\<^sub>t v\""], ["proof (prove)\nusing this:\n  lt f adds\\<^sub>t v\n\ngoal (1 subgoal):\n 1. lt b adds\\<^sub>t v", "by (simp only: eq)"], ["proof (state)\nthis:\n  lt b adds\\<^sub>t v\n\ngoal (2 subgoals):\n 1. is_red (monomial (1::'b) ` lt ` B) p \\<Longrightarrow> is_red B p\n 2. is_red B p \\<Longrightarrow> is_red (monomial (1::'b) ` lt ` B) p", "ultimately"], ["proof (chain)\npicking this:\n  b \\<in> B\n  b \\<noteq> 0\n  v \\<in> keys p\n  lt b adds\\<^sub>t v", "show \"is_red B p\""], ["proof (prove)\nusing this:\n  b \\<in> B\n  b \\<noteq> 0\n  v \\<in> keys p\n  lt b adds\\<^sub>t v\n\ngoal (1 subgoal):\n 1. is_red B p", "by (rule is_red_addsI)"], ["proof (state)\nthis:\n  is_red B p\n\ngoal (1 subgoal):\n 1. is_red B p \\<Longrightarrow> is_red (monomial (1::'b) ` lt ` B) p", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. is_red B p \\<Longrightarrow> is_red (monomial (1::'b) ` lt ` B) p", "assume \"is_red B p\""], ["proof (state)\nthis:\n  is_red B p\n\ngoal (1 subgoal):\n 1. is_red B p \\<Longrightarrow> is_red (monomial (1::'b) ` lt ` B) p", "then"], ["proof (chain)\npicking this:\n  is_red B p", "obtain b v where \"b \\<in> B\" and \"v \\<in> keys p\" and adds: \"lt b adds\\<^sub>t v\""], ["proof (prove)\nusing this:\n  is_red B p\n\ngoal (1 subgoal):\n 1. (\\<And>b v.\n        \\<lbrakk>b \\<in> B; v \\<in> keys p; lt b adds\\<^sub>t v\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule is_red_addsE)"], ["proof (state)\nthis:\n  b \\<in> B\n  v \\<in> keys p\n  lt b adds\\<^sub>t v\n\ngoal (1 subgoal):\n 1. is_red B p \\<Longrightarrow> is_red (monomial (1::'b) ` lt ` B) p", "from this(1)"], ["proof (chain)\npicking this:\n  b \\<in> B", "have \"lt b \\<in> lt ` B\""], ["proof (prove)\nusing this:\n  b \\<in> B\n\ngoal (1 subgoal):\n 1. lt b \\<in> lt ` B", "by (rule imageI)"], ["proof (state)\nthis:\n  lt b \\<in> lt ` B\n\ngoal (1 subgoal):\n 1. is_red B p \\<Longrightarrow> is_red (monomial (1::'b) ` lt ` B) p", "also"], ["proof (state)\nthis:\n  lt b \\<in> lt ` B\n\ngoal (1 subgoal):\n 1. is_red B p \\<Longrightarrow> is_red (monomial (1::'b) ` lt ` B) p", "from image_lt_monomial_lt"], ["proof (chain)\npicking this:\n  lt ` monomial (1::?'b) ` lt ` ?F = lt ` ?F", "have \"\\<dots> = lt ` ?B\""], ["proof (prove)\nusing this:\n  lt ` monomial (1::?'b) ` lt ` ?F = lt ` ?F\n\ngoal (1 subgoal):\n 1. lt ` B = lt ` monomial (1::'b) ` lt ` B", "by (rule sym)"], ["proof (state)\nthis:\n  lt ` B = lt ` monomial (1::'b) ` lt ` B\n\ngoal (1 subgoal):\n 1. is_red B p \\<Longrightarrow> is_red (monomial (1::'b) ` lt ` B) p", "finally"], ["proof (chain)\npicking this:\n  lt b \\<in> lt ` monomial (1::'b) ` lt ` B", "obtain f where \"f \\<in> ?B\" and eq: \"lt b = lt f\""], ["proof (prove)\nusing this:\n  lt b \\<in> lt ` monomial (1::'b) ` lt ` B\n\ngoal (1 subgoal):\n 1. (\\<And>f.\n        \\<lbrakk>f \\<in> monomial (1::'b) ` lt ` B; lt b = lt f\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  f \\<in> monomial (1::'b) ` lt ` B\n  lt b = lt f\n\ngoal (1 subgoal):\n 1. is_red B p \\<Longrightarrow> is_red (monomial (1::'b) ` lt ` B) p", "note this(1)"], ["proof (state)\nthis:\n  f \\<in> monomial (1::'b) ` lt ` B\n\ngoal (1 subgoal):\n 1. is_red B p \\<Longrightarrow> is_red (monomial (1::'b) ` lt ` B) p", "moreover"], ["proof (state)\nthis:\n  f \\<in> monomial (1::'b) ` lt ` B\n\ngoal (1 subgoal):\n 1. is_red B p \\<Longrightarrow> is_red (monomial (1::'b) ` lt ` B) p", "from this"], ["proof (chain)\npicking this:\n  f \\<in> monomial (1::'b) ` lt ` B", "have \"f \\<noteq> 0\""], ["proof (prove)\nusing this:\n  f \\<in> monomial (1::'b) ` lt ` B\n\ngoal (1 subgoal):\n 1. f \\<noteq> 0", "by (auto simp: monomial_0_iff)"], ["proof (state)\nthis:\n  f \\<noteq> 0\n\ngoal (1 subgoal):\n 1. is_red B p \\<Longrightarrow> is_red (monomial (1::'b) ` lt ` B) p", "moreover"], ["proof (state)\nthis:\n  f \\<noteq> 0\n\ngoal (1 subgoal):\n 1. is_red B p \\<Longrightarrow> is_red (monomial (1::'b) ` lt ` B) p", "note \\<open>v \\<in> keys p\\<close>"], ["proof (state)\nthis:\n  v \\<in> keys p\n\ngoal (1 subgoal):\n 1. is_red B p \\<Longrightarrow> is_red (monomial (1::'b) ` lt ` B) p", "moreover"], ["proof (state)\nthis:\n  v \\<in> keys p\n\ngoal (1 subgoal):\n 1. is_red B p \\<Longrightarrow> is_red (monomial (1::'b) ` lt ` B) p", "from adds"], ["proof (chain)\npicking this:\n  lt b adds\\<^sub>t v", "have \"lt f adds\\<^sub>t v\""], ["proof (prove)\nusing this:\n  lt b adds\\<^sub>t v\n\ngoal (1 subgoal):\n 1. lt f adds\\<^sub>t v", "by (simp only: eq)"], ["proof (state)\nthis:\n  lt f adds\\<^sub>t v\n\ngoal (1 subgoal):\n 1. is_red B p \\<Longrightarrow> is_red (monomial (1::'b) ` lt ` B) p", "ultimately"], ["proof (chain)\npicking this:\n  f \\<in> monomial (1::'b) ` lt ` B\n  f \\<noteq> 0\n  v \\<in> keys p\n  lt f adds\\<^sub>t v", "show \"is_red ?B p\""], ["proof (prove)\nusing this:\n  f \\<in> monomial (1::'b) ` lt ` B\n  f \\<noteq> 0\n  v \\<in> keys p\n  lt f adds\\<^sub>t v\n\ngoal (1 subgoal):\n 1. is_red (monomial (1::'b) ` lt ` B) p", "by (rule is_red_addsI)"], ["proof (state)\nthis:\n  is_red (monomial (1::'b) ` lt ` B) p\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  is_red (monomial (1::'b) ` lt ` B) p = is_red B p\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "(* ordered_term *)"], ["", "subsection \\<open>Gr\\\"obner Bases\\<close>"], ["", "context gd_term\nbegin"], ["", "lemma monomial_set_is_GB:\n  assumes \"is_monomial_set G\"\n  shows \"is_Groebner_basis G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_Groebner_basis G", "unfolding GB_alt_1"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>f\\<in>pmdl G. (red G)\\<^sup>*\\<^sup>* f 0", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f. f \\<in> pmdl G \\<Longrightarrow> (red G)\\<^sup>*\\<^sup>* f 0", "fix f"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f. f \\<in> pmdl G \\<Longrightarrow> (red G)\\<^sup>*\\<^sup>* f 0", "assume \"f \\<in> pmdl G\""], ["proof (state)\nthis:\n  f \\<in> pmdl G\n\ngoal (1 subgoal):\n 1. \\<And>f. f \\<in> pmdl G \\<Longrightarrow> (red G)\\<^sup>*\\<^sup>* f 0", "thus \"(red G)\\<^sup>*\\<^sup>* f 0\""], ["proof (prove)\nusing this:\n  f \\<in> pmdl G\n\ngoal (1 subgoal):\n 1. (red G)\\<^sup>*\\<^sup>* f 0", "proof (induct f rule: poly_mapping_plus_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. 0 \\<in> pmdl G \\<Longrightarrow> (red G)\\<^sup>*\\<^sup>* 0 0\n 2. \\<And>p c t.\n       \\<lbrakk>c \\<noteq> (0::'b); t \\<notin> keys p;\n        p \\<in> pmdl G \\<Longrightarrow> (red G)\\<^sup>*\\<^sup>* p 0;\n        monomial c t + p \\<in> pmdl G\\<rbrakk>\n       \\<Longrightarrow> (red G)\\<^sup>*\\<^sup>* (monomial c t + p) 0", "case 1"], ["proof (state)\nthis:\n  0 \\<in> pmdl G\n\ngoal (2 subgoals):\n 1. 0 \\<in> pmdl G \\<Longrightarrow> (red G)\\<^sup>*\\<^sup>* 0 0\n 2. \\<And>p c t.\n       \\<lbrakk>c \\<noteq> (0::'b); t \\<notin> keys p;\n        p \\<in> pmdl G \\<Longrightarrow> (red G)\\<^sup>*\\<^sup>* p 0;\n        monomial c t + p \\<in> pmdl G\\<rbrakk>\n       \\<Longrightarrow> (red G)\\<^sup>*\\<^sup>* (monomial c t + p) 0", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. (red G)\\<^sup>*\\<^sup>* 0 0", ".."], ["proof (state)\nthis:\n  (red G)\\<^sup>*\\<^sup>* 0 0\n\ngoal (1 subgoal):\n 1. \\<And>p c t.\n       \\<lbrakk>c \\<noteq> (0::'b); t \\<notin> keys p;\n        p \\<in> pmdl G \\<Longrightarrow> (red G)\\<^sup>*\\<^sup>* p 0;\n        monomial c t + p \\<in> pmdl G\\<rbrakk>\n       \\<Longrightarrow> (red G)\\<^sup>*\\<^sup>* (monomial c t + p) 0", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p c t.\n       \\<lbrakk>c \\<noteq> (0::'b); t \\<notin> keys p;\n        p \\<in> pmdl G \\<Longrightarrow> (red G)\\<^sup>*\\<^sup>* p 0;\n        monomial c t + p \\<in> pmdl G\\<rbrakk>\n       \\<Longrightarrow> (red G)\\<^sup>*\\<^sup>* (monomial c t + p) 0", "case (2 f c t)"], ["proof (state)\nthis:\n  c \\<noteq> (0::'b)\n  t \\<notin> keys f\n  f \\<in> pmdl G \\<Longrightarrow> (red G)\\<^sup>*\\<^sup>* f 0\n  monomial c t + f \\<in> pmdl G\n\ngoal (1 subgoal):\n 1. \\<And>p c t.\n       \\<lbrakk>c \\<noteq> (0::'b); t \\<notin> keys p;\n        p \\<in> pmdl G \\<Longrightarrow> (red G)\\<^sup>*\\<^sup>* p 0;\n        monomial c t + p \\<in> pmdl G\\<rbrakk>\n       \\<Longrightarrow> (red G)\\<^sup>*\\<^sup>* (monomial c t + p) 0", "let ?f = \"monomial c t + f\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p c t.\n       \\<lbrakk>c \\<noteq> (0::'b); t \\<notin> keys p;\n        p \\<in> pmdl G \\<Longrightarrow> (red G)\\<^sup>*\\<^sup>* p 0;\n        monomial c t + p \\<in> pmdl G\\<rbrakk>\n       \\<Longrightarrow> (red G)\\<^sup>*\\<^sup>* (monomial c t + p) 0", "from 2(1)"], ["proof (chain)\npicking this:\n  c \\<noteq> (0::'b)", "have \"t \\<in> keys (monomial c t)\""], ["proof (prove)\nusing this:\n  c \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. t \\<in> keys (monomial c t)", "by simp"], ["proof (state)\nthis:\n  t \\<in> keys (monomial c t)\n\ngoal (1 subgoal):\n 1. \\<And>p c t.\n       \\<lbrakk>c \\<noteq> (0::'b); t \\<notin> keys p;\n        p \\<in> pmdl G \\<Longrightarrow> (red G)\\<^sup>*\\<^sup>* p 0;\n        monomial c t + p \\<in> pmdl G\\<rbrakk>\n       \\<Longrightarrow> (red G)\\<^sup>*\\<^sup>* (monomial c t + p) 0", "from this 2(2)"], ["proof (chain)\npicking this:\n  t \\<in> keys (monomial c t)\n  t \\<notin> keys f", "have \"t \\<in> keys ?f\""], ["proof (prove)\nusing this:\n  t \\<in> keys (monomial c t)\n  t \\<notin> keys f\n\ngoal (1 subgoal):\n 1. t \\<in> keys (monomial c t + f)", "by (rule in_keys_plusI1)"], ["proof (state)\nthis:\n  t \\<in> keys (monomial c t + f)\n\ngoal (1 subgoal):\n 1. \\<And>p c t.\n       \\<lbrakk>c \\<noteq> (0::'b); t \\<notin> keys p;\n        p \\<in> pmdl G \\<Longrightarrow> (red G)\\<^sup>*\\<^sup>* p 0;\n        monomial c t + p \\<in> pmdl G\\<rbrakk>\n       \\<Longrightarrow> (red G)\\<^sup>*\\<^sup>* (monomial c t + p) 0", "with assms \\<open>?f \\<in> pmdl G\\<close>"], ["proof (chain)\npicking this:\n  is_monomial_set G\n  monomial c t + f \\<in> pmdl G\n  t \\<in> keys (monomial c t + f)", "obtain g where \"g \\<in> G\" and \"g \\<noteq> 0\" and \"lt g adds\\<^sub>t t\""], ["proof (prove)\nusing this:\n  is_monomial_set G\n  monomial c t + f \\<in> pmdl G\n  t \\<in> keys (monomial c t + f)\n\ngoal (1 subgoal):\n 1. (\\<And>g.\n        \\<lbrakk>g \\<in> G; g \\<noteq> 0; lt g adds\\<^sub>t t\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule keys_monomial_pmdl)"], ["proof (state)\nthis:\n  g \\<in> G\n  g \\<noteq> 0\n  lt g adds\\<^sub>t t\n\ngoal (1 subgoal):\n 1. \\<And>p c t.\n       \\<lbrakk>c \\<noteq> (0::'b); t \\<notin> keys p;\n        p \\<in> pmdl G \\<Longrightarrow> (red G)\\<^sup>*\\<^sup>* p 0;\n        monomial c t + p \\<in> pmdl G\\<rbrakk>\n       \\<Longrightarrow> (red G)\\<^sup>*\\<^sup>* (monomial c t + p) 0", "from this(1)"], ["proof (chain)\npicking this:\n  g \\<in> G", "have \"red G ?f f\""], ["proof (prove)\nusing this:\n  g \\<in> G\n\ngoal (1 subgoal):\n 1. red G (monomial c t + f) f", "proof (rule red_setI)"], ["proof (state)\ngoal (1 subgoal):\n 1. red_single (monomial c t + f) f g ?t", "from \\<open>lt g adds\\<^sub>t t\\<close>"], ["proof (chain)\npicking this:\n  lt g adds\\<^sub>t t", "have \"component_of_term (lt g) = component_of_term t\" and \"lp g adds pp_of_term t\""], ["proof (prove)\nusing this:\n  lt g adds\\<^sub>t t\n\ngoal (1 subgoal):\n 1. component_of_term (lt g) = component_of_term t &&&\n    lp g adds pp_of_term t", "by (simp_all add: adds_term_def)"], ["proof (state)\nthis:\n  component_of_term (lt g) = component_of_term t\n  lp g adds pp_of_term t\n\ngoal (1 subgoal):\n 1. red_single (monomial c t + f) f g ?t", "from this"], ["proof (chain)\npicking this:\n  component_of_term (lt g) = component_of_term t\n  lp g adds pp_of_term t", "have eq: \"(pp_of_term t - lp g) \\<oplus> lt g = t\""], ["proof (prove)\nusing this:\n  component_of_term (lt g) = component_of_term t\n  lp g adds pp_of_term t\n\ngoal (1 subgoal):\n 1. (pp_of_term t - lp g) \\<oplus> lt g = t", "by (simp add: adds_minus splus_def term_of_pair_pair)"], ["proof (state)\nthis:\n  (pp_of_term t - lp g) \\<oplus> lt g = t\n\ngoal (1 subgoal):\n 1. red_single (monomial c t + f) f g ?t", "moreover"], ["proof (state)\nthis:\n  (pp_of_term t - lp g) \\<oplus> lt g = t\n\ngoal (1 subgoal):\n 1. red_single (monomial c t + f) f g ?t", "from 2(2)"], ["proof (chain)\npicking this:\n  t \\<notin> keys f", "have \"lookup ?f t = c\""], ["proof (prove)\nusing this:\n  t \\<notin> keys f\n\ngoal (1 subgoal):\n 1. lookup (monomial c t + f) t = c", "by (simp add: lookup_add in_keys_iff)"], ["proof (state)\nthis:\n  lookup (monomial c t + f) t = c\n\ngoal (1 subgoal):\n 1. red_single (monomial c t + f) f g ?t", "ultimately"], ["proof (chain)\npicking this:\n  (pp_of_term t - lp g) \\<oplus> lt g = t\n  lookup (monomial c t + f) t = c", "show \"red_single (monomial c t + f) f g (pp_of_term t - lp g)\""], ["proof (prove)\nusing this:\n  (pp_of_term t - lp g) \\<oplus> lt g = t\n  lookup (monomial c t + f) t = c\n\ngoal (1 subgoal):\n 1. red_single (monomial c t + f) f g (pp_of_term t - lp g)", "proof (simp add: red_single_def \\<open>g \\<noteq> 0\\<close> \\<open>t \\<in> keys ?f\\<close> 2(1))"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>(pp_of_term t - lp g) \\<oplus> lt g = t;\n     lookup (monomial c t + f) t = c\\<rbrakk>\n    \\<Longrightarrow> monomial c t =\n                      monom_mult (c / lc g) (pp_of_term t - lp g) g", "from \\<open>g \\<noteq> 0\\<close>"], ["proof (chain)\npicking this:\n  g \\<noteq> 0", "have \"lc g \\<noteq> 0\""], ["proof (prove)\nusing this:\n  g \\<noteq> 0\n\ngoal (1 subgoal):\n 1. lc g \\<noteq> (0::'b)", "by (rule lc_not_0)"], ["proof (state)\nthis:\n  lc g \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(pp_of_term t - lp g) \\<oplus> lt g = t;\n     lookup (monomial c t + f) t = c\\<rbrakk>\n    \\<Longrightarrow> monomial c t =\n                      monom_mult (c / lc g) (pp_of_term t - lp g) g", "hence \"monomial c t = monom_mult (c / lc g) (pp_of_term t - lp g) (monomial (lc g) (lt g))\""], ["proof (prove)\nusing this:\n  lc g \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. monomial c t =\n    monom_mult (c / lc g) (pp_of_term t - lp g) (monomial (lc g) (lt g))", "by (simp add: monom_mult_monomial eq)"], ["proof (state)\nthis:\n  monomial c t =\n  monom_mult (c / lc g) (pp_of_term t - lp g) (monomial (lc g) (lt g))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(pp_of_term t - lp g) \\<oplus> lt g = t;\n     lookup (monomial c t + f) t = c\\<rbrakk>\n    \\<Longrightarrow> monomial c t =\n                      monom_mult (c / lc g) (pp_of_term t - lp g) g", "moreover"], ["proof (state)\nthis:\n  monomial c t =\n  monom_mult (c / lc g) (pp_of_term t - lp g) (monomial (lc g) (lt g))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(pp_of_term t - lp g) \\<oplus> lt g = t;\n     lookup (monomial c t + f) t = c\\<rbrakk>\n    \\<Longrightarrow> monomial c t =\n                      monom_mult (c / lc g) (pp_of_term t - lp g) g", "from assms \\<open>g \\<in> G\\<close>"], ["proof (chain)\npicking this:\n  is_monomial_set G\n  g \\<in> G", "have \"is_monomial g\""], ["proof (prove)\nusing this:\n  is_monomial_set G\n  g \\<in> G\n\ngoal (1 subgoal):\n 1. is_monomial g", "unfolding is_monomial_set_def"], ["proof (prove)\nusing this:\n  Ball G is_monomial\n  g \\<in> G\n\ngoal (1 subgoal):\n 1. is_monomial g", ".."], ["proof (state)\nthis:\n  is_monomial g\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(pp_of_term t - lp g) \\<oplus> lt g = t;\n     lookup (monomial c t + f) t = c\\<rbrakk>\n    \\<Longrightarrow> monomial c t =\n                      monom_mult (c / lc g) (pp_of_term t - lp g) g", "ultimately"], ["proof (chain)\npicking this:\n  monomial c t =\n  monom_mult (c / lc g) (pp_of_term t - lp g) (monomial (lc g) (lt g))\n  is_monomial g", "show \"monomial c t = monom_mult (c / lc g) (pp_of_term t - lp g) g\""], ["proof (prove)\nusing this:\n  monomial c t =\n  monom_mult (c / lc g) (pp_of_term t - lp g) (monomial (lc g) (lt g))\n  is_monomial g\n\ngoal (1 subgoal):\n 1. monomial c t = monom_mult (c / lc g) (pp_of_term t - lp g) g", "by (simp only: monomial_eq_itself)"], ["proof (state)\nthis:\n  monomial c t = monom_mult (c / lc g) (pp_of_term t - lp g) g\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  red_single (monomial c t + f) f g (pp_of_term t - lp g)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  red G (monomial c t + f) f\n\ngoal (1 subgoal):\n 1. \\<And>p c t.\n       \\<lbrakk>c \\<noteq> (0::'b); t \\<notin> keys p;\n        p \\<in> pmdl G \\<Longrightarrow> (red G)\\<^sup>*\\<^sup>* p 0;\n        monomial c t + p \\<in> pmdl G\\<rbrakk>\n       \\<Longrightarrow> (red G)\\<^sup>*\\<^sup>* (monomial c t + p) 0", "have \"f \\<in> pmdl G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<in> pmdl G", "by (rule pmdl_closed_red, fact subset_refl, fact+)"], ["proof (state)\nthis:\n  f \\<in> pmdl G\n\ngoal (1 subgoal):\n 1. \\<And>p c t.\n       \\<lbrakk>c \\<noteq> (0::'b); t \\<notin> keys p;\n        p \\<in> pmdl G \\<Longrightarrow> (red G)\\<^sup>*\\<^sup>* p 0;\n        monomial c t + p \\<in> pmdl G\\<rbrakk>\n       \\<Longrightarrow> (red G)\\<^sup>*\\<^sup>* (monomial c t + p) 0", "hence \"(red G)\\<^sup>*\\<^sup>* f 0\""], ["proof (prove)\nusing this:\n  f \\<in> pmdl G\n\ngoal (1 subgoal):\n 1. (red G)\\<^sup>*\\<^sup>* f 0", "by (rule 2(3))"], ["proof (state)\nthis:\n  (red G)\\<^sup>*\\<^sup>* f 0\n\ngoal (1 subgoal):\n 1. \\<And>p c t.\n       \\<lbrakk>c \\<noteq> (0::'b); t \\<notin> keys p;\n        p \\<in> pmdl G \\<Longrightarrow> (red G)\\<^sup>*\\<^sup>* p 0;\n        monomial c t + p \\<in> pmdl G\\<rbrakk>\n       \\<Longrightarrow> (red G)\\<^sup>*\\<^sup>* (monomial c t + p) 0", "with \\<open>red G ?f f\\<close>"], ["proof (chain)\npicking this:\n  red G (monomial c t + f) f\n  (red G)\\<^sup>*\\<^sup>* f 0", "show ?case"], ["proof (prove)\nusing this:\n  red G (monomial c t + f) f\n  (red G)\\<^sup>*\\<^sup>* f 0\n\ngoal (1 subgoal):\n 1. (red G)\\<^sup>*\\<^sup>* (monomial c t + f) 0", "by simp"], ["proof (state)\nthis:\n  (red G)\\<^sup>*\\<^sup>* (monomial c t + f) 0\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (red G)\\<^sup>*\\<^sup>* f 0\n\ngoal:\nNo subgoals!", "qed"], ["", "context\n  fixes d\n  assumes dgrad: \"dickson_grading (d::'a \\<Rightarrow> nat)\"\nbegin"], ["", "context\n  fixes F m\n  assumes fin_comps: \"finite (component_of_term ` Keys F)\"\n    and F_sub: \"F \\<subseteq> dgrad_p_set d m\"\n    and F_monom: \"is_monomial_set (F::(_ \\<Rightarrow>\\<^sub>0 'b::field) set)\"\nbegin"], ["", "text \\<open>The proof of the following lemma could be simplified, analogous to homogeneous ideals.\\<close>"], ["", "lemma reduced_GB_subset_monic_dgrad_p_set: \"reduced_GB F \\<subseteq> monic ` F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. reduced_GB F \\<subseteq> monic ` F", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. reduced_GB F \\<subseteq> monic ` F", "from subset_refl"], ["proof (chain)\npicking this:\n  ?A \\<subseteq> ?A", "obtain F' where \"F' \\<subseteq> F - {0}\" and \"lt ` (F - {0}) = lt ` F'\" and \"inj_on lt F'\""], ["proof (prove)\nusing this:\n  ?A \\<subseteq> ?A\n\ngoal (1 subgoal):\n 1. (\\<And>F'.\n        \\<lbrakk>F' \\<subseteq> F - {0}; lt ` (F - {0}) = lt ` F';\n         inj_on lt F'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule subset_imageE_inj)"], ["proof (state)\nthis:\n  F' \\<subseteq> F - {0}\n  lt ` (F - {0}) = lt ` F'\n  inj_on lt F'\n\ngoal (1 subgoal):\n 1. reduced_GB F \\<subseteq> monic ` F", "define G where \"G = {f \\<in> F'. \\<forall>f'\\<in>F'. lt f' adds\\<^sub>t lt f \\<longrightarrow> f' = f}\""], ["proof (state)\nthis:\n  G =\n  {f \\<in> F'.\n   \\<forall>f'\\<in>F'. lt f' adds\\<^sub>t lt f \\<longrightarrow> f' = f}\n\ngoal (1 subgoal):\n 1. reduced_GB F \\<subseteq> monic ` F", "have \"G \\<subseteq> F'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G \\<subseteq> F'", "by (simp add: G_def)"], ["proof (state)\nthis:\n  G \\<subseteq> F'\n\ngoal (1 subgoal):\n 1. reduced_GB F \\<subseteq> monic ` F", "hence \"G \\<subseteq> F - {0}\""], ["proof (prove)\nusing this:\n  G \\<subseteq> F'\n\ngoal (1 subgoal):\n 1. G \\<subseteq> F - {0}", "using \\<open>F' \\<subseteq> F - {0}\\<close>"], ["proof (prove)\nusing this:\n  G \\<subseteq> F'\n  F' \\<subseteq> F - {0}\n\ngoal (1 subgoal):\n 1. G \\<subseteq> F - {0}", "by (rule subset_trans)"], ["proof (state)\nthis:\n  G \\<subseteq> F - {0}\n\ngoal (1 subgoal):\n 1. reduced_GB F \\<subseteq> monic ` F", "also"], ["proof (state)\nthis:\n  G \\<subseteq> F - {0}\n\ngoal (1 subgoal):\n 1. reduced_GB F \\<subseteq> monic ` F", "have \"\\<dots> \\<subseteq> F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. F - {0} \\<subseteq> F", "by blast"], ["proof (state)\nthis:\n  F - {0} \\<subseteq> F\n\ngoal (1 subgoal):\n 1. reduced_GB F \\<subseteq> monic ` F", "finally"], ["proof (chain)\npicking this:\n  G \\<subseteq> F", "have \"G \\<subseteq> F\""], ["proof (prove)\nusing this:\n  G \\<subseteq> F\n\ngoal (1 subgoal):\n 1. G \\<subseteq> F", "."], ["proof (state)\nthis:\n  G \\<subseteq> F\n\ngoal (1 subgoal):\n 1. reduced_GB F \\<subseteq> monic ` F", "have 1: thesis if \"f \\<in> F\" and \"f \\<noteq> 0\" and \"\\<And>g. g \\<in> G \\<Longrightarrow> lt g adds\\<^sub>t lt f \\<Longrightarrow> thesis\" for thesis f"], ["proof (prove)\ngoal (1 subgoal):\n 1. thesis", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. thesis", "let ?K = \"component_of_term ` Keys F\""], ["proof (state)\ngoal (1 subgoal):\n 1. thesis", "let ?A = \"{t. pp_of_term t \\<in> dgrad_set d m \\<and> component_of_term t \\<in> ?K}\""], ["proof (state)\ngoal (1 subgoal):\n 1. thesis", "let ?Q = \"{f' \\<in> F'. lt f' adds\\<^sub>t lt f}\""], ["proof (state)\ngoal (1 subgoal):\n 1. thesis", "from dgrad fin_comps"], ["proof (chain)\npicking this:\n  dickson_grading d\n  finite (component_of_term ` Keys F)", "have \"almost_full_on (adds\\<^sub>t) ?A\""], ["proof (prove)\nusing this:\n  dickson_grading d\n  finite (component_of_term ` Keys F)\n\ngoal (1 subgoal):\n 1. almost_full_on (adds\\<^sub>t)\n     {t. pp_of_term t \\<in> dgrad_set d m \\<and>\n         component_of_term t \\<in> component_of_term ` Keys F}", "by (rule Dickson_term)"], ["proof (state)\nthis:\n  almost_full_on (adds\\<^sub>t)\n   {t. pp_of_term t \\<in> dgrad_set d m \\<and>\n       component_of_term t \\<in> component_of_term ` Keys F}\n\ngoal (1 subgoal):\n 1. thesis", "moreover"], ["proof (state)\nthis:\n  almost_full_on (adds\\<^sub>t)\n   {t. pp_of_term t \\<in> dgrad_set d m \\<and>\n       component_of_term t \\<in> component_of_term ` Keys F}\n\ngoal (1 subgoal):\n 1. thesis", "have \"transp_on (adds\\<^sub>t) ?A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. transp_on (adds\\<^sub>t)\n     {t. pp_of_term t \\<in> dgrad_set d m \\<and>\n         component_of_term t \\<in> component_of_term ` Keys F}", "by (auto intro: transp_onI dest: adds_term_trans)"], ["proof (state)\nthis:\n  transp_on (adds\\<^sub>t)\n   {t. pp_of_term t \\<in> dgrad_set d m \\<and>\n       component_of_term t \\<in> component_of_term ` Keys F}\n\ngoal (1 subgoal):\n 1. thesis", "ultimately"], ["proof (chain)\npicking this:\n  almost_full_on (adds\\<^sub>t)\n   {t. pp_of_term t \\<in> dgrad_set d m \\<and>\n       component_of_term t \\<in> component_of_term ` Keys F}\n  transp_on (adds\\<^sub>t)\n   {t. pp_of_term t \\<in> dgrad_set d m \\<and>\n       component_of_term t \\<in> component_of_term ` Keys F}", "have \"wfp_on (strict (adds\\<^sub>t)) ?A\""], ["proof (prove)\nusing this:\n  almost_full_on (adds\\<^sub>t)\n   {t. pp_of_term t \\<in> dgrad_set d m \\<and>\n       component_of_term t \\<in> component_of_term ` Keys F}\n  transp_on (adds\\<^sub>t)\n   {t. pp_of_term t \\<in> dgrad_set d m \\<and>\n       component_of_term t \\<in> component_of_term ` Keys F}\n\ngoal (1 subgoal):\n 1. wfp_on (strict (adds\\<^sub>t))\n     {t. pp_of_term t \\<in> dgrad_set d m \\<and>\n         component_of_term t \\<in> component_of_term ` Keys F}", "by (rule af_trans_imp_wf)"], ["proof (state)\nthis:\n  wfp_on (strict (adds\\<^sub>t))\n   {t. pp_of_term t \\<in> dgrad_set d m \\<and>\n       component_of_term t \\<in> component_of_term ` Keys F}\n\ngoal (1 subgoal):\n 1. thesis", "moreover"], ["proof (state)\nthis:\n  wfp_on (strict (adds\\<^sub>t))\n   {t. pp_of_term t \\<in> dgrad_set d m \\<and>\n       component_of_term t \\<in> component_of_term ` Keys F}\n\ngoal (1 subgoal):\n 1. thesis", "have \"lt f \\<in> lt ` ?Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lt f \\<in> lt ` {f' \\<in> F'. lt f' adds\\<^sub>t lt f}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. lt f \\<in> lt ` {f' \\<in> F'. lt f' adds\\<^sub>t lt f}", "from that(1, 2)"], ["proof (chain)\npicking this:\n  f \\<in> F\n  f \\<noteq> 0", "have \"f \\<in> F - {0}\""], ["proof (prove)\nusing this:\n  f \\<in> F\n  f \\<noteq> 0\n\ngoal (1 subgoal):\n 1. f \\<in> F - {0}", "by simp"], ["proof (state)\nthis:\n  f \\<in> F - {0}\n\ngoal (1 subgoal):\n 1. lt f \\<in> lt ` {f' \\<in> F'. lt f' adds\\<^sub>t lt f}", "hence \"lt f \\<in> lt ` (F - {0})\""], ["proof (prove)\nusing this:\n  f \\<in> F - {0}\n\ngoal (1 subgoal):\n 1. lt f \\<in> lt ` (F - {0})", "by (rule imageI)"], ["proof (state)\nthis:\n  lt f \\<in> lt ` (F - {0})\n\ngoal (1 subgoal):\n 1. lt f \\<in> lt ` {f' \\<in> F'. lt f' adds\\<^sub>t lt f}", "also"], ["proof (state)\nthis:\n  lt f \\<in> lt ` (F - {0})\n\ngoal (1 subgoal):\n 1. lt f \\<in> lt ` {f' \\<in> F'. lt f' adds\\<^sub>t lt f}", "have \"\\<dots> = lt ` F'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lt ` (F - {0}) = lt ` F'", "by fact"], ["proof (state)\nthis:\n  lt ` (F - {0}) = lt ` F'\n\ngoal (1 subgoal):\n 1. lt f \\<in> lt ` {f' \\<in> F'. lt f' adds\\<^sub>t lt f}", "finally"], ["proof (chain)\npicking this:\n  lt f \\<in> lt ` F'", "have \"lt f \\<in> lt ` F'\""], ["proof (prove)\nusing this:\n  lt f \\<in> lt ` F'\n\ngoal (1 subgoal):\n 1. lt f \\<in> lt ` F'", "."], ["proof (state)\nthis:\n  lt f \\<in> lt ` F'\n\ngoal (1 subgoal):\n 1. lt f \\<in> lt ` {f' \\<in> F'. lt f' adds\\<^sub>t lt f}", "with adds_term_refl"], ["proof (chain)\npicking this:\n  ?v adds\\<^sub>t ?v\n  lt f \\<in> lt ` F'", "show ?thesis"], ["proof (prove)\nusing this:\n  ?v adds\\<^sub>t ?v\n  lt f \\<in> lt ` F'\n\ngoal (1 subgoal):\n 1. lt f \\<in> lt ` {f' \\<in> F'. lt f' adds\\<^sub>t lt f}", "by fastforce"], ["proof (state)\nthis:\n  lt f \\<in> lt ` {f' \\<in> F'. lt f' adds\\<^sub>t lt f}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  lt f \\<in> lt ` {f' \\<in> F'. lt f' adds\\<^sub>t lt f}\n\ngoal (1 subgoal):\n 1. thesis", "moreover"], ["proof (state)\nthis:\n  lt f \\<in> lt ` {f' \\<in> F'. lt f' adds\\<^sub>t lt f}\n\ngoal (1 subgoal):\n 1. thesis", "have \"lt ` ?Q \\<subseteq> ?A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lt ` {f' \\<in> F'. lt f' adds\\<^sub>t lt f}\n    \\<subseteq> {t. pp_of_term t \\<in> dgrad_set d m \\<and>\n                    component_of_term t \\<in> component_of_term ` Keys F}", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lt ` {f' \\<in> F'. lt f' adds\\<^sub>t lt f} \\<Longrightarrow>\n       x \\<in> {t. pp_of_term t \\<in> dgrad_set d m \\<and>\n                   component_of_term t \\<in> component_of_term ` Keys F}", "fix s"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lt ` {f' \\<in> F'. lt f' adds\\<^sub>t lt f} \\<Longrightarrow>\n       x \\<in> {t. pp_of_term t \\<in> dgrad_set d m \\<and>\n                   component_of_term t \\<in> component_of_term ` Keys F}", "assume \"s \\<in> lt ` ?Q\""], ["proof (state)\nthis:\n  s \\<in> lt ` {f' \\<in> F'. lt f' adds\\<^sub>t lt f}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lt ` {f' \\<in> F'. lt f' adds\\<^sub>t lt f} \\<Longrightarrow>\n       x \\<in> {t. pp_of_term t \\<in> dgrad_set d m \\<and>\n                   component_of_term t \\<in> component_of_term ` Keys F}", "then"], ["proof (chain)\npicking this:\n  s \\<in> lt ` {f' \\<in> F'. lt f' adds\\<^sub>t lt f}", "obtain q where \"q \\<in> ?Q\" and s: \"s = lt q\""], ["proof (prove)\nusing this:\n  s \\<in> lt ` {f' \\<in> F'. lt f' adds\\<^sub>t lt f}\n\ngoal (1 subgoal):\n 1. (\\<And>q.\n        \\<lbrakk>q \\<in> {f' \\<in> F'. lt f' adds\\<^sub>t lt f};\n         s = lt q\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  q \\<in> {f' \\<in> F'. lt f' adds\\<^sub>t lt f}\n  s = lt q\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lt ` {f' \\<in> F'. lt f' adds\\<^sub>t lt f} \\<Longrightarrow>\n       x \\<in> {t. pp_of_term t \\<in> dgrad_set d m \\<and>\n                   component_of_term t \\<in> component_of_term ` Keys F}", "from this(1)"], ["proof (chain)\npicking this:\n  q \\<in> {f' \\<in> F'. lt f' adds\\<^sub>t lt f}", "have \"q \\<in> F'\""], ["proof (prove)\nusing this:\n  q \\<in> {f' \\<in> F'. lt f' adds\\<^sub>t lt f}\n\ngoal (1 subgoal):\n 1. q \\<in> F'", "by simp"], ["proof (state)\nthis:\n  q \\<in> F'\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lt ` {f' \\<in> F'. lt f' adds\\<^sub>t lt f} \\<Longrightarrow>\n       x \\<in> {t. pp_of_term t \\<in> dgrad_set d m \\<and>\n                   component_of_term t \\<in> component_of_term ` Keys F}", "hence \"q \\<in> F - {0}\""], ["proof (prove)\nusing this:\n  q \\<in> F'\n\ngoal (1 subgoal):\n 1. q \\<in> F - {0}", "using \\<open>F' \\<subseteq> F - {0}\\<close>"], ["proof (prove)\nusing this:\n  q \\<in> F'\n  F' \\<subseteq> F - {0}\n\ngoal (1 subgoal):\n 1. q \\<in> F - {0}", ".."], ["proof (state)\nthis:\n  q \\<in> F - {0}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lt ` {f' \\<in> F'. lt f' adds\\<^sub>t lt f} \\<Longrightarrow>\n       x \\<in> {t. pp_of_term t \\<in> dgrad_set d m \\<and>\n                   component_of_term t \\<in> component_of_term ` Keys F}", "hence \"q \\<in> F\" and \"q \\<noteq> 0\""], ["proof (prove)\nusing this:\n  q \\<in> F - {0}\n\ngoal (1 subgoal):\n 1. q \\<in> F &&& q \\<noteq> 0", "by simp_all"], ["proof (state)\nthis:\n  q \\<in> F\n  q \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lt ` {f' \\<in> F'. lt f' adds\\<^sub>t lt f} \\<Longrightarrow>\n       x \\<in> {t. pp_of_term t \\<in> dgrad_set d m \\<and>\n                   component_of_term t \\<in> component_of_term ` Keys F}", "from this(1) F_sub"], ["proof (chain)\npicking this:\n  q \\<in> F\n  F \\<subseteq> dgrad_p_set d m", "have \"q \\<in> dgrad_p_set d m\""], ["proof (prove)\nusing this:\n  q \\<in> F\n  F \\<subseteq> dgrad_p_set d m\n\ngoal (1 subgoal):\n 1. q \\<in> dgrad_p_set d m", ".."], ["proof (state)\nthis:\n  q \\<in> dgrad_p_set d m\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lt ` {f' \\<in> F'. lt f' adds\\<^sub>t lt f} \\<Longrightarrow>\n       x \\<in> {t. pp_of_term t \\<in> dgrad_set d m \\<and>\n                   component_of_term t \\<in> component_of_term ` Keys F}", "from \\<open>q \\<noteq> 0\\<close>"], ["proof (chain)\npicking this:\n  q \\<noteq> 0", "have \"lt q \\<in> keys q\""], ["proof (prove)\nusing this:\n  q \\<noteq> 0\n\ngoal (1 subgoal):\n 1. lt q \\<in> keys q", "by (rule lt_in_keys)"], ["proof (state)\nthis:\n  lt q \\<in> keys q\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lt ` {f' \\<in> F'. lt f' adds\\<^sub>t lt f} \\<Longrightarrow>\n       x \\<in> {t. pp_of_term t \\<in> dgrad_set d m \\<and>\n                   component_of_term t \\<in> component_of_term ` Keys F}", "hence \"pp_of_term (lt q) \\<in> pp_of_term ` keys q\""], ["proof (prove)\nusing this:\n  lt q \\<in> keys q\n\ngoal (1 subgoal):\n 1. lp q \\<in> pp_of_term ` keys q", "by (rule imageI)"], ["proof (state)\nthis:\n  lp q \\<in> pp_of_term ` keys q\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lt ` {f' \\<in> F'. lt f' adds\\<^sub>t lt f} \\<Longrightarrow>\n       x \\<in> {t. pp_of_term t \\<in> dgrad_set d m \\<and>\n                   component_of_term t \\<in> component_of_term ` Keys F}", "also"], ["proof (state)\nthis:\n  lp q \\<in> pp_of_term ` keys q\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lt ` {f' \\<in> F'. lt f' adds\\<^sub>t lt f} \\<Longrightarrow>\n       x \\<in> {t. pp_of_term t \\<in> dgrad_set d m \\<and>\n                   component_of_term t \\<in> component_of_term ` Keys F}", "from \\<open>q \\<in> dgrad_p_set d m\\<close>"], ["proof (chain)\npicking this:\n  q \\<in> dgrad_p_set d m", "have \"\\<dots> \\<subseteq> dgrad_set d m\""], ["proof (prove)\nusing this:\n  q \\<in> dgrad_p_set d m\n\ngoal (1 subgoal):\n 1. pp_of_term ` keys q \\<subseteq> dgrad_set d m", "by (simp add: dgrad_p_set_def)"], ["proof (state)\nthis:\n  pp_of_term ` keys q \\<subseteq> dgrad_set d m\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lt ` {f' \\<in> F'. lt f' adds\\<^sub>t lt f} \\<Longrightarrow>\n       x \\<in> {t. pp_of_term t \\<in> dgrad_set d m \\<and>\n                   component_of_term t \\<in> component_of_term ` Keys F}", "finally"], ["proof (chain)\npicking this:\n  lp q \\<in> dgrad_set d m", "have 1: \"pp_of_term s \\<in> dgrad_set d m\""], ["proof (prove)\nusing this:\n  lp q \\<in> dgrad_set d m\n\ngoal (1 subgoal):\n 1. pp_of_term s \\<in> dgrad_set d m", "by (simp only: s)"], ["proof (state)\nthis:\n  pp_of_term s \\<in> dgrad_set d m\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lt ` {f' \\<in> F'. lt f' adds\\<^sub>t lt f} \\<Longrightarrow>\n       x \\<in> {t. pp_of_term t \\<in> dgrad_set d m \\<and>\n                   component_of_term t \\<in> component_of_term ` Keys F}", "from \\<open>lt q \\<in> keys q\\<close> \\<open>q \\<in> F\\<close>"], ["proof (chain)\npicking this:\n  lt q \\<in> keys q\n  q \\<in> F", "have \"lt q \\<in> Keys F\""], ["proof (prove)\nusing this:\n  lt q \\<in> keys q\n  q \\<in> F\n\ngoal (1 subgoal):\n 1. lt q \\<in> Keys F", "by (rule in_KeysI)"], ["proof (state)\nthis:\n  lt q \\<in> Keys F\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lt ` {f' \\<in> F'. lt f' adds\\<^sub>t lt f} \\<Longrightarrow>\n       x \\<in> {t. pp_of_term t \\<in> dgrad_set d m \\<and>\n                   component_of_term t \\<in> component_of_term ` Keys F}", "hence \"component_of_term s \\<in> ?K\""], ["proof (prove)\nusing this:\n  lt q \\<in> Keys F\n\ngoal (1 subgoal):\n 1. component_of_term s \\<in> component_of_term ` Keys F", "unfolding s"], ["proof (prove)\nusing this:\n  lt q \\<in> Keys F\n\ngoal (1 subgoal):\n 1. component_of_term (lt q) \\<in> component_of_term ` Keys F", "by (rule imageI)"], ["proof (state)\nthis:\n  component_of_term s \\<in> component_of_term ` Keys F\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lt ` {f' \\<in> F'. lt f' adds\\<^sub>t lt f} \\<Longrightarrow>\n       x \\<in> {t. pp_of_term t \\<in> dgrad_set d m \\<and>\n                   component_of_term t \\<in> component_of_term ` Keys F}", "with 1"], ["proof (chain)\npicking this:\n  pp_of_term s \\<in> dgrad_set d m\n  component_of_term s \\<in> component_of_term ` Keys F", "show \"s \\<in> ?A\""], ["proof (prove)\nusing this:\n  pp_of_term s \\<in> dgrad_set d m\n  component_of_term s \\<in> component_of_term ` Keys F\n\ngoal (1 subgoal):\n 1. s \\<in> {t. pp_of_term t \\<in> dgrad_set d m \\<and>\n                component_of_term t \\<in> component_of_term ` Keys F}", "by simp"], ["proof (state)\nthis:\n  s \\<in> {t. pp_of_term t \\<in> dgrad_set d m \\<and>\n              component_of_term t \\<in> component_of_term ` Keys F}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  lt ` {f' \\<in> F'. lt f' adds\\<^sub>t lt f}\n  \\<subseteq> {t. pp_of_term t \\<in> dgrad_set d m \\<and>\n                  component_of_term t \\<in> component_of_term ` Keys F}\n\ngoal (1 subgoal):\n 1. thesis", "ultimately"], ["proof (chain)\npicking this:\n  wfp_on (strict (adds\\<^sub>t))\n   {t. pp_of_term t \\<in> dgrad_set d m \\<and>\n       component_of_term t \\<in> component_of_term ` Keys F}\n  lt f \\<in> lt ` {f' \\<in> F'. lt f' adds\\<^sub>t lt f}\n  lt ` {f' \\<in> F'. lt f' adds\\<^sub>t lt f}\n  \\<subseteq> {t. pp_of_term t \\<in> dgrad_set d m \\<and>\n                  component_of_term t \\<in> component_of_term ` Keys F}", "obtain t where \"t \\<in> lt ` ?Q\" and t_min: \"\\<And>s. strict (adds\\<^sub>t) s t \\<Longrightarrow> s \\<notin> lt ` ?Q\""], ["proof (prove)\nusing this:\n  wfp_on (strict (adds\\<^sub>t))\n   {t. pp_of_term t \\<in> dgrad_set d m \\<and>\n       component_of_term t \\<in> component_of_term ` Keys F}\n  lt f \\<in> lt ` {f' \\<in> F'. lt f' adds\\<^sub>t lt f}\n  lt ` {f' \\<in> F'. lt f' adds\\<^sub>t lt f}\n  \\<subseteq> {t. pp_of_term t \\<in> dgrad_set d m \\<and>\n                  component_of_term t \\<in> component_of_term ` Keys F}\n\ngoal (1 subgoal):\n 1. (\\<And>t.\n        \\<lbrakk>t \\<in> lt ` {f' \\<in> F'. lt f' adds\\<^sub>t lt f};\n         \\<And>s.\n            strict (adds\\<^sub>t) s t \\<Longrightarrow>\n            s \\<notin> lt ` {f' \\<in> F'. lt f' adds\\<^sub>t lt f}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule wfp_onE_min) blast"], ["proof (state)\nthis:\n  t \\<in> lt ` {f' \\<in> F'. lt f' adds\\<^sub>t lt f}\n  strict (adds\\<^sub>t) ?s42 t \\<Longrightarrow>\n  ?s42 \\<notin> lt ` {f' \\<in> F'. lt f' adds\\<^sub>t lt f}\n\ngoal (1 subgoal):\n 1. thesis", "from this(1)"], ["proof (chain)\npicking this:\n  t \\<in> lt ` {f' \\<in> F'. lt f' adds\\<^sub>t lt f}", "obtain g where \"g \\<in> ?Q\" and t: \"t = lt g\""], ["proof (prove)\nusing this:\n  t \\<in> lt ` {f' \\<in> F'. lt f' adds\\<^sub>t lt f}\n\ngoal (1 subgoal):\n 1. (\\<And>g.\n        \\<lbrakk>g \\<in> {f' \\<in> F'. lt f' adds\\<^sub>t lt f};\n         t = lt g\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  g \\<in> {f' \\<in> F'. lt f' adds\\<^sub>t lt f}\n  t = lt g\n\ngoal (1 subgoal):\n 1. thesis", "from this(1)"], ["proof (chain)\npicking this:\n  g \\<in> {f' \\<in> F'. lt f' adds\\<^sub>t lt f}", "have \"g \\<in> F'\" and adds: \"lt g adds\\<^sub>t lt f\""], ["proof (prove)\nusing this:\n  g \\<in> {f' \\<in> F'. lt f' adds\\<^sub>t lt f}\n\ngoal (1 subgoal):\n 1. g \\<in> F' &&& lt g adds\\<^sub>t lt f", "by simp_all"], ["proof (state)\nthis:\n  g \\<in> F'\n  lt g adds\\<^sub>t lt f\n\ngoal (1 subgoal):\n 1. thesis", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. thesis", "proof (rule that)"], ["proof (state)\ngoal (2 subgoals):\n 1. ?g42 \\<in> G\n 2. lt ?g42 adds\\<^sub>t lt f", "{"], ["proof (state)\ngoal (2 subgoals):\n 1. ?g42 \\<in> G\n 2. lt ?g42 adds\\<^sub>t lt f", "fix f'"], ["proof (state)\ngoal (2 subgoals):\n 1. ?g42 \\<in> G\n 2. lt ?g42 adds\\<^sub>t lt f", "assume \"f' \\<in> F'\""], ["proof (state)\nthis:\n  f' \\<in> F'\n\ngoal (2 subgoals):\n 1. ?g42 \\<in> G\n 2. lt ?g42 adds\\<^sub>t lt f", "assume \"lt f' adds\\<^sub>t lt g\""], ["proof (state)\nthis:\n  lt f' adds\\<^sub>t lt g\n\ngoal (2 subgoals):\n 1. ?g42 \\<in> G\n 2. lt ?g42 adds\\<^sub>t lt f", "hence \"lt f' adds\\<^sub>t lt f\""], ["proof (prove)\nusing this:\n  lt f' adds\\<^sub>t lt g\n\ngoal (1 subgoal):\n 1. lt f' adds\\<^sub>t lt f", "using adds"], ["proof (prove)\nusing this:\n  lt f' adds\\<^sub>t lt g\n  lt g adds\\<^sub>t lt f\n\ngoal (1 subgoal):\n 1. lt f' adds\\<^sub>t lt f", "by (rule adds_term_trans)"], ["proof (state)\nthis:\n  lt f' adds\\<^sub>t lt f\n\ngoal (2 subgoals):\n 1. ?g42 \\<in> G\n 2. lt ?g42 adds\\<^sub>t lt f", "with \\<open>f' \\<in> F'\\<close>"], ["proof (chain)\npicking this:\n  f' \\<in> F'\n  lt f' adds\\<^sub>t lt f", "have \"f' \\<in> ?Q\""], ["proof (prove)\nusing this:\n  f' \\<in> F'\n  lt f' adds\\<^sub>t lt f\n\ngoal (1 subgoal):\n 1. f' \\<in> {f' \\<in> F'. lt f' adds\\<^sub>t lt f}", "by simp"], ["proof (state)\nthis:\n  f' \\<in> {f' \\<in> F'. lt f' adds\\<^sub>t lt f}\n\ngoal (2 subgoals):\n 1. ?g42 \\<in> G\n 2. lt ?g42 adds\\<^sub>t lt f", "hence \"lt f' \\<in> lt ` ?Q\""], ["proof (prove)\nusing this:\n  f' \\<in> {f' \\<in> F'. lt f' adds\\<^sub>t lt f}\n\ngoal (1 subgoal):\n 1. lt f' \\<in> lt ` {f' \\<in> F'. lt f' adds\\<^sub>t lt f}", "by (rule imageI)"], ["proof (state)\nthis:\n  lt f' \\<in> lt ` {f' \\<in> F'. lt f' adds\\<^sub>t lt f}\n\ngoal (2 subgoals):\n 1. ?g42 \\<in> G\n 2. lt ?g42 adds\\<^sub>t lt f", "with t_min"], ["proof (chain)\npicking this:\n  strict (adds\\<^sub>t) ?s42 t \\<Longrightarrow>\n  ?s42 \\<notin> lt ` {f' \\<in> F'. lt f' adds\\<^sub>t lt f}\n  lt f' \\<in> lt ` {f' \\<in> F'. lt f' adds\\<^sub>t lt f}", "have \"\\<not> strict (adds\\<^sub>t) (lt f') (lt g)\""], ["proof (prove)\nusing this:\n  strict (adds\\<^sub>t) ?s42 t \\<Longrightarrow>\n  ?s42 \\<notin> lt ` {f' \\<in> F'. lt f' adds\\<^sub>t lt f}\n  lt f' \\<in> lt ` {f' \\<in> F'. lt f' adds\\<^sub>t lt f}\n\ngoal (1 subgoal):\n 1. \\<not> strict (adds\\<^sub>t) (lt f') (lt g)", "unfolding t"], ["proof (prove)\nusing this:\n  strict (adds\\<^sub>t) ?s42 (lt g) \\<Longrightarrow>\n  ?s42 \\<notin> lt ` {f' \\<in> F'. lt f' adds\\<^sub>t lt f}\n  lt f' \\<in> lt ` {f' \\<in> F'. lt f' adds\\<^sub>t lt f}\n\ngoal (1 subgoal):\n 1. \\<not> strict (adds\\<^sub>t) (lt f') (lt g)", "by blast"], ["proof (state)\nthis:\n  \\<not> strict (adds\\<^sub>t) (lt f') (lt g)\n\ngoal (2 subgoals):\n 1. ?g42 \\<in> G\n 2. lt ?g42 adds\\<^sub>t lt f", "with \\<open>lt f' adds\\<^sub>t lt g\\<close>"], ["proof (chain)\npicking this:\n  lt f' adds\\<^sub>t lt g\n  \\<not> strict (adds\\<^sub>t) (lt f') (lt g)", "have \"lt g adds\\<^sub>t lt f'\""], ["proof (prove)\nusing this:\n  lt f' adds\\<^sub>t lt g\n  \\<not> strict (adds\\<^sub>t) (lt f') (lt g)\n\ngoal (1 subgoal):\n 1. lt g adds\\<^sub>t lt f'", "by blast"], ["proof (state)\nthis:\n  lt g adds\\<^sub>t lt f'\n\ngoal (2 subgoals):\n 1. ?g42 \\<in> G\n 2. lt ?g42 adds\\<^sub>t lt f", "with \\<open>lt f' adds\\<^sub>t lt g\\<close>"], ["proof (chain)\npicking this:\n  lt f' adds\\<^sub>t lt g\n  lt g adds\\<^sub>t lt f'", "have \"lt f' = lt g\""], ["proof (prove)\nusing this:\n  lt f' adds\\<^sub>t lt g\n  lt g adds\\<^sub>t lt f'\n\ngoal (1 subgoal):\n 1. lt f' = lt g", "by (rule adds_term_antisym)"], ["proof (state)\nthis:\n  lt f' = lt g\n\ngoal (2 subgoals):\n 1. ?g42 \\<in> G\n 2. lt ?g42 adds\\<^sub>t lt f", "with \\<open>inj_on lt F'\\<close>"], ["proof (chain)\npicking this:\n  inj_on lt F'\n  lt f' = lt g", "have \"f' = g\""], ["proof (prove)\nusing this:\n  inj_on lt F'\n  lt f' = lt g\n\ngoal (1 subgoal):\n 1. f' = g", "using \\<open>f' \\<in> F'\\<close> \\<open>g \\<in> F'\\<close>"], ["proof (prove)\nusing this:\n  inj_on lt F'\n  lt f' = lt g\n  f' \\<in> F'\n  g \\<in> F'\n\ngoal (1 subgoal):\n 1. f' = g", "by (rule inj_onD)"], ["proof (state)\nthis:\n  f' = g\n\ngoal (2 subgoals):\n 1. ?g42 \\<in> G\n 2. lt ?g42 adds\\<^sub>t lt f", "}"], ["proof (state)\nthis:\n  \\<lbrakk>?f'44 \\<in> F'; lt ?f'44 adds\\<^sub>t lt g\\<rbrakk>\n  \\<Longrightarrow> ?f'44 = g\n\ngoal (2 subgoals):\n 1. ?g42 \\<in> G\n 2. lt ?g42 adds\\<^sub>t lt f", "with \\<open>g \\<in> F'\\<close>"], ["proof (chain)\npicking this:\n  g \\<in> F'\n  \\<lbrakk>?f'44 \\<in> F'; lt ?f'44 adds\\<^sub>t lt g\\<rbrakk>\n  \\<Longrightarrow> ?f'44 = g", "show \"g \\<in> G\""], ["proof (prove)\nusing this:\n  g \\<in> F'\n  \\<lbrakk>?f'44 \\<in> F'; lt ?f'44 adds\\<^sub>t lt g\\<rbrakk>\n  \\<Longrightarrow> ?f'44 = g\n\ngoal (1 subgoal):\n 1. g \\<in> G", "by (simp add: G_def)"], ["proof (state)\nthis:\n  g \\<in> G\n\ngoal (1 subgoal):\n 1. lt g adds\\<^sub>t lt f", "qed fact"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<lbrakk>?f42 \\<in> F; ?f42 \\<noteq> 0;\n   \\<And>g.\n      \\<lbrakk>g \\<in> G; lt g adds\\<^sub>t lt ?f42\\<rbrakk>\n      \\<Longrightarrow> ?thesis42\\<rbrakk>\n  \\<Longrightarrow> ?thesis42\n\ngoal (1 subgoal):\n 1. reduced_GB F \\<subseteq> monic ` F", "have 2: \"is_red G q\" if \"q \\<in> pmdl F\" and \"q \\<noteq> 0\" for q"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_red G q", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. is_red G q", "from that(2)"], ["proof (chain)\npicking this:\n  q \\<noteq> 0", "have \"keys q \\<noteq> {}\""], ["proof (prove)\nusing this:\n  q \\<noteq> 0\n\ngoal (1 subgoal):\n 1. keys q \\<noteq> {}", "by simp"], ["proof (state)\nthis:\n  keys q \\<noteq> {}\n\ngoal (1 subgoal):\n 1. is_red G q", "then"], ["proof (chain)\npicking this:\n  keys q \\<noteq> {}", "obtain t where \"t \\<in> keys q\""], ["proof (prove)\nusing this:\n  keys q \\<noteq> {}\n\ngoal (1 subgoal):\n 1. (\\<And>t. t \\<in> keys q \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  t \\<in> keys q\n\ngoal (1 subgoal):\n 1. is_red G q", "with F_monom that(1)"], ["proof (chain)\npicking this:\n  is_monomial_set F\n  q \\<in> pmdl F\n  t \\<in> keys q", "obtain f where \"f \\<in> F\" and \"f \\<noteq> 0\" and *: \"lt f adds\\<^sub>t t\""], ["proof (prove)\nusing this:\n  is_monomial_set F\n  q \\<in> pmdl F\n  t \\<in> keys q\n\ngoal (1 subgoal):\n 1. (\\<And>f.\n        \\<lbrakk>f \\<in> F; f \\<noteq> 0; lt f adds\\<^sub>t t\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule keys_monomial_pmdl)"], ["proof (state)\nthis:\n  f \\<in> F\n  f \\<noteq> 0\n  lt f adds\\<^sub>t t\n\ngoal (1 subgoal):\n 1. is_red G q", "from this(1, 2)"], ["proof (chain)\npicking this:\n  f \\<in> F\n  f \\<noteq> 0", "obtain g where \"g \\<in> G\" and \"lt g adds\\<^sub>t lt f\""], ["proof (prove)\nusing this:\n  f \\<in> F\n  f \\<noteq> 0\n\ngoal (1 subgoal):\n 1. (\\<And>g.\n        \\<lbrakk>g \\<in> G; lt g adds\\<^sub>t lt f\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule 1)"], ["proof (state)\nthis:\n  g \\<in> G\n  lt g adds\\<^sub>t lt f\n\ngoal (1 subgoal):\n 1. is_red G q", "from this(2)"], ["proof (chain)\npicking this:\n  lt g adds\\<^sub>t lt f", "have **: \"lt g adds\\<^sub>t t\""], ["proof (prove)\nusing this:\n  lt g adds\\<^sub>t lt f\n\ngoal (1 subgoal):\n 1. lt g adds\\<^sub>t t", "using *"], ["proof (prove)\nusing this:\n  lt g adds\\<^sub>t lt f\n  lt f adds\\<^sub>t t\n\ngoal (1 subgoal):\n 1. lt g adds\\<^sub>t t", "by (rule adds_term_trans)"], ["proof (state)\nthis:\n  lt g adds\\<^sub>t t\n\ngoal (1 subgoal):\n 1. is_red G q", "from \\<open>g \\<in> G\\<close> \\<open>G \\<subseteq> F - {0}\\<close>"], ["proof (chain)\npicking this:\n  g \\<in> G\n  G \\<subseteq> F - {0}", "have \"g \\<in> F - {0}\""], ["proof (prove)\nusing this:\n  g \\<in> G\n  G \\<subseteq> F - {0}\n\ngoal (1 subgoal):\n 1. g \\<in> F - {0}", ".."], ["proof (state)\nthis:\n  g \\<in> F - {0}\n\ngoal (1 subgoal):\n 1. is_red G q", "hence \"g \\<noteq> 0\""], ["proof (prove)\nusing this:\n  g \\<in> F - {0}\n\ngoal (1 subgoal):\n 1. g \\<noteq> 0", "by simp"], ["proof (state)\nthis:\n  g \\<noteq> 0\n\ngoal (1 subgoal):\n 1. is_red G q", "with \\<open>g \\<in> G\\<close>"], ["proof (chain)\npicking this:\n  g \\<in> G\n  g \\<noteq> 0", "show ?thesis"], ["proof (prove)\nusing this:\n  g \\<in> G\n  g \\<noteq> 0\n\ngoal (1 subgoal):\n 1. is_red G q", "using \\<open>t \\<in> keys q\\<close> **"], ["proof (prove)\nusing this:\n  g \\<in> G\n  g \\<noteq> 0\n  t \\<in> keys q\n  lt g adds\\<^sub>t t\n\ngoal (1 subgoal):\n 1. is_red G q", "by (rule is_red_addsI)"], ["proof (state)\nthis:\n  is_red G q\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<lbrakk>?q42 \\<in> pmdl F; ?q42 \\<noteq> 0\\<rbrakk>\n  \\<Longrightarrow> is_red G ?q42\n\ngoal (1 subgoal):\n 1. reduced_GB F \\<subseteq> monic ` F", "from \\<open>G \\<subseteq> F - {0}\\<close>"], ["proof (chain)\npicking this:\n  G \\<subseteq> F - {0}", "have \"G \\<subseteq> F\""], ["proof (prove)\nusing this:\n  G \\<subseteq> F - {0}\n\ngoal (1 subgoal):\n 1. G \\<subseteq> F", "by blast"], ["proof (state)\nthis:\n  G \\<subseteq> F\n\ngoal (1 subgoal):\n 1. reduced_GB F \\<subseteq> monic ` F", "hence \"pmdl G \\<subseteq> pmdl F\""], ["proof (prove)\nusing this:\n  G \\<subseteq> F\n\ngoal (1 subgoal):\n 1. pmdl G \\<subseteq> pmdl F", "by (rule pmdl.span_mono)"], ["proof (state)\nthis:\n  pmdl G \\<subseteq> pmdl F\n\ngoal (1 subgoal):\n 1. reduced_GB F \\<subseteq> monic ` F", "note dgrad fin_comps F_sub"], ["proof (state)\nthis:\n  dickson_grading d\n  finite (component_of_term ` Keys F)\n  F \\<subseteq> dgrad_p_set d m\n\ngoal (1 subgoal):\n 1. reduced_GB F \\<subseteq> monic ` F", "moreover"], ["proof (state)\nthis:\n  dickson_grading d\n  finite (component_of_term ` Keys F)\n  F \\<subseteq> dgrad_p_set d m\n\ngoal (1 subgoal):\n 1. reduced_GB F \\<subseteq> monic ` F", "have \"is_reduced_GB (monic ` G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_reduced_GB (monic ` G)", "unfolding is_reduced_GB_def GB_image_monic"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_Groebner_basis G \\<and>\n    is_auto_reduced (monic ` G) \\<and>\n    is_monic_set (monic ` G) \\<and> 0 \\<notin> monic ` G", "proof (intro conjI image_monic_is_auto_reduced image_monic_is_monic_set)"], ["proof (state)\ngoal (3 subgoals):\n 1. is_Groebner_basis G\n 2. is_auto_reduced G\n 3. 0 \\<notin> monic ` G", "from dgrad"], ["proof (chain)\npicking this:\n  dickson_grading d", "show \"is_Groebner_basis G\""], ["proof (prove)\nusing this:\n  dickson_grading d\n\ngoal (1 subgoal):\n 1. is_Groebner_basis G", "proof (rule isGB_I_is_red)"], ["proof (state)\ngoal (2 subgoals):\n 1. G \\<subseteq> dgrad_p_set d ?m\n 2. \\<And>f.\n       \\<lbrakk>f \\<in> pmdl G; f \\<in> dgrad_p_set d ?m;\n        f \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> is_red G f", "from \\<open>G \\<subseteq> F\\<close> F_sub"], ["proof (chain)\npicking this:\n  G \\<subseteq> F\n  F \\<subseteq> dgrad_p_set d m", "show \"G \\<subseteq> dgrad_p_set d m\""], ["proof (prove)\nusing this:\n  G \\<subseteq> F\n  F \\<subseteq> dgrad_p_set d m\n\ngoal (1 subgoal):\n 1. G \\<subseteq> dgrad_p_set d m", "by (rule subset_trans)"], ["proof (state)\nthis:\n  G \\<subseteq> dgrad_p_set d m\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f \\<in> pmdl G; f \\<in> dgrad_p_set d m;\n        f \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> is_red G f", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f \\<in> pmdl G; f \\<in> dgrad_p_set d m;\n        f \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> is_red G f", "fix f"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f \\<in> pmdl G; f \\<in> dgrad_p_set d m;\n        f \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> is_red G f", "assume \"f \\<in> pmdl G\""], ["proof (state)\nthis:\n  f \\<in> pmdl G\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f \\<in> pmdl G; f \\<in> dgrad_p_set d m;\n        f \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> is_red G f", "hence \"f \\<in> pmdl F\""], ["proof (prove)\nusing this:\n  f \\<in> pmdl G\n\ngoal (1 subgoal):\n 1. f \\<in> pmdl F", "using \\<open>pmdl G \\<subseteq> pmdl F\\<close>"], ["proof (prove)\nusing this:\n  f \\<in> pmdl G\n  pmdl G \\<subseteq> pmdl F\n\ngoal (1 subgoal):\n 1. f \\<in> pmdl F", ".."], ["proof (state)\nthis:\n  f \\<in> pmdl F\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f \\<in> pmdl G; f \\<in> dgrad_p_set d m;\n        f \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> is_red G f", "moreover"], ["proof (state)\nthis:\n  f \\<in> pmdl F\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f \\<in> pmdl G; f \\<in> dgrad_p_set d m;\n        f \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> is_red G f", "assume \"f \\<noteq> 0\""], ["proof (state)\nthis:\n  f \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f \\<in> pmdl G; f \\<in> dgrad_p_set d m;\n        f \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> is_red G f", "ultimately"], ["proof (chain)\npicking this:\n  f \\<in> pmdl F\n  f \\<noteq> 0", "show \"is_red G f\""], ["proof (prove)\nusing this:\n  f \\<in> pmdl F\n  f \\<noteq> 0\n\ngoal (1 subgoal):\n 1. is_red G f", "by (rule 2)"], ["proof (state)\nthis:\n  is_red G f\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  is_Groebner_basis G\n\ngoal (2 subgoals):\n 1. is_auto_reduced G\n 2. 0 \\<notin> monic ` G", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. is_auto_reduced G\n 2. 0 \\<notin> monic ` G", "show \"is_auto_reduced G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_auto_reduced G", "unfolding is_auto_reduced_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>b\\<in>G. \\<not> is_red (G - {b}) b", "proof (intro ballI notI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>b \\<in> G; is_red (G - {b}) b\\<rbrakk>\n       \\<Longrightarrow> False", "fix g"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>b \\<in> G; is_red (G - {b}) b\\<rbrakk>\n       \\<Longrightarrow> False", "assume \"g \\<in> G\""], ["proof (state)\nthis:\n  g \\<in> G\n\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>b \\<in> G; is_red (G - {b}) b\\<rbrakk>\n       \\<Longrightarrow> False", "hence \"g \\<in> F\""], ["proof (prove)\nusing this:\n  g \\<in> G\n\ngoal (1 subgoal):\n 1. g \\<in> F", "using \\<open>G \\<subseteq> F\\<close>"], ["proof (prove)\nusing this:\n  g \\<in> G\n  G \\<subseteq> F\n\ngoal (1 subgoal):\n 1. g \\<in> F", ".."], ["proof (state)\nthis:\n  g \\<in> F\n\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>b \\<in> G; is_red (G - {b}) b\\<rbrakk>\n       \\<Longrightarrow> False", "with F_monom"], ["proof (chain)\npicking this:\n  is_monomial_set F\n  g \\<in> F", "have \"is_monomial g\""], ["proof (prove)\nusing this:\n  is_monomial_set F\n  g \\<in> F\n\ngoal (1 subgoal):\n 1. is_monomial g", "by (rule is_monomial_setD)"], ["proof (state)\nthis:\n  is_monomial g\n\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>b \\<in> G; is_red (G - {b}) b\\<rbrakk>\n       \\<Longrightarrow> False", "hence keys_g: \"keys g = {lt g}\""], ["proof (prove)\nusing this:\n  is_monomial g\n\ngoal (1 subgoal):\n 1. keys g = {lt g}", "by (rule keys_monomial)"], ["proof (state)\nthis:\n  keys g = {lt g}\n\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>b \\<in> G; is_red (G - {b}) b\\<rbrakk>\n       \\<Longrightarrow> False", "assume \"is_red (G - {g}) g\""], ["proof (state)\nthis:\n  is_red (G - {g}) g\n\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>b \\<in> G; is_red (G - {b}) b\\<rbrakk>\n       \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  is_red (G - {g}) g", "obtain g' t where \"g' \\<in> G - {g}\" and \"t \\<in> keys g\" and adds: \"lt g' adds\\<^sub>t t\""], ["proof (prove)\nusing this:\n  is_red (G - {g}) g\n\ngoal (1 subgoal):\n 1. (\\<And>g' t.\n        \\<lbrakk>g' \\<in> G - {g}; t \\<in> keys g;\n         lt g' adds\\<^sub>t t\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule is_red_addsE)"], ["proof (state)\nthis:\n  g' \\<in> G - {g}\n  t \\<in> keys g\n  lt g' adds\\<^sub>t t\n\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>b \\<in> G; is_red (G - {b}) b\\<rbrakk>\n       \\<Longrightarrow> False", "from this(1)"], ["proof (chain)\npicking this:\n  g' \\<in> G - {g}", "have \"g' \\<in> F'\" and \"g' \\<noteq> g\""], ["proof (prove)\nusing this:\n  g' \\<in> G - {g}\n\ngoal (1 subgoal):\n 1. g' \\<in> F' &&& g' \\<noteq> g", "by (simp_all add: G_def)"], ["proof (state)\nthis:\n  g' \\<in> F'\n  g' \\<noteq> g\n\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>b \\<in> G; is_red (G - {b}) b\\<rbrakk>\n       \\<Longrightarrow> False", "from \\<open>t \\<in> keys g\\<close>"], ["proof (chain)\npicking this:\n  t \\<in> keys g", "have \"t = lt g\""], ["proof (prove)\nusing this:\n  t \\<in> keys g\n\ngoal (1 subgoal):\n 1. t = lt g", "by (simp add: keys_g)"], ["proof (state)\nthis:\n  t = lt g\n\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>b \\<in> G; is_red (G - {b}) b\\<rbrakk>\n       \\<Longrightarrow> False", "with \\<open>g \\<in> G\\<close> \\<open>g' \\<in> F'\\<close> adds"], ["proof (chain)\npicking this:\n  g \\<in> G\n  g' \\<in> F'\n  lt g' adds\\<^sub>t t\n  t = lt g", "have \"g' = g\""], ["proof (prove)\nusing this:\n  g \\<in> G\n  g' \\<in> F'\n  lt g' adds\\<^sub>t t\n  t = lt g\n\ngoal (1 subgoal):\n 1. g' = g", "by (simp add: G_def)"], ["proof (state)\nthis:\n  g' = g\n\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>b \\<in> G; is_red (G - {b}) b\\<rbrakk>\n       \\<Longrightarrow> False", "with \\<open>g' \\<noteq> g\\<close>"], ["proof (chain)\npicking this:\n  g' \\<noteq> g\n  g' = g", "show False"], ["proof (prove)\nusing this:\n  g' \\<noteq> g\n  g' = g\n\ngoal (1 subgoal):\n 1. False", ".."], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  is_auto_reduced G\n\ngoal (1 subgoal):\n 1. 0 \\<notin> monic ` G", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. 0 \\<notin> monic ` G", "show \"0 \\<notin> monic ` G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<notin> monic ` G", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. 0 \\<in> monic ` G \\<Longrightarrow> False", "assume \"0 \\<in> monic ` G\""], ["proof (state)\nthis:\n  0 \\<in> monic ` G\n\ngoal (1 subgoal):\n 1. 0 \\<in> monic ` G \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  0 \\<in> monic ` G", "obtain g where \"0 = monic g\" and \"g \\<in> G\""], ["proof (prove)\nusing this:\n  0 \\<in> monic ` G\n\ngoal (1 subgoal):\n 1. (\\<And>g.\n        \\<lbrakk>0 = monic g; g \\<in> G\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  0 = monic g\n  g \\<in> G\n\ngoal (1 subgoal):\n 1. 0 \\<in> monic ` G \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  0 = monic g\n  g \\<in> G\n\ngoal (1 subgoal):\n 1. 0 \\<in> monic ` G \\<Longrightarrow> False", "from this(2) \\<open>G \\<subseteq> F - {0}\\<close>"], ["proof (chain)\npicking this:\n  g \\<in> G\n  G \\<subseteq> F - {0}", "have \"g \\<noteq> 0\""], ["proof (prove)\nusing this:\n  g \\<in> G\n  G \\<subseteq> F - {0}\n\ngoal (1 subgoal):\n 1. g \\<noteq> 0", "by blast"], ["proof (state)\nthis:\n  g \\<noteq> 0\n\ngoal (1 subgoal):\n 1. 0 \\<in> monic ` G \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  0 = monic g\n  g \\<in> G\n  g \\<noteq> 0", "show False"], ["proof (prove)\nusing this:\n  0 = monic g\n  g \\<in> G\n  g \\<noteq> 0\n\ngoal (1 subgoal):\n 1. False", "by (simp add: monic_0_iff)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  0 \\<notin> monic ` G\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  is_reduced_GB (monic ` G)\n\ngoal (1 subgoal):\n 1. reduced_GB F \\<subseteq> monic ` F", "moreover"], ["proof (state)\nthis:\n  is_reduced_GB (monic ` G)\n\ngoal (1 subgoal):\n 1. reduced_GB F \\<subseteq> monic ` F", "have \"pmdl (monic ` G) = pmdl F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pmdl (monic ` G) = pmdl F", "unfolding pmdl_image_monic"], ["proof (prove)\ngoal (1 subgoal):\n 1. pmdl G = pmdl F", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. pmdl G \\<subseteq> pmdl F\n 2. pmdl F \\<subseteq> pmdl G", "show \"pmdl F \\<subseteq> pmdl G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pmdl F \\<subseteq> pmdl G", "proof (rule pmdl.span_subset_spanI, rule)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> F \\<Longrightarrow> x \\<in> pmdl G", "fix f"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> F \\<Longrightarrow> x \\<in> pmdl G", "assume \"f \\<in> F\""], ["proof (state)\nthis:\n  f \\<in> F\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> F \\<Longrightarrow> x \\<in> pmdl G", "hence \"f \\<in> pmdl F\""], ["proof (prove)\nusing this:\n  f \\<in> F\n\ngoal (1 subgoal):\n 1. f \\<in> pmdl F", "by (rule pmdl.span_base)"], ["proof (state)\nthis:\n  f \\<in> pmdl F\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> F \\<Longrightarrow> x \\<in> pmdl G", "note dgrad"], ["proof (state)\nthis:\n  dickson_grading d\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> F \\<Longrightarrow> x \\<in> pmdl G", "moreover"], ["proof (state)\nthis:\n  dickson_grading d\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> F \\<Longrightarrow> x \\<in> pmdl G", "from \\<open>G \\<subseteq> F\\<close> F_sub"], ["proof (chain)\npicking this:\n  G \\<subseteq> F\n  F \\<subseteq> dgrad_p_set d m", "have \"G \\<subseteq> dgrad_p_set d m\""], ["proof (prove)\nusing this:\n  G \\<subseteq> F\n  F \\<subseteq> dgrad_p_set d m\n\ngoal (1 subgoal):\n 1. G \\<subseteq> dgrad_p_set d m", "by (rule subset_trans)"], ["proof (state)\nthis:\n  G \\<subseteq> dgrad_p_set d m\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> F \\<Longrightarrow> x \\<in> pmdl G", "moreover"], ["proof (state)\nthis:\n  G \\<subseteq> dgrad_p_set d m\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> F \\<Longrightarrow> x \\<in> pmdl G", "note \\<open>pmdl G \\<subseteq> pmdl F\\<close> 2 \\<open>f \\<in> pmdl F\\<close>"], ["proof (state)\nthis:\n  pmdl G \\<subseteq> pmdl F\n  \\<lbrakk>?q42 \\<in> pmdl F; ?q42 \\<noteq> 0\\<rbrakk>\n  \\<Longrightarrow> is_red G ?q42\n  f \\<in> pmdl F\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> F \\<Longrightarrow> x \\<in> pmdl G", "moreover"], ["proof (state)\nthis:\n  pmdl G \\<subseteq> pmdl F\n  \\<lbrakk>?q42 \\<in> pmdl F; ?q42 \\<noteq> 0\\<rbrakk>\n  \\<Longrightarrow> is_red G ?q42\n  f \\<in> pmdl F\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> F \\<Longrightarrow> x \\<in> pmdl G", "from \\<open>f \\<in> F\\<close> F_sub"], ["proof (chain)\npicking this:\n  f \\<in> F\n  F \\<subseteq> dgrad_p_set d m", "have \"f \\<in> dgrad_p_set d m\""], ["proof (prove)\nusing this:\n  f \\<in> F\n  F \\<subseteq> dgrad_p_set d m\n\ngoal (1 subgoal):\n 1. f \\<in> dgrad_p_set d m", ".."], ["proof (state)\nthis:\n  f \\<in> dgrad_p_set d m\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> F \\<Longrightarrow> x \\<in> pmdl G", "ultimately"], ["proof (chain)\npicking this:\n  dickson_grading d\n  G \\<subseteq> dgrad_p_set d m\n  pmdl G \\<subseteq> pmdl F\n  \\<lbrakk>?q42 \\<in> pmdl F; ?q42 \\<noteq> 0\\<rbrakk>\n  \\<Longrightarrow> is_red G ?q42\n  f \\<in> pmdl F\n  f \\<in> dgrad_p_set d m", "have \"(red G)\\<^sup>*\\<^sup>* f 0\""], ["proof (prove)\nusing this:\n  dickson_grading d\n  G \\<subseteq> dgrad_p_set d m\n  pmdl G \\<subseteq> pmdl F\n  \\<lbrakk>?q42 \\<in> pmdl F; ?q42 \\<noteq> 0\\<rbrakk>\n  \\<Longrightarrow> is_red G ?q42\n  f \\<in> pmdl F\n  f \\<in> dgrad_p_set d m\n\ngoal (1 subgoal):\n 1. (red G)\\<^sup>*\\<^sup>* f 0", "by (rule is_red_implies_0_red_dgrad_p_set)"], ["proof (state)\nthis:\n  (red G)\\<^sup>*\\<^sup>* f 0\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> F \\<Longrightarrow> x \\<in> pmdl G", "thus \"f \\<in> pmdl G\""], ["proof (prove)\nusing this:\n  (red G)\\<^sup>*\\<^sup>* f 0\n\ngoal (1 subgoal):\n 1. f \\<in> pmdl G", "by (rule red_rtranclp_0_in_pmdl)"], ["proof (state)\nthis:\n  f \\<in> pmdl G\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  pmdl F \\<subseteq> pmdl G\n\ngoal (1 subgoal):\n 1. pmdl G \\<subseteq> pmdl F", "qed fact"], ["proof (state)\nthis:\n  pmdl (monic ` G) = pmdl F\n\ngoal (1 subgoal):\n 1. reduced_GB F \\<subseteq> monic ` F", "ultimately"], ["proof (chain)\npicking this:\n  dickson_grading d\n  finite (component_of_term ` Keys F)\n  F \\<subseteq> dgrad_p_set d m\n  is_reduced_GB (monic ` G)\n  pmdl (monic ` G) = pmdl F", "have \"reduced_GB F = monic ` G\""], ["proof (prove)\nusing this:\n  dickson_grading d\n  finite (component_of_term ` Keys F)\n  F \\<subseteq> dgrad_p_set d m\n  is_reduced_GB (monic ` G)\n  pmdl (monic ` G) = pmdl F\n\ngoal (1 subgoal):\n 1. reduced_GB F = monic ` G", "by (rule reduced_GB_unique_dgrad_p_set)"], ["proof (state)\nthis:\n  reduced_GB F = monic ` G\n\ngoal (1 subgoal):\n 1. reduced_GB F \\<subseteq> monic ` F", "also"], ["proof (state)\nthis:\n  reduced_GB F = monic ` G\n\ngoal (1 subgoal):\n 1. reduced_GB F \\<subseteq> monic ` F", "from \\<open>G \\<subseteq> F\\<close>"], ["proof (chain)\npicking this:\n  G \\<subseteq> F", "have \"\\<dots> \\<subseteq> monic ` F\""], ["proof (prove)\nusing this:\n  G \\<subseteq> F\n\ngoal (1 subgoal):\n 1. monic ` G \\<subseteq> monic ` F", "by (rule image_mono)"], ["proof (state)\nthis:\n  monic ` G \\<subseteq> monic ` F\n\ngoal (1 subgoal):\n 1. reduced_GB F \\<subseteq> monic ` F", "finally"], ["proof (chain)\npicking this:\n  reduced_GB F \\<subseteq> monic ` F", "show ?thesis"], ["proof (prove)\nusing this:\n  reduced_GB F \\<subseteq> monic ` F\n\ngoal (1 subgoal):\n 1. reduced_GB F \\<subseteq> monic ` F", "."], ["proof (state)\nthis:\n  reduced_GB F \\<subseteq> monic ` F\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary reduced_GB_is_monomial_set_dgrad_p_set: \"is_monomial_set (reduced_GB F)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_monomial_set (reduced_GB F)", "proof (rule is_monomial_setI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p. p \\<in> reduced_GB F \\<Longrightarrow> is_monomial p", "fix g"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p. p \\<in> reduced_GB F \\<Longrightarrow> is_monomial p", "assume \"g \\<in> reduced_GB F\""], ["proof (state)\nthis:\n  g \\<in> reduced_GB F\n\ngoal (1 subgoal):\n 1. \\<And>p. p \\<in> reduced_GB F \\<Longrightarrow> is_monomial p", "also"], ["proof (state)\nthis:\n  g \\<in> reduced_GB F\n\ngoal (1 subgoal):\n 1. \\<And>p. p \\<in> reduced_GB F \\<Longrightarrow> is_monomial p", "have \"\\<dots> \\<subseteq> monic ` F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. reduced_GB F \\<subseteq> monic ` F", "by (fact reduced_GB_subset_monic_dgrad_p_set)"], ["proof (state)\nthis:\n  reduced_GB F \\<subseteq> monic ` F\n\ngoal (1 subgoal):\n 1. \\<And>p. p \\<in> reduced_GB F \\<Longrightarrow> is_monomial p", "finally"], ["proof (chain)\npicking this:\n  g \\<in> monic ` F", "obtain f where \"f \\<in> F\" and g: \"g = monic f\""], ["proof (prove)\nusing this:\n  g \\<in> monic ` F\n\ngoal (1 subgoal):\n 1. (\\<And>f.\n        \\<lbrakk>f \\<in> F; g = monic f\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  f \\<in> F\n  g = monic f\n\ngoal (1 subgoal):\n 1. \\<And>p. p \\<in> reduced_GB F \\<Longrightarrow> is_monomial p", "from F_monom this(1)"], ["proof (chain)\npicking this:\n  is_monomial_set F\n  f \\<in> F", "have \"is_monomial f\""], ["proof (prove)\nusing this:\n  is_monomial_set F\n  f \\<in> F\n\ngoal (1 subgoal):\n 1. is_monomial f", "by (rule is_monomial_setD)"], ["proof (state)\nthis:\n  is_monomial f\n\ngoal (1 subgoal):\n 1. \\<And>p. p \\<in> reduced_GB F \\<Longrightarrow> is_monomial p", "hence \"card (keys f) = 1\""], ["proof (prove)\nusing this:\n  is_monomial f\n\ngoal (1 subgoal):\n 1. card (keys f) = 1", "by (simp only: is_monomial_def)"], ["proof (state)\nthis:\n  card (keys f) = 1\n\ngoal (1 subgoal):\n 1. \\<And>p. p \\<in> reduced_GB F \\<Longrightarrow> is_monomial p", "hence \"f \\<noteq> 0\""], ["proof (prove)\nusing this:\n  card (keys f) = 1\n\ngoal (1 subgoal):\n 1. f \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  f \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<And>p. p \\<in> reduced_GB F \\<Longrightarrow> is_monomial p", "hence \"lc f \\<noteq> 0\""], ["proof (prove)\nusing this:\n  f \\<noteq> 0\n\ngoal (1 subgoal):\n 1. lc f \\<noteq> (0::'b)", "by (rule lc_not_0)"], ["proof (state)\nthis:\n  lc f \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. \\<And>p. p \\<in> reduced_GB F \\<Longrightarrow> is_monomial p", "hence \"1 / lc f \\<noteq> 0\""], ["proof (prove)\nusing this:\n  lc f \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. (1::'b) / lc f \\<noteq> (0::'b)", "by simp"], ["proof (state)\nthis:\n  (1::'b) / lc f \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. \\<And>p. p \\<in> reduced_GB F \\<Longrightarrow> is_monomial p", "hence \"keys g = (\\<oplus>) 0 ` keys f\""], ["proof (prove)\nusing this:\n  (1::'b) / lc f \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. keys g = (\\<oplus>) (0::'a) ` keys f", "by (simp add: keys_monom_mult monic_def g)"], ["proof (state)\nthis:\n  keys g = (\\<oplus>) (0::'a) ` keys f\n\ngoal (1 subgoal):\n 1. \\<And>p. p \\<in> reduced_GB F \\<Longrightarrow> is_monomial p", "also"], ["proof (state)\nthis:\n  keys g = (\\<oplus>) (0::'a) ` keys f\n\ngoal (1 subgoal):\n 1. \\<And>p. p \\<in> reduced_GB F \\<Longrightarrow> is_monomial p", "from refl"], ["proof (chain)\npicking this:\n  ?t = ?t", "have \"\\<dots> = (\\<lambda>x. x) ` keys f\""], ["proof (prove)\nusing this:\n  ?t = ?t\n\ngoal (1 subgoal):\n 1. (\\<oplus>) (0::'a) ` keys f = (\\<lambda>x. x) ` keys f", "by (rule image_cong) (simp only: splus_zero)"], ["proof (state)\nthis:\n  (\\<oplus>) (0::'a) ` keys f = (\\<lambda>x. x) ` keys f\n\ngoal (1 subgoal):\n 1. \\<And>p. p \\<in> reduced_GB F \\<Longrightarrow> is_monomial p", "finally"], ["proof (chain)\npicking this:\n  keys g = (\\<lambda>x. x) ` keys f", "show \"is_monomial g\""], ["proof (prove)\nusing this:\n  keys g = (\\<lambda>x. x) ` keys f\n\ngoal (1 subgoal):\n 1. is_monomial g", "using \\<open>card (keys f) = 1\\<close>"], ["proof (prove)\nusing this:\n  keys g = (\\<lambda>x. x) ` keys f\n  card (keys f) = 1\n\ngoal (1 subgoal):\n 1. is_monomial g", "by (simp only: is_monomial_def image_ident)"], ["proof (state)\nthis:\n  is_monomial g\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "lemma is_red_reduced_GB_monomial_dgrad_set:\n  assumes \"finite (component_of_term ` S)\" and \"pp_of_term ` S \\<subseteq> dgrad_set d m\"\n  shows \"is_red (reduced_GB (monomial 1 ` S)) = is_red (monomial (1::'b::field) ` S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_red (reduced_GB (monomial (1::'b) ` S)) =\n    is_red (monomial (1::'b) ` S)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       is_red (reduced_GB (monomial (1::'b) ` S)) x =\n       is_red (monomial (1::'b) ` S) x", "fix p"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       is_red (reduced_GB (monomial (1::'b) ` S)) x =\n       is_red (monomial (1::'b) ` S) x", "let ?F = \"monomial (1::'b) ` S\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       is_red (reduced_GB (monomial (1::'b) ` S)) x =\n       is_red (monomial (1::'b) ` S) x", "from assms(1)"], ["proof (chain)\npicking this:\n  finite (component_of_term ` S)", "have 1: \"finite (component_of_term ` Keys ?F)\""], ["proof (prove)\nusing this:\n  finite (component_of_term ` S)\n\ngoal (1 subgoal):\n 1. finite (component_of_term ` Keys (monomial (1::'b) ` S))", "by (simp add: Keys_def)"], ["proof (state)\nthis:\n  finite (component_of_term ` Keys (monomial (1::'b) ` S))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       is_red (reduced_GB (monomial (1::'b) ` S)) x =\n       is_red (monomial (1::'b) ` S) x", "moreover"], ["proof (state)\nthis:\n  finite (component_of_term ` Keys (monomial (1::'b) ` S))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       is_red (reduced_GB (monomial (1::'b) ` S)) x =\n       is_red (monomial (1::'b) ` S) x", "from assms(2)"], ["proof (chain)\npicking this:\n  pp_of_term ` S \\<subseteq> dgrad_set d m", "have 2: \"?F \\<subseteq> dgrad_p_set d m\""], ["proof (prove)\nusing this:\n  pp_of_term ` S \\<subseteq> dgrad_set d m\n\ngoal (1 subgoal):\n 1. monomial (1::'b) ` S \\<subseteq> dgrad_p_set d m", "by (auto simp: dgrad_p_set_def)"], ["proof (state)\nthis:\n  monomial (1::'b) ` S \\<subseteq> dgrad_p_set d m\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       is_red (reduced_GB (monomial (1::'b) ` S)) x =\n       is_red (monomial (1::'b) ` S) x", "moreover"], ["proof (state)\nthis:\n  monomial (1::'b) ` S \\<subseteq> dgrad_p_set d m\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       is_red (reduced_GB (monomial (1::'b) ` S)) x =\n       is_red (monomial (1::'b) ` S) x", "have \"is_monomial_set ?F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_monomial_set (monomial (1::'b) ` S)", "by (auto intro!: is_monomial_setI monomial_is_monomial)"], ["proof (state)\nthis:\n  is_monomial_set (monomial (1::'b) ` S)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       is_red (reduced_GB (monomial (1::'b) ` S)) x =\n       is_red (monomial (1::'b) ` S) x", "ultimately"], ["proof (chain)\npicking this:\n  finite (component_of_term ` Keys (monomial (1::'b) ` S))\n  monomial (1::'b) ` S \\<subseteq> dgrad_p_set d m\n  is_monomial_set (monomial (1::'b) ` S)", "have \"reduced_GB ?F \\<subseteq> monic ` ?F\""], ["proof (prove)\nusing this:\n  finite (component_of_term ` Keys (monomial (1::'b) ` S))\n  monomial (1::'b) ` S \\<subseteq> dgrad_p_set d m\n  is_monomial_set (monomial (1::'b) ` S)\n\ngoal (1 subgoal):\n 1. reduced_GB (monomial (1::'b) ` S)\n    \\<subseteq> monic ` monomial (1::'b) ` S", "by (rule reduced_GB_subset_monic_dgrad_p_set)"], ["proof (state)\nthis:\n  reduced_GB (monomial (1::'b) ` S) \\<subseteq> monic ` monomial (1::'b) ` S\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       is_red (reduced_GB (monomial (1::'b) ` S)) x =\n       is_red (monomial (1::'b) ` S) x", "also"], ["proof (state)\nthis:\n  reduced_GB (monomial (1::'b) ` S) \\<subseteq> monic ` monomial (1::'b) ` S\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       is_red (reduced_GB (monomial (1::'b) ` S)) x =\n       is_red (monomial (1::'b) ` S) x", "have \"\\<dots> = ?F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. monic ` monomial (1::'b) ` S = monomial (1::'b) ` S", "by (auto simp: monic_def intro!: image_eqI)"], ["proof (state)\nthis:\n  monic ` monomial (1::'b) ` S = monomial (1::'b) ` S\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       is_red (reduced_GB (monomial (1::'b) ` S)) x =\n       is_red (monomial (1::'b) ` S) x", "finally"], ["proof (chain)\npicking this:\n  reduced_GB (monomial (1::'b) ` S) \\<subseteq> monomial (1::'b) ` S", "have 3: \"reduced_GB ?F \\<subseteq> ?F\""], ["proof (prove)\nusing this:\n  reduced_GB (monomial (1::'b) ` S) \\<subseteq> monomial (1::'b) ` S\n\ngoal (1 subgoal):\n 1. reduced_GB (monomial (1::'b) ` S) \\<subseteq> monomial (1::'b) ` S", "."], ["proof (state)\nthis:\n  reduced_GB (monomial (1::'b) ` S) \\<subseteq> monomial (1::'b) ` S\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       is_red (reduced_GB (monomial (1::'b) ` S)) x =\n       is_red (monomial (1::'b) ` S) x", "show \"is_red (reduced_GB ?F) p \\<longleftrightarrow> is_red ?F p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_red (reduced_GB (monomial (1::'b) ` S)) p =\n    is_red (monomial (1::'b) ` S) p", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. is_red (reduced_GB (monomial (1::'b) ` S)) p \\<Longrightarrow>\n    is_red (monomial (1::'b) ` S) p\n 2. is_red (monomial (1::'b) ` S) p \\<Longrightarrow>\n    is_red (reduced_GB (monomial (1::'b) ` S)) p", "assume \"is_red (reduced_GB ?F) p\""], ["proof (state)\nthis:\n  is_red (reduced_GB (monomial (1::'b) ` S)) p\n\ngoal (2 subgoals):\n 1. is_red (reduced_GB (monomial (1::'b) ` S)) p \\<Longrightarrow>\n    is_red (monomial (1::'b) ` S) p\n 2. is_red (monomial (1::'b) ` S) p \\<Longrightarrow>\n    is_red (reduced_GB (monomial (1::'b) ` S)) p", "thus \"is_red ?F p\""], ["proof (prove)\nusing this:\n  is_red (reduced_GB (monomial (1::'b) ` S)) p\n\ngoal (1 subgoal):\n 1. is_red (monomial (1::'b) ` S) p", "using 3"], ["proof (prove)\nusing this:\n  is_red (reduced_GB (monomial (1::'b) ` S)) p\n  reduced_GB (monomial (1::'b) ` S) \\<subseteq> monomial (1::'b) ` S\n\ngoal (1 subgoal):\n 1. is_red (monomial (1::'b) ` S) p", "by (rule is_red_subset)"], ["proof (state)\nthis:\n  is_red (monomial (1::'b) ` S) p\n\ngoal (1 subgoal):\n 1. is_red (monomial (1::'b) ` S) p \\<Longrightarrow>\n    is_red (reduced_GB (monomial (1::'b) ` S)) p", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. is_red (monomial (1::'b) ` S) p \\<Longrightarrow>\n    is_red (reduced_GB (monomial (1::'b) ` S)) p", "assume \"is_red ?F p\""], ["proof (state)\nthis:\n  is_red (monomial (1::'b) ` S) p\n\ngoal (1 subgoal):\n 1. is_red (monomial (1::'b) ` S) p \\<Longrightarrow>\n    is_red (reduced_GB (monomial (1::'b) ` S)) p", "then"], ["proof (chain)\npicking this:\n  is_red (monomial (1::'b) ` S) p", "obtain f v where \"f \\<in> ?F\" and \"v \\<in> keys p\" and \"f \\<noteq> 0\" and adds1: \"lt f adds\\<^sub>t v\""], ["proof (prove)\nusing this:\n  is_red (monomial (1::'b) ` S) p\n\ngoal (1 subgoal):\n 1. (\\<And>f v.\n        \\<lbrakk>f \\<in> monomial (1::'b) ` S; v \\<in> keys p; f \\<noteq> 0;\n         lt f adds\\<^sub>t v\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule is_red_addsE)"], ["proof (state)\nthis:\n  f \\<in> monomial (1::'b) ` S\n  v \\<in> keys p\n  f \\<noteq> 0\n  lt f adds\\<^sub>t v\n\ngoal (1 subgoal):\n 1. is_red (monomial (1::'b) ` S) p \\<Longrightarrow>\n    is_red (reduced_GB (monomial (1::'b) ` S)) p", "from this(1)"], ["proof (chain)\npicking this:\n  f \\<in> monomial (1::'b) ` S", "have \"f \\<in> pmdl ?F\""], ["proof (prove)\nusing this:\n  f \\<in> monomial (1::'b) ` S\n\ngoal (1 subgoal):\n 1. f \\<in> pmdl (monomial (1::'b) ` S)", "by (rule pmdl.span_base)"], ["proof (state)\nthis:\n  f \\<in> pmdl (monomial (1::'b) ` S)\n\ngoal (1 subgoal):\n 1. is_red (monomial (1::'b) ` S) p \\<Longrightarrow>\n    is_red (reduced_GB (monomial (1::'b) ` S)) p", "from dgrad 1 2"], ["proof (chain)\npicking this:\n  dickson_grading d\n  finite (component_of_term ` Keys (monomial (1::'b) ` S))\n  monomial (1::'b) ` S \\<subseteq> dgrad_p_set d m", "have \"is_Groebner_basis (reduced_GB ?F)\""], ["proof (prove)\nusing this:\n  dickson_grading d\n  finite (component_of_term ` Keys (monomial (1::'b) ` S))\n  monomial (1::'b) ` S \\<subseteq> dgrad_p_set d m\n\ngoal (1 subgoal):\n 1. is_Groebner_basis (reduced_GB (monomial (1::'b) ` S))", "by (rule reduced_GB_is_GB_dgrad_p_set)"], ["proof (state)\nthis:\n  is_Groebner_basis (reduced_GB (monomial (1::'b) ` S))\n\ngoal (1 subgoal):\n 1. is_red (monomial (1::'b) ` S) p \\<Longrightarrow>\n    is_red (reduced_GB (monomial (1::'b) ` S)) p", "moreover"], ["proof (state)\nthis:\n  is_Groebner_basis (reduced_GB (monomial (1::'b) ` S))\n\ngoal (1 subgoal):\n 1. is_red (monomial (1::'b) ` S) p \\<Longrightarrow>\n    is_red (reduced_GB (monomial (1::'b) ` S)) p", "from \\<open>f \\<in> pmdl ?F\\<close> dgrad 1 2"], ["proof (chain)\npicking this:\n  f \\<in> pmdl (monomial (1::'b) ` S)\n  dickson_grading d\n  finite (component_of_term ` Keys (monomial (1::'b) ` S))\n  monomial (1::'b) ` S \\<subseteq> dgrad_p_set d m", "have \"f \\<in> pmdl (reduced_GB ?F)\""], ["proof (prove)\nusing this:\n  f \\<in> pmdl (monomial (1::'b) ` S)\n  dickson_grading d\n  finite (component_of_term ` Keys (monomial (1::'b) ` S))\n  monomial (1::'b) ` S \\<subseteq> dgrad_p_set d m\n\ngoal (1 subgoal):\n 1. f \\<in> pmdl (reduced_GB (monomial (1::'b) ` S))", "by (simp only: reduced_GB_pmdl_dgrad_p_set)"], ["proof (state)\nthis:\n  f \\<in> pmdl (reduced_GB (monomial (1::'b) ` S))\n\ngoal (1 subgoal):\n 1. is_red (monomial (1::'b) ` S) p \\<Longrightarrow>\n    is_red (reduced_GB (monomial (1::'b) ` S)) p", "ultimately"], ["proof (chain)\npicking this:\n  is_Groebner_basis (reduced_GB (monomial (1::'b) ` S))\n  f \\<in> pmdl (reduced_GB (monomial (1::'b) ` S))", "obtain g where \"g \\<in> reduced_GB ?F\" and \"g \\<noteq> 0\" and \"lt g adds\\<^sub>t lt f\""], ["proof (prove)\nusing this:\n  is_Groebner_basis (reduced_GB (monomial (1::'b) ` S))\n  f \\<in> pmdl (reduced_GB (monomial (1::'b) ` S))\n\ngoal (1 subgoal):\n 1. (\\<And>g.\n        \\<lbrakk>g \\<in> reduced_GB (monomial (1::'b) ` S); g \\<noteq> 0;\n         lt g adds\\<^sub>t lt f\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using \\<open>f \\<noteq> 0\\<close>"], ["proof (prove)\nusing this:\n  is_Groebner_basis (reduced_GB (monomial (1::'b) ` S))\n  f \\<in> pmdl (reduced_GB (monomial (1::'b) ` S))\n  f \\<noteq> 0\n\ngoal (1 subgoal):\n 1. (\\<And>g.\n        \\<lbrakk>g \\<in> reduced_GB (monomial (1::'b) ` S); g \\<noteq> 0;\n         lt g adds\\<^sub>t lt f\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule GB_adds_lt)"], ["proof (state)\nthis:\n  g \\<in> reduced_GB (monomial (1::'b) ` S)\n  g \\<noteq> 0\n  lt g adds\\<^sub>t lt f\n\ngoal (1 subgoal):\n 1. is_red (monomial (1::'b) ` S) p \\<Longrightarrow>\n    is_red (reduced_GB (monomial (1::'b) ` S)) p", "from this(3) adds1"], ["proof (chain)\npicking this:\n  lt g adds\\<^sub>t lt f\n  lt f adds\\<^sub>t v", "have \"lt g adds\\<^sub>t v\""], ["proof (prove)\nusing this:\n  lt g adds\\<^sub>t lt f\n  lt f adds\\<^sub>t v\n\ngoal (1 subgoal):\n 1. lt g adds\\<^sub>t v", "by (rule adds_term_trans)"], ["proof (state)\nthis:\n  lt g adds\\<^sub>t v\n\ngoal (1 subgoal):\n 1. is_red (monomial (1::'b) ` S) p \\<Longrightarrow>\n    is_red (reduced_GB (monomial (1::'b) ` S)) p", "with \\<open>g \\<in> reduced_GB ?F\\<close> \\<open>g \\<noteq> 0\\<close> \\<open>v \\<in> keys p\\<close>"], ["proof (chain)\npicking this:\n  g \\<in> reduced_GB (monomial (1::'b) ` S)\n  g \\<noteq> 0\n  v \\<in> keys p\n  lt g adds\\<^sub>t v", "show \"is_red (reduced_GB ?F) p\""], ["proof (prove)\nusing this:\n  g \\<in> reduced_GB (monomial (1::'b) ` S)\n  g \\<noteq> 0\n  v \\<in> keys p\n  lt g adds\\<^sub>t v\n\ngoal (1 subgoal):\n 1. is_red (reduced_GB (monomial (1::'b) ` S)) p", "by (rule is_red_addsI)"], ["proof (state)\nthis:\n  is_red (reduced_GB (monomial (1::'b) ` S)) p\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  is_red (reduced_GB (monomial (1::'b) ` S)) p =\n  is_red (monomial (1::'b) ` S) p\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary is_red_reduced_GB_monomial_lt_GB_dgrad_p_set:\n  assumes \"finite (component_of_term ` Keys G)\" and \"G \\<subseteq> dgrad_p_set d m\" and \"0 \\<notin> G\"\n  shows \"is_red (reduced_GB (monomial (1::'b::field) ` lt ` G)) = is_red G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_red (reduced_GB (monomial (1::'b) ` lt ` G)) = is_red G", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. is_red (reduced_GB (monomial (1::'b) ` lt ` G)) = is_red G", "let ?S = \"lt ` G\""], ["proof (state)\ngoal (1 subgoal):\n 1. is_red (reduced_GB (monomial (1::'b) ` lt ` G)) = is_red G", "let ?G = \"monomial (1::'b) ` ?S\""], ["proof (state)\ngoal (1 subgoal):\n 1. is_red (reduced_GB (monomial (1::'b) ` lt ` G)) = is_red G", "from assms(3)"], ["proof (chain)\npicking this:\n  0 \\<notin> G", "have \"?S \\<subseteq> Keys G\""], ["proof (prove)\nusing this:\n  0 \\<notin> G\n\ngoal (1 subgoal):\n 1. lt ` G \\<subseteq> Keys G", "by (auto intro: lt_in_keys in_KeysI)"], ["proof (state)\nthis:\n  lt ` G \\<subseteq> Keys G\n\ngoal (1 subgoal):\n 1. is_red (reduced_GB (monomial (1::'b) ` lt ` G)) = is_red G", "hence \"component_of_term ` ?S \\<subseteq> component_of_term ` Keys G\"\n    and *: \"pp_of_term ` ?S \\<subseteq> pp_of_term ` Keys G\""], ["proof (prove)\nusing this:\n  lt ` G \\<subseteq> Keys G\n\ngoal (1 subgoal):\n 1. component_of_term ` lt ` G \\<subseteq> component_of_term ` Keys G &&&\n    pp_of_term ` lt ` G \\<subseteq> pp_of_term ` Keys G", "by (rule image_mono)+"], ["proof (state)\nthis:\n  component_of_term ` lt ` G \\<subseteq> component_of_term ` Keys G\n  pp_of_term ` lt ` G \\<subseteq> pp_of_term ` Keys G\n\ngoal (1 subgoal):\n 1. is_red (reduced_GB (monomial (1::'b) ` lt ` G)) = is_red G", "from this(1)"], ["proof (chain)\npicking this:\n  component_of_term ` lt ` G \\<subseteq> component_of_term ` Keys G", "have \"finite (component_of_term ` ?S)\""], ["proof (prove)\nusing this:\n  component_of_term ` lt ` G \\<subseteq> component_of_term ` Keys G\n\ngoal (1 subgoal):\n 1. finite (component_of_term ` lt ` G)", "using assms(1)"], ["proof (prove)\nusing this:\n  component_of_term ` lt ` G \\<subseteq> component_of_term ` Keys G\n  finite (component_of_term ` Keys G)\n\ngoal (1 subgoal):\n 1. finite (component_of_term ` lt ` G)", "by (rule finite_subset)"], ["proof (state)\nthis:\n  finite (component_of_term ` lt ` G)\n\ngoal (1 subgoal):\n 1. is_red (reduced_GB (monomial (1::'b) ` lt ` G)) = is_red G", "moreover"], ["proof (state)\nthis:\n  finite (component_of_term ` lt ` G)\n\ngoal (1 subgoal):\n 1. is_red (reduced_GB (monomial (1::'b) ` lt ` G)) = is_red G", "from *"], ["proof (chain)\npicking this:\n  pp_of_term ` lt ` G \\<subseteq> pp_of_term ` Keys G", "have \"pp_of_term ` ?S \\<subseteq> dgrad_set d m\""], ["proof (prove)\nusing this:\n  pp_of_term ` lt ` G \\<subseteq> pp_of_term ` Keys G\n\ngoal (1 subgoal):\n 1. pp_of_term ` lt ` G \\<subseteq> dgrad_set d m", "proof (rule subset_trans)"], ["proof (state)\ngoal (1 subgoal):\n 1. pp_of_term ` Keys G \\<subseteq> dgrad_set d m", "from assms(2)"], ["proof (chain)\npicking this:\n  G \\<subseteq> dgrad_p_set d m", "show \"pp_of_term ` Keys G \\<subseteq> dgrad_set d m\""], ["proof (prove)\nusing this:\n  G \\<subseteq> dgrad_p_set d m\n\ngoal (1 subgoal):\n 1. pp_of_term ` Keys G \\<subseteq> dgrad_set d m", "by (auto simp: dgrad_p_set_def Keys_def)"], ["proof (state)\nthis:\n  pp_of_term ` Keys G \\<subseteq> dgrad_set d m\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  pp_of_term ` lt ` G \\<subseteq> dgrad_set d m\n\ngoal (1 subgoal):\n 1. is_red (reduced_GB (monomial (1::'b) ` lt ` G)) = is_red G", "ultimately"], ["proof (chain)\npicking this:\n  finite (component_of_term ` lt ` G)\n  pp_of_term ` lt ` G \\<subseteq> dgrad_set d m", "have \"is_red (reduced_GB ?G) = is_red ?G\""], ["proof (prove)\nusing this:\n  finite (component_of_term ` lt ` G)\n  pp_of_term ` lt ` G \\<subseteq> dgrad_set d m\n\ngoal (1 subgoal):\n 1. is_red (reduced_GB (monomial (1::'b) ` lt ` G)) =\n    is_red (monomial (1::'b) ` lt ` G)", "by (rule is_red_reduced_GB_monomial_dgrad_set)"], ["proof (state)\nthis:\n  is_red (reduced_GB (monomial (1::'b) ` lt ` G)) =\n  is_red (monomial (1::'b) ` lt ` G)\n\ngoal (1 subgoal):\n 1. is_red (reduced_GB (monomial (1::'b) ` lt ` G)) = is_red G", "also"], ["proof (state)\nthis:\n  is_red (reduced_GB (monomial (1::'b) ` lt ` G)) =\n  is_red (monomial (1::'b) ` lt ` G)\n\ngoal (1 subgoal):\n 1. is_red (reduced_GB (monomial (1::'b) ` lt ` G)) = is_red G", "from assms(3)"], ["proof (chain)\npicking this:\n  0 \\<notin> G", "have \"\\<dots> = is_red G\""], ["proof (prove)\nusing this:\n  0 \\<notin> G\n\ngoal (1 subgoal):\n 1. is_red (monomial (1::'b) ` lt ` G) = is_red G", "by (rule is_red_monomial_lt)"], ["proof (state)\nthis:\n  is_red (monomial (1::'b) ` lt ` G) = is_red G\n\ngoal (1 subgoal):\n 1. is_red (reduced_GB (monomial (1::'b) ` lt ` G)) = is_red G", "finally"], ["proof (chain)\npicking this:\n  is_red (reduced_GB (monomial (1::'b) ` lt ` G)) = is_red G", "show ?thesis"], ["proof (prove)\nusing this:\n  is_red (reduced_GB (monomial (1::'b) ` lt ` G)) = is_red G\n\ngoal (1 subgoal):\n 1. is_red (reduced_GB (monomial (1::'b) ` lt ` G)) = is_red G", "."], ["proof (state)\nthis:\n  is_red (reduced_GB (monomial (1::'b) ` lt ` G)) = is_red G\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma reduced_GB_monomial_lt_reduced_GB_dgrad_p_set:\n  assumes \"finite (component_of_term ` Keys F)\" and \"F \\<subseteq> dgrad_p_set d m\"\n  shows \"reduced_GB (monomial 1 ` lt ` reduced_GB F) = monomial (1::'b::field) ` lt ` reduced_GB F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. reduced_GB (monomial (1::'b) ` lt ` reduced_GB F) =\n    monomial (1::'b) ` lt ` reduced_GB F", "proof (rule reduced_GB_unique)"], ["proof (state)\ngoal (3 subgoals):\n 1. finite (monomial (1::'b) ` lt ` reduced_GB F)\n 2. is_reduced_GB (monomial (1::'b) ` lt ` reduced_GB F)\n 3. pmdl (monomial (1::'b) ` lt ` reduced_GB F) =\n    pmdl (monomial (1::'b) ` lt ` reduced_GB F)", "let ?G = \"reduced_GB F\""], ["proof (state)\ngoal (3 subgoals):\n 1. finite (monomial (1::'b) ` lt ` reduced_GB F)\n 2. is_reduced_GB (monomial (1::'b) ` lt ` reduced_GB F)\n 3. pmdl (monomial (1::'b) ` lt ` reduced_GB F) =\n    pmdl (monomial (1::'b) ` lt ` reduced_GB F)", "let ?F = \"monomial (1::'b) ` lt ` ?G\""], ["proof (state)\ngoal (3 subgoals):\n 1. finite (monomial (1::'b) ` lt ` reduced_GB F)\n 2. is_reduced_GB (monomial (1::'b) ` lt ` reduced_GB F)\n 3. pmdl (monomial (1::'b) ` lt ` reduced_GB F) =\n    pmdl (monomial (1::'b) ` lt ` reduced_GB F)", "from dgrad assms"], ["proof (chain)\npicking this:\n  dickson_grading d\n  finite (component_of_term ` Keys F)\n  F \\<subseteq> dgrad_p_set d m", "have \"0 \\<notin> ?G\" and ar: \"is_auto_reduced ?G\" and \"finite ?G\""], ["proof (prove)\nusing this:\n  dickson_grading d\n  finite (component_of_term ` Keys F)\n  F \\<subseteq> dgrad_p_set d m\n\ngoal (1 subgoal):\n 1. 0 \\<notin> reduced_GB F &&&\n    is_auto_reduced (reduced_GB F) &&& finite (reduced_GB F)", "by (rule reduced_GB_nonzero_dgrad_p_set, rule reduced_GB_is_auto_reduced_dgrad_p_set,\n        rule finite_reduced_GB_dgrad_p_set)"], ["proof (state)\nthis:\n  0 \\<notin> reduced_GB F\n  is_auto_reduced (reduced_GB F)\n  finite (reduced_GB F)\n\ngoal (3 subgoals):\n 1. finite (monomial (1::'b) ` lt ` reduced_GB F)\n 2. is_reduced_GB (monomial (1::'b) ` lt ` reduced_GB F)\n 3. pmdl (monomial (1::'b) ` lt ` reduced_GB F) =\n    pmdl (monomial (1::'b) ` lt ` reduced_GB F)", "from this(3)"], ["proof (chain)\npicking this:\n  finite (reduced_GB F)", "show \"finite ?F\""], ["proof (prove)\nusing this:\n  finite (reduced_GB F)\n\ngoal (1 subgoal):\n 1. finite (monomial (1::'b) ` lt ` reduced_GB F)", "by (intro finite_imageI)"], ["proof (state)\nthis:\n  finite (monomial (1::'b) ` lt ` reduced_GB F)\n\ngoal (2 subgoals):\n 1. is_reduced_GB (monomial (1::'b) ` lt ` reduced_GB F)\n 2. pmdl (monomial (1::'b) ` lt ` reduced_GB F) =\n    pmdl (monomial (1::'b) ` lt ` reduced_GB F)", "show \"is_reduced_GB ?F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_reduced_GB (monomial (1::'b) ` lt ` reduced_GB F)", "unfolding is_reduced_GB_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_Groebner_basis (monomial (1::'b) ` lt ` reduced_GB F) \\<and>\n    is_auto_reduced (monomial (1::'b) ` lt ` reduced_GB F) \\<and>\n    is_monic_set (monomial (1::'b) ` lt ` reduced_GB F) \\<and>\n    0 \\<notin> monomial (1::'b) ` lt ` reduced_GB F", "proof (intro conjI monomial_set_is_GB)"], ["proof (state)\ngoal (4 subgoals):\n 1. is_monomial_set (monomial (1::'b) ` lt ` reduced_GB F)\n 2. is_auto_reduced (monomial (1::'b) ` lt ` reduced_GB F)\n 3. is_monic_set (monomial (1::'b) ` lt ` reduced_GB F)\n 4. 0 \\<notin> monomial (1::'b) ` lt ` reduced_GB F", "show \"is_monomial_set ?F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_monomial_set (monomial (1::'b) ` lt ` reduced_GB F)", "by (auto intro!: is_monomial_setI monomial_is_monomial)"], ["proof (state)\nthis:\n  is_monomial_set (monomial (1::'b) ` lt ` reduced_GB F)\n\ngoal (3 subgoals):\n 1. is_auto_reduced (monomial (1::'b) ` lt ` reduced_GB F)\n 2. is_monic_set (monomial (1::'b) ` lt ` reduced_GB F)\n 3. 0 \\<notin> monomial (1::'b) ` lt ` reduced_GB F", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. is_auto_reduced (monomial (1::'b) ` lt ` reduced_GB F)\n 2. is_monic_set (monomial (1::'b) ` lt ` reduced_GB F)\n 3. 0 \\<notin> monomial (1::'b) ` lt ` reduced_GB F", "show \"is_monic_set ?F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_monic_set (monomial (1::'b) ` lt ` reduced_GB F)", "by (simp add: is_monic_set_def)"], ["proof (state)\nthis:\n  is_monic_set (monomial (1::'b) ` lt ` reduced_GB F)\n\ngoal (2 subgoals):\n 1. is_auto_reduced (monomial (1::'b) ` lt ` reduced_GB F)\n 2. 0 \\<notin> monomial (1::'b) ` lt ` reduced_GB F", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. is_auto_reduced (monomial (1::'b) ` lt ` reduced_GB F)\n 2. 0 \\<notin> monomial (1::'b) ` lt ` reduced_GB F", "show \"0 \\<notin> ?F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<notin> monomial (1::'b) ` lt ` reduced_GB F", "by (auto simp: monomial_0_iff)"], ["proof (state)\nthis:\n  0 \\<notin> monomial (1::'b) ` lt ` reduced_GB F\n\ngoal (1 subgoal):\n 1. is_auto_reduced (monomial (1::'b) ` lt ` reduced_GB F)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. is_auto_reduced (monomial (1::'b) ` lt ` reduced_GB F)", "show \"is_auto_reduced ?F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_auto_reduced (monomial (1::'b) ` lt ` reduced_GB F)", "unfolding is_auto_reduced_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>b\\<in>monomial (1::'b) ` lt ` reduced_GB F.\n       \\<not> is_red (monomial (1::'b) ` lt ` reduced_GB F - {b}) b", "proof (intro ballI notI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>b \\<in> monomial (1::'b) ` lt ` reduced_GB F;\n        is_red (monomial (1::'b) ` lt ` reduced_GB F - {b}) b\\<rbrakk>\n       \\<Longrightarrow> False", "fix f"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>b \\<in> monomial (1::'b) ` lt ` reduced_GB F;\n        is_red (monomial (1::'b) ` lt ` reduced_GB F - {b}) b\\<rbrakk>\n       \\<Longrightarrow> False", "assume \"f \\<in> ?F\""], ["proof (state)\nthis:\n  f \\<in> monomial (1::'b) ` lt ` reduced_GB F\n\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>b \\<in> monomial (1::'b) ` lt ` reduced_GB F;\n        is_red (monomial (1::'b) ` lt ` reduced_GB F - {b}) b\\<rbrakk>\n       \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  f \\<in> monomial (1::'b) ` lt ` reduced_GB F", "obtain g where \"g \\<in> ?G\" and f: \"f = monomial 1 (lt g)\""], ["proof (prove)\nusing this:\n  f \\<in> monomial (1::'b) ` lt ` reduced_GB F\n\ngoal (1 subgoal):\n 1. (\\<And>g.\n        \\<lbrakk>g \\<in> reduced_GB F; f = monomial (1::'b) (lt g)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  g \\<in> reduced_GB F\n  f = monomial (1::'b) (lt g)\n\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>b \\<in> monomial (1::'b) ` lt ` reduced_GB F;\n        is_red (monomial (1::'b) ` lt ` reduced_GB F - {b}) b\\<rbrakk>\n       \\<Longrightarrow> False", "assume \"is_red (?F - {f}) f\""], ["proof (state)\nthis:\n  is_red (monomial (1::'b) ` lt ` reduced_GB F - {f}) f\n\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>b \\<in> monomial (1::'b) ` lt ` reduced_GB F;\n        is_red (monomial (1::'b) ` lt ` reduced_GB F - {b}) b\\<rbrakk>\n       \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  is_red (monomial (1::'b) ` lt ` reduced_GB F - {f}) f", "obtain f' v where \"f' \\<in> ?F - {f}\" and \"v \\<in> keys f\" and \"f' \\<noteq> 0\" and adds1: \"lt f' adds\\<^sub>t v\""], ["proof (prove)\nusing this:\n  is_red (monomial (1::'b) ` lt ` reduced_GB F - {f}) f\n\ngoal (1 subgoal):\n 1. (\\<And>f' v.\n        \\<lbrakk>f' \\<in> monomial (1::'b) ` lt ` reduced_GB F - {f};\n         v \\<in> keys f; f' \\<noteq> 0; lt f' adds\\<^sub>t v\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule is_red_addsE)"], ["proof (state)\nthis:\n  f' \\<in> monomial (1::'b) ` lt ` reduced_GB F - {f}\n  v \\<in> keys f\n  f' \\<noteq> 0\n  lt f' adds\\<^sub>t v\n\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>b \\<in> monomial (1::'b) ` lt ` reduced_GB F;\n        is_red (monomial (1::'b) ` lt ` reduced_GB F - {b}) b\\<rbrakk>\n       \\<Longrightarrow> False", "from this(1)"], ["proof (chain)\npicking this:\n  f' \\<in> monomial (1::'b) ` lt ` reduced_GB F - {f}", "have \"f' \\<in> ?F\" and \"f' \\<noteq> f\""], ["proof (prove)\nusing this:\n  f' \\<in> monomial (1::'b) ` lt ` reduced_GB F - {f}\n\ngoal (1 subgoal):\n 1. f' \\<in> monomial (1::'b) ` lt ` reduced_GB F &&& f' \\<noteq> f", "by simp_all"], ["proof (state)\nthis:\n  f' \\<in> monomial (1::'b) ` lt ` reduced_GB F\n  f' \\<noteq> f\n\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>b \\<in> monomial (1::'b) ` lt ` reduced_GB F;\n        is_red (monomial (1::'b) ` lt ` reduced_GB F - {b}) b\\<rbrakk>\n       \\<Longrightarrow> False", "from this(1)"], ["proof (chain)\npicking this:\n  f' \\<in> monomial (1::'b) ` lt ` reduced_GB F", "obtain g' where \"g' \\<in> ?G\" and f': \"f' = monomial 1 (lt g')\""], ["proof (prove)\nusing this:\n  f' \\<in> monomial (1::'b) ` lt ` reduced_GB F\n\ngoal (1 subgoal):\n 1. (\\<And>g'.\n        \\<lbrakk>g' \\<in> reduced_GB F;\n         f' = monomial (1::'b) (lt g')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  g' \\<in> reduced_GB F\n  f' = monomial (1::'b) (lt g')\n\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>b \\<in> monomial (1::'b) ` lt ` reduced_GB F;\n        is_red (monomial (1::'b) ` lt ` reduced_GB F - {b}) b\\<rbrakk>\n       \\<Longrightarrow> False", "from \\<open>v \\<in> keys f\\<close>"], ["proof (chain)\npicking this:\n  v \\<in> keys f", "have v: \"v = lt g\""], ["proof (prove)\nusing this:\n  v \\<in> keys f\n\ngoal (1 subgoal):\n 1. v = lt g", "by (simp add: f)"], ["proof (state)\nthis:\n  v = lt g\n\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>b \\<in> monomial (1::'b) ` lt ` reduced_GB F;\n        is_red (monomial (1::'b) ` lt ` reduced_GB F - {b}) b\\<rbrakk>\n       \\<Longrightarrow> False", "from ar \\<open>g \\<in> ?G\\<close>"], ["proof (chain)\npicking this:\n  is_auto_reduced (reduced_GB F)\n  g \\<in> reduced_GB F", "have \"\\<not> is_red (?G - {g}) g\""], ["proof (prove)\nusing this:\n  is_auto_reduced (reduced_GB F)\n  g \\<in> reduced_GB F\n\ngoal (1 subgoal):\n 1. \\<not> is_red (reduced_GB F - {g}) g", "by (rule is_auto_reducedD)"], ["proof (state)\nthis:\n  \\<not> is_red (reduced_GB F - {g}) g\n\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>b \\<in> monomial (1::'b) ` lt ` reduced_GB F;\n        is_red (monomial (1::'b) ` lt ` reduced_GB F - {b}) b\\<rbrakk>\n       \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  \\<not> is_red (reduced_GB F - {g}) g\n\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>b \\<in> monomial (1::'b) ` lt ` reduced_GB F;\n        is_red (monomial (1::'b) ` lt ` reduced_GB F - {b}) b\\<rbrakk>\n       \\<Longrightarrow> False", "have \"is_red (?G - {g}) g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_red (reduced_GB F - {g}) g", "proof (rule is_red_addsI)"], ["proof (state)\ngoal (4 subgoals):\n 1. ?f \\<in> reduced_GB F - {g}\n 2. ?f \\<noteq> 0\n 3. ?v \\<in> keys g\n 4. lt ?f adds\\<^sub>t ?v", "from \\<open>g' \\<in> ?G\\<close> \\<open>f' \\<noteq> f\\<close>"], ["proof (chain)\npicking this:\n  g' \\<in> reduced_GB F\n  f' \\<noteq> f", "show \"g' \\<in> ?G - {g}\""], ["proof (prove)\nusing this:\n  g' \\<in> reduced_GB F\n  f' \\<noteq> f\n\ngoal (1 subgoal):\n 1. g' \\<in> reduced_GB F - {g}", "by (auto simp: f f')"], ["proof (state)\nthis:\n  g' \\<in> reduced_GB F - {g}\n\ngoal (3 subgoals):\n 1. g' \\<noteq> 0\n 2. ?v \\<in> keys g\n 3. lt g' adds\\<^sub>t ?v", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. g' \\<noteq> 0\n 2. ?v \\<in> keys g\n 3. lt g' adds\\<^sub>t ?v", "from \\<open>g' \\<in> ?G\\<close> \\<open>0 \\<notin> ?G\\<close>"], ["proof (chain)\npicking this:\n  g' \\<in> reduced_GB F\n  0 \\<notin> reduced_GB F", "show \"g' \\<noteq> 0\""], ["proof (prove)\nusing this:\n  g' \\<in> reduced_GB F\n  0 \\<notin> reduced_GB F\n\ngoal (1 subgoal):\n 1. g' \\<noteq> 0", "by blast"], ["proof (state)\nthis:\n  g' \\<noteq> 0\n\ngoal (2 subgoals):\n 1. ?v \\<in> keys g\n 2. lt g' adds\\<^sub>t ?v", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. ?v \\<in> keys g\n 2. lt g' adds\\<^sub>t ?v", "from \\<open>g \\<in> ?G\\<close> \\<open>0 \\<notin> ?G\\<close>"], ["proof (chain)\npicking this:\n  g \\<in> reduced_GB F\n  0 \\<notin> reduced_GB F", "have \"g \\<noteq> 0\""], ["proof (prove)\nusing this:\n  g \\<in> reduced_GB F\n  0 \\<notin> reduced_GB F\n\ngoal (1 subgoal):\n 1. g \\<noteq> 0", "by blast"], ["proof (state)\nthis:\n  g \\<noteq> 0\n\ngoal (2 subgoals):\n 1. ?v \\<in> keys g\n 2. lt g' adds\\<^sub>t ?v", "thus \"lt g \\<in> keys g\""], ["proof (prove)\nusing this:\n  g \\<noteq> 0\n\ngoal (1 subgoal):\n 1. lt g \\<in> keys g", "by (rule lt_in_keys)"], ["proof (state)\nthis:\n  lt g \\<in> keys g\n\ngoal (1 subgoal):\n 1. lt g' adds\\<^sub>t lt g", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. lt g' adds\\<^sub>t lt g", "from adds1"], ["proof (chain)\npicking this:\n  lt f' adds\\<^sub>t v", "show adds2: \"lt g' adds\\<^sub>t lt g\""], ["proof (prove)\nusing this:\n  lt f' adds\\<^sub>t v\n\ngoal (1 subgoal):\n 1. lt g' adds\\<^sub>t lt g", "by (simp add: v f' lt_monomial)"], ["proof (state)\nthis:\n  lt g' adds\\<^sub>t lt g\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  is_red (reduced_GB F - {g}) g\n\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>b \\<in> monomial (1::'b) ` lt ` reduced_GB F;\n        is_red (monomial (1::'b) ` lt ` reduced_GB F - {b}) b\\<rbrakk>\n       \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  \\<not> is_red (reduced_GB F - {g}) g\n  is_red (reduced_GB F - {g}) g", "show False"], ["proof (prove)\nusing this:\n  \\<not> is_red (reduced_GB F - {g}) g\n  is_red (reduced_GB F - {g}) g\n\ngoal (1 subgoal):\n 1. False", ".."], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  is_auto_reduced (monomial (1::'b) ` lt ` reduced_GB F)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  is_reduced_GB (monomial (1::'b) ` lt ` reduced_GB F)\n\ngoal (1 subgoal):\n 1. pmdl (monomial (1::'b) ` lt ` reduced_GB F) =\n    pmdl (monomial (1::'b) ` lt ` reduced_GB F)", "qed (fact refl)"], ["", "end"], ["", "end"], ["", "(* gd_term *)"], ["", "end"], ["", "(* theory *)"]]}