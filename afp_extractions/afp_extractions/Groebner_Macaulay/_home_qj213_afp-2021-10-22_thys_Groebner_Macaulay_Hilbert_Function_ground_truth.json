{"file_name": "/home/qj213/afp-2021-10-22/thys/Groebner_Macaulay/Hilbert_Function.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Groebner_Macaulay", "problem_names": ["lemma direct_decompI:\n  \"inj_on sum_list (listset ss) \\<Longrightarrow> sum_list ` listset ss = A \\<Longrightarrow> direct_decomp A ss\"", "lemma direct_decompI_alt:\n  \"(\\<And>qs. qs \\<in> listset ss \\<Longrightarrow> sum_list qs \\<in> A) \\<Longrightarrow> (\\<And>a. a \\<in> A \\<Longrightarrow> \\<exists>!qs\\<in>listset ss. a = sum_list qs) \\<Longrightarrow>\n    direct_decomp A ss\"", "lemma direct_decompD:\n  assumes \"direct_decomp A ss\"\n  shows \"qs \\<in> listset ss \\<Longrightarrow> sum_list qs \\<in> A\" and \"inj_on sum_list (listset ss)\"\n    and \"sum_list ` listset ss = A\"", "lemma direct_decompE:\n  assumes \"direct_decomp A ss\" and \"a \\<in> A\"\n  obtains qs where \"qs \\<in> listset ss\" and \"a = sum_list qs\"", "lemma direct_decomp_unique:\n  \"direct_decomp A ss \\<Longrightarrow> qs \\<in> listset ss \\<Longrightarrow> qs' \\<in> listset ss \\<Longrightarrow> sum_list qs = sum_list qs' \\<Longrightarrow>\n    qs = qs'\"", "lemma direct_decomp_singleton: \"direct_decomp A [A]\"", "lemma mset_bij:\n  assumes \"bij_betw f {..<length xs} {..<length ys}\" and \"\\<And>i. i < length xs \\<Longrightarrow> xs ! i = ys ! f i\"\n  shows \"mset xs = mset ys\"", "lemma direct_decomp_perm:\n  assumes \"direct_decomp A ss1\" and \"perm ss1 ss2\"\n  shows \"direct_decomp A ss2\"", "lemma direct_decomp_split_map:\n  \"direct_decomp A (map f ss) \\<Longrightarrow> direct_decomp A (map f (filter P ss) @ map f (filter (- P) ss))\"", "lemmas direct_decomp_split = direct_decomp_split_map[where f=id, simplified]", "lemma direct_decomp_direct_decomp:\n  assumes \"direct_decomp A (s # ss)\" and \"direct_decomp s rs\"\n  shows \"direct_decomp A (ss @ rs)\" (is \"direct_decomp A ?ss\")", "lemma sum_list_map_times: \"sum_list (map ((*) x) xs) = (x::'a::semiring_0) * sum_list xs\"", "lemma direct_decomp_image_times:\n  assumes \"direct_decomp (A::'a::semiring_0 set) ss\" and \"\\<And>a b. x * a = x * b \\<Longrightarrow> x \\<noteq> 0 \\<Longrightarrow> a = b\"\n  shows \"direct_decomp ((*) x ` A) (map ((`) ((*) x)) ss)\" (is \"direct_decomp ?A ?ss\")", "lemma direct_decomp_appendD:\n  assumes \"direct_decomp A (ss1 @ ss2)\"\n  shows \"{} \\<notin> set ss2 \\<Longrightarrow> direct_decomp (sum_list ` listset ss1) ss1\" (is \"_ \\<Longrightarrow> ?thesis1\")\n    and \"{} \\<notin> set ss1 \\<Longrightarrow> direct_decomp (sum_list ` listset ss2) ss2\" (is \"_ \\<Longrightarrow> ?thesis2\")\n    and \"direct_decomp A [sum_list ` listset ss1, sum_list ` listset ss2]\" (is \"direct_decomp _ ?ss\")", "lemma direct_decomp_Cons_zeroI:\n  assumes \"direct_decomp A ss\"\n  shows \"direct_decomp A ({0} # ss)\"", "lemma direct_decomp_Cons_zeroD:\n  assumes \"direct_decomp A ({0} # ss)\"\n  shows \"direct_decomp A ss\"", "lemma direct_decomp_Cons_subsetI:\n  assumes \"direct_decomp A (s # ss)\" and \"\\<And>s0. s0 \\<in> set ss \\<Longrightarrow> 0 \\<in> s0\"\n  shows \"s \\<subseteq> A\"", "lemma direct_decomp_Int_zero:\n  assumes \"direct_decomp A ss\" and \"i < j\" and \"j < length ss\" and \"\\<And>s. s \\<in> set ss \\<Longrightarrow> 0 \\<in> s\"\n  shows \"ss ! i \\<inter> ss ! j = {0}\"", "lemma dim_empty [simp]: \"dim {} = 0\"", "lemma dim_zero [simp]: \"dim {0} = 0\"", "lemma independent_UnI:\n  assumes \"independent A\" and \"independent B\" and \"span A \\<inter> span B = {0}\"\n  shows \"independent (A \\<union> B)\"", "lemma subspace_direct_decomp:\n  assumes \"direct_decomp A ss\" and \"\\<And>s. s \\<in> set ss \\<Longrightarrow> subspace s\"\n  shows \"subspace A\"", "lemma is_basis_alt: \"subspace V \\<Longrightarrow> is_basis V B \\<longleftrightarrow> (independent B \\<and> span B = V)\"", "lemma is_basis_finite: \"is_basis V A \\<Longrightarrow> is_basis V B \\<Longrightarrow> finite A \\<longleftrightarrow> finite B\"", "lemma some_basis_is_basis: \"is_basis V (some_basis V)\"", "lemma some_basis_not_zero: \"0 \\<notin> some_basis V\"", "lemma span_some_basis: \"subspace V \\<Longrightarrow> span (some_basis V) = V\"", "lemma direct_decomp_some_basis_pairwise_disjnt:\n  assumes \"direct_decomp A ss\" and \"\\<And>s. s \\<in> set ss \\<Longrightarrow> subspace s\"\n  shows \"pairwise (\\<lambda>s1 s2. disjnt (some_basis s1) (some_basis s2)) (set ss)\"", "lemma direct_decomp_span_some_basis:\n  assumes \"direct_decomp A ss\" and \"\\<And>s. s \\<in> set ss \\<Longrightarrow> subspace s\"\n  shows \"span (\\<Union>(some_basis ` set ss)) = A\"", "lemma direct_decomp_independent_some_basis:\n  assumes \"direct_decomp A ss\" and \"\\<And>s. s \\<in> set ss \\<Longrightarrow> subspace s\"\n  shows \"independent (\\<Union>(some_basis ` set ss))\"", "lemma dim_direct_decomp:\n  assumes \"direct_decomp A ss\" and \"finite B\" and \"A \\<subseteq> span B\" and \"\\<And>s. s \\<in> set ss \\<Longrightarrow> subspace s\"\n  shows \"dim A = (\\<Sum>s\\<in>set ss. dim s)\"", "lemma homogeneous_set_direct_decomp:\n  assumes \"direct_decomp A ss\" and \"\\<And>s. s \\<in> set ss \\<Longrightarrow> homogeneous_set s\"\n  shows \"homogeneous_set A\"", "lemma hom_deg_setD:\n  assumes \"p \\<in> hom_deg_set z A\"\n  shows \"homogeneous p\" and \"p \\<noteq> 0 \\<Longrightarrow> poly_deg p = z\"", "lemma zero_in_hom_deg_set:\n  assumes \"0 \\<in> A\"\n  shows \"0 \\<in> hom_deg_set z A\"", "lemma hom_deg_set_closed_uminus:\n  assumes \"\\<And>a. a \\<in> A \\<Longrightarrow> - a \\<in> A\" and \"p \\<in> hom_deg_set z A\"\n  shows \"- p \\<in> hom_deg_set z A\"", "lemma hom_deg_set_closed_plus:\n  assumes \"\\<And>a1 a2. a1 \\<in> A \\<Longrightarrow> a2 \\<in> A \\<Longrightarrow> a1 + a2 \\<in> A\"\n    and \"p \\<in> hom_deg_set z A\" and \"q \\<in> hom_deg_set z A\"\n  shows \"p + q \\<in> hom_deg_set z A\"", "lemma hom_deg_set_closed_minus:\n  assumes \"\\<And>a1 a2. a1 \\<in> A \\<Longrightarrow> a2 \\<in> A \\<Longrightarrow> a1 - a2 \\<in> A\"\n    and \"p \\<in> hom_deg_set z A\" and \"q \\<in> hom_deg_set z A\"\n  shows \"p - q \\<in> hom_deg_set z A\"", "lemma hom_deg_set_closed_scalar:\n  assumes \"\\<And>a. a \\<in> A \\<Longrightarrow> c \\<cdot> a \\<in> A\" and \"p \\<in> hom_deg_set z A\"\n  shows \"(c::'a::semiring_0) \\<cdot> p \\<in> hom_deg_set z A\"", "lemma hom_deg_set_closed_sum:\n  assumes \"0 \\<in> A\" and \"\\<And>a1 a2. a1 \\<in> A \\<Longrightarrow> a2 \\<in> A \\<Longrightarrow> a1 + a2 \\<in> A\"\n    and \"\\<And>i. i \\<in> I \\<Longrightarrow> f i \\<in> hom_deg_set z A\"\n  shows \"sum f I \\<in> hom_deg_set z A\"", "lemma hom_deg_set_subset: \"homogeneous_set A \\<Longrightarrow> hom_deg_set z A \\<subseteq> A\"", "lemma Polys_closed_hom_deg_set:\n  assumes \"A \\<subseteq> P[X]\"\n  shows \"hom_deg_set z A \\<subseteq> P[X]\"", "lemma hom_deg_set_alt_homogeneous_set:\n  assumes \"homogeneous_set A\"\n  shows \"hom_deg_set z A = {p \\<in> A. homogeneous p \\<and> (p = 0 \\<or> poly_deg p = z)}\" (is \"?A = ?B\")", "lemma hom_deg_set_sum_list_listset:\n  assumes \"A = sum_list ` listset ss\"\n  shows \"hom_deg_set z A = sum_list ` listset (map (hom_deg_set z) ss)\" (is \"?A = ?B\")", "lemma direct_decomp_hom_deg_set:\n  assumes \"direct_decomp A ss\" and \"\\<And>s. s \\<in> set ss \\<Longrightarrow> homogeneous_set s\"\n  shows \"direct_decomp (hom_deg_set z A) (map (hom_deg_set z) ss)\"", "lemma subspace_ideal: \"phull.subspace (ideal (F::('b::comm_powerprod \\<Rightarrow>\\<^sub>0 'a::field) set))\"", "lemma subspace_Polys: \"phull.subspace (P[X]::(('x \\<Rightarrow>\\<^sub>0 nat) \\<Rightarrow>\\<^sub>0 'a::field) set)\"", "lemma subspace_hom_deg_set:\n  assumes \"phull.subspace A\"\n  shows \"phull.subspace (hom_deg_set z A)\" (is \"phull.subspace ?A\")", "lemma hom_deg_set_Polys_eq_span:\n  \"hom_deg_set z P[X] = phull.span (monomial (1::'a::field) ` deg_sect X z)\" (is \"?A = ?B\")", "lemma Hilbert_fun_empty [simp]: \"Hilbert_fun {} = 0\"", "lemma Hilbert_fun_zero [simp]: \"Hilbert_fun {0} = 0\"", "lemma Hilbert_fun_direct_decomp:\n  assumes \"finite X\" and \"A \\<subseteq> P[X]\" and \"direct_decomp (A::(('x::countable \\<Rightarrow>\\<^sub>0 nat) \\<Rightarrow>\\<^sub>0 'a::field) set) ps\"\n    and \"\\<And>s. s \\<in> set ps \\<Longrightarrow> homogeneous_set s\" and \"\\<And>s. s \\<in> set ps \\<Longrightarrow> phull.subspace s\"\n  shows \"Hilbert_fun A z = (\\<Sum>p\\<in>set ps. Hilbert_fun p z)\"", "lemma image_lt_hom_deg_set:\n  assumes \"homogeneous_set A\"\n  shows \"lpp ` (hom_deg_set z A - {0}) = {t \\<in> lpp ` (A - {0}). deg_pm t = z}\" (is \"?B = ?A\")", "lemma Hilbert_fun_alt:\n  assumes \"finite X\" and \"A \\<subseteq> P[X]\" and \"phull.subspace A\"\n  shows \"Hilbert_fun A z = card (lpp ` (hom_deg_set z A - {0}))\" (is \"_ = card ?A\")"], "translations": [["", "lemma direct_decompI:\n  \"inj_on sum_list (listset ss) \\<Longrightarrow> sum_list ` listset ss = A \\<Longrightarrow> direct_decomp A ss\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>inj_on sum_list (listset ss);\n     sum_list ` listset ss = A\\<rbrakk>\n    \\<Longrightarrow> direct_decomp A ss", "by (simp add: direct_decomp_def bij_betw_def)"], ["", "lemma direct_decompI_alt:\n  \"(\\<And>qs. qs \\<in> listset ss \\<Longrightarrow> sum_list qs \\<in> A) \\<Longrightarrow> (\\<And>a. a \\<in> A \\<Longrightarrow> \\<exists>!qs\\<in>listset ss. a = sum_list qs) \\<Longrightarrow>\n    direct_decomp A ss\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>qs.\n                qs \\<in> listset ss \\<Longrightarrow> sum_list qs \\<in> A;\n     \\<And>a.\n        a \\<in> A \\<Longrightarrow>\n        \\<exists>!qs. qs \\<in> listset ss \\<and> a = sum_list qs\\<rbrakk>\n    \\<Longrightarrow> direct_decomp A ss", "by (auto simp: direct_decomp_def intro!: bij_betwI') blast"], ["", "lemma direct_decompD:\n  assumes \"direct_decomp A ss\"\n  shows \"qs \\<in> listset ss \\<Longrightarrow> sum_list qs \\<in> A\" and \"inj_on sum_list (listset ss)\"\n    and \"sum_list ` listset ss = A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (qs \\<in> listset ss \\<Longrightarrow> sum_list qs \\<in> A) &&&\n    inj_on sum_list (listset ss) &&& sum_list ` listset ss = A", "using assms"], ["proof (prove)\nusing this:\n  direct_decomp A ss\n\ngoal (1 subgoal):\n 1. (qs \\<in> listset ss \\<Longrightarrow> sum_list qs \\<in> A) &&&\n    inj_on sum_list (listset ss) &&& sum_list ` listset ss = A", "by (auto simp: direct_decomp_def bij_betw_def)"], ["", "lemma direct_decompE:\n  assumes \"direct_decomp A ss\" and \"a \\<in> A\"\n  obtains qs where \"qs \\<in> listset ss\" and \"a = sum_list qs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>qs.\n        \\<lbrakk>qs \\<in> listset ss; a = sum_list qs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  direct_decomp A ss\n  a \\<in> A\n\ngoal (1 subgoal):\n 1. (\\<And>qs.\n        \\<lbrakk>qs \\<in> listset ss; a = sum_list qs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: direct_decomp_def bij_betw_def)"], ["", "lemma direct_decomp_unique:\n  \"direct_decomp A ss \\<Longrightarrow> qs \\<in> listset ss \\<Longrightarrow> qs' \\<in> listset ss \\<Longrightarrow> sum_list qs = sum_list qs' \\<Longrightarrow>\n    qs = qs'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>direct_decomp A ss; qs \\<in> listset ss; qs' \\<in> listset ss;\n     sum_list qs = sum_list qs'\\<rbrakk>\n    \\<Longrightarrow> qs = qs'", "by (auto dest: direct_decompD simp: inj_on_def)"], ["", "lemma direct_decomp_singleton: \"direct_decomp A [A]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. direct_decomp A [A]", "proof (rule direct_decompI_alt)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>qs. qs \\<in> listset [A] \\<Longrightarrow> sum_list qs \\<in> A\n 2. \\<And>a.\n       a \\<in> A \\<Longrightarrow>\n       \\<exists>!qs. qs \\<in> listset [A] \\<and> a = sum_list qs", "fix qs"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>qs. qs \\<in> listset [A] \\<Longrightarrow> sum_list qs \\<in> A\n 2. \\<And>a.\n       a \\<in> A \\<Longrightarrow>\n       \\<exists>!qs. qs \\<in> listset [A] \\<and> a = sum_list qs", "assume \"qs \\<in> listset [A]\""], ["proof (state)\nthis:\n  qs \\<in> listset [A]\n\ngoal (2 subgoals):\n 1. \\<And>qs. qs \\<in> listset [A] \\<Longrightarrow> sum_list qs \\<in> A\n 2. \\<And>a.\n       a \\<in> A \\<Longrightarrow>\n       \\<exists>!qs. qs \\<in> listset [A] \\<and> a = sum_list qs", "then"], ["proof (chain)\npicking this:\n  qs \\<in> listset [A]", "obtain q where \"q \\<in> A\" and \"qs = [q]\""], ["proof (prove)\nusing this:\n  qs \\<in> listset [A]\n\ngoal (1 subgoal):\n 1. (\\<And>q.\n        \\<lbrakk>q \\<in> A; qs = [q]\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule listset_singletonE)"], ["proof (state)\nthis:\n  q \\<in> A\n  qs = [q]\n\ngoal (2 subgoals):\n 1. \\<And>qs. qs \\<in> listset [A] \\<Longrightarrow> sum_list qs \\<in> A\n 2. \\<And>a.\n       a \\<in> A \\<Longrightarrow>\n       \\<exists>!qs. qs \\<in> listset [A] \\<and> a = sum_list qs", "thus \"sum_list qs \\<in> A\""], ["proof (prove)\nusing this:\n  q \\<in> A\n  qs = [q]\n\ngoal (1 subgoal):\n 1. sum_list qs \\<in> A", "by simp"], ["proof (state)\nthis:\n  sum_list qs \\<in> A\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       a \\<in> A \\<Longrightarrow>\n       \\<exists>!qs. qs \\<in> listset [A] \\<and> a = sum_list qs", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a.\n       a \\<in> A \\<Longrightarrow>\n       \\<exists>!qs. qs \\<in> listset [A] \\<and> a = sum_list qs", "fix a"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a.\n       a \\<in> A \\<Longrightarrow>\n       \\<exists>!qs. qs \\<in> listset [A] \\<and> a = sum_list qs", "assume \"a \\<in> A\""], ["proof (state)\nthis:\n  a \\<in> A\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       a \\<in> A \\<Longrightarrow>\n       \\<exists>!qs. qs \\<in> listset [A] \\<and> a = sum_list qs", "show \"\\<exists>!qs\\<in>listset [A]. a = sum_list qs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>!qs. qs \\<in> listset [A] \\<and> a = sum_list qs", "proof (intro ex1I conjI allI impI)"], ["proof (state)\ngoal (3 subgoals):\n 1. ?a \\<in> listset [A]\n 2. a = sum_list ?a\n 3. \\<And>qs.\n       qs \\<in> listset [A] \\<and> a = sum_list qs \\<Longrightarrow> qs = ?a", "from \\<open>a \\<in> A\\<close> refl"], ["proof (chain)\npicking this:\n  a \\<in> A\n  ?t = ?t", "show \"[a] \\<in> listset [A]\""], ["proof (prove)\nusing this:\n  a \\<in> A\n  ?t = ?t\n\ngoal (1 subgoal):\n 1. [a] \\<in> listset [A]", "by (rule listset_singletonI)"], ["proof (state)\nthis:\n  [a] \\<in> listset [A]\n\ngoal (2 subgoals):\n 1. a = sum_list [a]\n 2. \\<And>qs.\n       qs \\<in> listset [A] \\<and> a = sum_list qs \\<Longrightarrow>\n       qs = [a]", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. a = sum_list [a]\n 2. \\<And>qs.\n       qs \\<in> listset [A] \\<and> a = sum_list qs \\<Longrightarrow>\n       qs = [a]", "fix qs"], ["proof (state)\ngoal (2 subgoals):\n 1. a = sum_list [a]\n 2. \\<And>qs.\n       qs \\<in> listset [A] \\<and> a = sum_list qs \\<Longrightarrow>\n       qs = [a]", "assume \"qs \\<in> listset [A] \\<and> a = sum_list qs\""], ["proof (state)\nthis:\n  qs \\<in> listset [A] \\<and> a = sum_list qs\n\ngoal (2 subgoals):\n 1. a = sum_list [a]\n 2. \\<And>qs.\n       qs \\<in> listset [A] \\<and> a = sum_list qs \\<Longrightarrow>\n       qs = [a]", "hence a: \"a = sum_list qs\" and \"qs \\<in> listset [A]\""], ["proof (prove)\nusing this:\n  qs \\<in> listset [A] \\<and> a = sum_list qs\n\ngoal (1 subgoal):\n 1. a = sum_list qs &&& qs \\<in> listset [A]", "by simp_all"], ["proof (state)\nthis:\n  a = sum_list qs\n  qs \\<in> listset [A]\n\ngoal (2 subgoals):\n 1. a = sum_list [a]\n 2. \\<And>qs.\n       qs \\<in> listset [A] \\<and> a = sum_list qs \\<Longrightarrow>\n       qs = [a]", "from this(2)"], ["proof (chain)\npicking this:\n  qs \\<in> listset [A]", "obtain b where qs: \"qs = [b]\""], ["proof (prove)\nusing this:\n  qs \\<in> listset [A]\n\ngoal (1 subgoal):\n 1. (\\<And>b. qs = [b] \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by (rule listset_singletonE)"], ["proof (state)\nthis:\n  qs = [b]\n\ngoal (2 subgoals):\n 1. a = sum_list [a]\n 2. \\<And>qs.\n       qs \\<in> listset [A] \\<and> a = sum_list qs \\<Longrightarrow>\n       qs = [a]", "with a"], ["proof (chain)\npicking this:\n  a = sum_list qs\n  qs = [b]", "show \"qs = [a]\""], ["proof (prove)\nusing this:\n  a = sum_list qs\n  qs = [b]\n\ngoal (1 subgoal):\n 1. qs = [a]", "by simp"], ["proof (state)\nthis:\n  qs = [a]\n\ngoal (1 subgoal):\n 1. a = sum_list [a]", "qed simp_all"], ["proof (state)\nthis:\n  \\<exists>!qs. qs \\<in> listset [A] \\<and> a = sum_list qs\n\ngoal:\nNo subgoals!", "qed"], ["", "(* TODO: Move. *)"], ["", "lemma mset_bij:\n  assumes \"bij_betw f {..<length xs} {..<length ys}\" and \"\\<And>i. i < length xs \\<Longrightarrow> xs ! i = ys ! f i\"\n  shows \"mset xs = mset ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mset xs = mset ys", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. mset xs = mset ys", "from assms(1)"], ["proof (chain)\npicking this:\n  bij_betw f {..<length xs} {..<length ys}", "have 1: \"inj_on f {0..<length xs}\" and 2: \"f ` {0..<length xs} = {0..<length ys}\""], ["proof (prove)\nusing this:\n  bij_betw f {..<length xs} {..<length ys}\n\ngoal (1 subgoal):\n 1. inj_on f {0..<length xs} &&& f ` {0..<length xs} = {0..<length ys}", "by (simp_all add: bij_betw_def lessThan_atLeast0)"], ["proof (state)\nthis:\n  inj_on f {0..<length xs}\n  f ` {0..<length xs} = {0..<length ys}\n\ngoal (1 subgoal):\n 1. mset xs = mset ys", "let ?f = \"(!) ys \\<circ> f\""], ["proof (state)\ngoal (1 subgoal):\n 1. mset xs = mset ys", "have \"xs = map ?f [0..<length xs]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs = map ((!) ys \\<circ> f) [0..<length xs]", "unfolding list_eq_iff_nth_eq"], ["proof (prove)\ngoal (1 subgoal):\n 1. length xs = length (map ((!) ys \\<circ> f) [0..<length xs]) \\<and>\n    (\\<forall>i<length xs.\n        xs ! i = map ((!) ys \\<circ> f) [0..<length xs] ! i)", "proof (intro conjI allI impI)"], ["proof (state)\ngoal (2 subgoals):\n 1. length xs = length (map ((!) ys \\<circ> f) [0..<length xs])\n 2. \\<And>i.\n       i < length xs \\<Longrightarrow>\n       xs ! i = map ((!) ys \\<circ> f) [0..<length xs] ! i", "fix i"], ["proof (state)\ngoal (2 subgoals):\n 1. length xs = length (map ((!) ys \\<circ> f) [0..<length xs])\n 2. \\<And>i.\n       i < length xs \\<Longrightarrow>\n       xs ! i = map ((!) ys \\<circ> f) [0..<length xs] ! i", "assume \"i < length xs\""], ["proof (state)\nthis:\n  i < length xs\n\ngoal (2 subgoals):\n 1. length xs = length (map ((!) ys \\<circ> f) [0..<length xs])\n 2. \\<And>i.\n       i < length xs \\<Longrightarrow>\n       xs ! i = map ((!) ys \\<circ> f) [0..<length xs] ! i", "hence \"xs ! i = ys ! f i\""], ["proof (prove)\nusing this:\n  i < length xs\n\ngoal (1 subgoal):\n 1. xs ! i = ys ! f i", "by (rule assms(2))"], ["proof (state)\nthis:\n  xs ! i = ys ! f i\n\ngoal (2 subgoals):\n 1. length xs = length (map ((!) ys \\<circ> f) [0..<length xs])\n 2. \\<And>i.\n       i < length xs \\<Longrightarrow>\n       xs ! i = map ((!) ys \\<circ> f) [0..<length xs] ! i", "also"], ["proof (state)\nthis:\n  xs ! i = ys ! f i\n\ngoal (2 subgoals):\n 1. length xs = length (map ((!) ys \\<circ> f) [0..<length xs])\n 2. \\<And>i.\n       i < length xs \\<Longrightarrow>\n       xs ! i = map ((!) ys \\<circ> f) [0..<length xs] ! i", "from \\<open>i < length xs\\<close>"], ["proof (chain)\npicking this:\n  i < length xs", "have \"\\<dots> = map ((!) ys \\<circ> f) [0..<length xs] ! i\""], ["proof (prove)\nusing this:\n  i < length xs\n\ngoal (1 subgoal):\n 1. ys ! f i = map ((!) ys \\<circ> f) [0..<length xs] ! i", "by simp"], ["proof (state)\nthis:\n  ys ! f i = map ((!) ys \\<circ> f) [0..<length xs] ! i\n\ngoal (2 subgoals):\n 1. length xs = length (map ((!) ys \\<circ> f) [0..<length xs])\n 2. \\<And>i.\n       i < length xs \\<Longrightarrow>\n       xs ! i = map ((!) ys \\<circ> f) [0..<length xs] ! i", "finally"], ["proof (chain)\npicking this:\n  xs ! i = map ((!) ys \\<circ> f) [0..<length xs] ! i", "show \"xs ! i = map ((!) ys \\<circ> f) [0..<length xs] ! i\""], ["proof (prove)\nusing this:\n  xs ! i = map ((!) ys \\<circ> f) [0..<length xs] ! i\n\ngoal (1 subgoal):\n 1. xs ! i = map ((!) ys \\<circ> f) [0..<length xs] ! i", "."], ["proof (state)\nthis:\n  xs ! i = map ((!) ys \\<circ> f) [0..<length xs] ! i\n\ngoal (1 subgoal):\n 1. length xs = length (map ((!) ys \\<circ> f) [0..<length xs])", "qed simp"], ["proof (state)\nthis:\n  xs = map ((!) ys \\<circ> f) [0..<length xs]\n\ngoal (1 subgoal):\n 1. mset xs = mset ys", "hence \"mset xs = mset (map ?f [0..<length xs])\""], ["proof (prove)\nusing this:\n  xs = map ((!) ys \\<circ> f) [0..<length xs]\n\ngoal (1 subgoal):\n 1. mset xs = mset (map ((!) ys \\<circ> f) [0..<length xs])", "by (rule arg_cong)"], ["proof (state)\nthis:\n  mset xs = mset (map ((!) ys \\<circ> f) [0..<length xs])\n\ngoal (1 subgoal):\n 1. mset xs = mset ys", "also"], ["proof (state)\nthis:\n  mset xs = mset (map ((!) ys \\<circ> f) [0..<length xs])\n\ngoal (1 subgoal):\n 1. mset xs = mset ys", "have \"\\<dots> = image_mset ((!) ys) (image_mset f (mset_set {0..<length xs}))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mset (map ((!) ys \\<circ> f) [0..<length xs]) =\n    image_mset ((!) ys) (image_mset f (mset_set {0..<length xs}))", "by (simp flip: image_mset.comp)"], ["proof (state)\nthis:\n  mset (map ((!) ys \\<circ> f) [0..<length xs]) =\n  image_mset ((!) ys) (image_mset f (mset_set {0..<length xs}))\n\ngoal (1 subgoal):\n 1. mset xs = mset ys", "also"], ["proof (state)\nthis:\n  mset (map ((!) ys \\<circ> f) [0..<length xs]) =\n  image_mset ((!) ys) (image_mset f (mset_set {0..<length xs}))\n\ngoal (1 subgoal):\n 1. mset xs = mset ys", "from 1"], ["proof (chain)\npicking this:\n  inj_on f {0..<length xs}", "have \"\\<dots> = image_mset ((!) ys) (mset_set {0..<length ys})\""], ["proof (prove)\nusing this:\n  inj_on f {0..<length xs}\n\ngoal (1 subgoal):\n 1. image_mset ((!) ys) (image_mset f (mset_set {0..<length xs})) =\n    image_mset ((!) ys) (mset_set {0..<length ys})", "by (simp add: image_mset_mset_set 2)"], ["proof (state)\nthis:\n  image_mset ((!) ys) (image_mset f (mset_set {0..<length xs})) =\n  image_mset ((!) ys) (mset_set {0..<length ys})\n\ngoal (1 subgoal):\n 1. mset xs = mset ys", "also"], ["proof (state)\nthis:\n  image_mset ((!) ys) (image_mset f (mset_set {0..<length xs})) =\n  image_mset ((!) ys) (mset_set {0..<length ys})\n\ngoal (1 subgoal):\n 1. mset xs = mset ys", "have \"\\<dots> = mset (map ((!) ys) [0..<length ys])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. image_mset ((!) ys) (mset_set {0..<length ys}) =\n    mset (map ((!) ys) [0..<length ys])", "by simp"], ["proof (state)\nthis:\n  image_mset ((!) ys) (mset_set {0..<length ys}) =\n  mset (map ((!) ys) [0..<length ys])\n\ngoal (1 subgoal):\n 1. mset xs = mset ys", "finally"], ["proof (chain)\npicking this:\n  mset xs = mset (map ((!) ys) [0..<length ys])", "show \"mset xs = mset ys\""], ["proof (prove)\nusing this:\n  mset xs = mset (map ((!) ys) [0..<length ys])\n\ngoal (1 subgoal):\n 1. mset xs = mset ys", "by (simp only: map_nth)"], ["proof (state)\nthis:\n  mset xs = mset ys\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma direct_decomp_perm:\n  assumes \"direct_decomp A ss1\" and \"perm ss1 ss2\"\n  shows \"direct_decomp A ss2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. direct_decomp A ss2", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. direct_decomp A ss2", "from assms(2)"], ["proof (chain)\npicking this:\n  ss1 <~~> ss2", "have len_ss1: \"length ss1 = length ss2\""], ["proof (prove)\nusing this:\n  ss1 <~~> ss2\n\ngoal (1 subgoal):\n 1. length ss1 = length ss2", "by (rule perm_length)"], ["proof (state)\nthis:\n  length ss1 = length ss2\n\ngoal (1 subgoal):\n 1. direct_decomp A ss2", "from assms(2)"], ["proof (chain)\npicking this:\n  ss1 <~~> ss2", "have \"\\<exists>f. bij_betw f {..<length ss1} {..<length ss2} \\<and> (\\<forall>i<length ss1. ss1 ! i = ss2 ! f i)\""], ["proof (prove)\nusing this:\n  ss1 <~~> ss2\n\ngoal (1 subgoal):\n 1. \\<exists>f.\n       bij_betw f {..<length ss1} {..<length ss2} \\<and>\n       (\\<forall>i<length ss1. ss1 ! i = ss2 ! f i)", "by (rule permutation_Ex_bij)"], ["proof (state)\nthis:\n  \\<exists>f.\n     bij_betw f {..<length ss1} {..<length ss2} \\<and>\n     (\\<forall>i<length ss1. ss1 ! i = ss2 ! f i)\n\ngoal (1 subgoal):\n 1. direct_decomp A ss2", "then"], ["proof (chain)\npicking this:\n  \\<exists>f.\n     bij_betw f {..<length ss1} {..<length ss2} \\<and>\n     (\\<forall>i<length ss1. ss1 ! i = ss2 ! f i)", "obtain f where f_bij: \"bij_betw f {..<length ss2} {..<length ss1}\"\n    and f: \"\\<And>i. i < length ss2 \\<Longrightarrow> ss1 ! i = ss2 ! f i\""], ["proof (prove)\nusing this:\n  \\<exists>f.\n     bij_betw f {..<length ss1} {..<length ss2} \\<and>\n     (\\<forall>i<length ss1. ss1 ! i = ss2 ! f i)\n\ngoal (1 subgoal):\n 1. (\\<And>f.\n        \\<lbrakk>bij_betw f {..<length ss2} {..<length ss1};\n         \\<And>i.\n            i < length ss2 \\<Longrightarrow> ss1 ! i = ss2 ! f i\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding len_ss1"], ["proof (prove)\nusing this:\n  \\<exists>f.\n     bij_betw f {..<length ss2} {..<length ss2} \\<and>\n     (\\<forall>i<length ss2. ss1 ! i = ss2 ! f i)\n\ngoal (1 subgoal):\n 1. (\\<And>f.\n        \\<lbrakk>bij_betw f {..<length ss2} {..<length ss2};\n         \\<And>i.\n            i < length ss2 \\<Longrightarrow> ss1 ! i = ss2 ! f i\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  bij_betw f {..<length ss2} {..<length ss1}\n  ?i < length ss2 \\<Longrightarrow> ss1 ! ?i = ss2 ! f ?i\n\ngoal (1 subgoal):\n 1. direct_decomp A ss2", "define g where \"g = inv_into {..<length ss2} f\""], ["proof (state)\nthis:\n  g = inv_into {..<length ss2} f\n\ngoal (1 subgoal):\n 1. direct_decomp A ss2", "from f_bij"], ["proof (chain)\npicking this:\n  bij_betw f {..<length ss2} {..<length ss1}", "have g_bij: \"bij_betw g {..<length ss1} {..<length ss2}\""], ["proof (prove)\nusing this:\n  bij_betw f {..<length ss2} {..<length ss1}\n\ngoal (1 subgoal):\n 1. bij_betw g {..<length ss1} {..<length ss2}", "unfolding g_def len_ss1"], ["proof (prove)\nusing this:\n  bij_betw f {..<length ss2} {..<length ss2}\n\ngoal (1 subgoal):\n 1. bij_betw (inv_into {..<length ss2} f) {..<length ss2} {..<length ss2}", "by (rule bij_betw_inv_into)"], ["proof (state)\nthis:\n  bij_betw g {..<length ss1} {..<length ss2}\n\ngoal (1 subgoal):\n 1. direct_decomp A ss2", "have f_g: \"f (g i) = i\" if \"i < length ss1\" for i"], ["proof (prove)\ngoal (1 subgoal):\n 1. f (g i) = i", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. f (g i) = i", "from that f_bij"], ["proof (chain)\npicking this:\n  i < length ss1\n  bij_betw f {..<length ss2} {..<length ss1}", "have \"i \\<in> f ` {..<length ss2}\""], ["proof (prove)\nusing this:\n  i < length ss1\n  bij_betw f {..<length ss2} {..<length ss1}\n\ngoal (1 subgoal):\n 1. i \\<in> f ` {..<length ss2}", "by (simp add: bij_betw_def len_ss1)"], ["proof (state)\nthis:\n  i \\<in> f ` {..<length ss2}\n\ngoal (1 subgoal):\n 1. f (g i) = i", "thus ?thesis"], ["proof (prove)\nusing this:\n  i \\<in> f ` {..<length ss2}\n\ngoal (1 subgoal):\n 1. f (g i) = i", "by (simp only: f_inv_into_f g_def)"], ["proof (state)\nthis:\n  f (g i) = i\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?i < length ss1 \\<Longrightarrow> f (g ?i) = ?i\n\ngoal (1 subgoal):\n 1. direct_decomp A ss2", "have g_f: \"g (f i) = i\" if \"i < length ss2\" for i"], ["proof (prove)\ngoal (1 subgoal):\n 1. g (f i) = i", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. g (f i) = i", "from f_bij"], ["proof (chain)\npicking this:\n  bij_betw f {..<length ss2} {..<length ss1}", "have \"inj_on f {..<length ss2}\""], ["proof (prove)\nusing this:\n  bij_betw f {..<length ss2} {..<length ss1}\n\ngoal (1 subgoal):\n 1. inj_on f {..<length ss2}", "by (simp only: bij_betw_def)"], ["proof (state)\nthis:\n  inj_on f {..<length ss2}\n\ngoal (1 subgoal):\n 1. g (f i) = i", "moreover"], ["proof (state)\nthis:\n  inj_on f {..<length ss2}\n\ngoal (1 subgoal):\n 1. g (f i) = i", "from that"], ["proof (chain)\npicking this:\n  i < length ss2", "have \"i \\<in> {..<length ss2}\""], ["proof (prove)\nusing this:\n  i < length ss2\n\ngoal (1 subgoal):\n 1. i \\<in> {..<length ss2}", "by simp"], ["proof (state)\nthis:\n  i \\<in> {..<length ss2}\n\ngoal (1 subgoal):\n 1. g (f i) = i", "ultimately"], ["proof (chain)\npicking this:\n  inj_on f {..<length ss2}\n  i \\<in> {..<length ss2}", "show ?thesis"], ["proof (prove)\nusing this:\n  inj_on f {..<length ss2}\n  i \\<in> {..<length ss2}\n\ngoal (1 subgoal):\n 1. g (f i) = i", "by (simp add: g_def)"], ["proof (state)\nthis:\n  g (f i) = i\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?i < length ss2 \\<Longrightarrow> g (f ?i) = ?i\n\ngoal (1 subgoal):\n 1. direct_decomp A ss2", "have g: \"ss2 ! i = ss1 ! g i\" if \"i < length ss1\" for i"], ["proof (prove)\ngoal (1 subgoal):\n 1. ss2 ! i = ss1 ! g i", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. ss2 ! i = ss1 ! g i", "from that"], ["proof (chain)\npicking this:\n  i < length ss1", "have \"i \\<in> {..<length ss2}\""], ["proof (prove)\nusing this:\n  i < length ss1\n\ngoal (1 subgoal):\n 1. i \\<in> {..<length ss2}", "by (simp add: len_ss1)"], ["proof (state)\nthis:\n  i \\<in> {..<length ss2}\n\ngoal (1 subgoal):\n 1. ss2 ! i = ss1 ! g i", "hence \"g i \\<in> g ` {..<length ss2}\""], ["proof (prove)\nusing this:\n  i \\<in> {..<length ss2}\n\ngoal (1 subgoal):\n 1. g i \\<in> g ` {..<length ss2}", "by (rule imageI)"], ["proof (state)\nthis:\n  g i \\<in> g ` {..<length ss2}\n\ngoal (1 subgoal):\n 1. ss2 ! i = ss1 ! g i", "also"], ["proof (state)\nthis:\n  g i \\<in> g ` {..<length ss2}\n\ngoal (1 subgoal):\n 1. ss2 ! i = ss1 ! g i", "from g_bij"], ["proof (chain)\npicking this:\n  bij_betw g {..<length ss1} {..<length ss2}", "have \"\\<dots> = {..<length ss2}\""], ["proof (prove)\nusing this:\n  bij_betw g {..<length ss1} {..<length ss2}\n\ngoal (1 subgoal):\n 1. g ` {..<length ss2} = {..<length ss2}", "by (simp only: len_ss1 bij_betw_def)"], ["proof (state)\nthis:\n  g ` {..<length ss2} = {..<length ss2}\n\ngoal (1 subgoal):\n 1. ss2 ! i = ss1 ! g i", "finally"], ["proof (chain)\npicking this:\n  g i \\<in> {..<length ss2}", "have \"g i < length ss2\""], ["proof (prove)\nusing this:\n  g i \\<in> {..<length ss2}\n\ngoal (1 subgoal):\n 1. g i < length ss2", "by simp"], ["proof (state)\nthis:\n  g i < length ss2\n\ngoal (1 subgoal):\n 1. ss2 ! i = ss1 ! g i", "hence \"ss1 ! g i = ss2 ! f (g i)\""], ["proof (prove)\nusing this:\n  g i < length ss2\n\ngoal (1 subgoal):\n 1. ss1 ! g i = ss2 ! f (g i)", "by (rule f)"], ["proof (state)\nthis:\n  ss1 ! g i = ss2 ! f (g i)\n\ngoal (1 subgoal):\n 1. ss2 ! i = ss1 ! g i", "with that"], ["proof (chain)\npicking this:\n  i < length ss1\n  ss1 ! g i = ss2 ! f (g i)", "show ?thesis"], ["proof (prove)\nusing this:\n  i < length ss1\n  ss1 ! g i = ss2 ! f (g i)\n\ngoal (1 subgoal):\n 1. ss2 ! i = ss1 ! g i", "by (simp only: f_g)"], ["proof (state)\nthis:\n  ss2 ! i = ss1 ! g i\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?i < length ss1 \\<Longrightarrow> ss2 ! ?i = ss1 ! g ?i\n\ngoal (1 subgoal):\n 1. direct_decomp A ss2", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. direct_decomp A ss2", "proof (rule direct_decompI_alt)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>qs. qs \\<in> listset ss2 \\<Longrightarrow> sum_list qs \\<in> A\n 2. \\<And>a.\n       a \\<in> A \\<Longrightarrow>\n       \\<exists>!qs. qs \\<in> listset ss2 \\<and> a = sum_list qs", "fix qs2"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>qs. qs \\<in> listset ss2 \\<Longrightarrow> sum_list qs \\<in> A\n 2. \\<And>a.\n       a \\<in> A \\<Longrightarrow>\n       \\<exists>!qs. qs \\<in> listset ss2 \\<and> a = sum_list qs", "assume \"qs2 \\<in> listset ss2\""], ["proof (state)\nthis:\n  qs2 \\<in> listset ss2\n\ngoal (2 subgoals):\n 1. \\<And>qs. qs \\<in> listset ss2 \\<Longrightarrow> sum_list qs \\<in> A\n 2. \\<And>a.\n       a \\<in> A \\<Longrightarrow>\n       \\<exists>!qs. qs \\<in> listset ss2 \\<and> a = sum_list qs", "then"], ["proof (chain)\npicking this:\n  qs2 \\<in> listset ss2", "obtain qs1 where qs1_in: \"qs1 \\<in> listset ss1\" and len_qs1: \"length qs1 = length qs2\"\n      and *: \"\\<And>i. i < length qs2 \\<Longrightarrow> qs1 ! i = qs2 ! f i\""], ["proof (prove)\nusing this:\n  qs2 \\<in> listset ss2\n\ngoal (1 subgoal):\n 1. (\\<And>qs1.\n        \\<lbrakk>qs1 \\<in> listset ss1; length qs1 = length qs2;\n         \\<And>i.\n            i < length qs2 \\<Longrightarrow> qs1 ! i = qs2 ! f i\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using f_bij f"], ["proof (prove)\nusing this:\n  qs2 \\<in> listset ss2\n  bij_betw f {..<length ss2} {..<length ss1}\n  ?i < length ss2 \\<Longrightarrow> ss1 ! ?i = ss2 ! f ?i\n\ngoal (1 subgoal):\n 1. (\\<And>qs1.\n        \\<lbrakk>qs1 \\<in> listset ss1; length qs1 = length qs2;\n         \\<And>i.\n            i < length qs2 \\<Longrightarrow> qs1 ! i = qs2 ! f i\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule listset_permE) blast+"], ["proof (state)\nthis:\n  qs1 \\<in> listset ss1\n  length qs1 = length qs2\n  ?i < length qs2 \\<Longrightarrow> qs1 ! ?i = qs2 ! f ?i\n\ngoal (2 subgoals):\n 1. \\<And>qs. qs \\<in> listset ss2 \\<Longrightarrow> sum_list qs \\<in> A\n 2. \\<And>a.\n       a \\<in> A \\<Longrightarrow>\n       \\<exists>!qs. qs \\<in> listset ss2 \\<and> a = sum_list qs", "from \\<open>qs2 \\<in> listset ss2\\<close>"], ["proof (chain)\npicking this:\n  qs2 \\<in> listset ss2", "have \"length qs2 = length ss2\""], ["proof (prove)\nusing this:\n  qs2 \\<in> listset ss2\n\ngoal (1 subgoal):\n 1. length qs2 = length ss2", "by (rule listsetD)"], ["proof (state)\nthis:\n  length qs2 = length ss2\n\ngoal (2 subgoals):\n 1. \\<And>qs. qs \\<in> listset ss2 \\<Longrightarrow> sum_list qs \\<in> A\n 2. \\<And>a.\n       a \\<in> A \\<Longrightarrow>\n       \\<exists>!qs. qs \\<in> listset ss2 \\<and> a = sum_list qs", "with f_bij"], ["proof (chain)\npicking this:\n  bij_betw f {..<length ss2} {..<length ss1}\n  length qs2 = length ss2", "have \"bij_betw f {..<length qs1} {..<length qs2}\""], ["proof (prove)\nusing this:\n  bij_betw f {..<length ss2} {..<length ss1}\n  length qs2 = length ss2\n\ngoal (1 subgoal):\n 1. bij_betw f {..<length qs1} {..<length qs2}", "by (simp only: len_qs1 len_ss1)"], ["proof (state)\nthis:\n  bij_betw f {..<length qs1} {..<length qs2}\n\ngoal (2 subgoals):\n 1. \\<And>qs. qs \\<in> listset ss2 \\<Longrightarrow> sum_list qs \\<in> A\n 2. \\<And>a.\n       a \\<in> A \\<Longrightarrow>\n       \\<exists>!qs. qs \\<in> listset ss2 \\<and> a = sum_list qs", "hence \"mset qs1 = mset qs2\""], ["proof (prove)\nusing this:\n  bij_betw f {..<length qs1} {..<length qs2}\n\ngoal (1 subgoal):\n 1. mset qs1 = mset qs2", "using *"], ["proof (prove)\nusing this:\n  bij_betw f {..<length qs1} {..<length qs2}\n  ?i < length qs2 \\<Longrightarrow> qs1 ! ?i = qs2 ! f ?i\n\ngoal (1 subgoal):\n 1. mset qs1 = mset qs2", "by (rule mset_bij) (simp only: len_qs1)"], ["proof (state)\nthis:\n  mset qs1 = mset qs2\n\ngoal (2 subgoals):\n 1. \\<And>qs. qs \\<in> listset ss2 \\<Longrightarrow> sum_list qs \\<in> A\n 2. \\<And>a.\n       a \\<in> A \\<Longrightarrow>\n       \\<exists>!qs. qs \\<in> listset ss2 \\<and> a = sum_list qs", "hence \"sum_list qs2 = sum_list qs1\""], ["proof (prove)\nusing this:\n  mset qs1 = mset qs2\n\ngoal (1 subgoal):\n 1. sum_list qs2 = sum_list qs1", "by (simp flip: sum_mset_sum_list)"], ["proof (state)\nthis:\n  sum_list qs2 = sum_list qs1\n\ngoal (2 subgoals):\n 1. \\<And>qs. qs \\<in> listset ss2 \\<Longrightarrow> sum_list qs \\<in> A\n 2. \\<And>a.\n       a \\<in> A \\<Longrightarrow>\n       \\<exists>!qs. qs \\<in> listset ss2 \\<and> a = sum_list qs", "also"], ["proof (state)\nthis:\n  sum_list qs2 = sum_list qs1\n\ngoal (2 subgoals):\n 1. \\<And>qs. qs \\<in> listset ss2 \\<Longrightarrow> sum_list qs \\<in> A\n 2. \\<And>a.\n       a \\<in> A \\<Longrightarrow>\n       \\<exists>!qs. qs \\<in> listset ss2 \\<and> a = sum_list qs", "from assms(1) qs1_in"], ["proof (chain)\npicking this:\n  direct_decomp A ss1\n  qs1 \\<in> listset ss1", "have \"\\<dots> \\<in> A\""], ["proof (prove)\nusing this:\n  direct_decomp A ss1\n  qs1 \\<in> listset ss1\n\ngoal (1 subgoal):\n 1. sum_list qs1 \\<in> A", "by (rule direct_decompD)"], ["proof (state)\nthis:\n  sum_list qs1 \\<in> A\n\ngoal (2 subgoals):\n 1. \\<And>qs. qs \\<in> listset ss2 \\<Longrightarrow> sum_list qs \\<in> A\n 2. \\<And>a.\n       a \\<in> A \\<Longrightarrow>\n       \\<exists>!qs. qs \\<in> listset ss2 \\<and> a = sum_list qs", "finally"], ["proof (chain)\npicking this:\n  sum_list qs2 \\<in> A", "show \"sum_list qs2 \\<in> A\""], ["proof (prove)\nusing this:\n  sum_list qs2 \\<in> A\n\ngoal (1 subgoal):\n 1. sum_list qs2 \\<in> A", "."], ["proof (state)\nthis:\n  sum_list qs2 \\<in> A\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       a \\<in> A \\<Longrightarrow>\n       \\<exists>!qs. qs \\<in> listset ss2 \\<and> a = sum_list qs", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a.\n       a \\<in> A \\<Longrightarrow>\n       \\<exists>!qs. qs \\<in> listset ss2 \\<and> a = sum_list qs", "fix a"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a.\n       a \\<in> A \\<Longrightarrow>\n       \\<exists>!qs. qs \\<in> listset ss2 \\<and> a = sum_list qs", "assume \"a \\<in> A\""], ["proof (state)\nthis:\n  a \\<in> A\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       a \\<in> A \\<Longrightarrow>\n       \\<exists>!qs. qs \\<in> listset ss2 \\<and> a = sum_list qs", "with assms(1)"], ["proof (chain)\npicking this:\n  direct_decomp A ss1\n  a \\<in> A", "obtain qs where a: \"a = sum_list qs\" and qs_in: \"qs \\<in> listset ss1\""], ["proof (prove)\nusing this:\n  direct_decomp A ss1\n  a \\<in> A\n\ngoal (1 subgoal):\n 1. (\\<And>qs.\n        \\<lbrakk>a = sum_list qs; qs \\<in> listset ss1\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule direct_decompE)"], ["proof (state)\nthis:\n  a = sum_list qs\n  qs \\<in> listset ss1\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       a \\<in> A \\<Longrightarrow>\n       \\<exists>!qs. qs \\<in> listset ss2 \\<and> a = sum_list qs", "from qs_in"], ["proof (chain)\npicking this:\n  qs \\<in> listset ss1", "obtain qs2 where qs2_in: \"qs2 \\<in> listset ss2\" and len_qs2: \"length qs2 = length qs\"\n      and 1: \"\\<And>i. i < length qs \\<Longrightarrow> qs2 ! i = qs ! g i\""], ["proof (prove)\nusing this:\n  qs \\<in> listset ss1\n\ngoal (1 subgoal):\n 1. (\\<And>qs2.\n        \\<lbrakk>qs2 \\<in> listset ss2; length qs2 = length qs;\n         \\<And>i.\n            i < length qs \\<Longrightarrow> qs2 ! i = qs ! g i\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using g_bij g"], ["proof (prove)\nusing this:\n  qs \\<in> listset ss1\n  bij_betw g {..<length ss1} {..<length ss2}\n  ?i < length ss1 \\<Longrightarrow> ss2 ! ?i = ss1 ! g ?i\n\ngoal (1 subgoal):\n 1. (\\<And>qs2.\n        \\<lbrakk>qs2 \\<in> listset ss2; length qs2 = length qs;\n         \\<And>i.\n            i < length qs \\<Longrightarrow> qs2 ! i = qs ! g i\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule listset_permE) blast+"], ["proof (state)\nthis:\n  qs2 \\<in> listset ss2\n  length qs2 = length qs\n  ?i < length qs \\<Longrightarrow> qs2 ! ?i = qs ! g ?i\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       a \\<in> A \\<Longrightarrow>\n       \\<exists>!qs. qs \\<in> listset ss2 \\<and> a = sum_list qs", "show \"\\<exists>!qs\\<in>listset ss2. a = sum_list qs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>!qs. qs \\<in> listset ss2 \\<and> a = sum_list qs", "proof (intro ex1I conjI allI impI)"], ["proof (state)\ngoal (3 subgoals):\n 1. ?a \\<in> listset ss2\n 2. a = sum_list ?a\n 3. \\<And>qs.\n       qs \\<in> listset ss2 \\<and> a = sum_list qs \\<Longrightarrow> qs = ?a", "from qs_in"], ["proof (chain)\npicking this:\n  qs \\<in> listset ss1", "have len_qs: \"length qs = length ss1\""], ["proof (prove)\nusing this:\n  qs \\<in> listset ss1\n\ngoal (1 subgoal):\n 1. length qs = length ss1", "by (rule listsetD)"], ["proof (state)\nthis:\n  length qs = length ss1\n\ngoal (3 subgoals):\n 1. ?a \\<in> listset ss2\n 2. a = sum_list ?a\n 3. \\<And>qs.\n       qs \\<in> listset ss2 \\<and> a = sum_list qs \\<Longrightarrow> qs = ?a", "with g_bij"], ["proof (chain)\npicking this:\n  bij_betw g {..<length ss1} {..<length ss2}\n  length qs = length ss1", "have g_bij2: \"bij_betw g {..<length qs2} {..<length qs}\""], ["proof (prove)\nusing this:\n  bij_betw g {..<length ss1} {..<length ss2}\n  length qs = length ss1\n\ngoal (1 subgoal):\n 1. bij_betw g {..<length qs2} {..<length qs}", "by (simp only: len_qs2 len_ss1)"], ["proof (state)\nthis:\n  bij_betw g {..<length qs2} {..<length qs}\n\ngoal (3 subgoals):\n 1. ?a \\<in> listset ss2\n 2. a = sum_list ?a\n 3. \\<And>qs.\n       qs \\<in> listset ss2 \\<and> a = sum_list qs \\<Longrightarrow> qs = ?a", "hence \"mset qs2 = mset qs\""], ["proof (prove)\nusing this:\n  bij_betw g {..<length qs2} {..<length qs}\n\ngoal (1 subgoal):\n 1. mset qs2 = mset qs", "using 1"], ["proof (prove)\nusing this:\n  bij_betw g {..<length qs2} {..<length qs}\n  ?i < length qs \\<Longrightarrow> qs2 ! ?i = qs ! g ?i\n\ngoal (1 subgoal):\n 1. mset qs2 = mset qs", "by (rule mset_bij) (simp only: len_qs2)"], ["proof (state)\nthis:\n  mset qs2 = mset qs\n\ngoal (3 subgoals):\n 1. ?a \\<in> listset ss2\n 2. a = sum_list ?a\n 3. \\<And>qs.\n       qs \\<in> listset ss2 \\<and> a = sum_list qs \\<Longrightarrow> qs = ?a", "thus a2: \"a = sum_list qs2\""], ["proof (prove)\nusing this:\n  mset qs2 = mset qs\n\ngoal (1 subgoal):\n 1. a = sum_list qs2", "by (simp only: a flip: sum_mset_sum_list)"], ["proof (state)\nthis:\n  a = sum_list qs2\n\ngoal (2 subgoals):\n 1. qs2 \\<in> listset ss2\n 2. \\<And>qs.\n       qs \\<in> listset ss2 \\<and> a = sum_list qs \\<Longrightarrow>\n       qs = qs2", "fix qs'"], ["proof (state)\ngoal (2 subgoals):\n 1. qs2 \\<in> listset ss2\n 2. \\<And>qs.\n       qs \\<in> listset ss2 \\<and> a = sum_list qs \\<Longrightarrow>\n       qs = qs2", "assume \"qs' \\<in> listset ss2 \\<and> a = sum_list qs'\""], ["proof (state)\nthis:\n  qs' \\<in> listset ss2 \\<and> a = sum_list qs'\n\ngoal (2 subgoals):\n 1. qs2 \\<in> listset ss2\n 2. \\<And>qs.\n       qs \\<in> listset ss2 \\<and> a = sum_list qs \\<Longrightarrow>\n       qs = qs2", "hence qs'_in: \"qs' \\<in> listset ss2\" and a': \"a = sum_list qs'\""], ["proof (prove)\nusing this:\n  qs' \\<in> listset ss2 \\<and> a = sum_list qs'\n\ngoal (1 subgoal):\n 1. qs' \\<in> listset ss2 &&& a = sum_list qs'", "by simp_all"], ["proof (state)\nthis:\n  qs' \\<in> listset ss2\n  a = sum_list qs'\n\ngoal (2 subgoals):\n 1. qs2 \\<in> listset ss2\n 2. \\<And>qs.\n       qs \\<in> listset ss2 \\<and> a = sum_list qs \\<Longrightarrow>\n       qs = qs2", "from this(1)"], ["proof (chain)\npicking this:\n  qs' \\<in> listset ss2", "obtain qs1 where qs1_in: \"qs1 \\<in> listset ss1\" and len_qs1: \"length qs1 = length qs'\"\n      and 2: \"\\<And>i. i < length qs' \\<Longrightarrow> qs1 ! i = qs' ! f i\""], ["proof (prove)\nusing this:\n  qs' \\<in> listset ss2\n\ngoal (1 subgoal):\n 1. (\\<And>qs1.\n        \\<lbrakk>qs1 \\<in> listset ss1; length qs1 = length qs';\n         \\<And>i.\n            i < length qs' \\<Longrightarrow> qs1 ! i = qs' ! f i\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using f_bij f"], ["proof (prove)\nusing this:\n  qs' \\<in> listset ss2\n  bij_betw f {..<length ss2} {..<length ss1}\n  ?i < length ss2 \\<Longrightarrow> ss1 ! ?i = ss2 ! f ?i\n\ngoal (1 subgoal):\n 1. (\\<And>qs1.\n        \\<lbrakk>qs1 \\<in> listset ss1; length qs1 = length qs';\n         \\<And>i.\n            i < length qs' \\<Longrightarrow> qs1 ! i = qs' ! f i\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule listset_permE) blast+"], ["proof (state)\nthis:\n  qs1 \\<in> listset ss1\n  length qs1 = length qs'\n  ?i < length qs' \\<Longrightarrow> qs1 ! ?i = qs' ! f ?i\n\ngoal (2 subgoals):\n 1. qs2 \\<in> listset ss2\n 2. \\<And>qs.\n       qs \\<in> listset ss2 \\<and> a = sum_list qs \\<Longrightarrow>\n       qs = qs2", "from \\<open>qs' \\<in> listset ss2\\<close>"], ["proof (chain)\npicking this:\n  qs' \\<in> listset ss2", "have \"length qs' = length ss2\""], ["proof (prove)\nusing this:\n  qs' \\<in> listset ss2\n\ngoal (1 subgoal):\n 1. length qs' = length ss2", "by (rule listsetD)"], ["proof (state)\nthis:\n  length qs' = length ss2\n\ngoal (2 subgoals):\n 1. qs2 \\<in> listset ss2\n 2. \\<And>qs.\n       qs \\<in> listset ss2 \\<and> a = sum_list qs \\<Longrightarrow>\n       qs = qs2", "with f_bij"], ["proof (chain)\npicking this:\n  bij_betw f {..<length ss2} {..<length ss1}\n  length qs' = length ss2", "have \"bij_betw f {..<length qs1} {..<length qs'}\""], ["proof (prove)\nusing this:\n  bij_betw f {..<length ss2} {..<length ss1}\n  length qs' = length ss2\n\ngoal (1 subgoal):\n 1. bij_betw f {..<length qs1} {..<length qs'}", "by (simp only: len_qs1 len_ss1)"], ["proof (state)\nthis:\n  bij_betw f {..<length qs1} {..<length qs'}\n\ngoal (2 subgoals):\n 1. qs2 \\<in> listset ss2\n 2. \\<And>qs.\n       qs \\<in> listset ss2 \\<and> a = sum_list qs \\<Longrightarrow>\n       qs = qs2", "hence \"mset qs1 = mset qs'\""], ["proof (prove)\nusing this:\n  bij_betw f {..<length qs1} {..<length qs'}\n\ngoal (1 subgoal):\n 1. mset qs1 = mset qs'", "using 2"], ["proof (prove)\nusing this:\n  bij_betw f {..<length qs1} {..<length qs'}\n  ?i < length qs' \\<Longrightarrow> qs1 ! ?i = qs' ! f ?i\n\ngoal (1 subgoal):\n 1. mset qs1 = mset qs'", "by (rule mset_bij) (simp only: len_qs1)"], ["proof (state)\nthis:\n  mset qs1 = mset qs'\n\ngoal (2 subgoals):\n 1. qs2 \\<in> listset ss2\n 2. \\<And>qs.\n       qs \\<in> listset ss2 \\<and> a = sum_list qs \\<Longrightarrow>\n       qs = qs2", "hence \"sum_list qs1 = sum_list qs'\""], ["proof (prove)\nusing this:\n  mset qs1 = mset qs'\n\ngoal (1 subgoal):\n 1. sum_list qs1 = sum_list qs'", "by (simp flip: sum_mset_sum_list)"], ["proof (state)\nthis:\n  sum_list qs1 = sum_list qs'\n\ngoal (2 subgoals):\n 1. qs2 \\<in> listset ss2\n 2. \\<And>qs.\n       qs \\<in> listset ss2 \\<and> a = sum_list qs \\<Longrightarrow>\n       qs = qs2", "hence \"sum_list qs1 = sum_list qs\""], ["proof (prove)\nusing this:\n  sum_list qs1 = sum_list qs'\n\ngoal (1 subgoal):\n 1. sum_list qs1 = sum_list qs", "by (simp only: a flip: a')"], ["proof (state)\nthis:\n  sum_list qs1 = sum_list qs\n\ngoal (2 subgoals):\n 1. qs2 \\<in> listset ss2\n 2. \\<And>qs.\n       qs \\<in> listset ss2 \\<and> a = sum_list qs \\<Longrightarrow>\n       qs = qs2", "with assms(1) qs1_in qs_in"], ["proof (chain)\npicking this:\n  direct_decomp A ss1\n  qs1 \\<in> listset ss1\n  qs \\<in> listset ss1\n  sum_list qs1 = sum_list qs", "have \"qs1 = qs\""], ["proof (prove)\nusing this:\n  direct_decomp A ss1\n  qs1 \\<in> listset ss1\n  qs \\<in> listset ss1\n  sum_list qs1 = sum_list qs\n\ngoal (1 subgoal):\n 1. qs1 = qs", "by (rule direct_decomp_unique)"], ["proof (state)\nthis:\n  qs1 = qs\n\ngoal (2 subgoals):\n 1. qs2 \\<in> listset ss2\n 2. \\<And>qs.\n       qs \\<in> listset ss2 \\<and> a = sum_list qs \\<Longrightarrow>\n       qs = qs2", "show \"qs' = qs2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qs' = qs2", "unfolding list_eq_iff_nth_eq"], ["proof (prove)\ngoal (1 subgoal):\n 1. length qs' = length qs2 \\<and>\n    (\\<forall>i<length qs'. qs' ! i = qs2 ! i)", "proof (intro conjI allI impI)"], ["proof (state)\ngoal (2 subgoals):\n 1. length qs' = length qs2\n 2. \\<And>i. i < length qs' \\<Longrightarrow> qs' ! i = qs2 ! i", "from qs'_in"], ["proof (chain)\npicking this:\n  qs' \\<in> listset ss2", "have \"length qs' = length ss2\""], ["proof (prove)\nusing this:\n  qs' \\<in> listset ss2\n\ngoal (1 subgoal):\n 1. length qs' = length ss2", "by (rule listsetD)"], ["proof (state)\nthis:\n  length qs' = length ss2\n\ngoal (2 subgoals):\n 1. length qs' = length qs2\n 2. \\<And>i. i < length qs' \\<Longrightarrow> qs' ! i = qs2 ! i", "thus eq: \"length qs' = length qs2\""], ["proof (prove)\nusing this:\n  length qs' = length ss2\n\ngoal (1 subgoal):\n 1. length qs' = length qs2", "by (simp only: len_qs2 len_qs len_ss1)"], ["proof (state)\nthis:\n  length qs' = length qs2\n\ngoal (1 subgoal):\n 1. \\<And>i. i < length qs' \\<Longrightarrow> qs' ! i = qs2 ! i", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i. i < length qs' \\<Longrightarrow> qs' ! i = qs2 ! i", "assume \"i < length qs'\""], ["proof (state)\nthis:\n  i < length qs'\n\ngoal (1 subgoal):\n 1. \\<And>i. i < length qs' \\<Longrightarrow> qs' ! i = qs2 ! i", "hence \"i < length qs2\""], ["proof (prove)\nusing this:\n  i < length qs'\n\ngoal (1 subgoal):\n 1. i < length qs2", "by (simp only: eq)"], ["proof (state)\nthis:\n  i < length qs2\n\ngoal (1 subgoal):\n 1. \\<And>i. i < length qs' \\<Longrightarrow> qs' ! i = qs2 ! i", "hence \"i \\<in> {..<length qs2}\" and \"i < length qs\" and \"i < length ss1\""], ["proof (prove)\nusing this:\n  i < length qs2\n\ngoal (1 subgoal):\n 1. i \\<in> {..<length qs2} &&& i < length qs &&& i < length ss1", "by (simp_all add: len_qs2 len_qs)"], ["proof (state)\nthis:\n  i \\<in> {..<length qs2}\n  i < length qs\n  i < length ss1\n\ngoal (1 subgoal):\n 1. \\<And>i. i < length qs' \\<Longrightarrow> qs' ! i = qs2 ! i", "from this(1)"], ["proof (chain)\npicking this:\n  i \\<in> {..<length qs2}", "have \"g i \\<in> g ` {..<length qs2}\""], ["proof (prove)\nusing this:\n  i \\<in> {..<length qs2}\n\ngoal (1 subgoal):\n 1. g i \\<in> g ` {..<length qs2}", "by (rule imageI)"], ["proof (state)\nthis:\n  g i \\<in> g ` {..<length qs2}\n\ngoal (1 subgoal):\n 1. \\<And>i. i < length qs' \\<Longrightarrow> qs' ! i = qs2 ! i", "also"], ["proof (state)\nthis:\n  g i \\<in> g ` {..<length qs2}\n\ngoal (1 subgoal):\n 1. \\<And>i. i < length qs' \\<Longrightarrow> qs' ! i = qs2 ! i", "from g_bij2"], ["proof (chain)\npicking this:\n  bij_betw g {..<length qs2} {..<length qs}", "have \"\\<dots> = {..<length qs}\""], ["proof (prove)\nusing this:\n  bij_betw g {..<length qs2} {..<length qs}\n\ngoal (1 subgoal):\n 1. g ` {..<length qs2} = {..<length qs}", "by (simp only: bij_betw_def)"], ["proof (state)\nthis:\n  g ` {..<length qs2} = {..<length qs}\n\ngoal (1 subgoal):\n 1. \\<And>i. i < length qs' \\<Longrightarrow> qs' ! i = qs2 ! i", "finally"], ["proof (chain)\npicking this:\n  g i \\<in> {..<length qs}", "have \"g i < length qs'\""], ["proof (prove)\nusing this:\n  g i \\<in> {..<length qs}\n\ngoal (1 subgoal):\n 1. g i < length qs'", "by (simp add: eq len_qs2)"], ["proof (state)\nthis:\n  g i < length qs'\n\ngoal (1 subgoal):\n 1. \\<And>i. i < length qs' \\<Longrightarrow> qs' ! i = qs2 ! i", "from \\<open>i < length qs\\<close>"], ["proof (chain)\npicking this:\n  i < length qs", "have \"qs2 ! i = qs ! g i\""], ["proof (prove)\nusing this:\n  i < length qs\n\ngoal (1 subgoal):\n 1. qs2 ! i = qs ! g i", "by (rule 1)"], ["proof (state)\nthis:\n  qs2 ! i = qs ! g i\n\ngoal (1 subgoal):\n 1. \\<And>i. i < length qs' \\<Longrightarrow> qs' ! i = qs2 ! i", "also"], ["proof (state)\nthis:\n  qs2 ! i = qs ! g i\n\ngoal (1 subgoal):\n 1. \\<And>i. i < length qs' \\<Longrightarrow> qs' ! i = qs2 ! i", "have \"\\<dots> = qs1 ! g i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qs ! g i = qs1 ! g i", "by (simp only: \\<open>qs1 = qs\\<close>)"], ["proof (state)\nthis:\n  qs ! g i = qs1 ! g i\n\ngoal (1 subgoal):\n 1. \\<And>i. i < length qs' \\<Longrightarrow> qs' ! i = qs2 ! i", "also"], ["proof (state)\nthis:\n  qs ! g i = qs1 ! g i\n\ngoal (1 subgoal):\n 1. \\<And>i. i < length qs' \\<Longrightarrow> qs' ! i = qs2 ! i", "from \\<open>g i < length qs'\\<close>"], ["proof (chain)\npicking this:\n  g i < length qs'", "have \"\\<dots> = qs' ! f (g i)\""], ["proof (prove)\nusing this:\n  g i < length qs'\n\ngoal (1 subgoal):\n 1. qs1 ! g i = qs' ! f (g i)", "by (rule 2)"], ["proof (state)\nthis:\n  qs1 ! g i = qs' ! f (g i)\n\ngoal (1 subgoal):\n 1. \\<And>i. i < length qs' \\<Longrightarrow> qs' ! i = qs2 ! i", "also"], ["proof (state)\nthis:\n  qs1 ! g i = qs' ! f (g i)\n\ngoal (1 subgoal):\n 1. \\<And>i. i < length qs' \\<Longrightarrow> qs' ! i = qs2 ! i", "from \\<open>i < length ss1\\<close>"], ["proof (chain)\npicking this:\n  i < length ss1", "have \"\\<dots> = qs' ! i\""], ["proof (prove)\nusing this:\n  i < length ss1\n\ngoal (1 subgoal):\n 1. qs' ! f (g i) = qs' ! i", "by (simp only: f_g)"], ["proof (state)\nthis:\n  qs' ! f (g i) = qs' ! i\n\ngoal (1 subgoal):\n 1. \\<And>i. i < length qs' \\<Longrightarrow> qs' ! i = qs2 ! i", "finally"], ["proof (chain)\npicking this:\n  qs2 ! i = qs' ! i", "show \"qs' ! i = qs2 ! i\""], ["proof (prove)\nusing this:\n  qs2 ! i = qs' ! i\n\ngoal (1 subgoal):\n 1. qs' ! i = qs2 ! i", "by (rule sym)"], ["proof (state)\nthis:\n  qs' ! i = qs2 ! i\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  qs' = qs2\n\ngoal (1 subgoal):\n 1. qs2 \\<in> listset ss2", "qed fact"], ["proof (state)\nthis:\n  \\<exists>!qs. qs \\<in> listset ss2 \\<and> a = sum_list qs\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  direct_decomp A ss2\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma direct_decomp_split_map:\n  \"direct_decomp A (map f ss) \\<Longrightarrow> direct_decomp A (map f (filter P ss) @ map f (filter (- P) ss))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. direct_decomp A (map f ss) \\<Longrightarrow>\n    direct_decomp A (map f (filter P ss) @ map f (filter (- P) ss))", "proof (rule direct_decomp_perm)"], ["proof (state)\ngoal (2 subgoals):\n 1. direct_decomp A (map f ss) \\<Longrightarrow> direct_decomp A ?ss1.0\n 2. direct_decomp A (map f ss) \\<Longrightarrow>\n    ?ss1.0 <~~> map f (filter P ss) @ map f (filter (- P) ss)", "show \"perm (map f ss) (map f (filter P ss) @ map f (filter (- P) ss))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map f ss <~~> map f (filter P ss) @ map f (filter (- P) ss)", "proof (induct ss)"], ["proof (state)\ngoal (2 subgoals):\n 1. map f [] <~~> map f (filter P []) @ map f (filter (- P) [])\n 2. \\<And>a ss.\n       map f ss <~~>\n       map f (filter P ss) @ map f (filter (- P) ss) \\<Longrightarrow>\n       map f (a # ss) <~~>\n       map f (filter P (a # ss)) @ map f (filter (- P) (a # ss))", "case Nil"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. map f [] <~~> map f (filter P []) @ map f (filter (- P) [])\n 2. \\<And>a ss.\n       map f ss <~~>\n       map f (filter P ss) @ map f (filter (- P) ss) \\<Longrightarrow>\n       map f (a # ss) <~~>\n       map f (filter P (a # ss)) @ map f (filter (- P) (a # ss))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. map f [] <~~> map f (filter P []) @ map f (filter (- P) [])", "by simp"], ["proof (state)\nthis:\n  map f [] <~~> map f (filter P []) @ map f (filter (- P) [])\n\ngoal (1 subgoal):\n 1. \\<And>a ss.\n       map f ss <~~>\n       map f (filter P ss) @ map f (filter (- P) ss) \\<Longrightarrow>\n       map f (a # ss) <~~>\n       map f (filter P (a # ss)) @ map f (filter (- P) (a # ss))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a ss.\n       map f ss <~~>\n       map f (filter P ss) @ map f (filter (- P) ss) \\<Longrightarrow>\n       map f (a # ss) <~~>\n       map f (filter P (a # ss)) @ map f (filter (- P) (a # ss))", "case (Cons s ss)"], ["proof (state)\nthis:\n  map f ss <~~> map f (filter P ss) @ map f (filter (- P) ss)\n\ngoal (1 subgoal):\n 1. \\<And>a ss.\n       map f ss <~~>\n       map f (filter P ss) @ map f (filter (- P) ss) \\<Longrightarrow>\n       map f (a # ss) <~~>\n       map f (filter P (a # ss)) @ map f (filter (- P) (a # ss))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. map f (s # ss) <~~>\n    map f (filter P (s # ss)) @ map f (filter (- P) (s # ss))", "proof (cases \"P s\")"], ["proof (state)\ngoal (2 subgoals):\n 1. P s \\<Longrightarrow>\n    map f (s # ss) <~~>\n    map f (filter P (s # ss)) @ map f (filter (- P) (s # ss))\n 2. \\<not> P s \\<Longrightarrow>\n    map f (s # ss) <~~>\n    map f (filter P (s # ss)) @ map f (filter (- P) (s # ss))", "case True"], ["proof (state)\nthis:\n  P s\n\ngoal (2 subgoals):\n 1. P s \\<Longrightarrow>\n    map f (s # ss) <~~>\n    map f (filter P (s # ss)) @ map f (filter (- P) (s # ss))\n 2. \\<not> P s \\<Longrightarrow>\n    map f (s # ss) <~~>\n    map f (filter P (s # ss)) @ map f (filter (- P) (s # ss))", "with Cons"], ["proof (chain)\npicking this:\n  map f ss <~~> map f (filter P ss) @ map f (filter (- P) ss)\n  P s", "show ?thesis"], ["proof (prove)\nusing this:\n  map f ss <~~> map f (filter P ss) @ map f (filter (- P) ss)\n  P s\n\ngoal (1 subgoal):\n 1. map f (s # ss) <~~>\n    map f (filter P (s # ss)) @ map f (filter (- P) (s # ss))", "by simp"], ["proof (state)\nthis:\n  map f (s # ss) <~~>\n  map f (filter P (s # ss)) @ map f (filter (- P) (s # ss))\n\ngoal (1 subgoal):\n 1. \\<not> P s \\<Longrightarrow>\n    map f (s # ss) <~~>\n    map f (filter P (s # ss)) @ map f (filter (- P) (s # ss))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> P s \\<Longrightarrow>\n    map f (s # ss) <~~>\n    map f (filter P (s # ss)) @ map f (filter (- P) (s # ss))", "case False"], ["proof (state)\nthis:\n  \\<not> P s\n\ngoal (1 subgoal):\n 1. \\<not> P s \\<Longrightarrow>\n    map f (s # ss) <~~>\n    map f (filter P (s # ss)) @ map f (filter (- P) (s # ss))", "have \"map f (s # ss) = f s # map f ss\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map f (s # ss) = f s # map f ss", "by simp"], ["proof (state)\nthis:\n  map f (s # ss) = f s # map f ss\n\ngoal (1 subgoal):\n 1. \\<not> P s \\<Longrightarrow>\n    map f (s # ss) <~~>\n    map f (filter P (s # ss)) @ map f (filter (- P) (s # ss))", "also"], ["proof (state)\nthis:\n  map f (s # ss) = f s # map f ss\n\ngoal (1 subgoal):\n 1. \\<not> P s \\<Longrightarrow>\n    map f (s # ss) <~~>\n    map f (filter P (s # ss)) @ map f (filter (- P) (s # ss))", "from Cons"], ["proof (chain)\npicking this:\n  map f ss <~~> map f (filter P ss) @ map f (filter (- P) ss)", "have \"perm (f s # map f ss) (f s # map f (filter P ss) @ map f (filter (- P) ss))\""], ["proof (prove)\nusing this:\n  map f ss <~~> map f (filter P ss) @ map f (filter (- P) ss)\n\ngoal (1 subgoal):\n 1. f s # map f ss <~~> f s # map f (filter P ss) @ map f (filter (- P) ss)", "by (rule perm.intros)"], ["proof (state)\nthis:\n  f s # map f ss <~~> f s # map f (filter P ss) @ map f (filter (- P) ss)\n\ngoal (1 subgoal):\n 1. \\<not> P s \\<Longrightarrow>\n    map f (s # ss) <~~>\n    map f (filter P (s # ss)) @ map f (filter (- P) (s # ss))", "also"], ["proof (state)\nthis:\n  f s # map f ss <~~> f s # map f (filter P ss) @ map f (filter (- P) ss)\n\ngoal (1 subgoal):\n 1. \\<not> P s \\<Longrightarrow>\n    map f (s # ss) <~~>\n    map f (filter P (s # ss)) @ map f (filter (- P) (s # ss))", "have \"perm \\<dots> (map f (filter P ss) @ map f (s # filter (- P) ss))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f s # map f (filter P ss) @ map f (filter (- P) ss) <~~>\n    map f (filter P ss) @ map f (s # filter (- P) ss)", "by (simp add: perm_append_Cons)"], ["proof (state)\nthis:\n  f s # map f (filter P ss) @ map f (filter (- P) ss) <~~>\n  map f (filter P ss) @ map f (s # filter (- P) ss)\n\ngoal (1 subgoal):\n 1. \\<not> P s \\<Longrightarrow>\n    map f (s # ss) <~~>\n    map f (filter P (s # ss)) @ map f (filter (- P) (s # ss))", "also(trans)"], ["proof (state)\nthis:\n  f s # map f (filter P ss) @ map f (filter (- P) ss) <~~>\n  map f (filter P ss) @ map f (s # filter (- P) ss)\n\ngoal (1 subgoal):\n 1. \\<not> P s \\<Longrightarrow>\n    map f (s # ss) <~~>\n    map f (filter P (s # ss)) @ map f (filter (- P) (s # ss))", "from False"], ["proof (chain)\npicking this:\n  \\<not> P s", "have \"\\<dots> = map f (filter P (s # ss)) @ map f (filter (- P) (s # ss))\""], ["proof (prove)\nusing this:\n  \\<not> P s\n\ngoal (1 subgoal):\n 1. map f (filter P ss) @ map f (s # filter (- P) ss) =\n    map f (filter P (s # ss)) @ map f (filter (- P) (s # ss))", "by simp"], ["proof (state)\nthis:\n  map f (filter P ss) @ map f (s # filter (- P) ss) =\n  map f (filter P (s # ss)) @ map f (filter (- P) (s # ss))\n\ngoal (1 subgoal):\n 1. \\<not> P s \\<Longrightarrow>\n    map f (s # ss) <~~>\n    map f (filter P (s # ss)) @ map f (filter (- P) (s # ss))", "finally"], ["proof (chain)\npicking this:\n  map f (s # ss) <~~>\n  map f (filter P (s # ss)) @ map f (filter (- P) (s # ss))", "show ?thesis"], ["proof (prove)\nusing this:\n  map f (s # ss) <~~>\n  map f (filter P (s # ss)) @ map f (filter (- P) (s # ss))\n\ngoal (1 subgoal):\n 1. map f (s # ss) <~~>\n    map f (filter P (s # ss)) @ map f (filter (- P) (s # ss))", "."], ["proof (state)\nthis:\n  map f (s # ss) <~~>\n  map f (filter P (s # ss)) @ map f (filter (- P) (s # ss))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  map f (s # ss) <~~>\n  map f (filter P (s # ss)) @ map f (filter (- P) (s # ss))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  map f ss <~~> map f (filter P ss) @ map f (filter (- P) ss)\n\ngoal (1 subgoal):\n 1. direct_decomp A (map f ss) \\<Longrightarrow> direct_decomp A (map f ss)", "qed"], ["", "lemmas direct_decomp_split = direct_decomp_split_map[where f=id, simplified]"], ["", "lemma direct_decomp_direct_decomp:\n  assumes \"direct_decomp A (s # ss)\" and \"direct_decomp s rs\"\n  shows \"direct_decomp A (ss @ rs)\" (is \"direct_decomp A ?ss\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. direct_decomp A (ss @ rs)", "proof (rule direct_decompI_alt)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>qs.\n       qs \\<in> listset (ss @ rs) \\<Longrightarrow> sum_list qs \\<in> A\n 2. \\<And>a.\n       a \\<in> A \\<Longrightarrow>\n       \\<exists>!qs. qs \\<in> listset (ss @ rs) \\<and> a = sum_list qs", "fix qs"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>qs.\n       qs \\<in> listset (ss @ rs) \\<Longrightarrow> sum_list qs \\<in> A\n 2. \\<And>a.\n       a \\<in> A \\<Longrightarrow>\n       \\<exists>!qs. qs \\<in> listset (ss @ rs) \\<and> a = sum_list qs", "assume \"qs \\<in> listset ?ss\""], ["proof (state)\nthis:\n  qs \\<in> listset (ss @ rs)\n\ngoal (2 subgoals):\n 1. \\<And>qs.\n       qs \\<in> listset (ss @ rs) \\<Longrightarrow> sum_list qs \\<in> A\n 2. \\<And>a.\n       a \\<in> A \\<Longrightarrow>\n       \\<exists>!qs. qs \\<in> listset (ss @ rs) \\<and> a = sum_list qs", "then"], ["proof (chain)\npicking this:\n  qs \\<in> listset (ss @ rs)", "obtain qs1 qs2 where qs1: \"qs1 \\<in> listset ss\" and qs2: \"qs2 \\<in> listset rs\" and qs: \"qs = qs1 @ qs2\""], ["proof (prove)\nusing this:\n  qs \\<in> listset (ss @ rs)\n\ngoal (1 subgoal):\n 1. (\\<And>qs1 qs2.\n        \\<lbrakk>qs1 \\<in> listset ss; qs2 \\<in> listset rs;\n         qs = qs1 @ qs2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule listset_appendE)"], ["proof (state)\nthis:\n  qs1 \\<in> listset ss\n  qs2 \\<in> listset rs\n  qs = qs1 @ qs2\n\ngoal (2 subgoals):\n 1. \\<And>qs.\n       qs \\<in> listset (ss @ rs) \\<Longrightarrow> sum_list qs \\<in> A\n 2. \\<And>a.\n       a \\<in> A \\<Longrightarrow>\n       \\<exists>!qs. qs \\<in> listset (ss @ rs) \\<and> a = sum_list qs", "have \"sum_list qs = sum_list ((sum_list qs2) # qs1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum_list qs = sum_list (sum_list qs2 # qs1)", "by (simp add: qs add.commute)"], ["proof (state)\nthis:\n  sum_list qs = sum_list (sum_list qs2 # qs1)\n\ngoal (2 subgoals):\n 1. \\<And>qs.\n       qs \\<in> listset (ss @ rs) \\<Longrightarrow> sum_list qs \\<in> A\n 2. \\<And>a.\n       a \\<in> A \\<Longrightarrow>\n       \\<exists>!qs. qs \\<in> listset (ss @ rs) \\<and> a = sum_list qs", "also"], ["proof (state)\nthis:\n  sum_list qs = sum_list (sum_list qs2 # qs1)\n\ngoal (2 subgoals):\n 1. \\<And>qs.\n       qs \\<in> listset (ss @ rs) \\<Longrightarrow> sum_list qs \\<in> A\n 2. \\<And>a.\n       a \\<in> A \\<Longrightarrow>\n       \\<exists>!qs. qs \\<in> listset (ss @ rs) \\<and> a = sum_list qs", "from assms(1)"], ["proof (chain)\npicking this:\n  direct_decomp A (s # ss)", "have \"\\<dots> \\<in> A\""], ["proof (prove)\nusing this:\n  direct_decomp A (s # ss)\n\ngoal (1 subgoal):\n 1. sum_list (sum_list qs2 # qs1) \\<in> A", "proof (rule direct_decompD)"], ["proof (state)\ngoal (1 subgoal):\n 1. sum_list qs2 # qs1 \\<in> listset (s # ss)", "from assms(2) qs2"], ["proof (chain)\npicking this:\n  direct_decomp s rs\n  qs2 \\<in> listset rs", "have \"sum_list qs2 \\<in> s\""], ["proof (prove)\nusing this:\n  direct_decomp s rs\n  qs2 \\<in> listset rs\n\ngoal (1 subgoal):\n 1. sum_list qs2 \\<in> s", "by (rule direct_decompD)"], ["proof (state)\nthis:\n  sum_list qs2 \\<in> s\n\ngoal (1 subgoal):\n 1. sum_list qs2 # qs1 \\<in> listset (s # ss)", "thus \"sum_list qs2 # qs1 \\<in> listset (s # ss)\""], ["proof (prove)\nusing this:\n  sum_list qs2 \\<in> s\n\ngoal (1 subgoal):\n 1. sum_list qs2 # qs1 \\<in> listset (s # ss)", "using qs1 refl"], ["proof (prove)\nusing this:\n  sum_list qs2 \\<in> s\n  qs1 \\<in> listset ss\n  ?t = ?t\n\ngoal (1 subgoal):\n 1. sum_list qs2 # qs1 \\<in> listset (s # ss)", "by (rule listset_ConsI)"], ["proof (state)\nthis:\n  sum_list qs2 # qs1 \\<in> listset (s # ss)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  sum_list (sum_list qs2 # qs1) \\<in> A\n\ngoal (2 subgoals):\n 1. \\<And>qs.\n       qs \\<in> listset (ss @ rs) \\<Longrightarrow> sum_list qs \\<in> A\n 2. \\<And>a.\n       a \\<in> A \\<Longrightarrow>\n       \\<exists>!qs. qs \\<in> listset (ss @ rs) \\<and> a = sum_list qs", "finally"], ["proof (chain)\npicking this:\n  sum_list qs \\<in> A", "show \"sum_list qs \\<in> A\""], ["proof (prove)\nusing this:\n  sum_list qs \\<in> A\n\ngoal (1 subgoal):\n 1. sum_list qs \\<in> A", "."], ["proof (state)\nthis:\n  sum_list qs \\<in> A\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       a \\<in> A \\<Longrightarrow>\n       \\<exists>!qs. qs \\<in> listset (ss @ rs) \\<and> a = sum_list qs", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a.\n       a \\<in> A \\<Longrightarrow>\n       \\<exists>!qs. qs \\<in> listset (ss @ rs) \\<and> a = sum_list qs", "fix a"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a.\n       a \\<in> A \\<Longrightarrow>\n       \\<exists>!qs. qs \\<in> listset (ss @ rs) \\<and> a = sum_list qs", "assume \"a \\<in> A\""], ["proof (state)\nthis:\n  a \\<in> A\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       a \\<in> A \\<Longrightarrow>\n       \\<exists>!qs. qs \\<in> listset (ss @ rs) \\<and> a = sum_list qs", "with assms(1)"], ["proof (chain)\npicking this:\n  direct_decomp A (s # ss)\n  a \\<in> A", "obtain qs1 where qs1_in: \"qs1 \\<in> listset (s # ss)\" and a: \"a = sum_list qs1\""], ["proof (prove)\nusing this:\n  direct_decomp A (s # ss)\n  a \\<in> A\n\ngoal (1 subgoal):\n 1. (\\<And>qs1.\n        \\<lbrakk>qs1 \\<in> listset (s # ss); a = sum_list qs1\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule direct_decompE)"], ["proof (state)\nthis:\n  qs1 \\<in> listset (s # ss)\n  a = sum_list qs1\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       a \\<in> A \\<Longrightarrow>\n       \\<exists>!qs. qs \\<in> listset (ss @ rs) \\<and> a = sum_list qs", "from qs1_in"], ["proof (chain)\npicking this:\n  qs1 \\<in> listset (s # ss)", "obtain qs11 qs12 where \"qs11 \\<in> s\" and qs12_in: \"qs12 \\<in> listset ss\"\n    and qs1: \"qs1 = qs11 # qs12\""], ["proof (prove)\nusing this:\n  qs1 \\<in> listset (s # ss)\n\ngoal (1 subgoal):\n 1. (\\<And>qs11 qs12.\n        \\<lbrakk>qs11 \\<in> s; qs12 \\<in> listset ss;\n         qs1 = qs11 # qs12\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule listset_ConsE)"], ["proof (state)\nthis:\n  qs11 \\<in> s\n  qs12 \\<in> listset ss\n  qs1 = qs11 # qs12\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       a \\<in> A \\<Longrightarrow>\n       \\<exists>!qs. qs \\<in> listset (ss @ rs) \\<and> a = sum_list qs", "from assms(2) this(1)"], ["proof (chain)\npicking this:\n  direct_decomp s rs\n  qs11 \\<in> s", "obtain qs2 where qs2_in: \"qs2 \\<in> listset rs\" and qs11: \"qs11 = sum_list qs2\""], ["proof (prove)\nusing this:\n  direct_decomp s rs\n  qs11 \\<in> s\n\ngoal (1 subgoal):\n 1. (\\<And>qs2.\n        \\<lbrakk>qs2 \\<in> listset rs; qs11 = sum_list qs2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule direct_decompE)"], ["proof (state)\nthis:\n  qs2 \\<in> listset rs\n  qs11 = sum_list qs2\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       a \\<in> A \\<Longrightarrow>\n       \\<exists>!qs. qs \\<in> listset (ss @ rs) \\<and> a = sum_list qs", "let ?qs = \"qs12 @ qs2\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a.\n       a \\<in> A \\<Longrightarrow>\n       \\<exists>!qs. qs \\<in> listset (ss @ rs) \\<and> a = sum_list qs", "show \"\\<exists>!qs\\<in>listset ?ss. a = sum_list qs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>!qs. qs \\<in> listset (ss @ rs) \\<and> a = sum_list qs", "proof (intro ex1I conjI allI impI)"], ["proof (state)\ngoal (3 subgoals):\n 1. ?a \\<in> listset (ss @ rs)\n 2. a = sum_list ?a\n 3. \\<And>qs.\n       qs \\<in> listset (ss @ rs) \\<and> a = sum_list qs \\<Longrightarrow>\n       qs = ?a", "from qs12_in qs2_in refl"], ["proof (chain)\npicking this:\n  qs12 \\<in> listset ss\n  qs2 \\<in> listset rs\n  ?t = ?t", "show \"?qs \\<in> listset ?ss\""], ["proof (prove)\nusing this:\n  qs12 \\<in> listset ss\n  qs2 \\<in> listset rs\n  ?t = ?t\n\ngoal (1 subgoal):\n 1. qs12 @ qs2 \\<in> listset (ss @ rs)", "by (rule listset_appendI)"], ["proof (state)\nthis:\n  qs12 @ qs2 \\<in> listset (ss @ rs)\n\ngoal (2 subgoals):\n 1. a = sum_list (qs12 @ qs2)\n 2. \\<And>qs.\n       qs \\<in> listset (ss @ rs) \\<and> a = sum_list qs \\<Longrightarrow>\n       qs = qs12 @ qs2", "show \"a = sum_list ?qs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a = sum_list (qs12 @ qs2)", "by (simp add: a qs1 qs11 add.commute)"], ["proof (state)\nthis:\n  a = sum_list (qs12 @ qs2)\n\ngoal (1 subgoal):\n 1. \\<And>qs.\n       qs \\<in> listset (ss @ rs) \\<and> a = sum_list qs \\<Longrightarrow>\n       qs = qs12 @ qs2", "fix qs0"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>qs.\n       qs \\<in> listset (ss @ rs) \\<and> a = sum_list qs \\<Longrightarrow>\n       qs = qs12 @ qs2", "assume \"qs0 \\<in> listset ?ss \\<and> a = sum_list qs0\""], ["proof (state)\nthis:\n  qs0 \\<in> listset (ss @ rs) \\<and> a = sum_list qs0\n\ngoal (1 subgoal):\n 1. \\<And>qs.\n       qs \\<in> listset (ss @ rs) \\<and> a = sum_list qs \\<Longrightarrow>\n       qs = qs12 @ qs2", "hence qs0_in: \"qs0 \\<in> listset ?ss\" and a2: \"a = sum_list qs0\""], ["proof (prove)\nusing this:\n  qs0 \\<in> listset (ss @ rs) \\<and> a = sum_list qs0\n\ngoal (1 subgoal):\n 1. qs0 \\<in> listset (ss @ rs) &&& a = sum_list qs0", "by simp_all"], ["proof (state)\nthis:\n  qs0 \\<in> listset (ss @ rs)\n  a = sum_list qs0\n\ngoal (1 subgoal):\n 1. \\<And>qs.\n       qs \\<in> listset (ss @ rs) \\<and> a = sum_list qs \\<Longrightarrow>\n       qs = qs12 @ qs2", "from this(1)"], ["proof (chain)\npicking this:\n  qs0 \\<in> listset (ss @ rs)", "obtain qs01 qs02 where qs01_in: \"qs01 \\<in> listset ss\" and qs02_in: \"qs02 \\<in> listset rs\"\n      and qs0: \"qs0 = qs01 @ qs02\""], ["proof (prove)\nusing this:\n  qs0 \\<in> listset (ss @ rs)\n\ngoal (1 subgoal):\n 1. (\\<And>qs01 qs02.\n        \\<lbrakk>qs01 \\<in> listset ss; qs02 \\<in> listset rs;\n         qs0 = qs01 @ qs02\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule listset_appendE)"], ["proof (state)\nthis:\n  qs01 \\<in> listset ss\n  qs02 \\<in> listset rs\n  qs0 = qs01 @ qs02\n\ngoal (1 subgoal):\n 1. \\<And>qs.\n       qs \\<in> listset (ss @ rs) \\<and> a = sum_list qs \\<Longrightarrow>\n       qs = qs12 @ qs2", "note assms(1)"], ["proof (state)\nthis:\n  direct_decomp A (s # ss)\n\ngoal (1 subgoal):\n 1. \\<And>qs.\n       qs \\<in> listset (ss @ rs) \\<and> a = sum_list qs \\<Longrightarrow>\n       qs = qs12 @ qs2", "moreover"], ["proof (state)\nthis:\n  direct_decomp A (s # ss)\n\ngoal (1 subgoal):\n 1. \\<And>qs.\n       qs \\<in> listset (ss @ rs) \\<and> a = sum_list qs \\<Longrightarrow>\n       qs = qs12 @ qs2", "from _ qs01_in refl"], ["proof (chain)\npicking this:\n  PROP ?psi \\<Longrightarrow> PROP ?psi\n  qs01 \\<in> listset ss\n  ?t = ?t", "have \"(sum_list qs02) # qs01 \\<in> listset (s # ss)\" (is \"?qs' \\<in> _\")"], ["proof (prove)\nusing this:\n  PROP ?psi \\<Longrightarrow> PROP ?psi\n  qs01 \\<in> listset ss\n  ?t = ?t\n\ngoal (1 subgoal):\n 1. sum_list qs02 # qs01 \\<in> listset (s # ss)", "proof (rule listset_ConsI)"], ["proof (state)\ngoal (1 subgoal):\n 1. sum_list qs02 \\<in> s", "from assms(2) qs02_in"], ["proof (chain)\npicking this:\n  direct_decomp s rs\n  qs02 \\<in> listset rs", "show \"sum_list qs02 \\<in> s\""], ["proof (prove)\nusing this:\n  direct_decomp s rs\n  qs02 \\<in> listset rs\n\ngoal (1 subgoal):\n 1. sum_list qs02 \\<in> s", "by (rule direct_decompD)"], ["proof (state)\nthis:\n  sum_list qs02 \\<in> s\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  sum_list qs02 # qs01 \\<in> listset (s # ss)\n\ngoal (1 subgoal):\n 1. \\<And>qs.\n       qs \\<in> listset (ss @ rs) \\<and> a = sum_list qs \\<Longrightarrow>\n       qs = qs12 @ qs2", "moreover"], ["proof (state)\nthis:\n  sum_list qs02 # qs01 \\<in> listset (s # ss)\n\ngoal (1 subgoal):\n 1. \\<And>qs.\n       qs \\<in> listset (ss @ rs) \\<and> a = sum_list qs \\<Longrightarrow>\n       qs = qs12 @ qs2", "note qs1_in"], ["proof (state)\nthis:\n  qs1 \\<in> listset (s # ss)\n\ngoal (1 subgoal):\n 1. \\<And>qs.\n       qs \\<in> listset (ss @ rs) \\<and> a = sum_list qs \\<Longrightarrow>\n       qs = qs12 @ qs2", "moreover"], ["proof (state)\nthis:\n  qs1 \\<in> listset (s # ss)\n\ngoal (1 subgoal):\n 1. \\<And>qs.\n       qs \\<in> listset (ss @ rs) \\<and> a = sum_list qs \\<Longrightarrow>\n       qs = qs12 @ qs2", "from a2"], ["proof (chain)\npicking this:\n  a = sum_list qs0", "have \"sum_list ?qs' = sum_list qs1\""], ["proof (prove)\nusing this:\n  a = sum_list qs0\n\ngoal (1 subgoal):\n 1. sum_list (sum_list qs02 # qs01) = sum_list qs1", "by (simp add: qs0 a add.commute)"], ["proof (state)\nthis:\n  sum_list (sum_list qs02 # qs01) = sum_list qs1\n\ngoal (1 subgoal):\n 1. \\<And>qs.\n       qs \\<in> listset (ss @ rs) \\<and> a = sum_list qs \\<Longrightarrow>\n       qs = qs12 @ qs2", "ultimately"], ["proof (chain)\npicking this:\n  direct_decomp A (s # ss)\n  sum_list qs02 # qs01 \\<in> listset (s # ss)\n  qs1 \\<in> listset (s # ss)\n  sum_list (sum_list qs02 # qs01) = sum_list qs1", "have \"?qs' = qs11 # qs12\""], ["proof (prove)\nusing this:\n  direct_decomp A (s # ss)\n  sum_list qs02 # qs01 \\<in> listset (s # ss)\n  qs1 \\<in> listset (s # ss)\n  sum_list (sum_list qs02 # qs01) = sum_list qs1\n\ngoal (1 subgoal):\n 1. sum_list qs02 # qs01 = qs11 # qs12", "unfolding qs1"], ["proof (prove)\nusing this:\n  direct_decomp A (s # ss)\n  sum_list qs02 # qs01 \\<in> listset (s # ss)\n  qs11 # qs12 \\<in> listset (s # ss)\n  sum_list (sum_list qs02 # qs01) = sum_list (qs11 # qs12)\n\ngoal (1 subgoal):\n 1. sum_list qs02 # qs01 = qs11 # qs12", "by (rule direct_decomp_unique)"], ["proof (state)\nthis:\n  sum_list qs02 # qs01 = qs11 # qs12\n\ngoal (1 subgoal):\n 1. \\<And>qs.\n       qs \\<in> listset (ss @ rs) \\<and> a = sum_list qs \\<Longrightarrow>\n       qs = qs12 @ qs2", "hence \"qs11 = sum_list qs02\" and 1: \"qs01 = qs12\""], ["proof (prove)\nusing this:\n  sum_list qs02 # qs01 = qs11 # qs12\n\ngoal (1 subgoal):\n 1. qs11 = sum_list qs02 &&& qs01 = qs12", "by simp_all"], ["proof (state)\nthis:\n  qs11 = sum_list qs02\n  qs01 = qs12\n\ngoal (1 subgoal):\n 1. \\<And>qs.\n       qs \\<in> listset (ss @ rs) \\<and> a = sum_list qs \\<Longrightarrow>\n       qs = qs12 @ qs2", "from this(1)"], ["proof (chain)\npicking this:\n  qs11 = sum_list qs02", "have \"sum_list qs02 = sum_list qs2\""], ["proof (prove)\nusing this:\n  qs11 = sum_list qs02\n\ngoal (1 subgoal):\n 1. sum_list qs02 = sum_list qs2", "by (simp only: qs11)"], ["proof (state)\nthis:\n  sum_list qs02 = sum_list qs2\n\ngoal (1 subgoal):\n 1. \\<And>qs.\n       qs \\<in> listset (ss @ rs) \\<and> a = sum_list qs \\<Longrightarrow>\n       qs = qs12 @ qs2", "with assms(2) qs02_in qs2_in"], ["proof (chain)\npicking this:\n  direct_decomp s rs\n  qs02 \\<in> listset rs\n  qs2 \\<in> listset rs\n  sum_list qs02 = sum_list qs2", "have \"qs02 = qs2\""], ["proof (prove)\nusing this:\n  direct_decomp s rs\n  qs02 \\<in> listset rs\n  qs2 \\<in> listset rs\n  sum_list qs02 = sum_list qs2\n\ngoal (1 subgoal):\n 1. qs02 = qs2", "by (rule direct_decomp_unique)"], ["proof (state)\nthis:\n  qs02 = qs2\n\ngoal (1 subgoal):\n 1. \\<And>qs.\n       qs \\<in> listset (ss @ rs) \\<and> a = sum_list qs \\<Longrightarrow>\n       qs = qs12 @ qs2", "thus \"qs0 = qs12 @ qs2\""], ["proof (prove)\nusing this:\n  qs02 = qs2\n\ngoal (1 subgoal):\n 1. qs0 = qs12 @ qs2", "by (simp only: 1 qs0)"], ["proof (state)\nthis:\n  qs0 = qs12 @ qs2\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>!qs. qs \\<in> listset (ss @ rs) \\<and> a = sum_list qs\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma sum_list_map_times: \"sum_list (map ((*) x) xs) = (x::'a::semiring_0) * sum_list xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum_list (map ((*) x) xs) = x * sum_list xs", "by (induct xs) (simp_all add: algebra_simps)"], ["", "lemma direct_decomp_image_times:\n  assumes \"direct_decomp (A::'a::semiring_0 set) ss\" and \"\\<And>a b. x * a = x * b \\<Longrightarrow> x \\<noteq> 0 \\<Longrightarrow> a = b\"\n  shows \"direct_decomp ((*) x ` A) (map ((`) ((*) x)) ss)\" (is \"direct_decomp ?A ?ss\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. direct_decomp ((*) x ` A) (map ((`) ((*) x)) ss)", "proof (rule direct_decompI_alt)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>qs.\n       qs \\<in> listset (map ((`) ((*) x)) ss) \\<Longrightarrow>\n       sum_list qs \\<in> (*) x ` A\n 2. \\<And>a.\n       a \\<in> (*) x ` A \\<Longrightarrow>\n       \\<exists>!qs.\n          qs \\<in> listset (map ((`) ((*) x)) ss) \\<and> a = sum_list qs", "fix qs"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>qs.\n       qs \\<in> listset (map ((`) ((*) x)) ss) \\<Longrightarrow>\n       sum_list qs \\<in> (*) x ` A\n 2. \\<And>a.\n       a \\<in> (*) x ` A \\<Longrightarrow>\n       \\<exists>!qs.\n          qs \\<in> listset (map ((`) ((*) x)) ss) \\<and> a = sum_list qs", "assume \"qs \\<in> listset ?ss\""], ["proof (state)\nthis:\n  qs \\<in> listset (map ((`) ((*) x)) ss)\n\ngoal (2 subgoals):\n 1. \\<And>qs.\n       qs \\<in> listset (map ((`) ((*) x)) ss) \\<Longrightarrow>\n       sum_list qs \\<in> (*) x ` A\n 2. \\<And>a.\n       a \\<in> (*) x ` A \\<Longrightarrow>\n       \\<exists>!qs.\n          qs \\<in> listset (map ((`) ((*) x)) ss) \\<and> a = sum_list qs", "then"], ["proof (chain)\npicking this:\n  qs \\<in> listset (map ((`) ((*) x)) ss)", "obtain qs0 where qs0_in: \"qs0 \\<in> listset ss\" and qs: \"qs = map ((*) x) qs0\""], ["proof (prove)\nusing this:\n  qs \\<in> listset (map ((`) ((*) x)) ss)\n\ngoal (1 subgoal):\n 1. (\\<And>qs0.\n        \\<lbrakk>qs0 \\<in> listset ss; qs = map ((*) x) qs0\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule listset_map_imageE)"], ["proof (state)\nthis:\n  qs0 \\<in> listset ss\n  qs = map ((*) x) qs0\n\ngoal (2 subgoals):\n 1. \\<And>qs.\n       qs \\<in> listset (map ((`) ((*) x)) ss) \\<Longrightarrow>\n       sum_list qs \\<in> (*) x ` A\n 2. \\<And>a.\n       a \\<in> (*) x ` A \\<Longrightarrow>\n       \\<exists>!qs.\n          qs \\<in> listset (map ((`) ((*) x)) ss) \\<and> a = sum_list qs", "have \"sum_list qs = x * sum_list qs0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum_list qs = x * sum_list qs0", "by (simp only: qs sum_list_map_times)"], ["proof (state)\nthis:\n  sum_list qs = x * sum_list qs0\n\ngoal (2 subgoals):\n 1. \\<And>qs.\n       qs \\<in> listset (map ((`) ((*) x)) ss) \\<Longrightarrow>\n       sum_list qs \\<in> (*) x ` A\n 2. \\<And>a.\n       a \\<in> (*) x ` A \\<Longrightarrow>\n       \\<exists>!qs.\n          qs \\<in> listset (map ((`) ((*) x)) ss) \\<and> a = sum_list qs", "moreover"], ["proof (state)\nthis:\n  sum_list qs = x * sum_list qs0\n\ngoal (2 subgoals):\n 1. \\<And>qs.\n       qs \\<in> listset (map ((`) ((*) x)) ss) \\<Longrightarrow>\n       sum_list qs \\<in> (*) x ` A\n 2. \\<And>a.\n       a \\<in> (*) x ` A \\<Longrightarrow>\n       \\<exists>!qs.\n          qs \\<in> listset (map ((`) ((*) x)) ss) \\<and> a = sum_list qs", "from assms(1) qs0_in"], ["proof (chain)\npicking this:\n  direct_decomp A ss\n  qs0 \\<in> listset ss", "have \"sum_list qs0 \\<in> A\""], ["proof (prove)\nusing this:\n  direct_decomp A ss\n  qs0 \\<in> listset ss\n\ngoal (1 subgoal):\n 1. sum_list qs0 \\<in> A", "by (rule direct_decompD)"], ["proof (state)\nthis:\n  sum_list qs0 \\<in> A\n\ngoal (2 subgoals):\n 1. \\<And>qs.\n       qs \\<in> listset (map ((`) ((*) x)) ss) \\<Longrightarrow>\n       sum_list qs \\<in> (*) x ` A\n 2. \\<And>a.\n       a \\<in> (*) x ` A \\<Longrightarrow>\n       \\<exists>!qs.\n          qs \\<in> listset (map ((`) ((*) x)) ss) \\<and> a = sum_list qs", "ultimately"], ["proof (chain)\npicking this:\n  sum_list qs = x * sum_list qs0\n  sum_list qs0 \\<in> A", "show \"sum_list qs \\<in> (*) x ` A\""], ["proof (prove)\nusing this:\n  sum_list qs = x * sum_list qs0\n  sum_list qs0 \\<in> A\n\ngoal (1 subgoal):\n 1. sum_list qs \\<in> (*) x ` A", "by (rule image_eqI)"], ["proof (state)\nthis:\n  sum_list qs \\<in> (*) x ` A\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       a \\<in> (*) x ` A \\<Longrightarrow>\n       \\<exists>!qs.\n          qs \\<in> listset (map ((`) ((*) x)) ss) \\<and> a = sum_list qs", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a.\n       a \\<in> (*) x ` A \\<Longrightarrow>\n       \\<exists>!qs.\n          qs \\<in> listset (map ((`) ((*) x)) ss) \\<and> a = sum_list qs", "fix a"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a.\n       a \\<in> (*) x ` A \\<Longrightarrow>\n       \\<exists>!qs.\n          qs \\<in> listset (map ((`) ((*) x)) ss) \\<and> a = sum_list qs", "assume \"a \\<in> ?A\""], ["proof (state)\nthis:\n  a \\<in> (*) x ` A\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       a \\<in> (*) x ` A \\<Longrightarrow>\n       \\<exists>!qs.\n          qs \\<in> listset (map ((`) ((*) x)) ss) \\<and> a = sum_list qs", "then"], ["proof (chain)\npicking this:\n  a \\<in> (*) x ` A", "obtain a' where \"a' \\<in> A\" and a: \"a = x * a'\""], ["proof (prove)\nusing this:\n  a \\<in> (*) x ` A\n\ngoal (1 subgoal):\n 1. (\\<And>a'.\n        \\<lbrakk>a' \\<in> A; a = x * a'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  a' \\<in> A\n  a = x * a'\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       a \\<in> (*) x ` A \\<Longrightarrow>\n       \\<exists>!qs.\n          qs \\<in> listset (map ((`) ((*) x)) ss) \\<and> a = sum_list qs", "from assms(1) this(1)"], ["proof (chain)\npicking this:\n  direct_decomp A ss\n  a' \\<in> A", "obtain qs' where qs'_in: \"qs' \\<in> listset ss\" and a': \"a' = sum_list qs'\""], ["proof (prove)\nusing this:\n  direct_decomp A ss\n  a' \\<in> A\n\ngoal (1 subgoal):\n 1. (\\<And>qs'.\n        \\<lbrakk>qs' \\<in> listset ss; a' = sum_list qs'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule direct_decompE)"], ["proof (state)\nthis:\n  qs' \\<in> listset ss\n  a' = sum_list qs'\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       a \\<in> (*) x ` A \\<Longrightarrow>\n       \\<exists>!qs.\n          qs \\<in> listset (map ((`) ((*) x)) ss) \\<and> a = sum_list qs", "define qs where \"qs = map ((*) x) qs'\""], ["proof (state)\nthis:\n  qs = map ((*) x) qs'\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       a \\<in> (*) x ` A \\<Longrightarrow>\n       \\<exists>!qs.\n          qs \\<in> listset (map ((`) ((*) x)) ss) \\<and> a = sum_list qs", "show \"\\<exists>!qs\\<in>listset ?ss. a = sum_list qs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>!qs.\n       qs \\<in> listset (map ((`) ((*) x)) ss) \\<and> a = sum_list qs", "proof (intro ex1I conjI allI impI)"], ["proof (state)\ngoal (3 subgoals):\n 1. ?a \\<in> listset (map ((`) ((*) x)) ss)\n 2. a = sum_list ?a\n 3. \\<And>qs.\n       qs \\<in> listset (map ((`) ((*) x)) ss) \\<and>\n       a = sum_list qs \\<Longrightarrow>\n       qs = ?a", "from qs'_in qs_def"], ["proof (chain)\npicking this:\n  qs' \\<in> listset ss\n  qs = map ((*) x) qs'", "show \"qs \\<in> listset ?ss\""], ["proof (prove)\nusing this:\n  qs' \\<in> listset ss\n  qs = map ((*) x) qs'\n\ngoal (1 subgoal):\n 1. qs \\<in> listset (map ((`) ((*) x)) ss)", "by (rule listset_map_imageI)"], ["proof (state)\nthis:\n  qs \\<in> listset (map ((`) ((*) x)) ss)\n\ngoal (2 subgoals):\n 1. a = sum_list qs\n 2. \\<And>qsa.\n       qsa \\<in> listset (map ((`) ((*) x)) ss) \\<and>\n       a = sum_list qsa \\<Longrightarrow>\n       qsa = qs", "fix qs0"], ["proof (state)\ngoal (2 subgoals):\n 1. a = sum_list qs\n 2. \\<And>qsa.\n       qsa \\<in> listset (map ((`) ((*) x)) ss) \\<and>\n       a = sum_list qsa \\<Longrightarrow>\n       qsa = qs", "assume \"qs0 \\<in> listset ?ss \\<and> a = sum_list qs0\""], ["proof (state)\nthis:\n  qs0 \\<in> listset (map ((`) ((*) x)) ss) \\<and> a = sum_list qs0\n\ngoal (2 subgoals):\n 1. a = sum_list qs\n 2. \\<And>qsa.\n       qsa \\<in> listset (map ((`) ((*) x)) ss) \\<and>\n       a = sum_list qsa \\<Longrightarrow>\n       qsa = qs", "hence \"qs0 \\<in> listset ?ss\" and a0: \"a = sum_list qs0\""], ["proof (prove)\nusing this:\n  qs0 \\<in> listset (map ((`) ((*) x)) ss) \\<and> a = sum_list qs0\n\ngoal (1 subgoal):\n 1. qs0 \\<in> listset (map ((`) ((*) x)) ss) &&& a = sum_list qs0", "by simp_all"], ["proof (state)\nthis:\n  qs0 \\<in> listset (map ((`) ((*) x)) ss)\n  a = sum_list qs0\n\ngoal (2 subgoals):\n 1. a = sum_list qs\n 2. \\<And>qsa.\n       qsa \\<in> listset (map ((`) ((*) x)) ss) \\<and>\n       a = sum_list qsa \\<Longrightarrow>\n       qsa = qs", "from this(1)"], ["proof (chain)\npicking this:\n  qs0 \\<in> listset (map ((`) ((*) x)) ss)", "obtain qs1 where qs1_in: \"qs1 \\<in> listset ss\" and qs0: \"qs0 = map ((*) x) qs1\""], ["proof (prove)\nusing this:\n  qs0 \\<in> listset (map ((`) ((*) x)) ss)\n\ngoal (1 subgoal):\n 1. (\\<And>qs1.\n        \\<lbrakk>qs1 \\<in> listset ss; qs0 = map ((*) x) qs1\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule listset_map_imageE)"], ["proof (state)\nthis:\n  qs1 \\<in> listset ss\n  qs0 = map ((*) x) qs1\n\ngoal (2 subgoals):\n 1. a = sum_list qs\n 2. \\<And>qsa.\n       qsa \\<in> listset (map ((`) ((*) x)) ss) \\<and>\n       a = sum_list qsa \\<Longrightarrow>\n       qsa = qs", "show \"qs0 = qs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qs0 = qs", "proof (cases \"x = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. x = (0::'a) \\<Longrightarrow> qs0 = qs\n 2. x \\<noteq> (0::'a) \\<Longrightarrow> qs0 = qs", "case True"], ["proof (state)\nthis:\n  x = (0::'a)\n\ngoal (2 subgoals):\n 1. x = (0::'a) \\<Longrightarrow> qs0 = qs\n 2. x \\<noteq> (0::'a) \\<Longrightarrow> qs0 = qs", "from qs1_in"], ["proof (chain)\npicking this:\n  qs1 \\<in> listset ss", "have \"length qs1 = length ss\""], ["proof (prove)\nusing this:\n  qs1 \\<in> listset ss\n\ngoal (1 subgoal):\n 1. length qs1 = length ss", "by (rule listsetD)"], ["proof (state)\nthis:\n  length qs1 = length ss\n\ngoal (2 subgoals):\n 1. x = (0::'a) \\<Longrightarrow> qs0 = qs\n 2. x \\<noteq> (0::'a) \\<Longrightarrow> qs0 = qs", "moreover"], ["proof (state)\nthis:\n  length qs1 = length ss\n\ngoal (2 subgoals):\n 1. x = (0::'a) \\<Longrightarrow> qs0 = qs\n 2. x \\<noteq> (0::'a) \\<Longrightarrow> qs0 = qs", "from qs'_in"], ["proof (chain)\npicking this:\n  qs' \\<in> listset ss", "have \"length qs' = length ss\""], ["proof (prove)\nusing this:\n  qs' \\<in> listset ss\n\ngoal (1 subgoal):\n 1. length qs' = length ss", "by (rule listsetD)"], ["proof (state)\nthis:\n  length qs' = length ss\n\ngoal (2 subgoals):\n 1. x = (0::'a) \\<Longrightarrow> qs0 = qs\n 2. x \\<noteq> (0::'a) \\<Longrightarrow> qs0 = qs", "ultimately"], ["proof (chain)\npicking this:\n  length qs1 = length ss\n  length qs' = length ss", "show ?thesis"], ["proof (prove)\nusing this:\n  length qs1 = length ss\n  length qs' = length ss\n\ngoal (1 subgoal):\n 1. qs0 = qs", "by (simp add: qs_def qs0 list_eq_iff_nth_eq True)"], ["proof (state)\nthis:\n  qs0 = qs\n\ngoal (1 subgoal):\n 1. x \\<noteq> (0::'a) \\<Longrightarrow> qs0 = qs", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<noteq> (0::'a) \\<Longrightarrow> qs0 = qs", "case False"], ["proof (state)\nthis:\n  x \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. x \\<noteq> (0::'a) \\<Longrightarrow> qs0 = qs", "have \"x * sum_list qs1 = a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x * sum_list qs1 = a", "by (simp only: a0 qs0 sum_list_map_times)"], ["proof (state)\nthis:\n  x * sum_list qs1 = a\n\ngoal (1 subgoal):\n 1. x \\<noteq> (0::'a) \\<Longrightarrow> qs0 = qs", "also"], ["proof (state)\nthis:\n  x * sum_list qs1 = a\n\ngoal (1 subgoal):\n 1. x \\<noteq> (0::'a) \\<Longrightarrow> qs0 = qs", "have \"\\<dots> = x * sum_list qs'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a = x * sum_list qs'", "by (simp only: a' a)"], ["proof (state)\nthis:\n  a = x * sum_list qs'\n\ngoal (1 subgoal):\n 1. x \\<noteq> (0::'a) \\<Longrightarrow> qs0 = qs", "finally"], ["proof (chain)\npicking this:\n  x * sum_list qs1 = x * sum_list qs'", "have \"sum_list qs1 = sum_list qs'\""], ["proof (prove)\nusing this:\n  x * sum_list qs1 = x * sum_list qs'\n\ngoal (1 subgoal):\n 1. sum_list qs1 = sum_list qs'", "using False"], ["proof (prove)\nusing this:\n  x * sum_list qs1 = x * sum_list qs'\n  x \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. sum_list qs1 = sum_list qs'", "by (rule assms(2))"], ["proof (state)\nthis:\n  sum_list qs1 = sum_list qs'\n\ngoal (1 subgoal):\n 1. x \\<noteq> (0::'a) \\<Longrightarrow> qs0 = qs", "with assms(1) qs1_in qs'_in"], ["proof (chain)\npicking this:\n  direct_decomp A ss\n  qs1 \\<in> listset ss\n  qs' \\<in> listset ss\n  sum_list qs1 = sum_list qs'", "have \"qs1 = qs'\""], ["proof (prove)\nusing this:\n  direct_decomp A ss\n  qs1 \\<in> listset ss\n  qs' \\<in> listset ss\n  sum_list qs1 = sum_list qs'\n\ngoal (1 subgoal):\n 1. qs1 = qs'", "by (rule direct_decomp_unique)"], ["proof (state)\nthis:\n  qs1 = qs'\n\ngoal (1 subgoal):\n 1. x \\<noteq> (0::'a) \\<Longrightarrow> qs0 = qs", "thus ?thesis"], ["proof (prove)\nusing this:\n  qs1 = qs'\n\ngoal (1 subgoal):\n 1. qs0 = qs", "by (simp only: qs0 qs_def)"], ["proof (state)\nthis:\n  qs0 = qs\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  qs0 = qs\n\ngoal (1 subgoal):\n 1. a = sum_list qs", "qed (simp only: a a' qs_def sum_list_map_times)"], ["proof (state)\nthis:\n  \\<exists>!qs.\n     qs \\<in> listset (map ((`) ((*) x)) ss) \\<and> a = sum_list qs\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma direct_decomp_appendD:\n  assumes \"direct_decomp A (ss1 @ ss2)\"\n  shows \"{} \\<notin> set ss2 \\<Longrightarrow> direct_decomp (sum_list ` listset ss1) ss1\" (is \"_ \\<Longrightarrow> ?thesis1\")\n    and \"{} \\<notin> set ss1 \\<Longrightarrow> direct_decomp (sum_list ` listset ss2) ss2\" (is \"_ \\<Longrightarrow> ?thesis2\")\n    and \"direct_decomp A [sum_list ` listset ss1, sum_list ` listset ss2]\" (is \"direct_decomp _ ?ss\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. ({} \\<notin> set ss2 \\<Longrightarrow>\n     direct_decomp (sum_list ` listset ss1) ss1) &&&\n    ({} \\<notin> set ss1 \\<Longrightarrow>\n     direct_decomp (sum_list ` listset ss2) ss2) &&&\n    direct_decomp A [sum_list ` listset ss1, sum_list ` listset ss2]", "proof -"], ["proof (state)\ngoal (3 subgoals):\n 1. {} \\<notin> set ss2 \\<Longrightarrow>\n    direct_decomp (sum_list ` listset ss1) ss1\n 2. {} \\<notin> set ss1 \\<Longrightarrow>\n    direct_decomp (sum_list ` listset ss2) ss2\n 3. direct_decomp A [sum_list ` listset ss1, sum_list ` listset ss2]", "have rl: \"direct_decomp (sum_list ` listset ts1) ts1\"\n    if \"direct_decomp A (ts1 @ ts2)\" and \"{} \\<notin> set ts2\" for ts1 ts2"], ["proof (prove)\ngoal (1 subgoal):\n 1. direct_decomp (sum_list ` listset ts1) ts1", "proof (intro direct_decompI inj_onI refl)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> listset ts1; y \\<in> listset ts1;\n        sum_list x = sum_list y\\<rbrakk>\n       \\<Longrightarrow> x = y", "fix qs1 qs2"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> listset ts1; y \\<in> listset ts1;\n        sum_list x = sum_list y\\<rbrakk>\n       \\<Longrightarrow> x = y", "assume qs1: \"qs1 \\<in> listset ts1\" and qs2: \"qs2 \\<in> listset ts1\""], ["proof (state)\nthis:\n  qs1 \\<in> listset ts1\n  qs2 \\<in> listset ts1\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> listset ts1; y \\<in> listset ts1;\n        sum_list x = sum_list y\\<rbrakk>\n       \\<Longrightarrow> x = y", "assume eq: \"sum_list qs1 = sum_list qs2\""], ["proof (state)\nthis:\n  sum_list qs1 = sum_list qs2\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> listset ts1; y \\<in> listset ts1;\n        sum_list x = sum_list y\\<rbrakk>\n       \\<Longrightarrow> x = y", "from that(2)"], ["proof (chain)\npicking this:\n  {} \\<notin> set ts2", "have \"listset ts2 \\<noteq> {}\""], ["proof (prove)\nusing this:\n  {} \\<notin> set ts2\n\ngoal (1 subgoal):\n 1. listset ts2 \\<noteq> {}", "by (simp add: listset_empty_iff)"], ["proof (state)\nthis:\n  listset ts2 \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> listset ts1; y \\<in> listset ts1;\n        sum_list x = sum_list y\\<rbrakk>\n       \\<Longrightarrow> x = y", "then"], ["proof (chain)\npicking this:\n  listset ts2 \\<noteq> {}", "obtain qs3 where qs3: \"qs3 \\<in> listset ts2\""], ["proof (prove)\nusing this:\n  listset ts2 \\<noteq> {}\n\ngoal (1 subgoal):\n 1. (\\<And>qs3.\n        qs3 \\<in> listset ts2 \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  qs3 \\<in> listset ts2\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> listset ts1; y \\<in> listset ts1;\n        sum_list x = sum_list y\\<rbrakk>\n       \\<Longrightarrow> x = y", "note that(1)"], ["proof (state)\nthis:\n  direct_decomp A (ts1 @ ts2)\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> listset ts1; y \\<in> listset ts1;\n        sum_list x = sum_list y\\<rbrakk>\n       \\<Longrightarrow> x = y", "moreover"], ["proof (state)\nthis:\n  direct_decomp A (ts1 @ ts2)\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> listset ts1; y \\<in> listset ts1;\n        sum_list x = sum_list y\\<rbrakk>\n       \\<Longrightarrow> x = y", "from qs1 qs3 refl"], ["proof (chain)\npicking this:\n  qs1 \\<in> listset ts1\n  qs3 \\<in> listset ts2\n  ?t = ?t", "have \"qs1 @ qs3 \\<in> listset (ts1 @ ts2)\""], ["proof (prove)\nusing this:\n  qs1 \\<in> listset ts1\n  qs3 \\<in> listset ts2\n  ?t = ?t\n\ngoal (1 subgoal):\n 1. qs1 @ qs3 \\<in> listset (ts1 @ ts2)", "by (rule listset_appendI)"], ["proof (state)\nthis:\n  qs1 @ qs3 \\<in> listset (ts1 @ ts2)\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> listset ts1; y \\<in> listset ts1;\n        sum_list x = sum_list y\\<rbrakk>\n       \\<Longrightarrow> x = y", "moreover"], ["proof (state)\nthis:\n  qs1 @ qs3 \\<in> listset (ts1 @ ts2)\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> listset ts1; y \\<in> listset ts1;\n        sum_list x = sum_list y\\<rbrakk>\n       \\<Longrightarrow> x = y", "from qs2 qs3 refl"], ["proof (chain)\npicking this:\n  qs2 \\<in> listset ts1\n  qs3 \\<in> listset ts2\n  ?t = ?t", "have \"qs2 @ qs3 \\<in> listset (ts1 @ ts2)\""], ["proof (prove)\nusing this:\n  qs2 \\<in> listset ts1\n  qs3 \\<in> listset ts2\n  ?t = ?t\n\ngoal (1 subgoal):\n 1. qs2 @ qs3 \\<in> listset (ts1 @ ts2)", "by (rule listset_appendI)"], ["proof (state)\nthis:\n  qs2 @ qs3 \\<in> listset (ts1 @ ts2)\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> listset ts1; y \\<in> listset ts1;\n        sum_list x = sum_list y\\<rbrakk>\n       \\<Longrightarrow> x = y", "moreover"], ["proof (state)\nthis:\n  qs2 @ qs3 \\<in> listset (ts1 @ ts2)\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> listset ts1; y \\<in> listset ts1;\n        sum_list x = sum_list y\\<rbrakk>\n       \\<Longrightarrow> x = y", "have \"sum_list (qs1 @ qs3) = sum_list (qs2 @ qs3)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum_list (qs1 @ qs3) = sum_list (qs2 @ qs3)", "by (simp add: eq)"], ["proof (state)\nthis:\n  sum_list (qs1 @ qs3) = sum_list (qs2 @ qs3)\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> listset ts1; y \\<in> listset ts1;\n        sum_list x = sum_list y\\<rbrakk>\n       \\<Longrightarrow> x = y", "ultimately"], ["proof (chain)\npicking this:\n  direct_decomp A (ts1 @ ts2)\n  qs1 @ qs3 \\<in> listset (ts1 @ ts2)\n  qs2 @ qs3 \\<in> listset (ts1 @ ts2)\n  sum_list (qs1 @ qs3) = sum_list (qs2 @ qs3)", "have \"qs1 @ qs3 = qs2 @ qs3\""], ["proof (prove)\nusing this:\n  direct_decomp A (ts1 @ ts2)\n  qs1 @ qs3 \\<in> listset (ts1 @ ts2)\n  qs2 @ qs3 \\<in> listset (ts1 @ ts2)\n  sum_list (qs1 @ qs3) = sum_list (qs2 @ qs3)\n\ngoal (1 subgoal):\n 1. qs1 @ qs3 = qs2 @ qs3", "by (rule direct_decomp_unique)"], ["proof (state)\nthis:\n  qs1 @ qs3 = qs2 @ qs3\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> listset ts1; y \\<in> listset ts1;\n        sum_list x = sum_list y\\<rbrakk>\n       \\<Longrightarrow> x = y", "thus \"qs1 = qs2\""], ["proof (prove)\nusing this:\n  qs1 @ qs3 = qs2 @ qs3\n\ngoal (1 subgoal):\n 1. qs1 = qs2", "by simp"], ["proof (state)\nthis:\n  qs1 = qs2\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<lbrakk>direct_decomp A (?ts1.0 @ ?ts2.0);\n   {} \\<notin> set ?ts2.0\\<rbrakk>\n  \\<Longrightarrow> direct_decomp (sum_list ` listset ?ts1.0) ?ts1.0\n\ngoal (3 subgoals):\n 1. {} \\<notin> set ss2 \\<Longrightarrow>\n    direct_decomp (sum_list ` listset ss1) ss1\n 2. {} \\<notin> set ss1 \\<Longrightarrow>\n    direct_decomp (sum_list ` listset ss2) ss2\n 3. direct_decomp A [sum_list ` listset ss1, sum_list ` listset ss2]", "{"], ["proof (state)\nthis:\n  \\<lbrakk>direct_decomp A (?ts1.0 @ ?ts2.0);\n   {} \\<notin> set ?ts2.0\\<rbrakk>\n  \\<Longrightarrow> direct_decomp (sum_list ` listset ?ts1.0) ?ts1.0\n\ngoal (3 subgoals):\n 1. {} \\<notin> set ss2 \\<Longrightarrow>\n    direct_decomp (sum_list ` listset ss1) ss1\n 2. {} \\<notin> set ss1 \\<Longrightarrow>\n    direct_decomp (sum_list ` listset ss2) ss2\n 3. direct_decomp A [sum_list ` listset ss1, sum_list ` listset ss2]", "assume \"{} \\<notin> set ss2\""], ["proof (state)\nthis:\n  {} \\<notin> set ss2\n\ngoal (3 subgoals):\n 1. {} \\<notin> set ss2 \\<Longrightarrow>\n    direct_decomp (sum_list ` listset ss1) ss1\n 2. {} \\<notin> set ss1 \\<Longrightarrow>\n    direct_decomp (sum_list ` listset ss2) ss2\n 3. direct_decomp A [sum_list ` listset ss1, sum_list ` listset ss2]", "with assms"], ["proof (chain)\npicking this:\n  direct_decomp A (ss1 @ ss2)\n  {} \\<notin> set ss2", "show ?thesis1"], ["proof (prove)\nusing this:\n  direct_decomp A (ss1 @ ss2)\n  {} \\<notin> set ss2\n\ngoal (1 subgoal):\n 1. direct_decomp (sum_list ` listset ss1) ss1", "by (rule rl)"], ["proof (state)\nthis:\n  direct_decomp (sum_list ` listset ss1) ss1\n\ngoal (2 subgoals):\n 1. {} \\<notin> set ss1 \\<Longrightarrow>\n    direct_decomp (sum_list ` listset ss2) ss2\n 2. direct_decomp A [sum_list ` listset ss1, sum_list ` listset ss2]", "}"], ["proof (state)\nthis:\n  {} \\<notin> set ss2 \\<Longrightarrow>\n  direct_decomp (sum_list ` listset ss1) ss1\n\ngoal (2 subgoals):\n 1. {} \\<notin> set ss1 \\<Longrightarrow>\n    direct_decomp (sum_list ` listset ss2) ss2\n 2. direct_decomp A [sum_list ` listset ss1, sum_list ` listset ss2]", "{"], ["proof (state)\nthis:\n  {} \\<notin> set ss2 \\<Longrightarrow>\n  direct_decomp (sum_list ` listset ss1) ss1\n\ngoal (2 subgoals):\n 1. {} \\<notin> set ss1 \\<Longrightarrow>\n    direct_decomp (sum_list ` listset ss2) ss2\n 2. direct_decomp A [sum_list ` listset ss1, sum_list ` listset ss2]", "from assms perm_append_swap"], ["proof (chain)\npicking this:\n  direct_decomp A (ss1 @ ss2)\n  ?xs @ ?ys <~~> ?ys @ ?xs", "have \"direct_decomp A (ss2 @ ss1)\""], ["proof (prove)\nusing this:\n  direct_decomp A (ss1 @ ss2)\n  ?xs @ ?ys <~~> ?ys @ ?xs\n\ngoal (1 subgoal):\n 1. direct_decomp A (ss2 @ ss1)", "by (rule direct_decomp_perm)"], ["proof (state)\nthis:\n  direct_decomp A (ss2 @ ss1)\n\ngoal (2 subgoals):\n 1. {} \\<notin> set ss1 \\<Longrightarrow>\n    direct_decomp (sum_list ` listset ss2) ss2\n 2. direct_decomp A [sum_list ` listset ss1, sum_list ` listset ss2]", "moreover"], ["proof (state)\nthis:\n  direct_decomp A (ss2 @ ss1)\n\ngoal (2 subgoals):\n 1. {} \\<notin> set ss1 \\<Longrightarrow>\n    direct_decomp (sum_list ` listset ss2) ss2\n 2. direct_decomp A [sum_list ` listset ss1, sum_list ` listset ss2]", "assume \"{} \\<notin> set ss1\""], ["proof (state)\nthis:\n  {} \\<notin> set ss1\n\ngoal (2 subgoals):\n 1. {} \\<notin> set ss1 \\<Longrightarrow>\n    direct_decomp (sum_list ` listset ss2) ss2\n 2. direct_decomp A [sum_list ` listset ss1, sum_list ` listset ss2]", "ultimately"], ["proof (chain)\npicking this:\n  direct_decomp A (ss2 @ ss1)\n  {} \\<notin> set ss1", "show ?thesis2"], ["proof (prove)\nusing this:\n  direct_decomp A (ss2 @ ss1)\n  {} \\<notin> set ss1\n\ngoal (1 subgoal):\n 1. direct_decomp (sum_list ` listset ss2) ss2", "by (rule rl)"], ["proof (state)\nthis:\n  direct_decomp (sum_list ` listset ss2) ss2\n\ngoal (1 subgoal):\n 1. direct_decomp A [sum_list ` listset ss1, sum_list ` listset ss2]", "}"], ["proof (state)\nthis:\n  {} \\<notin> set ss1 \\<Longrightarrow>\n  direct_decomp (sum_list ` listset ss2) ss2\n\ngoal (1 subgoal):\n 1. direct_decomp A [sum_list ` listset ss1, sum_list ` listset ss2]", "show \"direct_decomp A ?ss\""], ["proof (prove)\ngoal (1 subgoal):\n 1. direct_decomp A [sum_list ` listset ss1, sum_list ` listset ss2]", "proof (rule direct_decompI_alt)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>qs.\n       qs \\<in> listset\n                 [sum_list ` listset ss1,\n                  sum_list ` listset ss2] \\<Longrightarrow>\n       sum_list qs \\<in> A\n 2. \\<And>a.\n       a \\<in> A \\<Longrightarrow>\n       \\<exists>!qs.\n          qs \\<in> listset\n                    [sum_list ` listset ss1, sum_list ` listset ss2] \\<and>\n          a = sum_list qs", "fix qs"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>qs.\n       qs \\<in> listset\n                 [sum_list ` listset ss1,\n                  sum_list ` listset ss2] \\<Longrightarrow>\n       sum_list qs \\<in> A\n 2. \\<And>a.\n       a \\<in> A \\<Longrightarrow>\n       \\<exists>!qs.\n          qs \\<in> listset\n                    [sum_list ` listset ss1, sum_list ` listset ss2] \\<and>\n          a = sum_list qs", "assume \"qs \\<in> listset ?ss\""], ["proof (state)\nthis:\n  qs \\<in> listset [sum_list ` listset ss1, sum_list ` listset ss2]\n\ngoal (2 subgoals):\n 1. \\<And>qs.\n       qs \\<in> listset\n                 [sum_list ` listset ss1,\n                  sum_list ` listset ss2] \\<Longrightarrow>\n       sum_list qs \\<in> A\n 2. \\<And>a.\n       a \\<in> A \\<Longrightarrow>\n       \\<exists>!qs.\n          qs \\<in> listset\n                    [sum_list ` listset ss1, sum_list ` listset ss2] \\<and>\n          a = sum_list qs", "then"], ["proof (chain)\npicking this:\n  qs \\<in> listset [sum_list ` listset ss1, sum_list ` listset ss2]", "obtain q1 q2 where q1: \"q1 \\<in> sum_list ` listset ss1\" and q2: \"q2 \\<in> sum_list ` listset ss2\"\n      and qs: \"qs = [q1, q2]\""], ["proof (prove)\nusing this:\n  qs \\<in> listset [sum_list ` listset ss1, sum_list ` listset ss2]\n\ngoal (1 subgoal):\n 1. (\\<And>q1 q2.\n        \\<lbrakk>q1 \\<in> sum_list ` listset ss1;\n         q2 \\<in> sum_list ` listset ss2; qs = [q1, q2]\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule listset_doubletonE)"], ["proof (state)\nthis:\n  q1 \\<in> sum_list ` listset ss1\n  q2 \\<in> sum_list ` listset ss2\n  qs = [q1, q2]\n\ngoal (2 subgoals):\n 1. \\<And>qs.\n       qs \\<in> listset\n                 [sum_list ` listset ss1,\n                  sum_list ` listset ss2] \\<Longrightarrow>\n       sum_list qs \\<in> A\n 2. \\<And>a.\n       a \\<in> A \\<Longrightarrow>\n       \\<exists>!qs.\n          qs \\<in> listset\n                    [sum_list ` listset ss1, sum_list ` listset ss2] \\<and>\n          a = sum_list qs", "from q1"], ["proof (chain)\npicking this:\n  q1 \\<in> sum_list ` listset ss1", "obtain qs1 where qs1: \"qs1 \\<in> listset ss1\" and q1: \"q1 = sum_list qs1\""], ["proof (prove)\nusing this:\n  q1 \\<in> sum_list ` listset ss1\n\ngoal (1 subgoal):\n 1. (\\<And>qs1.\n        \\<lbrakk>qs1 \\<in> listset ss1; q1 = sum_list qs1\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  qs1 \\<in> listset ss1\n  q1 = sum_list qs1\n\ngoal (2 subgoals):\n 1. \\<And>qs.\n       qs \\<in> listset\n                 [sum_list ` listset ss1,\n                  sum_list ` listset ss2] \\<Longrightarrow>\n       sum_list qs \\<in> A\n 2. \\<And>a.\n       a \\<in> A \\<Longrightarrow>\n       \\<exists>!qs.\n          qs \\<in> listset\n                    [sum_list ` listset ss1, sum_list ` listset ss2] \\<and>\n          a = sum_list qs", "from q2"], ["proof (chain)\npicking this:\n  q2 \\<in> sum_list ` listset ss2", "obtain qs2 where qs2: \"qs2 \\<in> listset ss2\" and q2: \"q2 = sum_list qs2\""], ["proof (prove)\nusing this:\n  q2 \\<in> sum_list ` listset ss2\n\ngoal (1 subgoal):\n 1. (\\<And>qs2.\n        \\<lbrakk>qs2 \\<in> listset ss2; q2 = sum_list qs2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  qs2 \\<in> listset ss2\n  q2 = sum_list qs2\n\ngoal (2 subgoals):\n 1. \\<And>qs.\n       qs \\<in> listset\n                 [sum_list ` listset ss1,\n                  sum_list ` listset ss2] \\<Longrightarrow>\n       sum_list qs \\<in> A\n 2. \\<And>a.\n       a \\<in> A \\<Longrightarrow>\n       \\<exists>!qs.\n          qs \\<in> listset\n                    [sum_list ` listset ss1, sum_list ` listset ss2] \\<and>\n          a = sum_list qs", "from qs1 qs2 refl"], ["proof (chain)\npicking this:\n  qs1 \\<in> listset ss1\n  qs2 \\<in> listset ss2\n  ?t = ?t", "have \"qs1 @ qs2 \\<in> listset (ss1 @ ss2)\""], ["proof (prove)\nusing this:\n  qs1 \\<in> listset ss1\n  qs2 \\<in> listset ss2\n  ?t = ?t\n\ngoal (1 subgoal):\n 1. qs1 @ qs2 \\<in> listset (ss1 @ ss2)", "by (rule listset_appendI)"], ["proof (state)\nthis:\n  qs1 @ qs2 \\<in> listset (ss1 @ ss2)\n\ngoal (2 subgoals):\n 1. \\<And>qs.\n       qs \\<in> listset\n                 [sum_list ` listset ss1,\n                  sum_list ` listset ss2] \\<Longrightarrow>\n       sum_list qs \\<in> A\n 2. \\<And>a.\n       a \\<in> A \\<Longrightarrow>\n       \\<exists>!qs.\n          qs \\<in> listset\n                    [sum_list ` listset ss1, sum_list ` listset ss2] \\<and>\n          a = sum_list qs", "with assms"], ["proof (chain)\npicking this:\n  direct_decomp A (ss1 @ ss2)\n  qs1 @ qs2 \\<in> listset (ss1 @ ss2)", "have \"sum_list (qs1 @ qs2) \\<in> A\""], ["proof (prove)\nusing this:\n  direct_decomp A (ss1 @ ss2)\n  qs1 @ qs2 \\<in> listset (ss1 @ ss2)\n\ngoal (1 subgoal):\n 1. sum_list (qs1 @ qs2) \\<in> A", "by (rule direct_decompD)"], ["proof (state)\nthis:\n  sum_list (qs1 @ qs2) \\<in> A\n\ngoal (2 subgoals):\n 1. \\<And>qs.\n       qs \\<in> listset\n                 [sum_list ` listset ss1,\n                  sum_list ` listset ss2] \\<Longrightarrow>\n       sum_list qs \\<in> A\n 2. \\<And>a.\n       a \\<in> A \\<Longrightarrow>\n       \\<exists>!qs.\n          qs \\<in> listset\n                    [sum_list ` listset ss1, sum_list ` listset ss2] \\<and>\n          a = sum_list qs", "thus \"sum_list qs \\<in> A\""], ["proof (prove)\nusing this:\n  sum_list (qs1 @ qs2) \\<in> A\n\ngoal (1 subgoal):\n 1. sum_list qs \\<in> A", "by (simp add: qs q1 q2)"], ["proof (state)\nthis:\n  sum_list qs \\<in> A\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       a \\<in> A \\<Longrightarrow>\n       \\<exists>!qs.\n          qs \\<in> listset\n                    [sum_list ` listset ss1, sum_list ` listset ss2] \\<and>\n          a = sum_list qs", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a.\n       a \\<in> A \\<Longrightarrow>\n       \\<exists>!qs.\n          qs \\<in> listset\n                    [sum_list ` listset ss1, sum_list ` listset ss2] \\<and>\n          a = sum_list qs", "fix a"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a.\n       a \\<in> A \\<Longrightarrow>\n       \\<exists>!qs.\n          qs \\<in> listset\n                    [sum_list ` listset ss1, sum_list ` listset ss2] \\<and>\n          a = sum_list qs", "assume \"a \\<in> A\""], ["proof (state)\nthis:\n  a \\<in> A\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       a \\<in> A \\<Longrightarrow>\n       \\<exists>!qs.\n          qs \\<in> listset\n                    [sum_list ` listset ss1, sum_list ` listset ss2] \\<and>\n          a = sum_list qs", "with assms"], ["proof (chain)\npicking this:\n  direct_decomp A (ss1 @ ss2)\n  a \\<in> A", "obtain qs0 where qs0_in: \"qs0 \\<in> listset (ss1 @ ss2)\" and a: \"a = sum_list qs0\""], ["proof (prove)\nusing this:\n  direct_decomp A (ss1 @ ss2)\n  a \\<in> A\n\ngoal (1 subgoal):\n 1. (\\<And>qs0.\n        \\<lbrakk>qs0 \\<in> listset (ss1 @ ss2); a = sum_list qs0\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule direct_decompE)"], ["proof (state)\nthis:\n  qs0 \\<in> listset (ss1 @ ss2)\n  a = sum_list qs0\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       a \\<in> A \\<Longrightarrow>\n       \\<exists>!qs.\n          qs \\<in> listset\n                    [sum_list ` listset ss1, sum_list ` listset ss2] \\<and>\n          a = sum_list qs", "from this(1)"], ["proof (chain)\npicking this:\n  qs0 \\<in> listset (ss1 @ ss2)", "obtain qs1 qs2 where qs1: \"qs1 \\<in> listset ss1\" and qs2: \"qs2 \\<in> listset ss2\"\n      and qs0: \"qs0 = qs1 @ qs2\""], ["proof (prove)\nusing this:\n  qs0 \\<in> listset (ss1 @ ss2)\n\ngoal (1 subgoal):\n 1. (\\<And>qs1 qs2.\n        \\<lbrakk>qs1 \\<in> listset ss1; qs2 \\<in> listset ss2;\n         qs0 = qs1 @ qs2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule listset_appendE)"], ["proof (state)\nthis:\n  qs1 \\<in> listset ss1\n  qs2 \\<in> listset ss2\n  qs0 = qs1 @ qs2\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       a \\<in> A \\<Longrightarrow>\n       \\<exists>!qs.\n          qs \\<in> listset\n                    [sum_list ` listset ss1, sum_list ` listset ss2] \\<and>\n          a = sum_list qs", "from qs1"], ["proof (chain)\npicking this:\n  qs1 \\<in> listset ss1", "have len_qs1: \"length qs1 = length ss1\""], ["proof (prove)\nusing this:\n  qs1 \\<in> listset ss1\n\ngoal (1 subgoal):\n 1. length qs1 = length ss1", "by (rule listsetD)"], ["proof (state)\nthis:\n  length qs1 = length ss1\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       a \\<in> A \\<Longrightarrow>\n       \\<exists>!qs.\n          qs \\<in> listset\n                    [sum_list ` listset ss1, sum_list ` listset ss2] \\<and>\n          a = sum_list qs", "define qs where \"qs = [sum_list qs1, sum_list qs2]\""], ["proof (state)\nthis:\n  qs = [sum_list qs1, sum_list qs2]\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       a \\<in> A \\<Longrightarrow>\n       \\<exists>!qs.\n          qs \\<in> listset\n                    [sum_list ` listset ss1, sum_list ` listset ss2] \\<and>\n          a = sum_list qs", "show \"\\<exists>!qs\\<in>listset ?ss. a = sum_list qs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>!qs.\n       qs \\<in> listset\n                 [sum_list ` listset ss1, sum_list ` listset ss2] \\<and>\n       a = sum_list qs", "proof (intro ex1I conjI)"], ["proof (state)\ngoal (3 subgoals):\n 1. ?a \\<in> listset [sum_list ` listset ss1, sum_list ` listset ss2]\n 2. a = sum_list ?a\n 3. \\<And>qs.\n       qs \\<in> listset\n                 [sum_list ` listset ss1, sum_list ` listset ss2] \\<and>\n       a = sum_list qs \\<Longrightarrow>\n       qs = ?a", "from qs1"], ["proof (chain)\npicking this:\n  qs1 \\<in> listset ss1", "have \"sum_list qs1 \\<in> sum_list ` listset ss1\""], ["proof (prove)\nusing this:\n  qs1 \\<in> listset ss1\n\ngoal (1 subgoal):\n 1. sum_list qs1 \\<in> sum_list ` listset ss1", "by (rule imageI)"], ["proof (state)\nthis:\n  sum_list qs1 \\<in> sum_list ` listset ss1\n\ngoal (3 subgoals):\n 1. ?a \\<in> listset [sum_list ` listset ss1, sum_list ` listset ss2]\n 2. a = sum_list ?a\n 3. \\<And>qs.\n       qs \\<in> listset\n                 [sum_list ` listset ss1, sum_list ` listset ss2] \\<and>\n       a = sum_list qs \\<Longrightarrow>\n       qs = ?a", "moreover"], ["proof (state)\nthis:\n  sum_list qs1 \\<in> sum_list ` listset ss1\n\ngoal (3 subgoals):\n 1. ?a \\<in> listset [sum_list ` listset ss1, sum_list ` listset ss2]\n 2. a = sum_list ?a\n 3. \\<And>qs.\n       qs \\<in> listset\n                 [sum_list ` listset ss1, sum_list ` listset ss2] \\<and>\n       a = sum_list qs \\<Longrightarrow>\n       qs = ?a", "from qs2"], ["proof (chain)\npicking this:\n  qs2 \\<in> listset ss2", "have \"sum_list qs2 \\<in> sum_list ` listset ss2\""], ["proof (prove)\nusing this:\n  qs2 \\<in> listset ss2\n\ngoal (1 subgoal):\n 1. sum_list qs2 \\<in> sum_list ` listset ss2", "by (rule imageI)"], ["proof (state)\nthis:\n  sum_list qs2 \\<in> sum_list ` listset ss2\n\ngoal (3 subgoals):\n 1. ?a \\<in> listset [sum_list ` listset ss1, sum_list ` listset ss2]\n 2. a = sum_list ?a\n 3. \\<And>qs.\n       qs \\<in> listset\n                 [sum_list ` listset ss1, sum_list ` listset ss2] \\<and>\n       a = sum_list qs \\<Longrightarrow>\n       qs = ?a", "ultimately"], ["proof (chain)\npicking this:\n  sum_list qs1 \\<in> sum_list ` listset ss1\n  sum_list qs2 \\<in> sum_list ` listset ss2", "show \"qs \\<in> listset ?ss\""], ["proof (prove)\nusing this:\n  sum_list qs1 \\<in> sum_list ` listset ss1\n  sum_list qs2 \\<in> sum_list ` listset ss2\n\ngoal (1 subgoal):\n 1. qs \\<in> listset [sum_list ` listset ss1, sum_list ` listset ss2]", "using qs_def"], ["proof (prove)\nusing this:\n  sum_list qs1 \\<in> sum_list ` listset ss1\n  sum_list qs2 \\<in> sum_list ` listset ss2\n  qs = [sum_list qs1, sum_list qs2]\n\ngoal (1 subgoal):\n 1. qs \\<in> listset [sum_list ` listset ss1, sum_list ` listset ss2]", "by (rule listset_doubletonI)"], ["proof (state)\nthis:\n  qs \\<in> listset [sum_list ` listset ss1, sum_list ` listset ss2]\n\ngoal (2 subgoals):\n 1. a = sum_list qs\n 2. \\<And>qsa.\n       qsa\n       \\<in> listset [sum_list ` listset ss1, sum_list ` listset ss2] \\<and>\n       a = sum_list qsa \\<Longrightarrow>\n       qsa = qs", "fix qs'"], ["proof (state)\ngoal (2 subgoals):\n 1. a = sum_list qs\n 2. \\<And>qsa.\n       qsa\n       \\<in> listset [sum_list ` listset ss1, sum_list ` listset ss2] \\<and>\n       a = sum_list qsa \\<Longrightarrow>\n       qsa = qs", "assume \"qs' \\<in> listset ?ss \\<and> a = sum_list qs'\""], ["proof (state)\nthis:\n  qs' \\<in> listset [sum_list ` listset ss1, sum_list ` listset ss2] \\<and>\n  a = sum_list qs'\n\ngoal (2 subgoals):\n 1. a = sum_list qs\n 2. \\<And>qsa.\n       qsa\n       \\<in> listset [sum_list ` listset ss1, sum_list ` listset ss2] \\<and>\n       a = sum_list qsa \\<Longrightarrow>\n       qsa = qs", "hence \"qs' \\<in> listset ?ss\" and a': \"a = sum_list qs'\""], ["proof (prove)\nusing this:\n  qs' \\<in> listset [sum_list ` listset ss1, sum_list ` listset ss2] \\<and>\n  a = sum_list qs'\n\ngoal (1 subgoal):\n 1. qs' \\<in> listset [sum_list ` listset ss1, sum_list ` listset ss2] &&&\n    a = sum_list qs'", "by simp_all"], ["proof (state)\nthis:\n  qs' \\<in> listset [sum_list ` listset ss1, sum_list ` listset ss2]\n  a = sum_list qs'\n\ngoal (2 subgoals):\n 1. a = sum_list qs\n 2. \\<And>qsa.\n       qsa\n       \\<in> listset [sum_list ` listset ss1, sum_list ` listset ss2] \\<and>\n       a = sum_list qsa \\<Longrightarrow>\n       qsa = qs", "from this(1)"], ["proof (chain)\npicking this:\n  qs' \\<in> listset [sum_list ` listset ss1, sum_list ` listset ss2]", "obtain q1 q2 where q1: \"q1 \\<in> sum_list ` listset ss1\"\n        and q2: \"q2 \\<in> sum_list ` listset ss2\" and qs': \"qs' = [q1, q2]\""], ["proof (prove)\nusing this:\n  qs' \\<in> listset [sum_list ` listset ss1, sum_list ` listset ss2]\n\ngoal (1 subgoal):\n 1. (\\<And>q1 q2.\n        \\<lbrakk>q1 \\<in> sum_list ` listset ss1;\n         q2 \\<in> sum_list ` listset ss2; qs' = [q1, q2]\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule listset_doubletonE)"], ["proof (state)\nthis:\n  q1 \\<in> sum_list ` listset ss1\n  q2 \\<in> sum_list ` listset ss2\n  qs' = [q1, q2]\n\ngoal (2 subgoals):\n 1. a = sum_list qs\n 2. \\<And>qsa.\n       qsa\n       \\<in> listset [sum_list ` listset ss1, sum_list ` listset ss2] \\<and>\n       a = sum_list qsa \\<Longrightarrow>\n       qsa = qs", "from q1"], ["proof (chain)\npicking this:\n  q1 \\<in> sum_list ` listset ss1", "obtain qs1' where qs1': \"qs1' \\<in> listset ss1\" and q1: \"q1 = sum_list qs1'\""], ["proof (prove)\nusing this:\n  q1 \\<in> sum_list ` listset ss1\n\ngoal (1 subgoal):\n 1. (\\<And>qs1'.\n        \\<lbrakk>qs1' \\<in> listset ss1; q1 = sum_list qs1'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  qs1' \\<in> listset ss1\n  q1 = sum_list qs1'\n\ngoal (2 subgoals):\n 1. a = sum_list qs\n 2. \\<And>qsa.\n       qsa\n       \\<in> listset [sum_list ` listset ss1, sum_list ` listset ss2] \\<and>\n       a = sum_list qsa \\<Longrightarrow>\n       qsa = qs", "from q2"], ["proof (chain)\npicking this:\n  q2 \\<in> sum_list ` listset ss2", "obtain qs2' where qs2': \"qs2' \\<in> listset ss2\" and q2: \"q2 = sum_list qs2'\""], ["proof (prove)\nusing this:\n  q2 \\<in> sum_list ` listset ss2\n\ngoal (1 subgoal):\n 1. (\\<And>qs2'.\n        \\<lbrakk>qs2' \\<in> listset ss2; q2 = sum_list qs2'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  qs2' \\<in> listset ss2\n  q2 = sum_list qs2'\n\ngoal (2 subgoals):\n 1. a = sum_list qs\n 2. \\<And>qsa.\n       qsa\n       \\<in> listset [sum_list ` listset ss1, sum_list ` listset ss2] \\<and>\n       a = sum_list qsa \\<Longrightarrow>\n       qsa = qs", "from qs1'"], ["proof (chain)\npicking this:\n  qs1' \\<in> listset ss1", "have len_qs1': \"length qs1' = length ss1\""], ["proof (prove)\nusing this:\n  qs1' \\<in> listset ss1\n\ngoal (1 subgoal):\n 1. length qs1' = length ss1", "by (rule listsetD)"], ["proof (state)\nthis:\n  length qs1' = length ss1\n\ngoal (2 subgoals):\n 1. a = sum_list qs\n 2. \\<And>qsa.\n       qsa\n       \\<in> listset [sum_list ` listset ss1, sum_list ` listset ss2] \\<and>\n       a = sum_list qsa \\<Longrightarrow>\n       qsa = qs", "note assms"], ["proof (state)\nthis:\n  direct_decomp A (ss1 @ ss2)\n\ngoal (2 subgoals):\n 1. a = sum_list qs\n 2. \\<And>qsa.\n       qsa\n       \\<in> listset [sum_list ` listset ss1, sum_list ` listset ss2] \\<and>\n       a = sum_list qsa \\<Longrightarrow>\n       qsa = qs", "moreover"], ["proof (state)\nthis:\n  direct_decomp A (ss1 @ ss2)\n\ngoal (2 subgoals):\n 1. a = sum_list qs\n 2. \\<And>qsa.\n       qsa\n       \\<in> listset [sum_list ` listset ss1, sum_list ` listset ss2] \\<and>\n       a = sum_list qsa \\<Longrightarrow>\n       qsa = qs", "from qs1' qs2' refl"], ["proof (chain)\npicking this:\n  qs1' \\<in> listset ss1\n  qs2' \\<in> listset ss2\n  ?t = ?t", "have \"qs1' @ qs2' \\<in> listset (ss1 @ ss2)\""], ["proof (prove)\nusing this:\n  qs1' \\<in> listset ss1\n  qs2' \\<in> listset ss2\n  ?t = ?t\n\ngoal (1 subgoal):\n 1. qs1' @ qs2' \\<in> listset (ss1 @ ss2)", "by (rule listset_appendI)"], ["proof (state)\nthis:\n  qs1' @ qs2' \\<in> listset (ss1 @ ss2)\n\ngoal (2 subgoals):\n 1. a = sum_list qs\n 2. \\<And>qsa.\n       qsa\n       \\<in> listset [sum_list ` listset ss1, sum_list ` listset ss2] \\<and>\n       a = sum_list qsa \\<Longrightarrow>\n       qsa = qs", "moreover"], ["proof (state)\nthis:\n  qs1' @ qs2' \\<in> listset (ss1 @ ss2)\n\ngoal (2 subgoals):\n 1. a = sum_list qs\n 2. \\<And>qsa.\n       qsa\n       \\<in> listset [sum_list ` listset ss1, sum_list ` listset ss2] \\<and>\n       a = sum_list qsa \\<Longrightarrow>\n       qsa = qs", "note qs0_in"], ["proof (state)\nthis:\n  qs0 \\<in> listset (ss1 @ ss2)\n\ngoal (2 subgoals):\n 1. a = sum_list qs\n 2. \\<And>qsa.\n       qsa\n       \\<in> listset [sum_list ` listset ss1, sum_list ` listset ss2] \\<and>\n       a = sum_list qsa \\<Longrightarrow>\n       qsa = qs", "moreover"], ["proof (state)\nthis:\n  qs0 \\<in> listset (ss1 @ ss2)\n\ngoal (2 subgoals):\n 1. a = sum_list qs\n 2. \\<And>qsa.\n       qsa\n       \\<in> listset [sum_list ` listset ss1, sum_list ` listset ss2] \\<and>\n       a = sum_list qsa \\<Longrightarrow>\n       qsa = qs", "have \"sum_list (qs1' @ qs2') = sum_list qs0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum_list (qs1' @ qs2') = sum_list qs0", "by (simp add: a' qs' flip: a q1 q2)"], ["proof (state)\nthis:\n  sum_list (qs1' @ qs2') = sum_list qs0\n\ngoal (2 subgoals):\n 1. a = sum_list qs\n 2. \\<And>qsa.\n       qsa\n       \\<in> listset [sum_list ` listset ss1, sum_list ` listset ss2] \\<and>\n       a = sum_list qsa \\<Longrightarrow>\n       qsa = qs", "ultimately"], ["proof (chain)\npicking this:\n  direct_decomp A (ss1 @ ss2)\n  qs1' @ qs2' \\<in> listset (ss1 @ ss2)\n  qs0 \\<in> listset (ss1 @ ss2)\n  sum_list (qs1' @ qs2') = sum_list qs0", "have \"qs1' @ qs2' = qs0\""], ["proof (prove)\nusing this:\n  direct_decomp A (ss1 @ ss2)\n  qs1' @ qs2' \\<in> listset (ss1 @ ss2)\n  qs0 \\<in> listset (ss1 @ ss2)\n  sum_list (qs1' @ qs2') = sum_list qs0\n\ngoal (1 subgoal):\n 1. qs1' @ qs2' = qs0", "by (rule direct_decomp_unique)"], ["proof (state)\nthis:\n  qs1' @ qs2' = qs0\n\ngoal (2 subgoals):\n 1. a = sum_list qs\n 2. \\<And>qsa.\n       qsa\n       \\<in> listset [sum_list ` listset ss1, sum_list ` listset ss2] \\<and>\n       a = sum_list qsa \\<Longrightarrow>\n       qsa = qs", "also"], ["proof (state)\nthis:\n  qs1' @ qs2' = qs0\n\ngoal (2 subgoals):\n 1. a = sum_list qs\n 2. \\<And>qsa.\n       qsa\n       \\<in> listset [sum_list ` listset ss1, sum_list ` listset ss2] \\<and>\n       a = sum_list qsa \\<Longrightarrow>\n       qsa = qs", "have \"\\<dots> = qs1 @ qs2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qs0 = qs1 @ qs2", "by fact"], ["proof (state)\nthis:\n  qs0 = qs1 @ qs2\n\ngoal (2 subgoals):\n 1. a = sum_list qs\n 2. \\<And>qsa.\n       qsa\n       \\<in> listset [sum_list ` listset ss1, sum_list ` listset ss2] \\<and>\n       a = sum_list qsa \\<Longrightarrow>\n       qsa = qs", "finally"], ["proof (chain)\npicking this:\n  qs1' @ qs2' = qs1 @ qs2", "show \"qs' = qs\""], ["proof (prove)\nusing this:\n  qs1' @ qs2' = qs1 @ qs2\n\ngoal (1 subgoal):\n 1. qs' = qs", "by (simp add: qs_def qs' q1 q2 len_qs1 len_qs1')"], ["proof (state)\nthis:\n  qs' = qs\n\ngoal (1 subgoal):\n 1. a = sum_list qs", "qed (simp add: qs_def a qs0)"], ["proof (state)\nthis:\n  \\<exists>!qs.\n     qs \\<in> listset\n               [sum_list ` listset ss1, sum_list ` listset ss2] \\<and>\n     a = sum_list qs\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  direct_decomp A [sum_list ` listset ss1, sum_list ` listset ss2]\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma direct_decomp_Cons_zeroI:\n  assumes \"direct_decomp A ss\"\n  shows \"direct_decomp A ({0} # ss)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. direct_decomp A ({0::'a} # ss)", "proof (rule direct_decompI_alt)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>qs.\n       qs \\<in> listset ({0::'a} # ss) \\<Longrightarrow> sum_list qs \\<in> A\n 2. \\<And>a.\n       a \\<in> A \\<Longrightarrow>\n       \\<exists>!qs. qs \\<in> listset ({0::'a} # ss) \\<and> a = sum_list qs", "fix qs"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>qs.\n       qs \\<in> listset ({0::'a} # ss) \\<Longrightarrow> sum_list qs \\<in> A\n 2. \\<And>a.\n       a \\<in> A \\<Longrightarrow>\n       \\<exists>!qs. qs \\<in> listset ({0::'a} # ss) \\<and> a = sum_list qs", "assume \"qs \\<in> listset ({0} # ss)\""], ["proof (state)\nthis:\n  qs \\<in> listset ({0::'a} # ss)\n\ngoal (2 subgoals):\n 1. \\<And>qs.\n       qs \\<in> listset ({0::'a} # ss) \\<Longrightarrow> sum_list qs \\<in> A\n 2. \\<And>a.\n       a \\<in> A \\<Longrightarrow>\n       \\<exists>!qs. qs \\<in> listset ({0::'a} # ss) \\<and> a = sum_list qs", "then"], ["proof (chain)\npicking this:\n  qs \\<in> listset ({0::'a} # ss)", "obtain q qs' where \"q \\<in> {0}\" and \"qs' \\<in> listset ss\" and \"qs = q # qs'\""], ["proof (prove)\nusing this:\n  qs \\<in> listset ({0::'a} # ss)\n\ngoal (1 subgoal):\n 1. (\\<And>q qs'.\n        \\<lbrakk>q \\<in> {0::'a}; qs' \\<in> listset ss;\n         qs = q # qs'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule listset_ConsE)"], ["proof (state)\nthis:\n  q \\<in> {0::'a}\n  qs' \\<in> listset ss\n  qs = q # qs'\n\ngoal (2 subgoals):\n 1. \\<And>qs.\n       qs \\<in> listset ({0::'a} # ss) \\<Longrightarrow> sum_list qs \\<in> A\n 2. \\<And>a.\n       a \\<in> A \\<Longrightarrow>\n       \\<exists>!qs. qs \\<in> listset ({0::'a} # ss) \\<and> a = sum_list qs", "from this(1, 3)"], ["proof (chain)\npicking this:\n  q \\<in> {0::'a}\n  qs = q # qs'", "have \"sum_list qs = sum_list qs'\""], ["proof (prove)\nusing this:\n  q \\<in> {0::'a}\n  qs = q # qs'\n\ngoal (1 subgoal):\n 1. sum_list qs = sum_list qs'", "by simp"], ["proof (state)\nthis:\n  sum_list qs = sum_list qs'\n\ngoal (2 subgoals):\n 1. \\<And>qs.\n       qs \\<in> listset ({0::'a} # ss) \\<Longrightarrow> sum_list qs \\<in> A\n 2. \\<And>a.\n       a \\<in> A \\<Longrightarrow>\n       \\<exists>!qs. qs \\<in> listset ({0::'a} # ss) \\<and> a = sum_list qs", "also"], ["proof (state)\nthis:\n  sum_list qs = sum_list qs'\n\ngoal (2 subgoals):\n 1. \\<And>qs.\n       qs \\<in> listset ({0::'a} # ss) \\<Longrightarrow> sum_list qs \\<in> A\n 2. \\<And>a.\n       a \\<in> A \\<Longrightarrow>\n       \\<exists>!qs. qs \\<in> listset ({0::'a} # ss) \\<and> a = sum_list qs", "from assms \\<open>qs' \\<in> listset ss\\<close>"], ["proof (chain)\npicking this:\n  direct_decomp A ss\n  qs' \\<in> listset ss", "have \"\\<dots> \\<in> A\""], ["proof (prove)\nusing this:\n  direct_decomp A ss\n  qs' \\<in> listset ss\n\ngoal (1 subgoal):\n 1. sum_list qs' \\<in> A", "by (rule direct_decompD)"], ["proof (state)\nthis:\n  sum_list qs' \\<in> A\n\ngoal (2 subgoals):\n 1. \\<And>qs.\n       qs \\<in> listset ({0::'a} # ss) \\<Longrightarrow> sum_list qs \\<in> A\n 2. \\<And>a.\n       a \\<in> A \\<Longrightarrow>\n       \\<exists>!qs. qs \\<in> listset ({0::'a} # ss) \\<and> a = sum_list qs", "finally"], ["proof (chain)\npicking this:\n  sum_list qs \\<in> A", "show \"sum_list qs \\<in> A\""], ["proof (prove)\nusing this:\n  sum_list qs \\<in> A\n\ngoal (1 subgoal):\n 1. sum_list qs \\<in> A", "."], ["proof (state)\nthis:\n  sum_list qs \\<in> A\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       a \\<in> A \\<Longrightarrow>\n       \\<exists>!qs. qs \\<in> listset ({0::'a} # ss) \\<and> a = sum_list qs", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a.\n       a \\<in> A \\<Longrightarrow>\n       \\<exists>!qs. qs \\<in> listset ({0::'a} # ss) \\<and> a = sum_list qs", "fix a"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a.\n       a \\<in> A \\<Longrightarrow>\n       \\<exists>!qs. qs \\<in> listset ({0::'a} # ss) \\<and> a = sum_list qs", "assume \"a \\<in> A\""], ["proof (state)\nthis:\n  a \\<in> A\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       a \\<in> A \\<Longrightarrow>\n       \\<exists>!qs. qs \\<in> listset ({0::'a} # ss) \\<and> a = sum_list qs", "with assms"], ["proof (chain)\npicking this:\n  direct_decomp A ss\n  a \\<in> A", "obtain qs' where qs': \"qs' \\<in> listset ss\" and a: \"a = sum_list qs'\""], ["proof (prove)\nusing this:\n  direct_decomp A ss\n  a \\<in> A\n\ngoal (1 subgoal):\n 1. (\\<And>qs'.\n        \\<lbrakk>qs' \\<in> listset ss; a = sum_list qs'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule direct_decompE)"], ["proof (state)\nthis:\n  qs' \\<in> listset ss\n  a = sum_list qs'\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       a \\<in> A \\<Longrightarrow>\n       \\<exists>!qs. qs \\<in> listset ({0::'a} # ss) \\<and> a = sum_list qs", "define qs where \"qs = 0 # qs'\""], ["proof (state)\nthis:\n  qs = (0::'a) # qs'\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       a \\<in> A \\<Longrightarrow>\n       \\<exists>!qs. qs \\<in> listset ({0::'a} # ss) \\<and> a = sum_list qs", "show \"\\<exists>!qs. qs \\<in> listset ({0} # ss) \\<and> a = sum_list qs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>!qs. qs \\<in> listset ({0::'a} # ss) \\<and> a = sum_list qs", "proof (intro ex1I conjI)"], ["proof (state)\ngoal (3 subgoals):\n 1. ?a \\<in> listset ({0::'a} # ss)\n 2. a = sum_list ?a\n 3. \\<And>qs.\n       qs \\<in> listset ({0::'a} # ss) \\<and>\n       a = sum_list qs \\<Longrightarrow>\n       qs = ?a", "from _ qs' qs_def"], ["proof (chain)\npicking this:\n  PROP ?psi \\<Longrightarrow> PROP ?psi\n  qs' \\<in> listset ss\n  qs = (0::'a) # qs'", "show \"qs \\<in> listset ({0} # ss)\""], ["proof (prove)\nusing this:\n  PROP ?psi \\<Longrightarrow> PROP ?psi\n  qs' \\<in> listset ss\n  qs = (0::'a) # qs'\n\ngoal (1 subgoal):\n 1. qs \\<in> listset ({0::'a} # ss)", "by (rule listset_ConsI) simp"], ["proof (state)\nthis:\n  qs \\<in> listset ({0::'a} # ss)\n\ngoal (2 subgoals):\n 1. a = sum_list qs\n 2. \\<And>qsa.\n       qsa \\<in> listset ({0::'a} # ss) \\<and>\n       a = sum_list qsa \\<Longrightarrow>\n       qsa = qs", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. a = sum_list qs\n 2. \\<And>qsa.\n       qsa \\<in> listset ({0::'a} # ss) \\<and>\n       a = sum_list qsa \\<Longrightarrow>\n       qsa = qs", "fix qs0"], ["proof (state)\ngoal (2 subgoals):\n 1. a = sum_list qs\n 2. \\<And>qsa.\n       qsa \\<in> listset ({0::'a} # ss) \\<and>\n       a = sum_list qsa \\<Longrightarrow>\n       qsa = qs", "assume \"qs0 \\<in> listset ({0} # ss) \\<and> a = sum_list qs0\""], ["proof (state)\nthis:\n  qs0 \\<in> listset ({0::'a} # ss) \\<and> a = sum_list qs0\n\ngoal (2 subgoals):\n 1. a = sum_list qs\n 2. \\<And>qsa.\n       qsa \\<in> listset ({0::'a} # ss) \\<and>\n       a = sum_list qsa \\<Longrightarrow>\n       qsa = qs", "hence \"qs0 \\<in> listset ({0} # ss)\" and a0: \"a = sum_list qs0\""], ["proof (prove)\nusing this:\n  qs0 \\<in> listset ({0::'a} # ss) \\<and> a = sum_list qs0\n\ngoal (1 subgoal):\n 1. qs0 \\<in> listset ({0::'a} # ss) &&& a = sum_list qs0", "by simp_all"], ["proof (state)\nthis:\n  qs0 \\<in> listset ({0::'a} # ss)\n  a = sum_list qs0\n\ngoal (2 subgoals):\n 1. a = sum_list qs\n 2. \\<And>qsa.\n       qsa \\<in> listset ({0::'a} # ss) \\<and>\n       a = sum_list qsa \\<Longrightarrow>\n       qsa = qs", "from this(1)"], ["proof (chain)\npicking this:\n  qs0 \\<in> listset ({0::'a} # ss)", "obtain q0 qs0' where \"q0 \\<in> {0}\" and qs0': \"qs0' \\<in> listset ss\"\n      and qs0: \"qs0 = q0 # qs0'\""], ["proof (prove)\nusing this:\n  qs0 \\<in> listset ({0::'a} # ss)\n\ngoal (1 subgoal):\n 1. (\\<And>q0 qs0'.\n        \\<lbrakk>q0 \\<in> {0::'a}; qs0' \\<in> listset ss;\n         qs0 = q0 # qs0'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule listset_ConsE)"], ["proof (state)\nthis:\n  q0 \\<in> {0::'a}\n  qs0' \\<in> listset ss\n  qs0 = q0 # qs0'\n\ngoal (2 subgoals):\n 1. a = sum_list qs\n 2. \\<And>qsa.\n       qsa \\<in> listset ({0::'a} # ss) \\<and>\n       a = sum_list qsa \\<Longrightarrow>\n       qsa = qs", "from this(1, 3)"], ["proof (chain)\npicking this:\n  q0 \\<in> {0::'a}\n  qs0 = q0 # qs0'", "have \"sum_list qs0' = sum_list qs'\""], ["proof (prove)\nusing this:\n  q0 \\<in> {0::'a}\n  qs0 = q0 # qs0'\n\ngoal (1 subgoal):\n 1. sum_list qs0' = sum_list qs'", "by (simp add: a0 flip: a)"], ["proof (state)\nthis:\n  sum_list qs0' = sum_list qs'\n\ngoal (2 subgoals):\n 1. a = sum_list qs\n 2. \\<And>qsa.\n       qsa \\<in> listset ({0::'a} # ss) \\<and>\n       a = sum_list qsa \\<Longrightarrow>\n       qsa = qs", "with assms qs0' qs'"], ["proof (chain)\npicking this:\n  direct_decomp A ss\n  qs0' \\<in> listset ss\n  qs' \\<in> listset ss\n  sum_list qs0' = sum_list qs'", "have \"qs0' = qs'\""], ["proof (prove)\nusing this:\n  direct_decomp A ss\n  qs0' \\<in> listset ss\n  qs' \\<in> listset ss\n  sum_list qs0' = sum_list qs'\n\ngoal (1 subgoal):\n 1. qs0' = qs'", "by (rule direct_decomp_unique)"], ["proof (state)\nthis:\n  qs0' = qs'\n\ngoal (2 subgoals):\n 1. a = sum_list qs\n 2. \\<And>qsa.\n       qsa \\<in> listset ({0::'a} # ss) \\<and>\n       a = sum_list qsa \\<Longrightarrow>\n       qsa = qs", "with \\<open>q0 \\<in> {0}\\<close>"], ["proof (chain)\npicking this:\n  q0 \\<in> {0::'a}\n  qs0' = qs'", "show \"qs0 = qs\""], ["proof (prove)\nusing this:\n  q0 \\<in> {0::'a}\n  qs0' = qs'\n\ngoal (1 subgoal):\n 1. qs0 = qs", "by (simp add: qs_def qs0)"], ["proof (state)\nthis:\n  qs0 = qs\n\ngoal (1 subgoal):\n 1. a = sum_list qs", "qed (simp add: qs_def a)"], ["proof (state)\nthis:\n  \\<exists>!qs. qs \\<in> listset ({0::'a} # ss) \\<and> a = sum_list qs\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma direct_decomp_Cons_zeroD:\n  assumes \"direct_decomp A ({0} # ss)\"\n  shows \"direct_decomp A ss\""], ["proof (prove)\ngoal (1 subgoal):\n 1. direct_decomp A ss", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. direct_decomp A ss", "have \"direct_decomp {0} []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. direct_decomp {0::'b} []", "by (simp add: direct_decomp_def bij_betw_def)"], ["proof (state)\nthis:\n  direct_decomp {0::?'b1} []\n\ngoal (1 subgoal):\n 1. direct_decomp A ss", "with assms"], ["proof (chain)\npicking this:\n  direct_decomp A ({0::'a} # ss)\n  direct_decomp {0::?'b1} []", "have \"direct_decomp A (ss @ [])\""], ["proof (prove)\nusing this:\n  direct_decomp A ({0::'a} # ss)\n  direct_decomp {0::?'b1} []\n\ngoal (1 subgoal):\n 1. direct_decomp A (ss @ [])", "by (rule direct_decomp_direct_decomp)"], ["proof (state)\nthis:\n  direct_decomp A (ss @ [])\n\ngoal (1 subgoal):\n 1. direct_decomp A ss", "thus ?thesis"], ["proof (prove)\nusing this:\n  direct_decomp A (ss @ [])\n\ngoal (1 subgoal):\n 1. direct_decomp A ss", "by simp"], ["proof (state)\nthis:\n  direct_decomp A ss\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma direct_decomp_Cons_subsetI:\n  assumes \"direct_decomp A (s # ss)\" and \"\\<And>s0. s0 \\<in> set ss \\<Longrightarrow> 0 \\<in> s0\"\n  shows \"s \\<subseteq> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<subseteq> A", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> s \\<Longrightarrow> x \\<in> A", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> s \\<Longrightarrow> x \\<in> A", "assume \"x \\<in> s\""], ["proof (state)\nthis:\n  x \\<in> s\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> s \\<Longrightarrow> x \\<in> A", "moreover"], ["proof (state)\nthis:\n  x \\<in> s\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> s \\<Longrightarrow> x \\<in> A", "from assms(2)"], ["proof (chain)\npicking this:\n  ?s0.0 \\<in> set ss \\<Longrightarrow> (0::'a) \\<in> ?s0.0", "have \"map (\\<lambda>_. 0) ss \\<in> listset ss\""], ["proof (prove)\nusing this:\n  ?s0.0 \\<in> set ss \\<Longrightarrow> (0::'a) \\<in> ?s0.0\n\ngoal (1 subgoal):\n 1. map (\\<lambda>_. 0::'a) ss \\<in> listset ss", "by (induct ss, auto simp del: listset.simps(2) intro: listset_ConsI)"], ["proof (state)\nthis:\n  map (\\<lambda>_. 0::'a) ss \\<in> listset ss\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> s \\<Longrightarrow> x \\<in> A", "ultimately"], ["proof (chain)\npicking this:\n  x \\<in> s\n  map (\\<lambda>_. 0::'a) ss \\<in> listset ss", "have \"x # (map (\\<lambda>_. 0) ss) \\<in> listset (s # ss)\""], ["proof (prove)\nusing this:\n  x \\<in> s\n  map (\\<lambda>_. 0::'a) ss \\<in> listset ss\n\ngoal (1 subgoal):\n 1. x # map (\\<lambda>_. 0::'a) ss \\<in> listset (s # ss)", "using refl"], ["proof (prove)\nusing this:\n  x \\<in> s\n  map (\\<lambda>_. 0::'a) ss \\<in> listset ss\n  ?t = ?t\n\ngoal (1 subgoal):\n 1. x # map (\\<lambda>_. 0::'a) ss \\<in> listset (s # ss)", "by (rule listset_ConsI)"], ["proof (state)\nthis:\n  x # map (\\<lambda>_. 0::'a) ss \\<in> listset (s # ss)\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> s \\<Longrightarrow> x \\<in> A", "with assms(1)"], ["proof (chain)\npicking this:\n  direct_decomp A (s # ss)\n  x # map (\\<lambda>_. 0::'a) ss \\<in> listset (s # ss)", "have \"sum_list (x # (map (\\<lambda>_. 0) ss)) \\<in> A\""], ["proof (prove)\nusing this:\n  direct_decomp A (s # ss)\n  x # map (\\<lambda>_. 0::'a) ss \\<in> listset (s # ss)\n\ngoal (1 subgoal):\n 1. sum_list (x # map (\\<lambda>_. 0::'a) ss) \\<in> A", "by (rule direct_decompD)"], ["proof (state)\nthis:\n  sum_list (x # map (\\<lambda>_. 0::'a) ss) \\<in> A\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> s \\<Longrightarrow> x \\<in> A", "thus \"x \\<in> A\""], ["proof (prove)\nusing this:\n  sum_list (x # map (\\<lambda>_. 0::'a) ss) \\<in> A\n\ngoal (1 subgoal):\n 1. x \\<in> A", "by simp"], ["proof (state)\nthis:\n  x \\<in> A\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma direct_decomp_Int_zero:\n  assumes \"direct_decomp A ss\" and \"i < j\" and \"j < length ss\" and \"\\<And>s. s \\<in> set ss \\<Longrightarrow> 0 \\<in> s\"\n  shows \"ss ! i \\<inter> ss ! j = {0}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ss ! i \\<inter> ss ! j = {0::'a}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. ss ! i \\<inter> ss ! j = {0::'a}", "from assms(2, 3)"], ["proof (chain)\npicking this:\n  i < j\n  j < length ss", "have \"i < length ss\""], ["proof (prove)\nusing this:\n  i < j\n  j < length ss\n\ngoal (1 subgoal):\n 1. i < length ss", "by (rule less_trans)"], ["proof (state)\nthis:\n  i < length ss\n\ngoal (1 subgoal):\n 1. ss ! i \\<inter> ss ! j = {0::'a}", "hence i_in: \"ss ! i \\<in> set ss\""], ["proof (prove)\nusing this:\n  i < length ss\n\ngoal (1 subgoal):\n 1. ss ! i \\<in> set ss", "by simp"], ["proof (state)\nthis:\n  ss ! i \\<in> set ss\n\ngoal (1 subgoal):\n 1. ss ! i \\<inter> ss ! j = {0::'a}", "from assms(3)"], ["proof (chain)\npicking this:\n  j < length ss", "have j_in: \"ss ! j \\<in> set ss\""], ["proof (prove)\nusing this:\n  j < length ss\n\ngoal (1 subgoal):\n 1. ss ! j \\<in> set ss", "by simp"], ["proof (state)\nthis:\n  ss ! j \\<in> set ss\n\ngoal (1 subgoal):\n 1. ss ! i \\<inter> ss ! j = {0::'a}", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. ss ! i \\<inter> ss ! j = {0::'a}", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. ss ! i \\<inter> ss ! j \\<subseteq> {0::'a}\n 2. {0::'a} \\<subseteq> ss ! i \\<inter> ss ! j", "show \"ss ! i \\<inter> ss ! j \\<subseteq> {0}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ss ! i \\<inter> ss ! j \\<subseteq> {0::'a}", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> ss ! i \\<inter> ss ! j \\<Longrightarrow> x \\<in> {0::'a}", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> ss ! i \\<inter> ss ! j \\<Longrightarrow> x \\<in> {0::'a}", "assume \"x \\<in> ss ! i \\<inter> ss ! j\""], ["proof (state)\nthis:\n  x \\<in> ss ! i \\<inter> ss ! j\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> ss ! i \\<inter> ss ! j \\<Longrightarrow> x \\<in> {0::'a}", "hence x_i: \"x \\<in> ss ! i\" and x_j: \"x \\<in> ss ! j\""], ["proof (prove)\nusing this:\n  x \\<in> ss ! i \\<inter> ss ! j\n\ngoal (1 subgoal):\n 1. x \\<in> ss ! i &&& x \\<in> ss ! j", "by simp_all"], ["proof (state)\nthis:\n  x \\<in> ss ! i\n  x \\<in> ss ! j\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> ss ! i \\<inter> ss ! j \\<Longrightarrow> x \\<in> {0::'a}", "have 1: \"(map (\\<lambda>_. 0) ss)[k := y] \\<in> listset ss\" if \"k < length ss\" and \"y \\<in> ss ! k\" for k y"], ["proof (prove)\ngoal (1 subgoal):\n 1. (map (\\<lambda>_. 0::'a) ss)[k := y] \\<in> listset ss", "using assms(4) that"], ["proof (prove)\nusing this:\n  ?s \\<in> set ss \\<Longrightarrow> (0::'a) \\<in> ?s\n  k < length ss\n  y \\<in> ss ! k\n\ngoal (1 subgoal):\n 1. (map (\\<lambda>_. 0::'a) ss)[k := y] \\<in> listset ss", "proof (induct ss arbitrary: k)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>k.\n       \\<lbrakk>\\<And>s. s \\<in> set [] \\<Longrightarrow> (0::'a) \\<in> s;\n        k < length []; y \\<in> [] ! k\\<rbrakk>\n       \\<Longrightarrow> (map (\\<lambda>_. 0::'a) [])[k := y]\n                         \\<in> listset []\n 2. \\<And>a ss k.\n       \\<lbrakk>\\<And>k.\n                   \\<lbrakk>\\<And>s.\n                               s \\<in> set ss \\<Longrightarrow>\n                               (0::'a) \\<in> s;\n                    k < length ss; y \\<in> ss ! k\\<rbrakk>\n                   \\<Longrightarrow> (map (\\<lambda>_. 0::'a) ss)[k := y]\n                                     \\<in> listset ss;\n        \\<And>s. s \\<in> set (a # ss) \\<Longrightarrow> (0::'a) \\<in> s;\n        k < length (a # ss); y \\<in> (a # ss) ! k\\<rbrakk>\n       \\<Longrightarrow> (map (\\<lambda>_. 0::'a) (a # ss))[k := y]\n                         \\<in> listset (a # ss)", "case Nil"], ["proof (state)\nthis:\n  ?s \\<in> set [] \\<Longrightarrow> (0::'a) \\<in> ?s\n  k < length []\n  y \\<in> [] ! k\n\ngoal (2 subgoals):\n 1. \\<And>k.\n       \\<lbrakk>\\<And>s. s \\<in> set [] \\<Longrightarrow> (0::'a) \\<in> s;\n        k < length []; y \\<in> [] ! k\\<rbrakk>\n       \\<Longrightarrow> (map (\\<lambda>_. 0::'a) [])[k := y]\n                         \\<in> listset []\n 2. \\<And>a ss k.\n       \\<lbrakk>\\<And>k.\n                   \\<lbrakk>\\<And>s.\n                               s \\<in> set ss \\<Longrightarrow>\n                               (0::'a) \\<in> s;\n                    k < length ss; y \\<in> ss ! k\\<rbrakk>\n                   \\<Longrightarrow> (map (\\<lambda>_. 0::'a) ss)[k := y]\n                                     \\<in> listset ss;\n        \\<And>s. s \\<in> set (a # ss) \\<Longrightarrow> (0::'a) \\<in> s;\n        k < length (a # ss); y \\<in> (a # ss) ! k\\<rbrakk>\n       \\<Longrightarrow> (map (\\<lambda>_. 0::'a) (a # ss))[k := y]\n                         \\<in> listset (a # ss)", "from Nil(2)"], ["proof (chain)\npicking this:\n  k < length []", "show ?case"], ["proof (prove)\nusing this:\n  k < length []\n\ngoal (1 subgoal):\n 1. (map (\\<lambda>_. 0::'a) [])[k := y] \\<in> listset []", "by simp"], ["proof (state)\nthis:\n  (map (\\<lambda>_. 0::'a) [])[k := y] \\<in> listset []\n\ngoal (1 subgoal):\n 1. \\<And>a ss k.\n       \\<lbrakk>\\<And>k.\n                   \\<lbrakk>\\<And>s.\n                               s \\<in> set ss \\<Longrightarrow>\n                               (0::'a) \\<in> s;\n                    k < length ss; y \\<in> ss ! k\\<rbrakk>\n                   \\<Longrightarrow> (map (\\<lambda>_. 0::'a) ss)[k := y]\n                                     \\<in> listset ss;\n        \\<And>s. s \\<in> set (a # ss) \\<Longrightarrow> (0::'a) \\<in> s;\n        k < length (a # ss); y \\<in> (a # ss) ! k\\<rbrakk>\n       \\<Longrightarrow> (map (\\<lambda>_. 0::'a) (a # ss))[k := y]\n                         \\<in> listset (a # ss)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a ss k.\n       \\<lbrakk>\\<And>k.\n                   \\<lbrakk>\\<And>s.\n                               s \\<in> set ss \\<Longrightarrow>\n                               (0::'a) \\<in> s;\n                    k < length ss; y \\<in> ss ! k\\<rbrakk>\n                   \\<Longrightarrow> (map (\\<lambda>_. 0::'a) ss)[k := y]\n                                     \\<in> listset ss;\n        \\<And>s. s \\<in> set (a # ss) \\<Longrightarrow> (0::'a) \\<in> s;\n        k < length (a # ss); y \\<in> (a # ss) ! k\\<rbrakk>\n       \\<Longrightarrow> (map (\\<lambda>_. 0::'a) (a # ss))[k := y]\n                         \\<in> listset (a # ss)", "case (Cons s ss)"], ["proof (state)\nthis:\n  \\<lbrakk>\\<And>s. s \\<in> set ss \\<Longrightarrow> (0::'a) \\<in> s;\n   ?k < length ss; y \\<in> ss ! ?k\\<rbrakk>\n  \\<Longrightarrow> (map (\\<lambda>_. 0::'a) ss)[?k := y] \\<in> listset ss\n  ?s \\<in> set (s # ss) \\<Longrightarrow> (0::'a) \\<in> ?s\n  k < length (s # ss)\n  y \\<in> (s # ss) ! k\n\ngoal (1 subgoal):\n 1. \\<And>a ss k.\n       \\<lbrakk>\\<And>k.\n                   \\<lbrakk>\\<And>s.\n                               s \\<in> set ss \\<Longrightarrow>\n                               (0::'a) \\<in> s;\n                    k < length ss; y \\<in> ss ! k\\<rbrakk>\n                   \\<Longrightarrow> (map (\\<lambda>_. 0::'a) ss)[k := y]\n                                     \\<in> listset ss;\n        \\<And>s. s \\<in> set (a # ss) \\<Longrightarrow> (0::'a) \\<in> s;\n        k < length (a # ss); y \\<in> (a # ss) ! k\\<rbrakk>\n       \\<Longrightarrow> (map (\\<lambda>_. 0::'a) (a # ss))[k := y]\n                         \\<in> listset (a # ss)", "have *: \"\\<And>s'. s' \\<in> set ss \\<Longrightarrow> 0 \\<in> s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s'. s' \\<in> set ss \\<Longrightarrow> (0::'a) \\<in> s'", "by (rule Cons.prems) simp"], ["proof (state)\nthis:\n  ?s' \\<in> set ss \\<Longrightarrow> (0::'a) \\<in> ?s'\n\ngoal (1 subgoal):\n 1. \\<And>a ss k.\n       \\<lbrakk>\\<And>k.\n                   \\<lbrakk>\\<And>s.\n                               s \\<in> set ss \\<Longrightarrow>\n                               (0::'a) \\<in> s;\n                    k < length ss; y \\<in> ss ! k\\<rbrakk>\n                   \\<Longrightarrow> (map (\\<lambda>_. 0::'a) ss)[k := y]\n                                     \\<in> listset ss;\n        \\<And>s. s \\<in> set (a # ss) \\<Longrightarrow> (0::'a) \\<in> s;\n        k < length (a # ss); y \\<in> (a # ss) ! k\\<rbrakk>\n       \\<Longrightarrow> (map (\\<lambda>_. 0::'a) (a # ss))[k := y]\n                         \\<in> listset (a # ss)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. (map (\\<lambda>_. 0::'a) (s # ss))[k := y] \\<in> listset (s # ss)", "proof (cases k)"], ["proof (state)\ngoal (2 subgoals):\n 1. k = 0 \\<Longrightarrow>\n    (map (\\<lambda>_. 0::'a) (s # ss))[k := y] \\<in> listset (s # ss)\n 2. \\<And>nat.\n       k = Suc nat \\<Longrightarrow>\n       (map (\\<lambda>_. 0::'a) (s # ss))[k := y] \\<in> listset (s # ss)", "case k: 0"], ["proof (state)\nthis:\n  k = 0\n\ngoal (2 subgoals):\n 1. k = 0 \\<Longrightarrow>\n    (map (\\<lambda>_. 0::'a) (s # ss))[k := y] \\<in> listset (s # ss)\n 2. \\<And>nat.\n       k = Suc nat \\<Longrightarrow>\n       (map (\\<lambda>_. 0::'a) (s # ss))[k := y] \\<in> listset (s # ss)", "with Cons.prems(3)"], ["proof (chain)\npicking this:\n  y \\<in> (s # ss) ! k\n  k = 0", "have \"y \\<in> s\""], ["proof (prove)\nusing this:\n  y \\<in> (s # ss) ! k\n  k = 0\n\ngoal (1 subgoal):\n 1. y \\<in> s", "by simp"], ["proof (state)\nthis:\n  y \\<in> s\n\ngoal (2 subgoals):\n 1. k = 0 \\<Longrightarrow>\n    (map (\\<lambda>_. 0::'a) (s # ss))[k := y] \\<in> listset (s # ss)\n 2. \\<And>nat.\n       k = Suc nat \\<Longrightarrow>\n       (map (\\<lambda>_. 0::'a) (s # ss))[k := y] \\<in> listset (s # ss)", "moreover"], ["proof (state)\nthis:\n  y \\<in> s\n\ngoal (2 subgoals):\n 1. k = 0 \\<Longrightarrow>\n    (map (\\<lambda>_. 0::'a) (s # ss))[k := y] \\<in> listset (s # ss)\n 2. \\<And>nat.\n       k = Suc nat \\<Longrightarrow>\n       (map (\\<lambda>_. 0::'a) (s # ss))[k := y] \\<in> listset (s # ss)", "from *"], ["proof (chain)\npicking this:\n  ?s' \\<in> set ss \\<Longrightarrow> (0::'a) \\<in> ?s'", "have \"map (\\<lambda>_. 0) ss \\<in> listset ss\""], ["proof (prove)\nusing this:\n  ?s' \\<in> set ss \\<Longrightarrow> (0::'a) \\<in> ?s'\n\ngoal (1 subgoal):\n 1. map (\\<lambda>_. 0::'a) ss \\<in> listset ss", "by (induct ss) (auto simp del: listset.simps(2) intro: listset_ConsI)"], ["proof (state)\nthis:\n  map (\\<lambda>_. 0::'a) ss \\<in> listset ss\n\ngoal (2 subgoals):\n 1. k = 0 \\<Longrightarrow>\n    (map (\\<lambda>_. 0::'a) (s # ss))[k := y] \\<in> listset (s # ss)\n 2. \\<And>nat.\n       k = Suc nat \\<Longrightarrow>\n       (map (\\<lambda>_. 0::'a) (s # ss))[k := y] \\<in> listset (s # ss)", "moreover"], ["proof (state)\nthis:\n  map (\\<lambda>_. 0::'a) ss \\<in> listset ss\n\ngoal (2 subgoals):\n 1. k = 0 \\<Longrightarrow>\n    (map (\\<lambda>_. 0::'a) (s # ss))[k := y] \\<in> listset (s # ss)\n 2. \\<And>nat.\n       k = Suc nat \\<Longrightarrow>\n       (map (\\<lambda>_. 0::'a) (s # ss))[k := y] \\<in> listset (s # ss)", "have \"(map (\\<lambda>_. 0) (s # ss))[k := y] = y # map (\\<lambda>_. 0) ss\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (map (\\<lambda>_. 0::'a) (s # ss))[k := y] =\n    y # map (\\<lambda>_. 0::'a) ss", "by (simp add: k)"], ["proof (state)\nthis:\n  (map (\\<lambda>_. 0::'a) (s # ss))[k := y] =\n  y # map (\\<lambda>_. 0::'a) ss\n\ngoal (2 subgoals):\n 1. k = 0 \\<Longrightarrow>\n    (map (\\<lambda>_. 0::'a) (s # ss))[k := y] \\<in> listset (s # ss)\n 2. \\<And>nat.\n       k = Suc nat \\<Longrightarrow>\n       (map (\\<lambda>_. 0::'a) (s # ss))[k := y] \\<in> listset (s # ss)", "ultimately"], ["proof (chain)\npicking this:\n  y \\<in> s\n  map (\\<lambda>_. 0::'a) ss \\<in> listset ss\n  (map (\\<lambda>_. 0::'a) (s # ss))[k := y] =\n  y # map (\\<lambda>_. 0::'a) ss", "show ?thesis"], ["proof (prove)\nusing this:\n  y \\<in> s\n  map (\\<lambda>_. 0::'a) ss \\<in> listset ss\n  (map (\\<lambda>_. 0::'a) (s # ss))[k := y] =\n  y # map (\\<lambda>_. 0::'a) ss\n\ngoal (1 subgoal):\n 1. (map (\\<lambda>_. 0::'a) (s # ss))[k := y] \\<in> listset (s # ss)", "by (rule listset_ConsI)"], ["proof (state)\nthis:\n  (map (\\<lambda>_. 0::'a) (s # ss))[k := y] \\<in> listset (s # ss)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       k = Suc nat \\<Longrightarrow>\n       (map (\\<lambda>_. 0::'a) (s # ss))[k := y] \\<in> listset (s # ss)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>nat.\n       k = Suc nat \\<Longrightarrow>\n       (map (\\<lambda>_. 0::'a) (s # ss))[k := y] \\<in> listset (s # ss)", "case k: (Suc k')"], ["proof (state)\nthis:\n  k = Suc k'\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       k = Suc nat \\<Longrightarrow>\n       (map (\\<lambda>_. 0::'a) (s # ss))[k := y] \\<in> listset (s # ss)", "have \"0 \\<in> s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (0::'a) \\<in> s", "by (rule Cons.prems) simp"], ["proof (state)\nthis:\n  (0::'a) \\<in> s\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       k = Suc nat \\<Longrightarrow>\n       (map (\\<lambda>_. 0::'a) (s # ss))[k := y] \\<in> listset (s # ss)", "moreover"], ["proof (state)\nthis:\n  (0::'a) \\<in> s\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       k = Suc nat \\<Longrightarrow>\n       (map (\\<lambda>_. 0::'a) (s # ss))[k := y] \\<in> listset (s # ss)", "from *"], ["proof (chain)\npicking this:\n  ?s' \\<in> set ss \\<Longrightarrow> (0::'a) \\<in> ?s'", "have \"(map (\\<lambda>_. 0) ss)[k' := y] \\<in> listset ss\""], ["proof (prove)\nusing this:\n  ?s' \\<in> set ss \\<Longrightarrow> (0::'a) \\<in> ?s'\n\ngoal (1 subgoal):\n 1. (map (\\<lambda>_. 0::'a) ss)[k' := y] \\<in> listset ss", "proof (rule Cons.hyps)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>s. s \\<in> set ss \\<Longrightarrow> s \\<in> set ss\n 2. k' < length ss\n 3. y \\<in> ss ! k'", "from Cons.prems(2)"], ["proof (chain)\npicking this:\n  k < length (s # ss)", "show \"k' < length ss\""], ["proof (prove)\nusing this:\n  k < length (s # ss)\n\ngoal (1 subgoal):\n 1. k' < length ss", "by (simp add: k)"], ["proof (state)\nthis:\n  k' < length ss\n\ngoal (2 subgoals):\n 1. \\<And>s. s \\<in> set ss \\<Longrightarrow> s \\<in> set ss\n 2. y \\<in> ss ! k'", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s. s \\<in> set ss \\<Longrightarrow> s \\<in> set ss\n 2. y \\<in> ss ! k'", "from Cons.prems(3)"], ["proof (chain)\npicking this:\n  y \\<in> (s # ss) ! k", "show \"y \\<in> ss ! k'\""], ["proof (prove)\nusing this:\n  y \\<in> (s # ss) ! k\n\ngoal (1 subgoal):\n 1. y \\<in> ss ! k'", "by (simp add: k)"], ["proof (state)\nthis:\n  y \\<in> ss ! k'\n\ngoal (1 subgoal):\n 1. \\<And>s. s \\<in> set ss \\<Longrightarrow> s \\<in> set ss", "qed"], ["proof (state)\nthis:\n  (map (\\<lambda>_. 0::'a) ss)[k' := y] \\<in> listset ss\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       k = Suc nat \\<Longrightarrow>\n       (map (\\<lambda>_. 0::'a) (s # ss))[k := y] \\<in> listset (s # ss)", "moreover"], ["proof (state)\nthis:\n  (map (\\<lambda>_. 0::'a) ss)[k' := y] \\<in> listset ss\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       k = Suc nat \\<Longrightarrow>\n       (map (\\<lambda>_. 0::'a) (s # ss))[k := y] \\<in> listset (s # ss)", "have \"(map (\\<lambda>_. 0) (s # ss))[k := y] = 0 # (map (\\<lambda>_. 0) ss)[k' := y]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (map (\\<lambda>_. 0::'a) (s # ss))[k := y] =\n    (0::'a) # (map (\\<lambda>_. 0::'a) ss)[k' := y]", "by (simp add: k)"], ["proof (state)\nthis:\n  (map (\\<lambda>_. 0::'a) (s # ss))[k := y] =\n  (0::'a) # (map (\\<lambda>_. 0::'a) ss)[k' := y]\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       k = Suc nat \\<Longrightarrow>\n       (map (\\<lambda>_. 0::'a) (s # ss))[k := y] \\<in> listset (s # ss)", "ultimately"], ["proof (chain)\npicking this:\n  (0::'a) \\<in> s\n  (map (\\<lambda>_. 0::'a) ss)[k' := y] \\<in> listset ss\n  (map (\\<lambda>_. 0::'a) (s # ss))[k := y] =\n  (0::'a) # (map (\\<lambda>_. 0::'a) ss)[k' := y]", "show ?thesis"], ["proof (prove)\nusing this:\n  (0::'a) \\<in> s\n  (map (\\<lambda>_. 0::'a) ss)[k' := y] \\<in> listset ss\n  (map (\\<lambda>_. 0::'a) (s # ss))[k := y] =\n  (0::'a) # (map (\\<lambda>_. 0::'a) ss)[k' := y]\n\ngoal (1 subgoal):\n 1. (map (\\<lambda>_. 0::'a) (s # ss))[k := y] \\<in> listset (s # ss)", "by (rule listset_ConsI)"], ["proof (state)\nthis:\n  (map (\\<lambda>_. 0::'a) (s # ss))[k := y] \\<in> listset (s # ss)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (map (\\<lambda>_. 0::'a) (s # ss))[k := y] \\<in> listset (s # ss)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<lbrakk>?k < length ss; ?y \\<in> ss ! ?k\\<rbrakk>\n  \\<Longrightarrow> (map (\\<lambda>_. 0::'a) ss)[?k := ?y] \\<in> listset ss\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> ss ! i \\<inter> ss ! j \\<Longrightarrow> x \\<in> {0::'a}", "have 2: \"sum_list ((map (\\<lambda>_. 0) ss)[k := y]) = y\" if \"k < length ss\" for k and y::'a"], ["proof (prove)\ngoal (1 subgoal):\n 1. sum_list ((map (\\<lambda>_. 0::'a) ss)[k := y]) = y", "using that"], ["proof (prove)\nusing this:\n  k < length ss\n\ngoal (1 subgoal):\n 1. sum_list ((map (\\<lambda>_. 0::'a) ss)[k := y]) = y", "by (induct ss arbitrary: k) (auto simp: add_ac split: nat.split)"], ["proof (state)\nthis:\n  ?k < length ss \\<Longrightarrow>\n  sum_list ((map (\\<lambda>_. 0::'a) ss)[?k := ?y]) = ?y\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> ss ! i \\<inter> ss ! j \\<Longrightarrow> x \\<in> {0::'a}", "define qs1 where \"qs1 = (map (\\<lambda>_. 0) ss)[i := x]\""], ["proof (state)\nthis:\n  qs1 = (map (\\<lambda>_. 0::'a) ss)[i := x]\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> ss ! i \\<inter> ss ! j \\<Longrightarrow> x \\<in> {0::'a}", "define qs2 where \"qs2 = (map (\\<lambda>_. 0) ss)[j := x]\""], ["proof (state)\nthis:\n  qs2 = (map (\\<lambda>_. 0::'a) ss)[j := x]\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> ss ! i \\<inter> ss ! j \\<Longrightarrow> x \\<in> {0::'a}", "note assms(1)"], ["proof (state)\nthis:\n  direct_decomp A ss\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> ss ! i \\<inter> ss ! j \\<Longrightarrow> x \\<in> {0::'a}", "moreover"], ["proof (state)\nthis:\n  direct_decomp A ss\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> ss ! i \\<inter> ss ! j \\<Longrightarrow> x \\<in> {0::'a}", "from \\<open>i < length ss\\<close> x_i"], ["proof (chain)\npicking this:\n  i < length ss\n  x \\<in> ss ! i", "have \"qs1 \\<in> listset ss\""], ["proof (prove)\nusing this:\n  i < length ss\n  x \\<in> ss ! i\n\ngoal (1 subgoal):\n 1. qs1 \\<in> listset ss", "unfolding qs1_def"], ["proof (prove)\nusing this:\n  i < length ss\n  x \\<in> ss ! i\n\ngoal (1 subgoal):\n 1. (map (\\<lambda>_. 0::'a) ss)[i := x] \\<in> listset ss", "by (rule 1)"], ["proof (state)\nthis:\n  qs1 \\<in> listset ss\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> ss ! i \\<inter> ss ! j \\<Longrightarrow> x \\<in> {0::'a}", "moreover"], ["proof (state)\nthis:\n  qs1 \\<in> listset ss\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> ss ! i \\<inter> ss ! j \\<Longrightarrow> x \\<in> {0::'a}", "from assms(3) x_j"], ["proof (chain)\npicking this:\n  j < length ss\n  x \\<in> ss ! j", "have \"qs2 \\<in> listset ss\""], ["proof (prove)\nusing this:\n  j < length ss\n  x \\<in> ss ! j\n\ngoal (1 subgoal):\n 1. qs2 \\<in> listset ss", "unfolding qs2_def"], ["proof (prove)\nusing this:\n  j < length ss\n  x \\<in> ss ! j\n\ngoal (1 subgoal):\n 1. (map (\\<lambda>_. 0::'a) ss)[j := x] \\<in> listset ss", "by (rule 1)"], ["proof (state)\nthis:\n  qs2 \\<in> listset ss\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> ss ! i \\<inter> ss ! j \\<Longrightarrow> x \\<in> {0::'a}", "thm sum_list_update"], ["proof (state)\nthis:\n  qs2 \\<in> listset ss\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> ss ! i \\<inter> ss ! j \\<Longrightarrow> x \\<in> {0::'a}", "moreover"], ["proof (state)\nthis:\n  qs2 \\<in> listset ss\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> ss ! i \\<inter> ss ! j \\<Longrightarrow> x \\<in> {0::'a}", "from \\<open>i < length ss\\<close> assms(3)"], ["proof (chain)\npicking this:\n  i < length ss\n  j < length ss", "have \"sum_list qs1 = sum_list qs2\""], ["proof (prove)\nusing this:\n  i < length ss\n  j < length ss\n\ngoal (1 subgoal):\n 1. sum_list qs1 = sum_list qs2", "by (simp add: qs1_def qs2_def 2)"], ["proof (state)\nthis:\n  sum_list qs1 = sum_list qs2\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> ss ! i \\<inter> ss ! j \\<Longrightarrow> x \\<in> {0::'a}", "ultimately"], ["proof (chain)\npicking this:\n  direct_decomp A ss\n  qs1 \\<in> listset ss\n  qs2 \\<in> listset ss\n  sum_list qs1 = sum_list qs2", "have \"qs1 = qs2\""], ["proof (prove)\nusing this:\n  direct_decomp A ss\n  qs1 \\<in> listset ss\n  qs2 \\<in> listset ss\n  sum_list qs1 = sum_list qs2\n\ngoal (1 subgoal):\n 1. qs1 = qs2", "by (rule direct_decomp_unique)"], ["proof (state)\nthis:\n  qs1 = qs2\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> ss ! i \\<inter> ss ! j \\<Longrightarrow> x \\<in> {0::'a}", "hence \"qs1 ! i = qs2 ! i\""], ["proof (prove)\nusing this:\n  qs1 = qs2\n\ngoal (1 subgoal):\n 1. qs1 ! i = qs2 ! i", "by simp"], ["proof (state)\nthis:\n  qs1 ! i = qs2 ! i\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> ss ! i \\<inter> ss ! j \\<Longrightarrow> x \\<in> {0::'a}", "with \\<open>i < length ss\\<close> assms(2, 3)"], ["proof (chain)\npicking this:\n  i < length ss\n  i < j\n  j < length ss\n  qs1 ! i = qs2 ! i", "show \"x \\<in> {0}\""], ["proof (prove)\nusing this:\n  i < length ss\n  i < j\n  j < length ss\n  qs1 ! i = qs2 ! i\n\ngoal (1 subgoal):\n 1. x \\<in> {0::'a}", "by (simp add: qs1_def qs2_def)"], ["proof (state)\nthis:\n  x \\<in> {0::'a}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ss ! i \\<inter> ss ! j \\<subseteq> {0::'a}\n\ngoal (1 subgoal):\n 1. {0::'a} \\<subseteq> ss ! i \\<inter> ss ! j", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. {0::'a} \\<subseteq> ss ! i \\<inter> ss ! j", "from i_in"], ["proof (chain)\npicking this:\n  ss ! i \\<in> set ss", "have \"0 \\<in> ss ! i\""], ["proof (prove)\nusing this:\n  ss ! i \\<in> set ss\n\ngoal (1 subgoal):\n 1. (0::'a) \\<in> ss ! i", "by (rule assms(4))"], ["proof (state)\nthis:\n  (0::'a) \\<in> ss ! i\n\ngoal (1 subgoal):\n 1. {0::'a} \\<subseteq> ss ! i \\<inter> ss ! j", "moreover"], ["proof (state)\nthis:\n  (0::'a) \\<in> ss ! i\n\ngoal (1 subgoal):\n 1. {0::'a} \\<subseteq> ss ! i \\<inter> ss ! j", "from j_in"], ["proof (chain)\npicking this:\n  ss ! j \\<in> set ss", "have \"0 \\<in> ss ! j\""], ["proof (prove)\nusing this:\n  ss ! j \\<in> set ss\n\ngoal (1 subgoal):\n 1. (0::'a) \\<in> ss ! j", "by (rule assms(4))"], ["proof (state)\nthis:\n  (0::'a) \\<in> ss ! j\n\ngoal (1 subgoal):\n 1. {0::'a} \\<subseteq> ss ! i \\<inter> ss ! j", "ultimately"], ["proof (chain)\npicking this:\n  (0::'a) \\<in> ss ! i\n  (0::'a) \\<in> ss ! j", "show \"{0} \\<subseteq> ss ! i \\<inter> ss ! j\""], ["proof (prove)\nusing this:\n  (0::'a) \\<in> ss ! i\n  (0::'a) \\<in> ss ! j\n\ngoal (1 subgoal):\n 1. {0::'a} \\<subseteq> ss ! i \\<inter> ss ! j", "by simp"], ["proof (state)\nthis:\n  {0::'a} \\<subseteq> ss ! i \\<inter> ss ! j\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ss ! i \\<inter> ss ! j = {0::'a}\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary direct_decomp_pairwise_zero:\n  assumes \"direct_decomp A ss\" and \"\\<And>s. s \\<in> set ss \\<Longrightarrow> 0 \\<in> s\"\n  shows \"pairwise (\\<lambda>s1 s2. s1 \\<inter> s2 = {0}) (set ss)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pairwise (\\<lambda>s1 s2. s1 \\<inter> s2 = {0::'a}) (set ss)", "proof (rule pairwiseI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> set ss; y \\<in> set ss; x \\<noteq> y\\<rbrakk>\n       \\<Longrightarrow> x \\<inter> y = {0::'a}", "fix s1 s2"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> set ss; y \\<in> set ss; x \\<noteq> y\\<rbrakk>\n       \\<Longrightarrow> x \\<inter> y = {0::'a}", "assume \"s1 \\<in> set ss\""], ["proof (state)\nthis:\n  s1 \\<in> set ss\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> set ss; y \\<in> set ss; x \\<noteq> y\\<rbrakk>\n       \\<Longrightarrow> x \\<inter> y = {0::'a}", "then"], ["proof (chain)\npicking this:\n  s1 \\<in> set ss", "obtain i where \"i < length ss\" and s1: \"s1 = ss ! i\""], ["proof (prove)\nusing this:\n  s1 \\<in> set ss\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        \\<lbrakk>i < length ss; s1 = ss ! i\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis in_set_conv_nth)"], ["proof (state)\nthis:\n  i < length ss\n  s1 = ss ! i\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> set ss; y \\<in> set ss; x \\<noteq> y\\<rbrakk>\n       \\<Longrightarrow> x \\<inter> y = {0::'a}", "assume \"s2 \\<in> set ss\""], ["proof (state)\nthis:\n  s2 \\<in> set ss\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> set ss; y \\<in> set ss; x \\<noteq> y\\<rbrakk>\n       \\<Longrightarrow> x \\<inter> y = {0::'a}", "then"], ["proof (chain)\npicking this:\n  s2 \\<in> set ss", "obtain j where \"j < length ss\" and s2: \"s2 = ss ! j\""], ["proof (prove)\nusing this:\n  s2 \\<in> set ss\n\ngoal (1 subgoal):\n 1. (\\<And>j.\n        \\<lbrakk>j < length ss; s2 = ss ! j\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis in_set_conv_nth)"], ["proof (state)\nthis:\n  j < length ss\n  s2 = ss ! j\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> set ss; y \\<in> set ss; x \\<noteq> y\\<rbrakk>\n       \\<Longrightarrow> x \\<inter> y = {0::'a}", "assume \"s1 \\<noteq> s2\""], ["proof (state)\nthis:\n  s1 \\<noteq> s2\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> set ss; y \\<in> set ss; x \\<noteq> y\\<rbrakk>\n       \\<Longrightarrow> x \\<inter> y = {0::'a}", "hence \"i < j \\<or> j < i\""], ["proof (prove)\nusing this:\n  s1 \\<noteq> s2\n\ngoal (1 subgoal):\n 1. i < j \\<or> j < i", "by (auto simp: s1 s2)"], ["proof (state)\nthis:\n  i < j \\<or> j < i\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> set ss; y \\<in> set ss; x \\<noteq> y\\<rbrakk>\n       \\<Longrightarrow> x \\<inter> y = {0::'a}", "thus \"s1 \\<inter> s2 = {0}\""], ["proof (prove)\nusing this:\n  i < j \\<or> j < i\n\ngoal (1 subgoal):\n 1. s1 \\<inter> s2 = {0::'a}", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. i < j \\<Longrightarrow> s1 \\<inter> s2 = {0::'a}\n 2. j < i \\<Longrightarrow> s1 \\<inter> s2 = {0::'a}", "assume \"i < j\""], ["proof (state)\nthis:\n  i < j\n\ngoal (2 subgoals):\n 1. i < j \\<Longrightarrow> s1 \\<inter> s2 = {0::'a}\n 2. j < i \\<Longrightarrow> s1 \\<inter> s2 = {0::'a}", "with assms(1)"], ["proof (chain)\npicking this:\n  direct_decomp A ss\n  i < j", "show ?thesis"], ["proof (prove)\nusing this:\n  direct_decomp A ss\n  i < j\n\ngoal (1 subgoal):\n 1. s1 \\<inter> s2 = {0::'a}", "unfolding s1 s2"], ["proof (prove)\nusing this:\n  direct_decomp A ss\n  i < j\n\ngoal (1 subgoal):\n 1. ss ! i \\<inter> ss ! j = {0::'a}", "using \\<open>j < length ss\\<close> assms(2)"], ["proof (prove)\nusing this:\n  direct_decomp A ss\n  i < j\n  j < length ss\n  ?s \\<in> set ss \\<Longrightarrow> (0::'a) \\<in> ?s\n\ngoal (1 subgoal):\n 1. ss ! i \\<inter> ss ! j = {0::'a}", "by (rule direct_decomp_Int_zero)"], ["proof (state)\nthis:\n  s1 \\<inter> s2 = {0::'a}\n\ngoal (1 subgoal):\n 1. j < i \\<Longrightarrow> s1 \\<inter> s2 = {0::'a}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. j < i \\<Longrightarrow> s1 \\<inter> s2 = {0::'a}", "assume \"j < i\""], ["proof (state)\nthis:\n  j < i\n\ngoal (1 subgoal):\n 1. j < i \\<Longrightarrow> s1 \\<inter> s2 = {0::'a}", "with assms(1)"], ["proof (chain)\npicking this:\n  direct_decomp A ss\n  j < i", "have \"s2 \\<inter> s1 = {0}\""], ["proof (prove)\nusing this:\n  direct_decomp A ss\n  j < i\n\ngoal (1 subgoal):\n 1. s2 \\<inter> s1 = {0::'a}", "unfolding s1 s2"], ["proof (prove)\nusing this:\n  direct_decomp A ss\n  j < i\n\ngoal (1 subgoal):\n 1. ss ! j \\<inter> ss ! i = {0::'a}", "using \\<open>i < length ss\\<close> assms(2)"], ["proof (prove)\nusing this:\n  direct_decomp A ss\n  j < i\n  i < length ss\n  ?s \\<in> set ss \\<Longrightarrow> (0::'a) \\<in> ?s\n\ngoal (1 subgoal):\n 1. ss ! j \\<inter> ss ! i = {0::'a}", "by (rule direct_decomp_Int_zero)"], ["proof (state)\nthis:\n  s2 \\<inter> s1 = {0::'a}\n\ngoal (1 subgoal):\n 1. j < i \\<Longrightarrow> s1 \\<inter> s2 = {0::'a}", "thus ?thesis"], ["proof (prove)\nusing this:\n  s2 \\<inter> s1 = {0::'a}\n\ngoal (1 subgoal):\n 1. s1 \\<inter> s2 = {0::'a}", "by (simp only: Int_commute)"], ["proof (state)\nthis:\n  s1 \\<inter> s2 = {0::'a}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  s1 \\<inter> s2 = {0::'a}\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary direct_decomp_repeated_eq_zero:\n  assumes \"direct_decomp A ss\" and \"1 < count_list ss X\" and \"\\<And>s. s \\<in> set ss \\<Longrightarrow> 0 \\<in> s\"\n  shows \"X = {0}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X = {0::'a}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. X = {0::'a}", "from assms(2)"], ["proof (chain)\npicking this:\n  1 < count_list ss X", "obtain i j where \"i < j\" and \"j < length ss\" and 1: \"ss ! i = X\" and 2: \"ss ! j = X\""], ["proof (prove)\nusing this:\n  1 < count_list ss X\n\ngoal (1 subgoal):\n 1. (\\<And>i j.\n        \\<lbrakk>i < j; j < length ss; ss ! i = X; ss ! j = X\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule count_list_gr_1_E)"], ["proof (state)\nthis:\n  i < j\n  j < length ss\n  ss ! i = X\n  ss ! j = X\n\ngoal (1 subgoal):\n 1. X = {0::'a}", "from assms(1) this(1, 2) assms(3)"], ["proof (chain)\npicking this:\n  direct_decomp A ss\n  i < j\n  j < length ss\n  ?s \\<in> set ss \\<Longrightarrow> (0::'a) \\<in> ?s", "have \"ss ! i \\<inter> ss ! j = {0}\""], ["proof (prove)\nusing this:\n  direct_decomp A ss\n  i < j\n  j < length ss\n  ?s \\<in> set ss \\<Longrightarrow> (0::'a) \\<in> ?s\n\ngoal (1 subgoal):\n 1. ss ! i \\<inter> ss ! j = {0::'a}", "by (rule direct_decomp_Int_zero)"], ["proof (state)\nthis:\n  ss ! i \\<inter> ss ! j = {0::'a}\n\ngoal (1 subgoal):\n 1. X = {0::'a}", "thus ?thesis"], ["proof (prove)\nusing this:\n  ss ! i \\<inter> ss ! j = {0::'a}\n\ngoal (1 subgoal):\n 1. X = {0::'a}", "by (simp add: 1 2)"], ["proof (state)\nthis:\n  X = {0::'a}\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary direct_decomp_map_Int_zero:\n  assumes \"direct_decomp A (map f ss)\" and \"s1 \\<in> set ss\" and \"s2 \\<in> set ss\" and \"s1 \\<noteq> s2\"\n    and \"\\<And>s. s \\<in> set ss \\<Longrightarrow> 0 \\<in> f s\"\n  shows \"f s1 \\<inter> f s2 = {0}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f s1 \\<inter> f s2 = {0::'a}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. f s1 \\<inter> f s2 = {0::'a}", "from assms(2)"], ["proof (chain)\npicking this:\n  s1 \\<in> set ss", "obtain i where \"i < length ss\" and s1: \"s1 = ss ! i\""], ["proof (prove)\nusing this:\n  s1 \\<in> set ss\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        \\<lbrakk>i < length ss; s1 = ss ! i\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis in_set_conv_nth)"], ["proof (state)\nthis:\n  i < length ss\n  s1 = ss ! i\n\ngoal (1 subgoal):\n 1. f s1 \\<inter> f s2 = {0::'a}", "from this(1)"], ["proof (chain)\npicking this:\n  i < length ss", "have i: \"i < length (map f ss)\""], ["proof (prove)\nusing this:\n  i < length ss\n\ngoal (1 subgoal):\n 1. i < length (map f ss)", "by simp"], ["proof (state)\nthis:\n  i < length (map f ss)\n\ngoal (1 subgoal):\n 1. f s1 \\<inter> f s2 = {0::'a}", "from assms(3)"], ["proof (chain)\npicking this:\n  s2 \\<in> set ss", "obtain j where \"j < length ss\" and s2: \"s2 = ss ! j\""], ["proof (prove)\nusing this:\n  s2 \\<in> set ss\n\ngoal (1 subgoal):\n 1. (\\<And>j.\n        \\<lbrakk>j < length ss; s2 = ss ! j\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis in_set_conv_nth)"], ["proof (state)\nthis:\n  j < length ss\n  s2 = ss ! j\n\ngoal (1 subgoal):\n 1. f s1 \\<inter> f s2 = {0::'a}", "from this(1)"], ["proof (chain)\npicking this:\n  j < length ss", "have j: \"j < length (map f ss)\""], ["proof (prove)\nusing this:\n  j < length ss\n\ngoal (1 subgoal):\n 1. j < length (map f ss)", "by simp"], ["proof (state)\nthis:\n  j < length (map f ss)\n\ngoal (1 subgoal):\n 1. f s1 \\<inter> f s2 = {0::'a}", "have *: \"0 \\<in> s\" if \"s \\<in> set (map f ss)\" for s"], ["proof (prove)\ngoal (1 subgoal):\n 1. (0::'a) \\<in> s", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (0::'a) \\<in> s", "from that"], ["proof (chain)\npicking this:\n  s \\<in> set (map f ss)", "obtain s' where \"s' \\<in> set ss\" and s: \"s = f s'\""], ["proof (prove)\nusing this:\n  s \\<in> set (map f ss)\n\ngoal (1 subgoal):\n 1. (\\<And>s'.\n        \\<lbrakk>s' \\<in> set ss; s = f s'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding set_map"], ["proof (prove)\nusing this:\n  s \\<in> f ` set ss\n\ngoal (1 subgoal):\n 1. (\\<And>s'.\n        \\<lbrakk>s' \\<in> set ss; s = f s'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  s' \\<in> set ss\n  s = f s'\n\ngoal (1 subgoal):\n 1. (0::'a) \\<in> s", "from this(1)"], ["proof (chain)\npicking this:\n  s' \\<in> set ss", "show \"0 \\<in> s\""], ["proof (prove)\nusing this:\n  s' \\<in> set ss\n\ngoal (1 subgoal):\n 1. (0::'a) \\<in> s", "unfolding s"], ["proof (prove)\nusing this:\n  s' \\<in> set ss\n\ngoal (1 subgoal):\n 1. (0::'a) \\<in> f s'", "by (rule assms(5))"], ["proof (state)\nthis:\n  (0::'a) \\<in> s\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?s \\<in> set (map f ss) \\<Longrightarrow> (0::'a) \\<in> ?s\n\ngoal (1 subgoal):\n 1. f s1 \\<inter> f s2 = {0::'a}", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. f s1 \\<inter> f s2 = {0::'a}", "proof (rule linorder_cases)"], ["proof (state)\ngoal (3 subgoals):\n 1. ?x < ?y \\<Longrightarrow> f s1 \\<inter> f s2 = {0::'a}\n 2. ?x = ?y \\<Longrightarrow> f s1 \\<inter> f s2 = {0::'a}\n 3. ?y < ?x \\<Longrightarrow> f s1 \\<inter> f s2 = {0::'a}", "assume \"i < j\""], ["proof (state)\nthis:\n  i < j\n\ngoal (3 subgoals):\n 1. ?x < ?y \\<Longrightarrow> f s1 \\<inter> f s2 = {0::'a}\n 2. ?x = ?y \\<Longrightarrow> f s1 \\<inter> f s2 = {0::'a}\n 3. ?y < ?x \\<Longrightarrow> f s1 \\<inter> f s2 = {0::'a}", "with assms(1)"], ["proof (chain)\npicking this:\n  direct_decomp A (map f ss)\n  i < j", "have \"(map f ss) ! i \\<inter> (map f ss) ! j = {0}\""], ["proof (prove)\nusing this:\n  direct_decomp A (map f ss)\n  i < j\n\ngoal (1 subgoal):\n 1. map f ss ! i \\<inter> map f ss ! j = {0::'a}", "using j *"], ["proof (prove)\nusing this:\n  direct_decomp A (map f ss)\n  i < j\n  j < length (map f ss)\n  ?s \\<in> set (map f ss) \\<Longrightarrow> (0::'a) \\<in> ?s\n\ngoal (1 subgoal):\n 1. map f ss ! i \\<inter> map f ss ! j = {0::'a}", "by (rule direct_decomp_Int_zero)"], ["proof (state)\nthis:\n  map f ss ! i \\<inter> map f ss ! j = {0::'a}\n\ngoal (3 subgoals):\n 1. ?x < ?y \\<Longrightarrow> f s1 \\<inter> f s2 = {0::'a}\n 2. ?x = ?y \\<Longrightarrow> f s1 \\<inter> f s2 = {0::'a}\n 3. ?y < ?x \\<Longrightarrow> f s1 \\<inter> f s2 = {0::'a}", "with i j"], ["proof (chain)\npicking this:\n  i < length (map f ss)\n  j < length (map f ss)\n  map f ss ! i \\<inter> map f ss ! j = {0::'a}", "show ?thesis"], ["proof (prove)\nusing this:\n  i < length (map f ss)\n  j < length (map f ss)\n  map f ss ! i \\<inter> map f ss ! j = {0::'a}\n\ngoal (1 subgoal):\n 1. f s1 \\<inter> f s2 = {0::'a}", "by (simp add: s1 s2)"], ["proof (state)\nthis:\n  f s1 \\<inter> f s2 = {0::'a}\n\ngoal (2 subgoals):\n 1. i = j \\<Longrightarrow> f s1 \\<inter> f s2 = {0::'a}\n 2. j < i \\<Longrightarrow> f s1 \\<inter> f s2 = {0::'a}", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. i = j \\<Longrightarrow> f s1 \\<inter> f s2 = {0::'a}\n 2. j < i \\<Longrightarrow> f s1 \\<inter> f s2 = {0::'a}", "assume \"j < i\""], ["proof (state)\nthis:\n  j < i\n\ngoal (2 subgoals):\n 1. i = j \\<Longrightarrow> f s1 \\<inter> f s2 = {0::'a}\n 2. j < i \\<Longrightarrow> f s1 \\<inter> f s2 = {0::'a}", "with assms(1)"], ["proof (chain)\npicking this:\n  direct_decomp A (map f ss)\n  j < i", "have \"(map f ss) ! j \\<inter> (map f ss) ! i = {0}\""], ["proof (prove)\nusing this:\n  direct_decomp A (map f ss)\n  j < i\n\ngoal (1 subgoal):\n 1. map f ss ! j \\<inter> map f ss ! i = {0::'a}", "using i *"], ["proof (prove)\nusing this:\n  direct_decomp A (map f ss)\n  j < i\n  i < length (map f ss)\n  ?s \\<in> set (map f ss) \\<Longrightarrow> (0::'a) \\<in> ?s\n\ngoal (1 subgoal):\n 1. map f ss ! j \\<inter> map f ss ! i = {0::'a}", "by (rule direct_decomp_Int_zero)"], ["proof (state)\nthis:\n  map f ss ! j \\<inter> map f ss ! i = {0::'a}\n\ngoal (2 subgoals):\n 1. i = j \\<Longrightarrow> f s1 \\<inter> f s2 = {0::'a}\n 2. j < i \\<Longrightarrow> f s1 \\<inter> f s2 = {0::'a}", "with i j"], ["proof (chain)\npicking this:\n  i < length (map f ss)\n  j < length (map f ss)\n  map f ss ! j \\<inter> map f ss ! i = {0::'a}", "show ?thesis"], ["proof (prove)\nusing this:\n  i < length (map f ss)\n  j < length (map f ss)\n  map f ss ! j \\<inter> map f ss ! i = {0::'a}\n\ngoal (1 subgoal):\n 1. f s1 \\<inter> f s2 = {0::'a}", "by (simp add: s1 s2 Int_commute)"], ["proof (state)\nthis:\n  f s1 \\<inter> f s2 = {0::'a}\n\ngoal (1 subgoal):\n 1. i = j \\<Longrightarrow> f s1 \\<inter> f s2 = {0::'a}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. i = j \\<Longrightarrow> f s1 \\<inter> f s2 = {0::'a}", "assume \"i = j\""], ["proof (state)\nthis:\n  i = j\n\ngoal (1 subgoal):\n 1. i = j \\<Longrightarrow> f s1 \\<inter> f s2 = {0::'a}", "with assms(4)"], ["proof (chain)\npicking this:\n  s1 \\<noteq> s2\n  i = j", "show ?thesis"], ["proof (prove)\nusing this:\n  s1 \\<noteq> s2\n  i = j\n\ngoal (1 subgoal):\n 1. f s1 \\<inter> f s2 = {0::'a}", "by (simp add: s1 s2)"], ["proof (state)\nthis:\n  f s1 \\<inter> f s2 = {0::'a}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  f s1 \\<inter> f s2 = {0::'a}\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Direct Decompositions and Vector Spaces\\<close>"], ["", "definition (in vector_space) is_basis :: \"'b set \\<Rightarrow> 'b set \\<Rightarrow> bool\"\n  where \"is_basis V B \\<longleftrightarrow> (B \\<subseteq> V \\<and> independent B \\<and> V \\<subseteq> span B \\<and> card B = dim V)\""], ["", "definition (in vector_space) some_basis :: \"'b set \\<Rightarrow> 'b set\"\n  where \"some_basis V = Eps (local.is_basis V)\""], ["", "hide_const (open) real_vector.is_basis real_vector.some_basis"], ["", "context vector_space\nbegin"], ["", "lemma dim_empty [simp]: \"dim {} = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.dim {} = 0", "using dim_span_eq_card_independent independent_empty"], ["proof (prove)\nusing this:\n  local.independent ?B \\<Longrightarrow> local.dim (local.span ?B) = card ?B\n  local.independent {}\n\ngoal (1 subgoal):\n 1. local.dim {} = 0", "by fastforce"], ["", "lemma dim_zero [simp]: \"dim {0} = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.dim {0::'b} = 0", "using dim_span_eq_card_independent independent_empty"], ["proof (prove)\nusing this:\n  local.independent ?B \\<Longrightarrow> local.dim (local.span ?B) = card ?B\n  local.independent {}\n\ngoal (1 subgoal):\n 1. local.dim {0::'b} = 0", "by fastforce"], ["", "lemma independent_UnI:\n  assumes \"independent A\" and \"independent B\" and \"span A \\<inter> span B = {0}\"\n  shows \"independent (A \\<union> B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.independent (A \\<union> B)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. local.dependent (A \\<union> B) \\<Longrightarrow> False", "from span_superset"], ["proof (chain)\npicking this:\n  ?S \\<subseteq> local.span ?S", "have \"A \\<inter> B \\<subseteq> span A \\<inter> span B\""], ["proof (prove)\nusing this:\n  ?S \\<subseteq> local.span ?S\n\ngoal (1 subgoal):\n 1. A \\<inter> B \\<subseteq> local.span A \\<inter> local.span B", "by blast"], ["proof (state)\nthis:\n  A \\<inter> B \\<subseteq> local.span A \\<inter> local.span B\n\ngoal (1 subgoal):\n 1. local.dependent (A \\<union> B) \\<Longrightarrow> False", "hence \"A \\<inter> B = {}\""], ["proof (prove)\nusing this:\n  A \\<inter> B \\<subseteq> local.span A \\<inter> local.span B\n\ngoal (1 subgoal):\n 1. A \\<inter> B = {}", "unfolding assms(3)"], ["proof (prove)\nusing this:\n  A \\<inter> B \\<subseteq> {0::'b}\n\ngoal (1 subgoal):\n 1. A \\<inter> B = {}", "using assms(1, 2) dependent_zero"], ["proof (prove)\nusing this:\n  A \\<inter> B \\<subseteq> {0::'b}\n  local.independent A\n  local.independent B\n  (0::'b) \\<in> ?A \\<Longrightarrow> local.dependent ?A\n\ngoal (1 subgoal):\n 1. A \\<inter> B = {}", "by blast"], ["proof (state)\nthis:\n  A \\<inter> B = {}\n\ngoal (1 subgoal):\n 1. local.dependent (A \\<union> B) \\<Longrightarrow> False", "assume \"dependent (A \\<union> B)\""], ["proof (state)\nthis:\n  local.dependent (A \\<union> B)\n\ngoal (1 subgoal):\n 1. local.dependent (A \\<union> B) \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  local.dependent (A \\<union> B)", "obtain T u v where \"finite T\" and \"T \\<subseteq> A \\<union> B\" and eq: \"(\\<Sum>v\\<in>T. u v *s v) = 0\"\n    and \"v \\<in> T\" and \"u v \\<noteq> 0\""], ["proof (prove)\nusing this:\n  local.dependent (A \\<union> B)\n\ngoal (1 subgoal):\n 1. (\\<And>T u v.\n        \\<lbrakk>finite T; T \\<subseteq> A \\<union> B;\n         (\\<Sum>v\\<in>T. u v *s v) = (0::'b); v \\<in> T;\n         u v \\<noteq> (0::'a)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding dependent_explicit"], ["proof (prove)\nusing this:\n  \\<exists>t u.\n     finite t \\<and>\n     t \\<subseteq> A \\<union> B \\<and>\n     (\\<Sum>v\\<in>t. u v *s v) = (0::'b) \\<and>\n     (\\<exists>v\\<in>t. u v \\<noteq> (0::'a))\n\ngoal (1 subgoal):\n 1. (\\<And>T u v.\n        \\<lbrakk>finite T; T \\<subseteq> A \\<union> B;\n         (\\<Sum>v\\<in>T. u v *s v) = (0::'b); v \\<in> T;\n         u v \\<noteq> (0::'a)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  finite T\n  T \\<subseteq> A \\<union> B\n  (\\<Sum>v\\<in>T. u v *s v) = (0::'b)\n  v \\<in> T\n  u v \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. local.dependent (A \\<union> B) \\<Longrightarrow> False", "define TA where \"TA = T \\<inter> A\""], ["proof (state)\nthis:\n  TA = T \\<inter> A\n\ngoal (1 subgoal):\n 1. local.dependent (A \\<union> B) \\<Longrightarrow> False", "define TB where \"TB = T \\<inter> B\""], ["proof (state)\nthis:\n  TB = T \\<inter> B\n\ngoal (1 subgoal):\n 1. local.dependent (A \\<union> B) \\<Longrightarrow> False", "from \\<open>T \\<subseteq> A \\<union> B\\<close>"], ["proof (chain)\npicking this:\n  T \\<subseteq> A \\<union> B", "have T: \"T = TA \\<union> TB\""], ["proof (prove)\nusing this:\n  T \\<subseteq> A \\<union> B\n\ngoal (1 subgoal):\n 1. T = TA \\<union> TB", "by (auto simp: TA_def TB_def)"], ["proof (state)\nthis:\n  T = TA \\<union> TB\n\ngoal (1 subgoal):\n 1. local.dependent (A \\<union> B) \\<Longrightarrow> False", "from \\<open>finite T\\<close>"], ["proof (chain)\npicking this:\n  finite T", "have \"finite TA\" and \"TA \\<subseteq> A\""], ["proof (prove)\nusing this:\n  finite T\n\ngoal (1 subgoal):\n 1. finite TA &&& TA \\<subseteq> A", "by (simp_all add: TA_def)"], ["proof (state)\nthis:\n  finite TA\n  TA \\<subseteq> A\n\ngoal (1 subgoal):\n 1. local.dependent (A \\<union> B) \\<Longrightarrow> False", "from \\<open>finite T\\<close>"], ["proof (chain)\npicking this:\n  finite T", "have \"finite TB\" and \"TB \\<subseteq> B\""], ["proof (prove)\nusing this:\n  finite T\n\ngoal (1 subgoal):\n 1. finite TB &&& TB \\<subseteq> B", "by (simp_all add: TB_def)"], ["proof (state)\nthis:\n  finite TB\n  TB \\<subseteq> B\n\ngoal (1 subgoal):\n 1. local.dependent (A \\<union> B) \\<Longrightarrow> False", "from \\<open>A \\<inter> B = {}\\<close> \\<open>TA \\<subseteq> A\\<close> this(2)"], ["proof (chain)\npicking this:\n  A \\<inter> B = {}\n  TA \\<subseteq> A\n  TB \\<subseteq> B", "have \"TA \\<inter> TB = {}\""], ["proof (prove)\nusing this:\n  A \\<inter> B = {}\n  TA \\<subseteq> A\n  TB \\<subseteq> B\n\ngoal (1 subgoal):\n 1. TA \\<inter> TB = {}", "by blast"], ["proof (state)\nthis:\n  TA \\<inter> TB = {}\n\ngoal (1 subgoal):\n 1. local.dependent (A \\<union> B) \\<Longrightarrow> False", "have \"0 = (\\<Sum>v\\<in>TA \\<union> TB. u v *s v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (0::'b) = (\\<Sum>v\\<in>TA \\<union> TB. u v *s v)", "by (simp only: eq flip: T)"], ["proof (state)\nthis:\n  (0::'b) = (\\<Sum>v\\<in>TA \\<union> TB. u v *s v)\n\ngoal (1 subgoal):\n 1. local.dependent (A \\<union> B) \\<Longrightarrow> False", "also"], ["proof (state)\nthis:\n  (0::'b) = (\\<Sum>v\\<in>TA \\<union> TB. u v *s v)\n\ngoal (1 subgoal):\n 1. local.dependent (A \\<union> B) \\<Longrightarrow> False", "have \"\\<dots> = (\\<Sum>v\\<in>TA. u v *s v) + (\\<Sum>v\\<in>TB. u v *s v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>v\\<in>TA \\<union> TB. u v *s v) =\n    (\\<Sum>v\\<in>TA. u v *s v) + (\\<Sum>v\\<in>TB. u v *s v)", "by (rule sum.union_disjoint) fact+"], ["proof (state)\nthis:\n  (\\<Sum>v\\<in>TA \\<union> TB. u v *s v) =\n  (\\<Sum>v\\<in>TA. u v *s v) + (\\<Sum>v\\<in>TB. u v *s v)\n\ngoal (1 subgoal):\n 1. local.dependent (A \\<union> B) \\<Longrightarrow> False", "finally"], ["proof (chain)\npicking this:\n  (0::'b) = (\\<Sum>v\\<in>TA. u v *s v) + (\\<Sum>v\\<in>TB. u v *s v)", "have \"(\\<Sum>v\\<in>TA. u v *s v) = (\\<Sum>v\\<in>TB. (- u) v *s v)\" (is \"?x = ?y\")"], ["proof (prove)\nusing this:\n  (0::'b) = (\\<Sum>v\\<in>TA. u v *s v) + (\\<Sum>v\\<in>TB. u v *s v)\n\ngoal (1 subgoal):\n 1. (\\<Sum>v\\<in>TA. u v *s v) = (\\<Sum>v\\<in>TB. (- u) v *s v)", "by (simp add: sum_negf eq_neg_iff_add_eq_0)"], ["proof (state)\nthis:\n  (\\<Sum>v\\<in>TA. u v *s v) = (\\<Sum>v\\<in>TB. (- u) v *s v)\n\ngoal (1 subgoal):\n 1. local.dependent (A \\<union> B) \\<Longrightarrow> False", "from \\<open>finite TB\\<close> \\<open>TB \\<subseteq> B\\<close>"], ["proof (chain)\npicking this:\n  finite TB\n  TB \\<subseteq> B", "have \"?y \\<in> span B\""], ["proof (prove)\nusing this:\n  finite TB\n  TB \\<subseteq> B\n\ngoal (1 subgoal):\n 1. (\\<Sum>v\\<in>TB. (- u) v *s v) \\<in> local.span B", "by (auto simp: span_explicit simp del: uminus_apply)"], ["proof (state)\nthis:\n  (\\<Sum>v\\<in>TB. (- u) v *s v) \\<in> local.span B\n\ngoal (1 subgoal):\n 1. local.dependent (A \\<union> B) \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  (\\<Sum>v\\<in>TB. (- u) v *s v) \\<in> local.span B\n\ngoal (1 subgoal):\n 1. local.dependent (A \\<union> B) \\<Longrightarrow> False", "from \\<open>finite TA\\<close> \\<open>TA \\<subseteq> A\\<close>"], ["proof (chain)\npicking this:\n  finite TA\n  TA \\<subseteq> A", "have \"?x \\<in> span A\""], ["proof (prove)\nusing this:\n  finite TA\n  TA \\<subseteq> A\n\ngoal (1 subgoal):\n 1. (\\<Sum>v\\<in>TA. u v *s v) \\<in> local.span A", "by (auto simp: span_explicit)"], ["proof (state)\nthis:\n  (\\<Sum>v\\<in>TA. u v *s v) \\<in> local.span A\n\ngoal (1 subgoal):\n 1. local.dependent (A \\<union> B) \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  (\\<Sum>v\\<in>TB. (- u) v *s v) \\<in> local.span B\n  (\\<Sum>v\\<in>TA. u v *s v) \\<in> local.span A", "have \"?y \\<in> span A \\<inter> span B\""], ["proof (prove)\nusing this:\n  (\\<Sum>v\\<in>TB. (- u) v *s v) \\<in> local.span B\n  (\\<Sum>v\\<in>TA. u v *s v) \\<in> local.span A\n\ngoal (1 subgoal):\n 1. (\\<Sum>v\\<in>TB. (- u) v *s v) \\<in> local.span A \\<inter> local.span B", "by (simp add: \\<open>?x = ?y\\<close>)"], ["proof (state)\nthis:\n  (\\<Sum>v\\<in>TB. (- u) v *s v) \\<in> local.span A \\<inter> local.span B\n\ngoal (1 subgoal):\n 1. local.dependent (A \\<union> B) \\<Longrightarrow> False", "hence \"?x = 0\" and \"?y = 0\""], ["proof (prove)\nusing this:\n  (\\<Sum>v\\<in>TB. (- u) v *s v) \\<in> local.span A \\<inter> local.span B\n\ngoal (1 subgoal):\n 1. (\\<Sum>v\\<in>TA. u v *s v) = (0::'b) &&&\n    (\\<Sum>v\\<in>TB. (- u) v *s v) = (0::'b)", "by (simp_all add: \\<open>?x = ?y\\<close> assms(3))"], ["proof (state)\nthis:\n  (\\<Sum>v\\<in>TA. u v *s v) = (0::'b)\n  (\\<Sum>v\\<in>TB. (- u) v *s v) = (0::'b)\n\ngoal (1 subgoal):\n 1. local.dependent (A \\<union> B) \\<Longrightarrow> False", "from \\<open>v \\<in> T\\<close>"], ["proof (chain)\npicking this:\n  v \\<in> T", "have \"v \\<in> TA \\<union> TB\""], ["proof (prove)\nusing this:\n  v \\<in> T\n\ngoal (1 subgoal):\n 1. v \\<in> TA \\<union> TB", "by (simp only: T)"], ["proof (state)\nthis:\n  v \\<in> TA \\<union> TB\n\ngoal (1 subgoal):\n 1. local.dependent (A \\<union> B) \\<Longrightarrow> False", "hence \"u v = 0\""], ["proof (prove)\nusing this:\n  v \\<in> TA \\<union> TB\n\ngoal (1 subgoal):\n 1. u v = (0::'a)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. v \\<in> TA \\<Longrightarrow> u v = (0::'a)\n 2. v \\<in> TB \\<Longrightarrow> u v = (0::'a)", "assume \"v \\<in> TA\""], ["proof (state)\nthis:\n  v \\<in> TA\n\ngoal (2 subgoals):\n 1. v \\<in> TA \\<Longrightarrow> u v = (0::'a)\n 2. v \\<in> TB \\<Longrightarrow> u v = (0::'a)", "with assms(1) \\<open>finite TA\\<close> \\<open>TA \\<subseteq> A\\<close> \\<open>?x = 0\\<close>"], ["proof (chain)\npicking this:\n  local.independent A\n  finite TA\n  TA \\<subseteq> A\n  (\\<Sum>v\\<in>TA. u v *s v) = (0::'b)\n  v \\<in> TA", "show \"u v = 0\""], ["proof (prove)\nusing this:\n  local.independent A\n  finite TA\n  TA \\<subseteq> A\n  (\\<Sum>v\\<in>TA. u v *s v) = (0::'b)\n  v \\<in> TA\n\ngoal (1 subgoal):\n 1. u v = (0::'a)", "by (rule independentD)"], ["proof (state)\nthis:\n  u v = (0::'a)\n\ngoal (1 subgoal):\n 1. v \\<in> TB \\<Longrightarrow> u v = (0::'a)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. v \\<in> TB \\<Longrightarrow> u v = (0::'a)", "assume \"v \\<in> TB\""], ["proof (state)\nthis:\n  v \\<in> TB\n\ngoal (1 subgoal):\n 1. v \\<in> TB \\<Longrightarrow> u v = (0::'a)", "with assms(2) \\<open>finite TB\\<close> \\<open>TB \\<subseteq> B\\<close> \\<open>?y = 0\\<close>"], ["proof (chain)\npicking this:\n  local.independent B\n  finite TB\n  TB \\<subseteq> B\n  (\\<Sum>v\\<in>TB. (- u) v *s v) = (0::'b)\n  v \\<in> TB", "have \"(- u) v = 0\""], ["proof (prove)\nusing this:\n  local.independent B\n  finite TB\n  TB \\<subseteq> B\n  (\\<Sum>v\\<in>TB. (- u) v *s v) = (0::'b)\n  v \\<in> TB\n\ngoal (1 subgoal):\n 1. (- u) v = (0::'a)", "by (rule independentD)"], ["proof (state)\nthis:\n  (- u) v = (0::'a)\n\ngoal (1 subgoal):\n 1. v \\<in> TB \\<Longrightarrow> u v = (0::'a)", "thus \"u v = 0\""], ["proof (prove)\nusing this:\n  (- u) v = (0::'a)\n\ngoal (1 subgoal):\n 1. u v = (0::'a)", "by simp"], ["proof (state)\nthis:\n  u v = (0::'a)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  u v = (0::'a)\n\ngoal (1 subgoal):\n 1. local.dependent (A \\<union> B) \\<Longrightarrow> False", "with \\<open>u v \\<noteq> 0\\<close>"], ["proof (chain)\npicking this:\n  u v \\<noteq> (0::'a)\n  u v = (0::'a)", "show False"], ["proof (prove)\nusing this:\n  u v \\<noteq> (0::'a)\n  u v = (0::'a)\n\ngoal (1 subgoal):\n 1. False", ".."], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma subspace_direct_decomp:\n  assumes \"direct_decomp A ss\" and \"\\<And>s. s \\<in> set ss \\<Longrightarrow> subspace s\"\n  shows \"subspace A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.subspace A", "proof (rule subspaceI)"], ["proof (state)\ngoal (3 subgoals):\n 1. (0::'b) \\<in> A\n 2. \\<And>x y.\n       \\<lbrakk>x \\<in> A; y \\<in> A\\<rbrakk>\n       \\<Longrightarrow> x + y \\<in> A\n 3. \\<And>c x. x \\<in> A \\<Longrightarrow> c *s x \\<in> A", "let ?qs = \"map (\\<lambda>_. 0) ss\""], ["proof (state)\ngoal (3 subgoals):\n 1. (0::'b) \\<in> A\n 2. \\<And>x y.\n       \\<lbrakk>x \\<in> A; y \\<in> A\\<rbrakk>\n       \\<Longrightarrow> x + y \\<in> A\n 3. \\<And>c x. x \\<in> A \\<Longrightarrow> c *s x \\<in> A", "from assms(2)"], ["proof (chain)\npicking this:\n  ?s \\<in> set ss \\<Longrightarrow> local.subspace ?s", "have \"?qs \\<in> listset ss\""], ["proof (prove)\nusing this:\n  ?s \\<in> set ss \\<Longrightarrow> local.subspace ?s\n\ngoal (1 subgoal):\n 1. map (\\<lambda>_. 0::'b) ss \\<in> listset ss", "by (induct ss) (auto simp del: listset.simps(2) dest: subspace_0 intro: listset_ConsI)"], ["proof (state)\nthis:\n  map (\\<lambda>_. 0::'b) ss \\<in> listset ss\n\ngoal (3 subgoals):\n 1. (0::'b) \\<in> A\n 2. \\<And>x y.\n       \\<lbrakk>x \\<in> A; y \\<in> A\\<rbrakk>\n       \\<Longrightarrow> x + y \\<in> A\n 3. \\<And>c x. x \\<in> A \\<Longrightarrow> c *s x \\<in> A", "with assms(1)"], ["proof (chain)\npicking this:\n  direct_decomp A ss\n  map (\\<lambda>_. 0::'b) ss \\<in> listset ss", "have \"sum_list ?qs \\<in> A\""], ["proof (prove)\nusing this:\n  direct_decomp A ss\n  map (\\<lambda>_. 0::'b) ss \\<in> listset ss\n\ngoal (1 subgoal):\n 1. (\\<Sum>_\\<leftarrow>ss. (0::'b)) \\<in> A", "by (rule direct_decompD)"], ["proof (state)\nthis:\n  (\\<Sum>_\\<leftarrow>ss. (0::'b)) \\<in> A\n\ngoal (3 subgoals):\n 1. (0::'b) \\<in> A\n 2. \\<And>x y.\n       \\<lbrakk>x \\<in> A; y \\<in> A\\<rbrakk>\n       \\<Longrightarrow> x + y \\<in> A\n 3. \\<And>c x. x \\<in> A \\<Longrightarrow> c *s x \\<in> A", "thus \"0 \\<in> A\""], ["proof (prove)\nusing this:\n  (\\<Sum>_\\<leftarrow>ss. (0::'b)) \\<in> A\n\ngoal (1 subgoal):\n 1. (0::'b) \\<in> A", "by simp"], ["proof (state)\nthis:\n  (0::'b) \\<in> A\n\ngoal (2 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> A; y \\<in> A\\<rbrakk>\n       \\<Longrightarrow> x + y \\<in> A\n 2. \\<And>c x. x \\<in> A \\<Longrightarrow> c *s x \\<in> A", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> A; y \\<in> A\\<rbrakk>\n       \\<Longrightarrow> x + y \\<in> A\n 2. \\<And>c x. x \\<in> A \\<Longrightarrow> c *s x \\<in> A", "fix p q"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> A; y \\<in> A\\<rbrakk>\n       \\<Longrightarrow> x + y \\<in> A\n 2. \\<And>c x. x \\<in> A \\<Longrightarrow> c *s x \\<in> A", "assume \"p \\<in> A\""], ["proof (state)\nthis:\n  p \\<in> A\n\ngoal (2 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> A; y \\<in> A\\<rbrakk>\n       \\<Longrightarrow> x + y \\<in> A\n 2. \\<And>c x. x \\<in> A \\<Longrightarrow> c *s x \\<in> A", "with assms(1)"], ["proof (chain)\npicking this:\n  direct_decomp A ss\n  p \\<in> A", "obtain ps where ps: \"ps \\<in> listset ss\" and p: \"p = sum_list ps\""], ["proof (prove)\nusing this:\n  direct_decomp A ss\n  p \\<in> A\n\ngoal (1 subgoal):\n 1. (\\<And>ps.\n        \\<lbrakk>ps \\<in> listset ss; p = sum_list ps\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule direct_decompE)"], ["proof (state)\nthis:\n  ps \\<in> listset ss\n  p = sum_list ps\n\ngoal (2 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> A; y \\<in> A\\<rbrakk>\n       \\<Longrightarrow> x + y \\<in> A\n 2. \\<And>c x. x \\<in> A \\<Longrightarrow> c *s x \\<in> A", "assume \"q \\<in> A\""], ["proof (state)\nthis:\n  q \\<in> A\n\ngoal (2 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> A; y \\<in> A\\<rbrakk>\n       \\<Longrightarrow> x + y \\<in> A\n 2. \\<And>c x. x \\<in> A \\<Longrightarrow> c *s x \\<in> A", "with assms(1)"], ["proof (chain)\npicking this:\n  direct_decomp A ss\n  q \\<in> A", "obtain qs where qs: \"qs \\<in> listset ss\" and q: \"q = sum_list qs\""], ["proof (prove)\nusing this:\n  direct_decomp A ss\n  q \\<in> A\n\ngoal (1 subgoal):\n 1. (\\<And>qs.\n        \\<lbrakk>qs \\<in> listset ss; q = sum_list qs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule direct_decompE)"], ["proof (state)\nthis:\n  qs \\<in> listset ss\n  q = sum_list qs\n\ngoal (2 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> A; y \\<in> A\\<rbrakk>\n       \\<Longrightarrow> x + y \\<in> A\n 2. \\<And>c x. x \\<in> A \\<Longrightarrow> c *s x \\<in> A", "from ps qs"], ["proof (chain)\npicking this:\n  ps \\<in> listset ss\n  qs \\<in> listset ss", "have l: \"length ps = length qs\""], ["proof (prove)\nusing this:\n  ps \\<in> listset ss\n  qs \\<in> listset ss\n\ngoal (1 subgoal):\n 1. length ps = length qs", "by (simp only: listsetD)"], ["proof (state)\nthis:\n  length ps = length qs\n\ngoal (2 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> A; y \\<in> A\\<rbrakk>\n       \\<Longrightarrow> x + y \\<in> A\n 2. \\<And>c x. x \\<in> A \\<Longrightarrow> c *s x \\<in> A", "from ps qs"], ["proof (chain)\npicking this:\n  ps \\<in> listset ss\n  qs \\<in> listset ss", "have \"map2 (+) ps qs \\<in> listset ss\" (is \"?qs \\<in> _\")"], ["proof (prove)\nusing this:\n  ps \\<in> listset ss\n  qs \\<in> listset ss\n\ngoal (1 subgoal):\n 1. map2 (+) ps qs \\<in> listset ss", "by (rule listset_closed_map2) (auto dest: assms(2) subspace_add)"], ["proof (state)\nthis:\n  map2 (+) ps qs \\<in> listset ss\n\ngoal (2 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> A; y \\<in> A\\<rbrakk>\n       \\<Longrightarrow> x + y \\<in> A\n 2. \\<And>c x. x \\<in> A \\<Longrightarrow> c *s x \\<in> A", "with assms(1)"], ["proof (chain)\npicking this:\n  direct_decomp A ss\n  map2 (+) ps qs \\<in> listset ss", "have \"sum_list ?qs \\<in> A\""], ["proof (prove)\nusing this:\n  direct_decomp A ss\n  map2 (+) ps qs \\<in> listset ss\n\ngoal (1 subgoal):\n 1. sum_list (map2 (+) ps qs) \\<in> A", "by (rule direct_decompD)"], ["proof (state)\nthis:\n  sum_list (map2 (+) ps qs) \\<in> A\n\ngoal (2 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> A; y \\<in> A\\<rbrakk>\n       \\<Longrightarrow> x + y \\<in> A\n 2. \\<And>c x. x \\<in> A \\<Longrightarrow> c *s x \\<in> A", "thus \"p + q \\<in> A\""], ["proof (prove)\nusing this:\n  sum_list (map2 (+) ps qs) \\<in> A\n\ngoal (1 subgoal):\n 1. p + q \\<in> A", "using l"], ["proof (prove)\nusing this:\n  sum_list (map2 (+) ps qs) \\<in> A\n  length ps = length qs\n\ngoal (1 subgoal):\n 1. p + q \\<in> A", "by (simp only: p q sum_list_map2_plus)"], ["proof (state)\nthis:\n  p + q \\<in> A\n\ngoal (1 subgoal):\n 1. \\<And>c x. x \\<in> A \\<Longrightarrow> c *s x \\<in> A", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>c x. x \\<in> A \\<Longrightarrow> c *s x \\<in> A", "fix c p"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>c x. x \\<in> A \\<Longrightarrow> c *s x \\<in> A", "assume \"p \\<in> A\""], ["proof (state)\nthis:\n  p \\<in> A\n\ngoal (1 subgoal):\n 1. \\<And>c x. x \\<in> A \\<Longrightarrow> c *s x \\<in> A", "with assms(1)"], ["proof (chain)\npicking this:\n  direct_decomp A ss\n  p \\<in> A", "obtain ps where \"ps \\<in> listset ss\" and p: \"p = sum_list ps\""], ["proof (prove)\nusing this:\n  direct_decomp A ss\n  p \\<in> A\n\ngoal (1 subgoal):\n 1. (\\<And>ps.\n        \\<lbrakk>ps \\<in> listset ss; p = sum_list ps\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule direct_decompE)"], ["proof (state)\nthis:\n  ps \\<in> listset ss\n  p = sum_list ps\n\ngoal (1 subgoal):\n 1. \\<And>c x. x \\<in> A \\<Longrightarrow> c *s x \\<in> A", "from this(1)"], ["proof (chain)\npicking this:\n  ps \\<in> listset ss", "have \"map ((*s) c) ps \\<in> listset ss\" (is \"?qs \\<in> _\")"], ["proof (prove)\nusing this:\n  ps \\<in> listset ss\n\ngoal (1 subgoal):\n 1. map ((*s) c) ps \\<in> listset ss", "by (rule listset_closed_map) (auto dest: assms(2) subspace_scale)"], ["proof (state)\nthis:\n  map ((*s) c) ps \\<in> listset ss\n\ngoal (1 subgoal):\n 1. \\<And>c x. x \\<in> A \\<Longrightarrow> c *s x \\<in> A", "with assms(1)"], ["proof (chain)\npicking this:\n  direct_decomp A ss\n  map ((*s) c) ps \\<in> listset ss", "have \"sum_list ?qs \\<in> A\""], ["proof (prove)\nusing this:\n  direct_decomp A ss\n  map ((*s) c) ps \\<in> listset ss\n\ngoal (1 subgoal):\n 1. sum_list (map ((*s) c) ps) \\<in> A", "by (rule direct_decompD)"], ["proof (state)\nthis:\n  sum_list (map ((*s) c) ps) \\<in> A\n\ngoal (1 subgoal):\n 1. \\<And>c x. x \\<in> A \\<Longrightarrow> c *s x \\<in> A", "also"], ["proof (state)\nthis:\n  sum_list (map ((*s) c) ps) \\<in> A\n\ngoal (1 subgoal):\n 1. \\<And>c x. x \\<in> A \\<Longrightarrow> c *s x \\<in> A", "have \"sum_list ?qs = c *s sum_list ps\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum_list (map ((*s) c) ps) = c *s sum_list ps", "by (induct ps) (simp_all add: scale_right_distrib)"], ["proof (state)\nthis:\n  sum_list (map ((*s) c) ps) = c *s sum_list ps\n\ngoal (1 subgoal):\n 1. \\<And>c x. x \\<in> A \\<Longrightarrow> c *s x \\<in> A", "finally"], ["proof (chain)\npicking this:\n  c *s sum_list ps \\<in> A", "show \"c *s p \\<in> A\""], ["proof (prove)\nusing this:\n  c *s sum_list ps \\<in> A\n\ngoal (1 subgoal):\n 1. c *s p \\<in> A", "by (simp only: p)"], ["proof (state)\nthis:\n  c *s p \\<in> A\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma is_basis_alt: \"subspace V \\<Longrightarrow> is_basis V B \\<longleftrightarrow> (independent B \\<and> span B = V)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.subspace V \\<Longrightarrow>\n    is_basis V B = (local.independent B \\<and> local.span B = V)", "by (metis (full_types) is_basis_def dim_eq_card span_eq span_eq_iff)"], ["", "lemma is_basis_finite: \"is_basis V A \\<Longrightarrow> is_basis V B \\<Longrightarrow> finite A \\<longleftrightarrow> finite B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_basis V A; is_basis V B\\<rbrakk>\n    \\<Longrightarrow> finite A = finite B", "unfolding is_basis_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<subseteq> V \\<and>\n             local.independent A \\<and>\n             V \\<subseteq> local.span A \\<and> card A = local.dim V;\n     B \\<subseteq> V \\<and>\n     local.independent B \\<and>\n     V \\<subseteq> local.span B \\<and> card B = local.dim V\\<rbrakk>\n    \\<Longrightarrow> finite A = finite B", "using independent_span_bound"], ["proof (prove)\nusing this:\n  \\<lbrakk>finite ?T; local.independent ?S;\n   ?S \\<subseteq> local.span ?T\\<rbrakk>\n  \\<Longrightarrow> finite ?S \\<and> card ?S \\<le> card ?T\n\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<subseteq> V \\<and>\n             local.independent A \\<and>\n             V \\<subseteq> local.span A \\<and> card A = local.dim V;\n     B \\<subseteq> V \\<and>\n     local.independent B \\<and>\n     V \\<subseteq> local.span B \\<and> card B = local.dim V\\<rbrakk>\n    \\<Longrightarrow> finite A = finite B", "by auto"], ["", "lemma some_basis_is_basis: \"is_basis V (some_basis V)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_basis V (some_basis V)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. is_basis V (some_basis V)", "obtain B where \"B \\<subseteq> V\" and \"independent B\" and \"V \\<subseteq> span B\" and \"card B = dim V\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>B.\n        \\<lbrakk>B \\<subseteq> V; local.independent B;\n         V \\<subseteq> local.span B; card B = local.dim V\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule basis_exists)"], ["proof (state)\nthis:\n  B \\<subseteq> V\n  local.independent B\n  V \\<subseteq> local.span B\n  card B = local.dim V\n\ngoal (1 subgoal):\n 1. is_basis V (some_basis V)", "hence \"is_basis V B\""], ["proof (prove)\nusing this:\n  B \\<subseteq> V\n  local.independent B\n  V \\<subseteq> local.span B\n  card B = local.dim V\n\ngoal (1 subgoal):\n 1. is_basis V B", "by (simp add: is_basis_def)"], ["proof (state)\nthis:\n  is_basis V B\n\ngoal (1 subgoal):\n 1. is_basis V (some_basis V)", "thus ?thesis"], ["proof (prove)\nusing this:\n  is_basis V B\n\ngoal (1 subgoal):\n 1. is_basis V (some_basis V)", "unfolding some_basis_def"], ["proof (prove)\nusing this:\n  is_basis V B\n\ngoal (1 subgoal):\n 1. is_basis V (Eps (is_basis V))", "by (rule someI)"], ["proof (state)\nthis:\n  is_basis V (some_basis V)\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary\n  shows some_basis_subset: \"some_basis V \\<subseteq> V\"\n    and independent_some_basis: \"independent (some_basis V)\"\n    and span_some_basis_supset: \"V \\<subseteq> span (some_basis V)\"\n    and card_some_basis: \"card (some_basis V) = dim V\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (some_basis V \\<subseteq> V &&& local.independent (some_basis V)) &&&\n    V \\<subseteq> local.span (some_basis V) &&&\n    card (some_basis V) = local.dim V", "using some_basis_is_basis[of V]"], ["proof (prove)\nusing this:\n  is_basis V (some_basis V)\n\ngoal (1 subgoal):\n 1. (some_basis V \\<subseteq> V &&& local.independent (some_basis V)) &&&\n    V \\<subseteq> local.span (some_basis V) &&&\n    card (some_basis V) = local.dim V", "by (simp_all add: is_basis_def)"], ["", "lemma some_basis_not_zero: \"0 \\<notin> some_basis V\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (0::'b) \\<notin> some_basis V", "using independent_some_basis dependent_zero"], ["proof (prove)\nusing this:\n  local.independent (some_basis ?V)\n  (0::'b) \\<in> ?A \\<Longrightarrow> local.dependent ?A\n\ngoal (1 subgoal):\n 1. (0::'b) \\<notin> some_basis V", "by blast"], ["", "lemma span_some_basis: \"subspace V \\<Longrightarrow> span (some_basis V) = V\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.subspace V \\<Longrightarrow> local.span (some_basis V) = V", "by (simp add: span_subspace some_basis_subset span_some_basis_supset)"], ["", "lemma direct_decomp_some_basis_pairwise_disjnt:\n  assumes \"direct_decomp A ss\" and \"\\<And>s. s \\<in> set ss \\<Longrightarrow> subspace s\"\n  shows \"pairwise (\\<lambda>s1 s2. disjnt (some_basis s1) (some_basis s2)) (set ss)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pairwise (\\<lambda>s1 s2. disjnt (some_basis s1) (some_basis s2))\n     (set ss)", "proof (rule pairwiseI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> set ss; y \\<in> set ss; x \\<noteq> y\\<rbrakk>\n       \\<Longrightarrow> disjnt (some_basis x) (some_basis y)", "fix s1 s2"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> set ss; y \\<in> set ss; x \\<noteq> y\\<rbrakk>\n       \\<Longrightarrow> disjnt (some_basis x) (some_basis y)", "assume \"s1 \\<in> set ss\" and \"s2 \\<in> set ss\" and \"s1 \\<noteq> s2\""], ["proof (state)\nthis:\n  s1 \\<in> set ss\n  s2 \\<in> set ss\n  s1 \\<noteq> s2\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> set ss; y \\<in> set ss; x \\<noteq> y\\<rbrakk>\n       \\<Longrightarrow> disjnt (some_basis x) (some_basis y)", "have \"some_basis s1 \\<inter> some_basis s2 \\<subseteq> s1 \\<inter> s2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. some_basis s1 \\<inter> some_basis s2 \\<subseteq> s1 \\<inter> s2", "using some_basis_subset"], ["proof (prove)\nusing this:\n  some_basis ?V \\<subseteq> ?V\n\ngoal (1 subgoal):\n 1. some_basis s1 \\<inter> some_basis s2 \\<subseteq> s1 \\<inter> s2", "by blast"], ["proof (state)\nthis:\n  some_basis s1 \\<inter> some_basis s2 \\<subseteq> s1 \\<inter> s2\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> set ss; y \\<in> set ss; x \\<noteq> y\\<rbrakk>\n       \\<Longrightarrow> disjnt (some_basis x) (some_basis y)", "also"], ["proof (state)\nthis:\n  some_basis s1 \\<inter> some_basis s2 \\<subseteq> s1 \\<inter> s2\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> set ss; y \\<in> set ss; x \\<noteq> y\\<rbrakk>\n       \\<Longrightarrow> disjnt (some_basis x) (some_basis y)", "from direct_decomp_pairwise_zero"], ["proof (chain)\npicking this:\n  \\<lbrakk>direct_decomp ?A ?ss;\n   \\<And>s. s \\<in> set ?ss \\<Longrightarrow> (0::?'a) \\<in> s\\<rbrakk>\n  \\<Longrightarrow> pairwise (\\<lambda>s1 s2. s1 \\<inter> s2 = {0::?'a})\n                     (set ?ss)", "have \"\\<dots> = {0}\""], ["proof (prove)\nusing this:\n  \\<lbrakk>direct_decomp ?A ?ss;\n   \\<And>s. s \\<in> set ?ss \\<Longrightarrow> (0::?'a) \\<in> s\\<rbrakk>\n  \\<Longrightarrow> pairwise (\\<lambda>s1 s2. s1 \\<inter> s2 = {0::?'a})\n                     (set ?ss)\n\ngoal (1 subgoal):\n 1. s1 \\<inter> s2 = {0::'b}", "proof (rule pairwiseD)"], ["proof (state)\ngoal (5 subgoals):\n 1. direct_decomp ?A1 ?ss1\n 2. \\<And>s. s \\<in> set ?ss1 \\<Longrightarrow> (0::'b) \\<in> s\n 3. s1 \\<in> set ?ss1\n 4. s2 \\<in> set ?ss1\n 5. s1 \\<noteq> s2", "fix s"], ["proof (state)\ngoal (5 subgoals):\n 1. direct_decomp ?A1 ?ss1\n 2. \\<And>s. s \\<in> set ?ss1 \\<Longrightarrow> (0::'b) \\<in> s\n 3. s1 \\<in> set ?ss1\n 4. s2 \\<in> set ?ss1\n 5. s1 \\<noteq> s2", "assume \"s \\<in> set ss\""], ["proof (state)\nthis:\n  s \\<in> set ss\n\ngoal (5 subgoals):\n 1. direct_decomp ?A1 ?ss1\n 2. \\<And>s. s \\<in> set ?ss1 \\<Longrightarrow> (0::'b) \\<in> s\n 3. s1 \\<in> set ?ss1\n 4. s2 \\<in> set ?ss1\n 5. s1 \\<noteq> s2", "hence \"subspace s\""], ["proof (prove)\nusing this:\n  s \\<in> set ss\n\ngoal (1 subgoal):\n 1. local.subspace s", "by (rule assms(2))"], ["proof (state)\nthis:\n  local.subspace s\n\ngoal (5 subgoals):\n 1. direct_decomp ?A1 ?ss1\n 2. \\<And>s. s \\<in> set ?ss1 \\<Longrightarrow> (0::'b) \\<in> s\n 3. s1 \\<in> set ?ss1\n 4. s2 \\<in> set ?ss1\n 5. s1 \\<noteq> s2", "thus \"0 \\<in> s\""], ["proof (prove)\nusing this:\n  local.subspace s\n\ngoal (1 subgoal):\n 1. (0::'b) \\<in> s", "by (rule subspace_0)"], ["proof (state)\nthis:\n  (0::'b) \\<in> s\n\ngoal (4 subgoals):\n 1. direct_decomp ?A1 ss\n 2. s1 \\<in> set ss\n 3. s2 \\<in> set ss\n 4. s1 \\<noteq> s2", "qed fact+"], ["proof (state)\nthis:\n  s1 \\<inter> s2 = {0::'b}\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> set ss; y \\<in> set ss; x \\<noteq> y\\<rbrakk>\n       \\<Longrightarrow> disjnt (some_basis x) (some_basis y)", "finally"], ["proof (chain)\npicking this:\n  some_basis s1 \\<inter> some_basis s2 \\<subseteq> {0::'b}", "have \"some_basis s1 \\<inter> some_basis s2 \\<subseteq> {0}\""], ["proof (prove)\nusing this:\n  some_basis s1 \\<inter> some_basis s2 \\<subseteq> {0::'b}\n\ngoal (1 subgoal):\n 1. some_basis s1 \\<inter> some_basis s2 \\<subseteq> {0::'b}", "."], ["proof (state)\nthis:\n  some_basis s1 \\<inter> some_basis s2 \\<subseteq> {0::'b}\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> set ss; y \\<in> set ss; x \\<noteq> y\\<rbrakk>\n       \\<Longrightarrow> disjnt (some_basis x) (some_basis y)", "with some_basis_not_zero"], ["proof (chain)\npicking this:\n  (0::'b) \\<notin> some_basis ?V\n  some_basis s1 \\<inter> some_basis s2 \\<subseteq> {0::'b}", "show \"disjnt (some_basis s1) (some_basis s2)\""], ["proof (prove)\nusing this:\n  (0::'b) \\<notin> some_basis ?V\n  some_basis s1 \\<inter> some_basis s2 \\<subseteq> {0::'b}\n\ngoal (1 subgoal):\n 1. disjnt (some_basis s1) (some_basis s2)", "unfolding disjnt_def"], ["proof (prove)\nusing this:\n  (0::'b) \\<notin> some_basis ?V\n  some_basis s1 \\<inter> some_basis s2 \\<subseteq> {0::'b}\n\ngoal (1 subgoal):\n 1. some_basis s1 \\<inter> some_basis s2 = {}", "by blast"], ["proof (state)\nthis:\n  disjnt (some_basis s1) (some_basis s2)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma direct_decomp_span_some_basis:\n  assumes \"direct_decomp A ss\" and \"\\<And>s. s \\<in> set ss \\<Longrightarrow> subspace s\"\n  shows \"span (\\<Union>(some_basis ` set ss)) = A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.span (\\<Union> (some_basis ` set ss)) = A", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. local.span (\\<Union> (some_basis ` set ss)) = A", "from assms(1)"], ["proof (chain)\npicking this:\n  direct_decomp A ss", "have eq0[symmetric]: \"sum_list ` listset ss = A\""], ["proof (prove)\nusing this:\n  direct_decomp A ss\n\ngoal (1 subgoal):\n 1. sum_list ` listset ss = A", "by (rule direct_decompD)"], ["proof (state)\nthis:\n  A = sum_list ` listset ss\n\ngoal (1 subgoal):\n 1. local.span (\\<Union> (some_basis ` set ss)) = A", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. local.span (\\<Union> (some_basis ` set ss)) = A", "unfolding eq0"], ["proof (prove)\ngoal (1 subgoal):\n 1. local.span (\\<Union> (some_basis ` set ss)) = sum_list ` listset ss", "using assms(2)"], ["proof (prove)\nusing this:\n  ?s \\<in> set ss \\<Longrightarrow> local.subspace ?s\n\ngoal (1 subgoal):\n 1. local.span (\\<Union> (some_basis ` set ss)) = sum_list ` listset ss", "proof (induct ss)"], ["proof (state)\ngoal (2 subgoals):\n 1. (\\<And>s.\n        s \\<in> set [] \\<Longrightarrow> local.subspace s) \\<Longrightarrow>\n    local.span (\\<Union> (some_basis ` set [])) = sum_list ` listset []\n 2. \\<And>a ss.\n       \\<lbrakk>(\\<And>s.\n                    s \\<in> set ss \\<Longrightarrow>\n                    local.subspace s) \\<Longrightarrow>\n                local.span (\\<Union> (some_basis ` set ss)) =\n                sum_list ` listset ss;\n        \\<And>s.\n           s \\<in> set (a # ss) \\<Longrightarrow> local.subspace s\\<rbrakk>\n       \\<Longrightarrow> local.span (\\<Union> (some_basis ` set (a # ss))) =\n                         sum_list ` listset (a # ss)", "case Nil"], ["proof (state)\nthis:\n  ?s \\<in> set [] \\<Longrightarrow> local.subspace ?s\n\ngoal (2 subgoals):\n 1. (\\<And>s.\n        s \\<in> set [] \\<Longrightarrow> local.subspace s) \\<Longrightarrow>\n    local.span (\\<Union> (some_basis ` set [])) = sum_list ` listset []\n 2. \\<And>a ss.\n       \\<lbrakk>(\\<And>s.\n                    s \\<in> set ss \\<Longrightarrow>\n                    local.subspace s) \\<Longrightarrow>\n                local.span (\\<Union> (some_basis ` set ss)) =\n                sum_list ` listset ss;\n        \\<And>s.\n           s \\<in> set (a # ss) \\<Longrightarrow> local.subspace s\\<rbrakk>\n       \\<Longrightarrow> local.span (\\<Union> (some_basis ` set (a # ss))) =\n                         sum_list ` listset (a # ss)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. local.span (\\<Union> (some_basis ` set [])) = sum_list ` listset []", "by simp"], ["proof (state)\nthis:\n  local.span (\\<Union> (some_basis ` set [])) = sum_list ` listset []\n\ngoal (1 subgoal):\n 1. \\<And>a ss.\n       \\<lbrakk>(\\<And>s.\n                    s \\<in> set ss \\<Longrightarrow>\n                    local.subspace s) \\<Longrightarrow>\n                local.span (\\<Union> (some_basis ` set ss)) =\n                sum_list ` listset ss;\n        \\<And>s.\n           s \\<in> set (a # ss) \\<Longrightarrow> local.subspace s\\<rbrakk>\n       \\<Longrightarrow> local.span (\\<Union> (some_basis ` set (a # ss))) =\n                         sum_list ` listset (a # ss)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a ss.\n       \\<lbrakk>(\\<And>s.\n                    s \\<in> set ss \\<Longrightarrow>\n                    local.subspace s) \\<Longrightarrow>\n                local.span (\\<Union> (some_basis ` set ss)) =\n                sum_list ` listset ss;\n        \\<And>s.\n           s \\<in> set (a # ss) \\<Longrightarrow> local.subspace s\\<rbrakk>\n       \\<Longrightarrow> local.span (\\<Union> (some_basis ` set (a # ss))) =\n                         sum_list ` listset (a # ss)", "case (Cons s ss)"], ["proof (state)\nthis:\n  (\\<And>s.\n      s \\<in> set ss \\<Longrightarrow> local.subspace s) \\<Longrightarrow>\n  local.span (\\<Union> (some_basis ` set ss)) = sum_list ` listset ss\n  ?s \\<in> set (s # ss) \\<Longrightarrow> local.subspace ?s\n\ngoal (1 subgoal):\n 1. \\<And>a ss.\n       \\<lbrakk>(\\<And>s.\n                    s \\<in> set ss \\<Longrightarrow>\n                    local.subspace s) \\<Longrightarrow>\n                local.span (\\<Union> (some_basis ` set ss)) =\n                sum_list ` listset ss;\n        \\<And>s.\n           s \\<in> set (a # ss) \\<Longrightarrow> local.subspace s\\<rbrakk>\n       \\<Longrightarrow> local.span (\\<Union> (some_basis ` set (a # ss))) =\n                         sum_list ` listset (a # ss)", "have \"subspace s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.subspace s", "by (rule Cons.prems) simp"], ["proof (state)\nthis:\n  local.subspace s\n\ngoal (1 subgoal):\n 1. \\<And>a ss.\n       \\<lbrakk>(\\<And>s.\n                    s \\<in> set ss \\<Longrightarrow>\n                    local.subspace s) \\<Longrightarrow>\n                local.span (\\<Union> (some_basis ` set ss)) =\n                sum_list ` listset ss;\n        \\<And>s.\n           s \\<in> set (a # ss) \\<Longrightarrow> local.subspace s\\<rbrakk>\n       \\<Longrightarrow> local.span (\\<Union> (some_basis ` set (a # ss))) =\n                         sum_list ` listset (a # ss)", "hence eq1: \"span (some_basis s) = s\""], ["proof (prove)\nusing this:\n  local.subspace s\n\ngoal (1 subgoal):\n 1. local.span (some_basis s) = s", "by (rule span_some_basis)"], ["proof (state)\nthis:\n  local.span (some_basis s) = s\n\ngoal (1 subgoal):\n 1. \\<And>a ss.\n       \\<lbrakk>(\\<And>s.\n                    s \\<in> set ss \\<Longrightarrow>\n                    local.subspace s) \\<Longrightarrow>\n                local.span (\\<Union> (some_basis ` set ss)) =\n                sum_list ` listset ss;\n        \\<And>s.\n           s \\<in> set (a # ss) \\<Longrightarrow> local.subspace s\\<rbrakk>\n       \\<Longrightarrow> local.span (\\<Union> (some_basis ` set (a # ss))) =\n                         sum_list ` listset (a # ss)", "have \"\\<And>s'. s' \\<in> set ss \\<Longrightarrow> subspace s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s'. s' \\<in> set ss \\<Longrightarrow> local.subspace s'", "by (rule Cons.prems) simp"], ["proof (state)\nthis:\n  ?s' \\<in> set ss \\<Longrightarrow> local.subspace ?s'\n\ngoal (1 subgoal):\n 1. \\<And>a ss.\n       \\<lbrakk>(\\<And>s.\n                    s \\<in> set ss \\<Longrightarrow>\n                    local.subspace s) \\<Longrightarrow>\n                local.span (\\<Union> (some_basis ` set ss)) =\n                sum_list ` listset ss;\n        \\<And>s.\n           s \\<in> set (a # ss) \\<Longrightarrow> local.subspace s\\<rbrakk>\n       \\<Longrightarrow> local.span (\\<Union> (some_basis ` set (a # ss))) =\n                         sum_list ` listset (a # ss)", "hence eq2: \"span (\\<Union> (some_basis ` set ss)) = sum_list ` listset ss\""], ["proof (prove)\nusing this:\n  ?s' \\<in> set ss \\<Longrightarrow> local.subspace ?s'\n\ngoal (1 subgoal):\n 1. local.span (\\<Union> (some_basis ` set ss)) = sum_list ` listset ss", "by (rule Cons.hyps)"], ["proof (state)\nthis:\n  local.span (\\<Union> (some_basis ` set ss)) = sum_list ` listset ss\n\ngoal (1 subgoal):\n 1. \\<And>a ss.\n       \\<lbrakk>(\\<And>s.\n                    s \\<in> set ss \\<Longrightarrow>\n                    local.subspace s) \\<Longrightarrow>\n                local.span (\\<Union> (some_basis ` set ss)) =\n                sum_list ` listset ss;\n        \\<And>s.\n           s \\<in> set (a # ss) \\<Longrightarrow> local.subspace s\\<rbrakk>\n       \\<Longrightarrow> local.span (\\<Union> (some_basis ` set (a # ss))) =\n                         sum_list ` listset (a # ss)", "have \"span (\\<Union> (some_basis ` set (s # ss))) = {x + y |x y. x \\<in> s \\<and> y \\<in> sum_list ` listset ss}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.span (\\<Union> (some_basis ` set (s # ss))) =\n    {x + y |x y. x \\<in> s \\<and> y \\<in> sum_list ` listset ss}", "by (simp add: span_Un eq1 eq2)"], ["proof (state)\nthis:\n  local.span (\\<Union> (some_basis ` set (s # ss))) =\n  {x + y |x y. x \\<in> s \\<and> y \\<in> sum_list ` listset ss}\n\ngoal (1 subgoal):\n 1. \\<And>a ss.\n       \\<lbrakk>(\\<And>s.\n                    s \\<in> set ss \\<Longrightarrow>\n                    local.subspace s) \\<Longrightarrow>\n                local.span (\\<Union> (some_basis ` set ss)) =\n                sum_list ` listset ss;\n        \\<And>s.\n           s \\<in> set (a # ss) \\<Longrightarrow> local.subspace s\\<rbrakk>\n       \\<Longrightarrow> local.span (\\<Union> (some_basis ` set (a # ss))) =\n                         sum_list ` listset (a # ss)", "also"], ["proof (state)\nthis:\n  local.span (\\<Union> (some_basis ` set (s # ss))) =\n  {x + y |x y. x \\<in> s \\<and> y \\<in> sum_list ` listset ss}\n\ngoal (1 subgoal):\n 1. \\<And>a ss.\n       \\<lbrakk>(\\<And>s.\n                    s \\<in> set ss \\<Longrightarrow>\n                    local.subspace s) \\<Longrightarrow>\n                local.span (\\<Union> (some_basis ` set ss)) =\n                sum_list ` listset ss;\n        \\<And>s.\n           s \\<in> set (a # ss) \\<Longrightarrow> local.subspace s\\<rbrakk>\n       \\<Longrightarrow> local.span (\\<Union> (some_basis ` set (a # ss))) =\n                         sum_list ` listset (a # ss)", "have \"\\<dots> = sum_list ` listset (s # ss)\" (is \"?A = ?B\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. {x + y |x y. x \\<in> s \\<and> y \\<in> sum_list ` listset ss} =\n    sum_list ` listset (s # ss)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. {x + y |x y. x \\<in> s \\<and> y \\<in> sum_list ` listset ss}\n    \\<subseteq> sum_list ` listset (s # ss)\n 2. sum_list ` listset (s # ss)\n    \\<subseteq> {x + y |x y. x \\<in> s \\<and> y \\<in> sum_list ` listset ss}", "show \"?A \\<subseteq> ?B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {x + y |x y. x \\<in> s \\<and> y \\<in> sum_list ` listset ss}\n    \\<subseteq> sum_list ` listset (s # ss)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {x + y |x y.\n                x \\<in> s \\<and>\n                y \\<in> sum_list ` listset ss} \\<Longrightarrow>\n       x \\<in> sum_list ` listset (s # ss)", "fix a"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {x + y |x y.\n                x \\<in> s \\<and>\n                y \\<in> sum_list ` listset ss} \\<Longrightarrow>\n       x \\<in> sum_list ` listset (s # ss)", "assume \"a \\<in> ?A\""], ["proof (state)\nthis:\n  a \\<in> {x + y |x y. x \\<in> s \\<and> y \\<in> sum_list ` listset ss}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {x + y |x y.\n                x \\<in> s \\<and>\n                y \\<in> sum_list ` listset ss} \\<Longrightarrow>\n       x \\<in> sum_list ` listset (s # ss)", "then"], ["proof (chain)\npicking this:\n  a \\<in> {x + y |x y. x \\<in> s \\<and> y \\<in> sum_list ` listset ss}", "obtain x y where \"x \\<in> s\" and \"y \\<in> sum_list ` listset ss\" and a: \"a = x + y\""], ["proof (prove)\nusing this:\n  a \\<in> {x + y |x y. x \\<in> s \\<and> y \\<in> sum_list ` listset ss}\n\ngoal (1 subgoal):\n 1. (\\<And>x y.\n        \\<lbrakk>x \\<in> s; y \\<in> sum_list ` listset ss;\n         a = x + y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  x \\<in> s\n  y \\<in> sum_list ` listset ss\n  a = x + y\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {x + y |x y.\n                x \\<in> s \\<and>\n                y \\<in> sum_list ` listset ss} \\<Longrightarrow>\n       x \\<in> sum_list ` listset (s # ss)", "from this(2)"], ["proof (chain)\npicking this:\n  y \\<in> sum_list ` listset ss", "obtain qs where \"qs \\<in> listset ss\" and y: \"y = sum_list qs\""], ["proof (prove)\nusing this:\n  y \\<in> sum_list ` listset ss\n\ngoal (1 subgoal):\n 1. (\\<And>qs.\n        \\<lbrakk>qs \\<in> listset ss; y = sum_list qs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  qs \\<in> listset ss\n  y = sum_list qs\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {x + y |x y.\n                x \\<in> s \\<and>\n                y \\<in> sum_list ` listset ss} \\<Longrightarrow>\n       x \\<in> sum_list ` listset (s # ss)", "from \\<open>x \\<in> s\\<close> this(1) refl"], ["proof (chain)\npicking this:\n  x \\<in> s\n  qs \\<in> listset ss\n  ?t = ?t", "have \"x # qs \\<in> listset (s # ss)\""], ["proof (prove)\nusing this:\n  x \\<in> s\n  qs \\<in> listset ss\n  ?t = ?t\n\ngoal (1 subgoal):\n 1. x # qs \\<in> listset (s # ss)", "by (rule listset_ConsI)"], ["proof (state)\nthis:\n  x # qs \\<in> listset (s # ss)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {x + y |x y.\n                x \\<in> s \\<and>\n                y \\<in> sum_list ` listset ss} \\<Longrightarrow>\n       x \\<in> sum_list ` listset (s # ss)", "hence \"sum_list (x # qs) \\<in> ?B\""], ["proof (prove)\nusing this:\n  x # qs \\<in> listset (s # ss)\n\ngoal (1 subgoal):\n 1. sum_list (x # qs) \\<in> sum_list ` listset (s # ss)", "by (rule imageI)"], ["proof (state)\nthis:\n  sum_list (x # qs) \\<in> sum_list ` listset (s # ss)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {x + y |x y.\n                x \\<in> s \\<and>\n                y \\<in> sum_list ` listset ss} \\<Longrightarrow>\n       x \\<in> sum_list ` listset (s # ss)", "also"], ["proof (state)\nthis:\n  sum_list (x # qs) \\<in> sum_list ` listset (s # ss)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {x + y |x y.\n                x \\<in> s \\<and>\n                y \\<in> sum_list ` listset ss} \\<Longrightarrow>\n       x \\<in> sum_list ` listset (s # ss)", "have \"sum_list (x # qs) = a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum_list (x # qs) = a", "by (simp add: a y)"], ["proof (state)\nthis:\n  sum_list (x # qs) = a\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {x + y |x y.\n                x \\<in> s \\<and>\n                y \\<in> sum_list ` listset ss} \\<Longrightarrow>\n       x \\<in> sum_list ` listset (s # ss)", "finally"], ["proof (chain)\npicking this:\n  a \\<in> sum_list ` listset (s # ss)", "show \"a \\<in> ?B\""], ["proof (prove)\nusing this:\n  a \\<in> sum_list ` listset (s # ss)\n\ngoal (1 subgoal):\n 1. a \\<in> sum_list ` listset (s # ss)", "."], ["proof (state)\nthis:\n  a \\<in> sum_list ` listset (s # ss)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  {x + y |x y. x \\<in> s \\<and> y \\<in> sum_list ` listset ss}\n  \\<subseteq> sum_list ` listset (s # ss)\n\ngoal (1 subgoal):\n 1. sum_list ` listset (s # ss)\n    \\<subseteq> {x + y |x y. x \\<in> s \\<and> y \\<in> sum_list ` listset ss}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. sum_list ` listset (s # ss)\n    \\<subseteq> {x + y |x y. x \\<in> s \\<and> y \\<in> sum_list ` listset ss}", "show \"?B \\<subseteq> ?A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum_list ` listset (s # ss)\n    \\<subseteq> {x + y |x y. x \\<in> s \\<and> y \\<in> sum_list ` listset ss}", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> sum_list ` listset (s # ss) \\<Longrightarrow>\n       x \\<in> {x + y |x y. x \\<in> s \\<and> y \\<in> sum_list ` listset ss}", "fix a"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> sum_list ` listset (s # ss) \\<Longrightarrow>\n       x \\<in> {x + y |x y. x \\<in> s \\<and> y \\<in> sum_list ` listset ss}", "assume \"a \\<in> ?B\""], ["proof (state)\nthis:\n  a \\<in> sum_list ` listset (s # ss)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> sum_list ` listset (s # ss) \\<Longrightarrow>\n       x \\<in> {x + y |x y. x \\<in> s \\<and> y \\<in> sum_list ` listset ss}", "then"], ["proof (chain)\npicking this:\n  a \\<in> sum_list ` listset (s # ss)", "obtain qs' where \"qs' \\<in> listset (s # ss)\" and a: \"a = sum_list qs'\""], ["proof (prove)\nusing this:\n  a \\<in> sum_list ` listset (s # ss)\n\ngoal (1 subgoal):\n 1. (\\<And>qs'.\n        \\<lbrakk>qs' \\<in> listset (s # ss); a = sum_list qs'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  qs' \\<in> listset (s # ss)\n  a = sum_list qs'\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> sum_list ` listset (s # ss) \\<Longrightarrow>\n       x \\<in> {x + y |x y. x \\<in> s \\<and> y \\<in> sum_list ` listset ss}", "from this(1)"], ["proof (chain)\npicking this:\n  qs' \\<in> listset (s # ss)", "obtain x qs where \"x \\<in> s\" and \"qs \\<in> listset ss\" and qs': \"qs' = x # qs\""], ["proof (prove)\nusing this:\n  qs' \\<in> listset (s # ss)\n\ngoal (1 subgoal):\n 1. (\\<And>x qs.\n        \\<lbrakk>x \\<in> s; qs \\<in> listset ss; qs' = x # qs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule listset_ConsE)"], ["proof (state)\nthis:\n  x \\<in> s\n  qs \\<in> listset ss\n  qs' = x # qs\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> sum_list ` listset (s # ss) \\<Longrightarrow>\n       x \\<in> {x + y |x y. x \\<in> s \\<and> y \\<in> sum_list ` listset ss}", "from this(2)"], ["proof (chain)\npicking this:\n  qs \\<in> listset ss", "have \"sum_list qs \\<in> sum_list ` listset ss\""], ["proof (prove)\nusing this:\n  qs \\<in> listset ss\n\ngoal (1 subgoal):\n 1. sum_list qs \\<in> sum_list ` listset ss", "by (rule imageI)"], ["proof (state)\nthis:\n  sum_list qs \\<in> sum_list ` listset ss\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> sum_list ` listset (s # ss) \\<Longrightarrow>\n       x \\<in> {x + y |x y. x \\<in> s \\<and> y \\<in> sum_list ` listset ss}", "moreover"], ["proof (state)\nthis:\n  sum_list qs \\<in> sum_list ` listset ss\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> sum_list ` listset (s # ss) \\<Longrightarrow>\n       x \\<in> {x + y |x y. x \\<in> s \\<and> y \\<in> sum_list ` listset ss}", "have \"a = x + sum_list qs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a = x + sum_list qs", "by (simp add: a qs')"], ["proof (state)\nthis:\n  a = x + sum_list qs\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> sum_list ` listset (s # ss) \\<Longrightarrow>\n       x \\<in> {x + y |x y. x \\<in> s \\<and> y \\<in> sum_list ` listset ss}", "ultimately"], ["proof (chain)\npicking this:\n  sum_list qs \\<in> sum_list ` listset ss\n  a = x + sum_list qs", "show \"a \\<in> ?A\""], ["proof (prove)\nusing this:\n  sum_list qs \\<in> sum_list ` listset ss\n  a = x + sum_list qs\n\ngoal (1 subgoal):\n 1. a \\<in> {x + y |x y. x \\<in> s \\<and> y \\<in> sum_list ` listset ss}", "using \\<open>x \\<in> s\\<close>"], ["proof (prove)\nusing this:\n  sum_list qs \\<in> sum_list ` listset ss\n  a = x + sum_list qs\n  x \\<in> s\n\ngoal (1 subgoal):\n 1. a \\<in> {x + y |x y. x \\<in> s \\<and> y \\<in> sum_list ` listset ss}", "by blast"], ["proof (state)\nthis:\n  a \\<in> {x + y |x y. x \\<in> s \\<and> y \\<in> sum_list ` listset ss}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  sum_list ` listset (s # ss)\n  \\<subseteq> {x + y |x y. x \\<in> s \\<and> y \\<in> sum_list ` listset ss}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  {x + y |x y. x \\<in> s \\<and> y \\<in> sum_list ` listset ss} =\n  sum_list ` listset (s # ss)\n\ngoal (1 subgoal):\n 1. \\<And>a ss.\n       \\<lbrakk>(\\<And>s.\n                    s \\<in> set ss \\<Longrightarrow>\n                    local.subspace s) \\<Longrightarrow>\n                local.span (\\<Union> (some_basis ` set ss)) =\n                sum_list ` listset ss;\n        \\<And>s.\n           s \\<in> set (a # ss) \\<Longrightarrow> local.subspace s\\<rbrakk>\n       \\<Longrightarrow> local.span (\\<Union> (some_basis ` set (a # ss))) =\n                         sum_list ` listset (a # ss)", "finally"], ["proof (chain)\npicking this:\n  local.span (\\<Union> (some_basis ` set (s # ss))) =\n  sum_list ` listset (s # ss)", "show ?case"], ["proof (prove)\nusing this:\n  local.span (\\<Union> (some_basis ` set (s # ss))) =\n  sum_list ` listset (s # ss)\n\ngoal (1 subgoal):\n 1. local.span (\\<Union> (some_basis ` set (s # ss))) =\n    sum_list ` listset (s # ss)", "."], ["proof (state)\nthis:\n  local.span (\\<Union> (some_basis ` set (s # ss))) =\n  sum_list ` listset (s # ss)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  local.span (\\<Union> (some_basis ` set ss)) = A\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma direct_decomp_independent_some_basis:\n  assumes \"direct_decomp A ss\" and \"\\<And>s. s \\<in> set ss \\<Longrightarrow> subspace s\"\n  shows \"independent (\\<Union>(some_basis ` set ss))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.independent (\\<Union> (some_basis ` set ss))", "using assms"], ["proof (prove)\nusing this:\n  direct_decomp A ss\n  ?s \\<in> set ss \\<Longrightarrow> local.subspace ?s\n\ngoal (1 subgoal):\n 1. local.independent (\\<Union> (some_basis ` set ss))", "proof (induct ss arbitrary: A)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>A.\n       \\<lbrakk>direct_decomp A [];\n        \\<And>s. s \\<in> set [] \\<Longrightarrow> local.subspace s\\<rbrakk>\n       \\<Longrightarrow> local.independent (\\<Union> (some_basis ` set []))\n 2. \\<And>a ss A.\n       \\<lbrakk>\\<And>A.\n                   \\<lbrakk>direct_decomp A ss;\n                    \\<And>s.\n                       s \\<in> set ss \\<Longrightarrow>\n                       local.subspace s\\<rbrakk>\n                   \\<Longrightarrow> local.independent\n(\\<Union> (some_basis ` set ss));\n        direct_decomp A (a # ss);\n        \\<And>s.\n           s \\<in> set (a # ss) \\<Longrightarrow> local.subspace s\\<rbrakk>\n       \\<Longrightarrow> local.independent\n                          (\\<Union> (some_basis ` set (a # ss)))", "case Nil"], ["proof (state)\nthis:\n  direct_decomp A []\n  ?s \\<in> set [] \\<Longrightarrow> local.subspace ?s\n\ngoal (2 subgoals):\n 1. \\<And>A.\n       \\<lbrakk>direct_decomp A [];\n        \\<And>s. s \\<in> set [] \\<Longrightarrow> local.subspace s\\<rbrakk>\n       \\<Longrightarrow> local.independent (\\<Union> (some_basis ` set []))\n 2. \\<And>a ss A.\n       \\<lbrakk>\\<And>A.\n                   \\<lbrakk>direct_decomp A ss;\n                    \\<And>s.\n                       s \\<in> set ss \\<Longrightarrow>\n                       local.subspace s\\<rbrakk>\n                   \\<Longrightarrow> local.independent\n(\\<Union> (some_basis ` set ss));\n        direct_decomp A (a # ss);\n        \\<And>s.\n           s \\<in> set (a # ss) \\<Longrightarrow> local.subspace s\\<rbrakk>\n       \\<Longrightarrow> local.independent\n                          (\\<Union> (some_basis ` set (a # ss)))", "from independent_empty"], ["proof (chain)\npicking this:\n  local.independent {}", "show ?case"], ["proof (prove)\nusing this:\n  local.independent {}\n\ngoal (1 subgoal):\n 1. local.independent (\\<Union> (some_basis ` set []))", "by simp"], ["proof (state)\nthis:\n  local.independent (\\<Union> (some_basis ` set []))\n\ngoal (1 subgoal):\n 1. \\<And>a ss A.\n       \\<lbrakk>\\<And>A.\n                   \\<lbrakk>direct_decomp A ss;\n                    \\<And>s.\n                       s \\<in> set ss \\<Longrightarrow>\n                       local.subspace s\\<rbrakk>\n                   \\<Longrightarrow> local.independent\n(\\<Union> (some_basis ` set ss));\n        direct_decomp A (a # ss);\n        \\<And>s.\n           s \\<in> set (a # ss) \\<Longrightarrow> local.subspace s\\<rbrakk>\n       \\<Longrightarrow> local.independent\n                          (\\<Union> (some_basis ` set (a # ss)))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a ss A.\n       \\<lbrakk>\\<And>A.\n                   \\<lbrakk>direct_decomp A ss;\n                    \\<And>s.\n                       s \\<in> set ss \\<Longrightarrow>\n                       local.subspace s\\<rbrakk>\n                   \\<Longrightarrow> local.independent\n(\\<Union> (some_basis ` set ss));\n        direct_decomp A (a # ss);\n        \\<And>s.\n           s \\<in> set (a # ss) \\<Longrightarrow> local.subspace s\\<rbrakk>\n       \\<Longrightarrow> local.independent\n                          (\\<Union> (some_basis ` set (a # ss)))", "case (Cons s ss)"], ["proof (state)\nthis:\n  \\<lbrakk>direct_decomp ?A ss;\n   \\<And>s. s \\<in> set ss \\<Longrightarrow> local.subspace s\\<rbrakk>\n  \\<Longrightarrow> local.independent (\\<Union> (some_basis ` set ss))\n  direct_decomp A (s # ss)\n  ?s \\<in> set (s # ss) \\<Longrightarrow> local.subspace ?s\n\ngoal (1 subgoal):\n 1. \\<And>a ss A.\n       \\<lbrakk>\\<And>A.\n                   \\<lbrakk>direct_decomp A ss;\n                    \\<And>s.\n                       s \\<in> set ss \\<Longrightarrow>\n                       local.subspace s\\<rbrakk>\n                   \\<Longrightarrow> local.independent\n(\\<Union> (some_basis ` set ss));\n        direct_decomp A (a # ss);\n        \\<And>s.\n           s \\<in> set (a # ss) \\<Longrightarrow> local.subspace s\\<rbrakk>\n       \\<Longrightarrow> local.independent\n                          (\\<Union> (some_basis ` set (a # ss)))", "have 1: \"\\<And>s'. s' \\<in> set ss \\<Longrightarrow> subspace s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s'. s' \\<in> set ss \\<Longrightarrow> local.subspace s'", "by (rule Cons.prems) simp"], ["proof (state)\nthis:\n  ?s' \\<in> set ss \\<Longrightarrow> local.subspace ?s'\n\ngoal (1 subgoal):\n 1. \\<And>a ss A.\n       \\<lbrakk>\\<And>A.\n                   \\<lbrakk>direct_decomp A ss;\n                    \\<And>s.\n                       s \\<in> set ss \\<Longrightarrow>\n                       local.subspace s\\<rbrakk>\n                   \\<Longrightarrow> local.independent\n(\\<Union> (some_basis ` set ss));\n        direct_decomp A (a # ss);\n        \\<And>s.\n           s \\<in> set (a # ss) \\<Longrightarrow> local.subspace s\\<rbrakk>\n       \\<Longrightarrow> local.independent\n                          (\\<Union> (some_basis ` set (a # ss)))", "have \"subspace s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.subspace s", "by (rule Cons.prems) simp"], ["proof (state)\nthis:\n  local.subspace s\n\ngoal (1 subgoal):\n 1. \\<And>a ss A.\n       \\<lbrakk>\\<And>A.\n                   \\<lbrakk>direct_decomp A ss;\n                    \\<And>s.\n                       s \\<in> set ss \\<Longrightarrow>\n                       local.subspace s\\<rbrakk>\n                   \\<Longrightarrow> local.independent\n(\\<Union> (some_basis ` set ss));\n        direct_decomp A (a # ss);\n        \\<And>s.\n           s \\<in> set (a # ss) \\<Longrightarrow> local.subspace s\\<rbrakk>\n       \\<Longrightarrow> local.independent\n                          (\\<Union> (some_basis ` set (a # ss)))", "hence \"0 \\<in> s\" and eq1: \"span (some_basis s) = s\""], ["proof (prove)\nusing this:\n  local.subspace s\n\ngoal (1 subgoal):\n 1. (0::'b) \\<in> s &&& local.span (some_basis s) = s", "by (rule subspace_0, rule span_some_basis)"], ["proof (state)\nthis:\n  (0::'b) \\<in> s\n  local.span (some_basis s) = s\n\ngoal (1 subgoal):\n 1. \\<And>a ss A.\n       \\<lbrakk>\\<And>A.\n                   \\<lbrakk>direct_decomp A ss;\n                    \\<And>s.\n                       s \\<in> set ss \\<Longrightarrow>\n                       local.subspace s\\<rbrakk>\n                   \\<Longrightarrow> local.independent\n(\\<Union> (some_basis ` set ss));\n        direct_decomp A (a # ss);\n        \\<And>s.\n           s \\<in> set (a # ss) \\<Longrightarrow> local.subspace s\\<rbrakk>\n       \\<Longrightarrow> local.independent\n                          (\\<Union> (some_basis ` set (a # ss)))", "from Cons.prems(1)"], ["proof (chain)\npicking this:\n  direct_decomp A (s # ss)", "have *: \"direct_decomp A ([s] @ ss)\""], ["proof (prove)\nusing this:\n  direct_decomp A (s # ss)\n\ngoal (1 subgoal):\n 1. direct_decomp A ([s] @ ss)", "by simp"], ["proof (state)\nthis:\n  direct_decomp A ([s] @ ss)\n\ngoal (1 subgoal):\n 1. \\<And>a ss A.\n       \\<lbrakk>\\<And>A.\n                   \\<lbrakk>direct_decomp A ss;\n                    \\<And>s.\n                       s \\<in> set ss \\<Longrightarrow>\n                       local.subspace s\\<rbrakk>\n                   \\<Longrightarrow> local.independent\n(\\<Union> (some_basis ` set ss));\n        direct_decomp A (a # ss);\n        \\<And>s.\n           s \\<in> set (a # ss) \\<Longrightarrow> local.subspace s\\<rbrakk>\n       \\<Longrightarrow> local.independent\n                          (\\<Union> (some_basis ` set (a # ss)))", "moreover"], ["proof (state)\nthis:\n  direct_decomp A ([s] @ ss)\n\ngoal (1 subgoal):\n 1. \\<And>a ss A.\n       \\<lbrakk>\\<And>A.\n                   \\<lbrakk>direct_decomp A ss;\n                    \\<And>s.\n                       s \\<in> set ss \\<Longrightarrow>\n                       local.subspace s\\<rbrakk>\n                   \\<Longrightarrow> local.independent\n(\\<Union> (some_basis ` set ss));\n        direct_decomp A (a # ss);\n        \\<And>s.\n           s \\<in> set (a # ss) \\<Longrightarrow> local.subspace s\\<rbrakk>\n       \\<Longrightarrow> local.independent\n                          (\\<Union> (some_basis ` set (a # ss)))", "from \\<open>0 \\<in> s\\<close>"], ["proof (chain)\npicking this:\n  (0::'b) \\<in> s", "have \"{} \\<notin> set [s]\""], ["proof (prove)\nusing this:\n  (0::'b) \\<in> s\n\ngoal (1 subgoal):\n 1. {} \\<notin> set [s]", "by auto"], ["proof (state)\nthis:\n  {} \\<notin> set [s]\n\ngoal (1 subgoal):\n 1. \\<And>a ss A.\n       \\<lbrakk>\\<And>A.\n                   \\<lbrakk>direct_decomp A ss;\n                    \\<And>s.\n                       s \\<in> set ss \\<Longrightarrow>\n                       local.subspace s\\<rbrakk>\n                   \\<Longrightarrow> local.independent\n(\\<Union> (some_basis ` set ss));\n        direct_decomp A (a # ss);\n        \\<And>s.\n           s \\<in> set (a # ss) \\<Longrightarrow> local.subspace s\\<rbrakk>\n       \\<Longrightarrow> local.independent\n                          (\\<Union> (some_basis ` set (a # ss)))", "ultimately"], ["proof (chain)\npicking this:\n  direct_decomp A ([s] @ ss)\n  {} \\<notin> set [s]", "have 2: \"direct_decomp (sum_list ` listset ss) ss\""], ["proof (prove)\nusing this:\n  direct_decomp A ([s] @ ss)\n  {} \\<notin> set [s]\n\ngoal (1 subgoal):\n 1. direct_decomp (sum_list ` listset ss) ss", "by (rule direct_decomp_appendD)"], ["proof (state)\nthis:\n  direct_decomp (sum_list ` listset ss) ss\n\ngoal (1 subgoal):\n 1. \\<And>a ss A.\n       \\<lbrakk>\\<And>A.\n                   \\<lbrakk>direct_decomp A ss;\n                    \\<And>s.\n                       s \\<in> set ss \\<Longrightarrow>\n                       local.subspace s\\<rbrakk>\n                   \\<Longrightarrow> local.independent\n(\\<Union> (some_basis ` set ss));\n        direct_decomp A (a # ss);\n        \\<And>s.\n           s \\<in> set (a # ss) \\<Longrightarrow> local.subspace s\\<rbrakk>\n       \\<Longrightarrow> local.independent\n                          (\\<Union> (some_basis ` set (a # ss)))", "hence eq2: \"span (\\<Union> (some_basis ` set ss)) = sum_list ` listset ss\""], ["proof (prove)\nusing this:\n  direct_decomp (sum_list ` listset ss) ss\n\ngoal (1 subgoal):\n 1. local.span (\\<Union> (some_basis ` set ss)) = sum_list ` listset ss", "using 1"], ["proof (prove)\nusing this:\n  direct_decomp (sum_list ` listset ss) ss\n  ?s' \\<in> set ss \\<Longrightarrow> local.subspace ?s'\n\ngoal (1 subgoal):\n 1. local.span (\\<Union> (some_basis ` set ss)) = sum_list ` listset ss", "by (rule direct_decomp_span_some_basis)"], ["proof (state)\nthis:\n  local.span (\\<Union> (some_basis ` set ss)) = sum_list ` listset ss\n\ngoal (1 subgoal):\n 1. \\<And>a ss A.\n       \\<lbrakk>\\<And>A.\n                   \\<lbrakk>direct_decomp A ss;\n                    \\<And>s.\n                       s \\<in> set ss \\<Longrightarrow>\n                       local.subspace s\\<rbrakk>\n                   \\<Longrightarrow> local.independent\n(\\<Union> (some_basis ` set ss));\n        direct_decomp A (a # ss);\n        \\<And>s.\n           s \\<in> set (a # ss) \\<Longrightarrow> local.subspace s\\<rbrakk>\n       \\<Longrightarrow> local.independent\n                          (\\<Union> (some_basis ` set (a # ss)))", "note independent_some_basis[of s]"], ["proof (state)\nthis:\n  local.independent (some_basis s)\n\ngoal (1 subgoal):\n 1. \\<And>a ss A.\n       \\<lbrakk>\\<And>A.\n                   \\<lbrakk>direct_decomp A ss;\n                    \\<And>s.\n                       s \\<in> set ss \\<Longrightarrow>\n                       local.subspace s\\<rbrakk>\n                   \\<Longrightarrow> local.independent\n(\\<Union> (some_basis ` set ss));\n        direct_decomp A (a # ss);\n        \\<And>s.\n           s \\<in> set (a # ss) \\<Longrightarrow> local.subspace s\\<rbrakk>\n       \\<Longrightarrow> local.independent\n                          (\\<Union> (some_basis ` set (a # ss)))", "moreover"], ["proof (state)\nthis:\n  local.independent (some_basis s)\n\ngoal (1 subgoal):\n 1. \\<And>a ss A.\n       \\<lbrakk>\\<And>A.\n                   \\<lbrakk>direct_decomp A ss;\n                    \\<And>s.\n                       s \\<in> set ss \\<Longrightarrow>\n                       local.subspace s\\<rbrakk>\n                   \\<Longrightarrow> local.independent\n(\\<Union> (some_basis ` set ss));\n        direct_decomp A (a # ss);\n        \\<And>s.\n           s \\<in> set (a # ss) \\<Longrightarrow> local.subspace s\\<rbrakk>\n       \\<Longrightarrow> local.independent\n                          (\\<Union> (some_basis ` set (a # ss)))", "from 2 1"], ["proof (chain)\npicking this:\n  direct_decomp (sum_list ` listset ss) ss\n  ?s' \\<in> set ss \\<Longrightarrow> local.subspace ?s'", "have \"independent (\\<Union> (some_basis ` set ss))\""], ["proof (prove)\nusing this:\n  direct_decomp (sum_list ` listset ss) ss\n  ?s' \\<in> set ss \\<Longrightarrow> local.subspace ?s'\n\ngoal (1 subgoal):\n 1. local.independent (\\<Union> (some_basis ` set ss))", "by (rule Cons.hyps)"], ["proof (state)\nthis:\n  local.independent (\\<Union> (some_basis ` set ss))\n\ngoal (1 subgoal):\n 1. \\<And>a ss A.\n       \\<lbrakk>\\<And>A.\n                   \\<lbrakk>direct_decomp A ss;\n                    \\<And>s.\n                       s \\<in> set ss \\<Longrightarrow>\n                       local.subspace s\\<rbrakk>\n                   \\<Longrightarrow> local.independent\n(\\<Union> (some_basis ` set ss));\n        direct_decomp A (a # ss);\n        \\<And>s.\n           s \\<in> set (a # ss) \\<Longrightarrow> local.subspace s\\<rbrakk>\n       \\<Longrightarrow> local.independent\n                          (\\<Union> (some_basis ` set (a # ss)))", "moreover"], ["proof (state)\nthis:\n  local.independent (\\<Union> (some_basis ` set ss))\n\ngoal (1 subgoal):\n 1. \\<And>a ss A.\n       \\<lbrakk>\\<And>A.\n                   \\<lbrakk>direct_decomp A ss;\n                    \\<And>s.\n                       s \\<in> set ss \\<Longrightarrow>\n                       local.subspace s\\<rbrakk>\n                   \\<Longrightarrow> local.independent\n(\\<Union> (some_basis ` set ss));\n        direct_decomp A (a # ss);\n        \\<And>s.\n           s \\<in> set (a # ss) \\<Longrightarrow> local.subspace s\\<rbrakk>\n       \\<Longrightarrow> local.independent\n                          (\\<Union> (some_basis ` set (a # ss)))", "have \"span (some_basis s) \\<inter> span (\\<Union> (some_basis ` set ss)) = {0}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.span (some_basis s) \\<inter>\n    local.span (\\<Union> (some_basis ` set ss)) =\n    {0::'b}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. local.span (some_basis s) \\<inter>\n    local.span (\\<Union> (some_basis ` set ss)) =\n    {0::'b}", "from *"], ["proof (chain)\npicking this:\n  direct_decomp A ([s] @ ss)", "have \"direct_decomp A [sum_list ` listset [s], sum_list ` listset ss]\""], ["proof (prove)\nusing this:\n  direct_decomp A ([s] @ ss)\n\ngoal (1 subgoal):\n 1. direct_decomp A [sum_list ` listset [s], sum_list ` listset ss]", "by (rule direct_decomp_appendD)"], ["proof (state)\nthis:\n  direct_decomp A [sum_list ` listset [s], sum_list ` listset ss]\n\ngoal (1 subgoal):\n 1. local.span (some_basis s) \\<inter>\n    local.span (\\<Union> (some_basis ` set ss)) =\n    {0::'b}", "hence \"direct_decomp A [s, sum_list ` listset ss]\""], ["proof (prove)\nusing this:\n  direct_decomp A [sum_list ` listset [s], sum_list ` listset ss]\n\ngoal (1 subgoal):\n 1. direct_decomp A [s, sum_list ` listset ss]", "by (simp add: image_image)"], ["proof (state)\nthis:\n  direct_decomp A [s, sum_list ` listset ss]\n\ngoal (1 subgoal):\n 1. local.span (some_basis s) \\<inter>\n    local.span (\\<Union> (some_basis ` set ss)) =\n    {0::'b}", "moreover"], ["proof (state)\nthis:\n  direct_decomp A [s, sum_list ` listset ss]\n\ngoal (1 subgoal):\n 1. local.span (some_basis s) \\<inter>\n    local.span (\\<Union> (some_basis ` set ss)) =\n    {0::'b}", "have \"0 < (1::nat)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < 1", "by simp"], ["proof (state)\nthis:\n  0 < 1\n\ngoal (1 subgoal):\n 1. local.span (some_basis s) \\<inter>\n    local.span (\\<Union> (some_basis ` set ss)) =\n    {0::'b}", "moreover"], ["proof (state)\nthis:\n  0 < 1\n\ngoal (1 subgoal):\n 1. local.span (some_basis s) \\<inter>\n    local.span (\\<Union> (some_basis ` set ss)) =\n    {0::'b}", "have \"1 < length [s, sum_list ` listset ss]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 < length [s, sum_list ` listset ss]", "by simp"], ["proof (state)\nthis:\n  1 < length [s, sum_list ` listset ss]\n\ngoal (1 subgoal):\n 1. local.span (some_basis s) \\<inter>\n    local.span (\\<Union> (some_basis ` set ss)) =\n    {0::'b}", "ultimately"], ["proof (chain)\npicking this:\n  direct_decomp A [s, sum_list ` listset ss]\n  0 < 1\n  1 < length [s, sum_list ` listset ss]", "have \"[s, sum_list ` listset ss] ! 0 \\<inter> [s, sum_list ` listset ss] ! 1 = {0}\""], ["proof (prove)\nusing this:\n  direct_decomp A [s, sum_list ` listset ss]\n  0 < 1\n  1 < length [s, sum_list ` listset ss]\n\ngoal (1 subgoal):\n 1. [s, sum_list ` listset ss] ! 0 \\<inter> [s, sum_list ` listset ss] ! 1 =\n    {0::'b}", "by (rule direct_decomp_Int_zero) (auto simp: \\<open>0 \\<in> s\\<close> eq2[symmetric] span_zero)"], ["proof (state)\nthis:\n  [s, sum_list ` listset ss] ! 0 \\<inter> [s, sum_list ` listset ss] ! 1 =\n  {0::'b}\n\ngoal (1 subgoal):\n 1. local.span (some_basis s) \\<inter>\n    local.span (\\<Union> (some_basis ` set ss)) =\n    {0::'b}", "thus ?thesis"], ["proof (prove)\nusing this:\n  [s, sum_list ` listset ss] ! 0 \\<inter> [s, sum_list ` listset ss] ! 1 =\n  {0::'b}\n\ngoal (1 subgoal):\n 1. local.span (some_basis s) \\<inter>\n    local.span (\\<Union> (some_basis ` set ss)) =\n    {0::'b}", "by (simp add: eq1 eq2)"], ["proof (state)\nthis:\n  local.span (some_basis s) \\<inter>\n  local.span (\\<Union> (some_basis ` set ss)) =\n  {0::'b}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  local.span (some_basis s) \\<inter>\n  local.span (\\<Union> (some_basis ` set ss)) =\n  {0::'b}\n\ngoal (1 subgoal):\n 1. \\<And>a ss A.\n       \\<lbrakk>\\<And>A.\n                   \\<lbrakk>direct_decomp A ss;\n                    \\<And>s.\n                       s \\<in> set ss \\<Longrightarrow>\n                       local.subspace s\\<rbrakk>\n                   \\<Longrightarrow> local.independent\n(\\<Union> (some_basis ` set ss));\n        direct_decomp A (a # ss);\n        \\<And>s.\n           s \\<in> set (a # ss) \\<Longrightarrow> local.subspace s\\<rbrakk>\n       \\<Longrightarrow> local.independent\n                          (\\<Union> (some_basis ` set (a # ss)))", "ultimately"], ["proof (chain)\npicking this:\n  local.independent (some_basis s)\n  local.independent (\\<Union> (some_basis ` set ss))\n  local.span (some_basis s) \\<inter>\n  local.span (\\<Union> (some_basis ` set ss)) =\n  {0::'b}", "have \"independent (some_basis s \\<union> (\\<Union> (some_basis ` set ss)))\""], ["proof (prove)\nusing this:\n  local.independent (some_basis s)\n  local.independent (\\<Union> (some_basis ` set ss))\n  local.span (some_basis s) \\<inter>\n  local.span (\\<Union> (some_basis ` set ss)) =\n  {0::'b}\n\ngoal (1 subgoal):\n 1. local.independent (some_basis s \\<union> \\<Union> (some_basis ` set ss))", "by (rule independent_UnI)"], ["proof (state)\nthis:\n  local.independent (some_basis s \\<union> \\<Union> (some_basis ` set ss))\n\ngoal (1 subgoal):\n 1. \\<And>a ss A.\n       \\<lbrakk>\\<And>A.\n                   \\<lbrakk>direct_decomp A ss;\n                    \\<And>s.\n                       s \\<in> set ss \\<Longrightarrow>\n                       local.subspace s\\<rbrakk>\n                   \\<Longrightarrow> local.independent\n(\\<Union> (some_basis ` set ss));\n        direct_decomp A (a # ss);\n        \\<And>s.\n           s \\<in> set (a # ss) \\<Longrightarrow> local.subspace s\\<rbrakk>\n       \\<Longrightarrow> local.independent\n                          (\\<Union> (some_basis ` set (a # ss)))", "thus ?case"], ["proof (prove)\nusing this:\n  local.independent (some_basis s \\<union> \\<Union> (some_basis ` set ss))\n\ngoal (1 subgoal):\n 1. local.independent (\\<Union> (some_basis ` set (s # ss)))", "by simp"], ["proof (state)\nthis:\n  local.independent (\\<Union> (some_basis ` set (s # ss)))\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary direct_decomp_is_basis:\n  assumes \"direct_decomp A ss\" and \"\\<And>s. s \\<in> set ss \\<Longrightarrow> subspace s\"\n  shows \"is_basis A (\\<Union>(some_basis ` set ss))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_basis A (\\<Union> (some_basis ` set ss))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. is_basis A (\\<Union> (some_basis ` set ss))", "from assms"], ["proof (chain)\npicking this:\n  direct_decomp A ss\n  ?s \\<in> set ss \\<Longrightarrow> local.subspace ?s", "have \"subspace A\""], ["proof (prove)\nusing this:\n  direct_decomp A ss\n  ?s \\<in> set ss \\<Longrightarrow> local.subspace ?s\n\ngoal (1 subgoal):\n 1. local.subspace A", "by (rule subspace_direct_decomp)"], ["proof (state)\nthis:\n  local.subspace A\n\ngoal (1 subgoal):\n 1. is_basis A (\\<Union> (some_basis ` set ss))", "moreover"], ["proof (state)\nthis:\n  local.subspace A\n\ngoal (1 subgoal):\n 1. is_basis A (\\<Union> (some_basis ` set ss))", "from assms"], ["proof (chain)\npicking this:\n  direct_decomp A ss\n  ?s \\<in> set ss \\<Longrightarrow> local.subspace ?s", "have \"span (\\<Union>(some_basis ` set ss)) = A\""], ["proof (prove)\nusing this:\n  direct_decomp A ss\n  ?s \\<in> set ss \\<Longrightarrow> local.subspace ?s\n\ngoal (1 subgoal):\n 1. local.span (\\<Union> (some_basis ` set ss)) = A", "by (rule direct_decomp_span_some_basis)"], ["proof (state)\nthis:\n  local.span (\\<Union> (some_basis ` set ss)) = A\n\ngoal (1 subgoal):\n 1. is_basis A (\\<Union> (some_basis ` set ss))", "moreover"], ["proof (state)\nthis:\n  local.span (\\<Union> (some_basis ` set ss)) = A\n\ngoal (1 subgoal):\n 1. is_basis A (\\<Union> (some_basis ` set ss))", "from assms"], ["proof (chain)\npicking this:\n  direct_decomp A ss\n  ?s \\<in> set ss \\<Longrightarrow> local.subspace ?s", "have \"independent (\\<Union>(some_basis ` set ss))\""], ["proof (prove)\nusing this:\n  direct_decomp A ss\n  ?s \\<in> set ss \\<Longrightarrow> local.subspace ?s\n\ngoal (1 subgoal):\n 1. local.independent (\\<Union> (some_basis ` set ss))", "by (rule direct_decomp_independent_some_basis)"], ["proof (state)\nthis:\n  local.independent (\\<Union> (some_basis ` set ss))\n\ngoal (1 subgoal):\n 1. is_basis A (\\<Union> (some_basis ` set ss))", "ultimately"], ["proof (chain)\npicking this:\n  local.subspace A\n  local.span (\\<Union> (some_basis ` set ss)) = A\n  local.independent (\\<Union> (some_basis ` set ss))", "show ?thesis"], ["proof (prove)\nusing this:\n  local.subspace A\n  local.span (\\<Union> (some_basis ` set ss)) = A\n  local.independent (\\<Union> (some_basis ` set ss))\n\ngoal (1 subgoal):\n 1. is_basis A (\\<Union> (some_basis ` set ss))", "by (simp add: is_basis_alt)"], ["proof (state)\nthis:\n  is_basis A (\\<Union> (some_basis ` set ss))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma dim_direct_decomp:\n  assumes \"direct_decomp A ss\" and \"finite B\" and \"A \\<subseteq> span B\" and \"\\<And>s. s \\<in> set ss \\<Longrightarrow> subspace s\"\n  shows \"dim A = (\\<Sum>s\\<in>set ss. dim s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.dim A = sum local.dim (set ss)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. local.dim A = sum local.dim (set ss)", "from assms(1, 4)"], ["proof (chain)\npicking this:\n  direct_decomp A ss\n  ?s \\<in> set ss \\<Longrightarrow> local.subspace ?s", "have \"is_basis A (\\<Union>(some_basis ` set ss))\"\n    (is \"is_basis A ?B\")"], ["proof (prove)\nusing this:\n  direct_decomp A ss\n  ?s \\<in> set ss \\<Longrightarrow> local.subspace ?s\n\ngoal (1 subgoal):\n 1. is_basis A (\\<Union> (some_basis ` set ss))", "by (rule direct_decomp_is_basis)"], ["proof (state)\nthis:\n  is_basis A (\\<Union> (some_basis ` set ss))\n\ngoal (1 subgoal):\n 1. local.dim A = sum local.dim (set ss)", "hence \"dim A = card ?B\" and \"independent ?B\" and \"?B \\<subseteq> A\""], ["proof (prove)\nusing this:\n  is_basis A (\\<Union> (some_basis ` set ss))\n\ngoal (1 subgoal):\n 1. local.dim A = card (\\<Union> (some_basis ` set ss)) &&&\n    local.independent (\\<Union> (some_basis ` set ss)) &&&\n    \\<Union> (some_basis ` set ss) \\<subseteq> A", "by (simp_all add: is_basis_def)"], ["proof (state)\nthis:\n  local.dim A = card (\\<Union> (some_basis ` set ss))\n  local.independent (\\<Union> (some_basis ` set ss))\n  \\<Union> (some_basis ` set ss) \\<subseteq> A\n\ngoal (1 subgoal):\n 1. local.dim A = sum local.dim (set ss)", "from this(3) assms(3)"], ["proof (chain)\npicking this:\n  \\<Union> (some_basis ` set ss) \\<subseteq> A\n  A \\<subseteq> local.span B", "have \"?B \\<subseteq> span B\""], ["proof (prove)\nusing this:\n  \\<Union> (some_basis ` set ss) \\<subseteq> A\n  A \\<subseteq> local.span B\n\ngoal (1 subgoal):\n 1. \\<Union> (some_basis ` set ss) \\<subseteq> local.span B", "by (rule subset_trans)"], ["proof (state)\nthis:\n  \\<Union> (some_basis ` set ss) \\<subseteq> local.span B\n\ngoal (1 subgoal):\n 1. local.dim A = sum local.dim (set ss)", "with assms(2) \\<open>independent ?B\\<close>"], ["proof (chain)\npicking this:\n  finite B\n  local.independent (\\<Union> (some_basis ` set ss))\n  \\<Union> (some_basis ` set ss) \\<subseteq> local.span B", "have \"finite ?B\""], ["proof (prove)\nusing this:\n  finite B\n  local.independent (\\<Union> (some_basis ` set ss))\n  \\<Union> (some_basis ` set ss) \\<subseteq> local.span B\n\ngoal (1 subgoal):\n 1. finite (\\<Union> (some_basis ` set ss))", "using independent_span_bound"], ["proof (prove)\nusing this:\n  finite B\n  local.independent (\\<Union> (some_basis ` set ss))\n  \\<Union> (some_basis ` set ss) \\<subseteq> local.span B\n  \\<lbrakk>finite ?T; local.independent ?S;\n   ?S \\<subseteq> local.span ?T\\<rbrakk>\n  \\<Longrightarrow> finite ?S \\<and> card ?S \\<le> card ?T\n\ngoal (1 subgoal):\n 1. finite (\\<Union> (some_basis ` set ss))", "by blast"], ["proof (state)\nthis:\n  finite (\\<Union> (some_basis ` set ss))\n\ngoal (1 subgoal):\n 1. local.dim A = sum local.dim (set ss)", "note \\<open>dim A = card ?B\\<close>"], ["proof (state)\nthis:\n  local.dim A = card (\\<Union> (some_basis ` set ss))\n\ngoal (1 subgoal):\n 1. local.dim A = sum local.dim (set ss)", "also"], ["proof (state)\nthis:\n  local.dim A = card (\\<Union> (some_basis ` set ss))\n\ngoal (1 subgoal):\n 1. local.dim A = sum local.dim (set ss)", "from finite_set"], ["proof (chain)\npicking this:\n  finite (set ?xs)", "have \"card ?B = (\\<Sum>s\\<in>set ss. card (some_basis s))\""], ["proof (prove)\nusing this:\n  finite (set ?xs)\n\ngoal (1 subgoal):\n 1. card (\\<Union> (some_basis ` set ss)) =\n    (\\<Sum>s\\<in>set ss. card (some_basis s))", "proof (intro card_UN_disjoint ballI impI)"], ["proof (state)\ngoal (3 subgoals):\n 1. (\\<And>xs. finite (set xs)) \\<Longrightarrow> finite (set ss)\n 2. \\<And>s.\n       \\<lbrakk>\\<And>xs. finite (set xs); s \\<in> set ss\\<rbrakk>\n       \\<Longrightarrow> finite (some_basis s)\n 3. \\<And>s j.\n       \\<lbrakk>\\<And>xs. finite (set xs); s \\<in> set ss; j \\<in> set ss;\n        s \\<noteq> j\\<rbrakk>\n       \\<Longrightarrow> some_basis s \\<inter> some_basis j = {}", "fix s"], ["proof (state)\ngoal (3 subgoals):\n 1. (\\<And>xs. finite (set xs)) \\<Longrightarrow> finite (set ss)\n 2. \\<And>s.\n       \\<lbrakk>\\<And>xs. finite (set xs); s \\<in> set ss\\<rbrakk>\n       \\<Longrightarrow> finite (some_basis s)\n 3. \\<And>s j.\n       \\<lbrakk>\\<And>xs. finite (set xs); s \\<in> set ss; j \\<in> set ss;\n        s \\<noteq> j\\<rbrakk>\n       \\<Longrightarrow> some_basis s \\<inter> some_basis j = {}", "assume \"s \\<in> set ss\""], ["proof (state)\nthis:\n  s \\<in> set ss\n\ngoal (3 subgoals):\n 1. (\\<And>xs. finite (set xs)) \\<Longrightarrow> finite (set ss)\n 2. \\<And>s.\n       \\<lbrakk>\\<And>xs. finite (set xs); s \\<in> set ss\\<rbrakk>\n       \\<Longrightarrow> finite (some_basis s)\n 3. \\<And>s j.\n       \\<lbrakk>\\<And>xs. finite (set xs); s \\<in> set ss; j \\<in> set ss;\n        s \\<noteq> j\\<rbrakk>\n       \\<Longrightarrow> some_basis s \\<inter> some_basis j = {}", "with \\<open>finite ?B\\<close>"], ["proof (chain)\npicking this:\n  finite (\\<Union> (some_basis ` set ss))\n  s \\<in> set ss", "show \"finite (some_basis s)\""], ["proof (prove)\nusing this:\n  finite (\\<Union> (some_basis ` set ss))\n  s \\<in> set ss\n\ngoal (1 subgoal):\n 1. finite (some_basis s)", "by auto"], ["proof (state)\nthis:\n  finite (some_basis s)\n\ngoal (2 subgoals):\n 1. (\\<And>xs. finite (set xs)) \\<Longrightarrow> finite (set ss)\n 2. \\<And>s j.\n       \\<lbrakk>\\<And>xs. finite (set xs); s \\<in> set ss; j \\<in> set ss;\n        s \\<noteq> j\\<rbrakk>\n       \\<Longrightarrow> some_basis s \\<inter> some_basis j = {}", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. (\\<And>xs. finite (set xs)) \\<Longrightarrow> finite (set ss)\n 2. \\<And>s j.\n       \\<lbrakk>\\<And>xs. finite (set xs); s \\<in> set ss; j \\<in> set ss;\n        s \\<noteq> j\\<rbrakk>\n       \\<Longrightarrow> some_basis s \\<inter> some_basis j = {}", "fix s1 s2"], ["proof (state)\ngoal (2 subgoals):\n 1. (\\<And>xs. finite (set xs)) \\<Longrightarrow> finite (set ss)\n 2. \\<And>s j.\n       \\<lbrakk>\\<And>xs. finite (set xs); s \\<in> set ss; j \\<in> set ss;\n        s \\<noteq> j\\<rbrakk>\n       \\<Longrightarrow> some_basis s \\<inter> some_basis j = {}", "have \"pairwise (\\<lambda>s t. disjnt (some_basis s) (some_basis t)) (set ss)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pairwise (\\<lambda>s t. disjnt (some_basis s) (some_basis t)) (set ss)", "using assms(1, 4)"], ["proof (prove)\nusing this:\n  direct_decomp A ss\n  ?s \\<in> set ss \\<Longrightarrow> local.subspace ?s\n\ngoal (1 subgoal):\n 1. pairwise (\\<lambda>s t. disjnt (some_basis s) (some_basis t)) (set ss)", "by (rule direct_decomp_some_basis_pairwise_disjnt)"], ["proof (state)\nthis:\n  pairwise (\\<lambda>s t. disjnt (some_basis s) (some_basis t)) (set ss)\n\ngoal (2 subgoals):\n 1. (\\<And>xs. finite (set xs)) \\<Longrightarrow> finite (set ss)\n 2. \\<And>s j.\n       \\<lbrakk>\\<And>xs. finite (set xs); s \\<in> set ss; j \\<in> set ss;\n        s \\<noteq> j\\<rbrakk>\n       \\<Longrightarrow> some_basis s \\<inter> some_basis j = {}", "moreover"], ["proof (state)\nthis:\n  pairwise (\\<lambda>s t. disjnt (some_basis s) (some_basis t)) (set ss)\n\ngoal (2 subgoals):\n 1. (\\<And>xs. finite (set xs)) \\<Longrightarrow> finite (set ss)\n 2. \\<And>s j.\n       \\<lbrakk>\\<And>xs. finite (set xs); s \\<in> set ss; j \\<in> set ss;\n        s \\<noteq> j\\<rbrakk>\n       \\<Longrightarrow> some_basis s \\<inter> some_basis j = {}", "assume \"s1 \\<in> set ss\" and \"s2 \\<in> set ss\" and \"s1 \\<noteq> s2\""], ["proof (state)\nthis:\n  s1 \\<in> set ss\n  s2 \\<in> set ss\n  s1 \\<noteq> s2\n\ngoal (2 subgoals):\n 1. (\\<And>xs. finite (set xs)) \\<Longrightarrow> finite (set ss)\n 2. \\<And>s j.\n       \\<lbrakk>\\<And>xs. finite (set xs); s \\<in> set ss; j \\<in> set ss;\n        s \\<noteq> j\\<rbrakk>\n       \\<Longrightarrow> some_basis s \\<inter> some_basis j = {}", "thm pairwiseD"], ["proof (state)\nthis:\n  s1 \\<in> set ss\n  s2 \\<in> set ss\n  s1 \\<noteq> s2\n\ngoal (2 subgoals):\n 1. (\\<And>xs. finite (set xs)) \\<Longrightarrow> finite (set ss)\n 2. \\<And>s j.\n       \\<lbrakk>\\<And>xs. finite (set xs); s \\<in> set ss; j \\<in> set ss;\n        s \\<noteq> j\\<rbrakk>\n       \\<Longrightarrow> some_basis s \\<inter> some_basis j = {}", "ultimately"], ["proof (chain)\npicking this:\n  pairwise (\\<lambda>s t. disjnt (some_basis s) (some_basis t)) (set ss)\n  s1 \\<in> set ss\n  s2 \\<in> set ss\n  s1 \\<noteq> s2", "have \"disjnt (some_basis s1) (some_basis s2)\""], ["proof (prove)\nusing this:\n  pairwise (\\<lambda>s t. disjnt (some_basis s) (some_basis t)) (set ss)\n  s1 \\<in> set ss\n  s2 \\<in> set ss\n  s1 \\<noteq> s2\n\ngoal (1 subgoal):\n 1. disjnt (some_basis s1) (some_basis s2)", "by (rule pairwiseD)"], ["proof (state)\nthis:\n  disjnt (some_basis s1) (some_basis s2)\n\ngoal (2 subgoals):\n 1. (\\<And>xs. finite (set xs)) \\<Longrightarrow> finite (set ss)\n 2. \\<And>s j.\n       \\<lbrakk>\\<And>xs. finite (set xs); s \\<in> set ss; j \\<in> set ss;\n        s \\<noteq> j\\<rbrakk>\n       \\<Longrightarrow> some_basis s \\<inter> some_basis j = {}", "thus \"some_basis s1 \\<inter> some_basis s2 = {}\""], ["proof (prove)\nusing this:\n  disjnt (some_basis s1) (some_basis s2)\n\ngoal (1 subgoal):\n 1. some_basis s1 \\<inter> some_basis s2 = {}", "by (simp only: disjnt_def)"], ["proof (state)\nthis:\n  some_basis s1 \\<inter> some_basis s2 = {}\n\ngoal (1 subgoal):\n 1. (\\<And>xs. finite (set xs)) \\<Longrightarrow> finite (set ss)", "qed"], ["proof (state)\nthis:\n  card (\\<Union> (some_basis ` set ss)) =\n  (\\<Sum>s\\<in>set ss. card (some_basis s))\n\ngoal (1 subgoal):\n 1. local.dim A = sum local.dim (set ss)", "also"], ["proof (state)\nthis:\n  card (\\<Union> (some_basis ` set ss)) =\n  (\\<Sum>s\\<in>set ss. card (some_basis s))\n\ngoal (1 subgoal):\n 1. local.dim A = sum local.dim (set ss)", "from refl card_some_basis"], ["proof (chain)\npicking this:\n  ?t = ?t\n  card (some_basis ?V) = local.dim ?V", "have \"\\<dots> = (\\<Sum>s\\<in>set ss. dim s)\""], ["proof (prove)\nusing this:\n  ?t = ?t\n  card (some_basis ?V) = local.dim ?V\n\ngoal (1 subgoal):\n 1. (\\<Sum>s\\<in>set ss. card (some_basis s)) = sum local.dim (set ss)", "by (rule sum.cong)"], ["proof (state)\nthis:\n  (\\<Sum>s\\<in>set ss. card (some_basis s)) = sum local.dim (set ss)\n\ngoal (1 subgoal):\n 1. local.dim A = sum local.dim (set ss)", "finally"], ["proof (chain)\npicking this:\n  local.dim A = sum local.dim (set ss)", "show ?thesis"], ["proof (prove)\nusing this:\n  local.dim A = sum local.dim (set ss)\n\ngoal (1 subgoal):\n 1. local.dim A = sum local.dim (set ss)", "."], ["proof (state)\nthis:\n  local.dim A = sum local.dim (set ss)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "(* vector_space *)"], ["", "subsection \\<open>Homogeneous Sets of Polynomials with Fixed Degree\\<close>"], ["", "lemma homogeneous_set_direct_decomp:\n  assumes \"direct_decomp A ss\" and \"\\<And>s. s \\<in> set ss \\<Longrightarrow> homogeneous_set s\"\n  shows \"homogeneous_set A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. homogeneous_set A", "proof (rule homogeneous_setI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a n. a \\<in> A \\<Longrightarrow> hom_component a n \\<in> A", "fix a n"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a n. a \\<in> A \\<Longrightarrow> hom_component a n \\<in> A", "assume \"a \\<in> A\""], ["proof (state)\nthis:\n  a \\<in> A\n\ngoal (1 subgoal):\n 1. \\<And>a n. a \\<in> A \\<Longrightarrow> hom_component a n \\<in> A", "with assms(1)"], ["proof (chain)\npicking this:\n  direct_decomp A ss\n  a \\<in> A", "obtain qs where \"qs \\<in> listset ss\" and a: \"a = sum_list qs\""], ["proof (prove)\nusing this:\n  direct_decomp A ss\n  a \\<in> A\n\ngoal (1 subgoal):\n 1. (\\<And>qs.\n        \\<lbrakk>qs \\<in> listset ss; a = sum_list qs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule direct_decompE)"], ["proof (state)\nthis:\n  qs \\<in> listset ss\n  a = sum_list qs\n\ngoal (1 subgoal):\n 1. \\<And>a n. a \\<in> A \\<Longrightarrow> hom_component a n \\<in> A", "have \"hom_component a n = hom_component (sum_list qs) n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. hom_component a n = hom_component (sum_list qs) n", "by (simp only: a)"], ["proof (state)\nthis:\n  hom_component a n = hom_component (sum_list qs) n\n\ngoal (1 subgoal):\n 1. \\<And>a n. a \\<in> A \\<Longrightarrow> hom_component a n \\<in> A", "also"], ["proof (state)\nthis:\n  hom_component a n = hom_component (sum_list qs) n\n\ngoal (1 subgoal):\n 1. \\<And>a n. a \\<in> A \\<Longrightarrow> hom_component a n \\<in> A", "have \"\\<dots> = sum_list (map (\\<lambda>q. hom_component q n) qs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. hom_component (sum_list qs) n =\n    (\\<Sum>q\\<leftarrow>qs. hom_component q n)", "by (induct qs) (simp_all add: hom_component_plus)"], ["proof (state)\nthis:\n  hom_component (sum_list qs) n = (\\<Sum>q\\<leftarrow>qs. hom_component q n)\n\ngoal (1 subgoal):\n 1. \\<And>a n. a \\<in> A \\<Longrightarrow> hom_component a n \\<in> A", "also"], ["proof (state)\nthis:\n  hom_component (sum_list qs) n = (\\<Sum>q\\<leftarrow>qs. hom_component q n)\n\ngoal (1 subgoal):\n 1. \\<And>a n. a \\<in> A \\<Longrightarrow> hom_component a n \\<in> A", "from assms(1)"], ["proof (chain)\npicking this:\n  direct_decomp A ss", "have \"\\<dots> \\<in> A\""], ["proof (prove)\nusing this:\n  direct_decomp A ss\n\ngoal (1 subgoal):\n 1. (\\<Sum>q\\<leftarrow>qs. hom_component q n) \\<in> A", "proof (rule direct_decompD)"], ["proof (state)\ngoal (1 subgoal):\n 1. map (\\<lambda>q. hom_component q n) qs \\<in> listset ss", "show \"map (\\<lambda>q. hom_component q n) qs \\<in> listset ss\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map (\\<lambda>q. hom_component q n) qs \\<in> listset ss", "proof (rule listset_closed_map)"], ["proof (state)\ngoal (2 subgoals):\n 1. qs \\<in> listset ss\n 2. \\<And>x y.\n       \\<lbrakk>x \\<in> set ss; y \\<in> x\\<rbrakk>\n       \\<Longrightarrow> hom_component y n \\<in> x", "fix s q"], ["proof (state)\ngoal (2 subgoals):\n 1. qs \\<in> listset ss\n 2. \\<And>x y.\n       \\<lbrakk>x \\<in> set ss; y \\<in> x\\<rbrakk>\n       \\<Longrightarrow> hom_component y n \\<in> x", "assume \"s \\<in> set ss\""], ["proof (state)\nthis:\n  s \\<in> set ss\n\ngoal (2 subgoals):\n 1. qs \\<in> listset ss\n 2. \\<And>x y.\n       \\<lbrakk>x \\<in> set ss; y \\<in> x\\<rbrakk>\n       \\<Longrightarrow> hom_component y n \\<in> x", "hence \"homogeneous_set s\""], ["proof (prove)\nusing this:\n  s \\<in> set ss\n\ngoal (1 subgoal):\n 1. homogeneous_set s", "by (rule assms(2))"], ["proof (state)\nthis:\n  homogeneous_set s\n\ngoal (2 subgoals):\n 1. qs \\<in> listset ss\n 2. \\<And>x y.\n       \\<lbrakk>x \\<in> set ss; y \\<in> x\\<rbrakk>\n       \\<Longrightarrow> hom_component y n \\<in> x", "moreover"], ["proof (state)\nthis:\n  homogeneous_set s\n\ngoal (2 subgoals):\n 1. qs \\<in> listset ss\n 2. \\<And>x y.\n       \\<lbrakk>x \\<in> set ss; y \\<in> x\\<rbrakk>\n       \\<Longrightarrow> hom_component y n \\<in> x", "assume \"q \\<in> s\""], ["proof (state)\nthis:\n  q \\<in> s\n\ngoal (2 subgoals):\n 1. qs \\<in> listset ss\n 2. \\<And>x y.\n       \\<lbrakk>x \\<in> set ss; y \\<in> x\\<rbrakk>\n       \\<Longrightarrow> hom_component y n \\<in> x", "ultimately"], ["proof (chain)\npicking this:\n  homogeneous_set s\n  q \\<in> s", "show \"hom_component q n \\<in> s\""], ["proof (prove)\nusing this:\n  homogeneous_set s\n  q \\<in> s\n\ngoal (1 subgoal):\n 1. hom_component q n \\<in> s", "by (rule homogeneous_setD)"], ["proof (state)\nthis:\n  hom_component q n \\<in> s\n\ngoal (1 subgoal):\n 1. qs \\<in> listset ss", "qed fact"], ["proof (state)\nthis:\n  map (\\<lambda>q. hom_component q n) qs \\<in> listset ss\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<Sum>q\\<leftarrow>qs. hom_component q n) \\<in> A\n\ngoal (1 subgoal):\n 1. \\<And>a n. a \\<in> A \\<Longrightarrow> hom_component a n \\<in> A", "finally"], ["proof (chain)\npicking this:\n  hom_component a n \\<in> A", "show \"hom_component a n \\<in> A\""], ["proof (prove)\nusing this:\n  hom_component a n \\<in> A\n\ngoal (1 subgoal):\n 1. hom_component a n \\<in> A", "."], ["proof (state)\nthis:\n  hom_component a n \\<in> A\n\ngoal:\nNo subgoals!", "qed"], ["", "definition hom_deg_set :: \"nat \\<Rightarrow> (('x \\<Rightarrow>\\<^sub>0 nat) \\<Rightarrow>\\<^sub>0 'a) set \\<Rightarrow> (('x \\<Rightarrow>\\<^sub>0 nat) \\<Rightarrow>\\<^sub>0 'a::zero) set\"\n  where \"hom_deg_set z A = (\\<lambda>a. hom_component a z) ` A\""], ["", "lemma hom_deg_setD:\n  assumes \"p \\<in> hom_deg_set z A\"\n  shows \"homogeneous p\" and \"p \\<noteq> 0 \\<Longrightarrow> poly_deg p = z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. homogeneous p &&& (p \\<noteq> 0 \\<Longrightarrow> poly_deg p = z)", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. homogeneous p\n 2. p \\<noteq> 0 \\<Longrightarrow> poly_deg p = z", "from assms"], ["proof (chain)\npicking this:\n  p \\<in> hom_deg_set z A", "obtain a where \"a \\<in> A\" and p: \"p = hom_component a z\""], ["proof (prove)\nusing this:\n  p \\<in> hom_deg_set z A\n\ngoal (1 subgoal):\n 1. (\\<And>a.\n        \\<lbrakk>a \\<in> A; p = hom_component a z\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding hom_deg_set_def"], ["proof (prove)\nusing this:\n  p \\<in> (\\<lambda>a. hom_component a z) ` A\n\ngoal (1 subgoal):\n 1. (\\<And>a.\n        \\<lbrakk>a \\<in> A; p = hom_component a z\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  a \\<in> A\n  p = hom_component a z\n\ngoal (2 subgoals):\n 1. homogeneous p\n 2. p \\<noteq> 0 \\<Longrightarrow> poly_deg p = z", "show *: \"homogeneous p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. homogeneous p", "by (simp only: p homogeneous_hom_component)"], ["proof (state)\nthis:\n  homogeneous p\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow> poly_deg p = z", "assume \"p \\<noteq> 0\""], ["proof (state)\nthis:\n  p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow> poly_deg p = z", "hence \"keys p \\<noteq> {}\""], ["proof (prove)\nusing this:\n  p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. keys p \\<noteq> {}", "by simp"], ["proof (state)\nthis:\n  keys p \\<noteq> {}\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow> poly_deg p = z", "then"], ["proof (chain)\npicking this:\n  keys p \\<noteq> {}", "obtain t where \"t \\<in> keys p\""], ["proof (prove)\nusing this:\n  keys p \\<noteq> {}\n\ngoal (1 subgoal):\n 1. (\\<And>t. t \\<in> keys p \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  t \\<in> keys p\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow> poly_deg p = z", "with *"], ["proof (chain)\npicking this:\n  homogeneous p\n  t \\<in> keys p", "have \"deg_pm t = poly_deg p\""], ["proof (prove)\nusing this:\n  homogeneous p\n  t \\<in> keys p\n\ngoal (1 subgoal):\n 1. deg_pm t = poly_deg p", "by (rule homogeneousD_poly_deg)"], ["proof (state)\nthis:\n  deg_pm t = poly_deg p\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow> poly_deg p = z", "moreover"], ["proof (state)\nthis:\n  deg_pm t = poly_deg p\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow> poly_deg p = z", "from \\<open>t \\<in> keys p\\<close>"], ["proof (chain)\npicking this:\n  t \\<in> keys p", "have \"deg_pm t = z\""], ["proof (prove)\nusing this:\n  t \\<in> keys p\n\ngoal (1 subgoal):\n 1. deg_pm t = z", "unfolding p"], ["proof (prove)\nusing this:\n  t \\<in> keys (hom_component a z)\n\ngoal (1 subgoal):\n 1. deg_pm t = z", "by (rule keys_hom_componentD)"], ["proof (state)\nthis:\n  deg_pm t = z\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow> poly_deg p = z", "ultimately"], ["proof (chain)\npicking this:\n  deg_pm t = poly_deg p\n  deg_pm t = z", "show \"poly_deg p = z\""], ["proof (prove)\nusing this:\n  deg_pm t = poly_deg p\n  deg_pm t = z\n\ngoal (1 subgoal):\n 1. poly_deg p = z", "by simp"], ["proof (state)\nthis:\n  poly_deg p = z\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma zero_in_hom_deg_set:\n  assumes \"0 \\<in> A\"\n  shows \"0 \\<in> hom_deg_set z A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<in> hom_deg_set z A", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. 0 \\<in> hom_deg_set z A", "have \"0 = hom_component 0 z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 = hom_component 0 z", "by simp"], ["proof (state)\nthis:\n  0 = hom_component 0 z\n\ngoal (1 subgoal):\n 1. 0 \\<in> hom_deg_set z A", "also"], ["proof (state)\nthis:\n  0 = hom_component 0 z\n\ngoal (1 subgoal):\n 1. 0 \\<in> hom_deg_set z A", "from assms"], ["proof (chain)\npicking this:\n  0 \\<in> A", "have \"\\<dots> \\<in> hom_deg_set z A\""], ["proof (prove)\nusing this:\n  0 \\<in> A\n\ngoal (1 subgoal):\n 1. hom_component 0 z \\<in> hom_deg_set z A", "unfolding hom_deg_set_def"], ["proof (prove)\nusing this:\n  0 \\<in> A\n\ngoal (1 subgoal):\n 1. hom_component 0 z \\<in> (\\<lambda>a. hom_component a z) ` A", "by (rule imageI)"], ["proof (state)\nthis:\n  hom_component 0 z \\<in> hom_deg_set z A\n\ngoal (1 subgoal):\n 1. 0 \\<in> hom_deg_set z A", "finally"], ["proof (chain)\npicking this:\n  0 \\<in> hom_deg_set z A", "show ?thesis"], ["proof (prove)\nusing this:\n  0 \\<in> hom_deg_set z A\n\ngoal (1 subgoal):\n 1. 0 \\<in> hom_deg_set z A", "."], ["proof (state)\nthis:\n  0 \\<in> hom_deg_set z A\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma hom_deg_set_closed_uminus:\n  assumes \"\\<And>a. a \\<in> A \\<Longrightarrow> - a \\<in> A\" and \"p \\<in> hom_deg_set z A\"\n  shows \"- p \\<in> hom_deg_set z A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - p \\<in> hom_deg_set z A", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. - p \\<in> hom_deg_set z A", "from assms(2)"], ["proof (chain)\npicking this:\n  p \\<in> hom_deg_set z A", "obtain a where \"a \\<in> A\" and p: \"p = hom_component a z\""], ["proof (prove)\nusing this:\n  p \\<in> hom_deg_set z A\n\ngoal (1 subgoal):\n 1. (\\<And>a.\n        \\<lbrakk>a \\<in> A; p = hom_component a z\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding hom_deg_set_def"], ["proof (prove)\nusing this:\n  p \\<in> (\\<lambda>a. hom_component a z) ` A\n\ngoal (1 subgoal):\n 1. (\\<And>a.\n        \\<lbrakk>a \\<in> A; p = hom_component a z\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  a \\<in> A\n  p = hom_component a z\n\ngoal (1 subgoal):\n 1. - p \\<in> hom_deg_set z A", "from this(1)"], ["proof (chain)\npicking this:\n  a \\<in> A", "have \"- a \\<in> A\""], ["proof (prove)\nusing this:\n  a \\<in> A\n\ngoal (1 subgoal):\n 1. - a \\<in> A", "by (rule assms(1))"], ["proof (state)\nthis:\n  - a \\<in> A\n\ngoal (1 subgoal):\n 1. - p \\<in> hom_deg_set z A", "moreover"], ["proof (state)\nthis:\n  - a \\<in> A\n\ngoal (1 subgoal):\n 1. - p \\<in> hom_deg_set z A", "have \"- p = hom_component (- a) z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - p = hom_component (- a) z", "by (simp add: p)"], ["proof (state)\nthis:\n  - p = hom_component (- a) z\n\ngoal (1 subgoal):\n 1. - p \\<in> hom_deg_set z A", "ultimately"], ["proof (chain)\npicking this:\n  - a \\<in> A\n  - p = hom_component (- a) z", "show ?thesis"], ["proof (prove)\nusing this:\n  - a \\<in> A\n  - p = hom_component (- a) z\n\ngoal (1 subgoal):\n 1. - p \\<in> hom_deg_set z A", "unfolding hom_deg_set_def"], ["proof (prove)\nusing this:\n  - a \\<in> A\n  - p = hom_component (- a) z\n\ngoal (1 subgoal):\n 1. - p \\<in> (\\<lambda>a. hom_component a z) ` A", "by (rule rev_image_eqI)"], ["proof (state)\nthis:\n  - p \\<in> hom_deg_set z A\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma hom_deg_set_closed_plus:\n  assumes \"\\<And>a1 a2. a1 \\<in> A \\<Longrightarrow> a2 \\<in> A \\<Longrightarrow> a1 + a2 \\<in> A\"\n    and \"p \\<in> hom_deg_set z A\" and \"q \\<in> hom_deg_set z A\"\n  shows \"p + q \\<in> hom_deg_set z A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p + q \\<in> hom_deg_set z A", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. p + q \\<in> hom_deg_set z A", "from assms(2)"], ["proof (chain)\npicking this:\n  p \\<in> hom_deg_set z A", "obtain a1 where \"a1 \\<in> A\" and p: \"p = hom_component a1 z\""], ["proof (prove)\nusing this:\n  p \\<in> hom_deg_set z A\n\ngoal (1 subgoal):\n 1. (\\<And>a1.\n        \\<lbrakk>a1 \\<in> A; p = hom_component a1 z\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding hom_deg_set_def"], ["proof (prove)\nusing this:\n  p \\<in> (\\<lambda>a. hom_component a z) ` A\n\ngoal (1 subgoal):\n 1. (\\<And>a1.\n        \\<lbrakk>a1 \\<in> A; p = hom_component a1 z\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  a1 \\<in> A\n  p = hom_component a1 z\n\ngoal (1 subgoal):\n 1. p + q \\<in> hom_deg_set z A", "from assms(3)"], ["proof (chain)\npicking this:\n  q \\<in> hom_deg_set z A", "obtain a2 where \"a2 \\<in> A\" and q: \"q = hom_component a2 z\""], ["proof (prove)\nusing this:\n  q \\<in> hom_deg_set z A\n\ngoal (1 subgoal):\n 1. (\\<And>a2.\n        \\<lbrakk>a2 \\<in> A; q = hom_component a2 z\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding hom_deg_set_def"], ["proof (prove)\nusing this:\n  q \\<in> (\\<lambda>a. hom_component a z) ` A\n\ngoal (1 subgoal):\n 1. (\\<And>a2.\n        \\<lbrakk>a2 \\<in> A; q = hom_component a2 z\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  a2 \\<in> A\n  q = hom_component a2 z\n\ngoal (1 subgoal):\n 1. p + q \\<in> hom_deg_set z A", "from \\<open>a1 \\<in> A\\<close> this(1)"], ["proof (chain)\npicking this:\n  a1 \\<in> A\n  a2 \\<in> A", "have \"a1 + a2 \\<in> A\""], ["proof (prove)\nusing this:\n  a1 \\<in> A\n  a2 \\<in> A\n\ngoal (1 subgoal):\n 1. a1 + a2 \\<in> A", "by (rule assms(1))"], ["proof (state)\nthis:\n  a1 + a2 \\<in> A\n\ngoal (1 subgoal):\n 1. p + q \\<in> hom_deg_set z A", "moreover"], ["proof (state)\nthis:\n  a1 + a2 \\<in> A\n\ngoal (1 subgoal):\n 1. p + q \\<in> hom_deg_set z A", "have \"p + q = hom_component (a1 + a2) z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p + q = hom_component (a1 + a2) z", "by (simp only: p q hom_component_plus)"], ["proof (state)\nthis:\n  p + q = hom_component (a1 + a2) z\n\ngoal (1 subgoal):\n 1. p + q \\<in> hom_deg_set z A", "ultimately"], ["proof (chain)\npicking this:\n  a1 + a2 \\<in> A\n  p + q = hom_component (a1 + a2) z", "show ?thesis"], ["proof (prove)\nusing this:\n  a1 + a2 \\<in> A\n  p + q = hom_component (a1 + a2) z\n\ngoal (1 subgoal):\n 1. p + q \\<in> hom_deg_set z A", "unfolding hom_deg_set_def"], ["proof (prove)\nusing this:\n  a1 + a2 \\<in> A\n  p + q = hom_component (a1 + a2) z\n\ngoal (1 subgoal):\n 1. p + q \\<in> (\\<lambda>a. hom_component a z) ` A", "by (rule rev_image_eqI)"], ["proof (state)\nthis:\n  p + q \\<in> hom_deg_set z A\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma hom_deg_set_closed_minus:\n  assumes \"\\<And>a1 a2. a1 \\<in> A \\<Longrightarrow> a2 \\<in> A \\<Longrightarrow> a1 - a2 \\<in> A\"\n    and \"p \\<in> hom_deg_set z A\" and \"q \\<in> hom_deg_set z A\"\n  shows \"p - q \\<in> hom_deg_set z A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p - q \\<in> hom_deg_set z A", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. p - q \\<in> hom_deg_set z A", "from assms(2)"], ["proof (chain)\npicking this:\n  p \\<in> hom_deg_set z A", "obtain a1 where \"a1 \\<in> A\" and p: \"p = hom_component a1 z\""], ["proof (prove)\nusing this:\n  p \\<in> hom_deg_set z A\n\ngoal (1 subgoal):\n 1. (\\<And>a1.\n        \\<lbrakk>a1 \\<in> A; p = hom_component a1 z\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding hom_deg_set_def"], ["proof (prove)\nusing this:\n  p \\<in> (\\<lambda>a. hom_component a z) ` A\n\ngoal (1 subgoal):\n 1. (\\<And>a1.\n        \\<lbrakk>a1 \\<in> A; p = hom_component a1 z\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  a1 \\<in> A\n  p = hom_component a1 z\n\ngoal (1 subgoal):\n 1. p - q \\<in> hom_deg_set z A", "from assms(3)"], ["proof (chain)\npicking this:\n  q \\<in> hom_deg_set z A", "obtain a2 where \"a2 \\<in> A\" and q: \"q = hom_component a2 z\""], ["proof (prove)\nusing this:\n  q \\<in> hom_deg_set z A\n\ngoal (1 subgoal):\n 1. (\\<And>a2.\n        \\<lbrakk>a2 \\<in> A; q = hom_component a2 z\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding hom_deg_set_def"], ["proof (prove)\nusing this:\n  q \\<in> (\\<lambda>a. hom_component a z) ` A\n\ngoal (1 subgoal):\n 1. (\\<And>a2.\n        \\<lbrakk>a2 \\<in> A; q = hom_component a2 z\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  a2 \\<in> A\n  q = hom_component a2 z\n\ngoal (1 subgoal):\n 1. p - q \\<in> hom_deg_set z A", "from \\<open>a1 \\<in> A\\<close> this(1)"], ["proof (chain)\npicking this:\n  a1 \\<in> A\n  a2 \\<in> A", "have \"a1 - a2 \\<in> A\""], ["proof (prove)\nusing this:\n  a1 \\<in> A\n  a2 \\<in> A\n\ngoal (1 subgoal):\n 1. a1 - a2 \\<in> A", "by (rule assms(1))"], ["proof (state)\nthis:\n  a1 - a2 \\<in> A\n\ngoal (1 subgoal):\n 1. p - q \\<in> hom_deg_set z A", "moreover"], ["proof (state)\nthis:\n  a1 - a2 \\<in> A\n\ngoal (1 subgoal):\n 1. p - q \\<in> hom_deg_set z A", "have \"p - q = hom_component (a1 - a2) z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p - q = hom_component (a1 - a2) z", "by (simp only: p q hom_component_minus)"], ["proof (state)\nthis:\n  p - q = hom_component (a1 - a2) z\n\ngoal (1 subgoal):\n 1. p - q \\<in> hom_deg_set z A", "ultimately"], ["proof (chain)\npicking this:\n  a1 - a2 \\<in> A\n  p - q = hom_component (a1 - a2) z", "show ?thesis"], ["proof (prove)\nusing this:\n  a1 - a2 \\<in> A\n  p - q = hom_component (a1 - a2) z\n\ngoal (1 subgoal):\n 1. p - q \\<in> hom_deg_set z A", "unfolding hom_deg_set_def"], ["proof (prove)\nusing this:\n  a1 - a2 \\<in> A\n  p - q = hom_component (a1 - a2) z\n\ngoal (1 subgoal):\n 1. p - q \\<in> (\\<lambda>a. hom_component a z) ` A", "by (rule rev_image_eqI)"], ["proof (state)\nthis:\n  p - q \\<in> hom_deg_set z A\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma hom_deg_set_closed_scalar:\n  assumes \"\\<And>a. a \\<in> A \\<Longrightarrow> c \\<cdot> a \\<in> A\" and \"p \\<in> hom_deg_set z A\"\n  shows \"(c::'a::semiring_0) \\<cdot> p \\<in> hom_deg_set z A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c \\<cdot> p \\<in> hom_deg_set z A", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. c \\<cdot> p \\<in> hom_deg_set z A", "from assms(2)"], ["proof (chain)\npicking this:\n  p \\<in> hom_deg_set z A", "obtain a where \"a \\<in> A\" and p: \"p = hom_component a z\""], ["proof (prove)\nusing this:\n  p \\<in> hom_deg_set z A\n\ngoal (1 subgoal):\n 1. (\\<And>a.\n        \\<lbrakk>a \\<in> A; p = hom_component a z\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding hom_deg_set_def"], ["proof (prove)\nusing this:\n  p \\<in> (\\<lambda>a. hom_component a z) ` A\n\ngoal (1 subgoal):\n 1. (\\<And>a.\n        \\<lbrakk>a \\<in> A; p = hom_component a z\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  a \\<in> A\n  p = hom_component a z\n\ngoal (1 subgoal):\n 1. c \\<cdot> p \\<in> hom_deg_set z A", "from this(1)"], ["proof (chain)\npicking this:\n  a \\<in> A", "have \"c \\<cdot> a \\<in> A\""], ["proof (prove)\nusing this:\n  a \\<in> A\n\ngoal (1 subgoal):\n 1. c \\<cdot> a \\<in> A", "by (rule assms(1))"], ["proof (state)\nthis:\n  c \\<cdot> a \\<in> A\n\ngoal (1 subgoal):\n 1. c \\<cdot> p \\<in> hom_deg_set z A", "moreover"], ["proof (state)\nthis:\n  c \\<cdot> a \\<in> A\n\ngoal (1 subgoal):\n 1. c \\<cdot> p \\<in> hom_deg_set z A", "have \"c \\<cdot> p = hom_component (c \\<cdot> a) z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c \\<cdot> p = hom_component (c \\<cdot> a) z", "by (simp add: p punit.map_scale_eq_monom_mult hom_component_monom_mult)"], ["proof (state)\nthis:\n  c \\<cdot> p = hom_component (c \\<cdot> a) z\n\ngoal (1 subgoal):\n 1. c \\<cdot> p \\<in> hom_deg_set z A", "ultimately"], ["proof (chain)\npicking this:\n  c \\<cdot> a \\<in> A\n  c \\<cdot> p = hom_component (c \\<cdot> a) z", "show ?thesis"], ["proof (prove)\nusing this:\n  c \\<cdot> a \\<in> A\n  c \\<cdot> p = hom_component (c \\<cdot> a) z\n\ngoal (1 subgoal):\n 1. c \\<cdot> p \\<in> hom_deg_set z A", "unfolding hom_deg_set_def"], ["proof (prove)\nusing this:\n  c \\<cdot> a \\<in> A\n  c \\<cdot> p = hom_component (c \\<cdot> a) z\n\ngoal (1 subgoal):\n 1. c \\<cdot> p \\<in> (\\<lambda>a. hom_component a z) ` A", "by (rule rev_image_eqI)"], ["proof (state)\nthis:\n  c \\<cdot> p \\<in> hom_deg_set z A\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma hom_deg_set_closed_sum:\n  assumes \"0 \\<in> A\" and \"\\<And>a1 a2. a1 \\<in> A \\<Longrightarrow> a2 \\<in> A \\<Longrightarrow> a1 + a2 \\<in> A\"\n    and \"\\<And>i. i \\<in> I \\<Longrightarrow> f i \\<in> hom_deg_set z A\"\n  shows \"sum f I \\<in> hom_deg_set z A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum f I \\<in> hom_deg_set z A", "using assms(3)"], ["proof (prove)\nusing this:\n  ?i \\<in> I \\<Longrightarrow> f ?i \\<in> hom_deg_set z A\n\ngoal (1 subgoal):\n 1. sum f I \\<in> hom_deg_set z A", "proof (induct I rule: infinite_finite_induct)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>Aa.\n       \\<lbrakk>infinite Aa;\n        \\<And>i.\n           i \\<in> Aa \\<Longrightarrow> f i \\<in> hom_deg_set z A\\<rbrakk>\n       \\<Longrightarrow> sum f Aa \\<in> hom_deg_set z A\n 2. (\\<And>i.\n        i \\<in> {} \\<Longrightarrow>\n        f i \\<in> hom_deg_set z A) \\<Longrightarrow>\n    sum f {} \\<in> hom_deg_set z A\n 3. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        (\\<And>i.\n            i \\<in> F \\<Longrightarrow>\n            f i \\<in> hom_deg_set z A) \\<Longrightarrow>\n        sum f F \\<in> hom_deg_set z A;\n        \\<And>i.\n           i \\<in> insert x F \\<Longrightarrow>\n           f i \\<in> hom_deg_set z A\\<rbrakk>\n       \\<Longrightarrow> sum f (insert x F) \\<in> hom_deg_set z A", "case (infinite I)"], ["proof (state)\nthis:\n  infinite I\n  ?i \\<in> I \\<Longrightarrow> f ?i \\<in> hom_deg_set z A\n\ngoal (3 subgoals):\n 1. \\<And>Aa.\n       \\<lbrakk>infinite Aa;\n        \\<And>i.\n           i \\<in> Aa \\<Longrightarrow> f i \\<in> hom_deg_set z A\\<rbrakk>\n       \\<Longrightarrow> sum f Aa \\<in> hom_deg_set z A\n 2. (\\<And>i.\n        i \\<in> {} \\<Longrightarrow>\n        f i \\<in> hom_deg_set z A) \\<Longrightarrow>\n    sum f {} \\<in> hom_deg_set z A\n 3. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        (\\<And>i.\n            i \\<in> F \\<Longrightarrow>\n            f i \\<in> hom_deg_set z A) \\<Longrightarrow>\n        sum f F \\<in> hom_deg_set z A;\n        \\<And>i.\n           i \\<in> insert x F \\<Longrightarrow>\n           f i \\<in> hom_deg_set z A\\<rbrakk>\n       \\<Longrightarrow> sum f (insert x F) \\<in> hom_deg_set z A", "with assms(1)"], ["proof (chain)\npicking this:\n  0 \\<in> A\n  infinite I\n  ?i \\<in> I \\<Longrightarrow> f ?i \\<in> hom_deg_set z A", "show ?case"], ["proof (prove)\nusing this:\n  0 \\<in> A\n  infinite I\n  ?i \\<in> I \\<Longrightarrow> f ?i \\<in> hom_deg_set z A\n\ngoal (1 subgoal):\n 1. sum f I \\<in> hom_deg_set z A", "by (simp add: zero_in_hom_deg_set)"], ["proof (state)\nthis:\n  sum f I \\<in> hom_deg_set z A\n\ngoal (2 subgoals):\n 1. (\\<And>i.\n        i \\<in> {} \\<Longrightarrow>\n        f i \\<in> hom_deg_set z A) \\<Longrightarrow>\n    sum f {} \\<in> hom_deg_set z A\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        (\\<And>i.\n            i \\<in> F \\<Longrightarrow>\n            f i \\<in> hom_deg_set z A) \\<Longrightarrow>\n        sum f F \\<in> hom_deg_set z A;\n        \\<And>i.\n           i \\<in> insert x F \\<Longrightarrow>\n           f i \\<in> hom_deg_set z A\\<rbrakk>\n       \\<Longrightarrow> sum f (insert x F) \\<in> hom_deg_set z A", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. (\\<And>i.\n        i \\<in> {} \\<Longrightarrow>\n        f i \\<in> hom_deg_set z A) \\<Longrightarrow>\n    sum f {} \\<in> hom_deg_set z A\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        (\\<And>i.\n            i \\<in> F \\<Longrightarrow>\n            f i \\<in> hom_deg_set z A) \\<Longrightarrow>\n        sum f F \\<in> hom_deg_set z A;\n        \\<And>i.\n           i \\<in> insert x F \\<Longrightarrow>\n           f i \\<in> hom_deg_set z A\\<rbrakk>\n       \\<Longrightarrow> sum f (insert x F) \\<in> hom_deg_set z A", "case empty"], ["proof (state)\nthis:\n  ?i \\<in> {} \\<Longrightarrow> f ?i \\<in> hom_deg_set z A\n\ngoal (2 subgoals):\n 1. (\\<And>i.\n        i \\<in> {} \\<Longrightarrow>\n        f i \\<in> hom_deg_set z A) \\<Longrightarrow>\n    sum f {} \\<in> hom_deg_set z A\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        (\\<And>i.\n            i \\<in> F \\<Longrightarrow>\n            f i \\<in> hom_deg_set z A) \\<Longrightarrow>\n        sum f F \\<in> hom_deg_set z A;\n        \\<And>i.\n           i \\<in> insert x F \\<Longrightarrow>\n           f i \\<in> hom_deg_set z A\\<rbrakk>\n       \\<Longrightarrow> sum f (insert x F) \\<in> hom_deg_set z A", "with assms(1)"], ["proof (chain)\npicking this:\n  0 \\<in> A\n  ?i \\<in> {} \\<Longrightarrow> f ?i \\<in> hom_deg_set z A", "show ?case"], ["proof (prove)\nusing this:\n  0 \\<in> A\n  ?i \\<in> {} \\<Longrightarrow> f ?i \\<in> hom_deg_set z A\n\ngoal (1 subgoal):\n 1. sum f {} \\<in> hom_deg_set z A", "by (simp add: zero_in_hom_deg_set)"], ["proof (state)\nthis:\n  sum f {} \\<in> hom_deg_set z A\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        (\\<And>i.\n            i \\<in> F \\<Longrightarrow>\n            f i \\<in> hom_deg_set z A) \\<Longrightarrow>\n        sum f F \\<in> hom_deg_set z A;\n        \\<And>i.\n           i \\<in> insert x F \\<Longrightarrow>\n           f i \\<in> hom_deg_set z A\\<rbrakk>\n       \\<Longrightarrow> sum f (insert x F) \\<in> hom_deg_set z A", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        (\\<And>i.\n            i \\<in> F \\<Longrightarrow>\n            f i \\<in> hom_deg_set z A) \\<Longrightarrow>\n        sum f F \\<in> hom_deg_set z A;\n        \\<And>i.\n           i \\<in> insert x F \\<Longrightarrow>\n           f i \\<in> hom_deg_set z A\\<rbrakk>\n       \\<Longrightarrow> sum f (insert x F) \\<in> hom_deg_set z A", "case (insert j I)"], ["proof (state)\nthis:\n  finite I\n  j \\<notin> I\n  (\\<And>i.\n      i \\<in> I \\<Longrightarrow>\n      f i \\<in> hom_deg_set z A) \\<Longrightarrow>\n  sum f I \\<in> hom_deg_set z A\n  ?i \\<in> insert j I \\<Longrightarrow> f ?i \\<in> hom_deg_set z A\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        (\\<And>i.\n            i \\<in> F \\<Longrightarrow>\n            f i \\<in> hom_deg_set z A) \\<Longrightarrow>\n        sum f F \\<in> hom_deg_set z A;\n        \\<And>i.\n           i \\<in> insert x F \\<Longrightarrow>\n           f i \\<in> hom_deg_set z A\\<rbrakk>\n       \\<Longrightarrow> sum f (insert x F) \\<in> hom_deg_set z A", "from insert.hyps(1, 2)"], ["proof (chain)\npicking this:\n  finite I\n  j \\<notin> I", "have \"sum f (insert j I) = f j + sum f I\""], ["proof (prove)\nusing this:\n  finite I\n  j \\<notin> I\n\ngoal (1 subgoal):\n 1. sum f (insert j I) = f j + sum f I", "by simp"], ["proof (state)\nthis:\n  sum f (insert j I) = f j + sum f I\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        (\\<And>i.\n            i \\<in> F \\<Longrightarrow>\n            f i \\<in> hom_deg_set z A) \\<Longrightarrow>\n        sum f F \\<in> hom_deg_set z A;\n        \\<And>i.\n           i \\<in> insert x F \\<Longrightarrow>\n           f i \\<in> hom_deg_set z A\\<rbrakk>\n       \\<Longrightarrow> sum f (insert x F) \\<in> hom_deg_set z A", "also"], ["proof (state)\nthis:\n  sum f (insert j I) = f j + sum f I\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        (\\<And>i.\n            i \\<in> F \\<Longrightarrow>\n            f i \\<in> hom_deg_set z A) \\<Longrightarrow>\n        sum f F \\<in> hom_deg_set z A;\n        \\<And>i.\n           i \\<in> insert x F \\<Longrightarrow>\n           f i \\<in> hom_deg_set z A\\<rbrakk>\n       \\<Longrightarrow> sum f (insert x F) \\<in> hom_deg_set z A", "from assms(2)"], ["proof (chain)\npicking this:\n  \\<lbrakk>?a1.0 \\<in> A; ?a2.0 \\<in> A\\<rbrakk>\n  \\<Longrightarrow> ?a1.0 + ?a2.0 \\<in> A", "have \"\\<dots> \\<in> hom_deg_set z A\""], ["proof (prove)\nusing this:\n  \\<lbrakk>?a1.0 \\<in> A; ?a2.0 \\<in> A\\<rbrakk>\n  \\<Longrightarrow> ?a1.0 + ?a2.0 \\<in> A\n\ngoal (1 subgoal):\n 1. f j + sum f I \\<in> hom_deg_set z A", "proof (intro hom_deg_set_closed_plus insert.hyps)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>a1 a2.\n       \\<lbrakk>\\<And>a1 a2.\n                   \\<lbrakk>a1 \\<in> A; a2 \\<in> A\\<rbrakk>\n                   \\<Longrightarrow> a1 + a2 \\<in> A;\n        a1 \\<in> A; a2 \\<in> A\\<rbrakk>\n       \\<Longrightarrow> a1 + a2 \\<in> A\n 2. (\\<And>a1 a2.\n        \\<lbrakk>a1 \\<in> A; a2 \\<in> A\\<rbrakk>\n        \\<Longrightarrow> a1 + a2 \\<in> A) \\<Longrightarrow>\n    f j \\<in> hom_deg_set z A\n 3. \\<And>i.\n       \\<lbrakk>\\<And>a1 a2.\n                   \\<lbrakk>a1 \\<in> A; a2 \\<in> A\\<rbrakk>\n                   \\<Longrightarrow> a1 + a2 \\<in> A;\n        i \\<in> I\\<rbrakk>\n       \\<Longrightarrow> f i \\<in> hom_deg_set z A", "show \"f j \\<in> hom_deg_set z A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f j \\<in> hom_deg_set z A", "by (rule insert.prems) simp"], ["proof (state)\nthis:\n  f j \\<in> hom_deg_set z A\n\ngoal (2 subgoals):\n 1. \\<And>a1 a2.\n       \\<lbrakk>\\<And>a1 a2.\n                   \\<lbrakk>a1 \\<in> A; a2 \\<in> A\\<rbrakk>\n                   \\<Longrightarrow> a1 + a2 \\<in> A;\n        a1 \\<in> A; a2 \\<in> A\\<rbrakk>\n       \\<Longrightarrow> a1 + a2 \\<in> A\n 2. \\<And>i.\n       \\<lbrakk>\\<And>a1 a2.\n                   \\<lbrakk>a1 \\<in> A; a2 \\<in> A\\<rbrakk>\n                   \\<Longrightarrow> a1 + a2 \\<in> A;\n        i \\<in> I\\<rbrakk>\n       \\<Longrightarrow> f i \\<in> hom_deg_set z A", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a1 a2.\n       \\<lbrakk>\\<And>a1 a2.\n                   \\<lbrakk>a1 \\<in> A; a2 \\<in> A\\<rbrakk>\n                   \\<Longrightarrow> a1 + a2 \\<in> A;\n        a1 \\<in> A; a2 \\<in> A\\<rbrakk>\n       \\<Longrightarrow> a1 + a2 \\<in> A\n 2. \\<And>i.\n       \\<lbrakk>\\<And>a1 a2.\n                   \\<lbrakk>a1 \\<in> A; a2 \\<in> A\\<rbrakk>\n                   \\<Longrightarrow> a1 + a2 \\<in> A;\n        i \\<in> I\\<rbrakk>\n       \\<Longrightarrow> f i \\<in> hom_deg_set z A", "fix i"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a1 a2.\n       \\<lbrakk>\\<And>a1 a2.\n                   \\<lbrakk>a1 \\<in> A; a2 \\<in> A\\<rbrakk>\n                   \\<Longrightarrow> a1 + a2 \\<in> A;\n        a1 \\<in> A; a2 \\<in> A\\<rbrakk>\n       \\<Longrightarrow> a1 + a2 \\<in> A\n 2. \\<And>i.\n       \\<lbrakk>\\<And>a1 a2.\n                   \\<lbrakk>a1 \\<in> A; a2 \\<in> A\\<rbrakk>\n                   \\<Longrightarrow> a1 + a2 \\<in> A;\n        i \\<in> I\\<rbrakk>\n       \\<Longrightarrow> f i \\<in> hom_deg_set z A", "assume \"i \\<in> I\""], ["proof (state)\nthis:\n  i \\<in> I\n\ngoal (2 subgoals):\n 1. \\<And>a1 a2.\n       \\<lbrakk>\\<And>a1 a2.\n                   \\<lbrakk>a1 \\<in> A; a2 \\<in> A\\<rbrakk>\n                   \\<Longrightarrow> a1 + a2 \\<in> A;\n        a1 \\<in> A; a2 \\<in> A\\<rbrakk>\n       \\<Longrightarrow> a1 + a2 \\<in> A\n 2. \\<And>i.\n       \\<lbrakk>\\<And>a1 a2.\n                   \\<lbrakk>a1 \\<in> A; a2 \\<in> A\\<rbrakk>\n                   \\<Longrightarrow> a1 + a2 \\<in> A;\n        i \\<in> I\\<rbrakk>\n       \\<Longrightarrow> f i \\<in> hom_deg_set z A", "hence \"i \\<in> insert j I\""], ["proof (prove)\nusing this:\n  i \\<in> I\n\ngoal (1 subgoal):\n 1. i \\<in> insert j I", "by simp"], ["proof (state)\nthis:\n  i \\<in> insert j I\n\ngoal (2 subgoals):\n 1. \\<And>a1 a2.\n       \\<lbrakk>\\<And>a1 a2.\n                   \\<lbrakk>a1 \\<in> A; a2 \\<in> A\\<rbrakk>\n                   \\<Longrightarrow> a1 + a2 \\<in> A;\n        a1 \\<in> A; a2 \\<in> A\\<rbrakk>\n       \\<Longrightarrow> a1 + a2 \\<in> A\n 2. \\<And>i.\n       \\<lbrakk>\\<And>a1 a2.\n                   \\<lbrakk>a1 \\<in> A; a2 \\<in> A\\<rbrakk>\n                   \\<Longrightarrow> a1 + a2 \\<in> A;\n        i \\<in> I\\<rbrakk>\n       \\<Longrightarrow> f i \\<in> hom_deg_set z A", "thus \"f i \\<in> hom_deg_set z A\""], ["proof (prove)\nusing this:\n  i \\<in> insert j I\n\ngoal (1 subgoal):\n 1. f i \\<in> hom_deg_set z A", "by (rule insert.prems)"], ["proof (state)\nthis:\n  f i \\<in> hom_deg_set z A\n\ngoal (1 subgoal):\n 1. \\<And>a1 a2.\n       \\<lbrakk>\\<And>a1 a2.\n                   \\<lbrakk>a1 \\<in> A; a2 \\<in> A\\<rbrakk>\n                   \\<Longrightarrow> a1 + a2 \\<in> A;\n        a1 \\<in> A; a2 \\<in> A\\<rbrakk>\n       \\<Longrightarrow> a1 + a2 \\<in> A", "qed"], ["proof (state)\nthis:\n  f j + sum f I \\<in> hom_deg_set z A\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        (\\<And>i.\n            i \\<in> F \\<Longrightarrow>\n            f i \\<in> hom_deg_set z A) \\<Longrightarrow>\n        sum f F \\<in> hom_deg_set z A;\n        \\<And>i.\n           i \\<in> insert x F \\<Longrightarrow>\n           f i \\<in> hom_deg_set z A\\<rbrakk>\n       \\<Longrightarrow> sum f (insert x F) \\<in> hom_deg_set z A", "finally"], ["proof (chain)\npicking this:\n  sum f (insert j I) \\<in> hom_deg_set z A", "show ?case"], ["proof (prove)\nusing this:\n  sum f (insert j I) \\<in> hom_deg_set z A\n\ngoal (1 subgoal):\n 1. sum f (insert j I) \\<in> hom_deg_set z A", "."], ["proof (state)\nthis:\n  sum f (insert j I) \\<in> hom_deg_set z A\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma hom_deg_set_subset: \"homogeneous_set A \\<Longrightarrow> hom_deg_set z A \\<subseteq> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. homogeneous_set A \\<Longrightarrow> hom_deg_set z A \\<subseteq> A", "by (auto dest: homogeneous_setD simp: hom_deg_set_def)"], ["", "lemma Polys_closed_hom_deg_set:\n  assumes \"A \\<subseteq> P[X]\"\n  shows \"hom_deg_set z A \\<subseteq> P[X]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. hom_deg_set z A \\<subseteq> P[X]", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> hom_deg_set z A \\<Longrightarrow> x \\<in> P[X]", "fix p"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> hom_deg_set z A \\<Longrightarrow> x \\<in> P[X]", "assume \"p \\<in> hom_deg_set z A\""], ["proof (state)\nthis:\n  p \\<in> hom_deg_set z A\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> hom_deg_set z A \\<Longrightarrow> x \\<in> P[X]", "then"], ["proof (chain)\npicking this:\n  p \\<in> hom_deg_set z A", "obtain p' where \"p' \\<in> A\" and p: \"p = hom_component p' z\""], ["proof (prove)\nusing this:\n  p \\<in> hom_deg_set z A\n\ngoal (1 subgoal):\n 1. (\\<And>p'.\n        \\<lbrakk>p' \\<in> A; p = hom_component p' z\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding hom_deg_set_def"], ["proof (prove)\nusing this:\n  p \\<in> (\\<lambda>a. hom_component a z) ` A\n\ngoal (1 subgoal):\n 1. (\\<And>p'.\n        \\<lbrakk>p' \\<in> A; p = hom_component p' z\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  p' \\<in> A\n  p = hom_component p' z\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> hom_deg_set z A \\<Longrightarrow> x \\<in> P[X]", "from this(1) assms"], ["proof (chain)\npicking this:\n  p' \\<in> A\n  A \\<subseteq> P[X]", "have \"p' \\<in> P[X]\""], ["proof (prove)\nusing this:\n  p' \\<in> A\n  A \\<subseteq> P[X]\n\ngoal (1 subgoal):\n 1. p' \\<in> P[X]", ".."], ["proof (state)\nthis:\n  p' \\<in> P[X]\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> hom_deg_set z A \\<Longrightarrow> x \\<in> P[X]", "have \"keys p \\<subseteq> keys p'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. keys p \\<subseteq> keys p'", "by (simp add: p keys_hom_component)"], ["proof (state)\nthis:\n  keys p \\<subseteq> keys p'\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> hom_deg_set z A \\<Longrightarrow> x \\<in> P[X]", "also"], ["proof (state)\nthis:\n  keys p \\<subseteq> keys p'\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> hom_deg_set z A \\<Longrightarrow> x \\<in> P[X]", "from \\<open>p' \\<in> P[X]\\<close>"], ["proof (chain)\npicking this:\n  p' \\<in> P[X]", "have \"\\<dots> \\<subseteq> .[X]\""], ["proof (prove)\nusing this:\n  p' \\<in> P[X]\n\ngoal (1 subgoal):\n 1. keys p' \\<subseteq> .[X]", "by (rule PolysD)"], ["proof (state)\nthis:\n  keys p' \\<subseteq> .[X]\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> hom_deg_set z A \\<Longrightarrow> x \\<in> P[X]", "finally"], ["proof (chain)\npicking this:\n  keys p \\<subseteq> .[X]", "show \"p \\<in> P[X]\""], ["proof (prove)\nusing this:\n  keys p \\<subseteq> .[X]\n\ngoal (1 subgoal):\n 1. p \\<in> P[X]", "by (rule PolysI)"], ["proof (state)\nthis:\n  p \\<in> P[X]\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma hom_deg_set_alt_homogeneous_set:\n  assumes \"homogeneous_set A\"\n  shows \"hom_deg_set z A = {p \\<in> A. homogeneous p \\<and> (p = 0 \\<or> poly_deg p = z)}\" (is \"?A = ?B\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. hom_deg_set z A =\n    {p \\<in> A. homogeneous p \\<and> (p = 0 \\<or> poly_deg p = z)}", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. hom_deg_set z A\n    \\<subseteq> {p \\<in> A.\n                 homogeneous p \\<and> (p = 0 \\<or> poly_deg p = z)}\n 2. {p \\<in> A. homogeneous p \\<and> (p = 0 \\<or> poly_deg p = z)}\n    \\<subseteq> hom_deg_set z A", "show \"?A \\<subseteq> ?B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. hom_deg_set z A\n    \\<subseteq> {p \\<in> A.\n                 homogeneous p \\<and> (p = 0 \\<or> poly_deg p = z)}", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> hom_deg_set z A \\<Longrightarrow>\n       x \\<in> {p \\<in> A.\n                homogeneous p \\<and> (p = 0 \\<or> poly_deg p = z)}", "fix h"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> hom_deg_set z A \\<Longrightarrow>\n       x \\<in> {p \\<in> A.\n                homogeneous p \\<and> (p = 0 \\<or> poly_deg p = z)}", "assume \"h \\<in> ?A\""], ["proof (state)\nthis:\n  h \\<in> hom_deg_set z A\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> hom_deg_set z A \\<Longrightarrow>\n       x \\<in> {p \\<in> A.\n                homogeneous p \\<and> (p = 0 \\<or> poly_deg p = z)}", "also"], ["proof (state)\nthis:\n  h \\<in> hom_deg_set z A\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> hom_deg_set z A \\<Longrightarrow>\n       x \\<in> {p \\<in> A.\n                homogeneous p \\<and> (p = 0 \\<or> poly_deg p = z)}", "from assms"], ["proof (chain)\npicking this:\n  homogeneous_set A", "have \"\\<dots> \\<subseteq> A\""], ["proof (prove)\nusing this:\n  homogeneous_set A\n\ngoal (1 subgoal):\n 1. hom_deg_set z A \\<subseteq> A", "by (rule hom_deg_set_subset)"], ["proof (state)\nthis:\n  hom_deg_set z A \\<subseteq> A\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> hom_deg_set z A \\<Longrightarrow>\n       x \\<in> {p \\<in> A.\n                homogeneous p \\<and> (p = 0 \\<or> poly_deg p = z)}", "finally"], ["proof (chain)\npicking this:\n  h \\<in> A", "show \"h \\<in> ?B\""], ["proof (prove)\nusing this:\n  h \\<in> A\n\ngoal (1 subgoal):\n 1. h \\<in> {p \\<in> A. homogeneous p \\<and> (p = 0 \\<or> poly_deg p = z)}", "using \\<open>h \\<in> ?A\\<close>"], ["proof (prove)\nusing this:\n  h \\<in> A\n  h \\<in> hom_deg_set z A\n\ngoal (1 subgoal):\n 1. h \\<in> {p \\<in> A. homogeneous p \\<and> (p = 0 \\<or> poly_deg p = z)}", "by (auto dest: hom_deg_setD)"], ["proof (state)\nthis:\n  h \\<in> {p \\<in> A. homogeneous p \\<and> (p = 0 \\<or> poly_deg p = z)}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  hom_deg_set z A\n  \\<subseteq> {p \\<in> A. homogeneous p \\<and> (p = 0 \\<or> poly_deg p = z)}\n\ngoal (1 subgoal):\n 1. {p \\<in> A. homogeneous p \\<and> (p = 0 \\<or> poly_deg p = z)}\n    \\<subseteq> hom_deg_set z A", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. {p \\<in> A. homogeneous p \\<and> (p = 0 \\<or> poly_deg p = z)}\n    \\<subseteq> hom_deg_set z A", "show \"?B \\<subseteq> ?A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {p \\<in> A. homogeneous p \\<and> (p = 0 \\<or> poly_deg p = z)}\n    \\<subseteq> hom_deg_set z A", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {p \\<in> A.\n                homogeneous p \\<and>\n                (p = 0 \\<or> poly_deg p = z)} \\<Longrightarrow>\n       x \\<in> hom_deg_set z A", "fix h"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {p \\<in> A.\n                homogeneous p \\<and>\n                (p = 0 \\<or> poly_deg p = z)} \\<Longrightarrow>\n       x \\<in> hom_deg_set z A", "assume \"h \\<in> ?B\""], ["proof (state)\nthis:\n  h \\<in> {p \\<in> A. homogeneous p \\<and> (p = 0 \\<or> poly_deg p = z)}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {p \\<in> A.\n                homogeneous p \\<and>\n                (p = 0 \\<or> poly_deg p = z)} \\<Longrightarrow>\n       x \\<in> hom_deg_set z A", "hence \"h \\<in> A\" and \"homogeneous h\" and \"h = 0 \\<or> poly_deg h = z\""], ["proof (prove)\nusing this:\n  h \\<in> {p \\<in> A. homogeneous p \\<and> (p = 0 \\<or> poly_deg p = z)}\n\ngoal (1 subgoal):\n 1. h \\<in> A &&& homogeneous h &&& h = 0 \\<or> poly_deg h = z", "by simp_all"], ["proof (state)\nthis:\n  h \\<in> A\n  homogeneous h\n  h = 0 \\<or> poly_deg h = z\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {p \\<in> A.\n                homogeneous p \\<and>\n                (p = 0 \\<or> poly_deg p = z)} \\<Longrightarrow>\n       x \\<in> hom_deg_set z A", "from this(3)"], ["proof (chain)\npicking this:\n  h = 0 \\<or> poly_deg h = z", "show \"h \\<in> ?A\""], ["proof (prove)\nusing this:\n  h = 0 \\<or> poly_deg h = z\n\ngoal (1 subgoal):\n 1. h \\<in> hom_deg_set z A", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. h = 0 \\<Longrightarrow> h \\<in> hom_deg_set z A\n 2. poly_deg h = z \\<Longrightarrow> h \\<in> hom_deg_set z A", "assume \"h = 0\""], ["proof (state)\nthis:\n  h = 0\n\ngoal (2 subgoals):\n 1. h = 0 \\<Longrightarrow> h \\<in> hom_deg_set z A\n 2. poly_deg h = z \\<Longrightarrow> h \\<in> hom_deg_set z A", "with \\<open>h \\<in> A\\<close>"], ["proof (chain)\npicking this:\n  h \\<in> A\n  h = 0", "have \"0 \\<in> A\""], ["proof (prove)\nusing this:\n  h \\<in> A\n  h = 0\n\ngoal (1 subgoal):\n 1. 0 \\<in> A", "by simp"], ["proof (state)\nthis:\n  0 \\<in> A\n\ngoal (2 subgoals):\n 1. h = 0 \\<Longrightarrow> h \\<in> hom_deg_set z A\n 2. poly_deg h = z \\<Longrightarrow> h \\<in> hom_deg_set z A", "thus ?thesis"], ["proof (prove)\nusing this:\n  0 \\<in> A\n\ngoal (1 subgoal):\n 1. h \\<in> hom_deg_set z A", "unfolding \\<open>h = 0\\<close>"], ["proof (prove)\nusing this:\n  0 \\<in> A\n\ngoal (1 subgoal):\n 1. 0 \\<in> hom_deg_set z A", "by (rule zero_in_hom_deg_set)"], ["proof (state)\nthis:\n  h \\<in> hom_deg_set z A\n\ngoal (1 subgoal):\n 1. poly_deg h = z \\<Longrightarrow> h \\<in> hom_deg_set z A", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. poly_deg h = z \\<Longrightarrow> h \\<in> hom_deg_set z A", "assume \"poly_deg h = z\""], ["proof (state)\nthis:\n  poly_deg h = z\n\ngoal (1 subgoal):\n 1. poly_deg h = z \\<Longrightarrow> h \\<in> hom_deg_set z A", "with \\<open>homogeneous h\\<close>"], ["proof (chain)\npicking this:\n  homogeneous h\n  poly_deg h = z", "have \"h = hom_component h z\""], ["proof (prove)\nusing this:\n  homogeneous h\n  poly_deg h = z\n\ngoal (1 subgoal):\n 1. h = hom_component h z", "by (simp add: hom_component_of_homogeneous)"], ["proof (state)\nthis:\n  h = hom_component h z\n\ngoal (1 subgoal):\n 1. poly_deg h = z \\<Longrightarrow> h \\<in> hom_deg_set z A", "with \\<open>h \\<in> A\\<close>"], ["proof (chain)\npicking this:\n  h \\<in> A\n  h = hom_component h z", "show ?thesis"], ["proof (prove)\nusing this:\n  h \\<in> A\n  h = hom_component h z\n\ngoal (1 subgoal):\n 1. h \\<in> hom_deg_set z A", "unfolding hom_deg_set_def"], ["proof (prove)\nusing this:\n  h \\<in> A\n  h = hom_component h z\n\ngoal (1 subgoal):\n 1. h \\<in> (\\<lambda>a. hom_component a z) ` A", "by (rule rev_image_eqI)"], ["proof (state)\nthis:\n  h \\<in> hom_deg_set z A\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  h \\<in> hom_deg_set z A\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  {p \\<in> A. homogeneous p \\<and> (p = 0 \\<or> poly_deg p = z)}\n  \\<subseteq> hom_deg_set z A\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma hom_deg_set_sum_list_listset:\n  assumes \"A = sum_list ` listset ss\"\n  shows \"hom_deg_set z A = sum_list ` listset (map (hom_deg_set z) ss)\" (is \"?A = ?B\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. hom_deg_set z A = sum_list ` listset (map (hom_deg_set z) ss)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. hom_deg_set z A \\<subseteq> sum_list ` listset (map (hom_deg_set z) ss)\n 2. sum_list ` listset (map (hom_deg_set z) ss) \\<subseteq> hom_deg_set z A", "show \"?A \\<subseteq> ?B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. hom_deg_set z A \\<subseteq> sum_list ` listset (map (hom_deg_set z) ss)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> hom_deg_set z A \\<Longrightarrow>\n       x \\<in> sum_list ` listset (map (hom_deg_set z) ss)", "fix h"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> hom_deg_set z A \\<Longrightarrow>\n       x \\<in> sum_list ` listset (map (hom_deg_set z) ss)", "assume \"h \\<in> ?A\""], ["proof (state)\nthis:\n  h \\<in> hom_deg_set z A\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> hom_deg_set z A \\<Longrightarrow>\n       x \\<in> sum_list ` listset (map (hom_deg_set z) ss)", "then"], ["proof (chain)\npicking this:\n  h \\<in> hom_deg_set z A", "obtain a where \"a \\<in> A\" and h: \"h = hom_component a z\""], ["proof (prove)\nusing this:\n  h \\<in> hom_deg_set z A\n\ngoal (1 subgoal):\n 1. (\\<And>a.\n        \\<lbrakk>a \\<in> A; h = hom_component a z\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding hom_deg_set_def"], ["proof (prove)\nusing this:\n  h \\<in> (\\<lambda>a. hom_component a z) ` A\n\ngoal (1 subgoal):\n 1. (\\<And>a.\n        \\<lbrakk>a \\<in> A; h = hom_component a z\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  a \\<in> A\n  h = hom_component a z\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> hom_deg_set z A \\<Longrightarrow>\n       x \\<in> sum_list ` listset (map (hom_deg_set z) ss)", "from this(1)"], ["proof (chain)\npicking this:\n  a \\<in> A", "obtain qs where \"qs \\<in> listset ss\" and a: \"a = sum_list qs\""], ["proof (prove)\nusing this:\n  a \\<in> A\n\ngoal (1 subgoal):\n 1. (\\<And>qs.\n        \\<lbrakk>qs \\<in> listset ss; a = sum_list qs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding assms"], ["proof (prove)\nusing this:\n  a \\<in> sum_list ` listset ss\n\ngoal (1 subgoal):\n 1. (\\<And>qs.\n        \\<lbrakk>qs \\<in> listset ss; a = sum_list qs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  qs \\<in> listset ss\n  a = sum_list qs\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> hom_deg_set z A \\<Longrightarrow>\n       x \\<in> sum_list ` listset (map (hom_deg_set z) ss)", "have \"h = hom_component (sum_list qs) z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. h = hom_component (sum_list qs) z", "by (simp only: a h)"], ["proof (state)\nthis:\n  h = hom_component (sum_list qs) z\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> hom_deg_set z A \\<Longrightarrow>\n       x \\<in> sum_list ` listset (map (hom_deg_set z) ss)", "also"], ["proof (state)\nthis:\n  h = hom_component (sum_list qs) z\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> hom_deg_set z A \\<Longrightarrow>\n       x \\<in> sum_list ` listset (map (hom_deg_set z) ss)", "have \"\\<dots> = sum_list (map (\\<lambda>q. hom_component q z) qs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. hom_component (sum_list qs) z =\n    (\\<Sum>q\\<leftarrow>qs. hom_component q z)", "by (induct qs) (simp_all add: hom_component_plus)"], ["proof (state)\nthis:\n  hom_component (sum_list qs) z = (\\<Sum>q\\<leftarrow>qs. hom_component q z)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> hom_deg_set z A \\<Longrightarrow>\n       x \\<in> sum_list ` listset (map (hom_deg_set z) ss)", "also"], ["proof (state)\nthis:\n  hom_component (sum_list qs) z = (\\<Sum>q\\<leftarrow>qs. hom_component q z)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> hom_deg_set z A \\<Longrightarrow>\n       x \\<in> sum_list ` listset (map (hom_deg_set z) ss)", "have \"\\<dots> \\<in> ?B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>q\\<leftarrow>qs. hom_component q z)\n    \\<in> sum_list ` listset (map (hom_deg_set z) ss)", "proof (rule imageI)"], ["proof (state)\ngoal (1 subgoal):\n 1. map (\\<lambda>q. hom_component q z) qs\n    \\<in> listset (map (hom_deg_set z) ss)", "show \"map (\\<lambda>q. hom_component q z) qs \\<in> listset (map (hom_deg_set z) ss)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map (\\<lambda>q. hom_component q z) qs\n    \\<in> listset (map (hom_deg_set z) ss)", "unfolding hom_deg_set_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. map (\\<lambda>q. hom_component q z) qs\n    \\<in> listset (map ((`) (\\<lambda>a. hom_component a z)) ss)", "using \\<open>qs \\<in> listset ss\\<close> refl"], ["proof (prove)\nusing this:\n  qs \\<in> listset ss\n  ?t = ?t\n\ngoal (1 subgoal):\n 1. map (\\<lambda>q. hom_component q z) qs\n    \\<in> listset (map ((`) (\\<lambda>a. hom_component a z)) ss)", "by (rule listset_map_imageI)"], ["proof (state)\nthis:\n  map (\\<lambda>q. hom_component q z) qs\n  \\<in> listset (map (hom_deg_set z) ss)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<Sum>q\\<leftarrow>qs. hom_component q z)\n  \\<in> sum_list ` listset (map (hom_deg_set z) ss)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> hom_deg_set z A \\<Longrightarrow>\n       x \\<in> sum_list ` listset (map (hom_deg_set z) ss)", "finally"], ["proof (chain)\npicking this:\n  h \\<in> sum_list ` listset (map (hom_deg_set z) ss)", "show \"h \\<in> ?B\""], ["proof (prove)\nusing this:\n  h \\<in> sum_list ` listset (map (hom_deg_set z) ss)\n\ngoal (1 subgoal):\n 1. h \\<in> sum_list ` listset (map (hom_deg_set z) ss)", "."], ["proof (state)\nthis:\n  h \\<in> sum_list ` listset (map (hom_deg_set z) ss)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  hom_deg_set z A \\<subseteq> sum_list ` listset (map (hom_deg_set z) ss)\n\ngoal (1 subgoal):\n 1. sum_list ` listset (map (hom_deg_set z) ss) \\<subseteq> hom_deg_set z A", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. sum_list ` listset (map (hom_deg_set z) ss) \\<subseteq> hom_deg_set z A", "show \"?B \\<subseteq> ?A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum_list ` listset (map (hom_deg_set z) ss) \\<subseteq> hom_deg_set z A", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> sum_list ` listset (map (hom_deg_set z) ss) \\<Longrightarrow>\n       x \\<in> hom_deg_set z A", "fix h"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> sum_list ` listset (map (hom_deg_set z) ss) \\<Longrightarrow>\n       x \\<in> hom_deg_set z A", "assume \"h \\<in> ?B\""], ["proof (state)\nthis:\n  h \\<in> sum_list ` listset (map (hom_deg_set z) ss)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> sum_list ` listset (map (hom_deg_set z) ss) \\<Longrightarrow>\n       x \\<in> hom_deg_set z A", "then"], ["proof (chain)\npicking this:\n  h \\<in> sum_list ` listset (map (hom_deg_set z) ss)", "obtain qs where \"qs \\<in> listset (map (hom_deg_set z) ss)\" and h: \"h = sum_list qs\""], ["proof (prove)\nusing this:\n  h \\<in> sum_list ` listset (map (hom_deg_set z) ss)\n\ngoal (1 subgoal):\n 1. (\\<And>qs.\n        \\<lbrakk>qs \\<in> listset (map (hom_deg_set z) ss);\n         h = sum_list qs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  qs \\<in> listset (map (hom_deg_set z) ss)\n  h = sum_list qs\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> sum_list ` listset (map (hom_deg_set z) ss) \\<Longrightarrow>\n       x \\<in> hom_deg_set z A", "from this(1)"], ["proof (chain)\npicking this:\n  qs \\<in> listset (map (hom_deg_set z) ss)", "obtain qs' where \"qs' \\<in> listset ss\" and qs: \"qs = map (\\<lambda>q. hom_component q z) qs'\""], ["proof (prove)\nusing this:\n  qs \\<in> listset (map (hom_deg_set z) ss)\n\ngoal (1 subgoal):\n 1. (\\<And>qs'.\n        \\<lbrakk>qs' \\<in> listset ss;\n         qs = map (\\<lambda>q. hom_component q z) qs'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding hom_deg_set_def"], ["proof (prove)\nusing this:\n  qs \\<in> listset (map ((`) (\\<lambda>a. hom_component a z)) ss)\n\ngoal (1 subgoal):\n 1. (\\<And>qs'.\n        \\<lbrakk>qs' \\<in> listset ss;\n         qs = map (\\<lambda>q. hom_component q z) qs'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule listset_map_imageE)"], ["proof (state)\nthis:\n  qs' \\<in> listset ss\n  qs = map (\\<lambda>q. hom_component q z) qs'\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> sum_list ` listset (map (hom_deg_set z) ss) \\<Longrightarrow>\n       x \\<in> hom_deg_set z A", "have \"h = sum_list (map (\\<lambda>q. hom_component q z) qs')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. h = (\\<Sum>q\\<leftarrow>qs'. hom_component q z)", "by (simp only: h qs)"], ["proof (state)\nthis:\n  h = (\\<Sum>q\\<leftarrow>qs'. hom_component q z)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> sum_list ` listset (map (hom_deg_set z) ss) \\<Longrightarrow>\n       x \\<in> hom_deg_set z A", "also"], ["proof (state)\nthis:\n  h = (\\<Sum>q\\<leftarrow>qs'. hom_component q z)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> sum_list ` listset (map (hom_deg_set z) ss) \\<Longrightarrow>\n       x \\<in> hom_deg_set z A", "have \"\\<dots> = hom_component (sum_list qs') z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>q\\<leftarrow>qs'. hom_component q z) =\n    hom_component (sum_list qs') z", "by (induct qs') (simp_all add: hom_component_plus)"], ["proof (state)\nthis:\n  (\\<Sum>q\\<leftarrow>qs'. hom_component q z) =\n  hom_component (sum_list qs') z\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> sum_list ` listset (map (hom_deg_set z) ss) \\<Longrightarrow>\n       x \\<in> hom_deg_set z A", "finally"], ["proof (chain)\npicking this:\n  h = hom_component (sum_list qs') z", "have \"h = hom_component (sum_list qs') z\""], ["proof (prove)\nusing this:\n  h = hom_component (sum_list qs') z\n\ngoal (1 subgoal):\n 1. h = hom_component (sum_list qs') z", "."], ["proof (state)\nthis:\n  h = hom_component (sum_list qs') z\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> sum_list ` listset (map (hom_deg_set z) ss) \\<Longrightarrow>\n       x \\<in> hom_deg_set z A", "moreover"], ["proof (state)\nthis:\n  h = hom_component (sum_list qs') z\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> sum_list ` listset (map (hom_deg_set z) ss) \\<Longrightarrow>\n       x \\<in> hom_deg_set z A", "have \"sum_list qs' \\<in> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum_list qs' \\<in> A", "unfolding assms"], ["proof (prove)\ngoal (1 subgoal):\n 1. sum_list qs' \\<in> sum_list ` listset ss", "using \\<open>qs' \\<in> listset ss\\<close>"], ["proof (prove)\nusing this:\n  qs' \\<in> listset ss\n\ngoal (1 subgoal):\n 1. sum_list qs' \\<in> sum_list ` listset ss", "by (rule imageI)"], ["proof (state)\nthis:\n  sum_list qs' \\<in> A\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> sum_list ` listset (map (hom_deg_set z) ss) \\<Longrightarrow>\n       x \\<in> hom_deg_set z A", "ultimately"], ["proof (chain)\npicking this:\n  h = hom_component (sum_list qs') z\n  sum_list qs' \\<in> A", "show \"h \\<in> ?A\""], ["proof (prove)\nusing this:\n  h = hom_component (sum_list qs') z\n  sum_list qs' \\<in> A\n\ngoal (1 subgoal):\n 1. h \\<in> hom_deg_set z A", "unfolding hom_deg_set_def"], ["proof (prove)\nusing this:\n  h = hom_component (sum_list qs') z\n  sum_list qs' \\<in> A\n\ngoal (1 subgoal):\n 1. h \\<in> (\\<lambda>a. hom_component a z) ` A", "by (rule image_eqI)"], ["proof (state)\nthis:\n  h \\<in> hom_deg_set z A\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  sum_list ` listset (map (hom_deg_set z) ss) \\<subseteq> hom_deg_set z A\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma direct_decomp_hom_deg_set:\n  assumes \"direct_decomp A ss\" and \"\\<And>s. s \\<in> set ss \\<Longrightarrow> homogeneous_set s\"\n  shows \"direct_decomp (hom_deg_set z A) (map (hom_deg_set z) ss)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. direct_decomp (hom_deg_set z A) (map (hom_deg_set z) ss)", "proof (rule direct_decompI)"], ["proof (state)\ngoal (2 subgoals):\n 1. inj_on sum_list (listset (map (hom_deg_set z) ss))\n 2. sum_list ` listset (map (hom_deg_set z) ss) = hom_deg_set z A", "from assms(1)"], ["proof (chain)\npicking this:\n  direct_decomp A ss", "have \"sum_list ` listset ss = A\""], ["proof (prove)\nusing this:\n  direct_decomp A ss\n\ngoal (1 subgoal):\n 1. sum_list ` listset ss = A", "by (rule direct_decompD)"], ["proof (state)\nthis:\n  sum_list ` listset ss = A\n\ngoal (2 subgoals):\n 1. inj_on sum_list (listset (map (hom_deg_set z) ss))\n 2. sum_list ` listset (map (hom_deg_set z) ss) = hom_deg_set z A", "from this[symmetric]"], ["proof (chain)\npicking this:\n  A = sum_list ` listset ss", "show \"sum_list ` listset (map (hom_deg_set z) ss) = hom_deg_set z A\""], ["proof (prove)\nusing this:\n  A = sum_list ` listset ss\n\ngoal (1 subgoal):\n 1. sum_list ` listset (map (hom_deg_set z) ss) = hom_deg_set z A", "by (simp only: hom_deg_set_sum_list_listset)"], ["proof (state)\nthis:\n  sum_list ` listset (map (hom_deg_set z) ss) = hom_deg_set z A\n\ngoal (1 subgoal):\n 1. inj_on sum_list (listset (map (hom_deg_set z) ss))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. inj_on sum_list (listset (map (hom_deg_set z) ss))", "from assms(1)"], ["proof (chain)\npicking this:\n  direct_decomp A ss", "have \"inj_on sum_list (listset ss)\""], ["proof (prove)\nusing this:\n  direct_decomp A ss\n\ngoal (1 subgoal):\n 1. inj_on sum_list (listset ss)", "by (rule direct_decompD)"], ["proof (state)\nthis:\n  inj_on sum_list (listset ss)\n\ngoal (1 subgoal):\n 1. inj_on sum_list (listset (map (hom_deg_set z) ss))", "moreover"], ["proof (state)\nthis:\n  inj_on sum_list (listset ss)\n\ngoal (1 subgoal):\n 1. inj_on sum_list (listset (map (hom_deg_set z) ss))", "have \"listset (map (hom_deg_set z) ss) \\<subseteq> listset ss\""], ["proof (prove)\ngoal (1 subgoal):\n 1. listset (map (hom_deg_set z) ss) \\<subseteq> listset ss", "proof (rule listset_mono)"], ["proof (state)\ngoal (2 subgoals):\n 1. length (map (hom_deg_set z) ss) = length ss\n 2. \\<And>i.\n       i < length ss \\<Longrightarrow>\n       map (hom_deg_set z) ss ! i \\<subseteq> ss ! i", "fix i"], ["proof (state)\ngoal (2 subgoals):\n 1. length (map (hom_deg_set z) ss) = length ss\n 2. \\<And>i.\n       i < length ss \\<Longrightarrow>\n       map (hom_deg_set z) ss ! i \\<subseteq> ss ! i", "assume \"i < length ss\""], ["proof (state)\nthis:\n  i < length ss\n\ngoal (2 subgoals):\n 1. length (map (hom_deg_set z) ss) = length ss\n 2. \\<And>i.\n       i < length ss \\<Longrightarrow>\n       map (hom_deg_set z) ss ! i \\<subseteq> ss ! i", "hence \"map (hom_deg_set z) ss ! i = hom_deg_set z (ss ! i)\""], ["proof (prove)\nusing this:\n  i < length ss\n\ngoal (1 subgoal):\n 1. map (hom_deg_set z) ss ! i = hom_deg_set z (ss ! i)", "by simp"], ["proof (state)\nthis:\n  map (hom_deg_set z) ss ! i = hom_deg_set z (ss ! i)\n\ngoal (2 subgoals):\n 1. length (map (hom_deg_set z) ss) = length ss\n 2. \\<And>i.\n       i < length ss \\<Longrightarrow>\n       map (hom_deg_set z) ss ! i \\<subseteq> ss ! i", "also"], ["proof (state)\nthis:\n  map (hom_deg_set z) ss ! i = hom_deg_set z (ss ! i)\n\ngoal (2 subgoals):\n 1. length (map (hom_deg_set z) ss) = length ss\n 2. \\<And>i.\n       i < length ss \\<Longrightarrow>\n       map (hom_deg_set z) ss ! i \\<subseteq> ss ! i", "from \\<open>i < length ss\\<close>"], ["proof (chain)\npicking this:\n  i < length ss", "have \"\\<dots> \\<subseteq> ss ! i\""], ["proof (prove)\nusing this:\n  i < length ss\n\ngoal (1 subgoal):\n 1. hom_deg_set z (ss ! i) \\<subseteq> ss ! i", "by (intro hom_deg_set_subset assms(2) nth_mem)"], ["proof (state)\nthis:\n  hom_deg_set z (ss ! i) \\<subseteq> ss ! i\n\ngoal (2 subgoals):\n 1. length (map (hom_deg_set z) ss) = length ss\n 2. \\<And>i.\n       i < length ss \\<Longrightarrow>\n       map (hom_deg_set z) ss ! i \\<subseteq> ss ! i", "finally"], ["proof (chain)\npicking this:\n  map (hom_deg_set z) ss ! i \\<subseteq> ss ! i", "show \"map (hom_deg_set z) ss ! i \\<subseteq> ss ! i\""], ["proof (prove)\nusing this:\n  map (hom_deg_set z) ss ! i \\<subseteq> ss ! i\n\ngoal (1 subgoal):\n 1. map (hom_deg_set z) ss ! i \\<subseteq> ss ! i", "."], ["proof (state)\nthis:\n  map (hom_deg_set z) ss ! i \\<subseteq> ss ! i\n\ngoal (1 subgoal):\n 1. length (map (hom_deg_set z) ss) = length ss", "qed simp"], ["proof (state)\nthis:\n  listset (map (hom_deg_set z) ss) \\<subseteq> listset ss\n\ngoal (1 subgoal):\n 1. inj_on sum_list (listset (map (hom_deg_set z) ss))", "ultimately"], ["proof (chain)\npicking this:\n  inj_on sum_list (listset ss)\n  listset (map (hom_deg_set z) ss) \\<subseteq> listset ss", "show \"inj_on sum_list (listset (map (hom_deg_set z) ss))\""], ["proof (prove)\nusing this:\n  inj_on sum_list (listset ss)\n  listset (map (hom_deg_set z) ss) \\<subseteq> listset ss\n\ngoal (1 subgoal):\n 1. inj_on sum_list (listset (map (hom_deg_set z) ss))", "by (rule inj_on_subset)"], ["proof (state)\nthis:\n  inj_on sum_list (listset (map (hom_deg_set z) ss))\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Interpreting Polynomial Rings as Vector Spaces over the Coefficient Field\\<close>"], ["", "text \\<open>There is no need to set up any further interpretation, since interpretation \\<open>phull\\<close> is exactly\n  what we need.\\<close>"], ["", "lemma subspace_ideal: \"phull.subspace (ideal (F::('b::comm_powerprod \\<Rightarrow>\\<^sub>0 'a::field) set))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. phull.subspace (ideal F)", "using ideal.span_zero ideal.span_add"], ["proof (prove)\nusing this:\n  (0::?'a) \\<in> ideal ?S\n  \\<lbrakk>?x \\<in> ideal ?S; ?y \\<in> ideal ?S\\<rbrakk>\n  \\<Longrightarrow> ?x + ?y \\<in> ideal ?S\n\ngoal (1 subgoal):\n 1. phull.subspace (ideal F)", "proof (rule phull.subspaceI)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> ideal F; y \\<in> ideal F\\<rbrakk>\n       \\<Longrightarrow> x \\<in> ideal F\n 2. \\<And>x y.\n       \\<lbrakk>x \\<in> ideal F; y \\<in> ideal F\\<rbrakk>\n       \\<Longrightarrow> y \\<in> ideal F\n 3. \\<And>c x. x \\<in> ideal F \\<Longrightarrow> c \\<cdot> x \\<in> ideal F", "fix c p"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> ideal F; y \\<in> ideal F\\<rbrakk>\n       \\<Longrightarrow> x \\<in> ideal F\n 2. \\<And>x y.\n       \\<lbrakk>x \\<in> ideal F; y \\<in> ideal F\\<rbrakk>\n       \\<Longrightarrow> y \\<in> ideal F\n 3. \\<And>c x. x \\<in> ideal F \\<Longrightarrow> c \\<cdot> x \\<in> ideal F", "assume \"p \\<in> ideal F\""], ["proof (state)\nthis:\n  p \\<in> ideal F\n\ngoal (3 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> ideal F; y \\<in> ideal F\\<rbrakk>\n       \\<Longrightarrow> x \\<in> ideal F\n 2. \\<And>x y.\n       \\<lbrakk>x \\<in> ideal F; y \\<in> ideal F\\<rbrakk>\n       \\<Longrightarrow> y \\<in> ideal F\n 3. \\<And>c x. x \\<in> ideal F \\<Longrightarrow> c \\<cdot> x \\<in> ideal F", "thus \"c \\<cdot> p \\<in> ideal F\""], ["proof (prove)\nusing this:\n  p \\<in> ideal F\n\ngoal (1 subgoal):\n 1. c \\<cdot> p \\<in> ideal F", "unfolding map_scale_eq_times"], ["proof (prove)\nusing this:\n  p \\<in> ideal F\n\ngoal (1 subgoal):\n 1. monomial c (0::'b) * p \\<in> ideal F", "by (rule ideal.span_scale)"], ["proof (state)\nthis:\n  c \\<cdot> p \\<in> ideal F\n\ngoal (2 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> ideal F; y \\<in> ideal F\\<rbrakk>\n       \\<Longrightarrow> x \\<in> ideal F\n 2. \\<And>x y.\n       \\<lbrakk>x \\<in> ideal F; y \\<in> ideal F\\<rbrakk>\n       \\<Longrightarrow> y \\<in> ideal F", "qed"], ["", "lemma subspace_Polys: \"phull.subspace (P[X]::(('x \\<Rightarrow>\\<^sub>0 nat) \\<Rightarrow>\\<^sub>0 'a::field) set)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. phull.subspace P[X]", "using zero_in_Polys Polys_closed_plus Polys_closed_map_scale"], ["proof (prove)\nusing this:\n  0 \\<in> P[?X]\n  \\<lbrakk>?p \\<in> P[?X]; ?q \\<in> P[?X]\\<rbrakk>\n  \\<Longrightarrow> ?p + ?q \\<in> P[?X]\n  ?p \\<in> P[?X] \\<Longrightarrow> ?c \\<cdot> ?p \\<in> P[?X]\n\ngoal (1 subgoal):\n 1. phull.subspace P[X]", "by (rule phull.subspaceI)"], ["", "lemma subspace_hom_deg_set:\n  assumes \"phull.subspace A\"\n  shows \"phull.subspace (hom_deg_set z A)\" (is \"phull.subspace ?A\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. phull.subspace (hom_deg_set z A)", "proof (rule phull.subspaceI)"], ["proof (state)\ngoal (3 subgoals):\n 1. 0 \\<in> hom_deg_set z A\n 2. \\<And>x y.\n       \\<lbrakk>x \\<in> hom_deg_set z A; y \\<in> hom_deg_set z A\\<rbrakk>\n       \\<Longrightarrow> x + y \\<in> hom_deg_set z A\n 3. \\<And>c x.\n       x \\<in> hom_deg_set z A \\<Longrightarrow>\n       c \\<cdot> x \\<in> hom_deg_set z A", "from assms"], ["proof (chain)\npicking this:\n  phull.subspace A", "have \"0 \\<in> A\""], ["proof (prove)\nusing this:\n  phull.subspace A\n\ngoal (1 subgoal):\n 1. 0 \\<in> A", "by (rule phull.subspace_0)"], ["proof (state)\nthis:\n  0 \\<in> A\n\ngoal (3 subgoals):\n 1. 0 \\<in> hom_deg_set z A\n 2. \\<And>x y.\n       \\<lbrakk>x \\<in> hom_deg_set z A; y \\<in> hom_deg_set z A\\<rbrakk>\n       \\<Longrightarrow> x + y \\<in> hom_deg_set z A\n 3. \\<And>c x.\n       x \\<in> hom_deg_set z A \\<Longrightarrow>\n       c \\<cdot> x \\<in> hom_deg_set z A", "thus \"0 \\<in> ?A\""], ["proof (prove)\nusing this:\n  0 \\<in> A\n\ngoal (1 subgoal):\n 1. 0 \\<in> hom_deg_set z A", "by (rule zero_in_hom_deg_set)"], ["proof (state)\nthis:\n  0 \\<in> hom_deg_set z A\n\ngoal (2 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> hom_deg_set z A; y \\<in> hom_deg_set z A\\<rbrakk>\n       \\<Longrightarrow> x + y \\<in> hom_deg_set z A\n 2. \\<And>c x.\n       x \\<in> hom_deg_set z A \\<Longrightarrow>\n       c \\<cdot> x \\<in> hom_deg_set z A", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> hom_deg_set z A; y \\<in> hom_deg_set z A\\<rbrakk>\n       \\<Longrightarrow> x + y \\<in> hom_deg_set z A\n 2. \\<And>c x.\n       x \\<in> hom_deg_set z A \\<Longrightarrow>\n       c \\<cdot> x \\<in> hom_deg_set z A", "fix p q"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> hom_deg_set z A; y \\<in> hom_deg_set z A\\<rbrakk>\n       \\<Longrightarrow> x + y \\<in> hom_deg_set z A\n 2. \\<And>c x.\n       x \\<in> hom_deg_set z A \\<Longrightarrow>\n       c \\<cdot> x \\<in> hom_deg_set z A", "assume \"p \\<in> ?A\" and \"q \\<in> ?A\""], ["proof (state)\nthis:\n  p \\<in> hom_deg_set z A\n  q \\<in> hom_deg_set z A\n\ngoal (2 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> hom_deg_set z A; y \\<in> hom_deg_set z A\\<rbrakk>\n       \\<Longrightarrow> x + y \\<in> hom_deg_set z A\n 2. \\<And>c x.\n       x \\<in> hom_deg_set z A \\<Longrightarrow>\n       c \\<cdot> x \\<in> hom_deg_set z A", "with phull.subspace_add"], ["proof (chain)\npicking this:\n  \\<lbrakk>phull.subspace ?S; ?x \\<in> ?S; ?y \\<in> ?S\\<rbrakk>\n  \\<Longrightarrow> ?x + ?y \\<in> ?S\n  p \\<in> hom_deg_set z A\n  q \\<in> hom_deg_set z A", "show \"p + q \\<in> ?A\""], ["proof (prove)\nusing this:\n  \\<lbrakk>phull.subspace ?S; ?x \\<in> ?S; ?y \\<in> ?S\\<rbrakk>\n  \\<Longrightarrow> ?x + ?y \\<in> ?S\n  p \\<in> hom_deg_set z A\n  q \\<in> hom_deg_set z A\n\ngoal (1 subgoal):\n 1. p + q \\<in> hom_deg_set z A", "by (rule hom_deg_set_closed_plus) (rule assms)"], ["proof (state)\nthis:\n  p + q \\<in> hom_deg_set z A\n\ngoal (1 subgoal):\n 1. \\<And>c x.\n       x \\<in> hom_deg_set z A \\<Longrightarrow>\n       c \\<cdot> x \\<in> hom_deg_set z A", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>c x.\n       x \\<in> hom_deg_set z A \\<Longrightarrow>\n       c \\<cdot> x \\<in> hom_deg_set z A", "fix c p"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>c x.\n       x \\<in> hom_deg_set z A \\<Longrightarrow>\n       c \\<cdot> x \\<in> hom_deg_set z A", "assume \"p \\<in> ?A\""], ["proof (state)\nthis:\n  p \\<in> hom_deg_set z A\n\ngoal (1 subgoal):\n 1. \\<And>c x.\n       x \\<in> hom_deg_set z A \\<Longrightarrow>\n       c \\<cdot> x \\<in> hom_deg_set z A", "with phull.subspace_scale"], ["proof (chain)\npicking this:\n  \\<lbrakk>phull.subspace ?S; ?x \\<in> ?S\\<rbrakk>\n  \\<Longrightarrow> ?c \\<cdot> ?x \\<in> ?S\n  p \\<in> hom_deg_set z A", "show \"c \\<cdot> p \\<in> ?A\""], ["proof (prove)\nusing this:\n  \\<lbrakk>phull.subspace ?S; ?x \\<in> ?S\\<rbrakk>\n  \\<Longrightarrow> ?c \\<cdot> ?x \\<in> ?S\n  p \\<in> hom_deg_set z A\n\ngoal (1 subgoal):\n 1. c \\<cdot> p \\<in> hom_deg_set z A", "by (rule hom_deg_set_closed_scalar) (rule assms)"], ["proof (state)\nthis:\n  c \\<cdot> p \\<in> hom_deg_set z A\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma hom_deg_set_Polys_eq_span:\n  \"hom_deg_set z P[X] = phull.span (monomial (1::'a::field) ` deg_sect X z)\" (is \"?A = ?B\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. hom_deg_set z P[X] = phull (monomial (1::'a) ` deg_sect X z)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. hom_deg_set z P[X] \\<subseteq> phull (monomial (1::'a) ` deg_sect X z)\n 2. phull (monomial (1::'a) ` deg_sect X z) \\<subseteq> hom_deg_set z P[X]", "show \"?A \\<subseteq> ?B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. hom_deg_set z P[X] \\<subseteq> phull (monomial (1::'a) ` deg_sect X z)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> hom_deg_set z P[X] \\<Longrightarrow>\n       x \\<in> phull (monomial (1::'a) ` deg_sect X z)", "fix p"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> hom_deg_set z P[X] \\<Longrightarrow>\n       x \\<in> phull (monomial (1::'a) ` deg_sect X z)", "assume \"p \\<in> ?A\""], ["proof (state)\nthis:\n  p \\<in> hom_deg_set z P[X]\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> hom_deg_set z P[X] \\<Longrightarrow>\n       x \\<in> phull (monomial (1::'a) ` deg_sect X z)", "also"], ["proof (state)\nthis:\n  p \\<in> hom_deg_set z P[X]\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> hom_deg_set z P[X] \\<Longrightarrow>\n       x \\<in> phull (monomial (1::'a) ` deg_sect X z)", "from this"], ["proof (chain)\npicking this:\n  p \\<in> hom_deg_set z P[X]", "have \"\\<dots> = {p \\<in> P[X]. homogeneous p \\<and> (p = 0 \\<or> poly_deg p = z)}\""], ["proof (prove)\nusing this:\n  p \\<in> hom_deg_set z P[X]\n\ngoal (1 subgoal):\n 1. hom_deg_set z P[X] =\n    {p \\<in> P[X]. homogeneous p \\<and> (p = 0 \\<or> poly_deg p = z)}", "by (simp only: hom_deg_set_alt_homogeneous_set[OF homogeneous_set_Polys])"], ["proof (state)\nthis:\n  hom_deg_set z P[X] =\n  {p \\<in> P[X]. homogeneous p \\<and> (p = 0 \\<or> poly_deg p = z)}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> hom_deg_set z P[X] \\<Longrightarrow>\n       x \\<in> phull (monomial (1::'a) ` deg_sect X z)", "finally"], ["proof (chain)\npicking this:\n  p \\<in> {p \\<in> P[X]. homogeneous p \\<and> (p = 0 \\<or> poly_deg p = z)}", "have \"p \\<in> P[X]\" and \"homogeneous p\" and \"p \\<noteq> 0 \\<Longrightarrow> poly_deg p = z\""], ["proof (prove)\nusing this:\n  p \\<in> {p \\<in> P[X]. homogeneous p \\<and> (p = 0 \\<or> poly_deg p = z)}\n\ngoal (1 subgoal):\n 1. p \\<in> P[X] &&&\n    homogeneous p &&& (p \\<noteq> 0 \\<Longrightarrow> poly_deg p = z)", "by simp_all"], ["proof (state)\nthis:\n  p \\<in> P[X]\n  homogeneous p\n  p \\<noteq> 0 \\<Longrightarrow> poly_deg p = z\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> hom_deg_set z P[X] \\<Longrightarrow>\n       x \\<in> phull (monomial (1::'a) ` deg_sect X z)", "thus \"p \\<in> ?B\""], ["proof (prove)\nusing this:\n  p \\<in> P[X]\n  homogeneous p\n  p \\<noteq> 0 \\<Longrightarrow> poly_deg p = z\n\ngoal (1 subgoal):\n 1. p \\<in> phull (monomial (1::'a) ` deg_sect X z)", "proof (induct p rule: poly_mapping_plus_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>0 \\<in> P[X]; homogeneous 0;\n     0 \\<noteq> 0 \\<Longrightarrow> poly_deg 0 = z\\<rbrakk>\n    \\<Longrightarrow> 0 \\<in> phull (monomial (1::'a) ` deg_sect X z)\n 2. \\<And>p c t.\n       \\<lbrakk>c \\<noteq> (0::'a); t \\<notin> keys p;\n        \\<lbrakk>p \\<in> P[X]; homogeneous p;\n         p \\<noteq> 0 \\<Longrightarrow> poly_deg p = z\\<rbrakk>\n        \\<Longrightarrow> p \\<in> phull (monomial (1::'a) ` deg_sect X z);\n        monomial c t + p \\<in> P[X]; homogeneous (monomial c t + p);\n        monomial c t + p \\<noteq> 0 \\<Longrightarrow>\n        poly_deg (monomial c t + p) = z\\<rbrakk>\n       \\<Longrightarrow> monomial c t + p\n                         \\<in> phull (monomial (1::'a) ` deg_sect X z)", "case 1"], ["proof (state)\nthis:\n  0 \\<in> P[X]\n  homogeneous 0\n  0 \\<noteq> 0 \\<Longrightarrow> poly_deg 0 = z\n\ngoal (2 subgoals):\n 1. \\<lbrakk>0 \\<in> P[X]; homogeneous 0;\n     0 \\<noteq> 0 \\<Longrightarrow> poly_deg 0 = z\\<rbrakk>\n    \\<Longrightarrow> 0 \\<in> phull (monomial (1::'a) ` deg_sect X z)\n 2. \\<And>p c t.\n       \\<lbrakk>c \\<noteq> (0::'a); t \\<notin> keys p;\n        \\<lbrakk>p \\<in> P[X]; homogeneous p;\n         p \\<noteq> 0 \\<Longrightarrow> poly_deg p = z\\<rbrakk>\n        \\<Longrightarrow> p \\<in> phull (monomial (1::'a) ` deg_sect X z);\n        monomial c t + p \\<in> P[X]; homogeneous (monomial c t + p);\n        monomial c t + p \\<noteq> 0 \\<Longrightarrow>\n        poly_deg (monomial c t + p) = z\\<rbrakk>\n       \\<Longrightarrow> monomial c t + p\n                         \\<in> phull (monomial (1::'a) ` deg_sect X z)", "from phull.span_zero"], ["proof (chain)\npicking this:\n  0 \\<in> phull ?S", "show ?case"], ["proof (prove)\nusing this:\n  0 \\<in> phull ?S\n\ngoal (1 subgoal):\n 1. 0 \\<in> phull (monomial (1::'a) ` deg_sect X z)", "."], ["proof (state)\nthis:\n  0 \\<in> phull (monomial (1::'a) ` deg_sect X z)\n\ngoal (1 subgoal):\n 1. \\<And>p c t.\n       \\<lbrakk>c \\<noteq> (0::'a); t \\<notin> keys p;\n        \\<lbrakk>p \\<in> P[X]; homogeneous p;\n         p \\<noteq> 0 \\<Longrightarrow> poly_deg p = z\\<rbrakk>\n        \\<Longrightarrow> p \\<in> phull (monomial (1::'a) ` deg_sect X z);\n        monomial c t + p \\<in> P[X]; homogeneous (monomial c t + p);\n        monomial c t + p \\<noteq> 0 \\<Longrightarrow>\n        poly_deg (monomial c t + p) = z\\<rbrakk>\n       \\<Longrightarrow> monomial c t + p\n                         \\<in> phull (monomial (1::'a) ` deg_sect X z)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p c t.\n       \\<lbrakk>c \\<noteq> (0::'a); t \\<notin> keys p;\n        \\<lbrakk>p \\<in> P[X]; homogeneous p;\n         p \\<noteq> 0 \\<Longrightarrow> poly_deg p = z\\<rbrakk>\n        \\<Longrightarrow> p \\<in> phull (monomial (1::'a) ` deg_sect X z);\n        monomial c t + p \\<in> P[X]; homogeneous (monomial c t + p);\n        monomial c t + p \\<noteq> 0 \\<Longrightarrow>\n        poly_deg (monomial c t + p) = z\\<rbrakk>\n       \\<Longrightarrow> monomial c t + p\n                         \\<in> phull (monomial (1::'a) ` deg_sect X z)", "case (2 p c t)"], ["proof (state)\nthis:\n  c \\<noteq> (0::'a)\n  t \\<notin> keys p\n  \\<lbrakk>p \\<in> P[X]; homogeneous p;\n   p \\<noteq> 0 \\<Longrightarrow> poly_deg p = z\\<rbrakk>\n  \\<Longrightarrow> p \\<in> phull (monomial (1::'a) ` deg_sect X z)\n  monomial c t + p \\<in> P[X]\n  homogeneous (monomial c t + p)\n  monomial c t + p \\<noteq> 0 \\<Longrightarrow>\n  poly_deg (monomial c t + p) = z\n\ngoal (1 subgoal):\n 1. \\<And>p c t.\n       \\<lbrakk>c \\<noteq> (0::'a); t \\<notin> keys p;\n        \\<lbrakk>p \\<in> P[X]; homogeneous p;\n         p \\<noteq> 0 \\<Longrightarrow> poly_deg p = z\\<rbrakk>\n        \\<Longrightarrow> p \\<in> phull (monomial (1::'a) ` deg_sect X z);\n        monomial c t + p \\<in> P[X]; homogeneous (monomial c t + p);\n        monomial c t + p \\<noteq> 0 \\<Longrightarrow>\n        poly_deg (monomial c t + p) = z\\<rbrakk>\n       \\<Longrightarrow> monomial c t + p\n                         \\<in> phull (monomial (1::'a) ` deg_sect X z)", "let ?m = \"monomial c t\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p c t.\n       \\<lbrakk>c \\<noteq> (0::'a); t \\<notin> keys p;\n        \\<lbrakk>p \\<in> P[X]; homogeneous p;\n         p \\<noteq> 0 \\<Longrightarrow> poly_deg p = z\\<rbrakk>\n        \\<Longrightarrow> p \\<in> phull (monomial (1::'a) ` deg_sect X z);\n        monomial c t + p \\<in> P[X]; homogeneous (monomial c t + p);\n        monomial c t + p \\<noteq> 0 \\<Longrightarrow>\n        poly_deg (monomial c t + p) = z\\<rbrakk>\n       \\<Longrightarrow> monomial c t + p\n                         \\<in> phull (monomial (1::'a) ` deg_sect X z)", "from 2(1)"], ["proof (chain)\npicking this:\n  c \\<noteq> (0::'a)", "have \"t \\<in> keys ?m\""], ["proof (prove)\nusing this:\n  c \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. t \\<in> keys (monomial c t)", "by simp"], ["proof (state)\nthis:\n  t \\<in> keys (monomial c t)\n\ngoal (1 subgoal):\n 1. \\<And>p c t.\n       \\<lbrakk>c \\<noteq> (0::'a); t \\<notin> keys p;\n        \\<lbrakk>p \\<in> P[X]; homogeneous p;\n         p \\<noteq> 0 \\<Longrightarrow> poly_deg p = z\\<rbrakk>\n        \\<Longrightarrow> p \\<in> phull (monomial (1::'a) ` deg_sect X z);\n        monomial c t + p \\<in> P[X]; homogeneous (monomial c t + p);\n        monomial c t + p \\<noteq> 0 \\<Longrightarrow>\n        poly_deg (monomial c t + p) = z\\<rbrakk>\n       \\<Longrightarrow> monomial c t + p\n                         \\<in> phull (monomial (1::'a) ` deg_sect X z)", "hence \"t \\<in> keys (?m + p)\""], ["proof (prove)\nusing this:\n  t \\<in> keys (monomial c t)\n\ngoal (1 subgoal):\n 1. t \\<in> keys (monomial c t + p)", "using 2(2)"], ["proof (prove)\nusing this:\n  t \\<in> keys (monomial c t)\n  t \\<notin> keys p\n\ngoal (1 subgoal):\n 1. t \\<in> keys (monomial c t + p)", "by (rule in_keys_plusI1)"], ["proof (state)\nthis:\n  t \\<in> keys (monomial c t + p)\n\ngoal (1 subgoal):\n 1. \\<And>p c t.\n       \\<lbrakk>c \\<noteq> (0::'a); t \\<notin> keys p;\n        \\<lbrakk>p \\<in> P[X]; homogeneous p;\n         p \\<noteq> 0 \\<Longrightarrow> poly_deg p = z\\<rbrakk>\n        \\<Longrightarrow> p \\<in> phull (monomial (1::'a) ` deg_sect X z);\n        monomial c t + p \\<in> P[X]; homogeneous (monomial c t + p);\n        monomial c t + p \\<noteq> 0 \\<Longrightarrow>\n        poly_deg (monomial c t + p) = z\\<rbrakk>\n       \\<Longrightarrow> monomial c t + p\n                         \\<in> phull (monomial (1::'a) ` deg_sect X z)", "hence \"?m + p \\<noteq> 0\""], ["proof (prove)\nusing this:\n  t \\<in> keys (monomial c t + p)\n\ngoal (1 subgoal):\n 1. monomial c t + p \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  monomial c t + p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<And>p c t.\n       \\<lbrakk>c \\<noteq> (0::'a); t \\<notin> keys p;\n        \\<lbrakk>p \\<in> P[X]; homogeneous p;\n         p \\<noteq> 0 \\<Longrightarrow> poly_deg p = z\\<rbrakk>\n        \\<Longrightarrow> p \\<in> phull (monomial (1::'a) ` deg_sect X z);\n        monomial c t + p \\<in> P[X]; homogeneous (monomial c t + p);\n        monomial c t + p \\<noteq> 0 \\<Longrightarrow>\n        poly_deg (monomial c t + p) = z\\<rbrakk>\n       \\<Longrightarrow> monomial c t + p\n                         \\<in> phull (monomial (1::'a) ` deg_sect X z)", "hence \"poly_deg (monomial c t + p) = z\""], ["proof (prove)\nusing this:\n  monomial c t + p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. poly_deg (monomial c t + p) = z", "by (rule 2)"], ["proof (state)\nthis:\n  poly_deg (monomial c t + p) = z\n\ngoal (1 subgoal):\n 1. \\<And>p c t.\n       \\<lbrakk>c \\<noteq> (0::'a); t \\<notin> keys p;\n        \\<lbrakk>p \\<in> P[X]; homogeneous p;\n         p \\<noteq> 0 \\<Longrightarrow> poly_deg p = z\\<rbrakk>\n        \\<Longrightarrow> p \\<in> phull (monomial (1::'a) ` deg_sect X z);\n        monomial c t + p \\<in> P[X]; homogeneous (monomial c t + p);\n        monomial c t + p \\<noteq> 0 \\<Longrightarrow>\n        poly_deg (monomial c t + p) = z\\<rbrakk>\n       \\<Longrightarrow> monomial c t + p\n                         \\<in> phull (monomial (1::'a) ` deg_sect X z)", "from 2(4)"], ["proof (chain)\npicking this:\n  monomial c t + p \\<in> P[X]", "have \"keys (?m + p) \\<subseteq> .[X]\""], ["proof (prove)\nusing this:\n  monomial c t + p \\<in> P[X]\n\ngoal (1 subgoal):\n 1. keys (monomial c t + p) \\<subseteq> .[X]", "by (rule PolysD)"], ["proof (state)\nthis:\n  keys (monomial c t + p) \\<subseteq> .[X]\n\ngoal (1 subgoal):\n 1. \\<And>p c t.\n       \\<lbrakk>c \\<noteq> (0::'a); t \\<notin> keys p;\n        \\<lbrakk>p \\<in> P[X]; homogeneous p;\n         p \\<noteq> 0 \\<Longrightarrow> poly_deg p = z\\<rbrakk>\n        \\<Longrightarrow> p \\<in> phull (monomial (1::'a) ` deg_sect X z);\n        monomial c t + p \\<in> P[X]; homogeneous (monomial c t + p);\n        monomial c t + p \\<noteq> 0 \\<Longrightarrow>\n        poly_deg (monomial c t + p) = z\\<rbrakk>\n       \\<Longrightarrow> monomial c t + p\n                         \\<in> phull (monomial (1::'a) ` deg_sect X z)", "with \\<open>t \\<in> keys (?m + p)\\<close>"], ["proof (chain)\npicking this:\n  t \\<in> keys (monomial c t + p)\n  keys (monomial c t + p) \\<subseteq> .[X]", "have \"t \\<in> .[X]\""], ["proof (prove)\nusing this:\n  t \\<in> keys (monomial c t + p)\n  keys (monomial c t + p) \\<subseteq> .[X]\n\ngoal (1 subgoal):\n 1. t \\<in> .[X]", ".."], ["proof (state)\nthis:\n  t \\<in> .[X]\n\ngoal (1 subgoal):\n 1. \\<And>p c t.\n       \\<lbrakk>c \\<noteq> (0::'a); t \\<notin> keys p;\n        \\<lbrakk>p \\<in> P[X]; homogeneous p;\n         p \\<noteq> 0 \\<Longrightarrow> poly_deg p = z\\<rbrakk>\n        \\<Longrightarrow> p \\<in> phull (monomial (1::'a) ` deg_sect X z);\n        monomial c t + p \\<in> P[X]; homogeneous (monomial c t + p);\n        monomial c t + p \\<noteq> 0 \\<Longrightarrow>\n        poly_deg (monomial c t + p) = z\\<rbrakk>\n       \\<Longrightarrow> monomial c t + p\n                         \\<in> phull (monomial (1::'a) ` deg_sect X z)", "hence \"?m \\<in> P[X]\""], ["proof (prove)\nusing this:\n  t \\<in> .[X]\n\ngoal (1 subgoal):\n 1. monomial c t \\<in> P[X]", "by (rule Polys_closed_monomial)"], ["proof (state)\nthis:\n  monomial c t \\<in> P[X]\n\ngoal (1 subgoal):\n 1. \\<And>p c t.\n       \\<lbrakk>c \\<noteq> (0::'a); t \\<notin> keys p;\n        \\<lbrakk>p \\<in> P[X]; homogeneous p;\n         p \\<noteq> 0 \\<Longrightarrow> poly_deg p = z\\<rbrakk>\n        \\<Longrightarrow> p \\<in> phull (monomial (1::'a) ` deg_sect X z);\n        monomial c t + p \\<in> P[X]; homogeneous (monomial c t + p);\n        monomial c t + p \\<noteq> 0 \\<Longrightarrow>\n        poly_deg (monomial c t + p) = z\\<rbrakk>\n       \\<Longrightarrow> monomial c t + p\n                         \\<in> phull (monomial (1::'a) ` deg_sect X z)", "have \"t \\<in> deg_sect X z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t \\<in> deg_sect X z", "proof (rule deg_sectI)"], ["proof (state)\ngoal (2 subgoals):\n 1. t \\<in> .[X]\n 2. deg_pm t = z", "from 2(5) \\<open>t \\<in> keys (?m + p)\\<close>"], ["proof (chain)\npicking this:\n  homogeneous (monomial c t + p)\n  t \\<in> keys (monomial c t + p)", "have \"deg_pm t = poly_deg (?m + p)\""], ["proof (prove)\nusing this:\n  homogeneous (monomial c t + p)\n  t \\<in> keys (monomial c t + p)\n\ngoal (1 subgoal):\n 1. deg_pm t = poly_deg (monomial c t + p)", "by (rule homogeneousD_poly_deg)"], ["proof (state)\nthis:\n  deg_pm t = poly_deg (monomial c t + p)\n\ngoal (2 subgoals):\n 1. t \\<in> .[X]\n 2. deg_pm t = z", "also"], ["proof (state)\nthis:\n  deg_pm t = poly_deg (monomial c t + p)\n\ngoal (2 subgoals):\n 1. t \\<in> .[X]\n 2. deg_pm t = z", "have \"\\<dots> = z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. poly_deg (monomial c t + p) = z", "by fact"], ["proof (state)\nthis:\n  poly_deg (monomial c t + p) = z\n\ngoal (2 subgoals):\n 1. t \\<in> .[X]\n 2. deg_pm t = z", "finally"], ["proof (chain)\npicking this:\n  deg_pm t = z", "show \"deg_pm t = z\""], ["proof (prove)\nusing this:\n  deg_pm t = z\n\ngoal (1 subgoal):\n 1. deg_pm t = z", "."], ["proof (state)\nthis:\n  deg_pm t = z\n\ngoal (1 subgoal):\n 1. t \\<in> .[X]", "qed fact"], ["proof (state)\nthis:\n  t \\<in> deg_sect X z\n\ngoal (1 subgoal):\n 1. \\<And>p c t.\n       \\<lbrakk>c \\<noteq> (0::'a); t \\<notin> keys p;\n        \\<lbrakk>p \\<in> P[X]; homogeneous p;\n         p \\<noteq> 0 \\<Longrightarrow> poly_deg p = z\\<rbrakk>\n        \\<Longrightarrow> p \\<in> phull (monomial (1::'a) ` deg_sect X z);\n        monomial c t + p \\<in> P[X]; homogeneous (monomial c t + p);\n        monomial c t + p \\<noteq> 0 \\<Longrightarrow>\n        poly_deg (monomial c t + p) = z\\<rbrakk>\n       \\<Longrightarrow> monomial c t + p\n                         \\<in> phull (monomial (1::'a) ` deg_sect X z)", "hence \"monomial 1 t \\<in> monomial 1 ` deg_sect X z\""], ["proof (prove)\nusing this:\n  t \\<in> deg_sect X z\n\ngoal (1 subgoal):\n 1. monomial (1::'c) t \\<in> monomial (1::'c) ` deg_sect X z", "by (rule imageI)"], ["proof (state)\nthis:\n  monomial (1::?'c1) t \\<in> monomial (1::?'c1) ` deg_sect X z\n\ngoal (1 subgoal):\n 1. \\<And>p c t.\n       \\<lbrakk>c \\<noteq> (0::'a); t \\<notin> keys p;\n        \\<lbrakk>p \\<in> P[X]; homogeneous p;\n         p \\<noteq> 0 \\<Longrightarrow> poly_deg p = z\\<rbrakk>\n        \\<Longrightarrow> p \\<in> phull (monomial (1::'a) ` deg_sect X z);\n        monomial c t + p \\<in> P[X]; homogeneous (monomial c t + p);\n        monomial c t + p \\<noteq> 0 \\<Longrightarrow>\n        poly_deg (monomial c t + p) = z\\<rbrakk>\n       \\<Longrightarrow> monomial c t + p\n                         \\<in> phull (monomial (1::'a) ` deg_sect X z)", "hence \"monomial 1 t \\<in> ?B\""], ["proof (prove)\nusing this:\n  monomial (1::?'c1) t \\<in> monomial (1::?'c1) ` deg_sect X z\n\ngoal (1 subgoal):\n 1. monomial (1::'a) t \\<in> phull (monomial (1::'a) ` deg_sect X z)", "by (rule phull.span_base)"], ["proof (state)\nthis:\n  monomial (1::'a) t \\<in> phull (monomial (1::'a) ` deg_sect X z)\n\ngoal (1 subgoal):\n 1. \\<And>p c t.\n       \\<lbrakk>c \\<noteq> (0::'a); t \\<notin> keys p;\n        \\<lbrakk>p \\<in> P[X]; homogeneous p;\n         p \\<noteq> 0 \\<Longrightarrow> poly_deg p = z\\<rbrakk>\n        \\<Longrightarrow> p \\<in> phull (monomial (1::'a) ` deg_sect X z);\n        monomial c t + p \\<in> P[X]; homogeneous (monomial c t + p);\n        monomial c t + p \\<noteq> 0 \\<Longrightarrow>\n        poly_deg (monomial c t + p) = z\\<rbrakk>\n       \\<Longrightarrow> monomial c t + p\n                         \\<in> phull (monomial (1::'a) ` deg_sect X z)", "hence \"c \\<cdot> monomial 1 t \\<in> ?B\""], ["proof (prove)\nusing this:\n  monomial (1::'a) t \\<in> phull (monomial (1::'a) ` deg_sect X z)\n\ngoal (1 subgoal):\n 1. c \\<cdot> monomial (1::'a) t\n    \\<in> phull (monomial (1::'a) ` deg_sect X z)", "by (rule phull.span_scale)"], ["proof (state)\nthis:\n  c \\<cdot> monomial (1::'a) t \\<in> phull (monomial (1::'a) ` deg_sect X z)\n\ngoal (1 subgoal):\n 1. \\<And>p c t.\n       \\<lbrakk>c \\<noteq> (0::'a); t \\<notin> keys p;\n        \\<lbrakk>p \\<in> P[X]; homogeneous p;\n         p \\<noteq> 0 \\<Longrightarrow> poly_deg p = z\\<rbrakk>\n        \\<Longrightarrow> p \\<in> phull (monomial (1::'a) ` deg_sect X z);\n        monomial c t + p \\<in> P[X]; homogeneous (monomial c t + p);\n        monomial c t + p \\<noteq> 0 \\<Longrightarrow>\n        poly_deg (monomial c t + p) = z\\<rbrakk>\n       \\<Longrightarrow> monomial c t + p\n                         \\<in> phull (monomial (1::'a) ` deg_sect X z)", "hence \"?m \\<in> ?B\""], ["proof (prove)\nusing this:\n  c \\<cdot> monomial (1::'a) t \\<in> phull (monomial (1::'a) ` deg_sect X z)\n\ngoal (1 subgoal):\n 1. monomial c t \\<in> phull (monomial (1::'a) ` deg_sect X z)", "by simp"], ["proof (state)\nthis:\n  monomial c t \\<in> phull (monomial (1::'a) ` deg_sect X z)\n\ngoal (1 subgoal):\n 1. \\<And>p c t.\n       \\<lbrakk>c \\<noteq> (0::'a); t \\<notin> keys p;\n        \\<lbrakk>p \\<in> P[X]; homogeneous p;\n         p \\<noteq> 0 \\<Longrightarrow> poly_deg p = z\\<rbrakk>\n        \\<Longrightarrow> p \\<in> phull (monomial (1::'a) ` deg_sect X z);\n        monomial c t + p \\<in> P[X]; homogeneous (monomial c t + p);\n        monomial c t + p \\<noteq> 0 \\<Longrightarrow>\n        poly_deg (monomial c t + p) = z\\<rbrakk>\n       \\<Longrightarrow> monomial c t + p\n                         \\<in> phull (monomial (1::'a) ` deg_sect X z)", "moreover"], ["proof (state)\nthis:\n  monomial c t \\<in> phull (monomial (1::'a) ` deg_sect X z)\n\ngoal (1 subgoal):\n 1. \\<And>p c t.\n       \\<lbrakk>c \\<noteq> (0::'a); t \\<notin> keys p;\n        \\<lbrakk>p \\<in> P[X]; homogeneous p;\n         p \\<noteq> 0 \\<Longrightarrow> poly_deg p = z\\<rbrakk>\n        \\<Longrightarrow> p \\<in> phull (monomial (1::'a) ` deg_sect X z);\n        monomial c t + p \\<in> P[X]; homogeneous (monomial c t + p);\n        monomial c t + p \\<noteq> 0 \\<Longrightarrow>\n        poly_deg (monomial c t + p) = z\\<rbrakk>\n       \\<Longrightarrow> monomial c t + p\n                         \\<in> phull (monomial (1::'a) ` deg_sect X z)", "have \"p \\<in> ?B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<in> phull (monomial (1::'a) ` deg_sect X z)", "proof (rule 2)"], ["proof (state)\ngoal (3 subgoals):\n 1. p \\<in> P[X]\n 2. homogeneous p\n 3. p \\<noteq> 0 \\<Longrightarrow> poly_deg p = z", "from 2(4) \\<open>?m \\<in> P[X]\\<close>"], ["proof (chain)\npicking this:\n  monomial c t + p \\<in> P[X]\n  monomial c t \\<in> P[X]", "have \"(?m + p) - ?m \\<in> P[X]\""], ["proof (prove)\nusing this:\n  monomial c t + p \\<in> P[X]\n  monomial c t \\<in> P[X]\n\ngoal (1 subgoal):\n 1. monomial c t + p - monomial c t \\<in> P[X]", "by (rule Polys_closed_minus)"], ["proof (state)\nthis:\n  monomial c t + p - monomial c t \\<in> P[X]\n\ngoal (3 subgoals):\n 1. p \\<in> P[X]\n 2. homogeneous p\n 3. p \\<noteq> 0 \\<Longrightarrow> poly_deg p = z", "thus \"p \\<in> P[X]\""], ["proof (prove)\nusing this:\n  monomial c t + p - monomial c t \\<in> P[X]\n\ngoal (1 subgoal):\n 1. p \\<in> P[X]", "by simp"], ["proof (state)\nthis:\n  p \\<in> P[X]\n\ngoal (2 subgoals):\n 1. homogeneous p\n 2. p \\<noteq> 0 \\<Longrightarrow> poly_deg p = z", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. homogeneous p\n 2. p \\<noteq> 0 \\<Longrightarrow> poly_deg p = z", "have 1: \"deg_pm s = z\" if \"s \\<in> keys p\" for s"], ["proof (prove)\ngoal (1 subgoal):\n 1. deg_pm s = z", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. deg_pm s = z", "from that 2(2)"], ["proof (chain)\npicking this:\n  s \\<in> keys p\n  t \\<notin> keys p", "have \"s \\<noteq> t\""], ["proof (prove)\nusing this:\n  s \\<in> keys p\n  t \\<notin> keys p\n\ngoal (1 subgoal):\n 1. s \\<noteq> t", "by blast"], ["proof (state)\nthis:\n  s \\<noteq> t\n\ngoal (1 subgoal):\n 1. deg_pm s = z", "hence \"s \\<notin> keys ?m\""], ["proof (prove)\nusing this:\n  s \\<noteq> t\n\ngoal (1 subgoal):\n 1. s \\<notin> keys (monomial c t)", "by simp"], ["proof (state)\nthis:\n  s \\<notin> keys (monomial c t)\n\ngoal (1 subgoal):\n 1. deg_pm s = z", "with that"], ["proof (chain)\npicking this:\n  s \\<in> keys p\n  s \\<notin> keys (monomial c t)", "have \"s \\<in> keys (?m + p)\""], ["proof (prove)\nusing this:\n  s \\<in> keys p\n  s \\<notin> keys (monomial c t)\n\ngoal (1 subgoal):\n 1. s \\<in> keys (monomial c t + p)", "by (rule in_keys_plusI2)"], ["proof (state)\nthis:\n  s \\<in> keys (monomial c t + p)\n\ngoal (1 subgoal):\n 1. deg_pm s = z", "with 2(5)"], ["proof (chain)\npicking this:\n  homogeneous (monomial c t + p)\n  s \\<in> keys (monomial c t + p)", "have \"deg_pm s = poly_deg (?m + p)\""], ["proof (prove)\nusing this:\n  homogeneous (monomial c t + p)\n  s \\<in> keys (monomial c t + p)\n\ngoal (1 subgoal):\n 1. deg_pm s = poly_deg (monomial c t + p)", "by (rule homogeneousD_poly_deg)"], ["proof (state)\nthis:\n  deg_pm s = poly_deg (monomial c t + p)\n\ngoal (1 subgoal):\n 1. deg_pm s = z", "also"], ["proof (state)\nthis:\n  deg_pm s = poly_deg (monomial c t + p)\n\ngoal (1 subgoal):\n 1. deg_pm s = z", "have \"\\<dots> = z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. poly_deg (monomial c t + p) = z", "by fact"], ["proof (state)\nthis:\n  poly_deg (monomial c t + p) = z\n\ngoal (1 subgoal):\n 1. deg_pm s = z", "finally"], ["proof (chain)\npicking this:\n  deg_pm s = z", "show ?thesis"], ["proof (prove)\nusing this:\n  deg_pm s = z\n\ngoal (1 subgoal):\n 1. deg_pm s = z", "."], ["proof (state)\nthis:\n  deg_pm s = z\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?s1 \\<in> keys p \\<Longrightarrow> deg_pm ?s1 = z\n\ngoal (2 subgoals):\n 1. homogeneous p\n 2. p \\<noteq> 0 \\<Longrightarrow> poly_deg p = z", "show \"homogeneous p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. homogeneous p", "by (rule homogeneousI) (simp add: 1)"], ["proof (state)\nthis:\n  homogeneous p\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow> poly_deg p = z", "assume \"p \\<noteq> 0\""], ["proof (state)\nthis:\n  p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow> poly_deg p = z", "show \"poly_deg p = z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. poly_deg p = z", "proof (rule antisym)"], ["proof (state)\ngoal (2 subgoals):\n 1. poly_deg p \\<le> z\n 2. z \\<le> poly_deg p", "show \"poly_deg p \\<le> z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. poly_deg p \\<le> z", "by (rule poly_deg_leI) (simp add: 1)"], ["proof (state)\nthis:\n  poly_deg p \\<le> z\n\ngoal (1 subgoal):\n 1. z \\<le> poly_deg p", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. z \\<le> poly_deg p", "from \\<open>p \\<noteq> 0\\<close>"], ["proof (chain)\npicking this:\n  p \\<noteq> 0", "have \"keys p \\<noteq> {}\""], ["proof (prove)\nusing this:\n  p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. keys p \\<noteq> {}", "by simp"], ["proof (state)\nthis:\n  keys p \\<noteq> {}\n\ngoal (1 subgoal):\n 1. z \\<le> poly_deg p", "then"], ["proof (chain)\npicking this:\n  keys p \\<noteq> {}", "obtain s where \"s \\<in> keys p\""], ["proof (prove)\nusing this:\n  keys p \\<noteq> {}\n\ngoal (1 subgoal):\n 1. (\\<And>s. s \\<in> keys p \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  s \\<in> keys p\n\ngoal (1 subgoal):\n 1. z \\<le> poly_deg p", "hence \"z = deg_pm s\""], ["proof (prove)\nusing this:\n  s \\<in> keys p\n\ngoal (1 subgoal):\n 1. z = deg_pm s", "by (simp only: 1)"], ["proof (state)\nthis:\n  z = deg_pm s\n\ngoal (1 subgoal):\n 1. z \\<le> poly_deg p", "also"], ["proof (state)\nthis:\n  z = deg_pm s\n\ngoal (1 subgoal):\n 1. z \\<le> poly_deg p", "from \\<open>s \\<in> keys p\\<close>"], ["proof (chain)\npicking this:\n  s \\<in> keys p", "have \"\\<dots> \\<le> poly_deg p\""], ["proof (prove)\nusing this:\n  s \\<in> keys p\n\ngoal (1 subgoal):\n 1. deg_pm s \\<le> poly_deg p", "by (rule poly_deg_max_keys)"], ["proof (state)\nthis:\n  deg_pm s \\<le> poly_deg p\n\ngoal (1 subgoal):\n 1. z \\<le> poly_deg p", "finally"], ["proof (chain)\npicking this:\n  z \\<le> poly_deg p", "show \"z \\<le> poly_deg p\""], ["proof (prove)\nusing this:\n  z \\<le> poly_deg p\n\ngoal (1 subgoal):\n 1. z \\<le> poly_deg p", "."], ["proof (state)\nthis:\n  z \\<le> poly_deg p\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  poly_deg p = z\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  p \\<in> phull (monomial (1::'a) ` deg_sect X z)\n\ngoal (1 subgoal):\n 1. \\<And>p c t.\n       \\<lbrakk>c \\<noteq> (0::'a); t \\<notin> keys p;\n        \\<lbrakk>p \\<in> P[X]; homogeneous p;\n         p \\<noteq> 0 \\<Longrightarrow> poly_deg p = z\\<rbrakk>\n        \\<Longrightarrow> p \\<in> phull (monomial (1::'a) ` deg_sect X z);\n        monomial c t + p \\<in> P[X]; homogeneous (monomial c t + p);\n        monomial c t + p \\<noteq> 0 \\<Longrightarrow>\n        poly_deg (monomial c t + p) = z\\<rbrakk>\n       \\<Longrightarrow> monomial c t + p\n                         \\<in> phull (monomial (1::'a) ` deg_sect X z)", "ultimately"], ["proof (chain)\npicking this:\n  monomial c t \\<in> phull (monomial (1::'a) ` deg_sect X z)\n  p \\<in> phull (monomial (1::'a) ` deg_sect X z)", "show ?case"], ["proof (prove)\nusing this:\n  monomial c t \\<in> phull (monomial (1::'a) ` deg_sect X z)\n  p \\<in> phull (monomial (1::'a) ` deg_sect X z)\n\ngoal (1 subgoal):\n 1. monomial c t + p \\<in> phull (monomial (1::'a) ` deg_sect X z)", "by (rule phull.span_add)"], ["proof (state)\nthis:\n  monomial c t + p \\<in> phull (monomial (1::'a) ` deg_sect X z)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  p \\<in> phull (monomial (1::'a) ` deg_sect X z)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  hom_deg_set z P[X] \\<subseteq> phull (monomial (1::'a) ` deg_sect X z)\n\ngoal (1 subgoal):\n 1. phull (monomial (1::'a) ` deg_sect X z) \\<subseteq> hom_deg_set z P[X]", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. phull (monomial (1::'a) ` deg_sect X z) \\<subseteq> hom_deg_set z P[X]", "show \"?B \\<subseteq> ?A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. phull (monomial (1::'a) ` deg_sect X z) \\<subseteq> hom_deg_set z P[X]", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> phull (monomial (1::'a) ` deg_sect X z) \\<Longrightarrow>\n       x \\<in> hom_deg_set z P[X]", "fix p"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> phull (monomial (1::'a) ` deg_sect X z) \\<Longrightarrow>\n       x \\<in> hom_deg_set z P[X]", "assume \"p \\<in> ?B\""], ["proof (state)\nthis:\n  p \\<in> phull (monomial (1::'a) ` deg_sect X z)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> phull (monomial (1::'a) ` deg_sect X z) \\<Longrightarrow>\n       x \\<in> hom_deg_set z P[X]", "then"], ["proof (chain)\npicking this:\n  p \\<in> phull (monomial (1::'a) ` deg_sect X z)", "obtain M u where \"M \\<subseteq> monomial 1 ` deg_sect X z\" and \"finite M\" and p: \"p = (\\<Sum>m\\<in>M. u m \\<cdot> m)\""], ["proof (prove)\nusing this:\n  p \\<in> phull (monomial (1::'a) ` deg_sect X z)\n\ngoal (1 subgoal):\n 1. (\\<And>M u.\n        \\<lbrakk>M \\<subseteq> monomial (1::'a) ` deg_sect X z; finite M;\n         p = (\\<Sum>m\\<in>M. u m \\<cdot> m)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: phull.span_explicit)"], ["proof (state)\nthis:\n  M \\<subseteq> monomial (1::'a) ` deg_sect X z\n  finite M\n  p = (\\<Sum>m\\<in>M. u m \\<cdot> m)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> phull (monomial (1::'a) ` deg_sect X z) \\<Longrightarrow>\n       x \\<in> hom_deg_set z P[X]", "from this(1)"], ["proof (chain)\npicking this:\n  M \\<subseteq> monomial (1::'a) ` deg_sect X z", "obtain T where \"T \\<subseteq> deg_sect X z\" and M: \"M = monomial 1 ` T\"\n      and inj: \"inj_on (monomial (1::'a)) T\""], ["proof (prove)\nusing this:\n  M \\<subseteq> monomial (1::'a) ` deg_sect X z\n\ngoal (1 subgoal):\n 1. (\\<And>T.\n        \\<lbrakk>T \\<subseteq> deg_sect X z; M = monomial (1::'a) ` T;\n         inj_on (monomial (1::'a)) T\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule subset_imageE_inj)"], ["proof (state)\nthis:\n  T \\<subseteq> deg_sect X z\n  M = monomial (1::'a) ` T\n  inj_on (monomial (1::'a)) T\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> phull (monomial (1::'a) ` deg_sect X z) \\<Longrightarrow>\n       x \\<in> hom_deg_set z P[X]", "define c where \"c = (\\<lambda>t. u (monomial 1 t))\""], ["proof (state)\nthis:\n  c = (\\<lambda>t. u (monomial (1::'a) t))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> phull (monomial (1::'a) ` deg_sect X z) \\<Longrightarrow>\n       x \\<in> hom_deg_set z P[X]", "from inj"], ["proof (chain)\npicking this:\n  inj_on (monomial (1::'a)) T", "have \"p = (\\<Sum>t\\<in>T. monomial (c t) t)\""], ["proof (prove)\nusing this:\n  inj_on (monomial (1::'a)) T\n\ngoal (1 subgoal):\n 1. p = (\\<Sum>t\\<in>T. monomial (c t) t)", "by (simp add: p M sum.reindex c_def)"], ["proof (state)\nthis:\n  p = (\\<Sum>t\\<in>T. monomial (c t) t)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> phull (monomial (1::'a) ` deg_sect X z) \\<Longrightarrow>\n       x \\<in> hom_deg_set z P[X]", "also"], ["proof (state)\nthis:\n  p = (\\<Sum>t\\<in>T. monomial (c t) t)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> phull (monomial (1::'a) ` deg_sect X z) \\<Longrightarrow>\n       x \\<in> hom_deg_set z P[X]", "have \"\\<dots> \\<in> ?A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>t\\<in>T. monomial (c t) t) \\<in> hom_deg_set z P[X]", "proof (intro hom_deg_set_closed_sum zero_in_Polys Polys_closed_plus)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>a1 a2.\n       \\<lbrakk>a1 \\<in> P[X]; a2 \\<in> P[X]\\<rbrakk>\n       \\<Longrightarrow> a1 \\<in> P[X]\n 2. \\<And>a1 a2.\n       \\<lbrakk>a1 \\<in> P[X]; a2 \\<in> P[X]\\<rbrakk>\n       \\<Longrightarrow> a2 \\<in> P[X]\n 3. \\<And>i.\n       i \\<in> T \\<Longrightarrow> monomial (c i) i \\<in> hom_deg_set z P[X]", "fix t"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>a1 a2.\n       \\<lbrakk>a1 \\<in> P[X]; a2 \\<in> P[X]\\<rbrakk>\n       \\<Longrightarrow> a1 \\<in> P[X]\n 2. \\<And>a1 a2.\n       \\<lbrakk>a1 \\<in> P[X]; a2 \\<in> P[X]\\<rbrakk>\n       \\<Longrightarrow> a2 \\<in> P[X]\n 3. \\<And>i.\n       i \\<in> T \\<Longrightarrow> monomial (c i) i \\<in> hom_deg_set z P[X]", "assume \"t \\<in> T\""], ["proof (state)\nthis:\n  t \\<in> T\n\ngoal (3 subgoals):\n 1. \\<And>a1 a2.\n       \\<lbrakk>a1 \\<in> P[X]; a2 \\<in> P[X]\\<rbrakk>\n       \\<Longrightarrow> a1 \\<in> P[X]\n 2. \\<And>a1 a2.\n       \\<lbrakk>a1 \\<in> P[X]; a2 \\<in> P[X]\\<rbrakk>\n       \\<Longrightarrow> a2 \\<in> P[X]\n 3. \\<And>i.\n       i \\<in> T \\<Longrightarrow> monomial (c i) i \\<in> hom_deg_set z P[X]", "hence \"t \\<in> deg_sect X z\""], ["proof (prove)\nusing this:\n  t \\<in> T\n\ngoal (1 subgoal):\n 1. t \\<in> deg_sect X z", "using \\<open>T \\<subseteq> deg_sect X z\\<close>"], ["proof (prove)\nusing this:\n  t \\<in> T\n  T \\<subseteq> deg_sect X z\n\ngoal (1 subgoal):\n 1. t \\<in> deg_sect X z", ".."], ["proof (state)\nthis:\n  t \\<in> deg_sect X z\n\ngoal (3 subgoals):\n 1. \\<And>a1 a2.\n       \\<lbrakk>a1 \\<in> P[X]; a2 \\<in> P[X]\\<rbrakk>\n       \\<Longrightarrow> a1 \\<in> P[X]\n 2. \\<And>a1 a2.\n       \\<lbrakk>a1 \\<in> P[X]; a2 \\<in> P[X]\\<rbrakk>\n       \\<Longrightarrow> a2 \\<in> P[X]\n 3. \\<And>i.\n       i \\<in> T \\<Longrightarrow> monomial (c i) i \\<in> hom_deg_set z P[X]", "hence \"t \\<in> .[X]\" and eq: \"deg_pm t = z\""], ["proof (prove)\nusing this:\n  t \\<in> deg_sect X z\n\ngoal (1 subgoal):\n 1. t \\<in> .[X] &&& deg_pm t = z", "by (rule deg_sectD)+"], ["proof (state)\nthis:\n  t \\<in> .[X]\n  deg_pm t = z\n\ngoal (3 subgoals):\n 1. \\<And>a1 a2.\n       \\<lbrakk>a1 \\<in> P[X]; a2 \\<in> P[X]\\<rbrakk>\n       \\<Longrightarrow> a1 \\<in> P[X]\n 2. \\<And>a1 a2.\n       \\<lbrakk>a1 \\<in> P[X]; a2 \\<in> P[X]\\<rbrakk>\n       \\<Longrightarrow> a2 \\<in> P[X]\n 3. \\<And>i.\n       i \\<in> T \\<Longrightarrow> monomial (c i) i \\<in> hom_deg_set z P[X]", "from this(1)"], ["proof (chain)\npicking this:\n  t \\<in> .[X]", "have \"monomial (c t) t \\<in> P[X]\" (is \"?m \\<in> _\")"], ["proof (prove)\nusing this:\n  t \\<in> .[X]\n\ngoal (1 subgoal):\n 1. monomial (c t) t \\<in> P[X]", "by (rule Polys_closed_monomial)"], ["proof (state)\nthis:\n  monomial (c t) t \\<in> P[X]\n\ngoal (3 subgoals):\n 1. \\<And>a1 a2.\n       \\<lbrakk>a1 \\<in> P[X]; a2 \\<in> P[X]\\<rbrakk>\n       \\<Longrightarrow> a1 \\<in> P[X]\n 2. \\<And>a1 a2.\n       \\<lbrakk>a1 \\<in> P[X]; a2 \\<in> P[X]\\<rbrakk>\n       \\<Longrightarrow> a2 \\<in> P[X]\n 3. \\<And>i.\n       i \\<in> T \\<Longrightarrow> monomial (c i) i \\<in> hom_deg_set z P[X]", "thus \"?m \\<in> ?A\""], ["proof (prove)\nusing this:\n  monomial (c t) t \\<in> P[X]\n\ngoal (1 subgoal):\n 1. monomial (c t) t \\<in> hom_deg_set z P[X]", "by (simp add: hom_deg_set_alt_homogeneous_set[OF homogeneous_set_Polys] poly_deg_monomial\n            monomial_0_iff eq)"], ["proof (state)\nthis:\n  monomial (c t) t \\<in> hom_deg_set z P[X]\n\ngoal (2 subgoals):\n 1. \\<And>a1 a2.\n       \\<lbrakk>a1 \\<in> P[X]; a2 \\<in> P[X]\\<rbrakk>\n       \\<Longrightarrow> a1 \\<in> P[X]\n 2. \\<And>a1 a2.\n       \\<lbrakk>a1 \\<in> P[X]; a2 \\<in> P[X]\\<rbrakk>\n       \\<Longrightarrow> a2 \\<in> P[X]", "qed"], ["proof (state)\nthis:\n  (\\<Sum>t\\<in>T. monomial (c t) t) \\<in> hom_deg_set z P[X]\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> phull (monomial (1::'a) ` deg_sect X z) \\<Longrightarrow>\n       x \\<in> hom_deg_set z P[X]", "finally"], ["proof (chain)\npicking this:\n  p \\<in> hom_deg_set z P[X]", "show \"p \\<in> ?A\""], ["proof (prove)\nusing this:\n  p \\<in> hom_deg_set z P[X]\n\ngoal (1 subgoal):\n 1. p \\<in> hom_deg_set z P[X]", "."], ["proof (state)\nthis:\n  p \\<in> hom_deg_set z P[X]\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  phull (monomial (1::'a) ` deg_sect X z) \\<subseteq> hom_deg_set z P[X]\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>(Projective) Hilbert Function\\<close>"], ["", "interpretation phull: vector_space map_scale"], ["proof (prove)\ngoal (1 subgoal):\n 1. vector_space (\\<cdot>)", "apply standard"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>a x y. a \\<cdot> (x + y) = a \\<cdot> x + a \\<cdot> y\n 2. \\<And>a b x. (a + b) \\<cdot> x = a \\<cdot> x + b \\<cdot> x\n 3. \\<And>a b x. a \\<cdot> b \\<cdot> x = (a * b) \\<cdot> x\n 4. \\<And>x. (1::'a) \\<cdot> x = x", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. a_ \\<cdot> (x_ + y_) = a_ \\<cdot> x_ + a_ \\<cdot> y_", "by (fact map_scale_distrib_left)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a b x. (a + b) \\<cdot> x = a \\<cdot> x + b \\<cdot> x\n 2. \\<And>a b x. a \\<cdot> b \\<cdot> x = (a * b) \\<cdot> x\n 3. \\<And>x. (1::'a) \\<cdot> x = x", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. (a_ + b_) \\<cdot> x_ = a_ \\<cdot> x_ + b_ \\<cdot> x_", "by (fact map_scale_distrib_right)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b x. a \\<cdot> b \\<cdot> x = (a * b) \\<cdot> x\n 2. \\<And>x. (1::'a) \\<cdot> x = x", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. a_ \\<cdot> b_ \\<cdot> x_ = (a_ * b_) \\<cdot> x_", "by (fact map_scale_assoc)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x. (1::'a) \\<cdot> x = x", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. (1::'a) \\<cdot> x_ = x_", "by (fact map_scale_one_left)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "definition Hilbert_fun :: \"(('x \\<Rightarrow>\\<^sub>0 nat) \\<Rightarrow>\\<^sub>0 'a::field) set \\<Rightarrow> nat \\<Rightarrow> nat\"\n  where \"Hilbert_fun A z = phull.dim (hom_deg_set z A)\""], ["", "lemma Hilbert_fun_empty [simp]: \"Hilbert_fun {} = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Hilbert_fun {} = 0", "by (rule ext) (simp add: Hilbert_fun_def hom_deg_set_def)"], ["", "lemma Hilbert_fun_zero [simp]: \"Hilbert_fun {0} = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Hilbert_fun {0} = 0", "by (rule ext) (simp add: Hilbert_fun_def hom_deg_set_def)"], ["", "lemma Hilbert_fun_direct_decomp:\n  assumes \"finite X\" and \"A \\<subseteq> P[X]\" and \"direct_decomp (A::(('x::countable \\<Rightarrow>\\<^sub>0 nat) \\<Rightarrow>\\<^sub>0 'a::field) set) ps\"\n    and \"\\<And>s. s \\<in> set ps \\<Longrightarrow> homogeneous_set s\" and \"\\<And>s. s \\<in> set ps \\<Longrightarrow> phull.subspace s\"\n  shows \"Hilbert_fun A z = (\\<Sum>p\\<in>set ps. Hilbert_fun p z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Hilbert_fun A z = (\\<Sum>p\\<in>set ps. Hilbert_fun p z)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Hilbert_fun A z = (\\<Sum>p\\<in>set ps. Hilbert_fun p z)", "from assms(3, 4)"], ["proof (chain)\npicking this:\n  direct_decomp A ps\n  ?s \\<in> set ps \\<Longrightarrow> homogeneous_set ?s", "have dd: \"direct_decomp (hom_deg_set z A) (map (hom_deg_set z) ps)\""], ["proof (prove)\nusing this:\n  direct_decomp A ps\n  ?s \\<in> set ps \\<Longrightarrow> homogeneous_set ?s\n\ngoal (1 subgoal):\n 1. direct_decomp (hom_deg_set z A) (map (hom_deg_set z) ps)", "by (rule direct_decomp_hom_deg_set)"], ["proof (state)\nthis:\n  direct_decomp (hom_deg_set z A) (map (hom_deg_set z) ps)\n\ngoal (1 subgoal):\n 1. Hilbert_fun A z = (\\<Sum>p\\<in>set ps. Hilbert_fun p z)", "have \"Hilbert_fun A z = phull.dim (hom_deg_set z A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Hilbert_fun A z = phull.dim (hom_deg_set z A)", "by (fact Hilbert_fun_def)"], ["proof (state)\nthis:\n  Hilbert_fun A z = phull.dim (hom_deg_set z A)\n\ngoal (1 subgoal):\n 1. Hilbert_fun A z = (\\<Sum>p\\<in>set ps. Hilbert_fun p z)", "also"], ["proof (state)\nthis:\n  Hilbert_fun A z = phull.dim (hom_deg_set z A)\n\ngoal (1 subgoal):\n 1. Hilbert_fun A z = (\\<Sum>p\\<in>set ps. Hilbert_fun p z)", "from dd"], ["proof (chain)\npicking this:\n  direct_decomp (hom_deg_set z A) (map (hom_deg_set z) ps)", "have \"\\<dots> = sum phull.dim (set (map (hom_deg_set z) ps))\""], ["proof (prove)\nusing this:\n  direct_decomp (hom_deg_set z A) (map (hom_deg_set z) ps)\n\ngoal (1 subgoal):\n 1. phull.dim (hom_deg_set z A) =\n    sum phull.dim (set (map (hom_deg_set z) ps))", "proof (rule phull.dim_direct_decomp)"], ["proof (state)\ngoal (3 subgoals):\n 1. finite ?B\n 2. hom_deg_set z A \\<subseteq> phull ?B\n 3. \\<And>s.\n       s \\<in> set (map (hom_deg_set z) ps) \\<Longrightarrow>\n       phull.subspace s", "from assms(1)"], ["proof (chain)\npicking this:\n  finite X", "have \"finite (deg_sect X z)\""], ["proof (prove)\nusing this:\n  finite X\n\ngoal (1 subgoal):\n 1. finite (deg_sect X z)", "by (rule finite_deg_sect)"], ["proof (state)\nthis:\n  finite (deg_sect X z)\n\ngoal (3 subgoals):\n 1. finite ?B\n 2. hom_deg_set z A \\<subseteq> phull ?B\n 3. \\<And>s.\n       s \\<in> set (map (hom_deg_set z) ps) \\<Longrightarrow>\n       phull.subspace s", "thus \"finite (monomial (1::'a) ` deg_sect X z)\""], ["proof (prove)\nusing this:\n  finite (deg_sect X z)\n\ngoal (1 subgoal):\n 1. finite (monomial (1::'a) ` deg_sect X z)", "by (rule finite_imageI)"], ["proof (state)\nthis:\n  finite (monomial (1::'a) ` deg_sect X z)\n\ngoal (2 subgoals):\n 1. hom_deg_set z A \\<subseteq> phull (monomial (1::'a) ` deg_sect X z)\n 2. \\<And>s.\n       s \\<in> set (map (hom_deg_set z) ps) \\<Longrightarrow>\n       phull.subspace s", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. hom_deg_set z A \\<subseteq> phull (monomial (1::'a) ` deg_sect X z)\n 2. \\<And>s.\n       s \\<in> set (map (hom_deg_set z) ps) \\<Longrightarrow>\n       phull.subspace s", "from assms(2)"], ["proof (chain)\npicking this:\n  A \\<subseteq> P[X]", "have \"hom_deg_set z A \\<subseteq> hom_deg_set z P[X]\""], ["proof (prove)\nusing this:\n  A \\<subseteq> P[X]\n\ngoal (1 subgoal):\n 1. hom_deg_set z A \\<subseteq> hom_deg_set z P[X]", "unfolding hom_deg_set_def"], ["proof (prove)\nusing this:\n  A \\<subseteq> P[X]\n\ngoal (1 subgoal):\n 1. (\\<lambda>a. hom_component a z) ` A\n    \\<subseteq> (\\<lambda>a. hom_component a z) ` P[X]", "by (rule image_mono)"], ["proof (state)\nthis:\n  hom_deg_set z A \\<subseteq> hom_deg_set z P[X]\n\ngoal (2 subgoals):\n 1. hom_deg_set z A \\<subseteq> phull (monomial (1::'a) ` deg_sect X z)\n 2. \\<And>s.\n       s \\<in> set (map (hom_deg_set z) ps) \\<Longrightarrow>\n       phull.subspace s", "thus \"hom_deg_set z A \\<subseteq> phull.span (monomial 1 ` deg_sect X z)\""], ["proof (prove)\nusing this:\n  hom_deg_set z A \\<subseteq> hom_deg_set z P[X]\n\ngoal (1 subgoal):\n 1. hom_deg_set z A \\<subseteq> phull (monomial (1::'a) ` deg_sect X z)", "by (simp only: hom_deg_set_Polys_eq_span)"], ["proof (state)\nthis:\n  hom_deg_set z A \\<subseteq> phull (monomial (1::'a) ` deg_sect X z)\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       s \\<in> set (map (hom_deg_set z) ps) \\<Longrightarrow>\n       phull.subspace s", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s.\n       s \\<in> set (map (hom_deg_set z) ps) \\<Longrightarrow>\n       phull.subspace s", "fix s"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s.\n       s \\<in> set (map (hom_deg_set z) ps) \\<Longrightarrow>\n       phull.subspace s", "assume \"s \\<in> set (map (hom_deg_set z) ps)\""], ["proof (state)\nthis:\n  s \\<in> set (map (hom_deg_set z) ps)\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       s \\<in> set (map (hom_deg_set z) ps) \\<Longrightarrow>\n       phull.subspace s", "then"], ["proof (chain)\npicking this:\n  s \\<in> set (map (hom_deg_set z) ps)", "obtain s' where \"s' \\<in> set ps\" and s: \"s = hom_deg_set z s'\""], ["proof (prove)\nusing this:\n  s \\<in> set (map (hom_deg_set z) ps)\n\ngoal (1 subgoal):\n 1. (\\<And>s'.\n        \\<lbrakk>s' \\<in> set ps; s = hom_deg_set z s'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding set_map"], ["proof (prove)\nusing this:\n  s \\<in> hom_deg_set z ` set ps\n\ngoal (1 subgoal):\n 1. (\\<And>s'.\n        \\<lbrakk>s' \\<in> set ps; s = hom_deg_set z s'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  s' \\<in> set ps\n  s = hom_deg_set z s'\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       s \\<in> set (map (hom_deg_set z) ps) \\<Longrightarrow>\n       phull.subspace s", "from this(1)"], ["proof (chain)\npicking this:\n  s' \\<in> set ps", "have \"phull.subspace s'\""], ["proof (prove)\nusing this:\n  s' \\<in> set ps\n\ngoal (1 subgoal):\n 1. phull.subspace s'", "by (rule assms(5))"], ["proof (state)\nthis:\n  phull.subspace s'\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       s \\<in> set (map (hom_deg_set z) ps) \\<Longrightarrow>\n       phull.subspace s", "thus \"phull.subspace s\""], ["proof (prove)\nusing this:\n  phull.subspace s'\n\ngoal (1 subgoal):\n 1. phull.subspace s", "unfolding s"], ["proof (prove)\nusing this:\n  phull.subspace s'\n\ngoal (1 subgoal):\n 1. phull.subspace (hom_deg_set z s')", "by (rule subspace_hom_deg_set)"], ["proof (state)\nthis:\n  phull.subspace s\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  phull.dim (hom_deg_set z A) = sum phull.dim (set (map (hom_deg_set z) ps))\n\ngoal (1 subgoal):\n 1. Hilbert_fun A z = (\\<Sum>p\\<in>set ps. Hilbert_fun p z)", "also"], ["proof (state)\nthis:\n  phull.dim (hom_deg_set z A) = sum phull.dim (set (map (hom_deg_set z) ps))\n\ngoal (1 subgoal):\n 1. Hilbert_fun A z = (\\<Sum>p\\<in>set ps. Hilbert_fun p z)", "have \"\\<dots> = sum (phull.dim \\<circ> hom_deg_set z) (set ps)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum phull.dim (set (map (hom_deg_set z) ps)) =\n    sum (phull.dim \\<circ> hom_deg_set z) (set ps)", "unfolding set_map"], ["proof (prove)\ngoal (1 subgoal):\n 1. sum phull.dim (hom_deg_set z ` set ps) =\n    sum (phull.dim \\<circ> hom_deg_set z) (set ps)", "using finite_set"], ["proof (prove)\nusing this:\n  finite (set ?xs)\n\ngoal (1 subgoal):\n 1. sum phull.dim (hom_deg_set z ` set ps) =\n    sum (phull.dim \\<circ> hom_deg_set z) (set ps)", "proof (rule sum.reindex_nontrivial)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> set ps; y \\<in> set ps; x \\<noteq> y;\n        hom_deg_set z x = hom_deg_set z y\\<rbrakk>\n       \\<Longrightarrow> phull.dim (hom_deg_set z x) = 0", "fix s1 s2"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> set ps; y \\<in> set ps; x \\<noteq> y;\n        hom_deg_set z x = hom_deg_set z y\\<rbrakk>\n       \\<Longrightarrow> phull.dim (hom_deg_set z x) = 0", "note dd"], ["proof (state)\nthis:\n  direct_decomp (hom_deg_set z A) (map (hom_deg_set z) ps)\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> set ps; y \\<in> set ps; x \\<noteq> y;\n        hom_deg_set z x = hom_deg_set z y\\<rbrakk>\n       \\<Longrightarrow> phull.dim (hom_deg_set z x) = 0", "moreover"], ["proof (state)\nthis:\n  direct_decomp (hom_deg_set z A) (map (hom_deg_set z) ps)\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> set ps; y \\<in> set ps; x \\<noteq> y;\n        hom_deg_set z x = hom_deg_set z y\\<rbrakk>\n       \\<Longrightarrow> phull.dim (hom_deg_set z x) = 0", "assume \"s1 \\<in> set ps\" and \"s2 \\<in> set ps\" and \"s1 \\<noteq> s2\""], ["proof (state)\nthis:\n  s1 \\<in> set ps\n  s2 \\<in> set ps\n  s1 \\<noteq> s2\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> set ps; y \\<in> set ps; x \\<noteq> y;\n        hom_deg_set z x = hom_deg_set z y\\<rbrakk>\n       \\<Longrightarrow> phull.dim (hom_deg_set z x) = 0", "moreover"], ["proof (state)\nthis:\n  s1 \\<in> set ps\n  s2 \\<in> set ps\n  s1 \\<noteq> s2\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> set ps; y \\<in> set ps; x \\<noteq> y;\n        hom_deg_set z x = hom_deg_set z y\\<rbrakk>\n       \\<Longrightarrow> phull.dim (hom_deg_set z x) = 0", "have \"0 \\<in> hom_deg_set z s\" if \"s \\<in> set ps\" for s"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<in> hom_deg_set z s", "proof (rule zero_in_hom_deg_set)"], ["proof (state)\ngoal (1 subgoal):\n 1. 0 \\<in> s", "from that"], ["proof (chain)\npicking this:\n  s \\<in> set ps", "have \"phull.subspace s\""], ["proof (prove)\nusing this:\n  s \\<in> set ps\n\ngoal (1 subgoal):\n 1. phull.subspace s", "by (rule assms(5))"], ["proof (state)\nthis:\n  phull.subspace s\n\ngoal (1 subgoal):\n 1. 0 \\<in> s", "thus \"0 \\<in> s\""], ["proof (prove)\nusing this:\n  phull.subspace s\n\ngoal (1 subgoal):\n 1. 0 \\<in> s", "by (rule phull.subspace_0)"], ["proof (state)\nthis:\n  0 \\<in> s\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?s \\<in> set ps \\<Longrightarrow> 0 \\<in> hom_deg_set z ?s\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> set ps; y \\<in> set ps; x \\<noteq> y;\n        hom_deg_set z x = hom_deg_set z y\\<rbrakk>\n       \\<Longrightarrow> phull.dim (hom_deg_set z x) = 0", "ultimately"], ["proof (chain)\npicking this:\n  direct_decomp (hom_deg_set z A) (map (hom_deg_set z) ps)\n  s1 \\<in> set ps\n  s2 \\<in> set ps\n  s1 \\<noteq> s2\n  ?s \\<in> set ps \\<Longrightarrow> 0 \\<in> hom_deg_set z ?s", "have \"hom_deg_set z s1 \\<inter> hom_deg_set z s2 = {0}\""], ["proof (prove)\nusing this:\n  direct_decomp (hom_deg_set z A) (map (hom_deg_set z) ps)\n  s1 \\<in> set ps\n  s2 \\<in> set ps\n  s1 \\<noteq> s2\n  ?s \\<in> set ps \\<Longrightarrow> 0 \\<in> hom_deg_set z ?s\n\ngoal (1 subgoal):\n 1. hom_deg_set z s1 \\<inter> hom_deg_set z s2 = {0}", "by (rule direct_decomp_map_Int_zero)"], ["proof (state)\nthis:\n  hom_deg_set z s1 \\<inter> hom_deg_set z s2 = {0}\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> set ps; y \\<in> set ps; x \\<noteq> y;\n        hom_deg_set z x = hom_deg_set z y\\<rbrakk>\n       \\<Longrightarrow> phull.dim (hom_deg_set z x) = 0", "moreover"], ["proof (state)\nthis:\n  hom_deg_set z s1 \\<inter> hom_deg_set z s2 = {0}\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> set ps; y \\<in> set ps; x \\<noteq> y;\n        hom_deg_set z x = hom_deg_set z y\\<rbrakk>\n       \\<Longrightarrow> phull.dim (hom_deg_set z x) = 0", "assume \"hom_deg_set z s1 = hom_deg_set z s2\""], ["proof (state)\nthis:\n  hom_deg_set z s1 = hom_deg_set z s2\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> set ps; y \\<in> set ps; x \\<noteq> y;\n        hom_deg_set z x = hom_deg_set z y\\<rbrakk>\n       \\<Longrightarrow> phull.dim (hom_deg_set z x) = 0", "ultimately"], ["proof (chain)\npicking this:\n  hom_deg_set z s1 \\<inter> hom_deg_set z s2 = {0}\n  hom_deg_set z s1 = hom_deg_set z s2", "show \"phull.dim (hom_deg_set z s1) = 0\""], ["proof (prove)\nusing this:\n  hom_deg_set z s1 \\<inter> hom_deg_set z s2 = {0}\n  hom_deg_set z s1 = hom_deg_set z s2\n\ngoal (1 subgoal):\n 1. phull.dim (hom_deg_set z s1) = 0", "by simp"], ["proof (state)\nthis:\n  phull.dim (hom_deg_set z s1) = 0\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  sum phull.dim (set (map (hom_deg_set z) ps)) =\n  sum (phull.dim \\<circ> hom_deg_set z) (set ps)\n\ngoal (1 subgoal):\n 1. Hilbert_fun A z = (\\<Sum>p\\<in>set ps. Hilbert_fun p z)", "also"], ["proof (state)\nthis:\n  sum phull.dim (set (map (hom_deg_set z) ps)) =\n  sum (phull.dim \\<circ> hom_deg_set z) (set ps)\n\ngoal (1 subgoal):\n 1. Hilbert_fun A z = (\\<Sum>p\\<in>set ps. Hilbert_fun p z)", "have \"\\<dots> = (\\<Sum>p\\<in>set ps. Hilbert_fun p z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum (phull.dim \\<circ> hom_deg_set z) (set ps) =\n    (\\<Sum>p\\<in>set ps. Hilbert_fun p z)", "by (simp only: o_def Hilbert_fun_def)"], ["proof (state)\nthis:\n  sum (phull.dim \\<circ> hom_deg_set z) (set ps) =\n  (\\<Sum>p\\<in>set ps. Hilbert_fun p z)\n\ngoal (1 subgoal):\n 1. Hilbert_fun A z = (\\<Sum>p\\<in>set ps. Hilbert_fun p z)", "finally"], ["proof (chain)\npicking this:\n  Hilbert_fun A z = (\\<Sum>p\\<in>set ps. Hilbert_fun p z)", "show ?thesis"], ["proof (prove)\nusing this:\n  Hilbert_fun A z = (\\<Sum>p\\<in>set ps. Hilbert_fun p z)\n\ngoal (1 subgoal):\n 1. Hilbert_fun A z = (\\<Sum>p\\<in>set ps. Hilbert_fun p z)", "."], ["proof (state)\nthis:\n  Hilbert_fun A z = (\\<Sum>p\\<in>set ps. Hilbert_fun p z)\n\ngoal:\nNo subgoals!", "qed"], ["", "context pm_powerprod\nbegin"], ["", "lemma image_lt_hom_deg_set:\n  assumes \"homogeneous_set A\"\n  shows \"lpp ` (hom_deg_set z A - {0}) = {t \\<in> lpp ` (A - {0}). deg_pm t = z}\" (is \"?B = ?A\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. lpp ` (hom_deg_set z A - {0}) = {t \\<in> lpp ` (A - {0}). deg_pm t = z}", "proof (intro set_eqI iffI)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> lpp ` (hom_deg_set z A - {0}) \\<Longrightarrow>\n       x \\<in> {t \\<in> lpp ` (A - {0}). deg_pm t = z}\n 2. \\<And>x.\n       x \\<in> {t \\<in> lpp ` (A - {0}). deg_pm t = z} \\<Longrightarrow>\n       x \\<in> lpp ` (hom_deg_set z A - {0})", "fix t"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> lpp ` (hom_deg_set z A - {0}) \\<Longrightarrow>\n       x \\<in> {t \\<in> lpp ` (A - {0}). deg_pm t = z}\n 2. \\<And>x.\n       x \\<in> {t \\<in> lpp ` (A - {0}). deg_pm t = z} \\<Longrightarrow>\n       x \\<in> lpp ` (hom_deg_set z A - {0})", "assume \"t \\<in> ?A\""], ["proof (state)\nthis:\n  t \\<in> {t \\<in> lpp ` (A - {0}). deg_pm t = z}\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> lpp ` (hom_deg_set z A - {0}) \\<Longrightarrow>\n       x \\<in> {t \\<in> lpp ` (A - {0}). deg_pm t = z}\n 2. \\<And>x.\n       x \\<in> {t \\<in> lpp ` (A - {0}). deg_pm t = z} \\<Longrightarrow>\n       x \\<in> lpp ` (hom_deg_set z A - {0})", "hence \"t \\<in> lpp ` (A - {0})\" and deg_t[symmetric]: \"deg_pm t = z\""], ["proof (prove)\nusing this:\n  t \\<in> {t \\<in> lpp ` (A - {0}). deg_pm t = z}\n\ngoal (1 subgoal):\n 1. t \\<in> lpp ` (A - {0}) &&& deg_pm t = z", "by simp_all"], ["proof (state)\nthis:\n  t \\<in> lpp ` (A - {0})\n  z = deg_pm t\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> lpp ` (hom_deg_set z A - {0}) \\<Longrightarrow>\n       x \\<in> {t \\<in> lpp ` (A - {0}). deg_pm t = z}\n 2. \\<And>x.\n       x \\<in> {t \\<in> lpp ` (A - {0}). deg_pm t = z} \\<Longrightarrow>\n       x \\<in> lpp ` (hom_deg_set z A - {0})", "from this(1)"], ["proof (chain)\npicking this:\n  t \\<in> lpp ` (A - {0})", "obtain p where \"p \\<in> A - {0}\" and t: \"t = lpp p\""], ["proof (prove)\nusing this:\n  t \\<in> lpp ` (A - {0})\n\ngoal (1 subgoal):\n 1. (\\<And>p.\n        \\<lbrakk>p \\<in> A - {0}; t = lpp p\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  p \\<in> A - {0}\n  t = lpp p\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> lpp ` (hom_deg_set z A - {0}) \\<Longrightarrow>\n       x \\<in> {t \\<in> lpp ` (A - {0}). deg_pm t = z}\n 2. \\<And>x.\n       x \\<in> {t \\<in> lpp ` (A - {0}). deg_pm t = z} \\<Longrightarrow>\n       x \\<in> lpp ` (hom_deg_set z A - {0})", "from this(1)"], ["proof (chain)\npicking this:\n  p \\<in> A - {0}", "have \"p \\<in> A\" and \"p \\<noteq> 0\""], ["proof (prove)\nusing this:\n  p \\<in> A - {0}\n\ngoal (1 subgoal):\n 1. p \\<in> A &&& p \\<noteq> 0", "by simp_all"], ["proof (state)\nthis:\n  p \\<in> A\n  p \\<noteq> 0\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> lpp ` (hom_deg_set z A - {0}) \\<Longrightarrow>\n       x \\<in> {t \\<in> lpp ` (A - {0}). deg_pm t = z}\n 2. \\<And>x.\n       x \\<in> {t \\<in> lpp ` (A - {0}). deg_pm t = z} \\<Longrightarrow>\n       x \\<in> lpp ` (hom_deg_set z A - {0})", "from this(1)"], ["proof (chain)\npicking this:\n  p \\<in> A", "have 1: \"hom_component p z \\<in> hom_deg_set z A\" (is \"?p \\<in> _\")"], ["proof (prove)\nusing this:\n  p \\<in> A\n\ngoal (1 subgoal):\n 1. hom_component p z \\<in> hom_deg_set z A", "unfolding hom_deg_set_def"], ["proof (prove)\nusing this:\n  p \\<in> A\n\ngoal (1 subgoal):\n 1. hom_component p z \\<in> (\\<lambda>a. hom_component a z) ` A", "by (rule imageI)"], ["proof (state)\nthis:\n  hom_component p z \\<in> hom_deg_set z A\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> lpp ` (hom_deg_set z A - {0}) \\<Longrightarrow>\n       x \\<in> {t \\<in> lpp ` (A - {0}). deg_pm t = z}\n 2. \\<And>x.\n       x \\<in> {t \\<in> lpp ` (A - {0}). deg_pm t = z} \\<Longrightarrow>\n       x \\<in> lpp ` (hom_deg_set z A - {0})", "from \\<open>p \\<noteq> 0\\<close>"], ["proof (chain)\npicking this:\n  p \\<noteq> 0", "have \"?p \\<noteq> 0\" and \"lpp ?p = t\""], ["proof (prove)\nusing this:\n  p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. hom_component p z \\<noteq> 0 &&& lpp (hom_component p z) = t", "unfolding t deg_t"], ["proof (prove)\nusing this:\n  p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. hom_component p (deg_pm (lpp p)) \\<noteq> 0 &&&\n    lpp (hom_component p (deg_pm (lpp p))) = lpp p", "by (rule hom_component_lpp)+"], ["proof (state)\nthis:\n  hom_component p z \\<noteq> 0\n  lpp (hom_component p z) = t\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> lpp ` (hom_deg_set z A - {0}) \\<Longrightarrow>\n       x \\<in> {t \\<in> lpp ` (A - {0}). deg_pm t = z}\n 2. \\<And>x.\n       x \\<in> {t \\<in> lpp ` (A - {0}). deg_pm t = z} \\<Longrightarrow>\n       x \\<in> lpp ` (hom_deg_set z A - {0})", "note this(2)[symmetric]"], ["proof (state)\nthis:\n  t = lpp (hom_component p z)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> lpp ` (hom_deg_set z A - {0}) \\<Longrightarrow>\n       x \\<in> {t \\<in> lpp ` (A - {0}). deg_pm t = z}\n 2. \\<And>x.\n       x \\<in> {t \\<in> lpp ` (A - {0}). deg_pm t = z} \\<Longrightarrow>\n       x \\<in> lpp ` (hom_deg_set z A - {0})", "moreover"], ["proof (state)\nthis:\n  t = lpp (hom_component p z)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> lpp ` (hom_deg_set z A - {0}) \\<Longrightarrow>\n       x \\<in> {t \\<in> lpp ` (A - {0}). deg_pm t = z}\n 2. \\<And>x.\n       x \\<in> {t \\<in> lpp ` (A - {0}). deg_pm t = z} \\<Longrightarrow>\n       x \\<in> lpp ` (hom_deg_set z A - {0})", "from 1 \\<open>?p \\<noteq> 0\\<close>"], ["proof (chain)\npicking this:\n  hom_component p z \\<in> hom_deg_set z A\n  hom_component p z \\<noteq> 0", "have \"?p \\<in> hom_deg_set z A - {0}\""], ["proof (prove)\nusing this:\n  hom_component p z \\<in> hom_deg_set z A\n  hom_component p z \\<noteq> 0\n\ngoal (1 subgoal):\n 1. hom_component p z \\<in> hom_deg_set z A - {0}", "by simp"], ["proof (state)\nthis:\n  hom_component p z \\<in> hom_deg_set z A - {0}\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> lpp ` (hom_deg_set z A - {0}) \\<Longrightarrow>\n       x \\<in> {t \\<in> lpp ` (A - {0}). deg_pm t = z}\n 2. \\<And>x.\n       x \\<in> {t \\<in> lpp ` (A - {0}). deg_pm t = z} \\<Longrightarrow>\n       x \\<in> lpp ` (hom_deg_set z A - {0})", "ultimately"], ["proof (chain)\npicking this:\n  t = lpp (hom_component p z)\n  hom_component p z \\<in> hom_deg_set z A - {0}", "show \"t \\<in> ?B\""], ["proof (prove)\nusing this:\n  t = lpp (hom_component p z)\n  hom_component p z \\<in> hom_deg_set z A - {0}\n\ngoal (1 subgoal):\n 1. t \\<in> lpp ` (hom_deg_set z A - {0})", "by (rule image_eqI)"], ["proof (state)\nthis:\n  t \\<in> lpp ` (hom_deg_set z A - {0})\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lpp ` (hom_deg_set z A - {0}) \\<Longrightarrow>\n       x \\<in> {t \\<in> lpp ` (A - {0}). deg_pm t = z}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lpp ` (hom_deg_set z A - {0}) \\<Longrightarrow>\n       x \\<in> {t \\<in> lpp ` (A - {0}). deg_pm t = z}", "fix t"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lpp ` (hom_deg_set z A - {0}) \\<Longrightarrow>\n       x \\<in> {t \\<in> lpp ` (A - {0}). deg_pm t = z}", "assume \"t \\<in> ?B\""], ["proof (state)\nthis:\n  t \\<in> lpp ` (hom_deg_set z A - {0})\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lpp ` (hom_deg_set z A - {0}) \\<Longrightarrow>\n       x \\<in> {t \\<in> lpp ` (A - {0}). deg_pm t = z}", "then"], ["proof (chain)\npicking this:\n  t \\<in> lpp ` (hom_deg_set z A - {0})", "obtain p where \"p \\<in> hom_deg_set z A - {0}\" and t: \"t = lpp p\""], ["proof (prove)\nusing this:\n  t \\<in> lpp ` (hom_deg_set z A - {0})\n\ngoal (1 subgoal):\n 1. (\\<And>p.\n        \\<lbrakk>p \\<in> hom_deg_set z A - {0}; t = lpp p\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  p \\<in> hom_deg_set z A - {0}\n  t = lpp p\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lpp ` (hom_deg_set z A - {0}) \\<Longrightarrow>\n       x \\<in> {t \\<in> lpp ` (A - {0}). deg_pm t = z}", "from this(1)"], ["proof (chain)\npicking this:\n  p \\<in> hom_deg_set z A - {0}", "have \"p \\<in> hom_deg_set z A\" and \"p \\<noteq> 0\""], ["proof (prove)\nusing this:\n  p \\<in> hom_deg_set z A - {0}\n\ngoal (1 subgoal):\n 1. p \\<in> hom_deg_set z A &&& p \\<noteq> 0", "by simp_all"], ["proof (state)\nthis:\n  p \\<in> hom_deg_set z A\n  p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lpp ` (hom_deg_set z A - {0}) \\<Longrightarrow>\n       x \\<in> {t \\<in> lpp ` (A - {0}). deg_pm t = z}", "with assms"], ["proof (chain)\npicking this:\n  homogeneous_set A\n  p \\<in> hom_deg_set z A\n  p \\<noteq> 0", "have \"p \\<in> A\" and \"homogeneous p\" and \"poly_deg p = z\""], ["proof (prove)\nusing this:\n  homogeneous_set A\n  p \\<in> hom_deg_set z A\n  p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. p \\<in> A &&& homogeneous p &&& poly_deg p = z", "by (simp_all add: hom_deg_set_alt_homogeneous_set)"], ["proof (state)\nthis:\n  p \\<in> A\n  homogeneous p\n  poly_deg p = z\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lpp ` (hom_deg_set z A - {0}) \\<Longrightarrow>\n       x \\<in> {t \\<in> lpp ` (A - {0}). deg_pm t = z}", "from this(1) \\<open>p \\<noteq> 0\\<close>"], ["proof (chain)\npicking this:\n  p \\<in> A\n  p \\<noteq> 0", "have \"p \\<in> A - {0}\""], ["proof (prove)\nusing this:\n  p \\<in> A\n  p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. p \\<in> A - {0}", "by simp"], ["proof (state)\nthis:\n  p \\<in> A - {0}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lpp ` (hom_deg_set z A - {0}) \\<Longrightarrow>\n       x \\<in> {t \\<in> lpp ` (A - {0}). deg_pm t = z}", "hence 1: \"t \\<in> lpp ` (A - {0})\""], ["proof (prove)\nusing this:\n  p \\<in> A - {0}\n\ngoal (1 subgoal):\n 1. t \\<in> lpp ` (A - {0})", "using t"], ["proof (prove)\nusing this:\n  p \\<in> A - {0}\n  t = lpp p\n\ngoal (1 subgoal):\n 1. t \\<in> lpp ` (A - {0})", "by (rule rev_image_eqI)"], ["proof (state)\nthis:\n  t \\<in> lpp ` (A - {0})\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lpp ` (hom_deg_set z A - {0}) \\<Longrightarrow>\n       x \\<in> {t \\<in> lpp ` (A - {0}). deg_pm t = z}", "from \\<open>p \\<noteq> 0\\<close>"], ["proof (chain)\npicking this:\n  p \\<noteq> 0", "have \"t \\<in> keys p\""], ["proof (prove)\nusing this:\n  p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. t \\<in> keys p", "unfolding t"], ["proof (prove)\nusing this:\n  p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. lpp p \\<in> keys p", "by (rule punit.lt_in_keys)"], ["proof (state)\nthis:\n  t \\<in> keys p\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lpp ` (hom_deg_set z A - {0}) \\<Longrightarrow>\n       x \\<in> {t \\<in> lpp ` (A - {0}). deg_pm t = z}", "with \\<open>homogeneous p\\<close>"], ["proof (chain)\npicking this:\n  homogeneous p\n  t \\<in> keys p", "have \"deg_pm t = poly_deg p\""], ["proof (prove)\nusing this:\n  homogeneous p\n  t \\<in> keys p\n\ngoal (1 subgoal):\n 1. deg_pm t = poly_deg p", "by (rule homogeneousD_poly_deg)"], ["proof (state)\nthis:\n  deg_pm t = poly_deg p\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lpp ` (hom_deg_set z A - {0}) \\<Longrightarrow>\n       x \\<in> {t \\<in> lpp ` (A - {0}). deg_pm t = z}", "with 1"], ["proof (chain)\npicking this:\n  t \\<in> lpp ` (A - {0})\n  deg_pm t = poly_deg p", "show \"t \\<in> ?A\""], ["proof (prove)\nusing this:\n  t \\<in> lpp ` (A - {0})\n  deg_pm t = poly_deg p\n\ngoal (1 subgoal):\n 1. t \\<in> {t \\<in> lpp ` (A - {0}). deg_pm t = z}", "by (simp add: \\<open>poly_deg p = z\\<close>)"], ["proof (state)\nthis:\n  t \\<in> {t \\<in> lpp ` (A - {0}). deg_pm t = z}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Hilbert_fun_alt:\n  assumes \"finite X\" and \"A \\<subseteq> P[X]\" and \"phull.subspace A\"\n  shows \"Hilbert_fun A z = card (lpp ` (hom_deg_set z A - {0}))\" (is \"_ = card ?A\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. Hilbert_fun A z = card (lpp ` (hom_deg_set z A - {0}))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Hilbert_fun A z = card (lpp ` (hom_deg_set z A - {0}))", "have \"?A \\<subseteq> lpp ` (hom_deg_set z A - {0})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lpp ` (hom_deg_set z A - {0}) \\<subseteq> lpp ` (hom_deg_set z A - {0})", "by simp"], ["proof (state)\nthis:\n  lpp ` (hom_deg_set z A - {0}) \\<subseteq> lpp ` (hom_deg_set z A - {0})\n\ngoal (1 subgoal):\n 1. Hilbert_fun A z = card (lpp ` (hom_deg_set z A - {0}))", "then"], ["proof (chain)\npicking this:\n  lpp ` (hom_deg_set z A - {0}) \\<subseteq> lpp ` (hom_deg_set z A - {0})", "obtain B where sub: \"B \\<subseteq> hom_deg_set z A - {0}\" and eq1: \"?A = lpp ` B\"\n    and inj: \"inj_on lpp B\""], ["proof (prove)\nusing this:\n  lpp ` (hom_deg_set z A - {0}) \\<subseteq> lpp ` (hom_deg_set z A - {0})\n\ngoal (1 subgoal):\n 1. (\\<And>B.\n        \\<lbrakk>B \\<subseteq> hom_deg_set z A - {0};\n         lpp ` (hom_deg_set z A - {0}) = lpp ` B; inj_on lpp B\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule subset_imageE_inj)"], ["proof (state)\nthis:\n  B \\<subseteq> hom_deg_set z A - {0}\n  lpp ` (hom_deg_set z A - {0}) = lpp ` B\n  inj_on lpp B\n\ngoal (1 subgoal):\n 1. Hilbert_fun A z = card (lpp ` (hom_deg_set z A - {0}))", "have \"Hilbert_fun A z = phull.dim (hom_deg_set z A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Hilbert_fun A z = phull.dim (hom_deg_set z A)", "by (fact Hilbert_fun_def)"], ["proof (state)\nthis:\n  Hilbert_fun A z = phull.dim (hom_deg_set z A)\n\ngoal (1 subgoal):\n 1. Hilbert_fun A z = card (lpp ` (hom_deg_set z A - {0}))", "also"], ["proof (state)\nthis:\n  Hilbert_fun A z = phull.dim (hom_deg_set z A)\n\ngoal (1 subgoal):\n 1. Hilbert_fun A z = card (lpp ` (hom_deg_set z A - {0}))", "have \"\\<dots> = card B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. phull.dim (hom_deg_set z A) = card B", "proof (rule phull.dim_eq_card)"], ["proof (state)\ngoal (2 subgoals):\n 1. phull B = phull (hom_deg_set z A)\n 2. phull.independent B", "show \"phull.span B = phull.span (hom_deg_set z A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. phull B = phull (hom_deg_set z A)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. phull B \\<subseteq> phull (hom_deg_set z A)\n 2. phull (hom_deg_set z A) \\<subseteq> phull B", "from sub"], ["proof (chain)\npicking this:\n  B \\<subseteq> hom_deg_set z A - {0}", "have \"B \\<subseteq> hom_deg_set z A\""], ["proof (prove)\nusing this:\n  B \\<subseteq> hom_deg_set z A - {0}\n\ngoal (1 subgoal):\n 1. B \\<subseteq> hom_deg_set z A", "by blast"], ["proof (state)\nthis:\n  B \\<subseteq> hom_deg_set z A\n\ngoal (2 subgoals):\n 1. phull B \\<subseteq> phull (hom_deg_set z A)\n 2. phull (hom_deg_set z A) \\<subseteq> phull B", "thus \"phull.span B \\<subseteq> phull.span (hom_deg_set z A)\""], ["proof (prove)\nusing this:\n  B \\<subseteq> hom_deg_set z A\n\ngoal (1 subgoal):\n 1. phull B \\<subseteq> phull (hom_deg_set z A)", "by (rule phull.span_mono)"], ["proof (state)\nthis:\n  phull B \\<subseteq> phull (hom_deg_set z A)\n\ngoal (1 subgoal):\n 1. phull (hom_deg_set z A) \\<subseteq> phull B", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. phull (hom_deg_set z A) \\<subseteq> phull B", "from assms(3)"], ["proof (chain)\npicking this:\n  phull.subspace A", "have \"phull.subspace (hom_deg_set z A)\""], ["proof (prove)\nusing this:\n  phull.subspace A\n\ngoal (1 subgoal):\n 1. phull.subspace (hom_deg_set z A)", "by (rule subspace_hom_deg_set)"], ["proof (state)\nthis:\n  phull.subspace (hom_deg_set z A)\n\ngoal (1 subgoal):\n 1. phull (hom_deg_set z A) \\<subseteq> phull B", "hence \"phull.span (hom_deg_set z A) = hom_deg_set z A\""], ["proof (prove)\nusing this:\n  phull.subspace (hom_deg_set z A)\n\ngoal (1 subgoal):\n 1. phull (hom_deg_set z A) = hom_deg_set z A", "by (simp only: phull.span_eq_iff)"], ["proof (state)\nthis:\n  phull (hom_deg_set z A) = hom_deg_set z A\n\ngoal (1 subgoal):\n 1. phull (hom_deg_set z A) \\<subseteq> phull B", "also"], ["proof (state)\nthis:\n  phull (hom_deg_set z A) = hom_deg_set z A\n\ngoal (1 subgoal):\n 1. phull (hom_deg_set z A) \\<subseteq> phull B", "have \"\\<dots> \\<subseteq> phull.span B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. hom_deg_set z A \\<subseteq> phull B", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> hom_deg_set z A \\<subseteq> phull B \\<Longrightarrow> False", "assume \"\\<not> hom_deg_set z A \\<subseteq> phull.span B\""], ["proof (state)\nthis:\n  \\<not> hom_deg_set z A \\<subseteq> phull B\n\ngoal (1 subgoal):\n 1. \\<not> hom_deg_set z A \\<subseteq> phull B \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  \\<not> hom_deg_set z A \\<subseteq> phull B", "obtain p0 where \"p0 \\<in> hom_deg_set z A - phull.span B\" (is \"_ \\<in> ?B\")"], ["proof (prove)\nusing this:\n  \\<not> hom_deg_set z A \\<subseteq> phull B\n\ngoal (1 subgoal):\n 1. (\\<And>p0.\n        p0 \\<in> hom_deg_set z A - phull B \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  p0 \\<in> hom_deg_set z A - phull B\n\ngoal (1 subgoal):\n 1. \\<not> hom_deg_set z A \\<subseteq> phull B \\<Longrightarrow> False", "note assms(1) this"], ["proof (state)\nthis:\n  finite X\n  p0 \\<in> hom_deg_set z A - phull B\n\ngoal (1 subgoal):\n 1. \\<not> hom_deg_set z A \\<subseteq> phull B \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  finite X\n  p0 \\<in> hom_deg_set z A - phull B\n\ngoal (1 subgoal):\n 1. \\<not> hom_deg_set z A \\<subseteq> phull B \\<Longrightarrow> False", "have \"?B \\<subseteq> P[X]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. hom_deg_set z A - phull B \\<subseteq> P[X]", "proof (rule subset_trans)"], ["proof (state)\ngoal (2 subgoals):\n 1. hom_deg_set z A - phull B \\<subseteq> ?B\n 2. ?B \\<subseteq> P[X]", "from assms(2)"], ["proof (chain)\npicking this:\n  A \\<subseteq> P[X]", "show \"hom_deg_set z A \\<subseteq> P[X]\""], ["proof (prove)\nusing this:\n  A \\<subseteq> P[X]\n\ngoal (1 subgoal):\n 1. hom_deg_set z A \\<subseteq> P[X]", "by (rule Polys_closed_hom_deg_set)"], ["proof (state)\nthis:\n  hom_deg_set z A \\<subseteq> P[X]\n\ngoal (1 subgoal):\n 1. hom_deg_set z A - phull B \\<subseteq> hom_deg_set z A", "qed blast"], ["proof (state)\nthis:\n  hom_deg_set z A - phull B \\<subseteq> P[X]\n\ngoal (1 subgoal):\n 1. \\<not> hom_deg_set z A \\<subseteq> phull B \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  finite X\n  p0 \\<in> hom_deg_set z A - phull B\n  hom_deg_set z A - phull B \\<subseteq> P[X]", "obtain p where \"p \\<in> ?B\" and p_min: \"\\<And>q. punit.ord_strict_p q p \\<Longrightarrow> q \\<notin> ?B\""], ["proof (prove)\nusing this:\n  finite X\n  p0 \\<in> hom_deg_set z A - phull B\n  hom_deg_set z A - phull B \\<subseteq> P[X]\n\ngoal (1 subgoal):\n 1. (\\<And>p.\n        \\<lbrakk>p \\<in> hom_deg_set z A - phull B;\n         \\<And>q.\n            punit.ord_strict_p q p \\<Longrightarrow>\n            q \\<notin> hom_deg_set z A - phull B\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule punit.ord_p_minimum_dgrad_p_set[OF dickson_grading_varnum, where m=0,\n                    simplified dgrad_p_set_varnum]) blast"], ["proof (state)\nthis:\n  p \\<in> hom_deg_set z A - phull B\n  punit.ord_strict_p ?q5 p \\<Longrightarrow>\n  ?q5 \\<notin> hom_deg_set z A - phull B\n\ngoal (1 subgoal):\n 1. \\<not> hom_deg_set z A \\<subseteq> phull B \\<Longrightarrow> False", "from this(1)"], ["proof (chain)\npicking this:\n  p \\<in> hom_deg_set z A - phull B", "have \"p \\<in> hom_deg_set z A\" and \"p \\<notin> phull.span B\""], ["proof (prove)\nusing this:\n  p \\<in> hom_deg_set z A - phull B\n\ngoal (1 subgoal):\n 1. p \\<in> hom_deg_set z A &&& p \\<notin> phull B", "by simp_all"], ["proof (state)\nthis:\n  p \\<in> hom_deg_set z A\n  p \\<notin> phull B\n\ngoal (1 subgoal):\n 1. \\<not> hom_deg_set z A \\<subseteq> phull B \\<Longrightarrow> False", "from phull.span_zero this(2)"], ["proof (chain)\npicking this:\n  0 \\<in> phull ?S\n  p \\<notin> phull B", "have \"p \\<noteq> 0\""], ["proof (prove)\nusing this:\n  0 \\<in> phull ?S\n  p \\<notin> phull B\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0", "by blast"], ["proof (state)\nthis:\n  p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<not> hom_deg_set z A \\<subseteq> phull B \\<Longrightarrow> False", "with \\<open>p \\<in> hom_deg_set z A\\<close>"], ["proof (chain)\npicking this:\n  p \\<in> hom_deg_set z A\n  p \\<noteq> 0", "have \"p \\<in> hom_deg_set z A - {0}\""], ["proof (prove)\nusing this:\n  p \\<in> hom_deg_set z A\n  p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. p \\<in> hom_deg_set z A - {0}", "by simp"], ["proof (state)\nthis:\n  p \\<in> hom_deg_set z A - {0}\n\ngoal (1 subgoal):\n 1. \\<not> hom_deg_set z A \\<subseteq> phull B \\<Longrightarrow> False", "hence \"lpp p \\<in> lpp ` (hom_deg_set z A - {0})\""], ["proof (prove)\nusing this:\n  p \\<in> hom_deg_set z A - {0}\n\ngoal (1 subgoal):\n 1. lpp p \\<in> lpp ` (hom_deg_set z A - {0})", "by (rule imageI)"], ["proof (state)\nthis:\n  lpp p \\<in> lpp ` (hom_deg_set z A - {0})\n\ngoal (1 subgoal):\n 1. \\<not> hom_deg_set z A \\<subseteq> phull B \\<Longrightarrow> False", "also"], ["proof (state)\nthis:\n  lpp p \\<in> lpp ` (hom_deg_set z A - {0})\n\ngoal (1 subgoal):\n 1. \\<not> hom_deg_set z A \\<subseteq> phull B \\<Longrightarrow> False", "have \"\\<dots> = lpp ` B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lpp ` (hom_deg_set z A - {0}) = lpp ` B", "by (simp only: eq1)"], ["proof (state)\nthis:\n  lpp ` (hom_deg_set z A - {0}) = lpp ` B\n\ngoal (1 subgoal):\n 1. \\<not> hom_deg_set z A \\<subseteq> phull B \\<Longrightarrow> False", "finally"], ["proof (chain)\npicking this:\n  lpp p \\<in> lpp ` B", "obtain b where \"b \\<in> B\" and eq2: \"lpp p = lpp b\""], ["proof (prove)\nusing this:\n  lpp p \\<in> lpp ` B\n\ngoal (1 subgoal):\n 1. (\\<And>b.\n        \\<lbrakk>b \\<in> B; lpp p = lpp b\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  b \\<in> B\n  lpp p = lpp b\n\ngoal (1 subgoal):\n 1. \\<not> hom_deg_set z A \\<subseteq> phull B \\<Longrightarrow> False", "from this(1) sub"], ["proof (chain)\npicking this:\n  b \\<in> B\n  B \\<subseteq> hom_deg_set z A - {0}", "have \"b \\<in> hom_deg_set z A - {0}\""], ["proof (prove)\nusing this:\n  b \\<in> B\n  B \\<subseteq> hom_deg_set z A - {0}\n\ngoal (1 subgoal):\n 1. b \\<in> hom_deg_set z A - {0}", ".."], ["proof (state)\nthis:\n  b \\<in> hom_deg_set z A - {0}\n\ngoal (1 subgoal):\n 1. \\<not> hom_deg_set z A \\<subseteq> phull B \\<Longrightarrow> False", "hence \"b \\<in> hom_deg_set z A\" and \"b \\<noteq> 0\""], ["proof (prove)\nusing this:\n  b \\<in> hom_deg_set z A - {0}\n\ngoal (1 subgoal):\n 1. b \\<in> hom_deg_set z A &&& b \\<noteq> 0", "by simp_all"], ["proof (state)\nthis:\n  b \\<in> hom_deg_set z A\n  b \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<not> hom_deg_set z A \\<subseteq> phull B \\<Longrightarrow> False", "from this(2)"], ["proof (chain)\npicking this:\n  b \\<noteq> 0", "have lcb: \"punit.lc b \\<noteq> 0\""], ["proof (prove)\nusing this:\n  b \\<noteq> 0\n\ngoal (1 subgoal):\n 1. lcf b \\<noteq> (0::'a)", "by (rule punit.lc_not_0)"], ["proof (state)\nthis:\n  lcf b \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. \\<not> hom_deg_set z A \\<subseteq> phull B \\<Longrightarrow> False", "from \\<open>p \\<noteq> 0\\<close>"], ["proof (chain)\npicking this:\n  p \\<noteq> 0", "have lcp: \"punit.lc p \\<noteq> 0\""], ["proof (prove)\nusing this:\n  p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. lcf p \\<noteq> (0::'a)", "by (rule punit.lc_not_0)"], ["proof (state)\nthis:\n  lcf p \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. \\<not> hom_deg_set z A \\<subseteq> phull B \\<Longrightarrow> False", "from \\<open>b \\<in> B\\<close>"], ["proof (chain)\npicking this:\n  b \\<in> B", "have \"b \\<in> phull.span B\""], ["proof (prove)\nusing this:\n  b \\<in> B\n\ngoal (1 subgoal):\n 1. b \\<in> phull B", "by (rule phull.span_base)"], ["proof (state)\nthis:\n  b \\<in> phull B\n\ngoal (1 subgoal):\n 1. \\<not> hom_deg_set z A \\<subseteq> phull B \\<Longrightarrow> False", "hence \"(punit.lc p / punit.lc b) \\<cdot> b \\<in> phull.span B\" (is \"?b \\<in> _\")"], ["proof (prove)\nusing this:\n  b \\<in> phull B\n\ngoal (1 subgoal):\n 1. (lcf p / lcf b) \\<cdot> b \\<in> phull B", "by (rule phull.span_scale)"], ["proof (state)\nthis:\n  (lcf p / lcf b) \\<cdot> b \\<in> phull B\n\ngoal (1 subgoal):\n 1. \\<not> hom_deg_set z A \\<subseteq> phull B \\<Longrightarrow> False", "with \\<open>p \\<notin> phull.span B\\<close>"], ["proof (chain)\npicking this:\n  p \\<notin> phull B\n  (lcf p / lcf b) \\<cdot> b \\<in> phull B", "have \"p - ?b \\<noteq> 0\""], ["proof (prove)\nusing this:\n  p \\<notin> phull B\n  (lcf p / lcf b) \\<cdot> b \\<in> phull B\n\ngoal (1 subgoal):\n 1. p - (lcf p / lcf b) \\<cdot> b \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  p - (lcf p / lcf b) \\<cdot> b \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<not> hom_deg_set z A \\<subseteq> phull B \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  p - (lcf p / lcf b) \\<cdot> b \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<not> hom_deg_set z A \\<subseteq> phull B \\<Longrightarrow> False", "from lcb lcp \\<open>b \\<noteq> 0\\<close>"], ["proof (chain)\npicking this:\n  lcf b \\<noteq> (0::'a)\n  lcf p \\<noteq> (0::'a)\n  b \\<noteq> 0", "have \"lpp ?b = lpp p\""], ["proof (prove)\nusing this:\n  lcf b \\<noteq> (0::'a)\n  lcf p \\<noteq> (0::'a)\n  b \\<noteq> 0\n\ngoal (1 subgoal):\n 1. lpp ((lcf p / lcf b) \\<cdot> b) = lpp p", "by (simp add: punit.map_scale_eq_monom_mult punit.lt_monom_mult eq2)"], ["proof (state)\nthis:\n  lpp ((lcf p / lcf b) \\<cdot> b) = lpp p\n\ngoal (1 subgoal):\n 1. \\<not> hom_deg_set z A \\<subseteq> phull B \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  lpp ((lcf p / lcf b) \\<cdot> b) = lpp p\n\ngoal (1 subgoal):\n 1. \\<not> hom_deg_set z A \\<subseteq> phull B \\<Longrightarrow> False", "from lcb"], ["proof (chain)\npicking this:\n  lcf b \\<noteq> (0::'a)", "have \"punit.lc ?b = punit.lc p\""], ["proof (prove)\nusing this:\n  lcf b \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. lcf ((lcf p / lcf b) \\<cdot> b) = lcf p", "by (simp add: punit.map_scale_eq_monom_mult)"], ["proof (state)\nthis:\n  lcf ((lcf p / lcf b) \\<cdot> b) = lcf p\n\ngoal (1 subgoal):\n 1. \\<not> hom_deg_set z A \\<subseteq> phull B \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  p - (lcf p / lcf b) \\<cdot> b \\<noteq> 0\n  lpp ((lcf p / lcf b) \\<cdot> b) = lpp p\n  lcf ((lcf p / lcf b) \\<cdot> b) = lcf p", "have \"lpp (p - ?b) \\<prec> lpp p\""], ["proof (prove)\nusing this:\n  p - (lcf p / lcf b) \\<cdot> b \\<noteq> 0\n  lpp ((lcf p / lcf b) \\<cdot> b) = lpp p\n  lcf ((lcf p / lcf b) \\<cdot> b) = lcf p\n\ngoal (1 subgoal):\n 1. lpp (p - (lcf p / lcf b) \\<cdot> b) \\<prec> lpp p", "by (rule punit.lt_minus_lessI)"], ["proof (state)\nthis:\n  lpp (p - (lcf p / lcf b) \\<cdot> b) \\<prec> lpp p\n\ngoal (1 subgoal):\n 1. \\<not> hom_deg_set z A \\<subseteq> phull B \\<Longrightarrow> False", "hence \"punit.ord_strict_p (p - ?b) p\""], ["proof (prove)\nusing this:\n  lpp (p - (lcf p / lcf b) \\<cdot> b) \\<prec> lpp p\n\ngoal (1 subgoal):\n 1. punit.ord_strict_p (p - (lcf p / lcf b) \\<cdot> b) p", "by (rule punit.lt_ord_p)"], ["proof (state)\nthis:\n  punit.ord_strict_p (p - (lcf p / lcf b) \\<cdot> b) p\n\ngoal (1 subgoal):\n 1. \\<not> hom_deg_set z A \\<subseteq> phull B \\<Longrightarrow> False", "hence \"p - ?b \\<notin> ?B\""], ["proof (prove)\nusing this:\n  punit.ord_strict_p (p - (lcf p / lcf b) \\<cdot> b) p\n\ngoal (1 subgoal):\n 1. p - (lcf p / lcf b) \\<cdot> b \\<notin> hom_deg_set z A - phull B", "by (rule p_min)"], ["proof (state)\nthis:\n  p - (lcf p / lcf b) \\<cdot> b \\<notin> hom_deg_set z A - phull B\n\ngoal (1 subgoal):\n 1. \\<not> hom_deg_set z A \\<subseteq> phull B \\<Longrightarrow> False", "hence \"p - ?b \\<notin> hom_deg_set z A \\<or> p - ?b \\<in> phull.span B\""], ["proof (prove)\nusing this:\n  p - (lcf p / lcf b) \\<cdot> b \\<notin> hom_deg_set z A - phull B\n\ngoal (1 subgoal):\n 1. p - (lcf p / lcf b) \\<cdot> b \\<notin> hom_deg_set z A \\<or>\n    p - (lcf p / lcf b) \\<cdot> b \\<in> phull B", "by simp"], ["proof (state)\nthis:\n  p - (lcf p / lcf b) \\<cdot> b \\<notin> hom_deg_set z A \\<or>\n  p - (lcf p / lcf b) \\<cdot> b \\<in> phull B\n\ngoal (1 subgoal):\n 1. \\<not> hom_deg_set z A \\<subseteq> phull B \\<Longrightarrow> False", "thus False"], ["proof (prove)\nusing this:\n  p - (lcf p / lcf b) \\<cdot> b \\<notin> hom_deg_set z A \\<or>\n  p - (lcf p / lcf b) \\<cdot> b \\<in> phull B\n\ngoal (1 subgoal):\n 1. False", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. p - (lcf p / lcf b) \\<cdot> b \\<notin> hom_deg_set z A \\<Longrightarrow>\n    False\n 2. p - (lcf p / lcf b) \\<cdot> b \\<in> phull B \\<Longrightarrow> False", "assume *: \"p - ?b \\<notin> hom_deg_set z A\""], ["proof (state)\nthis:\n  p - (lcf p / lcf b) \\<cdot> b \\<notin> hom_deg_set z A\n\ngoal (2 subgoals):\n 1. p - (lcf p / lcf b) \\<cdot> b \\<notin> hom_deg_set z A \\<Longrightarrow>\n    False\n 2. p - (lcf p / lcf b) \\<cdot> b \\<in> phull B \\<Longrightarrow> False", "from phull.subspace_scale"], ["proof (chain)\npicking this:\n  \\<lbrakk>phull.subspace ?S; ?x \\<in> ?S\\<rbrakk>\n  \\<Longrightarrow> ?c \\<cdot> ?x \\<in> ?S", "have \"?b \\<in> hom_deg_set z A\""], ["proof (prove)\nusing this:\n  \\<lbrakk>phull.subspace ?S; ?x \\<in> ?S\\<rbrakk>\n  \\<Longrightarrow> ?c \\<cdot> ?x \\<in> ?S\n\ngoal (1 subgoal):\n 1. (lcf p / lcf b) \\<cdot> b \\<in> hom_deg_set z A", "proof (rule hom_deg_set_closed_scalar)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>a. a \\<in> A \\<Longrightarrow> phull.subspace A\n 2. \\<And>a. a \\<in> A \\<Longrightarrow> a \\<in> A\n 3. b \\<in> hom_deg_set z A", "show \"phull.subspace A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. phull.subspace A", "by fact"], ["proof (state)\nthis:\n  phull.subspace A\n\ngoal (2 subgoals):\n 1. \\<And>a. a \\<in> A \\<Longrightarrow> a \\<in> A\n 2. b \\<in> hom_deg_set z A", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a. a \\<in> A \\<Longrightarrow> a \\<in> A\n 2. b \\<in> hom_deg_set z A", "show \"b \\<in> hom_deg_set z A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. b \\<in> hom_deg_set z A", "by fact"], ["proof (state)\nthis:\n  b \\<in> hom_deg_set z A\n\ngoal (1 subgoal):\n 1. \\<And>a. a \\<in> A \\<Longrightarrow> a \\<in> A", "qed"], ["proof (state)\nthis:\n  (lcf p / lcf b) \\<cdot> b \\<in> hom_deg_set z A\n\ngoal (2 subgoals):\n 1. p - (lcf p / lcf b) \\<cdot> b \\<notin> hom_deg_set z A \\<Longrightarrow>\n    False\n 2. p - (lcf p / lcf b) \\<cdot> b \\<in> phull B \\<Longrightarrow> False", "with phull.subspace_diff \\<open>p \\<in> hom_deg_set z A\\<close>"], ["proof (chain)\npicking this:\n  \\<lbrakk>phull.subspace ?S; ?x \\<in> ?S; ?y \\<in> ?S\\<rbrakk>\n  \\<Longrightarrow> ?x - ?y \\<in> ?S\n  p \\<in> hom_deg_set z A\n  (lcf p / lcf b) \\<cdot> b \\<in> hom_deg_set z A", "have \"p - ?b \\<in> hom_deg_set z A\""], ["proof (prove)\nusing this:\n  \\<lbrakk>phull.subspace ?S; ?x \\<in> ?S; ?y \\<in> ?S\\<rbrakk>\n  \\<Longrightarrow> ?x - ?y \\<in> ?S\n  p \\<in> hom_deg_set z A\n  (lcf p / lcf b) \\<cdot> b \\<in> hom_deg_set z A\n\ngoal (1 subgoal):\n 1. p - (lcf p / lcf b) \\<cdot> b \\<in> hom_deg_set z A", "by (rule hom_deg_set_closed_minus) (rule assms(3))"], ["proof (state)\nthis:\n  p - (lcf p / lcf b) \\<cdot> b \\<in> hom_deg_set z A\n\ngoal (2 subgoals):\n 1. p - (lcf p / lcf b) \\<cdot> b \\<notin> hom_deg_set z A \\<Longrightarrow>\n    False\n 2. p - (lcf p / lcf b) \\<cdot> b \\<in> phull B \\<Longrightarrow> False", "with *"], ["proof (chain)\npicking this:\n  p - (lcf p / lcf b) \\<cdot> b \\<notin> hom_deg_set z A\n  p - (lcf p / lcf b) \\<cdot> b \\<in> hom_deg_set z A", "show ?thesis"], ["proof (prove)\nusing this:\n  p - (lcf p / lcf b) \\<cdot> b \\<notin> hom_deg_set z A\n  p - (lcf p / lcf b) \\<cdot> b \\<in> hom_deg_set z A\n\ngoal (1 subgoal):\n 1. False", ".."], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. p - (lcf p / lcf b) \\<cdot> b \\<in> phull B \\<Longrightarrow> False", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. p - (lcf p / lcf b) \\<cdot> b \\<in> phull B \\<Longrightarrow> False", "assume \"p - ?b \\<in> phull.span B\""], ["proof (state)\nthis:\n  p - (lcf p / lcf b) \\<cdot> b \\<in> phull B\n\ngoal (1 subgoal):\n 1. p - (lcf p / lcf b) \\<cdot> b \\<in> phull B \\<Longrightarrow> False", "hence \"p - ?b + ?b \\<in> phull.span B\""], ["proof (prove)\nusing this:\n  p - (lcf p / lcf b) \\<cdot> b \\<in> phull B\n\ngoal (1 subgoal):\n 1. p - (lcf p / lcf b) \\<cdot> b + (lcf p / lcf b) \\<cdot> b \\<in> phull B", "using \\<open>?b \\<in> phull.span B\\<close>"], ["proof (prove)\nusing this:\n  p - (lcf p / lcf b) \\<cdot> b \\<in> phull B\n  (lcf p / lcf b) \\<cdot> b \\<in> phull B\n\ngoal (1 subgoal):\n 1. p - (lcf p / lcf b) \\<cdot> b + (lcf p / lcf b) \\<cdot> b \\<in> phull B", "by (rule phull.span_add)"], ["proof (state)\nthis:\n  p - (lcf p / lcf b) \\<cdot> b + (lcf p / lcf b) \\<cdot> b \\<in> phull B\n\ngoal (1 subgoal):\n 1. p - (lcf p / lcf b) \\<cdot> b \\<in> phull B \\<Longrightarrow> False", "hence \"p \\<in> phull.span B\""], ["proof (prove)\nusing this:\n  p - (lcf p / lcf b) \\<cdot> b + (lcf p / lcf b) \\<cdot> b \\<in> phull B\n\ngoal (1 subgoal):\n 1. p \\<in> phull B", "by simp"], ["proof (state)\nthis:\n  p \\<in> phull B\n\ngoal (1 subgoal):\n 1. p - (lcf p / lcf b) \\<cdot> b \\<in> phull B \\<Longrightarrow> False", "with \\<open>p \\<notin> phull.span B\\<close>"], ["proof (chain)\npicking this:\n  p \\<notin> phull B\n  p \\<in> phull B", "show ?thesis"], ["proof (prove)\nusing this:\n  p \\<notin> phull B\n  p \\<in> phull B\n\ngoal (1 subgoal):\n 1. False", ".."], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  hom_deg_set z A \\<subseteq> phull B\n\ngoal (1 subgoal):\n 1. phull (hom_deg_set z A) \\<subseteq> phull B", "finally"], ["proof (chain)\npicking this:\n  phull (hom_deg_set z A) \\<subseteq> phull B", "show \"phull.span (hom_deg_set z A) \\<subseteq> phull.span B\""], ["proof (prove)\nusing this:\n  phull (hom_deg_set z A) \\<subseteq> phull B\n\ngoal (1 subgoal):\n 1. phull (hom_deg_set z A) \\<subseteq> phull B", "."], ["proof (state)\nthis:\n  phull (hom_deg_set z A) \\<subseteq> phull B\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  phull B = phull (hom_deg_set z A)\n\ngoal (1 subgoal):\n 1. phull.independent B", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. phull.independent B", "show \"phull.independent B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. phull.independent B", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. phull.dependent B \\<Longrightarrow> False", "assume \"phull.dependent B\""], ["proof (state)\nthis:\n  phull.dependent B\n\ngoal (1 subgoal):\n 1. phull.dependent B \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  phull.dependent B", "obtain B' u b' where \"finite B'\" and \"B' \\<subseteq> B\" and \"(\\<Sum>b\\<in>B'. u b \\<cdot> b) = 0\"\n        and \"b' \\<in> B'\" and \"u b' \\<noteq> 0\""], ["proof (prove)\nusing this:\n  phull.dependent B\n\ngoal (1 subgoal):\n 1. (\\<And>B' u b'.\n        \\<lbrakk>finite B'; B' \\<subseteq> B;\n         (\\<Sum>b\\<in>B'. u b \\<cdot> b) = 0; b' \\<in> B';\n         u b' \\<noteq> (0::'a)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding phull.dependent_explicit"], ["proof (prove)\nusing this:\n  \\<exists>t u.\n     finite t \\<and>\n     t \\<subseteq> B \\<and>\n     (\\<Sum>v\\<in>t. u v \\<cdot> v) = 0 \\<and>\n     (\\<exists>v\\<in>t. u v \\<noteq> (0::'a))\n\ngoal (1 subgoal):\n 1. (\\<And>B' u b'.\n        \\<lbrakk>finite B'; B' \\<subseteq> B;\n         (\\<Sum>b\\<in>B'. u b \\<cdot> b) = 0; b' \\<in> B';\n         u b' \\<noteq> (0::'a)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  finite B'\n  B' \\<subseteq> B\n  (\\<Sum>b\\<in>B'. u b \\<cdot> b) = 0\n  b' \\<in> B'\n  u b' \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. phull.dependent B \\<Longrightarrow> False", "define B0 where \"B0 = {b \\<in> B'. u b \\<noteq> 0}\""], ["proof (state)\nthis:\n  B0 = {b \\<in> B'. u b \\<noteq> (0::'a)}\n\ngoal (1 subgoal):\n 1. phull.dependent B \\<Longrightarrow> False", "have \"B0 \\<subseteq> B'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. B0 \\<subseteq> B'", "by (simp add: B0_def)"], ["proof (state)\nthis:\n  B0 \\<subseteq> B'\n\ngoal (1 subgoal):\n 1. phull.dependent B \\<Longrightarrow> False", "with \\<open>finite B'\\<close>"], ["proof (chain)\npicking this:\n  finite B'\n  B0 \\<subseteq> B'", "have \"(\\<Sum>b\\<in>B0. u b \\<cdot> b) = (\\<Sum>b\\<in>B'. u b \\<cdot> b)\""], ["proof (prove)\nusing this:\n  finite B'\n  B0 \\<subseteq> B'\n\ngoal (1 subgoal):\n 1. (\\<Sum>b\\<in>B0. u b \\<cdot> b) = (\\<Sum>b\\<in>B'. u b \\<cdot> b)", "by (rule sum.mono_neutral_left) (simp add: B0_def)"], ["proof (state)\nthis:\n  (\\<Sum>b\\<in>B0. u b \\<cdot> b) = (\\<Sum>b\\<in>B'. u b \\<cdot> b)\n\ngoal (1 subgoal):\n 1. phull.dependent B \\<Longrightarrow> False", "also"], ["proof (state)\nthis:\n  (\\<Sum>b\\<in>B0. u b \\<cdot> b) = (\\<Sum>b\\<in>B'. u b \\<cdot> b)\n\ngoal (1 subgoal):\n 1. phull.dependent B \\<Longrightarrow> False", "have \"\\<dots> = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>b\\<in>B'. u b \\<cdot> b) = 0", "by fact"], ["proof (state)\nthis:\n  (\\<Sum>b\\<in>B'. u b \\<cdot> b) = 0\n\ngoal (1 subgoal):\n 1. phull.dependent B \\<Longrightarrow> False", "finally"], ["proof (chain)\npicking this:\n  (\\<Sum>b\\<in>B0. u b \\<cdot> b) = 0", "have eq: \"(\\<Sum>b\\<in>B0. u b \\<cdot> b) = 0\""], ["proof (prove)\nusing this:\n  (\\<Sum>b\\<in>B0. u b \\<cdot> b) = 0\n\ngoal (1 subgoal):\n 1. (\\<Sum>b\\<in>B0. u b \\<cdot> b) = 0", "."], ["proof (state)\nthis:\n  (\\<Sum>b\\<in>B0. u b \\<cdot> b) = 0\n\ngoal (1 subgoal):\n 1. phull.dependent B \\<Longrightarrow> False", "define t where \"t = ordered_powerprod_lin.Max (lpp ` B0)\""], ["proof (state)\nthis:\n  t = ordered_powerprod_lin.Max (lpp ` B0)\n\ngoal (1 subgoal):\n 1. phull.dependent B \\<Longrightarrow> False", "from \\<open>b' \\<in> B'\\<close> \\<open>u b' \\<noteq> 0\\<close>"], ["proof (chain)\npicking this:\n  b' \\<in> B'\n  u b' \\<noteq> (0::'a)", "have \"b' \\<in> B0\""], ["proof (prove)\nusing this:\n  b' \\<in> B'\n  u b' \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. b' \\<in> B0", "by (simp add: B0_def)"], ["proof (state)\nthis:\n  b' \\<in> B0\n\ngoal (1 subgoal):\n 1. phull.dependent B \\<Longrightarrow> False", "hence \"lpp b' \\<in> lpp ` B0\""], ["proof (prove)\nusing this:\n  b' \\<in> B0\n\ngoal (1 subgoal):\n 1. lpp b' \\<in> lpp ` B0", "by (rule imageI)"], ["proof (state)\nthis:\n  lpp b' \\<in> lpp ` B0\n\ngoal (1 subgoal):\n 1. phull.dependent B \\<Longrightarrow> False", "hence \"lpp ` B0 \\<noteq> {}\""], ["proof (prove)\nusing this:\n  lpp b' \\<in> lpp ` B0\n\ngoal (1 subgoal):\n 1. lpp ` B0 \\<noteq> {}", "by blast"], ["proof (state)\nthis:\n  lpp ` B0 \\<noteq> {}\n\ngoal (1 subgoal):\n 1. phull.dependent B \\<Longrightarrow> False", "from \\<open>B0 \\<subseteq> B'\\<close> \\<open>finite B'\\<close>"], ["proof (chain)\npicking this:\n  B0 \\<subseteq> B'\n  finite B'", "have \"finite B0\""], ["proof (prove)\nusing this:\n  B0 \\<subseteq> B'\n  finite B'\n\ngoal (1 subgoal):\n 1. finite B0", "by (rule finite_subset)"], ["proof (state)\nthis:\n  finite B0\n\ngoal (1 subgoal):\n 1. phull.dependent B \\<Longrightarrow> False", "hence \"finite (lpp ` B0)\""], ["proof (prove)\nusing this:\n  finite B0\n\ngoal (1 subgoal):\n 1. finite (lpp ` B0)", "by (rule finite_imageI)"], ["proof (state)\nthis:\n  finite (lpp ` B0)\n\ngoal (1 subgoal):\n 1. phull.dependent B \\<Longrightarrow> False", "hence \"t \\<in> lpp ` B0\""], ["proof (prove)\nusing this:\n  finite (lpp ` B0)\n\ngoal (1 subgoal):\n 1. t \\<in> lpp ` B0", "unfolding t_def"], ["proof (prove)\nusing this:\n  finite (lpp ` B0)\n\ngoal (1 subgoal):\n 1. ordered_powerprod_lin.Max (lpp ` B0) \\<in> lpp ` B0", "using \\<open>lpp ` B0 \\<noteq> {}\\<close>"], ["proof (prove)\nusing this:\n  finite (lpp ` B0)\n  lpp ` B0 \\<noteq> {}\n\ngoal (1 subgoal):\n 1. ordered_powerprod_lin.Max (lpp ` B0) \\<in> lpp ` B0", "by (rule ordered_powerprod_lin.Max_in)"], ["proof (state)\nthis:\n  t \\<in> lpp ` B0\n\ngoal (1 subgoal):\n 1. phull.dependent B \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  t \\<in> lpp ` B0", "obtain b0 where \"b0 \\<in> B0\" and t: \"t = lpp b0\""], ["proof (prove)\nusing this:\n  t \\<in> lpp ` B0\n\ngoal (1 subgoal):\n 1. (\\<And>b0.\n        \\<lbrakk>b0 \\<in> B0; t = lpp b0\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  b0 \\<in> B0\n  t = lpp b0\n\ngoal (1 subgoal):\n 1. phull.dependent B \\<Longrightarrow> False", "note this(1)"], ["proof (state)\nthis:\n  b0 \\<in> B0\n\ngoal (1 subgoal):\n 1. phull.dependent B \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  b0 \\<in> B0\n\ngoal (1 subgoal):\n 1. phull.dependent B \\<Longrightarrow> False", "from \\<open>B0 \\<subseteq> B'\\<close> \\<open>B' \\<subseteq> B\\<close>"], ["proof (chain)\npicking this:\n  B0 \\<subseteq> B'\n  B' \\<subseteq> B", "have \"B0 \\<subseteq> B\""], ["proof (prove)\nusing this:\n  B0 \\<subseteq> B'\n  B' \\<subseteq> B\n\ngoal (1 subgoal):\n 1. B0 \\<subseteq> B", "by (rule subset_trans)"], ["proof (state)\nthis:\n  B0 \\<subseteq> B\n\ngoal (1 subgoal):\n 1. phull.dependent B \\<Longrightarrow> False", "also"], ["proof (state)\nthis:\n  B0 \\<subseteq> B\n\ngoal (1 subgoal):\n 1. phull.dependent B \\<Longrightarrow> False", "have \"\\<dots> \\<subseteq> hom_deg_set z A - {0}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. B \\<subseteq> hom_deg_set z A - {0}", "by fact"], ["proof (state)\nthis:\n  B \\<subseteq> hom_deg_set z A - {0}\n\ngoal (1 subgoal):\n 1. phull.dependent B \\<Longrightarrow> False", "finally"], ["proof (chain)\npicking this:\n  b0 \\<in> hom_deg_set z A - {0}", "have \"b0 \\<in> hom_deg_set z A - {0}\""], ["proof (prove)\nusing this:\n  b0 \\<in> hom_deg_set z A - {0}\n\ngoal (1 subgoal):\n 1. b0 \\<in> hom_deg_set z A - {0}", "."], ["proof (state)\nthis:\n  b0 \\<in> hom_deg_set z A - {0}\n\ngoal (1 subgoal):\n 1. phull.dependent B \\<Longrightarrow> False", "hence \"b0 \\<noteq> 0\""], ["proof (prove)\nusing this:\n  b0 \\<in> hom_deg_set z A - {0}\n\ngoal (1 subgoal):\n 1. b0 \\<noteq> 0", "by simp"], ["proof (state)\nthis:\n  b0 \\<noteq> 0\n\ngoal (1 subgoal):\n 1. phull.dependent B \\<Longrightarrow> False", "hence \"t \\<in> keys b0\""], ["proof (prove)\nusing this:\n  b0 \\<noteq> 0\n\ngoal (1 subgoal):\n 1. t \\<in> keys b0", "unfolding t"], ["proof (prove)\nusing this:\n  b0 \\<noteq> 0\n\ngoal (1 subgoal):\n 1. lpp b0 \\<in> keys b0", "by (rule punit.lt_in_keys)"], ["proof (state)\nthis:\n  t \\<in> keys b0\n\ngoal (1 subgoal):\n 1. phull.dependent B \\<Longrightarrow> False", "have \"lookup (\\<Sum>b\\<in>B0. u b \\<cdot> b) t = (\\<Sum>b\\<in>B0. u b * lookup b t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lookup (\\<Sum>b\\<in>B0. u b \\<cdot> b) t =\n    (\\<Sum>b\\<in>B0. u b * lookup b t)", "by (simp add: lookup_sum)"], ["proof (state)\nthis:\n  lookup (\\<Sum>b\\<in>B0. u b \\<cdot> b) t =\n  (\\<Sum>b\\<in>B0. u b * lookup b t)\n\ngoal (1 subgoal):\n 1. phull.dependent B \\<Longrightarrow> False", "also"], ["proof (state)\nthis:\n  lookup (\\<Sum>b\\<in>B0. u b \\<cdot> b) t =\n  (\\<Sum>b\\<in>B0. u b * lookup b t)\n\ngoal (1 subgoal):\n 1. phull.dependent B \\<Longrightarrow> False", "from \\<open>finite B0\\<close>"], ["proof (chain)\npicking this:\n  finite B0", "have \"\\<dots> = (\\<Sum>b\\<in>{b0}. u b * lookup b t)\""], ["proof (prove)\nusing this:\n  finite B0\n\ngoal (1 subgoal):\n 1. (\\<Sum>b\\<in>B0. u b * lookup b t) =\n    (\\<Sum>b\\<in>{b0}. u b * lookup b t)", "proof (rule sum.mono_neutral_right)"], ["proof (state)\ngoal (2 subgoals):\n 1. {b0} \\<subseteq> B0\n 2. \\<forall>i\\<in>B0 - {b0}. u i * lookup i t = (0::'a)", "from \\<open>b0 \\<in> B0\\<close>"], ["proof (chain)\npicking this:\n  b0 \\<in> B0", "show \"{b0} \\<subseteq> B0\""], ["proof (prove)\nusing this:\n  b0 \\<in> B0\n\ngoal (1 subgoal):\n 1. {b0} \\<subseteq> B0", "by simp"], ["proof (state)\nthis:\n  {b0} \\<subseteq> B0\n\ngoal (1 subgoal):\n 1. \\<forall>i\\<in>B0 - {b0}. u i * lookup i t = (0::'a)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>i\\<in>B0 - {b0}. u i * lookup i t = (0::'a)", "show \"\\<forall>b\\<in>B0 - {b0}. u b * lookup b t = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>b\\<in>B0 - {b0}. u b * lookup b t = (0::'a)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>b. b \\<in> B0 - {b0} \\<Longrightarrow> u b * lookup b t = (0::'a)", "fix b"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>b. b \\<in> B0 - {b0} \\<Longrightarrow> u b * lookup b t = (0::'a)", "assume \"b \\<in> B0 - {b0}\""], ["proof (state)\nthis:\n  b \\<in> B0 - {b0}\n\ngoal (1 subgoal):\n 1. \\<And>b. b \\<in> B0 - {b0} \\<Longrightarrow> u b * lookup b t = (0::'a)", "hence \"b \\<in> B0\" and \"b \\<noteq> b0\""], ["proof (prove)\nusing this:\n  b \\<in> B0 - {b0}\n\ngoal (1 subgoal):\n 1. b \\<in> B0 &&& b \\<noteq> b0", "by simp_all"], ["proof (state)\nthis:\n  b \\<in> B0\n  b \\<noteq> b0\n\ngoal (1 subgoal):\n 1. \\<And>b. b \\<in> B0 - {b0} \\<Longrightarrow> u b * lookup b t = (0::'a)", "from this(1)"], ["proof (chain)\npicking this:\n  b \\<in> B0", "have \"lpp b \\<in> lpp ` B0\""], ["proof (prove)\nusing this:\n  b \\<in> B0\n\ngoal (1 subgoal):\n 1. lpp b \\<in> lpp ` B0", "by (rule imageI)"], ["proof (state)\nthis:\n  lpp b \\<in> lpp ` B0\n\ngoal (1 subgoal):\n 1. \\<And>b. b \\<in> B0 - {b0} \\<Longrightarrow> u b * lookup b t = (0::'a)", "with \\<open>finite (lpp ` B0)\\<close>"], ["proof (chain)\npicking this:\n  finite (lpp ` B0)\n  lpp b \\<in> lpp ` B0", "have \"lpp b \\<preceq> t\""], ["proof (prove)\nusing this:\n  finite (lpp ` B0)\n  lpp b \\<in> lpp ` B0\n\ngoal (1 subgoal):\n 1. lpp b \\<preceq> t", "unfolding t_def"], ["proof (prove)\nusing this:\n  finite (lpp ` B0)\n  lpp b \\<in> lpp ` B0\n\ngoal (1 subgoal):\n 1. lpp b \\<preceq> ordered_powerprod_lin.Max (lpp ` B0)", "by (rule ordered_powerprod_lin.Max_ge)"], ["proof (state)\nthis:\n  lpp b \\<preceq> t\n\ngoal (1 subgoal):\n 1. \\<And>b. b \\<in> B0 - {b0} \\<Longrightarrow> u b * lookup b t = (0::'a)", "have \"t \\<notin> keys b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t \\<notin> keys b", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. t \\<in> keys b \\<Longrightarrow> False", "assume \"t \\<in> keys b\""], ["proof (state)\nthis:\n  t \\<in> keys b\n\ngoal (1 subgoal):\n 1. t \\<in> keys b \\<Longrightarrow> False", "hence \"t \\<preceq> lpp b\""], ["proof (prove)\nusing this:\n  t \\<in> keys b\n\ngoal (1 subgoal):\n 1. t \\<preceq> lpp b", "by (rule punit.lt_max_keys)"], ["proof (state)\nthis:\n  t \\<preceq> lpp b\n\ngoal (1 subgoal):\n 1. t \\<in> keys b \\<Longrightarrow> False", "with \\<open>lpp b \\<preceq> t\\<close>"], ["proof (chain)\npicking this:\n  lpp b \\<preceq> t\n  t \\<preceq> lpp b", "have \"lpp b = lpp b0\""], ["proof (prove)\nusing this:\n  lpp b \\<preceq> t\n  t \\<preceq> lpp b\n\ngoal (1 subgoal):\n 1. lpp b = lpp b0", "unfolding t"], ["proof (prove)\nusing this:\n  lpp b \\<preceq> lpp b0\n  lpp b0 \\<preceq> lpp b\n\ngoal (1 subgoal):\n 1. lpp b = lpp b0", "by (rule ordered_powerprod_lin.antisym)"], ["proof (state)\nthis:\n  lpp b = lpp b0\n\ngoal (1 subgoal):\n 1. t \\<in> keys b \\<Longrightarrow> False", "from inj \\<open>B0 \\<subseteq> B\\<close>"], ["proof (chain)\npicking this:\n  inj_on lpp B\n  B0 \\<subseteq> B", "have \"inj_on lpp B0\""], ["proof (prove)\nusing this:\n  inj_on lpp B\n  B0 \\<subseteq> B\n\ngoal (1 subgoal):\n 1. inj_on lpp B0", "by (rule inj_on_subset)"], ["proof (state)\nthis:\n  inj_on lpp B0\n\ngoal (1 subgoal):\n 1. t \\<in> keys b \\<Longrightarrow> False", "hence \"b = b0\""], ["proof (prove)\nusing this:\n  inj_on lpp B0\n\ngoal (1 subgoal):\n 1. b = b0", "using \\<open>lpp b = lpp b0\\<close> \\<open>b \\<in> B0\\<close> \\<open>b0 \\<in> B0\\<close>"], ["proof (prove)\nusing this:\n  inj_on lpp B0\n  lpp b = lpp b0\n  b \\<in> B0\n  b0 \\<in> B0\n\ngoal (1 subgoal):\n 1. b = b0", "by (rule inj_onD)"], ["proof (state)\nthis:\n  b = b0\n\ngoal (1 subgoal):\n 1. t \\<in> keys b \\<Longrightarrow> False", "with \\<open>b \\<noteq> b0\\<close>"], ["proof (chain)\npicking this:\n  b \\<noteq> b0\n  b = b0", "show False"], ["proof (prove)\nusing this:\n  b \\<noteq> b0\n  b = b0\n\ngoal (1 subgoal):\n 1. False", ".."], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  t \\<notin> keys b\n\ngoal (1 subgoal):\n 1. \\<And>b. b \\<in> B0 - {b0} \\<Longrightarrow> u b * lookup b t = (0::'a)", "thus \"u b * lookup b t = 0\""], ["proof (prove)\nusing this:\n  t \\<notin> keys b\n\ngoal (1 subgoal):\n 1. u b * lookup b t = (0::'a)", "by (simp add: in_keys_iff)"], ["proof (state)\nthis:\n  u b * lookup b t = (0::'a)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>b\\<in>B0 - {b0}. u b * lookup b t = (0::'a)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<Sum>b\\<in>B0. u b * lookup b t) = (\\<Sum>b\\<in>{b0}. u b * lookup b t)\n\ngoal (1 subgoal):\n 1. phull.dependent B \\<Longrightarrow> False", "also"], ["proof (state)\nthis:\n  (\\<Sum>b\\<in>B0. u b * lookup b t) = (\\<Sum>b\\<in>{b0}. u b * lookup b t)\n\ngoal (1 subgoal):\n 1. phull.dependent B \\<Longrightarrow> False", "from \\<open>t \\<in> keys b0\\<close> \\<open>b0 \\<in> B0\\<close>"], ["proof (chain)\npicking this:\n  t \\<in> keys b0\n  b0 \\<in> B0", "have \"\\<dots> \\<noteq> 0\""], ["proof (prove)\nusing this:\n  t \\<in> keys b0\n  b0 \\<in> B0\n\ngoal (1 subgoal):\n 1. (\\<Sum>b\\<in>{b0}. u b * lookup b t) \\<noteq> (0::'a)", "by (simp add: B0_def in_keys_iff)"], ["proof (state)\nthis:\n  (\\<Sum>b\\<in>{b0}. u b * lookup b t) \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. phull.dependent B \\<Longrightarrow> False", "finally"], ["proof (chain)\npicking this:\n  lookup (\\<Sum>b\\<in>B0. u b \\<cdot> b) t \\<noteq> (0::'a)", "show False"], ["proof (prove)\nusing this:\n  lookup (\\<Sum>b\\<in>B0. u b \\<cdot> b) t \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. False", "by (simp add: eq)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  phull.independent B\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  phull.dim (hom_deg_set z A) = card B\n\ngoal (1 subgoal):\n 1. Hilbert_fun A z = card (lpp ` (hom_deg_set z A - {0}))", "also"], ["proof (state)\nthis:\n  phull.dim (hom_deg_set z A) = card B\n\ngoal (1 subgoal):\n 1. Hilbert_fun A z = card (lpp ` (hom_deg_set z A - {0}))", "have \"\\<dots> = card ?A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card B = card (lpp ` (hom_deg_set z A - {0}))", "unfolding eq1"], ["proof (prove)\ngoal (1 subgoal):\n 1. card B = card (lpp ` B)", "using inj"], ["proof (prove)\nusing this:\n  inj_on lpp B\n\ngoal (1 subgoal):\n 1. card B = card (lpp ` B)", "by (rule card_image[symmetric])"], ["proof (state)\nthis:\n  card B = card (lpp ` (hom_deg_set z A - {0}))\n\ngoal (1 subgoal):\n 1. Hilbert_fun A z = card (lpp ` (hom_deg_set z A - {0}))", "finally"], ["proof (chain)\npicking this:\n  Hilbert_fun A z = card (lpp ` (hom_deg_set z A - {0}))", "show ?thesis"], ["proof (prove)\nusing this:\n  Hilbert_fun A z = card (lpp ` (hom_deg_set z A - {0}))\n\ngoal (1 subgoal):\n 1. Hilbert_fun A z = card (lpp ` (hom_deg_set z A - {0}))", "."], ["proof (state)\nthis:\n  Hilbert_fun A z = card (lpp ` (hom_deg_set z A - {0}))\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "(* pm_powerprod *)"], ["", "end"], ["", "(* theory *)"]]}