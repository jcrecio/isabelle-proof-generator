{"file_name": "/home/qj213/afp-2021-10-22/thys/CAVA_LTL_Modelchecker/CAVA_Abstract.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/CAVA_LTL_Modelchecker", "problem_names": ["theorem abs_model_check_correct:\n  \"abs_model_check T1 T2 T3 T4 sys \\<phi> \\<le> do {\n    ASSERT (sa sys);\n    ASSERT (finite ((g_E sys)\\<^sup>* `` g_V0 sys));\n    SPEC (\\<lambda>res. case res of\n      None \\<Rightarrow> sa.lang sys \\<subseteq> language_ltlc \\<phi>\n    | Some None \\<Rightarrow> \\<not> sa.lang sys \\<subseteq> language_ltlc \\<phi>\n    | Some (Some r) \\<Rightarrow> graph_defs.is_run sys r \\<and> sa_L sys \\<circ> r \\<notin> language_ltlc \\<phi>)\n  }\"", "lemma impl_model_check_refine:\n    \"(impl_model_check cfg,abs_model_check \n        TYPE('q) TYPE('igba_more) TYPE('sq) TYPE('igbg_more)) \n      \\<in> sa_rel \\<rightarrow> ltl_rel \\<rightarrow> \\<langle>\\<langle>\\<langle>mce_rel\\<rangle>option_rel\\<rangle>option_rel\\<rangle>plain_nres_rel\"", "theorem impl_model_check_correct:\n    assumes R: \"(sysi,sys)\\<in>sa_rel\"\n    assumes [simp]: \"sa sys\" \"finite ((g_E sys)\\<^sup>* `` g_V0 sys)\"\n    shows \"case impl_model_check cfg sysi \\<phi> of\n      None \n        \\<Rightarrow> sa.lang sys \\<subseteq> language_ltlc \\<phi>\n    | Some None \n        \\<Rightarrow> \\<not> sa.lang sys \\<subseteq> language_ltlc \\<phi>\n    | Some (Some ri) \n        \\<Rightarrow> (\\<exists>r. (ri,r)\\<in>mce_rel \n           \\<and> graph_defs.is_run sys r \\<and> sa_L sys o r \\<notin> language_ltlc \\<phi>)\"", "theorem impl_model_check_correct_no_ce:\n    assumes \"(sysi,sys)\\<in>sa_rel\"\n    assumes SA: \"sa sys\" \"finite ((g_E sys)\\<^sup>* `` g_V0 sys)\"\n    shows \"impl_model_check cfg sysi \\<phi> = None \n    \\<longleftrightarrow> sa.lang sys \\<subseteq> language_ltlc \\<phi>\""], "translations": [["", "theorem abs_model_check_correct:\n  \"abs_model_check T1 T2 T3 T4 sys \\<phi> \\<le> do {\n    ASSERT (sa sys);\n    ASSERT (finite ((g_E sys)\\<^sup>* `` g_V0 sys));\n    SPEC (\\<lambda>res. case res of\n      None \\<Rightarrow> sa.lang sys \\<subseteq> language_ltlc \\<phi>\n    | Some None \\<Rightarrow> \\<not> sa.lang sys \\<subseteq> language_ltlc \\<phi>\n    | Some (Some r) \\<Rightarrow> graph_defs.is_run sys r \\<and> sa_L sys \\<circ> r \\<notin> language_ltlc \\<phi>)\n  }\""], ["proof (prove)\ngoal (1 subgoal):\n 1. abs_model_check T1 T2 T3 T4 sys \\<phi>\n    \\<le> ASSERT (sa sys) \\<bind>\n          (\\<lambda>_.\n              ASSERT (finite ((g_E sys)\\<^sup>* `` g_V0 sys)) \\<bind>\n              (\\<lambda>_.\n                  SPEC\n                   (\\<lambda>res.\n                       case res of\n                       None \\<Rightarrow>\n                         sa.lang sys \\<subseteq> language_ltlc \\<phi>\n                       | Some None \\<Rightarrow>\n                           \\<not> sa.lang sys\n                                  \\<subseteq> language_ltlc \\<phi>\n                       | Some (Some r) \\<Rightarrow>\n                           graph_defs.is_run sys r \\<and>\n                           sa_L sys \\<circ> r\n                           \\<notin> language_ltlc \\<phi>)))", "unfolding abs_model_check_def ltl_to_gba_spec_def inter_spec_def \n    find_ce_spec_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. SPEC\n     (\\<lambda>gba.\n         igba.lang gba = language_ltlc (not\\<^sub>c \\<phi>) \\<and>\n         igba gba \\<and> finite ((g_E gba)\\<^sup>* `` g_V0 gba)) \\<bind>\n    (\\<lambda>gba.\n        ASSERT (igba gba) \\<bind>\n        (\\<lambda>_.\n            ASSERT (sa sys) \\<bind>\n            (\\<lambda>_.\n                ASSERT (sa sys) \\<bind>\n                (\\<lambda>_.\n                    ASSERT (finite ((g_E sys)\\<^sup>* `` g_V0 sys)) \\<bind>\n                    (\\<lambda>_.\n                        ASSERT (igba gba) \\<bind>\n                        (\\<lambda>_.\n                            ASSERT\n                             (finite\n                               ((g_E gba)\\<^sup>* `` g_V0 gba)) \\<bind>\n                            (\\<lambda>_.\n                                SPEC\n                                 (\\<lambda>(G, project).\n                                     igb_graph G \\<and>\n                                     finite\n((g_E G)\\<^sup>* `` g_V0 G) \\<and>\n                                     (\\<forall>r.\n   (\\<exists>r'. igb_graph.is_acc_run G r' \\<and> r = project \\<circ> r') =\n   (graph_defs.is_run sys r \\<and>\n    sa_L sys \\<circ> r \\<in> igba.lang gba))))))) \\<bind>\n                (\\<lambda>(Gprod, map_state).\n                    ASSERT (igb_graph Gprod) \\<bind>\n                    (\\<lambda>_.\n                        ASSERT (igb_graph Gprod) \\<bind>\n                        (\\<lambda>_.\n                            ASSERT\n                             (finite\n                               ((g_E Gprod)\\<^sup>* `` g_V0 Gprod)) \\<bind>\n                            (\\<lambda>_.\n                                SPEC\n                                 (\\<lambda>res.\n                                     case res of\n                                     None \\<Rightarrow>\n \\<forall>r. \\<not> igb_graph.is_acc_run Gprod r\n                                     | Some None \\<Rightarrow>\n   \\<exists>r. igb_graph.is_acc_run Gprod r\n                                     | Some (Some r) \\<Rightarrow>\n   igb_graph.is_acc_run Gprod r))) \\<bind>\n                        (\\<lambda>ce.\n                            case ce of None \\<Rightarrow> RETURN None\n                            | Some None \\<Rightarrow> RETURN (Some None)\n                            | Some (Some r) \\<Rightarrow>\n                                RETURN\n                                 (Some (Some (map_state \\<circ> r)))))))))\n    \\<le> ASSERT (sa sys) \\<bind>\n          (\\<lambda>_.\n              ASSERT (finite ((g_E sys)\\<^sup>* `` g_V0 sys)) \\<bind>\n              (\\<lambda>_.\n                  SPEC\n                   (\\<lambda>res.\n                       case res of\n                       None \\<Rightarrow>\n                         sa.lang sys \\<subseteq> language_ltlc \\<phi>\n                       | Some None \\<Rightarrow>\n                           \\<not> sa.lang sys\n                                  \\<subseteq> language_ltlc \\<phi>\n                       | Some (Some r) \\<Rightarrow>\n                           graph_defs.is_run sys r \\<and>\n                           sa_L sys \\<circ> r\n                           \\<notin> language_ltlc \\<phi>)))", "apply (refine_rcg refine_vcg ASSERT_leI le_ASSERTI)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>sa sys; finite ((g_E sys)\\<^sup>* `` g_V0 sys);\n        igba.lang x = language_ltlc (not\\<^sub>c \\<phi>) \\<and>\n        igba x \\<and> finite ((g_E x)\\<^sup>* `` g_V0 x)\\<rbrakk>\n       \\<Longrightarrow> igba x\n 2. \\<And>x.\n       \\<lbrakk>sa sys; finite ((g_E sys)\\<^sup>* `` g_V0 sys);\n        igba.lang x = language_ltlc (not\\<^sub>c \\<phi>) \\<and>\n        igba x \\<and> finite ((g_E x)\\<^sup>* `` g_V0 x);\n        igba x; sa sys; sa sys; finite ((g_E sys)\\<^sup>* `` g_V0 sys);\n        igba x\\<rbrakk>\n       \\<Longrightarrow> finite ((g_E x)\\<^sup>* `` g_V0 x)\n 3. \\<And>x xa a b.\n       \\<lbrakk>sa sys; finite ((g_E sys)\\<^sup>* `` g_V0 sys);\n        igba.lang x = language_ltlc (not\\<^sub>c \\<phi>) \\<and>\n        igba x \\<and> finite ((g_E x)\\<^sup>* `` g_V0 x);\n        igba x; sa sys; sa sys; finite ((g_E sys)\\<^sup>* `` g_V0 sys);\n        igba x; finite ((g_E x)\\<^sup>* `` g_V0 x);\n        case xa of\n        (G, project) \\<Rightarrow>\n          igb_graph G \\<and>\n          finite ((g_E G)\\<^sup>* `` g_V0 G) \\<and>\n          (\\<forall>r.\n              (\\<exists>r'.\n                  igb_graph.is_acc_run G r' \\<and> r = project \\<circ> r') =\n              (graph_defs.is_run sys r \\<and>\n               sa_L sys \\<circ> r \\<in> igba.lang x));\n        xa = (a, b)\\<rbrakk>\n       \\<Longrightarrow> igb_graph a\n 4. \\<And>x xa a b.\n       \\<lbrakk>sa sys; finite ((g_E sys)\\<^sup>* `` g_V0 sys);\n        igba.lang x = language_ltlc (not\\<^sub>c \\<phi>) \\<and>\n        igba x \\<and> finite ((g_E x)\\<^sup>* `` g_V0 x);\n        igba x; sa sys; sa sys; finite ((g_E sys)\\<^sup>* `` g_V0 sys);\n        igba x; finite ((g_E x)\\<^sup>* `` g_V0 x);\n        case xa of\n        (G, project) \\<Rightarrow>\n          igb_graph G \\<and>\n          finite ((g_E G)\\<^sup>* `` g_V0 G) \\<and>\n          (\\<forall>r.\n              (\\<exists>r'.\n                  igb_graph.is_acc_run G r' \\<and> r = project \\<circ> r') =\n              (graph_defs.is_run sys r \\<and>\n               sa_L sys \\<circ> r \\<in> igba.lang x));\n        xa = (a, b); igb_graph a; igb_graph a\\<rbrakk>\n       \\<Longrightarrow> finite ((g_E a)\\<^sup>* `` g_V0 a)\n 5. \\<And>x xa a b xb.\n       \\<lbrakk>sa sys; finite ((g_E sys)\\<^sup>* `` g_V0 sys);\n        igba.lang x = language_ltlc (not\\<^sub>c \\<phi>) \\<and>\n        igba x \\<and> finite ((g_E x)\\<^sup>* `` g_V0 x);\n        igba x; sa sys; sa sys; finite ((g_E sys)\\<^sup>* `` g_V0 sys);\n        igba x; finite ((g_E x)\\<^sup>* `` g_V0 x);\n        case xa of\n        (G, project) \\<Rightarrow>\n          igb_graph G \\<and>\n          finite ((g_E G)\\<^sup>* `` g_V0 G) \\<and>\n          (\\<forall>r.\n              (\\<exists>r'.\n                  igb_graph.is_acc_run G r' \\<and> r = project \\<circ> r') =\n              (graph_defs.is_run sys r \\<and>\n               sa_L sys \\<circ> r \\<in> igba.lang x));\n        xa = (a, b); igb_graph a; igb_graph a;\n        finite ((g_E a)\\<^sup>* `` g_V0 a);\n        case xb of\n        None \\<Rightarrow> \\<forall>r. \\<not> igb_graph.is_acc_run a r\n        | Some None \\<Rightarrow> \\<exists>r. igb_graph.is_acc_run a r\n        | Some (Some r) \\<Rightarrow> igb_graph.is_acc_run a r;\n        xb = None\\<rbrakk>\n       \\<Longrightarrow> case None of\n                         None \\<Rightarrow>\n                           sa.lang sys \\<subseteq> language_ltlc \\<phi>\n                         | Some None \\<Rightarrow>\n                             \\<not> sa.lang sys\n                                    \\<subseteq> language_ltlc \\<phi>\n                         | Some (Some r) \\<Rightarrow>\n                             graph_defs.is_run sys r \\<and>\n                             sa_L sys \\<circ> r\n                             \\<notin> language_ltlc \\<phi>\n 6. \\<And>x xa a b xb xc.\n       \\<lbrakk>sa sys; finite ((g_E sys)\\<^sup>* `` g_V0 sys);\n        igba.lang x = language_ltlc (not\\<^sub>c \\<phi>) \\<and>\n        igba x \\<and> finite ((g_E x)\\<^sup>* `` g_V0 x);\n        igba x; sa sys; sa sys; finite ((g_E sys)\\<^sup>* `` g_V0 sys);\n        igba x; finite ((g_E x)\\<^sup>* `` g_V0 x);\n        case xa of\n        (G, project) \\<Rightarrow>\n          igb_graph G \\<and>\n          finite ((g_E G)\\<^sup>* `` g_V0 G) \\<and>\n          (\\<forall>r.\n              (\\<exists>r'.\n                  igb_graph.is_acc_run G r' \\<and> r = project \\<circ> r') =\n              (graph_defs.is_run sys r \\<and>\n               sa_L sys \\<circ> r \\<in> igba.lang x));\n        xa = (a, b); igb_graph a; igb_graph a;\n        finite ((g_E a)\\<^sup>* `` g_V0 a);\n        case xb of\n        None \\<Rightarrow> \\<forall>r. \\<not> igb_graph.is_acc_run a r\n        | Some None \\<Rightarrow> \\<exists>r. igb_graph.is_acc_run a r\n        | Some (Some r) \\<Rightarrow> igb_graph.is_acc_run a r;\n        xb = Some xc; xc = None\\<rbrakk>\n       \\<Longrightarrow> case Some None of\n                         None \\<Rightarrow>\n                           sa.lang sys \\<subseteq> language_ltlc \\<phi>\n                         | Some None \\<Rightarrow>\n                             \\<not> sa.lang sys\n                                    \\<subseteq> language_ltlc \\<phi>\n                         | Some (Some r) \\<Rightarrow>\n                             graph_defs.is_run sys r \\<and>\n                             sa_L sys \\<circ> r\n                             \\<notin> language_ltlc \\<phi>\n 7. \\<And>x xa a b xb xc xd.\n       \\<lbrakk>sa sys; finite ((g_E sys)\\<^sup>* `` g_V0 sys);\n        igba.lang x = language_ltlc (not\\<^sub>c \\<phi>) \\<and>\n        igba x \\<and> finite ((g_E x)\\<^sup>* `` g_V0 x);\n        igba x; sa sys; sa sys; finite ((g_E sys)\\<^sup>* `` g_V0 sys);\n        igba x; finite ((g_E x)\\<^sup>* `` g_V0 x);\n        case xa of\n        (G, project) \\<Rightarrow>\n          igb_graph G \\<and>\n          finite ((g_E G)\\<^sup>* `` g_V0 G) \\<and>\n          (\\<forall>r.\n              (\\<exists>r'.\n                  igb_graph.is_acc_run G r' \\<and> r = project \\<circ> r') =\n              (graph_defs.is_run sys r \\<and>\n               sa_L sys \\<circ> r \\<in> igba.lang x));\n        xa = (a, b); igb_graph a; igb_graph a;\n        finite ((g_E a)\\<^sup>* `` g_V0 a);\n        case xb of\n        None \\<Rightarrow> \\<forall>r. \\<not> igb_graph.is_acc_run a r\n        | Some None \\<Rightarrow> \\<exists>r. igb_graph.is_acc_run a r\n        | Some (Some r) \\<Rightarrow> igb_graph.is_acc_run a r;\n        xb = Some xc; xc = Some xd\\<rbrakk>\n       \\<Longrightarrow> case Some (Some (b \\<circ> xd)) of\n                         None \\<Rightarrow>\n                           sa.lang sys \\<subseteq> language_ltlc \\<phi>\n                         | Some None \\<Rightarrow>\n                             \\<not> sa.lang sys\n                                    \\<subseteq> language_ltlc \\<phi>\n                         | Some (Some r) \\<Rightarrow>\n                             graph_defs.is_run sys r \\<and>\n                             sa_L sys \\<circ> r\n                             \\<notin> language_ltlc \\<phi>", "apply (auto simp: sa.lang_def\n    sa.accept_def[THEN meta_eq_to_obj_eq, THEN ext[of \"sa.accept sys\"] ])"], ["proof (prove)\ngoal:\nNo subgoals!", "(* TODO: We really need an extended abs_def attribute, that digests \n      conditional definitions! *)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsection \\<open>Generic Implementation\\<close>"], ["", "text \\<open>\n  In this section, we define a generic implementation of an LTL model checker,\n  that is parameterized with implementations of its components.\n\\<close>"], ["", "abbreviation \"ltl_rel \\<equiv> Id :: ('a ltlc \\<times> _) set\""], ["", "locale impl_model_checker =\n  \\<comment> \\<open>Assembly of a generic model-checker\\<close>\n  fixes sa_rel :: \"('sai \\<times> ('s,'prop set,'sa_more) sa_rec_scheme) set\"\n  fixes igba_rel :: \"('igbai \\<times> ('q, 'prop set, 'igba_more) igba_rec_scheme) set\"\n  fixes igbg_rel :: \"('igbgi \\<times> ('sq, 'igbg_more) igb_graph_rec_scheme) set\"\n  fixes ce_rel :: \"('cei \\<times> 'sq word) set\"\n  fixes mce_rel :: \"('mcei \\<times> 's word) set\"\n  \n  fixes ltl_to_gba_impl :: \"'cfg_l2b \\<Rightarrow> 'prop ltlc \\<Rightarrow> 'igbai\"\n  fixes inter_impl :: \"'cfg_int \\<Rightarrow> 'sai \\<Rightarrow> 'igbai \\<Rightarrow> 'igbgi \\<times> ('sq \\<Rightarrow> 's)\"\n  fixes find_ce_impl :: \"'cfg_ce \\<Rightarrow> 'igbgi \\<Rightarrow> 'cei option option\"\n  fixes map_run_impl :: \"('sq \\<Rightarrow> 's) \\<Rightarrow> 'cei \\<Rightarrow> 'mcei\"\n\n  assumes [relator_props, simp, intro!]: \"single_valued mce_rel\"\n\n  assumes ltl_to_gba_refine: \n    \"\\<And>cfg. (ltl_to_gba_impl cfg,ltl_to_gba_spec) \n      \\<in> ltl_rel \\<rightarrow> \\<langle>igba_rel\\<rangle>plain_nres_rel\"\n  assumes inter_refine: \n    \"\\<And>cfg. (inter_impl cfg,inter_spec) \n      \\<in> sa_rel \\<rightarrow> igba_rel \\<rightarrow> \\<langle>igbg_rel \\<times>\\<^sub>r (Id \\<rightarrow> Id)\\<rangle>plain_nres_rel\"\n  assumes find_ce_refine: \n    \"\\<And>cfg. (find_ce_impl cfg,find_ce_spec)\n      \\<in> igbg_rel \\<rightarrow> \\<langle>\\<langle>\\<langle>ce_rel\\<rangle>option_rel\\<rangle>option_rel\\<rangle>plain_nres_rel\"\n\n  assumes map_run_refine: \"(map_run_impl,(o)) \\<in> (Id \\<rightarrow> Id) \\<rightarrow> ce_rel \\<rightarrow> mce_rel\"\n\n\nbegin"], ["", "fun cfg_l2b where \"cfg_l2b (c1,c2,c3) = c1\""], ["", "fun cfg_int where \"cfg_int (c1,c2,c3) = c2\""], ["", "fun cfg_ce where \"cfg_ce (c1,c2,c3) = c3\""], ["", "definition impl_model_check \n    :: \"('cfg_l2b\\<times>'cfg_int\\<times>'cfg_ce) \n      \\<Rightarrow> 'sai \\<Rightarrow> 'prop ltlc \\<Rightarrow> 'mcei option option\"\n    where\n    \"impl_model_check cfg sys \\<phi> \\<equiv> let\n      ba = ltl_to_gba_impl (cfg_l2b cfg) (Not_ltlc \\<phi>);\n      (G,map_q) = inter_impl (cfg_int cfg) sys ba;\n      ce = find_ce_impl (cfg_ce cfg) G\n    in\n      case ce of\n        None \\<Rightarrow> None\n      | Some None \\<Rightarrow> Some None\n      | Some (Some ce) \\<Rightarrow> Some (Some (map_run_impl map_q ce))\""], ["", "lemma impl_model_check_refine:\n    \"(impl_model_check cfg,abs_model_check \n        TYPE('q) TYPE('igba_more) TYPE('sq) TYPE('igbg_more)) \n      \\<in> sa_rel \\<rightarrow> ltl_rel \\<rightarrow> \\<langle>\\<langle>\\<langle>mce_rel\\<rangle>option_rel\\<rangle>option_rel\\<rangle>plain_nres_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (impl_model_check cfg,\n     abs_model_check TYPE('q) TYPE('igba_more) TYPE('sq) TYPE('igbg_more))\n    \\<in> sa_rel \\<rightarrow>\n          ltl_rel \\<rightarrow>\n          \\<langle>\\<langle>\\<langle>mce_rel\\<rangle>option_rel\\<rangle>option_rel\\<rangle>plain_nres_rel", "apply (intro fun_relI plain_nres_relI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a a' aa a'a.\n       \\<lbrakk>(a, a') \\<in> sa_rel; (aa, a'a) \\<in> ltl_rel\\<rbrakk>\n       \\<Longrightarrow> RETURN (impl_model_check cfg a aa)\n                         \\<le> \\<Down>\n                                (\\<langle>\\<langle>mce_rel\\<rangle>option_rel\\<rangle>option_rel)\n                                (abs_model_check TYPE('q) TYPE('igba_more)\n                                  TYPE('sq) TYPE('igbg_more) a' a'a)", "unfolding abs_model_check_def impl_model_check_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a a' aa a'a.\n       \\<lbrakk>(a, a') \\<in> sa_rel; (aa, a'a) \\<in> ltl_rel\\<rbrakk>\n       \\<Longrightarrow> RETURN\n                          (let ba = ltl_to_gba_impl (cfg_l2b cfg)\n                                     (not\\<^sub>c aa);\n                               (G, map_q) = inter_impl (cfg_int cfg) a ba;\n                               ce = find_ce_impl (cfg_ce cfg) G\n                           in case ce of None \\<Rightarrow> None\n                              | Some None \\<Rightarrow> Some None\n                              | Some (Some ce) \\<Rightarrow>\n                                  Some (Some (map_run_impl map_q ce)))\n                         \\<le> \\<Down>\n                                (\\<langle>\\<langle>mce_rel\\<rangle>option_rel\\<rangle>option_rel)\n                                (ltl_to_gba_spec (not\\<^sub>c a'a) \\<bind>\n                                 (\\<lambda>gba.\n                                     ASSERT (igba gba) \\<bind>\n                                     (\\<lambda>_.\n   ASSERT (sa a') \\<bind>\n   (\\<lambda>_.\n       inter_spec a' gba \\<bind>\n       (\\<lambda>(Gprod, map_state).\n           ASSERT (igb_graph Gprod) \\<bind>\n           (\\<lambda>_.\n               find_ce_spec Gprod \\<bind>\n               (\\<lambda>ce.\n                   case ce of None \\<Rightarrow> RETURN None\n                   | Some None \\<Rightarrow> RETURN (Some None)\n                   | Some (Some r) \\<Rightarrow>\n                       RETURN (Some (Some (map_state \\<circ> r))))))))))", "apply (simp only: let_to_bind_conv pull_out_let_conv \n      pull_out_RETURN_case_option)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a a' aa a'a.\n       \\<lbrakk>(a, a') \\<in> sa_rel; (aa, a'a) \\<in> ltl_rel\\<rbrakk>\n       \\<Longrightarrow> RETURN\n                          (ltl_to_gba_impl (cfg_l2b cfg)\n                            (not\\<^sub>c aa)) \\<bind>\n                         (\\<lambda>x.\n                             RETURN (inter_impl (cfg_int cfg) a x) \\<bind>\n                             (\\<lambda>x.\n                                 RETURN\n                                  (case x of\n                                   (G, map_q) \\<Rightarrow>\n                                     Let (find_ce_impl (cfg_ce cfg) G)\n(case_option None\n  (case_option (Some None)\n    (\\<lambda>ce. Some (Some (map_run_impl map_q ce))))))))\n                         \\<le> \\<Down>\n                                (\\<langle>\\<langle>mce_rel\\<rangle>option_rel\\<rangle>option_rel)\n                                (ltl_to_gba_spec (not\\<^sub>c a'a) \\<bind>\n                                 (\\<lambda>gba.\n                                     ASSERT (igba gba) \\<bind>\n                                     (\\<lambda>_.\n   ASSERT (sa a') \\<bind>\n   (\\<lambda>_.\n       inter_spec a' gba \\<bind>\n       (\\<lambda>(Gprod, map_state).\n           ASSERT (igb_graph Gprod) \\<bind>\n           (\\<lambda>_.\n               find_ce_spec Gprod \\<bind>\n               (\\<lambda>ce.\n                   RETURN\n                    (case ce of None \\<Rightarrow> None\n                     | Some None \\<Rightarrow> Some None\n                     | Some (Some r) \\<Rightarrow>\n                         Some (Some (map_state \\<circ> r))))))))))", "apply (refine_rcg\n      ltl_to_gba_refine[param_fo, THEN plain_nres_relD]\n      rel_arg_cong[where f=\"Not_ltlc\"]\n      inter_refine[param_fo, THEN plain_nres_relD]\n      find_ce_refine[param_fo, THEN plain_nres_relD]\n    )"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a a' aa a'a x gba xa x' x1 x2 x1a x2a.\n       \\<lbrakk>(a, a') \\<in> sa_rel; (aa, a'a) \\<in> ltl_rel;\n        (x, gba) \\<in> igba_rel; igba gba; sa a';\n        (xa, x') \\<in> igbg_rel \\<times>\\<^sub>r (Id \\<rightarrow> Id);\n        xa = (x1, x2); x' = (x1a, x2a); igb_graph x1a\\<rbrakk>\n       \\<Longrightarrow> (x1, x1a) \\<in> igbg_rel\n 2. \\<And>a a' aa a'a x gba xa x' x1 x2 x1a x2a ce.\n       \\<lbrakk>(a, a') \\<in> sa_rel; (aa, a'a) \\<in> ltl_rel;\n        (x, gba) \\<in> igba_rel; igba gba; sa a';\n        (xa, x') \\<in> igbg_rel \\<times>\\<^sub>r (Id \\<rightarrow> Id);\n        xa = (x1, x2); x' = (x1a, x2a); igb_graph x1a;\n        (find_ce_impl (cfg_ce cfg) x1, ce)\n        \\<in> \\<langle>\\<langle>ce_rel\\<rangle>option_rel\\<rangle>option_rel\\<rbrakk>\n       \\<Longrightarrow> (case find_ce_impl (cfg_ce cfg) x1 of\n                          None \\<Rightarrow> None\n                          | Some None \\<Rightarrow> Some None\n                          | Some (Some ce) \\<Rightarrow>\n                              Some (Some (map_run_impl x2 ce)),\n                          case ce of None \\<Rightarrow> None\n                          | Some None \\<Rightarrow> Some None\n                          | Some (Some r) \\<Rightarrow>\n                              Some (Some (x2a \\<circ> r)))\n                         \\<in> \\<langle>\\<langle>mce_rel\\<rangle>option_rel\\<rangle>option_rel", "apply (simp_all split: option.split)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a a' aa a'a x gba xa x' x1 x2 x1a ce.\n       \\<lbrakk>(a, a') \\<in> sa_rel; aa = a'a; (x, gba) \\<in> igba_rel;\n        igba gba; sa a'; (x1, x1a) \\<in> igbg_rel; xa = (x1, x2);\n        x' = (x1a, x2); igb_graph x1a;\n        (find_ce_impl (cfg_ce cfg) x1, ce)\n        \\<in> \\<langle>\\<langle>ce_rel\\<rangle>option_rel\\<rangle>option_rel\\<rbrakk>\n       \\<Longrightarrow> (find_ce_impl (cfg_ce cfg) x1 =\n                          None \\<longrightarrow>\n                          (\\<forall>x2.\n                              (x2 = None \\<longrightarrow>\n                               ce \\<noteq> Some None) \\<and>\n                              (\\<forall>x2a.\n                                  x2 = Some x2a \\<longrightarrow>\n                                  ce \\<noteq> Some (Some x2a)))) \\<and>\n                         (\\<forall>x2a.\n                             (x2a = None \\<longrightarrow>\n                              find_ce_impl (cfg_ce cfg) x1 =\n                              Some None \\<longrightarrow>\n                              (\\<exists>y. ce = Some y) \\<and>\n                              (\\<forall>x2.\n                                  ce \\<noteq> Some (Some x2))) \\<and>\n                             (\\<forall>x2b.\n                                 x2a = Some x2b \\<longrightarrow>\n                                 find_ce_impl (cfg_ce cfg) x1 =\n                                 Some (Some x2b) \\<longrightarrow>\n                                 (\\<exists>y. ce = Some y) \\<and>\n                                 (\\<forall>x2a.\n                                     (x2a = None \\<longrightarrow>\nce \\<noteq> Some None) \\<and>\n                                     (\\<forall>x2c.\n   x2a = Some x2c \\<longrightarrow>\n   ce = Some (Some x2c) \\<longrightarrow>\n   (map_run_impl x2 x2b, x2 \\<circ> x2c) \\<in> mce_rel))))", "apply (auto elim: option_relE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a a' x gba x1 x2 x1a x2b x2d.\n       \\<lbrakk>(a, a') \\<in> sa_rel; (x, gba) \\<in> igba_rel; igba gba;\n        sa a'; (x1, x1a) \\<in> igbg_rel; igb_graph x1a;\n        (x2b, x2d) \\<in> ce_rel;\n        find_ce_impl (cfg_ce cfg) x1 = Some (Some x2b)\\<rbrakk>\n       \\<Longrightarrow> (map_run_impl x2 x2b, x2 \\<circ> x2d) \\<in> mce_rel", "apply (parametricity add: map_run_refine)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a a' x gba x1 x2 x1a x2b x2d.\n       \\<lbrakk>(a, a') \\<in> sa_rel; (x, gba) \\<in> igba_rel; igba gba;\n        sa a'; (x1, x1a) \\<in> igbg_rel; igb_graph x1a;\n        (x2b, x2d) \\<in> ce_rel;\n        find_ce_impl (cfg_ce cfg) x1 = Some (Some x2b)\\<rbrakk>\n       \\<Longrightarrow> (x2, x2) \\<in> Id \\<rightarrow> Id", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "theorem impl_model_check_correct:\n    assumes R: \"(sysi,sys)\\<in>sa_rel\"\n    assumes [simp]: \"sa sys\" \"finite ((g_E sys)\\<^sup>* `` g_V0 sys)\"\n    shows \"case impl_model_check cfg sysi \\<phi> of\n      None \n        \\<Rightarrow> sa.lang sys \\<subseteq> language_ltlc \\<phi>\n    | Some None \n        \\<Rightarrow> \\<not> sa.lang sys \\<subseteq> language_ltlc \\<phi>\n    | Some (Some ri) \n        \\<Rightarrow> (\\<exists>r. (ri,r)\\<in>mce_rel \n           \\<and> graph_defs.is_run sys r \\<and> sa_L sys o r \\<notin> language_ltlc \\<phi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. case impl_model_check cfg sysi \\<phi> of\n    None \\<Rightarrow> sa.lang sys \\<subseteq> language_ltlc \\<phi>\n    | Some None \\<Rightarrow>\n        \\<not> sa.lang sys \\<subseteq> language_ltlc \\<phi>\n    | Some (Some ri) \\<Rightarrow>\n        \\<exists>r.\n           (ri, r) \\<in> mce_rel \\<and>\n           graph_defs.is_run sys r \\<and>\n           sa_L sys \\<circ> r \\<notin> language_ltlc \\<phi>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. case impl_model_check cfg sysi \\<phi> of\n    None \\<Rightarrow> sa.lang sys \\<subseteq> language_ltlc \\<phi>\n    | Some None \\<Rightarrow>\n        \\<not> sa.lang sys \\<subseteq> language_ltlc \\<phi>\n    | Some (Some ri) \\<Rightarrow>\n        \\<exists>r.\n           (ri, r) \\<in> mce_rel \\<and>\n           graph_defs.is_run sys r \\<and>\n           sa_L sys \\<circ> r \\<notin> language_ltlc \\<phi>", "note impl_model_check_refine[\n      where cfg=cfg,\n      param_fo, \n      THEN plain_nres_relD, \n      OF R IdI[of \\<phi>]]"], ["proof (state)\nthis:\n  RETURN (impl_model_check cfg sysi \\<phi>)\n  \\<le> \\<Down>\n         (\\<langle>\\<langle>mce_rel\\<rangle>option_rel\\<rangle>option_rel)\n         (abs_model_check TYPE('q) TYPE('igba_more) TYPE('sq)\n           TYPE('igbg_more) sys \\<phi>)\n\ngoal (1 subgoal):\n 1. case impl_model_check cfg sysi \\<phi> of\n    None \\<Rightarrow> sa.lang sys \\<subseteq> language_ltlc \\<phi>\n    | Some None \\<Rightarrow>\n        \\<not> sa.lang sys \\<subseteq> language_ltlc \\<phi>\n    | Some (Some ri) \\<Rightarrow>\n        \\<exists>r.\n           (ri, r) \\<in> mce_rel \\<and>\n           graph_defs.is_run sys r \\<and>\n           sa_L sys \\<circ> r \\<notin> language_ltlc \\<phi>", "also"], ["proof (state)\nthis:\n  RETURN (impl_model_check cfg sysi \\<phi>)\n  \\<le> \\<Down>\n         (\\<langle>\\<langle>mce_rel\\<rangle>option_rel\\<rangle>option_rel)\n         (abs_model_check TYPE('q) TYPE('igba_more) TYPE('sq)\n           TYPE('igbg_more) sys \\<phi>)\n\ngoal (1 subgoal):\n 1. case impl_model_check cfg sysi \\<phi> of\n    None \\<Rightarrow> sa.lang sys \\<subseteq> language_ltlc \\<phi>\n    | Some None \\<Rightarrow>\n        \\<not> sa.lang sys \\<subseteq> language_ltlc \\<phi>\n    | Some (Some ri) \\<Rightarrow>\n        \\<exists>r.\n           (ri, r) \\<in> mce_rel \\<and>\n           graph_defs.is_run sys r \\<and>\n           sa_L sys \\<circ> r \\<notin> language_ltlc \\<phi>", "note abs_model_check_correct"], ["proof (state)\nthis:\n  abs_model_check ?T1.0 ?T2.0 ?T3.0 ?T4.0 ?sys ?\\<phi>\n  \\<le> ASSERT (sa ?sys) \\<bind>\n        (\\<lambda>_.\n            ASSERT (finite ((g_E ?sys)\\<^sup>* `` g_V0 ?sys)) \\<bind>\n            (\\<lambda>_.\n                SPEC\n                 (\\<lambda>res.\n                     case res of\n                     None \\<Rightarrow>\n                       sa.lang ?sys \\<subseteq> language_ltlc ?\\<phi>\n                     | Some None \\<Rightarrow>\n                         \\<not> sa.lang ?sys\n                                \\<subseteq> language_ltlc ?\\<phi>\n                     | Some (Some r) \\<Rightarrow>\n                         graph_defs.is_run ?sys r \\<and>\n                         sa_L ?sys \\<circ> r\n                         \\<notin> language_ltlc ?\\<phi>)))\n\ngoal (1 subgoal):\n 1. case impl_model_check cfg sysi \\<phi> of\n    None \\<Rightarrow> sa.lang sys \\<subseteq> language_ltlc \\<phi>\n    | Some None \\<Rightarrow>\n        \\<not> sa.lang sys \\<subseteq> language_ltlc \\<phi>\n    | Some (Some ri) \\<Rightarrow>\n        \\<exists>r.\n           (ri, r) \\<in> mce_rel \\<and>\n           graph_defs.is_run sys r \\<and>\n           sa_L sys \\<circ> r \\<notin> language_ltlc \\<phi>", "finally"], ["proof (chain)\npicking this:\n  RETURN (impl_model_check cfg sysi \\<phi>)\n  \\<le> \\<Down>\n         (\\<langle>\\<langle>mce_rel\\<rangle>option_rel\\<rangle>option_rel)\n         (ASSERT (sa sys) \\<bind>\n          (\\<lambda>_.\n              ASSERT (finite ((g_E sys)\\<^sup>* `` g_V0 sys)) \\<bind>\n              (\\<lambda>_.\n                  SPEC\n                   (\\<lambda>res.\n                       case res of\n                       None \\<Rightarrow>\n                         sa.lang sys \\<subseteq> language_ltlc \\<phi>\n                       | Some None \\<Rightarrow>\n                           \\<not> sa.lang sys\n                                  \\<subseteq> language_ltlc \\<phi>\n                       | Some (Some r) \\<Rightarrow>\n                           graph_defs.is_run sys r \\<and>\n                           sa_L sys \\<circ> r\n                           \\<notin> language_ltlc \\<phi>))))", "show ?thesis"], ["proof (prove)\nusing this:\n  RETURN (impl_model_check cfg sysi \\<phi>)\n  \\<le> \\<Down>\n         (\\<langle>\\<langle>mce_rel\\<rangle>option_rel\\<rangle>option_rel)\n         (ASSERT (sa sys) \\<bind>\n          (\\<lambda>_.\n              ASSERT (finite ((g_E sys)\\<^sup>* `` g_V0 sys)) \\<bind>\n              (\\<lambda>_.\n                  SPEC\n                   (\\<lambda>res.\n                       case res of\n                       None \\<Rightarrow>\n                         sa.lang sys \\<subseteq> language_ltlc \\<phi>\n                       | Some None \\<Rightarrow>\n                           \\<not> sa.lang sys\n                                  \\<subseteq> language_ltlc \\<phi>\n                       | Some (Some r) \\<Rightarrow>\n                           graph_defs.is_run sys r \\<and>\n                           sa_L sys \\<circ> r\n                           \\<notin> language_ltlc \\<phi>))))\n\ngoal (1 subgoal):\n 1. case impl_model_check cfg sysi \\<phi> of\n    None \\<Rightarrow> sa.lang sys \\<subseteq> language_ltlc \\<phi>\n    | Some None \\<Rightarrow>\n        \\<not> sa.lang sys \\<subseteq> language_ltlc \\<phi>\n    | Some (Some ri) \\<Rightarrow>\n        \\<exists>r.\n           (ri, r) \\<in> mce_rel \\<and>\n           graph_defs.is_run sys r \\<and>\n           sa_L sys \\<circ> r \\<notin> language_ltlc \\<phi>", "apply (simp split: option.split)"], ["proof (prove)\ngoal (1 subgoal):\n 1. RETURN (impl_model_check cfg sysi \\<phi>)\n    \\<le> \\<Down>\n           (\\<langle>\\<langle>mce_rel\\<rangle>option_rel\\<rangle>option_rel)\n           (SPEC\n             (case_option (sa.lang sys \\<subseteq> language_ltlc \\<phi>)\n               (case_option\n                 (\\<not> sa.lang sys \\<subseteq> language_ltlc \\<phi>)\n                 (\\<lambda>r.\n                     graph_defs.is_run sys r \\<and>\n                     sa_L sys \\<circ> r\n                     \\<notin> language_ltlc \\<phi>)))) \\<Longrightarrow>\n    (impl_model_check cfg sysi \\<phi> = None \\<longrightarrow>\n     sa.lang sys \\<subseteq> language_ltlc \\<phi>) \\<and>\n    (\\<forall>x2.\n        (x2 = None \\<longrightarrow>\n         impl_model_check cfg sysi \\<phi> = Some None \\<longrightarrow>\n         \\<not> sa.lang sys \\<subseteq> language_ltlc \\<phi>) \\<and>\n        (\\<forall>x2a.\n            x2 = Some x2a \\<longrightarrow>\n            impl_model_check cfg sysi \\<phi> =\n            Some (Some x2a) \\<longrightarrow>\n            (\\<exists>r.\n                (x2a, r) \\<in> mce_rel \\<and>\n                graph_defs.is_run sys r \\<and>\n                sa_L sys \\<circ> r \\<notin> language_ltlc \\<phi>)))", "apply (simp add: refine_pw_simps pw_le_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s'.\n       (impl_model_check cfg sysi \\<phi>, s')\n       \\<in> \\<langle>\\<langle>mce_rel\\<rangle>option_rel\\<rangle>option_rel \\<and>\n       (case s' of\n        None \\<Rightarrow> sa.lang sys \\<subseteq> language_ltlc \\<phi>\n        | Some None \\<Rightarrow>\n            \\<not> sa.lang sys \\<subseteq> language_ltlc \\<phi>\n        | Some (Some r) \\<Rightarrow>\n            graph_defs.is_run sys r \\<and>\n            sa_L sys \\<circ> r\n            \\<notin> language_ltlc \\<phi>) \\<Longrightarrow>\n    (impl_model_check cfg sysi \\<phi> = None \\<longrightarrow>\n     sa.lang sys \\<subseteq> language_ltlc \\<phi>) \\<and>\n    (\\<forall>x2.\n        (x2 = None \\<longrightarrow>\n         impl_model_check cfg sysi \\<phi> = Some None \\<longrightarrow>\n         \\<not> sa.lang sys \\<subseteq> language_ltlc \\<phi>) \\<and>\n        (\\<forall>x2a.\n            x2 = Some x2a \\<longrightarrow>\n            impl_model_check cfg sysi \\<phi> =\n            Some (Some x2a) \\<longrightarrow>\n            (\\<exists>r.\n                (x2a, r) \\<in> mce_rel \\<and>\n                graph_defs.is_run sys r \\<and>\n                sa_L sys \\<circ> r \\<notin> language_ltlc \\<phi>)))", "apply (auto elim!: option_relE) []"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  case impl_model_check cfg sysi \\<phi> of\n  None \\<Rightarrow> sa.lang sys \\<subseteq> language_ltlc \\<phi>\n  | Some None \\<Rightarrow>\n      \\<not> sa.lang sys \\<subseteq> language_ltlc \\<phi>\n  | Some (Some ri) \\<Rightarrow>\n      \\<exists>r.\n         (ri, r) \\<in> mce_rel \\<and>\n         graph_defs.is_run sys r \\<and>\n         sa_L sys \\<circ> r \\<notin> language_ltlc \\<phi>\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem impl_model_check_correct_no_ce:\n    assumes \"(sysi,sys)\\<in>sa_rel\"\n    assumes SA: \"sa sys\" \"finite ((g_E sys)\\<^sup>* `` g_V0 sys)\"\n    shows \"impl_model_check cfg sysi \\<phi> = None \n    \\<longleftrightarrow> sa.lang sys \\<subseteq> language_ltlc \\<phi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (impl_model_check cfg sysi \\<phi> = None) =\n    (sa.lang sys \\<subseteq> language_ltlc \\<phi>)", "using impl_model_check_correct[where cfg=cfg, OF assms, of \\<phi>]"], ["proof (prove)\nusing this:\n  case impl_model_check cfg sysi \\<phi> of\n  None \\<Rightarrow> sa.lang sys \\<subseteq> language_ltlc \\<phi>\n  | Some None \\<Rightarrow>\n      \\<not> sa.lang sys \\<subseteq> language_ltlc \\<phi>\n  | Some (Some ri) \\<Rightarrow>\n      \\<exists>r.\n         (ri, r) \\<in> mce_rel \\<and>\n         graph_defs.is_run sys r \\<and>\n         sa_L sys \\<circ> r \\<notin> language_ltlc \\<phi>\n\ngoal (1 subgoal):\n 1. (impl_model_check cfg sysi \\<phi> = None) =\n    (sa.lang sys \\<subseteq> language_ltlc \\<phi>)", "by (auto \n      split: option.splits \n      simp: sa.lang_def[OF SA(1)] sa.accept_def[OF SA(1), abs_def])"], ["", "end"], ["", "end"]]}