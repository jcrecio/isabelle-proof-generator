{"file_name": "/home/qj213/afp-2021-10-22/thys/Separata/Separata.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Separata", "problem_names": ["lemma exist_comb: \"x ## y \\<Longrightarrow> \\<exists>z. (x,y\\<triangleright>z)\"", "lemma disj_comb: \n  assumes a1: \"(x,y\\<triangleright>z)\" \n  assumes a2: \"x ## w\" \n  assumes a3: \"y ## w\"\n  shows \"z ## w\"", "lemma (in -) lspasl_id: \n  \"Gamma \\<and> (A h) \\<Longrightarrow> (A h) \\<or> Delta\"", "lemma (in -) lspasl_botl: \n  \"Gamma \\<and> (sep_false h) \\<Longrightarrow> Delta\"", "lemma (in -) lspasl_topr: \n  \"gamma \\<Longrightarrow> (sep_true h) \\<or> Delta\"", "lemma lspasl_empl: \n  \"Gamma \\<and> (h = 0) \\<longrightarrow> Delta \\<Longrightarrow> \n  Gamma \\<and> (sep_empty h) \\<longrightarrow> Delta\"", "lemma lspasl_empl_inv:\n  \"Gamma \\<and> (sep_empty h) \\<longrightarrow> Delta \\<Longrightarrow>  \n  Gamma \\<and> (h = 0) \\<longrightarrow> Delta\"", "lemma lspasl_empl_der: \"sep_empty h \\<Longrightarrow> h = 0\"", "lemma lspasl_empl_eq: \"(sep_empty h) = (h = 0)\"", "lemma lspasl_empr: \n  \"Gamma \\<longrightarrow> (sep_empty 0) \\<or> Delta\"", "lemma lspasl_notl: \n  \"Gamma \\<longrightarrow> (A h) \\<or> Delta \\<Longrightarrow> \n  Gamma \\<and> ((not A) h) \\<longrightarrow> Delta\"", "lemma lspasl_notl_inv:\n  \"Gamma \\<and> ((not A) h) \\<longrightarrow> Delta \\<Longrightarrow>\n  Gamma \\<longrightarrow> (A h) \\<or> Delta\"", "lemma lspasl_notr: \n  \"Gamma \\<and> (A h) \\<longrightarrow> Delta \\<Longrightarrow> \n  Gamma \\<longrightarrow> ((not A) h) \\<or> Delta\"", "lemma lspasl_notr_inv:\n  \"Gamma \\<longrightarrow> ((not A) h) \\<or> Delta \\<Longrightarrow>\n  Gamma \\<and> (A h) \\<longrightarrow> Delta\"", "lemma lspasl_andl: \n  \"Gamma \\<and> (A h) \\<and> (B h) \\<longrightarrow> Delta \\<Longrightarrow> \n  Gamma \\<and> ((A and B) h) \\<longrightarrow> Delta\"", "lemma lspasl_andl_inv:\n  \"Gamma \\<and> ((A and B) h) \\<longrightarrow> Delta \\<Longrightarrow> \n  Gamma \\<and> (A h) \\<and> (B h) \\<longrightarrow> Delta\"", "lemma lspasl_andr: \n  \"\\<lbrakk>Gamma \\<longrightarrow> (A h) \\<or> Delta; Gamma \\<longrightarrow> (B h) \\<or> Delta\\<rbrakk> \\<Longrightarrow>\n  Gamma \\<longrightarrow> ((A and B) h) \\<or> Delta\"", "lemma lspasl_andr_inv:\n  \"Gamma \\<longrightarrow> ((A and B) h) \\<or> Delta \\<Longrightarrow>\n  (Gamma \\<longrightarrow> (A h) \\<or> Delta) \\<and> (Gamma \\<longrightarrow> (B h) \\<or> Delta)\"", "lemma lspasl_orl:\n  \"\\<lbrakk>Gamma \\<and> (A h) \\<longrightarrow> Delta; Gamma \\<and> (B h) \\<longrightarrow> Delta\\<rbrakk> \\<Longrightarrow>\n  Gamma \\<and> (A or B) h \\<longrightarrow> Delta\"", "lemma lspasl_orl_inv:\n  \"Gamma \\<and> (A or B) h \\<longrightarrow> Delta \\<Longrightarrow>\n  (Gamma \\<and> (A h) \\<longrightarrow> Delta) \\<and> (Gamma \\<and> (B h) \\<longrightarrow> Delta)\"", "lemma lspasl_orr:\n  \"Gamma \\<longrightarrow> (A h) \\<or> (B h) \\<or> Delta \\<Longrightarrow>\n  Gamma \\<longrightarrow> ((A or B) h) \\<or> Delta\"", "lemma lspasl_orr_inv:\n  \"Gamma \\<longrightarrow> ((A or B) h) \\<or> Delta \\<Longrightarrow>\n  Gamma \\<longrightarrow> (A h) \\<or> (B h) \\<or> Delta\"", "lemma lspasl_impl:\n  \"\\<lbrakk>Gamma \\<longrightarrow> (A h) \\<or> Delta; Gamma \\<and> (B h) \\<longrightarrow> Delta\\<rbrakk> \\<Longrightarrow>\n  Gamma \\<and> ((A imp B) h) \\<longrightarrow> Delta\"", "lemma lspasl_impl_inv:\n  \"Gamma \\<and> ((A imp B) h) \\<longrightarrow> Delta \\<Longrightarrow>\n  (Gamma \\<longrightarrow> (A h) \\<or> Delta) \\<and> (Gamma \\<and> (B h) \\<longrightarrow> Delta)\"", "lemma lspasl_impr:\n  \"Gamma \\<and> (A h) \\<longrightarrow> (B h) \\<or> Delta \\<Longrightarrow>\n  Gamma \\<longrightarrow> ((A imp B) h) \\<or> Delta\"", "lemma lspasl_impr_inv:\n  \"Gamma \\<longrightarrow> ((A imp B) h) \\<or> Delta \\<Longrightarrow>\n  Gamma \\<and> (A h) \\<longrightarrow> (B h) \\<or> Delta\"", "lemma lspasl_starl:\n  \"(\\<exists>h1 h2. (Gamma \\<and> (h1,h2\\<triangleright>h0) \\<and> (A h1) \\<and> (B h2))) \\<longrightarrow> Delta \\<Longrightarrow>\n  Gamma \\<and> ((A ** B) h0) \\<longrightarrow> Delta\"", "lemma lspasl_starl_inv:\n  \"Gamma \\<and> ((A ** B) h0) \\<longrightarrow> Delta \\<Longrightarrow>\n  (\\<exists>h1 h2. (Gamma \\<and> (h1,h2\\<triangleright>h0) \\<and> (A h1) \\<and> (B h2))) \\<longrightarrow> Delta\"", "lemma lspasl_starl_der:\n  \"((A ** B) h0) \\<Longrightarrow> (\\<exists>h1 h2. (h1,h2\\<triangleright>h0) \\<and> (A h1) \\<and> (B h2))\"", "lemma lspasl_starl_eq:\n  \"((A ** B) h0) = (\\<exists>h1 h2. (h1,h2\\<triangleright>h0) \\<and> (A h1) \\<and> (B h2))\"", "lemma lspasl_starr:\n  \"\\<lbrakk>Gamma \\<and> (h1,h2\\<triangleright>h0) \\<longrightarrow> (A h1) \\<or> ((A ** B) h0) \\<or> Delta; \n  Gamma \\<and> (h1,h2\\<triangleright>h0) \\<longrightarrow> (B h2) \\<or> ((A ** B) h0) \\<or> Delta\\<rbrakk> \\<Longrightarrow>\n  Gamma \\<and> (h1,h2\\<triangleright>h0) \\<longrightarrow> ((A ** B) h0) \\<or> Delta\"", "lemma lspasl_starr_inv:\n  \"Gamma \\<and> (h1,h2\\<triangleright>h0) \\<longrightarrow> ((A ** B) h0) \\<or> Delta \\<Longrightarrow> \n  (Gamma \\<and> (h1,h2\\<triangleright>h0) \\<longrightarrow> (A h1) \\<or> ((A ** B) h0) \\<or> Delta) \\<and> \n  (Gamma \\<and> (h1,h2\\<triangleright>h0) \\<longrightarrow> (B h2) \\<or> ((A ** B) h0) \\<or> Delta)\"", "lemma lspasl_starr_der:\n  \"(h1,h2\\<triangleright>h0) \\<Longrightarrow> \\<not> ((A ** B) h0) \\<Longrightarrow> \n  ((h1,h2\\<triangleright>h0) \\<and> \\<not> ((A h1) \\<or> ((A ** B) h0)) \\<and> (starr_applied h1 h2 h0 (A ** B))) \\<or> \n  ((h1,h2\\<triangleright>h0) \\<and> \\<not> ((B h2) \\<or> ((A ** B) h0)) \\<and> (starr_applied h1 h2 h0 (A ** B)))\"", "lemma lspasl_starr_eq: \n  \"((h1,h2\\<triangleright>h0) \\<and> \\<not> ((A ** B) h0)) = \n  (((h1,h2\\<triangleright>h0) \\<and> \\<not> ((A h1) \\<or> ((A ** B) h0))) \\<or> ((h1,h2\\<triangleright>h0) \\<and> \\<not> ((B h2) \\<or> ((A ** B) h0))))\"", "lemma lspasl_magicl:\n  \"\\<lbrakk>Gamma \\<and> (h1,h2\\<triangleright>h0) \\<and> ((A \\<longrightarrow>* B) h2) \\<longrightarrow> (A h1) \\<or> Delta;\n  Gamma \\<and> (h1,h2\\<triangleright>h0) \\<and> ((A \\<longrightarrow>* B) h2) \\<and> (B h0) \\<longrightarrow> Delta\\<rbrakk> \\<Longrightarrow>\n  Gamma \\<and> (h1,h2\\<triangleright>h0) \\<and> ((A \\<longrightarrow>* B) h2) \\<longrightarrow> Delta\"", "lemma lspasl_magicl_inv:\n  \"Gamma \\<and> (h1,h2\\<triangleright>h0) \\<and> ((A \\<longrightarrow>* B) h2) \\<longrightarrow> Delta \\<Longrightarrow>\n  (Gamma \\<and> (h1,h2\\<triangleright>h0) \\<and> ((A \\<longrightarrow>* B) h2) \\<longrightarrow> (A h1) \\<or> Delta) \\<and> \n  (Gamma \\<and> (h1,h2\\<triangleright>h0) \\<and> ((A \\<longrightarrow>* B) h2) \\<and> (B h0) \\<longrightarrow> Delta)\"", "lemma lspasl_magicl_der:\n  \"(h1,h2\\<triangleright>h0) \\<Longrightarrow> ((A \\<longrightarrow>* B) h2) \\<Longrightarrow>\n  ((h1,h2\\<triangleright>h0) \\<and> \\<not>(A h1) \\<and> ((A \\<longrightarrow>* B) h2) \\<and> (magicl_applied h1 h2 h0 (A \\<longrightarrow>* B))) \\<or> \n  ((h1,h2\\<triangleright>h0) \\<and> (B h0) \\<and> ((A \\<longrightarrow>* B) h2) \\<and> (magicl_applied h1 h2 h0 (A \\<longrightarrow>* B)))\"", "lemma lspasl_magicl_eq:\n  \"((h1,h2\\<triangleright>h0) \\<and> ((A \\<longrightarrow>* B) h2)) =\n  (((h1,h2\\<triangleright>h0) \\<and> \\<not>(A h1) \\<and> ((A \\<longrightarrow>* B) h2)) \\<or> ((h1,h2\\<triangleright>h0) \\<and> (B h0) \\<and> ((A \\<longrightarrow>* B) h2)))\"", "lemma lspasl_magicr:\n  \"(\\<exists>h1 h0. Gamma \\<and> (h1,h2\\<triangleright>h0) \\<and> (A h1) \\<and> ((not B) h0)) \\<longrightarrow> Delta \\<Longrightarrow>\n  Gamma \\<longrightarrow> ((A \\<longrightarrow>* B) h2) \\<or> Delta\"", "lemma lspasl_magicr_inv:\n  \"Gamma \\<longrightarrow> ((A \\<longrightarrow>* B) h2) \\<or> Delta \\<Longrightarrow>\n  (\\<exists>h1 h0. Gamma \\<and> (h1,h2\\<triangleright>h0) \\<and> (A h1) \\<and> ((not B) h0)) \\<longrightarrow> Delta\"", "lemma lspasl_magicr_der:\n  \"\\<not> ((A \\<longrightarrow>* B) h2) \\<Longrightarrow> \n  (\\<exists>h1 h0. (h1,h2\\<triangleright>h0) \\<and> (A h1) \\<and> ((not B) h0))\"", "lemma lspasl_magicr_eq:\n  \"(\\<not> ((A \\<longrightarrow>* B) h2)) = \n  ((\\<exists>h1 h0. (h1,h2\\<triangleright>h0) \\<and> (A h1) \\<and> ((not B) h0)))\"", "lemma lspasl_eq: \n  \"Gamma \\<and> (0,h2\\<triangleright>h2) \\<and> h1 = h2 \\<longrightarrow> Delta \\<Longrightarrow>\n  Gamma \\<and> (0,h1\\<triangleright>h2) \\<longrightarrow> Delta\"", "lemma lspasl_eq_inv:\n  \"Gamma \\<and> (0,h1\\<triangleright>h2) \\<longrightarrow> Delta \\<Longrightarrow>\n  Gamma \\<and> (0,h2\\<triangleright>h2) \\<and> h1 = h2 \\<longrightarrow> Delta\"", "lemma lspasl_eq_der: \"(0,h1\\<triangleright>h2) \\<Longrightarrow> ((0,h1\\<triangleright>h1) \\<and> h1 = h2)\"", "lemma lspasl_eq_eq: \"(0,h1\\<triangleright>h2) = ((0,h1\\<triangleright>h1) \\<and> (h1 = h2))\"", "lemma lspasl_u:\n  \"Gamma \\<and> (h,0\\<triangleright>h) \\<longrightarrow> Delta \\<Longrightarrow>\n  Gamma \\<longrightarrow> Delta\"", "lemma lspasl_u_inv:\n  \"Gamma \\<longrightarrow> Delta \\<Longrightarrow>\n  Gamma \\<and> (h,0\\<triangleright>h) \\<longrightarrow> Delta\"", "lemma lspasl_u_der: \"(h,0\\<triangleright>h)\"", "lemma lspasl_e:\n  \"Gamma \\<and> (h1,h2\\<triangleright>h0) \\<and> (h2,h1\\<triangleright>h0) \\<longrightarrow> Delta \\<Longrightarrow>\n  Gamma \\<and> (h1,h2\\<triangleright>h0) \\<longrightarrow> Delta\"", "lemma lspasl_e_inv:\n  \"Gamma \\<and> (h1,h2\\<triangleright>h0) \\<longrightarrow> Delta \\<Longrightarrow>\n  Gamma \\<and> (h1,h2\\<triangleright>h0) \\<and> (h2,h1\\<triangleright>h0) \\<longrightarrow> Delta\"", "lemma lspasl_e_der: \"(h1,h2\\<triangleright>h0) \\<Longrightarrow> (h1,h2\\<triangleright>h0) \\<and> (h2,h1\\<triangleright>h0)\"", "lemma lspasl_e_eq: \"(h1,h2\\<triangleright>h0) = ((h1,h2\\<triangleright>h0) \\<and> (h2,h1\\<triangleright>h0))\"", "lemma lspasl_a_der: \n  assumes a1: \"(h1,h2\\<triangleright>h0)\"\n    and a2: \"(h3,h4\\<triangleright>h1)\"\n  shows \"(\\<exists>h5. (h3,h5\\<triangleright>h0) \\<and> (h2,h4\\<triangleright>h5) \\<and> (h1,h2\\<triangleright>h0) \\<and> (h3,h4\\<triangleright>h1))\"", "lemma lspasl_a:\n  \"(\\<exists>h5. Gamma \\<and> (h3,h5\\<triangleright>h0) \\<and> (h2,h4\\<triangleright>h5) \\<and> (h1,h2\\<triangleright>h0) \\<and> (h3,h4\\<triangleright>h1)) \\<longrightarrow> Delta \\<Longrightarrow>\n  Gamma \\<and> (h1,h2\\<triangleright>h0) \\<and> (h3,h4\\<triangleright>h1) \\<longrightarrow> Delta\"", "lemma lspasl_a_inv:\n  \"Gamma \\<and> (h1,h2\\<triangleright>h0) \\<and> (h3,h4\\<triangleright>h1) \\<longrightarrow> Delta \\<Longrightarrow>\n  (\\<exists>h5. Gamma \\<and> (h3,h5\\<triangleright>h0) \\<and> (h2,h4\\<triangleright>h5) \\<and> (h1,h2\\<triangleright>h0) \\<and> (h3,h4\\<triangleright>h1)) \\<longrightarrow> Delta\"", "lemma lspasl_a_eq: \n  \"((h1,h2\\<triangleright>h0) \\<and> (h3,h4\\<triangleright>h1)) = \n  (\\<exists>h5. (h3,h5\\<triangleright>h0) \\<and> (h2,h4\\<triangleright>h5) \\<and> (h1,h2\\<triangleright>h0) \\<and> (h3,h4\\<triangleright>h1))\"", "lemma lspasl_p:\n  \"Gamma \\<and> (h1,h2\\<triangleright>h0) \\<and> h0 = h3 \\<longrightarrow> Delta \\<Longrightarrow>\n  Gamma \\<and> (h1,h2\\<triangleright>h0) \\<and> (h1,h2\\<triangleright>h3) \\<longrightarrow> Delta\"", "lemma lspasl_p_inv:\n  \"Gamma \\<and> (h1,h2\\<triangleright>h0) \\<and> (h1,h2\\<triangleright>h3) \\<longrightarrow> Delta \\<Longrightarrow>\n  Gamma \\<and> (h1,h2\\<triangleright>h0) \\<and> h0 = h3 \\<longrightarrow> Delta\"", "lemma lspasl_p_der:\n  \"(h1,h2\\<triangleright>h0) \\<Longrightarrow> (h1,h2\\<triangleright>h3) \\<Longrightarrow> (h1,h2\\<triangleright>h0) \\<and> h0 = h3\"", "lemma lspasl_p_eq: \n  \"((h1,h2\\<triangleright>h0) \\<and> (h1,h2\\<triangleright>h3)) = ((h1,h2\\<triangleright>h0) \\<and> h0 = h3)\"", "lemma lspasl_c:\n  \"Gamma \\<and> (h1,h2\\<triangleright>h0) \\<and> h2 = h3 \\<longrightarrow> Delta \\<Longrightarrow>\n  Gamma \\<and> (h1,h2\\<triangleright>h0) \\<and> (h1,h3\\<triangleright>h0) \\<longrightarrow> Delta\"", "lemma lspasl_c_inv:\n  \"Gamma \\<and> (h1,h2\\<triangleright>h0) \\<and> (h1,h3\\<triangleright>h0) \\<longrightarrow> Delta \\<Longrightarrow>\n  Gamma \\<and> (h1,h2\\<triangleright>h0) \\<and> h2 = h3 \\<longrightarrow> Delta\"", "lemma lspasl_c_der:\n  \"(h1,h2\\<triangleright>h0) \\<Longrightarrow> (h1,h3\\<triangleright>h0) \\<Longrightarrow> (h1,h2\\<triangleright>h0) \\<and> h2 = h3\"", "lemma lspasl_c_eq:\n  \"((h1,h2\\<triangleright>h0) \\<and> (h1,h3\\<triangleright>h0)) = ((h1,h2\\<triangleright>h0) \\<and> h2 = h3)\"", "lemma lspasl_iu:\n  \"Gamma \\<and> (0,h2\\<triangleright>0) \\<and> h1 = 0 \\<longrightarrow> Delta \\<Longrightarrow>\n  Gamma \\<and> (h1,h2\\<triangleright>0) \\<longrightarrow> Delta\"", "lemma lspasl_iu_inv:\n  \"Gamma \\<and> (h1,h2\\<triangleright>0) \\<longrightarrow> Delta \\<Longrightarrow>\n  Gamma \\<and> (0,h2\\<triangleright>0) \\<and> h1 = 0 \\<longrightarrow> Delta\"", "lemma lspasl_iu_der:\n  \"(h1,h2\\<triangleright>0) \\<Longrightarrow> ((0,0\\<triangleright>0) \\<and> h1 = 0 \\<and> h2 = 0)\"", "lemma lspasl_iu_eq:\n  \"(h1,h2\\<triangleright>0) = ((0,0\\<triangleright>0) \\<and> h1 = 0 \\<and> h2 = 0)\"", "lemma lspasl_d:\n  \"Gamma \\<and> (0,0\\<triangleright>h2) \\<and> h1 = 0 \\<longrightarrow> Delta \\<Longrightarrow>\n  Gamma \\<and> (h1,h1\\<triangleright>h2) \\<longrightarrow> Delta\"", "lemma lspasl_d_inv:\n  \"Gamma \\<and> (h1,h1\\<triangleright>h2) \\<longrightarrow> Delta \\<Longrightarrow>\n  Gamma \\<and> (0,0\\<triangleright>h2) \\<and> h1 = 0 \\<longrightarrow> Delta\"", "lemma lspasl_d_der:\n  \"(h1,h1\\<triangleright>h2) \\<Longrightarrow> (0,0\\<triangleright>0) \\<and> h1 = 0 \\<and> h2 = 0\"", "lemma lspasl_d_eq:\n  \"(h1,h1\\<triangleright>h2) = ((0,0\\<triangleright>0) \\<and> h1 = 0 \\<and> h2 = 0)\"", "lemma lspasl_cs_der: \n  assumes a1: \"(h1,h2\\<triangleright>h0)\" \n    and a2: \"(h3,h4\\<triangleright>h0)\" \n  shows \"(\\<exists>h5 h6 h7 h8. (h5,h6\\<triangleright>h1) \\<and> (h7,h8\\<triangleright>h2) \\<and>(h5,h7\\<triangleright>h3) \\<and> (h6,h8\\<triangleright>h4)\n    \\<and> (h1,h2\\<triangleright>h0) \\<and> (h3,h4\\<triangleright>h0))\"", "lemma lspasl_cs:\n  \"(\\<exists>h5 h6 h7 h8. Gamma \\<and> (h5,h6\\<triangleright>h1) \\<and> (h7,h8\\<triangleright>h2) \\<and>(h5,h7\\<triangleright>h3) \\<and> (h6,h8\\<triangleright>h4) \\<and> (h1,h2\\<triangleright>h0) \\<and> (h3,h4\\<triangleright>h0)) \\<longrightarrow> Delta \\<Longrightarrow>\n  Gamma \\<and> (h1,h2\\<triangleright>h0) \\<and> (h3,h4\\<triangleright>h0) \\<longrightarrow> Delta\"", "lemma lspasl_cs_inv:\n  \"Gamma \\<and> (h1,h2\\<triangleright>h0) \\<and> (h3,h4\\<triangleright>h0) \\<longrightarrow> Delta \\<Longrightarrow>\n  (\\<exists>h5 h6 h7 h8. Gamma \\<and> (h5,h6\\<triangleright>h1) \\<and> (h7,h8\\<triangleright>h2) \\<and>(h5,h7\\<triangleright>h3) \\<and> (h6,h8\\<triangleright>h4) \\<and> (h1,h2\\<triangleright>h0) \\<and> (h3,h4\\<triangleright>h0)) \\<longrightarrow> Delta\"", "lemma lspasl_cs_eq: \n  \"((h1,h2\\<triangleright>h0) \\<and> (h3,h4\\<triangleright>h0)) =\n  (\\<exists>h5 h6 h7 h8. (h5,h6\\<triangleright>h1) \\<and> (h7,h8\\<triangleright>h2) \\<and>(h5,h7\\<triangleright>h3) \\<and> (h6,h8\\<triangleright>h4) \\<and> \n  (h1,h2\\<triangleright>h0) \\<and> (h3,h4\\<triangleright>h0))\"", "lemma sep_substate_tran: \n  \"x \\<preceq> y \\<and> y \\<preceq> z \\<Longrightarrow> x \\<preceq> z\"", "lemma precise_sep_conj: \n  assumes a1:\"precise I\" and\n    a2:\"precise I'\"\n  shows \"precise (I \\<and>* I')\"", "lemma unique_subheap:\n  \"(\\<sigma>1,\\<sigma>2\\<triangleright>\\<sigma>) \\<Longrightarrow> \\<exists>!\\<sigma>2'.(\\<sigma>1,\\<sigma>2'\\<triangleright>\\<sigma>)\"", "lemma sep_split_substate:\n  \"(\\<sigma>1, \\<sigma>2\\<triangleright> \\<sigma>) \\<Longrightarrow> \n  (\\<sigma>1  \\<preceq> \\<sigma>) \\<and> (\\<sigma>2  \\<preceq> \\<sigma>)\"", "lemma fm_hard: \"((sep_empty imp (p0 \\<longrightarrow>* (((p0 ** (p0 \\<longrightarrow>* p1)) ** (not p1)) \\<longrightarrow>* \n  (p0 ** (p0 ** ((p0 \\<longrightarrow>* p1) ** (not p1))))))) imp ((((sep_empty ** p0) ** \n  (p0 ** ((p0 \\<longrightarrow>* p1) ** (not p1)))) imp (((p0 ** p0) ** (p0 \\<longrightarrow>* p1)) ** \n  (not p1))) ** sep_empty)) h\"", "lemma fm_partial: \"(((not (sep_true \\<longrightarrow>* (not sep_empty))) ** \n  (not (sep_true \\<longrightarrow>* (not sep_empty)))) imp \n  (not (sep_true \\<longrightarrow>* (not sep_empty)))) \n  (h::'a::heap_sep_algebra)\"", "lemma ax_iu: \"((sep_empty and (A ** B)) imp A) \n  (h::'a::heap_sep_algebra)\"", "lemma \"(not (((A ** (C \\<longrightarrow>* (not ((not (A \\<longrightarrow>* B)) ** C)))) and (not B)) ** C)) \n  (h::'a::heap_sep_algebra)\"", "lemma \"((sep_empty \\<longrightarrow>* (not ((not A) ** sep_empty))) imp A) \n  (h::'a::heap_sep_algebra)\"", "lemma \"(A imp (not ((not (A ** B)) and (not (A ** (not B)))))) \n  (h::'a::heap_sep_algebra)\"", "lemma \"((sep_empty and A) imp (A ** A)) \n  (h::'a::heap_sep_algebra)\"", "lemma \"(not (((A ** (C \\<longrightarrow>* (not ((not (A \\<longrightarrow>* B)) ** C)))) and (not B)) ** C)) \n  (h::'a::heap_sep_algebra)\"", "lemma \"((sep_empty \\<longrightarrow>* (not ((not A) ** sep_empty))) imp A) \n  (h::'a::heap_sep_algebra)\"", "lemma \"(sep_empty imp ((A ** B) \\<longrightarrow>* (B ** A))) \n  (h::'a::heap_sep_algebra)\"", "lemma \"(sep_empty imp ((A ** (B and C)) \\<longrightarrow>* ((A ** B) and (A ** C)))) \n  (h::'a::heap_sep_algebra)\"", "lemma \"(sep_empty imp ((A \\<longrightarrow>* (B imp C)) \\<longrightarrow>* ((A \\<longrightarrow>* B) imp (A \\<longrightarrow>* C))))\n  (h::'a::heap_sep_algebra)\"", "lemma \"(sep_empty imp (((A imp B) \\<longrightarrow>* ((A \\<longrightarrow>* A) imp A)) imp (A \\<longrightarrow>* A)))\n  (h::'a::heap_sep_algebra)\"", "lemma \"((A \\<longrightarrow>* B) and (sep_true ** (sep_empty and A)) imp B)\n  (h::'a::heap_sep_algebra)\"", "lemma \"((sep_empty \\<longrightarrow>* (not ((not A) ** sep_true))) imp A)\n  (h::'a::heap_sep_algebra)\"", "lemma \"(not ((A \\<longrightarrow>* (not (A ** B))) and (((not A) \\<longrightarrow>* (not B)) and B)))\n  (h::'a::heap_sep_algebra)\"", "lemma \"(sep_empty imp ((A \\<longrightarrow>* (B \\<longrightarrow>* C)) \\<longrightarrow>* ((A ** B) \\<longrightarrow>* C)))\n  (h::'a::heap_sep_algebra)\"", "lemma \"(sep_empty imp ((A  **  (B ** C)) \\<longrightarrow>* ((A ** B) ** C)))\n  (h::'a::heap_sep_algebra)\"", "lemma \"(sep_empty imp ((A ** ((B \\<longrightarrow>* D) ** C)) \\<longrightarrow>* ((A ** (B \\<longrightarrow>* D)) ** C)))\n  (h::'a::heap_sep_algebra)\"", "lemma \"(not (((A \\<longrightarrow>* (not ((not (D \\<longrightarrow>* (not (A ** (C ** B))))) ** A))) and C) ** (D and (A ** B))))\n  (h::'a::heap_sep_algebra)\"", "lemma \"(not ((C ** (D ** E)) and ((A \\<longrightarrow>* (not (not (B \\<longrightarrow>* not (D ** (E ** C))) ** A))) ** \n  (B and (A ** sep_true)))))\n  (h::'a::heap_sep_algebra)\"", "lemma \"(not (((A \\<longrightarrow>* (not ((not (D \\<longrightarrow>* (not ((C ** E) ** (B ** A))))) ** A))) and C) ** (D and (A ** (B ** E)))))\n  (h::'a::heap_sep_algebra)\"", "lemma \"((A ** (B ** (C ** (D ** E)))) imp (E ** (B ** (A ** (C ** D)))))\n  (h::'a::heap_sep_algebra)\"", "lemma \"((A ** (B ** (C ** (D ** (E ** (F ** G)))))) imp (G ** (E ** (B ** (A ** (C ** (D ** F)))))))\n  (h::'a::heap_sep_algebra)\"", "lemma \"(sep_empty imp ((A ** ((B \\<longrightarrow>* E) ** (C ** D))) \\<longrightarrow>* ((A ** D) ** (C ** (B \\<longrightarrow>* E)))))\n  (h::'a::heap_sep_algebra)\"", "lemma \"(not (sep_empty and A and (B ** (not (C \\<longrightarrow>* (sep_empty imp A))))))\n  (h::'a::heap_sep_algebra)\"", "lemma \"((((sep_true imp p0) imp ((p0 ** p0) \\<longrightarrow>* ((sep_true imp p0) ** (p0 ** p0)))) imp \n  (p1 \\<longrightarrow>* (((sep_true imp p0) imp ((p0 ** p0) \\<longrightarrow>* (((sep_true imp p0) ** p0) ** p0))) ** p1))))\n  (h::'a::heap_sep_algebra)\"", "lemma \"((((p1 \\<longrightarrow>*   p3) \\<longrightarrow>*   (p5 \\<longrightarrow>*   p2)) imp   ((((p7 **   p4) and   (p3 \\<longrightarrow>*   p2)) imp   \n  ((p7 **   p4) and   (p3 \\<longrightarrow>*   p2))) \\<longrightarrow>*   (((p1 \\<longrightarrow>*   p3) \\<longrightarrow>*   (p5 \\<longrightarrow>*   p2)) **   \n  (((p4 **   p7) and   (p3 \\<longrightarrow>*   p2)) imp   ((p4 **   p7) and   (p3 \\<longrightarrow>*   p2)))))))\n  (h::'a::heap_sep_algebra)\"", "lemma \"(((((p1 \\<longrightarrow>*   (p0 imp   sep_false )) imp   sep_false ) imp   (((p1 imp   sep_false ) imp   \n  ((p0 **   ((p1 imp   sep_false ) \\<longrightarrow>*   (p4 \\<longrightarrow>*   p1))) \\<longrightarrow>*   ((p1 imp   sep_false ) **   \n  (p0 **   ((p1 imp   sep_false ) \\<longrightarrow>*   (p4 \\<longrightarrow>*   p1)))))) imp   sep_false )) imp   \n  (((p1 imp   sep_false ) imp   ((p0 **   ((p1 imp   sep_false ) \\<longrightarrow>*   (p4 \\<longrightarrow>*   p1))) \\<longrightarrow>*   \n  ((p0 **   (p1 imp   sep_false )) **   ((p1 imp   sep_false ) \\<longrightarrow>*   (p4 \\<longrightarrow>*   p1))))) imp   \n  (p1 \\<longrightarrow>*   (p0 imp   sep_false )))))\n  (h::'a::heap_sep_algebra)\"", "lemma \"(((p0 imp   sep_false ) imp   ((p1 **   p0) \\<longrightarrow>*   (p1 **   ((p0 imp   sep_false ) **   \n  p0)))) imp   ((p0 imp   sep_false ) imp   ((p1 **   p0) \\<longrightarrow>*   ((p1 **   p0) **   (p0 imp   \n  sep_false )))))\n  (h::'a::heap_sep_algebra)\"", "lemma \"(sep_empty  imp   ((((p4 **   p1) \\<longrightarrow>*   ((p8 **   sep_empty ) \\<longrightarrow>*   p0)) imp   \n  (p1 \\<longrightarrow>*   (p1 **   ((p4 **   p1) \\<longrightarrow>*   ((p8 **   sep_empty ) \\<longrightarrow>*   p0))))) \\<longrightarrow>*   \n  (((p4 **   p1) \\<longrightarrow>*   ((p8 **   sep_empty ) \\<longrightarrow>*   p0)) imp   (p1 \\<longrightarrow>*   (((p1 **   p4) \\<longrightarrow>*   \n  ((p8 **   sep_empty ) \\<longrightarrow>*   p0)) **   p1)))))\n  (h::'a::heap_sep_algebra)\"", "lemma \"((((p3 imp   (p0 \\<longrightarrow>*   (p3 **   p0))) imp   sep_false ) imp   (p1 imp   sep_false )) imp   \n  (p1 imp   (p3 imp   (p0 \\<longrightarrow>*   (p0 **   p3)))))\n  (h::'a::heap_sep_algebra)\"", "lemma \"((p7 \\<longrightarrow>*   (p4 **   (p6 \\<longrightarrow>*   p1))) imp   ((p4 imp   (p1 \\<longrightarrow>*   ((sep_empty  **   \n  p1) **   p4))) \\<longrightarrow>*   ((p1 imp   (p4 \\<longrightarrow>*   (p4 **   (sep_empty  **   p1)))) **   (p7 \\<longrightarrow>*   \n  ((p6 \\<longrightarrow>*   p1) **   p4)))))\n  (h::'a::heap_sep_algebra)\"", "lemma \"(((p2 imp   p0) imp   ((p0 **   sep_true ) \\<longrightarrow>*   (p0 **   (sep_true  **   \n  (p2 imp   p0))))) imp   ((p2 imp   p0) imp   ((sep_true  **   p0) \\<longrightarrow>*   \n  (p0 **   ((p2 imp   p0) **   sep_true )))))\n  (h::'a::heap_sep_algebra)\"", "lemma \"((sep_empty  imp   ((p1 \\<longrightarrow>*   (((p2 imp   sep_false ) **   p0) **   p8)) \\<longrightarrow>*   \n  (p1 \\<longrightarrow>*   ((p2 imp   sep_false ) **   (p0 **   p8))))) imp   ((p0 **   sep_empty ) \\<longrightarrow>*   \n  ((sep_empty  imp   ((p1 \\<longrightarrow>*   ((p0 **   (p2 imp   sep_false )) **   p8)) \\<longrightarrow>*   (p1 \\<longrightarrow>*   \n  ((p2 imp   sep_false ) **   (p0 **   p8))))) **   (p0 **   sep_empty ))))\n  (h::'a::heap_sep_algebra)\"", "lemma \"((p0 \\<longrightarrow>*   sep_empty ) imp   ((sep_empty  imp   ((sep_empty  **   ((((p8 **   p7) **   \n  (p8 imp   p4)) \\<longrightarrow>*   p8) **   (p2 **   p1))) \\<longrightarrow>*   (p2 **   (((p7 **   ((p8 imp   p4) **   \n  p8)) \\<longrightarrow>*   p8) **   p1)))) \\<longrightarrow>*   ((sep_empty  imp   (((((p7 **   (p8 **   (p8 imp   p4))) \\<longrightarrow>*   \n  p8) **   sep_empty ) **   (p1 **   p2)) \\<longrightarrow>*   (((p7 **   ((p8 imp   p4) **   p8)) \\<longrightarrow>*   p8) **   \n  (p1 **   p2)))) **   (p0 \\<longrightarrow>*   sep_empty ))))\n  (h::'a::heap_sep_algebra)\""], "translations": [["", "lemma exist_comb: \"x ## y \\<Longrightarrow> \\<exists>z. (x,y\\<triangleright>z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x ## y \\<Longrightarrow> \\<exists>z. x,y\\<triangleright>z", "by (simp add: tern_rel_def)"], ["", "lemma disj_comb: \n  assumes a1: \"(x,y\\<triangleright>z)\" \n  assumes a2: \"x ## w\" \n  assumes a3: \"y ## w\"\n  shows \"z ## w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. z ## w", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. z ## w", "from a1"], ["proof (chain)\npicking this:\n  x,y\\<triangleright>z", "have f1: \"x ## y \\<and> x + y = z\""], ["proof (prove)\nusing this:\n  x,y\\<triangleright>z\n\ngoal (1 subgoal):\n 1. x ## y \\<and> x + y = z", "by (simp add: tern_rel_def)"], ["proof (state)\nthis:\n  x ## y \\<and> x + y = z\n\ngoal (1 subgoal):\n 1. z ## w", "then"], ["proof (chain)\npicking this:\n  x ## y \\<and> x + y = z", "show ?thesis"], ["proof (prove)\nusing this:\n  x ## y \\<and> x + y = z\n\ngoal (1 subgoal):\n 1. z ## w", "using a2 a3"], ["proof (prove)\nusing this:\n  x ## y \\<and> x + y = z\n  x ## w\n  y ## w\n\ngoal (1 subgoal):\n 1. z ## w", "using local.disj_dstri local.sep_disj_commuteI"], ["proof (prove)\nusing this:\n  x ## y \\<and> x + y = z\n  x ## w\n  y ## w\n  \\<lbrakk>?x ## ?y; ?y ## ?z; ?x ## ?z\\<rbrakk>\n  \\<Longrightarrow> ?x ## ?y + ?z\n  ?x ## ?y \\<Longrightarrow> ?y ## ?x\n\ngoal (1 subgoal):\n 1. z ## w", "by blast"], ["proof (state)\nthis:\n  z ## w\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>The following lemmas corresponds to inference rules in LS\\_PASL. \n  Thus these lemmas prove the soundness of LS\\_PASL. \n  We also show the invertibility of those rules.\\<close>"], ["", "lemma (in -) lspasl_id: \n  \"Gamma \\<and> (A h) \\<Longrightarrow> (A h) \\<or> Delta\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Gamma \\<and> A h \\<Longrightarrow> A h \\<or> Delta", "by simp"], ["", "lemma (in -) lspasl_botl: \n  \"Gamma \\<and> (sep_false h) \\<Longrightarrow> Delta\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Gamma \\<and> False \\<Longrightarrow> Delta", "by simp"], ["", "lemma (in -) lspasl_topr: \n  \"gamma \\<Longrightarrow> (sep_true h) \\<or> Delta\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gamma \\<Longrightarrow> True \\<or> Delta", "by simp"], ["", "lemma lspasl_empl: \n  \"Gamma \\<and> (h = 0) \\<longrightarrow> Delta \\<Longrightarrow> \n  Gamma \\<and> (sep_empty h) \\<longrightarrow> Delta\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Gamma \\<and> h = (0::'a) \\<longrightarrow> Delta \\<Longrightarrow>\n    Gamma \\<and> \\<box> h \\<longrightarrow> Delta", "by (simp add: local.sep_empty_def)"], ["", "lemma lspasl_empl_inv:\n  \"Gamma \\<and> (sep_empty h) \\<longrightarrow> Delta \\<Longrightarrow>  \n  Gamma \\<and> (h = 0) \\<longrightarrow> Delta\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Gamma \\<and> \\<box> h \\<longrightarrow> Delta \\<Longrightarrow>\n    Gamma \\<and> h = (0::'a) \\<longrightarrow> Delta", "by simp"], ["", "text \\<open>The following two lemmas are the same as applying \n  simp add: sep\\_empty\\_def.\\<close>"], ["", "lemma lspasl_empl_der: \"sep_empty h \\<Longrightarrow> h = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<box> h \\<Longrightarrow> h = (0::'a)", "by (simp add: local.sep_empty_def)"], ["", "lemma lspasl_empl_eq: \"(sep_empty h) = (h = 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<box> h = (h = (0::'a))", "by (simp add: local.sep_empty_def)"], ["", "lemma lspasl_empr: \n  \"Gamma \\<longrightarrow> (sep_empty 0) \\<or> Delta\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Gamma \\<longrightarrow> \\<box> (0::'a) \\<or> Delta", "by simp"], ["", "end"], ["", "lemma lspasl_notl: \n  \"Gamma \\<longrightarrow> (A h) \\<or> Delta \\<Longrightarrow> \n  Gamma \\<and> ((not A) h) \\<longrightarrow> Delta\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Gamma \\<longrightarrow> A h \\<or> Delta \\<Longrightarrow>\n    Gamma \\<and> \\<not> A h \\<longrightarrow> Delta", "by auto"], ["", "lemma lspasl_notl_inv:\n  \"Gamma \\<and> ((not A) h) \\<longrightarrow> Delta \\<Longrightarrow>\n  Gamma \\<longrightarrow> (A h) \\<or> Delta\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Gamma \\<and> \\<not> A h \\<longrightarrow> Delta \\<Longrightarrow>\n    Gamma \\<longrightarrow> A h \\<or> Delta", "by auto"], ["", "lemma lspasl_notr: \n  \"Gamma \\<and> (A h) \\<longrightarrow> Delta \\<Longrightarrow> \n  Gamma \\<longrightarrow> ((not A) h) \\<or> Delta\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Gamma \\<and> A h \\<longrightarrow> Delta \\<Longrightarrow>\n    Gamma \\<longrightarrow> \\<not> A h \\<or> Delta", "by simp"], ["", "lemma lspasl_notr_inv:\n  \"Gamma \\<longrightarrow> ((not A) h) \\<or> Delta \\<Longrightarrow>\n  Gamma \\<and> (A h) \\<longrightarrow> Delta\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Gamma \\<longrightarrow> \\<not> A h \\<or> Delta \\<Longrightarrow>\n    Gamma \\<and> A h \\<longrightarrow> Delta", "by simp"], ["", "lemma lspasl_andl: \n  \"Gamma \\<and> (A h) \\<and> (B h) \\<longrightarrow> Delta \\<Longrightarrow> \n  Gamma \\<and> ((A and B) h) \\<longrightarrow> Delta\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Gamma \\<and> A h \\<and> B h \\<longrightarrow> Delta \\<Longrightarrow>\n    Gamma \\<and> A h \\<and> B h \\<longrightarrow> Delta", "by simp"], ["", "lemma lspasl_andl_inv:\n  \"Gamma \\<and> ((A and B) h) \\<longrightarrow> Delta \\<Longrightarrow> \n  Gamma \\<and> (A h) \\<and> (B h) \\<longrightarrow> Delta\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Gamma \\<and> A h \\<and> B h \\<longrightarrow> Delta \\<Longrightarrow>\n    Gamma \\<and> A h \\<and> B h \\<longrightarrow> Delta", "by simp"], ["", "lemma lspasl_andr: \n  \"\\<lbrakk>Gamma \\<longrightarrow> (A h) \\<or> Delta; Gamma \\<longrightarrow> (B h) \\<or> Delta\\<rbrakk> \\<Longrightarrow>\n  Gamma \\<longrightarrow> ((A and B) h) \\<or> Delta\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Gamma \\<longrightarrow> A h \\<or> Delta;\n     Gamma \\<longrightarrow> B h \\<or> Delta\\<rbrakk>\n    \\<Longrightarrow> Gamma \\<longrightarrow> A h \\<and> B h \\<or> Delta", "by auto"], ["", "lemma lspasl_andr_inv:\n  \"Gamma \\<longrightarrow> ((A and B) h) \\<or> Delta \\<Longrightarrow>\n  (Gamma \\<longrightarrow> (A h) \\<or> Delta) \\<and> (Gamma \\<longrightarrow> (B h) \\<or> Delta)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Gamma \\<longrightarrow> A h \\<and> B h \\<or> Delta \\<Longrightarrow>\n    (Gamma \\<longrightarrow> A h \\<or> Delta) \\<and>\n    (Gamma \\<longrightarrow> B h \\<or> Delta)", "by auto"], ["", "lemma lspasl_orl:\n  \"\\<lbrakk>Gamma \\<and> (A h) \\<longrightarrow> Delta; Gamma \\<and> (B h) \\<longrightarrow> Delta\\<rbrakk> \\<Longrightarrow>\n  Gamma \\<and> (A or B) h \\<longrightarrow> Delta\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Gamma \\<and> A h \\<longrightarrow> Delta;\n     Gamma \\<and> B h \\<longrightarrow> Delta\\<rbrakk>\n    \\<Longrightarrow> Gamma \\<and> (A h \\<or> B h) \\<longrightarrow> Delta", "by auto"], ["", "lemma lspasl_orl_inv:\n  \"Gamma \\<and> (A or B) h \\<longrightarrow> Delta \\<Longrightarrow>\n  (Gamma \\<and> (A h) \\<longrightarrow> Delta) \\<and> (Gamma \\<and> (B h) \\<longrightarrow> Delta)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Gamma \\<and> (A h \\<or> B h) \\<longrightarrow> Delta \\<Longrightarrow>\n    (Gamma \\<and> A h \\<longrightarrow> Delta) \\<and>\n    (Gamma \\<and> B h \\<longrightarrow> Delta)", "by simp"], ["", "lemma lspasl_orr:\n  \"Gamma \\<longrightarrow> (A h) \\<or> (B h) \\<or> Delta \\<Longrightarrow>\n  Gamma \\<longrightarrow> ((A or B) h) \\<or> Delta\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Gamma \\<longrightarrow> A h \\<or> B h \\<or> Delta \\<Longrightarrow>\n    Gamma \\<longrightarrow> (A h \\<or> B h) \\<or> Delta", "by simp"], ["", "lemma lspasl_orr_inv:\n  \"Gamma \\<longrightarrow> ((A or B) h) \\<or> Delta \\<Longrightarrow>\n  Gamma \\<longrightarrow> (A h) \\<or> (B h) \\<or> Delta\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Gamma \\<longrightarrow> (A h \\<or> B h) \\<or> Delta \\<Longrightarrow>\n    Gamma \\<longrightarrow> A h \\<or> B h \\<or> Delta", "by simp"], ["", "lemma lspasl_impl:\n  \"\\<lbrakk>Gamma \\<longrightarrow> (A h) \\<or> Delta; Gamma \\<and> (B h) \\<longrightarrow> Delta\\<rbrakk> \\<Longrightarrow>\n  Gamma \\<and> ((A imp B) h) \\<longrightarrow> Delta\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Gamma \\<longrightarrow> A h \\<or> Delta;\n     Gamma \\<and> B h \\<longrightarrow> Delta\\<rbrakk>\n    \\<Longrightarrow> Gamma \\<and>\n                      (A h \\<longrightarrow> B h) \\<longrightarrow>\n                      Delta", "by auto"], ["", "lemma lspasl_impl_inv:\n  \"Gamma \\<and> ((A imp B) h) \\<longrightarrow> Delta \\<Longrightarrow>\n  (Gamma \\<longrightarrow> (A h) \\<or> Delta) \\<and> (Gamma \\<and> (B h) \\<longrightarrow> Delta)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Gamma \\<and> (A h \\<longrightarrow> B h) \\<longrightarrow>\n    Delta \\<Longrightarrow>\n    (Gamma \\<longrightarrow> A h \\<or> Delta) \\<and>\n    (Gamma \\<and> B h \\<longrightarrow> Delta)", "by auto"], ["", "lemma lspasl_impr:\n  \"Gamma \\<and> (A h) \\<longrightarrow> (B h) \\<or> Delta \\<Longrightarrow>\n  Gamma \\<longrightarrow> ((A imp B) h) \\<or> Delta\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Gamma \\<and> A h \\<longrightarrow> B h \\<or> Delta \\<Longrightarrow>\n    Gamma \\<longrightarrow> (A h \\<longrightarrow> B h) \\<or> Delta", "by simp"], ["", "lemma lspasl_impr_inv:\n  \"Gamma \\<longrightarrow> ((A imp B) h) \\<or> Delta \\<Longrightarrow>\n  Gamma \\<and> (A h) \\<longrightarrow> (B h) \\<or> Delta\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Gamma \\<longrightarrow>\n    (A h \\<longrightarrow> B h) \\<or> Delta \\<Longrightarrow>\n    Gamma \\<and> A h \\<longrightarrow> B h \\<or> Delta", "by simp"], ["", "context heap_sep_algebra\nbegin"], ["", "text \\<open>We don't provide lemmas for derivations for the classical connectives,\n  as Isabelle proof methods can easily deal with them.\\<close>"], ["", "lemma lspasl_starl:\n  \"(\\<exists>h1 h2. (Gamma \\<and> (h1,h2\\<triangleright>h0) \\<and> (A h1) \\<and> (B h2))) \\<longrightarrow> Delta \\<Longrightarrow>\n  Gamma \\<and> ((A ** B) h0) \\<longrightarrow> Delta\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>h1 h2.\n        Gamma \\<and>\n        (h1,h2\\<triangleright>h0) \\<and> A h1 \\<and> B h2) \\<longrightarrow>\n    Delta \\<Longrightarrow>\n    Gamma \\<and> (A \\<and>* B) h0 \\<longrightarrow> Delta", "using local.sep_conj_def"], ["proof (prove)\nusing this:\n  ?P \\<and>* ?Q \\<equiv>\n  \\<lambda>h. \\<exists>x y. x ## y \\<and> h = x + y \\<and> ?P x \\<and> ?Q y\n\ngoal (1 subgoal):\n 1. (\\<exists>h1 h2.\n        Gamma \\<and>\n        (h1,h2\\<triangleright>h0) \\<and> A h1 \\<and> B h2) \\<longrightarrow>\n    Delta \\<Longrightarrow>\n    Gamma \\<and> (A \\<and>* B) h0 \\<longrightarrow> Delta", "by (auto simp add: tern_rel_def)"], ["", "lemma lspasl_starl_inv:\n  \"Gamma \\<and> ((A ** B) h0) \\<longrightarrow> Delta \\<Longrightarrow>\n  (\\<exists>h1 h2. (Gamma \\<and> (h1,h2\\<triangleright>h0) \\<and> (A h1) \\<and> (B h2))) \\<longrightarrow> Delta\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Gamma \\<and> (A \\<and>* B) h0 \\<longrightarrow> Delta \\<Longrightarrow>\n    (\\<exists>h1 h2.\n        Gamma \\<and>\n        (h1,h2\\<triangleright>h0) \\<and> A h1 \\<and> B h2) \\<longrightarrow>\n    Delta", "using local.sep_conjI"], ["proof (prove)\nusing this:\n  \\<lbrakk>?P ?x; ?Q ?y; ?x ## ?y; ?h = ?x + ?y\\<rbrakk>\n  \\<Longrightarrow> (?P \\<and>* ?Q) ?h\n\ngoal (1 subgoal):\n 1. Gamma \\<and> (A \\<and>* B) h0 \\<longrightarrow> Delta \\<Longrightarrow>\n    (\\<exists>h1 h2.\n        Gamma \\<and>\n        (h1,h2\\<triangleright>h0) \\<and> A h1 \\<and> B h2) \\<longrightarrow>\n    Delta", "by (auto simp add: tern_rel_def)"], ["", "lemma lspasl_starl_der:\n  \"((A ** B) h0) \\<Longrightarrow> (\\<exists>h1 h2. (h1,h2\\<triangleright>h0) \\<and> (A h1) \\<and> (B h2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (A \\<and>* B) h0 \\<Longrightarrow>\n    \\<exists>h1 h2. (h1,h2\\<triangleright>h0) \\<and> A h1 \\<and> B h2", "by (metis lspasl_starl)"], ["", "lemma lspasl_starl_eq:\n  \"((A ** B) h0) = (\\<exists>h1 h2. (h1,h2\\<triangleright>h0) \\<and> (A h1) \\<and> (B h2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (A \\<and>* B) h0 =\n    (\\<exists>h1 h2. (h1,h2\\<triangleright>h0) \\<and> A h1 \\<and> B h2)", "by (metis lspasl_starl lspasl_starl_inv)"], ["", "lemma lspasl_starr:\n  \"\\<lbrakk>Gamma \\<and> (h1,h2\\<triangleright>h0) \\<longrightarrow> (A h1) \\<or> ((A ** B) h0) \\<or> Delta; \n  Gamma \\<and> (h1,h2\\<triangleright>h0) \\<longrightarrow> (B h2) \\<or> ((A ** B) h0) \\<or> Delta\\<rbrakk> \\<Longrightarrow>\n  Gamma \\<and> (h1,h2\\<triangleright>h0) \\<longrightarrow> ((A ** B) h0) \\<or> Delta\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Gamma \\<and> (h1,h2\\<triangleright>h0) \\<longrightarrow>\n             A h1 \\<or> (A \\<and>* B) h0 \\<or> Delta;\n     Gamma \\<and> (h1,h2\\<triangleright>h0) \\<longrightarrow>\n     B h2 \\<or> (A \\<and>* B) h0 \\<or> Delta\\<rbrakk>\n    \\<Longrightarrow> Gamma \\<and>\n                      (h1,h2\\<triangleright>h0) \\<longrightarrow>\n                      (A \\<and>* B) h0 \\<or> Delta", "using local.sep_conjI"], ["proof (prove)\nusing this:\n  \\<lbrakk>?P ?x; ?Q ?y; ?x ## ?y; ?h = ?x + ?y\\<rbrakk>\n  \\<Longrightarrow> (?P \\<and>* ?Q) ?h\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Gamma \\<and> (h1,h2\\<triangleright>h0) \\<longrightarrow>\n             A h1 \\<or> (A \\<and>* B) h0 \\<or> Delta;\n     Gamma \\<and> (h1,h2\\<triangleright>h0) \\<longrightarrow>\n     B h2 \\<or> (A \\<and>* B) h0 \\<or> Delta\\<rbrakk>\n    \\<Longrightarrow> Gamma \\<and>\n                      (h1,h2\\<triangleright>h0) \\<longrightarrow>\n                      (A \\<and>* B) h0 \\<or> Delta", "by (auto simp add: tern_rel_def)"], ["", "lemma lspasl_starr_inv:\n  \"Gamma \\<and> (h1,h2\\<triangleright>h0) \\<longrightarrow> ((A ** B) h0) \\<or> Delta \\<Longrightarrow> \n  (Gamma \\<and> (h1,h2\\<triangleright>h0) \\<longrightarrow> (A h1) \\<or> ((A ** B) h0) \\<or> Delta) \\<and> \n  (Gamma \\<and> (h1,h2\\<triangleright>h0) \\<longrightarrow> (B h2) \\<or> ((A ** B) h0) \\<or> Delta)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Gamma \\<and> (h1,h2\\<triangleright>h0) \\<longrightarrow>\n    (A \\<and>* B) h0 \\<or> Delta \\<Longrightarrow>\n    (Gamma \\<and> (h1,h2\\<triangleright>h0) \\<longrightarrow>\n     A h1 \\<or> (A \\<and>* B) h0 \\<or> Delta) \\<and>\n    (Gamma \\<and> (h1,h2\\<triangleright>h0) \\<longrightarrow>\n     B h2 \\<or> (A \\<and>* B) h0 \\<or> Delta)", "by simp"], ["", "text \\<open>For efficiency we only apply *R on a pair of a ternary relational atom\n  and a formula ONCE. To achieve this, we create a special predicate to indicate that\n  a pair of a ternary relational atom and a formula has already been used in\n  a *R application. \n  Note that the predicate is true even if the *R rule hasn't been applied. \n  We will not infer the truth of this predicate in proof search, but only\n  check its syntactical appearance, which is only generated by the lemma lspasl\\_starr\\_der. \n  We need to ensure that this predicate is not generated elsewhere\n  in the proof search.\\<close>"], ["", "definition starr_applied:: \"'a \\<Rightarrow> 'a \\<Rightarrow> 'a \\<Rightarrow> ('a \\<Rightarrow> bool) \\<Rightarrow> bool\" where\n  \"starr_applied h1 h2 h0 F \\<equiv> (h1,h2\\<triangleright>h0) \\<and> \\<not>(F h0)\""], ["", "lemma lspasl_starr_der:\n  \"(h1,h2\\<triangleright>h0) \\<Longrightarrow> \\<not> ((A ** B) h0) \\<Longrightarrow> \n  ((h1,h2\\<triangleright>h0) \\<and> \\<not> ((A h1) \\<or> ((A ** B) h0)) \\<and> (starr_applied h1 h2 h0 (A ** B))) \\<or> \n  ((h1,h2\\<triangleright>h0) \\<and> \\<not> ((B h2) \\<or> ((A ** B) h0)) \\<and> (starr_applied h1 h2 h0 (A ** B)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>h1,h2\\<triangleright>h0; \\<not> (A \\<and>* B) h0\\<rbrakk>\n    \\<Longrightarrow> (h1,h2\\<triangleright>h0) \\<and>\n                      \\<not> (A h1 \\<or> (A \\<and>* B) h0) \\<and>\n                      starr_applied h1 h2 h0 (A \\<and>* B) \\<or>\n                      (h1,h2\\<triangleright>h0) \\<and>\n                      \\<not> (B h2 \\<or> (A \\<and>* B) h0) \\<and>\n                      starr_applied h1 h2 h0 (A \\<and>* B)", "by (simp add: lspasl_starl_eq starr_applied_def)"], ["", "lemma lspasl_starr_eq: \n  \"((h1,h2\\<triangleright>h0) \\<and> \\<not> ((A ** B) h0)) = \n  (((h1,h2\\<triangleright>h0) \\<and> \\<not> ((A h1) \\<or> ((A ** B) h0))) \\<or> ((h1,h2\\<triangleright>h0) \\<and> \\<not> ((B h2) \\<or> ((A ** B) h0))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((h1,h2\\<triangleright>h0) \\<and> \\<not> (A \\<and>* B) h0) =\n    ((h1,h2\\<triangleright>h0) \\<and>\n     \\<not> (A h1 \\<or> (A \\<and>* B) h0) \\<or>\n     (h1,h2\\<triangleright>h0) \\<and> \\<not> (B h2 \\<or> (A \\<and>* B) h0))", "using lspasl_starr_der"], ["proof (prove)\nusing this:\n  \\<lbrakk>?h1.0,?h2.0\\<triangleright>?h0.0;\n   \\<not> (?A \\<and>* ?B) ?h0.0\\<rbrakk>\n  \\<Longrightarrow> (?h1.0,?h2.0\\<triangleright>?h0.0) \\<and>\n                    \\<not> (?A ?h1.0 \\<or> (?A \\<and>* ?B) ?h0.0) \\<and>\n                    starr_applied ?h1.0 ?h2.0 ?h0.0 (?A \\<and>* ?B) \\<or>\n                    (?h1.0,?h2.0\\<triangleright>?h0.0) \\<and>\n                    \\<not> (?B ?h2.0 \\<or> (?A \\<and>* ?B) ?h0.0) \\<and>\n                    starr_applied ?h1.0 ?h2.0 ?h0.0 (?A \\<and>* ?B)\n\ngoal (1 subgoal):\n 1. ((h1,h2\\<triangleright>h0) \\<and> \\<not> (A \\<and>* B) h0) =\n    ((h1,h2\\<triangleright>h0) \\<and>\n     \\<not> (A h1 \\<or> (A \\<and>* B) h0) \\<or>\n     (h1,h2\\<triangleright>h0) \\<and> \\<not> (B h2 \\<or> (A \\<and>* B) h0))", "by blast"], ["", "lemma lspasl_magicl:\n  \"\\<lbrakk>Gamma \\<and> (h1,h2\\<triangleright>h0) \\<and> ((A \\<longrightarrow>* B) h2) \\<longrightarrow> (A h1) \\<or> Delta;\n  Gamma \\<and> (h1,h2\\<triangleright>h0) \\<and> ((A \\<longrightarrow>* B) h2) \\<and> (B h0) \\<longrightarrow> Delta\\<rbrakk> \\<Longrightarrow>\n  Gamma \\<and> (h1,h2\\<triangleright>h0) \\<and> ((A \\<longrightarrow>* B) h2) \\<longrightarrow> Delta\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Gamma \\<and>\n             (h1,h2\\<triangleright>h0) \\<and>\n             (A \\<longrightarrow>* B) h2 \\<longrightarrow>\n             A h1 \\<or> Delta;\n     Gamma \\<and>\n     (h1,h2\\<triangleright>h0) \\<and>\n     (A \\<longrightarrow>* B) h2 \\<and> B h0 \\<longrightarrow>\n     Delta\\<rbrakk>\n    \\<Longrightarrow> Gamma \\<and>\n                      (h1,h2\\<triangleright>h0) \\<and>\n                      (A \\<longrightarrow>* B) h2 \\<longrightarrow>\n                      Delta", "using local.sep_add_commute local.sep_disj_commuteI local.sep_implD tern_rel_def"], ["proof (prove)\nusing this:\n  ?x ## ?y \\<Longrightarrow> ?x + ?y = ?y + ?x\n  ?x ## ?y \\<Longrightarrow> ?y ## ?x\n  (?x \\<longrightarrow>* ?y) ?h \\<Longrightarrow>\n  \\<forall>h'. ?h ## h' \\<and> ?x h' \\<longrightarrow> ?y (?h + h')\n  ?a,?b\\<triangleright>?c \\<equiv> ?a ## ?b \\<and> ?a + ?b = ?c\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Gamma \\<and>\n             (h1,h2\\<triangleright>h0) \\<and>\n             (A \\<longrightarrow>* B) h2 \\<longrightarrow>\n             A h1 \\<or> Delta;\n     Gamma \\<and>\n     (h1,h2\\<triangleright>h0) \\<and>\n     (A \\<longrightarrow>* B) h2 \\<and> B h0 \\<longrightarrow>\n     Delta\\<rbrakk>\n    \\<Longrightarrow> Gamma \\<and>\n                      (h1,h2\\<triangleright>h0) \\<and>\n                      (A \\<longrightarrow>* B) h2 \\<longrightarrow>\n                      Delta", "by fastforce"], ["", "lemma lspasl_magicl_inv:\n  \"Gamma \\<and> (h1,h2\\<triangleright>h0) \\<and> ((A \\<longrightarrow>* B) h2) \\<longrightarrow> Delta \\<Longrightarrow>\n  (Gamma \\<and> (h1,h2\\<triangleright>h0) \\<and> ((A \\<longrightarrow>* B) h2) \\<longrightarrow> (A h1) \\<or> Delta) \\<and> \n  (Gamma \\<and> (h1,h2\\<triangleright>h0) \\<and> ((A \\<longrightarrow>* B) h2) \\<and> (B h0) \\<longrightarrow> Delta)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Gamma \\<and>\n    (h1,h2\\<triangleright>h0) \\<and>\n    (A \\<longrightarrow>* B) h2 \\<longrightarrow>\n    Delta \\<Longrightarrow>\n    (Gamma \\<and>\n     (h1,h2\\<triangleright>h0) \\<and>\n     (A \\<longrightarrow>* B) h2 \\<longrightarrow>\n     A h1 \\<or> Delta) \\<and>\n    (Gamma \\<and>\n     (h1,h2\\<triangleright>h0) \\<and>\n     (A \\<longrightarrow>* B) h2 \\<and> B h0 \\<longrightarrow>\n     Delta)", "by simp"], ["", "text \\<open>For efficiency we only apply -*L on a pair of a ternary relational atom\n  and a formula ONCE. To achieve this, we create a special predicate to indicate that\n  a pair of a ternary relational atom and a formula has already been used in\n  a *R application. \n  Note that the predicate is true even if the *R rule hasn't been applied. \n  We will not infer the truth of this predicate in proof search, but only\n  check its syntactical appearance, which is only generated by the lemma lspasl\\_magicl\\_der.\n  We need to ensure that in the proof search of Separata, this predicate is \n  not generated elsewhere.\\<close>"], ["", "definition magicl_applied:: \"'a \\<Rightarrow> 'a \\<Rightarrow> 'a \\<Rightarrow> ('a \\<Rightarrow> bool) \\<Rightarrow> bool\" where\n  \"magicl_applied h1 h2 h0 F \\<equiv> (h1,h2\\<triangleright>h0) \\<and> (F h2)\""], ["", "lemma lspasl_magicl_der:\n  \"(h1,h2\\<triangleright>h0) \\<Longrightarrow> ((A \\<longrightarrow>* B) h2) \\<Longrightarrow>\n  ((h1,h2\\<triangleright>h0) \\<and> \\<not>(A h1) \\<and> ((A \\<longrightarrow>* B) h2) \\<and> (magicl_applied h1 h2 h0 (A \\<longrightarrow>* B))) \\<or> \n  ((h1,h2\\<triangleright>h0) \\<and> (B h0) \\<and> ((A \\<longrightarrow>* B) h2) \\<and> (magicl_applied h1 h2 h0 (A \\<longrightarrow>* B)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>h1,h2\\<triangleright>h0; (A \\<longrightarrow>* B) h2\\<rbrakk>\n    \\<Longrightarrow> (h1,h2\\<triangleright>h0) \\<and>\n                      \\<not> A h1 \\<and>\n                      (A \\<longrightarrow>* B) h2 \\<and>\n                      magicl_applied h1 h2 h0 (A \\<longrightarrow>* B) \\<or>\n                      (h1,h2\\<triangleright>h0) \\<and>\n                      B h0 \\<and>\n                      (A \\<longrightarrow>* B) h2 \\<and>\n                      magicl_applied h1 h2 h0 (A \\<longrightarrow>* B)", "by (metis lspasl_magicl magicl_applied_def)"], ["", "lemma lspasl_magicl_eq:\n  \"((h1,h2\\<triangleright>h0) \\<and> ((A \\<longrightarrow>* B) h2)) =\n  (((h1,h2\\<triangleright>h0) \\<and> \\<not>(A h1) \\<and> ((A \\<longrightarrow>* B) h2)) \\<or> ((h1,h2\\<triangleright>h0) \\<and> (B h0) \\<and> ((A \\<longrightarrow>* B) h2)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((h1,h2\\<triangleright>h0) \\<and> (A \\<longrightarrow>* B) h2) =\n    ((h1,h2\\<triangleright>h0) \\<and>\n     \\<not> A h1 \\<and> (A \\<longrightarrow>* B) h2 \\<or>\n     (h1,h2\\<triangleright>h0) \\<and>\n     B h0 \\<and> (A \\<longrightarrow>* B) h2)", "using lspasl_magicl_der"], ["proof (prove)\nusing this:\n  \\<lbrakk>?h1.0,?h2.0\\<triangleright>?h0.0;\n   (?A \\<longrightarrow>* ?B) ?h2.0\\<rbrakk>\n  \\<Longrightarrow> (?h1.0,?h2.0\\<triangleright>?h0.0) \\<and>\n                    \\<not> ?A ?h1.0 \\<and>\n                    (?A \\<longrightarrow>* ?B) ?h2.0 \\<and>\n                    magicl_applied ?h1.0 ?h2.0 ?h0.0\n                     (?A \\<longrightarrow>* ?B) \\<or>\n                    (?h1.0,?h2.0\\<triangleright>?h0.0) \\<and>\n                    ?B ?h0.0 \\<and>\n                    (?A \\<longrightarrow>* ?B) ?h2.0 \\<and>\n                    magicl_applied ?h1.0 ?h2.0 ?h0.0\n                     (?A \\<longrightarrow>* ?B)\n\ngoal (1 subgoal):\n 1. ((h1,h2\\<triangleright>h0) \\<and> (A \\<longrightarrow>* B) h2) =\n    ((h1,h2\\<triangleright>h0) \\<and>\n     \\<not> A h1 \\<and> (A \\<longrightarrow>* B) h2 \\<or>\n     (h1,h2\\<triangleright>h0) \\<and>\n     B h0 \\<and> (A \\<longrightarrow>* B) h2)", "by blast"], ["", "lemma lspasl_magicr:\n  \"(\\<exists>h1 h0. Gamma \\<and> (h1,h2\\<triangleright>h0) \\<and> (A h1) \\<and> ((not B) h0)) \\<longrightarrow> Delta \\<Longrightarrow>\n  Gamma \\<longrightarrow> ((A \\<longrightarrow>* B) h2) \\<or> Delta\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>h1 h0.\n        Gamma \\<and>\n        (h1,h2\\<triangleright>h0) \\<and>\n        A h1 \\<and> \\<not> B h0) \\<longrightarrow>\n    Delta \\<Longrightarrow>\n    Gamma \\<longrightarrow> (A \\<longrightarrow>* B) h2 \\<or> Delta", "using local.sep_add_commute local.sep_disj_commute local.sep_impl_def tern_rel_def"], ["proof (prove)\nusing this:\n  ?x ## ?y \\<Longrightarrow> ?x + ?y = ?y + ?x\n  ?x ## ?y = ?y ## ?x\n  ?P \\<longrightarrow>* ?Q \\<equiv>\n  \\<lambda>h.\n     \\<forall>h'. h ## h' \\<and> ?P h' \\<longrightarrow> ?Q (h + h')\n  ?a,?b\\<triangleright>?c \\<equiv> ?a ## ?b \\<and> ?a + ?b = ?c\n\ngoal (1 subgoal):\n 1. (\\<exists>h1 h0.\n        Gamma \\<and>\n        (h1,h2\\<triangleright>h0) \\<and>\n        A h1 \\<and> \\<not> B h0) \\<longrightarrow>\n    Delta \\<Longrightarrow>\n    Gamma \\<longrightarrow> (A \\<longrightarrow>* B) h2 \\<or> Delta", "by auto"], ["", "lemma lspasl_magicr_inv:\n  \"Gamma \\<longrightarrow> ((A \\<longrightarrow>* B) h2) \\<or> Delta \\<Longrightarrow>\n  (\\<exists>h1 h0. Gamma \\<and> (h1,h2\\<triangleright>h0) \\<and> (A h1) \\<and> ((not B) h0)) \\<longrightarrow> Delta\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Gamma \\<longrightarrow>\n    (A \\<longrightarrow>* B) h2 \\<or> Delta \\<Longrightarrow>\n    (\\<exists>h1 h0.\n        Gamma \\<and>\n        (h1,h2\\<triangleright>h0) \\<and>\n        A h1 \\<and> \\<not> B h0) \\<longrightarrow>\n    Delta", "by (metis lspasl_magicl)"], ["", "lemma lspasl_magicr_der:\n  \"\\<not> ((A \\<longrightarrow>* B) h2) \\<Longrightarrow> \n  (\\<exists>h1 h0. (h1,h2\\<triangleright>h0) \\<and> (A h1) \\<and> ((not B) h0))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> (A \\<longrightarrow>* B) h2 \\<Longrightarrow>\n    \\<exists>h1 h0. (h1,h2\\<triangleright>h0) \\<and> A h1 \\<and> \\<not> B h0", "by (metis lspasl_magicr)"], ["", "lemma lspasl_magicr_eq:\n  \"(\\<not> ((A \\<longrightarrow>* B) h2)) = \n  ((\\<exists>h1 h0. (h1,h2\\<triangleright>h0) \\<and> (A h1) \\<and> ((not B) h0)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<not> (A \\<longrightarrow>* B) h2) =\n    (\\<exists>h1 h0.\n        (h1,h2\\<triangleright>h0) \\<and> A h1 \\<and> \\<not> B h0)", "by (metis lspasl_magicl lspasl_magicr)"], ["", "lemma lspasl_eq: \n  \"Gamma \\<and> (0,h2\\<triangleright>h2) \\<and> h1 = h2 \\<longrightarrow> Delta \\<Longrightarrow>\n  Gamma \\<and> (0,h1\\<triangleright>h2) \\<longrightarrow> Delta\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Gamma \\<and>\n    (0::'a,h2\\<triangleright>h2) \\<and> h1 = h2 \\<longrightarrow>\n    Delta \\<Longrightarrow>\n    Gamma \\<and> (0::'a,h1\\<triangleright>h2) \\<longrightarrow> Delta", "by (simp add: tern_rel_def)"], ["", "lemma lspasl_eq_inv:\n  \"Gamma \\<and> (0,h1\\<triangleright>h2) \\<longrightarrow> Delta \\<Longrightarrow>\n  Gamma \\<and> (0,h2\\<triangleright>h2) \\<and> h1 = h2 \\<longrightarrow> Delta\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Gamma \\<and> (0::'a,h1\\<triangleright>h2) \\<longrightarrow>\n    Delta \\<Longrightarrow>\n    Gamma \\<and>\n    (0::'a,h2\\<triangleright>h2) \\<and> h1 = h2 \\<longrightarrow>\n    Delta", "by simp"], ["", "lemma lspasl_eq_der: \"(0,h1\\<triangleright>h2) \\<Longrightarrow> ((0,h1\\<triangleright>h1) \\<and> h1 = h2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0::'a,h1\\<triangleright>h2 \\<Longrightarrow>\n    (0::'a,h1\\<triangleright>h1) \\<and> h1 = h2", "using lspasl_eq"], ["proof (prove)\nusing this:\n  ?Gamma \\<and>\n  (0::'a,?h2.0\\<triangleright>?h2.0) \\<and> ?h1.0 = ?h2.0 \\<longrightarrow>\n  ?Delta \\<Longrightarrow>\n  ?Gamma \\<and> (0::'a,?h1.0\\<triangleright>?h2.0) \\<longrightarrow> ?Delta\n\ngoal (1 subgoal):\n 1. 0::'a,h1\\<triangleright>h2 \\<Longrightarrow>\n    (0::'a,h1\\<triangleright>h1) \\<and> h1 = h2", "by auto"], ["", "lemma lspasl_eq_eq: \"(0,h1\\<triangleright>h2) = ((0,h1\\<triangleright>h1) \\<and> (h1 = h2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (0::'a,h1\\<triangleright>h2) =\n    ((0::'a,h1\\<triangleright>h1) \\<and> h1 = h2)", "by (simp add: tern_rel_def)"], ["", "lemma lspasl_u:\n  \"Gamma \\<and> (h,0\\<triangleright>h) \\<longrightarrow> Delta \\<Longrightarrow>\n  Gamma \\<longrightarrow> Delta\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Gamma \\<and> (h,0::'a\\<triangleright>h) \\<longrightarrow>\n    Delta \\<Longrightarrow>\n    Gamma \\<longrightarrow> Delta", "by (simp add: tern_rel_def)"], ["", "lemma lspasl_u_inv:\n  \"Gamma \\<longrightarrow> Delta \\<Longrightarrow>\n  Gamma \\<and> (h,0\\<triangleright>h) \\<longrightarrow> Delta\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Gamma \\<longrightarrow> Delta \\<Longrightarrow>\n    Gamma \\<and> (h,0::'a\\<triangleright>h) \\<longrightarrow> Delta", "by simp"], ["", "lemma lspasl_u_der: \"(h,0\\<triangleright>h)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. h,0::'a\\<triangleright>h", "using lspasl_u"], ["proof (prove)\nusing this:\n  ?Gamma \\<and> (?h,0::'a\\<triangleright>?h) \\<longrightarrow>\n  ?Delta \\<Longrightarrow>\n  ?Gamma \\<longrightarrow> ?Delta\n\ngoal (1 subgoal):\n 1. h,0::'a\\<triangleright>h", "by auto"], ["", "lemma lspasl_e:\n  \"Gamma \\<and> (h1,h2\\<triangleright>h0) \\<and> (h2,h1\\<triangleright>h0) \\<longrightarrow> Delta \\<Longrightarrow>\n  Gamma \\<and> (h1,h2\\<triangleright>h0) \\<longrightarrow> Delta\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Gamma \\<and>\n    (h1,h2\\<triangleright>h0) \\<and>\n    (h2,h1\\<triangleright>h0) \\<longrightarrow>\n    Delta \\<Longrightarrow>\n    Gamma \\<and> (h1,h2\\<triangleright>h0) \\<longrightarrow> Delta", "by (simp add: local.sep_add_commute local.sep_disj_commute tern_rel_def)"], ["", "lemma lspasl_e_inv:\n  \"Gamma \\<and> (h1,h2\\<triangleright>h0) \\<longrightarrow> Delta \\<Longrightarrow>\n  Gamma \\<and> (h1,h2\\<triangleright>h0) \\<and> (h2,h1\\<triangleright>h0) \\<longrightarrow> Delta\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Gamma \\<and> (h1,h2\\<triangleright>h0) \\<longrightarrow>\n    Delta \\<Longrightarrow>\n    Gamma \\<and>\n    (h1,h2\\<triangleright>h0) \\<and>\n    (h2,h1\\<triangleright>h0) \\<longrightarrow>\n    Delta", "by simp"], ["", "lemma lspasl_e_der: \"(h1,h2\\<triangleright>h0) \\<Longrightarrow> (h1,h2\\<triangleright>h0) \\<and> (h2,h1\\<triangleright>h0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. h1,h2\\<triangleright>h0 \\<Longrightarrow>\n    (h1,h2\\<triangleright>h0) \\<and> (h2,h1\\<triangleright>h0)", "using lspasl_e"], ["proof (prove)\nusing this:\n  ?Gamma \\<and>\n  (?h1.0,?h2.0\\<triangleright>?h0.0) \\<and>\n  (?h2.0,?h1.0\\<triangleright>?h0.0) \\<longrightarrow>\n  ?Delta \\<Longrightarrow>\n  ?Gamma \\<and> (?h1.0,?h2.0\\<triangleright>?h0.0) \\<longrightarrow> ?Delta\n\ngoal (1 subgoal):\n 1. h1,h2\\<triangleright>h0 \\<Longrightarrow>\n    (h1,h2\\<triangleright>h0) \\<and> (h2,h1\\<triangleright>h0)", "by blast"], ["", "lemma lspasl_e_eq: \"(h1,h2\\<triangleright>h0) = ((h1,h2\\<triangleright>h0) \\<and> (h2,h1\\<triangleright>h0))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (h1,h2\\<triangleright>h0) =\n    ((h1,h2\\<triangleright>h0) \\<and> (h2,h1\\<triangleright>h0))", "using lspasl_e"], ["proof (prove)\nusing this:\n  ?Gamma \\<and>\n  (?h1.0,?h2.0\\<triangleright>?h0.0) \\<and>\n  (?h2.0,?h1.0\\<triangleright>?h0.0) \\<longrightarrow>\n  ?Delta \\<Longrightarrow>\n  ?Gamma \\<and> (?h1.0,?h2.0\\<triangleright>?h0.0) \\<longrightarrow> ?Delta\n\ngoal (1 subgoal):\n 1. (h1,h2\\<triangleright>h0) =\n    ((h1,h2\\<triangleright>h0) \\<and> (h2,h1\\<triangleright>h0))", "by blast"], ["", "lemma lspasl_a_der: \n  assumes a1: \"(h1,h2\\<triangleright>h0)\"\n    and a2: \"(h3,h4\\<triangleright>h1)\"\n  shows \"(\\<exists>h5. (h3,h5\\<triangleright>h0) \\<and> (h2,h4\\<triangleright>h5) \\<and> (h1,h2\\<triangleright>h0) \\<and> (h3,h4\\<triangleright>h1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>h5.\n       (h3,h5\\<triangleright>h0) \\<and>\n       (h2,h4\\<triangleright>h5) \\<and>\n       (h1,h2\\<triangleright>h0) \\<and> (h3,h4\\<triangleright>h1)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>h5.\n       (h3,h5\\<triangleright>h0) \\<and>\n       (h2,h4\\<triangleright>h5) \\<and>\n       (h1,h2\\<triangleright>h0) \\<and> (h3,h4\\<triangleright>h1)", "have f1: \"h1 ## h2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. h1 ## h2", "using a1"], ["proof (prove)\nusing this:\n  h1,h2\\<triangleright>h0\n\ngoal (1 subgoal):\n 1. h1 ## h2", "by (simp add: tern_rel_def)"], ["proof (state)\nthis:\n  h1 ## h2\n\ngoal (1 subgoal):\n 1. \\<exists>h5.\n       (h3,h5\\<triangleright>h0) \\<and>\n       (h2,h4\\<triangleright>h5) \\<and>\n       (h1,h2\\<triangleright>h0) \\<and> (h3,h4\\<triangleright>h1)", "have f2: \"h3 ## h4\""], ["proof (prove)\ngoal (1 subgoal):\n 1. h3 ## h4", "using a2"], ["proof (prove)\nusing this:\n  h3,h4\\<triangleright>h1\n\ngoal (1 subgoal):\n 1. h3 ## h4", "by (simp add: tern_rel_def)"], ["proof (state)\nthis:\n  h3 ## h4\n\ngoal (1 subgoal):\n 1. \\<exists>h5.\n       (h3,h5\\<triangleright>h0) \\<and>\n       (h2,h4\\<triangleright>h5) \\<and>\n       (h1,h2\\<triangleright>h0) \\<and> (h3,h4\\<triangleright>h1)", "have f3: \"h3 + h4 = h1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. h3 + h4 = h1", "using a2"], ["proof (prove)\nusing this:\n  h3,h4\\<triangleright>h1\n\ngoal (1 subgoal):\n 1. h3 + h4 = h1", "by (simp add: tern_rel_def)"], ["proof (state)\nthis:\n  h3 + h4 = h1\n\ngoal (1 subgoal):\n 1. \\<exists>h5.\n       (h3,h5\\<triangleright>h0) \\<and>\n       (h2,h4\\<triangleright>h5) \\<and>\n       (h1,h2\\<triangleright>h0) \\<and> (h3,h4\\<triangleright>h1)", "then"], ["proof (chain)\npicking this:\n  h3 + h4 = h1", "have \"h3 ## h2\""], ["proof (prove)\nusing this:\n  h3 + h4 = h1\n\ngoal (1 subgoal):\n 1. h3 ## h2", "using f2 f1"], ["proof (prove)\nusing this:\n  h3 + h4 = h1\n  h3 ## h4\n  h1 ## h2\n\ngoal (1 subgoal):\n 1. h3 ## h2", "by (metis local.sep_disj_addD1 local.sep_disj_commute)"], ["proof (state)\nthis:\n  h3 ## h2\n\ngoal (1 subgoal):\n 1. \\<exists>h5.\n       (h3,h5\\<triangleright>h0) \\<and>\n       (h2,h4\\<triangleright>h5) \\<and>\n       (h1,h2\\<triangleright>h0) \\<and> (h3,h4\\<triangleright>h1)", "then"], ["proof (chain)\npicking this:\n  h3 ## h2", "have f4: \"h2 ## h3\""], ["proof (prove)\nusing this:\n  h3 ## h2\n\ngoal (1 subgoal):\n 1. h2 ## h3", "by (metis local.sep_disj_commute)"], ["proof (state)\nthis:\n  h2 ## h3\n\ngoal (1 subgoal):\n 1. \\<exists>h5.\n       (h3,h5\\<triangleright>h0) \\<and>\n       (h2,h4\\<triangleright>h5) \\<and>\n       (h1,h2\\<triangleright>h0) \\<and> (h3,h4\\<triangleright>h1)", "then"], ["proof (chain)\npicking this:\n  h2 ## h3", "have f5: \"h2 + h4 ## h3\""], ["proof (prove)\nusing this:\n  h2 ## h3\n\ngoal (1 subgoal):\n 1. h2 + h4 ## h3", "using f3 f2 f1"], ["proof (prove)\nusing this:\n  h2 ## h3\n  h3 + h4 = h1\n  h3 ## h4\n  h1 ## h2\n\ngoal (1 subgoal):\n 1. h2 + h4 ## h3", "by (metis (no_types) local.sep_add_commute local.sep_add_disjI1)"], ["proof (state)\nthis:\n  h2 + h4 ## h3\n\ngoal (1 subgoal):\n 1. \\<exists>h5.\n       (h3,h5\\<triangleright>h0) \\<and>\n       (h2,h4\\<triangleright>h5) \\<and>\n       (h1,h2\\<triangleright>h0) \\<and> (h3,h4\\<triangleright>h1)", "have \"h4 ## h2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. h4 ## h2", "using f3 f2 f1"], ["proof (prove)\nusing this:\n  h3 + h4 = h1\n  h3 ## h4\n  h1 ## h2\n\ngoal (1 subgoal):\n 1. h4 ## h2", "by (metis local.sep_add_commute local.sep_disj_addD1 local.sep_disj_commute)"], ["proof (state)\nthis:\n  h4 ## h2\n\ngoal (1 subgoal):\n 1. \\<exists>h5.\n       (h3,h5\\<triangleright>h0) \\<and>\n       (h2,h4\\<triangleright>h5) \\<and>\n       (h1,h2\\<triangleright>h0) \\<and> (h3,h4\\<triangleright>h1)", "then"], ["proof (chain)\npicking this:\n  h4 ## h2", "show ?thesis"], ["proof (prove)\nusing this:\n  h4 ## h2\n\ngoal (1 subgoal):\n 1. \\<exists>h5.\n       (h3,h5\\<triangleright>h0) \\<and>\n       (h2,h4\\<triangleright>h5) \\<and>\n       (h1,h2\\<triangleright>h0) \\<and> (h3,h4\\<triangleright>h1)", "using f5 f4"], ["proof (prove)\nusing this:\n  h4 ## h2\n  h2 + h4 ## h3\n  h2 ## h3\n\ngoal (1 subgoal):\n 1. \\<exists>h5.\n       (h3,h5\\<triangleright>h0) \\<and>\n       (h2,h4\\<triangleright>h5) \\<and>\n       (h1,h2\\<triangleright>h0) \\<and> (h3,h4\\<triangleright>h1)", "by (metis (no_types) assms tern_rel_def local.sep_add_assoc local.sep_add_commute local.sep_disj_commute)"], ["proof (state)\nthis:\n  \\<exists>h5.\n     (h3,h5\\<triangleright>h0) \\<and>\n     (h2,h4\\<triangleright>h5) \\<and>\n     (h1,h2\\<triangleright>h0) \\<and> (h3,h4\\<triangleright>h1)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lspasl_a:\n  \"(\\<exists>h5. Gamma \\<and> (h3,h5\\<triangleright>h0) \\<and> (h2,h4\\<triangleright>h5) \\<and> (h1,h2\\<triangleright>h0) \\<and> (h3,h4\\<triangleright>h1)) \\<longrightarrow> Delta \\<Longrightarrow>\n  Gamma \\<and> (h1,h2\\<triangleright>h0) \\<and> (h3,h4\\<triangleright>h1) \\<longrightarrow> Delta\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>h5.\n        Gamma \\<and>\n        (h3,h5\\<triangleright>h0) \\<and>\n        (h2,h4\\<triangleright>h5) \\<and>\n        (h1,h2\\<triangleright>h0) \\<and>\n        (h3,h4\\<triangleright>h1)) \\<longrightarrow>\n    Delta \\<Longrightarrow>\n    Gamma \\<and>\n    (h1,h2\\<triangleright>h0) \\<and>\n    (h3,h4\\<triangleright>h1) \\<longrightarrow>\n    Delta", "using lspasl_a_der"], ["proof (prove)\nusing this:\n  \\<lbrakk>?h1.0,?h2.0\\<triangleright>?h0.0;\n   ?h3.0,?h4.0\\<triangleright>?h1.0\\<rbrakk>\n  \\<Longrightarrow> \\<exists>h5.\n                       (?h3.0,h5\\<triangleright>?h0.0) \\<and>\n                       (?h2.0,?h4.0\\<triangleright>h5) \\<and>\n                       (?h1.0,?h2.0\\<triangleright>?h0.0) \\<and>\n                       (?h3.0,?h4.0\\<triangleright>?h1.0)\n\ngoal (1 subgoal):\n 1. (\\<exists>h5.\n        Gamma \\<and>\n        (h3,h5\\<triangleright>h0) \\<and>\n        (h2,h4\\<triangleright>h5) \\<and>\n        (h1,h2\\<triangleright>h0) \\<and>\n        (h3,h4\\<triangleright>h1)) \\<longrightarrow>\n    Delta \\<Longrightarrow>\n    Gamma \\<and>\n    (h1,h2\\<triangleright>h0) \\<and>\n    (h3,h4\\<triangleright>h1) \\<longrightarrow>\n    Delta", "by blast"], ["", "lemma lspasl_a_inv:\n  \"Gamma \\<and> (h1,h2\\<triangleright>h0) \\<and> (h3,h4\\<triangleright>h1) \\<longrightarrow> Delta \\<Longrightarrow>\n  (\\<exists>h5. Gamma \\<and> (h3,h5\\<triangleright>h0) \\<and> (h2,h4\\<triangleright>h5) \\<and> (h1,h2\\<triangleright>h0) \\<and> (h3,h4\\<triangleright>h1)) \\<longrightarrow> Delta\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Gamma \\<and>\n    (h1,h2\\<triangleright>h0) \\<and>\n    (h3,h4\\<triangleright>h1) \\<longrightarrow>\n    Delta \\<Longrightarrow>\n    (\\<exists>h5.\n        Gamma \\<and>\n        (h3,h5\\<triangleright>h0) \\<and>\n        (h2,h4\\<triangleright>h5) \\<and>\n        (h1,h2\\<triangleright>h0) \\<and>\n        (h3,h4\\<triangleright>h1)) \\<longrightarrow>\n    Delta", "by auto"], ["", "lemma lspasl_a_eq: \n  \"((h1,h2\\<triangleright>h0) \\<and> (h3,h4\\<triangleright>h1)) = \n  (\\<exists>h5. (h3,h5\\<triangleright>h0) \\<and> (h2,h4\\<triangleright>h5) \\<and> (h1,h2\\<triangleright>h0) \\<and> (h3,h4\\<triangleright>h1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((h1,h2\\<triangleright>h0) \\<and> (h3,h4\\<triangleright>h1)) =\n    (\\<exists>h5.\n        (h3,h5\\<triangleright>h0) \\<and>\n        (h2,h4\\<triangleright>h5) \\<and>\n        (h1,h2\\<triangleright>h0) \\<and> (h3,h4\\<triangleright>h1))", "using lspasl_a_der"], ["proof (prove)\nusing this:\n  \\<lbrakk>?h1.0,?h2.0\\<triangleright>?h0.0;\n   ?h3.0,?h4.0\\<triangleright>?h1.0\\<rbrakk>\n  \\<Longrightarrow> \\<exists>h5.\n                       (?h3.0,h5\\<triangleright>?h0.0) \\<and>\n                       (?h2.0,?h4.0\\<triangleright>h5) \\<and>\n                       (?h1.0,?h2.0\\<triangleright>?h0.0) \\<and>\n                       (?h3.0,?h4.0\\<triangleright>?h1.0)\n\ngoal (1 subgoal):\n 1. ((h1,h2\\<triangleright>h0) \\<and> (h3,h4\\<triangleright>h1)) =\n    (\\<exists>h5.\n        (h3,h5\\<triangleright>h0) \\<and>\n        (h2,h4\\<triangleright>h5) \\<and>\n        (h1,h2\\<triangleright>h0) \\<and> (h3,h4\\<triangleright>h1))", "by blast"], ["", "lemma lspasl_p:\n  \"Gamma \\<and> (h1,h2\\<triangleright>h0) \\<and> h0 = h3 \\<longrightarrow> Delta \\<Longrightarrow>\n  Gamma \\<and> (h1,h2\\<triangleright>h0) \\<and> (h1,h2\\<triangleright>h3) \\<longrightarrow> Delta\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Gamma \\<and> (h1,h2\\<triangleright>h0) \\<and> h0 = h3 \\<longrightarrow>\n    Delta \\<Longrightarrow>\n    Gamma \\<and>\n    (h1,h2\\<triangleright>h0) \\<and>\n    (h1,h2\\<triangleright>h3) \\<longrightarrow>\n    Delta", "by (auto simp add: tern_rel_def)"], ["", "lemma lspasl_p_inv:\n  \"Gamma \\<and> (h1,h2\\<triangleright>h0) \\<and> (h1,h2\\<triangleright>h3) \\<longrightarrow> Delta \\<Longrightarrow>\n  Gamma \\<and> (h1,h2\\<triangleright>h0) \\<and> h0 = h3 \\<longrightarrow> Delta\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Gamma \\<and>\n    (h1,h2\\<triangleright>h0) \\<and>\n    (h1,h2\\<triangleright>h3) \\<longrightarrow>\n    Delta \\<Longrightarrow>\n    Gamma \\<and> (h1,h2\\<triangleright>h0) \\<and> h0 = h3 \\<longrightarrow>\n    Delta", "by auto"], ["", "lemma lspasl_p_der:\n  \"(h1,h2\\<triangleright>h0) \\<Longrightarrow> (h1,h2\\<triangleright>h3) \\<Longrightarrow> (h1,h2\\<triangleright>h0) \\<and> h0 = h3\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>h1,h2\\<triangleright>h0; h1,h2\\<triangleright>h3\\<rbrakk>\n    \\<Longrightarrow> (h1,h2\\<triangleright>h0) \\<and> h0 = h3", "by (simp add: tern_rel_def)"], ["", "lemma lspasl_p_eq: \n  \"((h1,h2\\<triangleright>h0) \\<and> (h1,h2\\<triangleright>h3)) = ((h1,h2\\<triangleright>h0) \\<and> h0 = h3)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((h1,h2\\<triangleright>h0) \\<and> (h1,h2\\<triangleright>h3)) =\n    ((h1,h2\\<triangleright>h0) \\<and> h0 = h3)", "using lspasl_p_der"], ["proof (prove)\nusing this:\n  \\<lbrakk>?h1.0,?h2.0\\<triangleright>?h0.0;\n   ?h1.0,?h2.0\\<triangleright>?h3.0\\<rbrakk>\n  \\<Longrightarrow> (?h1.0,?h2.0\\<triangleright>?h0.0) \\<and> ?h0.0 = ?h3.0\n\ngoal (1 subgoal):\n 1. ((h1,h2\\<triangleright>h0) \\<and> (h1,h2\\<triangleright>h3)) =\n    ((h1,h2\\<triangleright>h0) \\<and> h0 = h3)", "by auto"], ["", "lemma lspasl_c:\n  \"Gamma \\<and> (h1,h2\\<triangleright>h0) \\<and> h2 = h3 \\<longrightarrow> Delta \\<Longrightarrow>\n  Gamma \\<and> (h1,h2\\<triangleright>h0) \\<and> (h1,h3\\<triangleright>h0) \\<longrightarrow> Delta\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Gamma \\<and> (h1,h2\\<triangleright>h0) \\<and> h2 = h3 \\<longrightarrow>\n    Delta \\<Longrightarrow>\n    Gamma \\<and>\n    (h1,h2\\<triangleright>h0) \\<and>\n    (h1,h3\\<triangleright>h0) \\<longrightarrow>\n    Delta", "by (metis local.sep_add_cancelD local.sep_add_commute tern_rel_def\n      local.sep_disj_commuteI)"], ["", "lemma lspasl_c_inv:\n  \"Gamma \\<and> (h1,h2\\<triangleright>h0) \\<and> (h1,h3\\<triangleright>h0) \\<longrightarrow> Delta \\<Longrightarrow>\n  Gamma \\<and> (h1,h2\\<triangleright>h0) \\<and> h2 = h3 \\<longrightarrow> Delta\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Gamma \\<and>\n    (h1,h2\\<triangleright>h0) \\<and>\n    (h1,h3\\<triangleright>h0) \\<longrightarrow>\n    Delta \\<Longrightarrow>\n    Gamma \\<and> (h1,h2\\<triangleright>h0) \\<and> h2 = h3 \\<longrightarrow>\n    Delta", "by auto"], ["", "lemma lspasl_c_der:\n  \"(h1,h2\\<triangleright>h0) \\<Longrightarrow> (h1,h3\\<triangleright>h0) \\<Longrightarrow> (h1,h2\\<triangleright>h0) \\<and> h2 = h3\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>h1,h2\\<triangleright>h0; h1,h3\\<triangleright>h0\\<rbrakk>\n    \\<Longrightarrow> (h1,h2\\<triangleright>h0) \\<and> h2 = h3", "using lspasl_c"], ["proof (prove)\nusing this:\n  ?Gamma \\<and>\n  (?h1.0,?h2.0\\<triangleright>?h0.0) \\<and> ?h2.0 = ?h3.0 \\<longrightarrow>\n  ?Delta \\<Longrightarrow>\n  ?Gamma \\<and>\n  (?h1.0,?h2.0\\<triangleright>?h0.0) \\<and>\n  (?h1.0,?h3.0\\<triangleright>?h0.0) \\<longrightarrow>\n  ?Delta\n\ngoal (1 subgoal):\n 1. \\<lbrakk>h1,h2\\<triangleright>h0; h1,h3\\<triangleright>h0\\<rbrakk>\n    \\<Longrightarrow> (h1,h2\\<triangleright>h0) \\<and> h2 = h3", "by blast"], ["", "lemma lspasl_c_eq:\n  \"((h1,h2\\<triangleright>h0) \\<and> (h1,h3\\<triangleright>h0)) = ((h1,h2\\<triangleright>h0) \\<and> h2 = h3)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((h1,h2\\<triangleright>h0) \\<and> (h1,h3\\<triangleright>h0)) =\n    ((h1,h2\\<triangleright>h0) \\<and> h2 = h3)", "using lspasl_c_der"], ["proof (prove)\nusing this:\n  \\<lbrakk>?h1.0,?h2.0\\<triangleright>?h0.0;\n   ?h1.0,?h3.0\\<triangleright>?h0.0\\<rbrakk>\n  \\<Longrightarrow> (?h1.0,?h2.0\\<triangleright>?h0.0) \\<and> ?h2.0 = ?h3.0\n\ngoal (1 subgoal):\n 1. ((h1,h2\\<triangleright>h0) \\<and> (h1,h3\\<triangleright>h0)) =\n    ((h1,h2\\<triangleright>h0) \\<and> h2 = h3)", "by auto"], ["", "lemma lspasl_iu:\n  \"Gamma \\<and> (0,h2\\<triangleright>0) \\<and> h1 = 0 \\<longrightarrow> Delta \\<Longrightarrow>\n  Gamma \\<and> (h1,h2\\<triangleright>0) \\<longrightarrow> Delta\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Gamma \\<and>\n    (0::'a,h2\\<triangleright>0::'a) \\<and> h1 = (0::'a) \\<longrightarrow>\n    Delta \\<Longrightarrow>\n    Gamma \\<and> (h1,h2\\<triangleright>0::'a) \\<longrightarrow> Delta", "using local.sep_add_ind_unit tern_rel_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>?x + ?y = (0::'a); ?x ## ?y\\<rbrakk>\n  \\<Longrightarrow> ?x = (0::'a)\n  ?a,?b\\<triangleright>?c \\<equiv> ?a ## ?b \\<and> ?a + ?b = ?c\n\ngoal (1 subgoal):\n 1. Gamma \\<and>\n    (0::'a,h2\\<triangleright>0::'a) \\<and> h1 = (0::'a) \\<longrightarrow>\n    Delta \\<Longrightarrow>\n    Gamma \\<and> (h1,h2\\<triangleright>0::'a) \\<longrightarrow> Delta", "by blast"], ["", "lemma lspasl_iu_inv:\n  \"Gamma \\<and> (h1,h2\\<triangleright>0) \\<longrightarrow> Delta \\<Longrightarrow>\n  Gamma \\<and> (0,h2\\<triangleright>0) \\<and> h1 = 0 \\<longrightarrow> Delta\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Gamma \\<and> (h1,h2\\<triangleright>0::'a) \\<longrightarrow>\n    Delta \\<Longrightarrow>\n    Gamma \\<and>\n    (0::'a,h2\\<triangleright>0::'a) \\<and> h1 = (0::'a) \\<longrightarrow>\n    Delta", "by simp"], ["", "lemma lspasl_iu_der:\n  \"(h1,h2\\<triangleright>0) \\<Longrightarrow> ((0,0\\<triangleright>0) \\<and> h1 = 0 \\<and> h2 = 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. h1,h2\\<triangleright>0::'a \\<Longrightarrow>\n    (0::'a,0::'a\\<triangleright>0::'a) \\<and>\n    h1 = (0::'a) \\<and> h2 = (0::'a)", "using lspasl_eq_der lspasl_iu"], ["proof (prove)\nusing this:\n  0::'a,?h1.0\\<triangleright>?h2.0 \\<Longrightarrow>\n  (0::'a,?h1.0\\<triangleright>?h1.0) \\<and> ?h1.0 = ?h2.0\n  ?Gamma \\<and>\n  (0::'a,?h2.0\\<triangleright>0::'a) \\<and>\n  ?h1.0 = (0::'a) \\<longrightarrow>\n  ?Delta \\<Longrightarrow>\n  ?Gamma \\<and> (?h1.0,?h2.0\\<triangleright>0::'a) \\<longrightarrow> ?Delta\n\ngoal (1 subgoal):\n 1. h1,h2\\<triangleright>0::'a \\<Longrightarrow>\n    (0::'a,0::'a\\<triangleright>0::'a) \\<and>\n    h1 = (0::'a) \\<and> h2 = (0::'a)", "by (auto simp add: tern_rel_def)"], ["", "lemma lspasl_iu_eq:\n  \"(h1,h2\\<triangleright>0) = ((0,0\\<triangleright>0) \\<and> h1 = 0 \\<and> h2 = 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (h1,h2\\<triangleright>0::'a) =\n    ((0::'a,0::'a\\<triangleright>0::'a) \\<and>\n     h1 = (0::'a) \\<and> h2 = (0::'a))", "using lspasl_iu_der"], ["proof (prove)\nusing this:\n  ?h1.0,?h2.0\\<triangleright>0::'a \\<Longrightarrow>\n  (0::'a,0::'a\\<triangleright>0::'a) \\<and>\n  ?h1.0 = (0::'a) \\<and> ?h2.0 = (0::'a)\n\ngoal (1 subgoal):\n 1. (h1,h2\\<triangleright>0::'a) =\n    ((0::'a,0::'a\\<triangleright>0::'a) \\<and>\n     h1 = (0::'a) \\<and> h2 = (0::'a))", "by blast"], ["", "lemma lspasl_d:\n  \"Gamma \\<and> (0,0\\<triangleright>h2) \\<and> h1 = 0 \\<longrightarrow> Delta \\<Longrightarrow>\n  Gamma \\<and> (h1,h1\\<triangleright>h2) \\<longrightarrow> Delta\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Gamma \\<and>\n    (0::'a,0::'a\\<triangleright>h2) \\<and> h1 = (0::'a) \\<longrightarrow>\n    Delta \\<Longrightarrow>\n    Gamma \\<and> (h1,h1\\<triangleright>h2) \\<longrightarrow> Delta", "using local.sep_add_disj tern_rel_def"], ["proof (prove)\nusing this:\n  ?x ## ?x \\<Longrightarrow> ?x = (0::'a)\n  ?a,?b\\<triangleright>?c \\<equiv> ?a ## ?b \\<and> ?a + ?b = ?c\n\ngoal (1 subgoal):\n 1. Gamma \\<and>\n    (0::'a,0::'a\\<triangleright>h2) \\<and> h1 = (0::'a) \\<longrightarrow>\n    Delta \\<Longrightarrow>\n    Gamma \\<and> (h1,h1\\<triangleright>h2) \\<longrightarrow> Delta", "by fastforce"], ["", "lemma lspasl_d_inv:\n  \"Gamma \\<and> (h1,h1\\<triangleright>h2) \\<longrightarrow> Delta \\<Longrightarrow>\n  Gamma \\<and> (0,0\\<triangleright>h2) \\<and> h1 = 0 \\<longrightarrow> Delta\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Gamma \\<and> (h1,h1\\<triangleright>h2) \\<longrightarrow>\n    Delta \\<Longrightarrow>\n    Gamma \\<and>\n    (0::'a,0::'a\\<triangleright>h2) \\<and> h1 = (0::'a) \\<longrightarrow>\n    Delta", "by blast"], ["", "lemma lspasl_d_der:\n  \"(h1,h1\\<triangleright>h2) \\<Longrightarrow> (0,0\\<triangleright>0) \\<and> h1 = 0 \\<and> h2 = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. h1,h1\\<triangleright>h2 \\<Longrightarrow>\n    (0::'a,0::'a\\<triangleright>0::'a) \\<and>\n    h1 = (0::'a) \\<and> h2 = (0::'a)", "using lspasl_d lspasl_eq_der"], ["proof (prove)\nusing this:\n  ?Gamma \\<and>\n  (0::'a,0::'a\\<triangleright>?h2.0) \\<and>\n  ?h1.0 = (0::'a) \\<longrightarrow>\n  ?Delta \\<Longrightarrow>\n  ?Gamma \\<and> (?h1.0,?h1.0\\<triangleright>?h2.0) \\<longrightarrow> ?Delta\n  0::'a,?h1.0\\<triangleright>?h2.0 \\<Longrightarrow>\n  (0::'a,?h1.0\\<triangleright>?h1.0) \\<and> ?h1.0 = ?h2.0\n\ngoal (1 subgoal):\n 1. h1,h1\\<triangleright>h2 \\<Longrightarrow>\n    (0::'a,0::'a\\<triangleright>0::'a) \\<and>\n    h1 = (0::'a) \\<and> h2 = (0::'a)", "by blast"], ["", "lemma lspasl_d_eq:\n  \"(h1,h1\\<triangleright>h2) = ((0,0\\<triangleright>0) \\<and> h1 = 0 \\<and> h2 = 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (h1,h1\\<triangleright>h2) =\n    ((0::'a,0::'a\\<triangleright>0::'a) \\<and>\n     h1 = (0::'a) \\<and> h2 = (0::'a))", "using lspasl_d_der"], ["proof (prove)\nusing this:\n  ?h1.0,?h1.0\\<triangleright>?h2.0 \\<Longrightarrow>\n  (0::'a,0::'a\\<triangleright>0::'a) \\<and>\n  ?h1.0 = (0::'a) \\<and> ?h2.0 = (0::'a)\n\ngoal (1 subgoal):\n 1. (h1,h1\\<triangleright>h2) =\n    ((0::'a,0::'a\\<triangleright>0::'a) \\<and>\n     h1 = (0::'a) \\<and> h2 = (0::'a))", "by blast"], ["", "lemma lspasl_cs_der: \n  assumes a1: \"(h1,h2\\<triangleright>h0)\" \n    and a2: \"(h3,h4\\<triangleright>h0)\" \n  shows \"(\\<exists>h5 h6 h7 h8. (h5,h6\\<triangleright>h1) \\<and> (h7,h8\\<triangleright>h2) \\<and>(h5,h7\\<triangleright>h3) \\<and> (h6,h8\\<triangleright>h4)\n    \\<and> (h1,h2\\<triangleright>h0) \\<and> (h3,h4\\<triangleright>h0))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>h5 h6 h7 h8.\n       (h5,h6\\<triangleright>h1) \\<and>\n       (h7,h8\\<triangleright>h2) \\<and>\n       (h5,h7\\<triangleright>h3) \\<and>\n       (h6,h8\\<triangleright>h4) \\<and>\n       (h1,h2\\<triangleright>h0) \\<and> (h3,h4\\<triangleright>h0)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>h5 h6 h7 h8.\n       (h5,h6\\<triangleright>h1) \\<and>\n       (h7,h8\\<triangleright>h2) \\<and>\n       (h5,h7\\<triangleright>h3) \\<and>\n       (h6,h8\\<triangleright>h4) \\<and>\n       (h1,h2\\<triangleright>h0) \\<and> (h3,h4\\<triangleright>h0)", "from a1 a2"], ["proof (chain)\npicking this:\n  h1,h2\\<triangleright>h0\n  h3,h4\\<triangleright>h0", "have \"h1 + h2 = h0 \\<and> h3 + h4 = h0 \\<and> h1 ## h2 \\<and> h3 ## h4\""], ["proof (prove)\nusing this:\n  h1,h2\\<triangleright>h0\n  h3,h4\\<triangleright>h0\n\ngoal (1 subgoal):\n 1. h1 + h2 = h0 \\<and> h3 + h4 = h0 \\<and> h1 ## h2 \\<and> h3 ## h4", "by (simp add: tern_rel_def)"], ["proof (state)\nthis:\n  h1 + h2 = h0 \\<and> h3 + h4 = h0 \\<and> h1 ## h2 \\<and> h3 ## h4\n\ngoal (1 subgoal):\n 1. \\<exists>h5 h6 h7 h8.\n       (h5,h6\\<triangleright>h1) \\<and>\n       (h7,h8\\<triangleright>h2) \\<and>\n       (h5,h7\\<triangleright>h3) \\<and>\n       (h6,h8\\<triangleright>h4) \\<and>\n       (h1,h2\\<triangleright>h0) \\<and> (h3,h4\\<triangleright>h0)", "then"], ["proof (chain)\npicking this:\n  h1 + h2 = h0 \\<and> h3 + h4 = h0 \\<and> h1 ## h2 \\<and> h3 ## h4", "have \"\\<exists>h5 h6 h7 h8. h5 + h6 = h1 \\<and> h7 + h8 = h2 \\<and>\n    h5 + h7 = h3 \\<and> h6 + h8 = h4 \\<and> h5 ## h6 \\<and> h7 ## h8 \\<and>\n    h5 ## h7 \\<and> h6 ## h8\""], ["proof (prove)\nusing this:\n  h1 + h2 = h0 \\<and> h3 + h4 = h0 \\<and> h1 ## h2 \\<and> h3 ## h4\n\ngoal (1 subgoal):\n 1. \\<exists>h5 h6 h7 h8.\n       h5 + h6 = h1 \\<and>\n       h7 + h8 = h2 \\<and>\n       h5 + h7 = h3 \\<and>\n       h6 + h8 = h4 \\<and>\n       h5 ## h6 \\<and> h7 ## h8 \\<and> h5 ## h7 \\<and> h6 ## h8", "using local.sep_add_cross_split"], ["proof (prove)\nusing this:\n  h1 + h2 = h0 \\<and> h3 + h4 = h0 \\<and> h1 ## h2 \\<and> h3 ## h4\n  \\<lbrakk>?a + ?b = ?w; ?c + ?d = ?w; ?a ## ?b; ?c ## ?d\\<rbrakk>\n  \\<Longrightarrow> \\<exists>e f g h.\n                       e + f = ?a \\<and>\n                       g + h = ?b \\<and>\n                       e + g = ?c \\<and>\n                       f + h = ?d \\<and>\n                       e ## f \\<and> g ## h \\<and> e ## g \\<and> f ## h\n\ngoal (1 subgoal):\n 1. \\<exists>h5 h6 h7 h8.\n       h5 + h6 = h1 \\<and>\n       h7 + h8 = h2 \\<and>\n       h5 + h7 = h3 \\<and>\n       h6 + h8 = h4 \\<and>\n       h5 ## h6 \\<and> h7 ## h8 \\<and> h5 ## h7 \\<and> h6 ## h8", "by auto"], ["proof (state)\nthis:\n  \\<exists>h5 h6 h7 h8.\n     h5 + h6 = h1 \\<and>\n     h7 + h8 = h2 \\<and>\n     h5 + h7 = h3 \\<and>\n     h6 + h8 = h4 \\<and>\n     h5 ## h6 \\<and> h7 ## h8 \\<and> h5 ## h7 \\<and> h6 ## h8\n\ngoal (1 subgoal):\n 1. \\<exists>h5 h6 h7 h8.\n       (h5,h6\\<triangleright>h1) \\<and>\n       (h7,h8\\<triangleright>h2) \\<and>\n       (h5,h7\\<triangleright>h3) \\<and>\n       (h6,h8\\<triangleright>h4) \\<and>\n       (h1,h2\\<triangleright>h0) \\<and> (h3,h4\\<triangleright>h0)", "then"], ["proof (chain)\npicking this:\n  \\<exists>h5 h6 h7 h8.\n     h5 + h6 = h1 \\<and>\n     h7 + h8 = h2 \\<and>\n     h5 + h7 = h3 \\<and>\n     h6 + h8 = h4 \\<and>\n     h5 ## h6 \\<and> h7 ## h8 \\<and> h5 ## h7 \\<and> h6 ## h8", "have \"\\<exists>h5 h6 h7 h8. (h5,h6\\<triangleright>h1) \\<and> h7 + h8 = h2 \\<and>\n    h5 + h7 = h3 \\<and> h6 + h8 = h4 \\<and> h7 ## h8 \\<and>\n    h5 ## h7 \\<and> h6 ## h8\""], ["proof (prove)\nusing this:\n  \\<exists>h5 h6 h7 h8.\n     h5 + h6 = h1 \\<and>\n     h7 + h8 = h2 \\<and>\n     h5 + h7 = h3 \\<and>\n     h6 + h8 = h4 \\<and>\n     h5 ## h6 \\<and> h7 ## h8 \\<and> h5 ## h7 \\<and> h6 ## h8\n\ngoal (1 subgoal):\n 1. \\<exists>h5 h6 h7 h8.\n       (h5,h6\\<triangleright>h1) \\<and>\n       h7 + h8 = h2 \\<and>\n       h5 + h7 = h3 \\<and>\n       h6 + h8 = h4 \\<and> h7 ## h8 \\<and> h5 ## h7 \\<and> h6 ## h8", "by (auto simp add: tern_rel_def)"], ["proof (state)\nthis:\n  \\<exists>h5 h6 h7 h8.\n     (h5,h6\\<triangleright>h1) \\<and>\n     h7 + h8 = h2 \\<and>\n     h5 + h7 = h3 \\<and>\n     h6 + h8 = h4 \\<and> h7 ## h8 \\<and> h5 ## h7 \\<and> h6 ## h8\n\ngoal (1 subgoal):\n 1. \\<exists>h5 h6 h7 h8.\n       (h5,h6\\<triangleright>h1) \\<and>\n       (h7,h8\\<triangleright>h2) \\<and>\n       (h5,h7\\<triangleright>h3) \\<and>\n       (h6,h8\\<triangleright>h4) \\<and>\n       (h1,h2\\<triangleright>h0) \\<and> (h3,h4\\<triangleright>h0)", "then"], ["proof (chain)\npicking this:\n  \\<exists>h5 h6 h7 h8.\n     (h5,h6\\<triangleright>h1) \\<and>\n     h7 + h8 = h2 \\<and>\n     h5 + h7 = h3 \\<and>\n     h6 + h8 = h4 \\<and> h7 ## h8 \\<and> h5 ## h7 \\<and> h6 ## h8", "have \"\\<exists>h5 h6 h7 h8. (h5,h6\\<triangleright>h1) \\<and> (h7,h8\\<triangleright>h2) \\<and>\n    h5 + h7 = h3 \\<and> h6 + h8 = h4 \\<and> h5 ## h7 \\<and> h6 ## h8\""], ["proof (prove)\nusing this:\n  \\<exists>h5 h6 h7 h8.\n     (h5,h6\\<triangleright>h1) \\<and>\n     h7 + h8 = h2 \\<and>\n     h5 + h7 = h3 \\<and>\n     h6 + h8 = h4 \\<and> h7 ## h8 \\<and> h5 ## h7 \\<and> h6 ## h8\n\ngoal (1 subgoal):\n 1. \\<exists>h5 h6 h7 h8.\n       (h5,h6\\<triangleright>h1) \\<and>\n       (h7,h8\\<triangleright>h2) \\<and>\n       h5 + h7 = h3 \\<and> h6 + h8 = h4 \\<and> h5 ## h7 \\<and> h6 ## h8", "by (auto simp add: tern_rel_def)"], ["proof (state)\nthis:\n  \\<exists>h5 h6 h7 h8.\n     (h5,h6\\<triangleright>h1) \\<and>\n     (h7,h8\\<triangleright>h2) \\<and>\n     h5 + h7 = h3 \\<and> h6 + h8 = h4 \\<and> h5 ## h7 \\<and> h6 ## h8\n\ngoal (1 subgoal):\n 1. \\<exists>h5 h6 h7 h8.\n       (h5,h6\\<triangleright>h1) \\<and>\n       (h7,h8\\<triangleright>h2) \\<and>\n       (h5,h7\\<triangleright>h3) \\<and>\n       (h6,h8\\<triangleright>h4) \\<and>\n       (h1,h2\\<triangleright>h0) \\<and> (h3,h4\\<triangleright>h0)", "then"], ["proof (chain)\npicking this:\n  \\<exists>h5 h6 h7 h8.\n     (h5,h6\\<triangleright>h1) \\<and>\n     (h7,h8\\<triangleright>h2) \\<and>\n     h5 + h7 = h3 \\<and> h6 + h8 = h4 \\<and> h5 ## h7 \\<and> h6 ## h8", "have \"\\<exists>h5 h6 h7 h8. (h5,h6\\<triangleright>h1) \\<and> (h7,h8\\<triangleright>h2) \\<and>\n    (h5,h7\\<triangleright>h3) \\<and> h6 + h8 = h4 \\<and> h6 ## h8\""], ["proof (prove)\nusing this:\n  \\<exists>h5 h6 h7 h8.\n     (h5,h6\\<triangleright>h1) \\<and>\n     (h7,h8\\<triangleright>h2) \\<and>\n     h5 + h7 = h3 \\<and> h6 + h8 = h4 \\<and> h5 ## h7 \\<and> h6 ## h8\n\ngoal (1 subgoal):\n 1. \\<exists>h5 h6 h7 h8.\n       (h5,h6\\<triangleright>h1) \\<and>\n       (h7,h8\\<triangleright>h2) \\<and>\n       (h5,h7\\<triangleright>h3) \\<and> h6 + h8 = h4 \\<and> h6 ## h8", "by (auto simp add: tern_rel_def)"], ["proof (state)\nthis:\n  \\<exists>h5 h6 h7 h8.\n     (h5,h6\\<triangleright>h1) \\<and>\n     (h7,h8\\<triangleright>h2) \\<and>\n     (h5,h7\\<triangleright>h3) \\<and> h6 + h8 = h4 \\<and> h6 ## h8\n\ngoal (1 subgoal):\n 1. \\<exists>h5 h6 h7 h8.\n       (h5,h6\\<triangleright>h1) \\<and>\n       (h7,h8\\<triangleright>h2) \\<and>\n       (h5,h7\\<triangleright>h3) \\<and>\n       (h6,h8\\<triangleright>h4) \\<and>\n       (h1,h2\\<triangleright>h0) \\<and> (h3,h4\\<triangleright>h0)", "then"], ["proof (chain)\npicking this:\n  \\<exists>h5 h6 h7 h8.\n     (h5,h6\\<triangleright>h1) \\<and>\n     (h7,h8\\<triangleright>h2) \\<and>\n     (h5,h7\\<triangleright>h3) \\<and> h6 + h8 = h4 \\<and> h6 ## h8", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>h5 h6 h7 h8.\n     (h5,h6\\<triangleright>h1) \\<and>\n     (h7,h8\\<triangleright>h2) \\<and>\n     (h5,h7\\<triangleright>h3) \\<and> h6 + h8 = h4 \\<and> h6 ## h8\n\ngoal (1 subgoal):\n 1. \\<exists>h5 h6 h7 h8.\n       (h5,h6\\<triangleright>h1) \\<and>\n       (h7,h8\\<triangleright>h2) \\<and>\n       (h5,h7\\<triangleright>h3) \\<and>\n       (h6,h8\\<triangleright>h4) \\<and>\n       (h1,h2\\<triangleright>h0) \\<and> (h3,h4\\<triangleright>h0)", "using a1 a2 tern_rel_def"], ["proof (prove)\nusing this:\n  \\<exists>h5 h6 h7 h8.\n     (h5,h6\\<triangleright>h1) \\<and>\n     (h7,h8\\<triangleright>h2) \\<and>\n     (h5,h7\\<triangleright>h3) \\<and> h6 + h8 = h4 \\<and> h6 ## h8\n  h1,h2\\<triangleright>h0\n  h3,h4\\<triangleright>h0\n  ?a,?b\\<triangleright>?c \\<equiv> ?a ## ?b \\<and> ?a + ?b = ?c\n\ngoal (1 subgoal):\n 1. \\<exists>h5 h6 h7 h8.\n       (h5,h6\\<triangleright>h1) \\<and>\n       (h7,h8\\<triangleright>h2) \\<and>\n       (h5,h7\\<triangleright>h3) \\<and>\n       (h6,h8\\<triangleright>h4) \\<and>\n       (h1,h2\\<triangleright>h0) \\<and> (h3,h4\\<triangleright>h0)", "by blast"], ["proof (state)\nthis:\n  \\<exists>h5 h6 h7 h8.\n     (h5,h6\\<triangleright>h1) \\<and>\n     (h7,h8\\<triangleright>h2) \\<and>\n     (h5,h7\\<triangleright>h3) \\<and>\n     (h6,h8\\<triangleright>h4) \\<and>\n     (h1,h2\\<triangleright>h0) \\<and> (h3,h4\\<triangleright>h0)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lspasl_cs:\n  \"(\\<exists>h5 h6 h7 h8. Gamma \\<and> (h5,h6\\<triangleright>h1) \\<and> (h7,h8\\<triangleright>h2) \\<and>(h5,h7\\<triangleright>h3) \\<and> (h6,h8\\<triangleright>h4) \\<and> (h1,h2\\<triangleright>h0) \\<and> (h3,h4\\<triangleright>h0)) \\<longrightarrow> Delta \\<Longrightarrow>\n  Gamma \\<and> (h1,h2\\<triangleright>h0) \\<and> (h3,h4\\<triangleright>h0) \\<longrightarrow> Delta\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>h5 h6 h7 h8.\n        Gamma \\<and>\n        (h5,h6\\<triangleright>h1) \\<and>\n        (h7,h8\\<triangleright>h2) \\<and>\n        (h5,h7\\<triangleright>h3) \\<and>\n        (h6,h8\\<triangleright>h4) \\<and>\n        (h1,h2\\<triangleright>h0) \\<and>\n        (h3,h4\\<triangleright>h0)) \\<longrightarrow>\n    Delta \\<Longrightarrow>\n    Gamma \\<and>\n    (h1,h2\\<triangleright>h0) \\<and>\n    (h3,h4\\<triangleright>h0) \\<longrightarrow>\n    Delta", "using lspasl_cs_der"], ["proof (prove)\nusing this:\n  \\<lbrakk>?h1.0,?h2.0\\<triangleright>?h0.0;\n   ?h3.0,?h4.0\\<triangleright>?h0.0\\<rbrakk>\n  \\<Longrightarrow> \\<exists>h5 h6 h7 h8.\n                       (h5,h6\\<triangleright>?h1.0) \\<and>\n                       (h7,h8\\<triangleright>?h2.0) \\<and>\n                       (h5,h7\\<triangleright>?h3.0) \\<and>\n                       (h6,h8\\<triangleright>?h4.0) \\<and>\n                       (?h1.0,?h2.0\\<triangleright>?h0.0) \\<and>\n                       (?h3.0,?h4.0\\<triangleright>?h0.0)\n\ngoal (1 subgoal):\n 1. (\\<exists>h5 h6 h7 h8.\n        Gamma \\<and>\n        (h5,h6\\<triangleright>h1) \\<and>\n        (h7,h8\\<triangleright>h2) \\<and>\n        (h5,h7\\<triangleright>h3) \\<and>\n        (h6,h8\\<triangleright>h4) \\<and>\n        (h1,h2\\<triangleright>h0) \\<and>\n        (h3,h4\\<triangleright>h0)) \\<longrightarrow>\n    Delta \\<Longrightarrow>\n    Gamma \\<and>\n    (h1,h2\\<triangleright>h0) \\<and>\n    (h3,h4\\<triangleright>h0) \\<longrightarrow>\n    Delta", "by auto"], ["", "lemma lspasl_cs_inv:\n  \"Gamma \\<and> (h1,h2\\<triangleright>h0) \\<and> (h3,h4\\<triangleright>h0) \\<longrightarrow> Delta \\<Longrightarrow>\n  (\\<exists>h5 h6 h7 h8. Gamma \\<and> (h5,h6\\<triangleright>h1) \\<and> (h7,h8\\<triangleright>h2) \\<and>(h5,h7\\<triangleright>h3) \\<and> (h6,h8\\<triangleright>h4) \\<and> (h1,h2\\<triangleright>h0) \\<and> (h3,h4\\<triangleright>h0)) \\<longrightarrow> Delta\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Gamma \\<and>\n    (h1,h2\\<triangleright>h0) \\<and>\n    (h3,h4\\<triangleright>h0) \\<longrightarrow>\n    Delta \\<Longrightarrow>\n    (\\<exists>h5 h6 h7 h8.\n        Gamma \\<and>\n        (h5,h6\\<triangleright>h1) \\<and>\n        (h7,h8\\<triangleright>h2) \\<and>\n        (h5,h7\\<triangleright>h3) \\<and>\n        (h6,h8\\<triangleright>h4) \\<and>\n        (h1,h2\\<triangleright>h0) \\<and>\n        (h3,h4\\<triangleright>h0)) \\<longrightarrow>\n    Delta", "by auto"], ["", "lemma lspasl_cs_eq: \n  \"((h1,h2\\<triangleright>h0) \\<and> (h3,h4\\<triangleright>h0)) =\n  (\\<exists>h5 h6 h7 h8. (h5,h6\\<triangleright>h1) \\<and> (h7,h8\\<triangleright>h2) \\<and>(h5,h7\\<triangleright>h3) \\<and> (h6,h8\\<triangleright>h4) \\<and> \n  (h1,h2\\<triangleright>h0) \\<and> (h3,h4\\<triangleright>h0))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((h1,h2\\<triangleright>h0) \\<and> (h3,h4\\<triangleright>h0)) =\n    (\\<exists>h5 h6 h7 h8.\n        (h5,h6\\<triangleright>h1) \\<and>\n        (h7,h8\\<triangleright>h2) \\<and>\n        (h5,h7\\<triangleright>h3) \\<and>\n        (h6,h8\\<triangleright>h4) \\<and>\n        (h1,h2\\<triangleright>h0) \\<and> (h3,h4\\<triangleright>h0))", "using lspasl_cs_der"], ["proof (prove)\nusing this:\n  \\<lbrakk>?h1.0,?h2.0\\<triangleright>?h0.0;\n   ?h3.0,?h4.0\\<triangleright>?h0.0\\<rbrakk>\n  \\<Longrightarrow> \\<exists>h5 h6 h7 h8.\n                       (h5,h6\\<triangleright>?h1.0) \\<and>\n                       (h7,h8\\<triangleright>?h2.0) \\<and>\n                       (h5,h7\\<triangleright>?h3.0) \\<and>\n                       (h6,h8\\<triangleright>?h4.0) \\<and>\n                       (?h1.0,?h2.0\\<triangleright>?h0.0) \\<and>\n                       (?h3.0,?h4.0\\<triangleright>?h0.0)\n\ngoal (1 subgoal):\n 1. ((h1,h2\\<triangleright>h0) \\<and> (h3,h4\\<triangleright>h0)) =\n    (\\<exists>h5 h6 h7 h8.\n        (h5,h6\\<triangleright>h1) \\<and>\n        (h7,h8\\<triangleright>h2) \\<and>\n        (h5,h7\\<triangleright>h3) \\<and>\n        (h6,h8\\<triangleright>h4) \\<and>\n        (h1,h2\\<triangleright>h0) \\<and> (h3,h4\\<triangleright>h0))", "by auto"], ["", "end"], ["", "text \\<open>The above proves the soundness and invertibility of LS\\_PASL.\\<close>"], ["", "section \\<open>Lemmas David proved for separation algebra.\\<close>"], ["", "lemma sep_substate_tran: \n  \"x \\<preceq> y \\<and> y \\<preceq> z \\<Longrightarrow> x \\<preceq> z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<preceq> y \\<and> y \\<preceq> z \\<Longrightarrow> x \\<preceq> z", "unfolding sep_substate_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>z. x ## z \\<and> x + z = y) \\<and>\n    (\\<exists>za. y ## za \\<and> y + za = z) \\<Longrightarrow>\n    \\<exists>za. x ## za \\<and> x + za = z", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<exists>z. x ## z \\<and> x + z = y) \\<and>\n    (\\<exists>za. y ## za \\<and> y + za = z) \\<Longrightarrow>\n    \\<exists>za. x ## za \\<and> x + za = z", "assume \"(\\<exists>z. x ## z \\<and> x + z = y) \\<and> (\\<exists>za. y ## za \\<and> y + za = z)\""], ["proof (state)\nthis:\n  (\\<exists>z. x ## z \\<and> x + z = y) \\<and>\n  (\\<exists>za. y ## za \\<and> y + za = z)\n\ngoal (1 subgoal):\n 1. (\\<exists>z. x ## z \\<and> x + z = y) \\<and>\n    (\\<exists>za. y ## za \\<and> y + za = z) \\<Longrightarrow>\n    \\<exists>za. x ## za \\<and> x + za = z", "then"], ["proof (chain)\npicking this:\n  (\\<exists>z. x ## z \\<and> x + z = y) \\<and>\n  (\\<exists>za. y ## za \\<and> y + za = z)", "obtain x' y' where  fixed:\"(x ## x' \\<and> x + x' = y) \\<and> (y ## y' \\<and> y + y' = z)\""], ["proof (prove)\nusing this:\n  (\\<exists>z. x ## z \\<and> x + z = y) \\<and>\n  (\\<exists>za. y ## za \\<and> y + za = z)\n\ngoal (1 subgoal):\n 1. (\\<And>x' y'.\n        (x ## x' \\<and> x + x' = y) \\<and>\n        y ## y' \\<and> y + y' = z \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  (x ## x' \\<and> x + x' = y) \\<and> y ## y' \\<and> y + y' = z\n\ngoal (1 subgoal):\n 1. (\\<exists>z. x ## z \\<and> x + z = y) \\<and>\n    (\\<exists>za. y ## za \\<and> y + za = z) \\<Longrightarrow>\n    \\<exists>za. x ## za \\<and> x + za = z", "then"], ["proof (chain)\npicking this:\n  (x ## x' \\<and> x + x' = y) \\<and> y ## y' \\<and> y + y' = z", "have disj_x:\"x ## y' \\<and> x' ## y'\""], ["proof (prove)\nusing this:\n  (x ## x' \\<and> x + x' = y) \\<and> y ## y' \\<and> y + y' = z\n\ngoal (1 subgoal):\n 1. x ## y' \\<and> x' ## y'", "using sep_disj_addD sep_disj_commute"], ["proof (prove)\nusing this:\n  (x ## x' \\<and> x + x' = y) \\<and> y ## y' \\<and> y + y' = z\n  \\<lbrakk>?x ## ?y + ?z; ?y ## ?z\\<rbrakk>\n  \\<Longrightarrow> ?x ## ?y \\<and> ?x ## ?z\n  ?x ## ?y = ?y ## ?x\n\ngoal (1 subgoal):\n 1. x ## y' \\<and> x' ## y'", "by blast"], ["proof (state)\nthis:\n  x ## y' \\<and> x' ## y'\n\ngoal (1 subgoal):\n 1. (\\<exists>z. x ## z \\<and> x + z = y) \\<and>\n    (\\<exists>za. y ## za \\<and> y + za = z) \\<Longrightarrow>\n    \\<exists>za. x ## za \\<and> x + za = z", "then"], ["proof (chain)\npicking this:\n  x ## y' \\<and> x' ## y'", "have p1:\"x ## (x' + y')\""], ["proof (prove)\nusing this:\n  x ## y' \\<and> x' ## y'\n\ngoal (1 subgoal):\n 1. x ## x' + y'", "using fixed sep_disj_commute sep_disj_addI3"], ["proof (prove)\nusing this:\n  x ## y' \\<and> x' ## y'\n  (x ## x' \\<and> x + x' = y) \\<and> y ## y' \\<and> y + y' = z\n  ?x ## ?y = ?y ## ?x\n  \\<lbrakk>?x + ?y ## ?z; ?x ## ?y\\<rbrakk> \\<Longrightarrow> ?x ## ?y + ?z\n\ngoal (1 subgoal):\n 1. x ## x' + y'", "by blast"], ["proof (state)\nthis:\n  x ## x' + y'\n\ngoal (1 subgoal):\n 1. (\\<exists>z. x ## z \\<and> x + z = y) \\<and>\n    (\\<exists>za. y ## za \\<and> y + za = z) \\<Longrightarrow>\n    \\<exists>za. x ## za \\<and> x + za = z", "then"], ["proof (chain)\npicking this:\n  x ## x' + y'", "have \"x + (x' + y') = z\""], ["proof (prove)\nusing this:\n  x ## x' + y'\n\ngoal (1 subgoal):\n 1. x + (x' + y') = z", "using disj_x"], ["proof (prove)\nusing this:\n  x ## x' + y'\n  x ## y' \\<and> x' ## y'\n\ngoal (1 subgoal):\n 1. x + (x' + y') = z", "by (metis (no_types) fixed sep_add_assoc)"], ["proof (state)\nthis:\n  x + (x' + y') = z\n\ngoal (1 subgoal):\n 1. (\\<exists>z. x ## z \\<and> x + z = y) \\<and>\n    (\\<exists>za. y ## za \\<and> y + za = z) \\<Longrightarrow>\n    \\<exists>za. x ## za \\<and> x + za = z", "thus \"\\<exists>za. x ## za \\<and> x + za = z\""], ["proof (prove)\nusing this:\n  x + (x' + y') = z\n\ngoal (1 subgoal):\n 1. \\<exists>za. x ## za \\<and> x + za = z", "using p1"], ["proof (prove)\nusing this:\n  x + (x' + y') = z\n  x ## x' + y'\n\ngoal (1 subgoal):\n 1. \\<exists>za. x ## za \\<and> x + za = z", "by auto"], ["proof (state)\nthis:\n  \\<exists>za. x ## za \\<and> x + za = z\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma precise_sep_conj: \n  assumes a1:\"precise I\" and\n    a2:\"precise I'\"\n  shows \"precise (I \\<and>* I')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. precise (I \\<and>* I')", "proof  (clarsimp simp: precise_def)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>h hp hp'.\n       \\<lbrakk>hp \\<preceq> h; (I \\<and>* I') hp; hp' \\<preceq> h;\n        (I \\<and>* I') hp'\\<rbrakk>\n       \\<Longrightarrow> hp = hp'", "fix hp hp' h"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>h hp hp'.\n       \\<lbrakk>hp \\<preceq> h; (I \\<and>* I') hp; hp' \\<preceq> h;\n        (I \\<and>* I') hp'\\<rbrakk>\n       \\<Longrightarrow> hp = hp'", "assume hp:\"hp \\<preceq> h\" and hp': \"hp' \\<preceq> h\" and ihp: \"(I \\<and>* I') hp\" and ihp': \"(I \\<and>* I') hp'\""], ["proof (state)\nthis:\n  hp \\<preceq> h\n  hp' \\<preceq> h\n  (I \\<and>* I') hp\n  (I \\<and>* I') hp'\n\ngoal (1 subgoal):\n 1. \\<And>h hp hp'.\n       \\<lbrakk>hp \\<preceq> h; (I \\<and>* I') hp; hp' \\<preceq> h;\n        (I \\<and>* I') hp'\\<rbrakk>\n       \\<Longrightarrow> hp = hp'", "obtain hp1 hp2 where ihpex: \"hp1 ## hp2 \\<and> hp = hp1 + hp2 \\<and> I hp1 \\<and> I' hp2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>hp1 hp2.\n        hp1 ## hp2 \\<and>\n        hp = hp1 + hp2 \\<and> I hp1 \\<and> I' hp2 \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using ihp sep_conjD"], ["proof (prove)\nusing this:\n  (I \\<and>* I') hp\n  (?P \\<and>* ?Q) ?h \\<Longrightarrow>\n  \\<exists>x y. x ## y \\<and> ?h = x + y \\<and> ?P x \\<and> ?Q y\n\ngoal (1 subgoal):\n 1. (\\<And>hp1 hp2.\n        hp1 ## hp2 \\<and>\n        hp = hp1 + hp2 \\<and> I hp1 \\<and> I' hp2 \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  hp1 ## hp2 \\<and> hp = hp1 + hp2 \\<and> I hp1 \\<and> I' hp2\n\ngoal (1 subgoal):\n 1. \\<And>h hp hp'.\n       \\<lbrakk>hp \\<preceq> h; (I \\<and>* I') hp; hp' \\<preceq> h;\n        (I \\<and>* I') hp'\\<rbrakk>\n       \\<Longrightarrow> hp = hp'", "obtain hp1' hp2' where ihpex': \"hp1' ## hp2' \\<and> hp' = hp1' + hp2' \\<and> I hp1' \\<and> I' hp2'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>hp1' hp2'.\n        hp1' ## hp2' \\<and>\n        hp' = hp1' + hp2' \\<and> I hp1' \\<and> I' hp2' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using ihp' sep_conjD"], ["proof (prove)\nusing this:\n  (I \\<and>* I') hp'\n  (?P \\<and>* ?Q) ?h \\<Longrightarrow>\n  \\<exists>x y. x ## y \\<and> ?h = x + y \\<and> ?P x \\<and> ?Q y\n\ngoal (1 subgoal):\n 1. (\\<And>hp1' hp2'.\n        hp1' ## hp2' \\<and>\n        hp' = hp1' + hp2' \\<and> I hp1' \\<and> I' hp2' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  hp1' ## hp2' \\<and> hp' = hp1' + hp2' \\<and> I hp1' \\<and> I' hp2'\n\ngoal (1 subgoal):\n 1. \\<And>h hp hp'.\n       \\<lbrakk>hp \\<preceq> h; (I \\<and>* I') hp; hp' \\<preceq> h;\n        (I \\<and>* I') hp'\\<rbrakk>\n       \\<Longrightarrow> hp = hp'", "have f3: \"hp2' ## hp1'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. hp2' ## hp1'", "by (simp add: ihpex' sep_disj_commute)"], ["proof (state)\nthis:\n  hp2' ## hp1'\n\ngoal (1 subgoal):\n 1. \\<And>h hp hp'.\n       \\<lbrakk>hp \\<preceq> h; (I \\<and>* I') hp; hp' \\<preceq> h;\n        (I \\<and>* I') hp'\\<rbrakk>\n       \\<Longrightarrow> hp = hp'", "have f4: \"hp2 ## hp1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. hp2 ## hp1", "using ihpex sep_disj_commute"], ["proof (prove)\nusing this:\n  hp1 ## hp2 \\<and> hp = hp1 + hp2 \\<and> I hp1 \\<and> I' hp2\n  ?x ## ?y = ?y ## ?x\n\ngoal (1 subgoal):\n 1. hp2 ## hp1", "by blast"], ["proof (state)\nthis:\n  hp2 ## hp1\n\ngoal (1 subgoal):\n 1. \\<And>h hp hp'.\n       \\<lbrakk>hp \\<preceq> h; (I \\<and>* I') hp; hp' \\<preceq> h;\n        (I \\<and>* I') hp'\\<rbrakk>\n       \\<Longrightarrow> hp = hp'", "have f5:\"\\<And>a. \\<not> a \\<preceq> hp \\<or> a \\<preceq> h\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a. \\<not> a \\<preceq> hp \\<or> a \\<preceq> h", "using hp sep_substate_tran"], ["proof (prove)\nusing this:\n  hp \\<preceq> h\n  ?x \\<preceq> ?y \\<and> ?y \\<preceq> ?z \\<Longrightarrow> ?x \\<preceq> ?z\n\ngoal (1 subgoal):\n 1. \\<And>a. \\<not> a \\<preceq> hp \\<or> a \\<preceq> h", "by blast"], ["proof (state)\nthis:\n  \\<not> ?a \\<preceq> hp \\<or> ?a \\<preceq> h\n\ngoal (1 subgoal):\n 1. \\<And>h hp hp'.\n       \\<lbrakk>hp \\<preceq> h; (I \\<and>* I') hp; hp' \\<preceq> h;\n        (I \\<and>* I') hp'\\<rbrakk>\n       \\<Longrightarrow> hp = hp'", "have f6:\"\\<And>a. \\<not> a \\<preceq> hp' \\<or> a \\<preceq> h\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a. \\<not> a \\<preceq> hp' \\<or> a \\<preceq> h", "using hp' sep_substate_tran"], ["proof (prove)\nusing this:\n  hp' \\<preceq> h\n  ?x \\<preceq> ?y \\<and> ?y \\<preceq> ?z \\<Longrightarrow> ?x \\<preceq> ?z\n\ngoal (1 subgoal):\n 1. \\<And>a. \\<not> a \\<preceq> hp' \\<or> a \\<preceq> h", "by blast"], ["proof (state)\nthis:\n  \\<not> ?a \\<preceq> hp' \\<or> ?a \\<preceq> h\n\ngoal (1 subgoal):\n 1. \\<And>h hp hp'.\n       \\<lbrakk>hp \\<preceq> h; (I \\<and>* I') hp; hp' \\<preceq> h;\n        (I \\<and>* I') hp'\\<rbrakk>\n       \\<Longrightarrow> hp = hp'", "thus \"hp = hp'\""], ["proof (prove)\nusing this:\n  \\<not> ?a \\<preceq> hp' \\<or> ?a \\<preceq> h\n\ngoal (1 subgoal):\n 1. hp = hp'", "using f4 f3 f5 a2 a1 a1 a2 ihpex ihpex'"], ["proof (prove)\nusing this:\n  \\<not> ?a \\<preceq> hp' \\<or> ?a \\<preceq> h\n  hp2 ## hp1\n  hp2' ## hp1'\n  \\<not> ?a \\<preceq> hp \\<or> ?a \\<preceq> h\n  precise I'\n  precise I\n  precise I\n  precise I'\n  hp1 ## hp2 \\<and> hp = hp1 + hp2 \\<and> I hp1 \\<and> I' hp2\n  hp1' ## hp2' \\<and> hp' = hp1' + hp2' \\<and> I hp1' \\<and> I' hp2'\n\ngoal (1 subgoal):\n 1. hp = hp'", "unfolding precise_def"], ["proof (prove)\nusing this:\n  \\<not> ?a \\<preceq> hp' \\<or> ?a \\<preceq> h\n  hp2 ## hp1\n  hp2' ## hp1'\n  \\<not> ?a \\<preceq> hp \\<or> ?a \\<preceq> h\n  \\<forall>h hp hp'.\n     hp \\<preceq> h \\<and>\n     I' hp \\<and> hp' \\<preceq> h \\<and> I' hp' \\<longrightarrow>\n     hp = hp'\n  \\<forall>h hp hp'.\n     hp \\<preceq> h \\<and>\n     I hp \\<and> hp' \\<preceq> h \\<and> I hp' \\<longrightarrow>\n     hp = hp'\n  \\<forall>h hp hp'.\n     hp \\<preceq> h \\<and>\n     I hp \\<and> hp' \\<preceq> h \\<and> I hp' \\<longrightarrow>\n     hp = hp'\n  \\<forall>h hp hp'.\n     hp \\<preceq> h \\<and>\n     I' hp \\<and> hp' \\<preceq> h \\<and> I' hp' \\<longrightarrow>\n     hp = hp'\n  hp1 ## hp2 \\<and> hp = hp1 + hp2 \\<and> I hp1 \\<and> I' hp2\n  hp1' ## hp2' \\<and> hp' = hp1' + hp2' \\<and> I hp1' \\<and> I' hp2'\n\ngoal (1 subgoal):\n 1. hp = hp'", "by (metis sep_add_commute sep_substate_disj_add')"], ["proof (state)\nthis:\n  hp = hp'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma unique_subheap:\n  \"(\\<sigma>1,\\<sigma>2\\<triangleright>\\<sigma>) \\<Longrightarrow> \\<exists>!\\<sigma>2'.(\\<sigma>1,\\<sigma>2'\\<triangleright>\\<sigma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<sigma>1,\\<sigma>2\\<triangleright>\\<sigma> \\<Longrightarrow>\n    \\<exists>!\\<sigma>2'. \\<sigma>1,\\<sigma>2'\\<triangleright>\\<sigma>", "using lspasl_c_der"], ["proof (prove)\nusing this:\n  \\<lbrakk>?h1.0,?h2.0\\<triangleright>?h0.0;\n   ?h1.0,?h3.0\\<triangleright>?h0.0\\<rbrakk>\n  \\<Longrightarrow> (?h1.0,?h2.0\\<triangleright>?h0.0) \\<and> ?h2.0 = ?h3.0\n\ngoal (1 subgoal):\n 1. \\<sigma>1,\\<sigma>2\\<triangleright>\\<sigma> \\<Longrightarrow>\n    \\<exists>!\\<sigma>2'. \\<sigma>1,\\<sigma>2'\\<triangleright>\\<sigma>", "by blast"], ["", "lemma sep_split_substate:\n  \"(\\<sigma>1, \\<sigma>2\\<triangleright> \\<sigma>) \\<Longrightarrow> \n  (\\<sigma>1  \\<preceq> \\<sigma>) \\<and> (\\<sigma>2  \\<preceq> \\<sigma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<sigma>1,\\<sigma>2\\<triangleright>\\<sigma> \\<Longrightarrow>\n    \\<sigma>1 \\<preceq> \\<sigma> \\<and> \\<sigma>2 \\<preceq> \\<sigma>", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<sigma>1,\\<sigma>2\\<triangleright>\\<sigma> \\<Longrightarrow>\n    \\<sigma>1 \\<preceq> \\<sigma> \\<and> \\<sigma>2 \\<preceq> \\<sigma>", "assume a1:\"(\\<sigma>1, \\<sigma>2\\<triangleright> \\<sigma>)\""], ["proof (state)\nthis:\n  \\<sigma>1,\\<sigma>2\\<triangleright>\\<sigma>\n\ngoal (1 subgoal):\n 1. \\<sigma>1,\\<sigma>2\\<triangleright>\\<sigma> \\<Longrightarrow>\n    \\<sigma>1 \\<preceq> \\<sigma> \\<and> \\<sigma>2 \\<preceq> \\<sigma>", "thus \"(\\<sigma>1  \\<preceq> \\<sigma>) \\<and> (\\<sigma>2  \\<preceq> \\<sigma>)\""], ["proof (prove)\nusing this:\n  \\<sigma>1,\\<sigma>2\\<triangleright>\\<sigma>\n\ngoal (1 subgoal):\n 1. \\<sigma>1 \\<preceq> \\<sigma> \\<and> \\<sigma>2 \\<preceq> \\<sigma>", "by (auto simp add: sep_disj_commute \n        tern_rel_def \n        sep_substate_disj_add \n        sep_substate_disj_add')"], ["proof (state)\nthis:\n  \\<sigma>1 \\<preceq> \\<sigma> \\<and> \\<sigma>2 \\<preceq> \\<sigma>\n\ngoal:\nNo subgoals!", "qed"], ["", "abbreviation sep_septraction :: \"(('a::sep_algebra) \\<Rightarrow> bool) \\<Rightarrow> ('a \\<Rightarrow> bool) \\<Rightarrow> ('a \\<Rightarrow> bool)\" (infixr \"\\<longrightarrow>\\<oplus>\" 25)\n  where\n    \"P \\<longrightarrow>\\<oplus> Q \\<equiv>  not (P \\<longrightarrow>* not Q)\""], ["", "section \\<open>Below we integrate the inference rules in proof search.\\<close>"], ["", "method try_lspasl_empl = (\n    match premises in P[thin]:\"sep_empty ?h\" \\<Rightarrow> \n    \\<open>insert lspasl_empl_der[OF P]\\<close>,\n    simp?\n    )"], ["", "method try_lspasl_starl = (\n    match premises in P[thin]:\"(?A ** ?B) ?h\" \\<Rightarrow> \n    \\<open>insert lspasl_starl_der[OF P], auto\\<close>,\n    simp?\n    )"], ["", "method try_lspasl_magicr = (\n    match premises in P[thin]:\"\\<not>(?A \\<longrightarrow>* ?B) ?h\" \\<Rightarrow> \n    \\<open>insert lspasl_magicr_der[OF P], auto\\<close>,\n    simp?\n    )"], ["", "text \\<open>Only apply the rule Eq on (0,h1,h2) where h1 and h2\n  are not syntactically the same.\\<close>"], ["", "method try_lspasl_eq = (\n    match premises in P[thin]:\"(0,?h1\\<triangleright>?h2)\" \\<Rightarrow> \n    \\<open>match P in \n    \"(0,h\\<triangleright>h)\" for h \\<Rightarrow> \\<open>fail\\<close>     \n    \\<bar>_ \\<Rightarrow> \\<open>insert lspasl_eq_der[OF P], auto\\<close>\\<close>,\n    simp?\n    )"], ["", "text \\<open>We restrict that the rule IU can't be applied \n  on (0,0,0).\\<close>"], ["", "method try_lspasl_iu = (\n    match premises in P[thin]:\"(?h1,?h2\\<triangleright>0)\" \\<Rightarrow> \n    \\<open>match P in\n    \"(0,0\\<triangleright>0)\" \\<Rightarrow> \\<open>fail\\<close>\n    \\<bar>_ \\<Rightarrow> \\<open>insert lspasl_iu_der[OF P], auto\\<close>\\<close>,\n    simp?\n    )"], ["", "text \\<open>We restrict that the rule D can't be applied \n  on (0,0,0).\\<close>"], ["", "method try_lspasl_d = (\n    match premises in P[thin]:\"(h1,h1\\<triangleright>h2)\" for h1 h2 \\<Rightarrow> \n    \\<open>match P in \n    \"(0,0\\<triangleright>0)\" \\<Rightarrow> \\<open>fail\\<close>\n    \\<bar>_ \\<Rightarrow> \\<open>insert lspasl_d_der[OF P], auto\\<close>\\<close>,\n    simp?\n    )"], ["", "text \\<open>We restrict that the rule P can't be applied to\n  two syntactically identical ternary relational atoms.\\<close>"], ["", "method try_lspasl_p = (\n    match premises in P[thin]:\"(h1,h2\\<triangleright>h0)\" for h0 h1 h2 \\<Rightarrow> \n    \\<open>match premises in \"(h1,h2\\<triangleright>h0)\" \\<Rightarrow> \\<open>fail\\<close>\n    \\<bar>P'[thin]:\"(h1,h2\\<triangleright>?h3)\" \\<Rightarrow> \\<open>insert lspasl_p_der[OF P P'], auto\\<close>\\<close>,\n    simp?\n    )"], ["", "text \\<open>We restrict that the rule C can't be applied to\n  two syntactically identical ternary relational atoms.\\<close>"], ["", "method try_lspasl_c = (\n    match premises in P[thin]:\"(h1,h2\\<triangleright>h0)\" for h0 h1 h2 \\<Rightarrow> \n    \\<open>match premises in \"(h1,h2\\<triangleright>h0)\" \\<Rightarrow> \\<open>fail\\<close>\n    \\<bar>P'[thin]:\"(h1,?h3\\<triangleright>h0)\" \\<Rightarrow> \\<open>insert lspasl_c_der[OF P P'], auto\\<close>\\<close>,\n    simp?\n    )"], ["", "text \\<open>We restrict that *R only applies to a pair of \n  a ternary relational and a formula once. \n  Here, we need to first try simp to unify heaps. \n  In the end, we try simp\\_all to simplify all branches. \n  A similar strategy is used in -*L.\\<close>"], ["", "method try_lspasl_starr = (\n    simp?,\n    match premises in P:\"(h1,h2\\<triangleright>h)\" and P':\"\\<not>(A ** B) (h::'a::heap_sep_algebra)\" for h1 h2 h A B \\<Rightarrow> \n    \\<open>match premises in \"starr_applied h1 h2 h (A ** B)\" \\<Rightarrow> \\<open>fail\\<close> \n    \\<bar>_ \\<Rightarrow> \\<open>insert lspasl_starr_der[OF P P'], auto\\<close>\\<close>,\n    simp_all?\n    )"], ["", "text \\<open>We restrict that -*L only applies to a pair of \n  a ternary relational and a formula once.\\<close>"], ["", "method try_lspasl_magicl = (\n    simp?,\n    match premises in P: \"(h1,h\\<triangleright>h2)\" and P':\"(A \\<longrightarrow>* B) (h::'a::heap_sep_algebra)\" for h1 h2 h A B \\<Rightarrow> \n    \\<open>match premises in \"magicl_applied h1 h h2 (A \\<longrightarrow>* B)\" \\<Rightarrow> \\<open>fail\\<close> \n    \\<bar>_ \\<Rightarrow> \\<open>insert lspasl_magicl_der[OF P P'], auto\\<close>\\<close>,\n    simp_all?\n    )"], ["", "text \\<open>We restrict that the U rule is only applicable to a world h\n  when (h,0,h) is not in the premises. There are two cases:\n  (1) We pick a ternary relational atom (h1,h2,h0),\n  and check if (h1,0,h1) occurs in the premises, if not, \n  apply U on h1. Otherwise, check other ternary relational atoms.\n  (2) We pick a labelled formula (A h), \n  and check if (h,0,h) occurs in the premises, if not,\n  apply U on h. Otherwise, check other labelled formulae.\\<close>"], ["", "method try_lspasl_u_tern = (\n    match premises in \n    P:\"(h1,h2\\<triangleright>(h0::'a::heap_sep_algebra))\" for h1 h2 h0 \\<Rightarrow>\n    \\<open>match premises in \n    \"(h1,0\\<triangleright>h1)\" \\<Rightarrow> \\<open>match premises in \n    \"(h2,0\\<triangleright>h2)\" \\<Rightarrow> \\<open>match premises in \n    I1:\"(h0,0\\<triangleright>h0)\" \\<Rightarrow> \\<open>fail\\<close>\n    \\<bar>_ \\<Rightarrow> \\<open>insert lspasl_u_der[of h0]\\<close>\\<close>\n    \\<bar>_ \\<Rightarrow> \\<open>insert lspasl_u_der[of h2]\\<close>\\<close>\n    \\<bar>_ \\<Rightarrow> \\<open>insert lspasl_u_der[of h1]\\<close>\\<close>,\n    simp?\n    )"], ["", "method try_lspasl_u_form = (\n    match premises in \n    P':\"_ (h::'a::heap_sep_algebra)\" for h \\<Rightarrow>\n    \\<open>match premises in \"(h,0\\<triangleright>h)\" \\<Rightarrow> \\<open>fail\\<close>\n    \\<bar>\"(0,0\\<triangleright>0)\" and \"h = 0\" \\<Rightarrow> \\<open>fail\\<close>\n    \\<bar>\"(0,0\\<triangleright>0)\" and \"0 = h\" \\<Rightarrow> \\<open>fail\\<close>\n    \\<bar>_ \\<Rightarrow> \\<open>insert lspasl_u_der[of h]\\<close>\\<close>,\n    simp?\n    )"], ["", "text \\<open>We restrict that the E rule is only applicable to\n  (h1,h2,h0) when (h2,h1,h0) is not in the premises.\\<close>"], ["", "method try_lspasl_e = (\n    match premises in P:\"(h1,h2\\<triangleright>h0)\" for h1 h2 h0 \\<Rightarrow> \n    \\<open>match premises in \"(h2,h1\\<triangleright>h0)\" \\<Rightarrow> \\<open>fail\\<close>\n    \\<bar>_ \\<Rightarrow> \\<open>insert lspasl_e_der[OF P], auto\\<close>\\<close>,\n    simp?\n    )"], ["", "text \\<open>We restrict that the A rule is only applicable to \n  (h1,h2,h0) and (h3,h4,h1) when (h3,h,h0) and (h2,h4,h) \n  or any commutative variants of the two \n  do not occur in the premises, for some h. \n  Additionally, we do not allow A to be applied to two identical \n  ternary relational atoms. \n  We further restrict that the leaves must not be 0, \n  because otherwise this application does not gain anything.\\<close>"], ["", "method try_lspasl_a = (\n    match premises in \"(h1,h2\\<triangleright>h0)\" for h0 h1 h2 \\<Rightarrow> \n    \\<open>match premises in \n    \"(0,h2\\<triangleright>h0)\" \\<Rightarrow> \\<open>fail\\<close>\n    \\<bar>\"(h1,0\\<triangleright>h0)\" \\<Rightarrow> \\<open>fail\\<close>\n    \\<bar>\"(h1,h2\\<triangleright>0)\" \\<Rightarrow> \\<open>fail\\<close>\n    \\<bar>P[thin]:\"(h1,h2\\<triangleright>h0)\" \\<Rightarrow> \n    \\<open>match premises in\n    P':\"(h3,h4\\<triangleright>h1)\" for h3 h4 \\<Rightarrow> \\<open>match premises in\n    \"(0,h4\\<triangleright>h1)\" \\<Rightarrow> \\<open>fail\\<close>\n    \\<bar>\"(h3,0\\<triangleright>h1)\" \\<Rightarrow> \\<open>fail\\<close>\n    \\<bar>\"(_,h3\\<triangleright>h0)\" \\<Rightarrow> \\<open>fail\\<close>\n    \\<bar>\"(h3,_\\<triangleright>h0)\" \\<Rightarrow> \\<open>fail\\<close>\n    \\<bar>\"(h2,h4\\<triangleright>_)\" \\<Rightarrow> \\<open>fail\\<close>\n    \\<bar>\"(h4,h2\\<triangleright>_)\" \\<Rightarrow> \\<open>fail\\<close>       \n    \\<bar>_ \\<Rightarrow> \\<open>insert P P', drule lspasl_a_der, auto\\<close>\\<close>\\<close>\\<close>,\n    simp?\n    )"], ["", "text \\<open>I don't have a good heuristics for CS right now. \n  I simply forbid CS to be applied on the same pair twice.\\<close>"], ["", "method try_lspasl_cs = (\n    match premises in P[thin]:\"(h1,h2\\<triangleright>h0)\" for h0 h1 h2 \\<Rightarrow> \n    \\<open>match premises in \"(h1,h2\\<triangleright>h0)\" \\<Rightarrow> \\<open>fail\\<close> \n    \\<bar>\"(h2,h1\\<triangleright>h0)\" \\<Rightarrow> \\<open>fail\\<close>\n    \\<bar>P':\"(h3,h4\\<triangleright>h0)\" for h3 h4 \\<Rightarrow> \\<open>match premises in \n    \"(h5,h6\\<triangleright>h1)\" and \"(h7,h8\\<triangleright>h2)\" and \"(h5,h7\\<triangleright>h3)\" and \"(h6,h8\\<triangleright>h4)\" for h5 h6 h7 h8 \\<Rightarrow> \\<open>fail\\<close>\n    \\<bar>\"(i5,i6\\<triangleright>h2)\" and \"(i7,i8\\<triangleright>h1)\" and \"(i5,i7\\<triangleright>h3)\" and \"(i6,i8\\<triangleright>h4)\" for i5 i6 i7 i8 \\<Rightarrow> \\<open>fail\\<close>\n    \\<bar>\"(j5,j6\\<triangleright>h1)\" and \"(j7,j8\\<triangleright>h2)\" and \"(j5,j7\\<triangleright>h4)\" and \"(j6,j8\\<triangleright>h3)\" for j5 j6 j7 j8 \\<Rightarrow> \\<open>fail\\<close>\n    \\<bar>\"(k5,k6\\<triangleright>h2)\" and \"(k7,k8\\<triangleright>h1)\" and \"(k5,k7\\<triangleright>h4)\" and \"(k6,k8\\<triangleright>h3)\" for k5 k6 k7 k8 \\<Rightarrow> \\<open>fail\\<close>\n    \\<bar>_ \\<Rightarrow> \\<open>insert lspasl_cs_der[OF P P'], auto\\<close>\\<close>\\<close>,\n    simp\n    )"], ["", "method try_lspasl_starr_guided = (\n    simp?,\n    match premises in P:\"(h1,h2\\<triangleright>h)\" and P':\"\\<not>(A ** B) (h::'a::heap_sep_algebra)\" for h1 h2 h A B \\<Rightarrow> \n    \\<open>match premises in \"starr_applied h1 h2 h (A ** B)\" \\<Rightarrow> \\<open>fail\\<close> \n    \\<bar>\"A h1\" \\<Rightarrow> \\<open>insert lspasl_starr_der[OF P P'], auto\\<close>\n    \\<bar>\"B h2\" \\<Rightarrow> \\<open>insert lspasl_starr_der[OF P P'], auto\\<close>\\<close>,\n    simp_all?\n    )"], ["", "method try_lspasl_magicl_guided = (\n    simp?,\n    match premises in P: \"(h1,h\\<triangleright>h2)\" and P':\"(A \\<longrightarrow>* B) (h::'a::heap_sep_algebra)\" for h1 h2 h A B \\<Rightarrow> \n    \\<open>match premises in \"magicl_applied h1 h h2 (A \\<longrightarrow>* B)\" \\<Rightarrow> \\<open>fail\\<close> \n    \\<bar>\"A h1\" \\<Rightarrow> \\<open>insert lspasl_magicl_der[OF P P'], auto\\<close>\n    \\<bar>\"\\<not>(B h2)\" \\<Rightarrow> \\<open>insert lspasl_magicl_der[OF P P'], auto\\<close>\\<close>,\n    simp_all?\n    )"], ["", "text \\<open>In case the conclusion is not False, we normalise the goal as below.\\<close>"], ["", "method norm_goal = (\n    match conclusion in \"False\" \\<Rightarrow> \\<open>fail\\<close>\n    \\<bar>_ \\<Rightarrow> \\<open>rule ccontr\\<close>,\n    simp?\n    )"], ["", "text \\<open>The tactic for separata. We first try to simplify the problem\n  with auto simp add: sep\\_conj\\_ac, which ought to solve many problems.\n  Then we apply the \"true\" invertible rules and structural rules \n  which unify worlds as much as possible, followed by auto to simplify the goals. \n  Then we apply *R and -*L and other structural rules.\n  The rule CS is only applied when nothing else is applicable. We try not\n  to use it.\\<close>"], ["", "text \\<open>\n  *****\n  Note, (try\\_lspasl\\_u\n  |try\\_lspasl\\_e)\n  |try\\_lspasl\\_a)+\n  may cause infinite loops.\n  *****\n\\<close>"], ["", "method separata =\n  ((auto simp add: sep_conj_ac)\n    |(norm_goal?,\n        ((try_lspasl_empl (* This section contains invertible rules. Apply as often as possible. *)\n          |try_lspasl_starl\n          |try_lspasl_magicr\n          |try_lspasl_iu\n          |try_lspasl_d\n          |try_lspasl_eq     \n          |try_lspasl_p\n          |try_lspasl_c\n          |try_lspasl_starr_guided\n          |try_lspasl_magicl_guided)+,\n          auto?)\n      |(try_lspasl_u_tern (* This section contains structural rules. *)\n        |try_lspasl_e\n        |try_lspasl_a)+\n      |(try_lspasl_starr (* This section contains *R and -*L. *)\n        |try_lspasl_magicl)\n        )+\n    |try_lspasl_u_form+ (* This rule is rarely used. *)\n    |try_lspasl_cs (* Cross-split adds too much complication. Try not to use it. *)\n      )+"], ["", "section \\<open>Some examples.\\<close>"], ["", "text \\<open>Let's prove something that abstract separation logic provers struggle to prove. \n  This can be proved easily in Isabelle, proof found by Sledgehammer.\\<close>"], ["", "lemma fm_hard: \"((sep_empty imp (p0 \\<longrightarrow>* (((p0 ** (p0 \\<longrightarrow>* p1)) ** (not p1)) \\<longrightarrow>* \n  (p0 ** (p0 ** ((p0 \\<longrightarrow>* p1) ** (not p1))))))) imp ((((sep_empty ** p0) ** \n  (p0 ** ((p0 \\<longrightarrow>* p1) ** (not p1)))) imp (((p0 ** p0) ** (p0 \\<longrightarrow>* p1)) ** \n  (not p1))) ** sep_empty)) h\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<box> h \\<longrightarrow>\n     (p0 \\<longrightarrow>*\n      (p0 \\<and>* (p0 \\<longrightarrow>* p1)) \\<and>*\n      (\\<lambda>s. \\<not> p1 s) \\<longrightarrow>*\n      p0 \\<and>*\n      p0 \\<and>*\n      (p0 \\<longrightarrow>* p1) \\<and>* (\\<lambda>s. \\<not> p1 s))\n      h) \\<longrightarrow>\n    ((\\<lambda>s.\n         ((\\<box> \\<and>* p0) \\<and>*\n          p0 \\<and>*\n          (p0 \\<longrightarrow>* p1) \\<and>* (\\<lambda>s. \\<not> p1 s))\n          s \\<longrightarrow>\n         (((p0 \\<and>* p0) \\<and>* (p0 \\<longrightarrow>* p1)) \\<and>*\n          (\\<lambda>s. \\<not> p1 s))\n          s) \\<and>*\n     \\<box>)\n     h", "by separata"], ["", "text \\<open>The following formula can only be proved in partial-deterministic \n  separation algebras. \n  Sledgehammer took a rather long time to find a proof.\\<close>"], ["", "lemma fm_partial: \"(((not (sep_true \\<longrightarrow>* (not sep_empty))) ** \n  (not (sep_true \\<longrightarrow>* (not sep_empty)))) imp \n  (not (sep_true \\<longrightarrow>* (not sep_empty)))) \n  (h::'a::heap_sep_algebra)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<lambda>s.\n         \\<not> ((\\<lambda>s. True) \\<longrightarrow>*\n                 (\\<lambda>s. \\<not> \\<box> s))\n                 s) \\<and>*\n     (\\<lambda>s.\n         \\<not> ((\\<lambda>s. True) \\<longrightarrow>*\n                 (\\<lambda>s. \\<not> \\<box> s))\n                 s))\n     h \\<longrightarrow>\n    \\<not> ((\\<lambda>s. True) \\<longrightarrow>*\n            (\\<lambda>s. \\<not> \\<box> s))\n            h", "by separata"], ["", "text \\<open>The following is the axiom of indivisible unit. \n  Sledgehammer finds a proof easily.\\<close>"], ["", "lemma ax_iu: \"((sep_empty and (A ** B)) imp A) \n  (h::'a::heap_sep_algebra)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<box> h \\<and> (A \\<and>* B) h \\<longrightarrow> A h", "by separata"], ["", "text \\<open>Sledgehammer fails to find a proof in 300s for this one.\\<close>"], ["", "lemma \"(not (((A ** (C \\<longrightarrow>* (not ((not (A \\<longrightarrow>* B)) ** C)))) and (not B)) ** C)) \n  (h::'a::heap_sep_algebra)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> ((\\<lambda>s.\n                (A \\<and>*\n                 (C \\<longrightarrow>*\n                  (\\<lambda>s.\n                      \\<not> ((\\<lambda>s.\n                                  \\<not> (A \\<longrightarrow>* B) s) \\<and>*\n                              C)\n                              s)))\n                 s \\<and>\n                \\<not> B s) \\<and>*\n            C)\n            h", "by separata"], ["", "text \\<open>Sledgehammer finds a proof easily.\\<close>"], ["", "lemma \"((sep_empty \\<longrightarrow>* (not ((not A) ** sep_empty))) imp A) \n  (h::'a::heap_sep_algebra)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<box> \\<longrightarrow>*\n     (\\<lambda>s. \\<not> ((\\<lambda>s. \\<not> A s) \\<and>* \\<box>) s))\n     h \\<longrightarrow>\n    A h", "by separata"], ["", "text \\<open>Sledgehammer finds a proof in 46 seconds.\\<close>"], ["", "lemma \"(A imp (not ((not (A ** B)) and (not (A ** (not B)))))) \n  (h::'a::heap_sep_algebra)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A h \\<longrightarrow>\n    \\<not> (\\<not> (A \\<and>* B) h \\<and>\n            \\<not> (A \\<and>* (\\<lambda>s. \\<not> B s)) h)", "by separata"], ["", "text \\<open>Sledgehammer easily finds a proof.\\<close>"], ["", "lemma \"((sep_empty and A) imp (A ** A)) \n  (h::'a::heap_sep_algebra)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<box> h \\<and> A h \\<longrightarrow> (A \\<and>* A) h", "by separata"], ["", "text \\<open>Sledgehammer fails to find a proof in 300s.\\<close>"], ["", "lemma \"(not (((A ** (C \\<longrightarrow>* (not ((not (A \\<longrightarrow>* B)) ** C)))) and (not B)) ** C)) \n  (h::'a::heap_sep_algebra)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> ((\\<lambda>s.\n                (A \\<and>*\n                 (C \\<longrightarrow>*\n                  (\\<lambda>s.\n                      \\<not> ((\\<lambda>s.\n                                  \\<not> (A \\<longrightarrow>* B) s) \\<and>*\n                              C)\n                              s)))\n                 s \\<and>\n                \\<not> B s) \\<and>*\n            C)\n            h", "by separata"], ["", "text \\<open>Sledgehammer finds a proof easily.\\<close>"], ["", "lemma \"((sep_empty \\<longrightarrow>* (not ((not A) ** sep_empty))) imp A) \n  (h::'a::heap_sep_algebra)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<box> \\<longrightarrow>*\n     (\\<lambda>s. \\<not> ((\\<lambda>s. \\<not> A s) \\<and>* \\<box>) s))\n     h \\<longrightarrow>\n    A h", "by separata"], ["", "text \\<open>Sledgehammer finds a proof easily.\\<close>"], ["", "lemma \"(sep_empty imp ((A ** B) \\<longrightarrow>* (B ** A))) \n  (h::'a::heap_sep_algebra)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<box> h \\<longrightarrow>\n    (A \\<and>* B \\<longrightarrow>* B \\<and>* A) h", "by separata"], ["", "text \\<open>Sledgehammer takes a while to find a proof, although the proof is by smt and is fast.\\<close>"], ["", "lemma \"(sep_empty imp ((A ** (B and C)) \\<longrightarrow>* ((A ** B) and (A ** C)))) \n  (h::'a::heap_sep_algebra)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<box> h \\<longrightarrow>\n    (A \\<and>* (\\<lambda>s. B s \\<and> C s) \\<longrightarrow>*\n     (\\<lambda>s. (A \\<and>* B) s \\<and> (A \\<and>* C) s))\n     h", "by separata"], ["", "text \\<open>Sledgehammer takes a long time to find a smt proof, but the smt proves it quickly.\\<close>"], ["", "lemma \"(sep_empty imp ((A \\<longrightarrow>* (B imp C)) \\<longrightarrow>* ((A \\<longrightarrow>* B) imp (A \\<longrightarrow>* C))))\n  (h::'a::heap_sep_algebra)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<box> h \\<longrightarrow>\n    ((A \\<longrightarrow>*\n      (\\<lambda>s. B s \\<longrightarrow> C s)) \\<longrightarrow>*\n     (\\<lambda>s.\n         (A \\<longrightarrow>* B) s \\<longrightarrow>\n         (A \\<longrightarrow>* C) s))\n     h", "by separata"], ["", "text \\<open>Sledgehammer finds a proof quickly.\\<close>"], ["", "lemma \"(sep_empty imp (((A imp B) \\<longrightarrow>* ((A \\<longrightarrow>* A) imp A)) imp (A \\<longrightarrow>* A)))\n  (h::'a::heap_sep_algebra)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<box> h \\<longrightarrow>\n    ((\\<lambda>s. A s \\<longrightarrow> B s) \\<longrightarrow>*\n     (\\<lambda>s. (A \\<longrightarrow>* A) s \\<longrightarrow> A s))\n     h \\<longrightarrow>\n    (A \\<longrightarrow>* A) h", "by separata"], ["", "text \\<open>Sledgehammer finds proofs in a while.\\<close>"], ["", "lemma \"((A \\<longrightarrow>* B) and (sep_true ** (sep_empty and A)) imp B)\n  (h::'a::heap_sep_algebra)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (A \\<longrightarrow>* B) h \\<and>\n    ((\\<lambda>s. True) \\<and>* (\\<lambda>s. \\<box> s \\<and> A s))\n     h \\<longrightarrow>\n    B h", "by separata"], ["", "text \\<open>Sledgehammer finds proofs easily.\\<close>"], ["", "lemma \"((sep_empty \\<longrightarrow>* (not ((not A) ** sep_true))) imp A)\n  (h::'a::heap_sep_algebra)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<box> \\<longrightarrow>*\n     (\\<lambda>s.\n         \\<not> ((\\<lambda>s. \\<not> A s) \\<and>* (\\<lambda>s. True)) s))\n     h \\<longrightarrow>\n    A h", "by separata"], ["", "text \\<open>Sledgehammer takes a while to find a proof.\\<close>"], ["", "lemma \"(not ((A \\<longrightarrow>* (not (A ** B))) and (((not A) \\<longrightarrow>* (not B)) and B)))\n  (h::'a::heap_sep_algebra)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> ((A \\<longrightarrow>* (\\<lambda>s. \\<not> (A \\<and>* B) s))\n             h \\<and>\n            ((\\<lambda>s. \\<not> A s) \\<longrightarrow>*\n             (\\<lambda>s. \\<not> B s))\n             h \\<and>\n            B h)", "by separata"], ["", "text \\<open>Sledgehammer takes a long time to find a smt proof, although smt proves it quickly.\\<close>"], ["", "lemma \"(sep_empty imp ((A \\<longrightarrow>* (B \\<longrightarrow>* C)) \\<longrightarrow>* ((A ** B) \\<longrightarrow>* C)))\n  (h::'a::heap_sep_algebra)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<box> h \\<longrightarrow>\n    ((A \\<longrightarrow>* B \\<longrightarrow>* C) \\<longrightarrow>*\n     A \\<and>* B \\<longrightarrow>* C)\n     h", "by separata"], ["", "text \\<open>Sledgehammer finds proofs easily.\\<close>"], ["", "lemma \"(sep_empty imp ((A  **  (B ** C)) \\<longrightarrow>* ((A ** B) ** C)))\n  (h::'a::heap_sep_algebra)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<box> h \\<longrightarrow>\n    (A \\<and>* B \\<and>* C \\<longrightarrow>* (A \\<and>* B) \\<and>* C) h", "by separata"], ["", "text \\<open>Sledgehammer finds proofs in a few seconds.\\<close>"], ["", "lemma \"(sep_empty imp ((A ** ((B \\<longrightarrow>* D) ** C)) \\<longrightarrow>* ((A ** (B \\<longrightarrow>* D)) ** C)))\n  (h::'a::heap_sep_algebra)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<box> h \\<longrightarrow>\n    (A \\<and>* (B \\<longrightarrow>* D) \\<and>* C \\<longrightarrow>*\n     (A \\<and>* (B \\<longrightarrow>* D)) \\<and>* C)\n     h", "by separata"], ["", "text \\<open>Sledgehammer fails to find a proof in 300s.\\<close>"], ["", "lemma \"(not (((A \\<longrightarrow>* (not ((not (D \\<longrightarrow>* (not (A ** (C ** B))))) ** A))) and C) ** (D and (A ** B))))\n  (h::'a::heap_sep_algebra)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> ((\\<lambda>s.\n                (A \\<longrightarrow>*\n                 (\\<lambda>s.\n                     \\<not> ((\\<lambda>s.\n                                 \\<not> (D \\<longrightarrow>*\n   (\\<lambda>s. \\<not> (A \\<and>* C \\<and>* B) s))\n   s) \\<and>*\n                             A)\n                             s))\n                 s \\<and>\n                C s) \\<and>*\n            (\\<lambda>s. D s \\<and> (A \\<and>* B) s))\n            h", "by separata"], ["", "text \\<open>Sledgehammer takes a while to find a proof.\\<close>"], ["", "lemma \"(not ((C ** (D ** E)) and ((A \\<longrightarrow>* (not (not (B \\<longrightarrow>* not (D ** (E ** C))) ** A))) ** \n  (B and (A ** sep_true)))))\n  (h::'a::heap_sep_algebra)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> ((C \\<and>* D \\<and>* E) h \\<and>\n            ((A \\<longrightarrow>*\n              (\\<lambda>s.\n                  \\<not> ((\\<lambda>s.\n                              \\<not> (B \\<longrightarrow>*\n(\\<lambda>s. \\<not> (D \\<and>* E \\<and>* C) s))\ns) \\<and>*\n                          A)\n                          s)) \\<and>*\n             (\\<lambda>s. B s \\<and> (A \\<and>* (\\<lambda>s. True)) s))\n             h)", "by separata"], ["", "text \\<open>Sledgehammer fails to find a proof in 300s.\\<close>"], ["", "lemma \"(not (((A \\<longrightarrow>* (not ((not (D \\<longrightarrow>* (not ((C ** E) ** (B ** A))))) ** A))) and C) ** (D and (A ** (B ** E)))))\n  (h::'a::heap_sep_algebra)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> ((\\<lambda>s.\n                (A \\<longrightarrow>*\n                 (\\<lambda>s.\n                     \\<not> ((\\<lambda>s.\n                                 \\<not> (D \\<longrightarrow>*\n   (\\<lambda>s. \\<not> ((C \\<and>* E) \\<and>* B \\<and>* A) s))\n   s) \\<and>*\n                             A)\n                             s))\n                 s \\<and>\n                C s) \\<and>*\n            (\\<lambda>s. D s \\<and> (A \\<and>* B \\<and>* E) s))\n            h", "by separata"], ["", "text \\<open>Sledgehammer finds a proof easily.\\<close>"], ["", "lemma \"((A ** (B ** (C ** (D ** E)))) imp (E ** (B ** (A ** (C ** D)))))\n  (h::'a::heap_sep_algebra)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (A \\<and>* B \\<and>* C \\<and>* D \\<and>* E) h \\<longrightarrow>\n    (E \\<and>* B \\<and>* A \\<and>* C \\<and>* D) h", "by separata"], ["", "lemma \"((A ** (B ** (C ** (D ** (E ** (F ** G)))))) imp (G ** (E ** (B ** (A ** (C ** (D ** F)))))))\n  (h::'a::heap_sep_algebra)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (A \\<and>* B \\<and>* C \\<and>* D \\<and>* E \\<and>* F \\<and>* G)\n     h \\<longrightarrow>\n    (G \\<and>* E \\<and>* B \\<and>* A \\<and>* C \\<and>* D \\<and>* F) h", "by separata"], ["", "text \\<open>Sledgehammer finds a proof in a few seconds.\\<close>"], ["", "lemma \"(sep_empty imp ((A ** ((B \\<longrightarrow>* E) ** (C ** D))) \\<longrightarrow>* ((A ** D) ** (C ** (B \\<longrightarrow>* E)))))\n  (h::'a::heap_sep_algebra)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<box> h \\<longrightarrow>\n    (A \\<and>*\n     (B \\<longrightarrow>* E) \\<and>* C \\<and>* D \\<longrightarrow>*\n     (A \\<and>* D) \\<and>* C \\<and>* (B \\<longrightarrow>* E))\n     h", "by separata"], ["", "text \\<open>This is the odd BBI formula that I personally can't \n  prove using any other methods. I only know of a derivation in \n  my labelled sequent calculus for BBI.  \n  Sledgehammer takes a while to find a proof.\\<close>"], ["", "lemma \"(not (sep_empty and A and (B ** (not (C \\<longrightarrow>* (sep_empty imp A))))))\n  (h::'a::heap_sep_algebra)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> (\\<box> h \\<and>\n            A h \\<and>\n            (B \\<and>*\n             (\\<lambda>s.\n                 \\<not> (C \\<longrightarrow>*\n                         (\\<lambda>s. \\<box> s \\<longrightarrow> A s))\n                         s))\n             h)", "by separata"], ["", "text \\<open>Sledgehammer finds a proof easily.\\<close>"], ["", "lemma \"((((sep_true imp p0) imp ((p0 ** p0) \\<longrightarrow>* ((sep_true imp p0) ** (p0 ** p0)))) imp \n  (p1 \\<longrightarrow>* (((sep_true imp p0) imp ((p0 ** p0) \\<longrightarrow>* (((sep_true imp p0) ** p0) ** p0))) ** p1))))\n  (h::'a::heap_sep_algebra)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((True \\<longrightarrow> p0 h) \\<longrightarrow>\n     (p0 \\<and>* p0 \\<longrightarrow>*\n      (\\<lambda>s. True \\<longrightarrow> p0 s) \\<and>* p0 \\<and>* p0)\n      h) \\<longrightarrow>\n    (p1 \\<longrightarrow>*\n     (\\<lambda>s.\n         (True \\<longrightarrow> p0 s) \\<longrightarrow>\n         (p0 \\<and>* p0 \\<longrightarrow>*\n          ((\\<lambda>s. True \\<longrightarrow> p0 s) \\<and>* p0) \\<and>* p0)\n          s) \\<and>*\n     p1)\n     h", "by separata"], ["", "text \\<open>The following are some randomly generated BBI formulae.\\<close>"], ["", "text \\<open>Sledgehammer finds a proof easily.\\<close>"], ["", "lemma \"((((p1 \\<longrightarrow>*   p3) \\<longrightarrow>*   (p5 \\<longrightarrow>*   p2)) imp   ((((p7 **   p4) and   (p3 \\<longrightarrow>*   p2)) imp   \n  ((p7 **   p4) and   (p3 \\<longrightarrow>*   p2))) \\<longrightarrow>*   (((p1 \\<longrightarrow>*   p3) \\<longrightarrow>*   (p5 \\<longrightarrow>*   p2)) **   \n  (((p4 **   p7) and   (p3 \\<longrightarrow>*   p2)) imp   ((p4 **   p7) and   (p3 \\<longrightarrow>*   p2)))))))\n  (h::'a::heap_sep_algebra)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((p1 \\<longrightarrow>* p3) \\<longrightarrow>* p5 \\<longrightarrow>* p2)\n     h \\<longrightarrow>\n    ((\\<lambda>s.\n         (p7 \\<and>* p4) s \\<and>\n         (p3 \\<longrightarrow>* p2) s \\<longrightarrow>\n         (p7 \\<and>* p4) s \\<and>\n         (p3 \\<longrightarrow>* p2) s) \\<longrightarrow>*\n     ((p1 \\<longrightarrow>* p3) \\<longrightarrow>*\n      p5 \\<longrightarrow>* p2) \\<and>*\n     (\\<lambda>s.\n         (p4 \\<and>* p7) s \\<and>\n         (p3 \\<longrightarrow>* p2) s \\<longrightarrow>\n         (p4 \\<and>* p7) s \\<and> (p3 \\<longrightarrow>* p2) s))\n     h", "by separata"], ["", "text \\<open>Sledgehammer finds a proof easily.\\<close>"], ["", "lemma \"(((((p1 \\<longrightarrow>*   (p0 imp   sep_false )) imp   sep_false ) imp   (((p1 imp   sep_false ) imp   \n  ((p0 **   ((p1 imp   sep_false ) \\<longrightarrow>*   (p4 \\<longrightarrow>*   p1))) \\<longrightarrow>*   ((p1 imp   sep_false ) **   \n  (p0 **   ((p1 imp   sep_false ) \\<longrightarrow>*   (p4 \\<longrightarrow>*   p1)))))) imp   sep_false )) imp   \n  (((p1 imp   sep_false ) imp   ((p0 **   ((p1 imp   sep_false ) \\<longrightarrow>*   (p4 \\<longrightarrow>*   p1))) \\<longrightarrow>*   \n  ((p0 **   (p1 imp   sep_false )) **   ((p1 imp   sep_false ) \\<longrightarrow>*   (p4 \\<longrightarrow>*   p1))))) imp   \n  (p1 \\<longrightarrow>*   (p0 imp   sep_false )))))\n  (h::'a::heap_sep_algebra)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (((p1 \\<longrightarrow>* (\\<lambda>s. p0 s \\<longrightarrow> False))\n       h \\<longrightarrow>\n      False) \\<longrightarrow>\n     ((p1 h \\<longrightarrow> False) \\<longrightarrow>\n      (p0 \\<and>*\n       ((\\<lambda>s. p1 s \\<longrightarrow> False) \\<longrightarrow>*\n        p4 \\<longrightarrow>* p1) \\<longrightarrow>*\n       (\\<lambda>s. p1 s \\<longrightarrow> False) \\<and>*\n       p0 \\<and>*\n       ((\\<lambda>s. p1 s \\<longrightarrow> False) \\<longrightarrow>*\n        p4 \\<longrightarrow>* p1))\n       h) \\<longrightarrow>\n     False) \\<longrightarrow>\n    ((p1 h \\<longrightarrow> False) \\<longrightarrow>\n     (p0 \\<and>*\n      ((\\<lambda>s. p1 s \\<longrightarrow> False) \\<longrightarrow>*\n       p4 \\<longrightarrow>* p1) \\<longrightarrow>*\n      (p0 \\<and>* (\\<lambda>s. p1 s \\<longrightarrow> False)) \\<and>*\n      ((\\<lambda>s. p1 s \\<longrightarrow> False) \\<longrightarrow>*\n       p4 \\<longrightarrow>* p1))\n      h) \\<longrightarrow>\n    (p1 \\<longrightarrow>* (\\<lambda>s. p0 s \\<longrightarrow> False)) h", "by separata"], ["", "text \\<open>Sledgehammer finds a proof easily.\\<close>"], ["", "lemma \"(((p0 imp   sep_false ) imp   ((p1 **   p0) \\<longrightarrow>*   (p1 **   ((p0 imp   sep_false ) **   \n  p0)))) imp   ((p0 imp   sep_false ) imp   ((p1 **   p0) \\<longrightarrow>*   ((p1 **   p0) **   (p0 imp   \n  sep_false )))))\n  (h::'a::heap_sep_algebra)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((p0 h \\<longrightarrow> False) \\<longrightarrow>\n     (p1 \\<and>* p0 \\<longrightarrow>*\n      p1 \\<and>* (\\<lambda>s. p0 s \\<longrightarrow> False) \\<and>* p0)\n      h) \\<longrightarrow>\n    (p0 h \\<longrightarrow> False) \\<longrightarrow>\n    (p1 \\<and>* p0 \\<longrightarrow>*\n     (p1 \\<and>* p0) \\<and>* (\\<lambda>s. p0 s \\<longrightarrow> False))\n     h", "by separata"], ["", "text \\<open>Sledgehammer finds a proof in a while.\\<close>"], ["", "lemma \"(sep_empty  imp   ((((p4 **   p1) \\<longrightarrow>*   ((p8 **   sep_empty ) \\<longrightarrow>*   p0)) imp   \n  (p1 \\<longrightarrow>*   (p1 **   ((p4 **   p1) \\<longrightarrow>*   ((p8 **   sep_empty ) \\<longrightarrow>*   p0))))) \\<longrightarrow>*   \n  (((p4 **   p1) \\<longrightarrow>*   ((p8 **   sep_empty ) \\<longrightarrow>*   p0)) imp   (p1 \\<longrightarrow>*   (((p1 **   p4) \\<longrightarrow>*   \n  ((p8 **   sep_empty ) \\<longrightarrow>*   p0)) **   p1)))))\n  (h::'a::heap_sep_algebra)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<box> h \\<longrightarrow>\n    ((\\<lambda>s.\n         (p4 \\<and>* p1 \\<longrightarrow>*\n          p8 \\<and>* \\<box> \\<longrightarrow>* p0)\n          s \\<longrightarrow>\n         (p1 \\<longrightarrow>*\n          p1 \\<and>*\n          (p4 \\<and>* p1 \\<longrightarrow>*\n           p8 \\<and>* \\<box> \\<longrightarrow>* p0))\n          s) \\<longrightarrow>*\n     (\\<lambda>s.\n         (p4 \\<and>* p1 \\<longrightarrow>*\n          p8 \\<and>* \\<box> \\<longrightarrow>* p0)\n          s \\<longrightarrow>\n         (p1 \\<longrightarrow>*\n          (p1 \\<and>* p4 \\<longrightarrow>*\n           p8 \\<and>* \\<box> \\<longrightarrow>* p0) \\<and>*\n          p1)\n          s))\n     h", "by separata"], ["", "text \\<open>Sledgehammer finds a proof easily.\\<close>"], ["", "lemma \"((((p3 imp   (p0 \\<longrightarrow>*   (p3 **   p0))) imp   sep_false ) imp   (p1 imp   sep_false )) imp   \n  (p1 imp   (p3 imp   (p0 \\<longrightarrow>*   (p0 **   p3)))))\n  (h::'a::heap_sep_algebra)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (((p3 h \\<longrightarrow>\n       (p0 \\<longrightarrow>* p3 \\<and>* p0) h) \\<longrightarrow>\n      False) \\<longrightarrow>\n     p1 h \\<longrightarrow> False) \\<longrightarrow>\n    p1 h \\<longrightarrow>\n    p3 h \\<longrightarrow> (p0 \\<longrightarrow>* p0 \\<and>* p3) h", "by separata"], ["", "text \\<open>Sledgehammer finds a proof in a few seconds.\\<close>"], ["", "lemma \"((p7 \\<longrightarrow>*   (p4 **   (p6 \\<longrightarrow>*   p1))) imp   ((p4 imp   (p1 \\<longrightarrow>*   ((sep_empty  **   \n  p1) **   p4))) \\<longrightarrow>*   ((p1 imp   (p4 \\<longrightarrow>*   (p4 **   (sep_empty  **   p1)))) **   (p7 \\<longrightarrow>*   \n  ((p6 \\<longrightarrow>*   p1) **   p4)))))\n  (h::'a::heap_sep_algebra)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (p7 \\<longrightarrow>* p4 \\<and>* (p6 \\<longrightarrow>* p1))\n     h \\<longrightarrow>\n    ((\\<lambda>s.\n         p4 s \\<longrightarrow>\n         (p1 \\<longrightarrow>* (\\<box> \\<and>* p1) \\<and>* p4)\n          s) \\<longrightarrow>*\n     (\\<lambda>s.\n         p1 s \\<longrightarrow>\n         (p4 \\<longrightarrow>* p4 \\<and>* \\<box> \\<and>* p1) s) \\<and>*\n     (p7 \\<longrightarrow>* (p6 \\<longrightarrow>* p1) \\<and>* p4))\n     h", "by separata"], ["", "text \\<open>Sledgehammer finds a proof easily.\\<close>"], ["", "lemma \"(((p2 imp   p0) imp   ((p0 **   sep_true ) \\<longrightarrow>*   (p0 **   (sep_true  **   \n  (p2 imp   p0))))) imp   ((p2 imp   p0) imp   ((sep_true  **   p0) \\<longrightarrow>*   \n  (p0 **   ((p2 imp   p0) **   sep_true )))))\n  (h::'a::heap_sep_algebra)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((p2 h \\<longrightarrow> p0 h) \\<longrightarrow>\n     (p0 \\<and>* (\\<lambda>s. True) \\<longrightarrow>*\n      p0 \\<and>*\n      (\\<lambda>s. True) \\<and>* (\\<lambda>s. p2 s \\<longrightarrow> p0 s))\n      h) \\<longrightarrow>\n    (p2 h \\<longrightarrow> p0 h) \\<longrightarrow>\n    ((\\<lambda>s. True) \\<and>* p0 \\<longrightarrow>*\n     p0 \\<and>*\n     (\\<lambda>s. p2 s \\<longrightarrow> p0 s) \\<and>* (\\<lambda>s. True))\n     h", "by separata"], ["", "text \\<open>Sledgehammer finds a proof easily.\\<close>"], ["", "lemma \"((sep_empty  imp   ((p1 \\<longrightarrow>*   (((p2 imp   sep_false ) **   p0) **   p8)) \\<longrightarrow>*   \n  (p1 \\<longrightarrow>*   ((p2 imp   sep_false ) **   (p0 **   p8))))) imp   ((p0 **   sep_empty ) \\<longrightarrow>*   \n  ((sep_empty  imp   ((p1 \\<longrightarrow>*   ((p0 **   (p2 imp   sep_false )) **   p8)) \\<longrightarrow>*   (p1 \\<longrightarrow>*   \n  ((p2 imp   sep_false ) **   (p0 **   p8))))) **   (p0 **   sep_empty ))))\n  (h::'a::heap_sep_algebra)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<box> h \\<longrightarrow>\n     ((p1 \\<longrightarrow>*\n       ((\\<lambda>s. p2 s \\<longrightarrow> False) \\<and>* p0) \\<and>*\n       p8) \\<longrightarrow>*\n      p1 \\<longrightarrow>*\n      (\\<lambda>s. p2 s \\<longrightarrow> False) \\<and>* p0 \\<and>* p8)\n      h) \\<longrightarrow>\n    (p0 \\<and>* \\<box> \\<longrightarrow>*\n     (\\<lambda>s.\n         \\<box> s \\<longrightarrow>\n         ((p1 \\<longrightarrow>*\n           (p0 \\<and>* (\\<lambda>s. p2 s \\<longrightarrow> False)) \\<and>*\n           p8) \\<longrightarrow>*\n          p1 \\<longrightarrow>*\n          (\\<lambda>s. p2 s \\<longrightarrow> False) \\<and>* p0 \\<and>* p8)\n          s) \\<and>*\n     p0 \\<and>* \\<box>)\n     h", "by separata"], ["", "text \\<open>Sledgehammer finds a proof in a while.\\<close>"], ["", "lemma \"((p0 \\<longrightarrow>*   sep_empty ) imp   ((sep_empty  imp   ((sep_empty  **   ((((p8 **   p7) **   \n  (p8 imp   p4)) \\<longrightarrow>*   p8) **   (p2 **   p1))) \\<longrightarrow>*   (p2 **   (((p7 **   ((p8 imp   p4) **   \n  p8)) \\<longrightarrow>*   p8) **   p1)))) \\<longrightarrow>*   ((sep_empty  imp   (((((p7 **   (p8 **   (p8 imp   p4))) \\<longrightarrow>*   \n  p8) **   sep_empty ) **   (p1 **   p2)) \\<longrightarrow>*   (((p7 **   ((p8 imp   p4) **   p8)) \\<longrightarrow>*   p8) **   \n  (p1 **   p2)))) **   (p0 \\<longrightarrow>*   sep_empty ))))\n  (h::'a::heap_sep_algebra)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (p0 \\<longrightarrow>* \\<box>) h \\<longrightarrow>\n    ((\\<lambda>s.\n         \\<box> s \\<longrightarrow>\n         (\\<box> \\<and>*\n          ((p8 \\<and>* p7) \\<and>*\n           (\\<lambda>s. p8 s \\<longrightarrow> p4 s) \\<longrightarrow>*\n           p8) \\<and>*\n          p2 \\<and>* p1 \\<longrightarrow>*\n          p2 \\<and>*\n          (p7 \\<and>*\n           (\\<lambda>s. p8 s \\<longrightarrow> p4 s) \\<and>*\n           p8 \\<longrightarrow>*\n           p8) \\<and>*\n          p1)\n          s) \\<longrightarrow>*\n     (\\<lambda>s.\n         \\<box> s \\<longrightarrow>\n         (((p7 \\<and>*\n            p8 \\<and>*\n            (\\<lambda>s. p8 s \\<longrightarrow> p4 s) \\<longrightarrow>*\n            p8) \\<and>*\n           \\<box>) \\<and>*\n          p1 \\<and>* p2 \\<longrightarrow>*\n          (p7 \\<and>*\n           (\\<lambda>s. p8 s \\<longrightarrow> p4 s) \\<and>*\n           p8 \\<longrightarrow>*\n           p8) \\<and>*\n          p1 \\<and>* p2)\n          s) \\<and>*\n     (p0 \\<longrightarrow>* \\<box>))\n     h", "by separata"], ["", "end"]]}