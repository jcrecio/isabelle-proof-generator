{"file_name": "/home/qj213/afp-2021-10-22/thys/Linear_Recurrences/Rational_FPS_Solver.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Linear_Recurrences", "problem_names": ["lemma one_minus_const_fps_X_neg_power'':\n  fixes c :: \"'a :: field_char_0\"\n  assumes n: \"n > 0\"\n  shows \"fps_const d / ((1 - fps_const (c :: 'a :: field_char_0) * fps_X) ^ n) =\n           Abs_fps (\\<lambda>k. poly (inverse_irred_power_poly d n) (of_nat k) * c^k)\" (is \"?lhs = ?rhs\")", "lemma inverse_irred_power_poly_code [code abstract]:\n  \"coeffs (inverse_irred_power_poly d n) =\n    (if n = 0 \\<or> d = 0 then [] else\n     let e = d / (fact (n - 1))\n     in  [e * of_nat x. x \\<leftarrow> tl (stirling_row n)])\"", "lemma solve_rat_fps_aux:\n  fixes p :: \"'a :: {field_char_0,field_gcd} poly\" and cs :: \"('a \\<times> nat) list\"\n  assumes distinct: \"distinct (map fst cs)\"\n  assumes azs: \"(a, zs) = poly_pfd_simple p cs\"\n  assumes nz: \"0 \\<notin> fst ` set cs\"\n  shows \"fps_of_poly p / fps_of_poly (\\<Prod>(c,n)\\<leftarrow>cs. [:1,-c:]^Suc n) =\n           Abs_fps (\\<lambda>k. coeff a k + (\\<Sum>i<length cs. poly (\\<Sum>j\\<le>snd (cs ! i).\n                   (inverse_irred_power_poly (zs ! i ! j) (snd (cs ! i)+1 - j)))\n               (of_nat k) * (fst (cs ! i)) ^ k))\" (is \"_ = ?rhs\")", "lemma length_snd_poly_pfd_simple [simp]: \"length (snd (poly_pfd_simple p cs)) = length cs\"", "lemma length_nth_snd_poly_pfd_simple [simp]:\n  \"i < length cs \\<Longrightarrow> length (snd (poly_pfd_simple p cs) ! i) = snd (cs!i) + 1\"", "lemma solve_factored_ratfps_roots:\n  \"map snd (snd (solve_factored_ratfps p cs)) = map fst cs\"", "lemma solve_factored_ratfps:\n  fixes p :: \"'a :: {field_char_0,field_gcd} poly\" and cs :: \"('a \\<times> nat) list\"\n  assumes distinct: \"distinct (map fst cs)\"\n  assumes nz: \"0 \\<notin> fst ` set cs\"\n  shows \"fps_of_poly p / fps_of_poly (\\<Prod>(c,n)\\<leftarrow>cs. [:1,-c:]^Suc n) =\n           Abs_fps (interp_ratfps_solution (solve_factored_ratfps p cs))\" (is \"?lhs = ?rhs\")", "lemma solve_factored_ratfps':\n  assumes \"is_alt_factorization_of fctrs q\" \"q \\<noteq> 0\"\n  shows   \"Abs_fps (interp_ratfps_solution (solve_factored_ratfps' p fctrs)) =\n             fps_of_poly p / fps_of_poly q\"", "lemma degree_Poly_eq:\n  assumes \"xs = [] \\<or> last xs \\<noteq> 0\"\n  shows   \"degree (Poly xs) = length xs - 1\"", "lemma degree_Poly': \"degree (Poly xs) \\<le> length xs - 1\"", "lemma degree_inverse_irred_power_poly_le:\n  \"degree (inverse_irred_power_poly c n) \\<le> n - 1\"", "lemma degree_inverse_irred_power_poly:\n  assumes \"c \\<noteq> 0\"\n  shows   \"degree (inverse_irred_power_poly c n) = n - 1\"", "lemma reflect_poly_0_iff [simp]: \"reflect_poly p = 0 \\<longleftrightarrow> p = 0\"", "lemma degree_sum_list_le: \"(\\<And>p. p \\<in> set ps \\<Longrightarrow> degree p \\<le> T) \\<Longrightarrow> degree (sum_list ps) \\<le> T\"", "theorem ratfps_closed_form_exists:\n  fixes q :: \"complex poly\"\n  assumes nz: \"coeff q 0 \\<noteq> 0\"\n  defines \"q' \\<equiv> reflect_poly q\"\n  obtains r rs\n  where \"\\<And>n. fps_nth (fps_of_poly p / fps_of_poly q) n =\n                coeff r n + (\\<Sum>c | poly q' c = 0. poly (rs c) (of_nat n) * c ^ n)\"\n  and   \"\\<And>z. poly q' z = 0 \\<Longrightarrow> degree (rs z) \\<le> order z q' - 1\""], "translations": [["", "lemma one_minus_const_fps_X_neg_power'':\n  fixes c :: \"'a :: field_char_0\"\n  assumes n: \"n > 0\"\n  shows \"fps_const d / ((1 - fps_const (c :: 'a :: field_char_0) * fps_X) ^ n) =\n           Abs_fps (\\<lambda>k. poly (inverse_irred_power_poly d n) (of_nat k) * c^k)\" (is \"?lhs = ?rhs\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. fps_const d / (1 - fps_const c * fps_X) ^ n =\n    Abs_fps\n     (\\<lambda>k. poly (inverse_irred_power_poly d n) (of_nat k) * c ^ k)", "proof (rule fps_ext)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>na.\n       (fps_const d / (1 - fps_const c * fps_X) ^ n) $ na =\n       Abs_fps\n        (\\<lambda>k.\n            poly (inverse_irred_power_poly d n) (of_nat k) * c ^ k) $\n       na", "include fps_notation"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>na.\n       (fps_const d / (1 - fps_const c * fps_X) ^ n) $ na =\n       Abs_fps\n        (\\<lambda>k.\n            poly (inverse_irred_power_poly d n) (of_nat k) * c ^ k) $\n       na", "fix k :: nat"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>na.\n       (fps_const d / (1 - fps_const c * fps_X) ^ n) $ na =\n       Abs_fps\n        (\\<lambda>k.\n            poly (inverse_irred_power_poly d n) (of_nat k) * c ^ k) $\n       na", "let ?p = \"smult (d / (fact (n - 1))) (pcompose (pochhammer_poly (n - 1)) [:1,1:])\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>na.\n       (fps_const d / (1 - fps_const c * fps_X) ^ n) $ na =\n       Abs_fps\n        (\\<lambda>k.\n            poly (inverse_irred_power_poly d n) (of_nat k) * c ^ k) $\n       na", "from n"], ["proof (chain)\npicking this:\n  0 < n", "have \"?lhs = fps_const d * inverse ((1 - fps_const c * fps_X) ^ n)\""], ["proof (prove)\nusing this:\n  0 < n\n\ngoal (1 subgoal):\n 1. fps_const d / (1 - fps_const c * fps_X) ^ n =\n    fps_const d * inverse ((1 - fps_const c * fps_X) ^ n)", "by (subst fps_divide_unit) auto"], ["proof (state)\nthis:\n  fps_const d / (1 - fps_const c * fps_X) ^ n =\n  fps_const d * inverse ((1 - fps_const c * fps_X) ^ n)\n\ngoal (1 subgoal):\n 1. \\<And>na.\n       (fps_const d / (1 - fps_const c * fps_X) ^ n) $ na =\n       Abs_fps\n        (\\<lambda>k.\n            poly (inverse_irred_power_poly d n) (of_nat k) * c ^ k) $\n       na", "also"], ["proof (state)\nthis:\n  fps_const d / (1 - fps_const c * fps_X) ^ n =\n  fps_const d * inverse ((1 - fps_const c * fps_X) ^ n)\n\ngoal (1 subgoal):\n 1. \\<And>na.\n       (fps_const d / (1 - fps_const c * fps_X) ^ n) $ na =\n       Abs_fps\n        (\\<lambda>k.\n            poly (inverse_irred_power_poly d n) (of_nat k) * c ^ k) $\n       na", "have \"inverse ((1 - fps_const c * fps_X) ^ n) =\n                 Abs_fps (\\<lambda>k. of_nat ((n + k - 1) choose k) * c^k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inverse ((1 - fps_const c * fps_X) ^ n) =\n    Abs_fps (\\<lambda>k. of_nat (n + k - 1 choose k) * c ^ k)", "by (intro one_minus_const_fps_X_neg_power' n)"], ["proof (state)\nthis:\n  inverse ((1 - fps_const c * fps_X) ^ n) =\n  Abs_fps (\\<lambda>k. of_nat (n + k - 1 choose k) * c ^ k)\n\ngoal (1 subgoal):\n 1. \\<And>na.\n       (fps_const d / (1 - fps_const c * fps_X) ^ n) $ na =\n       Abs_fps\n        (\\<lambda>k.\n            poly (inverse_irred_power_poly d n) (of_nat k) * c ^ k) $\n       na", "also"], ["proof (state)\nthis:\n  inverse ((1 - fps_const c * fps_X) ^ n) =\n  Abs_fps (\\<lambda>k. of_nat (n + k - 1 choose k) * c ^ k)\n\ngoal (1 subgoal):\n 1. \\<And>na.\n       (fps_const d / (1 - fps_const c * fps_X) ^ n) $ na =\n       Abs_fps\n        (\\<lambda>k.\n            poly (inverse_irred_power_poly d n) (of_nat k) * c ^ k) $\n       na", "have \"(fps_const d * \\<dots>) $ k  = d * of_nat ((n + k - 1) choose k) * c^k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (fps_const d *\n     Abs_fps (\\<lambda>k. of_nat (n + k - 1 choose k) * c ^ k)) $\n    k =\n    d * of_nat (n + k - 1 choose k) * c ^ k", "by simp"], ["proof (state)\nthis:\n  (fps_const d *\n   Abs_fps (\\<lambda>k. of_nat (n + k - 1 choose k) * c ^ k)) $\n  k =\n  d * of_nat (n + k - 1 choose k) * c ^ k\n\ngoal (1 subgoal):\n 1. \\<And>na.\n       (fps_const d / (1 - fps_const c * fps_X) ^ n) $ na =\n       Abs_fps\n        (\\<lambda>k.\n            poly (inverse_irred_power_poly d n) (of_nat k) * c ^ k) $\n       na", "also"], ["proof (state)\nthis:\n  (fps_const d *\n   Abs_fps (\\<lambda>k. of_nat (n + k - 1 choose k) * c ^ k)) $\n  k =\n  d * of_nat (n + k - 1 choose k) * c ^ k\n\ngoal (1 subgoal):\n 1. \\<And>na.\n       (fps_const d / (1 - fps_const c * fps_X) ^ n) $ na =\n       Abs_fps\n        (\\<lambda>k.\n            poly (inverse_irred_power_poly d n) (of_nat k) * c ^ k) $\n       na", "from n"], ["proof (chain)\npicking this:\n  0 < n", "have \"(n + k - 1 choose k) = (n + k - 1 choose (n - 1))\""], ["proof (prove)\nusing this:\n  0 < n\n\ngoal (1 subgoal):\n 1. n + k - 1 choose k = n + k - 1 choose (n - 1)", "by (subst binomial_symmetric) simp_all"], ["proof (state)\nthis:\n  n + k - 1 choose k = n + k - 1 choose (n - 1)\n\ngoal (1 subgoal):\n 1. \\<And>na.\n       (fps_const d / (1 - fps_const c * fps_X) ^ n) $ na =\n       Abs_fps\n        (\\<lambda>k.\n            poly (inverse_irred_power_poly d n) (of_nat k) * c ^ k) $\n       na", "also"], ["proof (state)\nthis:\n  n + k - 1 choose k = n + k - 1 choose (n - 1)\n\ngoal (1 subgoal):\n 1. \\<And>na.\n       (fps_const d / (1 - fps_const c * fps_X) ^ n) $ na =\n       Abs_fps\n        (\\<lambda>k.\n            poly (inverse_irred_power_poly d n) (of_nat k) * c ^ k) $\n       na", "from n"], ["proof (chain)\npicking this:\n  0 < n", "have \"of_nat \\<dots> = (pochhammer (of_nat k + 1) (n - 1) / fact (n - 1) :: 'a)\""], ["proof (prove)\nusing this:\n  0 < n\n\ngoal (1 subgoal):\n 1. of_nat (n + k - 1 choose (n - 1)) =\n    pochhammer (of_nat k + (1::'a)) (n - 1) / fact (n - 1)", "by (simp_all add: binomial_gbinomial gbinomial_pochhammer' of_nat_diff)"], ["proof (state)\nthis:\n  of_nat (n + k - 1 choose (n - 1)) =\n  pochhammer (of_nat k + (1::'a)) (n - 1) / fact (n - 1)\n\ngoal (1 subgoal):\n 1. \\<And>na.\n       (fps_const d / (1 - fps_const c * fps_X) ^ n) $ na =\n       Abs_fps\n        (\\<lambda>k.\n            poly (inverse_irred_power_poly d n) (of_nat k) * c ^ k) $\n       na", "also"], ["proof (state)\nthis:\n  of_nat (n + k - 1 choose (n - 1)) =\n  pochhammer (of_nat k + (1::'a)) (n - 1) / fact (n - 1)\n\ngoal (1 subgoal):\n 1. \\<And>na.\n       (fps_const d / (1 - fps_const c * fps_X) ^ n) $ na =\n       Abs_fps\n        (\\<lambda>k.\n            poly (inverse_irred_power_poly d n) (of_nat k) * c ^ k) $\n       na", "have \"d * \\<dots> = poly ?p (of_nat k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. d * (pochhammer (of_nat k + (1::'a)) (n - 1) / fact (n - 1)) =\n    poly\n     (smult (d / fact (n - 1))\n       (pochhammer_poly (n - 1) \\<circ>\\<^sub>p [:1::'a, 1::'a:]))\n     (of_nat k)", "by (simp add: divide_inverse eval_pochhammer_poly poly_pcompose add_ac)"], ["proof (state)\nthis:\n  d * (pochhammer (of_nat k + (1::'a)) (n - 1) / fact (n - 1)) =\n  poly\n   (smult (d / fact (n - 1))\n     (pochhammer_poly (n - 1) \\<circ>\\<^sub>p [:1::'a, 1::'a:]))\n   (of_nat k)\n\ngoal (1 subgoal):\n 1. \\<And>na.\n       (fps_const d / (1 - fps_const c * fps_X) ^ n) $ na =\n       Abs_fps\n        (\\<lambda>k.\n            poly (inverse_irred_power_poly d n) (of_nat k) * c ^ k) $\n       na", "also"], ["proof (state)\nthis:\n  d * (pochhammer (of_nat k + (1::'a)) (n - 1) / fact (n - 1)) =\n  poly\n   (smult (d / fact (n - 1))\n     (pochhammer_poly (n - 1) \\<circ>\\<^sub>p [:1::'a, 1::'a:]))\n   (of_nat k)\n\ngoal (1 subgoal):\n 1. \\<And>na.\n       (fps_const d / (1 - fps_const c * fps_X) ^ n) $ na =\n       Abs_fps\n        (\\<lambda>k.\n            poly (inverse_irred_power_poly d n) (of_nat k) * c ^ k) $\n       na", "{"], ["proof (state)\nthis:\n  d * (pochhammer (of_nat k + (1::'a)) (n - 1) / fact (n - 1)) =\n  poly\n   (smult (d / fact (n - 1))\n     (pochhammer_poly (n - 1) \\<circ>\\<^sub>p [:1::'a, 1::'a:]))\n   (of_nat k)\n\ngoal (1 subgoal):\n 1. \\<And>na.\n       (fps_const d / (1 - fps_const c * fps_X) ^ n) $ na =\n       Abs_fps\n        (\\<lambda>k.\n            poly (inverse_irred_power_poly d n) (of_nat k) * c ^ k) $\n       na", "from assms"], ["proof (chain)\npicking this:\n  0 < n", "have \"pCons 0 (pcompose (pochhammer_poly (n-1)) [:1,1::'a:]) = pochhammer_poly n\""], ["proof (prove)\nusing this:\n  0 < n\n\ngoal (1 subgoal):\n 1. pCons (0::'a)\n     (pochhammer_poly (n - 1) \\<circ>\\<^sub>p [:1::'a, 1::'a:]) =\n    pochhammer_poly n", "by (subst pochhammer_poly_Suc' [symmetric]) simp"], ["proof (state)\nthis:\n  pCons (0::'a) (pochhammer_poly (n - 1) \\<circ>\\<^sub>p [:1::'a, 1::'a:]) =\n  pochhammer_poly n\n\ngoal (1 subgoal):\n 1. \\<And>na.\n       (fps_const d / (1 - fps_const c * fps_X) ^ n) $ na =\n       Abs_fps\n        (\\<lambda>k.\n            poly (inverse_irred_power_poly d n) (of_nat k) * c ^ k) $\n       na", "also"], ["proof (state)\nthis:\n  pCons (0::'a) (pochhammer_poly (n - 1) \\<circ>\\<^sub>p [:1::'a, 1::'a:]) =\n  pochhammer_poly n\n\ngoal (1 subgoal):\n 1. \\<And>na.\n       (fps_const d / (1 - fps_const c * fps_X) ^ n) $ na =\n       Abs_fps\n        (\\<lambda>k.\n            poly (inverse_irred_power_poly d n) (of_nat k) * c ^ k) $\n       na", "from assms"], ["proof (chain)\npicking this:\n  0 < n", "have \"\\<dots> = pCons 0 (Poly [of_nat (stirling n (k+1)). k \\<leftarrow> [0..<Suc n]])\""], ["proof (prove)\nusing this:\n  0 < n\n\ngoal (1 subgoal):\n 1. pochhammer_poly n =\n    pCons (0::'a)\n     (Poly (map (\\<lambda>k. of_nat (stirling n (k + 1))) [0..<Suc n]))", "unfolding pochhammer_poly_def"], ["proof (prove)\nusing this:\n  0 < n\n\ngoal (1 subgoal):\n 1. Poly (map (\\<lambda>k. of_nat (stirling n k)) [0..<Suc n]) =\n    pCons (0::'a)\n     (Poly (map (\\<lambda>k. of_nat (stirling n (k + 1))) [0..<Suc n]))", "by (auto simp add: poly_eq_iff nth_default_def coeff_pCons\n               split: nat.split simp del: upt_Suc )"], ["proof (state)\nthis:\n  pochhammer_poly n =\n  pCons (0::'a)\n   (Poly (map (\\<lambda>k. of_nat (stirling n (k + 1))) [0..<Suc n]))\n\ngoal (1 subgoal):\n 1. \\<And>na.\n       (fps_const d / (1 - fps_const c * fps_X) ^ n) $ na =\n       Abs_fps\n        (\\<lambda>k.\n            poly (inverse_irred_power_poly d n) (of_nat k) * c ^ k) $\n       na", "finally"], ["proof (chain)\npicking this:\n  pCons (0::'a) (pochhammer_poly (n - 1) \\<circ>\\<^sub>p [:1::'a, 1::'a:]) =\n  pCons (0::'a)\n   (Poly (map (\\<lambda>k. of_nat (stirling n (k + 1))) [0..<Suc n]))", "have \"pcompose (pochhammer_poly (n-1)) [:1,1::'a:] =\n                      Poly [of_nat (stirling n (k+1)). k \\<leftarrow> [0..<Suc n]]\""], ["proof (prove)\nusing this:\n  pCons (0::'a) (pochhammer_poly (n - 1) \\<circ>\\<^sub>p [:1::'a, 1::'a:]) =\n  pCons (0::'a)\n   (Poly (map (\\<lambda>k. of_nat (stirling n (k + 1))) [0..<Suc n]))\n\ngoal (1 subgoal):\n 1. pochhammer_poly (n - 1) \\<circ>\\<^sub>p [:1::'a, 1::'a:] =\n    Poly (map (\\<lambda>k. of_nat (stirling n (k + 1))) [0..<Suc n])", "by simp"], ["proof (state)\nthis:\n  pochhammer_poly (n - 1) \\<circ>\\<^sub>p [:1::'a, 1::'a:] =\n  Poly (map (\\<lambda>k. of_nat (stirling n (k + 1))) [0..<Suc n])\n\ngoal (1 subgoal):\n 1. \\<And>na.\n       (fps_const d / (1 - fps_const c * fps_X) ^ n) $ na =\n       Abs_fps\n        (\\<lambda>k.\n            poly (inverse_irred_power_poly d n) (of_nat k) * c ^ k) $\n       na", "}"], ["proof (state)\nthis:\n  pochhammer_poly (n - 1) \\<circ>\\<^sub>p [:1::'a, 1::'a:] =\n  Poly (map (\\<lambda>k. of_nat (stirling n (k + 1))) [0..<Suc n])\n\ngoal (1 subgoal):\n 1. \\<And>na.\n       (fps_const d / (1 - fps_const c * fps_X) ^ n) $ na =\n       Abs_fps\n        (\\<lambda>k.\n            poly (inverse_irred_power_poly d n) (of_nat k) * c ^ k) $\n       na", "also"], ["proof (state)\nthis:\n  pochhammer_poly (n - 1) \\<circ>\\<^sub>p [:1::'a, 1::'a:] =\n  Poly (map (\\<lambda>k. of_nat (stirling n (k + 1))) [0..<Suc n])\n\ngoal (1 subgoal):\n 1. \\<And>na.\n       (fps_const d / (1 - fps_const c * fps_X) ^ n) $ na =\n       Abs_fps\n        (\\<lambda>k.\n            poly (inverse_irred_power_poly d n) (of_nat k) * c ^ k) $\n       na", "have \"smult (d / fact (n - 1)) (Poly [of_nat (stirling n (k+1)). k \\<leftarrow> [0..<Suc n]]) =\n               inverse_irred_power_poly d n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. smult (d / fact (n - 1))\n     (Poly (map (\\<lambda>k. of_nat (stirling n (k + 1))) [0..<Suc n])) =\n    inverse_irred_power_poly d n", "by (auto simp: poly_eq_iff inverse_irred_power_poly_def nth_default_def)"], ["proof (state)\nthis:\n  smult (d / fact (n - 1))\n   (Poly (map (\\<lambda>k. of_nat (stirling n (k + 1))) [0..<Suc n])) =\n  inverse_irred_power_poly d n\n\ngoal (1 subgoal):\n 1. \\<And>na.\n       (fps_const d / (1 - fps_const c * fps_X) ^ n) $ na =\n       Abs_fps\n        (\\<lambda>k.\n            poly (inverse_irred_power_poly d n) (of_nat k) * c ^ k) $\n       na", "also"], ["proof (state)\nthis:\n  smult (d / fact (n - 1))\n   (Poly (map (\\<lambda>k. of_nat (stirling n (k + 1))) [0..<Suc n])) =\n  inverse_irred_power_poly d n\n\ngoal (1 subgoal):\n 1. \\<And>na.\n       (fps_const d / (1 - fps_const c * fps_X) ^ n) $ na =\n       Abs_fps\n        (\\<lambda>k.\n            poly (inverse_irred_power_poly d n) (of_nat k) * c ^ k) $\n       na", "have \"poly \\<dots> (of_nat k) * c ^ k = ?rhs $ k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. poly (inverse_irred_power_poly d n) (of_nat k) * c ^ k =\n    Abs_fps\n     (\\<lambda>k. poly (inverse_irred_power_poly d n) (of_nat k) * c ^ k) $\n    k", "by simp"], ["proof (state)\nthis:\n  poly (inverse_irred_power_poly d n) (of_nat k) * c ^ k =\n  Abs_fps\n   (\\<lambda>k. poly (inverse_irred_power_poly d n) (of_nat k) * c ^ k) $\n  k\n\ngoal (1 subgoal):\n 1. \\<And>na.\n       (fps_const d / (1 - fps_const c * fps_X) ^ n) $ na =\n       Abs_fps\n        (\\<lambda>k.\n            poly (inverse_irred_power_poly d n) (of_nat k) * c ^ k) $\n       na", "finally"], ["proof (chain)\npicking this:\n  (fps_const d / (1 - fps_const c * fps_X) ^ n) $ k =\n  Abs_fps\n   (\\<lambda>k. poly (inverse_irred_power_poly d n) (of_nat k) * c ^ k) $\n  k", "show \"?lhs $ k = ?rhs $ k\""], ["proof (prove)\nusing this:\n  (fps_const d / (1 - fps_const c * fps_X) ^ n) $ k =\n  Abs_fps\n   (\\<lambda>k. poly (inverse_irred_power_poly d n) (of_nat k) * c ^ k) $\n  k\n\ngoal (1 subgoal):\n 1. (fps_const d / (1 - fps_const c * fps_X) ^ n) $ k =\n    Abs_fps\n     (\\<lambda>k. poly (inverse_irred_power_poly d n) (of_nat k) * c ^ k) $\n    k", "."], ["proof (state)\nthis:\n  (fps_const d / (1 - fps_const c * fps_X) ^ n) $ k =\n  Abs_fps\n   (\\<lambda>k. poly (inverse_irred_power_poly d n) (of_nat k) * c ^ k) $\n  k\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma inverse_irred_power_poly_code [code abstract]:\n  \"coeffs (inverse_irred_power_poly d n) =\n    (if n = 0 \\<or> d = 0 then [] else\n     let e = d / (fact (n - 1))\n     in  [e * of_nat x. x \\<leftarrow> tl (stirling_row n)])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. coeffs (inverse_irred_power_poly d n) =\n    (if n = 0 \\<or> d = (0::'a) then []\n     else let e = d / fact (n - 1)\n          in map (\\<lambda>x. e * of_nat x) (tl (stirling_row n)))", "proof (cases \"n = 0 \\<or> d = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. n = 0 \\<or> d = (0::'a) \\<Longrightarrow>\n    coeffs (inverse_irred_power_poly d n) =\n    (if n = 0 \\<or> d = (0::'a) then []\n     else let e = d / fact (n - 1)\n          in map (\\<lambda>x. e * of_nat x) (tl (stirling_row n)))\n 2. \\<not> (n = 0 \\<or> d = (0::'a)) \\<Longrightarrow>\n    coeffs (inverse_irred_power_poly d n) =\n    (if n = 0 \\<or> d = (0::'a) then []\n     else let e = d / fact (n - 1)\n          in map (\\<lambda>x. e * of_nat x) (tl (stirling_row n)))", "case False"], ["proof (state)\nthis:\n  \\<not> (n = 0 \\<or> d = (0::'a))\n\ngoal (2 subgoals):\n 1. n = 0 \\<or> d = (0::'a) \\<Longrightarrow>\n    coeffs (inverse_irred_power_poly d n) =\n    (if n = 0 \\<or> d = (0::'a) then []\n     else let e = d / fact (n - 1)\n          in map (\\<lambda>x. e * of_nat x) (tl (stirling_row n)))\n 2. \\<not> (n = 0 \\<or> d = (0::'a)) \\<Longrightarrow>\n    coeffs (inverse_irred_power_poly d n) =\n    (if n = 0 \\<or> d = (0::'a) then []\n     else let e = d / fact (n - 1)\n          in map (\\<lambda>x. e * of_nat x) (tl (stirling_row n)))", "define e where \"e = d / (fact (n - 1))\""], ["proof (state)\nthis:\n  e = d / fact (n - 1)\n\ngoal (2 subgoals):\n 1. n = 0 \\<or> d = (0::'a) \\<Longrightarrow>\n    coeffs (inverse_irred_power_poly d n) =\n    (if n = 0 \\<or> d = (0::'a) then []\n     else let e = d / fact (n - 1)\n          in map (\\<lambda>x. e * of_nat x) (tl (stirling_row n)))\n 2. \\<not> (n = 0 \\<or> d = (0::'a)) \\<Longrightarrow>\n    coeffs (inverse_irred_power_poly d n) =\n    (if n = 0 \\<or> d = (0::'a) then []\n     else let e = d / fact (n - 1)\n          in map (\\<lambda>x. e * of_nat x) (tl (stirling_row n)))", "from False"], ["proof (chain)\npicking this:\n  \\<not> (n = 0 \\<or> d = (0::'a))", "have \"coeffs (inverse_irred_power_poly d n) =\n                     [e * of_nat (stirling n (k+1)). k \\<leftarrow> [0..<n]]\""], ["proof (prove)\nusing this:\n  \\<not> (n = 0 \\<or> d = (0::'a))\n\ngoal (1 subgoal):\n 1. coeffs (inverse_irred_power_poly d n) =\n    map (\\<lambda>k. e * of_nat (stirling n (k + 1))) [0..<n]", "by (auto simp: inverse_irred_power_poly_def Let_def divide_inverse mult_ac last_map\n                   stirling_row_def map_tl [symmetric] tl_upt e_def no_trailing_unfold)"], ["proof (state)\nthis:\n  coeffs (inverse_irred_power_poly d n) =\n  map (\\<lambda>k. e * of_nat (stirling n (k + 1))) [0..<n]\n\ngoal (2 subgoals):\n 1. n = 0 \\<or> d = (0::'a) \\<Longrightarrow>\n    coeffs (inverse_irred_power_poly d n) =\n    (if n = 0 \\<or> d = (0::'a) then []\n     else let e = d / fact (n - 1)\n          in map (\\<lambda>x. e * of_nat x) (tl (stirling_row n)))\n 2. \\<not> (n = 0 \\<or> d = (0::'a)) \\<Longrightarrow>\n    coeffs (inverse_irred_power_poly d n) =\n    (if n = 0 \\<or> d = (0::'a) then []\n     else let e = d / fact (n - 1)\n          in map (\\<lambda>x. e * of_nat x) (tl (stirling_row n)))", "also"], ["proof (state)\nthis:\n  coeffs (inverse_irred_power_poly d n) =\n  map (\\<lambda>k. e * of_nat (stirling n (k + 1))) [0..<n]\n\ngoal (2 subgoals):\n 1. n = 0 \\<or> d = (0::'a) \\<Longrightarrow>\n    coeffs (inverse_irred_power_poly d n) =\n    (if n = 0 \\<or> d = (0::'a) then []\n     else let e = d / fact (n - 1)\n          in map (\\<lambda>x. e * of_nat x) (tl (stirling_row n)))\n 2. \\<not> (n = 0 \\<or> d = (0::'a)) \\<Longrightarrow>\n    coeffs (inverse_irred_power_poly d n) =\n    (if n = 0 \\<or> d = (0::'a) then []\n     else let e = d / fact (n - 1)\n          in map (\\<lambda>x. e * of_nat x) (tl (stirling_row n)))", "have \"\\<dots> = [e * of_nat x. x \\<leftarrow> tl (stirling_row n)]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map (\\<lambda>k. e * of_nat (stirling n (k + 1))) [0..<n] =\n    map (\\<lambda>x. e * of_nat x) (tl (stirling_row n))", "by (simp add: stirling_row_def map_tl [symmetric] o_def tl_upt\n                  map_Suc_upt [symmetric] del: upt_Suc)"], ["proof (state)\nthis:\n  map (\\<lambda>k. e * of_nat (stirling n (k + 1))) [0..<n] =\n  map (\\<lambda>x. e * of_nat x) (tl (stirling_row n))\n\ngoal (2 subgoals):\n 1. n = 0 \\<or> d = (0::'a) \\<Longrightarrow>\n    coeffs (inverse_irred_power_poly d n) =\n    (if n = 0 \\<or> d = (0::'a) then []\n     else let e = d / fact (n - 1)\n          in map (\\<lambda>x. e * of_nat x) (tl (stirling_row n)))\n 2. \\<not> (n = 0 \\<or> d = (0::'a)) \\<Longrightarrow>\n    coeffs (inverse_irred_power_poly d n) =\n    (if n = 0 \\<or> d = (0::'a) then []\n     else let e = d / fact (n - 1)\n          in map (\\<lambda>x. e * of_nat x) (tl (stirling_row n)))", "finally"], ["proof (chain)\npicking this:\n  coeffs (inverse_irred_power_poly d n) =\n  map (\\<lambda>x. e * of_nat x) (tl (stirling_row n))", "show ?thesis"], ["proof (prove)\nusing this:\n  coeffs (inverse_irred_power_poly d n) =\n  map (\\<lambda>x. e * of_nat x) (tl (stirling_row n))\n\ngoal (1 subgoal):\n 1. coeffs (inverse_irred_power_poly d n) =\n    (if n = 0 \\<or> d = (0::'a) then []\n     else let e = d / fact (n - 1)\n          in map (\\<lambda>x. e * of_nat x) (tl (stirling_row n)))", "using False"], ["proof (prove)\nusing this:\n  coeffs (inverse_irred_power_poly d n) =\n  map (\\<lambda>x. e * of_nat x) (tl (stirling_row n))\n  \\<not> (n = 0 \\<or> d = (0::'a))\n\ngoal (1 subgoal):\n 1. coeffs (inverse_irred_power_poly d n) =\n    (if n = 0 \\<or> d = (0::'a) then []\n     else let e = d / fact (n - 1)\n          in map (\\<lambda>x. e * of_nat x) (tl (stirling_row n)))", "by (simp add: Let_def e_def)"], ["proof (state)\nthis:\n  coeffs (inverse_irred_power_poly d n) =\n  (if n = 0 \\<or> d = (0::'a) then []\n   else let e = d / fact (n - 1)\n        in map (\\<lambda>x. e * of_nat x) (tl (stirling_row n)))\n\ngoal (1 subgoal):\n 1. n = 0 \\<or> d = (0::'a) \\<Longrightarrow>\n    coeffs (inverse_irred_power_poly d n) =\n    (if n = 0 \\<or> d = (0::'a) then []\n     else let e = d / fact (n - 1)\n          in map (\\<lambda>x. e * of_nat x) (tl (stirling_row n)))", "qed (auto simp: inverse_irred_power_poly_def)"], ["", "lemma solve_rat_fps_aux:\n  fixes p :: \"'a :: {field_char_0,field_gcd} poly\" and cs :: \"('a \\<times> nat) list\"\n  assumes distinct: \"distinct (map fst cs)\"\n  assumes azs: \"(a, zs) = poly_pfd_simple p cs\"\n  assumes nz: \"0 \\<notin> fst ` set cs\"\n  shows \"fps_of_poly p / fps_of_poly (\\<Prod>(c,n)\\<leftarrow>cs. [:1,-c:]^Suc n) =\n           Abs_fps (\\<lambda>k. coeff a k + (\\<Sum>i<length cs. poly (\\<Sum>j\\<le>snd (cs ! i).\n                   (inverse_irred_power_poly (zs ! i ! j) (snd (cs ! i)+1 - j)))\n               (of_nat k) * (fst (cs ! i)) ^ k))\" (is \"_ = ?rhs\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. fps_of_poly p /\n    fps_of_poly (\\<Prod>(c, n)\\<leftarrow>cs. [:1::'a, - c:] ^ Suc n) =\n    Abs_fps\n     (\\<lambda>k.\n         coeff a k +\n         (\\<Sum>i<length cs.\n             poly\n              (\\<Sum>j\\<le>snd (cs ! i).\n                  inverse_irred_power_poly (zs ! i ! j)\n                   (snd (cs ! i) + 1 - j))\n              (of_nat k) *\n             fst (cs ! i) ^ k))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. fps_of_poly p /\n    fps_of_poly (\\<Prod>(c, n)\\<leftarrow>cs. [:1::'a, - c:] ^ Suc n) =\n    Abs_fps\n     (\\<lambda>k.\n         coeff a k +\n         (\\<Sum>i<length cs.\n             poly\n              (\\<Sum>j\\<le>snd (cs ! i).\n                  inverse_irred_power_poly (zs ! i ! j)\n                   (snd (cs ! i) + 1 - j))\n              (of_nat k) *\n             fst (cs ! i) ^ k))", "interpret pfd_homomorphism \"fps_of_poly :: 'a poly \\<Rightarrow> 'a fps\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pfd_homomorphism fps_of_poly", "by standard (auto simp: fps_of_poly_add fps_of_poly_mult)"], ["proof (state)\ngoal (1 subgoal):\n 1. fps_of_poly p /\n    fps_of_poly (\\<Prod>(c, n)\\<leftarrow>cs. [:1::'a, - c:] ^ Suc n) =\n    Abs_fps\n     (\\<lambda>k.\n         coeff a k +\n         (\\<Sum>i<length cs.\n             poly\n              (\\<Sum>j\\<le>snd (cs ! i).\n                  inverse_irred_power_poly (zs ! i ! j)\n                   (snd (cs ! i) + 1 - j))\n              (of_nat k) *\n             fst (cs ! i) ^ k))", "from distinct"], ["proof (chain)\npicking this:\n  distinct (map fst cs)", "have distinct': \"(a, b1) \\<in> set cs \\<Longrightarrow>\n    (a, b2) \\<in> set cs \\<Longrightarrow> b1 = b2\" for a b1 b2"], ["proof (prove)\nusing this:\n  distinct (map fst cs)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(a, b1) \\<in> set cs; (a, b2) \\<in> set cs\\<rbrakk>\n    \\<Longrightarrow> b1 = b2", "by (metis (no_types, hide_lams) Some_eq_map_of_iff image_set in_set_zipE insert_iff list.simps(15) map_of_Cons_code(2) map_of_SomeD nz snd_conv)"], ["proof (state)\nthis:\n  \\<lbrakk>(?a, ?b1.0) \\<in> set cs; (?a, ?b2.0) \\<in> set cs\\<rbrakk>\n  \\<Longrightarrow> ?b1.0 = ?b2.0\n\ngoal (1 subgoal):\n 1. fps_of_poly p /\n    fps_of_poly (\\<Prod>(c, n)\\<leftarrow>cs. [:1::'a, - c:] ^ Suc n) =\n    Abs_fps\n     (\\<lambda>k.\n         coeff a k +\n         (\\<Sum>i<length cs.\n             poly\n              (\\<Sum>j\\<le>snd (cs ! i).\n                  inverse_irred_power_poly (zs ! i ! j)\n                   (snd (cs ! i) + 1 - j))\n              (of_nat k) *\n             fst (cs ! i) ^ k))", "from nz"], ["proof (chain)\npicking this:\n  (0::'a) \\<notin> fst ` set cs", "have nz': \"(0, b) \\<notin> set cs\" for b"], ["proof (prove)\nusing this:\n  (0::'a) \\<notin> fst ` set cs\n\ngoal (1 subgoal):\n 1. (0::'a, b) \\<notin> set cs", "by (auto simp add: image_iff)"], ["proof (state)\nthis:\n  (0::'a, ?b) \\<notin> set cs\n\ngoal (1 subgoal):\n 1. fps_of_poly p /\n    fps_of_poly (\\<Prod>(c, n)\\<leftarrow>cs. [:1::'a, - c:] ^ Suc n) =\n    Abs_fps\n     (\\<lambda>k.\n         coeff a k +\n         (\\<Sum>i<length cs.\n             poly\n              (\\<Sum>j\\<le>snd (cs ! i).\n                  inverse_irred_power_poly (zs ! i ! j)\n                   (snd (cs ! i) + 1 - j))\n              (of_nat k) *\n             fst (cs ! i) ^ k))", "define n where \"n = length cs\""], ["proof (state)\nthis:\n  n = length cs\n\ngoal (1 subgoal):\n 1. fps_of_poly p /\n    fps_of_poly (\\<Prod>(c, n)\\<leftarrow>cs. [:1::'a, - c:] ^ Suc n) =\n    Abs_fps\n     (\\<lambda>k.\n         coeff a k +\n         (\\<Sum>i<length cs.\n             poly\n              (\\<Sum>j\\<le>snd (cs ! i).\n                  inverse_irred_power_poly (zs ! i ! j)\n                   (snd (cs ! i) + 1 - j))\n              (of_nat k) *\n             fst (cs ! i) ^ k))", "let ?g = \"\\<lambda>(c, n). [:1, - c:] ^ Suc n\""], ["proof (state)\ngoal (1 subgoal):\n 1. fps_of_poly p /\n    fps_of_poly (\\<Prod>(c, n)\\<leftarrow>cs. [:1::'a, - c:] ^ Suc n) =\n    Abs_fps\n     (\\<lambda>k.\n         coeff a k +\n         (\\<Sum>i<length cs.\n             poly\n              (\\<Sum>j\\<le>snd (cs ! i).\n                  inverse_irred_power_poly (zs ! i ! j)\n                   (snd (cs ! i) + 1 - j))\n              (of_nat k) *\n             fst (cs ! i) ^ k))", "have \"inj_on ?g (set cs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_on (\\<lambda>(c, n). [:1::'a, - c:] ^ Suc n) (set cs)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> set cs; y \\<in> set cs;\n        (case x of (c, n) \\<Rightarrow> [:1::'a, - c:] ^ Suc n) =\n        (case y of (c, n) \\<Rightarrow> [:1::'a, - c:] ^ Suc n)\\<rbrakk>\n       \\<Longrightarrow> x = y", "fix x y"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> set cs; y \\<in> set cs;\n        (case x of (c, n) \\<Rightarrow> [:1::'a, - c:] ^ Suc n) =\n        (case y of (c, n) \\<Rightarrow> [:1::'a, - c:] ^ Suc n)\\<rbrakk>\n       \\<Longrightarrow> x = y", "assume \"x \\<in> set cs\" \"y \\<in> set cs\" \"?g x = ?g y\""], ["proof (state)\nthis:\n  x \\<in> set cs\n  y \\<in> set cs\n  (case x of (c, n) \\<Rightarrow> [:1::'a, - c:] ^ Suc n) =\n  (case y of (c, n) \\<Rightarrow> [:1::'a, - c:] ^ Suc n)\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> set cs; y \\<in> set cs;\n        (case x of (c, n) \\<Rightarrow> [:1::'a, - c:] ^ Suc n) =\n        (case y of (c, n) \\<Rightarrow> [:1::'a, - c:] ^ Suc n)\\<rbrakk>\n       \\<Longrightarrow> x = y", "moreover"], ["proof (state)\nthis:\n  x \\<in> set cs\n  y \\<in> set cs\n  (case x of (c, n) \\<Rightarrow> [:1::'a, - c:] ^ Suc n) =\n  (case y of (c, n) \\<Rightarrow> [:1::'a, - c:] ^ Suc n)\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> set cs; y \\<in> set cs;\n        (case x of (c, n) \\<Rightarrow> [:1::'a, - c:] ^ Suc n) =\n        (case y of (c, n) \\<Rightarrow> [:1::'a, - c:] ^ Suc n)\\<rbrakk>\n       \\<Longrightarrow> x = y", "obtain c1 n1 c2 n2 where [simp]: \"x = (c1, n1)\" \"y = (c2, n2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>c1 n1 c2 n2.\n        \\<lbrakk>x = (c1, n1); y = (c2, n2)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases x, cases y)"], ["proof (state)\nthis:\n  x = (c1, n1)\n  y = (c2, n2)\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> set cs; y \\<in> set cs;\n        (case x of (c, n) \\<Rightarrow> [:1::'a, - c:] ^ Suc n) =\n        (case y of (c, n) \\<Rightarrow> [:1::'a, - c:] ^ Suc n)\\<rbrakk>\n       \\<Longrightarrow> x = y", "ultimately"], ["proof (chain)\npicking this:\n  x \\<in> set cs\n  y \\<in> set cs\n  (case x of (c, n) \\<Rightarrow> [:1::'a, - c:] ^ Suc n) =\n  (case y of (c, n) \\<Rightarrow> [:1::'a, - c:] ^ Suc n)\n  x = (c1, n1)\n  y = (c2, n2)", "have in_cs: \"(c1, n1) \\<in> set cs\"\n      \"(c2, n2) \\<in> set cs\"\n      and eq: \"[:1, - c1:] ^ Suc n1 = [:1, - c2:] ^ Suc n2\""], ["proof (prove)\nusing this:\n  x \\<in> set cs\n  y \\<in> set cs\n  (case x of (c, n) \\<Rightarrow> [:1::'a, - c:] ^ Suc n) =\n  (case y of (c, n) \\<Rightarrow> [:1::'a, - c:] ^ Suc n)\n  x = (c1, n1)\n  y = (c2, n2)\n\ngoal (1 subgoal):\n 1. ((c1, n1) \\<in> set cs &&& (c2, n2) \\<in> set cs) &&&\n    [:1::'a, - c1:] ^ Suc n1 = [:1::'a, - c2:] ^ Suc n2", "by simp_all"], ["proof (state)\nthis:\n  (c1, n1) \\<in> set cs\n  (c2, n2) \\<in> set cs\n  [:1::'a, - c1:] ^ Suc n1 = [:1::'a, - c2:] ^ Suc n2\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> set cs; y \\<in> set cs;\n        (case x of (c, n) \\<Rightarrow> [:1::'a, - c:] ^ Suc n) =\n        (case y of (c, n) \\<Rightarrow> [:1::'a, - c:] ^ Suc n)\\<rbrakk>\n       \\<Longrightarrow> x = y", "with nz"], ["proof (chain)\npicking this:\n  (0::'a) \\<notin> fst ` set cs\n  (c1, n1) \\<in> set cs\n  (c2, n2) \\<in> set cs\n  [:1::'a, - c1:] ^ Suc n1 = [:1::'a, - c2:] ^ Suc n2", "have [simp]: \"c1 \\<noteq> 0\" \"c2 \\<noteq> 0\""], ["proof (prove)\nusing this:\n  (0::'a) \\<notin> fst ` set cs\n  (c1, n1) \\<in> set cs\n  (c2, n2) \\<in> set cs\n  [:1::'a, - c1:] ^ Suc n1 = [:1::'a, - c2:] ^ Suc n2\n\ngoal (1 subgoal):\n 1. c1 \\<noteq> (0::'a) &&& c2 \\<noteq> (0::'a)", "by (auto simp add: image_iff)"], ["proof (state)\nthis:\n  c1 \\<noteq> (0::'a)\n  c2 \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> set cs; y \\<in> set cs;\n        (case x of (c, n) \\<Rightarrow> [:1::'a, - c:] ^ Suc n) =\n        (case y of (c, n) \\<Rightarrow> [:1::'a, - c:] ^ Suc n)\\<rbrakk>\n       \\<Longrightarrow> x = y", "have \"Suc n1 = degree ([:1, - c1:] ^ Suc n1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Suc n1 = degree ([:1::'a, - c1:] ^ Suc n1)", "by (simp add: degree_power_eq del: power_Suc)"], ["proof (state)\nthis:\n  Suc n1 = degree ([:1::'a, - c1:] ^ Suc n1)\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> set cs; y \\<in> set cs;\n        (case x of (c, n) \\<Rightarrow> [:1::'a, - c:] ^ Suc n) =\n        (case y of (c, n) \\<Rightarrow> [:1::'a, - c:] ^ Suc n)\\<rbrakk>\n       \\<Longrightarrow> x = y", "also"], ["proof (state)\nthis:\n  Suc n1 = degree ([:1::'a, - c1:] ^ Suc n1)\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> set cs; y \\<in> set cs;\n        (case x of (c, n) \\<Rightarrow> [:1::'a, - c:] ^ Suc n) =\n        (case y of (c, n) \\<Rightarrow> [:1::'a, - c:] ^ Suc n)\\<rbrakk>\n       \\<Longrightarrow> x = y", "have \"\\<dots> = degree ([:1, - c2:] ^ Suc n2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. degree ([:1::'a, - c1:] ^ Suc n1) = degree ([:1::'a, - c2:] ^ Suc n2)", "using eq"], ["proof (prove)\nusing this:\n  [:1::'a, - c1:] ^ Suc n1 = [:1::'a, - c2:] ^ Suc n2\n\ngoal (1 subgoal):\n 1. degree ([:1::'a, - c1:] ^ Suc n1) = degree ([:1::'a, - c2:] ^ Suc n2)", "by simp"], ["proof (state)\nthis:\n  degree ([:1::'a, - c1:] ^ Suc n1) = degree ([:1::'a, - c2:] ^ Suc n2)\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> set cs; y \\<in> set cs;\n        (case x of (c, n) \\<Rightarrow> [:1::'a, - c:] ^ Suc n) =\n        (case y of (c, n) \\<Rightarrow> [:1::'a, - c:] ^ Suc n)\\<rbrakk>\n       \\<Longrightarrow> x = y", "also"], ["proof (state)\nthis:\n  degree ([:1::'a, - c1:] ^ Suc n1) = degree ([:1::'a, - c2:] ^ Suc n2)\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> set cs; y \\<in> set cs;\n        (case x of (c, n) \\<Rightarrow> [:1::'a, - c:] ^ Suc n) =\n        (case y of (c, n) \\<Rightarrow> [:1::'a, - c:] ^ Suc n)\\<rbrakk>\n       \\<Longrightarrow> x = y", "have \"\\<dots> = Suc n2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. degree ([:1::'a, - c2:] ^ Suc n2) = Suc n2", "by (simp add: degree_power_eq del: power_Suc)"], ["proof (state)\nthis:\n  degree ([:1::'a, - c2:] ^ Suc n2) = Suc n2\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> set cs; y \\<in> set cs;\n        (case x of (c, n) \\<Rightarrow> [:1::'a, - c:] ^ Suc n) =\n        (case y of (c, n) \\<Rightarrow> [:1::'a, - c:] ^ Suc n)\\<rbrakk>\n       \\<Longrightarrow> x = y", "finally"], ["proof (chain)\npicking this:\n  Suc n1 = Suc n2", "have \"n1 = n2\""], ["proof (prove)\nusing this:\n  Suc n1 = Suc n2\n\ngoal (1 subgoal):\n 1. n1 = n2", "by simp"], ["proof (state)\nthis:\n  n1 = n2\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> set cs; y \\<in> set cs;\n        (case x of (c, n) \\<Rightarrow> [:1::'a, - c:] ^ Suc n) =\n        (case y of (c, n) \\<Rightarrow> [:1::'a, - c:] ^ Suc n)\\<rbrakk>\n       \\<Longrightarrow> x = y", "then"], ["proof (chain)\npicking this:\n  n1 = n2", "have \"0 = poly ([:1, - c1:] ^ Suc n1) (1 / c1)\""], ["proof (prove)\nusing this:\n  n1 = n2\n\ngoal (1 subgoal):\n 1. (0::'a) = poly ([:1::'a, - c1:] ^ Suc n1) ((1::'a) / c1)", "by simp"], ["proof (state)\nthis:\n  (0::'a) = poly ([:1::'a, - c1:] ^ Suc n1) ((1::'a) / c1)\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> set cs; y \\<in> set cs;\n        (case x of (c, n) \\<Rightarrow> [:1::'a, - c:] ^ Suc n) =\n        (case y of (c, n) \\<Rightarrow> [:1::'a, - c:] ^ Suc n)\\<rbrakk>\n       \\<Longrightarrow> x = y", "also"], ["proof (state)\nthis:\n  (0::'a) = poly ([:1::'a, - c1:] ^ Suc n1) ((1::'a) / c1)\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> set cs; y \\<in> set cs;\n        (case x of (c, n) \\<Rightarrow> [:1::'a, - c:] ^ Suc n) =\n        (case y of (c, n) \\<Rightarrow> [:1::'a, - c:] ^ Suc n)\\<rbrakk>\n       \\<Longrightarrow> x = y", "have \"\\<dots> = poly ([:1, - c2:] ^ Suc n2) (1 / c1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. poly ([:1::'a, - c1:] ^ Suc n1) ((1::'a) / c1) =\n    poly ([:1::'a, - c2:] ^ Suc n2) ((1::'a) / c1)", "using eq"], ["proof (prove)\nusing this:\n  [:1::'a, - c1:] ^ Suc n1 = [:1::'a, - c2:] ^ Suc n2\n\ngoal (1 subgoal):\n 1. poly ([:1::'a, - c1:] ^ Suc n1) ((1::'a) / c1) =\n    poly ([:1::'a, - c2:] ^ Suc n2) ((1::'a) / c1)", "by simp"], ["proof (state)\nthis:\n  poly ([:1::'a, - c1:] ^ Suc n1) ((1::'a) / c1) =\n  poly ([:1::'a, - c2:] ^ Suc n2) ((1::'a) / c1)\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> set cs; y \\<in> set cs;\n        (case x of (c, n) \\<Rightarrow> [:1::'a, - c:] ^ Suc n) =\n        (case y of (c, n) \\<Rightarrow> [:1::'a, - c:] ^ Suc n)\\<rbrakk>\n       \\<Longrightarrow> x = y", "finally"], ["proof (chain)\npicking this:\n  (0::'a) = poly ([:1::'a, - c2:] ^ Suc n2) ((1::'a) / c1)", "show \"x = y\""], ["proof (prove)\nusing this:\n  (0::'a) = poly ([:1::'a, - c2:] ^ Suc n2) ((1::'a) / c1)\n\ngoal (1 subgoal):\n 1. x = y", "using \\<open>n1 = n2\\<close>"], ["proof (prove)\nusing this:\n  (0::'a) = poly ([:1::'a, - c2:] ^ Suc n2) ((1::'a) / c1)\n  n1 = n2\n\ngoal (1 subgoal):\n 1. x = y", "by (auto simp: field_simps)"], ["proof (state)\nthis:\n  x = y\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  inj_on (\\<lambda>(c, n). [:1::'a, - c:] ^ Suc n) (set cs)\n\ngoal (1 subgoal):\n 1. fps_of_poly p /\n    fps_of_poly (\\<Prod>(c, n)\\<leftarrow>cs. [:1::'a, - c:] ^ Suc n) =\n    Abs_fps\n     (\\<lambda>k.\n         coeff a k +\n         (\\<Sum>i<length cs.\n             poly\n              (\\<Sum>j\\<le>snd (cs ! i).\n                  inverse_irred_power_poly (zs ! i ! j)\n                   (snd (cs ! i) + 1 - j))\n              (of_nat k) *\n             fst (cs ! i) ^ k))", "with distinct"], ["proof (chain)\npicking this:\n  distinct (map fst cs)\n  inj_on (\\<lambda>(c, n). [:1::'a, - c:] ^ Suc n) (set cs)", "have distinct': \"distinct (map ?g cs)\""], ["proof (prove)\nusing this:\n  distinct (map fst cs)\n  inj_on (\\<lambda>(c, n). [:1::'a, - c:] ^ Suc n) (set cs)\n\ngoal (1 subgoal):\n 1. distinct (map (\\<lambda>(c, n). [:1::'a, - c:] ^ Suc n) cs)", "by (simp add: distinct_map del: power_Suc)"], ["proof (state)\nthis:\n  distinct (map (\\<lambda>(c, n). [:1::'a, - c:] ^ Suc n) cs)\n\ngoal (1 subgoal):\n 1. fps_of_poly p /\n    fps_of_poly (\\<Prod>(c, n)\\<leftarrow>cs. [:1::'a, - c:] ^ Suc n) =\n    Abs_fps\n     (\\<lambda>k.\n         coeff a k +\n         (\\<Sum>i<length cs.\n             poly\n              (\\<Sum>j\\<le>snd (cs ! i).\n                  inverse_irred_power_poly (zs ! i ! j)\n                   (snd (cs ! i) + 1 - j))\n              (of_nat k) *\n             fst (cs ! i) ^ k))", "from nz' distinct"], ["proof (chain)\npicking this:\n  (0::'a, ?b) \\<notin> set cs\n  distinct (map fst cs)", "have coprime: \"pairwise coprime (?g ` set cs)\""], ["proof (prove)\nusing this:\n  (0::'a, ?b) \\<notin> set cs\n  distinct (map fst cs)\n\ngoal (1 subgoal):\n 1. pairwise coprime ((\\<lambda>(c, n). [:1::'a, - c:] ^ Suc n) ` set cs)", "by (auto intro!: pairwise_imageI coprime_linear_poly' simp add: eq_key_imp_eq_value\n      simp del: power_Suc)"], ["proof (state)\nthis:\n  pairwise coprime ((\\<lambda>(c, n). [:1::'a, - c:] ^ Suc n) ` set cs)\n\ngoal (1 subgoal):\n 1. fps_of_poly p /\n    fps_of_poly (\\<Prod>(c, n)\\<leftarrow>cs. [:1::'a, - c:] ^ Suc n) =\n    Abs_fps\n     (\\<lambda>k.\n         coeff a k +\n         (\\<Sum>i<length cs.\n             poly\n              (\\<Sum>j\\<le>snd (cs ! i).\n                  inverse_irred_power_poly (zs ! i ! j)\n                   (snd (cs ! i) + 1 - j))\n              (of_nat k) *\n             fst (cs ! i) ^ k))", "have [simp]: \"length zs = n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length zs = n", "using assms"], ["proof (prove)\nusing this:\n  distinct (map fst cs)\n  (a, zs) = poly_pfd_simple p cs\n  (0::'a) \\<notin> fst ` set cs\n\ngoal (1 subgoal):\n 1. length zs = n", "by (simp add: poly_pfd_simple_def n_def split: if_split_asm)"], ["proof (state)\nthis:\n  length zs = n\n\ngoal (1 subgoal):\n 1. fps_of_poly p /\n    fps_of_poly (\\<Prod>(c, n)\\<leftarrow>cs. [:1::'a, - c:] ^ Suc n) =\n    Abs_fps\n     (\\<lambda>k.\n         coeff a k +\n         (\\<Sum>i<length cs.\n             poly\n              (\\<Sum>j\\<le>snd (cs ! i).\n                  inverse_irred_power_poly (zs ! i ! j)\n                   (snd (cs ! i) + 1 - j))\n              (of_nat k) *\n             fst (cs ! i) ^ k))", "have [simp]: \"i < length cs \\<Longrightarrow> length (zs!i) = snd (cs!i)+1\" for i"], ["proof (prove)\ngoal (1 subgoal):\n 1. i < length cs \\<Longrightarrow> length (zs ! i) = snd (cs ! i) + 1", "using assms"], ["proof (prove)\nusing this:\n  distinct (map fst cs)\n  (a, zs) = poly_pfd_simple p cs\n  (0::'a) \\<notin> fst ` set cs\n\ngoal (1 subgoal):\n 1. i < length cs \\<Longrightarrow> length (zs ! i) = snd (cs ! i) + 1", "by (simp add: poly_pfd_simple_def Let_def case_prod_unfold split: if_split_asm)"], ["proof (state)\nthis:\n  ?i1 < length cs \\<Longrightarrow> length (zs ! ?i1) = snd (cs ! ?i1) + 1\n\ngoal (1 subgoal):\n 1. fps_of_poly p /\n    fps_of_poly (\\<Prod>(c, n)\\<leftarrow>cs. [:1::'a, - c:] ^ Suc n) =\n    Abs_fps\n     (\\<lambda>k.\n         coeff a k +\n         (\\<Sum>i<length cs.\n             poly\n              (\\<Sum>j\\<le>snd (cs ! i).\n                  inverse_irred_power_poly (zs ! i ! j)\n                   (snd (cs ! i) + 1 - j))\n              (of_nat k) *\n             fst (cs ! i) ^ k))", "let ?f = \"\\<lambda>(c, n). ([:1,-c:], n)\""], ["proof (state)\ngoal (1 subgoal):\n 1. fps_of_poly p /\n    fps_of_poly (\\<Prod>(c, n)\\<leftarrow>cs. [:1::'a, - c:] ^ Suc n) =\n    Abs_fps\n     (\\<lambda>k.\n         coeff a k +\n         (\\<Sum>i<length cs.\n             poly\n              (\\<Sum>j\\<le>snd (cs ! i).\n                  inverse_irred_power_poly (zs ! i ! j)\n                   (snd (cs ! i) + 1 - j))\n              (of_nat k) *\n             fst (cs ! i) ^ k))", "let ?cs' = \"map ?f cs\""], ["proof (state)\ngoal (1 subgoal):\n 1. fps_of_poly p /\n    fps_of_poly (\\<Prod>(c, n)\\<leftarrow>cs. [:1::'a, - c:] ^ Suc n) =\n    Abs_fps\n     (\\<lambda>k.\n         coeff a k +\n         (\\<Sum>i<length cs.\n             poly\n              (\\<Sum>j\\<le>snd (cs ! i).\n                  inverse_irred_power_poly (zs ! i ! j)\n                   (snd (cs ! i) + 1 - j))\n              (of_nat k) *\n             fst (cs ! i) ^ k))", "have \"fps_of_poly (fst (poly_pfd_simple p cs)) +\n          (\\<Sum>i<length ?cs'. \\<Sum>j\\<le>snd (?cs' ! i).\n               from_decomp (map (map (\\<lambda>c. [:c:])) (snd (poly_pfd_simple p cs)) ! i ! j)\n                           (fst (?cs' ! i)) (snd (?cs' ! i)+1 - j)) =\n          fps_of_poly p / fps_of_poly (\\<Prod>(x, n)\\<leftarrow>?cs'. x ^ Suc n)\"\n          (is \"?A = ?B\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. fps_of_poly (fst (poly_pfd_simple p cs)) +\n    (\\<Sum>i<length (map (\\<lambda>(c, n). ([:1::'a, - c:], n)) cs).\n        \\<Sum>j\\<le>snd (map (\\<lambda>(c, n). ([:1::'a, - c:], n)) cs ! i).\n           from_decomp\n            (map (map (\\<lambda>c. [:c:])) (snd (poly_pfd_simple p cs)) !\n             i !\n             j)\n            (fst (map (\\<lambda>(c, n). ([:1::'a, - c:], n)) cs ! i))\n            (snd (map (\\<lambda>(c, n). ([:1::'a, - c:], n)) cs ! i) + 1 -\n             j)) =\n    fps_of_poly p /\n    fps_of_poly\n     (\\<Prod>(x,\n         n)\\<leftarrow>map (\\<lambda>(c, n). ([:1::'a, - c:], n))\n                        cs. x ^ Suc n)", "using nz distinct' coprime"], ["proof (prove)\nusing this:\n  (0::'a) \\<notin> fst ` set cs\n  distinct (map (\\<lambda>(c, n). [:1::'a, - c:] ^ Suc n) cs)\n  pairwise coprime ((\\<lambda>(c, n). [:1::'a, - c:] ^ Suc n) ` set cs)\n\ngoal (1 subgoal):\n 1. fps_of_poly (fst (poly_pfd_simple p cs)) +\n    (\\<Sum>i<length (map (\\<lambda>(c, n). ([:1::'a, - c:], n)) cs).\n        \\<Sum>j\\<le>snd (map (\\<lambda>(c, n). ([:1::'a, - c:], n)) cs ! i).\n           from_decomp\n            (map (map (\\<lambda>c. [:c:])) (snd (poly_pfd_simple p cs)) !\n             i !\n             j)\n            (fst (map (\\<lambda>(c, n). ([:1::'a, - c:], n)) cs ! i))\n            (snd (map (\\<lambda>(c, n). ([:1::'a, - c:], n)) cs ! i) + 1 -\n             j)) =\n    fps_of_poly p /\n    fps_of_poly\n     (\\<Prod>(x,\n         n)\\<leftarrow>map (\\<lambda>(c, n). ([:1::'a, - c:], n))\n                        cs. x ^ Suc n)", "by (intro partial_fraction_decomposition poly_pfd_simple)\n       (force simp: o_def case_prod_unfold simp del: power_Suc)+"], ["proof (state)\nthis:\n  fps_of_poly (fst (poly_pfd_simple p cs)) +\n  (\\<Sum>i<length (map (\\<lambda>(c, n). ([:1::'a, - c:], n)) cs).\n      \\<Sum>j\\<le>snd (map (\\<lambda>(c, n). ([:1::'a, - c:], n)) cs ! i).\n         from_decomp\n          (map (map (\\<lambda>c. [:c:])) (snd (poly_pfd_simple p cs)) ! i !\n           j)\n          (fst (map (\\<lambda>(c, n). ([:1::'a, - c:], n)) cs ! i))\n          (snd (map (\\<lambda>(c, n). ([:1::'a, - c:], n)) cs ! i) + 1 -\n           j)) =\n  fps_of_poly p /\n  fps_of_poly\n   (\\<Prod>(x,\n       n)\\<leftarrow>map (\\<lambda>(c, n). ([:1::'a, - c:], n))\n                      cs. x ^ Suc n)\n\ngoal (1 subgoal):\n 1. fps_of_poly p /\n    fps_of_poly (\\<Prod>(c, n)\\<leftarrow>cs. [:1::'a, - c:] ^ Suc n) =\n    Abs_fps\n     (\\<lambda>k.\n         coeff a k +\n         (\\<Sum>i<length cs.\n             poly\n              (\\<Sum>j\\<le>snd (cs ! i).\n                  inverse_irred_power_poly (zs ! i ! j)\n                   (snd (cs ! i) + 1 - j))\n              (of_nat k) *\n             fst (cs ! i) ^ k))", "note this [symmetric]"], ["proof (state)\nthis:\n  fps_of_poly p /\n  fps_of_poly\n   (\\<Prod>(x,\n       n)\\<leftarrow>map (\\<lambda>(c, n). ([:1::'a, - c:], n))\n                      cs. x ^ Suc n) =\n  fps_of_poly (fst (poly_pfd_simple p cs)) +\n  (\\<Sum>i<length (map (\\<lambda>(c, n). ([:1::'a, - c:], n)) cs).\n      \\<Sum>j\\<le>snd (map (\\<lambda>(c, n). ([:1::'a, - c:], n)) cs ! i).\n         from_decomp\n          (map (map (\\<lambda>c. [:c:])) (snd (poly_pfd_simple p cs)) ! i !\n           j)\n          (fst (map (\\<lambda>(c, n). ([:1::'a, - c:], n)) cs ! i))\n          (snd (map (\\<lambda>(c, n). ([:1::'a, - c:], n)) cs ! i) + 1 - j))\n\ngoal (1 subgoal):\n 1. fps_of_poly p /\n    fps_of_poly (\\<Prod>(c, n)\\<leftarrow>cs. [:1::'a, - c:] ^ Suc n) =\n    Abs_fps\n     (\\<lambda>k.\n         coeff a k +\n         (\\<Sum>i<length cs.\n             poly\n              (\\<Sum>j\\<le>snd (cs ! i).\n                  inverse_irred_power_poly (zs ! i ! j)\n                   (snd (cs ! i) + 1 - j))\n              (of_nat k) *\n             fst (cs ! i) ^ k))", "also"], ["proof (state)\nthis:\n  fps_of_poly p /\n  fps_of_poly\n   (\\<Prod>(x,\n       n)\\<leftarrow>map (\\<lambda>(c, n). ([:1::'a, - c:], n))\n                      cs. x ^ Suc n) =\n  fps_of_poly (fst (poly_pfd_simple p cs)) +\n  (\\<Sum>i<length (map (\\<lambda>(c, n). ([:1::'a, - c:], n)) cs).\n      \\<Sum>j\\<le>snd (map (\\<lambda>(c, n). ([:1::'a, - c:], n)) cs ! i).\n         from_decomp\n          (map (map (\\<lambda>c. [:c:])) (snd (poly_pfd_simple p cs)) ! i !\n           j)\n          (fst (map (\\<lambda>(c, n). ([:1::'a, - c:], n)) cs ! i))\n          (snd (map (\\<lambda>(c, n). ([:1::'a, - c:], n)) cs ! i) + 1 - j))\n\ngoal (1 subgoal):\n 1. fps_of_poly p /\n    fps_of_poly (\\<Prod>(c, n)\\<leftarrow>cs. [:1::'a, - c:] ^ Suc n) =\n    Abs_fps\n     (\\<lambda>k.\n         coeff a k +\n         (\\<Sum>i<length cs.\n             poly\n              (\\<Sum>j\\<le>snd (cs ! i).\n                  inverse_irred_power_poly (zs ! i ! j)\n                   (snd (cs ! i) + 1 - j))\n              (of_nat k) *\n             fst (cs ! i) ^ k))", "from azs [symmetric]"], ["proof (chain)\npicking this:\n  poly_pfd_simple p cs = (a, zs)", "have \"?A = fps_of_poly a + (\\<Sum>i<n. \\<Sum>j\\<le>snd (cs ! i). from_decomp\n                  (map (map (\\<lambda>c. [:c:])) zs ! i ! j) [:1,-fst (cs ! i):] (snd (cs ! i)+1 - j))\"\n      (is \"_ = _ + ?S\")"], ["proof (prove)\nusing this:\n  poly_pfd_simple p cs = (a, zs)\n\ngoal (1 subgoal):\n 1. fps_of_poly (fst (poly_pfd_simple p cs)) +\n    (\\<Sum>i<length (map (\\<lambda>(c, n). ([:1::'a, - c:], n)) cs).\n        \\<Sum>j\\<le>snd (map (\\<lambda>(c, n). ([:1::'a, - c:], n)) cs ! i).\n           from_decomp\n            (map (map (\\<lambda>c. [:c:])) (snd (poly_pfd_simple p cs)) !\n             i !\n             j)\n            (fst (map (\\<lambda>(c, n). ([:1::'a, - c:], n)) cs ! i))\n            (snd (map (\\<lambda>(c, n). ([:1::'a, - c:], n)) cs ! i) + 1 -\n             j)) =\n    fps_of_poly a +\n    (\\<Sum>i<n.\n        \\<Sum>j\\<le>snd (cs ! i).\n           from_decomp (map (map (\\<lambda>c. [:c:])) zs ! i ! j)\n            [:1::'a, - fst (cs ! i):] (snd (cs ! i) + 1 - j))", "by (simp add: case_prod_unfold Let_def n_def)"], ["proof (state)\nthis:\n  fps_of_poly (fst (poly_pfd_simple p cs)) +\n  (\\<Sum>i<length (map (\\<lambda>(c, n). ([:1::'a, - c:], n)) cs).\n      \\<Sum>j\\<le>snd (map (\\<lambda>(c, n). ([:1::'a, - c:], n)) cs ! i).\n         from_decomp\n          (map (map (\\<lambda>c. [:c:])) (snd (poly_pfd_simple p cs)) ! i !\n           j)\n          (fst (map (\\<lambda>(c, n). ([:1::'a, - c:], n)) cs ! i))\n          (snd (map (\\<lambda>(c, n). ([:1::'a, - c:], n)) cs ! i) + 1 -\n           j)) =\n  fps_of_poly a +\n  (\\<Sum>i<n.\n      \\<Sum>j\\<le>snd (cs ! i).\n         from_decomp (map (map (\\<lambda>c. [:c:])) zs ! i ! j)\n          [:1::'a, - fst (cs ! i):] (snd (cs ! i) + 1 - j))\n\ngoal (1 subgoal):\n 1. fps_of_poly p /\n    fps_of_poly (\\<Prod>(c, n)\\<leftarrow>cs. [:1::'a, - c:] ^ Suc n) =\n    Abs_fps\n     (\\<lambda>k.\n         coeff a k +\n         (\\<Sum>i<length cs.\n             poly\n              (\\<Sum>j\\<le>snd (cs ! i).\n                  inverse_irred_power_poly (zs ! i ! j)\n                   (snd (cs ! i) + 1 - j))\n              (of_nat k) *\n             fst (cs ! i) ^ k))", "also"], ["proof (state)\nthis:\n  fps_of_poly (fst (poly_pfd_simple p cs)) +\n  (\\<Sum>i<length (map (\\<lambda>(c, n). ([:1::'a, - c:], n)) cs).\n      \\<Sum>j\\<le>snd (map (\\<lambda>(c, n). ([:1::'a, - c:], n)) cs ! i).\n         from_decomp\n          (map (map (\\<lambda>c. [:c:])) (snd (poly_pfd_simple p cs)) ! i !\n           j)\n          (fst (map (\\<lambda>(c, n). ([:1::'a, - c:], n)) cs ! i))\n          (snd (map (\\<lambda>(c, n). ([:1::'a, - c:], n)) cs ! i) + 1 -\n           j)) =\n  fps_of_poly a +\n  (\\<Sum>i<n.\n      \\<Sum>j\\<le>snd (cs ! i).\n         from_decomp (map (map (\\<lambda>c. [:c:])) zs ! i ! j)\n          [:1::'a, - fst (cs ! i):] (snd (cs ! i) + 1 - j))\n\ngoal (1 subgoal):\n 1. fps_of_poly p /\n    fps_of_poly (\\<Prod>(c, n)\\<leftarrow>cs. [:1::'a, - c:] ^ Suc n) =\n    Abs_fps\n     (\\<lambda>k.\n         coeff a k +\n         (\\<Sum>i<length cs.\n             poly\n              (\\<Sum>j\\<le>snd (cs ! i).\n                  inverse_irred_power_poly (zs ! i ! j)\n                   (snd (cs ! i) + 1 - j))\n              (of_nat k) *\n             fst (cs ! i) ^ k))", "have \"?S = (\\<Sum>i<length cs. \\<Sum>j\\<le>snd (cs ! i). fps_const (zs ! i ! j) /\n                      ((1 - fps_const (fst (cs!i))*fps_X) ^ (snd (cs!i)+1 - j)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i<n.\n        \\<Sum>j\\<le>snd (cs ! i).\n           from_decomp (map (map (\\<lambda>c. [:c:])) zs ! i ! j)\n            [:1::'a, - fst (cs ! i):] (snd (cs ! i) + 1 - j)) =\n    (\\<Sum>i<length cs.\n        \\<Sum>j\\<le>snd (cs ! i).\n           fps_const (zs ! i ! j) /\n           (1 - fps_const (fst (cs ! i)) * fps_X) ^ (snd (cs ! i) + 1 - j))", "by (intro sum.cong refl)\n       (auto simp: from_decomp_def map_nth n_def fps_of_poly_linear' fps_of_poly_simps\n                    fps_const_neg [symmetric] mult_ac simp del: fps_const_neg)"], ["proof (state)\nthis:\n  (\\<Sum>i<n.\n      \\<Sum>j\\<le>snd (cs ! i).\n         from_decomp (map (map (\\<lambda>c. [:c:])) zs ! i ! j)\n          [:1::'a, - fst (cs ! i):] (snd (cs ! i) + 1 - j)) =\n  (\\<Sum>i<length cs.\n      \\<Sum>j\\<le>snd (cs ! i).\n         fps_const (zs ! i ! j) /\n         (1 - fps_const (fst (cs ! i)) * fps_X) ^ (snd (cs ! i) + 1 - j))\n\ngoal (1 subgoal):\n 1. fps_of_poly p /\n    fps_of_poly (\\<Prod>(c, n)\\<leftarrow>cs. [:1::'a, - c:] ^ Suc n) =\n    Abs_fps\n     (\\<lambda>k.\n         coeff a k +\n         (\\<Sum>i<length cs.\n             poly\n              (\\<Sum>j\\<le>snd (cs ! i).\n                  inverse_irred_power_poly (zs ! i ! j)\n                   (snd (cs ! i) + 1 - j))\n              (of_nat k) *\n             fst (cs ! i) ^ k))", "also"], ["proof (state)\nthis:\n  (\\<Sum>i<n.\n      \\<Sum>j\\<le>snd (cs ! i).\n         from_decomp (map (map (\\<lambda>c. [:c:])) zs ! i ! j)\n          [:1::'a, - fst (cs ! i):] (snd (cs ! i) + 1 - j)) =\n  (\\<Sum>i<length cs.\n      \\<Sum>j\\<le>snd (cs ! i).\n         fps_const (zs ! i ! j) /\n         (1 - fps_const (fst (cs ! i)) * fps_X) ^ (snd (cs ! i) + 1 - j))\n\ngoal (1 subgoal):\n 1. fps_of_poly p /\n    fps_of_poly (\\<Prod>(c, n)\\<leftarrow>cs. [:1::'a, - c:] ^ Suc n) =\n    Abs_fps\n     (\\<lambda>k.\n         coeff a k +\n         (\\<Sum>i<length cs.\n             poly\n              (\\<Sum>j\\<le>snd (cs ! i).\n                  inverse_irred_power_poly (zs ! i ! j)\n                   (snd (cs ! i) + 1 - j))\n              (of_nat k) *\n             fst (cs ! i) ^ k))", "have \"\\<dots> = (\\<Sum>i<length cs. \\<Sum>j\\<le>snd (cs ! i) .\n                      Abs_fps (\\<lambda>k. poly (inverse_irred_power_poly (zs ! i ! j)\n                          (snd (cs ! i)+1 - j)) (of_nat k) * (fst (cs ! i)) ^ k))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i<length cs.\n        \\<Sum>j\\<le>snd (cs ! i).\n           fps_const (zs ! i ! j) /\n           (1 - fps_const (fst (cs ! i)) * fps_X) ^\n           (snd (cs ! i) + 1 - j)) =\n    (\\<Sum>i<length cs.\n        \\<Sum>j\\<le>snd (cs ! i).\n           Abs_fps\n            (\\<lambda>k.\n                poly\n                 (inverse_irred_power_poly (zs ! i ! j)\n                   (snd (cs ! i) + 1 - j))\n                 (of_nat k) *\n                fst (cs ! i) ^ k))", "using nz"], ["proof (prove)\nusing this:\n  (0::'a) \\<notin> fst ` set cs\n\ngoal (1 subgoal):\n 1. (\\<Sum>i<length cs.\n        \\<Sum>j\\<le>snd (cs ! i).\n           fps_const (zs ! i ! j) /\n           (1 - fps_const (fst (cs ! i)) * fps_X) ^\n           (snd (cs ! i) + 1 - j)) =\n    (\\<Sum>i<length cs.\n        \\<Sum>j\\<le>snd (cs ! i).\n           Abs_fps\n            (\\<lambda>k.\n                poly\n                 (inverse_irred_power_poly (zs ! i ! j)\n                   (snd (cs ! i) + 1 - j))\n                 (of_nat k) *\n                fst (cs ! i) ^ k))", "by (intro sum.cong refl one_minus_const_fps_X_neg_power'') auto"], ["proof (state)\nthis:\n  (\\<Sum>i<length cs.\n      \\<Sum>j\\<le>snd (cs ! i).\n         fps_const (zs ! i ! j) /\n         (1 - fps_const (fst (cs ! i)) * fps_X) ^ (snd (cs ! i) + 1 - j)) =\n  (\\<Sum>i<length cs.\n      \\<Sum>j\\<le>snd (cs ! i).\n         Abs_fps\n          (\\<lambda>k.\n              poly\n               (inverse_irred_power_poly (zs ! i ! j)\n                 (snd (cs ! i) + 1 - j))\n               (of_nat k) *\n              fst (cs ! i) ^ k))\n\ngoal (1 subgoal):\n 1. fps_of_poly p /\n    fps_of_poly (\\<Prod>(c, n)\\<leftarrow>cs. [:1::'a, - c:] ^ Suc n) =\n    Abs_fps\n     (\\<lambda>k.\n         coeff a k +\n         (\\<Sum>i<length cs.\n             poly\n              (\\<Sum>j\\<le>snd (cs ! i).\n                  inverse_irred_power_poly (zs ! i ! j)\n                   (snd (cs ! i) + 1 - j))\n              (of_nat k) *\n             fst (cs ! i) ^ k))", "also"], ["proof (state)\nthis:\n  (\\<Sum>i<length cs.\n      \\<Sum>j\\<le>snd (cs ! i).\n         fps_const (zs ! i ! j) /\n         (1 - fps_const (fst (cs ! i)) * fps_X) ^ (snd (cs ! i) + 1 - j)) =\n  (\\<Sum>i<length cs.\n      \\<Sum>j\\<le>snd (cs ! i).\n         Abs_fps\n          (\\<lambda>k.\n              poly\n               (inverse_irred_power_poly (zs ! i ! j)\n                 (snd (cs ! i) + 1 - j))\n               (of_nat k) *\n              fst (cs ! i) ^ k))\n\ngoal (1 subgoal):\n 1. fps_of_poly p /\n    fps_of_poly (\\<Prod>(c, n)\\<leftarrow>cs. [:1::'a, - c:] ^ Suc n) =\n    Abs_fps\n     (\\<lambda>k.\n         coeff a k +\n         (\\<Sum>i<length cs.\n             poly\n              (\\<Sum>j\\<le>snd (cs ! i).\n                  inverse_irred_power_poly (zs ! i ! j)\n                   (snd (cs ! i) + 1 - j))\n              (of_nat k) *\n             fst (cs ! i) ^ k))", "have \"fps_of_poly a + \\<dots> = ?rhs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fps_of_poly a +\n    (\\<Sum>i<length cs.\n        \\<Sum>j\\<le>snd (cs ! i).\n           Abs_fps\n            (\\<lambda>k.\n                poly\n                 (inverse_irred_power_poly (zs ! i ! j)\n                   (snd (cs ! i) + 1 - j))\n                 (of_nat k) *\n                fst (cs ! i) ^ k)) =\n    Abs_fps\n     (\\<lambda>k.\n         coeff a k +\n         (\\<Sum>i<length cs.\n             poly\n              (\\<Sum>j\\<le>snd (cs ! i).\n                  inverse_irred_power_poly (zs ! i ! j)\n                   (snd (cs ! i) + 1 - j))\n              (of_nat k) *\n             fst (cs ! i) ^ k))", "by (intro fps_ext) (simp_all add: sum_distrib_right fps_sum_nth poly_sum)"], ["proof (state)\nthis:\n  fps_of_poly a +\n  (\\<Sum>i<length cs.\n      \\<Sum>j\\<le>snd (cs ! i).\n         Abs_fps\n          (\\<lambda>k.\n              poly\n               (inverse_irred_power_poly (zs ! i ! j)\n                 (snd (cs ! i) + 1 - j))\n               (of_nat k) *\n              fst (cs ! i) ^ k)) =\n  Abs_fps\n   (\\<lambda>k.\n       coeff a k +\n       (\\<Sum>i<length cs.\n           poly\n            (\\<Sum>j\\<le>snd (cs ! i).\n                inverse_irred_power_poly (zs ! i ! j)\n                 (snd (cs ! i) + 1 - j))\n            (of_nat k) *\n           fst (cs ! i) ^ k))\n\ngoal (1 subgoal):\n 1. fps_of_poly p /\n    fps_of_poly (\\<Prod>(c, n)\\<leftarrow>cs. [:1::'a, - c:] ^ Suc n) =\n    Abs_fps\n     (\\<lambda>k.\n         coeff a k +\n         (\\<Sum>i<length cs.\n             poly\n              (\\<Sum>j\\<le>snd (cs ! i).\n                  inverse_irred_power_poly (zs ! i ! j)\n                   (snd (cs ! i) + 1 - j))\n              (of_nat k) *\n             fst (cs ! i) ^ k))", "finally"], ["proof (chain)\npicking this:\n  fps_of_poly p /\n  fps_of_poly\n   (\\<Prod>a\\<leftarrow>map (\\<lambda>a.\n                                case a of\n                                (c, n) \\<Rightarrow> ([:1::'a, - c:], n))\n                         cs. case a of (x, n) \\<Rightarrow> x ^ Suc n) =\n  Abs_fps\n   (\\<lambda>k.\n       coeff a k +\n       (\\<Sum>i<length cs.\n           poly\n            (\\<Sum>j\\<le>snd (cs ! i).\n                inverse_irred_power_poly (zs ! i ! j)\n                 (snd (cs ! i) + 1 - j))\n            (of_nat k) *\n           fst (cs ! i) ^ k))", "show ?thesis"], ["proof (prove)\nusing this:\n  fps_of_poly p /\n  fps_of_poly\n   (\\<Prod>a\\<leftarrow>map (\\<lambda>a.\n                                case a of\n                                (c, n) \\<Rightarrow> ([:1::'a, - c:], n))\n                         cs. case a of (x, n) \\<Rightarrow> x ^ Suc n) =\n  Abs_fps\n   (\\<lambda>k.\n       coeff a k +\n       (\\<Sum>i<length cs.\n           poly\n            (\\<Sum>j\\<le>snd (cs ! i).\n                inverse_irred_power_poly (zs ! i ! j)\n                 (snd (cs ! i) + 1 - j))\n            (of_nat k) *\n           fst (cs ! i) ^ k))\n\ngoal (1 subgoal):\n 1. fps_of_poly p /\n    fps_of_poly (\\<Prod>(c, n)\\<leftarrow>cs. [:1::'a, - c:] ^ Suc n) =\n    Abs_fps\n     (\\<lambda>k.\n         coeff a k +\n         (\\<Sum>i<length cs.\n             poly\n              (\\<Sum>j\\<le>snd (cs ! i).\n                  inverse_irred_power_poly (zs ! i ! j)\n                   (snd (cs ! i) + 1 - j))\n              (of_nat k) *\n             fst (cs ! i) ^ k))", "by (simp add: o_def case_prod_unfold)"], ["proof (state)\nthis:\n  fps_of_poly p /\n  fps_of_poly (\\<Prod>(c, n)\\<leftarrow>cs. [:1::'a, - c:] ^ Suc n) =\n  Abs_fps\n   (\\<lambda>k.\n       coeff a k +\n       (\\<Sum>i<length cs.\n           poly\n            (\\<Sum>j\\<le>snd (cs ! i).\n                inverse_irred_power_poly (zs ! i ! j)\n                 (snd (cs ! i) + 1 - j))\n            (of_nat k) *\n           fst (cs ! i) ^ k))\n\ngoal:\nNo subgoals!", "qed"], ["", "definition solve_factored_ratfps ::\n    \"('a :: {field_char_0,field_gcd}) poly \\<Rightarrow> ('a \\<times> nat) list \\<Rightarrow> 'a poly \\<times> ('a poly \\<times> 'a) list\" where\n  \"solve_factored_ratfps p cs = (let n = length cs in case poly_pfd_simple p cs of (a, zs) \\<Rightarrow>\n      (a, zip_with (\\<lambda>zs (c,n). ((\\<Sum>(z,j) \\<leftarrow> zip zs [0..<Suc n].\n              inverse_irred_power_poly z (n + 1 - j)), c)) zs cs))\""], ["", "lemma length_snd_poly_pfd_simple [simp]: \"length (snd (poly_pfd_simple p cs)) = length cs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (snd (poly_pfd_simple p cs)) = length cs", "by (simp add: poly_pfd_simple_def)"], ["", "lemma length_nth_snd_poly_pfd_simple [simp]:\n  \"i < length cs \\<Longrightarrow> length (snd (poly_pfd_simple p cs) ! i) = snd (cs!i) + 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i < length cs \\<Longrightarrow>\n    length (snd (poly_pfd_simple p cs) ! i) = snd (cs ! i) + 1", "by (auto simp: poly_pfd_simple_def case_prod_unfold Let_def)"], ["", "lemma solve_factored_ratfps_roots:\n  \"map snd (snd (solve_factored_ratfps p cs)) = map fst cs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map snd (snd (solve_factored_ratfps p cs)) = map fst cs", "by (rule nth_equalityI)\n     (simp_all add: solve_factored_ratfps_def poly_pfd_simple case_prod_unfold Let_def\n                    zip_with_altdef o_def)"], ["", "definition interp_ratfps_solution where\n  \"interp_ratfps_solution = (\\<lambda>(p,cs) n. coeff p n + (\\<Sum>(q,c)\\<leftarrow>cs. poly q (of_nat n) * c ^ n))\""], ["", "lemma solve_factored_ratfps:\n  fixes p :: \"'a :: {field_char_0,field_gcd} poly\" and cs :: \"('a \\<times> nat) list\"\n  assumes distinct: \"distinct (map fst cs)\"\n  assumes nz: \"0 \\<notin> fst ` set cs\"\n  shows \"fps_of_poly p / fps_of_poly (\\<Prod>(c,n)\\<leftarrow>cs. [:1,-c:]^Suc n) =\n           Abs_fps (interp_ratfps_solution (solve_factored_ratfps p cs))\" (is \"?lhs = ?rhs\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. fps_of_poly p /\n    fps_of_poly (\\<Prod>(c, n)\\<leftarrow>cs. [:1::'a, - c:] ^ Suc n) =\n    Abs_fps (interp_ratfps_solution (solve_factored_ratfps p cs))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. fps_of_poly p /\n    fps_of_poly (\\<Prod>(c, n)\\<leftarrow>cs. [:1::'a, - c:] ^ Suc n) =\n    Abs_fps (interp_ratfps_solution (solve_factored_ratfps p cs))", "obtain a zs where azs: \"(a, zs) = solve_factored_ratfps p cs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>a zs.\n        (a, zs) = solve_factored_ratfps p cs \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using prod.exhaust"], ["proof (prove)\nusing this:\n  (\\<And>x1 x2. ?y = (x1, x2) \\<Longrightarrow> ?P) \\<Longrightarrow> ?P\n\ngoal (1 subgoal):\n 1. (\\<And>a zs.\n        (a, zs) = solve_factored_ratfps p cs \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  (a, zs) = solve_factored_ratfps p cs\n\ngoal (1 subgoal):\n 1. fps_of_poly p /\n    fps_of_poly (\\<Prod>(c, n)\\<leftarrow>cs. [:1::'a, - c:] ^ Suc n) =\n    Abs_fps (interp_ratfps_solution (solve_factored_ratfps p cs))", "from azs"], ["proof (chain)\npicking this:\n  (a, zs) = solve_factored_ratfps p cs", "have a: \"a = fst (poly_pfd_simple p cs)\""], ["proof (prove)\nusing this:\n  (a, zs) = solve_factored_ratfps p cs\n\ngoal (1 subgoal):\n 1. a = fst (poly_pfd_simple p cs)", "by (simp add: solve_factored_ratfps_def Let_def case_prod_unfold)"], ["proof (state)\nthis:\n  a = fst (poly_pfd_simple p cs)\n\ngoal (1 subgoal):\n 1. fps_of_poly p /\n    fps_of_poly (\\<Prod>(c, n)\\<leftarrow>cs. [:1::'a, - c:] ^ Suc n) =\n    Abs_fps (interp_ratfps_solution (solve_factored_ratfps p cs))", "define zs' where \"zs' = snd (poly_pfd_simple p cs)\""], ["proof (state)\nthis:\n  zs' = snd (poly_pfd_simple p cs)\n\ngoal (1 subgoal):\n 1. fps_of_poly p /\n    fps_of_poly (\\<Prod>(c, n)\\<leftarrow>cs. [:1::'a, - c:] ^ Suc n) =\n    Abs_fps (interp_ratfps_solution (solve_factored_ratfps p cs))", "with a"], ["proof (chain)\npicking this:\n  a = fst (poly_pfd_simple p cs)\n  zs' = snd (poly_pfd_simple p cs)", "have azs': \"(a, zs') = poly_pfd_simple p cs\""], ["proof (prove)\nusing this:\n  a = fst (poly_pfd_simple p cs)\n  zs' = snd (poly_pfd_simple p cs)\n\ngoal (1 subgoal):\n 1. (a, zs') = poly_pfd_simple p cs", "by simp"], ["proof (state)\nthis:\n  (a, zs') = poly_pfd_simple p cs\n\ngoal (1 subgoal):\n 1. fps_of_poly p /\n    fps_of_poly (\\<Prod>(c, n)\\<leftarrow>cs. [:1::'a, - c:] ^ Suc n) =\n    Abs_fps (interp_ratfps_solution (solve_factored_ratfps p cs))", "from azs"], ["proof (chain)\npicking this:\n  (a, zs) = solve_factored_ratfps p cs", "have zs: \"zs = snd (solve_factored_ratfps p cs)\""], ["proof (prove)\nusing this:\n  (a, zs) = solve_factored_ratfps p cs\n\ngoal (1 subgoal):\n 1. zs = snd (solve_factored_ratfps p cs)", "by (auto simp add: snd_def split: prod.split)"], ["proof (state)\nthis:\n  zs = snd (solve_factored_ratfps p cs)\n\ngoal (1 subgoal):\n 1. fps_of_poly p /\n    fps_of_poly (\\<Prod>(c, n)\\<leftarrow>cs. [:1::'a, - c:] ^ Suc n) =\n    Abs_fps (interp_ratfps_solution (solve_factored_ratfps p cs))", "have \"?lhs = Abs_fps (\\<lambda>k. coeff a k + (\\<Sum>i<length cs. poly (\\<Sum>j\\<le>snd (cs ! i).\n                 inverse_irred_power_poly (zs' ! i ! j) (snd (cs ! i)+1 - j))\n                 (of_nat k) * (fst (cs ! i)) ^ k))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fps_of_poly p /\n    fps_of_poly (\\<Prod>(c, n)\\<leftarrow>cs. [:1::'a, - c:] ^ Suc n) =\n    Abs_fps\n     (\\<lambda>k.\n         coeff a k +\n         (\\<Sum>i<length cs.\n             poly\n              (\\<Sum>j\\<le>snd (cs ! i).\n                  inverse_irred_power_poly (zs' ! i ! j)\n                   (snd (cs ! i) + 1 - j))\n              (of_nat k) *\n             fst (cs ! i) ^ k))", "by (rule solve_rat_fps_aux[OF distinct azs' nz])"], ["proof (state)\nthis:\n  fps_of_poly p /\n  fps_of_poly (\\<Prod>(c, n)\\<leftarrow>cs. [:1::'a, - c:] ^ Suc n) =\n  Abs_fps\n   (\\<lambda>k.\n       coeff a k +\n       (\\<Sum>i<length cs.\n           poly\n            (\\<Sum>j\\<le>snd (cs ! i).\n                inverse_irred_power_poly (zs' ! i ! j)\n                 (snd (cs ! i) + 1 - j))\n            (of_nat k) *\n           fst (cs ! i) ^ k))\n\ngoal (1 subgoal):\n 1. fps_of_poly p /\n    fps_of_poly (\\<Prod>(c, n)\\<leftarrow>cs. [:1::'a, - c:] ^ Suc n) =\n    Abs_fps (interp_ratfps_solution (solve_factored_ratfps p cs))", "also"], ["proof (state)\nthis:\n  fps_of_poly p /\n  fps_of_poly (\\<Prod>(c, n)\\<leftarrow>cs. [:1::'a, - c:] ^ Suc n) =\n  Abs_fps\n   (\\<lambda>k.\n       coeff a k +\n       (\\<Sum>i<length cs.\n           poly\n            (\\<Sum>j\\<le>snd (cs ! i).\n                inverse_irred_power_poly (zs' ! i ! j)\n                 (snd (cs ! i) + 1 - j))\n            (of_nat k) *\n           fst (cs ! i) ^ k))\n\ngoal (1 subgoal):\n 1. fps_of_poly p /\n    fps_of_poly (\\<Prod>(c, n)\\<leftarrow>cs. [:1::'a, - c:] ^ Suc n) =\n    Abs_fps (interp_ratfps_solution (solve_factored_ratfps p cs))", "from azs"], ["proof (chain)\npicking this:\n  (a, zs) = solve_factored_ratfps p cs", "have \"\\<dots> = ?rhs\""], ["proof (prove)\nusing this:\n  (a, zs) = solve_factored_ratfps p cs\n\ngoal (1 subgoal):\n 1. Abs_fps\n     (\\<lambda>k.\n         coeff a k +\n         (\\<Sum>i<length cs.\n             poly\n              (\\<Sum>j\\<le>snd (cs ! i).\n                  inverse_irred_power_poly (zs' ! i ! j)\n                   (snd (cs ! i) + 1 - j))\n              (of_nat k) *\n             fst (cs ! i) ^ k)) =\n    Abs_fps (interp_ratfps_solution (solve_factored_ratfps p cs))", "unfolding interp_ratfps_solution_def"], ["proof (prove)\nusing this:\n  (a, zs) = solve_factored_ratfps p cs\n\ngoal (1 subgoal):\n 1. Abs_fps\n     (\\<lambda>k.\n         coeff a k +\n         (\\<Sum>i<length cs.\n             poly\n              (\\<Sum>j\\<le>snd (cs ! i).\n                  inverse_irred_power_poly (zs' ! i ! j)\n                   (snd (cs ! i) + 1 - j))\n              (of_nat k) *\n             fst (cs ! i) ^ k)) =\n    Abs_fps\n     (case solve_factored_ratfps p cs of\n      (p, cs) \\<Rightarrow>\n        \\<lambda>n.\n           coeff p n +\n           (\\<Sum>(q, c)\\<leftarrow>cs. poly q (of_nat n) * c ^ n))", "by (auto simp: a zs solve_factored_ratfps_def Let_def case_prod_unfold zip_altdef\n                   zip_with_altdef' sum_list_sum_nth atLeast0LessThan zs'_def lessThan_Suc_atMost\n             intro!: fps_ext sum.cong simp del: upt_Suc)"], ["proof (state)\nthis:\n  Abs_fps\n   (\\<lambda>k.\n       coeff a k +\n       (\\<Sum>i<length cs.\n           poly\n            (\\<Sum>j\\<le>snd (cs ! i).\n                inverse_irred_power_poly (zs' ! i ! j)\n                 (snd (cs ! i) + 1 - j))\n            (of_nat k) *\n           fst (cs ! i) ^ k)) =\n  Abs_fps (interp_ratfps_solution (solve_factored_ratfps p cs))\n\ngoal (1 subgoal):\n 1. fps_of_poly p /\n    fps_of_poly (\\<Prod>(c, n)\\<leftarrow>cs. [:1::'a, - c:] ^ Suc n) =\n    Abs_fps (interp_ratfps_solution (solve_factored_ratfps p cs))", "finally"], ["proof (chain)\npicking this:\n  fps_of_poly p /\n  fps_of_poly (\\<Prod>(c, n)\\<leftarrow>cs. [:1::'a, - c:] ^ Suc n) =\n  Abs_fps (interp_ratfps_solution (solve_factored_ratfps p cs))", "show ?thesis"], ["proof (prove)\nusing this:\n  fps_of_poly p /\n  fps_of_poly (\\<Prod>(c, n)\\<leftarrow>cs. [:1::'a, - c:] ^ Suc n) =\n  Abs_fps (interp_ratfps_solution (solve_factored_ratfps p cs))\n\ngoal (1 subgoal):\n 1. fps_of_poly p /\n    fps_of_poly (\\<Prod>(c, n)\\<leftarrow>cs. [:1::'a, - c:] ^ Suc n) =\n    Abs_fps (interp_ratfps_solution (solve_factored_ratfps p cs))", "."], ["proof (state)\nthis:\n  fps_of_poly p /\n  fps_of_poly (\\<Prod>(c, n)\\<leftarrow>cs. [:1::'a, - c:] ^ Suc n) =\n  Abs_fps (interp_ratfps_solution (solve_factored_ratfps p cs))\n\ngoal:\nNo subgoals!", "qed"], ["", "definition solve_factored_ratfps' where\n  \"solve_factored_ratfps' = (\\<lambda>p (a,cs). solve_factored_ratfps (smult (inverse a) p) cs)\""], ["", "lemma solve_factored_ratfps':\n  assumes \"is_alt_factorization_of fctrs q\" \"q \\<noteq> 0\"\n  shows   \"Abs_fps (interp_ratfps_solution (solve_factored_ratfps' p fctrs)) =\n             fps_of_poly p / fps_of_poly q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Abs_fps (interp_ratfps_solution (solve_factored_ratfps' p fctrs)) =\n    fps_of_poly p / fps_of_poly q", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Abs_fps (interp_ratfps_solution (solve_factored_ratfps' p fctrs)) =\n    fps_of_poly p / fps_of_poly q", "from assms"], ["proof (chain)\npicking this:\n  is_alt_factorization_of fctrs q\n  q \\<noteq> 0", "have q: \"q = interp_alt_factorization fctrs\""], ["proof (prove)\nusing this:\n  is_alt_factorization_of fctrs q\n  q \\<noteq> 0\n\ngoal (1 subgoal):\n 1. q = interp_alt_factorization fctrs", "by (simp add: is_alt_factorization_of_def)"], ["proof (state)\nthis:\n  q = interp_alt_factorization fctrs\n\ngoal (1 subgoal):\n 1. Abs_fps (interp_ratfps_solution (solve_factored_ratfps' p fctrs)) =\n    fps_of_poly p / fps_of_poly q", "from assms(2)"], ["proof (chain)\npicking this:\n  q \\<noteq> 0", "have nz: \"fst fctrs \\<noteq> 0\""], ["proof (prove)\nusing this:\n  q \\<noteq> 0\n\ngoal (1 subgoal):\n 1. fst fctrs \\<noteq> (0::'a)", "by (subst (asm) q) (auto simp: interp_alt_factorization_def case_prod_unfold)"], ["proof (state)\nthis:\n  fst fctrs \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. Abs_fps (interp_ratfps_solution (solve_factored_ratfps' p fctrs)) =\n    fps_of_poly p / fps_of_poly q", "note q"], ["proof (state)\nthis:\n  q = interp_alt_factorization fctrs\n\ngoal (1 subgoal):\n 1. Abs_fps (interp_ratfps_solution (solve_factored_ratfps' p fctrs)) =\n    fps_of_poly p / fps_of_poly q", "also"], ["proof (state)\nthis:\n  q = interp_alt_factorization fctrs\n\ngoal (1 subgoal):\n 1. Abs_fps (interp_ratfps_solution (solve_factored_ratfps' p fctrs)) =\n    fps_of_poly p / fps_of_poly q", "from nz"], ["proof (chain)\npicking this:\n  fst fctrs \\<noteq> (0::'a)", "have \"coeff (interp_alt_factorization fctrs) 0 \\<noteq> 0\""], ["proof (prove)\nusing this:\n  fst fctrs \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. coeff (interp_alt_factorization fctrs) 0 \\<noteq> (0::'a)", "by (auto simp: interp_alt_factorization_def case_prod_unfold coeff_0_prod_list\n                   o_def coeff_0_power prod_list_zero_iff)"], ["proof (state)\nthis:\n  coeff (interp_alt_factorization fctrs) 0 \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. Abs_fps (interp_ratfps_solution (solve_factored_ratfps' p fctrs)) =\n    fps_of_poly p / fps_of_poly q", "finally"], ["proof (chain)\npicking this:\n  coeff q 0 \\<noteq> (0::'a)", "have \"coeff q 0 \\<noteq> 0\""], ["proof (prove)\nusing this:\n  coeff q 0 \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. coeff q 0 \\<noteq> (0::'a)", "."], ["proof (state)\nthis:\n  coeff q 0 \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. Abs_fps (interp_ratfps_solution (solve_factored_ratfps' p fctrs)) =\n    fps_of_poly p / fps_of_poly q", "obtain a cs where fctrs: \"fctrs = (a, cs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>a cs. fctrs = (a, cs) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases fctrs) simp_all"], ["proof (state)\nthis:\n  fctrs = (a, cs)\n\ngoal (1 subgoal):\n 1. Abs_fps (interp_ratfps_solution (solve_factored_ratfps' p fctrs)) =\n    fps_of_poly p / fps_of_poly q", "obtain b zs where sol: \"solve_factored_ratfps' p fctrs = (b, zs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>b zs.\n        solve_factored_ratfps' p fctrs = (b, zs) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using prod.exhaust"], ["proof (prove)\nusing this:\n  (\\<And>x1 x2. ?y = (x1, x2) \\<Longrightarrow> ?P) \\<Longrightarrow> ?P\n\ngoal (1 subgoal):\n 1. (\\<And>b zs.\n        solve_factored_ratfps' p fctrs = (b, zs) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  solve_factored_ratfps' p fctrs = (b, zs)\n\ngoal (1 subgoal):\n 1. Abs_fps (interp_ratfps_solution (solve_factored_ratfps' p fctrs)) =\n    fps_of_poly p / fps_of_poly q", "from assms"], ["proof (chain)\npicking this:\n  is_alt_factorization_of fctrs q\n  q \\<noteq> 0", "have [simp]: \"a \\<noteq> 0\""], ["proof (prove)\nusing this:\n  is_alt_factorization_of fctrs q\n  q \\<noteq> 0\n\ngoal (1 subgoal):\n 1. a \\<noteq> (0::'a)", "by (auto simp: is_alt_factorization_of_def interp_alt_factorization_def fctrs)"], ["proof (state)\nthis:\n  a \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. Abs_fps (interp_ratfps_solution (solve_factored_ratfps' p fctrs)) =\n    fps_of_poly p / fps_of_poly q", "have \"fps_of_poly p / fps_of_poly (smult a (\\<Prod>(c, n)\\<leftarrow>cs. [:1, - c:] ^ Suc n)) =\n          fps_of_poly p / (fps_const a * fps_of_poly (\\<Prod>(c, n)\\<leftarrow>cs. [:1, - c:] ^ Suc n))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fps_of_poly p /\n    fps_of_poly\n     (smult a (\\<Prod>(c, n)\\<leftarrow>cs. [:1::'a, - c:] ^ Suc n)) =\n    fps_of_poly p /\n    (fps_const a *\n     fps_of_poly (\\<Prod>(c, n)\\<leftarrow>cs. [:1::'a, - c:] ^ Suc n))", "by (simp_all add: fps_of_poly_smult case_prod_unfold del: power_Suc)"], ["proof (state)\nthis:\n  fps_of_poly p /\n  fps_of_poly\n   (smult a (\\<Prod>(c, n)\\<leftarrow>cs. [:1::'a, - c:] ^ Suc n)) =\n  fps_of_poly p /\n  (fps_const a *\n   fps_of_poly (\\<Prod>(c, n)\\<leftarrow>cs. [:1::'a, - c:] ^ Suc n))\n\ngoal (1 subgoal):\n 1. Abs_fps (interp_ratfps_solution (solve_factored_ratfps' p fctrs)) =\n    fps_of_poly p / fps_of_poly q", "also"], ["proof (state)\nthis:\n  fps_of_poly p /\n  fps_of_poly\n   (smult a (\\<Prod>(c, n)\\<leftarrow>cs. [:1::'a, - c:] ^ Suc n)) =\n  fps_of_poly p /\n  (fps_const a *\n   fps_of_poly (\\<Prod>(c, n)\\<leftarrow>cs. [:1::'a, - c:] ^ Suc n))\n\ngoal (1 subgoal):\n 1. Abs_fps (interp_ratfps_solution (solve_factored_ratfps' p fctrs)) =\n    fps_of_poly p / fps_of_poly q", "have \"\\<dots> = fps_of_poly p / fps_const a / fps_of_poly (\\<Prod>(c, n)\\<leftarrow>cs. [:1, - c:] ^ Suc n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fps_of_poly p /\n    (fps_const a *\n     fps_of_poly (\\<Prod>(c, n)\\<leftarrow>cs. [:1::'a, - c:] ^ Suc n)) =\n    fps_of_poly p / fps_const a /\n    fps_of_poly (\\<Prod>(c, n)\\<leftarrow>cs. [:1::'a, - c:] ^ Suc n)", "by (subst is_unit_div_mult2_eq)\n       (auto simp: coeff_0_power coeff_0_prod_list prod_list_zero_iff)"], ["proof (state)\nthis:\n  fps_of_poly p /\n  (fps_const a *\n   fps_of_poly (\\<Prod>(c, n)\\<leftarrow>cs. [:1::'a, - c:] ^ Suc n)) =\n  fps_of_poly p / fps_const a /\n  fps_of_poly (\\<Prod>(c, n)\\<leftarrow>cs. [:1::'a, - c:] ^ Suc n)\n\ngoal (1 subgoal):\n 1. Abs_fps (interp_ratfps_solution (solve_factored_ratfps' p fctrs)) =\n    fps_of_poly p / fps_of_poly q", "also"], ["proof (state)\nthis:\n  fps_of_poly p /\n  (fps_const a *\n   fps_of_poly (\\<Prod>(c, n)\\<leftarrow>cs. [:1::'a, - c:] ^ Suc n)) =\n  fps_of_poly p / fps_const a /\n  fps_of_poly (\\<Prod>(c, n)\\<leftarrow>cs. [:1::'a, - c:] ^ Suc n)\n\ngoal (1 subgoal):\n 1. Abs_fps (interp_ratfps_solution (solve_factored_ratfps' p fctrs)) =\n    fps_of_poly p / fps_of_poly q", "have \"fps_of_poly p / fps_const a = fps_of_poly (smult (inverse a) p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fps_of_poly p / fps_const a = fps_of_poly (smult (inverse a) p)", "by (simp add: fps_const_inverse fps_divide_unit)"], ["proof (state)\nthis:\n  fps_of_poly p / fps_const a = fps_of_poly (smult (inverse a) p)\n\ngoal (1 subgoal):\n 1. Abs_fps (interp_ratfps_solution (solve_factored_ratfps' p fctrs)) =\n    fps_of_poly p / fps_of_poly q", "also"], ["proof (state)\nthis:\n  fps_of_poly p / fps_const a = fps_of_poly (smult (inverse a) p)\n\ngoal (1 subgoal):\n 1. Abs_fps (interp_ratfps_solution (solve_factored_ratfps' p fctrs)) =\n    fps_of_poly p / fps_of_poly q", "from assms"], ["proof (chain)\npicking this:\n  is_alt_factorization_of fctrs q\n  q \\<noteq> 0", "have \"smult a (\\<Prod>(c, n)\\<leftarrow>cs. [:1, - c:] ^ Suc n) = q\""], ["proof (prove)\nusing this:\n  is_alt_factorization_of fctrs q\n  q \\<noteq> 0\n\ngoal (1 subgoal):\n 1. smult a (\\<Prod>(c, n)\\<leftarrow>cs. [:1::'a, - c:] ^ Suc n) = q", "by (simp add: is_alt_factorization_of_def interp_alt_factorization_def fctrs del: power_Suc)"], ["proof (state)\nthis:\n  smult a (\\<Prod>(c, n)\\<leftarrow>cs. [:1::'a, - c:] ^ Suc n) = q\n\ngoal (1 subgoal):\n 1. Abs_fps (interp_ratfps_solution (solve_factored_ratfps' p fctrs)) =\n    fps_of_poly p / fps_of_poly q", "also"], ["proof (state)\nthis:\n  smult a (\\<Prod>(c, n)\\<leftarrow>cs. [:1::'a, - c:] ^ Suc n) = q\n\ngoal (1 subgoal):\n 1. Abs_fps (interp_ratfps_solution (solve_factored_ratfps' p fctrs)) =\n    fps_of_poly p / fps_of_poly q", "have \"fps_of_poly (smult (inverse a) p) /\n                   fps_of_poly (\\<Prod>(c, n)\\<leftarrow>cs. [:1, - c:] ^ Suc n) =\n               Abs_fps (interp_ratfps_solution (solve_factored_ratfps (smult (inverse a) p) cs))\"\n    (is \"?lhs = _\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. fps_of_poly (smult (inverse a) p) /\n    fps_of_poly (\\<Prod>(c, n)\\<leftarrow>cs. [:1::'a, - c:] ^ Suc n) =\n    Abs_fps\n     (interp_ratfps_solution\n       (solve_factored_ratfps (smult (inverse a) p) cs))", "using assms"], ["proof (prove)\nusing this:\n  is_alt_factorization_of fctrs q\n  q \\<noteq> 0\n\ngoal (1 subgoal):\n 1. fps_of_poly (smult (inverse a) p) /\n    fps_of_poly (\\<Prod>(c, n)\\<leftarrow>cs. [:1::'a, - c:] ^ Suc n) =\n    Abs_fps\n     (interp_ratfps_solution\n       (solve_factored_ratfps (smult (inverse a) p) cs))", "by (intro solve_factored_ratfps)\n       (simp_all add: is_alt_factorization_of_def fctrs solve_factored_ratfps'_def)"], ["proof (state)\nthis:\n  fps_of_poly (smult (inverse a) p) /\n  fps_of_poly (\\<Prod>(c, n)\\<leftarrow>cs. [:1::'a, - c:] ^ Suc n) =\n  Abs_fps\n   (interp_ratfps_solution (solve_factored_ratfps (smult (inverse a) p) cs))\n\ngoal (1 subgoal):\n 1. Abs_fps (interp_ratfps_solution (solve_factored_ratfps' p fctrs)) =\n    fps_of_poly p / fps_of_poly q", "also"], ["proof (state)\nthis:\n  fps_of_poly (smult (inverse a) p) /\n  fps_of_poly (\\<Prod>(c, n)\\<leftarrow>cs. [:1::'a, - c:] ^ Suc n) =\n  Abs_fps\n   (interp_ratfps_solution (solve_factored_ratfps (smult (inverse a) p) cs))\n\ngoal (1 subgoal):\n 1. Abs_fps (interp_ratfps_solution (solve_factored_ratfps' p fctrs)) =\n    fps_of_poly p / fps_of_poly q", "have \"\\<dots> = Abs_fps (interp_ratfps_solution (solve_factored_ratfps' p fctrs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Abs_fps\n     (interp_ratfps_solution\n       (solve_factored_ratfps (smult (inverse a) p) cs)) =\n    Abs_fps (interp_ratfps_solution (solve_factored_ratfps' p fctrs))", "by (simp add: solve_factored_ratfps'_def fctrs)"], ["proof (state)\nthis:\n  Abs_fps\n   (interp_ratfps_solution\n     (solve_factored_ratfps (smult (inverse a) p) cs)) =\n  Abs_fps (interp_ratfps_solution (solve_factored_ratfps' p fctrs))\n\ngoal (1 subgoal):\n 1. Abs_fps (interp_ratfps_solution (solve_factored_ratfps' p fctrs)) =\n    fps_of_poly p / fps_of_poly q", "finally"], ["proof (chain)\npicking this:\n  fps_of_poly p / fps_of_poly q =\n  Abs_fps (interp_ratfps_solution (solve_factored_ratfps' p fctrs))", "show ?thesis"], ["proof (prove)\nusing this:\n  fps_of_poly p / fps_of_poly q =\n  Abs_fps (interp_ratfps_solution (solve_factored_ratfps' p fctrs))\n\ngoal (1 subgoal):\n 1. Abs_fps (interp_ratfps_solution (solve_factored_ratfps' p fctrs)) =\n    fps_of_poly p / fps_of_poly q", ".."], ["proof (state)\nthis:\n  Abs_fps (interp_ratfps_solution (solve_factored_ratfps' p fctrs)) =\n  fps_of_poly p / fps_of_poly q\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma degree_Poly_eq:\n  assumes \"xs = [] \\<or> last xs \\<noteq> 0\"\n  shows   \"degree (Poly xs) = length xs - 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. degree (Poly xs) = length xs - 1", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. degree (Poly xs) = length xs - 1", "from assms"], ["proof (chain)\npicking this:\n  xs = [] \\<or> last xs \\<noteq> (0::'a)", "consider \"xs = []\" | \"xs \\<noteq> []\" \"last xs \\<noteq> 0\""], ["proof (prove)\nusing this:\n  xs = [] \\<or> last xs \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>xs = [] \\<Longrightarrow> thesis;\n     \\<lbrakk>xs \\<noteq> []; last xs \\<noteq> (0::'a)\\<rbrakk>\n     \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "by blast"], ["proof (state)\nthis:\n  \\<lbrakk>xs = [] \\<Longrightarrow> ?thesis;\n   \\<lbrakk>xs \\<noteq> []; last xs \\<noteq> (0::'a)\\<rbrakk>\n   \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. degree (Poly xs) = length xs - 1", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>xs = [] \\<Longrightarrow> ?thesis;\n   \\<lbrakk>xs \\<noteq> []; last xs \\<noteq> (0::'a)\\<rbrakk>\n   \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. degree (Poly xs) = length xs - 1", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. xs = [] \\<Longrightarrow> degree (Poly xs) = length xs - 1\n 2. \\<lbrakk>xs \\<noteq> []; last xs \\<noteq> (0::'a)\\<rbrakk>\n    \\<Longrightarrow> degree (Poly xs) = length xs - 1", "assume \"last xs \\<noteq> 0\" \"xs \\<noteq> []\""], ["proof (state)\nthis:\n  last xs \\<noteq> (0::'a)\n  xs \\<noteq> []\n\ngoal (2 subgoals):\n 1. xs = [] \\<Longrightarrow> degree (Poly xs) = length xs - 1\n 2. \\<lbrakk>xs \\<noteq> []; last xs \\<noteq> (0::'a)\\<rbrakk>\n    \\<Longrightarrow> degree (Poly xs) = length xs - 1", "hence \"no_trailing ((=) 0) xs\""], ["proof (prove)\nusing this:\n  last xs \\<noteq> (0::'a)\n  xs \\<noteq> []\n\ngoal (1 subgoal):\n 1. no_trailing ((=) (0::'a)) xs", "by (auto simp: no_trailing_unfold)"], ["proof (state)\nthis:\n  no_trailing ((=) (0::'a)) xs\n\ngoal (2 subgoals):\n 1. xs = [] \\<Longrightarrow> degree (Poly xs) = length xs - 1\n 2. \\<lbrakk>xs \\<noteq> []; last xs \\<noteq> (0::'a)\\<rbrakk>\n    \\<Longrightarrow> degree (Poly xs) = length xs - 1", "thus ?thesis"], ["proof (prove)\nusing this:\n  no_trailing ((=) (0::'a)) xs\n\ngoal (1 subgoal):\n 1. degree (Poly xs) = length xs - 1", "by (simp add: degree_eq_length_coeffs)"], ["proof (state)\nthis:\n  degree (Poly xs) = length xs - 1\n\ngoal (1 subgoal):\n 1. xs = [] \\<Longrightarrow> degree (Poly xs) = length xs - 1", "qed auto"], ["proof (state)\nthis:\n  degree (Poly xs) = length xs - 1\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma degree_Poly': \"degree (Poly xs) \\<le> length xs - 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. degree (Poly xs) \\<le> length xs - 1", "using length_strip_while_le[of \"(=) 0\" xs]"], ["proof (prove)\nusing this:\n  length (strip_while ((=) (0::'a)) xs) \\<le> length xs\n\ngoal (1 subgoal):\n 1. degree (Poly xs) \\<le> length xs - 1", "by (simp add: degree_eq_length_coeffs)"], ["", "lemma degree_inverse_irred_power_poly_le:\n  \"degree (inverse_irred_power_poly c n) \\<le> n - 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. degree (inverse_irred_power_poly c n) \\<le> n - 1", "by (auto simp: inverse_irred_power_poly_def intro: order.trans[OF degree_Poly'])"], ["", "lemma degree_inverse_irred_power_poly:\n  assumes \"c \\<noteq> 0\"\n  shows   \"degree (inverse_irred_power_poly c n) = n - 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. degree (inverse_irred_power_poly c n) = n - 1", "unfolding inverse_irred_power_poly_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. degree\n     (Poly\n       (map (\\<lambda>k. c * of_nat (stirling n (k + 1)) / fact (n - 1))\n         [0..<n])) =\n    n - 1", "using assms"], ["proof (prove)\nusing this:\n  c \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. degree\n     (Poly\n       (map (\\<lambda>k. c * of_nat (stirling n (k + 1)) / fact (n - 1))\n         [0..<n])) =\n    n - 1", "by (subst degree_Poly_eq) (auto simp: last_conv_nth)"], ["", "lemma reflect_poly_0_iff [simp]: \"reflect_poly p = 0 \\<longleftrightarrow> p = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (reflect_poly p = 0) = (p = 0)", "using coeff_0_reflect_poly_0_iff[of p]"], ["proof (prove)\nusing this:\n  (coeff (reflect_poly p) 0 = (0::'a)) = (p = 0)\n\ngoal (1 subgoal):\n 1. (reflect_poly p = 0) = (p = 0)", "by fastforce"], ["", "lemma degree_sum_list_le: \"(\\<And>p. p \\<in> set ps \\<Longrightarrow> degree p \\<le> T) \\<Longrightarrow> degree (sum_list ps) \\<le> T\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>p.\n        p \\<in> set ps \\<Longrightarrow> degree p \\<le> T) \\<Longrightarrow>\n    degree (sum_list ps) \\<le> T", "by (induction ps) (auto intro: degree_add_le)"], ["", "theorem ratfps_closed_form_exists:\n  fixes q :: \"complex poly\"\n  assumes nz: \"coeff q 0 \\<noteq> 0\"\n  defines \"q' \\<equiv> reflect_poly q\"\n  obtains r rs\n  where \"\\<And>n. fps_nth (fps_of_poly p / fps_of_poly q) n =\n                coeff r n + (\\<Sum>c | poly q' c = 0. poly (rs c) (of_nat n) * c ^ n)\"\n  and   \"\\<And>z. poly q' z = 0 \\<Longrightarrow> degree (rs z) \\<le> order z q' - 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>r rs.\n        \\<lbrakk>\\<And>n.\n                    (fps_of_poly p / fps_of_poly q) $ n =\n                    coeff r n +\n                    (\\<Sum>c | poly q' c = 0.\n                       poly (rs c) (of_nat n) * c ^ n);\n         \\<And>z.\n            poly q' z = 0 \\<Longrightarrow>\n            degree (rs z) \\<le> order z q' - 1\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>r rs.\n        \\<lbrakk>\\<And>n.\n                    (fps_of_poly p / fps_of_poly q) $ n =\n                    coeff r n +\n                    (\\<Sum>c | poly q' c = 0.\n                       poly (rs c) (of_nat n) * c ^ n);\n         \\<And>z.\n            poly q' z = 0 \\<Longrightarrow>\n            degree (rs z) \\<le> order z q' - 1\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from assms"], ["proof (chain)\npicking this:\n  coeff q 0 \\<noteq> 0\n  q' \\<equiv> reflect_poly q", "have nz': \"q \\<noteq> 0\""], ["proof (prove)\nusing this:\n  coeff q 0 \\<noteq> 0\n  q' \\<equiv> reflect_poly q\n\ngoal (1 subgoal):\n 1. q \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  q \\<noteq> 0\n\ngoal (1 subgoal):\n 1. (\\<And>r rs.\n        \\<lbrakk>\\<And>n.\n                    (fps_of_poly p / fps_of_poly q) $ n =\n                    coeff r n +\n                    (\\<Sum>c | poly q' c = 0.\n                       poly (rs c) (of_nat n) * c ^ n);\n         \\<And>z.\n            poly q' z = 0 \\<Longrightarrow>\n            degree (rs z) \\<le> order z q' - 1\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from complex_alt_factorization_exists [OF nz]"], ["proof (chain)\npicking this:\n  \\<exists>fctrs. is_alt_factorization_of fctrs q", "obtain fctrs where fctrs: \"is_alt_factorization_of fctrs q\""], ["proof (prove)\nusing this:\n  \\<exists>fctrs. is_alt_factorization_of fctrs q\n\ngoal (1 subgoal):\n 1. (\\<And>fctrs.\n        is_alt_factorization_of fctrs q \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  is_alt_factorization_of fctrs q\n\ngoal (1 subgoal):\n 1. (\\<And>r rs.\n        \\<lbrakk>\\<And>n.\n                    (fps_of_poly p / fps_of_poly q) $ n =\n                    coeff r n +\n                    (\\<Sum>c | poly q' c = 0.\n                       poly (rs c) (of_nat n) * c ^ n);\n         \\<And>z.\n            poly q' z = 0 \\<Longrightarrow>\n            degree (rs z) \\<le> order z q' - 1\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "with nz"], ["proof (chain)\npicking this:\n  coeff q 0 \\<noteq> 0\n  is_alt_factorization_of fctrs q", "have fctrs': \"is_factorization_of fctrs q'\""], ["proof (prove)\nusing this:\n  coeff q 0 \\<noteq> 0\n  is_alt_factorization_of fctrs q\n\ngoal (1 subgoal):\n 1. is_factorization_of fctrs q'", "unfolding q'_def"], ["proof (prove)\nusing this:\n  coeff q 0 \\<noteq> 0\n  is_alt_factorization_of fctrs q\n\ngoal (1 subgoal):\n 1. is_factorization_of fctrs (reflect_poly q)", "by (rule reflect_factorization')"], ["proof (state)\nthis:\n  is_factorization_of fctrs q'\n\ngoal (1 subgoal):\n 1. (\\<And>r rs.\n        \\<lbrakk>\\<And>n.\n                    (fps_of_poly p / fps_of_poly q) $ n =\n                    coeff r n +\n                    (\\<Sum>c | poly q' c = 0.\n                       poly (rs c) (of_nat n) * c ^ n);\n         \\<And>z.\n            poly q' z = 0 \\<Longrightarrow>\n            degree (rs z) \\<le> order z q' - 1\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "define r where \"r = fst (solve_factored_ratfps' p fctrs)\""], ["proof (state)\nthis:\n  r = fst (solve_factored_ratfps' p fctrs)\n\ngoal (1 subgoal):\n 1. (\\<And>r rs.\n        \\<lbrakk>\\<And>n.\n                    (fps_of_poly p / fps_of_poly q) $ n =\n                    coeff r n +\n                    (\\<Sum>c | poly q' c = 0.\n                       poly (rs c) (of_nat n) * c ^ n);\n         \\<And>z.\n            poly q' z = 0 \\<Longrightarrow>\n            degree (rs z) \\<le> order z q' - 1\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "define ts where \"ts = snd (solve_factored_ratfps' p fctrs)\""], ["proof (state)\nthis:\n  ts = snd (solve_factored_ratfps' p fctrs)\n\ngoal (1 subgoal):\n 1. (\\<And>r rs.\n        \\<lbrakk>\\<And>n.\n                    (fps_of_poly p / fps_of_poly q) $ n =\n                    coeff r n +\n                    (\\<Sum>c | poly q' c = 0.\n                       poly (rs c) (of_nat n) * c ^ n);\n         \\<And>z.\n            poly q' z = 0 \\<Longrightarrow>\n            degree (rs z) \\<le> order z q' - 1\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "define rs where \"rs = the \\<circ> map_of (map (\\<lambda>(x,y). (y,x)) ts)\""], ["proof (state)\nthis:\n  rs = the \\<circ> map_of (map (\\<lambda>(x, y). (y, x)) ts)\n\ngoal (1 subgoal):\n 1. (\\<And>r rs.\n        \\<lbrakk>\\<And>n.\n                    (fps_of_poly p / fps_of_poly q) $ n =\n                    coeff r n +\n                    (\\<Sum>c | poly q' c = 0.\n                       poly (rs c) (of_nat n) * c ^ n);\n         \\<And>z.\n            poly q' z = 0 \\<Longrightarrow>\n            degree (rs z) \\<le> order z q' - 1\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from nz'"], ["proof (chain)\npicking this:\n  q \\<noteq> 0", "have \"q' \\<noteq> 0\""], ["proof (prove)\nusing this:\n  q \\<noteq> 0\n\ngoal (1 subgoal):\n 1. q' \\<noteq> 0", "by (simp add: q'_def)"], ["proof (state)\nthis:\n  q' \\<noteq> 0\n\ngoal (1 subgoal):\n 1. (\\<And>r rs.\n        \\<lbrakk>\\<And>n.\n                    (fps_of_poly p / fps_of_poly q) $ n =\n                    coeff r n +\n                    (\\<Sum>c | poly q' c = 0.\n                       poly (rs c) (of_nat n) * c ^ n);\n         \\<And>z.\n            poly q' z = 0 \\<Longrightarrow>\n            degree (rs z) \\<le> order z q' - 1\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "hence roots: \"{z. poly q' z = 0} = set (map fst (snd fctrs))\""], ["proof (prove)\nusing this:\n  q' \\<noteq> 0\n\ngoal (1 subgoal):\n 1. {z. poly q' z = 0} = set (map fst (snd fctrs))", "using is_factorization_of_roots [of \"fst fctrs\" \"snd fctrs\" q'] fctrs'"], ["proof (prove)\nusing this:\n  q' \\<noteq> 0\n  \\<lbrakk>is_factorization_of (fst fctrs, snd fctrs) q';\n   q' \\<noteq> 0\\<rbrakk>\n  \\<Longrightarrow> set (map fst (snd fctrs)) = {x. poly q' x = 0}\n  is_factorization_of fctrs q'\n\ngoal (1 subgoal):\n 1. {z. poly q' z = 0} = set (map fst (snd fctrs))", "by simp"], ["proof (state)\nthis:\n  {z. poly q' z = 0} = set (map fst (snd fctrs))\n\ngoal (1 subgoal):\n 1. (\\<And>r rs.\n        \\<lbrakk>\\<And>n.\n                    (fps_of_poly p / fps_of_poly q) $ n =\n                    coeff r n +\n                    (\\<Sum>c | poly q' c = 0.\n                       poly (rs c) (of_nat n) * c ^ n);\n         \\<And>z.\n            poly q' z = 0 \\<Longrightarrow>\n            degree (rs z) \\<le> order z q' - 1\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have rs: \"rs c = r\" if \"(r, c) \\<in> set ts\" for c r"], ["proof (prove)\ngoal (1 subgoal):\n 1. rs c = r", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. rs c = r", "have \"map_of (map (\\<lambda>(x,y). (y, x)) (snd (solve_factored_ratfps' p fctrs))) c = Some r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map_of\n     (map (\\<lambda>(x, y). (y, x)) (snd (solve_factored_ratfps' p fctrs)))\n     c =\n    Some r", "using that fctrs"], ["proof (prove)\nusing this:\n  (r, c) \\<in> set ts\n  is_alt_factorization_of fctrs q\n\ngoal (1 subgoal):\n 1. map_of\n     (map (\\<lambda>(x, y). (y, x)) (snd (solve_factored_ratfps' p fctrs)))\n     c =\n    Some r", "by (intro map_of_is_SomeI)\n         (force simp: o_def case_prod_unfold solve_factored_ratfps'_def ts_def\n                      solve_factored_ratfps_roots is_alt_factorization_of_def)+"], ["proof (state)\nthis:\n  map_of\n   (map (\\<lambda>(x, y). (y, x)) (snd (solve_factored_ratfps' p fctrs)))\n   c =\n  Some r\n\ngoal (1 subgoal):\n 1. rs c = r", "thus ?thesis"], ["proof (prove)\nusing this:\n  map_of\n   (map (\\<lambda>(x, y). (y, x)) (snd (solve_factored_ratfps' p fctrs)))\n   c =\n  Some r\n\ngoal (1 subgoal):\n 1. rs c = r", "by (simp add: rs_def ts_def)"], ["proof (state)\nthis:\n  rs c = r\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (?r, ?c) \\<in> set ts \\<Longrightarrow> rs ?c = ?r\n\ngoal (1 subgoal):\n 1. (\\<And>r rs.\n        \\<lbrakk>\\<And>n.\n                    (fps_of_poly p / fps_of_poly q) $ n =\n                    coeff r n +\n                    (\\<Sum>c | poly q' c = 0.\n                       poly (rs c) (of_nat n) * c ^ n);\n         \\<And>z.\n            poly q' z = 0 \\<Longrightarrow>\n            degree (rs z) \\<le> order z q' - 1\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have [simp]: \"length ts = length (snd fctrs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length ts = length (snd fctrs)", "by (auto simp: ts_def solve_factored_ratfps'_def case_prod_unfold solve_factored_ratfps_def)"], ["proof (state)\nthis:\n  length ts = length (snd fctrs)\n\ngoal (1 subgoal):\n 1. (\\<And>r rs.\n        \\<lbrakk>\\<And>n.\n                    (fps_of_poly p / fps_of_poly q) $ n =\n                    coeff r n +\n                    (\\<Sum>c | poly q' c = 0.\n                       poly (rs c) (of_nat n) * c ^ n);\n         \\<And>z.\n            poly q' z = 0 \\<Longrightarrow>\n            degree (rs z) \\<le> order z q' - 1\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "{"], ["proof (state)\nthis:\n  length ts = length (snd fctrs)\n\ngoal (1 subgoal):\n 1. (\\<And>r rs.\n        \\<lbrakk>\\<And>n.\n                    (fps_of_poly p / fps_of_poly q) $ n =\n                    coeff r n +\n                    (\\<Sum>c | poly q' c = 0.\n                       poly (rs c) (of_nat n) * c ^ n);\n         \\<And>z.\n            poly q' z = 0 \\<Longrightarrow>\n            degree (rs z) \\<le> order z q' - 1\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "fix n :: nat"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>r rs.\n        \\<lbrakk>\\<And>n.\n                    (fps_of_poly p / fps_of_poly q) $ n =\n                    coeff r n +\n                    (\\<Sum>c | poly q' c = 0.\n                       poly (rs c) (of_nat n) * c ^ n);\n         \\<And>z.\n            poly q' z = 0 \\<Longrightarrow>\n            degree (rs z) \\<le> order z q' - 1\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \"fps_of_poly p / fps_of_poly q =\n            Abs_fps (interp_ratfps_solution (solve_factored_ratfps' p fctrs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fps_of_poly p / fps_of_poly q =\n    Abs_fps (interp_ratfps_solution (solve_factored_ratfps' p fctrs))", "using solve_factored_ratfps' [OF fctrs nz']"], ["proof (prove)\nusing this:\n  Abs_fps (interp_ratfps_solution (solve_factored_ratfps' ?p fctrs)) =\n  fps_of_poly ?p / fps_of_poly q\n\ngoal (1 subgoal):\n 1. fps_of_poly p / fps_of_poly q =\n    Abs_fps (interp_ratfps_solution (solve_factored_ratfps' p fctrs))", ".."], ["proof (state)\nthis:\n  fps_of_poly p / fps_of_poly q =\n  Abs_fps (interp_ratfps_solution (solve_factored_ratfps' p fctrs))\n\ngoal (1 subgoal):\n 1. (\\<And>r rs.\n        \\<lbrakk>\\<And>n.\n                    (fps_of_poly p / fps_of_poly q) $ n =\n                    coeff r n +\n                    (\\<Sum>c | poly q' c = 0.\n                       poly (rs c) (of_nat n) * c ^ n);\n         \\<And>z.\n            poly q' z = 0 \\<Longrightarrow>\n            degree (rs z) \\<le> order z q' - 1\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "also"], ["proof (state)\nthis:\n  fps_of_poly p / fps_of_poly q =\n  Abs_fps (interp_ratfps_solution (solve_factored_ratfps' p fctrs))\n\ngoal (1 subgoal):\n 1. (\\<And>r rs.\n        \\<lbrakk>\\<And>n.\n                    (fps_of_poly p / fps_of_poly q) $ n =\n                    coeff r n +\n                    (\\<Sum>c | poly q' c = 0.\n                       poly (rs c) (of_nat n) * c ^ n);\n         \\<And>z.\n            poly q' z = 0 \\<Longrightarrow>\n            degree (rs z) \\<le> order z q' - 1\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \"fps_nth \\<dots> n = interp_ratfps_solution (solve_factored_ratfps' p fctrs) n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Abs_fps (interp_ratfps_solution (solve_factored_ratfps' p fctrs)) $ n =\n    interp_ratfps_solution (solve_factored_ratfps' p fctrs) n", "by simp"], ["proof (state)\nthis:\n  Abs_fps (interp_ratfps_solution (solve_factored_ratfps' p fctrs)) $ n =\n  interp_ratfps_solution (solve_factored_ratfps' p fctrs) n\n\ngoal (1 subgoal):\n 1. (\\<And>r rs.\n        \\<lbrakk>\\<And>n.\n                    (fps_of_poly p / fps_of_poly q) $ n =\n                    coeff r n +\n                    (\\<Sum>c | poly q' c = 0.\n                       poly (rs c) (of_nat n) * c ^ n);\n         \\<And>z.\n            poly q' z = 0 \\<Longrightarrow>\n            degree (rs z) \\<le> order z q' - 1\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "also"], ["proof (state)\nthis:\n  Abs_fps (interp_ratfps_solution (solve_factored_ratfps' p fctrs)) $ n =\n  interp_ratfps_solution (solve_factored_ratfps' p fctrs) n\n\ngoal (1 subgoal):\n 1. (\\<And>r rs.\n        \\<lbrakk>\\<And>n.\n                    (fps_of_poly p / fps_of_poly q) $ n =\n                    coeff r n +\n                    (\\<Sum>c | poly q' c = 0.\n                       poly (rs c) (of_nat n) * c ^ n);\n         \\<And>z.\n            poly q' z = 0 \\<Longrightarrow>\n            degree (rs z) \\<le> order z q' - 1\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \"\\<dots> = coeff r n + (\\<Sum>p\\<leftarrow>snd (solve_factored_ratfps' p fctrs).\n                                   poly (fst p) (of_nat n) * snd p ^ n)\" (is \"_ = _ + ?A\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. interp_ratfps_solution (solve_factored_ratfps' p fctrs) n =\n    coeff r n +\n    (\\<Sum>p\\<leftarrow>snd (solve_factored_ratfps' p\n                              fctrs). poly (fst p) (of_nat n) * snd p ^ n)", "unfolding interp_ratfps_solution_def case_prod_unfold r_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. coeff (fst (solve_factored_ratfps' p fctrs)) n +\n    (\\<Sum>p\\<leftarrow>snd (solve_factored_ratfps' p\n                              fctrs). poly (fst p) (of_nat n) * snd p ^ n) =\n    coeff (fst (solve_factored_ratfps' p fctrs)) n +\n    (\\<Sum>p\\<leftarrow>snd (solve_factored_ratfps' p\n                              fctrs). poly (fst p) (of_nat n) * snd p ^ n)", "by simp"], ["proof (state)\nthis:\n  interp_ratfps_solution (solve_factored_ratfps' p fctrs) n =\n  coeff r n +\n  (\\<Sum>p\\<leftarrow>snd (solve_factored_ratfps' p\n                            fctrs). poly (fst p) (of_nat n) * snd p ^ n)\n\ngoal (1 subgoal):\n 1. (\\<And>r rs.\n        \\<lbrakk>\\<And>n.\n                    (fps_of_poly p / fps_of_poly q) $ n =\n                    coeff r n +\n                    (\\<Sum>c | poly q' c = 0.\n                       poly (rs c) (of_nat n) * c ^ n);\n         \\<And>z.\n            poly q' z = 0 \\<Longrightarrow>\n            degree (rs z) \\<le> order z q' - 1\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "also"], ["proof (state)\nthis:\n  interp_ratfps_solution (solve_factored_ratfps' p fctrs) n =\n  coeff r n +\n  (\\<Sum>p\\<leftarrow>snd (solve_factored_ratfps' p\n                            fctrs). poly (fst p) (of_nat n) * snd p ^ n)\n\ngoal (1 subgoal):\n 1. (\\<And>r rs.\n        \\<lbrakk>\\<And>n.\n                    (fps_of_poly p / fps_of_poly q) $ n =\n                    coeff r n +\n                    (\\<Sum>c | poly q' c = 0.\n                       poly (rs c) (of_nat n) * c ^ n);\n         \\<And>z.\n            poly q' z = 0 \\<Longrightarrow>\n            degree (rs z) \\<le> order z q' - 1\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \"?A = (\\<Sum>p\\<leftarrow>ts. poly (rs (snd p)) (of_nat n) * snd p ^ n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>p\\<leftarrow>snd (solve_factored_ratfps' p\n                              fctrs). poly (fst p) (of_nat n) * snd p ^ n) =\n    (\\<Sum>p\\<leftarrow>ts. poly (rs (snd p)) (of_nat n) * snd p ^ n)", "by (intro arg_cong[OF map_cong] refl) (auto simp: rs ts_def)"], ["proof (state)\nthis:\n  (\\<Sum>p\\<leftarrow>snd (solve_factored_ratfps' p\n                            fctrs). poly (fst p) (of_nat n) * snd p ^ n) =\n  (\\<Sum>p\\<leftarrow>ts. poly (rs (snd p)) (of_nat n) * snd p ^ n)\n\ngoal (1 subgoal):\n 1. (\\<And>r rs.\n        \\<lbrakk>\\<And>n.\n                    (fps_of_poly p / fps_of_poly q) $ n =\n                    coeff r n +\n                    (\\<Sum>c | poly q' c = 0.\n                       poly (rs c) (of_nat n) * c ^ n);\n         \\<And>z.\n            poly q' z = 0 \\<Longrightarrow>\n            degree (rs z) \\<le> order z q' - 1\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "also"], ["proof (state)\nthis:\n  (\\<Sum>p\\<leftarrow>snd (solve_factored_ratfps' p\n                            fctrs). poly (fst p) (of_nat n) * snd p ^ n) =\n  (\\<Sum>p\\<leftarrow>ts. poly (rs (snd p)) (of_nat n) * snd p ^ n)\n\ngoal (1 subgoal):\n 1. (\\<And>r rs.\n        \\<lbrakk>\\<And>n.\n                    (fps_of_poly p / fps_of_poly q) $ n =\n                    coeff r n +\n                    (\\<Sum>c | poly q' c = 0.\n                       poly (rs c) (of_nat n) * c ^ n);\n         \\<And>z.\n            poly q' z = 0 \\<Longrightarrow>\n            degree (rs z) \\<le> order z q' - 1\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \"\\<dots> = (\\<Sum>c\\<leftarrow>map snd ts.\n                       poly (rs c) (of_nat n) * c ^ n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>p\\<leftarrow>ts. poly (rs (snd p)) (of_nat n) * snd p ^ n) =\n    (\\<Sum>c\\<leftarrow>map snd ts. poly (rs c) (of_nat n) * c ^ n)", "by (simp add: o_def)"], ["proof (state)\nthis:\n  (\\<Sum>p\\<leftarrow>ts. poly (rs (snd p)) (of_nat n) * snd p ^ n) =\n  (\\<Sum>c\\<leftarrow>map snd ts. poly (rs c) (of_nat n) * c ^ n)\n\ngoal (1 subgoal):\n 1. (\\<And>r rs.\n        \\<lbrakk>\\<And>n.\n                    (fps_of_poly p / fps_of_poly q) $ n =\n                    coeff r n +\n                    (\\<Sum>c | poly q' c = 0.\n                       poly (rs c) (of_nat n) * c ^ n);\n         \\<And>z.\n            poly q' z = 0 \\<Longrightarrow>\n            degree (rs z) \\<le> order z q' - 1\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "also"], ["proof (state)\nthis:\n  (\\<Sum>p\\<leftarrow>ts. poly (rs (snd p)) (of_nat n) * snd p ^ n) =\n  (\\<Sum>c\\<leftarrow>map snd ts. poly (rs c) (of_nat n) * c ^ n)\n\ngoal (1 subgoal):\n 1. (\\<And>r rs.\n        \\<lbrakk>\\<And>n.\n                    (fps_of_poly p / fps_of_poly q) $ n =\n                    coeff r n +\n                    (\\<Sum>c | poly q' c = 0.\n                       poly (rs c) (of_nat n) * c ^ n);\n         \\<And>z.\n            poly q' z = 0 \\<Longrightarrow>\n            degree (rs z) \\<le> order z q' - 1\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \"map snd ts = map fst (snd fctrs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map snd ts = map fst (snd fctrs)", "unfolding solve_factored_ratfps'_def case_prod_unfold ts_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. map snd\n     (snd (solve_factored_ratfps (smult (inverse (fst fctrs)) p)\n            (snd fctrs))) =\n    map fst (snd fctrs)", "by (rule solve_factored_ratfps_roots)"], ["proof (state)\nthis:\n  map snd ts = map fst (snd fctrs)\n\ngoal (1 subgoal):\n 1. (\\<And>r rs.\n        \\<lbrakk>\\<And>n.\n                    (fps_of_poly p / fps_of_poly q) $ n =\n                    coeff r n +\n                    (\\<Sum>c | poly q' c = 0.\n                       poly (rs c) (of_nat n) * c ^ n);\n         \\<And>z.\n            poly q' z = 0 \\<Longrightarrow>\n            degree (rs z) \\<le> order z q' - 1\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "also"], ["proof (state)\nthis:\n  map snd ts = map fst (snd fctrs)\n\ngoal (1 subgoal):\n 1. (\\<And>r rs.\n        \\<lbrakk>\\<And>n.\n                    (fps_of_poly p / fps_of_poly q) $ n =\n                    coeff r n +\n                    (\\<Sum>c | poly q' c = 0.\n                       poly (rs c) (of_nat n) * c ^ n);\n         \\<And>z.\n            poly q' z = 0 \\<Longrightarrow>\n            degree (rs z) \\<le> order z q' - 1\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \"(\\<Sum>c\\<leftarrow>\\<dots>. poly (rs c) (of_nat n) * c ^ n) =\n                 (\\<Sum>c | poly q' c = 0. poly (rs c) (of_nat n) * c ^ n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>c\\<leftarrow>map fst\n                         (snd fctrs). poly (rs c) (of_nat n) * c ^ n) =\n    (\\<Sum>c | poly q' c = 0. poly (rs c) (of_nat n) * c ^ n)", "unfolding roots"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>c\\<leftarrow>map fst\n                         (snd fctrs). poly (rs c) (of_nat n) * c ^ n) =\n    (\\<Sum>c\\<in>set (map fst (snd fctrs)). poly (rs c) (of_nat n) * c ^ n)", "using fctrs"], ["proof (prove)\nusing this:\n  is_alt_factorization_of fctrs q\n\ngoal (1 subgoal):\n 1. (\\<Sum>c\\<leftarrow>map fst\n                         (snd fctrs). poly (rs c) (of_nat n) * c ^ n) =\n    (\\<Sum>c\\<in>set (map fst (snd fctrs)). poly (rs c) (of_nat n) * c ^ n)", "by (intro sum_list_distinct_conv_sum_set) (auto simp: is_alt_factorization_of_def)"], ["proof (state)\nthis:\n  (\\<Sum>c\\<leftarrow>map fst (snd fctrs). poly (rs c) (of_nat n) * c ^ n) =\n  (\\<Sum>c | poly q' c = 0. poly (rs c) (of_nat n) * c ^ n)\n\ngoal (1 subgoal):\n 1. (\\<And>r rs.\n        \\<lbrakk>\\<And>n.\n                    (fps_of_poly p / fps_of_poly q) $ n =\n                    coeff r n +\n                    (\\<Sum>c | poly q' c = 0.\n                       poly (rs c) (of_nat n) * c ^ n);\n         \\<And>z.\n            poly q' z = 0 \\<Longrightarrow>\n            degree (rs z) \\<le> order z q' - 1\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "finally"], ["proof (chain)\npicking this:\n  (fps_of_poly p / fps_of_poly q) $ n =\n  coeff r n + (\\<Sum>c | poly q' c = 0. poly (rs c) (of_nat n) * c ^ n)", "have \"fps_nth (fps_of_poly p / fps_of_poly q) n =\n                    coeff r n + (\\<Sum>c\\<in>{z. poly q' z = 0}. poly (rs c) (of_nat n) * c ^ n)\""], ["proof (prove)\nusing this:\n  (fps_of_poly p / fps_of_poly q) $ n =\n  coeff r n + (\\<Sum>c | poly q' c = 0. poly (rs c) (of_nat n) * c ^ n)\n\ngoal (1 subgoal):\n 1. (fps_of_poly p / fps_of_poly q) $ n =\n    coeff r n +\n    (\\<Sum>c\\<in>{z. poly q' z = 0}. poly (rs c) (of_nat n) * c ^ n)", "."], ["proof (state)\nthis:\n  (fps_of_poly p / fps_of_poly q) $ n =\n  coeff r n +\n  (\\<Sum>c\\<in>{z. poly q' z = 0}. poly (rs c) (of_nat n) * c ^ n)\n\ngoal (1 subgoal):\n 1. (\\<And>r rs.\n        \\<lbrakk>\\<And>n.\n                    (fps_of_poly p / fps_of_poly q) $ n =\n                    coeff r n +\n                    (\\<Sum>c | poly q' c = 0.\n                       poly (rs c) (of_nat n) * c ^ n);\n         \\<And>z.\n            poly q' z = 0 \\<Longrightarrow>\n            degree (rs z) \\<le> order z q' - 1\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "}"], ["proof (state)\nthis:\n  (fps_of_poly p / fps_of_poly q) $ ?n2 =\n  coeff r ?n2 +\n  (\\<Sum>c\\<in>{z. poly q' z = 0}. poly (rs c) (of_nat ?n2) * c ^ ?n2)\n\ngoal (1 subgoal):\n 1. (\\<And>r rs.\n        \\<lbrakk>\\<And>n.\n                    (fps_of_poly p / fps_of_poly q) $ n =\n                    coeff r n +\n                    (\\<Sum>c | poly q' c = 0.\n                       poly (rs c) (of_nat n) * c ^ n);\n         \\<And>z.\n            poly q' z = 0 \\<Longrightarrow>\n            degree (rs z) \\<le> order z q' - 1\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "moreover"], ["proof (state)\nthis:\n  (fps_of_poly p / fps_of_poly q) $ ?n2 =\n  coeff r ?n2 +\n  (\\<Sum>c\\<in>{z. poly q' z = 0}. poly (rs c) (of_nat ?n2) * c ^ ?n2)\n\ngoal (1 subgoal):\n 1. (\\<And>r rs.\n        \\<lbrakk>\\<And>n.\n                    (fps_of_poly p / fps_of_poly q) $ n =\n                    coeff r n +\n                    (\\<Sum>c | poly q' c = 0.\n                       poly (rs c) (of_nat n) * c ^ n);\n         \\<And>z.\n            poly q' z = 0 \\<Longrightarrow>\n            degree (rs z) \\<le> order z q' - 1\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "{"], ["proof (state)\nthis:\n  (fps_of_poly p / fps_of_poly q) $ ?n2 =\n  coeff r ?n2 +\n  (\\<Sum>c\\<in>{z. poly q' z = 0}. poly (rs c) (of_nat ?n2) * c ^ ?n2)\n\ngoal (1 subgoal):\n 1. (\\<And>r rs.\n        \\<lbrakk>\\<And>n.\n                    (fps_of_poly p / fps_of_poly q) $ n =\n                    coeff r n +\n                    (\\<Sum>c | poly q' c = 0.\n                       poly (rs c) (of_nat n) * c ^ n);\n         \\<And>z.\n            poly q' z = 0 \\<Longrightarrow>\n            degree (rs z) \\<le> order z q' - 1\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "fix z"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>r rs.\n        \\<lbrakk>\\<And>n.\n                    (fps_of_poly p / fps_of_poly q) $ n =\n                    coeff r n +\n                    (\\<Sum>c | poly q' c = 0.\n                       poly (rs c) (of_nat n) * c ^ n);\n         \\<And>z.\n            poly q' z = 0 \\<Longrightarrow>\n            degree (rs z) \\<le> order z q' - 1\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "assume \"poly q' z = 0\""], ["proof (state)\nthis:\n  poly q' z = 0\n\ngoal (1 subgoal):\n 1. (\\<And>r rs.\n        \\<lbrakk>\\<And>n.\n                    (fps_of_poly p / fps_of_poly q) $ n =\n                    coeff r n +\n                    (\\<Sum>c | poly q' c = 0.\n                       poly (rs c) (of_nat n) * c ^ n);\n         \\<And>z.\n            poly q' z = 0 \\<Longrightarrow>\n            degree (rs z) \\<le> order z q' - 1\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "hence \"z \\<in> set (map fst (snd fctrs))\""], ["proof (prove)\nusing this:\n  poly q' z = 0\n\ngoal (1 subgoal):\n 1. z \\<in> set (map fst (snd fctrs))", "using roots"], ["proof (prove)\nusing this:\n  poly q' z = 0\n  {z. poly q' z = 0} = set (map fst (snd fctrs))\n\ngoal (1 subgoal):\n 1. z \\<in> set (map fst (snd fctrs))", "by blast"], ["proof (state)\nthis:\n  z \\<in> set (map fst (snd fctrs))\n\ngoal (1 subgoal):\n 1. (\\<And>r rs.\n        \\<lbrakk>\\<And>n.\n                    (fps_of_poly p / fps_of_poly q) $ n =\n                    coeff r n +\n                    (\\<Sum>c | poly q' c = 0.\n                       poly (rs c) (of_nat n) * c ^ n);\n         \\<And>z.\n            poly q' z = 0 \\<Longrightarrow>\n            degree (rs z) \\<le> order z q' - 1\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "then"], ["proof (chain)\npicking this:\n  z \\<in> set (map fst (snd fctrs))", "obtain i where i: \"i < length (snd fctrs)\" and [simp]: \"z = fst (snd fctrs ! i)\""], ["proof (prove)\nusing this:\n  z \\<in> set (map fst (snd fctrs))\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        \\<lbrakk>i < length (snd fctrs); z = fst (snd fctrs ! i)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: set_conv_nth)"], ["proof (state)\nthis:\n  i < length (snd fctrs)\n  z = fst (snd fctrs ! i)\n\ngoal (1 subgoal):\n 1. (\\<And>r rs.\n        \\<lbrakk>\\<And>n.\n                    (fps_of_poly p / fps_of_poly q) $ n =\n                    coeff r n +\n                    (\\<Sum>c | poly q' c = 0.\n                       poly (rs c) (of_nat n) * c ^ n);\n         \\<And>z.\n            poly q' z = 0 \\<Longrightarrow>\n            degree (rs z) \\<le> order z q' - 1\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from i"], ["proof (chain)\npicking this:\n  i < length (snd fctrs)", "have \"(fst (ts ! i), snd (ts ! i)) \\<in> set ts\""], ["proof (prove)\nusing this:\n  i < length (snd fctrs)\n\ngoal (1 subgoal):\n 1. (fst (ts ! i), snd (ts ! i)) \\<in> set ts", "by (auto simp: set_conv_nth)"], ["proof (state)\nthis:\n  (fst (ts ! i), snd (ts ! i)) \\<in> set ts\n\ngoal (1 subgoal):\n 1. (\\<And>r rs.\n        \\<lbrakk>\\<And>n.\n                    (fps_of_poly p / fps_of_poly q) $ n =\n                    coeff r n +\n                    (\\<Sum>c | poly q' c = 0.\n                       poly (rs c) (of_nat n) * c ^ n);\n         \\<And>z.\n            poly q' z = 0 \\<Longrightarrow>\n            degree (rs z) \\<le> order z q' - 1\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "also"], ["proof (state)\nthis:\n  (fst (ts ! i), snd (ts ! i)) \\<in> set ts\n\ngoal (1 subgoal):\n 1. (\\<And>r rs.\n        \\<lbrakk>\\<And>n.\n                    (fps_of_poly p / fps_of_poly q) $ n =\n                    coeff r n +\n                    (\\<Sum>c | poly q' c = 0.\n                       poly (rs c) (of_nat n) * c ^ n);\n         \\<And>z.\n            poly q' z = 0 \\<Longrightarrow>\n            degree (rs z) \\<le> order z q' - 1\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from i"], ["proof (chain)\npicking this:\n  i < length (snd fctrs)", "have \"snd (ts ! i) = z\""], ["proof (prove)\nusing this:\n  i < length (snd fctrs)\n\ngoal (1 subgoal):\n 1. snd (ts ! i) = z", "by (simp add: ts_def solve_factored_ratfps'_def case_prod_unfold solve_factored_ratfps_def)"], ["proof (state)\nthis:\n  snd (ts ! i) = z\n\ngoal (1 subgoal):\n 1. (\\<And>r rs.\n        \\<lbrakk>\\<And>n.\n                    (fps_of_poly p / fps_of_poly q) $ n =\n                    coeff r n +\n                    (\\<Sum>c | poly q' c = 0.\n                       poly (rs c) (of_nat n) * c ^ n);\n         \\<And>z.\n            poly q' z = 0 \\<Longrightarrow>\n            degree (rs z) \\<le> order z q' - 1\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "finally"], ["proof (chain)\npicking this:\n  (fst (ts ! i), z) \\<in> set ts", "have \"rs z = fst (ts ! i)\""], ["proof (prove)\nusing this:\n  (fst (ts ! i), z) \\<in> set ts\n\ngoal (1 subgoal):\n 1. rs z = fst (ts ! i)", "by (intro rs) auto"], ["proof (state)\nthis:\n  rs z = fst (ts ! i)\n\ngoal (1 subgoal):\n 1. (\\<And>r rs.\n        \\<lbrakk>\\<And>n.\n                    (fps_of_poly p / fps_of_poly q) $ n =\n                    coeff r n +\n                    (\\<Sum>c | poly q' c = 0.\n                       poly (rs c) (of_nat n) * c ^ n);\n         \\<And>z.\n            poly q' z = 0 \\<Longrightarrow>\n            degree (rs z) \\<le> order z q' - 1\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "also"], ["proof (state)\nthis:\n  rs z = fst (ts ! i)\n\ngoal (1 subgoal):\n 1. (\\<And>r rs.\n        \\<lbrakk>\\<And>n.\n                    (fps_of_poly p / fps_of_poly q) $ n =\n                    coeff r n +\n                    (\\<Sum>c | poly q' c = 0.\n                       poly (rs c) (of_nat n) * c ^ n);\n         \\<And>z.\n            poly q' z = 0 \\<Longrightarrow>\n            degree (rs z) \\<le> order z q' - 1\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \"\\<dots> = (\\<Sum>p\\<leftarrow>zip (snd (poly_pfd_simple (smult (inverse (fst fctrs)) p) (snd fctrs)) ! i)\n                       [0..<Suc (snd (snd fctrs ! i))].\n                         inverse_irred_power_poly (fst p) (Suc (snd (snd fctrs ! i)) - snd p))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (ts ! i) =\n    (\\<Sum>p\\<leftarrow>zip (snd (poly_pfd_simple\n                                   (smult (inverse (fst fctrs)) p)\n                                   (snd fctrs)) !\n                             i)\n                         [0..<\n                          Suc (snd (snd fctrs !\n                                    i))]. inverse_irred_power_poly (fst p)\n     (Suc (snd (snd fctrs ! i)) - snd p))", "using i"], ["proof (prove)\nusing this:\n  i < length (snd fctrs)\n\ngoal (1 subgoal):\n 1. fst (ts ! i) =\n    (\\<Sum>p\\<leftarrow>zip (snd (poly_pfd_simple\n                                   (smult (inverse (fst fctrs)) p)\n                                   (snd fctrs)) !\n                             i)\n                         [0..<\n                          Suc (snd (snd fctrs !\n                                    i))]. inverse_irred_power_poly (fst p)\n     (Suc (snd (snd fctrs ! i)) - snd p))", "by (auto simp: ts_def solve_factored_ratfps'_def solve_factored_ratfps_def o_def\n                     case_prod_unfold Let_def simp del: upt_Suc power_Suc)"], ["proof (state)\nthis:\n  fst (ts ! i) =\n  (\\<Sum>p\\<leftarrow>zip (snd (poly_pfd_simple\n                                 (smult (inverse (fst fctrs)) p)\n                                 (snd fctrs)) !\n                           i)\n                       [0..<\n                        Suc (snd (snd fctrs !\n                                  i))]. inverse_irred_power_poly (fst p)\n   (Suc (snd (snd fctrs ! i)) - snd p))\n\ngoal (1 subgoal):\n 1. (\\<And>r rs.\n        \\<lbrakk>\\<And>n.\n                    (fps_of_poly p / fps_of_poly q) $ n =\n                    coeff r n +\n                    (\\<Sum>c | poly q' c = 0.\n                       poly (rs c) (of_nat n) * c ^ n);\n         \\<And>z.\n            poly q' z = 0 \\<Longrightarrow>\n            degree (rs z) \\<le> order z q' - 1\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "also"], ["proof (state)\nthis:\n  fst (ts ! i) =\n  (\\<Sum>p\\<leftarrow>zip (snd (poly_pfd_simple\n                                 (smult (inverse (fst fctrs)) p)\n                                 (snd fctrs)) !\n                           i)\n                       [0..<\n                        Suc (snd (snd fctrs !\n                                  i))]. inverse_irred_power_poly (fst p)\n   (Suc (snd (snd fctrs ! i)) - snd p))\n\ngoal (1 subgoal):\n 1. (\\<And>r rs.\n        \\<lbrakk>\\<And>n.\n                    (fps_of_poly p / fps_of_poly q) $ n =\n                    coeff r n +\n                    (\\<Sum>c | poly q' c = 0.\n                       poly (rs c) (of_nat n) * c ^ n);\n         \\<And>z.\n            poly q' z = 0 \\<Longrightarrow>\n            degree (rs z) \\<le> order z q' - 1\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \"degree \\<dots> \\<le> snd (snd fctrs ! i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. degree\n     (\\<Sum>p\\<leftarrow>zip (snd (poly_pfd_simple\n                                    (smult (inverse (fst fctrs)) p)\n                                    (snd fctrs)) !\n                              i)\n                          [0..<\n                           Suc (snd (snd fctrs !\n                                     i))]. inverse_irred_power_poly (fst p)\n      (Suc (snd (snd fctrs ! i)) - snd p))\n    \\<le> snd (snd fctrs ! i)", "by (intro degree_sum_list_le)\n         (auto intro!: order.trans [OF degree_inverse_irred_power_poly_le])"], ["proof (state)\nthis:\n  degree\n   (\\<Sum>p\\<leftarrow>zip (snd (poly_pfd_simple\n                                  (smult (inverse (fst fctrs)) p)\n                                  (snd fctrs)) !\n                            i)\n                        [0..<\n                         Suc (snd (snd fctrs !\n                                   i))]. inverse_irred_power_poly (fst p)\n    (Suc (snd (snd fctrs ! i)) - snd p))\n  \\<le> snd (snd fctrs ! i)\n\ngoal (1 subgoal):\n 1. (\\<And>r rs.\n        \\<lbrakk>\\<And>n.\n                    (fps_of_poly p / fps_of_poly q) $ n =\n                    coeff r n +\n                    (\\<Sum>c | poly q' c = 0.\n                       poly (rs c) (of_nat n) * c ^ n);\n         \\<And>z.\n            poly q' z = 0 \\<Longrightarrow>\n            degree (rs z) \\<le> order z q' - 1\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "also"], ["proof (state)\nthis:\n  degree\n   (\\<Sum>p\\<leftarrow>zip (snd (poly_pfd_simple\n                                  (smult (inverse (fst fctrs)) p)\n                                  (snd fctrs)) !\n                            i)\n                        [0..<\n                         Suc (snd (snd fctrs !\n                                   i))]. inverse_irred_power_poly (fst p)\n    (Suc (snd (snd fctrs ! i)) - snd p))\n  \\<le> snd (snd fctrs ! i)\n\ngoal (1 subgoal):\n 1. (\\<And>r rs.\n        \\<lbrakk>\\<And>n.\n                    (fps_of_poly p / fps_of_poly q) $ n =\n                    coeff r n +\n                    (\\<Sum>c | poly q' c = 0.\n                       poly (rs c) (of_nat n) * c ^ n);\n         \\<And>z.\n            poly q' z = 0 \\<Longrightarrow>\n            degree (rs z) \\<le> order z q' - 1\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \"order z q' = Suc \\<dots>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. order z q' = Suc (snd (snd fctrs ! i))", "using nz' fctrs' i"], ["proof (prove)\nusing this:\n  q \\<noteq> 0\n  is_factorization_of fctrs q'\n  i < length (snd fctrs)\n\ngoal (1 subgoal):\n 1. order z q' = Suc (snd (snd fctrs ! i))", "by (intro is_factorization_of_order[of q' \"fst fctrs\" \"snd fctrs\"]) (auto simp: q'_def)"], ["proof (state)\nthis:\n  order z q' = Suc (snd (snd fctrs ! i))\n\ngoal (1 subgoal):\n 1. (\\<And>r rs.\n        \\<lbrakk>\\<And>n.\n                    (fps_of_poly p / fps_of_poly q) $ n =\n                    coeff r n +\n                    (\\<Sum>c | poly q' c = 0.\n                       poly (rs c) (of_nat n) * c ^ n);\n         \\<And>z.\n            poly q' z = 0 \\<Longrightarrow>\n            degree (rs z) \\<le> order z q' - 1\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "hence \"snd (snd fctrs ! i) = order z q' - 1\""], ["proof (prove)\nusing this:\n  order z q' = Suc (snd (snd fctrs ! i))\n\ngoal (1 subgoal):\n 1. snd (snd fctrs ! i) = order z q' - 1", "by simp"], ["proof (state)\nthis:\n  snd (snd fctrs ! i) = order z q' - 1\n\ngoal (1 subgoal):\n 1. (\\<And>r rs.\n        \\<lbrakk>\\<And>n.\n                    (fps_of_poly p / fps_of_poly q) $ n =\n                    coeff r n +\n                    (\\<Sum>c | poly q' c = 0.\n                       poly (rs c) (of_nat n) * c ^ n);\n         \\<And>z.\n            poly q' z = 0 \\<Longrightarrow>\n            degree (rs z) \\<le> order z q' - 1\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "finally"], ["proof (chain)\npicking this:\n  degree (rs z) \\<le> order z q' - 1", "have \"degree (rs z) \\<le> \\<dots>\""], ["proof (prove)\nusing this:\n  degree (rs z) \\<le> order z q' - 1\n\ngoal (1 subgoal):\n 1. degree (rs z) \\<le> order z q' - 1", "."], ["proof (state)\nthis:\n  degree (rs z) \\<le> order z q' - 1\n\ngoal (1 subgoal):\n 1. (\\<And>r rs.\n        \\<lbrakk>\\<And>n.\n                    (fps_of_poly p / fps_of_poly q) $ n =\n                    coeff r n +\n                    (\\<Sum>c | poly q' c = 0.\n                       poly (rs c) (of_nat n) * c ^ n);\n         \\<And>z.\n            poly q' z = 0 \\<Longrightarrow>\n            degree (rs z) \\<le> order z q' - 1\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "}"], ["proof (state)\nthis:\n  poly q' ?z2 = 0 \\<Longrightarrow> degree (rs ?z2) \\<le> order ?z2 q' - 1\n\ngoal (1 subgoal):\n 1. (\\<And>r rs.\n        \\<lbrakk>\\<And>n.\n                    (fps_of_poly p / fps_of_poly q) $ n =\n                    coeff r n +\n                    (\\<Sum>c | poly q' c = 0.\n                       poly (rs c) (of_nat n) * c ^ n);\n         \\<And>z.\n            poly q' z = 0 \\<Longrightarrow>\n            degree (rs z) \\<le> order z q' - 1\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "ultimately"], ["proof (chain)\npicking this:\n  (fps_of_poly p / fps_of_poly q) $ ?n2 =\n  coeff r ?n2 +\n  (\\<Sum>c\\<in>{z. poly q' z = 0}. poly (rs c) (of_nat ?n2) * c ^ ?n2)\n  poly q' ?z2 = 0 \\<Longrightarrow> degree (rs ?z2) \\<le> order ?z2 q' - 1", "show ?thesis"], ["proof (prove)\nusing this:\n  (fps_of_poly p / fps_of_poly q) $ ?n2 =\n  coeff r ?n2 +\n  (\\<Sum>c\\<in>{z. poly q' z = 0}. poly (rs c) (of_nat ?n2) * c ^ ?n2)\n  poly q' ?z2 = 0 \\<Longrightarrow> degree (rs ?z2) \\<le> order ?z2 q' - 1\n\ngoal (1 subgoal):\n 1. thesis", "using that[of r rs]"], ["proof (prove)\nusing this:\n  (fps_of_poly p / fps_of_poly q) $ ?n2 =\n  coeff r ?n2 +\n  (\\<Sum>c\\<in>{z. poly q' z = 0}. poly (rs c) (of_nat ?n2) * c ^ ?n2)\n  poly q' ?z2 = 0 \\<Longrightarrow> degree (rs ?z2) \\<le> order ?z2 q' - 1\n  \\<lbrakk>\\<And>n.\n              (fps_of_poly p / fps_of_poly q) $ n =\n              coeff r n +\n              (\\<Sum>c | poly q' c = 0. poly (rs c) (of_nat n) * c ^ n);\n   \\<And>z.\n      poly q' z = 0 \\<Longrightarrow>\n      degree (rs z) \\<le> order z q' - 1\\<rbrakk>\n  \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. thesis", "by blast"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}