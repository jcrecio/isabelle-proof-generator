{"file_name": "/home/qj213/afp-2021-10-22/thys/Linear_Recurrences/Linear_Homogenous_Recurrences.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Linear_Recurrences", "problem_names": ["lemma lhr_fps_numerator_code [code abstract]:\n  \"coeffs (lhr_fps_numerator m cs f) = (let N = length cs - 1 in \n     strip_while ((=) 0) [(\\<Sum>i\\<le>min N k. cs ! (N - i) * f (k - i)). k \\<leftarrow> [0..<N+m]])\"", "lemma lhr_fps_aux:\n  fixes f :: \"nat \\<Rightarrow> 'a :: field\"\n  assumes \"\\<And>n. n \\<ge> m \\<Longrightarrow> (\\<Sum>k\\<le>N. c k * f (n + k)) = 0\"\n  assumes cN: \"c N \\<noteq> 0\"\n  defines \"p \\<equiv> Poly [c (N - k). k \\<leftarrow> [0..<Suc N]]\"\n  defines \"q \\<equiv> Poly [(\\<Sum>i\\<le>min N k. c (N - i) * f (k - i)). k \\<leftarrow> [0..<N+m]]\"\n  shows   \"Abs_fps f = fps_of_poly q / fps_of_poly p\"", "lemma lhr_fps:\n  fixes f :: \"nat \\<Rightarrow> 'a :: field\" and cs :: \"'a list\"\n  defines \"N \\<equiv> length cs - 1\"\n  assumes cs: \"cs \\<noteq> []\"\n  assumes \"\\<And>n. n \\<ge> m \\<Longrightarrow> (\\<Sum>k\\<le>N. cs ! k * f (n + k)) = 0\"\n  assumes cN: \"last cs \\<noteq> 0\"\n  shows   \"Abs_fps f = fps_of_poly (lhr_fps_numerator m cs f) / \n              fps_of_poly (lr_fps_denominator cs)\"", "lemma lhr_rec: \n  assumes \"cs \\<noteq> []\" \"last cs \\<noteq> 0\" \"length fs \\<ge> length cs - 1\" \"n \\<ge> length fs\"\n  shows   \"(\\<Sum>k<length cs. cs ! k * lhr cs fs (n + 1 - length cs + k)) = 0\"", "lemma lhrI:\n  assumes \"cs \\<noteq> []\" \"last cs \\<noteq> 0\" \"length fs \\<ge> length cs - 1\"\n  assumes \"\\<And>n. n < length fs \\<Longrightarrow> f n = fs ! n\"\n  assumes \"\\<And>n. n \\<ge> length fs \\<Longrightarrow> (\\<Sum>k<length cs. cs ! k * f (n + 1 - length cs + k)) = 0\"\n  shows   \"f n = lhr cs fs n\"", "lemma lhr_fps_numerator_altdef:\n  \"lhr_fps_numerator (length fs + 1 - length cs) cs f =\n     lhr_fps_numerator (length fs + 1 - length cs) cs ((!) fs)\"", "lemma solve_lhr_aux:\n  assumes \"linear_homogenous_recurrence f cs fs\"\n  assumes \"is_factorization_of fctrs (lr_fps_denominator' cs)\"\n  shows   \"f = interp_ratfps_solution (solve_factored_ratfps' (lhr_fps_numerator \n                  (length fs + 1 - length cs) cs ((!) fs)) fctrs)\"", "lemma lhr_fps_correct:\n  fixes   f :: \"nat \\<Rightarrow> 'a :: {field_char_0,field_gcd}\"\n  assumes \"linear_homogenous_recurrence f cs fs\"\n  shows   \"fps_of_ratfps (lhr_fps cs fs) = Abs_fps f\""], "translations": [["", "lemma lhr_fps_numerator_code [code abstract]:\n  \"coeffs (lhr_fps_numerator m cs f) = (let N = length cs - 1 in \n     strip_while ((=) 0) [(\\<Sum>i\\<le>min N k. cs ! (N - i) * f (k - i)). k \\<leftarrow> [0..<N+m]])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. coeffs (lhr_fps_numerator m cs f) =\n    (let N = length cs - 1\n     in strip_while ((=) (0::'a))\n         (map (\\<lambda>k. \\<Sum>i\\<le>min N k. cs ! (N - i) * f (k - i))\n           [0..<N + m]))", "by (simp add: lhr_fps_numerator_def Let_def)"], ["", "lemma lhr_fps_aux:\n  fixes f :: \"nat \\<Rightarrow> 'a :: field\"\n  assumes \"\\<And>n. n \\<ge> m \\<Longrightarrow> (\\<Sum>k\\<le>N. c k * f (n + k)) = 0\"\n  assumes cN: \"c N \\<noteq> 0\"\n  defines \"p \\<equiv> Poly [c (N - k). k \\<leftarrow> [0..<Suc N]]\"\n  defines \"q \\<equiv> Poly [(\\<Sum>i\\<le>min N k. c (N - i) * f (k - i)). k \\<leftarrow> [0..<N+m]]\"\n  shows   \"Abs_fps f = fps_of_poly q / fps_of_poly p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Abs_fps f = fps_of_poly q / fps_of_poly p", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Abs_fps f = fps_of_poly q / fps_of_poly p", "include fps_notation"], ["proof (state)\ngoal (1 subgoal):\n 1. Abs_fps f = fps_of_poly q / fps_of_poly p", "define F where \"F = Abs_fps f\""], ["proof (state)\nthis:\n  F = Abs_fps f\n\ngoal (1 subgoal):\n 1. Abs_fps f = fps_of_poly q / fps_of_poly p", "have [simp]: \"F $ n = f n\" for n"], ["proof (prove)\ngoal (1 subgoal):\n 1. F $ n = f n", "by (simp add: F_def)"], ["proof (state)\nthis:\n  F $ ?n = f ?n\n\ngoal (1 subgoal):\n 1. Abs_fps f = fps_of_poly q / fps_of_poly p", "have [simp]: \"coeff p 0 = c N\""], ["proof (prove)\ngoal (1 subgoal):\n 1. constant_term p = c N", "by (simp add: p_def nth_default_def del: upt_Suc)"], ["proof (state)\nthis:\n  constant_term p = c N\n\ngoal (1 subgoal):\n 1. Abs_fps f = fps_of_poly q / fps_of_poly p", "have \"(fps_of_poly p * F) $ n = coeff q n\" for n"], ["proof (prove)\ngoal (1 subgoal):\n 1. (fps_of_poly p * F) $ n = coeff q n", "proof (cases \"n \\<ge> N + m\")"], ["proof (state)\ngoal (2 subgoals):\n 1. N + m \\<le> n \\<Longrightarrow> (fps_of_poly p * F) $ n = coeff q n\n 2. \\<not> N + m \\<le> n \\<Longrightarrow>\n    (fps_of_poly p * F) $ n = coeff q n", "case True"], ["proof (state)\nthis:\n  N + m \\<le> n\n\ngoal (2 subgoals):\n 1. N + m \\<le> n \\<Longrightarrow> (fps_of_poly p * F) $ n = coeff q n\n 2. \\<not> N + m \\<le> n \\<Longrightarrow>\n    (fps_of_poly p * F) $ n = coeff q n", "let ?f = \"\\<lambda>i. N - i\""], ["proof (state)\ngoal (2 subgoals):\n 1. N + m \\<le> n \\<Longrightarrow> (fps_of_poly p * F) $ n = coeff q n\n 2. \\<not> N + m \\<le> n \\<Longrightarrow>\n    (fps_of_poly p * F) $ n = coeff q n", "have \"(fps_of_poly p * F) $ n = (\\<Sum>i\\<le>n. coeff p i * f (n - i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (fps_of_poly p * F) $ n = (\\<Sum>i\\<le>n. coeff p i * f (n - i))", "by (simp add: fps_mult_nth atLeast0AtMost)"], ["proof (state)\nthis:\n  (fps_of_poly p * F) $ n = (\\<Sum>i\\<le>n. coeff p i * f (n - i))\n\ngoal (2 subgoals):\n 1. N + m \\<le> n \\<Longrightarrow> (fps_of_poly p * F) $ n = coeff q n\n 2. \\<not> N + m \\<le> n \\<Longrightarrow>\n    (fps_of_poly p * F) $ n = coeff q n", "also"], ["proof (state)\nthis:\n  (fps_of_poly p * F) $ n = (\\<Sum>i\\<le>n. coeff p i * f (n - i))\n\ngoal (2 subgoals):\n 1. N + m \\<le> n \\<Longrightarrow> (fps_of_poly p * F) $ n = coeff q n\n 2. \\<not> N + m \\<le> n \\<Longrightarrow>\n    (fps_of_poly p * F) $ n = coeff q n", "from True"], ["proof (chain)\npicking this:\n  N + m \\<le> n", "have \"\\<dots> = (\\<Sum>i\\<le>N. coeff p i * f (n - i))\""], ["proof (prove)\nusing this:\n  N + m \\<le> n\n\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<le>n. coeff p i * f (n - i)) =\n    (\\<Sum>i\\<le>N. coeff p i * f (n - i))", "by (intro sum.mono_neutral_right) (auto simp: nth_default_def p_def)"], ["proof (state)\nthis:\n  (\\<Sum>i\\<le>n. coeff p i * f (n - i)) =\n  (\\<Sum>i\\<le>N. coeff p i * f (n - i))\n\ngoal (2 subgoals):\n 1. N + m \\<le> n \\<Longrightarrow> (fps_of_poly p * F) $ n = coeff q n\n 2. \\<not> N + m \\<le> n \\<Longrightarrow>\n    (fps_of_poly p * F) $ n = coeff q n", "also"], ["proof (state)\nthis:\n  (\\<Sum>i\\<le>n. coeff p i * f (n - i)) =\n  (\\<Sum>i\\<le>N. coeff p i * f (n - i))\n\ngoal (2 subgoals):\n 1. N + m \\<le> n \\<Longrightarrow> (fps_of_poly p * F) $ n = coeff q n\n 2. \\<not> N + m \\<le> n \\<Longrightarrow>\n    (fps_of_poly p * F) $ n = coeff q n", "have \"\\<dots> = (\\<Sum>i\\<le>N. c (N - i) * f (n - i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<le>N. coeff p i * f (n - i)) =\n    (\\<Sum>i\\<le>N. c (N - i) * f (n - i))", "by (intro sum.cong) (auto simp: nth_default_def p_def simp del: upt_Suc)"], ["proof (state)\nthis:\n  (\\<Sum>i\\<le>N. coeff p i * f (n - i)) =\n  (\\<Sum>i\\<le>N. c (N - i) * f (n - i))\n\ngoal (2 subgoals):\n 1. N + m \\<le> n \\<Longrightarrow> (fps_of_poly p * F) $ n = coeff q n\n 2. \\<not> N + m \\<le> n \\<Longrightarrow>\n    (fps_of_poly p * F) $ n = coeff q n", "also"], ["proof (state)\nthis:\n  (\\<Sum>i\\<le>N. coeff p i * f (n - i)) =\n  (\\<Sum>i\\<le>N. c (N - i) * f (n - i))\n\ngoal (2 subgoals):\n 1. N + m \\<le> n \\<Longrightarrow> (fps_of_poly p * F) $ n = coeff q n\n 2. \\<not> N + m \\<le> n \\<Longrightarrow>\n    (fps_of_poly p * F) $ n = coeff q n", "from True"], ["proof (chain)\npicking this:\n  N + m \\<le> n", "have \"\\<dots> = (\\<Sum>i\\<le>N. c i * f (n - N + i))\""], ["proof (prove)\nusing this:\n  N + m \\<le> n\n\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<le>N. c (N - i) * f (n - i)) =\n    (\\<Sum>i\\<le>N. c i * f (n - N + i))", "by (intro sum.reindex_bij_witness[of _ ?f ?f]) auto"], ["proof (state)\nthis:\n  (\\<Sum>i\\<le>N. c (N - i) * f (n - i)) =\n  (\\<Sum>i\\<le>N. c i * f (n - N + i))\n\ngoal (2 subgoals):\n 1. N + m \\<le> n \\<Longrightarrow> (fps_of_poly p * F) $ n = coeff q n\n 2. \\<not> N + m \\<le> n \\<Longrightarrow>\n    (fps_of_poly p * F) $ n = coeff q n", "also"], ["proof (state)\nthis:\n  (\\<Sum>i\\<le>N. c (N - i) * f (n - i)) =\n  (\\<Sum>i\\<le>N. c i * f (n - N + i))\n\ngoal (2 subgoals):\n 1. N + m \\<le> n \\<Longrightarrow> (fps_of_poly p * F) $ n = coeff q n\n 2. \\<not> N + m \\<le> n \\<Longrightarrow>\n    (fps_of_poly p * F) $ n = coeff q n", "from True"], ["proof (chain)\npicking this:\n  N + m \\<le> n", "have \"\\<dots> = 0\""], ["proof (prove)\nusing this:\n  N + m \\<le> n\n\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<le>N. c i * f (n - N + i)) = (0::'a)", "by (intro assms) simp_all"], ["proof (state)\nthis:\n  (\\<Sum>i\\<le>N. c i * f (n - N + i)) = (0::'a)\n\ngoal (2 subgoals):\n 1. N + m \\<le> n \\<Longrightarrow> (fps_of_poly p * F) $ n = coeff q n\n 2. \\<not> N + m \\<le> n \\<Longrightarrow>\n    (fps_of_poly p * F) $ n = coeff q n", "also"], ["proof (state)\nthis:\n  (\\<Sum>i\\<le>N. c i * f (n - N + i)) = (0::'a)\n\ngoal (2 subgoals):\n 1. N + m \\<le> n \\<Longrightarrow> (fps_of_poly p * F) $ n = coeff q n\n 2. \\<not> N + m \\<le> n \\<Longrightarrow>\n    (fps_of_poly p * F) $ n = coeff q n", "from True"], ["proof (chain)\npicking this:\n  N + m \\<le> n", "have \"\\<dots> = coeff q n\""], ["proof (prove)\nusing this:\n  N + m \\<le> n\n\ngoal (1 subgoal):\n 1. (0::'a) = coeff q n", "by (simp add: q_def nth_default_def del: upt_Suc)"], ["proof (state)\nthis:\n  (0::'a) = coeff q n\n\ngoal (2 subgoals):\n 1. N + m \\<le> n \\<Longrightarrow> (fps_of_poly p * F) $ n = coeff q n\n 2. \\<not> N + m \\<le> n \\<Longrightarrow>\n    (fps_of_poly p * F) $ n = coeff q n", "finally"], ["proof (chain)\npicking this:\n  (fps_of_poly p * F) $ n = coeff q n", "show ?thesis"], ["proof (prove)\nusing this:\n  (fps_of_poly p * F) $ n = coeff q n\n\ngoal (1 subgoal):\n 1. (fps_of_poly p * F) $ n = coeff q n", "."], ["proof (state)\nthis:\n  (fps_of_poly p * F) $ n = coeff q n\n\ngoal (1 subgoal):\n 1. \\<not> N + m \\<le> n \\<Longrightarrow>\n    (fps_of_poly p * F) $ n = coeff q n", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> N + m \\<le> n \\<Longrightarrow>\n    (fps_of_poly p * F) $ n = coeff q n", "case False"], ["proof (state)\nthis:\n  \\<not> N + m \\<le> n\n\ngoal (1 subgoal):\n 1. \\<not> N + m \\<le> n \\<Longrightarrow>\n    (fps_of_poly p * F) $ n = coeff q n", "hence \"(fps_of_poly p * F) $ n = (\\<Sum>i\\<le>n. coeff p i * f (n - i))\""], ["proof (prove)\nusing this:\n  \\<not> N + m \\<le> n\n\ngoal (1 subgoal):\n 1. (fps_of_poly p * F) $ n = (\\<Sum>i\\<le>n. coeff p i * f (n - i))", "by (simp add: fps_mult_nth atLeast0AtMost)"], ["proof (state)\nthis:\n  (fps_of_poly p * F) $ n = (\\<Sum>i\\<le>n. coeff p i * f (n - i))\n\ngoal (1 subgoal):\n 1. \\<not> N + m \\<le> n \\<Longrightarrow>\n    (fps_of_poly p * F) $ n = coeff q n", "also"], ["proof (state)\nthis:\n  (fps_of_poly p * F) $ n = (\\<Sum>i\\<le>n. coeff p i * f (n - i))\n\ngoal (1 subgoal):\n 1. \\<not> N + m \\<le> n \\<Longrightarrow>\n    (fps_of_poly p * F) $ n = coeff q n", "have \"\\<dots> = (\\<Sum>i\\<le>min N n. coeff p i * f (n - i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<le>n. coeff p i * f (n - i)) =\n    (\\<Sum>i\\<le>min N n. coeff p i * f (n - i))", "by (intro sum.mono_neutral_right)\n         (auto simp: p_def nth_default_def simp del: upt_Suc)"], ["proof (state)\nthis:\n  (\\<Sum>i\\<le>n. coeff p i * f (n - i)) =\n  (\\<Sum>i\\<le>min N n. coeff p i * f (n - i))\n\ngoal (1 subgoal):\n 1. \\<not> N + m \\<le> n \\<Longrightarrow>\n    (fps_of_poly p * F) $ n = coeff q n", "also"], ["proof (state)\nthis:\n  (\\<Sum>i\\<le>n. coeff p i * f (n - i)) =\n  (\\<Sum>i\\<le>min N n. coeff p i * f (n - i))\n\ngoal (1 subgoal):\n 1. \\<not> N + m \\<le> n \\<Longrightarrow>\n    (fps_of_poly p * F) $ n = coeff q n", "have \"\\<dots> = (\\<Sum>i\\<le>min N n. c (N - i) * f (n - i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<le>min N n. coeff p i * f (n - i)) =\n    (\\<Sum>i\\<le>min N n. c (N - i) * f (n - i))", "by (intro sum.cong) (simp_all add: p_def nth_default_def del: upt_Suc)"], ["proof (state)\nthis:\n  (\\<Sum>i\\<le>min N n. coeff p i * f (n - i)) =\n  (\\<Sum>i\\<le>min N n. c (N - i) * f (n - i))\n\ngoal (1 subgoal):\n 1. \\<not> N + m \\<le> n \\<Longrightarrow>\n    (fps_of_poly p * F) $ n = coeff q n", "also"], ["proof (state)\nthis:\n  (\\<Sum>i\\<le>min N n. coeff p i * f (n - i)) =\n  (\\<Sum>i\\<le>min N n. c (N - i) * f (n - i))\n\ngoal (1 subgoal):\n 1. \\<not> N + m \\<le> n \\<Longrightarrow>\n    (fps_of_poly p * F) $ n = coeff q n", "from False"], ["proof (chain)\npicking this:\n  \\<not> N + m \\<le> n", "have \"\\<dots> = coeff q n\""], ["proof (prove)\nusing this:\n  \\<not> N + m \\<le> n\n\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<le>min N n. c (N - i) * f (n - i)) = coeff q n", "by (simp add: q_def nth_default_def)"], ["proof (state)\nthis:\n  (\\<Sum>i\\<le>min N n. c (N - i) * f (n - i)) = coeff q n\n\ngoal (1 subgoal):\n 1. \\<not> N + m \\<le> n \\<Longrightarrow>\n    (fps_of_poly p * F) $ n = coeff q n", "finally"], ["proof (chain)\npicking this:\n  (fps_of_poly p * F) $ n = coeff q n", "show ?thesis"], ["proof (prove)\nusing this:\n  (fps_of_poly p * F) $ n = coeff q n\n\ngoal (1 subgoal):\n 1. (fps_of_poly p * F) $ n = coeff q n", "."], ["proof (state)\nthis:\n  (fps_of_poly p * F) $ n = coeff q n\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (fps_of_poly p * F) $ ?n = coeff q ?n\n\ngoal (1 subgoal):\n 1. Abs_fps f = fps_of_poly q / fps_of_poly p", "hence \"fps_of_poly p * F = fps_of_poly q\""], ["proof (prove)\nusing this:\n  (fps_of_poly p * F) $ ?n = coeff q ?n\n\ngoal (1 subgoal):\n 1. fps_of_poly p * F = fps_of_poly q", "by (intro fps_ext) simp"], ["proof (state)\nthis:\n  fps_of_poly p * F = fps_of_poly q\n\ngoal (1 subgoal):\n 1. Abs_fps f = fps_of_poly q / fps_of_poly p", "with cN"], ["proof (chain)\npicking this:\n  c N \\<noteq> (0::'a)\n  fps_of_poly p * F = fps_of_poly q", "show \"F = fps_of_poly q / fps_of_poly p\""], ["proof (prove)\nusing this:\n  c N \\<noteq> (0::'a)\n  fps_of_poly p * F = fps_of_poly q\n\ngoal (1 subgoal):\n 1. F = fps_of_poly q / fps_of_poly p", "by (subst unit_eq_div2) (simp_all add: mult_ac)"], ["proof (state)\nthis:\n  F = fps_of_poly q / fps_of_poly p\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lhr_fps:\n  fixes f :: \"nat \\<Rightarrow> 'a :: field\" and cs :: \"'a list\"\n  defines \"N \\<equiv> length cs - 1\"\n  assumes cs: \"cs \\<noteq> []\"\n  assumes \"\\<And>n. n \\<ge> m \\<Longrightarrow> (\\<Sum>k\\<le>N. cs ! k * f (n + k)) = 0\"\n  assumes cN: \"last cs \\<noteq> 0\"\n  shows   \"Abs_fps f = fps_of_poly (lhr_fps_numerator m cs f) / \n              fps_of_poly (lr_fps_denominator cs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Abs_fps f =\n    fps_of_poly (lhr_fps_numerator m cs f) /\n    fps_of_poly (lr_fps_denominator cs)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Abs_fps f =\n    fps_of_poly (lhr_fps_numerator m cs f) /\n    fps_of_poly (lr_fps_denominator cs)", "define p and q \n    where \"p = Poly (map (\\<lambda>k. \\<Sum>i\\<le>min N k. cs ! (N - i) * f (k - i)) [0..<N + m])\"\n      and \"q = Poly (map (\\<lambda>k. cs ! (N - k)) [0..<Suc N])\""], ["proof (state)\nthis:\n  p =\n  Poly\n   (map (\\<lambda>k. \\<Sum>i\\<le>min N k. cs ! (N - i) * f (k - i))\n     [0..<N + m])\n  q = Poly (map (\\<lambda>k. cs ! (N - k)) [0..<Suc N])\n\ngoal (1 subgoal):\n 1. Abs_fps f =\n    fps_of_poly (lhr_fps_numerator m cs f) /\n    fps_of_poly (lr_fps_denominator cs)", "from assms"], ["proof (chain)\npicking this:\n  N \\<equiv> length cs - 1\n  cs \\<noteq> []\n  m \\<le> ?n \\<Longrightarrow>\n  (\\<Sum>k\\<le>N. cs ! k * f (?n + k)) = (0::'a)\n  last cs \\<noteq> (0::'a)", "have \"Abs_fps f = fps_of_poly p / fps_of_poly q\""], ["proof (prove)\nusing this:\n  N \\<equiv> length cs - 1\n  cs \\<noteq> []\n  m \\<le> ?n \\<Longrightarrow>\n  (\\<Sum>k\\<le>N. cs ! k * f (?n + k)) = (0::'a)\n  last cs \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. Abs_fps f = fps_of_poly p / fps_of_poly q", "unfolding p_def q_def"], ["proof (prove)\nusing this:\n  N \\<equiv> length cs - 1\n  cs \\<noteq> []\n  m \\<le> ?n \\<Longrightarrow>\n  (\\<Sum>k\\<le>N. cs ! k * f (?n + k)) = (0::'a)\n  last cs \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. Abs_fps f =\n    fps_of_poly\n     (Poly\n       (map (\\<lambda>k. \\<Sum>i\\<le>min N k. cs ! (N - i) * f (k - i))\n         [0..<N + m])) /\n    fps_of_poly (Poly (map (\\<lambda>k. cs ! (N - k)) [0..<Suc N]))", "by (intro lhr_fps_aux) (simp_all add: last_conv_nth)"], ["proof (state)\nthis:\n  Abs_fps f = fps_of_poly p / fps_of_poly q\n\ngoal (1 subgoal):\n 1. Abs_fps f =\n    fps_of_poly (lhr_fps_numerator m cs f) /\n    fps_of_poly (lr_fps_denominator cs)", "also"], ["proof (state)\nthis:\n  Abs_fps f = fps_of_poly p / fps_of_poly q\n\ngoal (1 subgoal):\n 1. Abs_fps f =\n    fps_of_poly (lhr_fps_numerator m cs f) /\n    fps_of_poly (lr_fps_denominator cs)", "have \"p = lhr_fps_numerator m cs f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p = lhr_fps_numerator m cs f", "unfolding p_def lhr_fps_numerator_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. Poly\n     (map (\\<lambda>k. \\<Sum>i\\<le>min N k. cs ! (N - i) * f (k - i))\n       [0..<N + m]) =\n    (let N = length cs - 1\n     in Poly\n         (map (\\<lambda>k. \\<Sum>i\\<le>min N k. cs ! (N - i) * f (k - i))\n           [0..<N + m]))", "by (auto simp: Let_def N_def)"], ["proof (state)\nthis:\n  p = lhr_fps_numerator m cs f\n\ngoal (1 subgoal):\n 1. Abs_fps f =\n    fps_of_poly (lhr_fps_numerator m cs f) /\n    fps_of_poly (lr_fps_denominator cs)", "also"], ["proof (state)\nthis:\n  p = lhr_fps_numerator m cs f\n\ngoal (1 subgoal):\n 1. Abs_fps f =\n    fps_of_poly (lhr_fps_numerator m cs f) /\n    fps_of_poly (lr_fps_denominator cs)", "from cN"], ["proof (chain)\npicking this:\n  last cs \\<noteq> (0::'a)", "have \"q = lr_fps_denominator cs\""], ["proof (prove)\nusing this:\n  last cs \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. q = lr_fps_denominator cs", "unfolding q_def lr_fps_denominator_def"], ["proof (prove)\nusing this:\n  last cs \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. Poly (map (\\<lambda>k. cs ! (N - k)) [0..<Suc N]) = Poly (rev cs)", "by (intro poly_eqI)\n       (auto simp add: nth_default_def rev_nth N_def not_less cs simp del: upt_Suc)"], ["proof (state)\nthis:\n  q = lr_fps_denominator cs\n\ngoal (1 subgoal):\n 1. Abs_fps f =\n    fps_of_poly (lhr_fps_numerator m cs f) /\n    fps_of_poly (lr_fps_denominator cs)", "finally"], ["proof (chain)\npicking this:\n  Abs_fps f =\n  fps_of_poly (lhr_fps_numerator m cs f) /\n  fps_of_poly (lr_fps_denominator cs)", "show ?thesis"], ["proof (prove)\nusing this:\n  Abs_fps f =\n  fps_of_poly (lhr_fps_numerator m cs f) /\n  fps_of_poly (lr_fps_denominator cs)\n\ngoal (1 subgoal):\n 1. Abs_fps f =\n    fps_of_poly (lhr_fps_numerator m cs f) /\n    fps_of_poly (lr_fps_denominator cs)", "."], ["proof (state)\nthis:\n  Abs_fps f =\n  fps_of_poly (lhr_fps_numerator m cs f) /\n  fps_of_poly (lr_fps_denominator cs)\n\ngoal:\nNo subgoals!", "qed"], ["", "(* TODO: Do I even need this? *)"], ["", "fun lhr where\n  \"lhr cs fs n =\n     (if (cs :: 'a :: field list) = [] \\<or> last cs = 0 \\<or> length fs < length cs - 1 then undefined else\n     (if n < length fs then fs ! n else \n          (\\<Sum>k<length cs - 1. cs ! k * lhr cs fs (n + 1 - length cs + k)) / -last cs))\""], ["", "declare lhr.simps [simp del]"], ["", "lemma lhr_rec: \n  assumes \"cs \\<noteq> []\" \"last cs \\<noteq> 0\" \"length fs \\<ge> length cs - 1\" \"n \\<ge> length fs\"\n  shows   \"(\\<Sum>k<length cs. cs ! k * lhr cs fs (n + 1 - length cs + k)) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>k<length cs. cs ! k * lhr cs fs (n + 1 - length cs + k)) =\n    (0::'a)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<Sum>k<length cs. cs ! k * lhr cs fs (n + 1 - length cs + k)) =\n    (0::'a)", "from assms"], ["proof (chain)\npicking this:\n  cs \\<noteq> []\n  last cs \\<noteq> (0::'a)\n  length cs - 1 \\<le> length fs\n  length fs \\<le> n", "have \"{..<length cs} = insert (length cs - 1) {..<length cs - 1}\""], ["proof (prove)\nusing this:\n  cs \\<noteq> []\n  last cs \\<noteq> (0::'a)\n  length cs - 1 \\<le> length fs\n  length fs \\<le> n\n\ngoal (1 subgoal):\n 1. {..<length cs} = insert (length cs - 1) {..<length cs - 1}", "by auto"], ["proof (state)\nthis:\n  {..<length cs} = insert (length cs - 1) {..<length cs - 1}\n\ngoal (1 subgoal):\n 1. (\\<Sum>k<length cs. cs ! k * lhr cs fs (n + 1 - length cs + k)) =\n    (0::'a)", "also"], ["proof (state)\nthis:\n  {..<length cs} = insert (length cs - 1) {..<length cs - 1}\n\ngoal (1 subgoal):\n 1. (\\<Sum>k<length cs. cs ! k * lhr cs fs (n + 1 - length cs + k)) =\n    (0::'a)", "have \"(\\<Sum>k\\<in>\\<dots> . cs ! k * lhr cs fs (n + 1 - length cs + k)) =\n               (\\<Sum>k<length cs - 1. cs ! k * lhr cs fs (n + 1 - length cs + k)) + \n                    last cs * lhr cs fs n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>k\\<in>insert (length cs - 1) {..<length cs - 1}.\n       cs ! k * lhr cs fs (n + 1 - length cs + k)) =\n    (\\<Sum>k<length cs - 1. cs ! k * lhr cs fs (n + 1 - length cs + k)) +\n    last cs * lhr cs fs n", "using assms"], ["proof (prove)\nusing this:\n  cs \\<noteq> []\n  last cs \\<noteq> (0::'a)\n  length cs - 1 \\<le> length fs\n  length fs \\<le> n\n\ngoal (1 subgoal):\n 1. (\\<Sum>k\\<in>insert (length cs - 1) {..<length cs - 1}.\n       cs ! k * lhr cs fs (n + 1 - length cs + k)) =\n    (\\<Sum>k<length cs - 1. cs ! k * lhr cs fs (n + 1 - length cs + k)) +\n    last cs * lhr cs fs n", "by (cases cs) (simp_all add: algebra_simps last_conv_nth)"], ["proof (state)\nthis:\n  (\\<Sum>k\\<in>insert (length cs - 1) {..<length cs - 1}.\n     cs ! k * lhr cs fs (n + 1 - length cs + k)) =\n  (\\<Sum>k<length cs - 1. cs ! k * lhr cs fs (n + 1 - length cs + k)) +\n  last cs * lhr cs fs n\n\ngoal (1 subgoal):\n 1. (\\<Sum>k<length cs. cs ! k * lhr cs fs (n + 1 - length cs + k)) =\n    (0::'a)", "also"], ["proof (state)\nthis:\n  (\\<Sum>k\\<in>insert (length cs - 1) {..<length cs - 1}.\n     cs ! k * lhr cs fs (n + 1 - length cs + k)) =\n  (\\<Sum>k<length cs - 1. cs ! k * lhr cs fs (n + 1 - length cs + k)) +\n  last cs * lhr cs fs n\n\ngoal (1 subgoal):\n 1. (\\<Sum>k<length cs. cs ! k * lhr cs fs (n + 1 - length cs + k)) =\n    (0::'a)", "from assms"], ["proof (chain)\npicking this:\n  cs \\<noteq> []\n  last cs \\<noteq> (0::'a)\n  length cs - 1 \\<le> length fs\n  length fs \\<le> n", "have \"\\<dots> = 0\""], ["proof (prove)\nusing this:\n  cs \\<noteq> []\n  last cs \\<noteq> (0::'a)\n  length cs - 1 \\<le> length fs\n  length fs \\<le> n\n\ngoal (1 subgoal):\n 1. (\\<Sum>k<length cs - 1. cs ! k * lhr cs fs (n + 1 - length cs + k)) +\n    last cs * lhr cs fs n =\n    (0::'a)", "by (subst (2) lhr.simps) (simp_all add: field_simps)"], ["proof (state)\nthis:\n  (\\<Sum>k<length cs - 1. cs ! k * lhr cs fs (n + 1 - length cs + k)) +\n  last cs * lhr cs fs n =\n  (0::'a)\n\ngoal (1 subgoal):\n 1. (\\<Sum>k<length cs. cs ! k * lhr cs fs (n + 1 - length cs + k)) =\n    (0::'a)", "finally"], ["proof (chain)\npicking this:\n  (\\<Sum>k<length cs. cs ! k * lhr cs fs (n + 1 - length cs + k)) = (0::'a)", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<Sum>k<length cs. cs ! k * lhr cs fs (n + 1 - length cs + k)) = (0::'a)\n\ngoal (1 subgoal):\n 1. (\\<Sum>k<length cs. cs ! k * lhr cs fs (n + 1 - length cs + k)) =\n    (0::'a)", "."], ["proof (state)\nthis:\n  (\\<Sum>k<length cs. cs ! k * lhr cs fs (n + 1 - length cs + k)) = (0::'a)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lhrI:\n  assumes \"cs \\<noteq> []\" \"last cs \\<noteq> 0\" \"length fs \\<ge> length cs - 1\"\n  assumes \"\\<And>n. n < length fs \\<Longrightarrow> f n = fs ! n\"\n  assumes \"\\<And>n. n \\<ge> length fs \\<Longrightarrow> (\\<Sum>k<length cs. cs ! k * f (n + 1 - length cs + k)) = 0\"\n  shows   \"f n = lhr cs fs n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f n = lhr cs fs n", "using assms"], ["proof (prove)\nusing this:\n  cs \\<noteq> []\n  last cs \\<noteq> (0::'a)\n  length cs - 1 \\<le> length fs\n  ?n < length fs \\<Longrightarrow> f ?n = fs ! ?n\n  length fs \\<le> ?n \\<Longrightarrow>\n  (\\<Sum>k<length cs. cs ! k * f (?n + 1 - length cs + k)) = (0::'a)\n\ngoal (1 subgoal):\n 1. f n = lhr cs fs n", "proof (induction cs fs n rule: lhr.induct)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>cs fs n.\n       \\<lbrakk>\\<And>x.\n                   \\<lbrakk>\\<not> (cs = [] \\<or>\n                                    last cs = (0::'a) \\<or>\n                                    length fs < length cs - 1);\n                    \\<not> n < length fs; x \\<in> {..<length cs - 1};\n                    cs \\<noteq> []; last cs \\<noteq> (0::'a);\n                    length cs - 1 \\<le> length fs;\n                    \\<And>n. n < length fs \\<Longrightarrow> f n = fs ! n;\n                    \\<And>n.\n                       length fs \\<le> n \\<Longrightarrow>\n                       (\\<Sum>k<length cs.\n                           cs ! k * f (n + 1 - length cs + k)) =\n                       (0::'a)\\<rbrakk>\n                   \\<Longrightarrow> f (n + 1 - length cs + x) =\n                                     lhr cs fs (n + 1 - length cs + x);\n        cs \\<noteq> []; last cs \\<noteq> (0::'a);\n        length cs - 1 \\<le> length fs;\n        \\<And>n. n < length fs \\<Longrightarrow> f n = fs ! n;\n        \\<And>n.\n           length fs \\<le> n \\<Longrightarrow>\n           (\\<Sum>k<length cs. cs ! k * f (n + 1 - length cs + k)) =\n           (0::'a)\\<rbrakk>\n       \\<Longrightarrow> f n = lhr cs fs n", "case (1 cs fs n)"], ["proof (state)\nthis:\n  \\<lbrakk>\\<not> (cs = [] \\<or>\n                   last cs = (0::'a) \\<or> length fs < length cs - 1);\n   \\<not> n < length fs; ?x \\<in> {..<length cs - 1}; cs \\<noteq> [];\n   last cs \\<noteq> (0::'a); length cs - 1 \\<le> length fs;\n   \\<And>n. n < length fs \\<Longrightarrow> f n = fs ! n;\n   \\<And>n.\n      length fs \\<le> n \\<Longrightarrow>\n      (\\<Sum>k<length cs. cs ! k * f (n + 1 - length cs + k)) =\n      (0::'a)\\<rbrakk>\n  \\<Longrightarrow> f (n + 1 - length cs + ?x) =\n                    lhr cs fs (n + 1 - length cs + ?x)\n  cs \\<noteq> []\n  last cs \\<noteq> (0::'a)\n  length cs - 1 \\<le> length fs\n  ?n < length fs \\<Longrightarrow> f ?n = fs ! ?n\n  length fs \\<le> ?n \\<Longrightarrow>\n  (\\<Sum>k<length cs. cs ! k * f (?n + 1 - length cs + k)) = (0::'a)\n\ngoal (1 subgoal):\n 1. \\<And>cs fs n.\n       \\<lbrakk>\\<And>x.\n                   \\<lbrakk>\\<not> (cs = [] \\<or>\n                                    last cs = (0::'a) \\<or>\n                                    length fs < length cs - 1);\n                    \\<not> n < length fs; x \\<in> {..<length cs - 1};\n                    cs \\<noteq> []; last cs \\<noteq> (0::'a);\n                    length cs - 1 \\<le> length fs;\n                    \\<And>n. n < length fs \\<Longrightarrow> f n = fs ! n;\n                    \\<And>n.\n                       length fs \\<le> n \\<Longrightarrow>\n                       (\\<Sum>k<length cs.\n                           cs ! k * f (n + 1 - length cs + k)) =\n                       (0::'a)\\<rbrakk>\n                   \\<Longrightarrow> f (n + 1 - length cs + x) =\n                                     lhr cs fs (n + 1 - length cs + x);\n        cs \\<noteq> []; last cs \\<noteq> (0::'a);\n        length cs - 1 \\<le> length fs;\n        \\<And>n. n < length fs \\<Longrightarrow> f n = fs ! n;\n        \\<And>n.\n           length fs \\<le> n \\<Longrightarrow>\n           (\\<Sum>k<length cs. cs ! k * f (n + 1 - length cs + k)) =\n           (0::'a)\\<rbrakk>\n       \\<Longrightarrow> f n = lhr cs fs n", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. f n = lhr cs fs n", "proof (cases \"n < length fs\")"], ["proof (state)\ngoal (2 subgoals):\n 1. n < length fs \\<Longrightarrow> f n = lhr cs fs n\n 2. \\<not> n < length fs \\<Longrightarrow> f n = lhr cs fs n", "case False"], ["proof (state)\nthis:\n  \\<not> n < length fs\n\ngoal (2 subgoals):\n 1. n < length fs \\<Longrightarrow> f n = lhr cs fs n\n 2. \\<not> n < length fs \\<Longrightarrow> f n = lhr cs fs n", "with 1"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<not> (cs = [] \\<or>\n                   last cs = (0::'a) \\<or> length fs < length cs - 1);\n   \\<not> n < length fs; ?x \\<in> {..<length cs - 1}; cs \\<noteq> [];\n   last cs \\<noteq> (0::'a); length cs - 1 \\<le> length fs;\n   \\<And>n. n < length fs \\<Longrightarrow> f n = fs ! n;\n   \\<And>n.\n      length fs \\<le> n \\<Longrightarrow>\n      (\\<Sum>k<length cs. cs ! k * f (n + 1 - length cs + k)) =\n      (0::'a)\\<rbrakk>\n  \\<Longrightarrow> f (n + 1 - length cs + ?x) =\n                    lhr cs fs (n + 1 - length cs + ?x)\n  cs \\<noteq> []\n  last cs \\<noteq> (0::'a)\n  length cs - 1 \\<le> length fs\n  ?n < length fs \\<Longrightarrow> f ?n = fs ! ?n\n  length fs \\<le> ?n \\<Longrightarrow>\n  (\\<Sum>k<length cs. cs ! k * f (?n + 1 - length cs + k)) = (0::'a)\n  \\<not> n < length fs", "have \"0 = (\\<Sum>k<length cs. cs ! k * f (n + 1 - length cs + k))\""], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<not> (cs = [] \\<or>\n                   last cs = (0::'a) \\<or> length fs < length cs - 1);\n   \\<not> n < length fs; ?x \\<in> {..<length cs - 1}; cs \\<noteq> [];\n   last cs \\<noteq> (0::'a); length cs - 1 \\<le> length fs;\n   \\<And>n. n < length fs \\<Longrightarrow> f n = fs ! n;\n   \\<And>n.\n      length fs \\<le> n \\<Longrightarrow>\n      (\\<Sum>k<length cs. cs ! k * f (n + 1 - length cs + k)) =\n      (0::'a)\\<rbrakk>\n  \\<Longrightarrow> f (n + 1 - length cs + ?x) =\n                    lhr cs fs (n + 1 - length cs + ?x)\n  cs \\<noteq> []\n  last cs \\<noteq> (0::'a)\n  length cs - 1 \\<le> length fs\n  ?n < length fs \\<Longrightarrow> f ?n = fs ! ?n\n  length fs \\<le> ?n \\<Longrightarrow>\n  (\\<Sum>k<length cs. cs ! k * f (?n + 1 - length cs + k)) = (0::'a)\n  \\<not> n < length fs\n\ngoal (1 subgoal):\n 1. (0::'a) = (\\<Sum>k<length cs. cs ! k * f (n + 1 - length cs + k))", "by simp"], ["proof (state)\nthis:\n  (0::'a) = (\\<Sum>k<length cs. cs ! k * f (n + 1 - length cs + k))\n\ngoal (2 subgoals):\n 1. n < length fs \\<Longrightarrow> f n = lhr cs fs n\n 2. \\<not> n < length fs \\<Longrightarrow> f n = lhr cs fs n", "also"], ["proof (state)\nthis:\n  (0::'a) = (\\<Sum>k<length cs. cs ! k * f (n + 1 - length cs + k))\n\ngoal (2 subgoals):\n 1. n < length fs \\<Longrightarrow> f n = lhr cs fs n\n 2. \\<not> n < length fs \\<Longrightarrow> f n = lhr cs fs n", "from 1"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<not> (cs = [] \\<or>\n                   last cs = (0::'a) \\<or> length fs < length cs - 1);\n   \\<not> n < length fs; ?x \\<in> {..<length cs - 1}; cs \\<noteq> [];\n   last cs \\<noteq> (0::'a); length cs - 1 \\<le> length fs;\n   \\<And>n. n < length fs \\<Longrightarrow> f n = fs ! n;\n   \\<And>n.\n      length fs \\<le> n \\<Longrightarrow>\n      (\\<Sum>k<length cs. cs ! k * f (n + 1 - length cs + k)) =\n      (0::'a)\\<rbrakk>\n  \\<Longrightarrow> f (n + 1 - length cs + ?x) =\n                    lhr cs fs (n + 1 - length cs + ?x)\n  cs \\<noteq> []\n  last cs \\<noteq> (0::'a)\n  length cs - 1 \\<le> length fs\n  ?n < length fs \\<Longrightarrow> f ?n = fs ! ?n\n  length fs \\<le> ?n \\<Longrightarrow>\n  (\\<Sum>k<length cs. cs ! k * f (?n + 1 - length cs + k)) = (0::'a)", "have \"{..<length cs} = insert (length cs - 1) {..<length cs - 1}\""], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<not> (cs = [] \\<or>\n                   last cs = (0::'a) \\<or> length fs < length cs - 1);\n   \\<not> n < length fs; ?x \\<in> {..<length cs - 1}; cs \\<noteq> [];\n   last cs \\<noteq> (0::'a); length cs - 1 \\<le> length fs;\n   \\<And>n. n < length fs \\<Longrightarrow> f n = fs ! n;\n   \\<And>n.\n      length fs \\<le> n \\<Longrightarrow>\n      (\\<Sum>k<length cs. cs ! k * f (n + 1 - length cs + k)) =\n      (0::'a)\\<rbrakk>\n  \\<Longrightarrow> f (n + 1 - length cs + ?x) =\n                    lhr cs fs (n + 1 - length cs + ?x)\n  cs \\<noteq> []\n  last cs \\<noteq> (0::'a)\n  length cs - 1 \\<le> length fs\n  ?n < length fs \\<Longrightarrow> f ?n = fs ! ?n\n  length fs \\<le> ?n \\<Longrightarrow>\n  (\\<Sum>k<length cs. cs ! k * f (?n + 1 - length cs + k)) = (0::'a)\n\ngoal (1 subgoal):\n 1. {..<length cs} = insert (length cs - 1) {..<length cs - 1}", "by auto"], ["proof (state)\nthis:\n  {..<length cs} = insert (length cs - 1) {..<length cs - 1}\n\ngoal (2 subgoals):\n 1. n < length fs \\<Longrightarrow> f n = lhr cs fs n\n 2. \\<not> n < length fs \\<Longrightarrow> f n = lhr cs fs n", "also"], ["proof (state)\nthis:\n  {..<length cs} = insert (length cs - 1) {..<length cs - 1}\n\ngoal (2 subgoals):\n 1. n < length fs \\<Longrightarrow> f n = lhr cs fs n\n 2. \\<not> n < length fs \\<Longrightarrow> f n = lhr cs fs n", "have \"(\\<Sum>k\\<in>\\<dots> . cs ! k * f (n + 1 - length cs + k)) =\n                 (\\<Sum>k<length cs - 1. cs ! k * f (n + 1 - length cs + k)) + \n                      last cs * f n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>k\\<in>insert (length cs - 1) {..<length cs - 1}.\n       cs ! k * f (n + 1 - length cs + k)) =\n    (\\<Sum>k<length cs - 1. cs ! k * f (n + 1 - length cs + k)) +\n    last cs * f n", "using 1 False"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<not> (cs = [] \\<or>\n                   last cs = (0::'a) \\<or> length fs < length cs - 1);\n   \\<not> n < length fs; ?x \\<in> {..<length cs - 1}; cs \\<noteq> [];\n   last cs \\<noteq> (0::'a); length cs - 1 \\<le> length fs;\n   \\<And>n. n < length fs \\<Longrightarrow> f n = fs ! n;\n   \\<And>n.\n      length fs \\<le> n \\<Longrightarrow>\n      (\\<Sum>k<length cs. cs ! k * f (n + 1 - length cs + k)) =\n      (0::'a)\\<rbrakk>\n  \\<Longrightarrow> f (n + 1 - length cs + ?x) =\n                    lhr cs fs (n + 1 - length cs + ?x)\n  cs \\<noteq> []\n  last cs \\<noteq> (0::'a)\n  length cs - 1 \\<le> length fs\n  ?n < length fs \\<Longrightarrow> f ?n = fs ! ?n\n  length fs \\<le> ?n \\<Longrightarrow>\n  (\\<Sum>k<length cs. cs ! k * f (?n + 1 - length cs + k)) = (0::'a)\n  \\<not> n < length fs\n\ngoal (1 subgoal):\n 1. (\\<Sum>k\\<in>insert (length cs - 1) {..<length cs - 1}.\n       cs ! k * f (n + 1 - length cs + k)) =\n    (\\<Sum>k<length cs - 1. cs ! k * f (n + 1 - length cs + k)) +\n    last cs * f n", "by (cases cs) (simp_all add: algebra_simps last_conv_nth)"], ["proof (state)\nthis:\n  (\\<Sum>k\\<in>insert (length cs - 1) {..<length cs - 1}.\n     cs ! k * f (n + 1 - length cs + k)) =\n  (\\<Sum>k<length cs - 1. cs ! k * f (n + 1 - length cs + k)) +\n  last cs * f n\n\ngoal (2 subgoals):\n 1. n < length fs \\<Longrightarrow> f n = lhr cs fs n\n 2. \\<not> n < length fs \\<Longrightarrow> f n = lhr cs fs n", "also"], ["proof (state)\nthis:\n  (\\<Sum>k\\<in>insert (length cs - 1) {..<length cs - 1}.\n     cs ! k * f (n + 1 - length cs + k)) =\n  (\\<Sum>k<length cs - 1. cs ! k * f (n + 1 - length cs + k)) +\n  last cs * f n\n\ngoal (2 subgoals):\n 1. n < length fs \\<Longrightarrow> f n = lhr cs fs n\n 2. \\<not> n < length fs \\<Longrightarrow> f n = lhr cs fs n", "have \"(\\<Sum>k<length cs - 1. cs ! k * f (n + 1 - length cs + k)) =\n                   (\\<Sum>k<length cs - 1. cs ! k * lhr cs fs (n + 1 - length cs + k))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>k<length cs - 1. cs ! k * f (n + 1 - length cs + k)) =\n    (\\<Sum>k<length cs - 1. cs ! k * lhr cs fs (n + 1 - length cs + k))", "using False 1"], ["proof (prove)\nusing this:\n  \\<not> n < length fs\n  \\<lbrakk>\\<not> (cs = [] \\<or>\n                   last cs = (0::'a) \\<or> length fs < length cs - 1);\n   \\<not> n < length fs; ?x \\<in> {..<length cs - 1}; cs \\<noteq> [];\n   last cs \\<noteq> (0::'a); length cs - 1 \\<le> length fs;\n   \\<And>n. n < length fs \\<Longrightarrow> f n = fs ! n;\n   \\<And>n.\n      length fs \\<le> n \\<Longrightarrow>\n      (\\<Sum>k<length cs. cs ! k * f (n + 1 - length cs + k)) =\n      (0::'a)\\<rbrakk>\n  \\<Longrightarrow> f (n + 1 - length cs + ?x) =\n                    lhr cs fs (n + 1 - length cs + ?x)\n  cs \\<noteq> []\n  last cs \\<noteq> (0::'a)\n  length cs - 1 \\<le> length fs\n  ?n < length fs \\<Longrightarrow> f ?n = fs ! ?n\n  length fs \\<le> ?n \\<Longrightarrow>\n  (\\<Sum>k<length cs. cs ! k * f (?n + 1 - length cs + k)) = (0::'a)\n\ngoal (1 subgoal):\n 1. (\\<Sum>k<length cs - 1. cs ! k * f (n + 1 - length cs + k)) =\n    (\\<Sum>k<length cs - 1. cs ! k * lhr cs fs (n + 1 - length cs + k))", "by (intro sum.cong refl) simp"], ["proof (state)\nthis:\n  (\\<Sum>k<length cs - 1. cs ! k * f (n + 1 - length cs + k)) =\n  (\\<Sum>k<length cs - 1. cs ! k * lhr cs fs (n + 1 - length cs + k))\n\ngoal (2 subgoals):\n 1. n < length fs \\<Longrightarrow> f n = lhr cs fs n\n 2. \\<not> n < length fs \\<Longrightarrow> f n = lhr cs fs n", "finally"], ["proof (chain)\npicking this:\n  (0::'a) =\n  (\\<Sum>k<length cs - 1. cs ! k * lhr cs fs (n + 1 - length cs + k)) +\n  last cs * f n", "have \"f n = (\\<Sum>k<length cs - 1. cs ! k * lhr cs fs (n + 1 - length cs + k)) / -last cs\""], ["proof (prove)\nusing this:\n  (0::'a) =\n  (\\<Sum>k<length cs - 1. cs ! k * lhr cs fs (n + 1 - length cs + k)) +\n  last cs * f n\n\ngoal (1 subgoal):\n 1. f n =\n    (\\<Sum>k<length cs - 1. cs ! k * lhr cs fs (n + 1 - length cs + k)) /\n    - last cs", "using \\<open>last cs \\<noteq> 0\\<close>"], ["proof (prove)\nusing this:\n  (0::'a) =\n  (\\<Sum>k<length cs - 1. cs ! k * lhr cs fs (n + 1 - length cs + k)) +\n  last cs * f n\n  last cs \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. f n =\n    (\\<Sum>k<length cs - 1. cs ! k * lhr cs fs (n + 1 - length cs + k)) /\n    - last cs", "by (simp add: field_simps eq_neg_iff_add_eq_0)"], ["proof (state)\nthis:\n  f n =\n  (\\<Sum>k<length cs - 1. cs ! k * lhr cs fs (n + 1 - length cs + k)) /\n  - last cs\n\ngoal (2 subgoals):\n 1. n < length fs \\<Longrightarrow> f n = lhr cs fs n\n 2. \\<not> n < length fs \\<Longrightarrow> f n = lhr cs fs n", "also"], ["proof (state)\nthis:\n  f n =\n  (\\<Sum>k<length cs - 1. cs ! k * lhr cs fs (n + 1 - length cs + k)) /\n  - last cs\n\ngoal (2 subgoals):\n 1. n < length fs \\<Longrightarrow> f n = lhr cs fs n\n 2. \\<not> n < length fs \\<Longrightarrow> f n = lhr cs fs n", "from 1(2-4) False"], ["proof (chain)\npicking this:\n  cs \\<noteq> []\n  last cs \\<noteq> (0::'a)\n  length cs - 1 \\<le> length fs\n  \\<not> n < length fs", "have \"\\<dots> = lhr cs fs n\""], ["proof (prove)\nusing this:\n  cs \\<noteq> []\n  last cs \\<noteq> (0::'a)\n  length cs - 1 \\<le> length fs\n  \\<not> n < length fs\n\ngoal (1 subgoal):\n 1. (\\<Sum>k<length cs - 1. cs ! k * lhr cs fs (n + 1 - length cs + k)) /\n    - last cs =\n    lhr cs fs n", "by (subst lhr.simps) simp"], ["proof (state)\nthis:\n  (\\<Sum>k<length cs - 1. cs ! k * lhr cs fs (n + 1 - length cs + k)) /\n  - last cs =\n  lhr cs fs n\n\ngoal (2 subgoals):\n 1. n < length fs \\<Longrightarrow> f n = lhr cs fs n\n 2. \\<not> n < length fs \\<Longrightarrow> f n = lhr cs fs n", "finally"], ["proof (chain)\npicking this:\n  f n = lhr cs fs n", "show ?thesis"], ["proof (prove)\nusing this:\n  f n = lhr cs fs n\n\ngoal (1 subgoal):\n 1. f n = lhr cs fs n", "."], ["proof (state)\nthis:\n  f n = lhr cs fs n\n\ngoal (1 subgoal):\n 1. n < length fs \\<Longrightarrow> f n = lhr cs fs n", "qed (insert 1(2-5), simp add: lhr.simps)"], ["proof (state)\nthis:\n  f n = lhr cs fs n\n\ngoal:\nNo subgoals!", "qed"], ["", "(* END TODO *)"], ["", "locale linear_homogenous_recurrence =\n  fixes f :: \"nat \\<Rightarrow> 'a :: comm_semiring_0\" and cs fs :: \"'a list\"\n  assumes base: \"n < length fs \\<Longrightarrow> f n = fs ! n\"\n  assumes cs_not_null [simp]: \"cs \\<noteq> []\" and last_cs [simp]: \"last cs \\<noteq> 0\"\n      and hd_cs [simp]: \"hd cs \\<noteq> 0\" and enough_base: \"length fs + 1 \\<ge> length cs\"\n  assumes rec:  \"n \\<ge> length fs - length cs \\<Longrightarrow> (\\<Sum>k<length cs. cs ! k * f (n + k)) = 0\"\nbegin"], ["", "lemma lhr_fps_numerator_altdef:\n  \"lhr_fps_numerator (length fs + 1 - length cs) cs f =\n     lhr_fps_numerator (length fs + 1 - length cs) cs ((!) fs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lhr_fps_numerator (length fs + 1 - length cs) cs f =\n    lhr_fps_numerator (length fs + 1 - length cs) cs ((!) fs)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. lhr_fps_numerator (length fs + 1 - length cs) cs f =\n    lhr_fps_numerator (length fs + 1 - length cs) cs ((!) fs)", "define N where \"N = length cs - 1\""], ["proof (state)\nthis:\n  N = length cs - 1\n\ngoal (1 subgoal):\n 1. lhr_fps_numerator (length fs + 1 - length cs) cs f =\n    lhr_fps_numerator (length fs + 1 - length cs) cs ((!) fs)", "define m where \"m = length fs + 1 - length cs\""], ["proof (state)\nthis:\n  m = length fs + 1 - length cs\n\ngoal (1 subgoal):\n 1. lhr_fps_numerator (length fs + 1 - length cs) cs f =\n    lhr_fps_numerator (length fs + 1 - length cs) cs ((!) fs)", "have \"lhr_fps_numerator m cs f = \n          Poly (map (\\<lambda>k. (\\<Sum>i\\<le>min N k. cs ! (N - i) * f (k - i))) [0..<N + m])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lhr_fps_numerator m cs f =\n    Poly\n     (map (\\<lambda>k. \\<Sum>i\\<le>min N k. cs ! (N - i) * f (k - i))\n       [0..<N + m])", "by (simp add: lhr_fps_numerator_def Let_def N_def)"], ["proof (state)\nthis:\n  lhr_fps_numerator m cs f =\n  Poly\n   (map (\\<lambda>k. \\<Sum>i\\<le>min N k. cs ! (N - i) * f (k - i))\n     [0..<N + m])\n\ngoal (1 subgoal):\n 1. lhr_fps_numerator (length fs + 1 - length cs) cs f =\n    lhr_fps_numerator (length fs + 1 - length cs) cs ((!) fs)", "also"], ["proof (state)\nthis:\n  lhr_fps_numerator m cs f =\n  Poly\n   (map (\\<lambda>k. \\<Sum>i\\<le>min N k. cs ! (N - i) * f (k - i))\n     [0..<N + m])\n\ngoal (1 subgoal):\n 1. lhr_fps_numerator (length fs + 1 - length cs) cs f =\n    lhr_fps_numerator (length fs + 1 - length cs) cs ((!) fs)", "from enough_base"], ["proof (chain)\npicking this:\n  length cs \\<le> length fs + 1", "have \"N + m = length fs\""], ["proof (prove)\nusing this:\n  length cs \\<le> length fs + 1\n\ngoal (1 subgoal):\n 1. N + m = length fs", "by (cases cs) (simp_all add: N_def m_def algebra_simps)"], ["proof (state)\nthis:\n  N + m = length fs\n\ngoal (1 subgoal):\n 1. lhr_fps_numerator (length fs + 1 - length cs) cs f =\n    lhr_fps_numerator (length fs + 1 - length cs) cs ((!) fs)", "also"], ["proof (state)\nthis:\n  N + m = length fs\n\ngoal (1 subgoal):\n 1. lhr_fps_numerator (length fs + 1 - length cs) cs f =\n    lhr_fps_numerator (length fs + 1 - length cs) cs ((!) fs)", "{"], ["proof (state)\nthis:\n  N + m = length fs\n\ngoal (1 subgoal):\n 1. lhr_fps_numerator (length fs + 1 - length cs) cs f =\n    lhr_fps_numerator (length fs + 1 - length cs) cs ((!) fs)", "fix k"], ["proof (state)\ngoal (1 subgoal):\n 1. lhr_fps_numerator (length fs + 1 - length cs) cs f =\n    lhr_fps_numerator (length fs + 1 - length cs) cs ((!) fs)", "assume k: \"k \\<in> {0..<length fs}\""], ["proof (state)\nthis:\n  k \\<in> {0..<length fs}\n\ngoal (1 subgoal):\n 1. lhr_fps_numerator (length fs + 1 - length cs) cs f =\n    lhr_fps_numerator (length fs + 1 - length cs) cs ((!) fs)", "hence \"f (k - i) = fs ! (k - i)\" if \"i \\<le> min N k\" for i"], ["proof (prove)\nusing this:\n  k \\<in> {0..<length fs}\n\ngoal (1 subgoal):\n 1. f (k - i) = fs ! (k - i)", "using enough_base that"], ["proof (prove)\nusing this:\n  k \\<in> {0..<length fs}\n  length cs \\<le> length fs + 1\n  i \\<le> min N k\n\ngoal (1 subgoal):\n 1. f (k - i) = fs ! (k - i)", "by (intro base) (auto simp: Suc_le_eq N_def m_def algebra_simps)"], ["proof (state)\nthis:\n  ?i \\<le> min N k \\<Longrightarrow> f (k - ?i) = fs ! (k - ?i)\n\ngoal (1 subgoal):\n 1. lhr_fps_numerator (length fs + 1 - length cs) cs f =\n    lhr_fps_numerator (length fs + 1 - length cs) cs ((!) fs)", "hence \"(\\<Sum>i\\<le>min N k. cs ! (N - i) * f (k - i)) = (\\<Sum>i\\<le>min N k. cs ! (N - i) * fs ! (k - i))\""], ["proof (prove)\nusing this:\n  ?i \\<le> min N k \\<Longrightarrow> f (k - ?i) = fs ! (k - ?i)\n\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<le>min N k. cs ! (N - i) * f (k - i)) =\n    (\\<Sum>i\\<le>min N k. cs ! (N - i) * fs ! (k - i))", "by simp"], ["proof (state)\nthis:\n  (\\<Sum>i\\<le>min N k. cs ! (N - i) * f (k - i)) =\n  (\\<Sum>i\\<le>min N k. cs ! (N - i) * fs ! (k - i))\n\ngoal (1 subgoal):\n 1. lhr_fps_numerator (length fs + 1 - length cs) cs f =\n    lhr_fps_numerator (length fs + 1 - length cs) cs ((!) fs)", "}"], ["proof (state)\nthis:\n  ?k2 \\<in> {0..<length fs} \\<Longrightarrow>\n  (\\<Sum>i\\<le>min N ?k2. cs ! (N - i) * f (?k2 - i)) =\n  (\\<Sum>i\\<le>min N ?k2. cs ! (N - i) * fs ! (?k2 - i))\n\ngoal (1 subgoal):\n 1. lhr_fps_numerator (length fs + 1 - length cs) cs f =\n    lhr_fps_numerator (length fs + 1 - length cs) cs ((!) fs)", "hence \"map (\\<lambda>k. (\\<Sum>i\\<le>min N k. cs ! (N - i) * f (k - i))) [0..<length fs] =\n           map (\\<lambda>k. (\\<Sum>i\\<le>min N k. cs ! (N - i) * fs ! (k - i))) [0..<length fs]\""], ["proof (prove)\nusing this:\n  ?k2 \\<in> {0..<length fs} \\<Longrightarrow>\n  (\\<Sum>i\\<le>min N ?k2. cs ! (N - i) * f (?k2 - i)) =\n  (\\<Sum>i\\<le>min N ?k2. cs ! (N - i) * fs ! (?k2 - i))\n\ngoal (1 subgoal):\n 1. map (\\<lambda>k. \\<Sum>i\\<le>min N k. cs ! (N - i) * f (k - i))\n     [0..<length fs] =\n    map (\\<lambda>k. \\<Sum>i\\<le>min N k. cs ! (N - i) * fs ! (k - i))\n     [0..<length fs]", "by (intro map_cong) simp_all"], ["proof (state)\nthis:\n  map (\\<lambda>k. \\<Sum>i\\<le>min N k. cs ! (N - i) * f (k - i))\n   [0..<length fs] =\n  map (\\<lambda>k. \\<Sum>i\\<le>min N k. cs ! (N - i) * fs ! (k - i))\n   [0..<length fs]\n\ngoal (1 subgoal):\n 1. lhr_fps_numerator (length fs + 1 - length cs) cs f =\n    lhr_fps_numerator (length fs + 1 - length cs) cs ((!) fs)", "also"], ["proof (state)\nthis:\n  map (\\<lambda>k. \\<Sum>i\\<le>min N k. cs ! (N - i) * f (k - i))\n   [0..<length fs] =\n  map (\\<lambda>k. \\<Sum>i\\<le>min N k. cs ! (N - i) * fs ! (k - i))\n   [0..<length fs]\n\ngoal (1 subgoal):\n 1. lhr_fps_numerator (length fs + 1 - length cs) cs f =\n    lhr_fps_numerator (length fs + 1 - length cs) cs ((!) fs)", "have \"Poly \\<dots> = lhr_fps_numerator m cs ((!) fs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Poly\n     (map (\\<lambda>k. \\<Sum>i\\<le>min N k. cs ! (N - i) * fs ! (k - i))\n       [0..<length fs]) =\n    lhr_fps_numerator m cs ((!) fs)", "using enough_base"], ["proof (prove)\nusing this:\n  length cs \\<le> length fs + 1\n\ngoal (1 subgoal):\n 1. Poly\n     (map (\\<lambda>k. \\<Sum>i\\<le>min N k. cs ! (N - i) * fs ! (k - i))\n       [0..<length fs]) =\n    lhr_fps_numerator m cs ((!) fs)", "by (cases cs) (simp_all add: lhr_fps_numerator_def Let_def m_def N_def)"], ["proof (state)\nthis:\n  Poly\n   (map (\\<lambda>k. \\<Sum>i\\<le>min N k. cs ! (N - i) * fs ! (k - i))\n     [0..<length fs]) =\n  lhr_fps_numerator m cs ((!) fs)\n\ngoal (1 subgoal):\n 1. lhr_fps_numerator (length fs + 1 - length cs) cs f =\n    lhr_fps_numerator (length fs + 1 - length cs) cs ((!) fs)", "finally"], ["proof (chain)\npicking this:\n  lhr_fps_numerator m cs f = lhr_fps_numerator m cs ((!) fs)", "show ?thesis"], ["proof (prove)\nusing this:\n  lhr_fps_numerator m cs f = lhr_fps_numerator m cs ((!) fs)\n\ngoal (1 subgoal):\n 1. lhr_fps_numerator (length fs + 1 - length cs) cs f =\n    lhr_fps_numerator (length fs + 1 - length cs) cs ((!) fs)", "unfolding m_def"], ["proof (prove)\nusing this:\n  lhr_fps_numerator (length fs + 1 - length cs) cs f =\n  lhr_fps_numerator (length fs + 1 - length cs) cs ((!) fs)\n\ngoal (1 subgoal):\n 1. lhr_fps_numerator (length fs + 1 - length cs) cs f =\n    lhr_fps_numerator (length fs + 1 - length cs) cs ((!) fs)", "."], ["proof (state)\nthis:\n  lhr_fps_numerator (length fs + 1 - length cs) cs f =\n  lhr_fps_numerator (length fs + 1 - length cs) cs ((!) fs)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "(* TODO Duplication *)"], ["", "lemma solve_lhr_aux:\n  assumes \"linear_homogenous_recurrence f cs fs\"\n  assumes \"is_factorization_of fctrs (lr_fps_denominator' cs)\"\n  shows   \"f = interp_ratfps_solution (solve_factored_ratfps' (lhr_fps_numerator \n                  (length fs + 1 - length cs) cs ((!) fs)) fctrs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f =\n    interp_ratfps_solution\n     (solve_factored_ratfps'\n       (lhr_fps_numerator (length fs + 1 - length cs) cs ((!) fs)) fctrs)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. f =\n    interp_ratfps_solution\n     (solve_factored_ratfps'\n       (lhr_fps_numerator (length fs + 1 - length cs) cs ((!) fs)) fctrs)", "interpret linear_homogenous_recurrence f cs fs"], ["proof (prove)\ngoal (1 subgoal):\n 1. linear_homogenous_recurrence f cs fs", "by fact"], ["proof (state)\ngoal (1 subgoal):\n 1. f =\n    interp_ratfps_solution\n     (solve_factored_ratfps'\n       (lhr_fps_numerator (length fs + 1 - length cs) cs ((!) fs)) fctrs)", "note assms(2)"], ["proof (state)\nthis:\n  is_factorization_of fctrs (lr_fps_denominator' cs)\n\ngoal (1 subgoal):\n 1. f =\n    interp_ratfps_solution\n     (solve_factored_ratfps'\n       (lhr_fps_numerator (length fs + 1 - length cs) cs ((!) fs)) fctrs)", "hence \"is_alt_factorization_of fctrs (reflect_poly (lr_fps_denominator' cs))\""], ["proof (prove)\nusing this:\n  is_factorization_of fctrs (lr_fps_denominator' cs)\n\ngoal (1 subgoal):\n 1. is_alt_factorization_of fctrs (reflect_poly (lr_fps_denominator' cs))", "by (intro reflect_factorization) \n       (simp_all add: lr_fps_denominator'_def\n                      nth_default_def hd_conv_nth [symmetric])"], ["proof (state)\nthis:\n  is_alt_factorization_of fctrs (reflect_poly (lr_fps_denominator' cs))\n\ngoal (1 subgoal):\n 1. f =\n    interp_ratfps_solution\n     (solve_factored_ratfps'\n       (lhr_fps_numerator (length fs + 1 - length cs) cs ((!) fs)) fctrs)", "also"], ["proof (state)\nthis:\n  is_alt_factorization_of fctrs (reflect_poly (lr_fps_denominator' cs))\n\ngoal (1 subgoal):\n 1. f =\n    interp_ratfps_solution\n     (solve_factored_ratfps'\n       (lhr_fps_numerator (length fs + 1 - length cs) cs ((!) fs)) fctrs)", "have \"reflect_poly (lr_fps_denominator' cs) = lr_fps_denominator cs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. reflect_poly (lr_fps_denominator' cs) = lr_fps_denominator cs", "unfolding lr_fps_denominator_def lr_fps_denominator'_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. reflect_poly (Poly cs) = Poly (rev cs)", "by (subst coeffs_eq_iff) (simp add: coeffs_reflect_poly strip_while_rev [symmetric]\n                                 no_trailing_unfold last_rev del: strip_while_rev)"], ["proof (state)\nthis:\n  reflect_poly (lr_fps_denominator' cs) = lr_fps_denominator cs\n\ngoal (1 subgoal):\n 1. f =\n    interp_ratfps_solution\n     (solve_factored_ratfps'\n       (lhr_fps_numerator (length fs + 1 - length cs) cs ((!) fs)) fctrs)", "finally"], ["proof (chain)\npicking this:\n  is_alt_factorization_of fctrs (lr_fps_denominator cs)", "have factorization: \"is_alt_factorization_of fctrs (lr_fps_denominator cs)\""], ["proof (prove)\nusing this:\n  is_alt_factorization_of fctrs (lr_fps_denominator cs)\n\ngoal (1 subgoal):\n 1. is_alt_factorization_of fctrs (lr_fps_denominator cs)", "."], ["proof (state)\nthis:\n  is_alt_factorization_of fctrs (lr_fps_denominator cs)\n\ngoal (1 subgoal):\n 1. f =\n    interp_ratfps_solution\n     (solve_factored_ratfps'\n       (lhr_fps_numerator (length fs + 1 - length cs) cs ((!) fs)) fctrs)", "define m where \"m = length fs + 1 - length cs\""], ["proof (state)\nthis:\n  m = length fs + 1 - length cs\n\ngoal (1 subgoal):\n 1. f =\n    interp_ratfps_solution\n     (solve_factored_ratfps'\n       (lhr_fps_numerator (length fs + 1 - length cs) cs ((!) fs)) fctrs)", "obtain a ds where fctrs: \"fctrs = (a, ds)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>a ds. fctrs = (a, ds) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases fctrs) simp_all"], ["proof (state)\nthis:\n  fctrs = (a, ds)\n\ngoal (1 subgoal):\n 1. f =\n    interp_ratfps_solution\n     (solve_factored_ratfps'\n       (lhr_fps_numerator (length fs + 1 - length cs) cs ((!) fs)) fctrs)", "define p and p' where \"p = lhr_fps_numerator m cs ((!) fs)\" and \"p' = smult (inverse a) p\""], ["proof (state)\nthis:\n  p = lhr_fps_numerator m cs ((!) fs)\n  p' = smult (inverse a) p\n\ngoal (1 subgoal):\n 1. f =\n    interp_ratfps_solution\n     (solve_factored_ratfps'\n       (lhr_fps_numerator (length fs + 1 - length cs) cs ((!) fs)) fctrs)", "obtain b es where sol: \"solve_factored_ratfps' p fctrs = (b, es)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>b es.\n        solve_factored_ratfps' p fctrs = (b, es) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (cases \"solve_factored_ratfps' p fctrs\") simp_all"], ["proof (state)\nthis:\n  solve_factored_ratfps' p fctrs = (b, es)\n\ngoal (1 subgoal):\n 1. f =\n    interp_ratfps_solution\n     (solve_factored_ratfps'\n       (lhr_fps_numerator (length fs + 1 - length cs) cs ((!) fs)) fctrs)", "have sol': \"(b, es) = solve_factored_ratfps p' ds\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (b, es) = solve_factored_ratfps p' ds", "by (subst sol [symmetric]) (simp add: fctrs p'_def solve_factored_ratfps_def \n                                          solve_factored_ratfps'_def case_prod_unfold)"], ["proof (state)\nthis:\n  (b, es) = solve_factored_ratfps p' ds\n\ngoal (1 subgoal):\n 1. f =\n    interp_ratfps_solution\n     (solve_factored_ratfps'\n       (lhr_fps_numerator (length fs + 1 - length cs) cs ((!) fs)) fctrs)", "have factorization': \"lr_fps_denominator cs = interp_alt_factorization fctrs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lr_fps_denominator cs = interp_alt_factorization fctrs", "using factorization"], ["proof (prove)\nusing this:\n  is_alt_factorization_of fctrs (lr_fps_denominator cs)\n\ngoal (1 subgoal):\n 1. lr_fps_denominator cs = interp_alt_factorization fctrs", "by (simp add: is_alt_factorization_of_def)"], ["proof (state)\nthis:\n  lr_fps_denominator cs = interp_alt_factorization fctrs\n\ngoal (1 subgoal):\n 1. f =\n    interp_ratfps_solution\n     (solve_factored_ratfps'\n       (lhr_fps_numerator (length fs + 1 - length cs) cs ((!) fs)) fctrs)", "from assms(2)"], ["proof (chain)\npicking this:\n  is_factorization_of fctrs (lr_fps_denominator' cs)", "have distinct: \"distinct (map fst ds)\""], ["proof (prove)\nusing this:\n  is_factorization_of fctrs (lr_fps_denominator' cs)\n\ngoal (1 subgoal):\n 1. distinct (map fst ds)", "by (simp add: fctrs is_factorization_of_def)"], ["proof (state)\nthis:\n  distinct (map fst ds)\n\ngoal (1 subgoal):\n 1. f =\n    interp_ratfps_solution\n     (solve_factored_ratfps'\n       (lhr_fps_numerator (length fs + 1 - length cs) cs ((!) fs)) fctrs)", "have coeff_0_denom: \"coeff (lr_fps_denominator cs) 0 \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. constant_term (lr_fps_denominator cs) \\<noteq> (0::'a)", "by (simp add: lr_fps_denominator_def nth_default_def \n                  hd_conv_nth [symmetric] hd_rev)"], ["proof (state)\nthis:\n  constant_term (lr_fps_denominator cs) \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. f =\n    interp_ratfps_solution\n     (solve_factored_ratfps'\n       (lhr_fps_numerator (length fs + 1 - length cs) cs ((!) fs)) fctrs)", "have \"coeff (lr_fps_denominator' cs) 0 \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. constant_term (lr_fps_denominator' cs) \\<noteq> (0::'a)", "by (simp add: lr_fps_denominator'_def nth_default_def hd_conv_nth [symmetric])"], ["proof (state)\nthis:\n  constant_term (lr_fps_denominator' cs) \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. f =\n    interp_ratfps_solution\n     (solve_factored_ratfps'\n       (lhr_fps_numerator (length fs + 1 - length cs) cs ((!) fs)) fctrs)", "with assms(2)"], ["proof (chain)\npicking this:\n  is_factorization_of fctrs (lr_fps_denominator' cs)\n  constant_term (lr_fps_denominator' cs) \\<noteq> (0::'a)", "have no_zero: \"0 \\<notin> fst ` set ds\""], ["proof (prove)\nusing this:\n  is_factorization_of fctrs (lr_fps_denominator' cs)\n  constant_term (lr_fps_denominator' cs) \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. (0::'a) \\<notin> fst ` set ds", "by (simp add: zero_in_factorization_iff fctrs)"], ["proof (state)\nthis:\n  (0::'a) \\<notin> fst ` set ds\n\ngoal (1 subgoal):\n 1. f =\n    interp_ratfps_solution\n     (solve_factored_ratfps'\n       (lhr_fps_numerator (length fs + 1 - length cs) cs ((!) fs)) fctrs)", "from assms(2)"], ["proof (chain)\npicking this:\n  is_factorization_of fctrs (lr_fps_denominator' cs)", "have a_nz [simp]: \"a \\<noteq> 0\""], ["proof (prove)\nusing this:\n  is_factorization_of fctrs (lr_fps_denominator' cs)\n\ngoal (1 subgoal):\n 1. a \\<noteq> (0::'a)", "by (auto simp: fctrs interp_factorization_def is_factorization_of_def lr_fps_denominator'_nz)"], ["proof (state)\nthis:\n  a \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. f =\n    interp_ratfps_solution\n     (solve_factored_ratfps'\n       (lhr_fps_numerator (length fs + 1 - length cs) cs ((!) fs)) fctrs)", "hence unit1: \"is_unit (fps_const a)\""], ["proof (prove)\nusing this:\n  a \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. is_unit (fps_const a)", "by simp"], ["proof (state)\nthis:\n  is_unit (fps_const a)\n\ngoal (1 subgoal):\n 1. f =\n    interp_ratfps_solution\n     (solve_factored_ratfps'\n       (lhr_fps_numerator (length fs + 1 - length cs) cs ((!) fs)) fctrs)", "moreover"], ["proof (state)\nthis:\n  is_unit (fps_const a)\n\ngoal (1 subgoal):\n 1. f =\n    interp_ratfps_solution\n     (solve_factored_ratfps'\n       (lhr_fps_numerator (length fs + 1 - length cs) cs ((!) fs)) fctrs)", "have \"is_unit (fps_of_poly (interp_alt_factorization fctrs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_unit (fps_of_poly (interp_alt_factorization fctrs))", "by (simp add: coeff_0_denom factorization' [symmetric])"], ["proof (state)\nthis:\n  is_unit (fps_of_poly (interp_alt_factorization fctrs))\n\ngoal (1 subgoal):\n 1. f =\n    interp_ratfps_solution\n     (solve_factored_ratfps'\n       (lhr_fps_numerator (length fs + 1 - length cs) cs ((!) fs)) fctrs)", "ultimately"], ["proof (chain)\npicking this:\n  is_unit (fps_const a)\n  is_unit (fps_of_poly (interp_alt_factorization fctrs))", "have unit2: \"is_unit (fps_of_poly (\\<Prod>p\\<leftarrow>ds. [:1, - fst p:] ^ Suc (snd p)))\""], ["proof (prove)\nusing this:\n  is_unit (fps_const a)\n  is_unit (fps_of_poly (interp_alt_factorization fctrs))\n\ngoal (1 subgoal):\n 1. is_unit\n     (fps_of_poly\n       (\\<Prod>p\\<leftarrow>ds. [:1::'a, - fst p:] ^ Suc (snd p)))", "by (simp add: fctrs case_prod_unfold interp_alt_factorization_def del: power_Suc)"], ["proof (state)\nthis:\n  is_unit\n   (fps_of_poly (\\<Prod>p\\<leftarrow>ds. [:1::'a, - fst p:] ^ Suc (snd p)))\n\ngoal (1 subgoal):\n 1. f =\n    interp_ratfps_solution\n     (solve_factored_ratfps'\n       (lhr_fps_numerator (length fs + 1 - length cs) cs ((!) fs)) fctrs)", "have \"Abs_fps f = fps_of_poly (lhr_fps_numerator m cs f) /\n                        fps_of_poly (lr_fps_denominator cs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Abs_fps f =\n    fps_of_poly (lhr_fps_numerator m cs f) /\n    fps_of_poly (lr_fps_denominator cs)", "proof (intro lhr_fps)"], ["proof (state)\ngoal (3 subgoals):\n 1. cs \\<noteq> []\n 2. \\<And>n.\n       m \\<le> n \\<Longrightarrow>\n       (\\<Sum>k\\<le>length cs - 1. cs ! k * f (n + k)) = (0::'a)\n 3. last cs \\<noteq> (0::'a)", "fix n"], ["proof (state)\ngoal (3 subgoals):\n 1. cs \\<noteq> []\n 2. \\<And>n.\n       m \\<le> n \\<Longrightarrow>\n       (\\<Sum>k\\<le>length cs - 1. cs ! k * f (n + k)) = (0::'a)\n 3. last cs \\<noteq> (0::'a)", "assume n: \"n \\<ge> m\""], ["proof (state)\nthis:\n  m \\<le> n\n\ngoal (3 subgoals):\n 1. cs \\<noteq> []\n 2. \\<And>n.\n       m \\<le> n \\<Longrightarrow>\n       (\\<Sum>k\\<le>length cs - 1. cs ! k * f (n + k)) = (0::'a)\n 3. last cs \\<noteq> (0::'a)", "have \"{..length cs - 1} = {..<length cs}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {..length cs - 1} = {..<length cs}", "by (cases cs) auto"], ["proof (state)\nthis:\n  {..length cs - 1} = {..<length cs}\n\ngoal (3 subgoals):\n 1. cs \\<noteq> []\n 2. \\<And>n.\n       m \\<le> n \\<Longrightarrow>\n       (\\<Sum>k\\<le>length cs - 1. cs ! k * f (n + k)) = (0::'a)\n 3. last cs \\<noteq> (0::'a)", "also"], ["proof (state)\nthis:\n  {..length cs - 1} = {..<length cs}\n\ngoal (3 subgoals):\n 1. cs \\<noteq> []\n 2. \\<And>n.\n       m \\<le> n \\<Longrightarrow>\n       (\\<Sum>k\\<le>length cs - 1. cs ! k * f (n + k)) = (0::'a)\n 3. last cs \\<noteq> (0::'a)", "from n"], ["proof (chain)\npicking this:\n  m \\<le> n", "have \"(\\<Sum>k\\<in>\\<dots> . cs ! k * f (n + k)) = 0\""], ["proof (prove)\nusing this:\n  m \\<le> n\n\ngoal (1 subgoal):\n 1. (\\<Sum>k<length cs. cs ! k * f (n + k)) = (0::'a)", "by (intro rec) (simp_all add: m_def algebra_simps)"], ["proof (state)\nthis:\n  (\\<Sum>k<length cs. cs ! k * f (n + k)) = (0::'a)\n\ngoal (3 subgoals):\n 1. cs \\<noteq> []\n 2. \\<And>n.\n       m \\<le> n \\<Longrightarrow>\n       (\\<Sum>k\\<le>length cs - 1. cs ! k * f (n + k)) = (0::'a)\n 3. last cs \\<noteq> (0::'a)", "finally"], ["proof (chain)\npicking this:\n  (\\<Sum>k\\<le>length cs - 1. cs ! k * f (n + k)) = (0::'a)", "show \"(\\<Sum>k\\<le>length cs - 1. cs ! k * f (n + k)) = 0\""], ["proof (prove)\nusing this:\n  (\\<Sum>k\\<le>length cs - 1. cs ! k * f (n + k)) = (0::'a)\n\ngoal (1 subgoal):\n 1. (\\<Sum>k\\<le>length cs - 1. cs ! k * f (n + k)) = (0::'a)", "."], ["proof (state)\nthis:\n  (\\<Sum>k\\<le>length cs - 1. cs ! k * f (n + k)) = (0::'a)\n\ngoal (2 subgoals):\n 1. cs \\<noteq> []\n 2. last cs \\<noteq> (0::'a)", "qed (simp_all add: m_def)"], ["proof (state)\nthis:\n  Abs_fps f =\n  fps_of_poly (lhr_fps_numerator m cs f) /\n  fps_of_poly (lr_fps_denominator cs)\n\ngoal (1 subgoal):\n 1. f =\n    interp_ratfps_solution\n     (solve_factored_ratfps'\n       (lhr_fps_numerator (length fs + 1 - length cs) cs ((!) fs)) fctrs)", "also"], ["proof (state)\nthis:\n  Abs_fps f =\n  fps_of_poly (lhr_fps_numerator m cs f) /\n  fps_of_poly (lr_fps_denominator cs)\n\ngoal (1 subgoal):\n 1. f =\n    interp_ratfps_solution\n     (solve_factored_ratfps'\n       (lhr_fps_numerator (length fs + 1 - length cs) cs ((!) fs)) fctrs)", "have \"lhr_fps_numerator m cs f = lhr_fps_numerator m cs ((!) fs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lhr_fps_numerator m cs f = lhr_fps_numerator m cs ((!) fs)", "unfolding lhr_fps_numerator_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (let N = length cs - 1\n     in Poly\n         (map (\\<lambda>k. \\<Sum>i\\<le>min N k. cs ! (N - i) * f (k - i))\n           [0..<N + m])) =\n    (let N = length cs - 1\n     in Poly\n         (map (\\<lambda>k. \\<Sum>i\\<le>min N k. cs ! (N - i) * fs ! (k - i))\n           [0..<N + m]))", "using enough_base"], ["proof (prove)\nusing this:\n  length cs \\<le> length fs + 1\n\ngoal (1 subgoal):\n 1. (let N = length cs - 1\n     in Poly\n         (map (\\<lambda>k. \\<Sum>i\\<le>min N k. cs ! (N - i) * f (k - i))\n           [0..<N + m])) =\n    (let N = length cs - 1\n     in Poly\n         (map (\\<lambda>k. \\<Sum>i\\<le>min N k. cs ! (N - i) * fs ! (k - i))\n           [0..<N + m]))", "by (auto simp: Let_def poly_eq_iff nth_default_def base \n                   m_def Suc_le_eq intro!: sum.cong)"], ["proof (state)\nthis:\n  lhr_fps_numerator m cs f = lhr_fps_numerator m cs ((!) fs)\n\ngoal (1 subgoal):\n 1. f =\n    interp_ratfps_solution\n     (solve_factored_ratfps'\n       (lhr_fps_numerator (length fs + 1 - length cs) cs ((!) fs)) fctrs)", "also"], ["proof (state)\nthis:\n  lhr_fps_numerator m cs f = lhr_fps_numerator m cs ((!) fs)\n\ngoal (1 subgoal):\n 1. f =\n    interp_ratfps_solution\n     (solve_factored_ratfps'\n       (lhr_fps_numerator (length fs + 1 - length cs) cs ((!) fs)) fctrs)", "have \"fps_of_poly \\<dots> / fps_of_poly (lr_fps_denominator cs) = \n               fps_of_poly (lhr_fps_numerator m cs ((!) fs)) / \n                 (fps_const (fst fctrs) * \n                   fps_of_poly (\\<Prod>p\\<leftarrow>snd fctrs. [:1, - fst p:] ^ Suc (snd p)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fps_of_poly (lhr_fps_numerator m cs ((!) fs)) /\n    fps_of_poly (lr_fps_denominator cs) =\n    fps_of_poly (lhr_fps_numerator m cs ((!) fs)) /\n    (fps_const (fst fctrs) *\n     fps_of_poly\n      (\\<Prod>p\\<leftarrow>snd fctrs. [:1::'a, - fst p:] ^ Suc (snd p)))", "unfolding assms factorization' interp_alt_factorization_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. fps_of_poly (lhr_fps_numerator m cs ((!) fs)) /\n    fps_of_poly\n     (case fctrs of\n      (a, cs) \\<Rightarrow>\n        smult a (\\<Prod>(c, n)\\<leftarrow>cs. [:1::'a, - c:] ^ Suc n)) =\n    fps_of_poly (lhr_fps_numerator m cs ((!) fs)) /\n    (fps_const (fst fctrs) *\n     fps_of_poly\n      (\\<Prod>p\\<leftarrow>snd fctrs. [:1::'a, - fst p:] ^ Suc (snd p)))", "by (simp add: case_prod_unfold Let_def fps_of_poly_smult)"], ["proof (state)\nthis:\n  fps_of_poly (lhr_fps_numerator m cs ((!) fs)) /\n  fps_of_poly (lr_fps_denominator cs) =\n  fps_of_poly (lhr_fps_numerator m cs ((!) fs)) /\n  (fps_const (fst fctrs) *\n   fps_of_poly\n    (\\<Prod>p\\<leftarrow>snd fctrs. [:1::'a, - fst p:] ^ Suc (snd p)))\n\ngoal (1 subgoal):\n 1. f =\n    interp_ratfps_solution\n     (solve_factored_ratfps'\n       (lhr_fps_numerator (length fs + 1 - length cs) cs ((!) fs)) fctrs)", "also"], ["proof (state)\nthis:\n  fps_of_poly (lhr_fps_numerator m cs ((!) fs)) /\n  fps_of_poly (lr_fps_denominator cs) =\n  fps_of_poly (lhr_fps_numerator m cs ((!) fs)) /\n  (fps_const (fst fctrs) *\n   fps_of_poly\n    (\\<Prod>p\\<leftarrow>snd fctrs. [:1::'a, - fst p:] ^ Suc (snd p)))\n\ngoal (1 subgoal):\n 1. f =\n    interp_ratfps_solution\n     (solve_factored_ratfps'\n       (lhr_fps_numerator (length fs + 1 - length cs) cs ((!) fs)) fctrs)", "from unit1 unit2"], ["proof (chain)\npicking this:\n  is_unit (fps_const a)\n  is_unit\n   (fps_of_poly (\\<Prod>p\\<leftarrow>ds. [:1::'a, - fst p:] ^ Suc (snd p)))", "have \"\\<dots> = fps_of_poly p / fps_const a / \n                                     fps_of_poly (\\<Prod>(c,n)\\<leftarrow>ds. [:1, -c:]^Suc n)\""], ["proof (prove)\nusing this:\n  is_unit (fps_const a)\n  is_unit\n   (fps_of_poly (\\<Prod>p\\<leftarrow>ds. [:1::'a, - fst p:] ^ Suc (snd p)))\n\ngoal (1 subgoal):\n 1. fps_of_poly (lhr_fps_numerator m cs ((!) fs)) /\n    (fps_const (fst fctrs) *\n     fps_of_poly\n      (\\<Prod>p\\<leftarrow>snd fctrs. [:1::'a, - fst p:] ^ Suc (snd p))) =\n    fps_of_poly p / fps_const a /\n    fps_of_poly (\\<Prod>(c, n)\\<leftarrow>ds. [:1::'a, - c:] ^ Suc n)", "by (subst is_unit_div_mult2_eq) (simp_all add: fctrs case_prod_unfold p_def)"], ["proof (state)\nthis:\n  fps_of_poly (lhr_fps_numerator m cs ((!) fs)) /\n  (fps_const (fst fctrs) *\n   fps_of_poly\n    (\\<Prod>p\\<leftarrow>snd fctrs. [:1::'a, - fst p:] ^ Suc (snd p))) =\n  fps_of_poly p / fps_const a /\n  fps_of_poly (\\<Prod>(c, n)\\<leftarrow>ds. [:1::'a, - c:] ^ Suc n)\n\ngoal (1 subgoal):\n 1. f =\n    interp_ratfps_solution\n     (solve_factored_ratfps'\n       (lhr_fps_numerator (length fs + 1 - length cs) cs ((!) fs)) fctrs)", "also"], ["proof (state)\nthis:\n  fps_of_poly (lhr_fps_numerator m cs ((!) fs)) /\n  (fps_const (fst fctrs) *\n   fps_of_poly\n    (\\<Prod>p\\<leftarrow>snd fctrs. [:1::'a, - fst p:] ^ Suc (snd p))) =\n  fps_of_poly p / fps_const a /\n  fps_of_poly (\\<Prod>(c, n)\\<leftarrow>ds. [:1::'a, - c:] ^ Suc n)\n\ngoal (1 subgoal):\n 1. f =\n    interp_ratfps_solution\n     (solve_factored_ratfps'\n       (lhr_fps_numerator (length fs + 1 - length cs) cs ((!) fs)) fctrs)", "from unit1"], ["proof (chain)\npicking this:\n  is_unit (fps_const a)", "have \"fps_of_poly p / fps_const a = fps_of_poly p'\""], ["proof (prove)\nusing this:\n  is_unit (fps_const a)\n\ngoal (1 subgoal):\n 1. fps_of_poly p / fps_const a = fps_of_poly p'", "by (simp add: fps_divide_unit fps_of_poly_smult fps_const_inverse p'_def)"], ["proof (state)\nthis:\n  fps_of_poly p / fps_const a = fps_of_poly p'\n\ngoal (1 subgoal):\n 1. f =\n    interp_ratfps_solution\n     (solve_factored_ratfps'\n       (lhr_fps_numerator (length fs + 1 - length cs) cs ((!) fs)) fctrs)", "also"], ["proof (state)\nthis:\n  fps_of_poly p / fps_const a = fps_of_poly p'\n\ngoal (1 subgoal):\n 1. f =\n    interp_ratfps_solution\n     (solve_factored_ratfps'\n       (lhr_fps_numerator (length fs + 1 - length cs) cs ((!) fs)) fctrs)", "from distinct no_zero"], ["proof (chain)\npicking this:\n  distinct (map fst ds)\n  (0::'a) \\<notin> fst ` set ds", "have \"\\<dots> / fps_of_poly (\\<Prod>(c,n)\\<leftarrow>ds. [:1, -c:]^Suc n) = \n      Abs_fps (interp_ratfps_solution (solve_factored_ratfps' p fctrs))\""], ["proof (prove)\nusing this:\n  distinct (map fst ds)\n  (0::'a) \\<notin> fst ` set ds\n\ngoal (1 subgoal):\n 1. fps_of_poly p' /\n    fps_of_poly (\\<Prod>(c, n)\\<leftarrow>ds. [:1::'a, - c:] ^ Suc n) =\n    Abs_fps (interp_ratfps_solution (solve_factored_ratfps' p fctrs))", "by (subst solve_factored_ratfps) (simp_all add: case_prod_unfold sol' sol)"], ["proof (state)\nthis:\n  fps_of_poly p' /\n  fps_of_poly (\\<Prod>(c, n)\\<leftarrow>ds. [:1::'a, - c:] ^ Suc n) =\n  Abs_fps (interp_ratfps_solution (solve_factored_ratfps' p fctrs))\n\ngoal (1 subgoal):\n 1. f =\n    interp_ratfps_solution\n     (solve_factored_ratfps'\n       (lhr_fps_numerator (length fs + 1 - length cs) cs ((!) fs)) fctrs)", "finally"], ["proof (chain)\npicking this:\n  Abs_fps f =\n  Abs_fps (interp_ratfps_solution (solve_factored_ratfps' p fctrs))", "show ?thesis"], ["proof (prove)\nusing this:\n  Abs_fps f =\n  Abs_fps (interp_ratfps_solution (solve_factored_ratfps' p fctrs))\n\ngoal (1 subgoal):\n 1. f =\n    interp_ratfps_solution\n     (solve_factored_ratfps'\n       (lhr_fps_numerator (length fs + 1 - length cs) cs ((!) fs)) fctrs)", "unfolding p_def m_def"], ["proof (prove)\nusing this:\n  Abs_fps f =\n  Abs_fps\n   (interp_ratfps_solution\n     (solve_factored_ratfps'\n       (lhr_fps_numerator (length fs + 1 - length cs) cs ((!) fs)) fctrs))\n\ngoal (1 subgoal):\n 1. f =\n    interp_ratfps_solution\n     (solve_factored_ratfps'\n       (lhr_fps_numerator (length fs + 1 - length cs) cs ((!) fs)) fctrs)", "by (intro ext) (simp add: fps_eq_iff)"], ["proof (state)\nthis:\n  f =\n  interp_ratfps_solution\n   (solve_factored_ratfps'\n     (lhr_fps_numerator (length fs + 1 - length cs) cs ((!) fs)) fctrs)\n\ngoal:\nNo subgoals!", "qed"], ["", "definition\n  \"lhr_fps as fs = (\n     let m = length fs + 1 - length as;\n         p = lhr_fps_numerator m as (\\<lambda>n. fs ! n);\n         q = lr_fps_denominator as\n     in  ratfps_of_poly p / ratfps_of_poly q)\""], ["", "lemma lhr_fps_correct:\n  fixes   f :: \"nat \\<Rightarrow> 'a :: {field_char_0,field_gcd}\"\n  assumes \"linear_homogenous_recurrence f cs fs\"\n  shows   \"fps_of_ratfps (lhr_fps cs fs) = Abs_fps f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fps_of_ratfps (lhr_fps cs fs) = Abs_fps f", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. fps_of_ratfps (lhr_fps cs fs) = Abs_fps f", "interpret linear_homogenous_recurrence f cs fs"], ["proof (prove)\ngoal (1 subgoal):\n 1. linear_homogenous_recurrence f cs fs", "by fact"], ["proof (state)\ngoal (1 subgoal):\n 1. fps_of_ratfps (lhr_fps cs fs) = Abs_fps f", "define m where \"m = length fs + 1 - length cs\""], ["proof (state)\nthis:\n  m = length fs + 1 - length cs\n\ngoal (1 subgoal):\n 1. fps_of_ratfps (lhr_fps cs fs) = Abs_fps f", "let ?num = \"lhr_fps_numerator m cs f\""], ["proof (state)\ngoal (1 subgoal):\n 1. fps_of_ratfps (lhr_fps cs fs) = Abs_fps f", "let ?num' = \"lhr_fps_numerator m cs ((!) fs)\""], ["proof (state)\ngoal (1 subgoal):\n 1. fps_of_ratfps (lhr_fps cs fs) = Abs_fps f", "let ?denom = \"lr_fps_denominator cs\""], ["proof (state)\ngoal (1 subgoal):\n 1. fps_of_ratfps (lhr_fps cs fs) = Abs_fps f", "have \"{..length cs - 1} = {..<length cs}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {..length cs - 1} = {..<length cs}", "by (cases cs) auto"], ["proof (state)\nthis:\n  {..length cs - 1} = {..<length cs}\n\ngoal (1 subgoal):\n 1. fps_of_ratfps (lhr_fps cs fs) = Abs_fps f", "moreover"], ["proof (state)\nthis:\n  {..length cs - 1} = {..<length cs}\n\ngoal (1 subgoal):\n 1. fps_of_ratfps (lhr_fps cs fs) = Abs_fps f", "have \"length cs \\<ge> 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 \\<le> length cs", "by (cases cs) auto"], ["proof (state)\nthis:\n  1 \\<le> length cs\n\ngoal (1 subgoal):\n 1. fps_of_ratfps (lhr_fps cs fs) = Abs_fps f", "ultimately"], ["proof (chain)\npicking this:\n  {..length cs - 1} = {..<length cs}\n  1 \\<le> length cs", "have \"Abs_fps f = fps_of_poly ?num / fps_of_poly ?denom\""], ["proof (prove)\nusing this:\n  {..length cs - 1} = {..<length cs}\n  1 \\<le> length cs\n\ngoal (1 subgoal):\n 1. Abs_fps f =\n    fps_of_poly (lhr_fps_numerator m cs f) /\n    fps_of_poly (lr_fps_denominator cs)", "by (intro lhr_fps) (insert rec, simp_all add: m_def)"], ["proof (state)\nthis:\n  Abs_fps f =\n  fps_of_poly (lhr_fps_numerator m cs f) /\n  fps_of_poly (lr_fps_denominator cs)\n\ngoal (1 subgoal):\n 1. fps_of_ratfps (lhr_fps cs fs) = Abs_fps f", "also"], ["proof (state)\nthis:\n  Abs_fps f =\n  fps_of_poly (lhr_fps_numerator m cs f) /\n  fps_of_poly (lr_fps_denominator cs)\n\ngoal (1 subgoal):\n 1. fps_of_ratfps (lhr_fps cs fs) = Abs_fps f", "have \"?num = ?num'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lhr_fps_numerator m cs f = lhr_fps_numerator m cs ((!) fs)", "by (rule lhr_fps_numerator_altdef [folded m_def])"], ["proof (state)\nthis:\n  lhr_fps_numerator m cs f = lhr_fps_numerator m cs ((!) fs)\n\ngoal (1 subgoal):\n 1. fps_of_ratfps (lhr_fps cs fs) = Abs_fps f", "also"], ["proof (state)\nthis:\n  lhr_fps_numerator m cs f = lhr_fps_numerator m cs ((!) fs)\n\ngoal (1 subgoal):\n 1. fps_of_ratfps (lhr_fps cs fs) = Abs_fps f", "have \"fps_of_poly ?num' / fps_of_poly ?denom = \n                fps_of_ratfps (ratfps_of_poly ?num' / ratfps_of_poly ?denom)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fps_of_poly (lhr_fps_numerator m cs ((!) fs)) /\n    fps_of_poly (lr_fps_denominator cs) =\n    fps_of_ratfps\n     (ratfps_of_poly (lhr_fps_numerator m cs ((!) fs)) /\n      ratfps_of_poly (lr_fps_denominator cs))", "by simp"], ["proof (state)\nthis:\n  fps_of_poly (lhr_fps_numerator m cs ((!) fs)) /\n  fps_of_poly (lr_fps_denominator cs) =\n  fps_of_ratfps\n   (ratfps_of_poly (lhr_fps_numerator m cs ((!) fs)) /\n    ratfps_of_poly (lr_fps_denominator cs))\n\ngoal (1 subgoal):\n 1. fps_of_ratfps (lhr_fps cs fs) = Abs_fps f", "also"], ["proof (state)\nthis:\n  fps_of_poly (lhr_fps_numerator m cs ((!) fs)) /\n  fps_of_poly (lr_fps_denominator cs) =\n  fps_of_ratfps\n   (ratfps_of_poly (lhr_fps_numerator m cs ((!) fs)) /\n    ratfps_of_poly (lr_fps_denominator cs))\n\ngoal (1 subgoal):\n 1. fps_of_ratfps (lhr_fps cs fs) = Abs_fps f", "from enough_base"], ["proof (chain)\npicking this:\n  length cs \\<le> length fs + 1", "have \"\\<dots> = fps_of_ratfps (lhr_fps cs fs)\""], ["proof (prove)\nusing this:\n  length cs \\<le> length fs + 1\n\ngoal (1 subgoal):\n 1. fps_of_ratfps\n     (ratfps_of_poly (lhr_fps_numerator m cs ((!) fs)) /\n      ratfps_of_poly (lr_fps_denominator cs)) =\n    fps_of_ratfps (lhr_fps cs fs)", "by (cases cs)  (simp_all add: base fps_of_ratfps_def case_prod_unfold lhr_fps_def m_def)"], ["proof (state)\nthis:\n  fps_of_ratfps\n   (ratfps_of_poly (lhr_fps_numerator m cs ((!) fs)) /\n    ratfps_of_poly (lr_fps_denominator cs)) =\n  fps_of_ratfps (lhr_fps cs fs)\n\ngoal (1 subgoal):\n 1. fps_of_ratfps (lhr_fps cs fs) = Abs_fps f", "finally"], ["proof (chain)\npicking this:\n  Abs_fps f = fps_of_ratfps (lhr_fps cs fs)", "show ?thesis"], ["proof (prove)\nusing this:\n  Abs_fps f = fps_of_ratfps (lhr_fps cs fs)\n\ngoal (1 subgoal):\n 1. fps_of_ratfps (lhr_fps cs fs) = Abs_fps f", ".."], ["proof (state)\nthis:\n  fps_of_ratfps (lhr_fps cs fs) = Abs_fps f\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}