{"file_name": "/home/qj213/afp-2021-10-22/thys/Linear_Recurrences/Linear_Inhomogenous_Recurrences.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Linear_Recurrences", "problem_names": ["lemma lir_fps_numerator_code [code abstract]:\n  \"coeffs (lir_fps_numerator m cs f g) = (let N = length cs - 1 in \n     strip_while ((=) 0) [(\\<Sum>i\\<le>min N k. cs ! (N - i) * f (k - i)) - g k. k \\<leftarrow> [0..<N+m]])\"", "lemma coeff_0_lr_fps_denominator [simp]: \"coeff (lr_fps_denominator cs) 0 = last cs\"", "lemma lir_fps_numerator_altdef:\n  \"lir_fps_numerator (length fs + 1 - length cs) cs f g =\n     lir_fps_numerator (length fs + 1 - length cs) cs ((!) fs) g\"", "lemma lir_fps_aux:\n  fixes f :: \"nat \\<Rightarrow> 'a :: field\"\n  assumes rec: \"\\<And>n. n \\<ge> m \\<Longrightarrow> (\\<Sum>k\\<le>N. c k * f (n + k)) = g (n + N)\"\n  assumes cN: \"c N \\<noteq> 0\"\n  defines \"p \\<equiv> Poly [c (N - k). k \\<leftarrow> [0..<Suc N]]\"\n  defines \"q \\<equiv> Poly [(\\<Sum>i\\<le>min N k. c (N - i) * f (k - i)) - g k. k \\<leftarrow> [0..<N+m]]\"\n  shows   \"Abs_fps f = (fps_of_poly q + Abs_fps g) / fps_of_poly p\"", "lemma lir_fps:\n  fixes f g :: \"nat \\<Rightarrow> 'a :: field\" and cs :: \"'a list\"\n  defines \"N \\<equiv> length cs - 1\"\n  assumes cs: \"cs \\<noteq> []\"\n  assumes \"\\<And>n. n \\<ge> m \\<Longrightarrow> (\\<Sum>k\\<le>N. cs ! k * f (n + k)) = g (n + N)\"\n  assumes cN: \"last cs \\<noteq> 0\"\n  shows   \"Abs_fps f = (fps_of_poly (lir_fps_numerator m cs f g) + Abs_fps g) / \n              fps_of_poly (lr_fps_denominator cs)\"", "lemma eval_polyexp_Nil [simp]: \"eval_polyexp [] = (\\<lambda>_. 0)\"", "lemma eval_polyexp_Cons: \n  \"eval_polyexp (x#xs) = (\\<lambda>n. (case x of (a,k,b) \\<Rightarrow> a * of_nat n ^ k * b ^ n) + eval_polyexp xs n)\"", "lemma polyexp_fps_Nil [simp]: \"polyexp_fps [] = 0\"", "lemma polyexp_fps_Cons: \n  \"polyexp_fps (x#xs) = (case x of (a,k,b) \\<Rightarrow> \n     fps_of_poly (Polynomial.smult a (fps_monom_poly b k)) / (1 - fps_const b * fps_X) ^ (k + 1)) + \n     polyexp_fps xs\"", "lemma polyexp_ratfps_Nil [simp]: \"polyexp_ratfps [] = 0\"", "lemma polyexp_ratfps_Cons: \"polyexp_ratfps (x#xs) = (case x of (a,k,b) \\<Rightarrow>\n  ratfps_of_poly (Polynomial.smult a (fps_monom_poly b k)) / \n     ratfps_of_poly ([:1, -b:] ^ (k + 1))) + polyexp_ratfps xs\"", "lemma polyexp_fps: \"Abs_fps (eval_polyexp xs) = polyexp_fps xs\"", "lemma polyexp_ratfps [simp]: \"fps_of_ratfps (polyexp_ratfps xs) = polyexp_fps xs\"", "lemma lir_fps_correct:\n  fixes   f :: \"nat \\<Rightarrow> 'a :: field_gcd\"\n  assumes \"linear_inhomogenous_recurrence f (eval_polyexp g) cs fs\"\n  shows   \"map_option fps_of_ratfps (lir_fps cs fs g) = Some (Abs_fps f)\""], "translations": [["", "lemma lir_fps_numerator_code [code abstract]:\n  \"coeffs (lir_fps_numerator m cs f g) = (let N = length cs - 1 in \n     strip_while ((=) 0) [(\\<Sum>i\\<le>min N k. cs ! (N - i) * f (k - i)) - g k. k \\<leftarrow> [0..<N+m]])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. coeffs (lir_fps_numerator m cs f g) =\n    (let N = length cs - 1\n     in strip_while ((=) (0::'a))\n         (map (\\<lambda>k.\n                  (\\<Sum>i\\<le>min N k. cs ! (N - i) * f (k - i)) - g k)\n           [0..<N + m]))", "by (simp add: lir_fps_numerator_def Let_def)"], ["", "locale linear_inhomogenous_recurrence =\n  fixes f g :: \"nat \\<Rightarrow> 'a :: comm_ring\" and cs fs :: \"'a list\"\n  assumes base: \"n < length fs \\<Longrightarrow> f n = fs ! n\"\n  assumes cs_not_null [simp]: \"cs \\<noteq> []\" and last_cs [simp]: \"last cs \\<noteq> 0\"\n      and hd_cs [simp]: \"hd cs \\<noteq> 0\" and enough_base: \"length fs + 1 \\<ge> length cs\"\n  assumes rec:  \"n \\<ge> length fs + 1 - length cs \\<Longrightarrow> \n                     (\\<Sum>k<length cs. cs ! k * f (n + k)) = g (n + length cs - 1)\"\nbegin"], ["", "lemma coeff_0_lr_fps_denominator [simp]: \"coeff (lr_fps_denominator cs) 0 = last cs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. constant_term (lr_fps_denominator cs) = last cs", "by (auto simp: lr_fps_denominator_def nth_default_def nth_Cons hd_conv_nth [symmetric] hd_rev)"], ["", "lemma lir_fps_numerator_altdef:\n  \"lir_fps_numerator (length fs + 1 - length cs) cs f g =\n     lir_fps_numerator (length fs + 1 - length cs) cs ((!) fs) g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lir_fps_numerator (length fs + 1 - length cs) cs f g =\n    lir_fps_numerator (length fs + 1 - length cs) cs ((!) fs) g", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. lir_fps_numerator (length fs + 1 - length cs) cs f g =\n    lir_fps_numerator (length fs + 1 - length cs) cs ((!) fs) g", "define N where \"N = length cs - 1\""], ["proof (state)\nthis:\n  N = length cs - 1\n\ngoal (1 subgoal):\n 1. lir_fps_numerator (length fs + 1 - length cs) cs f g =\n    lir_fps_numerator (length fs + 1 - length cs) cs ((!) fs) g", "define m where \"m = length fs + 1 - length cs\""], ["proof (state)\nthis:\n  m = length fs + 1 - length cs\n\ngoal (1 subgoal):\n 1. lir_fps_numerator (length fs + 1 - length cs) cs f g =\n    lir_fps_numerator (length fs + 1 - length cs) cs ((!) fs) g", "have \"lir_fps_numerator m cs f g = \n          Poly (map (\\<lambda>k. (\\<Sum>i\\<le>min N k. cs ! (N - i) * f (k - i)) - g k) [0..<N + m])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lir_fps_numerator m cs f g =\n    Poly\n     (map (\\<lambda>k.\n              (\\<Sum>i\\<le>min N k. cs ! (N - i) * f (k - i)) - g k)\n       [0..<N + m])", "by (simp add: lir_fps_numerator_def Let_def N_def)"], ["proof (state)\nthis:\n  lir_fps_numerator m cs f g =\n  Poly\n   (map (\\<lambda>k. (\\<Sum>i\\<le>min N k. cs ! (N - i) * f (k - i)) - g k)\n     [0..<N + m])\n\ngoal (1 subgoal):\n 1. lir_fps_numerator (length fs + 1 - length cs) cs f g =\n    lir_fps_numerator (length fs + 1 - length cs) cs ((!) fs) g", "also"], ["proof (state)\nthis:\n  lir_fps_numerator m cs f g =\n  Poly\n   (map (\\<lambda>k. (\\<Sum>i\\<le>min N k. cs ! (N - i) * f (k - i)) - g k)\n     [0..<N + m])\n\ngoal (1 subgoal):\n 1. lir_fps_numerator (length fs + 1 - length cs) cs f g =\n    lir_fps_numerator (length fs + 1 - length cs) cs ((!) fs) g", "from enough_base"], ["proof (chain)\npicking this:\n  length cs \\<le> length fs + 1", "have \"N + m = length fs\""], ["proof (prove)\nusing this:\n  length cs \\<le> length fs + 1\n\ngoal (1 subgoal):\n 1. N + m = length fs", "by (cases cs) (simp_all add: N_def m_def algebra_simps)"], ["proof (state)\nthis:\n  N + m = length fs\n\ngoal (1 subgoal):\n 1. lir_fps_numerator (length fs + 1 - length cs) cs f g =\n    lir_fps_numerator (length fs + 1 - length cs) cs ((!) fs) g", "also"], ["proof (state)\nthis:\n  N + m = length fs\n\ngoal (1 subgoal):\n 1. lir_fps_numerator (length fs + 1 - length cs) cs f g =\n    lir_fps_numerator (length fs + 1 - length cs) cs ((!) fs) g", "{"], ["proof (state)\nthis:\n  N + m = length fs\n\ngoal (1 subgoal):\n 1. lir_fps_numerator (length fs + 1 - length cs) cs f g =\n    lir_fps_numerator (length fs + 1 - length cs) cs ((!) fs) g", "fix k"], ["proof (state)\ngoal (1 subgoal):\n 1. lir_fps_numerator (length fs + 1 - length cs) cs f g =\n    lir_fps_numerator (length fs + 1 - length cs) cs ((!) fs) g", "assume k: \"k \\<in> {0..<length fs}\""], ["proof (state)\nthis:\n  k \\<in> {0..<length fs}\n\ngoal (1 subgoal):\n 1. lir_fps_numerator (length fs + 1 - length cs) cs f g =\n    lir_fps_numerator (length fs + 1 - length cs) cs ((!) fs) g", "hence \"f (k - i) = fs ! (k - i)\" if \"i \\<le> min N k\" for i"], ["proof (prove)\nusing this:\n  k \\<in> {0..<length fs}\n\ngoal (1 subgoal):\n 1. f (k - i) = fs ! (k - i)", "using enough_base that"], ["proof (prove)\nusing this:\n  k \\<in> {0..<length fs}\n  length cs \\<le> length fs + 1\n  i \\<le> min N k\n\ngoal (1 subgoal):\n 1. f (k - i) = fs ! (k - i)", "by (intro base) (auto simp: Suc_le_eq N_def m_def algebra_simps)"], ["proof (state)\nthis:\n  ?i \\<le> min N k \\<Longrightarrow> f (k - ?i) = fs ! (k - ?i)\n\ngoal (1 subgoal):\n 1. lir_fps_numerator (length fs + 1 - length cs) cs f g =\n    lir_fps_numerator (length fs + 1 - length cs) cs ((!) fs) g", "hence \"(\\<Sum>i\\<le>min N k. cs ! (N - i) * f (k - i)) = (\\<Sum>i\\<le>min N k. cs ! (N - i) * fs ! (k - i))\""], ["proof (prove)\nusing this:\n  ?i \\<le> min N k \\<Longrightarrow> f (k - ?i) = fs ! (k - ?i)\n\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<le>min N k. cs ! (N - i) * f (k - i)) =\n    (\\<Sum>i\\<le>min N k. cs ! (N - i) * fs ! (k - i))", "by simp"], ["proof (state)\nthis:\n  (\\<Sum>i\\<le>min N k. cs ! (N - i) * f (k - i)) =\n  (\\<Sum>i\\<le>min N k. cs ! (N - i) * fs ! (k - i))\n\ngoal (1 subgoal):\n 1. lir_fps_numerator (length fs + 1 - length cs) cs f g =\n    lir_fps_numerator (length fs + 1 - length cs) cs ((!) fs) g", "}"], ["proof (state)\nthis:\n  ?k2 \\<in> {0..<length fs} \\<Longrightarrow>\n  (\\<Sum>i\\<le>min N ?k2. cs ! (N - i) * f (?k2 - i)) =\n  (\\<Sum>i\\<le>min N ?k2. cs ! (N - i) * fs ! (?k2 - i))\n\ngoal (1 subgoal):\n 1. lir_fps_numerator (length fs + 1 - length cs) cs f g =\n    lir_fps_numerator (length fs + 1 - length cs) cs ((!) fs) g", "hence \"map (\\<lambda>k. (\\<Sum>i\\<le>min N k. cs ! (N - i) * f (k - i)) - g k) [0..<length fs] =\n           map (\\<lambda>k. (\\<Sum>i\\<le>min N k. cs ! (N - i) * fs ! (k - i)) - g k) [0..<length fs]\""], ["proof (prove)\nusing this:\n  ?k2 \\<in> {0..<length fs} \\<Longrightarrow>\n  (\\<Sum>i\\<le>min N ?k2. cs ! (N - i) * f (?k2 - i)) =\n  (\\<Sum>i\\<le>min N ?k2. cs ! (N - i) * fs ! (?k2 - i))\n\ngoal (1 subgoal):\n 1. map (\\<lambda>k. (\\<Sum>i\\<le>min N k. cs ! (N - i) * f (k - i)) - g k)\n     [0..<length fs] =\n    map (\\<lambda>k.\n            (\\<Sum>i\\<le>min N k. cs ! (N - i) * fs ! (k - i)) - g k)\n     [0..<length fs]", "by (intro map_cong) simp_all"], ["proof (state)\nthis:\n  map (\\<lambda>k. (\\<Sum>i\\<le>min N k. cs ! (N - i) * f (k - i)) - g k)\n   [0..<length fs] =\n  map (\\<lambda>k. (\\<Sum>i\\<le>min N k. cs ! (N - i) * fs ! (k - i)) - g k)\n   [0..<length fs]\n\ngoal (1 subgoal):\n 1. lir_fps_numerator (length fs + 1 - length cs) cs f g =\n    lir_fps_numerator (length fs + 1 - length cs) cs ((!) fs) g", "also"], ["proof (state)\nthis:\n  map (\\<lambda>k. (\\<Sum>i\\<le>min N k. cs ! (N - i) * f (k - i)) - g k)\n   [0..<length fs] =\n  map (\\<lambda>k. (\\<Sum>i\\<le>min N k. cs ! (N - i) * fs ! (k - i)) - g k)\n   [0..<length fs]\n\ngoal (1 subgoal):\n 1. lir_fps_numerator (length fs + 1 - length cs) cs f g =\n    lir_fps_numerator (length fs + 1 - length cs) cs ((!) fs) g", "have \"Poly \\<dots> = lir_fps_numerator m cs ((!) fs) g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Poly\n     (map (\\<lambda>k.\n              (\\<Sum>i\\<le>min N k. cs ! (N - i) * fs ! (k - i)) - g k)\n       [0..<length fs]) =\n    lir_fps_numerator m cs ((!) fs) g", "using enough_base"], ["proof (prove)\nusing this:\n  length cs \\<le> length fs + 1\n\ngoal (1 subgoal):\n 1. Poly\n     (map (\\<lambda>k.\n              (\\<Sum>i\\<le>min N k. cs ! (N - i) * fs ! (k - i)) - g k)\n       [0..<length fs]) =\n    lir_fps_numerator m cs ((!) fs) g", "by (cases cs) (simp_all add: lir_fps_numerator_def Let_def m_def N_def)"], ["proof (state)\nthis:\n  Poly\n   (map (\\<lambda>k.\n            (\\<Sum>i\\<le>min N k. cs ! (N - i) * fs ! (k - i)) - g k)\n     [0..<length fs]) =\n  lir_fps_numerator m cs ((!) fs) g\n\ngoal (1 subgoal):\n 1. lir_fps_numerator (length fs + 1 - length cs) cs f g =\n    lir_fps_numerator (length fs + 1 - length cs) cs ((!) fs) g", "finally"], ["proof (chain)\npicking this:\n  lir_fps_numerator m cs f g = lir_fps_numerator m cs ((!) fs) g", "show ?thesis"], ["proof (prove)\nusing this:\n  lir_fps_numerator m cs f g = lir_fps_numerator m cs ((!) fs) g\n\ngoal (1 subgoal):\n 1. lir_fps_numerator (length fs + 1 - length cs) cs f g =\n    lir_fps_numerator (length fs + 1 - length cs) cs ((!) fs) g", "unfolding m_def"], ["proof (prove)\nusing this:\n  lir_fps_numerator (length fs + 1 - length cs) cs f g =\n  lir_fps_numerator (length fs + 1 - length cs) cs ((!) fs) g\n\ngoal (1 subgoal):\n 1. lir_fps_numerator (length fs + 1 - length cs) cs f g =\n    lir_fps_numerator (length fs + 1 - length cs) cs ((!) fs) g", "."], ["proof (state)\nthis:\n  lir_fps_numerator (length fs + 1 - length cs) cs f g =\n  lir_fps_numerator (length fs + 1 - length cs) cs ((!) fs) g\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "context\nbegin"], ["", "private"], ["", "lemma lir_fps_aux:\n  fixes f :: \"nat \\<Rightarrow> 'a :: field\"\n  assumes rec: \"\\<And>n. n \\<ge> m \\<Longrightarrow> (\\<Sum>k\\<le>N. c k * f (n + k)) = g (n + N)\"\n  assumes cN: \"c N \\<noteq> 0\"\n  defines \"p \\<equiv> Poly [c (N - k). k \\<leftarrow> [0..<Suc N]]\"\n  defines \"q \\<equiv> Poly [(\\<Sum>i\\<le>min N k. c (N - i) * f (k - i)) - g k. k \\<leftarrow> [0..<N+m]]\"\n  shows   \"Abs_fps f = (fps_of_poly q + Abs_fps g) / fps_of_poly p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Abs_fps f = (fps_of_poly q + Abs_fps g) / fps_of_poly p", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Abs_fps f = (fps_of_poly q + Abs_fps g) / fps_of_poly p", "include fps_notation"], ["proof (state)\ngoal (1 subgoal):\n 1. Abs_fps f = (fps_of_poly q + Abs_fps g) / fps_of_poly p", "define F where \"F = Abs_fps f\""], ["proof (state)\nthis:\n  F = Abs_fps f\n\ngoal (1 subgoal):\n 1. Abs_fps f = (fps_of_poly q + Abs_fps g) / fps_of_poly p", "have [simp]: \"F $ n = f n\" for n"], ["proof (prove)\ngoal (1 subgoal):\n 1. F $ n = f n", "by (simp add: F_def)"], ["proof (state)\nthis:\n  F $ ?n = f ?n\n\ngoal (1 subgoal):\n 1. Abs_fps f = (fps_of_poly q + Abs_fps g) / fps_of_poly p", "have [simp]: \"coeff p 0 = c N\""], ["proof (prove)\ngoal (1 subgoal):\n 1. constant_term p = c N", "by (simp add: p_def nth_default_def del: upt_Suc)"], ["proof (state)\nthis:\n  constant_term p = c N\n\ngoal (1 subgoal):\n 1. Abs_fps f = (fps_of_poly q + Abs_fps g) / fps_of_poly p", "have \"(fps_of_poly p * F) $ n = coeff q n + g n\" for n"], ["proof (prove)\ngoal (1 subgoal):\n 1. (fps_of_poly p * F) $ n = coeff q n + g n", "proof (cases \"n \\<ge> N + m\")"], ["proof (state)\ngoal (2 subgoals):\n 1. N + m \\<le> n \\<Longrightarrow>\n    (fps_of_poly p * F) $ n = coeff q n + g n\n 2. \\<not> N + m \\<le> n \\<Longrightarrow>\n    (fps_of_poly p * F) $ n = coeff q n + g n", "case True"], ["proof (state)\nthis:\n  N + m \\<le> n\n\ngoal (2 subgoals):\n 1. N + m \\<le> n \\<Longrightarrow>\n    (fps_of_poly p * F) $ n = coeff q n + g n\n 2. \\<not> N + m \\<le> n \\<Longrightarrow>\n    (fps_of_poly p * F) $ n = coeff q n + g n", "let ?f = \"\\<lambda>i. N - i\""], ["proof (state)\ngoal (2 subgoals):\n 1. N + m \\<le> n \\<Longrightarrow>\n    (fps_of_poly p * F) $ n = coeff q n + g n\n 2. \\<not> N + m \\<le> n \\<Longrightarrow>\n    (fps_of_poly p * F) $ n = coeff q n + g n", "have \"(fps_of_poly p * F) $ n = (\\<Sum>i\\<le>n. coeff p i * f (n - i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (fps_of_poly p * F) $ n = (\\<Sum>i\\<le>n. coeff p i * f (n - i))", "by (simp add: fps_mult_nth atLeast0AtMost)"], ["proof (state)\nthis:\n  (fps_of_poly p * F) $ n = (\\<Sum>i\\<le>n. coeff p i * f (n - i))\n\ngoal (2 subgoals):\n 1. N + m \\<le> n \\<Longrightarrow>\n    (fps_of_poly p * F) $ n = coeff q n + g n\n 2. \\<not> N + m \\<le> n \\<Longrightarrow>\n    (fps_of_poly p * F) $ n = coeff q n + g n", "also"], ["proof (state)\nthis:\n  (fps_of_poly p * F) $ n = (\\<Sum>i\\<le>n. coeff p i * f (n - i))\n\ngoal (2 subgoals):\n 1. N + m \\<le> n \\<Longrightarrow>\n    (fps_of_poly p * F) $ n = coeff q n + g n\n 2. \\<not> N + m \\<le> n \\<Longrightarrow>\n    (fps_of_poly p * F) $ n = coeff q n + g n", "from True"], ["proof (chain)\npicking this:\n  N + m \\<le> n", "have \"\\<dots> = (\\<Sum>i\\<le>N. coeff p i * f (n - i))\""], ["proof (prove)\nusing this:\n  N + m \\<le> n\n\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<le>n. coeff p i * f (n - i)) =\n    (\\<Sum>i\\<le>N. coeff p i * f (n - i))", "by (intro sum.mono_neutral_right) (auto simp: nth_default_def p_def)"], ["proof (state)\nthis:\n  (\\<Sum>i\\<le>n. coeff p i * f (n - i)) =\n  (\\<Sum>i\\<le>N. coeff p i * f (n - i))\n\ngoal (2 subgoals):\n 1. N + m \\<le> n \\<Longrightarrow>\n    (fps_of_poly p * F) $ n = coeff q n + g n\n 2. \\<not> N + m \\<le> n \\<Longrightarrow>\n    (fps_of_poly p * F) $ n = coeff q n + g n", "also"], ["proof (state)\nthis:\n  (\\<Sum>i\\<le>n. coeff p i * f (n - i)) =\n  (\\<Sum>i\\<le>N. coeff p i * f (n - i))\n\ngoal (2 subgoals):\n 1. N + m \\<le> n \\<Longrightarrow>\n    (fps_of_poly p * F) $ n = coeff q n + g n\n 2. \\<not> N + m \\<le> n \\<Longrightarrow>\n    (fps_of_poly p * F) $ n = coeff q n + g n", "have \"\\<dots> = (\\<Sum>i\\<le>N. c (N - i) * f (n - i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<le>N. coeff p i * f (n - i)) =\n    (\\<Sum>i\\<le>N. c (N - i) * f (n - i))", "by (intro sum.cong) (auto simp: nth_default_def p_def simp del: upt_Suc)"], ["proof (state)\nthis:\n  (\\<Sum>i\\<le>N. coeff p i * f (n - i)) =\n  (\\<Sum>i\\<le>N. c (N - i) * f (n - i))\n\ngoal (2 subgoals):\n 1. N + m \\<le> n \\<Longrightarrow>\n    (fps_of_poly p * F) $ n = coeff q n + g n\n 2. \\<not> N + m \\<le> n \\<Longrightarrow>\n    (fps_of_poly p * F) $ n = coeff q n + g n", "also"], ["proof (state)\nthis:\n  (\\<Sum>i\\<le>N. coeff p i * f (n - i)) =\n  (\\<Sum>i\\<le>N. c (N - i) * f (n - i))\n\ngoal (2 subgoals):\n 1. N + m \\<le> n \\<Longrightarrow>\n    (fps_of_poly p * F) $ n = coeff q n + g n\n 2. \\<not> N + m \\<le> n \\<Longrightarrow>\n    (fps_of_poly p * F) $ n = coeff q n + g n", "from True"], ["proof (chain)\npicking this:\n  N + m \\<le> n", "have \"\\<dots> = (\\<Sum>i\\<le>N. c i * f (n - N + i))\""], ["proof (prove)\nusing this:\n  N + m \\<le> n\n\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<le>N. c (N - i) * f (n - i)) =\n    (\\<Sum>i\\<le>N. c i * f (n - N + i))", "by (intro sum.reindex_bij_witness[of _ ?f ?f]) auto"], ["proof (state)\nthis:\n  (\\<Sum>i\\<le>N. c (N - i) * f (n - i)) =\n  (\\<Sum>i\\<le>N. c i * f (n - N + i))\n\ngoal (2 subgoals):\n 1. N + m \\<le> n \\<Longrightarrow>\n    (fps_of_poly p * F) $ n = coeff q n + g n\n 2. \\<not> N + m \\<le> n \\<Longrightarrow>\n    (fps_of_poly p * F) $ n = coeff q n + g n", "also"], ["proof (state)\nthis:\n  (\\<Sum>i\\<le>N. c (N - i) * f (n - i)) =\n  (\\<Sum>i\\<le>N. c i * f (n - N + i))\n\ngoal (2 subgoals):\n 1. N + m \\<le> n \\<Longrightarrow>\n    (fps_of_poly p * F) $ n = coeff q n + g n\n 2. \\<not> N + m \\<le> n \\<Longrightarrow>\n    (fps_of_poly p * F) $ n = coeff q n + g n", "from True"], ["proof (chain)\npicking this:\n  N + m \\<le> n", "have \"\\<dots> = g (n - N + N)\""], ["proof (prove)\nusing this:\n  N + m \\<le> n\n\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<le>N. c i * f (n - N + i)) = g (n - N + N)", "by (intro rec) simp_all"], ["proof (state)\nthis:\n  (\\<Sum>i\\<le>N. c i * f (n - N + i)) = g (n - N + N)\n\ngoal (2 subgoals):\n 1. N + m \\<le> n \\<Longrightarrow>\n    (fps_of_poly p * F) $ n = coeff q n + g n\n 2. \\<not> N + m \\<le> n \\<Longrightarrow>\n    (fps_of_poly p * F) $ n = coeff q n + g n", "also"], ["proof (state)\nthis:\n  (\\<Sum>i\\<le>N. c i * f (n - N + i)) = g (n - N + N)\n\ngoal (2 subgoals):\n 1. N + m \\<le> n \\<Longrightarrow>\n    (fps_of_poly p * F) $ n = coeff q n + g n\n 2. \\<not> N + m \\<le> n \\<Longrightarrow>\n    (fps_of_poly p * F) $ n = coeff q n + g n", "from True"], ["proof (chain)\npicking this:\n  N + m \\<le> n", "have \"\\<dots> = coeff q n + g n\""], ["proof (prove)\nusing this:\n  N + m \\<le> n\n\ngoal (1 subgoal):\n 1. g (n - N + N) = coeff q n + g n", "by (simp add: q_def nth_default_def del: upt_Suc)"], ["proof (state)\nthis:\n  g (n - N + N) = coeff q n + g n\n\ngoal (2 subgoals):\n 1. N + m \\<le> n \\<Longrightarrow>\n    (fps_of_poly p * F) $ n = coeff q n + g n\n 2. \\<not> N + m \\<le> n \\<Longrightarrow>\n    (fps_of_poly p * F) $ n = coeff q n + g n", "finally"], ["proof (chain)\npicking this:\n  (fps_of_poly p * F) $ n = coeff q n + g n", "show ?thesis"], ["proof (prove)\nusing this:\n  (fps_of_poly p * F) $ n = coeff q n + g n\n\ngoal (1 subgoal):\n 1. (fps_of_poly p * F) $ n = coeff q n + g n", "."], ["proof (state)\nthis:\n  (fps_of_poly p * F) $ n = coeff q n + g n\n\ngoal (1 subgoal):\n 1. \\<not> N + m \\<le> n \\<Longrightarrow>\n    (fps_of_poly p * F) $ n = coeff q n + g n", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> N + m \\<le> n \\<Longrightarrow>\n    (fps_of_poly p * F) $ n = coeff q n + g n", "case False"], ["proof (state)\nthis:\n  \\<not> N + m \\<le> n\n\ngoal (1 subgoal):\n 1. \\<not> N + m \\<le> n \\<Longrightarrow>\n    (fps_of_poly p * F) $ n = coeff q n + g n", "hence \"(fps_of_poly p * F) $ n = (\\<Sum>i\\<le>n. coeff p i * f (n - i))\""], ["proof (prove)\nusing this:\n  \\<not> N + m \\<le> n\n\ngoal (1 subgoal):\n 1. (fps_of_poly p * F) $ n = (\\<Sum>i\\<le>n. coeff p i * f (n - i))", "by (simp add: fps_mult_nth atLeast0AtMost)"], ["proof (state)\nthis:\n  (fps_of_poly p * F) $ n = (\\<Sum>i\\<le>n. coeff p i * f (n - i))\n\ngoal (1 subgoal):\n 1. \\<not> N + m \\<le> n \\<Longrightarrow>\n    (fps_of_poly p * F) $ n = coeff q n + g n", "also"], ["proof (state)\nthis:\n  (fps_of_poly p * F) $ n = (\\<Sum>i\\<le>n. coeff p i * f (n - i))\n\ngoal (1 subgoal):\n 1. \\<not> N + m \\<le> n \\<Longrightarrow>\n    (fps_of_poly p * F) $ n = coeff q n + g n", "have \"\\<dots> = (\\<Sum>i\\<le>min N n. coeff p i * f (n - i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<le>n. coeff p i * f (n - i)) =\n    (\\<Sum>i\\<le>min N n. coeff p i * f (n - i))", "by (intro sum.mono_neutral_right)\n         (auto simp: p_def nth_default_def simp del: upt_Suc)"], ["proof (state)\nthis:\n  (\\<Sum>i\\<le>n. coeff p i * f (n - i)) =\n  (\\<Sum>i\\<le>min N n. coeff p i * f (n - i))\n\ngoal (1 subgoal):\n 1. \\<not> N + m \\<le> n \\<Longrightarrow>\n    (fps_of_poly p * F) $ n = coeff q n + g n", "also"], ["proof (state)\nthis:\n  (\\<Sum>i\\<le>n. coeff p i * f (n - i)) =\n  (\\<Sum>i\\<le>min N n. coeff p i * f (n - i))\n\ngoal (1 subgoal):\n 1. \\<not> N + m \\<le> n \\<Longrightarrow>\n    (fps_of_poly p * F) $ n = coeff q n + g n", "have \"\\<dots> = (\\<Sum>i\\<le>min N n. c (N - i) * f (n - i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<le>min N n. coeff p i * f (n - i)) =\n    (\\<Sum>i\\<le>min N n. c (N - i) * f (n - i))", "by (intro sum.cong) (simp_all add: p_def nth_default_def del: upt_Suc)"], ["proof (state)\nthis:\n  (\\<Sum>i\\<le>min N n. coeff p i * f (n - i)) =\n  (\\<Sum>i\\<le>min N n. c (N - i) * f (n - i))\n\ngoal (1 subgoal):\n 1. \\<not> N + m \\<le> n \\<Longrightarrow>\n    (fps_of_poly p * F) $ n = coeff q n + g n", "also"], ["proof (state)\nthis:\n  (\\<Sum>i\\<le>min N n. coeff p i * f (n - i)) =\n  (\\<Sum>i\\<le>min N n. c (N - i) * f (n - i))\n\ngoal (1 subgoal):\n 1. \\<not> N + m \\<le> n \\<Longrightarrow>\n    (fps_of_poly p * F) $ n = coeff q n + g n", "from False"], ["proof (chain)\npicking this:\n  \\<not> N + m \\<le> n", "have \"\\<dots> = coeff q n + g n\""], ["proof (prove)\nusing this:\n  \\<not> N + m \\<le> n\n\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<le>min N n. c (N - i) * f (n - i)) = coeff q n + g n", "by (simp add: q_def nth_default_def)"], ["proof (state)\nthis:\n  (\\<Sum>i\\<le>min N n. c (N - i) * f (n - i)) = coeff q n + g n\n\ngoal (1 subgoal):\n 1. \\<not> N + m \\<le> n \\<Longrightarrow>\n    (fps_of_poly p * F) $ n = coeff q n + g n", "finally"], ["proof (chain)\npicking this:\n  (fps_of_poly p * F) $ n = coeff q n + g n", "show ?thesis"], ["proof (prove)\nusing this:\n  (fps_of_poly p * F) $ n = coeff q n + g n\n\ngoal (1 subgoal):\n 1. (fps_of_poly p * F) $ n = coeff q n + g n", "."], ["proof (state)\nthis:\n  (fps_of_poly p * F) $ n = coeff q n + g n\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (fps_of_poly p * F) $ ?n = coeff q ?n + g ?n\n\ngoal (1 subgoal):\n 1. Abs_fps f = (fps_of_poly q + Abs_fps g) / fps_of_poly p", "hence \"fps_of_poly p * F = fps_of_poly q + Abs_fps g\""], ["proof (prove)\nusing this:\n  (fps_of_poly p * F) $ ?n = coeff q ?n + g ?n\n\ngoal (1 subgoal):\n 1. fps_of_poly p * F = fps_of_poly q + Abs_fps g", "by (intro fps_ext) (simp add:)"], ["proof (state)\nthis:\n  fps_of_poly p * F = fps_of_poly q + Abs_fps g\n\ngoal (1 subgoal):\n 1. Abs_fps f = (fps_of_poly q + Abs_fps g) / fps_of_poly p", "with cN"], ["proof (chain)\npicking this:\n  c N \\<noteq> (0::'a)\n  fps_of_poly p * F = fps_of_poly q + Abs_fps g", "show \"F = (fps_of_poly q + Abs_fps g) / fps_of_poly p\""], ["proof (prove)\nusing this:\n  c N \\<noteq> (0::'a)\n  fps_of_poly p * F = fps_of_poly q + Abs_fps g\n\ngoal (1 subgoal):\n 1. F = (fps_of_poly q + Abs_fps g) / fps_of_poly p", "by (subst unit_eq_div2) (simp_all add: mult_ac)"], ["proof (state)\nthis:\n  F = (fps_of_poly q + Abs_fps g) / fps_of_poly p\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lir_fps:\n  fixes f g :: \"nat \\<Rightarrow> 'a :: field\" and cs :: \"'a list\"\n  defines \"N \\<equiv> length cs - 1\"\n  assumes cs: \"cs \\<noteq> []\"\n  assumes \"\\<And>n. n \\<ge> m \\<Longrightarrow> (\\<Sum>k\\<le>N. cs ! k * f (n + k)) = g (n + N)\"\n  assumes cN: \"last cs \\<noteq> 0\"\n  shows   \"Abs_fps f = (fps_of_poly (lir_fps_numerator m cs f g) + Abs_fps g) / \n              fps_of_poly (lr_fps_denominator cs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Abs_fps f =\n    (fps_of_poly (lir_fps_numerator m cs f g) + Abs_fps g) /\n    fps_of_poly (lr_fps_denominator cs)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Abs_fps f =\n    (fps_of_poly (lir_fps_numerator m cs f g) + Abs_fps g) /\n    fps_of_poly (lr_fps_denominator cs)", "define p and q \n    where \"p = Poly [(\\<Sum>i\\<le>min N k. cs ! (N - i) * f (k - i)) - g k. k \\<leftarrow> [0..<N+m]]\"\n      and \"q = Poly (map (\\<lambda>k. cs ! (N - k)) [0..<Suc N])\""], ["proof (state)\nthis:\n  p =\n  Poly\n   (map (\\<lambda>k. (\\<Sum>i\\<le>min N k. cs ! (N - i) * f (k - i)) - g k)\n     [0..<N + m])\n  q = Poly (map (\\<lambda>k. cs ! (N - k)) [0..<Suc N])\n\ngoal (1 subgoal):\n 1. Abs_fps f =\n    (fps_of_poly (lir_fps_numerator m cs f g) + Abs_fps g) /\n    fps_of_poly (lr_fps_denominator cs)", "from assms"], ["proof (chain)\npicking this:\n  N \\<equiv> length cs - 1\n  cs \\<noteq> []\n  m \\<le> ?n \\<Longrightarrow>\n  (\\<Sum>k\\<le>N. cs ! k * f (?n + k)) = g (?n + N)\n  last cs \\<noteq> (0::'a)", "have \"Abs_fps f = (fps_of_poly p + Abs_fps g) / fps_of_poly q\""], ["proof (prove)\nusing this:\n  N \\<equiv> length cs - 1\n  cs \\<noteq> []\n  m \\<le> ?n \\<Longrightarrow>\n  (\\<Sum>k\\<le>N. cs ! k * f (?n + k)) = g (?n + N)\n  last cs \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. Abs_fps f = (fps_of_poly p + Abs_fps g) / fps_of_poly q", "unfolding p_def q_def"], ["proof (prove)\nusing this:\n  N \\<equiv> length cs - 1\n  cs \\<noteq> []\n  m \\<le> ?n \\<Longrightarrow>\n  (\\<Sum>k\\<le>N. cs ! k * f (?n + k)) = g (?n + N)\n  last cs \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. Abs_fps f =\n    (fps_of_poly\n      (Poly\n        (map (\\<lambda>k.\n                 (\\<Sum>i\\<le>min N k. cs ! (N - i) * f (k - i)) - g k)\n          [0..<N + m])) +\n     Abs_fps g) /\n    fps_of_poly (Poly (map (\\<lambda>k. cs ! (N - k)) [0..<Suc N]))", "by (intro lir_fps_aux) (simp_all add: last_conv_nth)"], ["proof (state)\nthis:\n  Abs_fps f = (fps_of_poly p + Abs_fps g) / fps_of_poly q\n\ngoal (1 subgoal):\n 1. Abs_fps f =\n    (fps_of_poly (lir_fps_numerator m cs f g) + Abs_fps g) /\n    fps_of_poly (lr_fps_denominator cs)", "also"], ["proof (state)\nthis:\n  Abs_fps f = (fps_of_poly p + Abs_fps g) / fps_of_poly q\n\ngoal (1 subgoal):\n 1. Abs_fps f =\n    (fps_of_poly (lir_fps_numerator m cs f g) + Abs_fps g) /\n    fps_of_poly (lr_fps_denominator cs)", "have \"p = lir_fps_numerator m cs f g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p = lir_fps_numerator m cs f g", "unfolding p_def lir_fps_numerator_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. Poly\n     (map (\\<lambda>k.\n              (\\<Sum>i\\<le>min N k. cs ! (N - i) * f (k - i)) - g k)\n       [0..<N + m]) =\n    (let N = length cs - 1\n     in Poly\n         (map (\\<lambda>k.\n                  (\\<Sum>i\\<le>min N k. cs ! (N - i) * f (k - i)) - g k)\n           [0..<N + m]))", "by (auto simp: Let_def N_def)"], ["proof (state)\nthis:\n  p = lir_fps_numerator m cs f g\n\ngoal (1 subgoal):\n 1. Abs_fps f =\n    (fps_of_poly (lir_fps_numerator m cs f g) + Abs_fps g) /\n    fps_of_poly (lr_fps_denominator cs)", "also"], ["proof (state)\nthis:\n  p = lir_fps_numerator m cs f g\n\ngoal (1 subgoal):\n 1. Abs_fps f =\n    (fps_of_poly (lir_fps_numerator m cs f g) + Abs_fps g) /\n    fps_of_poly (lr_fps_denominator cs)", "from cN"], ["proof (chain)\npicking this:\n  last cs \\<noteq> (0::'a)", "have \"q = lr_fps_denominator cs\""], ["proof (prove)\nusing this:\n  last cs \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. q = lr_fps_denominator cs", "unfolding q_def lr_fps_denominator_def"], ["proof (prove)\nusing this:\n  last cs \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. Poly (map (\\<lambda>k. cs ! (N - k)) [0..<Suc N]) = Poly (rev cs)", "by (intro poly_eqI)\n       (auto simp add: nth_default_def rev_nth N_def not_less cs simp del: upt_Suc)"], ["proof (state)\nthis:\n  q = lr_fps_denominator cs\n\ngoal (1 subgoal):\n 1. Abs_fps f =\n    (fps_of_poly (lir_fps_numerator m cs f g) + Abs_fps g) /\n    fps_of_poly (lr_fps_denominator cs)", "finally"], ["proof (chain)\npicking this:\n  Abs_fps f =\n  (fps_of_poly (lir_fps_numerator m cs f g) + Abs_fps g) /\n  fps_of_poly (lr_fps_denominator cs)", "show ?thesis"], ["proof (prove)\nusing this:\n  Abs_fps f =\n  (fps_of_poly (lir_fps_numerator m cs f g) + Abs_fps g) /\n  fps_of_poly (lr_fps_denominator cs)\n\ngoal (1 subgoal):\n 1. Abs_fps f =\n    (fps_of_poly (lir_fps_numerator m cs f g) + Abs_fps g) /\n    fps_of_poly (lr_fps_denominator cs)", "."], ["proof (state)\nthis:\n  Abs_fps f =\n  (fps_of_poly (lir_fps_numerator m cs f g) + Abs_fps g) /\n  fps_of_poly (lr_fps_denominator cs)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "type_synonym 'a polyexp = \"('a \\<times> nat \\<times> 'a) list\""], ["", "definition eval_polyexp :: \"('a::semiring_1) polyexp \\<Rightarrow> nat \\<Rightarrow> 'a\" where\n  \"eval_polyexp xs = (\\<lambda>n. \\<Sum>(a,k,b)\\<leftarrow>xs. a * of_nat n ^ k * b ^ n)\""], ["", "lemma eval_polyexp_Nil [simp]: \"eval_polyexp [] = (\\<lambda>_. 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval_polyexp [] = (\\<lambda>_. 0::'a)", "by (simp add: eval_polyexp_def)"], ["", "lemma eval_polyexp_Cons: \n  \"eval_polyexp (x#xs) = (\\<lambda>n. (case x of (a,k,b) \\<Rightarrow> a * of_nat n ^ k * b ^ n) + eval_polyexp xs n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval_polyexp (x # xs) =\n    (\\<lambda>n.\n        (case x of (a, k, b) \\<Rightarrow> a * of_nat n ^ k * b ^ n) +\n        eval_polyexp xs n)", "by (simp add: eval_polyexp_def)"], ["", "definition polyexp_fps :: \"('a :: field) polyexp \\<Rightarrow> 'a fps\" where\n  \"polyexp_fps xs = \n     (\\<Sum>(a,k,b)\\<leftarrow>xs. fps_of_poly (Polynomial.smult a (fps_monom_poly b k)) / \n                       (1 - fps_const b * fps_X) ^ (k + 1))\""], ["", "lemma polyexp_fps_Nil [simp]: \"polyexp_fps [] = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. polyexp_fps [] = 0", "by (simp add: polyexp_fps_def)"], ["", "lemma polyexp_fps_Cons: \n  \"polyexp_fps (x#xs) = (case x of (a,k,b) \\<Rightarrow> \n     fps_of_poly (Polynomial.smult a (fps_monom_poly b k)) / (1 - fps_const b * fps_X) ^ (k + 1)) + \n     polyexp_fps xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. polyexp_fps (x # xs) =\n    (case x of\n     (a, k, b) \\<Rightarrow>\n       fps_of_poly (smult a (fps_monom_poly b k)) /\n       (1 - fps_const b * fps_X) ^ (k + 1)) +\n    polyexp_fps xs", "by (simp add: polyexp_fps_def)"], ["", "definition polyexp_ratfps :: \"('a :: field_gcd) polyexp \\<Rightarrow> 'a ratfps\" where\n  \"polyexp_ratfps xs = \n     (\\<Sum>(a,k,b)\\<leftarrow>xs. ratfps_of_poly (Polynomial.smult a (fps_monom_poly b k)) /\n                       ratfps_of_poly ([:1, -b:] ^ (k + 1)))\""], ["", "lemma polyexp_ratfps_Nil [simp]: \"polyexp_ratfps [] = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. polyexp_ratfps [] = 0", "by (simp add: polyexp_ratfps_def)"], ["", "lemma polyexp_ratfps_Cons: \"polyexp_ratfps (x#xs) = (case x of (a,k,b) \\<Rightarrow>\n  ratfps_of_poly (Polynomial.smult a (fps_monom_poly b k)) / \n     ratfps_of_poly ([:1, -b:] ^ (k + 1))) + polyexp_ratfps xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. polyexp_ratfps (x # xs) =\n    (case x of\n     (a, k, b) \\<Rightarrow>\n       ratfps_of_poly (smult a (fps_monom_poly b k)) /\n       ratfps_of_poly ([:1::'a, - b:] ^ (k + 1))) +\n    polyexp_ratfps xs", "by (simp add: polyexp_ratfps_def)"], ["", "lemma polyexp_fps: \"Abs_fps (eval_polyexp xs) = polyexp_fps xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Abs_fps (eval_polyexp xs) = polyexp_fps xs", "proof (induction xs)"], ["proof (state)\ngoal (2 subgoals):\n 1. Abs_fps (eval_polyexp []) = polyexp_fps []\n 2. \\<And>a xs.\n       Abs_fps (eval_polyexp xs) = polyexp_fps xs \\<Longrightarrow>\n       Abs_fps (eval_polyexp (a # xs)) = polyexp_fps (a # xs)", "case (Cons x xs)"], ["proof (state)\nthis:\n  Abs_fps (eval_polyexp xs) = polyexp_fps xs\n\ngoal (2 subgoals):\n 1. Abs_fps (eval_polyexp []) = polyexp_fps []\n 2. \\<And>a xs.\n       Abs_fps (eval_polyexp xs) = polyexp_fps xs \\<Longrightarrow>\n       Abs_fps (eval_polyexp (a # xs)) = polyexp_fps (a # xs)", "obtain a k b where [simp]: \"x = (a, k, b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>a k b. x = (a, k, b) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis prod.exhaust)"], ["proof (state)\nthis:\n  x = (a, k, b)\n\ngoal (2 subgoals):\n 1. Abs_fps (eval_polyexp []) = polyexp_fps []\n 2. \\<And>a xs.\n       Abs_fps (eval_polyexp xs) = polyexp_fps xs \\<Longrightarrow>\n       Abs_fps (eval_polyexp (a # xs)) = polyexp_fps (a # xs)", "have \"Abs_fps (eval_polyexp (x#xs)) = \n          fps_const a * Abs_fps (\\<lambda>n. of_nat n ^ k * b ^ n) + Abs_fps (eval_polyexp xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Abs_fps (eval_polyexp (x # xs)) =\n    fps_const a * Abs_fps (\\<lambda>n. of_nat n ^ k * b ^ n) +\n    Abs_fps (eval_polyexp xs)", "by (simp add: eval_polyexp_Cons fps_plus_def mult_ac)"], ["proof (state)\nthis:\n  Abs_fps (eval_polyexp (x # xs)) =\n  fps_const a * Abs_fps (\\<lambda>n. of_nat n ^ k * b ^ n) +\n  Abs_fps (eval_polyexp xs)\n\ngoal (2 subgoals):\n 1. Abs_fps (eval_polyexp []) = polyexp_fps []\n 2. \\<And>a xs.\n       Abs_fps (eval_polyexp xs) = polyexp_fps xs \\<Longrightarrow>\n       Abs_fps (eval_polyexp (a # xs)) = polyexp_fps (a # xs)", "also"], ["proof (state)\nthis:\n  Abs_fps (eval_polyexp (x # xs)) =\n  fps_const a * Abs_fps (\\<lambda>n. of_nat n ^ k * b ^ n) +\n  Abs_fps (eval_polyexp xs)\n\ngoal (2 subgoals):\n 1. Abs_fps (eval_polyexp []) = polyexp_fps []\n 2. \\<And>a xs.\n       Abs_fps (eval_polyexp xs) = polyexp_fps xs \\<Longrightarrow>\n       Abs_fps (eval_polyexp (a # xs)) = polyexp_fps (a # xs)", "have \"Abs_fps (\\<lambda>n. of_nat n ^ k * b ^ n) = \n               fps_of_poly (fps_monom_poly b k) / (1 - fps_const b * fps_X) ^ (k + 1)\" \n            (is \"_ = ?A / ?B\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. Abs_fps (\\<lambda>n. of_nat n ^ k * b ^ n) =\n    fps_of_poly (fps_monom_poly b k) / (1 - fps_const b * fps_X) ^ (k + 1)", "by (rule fps_monom)"], ["proof (state)\nthis:\n  Abs_fps (\\<lambda>n. of_nat n ^ k * b ^ n) =\n  fps_of_poly (fps_monom_poly b k) / (1 - fps_const b * fps_X) ^ (k + 1)\n\ngoal (2 subgoals):\n 1. Abs_fps (eval_polyexp []) = polyexp_fps []\n 2. \\<And>a xs.\n       Abs_fps (eval_polyexp xs) = polyexp_fps xs \\<Longrightarrow>\n       Abs_fps (eval_polyexp (a # xs)) = polyexp_fps (a # xs)", "also"], ["proof (state)\nthis:\n  Abs_fps (\\<lambda>n. of_nat n ^ k * b ^ n) =\n  fps_of_poly (fps_monom_poly b k) / (1 - fps_const b * fps_X) ^ (k + 1)\n\ngoal (2 subgoals):\n 1. Abs_fps (eval_polyexp []) = polyexp_fps []\n 2. \\<And>a xs.\n       Abs_fps (eval_polyexp xs) = polyexp_fps xs \\<Longrightarrow>\n       Abs_fps (eval_polyexp (a # xs)) = polyexp_fps (a # xs)", "have \"fps_const a * (?A / ?B) = (fps_const a * ?A) / ?B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fps_const a *\n    (fps_of_poly (fps_monom_poly b k) /\n     (1 - fps_const b * fps_X) ^ (k + 1)) =\n    fps_const a * fps_of_poly (fps_monom_poly b k) /\n    (1 - fps_const b * fps_X) ^ (k + 1)", "by (intro unit_div_mult_swap) simp_all"], ["proof (state)\nthis:\n  fps_const a *\n  (fps_of_poly (fps_monom_poly b k) / (1 - fps_const b * fps_X) ^ (k + 1)) =\n  fps_const a * fps_of_poly (fps_monom_poly b k) /\n  (1 - fps_const b * fps_X) ^ (k + 1)\n\ngoal (2 subgoals):\n 1. Abs_fps (eval_polyexp []) = polyexp_fps []\n 2. \\<And>a xs.\n       Abs_fps (eval_polyexp xs) = polyexp_fps xs \\<Longrightarrow>\n       Abs_fps (eval_polyexp (a # xs)) = polyexp_fps (a # xs)", "also"], ["proof (state)\nthis:\n  fps_const a *\n  (fps_of_poly (fps_monom_poly b k) / (1 - fps_const b * fps_X) ^ (k + 1)) =\n  fps_const a * fps_of_poly (fps_monom_poly b k) /\n  (1 - fps_const b * fps_X) ^ (k + 1)\n\ngoal (2 subgoals):\n 1. Abs_fps (eval_polyexp []) = polyexp_fps []\n 2. \\<And>a xs.\n       Abs_fps (eval_polyexp xs) = polyexp_fps xs \\<Longrightarrow>\n       Abs_fps (eval_polyexp (a # xs)) = polyexp_fps (a # xs)", "have \"fps_const a * ?A = fps_of_poly (Polynomial.smult a (fps_monom_poly b k))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fps_const a * fps_of_poly (fps_monom_poly b k) =\n    fps_of_poly (smult a (fps_monom_poly b k))", "by simp"], ["proof (state)\nthis:\n  fps_const a * fps_of_poly (fps_monom_poly b k) =\n  fps_of_poly (smult a (fps_monom_poly b k))\n\ngoal (2 subgoals):\n 1. Abs_fps (eval_polyexp []) = polyexp_fps []\n 2. \\<And>a xs.\n       Abs_fps (eval_polyexp xs) = polyexp_fps xs \\<Longrightarrow>\n       Abs_fps (eval_polyexp (a # xs)) = polyexp_fps (a # xs)", "also"], ["proof (state)\nthis:\n  fps_const a * fps_of_poly (fps_monom_poly b k) =\n  fps_of_poly (smult a (fps_monom_poly b k))\n\ngoal (2 subgoals):\n 1. Abs_fps (eval_polyexp []) = polyexp_fps []\n 2. \\<And>a xs.\n       Abs_fps (eval_polyexp xs) = polyexp_fps xs \\<Longrightarrow>\n       Abs_fps (eval_polyexp (a # xs)) = polyexp_fps (a # xs)", "note Cons.IH"], ["proof (state)\nthis:\n  Abs_fps (eval_polyexp xs) = polyexp_fps xs\n\ngoal (2 subgoals):\n 1. Abs_fps (eval_polyexp []) = polyexp_fps []\n 2. \\<And>a xs.\n       Abs_fps (eval_polyexp xs) = polyexp_fps xs \\<Longrightarrow>\n       Abs_fps (eval_polyexp (a # xs)) = polyexp_fps (a # xs)", "finally"], ["proof (chain)\npicking this:\n  Abs_fps (eval_polyexp (x # xs)) =\n  fps_of_poly (smult a (fps_monom_poly b k)) /\n  (1 - fps_const b * fps_X) ^ (k + 1) +\n  polyexp_fps xs", "show ?case"], ["proof (prove)\nusing this:\n  Abs_fps (eval_polyexp (x # xs)) =\n  fps_of_poly (smult a (fps_monom_poly b k)) /\n  (1 - fps_const b * fps_X) ^ (k + 1) +\n  polyexp_fps xs\n\ngoal (1 subgoal):\n 1. Abs_fps (eval_polyexp (x # xs)) = polyexp_fps (x # xs)", "by (simp add: polyexp_fps_Cons)"], ["proof (state)\nthis:\n  Abs_fps (eval_polyexp (x # xs)) = polyexp_fps (x # xs)\n\ngoal (1 subgoal):\n 1. Abs_fps (eval_polyexp []) = polyexp_fps []", "qed (simp_all add: fps_zero_def)"], ["", "lemma polyexp_ratfps [simp]: \"fps_of_ratfps (polyexp_ratfps xs) = polyexp_fps xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fps_of_ratfps (polyexp_ratfps xs) = polyexp_fps xs", "by (induction xs)\n     (auto simp del: power_Suc fps_const_neg \n           simp: coeff_0_power fps_of_poly_power fps_of_poly_smult fps_of_poly_pCons \n                 fps_const_neg [symmetric] mult_ac polyexp_ratfps_Cons polyexp_fps_Cons)"], ["", "definition lir_fps :: \n    \"'a :: field_gcd list \\<Rightarrow> 'a list \\<Rightarrow> 'a polyexp \\<Rightarrow> ('a ratfps) option\" where\n  \"lir_fps cs fs g = (if cs = [] \\<or> length fs < length cs - 1 then None else\n     let m = length fs + 1 - length cs;\n         p = lir_fps_numerator m cs (\\<lambda>n. fs ! n) (eval_polyexp g);\n         q = lr_fps_denominator cs\n     in  Some ((ratfps_of_poly p + polyexp_ratfps g) * inverse (ratfps_of_poly q)))\""], ["", "lemma lir_fps_correct:\n  fixes   f :: \"nat \\<Rightarrow> 'a :: field_gcd\"\n  assumes \"linear_inhomogenous_recurrence f (eval_polyexp g) cs fs\"\n  shows   \"map_option fps_of_ratfps (lir_fps cs fs g) = Some (Abs_fps f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map_option fps_of_ratfps (lir_fps cs fs g) = Some (Abs_fps f)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. map_option fps_of_ratfps (lir_fps cs fs g) = Some (Abs_fps f)", "interpret linear_inhomogenous_recurrence f \"eval_polyexp g\" cs fs"], ["proof (prove)\ngoal (1 subgoal):\n 1. linear_inhomogenous_recurrence f (eval_polyexp g) cs fs", "by fact"], ["proof (state)\ngoal (1 subgoal):\n 1. map_option fps_of_ratfps (lir_fps cs fs g) = Some (Abs_fps f)", "define m where \"m = length fs + 1 - length cs\""], ["proof (state)\nthis:\n  m = length fs + 1 - length cs\n\ngoal (1 subgoal):\n 1. map_option fps_of_ratfps (lir_fps cs fs g) = Some (Abs_fps f)", "let ?num = \"lir_fps_numerator m cs f (eval_polyexp g)\""], ["proof (state)\ngoal (1 subgoal):\n 1. map_option fps_of_ratfps (lir_fps cs fs g) = Some (Abs_fps f)", "let ?num' = \"lir_fps_numerator m cs ((!) fs) (eval_polyexp g)\""], ["proof (state)\ngoal (1 subgoal):\n 1. map_option fps_of_ratfps (lir_fps cs fs g) = Some (Abs_fps f)", "let ?denom = \"lr_fps_denominator cs\""], ["proof (state)\ngoal (1 subgoal):\n 1. map_option fps_of_ratfps (lir_fps cs fs g) = Some (Abs_fps f)", "have \"{..length cs - 1} = {..<length cs}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {..length cs - 1} = {..<length cs}", "by (cases cs) auto"], ["proof (state)\nthis:\n  {..length cs - 1} = {..<length cs}\n\ngoal (1 subgoal):\n 1. map_option fps_of_ratfps (lir_fps cs fs g) = Some (Abs_fps f)", "moreover"], ["proof (state)\nthis:\n  {..length cs - 1} = {..<length cs}\n\ngoal (1 subgoal):\n 1. map_option fps_of_ratfps (lir_fps cs fs g) = Some (Abs_fps f)", "have \"length cs \\<ge> 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 \\<le> length cs", "by (cases cs) auto"], ["proof (state)\nthis:\n  1 \\<le> length cs\n\ngoal (1 subgoal):\n 1. map_option fps_of_ratfps (lir_fps cs fs g) = Some (Abs_fps f)", "ultimately"], ["proof (chain)\npicking this:\n  {..length cs - 1} = {..<length cs}\n  1 \\<le> length cs", "have \"Abs_fps f = (fps_of_poly ?num + Abs_fps (eval_polyexp g)) / fps_of_poly ?denom\""], ["proof (prove)\nusing this:\n  {..length cs - 1} = {..<length cs}\n  1 \\<le> length cs\n\ngoal (1 subgoal):\n 1. Abs_fps f =\n    (fps_of_poly (lir_fps_numerator m cs f (eval_polyexp g)) +\n     Abs_fps (eval_polyexp g)) /\n    fps_of_poly (lr_fps_denominator cs)", "by (intro lir_fps) (insert rec, simp_all add: m_def)"], ["proof (state)\nthis:\n  Abs_fps f =\n  (fps_of_poly (lir_fps_numerator m cs f (eval_polyexp g)) +\n   Abs_fps (eval_polyexp g)) /\n  fps_of_poly (lr_fps_denominator cs)\n\ngoal (1 subgoal):\n 1. map_option fps_of_ratfps (lir_fps cs fs g) = Some (Abs_fps f)", "also"], ["proof (state)\nthis:\n  Abs_fps f =\n  (fps_of_poly (lir_fps_numerator m cs f (eval_polyexp g)) +\n   Abs_fps (eval_polyexp g)) /\n  fps_of_poly (lr_fps_denominator cs)\n\ngoal (1 subgoal):\n 1. map_option fps_of_ratfps (lir_fps cs fs g) = Some (Abs_fps f)", "have \"?num = ?num'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lir_fps_numerator m cs f (eval_polyexp g) =\n    lir_fps_numerator m cs ((!) fs) (eval_polyexp g)", "by (rule lir_fps_numerator_altdef [folded m_def])"], ["proof (state)\nthis:\n  lir_fps_numerator m cs f (eval_polyexp g) =\n  lir_fps_numerator m cs ((!) fs) (eval_polyexp g)\n\ngoal (1 subgoal):\n 1. map_option fps_of_ratfps (lir_fps cs fs g) = Some (Abs_fps f)", "also"], ["proof (state)\nthis:\n  lir_fps_numerator m cs f (eval_polyexp g) =\n  lir_fps_numerator m cs ((!) fs) (eval_polyexp g)\n\ngoal (1 subgoal):\n 1. map_option fps_of_ratfps (lir_fps cs fs g) = Some (Abs_fps f)", "have \"(fps_of_poly ?num' + Abs_fps (eval_polyexp g)) / fps_of_poly ?denom = \n                fps_of_ratfps ((ratfps_of_poly ?num' + polyexp_ratfps g) * \n                  inverse (ratfps_of_poly ?denom))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (fps_of_poly (lir_fps_numerator m cs ((!) fs) (eval_polyexp g)) +\n     Abs_fps (eval_polyexp g)) /\n    fps_of_poly (lr_fps_denominator cs) =\n    fps_of_ratfps\n     ((ratfps_of_poly (lir_fps_numerator m cs ((!) fs) (eval_polyexp g)) +\n       polyexp_ratfps g) *\n      inverse (ratfps_of_poly (lr_fps_denominator cs)))", "by (simp add: polyexp_fps fps_divide_unit)"], ["proof (state)\nthis:\n  (fps_of_poly (lir_fps_numerator m cs ((!) fs) (eval_polyexp g)) +\n   Abs_fps (eval_polyexp g)) /\n  fps_of_poly (lr_fps_denominator cs) =\n  fps_of_ratfps\n   ((ratfps_of_poly (lir_fps_numerator m cs ((!) fs) (eval_polyexp g)) +\n     polyexp_ratfps g) *\n    inverse (ratfps_of_poly (lr_fps_denominator cs)))\n\ngoal (1 subgoal):\n 1. map_option fps_of_ratfps (lir_fps cs fs g) = Some (Abs_fps f)", "also"], ["proof (state)\nthis:\n  (fps_of_poly (lir_fps_numerator m cs ((!) fs) (eval_polyexp g)) +\n   Abs_fps (eval_polyexp g)) /\n  fps_of_poly (lr_fps_denominator cs) =\n  fps_of_ratfps\n   ((ratfps_of_poly (lir_fps_numerator m cs ((!) fs) (eval_polyexp g)) +\n     polyexp_ratfps g) *\n    inverse (ratfps_of_poly (lr_fps_denominator cs)))\n\ngoal (1 subgoal):\n 1. map_option fps_of_ratfps (lir_fps cs fs g) = Some (Abs_fps f)", "from enough_base"], ["proof (chain)\npicking this:\n  length cs \\<le> length fs + 1", "have \"Some \\<dots> = map_option fps_of_ratfps (lir_fps cs fs g)\""], ["proof (prove)\nusing this:\n  length cs \\<le> length fs + 1\n\ngoal (1 subgoal):\n 1. Some\n     (fps_of_ratfps\n       ((ratfps_of_poly (lir_fps_numerator m cs ((!) fs) (eval_polyexp g)) +\n         polyexp_ratfps g) *\n        inverse (ratfps_of_poly (lr_fps_denominator cs)))) =\n    map_option fps_of_ratfps (lir_fps cs fs g)", "by (cases cs) (simp_all add: base fps_of_ratfps_def case_prod_unfold lir_fps_def m_def)"], ["proof (state)\nthis:\n  Some\n   (fps_of_ratfps\n     ((ratfps_of_poly (lir_fps_numerator m cs ((!) fs) (eval_polyexp g)) +\n       polyexp_ratfps g) *\n      inverse (ratfps_of_poly (lr_fps_denominator cs)))) =\n  map_option fps_of_ratfps (lir_fps cs fs g)\n\ngoal (1 subgoal):\n 1. map_option fps_of_ratfps (lir_fps cs fs g) = Some (Abs_fps f)", "finally"], ["proof (chain)\npicking this:\n  Some (Abs_fps f) = map_option fps_of_ratfps (lir_fps cs fs g)", "show ?thesis"], ["proof (prove)\nusing this:\n  Some (Abs_fps f) = map_option fps_of_ratfps (lir_fps cs fs g)\n\ngoal (1 subgoal):\n 1. map_option fps_of_ratfps (lir_fps cs fs g) = Some (Abs_fps f)", ".."], ["proof (state)\nthis:\n  map_option fps_of_ratfps (lir_fps cs fs g) = Some (Abs_fps f)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}