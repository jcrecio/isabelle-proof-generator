{"file_name": "/home/qj213/afp-2021-10-22/thys/Linear_Recurrences/Eulerian_Polynomials.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Linear_Recurrences", "problem_names": ["lemmas eulerian_poly_Suc [simp del] = eulerian_poly.simps(2)", "lemma eulerian_poly:\n  \"fps_of_poly (eulerian_poly k :: 'a :: field poly) = \n     Abs_fps (\\<lambda>n. of_nat (n+1) ^ k) * (1 - fps_X) ^ (k + 1)\"", "lemma eulerian_poly':\n  \"Abs_fps (\\<lambda>n. of_nat (n+1) ^ k) = \n     fps_of_poly (eulerian_poly k :: 'a :: field poly) / (1 - fps_X) ^ (k + 1)\"", "lemma eulerian_poly'':\n  assumes k: \"k > 0\"\n  shows \"Abs_fps (\\<lambda>n. of_nat n ^ k) = \n           fps_of_poly (pCons 0 (eulerian_poly k :: 'a :: field poly)) / (1 - fps_X) ^ (k + 1)\"", "lemma fps_monom_poly_aux:\n  \"fps_monom_poly_aux c k = smult c (pcompose (eulerian_poly k) [:0,c:])\"", "lemma fps_monom_poly_code [code]:\n  \"fps_monom_poly c k = (if k = 0 then 1 else pCons 0 (fps_monom_poly_aux c k))\"", "lemma fps_monom_aux: \n  \"Abs_fps (\\<lambda>n. of_nat n ^ k) = fps_of_poly (fps_monom_poly 1 k) / (1 - fps_X) ^ (k+1)\"", "lemma fps_monom:\n  \"Abs_fps (\\<lambda>n. of_nat n ^ k * c ^ n) = \n      fps_of_poly (fps_monom_poly c k) / (1 - fps_const c * fps_X) ^ (k+1)\""], "translations": [["", "lemmas eulerian_poly_Suc [simp del] = eulerian_poly.simps(2)"], ["", "lemma eulerian_poly:\n  \"fps_of_poly (eulerian_poly k :: 'a :: field poly) = \n     Abs_fps (\\<lambda>n. of_nat (n+1) ^ k) * (1 - fps_X) ^ (k + 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fps_of_poly (eulerian_poly k) =\n    Abs_fps (\\<lambda>n. of_nat (n + 1) ^ k) * (1 - fps_X) ^ (k + 1)", "proof (induction k)"], ["proof (state)\ngoal (2 subgoals):\n 1. fps_of_poly (eulerian_poly 0) =\n    Abs_fps (\\<lambda>n. of_nat (n + 1) ^ 0) * (1 - fps_X) ^ (0 + 1)\n 2. \\<And>k.\n       fps_of_poly (eulerian_poly k) =\n       Abs_fps (\\<lambda>n. of_nat (n + 1) ^ k) *\n       (1 - fps_X) ^ (k + 1) \\<Longrightarrow>\n       fps_of_poly (eulerian_poly (Suc k)) =\n       Abs_fps (\\<lambda>n. of_nat (n + 1) ^ Suc k) *\n       (1 - fps_X) ^ (Suc k + 1)", "case 0"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. fps_of_poly (eulerian_poly 0) =\n    Abs_fps (\\<lambda>n. of_nat (n + 1) ^ 0) * (1 - fps_X) ^ (0 + 1)\n 2. \\<And>k.\n       fps_of_poly (eulerian_poly k) =\n       Abs_fps (\\<lambda>n. of_nat (n + 1) ^ k) *\n       (1 - fps_X) ^ (k + 1) \\<Longrightarrow>\n       fps_of_poly (eulerian_poly (Suc k)) =\n       Abs_fps (\\<lambda>n. of_nat (n + 1) ^ Suc k) *\n       (1 - fps_X) ^ (Suc k + 1)", "have \"Abs_fps (\\<lambda>_. 1 :: 'a) = inverse (1 - fps_X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Abs_fps (\\<lambda>_. 1::'a) = inverse (1 - fps_X)", "by (rule fps_inverse_unique [symmetric])\n       (simp add: inverse_mult_eq_1 fps_inverse_gp' [symmetric])"], ["proof (state)\nthis:\n  Abs_fps (\\<lambda>_. 1::'a) = inverse (1 - fps_X)\n\ngoal (2 subgoals):\n 1. fps_of_poly (eulerian_poly 0) =\n    Abs_fps (\\<lambda>n. of_nat (n + 1) ^ 0) * (1 - fps_X) ^ (0 + 1)\n 2. \\<And>k.\n       fps_of_poly (eulerian_poly k) =\n       Abs_fps (\\<lambda>n. of_nat (n + 1) ^ k) *\n       (1 - fps_X) ^ (k + 1) \\<Longrightarrow>\n       fps_of_poly (eulerian_poly (Suc k)) =\n       Abs_fps (\\<lambda>n. of_nat (n + 1) ^ Suc k) *\n       (1 - fps_X) ^ (Suc k + 1)", "thus ?case"], ["proof (prove)\nusing this:\n  Abs_fps (\\<lambda>_. 1::'a) = inverse (1 - fps_X)\n\ngoal (1 subgoal):\n 1. fps_of_poly (eulerian_poly 0) =\n    Abs_fps (\\<lambda>n. of_nat (n + 1) ^ 0) * (1 - fps_X) ^ (0 + 1)", "by (simp add: inverse_mult_eq_1)"], ["proof (state)\nthis:\n  fps_of_poly (eulerian_poly 0) =\n  Abs_fps (\\<lambda>n. of_nat (n + 1) ^ 0) * (1 - fps_X) ^ (0 + 1)\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       fps_of_poly (eulerian_poly k) =\n       Abs_fps (\\<lambda>n. of_nat (n + 1) ^ k) *\n       (1 - fps_X) ^ (k + 1) \\<Longrightarrow>\n       fps_of_poly (eulerian_poly (Suc k)) =\n       Abs_fps (\\<lambda>n. of_nat (n + 1) ^ Suc k) *\n       (1 - fps_X) ^ (Suc k + 1)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>k.\n       fps_of_poly (eulerian_poly k) =\n       Abs_fps (\\<lambda>n. of_nat (n + 1) ^ k) *\n       (1 - fps_X) ^ (k + 1) \\<Longrightarrow>\n       fps_of_poly (eulerian_poly (Suc k)) =\n       Abs_fps (\\<lambda>n. of_nat (n + 1) ^ Suc k) *\n       (1 - fps_X) ^ (Suc k + 1)", "case (Suc k)"], ["proof (state)\nthis:\n  fps_of_poly (eulerian_poly k) =\n  Abs_fps (\\<lambda>n. of_nat (n + 1) ^ k) * (1 - fps_X) ^ (k + 1)\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       fps_of_poly (eulerian_poly k) =\n       Abs_fps (\\<lambda>n. of_nat (n + 1) ^ k) *\n       (1 - fps_X) ^ (k + 1) \\<Longrightarrow>\n       fps_of_poly (eulerian_poly (Suc k)) =\n       Abs_fps (\\<lambda>n. of_nat (n + 1) ^ Suc k) *\n       (1 - fps_X) ^ (Suc k + 1)", "define p :: \"'a fps\" where \"p = fps_of_poly (eulerian_poly k)\""], ["proof (state)\nthis:\n  p = fps_of_poly (eulerian_poly k)\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       fps_of_poly (eulerian_poly k) =\n       Abs_fps (\\<lambda>n. of_nat (n + 1) ^ k) *\n       (1 - fps_X) ^ (k + 1) \\<Longrightarrow>\n       fps_of_poly (eulerian_poly (Suc k)) =\n       Abs_fps (\\<lambda>n. of_nat (n + 1) ^ Suc k) *\n       (1 - fps_X) ^ (Suc k + 1)", "define F :: \"'a fps\" where \"F = Abs_fps (\\<lambda>n. of_nat (n+1) ^ k)\""], ["proof (state)\nthis:\n  F = Abs_fps (\\<lambda>n. of_nat (n + 1) ^ k)\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       fps_of_poly (eulerian_poly k) =\n       Abs_fps (\\<lambda>n. of_nat (n + 1) ^ k) *\n       (1 - fps_X) ^ (k + 1) \\<Longrightarrow>\n       fps_of_poly (eulerian_poly (Suc k)) =\n       Abs_fps (\\<lambda>n. of_nat (n + 1) ^ Suc k) *\n       (1 - fps_X) ^ (Suc k + 1)", "have p: \"p = F * (1 - fps_X) ^ (k+1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p = F * (1 - fps_X) ^ (k + 1)", "by (simp add: p_def Suc F_def)"], ["proof (state)\nthis:\n  p = F * (1 - fps_X) ^ (k + 1)\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       fps_of_poly (eulerian_poly k) =\n       Abs_fps (\\<lambda>n. of_nat (n + 1) ^ k) *\n       (1 - fps_X) ^ (k + 1) \\<Longrightarrow>\n       fps_of_poly (eulerian_poly (Suc k)) =\n       Abs_fps (\\<lambda>n. of_nat (n + 1) ^ Suc k) *\n       (1 - fps_X) ^ (Suc k + 1)", "have p': \"fps_deriv p = fps_deriv F * (1 - fps_X) ^ (k + 1) - F * (1 - fps_X) ^ k * of_nat (k + 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fps_deriv p =\n    fps_deriv F * (1 - fps_X) ^ (k + 1) -\n    F * (1 - fps_X) ^ k * of_nat (k + 1)", "by (simp add: p fps_deriv_power algebra_simps fps_const_neg [symmetric] fps_of_nat \n             del: power_Suc of_nat_Suc fps_const_neg)"], ["proof (state)\nthis:\n  fps_deriv p =\n  fps_deriv F * (1 - fps_X) ^ (k + 1) - F * (1 - fps_X) ^ k * of_nat (k + 1)\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       fps_of_poly (eulerian_poly k) =\n       Abs_fps (\\<lambda>n. of_nat (n + 1) ^ k) *\n       (1 - fps_X) ^ (k + 1) \\<Longrightarrow>\n       fps_of_poly (eulerian_poly (Suc k)) =\n       Abs_fps (\\<lambda>n. of_nat (n + 1) ^ Suc k) *\n       (1 - fps_X) ^ (Suc k + 1)", "have \"fps_of_poly (eulerian_poly (Suc k)) = (fps_X * fps_deriv F + F) * (1 - fps_X) ^ (Suc k + 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fps_of_poly (eulerian_poly (Suc k)) =\n    (fps_X * fps_deriv F + F) * (1 - fps_X) ^ (Suc k + 1)", "apply (simp add: Let_def p_def [symmetric] fps_of_poly_simps eulerian_poly_Suc del: power_Suc)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (fps_deriv p - fps_deriv p * fps_X) * fps_X +\n    (p + fps_const (of_nat k) * p * fps_X) =\n    (fps_X * fps_deriv F + F) * (1 - fps_X) ^ Suc (Suc k)", "apply (simp add: p p' fps_deriv_power fps_const_neg [symmetric] fps_of_nat\n                del: power_Suc of_nat_Suc fps_const_neg)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (fps_deriv F * (1 - fps_X) ^ Suc k -\n     F * (of_nat (Suc k) * (1 - fps_X) ^ k) -\n     (fps_deriv F * (1 - fps_X) ^ Suc k -\n      F * (of_nat (Suc k) * (1 - fps_X) ^ k)) *\n     fps_X) *\n    fps_X +\n    (F * (1 - fps_X) ^ Suc k +\n     of_nat k * (F * (1 - fps_X) ^ Suc k) * fps_X) =\n    (fps_X * fps_deriv F + F) * (1 - fps_X) ^ Suc (Suc k)", "apply (simp add: algebra_simps)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  fps_of_poly (eulerian_poly (Suc k)) =\n  (fps_X * fps_deriv F + F) * (1 - fps_X) ^ (Suc k + 1)\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       fps_of_poly (eulerian_poly k) =\n       Abs_fps (\\<lambda>n. of_nat (n + 1) ^ k) *\n       (1 - fps_X) ^ (k + 1) \\<Longrightarrow>\n       fps_of_poly (eulerian_poly (Suc k)) =\n       Abs_fps (\\<lambda>n. of_nat (n + 1) ^ Suc k) *\n       (1 - fps_X) ^ (Suc k + 1)", "also"], ["proof (state)\nthis:\n  fps_of_poly (eulerian_poly (Suc k)) =\n  (fps_X * fps_deriv F + F) * (1 - fps_X) ^ (Suc k + 1)\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       fps_of_poly (eulerian_poly k) =\n       Abs_fps (\\<lambda>n. of_nat (n + 1) ^ k) *\n       (1 - fps_X) ^ (k + 1) \\<Longrightarrow>\n       fps_of_poly (eulerian_poly (Suc k)) =\n       Abs_fps (\\<lambda>n. of_nat (n + 1) ^ Suc k) *\n       (1 - fps_X) ^ (Suc k + 1)", "have \"fps_X * fps_deriv F + F = Abs_fps (\\<lambda>n. of_nat (n + 1) ^ Suc k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fps_X * fps_deriv F + F = Abs_fps (\\<lambda>n. of_nat (n + 1) ^ Suc k)", "unfolding F_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. fps_X * fps_deriv (Abs_fps (\\<lambda>n. of_nat (n + 1) ^ k)) +\n    Abs_fps (\\<lambda>n. of_nat (n + 1) ^ k) =\n    Abs_fps (\\<lambda>n. of_nat (n + 1) ^ Suc k)", "by (intro fps_ext) (auto simp: algebra_simps)"], ["proof (state)\nthis:\n  fps_X * fps_deriv F + F = Abs_fps (\\<lambda>n. of_nat (n + 1) ^ Suc k)\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       fps_of_poly (eulerian_poly k) =\n       Abs_fps (\\<lambda>n. of_nat (n + 1) ^ k) *\n       (1 - fps_X) ^ (k + 1) \\<Longrightarrow>\n       fps_of_poly (eulerian_poly (Suc k)) =\n       Abs_fps (\\<lambda>n. of_nat (n + 1) ^ Suc k) *\n       (1 - fps_X) ^ (Suc k + 1)", "finally"], ["proof (chain)\npicking this:\n  fps_of_poly (eulerian_poly (Suc k)) =\n  Abs_fps (\\<lambda>n. of_nat (n + 1) ^ Suc k) * (1 - fps_X) ^ (Suc k + 1)", "show ?case"], ["proof (prove)\nusing this:\n  fps_of_poly (eulerian_poly (Suc k)) =\n  Abs_fps (\\<lambda>n. of_nat (n + 1) ^ Suc k) * (1 - fps_X) ^ (Suc k + 1)\n\ngoal (1 subgoal):\n 1. fps_of_poly (eulerian_poly (Suc k)) =\n    Abs_fps (\\<lambda>n. of_nat (n + 1) ^ Suc k) * (1 - fps_X) ^ (Suc k + 1)", "."], ["proof (state)\nthis:\n  fps_of_poly (eulerian_poly (Suc k)) =\n  Abs_fps (\\<lambda>n. of_nat (n + 1) ^ Suc k) * (1 - fps_X) ^ (Suc k + 1)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma eulerian_poly':\n  \"Abs_fps (\\<lambda>n. of_nat (n+1) ^ k) = \n     fps_of_poly (eulerian_poly k :: 'a :: field poly) / (1 - fps_X) ^ (k + 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Abs_fps (\\<lambda>n. of_nat (n + 1) ^ k) =\n    fps_of_poly (eulerian_poly k) / (1 - fps_X) ^ (k + 1)", "by (subst eulerian_poly) simp"], ["", "lemma eulerian_poly'':\n  assumes k: \"k > 0\"\n  shows \"Abs_fps (\\<lambda>n. of_nat n ^ k) = \n           fps_of_poly (pCons 0 (eulerian_poly k :: 'a :: field poly)) / (1 - fps_X) ^ (k + 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Abs_fps (\\<lambda>n. of_nat n ^ k) =\n    fps_of_poly (pCons (0::'a) (eulerian_poly k)) / (1 - fps_X) ^ (k + 1)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Abs_fps (\\<lambda>n. of_nat n ^ k) =\n    fps_of_poly (pCons (0::'a) (eulerian_poly k)) / (1 - fps_X) ^ (k + 1)", "from assms"], ["proof (chain)\npicking this:\n  0 < k", "have \"Abs_fps (\\<lambda>n. of_nat n ^ k :: 'a) = fps_X * Abs_fps (\\<lambda>n. of_nat (n + 1) ^ k)\""], ["proof (prove)\nusing this:\n  0 < k\n\ngoal (1 subgoal):\n 1. Abs_fps (\\<lambda>n. of_nat n ^ k) =\n    fps_X * Abs_fps (\\<lambda>n. of_nat (n + 1) ^ k)", "by (intro fps_ext) (auto simp: of_nat_diff)"], ["proof (state)\nthis:\n  Abs_fps (\\<lambda>n. of_nat n ^ k) =\n  fps_X * Abs_fps (\\<lambda>n. of_nat (n + 1) ^ k)\n\ngoal (1 subgoal):\n 1. Abs_fps (\\<lambda>n. of_nat n ^ k) =\n    fps_of_poly (pCons (0::'a) (eulerian_poly k)) / (1 - fps_X) ^ (k + 1)", "also"], ["proof (state)\nthis:\n  Abs_fps (\\<lambda>n. of_nat n ^ k) =\n  fps_X * Abs_fps (\\<lambda>n. of_nat (n + 1) ^ k)\n\ngoal (1 subgoal):\n 1. Abs_fps (\\<lambda>n. of_nat n ^ k) =\n    fps_of_poly (pCons (0::'a) (eulerian_poly k)) / (1 - fps_X) ^ (k + 1)", "have \"Abs_fps (\\<lambda>n. of_nat (n + 1) ^ k :: 'a) = \n               fps_of_poly (eulerian_poly k) / (1 - fps_X) ^ (k + 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Abs_fps (\\<lambda>n. of_nat (n + 1) ^ k) =\n    fps_of_poly (eulerian_poly k) / (1 - fps_X) ^ (k + 1)", "by (rule eulerian_poly')"], ["proof (state)\nthis:\n  Abs_fps (\\<lambda>n. of_nat (n + 1) ^ k) =\n  fps_of_poly (eulerian_poly k) / (1 - fps_X) ^ (k + 1)\n\ngoal (1 subgoal):\n 1. Abs_fps (\\<lambda>n. of_nat n ^ k) =\n    fps_of_poly (pCons (0::'a) (eulerian_poly k)) / (1 - fps_X) ^ (k + 1)", "also"], ["proof (state)\nthis:\n  Abs_fps (\\<lambda>n. of_nat (n + 1) ^ k) =\n  fps_of_poly (eulerian_poly k) / (1 - fps_X) ^ (k + 1)\n\ngoal (1 subgoal):\n 1. Abs_fps (\\<lambda>n. of_nat n ^ k) =\n    fps_of_poly (pCons (0::'a) (eulerian_poly k)) / (1 - fps_X) ^ (k + 1)", "have \"fps_X * \\<dots> = fps_of_poly (pCons 0 (eulerian_poly k)) / (1 - fps_X) ^ (k + 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fps_X * (fps_of_poly (eulerian_poly k) / (1 - fps_X) ^ (k + 1)) =\n    fps_of_poly (pCons (0::'a) (eulerian_poly k)) / (1 - fps_X) ^ (k + 1)", "by (simp add: fps_of_poly_pCons fps_divide_unit)"], ["proof (state)\nthis:\n  fps_X * (fps_of_poly (eulerian_poly k) / (1 - fps_X) ^ (k + 1)) =\n  fps_of_poly (pCons (0::'a) (eulerian_poly k)) / (1 - fps_X) ^ (k + 1)\n\ngoal (1 subgoal):\n 1. Abs_fps (\\<lambda>n. of_nat n ^ k) =\n    fps_of_poly (pCons (0::'a) (eulerian_poly k)) / (1 - fps_X) ^ (k + 1)", "finally"], ["proof (chain)\npicking this:\n  Abs_fps (\\<lambda>n. of_nat n ^ k) =\n  fps_of_poly (pCons (0::'a) (eulerian_poly k)) / (1 - fps_X) ^ (k + 1)", "show ?thesis"], ["proof (prove)\nusing this:\n  Abs_fps (\\<lambda>n. of_nat n ^ k) =\n  fps_of_poly (pCons (0::'a) (eulerian_poly k)) / (1 - fps_X) ^ (k + 1)\n\ngoal (1 subgoal):\n 1. Abs_fps (\\<lambda>n. of_nat n ^ k) =\n    fps_of_poly (pCons (0::'a) (eulerian_poly k)) / (1 - fps_X) ^ (k + 1)", "."], ["proof (state)\nthis:\n  Abs_fps (\\<lambda>n. of_nat n ^ k) =\n  fps_of_poly (pCons (0::'a) (eulerian_poly k)) / (1 - fps_X) ^ (k + 1)\n\ngoal:\nNo subgoals!", "qed"], ["", "definition fps_monom_poly :: \"'a :: field \\<Rightarrow> nat \\<Rightarrow> 'a poly\"\n  where \"fps_monom_poly c k = (if k = 0 then 1 else pcompose (pCons 0 (eulerian_poly k)) [:0,c:])\""], ["", "primrec fps_monom_poly_aux :: \"'a :: field \\<Rightarrow> nat \\<Rightarrow> 'a poly\" where\n  \"fps_monom_poly_aux c 0 = [:c:]\"\n| \"fps_monom_poly_aux c (Suc k) = \n      (let p = fps_monom_poly_aux c k\n       in  [:0,1,-c:] * pderiv p + [:1, of_nat k * c:] * p)\""], ["", "lemma fps_monom_poly_aux:\n  \"fps_monom_poly_aux c k = smult c (pcompose (eulerian_poly k) [:0,c:])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fps_monom_poly_aux c k =\n    smult c (eulerian_poly k \\<circ>\\<^sub>p [:0::'a, c:])", "by (induction k) \n     (simp_all add: eulerian_poly_Suc Let_def pderiv_pcompose pcompose_pCons\n                    pcompose_add pcompose_smult pcompose_uminus smult_add_right pderiv_pCons\n                    pderiv_smult algebra_simps one_pCons)"], ["", "lemma fps_monom_poly_code [code]:\n  \"fps_monom_poly c k = (if k = 0 then 1 else pCons 0 (fps_monom_poly_aux c k))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fps_monom_poly c k =\n    (if k = 0 then 1 else pCons (0::'a) (fps_monom_poly_aux c k))", "by (simp add: fps_monom_poly_def fps_monom_poly_aux pcompose_pCons)"], ["", "lemma fps_monom_aux: \n  \"Abs_fps (\\<lambda>n. of_nat n ^ k) = fps_of_poly (fps_monom_poly 1 k) / (1 - fps_X) ^ (k+1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Abs_fps (\\<lambda>n. of_nat n ^ k) =\n    fps_of_poly (fps_monom_poly (1::'a) k) / (1 - fps_X) ^ (k + 1)", "proof (cases \"k = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. k = 0 \\<Longrightarrow>\n    Abs_fps (\\<lambda>n. of_nat n ^ k) =\n    fps_of_poly (fps_monom_poly (1::'a) k) / (1 - fps_X) ^ (k + 1)\n 2. k \\<noteq> 0 \\<Longrightarrow>\n    Abs_fps (\\<lambda>n. of_nat n ^ k) =\n    fps_of_poly (fps_monom_poly (1::'a) k) / (1 - fps_X) ^ (k + 1)", "assume [simp]: \"k = 0\""], ["proof (state)\nthis:\n  k = 0\n\ngoal (2 subgoals):\n 1. k = 0 \\<Longrightarrow>\n    Abs_fps (\\<lambda>n. of_nat n ^ k) =\n    fps_of_poly (fps_monom_poly (1::'a) k) / (1 - fps_X) ^ (k + 1)\n 2. k \\<noteq> 0 \\<Longrightarrow>\n    Abs_fps (\\<lambda>n. of_nat n ^ k) =\n    fps_of_poly (fps_monom_poly (1::'a) k) / (1 - fps_X) ^ (k + 1)", "hence \"Abs_fps (\\<lambda>n. of_nat n ^ k :: 'a) = Abs_fps (\\<lambda>_. 1)\""], ["proof (prove)\nusing this:\n  k = 0\n\ngoal (1 subgoal):\n 1. Abs_fps (\\<lambda>n. of_nat n ^ k) = Abs_fps (\\<lambda>_. 1::'a)", "by simp"], ["proof (state)\nthis:\n  Abs_fps (\\<lambda>n. of_nat n ^ k) = Abs_fps (\\<lambda>_. 1::'a)\n\ngoal (2 subgoals):\n 1. k = 0 \\<Longrightarrow>\n    Abs_fps (\\<lambda>n. of_nat n ^ k) =\n    fps_of_poly (fps_monom_poly (1::'a) k) / (1 - fps_X) ^ (k + 1)\n 2. k \\<noteq> 0 \\<Longrightarrow>\n    Abs_fps (\\<lambda>n. of_nat n ^ k) =\n    fps_of_poly (fps_monom_poly (1::'a) k) / (1 - fps_X) ^ (k + 1)", "also"], ["proof (state)\nthis:\n  Abs_fps (\\<lambda>n. of_nat n ^ k) = Abs_fps (\\<lambda>_. 1::'a)\n\ngoal (2 subgoals):\n 1. k = 0 \\<Longrightarrow>\n    Abs_fps (\\<lambda>n. of_nat n ^ k) =\n    fps_of_poly (fps_monom_poly (1::'a) k) / (1 - fps_X) ^ (k + 1)\n 2. k \\<noteq> 0 \\<Longrightarrow>\n    Abs_fps (\\<lambda>n. of_nat n ^ k) =\n    fps_of_poly (fps_monom_poly (1::'a) k) / (1 - fps_X) ^ (k + 1)", "have \"\\<dots> = 1 / (1 - fps_X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Abs_fps (\\<lambda>_. 1::'a) = 1 / (1 - fps_X)", "by (subst gp [symmetric]) simp_all"], ["proof (state)\nthis:\n  Abs_fps (\\<lambda>_. 1::'a) = 1 / (1 - fps_X)\n\ngoal (2 subgoals):\n 1. k = 0 \\<Longrightarrow>\n    Abs_fps (\\<lambda>n. of_nat n ^ k) =\n    fps_of_poly (fps_monom_poly (1::'a) k) / (1 - fps_X) ^ (k + 1)\n 2. k \\<noteq> 0 \\<Longrightarrow>\n    Abs_fps (\\<lambda>n. of_nat n ^ k) =\n    fps_of_poly (fps_monom_poly (1::'a) k) / (1 - fps_X) ^ (k + 1)", "finally"], ["proof (chain)\npicking this:\n  Abs_fps (\\<lambda>n. of_nat n ^ k) = 1 / (1 - fps_X)", "show ?thesis"], ["proof (prove)\nusing this:\n  Abs_fps (\\<lambda>n. of_nat n ^ k) = 1 / (1 - fps_X)\n\ngoal (1 subgoal):\n 1. Abs_fps (\\<lambda>n. of_nat n ^ k) =\n    fps_of_poly (fps_monom_poly (1::'a) k) / (1 - fps_X) ^ (k + 1)", "by (simp add: fps_monom_poly_def)"], ["proof (state)\nthis:\n  Abs_fps (\\<lambda>n. of_nat n ^ k) =\n  fps_of_poly (fps_monom_poly (1::'a) k) / (1 - fps_X) ^ (k + 1)\n\ngoal (1 subgoal):\n 1. k \\<noteq> 0 \\<Longrightarrow>\n    Abs_fps (\\<lambda>n. of_nat n ^ k) =\n    fps_of_poly (fps_monom_poly (1::'a) k) / (1 - fps_X) ^ (k + 1)", "qed (insert eulerian_poly''[of k, where ?'a = 'a], simp add: fps_monom_poly_def)"], ["", "lemma fps_monom:\n  \"Abs_fps (\\<lambda>n. of_nat n ^ k * c ^ n) = \n      fps_of_poly (fps_monom_poly c k) / (1 - fps_const c * fps_X) ^ (k+1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Abs_fps (\\<lambda>n. of_nat n ^ k * c ^ n) =\n    fps_of_poly (fps_monom_poly c k) / (1 - fps_const c * fps_X) ^ (k + 1)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Abs_fps (\\<lambda>n. of_nat n ^ k * c ^ n) =\n    fps_of_poly (fps_monom_poly c k) / (1 - fps_const c * fps_X) ^ (k + 1)", "have \"Abs_fps (\\<lambda>n. of_nat n ^ k * c ^ n) = \n          fps_compose (Abs_fps (\\<lambda>n. of_nat n ^ k)) (fps_const c * fps_X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Abs_fps (\\<lambda>n. of_nat n ^ k * c ^ n) =\n    Abs_fps (\\<lambda>n. of_nat n ^ k) oo fps_const c * fps_X", "by (subst fps_compose_linear) (simp add: mult_ac)"], ["proof (state)\nthis:\n  Abs_fps (\\<lambda>n. of_nat n ^ k * c ^ n) =\n  Abs_fps (\\<lambda>n. of_nat n ^ k) oo fps_const c * fps_X\n\ngoal (1 subgoal):\n 1. Abs_fps (\\<lambda>n. of_nat n ^ k * c ^ n) =\n    fps_of_poly (fps_monom_poly c k) / (1 - fps_const c * fps_X) ^ (k + 1)", "also"], ["proof (state)\nthis:\n  Abs_fps (\\<lambda>n. of_nat n ^ k * c ^ n) =\n  Abs_fps (\\<lambda>n. of_nat n ^ k) oo fps_const c * fps_X\n\ngoal (1 subgoal):\n 1. Abs_fps (\\<lambda>n. of_nat n ^ k * c ^ n) =\n    fps_of_poly (fps_monom_poly c k) / (1 - fps_const c * fps_X) ^ (k + 1)", "have \"Abs_fps (\\<lambda>n. of_nat n ^ k) = fps_of_poly (fps_monom_poly 1 k) / (1 - fps_X) ^ (k+1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Abs_fps (\\<lambda>n. of_nat n ^ k) =\n    fps_of_poly (fps_monom_poly (1::'b) k) / (1 - fps_X) ^ (k + 1)", "by (rule fps_monom_aux)"], ["proof (state)\nthis:\n  Abs_fps (\\<lambda>n. of_nat n ^ k) =\n  fps_of_poly (fps_monom_poly (1::?'b1) k) / (1 - fps_X) ^ (k + 1)\n\ngoal (1 subgoal):\n 1. Abs_fps (\\<lambda>n. of_nat n ^ k * c ^ n) =\n    fps_of_poly (fps_monom_poly c k) / (1 - fps_const c * fps_X) ^ (k + 1)", "also"], ["proof (state)\nthis:\n  Abs_fps (\\<lambda>n. of_nat n ^ k) =\n  fps_of_poly (fps_monom_poly (1::?'b1) k) / (1 - fps_X) ^ (k + 1)\n\ngoal (1 subgoal):\n 1. Abs_fps (\\<lambda>n. of_nat n ^ k * c ^ n) =\n    fps_of_poly (fps_monom_poly c k) / (1 - fps_const c * fps_X) ^ (k + 1)", "have \"fps_compose \\<dots> (fps_const c * fps_X) = \n                 (fps_of_poly (fps_monom_poly 1 k) oo fps_const c * fps_X) /\n                 ((1 - fps_X) ^ (k + 1) oo fps_const c * fps_X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fps_of_poly (fps_monom_poly (1::'a) k) / (1 - fps_X) ^ (k + 1) oo\n    fps_const c * fps_X =\n    (fps_of_poly (fps_monom_poly (1::'a) k) oo fps_const c * fps_X) /\n    ((1 - fps_X) ^ (k + 1) oo fps_const c * fps_X)", "by (intro fps_compose_divide_distrib)\n       (simp_all add: fps_compose_power [symmetric] fps_compose_sub_distrib del: power_Suc)"], ["proof (state)\nthis:\n  fps_of_poly (fps_monom_poly (1::'a) k) / (1 - fps_X) ^ (k + 1) oo\n  fps_const c * fps_X =\n  (fps_of_poly (fps_monom_poly (1::'a) k) oo fps_const c * fps_X) /\n  ((1 - fps_X) ^ (k + 1) oo fps_const c * fps_X)\n\ngoal (1 subgoal):\n 1. Abs_fps (\\<lambda>n. of_nat n ^ k * c ^ n) =\n    fps_of_poly (fps_monom_poly c k) / (1 - fps_const c * fps_X) ^ (k + 1)", "also"], ["proof (state)\nthis:\n  fps_of_poly (fps_monom_poly (1::'a) k) / (1 - fps_X) ^ (k + 1) oo\n  fps_const c * fps_X =\n  (fps_of_poly (fps_monom_poly (1::'a) k) oo fps_const c * fps_X) /\n  ((1 - fps_X) ^ (k + 1) oo fps_const c * fps_X)\n\ngoal (1 subgoal):\n 1. Abs_fps (\\<lambda>n. of_nat n ^ k * c ^ n) =\n    fps_of_poly (fps_monom_poly c k) / (1 - fps_const c * fps_X) ^ (k + 1)", "have \"fps_of_poly (fps_monom_poly 1 k) oo (fps_const c * fps_X) = \n                fps_of_poly (fps_monom_poly c k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fps_of_poly (fps_monom_poly (1::'a) k) oo fps_const c * fps_X =\n    fps_of_poly (fps_monom_poly c k)", "by (simp add: fps_monom_poly_def fps_of_poly_pcompose fps_of_poly_simps\n                  fps_of_poly_pCons mult_ac)"], ["proof (state)\nthis:\n  fps_of_poly (fps_monom_poly (1::'a) k) oo fps_const c * fps_X =\n  fps_of_poly (fps_monom_poly c k)\n\ngoal (1 subgoal):\n 1. Abs_fps (\\<lambda>n. of_nat n ^ k * c ^ n) =\n    fps_of_poly (fps_monom_poly c k) / (1 - fps_const c * fps_X) ^ (k + 1)", "also"], ["proof (state)\nthis:\n  fps_of_poly (fps_monom_poly (1::'a) k) oo fps_const c * fps_X =\n  fps_of_poly (fps_monom_poly c k)\n\ngoal (1 subgoal):\n 1. Abs_fps (\\<lambda>n. of_nat n ^ k * c ^ n) =\n    fps_of_poly (fps_monom_poly c k) / (1 - fps_const c * fps_X) ^ (k + 1)", "have \"((1 - fps_X) ^ (k + 1) oo fps_const c * fps_X) = (1 - fps_const c * fps_X) ^ (k + 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (1 - fps_X) ^ (k + 1) oo fps_const c * fps_X =\n    (1 - fps_const c * fps_X) ^ (k + 1)", "by (simp add: fps_compose_power [symmetric] fps_compose_sub_distrib del: power_Suc)"], ["proof (state)\nthis:\n  (1 - fps_X) ^ (k + 1) oo fps_const c * fps_X =\n  (1 - fps_const c * fps_X) ^ (k + 1)\n\ngoal (1 subgoal):\n 1. Abs_fps (\\<lambda>n. of_nat n ^ k * c ^ n) =\n    fps_of_poly (fps_monom_poly c k) / (1 - fps_const c * fps_X) ^ (k + 1)", "finally"], ["proof (chain)\npicking this:\n  Abs_fps (\\<lambda>n. of_nat n ^ k * c ^ n) =\n  fps_of_poly (fps_monom_poly c k) / (1 - fps_const c * fps_X) ^ (k + 1)", "show ?thesis"], ["proof (prove)\nusing this:\n  Abs_fps (\\<lambda>n. of_nat n ^ k * c ^ n) =\n  fps_of_poly (fps_monom_poly c k) / (1 - fps_const c * fps_X) ^ (k + 1)\n\ngoal (1 subgoal):\n 1. Abs_fps (\\<lambda>n. of_nat n ^ k * c ^ n) =\n    fps_of_poly (fps_monom_poly c k) / (1 - fps_const c * fps_X) ^ (k + 1)", "."], ["proof (state)\nthis:\n  Abs_fps (\\<lambda>n. of_nat n ^ k * c ^ n) =\n  fps_of_poly (fps_monom_poly c k) / (1 - fps_const c * fps_X) ^ (k + 1)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}