{"file_name": "/home/qj213/afp-2021-10-22/thys/Concurrent_Ref_Alg/Galois_Connections.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Concurrent_Ref_Alg", "problem_names": ["lemma Collect_2set [simp]:  \"{F x |x. x = a \\<or> x = b} = {F a, F b}\"", "lemma dist_inf_mono:\n  assumes distF: \"dist_over_inf F\"\n  shows \"mono F\"", "lemma l_cancellation: \"dist_over_inf F \\<Longrightarrow> x \\<sqsubseteq> (F \\<circ> F\\<^sup>\\<flat>) x\"", "lemma l_galois_connection: \"dist_over_inf F \\<Longrightarrow> ((F\\<^sup>\\<flat>) x \\<sqsubseteq> y) \\<longleftrightarrow> (x \\<sqsubseteq> F y)\"", "lemma v_simple_fusion: \"mono G \\<Longrightarrow> \\<forall>x. ((F \\<circ> G) x \\<sqsubseteq> (H \\<circ> F) x) \\<Longrightarrow> F (gfp G) \\<sqsubseteq> gfp H\"", "theorem fusion_gfp_geq:\n  assumes monoH: \"mono H\"\n  and distribF: \"dist_over_inf F\"\n  and comp_geq: \"\\<And>x. ((H \\<circ> F) x \\<sqsubseteq> (F \\<circ> G) x)\"\n  shows \"gfp H \\<sqsubseteq> F (gfp G)\"", "theorem fusion_gfp_eq: \n  assumes monoH: \"mono H\" and monoG: \"mono G\"\n  and distF: \"dist_over_inf F\"\n  and fgh_comp: \"\\<And>x. ((F \\<circ> G) x = (H \\<circ> F) x)\"\n  shows \"F (gfp G) = gfp H\"", "lemma dist_sup_mono:\n  assumes distF: \"dist_over_sup F\"\n  shows \"mono F\"", "lemma u_cancellation: \"dist_over_sup F \\<Longrightarrow> (F \\<circ> F\\<^sup>#) x \\<sqsubseteq> x\"", "lemma u_galois_connection: \"dist_over_sup F \\<Longrightarrow> (F x \\<sqsubseteq> y) \\<longleftrightarrow> (x \\<sqsubseteq> (F\\<^sup>#) y)\"", "lemma u_simple_fusion: \"mono H \\<Longrightarrow> \\<forall>x. ((F \\<circ> G) x \\<sqsubseteq> (G \\<circ> H) x) \\<Longrightarrow> lfp F \\<sqsubseteq> G (lfp H)\"", "theorem fusion_lfp_leq:\n  assumes monoH: \"mono H\"\n  and distribF: \"dist_over_sup F\"\n  and comp_leq: \"\\<And>x. ((F \\<circ> G) x \\<sqsubseteq> (H \\<circ> F) x)\" \n  shows \"F (lfp G) \\<sqsubseteq> (lfp H)\"", "theorem fusion_lfp_eq: \n  assumes monoH: \"mono H\" and monoG: \"mono G\"\n  and distF: \"dist_over_sup F\"\n  and fgh_comp: \"\\<And>x. ((F \\<circ> G) x = (H \\<circ> F) x)\" \n  shows \"F (lfp G) = (lfp H)\""], "translations": [["", "lemma Collect_2set [simp]:  \"{F x |x. x = a \\<or> x = b} = {F a, F b}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {F x |x::'b. x = a \\<or> x = b} = {F a, F b}\nvariables:\n  a, b :: 'b\n  F :: 'b \\<Rightarrow> 'a\ntype variables:\n  'a, 'b :: type", "by auto"], ["", "locale lower_galois_connections  \nbegin"], ["", "definition\n  l_adjoint :: \"('a::refinement_lattice \\<Rightarrow> 'a) \\<Rightarrow> ('a \\<Rightarrow> 'a)\" (\"_\\<^sup>\\<flat>\" [201] 200)\nwhere\n  \"(F\\<^sup>\\<flat>) x \\<equiv> \\<Sqinter>{y. x \\<sqsubseteq> F y}\""], ["", "lemma dist_inf_mono:\n  assumes distF: \"dist_over_inf F\"\n  shows \"mono F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mono F\nvariables:\n  F :: 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>(x::'a) y::'a.\n       x \\<sqsubseteq> y \\<Longrightarrow> F x \\<sqsubseteq> F y\nvariables:\n  F :: 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "fix x :: 'a and y :: 'a"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>(x::'a) y::'a.\n       x \\<sqsubseteq> y \\<Longrightarrow> F x \\<sqsubseteq> F y\nvariables:\n  F :: 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "assume \"x \\<sqsubseteq> y\""], ["proof (state)\nthis:\n  (x::'a::refinement_lattice) \\<sqsubseteq> (y::'a::refinement_lattice)\n\ngoal (1 subgoal):\n 1. \\<And>(x::'a) y::'a.\n       x \\<sqsubseteq> y \\<Longrightarrow> F x \\<sqsubseteq> F y\nvariables:\n  F :: 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "then"], ["proof (chain)\npicking this:\n  (x::'a::refinement_lattice) \\<sqsubseteq> (y::'a::refinement_lattice)", "have \"F x = F (x \\<sqinter> y)\""], ["proof (prove)\nusing this:\n  (x::'a::refinement_lattice) \\<sqsubseteq> (y::'a::refinement_lattice)\n\ngoal (1 subgoal):\n 1. F x = F (x \\<sqinter> y)\nvariables:\n  x, y :: 'a\n  F :: 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "by (simp add: le_iff_inf)"], ["proof (state)\nthis:\n  (F::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice)\n   (x::'a::refinement_lattice) =\n  F (x \\<sqinter> (y::'a::refinement_lattice))\n\ngoal (1 subgoal):\n 1. \\<And>(x::'a) y::'a.\n       x \\<sqsubseteq> y \\<Longrightarrow> F x \\<sqsubseteq> F y\nvariables:\n  F :: 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "also"], ["proof (state)\nthis:\n  (F::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice)\n   (x::'a::refinement_lattice) =\n  F (x \\<sqinter> (y::'a::refinement_lattice))\n\ngoal (1 subgoal):\n 1. \\<And>(x::'a) y::'a.\n       x \\<sqsubseteq> y \\<Longrightarrow> F x \\<sqsubseteq> F y\nvariables:\n  F :: 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "have \"... = F x \\<sqinter> F y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. F (x \\<sqinter> y) = F x \\<sqinter> F y\nvariables:\n  x, y :: 'a\n  F :: 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. F (x \\<sqinter> y) = F x \\<sqinter> F y\nvariables:\n  x, y :: 'a\n  F :: 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "from distF"], ["proof (chain)\npicking this:\n  dist_over_inf\n   (F::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice)", "have \"F (\\<Sqinter>{x, y}) = \\<Sqinter>{F x, F y}\""], ["proof (prove)\nusing this:\n  dist_over_inf\n   (F::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice)\n\ngoal (1 subgoal):\n 1. F (\\<Sqinter> {x, y}) = \\<Sqinter> {F x, F y}\nvariables:\n  x, y :: 'a\n  F :: 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "by (drule_tac x = \"{x, y}\" in spec, simp)"], ["proof (state)\nthis:\n  (F::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice)\n   (\\<Sqinter> {x::'a::refinement_lattice, y::'a::refinement_lattice}) =\n  \\<Sqinter> {F x, F y}\n\ngoal (1 subgoal):\n 1. F (x \\<sqinter> y) = F x \\<sqinter> F y\nvariables:\n  x, y :: 'a\n  F :: 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "then"], ["proof (chain)\npicking this:\n  (F::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice)\n   (\\<Sqinter> {x::'a::refinement_lattice, y::'a::refinement_lattice}) =\n  \\<Sqinter> {F x, F y}", "show \"F (x \\<sqinter> y) = F x \\<sqinter> F y\""], ["proof (prove)\nusing this:\n  (F::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice)\n   (\\<Sqinter> {x::'a::refinement_lattice, y::'a::refinement_lattice}) =\n  \\<Sqinter> {F x, F y}\n\ngoal (1 subgoal):\n 1. F (x \\<sqinter> y) = F x \\<sqinter> F y\nvariables:\n  x, y :: 'a\n  F :: 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "by simp"], ["proof (state)\nthis:\n  (F::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice)\n   ((x::'a::refinement_lattice) \\<sqinter> (y::'a::refinement_lattice)) =\n  F x \\<sqinter> F y\n\ngoal:\nNo subgoals!\nvariables:\n  x, y :: 'a\n  F :: 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "qed"], ["proof (state)\nthis:\n  (F::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice)\n   ((x::'a::refinement_lattice) \\<sqinter> (y::'a::refinement_lattice)) =\n  F x \\<sqinter> F y\n\ngoal (1 subgoal):\n 1. \\<And>(x::'a) y::'a.\n       x \\<sqsubseteq> y \\<Longrightarrow> F x \\<sqsubseteq> F y\nvariables:\n  F :: 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "finally"], ["proof (chain)\npicking this:\n  (F::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice)\n   (x::'a::refinement_lattice) =\n  F x \\<sqinter> F (y::'a::refinement_lattice)", "show \"F x \\<sqsubseteq> F y\""], ["proof (prove)\nusing this:\n  (F::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice)\n   (x::'a::refinement_lattice) =\n  F x \\<sqinter> F (y::'a::refinement_lattice)\n\ngoal (1 subgoal):\n 1. F x \\<sqsubseteq> F y\nvariables:\n  x, y :: 'a\n  F :: 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "by (metis le_iff_inf)"], ["proof (state)\nthis:\n  (F::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice)\n   (x::'a::refinement_lattice) \\<sqsubseteq>\n  F (y::'a::refinement_lattice)\n\ngoal:\nNo subgoals!\nvariables:\n  F :: 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "qed"], ["", "lemma l_cancellation: \"dist_over_inf F \\<Longrightarrow> x \\<sqsubseteq> (F \\<circ> F\\<^sup>\\<flat>) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dist_over_inf F \\<Longrightarrow>\n    x \\<sqsubseteq> (F \\<circ> F\\<^sup>\\<flat>) x\nvariables:\n  x :: 'a\n  F :: 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. dist_over_inf F \\<Longrightarrow>\n    x \\<sqsubseteq> (F \\<circ> F\\<^sup>\\<flat>) x\nvariables:\n  x :: 'a\n  F :: 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "assume dist: \"dist_over_inf F\""], ["proof (state)\nthis:\n  dist_over_inf\n   (F::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice)\n\ngoal (1 subgoal):\n 1. dist_over_inf F \\<Longrightarrow>\n    x \\<sqsubseteq> (F \\<circ> F\\<^sup>\\<flat>) x\nvariables:\n  x :: 'a\n  F :: 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "define Y where \"Y = {F y | y. x \\<sqsubseteq> F y}\""], ["proof (state)\nthis:\n  (Y::'a::refinement_lattice set) =\n  {(F::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice) y |\n   y::'a::refinement_lattice. (x::'a::refinement_lattice) \\<sqsubseteq> F y}\n\ngoal (1 subgoal):\n 1. dist_over_inf F \\<Longrightarrow>\n    x \\<sqsubseteq> (F \\<circ> F\\<^sup>\\<flat>) x\nvariables:\n  x :: 'a\n  F :: 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "define X where \"X = {x}\""], ["proof (state)\nthis:\n  (X::'a::refinement_lattice set) = {x::'a::refinement_lattice}\n\ngoal (1 subgoal):\n 1. dist_over_inf F \\<Longrightarrow>\n    x \\<sqsubseteq> (F \\<circ> F\\<^sup>\\<flat>) x\nvariables:\n  x :: 'a\n  F :: 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "have \"(\\<forall> y \\<in> Y. (\\<exists> x \\<in> X. x \\<sqsubseteq> y))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>y::'a\\<in>Y. \\<exists>x::'a\\<in>X. x \\<sqsubseteq> y\nvariables:\n  X, Y :: 'a set\ntype variables:\n  'a :: refinement_lattice", "using X_def Y_def CollectD singletonI"], ["proof (prove)\nusing this:\n  (X::'a::refinement_lattice set) = {x::'a::refinement_lattice}\n  (Y::'a::refinement_lattice set) =\n  {(F::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice) y |\n   y::'a::refinement_lattice. (x::'a::refinement_lattice) \\<sqsubseteq> F y}\n  (?a::?'a::type)\n  \\<in> {x::?'a::type.\n         (?P::?'a::type \\<Rightarrow> bool) x} \\<Longrightarrow>\n  ?P ?a\n  (?a::?'a::type) \\<in> {?a}\n\ngoal (1 subgoal):\n 1. \\<forall>y::'a\\<in>Y. \\<exists>x::'a\\<in>X. x \\<sqsubseteq> y\nvariables:\n  X, Y :: 'a set\ntype variables:\n  'a :: refinement_lattice", "by auto"], ["proof (state)\nthis:\n  \\<forall>y::'a::refinement_lattice\\<in>Y::'a::refinement_lattice set.\n     \\<exists>x::'a::refinement_lattice\\<in>X::'a::refinement_lattice set.\n        x \\<sqsubseteq> y\n\ngoal (1 subgoal):\n 1. dist_over_inf F \\<Longrightarrow>\n    x \\<sqsubseteq> (F \\<circ> F\\<^sup>\\<flat>) x\nvariables:\n  x :: 'a\n  F :: 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "then"], ["proof (chain)\npicking this:\n  \\<forall>y::'a::refinement_lattice\\<in>Y::'a::refinement_lattice set.\n     \\<exists>x::'a::refinement_lattice\\<in>X::'a::refinement_lattice set.\n        x \\<sqsubseteq> y", "have \"\\<Sqinter> X \\<sqsubseteq> \\<Sqinter> Y\""], ["proof (prove)\nusing this:\n  \\<forall>y::'a::refinement_lattice\\<in>Y::'a::refinement_lattice set.\n     \\<exists>x::'a::refinement_lattice\\<in>X::'a::refinement_lattice set.\n        x \\<sqsubseteq> y\n\ngoal (1 subgoal):\n 1. \\<Sqinter> X \\<sqsubseteq> \\<Sqinter> Y\nvariables:\n  X, Y :: 'a set\ntype variables:\n  'a :: refinement_lattice", "by (simp add: Inf_mono)"], ["proof (state)\nthis:\n  \\<Sqinter> (X::'a::refinement_lattice set) \\<sqsubseteq>\n  \\<Sqinter> (Y::'a::refinement_lattice set)\n\ngoal (1 subgoal):\n 1. dist_over_inf F \\<Longrightarrow>\n    x \\<sqsubseteq> (F \\<circ> F\\<^sup>\\<flat>) x\nvariables:\n  x :: 'a\n  F :: 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "then"], ["proof (chain)\npicking this:\n  \\<Sqinter> (X::'a::refinement_lattice set) \\<sqsubseteq>\n  \\<Sqinter> (Y::'a::refinement_lattice set)", "have \"x \\<sqsubseteq> \\<Sqinter>{F y | y. x \\<sqsubseteq> F y}\""], ["proof (prove)\nusing this:\n  \\<Sqinter> (X::'a::refinement_lattice set) \\<sqsubseteq>\n  \\<Sqinter> (Y::'a::refinement_lattice set)\n\ngoal (1 subgoal):\n 1. x \\<sqsubseteq> \\<Sqinter> {F y |y::'a. x \\<sqsubseteq> F y}\nvariables:\n  F :: 'a \\<Rightarrow> 'a\n  x :: 'a\ntype variables:\n  'a :: refinement_lattice", "by (simp add: X_def Y_def)"], ["proof (state)\nthis:\n  (x::'a::refinement_lattice) \\<sqsubseteq>\n  \\<Sqinter> {(F::'a::refinement_lattice\n                  \\<Rightarrow> 'a::refinement_lattice)\n               y |\n              y::'a::refinement_lattice. x \\<sqsubseteq> F y}\n\ngoal (1 subgoal):\n 1. dist_over_inf F \\<Longrightarrow>\n    x \\<sqsubseteq> (F \\<circ> F\\<^sup>\\<flat>) x\nvariables:\n  x :: 'a\n  F :: 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "then"], ["proof (chain)\npicking this:\n  (x::'a::refinement_lattice) \\<sqsubseteq>\n  \\<Sqinter> {(F::'a::refinement_lattice\n                  \\<Rightarrow> 'a::refinement_lattice)\n               y |\n              y::'a::refinement_lattice. x \\<sqsubseteq> F y}", "have \"x \\<sqsubseteq> F (\\<Sqinter>{y. x \\<sqsubseteq> F y})\""], ["proof (prove)\nusing this:\n  (x::'a::refinement_lattice) \\<sqsubseteq>\n  \\<Sqinter> {(F::'a::refinement_lattice\n                  \\<Rightarrow> 'a::refinement_lattice)\n               y |\n              y::'a::refinement_lattice. x \\<sqsubseteq> F y}\n\ngoal (1 subgoal):\n 1. x \\<sqsubseteq> F (\\<Sqinter> {y::'a. x \\<sqsubseteq> F y})\nvariables:\n  F :: 'a \\<Rightarrow> 'a\n  x :: 'a\ntype variables:\n  'a :: refinement_lattice", "by (simp add: dist le_INF_iff)"], ["proof (state)\nthis:\n  (x::'a::refinement_lattice) \\<sqsubseteq>\n  (F::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice)\n   (\\<Sqinter> {y::'a::refinement_lattice. x \\<sqsubseteq> F y})\n\ngoal (1 subgoal):\n 1. dist_over_inf F \\<Longrightarrow>\n    x \\<sqsubseteq> (F \\<circ> F\\<^sup>\\<flat>) x\nvariables:\n  x :: 'a\n  F :: 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "thus ?thesis"], ["proof (prove)\nusing this:\n  (x::'a::refinement_lattice) \\<sqsubseteq>\n  (F::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice)\n   (\\<Sqinter> {y::'a::refinement_lattice. x \\<sqsubseteq> F y})\n\ngoal (1 subgoal):\n 1. x \\<sqsubseteq> (F \\<circ> F\\<^sup>\\<flat>) x\nvariables:\n  F :: 'a \\<Rightarrow> 'a\n  x :: 'a\ntype variables:\n  'a :: refinement_lattice", "by (metis comp_def l_adjoint_def)"], ["proof (state)\nthis:\n  (x::'a::refinement_lattice) \\<sqsubseteq>\n  ((F::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice) \\<circ>\n   F\\<^sup>\\<flat>)\n   x\n\ngoal:\nNo subgoals!\nvariables:\n  x :: 'a\n  F :: 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "qed"], ["", "lemma l_galois_connection: \"dist_over_inf F \\<Longrightarrow> ((F\\<^sup>\\<flat>) x \\<sqsubseteq> y) \\<longleftrightarrow> (x \\<sqsubseteq> F y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dist_over_inf F \\<Longrightarrow>\n    ((F\\<^sup>\\<flat>) x \\<sqsubseteq> y) = (x \\<sqsubseteq> F y)\nvariables:\n  x, y :: 'a\n  F :: 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>dist_over_inf F; (F\\<^sup>\\<flat>) x \\<sqsubseteq> y\\<rbrakk>\n    \\<Longrightarrow> x \\<sqsubseteq> F y\n 2. \\<lbrakk>dist_over_inf F; x \\<sqsubseteq> F y\\<rbrakk>\n    \\<Longrightarrow> (F\\<^sup>\\<flat>) x \\<sqsubseteq> y\nvariables:\n  x, y :: 'a\n  F :: 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "assume \"x \\<sqsubseteq> F y\""], ["proof (state)\nthis:\n  (x::'a::refinement_lattice) \\<sqsubseteq>\n  (F::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice)\n   (y::'a::refinement_lattice)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>dist_over_inf F; (F\\<^sup>\\<flat>) x \\<sqsubseteq> y\\<rbrakk>\n    \\<Longrightarrow> x \\<sqsubseteq> F y\n 2. \\<lbrakk>dist_over_inf F; x \\<sqsubseteq> F y\\<rbrakk>\n    \\<Longrightarrow> (F\\<^sup>\\<flat>) x \\<sqsubseteq> y\nvariables:\n  x, y :: 'a\n  F :: 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "then"], ["proof (chain)\npicking this:\n  (x::'a::refinement_lattice) \\<sqsubseteq>\n  (F::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice)\n   (y::'a::refinement_lattice)", "have \"\\<Sqinter>{y. x \\<sqsubseteq> F y} \\<sqsubseteq> y\""], ["proof (prove)\nusing this:\n  (x::'a::refinement_lattice) \\<sqsubseteq>\n  (F::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice)\n   (y::'a::refinement_lattice)\n\ngoal (1 subgoal):\n 1. \\<Sqinter> {y::'a. x \\<sqsubseteq> F y} \\<sqsubseteq> y\nvariables:\n  F :: 'a \\<Rightarrow> 'a\n  x, y :: 'a\ntype variables:\n  'a :: refinement_lattice", "by (simp add: Inf_lower)"], ["proof (state)\nthis:\n  \\<Sqinter> {y::'a::refinement_lattice.\n              (x::'a::refinement_lattice) \\<sqsubseteq>\n              (F::'a::refinement_lattice\n                  \\<Rightarrow> 'a::refinement_lattice)\n               y} \\<sqsubseteq>\n  (y::'a::refinement_lattice)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>dist_over_inf F; (F\\<^sup>\\<flat>) x \\<sqsubseteq> y\\<rbrakk>\n    \\<Longrightarrow> x \\<sqsubseteq> F y\n 2. \\<lbrakk>dist_over_inf F; x \\<sqsubseteq> F y\\<rbrakk>\n    \\<Longrightarrow> (F\\<^sup>\\<flat>) x \\<sqsubseteq> y\nvariables:\n  x, y :: 'a\n  F :: 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "thus \"(F\\<^sup>\\<flat>) x \\<sqsubseteq> y\""], ["proof (prove)\nusing this:\n  \\<Sqinter> {y::'a::refinement_lattice.\n              (x::'a::refinement_lattice) \\<sqsubseteq>\n              (F::'a::refinement_lattice\n                  \\<Rightarrow> 'a::refinement_lattice)\n               y} \\<sqsubseteq>\n  (y::'a::refinement_lattice)\n\ngoal (1 subgoal):\n 1. (F\\<^sup>\\<flat>) x \\<sqsubseteq> y\nvariables:\n  x, y :: 'a\n  F :: 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "by (metis l_adjoint_def)"], ["proof (state)\nthis:\n  ((F::'a::refinement_lattice\n       \\<Rightarrow> 'a::refinement_lattice)\\<^sup>\\<flat>)\n   (x::'a::refinement_lattice) \\<sqsubseteq>\n  (y::'a::refinement_lattice)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>dist_over_inf F; (F\\<^sup>\\<flat>) x \\<sqsubseteq> y\\<rbrakk>\n    \\<Longrightarrow> x \\<sqsubseteq> F y\nvariables:\n  x, y :: 'a\n  F :: 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>dist_over_inf F; (F\\<^sup>\\<flat>) x \\<sqsubseteq> y\\<rbrakk>\n    \\<Longrightarrow> x \\<sqsubseteq> F y\nvariables:\n  x, y :: 'a\n  F :: 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "assume dist: \"dist_over_inf F\""], ["proof (state)\nthis:\n  dist_over_inf\n   (F::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>dist_over_inf F; (F\\<^sup>\\<flat>) x \\<sqsubseteq> y\\<rbrakk>\n    \\<Longrightarrow> x \\<sqsubseteq> F y\nvariables:\n  x, y :: 'a\n  F :: 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "then"], ["proof (chain)\npicking this:\n  dist_over_inf\n   (F::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice)", "have monoF: \"mono F\""], ["proof (prove)\nusing this:\n  dist_over_inf\n   (F::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice)\n\ngoal (1 subgoal):\n 1. mono F\nvariables:\n  F :: 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "by (simp add: dist_inf_mono)"], ["proof (state)\nthis:\n  mono (F::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>dist_over_inf F; (F\\<^sup>\\<flat>) x \\<sqsubseteq> y\\<rbrakk>\n    \\<Longrightarrow> x \\<sqsubseteq> F y\nvariables:\n  x, y :: 'a\n  F :: 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "assume \"(F\\<^sup>\\<flat>) x \\<sqsubseteq> y\""], ["proof (state)\nthis:\n  ((F::'a::refinement_lattice\n       \\<Rightarrow> 'a::refinement_lattice)\\<^sup>\\<flat>)\n   (x::'a::refinement_lattice) \\<sqsubseteq>\n  (y::'a::refinement_lattice)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>dist_over_inf F; (F\\<^sup>\\<flat>) x \\<sqsubseteq> y\\<rbrakk>\n    \\<Longrightarrow> x \\<sqsubseteq> F y\nvariables:\n  x, y :: 'a\n  F :: 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "then"], ["proof (chain)\npicking this:\n  ((F::'a::refinement_lattice\n       \\<Rightarrow> 'a::refinement_lattice)\\<^sup>\\<flat>)\n   (x::'a::refinement_lattice) \\<sqsubseteq>\n  (y::'a::refinement_lattice)", "have a: \"F ((F\\<^sup>\\<flat>) x) \\<sqsubseteq> F y\""], ["proof (prove)\nusing this:\n  ((F::'a::refinement_lattice\n       \\<Rightarrow> 'a::refinement_lattice)\\<^sup>\\<flat>)\n   (x::'a::refinement_lattice) \\<sqsubseteq>\n  (y::'a::refinement_lattice)\n\ngoal (1 subgoal):\n 1. F ((F\\<^sup>\\<flat>) x) \\<sqsubseteq> F y\nvariables:\n  x, y :: 'a\n  F :: 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "by (simp add: monoD monoF)"], ["proof (state)\nthis:\n  (F::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice)\n   ((F\\<^sup>\\<flat>) (x::'a::refinement_lattice)) \\<sqsubseteq>\n  F (y::'a::refinement_lattice)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>dist_over_inf F; (F\\<^sup>\\<flat>) x \\<sqsubseteq> y\\<rbrakk>\n    \\<Longrightarrow> x \\<sqsubseteq> F y\nvariables:\n  x, y :: 'a\n  F :: 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "have \"x \\<sqsubseteq> F ((F\\<^sup>\\<flat>) x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<sqsubseteq> F ((F\\<^sup>\\<flat>) x)\nvariables:\n  F :: 'a \\<Rightarrow> 'a\n  x :: 'a\ntype variables:\n  'a :: refinement_lattice", "using dist l_cancellation"], ["proof (prove)\nusing this:\n  dist_over_inf\n   (F::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice)\n  dist_over_inf\n   (?F::?'a::refinement_lattice\n        \\<Rightarrow> ?'a::refinement_lattice) \\<Longrightarrow>\n  (?x::?'a::refinement_lattice) \\<sqsubseteq>\n  (?F \\<circ> ?F\\<^sup>\\<flat>) ?x\n\ngoal (1 subgoal):\n 1. x \\<sqsubseteq> F ((F\\<^sup>\\<flat>) x)\nvariables:\n  F :: 'a \\<Rightarrow> 'a\n  x :: 'a\ntype variables:\n  'a :: refinement_lattice", "by simp"], ["proof (state)\nthis:\n  (x::'a::refinement_lattice) \\<sqsubseteq>\n  (F::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice)\n   ((F\\<^sup>\\<flat>) x)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>dist_over_inf F; (F\\<^sup>\\<flat>) x \\<sqsubseteq> y\\<rbrakk>\n    \\<Longrightarrow> x \\<sqsubseteq> F y\nvariables:\n  x, y :: 'a\n  F :: 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "thus \"x \\<sqsubseteq> F y\""], ["proof (prove)\nusing this:\n  (x::'a::refinement_lattice) \\<sqsubseteq>\n  (F::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice)\n   ((F\\<^sup>\\<flat>) x)\n\ngoal (1 subgoal):\n 1. x \\<sqsubseteq> F y\nvariables:\n  F :: 'a \\<Rightarrow> 'a\n  x, y :: 'a\ntype variables:\n  'a :: refinement_lattice", "using a"], ["proof (prove)\nusing this:\n  (x::'a::refinement_lattice) \\<sqsubseteq>\n  (F::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice)\n   ((F\\<^sup>\\<flat>) x)\n  (F::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice)\n   ((F\\<^sup>\\<flat>) (x::'a::refinement_lattice)) \\<sqsubseteq>\n  F (y::'a::refinement_lattice)\n\ngoal (1 subgoal):\n 1. x \\<sqsubseteq> F y\nvariables:\n  F :: 'a \\<Rightarrow> 'a\n  x, y :: 'a\ntype variables:\n  'a :: refinement_lattice", "by auto"], ["proof (state)\nthis:\n  (x::'a::refinement_lattice) \\<sqsubseteq>\n  (F::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice)\n   (y::'a::refinement_lattice)\n\ngoal:\nNo subgoals!\nvariables:\n  x, y :: 'a\n  F :: 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "qed"], ["", "lemma v_simple_fusion: \"mono G \\<Longrightarrow> \\<forall>x. ((F \\<circ> G) x \\<sqsubseteq> (H \\<circ> F) x) \\<Longrightarrow> F (gfp G) \\<sqsubseteq> gfp H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>mono G;\n     \\<forall>x::'a. (F \\<circ> G) x \\<sqsubseteq> (H \\<circ> F) x\\<rbrakk>\n    \\<Longrightarrow> F (gfp G) \\<sqsubseteq> gfp H\nvariables:\n  H :: 'b \\<Rightarrow> 'b\n  F :: 'a \\<Rightarrow> 'b\n  G :: 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: complete_lattice\n  'b :: refinement_lattice", "by (metis comp_eq_dest_lhs gfp_unfold gfp_upperbound)"], ["", "subsection \\<open>Greatest fixpoint fusion theorems\\<close>"], ["", "text \\<open>\n  Combining lower Galois connections and greatest fixed points allows \n  elegant proofs of the weak fusion lemmas. \n\\<close>"], ["", "theorem fusion_gfp_geq:\n  assumes monoH: \"mono H\"\n  and distribF: \"dist_over_inf F\"\n  and comp_geq: \"\\<And>x. ((H \\<circ> F) x \\<sqsubseteq> (F \\<circ> G) x)\"\n  shows \"gfp H \\<sqsubseteq> F (gfp G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gfp H \\<sqsubseteq> F (gfp G)\nvariables:\n  F, G, H :: 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. gfp H \\<sqsubseteq> F (gfp G)\nvariables:\n  F, G, H :: 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "have \"(gfp H) \\<sqsubseteq> (F \\<circ> F\\<^sup>\\<flat>) (gfp H)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gfp H \\<sqsubseteq> (F \\<circ> F\\<^sup>\\<flat>) (gfp H)\nvariables:\n  F, H :: 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "using distribF l_cancellation"], ["proof (prove)\nusing this:\n  dist_over_inf\n   (F::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice)\n  dist_over_inf\n   (?F::?'a::refinement_lattice\n        \\<Rightarrow> ?'a::refinement_lattice) \\<Longrightarrow>\n  (?x::?'a::refinement_lattice) \\<sqsubseteq>\n  (?F \\<circ> ?F\\<^sup>\\<flat>) ?x\n\ngoal (1 subgoal):\n 1. gfp H \\<sqsubseteq> (F \\<circ> F\\<^sup>\\<flat>) (gfp H)\nvariables:\n  F, H :: 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "by simp"], ["proof (state)\nthis:\n  gfp (H::'a::refinement_lattice\n          \\<Rightarrow> 'a::refinement_lattice) \\<sqsubseteq>\n  ((F::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice) \\<circ>\n   F\\<^sup>\\<flat>)\n   (gfp H)\n\ngoal (1 subgoal):\n 1. gfp H \\<sqsubseteq> F (gfp G)\nvariables:\n  F, G, H :: 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "then"], ["proof (chain)\npicking this:\n  gfp (H::'a::refinement_lattice\n          \\<Rightarrow> 'a::refinement_lattice) \\<sqsubseteq>\n  ((F::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice) \\<circ>\n   F\\<^sup>\\<flat>)\n   (gfp H)", "have \"H (gfp H) \\<sqsubseteq> H ((F \\<circ> F\\<^sup>\\<flat>) (gfp H))\""], ["proof (prove)\nusing this:\n  gfp (H::'a::refinement_lattice\n          \\<Rightarrow> 'a::refinement_lattice) \\<sqsubseteq>\n  ((F::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice) \\<circ>\n   F\\<^sup>\\<flat>)\n   (gfp H)\n\ngoal (1 subgoal):\n 1. H (gfp H) \\<sqsubseteq> H ((F \\<circ> F\\<^sup>\\<flat>) (gfp H))\nvariables:\n  F, H :: 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "by (simp add: monoD monoH)"], ["proof (state)\nthis:\n  (H::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice)\n   (gfp H) \\<sqsubseteq>\n  H (((F::'a::refinement_lattice\n          \\<Rightarrow> 'a::refinement_lattice) \\<circ>\n      F\\<^sup>\\<flat>)\n      (gfp H))\n\ngoal (1 subgoal):\n 1. gfp H \\<sqsubseteq> F (gfp G)\nvariables:\n  F, G, H :: 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "then"], ["proof (chain)\npicking this:\n  (H::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice)\n   (gfp H) \\<sqsubseteq>\n  H (((F::'a::refinement_lattice\n          \\<Rightarrow> 'a::refinement_lattice) \\<circ>\n      F\\<^sup>\\<flat>)\n      (gfp H))", "have \"H (gfp H) \\<sqsubseteq> F ((G \\<circ> F\\<^sup>\\<flat>) (gfp H))\""], ["proof (prove)\nusing this:\n  (H::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice)\n   (gfp H) \\<sqsubseteq>\n  H (((F::'a::refinement_lattice\n          \\<Rightarrow> 'a::refinement_lattice) \\<circ>\n      F\\<^sup>\\<flat>)\n      (gfp H))\n\ngoal (1 subgoal):\n 1. H (gfp H) \\<sqsubseteq> F ((G \\<circ> F\\<^sup>\\<flat>) (gfp H))\nvariables:\n  F, G, H :: 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "using comp_geq"], ["proof (prove)\nusing this:\n  (H::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice)\n   (gfp H) \\<sqsubseteq>\n  H (((F::'a::refinement_lattice\n          \\<Rightarrow> 'a::refinement_lattice) \\<circ>\n      F\\<^sup>\\<flat>)\n      (gfp H))\n  ((H::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice) \\<circ>\n   (F::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice))\n   (?x::'a::refinement_lattice) \\<sqsubseteq>\n  (F \\<circ>\n   (G::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice))\n   ?x\n\ngoal (1 subgoal):\n 1. H (gfp H) \\<sqsubseteq> F ((G \\<circ> F\\<^sup>\\<flat>) (gfp H))\nvariables:\n  F, G, H :: 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "by (metis comp_def refine_trans)"], ["proof (state)\nthis:\n  (H::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice)\n   (gfp H) \\<sqsubseteq>\n  (F::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice)\n   (((G::'a::refinement_lattice\n         \\<Rightarrow> 'a::refinement_lattice) \\<circ>\n     F\\<^sup>\\<flat>)\n     (gfp H))\n\ngoal (1 subgoal):\n 1. gfp H \\<sqsubseteq> F (gfp G)\nvariables:\n  F, G, H :: 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "then"], ["proof (chain)\npicking this:\n  (H::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice)\n   (gfp H) \\<sqsubseteq>\n  (F::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice)\n   (((G::'a::refinement_lattice\n         \\<Rightarrow> 'a::refinement_lattice) \\<circ>\n     F\\<^sup>\\<flat>)\n     (gfp H))", "have \"(F\\<^sup>\\<flat>) (H (gfp H)) \\<sqsubseteq> (G \\<circ> F\\<^sup>\\<flat>) (gfp H)\""], ["proof (prove)\nusing this:\n  (H::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice)\n   (gfp H) \\<sqsubseteq>\n  (F::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice)\n   (((G::'a::refinement_lattice\n         \\<Rightarrow> 'a::refinement_lattice) \\<circ>\n     F\\<^sup>\\<flat>)\n     (gfp H))\n\ngoal (1 subgoal):\n 1. (F\\<^sup>\\<flat>) (H (gfp H)) \\<sqsubseteq>\n    (G \\<circ> F\\<^sup>\\<flat>) (gfp H)\nvariables:\n  F, G, H :: 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "using distribF"], ["proof (prove)\nusing this:\n  (H::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice)\n   (gfp H) \\<sqsubseteq>\n  (F::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice)\n   (((G::'a::refinement_lattice\n         \\<Rightarrow> 'a::refinement_lattice) \\<circ>\n     F\\<^sup>\\<flat>)\n     (gfp H))\n  dist_over_inf\n   (F::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice)\n\ngoal (1 subgoal):\n 1. (F\\<^sup>\\<flat>) (H (gfp H)) \\<sqsubseteq>\n    (G \\<circ> F\\<^sup>\\<flat>) (gfp H)\nvariables:\n  F, G, H :: 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "by (metis (mono_tags) l_galois_connection)"], ["proof (state)\nthis:\n  ((F::'a::refinement_lattice\n       \\<Rightarrow> 'a::refinement_lattice)\\<^sup>\\<flat>)\n   ((H::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice)\n     (gfp H)) \\<sqsubseteq>\n  ((G::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice) \\<circ>\n   F\\<^sup>\\<flat>)\n   (gfp H)\n\ngoal (1 subgoal):\n 1. gfp H \\<sqsubseteq> F (gfp G)\nvariables:\n  F, G, H :: 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "then"], ["proof (chain)\npicking this:\n  ((F::'a::refinement_lattice\n       \\<Rightarrow> 'a::refinement_lattice)\\<^sup>\\<flat>)\n   ((H::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice)\n     (gfp H)) \\<sqsubseteq>\n  ((G::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice) \\<circ>\n   F\\<^sup>\\<flat>)\n   (gfp H)", "have \"(F\\<^sup>\\<flat>) (gfp H) \\<sqsubseteq> (gfp G)\""], ["proof (prove)\nusing this:\n  ((F::'a::refinement_lattice\n       \\<Rightarrow> 'a::refinement_lattice)\\<^sup>\\<flat>)\n   ((H::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice)\n     (gfp H)) \\<sqsubseteq>\n  ((G::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice) \\<circ>\n   F\\<^sup>\\<flat>)\n   (gfp H)\n\ngoal (1 subgoal):\n 1. (F\\<^sup>\\<flat>) (gfp H) \\<sqsubseteq> gfp G\nvariables:\n  F, G, H :: 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "by (metis comp_apply gfp_unfold gfp_upperbound monoH)"], ["proof (state)\nthis:\n  ((F::'a::refinement_lattice\n       \\<Rightarrow> 'a::refinement_lattice)\\<^sup>\\<flat>)\n   (gfp (H::'a::refinement_lattice\n            \\<Rightarrow> 'a::refinement_lattice)) \\<sqsubseteq>\n  gfp (G::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice)\n\ngoal (1 subgoal):\n 1. gfp H \\<sqsubseteq> F (gfp G)\nvariables:\n  F, G, H :: 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "thus \"gfp H \\<sqsubseteq> F (gfp G)\""], ["proof (prove)\nusing this:\n  ((F::'a::refinement_lattice\n       \\<Rightarrow> 'a::refinement_lattice)\\<^sup>\\<flat>)\n   (gfp (H::'a::refinement_lattice\n            \\<Rightarrow> 'a::refinement_lattice)) \\<sqsubseteq>\n  gfp (G::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice)\n\ngoal (1 subgoal):\n 1. gfp H \\<sqsubseteq> F (gfp G)\nvariables:\n  F, G, H :: 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "using distribF"], ["proof (prove)\nusing this:\n  ((F::'a::refinement_lattice\n       \\<Rightarrow> 'a::refinement_lattice)\\<^sup>\\<flat>)\n   (gfp (H::'a::refinement_lattice\n            \\<Rightarrow> 'a::refinement_lattice)) \\<sqsubseteq>\n  gfp (G::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice)\n  dist_over_inf\n   (F::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice)\n\ngoal (1 subgoal):\n 1. gfp H \\<sqsubseteq> F (gfp G)\nvariables:\n  F, G, H :: 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "by (metis (mono_tags) l_galois_connection)"], ["proof (state)\nthis:\n  gfp (H::'a::refinement_lattice\n          \\<Rightarrow> 'a::refinement_lattice) \\<sqsubseteq>\n  (F::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice)\n   (gfp (G::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice))\n\ngoal:\nNo subgoals!\nvariables:\n  F, G, H :: 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "qed"], ["", "theorem fusion_gfp_eq: \n  assumes monoH: \"mono H\" and monoG: \"mono G\"\n  and distF: \"dist_over_inf F\"\n  and fgh_comp: \"\\<And>x. ((F \\<circ> G) x = (H \\<circ> F) x)\"\n  shows \"F (gfp G) = gfp H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. F (gfp G) = gfp H\nvariables:\n  F, G, H :: 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "proof (rule antisym)"], ["proof (state)\ngoal (2 subgoals):\n 1. F (gfp G) \\<sqsubseteq> gfp H\n 2. gfp H \\<sqsubseteq> F (gfp G)\nvariables:\n  F, G, H :: 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "show \"F (gfp G) \\<sqsubseteq> (gfp H)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. F (gfp G) \\<sqsubseteq> gfp H\nvariables:\n  F, G, H :: 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "by (metis fgh_comp le_less v_simple_fusion monoG)"], ["proof (state)\nthis:\n  (F::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice)\n   (gfp (G::'a::refinement_lattice\n            \\<Rightarrow> 'a::refinement_lattice)) \\<sqsubseteq>\n  gfp (H::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice)\n\ngoal (1 subgoal):\n 1. gfp H \\<sqsubseteq> F (gfp G)\nvariables:\n  F, G, H :: 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. gfp H \\<sqsubseteq> F (gfp G)\nvariables:\n  F, G, H :: 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "have \"\\<And>x. ((H \\<circ> F) x \\<sqsubseteq> (F \\<circ> G) x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x::'a. (H \\<circ> F) x \\<sqsubseteq> (F \\<circ> G) x\nvariables:\n  F, G, H :: 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "using fgh_comp"], ["proof (prove)\nusing this:\n  ((F::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice) \\<circ>\n   (G::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice))\n   (?x::'a::refinement_lattice) =\n  ((H::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice) \\<circ>\n   F)\n   ?x\n\ngoal (1 subgoal):\n 1. \\<And>x::'a. (H \\<circ> F) x \\<sqsubseteq> (F \\<circ> G) x\nvariables:\n  F, G, H :: 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "by auto"], ["proof (state)\nthis:\n  ((H::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice) \\<circ>\n   (F::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice))\n   (?x::'a::refinement_lattice) \\<sqsubseteq>\n  (F \\<circ>\n   (G::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice))\n   ?x\n\ngoal (1 subgoal):\n 1. gfp H \\<sqsubseteq> F (gfp G)\nvariables:\n  F, G, H :: 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "then"], ["proof (chain)\npicking this:\n  ((H::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice) \\<circ>\n   (F::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice))\n   (?x::'a::refinement_lattice) \\<sqsubseteq>\n  (F \\<circ>\n   (G::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice))\n   ?x", "show \"gfp H \\<sqsubseteq> F (gfp G)\""], ["proof (prove)\nusing this:\n  ((H::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice) \\<circ>\n   (F::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice))\n   (?x::'a::refinement_lattice) \\<sqsubseteq>\n  (F \\<circ>\n   (G::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice))\n   ?x\n\ngoal (1 subgoal):\n 1. gfp H \\<sqsubseteq> F (gfp G)\nvariables:\n  F, G, H :: 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "using monoH distF fusion_gfp_geq"], ["proof (prove)\nusing this:\n  ((H::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice) \\<circ>\n   (F::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice))\n   (?x::'a::refinement_lattice) \\<sqsubseteq>\n  (F \\<circ>\n   (G::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice))\n   ?x\n  mono (H::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice)\n  dist_over_inf\n   (F::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice)\n  \\<lbrakk>mono\n            (?H::?'a::refinement_lattice\n                 \\<Rightarrow> ?'a::refinement_lattice);\n   dist_over_inf\n    (?F::?'a::refinement_lattice \\<Rightarrow> ?'a::refinement_lattice);\n   \\<And>x::?'a::refinement_lattice.\n      (?H \\<circ> ?F) x \\<sqsubseteq>\n      (?F \\<circ>\n       (?G::?'a::refinement_lattice \\<Rightarrow> ?'a::refinement_lattice))\n       x\\<rbrakk>\n  \\<Longrightarrow> gfp ?H \\<sqsubseteq> ?F (gfp ?G)\n\ngoal (1 subgoal):\n 1. gfp H \\<sqsubseteq> F (gfp G)\nvariables:\n  F, G, H :: 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "by blast"], ["proof (state)\nthis:\n  gfp (H::'a::refinement_lattice\n          \\<Rightarrow> 'a::refinement_lattice) \\<sqsubseteq>\n  (F::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice)\n   (gfp (G::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice))\n\ngoal:\nNo subgoals!\nvariables:\n  F, G, H :: 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "qed"], ["", "end"], ["", "subsection \\<open>Upper Galois connections\\<close>"], ["", "locale upper_galois_connections\nbegin"], ["", "definition\n  u_adjoint :: \"('a::refinement_lattice \\<Rightarrow> 'a) \\<Rightarrow> ('a \\<Rightarrow> 'a)\" (\"_\\<^sup>#\" [201] 200)\nwhere\n  \"(F\\<^sup>#) x \\<equiv> \\<Squnion>{y. F y \\<sqsubseteq> x}\""], ["", "lemma dist_sup_mono:\n  assumes distF: \"dist_over_sup F\"\n  shows \"mono F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mono F\nvariables:\n  F :: 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>(x::'a) y::'a.\n       x \\<sqsubseteq> y \\<Longrightarrow> F x \\<sqsubseteq> F y\nvariables:\n  F :: 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "fix x :: 'a and y :: 'a"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>(x::'a) y::'a.\n       x \\<sqsubseteq> y \\<Longrightarrow> F x \\<sqsubseteq> F y\nvariables:\n  F :: 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "assume \"x \\<sqsubseteq> y\""], ["proof (state)\nthis:\n  (x::'a::refinement_lattice) \\<sqsubseteq> (y::'a::refinement_lattice)\n\ngoal (1 subgoal):\n 1. \\<And>(x::'a) y::'a.\n       x \\<sqsubseteq> y \\<Longrightarrow> F x \\<sqsubseteq> F y\nvariables:\n  F :: 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "then"], ["proof (chain)\npicking this:\n  (x::'a::refinement_lattice) \\<sqsubseteq> (y::'a::refinement_lattice)", "have \"F y = F (x \\<squnion> y)\""], ["proof (prove)\nusing this:\n  (x::'a::refinement_lattice) \\<sqsubseteq> (y::'a::refinement_lattice)\n\ngoal (1 subgoal):\n 1. F y = F (x \\<squnion> y)\nvariables:\n  x, y :: 'a\n  F :: 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "by (simp add: le_iff_sup)"], ["proof (state)\nthis:\n  (F::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice)\n   (y::'a::refinement_lattice) =\n  F ((x::'a::refinement_lattice) \\<squnion> y)\n\ngoal (1 subgoal):\n 1. \\<And>(x::'a) y::'a.\n       x \\<sqsubseteq> y \\<Longrightarrow> F x \\<sqsubseteq> F y\nvariables:\n  F :: 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "also"], ["proof (state)\nthis:\n  (F::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice)\n   (y::'a::refinement_lattice) =\n  F ((x::'a::refinement_lattice) \\<squnion> y)\n\ngoal (1 subgoal):\n 1. \\<And>(x::'a) y::'a.\n       x \\<sqsubseteq> y \\<Longrightarrow> F x \\<sqsubseteq> F y\nvariables:\n  F :: 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "have \"... = F x \\<squnion> F y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. F (x \\<squnion> y) = F x \\<squnion> F y\nvariables:\n  x, y :: 'a\n  F :: 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. F (x \\<squnion> y) = F x \\<squnion> F y\nvariables:\n  x, y :: 'a\n  F :: 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "from distF"], ["proof (chain)\npicking this:\n  dist_over_sup\n   (F::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice)", "have \"F (\\<Squnion>{x, y}) = \\<Squnion>{F x, F y}\""], ["proof (prove)\nusing this:\n  dist_over_sup\n   (F::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice)\n\ngoal (1 subgoal):\n 1. F (\\<Squnion> {x, y}) = \\<Squnion> {F x, F y}\nvariables:\n  x, y :: 'a\n  F :: 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "by (drule_tac x = \"{x, y}\" in spec, simp)"], ["proof (state)\nthis:\n  (F::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice)\n   (\\<Squnion> {x::'a::refinement_lattice, y::'a::refinement_lattice}) =\n  \\<Squnion> {F x, F y}\n\ngoal (1 subgoal):\n 1. F (x \\<squnion> y) = F x \\<squnion> F y\nvariables:\n  x, y :: 'a\n  F :: 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "then"], ["proof (chain)\npicking this:\n  (F::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice)\n   (\\<Squnion> {x::'a::refinement_lattice, y::'a::refinement_lattice}) =\n  \\<Squnion> {F x, F y}", "show \"F (x \\<squnion> y) = F x \\<squnion> F y\""], ["proof (prove)\nusing this:\n  (F::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice)\n   (\\<Squnion> {x::'a::refinement_lattice, y::'a::refinement_lattice}) =\n  \\<Squnion> {F x, F y}\n\ngoal (1 subgoal):\n 1. F (x \\<squnion> y) = F x \\<squnion> F y\nvariables:\n  x, y :: 'a\n  F :: 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "by simp"], ["proof (state)\nthis:\n  (F::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice)\n   ((x::'a::refinement_lattice) \\<squnion> (y::'a::refinement_lattice)) =\n  F x \\<squnion> F y\n\ngoal:\nNo subgoals!\nvariables:\n  x, y :: 'a\n  F :: 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "qed"], ["proof (state)\nthis:\n  (F::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice)\n   ((x::'a::refinement_lattice) \\<squnion> (y::'a::refinement_lattice)) =\n  F x \\<squnion> F y\n\ngoal (1 subgoal):\n 1. \\<And>(x::'a) y::'a.\n       x \\<sqsubseteq> y \\<Longrightarrow> F x \\<sqsubseteq> F y\nvariables:\n  F :: 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "finally"], ["proof (chain)\npicking this:\n  (F::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice)\n   (y::'a::refinement_lattice) =\n  F (x::'a::refinement_lattice) \\<squnion> F y", "show \"F x \\<sqsubseteq> F y\""], ["proof (prove)\nusing this:\n  (F::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice)\n   (y::'a::refinement_lattice) =\n  F (x::'a::refinement_lattice) \\<squnion> F y\n\ngoal (1 subgoal):\n 1. F x \\<sqsubseteq> F y\nvariables:\n  x, y :: 'a\n  F :: 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "by (metis le_iff_sup)"], ["proof (state)\nthis:\n  (F::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice)\n   (x::'a::refinement_lattice) \\<sqsubseteq>\n  F (y::'a::refinement_lattice)\n\ngoal:\nNo subgoals!\nvariables:\n  F :: 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "qed"], ["", "lemma u_cancellation: \"dist_over_sup F \\<Longrightarrow> (F \\<circ> F\\<^sup>#) x \\<sqsubseteq> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dist_over_sup F \\<Longrightarrow>\n    (F \\<circ> F\\<^sup>#) x \\<sqsubseteq> x\nvariables:\n  x :: 'a\n  F :: 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. dist_over_sup F \\<Longrightarrow>\n    (F \\<circ> F\\<^sup>#) x \\<sqsubseteq> x\nvariables:\n  x :: 'a\n  F :: 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "assume dist: \"dist_over_sup F\""], ["proof (state)\nthis:\n  dist_over_sup\n   (F::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice)\n\ngoal (1 subgoal):\n 1. dist_over_sup F \\<Longrightarrow>\n    (F \\<circ> F\\<^sup>#) x \\<sqsubseteq> x\nvariables:\n  x :: 'a\n  F :: 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "define Y where \"Y = {F y | y. F y \\<sqsubseteq> x}\""], ["proof (state)\nthis:\n  (Y::'a::refinement_lattice set) =\n  {(F::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice) y |\n   y::'a::refinement_lattice. F y \\<sqsubseteq> (x::'a::refinement_lattice)}\n\ngoal (1 subgoal):\n 1. dist_over_sup F \\<Longrightarrow>\n    (F \\<circ> F\\<^sup>#) x \\<sqsubseteq> x\nvariables:\n  x :: 'a\n  F :: 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "define X where \"X = {x}\""], ["proof (state)\nthis:\n  (X::'a::refinement_lattice set) = {x::'a::refinement_lattice}\n\ngoal (1 subgoal):\n 1. dist_over_sup F \\<Longrightarrow>\n    (F \\<circ> F\\<^sup>#) x \\<sqsubseteq> x\nvariables:\n  x :: 'a\n  F :: 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "have \"(\\<forall> y \\<in> Y. (\\<exists> x \\<in> X. y \\<sqsubseteq> x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>y::'a\\<in>Y. \\<exists>x::'a\\<in>X. y \\<sqsubseteq> x\nvariables:\n  X, Y :: 'a set\ntype variables:\n  'a :: refinement_lattice", "using X_def Y_def CollectD singletonI"], ["proof (prove)\nusing this:\n  (X::'a::refinement_lattice set) = {x::'a::refinement_lattice}\n  (Y::'a::refinement_lattice set) =\n  {(F::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice) y |\n   y::'a::refinement_lattice. F y \\<sqsubseteq> (x::'a::refinement_lattice)}\n  (?a::?'a::type)\n  \\<in> {x::?'a::type.\n         (?P::?'a::type \\<Rightarrow> bool) x} \\<Longrightarrow>\n  ?P ?a\n  (?a::?'a::type) \\<in> {?a}\n\ngoal (1 subgoal):\n 1. \\<forall>y::'a\\<in>Y. \\<exists>x::'a\\<in>X. y \\<sqsubseteq> x\nvariables:\n  X, Y :: 'a set\ntype variables:\n  'a :: refinement_lattice", "by auto"], ["proof (state)\nthis:\n  \\<forall>y::'a::refinement_lattice\\<in>Y::'a::refinement_lattice set.\n     \\<exists>x::'a::refinement_lattice\\<in>X::'a::refinement_lattice set.\n        y \\<sqsubseteq> x\n\ngoal (1 subgoal):\n 1. dist_over_sup F \\<Longrightarrow>\n    (F \\<circ> F\\<^sup>#) x \\<sqsubseteq> x\nvariables:\n  x :: 'a\n  F :: 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "then"], ["proof (chain)\npicking this:\n  \\<forall>y::'a::refinement_lattice\\<in>Y::'a::refinement_lattice set.\n     \\<exists>x::'a::refinement_lattice\\<in>X::'a::refinement_lattice set.\n        y \\<sqsubseteq> x", "have \"\\<Squnion> Y \\<sqsubseteq> \\<Squnion> X\""], ["proof (prove)\nusing this:\n  \\<forall>y::'a::refinement_lattice\\<in>Y::'a::refinement_lattice set.\n     \\<exists>x::'a::refinement_lattice\\<in>X::'a::refinement_lattice set.\n        y \\<sqsubseteq> x\n\ngoal (1 subgoal):\n 1. \\<Squnion> Y \\<sqsubseteq> \\<Squnion> X\nvariables:\n  X, Y :: 'a set\ntype variables:\n  'a :: refinement_lattice", "by (simp add: Sup_mono)"], ["proof (state)\nthis:\n  \\<Squnion> (Y::'a::refinement_lattice set) \\<sqsubseteq>\n  \\<Squnion> (X::'a::refinement_lattice set)\n\ngoal (1 subgoal):\n 1. dist_over_sup F \\<Longrightarrow>\n    (F \\<circ> F\\<^sup>#) x \\<sqsubseteq> x\nvariables:\n  x :: 'a\n  F :: 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "then"], ["proof (chain)\npicking this:\n  \\<Squnion> (Y::'a::refinement_lattice set) \\<sqsubseteq>\n  \\<Squnion> (X::'a::refinement_lattice set)", "have \"\\<Squnion>{F y | y. F y \\<sqsubseteq> x} \\<sqsubseteq> x\""], ["proof (prove)\nusing this:\n  \\<Squnion> (Y::'a::refinement_lattice set) \\<sqsubseteq>\n  \\<Squnion> (X::'a::refinement_lattice set)\n\ngoal (1 subgoal):\n 1. \\<Squnion> {F y |y::'a. F y \\<sqsubseteq> x} \\<sqsubseteq> x\nvariables:\n  x :: 'a\n  F :: 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "by (simp add: X_def Y_def)"], ["proof (state)\nthis:\n  \\<Squnion> {(F::'a::refinement_lattice\n                  \\<Rightarrow> 'a::refinement_lattice)\n               y |\n              y::'a::refinement_lattice.\n              F y \\<sqsubseteq> (x::'a::refinement_lattice)} \\<sqsubseteq>\n  x\n\ngoal (1 subgoal):\n 1. dist_over_sup F \\<Longrightarrow>\n    (F \\<circ> F\\<^sup>#) x \\<sqsubseteq> x\nvariables:\n  x :: 'a\n  F :: 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "then"], ["proof (chain)\npicking this:\n  \\<Squnion> {(F::'a::refinement_lattice\n                  \\<Rightarrow> 'a::refinement_lattice)\n               y |\n              y::'a::refinement_lattice.\n              F y \\<sqsubseteq> (x::'a::refinement_lattice)} \\<sqsubseteq>\n  x", "have \"F (\\<Squnion>{y. F y \\<sqsubseteq> x}) \\<sqsubseteq> x\""], ["proof (prove)\nusing this:\n  \\<Squnion> {(F::'a::refinement_lattice\n                  \\<Rightarrow> 'a::refinement_lattice)\n               y |\n              y::'a::refinement_lattice.\n              F y \\<sqsubseteq> (x::'a::refinement_lattice)} \\<sqsubseteq>\n  x\n\ngoal (1 subgoal):\n 1. F (\\<Squnion> {y::'a. F y \\<sqsubseteq> x}) \\<sqsubseteq> x\nvariables:\n  x :: 'a\n  F :: 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "using SUP_le_iff dist"], ["proof (prove)\nusing this:\n  \\<Squnion> {(F::'a::refinement_lattice\n                  \\<Rightarrow> 'a::refinement_lattice)\n               y |\n              y::'a::refinement_lattice.\n              F y \\<sqsubseteq> (x::'a::refinement_lattice)} \\<sqsubseteq>\n  x\n  (\\<Squnion> ((?f::?'b::type \\<Rightarrow> ?'a::complete_lattice) `\n               (?A::?'b::type set))\n   \\<le> (?u::?'a::complete_lattice)) =\n  (\\<forall>i::?'b::type\\<in>?A. ?f i \\<le> ?u)\n  dist_over_sup\n   (F::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice)\n\ngoal (1 subgoal):\n 1. F (\\<Squnion> {y::'a. F y \\<sqsubseteq> x}) \\<sqsubseteq> x\nvariables:\n  x :: 'a\n  F :: 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "by fastforce"], ["proof (state)\nthis:\n  (F::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice)\n   (\\<Squnion> {y::'a::refinement_lattice.\n                F y \\<sqsubseteq>\n                (x::'a::refinement_lattice)}) \\<sqsubseteq>\n  x\n\ngoal (1 subgoal):\n 1. dist_over_sup F \\<Longrightarrow>\n    (F \\<circ> F\\<^sup>#) x \\<sqsubseteq> x\nvariables:\n  x :: 'a\n  F :: 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "thus ?thesis"], ["proof (prove)\nusing this:\n  (F::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice)\n   (\\<Squnion> {y::'a::refinement_lattice.\n                F y \\<sqsubseteq>\n                (x::'a::refinement_lattice)}) \\<sqsubseteq>\n  x\n\ngoal (1 subgoal):\n 1. (F \\<circ> F\\<^sup>#) x \\<sqsubseteq> x\nvariables:\n  x :: 'a\n  F :: 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "by (metis comp_def u_adjoint_def)"], ["proof (state)\nthis:\n  ((F::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice) \\<circ>\n   F\\<^sup>#)\n   (x::'a::refinement_lattice) \\<sqsubseteq>\n  x\n\ngoal:\nNo subgoals!\nvariables:\n  x :: 'a\n  F :: 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "qed"], ["", "lemma u_galois_connection: \"dist_over_sup F \\<Longrightarrow> (F x \\<sqsubseteq> y) \\<longleftrightarrow> (x \\<sqsubseteq> (F\\<^sup>#) y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dist_over_sup F \\<Longrightarrow>\n    (F x \\<sqsubseteq> y) = (x \\<sqsubseteq> (F\\<^sup>#) y)\nvariables:\n  x, y :: 'a\n  F :: 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>dist_over_sup F; F x \\<sqsubseteq> y\\<rbrakk>\n    \\<Longrightarrow> x \\<sqsubseteq> (F\\<^sup>#) y\n 2. \\<lbrakk>dist_over_sup F; x \\<sqsubseteq> (F\\<^sup>#) y\\<rbrakk>\n    \\<Longrightarrow> F x \\<sqsubseteq> y\nvariables:\n  x, y :: 'a\n  F :: 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "assume dist: \"dist_over_sup F\""], ["proof (state)\nthis:\n  dist_over_sup\n   (F::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>dist_over_sup F; F x \\<sqsubseteq> y\\<rbrakk>\n    \\<Longrightarrow> x \\<sqsubseteq> (F\\<^sup>#) y\n 2. \\<lbrakk>dist_over_sup F; x \\<sqsubseteq> (F\\<^sup>#) y\\<rbrakk>\n    \\<Longrightarrow> F x \\<sqsubseteq> y\nvariables:\n  x, y :: 'a\n  F :: 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "then"], ["proof (chain)\npicking this:\n  dist_over_sup\n   (F::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice)", "have monoF: \"mono F\""], ["proof (prove)\nusing this:\n  dist_over_sup\n   (F::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice)\n\ngoal (1 subgoal):\n 1. mono F\nvariables:\n  F :: 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "by (simp add: dist_sup_mono)"], ["proof (state)\nthis:\n  mono (F::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>dist_over_sup F; F x \\<sqsubseteq> y\\<rbrakk>\n    \\<Longrightarrow> x \\<sqsubseteq> (F\\<^sup>#) y\n 2. \\<lbrakk>dist_over_sup F; x \\<sqsubseteq> (F\\<^sup>#) y\\<rbrakk>\n    \\<Longrightarrow> F x \\<sqsubseteq> y\nvariables:\n  x, y :: 'a\n  F :: 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "assume \"x \\<sqsubseteq> (F\\<^sup>#) y\""], ["proof (state)\nthis:\n  (x::'a::refinement_lattice) \\<sqsubseteq>\n  ((F::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice)\\<^sup>#)\n   (y::'a::refinement_lattice)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>dist_over_sup F; F x \\<sqsubseteq> y\\<rbrakk>\n    \\<Longrightarrow> x \\<sqsubseteq> (F\\<^sup>#) y\n 2. \\<lbrakk>dist_over_sup F; x \\<sqsubseteq> (F\\<^sup>#) y\\<rbrakk>\n    \\<Longrightarrow> F x \\<sqsubseteq> y\nvariables:\n  x, y :: 'a\n  F :: 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "then"], ["proof (chain)\npicking this:\n  (x::'a::refinement_lattice) \\<sqsubseteq>\n  ((F::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice)\\<^sup>#)\n   (y::'a::refinement_lattice)", "have a: \"F x \\<sqsubseteq> F ((F\\<^sup>#) y)\""], ["proof (prove)\nusing this:\n  (x::'a::refinement_lattice) \\<sqsubseteq>\n  ((F::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice)\\<^sup>#)\n   (y::'a::refinement_lattice)\n\ngoal (1 subgoal):\n 1. F x \\<sqsubseteq> F ((F\\<^sup>#) y)\nvariables:\n  x, y :: 'a\n  F :: 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "by (simp add: monoD monoF)"], ["proof (state)\nthis:\n  (F::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice)\n   (x::'a::refinement_lattice) \\<sqsubseteq>\n  F ((F\\<^sup>#) (y::'a::refinement_lattice))\n\ngoal (2 subgoals):\n 1. \\<lbrakk>dist_over_sup F; F x \\<sqsubseteq> y\\<rbrakk>\n    \\<Longrightarrow> x \\<sqsubseteq> (F\\<^sup>#) y\n 2. \\<lbrakk>dist_over_sup F; x \\<sqsubseteq> (F\\<^sup>#) y\\<rbrakk>\n    \\<Longrightarrow> F x \\<sqsubseteq> y\nvariables:\n  x, y :: 'a\n  F :: 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "have \"F ((F\\<^sup>#) y) \\<sqsubseteq> y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. F ((F\\<^sup>#) y) \\<sqsubseteq> y\nvariables:\n  y :: 'a\n  F :: 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "using dist u_cancellation"], ["proof (prove)\nusing this:\n  dist_over_sup\n   (F::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice)\n  dist_over_sup\n   (?F::?'a::refinement_lattice\n        \\<Rightarrow> ?'a::refinement_lattice) \\<Longrightarrow>\n  (?F \\<circ> ?F\\<^sup>#) (?x::?'a::refinement_lattice) \\<sqsubseteq> ?x\n\ngoal (1 subgoal):\n 1. F ((F\\<^sup>#) y) \\<sqsubseteq> y\nvariables:\n  y :: 'a\n  F :: 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "by simp"], ["proof (state)\nthis:\n  (F::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice)\n   ((F\\<^sup>#) (y::'a::refinement_lattice)) \\<sqsubseteq>\n  y\n\ngoal (2 subgoals):\n 1. \\<lbrakk>dist_over_sup F; F x \\<sqsubseteq> y\\<rbrakk>\n    \\<Longrightarrow> x \\<sqsubseteq> (F\\<^sup>#) y\n 2. \\<lbrakk>dist_over_sup F; x \\<sqsubseteq> (F\\<^sup>#) y\\<rbrakk>\n    \\<Longrightarrow> F x \\<sqsubseteq> y\nvariables:\n  x, y :: 'a\n  F :: 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "thus \"F x \\<sqsubseteq> y\""], ["proof (prove)\nusing this:\n  (F::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice)\n   ((F\\<^sup>#) (y::'a::refinement_lattice)) \\<sqsubseteq>\n  y\n\ngoal (1 subgoal):\n 1. F x \\<sqsubseteq> y\nvariables:\n  x, y :: 'a\n  F :: 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "using a"], ["proof (prove)\nusing this:\n  (F::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice)\n   ((F\\<^sup>#) (y::'a::refinement_lattice)) \\<sqsubseteq>\n  y\n  (F::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice)\n   (x::'a::refinement_lattice) \\<sqsubseteq>\n  F ((F\\<^sup>#) (y::'a::refinement_lattice))\n\ngoal (1 subgoal):\n 1. F x \\<sqsubseteq> y\nvariables:\n  x, y :: 'a\n  F :: 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "by auto"], ["proof (state)\nthis:\n  (F::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice)\n   (x::'a::refinement_lattice) \\<sqsubseteq>\n  (y::'a::refinement_lattice)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>dist_over_sup F; F x \\<sqsubseteq> y\\<rbrakk>\n    \\<Longrightarrow> x \\<sqsubseteq> (F\\<^sup>#) y\nvariables:\n  x, y :: 'a\n  F :: 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>dist_over_sup F; F x \\<sqsubseteq> y\\<rbrakk>\n    \\<Longrightarrow> x \\<sqsubseteq> (F\\<^sup>#) y\nvariables:\n  x, y :: 'a\n  F :: 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "assume \"F x \\<sqsubseteq> y\""], ["proof (state)\nthis:\n  (F::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice)\n   (x::'a::refinement_lattice) \\<sqsubseteq>\n  (y::'a::refinement_lattice)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>dist_over_sup F; F x \\<sqsubseteq> y\\<rbrakk>\n    \\<Longrightarrow> x \\<sqsubseteq> (F\\<^sup>#) y\nvariables:\n  x, y :: 'a\n  F :: 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "then"], ["proof (chain)\npicking this:\n  (F::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice)\n   (x::'a::refinement_lattice) \\<sqsubseteq>\n  (y::'a::refinement_lattice)", "have \"x \\<sqsubseteq> \\<Squnion>{x. F x \\<sqsubseteq> y}\""], ["proof (prove)\nusing this:\n  (F::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice)\n   (x::'a::refinement_lattice) \\<sqsubseteq>\n  (y::'a::refinement_lattice)\n\ngoal (1 subgoal):\n 1. x \\<sqsubseteq> \\<Squnion> {x::'a. F x \\<sqsubseteq> y}\nvariables:\n  F :: 'a \\<Rightarrow> 'a\n  x, y :: 'a\ntype variables:\n  'a :: refinement_lattice", "by (simp add: Sup_upper)"], ["proof (state)\nthis:\n  (x::'a::refinement_lattice) \\<sqsubseteq>\n  \\<Squnion> {x::'a::refinement_lattice.\n              (F::'a::refinement_lattice\n                  \\<Rightarrow> 'a::refinement_lattice)\n               x \\<sqsubseteq>\n              (y::'a::refinement_lattice)}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>dist_over_sup F; F x \\<sqsubseteq> y\\<rbrakk>\n    \\<Longrightarrow> x \\<sqsubseteq> (F\\<^sup>#) y\nvariables:\n  x, y :: 'a\n  F :: 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "thus \"x \\<sqsubseteq> (F\\<^sup>#) y\""], ["proof (prove)\nusing this:\n  (x::'a::refinement_lattice) \\<sqsubseteq>\n  \\<Squnion> {x::'a::refinement_lattice.\n              (F::'a::refinement_lattice\n                  \\<Rightarrow> 'a::refinement_lattice)\n               x \\<sqsubseteq>\n              (y::'a::refinement_lattice)}\n\ngoal (1 subgoal):\n 1. x \\<sqsubseteq> (F\\<^sup>#) y\nvariables:\n  F :: 'a \\<Rightarrow> 'a\n  x, y :: 'a\ntype variables:\n  'a :: refinement_lattice", "by (metis u_adjoint_def)"], ["proof (state)\nthis:\n  (x::'a::refinement_lattice) \\<sqsubseteq>\n  ((F::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice)\\<^sup>#)\n   (y::'a::refinement_lattice)\n\ngoal:\nNo subgoals!\nvariables:\n  x, y :: 'a\n  F :: 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "qed"], ["", "lemma u_simple_fusion: \"mono H \\<Longrightarrow> \\<forall>x. ((F \\<circ> G) x \\<sqsubseteq> (G \\<circ> H) x) \\<Longrightarrow> lfp F \\<sqsubseteq> G (lfp H)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>mono H;\n     \\<forall>x::'a. (F \\<circ> G) x \\<sqsubseteq> (G \\<circ> H) x\\<rbrakk>\n    \\<Longrightarrow> lfp F \\<sqsubseteq> G (lfp H)\nvariables:\n  G :: 'a \\<Rightarrow> 'b\n  F :: 'b \\<Rightarrow> 'b\n  H :: 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: complete_lattice\n  'b :: refinement_lattice", "by (metis comp_def lfp_lowerbound lfp_unfold)"], ["", "subsection \\<open>Least fixpoint fusion theorems\\<close>"], ["", "text \\<open>\n  Combining upper Galois connections and least fixed points allows elegant proofs \n  of the strong fusion lemmas.\n\\<close>"], ["", "theorem fusion_lfp_leq:\n  assumes monoH: \"mono H\"\n  and distribF: \"dist_over_sup F\"\n  and comp_leq: \"\\<And>x. ((F \\<circ> G) x \\<sqsubseteq> (H \\<circ> F) x)\" \n  shows \"F (lfp G) \\<sqsubseteq> (lfp H)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. F (lfp G) \\<sqsubseteq> lfp H\nvariables:\n  F, G, H :: 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. F (lfp G) \\<sqsubseteq> lfp H\nvariables:\n  F, G, H :: 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "have \"((F \\<circ> F\\<^sup>#) (lfp H)) \\<sqsubseteq> lfp H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (F \\<circ> F\\<^sup>#) (lfp H) \\<sqsubseteq> lfp H\nvariables:\n  F, H :: 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "using distribF u_cancellation"], ["proof (prove)\nusing this:\n  dist_over_sup\n   (F::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice)\n  dist_over_sup\n   (?F::?'a::refinement_lattice\n        \\<Rightarrow> ?'a::refinement_lattice) \\<Longrightarrow>\n  (?F \\<circ> ?F\\<^sup>#) (?x::?'a::refinement_lattice) \\<sqsubseteq> ?x\n\ngoal (1 subgoal):\n 1. (F \\<circ> F\\<^sup>#) (lfp H) \\<sqsubseteq> lfp H\nvariables:\n  F, H :: 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "by simp"], ["proof (state)\nthis:\n  ((F::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice) \\<circ>\n   F\\<^sup>#)\n   (lfp (H::'a::refinement_lattice\n            \\<Rightarrow> 'a::refinement_lattice)) \\<sqsubseteq>\n  lfp H\n\ngoal (1 subgoal):\n 1. F (lfp G) \\<sqsubseteq> lfp H\nvariables:\n  F, G, H :: 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "then"], ["proof (chain)\npicking this:\n  ((F::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice) \\<circ>\n   F\\<^sup>#)\n   (lfp (H::'a::refinement_lattice\n            \\<Rightarrow> 'a::refinement_lattice)) \\<sqsubseteq>\n  lfp H", "have \"H ((F \\<circ> F\\<^sup>#) (lfp H)) \\<sqsubseteq> H (lfp H)\""], ["proof (prove)\nusing this:\n  ((F::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice) \\<circ>\n   F\\<^sup>#)\n   (lfp (H::'a::refinement_lattice\n            \\<Rightarrow> 'a::refinement_lattice)) \\<sqsubseteq>\n  lfp H\n\ngoal (1 subgoal):\n 1. H ((F \\<circ> F\\<^sup>#) (lfp H)) \\<sqsubseteq> H (lfp H)\nvariables:\n  F, H :: 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "by (simp add: monoD monoH)"], ["proof (state)\nthis:\n  (H::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice)\n   (((F::'a::refinement_lattice\n         \\<Rightarrow> 'a::refinement_lattice) \\<circ>\n     F\\<^sup>#)\n     (lfp H)) \\<sqsubseteq>\n  H (lfp H)\n\ngoal (1 subgoal):\n 1. F (lfp G) \\<sqsubseteq> lfp H\nvariables:\n  F, G, H :: 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "then"], ["proof (chain)\npicking this:\n  (H::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice)\n   (((F::'a::refinement_lattice\n         \\<Rightarrow> 'a::refinement_lattice) \\<circ>\n     F\\<^sup>#)\n     (lfp H)) \\<sqsubseteq>\n  H (lfp H)", "have \"F ((G \\<circ> F\\<^sup>#) (lfp H)) \\<sqsubseteq> H (lfp H)\""], ["proof (prove)\nusing this:\n  (H::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice)\n   (((F::'a::refinement_lattice\n         \\<Rightarrow> 'a::refinement_lattice) \\<circ>\n     F\\<^sup>#)\n     (lfp H)) \\<sqsubseteq>\n  H (lfp H)\n\ngoal (1 subgoal):\n 1. F ((G \\<circ> F\\<^sup>#) (lfp H)) \\<sqsubseteq> H (lfp H)\nvariables:\n  F, G, H :: 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "using comp_leq"], ["proof (prove)\nusing this:\n  (H::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice)\n   (((F::'a::refinement_lattice\n         \\<Rightarrow> 'a::refinement_lattice) \\<circ>\n     F\\<^sup>#)\n     (lfp H)) \\<sqsubseteq>\n  H (lfp H)\n  ((F::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice) \\<circ>\n   (G::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice))\n   (?x::'a::refinement_lattice) \\<sqsubseteq>\n  ((H::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice) \\<circ>\n   F)\n   ?x\n\ngoal (1 subgoal):\n 1. F ((G \\<circ> F\\<^sup>#) (lfp H)) \\<sqsubseteq> H (lfp H)\nvariables:\n  F, G, H :: 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "by (metis comp_def refine_trans)"], ["proof (state)\nthis:\n  (F::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice)\n   (((G::'a::refinement_lattice\n         \\<Rightarrow> 'a::refinement_lattice) \\<circ>\n     F\\<^sup>#)\n     (lfp (H::'a::refinement_lattice\n              \\<Rightarrow> 'a::refinement_lattice))) \\<sqsubseteq>\n  H (lfp H)\n\ngoal (1 subgoal):\n 1. F (lfp G) \\<sqsubseteq> lfp H\nvariables:\n  F, G, H :: 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "then"], ["proof (chain)\npicking this:\n  (F::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice)\n   (((G::'a::refinement_lattice\n         \\<Rightarrow> 'a::refinement_lattice) \\<circ>\n     F\\<^sup>#)\n     (lfp (H::'a::refinement_lattice\n              \\<Rightarrow> 'a::refinement_lattice))) \\<sqsubseteq>\n  H (lfp H)", "have \"(G \\<circ> F\\<^sup>#) (lfp H) \\<sqsubseteq> (F\\<^sup>#) (H (lfp H))\""], ["proof (prove)\nusing this:\n  (F::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice)\n   (((G::'a::refinement_lattice\n         \\<Rightarrow> 'a::refinement_lattice) \\<circ>\n     F\\<^sup>#)\n     (lfp (H::'a::refinement_lattice\n              \\<Rightarrow> 'a::refinement_lattice))) \\<sqsubseteq>\n  H (lfp H)\n\ngoal (1 subgoal):\n 1. (G \\<circ> F\\<^sup>#) (lfp H) \\<sqsubseteq> (F\\<^sup>#) (H (lfp H))\nvariables:\n  F, G, H :: 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "using distribF"], ["proof (prove)\nusing this:\n  (F::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice)\n   (((G::'a::refinement_lattice\n         \\<Rightarrow> 'a::refinement_lattice) \\<circ>\n     F\\<^sup>#)\n     (lfp (H::'a::refinement_lattice\n              \\<Rightarrow> 'a::refinement_lattice))) \\<sqsubseteq>\n  H (lfp H)\n  dist_over_sup\n   (F::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice)\n\ngoal (1 subgoal):\n 1. (G \\<circ> F\\<^sup>#) (lfp H) \\<sqsubseteq> (F\\<^sup>#) (H (lfp H))\nvariables:\n  F, G, H :: 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "by (metis (mono_tags) u_galois_connection)"], ["proof (state)\nthis:\n  ((G::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice) \\<circ>\n   (F::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice)\\<^sup>#)\n   (lfp (H::'a::refinement_lattice\n            \\<Rightarrow> 'a::refinement_lattice)) \\<sqsubseteq>\n  (F\\<^sup>#) (H (lfp H))\n\ngoal (1 subgoal):\n 1. F (lfp G) \\<sqsubseteq> lfp H\nvariables:\n  F, G, H :: 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "then"], ["proof (chain)\npicking this:\n  ((G::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice) \\<circ>\n   (F::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice)\\<^sup>#)\n   (lfp (H::'a::refinement_lattice\n            \\<Rightarrow> 'a::refinement_lattice)) \\<sqsubseteq>\n  (F\\<^sup>#) (H (lfp H))", "have \"(lfp G) \\<sqsubseteq> (F\\<^sup>#) (lfp H)\""], ["proof (prove)\nusing this:\n  ((G::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice) \\<circ>\n   (F::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice)\\<^sup>#)\n   (lfp (H::'a::refinement_lattice\n            \\<Rightarrow> 'a::refinement_lattice)) \\<sqsubseteq>\n  (F\\<^sup>#) (H (lfp H))\n\ngoal (1 subgoal):\n 1. lfp G \\<sqsubseteq> (F\\<^sup>#) (lfp H)\nvariables:\n  F, G, H :: 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "by (metis comp_def def_lfp_unfold lfp_lowerbound monoH)"], ["proof (state)\nthis:\n  lfp (G::'a::refinement_lattice\n          \\<Rightarrow> 'a::refinement_lattice) \\<sqsubseteq>\n  ((F::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice)\\<^sup>#)\n   (lfp (H::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice))\n\ngoal (1 subgoal):\n 1. F (lfp G) \\<sqsubseteq> lfp H\nvariables:\n  F, G, H :: 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "thus \"F (lfp G) \\<sqsubseteq> (lfp H)\""], ["proof (prove)\nusing this:\n  lfp (G::'a::refinement_lattice\n          \\<Rightarrow> 'a::refinement_lattice) \\<sqsubseteq>\n  ((F::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice)\\<^sup>#)\n   (lfp (H::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice))\n\ngoal (1 subgoal):\n 1. F (lfp G) \\<sqsubseteq> lfp H\nvariables:\n  F, G, H :: 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "using distribF"], ["proof (prove)\nusing this:\n  lfp (G::'a::refinement_lattice\n          \\<Rightarrow> 'a::refinement_lattice) \\<sqsubseteq>\n  ((F::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice)\\<^sup>#)\n   (lfp (H::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice))\n  dist_over_sup\n   (F::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice)\n\ngoal (1 subgoal):\n 1. F (lfp G) \\<sqsubseteq> lfp H\nvariables:\n  F, G, H :: 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "by (metis (mono_tags) u_galois_connection)"], ["proof (state)\nthis:\n  (F::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice)\n   (lfp (G::'a::refinement_lattice\n            \\<Rightarrow> 'a::refinement_lattice)) \\<sqsubseteq>\n  lfp (H::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice)\n\ngoal:\nNo subgoals!\nvariables:\n  F, G, H :: 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "qed"], ["", "theorem fusion_lfp_eq: \n  assumes monoH: \"mono H\" and monoG: \"mono G\"\n  and distF: \"dist_over_sup F\"\n  and fgh_comp: \"\\<And>x. ((F \\<circ> G) x = (H \\<circ> F) x)\" \n  shows \"F (lfp G) = (lfp H)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. F (lfp G) = lfp H\nvariables:\n  F, G, H :: 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "proof (rule antisym)"], ["proof (state)\ngoal (2 subgoals):\n 1. F (lfp G) \\<sqsubseteq> lfp H\n 2. lfp H \\<sqsubseteq> F (lfp G)\nvariables:\n  F, G, H :: 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "show \"lfp H \\<sqsubseteq> F (lfp G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lfp H \\<sqsubseteq> F (lfp G)\nvariables:\n  F, G, H :: 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "by (metis monoG fgh_comp eq_iff upper_galois_connections.u_simple_fusion)"], ["proof (state)\nthis:\n  lfp (H::'a::refinement_lattice\n          \\<Rightarrow> 'a::refinement_lattice) \\<sqsubseteq>\n  (F::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice)\n   (lfp (G::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice))\n\ngoal (1 subgoal):\n 1. F (lfp G) \\<sqsubseteq> lfp H\nvariables:\n  F, G, H :: 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. F (lfp G) \\<sqsubseteq> lfp H\nvariables:\n  F, G, H :: 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "have \"\\<And>x. (F \\<circ> G) x \\<sqsubseteq> (H \\<circ> F) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x::'a. (F \\<circ> G) x \\<sqsubseteq> (H \\<circ> F) x\nvariables:\n  F, G, H :: 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "using fgh_comp"], ["proof (prove)\nusing this:\n  ((F::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice) \\<circ>\n   (G::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice))\n   (?x::'a::refinement_lattice) =\n  ((H::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice) \\<circ>\n   F)\n   ?x\n\ngoal (1 subgoal):\n 1. \\<And>x::'a. (F \\<circ> G) x \\<sqsubseteq> (H \\<circ> F) x\nvariables:\n  F, G, H :: 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "by auto"], ["proof (state)\nthis:\n  ((F::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice) \\<circ>\n   (G::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice))\n   (?x::'a::refinement_lattice) \\<sqsubseteq>\n  ((H::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice) \\<circ>\n   F)\n   ?x\n\ngoal (1 subgoal):\n 1. F (lfp G) \\<sqsubseteq> lfp H\nvariables:\n  F, G, H :: 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "then"], ["proof (chain)\npicking this:\n  ((F::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice) \\<circ>\n   (G::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice))\n   (?x::'a::refinement_lattice) \\<sqsubseteq>\n  ((H::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice) \\<circ>\n   F)\n   ?x", "show \"F (lfp G) \\<sqsubseteq> (lfp H)\""], ["proof (prove)\nusing this:\n  ((F::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice) \\<circ>\n   (G::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice))\n   (?x::'a::refinement_lattice) \\<sqsubseteq>\n  ((H::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice) \\<circ>\n   F)\n   ?x\n\ngoal (1 subgoal):\n 1. F (lfp G) \\<sqsubseteq> lfp H\nvariables:\n  F, G, H :: 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "using monoH distF fusion_lfp_leq"], ["proof (prove)\nusing this:\n  ((F::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice) \\<circ>\n   (G::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice))\n   (?x::'a::refinement_lattice) \\<sqsubseteq>\n  ((H::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice) \\<circ>\n   F)\n   ?x\n  mono (H::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice)\n  dist_over_sup\n   (F::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice)\n  \\<lbrakk>mono\n            (?H::?'a::refinement_lattice\n                 \\<Rightarrow> ?'a::refinement_lattice);\n   dist_over_sup\n    (?F::?'a::refinement_lattice \\<Rightarrow> ?'a::refinement_lattice);\n   \\<And>x::?'a::refinement_lattice.\n      (?F \\<circ>\n       (?G::?'a::refinement_lattice \\<Rightarrow> ?'a::refinement_lattice))\n       x \\<sqsubseteq>\n      (?H \\<circ> ?F) x\\<rbrakk>\n  \\<Longrightarrow> ?F (lfp ?G) \\<sqsubseteq> lfp ?H\n\ngoal (1 subgoal):\n 1. F (lfp G) \\<sqsubseteq> lfp H\nvariables:\n  F, G, H :: 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "by blast"], ["proof (state)\nthis:\n  (F::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice)\n   (lfp (G::'a::refinement_lattice\n            \\<Rightarrow> 'a::refinement_lattice)) \\<sqsubseteq>\n  lfp (H::'a::refinement_lattice \\<Rightarrow> 'a::refinement_lattice)\n\ngoal:\nNo subgoals!\nvariables:\n  F, G, H :: 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "qed"], ["", "end"], ["", "end"]]}