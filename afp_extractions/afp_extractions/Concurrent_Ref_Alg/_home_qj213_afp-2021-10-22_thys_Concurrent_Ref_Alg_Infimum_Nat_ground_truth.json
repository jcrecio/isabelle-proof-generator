{"file_name": "/home/qj213/afp-2021-10-22/thys/Concurrent_Ref_Alg/Infimum_Nat.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Concurrent_Ref_Alg", "problem_names": ["lemma INF_partition_nat3: \n  fixes f :: \"nat \\<Rightarrow> nat \\<Rightarrow> 'a::refinement_lattice\"\n  shows \"(\\<Sqinter>j. f i j) =\n    (\\<Sqinter>j\\<in>{j. i = j}. f i j) \\<sqinter>\n    (\\<Sqinter>j\\<in>{j. i < j}. f i j) \\<sqinter>\n    (\\<Sqinter>j\\<in>{j. j < i}. f i j)\"", "lemma INF_INF_partition_nat3: \n  fixes f :: \"nat \\<Rightarrow> nat \\<Rightarrow> 'a::refinement_lattice\"\n  shows \"(\\<Sqinter>i. \\<Sqinter>j. f i j) =\n    (\\<Sqinter>i. \\<Sqinter>j\\<in>{j. i = j}. f i j) \\<sqinter>\n    (\\<Sqinter>i. \\<Sqinter>j\\<in>{j. i < j}. f i j) \\<sqinter>\n    (\\<Sqinter>i. \\<Sqinter>j\\<in>{j. j < i}. f i j)\"", "lemma INF_nat_shift: \"(\\<Sqinter>i\\<in>{i. 0 < i}. f i) = (\\<Sqinter>i. f (Suc i))\"", "lemma INF_nat_minus:\n  fixes f :: \"nat \\<Rightarrow> 'a::refinement_lattice\"\n  shows \"(\\<Sqinter>j\\<in>{j. i < j}. f (j - i)) = (\\<Sqinter>k\\<in>{k. 0 < k}. f k)\"", "lemma INF_INF_guarded_switch:\n  fixes f :: \"nat \\<Rightarrow> nat \\<Rightarrow> 'a::refinement_lattice\"\n  shows \"(\\<Sqinter>i. \\<Sqinter>j\\<in>{j. j < i}. f j (i - j)) = (\\<Sqinter>j. \\<Sqinter>i\\<in>{i. j < i}. f j (i - j))\""], "translations": [["", "lemma INF_partition_nat3: \n  fixes f :: \"nat \\<Rightarrow> nat \\<Rightarrow> 'a::refinement_lattice\"\n  shows \"(\\<Sqinter>j. f i j) =\n    (\\<Sqinter>j\\<in>{j. i = j}. f i j) \\<sqinter>\n    (\\<Sqinter>j\\<in>{j. i < j}. f i j) \\<sqinter>\n    (\\<Sqinter>j\\<in>{j. j < i}. f i j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Sqinter> range (f i) =\n    \\<Sqinter> (f i ` {j::nat. i = j}) \\<sqinter>\n    \\<Sqinter> (f i ` {j::nat. i < j}) \\<sqinter>\n    \\<Sqinter> (f i ` {j::nat. j < i})\nvariables:\n  i :: nat\n  f :: nat \\<Rightarrow> nat \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Sqinter> range (f i) =\n    \\<Sqinter> (f i ` {j::nat. i = j}) \\<sqinter>\n    \\<Sqinter> (f i ` {j::nat. i < j}) \\<sqinter>\n    \\<Sqinter> (f i ` {j::nat. j < i})\nvariables:\n  i :: nat\n  f :: nat \\<Rightarrow> nat \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "have univ_part: \"UNIV = {j. i = j} \\<union> {j. i < j} \\<union> {j. j < i}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. UNIV = {j::nat. i = j} \\<union> {j::nat. i < j} \\<union> {j::nat. j < i}\nvariables:\n  i :: nat", "by auto"], ["proof (state)\nthis:\n  UNIV =\n  {j::nat. (i::nat) = j} \\<union> {j::nat. i < j} \\<union> {j::nat. j < i}\n\ngoal (1 subgoal):\n 1. \\<Sqinter> range (f i) =\n    \\<Sqinter> (f i ` {j::nat. i = j}) \\<sqinter>\n    \\<Sqinter> (f i ` {j::nat. i < j}) \\<sqinter>\n    \\<Sqinter> (f i ` {j::nat. j < i})\nvariables:\n  i :: nat\n  f :: nat \\<Rightarrow> nat \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "have \"(\\<Sqinter>j \\<in> {j. i = j} \\<union> {j. i < j} \\<union> {j. j < i}. f i j) =\n          (\\<Sqinter>j\\<in>{j. i = j}. f i j) \\<sqinter>\n          (\\<Sqinter>j\\<in>{j. i < j}. f i j) \\<sqinter>\n          (\\<Sqinter>j\\<in>{j. j < i}. f i j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Sqinter> (f i `\n                ({j::nat. i = j} \\<union> {j::nat. i < j} \\<union>\n                 {j::nat. j < i})) =\n    \\<Sqinter> (f i ` {j::nat. i = j}) \\<sqinter>\n    \\<Sqinter> (f i ` {j::nat. i < j}) \\<sqinter>\n    \\<Sqinter> (f i ` {j::nat. j < i})\nvariables:\n  i :: nat\n  f :: nat \\<Rightarrow> nat \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "by (metis INF_union)"], ["proof (state)\nthis:\n  \\<Sqinter> ((f::nat\n                  \\<Rightarrow> nat \\<Rightarrow> 'a::refinement_lattice)\n               (i::nat) `\n              ({j::nat. i = j} \\<union> {j::nat. i < j} \\<union>\n               {j::nat. j < i})) =\n  \\<Sqinter> (f i ` {j::nat. i = j}) \\<sqinter>\n  \\<Sqinter> (f i ` {j::nat. i < j}) \\<sqinter>\n  \\<Sqinter> (f i ` {j::nat. j < i})\n\ngoal (1 subgoal):\n 1. \\<Sqinter> range (f i) =\n    \\<Sqinter> (f i ` {j::nat. i = j}) \\<sqinter>\n    \\<Sqinter> (f i ` {j::nat. i < j}) \\<sqinter>\n    \\<Sqinter> (f i ` {j::nat. j < i})\nvariables:\n  i :: nat\n  f :: nat \\<Rightarrow> nat \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "with univ_part"], ["proof (chain)\npicking this:\n  UNIV =\n  {j::nat. (i::nat) = j} \\<union> {j::nat. i < j} \\<union> {j::nat. j < i}\n  \\<Sqinter> ((f::nat\n                  \\<Rightarrow> nat \\<Rightarrow> 'a::refinement_lattice)\n               (i::nat) `\n              ({j::nat. i = j} \\<union> {j::nat. i < j} \\<union>\n               {j::nat. j < i})) =\n  \\<Sqinter> (f i ` {j::nat. i = j}) \\<sqinter>\n  \\<Sqinter> (f i ` {j::nat. i < j}) \\<sqinter>\n  \\<Sqinter> (f i ` {j::nat. j < i})", "show ?thesis"], ["proof (prove)\nusing this:\n  UNIV =\n  {j::nat. (i::nat) = j} \\<union> {j::nat. i < j} \\<union> {j::nat. j < i}\n  \\<Sqinter> ((f::nat\n                  \\<Rightarrow> nat \\<Rightarrow> 'a::refinement_lattice)\n               (i::nat) `\n              ({j::nat. i = j} \\<union> {j::nat. i < j} \\<union>\n               {j::nat. j < i})) =\n  \\<Sqinter> (f i ` {j::nat. i = j}) \\<sqinter>\n  \\<Sqinter> (f i ` {j::nat. i < j}) \\<sqinter>\n  \\<Sqinter> (f i ` {j::nat. j < i})\n\ngoal (1 subgoal):\n 1. \\<Sqinter> range (f i) =\n    \\<Sqinter> (f i ` {j::nat. i = j}) \\<sqinter>\n    \\<Sqinter> (f i ` {j::nat. i < j}) \\<sqinter>\n    \\<Sqinter> (f i ` {j::nat. j < i})\nvariables:\n  i :: nat\n  f :: nat \\<Rightarrow> nat \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "by simp"], ["proof (state)\nthis:\n  \\<Sqinter> range\n              ((f::nat\n                   \\<Rightarrow> nat \\<Rightarrow> 'a::refinement_lattice)\n                (i::nat)) =\n  \\<Sqinter> (f i ` {j::nat. i = j}) \\<sqinter>\n  \\<Sqinter> (f i ` {j::nat. i < j}) \\<sqinter>\n  \\<Sqinter> (f i ` {j::nat. j < i})\n\ngoal:\nNo subgoals!\nvariables:\n  i :: nat\n  f :: nat \\<Rightarrow> nat \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "qed"], ["", "lemma INF_INF_partition_nat3: \n  fixes f :: \"nat \\<Rightarrow> nat \\<Rightarrow> 'a::refinement_lattice\"\n  shows \"(\\<Sqinter>i. \\<Sqinter>j. f i j) =\n    (\\<Sqinter>i. \\<Sqinter>j\\<in>{j. i = j}. f i j) \\<sqinter>\n    (\\<Sqinter>i. \\<Sqinter>j\\<in>{j. i < j}. f i j) \\<sqinter>\n    (\\<Sqinter>i. \\<Sqinter>j\\<in>{j. j < i}. f i j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sqinter>i::nat. \\<Sqinter> range (f i)) =\n    (\\<Sqinter>i::nat. \\<Sqinter> (f i ` {j::nat. i = j})) \\<sqinter>\n    (\\<Sqinter>i::nat. \\<Sqinter> (f i ` {j::nat. i < j})) \\<sqinter>\n    (\\<Sqinter>i::nat. \\<Sqinter> (f i ` {j::nat. j < i}))\nvariables:\n  f :: nat \\<Rightarrow> nat \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<Sqinter>i::nat. \\<Sqinter> range (f i)) =\n    (\\<Sqinter>i::nat. \\<Sqinter> (f i ` {j::nat. i = j})) \\<sqinter>\n    (\\<Sqinter>i::nat. \\<Sqinter> (f i ` {j::nat. i < j})) \\<sqinter>\n    (\\<Sqinter>i::nat. \\<Sqinter> (f i ` {j::nat. j < i}))\nvariables:\n  f :: nat \\<Rightarrow> nat \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "have \"(\\<Sqinter>i. \\<Sqinter>j. f i j) = (\\<Sqinter>i. ((\\<Sqinter>j\\<in>{j. i = j}. f i j) \\<sqinter>\n                                  (\\<Sqinter>j\\<in>{j. i < j}. f i j) \\<sqinter>\n                                  (\\<Sqinter>j\\<in>{j. j < i}. f i j)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sqinter>i::nat. \\<Sqinter> range (f i)) =\n    (\\<Sqinter>i::nat.\n        \\<Sqinter> (f i ` {j::nat. i = j}) \\<sqinter>\n        \\<Sqinter> (f i ` {j::nat. i < j}) \\<sqinter>\n        \\<Sqinter> (f i ` {j::nat. j < i}))\nvariables:\n  f :: nat \\<Rightarrow> nat \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "by (simp add: INF_partition_nat3)"], ["proof (state)\nthis:\n  (\\<Sqinter>i::nat.\n      \\<Sqinter> range\n                  ((f::nat\n                       \\<Rightarrow> nat\n                                     \\<Rightarrow> 'a::refinement_lattice)\n                    i)) =\n  (\\<Sqinter>i::nat.\n      \\<Sqinter> (f i ` {j::nat. i = j}) \\<sqinter>\n      \\<Sqinter> (f i ` {j::nat. i < j}) \\<sqinter>\n      \\<Sqinter> (f i ` {j::nat. j < i}))\n\ngoal (1 subgoal):\n 1. (\\<Sqinter>i::nat. \\<Sqinter> range (f i)) =\n    (\\<Sqinter>i::nat. \\<Sqinter> (f i ` {j::nat. i = j})) \\<sqinter>\n    (\\<Sqinter>i::nat. \\<Sqinter> (f i ` {j::nat. i < j})) \\<sqinter>\n    (\\<Sqinter>i::nat. \\<Sqinter> (f i ` {j::nat. j < i}))\nvariables:\n  f :: nat \\<Rightarrow> nat \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "also"], ["proof (state)\nthis:\n  (\\<Sqinter>i::nat.\n      \\<Sqinter> range\n                  ((f::nat\n                       \\<Rightarrow> nat\n                                     \\<Rightarrow> 'a::refinement_lattice)\n                    i)) =\n  (\\<Sqinter>i::nat.\n      \\<Sqinter> (f i ` {j::nat. i = j}) \\<sqinter>\n      \\<Sqinter> (f i ` {j::nat. i < j}) \\<sqinter>\n      \\<Sqinter> (f i ` {j::nat. j < i}))\n\ngoal (1 subgoal):\n 1. (\\<Sqinter>i::nat. \\<Sqinter> range (f i)) =\n    (\\<Sqinter>i::nat. \\<Sqinter> (f i ` {j::nat. i = j})) \\<sqinter>\n    (\\<Sqinter>i::nat. \\<Sqinter> (f i ` {j::nat. i < j})) \\<sqinter>\n    (\\<Sqinter>i::nat. \\<Sqinter> (f i ` {j::nat. j < i}))\nvariables:\n  f :: nat \\<Rightarrow> nat \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "have \"... = (\\<Sqinter>i. \\<Sqinter>j\\<in>{j. i = j}. f i j) \\<sqinter>\n                   (\\<Sqinter>i. \\<Sqinter>j\\<in>{j. i < j}. f i j) \\<sqinter>\n                   (\\<Sqinter>i. \\<Sqinter>j\\<in>{j. j < i}. f i j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sqinter>i::nat.\n        \\<Sqinter> (f i ` {j::nat. i = j}) \\<sqinter>\n        \\<Sqinter> (f i ` {j::nat. i < j}) \\<sqinter>\n        \\<Sqinter> (f i ` {j::nat. j < i})) =\n    (\\<Sqinter>i::nat. \\<Sqinter> (f i ` {j::nat. i = j})) \\<sqinter>\n    (\\<Sqinter>i::nat. \\<Sqinter> (f i ` {j::nat. i < j})) \\<sqinter>\n    (\\<Sqinter>i::nat. \\<Sqinter> (f i ` {j::nat. j < i}))\nvariables:\n  f :: nat \\<Rightarrow> nat \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "by (simp add: INF_inf_distrib)"], ["proof (state)\nthis:\n  (\\<Sqinter>i::nat.\n      \\<Sqinter> ((f::nat\n                      \\<Rightarrow> nat\n                                    \\<Rightarrow> 'a::refinement_lattice)\n                   i `\n                  {j::nat. i = j}) \\<sqinter>\n      \\<Sqinter> (f i ` {j::nat. i < j}) \\<sqinter>\n      \\<Sqinter> (f i ` {j::nat. j < i})) =\n  (\\<Sqinter>i::nat. \\<Sqinter> (f i ` {j::nat. i = j})) \\<sqinter>\n  (\\<Sqinter>i::nat. \\<Sqinter> (f i ` {j::nat. i < j})) \\<sqinter>\n  (\\<Sqinter>i::nat. \\<Sqinter> (f i ` {j::nat. j < i}))\n\ngoal (1 subgoal):\n 1. (\\<Sqinter>i::nat. \\<Sqinter> range (f i)) =\n    (\\<Sqinter>i::nat. \\<Sqinter> (f i ` {j::nat. i = j})) \\<sqinter>\n    (\\<Sqinter>i::nat. \\<Sqinter> (f i ` {j::nat. i < j})) \\<sqinter>\n    (\\<Sqinter>i::nat. \\<Sqinter> (f i ` {j::nat. j < i}))\nvariables:\n  f :: nat \\<Rightarrow> nat \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "finally"], ["proof (chain)\npicking this:\n  (\\<Sqinter>i::nat.\n      \\<Sqinter> range\n                  ((f::nat\n                       \\<Rightarrow> nat\n                                     \\<Rightarrow> 'a::refinement_lattice)\n                    i)) =\n  (\\<Sqinter>i::nat. \\<Sqinter> (f i ` {j::nat. i = j})) \\<sqinter>\n  (\\<Sqinter>i::nat. \\<Sqinter> (f i ` {j::nat. i < j})) \\<sqinter>\n  (\\<Sqinter>i::nat. \\<Sqinter> (f i ` {j::nat. j < i}))", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<Sqinter>i::nat.\n      \\<Sqinter> range\n                  ((f::nat\n                       \\<Rightarrow> nat\n                                     \\<Rightarrow> 'a::refinement_lattice)\n                    i)) =\n  (\\<Sqinter>i::nat. \\<Sqinter> (f i ` {j::nat. i = j})) \\<sqinter>\n  (\\<Sqinter>i::nat. \\<Sqinter> (f i ` {j::nat. i < j})) \\<sqinter>\n  (\\<Sqinter>i::nat. \\<Sqinter> (f i ` {j::nat. j < i}))\n\ngoal (1 subgoal):\n 1. (\\<Sqinter>i::nat. \\<Sqinter> range (f i)) =\n    (\\<Sqinter>i::nat. \\<Sqinter> (f i ` {j::nat. i = j})) \\<sqinter>\n    (\\<Sqinter>i::nat. \\<Sqinter> (f i ` {j::nat. i < j})) \\<sqinter>\n    (\\<Sqinter>i::nat. \\<Sqinter> (f i ` {j::nat. j < i}))\nvariables:\n  f :: nat \\<Rightarrow> nat \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "."], ["proof (state)\nthis:\n  (\\<Sqinter>i::nat.\n      \\<Sqinter> range\n                  ((f::nat\n                       \\<Rightarrow> nat\n                                     \\<Rightarrow> 'a::refinement_lattice)\n                    i)) =\n  (\\<Sqinter>i::nat. \\<Sqinter> (f i ` {j::nat. i = j})) \\<sqinter>\n  (\\<Sqinter>i::nat. \\<Sqinter> (f i ` {j::nat. i < j})) \\<sqinter>\n  (\\<Sqinter>i::nat. \\<Sqinter> (f i ` {j::nat. j < i}))\n\ngoal:\nNo subgoals!\nvariables:\n  f :: nat \\<Rightarrow> nat \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "qed"], ["", "lemma INF_nat_shift: \"(\\<Sqinter>i\\<in>{i. 0 < i}. f i) = (\\<Sqinter>i. f (Suc i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Sqinter> (f ` {i::nat. (0::nat) < i}) = (\\<Sqinter>i::nat. f (Suc i))\nvariables:\n  f :: nat \\<Rightarrow> 'a\ntype variables:\n  'a :: Inf", "by (metis greaterThan_0 greaterThan_def range_composition)"], ["", "lemma INF_nat_minus:\n  fixes f :: \"nat \\<Rightarrow> 'a::refinement_lattice\"\n  shows \"(\\<Sqinter>j\\<in>{j. i < j}. f (j - i)) = (\\<Sqinter>k\\<in>{k. 0 < k}. f k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sqinter>j::nat\\<in>{j::nat. i < j}. f (j - i)) =\n    \\<Sqinter> (f ` {k::nat. (0::nat) < k})\nvariables:\n  i :: nat\n  f :: nat \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "apply (rule antisym)"], ["proof (prove)\ngoal (2 subgoals):\n 1. (\\<Sqinter>j::nat\\<in>{j::nat. i < j}. f (j - i)) \\<sqsubseteq>\n    \\<Sqinter> (f ` {k::nat. (0::nat) < k})\n 2. \\<Sqinter> (f ` {k::nat. (0::nat) < k}) \\<sqsubseteq>\n    (\\<Sqinter>j::nat\\<in>{j::nat. i < j}. f (j - i))\nvariables:\n  i :: nat\n  f :: nat \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "apply (rule INF_mono, simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>m::nat.\n       (0::nat) < m \\<Longrightarrow>\n       \\<exists>j>i. f (j - i) \\<sqsubseteq> f m\n 2. \\<Sqinter> (f ` {k::nat. (0::nat) < k}) \\<sqsubseteq>\n    (\\<Sqinter>j::nat\\<in>{j::nat. i < j}. f (j - i))\nvariables:\n  f :: nat \\<Rightarrow> 'a\n  i :: nat\ntype variables:\n  'a :: refinement_lattice", "apply (metis add.right_neutral add_diff_cancel_left' add_less_cancel_left order_refl)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Sqinter> (f ` {k::nat. (0::nat) < k}) \\<sqsubseteq>\n    (\\<Sqinter>j::nat\\<in>{j::nat. i < j}. f (j - i))\nvariables:\n  i :: nat\n  f :: nat \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "apply (rule INF_mono, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>m::nat.\n       i < m \\<Longrightarrow>\n       \\<exists>k>0::nat. f k \\<sqsubseteq> f (m - i)\nvariables:\n  f :: nat \\<Rightarrow> 'a\n  i :: nat\ntype variables:\n  'a :: refinement_lattice", "by (meson order_refl zero_less_diff)"], ["", "(* TODO: generalise to P j i? *)"], ["", "lemma INF_INF_guarded_switch:\n  fixes f :: \"nat \\<Rightarrow> nat \\<Rightarrow> 'a::refinement_lattice\"\n  shows \"(\\<Sqinter>i. \\<Sqinter>j\\<in>{j. j < i}. f j (i - j)) = (\\<Sqinter>j. \\<Sqinter>i\\<in>{i. j < i}. f j (i - j))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sqinter>i::nat. \\<Sqinter>j::nat\\<in>{j::nat. j < i}. f j (i - j)) =\n    (\\<Sqinter>j::nat. \\<Sqinter>i::nat\\<in>{i::nat. j < i}. f j (i - j))\nvariables:\n  f :: nat \\<Rightarrow> nat \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "proof (rule antisym)"], ["proof (state)\ngoal (2 subgoals):\n 1. (\\<Sqinter>i::nat.\n        \\<Sqinter>j::nat\\<in>{j::nat. j < i}. f j (i - j)) \\<sqsubseteq>\n    (\\<Sqinter>j::nat. \\<Sqinter>i::nat\\<in>{i::nat. j < i}. f j (i - j))\n 2. (\\<Sqinter>j::nat.\n        \\<Sqinter>i::nat\\<in>{i::nat. j < i}. f j (i - j)) \\<sqsubseteq>\n    (\\<Sqinter>i::nat. \\<Sqinter>j::nat\\<in>{j::nat. j < i}. f j (i - j))\nvariables:\n  f :: nat \\<Rightarrow> nat \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "have \"\\<And>jj ii. jj < ii \\<Longrightarrow> \\<exists>i. \\<exists>j<i. f j (i - j) \\<sqsubseteq> f jj (ii - jj)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>(jj::nat) ii::nat.\n       jj < ii \\<Longrightarrow>\n       \\<exists>(i::nat) j::nat.\n          j < i \\<and> f j (i - j) \\<sqsubseteq> f jj (ii - jj)\nvariables:\n  f :: nat \\<Rightarrow> nat \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "by blast"], ["proof (state)\nthis:\n  (?jj::nat) < (?ii::nat) \\<Longrightarrow>\n  \\<exists>(i::nat) j::nat.\n     j < i \\<and>\n     (f::nat \\<Rightarrow> nat \\<Rightarrow> 'a::refinement_lattice) j\n      (i - j) \\<sqsubseteq>\n     f ?jj (?ii - ?jj)\n\ngoal (2 subgoals):\n 1. (\\<Sqinter>i::nat.\n        \\<Sqinter>j::nat\\<in>{j::nat. j < i}. f j (i - j)) \\<sqsubseteq>\n    (\\<Sqinter>j::nat. \\<Sqinter>i::nat\\<in>{i::nat. j < i}. f j (i - j))\n 2. (\\<Sqinter>j::nat.\n        \\<Sqinter>i::nat\\<in>{i::nat. j < i}. f j (i - j)) \\<sqsubseteq>\n    (\\<Sqinter>i::nat. \\<Sqinter>j::nat\\<in>{j::nat. j < i}. f j (i - j))\nvariables:\n  f :: nat \\<Rightarrow> nat \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "then"], ["proof (chain)\npicking this:\n  (?jj::nat) < (?ii::nat) \\<Longrightarrow>\n  \\<exists>(i::nat) j::nat.\n     j < i \\<and>\n     (f::nat \\<Rightarrow> nat \\<Rightarrow> 'a::refinement_lattice) j\n      (i - j) \\<sqsubseteq>\n     f ?jj (?ii - ?jj)", "have \"\\<And>jj ii. jj < ii \\<Longrightarrow> \\<exists>i. (\\<Sqinter>j\\<in>{j. j < i}. f j (i - j)) \\<sqsubseteq> f jj (ii - jj)\""], ["proof (prove)\nusing this:\n  (?jj::nat) < (?ii::nat) \\<Longrightarrow>\n  \\<exists>(i::nat) j::nat.\n     j < i \\<and>\n     (f::nat \\<Rightarrow> nat \\<Rightarrow> 'a::refinement_lattice) j\n      (i - j) \\<sqsubseteq>\n     f ?jj (?ii - ?jj)\n\ngoal (1 subgoal):\n 1. \\<And>(jj::nat) ii::nat.\n       jj < ii \\<Longrightarrow>\n       \\<exists>i::nat.\n          (\\<Sqinter>j::nat\\<in>{j::nat. j < i}. f j (i - j)) \\<sqsubseteq>\n          f jj (ii - jj)\nvariables:\n  f :: nat \\<Rightarrow> nat \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "by (meson INF_lower mem_Collect_eq)"], ["proof (state)\nthis:\n  (?jj::nat) < (?ii::nat) \\<Longrightarrow>\n  \\<exists>i::nat.\n     (\\<Sqinter>j::nat\\<in>{j::nat. j < i}.\n         (f::nat \\<Rightarrow> nat \\<Rightarrow> 'a::refinement_lattice) j\n          (i - j)) \\<sqsubseteq>\n     f ?jj (?ii - ?jj)\n\ngoal (2 subgoals):\n 1. (\\<Sqinter>i::nat.\n        \\<Sqinter>j::nat\\<in>{j::nat. j < i}. f j (i - j)) \\<sqsubseteq>\n    (\\<Sqinter>j::nat. \\<Sqinter>i::nat\\<in>{i::nat. j < i}. f j (i - j))\n 2. (\\<Sqinter>j::nat.\n        \\<Sqinter>i::nat\\<in>{i::nat. j < i}. f j (i - j)) \\<sqsubseteq>\n    (\\<Sqinter>i::nat. \\<Sqinter>j::nat\\<in>{j::nat. j < i}. f j (i - j))\nvariables:\n  f :: nat \\<Rightarrow> nat \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "then"], ["proof (chain)\npicking this:\n  (?jj::nat) < (?ii::nat) \\<Longrightarrow>\n  \\<exists>i::nat.\n     (\\<Sqinter>j::nat\\<in>{j::nat. j < i}.\n         (f::nat \\<Rightarrow> nat \\<Rightarrow> 'a::refinement_lattice) j\n          (i - j)) \\<sqsubseteq>\n     f ?jj (?ii - ?jj)", "have \"\\<And>jj ii. jj < ii \\<Longrightarrow> (\\<Sqinter>i. \\<Sqinter>j\\<in>{j. j < i}. f j (i - j)) \\<sqsubseteq> f jj (ii - jj)\""], ["proof (prove)\nusing this:\n  (?jj::nat) < (?ii::nat) \\<Longrightarrow>\n  \\<exists>i::nat.\n     (\\<Sqinter>j::nat\\<in>{j::nat. j < i}.\n         (f::nat \\<Rightarrow> nat \\<Rightarrow> 'a::refinement_lattice) j\n          (i - j)) \\<sqsubseteq>\n     f ?jj (?ii - ?jj)\n\ngoal (1 subgoal):\n 1. \\<And>(jj::nat) ii::nat.\n       jj < ii \\<Longrightarrow>\n       (\\<Sqinter>i::nat.\n           \\<Sqinter>j::nat\\<in>{j::nat. j < i}. f j (i - j)) \\<sqsubseteq>\n       f jj (ii - jj)\nvariables:\n  f :: nat \\<Rightarrow> nat \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "by (meson UNIV_I INF_lower dual_order.trans)"], ["proof (state)\nthis:\n  (?jj::nat) < (?ii::nat) \\<Longrightarrow>\n  (\\<Sqinter>i::nat.\n      \\<Sqinter>j::nat\\<in>{j::nat. j < i}.\n         (f::nat \\<Rightarrow> nat \\<Rightarrow> 'a::refinement_lattice) j\n          (i - j)) \\<sqsubseteq>\n  f ?jj (?ii - ?jj)\n\ngoal (2 subgoals):\n 1. (\\<Sqinter>i::nat.\n        \\<Sqinter>j::nat\\<in>{j::nat. j < i}. f j (i - j)) \\<sqsubseteq>\n    (\\<Sqinter>j::nat. \\<Sqinter>i::nat\\<in>{i::nat. j < i}. f j (i - j))\n 2. (\\<Sqinter>j::nat.\n        \\<Sqinter>i::nat\\<in>{i::nat. j < i}. f j (i - j)) \\<sqsubseteq>\n    (\\<Sqinter>i::nat. \\<Sqinter>j::nat\\<in>{j::nat. j < i}. f j (i - j))\nvariables:\n  f :: nat \\<Rightarrow> nat \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "then"], ["proof (chain)\npicking this:\n  (?jj::nat) < (?ii::nat) \\<Longrightarrow>\n  (\\<Sqinter>i::nat.\n      \\<Sqinter>j::nat\\<in>{j::nat. j < i}.\n         (f::nat \\<Rightarrow> nat \\<Rightarrow> 'a::refinement_lattice) j\n          (i - j)) \\<sqsubseteq>\n  f ?jj (?ii - ?jj)", "have \"\\<And>jj. (\\<Sqinter>i. \\<Sqinter>j\\<in>{j. j < i}. f j (i - j)) \\<sqsubseteq> (\\<Sqinter>ii\\<in>{ii. jj < ii}. f jj (ii - jj))\""], ["proof (prove)\nusing this:\n  (?jj::nat) < (?ii::nat) \\<Longrightarrow>\n  (\\<Sqinter>i::nat.\n      \\<Sqinter>j::nat\\<in>{j::nat. j < i}.\n         (f::nat \\<Rightarrow> nat \\<Rightarrow> 'a::refinement_lattice) j\n          (i - j)) \\<sqsubseteq>\n  f ?jj (?ii - ?jj)\n\ngoal (1 subgoal):\n 1. \\<And>jj::nat.\n       (\\<Sqinter>i::nat.\n           \\<Sqinter>j::nat\\<in>{j::nat. j < i}. f j (i - j)) \\<sqsubseteq>\n       (\\<Sqinter>ii::nat\\<in>{ii::nat. jj < ii}. f jj (ii - jj))\nvariables:\n  f :: nat \\<Rightarrow> nat \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "by (metis (mono_tags, lifting) INF_greatest mem_Collect_eq)"], ["proof (state)\nthis:\n  (\\<Sqinter>i::nat.\n      \\<Sqinter>j::nat\\<in>{j::nat. j < i}.\n         (f::nat \\<Rightarrow> nat \\<Rightarrow> 'a::refinement_lattice) j\n          (i - j)) \\<sqsubseteq>\n  (\\<Sqinter>ii::nat\\<in>{ii::nat. ?jj < ii}. f (?jj::nat) (ii - ?jj))\n\ngoal (2 subgoals):\n 1. (\\<Sqinter>i::nat.\n        \\<Sqinter>j::nat\\<in>{j::nat. j < i}. f j (i - j)) \\<sqsubseteq>\n    (\\<Sqinter>j::nat. \\<Sqinter>i::nat\\<in>{i::nat. j < i}. f j (i - j))\n 2. (\\<Sqinter>j::nat.\n        \\<Sqinter>i::nat\\<in>{i::nat. j < i}. f j (i - j)) \\<sqsubseteq>\n    (\\<Sqinter>i::nat. \\<Sqinter>j::nat\\<in>{j::nat. j < i}. f j (i - j))\nvariables:\n  f :: nat \\<Rightarrow> nat \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "then"], ["proof (chain)\npicking this:\n  (\\<Sqinter>i::nat.\n      \\<Sqinter>j::nat\\<in>{j::nat. j < i}.\n         (f::nat \\<Rightarrow> nat \\<Rightarrow> 'a::refinement_lattice) j\n          (i - j)) \\<sqsubseteq>\n  (\\<Sqinter>ii::nat\\<in>{ii::nat. ?jj < ii}. f (?jj::nat) (ii - ?jj))", "have \"(\\<Sqinter>i. \\<Sqinter>j\\<in>{j. j < i}. f j (i - j)) \\<sqsubseteq> (\\<Sqinter>jj. \\<Sqinter>ii\\<in>{ii. jj < ii}. f jj (ii - jj))\""], ["proof (prove)\nusing this:\n  (\\<Sqinter>i::nat.\n      \\<Sqinter>j::nat\\<in>{j::nat. j < i}.\n         (f::nat \\<Rightarrow> nat \\<Rightarrow> 'a::refinement_lattice) j\n          (i - j)) \\<sqsubseteq>\n  (\\<Sqinter>ii::nat\\<in>{ii::nat. ?jj < ii}. f (?jj::nat) (ii - ?jj))\n\ngoal (1 subgoal):\n 1. (\\<Sqinter>i::nat.\n        \\<Sqinter>j::nat\\<in>{j::nat. j < i}. f j (i - j)) \\<sqsubseteq>\n    (\\<Sqinter>jj::nat.\n        \\<Sqinter>ii::nat\\<in>{ii::nat. jj < ii}. f jj (ii - jj))\nvariables:\n  f :: nat \\<Rightarrow> nat \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "by (simp add: INF_greatest)"], ["proof (state)\nthis:\n  (\\<Sqinter>i::nat.\n      \\<Sqinter>j::nat\\<in>{j::nat. j < i}.\n         (f::nat \\<Rightarrow> nat \\<Rightarrow> 'a::refinement_lattice) j\n          (i - j)) \\<sqsubseteq>\n  (\\<Sqinter>jj::nat.\n      \\<Sqinter>ii::nat\\<in>{ii::nat. jj < ii}. f jj (ii - jj))\n\ngoal (2 subgoals):\n 1. (\\<Sqinter>i::nat.\n        \\<Sqinter>j::nat\\<in>{j::nat. j < i}. f j (i - j)) \\<sqsubseteq>\n    (\\<Sqinter>j::nat. \\<Sqinter>i::nat\\<in>{i::nat. j < i}. f j (i - j))\n 2. (\\<Sqinter>j::nat.\n        \\<Sqinter>i::nat\\<in>{i::nat. j < i}. f j (i - j)) \\<sqsubseteq>\n    (\\<Sqinter>i::nat. \\<Sqinter>j::nat\\<in>{j::nat. j < i}. f j (i - j))\nvariables:\n  f :: nat \\<Rightarrow> nat \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "then"], ["proof (chain)\npicking this:\n  (\\<Sqinter>i::nat.\n      \\<Sqinter>j::nat\\<in>{j::nat. j < i}.\n         (f::nat \\<Rightarrow> nat \\<Rightarrow> 'a::refinement_lattice) j\n          (i - j)) \\<sqsubseteq>\n  (\\<Sqinter>jj::nat.\n      \\<Sqinter>ii::nat\\<in>{ii::nat. jj < ii}. f jj (ii - jj))", "show \"(\\<Sqinter>i. \\<Sqinter>j\\<in>{j. j < i}. f j (i - j)) \\<sqsubseteq> (\\<Sqinter>j. \\<Sqinter>i\\<in>{i. j < i}. f j (i - j))\""], ["proof (prove)\nusing this:\n  (\\<Sqinter>i::nat.\n      \\<Sqinter>j::nat\\<in>{j::nat. j < i}.\n         (f::nat \\<Rightarrow> nat \\<Rightarrow> 'a::refinement_lattice) j\n          (i - j)) \\<sqsubseteq>\n  (\\<Sqinter>jj::nat.\n      \\<Sqinter>ii::nat\\<in>{ii::nat. jj < ii}. f jj (ii - jj))\n\ngoal (1 subgoal):\n 1. (\\<Sqinter>i::nat.\n        \\<Sqinter>j::nat\\<in>{j::nat. j < i}. f j (i - j)) \\<sqsubseteq>\n    (\\<Sqinter>j::nat. \\<Sqinter>i::nat\\<in>{i::nat. j < i}. f j (i - j))\nvariables:\n  f :: nat \\<Rightarrow> nat \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "by simp"], ["proof (state)\nthis:\n  (\\<Sqinter>i::nat.\n      \\<Sqinter>j::nat\\<in>{j::nat. j < i}.\n         (f::nat \\<Rightarrow> nat \\<Rightarrow> 'a::refinement_lattice) j\n          (i - j)) \\<sqsubseteq>\n  (\\<Sqinter>j::nat. \\<Sqinter>i::nat\\<in>{i::nat. j < i}. f j (i - j))\n\ngoal (1 subgoal):\n 1. (\\<Sqinter>j::nat.\n        \\<Sqinter>i::nat\\<in>{i::nat. j < i}. f j (i - j)) \\<sqsubseteq>\n    (\\<Sqinter>i::nat. \\<Sqinter>j::nat\\<in>{j::nat. j < i}. f j (i - j))\nvariables:\n  f :: nat \\<Rightarrow> nat \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<Sqinter>j::nat.\n        \\<Sqinter>i::nat\\<in>{i::nat. j < i}. f j (i - j)) \\<sqsubseteq>\n    (\\<Sqinter>i::nat. \\<Sqinter>j::nat\\<in>{j::nat. j < i}. f j (i - j))\nvariables:\n  f :: nat \\<Rightarrow> nat \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "have \"\\<And>ii jj. jj < ii \\<Longrightarrow> \\<exists>j. \\<exists>i>j. f j (i - j) \\<sqsubseteq> f jj (ii - jj)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>(ii::nat) jj::nat.\n       jj < ii \\<Longrightarrow>\n       \\<exists>(j::nat) i::nat.\n          j < i \\<and> f j (i - j) \\<sqsubseteq> f jj (ii - jj)\nvariables:\n  f :: nat \\<Rightarrow> nat \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "by blast"], ["proof (state)\nthis:\n  (?jj::nat) < (?ii::nat) \\<Longrightarrow>\n  \\<exists>(j::nat) i::nat.\n     j < i \\<and>\n     (f::nat \\<Rightarrow> nat \\<Rightarrow> 'a::refinement_lattice) j\n      (i - j) \\<sqsubseteq>\n     f ?jj (?ii - ?jj)\n\ngoal (1 subgoal):\n 1. (\\<Sqinter>j::nat.\n        \\<Sqinter>i::nat\\<in>{i::nat. j < i}. f j (i - j)) \\<sqsubseteq>\n    (\\<Sqinter>i::nat. \\<Sqinter>j::nat\\<in>{j::nat. j < i}. f j (i - j))\nvariables:\n  f :: nat \\<Rightarrow> nat \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "then"], ["proof (chain)\npicking this:\n  (?jj::nat) < (?ii::nat) \\<Longrightarrow>\n  \\<exists>(j::nat) i::nat.\n     j < i \\<and>\n     (f::nat \\<Rightarrow> nat \\<Rightarrow> 'a::refinement_lattice) j\n      (i - j) \\<sqsubseteq>\n     f ?jj (?ii - ?jj)", "have \"\\<And>ii jj. jj < ii \\<Longrightarrow> \\<exists>j. (\\<Sqinter>i\\<in>{i. j < i}. f j (i - j)) \\<sqsubseteq> f jj (ii - jj)\""], ["proof (prove)\nusing this:\n  (?jj::nat) < (?ii::nat) \\<Longrightarrow>\n  \\<exists>(j::nat) i::nat.\n     j < i \\<and>\n     (f::nat \\<Rightarrow> nat \\<Rightarrow> 'a::refinement_lattice) j\n      (i - j) \\<sqsubseteq>\n     f ?jj (?ii - ?jj)\n\ngoal (1 subgoal):\n 1. \\<And>(ii::nat) jj::nat.\n       jj < ii \\<Longrightarrow>\n       \\<exists>j::nat.\n          (\\<Sqinter>i::nat\\<in>{i::nat. j < i}. f j (i - j)) \\<sqsubseteq>\n          f jj (ii - jj)\nvariables:\n  f :: nat \\<Rightarrow> nat \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "by (meson INF_lower mem_Collect_eq)"], ["proof (state)\nthis:\n  (?jj::nat) < (?ii::nat) \\<Longrightarrow>\n  \\<exists>j::nat.\n     (\\<Sqinter>i::nat\\<in>{i::nat. j < i}.\n         (f::nat \\<Rightarrow> nat \\<Rightarrow> 'a::refinement_lattice) j\n          (i - j)) \\<sqsubseteq>\n     f ?jj (?ii - ?jj)\n\ngoal (1 subgoal):\n 1. (\\<Sqinter>j::nat.\n        \\<Sqinter>i::nat\\<in>{i::nat. j < i}. f j (i - j)) \\<sqsubseteq>\n    (\\<Sqinter>i::nat. \\<Sqinter>j::nat\\<in>{j::nat. j < i}. f j (i - j))\nvariables:\n  f :: nat \\<Rightarrow> nat \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "then"], ["proof (chain)\npicking this:\n  (?jj::nat) < (?ii::nat) \\<Longrightarrow>\n  \\<exists>j::nat.\n     (\\<Sqinter>i::nat\\<in>{i::nat. j < i}.\n         (f::nat \\<Rightarrow> nat \\<Rightarrow> 'a::refinement_lattice) j\n          (i - j)) \\<sqsubseteq>\n     f ?jj (?ii - ?jj)", "have \"\\<And>ii jj. jj < ii \\<Longrightarrow> (\\<Sqinter>j. \\<Sqinter>i\\<in>{i. j < i}. f j (i - j)) \\<sqsubseteq> f jj (ii - jj)\""], ["proof (prove)\nusing this:\n  (?jj::nat) < (?ii::nat) \\<Longrightarrow>\n  \\<exists>j::nat.\n     (\\<Sqinter>i::nat\\<in>{i::nat. j < i}.\n         (f::nat \\<Rightarrow> nat \\<Rightarrow> 'a::refinement_lattice) j\n          (i - j)) \\<sqsubseteq>\n     f ?jj (?ii - ?jj)\n\ngoal (1 subgoal):\n 1. \\<And>(ii::nat) jj::nat.\n       jj < ii \\<Longrightarrow>\n       (\\<Sqinter>j::nat.\n           \\<Sqinter>i::nat\\<in>{i::nat. j < i}. f j (i - j)) \\<sqsubseteq>\n       f jj (ii - jj)\nvariables:\n  f :: nat \\<Rightarrow> nat \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "by (meson UNIV_I INF_lower dual_order.trans)"], ["proof (state)\nthis:\n  (?jj::nat) < (?ii::nat) \\<Longrightarrow>\n  (\\<Sqinter>j::nat.\n      \\<Sqinter>i::nat\\<in>{i::nat. j < i}.\n         (f::nat \\<Rightarrow> nat \\<Rightarrow> 'a::refinement_lattice) j\n          (i - j)) \\<sqsubseteq>\n  f ?jj (?ii - ?jj)\n\ngoal (1 subgoal):\n 1. (\\<Sqinter>j::nat.\n        \\<Sqinter>i::nat\\<in>{i::nat. j < i}. f j (i - j)) \\<sqsubseteq>\n    (\\<Sqinter>i::nat. \\<Sqinter>j::nat\\<in>{j::nat. j < i}. f j (i - j))\nvariables:\n  f :: nat \\<Rightarrow> nat \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "then"], ["proof (chain)\npicking this:\n  (?jj::nat) < (?ii::nat) \\<Longrightarrow>\n  (\\<Sqinter>j::nat.\n      \\<Sqinter>i::nat\\<in>{i::nat. j < i}.\n         (f::nat \\<Rightarrow> nat \\<Rightarrow> 'a::refinement_lattice) j\n          (i - j)) \\<sqsubseteq>\n  f ?jj (?ii - ?jj)", "have \"\\<And>ii. (\\<Sqinter>j. \\<Sqinter>i\\<in>{i. j < i}. f j (i - j)) \\<sqsubseteq> (\\<Sqinter>jj\\<in>{jj. jj < ii}. f jj (ii - jj))\""], ["proof (prove)\nusing this:\n  (?jj::nat) < (?ii::nat) \\<Longrightarrow>\n  (\\<Sqinter>j::nat.\n      \\<Sqinter>i::nat\\<in>{i::nat. j < i}.\n         (f::nat \\<Rightarrow> nat \\<Rightarrow> 'a::refinement_lattice) j\n          (i - j)) \\<sqsubseteq>\n  f ?jj (?ii - ?jj)\n\ngoal (1 subgoal):\n 1. \\<And>ii::nat.\n       (\\<Sqinter>j::nat.\n           \\<Sqinter>i::nat\\<in>{i::nat. j < i}. f j (i - j)) \\<sqsubseteq>\n       (\\<Sqinter>jj::nat\\<in>{jj::nat. jj < ii}. f jj (ii - jj))\nvariables:\n  f :: nat \\<Rightarrow> nat \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "by (metis (mono_tags, lifting) INF_greatest mem_Collect_eq)"], ["proof (state)\nthis:\n  (\\<Sqinter>j::nat.\n      \\<Sqinter>i::nat\\<in>{i::nat. j < i}.\n         (f::nat \\<Rightarrow> nat \\<Rightarrow> 'a::refinement_lattice) j\n          (i - j)) \\<sqsubseteq>\n  (\\<Sqinter>jj::nat\\<in>{jj::nat. jj < ?ii}. f jj ((?ii::nat) - jj))\n\ngoal (1 subgoal):\n 1. (\\<Sqinter>j::nat.\n        \\<Sqinter>i::nat\\<in>{i::nat. j < i}. f j (i - j)) \\<sqsubseteq>\n    (\\<Sqinter>i::nat. \\<Sqinter>j::nat\\<in>{j::nat. j < i}. f j (i - j))\nvariables:\n  f :: nat \\<Rightarrow> nat \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "then"], ["proof (chain)\npicking this:\n  (\\<Sqinter>j::nat.\n      \\<Sqinter>i::nat\\<in>{i::nat. j < i}.\n         (f::nat \\<Rightarrow> nat \\<Rightarrow> 'a::refinement_lattice) j\n          (i - j)) \\<sqsubseteq>\n  (\\<Sqinter>jj::nat\\<in>{jj::nat. jj < ?ii}. f jj ((?ii::nat) - jj))", "have \"(\\<Sqinter>j. \\<Sqinter>i\\<in>{i. j < i}. f j (i - j)) \\<sqsubseteq> (\\<Sqinter>ii. \\<Sqinter>jj\\<in>{jj. jj < ii}. f jj (ii - jj))\""], ["proof (prove)\nusing this:\n  (\\<Sqinter>j::nat.\n      \\<Sqinter>i::nat\\<in>{i::nat. j < i}.\n         (f::nat \\<Rightarrow> nat \\<Rightarrow> 'a::refinement_lattice) j\n          (i - j)) \\<sqsubseteq>\n  (\\<Sqinter>jj::nat\\<in>{jj::nat. jj < ?ii}. f jj ((?ii::nat) - jj))\n\ngoal (1 subgoal):\n 1. (\\<Sqinter>j::nat.\n        \\<Sqinter>i::nat\\<in>{i::nat. j < i}. f j (i - j)) \\<sqsubseteq>\n    (\\<Sqinter>ii::nat.\n        \\<Sqinter>jj::nat\\<in>{jj::nat. jj < ii}. f jj (ii - jj))\nvariables:\n  f :: nat \\<Rightarrow> nat \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "by (simp add: INF_greatest)"], ["proof (state)\nthis:\n  (\\<Sqinter>j::nat.\n      \\<Sqinter>i::nat\\<in>{i::nat. j < i}.\n         (f::nat \\<Rightarrow> nat \\<Rightarrow> 'a::refinement_lattice) j\n          (i - j)) \\<sqsubseteq>\n  (\\<Sqinter>ii::nat.\n      \\<Sqinter>jj::nat\\<in>{jj::nat. jj < ii}. f jj (ii - jj))\n\ngoal (1 subgoal):\n 1. (\\<Sqinter>j::nat.\n        \\<Sqinter>i::nat\\<in>{i::nat. j < i}. f j (i - j)) \\<sqsubseteq>\n    (\\<Sqinter>i::nat. \\<Sqinter>j::nat\\<in>{j::nat. j < i}. f j (i - j))\nvariables:\n  f :: nat \\<Rightarrow> nat \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "then"], ["proof (chain)\npicking this:\n  (\\<Sqinter>j::nat.\n      \\<Sqinter>i::nat\\<in>{i::nat. j < i}.\n         (f::nat \\<Rightarrow> nat \\<Rightarrow> 'a::refinement_lattice) j\n          (i - j)) \\<sqsubseteq>\n  (\\<Sqinter>ii::nat.\n      \\<Sqinter>jj::nat\\<in>{jj::nat. jj < ii}. f jj (ii - jj))", "show \"(\\<Sqinter>j. \\<Sqinter>i\\<in>{i. j < i}. f j (i - j)) \\<sqsubseteq> (\\<Sqinter>i. \\<Sqinter>j\\<in>{j. j < i}. f j (i - j))\""], ["proof (prove)\nusing this:\n  (\\<Sqinter>j::nat.\n      \\<Sqinter>i::nat\\<in>{i::nat. j < i}.\n         (f::nat \\<Rightarrow> nat \\<Rightarrow> 'a::refinement_lattice) j\n          (i - j)) \\<sqsubseteq>\n  (\\<Sqinter>ii::nat.\n      \\<Sqinter>jj::nat\\<in>{jj::nat. jj < ii}. f jj (ii - jj))\n\ngoal (1 subgoal):\n 1. (\\<Sqinter>j::nat.\n        \\<Sqinter>i::nat\\<in>{i::nat. j < i}. f j (i - j)) \\<sqsubseteq>\n    (\\<Sqinter>i::nat. \\<Sqinter>j::nat\\<in>{j::nat. j < i}. f j (i - j))\nvariables:\n  f :: nat \\<Rightarrow> nat \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "by simp"], ["proof (state)\nthis:\n  (\\<Sqinter>j::nat.\n      \\<Sqinter>i::nat\\<in>{i::nat. j < i}.\n         (f::nat \\<Rightarrow> nat \\<Rightarrow> 'a::refinement_lattice) j\n          (i - j)) \\<sqsubseteq>\n  (\\<Sqinter>i::nat. \\<Sqinter>j::nat\\<in>{j::nat. j < i}. f j (i - j))\n\ngoal:\nNo subgoals!\nvariables:\n  f :: nat \\<Rightarrow> nat \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "qed"], ["", "end"], ["", "end"]]}