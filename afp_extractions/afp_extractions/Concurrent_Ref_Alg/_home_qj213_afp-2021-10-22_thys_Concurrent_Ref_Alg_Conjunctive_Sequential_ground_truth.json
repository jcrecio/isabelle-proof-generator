{"file_name": "/home/qj213/afp-2021-10-22/thys/Concurrent_Ref_Alg/Conjunctive_Sequential.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Concurrent_Ref_Alg", "problem_names": ["lemma seq_INF_distrib: \"X \\<noteq> {} \\<Longrightarrow> c ; (\\<Sqinter>x\\<in>X. d x) = (\\<Sqinter>x\\<in>X. c ; d x)\"", "lemma seq_INF_distrib_UNIV: \"c ; (\\<Sqinter>x. d x) = (\\<Sqinter>x. c ; d x)\"", "lemma INF_INF_seq_distrib: \"Y \\<noteq> {} \\<Longrightarrow> (\\<Sqinter>x\\<in>X. c x) ; (\\<Sqinter>y\\<in>Y. d y) = (\\<Sqinter>x\\<in>X. \\<Sqinter>y\\<in>Y. c x ; d y)\"", "lemma INF_INF_seq_distrib_UNIV: \"(\\<Sqinter>x. c x) ; (\\<Sqinter>y. d y) = (\\<Sqinter>x. \\<Sqinter>y. c x ; d y)\""], "translations": [["", "lemma seq_INF_distrib: \"X \\<noteq> {} \\<Longrightarrow> c ; (\\<Sqinter>x\\<in>X. d x) = (\\<Sqinter>x\\<in>X. c ; d x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X \\<noteq> {} \\<Longrightarrow>\n    c ; \\<Sqinter> (d ` X) = (\\<Sqinter>x::'b\\<in>X. c ; d x)\nvariables:\n  d :: 'b \\<Rightarrow> 'a\n  c :: 'a\n  (;) :: 'a \\<Rightarrow> 'a \\<Rightarrow> 'a\n  X :: 'b set\ntype variables:\n  'b :: type\n  'a :: refinement_lattice", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. X \\<noteq> {} \\<Longrightarrow>\n    c ; \\<Sqinter> (d ` X) = (\\<Sqinter>x::'b\\<in>X. c ; d x)\nvariables:\n  d :: 'b \\<Rightarrow> 'a\n  c :: 'a\n  (;) :: 'a \\<Rightarrow> 'a \\<Rightarrow> 'a\n  X :: 'b set\ntype variables:\n  'b :: type\n  'a :: refinement_lattice", "assume xne: \"X \\<noteq> {}\""], ["proof (state)\nthis:\n  (X::'b::type set) \\<noteq> {}\n\ngoal (1 subgoal):\n 1. X \\<noteq> {} \\<Longrightarrow>\n    c ; \\<Sqinter> (d ` X) = (\\<Sqinter>x::'b\\<in>X. c ; d x)\nvariables:\n  d :: 'b \\<Rightarrow> 'a\n  c :: 'a\n  (;) :: 'a \\<Rightarrow> 'a \\<Rightarrow> 'a\n  X :: 'b set\ntype variables:\n  'b :: type\n  'a :: refinement_lattice", "have a: \"c ; (\\<Sqinter>x\\<in>X. d x) = c ; \\<Sqinter>(d ` X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c ; \\<Sqinter> (d ` X) = c ; \\<Sqinter> (d ` X)\nvariables:\n  X :: 'b set\n  d :: 'b \\<Rightarrow> 'a\n  c :: 'a\n  (;) :: 'a \\<Rightarrow> 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice\n  'b :: type", "by auto"], ["proof (state)\nthis:\n  (c::'a::refinement_lattice) ;\n  \\<Sqinter> ((d::'b::type \\<Rightarrow> 'a::refinement_lattice) `\n              (X::'b::type set)) =\n  c ; \\<Sqinter> (d ` X)\n\ngoal (1 subgoal):\n 1. X \\<noteq> {} \\<Longrightarrow>\n    c ; \\<Sqinter> (d ` X) = (\\<Sqinter>x::'b\\<in>X. c ; d x)\nvariables:\n  d :: 'b \\<Rightarrow> 'a\n  c :: 'a\n  (;) :: 'a \\<Rightarrow> 'a \\<Rightarrow> 'a\n  X :: 'b set\ntype variables:\n  'b :: type\n  'a :: refinement_lattice", "also"], ["proof (state)\nthis:\n  (c::'a::refinement_lattice) ;\n  \\<Sqinter> ((d::'b::type \\<Rightarrow> 'a::refinement_lattice) `\n              (X::'b::type set)) =\n  c ; \\<Sqinter> (d ` X)\n\ngoal (1 subgoal):\n 1. X \\<noteq> {} \\<Longrightarrow>\n    c ; \\<Sqinter> (d ` X) = (\\<Sqinter>x::'b\\<in>X. c ; d x)\nvariables:\n  d :: 'b \\<Rightarrow> 'a\n  c :: 'a\n  (;) :: 'a \\<Rightarrow> 'a \\<Rightarrow> 'a\n  X :: 'b set\ntype variables:\n  'b :: type\n  'a :: refinement_lattice", "have b: \"... = (\\<Sqinter>d\\<in>(d ` X). c ; d)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c ; \\<Sqinter> (d ` X) = \\<Sqinter> ((;) c ` d ` X)\nvariables:\n  X :: 'b set\n  d :: 'b \\<Rightarrow> 'a\n  c :: 'a\n  (;) :: 'a \\<Rightarrow> 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice\n  'b :: type", "by (meson image_is_empty seq_Inf_distrib xne)"], ["proof (state)\nthis:\n  (c::'a::refinement_lattice) ;\n  \\<Sqinter> ((d::'b::type \\<Rightarrow> 'a::refinement_lattice) `\n              (X::'b::type set)) =\n  \\<Sqinter> ((;) c ` d ` X)\n\ngoal (1 subgoal):\n 1. X \\<noteq> {} \\<Longrightarrow>\n    c ; \\<Sqinter> (d ` X) = (\\<Sqinter>x::'b\\<in>X. c ; d x)\nvariables:\n  d :: 'b \\<Rightarrow> 'a\n  c :: 'a\n  (;) :: 'a \\<Rightarrow> 'a \\<Rightarrow> 'a\n  X :: 'b set\ntype variables:\n  'b :: type\n  'a :: refinement_lattice", "also"], ["proof (state)\nthis:\n  (c::'a::refinement_lattice) ;\n  \\<Sqinter> ((d::'b::type \\<Rightarrow> 'a::refinement_lattice) `\n              (X::'b::type set)) =\n  \\<Sqinter> ((;) c ` d ` X)\n\ngoal (1 subgoal):\n 1. X \\<noteq> {} \\<Longrightarrow>\n    c ; \\<Sqinter> (d ` X) = (\\<Sqinter>x::'b\\<in>X. c ; d x)\nvariables:\n  d :: 'b \\<Rightarrow> 'a\n  c :: 'a\n  (;) :: 'a \\<Rightarrow> 'a \\<Rightarrow> 'a\n  X :: 'b set\ntype variables:\n  'b :: type\n  'a :: refinement_lattice", "have c: \"... = (\\<Sqinter>x\\<in>X. c ; d x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Sqinter> ((;) c ` d ` X) = (\\<Sqinter>x::'b\\<in>X. c ; d x)\nvariables:\n  X :: 'b set\n  d :: 'b \\<Rightarrow> 'a\n  c :: 'a\n  (;) :: 'a \\<Rightarrow> 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice\n  'b :: type", "by (simp add: image_comp)"], ["proof (state)\nthis:\n  \\<Sqinter> ((;) (c::'a::refinement_lattice) `\n              (d::'b::type \\<Rightarrow> 'a::refinement_lattice) `\n              (X::'b::type set)) =\n  (\\<Sqinter>x::'b::type\\<in>X. c ; d x)\n\ngoal (1 subgoal):\n 1. X \\<noteq> {} \\<Longrightarrow>\n    c ; \\<Sqinter> (d ` X) = (\\<Sqinter>x::'b\\<in>X. c ; d x)\nvariables:\n  d :: 'b \\<Rightarrow> 'a\n  c :: 'a\n  (;) :: 'a \\<Rightarrow> 'a \\<Rightarrow> 'a\n  X :: 'b set\ntype variables:\n  'b :: type\n  'a :: refinement_lattice", "finally"], ["proof (chain)\npicking this:\n  (\\<Sqinter>x::'b::type\\<in>X::'b::type set.\n      (c::'a::refinement_lattice) ;\n      (d::'b::type \\<Rightarrow> 'a::refinement_lattice) x) =\n  (\\<Sqinter>x::'b::type\\<in>X. c ; d x)", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<Sqinter>x::'b::type\\<in>X::'b::type set.\n      (c::'a::refinement_lattice) ;\n      (d::'b::type \\<Rightarrow> 'a::refinement_lattice) x) =\n  (\\<Sqinter>x::'b::type\\<in>X. c ; d x)\n\ngoal (1 subgoal):\n 1. c ; \\<Sqinter> (d ` X) = (\\<Sqinter>x::'b\\<in>X. c ; d x)\nvariables:\n  X :: 'b set\n  d :: 'b \\<Rightarrow> 'a\n  c :: 'a\n  (;) :: 'a \\<Rightarrow> 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice\n  'b :: type", "by (simp add: b image_comp)"], ["proof (state)\nthis:\n  (c::'a::refinement_lattice) ;\n  \\<Sqinter> ((d::'b::type \\<Rightarrow> 'a::refinement_lattice) `\n              (X::'b::type set)) =\n  (\\<Sqinter>x::'b::type\\<in>X. c ; d x)\n\ngoal:\nNo subgoals!\nvariables:\n  d :: 'b \\<Rightarrow> 'a\n  c :: 'a\n  (;) :: 'a \\<Rightarrow> 'a \\<Rightarrow> 'a\n  X :: 'b set\ntype variables:\n  'b :: type\n  'a :: refinement_lattice", "qed"], ["", "lemma seq_INF_distrib_UNIV: \"c ; (\\<Sqinter>x. d x) = (\\<Sqinter>x. c ; d x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c ; \\<Sqinter> range d = (\\<Sqinter>x::'b. c ; d x)\nvariables:\n  d :: 'b \\<Rightarrow> 'a\n  c :: 'a\n  (;) :: 'a \\<Rightarrow> 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice\n  'b :: type", "by (simp add: seq_INF_distrib)"], ["", "lemma INF_INF_seq_distrib: \"Y \\<noteq> {} \\<Longrightarrow> (\\<Sqinter>x\\<in>X. c x) ; (\\<Sqinter>y\\<in>Y. d y) = (\\<Sqinter>x\\<in>X. \\<Sqinter>y\\<in>Y. c x ; d y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Y \\<noteq> {} \\<Longrightarrow>\n    \\<Sqinter> (c ` X) ; \\<Sqinter> (d ` Y) =\n    (\\<Sqinter>x::'c\\<in>X. \\<Sqinter>y::'b\\<in>Y. c x ; d y)\nvariables:\n  d :: 'b \\<Rightarrow> 'a\n  X :: 'c set\n  c :: 'c \\<Rightarrow> 'a\n  (;) :: 'a \\<Rightarrow> 'a \\<Rightarrow> 'a\n  Y :: 'b set\ntype variables:\n  'b, 'c :: type\n  'a :: refinement_lattice", "by (simp add: INF_seq_distrib seq_INF_distrib)"], ["", "lemma INF_INF_seq_distrib_UNIV: \"(\\<Sqinter>x. c x) ; (\\<Sqinter>y. d y) = (\\<Sqinter>x. \\<Sqinter>y. c x ; d y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Sqinter> range c ; \\<Sqinter> range d =\n    (\\<Sqinter>(x::'b) y::'c. c x ; d y)\nvariables:\n  d :: 'c \\<Rightarrow> 'a\n  c :: 'b \\<Rightarrow> 'a\n  (;) :: 'a \\<Rightarrow> 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice\n  'b, 'c :: type", "by (simp add: INF_INF_seq_distrib)"], ["", "end"], ["", "end"]]}