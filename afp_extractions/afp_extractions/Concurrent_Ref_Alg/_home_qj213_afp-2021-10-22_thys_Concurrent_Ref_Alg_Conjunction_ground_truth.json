{"file_name": "/home/qj213/afp-2021-10-22/thys/Concurrent_Ref_Alg/Conjunction.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Concurrent_Ref_Alg", "problem_names": ["lemmas [algebra_simps, field_simps] =\n  conj.assoc\n  conj.commute\n  conj.left_commute", "lemmas conj_assoc = conj.assoc", "lemmas conj_commute = conj.commute", "lemmas conj_idem = conj.idem", "lemmas conj_chaos = conj.right_neutral", "lemmas conj_chaos_left = conj.left_neutral", "lemma conj_bot_left [simp]: \"\\<bottom> \\<iinter> c = \\<bottom>\"", "lemma conj_not_bot: \"a \\<iinter> b \\<noteq> \\<bottom> \\<Longrightarrow> a \\<noteq> \\<bottom> \\<and> b \\<noteq> \\<bottom>\"", "lemma conj_distrib1: \"c \\<iinter> (d\\<^sub>0 \\<iinter> d\\<^sub>1) = (c \\<iinter> d\\<^sub>0) \\<iinter> (c \\<iinter> d\\<^sub>1)\"", "lemma conj_Inf_distrib: \"D \\<noteq> {} \\<Longrightarrow> c \\<iinter> (\\<Sqinter> D) = (\\<Sqinter>d\\<in>D. c \\<iinter> d)\"", "lemma inf_conj_distrib: \"(c\\<^sub>0 \\<sqinter> c\\<^sub>1) \\<iinter> d = (c\\<^sub>0 \\<iinter> d) \\<sqinter> (c\\<^sub>1 \\<iinter> d)\"", "lemma inf_conj_product: \"(a \\<sqinter> b) \\<iinter> (c \\<sqinter> d) = (a \\<iinter> c) \\<sqinter> (a \\<iinter> d) \\<sqinter> (b \\<iinter> c) \\<sqinter> (b \\<iinter> d)\"", "lemma conj_mono: \"c\\<^sub>0 \\<sqsubseteq> d\\<^sub>0 \\<Longrightarrow> c\\<^sub>1 \\<sqsubseteq> d\\<^sub>1 \\<Longrightarrow> c\\<^sub>0 \\<iinter> c\\<^sub>1 \\<sqsubseteq> d\\<^sub>0 \\<iinter> d\\<^sub>1\"", "lemma conj_mono_left: \"c\\<^sub>0 \\<sqsubseteq> c\\<^sub>1 \\<Longrightarrow> c\\<^sub>0 \\<iinter> d \\<sqsubseteq> c\\<^sub>1 \\<iinter> d\"", "lemma conj_mono_right: \"c\\<^sub>0 \\<sqsubseteq> c\\<^sub>1 \\<Longrightarrow> d \\<iinter> c\\<^sub>0 \\<sqsubseteq> d \\<iinter> c\\<^sub>1\"", "lemma conj_refine: \"c\\<^sub>0 \\<sqsubseteq> d \\<Longrightarrow> c\\<^sub>1 \\<sqsubseteq> d \\<Longrightarrow> c\\<^sub>0 \\<iinter> c\\<^sub>1 \\<sqsubseteq> d\"", "lemma refine_to_conj: \"c \\<sqsubseteq> d\\<^sub>0 \\<Longrightarrow> c \\<sqsubseteq> d\\<^sub>1 \\<Longrightarrow> c \\<sqsubseteq> d\\<^sub>0 \\<iinter> d\\<^sub>1\"", "lemma conjoin_non_aborting: \"chaos \\<sqsubseteq> c \\<Longrightarrow> d \\<sqsubseteq> d \\<iinter> c\"", "lemma conjunction_sup: \"c \\<iinter> d \\<sqsubseteq> c \\<squnion> d\"", "lemma conjunction_sup_nonaborting: \n  assumes \"chaos \\<sqsubseteq> c\" and \"chaos \\<sqsubseteq> d\"\n  shows \"c \\<iinter> d = c \\<squnion> d\"", "lemma conjoin_top: \"chaos \\<sqsubseteq> c \\<Longrightarrow> c \\<iinter> \\<top> = \\<top>\""], "translations": [["", "lemmas [algebra_simps, field_simps] =\n  conj.assoc\n  conj.commute\n  conj.left_commute"], ["", "lemmas conj_assoc = conj.assoc"], ["", "(* 42 *)"], ["", "lemmas conj_commute = conj.commute"], ["", "(* 43 *)"], ["", "lemmas conj_idem = conj.idem"], ["", "(* 44 *)"], ["", "lemmas conj_chaos = conj.right_neutral"], ["", "(* 45 *)"], ["", "lemmas conj_chaos_left = conj.left_neutral"], ["", "(* 45 + 43 *)"], ["", "lemma conj_bot_left [simp]: \"\\<bottom> \\<iinter> c = \\<bottom>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<bottom> \\<iinter> c = \\<bottom>\nvariables:\n  c :: 'a\n  (\\<iinter>) :: 'a \\<Rightarrow> 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "using conj_bot_right local.conj_commute"], ["proof (prove)\nusing this:\n  (?c::'a::refinement_lattice) \\<iinter> \\<bottom> = \\<bottom>\n  (?a::'a::refinement_lattice) \\<iinter> (?b::'a::refinement_lattice) =\n  ?b \\<iinter> ?a\n\ngoal (1 subgoal):\n 1. \\<bottom> \\<iinter> c = \\<bottom>\nvariables:\n  c :: 'a\n  (\\<iinter>) :: 'a \\<Rightarrow> 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "by fastforce"], ["", "lemma conj_not_bot: \"a \\<iinter> b \\<noteq> \\<bottom> \\<Longrightarrow> a \\<noteq> \\<bottom> \\<and> b \\<noteq> \\<bottom>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<iinter> b \\<noteq> \\<bottom> \\<Longrightarrow>\n    a \\<noteq> \\<bottom> \\<and> b \\<noteq> \\<bottom>\nvariables:\n  a, b :: 'a\n  (\\<iinter>) :: 'a \\<Rightarrow> 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "using conj_bot_right"], ["proof (prove)\nusing this:\n  (?c::'a::refinement_lattice) \\<iinter> \\<bottom> = \\<bottom>\n\ngoal (1 subgoal):\n 1. a \\<iinter> b \\<noteq> \\<bottom> \\<Longrightarrow>\n    a \\<noteq> \\<bottom> \\<and> b \\<noteq> \\<bottom>\nvariables:\n  a, b :: 'a\n  (\\<iinter>) :: 'a \\<Rightarrow> 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "by auto"], ["", "lemma conj_distrib1: \"c \\<iinter> (d\\<^sub>0 \\<iinter> d\\<^sub>1) = (c \\<iinter> d\\<^sub>0) \\<iinter> (c \\<iinter> d\\<^sub>1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c \\<iinter> (d\\<^sub>0 \\<iinter> d\\<^sub>1) =\n    c \\<iinter> d\\<^sub>0 \\<iinter> (c \\<iinter> d\\<^sub>1)\nvariables:\n  c, d\\<^sub>0, d\\<^sub>1 :: 'a\n  (\\<iinter>) :: 'a \\<Rightarrow> 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "by (metis conj_assoc conj_commute conj_idem)"], ["", "end"], ["", "subsection \\<open>Distributed weak conjunction\\<close>"], ["", "text \\<open>\n  The weak conjunction operator distributes across arbitrary non-empty infima.\n\\<close>"], ["", "locale conj_distrib = conjunction +\n  assumes Inf_conj_distrib: \"D \\<noteq> {} \\<Longrightarrow> (\\<Sqinter> D) \\<iinter> c = (\\<Sqinter>d\\<in>D. d \\<iinter> c)\"   (* 48 *)\n  (* and sup_conj_distrib: \"(c\\<^sub>0 \\<squnion> c\\<^sub>1) \\<iinter> d = (c\\<^sub>0 \\<iinter> d) \\<squnion> (c\\<^sub>1 \\<iinter> d)\"  *)       (* 49+ *)\nbegin"], ["", "lemma conj_Inf_distrib: \"D \\<noteq> {} \\<Longrightarrow> c \\<iinter> (\\<Sqinter> D) = (\\<Sqinter>d\\<in>D. c \\<iinter> d)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. D \\<noteq> {} \\<Longrightarrow>\n    c \\<iinter> \\<Sqinter> D = \\<Sqinter> ((\\<iinter>) c ` D)\nvariables:\n  c :: 'a\n  (\\<iinter>) :: 'a \\<Rightarrow> 'a \\<Rightarrow> 'a\n  D :: 'a set\ntype variables:\n  'a :: refinement_lattice", "using Inf_conj_distrib conj_commute"], ["proof (prove)\nusing this:\n  (?D::'a::refinement_lattice set) \\<noteq> {} \\<Longrightarrow>\n  \\<Sqinter> ?D \\<iinter> (?c::'a::refinement_lattice) =\n  (\\<Sqinter>d::'a::refinement_lattice\\<in>?D. d \\<iinter> ?c)\n  (?a::'a::refinement_lattice) \\<iinter> (?b::'a::refinement_lattice) =\n  ?b \\<iinter> ?a\n\ngoal (1 subgoal):\n 1. D \\<noteq> {} \\<Longrightarrow>\n    c \\<iinter> \\<Sqinter> D = \\<Sqinter> ((\\<iinter>) c ` D)\nvariables:\n  c :: 'a\n  (\\<iinter>) :: 'a \\<Rightarrow> 'a \\<Rightarrow> 'a\n  D :: 'a set\ntype variables:\n  'a :: refinement_lattice", "by auto"], ["", "lemma inf_conj_distrib: \"(c\\<^sub>0 \\<sqinter> c\\<^sub>1) \\<iinter> d = (c\\<^sub>0 \\<iinter> d) \\<sqinter> (c\\<^sub>1 \\<iinter> d)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (c\\<^sub>0 \\<sqinter> c\\<^sub>1) \\<iinter> d =\n    c\\<^sub>0 \\<iinter> d \\<sqinter> c\\<^sub>1 \\<iinter> d\nvariables:\n  c\\<^sub>0, c\\<^sub>1, d :: 'a\n  (\\<iinter>) :: 'a \\<Rightarrow> 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (c\\<^sub>0 \\<sqinter> c\\<^sub>1) \\<iinter> d =\n    c\\<^sub>0 \\<iinter> d \\<sqinter> c\\<^sub>1 \\<iinter> d\nvariables:\n  c\\<^sub>0, c\\<^sub>1, d :: 'a\n  (\\<iinter>) :: 'a \\<Rightarrow> 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "have \"(c\\<^sub>0 \\<sqinter> c\\<^sub>1) \\<iinter> d = (\\<Sqinter> {c\\<^sub>0, c\\<^sub>1}) \\<iinter> d\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (c\\<^sub>0 \\<sqinter> c\\<^sub>1) \\<iinter> d =\n    \\<Sqinter> {c\\<^sub>0, c\\<^sub>1} \\<iinter> d\nvariables:\n  c\\<^sub>0, c\\<^sub>1, d :: 'a\n  (\\<iinter>) :: 'a \\<Rightarrow> 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "by simp"], ["proof (state)\nthis:\n  ((c\\<^sub>0::'a::refinement_lattice) \\<sqinter>\n   (c\\<^sub>1::'a::refinement_lattice)) \\<iinter>\n  (d::'a::refinement_lattice) =\n  \\<Sqinter> {c\\<^sub>0, c\\<^sub>1} \\<iinter> d\n\ngoal (1 subgoal):\n 1. (c\\<^sub>0 \\<sqinter> c\\<^sub>1) \\<iinter> d =\n    c\\<^sub>0 \\<iinter> d \\<sqinter> c\\<^sub>1 \\<iinter> d\nvariables:\n  c\\<^sub>0, c\\<^sub>1, d :: 'a\n  (\\<iinter>) :: 'a \\<Rightarrow> 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "also"], ["proof (state)\nthis:\n  ((c\\<^sub>0::'a::refinement_lattice) \\<sqinter>\n   (c\\<^sub>1::'a::refinement_lattice)) \\<iinter>\n  (d::'a::refinement_lattice) =\n  \\<Sqinter> {c\\<^sub>0, c\\<^sub>1} \\<iinter> d\n\ngoal (1 subgoal):\n 1. (c\\<^sub>0 \\<sqinter> c\\<^sub>1) \\<iinter> d =\n    c\\<^sub>0 \\<iinter> d \\<sqinter> c\\<^sub>1 \\<iinter> d\nvariables:\n  c\\<^sub>0, c\\<^sub>1, d :: 'a\n  (\\<iinter>) :: 'a \\<Rightarrow> 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "have \"... = (\\<Sqinter>c \\<in> {c\\<^sub>0, c\\<^sub>1}. c \\<iinter> d)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Sqinter> {c\\<^sub>0, c\\<^sub>1} \\<iinter> d =\n    (\\<Sqinter>c::'a\\<in>{c\\<^sub>0, c\\<^sub>1}. c \\<iinter> d)\nvariables:\n  c\\<^sub>0, c\\<^sub>1, d :: 'a\n  (\\<iinter>) :: 'a \\<Rightarrow> 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "by (rule Inf_conj_distrib, simp)"], ["proof (state)\nthis:\n  \\<Sqinter> {c\\<^sub>0::'a::refinement_lattice,\n              c\\<^sub>1::'a::refinement_lattice} \\<iinter>\n  (d::'a::refinement_lattice) =\n  (\\<Sqinter>c::'a::refinement_lattice\\<in>{c\\<^sub>0, c\\<^sub>1}.\n      c \\<iinter> d)\n\ngoal (1 subgoal):\n 1. (c\\<^sub>0 \\<sqinter> c\\<^sub>1) \\<iinter> d =\n    c\\<^sub>0 \\<iinter> d \\<sqinter> c\\<^sub>1 \\<iinter> d\nvariables:\n  c\\<^sub>0, c\\<^sub>1, d :: 'a\n  (\\<iinter>) :: 'a \\<Rightarrow> 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "also"], ["proof (state)\nthis:\n  \\<Sqinter> {c\\<^sub>0::'a::refinement_lattice,\n              c\\<^sub>1::'a::refinement_lattice} \\<iinter>\n  (d::'a::refinement_lattice) =\n  (\\<Sqinter>c::'a::refinement_lattice\\<in>{c\\<^sub>0, c\\<^sub>1}.\n      c \\<iinter> d)\n\ngoal (1 subgoal):\n 1. (c\\<^sub>0 \\<sqinter> c\\<^sub>1) \\<iinter> d =\n    c\\<^sub>0 \\<iinter> d \\<sqinter> c\\<^sub>1 \\<iinter> d\nvariables:\n  c\\<^sub>0, c\\<^sub>1, d :: 'a\n  (\\<iinter>) :: 'a \\<Rightarrow> 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "have \"... = (c\\<^sub>0 \\<iinter> d) \\<sqinter> (c\\<^sub>1 \\<iinter> d)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sqinter>c::'a\\<in>{c\\<^sub>0, c\\<^sub>1}. c \\<iinter> d) =\n    c\\<^sub>0 \\<iinter> d \\<sqinter> c\\<^sub>1 \\<iinter> d\nvariables:\n  c\\<^sub>0, c\\<^sub>1, d :: 'a\n  (\\<iinter>) :: 'a \\<Rightarrow> 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "by simp"], ["proof (state)\nthis:\n  (\\<Sqinter>c::'a::refinement_lattice\\<in>{c\\<^sub>0::'a::refinement_lattice,\n      c\\<^sub>1::'a::refinement_lattice}.\n      c \\<iinter> (d::'a::refinement_lattice)) =\n  c\\<^sub>0 \\<iinter> d \\<sqinter> c\\<^sub>1 \\<iinter> d\n\ngoal (1 subgoal):\n 1. (c\\<^sub>0 \\<sqinter> c\\<^sub>1) \\<iinter> d =\n    c\\<^sub>0 \\<iinter> d \\<sqinter> c\\<^sub>1 \\<iinter> d\nvariables:\n  c\\<^sub>0, c\\<^sub>1, d :: 'a\n  (\\<iinter>) :: 'a \\<Rightarrow> 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "finally"], ["proof (chain)\npicking this:\n  ((c\\<^sub>0::'a::refinement_lattice) \\<sqinter>\n   (c\\<^sub>1::'a::refinement_lattice)) \\<iinter>\n  (d::'a::refinement_lattice) =\n  c\\<^sub>0 \\<iinter> d \\<sqinter> c\\<^sub>1 \\<iinter> d", "show ?thesis"], ["proof (prove)\nusing this:\n  ((c\\<^sub>0::'a::refinement_lattice) \\<sqinter>\n   (c\\<^sub>1::'a::refinement_lattice)) \\<iinter>\n  (d::'a::refinement_lattice) =\n  c\\<^sub>0 \\<iinter> d \\<sqinter> c\\<^sub>1 \\<iinter> d\n\ngoal (1 subgoal):\n 1. (c\\<^sub>0 \\<sqinter> c\\<^sub>1) \\<iinter> d =\n    c\\<^sub>0 \\<iinter> d \\<sqinter> c\\<^sub>1 \\<iinter> d\nvariables:\n  c\\<^sub>0, c\\<^sub>1, d :: 'a\n  (\\<iinter>) :: 'a \\<Rightarrow> 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "."], ["proof (state)\nthis:\n  ((c\\<^sub>0::'a::refinement_lattice) \\<sqinter>\n   (c\\<^sub>1::'a::refinement_lattice)) \\<iinter>\n  (d::'a::refinement_lattice) =\n  c\\<^sub>0 \\<iinter> d \\<sqinter> c\\<^sub>1 \\<iinter> d\n\ngoal:\nNo subgoals!\nvariables:\n  c\\<^sub>0, c\\<^sub>1, d :: 'a\n  (\\<iinter>) :: 'a \\<Rightarrow> 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "qed"], ["", "lemma inf_conj_product: \"(a \\<sqinter> b) \\<iinter> (c \\<sqinter> d) = (a \\<iinter> c) \\<sqinter> (a \\<iinter> d) \\<sqinter> (b \\<iinter> c) \\<sqinter> (b \\<iinter> d)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (a \\<sqinter> b) \\<iinter> (c \\<sqinter> d) =\n    a \\<iinter> c \\<sqinter> a \\<iinter> d \\<sqinter>\n    b \\<iinter> c \\<sqinter>\n    b \\<iinter> d\nvariables:\n  a, b, c, d :: 'a\n  (\\<iinter>) :: 'a \\<Rightarrow> 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "by (metis inf_conj_distrib conj_commute inf_assoc)"], ["", "lemma conj_mono: \"c\\<^sub>0 \\<sqsubseteq> d\\<^sub>0 \\<Longrightarrow> c\\<^sub>1 \\<sqsubseteq> d\\<^sub>1 \\<Longrightarrow> c\\<^sub>0 \\<iinter> c\\<^sub>1 \\<sqsubseteq> d\\<^sub>0 \\<iinter> d\\<^sub>1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>c\\<^sub>0 \\<sqsubseteq> d\\<^sub>0;\n     c\\<^sub>1 \\<sqsubseteq> d\\<^sub>1\\<rbrakk>\n    \\<Longrightarrow> c\\<^sub>0 \\<iinter> c\\<^sub>1 \\<sqsubseteq>\n                      d\\<^sub>0 \\<iinter> d\\<^sub>1\nvariables:\n  (\\<iinter>) :: 'a \\<Rightarrow> 'a \\<Rightarrow> 'a\n  c\\<^sub>0, c\\<^sub>1, d\\<^sub>0, d\\<^sub>1 :: 'a\ntype variables:\n  'a :: refinement_lattice", "by (metis inf.absorb_iff1 inf_conj_product inf_right_idem)"], ["", "lemma conj_mono_left: \"c\\<^sub>0 \\<sqsubseteq> c\\<^sub>1 \\<Longrightarrow> c\\<^sub>0 \\<iinter> d \\<sqsubseteq> c\\<^sub>1 \\<iinter> d\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c\\<^sub>0 \\<sqsubseteq> c\\<^sub>1 \\<Longrightarrow>\n    c\\<^sub>0 \\<iinter> d \\<sqsubseteq> c\\<^sub>1 \\<iinter> d\nvariables:\n  (\\<iinter>) :: 'a \\<Rightarrow> 'a \\<Rightarrow> 'a\n  c\\<^sub>0, c\\<^sub>1, d :: 'a\ntype variables:\n  'a :: refinement_lattice", "by (simp add: conj_mono)"], ["", "lemma conj_mono_right: \"c\\<^sub>0 \\<sqsubseteq> c\\<^sub>1 \\<Longrightarrow> d \\<iinter> c\\<^sub>0 \\<sqsubseteq> d \\<iinter> c\\<^sub>1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c\\<^sub>0 \\<sqsubseteq> c\\<^sub>1 \\<Longrightarrow>\n    d \\<iinter> c\\<^sub>0 \\<sqsubseteq> d \\<iinter> c\\<^sub>1\nvariables:\n  (\\<iinter>) :: 'a \\<Rightarrow> 'a \\<Rightarrow> 'a\n  c\\<^sub>0, c\\<^sub>1, d :: 'a\ntype variables:\n  'a :: refinement_lattice", "by (simp add: conj_mono)"], ["", "lemma conj_refine: \"c\\<^sub>0 \\<sqsubseteq> d \\<Longrightarrow> c\\<^sub>1 \\<sqsubseteq> d \\<Longrightarrow> c\\<^sub>0 \\<iinter> c\\<^sub>1 \\<sqsubseteq> d\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>c\\<^sub>0 \\<sqsubseteq> d; c\\<^sub>1 \\<sqsubseteq> d\\<rbrakk>\n    \\<Longrightarrow> c\\<^sub>0 \\<iinter> c\\<^sub>1 \\<sqsubseteq> d\nvariables:\n  (\\<iinter>) :: 'a \\<Rightarrow> 'a \\<Rightarrow> 'a\n  c\\<^sub>0, c\\<^sub>1, d :: 'a\ntype variables:\n  'a :: refinement_lattice", "(* law 'refine-conjunction' *)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>c\\<^sub>0 \\<sqsubseteq> d; c\\<^sub>1 \\<sqsubseteq> d\\<rbrakk>\n    \\<Longrightarrow> c\\<^sub>0 \\<iinter> c\\<^sub>1 \\<sqsubseteq> d\nvariables:\n  (\\<iinter>) :: 'a \\<Rightarrow> 'a \\<Rightarrow> 'a\n  c\\<^sub>0, c\\<^sub>1, d :: 'a\ntype variables:\n  'a :: refinement_lattice", "by (metis conj_idem conj_mono)"], ["", "lemma refine_to_conj: \"c \\<sqsubseteq> d\\<^sub>0 \\<Longrightarrow> c \\<sqsubseteq> d\\<^sub>1 \\<Longrightarrow> c \\<sqsubseteq> d\\<^sub>0 \\<iinter> d\\<^sub>1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>c \\<sqsubseteq> d\\<^sub>0; c \\<sqsubseteq> d\\<^sub>1\\<rbrakk>\n    \\<Longrightarrow> c \\<sqsubseteq> d\\<^sub>0 \\<iinter> d\\<^sub>1\nvariables:\n  (\\<iinter>) :: 'a \\<Rightarrow> 'a \\<Rightarrow> 'a\n  c, d\\<^sub>0, d\\<^sub>1 :: 'a\ntype variables:\n  'a :: refinement_lattice", "by (metis conj_idem conj_mono)"], ["", "lemma conjoin_non_aborting: \"chaos \\<sqsubseteq> c \\<Longrightarrow> d \\<sqsubseteq> d \\<iinter> c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. chaos \\<sqsubseteq> c \\<Longrightarrow> d \\<sqsubseteq> d \\<iinter> c\nvariables:\n  (\\<iinter>) :: 'a \\<Rightarrow> 'a \\<Rightarrow> 'a\n  c, chaos, d :: 'a\ntype variables:\n  'a :: refinement_lattice", "by (metis conj_mono order.refl conj_chaos)"], ["", "lemma conjunction_sup: \"c \\<iinter> d \\<sqsubseteq> c \\<squnion> d\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c \\<iinter> d \\<sqsubseteq> c \\<squnion> d\nvariables:\n  c, d :: 'a\n  (\\<iinter>) :: 'a \\<Rightarrow> 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "by (simp add: conj_refine)"], ["", "lemma conjunction_sup_nonaborting: \n  assumes \"chaos \\<sqsubseteq> c\" and \"chaos \\<sqsubseteq> d\"\n  shows \"c \\<iinter> d = c \\<squnion> d\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c \\<iinter> d = c \\<squnion> d\nvariables:\n  c, d :: 'a\n  (\\<iinter>) :: 'a \\<Rightarrow> 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "proof (rule antisym)"], ["proof (state)\ngoal (2 subgoals):\n 1. c \\<iinter> d \\<sqsubseteq> c \\<squnion> d\n 2. c \\<squnion> d \\<sqsubseteq> c \\<iinter> d\nvariables:\n  c, d :: 'a\n  (\\<iinter>) :: 'a \\<Rightarrow> 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "show \"c \\<squnion> d \\<sqsubseteq> c \\<iinter> d\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c \\<squnion> d \\<sqsubseteq> c \\<iinter> d\nvariables:\n  (\\<iinter>) :: 'a \\<Rightarrow> 'a \\<Rightarrow> 'a\n  c, d :: 'a\ntype variables:\n  'a :: refinement_lattice", "using assms(1) assms(2) conjoin_non_aborting local.conj_commute"], ["proof (prove)\nusing this:\n  chaos \\<sqsubseteq> (c::'a::refinement_lattice)\n  chaos \\<sqsubseteq> (d::'a::refinement_lattice)\n  chaos \\<sqsubseteq> (?c::'a::refinement_lattice) \\<Longrightarrow>\n  (?d::'a::refinement_lattice) \\<sqsubseteq> ?d \\<iinter> ?c\n  (?a::'a::refinement_lattice) \\<iinter> (?b::'a::refinement_lattice) =\n  ?b \\<iinter> ?a\n\ngoal (1 subgoal):\n 1. c \\<squnion> d \\<sqsubseteq> c \\<iinter> d\nvariables:\n  (\\<iinter>) :: 'a \\<Rightarrow> 'a \\<Rightarrow> 'a\n  c, d :: 'a\ntype variables:\n  'a :: refinement_lattice", "by fastforce"], ["proof (state)\nthis:\n  (c::'a::refinement_lattice) \\<squnion>\n  (d::'a::refinement_lattice) \\<sqsubseteq>\n  c \\<iinter> d\n\ngoal (1 subgoal):\n 1. c \\<iinter> d \\<sqsubseteq> c \\<squnion> d\nvariables:\n  c, d :: 'a\n  (\\<iinter>) :: 'a \\<Rightarrow> 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. c \\<iinter> d \\<sqsubseteq> c \\<squnion> d\nvariables:\n  c, d :: 'a\n  (\\<iinter>) :: 'a \\<Rightarrow> 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "show \"c \\<iinter> d \\<sqsubseteq> c \\<squnion> d\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c \\<iinter> d \\<sqsubseteq> c \\<squnion> d\nvariables:\n  c, d :: 'a\n  (\\<iinter>) :: 'a \\<Rightarrow> 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "by (metis conjunction_sup)"], ["proof (state)\nthis:\n  (c::'a::refinement_lattice) \\<iinter>\n  (d::'a::refinement_lattice) \\<sqsubseteq>\n  c \\<squnion> d\n\ngoal:\nNo subgoals!\nvariables:\n  c, d :: 'a\n  (\\<iinter>) :: 'a \\<Rightarrow> 'a \\<Rightarrow> 'a\ntype variables:\n  'a :: refinement_lattice", "qed"], ["", "lemma conjoin_top: \"chaos \\<sqsubseteq> c \\<Longrightarrow> c \\<iinter> \\<top> = \\<top>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. chaos \\<sqsubseteq> c \\<Longrightarrow> c \\<iinter> \\<top> = \\<top>\nvariables:\n  (\\<iinter>) :: 'a \\<Rightarrow> 'a \\<Rightarrow> 'a\n  c, chaos :: 'a\ntype variables:\n  'a :: refinement_lattice", "by (simp add: conjunction_sup_nonaborting)"], ["", "end"], ["", "end"]]}