{"file_name": "/home/qj213/afp-2021-10-22/thys/DiscretePricing/Fair_Price.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/DiscretePricing", "problem_names": ["lemma (in prob_space) finite_borel_measurable_integrable:\n  assumes \"f\\<in> borel_measurable M\"\n  and \"finite (f`(space M))\"\n  shows \"integrable M f\"", "lemma AE_eq_trans[trans]:\n  assumes \"AE x in M. A x = B x\"\n  and \"AE x in M. B x = C x\"\n  shows \"AE x in M. A x = C x\"", "lemma AE_add:\n  assumes \"AE w in M. f w = g w\"\n  and \"AE w in M. f' w = g' w\"\nshows \"AE w in M. f w + f' w = g w + g' w\"", "lemma AE_sum:\n  assumes \"finite I\"\n  and  \"\\<forall> i\\<in>I. AE w in M. f i w = g i w\"\n  shows \"AE w in M. (\\<Sum>i\\<in> I. f i w) = (\\<Sum>i\\<in> I. g i w)\"", "lemma AE_eq_cst:\n  assumes \"AE w in M. (\\<lambda>w. c) w = (\\<lambda>w. d) w\"\n  and \"emeasure M (space M) \\<noteq> 0\"\n  shows \"c = d\"", "lemma (in prob_space) subalgebra_sigma_finite:\n  assumes \"subalgebra M N\"\n  shows \"sigma_finite_subalgebra M N\"", "lemma (in prob_space) trivial_subalg_cond_expect_AE:\n  assumes \"subalgebra M N\"\n  and \"sets N = {{}, space M}\"\n  and \"integrable M f\"\nshows \"AE x in M. real_cond_exp M N f x = (\\<lambda>x. expectation f) x\"", "lemma (in prob_space) triv_subalg_borel_eq:\n  assumes \"subalgebra M F\"\n  and \"sets F = {{}, space M}\"\n  and \"AE x in M. f x = (c::'b::{t2_space})\"\n  and \"f\\<in> borel_measurable F\"\nshows \"\\<forall>x\\<in> space M. f x = c\"", "lemma (in prob_space) trivial_subalg_cond_expect_eq:\n  assumes \"subalgebra M N\"\n  and \"sets N = {{}, space M}\"\n  and \"integrable M f\"\nshows \"\\<forall>x\\<in> space M. real_cond_exp M N f x = expectation f\"", "lemma (in sigma_finite_subalgebra) real_cond_exp_cong':\n  assumes \"\\<forall>w \\<in> space M. f w = g w\"\n  and \"f\\<in> borel_measurable M\"\nshows \"AE w in M. real_cond_exp M F f w = real_cond_exp M F g w\"", "lemma (in sigma_finite_subalgebra) real_cond_exp_bsum :\n  fixes f::\"'b \\<Rightarrow> 'a \\<Rightarrow> real\"\n  assumes [measurable]: \"\\<And>i. i\\<in>I \\<Longrightarrow> integrable M (f i)\"\n  shows \"AE x in M. real_cond_exp M F (\\<lambda>x. \\<Sum>i\\<in>I. f i x) x = (\\<Sum>i\\<in>I. real_cond_exp M F (f i) x)\"", "lemma prices_of:\n  shows \"prices (discrete_market_of S A) = A\"", "lemma stocks_of:\n  assumes \"UNIV \\<noteq> S\"\n  shows \"stocks (discrete_market_of S A) = S\"", "lemma mkt_stocks_assets:\n  shows \"stk_strict_subs (stocks Mkt)\"", "lemma qty_empty_support_set:\n  shows \"support_set qty_empty = {}\"", "lemma sum_support_set:\n  shows \"support_set (qty_sum pf1 pf2) \\<subseteq> (support_set pf1) \\<union> (support_set pf2)\"", "lemma mult_comp_support_set:\nshows \"support_set (qty_mult_comp pf1 qty) \\<subseteq> (support_set pf1)\"", "lemma remove_comp_support_set:\nshows \"support_set (qty_rem_comp pf1 x) \\<subseteq> ((support_set pf1) - {x})\"", "lemma replace_comp_support_set:\n  shows \"support_set (qty_replace_comp pf1 x pf2) \\<subseteq> (support_set pf1 - {x}) \\<union> support_set pf2\"", "lemma single_comp_support:\n  shows \"support_set (qty_single asset qty) \\<subseteq> {asset}\"", "lemma single_comp_nz_support:\n  assumes \"\\<exists> n w. qty n w\\<noteq> 0\"\n  shows \"support_set (qty_single asset qty) = {asset}\"", "lemma sum_portfolio:\n  assumes \"portfolio pf1\"\n  and \"portfolio pf2\"\nshows \"portfolio (qty_sum pf1 pf2)\"", "lemma sum_basic_support_set:\n  assumes \"stock_portfolio Mkt pf1\"\n  and \"stock_portfolio Mkt pf2\"\nshows \"stock_portfolio Mkt (qty_sum pf1 pf2)\"", "lemma mult_comp_portfolio:\n  assumes \"portfolio pf1\"\nshows \"portfolio (qty_mult_comp pf1 qty)\"", "lemma mult_comp_basic_support_set:\n  assumes \"stock_portfolio Mkt pf1\"\nshows \"stock_portfolio Mkt (qty_mult_comp pf1 qty)\"", "lemma remove_comp_portfolio:\n  assumes \"portfolio pf1\"\nshows \"portfolio (qty_rem_comp pf1 x)\"", "lemma remove_comp_basic_support_set:\n  assumes \"stock_portfolio Mkt pf1\"\nshows \"stock_portfolio Mkt (qty_mult_comp pf1 qty)\"", "lemma replace_comp_portfolio:\n  assumes \"portfolio pf1\"\n  and \"portfolio pf2\"\nshows \"portfolio (qty_replace_comp pf1 x pf2)\"", "lemma replace_comp_stocks:\n  assumes \"support_set pf1 \\<subseteq> stocks Mkt \\<union> {x}\"\n  and \"support_set pf2 \\<subseteq> stocks Mkt\"\nshows \"support_set (qty_replace_comp pf1 x pf2) \\<subseteq> stocks Mkt\"", "lemma single_comp_portfolio:\n  shows \"portfolio (qty_single asset qty)\"", "lemma subset_val_process':\n  assumes \"finite A\"\n  and \"support_set p \\<subseteq> A\"\nshows \"val_process Mkt p n w = (sum (\\<lambda>x. ((prices Mkt) x n w) * (p x (Suc n) w)) A)\"", "lemma sum_val_process:\n  assumes \"portfolio pf1\"\n  and \"portfolio pf2\"\nshows \"\\<forall>n w. val_process Mkt (qty_sum pf1 pf2) n w = (val_process Mkt pf1) n w + (val_process Mkt pf2) n w\"", "lemma mult_comp_val_process:\n  assumes \"portfolio pf1\"\nshows \"\\<forall>n w. val_process Mkt (qty_mult_comp pf1 qty) n w = ((val_process Mkt pf1) n w) * (qty (Suc n) w)\"", "lemma remove_comp_values:\n  assumes \"x \\<noteq> y\"\n  shows \"\\<forall>n w. pf1 x n w = (qty_rem_comp pf1 y) x n w\"", "lemma remove_comp_val_process:\n  assumes \"portfolio pf1\"\nshows \"\\<forall>n w. val_process Mkt (qty_rem_comp pf1 y) n w = ((val_process Mkt pf1) n w) - (prices Mkt y n w)* (pf1 y (Suc n) w)\"", "lemma replace_comp_val_process:\n  assumes \"\\<forall>n w. prices Mkt x n w = val_process Mkt pf2 n w\"\n  and \"portfolio pf1\"\n  and \"portfolio pf2\"\n  shows \"\\<forall>n w. val_process Mkt (qty_replace_comp pf1 x pf2) n w = val_process Mkt pf1 n w\"", "lemma qty_single_val_process:\nshows \"val_process Mkt (qty_single asset qty) n w =\n    prices Mkt asset n w * qty (Suc n) w\"", "lemma (in disc_filtr_prob_space) quantity_adapted:\n  assumes \"\\<forall> asset \\<in> support_set p. p asset (Suc n) \\<in> borel_measurable (F n)\"\n  \"\\<forall>asset \\<in> support_set p. prices Mkt asset n \\<in> borel_measurable (F n)\"\nshows \"val_process Mkt p n \\<in> borel_measurable (F n)\"", "lemma (in disc_filtr_prob_space) trading_strategy_adapted:\n  assumes \"trading_strategy p\"\n  and \"support_adapt Mkt p\"\n  shows \"borel_adapt_stoch_proc F (val_process Mkt p)\"", "lemma (in disc_equity_market) ats_val_process_adapted:\n  assumes \"trading_strategy p\"\nand \"support_adapt Mkt p\"\n  shows \"borel_adapt_stoch_proc F (val_process Mkt p)\"", "lemma (in disc_equity_market) trading_strategy_init:\n  assumes \"trading_strategy p\"\nand \"support_adapt Mkt p\"\n  shows \"\\<exists>c. \\<forall>w \\<in> space M. val_process Mkt p 0 w = c\"", "lemma (in disc_equity_market) initial_valueI:\n  assumes \"trading_strategy pf\"\nand \"support_adapt Mkt pf\"\n  shows \"\\<forall>w\\<in> space M. val_process Mkt pf 0 w = initial_value pf\"", "lemma (in disc_equity_market) inc_predict_support_trading_strat:\n  assumes \"trading_strategy pf1\"\n  shows \"\\<forall> asset \\<in> support_set pf1 \\<union> B. borel_predict_stoch_proc F (pf1 asset)\"", "lemma (in disc_equity_market) inc_predict_support_trading_strat':\n  assumes \"trading_strategy pf1\"\n  and \"asset \\<in> support_set pf1\\<union> B\"\n  shows \"borel_predict_stoch_proc F (pf1 asset)\"", "lemma (in disc_equity_market) inc_support_trading_strat:\n  assumes \"trading_strategy pf1\"\n  shows \"\\<forall> asset \\<in> support_set pf1 \\<union> B. borel_adapt_stoch_proc F (pf1 asset)\"", "lemma (in disc_equity_market) qty_empty_trading_strat:\n  shows \"trading_strategy qty_empty\"", "lemma (in disc_equity_market) sum_trading_strat:\n  assumes \"trading_strategy pf1\"\n  and \"trading_strategy pf2\"\nshows \"trading_strategy (qty_sum pf1 pf2)\"", "lemma (in disc_equity_market) mult_comp_trading_strat:\n  assumes \"trading_strategy pf1\"\n  and \"borel_predict_stoch_proc F qty\"\nshows \"trading_strategy (qty_mult_comp pf1 qty)\"", "lemma (in disc_equity_market) remove_comp_trading_strat:\n  assumes \"trading_strategy pf1\"\nshows \"trading_strategy (qty_rem_comp pf1 x)\"", "lemma (in disc_equity_market) replace_comp_trading_strat:\n  assumes \"trading_strategy pf1\"\n  and \"trading_strategy pf2\"\nshows \"trading_strategy (qty_replace_comp pf1 x pf2)\"", "lemma (in disc_filtr_prob_space) quantity_updated_borel:\n  assumes \"\\<forall>n. \\<forall> asset \\<in> support_set p. p asset (Suc n) \\<in> borel_measurable (F n)\"\nand \"\\<forall>n. \\<forall>asset \\<in> support_set p. prices Mkt asset n \\<in> borel_measurable (F n)\"\nshows \"\\<forall>n. cls_val_process Mkt p n \\<in> borel_measurable (F n)\"", "lemma (in disc_equity_market) cls_val_process_adapted:\n  assumes \"trading_strategy p\"\nand \"support_adapt Mkt p\"\n  shows \"borel_adapt_stoch_proc F (cls_val_process Mkt p)\"", "lemma subset_cls_val_process:\n  assumes \"finite A\"\n  and \"support_set p \\<subseteq> A\"\nshows \"\\<forall>n w. cls_val_process Mkt p (Suc n) w = (sum (\\<lambda>x. ((prices Mkt) x (Suc n) w) * (p x (Suc n) w)) A)\"", "lemma subset_cls_val_process':\n  assumes \"finite A\"\n  and \"support_set p \\<subseteq> A\"\nshows \"cls_val_process Mkt p (Suc n) w = (sum (\\<lambda>x. ((prices Mkt) x (Suc n) w) * (p x (Suc n) w)) A)\"", "lemma sum_cls_val_process_Suc:\n  assumes \"portfolio pf1\"\n  and \"portfolio pf2\"\nshows \"\\<forall>n w. cls_val_process Mkt (qty_sum pf1 pf2) (Suc n) w =\n  (cls_val_process Mkt pf1) (Suc n) w + (cls_val_process Mkt pf2) (Suc n) w\"", "lemma sum_cls_val_process0:\n  assumes \"portfolio pf1\"\n  and \"portfolio pf2\"\nshows \"\\<forall>w. cls_val_process Mkt (qty_sum pf1 pf2) 0 w =\n  (cls_val_process Mkt pf1) 0 w + (cls_val_process Mkt pf2) 0 w\"", "lemma sum_cls_val_process:\n  assumes \"portfolio pf1\"\n  and \"portfolio pf2\"\nshows \"\\<forall>n w. cls_val_process Mkt (qty_sum pf1 pf2) n w =\n  (cls_val_process Mkt pf1) n w + (cls_val_process Mkt pf2) n w\"", "lemma mult_comp_cls_val_process0:\n  assumes \"portfolio pf1\"\n  shows \"\\<forall>w. cls_val_process Mkt (qty_mult_comp pf1 qty) 0 w =\n  ((cls_val_process Mkt pf1) 0 w) * (qty (Suc 0) w)\"", "lemma mult_comp_cls_val_process_Suc:\n  assumes \"portfolio pf1\"\n  shows \"\\<forall>n w. cls_val_process Mkt (qty_mult_comp pf1 qty) (Suc n) w =\n  ((cls_val_process Mkt pf1) (Suc n) w) * (qty (Suc n) w)\"", "lemma remove_comp_cls_val_process0:\n  assumes \"portfolio pf1\"\n  shows \"\\<forall>w. cls_val_process Mkt (qty_rem_comp pf1 y) 0 w =\n  ((cls_val_process Mkt pf1) 0 w) - (prices Mkt y 0 w)* (pf1 y (Suc 0) w)\"", "lemma remove_comp_cls_val_process_Suc:\n  assumes \"portfolio pf1\"\n  shows \"\\<forall>n w. cls_val_process Mkt (qty_rem_comp pf1 y) (Suc n) w =\n  ((cls_val_process Mkt pf1) (Suc n) w) - (prices Mkt y (Suc n) w)* (pf1 y (Suc n) w)\"", "lemma replace_comp_cls_val_process0:\n  assumes \"\\<forall>w. prices Mkt x 0 w = cls_val_process Mkt pf2 0 w\"\n  and \"portfolio pf1\"\n  and \"portfolio pf2\"\nshows \"\\<forall>w. cls_val_process Mkt (qty_replace_comp pf1 x pf2) 0 w = cls_val_process Mkt pf1 0 w\"", "lemma replace_comp_cls_val_process_Suc:\n  assumes \"\\<forall>n w. prices Mkt x (Suc n) w = cls_val_process Mkt pf2 (Suc n) w\"\n  and \"portfolio pf1\"\n  and \"portfolio pf2\"\n  shows \"\\<forall>n w. cls_val_process Mkt (qty_replace_comp pf1 x pf2) (Suc n) w = cls_val_process Mkt pf1 (Suc n) w\"", "lemma replace_comp_cls_val_process:\n  assumes \"\\<forall>n w. prices Mkt x n w = cls_val_process Mkt pf2 n w\"\n  and \"portfolio pf1\"\n  and \"portfolio pf2\"\n  shows \"\\<forall>n w. cls_val_process Mkt (qty_replace_comp pf1 x pf2) n w = cls_val_process Mkt pf1 n w\"", "lemma qty_single_updated:\n  shows \"cls_val_process Mkt (qty_single asset qty) (Suc n) w =\n    prices Mkt asset (Suc n) w * qty (Suc n) w\"", "lemma self_financingE:\n  assumes \"self_financing Mkt p\"\n  shows \"\\<forall>n. val_process Mkt p n = cls_val_process Mkt p n\"", "lemma static_portfolio_self_financing:\n  assumes \"\\<forall> x \\<in> support_set p. (\\<forall>w i. p x i w = p x (Suc i) w)\"\n  shows \"self_financing Mkt p\"", "lemma sum_self_financing:\n  assumes \"portfolio pf1\"\n  and \"portfolio pf2\"\n  and \"self_financing Mkt pf1\"\n  and \"self_financing Mkt pf2\"\nshows \"self_financing Mkt (qty_sum pf1 pf2)\"", "lemma mult_time_constant_self_financing:\n  assumes \"portfolio pf1\"\n  and \"self_financing Mkt pf1\"\n  and \"\\<forall>n w. qty n w = qty (Suc n) w\"\nshows \"self_financing Mkt (qty_mult_comp pf1 qty)\"", "lemma replace_comp_self_financing:\n  assumes \"\\<forall>n w. prices Mkt x n w = cls_val_process Mkt pf2 n w\"\n  and \"portfolio pf1\"\n  and \"portfolio pf2\"\n  and \"self_financing Mkt pf1\"\n  and \"self_financing Mkt pf2\"\nshows \"self_financing Mkt (qty_replace_comp pf1 x pf2)\"", "lemma (in disc_equity_market) remaining_qty_predict':\n  assumes \"borel_adapt_stoch_proc F (prices Mkt asset)\"\n  and \"trading_strategy pf\"\nand \"support_adapt Mkt pf\"\nshows \"remaining_qty Mkt v pf asset (Suc n) \\<in> borel_measurable (F n)\"", "lemma (in disc_equity_market) remaining_qty_predict:\n  assumes \"borel_adapt_stoch_proc F (prices Mkt asset)\"\n  and \"trading_strategy pf\"\nand \"support_adapt Mkt pf\"\nshows \"borel_predict_stoch_proc F (remaining_qty Mkt v pf asset)\"", "lemma (in disc_equity_market) remaining_qty_adapt:\n  assumes \"borel_adapt_stoch_proc F (prices Mkt asset)\"\n  and \"trading_strategy pf\"\nand \"support_adapt Mkt pf\"\nshows \"remaining_qty Mkt v pf asset n \\<in> borel_measurable (F n)\"", "lemma (in disc_equity_market) remaining_qty_adapted:\n  assumes \"borel_adapt_stoch_proc F (prices Mkt asset)\"\n  and \"trading_strategy pf\"\nand \"support_adapt Mkt pf\"\nshows \"borel_adapt_stoch_proc F (remaining_qty Mkt v pf asset)\"", "lemma self_finance_portfolio:\n  assumes \"portfolio pf\"\nshows \"portfolio (self_finance Mkt v pf asset)\"", "lemma self_finance_init:\n  assumes \"\\<forall>w. prices Mkt asset 0 w \\<noteq> 0\"\n  and \"portfolio pf\"\nshows \"val_process Mkt (self_finance Mkt v pf asset) 0 w = v\"", "lemma self_finance_succ:\n  assumes \"prices Mkt asset (Suc n) w \\<noteq> 0\"\n  and \"portfolio pf\"\nshows \"val_process Mkt (self_finance Mkt v pf asset) (Suc n) w = prices Mkt asset (Suc n) w * remaining_qty Mkt v pf asset (Suc n) w +\n  cls_val_process Mkt pf (Suc n) w\"", "lemma self_finance_updated:\n  assumes \"prices Mkt asset (Suc n) w \\<noteq> 0\"\n  and \"portfolio pf\"\nshows \"cls_val_process Mkt (self_finance Mkt v pf asset) (Suc n) w =\n  cls_val_process Mkt pf (Suc n) w + prices Mkt asset (Suc n) w * (remaining_qty Mkt v pf asset) (Suc n) w\"", "lemma self_finance_charact:\n  assumes \"\\<forall> n w. prices Mkt asset (Suc n) w \\<noteq> 0\"\n  and \"portfolio pf\"\nshows \"self_financing Mkt (self_finance Mkt v pf asset)\"", "lemma (in disc_filtr_prob_space) price_structure_init:\n  assumes \"price_structure pyf T \\<pi> pr\"\n  shows \"\\<forall> w\\<in> space M. pr 0 w = \\<pi>\"", "lemma (in disc_filtr_prob_space) price_structure_borel_measurable:\n  assumes \"price_structure pyf T \\<pi> pr\"\n  shows \"pr T \\<in> borel_measurable (F T)\"", "lemma (in disc_filtr_prob_space) price_structure_maturity:\n  assumes \"price_structure pyf T \\<pi> pr\"\n  shows \"AE w in M. pr T w = pyf w\"", "lemma (in disc_equity_market) replicating_price_process:\n  assumes \"replicating_portfolio pf der matur\"\nand \"support_adapt Mkt pf\"\n  shows \"price_structure der matur (initial_value pf) (cls_val_process Mkt pf)\"", "lemma (in disc_filtr_prob_space) arbitrage_processE:\n  assumes \"arbitrage_process Mkt p\"\n  shows \"(\\<exists> m. (self_financing Mkt p) \\<and> (trading_strategy p) \\<and>\n    (\\<forall>w \\<in> space M. cls_val_process Mkt p 0 w = 0) \\<and>\n    (AE w in M. 0 \\<le> cls_val_process Mkt p m w) \\<and>\n    0 < \\<P>(w in M. cls_val_process Mkt p m w > 0))\"", "lemma (in disc_filtr_prob_space) arbitrage_processI:\n  assumes \"(\\<exists> m. (self_financing Mkt p) \\<and> (trading_strategy p) \\<and>\n    (\\<forall>w \\<in> space M. cls_val_process Mkt p 0 w = 0) \\<and>\n    (AE w in M. 0 \\<le> cls_val_process Mkt p m w) \\<and>\n    0 < \\<P>(w in M. cls_val_process Mkt p m w > 0))\"\n  shows \"arbitrage_process Mkt p\"", "lemma (in disc_filtr_prob_space) arbitrage_val_process:\n  assumes \"arbitrage_process Mkt pf1\"\n  and \"self_financing Mkt pf2\"\n  and \"trading_strategy pf2\"\n  and \"\\<forall> n w. cls_val_process Mkt pf1 n w = cls_val_process Mkt pf2 n w\"\nshows \"arbitrage_process Mkt pf2\"", "lemma coincides_val_process:\n  assumes \"coincides_on Mkt Mkt2 A\"\n  and \"support_set pf \\<subseteq> A\"\n  shows \"\\<forall>n w. val_process Mkt pf n w = val_process Mkt2 pf n w\"", "lemma coincides_cls_val_process':\n  assumes \"coincides_on Mkt Mkt2 A\"\n  and \"support_set pf \\<subseteq> A\"\n  shows \"\\<forall>n w. cls_val_process Mkt pf (Suc n) w = cls_val_process Mkt2 pf (Suc n) w\"", "lemma coincides_cls_val_process:\n  assumes \"coincides_on Mkt Mkt2 A\"\n  and \"support_set pf \\<subseteq> A\"\n  shows \"\\<forall>n w. cls_val_process Mkt pf n w = cls_val_process Mkt2 pf n w\"", "lemma (in disc_filtr_prob_space) coincides_on_self_financing:\n  assumes \"coincides_on Mkt Mkt2 A\"\n  and \"support_set p \\<subseteq> A\"\n  and \"self_financing Mkt p\"\nshows \"self_financing Mkt2 p\"", "lemma (in disc_filtr_prob_space) coincides_on_arbitrage:\n  assumes \"coincides_on Mkt Mkt2 A\"\n  and \"support_set p \\<subseteq> A\"\n  and \"arbitrage_process Mkt p\"\nshows \"arbitrage_process Mkt2 p\"", "lemma (in disc_filtr_prob_space) coincides_on_stocks_viable:\n  assumes \"coincides_on Mkt Mkt2 (stocks Mkt)\"\n  and \"viable_market Mkt\"\nshows \"viable_market Mkt2\"", "lemma coincides_stocks_val_process:\n  assumes \"stock_portfolio Mkt pf\"\n  and \"coincides_on Mkt Mkt2 (stocks Mkt)\"\nshows \"\\<forall>n w. val_process Mkt pf n w = val_process Mkt2 pf n w\"", "lemma coincides_stocks_cls_val_process:\n  assumes \"stock_portfolio Mkt pf\"\n  and \"coincides_on Mkt Mkt2 (stocks Mkt)\"\nshows \"\\<forall>n w. cls_val_process Mkt pf n w = cls_val_process Mkt2 pf n w\"", "lemma (in disc_filtr_prob_space) coincides_on_adapted_val_process:\n  assumes \"coincides_on Mkt Mkt2 A\"\n  and \"support_set p \\<subseteq> A\"\n  and \"borel_adapt_stoch_proc F (val_process Mkt p)\"\nshows \"borel_adapt_stoch_proc F (val_process Mkt2 p)\"", "lemma (in disc_filtr_prob_space) coincides_on_adapted_cls_val_process:\n  assumes \"coincides_on Mkt Mkt2 A\"\n  and \"support_set p \\<subseteq> A\"\n  and \"borel_adapt_stoch_proc F (cls_val_process Mkt p)\"\nshows \"borel_adapt_stoch_proc F (cls_val_process Mkt2 p)\"", "lemma (in disc_filtr_prob_space) fair_priceI:\n  assumes \"fair_price Mkt \\<pi> pyf matur\"\n  shows \"(\\<exists> pr. price_structure pyf matur \\<pi> pr \\<and>\n    (\\<forall> x. (x\\<notin> stocks Mkt \\<longrightarrow>\n      (\\<forall> Mkt2 p. (coincides_on Mkt Mkt2 (stocks Mkt)) \\<and> (prices Mkt2 x = pr) \\<and> portfolio p \\<and> support_set p \\<subseteq> stocks Mkt \\<union> {x} \\<longrightarrow>\n        \\<not> arbitrage_process Mkt2 p))))\"", "lemma (in disc_equity_market) replicating_fair_price:\n  assumes \"viable_market Mkt\"\n  and \"replicating_portfolio pf der matur\"\nand \"support_adapt Mkt pf\"\nshows \"fair_price Mkt (initial_value pf) der matur\"", "lemma (in disc_market_pos_stock) pos_stock_borel_adapted:\n  shows \"borel_adapt_stoch_proc F (prices Mkt pos_stock)\"", "lemma (in disc_filtr_prob_space) static_quantities_trading_strat:\n  assumes \"static_quantities p\"\n  and \"finite (support_set p)\"\n  shows \"trading_strategy p\"", "lemma two_component_support_set:\n  assumes \"\\<exists> n w. a n w \\<noteq> 0\"\n  and \"\\<exists> n w. b n w\\<noteq> 0\"\n  and \"x \\<noteq> y\"\nshows \"support_set ((\\<lambda> (x::'b) (n::nat) (w::'a). 0::real)(x:= a, y:= b)) = {x,y}\"", "lemma two_component_val_process:\n  assumes \"arb_pf = ((\\<lambda> (x::'b) (n::nat) (w::'a). 0::real)(x:= a, y:= b))\"\n  and \"portfolio arb_pf\"\n  and \"x \\<noteq> y\"\n  and \"\\<exists> n w. a n w \\<noteq> 0\"\n  and \"\\<exists> n w. b n w\\<noteq> 0\"\n  shows \"val_process Mkt arb_pf n w =\n    prices Mkt y n w * b (Suc n) w + prices Mkt x n w * a (Suc n) w\"", "lemma quantity_update_support_set:\n  assumes \"\\<exists>n w. pr n w \\<noteq> 0\"\n  and \"x\\<notin> support_set p\"\nshows \"support_set (p(x:=pr)) = support_set p \\<union> {x}\"", "lemma fix_asset_price:\n  shows \"\\<exists>x Mkt2. x \\<notin> stocks Mkt \\<and>\n  coincides_on Mkt Mkt2 (stocks Mkt) \\<and>\n  prices Mkt2 x = pr\"", "lemma (in disc_market_pos_stock) arbitrage_portfolio_properties:\n  assumes \"price_structure der matur \\<pi> pr\"\n  and \"replicating_portfolio pf der matur\"\n  and  \"(coincides_on Mkt Mkt2 (stocks Mkt))\"\n  and \"(prices Mkt2 x = pr)\"\n  and \"x\\<notin> stocks Mkt\"\n  and \"diff_inv = (\\<pi> - initial_value pf) / constant_image (prices Mkt pos_stock 0)\"\n  and \"diff_inv \\<noteq> 0\"\n  and \"arb_pf = (\\<lambda> (x::'b) (n::nat) (w::'a). 0::real)(x:= (\\<lambda> n w. -1), pos_stock := (\\<lambda> n w. diff_inv))\"\n  and \"contr_pf = qty_sum arb_pf pf\"\nshows \"self_financing Mkt2 contr_pf\"\n  and \"trading_strategy contr_pf\"\n  and \"\\<forall>w\\<in> space M. cls_val_process Mkt2 contr_pf 0 w = 0\"\n  and \"0 < diff_inv \\<longrightarrow> (AE w in M. 0 < cls_val_process Mkt2 contr_pf matur w)\"\n  and \"diff_inv < 0 \\<longrightarrow> (AE w in M. 0 > cls_val_process Mkt2 contr_pf matur w)\"\n  and \"support_set arb_pf = {x, pos_stock}\"\n  and \"portfolio contr_pf\"", "lemma (in disc_equity_market) mult_comp_cls_val_process_measurable':\n  assumes \"cls_val_process Mkt2 pf n \\<in>borel_measurable (F n)\"\n  and \"portfolio pf\"\n  and \"qty n \\<in> borel_measurable (F n)\"\n  and \"0 \\<noteq> n\"\nshows \"cls_val_process Mkt2 (qty_mult_comp pf qty) n \\<in> borel_measurable (F n)\"", "lemma (in disc_equity_market) mult_comp_cls_val_process_measurable:\n  assumes \"\\<forall>n. cls_val_process Mkt2 pf n \\<in>borel_measurable (F n)\"\n  and \"portfolio pf\"\n  and \"\\<forall>n. qty (Suc n) \\<in> borel_measurable (F n)\"\nshows \"\\<forall>n. cls_val_process Mkt2 (qty_mult_comp pf qty) n \\<in> borel_measurable (F n)\"", "lemma (in disc_equity_market) mult_comp_val_process_measurable:\n  assumes \"val_process Mkt2 pf n \\<in>borel_measurable (F n)\"\n  and \"portfolio pf\"\n  and \"qty (Suc n) \\<in> borel_measurable (F n)\"\nshows \"val_process Mkt2 (qty_mult_comp pf qty) n \\<in> borel_measurable (F n)\"", "lemma (in disc_market_pos_stock) repl_fair_price_unique:\n  assumes \"replicating_portfolio pf der matur\"\n  and \"fair_price Mkt \\<pi> der matur\"\nshows \"\\<pi> = initial_value pf\"", "lemma disc_rfr_proc_borel_measurable:\n  shows \"(disc_rfr_proc r) n \\<in> borel_measurable M\"", "lemma disc_rfr_proc_nonrandom:\n  fixes r::real\n  shows \"\\<And>n. disc_rfr_proc r n \\<in> borel_measurable (F 0)\"", "lemma (in disc_equity_market) disc_rfr_constant_time:\nshows \"\\<exists>c. \\<forall>w \\<in> space (F 0).  (disc_rfr_proc r n) w = c\"", "lemma (in disc_filtr_prob_space) disc_rfr_proc_borel_adapted:\n  shows \"borel_adapt_stoch_proc F (disc_rfr_proc r)\"", "lemma disc_rfr_proc_positive:\n  assumes \"-1 < r\"\n  shows \"\\<And>n w . 0 < disc_rfr_proc r n w\"", "lemma (in prob_space) disc_rfr_constant_time_pos:\n  assumes \"-1 < r\"\nshows \"\\<exists>c > 0. \\<forall>w \\<in> space M.  (disc_rfr_proc r n) w = c\"", "lemma  disc_rfr_proc_Suc_div:\n  assumes \"-1 < r\"\n  shows \"\\<And>w. disc_rfr_proc r (Suc n) w/disc_rfr_proc r n w = 1+r\"", "lemma discount_factor_times_rfr:\n  assumes \"-1 < r\"\n  shows \"(1+r) * discount_factor r (Suc n) w = discount_factor r n w\"", "lemma discount_factor_borel_measurable:\n  shows \"discount_factor r n \\<in> borel_measurable M\"", "lemma discount_factor_init:\n  shows \"discount_factor r 0 = (\\<lambda>w. 1)\"", "lemma discount_factor_nonrandom:\n  shows \"discount_factor r n \\<in> borel_measurable M\"", "lemma discount_factor_positive:\n  assumes \"-1 < r\"\n  shows \"\\<And>n w . 0 < discount_factor r n w\"", "lemma (in prob_space) discount_factor_constant_time_pos:\n  assumes \"-1 < r\"\nshows \"\\<exists>c > 0. \\<forall>w \\<in> space M.  (discount_factor r n) w = c\"", "lemma (in rfr_disc_equity_market) discounted_rfr:\n  shows \"discounted_value r (prices Mkt risk_free_asset) n w = 1\"", "lemma  discounted_init:\n  shows \"\\<forall>w. discounted_value r X 0 w = X 0 w\"", "lemma  discounted_mult:\n  shows \"\\<forall>n w. discounted_value r (\\<lambda>m x. X m x * Y m x) n w = X n w * (discounted_value r Y) n w\"", "lemma  discounted_mult':\n  shows \"discounted_value r (\\<lambda>m x. X m x * Y m x) n w = X n w * (discounted_value r Y) n w\"", "lemma discounted_mult_times_rfr:\n  assumes \"-1 < r\"\n  shows \"discounted_value r (\\<lambda>m w. (1+r) * X w) (Suc n) w = discounted_value r (\\<lambda>m w. X w) n w\"", "lemma discounted_cong:\n  assumes \"\\<forall>n w. X n w = Y n w\"\n  shows \"\\<forall> n w. discounted_value r X n w = discounted_value r Y n w\"", "lemma  discounted_cong':\n  assumes \"X n w = Y n w\"\n  shows \"discounted_value r X n w = discounted_value r Y n w\"", "lemma discounted_AE_cong:\n  assumes \"AE w in N. X n w = Y n w\"\n  shows \"AE w in N. discounted_value r X n w = discounted_value r Y n w\"", "lemma discounted_sum:\n  assumes \"finite I\"\nshows \"\\<forall>n w. (\\<Sum> i\\<in> I. (discounted_value r (\\<lambda>m x. f i m x)) n w) = (discounted_value r (\\<lambda>m x. (\\<Sum>i\\<in> I. f i m x)) n w)\"", "lemma  discounted_adapted:\n  assumes \"borel_adapt_stoch_proc F X\"\n  shows \"borel_adapt_stoch_proc F (discounted_value r X)\"", "lemma discounted_measurable:\n  assumes \"X\\<in> borel_measurable N\"\n  shows \"discounted_value r (\\<lambda>m. X) m \\<in> borel_measurable N\"", "lemma (in prob_space) discounted_integrable:\n  assumes \"integrable N (X n)\"\n  and \"-1 < r\"\n  and \"space N = space M\"\n  shows \"integrable N (discounted_value r X n)\"", "lemma integrable_val_process:\n  assumes \"\\<forall> asset \\<in> support_set pf. integrable M (\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w)\"\n  shows \"integrable M (val_process Mkt pf n)\"", "lemma integrable_self_fin_uvp:\n  assumes \"\\<forall> asset \\<in> support_set pf. integrable M (\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w)\"\n  and \"self_financing Mkt pf\"\nshows \"integrable M (cls_val_process Mkt pf n)\"", "lemma (in rfr_disc_equity_market) stocks_portfolio_risk_neutral:\n  assumes \"risk_neutral_prob N\"\n  and \"trading_strategy pf\"\n  and \"subalgebra N M\"\n  and \"support_set pf \\<subseteq> stocks Mkt\"\n  and \"\\<forall>n. \\<forall> asset \\<in> support_set pf. integrable N (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w)\"\n  shows  \"\\<forall>x \\<in> support_set pf. AE w in N.\n        (real_cond_exp N (F n) (discounted_value r (\\<lambda>m y. prices Mkt x m y * pf x m y) (Suc n))) w =\n        discounted_value r (\\<lambda>m y. prices Mkt x m y * pf x (Suc m) y) n w\"", "lemma (in rfr_disc_equity_market) self_fin_trad_strat_mart:\n  assumes \"risk_neutral_prob N\"\n  and \"filt_equiv F M N\"\n  and \"trading_strategy pf\"\n  and \"self_financing Mkt pf\"\nand \"stock_portfolio Mkt pf\"\n  and \"\\<forall>n. \\<forall> asset \\<in> support_set pf. integrable N (\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w)\"\n  and \"\\<forall>n. \\<forall> asset \\<in> support_set pf. integrable N (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w)\"\nshows \"martingale N F (discounted_value r (cls_val_process Mkt pf))\"", "lemma (in disc_filtr_prob_space) finite_integrable_vp:\n  assumes \"\\<forall>n. \\<forall> asset \\<in> support_set pf. finite (prices Mkt asset n `(space M))\"\n  and \"\\<forall>n. \\<forall> asset \\<in> support_set pf. finite (pf asset n `(space M))\"\nand \"prob_space N\"\n  and \"filt_equiv F M N\"\nand \"trading_strategy pf\"\nand \"\\<forall>n. \\<forall> asset \\<in> support_set pf. prices Mkt asset n \\<in> borel_measurable M\"\nshows  \"\\<forall>n. \\<forall>asset\\<in>support_set pf. integrable N (\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w)\"", "lemma (in disc_filtr_prob_space) finite_integrable_uvp:\n  assumes \"\\<forall>n. \\<forall> asset \\<in> support_set pf. finite (prices Mkt asset n `(space M))\"\n  and \"\\<forall>n. \\<forall> asset \\<in> support_set pf. finite (pf asset n `(space M))\"\nand \"prob_space N\"\n  and \"filt_equiv F M N\"\nand \"trading_strategy pf\"\nand \"\\<forall>n. \\<forall> asset \\<in> support_set pf. prices Mkt asset n \\<in> borel_measurable M\"\nshows  \"\\<forall>n. \\<forall>asset\\<in>support_set pf. integrable N (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w)\"", "lemma (in rfr_disc_equity_market) self_fin_trad_strat_mart_finite:\n  assumes \"risk_neutral_prob N\"\n  and \"filt_equiv F M N\"\n  and \"trading_strategy pf\"\n  and \"self_financing Mkt pf\"\n  and \"support_set pf \\<subseteq> stocks Mkt\"\n  and \"\\<forall>n. \\<forall> asset \\<in> support_set pf. finite (prices Mkt asset n `(space M))\"\n  and \"\\<forall>n. \\<forall> asset \\<in> support_set pf. finite (pf asset n `(space M))\"\nand \"\\<forall> asset\\<in> stocks Mkt. borel_adapt_stoch_proc F (prices Mkt asset)\"\nshows \"martingale N F (discounted_value r (cls_val_process Mkt pf))\"", "lemma (in rfr_disc_equity_market) replicating_expectation:\n  assumes \"risk_neutral_prob N\"\n  and \"filt_equiv F M N\"\n  and \"replicating_portfolio pf pyf matur\"\n  and \"\\<forall>n. \\<forall> asset \\<in> support_set pf. integrable N (\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w)\"\n  and \"\\<forall>n. \\<forall> asset \\<in> support_set pf. integrable N (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w)\"\n  and \"viable_market Mkt\"\n  and \"sets (F 0) = {{}, space M}\"\n  and \"pyf  \\<in> borel_measurable (F matur)\"\nshows \"fair_price Mkt (prob_space.expectation N (discounted_value r (\\<lambda>m. pyf) matur)) pyf matur\"", "lemma (in rfr_disc_equity_market) replicating_expectation_finite:\n  assumes \"risk_neutral_prob N\"\n  and \"filt_equiv F M N\"\n  and \"replicating_portfolio pf pyf matur\"\n  and \"\\<forall>n. \\<forall> asset \\<in> support_set pf. finite (prices Mkt asset n `(space M))\"\n  and \"\\<forall>n. \\<forall> asset \\<in> support_set pf. finite (pf asset n `(space M))\"\n  and \"viable_market Mkt\"\n  and \"sets (F 0) = {{}, space M}\"\n  and \"pyf  \\<in> borel_measurable (F matur)\"\nshows \"fair_price Mkt (prob_space.expectation N (discounted_value r (\\<lambda>m. pyf) matur)) pyf matur\""], "translations": [["", "lemma (in prob_space) finite_borel_measurable_integrable:\n  assumes \"f\\<in> borel_measurable M\"\n  and \"finite (f`(space M))\"\n  shows \"integrable M f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. integrable M f", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. integrable M f", "have \"simple_function M f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. simple_function M f", "using assms"], ["proof (prove)\nusing this:\n  random_variable borel f\n  finite (f ` space M)\n\ngoal (1 subgoal):\n 1. simple_function M f", "by (simp add: simple_function_borel_measurable)"], ["proof (state)\nthis:\n  simple_function M f\n\ngoal (1 subgoal):\n 1. integrable M f", "moreover"], ["proof (state)\nthis:\n  simple_function M f\n\ngoal (1 subgoal):\n 1. integrable M f", "have \"emeasure M {y \\<in> space M. f y \\<noteq> 0} \\<noteq> \\<infinity>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. emeasure M {y \\<in> space M. f y \\<noteq> (0::'b)} \\<noteq> \\<infinity>", "by simp"], ["proof (state)\nthis:\n  emeasure M {y \\<in> space M. f y \\<noteq> (0::'b)} \\<noteq> \\<infinity>\n\ngoal (1 subgoal):\n 1. integrable M f", "ultimately"], ["proof (chain)\npicking this:\n  simple_function M f\n  emeasure M {y \\<in> space M. f y \\<noteq> (0::'b)} \\<noteq> \\<infinity>", "have \"Bochner_Integration.simple_bochner_integrable M f\""], ["proof (prove)\nusing this:\n  simple_function M f\n  emeasure M {y \\<in> space M. f y \\<noteq> (0::'b)} \\<noteq> \\<infinity>\n\ngoal (1 subgoal):\n 1. Bochner_Integration.simple_bochner_integrable M f", "using Bochner_Integration.simple_bochner_integrable.simps"], ["proof (prove)\nusing this:\n  simple_function M f\n  emeasure M {y \\<in> space M. f y \\<noteq> (0::'b)} \\<noteq> \\<infinity>\n  Bochner_Integration.simple_bochner_integrable ?M ?f =\n  (simple_function ?M ?f \\<and>\n   emeasure ?M {y \\<in> space ?M. ?f y \\<noteq> (0::?'b)} \\<noteq>\n   \\<infinity>)\n\ngoal (1 subgoal):\n 1. Bochner_Integration.simple_bochner_integrable M f", "by blast"], ["proof (state)\nthis:\n  Bochner_Integration.simple_bochner_integrable M f\n\ngoal (1 subgoal):\n 1. integrable M f", "hence \"has_bochner_integral M f (Bochner_Integration.simple_bochner_integral M f)\""], ["proof (prove)\nusing this:\n  Bochner_Integration.simple_bochner_integrable M f\n\ngoal (1 subgoal):\n 1. has_bochner_integral M f\n     (Bochner_Integration.simple_bochner_integral M f)", "using has_bochner_integral_simple_bochner_integrable"], ["proof (prove)\nusing this:\n  Bochner_Integration.simple_bochner_integrable M f\n  Bochner_Integration.simple_bochner_integrable ?M ?f \\<Longrightarrow>\n  has_bochner_integral ?M ?f\n   (Bochner_Integration.simple_bochner_integral ?M ?f)\n\ngoal (1 subgoal):\n 1. has_bochner_integral M f\n     (Bochner_Integration.simple_bochner_integral M f)", "by auto"], ["proof (state)\nthis:\n  has_bochner_integral M f (Bochner_Integration.simple_bochner_integral M f)\n\ngoal (1 subgoal):\n 1. integrable M f", "thus ?thesis"], ["proof (prove)\nusing this:\n  has_bochner_integral M f (Bochner_Integration.simple_bochner_integral M f)\n\ngoal (1 subgoal):\n 1. integrable M f", "using integrable.simps"], ["proof (prove)\nusing this:\n  has_bochner_integral M f (Bochner_Integration.simple_bochner_integral M f)\n  integrable ?M ?f = (\\<exists>x. has_bochner_integral ?M ?f x)\n\ngoal (1 subgoal):\n 1. integrable M f", "by auto"], ["proof (state)\nthis:\n  integrable M f\n\ngoal:\nNo subgoals!", "qed"], ["", "subsubsection \\<open>On the almost everywhere filter\\<close>"], ["", "lemma AE_eq_trans[trans]:\n  assumes \"AE x in M. A x = B x\"\n  and \"AE x in M. B x = C x\"\n  shows \"AE x in M. A x = C x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. AE x in M. A x = C x", "using assms"], ["proof (prove)\nusing this:\n  AE x in M. A x = B x\n  AE x in M. B x = C x\n\ngoal (1 subgoal):\n 1. AE x in M. A x = C x", "by auto"], ["", "abbreviation AEeq where \"AEeq M X Y \\<equiv> AE w in M. X w = Y w\""], ["", "lemma AE_add:\n  assumes \"AE w in M. f w = g w\"\n  and \"AE w in M. f' w = g' w\"\nshows \"AE w in M. f w + f' w = g w + g' w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. AEeq M (\\<lambda>w. f w + f' w) (\\<lambda>w. g w + g' w)", "using assms"], ["proof (prove)\nusing this:\n  AEeq M f g\n  AEeq M f' g'\n\ngoal (1 subgoal):\n 1. AEeq M (\\<lambda>w. f w + f' w) (\\<lambda>w. g w + g' w)", "by auto"], ["", "lemma AE_sum:\n  assumes \"finite I\"\n  and  \"\\<forall> i\\<in>I. AE w in M. f i w = g i w\"\n  shows \"AE w in M. (\\<Sum>i\\<in> I. f i w) = (\\<Sum>i\\<in> I. g i w)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. AEeq M (\\<lambda>w. \\<Sum>i\\<in>I. f i w)\n     (\\<lambda>w. \\<Sum>i\\<in>I. g i w)", "using assms(1) subset_refl[of I]"], ["proof (prove)\nusing this:\n  finite I\n  I \\<subseteq> I\n\ngoal (1 subgoal):\n 1. AEeq M (\\<lambda>w. \\<Sum>i\\<in>I. f i w)\n     (\\<lambda>w. \\<Sum>i\\<in>I. g i w)", "proof (induct rule: finite_subset_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. AEeq M (\\<lambda>w. \\<Sum>i\\<in>{}. f i w)\n     (\\<lambda>w. \\<Sum>i\\<in>{}. g i w)\n 2. \\<And>a F.\n       \\<lbrakk>finite F; a \\<in> I; a \\<notin> F;\n        AEeq M (\\<lambda>w. \\<Sum>i\\<in>F. f i w)\n         (\\<lambda>w. \\<Sum>i\\<in>F. g i w)\\<rbrakk>\n       \\<Longrightarrow> AEeq M (\\<lambda>w. \\<Sum>i\\<in>insert a F. f i w)\n                          (\\<lambda>w. \\<Sum>i\\<in>insert a F. g i w)", "case empty"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. AEeq M (\\<lambda>w. \\<Sum>i\\<in>{}. f i w)\n     (\\<lambda>w. \\<Sum>i\\<in>{}. g i w)\n 2. \\<And>a F.\n       \\<lbrakk>finite F; a \\<in> I; a \\<notin> F;\n        AEeq M (\\<lambda>w. \\<Sum>i\\<in>F. f i w)\n         (\\<lambda>w. \\<Sum>i\\<in>F. g i w)\\<rbrakk>\n       \\<Longrightarrow> AEeq M (\\<lambda>w. \\<Sum>i\\<in>insert a F. f i w)\n                          (\\<lambda>w. \\<Sum>i\\<in>insert a F. g i w)", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. AEeq M (\\<lambda>w. \\<Sum>i\\<in>{}. f i w)\n     (\\<lambda>w. \\<Sum>i\\<in>{}. g i w)", "by simp"], ["proof (state)\nthis:\n  AEeq M (\\<lambda>w. \\<Sum>i\\<in>{}. f i w)\n   (\\<lambda>w. \\<Sum>i\\<in>{}. g i w)\n\ngoal (1 subgoal):\n 1. \\<And>a F.\n       \\<lbrakk>finite F; a \\<in> I; a \\<notin> F;\n        AEeq M (\\<lambda>w. \\<Sum>i\\<in>F. f i w)\n         (\\<lambda>w. \\<Sum>i\\<in>F. g i w)\\<rbrakk>\n       \\<Longrightarrow> AEeq M (\\<lambda>w. \\<Sum>i\\<in>insert a F. f i w)\n                          (\\<lambda>w. \\<Sum>i\\<in>insert a F. g i w)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a F.\n       \\<lbrakk>finite F; a \\<in> I; a \\<notin> F;\n        AEeq M (\\<lambda>w. \\<Sum>i\\<in>F. f i w)\n         (\\<lambda>w. \\<Sum>i\\<in>F. g i w)\\<rbrakk>\n       \\<Longrightarrow> AEeq M (\\<lambda>w. \\<Sum>i\\<in>insert a F. f i w)\n                          (\\<lambda>w. \\<Sum>i\\<in>insert a F. g i w)", "case (insert a F)"], ["proof (state)\nthis:\n  finite F\n  a \\<in> I\n  a \\<notin> F\n  AEeq M (\\<lambda>w. \\<Sum>i\\<in>F. f i w)\n   (\\<lambda>w. \\<Sum>i\\<in>F. g i w)\n\ngoal (1 subgoal):\n 1. \\<And>a F.\n       \\<lbrakk>finite F; a \\<in> I; a \\<notin> F;\n        AEeq M (\\<lambda>w. \\<Sum>i\\<in>F. f i w)\n         (\\<lambda>w. \\<Sum>i\\<in>F. g i w)\\<rbrakk>\n       \\<Longrightarrow> AEeq M (\\<lambda>w. \\<Sum>i\\<in>insert a F. f i w)\n                          (\\<lambda>w. \\<Sum>i\\<in>insert a F. g i w)", "have \"AEeq M (f a) (g a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. AEeq M (f a) (g a)", "using assms(2) insert.hyps(2)"], ["proof (prove)\nusing this:\n  \\<forall>i\\<in>I. AEeq M (f i) (g i)\n  a \\<in> I\n\ngoal (1 subgoal):\n 1. AEeq M (f a) (g a)", "by auto"], ["proof (state)\nthis:\n  AEeq M (f a) (g a)\n\ngoal (1 subgoal):\n 1. \\<And>a F.\n       \\<lbrakk>finite F; a \\<in> I; a \\<notin> F;\n        AEeq M (\\<lambda>w. \\<Sum>i\\<in>F. f i w)\n         (\\<lambda>w. \\<Sum>i\\<in>F. g i w)\\<rbrakk>\n       \\<Longrightarrow> AEeq M (\\<lambda>w. \\<Sum>i\\<in>insert a F. f i w)\n                          (\\<lambda>w. \\<Sum>i\\<in>insert a F. g i w)", "have \"AE w in M. (\\<Sum>i\\<in> insert a F. f i w) = f a w + (\\<Sum>i\\<in> F. f i w)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. AEeq M (\\<lambda>w. \\<Sum>i\\<in>insert a F. f i w)\n     (\\<lambda>w. f a w + (\\<Sum>i\\<in>F. f i w))", "by (simp add: insert.hyps(1) insert.hyps(3))"], ["proof (state)\nthis:\n  AEeq M (\\<lambda>w. \\<Sum>i\\<in>insert a F. f i w)\n   (\\<lambda>w. f a w + (\\<Sum>i\\<in>F. f i w))\n\ngoal (1 subgoal):\n 1. \\<And>a F.\n       \\<lbrakk>finite F; a \\<in> I; a \\<notin> F;\n        AEeq M (\\<lambda>w. \\<Sum>i\\<in>F. f i w)\n         (\\<lambda>w. \\<Sum>i\\<in>F. g i w)\\<rbrakk>\n       \\<Longrightarrow> AEeq M (\\<lambda>w. \\<Sum>i\\<in>insert a F. f i w)\n                          (\\<lambda>w. \\<Sum>i\\<in>insert a F. g i w)", "also"], ["proof (state)\nthis:\n  AEeq M (\\<lambda>w. \\<Sum>i\\<in>insert a F. f i w)\n   (\\<lambda>w. f a w + (\\<Sum>i\\<in>F. f i w))\n\ngoal (1 subgoal):\n 1. \\<And>a F.\n       \\<lbrakk>finite F; a \\<in> I; a \\<notin> F;\n        AEeq M (\\<lambda>w. \\<Sum>i\\<in>F. f i w)\n         (\\<lambda>w. \\<Sum>i\\<in>F. g i w)\\<rbrakk>\n       \\<Longrightarrow> AEeq M (\\<lambda>w. \\<Sum>i\\<in>insert a F. f i w)\n                          (\\<lambda>w. \\<Sum>i\\<in>insert a F. g i w)", "have \"AE w in M. f a w + (\\<Sum>i\\<in> F. f i w) = g a w + (\\<Sum>i\\<in> F. f i w)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. AEeq M (\\<lambda>w. f a w + (\\<Sum>i\\<in>F. f i w))\n     (\\<lambda>w. g a w + (\\<Sum>i\\<in>F. f i w))", "using \\<open>AEeq M (f a) (g a)\\<close>"], ["proof (prove)\nusing this:\n  AEeq M (f a) (g a)\n\ngoal (1 subgoal):\n 1. AEeq M (\\<lambda>w. f a w + (\\<Sum>i\\<in>F. f i w))\n     (\\<lambda>w. g a w + (\\<Sum>i\\<in>F. f i w))", "by auto"], ["proof (state)\nthis:\n  AEeq M (\\<lambda>w. f a w + (\\<Sum>i\\<in>F. f i w))\n   (\\<lambda>w. g a w + (\\<Sum>i\\<in>F. f i w))\n\ngoal (1 subgoal):\n 1. \\<And>a F.\n       \\<lbrakk>finite F; a \\<in> I; a \\<notin> F;\n        AEeq M (\\<lambda>w. \\<Sum>i\\<in>F. f i w)\n         (\\<lambda>w. \\<Sum>i\\<in>F. g i w)\\<rbrakk>\n       \\<Longrightarrow> AEeq M (\\<lambda>w. \\<Sum>i\\<in>insert a F. f i w)\n                          (\\<lambda>w. \\<Sum>i\\<in>insert a F. g i w)", "also"], ["proof (state)\nthis:\n  AEeq M (\\<lambda>w. f a w + (\\<Sum>i\\<in>F. f i w))\n   (\\<lambda>w. g a w + (\\<Sum>i\\<in>F. f i w))\n\ngoal (1 subgoal):\n 1. \\<And>a F.\n       \\<lbrakk>finite F; a \\<in> I; a \\<notin> F;\n        AEeq M (\\<lambda>w. \\<Sum>i\\<in>F. f i w)\n         (\\<lambda>w. \\<Sum>i\\<in>F. g i w)\\<rbrakk>\n       \\<Longrightarrow> AEeq M (\\<lambda>w. \\<Sum>i\\<in>insert a F. f i w)\n                          (\\<lambda>w. \\<Sum>i\\<in>insert a F. g i w)", "have \"AE w in M. g a w + (\\<Sum>i\\<in> F. f i w) = g a w + (\\<Sum>i\\<in> F. g i w)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. AEeq M (\\<lambda>w. g a w + (\\<Sum>i\\<in>F. f i w))\n     (\\<lambda>w. g a w + (\\<Sum>i\\<in>F. g i w))", "using insert.hyps(4)"], ["proof (prove)\nusing this:\n  AEeq M (\\<lambda>w. \\<Sum>i\\<in>F. f i w)\n   (\\<lambda>w. \\<Sum>i\\<in>F. g i w)\n\ngoal (1 subgoal):\n 1. AEeq M (\\<lambda>w. g a w + (\\<Sum>i\\<in>F. f i w))\n     (\\<lambda>w. g a w + (\\<Sum>i\\<in>F. g i w))", "by auto"], ["proof (state)\nthis:\n  AEeq M (\\<lambda>w. g a w + (\\<Sum>i\\<in>F. f i w))\n   (\\<lambda>w. g a w + (\\<Sum>i\\<in>F. g i w))\n\ngoal (1 subgoal):\n 1. \\<And>a F.\n       \\<lbrakk>finite F; a \\<in> I; a \\<notin> F;\n        AEeq M (\\<lambda>w. \\<Sum>i\\<in>F. f i w)\n         (\\<lambda>w. \\<Sum>i\\<in>F. g i w)\\<rbrakk>\n       \\<Longrightarrow> AEeq M (\\<lambda>w. \\<Sum>i\\<in>insert a F. f i w)\n                          (\\<lambda>w. \\<Sum>i\\<in>insert a F. g i w)", "also"], ["proof (state)\nthis:\n  AEeq M (\\<lambda>w. g a w + (\\<Sum>i\\<in>F. f i w))\n   (\\<lambda>w. g a w + (\\<Sum>i\\<in>F. g i w))\n\ngoal (1 subgoal):\n 1. \\<And>a F.\n       \\<lbrakk>finite F; a \\<in> I; a \\<notin> F;\n        AEeq M (\\<lambda>w. \\<Sum>i\\<in>F. f i w)\n         (\\<lambda>w. \\<Sum>i\\<in>F. g i w)\\<rbrakk>\n       \\<Longrightarrow> AEeq M (\\<lambda>w. \\<Sum>i\\<in>insert a F. f i w)\n                          (\\<lambda>w. \\<Sum>i\\<in>insert a F. g i w)", "have \"AE w in M. g a w + (\\<Sum>i\\<in> F. g i w) = (\\<Sum>i\\<in> insert a F. g i w)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. AEeq M (\\<lambda>w. g a w + (\\<Sum>i\\<in>F. g i w))\n     (\\<lambda>w. \\<Sum>i\\<in>insert a F. g i w)", "by (simp add: insert.hyps(1) insert.hyps(3))"], ["proof (state)\nthis:\n  AEeq M (\\<lambda>w. g a w + (\\<Sum>i\\<in>F. g i w))\n   (\\<lambda>w. \\<Sum>i\\<in>insert a F. g i w)\n\ngoal (1 subgoal):\n 1. \\<And>a F.\n       \\<lbrakk>finite F; a \\<in> I; a \\<notin> F;\n        AEeq M (\\<lambda>w. \\<Sum>i\\<in>F. f i w)\n         (\\<lambda>w. \\<Sum>i\\<in>F. g i w)\\<rbrakk>\n       \\<Longrightarrow> AEeq M (\\<lambda>w. \\<Sum>i\\<in>insert a F. f i w)\n                          (\\<lambda>w. \\<Sum>i\\<in>insert a F. g i w)", "finally"], ["proof (chain)\npicking this:\n  AEeq M (\\<lambda>x. \\<Sum>i\\<in>insert a F. f i x)\n   (\\<lambda>x. \\<Sum>i\\<in>insert a F. g i x)", "show ?case"], ["proof (prove)\nusing this:\n  AEeq M (\\<lambda>x. \\<Sum>i\\<in>insert a F. f i x)\n   (\\<lambda>x. \\<Sum>i\\<in>insert a F. g i x)\n\ngoal (1 subgoal):\n 1. AEeq M (\\<lambda>w. \\<Sum>i\\<in>insert a F. f i w)\n     (\\<lambda>w. \\<Sum>i\\<in>insert a F. g i w)", "by auto"], ["proof (state)\nthis:\n  AEeq M (\\<lambda>w. \\<Sum>i\\<in>insert a F. f i w)\n   (\\<lambda>w. \\<Sum>i\\<in>insert a F. g i w)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma AE_eq_cst:\n  assumes \"AE w in M. (\\<lambda>w. c) w = (\\<lambda>w. d) w\"\n  and \"emeasure M (space M) \\<noteq> 0\"\n  shows \"c = d\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c = d", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. c \\<noteq> d \\<Longrightarrow> False", "assume \"c \\<noteq> d\""], ["proof (state)\nthis:\n  c \\<noteq> d\n\ngoal (1 subgoal):\n 1. c \\<noteq> d \\<Longrightarrow> False", "from \\<open>AE w in M. (\\<lambda>w. c) w = (\\<lambda>w. d) w\\<close>"], ["proof (chain)\npicking this:\n  AEeq M (\\<lambda>w. c) (\\<lambda>w. d)", "obtain N where Nprops: \"{w\\<in> space M. \\<not>(\\<lambda>w. c) w = (\\<lambda>w. d) w} \\<subseteq> N\" \"N\\<in> sets M\" \"emeasure M N = 0\""], ["proof (prove)\nusing this:\n  AEeq M (\\<lambda>w. c) (\\<lambda>w. d)\n\ngoal (1 subgoal):\n 1. (\\<And>N.\n        \\<lbrakk>{w \\<in> space M. c \\<noteq> d} \\<subseteq> N;\n         N \\<in> sets M; emeasure M N = 0\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (force elim:AE_E)"], ["proof (state)\nthis:\n  {w \\<in> space M. c \\<noteq> d} \\<subseteq> N\n  N \\<in> sets M\n  emeasure M N = 0\n\ngoal (1 subgoal):\n 1. c \\<noteq> d \\<Longrightarrow> False", "have \"\\<forall>w\\<in> space M. (\\<lambda>w. c) w \\<noteq> (\\<lambda>w. d) w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>w\\<in>space M. c \\<noteq> d", "using \\<open>c\\<noteq> d\\<close>"], ["proof (prove)\nusing this:\n  c \\<noteq> d\n\ngoal (1 subgoal):\n 1. \\<forall>w\\<in>space M. c \\<noteq> d", "by simp"], ["proof (state)\nthis:\n  \\<forall>w\\<in>space M. c \\<noteq> d\n\ngoal (1 subgoal):\n 1. c \\<noteq> d \\<Longrightarrow> False", "hence \"{w\\<in> space M. (\\<lambda>w. c) w \\<noteq> (\\<lambda>w. d) w} = space M\""], ["proof (prove)\nusing this:\n  \\<forall>w\\<in>space M. c \\<noteq> d\n\ngoal (1 subgoal):\n 1. {w \\<in> space M. c \\<noteq> d} = space M", "by auto"], ["proof (state)\nthis:\n  {w \\<in> space M. c \\<noteq> d} = space M\n\ngoal (1 subgoal):\n 1. c \\<noteq> d \\<Longrightarrow> False", "hence \"space M\\<subseteq> N\""], ["proof (prove)\nusing this:\n  {w \\<in> space M. c \\<noteq> d} = space M\n\ngoal (1 subgoal):\n 1. space M \\<subseteq> N", "using Nprops"], ["proof (prove)\nusing this:\n  {w \\<in> space M. c \\<noteq> d} = space M\n  {w \\<in> space M. c \\<noteq> d} \\<subseteq> N\n  N \\<in> sets M\n  emeasure M N = 0\n\ngoal (1 subgoal):\n 1. space M \\<subseteq> N", "by auto"], ["proof (state)\nthis:\n  space M \\<subseteq> N\n\ngoal (1 subgoal):\n 1. c \\<noteq> d \\<Longrightarrow> False", "thus False"], ["proof (prove)\nusing this:\n  space M \\<subseteq> N\n\ngoal (1 subgoal):\n 1. False", "using \\<open>emeasure M N = 0\\<close> assms"], ["proof (prove)\nusing this:\n  space M \\<subseteq> N\n  emeasure M N = 0\n  AEeq M (\\<lambda>w. c) (\\<lambda>w. d)\n  emeasure M (space M) \\<noteq> 0\n\ngoal (1 subgoal):\n 1. False", "by (meson Nprops(2) \\<open>emeasure M (space M) \\<noteq> 0\\<close> \\<open>emeasure M N = 0\\<close> \\<open>space M \\<subseteq> N\\<close> emeasure_eq_0)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "subsubsection \\<open>On conditional expectations\\<close>"], ["", "lemma (in prob_space) subalgebra_sigma_finite:\n  assumes \"subalgebra M N\"\n  shows \"sigma_finite_subalgebra M N\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sigma_finite_subalgebra M N", "unfolding sigma_finite_subalgebra_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. subalgebra M N \\<and> sigma_finite_measure (restr_to_subalg M N)", "by (simp add: assms prob_space_axioms prob_space_imp_sigma_finite prob_space_restr_to_subalg)"], ["", "lemma (in prob_space) trivial_subalg_cond_expect_AE:\n  assumes \"subalgebra M N\"\n  and \"sets N = {{}, space M}\"\n  and \"integrable M f\"\nshows \"AE x in M. real_cond_exp M N f x = (\\<lambda>x. expectation f) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. AEeq M (real_cond_exp M N f) (\\<lambda>x. expectation f)", "proof (intro sigma_finite_subalgebra.real_cond_exp_charact)"], ["proof (state)\ngoal (5 subgoals):\n 1. sigma_finite_subalgebra M N\n 2. \\<And>A.\n       A \\<in> sets N \\<Longrightarrow>\n       set_lebesgue_integral M A f =\n       \\<integral>x\\<in>A. expectation f\\<partial>M\n 3. integrable M f\n 4. integrable M (\\<lambda>x. expectation f)\n 5. (\\<lambda>x. expectation f) \\<in> borel_measurable N", "show \"sigma_finite_subalgebra M N\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sigma_finite_subalgebra M N", "by (simp add: assms(1) subalgebra_sigma_finite)"], ["proof (state)\nthis:\n  sigma_finite_subalgebra M N\n\ngoal (4 subgoals):\n 1. \\<And>A.\n       A \\<in> sets N \\<Longrightarrow>\n       set_lebesgue_integral M A f =\n       \\<integral>x\\<in>A. expectation f\\<partial>M\n 2. integrable M f\n 3. integrable M (\\<lambda>x. expectation f)\n 4. (\\<lambda>x. expectation f) \\<in> borel_measurable N", "show \"integrable M f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. integrable M f", "using assms"], ["proof (prove)\nusing this:\n  subalgebra M N\n  sets N = {{}, space M}\n  integrable M f\n\ngoal (1 subgoal):\n 1. integrable M f", "by simp"], ["proof (state)\nthis:\n  integrable M f\n\ngoal (3 subgoals):\n 1. \\<And>A.\n       A \\<in> sets N \\<Longrightarrow>\n       set_lebesgue_integral M A f =\n       \\<integral>x\\<in>A. expectation f\\<partial>M\n 2. integrable M (\\<lambda>x. expectation f)\n 3. (\\<lambda>x. expectation f) \\<in> borel_measurable N", "show \"integrable M (\\<lambda>x. expectation f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. integrable M (\\<lambda>x. expectation f)", "by auto"], ["proof (state)\nthis:\n  integrable M (\\<lambda>x. expectation f)\n\ngoal (2 subgoals):\n 1. \\<And>A.\n       A \\<in> sets N \\<Longrightarrow>\n       set_lebesgue_integral M A f =\n       \\<integral>x\\<in>A. expectation f\\<partial>M\n 2. (\\<lambda>x. expectation f) \\<in> borel_measurable N", "show \"(\\<lambda>x. expectation f) \\<in> borel_measurable N\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. expectation f) \\<in> borel_measurable N", "by simp"], ["proof (state)\nthis:\n  (\\<lambda>x. expectation f) \\<in> borel_measurable N\n\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> sets N \\<Longrightarrow>\n       set_lebesgue_integral M A f =\n       \\<integral>x\\<in>A. expectation f\\<partial>M", "show \"\\<And>A. A \\<in> sets N \\<Longrightarrow> set_lebesgue_integral M A f = \\<integral>x\\<in>A. expectation f\\<partial>M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> sets N \\<Longrightarrow>\n       set_lebesgue_integral M A f =\n       \\<integral>x\\<in>A. expectation f\\<partial>M", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> sets N \\<Longrightarrow>\n       set_lebesgue_integral M A f =\n       \\<integral>x\\<in>A. expectation f\\<partial>M", "fix A"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> sets N \\<Longrightarrow>\n       set_lebesgue_integral M A f =\n       \\<integral>x\\<in>A. expectation f\\<partial>M", "assume \"A \\<in> sets N\""], ["proof (state)\nthis:\n  A \\<in> sets N\n\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> sets N \\<Longrightarrow>\n       set_lebesgue_integral M A f =\n       \\<integral>x\\<in>A. expectation f\\<partial>M", "show \"set_lebesgue_integral M A f = \\<integral>x\\<in>A. expectation f\\<partial>M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set_lebesgue_integral M A f =\n    \\<integral>x\\<in>A. expectation f\\<partial>M", "proof (cases \"A = {}\")"], ["proof (state)\ngoal (2 subgoals):\n 1. A = {} \\<Longrightarrow>\n    set_lebesgue_integral M A f =\n    \\<integral>x\\<in>A. expectation f\\<partial>M\n 2. A \\<noteq> {} \\<Longrightarrow>\n    set_lebesgue_integral M A f =\n    \\<integral>x\\<in>A. expectation f\\<partial>M", "case True"], ["proof (state)\nthis:\n  A = {}\n\ngoal (2 subgoals):\n 1. A = {} \\<Longrightarrow>\n    set_lebesgue_integral M A f =\n    \\<integral>x\\<in>A. expectation f\\<partial>M\n 2. A \\<noteq> {} \\<Longrightarrow>\n    set_lebesgue_integral M A f =\n    \\<integral>x\\<in>A. expectation f\\<partial>M", "thus ?thesis"], ["proof (prove)\nusing this:\n  A = {}\n\ngoal (1 subgoal):\n 1. set_lebesgue_integral M A f =\n    \\<integral>x\\<in>A. expectation f\\<partial>M", "by (simp add: set_lebesgue_integral_def)"], ["proof (state)\nthis:\n  set_lebesgue_integral M A f = \\<integral>x\\<in>A. expectation f\\<partial>M\n\ngoal (1 subgoal):\n 1. A \\<noteq> {} \\<Longrightarrow>\n    set_lebesgue_integral M A f =\n    \\<integral>x\\<in>A. expectation f\\<partial>M", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. A \\<noteq> {} \\<Longrightarrow>\n    set_lebesgue_integral M A f =\n    \\<integral>x\\<in>A. expectation f\\<partial>M", "case False"], ["proof (state)\nthis:\n  A \\<noteq> {}\n\ngoal (1 subgoal):\n 1. A \\<noteq> {} \\<Longrightarrow>\n    set_lebesgue_integral M A f =\n    \\<integral>x\\<in>A. expectation f\\<partial>M", "hence \"A = space M\""], ["proof (prove)\nusing this:\n  A \\<noteq> {}\n\ngoal (1 subgoal):\n 1. A = space M", "using assms \\<open>A\\<in> sets N\\<close>"], ["proof (prove)\nusing this:\n  A \\<noteq> {}\n  subalgebra M N\n  sets N = {{}, space M}\n  integrable M f\n  A \\<in> sets N\n\ngoal (1 subgoal):\n 1. A = space M", "by auto"], ["proof (state)\nthis:\n  A = space M\n\ngoal (1 subgoal):\n 1. A \\<noteq> {} \\<Longrightarrow>\n    set_lebesgue_integral M A f =\n    \\<integral>x\\<in>A. expectation f\\<partial>M", "have \"set_lebesgue_integral M A f = expectation f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set_lebesgue_integral M A f = expectation f", "using \\<open>A = space M\\<close>"], ["proof (prove)\nusing this:\n  A = space M\n\ngoal (1 subgoal):\n 1. set_lebesgue_integral M A f = expectation f", "by (metis (mono_tags, lifting) Bochner_Integration.integral_cong indicator_simps(1)\n                  scaleR_one set_lebesgue_integral_def)"], ["proof (state)\nthis:\n  set_lebesgue_integral M A f = expectation f\n\ngoal (1 subgoal):\n 1. A \\<noteq> {} \\<Longrightarrow>\n    set_lebesgue_integral M A f =\n    \\<integral>x\\<in>A. expectation f\\<partial>M", "also"], ["proof (state)\nthis:\n  set_lebesgue_integral M A f = expectation f\n\ngoal (1 subgoal):\n 1. A \\<noteq> {} \\<Longrightarrow>\n    set_lebesgue_integral M A f =\n    \\<integral>x\\<in>A. expectation f\\<partial>M", "have \"... =\\<integral>x\\<in>A. expectation f\\<partial>M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. expectation f = \\<integral>x\\<in>A. expectation f\\<partial>M", "using \\<open>A = space M\\<close>"], ["proof (prove)\nusing this:\n  A = space M\n\ngoal (1 subgoal):\n 1. expectation f = \\<integral>x\\<in>A. expectation f\\<partial>M", "by (auto simp add:prob_space set_lebesgue_integral_def)"], ["proof (state)\nthis:\n  expectation f = \\<integral>x\\<in>A. expectation f\\<partial>M\n\ngoal (1 subgoal):\n 1. A \\<noteq> {} \\<Longrightarrow>\n    set_lebesgue_integral M A f =\n    \\<integral>x\\<in>A. expectation f\\<partial>M", "finally"], ["proof (chain)\npicking this:\n  set_lebesgue_integral M A f = \\<integral>x\\<in>A. expectation f\\<partial>M", "show ?thesis"], ["proof (prove)\nusing this:\n  set_lebesgue_integral M A f = \\<integral>x\\<in>A. expectation f\\<partial>M\n\ngoal (1 subgoal):\n 1. set_lebesgue_integral M A f =\n    \\<integral>x\\<in>A. expectation f\\<partial>M", "."], ["proof (state)\nthis:\n  set_lebesgue_integral M A f = \\<integral>x\\<in>A. expectation f\\<partial>M\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  set_lebesgue_integral M A f = \\<integral>x\\<in>A. expectation f\\<partial>M\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?A13 \\<in> sets N \\<Longrightarrow>\n  set_lebesgue_integral M ?A13 f =\n  \\<integral>x\\<in>?A13. expectation f\\<partial>M\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in prob_space) triv_subalg_borel_eq:\n  assumes \"subalgebra M F\"\n  and \"sets F = {{}, space M}\"\n  and \"AE x in M. f x = (c::'b::{t2_space})\"\n  and \"f\\<in> borel_measurable F\"\nshows \"\\<forall>x\\<in> space M. f x = c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>space M. f x = c", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> space M \\<Longrightarrow> f x = c", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> space M \\<Longrightarrow> f x = c", "assume \"x\\<in> space M\""], ["proof (state)\nthis:\n  x \\<in> space M\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> space M \\<Longrightarrow> f x = c", "have \"space M = space F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. space M = space F", "using assms"], ["proof (prove)\nusing this:\n  subalgebra M F\n  sets F = {{}, space M}\n  AEeq M f (\\<lambda>x. c)\n  f \\<in> borel_measurable F\n\ngoal (1 subgoal):\n 1. space M = space F", "by (simp add:subalgebra_def)"], ["proof (state)\nthis:\n  space M = space F\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> space M \\<Longrightarrow> f x = c", "hence \"x\\<in> space F\""], ["proof (prove)\nusing this:\n  space M = space F\n\ngoal (1 subgoal):\n 1. x \\<in> space F", "using \\<open>x\\<in> space M\\<close>"], ["proof (prove)\nusing this:\n  space M = space F\n  x \\<in> space M\n\ngoal (1 subgoal):\n 1. x \\<in> space F", "by simp"], ["proof (state)\nthis:\n  x \\<in> space F\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> space M \\<Longrightarrow> f x = c", "have \"space M \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. space M \\<noteq> {}", "by (simp add:not_empty)"], ["proof (state)\nthis:\n  space M \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> space M \\<Longrightarrow> f x = c", "hence \"\\<exists>d. \\<forall>y\\<in> space F. f y = d\""], ["proof (prove)\nusing this:\n  space M \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<exists>d. \\<forall>y\\<in>space F. f y = d", "by (metis assms(1) assms(2) assms(4) subalgebra_def triv_measurable_cst)"], ["proof (state)\nthis:\n  \\<exists>d. \\<forall>y\\<in>space F. f y = d\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> space M \\<Longrightarrow> f x = c", "from this"], ["proof (chain)\npicking this:\n  \\<exists>d. \\<forall>y\\<in>space F. f y = d", "obtain d where \"\\<forall>y \\<in>space F. f y = d\""], ["proof (prove)\nusing this:\n  \\<exists>d. \\<forall>y\\<in>space F. f y = d\n\ngoal (1 subgoal):\n 1. (\\<And>d.\n        \\<forall>y\\<in>space F. f y = d \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  \\<forall>y\\<in>space F. f y = d\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> space M \\<Longrightarrow> f x = c", "hence \"f x = d\""], ["proof (prove)\nusing this:\n  \\<forall>y\\<in>space F. f y = d\n\ngoal (1 subgoal):\n 1. f x = d", "using \\<open>x\\<in> space F\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>y\\<in>space F. f y = d\n  x \\<in> space F\n\ngoal (1 subgoal):\n 1. f x = d", "by simp"], ["proof (state)\nthis:\n  f x = d\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> space M \\<Longrightarrow> f x = c", "also"], ["proof (state)\nthis:\n  f x = d\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> space M \\<Longrightarrow> f x = c", "have \"... = c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. d = c", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. d \\<noteq> c \\<Longrightarrow> False", "assume \"d\\<noteq> c\""], ["proof (state)\nthis:\n  d \\<noteq> c\n\ngoal (1 subgoal):\n 1. d \\<noteq> c \\<Longrightarrow> False", "from \\<open>AE x in M. f x= c\\<close>"], ["proof (chain)\npicking this:\n  AEeq M f (\\<lambda>x. c)", "obtain N where Nprops: \"{x\\<in> space M. \\<not>f x = c} \\<subseteq> N\" \"N\\<in> sets M\" \"emeasure M N = 0\""], ["proof (prove)\nusing this:\n  AEeq M f (\\<lambda>x. c)\n\ngoal (1 subgoal):\n 1. (\\<And>N.\n        \\<lbrakk>{x \\<in> space M. f x \\<noteq> c} \\<subseteq> N;\n         N \\<in> events; emeasure M N = 0\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (force elim:AE_E)"], ["proof (state)\nthis:\n  {x \\<in> space M. f x \\<noteq> c} \\<subseteq> N\n  N \\<in> events\n  emeasure M N = 0\n\ngoal (1 subgoal):\n 1. d \\<noteq> c \\<Longrightarrow> False", "have \"space M \\<subseteq> {x\\<in> space M. \\<not>f x = c}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. space M \\<subseteq> {x \\<in> space M. f x \\<noteq> c}", "using \\<open>\\<forall>y \\<in>space F. f y = d\\<close> \\<open>space M = space F\\<close> \\<open>d\\<noteq> c\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>y\\<in>space F. f y = d\n  space M = space F\n  d \\<noteq> c\n\ngoal (1 subgoal):\n 1. space M \\<subseteq> {x \\<in> space M. f x \\<noteq> c}", "by auto"], ["proof (state)\nthis:\n  space M \\<subseteq> {x \\<in> space M. f x \\<noteq> c}\n\ngoal (1 subgoal):\n 1. d \\<noteq> c \\<Longrightarrow> False", "hence \"space M\\<subseteq> N\""], ["proof (prove)\nusing this:\n  space M \\<subseteq> {x \\<in> space M. f x \\<noteq> c}\n\ngoal (1 subgoal):\n 1. space M \\<subseteq> N", "using Nprops"], ["proof (prove)\nusing this:\n  space M \\<subseteq> {x \\<in> space M. f x \\<noteq> c}\n  {x \\<in> space M. f x \\<noteq> c} \\<subseteq> N\n  N \\<in> events\n  emeasure M N = 0\n\ngoal (1 subgoal):\n 1. space M \\<subseteq> N", "by auto"], ["proof (state)\nthis:\n  space M \\<subseteq> N\n\ngoal (1 subgoal):\n 1. d \\<noteq> c \\<Longrightarrow> False", "thus False"], ["proof (prove)\nusing this:\n  space M \\<subseteq> N\n\ngoal (1 subgoal):\n 1. False", "using \\<open>emeasure M N = 0\\<close> emeasure_space_1  Nprops(2) emeasure_mono"], ["proof (prove)\nusing this:\n  space M \\<subseteq> N\n  emeasure M N = 0\n  emeasure M (space M) = 1\n  N \\<in> events\n  \\<lbrakk>?a \\<subseteq> ?b; ?b \\<in> sets ?M\\<rbrakk>\n  \\<Longrightarrow> emeasure ?M ?a \\<le> emeasure ?M ?b\n\ngoal (1 subgoal):\n 1. False", "by fastforce"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  d = c\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> space M \\<Longrightarrow> f x = c", "finally"], ["proof (chain)\npicking this:\n  f x = c", "show \"f x = c\""], ["proof (prove)\nusing this:\n  f x = c\n\ngoal (1 subgoal):\n 1. f x = c", "."], ["proof (state)\nthis:\n  f x = c\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in prob_space) trivial_subalg_cond_expect_eq:\n  assumes \"subalgebra M N\"\n  and \"sets N = {{}, space M}\"\n  and \"integrable M f\"\nshows \"\\<forall>x\\<in> space M. real_cond_exp M N f x = expectation f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>space M. real_cond_exp M N f x = expectation f", "proof (rule triv_subalg_borel_eq)"], ["proof (state)\ngoal (4 subgoals):\n 1. subalgebra M ?F\n 2. sets ?F = {{}, space M}\n 3. AEeq M (real_cond_exp M N f) (\\<lambda>x. expectation f)\n 4. real_cond_exp M N f \\<in> borel_measurable ?F", "show \"subalgebra M N\" \"sets N = {{}, space M}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subalgebra M N &&& sets N = {{}, space M}", "using assms"], ["proof (prove)\nusing this:\n  subalgebra M N\n  sets N = {{}, space M}\n  integrable M f\n\ngoal (1 subgoal):\n 1. subalgebra M N &&& sets N = {{}, space M}", "by auto"], ["proof (state)\nthis:\n  subalgebra M N\n  sets N = {{}, space M}\n\ngoal (2 subgoals):\n 1. AEeq M (real_cond_exp M N f) (\\<lambda>x. expectation f)\n 2. real_cond_exp M N f \\<in> borel_measurable N", "show \"real_cond_exp M N f \\<in> borel_measurable N\""], ["proof (prove)\ngoal (1 subgoal):\n 1. real_cond_exp M N f \\<in> borel_measurable N", "by simp"], ["proof (state)\nthis:\n  real_cond_exp M N f \\<in> borel_measurable N\n\ngoal (1 subgoal):\n 1. AEeq M (real_cond_exp M N f) (\\<lambda>x. expectation f)", "show \"AE x in M. real_cond_exp M N f x = expectation f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. AEeq M (real_cond_exp M N f) (\\<lambda>x. expectation f)", "by (rule trivial_subalg_cond_expect_AE, (auto simp add:assms))"], ["proof (state)\nthis:\n  AEeq M (real_cond_exp M N f) (\\<lambda>x. expectation f)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in sigma_finite_subalgebra) real_cond_exp_cong':\n  assumes \"\\<forall>w \\<in> space M. f w = g w\"\n  and \"f\\<in> borel_measurable M\"\nshows \"AE w in M. real_cond_exp M F f w = real_cond_exp M F g w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. AEeq M (real_cond_exp M F f) (real_cond_exp M F g)", "proof (rule real_cond_exp_cong)"], ["proof (state)\ngoal (3 subgoals):\n 1. AEeq M f g\n 2. f \\<in> borel_measurable M\n 3. g \\<in> borel_measurable M", "show \"AE w in M. f w = g w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. AEeq M f g", "using assms"], ["proof (prove)\nusing this:\n  \\<forall>w\\<in>space M. f w = g w\n  f \\<in> borel_measurable M\n\ngoal (1 subgoal):\n 1. AEeq M f g", "by simp"], ["proof (state)\nthis:\n  AEeq M f g\n\ngoal (2 subgoals):\n 1. f \\<in> borel_measurable M\n 2. g \\<in> borel_measurable M", "show \"f\\<in> borel_measurable M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<in> borel_measurable M", "using assms"], ["proof (prove)\nusing this:\n  \\<forall>w\\<in>space M. f w = g w\n  f \\<in> borel_measurable M\n\ngoal (1 subgoal):\n 1. f \\<in> borel_measurable M", "by simp"], ["proof (state)\nthis:\n  f \\<in> borel_measurable M\n\ngoal (1 subgoal):\n 1. g \\<in> borel_measurable M", "show \"g\\<in> borel_measurable M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. g \\<in> borel_measurable M", "using assms"], ["proof (prove)\nusing this:\n  \\<forall>w\\<in>space M. f w = g w\n  f \\<in> borel_measurable M\n\ngoal (1 subgoal):\n 1. g \\<in> borel_measurable M", "by (metis measurable_cong)"], ["proof (state)\nthis:\n  g \\<in> borel_measurable M\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in sigma_finite_subalgebra) real_cond_exp_bsum :\n  fixes f::\"'b \\<Rightarrow> 'a \\<Rightarrow> real\"\n  assumes [measurable]: \"\\<And>i. i\\<in>I \\<Longrightarrow> integrable M (f i)\"\n  shows \"AE x in M. real_cond_exp M F (\\<lambda>x. \\<Sum>i\\<in>I. f i x) x = (\\<Sum>i\\<in>I. real_cond_exp M F (f i) x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. AEeq M (real_cond_exp M F (\\<lambda>x. \\<Sum>i\\<in>I. f i x))\n     (\\<lambda>x. \\<Sum>i\\<in>I. real_cond_exp M F (f i) x)", "proof (rule real_cond_exp_charact)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>A.\n       A \\<in> sets F \\<Longrightarrow>\n       \\<integral>x\\<in>A. (\\<Sum>i\\<in>I. f i x)\\<partial>M =\n       \\<integral>x\\<in>A. (\\<Sum>i\\<in>I. real_cond_exp M F (f i) x)\n       \\<partial>M\n 2. integrable M (\\<lambda>x. \\<Sum>i\\<in>I. f i x)\n 3. integrable M (\\<lambda>x. \\<Sum>i\\<in>I. real_cond_exp M F (f i) x)\n 4. (\\<lambda>x. \\<Sum>i\\<in>I. real_cond_exp M F (f i) x)\n    \\<in> borel_measurable F", "fix A"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>A.\n       A \\<in> sets F \\<Longrightarrow>\n       \\<integral>x\\<in>A. (\\<Sum>i\\<in>I. f i x)\\<partial>M =\n       \\<integral>x\\<in>A. (\\<Sum>i\\<in>I. real_cond_exp M F (f i) x)\n       \\<partial>M\n 2. integrable M (\\<lambda>x. \\<Sum>i\\<in>I. f i x)\n 3. integrable M (\\<lambda>x. \\<Sum>i\\<in>I. real_cond_exp M F (f i) x)\n 4. (\\<lambda>x. \\<Sum>i\\<in>I. real_cond_exp M F (f i) x)\n    \\<in> borel_measurable F", "assume [measurable]: \"A \\<in> sets F\""], ["proof (state)\nthis:\n  A \\<in> sets F\n\ngoal (4 subgoals):\n 1. \\<And>A.\n       A \\<in> sets F \\<Longrightarrow>\n       \\<integral>x\\<in>A. (\\<Sum>i\\<in>I. f i x)\\<partial>M =\n       \\<integral>x\\<in>A. (\\<Sum>i\\<in>I. real_cond_exp M F (f i) x)\n       \\<partial>M\n 2. integrable M (\\<lambda>x. \\<Sum>i\\<in>I. f i x)\n 3. integrable M (\\<lambda>x. \\<Sum>i\\<in>I. real_cond_exp M F (f i) x)\n 4. (\\<lambda>x. \\<Sum>i\\<in>I. real_cond_exp M F (f i) x)\n    \\<in> borel_measurable F", "then"], ["proof (chain)\npicking this:\n  A \\<in> sets F", "have A_meas [measurable]: \"A \\<in> sets M\""], ["proof (prove)\nusing this:\n  A \\<in> sets F\n\ngoal (1 subgoal):\n 1. A \\<in> sets M", "by (meson subsetD subalg subalgebra_def)"], ["proof (state)\nthis:\n  A \\<in> sets M\n\ngoal (4 subgoals):\n 1. \\<And>A.\n       A \\<in> sets F \\<Longrightarrow>\n       \\<integral>x\\<in>A. (\\<Sum>i\\<in>I. f i x)\\<partial>M =\n       \\<integral>x\\<in>A. (\\<Sum>i\\<in>I. real_cond_exp M F (f i) x)\n       \\<partial>M\n 2. integrable M (\\<lambda>x. \\<Sum>i\\<in>I. f i x)\n 3. integrable M (\\<lambda>x. \\<Sum>i\\<in>I. real_cond_exp M F (f i) x)\n 4. (\\<lambda>x. \\<Sum>i\\<in>I. real_cond_exp M F (f i) x)\n    \\<in> borel_measurable F", "have *: \"\\<And>i. i \\<in> I \\<Longrightarrow> integrable M (\\<lambda>x. indicator A x * f i x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       i \\<in> I \\<Longrightarrow>\n       integrable M (\\<lambda>x. indicat_real A x * f i x)", "using integrable_mult_indicator[OF \\<open>A \\<in> sets M\\<close> assms(1)]"], ["proof (prove)\nusing this:\n  ?i1 \\<in> I \\<Longrightarrow>\n  integrable M (\\<lambda>x. indicat_real A x *\\<^sub>R f ?i1 x)\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i \\<in> I \\<Longrightarrow>\n       integrable M (\\<lambda>x. indicat_real A x * f i x)", "by auto"], ["proof (state)\nthis:\n  ?i \\<in> I \\<Longrightarrow>\n  integrable M (\\<lambda>x. indicat_real A x * f ?i x)\n\ngoal (4 subgoals):\n 1. \\<And>A.\n       A \\<in> sets F \\<Longrightarrow>\n       \\<integral>x\\<in>A. (\\<Sum>i\\<in>I. f i x)\\<partial>M =\n       \\<integral>x\\<in>A. (\\<Sum>i\\<in>I. real_cond_exp M F (f i) x)\n       \\<partial>M\n 2. integrable M (\\<lambda>x. \\<Sum>i\\<in>I. f i x)\n 3. integrable M (\\<lambda>x. \\<Sum>i\\<in>I. real_cond_exp M F (f i) x)\n 4. (\\<lambda>x. \\<Sum>i\\<in>I. real_cond_exp M F (f i) x)\n    \\<in> borel_measurable F", "have **: \"\\<And>i. i \\<in> I \\<Longrightarrow> integrable M (\\<lambda>x. indicator A x * real_cond_exp M F (f i) x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       i \\<in> I \\<Longrightarrow>\n       integrable M\n        (\\<lambda>x. indicat_real A x * real_cond_exp M F (f i) x)", "using integrable_mult_indicator[OF \\<open>A \\<in> sets M\\<close> real_cond_exp_int(1)[OF assms(1)]]"], ["proof (prove)\nusing this:\n  ?i2 \\<in> I \\<Longrightarrow>\n  integrable M\n   (\\<lambda>x. indicat_real A x *\\<^sub>R real_cond_exp M F (f ?i2) x)\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i \\<in> I \\<Longrightarrow>\n       integrable M\n        (\\<lambda>x. indicat_real A x * real_cond_exp M F (f i) x)", "by auto"], ["proof (state)\nthis:\n  ?i \\<in> I \\<Longrightarrow>\n  integrable M (\\<lambda>x. indicat_real A x * real_cond_exp M F (f ?i) x)\n\ngoal (4 subgoals):\n 1. \\<And>A.\n       A \\<in> sets F \\<Longrightarrow>\n       \\<integral>x\\<in>A. (\\<Sum>i\\<in>I. f i x)\\<partial>M =\n       \\<integral>x\\<in>A. (\\<Sum>i\\<in>I. real_cond_exp M F (f i) x)\n       \\<partial>M\n 2. integrable M (\\<lambda>x. \\<Sum>i\\<in>I. f i x)\n 3. integrable M (\\<lambda>x. \\<Sum>i\\<in>I. real_cond_exp M F (f i) x)\n 4. (\\<lambda>x. \\<Sum>i\\<in>I. real_cond_exp M F (f i) x)\n    \\<in> borel_measurable F", "have inti: \"\\<And>i. i \\<in> I \\<Longrightarrow>(\\<integral>x. indicator A x * f i x \\<partial>M) = (\\<integral>x. indicator A x * real_cond_exp M F (f i) x \\<partial>M)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       i \\<in> I \\<Longrightarrow>\n       LINT x|M. indicat_real A x * f i x =\n       LINT x|M. indicat_real A x * real_cond_exp M F (f i) x", "using\n      real_cond_exp_intg(2)[symmetric,of \"indicator A\" ]"], ["proof (prove)\nusing this:\n  \\<lbrakk>integrable M (\\<lambda>x. indicat_real A x * ?g x);\n   indicat_real A \\<in> borel_measurable F;\n   ?g \\<in> borel_measurable M\\<rbrakk>\n  \\<Longrightarrow> LINT x|M. indicat_real A x * ?g x =\n                    LINT x|M. indicat_real A x * real_cond_exp M F ?g x\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i \\<in> I \\<Longrightarrow>\n       LINT x|M. indicat_real A x * f i x =\n       LINT x|M. indicat_real A x * real_cond_exp M F (f i) x", "using \"*\" \\<open>A \\<in> sets F\\<close> assms borel_measurable_indicator"], ["proof (prove)\nusing this:\n  \\<lbrakk>integrable M (\\<lambda>x. indicat_real A x * ?g x);\n   indicat_real A \\<in> borel_measurable F;\n   ?g \\<in> borel_measurable M\\<rbrakk>\n  \\<Longrightarrow> LINT x|M. indicat_real A x * ?g x =\n                    LINT x|M. indicat_real A x * real_cond_exp M F ?g x\n  ?i \\<in> I \\<Longrightarrow>\n  integrable M (\\<lambda>x. indicat_real A x * f ?i x)\n  A \\<in> sets F\n  ?i \\<in> I \\<Longrightarrow> integrable M (f ?i)\n  ?A \\<in> sets ?M \\<Longrightarrow> indicator ?A \\<in> borel_measurable ?M\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i \\<in> I \\<Longrightarrow>\n       LINT x|M. indicat_real A x * f i x =\n       LINT x|M. indicat_real A x * real_cond_exp M F (f i) x", "by blast"], ["proof (state)\nthis:\n  ?i \\<in> I \\<Longrightarrow>\n  LINT x|M. indicat_real A x * f ?i x =\n  LINT x|M. indicat_real A x * real_cond_exp M F (f ?i) x\n\ngoal (4 subgoals):\n 1. \\<And>A.\n       A \\<in> sets F \\<Longrightarrow>\n       \\<integral>x\\<in>A. (\\<Sum>i\\<in>I. f i x)\\<partial>M =\n       \\<integral>x\\<in>A. (\\<Sum>i\\<in>I. real_cond_exp M F (f i) x)\n       \\<partial>M\n 2. integrable M (\\<lambda>x. \\<Sum>i\\<in>I. f i x)\n 3. integrable M (\\<lambda>x. \\<Sum>i\\<in>I. real_cond_exp M F (f i) x)\n 4. (\\<lambda>x. \\<Sum>i\\<in>I. real_cond_exp M F (f i) x)\n    \\<in> borel_measurable F", "have \"(\\<integral>x\\<in>A. (\\<Sum>i\\<in>I. f i x)\\<partial>M) = (\\<integral>x. (\\<Sum>i\\<in>I. indicator A x * f i x)\\<partial>M)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<integral>x\\<in>A. (\\<Sum>i\\<in>I. f i x)\\<partial>M =\n    LINT x|M. (\\<Sum>i\\<in>I. indicat_real A x * f i x)", "by (simp add: sum_distrib_left set_lebesgue_integral_def)"], ["proof (state)\nthis:\n  \\<integral>x\\<in>A. (\\<Sum>i\\<in>I. f i x)\\<partial>M =\n  LINT x|M. (\\<Sum>i\\<in>I. indicat_real A x * f i x)\n\ngoal (4 subgoals):\n 1. \\<And>A.\n       A \\<in> sets F \\<Longrightarrow>\n       \\<integral>x\\<in>A. (\\<Sum>i\\<in>I. f i x)\\<partial>M =\n       \\<integral>x\\<in>A. (\\<Sum>i\\<in>I. real_cond_exp M F (f i) x)\n       \\<partial>M\n 2. integrable M (\\<lambda>x. \\<Sum>i\\<in>I. f i x)\n 3. integrable M (\\<lambda>x. \\<Sum>i\\<in>I. real_cond_exp M F (f i) x)\n 4. (\\<lambda>x. \\<Sum>i\\<in>I. real_cond_exp M F (f i) x)\n    \\<in> borel_measurable F", "also"], ["proof (state)\nthis:\n  \\<integral>x\\<in>A. (\\<Sum>i\\<in>I. f i x)\\<partial>M =\n  LINT x|M. (\\<Sum>i\\<in>I. indicat_real A x * f i x)\n\ngoal (4 subgoals):\n 1. \\<And>A.\n       A \\<in> sets F \\<Longrightarrow>\n       \\<integral>x\\<in>A. (\\<Sum>i\\<in>I. f i x)\\<partial>M =\n       \\<integral>x\\<in>A. (\\<Sum>i\\<in>I. real_cond_exp M F (f i) x)\n       \\<partial>M\n 2. integrable M (\\<lambda>x. \\<Sum>i\\<in>I. f i x)\n 3. integrable M (\\<lambda>x. \\<Sum>i\\<in>I. real_cond_exp M F (f i) x)\n 4. (\\<lambda>x. \\<Sum>i\\<in>I. real_cond_exp M F (f i) x)\n    \\<in> borel_measurable F", "have \"... = (\\<Sum>i\\<in>I. (\\<integral>x. indicator A x * f i x \\<partial>M))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. LINT x|M. (\\<Sum>i\\<in>I. indicat_real A x * f i x) =\n    (\\<Sum>i\\<in>I. LINT x|M. indicat_real A x * f i x)", "using Bochner_Integration.integral_sum[of I M \"\\<lambda>i x. indicator A x * f i x\"] *"], ["proof (prove)\nusing this:\n  (\\<And>i.\n      i \\<in> I \\<Longrightarrow>\n      integrable M (\\<lambda>x. indicat_real A x * f i x)) \\<Longrightarrow>\n  LINT x|M. (\\<Sum>i\\<in>I. indicat_real A x * f i x) =\n  (\\<Sum>i\\<in>I. LINT x|M. indicat_real A x * f i x)\n  ?i \\<in> I \\<Longrightarrow>\n  integrable M (\\<lambda>x. indicat_real A x * f ?i x)\n\ngoal (1 subgoal):\n 1. LINT x|M. (\\<Sum>i\\<in>I. indicat_real A x * f i x) =\n    (\\<Sum>i\\<in>I. LINT x|M. indicat_real A x * f i x)", "by simp"], ["proof (state)\nthis:\n  LINT x|M. (\\<Sum>i\\<in>I. indicat_real A x * f i x) =\n  (\\<Sum>i\\<in>I. LINT x|M. indicat_real A x * f i x)\n\ngoal (4 subgoals):\n 1. \\<And>A.\n       A \\<in> sets F \\<Longrightarrow>\n       \\<integral>x\\<in>A. (\\<Sum>i\\<in>I. f i x)\\<partial>M =\n       \\<integral>x\\<in>A. (\\<Sum>i\\<in>I. real_cond_exp M F (f i) x)\n       \\<partial>M\n 2. integrable M (\\<lambda>x. \\<Sum>i\\<in>I. f i x)\n 3. integrable M (\\<lambda>x. \\<Sum>i\\<in>I. real_cond_exp M F (f i) x)\n 4. (\\<lambda>x. \\<Sum>i\\<in>I. real_cond_exp M F (f i) x)\n    \\<in> borel_measurable F", "also"], ["proof (state)\nthis:\n  LINT x|M. (\\<Sum>i\\<in>I. indicat_real A x * f i x) =\n  (\\<Sum>i\\<in>I. LINT x|M. indicat_real A x * f i x)\n\ngoal (4 subgoals):\n 1. \\<And>A.\n       A \\<in> sets F \\<Longrightarrow>\n       \\<integral>x\\<in>A. (\\<Sum>i\\<in>I. f i x)\\<partial>M =\n       \\<integral>x\\<in>A. (\\<Sum>i\\<in>I. real_cond_exp M F (f i) x)\n       \\<partial>M\n 2. integrable M (\\<lambda>x. \\<Sum>i\\<in>I. f i x)\n 3. integrable M (\\<lambda>x. \\<Sum>i\\<in>I. real_cond_exp M F (f i) x)\n 4. (\\<lambda>x. \\<Sum>i\\<in>I. real_cond_exp M F (f i) x)\n    \\<in> borel_measurable F", "have \"... = (\\<Sum>i\\<in>I. (\\<integral>x. indicator A x * real_cond_exp M F (f i) x \\<partial>M))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<in>I. LINT x|M. indicat_real A x * f i x) =\n    (\\<Sum>i\\<in>I. LINT x|M. indicat_real A x * real_cond_exp M F (f i) x)", "using inti"], ["proof (prove)\nusing this:\n  ?i \\<in> I \\<Longrightarrow>\n  LINT x|M. indicat_real A x * f ?i x =\n  LINT x|M. indicat_real A x * real_cond_exp M F (f ?i) x\n\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<in>I. LINT x|M. indicat_real A x * f i x) =\n    (\\<Sum>i\\<in>I. LINT x|M. indicat_real A x * real_cond_exp M F (f i) x)", "by auto"], ["proof (state)\nthis:\n  (\\<Sum>i\\<in>I. LINT x|M. indicat_real A x * f i x) =\n  (\\<Sum>i\\<in>I. LINT x|M. indicat_real A x * real_cond_exp M F (f i) x)\n\ngoal (4 subgoals):\n 1. \\<And>A.\n       A \\<in> sets F \\<Longrightarrow>\n       \\<integral>x\\<in>A. (\\<Sum>i\\<in>I. f i x)\\<partial>M =\n       \\<integral>x\\<in>A. (\\<Sum>i\\<in>I. real_cond_exp M F (f i) x)\n       \\<partial>M\n 2. integrable M (\\<lambda>x. \\<Sum>i\\<in>I. f i x)\n 3. integrable M (\\<lambda>x. \\<Sum>i\\<in>I. real_cond_exp M F (f i) x)\n 4. (\\<lambda>x. \\<Sum>i\\<in>I. real_cond_exp M F (f i) x)\n    \\<in> borel_measurable F", "also"], ["proof (state)\nthis:\n  (\\<Sum>i\\<in>I. LINT x|M. indicat_real A x * f i x) =\n  (\\<Sum>i\\<in>I. LINT x|M. indicat_real A x * real_cond_exp M F (f i) x)\n\ngoal (4 subgoals):\n 1. \\<And>A.\n       A \\<in> sets F \\<Longrightarrow>\n       \\<integral>x\\<in>A. (\\<Sum>i\\<in>I. f i x)\\<partial>M =\n       \\<integral>x\\<in>A. (\\<Sum>i\\<in>I. real_cond_exp M F (f i) x)\n       \\<partial>M\n 2. integrable M (\\<lambda>x. \\<Sum>i\\<in>I. f i x)\n 3. integrable M (\\<lambda>x. \\<Sum>i\\<in>I. real_cond_exp M F (f i) x)\n 4. (\\<lambda>x. \\<Sum>i\\<in>I. real_cond_exp M F (f i) x)\n    \\<in> borel_measurable F", "have \"... = (\\<integral>x. (\\<Sum>i\\<in>I. indicator A x * real_cond_exp M F (f i) x)\\<partial>M)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<in>I.\n       LINT x|M. indicat_real A x * real_cond_exp M F (f i) x) =\n    LINT x|M. (\\<Sum>i\\<in>I. indicat_real A x * real_cond_exp M F (f i) x)", "by (rule Bochner_Integration.integral_sum[symmetric], simp add: **)"], ["proof (state)\nthis:\n  (\\<Sum>i\\<in>I. LINT x|M. indicat_real A x * real_cond_exp M F (f i) x) =\n  LINT x|M. (\\<Sum>i\\<in>I. indicat_real A x * real_cond_exp M F (f i) x)\n\ngoal (4 subgoals):\n 1. \\<And>A.\n       A \\<in> sets F \\<Longrightarrow>\n       \\<integral>x\\<in>A. (\\<Sum>i\\<in>I. f i x)\\<partial>M =\n       \\<integral>x\\<in>A. (\\<Sum>i\\<in>I. real_cond_exp M F (f i) x)\n       \\<partial>M\n 2. integrable M (\\<lambda>x. \\<Sum>i\\<in>I. f i x)\n 3. integrable M (\\<lambda>x. \\<Sum>i\\<in>I. real_cond_exp M F (f i) x)\n 4. (\\<lambda>x. \\<Sum>i\\<in>I. real_cond_exp M F (f i) x)\n    \\<in> borel_measurable F", "also"], ["proof (state)\nthis:\n  (\\<Sum>i\\<in>I. LINT x|M. indicat_real A x * real_cond_exp M F (f i) x) =\n  LINT x|M. (\\<Sum>i\\<in>I. indicat_real A x * real_cond_exp M F (f i) x)\n\ngoal (4 subgoals):\n 1. \\<And>A.\n       A \\<in> sets F \\<Longrightarrow>\n       \\<integral>x\\<in>A. (\\<Sum>i\\<in>I. f i x)\\<partial>M =\n       \\<integral>x\\<in>A. (\\<Sum>i\\<in>I. real_cond_exp M F (f i) x)\n       \\<partial>M\n 2. integrable M (\\<lambda>x. \\<Sum>i\\<in>I. f i x)\n 3. integrable M (\\<lambda>x. \\<Sum>i\\<in>I. real_cond_exp M F (f i) x)\n 4. (\\<lambda>x. \\<Sum>i\\<in>I. real_cond_exp M F (f i) x)\n    \\<in> borel_measurable F", "have \"... = (\\<integral>x\\<in>A. (\\<Sum>i\\<in>I. real_cond_exp M F (f i) x)\\<partial>M)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. LINT x|M.\n       (\\<Sum>i\\<in>I. indicat_real A x * real_cond_exp M F (f i) x) =\n    \\<integral>x\\<in>A. (\\<Sum>i\\<in>I. real_cond_exp M F (f i) x)\n    \\<partial>M", "by (simp add: sum_distrib_left set_lebesgue_integral_def)"], ["proof (state)\nthis:\n  LINT x|M. (\\<Sum>i\\<in>I. indicat_real A x * real_cond_exp M F (f i) x) =\n  \\<integral>x\\<in>A. (\\<Sum>i\\<in>I. real_cond_exp M F (f i) x)\\<partial>M\n\ngoal (4 subgoals):\n 1. \\<And>A.\n       A \\<in> sets F \\<Longrightarrow>\n       \\<integral>x\\<in>A. (\\<Sum>i\\<in>I. f i x)\\<partial>M =\n       \\<integral>x\\<in>A. (\\<Sum>i\\<in>I. real_cond_exp M F (f i) x)\n       \\<partial>M\n 2. integrable M (\\<lambda>x. \\<Sum>i\\<in>I. f i x)\n 3. integrable M (\\<lambda>x. \\<Sum>i\\<in>I. real_cond_exp M F (f i) x)\n 4. (\\<lambda>x. \\<Sum>i\\<in>I. real_cond_exp M F (f i) x)\n    \\<in> borel_measurable F", "finally"], ["proof (chain)\npicking this:\n  \\<integral>x\\<in>A. (\\<Sum>i\\<in>I. f i x)\\<partial>M =\n  \\<integral>x\\<in>A. (\\<Sum>i\\<in>I. real_cond_exp M F (f i) x)\\<partial>M", "show \"(\\<integral>x\\<in>A. (\\<Sum>i\\<in>I. f i x)\\<partial>M) = (\\<integral>x\\<in>A. (\\<Sum>i\\<in>I. real_cond_exp M F (f i) x)\\<partial>M)\""], ["proof (prove)\nusing this:\n  \\<integral>x\\<in>A. (\\<Sum>i\\<in>I. f i x)\\<partial>M =\n  \\<integral>x\\<in>A. (\\<Sum>i\\<in>I. real_cond_exp M F (f i) x)\\<partial>M\n\ngoal (1 subgoal):\n 1. \\<integral>x\\<in>A. (\\<Sum>i\\<in>I. f i x)\\<partial>M =\n    \\<integral>x\\<in>A. (\\<Sum>i\\<in>I. real_cond_exp M F (f i) x)\n    \\<partial>M", "by auto"], ["proof (state)\nthis:\n  \\<integral>x\\<in>A. (\\<Sum>i\\<in>I. f i x)\\<partial>M =\n  \\<integral>x\\<in>A. (\\<Sum>i\\<in>I. real_cond_exp M F (f i) x)\\<partial>M\n\ngoal (3 subgoals):\n 1. integrable M (\\<lambda>x. \\<Sum>i\\<in>I. f i x)\n 2. integrable M (\\<lambda>x. \\<Sum>i\\<in>I. real_cond_exp M F (f i) x)\n 3. (\\<lambda>x. \\<Sum>i\\<in>I. real_cond_exp M F (f i) x)\n    \\<in> borel_measurable F", "qed (auto simp add: assms real_cond_exp_int(1)[OF assms(1)])"], ["", "subsection \\<open>Financial formalizations\\<close>"], ["", "subsubsection \\<open>Markets\\<close>"], ["", "definition stk_strict_subs::\"'c set \\<Rightarrow> bool\" where\n\"stk_strict_subs S \\<longleftrightarrow> S \\<noteq> UNIV\""], ["", "typedef ('a,'c) discrete_market = \"{(s::('c set), a::'c \\<Rightarrow> (nat \\<Rightarrow> 'a \\<Rightarrow> real)). stk_strict_subs s}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x. x \\<in> {(s, a). stk_strict_subs s}", "unfolding stk_strict_subs_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x. x \\<in> {(s, a). s \\<noteq> UNIV}", "by fastforce"], ["", "definition prices where\n  \"prices Mkt = (snd (Rep_discrete_market Mkt))\""], ["", "definition assets where\n\n  \"assets Mkt = UNIV\""], ["", "definition stocks where\n  \"stocks Mkt = (fst (Rep_discrete_market Mkt))\""], ["", "definition discrete_market_of\nwhere\n  \"discrete_market_of S A =\n    Abs_discrete_market (if (stk_strict_subs S) then S else {}, A)\""], ["", "lemma prices_of:\n  shows \"prices (discrete_market_of S A) = A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prices (discrete_market_of S A) = A", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. prices (discrete_market_of S A) = A", "have \"stk_strict_subs (if (stk_strict_subs S) then S else {})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. stk_strict_subs (if stk_strict_subs S then S else {})", "proof (cases \"stk_strict_subs S\")"], ["proof (state)\ngoal (2 subgoals):\n 1. stk_strict_subs S \\<Longrightarrow>\n    stk_strict_subs (if stk_strict_subs S then S else {})\n 2. \\<not> stk_strict_subs S \\<Longrightarrow>\n    stk_strict_subs (if stk_strict_subs S then S else {})", "case True"], ["proof (state)\nthis:\n  stk_strict_subs S\n\ngoal (2 subgoals):\n 1. stk_strict_subs S \\<Longrightarrow>\n    stk_strict_subs (if stk_strict_subs S then S else {})\n 2. \\<not> stk_strict_subs S \\<Longrightarrow>\n    stk_strict_subs (if stk_strict_subs S then S else {})", "thus ?thesis"], ["proof (prove)\nusing this:\n  stk_strict_subs S\n\ngoal (1 subgoal):\n 1. stk_strict_subs (if stk_strict_subs S then S else {})", "by simp"], ["proof (state)\nthis:\n  stk_strict_subs (if stk_strict_subs S then S else {})\n\ngoal (1 subgoal):\n 1. \\<not> stk_strict_subs S \\<Longrightarrow>\n    stk_strict_subs (if stk_strict_subs S then S else {})", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> stk_strict_subs S \\<Longrightarrow>\n    stk_strict_subs (if stk_strict_subs S then S else {})", "case False"], ["proof (state)\nthis:\n  \\<not> stk_strict_subs S\n\ngoal (1 subgoal):\n 1. \\<not> stk_strict_subs S \\<Longrightarrow>\n    stk_strict_subs (if stk_strict_subs S then S else {})", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<not> stk_strict_subs S\n\ngoal (1 subgoal):\n 1. stk_strict_subs (if stk_strict_subs S then S else {})", "unfolding stk_strict_subs_def"], ["proof (prove)\nusing this:\n  \\<not> S \\<noteq> UNIV\n\ngoal (1 subgoal):\n 1. (if S \\<noteq> UNIV then S else {}) \\<noteq> UNIV", "by simp"], ["proof (state)\nthis:\n  stk_strict_subs (if stk_strict_subs S then S else {})\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  stk_strict_subs (if stk_strict_subs S then S else {})\n\ngoal (1 subgoal):\n 1. prices (discrete_market_of S A) = A", "hence fct: \"((if (stk_strict_subs S) then S else {}), A) \\<in> {(s, a). stk_strict_subs s}\""], ["proof (prove)\nusing this:\n  stk_strict_subs (if stk_strict_subs S then S else {})\n\ngoal (1 subgoal):\n 1. (if stk_strict_subs S then S else {}, A)\n    \\<in> {(s, a). stk_strict_subs s}", "by simp"], ["proof (state)\nthis:\n  (if stk_strict_subs S then S else {}, A) \\<in> {(s, a). stk_strict_subs s}\n\ngoal (1 subgoal):\n 1. prices (discrete_market_of S A) = A", "have \"discrete_market_of S A = Abs_discrete_market (if (stk_strict_subs S) then S else {}, A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. discrete_market_of S A =\n    Abs_discrete_market (if stk_strict_subs S then S else {}, A)", "unfolding discrete_market_of_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. Abs_discrete_market (if stk_strict_subs S then S else {}, A) =\n    Abs_discrete_market (if stk_strict_subs S then S else {}, A)", "by simp"], ["proof (state)\nthis:\n  discrete_market_of S A =\n  Abs_discrete_market (if stk_strict_subs S then S else {}, A)\n\ngoal (1 subgoal):\n 1. prices (discrete_market_of S A) = A", "hence \"Rep_discrete_market (discrete_market_of S A) = (if (stk_strict_subs S) then S else {},A)\""], ["proof (prove)\nusing this:\n  discrete_market_of S A =\n  Abs_discrete_market (if stk_strict_subs S then S else {}, A)\n\ngoal (1 subgoal):\n 1. Rep_discrete_market (discrete_market_of S A) =\n    (if stk_strict_subs S then S else {}, A)", "using Abs_discrete_market_inverse[of \"(if (stk_strict_subs S) then S else {}, A)\"] fct"], ["proof (prove)\nusing this:\n  discrete_market_of S A =\n  Abs_discrete_market (if stk_strict_subs S then S else {}, A)\n  (if stk_strict_subs S then S else {}, A)\n  \\<in> {(s, a). stk_strict_subs s} \\<Longrightarrow>\n  Rep_discrete_market\n   (Abs_discrete_market (if stk_strict_subs S then S else {}, A)) =\n  (if stk_strict_subs S then S else {}, A)\n  (if stk_strict_subs S then S else {}, A) \\<in> {(s, a). stk_strict_subs s}\n\ngoal (1 subgoal):\n 1. Rep_discrete_market (discrete_market_of S A) =\n    (if stk_strict_subs S then S else {}, A)", "by simp"], ["proof (state)\nthis:\n  Rep_discrete_market (discrete_market_of S A) =\n  (if stk_strict_subs S then S else {}, A)\n\ngoal (1 subgoal):\n 1. prices (discrete_market_of S A) = A", "thus ?thesis"], ["proof (prove)\nusing this:\n  Rep_discrete_market (discrete_market_of S A) =\n  (if stk_strict_subs S then S else {}, A)\n\ngoal (1 subgoal):\n 1. prices (discrete_market_of S A) = A", "unfolding prices_def"], ["proof (prove)\nusing this:\n  Rep_discrete_market (discrete_market_of S A) =\n  (if stk_strict_subs S then S else {}, A)\n\ngoal (1 subgoal):\n 1. snd (Rep_discrete_market (discrete_market_of S A)) = A", "by simp"], ["proof (state)\nthis:\n  prices (discrete_market_of S A) = A\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma stocks_of:\n  assumes \"UNIV \\<noteq> S\"\n  shows \"stocks (discrete_market_of S A) = S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. stocks (discrete_market_of S A) = S", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. stocks (discrete_market_of S A) = S", "have \"stk_strict_subs S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. stk_strict_subs S", "using assms"], ["proof (prove)\nusing this:\n  UNIV \\<noteq> S\n\ngoal (1 subgoal):\n 1. stk_strict_subs S", "unfolding stk_strict_subs_def"], ["proof (prove)\nusing this:\n  UNIV \\<noteq> S\n\ngoal (1 subgoal):\n 1. S \\<noteq> UNIV", "by simp"], ["proof (state)\nthis:\n  stk_strict_subs S\n\ngoal (1 subgoal):\n 1. stocks (discrete_market_of S A) = S", "hence fct: \"((if (stk_strict_subs S) then S else {}), A) \\<in> {(s, a). stk_strict_subs s}\""], ["proof (prove)\nusing this:\n  stk_strict_subs S\n\ngoal (1 subgoal):\n 1. (if stk_strict_subs S then S else {}, A)\n    \\<in> {(s, a). stk_strict_subs s}", "by simp"], ["proof (state)\nthis:\n  (if stk_strict_subs S then S else {}, A) \\<in> {(s, a). stk_strict_subs s}\n\ngoal (1 subgoal):\n 1. stocks (discrete_market_of S A) = S", "have \"discrete_market_of S A = Abs_discrete_market (if (stk_strict_subs S) then S else {}, A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. discrete_market_of S A =\n    Abs_discrete_market (if stk_strict_subs S then S else {}, A)", "unfolding discrete_market_of_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. Abs_discrete_market (if stk_strict_subs S then S else {}, A) =\n    Abs_discrete_market (if stk_strict_subs S then S else {}, A)", "by simp"], ["proof (state)\nthis:\n  discrete_market_of S A =\n  Abs_discrete_market (if stk_strict_subs S then S else {}, A)\n\ngoal (1 subgoal):\n 1. stocks (discrete_market_of S A) = S", "hence \"Rep_discrete_market (discrete_market_of S A) = (if (stk_strict_subs S) then S else {},A)\""], ["proof (prove)\nusing this:\n  discrete_market_of S A =\n  Abs_discrete_market (if stk_strict_subs S then S else {}, A)\n\ngoal (1 subgoal):\n 1. Rep_discrete_market (discrete_market_of S A) =\n    (if stk_strict_subs S then S else {}, A)", "using Abs_discrete_market_inverse[of \"(if (stk_strict_subs S) then S else {}, A)\"] fct"], ["proof (prove)\nusing this:\n  discrete_market_of S A =\n  Abs_discrete_market (if stk_strict_subs S then S else {}, A)\n  (if stk_strict_subs S then S else {}, A)\n  \\<in> {(s, a). stk_strict_subs s} \\<Longrightarrow>\n  Rep_discrete_market\n   (Abs_discrete_market (if stk_strict_subs S then S else {}, A)) =\n  (if stk_strict_subs S then S else {}, A)\n  (if stk_strict_subs S then S else {}, A) \\<in> {(s, a). stk_strict_subs s}\n\ngoal (1 subgoal):\n 1. Rep_discrete_market (discrete_market_of S A) =\n    (if stk_strict_subs S then S else {}, A)", "by simp"], ["proof (state)\nthis:\n  Rep_discrete_market (discrete_market_of S A) =\n  (if stk_strict_subs S then S else {}, A)\n\ngoal (1 subgoal):\n 1. stocks (discrete_market_of S A) = S", "thus ?thesis"], ["proof (prove)\nusing this:\n  Rep_discrete_market (discrete_market_of S A) =\n  (if stk_strict_subs S then S else {}, A)\n\ngoal (1 subgoal):\n 1. stocks (discrete_market_of S A) = S", "unfolding stocks_def"], ["proof (prove)\nusing this:\n  Rep_discrete_market (discrete_market_of S A) =\n  (if stk_strict_subs S then S else {}, A)\n\ngoal (1 subgoal):\n 1. fst (Rep_discrete_market (discrete_market_of S A)) = S", "using \\<open>stk_strict_subs S\\<close>"], ["proof (prove)\nusing this:\n  Rep_discrete_market (discrete_market_of S A) =\n  (if stk_strict_subs S then S else {}, A)\n  stk_strict_subs S\n\ngoal (1 subgoal):\n 1. fst (Rep_discrete_market (discrete_market_of S A)) = S", "by simp"], ["proof (state)\nthis:\n  stocks (discrete_market_of S A) = S\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma mkt_stocks_assets:\n  shows \"stk_strict_subs (stocks Mkt)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. stk_strict_subs (stocks Mkt)", "unfolding stocks_def prices_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. stk_strict_subs (fst (Rep_discrete_market Mkt))", "by (metis Rep_discrete_market mem_Collect_eq split_beta')"], ["", "subsubsection \\<open>Quantity processes and portfolios\\<close>"], ["", "text \\<open>These are functions that assign quantities to assets; each quantity is a stochastic process. Basic\noperations are defined on these processes.\\<close>"], ["", "paragraph \\<open>Basic operations\\<close>"], ["", "definition qty_empty where\n  \"qty_empty = (\\<lambda> (x::'a) (n::nat) w. 0::real)\""], ["", "definition qty_single where\n  \"qty_single asset qt_proc = (qty_empty(asset := qt_proc))\""], ["", "definition qty_sum::\"('b \\<Rightarrow> nat \\<Rightarrow> 'a \\<Rightarrow> real) \\<Rightarrow> ('b \\<Rightarrow> nat \\<Rightarrow> 'a \\<Rightarrow> real) \\<Rightarrow> ('b \\<Rightarrow> nat \\<Rightarrow> 'a \\<Rightarrow> real)\"  where\n  \"qty_sum pf1 pf2 = (\\<lambda>x n w. pf1 x n w + pf2 x n w)\""], ["", "definition qty_mult_comp::\"('b \\<Rightarrow> nat \\<Rightarrow> 'a \\<Rightarrow> real) \\<Rightarrow> (nat \\<Rightarrow> 'a \\<Rightarrow> real) \\<Rightarrow> ('b \\<Rightarrow> nat \\<Rightarrow> 'a \\<Rightarrow> real)\"  where\n  \"qty_mult_comp pf1 qty = (\\<lambda>x n w. (pf1 x n w) * (qty n w))\""], ["", "definition qty_rem_comp::\"('b \\<Rightarrow> nat \\<Rightarrow> 'a \\<Rightarrow> real) \\<Rightarrow> 'b \\<Rightarrow> ('b \\<Rightarrow> nat \\<Rightarrow> 'a \\<Rightarrow> real)\"  where\n  \"qty_rem_comp pf1 x = pf1(x:=(\\<lambda>n w. 0))\""], ["", "definition qty_replace_comp where\n  \"qty_replace_comp pf1 x pf2 = qty_sum (qty_rem_comp pf1 x) (qty_mult_comp pf2 (pf1 x))\""], ["", "paragraph \\<open>Support sets\\<close>"], ["", "text \\<open>If p x n w is different from 0, this means that this quantity is held on interval ]n-1, n].\\<close>"], ["", "definition support_set::\"('b \\<Rightarrow> nat \\<Rightarrow> 'a \\<Rightarrow> real) \\<Rightarrow> 'b set\" where\n  \"support_set p = {x. \\<exists> n w. p x n w \\<noteq> 0}\""], ["", "lemma qty_empty_support_set:\n  shows \"support_set qty_empty = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. support_set qty_empty = {}", "unfolding support_set_def qty_empty_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {x. \\<exists>n w. 0 \\<noteq> 0} = {}", "by simp"], ["", "lemma sum_support_set:\n  shows \"support_set (qty_sum pf1 pf2) \\<subseteq> (support_set pf1) \\<union> (support_set pf2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. support_set (qty_sum pf1 pf2)\n    \\<subseteq> support_set pf1 \\<union> support_set pf2", "proof (intro subsetI, rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> support_set (qty_sum pf1 pf2);\n        x \\<notin> support_set pf1 \\<union> support_set pf2\\<rbrakk>\n       \\<Longrightarrow> False", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> support_set (qty_sum pf1 pf2);\n        x \\<notin> support_set pf1 \\<union> support_set pf2\\<rbrakk>\n       \\<Longrightarrow> False", "assume \"x\\<in> support_set (qty_sum pf1 pf2)\" and \"x \\<notin> support_set pf1 \\<union> support_set pf2\""], ["proof (state)\nthis:\n  x \\<in> support_set (qty_sum pf1 pf2)\n  x \\<notin> support_set pf1 \\<union> support_set pf2\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> support_set (qty_sum pf1 pf2);\n        x \\<notin> support_set pf1 \\<union> support_set pf2\\<rbrakk>\n       \\<Longrightarrow> False", "note xprops = this"], ["proof (state)\nthis:\n  x \\<in> support_set (qty_sum pf1 pf2)\n  x \\<notin> support_set pf1 \\<union> support_set pf2\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> support_set (qty_sum pf1 pf2);\n        x \\<notin> support_set pf1 \\<union> support_set pf2\\<rbrakk>\n       \\<Longrightarrow> False", "hence \"\\<exists> n w. (qty_sum pf1 pf2) x n w \\<noteq> 0\""], ["proof (prove)\nusing this:\n  x \\<in> support_set (qty_sum pf1 pf2)\n  x \\<notin> support_set pf1 \\<union> support_set pf2\n\ngoal (1 subgoal):\n 1. \\<exists>n w. qty_sum pf1 pf2 x n w \\<noteq> 0", "by (simp add: support_set_def)"], ["proof (state)\nthis:\n  \\<exists>n w. qty_sum pf1 pf2 x n w \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> support_set (qty_sum pf1 pf2);\n        x \\<notin> support_set pf1 \\<union> support_set pf2\\<rbrakk>\n       \\<Longrightarrow> False", "from this"], ["proof (chain)\npicking this:\n  \\<exists>n w. qty_sum pf1 pf2 x n w \\<noteq> 0", "obtain n w where \"(qty_sum pf1 pf2) x n w \\<noteq> 0\""], ["proof (prove)\nusing this:\n  \\<exists>n w. qty_sum pf1 pf2 x n w \\<noteq> 0\n\ngoal (1 subgoal):\n 1. (\\<And>n w.\n        qty_sum pf1 pf2 x n w \\<noteq> 0 \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  qty_sum pf1 pf2 x n w \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> support_set (qty_sum pf1 pf2);\n        x \\<notin> support_set pf1 \\<union> support_set pf2\\<rbrakk>\n       \\<Longrightarrow> False", "note nwprops = this"], ["proof (state)\nthis:\n  qty_sum pf1 pf2 x n w \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> support_set (qty_sum pf1 pf2);\n        x \\<notin> support_set pf1 \\<union> support_set pf2\\<rbrakk>\n       \\<Longrightarrow> False", "have \"pf1 x n w = 0\" \"pf2 x n w = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pf1 x n w = 0 &&& pf2 x n w = 0", "using xprops"], ["proof (prove)\nusing this:\n  x \\<in> support_set (qty_sum pf1 pf2)\n  x \\<notin> support_set pf1 \\<union> support_set pf2\n\ngoal (1 subgoal):\n 1. pf1 x n w = 0 &&& pf2 x n w = 0", "by (auto simp add:support_set_def)"], ["proof (state)\nthis:\n  pf1 x n w = 0\n  pf2 x n w = 0\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> support_set (qty_sum pf1 pf2);\n        x \\<notin> support_set pf1 \\<union> support_set pf2\\<rbrakk>\n       \\<Longrightarrow> False", "hence \"(qty_sum pf1 pf2) x n w = 0\""], ["proof (prove)\nusing this:\n  pf1 x n w = 0\n  pf2 x n w = 0\n\ngoal (1 subgoal):\n 1. qty_sum pf1 pf2 x n w = 0", "unfolding qty_sum_def"], ["proof (prove)\nusing this:\n  pf1 x n w = 0\n  pf2 x n w = 0\n\ngoal (1 subgoal):\n 1. pf1 x n w + pf2 x n w = 0", "by simp"], ["proof (state)\nthis:\n  qty_sum pf1 pf2 x n w = 0\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> support_set (qty_sum pf1 pf2);\n        x \\<notin> support_set pf1 \\<union> support_set pf2\\<rbrakk>\n       \\<Longrightarrow> False", "thus False"], ["proof (prove)\nusing this:\n  qty_sum pf1 pf2 x n w = 0\n\ngoal (1 subgoal):\n 1. False", "using nwprops"], ["proof (prove)\nusing this:\n  qty_sum pf1 pf2 x n w = 0\n  qty_sum pf1 pf2 x n w \\<noteq> 0\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma mult_comp_support_set:\nshows \"support_set (qty_mult_comp pf1 qty) \\<subseteq> (support_set pf1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. support_set (qty_mult_comp pf1 qty) \\<subseteq> support_set pf1", "proof (intro subsetI, rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> support_set (qty_mult_comp pf1 qty);\n        x \\<notin> support_set pf1\\<rbrakk>\n       \\<Longrightarrow> False", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> support_set (qty_mult_comp pf1 qty);\n        x \\<notin> support_set pf1\\<rbrakk>\n       \\<Longrightarrow> False", "assume \"x\\<in> support_set (qty_mult_comp pf1 qty)\" and \"x \\<notin> support_set pf1\""], ["proof (state)\nthis:\n  x \\<in> support_set (qty_mult_comp pf1 qty)\n  x \\<notin> support_set pf1\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> support_set (qty_mult_comp pf1 qty);\n        x \\<notin> support_set pf1\\<rbrakk>\n       \\<Longrightarrow> False", "note xprops = this"], ["proof (state)\nthis:\n  x \\<in> support_set (qty_mult_comp pf1 qty)\n  x \\<notin> support_set pf1\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> support_set (qty_mult_comp pf1 qty);\n        x \\<notin> support_set pf1\\<rbrakk>\n       \\<Longrightarrow> False", "hence \"\\<exists> n w. (qty_mult_comp pf1 qty) x n w \\<noteq> 0\""], ["proof (prove)\nusing this:\n  x \\<in> support_set (qty_mult_comp pf1 qty)\n  x \\<notin> support_set pf1\n\ngoal (1 subgoal):\n 1. \\<exists>n w. qty_mult_comp pf1 qty x n w \\<noteq> 0", "by (simp add: support_set_def)"], ["proof (state)\nthis:\n  \\<exists>n w. qty_mult_comp pf1 qty x n w \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> support_set (qty_mult_comp pf1 qty);\n        x \\<notin> support_set pf1\\<rbrakk>\n       \\<Longrightarrow> False", "from this"], ["proof (chain)\npicking this:\n  \\<exists>n w. qty_mult_comp pf1 qty x n w \\<noteq> 0", "obtain n w where \"qty_mult_comp pf1 qty x n w \\<noteq> 0\""], ["proof (prove)\nusing this:\n  \\<exists>n w. qty_mult_comp pf1 qty x n w \\<noteq> 0\n\ngoal (1 subgoal):\n 1. (\\<And>n w.\n        qty_mult_comp pf1 qty x n w \\<noteq> 0 \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  qty_mult_comp pf1 qty x n w \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> support_set (qty_mult_comp pf1 qty);\n        x \\<notin> support_set pf1\\<rbrakk>\n       \\<Longrightarrow> False", "note nwprops = this"], ["proof (state)\nthis:\n  qty_mult_comp pf1 qty x n w \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> support_set (qty_mult_comp pf1 qty);\n        x \\<notin> support_set pf1\\<rbrakk>\n       \\<Longrightarrow> False", "have \"pf1 x n w = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pf1 x n w = 0", "using xprops"], ["proof (prove)\nusing this:\n  x \\<in> support_set (qty_mult_comp pf1 qty)\n  x \\<notin> support_set pf1\n\ngoal (1 subgoal):\n 1. pf1 x n w = 0", "by (simp add:support_set_def)"], ["proof (state)\nthis:\n  pf1 x n w = 0\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> support_set (qty_mult_comp pf1 qty);\n        x \\<notin> support_set pf1\\<rbrakk>\n       \\<Longrightarrow> False", "hence \"(qty_mult_comp pf1 qty) x n w = 0\""], ["proof (prove)\nusing this:\n  pf1 x n w = 0\n\ngoal (1 subgoal):\n 1. qty_mult_comp pf1 qty x n w = 0", "unfolding qty_mult_comp_def"], ["proof (prove)\nusing this:\n  pf1 x n w = 0\n\ngoal (1 subgoal):\n 1. pf1 x n w * qty n w = 0", "by simp"], ["proof (state)\nthis:\n  qty_mult_comp pf1 qty x n w = 0\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> support_set (qty_mult_comp pf1 qty);\n        x \\<notin> support_set pf1\\<rbrakk>\n       \\<Longrightarrow> False", "thus False"], ["proof (prove)\nusing this:\n  qty_mult_comp pf1 qty x n w = 0\n\ngoal (1 subgoal):\n 1. False", "using nwprops"], ["proof (prove)\nusing this:\n  qty_mult_comp pf1 qty x n w = 0\n  qty_mult_comp pf1 qty x n w \\<noteq> 0\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma remove_comp_support_set:\nshows \"support_set (qty_rem_comp pf1 x) \\<subseteq> ((support_set pf1) - {x})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. support_set (qty_rem_comp pf1 x) \\<subseteq> support_set pf1 - {x}", "proof (intro subsetI, rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>xa \\<in> support_set (qty_rem_comp pf1 x);\n        xa \\<notin> support_set pf1 - {x}\\<rbrakk>\n       \\<Longrightarrow> False", "fix y"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>xa \\<in> support_set (qty_rem_comp pf1 x);\n        xa \\<notin> support_set pf1 - {x}\\<rbrakk>\n       \\<Longrightarrow> False", "assume \"y\\<in> support_set (qty_rem_comp pf1 x)\" and \"y \\<notin> support_set pf1 - {x}\""], ["proof (state)\nthis:\n  y \\<in> support_set (qty_rem_comp pf1 x)\n  y \\<notin> support_set pf1 - {x}\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>xa \\<in> support_set (qty_rem_comp pf1 x);\n        xa \\<notin> support_set pf1 - {x}\\<rbrakk>\n       \\<Longrightarrow> False", "note xprops = this"], ["proof (state)\nthis:\n  y \\<in> support_set (qty_rem_comp pf1 x)\n  y \\<notin> support_set pf1 - {x}\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>xa \\<in> support_set (qty_rem_comp pf1 x);\n        xa \\<notin> support_set pf1 - {x}\\<rbrakk>\n       \\<Longrightarrow> False", "hence \"y\\<notin> support_set pf1 \\<or> y = x\""], ["proof (prove)\nusing this:\n  y \\<in> support_set (qty_rem_comp pf1 x)\n  y \\<notin> support_set pf1 - {x}\n\ngoal (1 subgoal):\n 1. y \\<notin> support_set pf1 \\<or> y = x", "by simp"], ["proof (state)\nthis:\n  y \\<notin> support_set pf1 \\<or> y = x\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>xa \\<in> support_set (qty_rem_comp pf1 x);\n        xa \\<notin> support_set pf1 - {x}\\<rbrakk>\n       \\<Longrightarrow> False", "have \"\\<exists> n w. (qty_rem_comp pf1 x) y n w \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>n w. qty_rem_comp pf1 x y n w \\<noteq> 0", "using xprops"], ["proof (prove)\nusing this:\n  y \\<in> support_set (qty_rem_comp pf1 x)\n  y \\<notin> support_set pf1 - {x}\n\ngoal (1 subgoal):\n 1. \\<exists>n w. qty_rem_comp pf1 x y n w \\<noteq> 0", "by (simp add: support_set_def)"], ["proof (state)\nthis:\n  \\<exists>n w. qty_rem_comp pf1 x y n w \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>xa \\<in> support_set (qty_rem_comp pf1 x);\n        xa \\<notin> support_set pf1 - {x}\\<rbrakk>\n       \\<Longrightarrow> False", "from this"], ["proof (chain)\npicking this:\n  \\<exists>n w. qty_rem_comp pf1 x y n w \\<noteq> 0", "obtain n w where \"(qty_rem_comp pf1 x) y n w \\<noteq> 0\""], ["proof (prove)\nusing this:\n  \\<exists>n w. qty_rem_comp pf1 x y n w \\<noteq> 0\n\ngoal (1 subgoal):\n 1. (\\<And>n w.\n        qty_rem_comp pf1 x y n w \\<noteq> 0 \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  qty_rem_comp pf1 x y n w \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>xa \\<in> support_set (qty_rem_comp pf1 x);\n        xa \\<notin> support_set pf1 - {x}\\<rbrakk>\n       \\<Longrightarrow> False", "note nwprops = this"], ["proof (state)\nthis:\n  qty_rem_comp pf1 x y n w \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>xa \\<in> support_set (qty_rem_comp pf1 x);\n        xa \\<notin> support_set pf1 - {x}\\<rbrakk>\n       \\<Longrightarrow> False", "show False"], ["proof (prove)\ngoal (1 subgoal):\n 1. False", "proof (cases \"y\\<notin> support_set pf1\")"], ["proof (state)\ngoal (2 subgoals):\n 1. y \\<notin> support_set pf1 \\<Longrightarrow> False\n 2. \\<not> y \\<notin> support_set pf1 \\<Longrightarrow> False", "case True"], ["proof (state)\nthis:\n  y \\<notin> support_set pf1\n\ngoal (2 subgoals):\n 1. y \\<notin> support_set pf1 \\<Longrightarrow> False\n 2. \\<not> y \\<notin> support_set pf1 \\<Longrightarrow> False", "hence \"pf1 y n w = 0\""], ["proof (prove)\nusing this:\n  y \\<notin> support_set pf1\n\ngoal (1 subgoal):\n 1. pf1 y n w = 0", "using xprops"], ["proof (prove)\nusing this:\n  y \\<notin> support_set pf1\n  y \\<in> support_set (qty_rem_comp pf1 x)\n  y \\<notin> support_set pf1 - {x}\n\ngoal (1 subgoal):\n 1. pf1 y n w = 0", "by (simp add:support_set_def)"], ["proof (state)\nthis:\n  pf1 y n w = 0\n\ngoal (2 subgoals):\n 1. y \\<notin> support_set pf1 \\<Longrightarrow> False\n 2. \\<not> y \\<notin> support_set pf1 \\<Longrightarrow> False", "hence \"(qty_rem_comp pf1 x) x n w = 0\""], ["proof (prove)\nusing this:\n  pf1 y n w = 0\n\ngoal (1 subgoal):\n 1. qty_rem_comp pf1 x x n w = 0", "unfolding qty_rem_comp_def"], ["proof (prove)\nusing this:\n  pf1 y n w = 0\n\ngoal (1 subgoal):\n 1. (pf1(x := \\<lambda>n w. 0)) x n w = 0", "by simp"], ["proof (state)\nthis:\n  qty_rem_comp pf1 x x n w = 0\n\ngoal (2 subgoals):\n 1. y \\<notin> support_set pf1 \\<Longrightarrow> False\n 2. \\<not> y \\<notin> support_set pf1 \\<Longrightarrow> False", "thus ?thesis"], ["proof (prove)\nusing this:\n  qty_rem_comp pf1 x x n w = 0\n\ngoal (1 subgoal):\n 1. False", "using nwprops"], ["proof (prove)\nusing this:\n  qty_rem_comp pf1 x x n w = 0\n  qty_rem_comp pf1 x y n w \\<noteq> 0\n\ngoal (1 subgoal):\n 1. False", "by (metis \\<open>pf1 y n w = 0\\<close> fun_upd_apply qty_rem_comp_def)"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<not> y \\<notin> support_set pf1 \\<Longrightarrow> False", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> y \\<notin> support_set pf1 \\<Longrightarrow> False", "case False"], ["proof (state)\nthis:\n  \\<not> y \\<notin> support_set pf1\n\ngoal (1 subgoal):\n 1. \\<not> y \\<notin> support_set pf1 \\<Longrightarrow> False", "hence \"y = x\""], ["proof (prove)\nusing this:\n  \\<not> y \\<notin> support_set pf1\n\ngoal (1 subgoal):\n 1. y = x", "using \\<open>y\\<notin> support_set pf1 \\<or> y = x\\<close>"], ["proof (prove)\nusing this:\n  \\<not> y \\<notin> support_set pf1\n  y \\<notin> support_set pf1 \\<or> y = x\n\ngoal (1 subgoal):\n 1. y = x", "by simp"], ["proof (state)\nthis:\n  y = x\n\ngoal (1 subgoal):\n 1. \\<not> y \\<notin> support_set pf1 \\<Longrightarrow> False", "hence \"(qty_rem_comp pf1 x) x n w = 0\""], ["proof (prove)\nusing this:\n  y = x\n\ngoal (1 subgoal):\n 1. qty_rem_comp pf1 x x n w = 0", "unfolding qty_rem_comp_def"], ["proof (prove)\nusing this:\n  y = x\n\ngoal (1 subgoal):\n 1. (pf1(x := \\<lambda>n w. 0)) x n w = 0", "by simp"], ["proof (state)\nthis:\n  qty_rem_comp pf1 x x n w = 0\n\ngoal (1 subgoal):\n 1. \\<not> y \\<notin> support_set pf1 \\<Longrightarrow> False", "thus ?thesis"], ["proof (prove)\nusing this:\n  qty_rem_comp pf1 x x n w = 0\n\ngoal (1 subgoal):\n 1. False", "using nwprops"], ["proof (prove)\nusing this:\n  qty_rem_comp pf1 x x n w = 0\n  qty_rem_comp pf1 x y n w \\<noteq> 0\n\ngoal (1 subgoal):\n 1. False", "by (simp add: \\<open>y = x\\<close>)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma replace_comp_support_set:\n  shows \"support_set (qty_replace_comp pf1 x pf2) \\<subseteq> (support_set pf1 - {x}) \\<union> support_set pf2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. support_set (qty_replace_comp pf1 x pf2)\n    \\<subseteq> support_set pf1 - {x} \\<union> support_set pf2", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. support_set (qty_replace_comp pf1 x pf2)\n    \\<subseteq> support_set pf1 - {x} \\<union> support_set pf2", "have \"support_set (qty_replace_comp pf1 x pf2) \\<subseteq> support_set (qty_rem_comp pf1 x) \\<union> support_set (qty_mult_comp pf2 (pf1 x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. support_set (qty_replace_comp pf1 x pf2)\n    \\<subseteq> support_set (qty_rem_comp pf1 x) \\<union>\n                support_set (qty_mult_comp pf2 (pf1 x))", "unfolding qty_replace_comp_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. support_set (qty_sum (qty_rem_comp pf1 x) (qty_mult_comp pf2 (pf1 x)))\n    \\<subseteq> support_set (qty_rem_comp pf1 x) \\<union>\n                support_set (qty_mult_comp pf2 (pf1 x))", "by (simp add:sum_support_set)"], ["proof (state)\nthis:\n  support_set (qty_replace_comp pf1 x pf2)\n  \\<subseteq> support_set (qty_rem_comp pf1 x) \\<union>\n              support_set (qty_mult_comp pf2 (pf1 x))\n\ngoal (1 subgoal):\n 1. support_set (qty_replace_comp pf1 x pf2)\n    \\<subseteq> support_set pf1 - {x} \\<union> support_set pf2", "also"], ["proof (state)\nthis:\n  support_set (qty_replace_comp pf1 x pf2)\n  \\<subseteq> support_set (qty_rem_comp pf1 x) \\<union>\n              support_set (qty_mult_comp pf2 (pf1 x))\n\ngoal (1 subgoal):\n 1. support_set (qty_replace_comp pf1 x pf2)\n    \\<subseteq> support_set pf1 - {x} \\<union> support_set pf2", "have \"... \\<subseteq> (support_set pf1 - {x}) \\<union> support_set pf2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. support_set (qty_rem_comp pf1 x) \\<union>\n    support_set (qty_mult_comp pf2 (pf1 x))\n    \\<subseteq> support_set pf1 - {x} \\<union> support_set pf2", "using remove_comp_support_set mult_comp_support_set"], ["proof (prove)\nusing this:\n  support_set (qty_rem_comp ?pf1.0 ?x) \\<subseteq> support_set ?pf1.0 - {?x}\n  support_set (qty_mult_comp ?pf1.0 ?qty) \\<subseteq> support_set ?pf1.0\n\ngoal (1 subgoal):\n 1. support_set (qty_rem_comp pf1 x) \\<union>\n    support_set (qty_mult_comp pf2 (pf1 x))\n    \\<subseteq> support_set pf1 - {x} \\<union> support_set pf2", "by (metis sup.mono)"], ["proof (state)\nthis:\n  support_set (qty_rem_comp pf1 x) \\<union>\n  support_set (qty_mult_comp pf2 (pf1 x))\n  \\<subseteq> support_set pf1 - {x} \\<union> support_set pf2\n\ngoal (1 subgoal):\n 1. support_set (qty_replace_comp pf1 x pf2)\n    \\<subseteq> support_set pf1 - {x} \\<union> support_set pf2", "finally"], ["proof (chain)\npicking this:\n  support_set (qty_replace_comp pf1 x pf2)\n  \\<subseteq> support_set pf1 - {x} \\<union> support_set pf2", "show ?thesis"], ["proof (prove)\nusing this:\n  support_set (qty_replace_comp pf1 x pf2)\n  \\<subseteq> support_set pf1 - {x} \\<union> support_set pf2\n\ngoal (1 subgoal):\n 1. support_set (qty_replace_comp pf1 x pf2)\n    \\<subseteq> support_set pf1 - {x} \\<union> support_set pf2", "."], ["proof (state)\nthis:\n  support_set (qty_replace_comp pf1 x pf2)\n  \\<subseteq> support_set pf1 - {x} \\<union> support_set pf2\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma single_comp_support:\n  shows \"support_set (qty_single asset qty) \\<subseteq> {asset}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. support_set (qty_single asset qty) \\<subseteq> {asset}", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> support_set (qty_single asset qty) \\<Longrightarrow>\n       x \\<in> {asset}", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> support_set (qty_single asset qty) \\<Longrightarrow>\n       x \\<in> {asset}", "assume \"x\\<in> support_set (qty_single asset qty)\""], ["proof (state)\nthis:\n  x \\<in> support_set (qty_single asset qty)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> support_set (qty_single asset qty) \\<Longrightarrow>\n       x \\<in> {asset}", "show \"x\\<in> {asset}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> {asset}", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<notin> {asset} \\<Longrightarrow> False", "assume \"x\\<notin> {asset}\""], ["proof (state)\nthis:\n  x \\<notin> {asset}\n\ngoal (1 subgoal):\n 1. x \\<notin> {asset} \\<Longrightarrow> False", "hence \"x\\<noteq> asset\""], ["proof (prove)\nusing this:\n  x \\<notin> {asset}\n\ngoal (1 subgoal):\n 1. x \\<noteq> asset", "by auto"], ["proof (state)\nthis:\n  x \\<noteq> asset\n\ngoal (1 subgoal):\n 1. x \\<notin> {asset} \\<Longrightarrow> False", "have \"\\<exists> n w. qty_single asset qty x n w \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>n w. qty_single asset qty x n w \\<noteq> 0", "using \\<open>x\\<in> support_set (qty_single asset qty)\\<close>"], ["proof (prove)\nusing this:\n  x \\<in> support_set (qty_single asset qty)\n\ngoal (1 subgoal):\n 1. \\<exists>n w. qty_single asset qty x n w \\<noteq> 0", "by (simp add:support_set_def)"], ["proof (state)\nthis:\n  \\<exists>n w. qty_single asset qty x n w \\<noteq> 0\n\ngoal (1 subgoal):\n 1. x \\<notin> {asset} \\<Longrightarrow> False", "from this"], ["proof (chain)\npicking this:\n  \\<exists>n w. qty_single asset qty x n w \\<noteq> 0", "obtain n w where \"qty_single asset qty x n w \\<noteq> 0\""], ["proof (prove)\nusing this:\n  \\<exists>n w. qty_single asset qty x n w \\<noteq> 0\n\ngoal (1 subgoal):\n 1. (\\<And>n w.\n        qty_single asset qty x n w \\<noteq> 0 \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  qty_single asset qty x n w \\<noteq> 0\n\ngoal (1 subgoal):\n 1. x \\<notin> {asset} \\<Longrightarrow> False", "thus False"], ["proof (prove)\nusing this:\n  qty_single asset qty x n w \\<noteq> 0\n\ngoal (1 subgoal):\n 1. False", "using \\<open>x\\<noteq>asset\\<close>"], ["proof (prove)\nusing this:\n  qty_single asset qty x n w \\<noteq> 0\n  x \\<noteq> asset\n\ngoal (1 subgoal):\n 1. False", "by (simp add: qty_single_def qty_empty_def)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  x \\<in> {asset}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma single_comp_nz_support:\n  assumes \"\\<exists> n w. qty n w\\<noteq> 0\"\n  shows \"support_set (qty_single asset qty) = {asset}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. support_set (qty_single asset qty) = {asset}", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. support_set (qty_single asset qty) \\<subseteq> {asset}\n 2. {asset} \\<subseteq> support_set (qty_single asset qty)", "show \"support_set (qty_single asset qty) \\<subseteq> {asset}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. support_set (qty_single asset qty) \\<subseteq> {asset}", "by (simp add: single_comp_support)"], ["proof (state)\nthis:\n  support_set (qty_single asset qty) \\<subseteq> {asset}\n\ngoal (1 subgoal):\n 1. {asset} \\<subseteq> support_set (qty_single asset qty)", "have \"asset\\<in> support_set (qty_single asset qty)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. asset \\<in> support_set (qty_single asset qty)", "using assms"], ["proof (prove)\nusing this:\n  \\<exists>n w. qty n w \\<noteq> 0\n\ngoal (1 subgoal):\n 1. asset \\<in> support_set (qty_single asset qty)", "unfolding support_set_def qty_single_def"], ["proof (prove)\nusing this:\n  \\<exists>n w. qty n w \\<noteq> 0\n\ngoal (1 subgoal):\n 1. asset\n    \\<in> {x. \\<exists>n w. (qty_empty(asset := qty)) x n w \\<noteq> 0}", "by simp"], ["proof (state)\nthis:\n  asset \\<in> support_set (qty_single asset qty)\n\ngoal (1 subgoal):\n 1. {asset} \\<subseteq> support_set (qty_single asset qty)", "thus \"{asset} \\<subseteq> support_set (qty_single asset qty)\""], ["proof (prove)\nusing this:\n  asset \\<in> support_set (qty_single asset qty)\n\ngoal (1 subgoal):\n 1. {asset} \\<subseteq> support_set (qty_single asset qty)", "by auto"], ["proof (state)\nthis:\n  {asset} \\<subseteq> support_set (qty_single asset qty)\n\ngoal:\nNo subgoals!", "qed"], ["", "paragraph \\<open>Portfolios\\<close>"], ["", "definition portfolio where\n  \"portfolio p \\<longleftrightarrow> finite (support_set p)\""], ["", "definition stock_portfolio :: \"('a, 'b) discrete_market \\<Rightarrow> ('b \\<Rightarrow> nat \\<Rightarrow> 'a \\<Rightarrow> real) \\<Rightarrow> bool\" where\n  \"stock_portfolio Mkt p \\<longleftrightarrow> portfolio p \\<and> support_set p \\<subseteq> stocks Mkt\""], ["", "lemma sum_portfolio:\n  assumes \"portfolio pf1\"\n  and \"portfolio pf2\"\nshows \"portfolio (qty_sum pf1 pf2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. portfolio (qty_sum pf1 pf2)", "unfolding portfolio_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (support_set (qty_sum pf1 pf2))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. finite (support_set (qty_sum pf1 pf2))", "have \"support_set (qty_sum pf1 pf2) \\<subseteq> (support_set pf1) \\<union> (support_set pf2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. support_set (qty_sum pf1 pf2)\n    \\<subseteq> support_set pf1 \\<union> support_set pf2", "by (simp add: sum_support_set)"], ["proof (state)\nthis:\n  support_set (qty_sum pf1 pf2)\n  \\<subseteq> support_set pf1 \\<union> support_set pf2\n\ngoal (1 subgoal):\n 1. finite (support_set (qty_sum pf1 pf2))", "thus \"finite (support_set (qty_sum pf1 pf2))\""], ["proof (prove)\nusing this:\n  support_set (qty_sum pf1 pf2)\n  \\<subseteq> support_set pf1 \\<union> support_set pf2\n\ngoal (1 subgoal):\n 1. finite (support_set (qty_sum pf1 pf2))", "using assms"], ["proof (prove)\nusing this:\n  support_set (qty_sum pf1 pf2)\n  \\<subseteq> support_set pf1 \\<union> support_set pf2\n  portfolio pf1\n  portfolio pf2\n\ngoal (1 subgoal):\n 1. finite (support_set (qty_sum pf1 pf2))", "unfolding portfolio_def"], ["proof (prove)\nusing this:\n  support_set (qty_sum pf1 pf2)\n  \\<subseteq> support_set pf1 \\<union> support_set pf2\n  finite (support_set pf1)\n  finite (support_set pf2)\n\ngoal (1 subgoal):\n 1. finite (support_set (qty_sum pf1 pf2))", "using infinite_super"], ["proof (prove)\nusing this:\n  support_set (qty_sum pf1 pf2)\n  \\<subseteq> support_set pf1 \\<union> support_set pf2\n  finite (support_set pf1)\n  finite (support_set pf2)\n  \\<lbrakk>?S \\<subseteq> ?T; infinite ?S\\<rbrakk>\n  \\<Longrightarrow> infinite ?T\n\ngoal (1 subgoal):\n 1. finite (support_set (qty_sum pf1 pf2))", "by auto"], ["proof (state)\nthis:\n  finite (support_set (qty_sum pf1 pf2))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma sum_basic_support_set:\n  assumes \"stock_portfolio Mkt pf1\"\n  and \"stock_portfolio Mkt pf2\"\nshows \"stock_portfolio Mkt (qty_sum pf1 pf2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. stock_portfolio Mkt (qty_sum pf1 pf2)", "using assms sum_support_set[of pf1 pf2]"], ["proof (prove)\nusing this:\n  stock_portfolio Mkt pf1\n  stock_portfolio Mkt pf2\n  support_set (qty_sum pf1 pf2)\n  \\<subseteq> support_set pf1 \\<union> support_set pf2\n\ngoal (1 subgoal):\n 1. stock_portfolio Mkt (qty_sum pf1 pf2)", "unfolding stock_portfolio_def"], ["proof (prove)\nusing this:\n  portfolio pf1 \\<and> support_set pf1 \\<subseteq> stocks Mkt\n  portfolio pf2 \\<and> support_set pf2 \\<subseteq> stocks Mkt\n  support_set (qty_sum pf1 pf2)\n  \\<subseteq> support_set pf1 \\<union> support_set pf2\n\ngoal (1 subgoal):\n 1. portfolio (qty_sum pf1 pf2) \\<and>\n    support_set (qty_sum pf1 pf2) \\<subseteq> stocks Mkt", "by (metis Diff_subset_conv gfp.leq_trans subset_Un_eq sum_portfolio)"], ["", "lemma mult_comp_portfolio:\n  assumes \"portfolio pf1\"\nshows \"portfolio (qty_mult_comp pf1 qty)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. portfolio (qty_mult_comp pf1 qty)", "unfolding portfolio_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (support_set (qty_mult_comp pf1 qty))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. finite (support_set (qty_mult_comp pf1 qty))", "have \"support_set (qty_mult_comp pf1 qty) \\<subseteq> (support_set pf1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. support_set (qty_mult_comp pf1 qty) \\<subseteq> support_set pf1", "by (simp add: mult_comp_support_set)"], ["proof (state)\nthis:\n  support_set (qty_mult_comp pf1 qty) \\<subseteq> support_set pf1\n\ngoal (1 subgoal):\n 1. finite (support_set (qty_mult_comp pf1 qty))", "thus \"finite (support_set (qty_mult_comp pf1 qty))\""], ["proof (prove)\nusing this:\n  support_set (qty_mult_comp pf1 qty) \\<subseteq> support_set pf1\n\ngoal (1 subgoal):\n 1. finite (support_set (qty_mult_comp pf1 qty))", "using assms"], ["proof (prove)\nusing this:\n  support_set (qty_mult_comp pf1 qty) \\<subseteq> support_set pf1\n  portfolio pf1\n\ngoal (1 subgoal):\n 1. finite (support_set (qty_mult_comp pf1 qty))", "unfolding portfolio_def"], ["proof (prove)\nusing this:\n  support_set (qty_mult_comp pf1 qty) \\<subseteq> support_set pf1\n  finite (support_set pf1)\n\ngoal (1 subgoal):\n 1. finite (support_set (qty_mult_comp pf1 qty))", "using infinite_super"], ["proof (prove)\nusing this:\n  support_set (qty_mult_comp pf1 qty) \\<subseteq> support_set pf1\n  finite (support_set pf1)\n  \\<lbrakk>?S \\<subseteq> ?T; infinite ?S\\<rbrakk>\n  \\<Longrightarrow> infinite ?T\n\ngoal (1 subgoal):\n 1. finite (support_set (qty_mult_comp pf1 qty))", "by auto"], ["proof (state)\nthis:\n  finite (support_set (qty_mult_comp pf1 qty))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma mult_comp_basic_support_set:\n  assumes \"stock_portfolio Mkt pf1\"\nshows \"stock_portfolio Mkt (qty_mult_comp pf1 qty)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. stock_portfolio Mkt (qty_mult_comp pf1 qty)", "using assms mult_comp_support_set[of pf1]"], ["proof (prove)\nusing this:\n  stock_portfolio Mkt pf1\n  support_set (qty_mult_comp pf1 ?qty) \\<subseteq> support_set pf1\n\ngoal (1 subgoal):\n 1. stock_portfolio Mkt (qty_mult_comp pf1 qty)", "unfolding stock_portfolio_def"], ["proof (prove)\nusing this:\n  portfolio pf1 \\<and> support_set pf1 \\<subseteq> stocks Mkt\n  support_set (qty_mult_comp pf1 ?qty) \\<subseteq> support_set pf1\n\ngoal (1 subgoal):\n 1. portfolio (qty_mult_comp pf1 qty) \\<and>\n    support_set (qty_mult_comp pf1 qty) \\<subseteq> stocks Mkt", "using mult_comp_portfolio"], ["proof (prove)\nusing this:\n  portfolio pf1 \\<and> support_set pf1 \\<subseteq> stocks Mkt\n  support_set (qty_mult_comp pf1 ?qty) \\<subseteq> support_set pf1\n  portfolio ?pf1.0 \\<Longrightarrow> portfolio (qty_mult_comp ?pf1.0 ?qty)\n\ngoal (1 subgoal):\n 1. portfolio (qty_mult_comp pf1 qty) \\<and>\n    support_set (qty_mult_comp pf1 qty) \\<subseteq> stocks Mkt", "by blast"], ["", "lemma remove_comp_portfolio:\n  assumes \"portfolio pf1\"\nshows \"portfolio (qty_rem_comp pf1 x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. portfolio (qty_rem_comp pf1 x)", "unfolding portfolio_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (support_set (qty_rem_comp pf1 x))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. finite (support_set (qty_rem_comp pf1 x))", "have \"support_set (qty_rem_comp pf1 x) \\<subseteq> (support_set pf1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. support_set (qty_rem_comp pf1 x) \\<subseteq> support_set pf1", "using remove_comp_support_set[of pf1 x]"], ["proof (prove)\nusing this:\n  support_set (qty_rem_comp pf1 x) \\<subseteq> support_set pf1 - {x}\n\ngoal (1 subgoal):\n 1. support_set (qty_rem_comp pf1 x) \\<subseteq> support_set pf1", "by blast"], ["proof (state)\nthis:\n  support_set (qty_rem_comp pf1 x) \\<subseteq> support_set pf1\n\ngoal (1 subgoal):\n 1. finite (support_set (qty_rem_comp pf1 x))", "thus \"finite (support_set (qty_rem_comp pf1 x))\""], ["proof (prove)\nusing this:\n  support_set (qty_rem_comp pf1 x) \\<subseteq> support_set pf1\n\ngoal (1 subgoal):\n 1. finite (support_set (qty_rem_comp pf1 x))", "using assms"], ["proof (prove)\nusing this:\n  support_set (qty_rem_comp pf1 x) \\<subseteq> support_set pf1\n  portfolio pf1\n\ngoal (1 subgoal):\n 1. finite (support_set (qty_rem_comp pf1 x))", "unfolding portfolio_def"], ["proof (prove)\nusing this:\n  support_set (qty_rem_comp pf1 x) \\<subseteq> support_set pf1\n  finite (support_set pf1)\n\ngoal (1 subgoal):\n 1. finite (support_set (qty_rem_comp pf1 x))", "using infinite_super"], ["proof (prove)\nusing this:\n  support_set (qty_rem_comp pf1 x) \\<subseteq> support_set pf1\n  finite (support_set pf1)\n  \\<lbrakk>?S \\<subseteq> ?T; infinite ?S\\<rbrakk>\n  \\<Longrightarrow> infinite ?T\n\ngoal (1 subgoal):\n 1. finite (support_set (qty_rem_comp pf1 x))", "by auto"], ["proof (state)\nthis:\n  finite (support_set (qty_rem_comp pf1 x))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma remove_comp_basic_support_set:\n  assumes \"stock_portfolio Mkt pf1\"\nshows \"stock_portfolio Mkt (qty_mult_comp pf1 qty)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. stock_portfolio Mkt (qty_mult_comp pf1 qty)", "using assms mult_comp_support_set[of pf1]"], ["proof (prove)\nusing this:\n  stock_portfolio Mkt pf1\n  support_set (qty_mult_comp pf1 ?qty) \\<subseteq> support_set pf1\n\ngoal (1 subgoal):\n 1. stock_portfolio Mkt (qty_mult_comp pf1 qty)", "unfolding stock_portfolio_def"], ["proof (prove)\nusing this:\n  portfolio pf1 \\<and> support_set pf1 \\<subseteq> stocks Mkt\n  support_set (qty_mult_comp pf1 ?qty) \\<subseteq> support_set pf1\n\ngoal (1 subgoal):\n 1. portfolio (qty_mult_comp pf1 qty) \\<and>\n    support_set (qty_mult_comp pf1 qty) \\<subseteq> stocks Mkt", "using mult_comp_portfolio"], ["proof (prove)\nusing this:\n  portfolio pf1 \\<and> support_set pf1 \\<subseteq> stocks Mkt\n  support_set (qty_mult_comp pf1 ?qty) \\<subseteq> support_set pf1\n  portfolio ?pf1.0 \\<Longrightarrow> portfolio (qty_mult_comp ?pf1.0 ?qty)\n\ngoal (1 subgoal):\n 1. portfolio (qty_mult_comp pf1 qty) \\<and>\n    support_set (qty_mult_comp pf1 qty) \\<subseteq> stocks Mkt", "by blast"], ["", "lemma replace_comp_portfolio:\n  assumes \"portfolio pf1\"\n  and \"portfolio pf2\"\nshows \"portfolio (qty_replace_comp pf1 x pf2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. portfolio (qty_replace_comp pf1 x pf2)", "unfolding portfolio_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (support_set (qty_replace_comp pf1 x pf2))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. finite (support_set (qty_replace_comp pf1 x pf2))", "have \"support_set (qty_replace_comp pf1 x pf2) \\<subseteq> (support_set pf1) \\<union> (support_set pf2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. support_set (qty_replace_comp pf1 x pf2)\n    \\<subseteq> support_set pf1 \\<union> support_set pf2", "using replace_comp_support_set[of pf1 x pf2]"], ["proof (prove)\nusing this:\n  support_set (qty_replace_comp pf1 x pf2)\n  \\<subseteq> support_set pf1 - {x} \\<union> support_set pf2\n\ngoal (1 subgoal):\n 1. support_set (qty_replace_comp pf1 x pf2)\n    \\<subseteq> support_set pf1 \\<union> support_set pf2", "by blast"], ["proof (state)\nthis:\n  support_set (qty_replace_comp pf1 x pf2)\n  \\<subseteq> support_set pf1 \\<union> support_set pf2\n\ngoal (1 subgoal):\n 1. finite (support_set (qty_replace_comp pf1 x pf2))", "thus \"finite (support_set (qty_replace_comp pf1 x pf2))\""], ["proof (prove)\nusing this:\n  support_set (qty_replace_comp pf1 x pf2)\n  \\<subseteq> support_set pf1 \\<union> support_set pf2\n\ngoal (1 subgoal):\n 1. finite (support_set (qty_replace_comp pf1 x pf2))", "using assms"], ["proof (prove)\nusing this:\n  support_set (qty_replace_comp pf1 x pf2)\n  \\<subseteq> support_set pf1 \\<union> support_set pf2\n  portfolio pf1\n  portfolio pf2\n\ngoal (1 subgoal):\n 1. finite (support_set (qty_replace_comp pf1 x pf2))", "unfolding portfolio_def"], ["proof (prove)\nusing this:\n  support_set (qty_replace_comp pf1 x pf2)\n  \\<subseteq> support_set pf1 \\<union> support_set pf2\n  finite (support_set pf1)\n  finite (support_set pf2)\n\ngoal (1 subgoal):\n 1. finite (support_set (qty_replace_comp pf1 x pf2))", "using infinite_super"], ["proof (prove)\nusing this:\n  support_set (qty_replace_comp pf1 x pf2)\n  \\<subseteq> support_set pf1 \\<union> support_set pf2\n  finite (support_set pf1)\n  finite (support_set pf2)\n  \\<lbrakk>?S \\<subseteq> ?T; infinite ?S\\<rbrakk>\n  \\<Longrightarrow> infinite ?T\n\ngoal (1 subgoal):\n 1. finite (support_set (qty_replace_comp pf1 x pf2))", "by auto"], ["proof (state)\nthis:\n  finite (support_set (qty_replace_comp pf1 x pf2))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma replace_comp_stocks:\n  assumes \"support_set pf1 \\<subseteq> stocks Mkt \\<union> {x}\"\n  and \"support_set pf2 \\<subseteq> stocks Mkt\"\nshows \"support_set (qty_replace_comp pf1 x pf2) \\<subseteq> stocks Mkt\""], ["proof (prove)\ngoal (1 subgoal):\n 1. support_set (qty_replace_comp pf1 x pf2) \\<subseteq> stocks Mkt", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. support_set (qty_replace_comp pf1 x pf2) \\<subseteq> stocks Mkt", "have \"support_set (qty_rem_comp pf1 x) \\<subseteq> stocks Mkt\""], ["proof (prove)\ngoal (1 subgoal):\n 1. support_set (qty_rem_comp pf1 x) \\<subseteq> stocks Mkt", "using assms(1) remove_comp_support_set"], ["proof (prove)\nusing this:\n  support_set pf1 \\<subseteq> stocks Mkt \\<union> {x}\n  support_set (qty_rem_comp ?pf1.0 ?x) \\<subseteq> support_set ?pf1.0 - {?x}\n\ngoal (1 subgoal):\n 1. support_set (qty_rem_comp pf1 x) \\<subseteq> stocks Mkt", "by fastforce"], ["proof (state)\nthis:\n  support_set (qty_rem_comp pf1 x) \\<subseteq> stocks Mkt\n\ngoal (1 subgoal):\n 1. support_set (qty_replace_comp pf1 x pf2) \\<subseteq> stocks Mkt", "moreover"], ["proof (state)\nthis:\n  support_set (qty_rem_comp pf1 x) \\<subseteq> stocks Mkt\n\ngoal (1 subgoal):\n 1. support_set (qty_replace_comp pf1 x pf2) \\<subseteq> stocks Mkt", "have \"support_set (qty_mult_comp pf2 (pf1 x)) \\<subseteq> stocks Mkt\""], ["proof (prove)\ngoal (1 subgoal):\n 1. support_set (qty_mult_comp pf2 (pf1 x)) \\<subseteq> stocks Mkt", "using assms mult_comp_support_set"], ["proof (prove)\nusing this:\n  support_set pf1 \\<subseteq> stocks Mkt \\<union> {x}\n  support_set pf2 \\<subseteq> stocks Mkt\n  support_set (qty_mult_comp ?pf1.0 ?qty) \\<subseteq> support_set ?pf1.0\n\ngoal (1 subgoal):\n 1. support_set (qty_mult_comp pf2 (pf1 x)) \\<subseteq> stocks Mkt", "by fastforce"], ["proof (state)\nthis:\n  support_set (qty_mult_comp pf2 (pf1 x)) \\<subseteq> stocks Mkt\n\ngoal (1 subgoal):\n 1. support_set (qty_replace_comp pf1 x pf2) \\<subseteq> stocks Mkt", "ultimately"], ["proof (chain)\npicking this:\n  support_set (qty_rem_comp pf1 x) \\<subseteq> stocks Mkt\n  support_set (qty_mult_comp pf2 (pf1 x)) \\<subseteq> stocks Mkt", "show ?thesis"], ["proof (prove)\nusing this:\n  support_set (qty_rem_comp pf1 x) \\<subseteq> stocks Mkt\n  support_set (qty_mult_comp pf2 (pf1 x)) \\<subseteq> stocks Mkt\n\ngoal (1 subgoal):\n 1. support_set (qty_replace_comp pf1 x pf2) \\<subseteq> stocks Mkt", "unfolding qty_replace_comp_def"], ["proof (prove)\nusing this:\n  support_set (qty_rem_comp pf1 x) \\<subseteq> stocks Mkt\n  support_set (qty_mult_comp pf2 (pf1 x)) \\<subseteq> stocks Mkt\n\ngoal (1 subgoal):\n 1. support_set (qty_sum (qty_rem_comp pf1 x) (qty_mult_comp pf2 (pf1 x)))\n    \\<subseteq> stocks Mkt", "using sum_support_set"], ["proof (prove)\nusing this:\n  support_set (qty_rem_comp pf1 x) \\<subseteq> stocks Mkt\n  support_set (qty_mult_comp pf2 (pf1 x)) \\<subseteq> stocks Mkt\n  support_set (qty_sum ?pf1.0 ?pf2.0)\n  \\<subseteq> support_set ?pf1.0 \\<union> support_set ?pf2.0\n\ngoal (1 subgoal):\n 1. support_set (qty_sum (qty_rem_comp pf1 x) (qty_mult_comp pf2 (pf1 x)))\n    \\<subseteq> stocks Mkt", "by fastforce"], ["proof (state)\nthis:\n  support_set (qty_replace_comp pf1 x pf2) \\<subseteq> stocks Mkt\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma single_comp_portfolio:\n  shows \"portfolio (qty_single asset qty)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. portfolio (qty_single asset qty)", "by (meson finite.emptyI finite.insertI finite_subset portfolio_def single_comp_support)"], ["", "paragraph \\<open>Value processes\\<close>"], ["", "definition val_process where\n  \"val_process Mkt p = (if (\\<not> (portfolio p)) then (\\<lambda> n w. 0)\n    else (\\<lambda> n w . (sum (\\<lambda>x. ((prices Mkt) x n w) * (p x (Suc n) w)) (support_set p))))\""], ["", "lemma subset_val_process':\n  assumes \"finite A\"\n  and \"support_set p \\<subseteq> A\"\nshows \"val_process Mkt p n w = (sum (\\<lambda>x. ((prices Mkt) x n w) * (p x (Suc n) w)) A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. val_process Mkt p n w =\n    (\\<Sum>x\\<in>A. prices Mkt x n w * p x (Suc n) w)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. val_process Mkt p n w =\n    (\\<Sum>x\\<in>A. prices Mkt x n w * p x (Suc n) w)", "have \"portfolio p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. portfolio p", "using assms"], ["proof (prove)\nusing this:\n  finite A\n  support_set p \\<subseteq> A\n\ngoal (1 subgoal):\n 1. portfolio p", "unfolding portfolio_def"], ["proof (prove)\nusing this:\n  finite A\n  support_set p \\<subseteq> A\n\ngoal (1 subgoal):\n 1. finite (support_set p)", "using finite_subset"], ["proof (prove)\nusing this:\n  finite A\n  support_set p \\<subseteq> A\n  \\<lbrakk>?A \\<subseteq> ?B; finite ?B\\<rbrakk> \\<Longrightarrow> finite ?A\n\ngoal (1 subgoal):\n 1. finite (support_set p)", "by auto"], ["proof (state)\nthis:\n  portfolio p\n\ngoal (1 subgoal):\n 1. val_process Mkt p n w =\n    (\\<Sum>x\\<in>A. prices Mkt x n w * p x (Suc n) w)", "have \"\\<exists>C. (support_set p) \\<inter> C = {} \\<and> (support_set p) \\<union> C = A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>C.\n       support_set p \\<inter> C = {} \\<and> support_set p \\<union> C = A", "using assms(2)"], ["proof (prove)\nusing this:\n  support_set p \\<subseteq> A\n\ngoal (1 subgoal):\n 1. \\<exists>C.\n       support_set p \\<inter> C = {} \\<and> support_set p \\<union> C = A", "by auto"], ["proof (state)\nthis:\n  \\<exists>C.\n     support_set p \\<inter> C = {} \\<and> support_set p \\<union> C = A\n\ngoal (1 subgoal):\n 1. val_process Mkt p n w =\n    (\\<Sum>x\\<in>A. prices Mkt x n w * p x (Suc n) w)", "from this"], ["proof (chain)\npicking this:\n  \\<exists>C.\n     support_set p \\<inter> C = {} \\<and> support_set p \\<union> C = A", "obtain C where \"(support_set p) \\<inter> C = {}\" and \"(support_set p) \\<union> C = A\""], ["proof (prove)\nusing this:\n  \\<exists>C.\n     support_set p \\<inter> C = {} \\<and> support_set p \\<union> C = A\n\ngoal (1 subgoal):\n 1. (\\<And>C.\n        \\<lbrakk>support_set p \\<inter> C = {};\n         support_set p \\<union> C = A\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  support_set p \\<inter> C = {}\n  support_set p \\<union> C = A\n\ngoal (1 subgoal):\n 1. val_process Mkt p n w =\n    (\\<Sum>x\\<in>A. prices Mkt x n w * p x (Suc n) w)", "note Cprops = this"], ["proof (state)\nthis:\n  support_set p \\<inter> C = {}\n  support_set p \\<union> C = A\n\ngoal (1 subgoal):\n 1. val_process Mkt p n w =\n    (\\<Sum>x\\<in>A. prices Mkt x n w * p x (Suc n) w)", "have \"finite C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite C", "using assms \\<open>(support_set p) \\<union> C = A\\<close>"], ["proof (prove)\nusing this:\n  finite A\n  support_set p \\<subseteq> A\n  support_set p \\<union> C = A\n\ngoal (1 subgoal):\n 1. finite C", "by auto"], ["proof (state)\nthis:\n  finite C\n\ngoal (1 subgoal):\n 1. val_process Mkt p n w =\n    (\\<Sum>x\\<in>A. prices Mkt x n w * p x (Suc n) w)", "have \"\\<forall>x\\<in> C. p x (Suc n) w = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>C. p x (Suc n) w = 0", "using Cprops(1) support_set_def"], ["proof (prove)\nusing this:\n  support_set p \\<inter> C = {}\n  support_set ?p = {x. \\<exists>n w. ?p x n w \\<noteq> 0}\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>C. p x (Suc n) w = 0", "by fastforce"], ["proof (state)\nthis:\n  \\<forall>x\\<in>C. p x (Suc n) w = 0\n\ngoal (1 subgoal):\n 1. val_process Mkt p n w =\n    (\\<Sum>x\\<in>A. prices Mkt x n w * p x (Suc n) w)", "hence \"(\\<Sum>x\\<in> C. ((prices Mkt) x n w) * (p x (Suc n) w)) = 0\""], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>C. p x (Suc n) w = 0\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>C. prices Mkt x n w * p x (Suc n) w) = 0", "by simp"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>C. prices Mkt x n w * p x (Suc n) w) = 0\n\ngoal (1 subgoal):\n 1. val_process Mkt p n w =\n    (\\<Sum>x\\<in>A. prices Mkt x n w * p x (Suc n) w)", "hence \"val_process Mkt p n w = (\\<Sum>x\\<in> (support_set p). ((prices Mkt) x n w) * (p x (Suc n) w))\n    + (\\<Sum>x\\<in> C. ((prices Mkt) x n w) * (p x (Suc n) w))\""], ["proof (prove)\nusing this:\n  (\\<Sum>x\\<in>C. prices Mkt x n w * p x (Suc n) w) = 0\n\ngoal (1 subgoal):\n 1. val_process Mkt p n w =\n    (\\<Sum>x\\<in>support_set p. prices Mkt x n w * p x (Suc n) w) +\n    (\\<Sum>x\\<in>C. prices Mkt x n w * p x (Suc n) w)", "unfolding val_process_def"], ["proof (prove)\nusing this:\n  (\\<Sum>x\\<in>C. prices Mkt x n w * p x (Suc n) w) = 0\n\ngoal (1 subgoal):\n 1. (if \\<not> portfolio p then \\<lambda>n w. 0\n     else (\\<lambda>n w.\n              \\<Sum>x\\<in>support_set p. prices Mkt x n w * p x (Suc n) w))\n     n w =\n    (\\<Sum>x\\<in>support_set p. prices Mkt x n w * p x (Suc n) w) +\n    (\\<Sum>x\\<in>C. prices Mkt x n w * p x (Suc n) w)", "using \\<open>portfolio p\\<close>"], ["proof (prove)\nusing this:\n  (\\<Sum>x\\<in>C. prices Mkt x n w * p x (Suc n) w) = 0\n  portfolio p\n\ngoal (1 subgoal):\n 1. (if \\<not> portfolio p then \\<lambda>n w. 0\n     else (\\<lambda>n w.\n              \\<Sum>x\\<in>support_set p. prices Mkt x n w * p x (Suc n) w))\n     n w =\n    (\\<Sum>x\\<in>support_set p. prices Mkt x n w * p x (Suc n) w) +\n    (\\<Sum>x\\<in>C. prices Mkt x n w * p x (Suc n) w)", "by simp"], ["proof (state)\nthis:\n  val_process Mkt p n w =\n  (\\<Sum>x\\<in>support_set p. prices Mkt x n w * p x (Suc n) w) +\n  (\\<Sum>x\\<in>C. prices Mkt x n w * p x (Suc n) w)\n\ngoal (1 subgoal):\n 1. val_process Mkt p n w =\n    (\\<Sum>x\\<in>A. prices Mkt x n w * p x (Suc n) w)", "also"], ["proof (state)\nthis:\n  val_process Mkt p n w =\n  (\\<Sum>x\\<in>support_set p. prices Mkt x n w * p x (Suc n) w) +\n  (\\<Sum>x\\<in>C. prices Mkt x n w * p x (Suc n) w)\n\ngoal (1 subgoal):\n 1. val_process Mkt p n w =\n    (\\<Sum>x\\<in>A. prices Mkt x n w * p x (Suc n) w)", "have \"... = (\\<Sum> x\\<in> A. ((prices Mkt) x n w) * (p x (Suc n) w))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>support_set p. prices Mkt x n w * p x (Suc n) w) +\n    (\\<Sum>x\\<in>C. prices Mkt x n w * p x (Suc n) w) =\n    (\\<Sum>x\\<in>A. prices Mkt x n w * p x (Suc n) w)", "using \\<open>portfolio p\\<close> \\<open>finite C\\<close> Cprops portfolio_def sum_union_disjoint'"], ["proof (prove)\nusing this:\n  portfolio p\n  finite C\n  support_set p \\<inter> C = {}\n  support_set p \\<union> C = A\n  portfolio ?p = finite (support_set ?p)\n  \\<lbrakk>finite ?A; finite ?B; ?A \\<inter> ?B = {};\n   ?A \\<union> ?B = ?C\\<rbrakk>\n  \\<Longrightarrow> sum ?g ?C = sum ?g ?A + sum ?g ?B\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>support_set p. prices Mkt x n w * p x (Suc n) w) +\n    (\\<Sum>x\\<in>C. prices Mkt x n w * p x (Suc n) w) =\n    (\\<Sum>x\\<in>A. prices Mkt x n w * p x (Suc n) w)", "by (metis (no_types, lifting))"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>support_set p. prices Mkt x n w * p x (Suc n) w) +\n  (\\<Sum>x\\<in>C. prices Mkt x n w * p x (Suc n) w) =\n  (\\<Sum>x\\<in>A. prices Mkt x n w * p x (Suc n) w)\n\ngoal (1 subgoal):\n 1. val_process Mkt p n w =\n    (\\<Sum>x\\<in>A. prices Mkt x n w * p x (Suc n) w)", "finally"], ["proof (chain)\npicking this:\n  val_process Mkt p n w = (\\<Sum>x\\<in>A. prices Mkt x n w * p x (Suc n) w)", "show \"val_process Mkt p n w = (\\<Sum> x\\<in> A. ((prices Mkt) x n w) * (p x (Suc n) w))\""], ["proof (prove)\nusing this:\n  val_process Mkt p n w = (\\<Sum>x\\<in>A. prices Mkt x n w * p x (Suc n) w)\n\ngoal (1 subgoal):\n 1. val_process Mkt p n w =\n    (\\<Sum>x\\<in>A. prices Mkt x n w * p x (Suc n) w)", "."], ["proof (state)\nthis:\n  val_process Mkt p n w = (\\<Sum>x\\<in>A. prices Mkt x n w * p x (Suc n) w)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma sum_val_process:\n  assumes \"portfolio pf1\"\n  and \"portfolio pf2\"\nshows \"\\<forall>n w. val_process Mkt (qty_sum pf1 pf2) n w = (val_process Mkt pf1) n w + (val_process Mkt pf2) n w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n w.\n       val_process Mkt (qty_sum pf1 pf2) n w =\n       val_process Mkt pf1 n w + val_process Mkt pf2 n w", "proof (intro allI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n w.\n       val_process Mkt (qty_sum pf1 pf2) n w =\n       val_process Mkt pf1 n w + val_process Mkt pf2 n w", "fix n w"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n w.\n       val_process Mkt (qty_sum pf1 pf2) n w =\n       val_process Mkt pf1 n w + val_process Mkt pf2 n w", "have vp1: \"val_process Mkt pf1 n w = (\\<Sum> x\\<in> (support_set pf1)\\<union> (support_set pf2). ((prices Mkt) x n w) * (pf1 x (Suc n) w))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. val_process Mkt pf1 n w =\n    (\\<Sum>x\\<in>support_set pf1 \\<union> support_set pf2.\n       prices Mkt x n w * pf1 x (Suc n) w)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. val_process Mkt pf1 n w =\n    (\\<Sum>x\\<in>support_set pf1 \\<union> support_set pf2.\n       prices Mkt x n w * pf1 x (Suc n) w)", "have \"finite (support_set pf1 \\<union> support_set pf2) \\<and> support_set pf1 \\<subseteq> support_set pf1 \\<union> support_set pf2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (support_set pf1 \\<union> support_set pf2) \\<and>\n    support_set pf1 \\<subseteq> support_set pf1 \\<union> support_set pf2", "by (meson assms(1) assms(2) finite_Un portfolio_def sup.cobounded1)"], ["proof (state)\nthis:\n  finite (support_set pf1 \\<union> support_set pf2) \\<and>\n  support_set pf1 \\<subseteq> support_set pf1 \\<union> support_set pf2\n\ngoal (1 subgoal):\n 1. val_process Mkt pf1 n w =\n    (\\<Sum>x\\<in>support_set pf1 \\<union> support_set pf2.\n       prices Mkt x n w * pf1 x (Suc n) w)", "then"], ["proof (chain)\npicking this:\n  finite (support_set pf1 \\<union> support_set pf2) \\<and>\n  support_set pf1 \\<subseteq> support_set pf1 \\<union> support_set pf2", "show ?thesis"], ["proof (prove)\nusing this:\n  finite (support_set pf1 \\<union> support_set pf2) \\<and>\n  support_set pf1 \\<subseteq> support_set pf1 \\<union> support_set pf2\n\ngoal (1 subgoal):\n 1. val_process Mkt pf1 n w =\n    (\\<Sum>x\\<in>support_set pf1 \\<union> support_set pf2.\n       prices Mkt x n w * pf1 x (Suc n) w)", "by (simp add: subset_val_process')"], ["proof (state)\nthis:\n  val_process Mkt pf1 n w =\n  (\\<Sum>x\\<in>support_set pf1 \\<union> support_set pf2.\n     prices Mkt x n w * pf1 x (Suc n) w)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  val_process Mkt pf1 n w =\n  (\\<Sum>x\\<in>support_set pf1 \\<union> support_set pf2.\n     prices Mkt x n w * pf1 x (Suc n) w)\n\ngoal (1 subgoal):\n 1. \\<And>n w.\n       val_process Mkt (qty_sum pf1 pf2) n w =\n       val_process Mkt pf1 n w + val_process Mkt pf2 n w", "have vp2: \"val_process Mkt pf2 n w = (\\<Sum> x\\<in> (support_set pf1)\\<union> (support_set pf2). ((prices Mkt) x n w) * (pf2 x (Suc n) w))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. val_process Mkt pf2 n w =\n    (\\<Sum>x\\<in>support_set pf1 \\<union> support_set pf2.\n       prices Mkt x n w * pf2 x (Suc n) w)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. val_process Mkt pf2 n w =\n    (\\<Sum>x\\<in>support_set pf1 \\<union> support_set pf2.\n       prices Mkt x n w * pf2 x (Suc n) w)", "have \"finite (support_set pf1 \\<union> support_set pf2) \\<and> support_set pf2 \\<subseteq> support_set pf2 \\<union> support_set pf1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (support_set pf1 \\<union> support_set pf2) \\<and>\n    support_set pf2 \\<subseteq> support_set pf2 \\<union> support_set pf1", "by (meson assms(1) assms(2) finite_Un portfolio_def sup.cobounded1)"], ["proof (state)\nthis:\n  finite (support_set pf1 \\<union> support_set pf2) \\<and>\n  support_set pf2 \\<subseteq> support_set pf2 \\<union> support_set pf1\n\ngoal (1 subgoal):\n 1. val_process Mkt pf2 n w =\n    (\\<Sum>x\\<in>support_set pf1 \\<union> support_set pf2.\n       prices Mkt x n w * pf2 x (Suc n) w)", "then"], ["proof (chain)\npicking this:\n  finite (support_set pf1 \\<union> support_set pf2) \\<and>\n  support_set pf2 \\<subseteq> support_set pf2 \\<union> support_set pf1", "show ?thesis"], ["proof (prove)\nusing this:\n  finite (support_set pf1 \\<union> support_set pf2) \\<and>\n  support_set pf2 \\<subseteq> support_set pf2 \\<union> support_set pf1\n\ngoal (1 subgoal):\n 1. val_process Mkt pf2 n w =\n    (\\<Sum>x\\<in>support_set pf1 \\<union> support_set pf2.\n       prices Mkt x n w * pf2 x (Suc n) w)", "by (simp add: subset_val_process')"], ["proof (state)\nthis:\n  val_process Mkt pf2 n w =\n  (\\<Sum>x\\<in>support_set pf1 \\<union> support_set pf2.\n     prices Mkt x n w * pf2 x (Suc n) w)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  val_process Mkt pf2 n w =\n  (\\<Sum>x\\<in>support_set pf1 \\<union> support_set pf2.\n     prices Mkt x n w * pf2 x (Suc n) w)\n\ngoal (1 subgoal):\n 1. \\<And>n w.\n       val_process Mkt (qty_sum pf1 pf2) n w =\n       val_process Mkt pf1 n w + val_process Mkt pf2 n w", "have pf:\"portfolio (qty_sum pf1 pf2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. portfolio (qty_sum pf1 pf2)", "using assms"], ["proof (prove)\nusing this:\n  portfolio pf1\n  portfolio pf2\n\ngoal (1 subgoal):\n 1. portfolio (qty_sum pf1 pf2)", "by (simp add:sum_portfolio)"], ["proof (state)\nthis:\n  portfolio (qty_sum pf1 pf2)\n\ngoal (1 subgoal):\n 1. \\<And>n w.\n       val_process Mkt (qty_sum pf1 pf2) n w =\n       val_process Mkt pf1 n w + val_process Mkt pf2 n w", "have fin:\"finite (support_set pf1 \\<union> support_set pf2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (support_set pf1 \\<union> support_set pf2)", "using assms finite_Un"], ["proof (prove)\nusing this:\n  portfolio pf1\n  portfolio pf2\n  finite (?F \\<union> ?G) = (finite ?F \\<and> finite ?G)\n\ngoal (1 subgoal):\n 1. finite (support_set pf1 \\<union> support_set pf2)", "unfolding portfolio_def"], ["proof (prove)\nusing this:\n  finite (support_set pf1)\n  finite (support_set pf2)\n  finite (?F \\<union> ?G) = (finite ?F \\<and> finite ?G)\n\ngoal (1 subgoal):\n 1. finite (support_set pf1 \\<union> support_set pf2)", "by auto"], ["proof (state)\nthis:\n  finite (support_set pf1 \\<union> support_set pf2)\n\ngoal (1 subgoal):\n 1. \\<And>n w.\n       val_process Mkt (qty_sum pf1 pf2) n w =\n       val_process Mkt pf1 n w + val_process Mkt pf2 n w", "have \"(val_process Mkt pf1) n w + (val_process Mkt pf2) n w =\n    (\\<Sum> x\\<in> (support_set pf1)\\<union> (support_set pf2). ((prices Mkt) x n w) * (pf1 x (Suc n) w)) +\n    (\\<Sum> x\\<in> (support_set pf1)\\<union> (support_set pf2). ((prices Mkt) x n w) * (pf2 x (Suc n) w))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. val_process Mkt pf1 n w + val_process Mkt pf2 n w =\n    (\\<Sum>x\\<in>support_set pf1 \\<union> support_set pf2.\n       prices Mkt x n w * pf1 x (Suc n) w) +\n    (\\<Sum>x\\<in>support_set pf1 \\<union> support_set pf2.\n       prices Mkt x n w * pf2 x (Suc n) w)", "using vp1 vp2"], ["proof (prove)\nusing this:\n  val_process Mkt pf1 n w =\n  (\\<Sum>x\\<in>support_set pf1 \\<union> support_set pf2.\n     prices Mkt x n w * pf1 x (Suc n) w)\n  val_process Mkt pf2 n w =\n  (\\<Sum>x\\<in>support_set pf1 \\<union> support_set pf2.\n     prices Mkt x n w * pf2 x (Suc n) w)\n\ngoal (1 subgoal):\n 1. val_process Mkt pf1 n w + val_process Mkt pf2 n w =\n    (\\<Sum>x\\<in>support_set pf1 \\<union> support_set pf2.\n       prices Mkt x n w * pf1 x (Suc n) w) +\n    (\\<Sum>x\\<in>support_set pf1 \\<union> support_set pf2.\n       prices Mkt x n w * pf2 x (Suc n) w)", "by simp"], ["proof (state)\nthis:\n  val_process Mkt pf1 n w + val_process Mkt pf2 n w =\n  (\\<Sum>x\\<in>support_set pf1 \\<union> support_set pf2.\n     prices Mkt x n w * pf1 x (Suc n) w) +\n  (\\<Sum>x\\<in>support_set pf1 \\<union> support_set pf2.\n     prices Mkt x n w * pf2 x (Suc n) w)\n\ngoal (1 subgoal):\n 1. \\<And>n w.\n       val_process Mkt (qty_sum pf1 pf2) n w =\n       val_process Mkt pf1 n w + val_process Mkt pf2 n w", "also"], ["proof (state)\nthis:\n  val_process Mkt pf1 n w + val_process Mkt pf2 n w =\n  (\\<Sum>x\\<in>support_set pf1 \\<union> support_set pf2.\n     prices Mkt x n w * pf1 x (Suc n) w) +\n  (\\<Sum>x\\<in>support_set pf1 \\<union> support_set pf2.\n     prices Mkt x n w * pf2 x (Suc n) w)\n\ngoal (1 subgoal):\n 1. \\<And>n w.\n       val_process Mkt (qty_sum pf1 pf2) n w =\n       val_process Mkt pf1 n w + val_process Mkt pf2 n w", "have \"... = (\\<Sum> x\\<in> (support_set pf1)\\<union> (support_set pf2).\n    (((prices Mkt) x n w) * (pf1 x (Suc n) w)) + ((prices Mkt) x n w) * (pf2 x (Suc n) w))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>support_set pf1 \\<union> support_set pf2.\n       prices Mkt x n w * pf1 x (Suc n) w) +\n    (\\<Sum>x\\<in>support_set pf1 \\<union> support_set pf2.\n       prices Mkt x n w * pf2 x (Suc n) w) =\n    (\\<Sum>x\\<in>support_set pf1 \\<union> support_set pf2.\n       prices Mkt x n w * pf1 x (Suc n) w +\n       prices Mkt x n w * pf2 x (Suc n) w)", "by (simp add: sum.distrib)"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>support_set pf1 \\<union> support_set pf2.\n     prices Mkt x n w * pf1 x (Suc n) w) +\n  (\\<Sum>x\\<in>support_set pf1 \\<union> support_set pf2.\n     prices Mkt x n w * pf2 x (Suc n) w) =\n  (\\<Sum>x\\<in>support_set pf1 \\<union> support_set pf2.\n     prices Mkt x n w * pf1 x (Suc n) w +\n     prices Mkt x n w * pf2 x (Suc n) w)\n\ngoal (1 subgoal):\n 1. \\<And>n w.\n       val_process Mkt (qty_sum pf1 pf2) n w =\n       val_process Mkt pf1 n w + val_process Mkt pf2 n w", "also"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>support_set pf1 \\<union> support_set pf2.\n     prices Mkt x n w * pf1 x (Suc n) w) +\n  (\\<Sum>x\\<in>support_set pf1 \\<union> support_set pf2.\n     prices Mkt x n w * pf2 x (Suc n) w) =\n  (\\<Sum>x\\<in>support_set pf1 \\<union> support_set pf2.\n     prices Mkt x n w * pf1 x (Suc n) w +\n     prices Mkt x n w * pf2 x (Suc n) w)\n\ngoal (1 subgoal):\n 1. \\<And>n w.\n       val_process Mkt (qty_sum pf1 pf2) n w =\n       val_process Mkt pf1 n w + val_process Mkt pf2 n w", "have \"... = (\\<Sum> x\\<in> (support_set pf1)\\<union> (support_set pf2).\n    ((prices Mkt) x n w) * ((pf1 x (Suc n) w) + (pf2 x (Suc n) w)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>support_set pf1 \\<union> support_set pf2.\n       prices Mkt x n w * pf1 x (Suc n) w +\n       prices Mkt x n w * pf2 x (Suc n) w) =\n    (\\<Sum>x\\<in>support_set pf1 \\<union> support_set pf2.\n       prices Mkt x n w * (pf1 x (Suc n) w + pf2 x (Suc n) w))", "by (simp add: distrib_left)"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>support_set pf1 \\<union> support_set pf2.\n     prices Mkt x n w * pf1 x (Suc n) w +\n     prices Mkt x n w * pf2 x (Suc n) w) =\n  (\\<Sum>x\\<in>support_set pf1 \\<union> support_set pf2.\n     prices Mkt x n w * (pf1 x (Suc n) w + pf2 x (Suc n) w))\n\ngoal (1 subgoal):\n 1. \\<And>n w.\n       val_process Mkt (qty_sum pf1 pf2) n w =\n       val_process Mkt pf1 n w + val_process Mkt pf2 n w", "also"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>support_set pf1 \\<union> support_set pf2.\n     prices Mkt x n w * pf1 x (Suc n) w +\n     prices Mkt x n w * pf2 x (Suc n) w) =\n  (\\<Sum>x\\<in>support_set pf1 \\<union> support_set pf2.\n     prices Mkt x n w * (pf1 x (Suc n) w + pf2 x (Suc n) w))\n\ngoal (1 subgoal):\n 1. \\<And>n w.\n       val_process Mkt (qty_sum pf1 pf2) n w =\n       val_process Mkt pf1 n w + val_process Mkt pf2 n w", "have \"... = (\\<Sum> x\\<in> (support_set pf1)\\<union> (support_set pf2).\n    ((prices Mkt) x n w) * ((qty_sum pf1 pf2) x (Suc n) w))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>support_set pf1 \\<union> support_set pf2.\n       prices Mkt x n w * (pf1 x (Suc n) w + pf2 x (Suc n) w)) =\n    (\\<Sum>x\\<in>support_set pf1 \\<union> support_set pf2.\n       prices Mkt x n w * qty_sum pf1 pf2 x (Suc n) w)", "by (simp add: qty_sum_def)"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>support_set pf1 \\<union> support_set pf2.\n     prices Mkt x n w * (pf1 x (Suc n) w + pf2 x (Suc n) w)) =\n  (\\<Sum>x\\<in>support_set pf1 \\<union> support_set pf2.\n     prices Mkt x n w * qty_sum pf1 pf2 x (Suc n) w)\n\ngoal (1 subgoal):\n 1. \\<And>n w.\n       val_process Mkt (qty_sum pf1 pf2) n w =\n       val_process Mkt pf1 n w + val_process Mkt pf2 n w", "also"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>support_set pf1 \\<union> support_set pf2.\n     prices Mkt x n w * (pf1 x (Suc n) w + pf2 x (Suc n) w)) =\n  (\\<Sum>x\\<in>support_set pf1 \\<union> support_set pf2.\n     prices Mkt x n w * qty_sum pf1 pf2 x (Suc n) w)\n\ngoal (1 subgoal):\n 1. \\<And>n w.\n       val_process Mkt (qty_sum pf1 pf2) n w =\n       val_process Mkt pf1 n w + val_process Mkt pf2 n w", "have \"... = (\\<Sum> x\\<in> (support_set (qty_sum pf1 pf2)).\n    ((prices Mkt) x n w) * ((qty_sum pf1 pf2) x (Suc n) w))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>support_set pf1 \\<union> support_set pf2.\n       prices Mkt x n w * qty_sum pf1 pf2 x (Suc n) w) =\n    (\\<Sum>x\\<in>support_set (qty_sum pf1 pf2).\n       prices Mkt x n w * qty_sum pf1 pf2 x (Suc n) w)", "using sum_support_set[of pf1 pf2]\n    subset_val_process'[of \"support_set pf1\\<union> support_set pf2\" \"qty_sum pf1 pf2\"] pf fin"], ["proof (prove)\nusing this:\n  support_set (qty_sum pf1 pf2)\n  \\<subseteq> support_set pf1 \\<union> support_set pf2\n  \\<lbrakk>finite (support_set pf1 \\<union> support_set pf2);\n   support_set (qty_sum pf1 pf2)\n   \\<subseteq> support_set pf1 \\<union> support_set pf2\\<rbrakk>\n  \\<Longrightarrow> val_process ?Mkt (qty_sum pf1 pf2) ?n ?w =\n                    (\\<Sum>x\\<in>support_set pf1 \\<union> support_set pf2.\n                       prices ?Mkt x ?n ?w * qty_sum pf1 pf2 x (Suc ?n) ?w)\n  portfolio (qty_sum pf1 pf2)\n  finite (support_set pf1 \\<union> support_set pf2)\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>support_set pf1 \\<union> support_set pf2.\n       prices Mkt x n w * qty_sum pf1 pf2 x (Suc n) w) =\n    (\\<Sum>x\\<in>support_set (qty_sum pf1 pf2).\n       prices Mkt x n w * qty_sum pf1 pf2 x (Suc n) w)", "unfolding val_process_def"], ["proof (prove)\nusing this:\n  support_set (qty_sum pf1 pf2)\n  \\<subseteq> support_set pf1 \\<union> support_set pf2\n  \\<lbrakk>finite (support_set pf1 \\<union> support_set pf2);\n   support_set (qty_sum pf1 pf2)\n   \\<subseteq> support_set pf1 \\<union> support_set pf2\\<rbrakk>\n  \\<Longrightarrow> (if \\<not> portfolio (qty_sum pf1 pf2)\n                     then \\<lambda>n w. 0\n                     else (\\<lambda>n w.\n                              \\<Sum>x\\<in>support_set (qty_sum pf1 pf2).\n                                prices ?Mkt x n w *\n                                qty_sum pf1 pf2 x (Suc n) w))\n                     ?n ?w =\n                    (\\<Sum>x\\<in>support_set pf1 \\<union> support_set pf2.\n                       prices ?Mkt x ?n ?w * qty_sum pf1 pf2 x (Suc ?n) ?w)\n  portfolio (qty_sum pf1 pf2)\n  finite (support_set pf1 \\<union> support_set pf2)\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>support_set pf1 \\<union> support_set pf2.\n       prices Mkt x n w * qty_sum pf1 pf2 x (Suc n) w) =\n    (\\<Sum>x\\<in>support_set (qty_sum pf1 pf2).\n       prices Mkt x n w * qty_sum pf1 pf2 x (Suc n) w)", "by simp"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>support_set pf1 \\<union> support_set pf2.\n     prices Mkt x n w * qty_sum pf1 pf2 x (Suc n) w) =\n  (\\<Sum>x\\<in>support_set (qty_sum pf1 pf2).\n     prices Mkt x n w * qty_sum pf1 pf2 x (Suc n) w)\n\ngoal (1 subgoal):\n 1. \\<And>n w.\n       val_process Mkt (qty_sum pf1 pf2) n w =\n       val_process Mkt pf1 n w + val_process Mkt pf2 n w", "also"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>support_set pf1 \\<union> support_set pf2.\n     prices Mkt x n w * qty_sum pf1 pf2 x (Suc n) w) =\n  (\\<Sum>x\\<in>support_set (qty_sum pf1 pf2).\n     prices Mkt x n w * qty_sum pf1 pf2 x (Suc n) w)\n\ngoal (1 subgoal):\n 1. \\<And>n w.\n       val_process Mkt (qty_sum pf1 pf2) n w =\n       val_process Mkt pf1 n w + val_process Mkt pf2 n w", "have \"... = val_process Mkt (qty_sum pf1 pf2) n w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>support_set (qty_sum pf1 pf2).\n       prices Mkt x n w * qty_sum pf1 pf2 x (Suc n) w) =\n    val_process Mkt (qty_sum pf1 pf2) n w", "by (metis (no_types, lifting) pf sum.cong val_process_def)"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>support_set (qty_sum pf1 pf2).\n     prices Mkt x n w * qty_sum pf1 pf2 x (Suc n) w) =\n  val_process Mkt (qty_sum pf1 pf2) n w\n\ngoal (1 subgoal):\n 1. \\<And>n w.\n       val_process Mkt (qty_sum pf1 pf2) n w =\n       val_process Mkt pf1 n w + val_process Mkt pf2 n w", "finally"], ["proof (chain)\npicking this:\n  val_process Mkt pf1 n w + val_process Mkt pf2 n w =\n  val_process Mkt (qty_sum pf1 pf2) n w", "have \"(val_process Mkt pf1) n w + (val_process Mkt pf2) n w = val_process Mkt (qty_sum pf1 pf2) n w\""], ["proof (prove)\nusing this:\n  val_process Mkt pf1 n w + val_process Mkt pf2 n w =\n  val_process Mkt (qty_sum pf1 pf2) n w\n\ngoal (1 subgoal):\n 1. val_process Mkt pf1 n w + val_process Mkt pf2 n w =\n    val_process Mkt (qty_sum pf1 pf2) n w", "."], ["proof (state)\nthis:\n  val_process Mkt pf1 n w + val_process Mkt pf2 n w =\n  val_process Mkt (qty_sum pf1 pf2) n w\n\ngoal (1 subgoal):\n 1. \\<And>n w.\n       val_process Mkt (qty_sum pf1 pf2) n w =\n       val_process Mkt pf1 n w + val_process Mkt pf2 n w", "thus \"val_process Mkt (qty_sum pf1 pf2) n w = (val_process Mkt pf1) n w + (val_process Mkt pf2) n w\""], ["proof (prove)\nusing this:\n  val_process Mkt pf1 n w + val_process Mkt pf2 n w =\n  val_process Mkt (qty_sum pf1 pf2) n w\n\ngoal (1 subgoal):\n 1. val_process Mkt (qty_sum pf1 pf2) n w =\n    val_process Mkt pf1 n w + val_process Mkt pf2 n w", ".."], ["proof (state)\nthis:\n  val_process Mkt (qty_sum pf1 pf2) n w =\n  val_process Mkt pf1 n w + val_process Mkt pf2 n w\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma mult_comp_val_process:\n  assumes \"portfolio pf1\"\nshows \"\\<forall>n w. val_process Mkt (qty_mult_comp pf1 qty) n w = ((val_process Mkt pf1) n w) * (qty (Suc n) w)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n w.\n       val_process Mkt (qty_mult_comp pf1 qty) n w =\n       val_process Mkt pf1 n w * qty (Suc n) w", "proof (intro allI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n w.\n       val_process Mkt (qty_mult_comp pf1 qty) n w =\n       val_process Mkt pf1 n w * qty (Suc n) w", "fix n w"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n w.\n       val_process Mkt (qty_mult_comp pf1 qty) n w =\n       val_process Mkt pf1 n w * qty (Suc n) w", "have pf:\"portfolio (qty_mult_comp pf1 qty)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. portfolio (qty_mult_comp pf1 qty)", "using assms"], ["proof (prove)\nusing this:\n  portfolio pf1\n\ngoal (1 subgoal):\n 1. portfolio (qty_mult_comp pf1 qty)", "by (simp add:mult_comp_portfolio)"], ["proof (state)\nthis:\n  portfolio (qty_mult_comp pf1 qty)\n\ngoal (1 subgoal):\n 1. \\<And>n w.\n       val_process Mkt (qty_mult_comp pf1 qty) n w =\n       val_process Mkt pf1 n w * qty (Suc n) w", "have fin:\"finite (support_set pf1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (support_set pf1)", "using assms"], ["proof (prove)\nusing this:\n  portfolio pf1\n\ngoal (1 subgoal):\n 1. finite (support_set pf1)", "unfolding portfolio_def"], ["proof (prove)\nusing this:\n  finite (support_set pf1)\n\ngoal (1 subgoal):\n 1. finite (support_set pf1)", "by auto"], ["proof (state)\nthis:\n  finite (support_set pf1)\n\ngoal (1 subgoal):\n 1. \\<And>n w.\n       val_process Mkt (qty_mult_comp pf1 qty) n w =\n       val_process Mkt pf1 n w * qty (Suc n) w", "have \"((val_process Mkt pf1) n w) * (qty (Suc n) w) =\n    (\\<Sum> x\\<in> (support_set pf1). ((prices Mkt) x n w) * (pf1 x (Suc n) w))*(qty (Suc n) w)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. val_process Mkt pf1 n w * qty (Suc n) w =\n    (\\<Sum>x\\<in>support_set pf1. prices Mkt x n w * pf1 x (Suc n) w) *\n    qty (Suc n) w", "unfolding val_process_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (if \\<not> portfolio pf1 then \\<lambda>n w. 0\n     else (\\<lambda>n w.\n              \\<Sum>x\\<in>support_set pf1.\n                prices Mkt x n w * pf1 x (Suc n) w))\n     n w *\n    qty (Suc n) w =\n    (\\<Sum>x\\<in>support_set pf1. prices Mkt x n w * pf1 x (Suc n) w) *\n    qty (Suc n) w", "using assms"], ["proof (prove)\nusing this:\n  portfolio pf1\n\ngoal (1 subgoal):\n 1. (if \\<not> portfolio pf1 then \\<lambda>n w. 0\n     else (\\<lambda>n w.\n              \\<Sum>x\\<in>support_set pf1.\n                prices Mkt x n w * pf1 x (Suc n) w))\n     n w *\n    qty (Suc n) w =\n    (\\<Sum>x\\<in>support_set pf1. prices Mkt x n w * pf1 x (Suc n) w) *\n    qty (Suc n) w", "by simp"], ["proof (state)\nthis:\n  val_process Mkt pf1 n w * qty (Suc n) w =\n  (\\<Sum>x\\<in>support_set pf1. prices Mkt x n w * pf1 x (Suc n) w) *\n  qty (Suc n) w\n\ngoal (1 subgoal):\n 1. \\<And>n w.\n       val_process Mkt (qty_mult_comp pf1 qty) n w =\n       val_process Mkt pf1 n w * qty (Suc n) w", "also"], ["proof (state)\nthis:\n  val_process Mkt pf1 n w * qty (Suc n) w =\n  (\\<Sum>x\\<in>support_set pf1. prices Mkt x n w * pf1 x (Suc n) w) *\n  qty (Suc n) w\n\ngoal (1 subgoal):\n 1. \\<And>n w.\n       val_process Mkt (qty_mult_comp pf1 qty) n w =\n       val_process Mkt pf1 n w * qty (Suc n) w", "have \"... = (\\<Sum> x\\<in> (support_set pf1).\n    (((prices Mkt) x n w) * (pf1 x (Suc n) w) * (qty (Suc n) w)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>support_set pf1. prices Mkt x n w * pf1 x (Suc n) w) *\n    qty (Suc n) w =\n    (\\<Sum>x\\<in>support_set pf1.\n       prices Mkt x n w * pf1 x (Suc n) w * qty (Suc n) w)", "using sum_distrib_right"], ["proof (prove)\nusing this:\n  sum ?f ?A * ?r = (\\<Sum>n\\<in>?A. ?f n * ?r)\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>support_set pf1. prices Mkt x n w * pf1 x (Suc n) w) *\n    qty (Suc n) w =\n    (\\<Sum>x\\<in>support_set pf1.\n       prices Mkt x n w * pf1 x (Suc n) w * qty (Suc n) w)", "by auto"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>support_set pf1. prices Mkt x n w * pf1 x (Suc n) w) *\n  qty (Suc n) w =\n  (\\<Sum>x\\<in>support_set pf1.\n     prices Mkt x n w * pf1 x (Suc n) w * qty (Suc n) w)\n\ngoal (1 subgoal):\n 1. \\<And>n w.\n       val_process Mkt (qty_mult_comp pf1 qty) n w =\n       val_process Mkt pf1 n w * qty (Suc n) w", "also"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>support_set pf1. prices Mkt x n w * pf1 x (Suc n) w) *\n  qty (Suc n) w =\n  (\\<Sum>x\\<in>support_set pf1.\n     prices Mkt x n w * pf1 x (Suc n) w * qty (Suc n) w)\n\ngoal (1 subgoal):\n 1. \\<And>n w.\n       val_process Mkt (qty_mult_comp pf1 qty) n w =\n       val_process Mkt pf1 n w * qty (Suc n) w", "have \"... = (\\<Sum> x\\<in> (support_set pf1).\n    ((prices Mkt) x n w) * ((qty_mult_comp pf1 qty) x (Suc n) w))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>support_set pf1.\n       prices Mkt x n w * pf1 x (Suc n) w * qty (Suc n) w) =\n    (\\<Sum>x\\<in>support_set pf1.\n       prices Mkt x n w * qty_mult_comp pf1 qty x (Suc n) w)", "unfolding qty_mult_comp_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>support_set pf1.\n       prices Mkt x n w * pf1 x (Suc n) w * qty (Suc n) w) =\n    (\\<Sum>x\\<in>support_set pf1.\n       prices Mkt x n w * (pf1 x (Suc n) w * qty (Suc n) w))", "by (simp add: mult.commute mult.left_commute)"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>support_set pf1.\n     prices Mkt x n w * pf1 x (Suc n) w * qty (Suc n) w) =\n  (\\<Sum>x\\<in>support_set pf1.\n     prices Mkt x n w * qty_mult_comp pf1 qty x (Suc n) w)\n\ngoal (1 subgoal):\n 1. \\<And>n w.\n       val_process Mkt (qty_mult_comp pf1 qty) n w =\n       val_process Mkt pf1 n w * qty (Suc n) w", "also"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>support_set pf1.\n     prices Mkt x n w * pf1 x (Suc n) w * qty (Suc n) w) =\n  (\\<Sum>x\\<in>support_set pf1.\n     prices Mkt x n w * qty_mult_comp pf1 qty x (Suc n) w)\n\ngoal (1 subgoal):\n 1. \\<And>n w.\n       val_process Mkt (qty_mult_comp pf1 qty) n w =\n       val_process Mkt pf1 n w * qty (Suc n) w", "have \"... = (\\<Sum> x\\<in> (support_set (qty_mult_comp pf1 qty)).\n    ((prices Mkt) x n w) * ((qty_mult_comp pf1 qty) x (Suc n) w))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>support_set pf1.\n       prices Mkt x n w * qty_mult_comp pf1 qty x (Suc n) w) =\n    (\\<Sum>x\\<in>support_set (qty_mult_comp pf1 qty).\n       prices Mkt x n w * qty_mult_comp pf1 qty x (Suc n) w)", "using mult_comp_support_set[of pf1]\n    subset_val_process'[of \"support_set pf1\" \"qty_mult_comp pf1 qty\"] pf fin"], ["proof (prove)\nusing this:\n  support_set (qty_mult_comp pf1 ?qty) \\<subseteq> support_set pf1\n  \\<lbrakk>finite (support_set pf1);\n   support_set (qty_mult_comp pf1 qty) \\<subseteq> support_set pf1\\<rbrakk>\n  \\<Longrightarrow> val_process ?Mkt (qty_mult_comp pf1 qty) ?n ?w =\n                    (\\<Sum>x\\<in>support_set pf1.\n                       prices ?Mkt x ?n ?w *\n                       qty_mult_comp pf1 qty x (Suc ?n) ?w)\n  portfolio (qty_mult_comp pf1 qty)\n  finite (support_set pf1)\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>support_set pf1.\n       prices Mkt x n w * qty_mult_comp pf1 qty x (Suc n) w) =\n    (\\<Sum>x\\<in>support_set (qty_mult_comp pf1 qty).\n       prices Mkt x n w * qty_mult_comp pf1 qty x (Suc n) w)", "unfolding val_process_def"], ["proof (prove)\nusing this:\n  support_set (qty_mult_comp pf1 ?qty) \\<subseteq> support_set pf1\n  \\<lbrakk>finite (support_set pf1);\n   support_set (qty_mult_comp pf1 qty) \\<subseteq> support_set pf1\\<rbrakk>\n  \\<Longrightarrow> (if \\<not> portfolio (qty_mult_comp pf1 qty)\n                     then \\<lambda>n w. 0\n                     else (\\<lambda>n w.\n                              \\<Sum>x\\<in>support_set\n     (qty_mult_comp pf1 qty).\n                                prices ?Mkt x n w *\n                                qty_mult_comp pf1 qty x (Suc n) w))\n                     ?n ?w =\n                    (\\<Sum>x\\<in>support_set pf1.\n                       prices ?Mkt x ?n ?w *\n                       qty_mult_comp pf1 qty x (Suc ?n) ?w)\n  portfolio (qty_mult_comp pf1 qty)\n  finite (support_set pf1)\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>support_set pf1.\n       prices Mkt x n w * qty_mult_comp pf1 qty x (Suc n) w) =\n    (\\<Sum>x\\<in>support_set (qty_mult_comp pf1 qty).\n       prices Mkt x n w * qty_mult_comp pf1 qty x (Suc n) w)", "by simp"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>support_set pf1.\n     prices Mkt x n w * qty_mult_comp pf1 qty x (Suc n) w) =\n  (\\<Sum>x\\<in>support_set (qty_mult_comp pf1 qty).\n     prices Mkt x n w * qty_mult_comp pf1 qty x (Suc n) w)\n\ngoal (1 subgoal):\n 1. \\<And>n w.\n       val_process Mkt (qty_mult_comp pf1 qty) n w =\n       val_process Mkt pf1 n w * qty (Suc n) w", "also"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>support_set pf1.\n     prices Mkt x n w * qty_mult_comp pf1 qty x (Suc n) w) =\n  (\\<Sum>x\\<in>support_set (qty_mult_comp pf1 qty).\n     prices Mkt x n w * qty_mult_comp pf1 qty x (Suc n) w)\n\ngoal (1 subgoal):\n 1. \\<And>n w.\n       val_process Mkt (qty_mult_comp pf1 qty) n w =\n       val_process Mkt pf1 n w * qty (Suc n) w", "have \"... = val_process Mkt (qty_mult_comp pf1 qty) n w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>support_set (qty_mult_comp pf1 qty).\n       prices Mkt x n w * qty_mult_comp pf1 qty x (Suc n) w) =\n    val_process Mkt (qty_mult_comp pf1 qty) n w", "by (metis (no_types, lifting) pf sum.cong val_process_def)"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>support_set (qty_mult_comp pf1 qty).\n     prices Mkt x n w * qty_mult_comp pf1 qty x (Suc n) w) =\n  val_process Mkt (qty_mult_comp pf1 qty) n w\n\ngoal (1 subgoal):\n 1. \\<And>n w.\n       val_process Mkt (qty_mult_comp pf1 qty) n w =\n       val_process Mkt pf1 n w * qty (Suc n) w", "finally"], ["proof (chain)\npicking this:\n  val_process Mkt pf1 n w * qty (Suc n) w =\n  val_process Mkt (qty_mult_comp pf1 qty) n w", "have \"(val_process Mkt pf1) n w * (qty (Suc n) w) = val_process Mkt (qty_mult_comp pf1 qty) n w\""], ["proof (prove)\nusing this:\n  val_process Mkt pf1 n w * qty (Suc n) w =\n  val_process Mkt (qty_mult_comp pf1 qty) n w\n\ngoal (1 subgoal):\n 1. val_process Mkt pf1 n w * qty (Suc n) w =\n    val_process Mkt (qty_mult_comp pf1 qty) n w", "."], ["proof (state)\nthis:\n  val_process Mkt pf1 n w * qty (Suc n) w =\n  val_process Mkt (qty_mult_comp pf1 qty) n w\n\ngoal (1 subgoal):\n 1. \\<And>n w.\n       val_process Mkt (qty_mult_comp pf1 qty) n w =\n       val_process Mkt pf1 n w * qty (Suc n) w", "thus \"val_process Mkt (qty_mult_comp pf1 qty) n w = (val_process Mkt pf1) n w * (qty (Suc n) w)\""], ["proof (prove)\nusing this:\n  val_process Mkt pf1 n w * qty (Suc n) w =\n  val_process Mkt (qty_mult_comp pf1 qty) n w\n\ngoal (1 subgoal):\n 1. val_process Mkt (qty_mult_comp pf1 qty) n w =\n    val_process Mkt pf1 n w * qty (Suc n) w", ".."], ["proof (state)\nthis:\n  val_process Mkt (qty_mult_comp pf1 qty) n w =\n  val_process Mkt pf1 n w * qty (Suc n) w\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma remove_comp_values:\n  assumes \"x \\<noteq> y\"\n  shows \"\\<forall>n w. pf1 x n w = (qty_rem_comp pf1 y) x n w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n w. pf1 x n w = qty_rem_comp pf1 y x n w", "proof (intro allI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n w. pf1 x n w = qty_rem_comp pf1 y x n w", "fix n w"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n w. pf1 x n w = qty_rem_comp pf1 y x n w", "show \"pf1 x n w = (qty_rem_comp pf1 y) x n w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pf1 x n w = qty_rem_comp pf1 y x n w", "by (simp add: assms qty_rem_comp_def)"], ["proof (state)\nthis:\n  pf1 x n w = qty_rem_comp pf1 y x n w\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma remove_comp_val_process:\n  assumes \"portfolio pf1\"\nshows \"\\<forall>n w. val_process Mkt (qty_rem_comp pf1 y) n w = ((val_process Mkt pf1) n w) - (prices Mkt y n w)* (pf1 y (Suc n) w)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n w.\n       val_process Mkt (qty_rem_comp pf1 y) n w =\n       val_process Mkt pf1 n w - prices Mkt y n w * pf1 y (Suc n) w", "proof (intro allI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n w.\n       val_process Mkt (qty_rem_comp pf1 y) n w =\n       val_process Mkt pf1 n w - prices Mkt y n w * pf1 y (Suc n) w", "fix n w"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n w.\n       val_process Mkt (qty_rem_comp pf1 y) n w =\n       val_process Mkt pf1 n w - prices Mkt y n w * pf1 y (Suc n) w", "have pf:\"portfolio (qty_rem_comp pf1 y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. portfolio (qty_rem_comp pf1 y)", "using assms"], ["proof (prove)\nusing this:\n  portfolio pf1\n\ngoal (1 subgoal):\n 1. portfolio (qty_rem_comp pf1 y)", "by (simp add:remove_comp_portfolio)"], ["proof (state)\nthis:\n  portfolio (qty_rem_comp pf1 y)\n\ngoal (1 subgoal):\n 1. \\<And>n w.\n       val_process Mkt (qty_rem_comp pf1 y) n w =\n       val_process Mkt pf1 n w - prices Mkt y n w * pf1 y (Suc n) w", "have fin:\"finite (support_set pf1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (support_set pf1)", "using assms"], ["proof (prove)\nusing this:\n  portfolio pf1\n\ngoal (1 subgoal):\n 1. finite (support_set pf1)", "unfolding portfolio_def"], ["proof (prove)\nusing this:\n  finite (support_set pf1)\n\ngoal (1 subgoal):\n 1. finite (support_set pf1)", "by auto"], ["proof (state)\nthis:\n  finite (support_set pf1)\n\ngoal (1 subgoal):\n 1. \\<And>n w.\n       val_process Mkt (qty_rem_comp pf1 y) n w =\n       val_process Mkt pf1 n w - prices Mkt y n w * pf1 y (Suc n) w", "hence fin2: \"finite (support_set pf1 - {y})\""], ["proof (prove)\nusing this:\n  finite (support_set pf1)\n\ngoal (1 subgoal):\n 1. finite (support_set pf1 - {y})", "by simp"], ["proof (state)\nthis:\n  finite (support_set pf1 - {y})\n\ngoal (1 subgoal):\n 1. \\<And>n w.\n       val_process Mkt (qty_rem_comp pf1 y) n w =\n       val_process Mkt pf1 n w - prices Mkt y n w * pf1 y (Suc n) w", "have \"((val_process Mkt pf1) n w)  =\n    (\\<Sum> x\\<in> (support_set pf1). ((prices Mkt) x n w) * (pf1 x (Suc n) w))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. val_process Mkt pf1 n w =\n    (\\<Sum>x\\<in>support_set pf1. prices Mkt x n w * pf1 x (Suc n) w)", "unfolding val_process_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (if \\<not> portfolio pf1 then \\<lambda>n w. 0\n     else (\\<lambda>n w.\n              \\<Sum>x\\<in>support_set pf1.\n                prices Mkt x n w * pf1 x (Suc n) w))\n     n w =\n    (\\<Sum>x\\<in>support_set pf1. prices Mkt x n w * pf1 x (Suc n) w)", "using assms"], ["proof (prove)\nusing this:\n  portfolio pf1\n\ngoal (1 subgoal):\n 1. (if \\<not> portfolio pf1 then \\<lambda>n w. 0\n     else (\\<lambda>n w.\n              \\<Sum>x\\<in>support_set pf1.\n                prices Mkt x n w * pf1 x (Suc n) w))\n     n w =\n    (\\<Sum>x\\<in>support_set pf1. prices Mkt x n w * pf1 x (Suc n) w)", "by simp"], ["proof (state)\nthis:\n  val_process Mkt pf1 n w =\n  (\\<Sum>x\\<in>support_set pf1. prices Mkt x n w * pf1 x (Suc n) w)\n\ngoal (1 subgoal):\n 1. \\<And>n w.\n       val_process Mkt (qty_rem_comp pf1 y) n w =\n       val_process Mkt pf1 n w - prices Mkt y n w * pf1 y (Suc n) w", "also"], ["proof (state)\nthis:\n  val_process Mkt pf1 n w =\n  (\\<Sum>x\\<in>support_set pf1. prices Mkt x n w * pf1 x (Suc n) w)\n\ngoal (1 subgoal):\n 1. \\<And>n w.\n       val_process Mkt (qty_rem_comp pf1 y) n w =\n       val_process Mkt pf1 n w - prices Mkt y n w * pf1 y (Suc n) w", "have \"... = (\\<Sum> x\\<in> (support_set pf1 - {y}).\n    (((prices Mkt) x n w) * (pf1 x (Suc n) w))) + (prices Mkt y n w)* (pf1 y (Suc n) w)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>support_set pf1. prices Mkt x n w * pf1 x (Suc n) w) =\n    (\\<Sum>x\\<in>support_set pf1 - {y}.\n       prices Mkt x n w * pf1 x (Suc n) w) +\n    prices Mkt y n w * pf1 y (Suc n) w", "proof (cases \"y\\<in> support_set pf1\")"], ["proof (state)\ngoal (2 subgoals):\n 1. y \\<in> support_set pf1 \\<Longrightarrow>\n    (\\<Sum>x\\<in>support_set pf1. prices Mkt x n w * pf1 x (Suc n) w) =\n    (\\<Sum>x\\<in>support_set pf1 - {y}.\n       prices Mkt x n w * pf1 x (Suc n) w) +\n    prices Mkt y n w * pf1 y (Suc n) w\n 2. y \\<notin> support_set pf1 \\<Longrightarrow>\n    (\\<Sum>x\\<in>support_set pf1. prices Mkt x n w * pf1 x (Suc n) w) =\n    (\\<Sum>x\\<in>support_set pf1 - {y}.\n       prices Mkt x n w * pf1 x (Suc n) w) +\n    prices Mkt y n w * pf1 y (Suc n) w", "case True"], ["proof (state)\nthis:\n  y \\<in> support_set pf1\n\ngoal (2 subgoals):\n 1. y \\<in> support_set pf1 \\<Longrightarrow>\n    (\\<Sum>x\\<in>support_set pf1. prices Mkt x n w * pf1 x (Suc n) w) =\n    (\\<Sum>x\\<in>support_set pf1 - {y}.\n       prices Mkt x n w * pf1 x (Suc n) w) +\n    prices Mkt y n w * pf1 y (Suc n) w\n 2. y \\<notin> support_set pf1 \\<Longrightarrow>\n    (\\<Sum>x\\<in>support_set pf1. prices Mkt x n w * pf1 x (Suc n) w) =\n    (\\<Sum>x\\<in>support_set pf1 - {y}.\n       prices Mkt x n w * pf1 x (Suc n) w) +\n    prices Mkt y n w * pf1 y (Suc n) w", "thus ?thesis"], ["proof (prove)\nusing this:\n  y \\<in> support_set pf1\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>support_set pf1. prices Mkt x n w * pf1 x (Suc n) w) =\n    (\\<Sum>x\\<in>support_set pf1 - {y}.\n       prices Mkt x n w * pf1 x (Suc n) w) +\n    prices Mkt y n w * pf1 y (Suc n) w", "by (simp add: fin sum_diff1)"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>support_set pf1. prices Mkt x n w * pf1 x (Suc n) w) =\n  (\\<Sum>x\\<in>support_set pf1 - {y}. prices Mkt x n w * pf1 x (Suc n) w) +\n  prices Mkt y n w * pf1 y (Suc n) w\n\ngoal (1 subgoal):\n 1. y \\<notin> support_set pf1 \\<Longrightarrow>\n    (\\<Sum>x\\<in>support_set pf1. prices Mkt x n w * pf1 x (Suc n) w) =\n    (\\<Sum>x\\<in>support_set pf1 - {y}.\n       prices Mkt x n w * pf1 x (Suc n) w) +\n    prices Mkt y n w * pf1 y (Suc n) w", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. y \\<notin> support_set pf1 \\<Longrightarrow>\n    (\\<Sum>x\\<in>support_set pf1. prices Mkt x n w * pf1 x (Suc n) w) =\n    (\\<Sum>x\\<in>support_set pf1 - {y}.\n       prices Mkt x n w * pf1 x (Suc n) w) +\n    prices Mkt y n w * pf1 y (Suc n) w", "case False"], ["proof (state)\nthis:\n  y \\<notin> support_set pf1\n\ngoal (1 subgoal):\n 1. y \\<notin> support_set pf1 \\<Longrightarrow>\n    (\\<Sum>x\\<in>support_set pf1. prices Mkt x n w * pf1 x (Suc n) w) =\n    (\\<Sum>x\\<in>support_set pf1 - {y}.\n       prices Mkt x n w * pf1 x (Suc n) w) +\n    prices Mkt y n w * pf1 y (Suc n) w", "hence \"pf1 y (Suc n) w = 0\""], ["proof (prove)\nusing this:\n  y \\<notin> support_set pf1\n\ngoal (1 subgoal):\n 1. pf1 y (Suc n) w = 0", "unfolding support_set_def"], ["proof (prove)\nusing this:\n  y \\<notin> {x. \\<exists>n w. pf1 x n w \\<noteq> 0}\n\ngoal (1 subgoal):\n 1. pf1 y (Suc n) w = 0", "by simp"], ["proof (state)\nthis:\n  pf1 y (Suc n) w = 0\n\ngoal (1 subgoal):\n 1. y \\<notin> support_set pf1 \\<Longrightarrow>\n    (\\<Sum>x\\<in>support_set pf1. prices Mkt x n w * pf1 x (Suc n) w) =\n    (\\<Sum>x\\<in>support_set pf1 - {y}.\n       prices Mkt x n w * pf1 x (Suc n) w) +\n    prices Mkt y n w * pf1 y (Suc n) w", "thus ?thesis"], ["proof (prove)\nusing this:\n  pf1 y (Suc n) w = 0\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>support_set pf1. prices Mkt x n w * pf1 x (Suc n) w) =\n    (\\<Sum>x\\<in>support_set pf1 - {y}.\n       prices Mkt x n w * pf1 x (Suc n) w) +\n    prices Mkt y n w * pf1 y (Suc n) w", "by (simp add: fin sum_diff1)"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>support_set pf1. prices Mkt x n w * pf1 x (Suc n) w) =\n  (\\<Sum>x\\<in>support_set pf1 - {y}. prices Mkt x n w * pf1 x (Suc n) w) +\n  prices Mkt y n w * pf1 y (Suc n) w\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>support_set pf1. prices Mkt x n w * pf1 x (Suc n) w) =\n  (\\<Sum>x\\<in>support_set pf1 - {y}. prices Mkt x n w * pf1 x (Suc n) w) +\n  prices Mkt y n w * pf1 y (Suc n) w\n\ngoal (1 subgoal):\n 1. \\<And>n w.\n       val_process Mkt (qty_rem_comp pf1 y) n w =\n       val_process Mkt pf1 n w - prices Mkt y n w * pf1 y (Suc n) w", "also"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>support_set pf1. prices Mkt x n w * pf1 x (Suc n) w) =\n  (\\<Sum>x\\<in>support_set pf1 - {y}. prices Mkt x n w * pf1 x (Suc n) w) +\n  prices Mkt y n w * pf1 y (Suc n) w\n\ngoal (1 subgoal):\n 1. \\<And>n w.\n       val_process Mkt (qty_rem_comp pf1 y) n w =\n       val_process Mkt pf1 n w - prices Mkt y n w * pf1 y (Suc n) w", "have \"... = (\\<Sum> x\\<in> (support_set pf1 - {y}).\n    ((prices Mkt) x n w) * ((qty_rem_comp pf1 y) x (Suc n) w)) + (prices Mkt y n w)* (pf1 y (Suc n) w)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>support_set pf1 - {y}.\n       prices Mkt x n w * pf1 x (Suc n) w) +\n    prices Mkt y n w * pf1 y (Suc n) w =\n    (\\<Sum>x\\<in>support_set pf1 - {y}.\n       prices Mkt x n w * qty_rem_comp pf1 y x (Suc n) w) +\n    prices Mkt y n w * pf1 y (Suc n) w", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>support_set pf1 - {y}.\n       prices Mkt x n w * pf1 x (Suc n) w) +\n    prices Mkt y n w * pf1 y (Suc n) w =\n    (\\<Sum>x\\<in>support_set pf1 - {y}.\n       prices Mkt x n w * qty_rem_comp pf1 y x (Suc n) w) +\n    prices Mkt y n w * pf1 y (Suc n) w", "have \"(\\<Sum> x\\<in> (support_set pf1 - {y}). (((prices Mkt) x n w) * (pf1 x (Suc n) w))) =\n      (\\<Sum> x\\<in> (support_set pf1 - {y}). ((prices Mkt) x n w) * ((qty_rem_comp pf1 y) x (Suc n) w))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>support_set pf1 - {y}.\n       prices Mkt x n w * pf1 x (Suc n) w) =\n    (\\<Sum>x\\<in>support_set pf1 - {y}.\n       prices Mkt x n w * qty_rem_comp pf1 y x (Suc n) w)", "proof (rule sum.cong,simp)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> support_set pf1 - {y} \\<Longrightarrow>\n       prices Mkt x n w * pf1 x (Suc n) w =\n       prices Mkt x n w * qty_rem_comp pf1 y x (Suc n) w", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> support_set pf1 - {y} \\<Longrightarrow>\n       prices Mkt x n w * pf1 x (Suc n) w =\n       prices Mkt x n w * qty_rem_comp pf1 y x (Suc n) w", "assume \"x\\<in> support_set pf1 - {y}\""], ["proof (state)\nthis:\n  x \\<in> support_set pf1 - {y}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> support_set pf1 - {y} \\<Longrightarrow>\n       prices Mkt x n w * pf1 x (Suc n) w =\n       prices Mkt x n w * qty_rem_comp pf1 y x (Suc n) w", "show \"prices Mkt x n w * pf1 x (Suc n) w = prices Mkt x n w * qty_rem_comp pf1 y x (Suc n) w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prices Mkt x n w * pf1 x (Suc n) w =\n    prices Mkt x n w * qty_rem_comp pf1 y x (Suc n) w", "using remove_comp_values"], ["proof (prove)\nusing this:\n  ?x \\<noteq> ?y \\<Longrightarrow>\n  \\<forall>n w. ?pf1.0 ?x n w = qty_rem_comp ?pf1.0 ?y ?x n w\n\ngoal (1 subgoal):\n 1. prices Mkt x n w * pf1 x (Suc n) w =\n    prices Mkt x n w * qty_rem_comp pf1 y x (Suc n) w", "by (metis DiffD2 \\<open>x \\<in> support_set pf1 - {y}\\<close> singletonI)"], ["proof (state)\nthis:\n  prices Mkt x n w * pf1 x (Suc n) w =\n  prices Mkt x n w * qty_rem_comp pf1 y x (Suc n) w\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>support_set pf1 - {y}. prices Mkt x n w * pf1 x (Suc n) w) =\n  (\\<Sum>x\\<in>support_set pf1 - {y}.\n     prices Mkt x n w * qty_rem_comp pf1 y x (Suc n) w)\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>support_set pf1 - {y}.\n       prices Mkt x n w * pf1 x (Suc n) w) +\n    prices Mkt y n w * pf1 y (Suc n) w =\n    (\\<Sum>x\\<in>support_set pf1 - {y}.\n       prices Mkt x n w * qty_rem_comp pf1 y x (Suc n) w) +\n    prices Mkt y n w * pf1 y (Suc n) w", "thus ?thesis"], ["proof (prove)\nusing this:\n  (\\<Sum>x\\<in>support_set pf1 - {y}. prices Mkt x n w * pf1 x (Suc n) w) =\n  (\\<Sum>x\\<in>support_set pf1 - {y}.\n     prices Mkt x n w * qty_rem_comp pf1 y x (Suc n) w)\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>support_set pf1 - {y}.\n       prices Mkt x n w * pf1 x (Suc n) w) +\n    prices Mkt y n w * pf1 y (Suc n) w =\n    (\\<Sum>x\\<in>support_set pf1 - {y}.\n       prices Mkt x n w * qty_rem_comp pf1 y x (Suc n) w) +\n    prices Mkt y n w * pf1 y (Suc n) w", "by simp"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>support_set pf1 - {y}. prices Mkt x n w * pf1 x (Suc n) w) +\n  prices Mkt y n w * pf1 y (Suc n) w =\n  (\\<Sum>x\\<in>support_set pf1 - {y}.\n     prices Mkt x n w * qty_rem_comp pf1 y x (Suc n) w) +\n  prices Mkt y n w * pf1 y (Suc n) w\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>support_set pf1 - {y}. prices Mkt x n w * pf1 x (Suc n) w) +\n  prices Mkt y n w * pf1 y (Suc n) w =\n  (\\<Sum>x\\<in>support_set pf1 - {y}.\n     prices Mkt x n w * qty_rem_comp pf1 y x (Suc n) w) +\n  prices Mkt y n w * pf1 y (Suc n) w\n\ngoal (1 subgoal):\n 1. \\<And>n w.\n       val_process Mkt (qty_rem_comp pf1 y) n w =\n       val_process Mkt pf1 n w - prices Mkt y n w * pf1 y (Suc n) w", "also"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>support_set pf1 - {y}. prices Mkt x n w * pf1 x (Suc n) w) +\n  prices Mkt y n w * pf1 y (Suc n) w =\n  (\\<Sum>x\\<in>support_set pf1 - {y}.\n     prices Mkt x n w * qty_rem_comp pf1 y x (Suc n) w) +\n  prices Mkt y n w * pf1 y (Suc n) w\n\ngoal (1 subgoal):\n 1. \\<And>n w.\n       val_process Mkt (qty_rem_comp pf1 y) n w =\n       val_process Mkt pf1 n w - prices Mkt y n w * pf1 y (Suc n) w", "have \"... = (val_process Mkt (qty_rem_comp pf1 y) n w) + (prices Mkt y n w)* (pf1 y (Suc n) w)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>support_set pf1 - {y}.\n       prices Mkt x n w * qty_rem_comp pf1 y x (Suc n) w) +\n    prices Mkt y n w * pf1 y (Suc n) w =\n    val_process Mkt (qty_rem_comp pf1 y) n w +\n    prices Mkt y n w * pf1 y (Suc n) w", "using subset_val_process'[of \"support_set pf1 - {y}\" \"qty_rem_comp pf1 y\"] fin2"], ["proof (prove)\nusing this:\n  \\<lbrakk>finite (support_set pf1 - {y});\n   support_set (qty_rem_comp pf1 y)\n   \\<subseteq> support_set pf1 - {y}\\<rbrakk>\n  \\<Longrightarrow> val_process ?Mkt (qty_rem_comp pf1 y) ?n ?w =\n                    (\\<Sum>x\\<in>support_set pf1 - {y}.\n                       prices ?Mkt x ?n ?w *\n                       qty_rem_comp pf1 y x (Suc ?n) ?w)\n  finite (support_set pf1 - {y})\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>support_set pf1 - {y}.\n       prices Mkt x n w * qty_rem_comp pf1 y x (Suc n) w) +\n    prices Mkt y n w * pf1 y (Suc n) w =\n    val_process Mkt (qty_rem_comp pf1 y) n w +\n    prices Mkt y n w * pf1 y (Suc n) w", "by (simp add: remove_comp_support_set)"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>support_set pf1 - {y}.\n     prices Mkt x n w * qty_rem_comp pf1 y x (Suc n) w) +\n  prices Mkt y n w * pf1 y (Suc n) w =\n  val_process Mkt (qty_rem_comp pf1 y) n w +\n  prices Mkt y n w * pf1 y (Suc n) w\n\ngoal (1 subgoal):\n 1. \\<And>n w.\n       val_process Mkt (qty_rem_comp pf1 y) n w =\n       val_process Mkt pf1 n w - prices Mkt y n w * pf1 y (Suc n) w", "finally"], ["proof (chain)\npicking this:\n  val_process Mkt pf1 n w =\n  val_process Mkt (qty_rem_comp pf1 y) n w +\n  prices Mkt y n w * pf1 y (Suc n) w", "have \"(val_process Mkt pf1) n w =\n    (val_process Mkt (qty_rem_comp pf1 y) n w) + (prices Mkt y n w)* (pf1 y (Suc n) w)\""], ["proof (prove)\nusing this:\n  val_process Mkt pf1 n w =\n  val_process Mkt (qty_rem_comp pf1 y) n w +\n  prices Mkt y n w * pf1 y (Suc n) w\n\ngoal (1 subgoal):\n 1. val_process Mkt pf1 n w =\n    val_process Mkt (qty_rem_comp pf1 y) n w +\n    prices Mkt y n w * pf1 y (Suc n) w", "."], ["proof (state)\nthis:\n  val_process Mkt pf1 n w =\n  val_process Mkt (qty_rem_comp pf1 y) n w +\n  prices Mkt y n w * pf1 y (Suc n) w\n\ngoal (1 subgoal):\n 1. \\<And>n w.\n       val_process Mkt (qty_rem_comp pf1 y) n w =\n       val_process Mkt pf1 n w - prices Mkt y n w * pf1 y (Suc n) w", "thus  \"val_process Mkt (qty_rem_comp pf1 y) n w = ((val_process Mkt pf1) n w) - (prices Mkt y n w)* (pf1 y (Suc n) w)\""], ["proof (prove)\nusing this:\n  val_process Mkt pf1 n w =\n  val_process Mkt (qty_rem_comp pf1 y) n w +\n  prices Mkt y n w * pf1 y (Suc n) w\n\ngoal (1 subgoal):\n 1. val_process Mkt (qty_rem_comp pf1 y) n w =\n    val_process Mkt pf1 n w - prices Mkt y n w * pf1 y (Suc n) w", "by simp"], ["proof (state)\nthis:\n  val_process Mkt (qty_rem_comp pf1 y) n w =\n  val_process Mkt pf1 n w - prices Mkt y n w * pf1 y (Suc n) w\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma replace_comp_val_process:\n  assumes \"\\<forall>n w. prices Mkt x n w = val_process Mkt pf2 n w\"\n  and \"portfolio pf1\"\n  and \"portfolio pf2\"\n  shows \"\\<forall>n w. val_process Mkt (qty_replace_comp pf1 x pf2) n w = val_process Mkt pf1 n w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n w.\n       val_process Mkt (qty_replace_comp pf1 x pf2) n w =\n       val_process Mkt pf1 n w", "proof (intro allI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n w.\n       val_process Mkt (qty_replace_comp pf1 x pf2) n w =\n       val_process Mkt pf1 n w", "fix n w"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n w.\n       val_process Mkt (qty_replace_comp pf1 x pf2) n w =\n       val_process Mkt pf1 n w", "have \"val_process Mkt (qty_replace_comp pf1 x pf2) n w = val_process Mkt (qty_rem_comp pf1 x) n w +\n    val_process Mkt (qty_mult_comp pf2 (pf1 x)) n w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. val_process Mkt (qty_replace_comp pf1 x pf2) n w =\n    val_process Mkt (qty_rem_comp pf1 x) n w +\n    val_process Mkt (qty_mult_comp pf2 (pf1 x)) n w", "unfolding qty_replace_comp_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. val_process Mkt\n     (qty_sum (qty_rem_comp pf1 x) (qty_mult_comp pf2 (pf1 x))) n w =\n    val_process Mkt (qty_rem_comp pf1 x) n w +\n    val_process Mkt (qty_mult_comp pf2 (pf1 x)) n w", "using assms\n    sum_val_process[of \"qty_rem_comp pf1 x\" \"qty_mult_comp pf2 (pf1 x)\"]"], ["proof (prove)\nusing this:\n  \\<forall>n w. prices Mkt x n w = val_process Mkt pf2 n w\n  portfolio pf1\n  portfolio pf2\n  \\<lbrakk>portfolio (qty_rem_comp pf1 x);\n   portfolio (qty_mult_comp pf2 (pf1 x))\\<rbrakk>\n  \\<Longrightarrow> \\<forall>n w.\n                       val_process ?Mkt\n                        (qty_sum (qty_rem_comp pf1 x)\n                          (qty_mult_comp pf2 (pf1 x)))\n                        n w =\n                       val_process ?Mkt (qty_rem_comp pf1 x) n w +\n                       val_process ?Mkt (qty_mult_comp pf2 (pf1 x)) n w\n\ngoal (1 subgoal):\n 1. val_process Mkt\n     (qty_sum (qty_rem_comp pf1 x) (qty_mult_comp pf2 (pf1 x))) n w =\n    val_process Mkt (qty_rem_comp pf1 x) n w +\n    val_process Mkt (qty_mult_comp pf2 (pf1 x)) n w", "by (simp add: mult_comp_portfolio remove_comp_portfolio)"], ["proof (state)\nthis:\n  val_process Mkt (qty_replace_comp pf1 x pf2) n w =\n  val_process Mkt (qty_rem_comp pf1 x) n w +\n  val_process Mkt (qty_mult_comp pf2 (pf1 x)) n w\n\ngoal (1 subgoal):\n 1. \\<And>n w.\n       val_process Mkt (qty_replace_comp pf1 x pf2) n w =\n       val_process Mkt pf1 n w", "also"], ["proof (state)\nthis:\n  val_process Mkt (qty_replace_comp pf1 x pf2) n w =\n  val_process Mkt (qty_rem_comp pf1 x) n w +\n  val_process Mkt (qty_mult_comp pf2 (pf1 x)) n w\n\ngoal (1 subgoal):\n 1. \\<And>n w.\n       val_process Mkt (qty_replace_comp pf1 x pf2) n w =\n       val_process Mkt pf1 n w", "have \"... = val_process Mkt pf1 n w - (prices Mkt x n w * pf1 x (Suc n) w) + val_process Mkt pf2 n w * pf1 x (Suc n) w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. val_process Mkt (qty_rem_comp pf1 x) n w +\n    val_process Mkt (qty_mult_comp pf2 (pf1 x)) n w =\n    val_process Mkt pf1 n w - prices Mkt x n w * pf1 x (Suc n) w +\n    val_process Mkt pf2 n w * pf1 x (Suc n) w", "by (simp add: assms(2) assms(3) mult_comp_val_process remove_comp_val_process)"], ["proof (state)\nthis:\n  val_process Mkt (qty_rem_comp pf1 x) n w +\n  val_process Mkt (qty_mult_comp pf2 (pf1 x)) n w =\n  val_process Mkt pf1 n w - prices Mkt x n w * pf1 x (Suc n) w +\n  val_process Mkt pf2 n w * pf1 x (Suc n) w\n\ngoal (1 subgoal):\n 1. \\<And>n w.\n       val_process Mkt (qty_replace_comp pf1 x pf2) n w =\n       val_process Mkt pf1 n w", "also"], ["proof (state)\nthis:\n  val_process Mkt (qty_rem_comp pf1 x) n w +\n  val_process Mkt (qty_mult_comp pf2 (pf1 x)) n w =\n  val_process Mkt pf1 n w - prices Mkt x n w * pf1 x (Suc n) w +\n  val_process Mkt pf2 n w * pf1 x (Suc n) w\n\ngoal (1 subgoal):\n 1. \\<And>n w.\n       val_process Mkt (qty_replace_comp pf1 x pf2) n w =\n       val_process Mkt pf1 n w", "have \"... = val_process Mkt pf1 n w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. val_process Mkt pf1 n w - prices Mkt x n w * pf1 x (Suc n) w +\n    val_process Mkt pf2 n w * pf1 x (Suc n) w =\n    val_process Mkt pf1 n w", "using assms"], ["proof (prove)\nusing this:\n  \\<forall>n w. prices Mkt x n w = val_process Mkt pf2 n w\n  portfolio pf1\n  portfolio pf2\n\ngoal (1 subgoal):\n 1. val_process Mkt pf1 n w - prices Mkt x n w * pf1 x (Suc n) w +\n    val_process Mkt pf2 n w * pf1 x (Suc n) w =\n    val_process Mkt pf1 n w", "by simp"], ["proof (state)\nthis:\n  val_process Mkt pf1 n w - prices Mkt x n w * pf1 x (Suc n) w +\n  val_process Mkt pf2 n w * pf1 x (Suc n) w =\n  val_process Mkt pf1 n w\n\ngoal (1 subgoal):\n 1. \\<And>n w.\n       val_process Mkt (qty_replace_comp pf1 x pf2) n w =\n       val_process Mkt pf1 n w", "finally"], ["proof (chain)\npicking this:\n  val_process Mkt (qty_replace_comp pf1 x pf2) n w = val_process Mkt pf1 n w", "show \"val_process Mkt (qty_replace_comp pf1 x pf2) n w = val_process Mkt pf1 n w\""], ["proof (prove)\nusing this:\n  val_process Mkt (qty_replace_comp pf1 x pf2) n w = val_process Mkt pf1 n w\n\ngoal (1 subgoal):\n 1. val_process Mkt (qty_replace_comp pf1 x pf2) n w =\n    val_process Mkt pf1 n w", "."], ["proof (state)\nthis:\n  val_process Mkt (qty_replace_comp pf1 x pf2) n w = val_process Mkt pf1 n w\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma qty_single_val_process:\nshows \"val_process Mkt (qty_single asset qty) n w =\n    prices Mkt asset n w * qty (Suc n) w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. val_process Mkt (qty_single asset qty) n w =\n    prices Mkt asset n w * qty (Suc n) w", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. val_process Mkt (qty_single asset qty) n w =\n    prices Mkt asset n w * qty (Suc n) w", "have \"val_process Mkt (qty_single asset qty) n w =\n    (sum (\\<lambda>x. ((prices Mkt) x n w) * ((qty_single asset qty) x (Suc n) w)) {asset})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. val_process Mkt (qty_single asset qty) n w =\n    (\\<Sum>x\\<in>{asset}.\n       prices Mkt x n w * qty_single asset qty x (Suc n) w)", "proof (rule subset_val_process')"], ["proof (state)\ngoal (2 subgoals):\n 1. finite {asset}\n 2. support_set (qty_single asset qty) \\<subseteq> {asset}", "show \"finite {asset}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite {asset}", "by simp"], ["proof (state)\nthis:\n  finite {asset}\n\ngoal (1 subgoal):\n 1. support_set (qty_single asset qty) \\<subseteq> {asset}", "show \"support_set (qty_single asset qty) \\<subseteq> {asset}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. support_set (qty_single asset qty) \\<subseteq> {asset}", "by (simp add: single_comp_support)"], ["proof (state)\nthis:\n  support_set (qty_single asset qty) \\<subseteq> {asset}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  val_process Mkt (qty_single asset qty) n w =\n  (\\<Sum>x\\<in>{asset}. prices Mkt x n w * qty_single asset qty x (Suc n) w)\n\ngoal (1 subgoal):\n 1. val_process Mkt (qty_single asset qty) n w =\n    prices Mkt asset n w * qty (Suc n) w", "also"], ["proof (state)\nthis:\n  val_process Mkt (qty_single asset qty) n w =\n  (\\<Sum>x\\<in>{asset}. prices Mkt x n w * qty_single asset qty x (Suc n) w)\n\ngoal (1 subgoal):\n 1. val_process Mkt (qty_single asset qty) n w =\n    prices Mkt asset n w * qty (Suc n) w", "have \"... = prices Mkt asset n w * qty (Suc n) w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>{asset}.\n       prices Mkt x n w * qty_single asset qty x (Suc n) w) =\n    prices Mkt asset n w * qty (Suc n) w", "unfolding qty_single_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>{asset}.\n       prices Mkt x n w * (qty_empty(asset := qty)) x (Suc n) w) =\n    prices Mkt asset n w * qty (Suc n) w", "by simp"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>{asset}.\n     prices Mkt x n w * qty_single asset qty x (Suc n) w) =\n  prices Mkt asset n w * qty (Suc n) w\n\ngoal (1 subgoal):\n 1. val_process Mkt (qty_single asset qty) n w =\n    prices Mkt asset n w * qty (Suc n) w", "finally"], ["proof (chain)\npicking this:\n  val_process Mkt (qty_single asset qty) n w =\n  prices Mkt asset n w * qty (Suc n) w", "show ?thesis"], ["proof (prove)\nusing this:\n  val_process Mkt (qty_single asset qty) n w =\n  prices Mkt asset n w * qty (Suc n) w\n\ngoal (1 subgoal):\n 1. val_process Mkt (qty_single asset qty) n w =\n    prices Mkt asset n w * qty (Suc n) w", "."], ["proof (state)\nthis:\n  val_process Mkt (qty_single asset qty) n w =\n  prices Mkt asset n w * qty (Suc n) w\n\ngoal:\nNo subgoals!", "qed"], ["", "subsubsection \\<open>Trading strategies\\<close>"], ["", "locale disc_equity_market = triv_init_disc_filtr_prob_space +\n  fixes Mkt::\"('a,'b) discrete_market\""], ["", "paragraph \\<open>Discrete predictable processes\\<close>"], ["", "paragraph \\<open>Trading strategy\\<close>"], ["", "definition (in disc_filtr_prob_space) trading_strategy\nwhere\n  \"trading_strategy p \\<longleftrightarrow> portfolio p \\<and> (\\<forall>asset \\<in> support_set p. borel_predict_stoch_proc F (p asset))\""], ["", "definition (in disc_filtr_prob_space) support_adapt:: \"('a, 'b) discrete_market \\<Rightarrow> ('b \\<Rightarrow> nat \\<Rightarrow> 'a \\<Rightarrow> real) \\<Rightarrow> bool\" where\n  \"support_adapt Mkt pf \\<longleftrightarrow> (\\<forall> asset \\<in> support_set pf. borel_adapt_stoch_proc F (prices Mkt asset))\""], ["", "lemma (in disc_filtr_prob_space) quantity_adapted:\n  assumes \"\\<forall> asset \\<in> support_set p. p asset (Suc n) \\<in> borel_measurable (F n)\"\n  \"\\<forall>asset \\<in> support_set p. prices Mkt asset n \\<in> borel_measurable (F n)\"\nshows \"val_process Mkt p n \\<in> borel_measurable (F n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. val_process Mkt p n \\<in> borel_measurable (F n)", "proof (cases \"portfolio p\")"], ["proof (state)\ngoal (2 subgoals):\n 1. portfolio p \\<Longrightarrow>\n    val_process Mkt p n \\<in> borel_measurable (F n)\n 2. \\<not> portfolio p \\<Longrightarrow>\n    val_process Mkt p n \\<in> borel_measurable (F n)", "case False"], ["proof (state)\nthis:\n  \\<not> portfolio p\n\ngoal (2 subgoals):\n 1. portfolio p \\<Longrightarrow>\n    val_process Mkt p n \\<in> borel_measurable (F n)\n 2. \\<not> portfolio p \\<Longrightarrow>\n    val_process Mkt p n \\<in> borel_measurable (F n)", "have \"val_process Mkt p = (\\<lambda> n w. 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. val_process Mkt p = (\\<lambda>n w. 0)", "unfolding val_process_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (if \\<not> portfolio p then \\<lambda>n w. 0\n     else (\\<lambda>n w.\n              \\<Sum>x\\<in>support_set p.\n                prices Mkt x n w * p x (Suc n) w)) =\n    (\\<lambda>n w. 0)", "using False"], ["proof (prove)\nusing this:\n  \\<not> portfolio p\n\ngoal (1 subgoal):\n 1. (if \\<not> portfolio p then \\<lambda>n w. 0\n     else (\\<lambda>n w.\n              \\<Sum>x\\<in>support_set p.\n                prices Mkt x n w * p x (Suc n) w)) =\n    (\\<lambda>n w. 0)", "by simp"], ["proof (state)\nthis:\n  val_process Mkt p = (\\<lambda>n w. 0)\n\ngoal (2 subgoals):\n 1. portfolio p \\<Longrightarrow>\n    val_process Mkt p n \\<in> borel_measurable (F n)\n 2. \\<not> portfolio p \\<Longrightarrow>\n    val_process Mkt p n \\<in> borel_measurable (F n)", "thus \"?thesis\""], ["proof (prove)\nusing this:\n  val_process Mkt p = (\\<lambda>n w. 0)\n\ngoal (1 subgoal):\n 1. val_process Mkt p n \\<in> borel_measurable (F n)", "by simp"], ["proof (state)\nthis:\n  val_process Mkt p n \\<in> borel_measurable (F n)\n\ngoal (1 subgoal):\n 1. portfolio p \\<Longrightarrow>\n    val_process Mkt p n \\<in> borel_measurable (F n)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. portfolio p \\<Longrightarrow>\n    val_process Mkt p n \\<in> borel_measurable (F n)", "case True"], ["proof (state)\nthis:\n  portfolio p\n\ngoal (1 subgoal):\n 1. portfolio p \\<Longrightarrow>\n    val_process Mkt p n \\<in> borel_measurable (F n)", "hence \"val_process Mkt p n = (\\<lambda>w. \\<Sum>x\\<in>support_set p. prices Mkt x n w * p x (Suc n) w)\""], ["proof (prove)\nusing this:\n  portfolio p\n\ngoal (1 subgoal):\n 1. val_process Mkt p n =\n    (\\<lambda>w.\n        \\<Sum>x\\<in>support_set p. prices Mkt x n w * p x (Suc n) w)", "unfolding val_process_def"], ["proof (prove)\nusing this:\n  portfolio p\n\ngoal (1 subgoal):\n 1. (if \\<not> portfolio p then \\<lambda>n w. 0\n     else (\\<lambda>n w.\n              \\<Sum>x\\<in>support_set p. prices Mkt x n w * p x (Suc n) w))\n     n =\n    (\\<lambda>w.\n        \\<Sum>x\\<in>support_set p. prices Mkt x n w * p x (Suc n) w)", "using True"], ["proof (prove)\nusing this:\n  portfolio p\n  portfolio p\n\ngoal (1 subgoal):\n 1. (if \\<not> portfolio p then \\<lambda>n w. 0\n     else (\\<lambda>n w.\n              \\<Sum>x\\<in>support_set p. prices Mkt x n w * p x (Suc n) w))\n     n =\n    (\\<lambda>w.\n        \\<Sum>x\\<in>support_set p. prices Mkt x n w * p x (Suc n) w)", "by simp"], ["proof (state)\nthis:\n  val_process Mkt p n =\n  (\\<lambda>w. \\<Sum>x\\<in>support_set p. prices Mkt x n w * p x (Suc n) w)\n\ngoal (1 subgoal):\n 1. portfolio p \\<Longrightarrow>\n    val_process Mkt p n \\<in> borel_measurable (F n)", "moreover"], ["proof (state)\nthis:\n  val_process Mkt p n =\n  (\\<lambda>w. \\<Sum>x\\<in>support_set p. prices Mkt x n w * p x (Suc n) w)\n\ngoal (1 subgoal):\n 1. portfolio p \\<Longrightarrow>\n    val_process Mkt p n \\<in> borel_measurable (F n)", "have \"(\\<lambda>w. \\<Sum>x\\<in>support_set p. prices Mkt x n w * p x (Suc n) w) \\<in> borel_measurable (F n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>w.\n        \\<Sum>x\\<in>support_set p. prices Mkt x n w * p x (Suc n) w)\n    \\<in> borel_measurable (F n)", "proof (rule borel_measurable_sum)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> support_set p \\<Longrightarrow>\n       (\\<lambda>xa. prices Mkt x n xa * p x (Suc n) xa)\n       \\<in> borel_measurable (F n)", "fix asset"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> support_set p \\<Longrightarrow>\n       (\\<lambda>xa. prices Mkt x n xa * p x (Suc n) xa)\n       \\<in> borel_measurable (F n)", "assume \"asset\\<in> support_set p\""], ["proof (state)\nthis:\n  asset \\<in> support_set p\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> support_set p \\<Longrightarrow>\n       (\\<lambda>xa. prices Mkt x n xa * p x (Suc n) xa)\n       \\<in> borel_measurable (F n)", "hence \"p asset (Suc n) \\<in> borel_measurable (F n)\""], ["proof (prove)\nusing this:\n  asset \\<in> support_set p\n\ngoal (1 subgoal):\n 1. p asset (Suc n) \\<in> borel_measurable (F n)", "using assms"], ["proof (prove)\nusing this:\n  asset \\<in> support_set p\n  \\<forall>asset\\<in>support_set p.\n     p asset (Suc n) \\<in> borel_measurable (F n)\n  \\<forall>asset\\<in>support_set p.\n     prices Mkt asset n \\<in> borel_measurable (F n)\n\ngoal (1 subgoal):\n 1. p asset (Suc n) \\<in> borel_measurable (F n)", "unfolding trading_strategy_def adapt_stoch_proc_def"], ["proof (prove)\nusing this:\n  asset \\<in> support_set p\n  \\<forall>asset\\<in>support_set p.\n     p asset (Suc n) \\<in> borel_measurable (F n)\n  \\<forall>asset\\<in>support_set p.\n     prices Mkt asset n \\<in> borel_measurable (F n)\n\ngoal (1 subgoal):\n 1. p asset (Suc n) \\<in> borel_measurable (F n)", "by simp"], ["proof (state)\nthis:\n  p asset (Suc n) \\<in> borel_measurable (F n)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> support_set p \\<Longrightarrow>\n       (\\<lambda>xa. prices Mkt x n xa * p x (Suc n) xa)\n       \\<in> borel_measurable (F n)", "moreover"], ["proof (state)\nthis:\n  p asset (Suc n) \\<in> borel_measurable (F n)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> support_set p \\<Longrightarrow>\n       (\\<lambda>xa. prices Mkt x n xa * p x (Suc n) xa)\n       \\<in> borel_measurable (F n)", "have \"prices Mkt asset n \\<in> borel_measurable (F n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prices Mkt asset n \\<in> borel_measurable (F n)", "using \\<open>asset \\<in> support_set p\\<close>  assms(2)"], ["proof (prove)\nusing this:\n  asset \\<in> support_set p\n  \\<forall>asset\\<in>support_set p.\n     prices Mkt asset n \\<in> borel_measurable (F n)\n\ngoal (1 subgoal):\n 1. prices Mkt asset n \\<in> borel_measurable (F n)", "unfolding support_adapt_def"], ["proof (prove)\nusing this:\n  asset \\<in> support_set p\n  \\<forall>asset\\<in>support_set p.\n     prices Mkt asset n \\<in> borel_measurable (F n)\n\ngoal (1 subgoal):\n 1. prices Mkt asset n \\<in> borel_measurable (F n)", "by (simp add: adapt_stoch_proc_def)"], ["proof (state)\nthis:\n  prices Mkt asset n \\<in> borel_measurable (F n)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> support_set p \\<Longrightarrow>\n       (\\<lambda>xa. prices Mkt x n xa * p x (Suc n) xa)\n       \\<in> borel_measurable (F n)", "ultimately"], ["proof (chain)\npicking this:\n  p asset (Suc n) \\<in> borel_measurable (F n)\n  prices Mkt asset n \\<in> borel_measurable (F n)", "show \"(\\<lambda>x. prices Mkt asset n x * p asset (Suc n) x) \\<in> borel_measurable (F n)\""], ["proof (prove)\nusing this:\n  p asset (Suc n) \\<in> borel_measurable (F n)\n  prices Mkt asset n \\<in> borel_measurable (F n)\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. prices Mkt asset n x * p asset (Suc n) x)\n    \\<in> borel_measurable (F n)", "by simp"], ["proof (state)\nthis:\n  (\\<lambda>x. prices Mkt asset n x * p asset (Suc n) x)\n  \\<in> borel_measurable (F n)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<lambda>w. \\<Sum>x\\<in>support_set p. prices Mkt x n w * p x (Suc n) w)\n  \\<in> borel_measurable (F n)\n\ngoal (1 subgoal):\n 1. portfolio p \\<Longrightarrow>\n    val_process Mkt p n \\<in> borel_measurable (F n)", "ultimately"], ["proof (chain)\npicking this:\n  val_process Mkt p n =\n  (\\<lambda>w. \\<Sum>x\\<in>support_set p. prices Mkt x n w * p x (Suc n) w)\n  (\\<lambda>w. \\<Sum>x\\<in>support_set p. prices Mkt x n w * p x (Suc n) w)\n  \\<in> borel_measurable (F n)", "show \"val_process Mkt p n \\<in> borel_measurable (F n)\""], ["proof (prove)\nusing this:\n  val_process Mkt p n =\n  (\\<lambda>w. \\<Sum>x\\<in>support_set p. prices Mkt x n w * p x (Suc n) w)\n  (\\<lambda>w. \\<Sum>x\\<in>support_set p. prices Mkt x n w * p x (Suc n) w)\n  \\<in> borel_measurable (F n)\n\ngoal (1 subgoal):\n 1. val_process Mkt p n \\<in> borel_measurable (F n)", "by simp"], ["proof (state)\nthis:\n  val_process Mkt p n \\<in> borel_measurable (F n)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in disc_filtr_prob_space) trading_strategy_adapted:\n  assumes \"trading_strategy p\"\n  and \"support_adapt Mkt p\"\n  shows \"borel_adapt_stoch_proc F (val_process Mkt p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. borel_adapt_stoch_proc F (val_process Mkt p)", "unfolding support_adapt_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. borel_adapt_stoch_proc F (val_process Mkt p)", "proof (cases \"portfolio p\")"], ["proof (state)\ngoal (2 subgoals):\n 1. portfolio p \\<Longrightarrow>\n    borel_adapt_stoch_proc F (val_process Mkt p)\n 2. \\<not> portfolio p \\<Longrightarrow>\n    borel_adapt_stoch_proc F (val_process Mkt p)", "case False"], ["proof (state)\nthis:\n  \\<not> portfolio p\n\ngoal (2 subgoals):\n 1. portfolio p \\<Longrightarrow>\n    borel_adapt_stoch_proc F (val_process Mkt p)\n 2. \\<not> portfolio p \\<Longrightarrow>\n    borel_adapt_stoch_proc F (val_process Mkt p)", "have \"val_process Mkt p = (\\<lambda> n w. 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. val_process Mkt p = (\\<lambda>n w. 0)", "unfolding val_process_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (if \\<not> portfolio p then \\<lambda>n w. 0\n     else (\\<lambda>n w.\n              \\<Sum>x\\<in>support_set p.\n                prices Mkt x n w * p x (Suc n) w)) =\n    (\\<lambda>n w. 0)", "using False"], ["proof (prove)\nusing this:\n  \\<not> portfolio p\n\ngoal (1 subgoal):\n 1. (if \\<not> portfolio p then \\<lambda>n w. 0\n     else (\\<lambda>n w.\n              \\<Sum>x\\<in>support_set p.\n                prices Mkt x n w * p x (Suc n) w)) =\n    (\\<lambda>n w. 0)", "by simp"], ["proof (state)\nthis:\n  val_process Mkt p = (\\<lambda>n w. 0)\n\ngoal (2 subgoals):\n 1. portfolio p \\<Longrightarrow>\n    borel_adapt_stoch_proc F (val_process Mkt p)\n 2. \\<not> portfolio p \\<Longrightarrow>\n    borel_adapt_stoch_proc F (val_process Mkt p)", "thus \"borel_adapt_stoch_proc F (val_process Mkt p)\""], ["proof (prove)\nusing this:\n  val_process Mkt p = (\\<lambda>n w. 0)\n\ngoal (1 subgoal):\n 1. borel_adapt_stoch_proc F (val_process Mkt p)", "by (simp add: constant_process_borel_adapted)"], ["proof (state)\nthis:\n  borel_adapt_stoch_proc F (val_process Mkt p)\n\ngoal (1 subgoal):\n 1. portfolio p \\<Longrightarrow>\n    borel_adapt_stoch_proc F (val_process Mkt p)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. portfolio p \\<Longrightarrow>\n    borel_adapt_stoch_proc F (val_process Mkt p)", "case True"], ["proof (state)\nthis:\n  portfolio p\n\ngoal (1 subgoal):\n 1. portfolio p \\<Longrightarrow>\n    borel_adapt_stoch_proc F (val_process Mkt p)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. borel_adapt_stoch_proc F (val_process Mkt p)", "unfolding adapt_stoch_proc_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>t. val_process Mkt p t \\<in> borel_measurable (F t)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>t. val_process Mkt p t \\<in> borel_measurable (F t)", "fix n"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>t. val_process Mkt p t \\<in> borel_measurable (F t)", "have \"val_process Mkt p n = (\\<lambda>w. \\<Sum>x\\<in>support_set p. prices Mkt x n w * p x (Suc n) w)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. val_process Mkt p n =\n    (\\<lambda>w.\n        \\<Sum>x\\<in>support_set p. prices Mkt x n w * p x (Suc n) w)", "unfolding val_process_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (if \\<not> portfolio p then \\<lambda>n w. 0\n     else (\\<lambda>n w.\n              \\<Sum>x\\<in>support_set p. prices Mkt x n w * p x (Suc n) w))\n     n =\n    (\\<lambda>w.\n        \\<Sum>x\\<in>support_set p. prices Mkt x n w * p x (Suc n) w)", "using True"], ["proof (prove)\nusing this:\n  portfolio p\n\ngoal (1 subgoal):\n 1. (if \\<not> portfolio p then \\<lambda>n w. 0\n     else (\\<lambda>n w.\n              \\<Sum>x\\<in>support_set p. prices Mkt x n w * p x (Suc n) w))\n     n =\n    (\\<lambda>w.\n        \\<Sum>x\\<in>support_set p. prices Mkt x n w * p x (Suc n) w)", "by simp"], ["proof (state)\nthis:\n  val_process Mkt p n =\n  (\\<lambda>w. \\<Sum>x\\<in>support_set p. prices Mkt x n w * p x (Suc n) w)\n\ngoal (1 subgoal):\n 1. \\<And>t. val_process Mkt p t \\<in> borel_measurable (F t)", "moreover"], ["proof (state)\nthis:\n  val_process Mkt p n =\n  (\\<lambda>w. \\<Sum>x\\<in>support_set p. prices Mkt x n w * p x (Suc n) w)\n\ngoal (1 subgoal):\n 1. \\<And>t. val_process Mkt p t \\<in> borel_measurable (F t)", "have \"(\\<lambda>w. \\<Sum>x\\<in>support_set p. prices Mkt x n w * p x (Suc n) w) \\<in> borel_measurable (F n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>w.\n        \\<Sum>x\\<in>support_set p. prices Mkt x n w * p x (Suc n) w)\n    \\<in> borel_measurable (F n)", "proof (rule borel_measurable_sum)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> support_set p \\<Longrightarrow>\n       (\\<lambda>xa. prices Mkt x n xa * p x (Suc n) xa)\n       \\<in> borel_measurable (F n)", "fix asset"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> support_set p \\<Longrightarrow>\n       (\\<lambda>xa. prices Mkt x n xa * p x (Suc n) xa)\n       \\<in> borel_measurable (F n)", "assume \"asset\\<in> support_set p\""], ["proof (state)\nthis:\n  asset \\<in> support_set p\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> support_set p \\<Longrightarrow>\n       (\\<lambda>xa. prices Mkt x n xa * p x (Suc n) xa)\n       \\<in> borel_measurable (F n)", "hence \"p asset (Suc n) \\<in> borel_measurable (F n)\""], ["proof (prove)\nusing this:\n  asset \\<in> support_set p\n\ngoal (1 subgoal):\n 1. p asset (Suc n) \\<in> borel_measurable (F n)", "using assms"], ["proof (prove)\nusing this:\n  asset \\<in> support_set p\n  trading_strategy p\n  support_adapt Mkt p\n\ngoal (1 subgoal):\n 1. p asset (Suc n) \\<in> borel_measurable (F n)", "unfolding trading_strategy_def predict_stoch_proc_def"], ["proof (prove)\nusing this:\n  asset \\<in> support_set p\n  portfolio p \\<and>\n  (\\<forall>asset\\<in>support_set p.\n      p asset 0 \\<in> borel_measurable (F 0) \\<and>\n      (\\<forall>n. p asset (Suc n) \\<in> borel_measurable (F n)))\n  support_adapt Mkt p\n\ngoal (1 subgoal):\n 1. p asset (Suc n) \\<in> borel_measurable (F n)", "by simp"], ["proof (state)\nthis:\n  p asset (Suc n) \\<in> borel_measurable (F n)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> support_set p \\<Longrightarrow>\n       (\\<lambda>xa. prices Mkt x n xa * p x (Suc n) xa)\n       \\<in> borel_measurable (F n)", "moreover"], ["proof (state)\nthis:\n  p asset (Suc n) \\<in> borel_measurable (F n)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> support_set p \\<Longrightarrow>\n       (\\<lambda>xa. prices Mkt x n xa * p x (Suc n) xa)\n       \\<in> borel_measurable (F n)", "have \"prices Mkt asset n \\<in> borel_measurable (F n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prices Mkt asset n \\<in> borel_measurable (F n)", "using \\<open>asset \\<in> support_set p\\<close>  assms(2)"], ["proof (prove)\nusing this:\n  asset \\<in> support_set p\n  support_adapt Mkt p\n\ngoal (1 subgoal):\n 1. prices Mkt asset n \\<in> borel_measurable (F n)", "unfolding support_adapt_def"], ["proof (prove)\nusing this:\n  asset \\<in> support_set p\n  \\<forall>asset\\<in>support_set p.\n     borel_adapt_stoch_proc F (prices Mkt asset)\n\ngoal (1 subgoal):\n 1. prices Mkt asset n \\<in> borel_measurable (F n)", "by (simp add:adapt_stoch_proc_def)"], ["proof (state)\nthis:\n  prices Mkt asset n \\<in> borel_measurable (F n)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> support_set p \\<Longrightarrow>\n       (\\<lambda>xa. prices Mkt x n xa * p x (Suc n) xa)\n       \\<in> borel_measurable (F n)", "ultimately"], ["proof (chain)\npicking this:\n  p asset (Suc n) \\<in> borel_measurable (F n)\n  prices Mkt asset n \\<in> borel_measurable (F n)", "show \"(\\<lambda>x. prices Mkt asset n x * p asset (Suc n) x) \\<in> borel_measurable (F n)\""], ["proof (prove)\nusing this:\n  p asset (Suc n) \\<in> borel_measurable (F n)\n  prices Mkt asset n \\<in> borel_measurable (F n)\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. prices Mkt asset n x * p asset (Suc n) x)\n    \\<in> borel_measurable (F n)", "by simp"], ["proof (state)\nthis:\n  (\\<lambda>x. prices Mkt asset n x * p asset (Suc n) x)\n  \\<in> borel_measurable (F n)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<lambda>w. \\<Sum>x\\<in>support_set p. prices Mkt x n w * p x (Suc n) w)\n  \\<in> borel_measurable (F n)\n\ngoal (1 subgoal):\n 1. \\<And>t. val_process Mkt p t \\<in> borel_measurable (F t)", "ultimately"], ["proof (chain)\npicking this:\n  val_process Mkt p n =\n  (\\<lambda>w. \\<Sum>x\\<in>support_set p. prices Mkt x n w * p x (Suc n) w)\n  (\\<lambda>w. \\<Sum>x\\<in>support_set p. prices Mkt x n w * p x (Suc n) w)\n  \\<in> borel_measurable (F n)", "show \"val_process Mkt p n \\<in> borel_measurable (F n)\""], ["proof (prove)\nusing this:\n  val_process Mkt p n =\n  (\\<lambda>w. \\<Sum>x\\<in>support_set p. prices Mkt x n w * p x (Suc n) w)\n  (\\<lambda>w. \\<Sum>x\\<in>support_set p. prices Mkt x n w * p x (Suc n) w)\n  \\<in> borel_measurable (F n)\n\ngoal (1 subgoal):\n 1. val_process Mkt p n \\<in> borel_measurable (F n)", "by simp"], ["proof (state)\nthis:\n  val_process Mkt p n \\<in> borel_measurable (F n)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  borel_adapt_stoch_proc F (val_process Mkt p)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in disc_equity_market) ats_val_process_adapted:\n  assumes \"trading_strategy p\"\nand \"support_adapt Mkt p\"\n  shows \"borel_adapt_stoch_proc F (val_process Mkt p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. borel_adapt_stoch_proc F (val_process Mkt p)", "unfolding support_adapt_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. borel_adapt_stoch_proc F (val_process Mkt p)", "by (meson assms(1) assms(2)  subsetCE trading_strategy_adapted)"], ["", "lemma (in disc_equity_market) trading_strategy_init:\n  assumes \"trading_strategy p\"\nand \"support_adapt Mkt p\"\n  shows \"\\<exists>c. \\<forall>w \\<in> space M. val_process Mkt p 0 w = c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>c. \\<forall>w\\<in>space M. val_process Mkt p 0 w = c", "using assms adapted_init ats_val_process_adapted"], ["proof (prove)\nusing this:\n  trading_strategy p\n  support_adapt Mkt p\n  borel_adapt_stoch_proc F ?x \\<Longrightarrow>\n  \\<exists>c. \\<forall>w\\<in>space M. ?x 0 w = c\n  \\<lbrakk>trading_strategy ?p; support_adapt Mkt ?p\\<rbrakk>\n  \\<Longrightarrow> borel_adapt_stoch_proc F (val_process Mkt ?p)\n\ngoal (1 subgoal):\n 1. \\<exists>c. \\<forall>w\\<in>space M. val_process Mkt p 0 w = c", "by simp"], ["", "definition (in disc_equity_market) initial_value where\n  \"initial_value pf = constant_image (val_process Mkt pf 0)\""], ["", "lemma (in disc_equity_market) initial_valueI:\n  assumes \"trading_strategy pf\"\nand \"support_adapt Mkt pf\"\n  shows \"\\<forall>w\\<in> space M. val_process Mkt pf 0 w = initial_value pf\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>w\\<in>space M. val_process Mkt pf 0 w = initial_value pf", "unfolding initial_value_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>w\\<in>space M.\n       val_process Mkt pf 0 w = constant_image (val_process Mkt pf 0)", "proof (rule constant_imageI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>c. \\<forall>w\\<in>space M. val_process Mkt pf 0 w = c", "show \"\\<exists>c. \\<forall>w\\<in>space M. val_process Mkt pf 0 w = c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>c. \\<forall>w\\<in>space M. val_process Mkt pf 0 w = c", "using trading_strategy_init assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>trading_strategy ?p; support_adapt Mkt ?p\\<rbrakk>\n  \\<Longrightarrow> \\<exists>c.\n                       \\<forall>w\\<in>space M. val_process Mkt ?p 0 w = c\n  trading_strategy pf\n  support_adapt Mkt pf\n\ngoal (1 subgoal):\n 1. \\<exists>c. \\<forall>w\\<in>space M. val_process Mkt pf 0 w = c", "by simp"], ["proof (state)\nthis:\n  \\<exists>c. \\<forall>w\\<in>space M. val_process Mkt pf 0 w = c\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in disc_equity_market) inc_predict_support_trading_strat:\n  assumes \"trading_strategy pf1\"\n  shows \"\\<forall> asset \\<in> support_set pf1 \\<union> B. borel_predict_stoch_proc F (pf1 asset)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>asset\\<in>support_set pf1 \\<union> B.\n       borel_predict_stoch_proc F (pf1 asset)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>asset.\n       asset \\<in> support_set pf1 \\<union> B \\<Longrightarrow>\n       borel_predict_stoch_proc F (pf1 asset)", "fix asset"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>asset.\n       asset \\<in> support_set pf1 \\<union> B \\<Longrightarrow>\n       borel_predict_stoch_proc F (pf1 asset)", "assume \"asset \\<in> support_set pf1 \\<union> B\""], ["proof (state)\nthis:\n  asset \\<in> support_set pf1 \\<union> B\n\ngoal (1 subgoal):\n 1. \\<And>asset.\n       asset \\<in> support_set pf1 \\<union> B \\<Longrightarrow>\n       borel_predict_stoch_proc F (pf1 asset)", "show \"borel_predict_stoch_proc F (pf1 asset)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. borel_predict_stoch_proc F (pf1 asset)", "proof (cases \"asset \\<in> support_set pf1\")"], ["proof (state)\ngoal (2 subgoals):\n 1. asset \\<in> support_set pf1 \\<Longrightarrow>\n    borel_predict_stoch_proc F (pf1 asset)\n 2. asset \\<notin> support_set pf1 \\<Longrightarrow>\n    borel_predict_stoch_proc F (pf1 asset)", "case True"], ["proof (state)\nthis:\n  asset \\<in> support_set pf1\n\ngoal (2 subgoals):\n 1. asset \\<in> support_set pf1 \\<Longrightarrow>\n    borel_predict_stoch_proc F (pf1 asset)\n 2. asset \\<notin> support_set pf1 \\<Longrightarrow>\n    borel_predict_stoch_proc F (pf1 asset)", "thus ?thesis"], ["proof (prove)\nusing this:\n  asset \\<in> support_set pf1\n\ngoal (1 subgoal):\n 1. borel_predict_stoch_proc F (pf1 asset)", "using assms"], ["proof (prove)\nusing this:\n  asset \\<in> support_set pf1\n  trading_strategy pf1\n\ngoal (1 subgoal):\n 1. borel_predict_stoch_proc F (pf1 asset)", "unfolding trading_strategy_def"], ["proof (prove)\nusing this:\n  asset \\<in> support_set pf1\n  portfolio pf1 \\<and>\n  (\\<forall>asset\\<in>support_set pf1.\n      borel_predict_stoch_proc F (pf1 asset))\n\ngoal (1 subgoal):\n 1. borel_predict_stoch_proc F (pf1 asset)", "by simp"], ["proof (state)\nthis:\n  borel_predict_stoch_proc F (pf1 asset)\n\ngoal (1 subgoal):\n 1. asset \\<notin> support_set pf1 \\<Longrightarrow>\n    borel_predict_stoch_proc F (pf1 asset)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. asset \\<notin> support_set pf1 \\<Longrightarrow>\n    borel_predict_stoch_proc F (pf1 asset)", "case False"], ["proof (state)\nthis:\n  asset \\<notin> support_set pf1\n\ngoal (1 subgoal):\n 1. asset \\<notin> support_set pf1 \\<Longrightarrow>\n    borel_predict_stoch_proc F (pf1 asset)", "hence \"\\<forall>n w. pf1 asset n w = 0\""], ["proof (prove)\nusing this:\n  asset \\<notin> support_set pf1\n\ngoal (1 subgoal):\n 1. \\<forall>n w. pf1 asset n w = 0", "unfolding support_set_def"], ["proof (prove)\nusing this:\n  asset \\<notin> {x. \\<exists>n w. pf1 x n w \\<noteq> 0}\n\ngoal (1 subgoal):\n 1. \\<forall>n w. pf1 asset n w = 0", "by simp"], ["proof (state)\nthis:\n  \\<forall>n w. pf1 asset n w = 0\n\ngoal (1 subgoal):\n 1. asset \\<notin> support_set pf1 \\<Longrightarrow>\n    borel_predict_stoch_proc F (pf1 asset)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. borel_predict_stoch_proc F (pf1 asset)", "unfolding predict_stoch_proc_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. pf1 asset 0 \\<in> borel_measurable (F 0) \\<and>\n    (\\<forall>n. pf1 asset (Suc n) \\<in> borel_measurable (F n))", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. pf1 asset 0 \\<in> borel_measurable (F 0)\n 2. \\<forall>n. pf1 asset (Suc n) \\<in> borel_measurable (F n)", "show \"pf1 asset 0 \\<in> measurable (F 0) borel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pf1 asset 0 \\<in> borel_measurable (F 0)", "using \\<open>\\<forall>n w. pf1 asset n w = 0\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>n w. pf1 asset n w = 0\n\ngoal (1 subgoal):\n 1. pf1 asset 0 \\<in> borel_measurable (F 0)", "by (simp add: borel_measurable_const measurable_cong)"], ["proof (state)\nthis:\n  pf1 asset 0 \\<in> borel_measurable (F 0)\n\ngoal (1 subgoal):\n 1. \\<forall>n. pf1 asset (Suc n) \\<in> borel_measurable (F n)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>n. pf1 asset (Suc n) \\<in> borel_measurable (F n)", "show \"\\<forall>n. pf1 asset (Suc n) \\<in> borel_measurable (F n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n. pf1 asset (Suc n) \\<in> borel_measurable (F n)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n. pf1 asset (Suc n) \\<in> borel_measurable (F n)", "fix n"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n. pf1 asset (Suc n) \\<in> borel_measurable (F n)", "have \"\\<forall>w. pf1 asset (Suc n) w = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>w. pf1 asset (Suc n) w = 0", "using \\<open>\\<forall>n w. pf1 asset n w = 0\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>n w. pf1 asset n w = 0\n\ngoal (1 subgoal):\n 1. \\<forall>w. pf1 asset (Suc n) w = 0", "by simp"], ["proof (state)\nthis:\n  \\<forall>w. pf1 asset (Suc n) w = 0\n\ngoal (1 subgoal):\n 1. \\<And>n. pf1 asset (Suc n) \\<in> borel_measurable (F n)", "have \"0\\<in> space borel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (0::'d) \\<in> space borel", "by simp"], ["proof (state)\nthis:\n  (0::?'d14) \\<in> space borel\n\ngoal (1 subgoal):\n 1. \\<And>n. pf1 asset (Suc n) \\<in> borel_measurable (F n)", "thus \"pf1 asset (Suc n) \\<in> measurable (F n) borel\""], ["proof (prove)\nusing this:\n  (0::?'d14) \\<in> space borel\n\ngoal (1 subgoal):\n 1. pf1 asset (Suc n) \\<in> borel_measurable (F n)", "using measurable_const[of 0 borel \"F n\"]"], ["proof (prove)\nusing this:\n  (0::?'d14) \\<in> space borel\n  (0::?'d14) \\<in> space borel \\<Longrightarrow>\n  (\\<lambda>x. 0::?'d14) \\<in> borel_measurable (F n)\n\ngoal (1 subgoal):\n 1. pf1 asset (Suc n) \\<in> borel_measurable (F n)", "by (metis \\<open>0 \\<in> space borel \\<Longrightarrow> (\\<lambda>x. 0) \\<in> borel_measurable (F n)\\<close> \\<open>0 \\<in> space borel\\<close>\n              \\<open>\\<forall>n w. pf1 asset n w = 0\\<close> measurable_cong)"], ["proof (state)\nthis:\n  pf1 asset (Suc n) \\<in> borel_measurable (F n)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>n. pf1 asset (Suc n) \\<in> borel_measurable (F n)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  borel_predict_stoch_proc F (pf1 asset)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  borel_predict_stoch_proc F (pf1 asset)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in disc_equity_market) inc_predict_support_trading_strat':\n  assumes \"trading_strategy pf1\"\n  and \"asset \\<in> support_set pf1\\<union> B\"\n  shows \"borel_predict_stoch_proc F (pf1 asset)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. borel_predict_stoch_proc F (pf1 asset)", "proof (cases \"asset \\<in> support_set pf1\")"], ["proof (state)\ngoal (2 subgoals):\n 1. asset \\<in> support_set pf1 \\<Longrightarrow>\n    borel_predict_stoch_proc F (pf1 asset)\n 2. asset \\<notin> support_set pf1 \\<Longrightarrow>\n    borel_predict_stoch_proc F (pf1 asset)", "case True"], ["proof (state)\nthis:\n  asset \\<in> support_set pf1\n\ngoal (2 subgoals):\n 1. asset \\<in> support_set pf1 \\<Longrightarrow>\n    borel_predict_stoch_proc F (pf1 asset)\n 2. asset \\<notin> support_set pf1 \\<Longrightarrow>\n    borel_predict_stoch_proc F (pf1 asset)", "thus ?thesis"], ["proof (prove)\nusing this:\n  asset \\<in> support_set pf1\n\ngoal (1 subgoal):\n 1. borel_predict_stoch_proc F (pf1 asset)", "using assms"], ["proof (prove)\nusing this:\n  asset \\<in> support_set pf1\n  trading_strategy pf1\n  asset \\<in> support_set pf1 \\<union> B\n\ngoal (1 subgoal):\n 1. borel_predict_stoch_proc F (pf1 asset)", "unfolding trading_strategy_def"], ["proof (prove)\nusing this:\n  asset \\<in> support_set pf1\n  portfolio pf1 \\<and>\n  (\\<forall>asset\\<in>support_set pf1.\n      borel_predict_stoch_proc F (pf1 asset))\n  asset \\<in> support_set pf1 \\<union> B\n\ngoal (1 subgoal):\n 1. borel_predict_stoch_proc F (pf1 asset)", "by simp"], ["proof (state)\nthis:\n  borel_predict_stoch_proc F (pf1 asset)\n\ngoal (1 subgoal):\n 1. asset \\<notin> support_set pf1 \\<Longrightarrow>\n    borel_predict_stoch_proc F (pf1 asset)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. asset \\<notin> support_set pf1 \\<Longrightarrow>\n    borel_predict_stoch_proc F (pf1 asset)", "case False"], ["proof (state)\nthis:\n  asset \\<notin> support_set pf1\n\ngoal (1 subgoal):\n 1. asset \\<notin> support_set pf1 \\<Longrightarrow>\n    borel_predict_stoch_proc F (pf1 asset)", "hence \"\\<forall>n w. pf1 asset n w = 0\""], ["proof (prove)\nusing this:\n  asset \\<notin> support_set pf1\n\ngoal (1 subgoal):\n 1. \\<forall>n w. pf1 asset n w = 0", "unfolding support_set_def"], ["proof (prove)\nusing this:\n  asset \\<notin> {x. \\<exists>n w. pf1 x n w \\<noteq> 0}\n\ngoal (1 subgoal):\n 1. \\<forall>n w. pf1 asset n w = 0", "by simp"], ["proof (state)\nthis:\n  \\<forall>n w. pf1 asset n w = 0\n\ngoal (1 subgoal):\n 1. asset \\<notin> support_set pf1 \\<Longrightarrow>\n    borel_predict_stoch_proc F (pf1 asset)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. borel_predict_stoch_proc F (pf1 asset)", "unfolding predict_stoch_proc_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. pf1 asset 0 \\<in> borel_measurable (F 0) \\<and>\n    (\\<forall>n. pf1 asset (Suc n) \\<in> borel_measurable (F n))", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. pf1 asset 0 \\<in> borel_measurable (F 0)\n 2. \\<forall>n. pf1 asset (Suc n) \\<in> borel_measurable (F n)", "show \"pf1 asset 0 \\<in> measurable (F 0) borel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pf1 asset 0 \\<in> borel_measurable (F 0)", "using \\<open>\\<forall>n w. pf1 asset n w = 0\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>n w. pf1 asset n w = 0\n\ngoal (1 subgoal):\n 1. pf1 asset 0 \\<in> borel_measurable (F 0)", "by (simp add: borel_measurable_const measurable_cong)"], ["proof (state)\nthis:\n  pf1 asset 0 \\<in> borel_measurable (F 0)\n\ngoal (1 subgoal):\n 1. \\<forall>n. pf1 asset (Suc n) \\<in> borel_measurable (F n)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>n. pf1 asset (Suc n) \\<in> borel_measurable (F n)", "show \"\\<forall>n. pf1 asset (Suc n) \\<in> borel_measurable (F n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n. pf1 asset (Suc n) \\<in> borel_measurable (F n)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n. pf1 asset (Suc n) \\<in> borel_measurable (F n)", "fix n"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n. pf1 asset (Suc n) \\<in> borel_measurable (F n)", "have \"\\<forall>w. pf1 asset (Suc n) w = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>w. pf1 asset (Suc n) w = 0", "using \\<open>\\<forall>n w. pf1 asset n w = 0\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>n w. pf1 asset n w = 0\n\ngoal (1 subgoal):\n 1. \\<forall>w. pf1 asset (Suc n) w = 0", "by simp"], ["proof (state)\nthis:\n  \\<forall>w. pf1 asset (Suc n) w = 0\n\ngoal (1 subgoal):\n 1. \\<And>n. pf1 asset (Suc n) \\<in> borel_measurable (F n)", "have \"0\\<in> space borel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (0::'d) \\<in> space borel", "by simp"], ["proof (state)\nthis:\n  (0::?'d14) \\<in> space borel\n\ngoal (1 subgoal):\n 1. \\<And>n. pf1 asset (Suc n) \\<in> borel_measurable (F n)", "thus \"pf1 asset (Suc n) \\<in> measurable (F n) borel\""], ["proof (prove)\nusing this:\n  (0::?'d14) \\<in> space borel\n\ngoal (1 subgoal):\n 1. pf1 asset (Suc n) \\<in> borel_measurable (F n)", "using measurable_const[of 0 borel \"F n\"]"], ["proof (prove)\nusing this:\n  (0::?'d14) \\<in> space borel\n  (0::?'d14) \\<in> space borel \\<Longrightarrow>\n  (\\<lambda>x. 0::?'d14) \\<in> borel_measurable (F n)\n\ngoal (1 subgoal):\n 1. pf1 asset (Suc n) \\<in> borel_measurable (F n)", "by (metis \\<open>0 \\<in> space borel \\<Longrightarrow> (\\<lambda>x. 0) \\<in> borel_measurable (F n)\\<close> \\<open>0 \\<in> space borel\\<close>\n            \\<open>\\<forall>n w. pf1 asset n w = 0\\<close> measurable_cong)"], ["proof (state)\nthis:\n  pf1 asset (Suc n) \\<in> borel_measurable (F n)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>n. pf1 asset (Suc n) \\<in> borel_measurable (F n)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  borel_predict_stoch_proc F (pf1 asset)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in disc_equity_market) inc_support_trading_strat:\n  assumes \"trading_strategy pf1\"\n  shows \"\\<forall> asset \\<in> support_set pf1 \\<union> B. borel_adapt_stoch_proc F (pf1 asset)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>asset\\<in>support_set pf1 \\<union> B.\n       borel_adapt_stoch_proc F (pf1 asset)", "using assms"], ["proof (prove)\nusing this:\n  trading_strategy pf1\n\ngoal (1 subgoal):\n 1. \\<forall>asset\\<in>support_set pf1 \\<union> B.\n       borel_adapt_stoch_proc F (pf1 asset)", "by (simp add: inc_predict_support_trading_strat predict_imp_adapt)"], ["", "lemma (in disc_equity_market) qty_empty_trading_strat:\n  shows \"trading_strategy qty_empty\""], ["proof (prove)\ngoal (1 subgoal):\n 1. trading_strategy qty_empty", "unfolding trading_strategy_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. portfolio qty_empty \\<and>\n    (\\<forall>asset\\<in>support_set qty_empty.\n        borel_predict_stoch_proc F (qty_empty asset))", "proof (intro conjI ballI)"], ["proof (state)\ngoal (2 subgoals):\n 1. portfolio qty_empty\n 2. \\<And>asset.\n       asset \\<in> support_set qty_empty \\<Longrightarrow>\n       borel_predict_stoch_proc F (qty_empty asset)", "show \"portfolio qty_empty\""], ["proof (prove)\ngoal (1 subgoal):\n 1. portfolio qty_empty", "by (metis fun_upd_triv qty_single_def single_comp_portfolio)"], ["proof (state)\nthis:\n  portfolio qty_empty\n\ngoal (1 subgoal):\n 1. \\<And>asset.\n       asset \\<in> support_set qty_empty \\<Longrightarrow>\n       borel_predict_stoch_proc F (qty_empty asset)", "show \"\\<And>asset. asset \\<in> support_set qty_empty \\<Longrightarrow> borel_predict_stoch_proc F (qty_empty asset)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>asset.\n       asset \\<in> support_set qty_empty \\<Longrightarrow>\n       borel_predict_stoch_proc F (qty_empty asset)", "using qty_empty_support_set"], ["proof (prove)\nusing this:\n  support_set qty_empty = {}\n\ngoal (1 subgoal):\n 1. \\<And>asset.\n       asset \\<in> support_set qty_empty \\<Longrightarrow>\n       borel_predict_stoch_proc F (qty_empty asset)", "by auto"], ["proof (state)\nthis:\n  ?asset14 \\<in> support_set qty_empty \\<Longrightarrow>\n  borel_predict_stoch_proc F (qty_empty ?asset14)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in disc_equity_market) sum_trading_strat:\n  assumes \"trading_strategy pf1\"\n  and \"trading_strategy pf2\"\nshows \"trading_strategy (qty_sum pf1 pf2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. trading_strategy (qty_sum pf1 pf2)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. trading_strategy (qty_sum pf1 pf2)", "have \"\\<forall> asset \\<in> support_set pf1 \\<union> support_set pf2. borel_predict_stoch_proc F (pf1 asset)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>asset\\<in>support_set pf1 \\<union> support_set pf2.\n       borel_predict_stoch_proc F (pf1 asset)", "using assms"], ["proof (prove)\nusing this:\n  trading_strategy pf1\n  trading_strategy pf2\n\ngoal (1 subgoal):\n 1. \\<forall>asset\\<in>support_set pf1 \\<union> support_set pf2.\n       borel_predict_stoch_proc F (pf1 asset)", "by (simp add: inc_predict_support_trading_strat)"], ["proof (state)\nthis:\n  \\<forall>asset\\<in>support_set pf1 \\<union> support_set pf2.\n     borel_predict_stoch_proc F (pf1 asset)\n\ngoal (1 subgoal):\n 1. trading_strategy (qty_sum pf1 pf2)", "have \"\\<forall> asset \\<in> support_set pf2 \\<union> support_set pf1. borel_predict_stoch_proc F (pf2 asset)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>asset\\<in>support_set pf2 \\<union> support_set pf1.\n       borel_predict_stoch_proc F (pf2 asset)", "using assms"], ["proof (prove)\nusing this:\n  trading_strategy pf1\n  trading_strategy pf2\n\ngoal (1 subgoal):\n 1. \\<forall>asset\\<in>support_set pf2 \\<union> support_set pf1.\n       borel_predict_stoch_proc F (pf2 asset)", "by (simp add: inc_predict_support_trading_strat)"], ["proof (state)\nthis:\n  \\<forall>asset\\<in>support_set pf2 \\<union> support_set pf1.\n     borel_predict_stoch_proc F (pf2 asset)\n\ngoal (1 subgoal):\n 1. trading_strategy (qty_sum pf1 pf2)", "have \"\\<forall> asset \\<in> support_set pf1 \\<union> support_set pf2. borel_predict_stoch_proc F ((qty_sum pf1 pf2) asset)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>asset\\<in>support_set pf1 \\<union> support_set pf2.\n       borel_predict_stoch_proc F (qty_sum pf1 pf2 asset)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>asset.\n       asset\n       \\<in> support_set pf1 \\<union> support_set pf2 \\<Longrightarrow>\n       borel_predict_stoch_proc F (qty_sum pf1 pf2 asset)", "fix asset"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>asset.\n       asset\n       \\<in> support_set pf1 \\<union> support_set pf2 \\<Longrightarrow>\n       borel_predict_stoch_proc F (qty_sum pf1 pf2 asset)", "assume \"asset \\<in> support_set pf1 \\<union> support_set pf2\""], ["proof (state)\nthis:\n  asset \\<in> support_set pf1 \\<union> support_set pf2\n\ngoal (1 subgoal):\n 1. \\<And>asset.\n       asset\n       \\<in> support_set pf1 \\<union> support_set pf2 \\<Longrightarrow>\n       borel_predict_stoch_proc F (qty_sum pf1 pf2 asset)", "show \"borel_predict_stoch_proc F (qty_sum pf1 pf2 asset)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. borel_predict_stoch_proc F (qty_sum pf1 pf2 asset)", "unfolding predict_stoch_proc_def qty_sum_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>w. pf1 asset 0 w + pf2 asset 0 w)\n    \\<in> borel_measurable (F 0) \\<and>\n    (\\<forall>n.\n        (\\<lambda>w. pf1 asset (Suc n) w + pf2 asset (Suc n) w)\n        \\<in> borel_measurable (F n))", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. (\\<lambda>w. pf1 asset 0 w + pf2 asset 0 w) \\<in> borel_measurable (F 0)\n 2. \\<forall>n.\n       (\\<lambda>w. pf1 asset (Suc n) w + pf2 asset (Suc n) w)\n       \\<in> borel_measurable (F n)", "show \"(\\<lambda>w. pf1 asset 0 w + pf2 asset 0 w) \\<in> borel_measurable (F 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>w. pf1 asset 0 w + pf2 asset 0 w) \\<in> borel_measurable (F 0)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<lambda>w. pf1 asset 0 w + pf2 asset 0 w) \\<in> borel_measurable (F 0)", "have \"(\\<lambda>w. pf1 asset 0 w) \\<in> borel_measurable (F 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pf1 asset 0 \\<in> borel_measurable (F 0)", "using \\<open>\\<forall>asset\\<in>support_set pf1 \\<union> support_set pf2. borel_predict_stoch_proc F (pf1 asset)\\<close>\n        \\<open>asset \\<in> support_set pf1 \\<union> support_set pf2\\<close> predict_stoch_proc_def"], ["proof (prove)\nusing this:\n  \\<forall>asset\\<in>support_set pf1 \\<union> support_set pf2.\n     borel_predict_stoch_proc F (pf1 asset)\n  asset \\<in> support_set pf1 \\<union> support_set pf2\n  predict_stoch_proc ?F ?X ?N =\n  (?X 0 \\<in> ?F 0 \\<rightarrow>\\<^sub>M ?N \\<and>\n   (\\<forall>n. ?X (Suc n) \\<in> ?F n \\<rightarrow>\\<^sub>M ?N))\n\ngoal (1 subgoal):\n 1. pf1 asset 0 \\<in> borel_measurable (F 0)", "by blast"], ["proof (state)\nthis:\n  pf1 asset 0 \\<in> borel_measurable (F 0)\n\ngoal (1 subgoal):\n 1. (\\<lambda>w. pf1 asset 0 w + pf2 asset 0 w) \\<in> borel_measurable (F 0)", "moreover"], ["proof (state)\nthis:\n  pf1 asset 0 \\<in> borel_measurable (F 0)\n\ngoal (1 subgoal):\n 1. (\\<lambda>w. pf1 asset 0 w + pf2 asset 0 w) \\<in> borel_measurable (F 0)", "have \"(\\<lambda>w. pf2 asset 0 w) \\<in> borel_measurable (F 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pf2 asset 0 \\<in> borel_measurable (F 0)", "using \\<open>\\<forall>asset\\<in>support_set pf2 \\<union> support_set pf1. borel_predict_stoch_proc F (pf2 asset)\\<close>\n          \\<open>asset \\<in> support_set pf1 \\<union> support_set pf2\\<close> predict_stoch_proc_def"], ["proof (prove)\nusing this:\n  \\<forall>asset\\<in>support_set pf2 \\<union> support_set pf1.\n     borel_predict_stoch_proc F (pf2 asset)\n  asset \\<in> support_set pf1 \\<union> support_set pf2\n  predict_stoch_proc ?F ?X ?N =\n  (?X 0 \\<in> ?F 0 \\<rightarrow>\\<^sub>M ?N \\<and>\n   (\\<forall>n. ?X (Suc n) \\<in> ?F n \\<rightarrow>\\<^sub>M ?N))\n\ngoal (1 subgoal):\n 1. pf2 asset 0 \\<in> borel_measurable (F 0)", "by blast"], ["proof (state)\nthis:\n  pf2 asset 0 \\<in> borel_measurable (F 0)\n\ngoal (1 subgoal):\n 1. (\\<lambda>w. pf1 asset 0 w + pf2 asset 0 w) \\<in> borel_measurable (F 0)", "ultimately"], ["proof (chain)\npicking this:\n  pf1 asset 0 \\<in> borel_measurable (F 0)\n  pf2 asset 0 \\<in> borel_measurable (F 0)", "show ?thesis"], ["proof (prove)\nusing this:\n  pf1 asset 0 \\<in> borel_measurable (F 0)\n  pf2 asset 0 \\<in> borel_measurable (F 0)\n\ngoal (1 subgoal):\n 1. (\\<lambda>w. pf1 asset 0 w + pf2 asset 0 w) \\<in> borel_measurable (F 0)", "by simp"], ["proof (state)\nthis:\n  (\\<lambda>w. pf1 asset 0 w + pf2 asset 0 w) \\<in> borel_measurable (F 0)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<lambda>w. pf1 asset 0 w + pf2 asset 0 w) \\<in> borel_measurable (F 0)\n\ngoal (1 subgoal):\n 1. \\<forall>n.\n       (\\<lambda>w. pf1 asset (Suc n) w + pf2 asset (Suc n) w)\n       \\<in> borel_measurable (F n)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>n.\n       (\\<lambda>w. pf1 asset (Suc n) w + pf2 asset (Suc n) w)\n       \\<in> borel_measurable (F n)", "show \"\\<forall>n. (\\<lambda>w. pf1 asset (Suc n) w + pf2 asset (Suc n) w) \\<in> borel_measurable (F n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n.\n       (\\<lambda>w. pf1 asset (Suc n) w + pf2 asset (Suc n) w)\n       \\<in> borel_measurable (F n)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       (\\<lambda>w. pf1 asset (Suc n) w + pf2 asset (Suc n) w)\n       \\<in> borel_measurable (F n)", "fix n"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       (\\<lambda>w. pf1 asset (Suc n) w + pf2 asset (Suc n) w)\n       \\<in> borel_measurable (F n)", "have \"(\\<lambda>w. pf1 asset (Suc n) w) \\<in> borel_measurable (F n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pf1 asset (Suc n) \\<in> borel_measurable (F n)", "using \\<open>\\<forall>asset\\<in>support_set pf1 \\<union> support_set pf2. borel_predict_stoch_proc F (pf1 asset)\\<close>\n          \\<open>asset \\<in> support_set pf1 \\<union> support_set pf2\\<close> predict_stoch_proc_def"], ["proof (prove)\nusing this:\n  \\<forall>asset\\<in>support_set pf1 \\<union> support_set pf2.\n     borel_predict_stoch_proc F (pf1 asset)\n  asset \\<in> support_set pf1 \\<union> support_set pf2\n  predict_stoch_proc ?F ?X ?N =\n  (?X 0 \\<in> ?F 0 \\<rightarrow>\\<^sub>M ?N \\<and>\n   (\\<forall>n. ?X (Suc n) \\<in> ?F n \\<rightarrow>\\<^sub>M ?N))\n\ngoal (1 subgoal):\n 1. pf1 asset (Suc n) \\<in> borel_measurable (F n)", "by blast"], ["proof (state)\nthis:\n  pf1 asset (Suc n) \\<in> borel_measurable (F n)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       (\\<lambda>w. pf1 asset (Suc n) w + pf2 asset (Suc n) w)\n       \\<in> borel_measurable (F n)", "moreover"], ["proof (state)\nthis:\n  pf1 asset (Suc n) \\<in> borel_measurable (F n)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       (\\<lambda>w. pf1 asset (Suc n) w + pf2 asset (Suc n) w)\n       \\<in> borel_measurable (F n)", "have \"(\\<lambda>w. pf2 asset (Suc n) w) \\<in> borel_measurable (F n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pf2 asset (Suc n) \\<in> borel_measurable (F n)", "using \\<open>\\<forall>asset\\<in>support_set pf2 \\<union> support_set pf1. borel_predict_stoch_proc F (pf2 asset)\\<close>\n          \\<open>asset \\<in> support_set pf1 \\<union> support_set pf2\\<close> predict_stoch_proc_def"], ["proof (prove)\nusing this:\n  \\<forall>asset\\<in>support_set pf2 \\<union> support_set pf1.\n     borel_predict_stoch_proc F (pf2 asset)\n  asset \\<in> support_set pf1 \\<union> support_set pf2\n  predict_stoch_proc ?F ?X ?N =\n  (?X 0 \\<in> ?F 0 \\<rightarrow>\\<^sub>M ?N \\<and>\n   (\\<forall>n. ?X (Suc n) \\<in> ?F n \\<rightarrow>\\<^sub>M ?N))\n\ngoal (1 subgoal):\n 1. pf2 asset (Suc n) \\<in> borel_measurable (F n)", "by blast"], ["proof (state)\nthis:\n  pf2 asset (Suc n) \\<in> borel_measurable (F n)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       (\\<lambda>w. pf1 asset (Suc n) w + pf2 asset (Suc n) w)\n       \\<in> borel_measurable (F n)", "ultimately"], ["proof (chain)\npicking this:\n  pf1 asset (Suc n) \\<in> borel_measurable (F n)\n  pf2 asset (Suc n) \\<in> borel_measurable (F n)", "show \"(\\<lambda>w. pf1 asset (Suc n) w + pf2 asset (Suc n) w) \\<in> borel_measurable (F n)\""], ["proof (prove)\nusing this:\n  pf1 asset (Suc n) \\<in> borel_measurable (F n)\n  pf2 asset (Suc n) \\<in> borel_measurable (F n)\n\ngoal (1 subgoal):\n 1. (\\<lambda>w. pf1 asset (Suc n) w + pf2 asset (Suc n) w)\n    \\<in> borel_measurable (F n)", "by simp"], ["proof (state)\nthis:\n  (\\<lambda>w. pf1 asset (Suc n) w + pf2 asset (Suc n) w)\n  \\<in> borel_measurable (F n)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>n.\n     (\\<lambda>w. pf1 asset (Suc n) w + pf2 asset (Suc n) w)\n     \\<in> borel_measurable (F n)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  borel_predict_stoch_proc F (qty_sum pf1 pf2 asset)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>asset\\<in>support_set pf1 \\<union> support_set pf2.\n     borel_predict_stoch_proc F (qty_sum pf1 pf2 asset)\n\ngoal (1 subgoal):\n 1. trading_strategy (qty_sum pf1 pf2)", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>asset\\<in>support_set pf1 \\<union> support_set pf2.\n     borel_predict_stoch_proc F (qty_sum pf1 pf2 asset)\n\ngoal (1 subgoal):\n 1. trading_strategy (qty_sum pf1 pf2)", "unfolding trading_strategy_def"], ["proof (prove)\nusing this:\n  \\<forall>asset\\<in>support_set pf1 \\<union> support_set pf2.\n     borel_predict_stoch_proc F (qty_sum pf1 pf2 asset)\n\ngoal (1 subgoal):\n 1. portfolio (qty_sum pf1 pf2) \\<and>\n    (\\<forall>asset\\<in>support_set (qty_sum pf1 pf2).\n        borel_predict_stoch_proc F (qty_sum pf1 pf2 asset))", "using sum_support_set[of pf1 pf2]"], ["proof (prove)\nusing this:\n  \\<forall>asset\\<in>support_set pf1 \\<union> support_set pf2.\n     borel_predict_stoch_proc F (qty_sum pf1 pf2 asset)\n  support_set (qty_sum pf1 pf2)\n  \\<subseteq> support_set pf1 \\<union> support_set pf2\n\ngoal (1 subgoal):\n 1. portfolio (qty_sum pf1 pf2) \\<and>\n    (\\<forall>asset\\<in>support_set (qty_sum pf1 pf2).\n        borel_predict_stoch_proc F (qty_sum pf1 pf2 asset))", "by (meson assms(1) assms(2) subsetCE sum_portfolio trading_strategy_def)"], ["proof (state)\nthis:\n  trading_strategy (qty_sum pf1 pf2)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in disc_equity_market) mult_comp_trading_strat:\n  assumes \"trading_strategy pf1\"\n  and \"borel_predict_stoch_proc F qty\"\nshows \"trading_strategy (qty_mult_comp pf1 qty)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. trading_strategy (qty_mult_comp pf1 qty)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. trading_strategy (qty_mult_comp pf1 qty)", "have \"\\<forall> asset \\<in> support_set pf1. borel_predict_stoch_proc F (pf1 asset)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>asset\\<in>support_set pf1.\n       borel_predict_stoch_proc F (pf1 asset)", "using assms"], ["proof (prove)\nusing this:\n  trading_strategy pf1\n  borel_predict_stoch_proc F qty\n\ngoal (1 subgoal):\n 1. \\<forall>asset\\<in>support_set pf1.\n       borel_predict_stoch_proc F (pf1 asset)", "unfolding trading_strategy_def"], ["proof (prove)\nusing this:\n  portfolio pf1 \\<and>\n  (\\<forall>asset\\<in>support_set pf1.\n      borel_predict_stoch_proc F (pf1 asset))\n  borel_predict_stoch_proc F qty\n\ngoal (1 subgoal):\n 1. \\<forall>asset\\<in>support_set pf1.\n       borel_predict_stoch_proc F (pf1 asset)", "by simp"], ["proof (state)\nthis:\n  \\<forall>asset\\<in>support_set pf1. borel_predict_stoch_proc F (pf1 asset)\n\ngoal (1 subgoal):\n 1. trading_strategy (qty_mult_comp pf1 qty)", "have \"\\<forall> asset \\<in> support_set pf1. borel_predict_stoch_proc F (qty_mult_comp pf1 qty asset)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>asset\\<in>support_set pf1.\n       borel_predict_stoch_proc F (qty_mult_comp pf1 qty asset)", "unfolding predict_stoch_proc_def qty_mult_comp_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>asset\\<in>support_set pf1.\n       (\\<lambda>w. pf1 asset 0 w * qty 0 w)\n       \\<in> borel_measurable (F 0) \\<and>\n       (\\<forall>n.\n           (\\<lambda>w. pf1 asset (Suc n) w * qty (Suc n) w)\n           \\<in> borel_measurable (F n))", "proof (intro ballI conjI)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>asset.\n       asset \\<in> support_set pf1 \\<Longrightarrow>\n       (\\<lambda>w. pf1 asset 0 w * qty 0 w) \\<in> borel_measurable (F 0)\n 2. \\<And>asset.\n       asset \\<in> support_set pf1 \\<Longrightarrow>\n       \\<forall>n.\n          (\\<lambda>w. pf1 asset (Suc n) w * qty (Suc n) w)\n          \\<in> borel_measurable (F n)", "fix asset"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>asset.\n       asset \\<in> support_set pf1 \\<Longrightarrow>\n       (\\<lambda>w. pf1 asset 0 w * qty 0 w) \\<in> borel_measurable (F 0)\n 2. \\<And>asset.\n       asset \\<in> support_set pf1 \\<Longrightarrow>\n       \\<forall>n.\n          (\\<lambda>w. pf1 asset (Suc n) w * qty (Suc n) w)\n          \\<in> borel_measurable (F n)", "assume \"asset \\<in> support_set pf1\""], ["proof (state)\nthis:\n  asset \\<in> support_set pf1\n\ngoal (2 subgoals):\n 1. \\<And>asset.\n       asset \\<in> support_set pf1 \\<Longrightarrow>\n       (\\<lambda>w. pf1 asset 0 w * qty 0 w) \\<in> borel_measurable (F 0)\n 2. \\<And>asset.\n       asset \\<in> support_set pf1 \\<Longrightarrow>\n       \\<forall>n.\n          (\\<lambda>w. pf1 asset (Suc n) w * qty (Suc n) w)\n          \\<in> borel_measurable (F n)", "show \"(\\<lambda>w. pf1 asset 0 w * qty 0 w) \\<in> borel_measurable (F 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>w. pf1 asset 0 w * qty 0 w) \\<in> borel_measurable (F 0)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<lambda>w. pf1 asset 0 w * qty 0 w) \\<in> borel_measurable (F 0)", "have \"(\\<lambda>w. pf1 asset 0 w) \\<in> borel_measurable (F 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pf1 asset 0 \\<in> borel_measurable (F 0)", "using \\<open>\\<forall>asset\\<in>support_set pf1. borel_predict_stoch_proc F (pf1 asset)\\<close>\n        \\<open>asset \\<in> support_set pf1\\<close> predict_stoch_proc_def"], ["proof (prove)\nusing this:\n  \\<forall>asset\\<in>support_set pf1. borel_predict_stoch_proc F (pf1 asset)\n  asset \\<in> support_set pf1\n  predict_stoch_proc ?F ?X ?N =\n  (?X 0 \\<in> ?F 0 \\<rightarrow>\\<^sub>M ?N \\<and>\n   (\\<forall>n. ?X (Suc n) \\<in> ?F n \\<rightarrow>\\<^sub>M ?N))\n\ngoal (1 subgoal):\n 1. pf1 asset 0 \\<in> borel_measurable (F 0)", "by auto"], ["proof (state)\nthis:\n  pf1 asset 0 \\<in> borel_measurable (F 0)\n\ngoal (1 subgoal):\n 1. (\\<lambda>w. pf1 asset 0 w * qty 0 w) \\<in> borel_measurable (F 0)", "moreover"], ["proof (state)\nthis:\n  pf1 asset 0 \\<in> borel_measurable (F 0)\n\ngoal (1 subgoal):\n 1. (\\<lambda>w. pf1 asset 0 w * qty 0 w) \\<in> borel_measurable (F 0)", "have \"(\\<lambda>w. qty 0 w) \\<in> borel_measurable (F 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qty 0 \\<in> borel_measurable (F 0)", "using assms predict_stoch_proc_def"], ["proof (prove)\nusing this:\n  trading_strategy pf1\n  borel_predict_stoch_proc F qty\n  predict_stoch_proc ?F ?X ?N =\n  (?X 0 \\<in> ?F 0 \\<rightarrow>\\<^sub>M ?N \\<and>\n   (\\<forall>n. ?X (Suc n) \\<in> ?F n \\<rightarrow>\\<^sub>M ?N))\n\ngoal (1 subgoal):\n 1. qty 0 \\<in> borel_measurable (F 0)", "by auto"], ["proof (state)\nthis:\n  qty 0 \\<in> borel_measurable (F 0)\n\ngoal (1 subgoal):\n 1. (\\<lambda>w. pf1 asset 0 w * qty 0 w) \\<in> borel_measurable (F 0)", "ultimately"], ["proof (chain)\npicking this:\n  pf1 asset 0 \\<in> borel_measurable (F 0)\n  qty 0 \\<in> borel_measurable (F 0)", "show \"(\\<lambda>w. pf1 asset 0 w * qty 0 w) \\<in> borel_measurable (F 0)\""], ["proof (prove)\nusing this:\n  pf1 asset 0 \\<in> borel_measurable (F 0)\n  qty 0 \\<in> borel_measurable (F 0)\n\ngoal (1 subgoal):\n 1. (\\<lambda>w. pf1 asset 0 w * qty 0 w) \\<in> borel_measurable (F 0)", "by simp"], ["proof (state)\nthis:\n  (\\<lambda>w. pf1 asset 0 w * qty 0 w) \\<in> borel_measurable (F 0)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<lambda>w. pf1 asset 0 w * qty 0 w) \\<in> borel_measurable (F 0)\n\ngoal (1 subgoal):\n 1. \\<And>asset.\n       asset \\<in> support_set pf1 \\<Longrightarrow>\n       \\<forall>n.\n          (\\<lambda>w. pf1 asset (Suc n) w * qty (Suc n) w)\n          \\<in> borel_measurable (F n)", "show \"\\<forall>n. (\\<lambda>w. pf1 asset (Suc n) w * qty (Suc n) w) \\<in> borel_measurable (F n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n.\n       (\\<lambda>w. pf1 asset (Suc n) w * qty (Suc n) w)\n       \\<in> borel_measurable (F n)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       (\\<lambda>w. pf1 asset (Suc n) w * qty (Suc n) w)\n       \\<in> borel_measurable (F n)", "fix n"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       (\\<lambda>w. pf1 asset (Suc n) w * qty (Suc n) w)\n       \\<in> borel_measurable (F n)", "have \"(\\<lambda>w. pf1 asset (Suc n) w) \\<in> borel_measurable (F n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pf1 asset (Suc n) \\<in> borel_measurable (F n)", "using \\<open>\\<forall>asset\\<in>support_set pf1. borel_predict_stoch_proc F (pf1 asset)\\<close>\n        \\<open>asset \\<in> support_set pf1\\<close> predict_stoch_proc_def"], ["proof (prove)\nusing this:\n  \\<forall>asset\\<in>support_set pf1. borel_predict_stoch_proc F (pf1 asset)\n  asset \\<in> support_set pf1\n  predict_stoch_proc ?F ?X ?N =\n  (?X 0 \\<in> ?F 0 \\<rightarrow>\\<^sub>M ?N \\<and>\n   (\\<forall>n. ?X (Suc n) \\<in> ?F n \\<rightarrow>\\<^sub>M ?N))\n\ngoal (1 subgoal):\n 1. pf1 asset (Suc n) \\<in> borel_measurable (F n)", "by blast"], ["proof (state)\nthis:\n  pf1 asset (Suc n) \\<in> borel_measurable (F n)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       (\\<lambda>w. pf1 asset (Suc n) w * qty (Suc n) w)\n       \\<in> borel_measurable (F n)", "moreover"], ["proof (state)\nthis:\n  pf1 asset (Suc n) \\<in> borel_measurable (F n)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       (\\<lambda>w. pf1 asset (Suc n) w * qty (Suc n) w)\n       \\<in> borel_measurable (F n)", "have \"(\\<lambda>w. qty (Suc n) w) \\<in> borel_measurable (F n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qty (Suc n) \\<in> borel_measurable (F n)", "using assms predict_stoch_proc_def"], ["proof (prove)\nusing this:\n  trading_strategy pf1\n  borel_predict_stoch_proc F qty\n  predict_stoch_proc ?F ?X ?N =\n  (?X 0 \\<in> ?F 0 \\<rightarrow>\\<^sub>M ?N \\<and>\n   (\\<forall>n. ?X (Suc n) \\<in> ?F n \\<rightarrow>\\<^sub>M ?N))\n\ngoal (1 subgoal):\n 1. qty (Suc n) \\<in> borel_measurable (F n)", "by blast"], ["proof (state)\nthis:\n  qty (Suc n) \\<in> borel_measurable (F n)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       (\\<lambda>w. pf1 asset (Suc n) w * qty (Suc n) w)\n       \\<in> borel_measurable (F n)", "ultimately"], ["proof (chain)\npicking this:\n  pf1 asset (Suc n) \\<in> borel_measurable (F n)\n  qty (Suc n) \\<in> borel_measurable (F n)", "show \"(\\<lambda>w. pf1 asset (Suc n) w * qty (Suc n) w) \\<in> borel_measurable (F n)\""], ["proof (prove)\nusing this:\n  pf1 asset (Suc n) \\<in> borel_measurable (F n)\n  qty (Suc n) \\<in> borel_measurable (F n)\n\ngoal (1 subgoal):\n 1. (\\<lambda>w. pf1 asset (Suc n) w * qty (Suc n) w)\n    \\<in> borel_measurable (F n)", "by simp"], ["proof (state)\nthis:\n  (\\<lambda>w. pf1 asset (Suc n) w * qty (Suc n) w)\n  \\<in> borel_measurable (F n)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>n.\n     (\\<lambda>w. pf1 asset (Suc n) w * qty (Suc n) w)\n     \\<in> borel_measurable (F n)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>asset\\<in>support_set pf1.\n     borel_predict_stoch_proc F (qty_mult_comp pf1 qty asset)\n\ngoal (1 subgoal):\n 1. trading_strategy (qty_mult_comp pf1 qty)", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>asset\\<in>support_set pf1.\n     borel_predict_stoch_proc F (qty_mult_comp pf1 qty asset)\n\ngoal (1 subgoal):\n 1. trading_strategy (qty_mult_comp pf1 qty)", "unfolding trading_strategy_def"], ["proof (prove)\nusing this:\n  \\<forall>asset\\<in>support_set pf1.\n     borel_predict_stoch_proc F (qty_mult_comp pf1 qty asset)\n\ngoal (1 subgoal):\n 1. portfolio (qty_mult_comp pf1 qty) \\<and>\n    (\\<forall>asset\\<in>support_set (qty_mult_comp pf1 qty).\n        borel_predict_stoch_proc F (qty_mult_comp pf1 qty asset))", "using mult_comp_support_set[of pf1 qty]"], ["proof (prove)\nusing this:\n  \\<forall>asset\\<in>support_set pf1.\n     borel_predict_stoch_proc F (qty_mult_comp pf1 qty asset)\n  support_set (qty_mult_comp pf1 qty) \\<subseteq> support_set pf1\n\ngoal (1 subgoal):\n 1. portfolio (qty_mult_comp pf1 qty) \\<and>\n    (\\<forall>asset\\<in>support_set (qty_mult_comp pf1 qty).\n        borel_predict_stoch_proc F (qty_mult_comp pf1 qty asset))", "by (meson assms(1) mult_comp_portfolio subsetCE trading_strategy_def)"], ["proof (state)\nthis:\n  trading_strategy (qty_mult_comp pf1 qty)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in disc_equity_market) remove_comp_trading_strat:\n  assumes \"trading_strategy pf1\"\nshows \"trading_strategy (qty_rem_comp pf1 x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. trading_strategy (qty_rem_comp pf1 x)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. trading_strategy (qty_rem_comp pf1 x)", "have \"\\<forall> asset \\<in> support_set pf1. borel_predict_stoch_proc F (pf1 asset)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>asset\\<in>support_set pf1.\n       borel_predict_stoch_proc F (pf1 asset)", "using assms"], ["proof (prove)\nusing this:\n  trading_strategy pf1\n\ngoal (1 subgoal):\n 1. \\<forall>asset\\<in>support_set pf1.\n       borel_predict_stoch_proc F (pf1 asset)", "unfolding trading_strategy_def"], ["proof (prove)\nusing this:\n  portfolio pf1 \\<and>\n  (\\<forall>asset\\<in>support_set pf1.\n      borel_predict_stoch_proc F (pf1 asset))\n\ngoal (1 subgoal):\n 1. \\<forall>asset\\<in>support_set pf1.\n       borel_predict_stoch_proc F (pf1 asset)", "by simp"], ["proof (state)\nthis:\n  \\<forall>asset\\<in>support_set pf1. borel_predict_stoch_proc F (pf1 asset)\n\ngoal (1 subgoal):\n 1. trading_strategy (qty_rem_comp pf1 x)", "have \"\\<forall> asset \\<in> support_set pf1. borel_predict_stoch_proc F (qty_rem_comp pf1 x asset)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>asset\\<in>support_set pf1.\n       borel_predict_stoch_proc F (qty_rem_comp pf1 x asset)", "unfolding predict_stoch_proc_def qty_rem_comp_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>asset\\<in>support_set pf1.\n       (pf1(x := \\<lambda>n w. 0)) asset 0\n       \\<in> borel_measurable (F 0) \\<and>\n       (\\<forall>n.\n           (pf1(x := \\<lambda>n w. 0)) asset (Suc n)\n           \\<in> borel_measurable (F n))", "proof (intro ballI conjI)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>asset.\n       asset \\<in> support_set pf1 \\<Longrightarrow>\n       (pf1(x := \\<lambda>n w. 0)) asset 0 \\<in> borel_measurable (F 0)\n 2. \\<And>asset.\n       asset \\<in> support_set pf1 \\<Longrightarrow>\n       \\<forall>n.\n          (pf1(x := \\<lambda>n w. 0)) asset (Suc n)\n          \\<in> borel_measurable (F n)", "fix asset"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>asset.\n       asset \\<in> support_set pf1 \\<Longrightarrow>\n       (pf1(x := \\<lambda>n w. 0)) asset 0 \\<in> borel_measurable (F 0)\n 2. \\<And>asset.\n       asset \\<in> support_set pf1 \\<Longrightarrow>\n       \\<forall>n.\n          (pf1(x := \\<lambda>n w. 0)) asset (Suc n)\n          \\<in> borel_measurable (F n)", "assume \"asset \\<in> support_set pf1\""], ["proof (state)\nthis:\n  asset \\<in> support_set pf1\n\ngoal (2 subgoals):\n 1. \\<And>asset.\n       asset \\<in> support_set pf1 \\<Longrightarrow>\n       (pf1(x := \\<lambda>n w. 0)) asset 0 \\<in> borel_measurable (F 0)\n 2. \\<And>asset.\n       asset \\<in> support_set pf1 \\<Longrightarrow>\n       \\<forall>n.\n          (pf1(x := \\<lambda>n w. 0)) asset (Suc n)\n          \\<in> borel_measurable (F n)", "show \"(pf1(x := \\<lambda>n w. 0)) asset 0 \\<in> borel_measurable (F 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (pf1(x := \\<lambda>n w. 0)) asset 0 \\<in> borel_measurable (F 0)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (pf1(x := \\<lambda>n w. 0)) asset 0 \\<in> borel_measurable (F 0)", "show \"(\\<lambda>w. (pf1(x := \\<lambda>n w. 0)) asset 0 w) \\<in> borel_measurable (F 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (pf1(x := \\<lambda>n w. 0)) asset 0 \\<in> borel_measurable (F 0)", "proof (cases \"asset = x\")"], ["proof (state)\ngoal (2 subgoals):\n 1. asset = x \\<Longrightarrow>\n    (pf1(x := \\<lambda>n w. 0)) asset 0 \\<in> borel_measurable (F 0)\n 2. asset \\<noteq> x \\<Longrightarrow>\n    (pf1(x := \\<lambda>n w. 0)) asset 0 \\<in> borel_measurable (F 0)", "case True"], ["proof (state)\nthis:\n  asset = x\n\ngoal (2 subgoals):\n 1. asset = x \\<Longrightarrow>\n    (pf1(x := \\<lambda>n w. 0)) asset 0 \\<in> borel_measurable (F 0)\n 2. asset \\<noteq> x \\<Longrightarrow>\n    (pf1(x := \\<lambda>n w. 0)) asset 0 \\<in> borel_measurable (F 0)", "thus ?thesis"], ["proof (prove)\nusing this:\n  asset = x\n\ngoal (1 subgoal):\n 1. (pf1(x := \\<lambda>n w. 0)) asset 0 \\<in> borel_measurable (F 0)", "by simp"], ["proof (state)\nthis:\n  (pf1(x := \\<lambda>n w. 0)) asset 0 \\<in> borel_measurable (F 0)\n\ngoal (1 subgoal):\n 1. asset \\<noteq> x \\<Longrightarrow>\n    (pf1(x := \\<lambda>n w. 0)) asset 0 \\<in> borel_measurable (F 0)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. asset \\<noteq> x \\<Longrightarrow>\n    (pf1(x := \\<lambda>n w. 0)) asset 0 \\<in> borel_measurable (F 0)", "case False"], ["proof (state)\nthis:\n  asset \\<noteq> x\n\ngoal (1 subgoal):\n 1. asset \\<noteq> x \\<Longrightarrow>\n    (pf1(x := \\<lambda>n w. 0)) asset 0 \\<in> borel_measurable (F 0)", "thus \"(\\<lambda>w. (pf1(x := \\<lambda>n w. 0)) asset 0 w) \\<in> borel_measurable (F 0)\""], ["proof (prove)\nusing this:\n  asset \\<noteq> x\n\ngoal (1 subgoal):\n 1. (pf1(x := \\<lambda>n w. 0)) asset 0 \\<in> borel_measurable (F 0)", "using \\<open>\\<forall>asset\\<in>support_set pf1. borel_predict_stoch_proc F (pf1 asset)\\<close>\n          \\<open>asset \\<in> support_set pf1\\<close>"], ["proof (prove)\nusing this:\n  asset \\<noteq> x\n  \\<forall>asset\\<in>support_set pf1. borel_predict_stoch_proc F (pf1 asset)\n  asset \\<in> support_set pf1\n\ngoal (1 subgoal):\n 1. (pf1(x := \\<lambda>n w. 0)) asset 0 \\<in> borel_measurable (F 0)", "by (simp add: predict_stoch_proc_def)"], ["proof (state)\nthis:\n  (pf1(x := \\<lambda>n w. 0)) asset 0 \\<in> borel_measurable (F 0)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (pf1(x := \\<lambda>n w. 0)) asset 0 \\<in> borel_measurable (F 0)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (pf1(x := \\<lambda>n w. 0)) asset 0 \\<in> borel_measurable (F 0)\n\ngoal (1 subgoal):\n 1. \\<And>asset.\n       asset \\<in> support_set pf1 \\<Longrightarrow>\n       \\<forall>n.\n          (pf1(x := \\<lambda>n w. 0)) asset (Suc n)\n          \\<in> borel_measurable (F n)", "show \"\\<forall>n. (\\<lambda>w. (pf1(x := \\<lambda>n w. 0)) asset (Suc n) w) \\<in> borel_measurable (F n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n.\n       (pf1(x := \\<lambda>n w. 0)) asset (Suc n)\n       \\<in> borel_measurable (F n)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       (pf1(x := \\<lambda>n w. 0)) asset (Suc n)\n       \\<in> borel_measurable (F n)", "fix n"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       (pf1(x := \\<lambda>n w. 0)) asset (Suc n)\n       \\<in> borel_measurable (F n)", "show \"(\\<lambda>w. (pf1(x := \\<lambda>n w. 0)) asset (Suc n) w) \\<in> borel_measurable (F n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (pf1(x := \\<lambda>n w. 0)) asset (Suc n) \\<in> borel_measurable (F n)", "proof (cases \"asset = x\")"], ["proof (state)\ngoal (2 subgoals):\n 1. asset = x \\<Longrightarrow>\n    (pf1(x := \\<lambda>n w. 0)) asset (Suc n) \\<in> borel_measurable (F n)\n 2. asset \\<noteq> x \\<Longrightarrow>\n    (pf1(x := \\<lambda>n w. 0)) asset (Suc n) \\<in> borel_measurable (F n)", "case True"], ["proof (state)\nthis:\n  asset = x\n\ngoal (2 subgoals):\n 1. asset = x \\<Longrightarrow>\n    (pf1(x := \\<lambda>n w. 0)) asset (Suc n) \\<in> borel_measurable (F n)\n 2. asset \\<noteq> x \\<Longrightarrow>\n    (pf1(x := \\<lambda>n w. 0)) asset (Suc n) \\<in> borel_measurable (F n)", "thus ?thesis"], ["proof (prove)\nusing this:\n  asset = x\n\ngoal (1 subgoal):\n 1. (pf1(x := \\<lambda>n w. 0)) asset (Suc n) \\<in> borel_measurable (F n)", "by simp"], ["proof (state)\nthis:\n  (pf1(x := \\<lambda>n w. 0)) asset (Suc n) \\<in> borel_measurable (F n)\n\ngoal (1 subgoal):\n 1. asset \\<noteq> x \\<Longrightarrow>\n    (pf1(x := \\<lambda>n w. 0)) asset (Suc n) \\<in> borel_measurable (F n)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. asset \\<noteq> x \\<Longrightarrow>\n    (pf1(x := \\<lambda>n w. 0)) asset (Suc n) \\<in> borel_measurable (F n)", "case False"], ["proof (state)\nthis:\n  asset \\<noteq> x\n\ngoal (1 subgoal):\n 1. asset \\<noteq> x \\<Longrightarrow>\n    (pf1(x := \\<lambda>n w. 0)) asset (Suc n) \\<in> borel_measurable (F n)", "thus \"(\\<lambda>w. (pf1(x := \\<lambda>n w. 0)) asset (Suc n) w) \\<in> borel_measurable (F n)\""], ["proof (prove)\nusing this:\n  asset \\<noteq> x\n\ngoal (1 subgoal):\n 1. (pf1(x := \\<lambda>n w. 0)) asset (Suc n) \\<in> borel_measurable (F n)", "using \\<open>\\<forall>asset\\<in>support_set pf1. borel_predict_stoch_proc F (pf1 asset)\\<close>\n          \\<open>asset \\<in> support_set pf1\\<close>"], ["proof (prove)\nusing this:\n  asset \\<noteq> x\n  \\<forall>asset\\<in>support_set pf1. borel_predict_stoch_proc F (pf1 asset)\n  asset \\<in> support_set pf1\n\ngoal (1 subgoal):\n 1. (pf1(x := \\<lambda>n w. 0)) asset (Suc n) \\<in> borel_measurable (F n)", "by (simp add: predict_stoch_proc_def)"], ["proof (state)\nthis:\n  (pf1(x := \\<lambda>n w. 0)) asset (Suc n) \\<in> borel_measurable (F n)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (pf1(x := \\<lambda>n w. 0)) asset (Suc n) \\<in> borel_measurable (F n)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>n.\n     (pf1(x := \\<lambda>n w. 0)) asset (Suc n) \\<in> borel_measurable (F n)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>asset\\<in>support_set pf1.\n     borel_predict_stoch_proc F (qty_rem_comp pf1 x asset)\n\ngoal (1 subgoal):\n 1. trading_strategy (qty_rem_comp pf1 x)", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>asset\\<in>support_set pf1.\n     borel_predict_stoch_proc F (qty_rem_comp pf1 x asset)\n\ngoal (1 subgoal):\n 1. trading_strategy (qty_rem_comp pf1 x)", "unfolding trading_strategy_def"], ["proof (prove)\nusing this:\n  \\<forall>asset\\<in>support_set pf1.\n     borel_predict_stoch_proc F (qty_rem_comp pf1 x asset)\n\ngoal (1 subgoal):\n 1. portfolio (qty_rem_comp pf1 x) \\<and>\n    (\\<forall>asset\\<in>support_set (qty_rem_comp pf1 x).\n        borel_predict_stoch_proc F (qty_rem_comp pf1 x asset))", "using remove_comp_support_set[of pf1 x]"], ["proof (prove)\nusing this:\n  \\<forall>asset\\<in>support_set pf1.\n     borel_predict_stoch_proc F (qty_rem_comp pf1 x asset)\n  support_set (qty_rem_comp pf1 x) \\<subseteq> support_set pf1 - {x}\n\ngoal (1 subgoal):\n 1. portfolio (qty_rem_comp pf1 x) \\<and>\n    (\\<forall>asset\\<in>support_set (qty_rem_comp pf1 x).\n        borel_predict_stoch_proc F (qty_rem_comp pf1 x asset))", "by (metis Diff_empty assms remove_comp_portfolio subsetCE subset_Diff_insert trading_strategy_def)"], ["proof (state)\nthis:\n  trading_strategy (qty_rem_comp pf1 x)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in disc_equity_market) replace_comp_trading_strat:\n  assumes \"trading_strategy pf1\"\n  and \"trading_strategy pf2\"\nshows \"trading_strategy (qty_replace_comp pf1 x pf2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. trading_strategy (qty_replace_comp pf1 x pf2)", "unfolding qty_replace_comp_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. trading_strategy\n     (qty_sum (qty_rem_comp pf1 x) (qty_mult_comp pf2 (pf1 x)))", "proof (rule sum_trading_strat)"], ["proof (state)\ngoal (2 subgoals):\n 1. trading_strategy (qty_rem_comp pf1 x)\n 2. trading_strategy (qty_mult_comp pf2 (pf1 x))", "show \"trading_strategy (qty_rem_comp pf1 x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. trading_strategy (qty_rem_comp pf1 x)", "using assms"], ["proof (prove)\nusing this:\n  trading_strategy pf1\n  trading_strategy pf2\n\ngoal (1 subgoal):\n 1. trading_strategy (qty_rem_comp pf1 x)", "by (simp add: remove_comp_trading_strat)"], ["proof (state)\nthis:\n  trading_strategy (qty_rem_comp pf1 x)\n\ngoal (1 subgoal):\n 1. trading_strategy (qty_mult_comp pf2 (pf1 x))", "show \"trading_strategy (qty_mult_comp pf2 (pf1 x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. trading_strategy (qty_mult_comp pf2 (pf1 x))", "proof (cases \"x\\<in> support_set pf1\")"], ["proof (state)\ngoal (2 subgoals):\n 1. x \\<in> support_set pf1 \\<Longrightarrow>\n    trading_strategy (qty_mult_comp pf2 (pf1 x))\n 2. x \\<notin> support_set pf1 \\<Longrightarrow>\n    trading_strategy (qty_mult_comp pf2 (pf1 x))", "case True"], ["proof (state)\nthis:\n  x \\<in> support_set pf1\n\ngoal (2 subgoals):\n 1. x \\<in> support_set pf1 \\<Longrightarrow>\n    trading_strategy (qty_mult_comp pf2 (pf1 x))\n 2. x \\<notin> support_set pf1 \\<Longrightarrow>\n    trading_strategy (qty_mult_comp pf2 (pf1 x))", "hence \"borel_predict_stoch_proc F (pf1 x)\""], ["proof (prove)\nusing this:\n  x \\<in> support_set pf1\n\ngoal (1 subgoal):\n 1. borel_predict_stoch_proc F (pf1 x)", "using assms"], ["proof (prove)\nusing this:\n  x \\<in> support_set pf1\n  trading_strategy pf1\n  trading_strategy pf2\n\ngoal (1 subgoal):\n 1. borel_predict_stoch_proc F (pf1 x)", "unfolding trading_strategy_def"], ["proof (prove)\nusing this:\n  x \\<in> support_set pf1\n  portfolio pf1 \\<and>\n  (\\<forall>asset\\<in>support_set pf1.\n      borel_predict_stoch_proc F (pf1 asset))\n  portfolio pf2 \\<and>\n  (\\<forall>asset\\<in>support_set pf2.\n      borel_predict_stoch_proc F (pf2 asset))\n\ngoal (1 subgoal):\n 1. borel_predict_stoch_proc F (pf1 x)", "by simp"], ["proof (state)\nthis:\n  borel_predict_stoch_proc F (pf1 x)\n\ngoal (2 subgoals):\n 1. x \\<in> support_set pf1 \\<Longrightarrow>\n    trading_strategy (qty_mult_comp pf2 (pf1 x))\n 2. x \\<notin> support_set pf1 \\<Longrightarrow>\n    trading_strategy (qty_mult_comp pf2 (pf1 x))", "thus ?thesis"], ["proof (prove)\nusing this:\n  borel_predict_stoch_proc F (pf1 x)\n\ngoal (1 subgoal):\n 1. trading_strategy (qty_mult_comp pf2 (pf1 x))", "using assms"], ["proof (prove)\nusing this:\n  borel_predict_stoch_proc F (pf1 x)\n  trading_strategy pf1\n  trading_strategy pf2\n\ngoal (1 subgoal):\n 1. trading_strategy (qty_mult_comp pf2 (pf1 x))", "by (simp add: mult_comp_trading_strat)"], ["proof (state)\nthis:\n  trading_strategy (qty_mult_comp pf2 (pf1 x))\n\ngoal (1 subgoal):\n 1. x \\<notin> support_set pf1 \\<Longrightarrow>\n    trading_strategy (qty_mult_comp pf2 (pf1 x))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<notin> support_set pf1 \\<Longrightarrow>\n    trading_strategy (qty_mult_comp pf2 (pf1 x))", "case False"], ["proof (state)\nthis:\n  x \\<notin> support_set pf1\n\ngoal (1 subgoal):\n 1. x \\<notin> support_set pf1 \\<Longrightarrow>\n    trading_strategy (qty_mult_comp pf2 (pf1 x))", "thus ?thesis"], ["proof (prove)\nusing this:\n  x \\<notin> support_set pf1\n\ngoal (1 subgoal):\n 1. trading_strategy (qty_mult_comp pf2 (pf1 x))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<notin> support_set pf1 \\<Longrightarrow>\n    trading_strategy (qty_mult_comp pf2 (pf1 x))", "obtain nn :: \"'c \\<Rightarrow> ('c \\<Rightarrow> nat \\<Rightarrow> 'a \\<Rightarrow> real) \\<Rightarrow> nat\" and aa :: \"'c \\<Rightarrow> ('c \\<Rightarrow> nat \\<Rightarrow> 'a \\<Rightarrow> real) \\<Rightarrow> 'a\" where\n        \"\\<forall>x0 x1. (\\<exists>v2 v3. x1 x0 v2 v3 \\<noteq> 0) = (x1 x0 (nn x0 x1) (aa x0 x1) \\<noteq> 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>nn aa.\n        \\<forall>x0 x1.\n           (\\<exists>v2 v3. x1 x0 v2 v3 \\<noteq> 0) =\n           (x1 x0 (nn x0 x1) (aa x0 x1) \\<noteq> 0) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by moura"], ["proof (state)\nthis:\n  \\<forall>x0 x1.\n     (\\<exists>v2 v3. x1 x0 v2 v3 \\<noteq> 0) =\n     (x1 x0 (nn x0 x1) (aa x0 x1) \\<noteq> 0)\n\ngoal (1 subgoal):\n 1. x \\<notin> support_set pf1 \\<Longrightarrow>\n    trading_strategy (qty_mult_comp pf2 (pf1 x))", "then"], ["proof (chain)\npicking this:\n  \\<forall>x0 x1.\n     (\\<exists>v2 v3. x1 x0 v2 v3 \\<noteq> 0) =\n     (x1 x0 (nn x0 x1) (aa x0 x1) \\<noteq> 0)", "have \"\\<forall>f c. (c \\<notin> {c. \\<exists>n a. f c n a \\<noteq> 0} \\<or> f c (nn c f) (aa c f) \\<noteq> 0) \\<and> (c \\<in> {c. \\<exists>n a. f c n a \\<noteq> 0} \\<or> (\\<forall>n a. f c n a = 0))\""], ["proof (prove)\nusing this:\n  \\<forall>x0 x1.\n     (\\<exists>v2 v3. x1 x0 v2 v3 \\<noteq> 0) =\n     (x1 x0 (nn x0 x1) (aa x0 x1) \\<noteq> 0)\n\ngoal (1 subgoal):\n 1. \\<forall>f c.\n       (c \\<notin> {c. \\<exists>n a. f c n a \\<noteq> 0} \\<or>\n        f c (nn c f) (aa c f) \\<noteq> 0) \\<and>\n       (c \\<in> {c. \\<exists>n a. f c n a \\<noteq> 0} \\<or>\n        (\\<forall>n a. f c n a = 0))", "by auto"], ["proof (state)\nthis:\n  \\<forall>f c.\n     (c \\<notin> {c. \\<exists>n a. f c n a \\<noteq> 0} \\<or>\n      f c (nn c f) (aa c f) \\<noteq> 0) \\<and>\n     (c \\<in> {c. \\<exists>n a. f c n a \\<noteq> 0} \\<or>\n      (\\<forall>n a. f c n a = 0))\n\ngoal (1 subgoal):\n 1. x \\<notin> support_set pf1 \\<Longrightarrow>\n    trading_strategy (qty_mult_comp pf2 (pf1 x))", "then"], ["proof (chain)\npicking this:\n  \\<forall>f c.\n     (c \\<notin> {c. \\<exists>n a. f c n a \\<noteq> 0} \\<or>\n      f c (nn c f) (aa c f) \\<noteq> 0) \\<and>\n     (c \\<in> {c. \\<exists>n a. f c n a \\<noteq> 0} \\<or>\n      (\\<forall>n a. f c n a = 0))", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>f c.\n     (c \\<notin> {c. \\<exists>n a. f c n a \\<noteq> 0} \\<or>\n      f c (nn c f) (aa c f) \\<noteq> 0) \\<and>\n     (c \\<in> {c. \\<exists>n a. f c n a \\<noteq> 0} \\<or>\n      (\\<forall>n a. f c n a = 0))\n\ngoal (1 subgoal):\n 1. trading_strategy (qty_mult_comp pf2 (pf1 x))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>f c.\n       (c \\<notin> {c. \\<exists>n a. f c n a \\<noteq> 0} \\<or>\n        f c (nn c f) (aa c f) \\<noteq> 0) \\<and>\n       (c \\<in> {c. \\<exists>n a. f c n a \\<noteq> 0} \\<or>\n        (\\<forall>n a. f c n a = 0)) \\<Longrightarrow>\n    trading_strategy (qty_mult_comp pf2 (pf1 x))", "have \"\\<And>f c n a. qty_mult_comp f (pf1 x) (c::'c) n a = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f c n a. qty_mult_comp f (pf1 x) c n a = 0", "by (metis False \\<open>\\<forall>f c. (c \\<notin> {c. \\<exists>n a. f c n a \\<noteq> 0} \\<or> f c (nn c f) (aa c f) \\<noteq> 0) \\<and> (c \\<in> {c. \\<exists>n a. f c n a \\<noteq> 0} \\<or> (\\<forall>n a. f c n a = 0))\\<close> mult.commute mult_zero_left qty_mult_comp_def support_set_def)"], ["proof (state)\nthis:\n  qty_mult_comp ?f13 (pf1 x) ?c13 ?n13 ?a13 = 0\n\ngoal (1 subgoal):\n 1. \\<forall>f c.\n       (c \\<notin> {c. \\<exists>n a. f c n a \\<noteq> 0} \\<or>\n        f c (nn c f) (aa c f) \\<noteq> 0) \\<and>\n       (c \\<in> {c. \\<exists>n a. f c n a \\<noteq> 0} \\<or>\n        (\\<forall>n a. f c n a = 0)) \\<Longrightarrow>\n    trading_strategy (qty_mult_comp pf2 (pf1 x))", "then"], ["proof (chain)\npicking this:\n  qty_mult_comp ?f13 (pf1 x) ?c13 ?n13 ?a13 = 0", "show ?thesis"], ["proof (prove)\nusing this:\n  qty_mult_comp ?f13 (pf1 x) ?c13 ?n13 ?a13 = 0\n\ngoal (1 subgoal):\n 1. trading_strategy (qty_mult_comp pf2 (pf1 x))", "by (metis (no_types) \\<open>\\<forall>f c. (c \\<notin> {c. \\<exists>n a. f c n a \\<noteq> 0} \\<or> f c (nn c f) (aa c f) \\<noteq> 0) \\<and> (c \\<in> {c. \\<exists>n a. f c n a \\<noteq> 0} \\<or> (\\<forall>n a. f c n a = 0))\\<close> assms(2) mult_comp_portfolio support_set_def trading_strategy_def)"], ["proof (state)\nthis:\n  trading_strategy (qty_mult_comp pf2 (pf1 x))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  trading_strategy (qty_mult_comp pf2 (pf1 x))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  trading_strategy (qty_mult_comp pf2 (pf1 x))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  trading_strategy (qty_mult_comp pf2 (pf1 x))\n\ngoal:\nNo subgoals!", "qed"], ["", "subsubsection \\<open>Self-financing portfolios\\<close>"], ["", "paragraph \\<open>Closing value process\\<close>"], ["", "fun up_cl_proc where\n  \"up_cl_proc Mkt p 0 = val_process Mkt p 0\" |\n  \"up_cl_proc Mkt p (Suc n) = (\\<lambda>w. \\<Sum>x\\<in>support_set p. prices Mkt x (Suc n) w * p x (Suc n) w)\""], ["", "definition cls_val_process where\n\"cls_val_process Mkt p = (if (\\<not> (portfolio p)) then (\\<lambda> n w. 0)\n    else (\\<lambda> n w . up_cl_proc Mkt p n w))\""], ["", "lemma (in disc_filtr_prob_space) quantity_updated_borel:\n  assumes \"\\<forall>n. \\<forall> asset \\<in> support_set p. p asset (Suc n) \\<in> borel_measurable (F n)\"\nand \"\\<forall>n. \\<forall>asset \\<in> support_set p. prices Mkt asset n \\<in> borel_measurable (F n)\"\nshows \"\\<forall>n. cls_val_process Mkt p n \\<in> borel_measurable (F n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n. cls_val_process Mkt p n \\<in> borel_measurable (F n)", "proof (cases \"portfolio p\")"], ["proof (state)\ngoal (2 subgoals):\n 1. portfolio p \\<Longrightarrow>\n    \\<forall>n. cls_val_process Mkt p n \\<in> borel_measurable (F n)\n 2. \\<not> portfolio p \\<Longrightarrow>\n    \\<forall>n. cls_val_process Mkt p n \\<in> borel_measurable (F n)", "case False"], ["proof (state)\nthis:\n  \\<not> portfolio p\n\ngoal (2 subgoals):\n 1. portfolio p \\<Longrightarrow>\n    \\<forall>n. cls_val_process Mkt p n \\<in> borel_measurable (F n)\n 2. \\<not> portfolio p \\<Longrightarrow>\n    \\<forall>n. cls_val_process Mkt p n \\<in> borel_measurable (F n)", "have \"cls_val_process Mkt p = (\\<lambda> n w. 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cls_val_process Mkt p = (\\<lambda>n w. 0)", "unfolding cls_val_process_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (if \\<not> portfolio p then \\<lambda>n w. 0 else up_cl_proc Mkt p) =\n    (\\<lambda>n w. 0)", "using False"], ["proof (prove)\nusing this:\n  \\<not> portfolio p\n\ngoal (1 subgoal):\n 1. (if \\<not> portfolio p then \\<lambda>n w. 0 else up_cl_proc Mkt p) =\n    (\\<lambda>n w. 0)", "by simp"], ["proof (state)\nthis:\n  cls_val_process Mkt p = (\\<lambda>n w. 0)\n\ngoal (2 subgoals):\n 1. portfolio p \\<Longrightarrow>\n    \\<forall>n. cls_val_process Mkt p n \\<in> borel_measurable (F n)\n 2. \\<not> portfolio p \\<Longrightarrow>\n    \\<forall>n. cls_val_process Mkt p n \\<in> borel_measurable (F n)", "thus \"?thesis\""], ["proof (prove)\nusing this:\n  cls_val_process Mkt p = (\\<lambda>n w. 0)\n\ngoal (1 subgoal):\n 1. \\<forall>n. cls_val_process Mkt p n \\<in> borel_measurable (F n)", "by simp"], ["proof (state)\nthis:\n  \\<forall>n. cls_val_process Mkt p n \\<in> borel_measurable (F n)\n\ngoal (1 subgoal):\n 1. portfolio p \\<Longrightarrow>\n    \\<forall>n. cls_val_process Mkt p n \\<in> borel_measurable (F n)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. portfolio p \\<Longrightarrow>\n    \\<forall>n. cls_val_process Mkt p n \\<in> borel_measurable (F n)", "case True"], ["proof (state)\nthis:\n  portfolio p\n\ngoal (1 subgoal):\n 1. portfolio p \\<Longrightarrow>\n    \\<forall>n. cls_val_process Mkt p n \\<in> borel_measurable (F n)", "show \"\\<forall>n. cls_val_process Mkt p n \\<in> borel_measurable (F n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n. cls_val_process Mkt p n \\<in> borel_measurable (F n)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n. cls_val_process Mkt p n \\<in> borel_measurable (F n)", "fix n"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n. cls_val_process Mkt p n \\<in> borel_measurable (F n)", "show \"cls_val_process Mkt p n \\<in> borel_measurable (F n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cls_val_process Mkt p n \\<in> borel_measurable (F n)", "proof (cases \"n = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    cls_val_process Mkt p n \\<in> borel_measurable (F n)\n 2. n \\<noteq> 0 \\<Longrightarrow>\n    cls_val_process Mkt p n \\<in> borel_measurable (F n)", "case False"], ["proof (state)\nthis:\n  n \\<noteq> 0\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    cls_val_process Mkt p n \\<in> borel_measurable (F n)\n 2. n \\<noteq> 0 \\<Longrightarrow>\n    cls_val_process Mkt p n \\<in> borel_measurable (F n)", "hence \"\\<exists>m. n = Suc m\""], ["proof (prove)\nusing this:\n  n \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<exists>m. n = Suc m", "using old.nat.exhaust"], ["proof (prove)\nusing this:\n  n \\<noteq> 0\n  \\<lbrakk>?y = 0 \\<Longrightarrow> ?P;\n   \\<And>nat. ?y = Suc nat \\<Longrightarrow> ?P\\<rbrakk>\n  \\<Longrightarrow> ?P\n\ngoal (1 subgoal):\n 1. \\<exists>m. n = Suc m", "by auto"], ["proof (state)\nthis:\n  \\<exists>m. n = Suc m\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    cls_val_process Mkt p n \\<in> borel_measurable (F n)\n 2. n \\<noteq> 0 \\<Longrightarrow>\n    cls_val_process Mkt p n \\<in> borel_measurable (F n)", "from this"], ["proof (chain)\npicking this:\n  \\<exists>m. n = Suc m", "obtain m where \"n = Suc m\""], ["proof (prove)\nusing this:\n  \\<exists>m. n = Suc m\n\ngoal (1 subgoal):\n 1. (\\<And>m. n = Suc m \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by auto"], ["proof (state)\nthis:\n  n = Suc m\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    cls_val_process Mkt p n \\<in> borel_measurable (F n)\n 2. n \\<noteq> 0 \\<Longrightarrow>\n    cls_val_process Mkt p n \\<in> borel_measurable (F n)", "have \"cls_val_process Mkt p (Suc m) = (\\<lambda>w. \\<Sum>x\\<in>support_set p. prices Mkt x (Suc m) w * p x (Suc m) w)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cls_val_process Mkt p (Suc m) =\n    (\\<lambda>w.\n        \\<Sum>x\\<in>support_set p. prices Mkt x (Suc m) w * p x (Suc m) w)", "unfolding cls_val_process_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (if \\<not> portfolio p then \\<lambda>n w. 0 else up_cl_proc Mkt p)\n     (Suc m) =\n    (\\<lambda>w.\n        \\<Sum>x\\<in>support_set p. prices Mkt x (Suc m) w * p x (Suc m) w)", "using True"], ["proof (prove)\nusing this:\n  portfolio p\n\ngoal (1 subgoal):\n 1. (if \\<not> portfolio p then \\<lambda>n w. 0 else up_cl_proc Mkt p)\n     (Suc m) =\n    (\\<lambda>w.\n        \\<Sum>x\\<in>support_set p. prices Mkt x (Suc m) w * p x (Suc m) w)", "by simp"], ["proof (state)\nthis:\n  cls_val_process Mkt p (Suc m) =\n  (\\<lambda>w.\n      \\<Sum>x\\<in>support_set p. prices Mkt x (Suc m) w * p x (Suc m) w)\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    cls_val_process Mkt p n \\<in> borel_measurable (F n)\n 2. n \\<noteq> 0 \\<Longrightarrow>\n    cls_val_process Mkt p n \\<in> borel_measurable (F n)", "moreover"], ["proof (state)\nthis:\n  cls_val_process Mkt p (Suc m) =\n  (\\<lambda>w.\n      \\<Sum>x\\<in>support_set p. prices Mkt x (Suc m) w * p x (Suc m) w)\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    cls_val_process Mkt p n \\<in> borel_measurable (F n)\n 2. n \\<noteq> 0 \\<Longrightarrow>\n    cls_val_process Mkt p n \\<in> borel_measurable (F n)", "have \"(\\<lambda>w. \\<Sum>x\\<in>support_set p. prices Mkt x (Suc m) w * p x (Suc m) w) \\<in> borel_measurable (F (Suc m))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>w.\n        \\<Sum>x\\<in>support_set p. prices Mkt x (Suc m) w * p x (Suc m) w)\n    \\<in> borel_measurable (F (Suc m))", "proof (rule borel_measurable_sum)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> support_set p \\<Longrightarrow>\n       (\\<lambda>xa. prices Mkt x (Suc m) xa * p x (Suc m) xa)\n       \\<in> borel_measurable (F (Suc m))", "fix asset"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> support_set p \\<Longrightarrow>\n       (\\<lambda>xa. prices Mkt x (Suc m) xa * p x (Suc m) xa)\n       \\<in> borel_measurable (F (Suc m))", "assume \"asset\\<in> support_set p\""], ["proof (state)\nthis:\n  asset \\<in> support_set p\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> support_set p \\<Longrightarrow>\n       (\\<lambda>xa. prices Mkt x (Suc m) xa * p x (Suc m) xa)\n       \\<in> borel_measurable (F (Suc m))", "hence \"p asset (Suc m) \\<in> borel_measurable (F m)\""], ["proof (prove)\nusing this:\n  asset \\<in> support_set p\n\ngoal (1 subgoal):\n 1. p asset (Suc m) \\<in> borel_measurable (F m)", "using assms"], ["proof (prove)\nusing this:\n  asset \\<in> support_set p\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set p.\n        p asset (Suc n) \\<in> borel_measurable (F n)\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set p.\n        prices Mkt asset n \\<in> borel_measurable (F n)\n\ngoal (1 subgoal):\n 1. p asset (Suc m) \\<in> borel_measurable (F m)", "unfolding trading_strategy_def adapt_stoch_proc_def"], ["proof (prove)\nusing this:\n  asset \\<in> support_set p\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set p.\n        p asset (Suc n) \\<in> borel_measurable (F n)\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set p.\n        prices Mkt asset n \\<in> borel_measurable (F n)\n\ngoal (1 subgoal):\n 1. p asset (Suc m) \\<in> borel_measurable (F m)", "by simp"], ["proof (state)\nthis:\n  p asset (Suc m) \\<in> borel_measurable (F m)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> support_set p \\<Longrightarrow>\n       (\\<lambda>xa. prices Mkt x (Suc m) xa * p x (Suc m) xa)\n       \\<in> borel_measurable (F (Suc m))", "hence \"p asset (Suc m) \\<in> borel_measurable (F (Suc m))\""], ["proof (prove)\nusing this:\n  p asset (Suc m) \\<in> borel_measurable (F m)\n\ngoal (1 subgoal):\n 1. p asset (Suc m) \\<in> borel_measurable (F (Suc m))", "using Suc_n_not_le_n increasing_measurable_info nat_le_linear"], ["proof (prove)\nusing this:\n  p asset (Suc m) \\<in> borel_measurable (F m)\n  \\<not> Suc ?n \\<le> ?n\n  \\<lbrakk>?f \\<in> F ?s \\<rightarrow>\\<^sub>M ?N; ?s \\<le> ?t\\<rbrakk>\n  \\<Longrightarrow> ?f \\<in> F ?t \\<rightarrow>\\<^sub>M ?N\n  ?m \\<le> ?n \\<or> ?n \\<le> ?m\n\ngoal (1 subgoal):\n 1. p asset (Suc m) \\<in> borel_measurable (F (Suc m))", "by blast"], ["proof (state)\nthis:\n  p asset (Suc m) \\<in> borel_measurable (F (Suc m))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> support_set p \\<Longrightarrow>\n       (\\<lambda>xa. prices Mkt x (Suc m) xa * p x (Suc m) xa)\n       \\<in> borel_measurable (F (Suc m))", "moreover"], ["proof (state)\nthis:\n  p asset (Suc m) \\<in> borel_measurable (F (Suc m))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> support_set p \\<Longrightarrow>\n       (\\<lambda>xa. prices Mkt x (Suc m) xa * p x (Suc m) xa)\n       \\<in> borel_measurable (F (Suc m))", "have \"prices Mkt asset (Suc m) \\<in> borel_measurable (F (Suc m))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prices Mkt asset (Suc m) \\<in> borel_measurable (F (Suc m))", "using \\<open>asset \\<in> support_set p\\<close>  assms(2)"], ["proof (prove)\nusing this:\n  asset \\<in> support_set p\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set p.\n        prices Mkt asset n \\<in> borel_measurable (F n)\n\ngoal (1 subgoal):\n 1. prices Mkt asset (Suc m) \\<in> borel_measurable (F (Suc m))", "unfolding support_adapt_def adapt_stoch_proc_def"], ["proof (prove)\nusing this:\n  asset \\<in> support_set p\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set p.\n        prices Mkt asset n \\<in> borel_measurable (F n)\n\ngoal (1 subgoal):\n 1. prices Mkt asset (Suc m) \\<in> borel_measurable (F (Suc m))", "by blast"], ["proof (state)\nthis:\n  prices Mkt asset (Suc m) \\<in> borel_measurable (F (Suc m))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> support_set p \\<Longrightarrow>\n       (\\<lambda>xa. prices Mkt x (Suc m) xa * p x (Suc m) xa)\n       \\<in> borel_measurable (F (Suc m))", "ultimately"], ["proof (chain)\npicking this:\n  p asset (Suc m) \\<in> borel_measurable (F (Suc m))\n  prices Mkt asset (Suc m) \\<in> borel_measurable (F (Suc m))", "show \"(\\<lambda>x. prices Mkt asset (Suc m) x * p asset (Suc m) x) \\<in> borel_measurable (F (Suc m))\""], ["proof (prove)\nusing this:\n  p asset (Suc m) \\<in> borel_measurable (F (Suc m))\n  prices Mkt asset (Suc m) \\<in> borel_measurable (F (Suc m))\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. prices Mkt asset (Suc m) x * p asset (Suc m) x)\n    \\<in> borel_measurable (F (Suc m))", "by simp"], ["proof (state)\nthis:\n  (\\<lambda>x. prices Mkt asset (Suc m) x * p asset (Suc m) x)\n  \\<in> borel_measurable (F (Suc m))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<lambda>w.\n      \\<Sum>x\\<in>support_set p. prices Mkt x (Suc m) w * p x (Suc m) w)\n  \\<in> borel_measurable (F (Suc m))\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    cls_val_process Mkt p n \\<in> borel_measurable (F n)\n 2. n \\<noteq> 0 \\<Longrightarrow>\n    cls_val_process Mkt p n \\<in> borel_measurable (F n)", "ultimately"], ["proof (chain)\npicking this:\n  cls_val_process Mkt p (Suc m) =\n  (\\<lambda>w.\n      \\<Sum>x\\<in>support_set p. prices Mkt x (Suc m) w * p x (Suc m) w)\n  (\\<lambda>w.\n      \\<Sum>x\\<in>support_set p. prices Mkt x (Suc m) w * p x (Suc m) w)\n  \\<in> borel_measurable (F (Suc m))", "have \"cls_val_process Mkt p (Suc m) \\<in> borel_measurable (F (Suc m))\""], ["proof (prove)\nusing this:\n  cls_val_process Mkt p (Suc m) =\n  (\\<lambda>w.\n      \\<Sum>x\\<in>support_set p. prices Mkt x (Suc m) w * p x (Suc m) w)\n  (\\<lambda>w.\n      \\<Sum>x\\<in>support_set p. prices Mkt x (Suc m) w * p x (Suc m) w)\n  \\<in> borel_measurable (F (Suc m))\n\ngoal (1 subgoal):\n 1. cls_val_process Mkt p (Suc m) \\<in> borel_measurable (F (Suc m))", "by simp"], ["proof (state)\nthis:\n  cls_val_process Mkt p (Suc m) \\<in> borel_measurable (F (Suc m))\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    cls_val_process Mkt p n \\<in> borel_measurable (F n)\n 2. n \\<noteq> 0 \\<Longrightarrow>\n    cls_val_process Mkt p n \\<in> borel_measurable (F n)", "thus ?thesis"], ["proof (prove)\nusing this:\n  cls_val_process Mkt p (Suc m) \\<in> borel_measurable (F (Suc m))\n\ngoal (1 subgoal):\n 1. cls_val_process Mkt p n \\<in> borel_measurable (F n)", "using \\<open>n = Suc m\\<close>"], ["proof (prove)\nusing this:\n  cls_val_process Mkt p (Suc m) \\<in> borel_measurable (F (Suc m))\n  n = Suc m\n\ngoal (1 subgoal):\n 1. cls_val_process Mkt p n \\<in> borel_measurable (F n)", "by simp"], ["proof (state)\nthis:\n  cls_val_process Mkt p n \\<in> borel_measurable (F n)\n\ngoal (1 subgoal):\n 1. n = 0 \\<Longrightarrow>\n    cls_val_process Mkt p n \\<in> borel_measurable (F n)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. n = 0 \\<Longrightarrow>\n    cls_val_process Mkt p n \\<in> borel_measurable (F n)", "case True"], ["proof (state)\nthis:\n  n = 0\n\ngoal (1 subgoal):\n 1. n = 0 \\<Longrightarrow>\n    cls_val_process Mkt p n \\<in> borel_measurable (F n)", "thus \"cls_val_process Mkt p n \\<in> borel_measurable (F n)\""], ["proof (prove)\nusing this:\n  n = 0\n\ngoal (1 subgoal):\n 1. cls_val_process Mkt p n \\<in> borel_measurable (F n)", "by (metis (no_types, lifting) assms(1) assms(2)  quantity_adapted up_cl_proc.simps(1)\n            cls_val_process_def val_process_def)"], ["proof (state)\nthis:\n  cls_val_process Mkt p n \\<in> borel_measurable (F n)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  cls_val_process Mkt p n \\<in> borel_measurable (F n)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>n. cls_val_process Mkt p n \\<in> borel_measurable (F n)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in disc_equity_market) cls_val_process_adapted:\n  assumes \"trading_strategy p\"\nand \"support_adapt Mkt p\"\n  shows \"borel_adapt_stoch_proc F (cls_val_process Mkt p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. borel_adapt_stoch_proc F (cls_val_process Mkt p)", "proof (cases \"portfolio p\")"], ["proof (state)\ngoal (2 subgoals):\n 1. portfolio p \\<Longrightarrow>\n    borel_adapt_stoch_proc F (cls_val_process Mkt p)\n 2. \\<not> portfolio p \\<Longrightarrow>\n    borel_adapt_stoch_proc F (cls_val_process Mkt p)", "case False"], ["proof (state)\nthis:\n  \\<not> portfolio p\n\ngoal (2 subgoals):\n 1. portfolio p \\<Longrightarrow>\n    borel_adapt_stoch_proc F (cls_val_process Mkt p)\n 2. \\<not> portfolio p \\<Longrightarrow>\n    borel_adapt_stoch_proc F (cls_val_process Mkt p)", "have \"cls_val_process Mkt p = (\\<lambda> n w. 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cls_val_process Mkt p = (\\<lambda>n w. 0)", "unfolding cls_val_process_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (if \\<not> portfolio p then \\<lambda>n w. 0 else up_cl_proc Mkt p) =\n    (\\<lambda>n w. 0)", "using False"], ["proof (prove)\nusing this:\n  \\<not> portfolio p\n\ngoal (1 subgoal):\n 1. (if \\<not> portfolio p then \\<lambda>n w. 0 else up_cl_proc Mkt p) =\n    (\\<lambda>n w. 0)", "by simp"], ["proof (state)\nthis:\n  cls_val_process Mkt p = (\\<lambda>n w. 0)\n\ngoal (2 subgoals):\n 1. portfolio p \\<Longrightarrow>\n    borel_adapt_stoch_proc F (cls_val_process Mkt p)\n 2. \\<not> portfolio p \\<Longrightarrow>\n    borel_adapt_stoch_proc F (cls_val_process Mkt p)", "thus \"borel_adapt_stoch_proc F (cls_val_process Mkt p)\""], ["proof (prove)\nusing this:\n  cls_val_process Mkt p = (\\<lambda>n w. 0)\n\ngoal (1 subgoal):\n 1. borel_adapt_stoch_proc F (cls_val_process Mkt p)", "by (simp add: constant_process_borel_adapted)"], ["proof (state)\nthis:\n  borel_adapt_stoch_proc F (cls_val_process Mkt p)\n\ngoal (1 subgoal):\n 1. portfolio p \\<Longrightarrow>\n    borel_adapt_stoch_proc F (cls_val_process Mkt p)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. portfolio p \\<Longrightarrow>\n    borel_adapt_stoch_proc F (cls_val_process Mkt p)", "case True"], ["proof (state)\nthis:\n  portfolio p\n\ngoal (1 subgoal):\n 1. portfolio p \\<Longrightarrow>\n    borel_adapt_stoch_proc F (cls_val_process Mkt p)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. borel_adapt_stoch_proc F (cls_val_process Mkt p)", "unfolding adapt_stoch_proc_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>t. cls_val_process Mkt p t \\<in> borel_measurable (F t)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>t. cls_val_process Mkt p t \\<in> borel_measurable (F t)", "fix n"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>t. cls_val_process Mkt p t \\<in> borel_measurable (F t)", "show \"cls_val_process Mkt p n \\<in> borel_measurable (F n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cls_val_process Mkt p n \\<in> borel_measurable (F n)", "proof (cases \"n = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    cls_val_process Mkt p n \\<in> borel_measurable (F n)\n 2. n \\<noteq> 0 \\<Longrightarrow>\n    cls_val_process Mkt p n \\<in> borel_measurable (F n)", "case True"], ["proof (state)\nthis:\n  n = 0\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    cls_val_process Mkt p n \\<in> borel_measurable (F n)\n 2. n \\<noteq> 0 \\<Longrightarrow>\n    cls_val_process Mkt p n \\<in> borel_measurable (F n)", "thus \"cls_val_process Mkt p n \\<in> borel_measurable (F n)\""], ["proof (prove)\nusing this:\n  n = 0\n\ngoal (1 subgoal):\n 1. cls_val_process Mkt p n \\<in> borel_measurable (F n)", "using up_cl_proc.simps(1) assms"], ["proof (prove)\nusing this:\n  n = 0\n  up_cl_proc ?Mkt ?p 0 = val_process ?Mkt ?p 0\n  trading_strategy p\n  support_adapt Mkt p\n\ngoal (1 subgoal):\n 1. cls_val_process Mkt p n \\<in> borel_measurable (F n)", "by (metis (no_types, lifting) adapt_stoch_proc_def ats_val_process_adapted cls_val_process_def\n            val_process_def)"], ["proof (state)\nthis:\n  cls_val_process Mkt p n \\<in> borel_measurable (F n)\n\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow>\n    cls_val_process Mkt p n \\<in> borel_measurable (F n)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow>\n    cls_val_process Mkt p n \\<in> borel_measurable (F n)", "case False"], ["proof (state)\nthis:\n  n \\<noteq> 0\n\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow>\n    cls_val_process Mkt p n \\<in> borel_measurable (F n)", "hence \"\\<exists>m. Suc m = n\""], ["proof (prove)\nusing this:\n  n \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<exists>m. Suc m = n", "using not0_implies_Suc"], ["proof (prove)\nusing this:\n  n \\<noteq> 0\n  ?n \\<noteq> 0 \\<Longrightarrow> \\<exists>m. ?n = Suc m\n\ngoal (1 subgoal):\n 1. \\<exists>m. Suc m = n", "by blast"], ["proof (state)\nthis:\n  \\<exists>m. Suc m = n\n\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow>\n    cls_val_process Mkt p n \\<in> borel_measurable (F n)", "from this"], ["proof (chain)\npicking this:\n  \\<exists>m. Suc m = n", "obtain m where \"Suc m = n\""], ["proof (prove)\nusing this:\n  \\<exists>m. Suc m = n\n\ngoal (1 subgoal):\n 1. (\\<And>m. Suc m = n \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by auto"], ["proof (state)\nthis:\n  Suc m = n\n\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow>\n    cls_val_process Mkt p n \\<in> borel_measurable (F n)", "hence \"cls_val_process Mkt p n = up_cl_proc Mkt p n\""], ["proof (prove)\nusing this:\n  Suc m = n\n\ngoal (1 subgoal):\n 1. cls_val_process Mkt p n = up_cl_proc Mkt p n", "unfolding cls_val_process_def"], ["proof (prove)\nusing this:\n  Suc m = n\n\ngoal (1 subgoal):\n 1. (if \\<not> portfolio p then \\<lambda>n w. 0 else up_cl_proc Mkt p) n =\n    up_cl_proc Mkt p n", "using True"], ["proof (prove)\nusing this:\n  Suc m = n\n  portfolio p\n\ngoal (1 subgoal):\n 1. (if \\<not> portfolio p then \\<lambda>n w. 0 else up_cl_proc Mkt p) n =\n    up_cl_proc Mkt p n", "by simp"], ["proof (state)\nthis:\n  cls_val_process Mkt p n = up_cl_proc Mkt p n\n\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow>\n    cls_val_process Mkt p n \\<in> borel_measurable (F n)", "also"], ["proof (state)\nthis:\n  cls_val_process Mkt p n = up_cl_proc Mkt p n\n\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow>\n    cls_val_process Mkt p n \\<in> borel_measurable (F n)", "have \"... = (\\<lambda>w. \\<Sum>x\\<in>support_set p. prices Mkt x n w * p x n w)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. up_cl_proc Mkt p n =\n    (\\<lambda>w. \\<Sum>x\\<in>support_set p. prices Mkt x n w * p x n w)", "using up_cl_proc.simps(2) \\<open>Suc m = n\\<close>"], ["proof (prove)\nusing this:\n  up_cl_proc ?Mkt ?p (Suc ?n) =\n  (\\<lambda>w.\n      \\<Sum>x\\<in>support_set ?p.\n        prices ?Mkt x (Suc ?n) w * ?p x (Suc ?n) w)\n  Suc m = n\n\ngoal (1 subgoal):\n 1. up_cl_proc Mkt p n =\n    (\\<lambda>w. \\<Sum>x\\<in>support_set p. prices Mkt x n w * p x n w)", "by auto"], ["proof (state)\nthis:\n  up_cl_proc Mkt p n =\n  (\\<lambda>w. \\<Sum>x\\<in>support_set p. prices Mkt x n w * p x n w)\n\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow>\n    cls_val_process Mkt p n \\<in> borel_measurable (F n)", "finally"], ["proof (chain)\npicking this:\n  cls_val_process Mkt p n =\n  (\\<lambda>w. \\<Sum>x\\<in>support_set p. prices Mkt x n w * p x n w)", "have \"cls_val_process Mkt p n = (\\<lambda>w. \\<Sum>x\\<in>support_set p. prices Mkt x n w * p x n w)\""], ["proof (prove)\nusing this:\n  cls_val_process Mkt p n =\n  (\\<lambda>w. \\<Sum>x\\<in>support_set p. prices Mkt x n w * p x n w)\n\ngoal (1 subgoal):\n 1. cls_val_process Mkt p n =\n    (\\<lambda>w. \\<Sum>x\\<in>support_set p. prices Mkt x n w * p x n w)", "."], ["proof (state)\nthis:\n  cls_val_process Mkt p n =\n  (\\<lambda>w. \\<Sum>x\\<in>support_set p. prices Mkt x n w * p x n w)\n\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow>\n    cls_val_process Mkt p n \\<in> borel_measurable (F n)", "moreover"], ["proof (state)\nthis:\n  cls_val_process Mkt p n =\n  (\\<lambda>w. \\<Sum>x\\<in>support_set p. prices Mkt x n w * p x n w)\n\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow>\n    cls_val_process Mkt p n \\<in> borel_measurable (F n)", "have \"(\\<lambda>w. \\<Sum>x\\<in>support_set p. prices Mkt x n w * p x n w) \\<in> borel_measurable (F n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>w. \\<Sum>x\\<in>support_set p. prices Mkt x n w * p x n w)\n    \\<in> borel_measurable (F n)", "proof (rule borel_measurable_sum)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> support_set p \\<Longrightarrow>\n       (\\<lambda>xa. prices Mkt x n xa * p x n xa)\n       \\<in> borel_measurable (F n)", "fix asset"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> support_set p \\<Longrightarrow>\n       (\\<lambda>xa. prices Mkt x n xa * p x n xa)\n       \\<in> borel_measurable (F n)", "assume \"asset\\<in> support_set p\""], ["proof (state)\nthis:\n  asset \\<in> support_set p\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> support_set p \\<Longrightarrow>\n       (\\<lambda>xa. prices Mkt x n xa * p x n xa)\n       \\<in> borel_measurable (F n)", "hence \"p asset n \\<in> borel_measurable (F n)\""], ["proof (prove)\nusing this:\n  asset \\<in> support_set p\n\ngoal (1 subgoal):\n 1. p asset n \\<in> borel_measurable (F n)", "using assms"], ["proof (prove)\nusing this:\n  asset \\<in> support_set p\n  trading_strategy p\n  support_adapt Mkt p\n\ngoal (1 subgoal):\n 1. p asset n \\<in> borel_measurable (F n)", "unfolding trading_strategy_def predict_stoch_proc_def"], ["proof (prove)\nusing this:\n  asset \\<in> support_set p\n  portfolio p \\<and>\n  (\\<forall>asset\\<in>support_set p.\n      p asset 0 \\<in> borel_measurable (F 0) \\<and>\n      (\\<forall>n. p asset (Suc n) \\<in> borel_measurable (F n)))\n  support_adapt Mkt p\n\ngoal (1 subgoal):\n 1. p asset n \\<in> borel_measurable (F n)", "using Suc_n_not_le_n \\<open>Suc m = n\\<close> increasing_measurable_info nat_le_linear"], ["proof (prove)\nusing this:\n  asset \\<in> support_set p\n  portfolio p \\<and>\n  (\\<forall>asset\\<in>support_set p.\n      p asset 0 \\<in> borel_measurable (F 0) \\<and>\n      (\\<forall>n. p asset (Suc n) \\<in> borel_measurable (F n)))\n  support_adapt Mkt p\n  \\<not> Suc ?n \\<le> ?n\n  Suc m = n\n  \\<lbrakk>?f \\<in> F ?s \\<rightarrow>\\<^sub>M ?N; ?s \\<le> ?t\\<rbrakk>\n  \\<Longrightarrow> ?f \\<in> F ?t \\<rightarrow>\\<^sub>M ?N\n  ?m \\<le> ?n \\<or> ?n \\<le> ?m\n\ngoal (1 subgoal):\n 1. p asset n \\<in> borel_measurable (F n)", "by blast"], ["proof (state)\nthis:\n  p asset n \\<in> borel_measurable (F n)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> support_set p \\<Longrightarrow>\n       (\\<lambda>xa. prices Mkt x n xa * p x n xa)\n       \\<in> borel_measurable (F n)", "moreover"], ["proof (state)\nthis:\n  p asset n \\<in> borel_measurable (F n)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> support_set p \\<Longrightarrow>\n       (\\<lambda>xa. prices Mkt x n xa * p x n xa)\n       \\<in> borel_measurable (F n)", "have \"prices Mkt asset n \\<in> borel_measurable (F n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prices Mkt asset n \\<in> borel_measurable (F n)", "using  assms \\<open>asset \\<in> support_set p\\<close>"], ["proof (prove)\nusing this:\n  trading_strategy p\n  support_adapt Mkt p\n  asset \\<in> support_set p\n\ngoal (1 subgoal):\n 1. prices Mkt asset n \\<in> borel_measurable (F n)", "unfolding support_adapt_def adapt_stoch_proc_def"], ["proof (prove)\nusing this:\n  trading_strategy p\n  \\<forall>asset\\<in>support_set p.\n     \\<forall>t. prices Mkt asset t \\<in> borel_measurable (F t)\n  asset \\<in> support_set p\n\ngoal (1 subgoal):\n 1. prices Mkt asset n \\<in> borel_measurable (F n)", "using stock_portfolio_def"], ["proof (prove)\nusing this:\n  trading_strategy p\n  \\<forall>asset\\<in>support_set p.\n     \\<forall>t. prices Mkt asset t \\<in> borel_measurable (F t)\n  asset \\<in> support_set p\n  stock_portfolio ?Mkt ?p =\n  (portfolio ?p \\<and> support_set ?p \\<subseteq> stocks ?Mkt)\n\ngoal (1 subgoal):\n 1. prices Mkt asset n \\<in> borel_measurable (F n)", "by blast"], ["proof (state)\nthis:\n  prices Mkt asset n \\<in> borel_measurable (F n)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> support_set p \\<Longrightarrow>\n       (\\<lambda>xa. prices Mkt x n xa * p x n xa)\n       \\<in> borel_measurable (F n)", "ultimately"], ["proof (chain)\npicking this:\n  p asset n \\<in> borel_measurable (F n)\n  prices Mkt asset n \\<in> borel_measurable (F n)", "show \"(\\<lambda>x. prices Mkt asset n x * p asset n x) \\<in> borel_measurable (F n)\""], ["proof (prove)\nusing this:\n  p asset n \\<in> borel_measurable (F n)\n  prices Mkt asset n \\<in> borel_measurable (F n)\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. prices Mkt asset n x * p asset n x)\n    \\<in> borel_measurable (F n)", "by simp"], ["proof (state)\nthis:\n  (\\<lambda>x. prices Mkt asset n x * p asset n x)\n  \\<in> borel_measurable (F n)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<lambda>w. \\<Sum>x\\<in>support_set p. prices Mkt x n w * p x n w)\n  \\<in> borel_measurable (F n)\n\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow>\n    cls_val_process Mkt p n \\<in> borel_measurable (F n)", "ultimately"], ["proof (chain)\npicking this:\n  cls_val_process Mkt p n =\n  (\\<lambda>w. \\<Sum>x\\<in>support_set p. prices Mkt x n w * p x n w)\n  (\\<lambda>w. \\<Sum>x\\<in>support_set p. prices Mkt x n w * p x n w)\n  \\<in> borel_measurable (F n)", "show \"cls_val_process Mkt p n \\<in> borel_measurable (F n)\""], ["proof (prove)\nusing this:\n  cls_val_process Mkt p n =\n  (\\<lambda>w. \\<Sum>x\\<in>support_set p. prices Mkt x n w * p x n w)\n  (\\<lambda>w. \\<Sum>x\\<in>support_set p. prices Mkt x n w * p x n w)\n  \\<in> borel_measurable (F n)\n\ngoal (1 subgoal):\n 1. cls_val_process Mkt p n \\<in> borel_measurable (F n)", "by simp"], ["proof (state)\nthis:\n  cls_val_process Mkt p n \\<in> borel_measurable (F n)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  cls_val_process Mkt p n \\<in> borel_measurable (F n)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  borel_adapt_stoch_proc F (cls_val_process Mkt p)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma subset_cls_val_process:\n  assumes \"finite A\"\n  and \"support_set p \\<subseteq> A\"\nshows \"\\<forall>n w. cls_val_process Mkt p (Suc n) w = (sum (\\<lambda>x. ((prices Mkt) x (Suc n) w) * (p x (Suc n) w)) A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n w.\n       cls_val_process Mkt p (Suc n) w =\n       (\\<Sum>x\\<in>A. prices Mkt x (Suc n) w * p x (Suc n) w)", "proof (intro allI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n w.\n       cls_val_process Mkt p (Suc n) w =\n       (\\<Sum>x\\<in>A. prices Mkt x (Suc n) w * p x (Suc n) w)", "fix n::nat"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n w.\n       cls_val_process Mkt p (Suc n) w =\n       (\\<Sum>x\\<in>A. prices Mkt x (Suc n) w * p x (Suc n) w)", "fix w::'b"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n w.\n       cls_val_process Mkt p (Suc n) w =\n       (\\<Sum>x\\<in>A. prices Mkt x (Suc n) w * p x (Suc n) w)", "have \"portfolio p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. portfolio p", "using assms"], ["proof (prove)\nusing this:\n  finite A\n  support_set p \\<subseteq> A\n\ngoal (1 subgoal):\n 1. portfolio p", "unfolding portfolio_def"], ["proof (prove)\nusing this:\n  finite A\n  support_set p \\<subseteq> A\n\ngoal (1 subgoal):\n 1. finite (support_set p)", "using finite_subset"], ["proof (prove)\nusing this:\n  finite A\n  support_set p \\<subseteq> A\n  \\<lbrakk>?A \\<subseteq> ?B; finite ?B\\<rbrakk> \\<Longrightarrow> finite ?A\n\ngoal (1 subgoal):\n 1. finite (support_set p)", "by auto"], ["proof (state)\nthis:\n  portfolio p\n\ngoal (1 subgoal):\n 1. \\<And>n w.\n       cls_val_process Mkt p (Suc n) w =\n       (\\<Sum>x\\<in>A. prices Mkt x (Suc n) w * p x (Suc n) w)", "have \"\\<exists>C. (support_set p) \\<inter> C = {} \\<and> (support_set p) \\<union> C = A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>C.\n       support_set p \\<inter> C = {} \\<and> support_set p \\<union> C = A", "using assms(2)"], ["proof (prove)\nusing this:\n  support_set p \\<subseteq> A\n\ngoal (1 subgoal):\n 1. \\<exists>C.\n       support_set p \\<inter> C = {} \\<and> support_set p \\<union> C = A", "by auto"], ["proof (state)\nthis:\n  \\<exists>C.\n     support_set p \\<inter> C = {} \\<and> support_set p \\<union> C = A\n\ngoal (1 subgoal):\n 1. \\<And>n w.\n       cls_val_process Mkt p (Suc n) w =\n       (\\<Sum>x\\<in>A. prices Mkt x (Suc n) w * p x (Suc n) w)", "from this"], ["proof (chain)\npicking this:\n  \\<exists>C.\n     support_set p \\<inter> C = {} \\<and> support_set p \\<union> C = A", "obtain C where \"(support_set p) \\<inter> C = {}\" and \"(support_set p) \\<union> C = A\""], ["proof (prove)\nusing this:\n  \\<exists>C.\n     support_set p \\<inter> C = {} \\<and> support_set p \\<union> C = A\n\ngoal (1 subgoal):\n 1. (\\<And>C.\n        \\<lbrakk>support_set p \\<inter> C = {};\n         support_set p \\<union> C = A\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  support_set p \\<inter> C = {}\n  support_set p \\<union> C = A\n\ngoal (1 subgoal):\n 1. \\<And>n w.\n       cls_val_process Mkt p (Suc n) w =\n       (\\<Sum>x\\<in>A. prices Mkt x (Suc n) w * p x (Suc n) w)", "note Cprops = this"], ["proof (state)\nthis:\n  support_set p \\<inter> C = {}\n  support_set p \\<union> C = A\n\ngoal (1 subgoal):\n 1. \\<And>n w.\n       cls_val_process Mkt p (Suc n) w =\n       (\\<Sum>x\\<in>A. prices Mkt x (Suc n) w * p x (Suc n) w)", "have \"finite C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite C", "using assms \\<open>(support_set p) \\<union> C = A\\<close>"], ["proof (prove)\nusing this:\n  finite A\n  support_set p \\<subseteq> A\n  support_set p \\<union> C = A\n\ngoal (1 subgoal):\n 1. finite C", "by auto"], ["proof (state)\nthis:\n  finite C\n\ngoal (1 subgoal):\n 1. \\<And>n w.\n       cls_val_process Mkt p (Suc n) w =\n       (\\<Sum>x\\<in>A. prices Mkt x (Suc n) w * p x (Suc n) w)", "have \"\\<forall>x\\<in> C. p x (Suc n) w = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>C. p x (Suc n) w = 0", "using Cprops(1) support_set_def"], ["proof (prove)\nusing this:\n  support_set p \\<inter> C = {}\n  support_set ?p = {x. \\<exists>n w. ?p x n w \\<noteq> 0}\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>C. p x (Suc n) w = 0", "by fastforce"], ["proof (state)\nthis:\n  \\<forall>x\\<in>C. p x (Suc n) w = 0\n\ngoal (1 subgoal):\n 1. \\<And>n w.\n       cls_val_process Mkt p (Suc n) w =\n       (\\<Sum>x\\<in>A. prices Mkt x (Suc n) w * p x (Suc n) w)", "hence \"(\\<Sum>x\\<in> C. ((prices Mkt) x (Suc n) w) * (p x (Suc n) w)) = 0\""], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>C. p x (Suc n) w = 0\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>C. prices Mkt x (Suc n) w * p x (Suc n) w) = 0", "by simp"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>C. prices Mkt x (Suc n) w * p x (Suc n) w) = 0\n\ngoal (1 subgoal):\n 1. \\<And>n w.\n       cls_val_process Mkt p (Suc n) w =\n       (\\<Sum>x\\<in>A. prices Mkt x (Suc n) w * p x (Suc n) w)", "hence \"cls_val_process Mkt p (Suc n) w = (\\<Sum>x\\<in> (support_set p). ((prices Mkt) x (Suc n) w) * (p x (Suc n) w))\n    + (\\<Sum>x\\<in> C. ((prices Mkt) x (Suc n) w) * (p x (Suc n) w))\""], ["proof (prove)\nusing this:\n  (\\<Sum>x\\<in>C. prices Mkt x (Suc n) w * p x (Suc n) w) = 0\n\ngoal (1 subgoal):\n 1. cls_val_process Mkt p (Suc n) w =\n    (\\<Sum>x\\<in>support_set p. prices Mkt x (Suc n) w * p x (Suc n) w) +\n    (\\<Sum>x\\<in>C. prices Mkt x (Suc n) w * p x (Suc n) w)", "unfolding cls_val_process_def"], ["proof (prove)\nusing this:\n  (\\<Sum>x\\<in>C. prices Mkt x (Suc n) w * p x (Suc n) w) = 0\n\ngoal (1 subgoal):\n 1. (if \\<not> portfolio p then \\<lambda>n w. 0 else up_cl_proc Mkt p)\n     (Suc n) w =\n    (\\<Sum>x\\<in>support_set p. prices Mkt x (Suc n) w * p x (Suc n) w) +\n    (\\<Sum>x\\<in>C. prices Mkt x (Suc n) w * p x (Suc n) w)", "using \\<open>portfolio p\\<close> up_cl_proc.simps(2)[of Mkt p n]"], ["proof (prove)\nusing this:\n  (\\<Sum>x\\<in>C. prices Mkt x (Suc n) w * p x (Suc n) w) = 0\n  portfolio p\n  up_cl_proc Mkt p (Suc n) =\n  (\\<lambda>w.\n      \\<Sum>x\\<in>support_set p. prices Mkt x (Suc n) w * p x (Suc n) w)\n\ngoal (1 subgoal):\n 1. (if \\<not> portfolio p then \\<lambda>n w. 0 else up_cl_proc Mkt p)\n     (Suc n) w =\n    (\\<Sum>x\\<in>support_set p. prices Mkt x (Suc n) w * p x (Suc n) w) +\n    (\\<Sum>x\\<in>C. prices Mkt x (Suc n) w * p x (Suc n) w)", "by simp"], ["proof (state)\nthis:\n  cls_val_process Mkt p (Suc n) w =\n  (\\<Sum>x\\<in>support_set p. prices Mkt x (Suc n) w * p x (Suc n) w) +\n  (\\<Sum>x\\<in>C. prices Mkt x (Suc n) w * p x (Suc n) w)\n\ngoal (1 subgoal):\n 1. \\<And>n w.\n       cls_val_process Mkt p (Suc n) w =\n       (\\<Sum>x\\<in>A. prices Mkt x (Suc n) w * p x (Suc n) w)", "also"], ["proof (state)\nthis:\n  cls_val_process Mkt p (Suc n) w =\n  (\\<Sum>x\\<in>support_set p. prices Mkt x (Suc n) w * p x (Suc n) w) +\n  (\\<Sum>x\\<in>C. prices Mkt x (Suc n) w * p x (Suc n) w)\n\ngoal (1 subgoal):\n 1. \\<And>n w.\n       cls_val_process Mkt p (Suc n) w =\n       (\\<Sum>x\\<in>A. prices Mkt x (Suc n) w * p x (Suc n) w)", "have \"... = (\\<Sum> x\\<in> A. ((prices Mkt) x (Suc n) w) * (p x (Suc n) w))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>support_set p. prices Mkt x (Suc n) w * p x (Suc n) w) +\n    (\\<Sum>x\\<in>C. prices Mkt x (Suc n) w * p x (Suc n) w) =\n    (\\<Sum>x\\<in>A. prices Mkt x (Suc n) w * p x (Suc n) w)", "using \\<open>portfolio p\\<close> \\<open>finite C\\<close> Cprops portfolio_def sum_union_disjoint'"], ["proof (prove)\nusing this:\n  portfolio p\n  finite C\n  support_set p \\<inter> C = {}\n  support_set p \\<union> C = A\n  portfolio ?p = finite (support_set ?p)\n  \\<lbrakk>finite ?A; finite ?B; ?A \\<inter> ?B = {};\n   ?A \\<union> ?B = ?C\\<rbrakk>\n  \\<Longrightarrow> sum ?g ?C = sum ?g ?A + sum ?g ?B\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>support_set p. prices Mkt x (Suc n) w * p x (Suc n) w) +\n    (\\<Sum>x\\<in>C. prices Mkt x (Suc n) w * p x (Suc n) w) =\n    (\\<Sum>x\\<in>A. prices Mkt x (Suc n) w * p x (Suc n) w)", "by (metis (no_types, lifting))"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>support_set p. prices Mkt x (Suc n) w * p x (Suc n) w) +\n  (\\<Sum>x\\<in>C. prices Mkt x (Suc n) w * p x (Suc n) w) =\n  (\\<Sum>x\\<in>A. prices Mkt x (Suc n) w * p x (Suc n) w)\n\ngoal (1 subgoal):\n 1. \\<And>n w.\n       cls_val_process Mkt p (Suc n) w =\n       (\\<Sum>x\\<in>A. prices Mkt x (Suc n) w * p x (Suc n) w)", "finally"], ["proof (chain)\npicking this:\n  cls_val_process Mkt p (Suc n) w =\n  (\\<Sum>x\\<in>A. prices Mkt x (Suc n) w * p x (Suc n) w)", "show \"cls_val_process Mkt p (Suc n) w = (\\<Sum> x\\<in> A. ((prices Mkt) x (Suc n) w) * (p x (Suc n) w))\""], ["proof (prove)\nusing this:\n  cls_val_process Mkt p (Suc n) w =\n  (\\<Sum>x\\<in>A. prices Mkt x (Suc n) w * p x (Suc n) w)\n\ngoal (1 subgoal):\n 1. cls_val_process Mkt p (Suc n) w =\n    (\\<Sum>x\\<in>A. prices Mkt x (Suc n) w * p x (Suc n) w)", "."], ["proof (state)\nthis:\n  cls_val_process Mkt p (Suc n) w =\n  (\\<Sum>x\\<in>A. prices Mkt x (Suc n) w * p x (Suc n) w)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma subset_cls_val_process':\n  assumes \"finite A\"\n  and \"support_set p \\<subseteq> A\"\nshows \"cls_val_process Mkt p (Suc n) w = (sum (\\<lambda>x. ((prices Mkt) x (Suc n) w) * (p x (Suc n) w)) A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cls_val_process Mkt p (Suc n) w =\n    (\\<Sum>x\\<in>A. prices Mkt x (Suc n) w * p x (Suc n) w)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. cls_val_process Mkt p (Suc n) w =\n    (\\<Sum>x\\<in>A. prices Mkt x (Suc n) w * p x (Suc n) w)", "have \"portfolio p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. portfolio p", "using assms"], ["proof (prove)\nusing this:\n  finite A\n  support_set p \\<subseteq> A\n\ngoal (1 subgoal):\n 1. portfolio p", "unfolding portfolio_def"], ["proof (prove)\nusing this:\n  finite A\n  support_set p \\<subseteq> A\n\ngoal (1 subgoal):\n 1. finite (support_set p)", "using finite_subset"], ["proof (prove)\nusing this:\n  finite A\n  support_set p \\<subseteq> A\n  \\<lbrakk>?A \\<subseteq> ?B; finite ?B\\<rbrakk> \\<Longrightarrow> finite ?A\n\ngoal (1 subgoal):\n 1. finite (support_set p)", "by auto"], ["proof (state)\nthis:\n  portfolio p\n\ngoal (1 subgoal):\n 1. cls_val_process Mkt p (Suc n) w =\n    (\\<Sum>x\\<in>A. prices Mkt x (Suc n) w * p x (Suc n) w)", "have \"\\<exists>C. (support_set p) \\<inter> C = {} \\<and> (support_set p) \\<union> C = A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>C.\n       support_set p \\<inter> C = {} \\<and> support_set p \\<union> C = A", "using assms(2)"], ["proof (prove)\nusing this:\n  support_set p \\<subseteq> A\n\ngoal (1 subgoal):\n 1. \\<exists>C.\n       support_set p \\<inter> C = {} \\<and> support_set p \\<union> C = A", "by auto"], ["proof (state)\nthis:\n  \\<exists>C.\n     support_set p \\<inter> C = {} \\<and> support_set p \\<union> C = A\n\ngoal (1 subgoal):\n 1. cls_val_process Mkt p (Suc n) w =\n    (\\<Sum>x\\<in>A. prices Mkt x (Suc n) w * p x (Suc n) w)", "from this"], ["proof (chain)\npicking this:\n  \\<exists>C.\n     support_set p \\<inter> C = {} \\<and> support_set p \\<union> C = A", "obtain C where \"(support_set p) \\<inter> C = {}\" and \"(support_set p) \\<union> C = A\""], ["proof (prove)\nusing this:\n  \\<exists>C.\n     support_set p \\<inter> C = {} \\<and> support_set p \\<union> C = A\n\ngoal (1 subgoal):\n 1. (\\<And>C.\n        \\<lbrakk>support_set p \\<inter> C = {};\n         support_set p \\<union> C = A\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  support_set p \\<inter> C = {}\n  support_set p \\<union> C = A\n\ngoal (1 subgoal):\n 1. cls_val_process Mkt p (Suc n) w =\n    (\\<Sum>x\\<in>A. prices Mkt x (Suc n) w * p x (Suc n) w)", "note Cprops = this"], ["proof (state)\nthis:\n  support_set p \\<inter> C = {}\n  support_set p \\<union> C = A\n\ngoal (1 subgoal):\n 1. cls_val_process Mkt p (Suc n) w =\n    (\\<Sum>x\\<in>A. prices Mkt x (Suc n) w * p x (Suc n) w)", "have \"finite C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite C", "using assms \\<open>(support_set p) \\<union> C = A\\<close>"], ["proof (prove)\nusing this:\n  finite A\n  support_set p \\<subseteq> A\n  support_set p \\<union> C = A\n\ngoal (1 subgoal):\n 1. finite C", "by auto"], ["proof (state)\nthis:\n  finite C\n\ngoal (1 subgoal):\n 1. cls_val_process Mkt p (Suc n) w =\n    (\\<Sum>x\\<in>A. prices Mkt x (Suc n) w * p x (Suc n) w)", "have \"\\<forall>x\\<in> C. p x (Suc n) w = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>C. p x (Suc n) w = 0", "using Cprops(1) support_set_def"], ["proof (prove)\nusing this:\n  support_set p \\<inter> C = {}\n  support_set ?p = {x. \\<exists>n w. ?p x n w \\<noteq> 0}\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>C. p x (Suc n) w = 0", "by fastforce"], ["proof (state)\nthis:\n  \\<forall>x\\<in>C. p x (Suc n) w = 0\n\ngoal (1 subgoal):\n 1. cls_val_process Mkt p (Suc n) w =\n    (\\<Sum>x\\<in>A. prices Mkt x (Suc n) w * p x (Suc n) w)", "hence \"(\\<Sum>x\\<in> C. ((prices Mkt) x (Suc n) w) * (p x (Suc n) w)) = 0\""], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>C. p x (Suc n) w = 0\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>C. prices Mkt x (Suc n) w * p x (Suc n) w) = 0", "by simp"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>C. prices Mkt x (Suc n) w * p x (Suc n) w) = 0\n\ngoal (1 subgoal):\n 1. cls_val_process Mkt p (Suc n) w =\n    (\\<Sum>x\\<in>A. prices Mkt x (Suc n) w * p x (Suc n) w)", "hence \"cls_val_process Mkt p (Suc n) w = (\\<Sum>x\\<in> (support_set p). ((prices Mkt) x (Suc n) w) * (p x (Suc n) w))\n    + (\\<Sum>x\\<in> C. ((prices Mkt) x (Suc n) w) * (p x (Suc n) w))\""], ["proof (prove)\nusing this:\n  (\\<Sum>x\\<in>C. prices Mkt x (Suc n) w * p x (Suc n) w) = 0\n\ngoal (1 subgoal):\n 1. cls_val_process Mkt p (Suc n) w =\n    (\\<Sum>x\\<in>support_set p. prices Mkt x (Suc n) w * p x (Suc n) w) +\n    (\\<Sum>x\\<in>C. prices Mkt x (Suc n) w * p x (Suc n) w)", "unfolding cls_val_process_def"], ["proof (prove)\nusing this:\n  (\\<Sum>x\\<in>C. prices Mkt x (Suc n) w * p x (Suc n) w) = 0\n\ngoal (1 subgoal):\n 1. (if \\<not> portfolio p then \\<lambda>n w. 0 else up_cl_proc Mkt p)\n     (Suc n) w =\n    (\\<Sum>x\\<in>support_set p. prices Mkt x (Suc n) w * p x (Suc n) w) +\n    (\\<Sum>x\\<in>C. prices Mkt x (Suc n) w * p x (Suc n) w)", "using \\<open>portfolio p\\<close> up_cl_proc.simps(2)[of Mkt p n]"], ["proof (prove)\nusing this:\n  (\\<Sum>x\\<in>C. prices Mkt x (Suc n) w * p x (Suc n) w) = 0\n  portfolio p\n  up_cl_proc Mkt p (Suc n) =\n  (\\<lambda>w.\n      \\<Sum>x\\<in>support_set p. prices Mkt x (Suc n) w * p x (Suc n) w)\n\ngoal (1 subgoal):\n 1. (if \\<not> portfolio p then \\<lambda>n w. 0 else up_cl_proc Mkt p)\n     (Suc n) w =\n    (\\<Sum>x\\<in>support_set p. prices Mkt x (Suc n) w * p x (Suc n) w) +\n    (\\<Sum>x\\<in>C. prices Mkt x (Suc n) w * p x (Suc n) w)", "by simp"], ["proof (state)\nthis:\n  cls_val_process Mkt p (Suc n) w =\n  (\\<Sum>x\\<in>support_set p. prices Mkt x (Suc n) w * p x (Suc n) w) +\n  (\\<Sum>x\\<in>C. prices Mkt x (Suc n) w * p x (Suc n) w)\n\ngoal (1 subgoal):\n 1. cls_val_process Mkt p (Suc n) w =\n    (\\<Sum>x\\<in>A. prices Mkt x (Suc n) w * p x (Suc n) w)", "also"], ["proof (state)\nthis:\n  cls_val_process Mkt p (Suc n) w =\n  (\\<Sum>x\\<in>support_set p. prices Mkt x (Suc n) w * p x (Suc n) w) +\n  (\\<Sum>x\\<in>C. prices Mkt x (Suc n) w * p x (Suc n) w)\n\ngoal (1 subgoal):\n 1. cls_val_process Mkt p (Suc n) w =\n    (\\<Sum>x\\<in>A. prices Mkt x (Suc n) w * p x (Suc n) w)", "have \"... = (\\<Sum> x\\<in> A. ((prices Mkt) x (Suc n) w) * (p x (Suc n) w))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>support_set p. prices Mkt x (Suc n) w * p x (Suc n) w) +\n    (\\<Sum>x\\<in>C. prices Mkt x (Suc n) w * p x (Suc n) w) =\n    (\\<Sum>x\\<in>A. prices Mkt x (Suc n) w * p x (Suc n) w)", "using \\<open>portfolio p\\<close> \\<open>finite C\\<close> Cprops portfolio_def sum_union_disjoint'"], ["proof (prove)\nusing this:\n  portfolio p\n  finite C\n  support_set p \\<inter> C = {}\n  support_set p \\<union> C = A\n  portfolio ?p = finite (support_set ?p)\n  \\<lbrakk>finite ?A; finite ?B; ?A \\<inter> ?B = {};\n   ?A \\<union> ?B = ?C\\<rbrakk>\n  \\<Longrightarrow> sum ?g ?C = sum ?g ?A + sum ?g ?B\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>support_set p. prices Mkt x (Suc n) w * p x (Suc n) w) +\n    (\\<Sum>x\\<in>C. prices Mkt x (Suc n) w * p x (Suc n) w) =\n    (\\<Sum>x\\<in>A. prices Mkt x (Suc n) w * p x (Suc n) w)", "by (metis (no_types, lifting))"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>support_set p. prices Mkt x (Suc n) w * p x (Suc n) w) +\n  (\\<Sum>x\\<in>C. prices Mkt x (Suc n) w * p x (Suc n) w) =\n  (\\<Sum>x\\<in>A. prices Mkt x (Suc n) w * p x (Suc n) w)\n\ngoal (1 subgoal):\n 1. cls_val_process Mkt p (Suc n) w =\n    (\\<Sum>x\\<in>A. prices Mkt x (Suc n) w * p x (Suc n) w)", "finally"], ["proof (chain)\npicking this:\n  cls_val_process Mkt p (Suc n) w =\n  (\\<Sum>x\\<in>A. prices Mkt x (Suc n) w * p x (Suc n) w)", "show \"cls_val_process Mkt p (Suc n) w = (\\<Sum> x\\<in> A. ((prices Mkt) x (Suc n) w) * (p x (Suc n) w))\""], ["proof (prove)\nusing this:\n  cls_val_process Mkt p (Suc n) w =\n  (\\<Sum>x\\<in>A. prices Mkt x (Suc n) w * p x (Suc n) w)\n\ngoal (1 subgoal):\n 1. cls_val_process Mkt p (Suc n) w =\n    (\\<Sum>x\\<in>A. prices Mkt x (Suc n) w * p x (Suc n) w)", "."], ["proof (state)\nthis:\n  cls_val_process Mkt p (Suc n) w =\n  (\\<Sum>x\\<in>A. prices Mkt x (Suc n) w * p x (Suc n) w)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma sum_cls_val_process_Suc:\n  assumes \"portfolio pf1\"\n  and \"portfolio pf2\"\nshows \"\\<forall>n w. cls_val_process Mkt (qty_sum pf1 pf2) (Suc n) w =\n  (cls_val_process Mkt pf1) (Suc n) w + (cls_val_process Mkt pf2) (Suc n) w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n w.\n       cls_val_process Mkt (qty_sum pf1 pf2) (Suc n) w =\n       cls_val_process Mkt pf1 (Suc n) w + cls_val_process Mkt pf2 (Suc n) w", "proof (intro allI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n w.\n       cls_val_process Mkt (qty_sum pf1 pf2) (Suc n) w =\n       cls_val_process Mkt pf1 (Suc n) w + cls_val_process Mkt pf2 (Suc n) w", "fix n w"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n w.\n       cls_val_process Mkt (qty_sum pf1 pf2) (Suc n) w =\n       cls_val_process Mkt pf1 (Suc n) w + cls_val_process Mkt pf2 (Suc n) w", "have vp1: \"cls_val_process Mkt pf1 (Suc n) w =\n    (\\<Sum> x\\<in> (support_set pf1)\\<union> (support_set pf2). ((prices Mkt) x (Suc n) w) * (pf1 x (Suc n) w))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cls_val_process Mkt pf1 (Suc n) w =\n    (\\<Sum>x\\<in>support_set pf1 \\<union> support_set pf2.\n       prices Mkt x (Suc n) w * pf1 x (Suc n) w)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. cls_val_process Mkt pf1 (Suc n) w =\n    (\\<Sum>x\\<in>support_set pf1 \\<union> support_set pf2.\n       prices Mkt x (Suc n) w * pf1 x (Suc n) w)", "have \"finite (support_set pf1 \\<union> support_set pf2) \\<and> support_set pf1 \\<subseteq> support_set pf1 \\<union> support_set pf2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (support_set pf1 \\<union> support_set pf2) \\<and>\n    support_set pf1 \\<subseteq> support_set pf1 \\<union> support_set pf2", "by (meson assms(1) assms(2) finite_Un portfolio_def sup.cobounded1)"], ["proof (state)\nthis:\n  finite (support_set pf1 \\<union> support_set pf2) \\<and>\n  support_set pf1 \\<subseteq> support_set pf1 \\<union> support_set pf2\n\ngoal (1 subgoal):\n 1. cls_val_process Mkt pf1 (Suc n) w =\n    (\\<Sum>x\\<in>support_set pf1 \\<union> support_set pf2.\n       prices Mkt x (Suc n) w * pf1 x (Suc n) w)", "then"], ["proof (chain)\npicking this:\n  finite (support_set pf1 \\<union> support_set pf2) \\<and>\n  support_set pf1 \\<subseteq> support_set pf1 \\<union> support_set pf2", "show ?thesis"], ["proof (prove)\nusing this:\n  finite (support_set pf1 \\<union> support_set pf2) \\<and>\n  support_set pf1 \\<subseteq> support_set pf1 \\<union> support_set pf2\n\ngoal (1 subgoal):\n 1. cls_val_process Mkt pf1 (Suc n) w =\n    (\\<Sum>x\\<in>support_set pf1 \\<union> support_set pf2.\n       prices Mkt x (Suc n) w * pf1 x (Suc n) w)", "by (simp add: subset_cls_val_process)"], ["proof (state)\nthis:\n  cls_val_process Mkt pf1 (Suc n) w =\n  (\\<Sum>x\\<in>support_set pf1 \\<union> support_set pf2.\n     prices Mkt x (Suc n) w * pf1 x (Suc n) w)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  cls_val_process Mkt pf1 (Suc n) w =\n  (\\<Sum>x\\<in>support_set pf1 \\<union> support_set pf2.\n     prices Mkt x (Suc n) w * pf1 x (Suc n) w)\n\ngoal (1 subgoal):\n 1. \\<And>n w.\n       cls_val_process Mkt (qty_sum pf1 pf2) (Suc n) w =\n       cls_val_process Mkt pf1 (Suc n) w + cls_val_process Mkt pf2 (Suc n) w", "have vp2: \"cls_val_process Mkt pf2 (Suc n) w = (\\<Sum> x\\<in> (support_set pf1)\\<union> (support_set pf2). ((prices Mkt) x (Suc n) w) * (pf2 x (Suc n) w))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cls_val_process Mkt pf2 (Suc n) w =\n    (\\<Sum>x\\<in>support_set pf1 \\<union> support_set pf2.\n       prices Mkt x (Suc n) w * pf2 x (Suc n) w)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. cls_val_process Mkt pf2 (Suc n) w =\n    (\\<Sum>x\\<in>support_set pf1 \\<union> support_set pf2.\n       prices Mkt x (Suc n) w * pf2 x (Suc n) w)", "have \"finite (support_set pf1 \\<union> support_set pf2) \\<and> support_set pf2 \\<subseteq> support_set pf2 \\<union> support_set pf1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (support_set pf1 \\<union> support_set pf2) \\<and>\n    support_set pf2 \\<subseteq> support_set pf2 \\<union> support_set pf1", "by (meson assms(1) assms(2) finite_Un portfolio_def sup.cobounded1)"], ["proof (state)\nthis:\n  finite (support_set pf1 \\<union> support_set pf2) \\<and>\n  support_set pf2 \\<subseteq> support_set pf2 \\<union> support_set pf1\n\ngoal (1 subgoal):\n 1. cls_val_process Mkt pf2 (Suc n) w =\n    (\\<Sum>x\\<in>support_set pf1 \\<union> support_set pf2.\n       prices Mkt x (Suc n) w * pf2 x (Suc n) w)", "then"], ["proof (chain)\npicking this:\n  finite (support_set pf1 \\<union> support_set pf2) \\<and>\n  support_set pf2 \\<subseteq> support_set pf2 \\<union> support_set pf1", "show ?thesis"], ["proof (prove)\nusing this:\n  finite (support_set pf1 \\<union> support_set pf2) \\<and>\n  support_set pf2 \\<subseteq> support_set pf2 \\<union> support_set pf1\n\ngoal (1 subgoal):\n 1. cls_val_process Mkt pf2 (Suc n) w =\n    (\\<Sum>x\\<in>support_set pf1 \\<union> support_set pf2.\n       prices Mkt x (Suc n) w * pf2 x (Suc n) w)", "by (auto simp add: subset_cls_val_process)"], ["proof (state)\nthis:\n  cls_val_process Mkt pf2 (Suc n) w =\n  (\\<Sum>x\\<in>support_set pf1 \\<union> support_set pf2.\n     prices Mkt x (Suc n) w * pf2 x (Suc n) w)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  cls_val_process Mkt pf2 (Suc n) w =\n  (\\<Sum>x\\<in>support_set pf1 \\<union> support_set pf2.\n     prices Mkt x (Suc n) w * pf2 x (Suc n) w)\n\ngoal (1 subgoal):\n 1. \\<And>n w.\n       cls_val_process Mkt (qty_sum pf1 pf2) (Suc n) w =\n       cls_val_process Mkt pf1 (Suc n) w + cls_val_process Mkt pf2 (Suc n) w", "have pf:\"portfolio (qty_sum pf1 pf2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. portfolio (qty_sum pf1 pf2)", "using assms"], ["proof (prove)\nusing this:\n  portfolio pf1\n  portfolio pf2\n\ngoal (1 subgoal):\n 1. portfolio (qty_sum pf1 pf2)", "by (simp add:sum_portfolio)"], ["proof (state)\nthis:\n  portfolio (qty_sum pf1 pf2)\n\ngoal (1 subgoal):\n 1. \\<And>n w.\n       cls_val_process Mkt (qty_sum pf1 pf2) (Suc n) w =\n       cls_val_process Mkt pf1 (Suc n) w + cls_val_process Mkt pf2 (Suc n) w", "have fin:\"finite (support_set pf1 \\<union> support_set pf2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (support_set pf1 \\<union> support_set pf2)", "using assms finite_Un"], ["proof (prove)\nusing this:\n  portfolio pf1\n  portfolio pf2\n  finite (?F \\<union> ?G) = (finite ?F \\<and> finite ?G)\n\ngoal (1 subgoal):\n 1. finite (support_set pf1 \\<union> support_set pf2)", "unfolding portfolio_def"], ["proof (prove)\nusing this:\n  finite (support_set pf1)\n  finite (support_set pf2)\n  finite (?F \\<union> ?G) = (finite ?F \\<and> finite ?G)\n\ngoal (1 subgoal):\n 1. finite (support_set pf1 \\<union> support_set pf2)", "by auto"], ["proof (state)\nthis:\n  finite (support_set pf1 \\<union> support_set pf2)\n\ngoal (1 subgoal):\n 1. \\<And>n w.\n       cls_val_process Mkt (qty_sum pf1 pf2) (Suc n) w =\n       cls_val_process Mkt pf1 (Suc n) w + cls_val_process Mkt pf2 (Suc n) w", "have \"(cls_val_process Mkt pf1) (Suc n) w + (cls_val_process Mkt pf2) (Suc n) w =\n    (\\<Sum> x\\<in> (support_set pf1)\\<union> (support_set pf2). ((prices Mkt) x (Suc n) w) * (pf1 x (Suc n) w)) +\n    (\\<Sum> x\\<in> (support_set pf1)\\<union> (support_set pf2). ((prices Mkt) x (Suc n) w) * (pf2 x (Suc n) w))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cls_val_process Mkt pf1 (Suc n) w + cls_val_process Mkt pf2 (Suc n) w =\n    (\\<Sum>x\\<in>support_set pf1 \\<union> support_set pf2.\n       prices Mkt x (Suc n) w * pf1 x (Suc n) w) +\n    (\\<Sum>x\\<in>support_set pf1 \\<union> support_set pf2.\n       prices Mkt x (Suc n) w * pf2 x (Suc n) w)", "using vp1 vp2"], ["proof (prove)\nusing this:\n  cls_val_process Mkt pf1 (Suc n) w =\n  (\\<Sum>x\\<in>support_set pf1 \\<union> support_set pf2.\n     prices Mkt x (Suc n) w * pf1 x (Suc n) w)\n  cls_val_process Mkt pf2 (Suc n) w =\n  (\\<Sum>x\\<in>support_set pf1 \\<union> support_set pf2.\n     prices Mkt x (Suc n) w * pf2 x (Suc n) w)\n\ngoal (1 subgoal):\n 1. cls_val_process Mkt pf1 (Suc n) w + cls_val_process Mkt pf2 (Suc n) w =\n    (\\<Sum>x\\<in>support_set pf1 \\<union> support_set pf2.\n       prices Mkt x (Suc n) w * pf1 x (Suc n) w) +\n    (\\<Sum>x\\<in>support_set pf1 \\<union> support_set pf2.\n       prices Mkt x (Suc n) w * pf2 x (Suc n) w)", "by simp"], ["proof (state)\nthis:\n  cls_val_process Mkt pf1 (Suc n) w + cls_val_process Mkt pf2 (Suc n) w =\n  (\\<Sum>x\\<in>support_set pf1 \\<union> support_set pf2.\n     prices Mkt x (Suc n) w * pf1 x (Suc n) w) +\n  (\\<Sum>x\\<in>support_set pf1 \\<union> support_set pf2.\n     prices Mkt x (Suc n) w * pf2 x (Suc n) w)\n\ngoal (1 subgoal):\n 1. \\<And>n w.\n       cls_val_process Mkt (qty_sum pf1 pf2) (Suc n) w =\n       cls_val_process Mkt pf1 (Suc n) w + cls_val_process Mkt pf2 (Suc n) w", "also"], ["proof (state)\nthis:\n  cls_val_process Mkt pf1 (Suc n) w + cls_val_process Mkt pf2 (Suc n) w =\n  (\\<Sum>x\\<in>support_set pf1 \\<union> support_set pf2.\n     prices Mkt x (Suc n) w * pf1 x (Suc n) w) +\n  (\\<Sum>x\\<in>support_set pf1 \\<union> support_set pf2.\n     prices Mkt x (Suc n) w * pf2 x (Suc n) w)\n\ngoal (1 subgoal):\n 1. \\<And>n w.\n       cls_val_process Mkt (qty_sum pf1 pf2) (Suc n) w =\n       cls_val_process Mkt pf1 (Suc n) w + cls_val_process Mkt pf2 (Suc n) w", "have \"... = (\\<Sum> x\\<in> (support_set pf1)\\<union> (support_set pf2).\n    (((prices Mkt) x (Suc n) w) * (pf1 x (Suc n) w)) + ((prices Mkt) x (Suc n) w) * (pf2 x (Suc n) w))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>support_set pf1 \\<union> support_set pf2.\n       prices Mkt x (Suc n) w * pf1 x (Suc n) w) +\n    (\\<Sum>x\\<in>support_set pf1 \\<union> support_set pf2.\n       prices Mkt x (Suc n) w * pf2 x (Suc n) w) =\n    (\\<Sum>x\\<in>support_set pf1 \\<union> support_set pf2.\n       prices Mkt x (Suc n) w * pf1 x (Suc n) w +\n       prices Mkt x (Suc n) w * pf2 x (Suc n) w)", "by (simp add: sum.distrib)"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>support_set pf1 \\<union> support_set pf2.\n     prices Mkt x (Suc n) w * pf1 x (Suc n) w) +\n  (\\<Sum>x\\<in>support_set pf1 \\<union> support_set pf2.\n     prices Mkt x (Suc n) w * pf2 x (Suc n) w) =\n  (\\<Sum>x\\<in>support_set pf1 \\<union> support_set pf2.\n     prices Mkt x (Suc n) w * pf1 x (Suc n) w +\n     prices Mkt x (Suc n) w * pf2 x (Suc n) w)\n\ngoal (1 subgoal):\n 1. \\<And>n w.\n       cls_val_process Mkt (qty_sum pf1 pf2) (Suc n) w =\n       cls_val_process Mkt pf1 (Suc n) w + cls_val_process Mkt pf2 (Suc n) w", "also"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>support_set pf1 \\<union> support_set pf2.\n     prices Mkt x (Suc n) w * pf1 x (Suc n) w) +\n  (\\<Sum>x\\<in>support_set pf1 \\<union> support_set pf2.\n     prices Mkt x (Suc n) w * pf2 x (Suc n) w) =\n  (\\<Sum>x\\<in>support_set pf1 \\<union> support_set pf2.\n     prices Mkt x (Suc n) w * pf1 x (Suc n) w +\n     prices Mkt x (Suc n) w * pf2 x (Suc n) w)\n\ngoal (1 subgoal):\n 1. \\<And>n w.\n       cls_val_process Mkt (qty_sum pf1 pf2) (Suc n) w =\n       cls_val_process Mkt pf1 (Suc n) w + cls_val_process Mkt pf2 (Suc n) w", "have \"... = (\\<Sum> x\\<in> (support_set pf1)\\<union> (support_set pf2).\n    ((prices Mkt) x (Suc n) w) * ((pf1 x (Suc n) w) + (pf2 x (Suc n) w)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>support_set pf1 \\<union> support_set pf2.\n       prices Mkt x (Suc n) w * pf1 x (Suc n) w +\n       prices Mkt x (Suc n) w * pf2 x (Suc n) w) =\n    (\\<Sum>x\\<in>support_set pf1 \\<union> support_set pf2.\n       prices Mkt x (Suc n) w * (pf1 x (Suc n) w + pf2 x (Suc n) w))", "by (simp add: distrib_left)"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>support_set pf1 \\<union> support_set pf2.\n     prices Mkt x (Suc n) w * pf1 x (Suc n) w +\n     prices Mkt x (Suc n) w * pf2 x (Suc n) w) =\n  (\\<Sum>x\\<in>support_set pf1 \\<union> support_set pf2.\n     prices Mkt x (Suc n) w * (pf1 x (Suc n) w + pf2 x (Suc n) w))\n\ngoal (1 subgoal):\n 1. \\<And>n w.\n       cls_val_process Mkt (qty_sum pf1 pf2) (Suc n) w =\n       cls_val_process Mkt pf1 (Suc n) w + cls_val_process Mkt pf2 (Suc n) w", "also"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>support_set pf1 \\<union> support_set pf2.\n     prices Mkt x (Suc n) w * pf1 x (Suc n) w +\n     prices Mkt x (Suc n) w * pf2 x (Suc n) w) =\n  (\\<Sum>x\\<in>support_set pf1 \\<union> support_set pf2.\n     prices Mkt x (Suc n) w * (pf1 x (Suc n) w + pf2 x (Suc n) w))\n\ngoal (1 subgoal):\n 1. \\<And>n w.\n       cls_val_process Mkt (qty_sum pf1 pf2) (Suc n) w =\n       cls_val_process Mkt pf1 (Suc n) w + cls_val_process Mkt pf2 (Suc n) w", "have \"... = (\\<Sum> x\\<in> (support_set pf1)\\<union> (support_set pf2).\n    ((prices Mkt) x (Suc n) w) * ((qty_sum pf1 pf2) x (Suc n) w))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>support_set pf1 \\<union> support_set pf2.\n       prices Mkt x (Suc n) w * (pf1 x (Suc n) w + pf2 x (Suc n) w)) =\n    (\\<Sum>x\\<in>support_set pf1 \\<union> support_set pf2.\n       prices Mkt x (Suc n) w * qty_sum pf1 pf2 x (Suc n) w)", "by (simp add: qty_sum_def)"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>support_set pf1 \\<union> support_set pf2.\n     prices Mkt x (Suc n) w * (pf1 x (Suc n) w + pf2 x (Suc n) w)) =\n  (\\<Sum>x\\<in>support_set pf1 \\<union> support_set pf2.\n     prices Mkt x (Suc n) w * qty_sum pf1 pf2 x (Suc n) w)\n\ngoal (1 subgoal):\n 1. \\<And>n w.\n       cls_val_process Mkt (qty_sum pf1 pf2) (Suc n) w =\n       cls_val_process Mkt pf1 (Suc n) w + cls_val_process Mkt pf2 (Suc n) w", "also"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>support_set pf1 \\<union> support_set pf2.\n     prices Mkt x (Suc n) w * (pf1 x (Suc n) w + pf2 x (Suc n) w)) =\n  (\\<Sum>x\\<in>support_set pf1 \\<union> support_set pf2.\n     prices Mkt x (Suc n) w * qty_sum pf1 pf2 x (Suc n) w)\n\ngoal (1 subgoal):\n 1. \\<And>n w.\n       cls_val_process Mkt (qty_sum pf1 pf2) (Suc n) w =\n       cls_val_process Mkt pf1 (Suc n) w + cls_val_process Mkt pf2 (Suc n) w", "have \"... = (\\<Sum> x\\<in> (support_set (qty_sum pf1 pf2)).\n    ((prices Mkt) x (Suc n) w) * ((qty_sum pf1 pf2) x (Suc n) w))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>support_set pf1 \\<union> support_set pf2.\n       prices Mkt x (Suc n) w * qty_sum pf1 pf2 x (Suc n) w) =\n    (\\<Sum>x\\<in>support_set (qty_sum pf1 pf2).\n       prices Mkt x (Suc n) w * qty_sum pf1 pf2 x (Suc n) w)", "using sum_support_set[of pf1 pf2]\n    subset_cls_val_process[of \"support_set pf1\\<union> support_set pf2\" \"qty_sum pf1 pf2\"] pf fin"], ["proof (prove)\nusing this:\n  support_set (qty_sum pf1 pf2)\n  \\<subseteq> support_set pf1 \\<union> support_set pf2\n  \\<lbrakk>finite (support_set pf1 \\<union> support_set pf2);\n   support_set (qty_sum pf1 pf2)\n   \\<subseteq> support_set pf1 \\<union> support_set pf2\\<rbrakk>\n  \\<Longrightarrow> \\<forall>n w.\n                       cls_val_process ?Mkt (qty_sum pf1 pf2) (Suc n) w =\n                       (\\<Sum>x\\<in>support_set pf1 \\<union>\n                                    support_set pf2.\n                          prices ?Mkt x (Suc n) w *\n                          qty_sum pf1 pf2 x (Suc n) w)\n  portfolio (qty_sum pf1 pf2)\n  finite (support_set pf1 \\<union> support_set pf2)\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>support_set pf1 \\<union> support_set pf2.\n       prices Mkt x (Suc n) w * qty_sum pf1 pf2 x (Suc n) w) =\n    (\\<Sum>x\\<in>support_set (qty_sum pf1 pf2).\n       prices Mkt x (Suc n) w * qty_sum pf1 pf2 x (Suc n) w)", "unfolding cls_val_process_def"], ["proof (prove)\nusing this:\n  support_set (qty_sum pf1 pf2)\n  \\<subseteq> support_set pf1 \\<union> support_set pf2\n  \\<lbrakk>finite (support_set pf1 \\<union> support_set pf2);\n   support_set (qty_sum pf1 pf2)\n   \\<subseteq> support_set pf1 \\<union> support_set pf2\\<rbrakk>\n  \\<Longrightarrow> \\<forall>n w.\n                       (if \\<not> portfolio (qty_sum pf1 pf2)\n                        then \\<lambda>n w. 0\n                        else up_cl_proc ?Mkt (qty_sum pf1 pf2))\n                        (Suc n) w =\n                       (\\<Sum>x\\<in>support_set pf1 \\<union>\n                                    support_set pf2.\n                          prices ?Mkt x (Suc n) w *\n                          qty_sum pf1 pf2 x (Suc n) w)\n  portfolio (qty_sum pf1 pf2)\n  finite (support_set pf1 \\<union> support_set pf2)\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>support_set pf1 \\<union> support_set pf2.\n       prices Mkt x (Suc n) w * qty_sum pf1 pf2 x (Suc n) w) =\n    (\\<Sum>x\\<in>support_set (qty_sum pf1 pf2).\n       prices Mkt x (Suc n) w * qty_sum pf1 pf2 x (Suc n) w)", "by simp"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>support_set pf1 \\<union> support_set pf2.\n     prices Mkt x (Suc n) w * qty_sum pf1 pf2 x (Suc n) w) =\n  (\\<Sum>x\\<in>support_set (qty_sum pf1 pf2).\n     prices Mkt x (Suc n) w * qty_sum pf1 pf2 x (Suc n) w)\n\ngoal (1 subgoal):\n 1. \\<And>n w.\n       cls_val_process Mkt (qty_sum pf1 pf2) (Suc n) w =\n       cls_val_process Mkt pf1 (Suc n) w + cls_val_process Mkt pf2 (Suc n) w", "also"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>support_set pf1 \\<union> support_set pf2.\n     prices Mkt x (Suc n) w * qty_sum pf1 pf2 x (Suc n) w) =\n  (\\<Sum>x\\<in>support_set (qty_sum pf1 pf2).\n     prices Mkt x (Suc n) w * qty_sum pf1 pf2 x (Suc n) w)\n\ngoal (1 subgoal):\n 1. \\<And>n w.\n       cls_val_process Mkt (qty_sum pf1 pf2) (Suc n) w =\n       cls_val_process Mkt pf1 (Suc n) w + cls_val_process Mkt pf2 (Suc n) w", "have \"... = cls_val_process Mkt (qty_sum pf1 pf2) (Suc n) w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>support_set (qty_sum pf1 pf2).\n       prices Mkt x (Suc n) w * qty_sum pf1 pf2 x (Suc n) w) =\n    cls_val_process Mkt (qty_sum pf1 pf2) (Suc n) w", "by (metis (no_types, lifting) pf sum.cong up_cl_proc.simps(2) cls_val_process_def)"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>support_set (qty_sum pf1 pf2).\n     prices Mkt x (Suc n) w * qty_sum pf1 pf2 x (Suc n) w) =\n  cls_val_process Mkt (qty_sum pf1 pf2) (Suc n) w\n\ngoal (1 subgoal):\n 1. \\<And>n w.\n       cls_val_process Mkt (qty_sum pf1 pf2) (Suc n) w =\n       cls_val_process Mkt pf1 (Suc n) w + cls_val_process Mkt pf2 (Suc n) w", "finally"], ["proof (chain)\npicking this:\n  cls_val_process Mkt pf1 (Suc n) w + cls_val_process Mkt pf2 (Suc n) w =\n  cls_val_process Mkt (qty_sum pf1 pf2) (Suc n) w", "have \"(cls_val_process Mkt pf1) (Suc n) w + (cls_val_process Mkt pf2) (Suc n) w =\n    cls_val_process Mkt (qty_sum pf1 pf2) (Suc n) w\""], ["proof (prove)\nusing this:\n  cls_val_process Mkt pf1 (Suc n) w + cls_val_process Mkt pf2 (Suc n) w =\n  cls_val_process Mkt (qty_sum pf1 pf2) (Suc n) w\n\ngoal (1 subgoal):\n 1. cls_val_process Mkt pf1 (Suc n) w + cls_val_process Mkt pf2 (Suc n) w =\n    cls_val_process Mkt (qty_sum pf1 pf2) (Suc n) w", "."], ["proof (state)\nthis:\n  cls_val_process Mkt pf1 (Suc n) w + cls_val_process Mkt pf2 (Suc n) w =\n  cls_val_process Mkt (qty_sum pf1 pf2) (Suc n) w\n\ngoal (1 subgoal):\n 1. \\<And>n w.\n       cls_val_process Mkt (qty_sum pf1 pf2) (Suc n) w =\n       cls_val_process Mkt pf1 (Suc n) w + cls_val_process Mkt pf2 (Suc n) w", "thus \"cls_val_process Mkt (qty_sum pf1 pf2) (Suc n) w =\n    (cls_val_process Mkt pf1) (Suc n) w + (cls_val_process Mkt pf2) (Suc n) w\""], ["proof (prove)\nusing this:\n  cls_val_process Mkt pf1 (Suc n) w + cls_val_process Mkt pf2 (Suc n) w =\n  cls_val_process Mkt (qty_sum pf1 pf2) (Suc n) w\n\ngoal (1 subgoal):\n 1. cls_val_process Mkt (qty_sum pf1 pf2) (Suc n) w =\n    cls_val_process Mkt pf1 (Suc n) w + cls_val_process Mkt pf2 (Suc n) w", ".."], ["proof (state)\nthis:\n  cls_val_process Mkt (qty_sum pf1 pf2) (Suc n) w =\n  cls_val_process Mkt pf1 (Suc n) w + cls_val_process Mkt pf2 (Suc n) w\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma sum_cls_val_process0:\n  assumes \"portfolio pf1\"\n  and \"portfolio pf2\"\nshows \"\\<forall>w. cls_val_process Mkt (qty_sum pf1 pf2) 0 w =\n  (cls_val_process Mkt pf1) 0 w + (cls_val_process Mkt pf2) 0 w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>w.\n       cls_val_process Mkt (qty_sum pf1 pf2) 0 w =\n       cls_val_process Mkt pf1 0 w + cls_val_process Mkt pf2 0 w", "unfolding cls_val_process_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>w.\n       (if \\<not> portfolio (qty_sum pf1 pf2) then \\<lambda>n w. 0\n        else up_cl_proc Mkt (qty_sum pf1 pf2))\n        0 w =\n       (if \\<not> portfolio pf1 then \\<lambda>n w. 0\n        else up_cl_proc Mkt pf1)\n        0 w +\n       (if \\<not> portfolio pf2 then \\<lambda>n w. 0\n        else up_cl_proc Mkt pf2)\n        0 w", "by (simp add: sum_val_process assms(1) assms(2) sum_portfolio)"], ["", "lemma sum_cls_val_process:\n  assumes \"portfolio pf1\"\n  and \"portfolio pf2\"\nshows \"\\<forall>n w. cls_val_process Mkt (qty_sum pf1 pf2) n w =\n  (cls_val_process Mkt pf1) n w + (cls_val_process Mkt pf2) n w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n w.\n       cls_val_process Mkt (qty_sum pf1 pf2) n w =\n       cls_val_process Mkt pf1 n w + cls_val_process Mkt pf2 n w", "by (metis (no_types, lifting) assms(1) assms(2) sum_cls_val_process0 sum_cls_val_process_Suc up_cl_proc.elims)"], ["", "lemma mult_comp_cls_val_process0:\n  assumes \"portfolio pf1\"\n  shows \"\\<forall>w. cls_val_process Mkt (qty_mult_comp pf1 qty) 0 w =\n  ((cls_val_process Mkt pf1) 0 w) * (qty (Suc 0) w)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>w.\n       cls_val_process Mkt (qty_mult_comp pf1 qty) 0 w =\n       cls_val_process Mkt pf1 0 w * qty (Suc 0) w", "unfolding cls_val_process_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>w.\n       (if \\<not> portfolio (qty_mult_comp pf1 qty) then \\<lambda>n w. 0\n        else up_cl_proc Mkt (qty_mult_comp pf1 qty))\n        0 w =\n       (if \\<not> portfolio pf1 then \\<lambda>n w. 0\n        else up_cl_proc Mkt pf1)\n        0 w *\n       qty (Suc 0) w", "by (simp add: assms mult_comp_portfolio mult_comp_val_process)"], ["", "lemma mult_comp_cls_val_process_Suc:\n  assumes \"portfolio pf1\"\n  shows \"\\<forall>n w. cls_val_process Mkt (qty_mult_comp pf1 qty) (Suc n) w =\n  ((cls_val_process Mkt pf1) (Suc n) w) * (qty (Suc n) w)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n w.\n       cls_val_process Mkt (qty_mult_comp pf1 qty) (Suc n) w =\n       cls_val_process Mkt pf1 (Suc n) w * qty (Suc n) w", "proof (intro allI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n w.\n       cls_val_process Mkt (qty_mult_comp pf1 qty) (Suc n) w =\n       cls_val_process Mkt pf1 (Suc n) w * qty (Suc n) w", "fix n w"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n w.\n       cls_val_process Mkt (qty_mult_comp pf1 qty) (Suc n) w =\n       cls_val_process Mkt pf1 (Suc n) w * qty (Suc n) w", "have pf:\"portfolio (qty_mult_comp pf1 qty)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. portfolio (qty_mult_comp pf1 qty)", "using assms"], ["proof (prove)\nusing this:\n  portfolio pf1\n\ngoal (1 subgoal):\n 1. portfolio (qty_mult_comp pf1 qty)", "by (simp add:mult_comp_portfolio)"], ["proof (state)\nthis:\n  portfolio (qty_mult_comp pf1 qty)\n\ngoal (1 subgoal):\n 1. \\<And>n w.\n       cls_val_process Mkt (qty_mult_comp pf1 qty) (Suc n) w =\n       cls_val_process Mkt pf1 (Suc n) w * qty (Suc n) w", "have fin:\"finite (support_set pf1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (support_set pf1)", "using assms"], ["proof (prove)\nusing this:\n  portfolio pf1\n\ngoal (1 subgoal):\n 1. finite (support_set pf1)", "unfolding portfolio_def"], ["proof (prove)\nusing this:\n  finite (support_set pf1)\n\ngoal (1 subgoal):\n 1. finite (support_set pf1)", "by auto"], ["proof (state)\nthis:\n  finite (support_set pf1)\n\ngoal (1 subgoal):\n 1. \\<And>n w.\n       cls_val_process Mkt (qty_mult_comp pf1 qty) (Suc n) w =\n       cls_val_process Mkt pf1 (Suc n) w * qty (Suc n) w", "have \"((cls_val_process Mkt pf1) (Suc n) w) * (qty (Suc n) w) =\n    (\\<Sum> x\\<in> (support_set pf1). ((prices Mkt) x (Suc n) w) * (pf1 x (Suc n) w))*(qty (Suc n) w)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cls_val_process Mkt pf1 (Suc n) w * qty (Suc n) w =\n    (\\<Sum>x\\<in>support_set pf1.\n       prices Mkt x (Suc n) w * pf1 x (Suc n) w) *\n    qty (Suc n) w", "unfolding cls_val_process_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (if \\<not> portfolio pf1 then \\<lambda>n w. 0 else up_cl_proc Mkt pf1)\n     (Suc n) w *\n    qty (Suc n) w =\n    (\\<Sum>x\\<in>support_set pf1.\n       prices Mkt x (Suc n) w * pf1 x (Suc n) w) *\n    qty (Suc n) w", "using assms"], ["proof (prove)\nusing this:\n  portfolio pf1\n\ngoal (1 subgoal):\n 1. (if \\<not> portfolio pf1 then \\<lambda>n w. 0 else up_cl_proc Mkt pf1)\n     (Suc n) w *\n    qty (Suc n) w =\n    (\\<Sum>x\\<in>support_set pf1.\n       prices Mkt x (Suc n) w * pf1 x (Suc n) w) *\n    qty (Suc n) w", "by simp"], ["proof (state)\nthis:\n  cls_val_process Mkt pf1 (Suc n) w * qty (Suc n) w =\n  (\\<Sum>x\\<in>support_set pf1. prices Mkt x (Suc n) w * pf1 x (Suc n) w) *\n  qty (Suc n) w\n\ngoal (1 subgoal):\n 1. \\<And>n w.\n       cls_val_process Mkt (qty_mult_comp pf1 qty) (Suc n) w =\n       cls_val_process Mkt pf1 (Suc n) w * qty (Suc n) w", "also"], ["proof (state)\nthis:\n  cls_val_process Mkt pf1 (Suc n) w * qty (Suc n) w =\n  (\\<Sum>x\\<in>support_set pf1. prices Mkt x (Suc n) w * pf1 x (Suc n) w) *\n  qty (Suc n) w\n\ngoal (1 subgoal):\n 1. \\<And>n w.\n       cls_val_process Mkt (qty_mult_comp pf1 qty) (Suc n) w =\n       cls_val_process Mkt pf1 (Suc n) w * qty (Suc n) w", "have \"... = (\\<Sum> x\\<in> (support_set pf1).\n    (((prices Mkt) x (Suc n) w) * (pf1 x (Suc n) w) * (qty (Suc n) w)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>support_set pf1.\n       prices Mkt x (Suc n) w * pf1 x (Suc n) w) *\n    qty (Suc n) w =\n    (\\<Sum>x\\<in>support_set pf1.\n       prices Mkt x (Suc n) w * pf1 x (Suc n) w * qty (Suc n) w)", "using sum_distrib_right"], ["proof (prove)\nusing this:\n  sum ?f ?A * ?r = (\\<Sum>n\\<in>?A. ?f n * ?r)\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>support_set pf1.\n       prices Mkt x (Suc n) w * pf1 x (Suc n) w) *\n    qty (Suc n) w =\n    (\\<Sum>x\\<in>support_set pf1.\n       prices Mkt x (Suc n) w * pf1 x (Suc n) w * qty (Suc n) w)", "by auto"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>support_set pf1. prices Mkt x (Suc n) w * pf1 x (Suc n) w) *\n  qty (Suc n) w =\n  (\\<Sum>x\\<in>support_set pf1.\n     prices Mkt x (Suc n) w * pf1 x (Suc n) w * qty (Suc n) w)\n\ngoal (1 subgoal):\n 1. \\<And>n w.\n       cls_val_process Mkt (qty_mult_comp pf1 qty) (Suc n) w =\n       cls_val_process Mkt pf1 (Suc n) w * qty (Suc n) w", "also"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>support_set pf1. prices Mkt x (Suc n) w * pf1 x (Suc n) w) *\n  qty (Suc n) w =\n  (\\<Sum>x\\<in>support_set pf1.\n     prices Mkt x (Suc n) w * pf1 x (Suc n) w * qty (Suc n) w)\n\ngoal (1 subgoal):\n 1. \\<And>n w.\n       cls_val_process Mkt (qty_mult_comp pf1 qty) (Suc n) w =\n       cls_val_process Mkt pf1 (Suc n) w * qty (Suc n) w", "have \"... = (\\<Sum> x\\<in> (support_set pf1).\n    ((prices Mkt) x (Suc n) w) * ((qty_mult_comp pf1 qty) x (Suc n) w))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>support_set pf1.\n       prices Mkt x (Suc n) w * pf1 x (Suc n) w * qty (Suc n) w) =\n    (\\<Sum>x\\<in>support_set pf1.\n       prices Mkt x (Suc n) w * qty_mult_comp pf1 qty x (Suc n) w)", "unfolding qty_mult_comp_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>support_set pf1.\n       prices Mkt x (Suc n) w * pf1 x (Suc n) w * qty (Suc n) w) =\n    (\\<Sum>x\\<in>support_set pf1.\n       prices Mkt x (Suc n) w * (pf1 x (Suc n) w * qty (Suc n) w))", "by (simp add: mult.commute mult.left_commute)"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>support_set pf1.\n     prices Mkt x (Suc n) w * pf1 x (Suc n) w * qty (Suc n) w) =\n  (\\<Sum>x\\<in>support_set pf1.\n     prices Mkt x (Suc n) w * qty_mult_comp pf1 qty x (Suc n) w)\n\ngoal (1 subgoal):\n 1. \\<And>n w.\n       cls_val_process Mkt (qty_mult_comp pf1 qty) (Suc n) w =\n       cls_val_process Mkt pf1 (Suc n) w * qty (Suc n) w", "also"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>support_set pf1.\n     prices Mkt x (Suc n) w * pf1 x (Suc n) w * qty (Suc n) w) =\n  (\\<Sum>x\\<in>support_set pf1.\n     prices Mkt x (Suc n) w * qty_mult_comp pf1 qty x (Suc n) w)\n\ngoal (1 subgoal):\n 1. \\<And>n w.\n       cls_val_process Mkt (qty_mult_comp pf1 qty) (Suc n) w =\n       cls_val_process Mkt pf1 (Suc n) w * qty (Suc n) w", "have \"... = (\\<Sum> x\\<in> (support_set (qty_mult_comp pf1 qty)).\n    ((prices Mkt) x (Suc n) w) * ((qty_mult_comp pf1 qty) x (Suc n) w))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>support_set pf1.\n       prices Mkt x (Suc n) w * qty_mult_comp pf1 qty x (Suc n) w) =\n    (\\<Sum>x\\<in>support_set (qty_mult_comp pf1 qty).\n       prices Mkt x (Suc n) w * qty_mult_comp pf1 qty x (Suc n) w)", "using mult_comp_support_set[of pf1 qty]\n    subset_cls_val_process[of \"support_set pf1\" \"qty_mult_comp pf1 qty\"] pf fin up_cl_proc.simps(2)"], ["proof (prove)\nusing this:\n  support_set (qty_mult_comp pf1 qty) \\<subseteq> support_set pf1\n  \\<lbrakk>finite (support_set pf1);\n   support_set (qty_mult_comp pf1 qty) \\<subseteq> support_set pf1\\<rbrakk>\n  \\<Longrightarrow> \\<forall>n w.\n                       cls_val_process ?Mkt (qty_mult_comp pf1 qty) (Suc n)\n                        w =\n                       (\\<Sum>x\\<in>support_set pf1.\n                          prices ?Mkt x (Suc n) w *\n                          qty_mult_comp pf1 qty x (Suc n) w)\n  portfolio (qty_mult_comp pf1 qty)\n  finite (support_set pf1)\n  up_cl_proc ?Mkt ?p (Suc ?n) =\n  (\\<lambda>w.\n      \\<Sum>x\\<in>support_set ?p.\n        prices ?Mkt x (Suc ?n) w * ?p x (Suc ?n) w)\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>support_set pf1.\n       prices Mkt x (Suc n) w * qty_mult_comp pf1 qty x (Suc n) w) =\n    (\\<Sum>x\\<in>support_set (qty_mult_comp pf1 qty).\n       prices Mkt x (Suc n) w * qty_mult_comp pf1 qty x (Suc n) w)", "unfolding cls_val_process_def"], ["proof (prove)\nusing this:\n  support_set (qty_mult_comp pf1 qty) \\<subseteq> support_set pf1\n  \\<lbrakk>finite (support_set pf1);\n   support_set (qty_mult_comp pf1 qty) \\<subseteq> support_set pf1\\<rbrakk>\n  \\<Longrightarrow> \\<forall>n w.\n                       (if \\<not> portfolio (qty_mult_comp pf1 qty)\n                        then \\<lambda>n w. 0\n                        else up_cl_proc ?Mkt (qty_mult_comp pf1 qty))\n                        (Suc n) w =\n                       (\\<Sum>x\\<in>support_set pf1.\n                          prices ?Mkt x (Suc n) w *\n                          qty_mult_comp pf1 qty x (Suc n) w)\n  portfolio (qty_mult_comp pf1 qty)\n  finite (support_set pf1)\n  up_cl_proc ?Mkt ?p (Suc ?n) =\n  (\\<lambda>w.\n      \\<Sum>x\\<in>support_set ?p.\n        prices ?Mkt x (Suc ?n) w * ?p x (Suc ?n) w)\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>support_set pf1.\n       prices Mkt x (Suc n) w * qty_mult_comp pf1 qty x (Suc n) w) =\n    (\\<Sum>x\\<in>support_set (qty_mult_comp pf1 qty).\n       prices Mkt x (Suc n) w * qty_mult_comp pf1 qty x (Suc n) w)", "by simp"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>support_set pf1.\n     prices Mkt x (Suc n) w * qty_mult_comp pf1 qty x (Suc n) w) =\n  (\\<Sum>x\\<in>support_set (qty_mult_comp pf1 qty).\n     prices Mkt x (Suc n) w * qty_mult_comp pf1 qty x (Suc n) w)\n\ngoal (1 subgoal):\n 1. \\<And>n w.\n       cls_val_process Mkt (qty_mult_comp pf1 qty) (Suc n) w =\n       cls_val_process Mkt pf1 (Suc n) w * qty (Suc n) w", "also"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>support_set pf1.\n     prices Mkt x (Suc n) w * qty_mult_comp pf1 qty x (Suc n) w) =\n  (\\<Sum>x\\<in>support_set (qty_mult_comp pf1 qty).\n     prices Mkt x (Suc n) w * qty_mult_comp pf1 qty x (Suc n) w)\n\ngoal (1 subgoal):\n 1. \\<And>n w.\n       cls_val_process Mkt (qty_mult_comp pf1 qty) (Suc n) w =\n       cls_val_process Mkt pf1 (Suc n) w * qty (Suc n) w", "have \"... = cls_val_process Mkt (qty_mult_comp pf1 qty) (Suc n) w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>support_set (qty_mult_comp pf1 qty).\n       prices Mkt x (Suc n) w * qty_mult_comp pf1 qty x (Suc n) w) =\n    cls_val_process Mkt (qty_mult_comp pf1 qty) (Suc n) w", "by (metis (no_types, lifting) pf sum.cong cls_val_process_def up_cl_proc.simps(2))"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>support_set (qty_mult_comp pf1 qty).\n     prices Mkt x (Suc n) w * qty_mult_comp pf1 qty x (Suc n) w) =\n  cls_val_process Mkt (qty_mult_comp pf1 qty) (Suc n) w\n\ngoal (1 subgoal):\n 1. \\<And>n w.\n       cls_val_process Mkt (qty_mult_comp pf1 qty) (Suc n) w =\n       cls_val_process Mkt pf1 (Suc n) w * qty (Suc n) w", "finally"], ["proof (chain)\npicking this:\n  cls_val_process Mkt pf1 (Suc n) w * qty (Suc n) w =\n  cls_val_process Mkt (qty_mult_comp pf1 qty) (Suc n) w", "have \"(cls_val_process Mkt pf1) (Suc n) w * (qty (Suc n) w) = cls_val_process Mkt (qty_mult_comp pf1 qty) (Suc n) w\""], ["proof (prove)\nusing this:\n  cls_val_process Mkt pf1 (Suc n) w * qty (Suc n) w =\n  cls_val_process Mkt (qty_mult_comp pf1 qty) (Suc n) w\n\ngoal (1 subgoal):\n 1. cls_val_process Mkt pf1 (Suc n) w * qty (Suc n) w =\n    cls_val_process Mkt (qty_mult_comp pf1 qty) (Suc n) w", "."], ["proof (state)\nthis:\n  cls_val_process Mkt pf1 (Suc n) w * qty (Suc n) w =\n  cls_val_process Mkt (qty_mult_comp pf1 qty) (Suc n) w\n\ngoal (1 subgoal):\n 1. \\<And>n w.\n       cls_val_process Mkt (qty_mult_comp pf1 qty) (Suc n) w =\n       cls_val_process Mkt pf1 (Suc n) w * qty (Suc n) w", "thus \"cls_val_process Mkt (qty_mult_comp pf1 qty) (Suc n) w = (cls_val_process Mkt pf1) (Suc n) w * (qty (Suc n) w)\""], ["proof (prove)\nusing this:\n  cls_val_process Mkt pf1 (Suc n) w * qty (Suc n) w =\n  cls_val_process Mkt (qty_mult_comp pf1 qty) (Suc n) w\n\ngoal (1 subgoal):\n 1. cls_val_process Mkt (qty_mult_comp pf1 qty) (Suc n) w =\n    cls_val_process Mkt pf1 (Suc n) w * qty (Suc n) w", ".."], ["proof (state)\nthis:\n  cls_val_process Mkt (qty_mult_comp pf1 qty) (Suc n) w =\n  cls_val_process Mkt pf1 (Suc n) w * qty (Suc n) w\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma remove_comp_cls_val_process0:\n  assumes \"portfolio pf1\"\n  shows \"\\<forall>w. cls_val_process Mkt (qty_rem_comp pf1 y) 0 w =\n  ((cls_val_process Mkt pf1) 0 w) - (prices Mkt y 0 w)* (pf1 y (Suc 0) w)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>w.\n       cls_val_process Mkt (qty_rem_comp pf1 y) 0 w =\n       cls_val_process Mkt pf1 0 w - prices Mkt y 0 w * pf1 y (Suc 0) w", "unfolding cls_val_process_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>w.\n       (if \\<not> portfolio (qty_rem_comp pf1 y) then \\<lambda>n w. 0\n        else up_cl_proc Mkt (qty_rem_comp pf1 y))\n        0 w =\n       (if \\<not> portfolio pf1 then \\<lambda>n w. 0\n        else up_cl_proc Mkt pf1)\n        0 w -\n       prices Mkt y 0 w * pf1 y (Suc 0) w", "by (simp add: assms remove_comp_portfolio remove_comp_val_process)"], ["", "lemma remove_comp_cls_val_process_Suc:\n  assumes \"portfolio pf1\"\n  shows \"\\<forall>n w. cls_val_process Mkt (qty_rem_comp pf1 y) (Suc n) w =\n  ((cls_val_process Mkt pf1) (Suc n) w) - (prices Mkt y (Suc n) w)* (pf1 y (Suc n) w)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n w.\n       cls_val_process Mkt (qty_rem_comp pf1 y) (Suc n) w =\n       cls_val_process Mkt pf1 (Suc n) w -\n       prices Mkt y (Suc n) w * pf1 y (Suc n) w", "proof (intro allI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n w.\n       cls_val_process Mkt (qty_rem_comp pf1 y) (Suc n) w =\n       cls_val_process Mkt pf1 (Suc n) w -\n       prices Mkt y (Suc n) w * pf1 y (Suc n) w", "fix n w"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n w.\n       cls_val_process Mkt (qty_rem_comp pf1 y) (Suc n) w =\n       cls_val_process Mkt pf1 (Suc n) w -\n       prices Mkt y (Suc n) w * pf1 y (Suc n) w", "have pf:\"portfolio (qty_rem_comp pf1 y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. portfolio (qty_rem_comp pf1 y)", "using assms"], ["proof (prove)\nusing this:\n  portfolio pf1\n\ngoal (1 subgoal):\n 1. portfolio (qty_rem_comp pf1 y)", "by (simp add:remove_comp_portfolio)"], ["proof (state)\nthis:\n  portfolio (qty_rem_comp pf1 y)\n\ngoal (1 subgoal):\n 1. \\<And>n w.\n       cls_val_process Mkt (qty_rem_comp pf1 y) (Suc n) w =\n       cls_val_process Mkt pf1 (Suc n) w -\n       prices Mkt y (Suc n) w * pf1 y (Suc n) w", "have fin:\"finite (support_set pf1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (support_set pf1)", "using assms"], ["proof (prove)\nusing this:\n  portfolio pf1\n\ngoal (1 subgoal):\n 1. finite (support_set pf1)", "unfolding portfolio_def"], ["proof (prove)\nusing this:\n  finite (support_set pf1)\n\ngoal (1 subgoal):\n 1. finite (support_set pf1)", "by auto"], ["proof (state)\nthis:\n  finite (support_set pf1)\n\ngoal (1 subgoal):\n 1. \\<And>n w.\n       cls_val_process Mkt (qty_rem_comp pf1 y) (Suc n) w =\n       cls_val_process Mkt pf1 (Suc n) w -\n       prices Mkt y (Suc n) w * pf1 y (Suc n) w", "hence fin2: \"finite (support_set pf1 - {y})\""], ["proof (prove)\nusing this:\n  finite (support_set pf1)\n\ngoal (1 subgoal):\n 1. finite (support_set pf1 - {y})", "by simp"], ["proof (state)\nthis:\n  finite (support_set pf1 - {y})\n\ngoal (1 subgoal):\n 1. \\<And>n w.\n       cls_val_process Mkt (qty_rem_comp pf1 y) (Suc n) w =\n       cls_val_process Mkt pf1 (Suc n) w -\n       prices Mkt y (Suc n) w * pf1 y (Suc n) w", "have \"((cls_val_process Mkt pf1) (Suc n) w)  =\n    (\\<Sum> x\\<in> (support_set pf1). ((prices Mkt) x (Suc n) w) * (pf1 x (Suc n) w))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cls_val_process Mkt pf1 (Suc n) w =\n    (\\<Sum>x\\<in>support_set pf1. prices Mkt x (Suc n) w * pf1 x (Suc n) w)", "unfolding cls_val_process_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (if \\<not> portfolio pf1 then \\<lambda>n w. 0 else up_cl_proc Mkt pf1)\n     (Suc n) w =\n    (\\<Sum>x\\<in>support_set pf1. prices Mkt x (Suc n) w * pf1 x (Suc n) w)", "using assms"], ["proof (prove)\nusing this:\n  portfolio pf1\n\ngoal (1 subgoal):\n 1. (if \\<not> portfolio pf1 then \\<lambda>n w. 0 else up_cl_proc Mkt pf1)\n     (Suc n) w =\n    (\\<Sum>x\\<in>support_set pf1. prices Mkt x (Suc n) w * pf1 x (Suc n) w)", "by simp"], ["proof (state)\nthis:\n  cls_val_process Mkt pf1 (Suc n) w =\n  (\\<Sum>x\\<in>support_set pf1. prices Mkt x (Suc n) w * pf1 x (Suc n) w)\n\ngoal (1 subgoal):\n 1. \\<And>n w.\n       cls_val_process Mkt (qty_rem_comp pf1 y) (Suc n) w =\n       cls_val_process Mkt pf1 (Suc n) w -\n       prices Mkt y (Suc n) w * pf1 y (Suc n) w", "also"], ["proof (state)\nthis:\n  cls_val_process Mkt pf1 (Suc n) w =\n  (\\<Sum>x\\<in>support_set pf1. prices Mkt x (Suc n) w * pf1 x (Suc n) w)\n\ngoal (1 subgoal):\n 1. \\<And>n w.\n       cls_val_process Mkt (qty_rem_comp pf1 y) (Suc n) w =\n       cls_val_process Mkt pf1 (Suc n) w -\n       prices Mkt y (Suc n) w * pf1 y (Suc n) w", "have \"... = (\\<Sum> x\\<in> (support_set pf1 - {y}).\n    (((prices Mkt) x (Suc n) w) * (pf1 x (Suc n) w))) + (prices Mkt y (Suc n) w)* (pf1 y (Suc n) w)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>support_set pf1.\n       prices Mkt x (Suc n) w * pf1 x (Suc n) w) =\n    (\\<Sum>x\\<in>support_set pf1 - {y}.\n       prices Mkt x (Suc n) w * pf1 x (Suc n) w) +\n    prices Mkt y (Suc n) w * pf1 y (Suc n) w", "proof (cases \"y\\<in> support_set pf1\")"], ["proof (state)\ngoal (2 subgoals):\n 1. y \\<in> support_set pf1 \\<Longrightarrow>\n    (\\<Sum>x\\<in>support_set pf1.\n       prices Mkt x (Suc n) w * pf1 x (Suc n) w) =\n    (\\<Sum>x\\<in>support_set pf1 - {y}.\n       prices Mkt x (Suc n) w * pf1 x (Suc n) w) +\n    prices Mkt y (Suc n) w * pf1 y (Suc n) w\n 2. y \\<notin> support_set pf1 \\<Longrightarrow>\n    (\\<Sum>x\\<in>support_set pf1.\n       prices Mkt x (Suc n) w * pf1 x (Suc n) w) =\n    (\\<Sum>x\\<in>support_set pf1 - {y}.\n       prices Mkt x (Suc n) w * pf1 x (Suc n) w) +\n    prices Mkt y (Suc n) w * pf1 y (Suc n) w", "case True"], ["proof (state)\nthis:\n  y \\<in> support_set pf1\n\ngoal (2 subgoals):\n 1. y \\<in> support_set pf1 \\<Longrightarrow>\n    (\\<Sum>x\\<in>support_set pf1.\n       prices Mkt x (Suc n) w * pf1 x (Suc n) w) =\n    (\\<Sum>x\\<in>support_set pf1 - {y}.\n       prices Mkt x (Suc n) w * pf1 x (Suc n) w) +\n    prices Mkt y (Suc n) w * pf1 y (Suc n) w\n 2. y \\<notin> support_set pf1 \\<Longrightarrow>\n    (\\<Sum>x\\<in>support_set pf1.\n       prices Mkt x (Suc n) w * pf1 x (Suc n) w) =\n    (\\<Sum>x\\<in>support_set pf1 - {y}.\n       prices Mkt x (Suc n) w * pf1 x (Suc n) w) +\n    prices Mkt y (Suc n) w * pf1 y (Suc n) w", "thus ?thesis"], ["proof (prove)\nusing this:\n  y \\<in> support_set pf1\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>support_set pf1.\n       prices Mkt x (Suc n) w * pf1 x (Suc n) w) =\n    (\\<Sum>x\\<in>support_set pf1 - {y}.\n       prices Mkt x (Suc n) w * pf1 x (Suc n) w) +\n    prices Mkt y (Suc n) w * pf1 y (Suc n) w", "by (simp add: fin sum_diff1)"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>support_set pf1. prices Mkt x (Suc n) w * pf1 x (Suc n) w) =\n  (\\<Sum>x\\<in>support_set pf1 - {y}.\n     prices Mkt x (Suc n) w * pf1 x (Suc n) w) +\n  prices Mkt y (Suc n) w * pf1 y (Suc n) w\n\ngoal (1 subgoal):\n 1. y \\<notin> support_set pf1 \\<Longrightarrow>\n    (\\<Sum>x\\<in>support_set pf1.\n       prices Mkt x (Suc n) w * pf1 x (Suc n) w) =\n    (\\<Sum>x\\<in>support_set pf1 - {y}.\n       prices Mkt x (Suc n) w * pf1 x (Suc n) w) +\n    prices Mkt y (Suc n) w * pf1 y (Suc n) w", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. y \\<notin> support_set pf1 \\<Longrightarrow>\n    (\\<Sum>x\\<in>support_set pf1.\n       prices Mkt x (Suc n) w * pf1 x (Suc n) w) =\n    (\\<Sum>x\\<in>support_set pf1 - {y}.\n       prices Mkt x (Suc n) w * pf1 x (Suc n) w) +\n    prices Mkt y (Suc n) w * pf1 y (Suc n) w", "case False"], ["proof (state)\nthis:\n  y \\<notin> support_set pf1\n\ngoal (1 subgoal):\n 1. y \\<notin> support_set pf1 \\<Longrightarrow>\n    (\\<Sum>x\\<in>support_set pf1.\n       prices Mkt x (Suc n) w * pf1 x (Suc n) w) =\n    (\\<Sum>x\\<in>support_set pf1 - {y}.\n       prices Mkt x (Suc n) w * pf1 x (Suc n) w) +\n    prices Mkt y (Suc n) w * pf1 y (Suc n) w", "hence \"pf1 y (Suc n) w = 0\""], ["proof (prove)\nusing this:\n  y \\<notin> support_set pf1\n\ngoal (1 subgoal):\n 1. pf1 y (Suc n) w = 0", "unfolding support_set_def"], ["proof (prove)\nusing this:\n  y \\<notin> {x. \\<exists>n w. pf1 x n w \\<noteq> 0}\n\ngoal (1 subgoal):\n 1. pf1 y (Suc n) w = 0", "by simp"], ["proof (state)\nthis:\n  pf1 y (Suc n) w = 0\n\ngoal (1 subgoal):\n 1. y \\<notin> support_set pf1 \\<Longrightarrow>\n    (\\<Sum>x\\<in>support_set pf1.\n       prices Mkt x (Suc n) w * pf1 x (Suc n) w) =\n    (\\<Sum>x\\<in>support_set pf1 - {y}.\n       prices Mkt x (Suc n) w * pf1 x (Suc n) w) +\n    prices Mkt y (Suc n) w * pf1 y (Suc n) w", "thus ?thesis"], ["proof (prove)\nusing this:\n  pf1 y (Suc n) w = 0\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>support_set pf1.\n       prices Mkt x (Suc n) w * pf1 x (Suc n) w) =\n    (\\<Sum>x\\<in>support_set pf1 - {y}.\n       prices Mkt x (Suc n) w * pf1 x (Suc n) w) +\n    prices Mkt y (Suc n) w * pf1 y (Suc n) w", "by (simp add: fin sum_diff1)"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>support_set pf1. prices Mkt x (Suc n) w * pf1 x (Suc n) w) =\n  (\\<Sum>x\\<in>support_set pf1 - {y}.\n     prices Mkt x (Suc n) w * pf1 x (Suc n) w) +\n  prices Mkt y (Suc n) w * pf1 y (Suc n) w\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>support_set pf1. prices Mkt x (Suc n) w * pf1 x (Suc n) w) =\n  (\\<Sum>x\\<in>support_set pf1 - {y}.\n     prices Mkt x (Suc n) w * pf1 x (Suc n) w) +\n  prices Mkt y (Suc n) w * pf1 y (Suc n) w\n\ngoal (1 subgoal):\n 1. \\<And>n w.\n       cls_val_process Mkt (qty_rem_comp pf1 y) (Suc n) w =\n       cls_val_process Mkt pf1 (Suc n) w -\n       prices Mkt y (Suc n) w * pf1 y (Suc n) w", "also"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>support_set pf1. prices Mkt x (Suc n) w * pf1 x (Suc n) w) =\n  (\\<Sum>x\\<in>support_set pf1 - {y}.\n     prices Mkt x (Suc n) w * pf1 x (Suc n) w) +\n  prices Mkt y (Suc n) w * pf1 y (Suc n) w\n\ngoal (1 subgoal):\n 1. \\<And>n w.\n       cls_val_process Mkt (qty_rem_comp pf1 y) (Suc n) w =\n       cls_val_process Mkt pf1 (Suc n) w -\n       prices Mkt y (Suc n) w * pf1 y (Suc n) w", "have \"... = (\\<Sum> x\\<in> (support_set pf1 - {y}).\n    ((prices Mkt) x (Suc n) w) * ((qty_rem_comp pf1 y) x (Suc n) w)) + (prices Mkt y (Suc n) w)* (pf1 y (Suc n) w)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>support_set pf1 - {y}.\n       prices Mkt x (Suc n) w * pf1 x (Suc n) w) +\n    prices Mkt y (Suc n) w * pf1 y (Suc n) w =\n    (\\<Sum>x\\<in>support_set pf1 - {y}.\n       prices Mkt x (Suc n) w * qty_rem_comp pf1 y x (Suc n) w) +\n    prices Mkt y (Suc n) w * pf1 y (Suc n) w", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>support_set pf1 - {y}.\n       prices Mkt x (Suc n) w * pf1 x (Suc n) w) +\n    prices Mkt y (Suc n) w * pf1 y (Suc n) w =\n    (\\<Sum>x\\<in>support_set pf1 - {y}.\n       prices Mkt x (Suc n) w * qty_rem_comp pf1 y x (Suc n) w) +\n    prices Mkt y (Suc n) w * pf1 y (Suc n) w", "have \"(\\<Sum> x\\<in> (support_set pf1 - {y}). (((prices Mkt) x (Suc n) w) * (pf1 x (Suc n) w))) =\n      (\\<Sum> x\\<in> (support_set pf1 - {y}). ((prices Mkt) x (Suc n) w) * ((qty_rem_comp pf1 y) x (Suc n) w))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>support_set pf1 - {y}.\n       prices Mkt x (Suc n) w * pf1 x (Suc n) w) =\n    (\\<Sum>x\\<in>support_set pf1 - {y}.\n       prices Mkt x (Suc n) w * qty_rem_comp pf1 y x (Suc n) w)", "proof (rule sum.cong,simp)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> support_set pf1 - {y} \\<Longrightarrow>\n       prices Mkt x (Suc n) w * pf1 x (Suc n) w =\n       prices Mkt x (Suc n) w * qty_rem_comp pf1 y x (Suc n) w", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> support_set pf1 - {y} \\<Longrightarrow>\n       prices Mkt x (Suc n) w * pf1 x (Suc n) w =\n       prices Mkt x (Suc n) w * qty_rem_comp pf1 y x (Suc n) w", "assume \"x\\<in> support_set pf1 - {y}\""], ["proof (state)\nthis:\n  x \\<in> support_set pf1 - {y}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> support_set pf1 - {y} \\<Longrightarrow>\n       prices Mkt x (Suc n) w * pf1 x (Suc n) w =\n       prices Mkt x (Suc n) w * qty_rem_comp pf1 y x (Suc n) w", "show \"prices Mkt x (Suc n) w * pf1 x (Suc n) w = prices Mkt x (Suc n) w * qty_rem_comp pf1 y x (Suc n) w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prices Mkt x (Suc n) w * pf1 x (Suc n) w =\n    prices Mkt x (Suc n) w * qty_rem_comp pf1 y x (Suc n) w", "using remove_comp_values"], ["proof (prove)\nusing this:\n  ?x \\<noteq> ?y \\<Longrightarrow>\n  \\<forall>n w. ?pf1.0 ?x n w = qty_rem_comp ?pf1.0 ?y ?x n w\n\ngoal (1 subgoal):\n 1. prices Mkt x (Suc n) w * pf1 x (Suc n) w =\n    prices Mkt x (Suc n) w * qty_rem_comp pf1 y x (Suc n) w", "by (metis DiffD2 \\<open>x \\<in> support_set pf1 - {y}\\<close> singletonI)"], ["proof (state)\nthis:\n  prices Mkt x (Suc n) w * pf1 x (Suc n) w =\n  prices Mkt x (Suc n) w * qty_rem_comp pf1 y x (Suc n) w\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>support_set pf1 - {y}.\n     prices Mkt x (Suc n) w * pf1 x (Suc n) w) =\n  (\\<Sum>x\\<in>support_set pf1 - {y}.\n     prices Mkt x (Suc n) w * qty_rem_comp pf1 y x (Suc n) w)\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>support_set pf1 - {y}.\n       prices Mkt x (Suc n) w * pf1 x (Suc n) w) +\n    prices Mkt y (Suc n) w * pf1 y (Suc n) w =\n    (\\<Sum>x\\<in>support_set pf1 - {y}.\n       prices Mkt x (Suc n) w * qty_rem_comp pf1 y x (Suc n) w) +\n    prices Mkt y (Suc n) w * pf1 y (Suc n) w", "thus ?thesis"], ["proof (prove)\nusing this:\n  (\\<Sum>x\\<in>support_set pf1 - {y}.\n     prices Mkt x (Suc n) w * pf1 x (Suc n) w) =\n  (\\<Sum>x\\<in>support_set pf1 - {y}.\n     prices Mkt x (Suc n) w * qty_rem_comp pf1 y x (Suc n) w)\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>support_set pf1 - {y}.\n       prices Mkt x (Suc n) w * pf1 x (Suc n) w) +\n    prices Mkt y (Suc n) w * pf1 y (Suc n) w =\n    (\\<Sum>x\\<in>support_set pf1 - {y}.\n       prices Mkt x (Suc n) w * qty_rem_comp pf1 y x (Suc n) w) +\n    prices Mkt y (Suc n) w * pf1 y (Suc n) w", "by simp"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>support_set pf1 - {y}.\n     prices Mkt x (Suc n) w * pf1 x (Suc n) w) +\n  prices Mkt y (Suc n) w * pf1 y (Suc n) w =\n  (\\<Sum>x\\<in>support_set pf1 - {y}.\n     prices Mkt x (Suc n) w * qty_rem_comp pf1 y x (Suc n) w) +\n  prices Mkt y (Suc n) w * pf1 y (Suc n) w\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>support_set pf1 - {y}.\n     prices Mkt x (Suc n) w * pf1 x (Suc n) w) +\n  prices Mkt y (Suc n) w * pf1 y (Suc n) w =\n  (\\<Sum>x\\<in>support_set pf1 - {y}.\n     prices Mkt x (Suc n) w * qty_rem_comp pf1 y x (Suc n) w) +\n  prices Mkt y (Suc n) w * pf1 y (Suc n) w\n\ngoal (1 subgoal):\n 1. \\<And>n w.\n       cls_val_process Mkt (qty_rem_comp pf1 y) (Suc n) w =\n       cls_val_process Mkt pf1 (Suc n) w -\n       prices Mkt y (Suc n) w * pf1 y (Suc n) w", "also"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>support_set pf1 - {y}.\n     prices Mkt x (Suc n) w * pf1 x (Suc n) w) +\n  prices Mkt y (Suc n) w * pf1 y (Suc n) w =\n  (\\<Sum>x\\<in>support_set pf1 - {y}.\n     prices Mkt x (Suc n) w * qty_rem_comp pf1 y x (Suc n) w) +\n  prices Mkt y (Suc n) w * pf1 y (Suc n) w\n\ngoal (1 subgoal):\n 1. \\<And>n w.\n       cls_val_process Mkt (qty_rem_comp pf1 y) (Suc n) w =\n       cls_val_process Mkt pf1 (Suc n) w -\n       prices Mkt y (Suc n) w * pf1 y (Suc n) w", "have \"... = (cls_val_process Mkt (qty_rem_comp pf1 y) (Suc n) w) + (prices Mkt y (Suc n) w)* (pf1 y (Suc n) w)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>support_set pf1 - {y}.\n       prices Mkt x (Suc n) w * qty_rem_comp pf1 y x (Suc n) w) +\n    prices Mkt y (Suc n) w * pf1 y (Suc n) w =\n    cls_val_process Mkt (qty_rem_comp pf1 y) (Suc n) w +\n    prices Mkt y (Suc n) w * pf1 y (Suc n) w", "using subset_cls_val_process[of \"support_set pf1 - {y}\" \"qty_rem_comp pf1 y\"] fin2"], ["proof (prove)\nusing this:\n  \\<lbrakk>finite (support_set pf1 - {y});\n   support_set (qty_rem_comp pf1 y)\n   \\<subseteq> support_set pf1 - {y}\\<rbrakk>\n  \\<Longrightarrow> \\<forall>n w.\n                       cls_val_process ?Mkt (qty_rem_comp pf1 y) (Suc n) w =\n                       (\\<Sum>x\\<in>support_set pf1 - {y}.\n                          prices ?Mkt x (Suc n) w *\n                          qty_rem_comp pf1 y x (Suc n) w)\n  finite (support_set pf1 - {y})\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>support_set pf1 - {y}.\n       prices Mkt x (Suc n) w * qty_rem_comp pf1 y x (Suc n) w) +\n    prices Mkt y (Suc n) w * pf1 y (Suc n) w =\n    cls_val_process Mkt (qty_rem_comp pf1 y) (Suc n) w +\n    prices Mkt y (Suc n) w * pf1 y (Suc n) w", "by (simp add: remove_comp_support_set)"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>support_set pf1 - {y}.\n     prices Mkt x (Suc n) w * qty_rem_comp pf1 y x (Suc n) w) +\n  prices Mkt y (Suc n) w * pf1 y (Suc n) w =\n  cls_val_process Mkt (qty_rem_comp pf1 y) (Suc n) w +\n  prices Mkt y (Suc n) w * pf1 y (Suc n) w\n\ngoal (1 subgoal):\n 1. \\<And>n w.\n       cls_val_process Mkt (qty_rem_comp pf1 y) (Suc n) w =\n       cls_val_process Mkt pf1 (Suc n) w -\n       prices Mkt y (Suc n) w * pf1 y (Suc n) w", "finally"], ["proof (chain)\npicking this:\n  cls_val_process Mkt pf1 (Suc n) w =\n  cls_val_process Mkt (qty_rem_comp pf1 y) (Suc n) w +\n  prices Mkt y (Suc n) w * pf1 y (Suc n) w", "have \"(cls_val_process Mkt pf1) (Suc n) w =\n    (cls_val_process Mkt (qty_rem_comp pf1 y) (Suc n) w) + (prices Mkt y (Suc n) w)* (pf1 y (Suc n) w)\""], ["proof (prove)\nusing this:\n  cls_val_process Mkt pf1 (Suc n) w =\n  cls_val_process Mkt (qty_rem_comp pf1 y) (Suc n) w +\n  prices Mkt y (Suc n) w * pf1 y (Suc n) w\n\ngoal (1 subgoal):\n 1. cls_val_process Mkt pf1 (Suc n) w =\n    cls_val_process Mkt (qty_rem_comp pf1 y) (Suc n) w +\n    prices Mkt y (Suc n) w * pf1 y (Suc n) w", "."], ["proof (state)\nthis:\n  cls_val_process Mkt pf1 (Suc n) w =\n  cls_val_process Mkt (qty_rem_comp pf1 y) (Suc n) w +\n  prices Mkt y (Suc n) w * pf1 y (Suc n) w\n\ngoal (1 subgoal):\n 1. \\<And>n w.\n       cls_val_process Mkt (qty_rem_comp pf1 y) (Suc n) w =\n       cls_val_process Mkt pf1 (Suc n) w -\n       prices Mkt y (Suc n) w * pf1 y (Suc n) w", "thus  \"cls_val_process Mkt (qty_rem_comp pf1 y) (Suc n) w =\n    ((cls_val_process Mkt pf1) (Suc n) w) - (prices Mkt y (Suc n) w)* (pf1 y (Suc n) w)\""], ["proof (prove)\nusing this:\n  cls_val_process Mkt pf1 (Suc n) w =\n  cls_val_process Mkt (qty_rem_comp pf1 y) (Suc n) w +\n  prices Mkt y (Suc n) w * pf1 y (Suc n) w\n\ngoal (1 subgoal):\n 1. cls_val_process Mkt (qty_rem_comp pf1 y) (Suc n) w =\n    cls_val_process Mkt pf1 (Suc n) w -\n    prices Mkt y (Suc n) w * pf1 y (Suc n) w", "by simp"], ["proof (state)\nthis:\n  cls_val_process Mkt (qty_rem_comp pf1 y) (Suc n) w =\n  cls_val_process Mkt pf1 (Suc n) w -\n  prices Mkt y (Suc n) w * pf1 y (Suc n) w\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma replace_comp_cls_val_process0:\n  assumes \"\\<forall>w. prices Mkt x 0 w = cls_val_process Mkt pf2 0 w\"\n  and \"portfolio pf1\"\n  and \"portfolio pf2\"\nshows \"\\<forall>w. cls_val_process Mkt (qty_replace_comp pf1 x pf2) 0 w = cls_val_process Mkt pf1 0 w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>w.\n       cls_val_process Mkt (qty_replace_comp pf1 x pf2) 0 w =\n       cls_val_process Mkt pf1 0 w", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>w.\n       cls_val_process Mkt (qty_replace_comp pf1 x pf2) 0 w =\n       cls_val_process Mkt pf1 0 w", "fix w"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>w.\n       cls_val_process Mkt (qty_replace_comp pf1 x pf2) 0 w =\n       cls_val_process Mkt pf1 0 w", "have \"cls_val_process Mkt (qty_replace_comp pf1 x pf2) 0 w = cls_val_process Mkt (qty_rem_comp pf1 x) 0 w +\n    cls_val_process Mkt (qty_mult_comp pf2 (pf1 x)) 0 w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cls_val_process Mkt (qty_replace_comp pf1 x pf2) 0 w =\n    cls_val_process Mkt (qty_rem_comp pf1 x) 0 w +\n    cls_val_process Mkt (qty_mult_comp pf2 (pf1 x)) 0 w", "unfolding qty_replace_comp_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. cls_val_process Mkt\n     (qty_sum (qty_rem_comp pf1 x) (qty_mult_comp pf2 (pf1 x))) 0 w =\n    cls_val_process Mkt (qty_rem_comp pf1 x) 0 w +\n    cls_val_process Mkt (qty_mult_comp pf2 (pf1 x)) 0 w", "using assms\n    sum_cls_val_process0[of \"qty_rem_comp pf1 x\" \"qty_mult_comp pf2 (pf1 x)\"]"], ["proof (prove)\nusing this:\n  \\<forall>w. prices Mkt x 0 w = cls_val_process Mkt pf2 0 w\n  portfolio pf1\n  portfolio pf2\n  \\<lbrakk>portfolio (qty_rem_comp pf1 x);\n   portfolio (qty_mult_comp pf2 (pf1 x))\\<rbrakk>\n  \\<Longrightarrow> \\<forall>w.\n                       cls_val_process ?Mkt\n                        (qty_sum (qty_rem_comp pf1 x)\n                          (qty_mult_comp pf2 (pf1 x)))\n                        0 w =\n                       cls_val_process ?Mkt (qty_rem_comp pf1 x) 0 w +\n                       cls_val_process ?Mkt (qty_mult_comp pf2 (pf1 x)) 0 w\n\ngoal (1 subgoal):\n 1. cls_val_process Mkt\n     (qty_sum (qty_rem_comp pf1 x) (qty_mult_comp pf2 (pf1 x))) 0 w =\n    cls_val_process Mkt (qty_rem_comp pf1 x) 0 w +\n    cls_val_process Mkt (qty_mult_comp pf2 (pf1 x)) 0 w", "by (simp add: mult_comp_portfolio remove_comp_portfolio)"], ["proof (state)\nthis:\n  cls_val_process Mkt (qty_replace_comp pf1 x pf2) 0 w =\n  cls_val_process Mkt (qty_rem_comp pf1 x) 0 w +\n  cls_val_process Mkt (qty_mult_comp pf2 (pf1 x)) 0 w\n\ngoal (1 subgoal):\n 1. \\<And>w.\n       cls_val_process Mkt (qty_replace_comp pf1 x pf2) 0 w =\n       cls_val_process Mkt pf1 0 w", "also"], ["proof (state)\nthis:\n  cls_val_process Mkt (qty_replace_comp pf1 x pf2) 0 w =\n  cls_val_process Mkt (qty_rem_comp pf1 x) 0 w +\n  cls_val_process Mkt (qty_mult_comp pf2 (pf1 x)) 0 w\n\ngoal (1 subgoal):\n 1. \\<And>w.\n       cls_val_process Mkt (qty_replace_comp pf1 x pf2) 0 w =\n       cls_val_process Mkt pf1 0 w", "have \"... = cls_val_process Mkt pf1 0 w - (prices Mkt x 0 w * pf1 x (Suc 0) w) +\n    cls_val_process Mkt pf2 0 w * pf1 x (Suc 0) w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cls_val_process Mkt (qty_rem_comp pf1 x) 0 w +\n    cls_val_process Mkt (qty_mult_comp pf2 (pf1 x)) 0 w =\n    cls_val_process Mkt pf1 0 w - prices Mkt x 0 w * pf1 x (Suc 0) w +\n    cls_val_process Mkt pf2 0 w * pf1 x (Suc 0) w", "by (simp add: assms(2) assms(3) mult_comp_cls_val_process0 remove_comp_cls_val_process0)"], ["proof (state)\nthis:\n  cls_val_process Mkt (qty_rem_comp pf1 x) 0 w +\n  cls_val_process Mkt (qty_mult_comp pf2 (pf1 x)) 0 w =\n  cls_val_process Mkt pf1 0 w - prices Mkt x 0 w * pf1 x (Suc 0) w +\n  cls_val_process Mkt pf2 0 w * pf1 x (Suc 0) w\n\ngoal (1 subgoal):\n 1. \\<And>w.\n       cls_val_process Mkt (qty_replace_comp pf1 x pf2) 0 w =\n       cls_val_process Mkt pf1 0 w", "also"], ["proof (state)\nthis:\n  cls_val_process Mkt (qty_rem_comp pf1 x) 0 w +\n  cls_val_process Mkt (qty_mult_comp pf2 (pf1 x)) 0 w =\n  cls_val_process Mkt pf1 0 w - prices Mkt x 0 w * pf1 x (Suc 0) w +\n  cls_val_process Mkt pf2 0 w * pf1 x (Suc 0) w\n\ngoal (1 subgoal):\n 1. \\<And>w.\n       cls_val_process Mkt (qty_replace_comp pf1 x pf2) 0 w =\n       cls_val_process Mkt pf1 0 w", "have \"... = cls_val_process Mkt pf1 0 w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cls_val_process Mkt pf1 0 w - prices Mkt x 0 w * pf1 x (Suc 0) w +\n    cls_val_process Mkt pf2 0 w * pf1 x (Suc 0) w =\n    cls_val_process Mkt pf1 0 w", "using assms"], ["proof (prove)\nusing this:\n  \\<forall>w. prices Mkt x 0 w = cls_val_process Mkt pf2 0 w\n  portfolio pf1\n  portfolio pf2\n\ngoal (1 subgoal):\n 1. cls_val_process Mkt pf1 0 w - prices Mkt x 0 w * pf1 x (Suc 0) w +\n    cls_val_process Mkt pf2 0 w * pf1 x (Suc 0) w =\n    cls_val_process Mkt pf1 0 w", "by simp"], ["proof (state)\nthis:\n  cls_val_process Mkt pf1 0 w - prices Mkt x 0 w * pf1 x (Suc 0) w +\n  cls_val_process Mkt pf2 0 w * pf1 x (Suc 0) w =\n  cls_val_process Mkt pf1 0 w\n\ngoal (1 subgoal):\n 1. \\<And>w.\n       cls_val_process Mkt (qty_replace_comp pf1 x pf2) 0 w =\n       cls_val_process Mkt pf1 0 w", "finally"], ["proof (chain)\npicking this:\n  cls_val_process Mkt (qty_replace_comp pf1 x pf2) 0 w =\n  cls_val_process Mkt pf1 0 w", "show \"cls_val_process Mkt (qty_replace_comp pf1 x pf2) 0 w = cls_val_process Mkt pf1 0 w\""], ["proof (prove)\nusing this:\n  cls_val_process Mkt (qty_replace_comp pf1 x pf2) 0 w =\n  cls_val_process Mkt pf1 0 w\n\ngoal (1 subgoal):\n 1. cls_val_process Mkt (qty_replace_comp pf1 x pf2) 0 w =\n    cls_val_process Mkt pf1 0 w", "."], ["proof (state)\nthis:\n  cls_val_process Mkt (qty_replace_comp pf1 x pf2) 0 w =\n  cls_val_process Mkt pf1 0 w\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma replace_comp_cls_val_process_Suc:\n  assumes \"\\<forall>n w. prices Mkt x (Suc n) w = cls_val_process Mkt pf2 (Suc n) w\"\n  and \"portfolio pf1\"\n  and \"portfolio pf2\"\n  shows \"\\<forall>n w. cls_val_process Mkt (qty_replace_comp pf1 x pf2) (Suc n) w = cls_val_process Mkt pf1 (Suc n) w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n w.\n       cls_val_process Mkt (qty_replace_comp pf1 x pf2) (Suc n) w =\n       cls_val_process Mkt pf1 (Suc n) w", "proof (intro allI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n w.\n       cls_val_process Mkt (qty_replace_comp pf1 x pf2) (Suc n) w =\n       cls_val_process Mkt pf1 (Suc n) w", "fix n w"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n w.\n       cls_val_process Mkt (qty_replace_comp pf1 x pf2) (Suc n) w =\n       cls_val_process Mkt pf1 (Suc n) w", "have \"cls_val_process Mkt (qty_replace_comp pf1 x pf2) (Suc n) w = cls_val_process Mkt (qty_rem_comp pf1 x) (Suc n) w +\n    cls_val_process Mkt (qty_mult_comp pf2 (pf1 x)) (Suc n) w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cls_val_process Mkt (qty_replace_comp pf1 x pf2) (Suc n) w =\n    cls_val_process Mkt (qty_rem_comp pf1 x) (Suc n) w +\n    cls_val_process Mkt (qty_mult_comp pf2 (pf1 x)) (Suc n) w", "unfolding qty_replace_comp_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. cls_val_process Mkt\n     (qty_sum (qty_rem_comp pf1 x) (qty_mult_comp pf2 (pf1 x))) (Suc n) w =\n    cls_val_process Mkt (qty_rem_comp pf1 x) (Suc n) w +\n    cls_val_process Mkt (qty_mult_comp pf2 (pf1 x)) (Suc n) w", "using assms\n    sum_cls_val_process_Suc[of \"qty_rem_comp pf1 x\" \"qty_mult_comp pf2 (pf1 x)\"]"], ["proof (prove)\nusing this:\n  \\<forall>n w. prices Mkt x (Suc n) w = cls_val_process Mkt pf2 (Suc n) w\n  portfolio pf1\n  portfolio pf2\n  \\<lbrakk>portfolio (qty_rem_comp pf1 x);\n   portfolio (qty_mult_comp pf2 (pf1 x))\\<rbrakk>\n  \\<Longrightarrow> \\<forall>n w.\n                       cls_val_process ?Mkt\n                        (qty_sum (qty_rem_comp pf1 x)\n                          (qty_mult_comp pf2 (pf1 x)))\n                        (Suc n) w =\n                       cls_val_process ?Mkt (qty_rem_comp pf1 x) (Suc n) w +\n                       cls_val_process ?Mkt (qty_mult_comp pf2 (pf1 x))\n                        (Suc n) w\n\ngoal (1 subgoal):\n 1. cls_val_process Mkt\n     (qty_sum (qty_rem_comp pf1 x) (qty_mult_comp pf2 (pf1 x))) (Suc n) w =\n    cls_val_process Mkt (qty_rem_comp pf1 x) (Suc n) w +\n    cls_val_process Mkt (qty_mult_comp pf2 (pf1 x)) (Suc n) w", "by (simp add: mult_comp_portfolio remove_comp_portfolio)"], ["proof (state)\nthis:\n  cls_val_process Mkt (qty_replace_comp pf1 x pf2) (Suc n) w =\n  cls_val_process Mkt (qty_rem_comp pf1 x) (Suc n) w +\n  cls_val_process Mkt (qty_mult_comp pf2 (pf1 x)) (Suc n) w\n\ngoal (1 subgoal):\n 1. \\<And>n w.\n       cls_val_process Mkt (qty_replace_comp pf1 x pf2) (Suc n) w =\n       cls_val_process Mkt pf1 (Suc n) w", "also"], ["proof (state)\nthis:\n  cls_val_process Mkt (qty_replace_comp pf1 x pf2) (Suc n) w =\n  cls_val_process Mkt (qty_rem_comp pf1 x) (Suc n) w +\n  cls_val_process Mkt (qty_mult_comp pf2 (pf1 x)) (Suc n) w\n\ngoal (1 subgoal):\n 1. \\<And>n w.\n       cls_val_process Mkt (qty_replace_comp pf1 x pf2) (Suc n) w =\n       cls_val_process Mkt pf1 (Suc n) w", "have \"... = cls_val_process Mkt pf1 (Suc n) w - (prices Mkt x (Suc n) w * pf1 x (Suc n) w) +\n    cls_val_process Mkt pf2 (Suc n) w * pf1 x (Suc n) w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cls_val_process Mkt (qty_rem_comp pf1 x) (Suc n) w +\n    cls_val_process Mkt (qty_mult_comp pf2 (pf1 x)) (Suc n) w =\n    cls_val_process Mkt pf1 (Suc n) w -\n    prices Mkt x (Suc n) w * pf1 x (Suc n) w +\n    cls_val_process Mkt pf2 (Suc n) w * pf1 x (Suc n) w", "by (simp add: assms(2) assms(3) mult_comp_cls_val_process_Suc remove_comp_cls_val_process_Suc)"], ["proof (state)\nthis:\n  cls_val_process Mkt (qty_rem_comp pf1 x) (Suc n) w +\n  cls_val_process Mkt (qty_mult_comp pf2 (pf1 x)) (Suc n) w =\n  cls_val_process Mkt pf1 (Suc n) w -\n  prices Mkt x (Suc n) w * pf1 x (Suc n) w +\n  cls_val_process Mkt pf2 (Suc n) w * pf1 x (Suc n) w\n\ngoal (1 subgoal):\n 1. \\<And>n w.\n       cls_val_process Mkt (qty_replace_comp pf1 x pf2) (Suc n) w =\n       cls_val_process Mkt pf1 (Suc n) w", "also"], ["proof (state)\nthis:\n  cls_val_process Mkt (qty_rem_comp pf1 x) (Suc n) w +\n  cls_val_process Mkt (qty_mult_comp pf2 (pf1 x)) (Suc n) w =\n  cls_val_process Mkt pf1 (Suc n) w -\n  prices Mkt x (Suc n) w * pf1 x (Suc n) w +\n  cls_val_process Mkt pf2 (Suc n) w * pf1 x (Suc n) w\n\ngoal (1 subgoal):\n 1. \\<And>n w.\n       cls_val_process Mkt (qty_replace_comp pf1 x pf2) (Suc n) w =\n       cls_val_process Mkt pf1 (Suc n) w", "have \"... = cls_val_process Mkt pf1 (Suc n) w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cls_val_process Mkt pf1 (Suc n) w -\n    prices Mkt x (Suc n) w * pf1 x (Suc n) w +\n    cls_val_process Mkt pf2 (Suc n) w * pf1 x (Suc n) w =\n    cls_val_process Mkt pf1 (Suc n) w", "using assms"], ["proof (prove)\nusing this:\n  \\<forall>n w. prices Mkt x (Suc n) w = cls_val_process Mkt pf2 (Suc n) w\n  portfolio pf1\n  portfolio pf2\n\ngoal (1 subgoal):\n 1. cls_val_process Mkt pf1 (Suc n) w -\n    prices Mkt x (Suc n) w * pf1 x (Suc n) w +\n    cls_val_process Mkt pf2 (Suc n) w * pf1 x (Suc n) w =\n    cls_val_process Mkt pf1 (Suc n) w", "by simp"], ["proof (state)\nthis:\n  cls_val_process Mkt pf1 (Suc n) w -\n  prices Mkt x (Suc n) w * pf1 x (Suc n) w +\n  cls_val_process Mkt pf2 (Suc n) w * pf1 x (Suc n) w =\n  cls_val_process Mkt pf1 (Suc n) w\n\ngoal (1 subgoal):\n 1. \\<And>n w.\n       cls_val_process Mkt (qty_replace_comp pf1 x pf2) (Suc n) w =\n       cls_val_process Mkt pf1 (Suc n) w", "finally"], ["proof (chain)\npicking this:\n  cls_val_process Mkt (qty_replace_comp pf1 x pf2) (Suc n) w =\n  cls_val_process Mkt pf1 (Suc n) w", "show \"cls_val_process Mkt (qty_replace_comp pf1 x pf2) (Suc n) w = cls_val_process Mkt pf1 (Suc n) w\""], ["proof (prove)\nusing this:\n  cls_val_process Mkt (qty_replace_comp pf1 x pf2) (Suc n) w =\n  cls_val_process Mkt pf1 (Suc n) w\n\ngoal (1 subgoal):\n 1. cls_val_process Mkt (qty_replace_comp pf1 x pf2) (Suc n) w =\n    cls_val_process Mkt pf1 (Suc n) w", "."], ["proof (state)\nthis:\n  cls_val_process Mkt (qty_replace_comp pf1 x pf2) (Suc n) w =\n  cls_val_process Mkt pf1 (Suc n) w\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma replace_comp_cls_val_process:\n  assumes \"\\<forall>n w. prices Mkt x n w = cls_val_process Mkt pf2 n w\"\n  and \"portfolio pf1\"\n  and \"portfolio pf2\"\n  shows \"\\<forall>n w. cls_val_process Mkt (qty_replace_comp pf1 x pf2) n w = cls_val_process Mkt pf1 n w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n w.\n       cls_val_process Mkt (qty_replace_comp pf1 x pf2) n w =\n       cls_val_process Mkt pf1 n w", "by (metis (no_types, lifting) assms replace_comp_cls_val_process0 replace_comp_cls_val_process_Suc up_cl_proc.elims)"], ["", "lemma qty_single_updated:\n  shows \"cls_val_process Mkt (qty_single asset qty) (Suc n) w =\n    prices Mkt asset (Suc n) w * qty (Suc n) w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cls_val_process Mkt (qty_single asset qty) (Suc n) w =\n    prices Mkt asset (Suc n) w * qty (Suc n) w", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. cls_val_process Mkt (qty_single asset qty) (Suc n) w =\n    prices Mkt asset (Suc n) w * qty (Suc n) w", "have \"cls_val_process Mkt (qty_single asset qty) (Suc n) w =\n    (sum (\\<lambda>x. ((prices Mkt) x (Suc n) w) * ((qty_single asset qty) x (Suc n) w)) {asset})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cls_val_process Mkt (qty_single asset qty) (Suc n) w =\n    (\\<Sum>x\\<in>{asset}.\n       prices Mkt x (Suc n) w * qty_single asset qty x (Suc n) w)", "proof (rule subset_cls_val_process')"], ["proof (state)\ngoal (2 subgoals):\n 1. finite {asset}\n 2. support_set (qty_single asset qty) \\<subseteq> {asset}", "show \"finite {asset}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite {asset}", "by simp"], ["proof (state)\nthis:\n  finite {asset}\n\ngoal (1 subgoal):\n 1. support_set (qty_single asset qty) \\<subseteq> {asset}", "show \"support_set (qty_single asset qty) \\<subseteq> {asset}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. support_set (qty_single asset qty) \\<subseteq> {asset}", "by (simp add: single_comp_support)"], ["proof (state)\nthis:\n  support_set (qty_single asset qty) \\<subseteq> {asset}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  cls_val_process Mkt (qty_single asset qty) (Suc n) w =\n  (\\<Sum>x\\<in>{asset}.\n     prices Mkt x (Suc n) w * qty_single asset qty x (Suc n) w)\n\ngoal (1 subgoal):\n 1. cls_val_process Mkt (qty_single asset qty) (Suc n) w =\n    prices Mkt asset (Suc n) w * qty (Suc n) w", "also"], ["proof (state)\nthis:\n  cls_val_process Mkt (qty_single asset qty) (Suc n) w =\n  (\\<Sum>x\\<in>{asset}.\n     prices Mkt x (Suc n) w * qty_single asset qty x (Suc n) w)\n\ngoal (1 subgoal):\n 1. cls_val_process Mkt (qty_single asset qty) (Suc n) w =\n    prices Mkt asset (Suc n) w * qty (Suc n) w", "have \"... = prices Mkt asset (Suc n) w * qty (Suc n) w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>{asset}.\n       prices Mkt x (Suc n) w * qty_single asset qty x (Suc n) w) =\n    prices Mkt asset (Suc n) w * qty (Suc n) w", "unfolding qty_single_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>{asset}.\n       prices Mkt x (Suc n) w * (qty_empty(asset := qty)) x (Suc n) w) =\n    prices Mkt asset (Suc n) w * qty (Suc n) w", "by simp"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>{asset}.\n     prices Mkt x (Suc n) w * qty_single asset qty x (Suc n) w) =\n  prices Mkt asset (Suc n) w * qty (Suc n) w\n\ngoal (1 subgoal):\n 1. cls_val_process Mkt (qty_single asset qty) (Suc n) w =\n    prices Mkt asset (Suc n) w * qty (Suc n) w", "finally"], ["proof (chain)\npicking this:\n  cls_val_process Mkt (qty_single asset qty) (Suc n) w =\n  prices Mkt asset (Suc n) w * qty (Suc n) w", "show ?thesis"], ["proof (prove)\nusing this:\n  cls_val_process Mkt (qty_single asset qty) (Suc n) w =\n  prices Mkt asset (Suc n) w * qty (Suc n) w\n\ngoal (1 subgoal):\n 1. cls_val_process Mkt (qty_single asset qty) (Suc n) w =\n    prices Mkt asset (Suc n) w * qty (Suc n) w", "."], ["proof (state)\nthis:\n  cls_val_process Mkt (qty_single asset qty) (Suc n) w =\n  prices Mkt asset (Suc n) w * qty (Suc n) w\n\ngoal:\nNo subgoals!", "qed"], ["", "paragraph \\<open>Self-financing\\<close>"], ["", "definition self_financing where\n  \"self_financing Mkt p \\<longleftrightarrow> (\\<forall>n. val_process Mkt p (Suc n) = cls_val_process Mkt p (Suc n))\""], ["", "lemma self_financingE:\n  assumes \"self_financing Mkt p\"\n  shows \"\\<forall>n. val_process Mkt p n = cls_val_process Mkt p n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n. val_process Mkt p n = cls_val_process Mkt p n", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n. val_process Mkt p n = cls_val_process Mkt p n", "fix n"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n. val_process Mkt p n = cls_val_process Mkt p n", "show \"val_process Mkt p n = cls_val_process Mkt p n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. val_process Mkt p n = cls_val_process Mkt p n", "proof (cases \"n = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow> val_process Mkt p n = cls_val_process Mkt p n\n 2. n \\<noteq> 0 \\<Longrightarrow>\n    val_process Mkt p n = cls_val_process Mkt p n", "case False"], ["proof (state)\nthis:\n  n \\<noteq> 0\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow> val_process Mkt p n = cls_val_process Mkt p n\n 2. n \\<noteq> 0 \\<Longrightarrow>\n    val_process Mkt p n = cls_val_process Mkt p n", "thus ?thesis"], ["proof (prove)\nusing this:\n  n \\<noteq> 0\n\ngoal (1 subgoal):\n 1. val_process Mkt p n = cls_val_process Mkt p n", "using assms"], ["proof (prove)\nusing this:\n  n \\<noteq> 0\n  self_financing Mkt p\n\ngoal (1 subgoal):\n 1. val_process Mkt p n = cls_val_process Mkt p n", "unfolding self_financing_def"], ["proof (prove)\nusing this:\n  n \\<noteq> 0\n  \\<forall>n. val_process Mkt p (Suc n) = cls_val_process Mkt p (Suc n)\n\ngoal (1 subgoal):\n 1. val_process Mkt p n = cls_val_process Mkt p n", "by (metis up_cl_proc.elims)"], ["proof (state)\nthis:\n  val_process Mkt p n = cls_val_process Mkt p n\n\ngoal (1 subgoal):\n 1. n = 0 \\<Longrightarrow> val_process Mkt p n = cls_val_process Mkt p n", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. n = 0 \\<Longrightarrow> val_process Mkt p n = cls_val_process Mkt p n", "case True"], ["proof (state)\nthis:\n  n = 0\n\ngoal (1 subgoal):\n 1. n = 0 \\<Longrightarrow> val_process Mkt p n = cls_val_process Mkt p n", "thus ?thesis"], ["proof (prove)\nusing this:\n  n = 0\n\ngoal (1 subgoal):\n 1. val_process Mkt p n = cls_val_process Mkt p n", "by (simp add: cls_val_process_def val_process_def)"], ["proof (state)\nthis:\n  val_process Mkt p n = cls_val_process Mkt p n\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  val_process Mkt p n = cls_val_process Mkt p n\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma static_portfolio_self_financing:\n  assumes \"\\<forall> x \\<in> support_set p. (\\<forall>w i. p x i w = p x (Suc i) w)\"\n  shows \"self_financing Mkt p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. self_financing Mkt p", "unfolding self_financing_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n. val_process Mkt p (Suc n) = cls_val_process Mkt p (Suc n)", "proof (intro allI impI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n. val_process Mkt p (Suc n) = cls_val_process Mkt p (Suc n)", "fix n"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n. val_process Mkt p (Suc n) = cls_val_process Mkt p (Suc n)", "show \"val_process Mkt p (Suc n) = cls_val_process Mkt p (Suc n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. val_process Mkt p (Suc n) = cls_val_process Mkt p (Suc n)", "proof (cases \"portfolio p\")"], ["proof (state)\ngoal (2 subgoals):\n 1. portfolio p \\<Longrightarrow>\n    val_process Mkt p (Suc n) = cls_val_process Mkt p (Suc n)\n 2. \\<not> portfolio p \\<Longrightarrow>\n    val_process Mkt p (Suc n) = cls_val_process Mkt p (Suc n)", "case False"], ["proof (state)\nthis:\n  \\<not> portfolio p\n\ngoal (2 subgoals):\n 1. portfolio p \\<Longrightarrow>\n    val_process Mkt p (Suc n) = cls_val_process Mkt p (Suc n)\n 2. \\<not> portfolio p \\<Longrightarrow>\n    val_process Mkt p (Suc n) = cls_val_process Mkt p (Suc n)", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<not> portfolio p\n\ngoal (1 subgoal):\n 1. val_process Mkt p (Suc n) = cls_val_process Mkt p (Suc n)", "unfolding val_process_def cls_val_process_def"], ["proof (prove)\nusing this:\n  \\<not> portfolio p\n\ngoal (1 subgoal):\n 1. (if \\<not> portfolio p then \\<lambda>n w. 0\n     else (\\<lambda>n w.\n              \\<Sum>x\\<in>support_set p. prices Mkt x n w * p x (Suc n) w))\n     (Suc n) =\n    (if \\<not> portfolio p then \\<lambda>n w. 0 else up_cl_proc Mkt p)\n     (Suc n)", "by simp"], ["proof (state)\nthis:\n  val_process Mkt p (Suc n) = cls_val_process Mkt p (Suc n)\n\ngoal (1 subgoal):\n 1. portfolio p \\<Longrightarrow>\n    val_process Mkt p (Suc n) = cls_val_process Mkt p (Suc n)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. portfolio p \\<Longrightarrow>\n    val_process Mkt p (Suc n) = cls_val_process Mkt p (Suc n)", "case True"], ["proof (state)\nthis:\n  portfolio p\n\ngoal (1 subgoal):\n 1. portfolio p \\<Longrightarrow>\n    val_process Mkt p (Suc n) = cls_val_process Mkt p (Suc n)", "have \"\\<forall>w. (\\<Sum>x\\<in> support_set p. prices Mkt x (Suc n) w * p x (Suc (Suc n)) w) =\n         cls_val_process Mkt p (Suc n) w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>w.\n       (\\<Sum>x\\<in>support_set p.\n          prices Mkt x (Suc n) w * p x (Suc (Suc n)) w) =\n       cls_val_process Mkt p (Suc n) w", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>w.\n       (\\<Sum>x\\<in>support_set p.\n          prices Mkt x (Suc n) w * p x (Suc (Suc n)) w) =\n       cls_val_process Mkt p (Suc n) w", "fix w"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>w.\n       (\\<Sum>x\\<in>support_set p.\n          prices Mkt x (Suc n) w * p x (Suc (Suc n)) w) =\n       cls_val_process Mkt p (Suc n) w", "show \"(\\<Sum>x\\<in> support_set p. prices Mkt x (Suc n) w * p x (Suc (Suc n)) w) =\n           cls_val_process Mkt p (Suc n) w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>support_set p.\n       prices Mkt x (Suc n) w * p x (Suc (Suc n)) w) =\n    cls_val_process Mkt p (Suc n) w", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>support_set p.\n       prices Mkt x (Suc n) w * p x (Suc (Suc n)) w) =\n    cls_val_process Mkt p (Suc n) w", "have \"(\\<Sum>x\\<in> support_set p. prices Mkt x (Suc n) w * p x (Suc (Suc n)) w) =\n            (\\<Sum>x\\<in> support_set p. prices Mkt x (Suc n) w * p x (Suc n) w)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>support_set p.\n       prices Mkt x (Suc n) w * p x (Suc (Suc n)) w) =\n    (\\<Sum>x\\<in>support_set p. prices Mkt x (Suc n) w * p x (Suc n) w)", "proof (rule sum.cong, simp)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> support_set p \\<Longrightarrow>\n       prices Mkt x (Suc n) w * p x (Suc (Suc n)) w =\n       prices Mkt x (Suc n) w * p x (Suc n) w", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> support_set p \\<Longrightarrow>\n       prices Mkt x (Suc n) w * p x (Suc (Suc n)) w =\n       prices Mkt x (Suc n) w * p x (Suc n) w", "assume \"x\\<in> support_set p\""], ["proof (state)\nthis:\n  x \\<in> support_set p\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> support_set p \\<Longrightarrow>\n       prices Mkt x (Suc n) w * p x (Suc (Suc n)) w =\n       prices Mkt x (Suc n) w * p x (Suc n) w", "hence \"p x (Suc n) w = p x (Suc (Suc n)) w\""], ["proof (prove)\nusing this:\n  x \\<in> support_set p\n\ngoal (1 subgoal):\n 1. p x (Suc n) w = p x (Suc (Suc n)) w", "using assms"], ["proof (prove)\nusing this:\n  x \\<in> support_set p\n  \\<forall>x\\<in>support_set p. \\<forall>w i. p x i w = p x (Suc i) w\n\ngoal (1 subgoal):\n 1. p x (Suc n) w = p x (Suc (Suc n)) w", "by blast"], ["proof (state)\nthis:\n  p x (Suc n) w = p x (Suc (Suc n)) w\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> support_set p \\<Longrightarrow>\n       prices Mkt x (Suc n) w * p x (Suc (Suc n)) w =\n       prices Mkt x (Suc n) w * p x (Suc n) w", "thus \"prices Mkt x (Suc n) w * p x (Suc (Suc n)) w = prices Mkt x (Suc n) w * p x (Suc n) w\""], ["proof (prove)\nusing this:\n  p x (Suc n) w = p x (Suc (Suc n)) w\n\ngoal (1 subgoal):\n 1. prices Mkt x (Suc n) w * p x (Suc (Suc n)) w =\n    prices Mkt x (Suc n) w * p x (Suc n) w", "by simp"], ["proof (state)\nthis:\n  prices Mkt x (Suc n) w * p x (Suc (Suc n)) w =\n  prices Mkt x (Suc n) w * p x (Suc n) w\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>support_set p.\n     prices Mkt x (Suc n) w * p x (Suc (Suc n)) w) =\n  (\\<Sum>x\\<in>support_set p. prices Mkt x (Suc n) w * p x (Suc n) w)\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>support_set p.\n       prices Mkt x (Suc n) w * p x (Suc (Suc n)) w) =\n    cls_val_process Mkt p (Suc n) w", "also"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>support_set p.\n     prices Mkt x (Suc n) w * p x (Suc (Suc n)) w) =\n  (\\<Sum>x\\<in>support_set p. prices Mkt x (Suc n) w * p x (Suc n) w)\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>support_set p.\n       prices Mkt x (Suc n) w * p x (Suc (Suc n)) w) =\n    cls_val_process Mkt p (Suc n) w", "have \"... = cls_val_process Mkt p (Suc n) w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>support_set p. prices Mkt x (Suc n) w * p x (Suc n) w) =\n    cls_val_process Mkt p (Suc n) w", "using up_cl_proc.simps(2)[of Mkt p n]"], ["proof (prove)\nusing this:\n  up_cl_proc Mkt p (Suc n) =\n  (\\<lambda>w.\n      \\<Sum>x\\<in>support_set p. prices Mkt x (Suc n) w * p x (Suc n) w)\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>support_set p. prices Mkt x (Suc n) w * p x (Suc n) w) =\n    cls_val_process Mkt p (Suc n) w", "by (metis True cls_val_process_def)"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>support_set p. prices Mkt x (Suc n) w * p x (Suc n) w) =\n  cls_val_process Mkt p (Suc n) w\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>support_set p.\n       prices Mkt x (Suc n) w * p x (Suc (Suc n)) w) =\n    cls_val_process Mkt p (Suc n) w", "finally"], ["proof (chain)\npicking this:\n  (\\<Sum>x\\<in>support_set p.\n     prices Mkt x (Suc n) w * p x (Suc (Suc n)) w) =\n  cls_val_process Mkt p (Suc n) w", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<Sum>x\\<in>support_set p.\n     prices Mkt x (Suc n) w * p x (Suc (Suc n)) w) =\n  cls_val_process Mkt p (Suc n) w\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>support_set p.\n       prices Mkt x (Suc n) w * p x (Suc (Suc n)) w) =\n    cls_val_process Mkt p (Suc n) w", "."], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>support_set p.\n     prices Mkt x (Suc n) w * p x (Suc (Suc n)) w) =\n  cls_val_process Mkt p (Suc n) w\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>support_set p.\n     prices Mkt x (Suc n) w * p x (Suc (Suc n)) w) =\n  cls_val_process Mkt p (Suc n) w\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>w.\n     (\\<Sum>x\\<in>support_set p.\n        prices Mkt x (Suc n) w * p x (Suc (Suc n)) w) =\n     cls_val_process Mkt p (Suc n) w\n\ngoal (1 subgoal):\n 1. portfolio p \\<Longrightarrow>\n    val_process Mkt p (Suc n) = cls_val_process Mkt p (Suc n)", "moreover"], ["proof (state)\nthis:\n  \\<forall>w.\n     (\\<Sum>x\\<in>support_set p.\n        prices Mkt x (Suc n) w * p x (Suc (Suc n)) w) =\n     cls_val_process Mkt p (Suc n) w\n\ngoal (1 subgoal):\n 1. portfolio p \\<Longrightarrow>\n    val_process Mkt p (Suc n) = cls_val_process Mkt p (Suc n)", "have \"\\<forall>w. val_process Mkt p (Suc n) w = (\\<Sum>x\\<in> support_set p. prices Mkt x (Suc n) w * p x (Suc (Suc n)) w)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>w.\n       val_process Mkt p (Suc n) w =\n       (\\<Sum>x\\<in>support_set p.\n          prices Mkt x (Suc n) w * p x (Suc (Suc n)) w)", "unfolding val_process_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>w.\n       (if \\<not> portfolio p then \\<lambda>n w. 0\n        else (\\<lambda>n w.\n                 \\<Sum>x\\<in>support_set p.\n                   prices Mkt x n w * p x (Suc n) w))\n        (Suc n) w =\n       (\\<Sum>x\\<in>support_set p.\n          prices Mkt x (Suc n) w * p x (Suc (Suc n)) w)", "using True"], ["proof (prove)\nusing this:\n  portfolio p\n\ngoal (1 subgoal):\n 1. \\<forall>w.\n       (if \\<not> portfolio p then \\<lambda>n w. 0\n        else (\\<lambda>n w.\n                 \\<Sum>x\\<in>support_set p.\n                   prices Mkt x n w * p x (Suc n) w))\n        (Suc n) w =\n       (\\<Sum>x\\<in>support_set p.\n          prices Mkt x (Suc n) w * p x (Suc (Suc n)) w)", "by simp"], ["proof (state)\nthis:\n  \\<forall>w.\n     val_process Mkt p (Suc n) w =\n     (\\<Sum>x\\<in>support_set p.\n        prices Mkt x (Suc n) w * p x (Suc (Suc n)) w)\n\ngoal (1 subgoal):\n 1. portfolio p \\<Longrightarrow>\n    val_process Mkt p (Suc n) = cls_val_process Mkt p (Suc n)", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>w.\n     (\\<Sum>x\\<in>support_set p.\n        prices Mkt x (Suc n) w * p x (Suc (Suc n)) w) =\n     cls_val_process Mkt p (Suc n) w\n  \\<forall>w.\n     val_process Mkt p (Suc n) w =\n     (\\<Sum>x\\<in>support_set p.\n        prices Mkt x (Suc n) w * p x (Suc (Suc n)) w)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>w.\n     (\\<Sum>x\\<in>support_set p.\n        prices Mkt x (Suc n) w * p x (Suc (Suc n)) w) =\n     cls_val_process Mkt p (Suc n) w\n  \\<forall>w.\n     val_process Mkt p (Suc n) w =\n     (\\<Sum>x\\<in>support_set p.\n        prices Mkt x (Suc n) w * p x (Suc (Suc n)) w)\n\ngoal (1 subgoal):\n 1. val_process Mkt p (Suc n) = cls_val_process Mkt p (Suc n)", "by auto"], ["proof (state)\nthis:\n  val_process Mkt p (Suc n) = cls_val_process Mkt p (Suc n)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  val_process Mkt p (Suc n) = cls_val_process Mkt p (Suc n)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma sum_self_financing:\n  assumes \"portfolio pf1\"\n  and \"portfolio pf2\"\n  and \"self_financing Mkt pf1\"\n  and \"self_financing Mkt pf2\"\nshows \"self_financing Mkt (qty_sum pf1 pf2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. self_financing Mkt (qty_sum pf1 pf2)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. self_financing Mkt (qty_sum pf1 pf2)", "have \"\\<forall> n w. val_process Mkt (qty_sum pf1 pf2) (Suc n) w =\n    cls_val_process Mkt (qty_sum pf1 pf2) (Suc n) w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n w.\n       val_process Mkt (qty_sum pf1 pf2) (Suc n) w =\n       cls_val_process Mkt (qty_sum pf1 pf2) (Suc n) w", "proof (intro allI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n w.\n       val_process Mkt (qty_sum pf1 pf2) (Suc n) w =\n       cls_val_process Mkt (qty_sum pf1 pf2) (Suc n) w", "fix n w"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n w.\n       val_process Mkt (qty_sum pf1 pf2) (Suc n) w =\n       cls_val_process Mkt (qty_sum pf1 pf2) (Suc n) w", "have \"val_process Mkt (qty_sum pf1 pf2) (Suc n) w = val_process Mkt pf1 (Suc n) w + val_process Mkt pf2 (Suc n) w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. val_process Mkt (qty_sum pf1 pf2) (Suc n) w =\n    val_process Mkt pf1 (Suc n) w + val_process Mkt pf2 (Suc n) w", "using assms"], ["proof (prove)\nusing this:\n  portfolio pf1\n  portfolio pf2\n  self_financing Mkt pf1\n  self_financing Mkt pf2\n\ngoal (1 subgoal):\n 1. val_process Mkt (qty_sum pf1 pf2) (Suc n) w =\n    val_process Mkt pf1 (Suc n) w + val_process Mkt pf2 (Suc n) w", "by (simp add:sum_val_process)"], ["proof (state)\nthis:\n  val_process Mkt (qty_sum pf1 pf2) (Suc n) w =\n  val_process Mkt pf1 (Suc n) w + val_process Mkt pf2 (Suc n) w\n\ngoal (1 subgoal):\n 1. \\<And>n w.\n       val_process Mkt (qty_sum pf1 pf2) (Suc n) w =\n       cls_val_process Mkt (qty_sum pf1 pf2) (Suc n) w", "also"], ["proof (state)\nthis:\n  val_process Mkt (qty_sum pf1 pf2) (Suc n) w =\n  val_process Mkt pf1 (Suc n) w + val_process Mkt pf2 (Suc n) w\n\ngoal (1 subgoal):\n 1. \\<And>n w.\n       val_process Mkt (qty_sum pf1 pf2) (Suc n) w =\n       cls_val_process Mkt (qty_sum pf1 pf2) (Suc n) w", "have \"... = cls_val_process Mkt pf1 (Suc n) w + val_process Mkt pf2 (Suc n) w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. val_process Mkt pf1 (Suc n) w + val_process Mkt pf2 (Suc n) w =\n    cls_val_process Mkt pf1 (Suc n) w + val_process Mkt pf2 (Suc n) w", "using assms"], ["proof (prove)\nusing this:\n  portfolio pf1\n  portfolio pf2\n  self_financing Mkt pf1\n  self_financing Mkt pf2\n\ngoal (1 subgoal):\n 1. val_process Mkt pf1 (Suc n) w + val_process Mkt pf2 (Suc n) w =\n    cls_val_process Mkt pf1 (Suc n) w + val_process Mkt pf2 (Suc n) w", "unfolding self_financing_def"], ["proof (prove)\nusing this:\n  portfolio pf1\n  portfolio pf2\n  \\<forall>n. val_process Mkt pf1 (Suc n) = cls_val_process Mkt pf1 (Suc n)\n  \\<forall>n. val_process Mkt pf2 (Suc n) = cls_val_process Mkt pf2 (Suc n)\n\ngoal (1 subgoal):\n 1. val_process Mkt pf1 (Suc n) w + val_process Mkt pf2 (Suc n) w =\n    cls_val_process Mkt pf1 (Suc n) w + val_process Mkt pf2 (Suc n) w", "by simp"], ["proof (state)\nthis:\n  val_process Mkt pf1 (Suc n) w + val_process Mkt pf2 (Suc n) w =\n  cls_val_process Mkt pf1 (Suc n) w + val_process Mkt pf2 (Suc n) w\n\ngoal (1 subgoal):\n 1. \\<And>n w.\n       val_process Mkt (qty_sum pf1 pf2) (Suc n) w =\n       cls_val_process Mkt (qty_sum pf1 pf2) (Suc n) w", "also"], ["proof (state)\nthis:\n  val_process Mkt pf1 (Suc n) w + val_process Mkt pf2 (Suc n) w =\n  cls_val_process Mkt pf1 (Suc n) w + val_process Mkt pf2 (Suc n) w\n\ngoal (1 subgoal):\n 1. \\<And>n w.\n       val_process Mkt (qty_sum pf1 pf2) (Suc n) w =\n       cls_val_process Mkt (qty_sum pf1 pf2) (Suc n) w", "have \"... = cls_val_process Mkt pf1 (Suc n) w + cls_val_process Mkt pf2 (Suc n) w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cls_val_process Mkt pf1 (Suc n) w + val_process Mkt pf2 (Suc n) w =\n    cls_val_process Mkt pf1 (Suc n) w + cls_val_process Mkt pf2 (Suc n) w", "using assms"], ["proof (prove)\nusing this:\n  portfolio pf1\n  portfolio pf2\n  self_financing Mkt pf1\n  self_financing Mkt pf2\n\ngoal (1 subgoal):\n 1. cls_val_process Mkt pf1 (Suc n) w + val_process Mkt pf2 (Suc n) w =\n    cls_val_process Mkt pf1 (Suc n) w + cls_val_process Mkt pf2 (Suc n) w", "unfolding self_financing_def"], ["proof (prove)\nusing this:\n  portfolio pf1\n  portfolio pf2\n  \\<forall>n. val_process Mkt pf1 (Suc n) = cls_val_process Mkt pf1 (Suc n)\n  \\<forall>n. val_process Mkt pf2 (Suc n) = cls_val_process Mkt pf2 (Suc n)\n\ngoal (1 subgoal):\n 1. cls_val_process Mkt pf1 (Suc n) w + val_process Mkt pf2 (Suc n) w =\n    cls_val_process Mkt pf1 (Suc n) w + cls_val_process Mkt pf2 (Suc n) w", "by simp"], ["proof (state)\nthis:\n  cls_val_process Mkt pf1 (Suc n) w + val_process Mkt pf2 (Suc n) w =\n  cls_val_process Mkt pf1 (Suc n) w + cls_val_process Mkt pf2 (Suc n) w\n\ngoal (1 subgoal):\n 1. \\<And>n w.\n       val_process Mkt (qty_sum pf1 pf2) (Suc n) w =\n       cls_val_process Mkt (qty_sum pf1 pf2) (Suc n) w", "also"], ["proof (state)\nthis:\n  cls_val_process Mkt pf1 (Suc n) w + val_process Mkt pf2 (Suc n) w =\n  cls_val_process Mkt pf1 (Suc n) w + cls_val_process Mkt pf2 (Suc n) w\n\ngoal (1 subgoal):\n 1. \\<And>n w.\n       val_process Mkt (qty_sum pf1 pf2) (Suc n) w =\n       cls_val_process Mkt (qty_sum pf1 pf2) (Suc n) w", "have \"... = cls_val_process Mkt (qty_sum pf1 pf2) (Suc n) w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cls_val_process Mkt pf1 (Suc n) w + cls_val_process Mkt pf2 (Suc n) w =\n    cls_val_process Mkt (qty_sum pf1 pf2) (Suc n) w", "using assms"], ["proof (prove)\nusing this:\n  portfolio pf1\n  portfolio pf2\n  self_financing Mkt pf1\n  self_financing Mkt pf2\n\ngoal (1 subgoal):\n 1. cls_val_process Mkt pf1 (Suc n) w + cls_val_process Mkt pf2 (Suc n) w =\n    cls_val_process Mkt (qty_sum pf1 pf2) (Suc n) w", "by (simp add: sum_cls_val_process)"], ["proof (state)\nthis:\n  cls_val_process Mkt pf1 (Suc n) w + cls_val_process Mkt pf2 (Suc n) w =\n  cls_val_process Mkt (qty_sum pf1 pf2) (Suc n) w\n\ngoal (1 subgoal):\n 1. \\<And>n w.\n       val_process Mkt (qty_sum pf1 pf2) (Suc n) w =\n       cls_val_process Mkt (qty_sum pf1 pf2) (Suc n) w", "finally"], ["proof (chain)\npicking this:\n  val_process Mkt (qty_sum pf1 pf2) (Suc n) w =\n  cls_val_process Mkt (qty_sum pf1 pf2) (Suc n) w", "show \"val_process Mkt (qty_sum pf1 pf2) (Suc n) w =\n      cls_val_process Mkt (qty_sum pf1 pf2) (Suc n) w\""], ["proof (prove)\nusing this:\n  val_process Mkt (qty_sum pf1 pf2) (Suc n) w =\n  cls_val_process Mkt (qty_sum pf1 pf2) (Suc n) w\n\ngoal (1 subgoal):\n 1. val_process Mkt (qty_sum pf1 pf2) (Suc n) w =\n    cls_val_process Mkt (qty_sum pf1 pf2) (Suc n) w", "."], ["proof (state)\nthis:\n  val_process Mkt (qty_sum pf1 pf2) (Suc n) w =\n  cls_val_process Mkt (qty_sum pf1 pf2) (Suc n) w\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>n w.\n     val_process Mkt (qty_sum pf1 pf2) (Suc n) w =\n     cls_val_process Mkt (qty_sum pf1 pf2) (Suc n) w\n\ngoal (1 subgoal):\n 1. self_financing Mkt (qty_sum pf1 pf2)", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>n w.\n     val_process Mkt (qty_sum pf1 pf2) (Suc n) w =\n     cls_val_process Mkt (qty_sum pf1 pf2) (Suc n) w\n\ngoal (1 subgoal):\n 1. self_financing Mkt (qty_sum pf1 pf2)", "unfolding self_financing_def"], ["proof (prove)\nusing this:\n  \\<forall>n w.\n     val_process Mkt (qty_sum pf1 pf2) (Suc n) w =\n     cls_val_process Mkt (qty_sum pf1 pf2) (Suc n) w\n\ngoal (1 subgoal):\n 1. \\<forall>n.\n       val_process Mkt (qty_sum pf1 pf2) (Suc n) =\n       cls_val_process Mkt (qty_sum pf1 pf2) (Suc n)", "by auto"], ["proof (state)\nthis:\n  self_financing Mkt (qty_sum pf1 pf2)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma mult_time_constant_self_financing:\n  assumes \"portfolio pf1\"\n  and \"self_financing Mkt pf1\"\n  and \"\\<forall>n w. qty n w = qty (Suc n) w\"\nshows \"self_financing Mkt (qty_mult_comp pf1 qty)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. self_financing Mkt (qty_mult_comp pf1 qty)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. self_financing Mkt (qty_mult_comp pf1 qty)", "have \"\\<forall> n w. val_process Mkt (qty_mult_comp pf1 qty) (Suc n) w =\n    cls_val_process Mkt (qty_mult_comp pf1 qty) (Suc n) w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n w.\n       val_process Mkt (qty_mult_comp pf1 qty) (Suc n) w =\n       cls_val_process Mkt (qty_mult_comp pf1 qty) (Suc n) w", "proof (intro allI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n w.\n       val_process Mkt (qty_mult_comp pf1 qty) (Suc n) w =\n       cls_val_process Mkt (qty_mult_comp pf1 qty) (Suc n) w", "fix n w"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n w.\n       val_process Mkt (qty_mult_comp pf1 qty) (Suc n) w =\n       cls_val_process Mkt (qty_mult_comp pf1 qty) (Suc n) w", "have \"val_process Mkt (qty_mult_comp pf1 qty) (Suc n) w = val_process Mkt pf1 (Suc n) w * qty (Suc n) w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. val_process Mkt (qty_mult_comp pf1 qty) (Suc n) w =\n    val_process Mkt pf1 (Suc n) w * qty (Suc n) w", "using assms"], ["proof (prove)\nusing this:\n  portfolio pf1\n  self_financing Mkt pf1\n  \\<forall>n w. qty n w = qty (Suc n) w\n\ngoal (1 subgoal):\n 1. val_process Mkt (qty_mult_comp pf1 qty) (Suc n) w =\n    val_process Mkt pf1 (Suc n) w * qty (Suc n) w", "by (simp add:mult_comp_val_process)"], ["proof (state)\nthis:\n  val_process Mkt (qty_mult_comp pf1 qty) (Suc n) w =\n  val_process Mkt pf1 (Suc n) w * qty (Suc n) w\n\ngoal (1 subgoal):\n 1. \\<And>n w.\n       val_process Mkt (qty_mult_comp pf1 qty) (Suc n) w =\n       cls_val_process Mkt (qty_mult_comp pf1 qty) (Suc n) w", "also"], ["proof (state)\nthis:\n  val_process Mkt (qty_mult_comp pf1 qty) (Suc n) w =\n  val_process Mkt pf1 (Suc n) w * qty (Suc n) w\n\ngoal (1 subgoal):\n 1. \\<And>n w.\n       val_process Mkt (qty_mult_comp pf1 qty) (Suc n) w =\n       cls_val_process Mkt (qty_mult_comp pf1 qty) (Suc n) w", "have \"... = cls_val_process Mkt pf1 (Suc n) w * qty (Suc n) w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. val_process Mkt pf1 (Suc n) w * qty (Suc n) w =\n    cls_val_process Mkt pf1 (Suc n) w * qty (Suc n) w", "using assms"], ["proof (prove)\nusing this:\n  portfolio pf1\n  self_financing Mkt pf1\n  \\<forall>n w. qty n w = qty (Suc n) w\n\ngoal (1 subgoal):\n 1. val_process Mkt pf1 (Suc n) w * qty (Suc n) w =\n    cls_val_process Mkt pf1 (Suc n) w * qty (Suc n) w", "unfolding self_financing_def"], ["proof (prove)\nusing this:\n  portfolio pf1\n  \\<forall>n. val_process Mkt pf1 (Suc n) = cls_val_process Mkt pf1 (Suc n)\n  \\<forall>n w. qty n w = qty (Suc n) w\n\ngoal (1 subgoal):\n 1. val_process Mkt pf1 (Suc n) w * qty (Suc n) w =\n    cls_val_process Mkt pf1 (Suc n) w * qty (Suc n) w", "by simp"], ["proof (state)\nthis:\n  val_process Mkt pf1 (Suc n) w * qty (Suc n) w =\n  cls_val_process Mkt pf1 (Suc n) w * qty (Suc n) w\n\ngoal (1 subgoal):\n 1. \\<And>n w.\n       val_process Mkt (qty_mult_comp pf1 qty) (Suc n) w =\n       cls_val_process Mkt (qty_mult_comp pf1 qty) (Suc n) w", "also"], ["proof (state)\nthis:\n  val_process Mkt pf1 (Suc n) w * qty (Suc n) w =\n  cls_val_process Mkt pf1 (Suc n) w * qty (Suc n) w\n\ngoal (1 subgoal):\n 1. \\<And>n w.\n       val_process Mkt (qty_mult_comp pf1 qty) (Suc n) w =\n       cls_val_process Mkt (qty_mult_comp pf1 qty) (Suc n) w", "have \"... = cls_val_process Mkt (qty_mult_comp pf1 qty) (Suc n) w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cls_val_process Mkt pf1 (Suc n) w * qty (Suc n) w =\n    cls_val_process Mkt (qty_mult_comp pf1 qty) (Suc n) w", "using assms"], ["proof (prove)\nusing this:\n  portfolio pf1\n  self_financing Mkt pf1\n  \\<forall>n w. qty n w = qty (Suc n) w\n\ngoal (1 subgoal):\n 1. cls_val_process Mkt pf1 (Suc n) w * qty (Suc n) w =\n    cls_val_process Mkt (qty_mult_comp pf1 qty) (Suc n) w", "by (auto simp add: mult_comp_cls_val_process_Suc)"], ["proof (state)\nthis:\n  cls_val_process Mkt pf1 (Suc n) w * qty (Suc n) w =\n  cls_val_process Mkt (qty_mult_comp pf1 qty) (Suc n) w\n\ngoal (1 subgoal):\n 1. \\<And>n w.\n       val_process Mkt (qty_mult_comp pf1 qty) (Suc n) w =\n       cls_val_process Mkt (qty_mult_comp pf1 qty) (Suc n) w", "finally"], ["proof (chain)\npicking this:\n  val_process Mkt (qty_mult_comp pf1 qty) (Suc n) w =\n  cls_val_process Mkt (qty_mult_comp pf1 qty) (Suc n) w", "show \"val_process Mkt (qty_mult_comp pf1 qty) (Suc n) w =\n      cls_val_process Mkt (qty_mult_comp pf1 qty) (Suc n) w\""], ["proof (prove)\nusing this:\n  val_process Mkt (qty_mult_comp pf1 qty) (Suc n) w =\n  cls_val_process Mkt (qty_mult_comp pf1 qty) (Suc n) w\n\ngoal (1 subgoal):\n 1. val_process Mkt (qty_mult_comp pf1 qty) (Suc n) w =\n    cls_val_process Mkt (qty_mult_comp pf1 qty) (Suc n) w", "."], ["proof (state)\nthis:\n  val_process Mkt (qty_mult_comp pf1 qty) (Suc n) w =\n  cls_val_process Mkt (qty_mult_comp pf1 qty) (Suc n) w\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>n w.\n     val_process Mkt (qty_mult_comp pf1 qty) (Suc n) w =\n     cls_val_process Mkt (qty_mult_comp pf1 qty) (Suc n) w\n\ngoal (1 subgoal):\n 1. self_financing Mkt (qty_mult_comp pf1 qty)", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>n w.\n     val_process Mkt (qty_mult_comp pf1 qty) (Suc n) w =\n     cls_val_process Mkt (qty_mult_comp pf1 qty) (Suc n) w\n\ngoal (1 subgoal):\n 1. self_financing Mkt (qty_mult_comp pf1 qty)", "unfolding self_financing_def"], ["proof (prove)\nusing this:\n  \\<forall>n w.\n     val_process Mkt (qty_mult_comp pf1 qty) (Suc n) w =\n     cls_val_process Mkt (qty_mult_comp pf1 qty) (Suc n) w\n\ngoal (1 subgoal):\n 1. \\<forall>n.\n       val_process Mkt (qty_mult_comp pf1 qty) (Suc n) =\n       cls_val_process Mkt (qty_mult_comp pf1 qty) (Suc n)", "by auto"], ["proof (state)\nthis:\n  self_financing Mkt (qty_mult_comp pf1 qty)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma replace_comp_self_financing:\n  assumes \"\\<forall>n w. prices Mkt x n w = cls_val_process Mkt pf2 n w\"\n  and \"portfolio pf1\"\n  and \"portfolio pf2\"\n  and \"self_financing Mkt pf1\"\n  and \"self_financing Mkt pf2\"\nshows \"self_financing Mkt (qty_replace_comp pf1 x pf2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. self_financing Mkt (qty_replace_comp pf1 x pf2)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. self_financing Mkt (qty_replace_comp pf1 x pf2)", "have sfeq: \"\\<forall>n w. prices Mkt x n w = val_process Mkt pf2 n w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n w. prices Mkt x n w = val_process Mkt pf2 n w", "using assms"], ["proof (prove)\nusing this:\n  \\<forall>n w. prices Mkt x n w = cls_val_process Mkt pf2 n w\n  portfolio pf1\n  portfolio pf2\n  self_financing Mkt pf1\n  self_financing Mkt pf2\n\ngoal (1 subgoal):\n 1. \\<forall>n w. prices Mkt x n w = val_process Mkt pf2 n w", "by (simp add: self_financingE)"], ["proof (state)\nthis:\n  \\<forall>n w. prices Mkt x n w = val_process Mkt pf2 n w\n\ngoal (1 subgoal):\n 1. self_financing Mkt (qty_replace_comp pf1 x pf2)", "have \"\\<forall> n w. cls_val_process Mkt (qty_replace_comp pf1 x pf2) (Suc n) w =\n    val_process Mkt (qty_replace_comp pf1 x pf2) (Suc n) w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n w.\n       cls_val_process Mkt (qty_replace_comp pf1 x pf2) (Suc n) w =\n       val_process Mkt (qty_replace_comp pf1 x pf2) (Suc n) w", "proof (intro allI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n w.\n       cls_val_process Mkt (qty_replace_comp pf1 x pf2) (Suc n) w =\n       val_process Mkt (qty_replace_comp pf1 x pf2) (Suc n) w", "fix n w"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n w.\n       cls_val_process Mkt (qty_replace_comp pf1 x pf2) (Suc n) w =\n       val_process Mkt (qty_replace_comp pf1 x pf2) (Suc n) w", "have \"cls_val_process Mkt (qty_replace_comp pf1 x pf2) (Suc n) w = cls_val_process Mkt pf1 (Suc n) w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cls_val_process Mkt (qty_replace_comp pf1 x pf2) (Suc n) w =\n    cls_val_process Mkt pf1 (Suc n) w", "using assms"], ["proof (prove)\nusing this:\n  \\<forall>n w. prices Mkt x n w = cls_val_process Mkt pf2 n w\n  portfolio pf1\n  portfolio pf2\n  self_financing Mkt pf1\n  self_financing Mkt pf2\n\ngoal (1 subgoal):\n 1. cls_val_process Mkt (qty_replace_comp pf1 x pf2) (Suc n) w =\n    cls_val_process Mkt pf1 (Suc n) w", "by (simp add:replace_comp_cls_val_process)"], ["proof (state)\nthis:\n  cls_val_process Mkt (qty_replace_comp pf1 x pf2) (Suc n) w =\n  cls_val_process Mkt pf1 (Suc n) w\n\ngoal (1 subgoal):\n 1. \\<And>n w.\n       cls_val_process Mkt (qty_replace_comp pf1 x pf2) (Suc n) w =\n       val_process Mkt (qty_replace_comp pf1 x pf2) (Suc n) w", "also"], ["proof (state)\nthis:\n  cls_val_process Mkt (qty_replace_comp pf1 x pf2) (Suc n) w =\n  cls_val_process Mkt pf1 (Suc n) w\n\ngoal (1 subgoal):\n 1. \\<And>n w.\n       cls_val_process Mkt (qty_replace_comp pf1 x pf2) (Suc n) w =\n       val_process Mkt (qty_replace_comp pf1 x pf2) (Suc n) w", "have \"... = val_process Mkt pf1 (Suc n) w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cls_val_process Mkt pf1 (Suc n) w = val_process Mkt pf1 (Suc n) w", "using assms"], ["proof (prove)\nusing this:\n  \\<forall>n w. prices Mkt x n w = cls_val_process Mkt pf2 n w\n  portfolio pf1\n  portfolio pf2\n  self_financing Mkt pf1\n  self_financing Mkt pf2\n\ngoal (1 subgoal):\n 1. cls_val_process Mkt pf1 (Suc n) w = val_process Mkt pf1 (Suc n) w", "unfolding self_financing_def"], ["proof (prove)\nusing this:\n  \\<forall>n w. prices Mkt x n w = cls_val_process Mkt pf2 n w\n  portfolio pf1\n  portfolio pf2\n  \\<forall>n. val_process Mkt pf1 (Suc n) = cls_val_process Mkt pf1 (Suc n)\n  \\<forall>n. val_process Mkt pf2 (Suc n) = cls_val_process Mkt pf2 (Suc n)\n\ngoal (1 subgoal):\n 1. cls_val_process Mkt pf1 (Suc n) w = val_process Mkt pf1 (Suc n) w", "by simp"], ["proof (state)\nthis:\n  cls_val_process Mkt pf1 (Suc n) w = val_process Mkt pf1 (Suc n) w\n\ngoal (1 subgoal):\n 1. \\<And>n w.\n       cls_val_process Mkt (qty_replace_comp pf1 x pf2) (Suc n) w =\n       val_process Mkt (qty_replace_comp pf1 x pf2) (Suc n) w", "also"], ["proof (state)\nthis:\n  cls_val_process Mkt pf1 (Suc n) w = val_process Mkt pf1 (Suc n) w\n\ngoal (1 subgoal):\n 1. \\<And>n w.\n       cls_val_process Mkt (qty_replace_comp pf1 x pf2) (Suc n) w =\n       val_process Mkt (qty_replace_comp pf1 x pf2) (Suc n) w", "have \"... = val_process Mkt (qty_replace_comp pf1 x pf2) (Suc n) w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. val_process Mkt pf1 (Suc n) w =\n    val_process Mkt (qty_replace_comp pf1 x pf2) (Suc n) w", "using assms sfeq"], ["proof (prove)\nusing this:\n  \\<forall>n w. prices Mkt x n w = cls_val_process Mkt pf2 n w\n  portfolio pf1\n  portfolio pf2\n  self_financing Mkt pf1\n  self_financing Mkt pf2\n  \\<forall>n w. prices Mkt x n w = val_process Mkt pf2 n w\n\ngoal (1 subgoal):\n 1. val_process Mkt pf1 (Suc n) w =\n    val_process Mkt (qty_replace_comp pf1 x pf2) (Suc n) w", "by (simp add: replace_comp_val_process self_financing_def)"], ["proof (state)\nthis:\n  val_process Mkt pf1 (Suc n) w =\n  val_process Mkt (qty_replace_comp pf1 x pf2) (Suc n) w\n\ngoal (1 subgoal):\n 1. \\<And>n w.\n       cls_val_process Mkt (qty_replace_comp pf1 x pf2) (Suc n) w =\n       val_process Mkt (qty_replace_comp pf1 x pf2) (Suc n) w", "finally"], ["proof (chain)\npicking this:\n  cls_val_process Mkt (qty_replace_comp pf1 x pf2) (Suc n) w =\n  val_process Mkt (qty_replace_comp pf1 x pf2) (Suc n) w", "show \"cls_val_process Mkt (qty_replace_comp pf1 x pf2) (Suc n) w =\n      val_process Mkt (qty_replace_comp pf1 x pf2) (Suc n) w\""], ["proof (prove)\nusing this:\n  cls_val_process Mkt (qty_replace_comp pf1 x pf2) (Suc n) w =\n  val_process Mkt (qty_replace_comp pf1 x pf2) (Suc n) w\n\ngoal (1 subgoal):\n 1. cls_val_process Mkt (qty_replace_comp pf1 x pf2) (Suc n) w =\n    val_process Mkt (qty_replace_comp pf1 x pf2) (Suc n) w", "."], ["proof (state)\nthis:\n  cls_val_process Mkt (qty_replace_comp pf1 x pf2) (Suc n) w =\n  val_process Mkt (qty_replace_comp pf1 x pf2) (Suc n) w\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>n w.\n     cls_val_process Mkt (qty_replace_comp pf1 x pf2) (Suc n) w =\n     val_process Mkt (qty_replace_comp pf1 x pf2) (Suc n) w\n\ngoal (1 subgoal):\n 1. self_financing Mkt (qty_replace_comp pf1 x pf2)", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>n w.\n     cls_val_process Mkt (qty_replace_comp pf1 x pf2) (Suc n) w =\n     val_process Mkt (qty_replace_comp pf1 x pf2) (Suc n) w\n\ngoal (1 subgoal):\n 1. self_financing Mkt (qty_replace_comp pf1 x pf2)", "unfolding self_financing_def"], ["proof (prove)\nusing this:\n  \\<forall>n w.\n     cls_val_process Mkt (qty_replace_comp pf1 x pf2) (Suc n) w =\n     val_process Mkt (qty_replace_comp pf1 x pf2) (Suc n) w\n\ngoal (1 subgoal):\n 1. \\<forall>n.\n       val_process Mkt (qty_replace_comp pf1 x pf2) (Suc n) =\n       cls_val_process Mkt (qty_replace_comp pf1 x pf2) (Suc n)", "by auto"], ["proof (state)\nthis:\n  self_financing Mkt (qty_replace_comp pf1 x pf2)\n\ngoal:\nNo subgoals!", "qed"], ["", "paragraph \\<open>Make a portfolio self-financing\\<close>"], ["", "fun  remaining_qty where\n  init: \"remaining_qty Mkt v pf asset 0 = (\\<lambda>w. 0)\" |\n  first:  \"remaining_qty Mkt v pf asset (Suc 0) = (\\<lambda>w. (v - val_process Mkt pf 0 w)/(prices Mkt asset 0 w))\" |\n  step: \"remaining_qty Mkt v pf asset (Suc (Suc n)) = (\\<lambda>w. (remaining_qty Mkt v pf asset (Suc n) w) +\n    (cls_val_process Mkt pf (Suc n) w - val_process Mkt pf (Suc n) w)/(prices Mkt asset (Suc n) w))\""], ["", "lemma (in disc_equity_market) remaining_qty_predict':\n  assumes \"borel_adapt_stoch_proc F (prices Mkt asset)\"\n  and \"trading_strategy pf\"\nand \"support_adapt Mkt pf\"\nshows \"remaining_qty Mkt v pf asset (Suc n) \\<in> borel_measurable (F n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. remaining_qty Mkt v pf asset (Suc n) \\<in> borel_measurable (F n)", "proof (induct n)"], ["proof (state)\ngoal (2 subgoals):\n 1. remaining_qty Mkt v pf asset (Suc 0) \\<in> borel_measurable (F 0)\n 2. \\<And>n.\n       remaining_qty Mkt v pf asset (Suc n)\n       \\<in> borel_measurable (F n) \\<Longrightarrow>\n       remaining_qty Mkt v pf asset (Suc (Suc n))\n       \\<in> borel_measurable (F (Suc n))", "case 0"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. remaining_qty Mkt v pf asset (Suc 0) \\<in> borel_measurable (F 0)\n 2. \\<And>n.\n       remaining_qty Mkt v pf asset (Suc n)\n       \\<in> borel_measurable (F n) \\<Longrightarrow>\n       remaining_qty Mkt v pf asset (Suc (Suc n))\n       \\<in> borel_measurable (F (Suc n))", "have \"(\\<lambda>w. (v - val_process Mkt pf 0 w)/(prices Mkt asset 0 w))\\<in> borel_measurable (F 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>w. (v - val_process Mkt pf 0 w) / prices Mkt asset 0 w)\n    \\<in> borel_measurable (F 0)", "proof (rule borel_measurable_divide)"], ["proof (state)\ngoal (2 subgoals):\n 1. (\\<lambda>x. v - val_process Mkt pf 0 x) \\<in> borel_measurable (F 0)\n 2. prices Mkt asset 0 \\<in> borel_measurable (F 0)", "have \"val_process Mkt pf 0 \\<in> borel_measurable (F 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. val_process Mkt pf 0 \\<in> borel_measurable (F 0)", "using assms\n      ats_val_process_adapted"], ["proof (prove)\nusing this:\n  borel_adapt_stoch_proc F (prices Mkt asset)\n  trading_strategy pf\n  support_adapt Mkt pf\n  \\<lbrakk>trading_strategy ?p; support_adapt Mkt ?p\\<rbrakk>\n  \\<Longrightarrow> borel_adapt_stoch_proc F (val_process Mkt ?p)\n\ngoal (1 subgoal):\n 1. val_process Mkt pf 0 \\<in> borel_measurable (F 0)", "by (simp add:adapt_stoch_proc_def)"], ["proof (state)\nthis:\n  val_process Mkt pf 0 \\<in> borel_measurable (F 0)\n\ngoal (2 subgoals):\n 1. (\\<lambda>x. v - val_process Mkt pf 0 x) \\<in> borel_measurable (F 0)\n 2. prices Mkt asset 0 \\<in> borel_measurable (F 0)", "thus \"(\\<lambda>x. v - val_process Mkt pf 0 x) \\<in> borel_measurable (F 0)\""], ["proof (prove)\nusing this:\n  val_process Mkt pf 0 \\<in> borel_measurable (F 0)\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. v - val_process Mkt pf 0 x) \\<in> borel_measurable (F 0)", "by simp"], ["proof (state)\nthis:\n  (\\<lambda>x. v - val_process Mkt pf 0 x) \\<in> borel_measurable (F 0)\n\ngoal (1 subgoal):\n 1. prices Mkt asset 0 \\<in> borel_measurable (F 0)", "show \"prices Mkt asset 0 \\<in> borel_measurable (F 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prices Mkt asset 0 \\<in> borel_measurable (F 0)", "using assms"], ["proof (prove)\nusing this:\n  borel_adapt_stoch_proc F (prices Mkt asset)\n  trading_strategy pf\n  support_adapt Mkt pf\n\ngoal (1 subgoal):\n 1. prices Mkt asset 0 \\<in> borel_measurable (F 0)", "unfolding adapt_stoch_proc_def"], ["proof (prove)\nusing this:\n  \\<forall>t. prices Mkt asset t \\<in> borel_measurable (F t)\n  trading_strategy pf\n  support_adapt Mkt pf\n\ngoal (1 subgoal):\n 1. prices Mkt asset 0 \\<in> borel_measurable (F 0)", "by simp"], ["proof (state)\nthis:\n  prices Mkt asset 0 \\<in> borel_measurable (F 0)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<lambda>w. (v - val_process Mkt pf 0 w) / prices Mkt asset 0 w)\n  \\<in> borel_measurable (F 0)\n\ngoal (2 subgoals):\n 1. remaining_qty Mkt v pf asset (Suc 0) \\<in> borel_measurable (F 0)\n 2. \\<And>n.\n       remaining_qty Mkt v pf asset (Suc n)\n       \\<in> borel_measurable (F n) \\<Longrightarrow>\n       remaining_qty Mkt v pf asset (Suc (Suc n))\n       \\<in> borel_measurable (F (Suc n))", "thus ?case"], ["proof (prove)\nusing this:\n  (\\<lambda>w. (v - val_process Mkt pf 0 w) / prices Mkt asset 0 w)\n  \\<in> borel_measurable (F 0)\n\ngoal (1 subgoal):\n 1. remaining_qty Mkt v pf asset (Suc 0) \\<in> borel_measurable (F 0)", "by simp"], ["proof (state)\nthis:\n  remaining_qty Mkt v pf asset (Suc 0) \\<in> borel_measurable (F 0)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       remaining_qty Mkt v pf asset (Suc n)\n       \\<in> borel_measurable (F n) \\<Longrightarrow>\n       remaining_qty Mkt v pf asset (Suc (Suc n))\n       \\<in> borel_measurable (F (Suc n))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       remaining_qty Mkt v pf asset (Suc n)\n       \\<in> borel_measurable (F n) \\<Longrightarrow>\n       remaining_qty Mkt v pf asset (Suc (Suc n))\n       \\<in> borel_measurable (F (Suc n))", "case (Suc n)"], ["proof (state)\nthis:\n  remaining_qty Mkt v pf asset (Suc n) \\<in> borel_measurable (F n)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       remaining_qty Mkt v pf asset (Suc n)\n       \\<in> borel_measurable (F n) \\<Longrightarrow>\n       remaining_qty Mkt v pf asset (Suc (Suc n))\n       \\<in> borel_measurable (F (Suc n))", "have \"(\\<lambda>w. (cls_val_process Mkt pf (Suc n) w - val_process Mkt pf (Suc n) w)/\n    (prices Mkt asset (Suc n) w)) \\<in> borel_measurable (F (Suc n))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>w.\n        (cls_val_process Mkt pf (Suc n) w - val_process Mkt pf (Suc n) w) /\n        prices Mkt asset (Suc n) w)\n    \\<in> borel_measurable (F (Suc n))", "proof (rule borel_measurable_divide)"], ["proof (state)\ngoal (2 subgoals):\n 1. (\\<lambda>x.\n        cls_val_process Mkt pf (Suc n) x - val_process Mkt pf (Suc n) x)\n    \\<in> borel_measurable (F (Suc n))\n 2. prices Mkt asset (Suc n) \\<in> borel_measurable (F (Suc n))", "show \"(\\<lambda>w. (cls_val_process Mkt pf (Suc n) w - val_process Mkt pf (Suc n) w)) \\<in> borel_measurable (F (Suc n))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>w.\n        cls_val_process Mkt pf (Suc n) w - val_process Mkt pf (Suc n) w)\n    \\<in> borel_measurable (F (Suc n))", "proof (rule borel_measurable_diff)"], ["proof (state)\ngoal (2 subgoals):\n 1. cls_val_process Mkt pf (Suc n) \\<in> borel_measurable (F (Suc n))\n 2. val_process Mkt pf (Suc n) \\<in> borel_measurable (F (Suc n))", "show \"(\\<lambda>w. (cls_val_process Mkt pf (Suc n) w)) \\<in> borel_measurable (F (Suc n))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cls_val_process Mkt pf (Suc n) \\<in> borel_measurable (F (Suc n))", "using assms cls_val_process_adapted"], ["proof (prove)\nusing this:\n  borel_adapt_stoch_proc F (prices Mkt asset)\n  trading_strategy pf\n  support_adapt Mkt pf\n  \\<lbrakk>trading_strategy ?p; support_adapt Mkt ?p\\<rbrakk>\n  \\<Longrightarrow> borel_adapt_stoch_proc F (cls_val_process Mkt ?p)\n\ngoal (1 subgoal):\n 1. cls_val_process Mkt pf (Suc n) \\<in> borel_measurable (F (Suc n))", "unfolding adapt_stoch_proc_def"], ["proof (prove)\nusing this:\n  \\<forall>t. prices Mkt asset t \\<in> borel_measurable (F t)\n  trading_strategy pf\n  support_adapt Mkt pf\n  \\<lbrakk>trading_strategy ?p; support_adapt Mkt ?p\\<rbrakk>\n  \\<Longrightarrow> \\<forall>t.\n                       cls_val_process Mkt ?p t \\<in> borel_measurable (F t)\n\ngoal (1 subgoal):\n 1. cls_val_process Mkt pf (Suc n) \\<in> borel_measurable (F (Suc n))", "by auto"], ["proof (state)\nthis:\n  cls_val_process Mkt pf (Suc n) \\<in> borel_measurable (F (Suc n))\n\ngoal (1 subgoal):\n 1. val_process Mkt pf (Suc n) \\<in> borel_measurable (F (Suc n))", "show \"(\\<lambda>w. (val_process Mkt pf (Suc n) w)) \\<in> borel_measurable (F (Suc n))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. val_process Mkt pf (Suc n) \\<in> borel_measurable (F (Suc n))", "using assms  ats_val_process_adapted"], ["proof (prove)\nusing this:\n  borel_adapt_stoch_proc F (prices Mkt asset)\n  trading_strategy pf\n  support_adapt Mkt pf\n  \\<lbrakk>trading_strategy ?p; support_adapt Mkt ?p\\<rbrakk>\n  \\<Longrightarrow> borel_adapt_stoch_proc F (val_process Mkt ?p)\n\ngoal (1 subgoal):\n 1. val_process Mkt pf (Suc n) \\<in> borel_measurable (F (Suc n))", "by (simp add:adapt_stoch_proc_def)"], ["proof (state)\nthis:\n  val_process Mkt pf (Suc n) \\<in> borel_measurable (F (Suc n))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<lambda>w.\n      cls_val_process Mkt pf (Suc n) w - val_process Mkt pf (Suc n) w)\n  \\<in> borel_measurable (F (Suc n))\n\ngoal (1 subgoal):\n 1. prices Mkt asset (Suc n) \\<in> borel_measurable (F (Suc n))", "show \"prices Mkt asset (Suc n) \\<in> borel_measurable (F (Suc n))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prices Mkt asset (Suc n) \\<in> borel_measurable (F (Suc n))", "using assms"], ["proof (prove)\nusing this:\n  borel_adapt_stoch_proc F (prices Mkt asset)\n  trading_strategy pf\n  support_adapt Mkt pf\n\ngoal (1 subgoal):\n 1. prices Mkt asset (Suc n) \\<in> borel_measurable (F (Suc n))", "unfolding adapt_stoch_proc_def"], ["proof (prove)\nusing this:\n  \\<forall>t. prices Mkt asset t \\<in> borel_measurable (F t)\n  trading_strategy pf\n  support_adapt Mkt pf\n\ngoal (1 subgoal):\n 1. prices Mkt asset (Suc n) \\<in> borel_measurable (F (Suc n))", "by simp"], ["proof (state)\nthis:\n  prices Mkt asset (Suc n) \\<in> borel_measurable (F (Suc n))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<lambda>w.\n      (cls_val_process Mkt pf (Suc n) w - val_process Mkt pf (Suc n) w) /\n      prices Mkt asset (Suc n) w)\n  \\<in> borel_measurable (F (Suc n))\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       remaining_qty Mkt v pf asset (Suc n)\n       \\<in> borel_measurable (F n) \\<Longrightarrow>\n       remaining_qty Mkt v pf asset (Suc (Suc n))\n       \\<in> borel_measurable (F (Suc n))", "moreover"], ["proof (state)\nthis:\n  (\\<lambda>w.\n      (cls_val_process Mkt pf (Suc n) w - val_process Mkt pf (Suc n) w) /\n      prices Mkt asset (Suc n) w)\n  \\<in> borel_measurable (F (Suc n))\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       remaining_qty Mkt v pf asset (Suc n)\n       \\<in> borel_measurable (F n) \\<Longrightarrow>\n       remaining_qty Mkt v pf asset (Suc (Suc n))\n       \\<in> borel_measurable (F (Suc n))", "have \"remaining_qty Mkt v pf asset (Suc n) \\<in> borel_measurable (F (Suc n))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. remaining_qty Mkt v pf asset (Suc n) \\<in> borel_measurable (F (Suc n))", "using Suc\n    Suc_n_not_le_n increasing_measurable_info nat_le_linear"], ["proof (prove)\nusing this:\n  remaining_qty Mkt v pf asset (Suc n) \\<in> borel_measurable (F n)\n  \\<not> Suc ?n \\<le> ?n\n  \\<lbrakk>?f \\<in> F ?s \\<rightarrow>\\<^sub>M ?N; ?s \\<le> ?t\\<rbrakk>\n  \\<Longrightarrow> ?f \\<in> F ?t \\<rightarrow>\\<^sub>M ?N\n  ?m \\<le> ?n \\<or> ?n \\<le> ?m\n\ngoal (1 subgoal):\n 1. remaining_qty Mkt v pf asset (Suc n) \\<in> borel_measurable (F (Suc n))", "by blast"], ["proof (state)\nthis:\n  remaining_qty Mkt v pf asset (Suc n) \\<in> borel_measurable (F (Suc n))\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       remaining_qty Mkt v pf asset (Suc n)\n       \\<in> borel_measurable (F n) \\<Longrightarrow>\n       remaining_qty Mkt v pf asset (Suc (Suc n))\n       \\<in> borel_measurable (F (Suc n))", "ultimately"], ["proof (chain)\npicking this:\n  (\\<lambda>w.\n      (cls_val_process Mkt pf (Suc n) w - val_process Mkt pf (Suc n) w) /\n      prices Mkt asset (Suc n) w)\n  \\<in> borel_measurable (F (Suc n))\n  remaining_qty Mkt v pf asset (Suc n) \\<in> borel_measurable (F (Suc n))", "show ?case"], ["proof (prove)\nusing this:\n  (\\<lambda>w.\n      (cls_val_process Mkt pf (Suc n) w - val_process Mkt pf (Suc n) w) /\n      prices Mkt asset (Suc n) w)\n  \\<in> borel_measurable (F (Suc n))\n  remaining_qty Mkt v pf asset (Suc n) \\<in> borel_measurable (F (Suc n))\n\ngoal (1 subgoal):\n 1. remaining_qty Mkt v pf asset (Suc (Suc n))\n    \\<in> borel_measurable (F (Suc n))", "using Suc remaining_qty.simps(3)[of Mkt v pf asset n]"], ["proof (prove)\nusing this:\n  (\\<lambda>w.\n      (cls_val_process Mkt pf (Suc n) w - val_process Mkt pf (Suc n) w) /\n      prices Mkt asset (Suc n) w)\n  \\<in> borel_measurable (F (Suc n))\n  remaining_qty Mkt v pf asset (Suc n) \\<in> borel_measurable (F (Suc n))\n  remaining_qty Mkt v pf asset (Suc n) \\<in> borel_measurable (F n)\n  remaining_qty Mkt v pf asset (Suc (Suc n)) =\n  (\\<lambda>w.\n      remaining_qty Mkt v pf asset (Suc n) w +\n      (cls_val_process Mkt pf (Suc n) w - val_process Mkt pf (Suc n) w) /\n      prices Mkt asset (Suc n) w)\n\ngoal (1 subgoal):\n 1. remaining_qty Mkt v pf asset (Suc (Suc n))\n    \\<in> borel_measurable (F (Suc n))", "by simp"], ["proof (state)\nthis:\n  remaining_qty Mkt v pf asset (Suc (Suc n))\n  \\<in> borel_measurable (F (Suc n))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in disc_equity_market) remaining_qty_predict:\n  assumes \"borel_adapt_stoch_proc F (prices Mkt asset)\"\n  and \"trading_strategy pf\"\nand \"support_adapt Mkt pf\"\nshows \"borel_predict_stoch_proc F (remaining_qty Mkt v pf asset)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. borel_predict_stoch_proc F (remaining_qty Mkt v pf asset)", "unfolding predict_stoch_proc_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. remaining_qty Mkt v pf asset 0 \\<in> borel_measurable (F 0) \\<and>\n    (\\<forall>n.\n        remaining_qty Mkt v pf asset (Suc n) \\<in> borel_measurable (F n))", "proof (intro conjI allI)"], ["proof (state)\ngoal (2 subgoals):\n 1. remaining_qty Mkt v pf asset 0 \\<in> borel_measurable (F 0)\n 2. \\<And>n.\n       remaining_qty Mkt v pf asset (Suc n) \\<in> borel_measurable (F n)", "show \"remaining_qty Mkt v pf asset 0 \\<in> borel_measurable (F 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. remaining_qty Mkt v pf asset 0 \\<in> borel_measurable (F 0)", "using init"], ["proof (prove)\nusing this:\n  remaining_qty ?Mkt ?v ?pf ?asset 0 = (\\<lambda>w. 0)\n\ngoal (1 subgoal):\n 1. remaining_qty Mkt v pf asset 0 \\<in> borel_measurable (F 0)", "by simp"], ["proof (state)\nthis:\n  remaining_qty Mkt v pf asset 0 \\<in> borel_measurable (F 0)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       remaining_qty Mkt v pf asset (Suc n) \\<in> borel_measurable (F n)", "fix n"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       remaining_qty Mkt v pf asset (Suc n) \\<in> borel_measurable (F n)", "show \"remaining_qty Mkt v pf asset (Suc n) \\<in> borel_measurable (F n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. remaining_qty Mkt v pf asset (Suc n) \\<in> borel_measurable (F n)", "using assms"], ["proof (prove)\nusing this:\n  borel_adapt_stoch_proc F (prices Mkt asset)\n  trading_strategy pf\n  support_adapt Mkt pf\n\ngoal (1 subgoal):\n 1. remaining_qty Mkt v pf asset (Suc n) \\<in> borel_measurable (F n)", "by (simp add: remaining_qty_predict')"], ["proof (state)\nthis:\n  remaining_qty Mkt v pf asset (Suc n) \\<in> borel_measurable (F n)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in disc_equity_market) remaining_qty_adapt:\n  assumes \"borel_adapt_stoch_proc F (prices Mkt asset)\"\n  and \"trading_strategy pf\"\nand \"support_adapt Mkt pf\"\nshows \"remaining_qty Mkt v pf asset n \\<in> borel_measurable (F n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. remaining_qty Mkt v pf asset n \\<in> borel_measurable (F n)", "using adapt_stoch_proc_def assms(1) assms(2) predict_imp_adapt remaining_qty_predict"], ["proof (prove)\nusing this:\n  adapt_stoch_proc ?F ?X ?N =\n  (\\<forall>t. ?X t \\<in> ?F t \\<rightarrow>\\<^sub>M ?N)\n  borel_adapt_stoch_proc F (prices Mkt asset)\n  trading_strategy pf\n  predict_stoch_proc F ?X ?N \\<Longrightarrow> adapt_stoch_proc F ?X ?N\n  \\<lbrakk>borel_adapt_stoch_proc F (prices Mkt ?asset);\n   trading_strategy ?pf; support_adapt Mkt ?pf\\<rbrakk>\n  \\<Longrightarrow> borel_predict_stoch_proc F\n                     (remaining_qty Mkt ?v ?pf ?asset)\n\ngoal (1 subgoal):\n 1. remaining_qty Mkt v pf asset n \\<in> borel_measurable (F n)", "by (metis assms(3))"], ["", "lemma (in disc_equity_market) remaining_qty_adapted:\n  assumes \"borel_adapt_stoch_proc F (prices Mkt asset)\"\n  and \"trading_strategy pf\"\nand \"support_adapt Mkt pf\"\nshows \"borel_adapt_stoch_proc F (remaining_qty Mkt v pf asset)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. borel_adapt_stoch_proc F (remaining_qty Mkt v pf asset)", "using assms"], ["proof (prove)\nusing this:\n  borel_adapt_stoch_proc F (prices Mkt asset)\n  trading_strategy pf\n  support_adapt Mkt pf\n\ngoal (1 subgoal):\n 1. borel_adapt_stoch_proc F (remaining_qty Mkt v pf asset)", "unfolding adapt_stoch_proc_def"], ["proof (prove)\nusing this:\n  \\<forall>t. prices Mkt asset t \\<in> borel_measurable (F t)\n  trading_strategy pf\n  support_adapt Mkt pf\n\ngoal (1 subgoal):\n 1. \\<forall>t. remaining_qty Mkt v pf asset t \\<in> borel_measurable (F t)", "using assms remaining_qty_adapt"], ["proof (prove)\nusing this:\n  \\<forall>t. prices Mkt asset t \\<in> borel_measurable (F t)\n  trading_strategy pf\n  support_adapt Mkt pf\n  borel_adapt_stoch_proc F (prices Mkt asset)\n  trading_strategy pf\n  support_adapt Mkt pf\n  \\<lbrakk>borel_adapt_stoch_proc F (prices Mkt ?asset);\n   trading_strategy ?pf; support_adapt Mkt ?pf\\<rbrakk>\n  \\<Longrightarrow> remaining_qty Mkt ?v ?pf ?asset ?n\n                    \\<in> borel_measurable (F ?n)\n\ngoal (1 subgoal):\n 1. \\<forall>t. remaining_qty Mkt v pf asset t \\<in> borel_measurable (F t)", "by blast"], ["", "definition self_finance where\n  \"self_finance Mkt v pf (asset::'a) = qty_sum pf (qty_single asset (remaining_qty Mkt v pf asset))\""], ["", "lemma self_finance_portfolio:\n  assumes \"portfolio pf\"\nshows \"portfolio (self_finance Mkt v pf asset)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. portfolio (self_finance Mkt v pf asset)", "unfolding self_finance_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. portfolio (qty_sum pf (qty_single asset (remaining_qty Mkt v pf asset)))", "by (simp add: assms single_comp_portfolio sum_portfolio)"], ["", "lemma self_finance_init:\n  assumes \"\\<forall>w. prices Mkt asset 0 w \\<noteq> 0\"\n  and \"portfolio pf\"\nshows \"val_process Mkt (self_finance Mkt v pf asset) 0 w = v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. val_process Mkt (self_finance Mkt v pf asset) 0 w = v", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. val_process Mkt (self_finance Mkt v pf asset) 0 w = v", "define scp where \"scp = qty_single asset (remaining_qty Mkt v pf asset)\""], ["proof (state)\nthis:\n  scp = qty_single asset (remaining_qty Mkt v pf asset)\n\ngoal (1 subgoal):\n 1. val_process Mkt (self_finance Mkt v pf asset) 0 w = v", "have \"val_process Mkt (self_finance Mkt v pf asset) 0 w =\n    val_process Mkt pf 0 w +\n    val_process Mkt scp 0 w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. val_process Mkt (self_finance Mkt v pf asset) 0 w =\n    val_process Mkt pf 0 w + val_process Mkt scp 0 w", "unfolding scp_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. val_process Mkt (self_finance Mkt v pf asset) 0 w =\n    val_process Mkt pf 0 w +\n    val_process Mkt (qty_single asset (remaining_qty Mkt v pf asset)) 0 w", "using assms single_comp_portfolio[of asset]\n    sum_val_process[of pf \"qty_single asset (remaining_qty Mkt v pf asset)\" Mkt]"], ["proof (prove)\nusing this:\n  \\<forall>w. prices Mkt asset 0 w \\<noteq> 0\n  portfolio pf\n  portfolio (qty_single asset ?qty)\n  \\<lbrakk>portfolio pf;\n   portfolio (qty_single asset (remaining_qty Mkt v pf asset))\\<rbrakk>\n  \\<Longrightarrow> \\<forall>n w.\n                       val_process Mkt\n                        (qty_sum pf\n                          (qty_single asset (remaining_qty Mkt v pf asset)))\n                        n w =\n                       val_process Mkt pf n w +\n                       val_process Mkt\n                        (qty_single asset (remaining_qty Mkt v pf asset)) n\n                        w\n\ngoal (1 subgoal):\n 1. val_process Mkt (self_finance Mkt v pf asset) 0 w =\n    val_process Mkt pf 0 w +\n    val_process Mkt (qty_single asset (remaining_qty Mkt v pf asset)) 0 w", "by (simp add: \\<open>\\<And>qty. portfolio (qty_single asset qty)\\<close> self_finance_def)"], ["proof (state)\nthis:\n  val_process Mkt (self_finance Mkt v pf asset) 0 w =\n  val_process Mkt pf 0 w + val_process Mkt scp 0 w\n\ngoal (1 subgoal):\n 1. val_process Mkt (self_finance Mkt v pf asset) 0 w = v", "also"], ["proof (state)\nthis:\n  val_process Mkt (self_finance Mkt v pf asset) 0 w =\n  val_process Mkt pf 0 w + val_process Mkt scp 0 w\n\ngoal (1 subgoal):\n 1. val_process Mkt (self_finance Mkt v pf asset) 0 w = v", "have \"... = val_process Mkt pf 0 w +\n    (sum (\\<lambda>x. ((prices Mkt) x 0 w) * (scp x (Suc 0) w)) {asset})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. val_process Mkt pf 0 w + val_process Mkt scp 0 w =\n    val_process Mkt pf 0 w +\n    (\\<Sum>x\\<in>{asset}. prices Mkt x 0 w * scp x (Suc 0) w)", "using subset_val_process'[of \"{asset}\" scp]"], ["proof (prove)\nusing this:\n  \\<lbrakk>finite {asset}; support_set scp \\<subseteq> {asset}\\<rbrakk>\n  \\<Longrightarrow> val_process ?Mkt scp ?n ?w =\n                    (\\<Sum>x\\<in>{asset}.\n                       prices ?Mkt x ?n ?w * scp x (Suc ?n) ?w)\n\ngoal (1 subgoal):\n 1. val_process Mkt pf 0 w + val_process Mkt scp 0 w =\n    val_process Mkt pf 0 w +\n    (\\<Sum>x\\<in>{asset}. prices Mkt x 0 w * scp x (Suc 0) w)", "unfolding scp_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>finite {asset};\n   support_set (qty_single asset (remaining_qty Mkt v pf asset))\n   \\<subseteq> {asset}\\<rbrakk>\n  \\<Longrightarrow> val_process ?Mkt\n                     (qty_single asset (remaining_qty Mkt v pf asset)) ?n\n                     ?w =\n                    (\\<Sum>x\\<in>{asset}.\n                       prices ?Mkt x ?n ?w *\n                       qty_single asset (remaining_qty Mkt v pf asset) x\n                        (Suc ?n) ?w)\n\ngoal (1 subgoal):\n 1. val_process Mkt pf 0 w +\n    val_process Mkt (qty_single asset (remaining_qty Mkt v pf asset)) 0 w =\n    val_process Mkt pf 0 w +\n    (\\<Sum>x\\<in>{asset}.\n       prices Mkt x 0 w *\n       qty_single asset (remaining_qty Mkt v pf asset) x (Suc 0) w)", "by (auto simp add:  single_comp_support)"], ["proof (state)\nthis:\n  val_process Mkt pf 0 w + val_process Mkt scp 0 w =\n  val_process Mkt pf 0 w +\n  (\\<Sum>x\\<in>{asset}. prices Mkt x 0 w * scp x (Suc 0) w)\n\ngoal (1 subgoal):\n 1. val_process Mkt (self_finance Mkt v pf asset) 0 w = v", "also"], ["proof (state)\nthis:\n  val_process Mkt pf 0 w + val_process Mkt scp 0 w =\n  val_process Mkt pf 0 w +\n  (\\<Sum>x\\<in>{asset}. prices Mkt x 0 w * scp x (Suc 0) w)\n\ngoal (1 subgoal):\n 1. val_process Mkt (self_finance Mkt v pf asset) 0 w = v", "have \"... = val_process Mkt pf 0 w + prices Mkt asset 0 w * scp asset (Suc 0) w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. val_process Mkt pf 0 w +\n    (\\<Sum>x\\<in>{asset}. prices Mkt x 0 w * scp x (Suc 0) w) =\n    val_process Mkt pf 0 w + prices Mkt asset 0 w * scp asset (Suc 0) w", "by auto"], ["proof (state)\nthis:\n  val_process Mkt pf 0 w +\n  (\\<Sum>x\\<in>{asset}. prices Mkt x 0 w * scp x (Suc 0) w) =\n  val_process Mkt pf 0 w + prices Mkt asset 0 w * scp asset (Suc 0) w\n\ngoal (1 subgoal):\n 1. val_process Mkt (self_finance Mkt v pf asset) 0 w = v", "also"], ["proof (state)\nthis:\n  val_process Mkt pf 0 w +\n  (\\<Sum>x\\<in>{asset}. prices Mkt x 0 w * scp x (Suc 0) w) =\n  val_process Mkt pf 0 w + prices Mkt asset 0 w * scp asset (Suc 0) w\n\ngoal (1 subgoal):\n 1. val_process Mkt (self_finance Mkt v pf asset) 0 w = v", "have \"... = val_process Mkt pf 0 w + prices Mkt asset 0 w * (remaining_qty Mkt v pf asset) (Suc 0) w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. val_process Mkt pf 0 w + prices Mkt asset 0 w * scp asset (Suc 0) w =\n    val_process Mkt pf 0 w +\n    prices Mkt asset 0 w * remaining_qty Mkt v pf asset (Suc 0) w", "unfolding scp_def qty_single_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. val_process Mkt pf 0 w +\n    prices Mkt asset 0 w *\n    (qty_empty(asset := remaining_qty Mkt v pf asset)) asset (Suc 0) w =\n    val_process Mkt pf 0 w +\n    prices Mkt asset 0 w * remaining_qty Mkt v pf asset (Suc 0) w", "by simp"], ["proof (state)\nthis:\n  val_process Mkt pf 0 w + prices Mkt asset 0 w * scp asset (Suc 0) w =\n  val_process Mkt pf 0 w +\n  prices Mkt asset 0 w * remaining_qty Mkt v pf asset (Suc 0) w\n\ngoal (1 subgoal):\n 1. val_process Mkt (self_finance Mkt v pf asset) 0 w = v", "also"], ["proof (state)\nthis:\n  val_process Mkt pf 0 w + prices Mkt asset 0 w * scp asset (Suc 0) w =\n  val_process Mkt pf 0 w +\n  prices Mkt asset 0 w * remaining_qty Mkt v pf asset (Suc 0) w\n\ngoal (1 subgoal):\n 1. val_process Mkt (self_finance Mkt v pf asset) 0 w = v", "have \"... = val_process Mkt pf 0 w + prices Mkt asset 0 w * (v - val_process Mkt pf 0 w)/(prices Mkt asset 0 w)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. val_process Mkt pf 0 w +\n    prices Mkt asset 0 w * remaining_qty Mkt v pf asset (Suc 0) w =\n    val_process Mkt pf 0 w +\n    prices Mkt asset 0 w * (v - val_process Mkt pf 0 w) /\n    prices Mkt asset 0 w", "by simp"], ["proof (state)\nthis:\n  val_process Mkt pf 0 w +\n  prices Mkt asset 0 w * remaining_qty Mkt v pf asset (Suc 0) w =\n  val_process Mkt pf 0 w +\n  prices Mkt asset 0 w * (v - val_process Mkt pf 0 w) / prices Mkt asset 0 w\n\ngoal (1 subgoal):\n 1. val_process Mkt (self_finance Mkt v pf asset) 0 w = v", "also"], ["proof (state)\nthis:\n  val_process Mkt pf 0 w +\n  prices Mkt asset 0 w * remaining_qty Mkt v pf asset (Suc 0) w =\n  val_process Mkt pf 0 w +\n  prices Mkt asset 0 w * (v - val_process Mkt pf 0 w) / prices Mkt asset 0 w\n\ngoal (1 subgoal):\n 1. val_process Mkt (self_finance Mkt v pf asset) 0 w = v", "have \"... = val_process Mkt pf 0 w + (v - val_process Mkt pf 0 w)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. val_process Mkt pf 0 w +\n    prices Mkt asset 0 w * (v - val_process Mkt pf 0 w) /\n    prices Mkt asset 0 w =\n    val_process Mkt pf 0 w + (v - val_process Mkt pf 0 w)", "using assms"], ["proof (prove)\nusing this:\n  \\<forall>w. prices Mkt asset 0 w \\<noteq> 0\n  portfolio pf\n\ngoal (1 subgoal):\n 1. val_process Mkt pf 0 w +\n    prices Mkt asset 0 w * (v - val_process Mkt pf 0 w) /\n    prices Mkt asset 0 w =\n    val_process Mkt pf 0 w + (v - val_process Mkt pf 0 w)", "by simp"], ["proof (state)\nthis:\n  val_process Mkt pf 0 w +\n  prices Mkt asset 0 w * (v - val_process Mkt pf 0 w) /\n  prices Mkt asset 0 w =\n  val_process Mkt pf 0 w + (v - val_process Mkt pf 0 w)\n\ngoal (1 subgoal):\n 1. val_process Mkt (self_finance Mkt v pf asset) 0 w = v", "also"], ["proof (state)\nthis:\n  val_process Mkt pf 0 w +\n  prices Mkt asset 0 w * (v - val_process Mkt pf 0 w) /\n  prices Mkt asset 0 w =\n  val_process Mkt pf 0 w + (v - val_process Mkt pf 0 w)\n\ngoal (1 subgoal):\n 1. val_process Mkt (self_finance Mkt v pf asset) 0 w = v", "have \"... = v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. val_process Mkt pf 0 w + (v - val_process Mkt pf 0 w) = v", "by simp"], ["proof (state)\nthis:\n  val_process Mkt pf 0 w + (v - val_process Mkt pf 0 w) = v\n\ngoal (1 subgoal):\n 1. val_process Mkt (self_finance Mkt v pf asset) 0 w = v", "finally"], ["proof (chain)\npicking this:\n  val_process Mkt (self_finance Mkt v pf asset) 0 w = v", "show ?thesis"], ["proof (prove)\nusing this:\n  val_process Mkt (self_finance Mkt v pf asset) 0 w = v\n\ngoal (1 subgoal):\n 1. val_process Mkt (self_finance Mkt v pf asset) 0 w = v", "."], ["proof (state)\nthis:\n  val_process Mkt (self_finance Mkt v pf asset) 0 w = v\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma self_finance_succ:\n  assumes \"prices Mkt asset (Suc n) w \\<noteq> 0\"\n  and \"portfolio pf\"\nshows \"val_process Mkt (self_finance Mkt v pf asset) (Suc n) w = prices Mkt asset (Suc n) w * remaining_qty Mkt v pf asset (Suc n) w +\n  cls_val_process Mkt pf (Suc n) w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. val_process Mkt (self_finance Mkt v pf asset) (Suc n) w =\n    prices Mkt asset (Suc n) w * remaining_qty Mkt v pf asset (Suc n) w +\n    cls_val_process Mkt pf (Suc n) w", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. val_process Mkt (self_finance Mkt v pf asset) (Suc n) w =\n    prices Mkt asset (Suc n) w * remaining_qty Mkt v pf asset (Suc n) w +\n    cls_val_process Mkt pf (Suc n) w", "define scp where \"scp = qty_single asset (remaining_qty Mkt v pf asset)\""], ["proof (state)\nthis:\n  scp = qty_single asset (remaining_qty Mkt v pf asset)\n\ngoal (1 subgoal):\n 1. val_process Mkt (self_finance Mkt v pf asset) (Suc n) w =\n    prices Mkt asset (Suc n) w * remaining_qty Mkt v pf asset (Suc n) w +\n    cls_val_process Mkt pf (Suc n) w", "have \"val_process Mkt (self_finance Mkt v pf asset) (Suc n) w =\n    val_process Mkt pf (Suc n) w +\n    val_process Mkt scp (Suc n) w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. val_process Mkt (self_finance Mkt v pf asset) (Suc n) w =\n    val_process Mkt pf (Suc n) w + val_process Mkt scp (Suc n) w", "unfolding scp_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. val_process Mkt (self_finance Mkt v pf asset) (Suc n) w =\n    val_process Mkt pf (Suc n) w +\n    val_process Mkt (qty_single asset (remaining_qty Mkt v pf asset))\n     (Suc n) w", "using assms single_comp_portfolio[of asset]\n    sum_val_process[of pf \"qty_single asset (remaining_qty Mkt v pf asset)\" Mkt]"], ["proof (prove)\nusing this:\n  prices Mkt asset (Suc n) w \\<noteq> 0\n  portfolio pf\n  portfolio (qty_single asset ?qty)\n  \\<lbrakk>portfolio pf;\n   portfolio (qty_single asset (remaining_qty Mkt v pf asset))\\<rbrakk>\n  \\<Longrightarrow> \\<forall>n w.\n                       val_process Mkt\n                        (qty_sum pf\n                          (qty_single asset (remaining_qty Mkt v pf asset)))\n                        n w =\n                       val_process Mkt pf n w +\n                       val_process Mkt\n                        (qty_single asset (remaining_qty Mkt v pf asset)) n\n                        w\n\ngoal (1 subgoal):\n 1. val_process Mkt (self_finance Mkt v pf asset) (Suc n) w =\n    val_process Mkt pf (Suc n) w +\n    val_process Mkt (qty_single asset (remaining_qty Mkt v pf asset))\n     (Suc n) w", "by (simp add: \\<open>\\<And>qty. portfolio (qty_single asset qty)\\<close> self_finance_def)"], ["proof (state)\nthis:\n  val_process Mkt (self_finance Mkt v pf asset) (Suc n) w =\n  val_process Mkt pf (Suc n) w + val_process Mkt scp (Suc n) w\n\ngoal (1 subgoal):\n 1. val_process Mkt (self_finance Mkt v pf asset) (Suc n) w =\n    prices Mkt asset (Suc n) w * remaining_qty Mkt v pf asset (Suc n) w +\n    cls_val_process Mkt pf (Suc n) w", "also"], ["proof (state)\nthis:\n  val_process Mkt (self_finance Mkt v pf asset) (Suc n) w =\n  val_process Mkt pf (Suc n) w + val_process Mkt scp (Suc n) w\n\ngoal (1 subgoal):\n 1. val_process Mkt (self_finance Mkt v pf asset) (Suc n) w =\n    prices Mkt asset (Suc n) w * remaining_qty Mkt v pf asset (Suc n) w +\n    cls_val_process Mkt pf (Suc n) w", "have \"... = val_process Mkt pf (Suc n) w +\n    (sum (\\<lambda>x. ((prices Mkt) x (Suc n) w) * (scp x (Suc (Suc n)) w)) {asset})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. val_process Mkt pf (Suc n) w + val_process Mkt scp (Suc n) w =\n    val_process Mkt pf (Suc n) w +\n    (\\<Sum>x\\<in>{asset}. prices Mkt x (Suc n) w * scp x (Suc (Suc n)) w)", "using subset_val_process'[of \"{asset}\" scp]"], ["proof (prove)\nusing this:\n  \\<lbrakk>finite {asset}; support_set scp \\<subseteq> {asset}\\<rbrakk>\n  \\<Longrightarrow> val_process ?Mkt scp ?n ?w =\n                    (\\<Sum>x\\<in>{asset}.\n                       prices ?Mkt x ?n ?w * scp x (Suc ?n) ?w)\n\ngoal (1 subgoal):\n 1. val_process Mkt pf (Suc n) w + val_process Mkt scp (Suc n) w =\n    val_process Mkt pf (Suc n) w +\n    (\\<Sum>x\\<in>{asset}. prices Mkt x (Suc n) w * scp x (Suc (Suc n)) w)", "unfolding scp_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>finite {asset};\n   support_set (qty_single asset (remaining_qty Mkt v pf asset))\n   \\<subseteq> {asset}\\<rbrakk>\n  \\<Longrightarrow> val_process ?Mkt\n                     (qty_single asset (remaining_qty Mkt v pf asset)) ?n\n                     ?w =\n                    (\\<Sum>x\\<in>{asset}.\n                       prices ?Mkt x ?n ?w *\n                       qty_single asset (remaining_qty Mkt v pf asset) x\n                        (Suc ?n) ?w)\n\ngoal (1 subgoal):\n 1. val_process Mkt pf (Suc n) w +\n    val_process Mkt (qty_single asset (remaining_qty Mkt v pf asset))\n     (Suc n) w =\n    val_process Mkt pf (Suc n) w +\n    (\\<Sum>x\\<in>{asset}.\n       prices Mkt x (Suc n) w *\n       qty_single asset (remaining_qty Mkt v pf asset) x (Suc (Suc n)) w)", "by (auto simp add:  single_comp_support)"], ["proof (state)\nthis:\n  val_process Mkt pf (Suc n) w + val_process Mkt scp (Suc n) w =\n  val_process Mkt pf (Suc n) w +\n  (\\<Sum>x\\<in>{asset}. prices Mkt x (Suc n) w * scp x (Suc (Suc n)) w)\n\ngoal (1 subgoal):\n 1. val_process Mkt (self_finance Mkt v pf asset) (Suc n) w =\n    prices Mkt asset (Suc n) w * remaining_qty Mkt v pf asset (Suc n) w +\n    cls_val_process Mkt pf (Suc n) w", "also"], ["proof (state)\nthis:\n  val_process Mkt pf (Suc n) w + val_process Mkt scp (Suc n) w =\n  val_process Mkt pf (Suc n) w +\n  (\\<Sum>x\\<in>{asset}. prices Mkt x (Suc n) w * scp x (Suc (Suc n)) w)\n\ngoal (1 subgoal):\n 1. val_process Mkt (self_finance Mkt v pf asset) (Suc n) w =\n    prices Mkt asset (Suc n) w * remaining_qty Mkt v pf asset (Suc n) w +\n    cls_val_process Mkt pf (Suc n) w", "have \"... = val_process Mkt pf (Suc n) w + prices Mkt asset (Suc n) w * scp asset (Suc (Suc n)) w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. val_process Mkt pf (Suc n) w +\n    (\\<Sum>x\\<in>{asset}. prices Mkt x (Suc n) w * scp x (Suc (Suc n)) w) =\n    val_process Mkt pf (Suc n) w +\n    prices Mkt asset (Suc n) w * scp asset (Suc (Suc n)) w", "by auto"], ["proof (state)\nthis:\n  val_process Mkt pf (Suc n) w +\n  (\\<Sum>x\\<in>{asset}. prices Mkt x (Suc n) w * scp x (Suc (Suc n)) w) =\n  val_process Mkt pf (Suc n) w +\n  prices Mkt asset (Suc n) w * scp asset (Suc (Suc n)) w\n\ngoal (1 subgoal):\n 1. val_process Mkt (self_finance Mkt v pf asset) (Suc n) w =\n    prices Mkt asset (Suc n) w * remaining_qty Mkt v pf asset (Suc n) w +\n    cls_val_process Mkt pf (Suc n) w", "also"], ["proof (state)\nthis:\n  val_process Mkt pf (Suc n) w +\n  (\\<Sum>x\\<in>{asset}. prices Mkt x (Suc n) w * scp x (Suc (Suc n)) w) =\n  val_process Mkt pf (Suc n) w +\n  prices Mkt asset (Suc n) w * scp asset (Suc (Suc n)) w\n\ngoal (1 subgoal):\n 1. val_process Mkt (self_finance Mkt v pf asset) (Suc n) w =\n    prices Mkt asset (Suc n) w * remaining_qty Mkt v pf asset (Suc n) w +\n    cls_val_process Mkt pf (Suc n) w", "have \"... = val_process Mkt pf (Suc n) w + prices Mkt asset (Suc n) w * (remaining_qty Mkt v pf asset) (Suc (Suc n)) w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. val_process Mkt pf (Suc n) w +\n    prices Mkt asset (Suc n) w * scp asset (Suc (Suc n)) w =\n    val_process Mkt pf (Suc n) w +\n    prices Mkt asset (Suc n) w *\n    remaining_qty Mkt v pf asset (Suc (Suc n)) w", "unfolding scp_def qty_single_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. val_process Mkt pf (Suc n) w +\n    prices Mkt asset (Suc n) w *\n    (qty_empty(asset := remaining_qty Mkt v pf asset)) asset (Suc (Suc n))\n     w =\n    val_process Mkt pf (Suc n) w +\n    prices Mkt asset (Suc n) w *\n    remaining_qty Mkt v pf asset (Suc (Suc n)) w", "by simp"], ["proof (state)\nthis:\n  val_process Mkt pf (Suc n) w +\n  prices Mkt asset (Suc n) w * scp asset (Suc (Suc n)) w =\n  val_process Mkt pf (Suc n) w +\n  prices Mkt asset (Suc n) w * remaining_qty Mkt v pf asset (Suc (Suc n)) w\n\ngoal (1 subgoal):\n 1. val_process Mkt (self_finance Mkt v pf asset) (Suc n) w =\n    prices Mkt asset (Suc n) w * remaining_qty Mkt v pf asset (Suc n) w +\n    cls_val_process Mkt pf (Suc n) w", "also"], ["proof (state)\nthis:\n  val_process Mkt pf (Suc n) w +\n  prices Mkt asset (Suc n) w * scp asset (Suc (Suc n)) w =\n  val_process Mkt pf (Suc n) w +\n  prices Mkt asset (Suc n) w * remaining_qty Mkt v pf asset (Suc (Suc n)) w\n\ngoal (1 subgoal):\n 1. val_process Mkt (self_finance Mkt v pf asset) (Suc n) w =\n    prices Mkt asset (Suc n) w * remaining_qty Mkt v pf asset (Suc n) w +\n    cls_val_process Mkt pf (Suc n) w", "have \"... = val_process Mkt pf (Suc n) w +\n    prices Mkt asset (Suc n) w *\n    (remaining_qty Mkt v pf asset (Suc n) w + (cls_val_process Mkt pf (Suc n) w - val_process Mkt pf (Suc n) w)/(prices Mkt asset (Suc n) w))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. val_process Mkt pf (Suc n) w +\n    prices Mkt asset (Suc n) w *\n    remaining_qty Mkt v pf asset (Suc (Suc n)) w =\n    val_process Mkt pf (Suc n) w +\n    prices Mkt asset (Suc n) w *\n    (remaining_qty Mkt v pf asset (Suc n) w +\n     (cls_val_process Mkt pf (Suc n) w - val_process Mkt pf (Suc n) w) /\n     prices Mkt asset (Suc n) w)", "by simp"], ["proof (state)\nthis:\n  val_process Mkt pf (Suc n) w +\n  prices Mkt asset (Suc n) w *\n  remaining_qty Mkt v pf asset (Suc (Suc n)) w =\n  val_process Mkt pf (Suc n) w +\n  prices Mkt asset (Suc n) w *\n  (remaining_qty Mkt v pf asset (Suc n) w +\n   (cls_val_process Mkt pf (Suc n) w - val_process Mkt pf (Suc n) w) /\n   prices Mkt asset (Suc n) w)\n\ngoal (1 subgoal):\n 1. val_process Mkt (self_finance Mkt v pf asset) (Suc n) w =\n    prices Mkt asset (Suc n) w * remaining_qty Mkt v pf asset (Suc n) w +\n    cls_val_process Mkt pf (Suc n) w", "also"], ["proof (state)\nthis:\n  val_process Mkt pf (Suc n) w +\n  prices Mkt asset (Suc n) w *\n  remaining_qty Mkt v pf asset (Suc (Suc n)) w =\n  val_process Mkt pf (Suc n) w +\n  prices Mkt asset (Suc n) w *\n  (remaining_qty Mkt v pf asset (Suc n) w +\n   (cls_val_process Mkt pf (Suc n) w - val_process Mkt pf (Suc n) w) /\n   prices Mkt asset (Suc n) w)\n\ngoal (1 subgoal):\n 1. val_process Mkt (self_finance Mkt v pf asset) (Suc n) w =\n    prices Mkt asset (Suc n) w * remaining_qty Mkt v pf asset (Suc n) w +\n    cls_val_process Mkt pf (Suc n) w", "have \"... = val_process Mkt pf (Suc n) w +\n     prices Mkt asset (Suc n) w * remaining_qty Mkt v pf asset (Suc n) w +\n    prices Mkt asset (Suc n) w * (cls_val_process Mkt pf (Suc n) w - val_process Mkt pf (Suc n) w)/(prices Mkt asset (Suc n) w)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. val_process Mkt pf (Suc n) w +\n    prices Mkt asset (Suc n) w *\n    (remaining_qty Mkt v pf asset (Suc n) w +\n     (cls_val_process Mkt pf (Suc n) w - val_process Mkt pf (Suc n) w) /\n     prices Mkt asset (Suc n) w) =\n    val_process Mkt pf (Suc n) w +\n    prices Mkt asset (Suc n) w * remaining_qty Mkt v pf asset (Suc n) w +\n    prices Mkt asset (Suc n) w *\n    (cls_val_process Mkt pf (Suc n) w - val_process Mkt pf (Suc n) w) /\n    prices Mkt asset (Suc n) w", "by (simp add: distrib_left)"], ["proof (state)\nthis:\n  val_process Mkt pf (Suc n) w +\n  prices Mkt asset (Suc n) w *\n  (remaining_qty Mkt v pf asset (Suc n) w +\n   (cls_val_process Mkt pf (Suc n) w - val_process Mkt pf (Suc n) w) /\n   prices Mkt asset (Suc n) w) =\n  val_process Mkt pf (Suc n) w +\n  prices Mkt asset (Suc n) w * remaining_qty Mkt v pf asset (Suc n) w +\n  prices Mkt asset (Suc n) w *\n  (cls_val_process Mkt pf (Suc n) w - val_process Mkt pf (Suc n) w) /\n  prices Mkt asset (Suc n) w\n\ngoal (1 subgoal):\n 1. val_process Mkt (self_finance Mkt v pf asset) (Suc n) w =\n    prices Mkt asset (Suc n) w * remaining_qty Mkt v pf asset (Suc n) w +\n    cls_val_process Mkt pf (Suc n) w", "also"], ["proof (state)\nthis:\n  val_process Mkt pf (Suc n) w +\n  prices Mkt asset (Suc n) w *\n  (remaining_qty Mkt v pf asset (Suc n) w +\n   (cls_val_process Mkt pf (Suc n) w - val_process Mkt pf (Suc n) w) /\n   prices Mkt asset (Suc n) w) =\n  val_process Mkt pf (Suc n) w +\n  prices Mkt asset (Suc n) w * remaining_qty Mkt v pf asset (Suc n) w +\n  prices Mkt asset (Suc n) w *\n  (cls_val_process Mkt pf (Suc n) w - val_process Mkt pf (Suc n) w) /\n  prices Mkt asset (Suc n) w\n\ngoal (1 subgoal):\n 1. val_process Mkt (self_finance Mkt v pf asset) (Suc n) w =\n    prices Mkt asset (Suc n) w * remaining_qty Mkt v pf asset (Suc n) w +\n    cls_val_process Mkt pf (Suc n) w", "have \"... = val_process Mkt pf (Suc n) w +\n     prices Mkt asset (Suc n) w * remaining_qty Mkt v pf asset (Suc n) w + (cls_val_process Mkt pf (Suc n) w - val_process Mkt pf (Suc n) w)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. val_process Mkt pf (Suc n) w +\n    prices Mkt asset (Suc n) w * remaining_qty Mkt v pf asset (Suc n) w +\n    prices Mkt asset (Suc n) w *\n    (cls_val_process Mkt pf (Suc n) w - val_process Mkt pf (Suc n) w) /\n    prices Mkt asset (Suc n) w =\n    val_process Mkt pf (Suc n) w +\n    prices Mkt asset (Suc n) w * remaining_qty Mkt v pf asset (Suc n) w +\n    (cls_val_process Mkt pf (Suc n) w - val_process Mkt pf (Suc n) w)", "using assms"], ["proof (prove)\nusing this:\n  prices Mkt asset (Suc n) w \\<noteq> 0\n  portfolio pf\n\ngoal (1 subgoal):\n 1. val_process Mkt pf (Suc n) w +\n    prices Mkt asset (Suc n) w * remaining_qty Mkt v pf asset (Suc n) w +\n    prices Mkt asset (Suc n) w *\n    (cls_val_process Mkt pf (Suc n) w - val_process Mkt pf (Suc n) w) /\n    prices Mkt asset (Suc n) w =\n    val_process Mkt pf (Suc n) w +\n    prices Mkt asset (Suc n) w * remaining_qty Mkt v pf asset (Suc n) w +\n    (cls_val_process Mkt pf (Suc n) w - val_process Mkt pf (Suc n) w)", "by simp"], ["proof (state)\nthis:\n  val_process Mkt pf (Suc n) w +\n  prices Mkt asset (Suc n) w * remaining_qty Mkt v pf asset (Suc n) w +\n  prices Mkt asset (Suc n) w *\n  (cls_val_process Mkt pf (Suc n) w - val_process Mkt pf (Suc n) w) /\n  prices Mkt asset (Suc n) w =\n  val_process Mkt pf (Suc n) w +\n  prices Mkt asset (Suc n) w * remaining_qty Mkt v pf asset (Suc n) w +\n  (cls_val_process Mkt pf (Suc n) w - val_process Mkt pf (Suc n) w)\n\ngoal (1 subgoal):\n 1. val_process Mkt (self_finance Mkt v pf asset) (Suc n) w =\n    prices Mkt asset (Suc n) w * remaining_qty Mkt v pf asset (Suc n) w +\n    cls_val_process Mkt pf (Suc n) w", "also"], ["proof (state)\nthis:\n  val_process Mkt pf (Suc n) w +\n  prices Mkt asset (Suc n) w * remaining_qty Mkt v pf asset (Suc n) w +\n  prices Mkt asset (Suc n) w *\n  (cls_val_process Mkt pf (Suc n) w - val_process Mkt pf (Suc n) w) /\n  prices Mkt asset (Suc n) w =\n  val_process Mkt pf (Suc n) w +\n  prices Mkt asset (Suc n) w * remaining_qty Mkt v pf asset (Suc n) w +\n  (cls_val_process Mkt pf (Suc n) w - val_process Mkt pf (Suc n) w)\n\ngoal (1 subgoal):\n 1. val_process Mkt (self_finance Mkt v pf asset) (Suc n) w =\n    prices Mkt asset (Suc n) w * remaining_qty Mkt v pf asset (Suc n) w +\n    cls_val_process Mkt pf (Suc n) w", "have \"... = prices Mkt asset (Suc n) w * remaining_qty Mkt v pf asset (Suc n) w + cls_val_process Mkt pf (Suc n) w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. val_process Mkt pf (Suc n) w +\n    prices Mkt asset (Suc n) w * remaining_qty Mkt v pf asset (Suc n) w +\n    (cls_val_process Mkt pf (Suc n) w - val_process Mkt pf (Suc n) w) =\n    prices Mkt asset (Suc n) w * remaining_qty Mkt v pf asset (Suc n) w +\n    cls_val_process Mkt pf (Suc n) w", "by simp"], ["proof (state)\nthis:\n  val_process Mkt pf (Suc n) w +\n  prices Mkt asset (Suc n) w * remaining_qty Mkt v pf asset (Suc n) w +\n  (cls_val_process Mkt pf (Suc n) w - val_process Mkt pf (Suc n) w) =\n  prices Mkt asset (Suc n) w * remaining_qty Mkt v pf asset (Suc n) w +\n  cls_val_process Mkt pf (Suc n) w\n\ngoal (1 subgoal):\n 1. val_process Mkt (self_finance Mkt v pf asset) (Suc n) w =\n    prices Mkt asset (Suc n) w * remaining_qty Mkt v pf asset (Suc n) w +\n    cls_val_process Mkt pf (Suc n) w", "finally"], ["proof (chain)\npicking this:\n  val_process Mkt (self_finance Mkt v pf asset) (Suc n) w =\n  prices Mkt asset (Suc n) w * remaining_qty Mkt v pf asset (Suc n) w +\n  cls_val_process Mkt pf (Suc n) w", "show ?thesis"], ["proof (prove)\nusing this:\n  val_process Mkt (self_finance Mkt v pf asset) (Suc n) w =\n  prices Mkt asset (Suc n) w * remaining_qty Mkt v pf asset (Suc n) w +\n  cls_val_process Mkt pf (Suc n) w\n\ngoal (1 subgoal):\n 1. val_process Mkt (self_finance Mkt v pf asset) (Suc n) w =\n    prices Mkt asset (Suc n) w * remaining_qty Mkt v pf asset (Suc n) w +\n    cls_val_process Mkt pf (Suc n) w", "."], ["proof (state)\nthis:\n  val_process Mkt (self_finance Mkt v pf asset) (Suc n) w =\n  prices Mkt asset (Suc n) w * remaining_qty Mkt v pf asset (Suc n) w +\n  cls_val_process Mkt pf (Suc n) w\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma self_finance_updated:\n  assumes \"prices Mkt asset (Suc n) w \\<noteq> 0\"\n  and \"portfolio pf\"\nshows \"cls_val_process Mkt (self_finance Mkt v pf asset) (Suc n) w =\n  cls_val_process Mkt pf (Suc n) w + prices Mkt asset (Suc n) w * (remaining_qty Mkt v pf asset) (Suc n) w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cls_val_process Mkt (self_finance Mkt v pf asset) (Suc n) w =\n    cls_val_process Mkt pf (Suc n) w +\n    prices Mkt asset (Suc n) w * remaining_qty Mkt v pf asset (Suc n) w", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. cls_val_process Mkt (self_finance Mkt v pf asset) (Suc n) w =\n    cls_val_process Mkt pf (Suc n) w +\n    prices Mkt asset (Suc n) w * remaining_qty Mkt v pf asset (Suc n) w", "define scp where \"scp = qty_single asset (remaining_qty Mkt v pf asset)\""], ["proof (state)\nthis:\n  scp = qty_single asset (remaining_qty Mkt v pf asset)\n\ngoal (1 subgoal):\n 1. cls_val_process Mkt (self_finance Mkt v pf asset) (Suc n) w =\n    cls_val_process Mkt pf (Suc n) w +\n    prices Mkt asset (Suc n) w * remaining_qty Mkt v pf asset (Suc n) w", "have \"cls_val_process Mkt (self_finance Mkt v pf asset) (Suc n) w =\n    cls_val_process Mkt pf (Suc n) w +\n    cls_val_process Mkt scp (Suc n) w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cls_val_process Mkt (self_finance Mkt v pf asset) (Suc n) w =\n    cls_val_process Mkt pf (Suc n) w + cls_val_process Mkt scp (Suc n) w", "unfolding scp_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. cls_val_process Mkt (self_finance Mkt v pf asset) (Suc n) w =\n    cls_val_process Mkt pf (Suc n) w +\n    cls_val_process Mkt (qty_single asset (remaining_qty Mkt v pf asset))\n     (Suc n) w", "using assms single_comp_portfolio[of asset]\n    sum_cls_val_process[of pf \"qty_single asset (remaining_qty Mkt v pf asset)\" Mkt]"], ["proof (prove)\nusing this:\n  prices Mkt asset (Suc n) w \\<noteq> 0\n  portfolio pf\n  portfolio (qty_single asset ?qty)\n  \\<lbrakk>portfolio pf;\n   portfolio (qty_single asset (remaining_qty Mkt v pf asset))\\<rbrakk>\n  \\<Longrightarrow> \\<forall>n w.\n                       cls_val_process Mkt\n                        (qty_sum pf\n                          (qty_single asset (remaining_qty Mkt v pf asset)))\n                        n w =\n                       cls_val_process Mkt pf n w +\n                       cls_val_process Mkt\n                        (qty_single asset (remaining_qty Mkt v pf asset)) n\n                        w\n\ngoal (1 subgoal):\n 1. cls_val_process Mkt (self_finance Mkt v pf asset) (Suc n) w =\n    cls_val_process Mkt pf (Suc n) w +\n    cls_val_process Mkt (qty_single asset (remaining_qty Mkt v pf asset))\n     (Suc n) w", "by (simp add: \\<open>\\<And>qty. portfolio (qty_single asset qty)\\<close> self_finance_def)"], ["proof (state)\nthis:\n  cls_val_process Mkt (self_finance Mkt v pf asset) (Suc n) w =\n  cls_val_process Mkt pf (Suc n) w + cls_val_process Mkt scp (Suc n) w\n\ngoal (1 subgoal):\n 1. cls_val_process Mkt (self_finance Mkt v pf asset) (Suc n) w =\n    cls_val_process Mkt pf (Suc n) w +\n    prices Mkt asset (Suc n) w * remaining_qty Mkt v pf asset (Suc n) w", "also"], ["proof (state)\nthis:\n  cls_val_process Mkt (self_finance Mkt v pf asset) (Suc n) w =\n  cls_val_process Mkt pf (Suc n) w + cls_val_process Mkt scp (Suc n) w\n\ngoal (1 subgoal):\n 1. cls_val_process Mkt (self_finance Mkt v pf asset) (Suc n) w =\n    cls_val_process Mkt pf (Suc n) w +\n    prices Mkt asset (Suc n) w * remaining_qty Mkt v pf asset (Suc n) w", "have \"... = cls_val_process Mkt pf (Suc n) w +\n    (sum (\\<lambda>x. ((prices Mkt) x (Suc n) w) * (scp x (Suc n) w)) {asset})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cls_val_process Mkt pf (Suc n) w + cls_val_process Mkt scp (Suc n) w =\n    cls_val_process Mkt pf (Suc n) w +\n    (\\<Sum>x\\<in>{asset}. prices Mkt x (Suc n) w * scp x (Suc n) w)", "using subset_cls_val_process[of \"{asset}\" scp]"], ["proof (prove)\nusing this:\n  \\<lbrakk>finite {asset}; support_set scp \\<subseteq> {asset}\\<rbrakk>\n  \\<Longrightarrow> \\<forall>n w.\n                       cls_val_process ?Mkt scp (Suc n) w =\n                       (\\<Sum>x\\<in>{asset}.\n                          prices ?Mkt x (Suc n) w * scp x (Suc n) w)\n\ngoal (1 subgoal):\n 1. cls_val_process Mkt pf (Suc n) w + cls_val_process Mkt scp (Suc n) w =\n    cls_val_process Mkt pf (Suc n) w +\n    (\\<Sum>x\\<in>{asset}. prices Mkt x (Suc n) w * scp x (Suc n) w)", "unfolding scp_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>finite {asset};\n   support_set (qty_single asset (remaining_qty Mkt v pf asset))\n   \\<subseteq> {asset}\\<rbrakk>\n  \\<Longrightarrow> \\<forall>n w.\n                       cls_val_process ?Mkt\n                        (qty_single asset (remaining_qty Mkt v pf asset))\n                        (Suc n) w =\n                       (\\<Sum>x\\<in>{asset}.\n                          prices ?Mkt x (Suc n) w *\n                          qty_single asset (remaining_qty Mkt v pf asset) x\n                           (Suc n) w)\n\ngoal (1 subgoal):\n 1. cls_val_process Mkt pf (Suc n) w +\n    cls_val_process Mkt (qty_single asset (remaining_qty Mkt v pf asset))\n     (Suc n) w =\n    cls_val_process Mkt pf (Suc n) w +\n    (\\<Sum>x\\<in>{asset}.\n       prices Mkt x (Suc n) w *\n       qty_single asset (remaining_qty Mkt v pf asset) x (Suc n) w)", "by (auto simp add:  single_comp_support)"], ["proof (state)\nthis:\n  cls_val_process Mkt pf (Suc n) w + cls_val_process Mkt scp (Suc n) w =\n  cls_val_process Mkt pf (Suc n) w +\n  (\\<Sum>x\\<in>{asset}. prices Mkt x (Suc n) w * scp x (Suc n) w)\n\ngoal (1 subgoal):\n 1. cls_val_process Mkt (self_finance Mkt v pf asset) (Suc n) w =\n    cls_val_process Mkt pf (Suc n) w +\n    prices Mkt asset (Suc n) w * remaining_qty Mkt v pf asset (Suc n) w", "also"], ["proof (state)\nthis:\n  cls_val_process Mkt pf (Suc n) w + cls_val_process Mkt scp (Suc n) w =\n  cls_val_process Mkt pf (Suc n) w +\n  (\\<Sum>x\\<in>{asset}. prices Mkt x (Suc n) w * scp x (Suc n) w)\n\ngoal (1 subgoal):\n 1. cls_val_process Mkt (self_finance Mkt v pf asset) (Suc n) w =\n    cls_val_process Mkt pf (Suc n) w +\n    prices Mkt asset (Suc n) w * remaining_qty Mkt v pf asset (Suc n) w", "have \"... = cls_val_process Mkt pf (Suc n) w + prices Mkt asset (Suc n) w * scp asset (Suc n) w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cls_val_process Mkt pf (Suc n) w +\n    (\\<Sum>x\\<in>{asset}. prices Mkt x (Suc n) w * scp x (Suc n) w) =\n    cls_val_process Mkt pf (Suc n) w +\n    prices Mkt asset (Suc n) w * scp asset (Suc n) w", "by auto"], ["proof (state)\nthis:\n  cls_val_process Mkt pf (Suc n) w +\n  (\\<Sum>x\\<in>{asset}. prices Mkt x (Suc n) w * scp x (Suc n) w) =\n  cls_val_process Mkt pf (Suc n) w +\n  prices Mkt asset (Suc n) w * scp asset (Suc n) w\n\ngoal (1 subgoal):\n 1. cls_val_process Mkt (self_finance Mkt v pf asset) (Suc n) w =\n    cls_val_process Mkt pf (Suc n) w +\n    prices Mkt asset (Suc n) w * remaining_qty Mkt v pf asset (Suc n) w", "also"], ["proof (state)\nthis:\n  cls_val_process Mkt pf (Suc n) w +\n  (\\<Sum>x\\<in>{asset}. prices Mkt x (Suc n) w * scp x (Suc n) w) =\n  cls_val_process Mkt pf (Suc n) w +\n  prices Mkt asset (Suc n) w * scp asset (Suc n) w\n\ngoal (1 subgoal):\n 1. cls_val_process Mkt (self_finance Mkt v pf asset) (Suc n) w =\n    cls_val_process Mkt pf (Suc n) w +\n    prices Mkt asset (Suc n) w * remaining_qty Mkt v pf asset (Suc n) w", "have \"... = cls_val_process Mkt pf (Suc n) w + prices Mkt asset (Suc n) w * (remaining_qty Mkt v pf asset) (Suc n) w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cls_val_process Mkt pf (Suc n) w +\n    prices Mkt asset (Suc n) w * scp asset (Suc n) w =\n    cls_val_process Mkt pf (Suc n) w +\n    prices Mkt asset (Suc n) w * remaining_qty Mkt v pf asset (Suc n) w", "unfolding scp_def qty_single_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. cls_val_process Mkt pf (Suc n) w +\n    prices Mkt asset (Suc n) w *\n    (qty_empty(asset := remaining_qty Mkt v pf asset)) asset (Suc n) w =\n    cls_val_process Mkt pf (Suc n) w +\n    prices Mkt asset (Suc n) w * remaining_qty Mkt v pf asset (Suc n) w", "by simp"], ["proof (state)\nthis:\n  cls_val_process Mkt pf (Suc n) w +\n  prices Mkt asset (Suc n) w * scp asset (Suc n) w =\n  cls_val_process Mkt pf (Suc n) w +\n  prices Mkt asset (Suc n) w * remaining_qty Mkt v pf asset (Suc n) w\n\ngoal (1 subgoal):\n 1. cls_val_process Mkt (self_finance Mkt v pf asset) (Suc n) w =\n    cls_val_process Mkt pf (Suc n) w +\n    prices Mkt asset (Suc n) w * remaining_qty Mkt v pf asset (Suc n) w", "finally"], ["proof (chain)\npicking this:\n  cls_val_process Mkt (self_finance Mkt v pf asset) (Suc n) w =\n  cls_val_process Mkt pf (Suc n) w +\n  prices Mkt asset (Suc n) w * remaining_qty Mkt v pf asset (Suc n) w", "show ?thesis"], ["proof (prove)\nusing this:\n  cls_val_process Mkt (self_finance Mkt v pf asset) (Suc n) w =\n  cls_val_process Mkt pf (Suc n) w +\n  prices Mkt asset (Suc n) w * remaining_qty Mkt v pf asset (Suc n) w\n\ngoal (1 subgoal):\n 1. cls_val_process Mkt (self_finance Mkt v pf asset) (Suc n) w =\n    cls_val_process Mkt pf (Suc n) w +\n    prices Mkt asset (Suc n) w * remaining_qty Mkt v pf asset (Suc n) w", "."], ["proof (state)\nthis:\n  cls_val_process Mkt (self_finance Mkt v pf asset) (Suc n) w =\n  cls_val_process Mkt pf (Suc n) w +\n  prices Mkt asset (Suc n) w * remaining_qty Mkt v pf asset (Suc n) w\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma self_finance_charact:\n  assumes \"\\<forall> n w. prices Mkt asset (Suc n) w \\<noteq> 0\"\n  and \"portfolio pf\"\nshows \"self_financing Mkt (self_finance Mkt v pf asset)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. self_financing Mkt (self_finance Mkt v pf asset)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. self_financing Mkt (self_finance Mkt v pf asset)", "have \"\\<forall>n w. val_process Mkt (self_finance Mkt v pf asset) (Suc n) w =\n     cls_val_process Mkt (self_finance Mkt v pf asset) (Suc n) w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n w.\n       val_process Mkt (self_finance Mkt v pf asset) (Suc n) w =\n       cls_val_process Mkt (self_finance Mkt v pf asset) (Suc n) w", "proof (intro allI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n w.\n       val_process Mkt (self_finance Mkt v pf asset) (Suc n) w =\n       cls_val_process Mkt (self_finance Mkt v pf asset) (Suc n) w", "fix n w"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n w.\n       val_process Mkt (self_finance Mkt v pf asset) (Suc n) w =\n       cls_val_process Mkt (self_finance Mkt v pf asset) (Suc n) w", "show \"val_process Mkt (self_finance Mkt v pf asset) (Suc n) w =\n      cls_val_process Mkt (self_finance Mkt v pf asset) (Suc n) w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. val_process Mkt (self_finance Mkt v pf asset) (Suc n) w =\n    cls_val_process Mkt (self_finance Mkt v pf asset) (Suc n) w", "using assms self_finance_succ[of Mkt asset]"], ["proof (prove)\nusing this:\n  \\<forall>n w. prices Mkt asset (Suc n) w \\<noteq> 0\n  portfolio pf\n  \\<lbrakk>prices Mkt asset (Suc ?n) ?w \\<noteq> 0; portfolio ?pf\\<rbrakk>\n  \\<Longrightarrow> val_process Mkt (self_finance Mkt ?v ?pf asset) (Suc ?n)\n                     ?w =\n                    prices Mkt asset (Suc ?n) ?w *\n                    remaining_qty Mkt ?v ?pf asset (Suc ?n) ?w +\n                    cls_val_process Mkt ?pf (Suc ?n) ?w\n\ngoal (1 subgoal):\n 1. val_process Mkt (self_finance Mkt v pf asset) (Suc n) w =\n    cls_val_process Mkt (self_finance Mkt v pf asset) (Suc n) w", "by (simp add: self_finance_updated)"], ["proof (state)\nthis:\n  val_process Mkt (self_finance Mkt v pf asset) (Suc n) w =\n  cls_val_process Mkt (self_finance Mkt v pf asset) (Suc n) w\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>n w.\n     val_process Mkt (self_finance Mkt v pf asset) (Suc n) w =\n     cls_val_process Mkt (self_finance Mkt v pf asset) (Suc n) w\n\ngoal (1 subgoal):\n 1. self_financing Mkt (self_finance Mkt v pf asset)", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>n w.\n     val_process Mkt (self_finance Mkt v pf asset) (Suc n) w =\n     cls_val_process Mkt (self_finance Mkt v pf asset) (Suc n) w\n\ngoal (1 subgoal):\n 1. self_financing Mkt (self_finance Mkt v pf asset)", "unfolding self_financing_def"], ["proof (prove)\nusing this:\n  \\<forall>n w.\n     val_process Mkt (self_finance Mkt v pf asset) (Suc n) w =\n     cls_val_process Mkt (self_finance Mkt v pf asset) (Suc n) w\n\ngoal (1 subgoal):\n 1. \\<forall>n.\n       val_process Mkt (self_finance Mkt v pf asset) (Suc n) =\n       cls_val_process Mkt (self_finance Mkt v pf asset) (Suc n)", "by auto"], ["proof (state)\nthis:\n  self_financing Mkt (self_finance Mkt v pf asset)\n\ngoal:\nNo subgoals!", "qed"], ["", "subsubsection \\<open>Replicating portfolios\\<close>"], ["", "definition (in disc_filtr_prob_space) price_structure::\"('a \\<Rightarrow> real) \\<Rightarrow> nat \\<Rightarrow> real \\<Rightarrow> (nat \\<Rightarrow> 'a \\<Rightarrow> real) \\<Rightarrow> bool\" where\n  \"price_structure pyf T \\<pi> pr \\<longleftrightarrow> ((\\<forall> w\\<in> space M. pr 0 w = \\<pi>) \\<and> (AE w in M. pr T w = pyf w) \\<and> (pr T \\<in> borel_measurable (F T)))\""], ["", "lemma (in disc_filtr_prob_space) price_structure_init:\n  assumes \"price_structure pyf T \\<pi> pr\"\n  shows \"\\<forall> w\\<in> space M. pr 0 w = \\<pi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>w\\<in>space M. pr 0 w = \\<pi>", "using assms"], ["proof (prove)\nusing this:\n  price_structure pyf T \\<pi> pr\n\ngoal (1 subgoal):\n 1. \\<forall>w\\<in>space M. pr 0 w = \\<pi>", "unfolding price_structure_def"], ["proof (prove)\nusing this:\n  (\\<forall>w\\<in>space M. pr 0 w = \\<pi>) \\<and>\n  AEeq M (pr T) pyf \\<and> pr T \\<in> borel_measurable (F T)\n\ngoal (1 subgoal):\n 1. \\<forall>w\\<in>space M. pr 0 w = \\<pi>", "by simp"], ["", "lemma (in disc_filtr_prob_space) price_structure_borel_measurable:\n  assumes \"price_structure pyf T \\<pi> pr\"\n  shows \"pr T \\<in> borel_measurable (F T)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pr T \\<in> borel_measurable (F T)", "using assms"], ["proof (prove)\nusing this:\n  price_structure pyf T \\<pi> pr\n\ngoal (1 subgoal):\n 1. pr T \\<in> borel_measurable (F T)", "unfolding price_structure_def"], ["proof (prove)\nusing this:\n  (\\<forall>w\\<in>space M. pr 0 w = \\<pi>) \\<and>\n  AEeq M (pr T) pyf \\<and> pr T \\<in> borel_measurable (F T)\n\ngoal (1 subgoal):\n 1. pr T \\<in> borel_measurable (F T)", "by simp"], ["", "lemma (in disc_filtr_prob_space) price_structure_maturity:\n  assumes \"price_structure pyf T \\<pi> pr\"\n  shows \"AE w in M. pr T w = pyf w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. AEeq M (pr T) pyf", "using assms"], ["proof (prove)\nusing this:\n  price_structure pyf T \\<pi> pr\n\ngoal (1 subgoal):\n 1. AEeq M (pr T) pyf", "unfolding price_structure_def"], ["proof (prove)\nusing this:\n  (\\<forall>w\\<in>space M. pr 0 w = \\<pi>) \\<and>\n  AEeq M (pr T) pyf \\<and> pr T \\<in> borel_measurable (F T)\n\ngoal (1 subgoal):\n 1. AEeq M (pr T) pyf", "by simp"], ["", "definition (in disc_equity_market) replicating_portfolio where\n  \"replicating_portfolio pf der matur  \\<longleftrightarrow> (stock_portfolio Mkt pf) \\<and> (trading_strategy pf) \\<and> (self_financing Mkt pf) \\<and>\n  (AE w in M. cls_val_process Mkt pf matur w = der w)\""], ["", "definition (in disc_equity_market) is_attainable where\n  \"is_attainable der matur \\<longleftrightarrow> (\\<exists> pf. replicating_portfolio pf der matur)\""], ["", "lemma (in disc_equity_market) replicating_price_process:\n  assumes \"replicating_portfolio pf der matur\"\nand \"support_adapt Mkt pf\"\n  shows \"price_structure der matur (initial_value pf) (cls_val_process Mkt pf)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. price_structure der matur (initial_value pf) (cls_val_process Mkt pf)", "unfolding price_structure_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>w\\<in>space M.\n        cls_val_process Mkt pf 0 w = initial_value pf) \\<and>\n    AEeq M (cls_val_process Mkt pf matur) der \\<and>\n    cls_val_process Mkt pf matur \\<in> borel_measurable (F matur)", "proof (intro conjI)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<forall>w\\<in>space M. cls_val_process Mkt pf 0 w = initial_value pf\n 2. AEeq M (cls_val_process Mkt pf matur) der\n 3. cls_val_process Mkt pf matur \\<in> borel_measurable (F matur)", "show \"AE w in M. cls_val_process Mkt pf matur w = der w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. AEeq M (cls_val_process Mkt pf matur) der", "using assms"], ["proof (prove)\nusing this:\n  replicating_portfolio pf der matur\n  support_adapt Mkt pf\n\ngoal (1 subgoal):\n 1. AEeq M (cls_val_process Mkt pf matur) der", "unfolding replicating_portfolio_def"], ["proof (prove)\nusing this:\n  stock_portfolio Mkt pf \\<and>\n  trading_strategy pf \\<and>\n  self_financing Mkt pf \\<and> AEeq M (cls_val_process Mkt pf matur) der\n  support_adapt Mkt pf\n\ngoal (1 subgoal):\n 1. AEeq M (cls_val_process Mkt pf matur) der", "by simp"], ["proof (state)\nthis:\n  AEeq M (cls_val_process Mkt pf matur) der\n\ngoal (2 subgoals):\n 1. \\<forall>w\\<in>space M. cls_val_process Mkt pf 0 w = initial_value pf\n 2. cls_val_process Mkt pf matur \\<in> borel_measurable (F matur)", "show \"\\<forall>w\\<in>space M. cls_val_process Mkt pf 0 w = initial_value pf\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>w\\<in>space M. cls_val_process Mkt pf 0 w = initial_value pf", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>w.\n       w \\<in> space M \\<Longrightarrow>\n       cls_val_process Mkt pf 0 w = initial_value pf", "fix w"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>w.\n       w \\<in> space M \\<Longrightarrow>\n       cls_val_process Mkt pf 0 w = initial_value pf", "assume \"w\\<in> space M\""], ["proof (state)\nthis:\n  w \\<in> space M\n\ngoal (1 subgoal):\n 1. \\<And>w.\n       w \\<in> space M \\<Longrightarrow>\n       cls_val_process Mkt pf 0 w = initial_value pf", "thus \"cls_val_process Mkt pf 0 w = initial_value pf\""], ["proof (prove)\nusing this:\n  w \\<in> space M\n\ngoal (1 subgoal):\n 1. cls_val_process Mkt pf 0 w = initial_value pf", "unfolding initial_value_def"], ["proof (prove)\nusing this:\n  w \\<in> space M\n\ngoal (1 subgoal):\n 1. cls_val_process Mkt pf 0 w = constant_image (val_process Mkt pf 0)", "using constant_imageI[of \"cls_val_process Mkt pf 0\"]\n      trading_strategy_init[of pf] assms replicating_portfolio_def [of pf der matur]"], ["proof (prove)\nusing this:\n  w \\<in> space M\n  \\<exists>c.\n     \\<forall>x\\<in>space M.\n        cls_val_process Mkt pf 0 x = c \\<Longrightarrow>\n  \\<forall>x\\<in>space M.\n     cls_val_process Mkt pf 0 x = constant_image (cls_val_process Mkt pf 0)\n  \\<lbrakk>trading_strategy pf; support_adapt Mkt pf\\<rbrakk>\n  \\<Longrightarrow> \\<exists>c.\n                       \\<forall>w\\<in>space M. val_process Mkt pf 0 w = c\n  replicating_portfolio pf der matur\n  support_adapt Mkt pf\n  replicating_portfolio pf der matur =\n  (stock_portfolio Mkt pf \\<and>\n   trading_strategy pf \\<and>\n   self_financing Mkt pf \\<and> AEeq M (cls_val_process Mkt pf matur) der)\n\ngoal (1 subgoal):\n 1. cls_val_process Mkt pf 0 w = constant_image (val_process Mkt pf 0)", "by (simp add: stock_portfolio_def cls_val_process_def)"], ["proof (state)\nthis:\n  cls_val_process Mkt pf 0 w = initial_value pf\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>w\\<in>space M. cls_val_process Mkt pf 0 w = initial_value pf\n\ngoal (1 subgoal):\n 1. cls_val_process Mkt pf matur \\<in> borel_measurable (F matur)", "show \"cls_val_process Mkt pf matur \\<in> borel_measurable (F matur)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cls_val_process Mkt pf matur \\<in> borel_measurable (F matur)", "using assms"], ["proof (prove)\nusing this:\n  replicating_portfolio pf der matur\n  support_adapt Mkt pf\n\ngoal (1 subgoal):\n 1. cls_val_process Mkt pf matur \\<in> borel_measurable (F matur)", "unfolding replicating_portfolio_def"], ["proof (prove)\nusing this:\n  stock_portfolio Mkt pf \\<and>\n  trading_strategy pf \\<and>\n  self_financing Mkt pf \\<and> AEeq M (cls_val_process Mkt pf matur) der\n  support_adapt Mkt pf\n\ngoal (1 subgoal):\n 1. cls_val_process Mkt pf matur \\<in> borel_measurable (F matur)", "using ats_val_process_adapted[of pf]\n    cls_val_process_adapted"], ["proof (prove)\nusing this:\n  stock_portfolio Mkt pf \\<and>\n  trading_strategy pf \\<and>\n  self_financing Mkt pf \\<and> AEeq M (cls_val_process Mkt pf matur) der\n  support_adapt Mkt pf\n  \\<lbrakk>trading_strategy pf; support_adapt Mkt pf\\<rbrakk>\n  \\<Longrightarrow> borel_adapt_stoch_proc F (val_process Mkt pf)\n  \\<lbrakk>trading_strategy ?p; support_adapt Mkt ?p\\<rbrakk>\n  \\<Longrightarrow> borel_adapt_stoch_proc F (cls_val_process Mkt ?p)\n\ngoal (1 subgoal):\n 1. cls_val_process Mkt pf matur \\<in> borel_measurable (F matur)", "by (simp add:adapt_stoch_proc_def)"], ["proof (state)\nthis:\n  cls_val_process Mkt pf matur \\<in> borel_measurable (F matur)\n\ngoal:\nNo subgoals!", "qed"], ["", "subsubsection \\<open>Arbitrages\\<close>"], ["", "definition (in disc_filtr_prob_space) arbitrage_process\nwhere\n  \"arbitrage_process Mkt p \\<longleftrightarrow> (\\<exists> m. (self_financing Mkt p) \\<and> (trading_strategy p) \\<and>\n    (\\<forall>w \\<in> space M. val_process Mkt p 0 w = 0) \\<and>\n    (AE w in M. 0 \\<le> cls_val_process Mkt p m w) \\<and>\n    0 < \\<P>(w in M. cls_val_process Mkt p m w > 0))\""], ["", "lemma (in disc_filtr_prob_space) arbitrage_processE:\n  assumes \"arbitrage_process Mkt p\"\n  shows \"(\\<exists> m. (self_financing Mkt p) \\<and> (trading_strategy p) \\<and>\n    (\\<forall>w \\<in> space M. cls_val_process Mkt p 0 w = 0) \\<and>\n    (AE w in M. 0 \\<le> cls_val_process Mkt p m w) \\<and>\n    0 < \\<P>(w in M. cls_val_process Mkt p m w > 0))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>m.\n       self_financing Mkt p \\<and>\n       trading_strategy p \\<and>\n       (\\<forall>w\\<in>space M. cls_val_process Mkt p 0 w = 0) \\<and>\n       (AE w in M. 0 \\<le> cls_val_process Mkt p m w) \\<and>\n       0 < prob {w \\<in> space M. 0 < cls_val_process Mkt p m w}", "using assms disc_filtr_prob_space.arbitrage_process_def disc_filtr_prob_space_axioms self_financingE"], ["proof (prove)\nusing this:\n  arbitrage_process Mkt p\n  disc_filtr_prob_space ?M ?F \\<Longrightarrow>\n  disc_filtr_prob_space.arbitrage_process ?M ?F ?Mkt ?p =\n  (\\<exists>m.\n      self_financing ?Mkt ?p \\<and>\n      disc_filtr_prob_space.trading_strategy ?F ?p \\<and>\n      (\\<forall>w\\<in>space ?M. val_process ?Mkt ?p 0 w = 0) \\<and>\n      (AE w in ?M. 0 \\<le> cls_val_process ?Mkt ?p m w) \\<and>\n      0 < \\<P>(w in ?M. 0 < cls_val_process ?Mkt ?p m w))\n  disc_filtr_prob_space M F\n  self_financing ?Mkt ?p \\<Longrightarrow>\n  \\<forall>n. val_process ?Mkt ?p n = cls_val_process ?Mkt ?p n\n\ngoal (1 subgoal):\n 1. \\<exists>m.\n       self_financing Mkt p \\<and>\n       trading_strategy p \\<and>\n       (\\<forall>w\\<in>space M. cls_val_process Mkt p 0 w = 0) \\<and>\n       (AE w in M. 0 \\<le> cls_val_process Mkt p m w) \\<and>\n       0 < prob {w \\<in> space M. 0 < cls_val_process Mkt p m w}", "by fastforce"], ["", "lemma (in disc_filtr_prob_space) arbitrage_processI:\n  assumes \"(\\<exists> m. (self_financing Mkt p) \\<and> (trading_strategy p) \\<and>\n    (\\<forall>w \\<in> space M. cls_val_process Mkt p 0 w = 0) \\<and>\n    (AE w in M. 0 \\<le> cls_val_process Mkt p m w) \\<and>\n    0 < \\<P>(w in M. cls_val_process Mkt p m w > 0))\"\n  shows \"arbitrage_process Mkt p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. arbitrage_process Mkt p", "unfolding arbitrage_process_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>m.\n       self_financing Mkt p \\<and>\n       trading_strategy p \\<and>\n       (\\<forall>w\\<in>space M. val_process Mkt p 0 w = 0) \\<and>\n       (AE w in M. 0 \\<le> cls_val_process Mkt p m w) \\<and>\n       0 < prob {w \\<in> space M. 0 < cls_val_process Mkt p m w}", "using assms"], ["proof (prove)\nusing this:\n  \\<exists>m.\n     self_financing Mkt p \\<and>\n     trading_strategy p \\<and>\n     (\\<forall>w\\<in>space M. cls_val_process Mkt p 0 w = 0) \\<and>\n     (AE w in M. 0 \\<le> cls_val_process Mkt p m w) \\<and>\n     0 < prob {w \\<in> space M. 0 < cls_val_process Mkt p m w}\n\ngoal (1 subgoal):\n 1. \\<exists>m.\n       self_financing Mkt p \\<and>\n       trading_strategy p \\<and>\n       (\\<forall>w\\<in>space M. val_process Mkt p 0 w = 0) \\<and>\n       (AE w in M. 0 \\<le> cls_val_process Mkt p m w) \\<and>\n       0 < prob {w \\<in> space M. 0 < cls_val_process Mkt p m w}", "by (simp add: self_financingE cls_val_process_def)"], ["", "definition (in disc_filtr_prob_space) viable_market\nwhere\n  \"viable_market Mkt  \\<longleftrightarrow> (\\<forall>p. stock_portfolio Mkt p \\<longrightarrow> \\<not> arbitrage_process Mkt p)\""], ["", "lemma (in disc_filtr_prob_space) arbitrage_val_process:\n  assumes \"arbitrage_process Mkt pf1\"\n  and \"self_financing Mkt pf2\"\n  and \"trading_strategy pf2\"\n  and \"\\<forall> n w. cls_val_process Mkt pf1 n w = cls_val_process Mkt pf2 n w\"\nshows \"arbitrage_process Mkt pf2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. arbitrage_process Mkt pf2", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. arbitrage_process Mkt pf2", "have \"(\\<exists> m. (self_financing Mkt pf1) \\<and> (trading_strategy pf1) \\<and>\n    (\\<forall>w \\<in> space M. cls_val_process Mkt pf1 0 w = 0) \\<and>\n    (AE w in M. 0 \\<le> cls_val_process Mkt pf1 m w) \\<and>\n    0 < \\<P>(w in M. cls_val_process Mkt pf1 m w > 0))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>m.\n       self_financing Mkt pf1 \\<and>\n       trading_strategy pf1 \\<and>\n       (\\<forall>w\\<in>space M. cls_val_process Mkt pf1 0 w = 0) \\<and>\n       (AE w in M. 0 \\<le> cls_val_process Mkt pf1 m w) \\<and>\n       0 < prob {w \\<in> space M. 0 < cls_val_process Mkt pf1 m w}", "using assms arbitrage_processE[of Mkt pf1]"], ["proof (prove)\nusing this:\n  arbitrage_process Mkt pf1\n  self_financing Mkt pf2\n  trading_strategy pf2\n  \\<forall>n w. cls_val_process Mkt pf1 n w = cls_val_process Mkt pf2 n w\n  arbitrage_process Mkt pf1 \\<Longrightarrow>\n  \\<exists>m.\n     self_financing Mkt pf1 \\<and>\n     trading_strategy pf1 \\<and>\n     (\\<forall>w\\<in>space M. cls_val_process Mkt pf1 0 w = 0) \\<and>\n     (AE w in M. 0 \\<le> cls_val_process Mkt pf1 m w) \\<and>\n     0 < prob {w \\<in> space M. 0 < cls_val_process Mkt pf1 m w}\n\ngoal (1 subgoal):\n 1. \\<exists>m.\n       self_financing Mkt pf1 \\<and>\n       trading_strategy pf1 \\<and>\n       (\\<forall>w\\<in>space M. cls_val_process Mkt pf1 0 w = 0) \\<and>\n       (AE w in M. 0 \\<le> cls_val_process Mkt pf1 m w) \\<and>\n       0 < prob {w \\<in> space M. 0 < cls_val_process Mkt pf1 m w}", "by simp"], ["proof (state)\nthis:\n  \\<exists>m.\n     self_financing Mkt pf1 \\<and>\n     trading_strategy pf1 \\<and>\n     (\\<forall>w\\<in>space M. cls_val_process Mkt pf1 0 w = 0) \\<and>\n     (AE w in M. 0 \\<le> cls_val_process Mkt pf1 m w) \\<and>\n     0 < prob {w \\<in> space M. 0 < cls_val_process Mkt pf1 m w}\n\ngoal (1 subgoal):\n 1. arbitrage_process Mkt pf2", "from this"], ["proof (chain)\npicking this:\n  \\<exists>m.\n     self_financing Mkt pf1 \\<and>\n     trading_strategy pf1 \\<and>\n     (\\<forall>w\\<in>space M. cls_val_process Mkt pf1 0 w = 0) \\<and>\n     (AE w in M. 0 \\<le> cls_val_process Mkt pf1 m w) \\<and>\n     0 < prob {w \\<in> space M. 0 < cls_val_process Mkt pf1 m w}", "obtain m where \"(self_financing Mkt pf1)\" and \"(trading_strategy pf1)\" and\n    \"(\\<forall>w \\<in> space M. cls_val_process Mkt pf1 0 w = 0)\" and\n    \"(AE w in M. 0 \\<le> cls_val_process Mkt pf1 m w)\"\n    \"0 < \\<P>(w in M. cls_val_process Mkt pf1 m w > 0)\""], ["proof (prove)\nusing this:\n  \\<exists>m.\n     self_financing Mkt pf1 \\<and>\n     trading_strategy pf1 \\<and>\n     (\\<forall>w\\<in>space M. cls_val_process Mkt pf1 0 w = 0) \\<and>\n     (AE w in M. 0 \\<le> cls_val_process Mkt pf1 m w) \\<and>\n     0 < prob {w \\<in> space M. 0 < cls_val_process Mkt pf1 m w}\n\ngoal (1 subgoal):\n 1. (\\<And>m.\n        \\<lbrakk>self_financing Mkt pf1; trading_strategy pf1;\n         \\<forall>w\\<in>space M. cls_val_process Mkt pf1 0 w = 0;\n         AE w in M. 0 \\<le> cls_val_process Mkt pf1 m w;\n         0 < prob\n              {w \\<in> space M. 0 < cls_val_process Mkt pf1 m w}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  self_financing Mkt pf1\n  trading_strategy pf1\n  \\<forall>w\\<in>space M. cls_val_process Mkt pf1 0 w = 0\n  AE w in M. 0 \\<le> cls_val_process Mkt pf1 m w\n  0 < prob {w \\<in> space M. 0 < cls_val_process Mkt pf1 m w}\n\ngoal (1 subgoal):\n 1. arbitrage_process Mkt pf2", "have ae_eq:\"\\<forall>w\\<in> space M. (cls_val_process Mkt pf1 0 w = 0) = (cls_val_process Mkt pf2 0 w = 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>w\\<in>space M.\n       (cls_val_process Mkt pf1 0 w = 0) = (cls_val_process Mkt pf2 0 w = 0)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>w.\n       w \\<in> space M \\<Longrightarrow>\n       (cls_val_process Mkt pf1 0 w = 0) = (cls_val_process Mkt pf2 0 w = 0)", "fix w"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>w.\n       w \\<in> space M \\<Longrightarrow>\n       (cls_val_process Mkt pf1 0 w = 0) = (cls_val_process Mkt pf2 0 w = 0)", "assume \"w\\<in> space M\""], ["proof (state)\nthis:\n  w \\<in> space M\n\ngoal (1 subgoal):\n 1. \\<And>w.\n       w \\<in> space M \\<Longrightarrow>\n       (cls_val_process Mkt pf1 0 w = 0) = (cls_val_process Mkt pf2 0 w = 0)", "show \"(cls_val_process Mkt pf1 0 w = 0) = (cls_val_process Mkt pf2 0 w = 0) \""], ["proof (prove)\ngoal (1 subgoal):\n 1. (cls_val_process Mkt pf1 0 w = 0) = (cls_val_process Mkt pf2 0 w = 0)", "using  assms"], ["proof (prove)\nusing this:\n  arbitrage_process Mkt pf1\n  self_financing Mkt pf2\n  trading_strategy pf2\n  \\<forall>n w. cls_val_process Mkt pf1 n w = cls_val_process Mkt pf2 n w\n\ngoal (1 subgoal):\n 1. (cls_val_process Mkt pf1 0 w = 0) = (cls_val_process Mkt pf2 0 w = 0)", "by simp"], ["proof (state)\nthis:\n  (cls_val_process Mkt pf1 0 w = 0) = (cls_val_process Mkt pf2 0 w = 0)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>w\\<in>space M.\n     (cls_val_process Mkt pf1 0 w = 0) = (cls_val_process Mkt pf2 0 w = 0)\n\ngoal (1 subgoal):\n 1. arbitrage_process Mkt pf2", "have ae_geq:\"almost_everywhere M (\\<lambda>w. cls_val_process Mkt pf1 m w \\<ge> 0) = almost_everywhere M (\\<lambda>w. cls_val_process Mkt pf2 m w \\<ge> 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (AE w in M. 0 \\<le> cls_val_process Mkt pf1 m w) =\n    (AE w in M. 0 \\<le> cls_val_process Mkt pf2 m w)", "proof (rule AE_cong)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>w.\n       w \\<in> space M \\<Longrightarrow>\n       (0 \\<le> cls_val_process Mkt pf1 m w) =\n       (0 \\<le> cls_val_process Mkt pf2 m w)", "fix w"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>w.\n       w \\<in> space M \\<Longrightarrow>\n       (0 \\<le> cls_val_process Mkt pf1 m w) =\n       (0 \\<le> cls_val_process Mkt pf2 m w)", "assume \"w\\<in> space M\""], ["proof (state)\nthis:\n  w \\<in> space M\n\ngoal (1 subgoal):\n 1. \\<And>w.\n       w \\<in> space M \\<Longrightarrow>\n       (0 \\<le> cls_val_process Mkt pf1 m w) =\n       (0 \\<le> cls_val_process Mkt pf2 m w)", "show \"(cls_val_process Mkt pf1 m w \\<ge> 0) = (cls_val_process Mkt pf2 m w \\<ge> 0) \""], ["proof (prove)\ngoal (1 subgoal):\n 1. (0 \\<le> cls_val_process Mkt pf1 m w) =\n    (0 \\<le> cls_val_process Mkt pf2 m w)", "using  assms"], ["proof (prove)\nusing this:\n  arbitrage_process Mkt pf1\n  self_financing Mkt pf2\n  trading_strategy pf2\n  \\<forall>n w. cls_val_process Mkt pf1 n w = cls_val_process Mkt pf2 n w\n\ngoal (1 subgoal):\n 1. (0 \\<le> cls_val_process Mkt pf1 m w) =\n    (0 \\<le> cls_val_process Mkt pf2 m w)", "by simp"], ["proof (state)\nthis:\n  (0 \\<le> cls_val_process Mkt pf1 m w) =\n  (0 \\<le> cls_val_process Mkt pf2 m w)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (AE w in M. 0 \\<le> cls_val_process Mkt pf1 m w) =\n  (AE w in M. 0 \\<le> cls_val_process Mkt pf2 m w)\n\ngoal (1 subgoal):\n 1. arbitrage_process Mkt pf2", "have \"self_financing Mkt pf2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. self_financing Mkt pf2", "using assms"], ["proof (prove)\nusing this:\n  arbitrage_process Mkt pf1\n  self_financing Mkt pf2\n  trading_strategy pf2\n  \\<forall>n w. cls_val_process Mkt pf1 n w = cls_val_process Mkt pf2 n w\n\ngoal (1 subgoal):\n 1. self_financing Mkt pf2", "by simp"], ["proof (state)\nthis:\n  self_financing Mkt pf2\n\ngoal (1 subgoal):\n 1. arbitrage_process Mkt pf2", "moreover"], ["proof (state)\nthis:\n  self_financing Mkt pf2\n\ngoal (1 subgoal):\n 1. arbitrage_process Mkt pf2", "have \"trading_strategy pf2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. trading_strategy pf2", "using assms"], ["proof (prove)\nusing this:\n  arbitrage_process Mkt pf1\n  self_financing Mkt pf2\n  trading_strategy pf2\n  \\<forall>n w. cls_val_process Mkt pf1 n w = cls_val_process Mkt pf2 n w\n\ngoal (1 subgoal):\n 1. trading_strategy pf2", "by simp"], ["proof (state)\nthis:\n  trading_strategy pf2\n\ngoal (1 subgoal):\n 1. arbitrage_process Mkt pf2", "moreover"], ["proof (state)\nthis:\n  trading_strategy pf2\n\ngoal (1 subgoal):\n 1. arbitrage_process Mkt pf2", "have \"(\\<forall>w \\<in> space M. cls_val_process Mkt pf2 0 w = 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>w\\<in>space M. cls_val_process Mkt pf2 0 w = 0", "using \\<open>(\\<forall>w \\<in> space M. cls_val_process Mkt pf1 0 w = 0)\\<close> ae_eq"], ["proof (prove)\nusing this:\n  \\<forall>w\\<in>space M. cls_val_process Mkt pf1 0 w = 0\n  \\<forall>w\\<in>space M.\n     (cls_val_process Mkt pf1 0 w = 0) = (cls_val_process Mkt pf2 0 w = 0)\n\ngoal (1 subgoal):\n 1. \\<forall>w\\<in>space M. cls_val_process Mkt pf2 0 w = 0", "by simp"], ["proof (state)\nthis:\n  \\<forall>w\\<in>space M. cls_val_process Mkt pf2 0 w = 0\n\ngoal (1 subgoal):\n 1. arbitrage_process Mkt pf2", "moreover"], ["proof (state)\nthis:\n  \\<forall>w\\<in>space M. cls_val_process Mkt pf2 0 w = 0\n\ngoal (1 subgoal):\n 1. arbitrage_process Mkt pf2", "have \"AE w in M. 0 \\<le> cls_val_process Mkt pf2 m w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. AE w in M. 0 \\<le> cls_val_process Mkt pf2 m w", "using \\<open>AE w in M. 0 \\<le> cls_val_process Mkt pf1 m w\\<close> ae_geq"], ["proof (prove)\nusing this:\n  AE w in M. 0 \\<le> cls_val_process Mkt pf1 m w\n  (AE w in M. 0 \\<le> cls_val_process Mkt pf1 m w) =\n  (AE w in M. 0 \\<le> cls_val_process Mkt pf2 m w)\n\ngoal (1 subgoal):\n 1. AE w in M. 0 \\<le> cls_val_process Mkt pf2 m w", "by simp"], ["proof (state)\nthis:\n  AE w in M. 0 \\<le> cls_val_process Mkt pf2 m w\n\ngoal (1 subgoal):\n 1. arbitrage_process Mkt pf2", "moreover"], ["proof (state)\nthis:\n  AE w in M. 0 \\<le> cls_val_process Mkt pf2 m w\n\ngoal (1 subgoal):\n 1. arbitrage_process Mkt pf2", "have \"0 < prob {w \\<in> space M. 0 < cls_val_process Mkt pf2 m w}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < prob {w \\<in> space M. 0 < cls_val_process Mkt pf2 m w}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. 0 < prob {w \\<in> space M. 0 < cls_val_process Mkt pf2 m w}", "have \"{w \\<in> space M. 0 < cls_val_process Mkt pf2 m w} = {w \\<in> space M. 0 < cls_val_process Mkt pf1 m w}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {w \\<in> space M. 0 < cls_val_process Mkt pf2 m w} =\n    {w \\<in> space M. 0 < cls_val_process Mkt pf1 m w}", "by (simp add: assms(4))"], ["proof (state)\nthis:\n  {w \\<in> space M. 0 < cls_val_process Mkt pf2 m w} =\n  {w \\<in> space M. 0 < cls_val_process Mkt pf1 m w}\n\ngoal (1 subgoal):\n 1. 0 < prob {w \\<in> space M. 0 < cls_val_process Mkt pf2 m w}", "thus ?thesis"], ["proof (prove)\nusing this:\n  {w \\<in> space M. 0 < cls_val_process Mkt pf2 m w} =\n  {w \\<in> space M. 0 < cls_val_process Mkt pf1 m w}\n\ngoal (1 subgoal):\n 1. 0 < prob {w \\<in> space M. 0 < cls_val_process Mkt pf2 m w}", "by (simp add: \\<open>0 < prob {w \\<in> space M. 0 < cls_val_process Mkt pf1 m w}\\<close>)"], ["proof (state)\nthis:\n  0 < prob {w \\<in> space M. 0 < cls_val_process Mkt pf2 m w}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  0 < prob {w \\<in> space M. 0 < cls_val_process Mkt pf2 m w}\n\ngoal (1 subgoal):\n 1. arbitrage_process Mkt pf2", "ultimately"], ["proof (chain)\npicking this:\n  self_financing Mkt pf2\n  trading_strategy pf2\n  \\<forall>w\\<in>space M. cls_val_process Mkt pf2 0 w = 0\n  AE w in M. 0 \\<le> cls_val_process Mkt pf2 m w\n  0 < prob {w \\<in> space M. 0 < cls_val_process Mkt pf2 m w}", "show ?thesis"], ["proof (prove)\nusing this:\n  self_financing Mkt pf2\n  trading_strategy pf2\n  \\<forall>w\\<in>space M. cls_val_process Mkt pf2 0 w = 0\n  AE w in M. 0 \\<le> cls_val_process Mkt pf2 m w\n  0 < prob {w \\<in> space M. 0 < cls_val_process Mkt pf2 m w}\n\ngoal (1 subgoal):\n 1. arbitrage_process Mkt pf2", "using arbitrage_processI"], ["proof (prove)\nusing this:\n  self_financing Mkt pf2\n  trading_strategy pf2\n  \\<forall>w\\<in>space M. cls_val_process Mkt pf2 0 w = 0\n  AE w in M. 0 \\<le> cls_val_process Mkt pf2 m w\n  0 < prob {w \\<in> space M. 0 < cls_val_process Mkt pf2 m w}\n  \\<exists>m.\n     self_financing ?Mkt ?p \\<and>\n     trading_strategy ?p \\<and>\n     (\\<forall>w\\<in>space M. cls_val_process ?Mkt ?p 0 w = 0) \\<and>\n     (AE w in M. 0 \\<le> cls_val_process ?Mkt ?p m w) \\<and>\n     0 < prob\n          {w \\<in> space M.\n           0 < cls_val_process ?Mkt ?p m w} \\<Longrightarrow>\n  arbitrage_process ?Mkt ?p\n\ngoal (1 subgoal):\n 1. arbitrage_process Mkt pf2", "by blast"], ["proof (state)\nthis:\n  arbitrage_process Mkt pf2\n\ngoal:\nNo subgoals!", "qed"], ["", "definition coincides_on where\n  \"coincides_on Mkt Mkt2 A \\<longleftrightarrow> (stocks Mkt = stocks Mkt2 \\<and> (\\<forall>x. x\\<in> A \\<longrightarrow> prices Mkt x = prices Mkt2 x))\""], ["", "lemma coincides_val_process:\n  assumes \"coincides_on Mkt Mkt2 A\"\n  and \"support_set pf \\<subseteq> A\"\n  shows \"\\<forall>n w. val_process Mkt pf n w = val_process Mkt2 pf n w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n w. val_process Mkt pf n w = val_process Mkt2 pf n w", "proof (intro allI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n w. val_process Mkt pf n w = val_process Mkt2 pf n w", "fix n w"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n w. val_process Mkt pf n w = val_process Mkt2 pf n w", "show \"val_process Mkt pf n w = val_process Mkt2 pf n w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. val_process Mkt pf n w = val_process Mkt2 pf n w", "proof (cases \"portfolio pf\")"], ["proof (state)\ngoal (2 subgoals):\n 1. portfolio pf \\<Longrightarrow>\n    val_process Mkt pf n w = val_process Mkt2 pf n w\n 2. \\<not> portfolio pf \\<Longrightarrow>\n    val_process Mkt pf n w = val_process Mkt2 pf n w", "case False"], ["proof (state)\nthis:\n  \\<not> portfolio pf\n\ngoal (2 subgoals):\n 1. portfolio pf \\<Longrightarrow>\n    val_process Mkt pf n w = val_process Mkt2 pf n w\n 2. \\<not> portfolio pf \\<Longrightarrow>\n    val_process Mkt pf n w = val_process Mkt2 pf n w", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<not> portfolio pf\n\ngoal (1 subgoal):\n 1. val_process Mkt pf n w = val_process Mkt2 pf n w", "unfolding val_process_def"], ["proof (prove)\nusing this:\n  \\<not> portfolio pf\n\ngoal (1 subgoal):\n 1. (if \\<not> portfolio pf then \\<lambda>n w. 0\n     else (\\<lambda>n w.\n              \\<Sum>x\\<in>support_set pf.\n                prices Mkt x n w * pf x (Suc n) w))\n     n w =\n    (if \\<not> portfolio pf then \\<lambda>n w. 0\n     else (\\<lambda>n w.\n              \\<Sum>x\\<in>support_set pf.\n                prices Mkt2 x n w * pf x (Suc n) w))\n     n w", "by simp"], ["proof (state)\nthis:\n  val_process Mkt pf n w = val_process Mkt2 pf n w\n\ngoal (1 subgoal):\n 1. portfolio pf \\<Longrightarrow>\n    val_process Mkt pf n w = val_process Mkt2 pf n w", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. portfolio pf \\<Longrightarrow>\n    val_process Mkt pf n w = val_process Mkt2 pf n w", "case True"], ["proof (state)\nthis:\n  portfolio pf\n\ngoal (1 subgoal):\n 1. portfolio pf \\<Longrightarrow>\n    val_process Mkt pf n w = val_process Mkt2 pf n w", "hence \"val_process Mkt pf n w = (\\<Sum>x\\<in> support_set pf. prices Mkt x n w * pf x (Suc n) w)\""], ["proof (prove)\nusing this:\n  portfolio pf\n\ngoal (1 subgoal):\n 1. val_process Mkt pf n w =\n    (\\<Sum>x\\<in>support_set pf. prices Mkt x n w * pf x (Suc n) w)", "using assms"], ["proof (prove)\nusing this:\n  portfolio pf\n  coincides_on Mkt Mkt2 A\n  support_set pf \\<subseteq> A\n\ngoal (1 subgoal):\n 1. val_process Mkt pf n w =\n    (\\<Sum>x\\<in>support_set pf. prices Mkt x n w * pf x (Suc n) w)", "unfolding val_process_def"], ["proof (prove)\nusing this:\n  portfolio pf\n  coincides_on Mkt Mkt2 A\n  support_set pf \\<subseteq> A\n\ngoal (1 subgoal):\n 1. (if \\<not> portfolio pf then \\<lambda>n w. 0\n     else (\\<lambda>n w.\n              \\<Sum>x\\<in>support_set pf.\n                prices Mkt x n w * pf x (Suc n) w))\n     n w =\n    (\\<Sum>x\\<in>support_set pf. prices Mkt x n w * pf x (Suc n) w)", "by simp"], ["proof (state)\nthis:\n  val_process Mkt pf n w =\n  (\\<Sum>x\\<in>support_set pf. prices Mkt x n w * pf x (Suc n) w)\n\ngoal (1 subgoal):\n 1. portfolio pf \\<Longrightarrow>\n    val_process Mkt pf n w = val_process Mkt2 pf n w", "also"], ["proof (state)\nthis:\n  val_process Mkt pf n w =\n  (\\<Sum>x\\<in>support_set pf. prices Mkt x n w * pf x (Suc n) w)\n\ngoal (1 subgoal):\n 1. portfolio pf \\<Longrightarrow>\n    val_process Mkt pf n w = val_process Mkt2 pf n w", "have \"... = (\\<Sum>x\\<in> support_set pf. prices Mkt2 x n w * pf x (Suc n) w)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>support_set pf. prices Mkt x n w * pf x (Suc n) w) =\n    (\\<Sum>x\\<in>support_set pf. prices Mkt2 x n w * pf x (Suc n) w)", "proof (rule sum.cong, simp)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> support_set pf \\<Longrightarrow>\n       prices Mkt x n w * pf x (Suc n) w =\n       prices Mkt2 x n w * pf x (Suc n) w", "fix y"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> support_set pf \\<Longrightarrow>\n       prices Mkt x n w * pf x (Suc n) w =\n       prices Mkt2 x n w * pf x (Suc n) w", "assume \"y\\<in> support_set pf\""], ["proof (state)\nthis:\n  y \\<in> support_set pf\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> support_set pf \\<Longrightarrow>\n       prices Mkt x n w * pf x (Suc n) w =\n       prices Mkt2 x n w * pf x (Suc n) w", "hence \"y\\<in> A\""], ["proof (prove)\nusing this:\n  y \\<in> support_set pf\n\ngoal (1 subgoal):\n 1. y \\<in> A", "using assms"], ["proof (prove)\nusing this:\n  y \\<in> support_set pf\n  coincides_on Mkt Mkt2 A\n  support_set pf \\<subseteq> A\n\ngoal (1 subgoal):\n 1. y \\<in> A", "unfolding  stock_portfolio_def"], ["proof (prove)\nusing this:\n  y \\<in> support_set pf\n  coincides_on Mkt Mkt2 A\n  support_set pf \\<subseteq> A\n\ngoal (1 subgoal):\n 1. y \\<in> A", "by auto"], ["proof (state)\nthis:\n  y \\<in> A\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> support_set pf \\<Longrightarrow>\n       prices Mkt x n w * pf x (Suc n) w =\n       prices Mkt2 x n w * pf x (Suc n) w", "hence \"prices Mkt y n w = prices Mkt2 y n w\""], ["proof (prove)\nusing this:\n  y \\<in> A\n\ngoal (1 subgoal):\n 1. prices Mkt y n w = prices Mkt2 y n w", "using assms"], ["proof (prove)\nusing this:\n  y \\<in> A\n  coincides_on Mkt Mkt2 A\n  support_set pf \\<subseteq> A\n\ngoal (1 subgoal):\n 1. prices Mkt y n w = prices Mkt2 y n w", "unfolding coincides_on_def"], ["proof (prove)\nusing this:\n  y \\<in> A\n  stocks Mkt = stocks Mkt2 \\<and>\n  (\\<forall>x. x \\<in> A \\<longrightarrow> prices Mkt x = prices Mkt2 x)\n  support_set pf \\<subseteq> A\n\ngoal (1 subgoal):\n 1. prices Mkt y n w = prices Mkt2 y n w", "by auto"], ["proof (state)\nthis:\n  prices Mkt y n w = prices Mkt2 y n w\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> support_set pf \\<Longrightarrow>\n       prices Mkt x n w * pf x (Suc n) w =\n       prices Mkt2 x n w * pf x (Suc n) w", "thus \"prices Mkt y n w * pf y (Suc n) w = prices Mkt2 y n w * pf y (Suc n) w\""], ["proof (prove)\nusing this:\n  prices Mkt y n w = prices Mkt2 y n w\n\ngoal (1 subgoal):\n 1. prices Mkt y n w * pf y (Suc n) w = prices Mkt2 y n w * pf y (Suc n) w", "by simp"], ["proof (state)\nthis:\n  prices Mkt y n w * pf y (Suc n) w = prices Mkt2 y n w * pf y (Suc n) w\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>support_set pf. prices Mkt x n w * pf x (Suc n) w) =\n  (\\<Sum>x\\<in>support_set pf. prices Mkt2 x n w * pf x (Suc n) w)\n\ngoal (1 subgoal):\n 1. portfolio pf \\<Longrightarrow>\n    val_process Mkt pf n w = val_process Mkt2 pf n w", "also"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>support_set pf. prices Mkt x n w * pf x (Suc n) w) =\n  (\\<Sum>x\\<in>support_set pf. prices Mkt2 x n w * pf x (Suc n) w)\n\ngoal (1 subgoal):\n 1. portfolio pf \\<Longrightarrow>\n    val_process Mkt pf n w = val_process Mkt2 pf n w", "have \"... = val_process Mkt2 pf n w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>support_set pf. prices Mkt2 x n w * pf x (Suc n) w) =\n    val_process Mkt2 pf n w", "by (metis (mono_tags, lifting) calculation val_process_def)"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>support_set pf. prices Mkt2 x n w * pf x (Suc n) w) =\n  val_process Mkt2 pf n w\n\ngoal (1 subgoal):\n 1. portfolio pf \\<Longrightarrow>\n    val_process Mkt pf n w = val_process Mkt2 pf n w", "finally"], ["proof (chain)\npicking this:\n  val_process Mkt pf n w = val_process Mkt2 pf n w", "show \"val_process Mkt pf n w = val_process Mkt2 pf n w\""], ["proof (prove)\nusing this:\n  val_process Mkt pf n w = val_process Mkt2 pf n w\n\ngoal (1 subgoal):\n 1. val_process Mkt pf n w = val_process Mkt2 pf n w", "."], ["proof (state)\nthis:\n  val_process Mkt pf n w = val_process Mkt2 pf n w\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  val_process Mkt pf n w = val_process Mkt2 pf n w\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma coincides_cls_val_process':\n  assumes \"coincides_on Mkt Mkt2 A\"\n  and \"support_set pf \\<subseteq> A\"\n  shows \"\\<forall>n w. cls_val_process Mkt pf (Suc n) w = cls_val_process Mkt2 pf (Suc n) w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n w.\n       cls_val_process Mkt pf (Suc n) w = cls_val_process Mkt2 pf (Suc n) w", "proof (intro allI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n w.\n       cls_val_process Mkt pf (Suc n) w = cls_val_process Mkt2 pf (Suc n) w", "fix n w"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n w.\n       cls_val_process Mkt pf (Suc n) w = cls_val_process Mkt2 pf (Suc n) w", "show \"cls_val_process Mkt pf (Suc n) w = cls_val_process Mkt2 pf (Suc n) w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cls_val_process Mkt pf (Suc n) w = cls_val_process Mkt2 pf (Suc n) w", "proof (cases \"portfolio pf\")"], ["proof (state)\ngoal (2 subgoals):\n 1. portfolio pf \\<Longrightarrow>\n    cls_val_process Mkt pf (Suc n) w = cls_val_process Mkt2 pf (Suc n) w\n 2. \\<not> portfolio pf \\<Longrightarrow>\n    cls_val_process Mkt pf (Suc n) w = cls_val_process Mkt2 pf (Suc n) w", "case False"], ["proof (state)\nthis:\n  \\<not> portfolio pf\n\ngoal (2 subgoals):\n 1. portfolio pf \\<Longrightarrow>\n    cls_val_process Mkt pf (Suc n) w = cls_val_process Mkt2 pf (Suc n) w\n 2. \\<not> portfolio pf \\<Longrightarrow>\n    cls_val_process Mkt pf (Suc n) w = cls_val_process Mkt2 pf (Suc n) w", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<not> portfolio pf\n\ngoal (1 subgoal):\n 1. cls_val_process Mkt pf (Suc n) w = cls_val_process Mkt2 pf (Suc n) w", "unfolding cls_val_process_def"], ["proof (prove)\nusing this:\n  \\<not> portfolio pf\n\ngoal (1 subgoal):\n 1. (if \\<not> portfolio pf then \\<lambda>n w. 0 else up_cl_proc Mkt pf)\n     (Suc n) w =\n    (if \\<not> portfolio pf then \\<lambda>n w. 0 else up_cl_proc Mkt2 pf)\n     (Suc n) w", "by simp"], ["proof (state)\nthis:\n  cls_val_process Mkt pf (Suc n) w = cls_val_process Mkt2 pf (Suc n) w\n\ngoal (1 subgoal):\n 1. portfolio pf \\<Longrightarrow>\n    cls_val_process Mkt pf (Suc n) w = cls_val_process Mkt2 pf (Suc n) w", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. portfolio pf \\<Longrightarrow>\n    cls_val_process Mkt pf (Suc n) w = cls_val_process Mkt2 pf (Suc n) w", "case True"], ["proof (state)\nthis:\n  portfolio pf\n\ngoal (1 subgoal):\n 1. portfolio pf \\<Longrightarrow>\n    cls_val_process Mkt pf (Suc n) w = cls_val_process Mkt2 pf (Suc n) w", "hence \"cls_val_process Mkt pf (Suc n) w = (\\<Sum>x\\<in> support_set pf. prices Mkt x (Suc n) w * pf x (Suc n) w)\""], ["proof (prove)\nusing this:\n  portfolio pf\n\ngoal (1 subgoal):\n 1. cls_val_process Mkt pf (Suc n) w =\n    (\\<Sum>x\\<in>support_set pf. prices Mkt x (Suc n) w * pf x (Suc n) w)", "using assms"], ["proof (prove)\nusing this:\n  portfolio pf\n  coincides_on Mkt Mkt2 A\n  support_set pf \\<subseteq> A\n\ngoal (1 subgoal):\n 1. cls_val_process Mkt pf (Suc n) w =\n    (\\<Sum>x\\<in>support_set pf. prices Mkt x (Suc n) w * pf x (Suc n) w)", "unfolding cls_val_process_def"], ["proof (prove)\nusing this:\n  portfolio pf\n  coincides_on Mkt Mkt2 A\n  support_set pf \\<subseteq> A\n\ngoal (1 subgoal):\n 1. (if \\<not> portfolio pf then \\<lambda>n w. 0 else up_cl_proc Mkt pf)\n     (Suc n) w =\n    (\\<Sum>x\\<in>support_set pf. prices Mkt x (Suc n) w * pf x (Suc n) w)", "by simp"], ["proof (state)\nthis:\n  cls_val_process Mkt pf (Suc n) w =\n  (\\<Sum>x\\<in>support_set pf. prices Mkt x (Suc n) w * pf x (Suc n) w)\n\ngoal (1 subgoal):\n 1. portfolio pf \\<Longrightarrow>\n    cls_val_process Mkt pf (Suc n) w = cls_val_process Mkt2 pf (Suc n) w", "also"], ["proof (state)\nthis:\n  cls_val_process Mkt pf (Suc n) w =\n  (\\<Sum>x\\<in>support_set pf. prices Mkt x (Suc n) w * pf x (Suc n) w)\n\ngoal (1 subgoal):\n 1. portfolio pf \\<Longrightarrow>\n    cls_val_process Mkt pf (Suc n) w = cls_val_process Mkt2 pf (Suc n) w", "have \"... = (\\<Sum>x\\<in> support_set pf. prices Mkt2 x (Suc n) w * pf x (Suc n) w)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>support_set pf. prices Mkt x (Suc n) w * pf x (Suc n) w) =\n    (\\<Sum>x\\<in>support_set pf. prices Mkt2 x (Suc n) w * pf x (Suc n) w)", "proof (rule sum.cong, simp)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> support_set pf \\<Longrightarrow>\n       prices Mkt x (Suc n) w * pf x (Suc n) w =\n       prices Mkt2 x (Suc n) w * pf x (Suc n) w", "fix y"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> support_set pf \\<Longrightarrow>\n       prices Mkt x (Suc n) w * pf x (Suc n) w =\n       prices Mkt2 x (Suc n) w * pf x (Suc n) w", "assume \"y\\<in> support_set pf\""], ["proof (state)\nthis:\n  y \\<in> support_set pf\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> support_set pf \\<Longrightarrow>\n       prices Mkt x (Suc n) w * pf x (Suc n) w =\n       prices Mkt2 x (Suc n) w * pf x (Suc n) w", "hence \"y\\<in> A\""], ["proof (prove)\nusing this:\n  y \\<in> support_set pf\n\ngoal (1 subgoal):\n 1. y \\<in> A", "using assms"], ["proof (prove)\nusing this:\n  y \\<in> support_set pf\n  coincides_on Mkt Mkt2 A\n  support_set pf \\<subseteq> A\n\ngoal (1 subgoal):\n 1. y \\<in> A", "unfolding  stock_portfolio_def"], ["proof (prove)\nusing this:\n  y \\<in> support_set pf\n  coincides_on Mkt Mkt2 A\n  support_set pf \\<subseteq> A\n\ngoal (1 subgoal):\n 1. y \\<in> A", "by auto"], ["proof (state)\nthis:\n  y \\<in> A\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> support_set pf \\<Longrightarrow>\n       prices Mkt x (Suc n) w * pf x (Suc n) w =\n       prices Mkt2 x (Suc n) w * pf x (Suc n) w", "hence \"prices Mkt y (Suc n) w = prices Mkt2 y (Suc n) w\""], ["proof (prove)\nusing this:\n  y \\<in> A\n\ngoal (1 subgoal):\n 1. prices Mkt y (Suc n) w = prices Mkt2 y (Suc n) w", "using assms"], ["proof (prove)\nusing this:\n  y \\<in> A\n  coincides_on Mkt Mkt2 A\n  support_set pf \\<subseteq> A\n\ngoal (1 subgoal):\n 1. prices Mkt y (Suc n) w = prices Mkt2 y (Suc n) w", "unfolding coincides_on_def"], ["proof (prove)\nusing this:\n  y \\<in> A\n  stocks Mkt = stocks Mkt2 \\<and>\n  (\\<forall>x. x \\<in> A \\<longrightarrow> prices Mkt x = prices Mkt2 x)\n  support_set pf \\<subseteq> A\n\ngoal (1 subgoal):\n 1. prices Mkt y (Suc n) w = prices Mkt2 y (Suc n) w", "by auto"], ["proof (state)\nthis:\n  prices Mkt y (Suc n) w = prices Mkt2 y (Suc n) w\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> support_set pf \\<Longrightarrow>\n       prices Mkt x (Suc n) w * pf x (Suc n) w =\n       prices Mkt2 x (Suc n) w * pf x (Suc n) w", "thus \"prices Mkt y (Suc n) w * pf y (Suc n) w = prices Mkt2 y (Suc n) w * pf y (Suc n) w\""], ["proof (prove)\nusing this:\n  prices Mkt y (Suc n) w = prices Mkt2 y (Suc n) w\n\ngoal (1 subgoal):\n 1. prices Mkt y (Suc n) w * pf y (Suc n) w =\n    prices Mkt2 y (Suc n) w * pf y (Suc n) w", "by simp"], ["proof (state)\nthis:\n  prices Mkt y (Suc n) w * pf y (Suc n) w =\n  prices Mkt2 y (Suc n) w * pf y (Suc n) w\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>support_set pf. prices Mkt x (Suc n) w * pf x (Suc n) w) =\n  (\\<Sum>x\\<in>support_set pf. prices Mkt2 x (Suc n) w * pf x (Suc n) w)\n\ngoal (1 subgoal):\n 1. portfolio pf \\<Longrightarrow>\n    cls_val_process Mkt pf (Suc n) w = cls_val_process Mkt2 pf (Suc n) w", "also"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>support_set pf. prices Mkt x (Suc n) w * pf x (Suc n) w) =\n  (\\<Sum>x\\<in>support_set pf. prices Mkt2 x (Suc n) w * pf x (Suc n) w)\n\ngoal (1 subgoal):\n 1. portfolio pf \\<Longrightarrow>\n    cls_val_process Mkt pf (Suc n) w = cls_val_process Mkt2 pf (Suc n) w", "have \"... = cls_val_process Mkt2 pf (Suc n) w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>support_set pf. prices Mkt2 x (Suc n) w * pf x (Suc n) w) =\n    cls_val_process Mkt2 pf (Suc n) w", "by (metis (mono_tags, lifting) True  up_cl_proc.simps(2) cls_val_process_def)"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>support_set pf. prices Mkt2 x (Suc n) w * pf x (Suc n) w) =\n  cls_val_process Mkt2 pf (Suc n) w\n\ngoal (1 subgoal):\n 1. portfolio pf \\<Longrightarrow>\n    cls_val_process Mkt pf (Suc n) w = cls_val_process Mkt2 pf (Suc n) w", "finally"], ["proof (chain)\npicking this:\n  cls_val_process Mkt pf (Suc n) w = cls_val_process Mkt2 pf (Suc n) w", "show \"cls_val_process Mkt pf (Suc n) w = cls_val_process Mkt2 pf (Suc n) w\""], ["proof (prove)\nusing this:\n  cls_val_process Mkt pf (Suc n) w = cls_val_process Mkt2 pf (Suc n) w\n\ngoal (1 subgoal):\n 1. cls_val_process Mkt pf (Suc n) w = cls_val_process Mkt2 pf (Suc n) w", "."], ["proof (state)\nthis:\n  cls_val_process Mkt pf (Suc n) w = cls_val_process Mkt2 pf (Suc n) w\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  cls_val_process Mkt pf (Suc n) w = cls_val_process Mkt2 pf (Suc n) w\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma coincides_cls_val_process:\n  assumes \"coincides_on Mkt Mkt2 A\"\n  and \"support_set pf \\<subseteq> A\"\n  shows \"\\<forall>n w. cls_val_process Mkt pf n w = cls_val_process Mkt2 pf n w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n w. cls_val_process Mkt pf n w = cls_val_process Mkt2 pf n w", "proof (intro allI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n w. cls_val_process Mkt pf n w = cls_val_process Mkt2 pf n w", "fix n w"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n w. cls_val_process Mkt pf n w = cls_val_process Mkt2 pf n w", "show \"cls_val_process Mkt pf n w = cls_val_process Mkt2 pf n w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cls_val_process Mkt pf n w = cls_val_process Mkt2 pf n w", "proof (cases \"portfolio pf\")"], ["proof (state)\ngoal (2 subgoals):\n 1. portfolio pf \\<Longrightarrow>\n    cls_val_process Mkt pf n w = cls_val_process Mkt2 pf n w\n 2. \\<not> portfolio pf \\<Longrightarrow>\n    cls_val_process Mkt pf n w = cls_val_process Mkt2 pf n w", "case False"], ["proof (state)\nthis:\n  \\<not> portfolio pf\n\ngoal (2 subgoals):\n 1. portfolio pf \\<Longrightarrow>\n    cls_val_process Mkt pf n w = cls_val_process Mkt2 pf n w\n 2. \\<not> portfolio pf \\<Longrightarrow>\n    cls_val_process Mkt pf n w = cls_val_process Mkt2 pf n w", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<not> portfolio pf\n\ngoal (1 subgoal):\n 1. cls_val_process Mkt pf n w = cls_val_process Mkt2 pf n w", "unfolding cls_val_process_def"], ["proof (prove)\nusing this:\n  \\<not> portfolio pf\n\ngoal (1 subgoal):\n 1. (if \\<not> portfolio pf then \\<lambda>n w. 0 else up_cl_proc Mkt pf) n\n     w =\n    (if \\<not> portfolio pf then \\<lambda>n w. 0 else up_cl_proc Mkt2 pf) n\n     w", "by simp"], ["proof (state)\nthis:\n  cls_val_process Mkt pf n w = cls_val_process Mkt2 pf n w\n\ngoal (1 subgoal):\n 1. portfolio pf \\<Longrightarrow>\n    cls_val_process Mkt pf n w = cls_val_process Mkt2 pf n w", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. portfolio pf \\<Longrightarrow>\n    cls_val_process Mkt pf n w = cls_val_process Mkt2 pf n w", "case True"], ["proof (state)\nthis:\n  portfolio pf\n\ngoal (1 subgoal):\n 1. portfolio pf \\<Longrightarrow>\n    cls_val_process Mkt pf n w = cls_val_process Mkt2 pf n w", "show \"cls_val_process Mkt pf n w = cls_val_process Mkt2 pf n w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cls_val_process Mkt pf n w = cls_val_process Mkt2 pf n w", "proof (induct n)"], ["proof (state)\ngoal (2 subgoals):\n 1. cls_val_process Mkt pf 0 w = cls_val_process Mkt2 pf 0 w\n 2. \\<And>n.\n       cls_val_process Mkt pf n w =\n       cls_val_process Mkt2 pf n w \\<Longrightarrow>\n       cls_val_process Mkt pf (Suc n) w = cls_val_process Mkt2 pf (Suc n) w", "case 0"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. cls_val_process Mkt pf 0 w = cls_val_process Mkt2 pf 0 w\n 2. \\<And>n.\n       cls_val_process Mkt pf n w =\n       cls_val_process Mkt2 pf n w \\<Longrightarrow>\n       cls_val_process Mkt pf (Suc n) w = cls_val_process Mkt2 pf (Suc n) w", "with assms"], ["proof (chain)\npicking this:\n  coincides_on Mkt Mkt2 A\n  support_set pf \\<subseteq> A", "show ?case"], ["proof (prove)\nusing this:\n  coincides_on Mkt Mkt2 A\n  support_set pf \\<subseteq> A\n\ngoal (1 subgoal):\n 1. cls_val_process Mkt pf 0 w = cls_val_process Mkt2 pf 0 w", "by (simp add: cls_val_process_def coincides_val_process)"], ["proof (state)\nthis:\n  cls_val_process Mkt pf 0 w = cls_val_process Mkt2 pf 0 w\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       cls_val_process Mkt pf n w =\n       cls_val_process Mkt2 pf n w \\<Longrightarrow>\n       cls_val_process Mkt pf (Suc n) w = cls_val_process Mkt2 pf (Suc n) w", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       cls_val_process Mkt pf n w =\n       cls_val_process Mkt2 pf n w \\<Longrightarrow>\n       cls_val_process Mkt pf (Suc n) w = cls_val_process Mkt2 pf (Suc n) w", "case Suc"], ["proof (state)\nthis:\n  cls_val_process Mkt pf n_ w = cls_val_process Mkt2 pf n_ w\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       cls_val_process Mkt pf n w =\n       cls_val_process Mkt2 pf n w \\<Longrightarrow>\n       cls_val_process Mkt pf (Suc n) w = cls_val_process Mkt2 pf (Suc n) w", "thus ?case"], ["proof (prove)\nusing this:\n  cls_val_process Mkt pf n_ w = cls_val_process Mkt2 pf n_ w\n\ngoal (1 subgoal):\n 1. cls_val_process Mkt pf (Suc n_) w = cls_val_process Mkt2 pf (Suc n_) w", "using coincides_cls_val_process' assms"], ["proof (prove)\nusing this:\n  cls_val_process Mkt pf n_ w = cls_val_process Mkt2 pf n_ w\n  \\<lbrakk>coincides_on ?Mkt ?Mkt2.0 ?A;\n   support_set ?pf \\<subseteq> ?A\\<rbrakk>\n  \\<Longrightarrow> \\<forall>n w.\n                       cls_val_process ?Mkt ?pf (Suc n) w =\n                       cls_val_process ?Mkt2.0 ?pf (Suc n) w\n  coincides_on Mkt Mkt2 A\n  support_set pf \\<subseteq> A\n\ngoal (1 subgoal):\n 1. cls_val_process Mkt pf (Suc n_) w = cls_val_process Mkt2 pf (Suc n_) w", "by blast"], ["proof (state)\nthis:\n  cls_val_process Mkt pf (Suc n_) w = cls_val_process Mkt2 pf (Suc n_) w\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  cls_val_process Mkt pf n w = cls_val_process Mkt2 pf n w\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  cls_val_process Mkt pf n w = cls_val_process Mkt2 pf n w\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in disc_filtr_prob_space) coincides_on_self_financing:\n  assumes \"coincides_on Mkt Mkt2 A\"\n  and \"support_set p \\<subseteq> A\"\n  and \"self_financing Mkt p\"\nshows \"self_financing Mkt2 p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. self_financing Mkt2 p", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. self_financing Mkt2 p", "have \"\\<forall> n w. val_process Mkt2 p (Suc n) w = cls_val_process Mkt2 p (Suc n) w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n w.\n       val_process Mkt2 p (Suc n) w = cls_val_process Mkt2 p (Suc n) w", "proof (intro allI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n w.\n       val_process Mkt2 p (Suc n) w = cls_val_process Mkt2 p (Suc n) w", "fix n w"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n w.\n       val_process Mkt2 p (Suc n) w = cls_val_process Mkt2 p (Suc n) w", "have \"val_process Mkt2 p (Suc n) w = val_process Mkt p (Suc n) w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. val_process Mkt2 p (Suc n) w = val_process Mkt p (Suc n) w", "using assms(1) assms(2) coincides_val_process stock_portfolio_def"], ["proof (prove)\nusing this:\n  coincides_on Mkt Mkt2 A\n  support_set p \\<subseteq> A\n  \\<lbrakk>coincides_on ?Mkt ?Mkt2.0 ?A;\n   support_set ?pf \\<subseteq> ?A\\<rbrakk>\n  \\<Longrightarrow> \\<forall>n w.\n                       val_process ?Mkt ?pf n w =\n                       val_process ?Mkt2.0 ?pf n w\n  stock_portfolio ?Mkt ?p =\n  (portfolio ?p \\<and> support_set ?p \\<subseteq> stocks ?Mkt)\n\ngoal (1 subgoal):\n 1. val_process Mkt2 p (Suc n) w = val_process Mkt p (Suc n) w", "by fastforce"], ["proof (state)\nthis:\n  val_process Mkt2 p (Suc n) w = val_process Mkt p (Suc n) w\n\ngoal (1 subgoal):\n 1. \\<And>n w.\n       val_process Mkt2 p (Suc n) w = cls_val_process Mkt2 p (Suc n) w", "also"], ["proof (state)\nthis:\n  val_process Mkt2 p (Suc n) w = val_process Mkt p (Suc n) w\n\ngoal (1 subgoal):\n 1. \\<And>n w.\n       val_process Mkt2 p (Suc n) w = cls_val_process Mkt2 p (Suc n) w", "have \"... = cls_val_process Mkt p (Suc n) w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. val_process Mkt p (Suc n) w = cls_val_process Mkt p (Suc n) w", "by (metis \\<open>self_financing Mkt p\\<close> self_financing_def)"], ["proof (state)\nthis:\n  val_process Mkt p (Suc n) w = cls_val_process Mkt p (Suc n) w\n\ngoal (1 subgoal):\n 1. \\<And>n w.\n       val_process Mkt2 p (Suc n) w = cls_val_process Mkt2 p (Suc n) w", "also"], ["proof (state)\nthis:\n  val_process Mkt p (Suc n) w = cls_val_process Mkt p (Suc n) w\n\ngoal (1 subgoal):\n 1. \\<And>n w.\n       val_process Mkt2 p (Suc n) w = cls_val_process Mkt2 p (Suc n) w", "have \"... = cls_val_process Mkt2 p (Suc n) w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cls_val_process Mkt p (Suc n) w = cls_val_process Mkt2 p (Suc n) w", "using assms(1) assms(2) coincides_cls_val_process stock_portfolio_def"], ["proof (prove)\nusing this:\n  coincides_on Mkt Mkt2 A\n  support_set p \\<subseteq> A\n  \\<lbrakk>coincides_on ?Mkt ?Mkt2.0 ?A;\n   support_set ?pf \\<subseteq> ?A\\<rbrakk>\n  \\<Longrightarrow> \\<forall>n w.\n                       cls_val_process ?Mkt ?pf n w =\n                       cls_val_process ?Mkt2.0 ?pf n w\n  stock_portfolio ?Mkt ?p =\n  (portfolio ?p \\<and> support_set ?p \\<subseteq> stocks ?Mkt)\n\ngoal (1 subgoal):\n 1. cls_val_process Mkt p (Suc n) w = cls_val_process Mkt2 p (Suc n) w", "by blast"], ["proof (state)\nthis:\n  cls_val_process Mkt p (Suc n) w = cls_val_process Mkt2 p (Suc n) w\n\ngoal (1 subgoal):\n 1. \\<And>n w.\n       val_process Mkt2 p (Suc n) w = cls_val_process Mkt2 p (Suc n) w", "finally"], ["proof (chain)\npicking this:\n  val_process Mkt2 p (Suc n) w = cls_val_process Mkt2 p (Suc n) w", "show \"val_process Mkt2 p (Suc n) w = cls_val_process Mkt2 p (Suc n) w\""], ["proof (prove)\nusing this:\n  val_process Mkt2 p (Suc n) w = cls_val_process Mkt2 p (Suc n) w\n\ngoal (1 subgoal):\n 1. val_process Mkt2 p (Suc n) w = cls_val_process Mkt2 p (Suc n) w", "."], ["proof (state)\nthis:\n  val_process Mkt2 p (Suc n) w = cls_val_process Mkt2 p (Suc n) w\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>n w.\n     val_process Mkt2 p (Suc n) w = cls_val_process Mkt2 p (Suc n) w\n\ngoal (1 subgoal):\n 1. self_financing Mkt2 p", "thus \"self_financing Mkt2 p\""], ["proof (prove)\nusing this:\n  \\<forall>n w.\n     val_process Mkt2 p (Suc n) w = cls_val_process Mkt2 p (Suc n) w\n\ngoal (1 subgoal):\n 1. self_financing Mkt2 p", "unfolding self_financing_def"], ["proof (prove)\nusing this:\n  \\<forall>n w.\n     val_process Mkt2 p (Suc n) w = cls_val_process Mkt2 p (Suc n) w\n\ngoal (1 subgoal):\n 1. \\<forall>n. val_process Mkt2 p (Suc n) = cls_val_process Mkt2 p (Suc n)", "by auto"], ["proof (state)\nthis:\n  self_financing Mkt2 p\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in disc_filtr_prob_space) coincides_on_arbitrage:\n  assumes \"coincides_on Mkt Mkt2 A\"\n  and \"support_set p \\<subseteq> A\"\n  and \"arbitrage_process Mkt p\"\nshows \"arbitrage_process Mkt2 p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. arbitrage_process Mkt2 p", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. arbitrage_process Mkt2 p", "have \"(\\<exists> m. (self_financing Mkt p) \\<and> (trading_strategy p) \\<and>\n    (\\<forall>w\\<in> space M. cls_val_process Mkt p 0 w = 0) \\<and>\n    (AE w in M. 0 \\<le> cls_val_process Mkt p m w) \\<and>\n    0 < \\<P>(w in M. cls_val_process Mkt p m w > 0))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>m.\n       self_financing Mkt p \\<and>\n       trading_strategy p \\<and>\n       (\\<forall>w\\<in>space M. cls_val_process Mkt p 0 w = 0) \\<and>\n       (AE w in M. 0 \\<le> cls_val_process Mkt p m w) \\<and>\n       0 < prob {w \\<in> space M. 0 < cls_val_process Mkt p m w}", "using assms"], ["proof (prove)\nusing this:\n  coincides_on Mkt Mkt2 A\n  support_set p \\<subseteq> A\n  arbitrage_process Mkt p\n\ngoal (1 subgoal):\n 1. \\<exists>m.\n       self_financing Mkt p \\<and>\n       trading_strategy p \\<and>\n       (\\<forall>w\\<in>space M. cls_val_process Mkt p 0 w = 0) \\<and>\n       (AE w in M. 0 \\<le> cls_val_process Mkt p m w) \\<and>\n       0 < prob {w \\<in> space M. 0 < cls_val_process Mkt p m w}", "using arbitrage_processE"], ["proof (prove)\nusing this:\n  coincides_on Mkt Mkt2 A\n  support_set p \\<subseteq> A\n  arbitrage_process Mkt p\n  arbitrage_process ?Mkt ?p \\<Longrightarrow>\n  \\<exists>m.\n     self_financing ?Mkt ?p \\<and>\n     trading_strategy ?p \\<and>\n     (\\<forall>w\\<in>space M. cls_val_process ?Mkt ?p 0 w = 0) \\<and>\n     (AE w in M. 0 \\<le> cls_val_process ?Mkt ?p m w) \\<and>\n     0 < prob {w \\<in> space M. 0 < cls_val_process ?Mkt ?p m w}\n\ngoal (1 subgoal):\n 1. \\<exists>m.\n       self_financing Mkt p \\<and>\n       trading_strategy p \\<and>\n       (\\<forall>w\\<in>space M. cls_val_process Mkt p 0 w = 0) \\<and>\n       (AE w in M. 0 \\<le> cls_val_process Mkt p m w) \\<and>\n       0 < prob {w \\<in> space M. 0 < cls_val_process Mkt p m w}", "by simp"], ["proof (state)\nthis:\n  \\<exists>m.\n     self_financing Mkt p \\<and>\n     trading_strategy p \\<and>\n     (\\<forall>w\\<in>space M. cls_val_process Mkt p 0 w = 0) \\<and>\n     (AE w in M. 0 \\<le> cls_val_process Mkt p m w) \\<and>\n     0 < prob {w \\<in> space M. 0 < cls_val_process Mkt p m w}\n\ngoal (1 subgoal):\n 1. arbitrage_process Mkt2 p", "from this"], ["proof (chain)\npicking this:\n  \\<exists>m.\n     self_financing Mkt p \\<and>\n     trading_strategy p \\<and>\n     (\\<forall>w\\<in>space M. cls_val_process Mkt p 0 w = 0) \\<and>\n     (AE w in M. 0 \\<le> cls_val_process Mkt p m w) \\<and>\n     0 < prob {w \\<in> space M. 0 < cls_val_process Mkt p m w}", "obtain m where \"(self_financing Mkt p)\" and \"(trading_strategy p)\" and\n    \"(\\<forall>w\\<in> space M. cls_val_process Mkt p 0 w = 0)\" and\n    \"(AE w in M. 0 \\<le> cls_val_process Mkt p m w)\"\n    \"0 < \\<P>(w in M. cls_val_process Mkt p m w > 0)\""], ["proof (prove)\nusing this:\n  \\<exists>m.\n     self_financing Mkt p \\<and>\n     trading_strategy p \\<and>\n     (\\<forall>w\\<in>space M. cls_val_process Mkt p 0 w = 0) \\<and>\n     (AE w in M. 0 \\<le> cls_val_process Mkt p m w) \\<and>\n     0 < prob {w \\<in> space M. 0 < cls_val_process Mkt p m w}\n\ngoal (1 subgoal):\n 1. (\\<And>m.\n        \\<lbrakk>self_financing Mkt p; trading_strategy p;\n         \\<forall>w\\<in>space M. cls_val_process Mkt p 0 w = 0;\n         AE w in M. 0 \\<le> cls_val_process Mkt p m w;\n         0 < prob {w \\<in> space M. 0 < cls_val_process Mkt p m w}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  self_financing Mkt p\n  trading_strategy p\n  \\<forall>w\\<in>space M. cls_val_process Mkt p 0 w = 0\n  AE w in M. 0 \\<le> cls_val_process Mkt p m w\n  0 < prob {w \\<in> space M. 0 < cls_val_process Mkt p m w}\n\ngoal (1 subgoal):\n 1. arbitrage_process Mkt2 p", "have ae_eq:\"\\<forall>w\\<in> space M. (cls_val_process Mkt2 p 0 w = 0) = (cls_val_process Mkt p 0 w = 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>w\\<in>space M.\n       (cls_val_process Mkt2 p 0 w = 0) = (cls_val_process Mkt p 0 w = 0)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>w.\n       w \\<in> space M \\<Longrightarrow>\n       (cls_val_process Mkt2 p 0 w = 0) = (cls_val_process Mkt p 0 w = 0)", "fix w"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>w.\n       w \\<in> space M \\<Longrightarrow>\n       (cls_val_process Mkt2 p 0 w = 0) = (cls_val_process Mkt p 0 w = 0)", "assume \"w\\<in> space M\""], ["proof (state)\nthis:\n  w \\<in> space M\n\ngoal (1 subgoal):\n 1. \\<And>w.\n       w \\<in> space M \\<Longrightarrow>\n       (cls_val_process Mkt2 p 0 w = 0) = (cls_val_process Mkt p 0 w = 0)", "show \"(cls_val_process Mkt2 p 0 w = 0) = (cls_val_process Mkt p 0 w = 0) \""], ["proof (prove)\ngoal (1 subgoal):\n 1. (cls_val_process Mkt2 p 0 w = 0) = (cls_val_process Mkt p 0 w = 0)", "using  assms coincides_cls_val_process"], ["proof (prove)\nusing this:\n  coincides_on Mkt Mkt2 A\n  support_set p \\<subseteq> A\n  arbitrage_process Mkt p\n  \\<lbrakk>coincides_on ?Mkt ?Mkt2.0 ?A;\n   support_set ?pf \\<subseteq> ?A\\<rbrakk>\n  \\<Longrightarrow> \\<forall>n w.\n                       cls_val_process ?Mkt ?pf n w =\n                       cls_val_process ?Mkt2.0 ?pf n w\n\ngoal (1 subgoal):\n 1. (cls_val_process Mkt2 p 0 w = 0) = (cls_val_process Mkt p 0 w = 0)", "by (metis)"], ["proof (state)\nthis:\n  (cls_val_process Mkt2 p 0 w = 0) = (cls_val_process Mkt p 0 w = 0)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>w\\<in>space M.\n     (cls_val_process Mkt2 p 0 w = 0) = (cls_val_process Mkt p 0 w = 0)\n\ngoal (1 subgoal):\n 1. arbitrage_process Mkt2 p", "have ae_geq:\"almost_everywhere M (\\<lambda>w. cls_val_process Mkt2 p m w \\<ge> 0) = almost_everywhere M (\\<lambda>w. cls_val_process Mkt p m w \\<ge> 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (AE w in M. 0 \\<le> cls_val_process Mkt2 p m w) =\n    (AE w in M. 0 \\<le> cls_val_process Mkt p m w)", "proof (rule AE_cong)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>w.\n       w \\<in> space M \\<Longrightarrow>\n       (0 \\<le> cls_val_process Mkt2 p m w) =\n       (0 \\<le> cls_val_process Mkt p m w)", "fix w"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>w.\n       w \\<in> space M \\<Longrightarrow>\n       (0 \\<le> cls_val_process Mkt2 p m w) =\n       (0 \\<le> cls_val_process Mkt p m w)", "assume \"w\\<in> space M\""], ["proof (state)\nthis:\n  w \\<in> space M\n\ngoal (1 subgoal):\n 1. \\<And>w.\n       w \\<in> space M \\<Longrightarrow>\n       (0 \\<le> cls_val_process Mkt2 p m w) =\n       (0 \\<le> cls_val_process Mkt p m w)", "show \"(cls_val_process Mkt2 p m w \\<ge> 0) = (cls_val_process Mkt p m w \\<ge> 0) \""], ["proof (prove)\ngoal (1 subgoal):\n 1. (0 \\<le> cls_val_process Mkt2 p m w) =\n    (0 \\<le> cls_val_process Mkt p m w)", "using  assms coincides_cls_val_process"], ["proof (prove)\nusing this:\n  coincides_on Mkt Mkt2 A\n  support_set p \\<subseteq> A\n  arbitrage_process Mkt p\n  \\<lbrakk>coincides_on ?Mkt ?Mkt2.0 ?A;\n   support_set ?pf \\<subseteq> ?A\\<rbrakk>\n  \\<Longrightarrow> \\<forall>n w.\n                       cls_val_process ?Mkt ?pf n w =\n                       cls_val_process ?Mkt2.0 ?pf n w\n\ngoal (1 subgoal):\n 1. (0 \\<le> cls_val_process Mkt2 p m w) =\n    (0 \\<le> cls_val_process Mkt p m w)", "by (metis)"], ["proof (state)\nthis:\n  (0 \\<le> cls_val_process Mkt2 p m w) = (0 \\<le> cls_val_process Mkt p m w)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (AE w in M. 0 \\<le> cls_val_process Mkt2 p m w) =\n  (AE w in M. 0 \\<le> cls_val_process Mkt p m w)\n\ngoal (1 subgoal):\n 1. arbitrage_process Mkt2 p", "have \"self_financing Mkt2 p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. self_financing Mkt2 p", "using assms coincides_on_self_financing"], ["proof (prove)\nusing this:\n  coincides_on Mkt Mkt2 A\n  support_set p \\<subseteq> A\n  arbitrage_process Mkt p\n  \\<lbrakk>coincides_on ?Mkt ?Mkt2.0 ?A; support_set ?p \\<subseteq> ?A;\n   self_financing ?Mkt ?p\\<rbrakk>\n  \\<Longrightarrow> self_financing ?Mkt2.0 ?p\n\ngoal (1 subgoal):\n 1. self_financing Mkt2 p", "using \\<open>self_financing Mkt p\\<close>"], ["proof (prove)\nusing this:\n  coincides_on Mkt Mkt2 A\n  support_set p \\<subseteq> A\n  arbitrage_process Mkt p\n  \\<lbrakk>coincides_on ?Mkt ?Mkt2.0 ?A; support_set ?p \\<subseteq> ?A;\n   self_financing ?Mkt ?p\\<rbrakk>\n  \\<Longrightarrow> self_financing ?Mkt2.0 ?p\n  self_financing Mkt p\n\ngoal (1 subgoal):\n 1. self_financing Mkt2 p", "by blast"], ["proof (state)\nthis:\n  self_financing Mkt2 p\n\ngoal (1 subgoal):\n 1. arbitrage_process Mkt2 p", "moreover"], ["proof (state)\nthis:\n  self_financing Mkt2 p\n\ngoal (1 subgoal):\n 1. arbitrage_process Mkt2 p", "have \"trading_strategy p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. trading_strategy p", "using \\<open>trading_strategy p\\<close>"], ["proof (prove)\nusing this:\n  trading_strategy p\n\ngoal (1 subgoal):\n 1. trading_strategy p", "."], ["proof (state)\nthis:\n  trading_strategy p\n\ngoal (1 subgoal):\n 1. arbitrage_process Mkt2 p", "moreover"], ["proof (state)\nthis:\n  trading_strategy p\n\ngoal (1 subgoal):\n 1. arbitrage_process Mkt2 p", "have \"(\\<forall>w\\<in> space M. cls_val_process Mkt2 p 0 w = 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>w\\<in>space M. cls_val_process Mkt2 p 0 w = 0", "using \\<open>(\\<forall>w\\<in> space M. cls_val_process Mkt p 0 w = 0)\\<close> ae_eq"], ["proof (prove)\nusing this:\n  \\<forall>w\\<in>space M. cls_val_process Mkt p 0 w = 0\n  \\<forall>w\\<in>space M.\n     (cls_val_process Mkt2 p 0 w = 0) = (cls_val_process Mkt p 0 w = 0)\n\ngoal (1 subgoal):\n 1. \\<forall>w\\<in>space M. cls_val_process Mkt2 p 0 w = 0", "by simp"], ["proof (state)\nthis:\n  \\<forall>w\\<in>space M. cls_val_process Mkt2 p 0 w = 0\n\ngoal (1 subgoal):\n 1. arbitrage_process Mkt2 p", "moreover"], ["proof (state)\nthis:\n  \\<forall>w\\<in>space M. cls_val_process Mkt2 p 0 w = 0\n\ngoal (1 subgoal):\n 1. arbitrage_process Mkt2 p", "have \"AE w in M. 0 \\<le> cls_val_process Mkt2 p m w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. AE w in M. 0 \\<le> cls_val_process Mkt2 p m w", "using \\<open>AE w in M. 0 \\<le> cls_val_process Mkt p m w\\<close> ae_geq"], ["proof (prove)\nusing this:\n  AE w in M. 0 \\<le> cls_val_process Mkt p m w\n  (AE w in M. 0 \\<le> cls_val_process Mkt2 p m w) =\n  (AE w in M. 0 \\<le> cls_val_process Mkt p m w)\n\ngoal (1 subgoal):\n 1. AE w in M. 0 \\<le> cls_val_process Mkt2 p m w", "by simp"], ["proof (state)\nthis:\n  AE w in M. 0 \\<le> cls_val_process Mkt2 p m w\n\ngoal (1 subgoal):\n 1. arbitrage_process Mkt2 p", "moreover"], ["proof (state)\nthis:\n  AE w in M. 0 \\<le> cls_val_process Mkt2 p m w\n\ngoal (1 subgoal):\n 1. arbitrage_process Mkt2 p", "have \"0 < prob {w \\<in> space M. 0 < cls_val_process Mkt2 p m w}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < prob {w \\<in> space M. 0 < cls_val_process Mkt2 p m w}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. 0 < prob {w \\<in> space M. 0 < cls_val_process Mkt2 p m w}", "have \"{w \\<in> space M. 0 < cls_val_process Mkt2 p m w} = {w \\<in> space M. 0 < cls_val_process Mkt p m w}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {w \\<in> space M. 0 < cls_val_process Mkt2 p m w} =\n    {w \\<in> space M. 0 < cls_val_process Mkt p m w}", "by (metis (no_types, lifting) assms(1) assms(2) coincides_cls_val_process)"], ["proof (state)\nthis:\n  {w \\<in> space M. 0 < cls_val_process Mkt2 p m w} =\n  {w \\<in> space M. 0 < cls_val_process Mkt p m w}\n\ngoal (1 subgoal):\n 1. 0 < prob {w \\<in> space M. 0 < cls_val_process Mkt2 p m w}", "thus ?thesis"], ["proof (prove)\nusing this:\n  {w \\<in> space M. 0 < cls_val_process Mkt2 p m w} =\n  {w \\<in> space M. 0 < cls_val_process Mkt p m w}\n\ngoal (1 subgoal):\n 1. 0 < prob {w \\<in> space M. 0 < cls_val_process Mkt2 p m w}", "by (simp add: \\<open>0 < prob {w \\<in> space M. 0 < cls_val_process Mkt p m w}\\<close>)"], ["proof (state)\nthis:\n  0 < prob {w \\<in> space M. 0 < cls_val_process Mkt2 p m w}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  0 < prob {w \\<in> space M. 0 < cls_val_process Mkt2 p m w}\n\ngoal (1 subgoal):\n 1. arbitrage_process Mkt2 p", "ultimately"], ["proof (chain)\npicking this:\n  self_financing Mkt2 p\n  trading_strategy p\n  \\<forall>w\\<in>space M. cls_val_process Mkt2 p 0 w = 0\n  AE w in M. 0 \\<le> cls_val_process Mkt2 p m w\n  0 < prob {w \\<in> space M. 0 < cls_val_process Mkt2 p m w}", "show ?thesis"], ["proof (prove)\nusing this:\n  self_financing Mkt2 p\n  trading_strategy p\n  \\<forall>w\\<in>space M. cls_val_process Mkt2 p 0 w = 0\n  AE w in M. 0 \\<le> cls_val_process Mkt2 p m w\n  0 < prob {w \\<in> space M. 0 < cls_val_process Mkt2 p m w}\n\ngoal (1 subgoal):\n 1. arbitrage_process Mkt2 p", "using arbitrage_processI"], ["proof (prove)\nusing this:\n  self_financing Mkt2 p\n  trading_strategy p\n  \\<forall>w\\<in>space M. cls_val_process Mkt2 p 0 w = 0\n  AE w in M. 0 \\<le> cls_val_process Mkt2 p m w\n  0 < prob {w \\<in> space M. 0 < cls_val_process Mkt2 p m w}\n  \\<exists>m.\n     self_financing ?Mkt ?p \\<and>\n     trading_strategy ?p \\<and>\n     (\\<forall>w\\<in>space M. cls_val_process ?Mkt ?p 0 w = 0) \\<and>\n     (AE w in M. 0 \\<le> cls_val_process ?Mkt ?p m w) \\<and>\n     0 < prob\n          {w \\<in> space M.\n           0 < cls_val_process ?Mkt ?p m w} \\<Longrightarrow>\n  arbitrage_process ?Mkt ?p\n\ngoal (1 subgoal):\n 1. arbitrage_process Mkt2 p", "by blast"], ["proof (state)\nthis:\n  arbitrage_process Mkt2 p\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in disc_filtr_prob_space) coincides_on_stocks_viable:\n  assumes \"coincides_on Mkt Mkt2 (stocks Mkt)\"\n  and \"viable_market Mkt\"\nshows \"viable_market Mkt2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. viable_market Mkt2", "using coincides_on_arbitrage"], ["proof (prove)\nusing this:\n  \\<lbrakk>coincides_on ?Mkt ?Mkt2.0 ?A; support_set ?p \\<subseteq> ?A;\n   arbitrage_process ?Mkt ?p\\<rbrakk>\n  \\<Longrightarrow> arbitrage_process ?Mkt2.0 ?p\n\ngoal (1 subgoal):\n 1. viable_market Mkt2", "by (metis (mono_tags, hide_lams) assms(1) assms(2) coincides_on_def stock_portfolio_def viable_market_def)"], ["", "lemma coincides_stocks_val_process:\n  assumes \"stock_portfolio Mkt pf\"\n  and \"coincides_on Mkt Mkt2 (stocks Mkt)\"\nshows \"\\<forall>n w. val_process Mkt pf n w = val_process Mkt2 pf n w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n w. val_process Mkt pf n w = val_process Mkt2 pf n w", "using assms"], ["proof (prove)\nusing this:\n  stock_portfolio Mkt pf\n  coincides_on Mkt Mkt2 (stocks Mkt)\n\ngoal (1 subgoal):\n 1. \\<forall>n w. val_process Mkt pf n w = val_process Mkt2 pf n w", "unfolding stock_portfolio_def"], ["proof (prove)\nusing this:\n  portfolio pf \\<and> support_set pf \\<subseteq> stocks Mkt\n  coincides_on Mkt Mkt2 (stocks Mkt)\n\ngoal (1 subgoal):\n 1. \\<forall>n w. val_process Mkt pf n w = val_process Mkt2 pf n w", "by (simp add: coincides_val_process)"], ["", "lemma coincides_stocks_cls_val_process:\n  assumes \"stock_portfolio Mkt pf\"\n  and \"coincides_on Mkt Mkt2 (stocks Mkt)\"\nshows \"\\<forall>n w. cls_val_process Mkt pf n w = cls_val_process Mkt2 pf n w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n w. cls_val_process Mkt pf n w = cls_val_process Mkt2 pf n w", "using assms"], ["proof (prove)\nusing this:\n  stock_portfolio Mkt pf\n  coincides_on Mkt Mkt2 (stocks Mkt)\n\ngoal (1 subgoal):\n 1. \\<forall>n w. cls_val_process Mkt pf n w = cls_val_process Mkt2 pf n w", "unfolding stock_portfolio_def"], ["proof (prove)\nusing this:\n  portfolio pf \\<and> support_set pf \\<subseteq> stocks Mkt\n  coincides_on Mkt Mkt2 (stocks Mkt)\n\ngoal (1 subgoal):\n 1. \\<forall>n w. cls_val_process Mkt pf n w = cls_val_process Mkt2 pf n w", "by (simp add: coincides_cls_val_process)"], ["", "lemma (in disc_filtr_prob_space) coincides_on_adapted_val_process:\n  assumes \"coincides_on Mkt Mkt2 A\"\n  and \"support_set p \\<subseteq> A\"\n  and \"borel_adapt_stoch_proc F (val_process Mkt p)\"\nshows \"borel_adapt_stoch_proc F (val_process Mkt2 p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. borel_adapt_stoch_proc F (val_process Mkt2 p)", "unfolding adapt_stoch_proc_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>t. val_process Mkt2 p t \\<in> borel_measurable (F t)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>t. val_process Mkt2 p t \\<in> borel_measurable (F t)", "fix n"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>t. val_process Mkt2 p t \\<in> borel_measurable (F t)", "have \"val_process Mkt p n \\<in> borel_measurable (F n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. val_process Mkt p n \\<in> borel_measurable (F n)", "using assms"], ["proof (prove)\nusing this:\n  coincides_on Mkt Mkt2 A\n  support_set p \\<subseteq> A\n  borel_adapt_stoch_proc F (val_process Mkt p)\n\ngoal (1 subgoal):\n 1. val_process Mkt p n \\<in> borel_measurable (F n)", "unfolding adapt_stoch_proc_def"], ["proof (prove)\nusing this:\n  coincides_on Mkt Mkt2 A\n  support_set p \\<subseteq> A\n  \\<forall>t. val_process Mkt p t \\<in> borel_measurable (F t)\n\ngoal (1 subgoal):\n 1. val_process Mkt p n \\<in> borel_measurable (F n)", "by simp"], ["proof (state)\nthis:\n  val_process Mkt p n \\<in> borel_measurable (F n)\n\ngoal (1 subgoal):\n 1. \\<And>t. val_process Mkt2 p t \\<in> borel_measurable (F t)", "moreover"], ["proof (state)\nthis:\n  val_process Mkt p n \\<in> borel_measurable (F n)\n\ngoal (1 subgoal):\n 1. \\<And>t. val_process Mkt2 p t \\<in> borel_measurable (F t)", "have \"\\<forall>w. val_process Mkt p n w = val_process Mkt2 p n w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>w. val_process Mkt p n w = val_process Mkt2 p n w", "using assms coincides_val_process[of Mkt Mkt2 A]"], ["proof (prove)\nusing this:\n  coincides_on Mkt Mkt2 A\n  support_set p \\<subseteq> A\n  borel_adapt_stoch_proc F (val_process Mkt p)\n  \\<lbrakk>coincides_on Mkt Mkt2 A; support_set ?pf \\<subseteq> A\\<rbrakk>\n  \\<Longrightarrow> \\<forall>n w.\n                       val_process Mkt ?pf n w = val_process Mkt2 ?pf n w\n\ngoal (1 subgoal):\n 1. \\<forall>w. val_process Mkt p n w = val_process Mkt2 p n w", "by auto"], ["proof (state)\nthis:\n  \\<forall>w. val_process Mkt p n w = val_process Mkt2 p n w\n\ngoal (1 subgoal):\n 1. \\<And>t. val_process Mkt2 p t \\<in> borel_measurable (F t)", "thus \"val_process Mkt2 p n \\<in> borel_measurable (F n)\""], ["proof (prove)\nusing this:\n  \\<forall>w. val_process Mkt p n w = val_process Mkt2 p n w\n\ngoal (1 subgoal):\n 1. val_process Mkt2 p n \\<in> borel_measurable (F n)", "using calculation"], ["proof (prove)\nusing this:\n  \\<forall>w. val_process Mkt p n w = val_process Mkt2 p n w\n  val_process Mkt p n \\<in> borel_measurable (F n)\n\ngoal (1 subgoal):\n 1. val_process Mkt2 p n \\<in> borel_measurable (F n)", "by presburger"], ["proof (state)\nthis:\n  val_process Mkt2 p n \\<in> borel_measurable (F n)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in disc_filtr_prob_space) coincides_on_adapted_cls_val_process:\n  assumes \"coincides_on Mkt Mkt2 A\"\n  and \"support_set p \\<subseteq> A\"\n  and \"borel_adapt_stoch_proc F (cls_val_process Mkt p)\"\nshows \"borel_adapt_stoch_proc F (cls_val_process Mkt2 p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. borel_adapt_stoch_proc F (cls_val_process Mkt2 p)", "unfolding adapt_stoch_proc_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>t. cls_val_process Mkt2 p t \\<in> borel_measurable (F t)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>t. cls_val_process Mkt2 p t \\<in> borel_measurable (F t)", "fix n"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>t. cls_val_process Mkt2 p t \\<in> borel_measurable (F t)", "have \"cls_val_process Mkt p n \\<in> borel_measurable (F n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cls_val_process Mkt p n \\<in> borel_measurable (F n)", "using assms"], ["proof (prove)\nusing this:\n  coincides_on Mkt Mkt2 A\n  support_set p \\<subseteq> A\n  borel_adapt_stoch_proc F (cls_val_process Mkt p)\n\ngoal (1 subgoal):\n 1. cls_val_process Mkt p n \\<in> borel_measurable (F n)", "unfolding adapt_stoch_proc_def"], ["proof (prove)\nusing this:\n  coincides_on Mkt Mkt2 A\n  support_set p \\<subseteq> A\n  \\<forall>t. cls_val_process Mkt p t \\<in> borel_measurable (F t)\n\ngoal (1 subgoal):\n 1. cls_val_process Mkt p n \\<in> borel_measurable (F n)", "by simp"], ["proof (state)\nthis:\n  cls_val_process Mkt p n \\<in> borel_measurable (F n)\n\ngoal (1 subgoal):\n 1. \\<And>t. cls_val_process Mkt2 p t \\<in> borel_measurable (F t)", "moreover"], ["proof (state)\nthis:\n  cls_val_process Mkt p n \\<in> borel_measurable (F n)\n\ngoal (1 subgoal):\n 1. \\<And>t. cls_val_process Mkt2 p t \\<in> borel_measurable (F t)", "have \"\\<forall>w. cls_val_process Mkt p n w = cls_val_process Mkt2 p n w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>w. cls_val_process Mkt p n w = cls_val_process Mkt2 p n w", "using assms coincides_cls_val_process[of Mkt Mkt2 A]"], ["proof (prove)\nusing this:\n  coincides_on Mkt Mkt2 A\n  support_set p \\<subseteq> A\n  borel_adapt_stoch_proc F (cls_val_process Mkt p)\n  \\<lbrakk>coincides_on Mkt Mkt2 A; support_set ?pf \\<subseteq> A\\<rbrakk>\n  \\<Longrightarrow> \\<forall>n w.\n                       cls_val_process Mkt ?pf n w =\n                       cls_val_process Mkt2 ?pf n w\n\ngoal (1 subgoal):\n 1. \\<forall>w. cls_val_process Mkt p n w = cls_val_process Mkt2 p n w", "by auto"], ["proof (state)\nthis:\n  \\<forall>w. cls_val_process Mkt p n w = cls_val_process Mkt2 p n w\n\ngoal (1 subgoal):\n 1. \\<And>t. cls_val_process Mkt2 p t \\<in> borel_measurable (F t)", "thus \"cls_val_process Mkt2 p n \\<in> borel_measurable (F n)\""], ["proof (prove)\nusing this:\n  \\<forall>w. cls_val_process Mkt p n w = cls_val_process Mkt2 p n w\n\ngoal (1 subgoal):\n 1. cls_val_process Mkt2 p n \\<in> borel_measurable (F n)", "using calculation"], ["proof (prove)\nusing this:\n  \\<forall>w. cls_val_process Mkt p n w = cls_val_process Mkt2 p n w\n  cls_val_process Mkt p n \\<in> borel_measurable (F n)\n\ngoal (1 subgoal):\n 1. cls_val_process Mkt2 p n \\<in> borel_measurable (F n)", "by presburger"], ["proof (state)\nthis:\n  cls_val_process Mkt2 p n \\<in> borel_measurable (F n)\n\ngoal:\nNo subgoals!", "qed"], ["", "subsubsection \\<open>Fair prices\\<close>"], ["", "definition (in disc_filtr_prob_space) fair_price where\n  \"fair_price Mkt \\<pi> pyf matur \\<longleftrightarrow>\n    (\\<exists> pr. price_structure pyf matur \\<pi> pr \\<and>\n    (\\<forall> x Mkt2 p. (x\\<notin> stocks Mkt \\<longrightarrow>\n      ((coincides_on Mkt Mkt2 (stocks Mkt)) \\<and> (prices Mkt2 x = pr) \\<and> portfolio p \\<and> support_set p \\<subseteq> stocks Mkt \\<union> {x} \\<longrightarrow>\n        \\<not> arbitrage_process Mkt2 p))))\""], ["", "lemma (in disc_filtr_prob_space) fair_priceI:\n  assumes \"fair_price Mkt \\<pi> pyf matur\"\n  shows \"(\\<exists> pr. price_structure pyf matur \\<pi> pr \\<and>\n    (\\<forall> x. (x\\<notin> stocks Mkt \\<longrightarrow>\n      (\\<forall> Mkt2 p. (coincides_on Mkt Mkt2 (stocks Mkt)) \\<and> (prices Mkt2 x = pr) \\<and> portfolio p \\<and> support_set p \\<subseteq> stocks Mkt \\<union> {x} \\<longrightarrow>\n        \\<not> arbitrage_process Mkt2 p))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>pr.\n       price_structure pyf matur \\<pi> pr \\<and>\n       (\\<forall>x.\n           x \\<notin> stocks Mkt \\<longrightarrow>\n           (\\<forall>Mkt2 p.\n               coincides_on Mkt Mkt2 (stocks Mkt) \\<and>\n               prices Mkt2 x = pr \\<and>\n               portfolio p \\<and>\n               support_set p\n               \\<subseteq> stocks Mkt \\<union> {x} \\<longrightarrow>\n               \\<not> arbitrage_process Mkt2 p))", "using assms"], ["proof (prove)\nusing this:\n  fair_price Mkt \\<pi> pyf matur\n\ngoal (1 subgoal):\n 1. \\<exists>pr.\n       price_structure pyf matur \\<pi> pr \\<and>\n       (\\<forall>x.\n           x \\<notin> stocks Mkt \\<longrightarrow>\n           (\\<forall>Mkt2 p.\n               coincides_on Mkt Mkt2 (stocks Mkt) \\<and>\n               prices Mkt2 x = pr \\<and>\n               portfolio p \\<and>\n               support_set p\n               \\<subseteq> stocks Mkt \\<union> {x} \\<longrightarrow>\n               \\<not> arbitrage_process Mkt2 p))", "unfolding fair_price_def"], ["proof (prove)\nusing this:\n  \\<exists>pr.\n     price_structure pyf matur \\<pi> pr \\<and>\n     (\\<forall>x Mkt2 p.\n         x \\<notin> stocks Mkt \\<longrightarrow>\n         coincides_on Mkt Mkt2 (stocks Mkt) \\<and>\n         prices Mkt2 x = pr \\<and>\n         portfolio p \\<and>\n         support_set p \\<subseteq> stocks Mkt \\<union> {x} \\<longrightarrow>\n         \\<not> arbitrage_process Mkt2 p)\n\ngoal (1 subgoal):\n 1. \\<exists>pr.\n       price_structure pyf matur \\<pi> pr \\<and>\n       (\\<forall>x.\n           x \\<notin> stocks Mkt \\<longrightarrow>\n           (\\<forall>Mkt2 p.\n               coincides_on Mkt Mkt2 (stocks Mkt) \\<and>\n               prices Mkt2 x = pr \\<and>\n               portfolio p \\<and>\n               support_set p\n               \\<subseteq> stocks Mkt \\<union> {x} \\<longrightarrow>\n               \\<not> arbitrage_process Mkt2 p))", "by simp"], ["", "paragraph \\<open>Existence when replicating portfolio\\<close>"], ["", "lemma (in disc_equity_market) replicating_fair_price:\n  assumes \"viable_market Mkt\"\n  and \"replicating_portfolio pf der matur\"\nand \"support_adapt Mkt pf\"\nshows \"fair_price Mkt (initial_value pf) der matur\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fair_price Mkt (initial_value pf) der matur", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> fair_price Mkt (initial_value pf) der matur \\<Longrightarrow>\n    False", "define \\<pi> where  \"\\<pi> = (initial_value pf)\""], ["proof (state)\nthis:\n  \\<pi> = initial_value pf\n\ngoal (1 subgoal):\n 1. \\<not> fair_price Mkt (initial_value pf) der matur \\<Longrightarrow>\n    False", "assume \"\\<not> fair_price Mkt \\<pi> der matur\""], ["proof (state)\nthis:\n  \\<not> fair_price Mkt \\<pi> der matur\n\ngoal (1 subgoal):\n 1. \\<not> fair_price Mkt (initial_value pf) der matur \\<Longrightarrow>\n    False", "hence imps: \"\\<forall>pr. (price_structure der matur \\<pi> pr) \\<longrightarrow>  (\\<exists> x Mkt2 p. (x\\<notin> stocks Mkt \\<and>\n    (coincides_on Mkt Mkt2 (stocks Mkt)) \\<and> (prices Mkt2 x = pr) \\<and> portfolio p \\<and> support_set p \\<subseteq> stocks Mkt \\<union> {x} \\<and>\n     arbitrage_process Mkt2 p))\""], ["proof (prove)\nusing this:\n  \\<not> fair_price Mkt \\<pi> der matur\n\ngoal (1 subgoal):\n 1. \\<forall>pr.\n       price_structure der matur \\<pi> pr \\<longrightarrow>\n       (\\<exists>x Mkt2 p.\n           x \\<notin> stocks Mkt \\<and>\n           coincides_on Mkt Mkt2 (stocks Mkt) \\<and>\n           prices Mkt2 x = pr \\<and>\n           portfolio p \\<and>\n           support_set p \\<subseteq> stocks Mkt \\<union> {x} \\<and>\n           arbitrage_process Mkt2 p)", "unfolding fair_price_def"], ["proof (prove)\nusing this:\n  \\<nexists>pr.\n     price_structure der matur \\<pi> pr \\<and>\n     (\\<forall>x Mkt2 p.\n         x \\<notin> stocks Mkt \\<longrightarrow>\n         coincides_on Mkt Mkt2 (stocks Mkt) \\<and>\n         prices Mkt2 x = pr \\<and>\n         portfolio p \\<and>\n         support_set p \\<subseteq> stocks Mkt \\<union> {x} \\<longrightarrow>\n         \\<not> arbitrage_process Mkt2 p)\n\ngoal (1 subgoal):\n 1. \\<forall>pr.\n       price_structure der matur \\<pi> pr \\<longrightarrow>\n       (\\<exists>x Mkt2 p.\n           x \\<notin> stocks Mkt \\<and>\n           coincides_on Mkt Mkt2 (stocks Mkt) \\<and>\n           prices Mkt2 x = pr \\<and>\n           portfolio p \\<and>\n           support_set p \\<subseteq> stocks Mkt \\<union> {x} \\<and>\n           arbitrage_process Mkt2 p)", "by simp"], ["proof (state)\nthis:\n  \\<forall>pr.\n     price_structure der matur \\<pi> pr \\<longrightarrow>\n     (\\<exists>x Mkt2 p.\n         x \\<notin> stocks Mkt \\<and>\n         coincides_on Mkt Mkt2 (stocks Mkt) \\<and>\n         prices Mkt2 x = pr \\<and>\n         portfolio p \\<and>\n         support_set p \\<subseteq> stocks Mkt \\<union> {x} \\<and>\n         arbitrage_process Mkt2 p)\n\ngoal (1 subgoal):\n 1. \\<not> fair_price Mkt (initial_value pf) der matur \\<Longrightarrow>\n    False", "have \"(price_structure der matur \\<pi> (cls_val_process Mkt pf))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. price_structure der matur \\<pi> (cls_val_process Mkt pf)", "unfolding \\<pi>_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. price_structure der matur (initial_value pf) (cls_val_process Mkt pf)", "using replicating_price_process assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>replicating_portfolio ?pf ?der ?matur;\n   support_adapt Mkt ?pf\\<rbrakk>\n  \\<Longrightarrow> price_structure ?der ?matur (initial_value ?pf)\n                     (cls_val_process Mkt ?pf)\n  viable_market Mkt\n  replicating_portfolio pf der matur\n  support_adapt Mkt pf\n\ngoal (1 subgoal):\n 1. price_structure der matur (initial_value pf) (cls_val_process Mkt pf)", "by simp"], ["proof (state)\nthis:\n  price_structure der matur \\<pi> (cls_val_process Mkt pf)\n\ngoal (1 subgoal):\n 1. \\<not> fair_price Mkt (initial_value pf) der matur \\<Longrightarrow>\n    False", "hence \"\\<exists> x Mkt2 p. (x\\<notin> stocks Mkt \\<and>\n    (coincides_on Mkt Mkt2 (stocks Mkt)) \\<and> (prices Mkt2 x = (cls_val_process Mkt pf)) \\<and> portfolio p \\<and> support_set p \\<subseteq> stocks Mkt \\<union> {x} \\<and>\n     arbitrage_process Mkt2 p)\""], ["proof (prove)\nusing this:\n  price_structure der matur \\<pi> (cls_val_process Mkt pf)\n\ngoal (1 subgoal):\n 1. \\<exists>x Mkt2 p.\n       x \\<notin> stocks Mkt \\<and>\n       coincides_on Mkt Mkt2 (stocks Mkt) \\<and>\n       prices Mkt2 x = cls_val_process Mkt pf \\<and>\n       portfolio p \\<and>\n       support_set p \\<subseteq> stocks Mkt \\<union> {x} \\<and>\n       arbitrage_process Mkt2 p", "using imps"], ["proof (prove)\nusing this:\n  price_structure der matur \\<pi> (cls_val_process Mkt pf)\n  \\<forall>pr.\n     price_structure der matur \\<pi> pr \\<longrightarrow>\n     (\\<exists>x Mkt2 p.\n         x \\<notin> stocks Mkt \\<and>\n         coincides_on Mkt Mkt2 (stocks Mkt) \\<and>\n         prices Mkt2 x = pr \\<and>\n         portfolio p \\<and>\n         support_set p \\<subseteq> stocks Mkt \\<union> {x} \\<and>\n         arbitrage_process Mkt2 p)\n\ngoal (1 subgoal):\n 1. \\<exists>x Mkt2 p.\n       x \\<notin> stocks Mkt \\<and>\n       coincides_on Mkt Mkt2 (stocks Mkt) \\<and>\n       prices Mkt2 x = cls_val_process Mkt pf \\<and>\n       portfolio p \\<and>\n       support_set p \\<subseteq> stocks Mkt \\<union> {x} \\<and>\n       arbitrage_process Mkt2 p", "by simp"], ["proof (state)\nthis:\n  \\<exists>x Mkt2 p.\n     x \\<notin> stocks Mkt \\<and>\n     coincides_on Mkt Mkt2 (stocks Mkt) \\<and>\n     prices Mkt2 x = cls_val_process Mkt pf \\<and>\n     portfolio p \\<and>\n     support_set p \\<subseteq> stocks Mkt \\<union> {x} \\<and>\n     arbitrage_process Mkt2 p\n\ngoal (1 subgoal):\n 1. \\<not> fair_price Mkt (initial_value pf) der matur \\<Longrightarrow>\n    False", "from this"], ["proof (chain)\npicking this:\n  \\<exists>x Mkt2 p.\n     x \\<notin> stocks Mkt \\<and>\n     coincides_on Mkt Mkt2 (stocks Mkt) \\<and>\n     prices Mkt2 x = cls_val_process Mkt pf \\<and>\n     portfolio p \\<and>\n     support_set p \\<subseteq> stocks Mkt \\<union> {x} \\<and>\n     arbitrage_process Mkt2 p", "obtain x Mkt2 p where \"x\\<notin> stocks Mkt\" and \"coincides_on Mkt Mkt2 (stocks Mkt)\" and \"prices Mkt2 x = cls_val_process Mkt pf\"\n    and \"portfolio p\" and \"support_set p\\<subseteq> stocks Mkt \\<union> {x}\" and \"arbitrage_process Mkt2 p\""], ["proof (prove)\nusing this:\n  \\<exists>x Mkt2 p.\n     x \\<notin> stocks Mkt \\<and>\n     coincides_on Mkt Mkt2 (stocks Mkt) \\<and>\n     prices Mkt2 x = cls_val_process Mkt pf \\<and>\n     portfolio p \\<and>\n     support_set p \\<subseteq> stocks Mkt \\<union> {x} \\<and>\n     arbitrage_process Mkt2 p\n\ngoal (1 subgoal):\n 1. (\\<And>x Mkt2 p.\n        \\<lbrakk>x \\<notin> stocks Mkt; coincides_on Mkt Mkt2 (stocks Mkt);\n         prices Mkt2 x = cls_val_process Mkt pf; portfolio p;\n         support_set p \\<subseteq> stocks Mkt \\<union> {x};\n         arbitrage_process Mkt2 p\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  x \\<notin> stocks Mkt\n  coincides_on Mkt Mkt2 (stocks Mkt)\n  prices Mkt2 x = cls_val_process Mkt pf\n  portfolio p\n  support_set p \\<subseteq> stocks Mkt \\<union> {x}\n  arbitrage_process Mkt2 p\n\ngoal (1 subgoal):\n 1. \\<not> fair_price Mkt (initial_value pf) der matur \\<Longrightarrow>\n    False", "have \"\\<forall>n w. cls_val_process Mkt pf n w = cls_val_process Mkt2 pf n w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n w. cls_val_process Mkt pf n w = cls_val_process Mkt2 pf n w", "using coincides_stocks_cls_val_process[of Mkt pf Mkt2] assms \\<open>coincides_on Mkt Mkt2 (stocks Mkt)\\<close>"], ["proof (prove)\nusing this:\n  \\<lbrakk>stock_portfolio Mkt pf;\n   coincides_on Mkt Mkt2 (stocks Mkt)\\<rbrakk>\n  \\<Longrightarrow> \\<forall>n w.\n                       cls_val_process Mkt pf n w =\n                       cls_val_process Mkt2 pf n w\n  viable_market Mkt\n  replicating_portfolio pf der matur\n  support_adapt Mkt pf\n  coincides_on Mkt Mkt2 (stocks Mkt)\n\ngoal (1 subgoal):\n 1. \\<forall>n w. cls_val_process Mkt pf n w = cls_val_process Mkt2 pf n w", "unfolding replicating_portfolio_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>stock_portfolio Mkt pf;\n   coincides_on Mkt Mkt2 (stocks Mkt)\\<rbrakk>\n  \\<Longrightarrow> \\<forall>n w.\n                       cls_val_process Mkt pf n w =\n                       cls_val_process Mkt2 pf n w\n  viable_market Mkt\n  stock_portfolio Mkt pf \\<and>\n  trading_strategy pf \\<and>\n  self_financing Mkt pf \\<and> AEeq M (cls_val_process Mkt pf matur) der\n  support_adapt Mkt pf\n  coincides_on Mkt Mkt2 (stocks Mkt)\n\ngoal (1 subgoal):\n 1. \\<forall>n w. cls_val_process Mkt pf n w = cls_val_process Mkt2 pf n w", "by simp"], ["proof (state)\nthis:\n  \\<forall>n w. cls_val_process Mkt pf n w = cls_val_process Mkt2 pf n w\n\ngoal (1 subgoal):\n 1. \\<not> fair_price Mkt (initial_value pf) der matur \\<Longrightarrow>\n    False", "have \"\\<exists>m. self_financing Mkt2 p \\<and>\n      trading_strategy p \\<and>\n      (AE w in M. cls_val_process Mkt2 p 0 w = 0) \\<and>\n      (AE w in M. 0 \\<le> cls_val_process Mkt2 p m w) \\<and> 0 < prob {w \\<in> space M. 0 < cls_val_process Mkt2 p m w}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>m.\n       self_financing Mkt2 p \\<and>\n       trading_strategy p \\<and>\n       AEeq M (cls_val_process Mkt2 p 0) (\\<lambda>w. 0) \\<and>\n       (AE w in M. 0 \\<le> cls_val_process Mkt2 p m w) \\<and>\n       0 < prob {w \\<in> space M. 0 < cls_val_process Mkt2 p m w}", "using \\<open>arbitrage_process Mkt2 p\\<close>"], ["proof (prove)\nusing this:\n  arbitrage_process Mkt2 p\n\ngoal (1 subgoal):\n 1. \\<exists>m.\n       self_financing Mkt2 p \\<and>\n       trading_strategy p \\<and>\n       AEeq M (cls_val_process Mkt2 p 0) (\\<lambda>w. 0) \\<and>\n       (AE w in M. 0 \\<le> cls_val_process Mkt2 p m w) \\<and>\n       0 < prob {w \\<in> space M. 0 < cls_val_process Mkt2 p m w}", "using arbitrage_processE[of Mkt2]"], ["proof (prove)\nusing this:\n  arbitrage_process Mkt2 p\n  arbitrage_process Mkt2 ?p \\<Longrightarrow>\n  \\<exists>m.\n     self_financing Mkt2 ?p \\<and>\n     trading_strategy ?p \\<and>\n     (\\<forall>w\\<in>space M. cls_val_process Mkt2 ?p 0 w = 0) \\<and>\n     (AE w in M. 0 \\<le> cls_val_process Mkt2 ?p m w) \\<and>\n     0 < prob {w \\<in> space M. 0 < cls_val_process Mkt2 ?p m w}\n\ngoal (1 subgoal):\n 1. \\<exists>m.\n       self_financing Mkt2 p \\<and>\n       trading_strategy p \\<and>\n       AEeq M (cls_val_process Mkt2 p 0) (\\<lambda>w. 0) \\<and>\n       (AE w in M. 0 \\<le> cls_val_process Mkt2 p m w) \\<and>\n       0 < prob {w \\<in> space M. 0 < cls_val_process Mkt2 p m w}", "by simp"], ["proof (state)\nthis:\n  \\<exists>m.\n     self_financing Mkt2 p \\<and>\n     trading_strategy p \\<and>\n     AEeq M (cls_val_process Mkt2 p 0) (\\<lambda>w. 0) \\<and>\n     (AE w in M. 0 \\<le> cls_val_process Mkt2 p m w) \\<and>\n     0 < prob {w \\<in> space M. 0 < cls_val_process Mkt2 p m w}\n\ngoal (1 subgoal):\n 1. \\<not> fair_price Mkt (initial_value pf) der matur \\<Longrightarrow>\n    False", "from this"], ["proof (chain)\npicking this:\n  \\<exists>m.\n     self_financing Mkt2 p \\<and>\n     trading_strategy p \\<and>\n     AEeq M (cls_val_process Mkt2 p 0) (\\<lambda>w. 0) \\<and>\n     (AE w in M. 0 \\<le> cls_val_process Mkt2 p m w) \\<and>\n     0 < prob {w \\<in> space M. 0 < cls_val_process Mkt2 p m w}", "obtain m where \"self_financing Mkt2 p\"\n      \"trading_strategy p \\<and>\n      (AE w in M. cls_val_process Mkt2 p 0 w = 0) \\<and>\n      (AE w in M. 0 \\<le> cls_val_process Mkt2 p m w) \\<and> 0 < prob {w \\<in> space M. 0 < cls_val_process Mkt2 p m w}\""], ["proof (prove)\nusing this:\n  \\<exists>m.\n     self_financing Mkt2 p \\<and>\n     trading_strategy p \\<and>\n     AEeq M (cls_val_process Mkt2 p 0) (\\<lambda>w. 0) \\<and>\n     (AE w in M. 0 \\<le> cls_val_process Mkt2 p m w) \\<and>\n     0 < prob {w \\<in> space M. 0 < cls_val_process Mkt2 p m w}\n\ngoal (1 subgoal):\n 1. (\\<And>m.\n        \\<lbrakk>self_financing Mkt2 p;\n         trading_strategy p \\<and>\n         AEeq M (cls_val_process Mkt2 p 0) (\\<lambda>w. 0) \\<and>\n         (AE w in M. 0 \\<le> cls_val_process Mkt2 p m w) \\<and>\n         0 < prob {w \\<in> space M. 0 < cls_val_process Mkt2 p m w}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  self_financing Mkt2 p\n  trading_strategy p \\<and>\n  AEeq M (cls_val_process Mkt2 p 0) (\\<lambda>w. 0) \\<and>\n  (AE w in M. 0 \\<le> cls_val_process Mkt2 p m w) \\<and>\n  0 < prob {w \\<in> space M. 0 < cls_val_process Mkt2 p m w}\n\ngoal (1 subgoal):\n 1. \\<not> fair_price Mkt (initial_value pf) der matur \\<Longrightarrow>\n    False", "note mprop = this"], ["proof (state)\nthis:\n  self_financing Mkt2 p\n  trading_strategy p \\<and>\n  AEeq M (cls_val_process Mkt2 p 0) (\\<lambda>w. 0) \\<and>\n  (AE w in M. 0 \\<le> cls_val_process Mkt2 p m w) \\<and>\n  0 < prob {w \\<in> space M. 0 < cls_val_process Mkt2 p m w}\n\ngoal (1 subgoal):\n 1. \\<not> fair_price Mkt (initial_value pf) der matur \\<Longrightarrow>\n    False", "define eq_stock where \"eq_stock = qty_replace_comp p x pf\""], ["proof (state)\nthis:\n  eq_stock = qty_replace_comp p x pf\n\ngoal (1 subgoal):\n 1. \\<not> fair_price Mkt (initial_value pf) der matur \\<Longrightarrow>\n    False", "have \"\\<forall>n w. cls_val_process Mkt pf n w = cls_val_process Mkt2 pf n w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n w. cls_val_process Mkt pf n w = cls_val_process Mkt2 pf n w", "using assms"], ["proof (prove)\nusing this:\n  viable_market Mkt\n  replicating_portfolio pf der matur\n  support_adapt Mkt pf\n\ngoal (1 subgoal):\n 1. \\<forall>n w. cls_val_process Mkt pf n w = cls_val_process Mkt2 pf n w", "unfolding replicating_portfolio_def"], ["proof (prove)\nusing this:\n  viable_market Mkt\n  stock_portfolio Mkt pf \\<and>\n  trading_strategy pf \\<and>\n  self_financing Mkt pf \\<and> AEeq M (cls_val_process Mkt pf matur) der\n  support_adapt Mkt pf\n\ngoal (1 subgoal):\n 1. \\<forall>n w. cls_val_process Mkt pf n w = cls_val_process Mkt2 pf n w", "using coincides_cls_val_process"], ["proof (prove)\nusing this:\n  viable_market Mkt\n  stock_portfolio Mkt pf \\<and>\n  trading_strategy pf \\<and>\n  self_financing Mkt pf \\<and> AEeq M (cls_val_process Mkt pf matur) der\n  support_adapt Mkt pf\n  \\<lbrakk>coincides_on ?Mkt ?Mkt2.0 ?A;\n   support_set ?pf \\<subseteq> ?A\\<rbrakk>\n  \\<Longrightarrow> \\<forall>n w.\n                       cls_val_process ?Mkt ?pf n w =\n                       cls_val_process ?Mkt2.0 ?pf n w\n\ngoal (1 subgoal):\n 1. \\<forall>n w. cls_val_process Mkt pf n w = cls_val_process Mkt2 pf n w", "using \\<open>\\<forall>n w. cls_val_process Mkt pf n w = cls_val_process Mkt2 pf n w\\<close>"], ["proof (prove)\nusing this:\n  viable_market Mkt\n  stock_portfolio Mkt pf \\<and>\n  trading_strategy pf \\<and>\n  self_financing Mkt pf \\<and> AEeq M (cls_val_process Mkt pf matur) der\n  support_adapt Mkt pf\n  \\<lbrakk>coincides_on ?Mkt ?Mkt2.0 ?A;\n   support_set ?pf \\<subseteq> ?A\\<rbrakk>\n  \\<Longrightarrow> \\<forall>n w.\n                       cls_val_process ?Mkt ?pf n w =\n                       cls_val_process ?Mkt2.0 ?pf n w\n  \\<forall>n w. cls_val_process Mkt pf n w = cls_val_process Mkt2 pf n w\n\ngoal (1 subgoal):\n 1. \\<forall>n w. cls_val_process Mkt pf n w = cls_val_process Mkt2 pf n w", "by blast"], ["proof (state)\nthis:\n  \\<forall>n w. cls_val_process Mkt pf n w = cls_val_process Mkt2 pf n w\n\ngoal (1 subgoal):\n 1. \\<not> fair_price Mkt (initial_value pf) der matur \\<Longrightarrow>\n    False", "hence prx: \"\\<forall>n w. prices Mkt2 x n w = cls_val_process Mkt2 pf n w\""], ["proof (prove)\nusing this:\n  \\<forall>n w. cls_val_process Mkt pf n w = cls_val_process Mkt2 pf n w\n\ngoal (1 subgoal):\n 1. \\<forall>n w. prices Mkt2 x n w = cls_val_process Mkt2 pf n w", "using \\<open>prices Mkt2 x = cls_val_process Mkt pf\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>n w. cls_val_process Mkt pf n w = cls_val_process Mkt2 pf n w\n  prices Mkt2 x = cls_val_process Mkt pf\n\ngoal (1 subgoal):\n 1. \\<forall>n w. prices Mkt2 x n w = cls_val_process Mkt2 pf n w", "by simp"], ["proof (state)\nthis:\n  \\<forall>n w. prices Mkt2 x n w = cls_val_process Mkt2 pf n w\n\ngoal (1 subgoal):\n 1. \\<not> fair_price Mkt (initial_value pf) der matur \\<Longrightarrow>\n    False", "have \"stock_portfolio Mkt2 eq_stock\""], ["proof (prove)\ngoal (1 subgoal):\n 1. stock_portfolio Mkt2 eq_stock", "by (metis (no_types, lifting) \\<open>coincides_on Mkt Mkt2 (stocks Mkt)\\<close> \\<open>portfolio p\\<close> \\<open>support_set p \\<subseteq> stocks Mkt \\<union> {x}\\<close>\n        assms(2) coincides_on_def disc_equity_market.replicating_portfolio_def disc_equity_market_axioms eq_stock_def\n        replace_comp_portfolio replace_comp_stocks stock_portfolio_def)"], ["proof (state)\nthis:\n  stock_portfolio Mkt2 eq_stock\n\ngoal (1 subgoal):\n 1. \\<not> fair_price Mkt (initial_value pf) der matur \\<Longrightarrow>\n    False", "moreover"], ["proof (state)\nthis:\n  stock_portfolio Mkt2 eq_stock\n\ngoal (1 subgoal):\n 1. \\<not> fair_price Mkt (initial_value pf) der matur \\<Longrightarrow>\n    False", "have \"arbitrage_process Mkt2 eq_stock\""], ["proof (prove)\ngoal (1 subgoal):\n 1. arbitrage_process Mkt2 eq_stock", "proof (rule arbitrage_val_process)"], ["proof (state)\ngoal (4 subgoals):\n 1. arbitrage_process Mkt2 ?pf1.0\n 2. self_financing Mkt2 eq_stock\n 3. trading_strategy eq_stock\n 4. \\<forall>n w.\n       cls_val_process Mkt2 ?pf1.0 n w = cls_val_process Mkt2 eq_stock n w", "show \"arbitrage_process Mkt2 p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. arbitrage_process Mkt2 p", "using \\<open>arbitrage_process Mkt2 p\\<close>"], ["proof (prove)\nusing this:\n  arbitrage_process Mkt2 p\n\ngoal (1 subgoal):\n 1. arbitrage_process Mkt2 p", "."], ["proof (state)\nthis:\n  arbitrage_process Mkt2 p\n\ngoal (3 subgoals):\n 1. self_financing Mkt2 eq_stock\n 2. trading_strategy eq_stock\n 3. \\<forall>n w.\n       cls_val_process Mkt2 p n w = cls_val_process Mkt2 eq_stock n w", "show vp: \"\\<forall>n w. cls_val_process Mkt2 p n w = cls_val_process Mkt2 eq_stock n w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n w.\n       cls_val_process Mkt2 p n w = cls_val_process Mkt2 eq_stock n w", "using replace_comp_cls_val_process\n        \\<open>prices Mkt2 x = cls_val_process Mkt pf\\<close>"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<forall>n w.\n              prices ?Mkt ?x n w = cls_val_process ?Mkt ?pf2.0 n w;\n   portfolio ?pf1.0; portfolio ?pf2.0\\<rbrakk>\n  \\<Longrightarrow> \\<forall>n w.\n                       cls_val_process ?Mkt\n                        (qty_replace_comp ?pf1.0 ?x ?pf2.0) n w =\n                       cls_val_process ?Mkt ?pf1.0 n w\n  prices Mkt2 x = cls_val_process Mkt pf\n\ngoal (1 subgoal):\n 1. \\<forall>n w.\n       cls_val_process Mkt2 p n w = cls_val_process Mkt2 eq_stock n w", "unfolding eq_stock_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<forall>n w.\n              prices ?Mkt ?x n w = cls_val_process ?Mkt ?pf2.0 n w;\n   portfolio ?pf1.0; portfolio ?pf2.0\\<rbrakk>\n  \\<Longrightarrow> \\<forall>n w.\n                       cls_val_process ?Mkt\n                        (qty_replace_comp ?pf1.0 ?x ?pf2.0) n w =\n                       cls_val_process ?Mkt ?pf1.0 n w\n  prices Mkt2 x = cls_val_process Mkt pf\n\ngoal (1 subgoal):\n 1. \\<forall>n w.\n       cls_val_process Mkt2 p n w =\n       cls_val_process Mkt2 (qty_replace_comp p x pf) n w", "by (metis (no_types, lifting) \\<open>\\<forall>n w. cls_val_process Mkt pf n w = cls_val_process Mkt2 pf n w\\<close> \\<open>portfolio p\\<close> assms(2) replicating_portfolio_def\n          stock_portfolio_def)"], ["proof (state)\nthis:\n  \\<forall>n w.\n     cls_val_process Mkt2 p n w = cls_val_process Mkt2 eq_stock n w\n\ngoal (2 subgoals):\n 1. self_financing Mkt2 eq_stock\n 2. trading_strategy eq_stock", "show \"trading_strategy eq_stock\""], ["proof (prove)\ngoal (1 subgoal):\n 1. trading_strategy eq_stock", "by (metis \\<open>arbitrage_process Mkt2 p\\<close> arbitrage_process_def assms(2) eq_stock_def\n          replace_comp_trading_strat replicating_portfolio_def)"], ["proof (state)\nthis:\n  trading_strategy eq_stock\n\ngoal (1 subgoal):\n 1. self_financing Mkt2 eq_stock", "show \"self_financing Mkt2 eq_stock\""], ["proof (prove)\ngoal (1 subgoal):\n 1. self_financing Mkt2 eq_stock", "unfolding eq_stock_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. self_financing Mkt2 (qty_replace_comp p x pf)", "proof (rule replace_comp_self_financing)"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<forall>n w. prices Mkt2 x n w = cls_val_process Mkt2 pf n w\n 2. portfolio p\n 3. portfolio pf\n 4. self_financing Mkt2 p\n 5. self_financing Mkt2 pf", "show \"portfolio pf\""], ["proof (prove)\ngoal (1 subgoal):\n 1. portfolio pf", "using assms"], ["proof (prove)\nusing this:\n  viable_market Mkt\n  replicating_portfolio pf der matur\n  support_adapt Mkt pf\n\ngoal (1 subgoal):\n 1. portfolio pf", "unfolding replicating_portfolio_def stock_portfolio_def"], ["proof (prove)\nusing this:\n  viable_market Mkt\n  (portfolio pf \\<and> support_set pf \\<subseteq> stocks Mkt) \\<and>\n  trading_strategy pf \\<and>\n  self_financing Mkt pf \\<and> AEeq M (cls_val_process Mkt pf matur) der\n  support_adapt Mkt pf\n\ngoal (1 subgoal):\n 1. portfolio pf", "by simp"], ["proof (state)\nthis:\n  portfolio pf\n\ngoal (4 subgoals):\n 1. \\<forall>n w. prices Mkt2 x n w = cls_val_process Mkt2 pf n w\n 2. portfolio p\n 3. self_financing Mkt2 p\n 4. self_financing Mkt2 pf", "show \"portfolio p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. portfolio p", "using \\<open>portfolio p\\<close>"], ["proof (prove)\nusing this:\n  portfolio p\n\ngoal (1 subgoal):\n 1. portfolio p", "."], ["proof (state)\nthis:\n  portfolio p\n\ngoal (3 subgoals):\n 1. \\<forall>n w. prices Mkt2 x n w = cls_val_process Mkt2 pf n w\n 2. self_financing Mkt2 p\n 3. self_financing Mkt2 pf", "show \"\\<forall>n w. prices Mkt2 x n w = cls_val_process Mkt2 pf n w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n w. prices Mkt2 x n w = cls_val_process Mkt2 pf n w", "using prx"], ["proof (prove)\nusing this:\n  \\<forall>n w. prices Mkt2 x n w = cls_val_process Mkt2 pf n w\n\ngoal (1 subgoal):\n 1. \\<forall>n w. prices Mkt2 x n w = cls_val_process Mkt2 pf n w", "."], ["proof (state)\nthis:\n  \\<forall>n w. prices Mkt2 x n w = cls_val_process Mkt2 pf n w\n\ngoal (2 subgoals):\n 1. self_financing Mkt2 p\n 2. self_financing Mkt2 pf", "show \"self_financing Mkt2 p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. self_financing Mkt2 p", "using \\<open>self_financing Mkt2 p\\<close>"], ["proof (prove)\nusing this:\n  self_financing Mkt2 p\n\ngoal (1 subgoal):\n 1. self_financing Mkt2 p", "."], ["proof (state)\nthis:\n  self_financing Mkt2 p\n\ngoal (1 subgoal):\n 1. self_financing Mkt2 pf", "show \"self_financing Mkt2 pf\""], ["proof (prove)\ngoal (1 subgoal):\n 1. self_financing Mkt2 pf", "using coincides_on_self_financing[of Mkt Mkt2 \"stocks Mkt\" pf]\n        \\<open>coincides_on Mkt Mkt2 (stocks Mkt)\\<close> assms(2)"], ["proof (prove)\nusing this:\n  \\<lbrakk>coincides_on Mkt Mkt2 (stocks Mkt);\n   support_set pf \\<subseteq> stocks Mkt; self_financing Mkt pf\\<rbrakk>\n  \\<Longrightarrow> self_financing Mkt2 pf\n  coincides_on Mkt Mkt2 (stocks Mkt)\n  replicating_portfolio pf der matur\n\ngoal (1 subgoal):\n 1. self_financing Mkt2 pf", "(*disc_equity_market.replicating_portfolio_def\n          disc_equity_market_axioms*)"], ["proof (prove)\nusing this:\n  \\<lbrakk>coincides_on Mkt Mkt2 (stocks Mkt);\n   support_set pf \\<subseteq> stocks Mkt; self_financing Mkt pf\\<rbrakk>\n  \\<Longrightarrow> self_financing Mkt2 pf\n  coincides_on Mkt Mkt2 (stocks Mkt)\n  replicating_portfolio pf der matur\n\ngoal (1 subgoal):\n 1. self_financing Mkt2 pf", "unfolding stock_portfolio_def replicating_portfolio_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>coincides_on Mkt Mkt2 (stocks Mkt);\n   support_set pf \\<subseteq> stocks Mkt; self_financing Mkt pf\\<rbrakk>\n  \\<Longrightarrow> self_financing Mkt2 pf\n  coincides_on Mkt Mkt2 (stocks Mkt)\n  (portfolio pf \\<and> support_set pf \\<subseteq> stocks Mkt) \\<and>\n  trading_strategy pf \\<and>\n  self_financing Mkt pf \\<and> AEeq M (cls_val_process Mkt pf matur) der\n\ngoal (1 subgoal):\n 1. self_financing Mkt2 pf", "by auto"], ["proof (state)\nthis:\n  self_financing Mkt2 pf\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  self_financing Mkt2 eq_stock\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  arbitrage_process Mkt2 eq_stock\n\ngoal (1 subgoal):\n 1. \\<not> fair_price Mkt (initial_value pf) der matur \\<Longrightarrow>\n    False", "moreover"], ["proof (state)\nthis:\n  arbitrage_process Mkt2 eq_stock\n\ngoal (1 subgoal):\n 1. \\<not> fair_price Mkt (initial_value pf) der matur \\<Longrightarrow>\n    False", "have \"viable_market Mkt2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. viable_market Mkt2", "using assms coincides_on_stocks_viable[of Mkt Mkt2]"], ["proof (prove)\nusing this:\n  viable_market Mkt\n  replicating_portfolio pf der matur\n  support_adapt Mkt pf\n  \\<lbrakk>coincides_on Mkt Mkt2 (stocks Mkt); viable_market Mkt\\<rbrakk>\n  \\<Longrightarrow> viable_market Mkt2\n\ngoal (1 subgoal):\n 1. viable_market Mkt2", "by (simp add: \\<open>coincides_on Mkt Mkt2 (stocks Mkt)\\<close>)"], ["proof (state)\nthis:\n  viable_market Mkt2\n\ngoal (1 subgoal):\n 1. \\<not> fair_price Mkt (initial_value pf) der matur \\<Longrightarrow>\n    False", "ultimately"], ["proof (chain)\npicking this:\n  stock_portfolio Mkt2 eq_stock\n  arbitrage_process Mkt2 eq_stock\n  viable_market Mkt2", "show False"], ["proof (prove)\nusing this:\n  stock_portfolio Mkt2 eq_stock\n  arbitrage_process Mkt2 eq_stock\n  viable_market Mkt2\n\ngoal (1 subgoal):\n 1. False", "unfolding viable_market_def"], ["proof (prove)\nusing this:\n  stock_portfolio Mkt2 eq_stock\n  arbitrage_process Mkt2 eq_stock\n  \\<forall>p.\n     stock_portfolio Mkt2 p \\<longrightarrow>\n     \\<not> arbitrage_process Mkt2 p\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "paragraph \\<open>Uniqueness when replicating portfolio\\<close>"], ["", "text \\<open>The proof of uniqueness requires the existence of a stock that always takes strictly positive values.\\<close>"], ["", "locale disc_market_pos_stock = disc_equity_market +\n  fixes pos_stock\n  assumes in_stock: \"pos_stock \\<in> stocks Mkt\"\n  and positive: \"\\<forall> n w. prices Mkt pos_stock n w > 0\"\nand readable: \"\\<forall> asset\\<in> stocks Mkt. borel_adapt_stoch_proc F (prices Mkt asset)\""], ["", "lemma (in disc_market_pos_stock) pos_stock_borel_adapted:\n  shows \"borel_adapt_stoch_proc F (prices Mkt pos_stock)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. borel_adapt_stoch_proc F (prices Mkt pos_stock)", "using assets_def readable in_stock"], ["proof (prove)\nusing this:\n  assets ?Mkt = UNIV\n  \\<forall>asset\\<in>stocks Mkt. borel_adapt_stoch_proc F (prices Mkt asset)\n  pos_stock \\<in> stocks Mkt\n\ngoal (1 subgoal):\n 1. borel_adapt_stoch_proc F (prices Mkt pos_stock)", "by auto"], ["", "definition static_quantities where\n  \"static_quantities p \\<longleftrightarrow> (\\<forall>asset \\<in> support_set p. \\<exists>c::real. p asset = (\\<lambda> n w. c))\""], ["", "lemma (in disc_filtr_prob_space) static_quantities_trading_strat:\n  assumes \"static_quantities p\"\n  and \"finite (support_set p)\"\n  shows \"trading_strategy p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. trading_strategy p", "unfolding trading_strategy_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. portfolio p \\<and>\n    (\\<forall>asset\\<in>support_set p. borel_predict_stoch_proc F (p asset))", "proof (intro conjI ballI)"], ["proof (state)\ngoal (2 subgoals):\n 1. portfolio p\n 2. \\<And>asset.\n       asset \\<in> support_set p \\<Longrightarrow>\n       borel_predict_stoch_proc F (p asset)", "show \"portfolio p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. portfolio p", "using assms"], ["proof (prove)\nusing this:\n  static_quantities p\n  finite (support_set p)\n\ngoal (1 subgoal):\n 1. portfolio p", "unfolding portfolio_def"], ["proof (prove)\nusing this:\n  static_quantities p\n  finite (support_set p)\n\ngoal (1 subgoal):\n 1. finite (support_set p)", "by simp"], ["proof (state)\nthis:\n  portfolio p\n\ngoal (1 subgoal):\n 1. \\<And>asset.\n       asset \\<in> support_set p \\<Longrightarrow>\n       borel_predict_stoch_proc F (p asset)", "fix asset"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>asset.\n       asset \\<in> support_set p \\<Longrightarrow>\n       borel_predict_stoch_proc F (p asset)", "assume \"asset \\<in> support_set p\""], ["proof (state)\nthis:\n  asset \\<in> support_set p\n\ngoal (1 subgoal):\n 1. \\<And>asset.\n       asset \\<in> support_set p \\<Longrightarrow>\n       borel_predict_stoch_proc F (p asset)", "hence \"\\<exists>c. p asset = (\\<lambda> n w. c)\""], ["proof (prove)\nusing this:\n  asset \\<in> support_set p\n\ngoal (1 subgoal):\n 1. \\<exists>c. p asset = (\\<lambda>n w. c)", "using assms"], ["proof (prove)\nusing this:\n  asset \\<in> support_set p\n  static_quantities p\n  finite (support_set p)\n\ngoal (1 subgoal):\n 1. \\<exists>c. p asset = (\\<lambda>n w. c)", "unfolding static_quantities_def"], ["proof (prove)\nusing this:\n  asset \\<in> support_set p\n  \\<forall>asset\\<in>support_set p. \\<exists>c. p asset = (\\<lambda>n w. c)\n  finite (support_set p)\n\ngoal (1 subgoal):\n 1. \\<exists>c. p asset = (\\<lambda>n w. c)", "by simp"], ["proof (state)\nthis:\n  \\<exists>c. p asset = (\\<lambda>n w. c)\n\ngoal (1 subgoal):\n 1. \\<And>asset.\n       asset \\<in> support_set p \\<Longrightarrow>\n       borel_predict_stoch_proc F (p asset)", "then"], ["proof (chain)\npicking this:\n  \\<exists>c. p asset = (\\<lambda>n w. c)", "obtain c where \"p asset = (\\<lambda> n w. c)\""], ["proof (prove)\nusing this:\n  \\<exists>c. p asset = (\\<lambda>n w. c)\n\ngoal (1 subgoal):\n 1. (\\<And>c.\n        p asset = (\\<lambda>n w. c) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  p asset = (\\<lambda>n w. c)\n\ngoal (1 subgoal):\n 1. \\<And>asset.\n       asset \\<in> support_set p \\<Longrightarrow>\n       borel_predict_stoch_proc F (p asset)", "show \"borel_predict_stoch_proc F (p asset)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. borel_predict_stoch_proc F (p asset)", "unfolding predict_stoch_proc_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. p asset 0 \\<in> borel_measurable (F 0) \\<and>\n    (\\<forall>n. p asset (Suc n) \\<in> borel_measurable (F n))", "proof (intro conjI)"], ["proof (state)\ngoal (2 subgoals):\n 1. p asset 0 \\<in> borel_measurable (F 0)\n 2. \\<forall>n. p asset (Suc n) \\<in> borel_measurable (F n)", "show \"p asset 0 \\<in> borel_measurable (F 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p asset 0 \\<in> borel_measurable (F 0)", "using \\<open>p asset = (\\<lambda> n w. c)\\<close>"], ["proof (prove)\nusing this:\n  p asset = (\\<lambda>n w. c)\n\ngoal (1 subgoal):\n 1. p asset 0 \\<in> borel_measurable (F 0)", "by simp"], ["proof (state)\nthis:\n  p asset 0 \\<in> borel_measurable (F 0)\n\ngoal (1 subgoal):\n 1. \\<forall>n. p asset (Suc n) \\<in> borel_measurable (F n)", "show \"\\<forall>n. p asset (Suc n) \\<in> borel_measurable (F n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n. p asset (Suc n) \\<in> borel_measurable (F n)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n. p asset (Suc n) \\<in> borel_measurable (F n)", "fix n"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n. p asset (Suc n) \\<in> borel_measurable (F n)", "have \"p asset (Suc n) = (\\<lambda> w. c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p asset (Suc n) = (\\<lambda>w. c)", "using \\<open>p asset = (\\<lambda> n w. c)\\<close>"], ["proof (prove)\nusing this:\n  p asset = (\\<lambda>n w. c)\n\ngoal (1 subgoal):\n 1. p asset (Suc n) = (\\<lambda>w. c)", "by simp"], ["proof (state)\nthis:\n  p asset (Suc n) = (\\<lambda>w. c)\n\ngoal (1 subgoal):\n 1. \\<And>n. p asset (Suc n) \\<in> borel_measurable (F n)", "thus \"p asset (Suc n) \\<in> borel_measurable (F n)\""], ["proof (prove)\nusing this:\n  p asset (Suc n) = (\\<lambda>w. c)\n\ngoal (1 subgoal):\n 1. p asset (Suc n) \\<in> borel_measurable (F n)", "by simp"], ["proof (state)\nthis:\n  p asset (Suc n) \\<in> borel_measurable (F n)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>n. p asset (Suc n) \\<in> borel_measurable (F n)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  borel_predict_stoch_proc F (p asset)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma two_component_support_set:\n  assumes \"\\<exists> n w. a n w \\<noteq> 0\"\n  and \"\\<exists> n w. b n w\\<noteq> 0\"\n  and \"x \\<noteq> y\"\nshows \"support_set ((\\<lambda> (x::'b) (n::nat) (w::'a). 0::real)(x:= a, y:= b)) = {x,y}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. support_set ((\\<lambda>x n w. 0)(x := a, y := b)) = {x, y}", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. support_set ((\\<lambda>x n w. 0)(x := a, y := b)) \\<subseteq> {x, y}\n 2. {x, y} \\<subseteq> support_set ((\\<lambda>x n w. 0)(x := a, y := b))", "let ?arb_pf = \"(\\<lambda> (x::'b) (n::nat) (w::'a). 0::real)(x:= a, y:= b)\""], ["proof (state)\ngoal (2 subgoals):\n 1. support_set ((\\<lambda>x n w. 0)(x := a, y := b)) \\<subseteq> {x, y}\n 2. {x, y} \\<subseteq> support_set ((\\<lambda>x n w. 0)(x := a, y := b))", "have \"\\<exists> n w. ?arb_pf x n w \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>n w. ((\\<lambda>x n w. 0)(x := a, y := b)) x n w \\<noteq> 0", "using assms"], ["proof (prove)\nusing this:\n  \\<exists>n w. a n w \\<noteq> 0\n  \\<exists>n w. b n w \\<noteq> 0\n  x \\<noteq> y\n\ngoal (1 subgoal):\n 1. \\<exists>n w. ((\\<lambda>x n w. 0)(x := a, y := b)) x n w \\<noteq> 0", "by simp"], ["proof (state)\nthis:\n  \\<exists>n w. ((\\<lambda>x n w. 0)(x := a, y := b)) x n w \\<noteq> 0\n\ngoal (2 subgoals):\n 1. support_set ((\\<lambda>x n w. 0)(x := a, y := b)) \\<subseteq> {x, y}\n 2. {x, y} \\<subseteq> support_set ((\\<lambda>x n w. 0)(x := a, y := b))", "moreover"], ["proof (state)\nthis:\n  \\<exists>n w. ((\\<lambda>x n w. 0)(x := a, y := b)) x n w \\<noteq> 0\n\ngoal (2 subgoals):\n 1. support_set ((\\<lambda>x n w. 0)(x := a, y := b)) \\<subseteq> {x, y}\n 2. {x, y} \\<subseteq> support_set ((\\<lambda>x n w. 0)(x := a, y := b))", "have \"\\<exists>n w. ?arb_pf y n w \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>n w. ((\\<lambda>x n w. 0)(x := a, y := b)) y n w \\<noteq> 0", "using assms"], ["proof (prove)\nusing this:\n  \\<exists>n w. a n w \\<noteq> 0\n  \\<exists>n w. b n w \\<noteq> 0\n  x \\<noteq> y\n\ngoal (1 subgoal):\n 1. \\<exists>n w. ((\\<lambda>x n w. 0)(x := a, y := b)) y n w \\<noteq> 0", "by simp"], ["proof (state)\nthis:\n  \\<exists>n w. ((\\<lambda>x n w. 0)(x := a, y := b)) y n w \\<noteq> 0\n\ngoal (2 subgoals):\n 1. support_set ((\\<lambda>x n w. 0)(x := a, y := b)) \\<subseteq> {x, y}\n 2. {x, y} \\<subseteq> support_set ((\\<lambda>x n w. 0)(x := a, y := b))", "ultimately"], ["proof (chain)\npicking this:\n  \\<exists>n w. ((\\<lambda>x n w. 0)(x := a, y := b)) x n w \\<noteq> 0\n  \\<exists>n w. ((\\<lambda>x n w. 0)(x := a, y := b)) y n w \\<noteq> 0", "show \"{x, y} \\<subseteq> support_set ?arb_pf\""], ["proof (prove)\nusing this:\n  \\<exists>n w. ((\\<lambda>x n w. 0)(x := a, y := b)) x n w \\<noteq> 0\n  \\<exists>n w. ((\\<lambda>x n w. 0)(x := a, y := b)) y n w \\<noteq> 0\n\ngoal (1 subgoal):\n 1. {x, y} \\<subseteq> support_set ((\\<lambda>x n w. 0)(x := a, y := b))", "unfolding support_set_def"], ["proof (prove)\nusing this:\n  \\<exists>n w. ((\\<lambda>x n w. 0)(x := a, y := b)) x n w \\<noteq> 0\n  \\<exists>n w. ((\\<lambda>x n w. 0)(x := a, y := b)) y n w \\<noteq> 0\n\ngoal (1 subgoal):\n 1. {x, y}\n    \\<subseteq> {xa.\n                 \\<exists>n w.\n                    ((\\<lambda>x n w. 0)(x := a, y := b)) xa n w \\<noteq> 0}", "by simp"], ["proof (state)\nthis:\n  {x, y} \\<subseteq> support_set ((\\<lambda>x n w. 0)(x := a, y := b))\n\ngoal (1 subgoal):\n 1. support_set ((\\<lambda>x n w. 0)(x := a, y := b)) \\<subseteq> {x, y}", "show \"support_set ?arb_pf \\<subseteq> {x, y}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. support_set ((\\<lambda>x n w. 0)(x := a, y := b)) \\<subseteq> {x, y}", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> support_set ((\\<lambda>x n w. 0)(x := a, y := b))\n           \\<subseteq> {x, y} \\<Longrightarrow>\n    False", "assume \"\\<not> support_set ?arb_pf \\<subseteq> {x, y}\""], ["proof (state)\nthis:\n  \\<not> support_set ((\\<lambda>x n w. 0)(x := a, y := b))\n         \\<subseteq> {x, y}\n\ngoal (1 subgoal):\n 1. \\<not> support_set ((\\<lambda>x n w. 0)(x := a, y := b))\n           \\<subseteq> {x, y} \\<Longrightarrow>\n    False", "hence \"\\<exists>z. z\\<in> support_set ?arb_pf \\<and> z\\<notin> {x, y}\""], ["proof (prove)\nusing this:\n  \\<not> support_set ((\\<lambda>x n w. 0)(x := a, y := b))\n         \\<subseteq> {x, y}\n\ngoal (1 subgoal):\n 1. \\<exists>z.\n       z \\<in> support_set ((\\<lambda>x n w. 0)(x := a, y := b)) \\<and>\n       z \\<notin> {x, y}", "by auto"], ["proof (state)\nthis:\n  \\<exists>z.\n     z \\<in> support_set ((\\<lambda>x n w. 0)(x := a, y := b)) \\<and>\n     z \\<notin> {x, y}\n\ngoal (1 subgoal):\n 1. \\<not> support_set ((\\<lambda>x n w. 0)(x := a, y := b))\n           \\<subseteq> {x, y} \\<Longrightarrow>\n    False", "from this"], ["proof (chain)\npicking this:\n  \\<exists>z.\n     z \\<in> support_set ((\\<lambda>x n w. 0)(x := a, y := b)) \\<and>\n     z \\<notin> {x, y}", "obtain z where \"z\\<in> support_set ?arb_pf\" and \"z\\<notin> {x, y}\""], ["proof (prove)\nusing this:\n  \\<exists>z.\n     z \\<in> support_set ((\\<lambda>x n w. 0)(x := a, y := b)) \\<and>\n     z \\<notin> {x, y}\n\ngoal (1 subgoal):\n 1. (\\<And>z.\n        \\<lbrakk>z \\<in> support_set ((\\<lambda>x n w. 0)(x := a, y := b));\n         z \\<notin> {x, y}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  z \\<in> support_set ((\\<lambda>x n w. 0)(x := a, y := b))\n  z \\<notin> {x, y}\n\ngoal (1 subgoal):\n 1. \\<not> support_set ((\\<lambda>x n w. 0)(x := a, y := b))\n           \\<subseteq> {x, y} \\<Longrightarrow>\n    False", "have \"\\<exists>n w. ?arb_pf z n w \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>n w. ((\\<lambda>x n w. 0)(x := a, y := b)) z n w \\<noteq> 0", "using \\<open>z\\<in> support_set ?arb_pf\\<close>"], ["proof (prove)\nusing this:\n  z \\<in> support_set ((\\<lambda>x n w. 0)(x := a, y := b))\n\ngoal (1 subgoal):\n 1. \\<exists>n w. ((\\<lambda>x n w. 0)(x := a, y := b)) z n w \\<noteq> 0", "unfolding support_set_def"], ["proof (prove)\nusing this:\n  z \\<in> {xa.\n           \\<exists>n w.\n              ((\\<lambda>x n w. 0)(x := a, y := b)) xa n w \\<noteq> 0}\n\ngoal (1 subgoal):\n 1. \\<exists>n w. ((\\<lambda>x n w. 0)(x := a, y := b)) z n w \\<noteq> 0", "by simp"], ["proof (state)\nthis:\n  \\<exists>n w. ((\\<lambda>x n w. 0)(x := a, y := b)) z n w \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<not> support_set ((\\<lambda>x n w. 0)(x := a, y := b))\n           \\<subseteq> {x, y} \\<Longrightarrow>\n    False", "from this"], ["proof (chain)\npicking this:\n  \\<exists>n w. ((\\<lambda>x n w. 0)(x := a, y := b)) z n w \\<noteq> 0", "obtain n w where \"?arb_pf z n w \\<noteq> 0\""], ["proof (prove)\nusing this:\n  \\<exists>n w. ((\\<lambda>x n w. 0)(x := a, y := b)) z n w \\<noteq> 0\n\ngoal (1 subgoal):\n 1. (\\<And>n w.\n        ((\\<lambda>x n w. 0)(x := a, y := b)) z n w \\<noteq>\n        0 \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  ((\\<lambda>x n w. 0)(x := a, y := b)) z n w \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<not> support_set ((\\<lambda>x n w. 0)(x := a, y := b))\n           \\<subseteq> {x, y} \\<Longrightarrow>\n    False", "have \"?arb_pf z n w = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<lambda>x n w. 0)(x := a, y := b)) z n w = 0", "using \\<open>z\\<notin> {x, y}\\<close>"], ["proof (prove)\nusing this:\n  z \\<notin> {x, y}\n\ngoal (1 subgoal):\n 1. ((\\<lambda>x n w. 0)(x := a, y := b)) z n w = 0", "by simp"], ["proof (state)\nthis:\n  ((\\<lambda>x n w. 0)(x := a, y := b)) z n w = 0\n\ngoal (1 subgoal):\n 1. \\<not> support_set ((\\<lambda>x n w. 0)(x := a, y := b))\n           \\<subseteq> {x, y} \\<Longrightarrow>\n    False", "thus False"], ["proof (prove)\nusing this:\n  ((\\<lambda>x n w. 0)(x := a, y := b)) z n w = 0\n\ngoal (1 subgoal):\n 1. False", "using \\<open>?arb_pf z n w \\<noteq> 0\\<close>"], ["proof (prove)\nusing this:\n  ((\\<lambda>x n w. 0)(x := a, y := b)) z n w = 0\n  ((\\<lambda>x n w. 0)(x := a, y := b)) z n w \\<noteq> 0\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  support_set ((\\<lambda>x n w. 0)(x := a, y := b)) \\<subseteq> {x, y}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma two_component_val_process:\n  assumes \"arb_pf = ((\\<lambda> (x::'b) (n::nat) (w::'a). 0::real)(x:= a, y:= b))\"\n  and \"portfolio arb_pf\"\n  and \"x \\<noteq> y\"\n  and \"\\<exists> n w. a n w \\<noteq> 0\"\n  and \"\\<exists> n w. b n w\\<noteq> 0\"\n  shows \"val_process Mkt arb_pf n w =\n    prices Mkt y n w * b (Suc n) w + prices Mkt x n w * a (Suc n) w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. val_process Mkt arb_pf n w =\n    prices Mkt y n w * b (Suc n) w + prices Mkt x n w * a (Suc n) w", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. val_process Mkt arb_pf n w =\n    prices Mkt y n w * b (Suc n) w + prices Mkt x n w * a (Suc n) w", "have \"support_set arb_pf = {x,y}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. support_set arb_pf = {x, y}", "using assms"], ["proof (prove)\nusing this:\n  arb_pf = (\\<lambda>x n w. 0)(x := a, y := b)\n  portfolio arb_pf\n  x \\<noteq> y\n  \\<exists>n w. a n w \\<noteq> 0\n  \\<exists>n w. b n w \\<noteq> 0\n\ngoal (1 subgoal):\n 1. support_set arb_pf = {x, y}", "by (simp add:two_component_support_set)"], ["proof (state)\nthis:\n  support_set arb_pf = {x, y}\n\ngoal (1 subgoal):\n 1. val_process Mkt arb_pf n w =\n    prices Mkt y n w * b (Suc n) w + prices Mkt x n w * a (Suc n) w", "have \"val_process Mkt arb_pf n w = (\\<Sum>x\\<in>support_set arb_pf. prices Mkt x n w * arb_pf x (Suc n) w)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. val_process Mkt arb_pf n w =\n    (\\<Sum>x\\<in>support_set arb_pf. prices Mkt x n w * arb_pf x (Suc n) w)", "unfolding val_process_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (if \\<not> portfolio arb_pf then \\<lambda>n w. 0\n     else (\\<lambda>n w.\n              \\<Sum>x\\<in>support_set arb_pf.\n                prices Mkt x n w * arb_pf x (Suc n) w))\n     n w =\n    (\\<Sum>x\\<in>support_set arb_pf. prices Mkt x n w * arb_pf x (Suc n) w)", "using \\<open>portfolio arb_pf\\<close>"], ["proof (prove)\nusing this:\n  portfolio arb_pf\n\ngoal (1 subgoal):\n 1. (if \\<not> portfolio arb_pf then \\<lambda>n w. 0\n     else (\\<lambda>n w.\n              \\<Sum>x\\<in>support_set arb_pf.\n                prices Mkt x n w * arb_pf x (Suc n) w))\n     n w =\n    (\\<Sum>x\\<in>support_set arb_pf. prices Mkt x n w * arb_pf x (Suc n) w)", "by simp"], ["proof (state)\nthis:\n  val_process Mkt arb_pf n w =\n  (\\<Sum>x\\<in>support_set arb_pf. prices Mkt x n w * arb_pf x (Suc n) w)\n\ngoal (1 subgoal):\n 1. val_process Mkt arb_pf n w =\n    prices Mkt y n w * b (Suc n) w + prices Mkt x n w * a (Suc n) w", "also"], ["proof (state)\nthis:\n  val_process Mkt arb_pf n w =\n  (\\<Sum>x\\<in>support_set arb_pf. prices Mkt x n w * arb_pf x (Suc n) w)\n\ngoal (1 subgoal):\n 1. val_process Mkt arb_pf n w =\n    prices Mkt y n w * b (Suc n) w + prices Mkt x n w * a (Suc n) w", "have \"... = (\\<Sum>x\\<in>{x, y}. prices Mkt x n w * arb_pf x (Suc n) w)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>support_set arb_pf.\n       prices Mkt x n w * arb_pf x (Suc n) w) =\n    (\\<Sum>x\\<in>{x, y}. prices Mkt x n w * arb_pf x (Suc n) w)", "using \\<open>support_set arb_pf = {x, y}\\<close>"], ["proof (prove)\nusing this:\n  support_set arb_pf = {x, y}\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>support_set arb_pf.\n       prices Mkt x n w * arb_pf x (Suc n) w) =\n    (\\<Sum>x\\<in>{x, y}. prices Mkt x n w * arb_pf x (Suc n) w)", "by simp"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>support_set arb_pf. prices Mkt x n w * arb_pf x (Suc n) w) =\n  (\\<Sum>x\\<in>{x, y}. prices Mkt x n w * arb_pf x (Suc n) w)\n\ngoal (1 subgoal):\n 1. val_process Mkt arb_pf n w =\n    prices Mkt y n w * b (Suc n) w + prices Mkt x n w * a (Suc n) w", "also"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>support_set arb_pf. prices Mkt x n w * arb_pf x (Suc n) w) =\n  (\\<Sum>x\\<in>{x, y}. prices Mkt x n w * arb_pf x (Suc n) w)\n\ngoal (1 subgoal):\n 1. val_process Mkt arb_pf n w =\n    prices Mkt y n w * b (Suc n) w + prices Mkt x n w * a (Suc n) w", "have \"... = (\\<Sum>x\\<in>{y}. prices Mkt x n w * arb_pf x (Suc n) w) + prices Mkt x n w * arb_pf x (Suc n) w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>{x, y}. prices Mkt x n w * arb_pf x (Suc n) w) =\n    (\\<Sum>x\\<in>{y}. prices Mkt x n w * arb_pf x (Suc n) w) +\n    prices Mkt x n w * arb_pf x (Suc n) w", "using sum.insert[of \"{y}\" x  \"\\<lambda>x. prices Mkt x n w * arb_pf x n w\"] assms(3)"], ["proof (prove)\nusing this:\n  \\<lbrakk>finite {y}; x \\<notin> {y}\\<rbrakk>\n  \\<Longrightarrow> (\\<Sum>x\\<in>{x, y}. prices Mkt x n w * arb_pf x n w) =\n                    prices Mkt x n w * arb_pf x n w +\n                    (\\<Sum>x\\<in>{y}. prices Mkt x n w * arb_pf x n w)\n  x \\<noteq> y\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>{x, y}. prices Mkt x n w * arb_pf x (Suc n) w) =\n    (\\<Sum>x\\<in>{y}. prices Mkt x n w * arb_pf x (Suc n) w) +\n    prices Mkt x n w * arb_pf x (Suc n) w", "by auto"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>{x, y}. prices Mkt x n w * arb_pf x (Suc n) w) =\n  (\\<Sum>x\\<in>{y}. prices Mkt x n w * arb_pf x (Suc n) w) +\n  prices Mkt x n w * arb_pf x (Suc n) w\n\ngoal (1 subgoal):\n 1. val_process Mkt arb_pf n w =\n    prices Mkt y n w * b (Suc n) w + prices Mkt x n w * a (Suc n) w", "also"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>{x, y}. prices Mkt x n w * arb_pf x (Suc n) w) =\n  (\\<Sum>x\\<in>{y}. prices Mkt x n w * arb_pf x (Suc n) w) +\n  prices Mkt x n w * arb_pf x (Suc n) w\n\ngoal (1 subgoal):\n 1. val_process Mkt arb_pf n w =\n    prices Mkt y n w * b (Suc n) w + prices Mkt x n w * a (Suc n) w", "have \"... = prices Mkt y n w * arb_pf y (Suc n) w + prices Mkt x n w * arb_pf x (Suc n) w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>{y}. prices Mkt x n w * arb_pf x (Suc n) w) +\n    prices Mkt x n w * arb_pf x (Suc n) w =\n    prices Mkt y n w * arb_pf y (Suc n) w +\n    prices Mkt x n w * arb_pf x (Suc n) w", "by simp"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>{y}. prices Mkt x n w * arb_pf x (Suc n) w) +\n  prices Mkt x n w * arb_pf x (Suc n) w =\n  prices Mkt y n w * arb_pf y (Suc n) w +\n  prices Mkt x n w * arb_pf x (Suc n) w\n\ngoal (1 subgoal):\n 1. val_process Mkt arb_pf n w =\n    prices Mkt y n w * b (Suc n) w + prices Mkt x n w * a (Suc n) w", "also"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>{y}. prices Mkt x n w * arb_pf x (Suc n) w) +\n  prices Mkt x n w * arb_pf x (Suc n) w =\n  prices Mkt y n w * arb_pf y (Suc n) w +\n  prices Mkt x n w * arb_pf x (Suc n) w\n\ngoal (1 subgoal):\n 1. val_process Mkt arb_pf n w =\n    prices Mkt y n w * b (Suc n) w + prices Mkt x n w * a (Suc n) w", "have \"... = prices Mkt y n w * b (Suc n) w + prices Mkt x n w * a (Suc n) w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prices Mkt y n w * arb_pf y (Suc n) w +\n    prices Mkt x n w * arb_pf x (Suc n) w =\n    prices Mkt y n w * b (Suc n) w + prices Mkt x n w * a (Suc n) w", "using assms"], ["proof (prove)\nusing this:\n  arb_pf = (\\<lambda>x n w. 0)(x := a, y := b)\n  portfolio arb_pf\n  x \\<noteq> y\n  \\<exists>n w. a n w \\<noteq> 0\n  \\<exists>n w. b n w \\<noteq> 0\n\ngoal (1 subgoal):\n 1. prices Mkt y n w * arb_pf y (Suc n) w +\n    prices Mkt x n w * arb_pf x (Suc n) w =\n    prices Mkt y n w * b (Suc n) w + prices Mkt x n w * a (Suc n) w", "by auto"], ["proof (state)\nthis:\n  prices Mkt y n w * arb_pf y (Suc n) w +\n  prices Mkt x n w * arb_pf x (Suc n) w =\n  prices Mkt y n w * b (Suc n) w + prices Mkt x n w * a (Suc n) w\n\ngoal (1 subgoal):\n 1. val_process Mkt arb_pf n w =\n    prices Mkt y n w * b (Suc n) w + prices Mkt x n w * a (Suc n) w", "finally"], ["proof (chain)\npicking this:\n  val_process Mkt arb_pf n w =\n  prices Mkt y n w * b (Suc n) w + prices Mkt x n w * a (Suc n) w", "show \"val_process Mkt arb_pf n w = prices Mkt y n w * b (Suc n) w + prices Mkt x n w * a (Suc n) w\""], ["proof (prove)\nusing this:\n  val_process Mkt arb_pf n w =\n  prices Mkt y n w * b (Suc n) w + prices Mkt x n w * a (Suc n) w\n\ngoal (1 subgoal):\n 1. val_process Mkt arb_pf n w =\n    prices Mkt y n w * b (Suc n) w + prices Mkt x n w * a (Suc n) w", "."], ["proof (state)\nthis:\n  val_process Mkt arb_pf n w =\n  prices Mkt y n w * b (Suc n) w + prices Mkt x n w * a (Suc n) w\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma quantity_update_support_set:\n  assumes \"\\<exists>n w. pr n w \\<noteq> 0\"\n  and \"x\\<notin> support_set p\"\nshows \"support_set (p(x:=pr)) = support_set p \\<union> {x}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. support_set (p(x := pr)) = support_set p \\<union> {x}", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. support_set (p(x := pr)) \\<subseteq> support_set p \\<union> {x}\n 2. support_set p \\<union> {x} \\<subseteq> support_set (p(x := pr))", "show \"support_set (p(x := pr)) \\<subseteq> support_set p \\<union> {x}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. support_set (p(x := pr)) \\<subseteq> support_set p \\<union> {x}", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa \\<in> support_set (p(x := pr)) \\<Longrightarrow>\n       xa \\<in> support_set p \\<union> {x}", "fix y"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa \\<in> support_set (p(x := pr)) \\<Longrightarrow>\n       xa \\<in> support_set p \\<union> {x}", "assume \"y\\<in> support_set (p(x := pr))\""], ["proof (state)\nthis:\n  y \\<in> support_set (p(x := pr))\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa \\<in> support_set (p(x := pr)) \\<Longrightarrow>\n       xa \\<in> support_set p \\<union> {x}", "show \"y \\<in> support_set p \\<union> {x}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y \\<in> support_set p \\<union> {x}", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. y \\<notin> support_set p \\<union> {x} \\<Longrightarrow> False", "assume \"\\<not>y \\<in> support_set p \\<union> {x}\""], ["proof (state)\nthis:\n  y \\<notin> support_set p \\<union> {x}\n\ngoal (1 subgoal):\n 1. y \\<notin> support_set p \\<union> {x} \\<Longrightarrow> False", "hence \"y \\<noteq> x\""], ["proof (prove)\nusing this:\n  y \\<notin> support_set p \\<union> {x}\n\ngoal (1 subgoal):\n 1. y \\<noteq> x", "by simp"], ["proof (state)\nthis:\n  y \\<noteq> x\n\ngoal (1 subgoal):\n 1. y \\<notin> support_set p \\<union> {x} \\<Longrightarrow> False", "have \"\\<exists>n w. (p(x := pr)) y n w \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>n w. (p(x := pr)) y n w \\<noteq> 0", "using \\<open>y\\<in> support_set (p(x := pr))\\<close>"], ["proof (prove)\nusing this:\n  y \\<in> support_set (p(x := pr))\n\ngoal (1 subgoal):\n 1. \\<exists>n w. (p(x := pr)) y n w \\<noteq> 0", "unfolding support_set_def"], ["proof (prove)\nusing this:\n  y \\<in> {xa. \\<exists>n w. (p(x := pr)) xa n w \\<noteq> 0}\n\ngoal (1 subgoal):\n 1. \\<exists>n w. (p(x := pr)) y n w \\<noteq> 0", "by simp"], ["proof (state)\nthis:\n  \\<exists>n w. (p(x := pr)) y n w \\<noteq> 0\n\ngoal (1 subgoal):\n 1. y \\<notin> support_set p \\<union> {x} \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  \\<exists>n w. (p(x := pr)) y n w \\<noteq> 0", "obtain n w where nwprop: \"(p(x := pr)) y n w \\<noteq> 0\""], ["proof (prove)\nusing this:\n  \\<exists>n w. (p(x := pr)) y n w \\<noteq> 0\n\ngoal (1 subgoal):\n 1. (\\<And>n w.\n        (p(x := pr)) y n w \\<noteq> 0 \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  (p(x := pr)) y n w \\<noteq> 0\n\ngoal (1 subgoal):\n 1. y \\<notin> support_set p \\<union> {x} \\<Longrightarrow> False", "have \"y\\<notin> support_set p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y \\<notin> support_set p", "using \\<open>\\<not>y \\<in> support_set p \\<union> {x}\\<close>"], ["proof (prove)\nusing this:\n  y \\<notin> support_set p \\<union> {x}\n\ngoal (1 subgoal):\n 1. y \\<notin> support_set p", "by simp"], ["proof (state)\nthis:\n  y \\<notin> support_set p\n\ngoal (1 subgoal):\n 1. y \\<notin> support_set p \\<union> {x} \\<Longrightarrow> False", "hence \"y = x\""], ["proof (prove)\nusing this:\n  y \\<notin> support_set p\n\ngoal (1 subgoal):\n 1. y = x", "using nwprop"], ["proof (prove)\nusing this:\n  y \\<notin> support_set p\n  (p(x := pr)) y n w \\<noteq> 0\n\ngoal (1 subgoal):\n 1. y = x", "using support_set_def"], ["proof (prove)\nusing this:\n  y \\<notin> support_set p\n  (p(x := pr)) y n w \\<noteq> 0\n  support_set ?p = {x. \\<exists>n w. ?p x n w \\<noteq> 0}\n\ngoal (1 subgoal):\n 1. y = x", "by force"], ["proof (state)\nthis:\n  y = x\n\ngoal (1 subgoal):\n 1. y \\<notin> support_set p \\<union> {x} \\<Longrightarrow> False", "thus False"], ["proof (prove)\nusing this:\n  y = x\n\ngoal (1 subgoal):\n 1. False", "using \\<open>y\\<noteq> x\\<close>"], ["proof (prove)\nusing this:\n  y = x\n  y \\<noteq> x\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  y \\<in> support_set p \\<union> {x}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  support_set (p(x := pr)) \\<subseteq> support_set p \\<union> {x}\n\ngoal (1 subgoal):\n 1. support_set p \\<union> {x} \\<subseteq> support_set (p(x := pr))", "show \"support_set p \\<union> {x} \\<subseteq> support_set (p(x := pr))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. support_set p \\<union> {x} \\<subseteq> support_set (p(x := pr))", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa \\<in> support_set p \\<union> {x} \\<Longrightarrow>\n       xa \\<in> support_set (p(x := pr))", "fix y"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa \\<in> support_set p \\<union> {x} \\<Longrightarrow>\n       xa \\<in> support_set (p(x := pr))", "assume \"y \\<in> support_set p \\<union> {x}\""], ["proof (state)\nthis:\n  y \\<in> support_set p \\<union> {x}\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa \\<in> support_set p \\<union> {x} \\<Longrightarrow>\n       xa \\<in> support_set (p(x := pr))", "show \"y\\<in> support_set (p(x := pr))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y \\<in> support_set (p(x := pr))", "proof (cases \"y\\<in> support_set p\")"], ["proof (state)\ngoal (2 subgoals):\n 1. y \\<in> support_set p \\<Longrightarrow> y \\<in> support_set (p(x := pr))\n 2. y \\<notin> support_set p \\<Longrightarrow>\n    y \\<in> support_set (p(x := pr))", "case True"], ["proof (state)\nthis:\n  y \\<in> support_set p\n\ngoal (2 subgoals):\n 1. y \\<in> support_set p \\<Longrightarrow> y \\<in> support_set (p(x := pr))\n 2. y \\<notin> support_set p \\<Longrightarrow>\n    y \\<in> support_set (p(x := pr))", "thus ?thesis"], ["proof (prove)\nusing this:\n  y \\<in> support_set p\n\ngoal (1 subgoal):\n 1. y \\<in> support_set (p(x := pr))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. y \\<in> support_set p \\<Longrightarrow> y \\<in> support_set (p(x := pr))", "have f1: \"y \\<in> {b. \\<exists>n a. p b n a \\<noteq> 0}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y \\<in> {b. \\<exists>n a. p b n a \\<noteq> 0}", "by (metis True support_set_def)"], ["proof (state)\nthis:\n  y \\<in> {b. \\<exists>n a. p b n a \\<noteq> 0}\n\ngoal (1 subgoal):\n 1. y \\<in> support_set p \\<Longrightarrow> y \\<in> support_set (p(x := pr))", "then"], ["proof (chain)\npicking this:\n  y \\<in> {b. \\<exists>n a. p b n a \\<noteq> 0}", "have \"y \\<noteq> x\""], ["proof (prove)\nusing this:\n  y \\<in> {b. \\<exists>n a. p b n a \\<noteq> 0}\n\ngoal (1 subgoal):\n 1. y \\<noteq> x", "using assms(2) support_set_def"], ["proof (prove)\nusing this:\n  y \\<in> {b. \\<exists>n a. p b n a \\<noteq> 0}\n  x \\<notin> support_set p\n  support_set ?p = {x. \\<exists>n w. ?p x n w \\<noteq> 0}\n\ngoal (1 subgoal):\n 1. y \\<noteq> x", "by force"], ["proof (state)\nthis:\n  y \\<noteq> x\n\ngoal (1 subgoal):\n 1. y \\<in> support_set p \\<Longrightarrow> y \\<in> support_set (p(x := pr))", "then"], ["proof (chain)\npicking this:\n  y \\<noteq> x", "show ?thesis"], ["proof (prove)\nusing this:\n  y \\<noteq> x\n\ngoal (1 subgoal):\n 1. y \\<in> support_set (p(x := pr))", "using f1"], ["proof (prove)\nusing this:\n  y \\<noteq> x\n  y \\<in> {b. \\<exists>n a. p b n a \\<noteq> 0}\n\ngoal (1 subgoal):\n 1. y \\<in> support_set (p(x := pr))", "by (simp add: support_set_def)"], ["proof (state)\nthis:\n  y \\<in> support_set (p(x := pr))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  y \\<in> support_set (p(x := pr))\n\ngoal (1 subgoal):\n 1. y \\<notin> support_set p \\<Longrightarrow>\n    y \\<in> support_set (p(x := pr))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. y \\<notin> support_set p \\<Longrightarrow>\n    y \\<in> support_set (p(x := pr))", "case False"], ["proof (state)\nthis:\n  y \\<notin> support_set p\n\ngoal (1 subgoal):\n 1. y \\<notin> support_set p \\<Longrightarrow>\n    y \\<in> support_set (p(x := pr))", "hence \"y = x\""], ["proof (prove)\nusing this:\n  y \\<notin> support_set p\n\ngoal (1 subgoal):\n 1. y = x", "using \\<open>y \\<in> support_set p \\<union> {x}\\<close>"], ["proof (prove)\nusing this:\n  y \\<notin> support_set p\n  y \\<in> support_set p \\<union> {x}\n\ngoal (1 subgoal):\n 1. y = x", "by auto"], ["proof (state)\nthis:\n  y = x\n\ngoal (1 subgoal):\n 1. y \\<notin> support_set p \\<Longrightarrow>\n    y \\<in> support_set (p(x := pr))", "thus ?thesis"], ["proof (prove)\nusing this:\n  y = x\n\ngoal (1 subgoal):\n 1. y \\<in> support_set (p(x := pr))", "using assms"], ["proof (prove)\nusing this:\n  y = x\n  \\<exists>n w. pr n w \\<noteq> 0\n  x \\<notin> support_set p\n\ngoal (1 subgoal):\n 1. y \\<in> support_set (p(x := pr))", "by (simp add: support_set_def)"], ["proof (state)\nthis:\n  y \\<in> support_set (p(x := pr))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  y \\<in> support_set (p(x := pr))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  support_set p \\<union> {x} \\<subseteq> support_set (p(x := pr))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma fix_asset_price:\n  shows \"\\<exists>x Mkt2. x \\<notin> stocks Mkt \\<and>\n  coincides_on Mkt Mkt2 (stocks Mkt) \\<and>\n  prices Mkt2 x = pr\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x Mkt2.\n       x \\<notin> stocks Mkt \\<and>\n       coincides_on Mkt Mkt2 (stocks Mkt) \\<and> prices Mkt2 x = pr", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>x Mkt2.\n       x \\<notin> stocks Mkt \\<and>\n       coincides_on Mkt Mkt2 (stocks Mkt) \\<and> prices Mkt2 x = pr", "have \"\\<exists>x. x\\<notin> stocks Mkt\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x. x \\<notin> stocks Mkt", "by (metis UNIV_eq_I stk_strict_subs_def mkt_stocks_assets)"], ["proof (state)\nthis:\n  \\<exists>x. x \\<notin> stocks Mkt\n\ngoal (1 subgoal):\n 1. \\<exists>x Mkt2.\n       x \\<notin> stocks Mkt \\<and>\n       coincides_on Mkt Mkt2 (stocks Mkt) \\<and> prices Mkt2 x = pr", "from this"], ["proof (chain)\npicking this:\n  \\<exists>x. x \\<notin> stocks Mkt", "obtain x where \"x\\<notin> stocks Mkt\""], ["proof (prove)\nusing this:\n  \\<exists>x. x \\<notin> stocks Mkt\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        x \\<notin> stocks Mkt \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  x \\<notin> stocks Mkt\n\ngoal (1 subgoal):\n 1. \\<exists>x Mkt2.\n       x \\<notin> stocks Mkt \\<and>\n       coincides_on Mkt Mkt2 (stocks Mkt) \\<and> prices Mkt2 x = pr", "let ?res = \"discrete_market_of (stocks Mkt) ((prices Mkt)(x:=pr))\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>x Mkt2.\n       x \\<notin> stocks Mkt \\<and>\n       coincides_on Mkt Mkt2 (stocks Mkt) \\<and> prices Mkt2 x = pr", "have \"coincides_on Mkt ?res (stocks Mkt)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. coincides_on Mkt\n     (discrete_market_of (stocks Mkt) ((prices Mkt)(x := pr))) (stocks Mkt)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. coincides_on Mkt\n     (discrete_market_of (stocks Mkt) ((prices Mkt)(x := pr))) (stocks Mkt)", "have \"stocks Mkt = stocks (discrete_market_of (stocks Mkt) ((prices Mkt)(x := pr)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. stocks Mkt =\n    stocks (discrete_market_of (stocks Mkt) ((prices Mkt)(x := pr)))", "by (metis (no_types) stk_strict_subs_def mkt_stocks_assets stocks_of)"], ["proof (state)\nthis:\n  stocks Mkt =\n  stocks (discrete_market_of (stocks Mkt) ((prices Mkt)(x := pr)))\n\ngoal (1 subgoal):\n 1. coincides_on Mkt\n     (discrete_market_of (stocks Mkt) ((prices Mkt)(x := pr))) (stocks Mkt)", "then"], ["proof (chain)\npicking this:\n  stocks Mkt =\n  stocks (discrete_market_of (stocks Mkt) ((prices Mkt)(x := pr)))", "show ?thesis"], ["proof (prove)\nusing this:\n  stocks Mkt =\n  stocks (discrete_market_of (stocks Mkt) ((prices Mkt)(x := pr)))\n\ngoal (1 subgoal):\n 1. coincides_on Mkt\n     (discrete_market_of (stocks Mkt) ((prices Mkt)(x := pr))) (stocks Mkt)", "by (simp add: \\<open>x \\<notin> stocks Mkt\\<close> coincides_on_def prices_of)"], ["proof (state)\nthis:\n  coincides_on Mkt (discrete_market_of (stocks Mkt) ((prices Mkt)(x := pr)))\n   (stocks Mkt)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  coincides_on Mkt (discrete_market_of (stocks Mkt) ((prices Mkt)(x := pr)))\n   (stocks Mkt)\n\ngoal (1 subgoal):\n 1. \\<exists>x Mkt2.\n       x \\<notin> stocks Mkt \\<and>\n       coincides_on Mkt Mkt2 (stocks Mkt) \\<and> prices Mkt2 x = pr", "have \"prices ?res x = pr\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prices (discrete_market_of (stocks Mkt) ((prices Mkt)(x := pr))) x = pr", "by (simp add: prices_of)"], ["proof (state)\nthis:\n  prices (discrete_market_of (stocks Mkt) ((prices Mkt)(x := pr))) x = pr\n\ngoal (1 subgoal):\n 1. \\<exists>x Mkt2.\n       x \\<notin> stocks Mkt \\<and>\n       coincides_on Mkt Mkt2 (stocks Mkt) \\<and> prices Mkt2 x = pr", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x Mkt2.\n       x \\<notin> stocks Mkt \\<and>\n       coincides_on Mkt Mkt2 (stocks Mkt) \\<and> prices Mkt2 x = pr", "using \\<open>coincides_on Mkt (discrete_market_of (stocks Mkt) ((prices Mkt)(x := pr))) (stocks Mkt)\\<close> \\<open>prices (discrete_market_of (stocks Mkt) ((prices Mkt)(x := pr))) x = pr\\<close> \\<open>x \\<notin> stocks Mkt\\<close>"], ["proof (prove)\nusing this:\n  coincides_on Mkt (discrete_market_of (stocks Mkt) ((prices Mkt)(x := pr)))\n   (stocks Mkt)\n  prices (discrete_market_of (stocks Mkt) ((prices Mkt)(x := pr))) x = pr\n  x \\<notin> stocks Mkt\n\ngoal (1 subgoal):\n 1. \\<exists>x Mkt2.\n       x \\<notin> stocks Mkt \\<and>\n       coincides_on Mkt Mkt2 (stocks Mkt) \\<and> prices Mkt2 x = pr", "by blast"], ["proof (state)\nthis:\n  \\<exists>x Mkt2.\n     x \\<notin> stocks Mkt \\<and>\n     coincides_on Mkt Mkt2 (stocks Mkt) \\<and> prices Mkt2 x = pr\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in disc_market_pos_stock) arbitrage_portfolio_properties:\n  assumes \"price_structure der matur \\<pi> pr\"\n  and \"replicating_portfolio pf der matur\"\n  and  \"(coincides_on Mkt Mkt2 (stocks Mkt))\"\n  and \"(prices Mkt2 x = pr)\"\n  and \"x\\<notin> stocks Mkt\"\n  and \"diff_inv = (\\<pi> - initial_value pf) / constant_image (prices Mkt pos_stock 0)\"\n  and \"diff_inv \\<noteq> 0\"\n  and \"arb_pf = (\\<lambda> (x::'b) (n::nat) (w::'a). 0::real)(x:= (\\<lambda> n w. -1), pos_stock := (\\<lambda> n w. diff_inv))\"\n  and \"contr_pf = qty_sum arb_pf pf\"\nshows \"self_financing Mkt2 contr_pf\"\n  and \"trading_strategy contr_pf\"\n  and \"\\<forall>w\\<in> space M. cls_val_process Mkt2 contr_pf 0 w = 0\"\n  and \"0 < diff_inv \\<longrightarrow> (AE w in M. 0 < cls_val_process Mkt2 contr_pf matur w)\"\n  and \"diff_inv < 0 \\<longrightarrow> (AE w in M. 0 > cls_val_process Mkt2 contr_pf matur w)\"\n  and \"support_set arb_pf = {x, pos_stock}\"\n  and \"portfolio contr_pf\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (self_financing Mkt2 contr_pf &&&\n     trading_strategy contr_pf &&&\n     \\<forall>w\\<in>space M. cls_val_process Mkt2 contr_pf 0 w = 0) &&&\n    (0 < diff_inv \\<longrightarrow>\n     (AE w in M. 0 < cls_val_process Mkt2 contr_pf matur w) &&&\n     diff_inv < 0 \\<longrightarrow>\n     (AE w in M. cls_val_process Mkt2 contr_pf matur w < 0)) &&&\n    support_set arb_pf = {x, pos_stock} &&& portfolio contr_pf", "proof -"], ["proof (state)\ngoal (7 subgoals):\n 1. self_financing Mkt2 contr_pf\n 2. trading_strategy contr_pf\n 3. \\<forall>w\\<in>space M. cls_val_process Mkt2 contr_pf 0 w = 0\n 4. 0 < diff_inv \\<longrightarrow>\n    (AE w in M. 0 < cls_val_process Mkt2 contr_pf matur w)\n 5. diff_inv < 0 \\<longrightarrow>\n    (AE w in M. cls_val_process Mkt2 contr_pf matur w < 0)\n 6. support_set arb_pf = {x, pos_stock}\n 7. portfolio contr_pf", "have \"0 < constant_image (prices Mkt pos_stock 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < constant_image (prices Mkt pos_stock 0)", "using trading_strategy_init"], ["proof (prove)\nusing this:\n  \\<lbrakk>trading_strategy ?p; support_adapt Mkt ?p\\<rbrakk>\n  \\<Longrightarrow> \\<exists>c.\n                       \\<forall>w\\<in>space M. val_process Mkt ?p 0 w = c\n\ngoal (1 subgoal):\n 1. 0 < constant_image (prices Mkt pos_stock 0)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>p.\n        \\<lbrakk>trading_strategy p; support_adapt Mkt p\\<rbrakk>\n        \\<Longrightarrow> \\<exists>c.\n                             \\<forall>w\\<in>space M.\n                                val_process Mkt p 0 w = c) \\<Longrightarrow>\n    0 < constant_image (prices Mkt pos_stock 0)", "have \"borel_adapt_stoch_proc F (prices Mkt pos_stock)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. borel_adapt_stoch_proc F (prices Mkt pos_stock)", "using pos_stock_borel_adapted"], ["proof (prove)\nusing this:\n  borel_adapt_stoch_proc F (prices Mkt pos_stock)\n\ngoal (1 subgoal):\n 1. borel_adapt_stoch_proc F (prices Mkt pos_stock)", "by simp"], ["proof (state)\nthis:\n  borel_adapt_stoch_proc F (prices Mkt pos_stock)\n\ngoal (1 subgoal):\n 1. (\\<And>p.\n        \\<lbrakk>trading_strategy p; support_adapt Mkt p\\<rbrakk>\n        \\<Longrightarrow> \\<exists>c.\n                             \\<forall>w\\<in>space M.\n                                val_process Mkt p 0 w = c) \\<Longrightarrow>\n    0 < constant_image (prices Mkt pos_stock 0)", "hence \"\\<exists>c. \\<forall>w\\<in>space M. prices Mkt pos_stock 0 w = c\""], ["proof (prove)\nusing this:\n  borel_adapt_stoch_proc F (prices Mkt pos_stock)\n\ngoal (1 subgoal):\n 1. \\<exists>c. \\<forall>w\\<in>space M. prices Mkt pos_stock 0 w = c", "using  adapted_init[of \"prices Mkt pos_stock\"]"], ["proof (prove)\nusing this:\n  borel_adapt_stoch_proc F (prices Mkt pos_stock)\n  borel_adapt_stoch_proc F (prices Mkt pos_stock) \\<Longrightarrow>\n  \\<exists>c. \\<forall>w\\<in>space M. prices Mkt pos_stock 0 w = c\n\ngoal (1 subgoal):\n 1. \\<exists>c. \\<forall>w\\<in>space M. prices Mkt pos_stock 0 w = c", "by simp"], ["proof (state)\nthis:\n  \\<exists>c. \\<forall>w\\<in>space M. prices Mkt pos_stock 0 w = c\n\ngoal (1 subgoal):\n 1. (\\<And>p.\n        \\<lbrakk>trading_strategy p; support_adapt Mkt p\\<rbrakk>\n        \\<Longrightarrow> \\<exists>c.\n                             \\<forall>w\\<in>space M.\n                                val_process Mkt p 0 w = c) \\<Longrightarrow>\n    0 < constant_image (prices Mkt pos_stock 0)", "moreover"], ["proof (state)\nthis:\n  \\<exists>c. \\<forall>w\\<in>space M. prices Mkt pos_stock 0 w = c\n\ngoal (1 subgoal):\n 1. (\\<And>p.\n        \\<lbrakk>trading_strategy p; support_adapt Mkt p\\<rbrakk>\n        \\<Longrightarrow> \\<exists>c.\n                             \\<forall>w\\<in>space M.\n                                val_process Mkt p 0 w = c) \\<Longrightarrow>\n    0 < constant_image (prices Mkt pos_stock 0)", "have \"\\<forall>w\\<in> space M. 0 < prices Mkt pos_stock 0 w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>w\\<in>space M. 0 < prices Mkt pos_stock 0 w", "using positive"], ["proof (prove)\nusing this:\n  \\<forall>n w. 0 < prices Mkt pos_stock n w\n\ngoal (1 subgoal):\n 1. \\<forall>w\\<in>space M. 0 < prices Mkt pos_stock 0 w", "by simp"], ["proof (state)\nthis:\n  \\<forall>w\\<in>space M. 0 < prices Mkt pos_stock 0 w\n\ngoal (1 subgoal):\n 1. (\\<And>p.\n        \\<lbrakk>trading_strategy p; support_adapt Mkt p\\<rbrakk>\n        \\<Longrightarrow> \\<exists>c.\n                             \\<forall>w\\<in>space M.\n                                val_process Mkt p 0 w = c) \\<Longrightarrow>\n    0 < constant_image (prices Mkt pos_stock 0)", "ultimately"], ["proof (chain)\npicking this:\n  \\<exists>c. \\<forall>w\\<in>space M. prices Mkt pos_stock 0 w = c\n  \\<forall>w\\<in>space M. 0 < prices Mkt pos_stock 0 w", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>c. \\<forall>w\\<in>space M. prices Mkt pos_stock 0 w = c\n  \\<forall>w\\<in>space M. 0 < prices Mkt pos_stock 0 w\n\ngoal (1 subgoal):\n 1. 0 < constant_image (prices Mkt pos_stock 0)", "using constant_image_pos"], ["proof (prove)\nusing this:\n  \\<exists>c. \\<forall>w\\<in>space M. prices Mkt pos_stock 0 w = c\n  \\<forall>w\\<in>space M. 0 < prices Mkt pos_stock 0 w\n  \\<lbrakk>\\<forall>x\\<in>space M. 0 < ?f x;\n   \\<exists>c. \\<forall>x\\<in>space M. ?f x = c\\<rbrakk>\n  \\<Longrightarrow> 0 < constant_image ?f\n\ngoal (1 subgoal):\n 1. 0 < constant_image (prices Mkt pos_stock 0)", "by simp"], ["proof (state)\nthis:\n  0 < constant_image (prices Mkt pos_stock 0)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  0 < constant_image (prices Mkt pos_stock 0)\n\ngoal (7 subgoals):\n 1. self_financing Mkt2 contr_pf\n 2. trading_strategy contr_pf\n 3. \\<forall>w\\<in>space M. cls_val_process Mkt2 contr_pf 0 w = 0\n 4. 0 < diff_inv \\<longrightarrow>\n    (AE w in M. 0 < cls_val_process Mkt2 contr_pf matur w)\n 5. diff_inv < 0 \\<longrightarrow>\n    (AE w in M. cls_val_process Mkt2 contr_pf matur w < 0)\n 6. support_set arb_pf = {x, pos_stock}\n 7. portfolio contr_pf", "show \"support_set arb_pf = {x, pos_stock}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. support_set arb_pf = {x, pos_stock}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. support_set arb_pf = {x, pos_stock}", "have \"arb_pf = (\\<lambda> (x::'b) (n::nat) (w::'a). 0::real)(x:= (\\<lambda> n w. -1), pos_stock := (\\<lambda> n w. diff_inv))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. arb_pf = (\\<lambda>x n w. 0)\n    (x := \\<lambda>n w. - 1, pos_stock := \\<lambda>n w. diff_inv)", "using \\<open>arb_pf = (\\<lambda> (x::'b) (n::nat) (w::'a). 0::real)(x:= (\\<lambda> n w. -1), pos_stock := (\\<lambda> n w. diff_inv))\\<close>"], ["proof (prove)\nusing this:\n  arb_pf = (\\<lambda>x n w. 0)\n  (x := \\<lambda>n w. - 1, pos_stock := \\<lambda>n w. diff_inv)\n\ngoal (1 subgoal):\n 1. arb_pf = (\\<lambda>x n w. 0)\n    (x := \\<lambda>n w. - 1, pos_stock := \\<lambda>n w. diff_inv)", "."], ["proof (state)\nthis:\n  arb_pf = (\\<lambda>x n w. 0)\n  (x := \\<lambda>n w. - 1, pos_stock := \\<lambda>n w. diff_inv)\n\ngoal (1 subgoal):\n 1. support_set arb_pf = {x, pos_stock}", "moreover"], ["proof (state)\nthis:\n  arb_pf = (\\<lambda>x n w. 0)\n  (x := \\<lambda>n w. - 1, pos_stock := \\<lambda>n w. diff_inv)\n\ngoal (1 subgoal):\n 1. support_set arb_pf = {x, pos_stock}", "have \"\\<exists>n w. diff_inv \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>n w. diff_inv \\<noteq> 0", "using assms"], ["proof (prove)\nusing this:\n  price_structure der matur \\<pi> pr\n  replicating_portfolio pf der matur\n  coincides_on Mkt Mkt2 (stocks Mkt)\n  prices Mkt2 x = pr\n  x \\<notin> stocks Mkt\n  diff_inv =\n  (\\<pi> - initial_value pf) / constant_image (prices Mkt pos_stock 0)\n  diff_inv \\<noteq> 0\n  arb_pf = (\\<lambda>x n w. 0)\n  (x := \\<lambda>n w. - 1, pos_stock := \\<lambda>n w. diff_inv)\n  contr_pf = qty_sum arb_pf pf\n\ngoal (1 subgoal):\n 1. \\<exists>n w. diff_inv \\<noteq> 0", "by simp"], ["proof (state)\nthis:\n  \\<exists>n w. diff_inv \\<noteq> 0\n\ngoal (1 subgoal):\n 1. support_set arb_pf = {x, pos_stock}", "moreover"], ["proof (state)\nthis:\n  \\<exists>n w. diff_inv \\<noteq> 0\n\ngoal (1 subgoal):\n 1. support_set arb_pf = {x, pos_stock}", "have \"x\\<noteq> pos_stock\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<noteq> pos_stock", "using \\<open>x \\<notin> stocks Mkt\\<close> in_stock"], ["proof (prove)\nusing this:\n  x \\<notin> stocks Mkt\n  pos_stock \\<in> stocks Mkt\n\ngoal (1 subgoal):\n 1. x \\<noteq> pos_stock", "by auto"], ["proof (state)\nthis:\n  x \\<noteq> pos_stock\n\ngoal (1 subgoal):\n 1. support_set arb_pf = {x, pos_stock}", "ultimately"], ["proof (chain)\npicking this:\n  arb_pf = (\\<lambda>x n w. 0)\n  (x := \\<lambda>n w. - 1, pos_stock := \\<lambda>n w. diff_inv)\n  \\<exists>n w. diff_inv \\<noteq> 0\n  x \\<noteq> pos_stock", "show ?thesis"], ["proof (prove)\nusing this:\n  arb_pf = (\\<lambda>x n w. 0)\n  (x := \\<lambda>n w. - 1, pos_stock := \\<lambda>n w. diff_inv)\n  \\<exists>n w. diff_inv \\<noteq> 0\n  x \\<noteq> pos_stock\n\ngoal (1 subgoal):\n 1. support_set arb_pf = {x, pos_stock}", "by (simp add:two_component_support_set)"], ["proof (state)\nthis:\n  support_set arb_pf = {x, pos_stock}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  support_set arb_pf = {x, pos_stock}\n\ngoal (6 subgoals):\n 1. self_financing Mkt2 contr_pf\n 2. trading_strategy contr_pf\n 3. \\<forall>w\\<in>space M. cls_val_process Mkt2 contr_pf 0 w = 0\n 4. 0 < diff_inv \\<longrightarrow>\n    (AE w in M. 0 < cls_val_process Mkt2 contr_pf matur w)\n 5. diff_inv < 0 \\<longrightarrow>\n    (AE w in M. cls_val_process Mkt2 contr_pf matur w < 0)\n 6. portfolio contr_pf", "hence \"portfolio arb_pf\""], ["proof (prove)\nusing this:\n  support_set arb_pf = {x, pos_stock}\n\ngoal (1 subgoal):\n 1. portfolio arb_pf", "unfolding portfolio_def"], ["proof (prove)\nusing this:\n  support_set arb_pf = {x, pos_stock}\n\ngoal (1 subgoal):\n 1. finite (support_set arb_pf)", "by simp"], ["proof (state)\nthis:\n  portfolio arb_pf\n\ngoal (6 subgoals):\n 1. self_financing Mkt2 contr_pf\n 2. trading_strategy contr_pf\n 3. \\<forall>w\\<in>space M. cls_val_process Mkt2 contr_pf 0 w = 0\n 4. 0 < diff_inv \\<longrightarrow>\n    (AE w in M. 0 < cls_val_process Mkt2 contr_pf matur w)\n 5. diff_inv < 0 \\<longrightarrow>\n    (AE w in M. cls_val_process Mkt2 contr_pf matur w < 0)\n 6. portfolio contr_pf", "have arb_vp:\"\\<forall>n w. val_process Mkt2 arb_pf n w = prices Mkt2 pos_stock n w * diff_inv - pr n w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n w.\n       val_process Mkt2 arb_pf n w =\n       prices Mkt2 pos_stock n w * diff_inv - pr n w", "proof (intro allI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n w.\n       val_process Mkt2 arb_pf n w =\n       prices Mkt2 pos_stock n w * diff_inv - pr n w", "fix n w"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n w.\n       val_process Mkt2 arb_pf n w =\n       prices Mkt2 pos_stock n w * diff_inv - pr n w", "have \"val_process Mkt2 arb_pf n w = prices Mkt2 pos_stock n w * (\\<lambda> n w. diff_inv) n w + prices Mkt2 x n w * (\\<lambda> n w. -1) n w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. val_process Mkt2 arb_pf n w =\n    prices Mkt2 pos_stock n w * diff_inv + prices Mkt2 x n w * - 1", "proof (rule two_component_val_process)"], ["proof (state)\ngoal (5 subgoals):\n 1. arb_pf = (\\<lambda>x n w. 0)\n    (x := \\<lambda>a b. - 1, pos_stock := \\<lambda>a b. diff_inv)\n 2. portfolio arb_pf\n 3. x \\<noteq> pos_stock\n 4. \\<exists>n w. - 1 \\<noteq> 0\n 5. \\<exists>n w. diff_inv \\<noteq> 0", "show \"x\\<noteq> pos_stock\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<noteq> pos_stock", "using \\<open>x \\<notin> stocks Mkt\\<close> in_stock"], ["proof (prove)\nusing this:\n  x \\<notin> stocks Mkt\n  pos_stock \\<in> stocks Mkt\n\ngoal (1 subgoal):\n 1. x \\<noteq> pos_stock", "by auto"], ["proof (state)\nthis:\n  x \\<noteq> pos_stock\n\ngoal (4 subgoals):\n 1. arb_pf = (\\<lambda>x n w. 0)\n    (x := \\<lambda>a b. - 1, pos_stock := \\<lambda>a b. diff_inv)\n 2. portfolio arb_pf\n 3. \\<exists>n w. - 1 \\<noteq> 0\n 4. \\<exists>n w. diff_inv \\<noteq> 0", "show \"arb_pf = (\\<lambda>x n w. 0)(x := \\<lambda>a b. - 1, pos_stock := \\<lambda>a b. diff_inv)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. arb_pf = (\\<lambda>x n w. 0)\n    (x := \\<lambda>a b. - 1, pos_stock := \\<lambda>a b. diff_inv)", "using assms"], ["proof (prove)\nusing this:\n  price_structure der matur \\<pi> pr\n  replicating_portfolio pf der matur\n  coincides_on Mkt Mkt2 (stocks Mkt)\n  prices Mkt2 x = pr\n  x \\<notin> stocks Mkt\n  diff_inv =\n  (\\<pi> - initial_value pf) / constant_image (prices Mkt pos_stock 0)\n  diff_inv \\<noteq> 0\n  arb_pf = (\\<lambda>x n w. 0)\n  (x := \\<lambda>n w. - 1, pos_stock := \\<lambda>n w. diff_inv)\n  contr_pf = qty_sum arb_pf pf\n\ngoal (1 subgoal):\n 1. arb_pf = (\\<lambda>x n w. 0)\n    (x := \\<lambda>a b. - 1, pos_stock := \\<lambda>a b. diff_inv)", "by simp"], ["proof (state)\nthis:\n  arb_pf = (\\<lambda>x n w. 0)\n  (x := \\<lambda>a b. - 1, pos_stock := \\<lambda>a b. diff_inv)\n\ngoal (3 subgoals):\n 1. portfolio arb_pf\n 2. \\<exists>n w. - 1 \\<noteq> 0\n 3. \\<exists>n w. diff_inv \\<noteq> 0", "show \"portfolio arb_pf\""], ["proof (prove)\ngoal (1 subgoal):\n 1. portfolio arb_pf", "using \\<open>portfolio arb_pf\\<close>"], ["proof (prove)\nusing this:\n  portfolio arb_pf\n\ngoal (1 subgoal):\n 1. portfolio arb_pf", "by simp"], ["proof (state)\nthis:\n  portfolio arb_pf\n\ngoal (2 subgoals):\n 1. \\<exists>n w. - 1 \\<noteq> 0\n 2. \\<exists>n w. diff_inv \\<noteq> 0", "show \"\\<exists>n w. - (1::real) \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>n w. - 1 \\<noteq> 0", "by simp"], ["proof (state)\nthis:\n  \\<exists>n w. - 1 \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<exists>n w. diff_inv \\<noteq> 0", "show \"\\<exists>n w. diff_inv \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>n w. diff_inv \\<noteq> 0", "using assms"], ["proof (prove)\nusing this:\n  price_structure der matur \\<pi> pr\n  replicating_portfolio pf der matur\n  coincides_on Mkt Mkt2 (stocks Mkt)\n  prices Mkt2 x = pr\n  x \\<notin> stocks Mkt\n  diff_inv =\n  (\\<pi> - initial_value pf) / constant_image (prices Mkt pos_stock 0)\n  diff_inv \\<noteq> 0\n  arb_pf = (\\<lambda>x n w. 0)\n  (x := \\<lambda>n w. - 1, pos_stock := \\<lambda>n w. diff_inv)\n  contr_pf = qty_sum arb_pf pf\n\ngoal (1 subgoal):\n 1. \\<exists>n w. diff_inv \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  \\<exists>n w. diff_inv \\<noteq> 0\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  val_process Mkt2 arb_pf n w =\n  prices Mkt2 pos_stock n w * diff_inv + prices Mkt2 x n w * - 1\n\ngoal (1 subgoal):\n 1. \\<And>n w.\n       val_process Mkt2 arb_pf n w =\n       prices Mkt2 pos_stock n w * diff_inv - pr n w", "also"], ["proof (state)\nthis:\n  val_process Mkt2 arb_pf n w =\n  prices Mkt2 pos_stock n w * diff_inv + prices Mkt2 x n w * - 1\n\ngoal (1 subgoal):\n 1. \\<And>n w.\n       val_process Mkt2 arb_pf n w =\n       prices Mkt2 pos_stock n w * diff_inv - pr n w", "have \"... = prices Mkt2 pos_stock n w * diff_inv - pr n w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prices Mkt2 pos_stock n w * diff_inv + prices Mkt2 x n w * - 1 =\n    prices Mkt2 pos_stock n w * diff_inv - pr n w", "using \\<open>prices Mkt2 x = pr\\<close>"], ["proof (prove)\nusing this:\n  prices Mkt2 x = pr\n\ngoal (1 subgoal):\n 1. prices Mkt2 pos_stock n w * diff_inv + prices Mkt2 x n w * - 1 =\n    prices Mkt2 pos_stock n w * diff_inv - pr n w", "by simp"], ["proof (state)\nthis:\n  prices Mkt2 pos_stock n w * diff_inv + prices Mkt2 x n w * - 1 =\n  prices Mkt2 pos_stock n w * diff_inv - pr n w\n\ngoal (1 subgoal):\n 1. \\<And>n w.\n       val_process Mkt2 arb_pf n w =\n       prices Mkt2 pos_stock n w * diff_inv - pr n w", "finally"], ["proof (chain)\npicking this:\n  val_process Mkt2 arb_pf n w =\n  prices Mkt2 pos_stock n w * diff_inv - pr n w", "show \"val_process Mkt2 arb_pf n w = prices Mkt2 pos_stock n w * diff_inv - pr n w\""], ["proof (prove)\nusing this:\n  val_process Mkt2 arb_pf n w =\n  prices Mkt2 pos_stock n w * diff_inv - pr n w\n\ngoal (1 subgoal):\n 1. val_process Mkt2 arb_pf n w =\n    prices Mkt2 pos_stock n w * diff_inv - pr n w", "."], ["proof (state)\nthis:\n  val_process Mkt2 arb_pf n w =\n  prices Mkt2 pos_stock n w * diff_inv - pr n w\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>n w.\n     val_process Mkt2 arb_pf n w =\n     prices Mkt2 pos_stock n w * diff_inv - pr n w\n\ngoal (6 subgoals):\n 1. self_financing Mkt2 contr_pf\n 2. trading_strategy contr_pf\n 3. \\<forall>w\\<in>space M. cls_val_process Mkt2 contr_pf 0 w = 0\n 4. 0 < diff_inv \\<longrightarrow>\n    (AE w in M. 0 < cls_val_process Mkt2 contr_pf matur w)\n 5. diff_inv < 0 \\<longrightarrow>\n    (AE w in M. cls_val_process Mkt2 contr_pf matur w < 0)\n 6. portfolio contr_pf", "have \"static_quantities arb_pf\""], ["proof (prove)\ngoal (1 subgoal):\n 1. static_quantities arb_pf", "unfolding static_quantities_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>asset\\<in>support_set arb_pf.\n       \\<exists>c. arb_pf asset = (\\<lambda>n w. c)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>asset.\n       asset \\<in> support_set arb_pf \\<Longrightarrow>\n       \\<exists>c. arb_pf asset = (\\<lambda>n w. c)", "fix asset"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>asset.\n       asset \\<in> support_set arb_pf \\<Longrightarrow>\n       \\<exists>c. arb_pf asset = (\\<lambda>n w. c)", "assume \"asset \\<in> support_set arb_pf\""], ["proof (state)\nthis:\n  asset \\<in> support_set arb_pf\n\ngoal (1 subgoal):\n 1. \\<And>asset.\n       asset \\<in> support_set arb_pf \\<Longrightarrow>\n       \\<exists>c. arb_pf asset = (\\<lambda>n w. c)", "thus \"\\<exists>c. arb_pf asset = (\\<lambda>n w. c)\""], ["proof (prove)\nusing this:\n  asset \\<in> support_set arb_pf\n\ngoal (1 subgoal):\n 1. \\<exists>c. arb_pf asset = (\\<lambda>n w. c)", "proof (cases \"asset = x\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>asset \\<in> support_set arb_pf; asset = x\\<rbrakk>\n    \\<Longrightarrow> \\<exists>c. arb_pf asset = (\\<lambda>n w. c)\n 2. \\<lbrakk>asset \\<in> support_set arb_pf; asset \\<noteq> x\\<rbrakk>\n    \\<Longrightarrow> \\<exists>c. arb_pf asset = (\\<lambda>n w. c)", "case True"], ["proof (state)\nthis:\n  asset = x\n\ngoal (2 subgoals):\n 1. \\<lbrakk>asset \\<in> support_set arb_pf; asset = x\\<rbrakk>\n    \\<Longrightarrow> \\<exists>c. arb_pf asset = (\\<lambda>n w. c)\n 2. \\<lbrakk>asset \\<in> support_set arb_pf; asset \\<noteq> x\\<rbrakk>\n    \\<Longrightarrow> \\<exists>c. arb_pf asset = (\\<lambda>n w. c)", "thus ?thesis"], ["proof (prove)\nusing this:\n  asset = x\n\ngoal (1 subgoal):\n 1. \\<exists>c. arb_pf asset = (\\<lambda>n w. c)", "using assms"], ["proof (prove)\nusing this:\n  asset = x\n  price_structure der matur \\<pi> pr\n  replicating_portfolio pf der matur\n  coincides_on Mkt Mkt2 (stocks Mkt)\n  prices Mkt2 x = pr\n  x \\<notin> stocks Mkt\n  diff_inv =\n  (\\<pi> - initial_value pf) / constant_image (prices Mkt pos_stock 0)\n  diff_inv \\<noteq> 0\n  arb_pf = (\\<lambda>x n w. 0)\n  (x := \\<lambda>n w. - 1, pos_stock := \\<lambda>n w. diff_inv)\n  contr_pf = qty_sum arb_pf pf\n\ngoal (1 subgoal):\n 1. \\<exists>c. arb_pf asset = (\\<lambda>n w. c)", "by auto"], ["proof (state)\nthis:\n  \\<exists>c. arb_pf asset = (\\<lambda>n w. c)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>asset \\<in> support_set arb_pf; asset \\<noteq> x\\<rbrakk>\n    \\<Longrightarrow> \\<exists>c. arb_pf asset = (\\<lambda>n w. c)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>asset \\<in> support_set arb_pf; asset \\<noteq> x\\<rbrakk>\n    \\<Longrightarrow> \\<exists>c. arb_pf asset = (\\<lambda>n w. c)", "case False"], ["proof (state)\nthis:\n  asset \\<noteq> x\n\ngoal (1 subgoal):\n 1. \\<lbrakk>asset \\<in> support_set arb_pf; asset \\<noteq> x\\<rbrakk>\n    \\<Longrightarrow> \\<exists>c. arb_pf asset = (\\<lambda>n w. c)", "hence \"asset = pos_stock\""], ["proof (prove)\nusing this:\n  asset \\<noteq> x\n\ngoal (1 subgoal):\n 1. asset = pos_stock", "using \\<open>support_set arb_pf = {x, pos_stock}\\<close>"], ["proof (prove)\nusing this:\n  asset \\<noteq> x\n  support_set arb_pf = {x, pos_stock}\n\ngoal (1 subgoal):\n 1. asset = pos_stock", "using \\<open>asset \\<in> support_set arb_pf\\<close>"], ["proof (prove)\nusing this:\n  asset \\<noteq> x\n  support_set arb_pf = {x, pos_stock}\n  asset \\<in> support_set arb_pf\n\ngoal (1 subgoal):\n 1. asset = pos_stock", "by blast"], ["proof (state)\nthis:\n  asset = pos_stock\n\ngoal (1 subgoal):\n 1. \\<lbrakk>asset \\<in> support_set arb_pf; asset \\<noteq> x\\<rbrakk>\n    \\<Longrightarrow> \\<exists>c. arb_pf asset = (\\<lambda>n w. c)", "thus ?thesis"], ["proof (prove)\nusing this:\n  asset = pos_stock\n\ngoal (1 subgoal):\n 1. \\<exists>c. arb_pf asset = (\\<lambda>n w. c)", "using assms"], ["proof (prove)\nusing this:\n  asset = pos_stock\n  price_structure der matur \\<pi> pr\n  replicating_portfolio pf der matur\n  coincides_on Mkt Mkt2 (stocks Mkt)\n  prices Mkt2 x = pr\n  x \\<notin> stocks Mkt\n  diff_inv =\n  (\\<pi> - initial_value pf) / constant_image (prices Mkt pos_stock 0)\n  diff_inv \\<noteq> 0\n  arb_pf = (\\<lambda>x n w. 0)\n  (x := \\<lambda>n w. - 1, pos_stock := \\<lambda>n w. diff_inv)\n  contr_pf = qty_sum arb_pf pf\n\ngoal (1 subgoal):\n 1. \\<exists>c. arb_pf asset = (\\<lambda>n w. c)", "by auto"], ["proof (state)\nthis:\n  \\<exists>c. arb_pf asset = (\\<lambda>n w. c)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>c. arb_pf asset = (\\<lambda>n w. c)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  static_quantities arb_pf\n\ngoal (6 subgoals):\n 1. self_financing Mkt2 contr_pf\n 2. trading_strategy contr_pf\n 3. \\<forall>w\\<in>space M. cls_val_process Mkt2 contr_pf 0 w = 0\n 4. 0 < diff_inv \\<longrightarrow>\n    (AE w in M. 0 < cls_val_process Mkt2 contr_pf matur w)\n 5. diff_inv < 0 \\<longrightarrow>\n    (AE w in M. cls_val_process Mkt2 contr_pf matur w < 0)\n 6. portfolio contr_pf", "hence \"trading_strategy arb_pf\""], ["proof (prove)\nusing this:\n  static_quantities arb_pf\n\ngoal (1 subgoal):\n 1. trading_strategy arb_pf", "using \\<open>portfolio arb_pf\\<close> portfolio_def static_quantities_trading_strat"], ["proof (prove)\nusing this:\n  static_quantities arb_pf\n  portfolio arb_pf\n  portfolio ?p = finite (support_set ?p)\n  \\<lbrakk>static_quantities ?p; finite (support_set ?p)\\<rbrakk>\n  \\<Longrightarrow> trading_strategy ?p\n\ngoal (1 subgoal):\n 1. trading_strategy arb_pf", "by blast"], ["proof (state)\nthis:\n  trading_strategy arb_pf\n\ngoal (6 subgoals):\n 1. self_financing Mkt2 contr_pf\n 2. trading_strategy contr_pf\n 3. \\<forall>w\\<in>space M. cls_val_process Mkt2 contr_pf 0 w = 0\n 4. 0 < diff_inv \\<longrightarrow>\n    (AE w in M. 0 < cls_val_process Mkt2 contr_pf matur w)\n 5. diff_inv < 0 \\<longrightarrow>\n    (AE w in M. cls_val_process Mkt2 contr_pf matur w < 0)\n 6. portfolio contr_pf", "have \"self_financing Mkt2 arb_pf\""], ["proof (prove)\ngoal (1 subgoal):\n 1. self_financing Mkt2 arb_pf", "by (simp add: static_portfolio_self_financing \\<open>arb_pf = (\\<lambda>x n w. 0) (x := \\<lambda>n w. -1, pos_stock := \\<lambda>n w. diff_inv)\\<close>)"], ["proof (state)\nthis:\n  self_financing Mkt2 arb_pf\n\ngoal (6 subgoals):\n 1. self_financing Mkt2 contr_pf\n 2. trading_strategy contr_pf\n 3. \\<forall>w\\<in>space M. cls_val_process Mkt2 contr_pf 0 w = 0\n 4. 0 < diff_inv \\<longrightarrow>\n    (AE w in M. 0 < cls_val_process Mkt2 contr_pf matur w)\n 5. diff_inv < 0 \\<longrightarrow>\n    (AE w in M. cls_val_process Mkt2 contr_pf matur w < 0)\n 6. portfolio contr_pf", "hence arb_uvp: \"\\<forall>n w. cls_val_process Mkt2 arb_pf n w = prices Mkt2 pos_stock n w * diff_inv - pr n w\""], ["proof (prove)\nusing this:\n  self_financing Mkt2 arb_pf\n\ngoal (1 subgoal):\n 1. \\<forall>n w.\n       cls_val_process Mkt2 arb_pf n w =\n       prices Mkt2 pos_stock n w * diff_inv - pr n w", "using assms arb_vp"], ["proof (prove)\nusing this:\n  self_financing Mkt2 arb_pf\n  price_structure der matur \\<pi> pr\n  replicating_portfolio pf der matur\n  coincides_on Mkt Mkt2 (stocks Mkt)\n  prices Mkt2 x = pr\n  x \\<notin> stocks Mkt\n  diff_inv =\n  (\\<pi> - initial_value pf) / constant_image (prices Mkt pos_stock 0)\n  diff_inv \\<noteq> 0\n  arb_pf = (\\<lambda>x n w. 0)\n  (x := \\<lambda>n w. - 1, pos_stock := \\<lambda>n w. diff_inv)\n  contr_pf = qty_sum arb_pf pf\n  \\<forall>n w.\n     val_process Mkt2 arb_pf n w =\n     prices Mkt2 pos_stock n w * diff_inv - pr n w\n\ngoal (1 subgoal):\n 1. \\<forall>n w.\n       cls_val_process Mkt2 arb_pf n w =\n       prices Mkt2 pos_stock n w * diff_inv - pr n w", "by (simp add:self_financingE)"], ["proof (state)\nthis:\n  \\<forall>n w.\n     cls_val_process Mkt2 arb_pf n w =\n     prices Mkt2 pos_stock n w * diff_inv - pr n w\n\ngoal (6 subgoals):\n 1. self_financing Mkt2 contr_pf\n 2. trading_strategy contr_pf\n 3. \\<forall>w\\<in>space M. cls_val_process Mkt2 contr_pf 0 w = 0\n 4. 0 < diff_inv \\<longrightarrow>\n    (AE w in M. 0 < cls_val_process Mkt2 contr_pf matur w)\n 5. diff_inv < 0 \\<longrightarrow>\n    (AE w in M. cls_val_process Mkt2 contr_pf matur w < 0)\n 6. portfolio contr_pf", "show \"portfolio contr_pf\""], ["proof (prove)\ngoal (1 subgoal):\n 1. portfolio contr_pf", "using assms"], ["proof (prove)\nusing this:\n  price_structure der matur \\<pi> pr\n  replicating_portfolio pf der matur\n  coincides_on Mkt Mkt2 (stocks Mkt)\n  prices Mkt2 x = pr\n  x \\<notin> stocks Mkt\n  diff_inv =\n  (\\<pi> - initial_value pf) / constant_image (prices Mkt pos_stock 0)\n  diff_inv \\<noteq> 0\n  arb_pf = (\\<lambda>x n w. 0)\n  (x := \\<lambda>n w. - 1, pos_stock := \\<lambda>n w. diff_inv)\n  contr_pf = qty_sum arb_pf pf\n\ngoal (1 subgoal):\n 1. portfolio contr_pf", "by (metis \\<open>support_set arb_pf = {x, pos_stock}\\<close> replicating_portfolio_def\n          finite.emptyI finite.insertI portfolio_def stock_portfolio_def sum_portfolio)"], ["proof (state)\nthis:\n  portfolio contr_pf\n\ngoal (5 subgoals):\n 1. self_financing Mkt2 contr_pf\n 2. trading_strategy contr_pf\n 3. \\<forall>w\\<in>space M. cls_val_process Mkt2 contr_pf 0 w = 0\n 4. 0 < diff_inv \\<longrightarrow>\n    (AE w in M. 0 < cls_val_process Mkt2 contr_pf matur w)\n 5. diff_inv < 0 \\<longrightarrow>\n    (AE w in M. cls_val_process Mkt2 contr_pf matur w < 0)", "have \"support_set contr_pf \\<subseteq> stocks Mkt \\<union> {x}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. support_set contr_pf \\<subseteq> stocks Mkt \\<union> {x}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. support_set contr_pf \\<subseteq> stocks Mkt \\<union> {x}", "have \"support_set contr_pf \\<subseteq> support_set arb_pf \\<union> support_set pf\""], ["proof (prove)\ngoal (1 subgoal):\n 1. support_set contr_pf\n    \\<subseteq> support_set arb_pf \\<union> support_set pf", "using assms"], ["proof (prove)\nusing this:\n  price_structure der matur \\<pi> pr\n  replicating_portfolio pf der matur\n  coincides_on Mkt Mkt2 (stocks Mkt)\n  prices Mkt2 x = pr\n  x \\<notin> stocks Mkt\n  diff_inv =\n  (\\<pi> - initial_value pf) / constant_image (prices Mkt pos_stock 0)\n  diff_inv \\<noteq> 0\n  arb_pf = (\\<lambda>x n w. 0)\n  (x := \\<lambda>n w. - 1, pos_stock := \\<lambda>n w. diff_inv)\n  contr_pf = qty_sum arb_pf pf\n\ngoal (1 subgoal):\n 1. support_set contr_pf\n    \\<subseteq> support_set arb_pf \\<union> support_set pf", "by (simp add:sum_support_set)"], ["proof (state)\nthis:\n  support_set contr_pf\n  \\<subseteq> support_set arb_pf \\<union> support_set pf\n\ngoal (1 subgoal):\n 1. support_set contr_pf \\<subseteq> stocks Mkt \\<union> {x}", "moreover"], ["proof (state)\nthis:\n  support_set contr_pf\n  \\<subseteq> support_set arb_pf \\<union> support_set pf\n\ngoal (1 subgoal):\n 1. support_set contr_pf \\<subseteq> stocks Mkt \\<union> {x}", "have \"support_set arb_pf \\<subseteq> stocks Mkt \\<union> {x}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. support_set arb_pf \\<subseteq> stocks Mkt \\<union> {x}", "using \\<open>support_set arb_pf = {x, pos_stock}\\<close> in_stock"], ["proof (prove)\nusing this:\n  support_set arb_pf = {x, pos_stock}\n  pos_stock \\<in> stocks Mkt\n\ngoal (1 subgoal):\n 1. support_set arb_pf \\<subseteq> stocks Mkt \\<union> {x}", "by simp"], ["proof (state)\nthis:\n  support_set arb_pf \\<subseteq> stocks Mkt \\<union> {x}\n\ngoal (1 subgoal):\n 1. support_set contr_pf \\<subseteq> stocks Mkt \\<union> {x}", "moreover"], ["proof (state)\nthis:\n  support_set arb_pf \\<subseteq> stocks Mkt \\<union> {x}\n\ngoal (1 subgoal):\n 1. support_set contr_pf \\<subseteq> stocks Mkt \\<union> {x}", "have \"support_set pf \\<subseteq> stocks Mkt \\<union> {x}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. support_set pf \\<subseteq> stocks Mkt \\<union> {x}", "using assms"], ["proof (prove)\nusing this:\n  price_structure der matur \\<pi> pr\n  replicating_portfolio pf der matur\n  coincides_on Mkt Mkt2 (stocks Mkt)\n  prices Mkt2 x = pr\n  x \\<notin> stocks Mkt\n  diff_inv =\n  (\\<pi> - initial_value pf) / constant_image (prices Mkt pos_stock 0)\n  diff_inv \\<noteq> 0\n  arb_pf = (\\<lambda>x n w. 0)\n  (x := \\<lambda>n w. - 1, pos_stock := \\<lambda>n w. diff_inv)\n  contr_pf = qty_sum arb_pf pf\n\ngoal (1 subgoal):\n 1. support_set pf \\<subseteq> stocks Mkt \\<union> {x}", "unfolding replicating_portfolio_def\n      stock_portfolio_def"], ["proof (prove)\nusing this:\n  price_structure der matur \\<pi> pr\n  (portfolio pf \\<and> support_set pf \\<subseteq> stocks Mkt) \\<and>\n  trading_strategy pf \\<and>\n  self_financing Mkt pf \\<and> AEeq M (cls_val_process Mkt pf matur) der\n  coincides_on Mkt Mkt2 (stocks Mkt)\n  prices Mkt2 x = pr\n  x \\<notin> stocks Mkt\n  diff_inv =\n  (\\<pi> - initial_value pf) / constant_image (prices Mkt pos_stock 0)\n  diff_inv \\<noteq> 0\n  arb_pf = (\\<lambda>x n w. 0)\n  (x := \\<lambda>n w. - 1, pos_stock := \\<lambda>n w. diff_inv)\n  contr_pf = qty_sum arb_pf pf\n\ngoal (1 subgoal):\n 1. support_set pf \\<subseteq> stocks Mkt \\<union> {x}", "by auto"], ["proof (state)\nthis:\n  support_set pf \\<subseteq> stocks Mkt \\<union> {x}\n\ngoal (1 subgoal):\n 1. support_set contr_pf \\<subseteq> stocks Mkt \\<union> {x}", "ultimately"], ["proof (chain)\npicking this:\n  support_set contr_pf\n  \\<subseteq> support_set arb_pf \\<union> support_set pf\n  support_set arb_pf \\<subseteq> stocks Mkt \\<union> {x}\n  support_set pf \\<subseteq> stocks Mkt \\<union> {x}", "show ?thesis"], ["proof (prove)\nusing this:\n  support_set contr_pf\n  \\<subseteq> support_set arb_pf \\<union> support_set pf\n  support_set arb_pf \\<subseteq> stocks Mkt \\<union> {x}\n  support_set pf \\<subseteq> stocks Mkt \\<union> {x}\n\ngoal (1 subgoal):\n 1. support_set contr_pf \\<subseteq> stocks Mkt \\<union> {x}", "by auto"], ["proof (state)\nthis:\n  support_set contr_pf \\<subseteq> stocks Mkt \\<union> {x}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  support_set contr_pf \\<subseteq> stocks Mkt \\<union> {x}\n\ngoal (5 subgoals):\n 1. self_financing Mkt2 contr_pf\n 2. trading_strategy contr_pf\n 3. \\<forall>w\\<in>space M. cls_val_process Mkt2 contr_pf 0 w = 0\n 4. 0 < diff_inv \\<longrightarrow>\n    (AE w in M. 0 < cls_val_process Mkt2 contr_pf matur w)\n 5. diff_inv < 0 \\<longrightarrow>\n    (AE w in M. cls_val_process Mkt2 contr_pf matur w < 0)", "show \"self_financing Mkt2 contr_pf\""], ["proof (prove)\ngoal (1 subgoal):\n 1. self_financing Mkt2 contr_pf", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. self_financing Mkt2 contr_pf", "have \"self_financing Mkt2 (qty_sum arb_pf pf)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. self_financing Mkt2 (qty_sum arb_pf pf)", "proof (rule sum_self_financing)"], ["proof (state)\ngoal (4 subgoals):\n 1. portfolio arb_pf\n 2. portfolio pf\n 3. self_financing Mkt2 arb_pf\n 4. self_financing Mkt2 pf", "show \"portfolio arb_pf\""], ["proof (prove)\ngoal (1 subgoal):\n 1. portfolio arb_pf", "using  \\<open>support_set arb_pf = {x, pos_stock}\\<close>"], ["proof (prove)\nusing this:\n  support_set arb_pf = {x, pos_stock}\n\ngoal (1 subgoal):\n 1. portfolio arb_pf", "unfolding portfolio_def"], ["proof (prove)\nusing this:\n  support_set arb_pf = {x, pos_stock}\n\ngoal (1 subgoal):\n 1. finite (support_set arb_pf)", "by auto"], ["proof (state)\nthis:\n  portfolio arb_pf\n\ngoal (3 subgoals):\n 1. portfolio pf\n 2. self_financing Mkt2 arb_pf\n 3. self_financing Mkt2 pf", "show \"portfolio pf\""], ["proof (prove)\ngoal (1 subgoal):\n 1. portfolio pf", "using assms"], ["proof (prove)\nusing this:\n  price_structure der matur \\<pi> pr\n  replicating_portfolio pf der matur\n  coincides_on Mkt Mkt2 (stocks Mkt)\n  prices Mkt2 x = pr\n  x \\<notin> stocks Mkt\n  diff_inv =\n  (\\<pi> - initial_value pf) / constant_image (prices Mkt pos_stock 0)\n  diff_inv \\<noteq> 0\n  arb_pf = (\\<lambda>x n w. 0)\n  (x := \\<lambda>n w. - 1, pos_stock := \\<lambda>n w. diff_inv)\n  contr_pf = qty_sum arb_pf pf\n\ngoal (1 subgoal):\n 1. portfolio pf", "unfolding replicating_portfolio_def stock_portfolio_def"], ["proof (prove)\nusing this:\n  price_structure der matur \\<pi> pr\n  (portfolio pf \\<and> support_set pf \\<subseteq> stocks Mkt) \\<and>\n  trading_strategy pf \\<and>\n  self_financing Mkt pf \\<and> AEeq M (cls_val_process Mkt pf matur) der\n  coincides_on Mkt Mkt2 (stocks Mkt)\n  prices Mkt2 x = pr\n  x \\<notin> stocks Mkt\n  diff_inv =\n  (\\<pi> - initial_value pf) / constant_image (prices Mkt pos_stock 0)\n  diff_inv \\<noteq> 0\n  arb_pf = (\\<lambda>x n w. 0)\n  (x := \\<lambda>n w. - 1, pos_stock := \\<lambda>n w. diff_inv)\n  contr_pf = qty_sum arb_pf pf\n\ngoal (1 subgoal):\n 1. portfolio pf", "by auto"], ["proof (state)\nthis:\n  portfolio pf\n\ngoal (2 subgoals):\n 1. self_financing Mkt2 arb_pf\n 2. self_financing Mkt2 pf", "show \"self_financing Mkt2 pf\""], ["proof (prove)\ngoal (1 subgoal):\n 1. self_financing Mkt2 pf", "using coincides_on_self_financing\n        \\<open>(coincides_on Mkt Mkt2 (stocks Mkt))\\<close> \\<open>(prices Mkt2 x = pr)\\<close> assms(2)"], ["proof (prove)\nusing this:\n  \\<lbrakk>coincides_on ?Mkt ?Mkt2.0 ?A; support_set ?p \\<subseteq> ?A;\n   self_financing ?Mkt ?p\\<rbrakk>\n  \\<Longrightarrow> self_financing ?Mkt2.0 ?p\n  coincides_on Mkt Mkt2 (stocks Mkt)\n  prices Mkt2 x = pr\n  replicating_portfolio pf der matur\n\ngoal (1 subgoal):\n 1. self_financing Mkt2 pf", "unfolding replicating_portfolio_def stock_portfolio_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>coincides_on ?Mkt ?Mkt2.0 ?A; support_set ?p \\<subseteq> ?A;\n   self_financing ?Mkt ?p\\<rbrakk>\n  \\<Longrightarrow> self_financing ?Mkt2.0 ?p\n  coincides_on Mkt Mkt2 (stocks Mkt)\n  prices Mkt2 x = pr\n  (portfolio pf \\<and> support_set pf \\<subseteq> stocks Mkt) \\<and>\n  trading_strategy pf \\<and>\n  self_financing Mkt pf \\<and> AEeq M (cls_val_process Mkt pf matur) der\n\ngoal (1 subgoal):\n 1. self_financing Mkt2 pf", "by blast"], ["proof (state)\nthis:\n  self_financing Mkt2 pf\n\ngoal (1 subgoal):\n 1. self_financing Mkt2 arb_pf", "show \"self_financing Mkt2 arb_pf\""], ["proof (prove)\ngoal (1 subgoal):\n 1. self_financing Mkt2 arb_pf", "by (simp add: static_portfolio_self_financing \\<open>arb_pf = (\\<lambda>x n w. 0) (x := \\<lambda>n w. -1, pos_stock := \\<lambda>n w. diff_inv)\\<close>)"], ["proof (state)\nthis:\n  self_financing Mkt2 arb_pf\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  self_financing Mkt2 (qty_sum arb_pf pf)\n\ngoal (1 subgoal):\n 1. self_financing Mkt2 contr_pf", "thus ?thesis"], ["proof (prove)\nusing this:\n  self_financing Mkt2 (qty_sum arb_pf pf)\n\ngoal (1 subgoal):\n 1. self_financing Mkt2 contr_pf", "using assms"], ["proof (prove)\nusing this:\n  self_financing Mkt2 (qty_sum arb_pf pf)\n  price_structure der matur \\<pi> pr\n  replicating_portfolio pf der matur\n  coincides_on Mkt Mkt2 (stocks Mkt)\n  prices Mkt2 x = pr\n  x \\<notin> stocks Mkt\n  diff_inv =\n  (\\<pi> - initial_value pf) / constant_image (prices Mkt pos_stock 0)\n  diff_inv \\<noteq> 0\n  arb_pf = (\\<lambda>x n w. 0)\n  (x := \\<lambda>n w. - 1, pos_stock := \\<lambda>n w. diff_inv)\n  contr_pf = qty_sum arb_pf pf\n\ngoal (1 subgoal):\n 1. self_financing Mkt2 contr_pf", "by simp"], ["proof (state)\nthis:\n  self_financing Mkt2 contr_pf\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  self_financing Mkt2 contr_pf\n\ngoal (4 subgoals):\n 1. trading_strategy contr_pf\n 2. \\<forall>w\\<in>space M. cls_val_process Mkt2 contr_pf 0 w = 0\n 3. 0 < diff_inv \\<longrightarrow>\n    (AE w in M. 0 < cls_val_process Mkt2 contr_pf matur w)\n 4. diff_inv < 0 \\<longrightarrow>\n    (AE w in M. cls_val_process Mkt2 contr_pf matur w < 0)", "show \"trading_strategy contr_pf\""], ["proof (prove)\ngoal (1 subgoal):\n 1. trading_strategy contr_pf", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. trading_strategy contr_pf", "have \"trading_strategy (qty_sum arb_pf pf)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. trading_strategy (qty_sum arb_pf pf)", "proof (rule sum_trading_strat)"], ["proof (state)\ngoal (2 subgoals):\n 1. trading_strategy arb_pf\n 2. trading_strategy pf", "show \"trading_strategy pf\""], ["proof (prove)\ngoal (1 subgoal):\n 1. trading_strategy pf", "using assms"], ["proof (prove)\nusing this:\n  price_structure der matur \\<pi> pr\n  replicating_portfolio pf der matur\n  coincides_on Mkt Mkt2 (stocks Mkt)\n  prices Mkt2 x = pr\n  x \\<notin> stocks Mkt\n  diff_inv =\n  (\\<pi> - initial_value pf) / constant_image (prices Mkt pos_stock 0)\n  diff_inv \\<noteq> 0\n  arb_pf = (\\<lambda>x n w. 0)\n  (x := \\<lambda>n w. - 1, pos_stock := \\<lambda>n w. diff_inv)\n  contr_pf = qty_sum arb_pf pf\n\ngoal (1 subgoal):\n 1. trading_strategy pf", "unfolding replicating_portfolio_def"], ["proof (prove)\nusing this:\n  price_structure der matur \\<pi> pr\n  stock_portfolio Mkt pf \\<and>\n  trading_strategy pf \\<and>\n  self_financing Mkt pf \\<and> AEeq M (cls_val_process Mkt pf matur) der\n  coincides_on Mkt Mkt2 (stocks Mkt)\n  prices Mkt2 x = pr\n  x \\<notin> stocks Mkt\n  diff_inv =\n  (\\<pi> - initial_value pf) / constant_image (prices Mkt pos_stock 0)\n  diff_inv \\<noteq> 0\n  arb_pf = (\\<lambda>x n w. 0)\n  (x := \\<lambda>n w. - 1, pos_stock := \\<lambda>n w. diff_inv)\n  contr_pf = qty_sum arb_pf pf\n\ngoal (1 subgoal):\n 1. trading_strategy pf", "by simp"], ["proof (state)\nthis:\n  trading_strategy pf\n\ngoal (1 subgoal):\n 1. trading_strategy arb_pf", "show \"trading_strategy arb_pf\""], ["proof (prove)\ngoal (1 subgoal):\n 1. trading_strategy arb_pf", "using \\<open>trading_strategy arb_pf\\<close>"], ["proof (prove)\nusing this:\n  trading_strategy arb_pf\n\ngoal (1 subgoal):\n 1. trading_strategy arb_pf", "."], ["proof (state)\nthis:\n  trading_strategy arb_pf\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  trading_strategy (qty_sum arb_pf pf)\n\ngoal (1 subgoal):\n 1. trading_strategy contr_pf", "thus ?thesis"], ["proof (prove)\nusing this:\n  trading_strategy (qty_sum arb_pf pf)\n\ngoal (1 subgoal):\n 1. trading_strategy contr_pf", "using assms"], ["proof (prove)\nusing this:\n  trading_strategy (qty_sum arb_pf pf)\n  price_structure der matur \\<pi> pr\n  replicating_portfolio pf der matur\n  coincides_on Mkt Mkt2 (stocks Mkt)\n  prices Mkt2 x = pr\n  x \\<notin> stocks Mkt\n  diff_inv =\n  (\\<pi> - initial_value pf) / constant_image (prices Mkt pos_stock 0)\n  diff_inv \\<noteq> 0\n  arb_pf = (\\<lambda>x n w. 0)\n  (x := \\<lambda>n w. - 1, pos_stock := \\<lambda>n w. diff_inv)\n  contr_pf = qty_sum arb_pf pf\n\ngoal (1 subgoal):\n 1. trading_strategy contr_pf", "by simp"], ["proof (state)\nthis:\n  trading_strategy contr_pf\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  trading_strategy contr_pf\n\ngoal (3 subgoals):\n 1. \\<forall>w\\<in>space M. cls_val_process Mkt2 contr_pf 0 w = 0\n 2. 0 < diff_inv \\<longrightarrow>\n    (AE w in M. 0 < cls_val_process Mkt2 contr_pf matur w)\n 3. diff_inv < 0 \\<longrightarrow>\n    (AE w in M. cls_val_process Mkt2 contr_pf matur w < 0)", "show \"\\<forall>w\\<in> space M. cls_val_process Mkt2 contr_pf 0 w = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>w\\<in>space M. cls_val_process Mkt2 contr_pf 0 w = 0", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>w.\n       w \\<in> space M \\<Longrightarrow>\n       cls_val_process Mkt2 contr_pf 0 w = 0", "fix w"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>w.\n       w \\<in> space M \\<Longrightarrow>\n       cls_val_process Mkt2 contr_pf 0 w = 0", "assume \"w\\<in> space M\""], ["proof (state)\nthis:\n  w \\<in> space M\n\ngoal (1 subgoal):\n 1. \\<And>w.\n       w \\<in> space M \\<Longrightarrow>\n       cls_val_process Mkt2 contr_pf 0 w = 0", "have \"cls_val_process Mkt2 contr_pf 0 w = cls_val_process Mkt2 arb_pf 0 w + cls_val_process Mkt2 pf 0 w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cls_val_process Mkt2 contr_pf 0 w =\n    cls_val_process Mkt2 arb_pf 0 w + cls_val_process Mkt2 pf 0 w", "using sum_cls_val_process0[of arb_pf pf Mkt2]"], ["proof (prove)\nusing this:\n  \\<lbrakk>portfolio arb_pf; portfolio pf\\<rbrakk>\n  \\<Longrightarrow> \\<forall>w.\n                       cls_val_process Mkt2 (qty_sum arb_pf pf) 0 w =\n                       cls_val_process Mkt2 arb_pf 0 w +\n                       cls_val_process Mkt2 pf 0 w\n\ngoal (1 subgoal):\n 1. cls_val_process Mkt2 contr_pf 0 w =\n    cls_val_process Mkt2 arb_pf 0 w + cls_val_process Mkt2 pf 0 w", "using \\<open>portfolio arb_pf\\<close> assms replicating_portfolio_def stock_portfolio_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>portfolio arb_pf; portfolio pf\\<rbrakk>\n  \\<Longrightarrow> \\<forall>w.\n                       cls_val_process Mkt2 (qty_sum arb_pf pf) 0 w =\n                       cls_val_process Mkt2 arb_pf 0 w +\n                       cls_val_process Mkt2 pf 0 w\n  portfolio arb_pf\n  price_structure der matur \\<pi> pr\n  replicating_portfolio pf der matur\n  coincides_on Mkt Mkt2 (stocks Mkt)\n  prices Mkt2 x = pr\n  x \\<notin> stocks Mkt\n  diff_inv =\n  (\\<pi> - initial_value pf) / constant_image (prices Mkt pos_stock 0)\n  diff_inv \\<noteq> 0\n  arb_pf = (\\<lambda>x n w. 0)\n  (x := \\<lambda>n w. - 1, pos_stock := \\<lambda>n w. diff_inv)\n  contr_pf = qty_sum arb_pf pf\n  replicating_portfolio ?pf ?der ?matur =\n  (stock_portfolio Mkt ?pf \\<and>\n   trading_strategy ?pf \\<and>\n   self_financing Mkt ?pf \\<and>\n   AEeq M (cls_val_process Mkt ?pf ?matur) ?der)\n  stock_portfolio ?Mkt ?p =\n  (portfolio ?p \\<and> support_set ?p \\<subseteq> stocks ?Mkt)\n\ngoal (1 subgoal):\n 1. cls_val_process Mkt2 contr_pf 0 w =\n    cls_val_process Mkt2 arb_pf 0 w + cls_val_process Mkt2 pf 0 w", "by blast"], ["proof (state)\nthis:\n  cls_val_process Mkt2 contr_pf 0 w =\n  cls_val_process Mkt2 arb_pf 0 w + cls_val_process Mkt2 pf 0 w\n\ngoal (1 subgoal):\n 1. \\<And>w.\n       w \\<in> space M \\<Longrightarrow>\n       cls_val_process Mkt2 contr_pf 0 w = 0", "also"], ["proof (state)\nthis:\n  cls_val_process Mkt2 contr_pf 0 w =\n  cls_val_process Mkt2 arb_pf 0 w + cls_val_process Mkt2 pf 0 w\n\ngoal (1 subgoal):\n 1. \\<And>w.\n       w \\<in> space M \\<Longrightarrow>\n       cls_val_process Mkt2 contr_pf 0 w = 0", "have \"... = prices Mkt2 pos_stock 0 w * diff_inv - pr 0 w + cls_val_process Mkt2 pf 0 w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cls_val_process Mkt2 arb_pf 0 w + cls_val_process Mkt2 pf 0 w =\n    prices Mkt2 pos_stock 0 w * diff_inv - pr 0 w +\n    cls_val_process Mkt2 pf 0 w", "using arb_uvp"], ["proof (prove)\nusing this:\n  \\<forall>n w.\n     cls_val_process Mkt2 arb_pf n w =\n     prices Mkt2 pos_stock n w * diff_inv - pr n w\n\ngoal (1 subgoal):\n 1. cls_val_process Mkt2 arb_pf 0 w + cls_val_process Mkt2 pf 0 w =\n    prices Mkt2 pos_stock 0 w * diff_inv - pr 0 w +\n    cls_val_process Mkt2 pf 0 w", "by simp"], ["proof (state)\nthis:\n  cls_val_process Mkt2 arb_pf 0 w + cls_val_process Mkt2 pf 0 w =\n  prices Mkt2 pos_stock 0 w * diff_inv - pr 0 w +\n  cls_val_process Mkt2 pf 0 w\n\ngoal (1 subgoal):\n 1. \\<And>w.\n       w \\<in> space M \\<Longrightarrow>\n       cls_val_process Mkt2 contr_pf 0 w = 0", "also"], ["proof (state)\nthis:\n  cls_val_process Mkt2 arb_pf 0 w + cls_val_process Mkt2 pf 0 w =\n  prices Mkt2 pos_stock 0 w * diff_inv - pr 0 w +\n  cls_val_process Mkt2 pf 0 w\n\ngoal (1 subgoal):\n 1. \\<And>w.\n       w \\<in> space M \\<Longrightarrow>\n       cls_val_process Mkt2 contr_pf 0 w = 0", "have \"... = constant_image (prices Mkt pos_stock 0) * diff_inv - pr 0 w + cls_val_process Mkt2 pf 0 w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prices Mkt2 pos_stock 0 w * diff_inv - pr 0 w +\n    cls_val_process Mkt2 pf 0 w =\n    constant_image (prices Mkt pos_stock 0) * diff_inv - pr 0 w +\n    cls_val_process Mkt2 pf 0 w", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. prices Mkt2 pos_stock 0 w * diff_inv - pr 0 w +\n    cls_val_process Mkt2 pf 0 w =\n    constant_image (prices Mkt pos_stock 0) * diff_inv - pr 0 w +\n    cls_val_process Mkt2 pf 0 w", "have f1: \"prices Mkt pos_stock = prices Mkt2 pos_stock\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prices Mkt pos_stock = prices Mkt2 pos_stock", "using \\<open>coincides_on Mkt Mkt2 (stocks Mkt)\\<close>  in_stock"], ["proof (prove)\nusing this:\n  coincides_on Mkt Mkt2 (stocks Mkt)\n  pos_stock \\<in> stocks Mkt\n\ngoal (1 subgoal):\n 1. prices Mkt pos_stock = prices Mkt2 pos_stock", "unfolding coincides_on_def"], ["proof (prove)\nusing this:\n  stocks Mkt = stocks Mkt2 \\<and>\n  (\\<forall>x.\n      x \\<in> stocks Mkt \\<longrightarrow> prices Mkt x = prices Mkt2 x)\n  pos_stock \\<in> stocks Mkt\n\ngoal (1 subgoal):\n 1. prices Mkt pos_stock = prices Mkt2 pos_stock", "by blast"], ["proof (state)\nthis:\n  prices Mkt pos_stock = prices Mkt2 pos_stock\n\ngoal (1 subgoal):\n 1. prices Mkt2 pos_stock 0 w * diff_inv - pr 0 w +\n    cls_val_process Mkt2 pf 0 w =\n    constant_image (prices Mkt pos_stock 0) * diff_inv - pr 0 w +\n    cls_val_process Mkt2 pf 0 w", "have \"prices Mkt pos_stock 0 w = constant_image (prices Mkt pos_stock 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prices Mkt pos_stock 0 w = constant_image (prices Mkt pos_stock 0)", "using \\<open>w \\<in> space M\\<close> adapted_init constant_imageI pos_stock_borel_adapted"], ["proof (prove)\nusing this:\n  w \\<in> space M\n  borel_adapt_stoch_proc F ?x \\<Longrightarrow>\n  \\<exists>c. \\<forall>w\\<in>space M. ?x 0 w = c\n  \\<exists>c. \\<forall>x\\<in>space M. ?f x = c \\<Longrightarrow>\n  \\<forall>x\\<in>space M. ?f x = constant_image ?f\n  borel_adapt_stoch_proc F (prices Mkt pos_stock)\n\ngoal (1 subgoal):\n 1. prices Mkt pos_stock 0 w = constant_image (prices Mkt pos_stock 0)", "by blast"], ["proof (state)\nthis:\n  prices Mkt pos_stock 0 w = constant_image (prices Mkt pos_stock 0)\n\ngoal (1 subgoal):\n 1. prices Mkt2 pos_stock 0 w * diff_inv - pr 0 w +\n    cls_val_process Mkt2 pf 0 w =\n    constant_image (prices Mkt pos_stock 0) * diff_inv - pr 0 w +\n    cls_val_process Mkt2 pf 0 w", "then"], ["proof (chain)\npicking this:\n  prices Mkt pos_stock 0 w = constant_image (prices Mkt pos_stock 0)", "show ?thesis"], ["proof (prove)\nusing this:\n  prices Mkt pos_stock 0 w = constant_image (prices Mkt pos_stock 0)\n\ngoal (1 subgoal):\n 1. prices Mkt2 pos_stock 0 w * diff_inv - pr 0 w +\n    cls_val_process Mkt2 pf 0 w =\n    constant_image (prices Mkt pos_stock 0) * diff_inv - pr 0 w +\n    cls_val_process Mkt2 pf 0 w", "using f1"], ["proof (prove)\nusing this:\n  prices Mkt pos_stock 0 w = constant_image (prices Mkt pos_stock 0)\n  prices Mkt pos_stock = prices Mkt2 pos_stock\n\ngoal (1 subgoal):\n 1. prices Mkt2 pos_stock 0 w * diff_inv - pr 0 w +\n    cls_val_process Mkt2 pf 0 w =\n    constant_image (prices Mkt pos_stock 0) * diff_inv - pr 0 w +\n    cls_val_process Mkt2 pf 0 w", "by simp"], ["proof (state)\nthis:\n  prices Mkt2 pos_stock 0 w * diff_inv - pr 0 w +\n  cls_val_process Mkt2 pf 0 w =\n  constant_image (prices Mkt pos_stock 0) * diff_inv - pr 0 w +\n  cls_val_process Mkt2 pf 0 w\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  prices Mkt2 pos_stock 0 w * diff_inv - pr 0 w +\n  cls_val_process Mkt2 pf 0 w =\n  constant_image (prices Mkt pos_stock 0) * diff_inv - pr 0 w +\n  cls_val_process Mkt2 pf 0 w\n\ngoal (1 subgoal):\n 1. \\<And>w.\n       w \\<in> space M \\<Longrightarrow>\n       cls_val_process Mkt2 contr_pf 0 w = 0", "also"], ["proof (state)\nthis:\n  prices Mkt2 pos_stock 0 w * diff_inv - pr 0 w +\n  cls_val_process Mkt2 pf 0 w =\n  constant_image (prices Mkt pos_stock 0) * diff_inv - pr 0 w +\n  cls_val_process Mkt2 pf 0 w\n\ngoal (1 subgoal):\n 1. \\<And>w.\n       w \\<in> space M \\<Longrightarrow>\n       cls_val_process Mkt2 contr_pf 0 w = 0", "have \"... = (\\<pi> - initial_value pf) - pr 0 w + cls_val_process Mkt2 pf 0 w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. constant_image (prices Mkt pos_stock 0) * diff_inv - pr 0 w +\n    cls_val_process Mkt2 pf 0 w =\n    \\<pi> - initial_value pf - pr 0 w + cls_val_process Mkt2 pf 0 w", "using \\<open>0 < constant_image (prices Mkt pos_stock 0)\\<close> assms"], ["proof (prove)\nusing this:\n  0 < constant_image (prices Mkt pos_stock 0)\n  price_structure der matur \\<pi> pr\n  replicating_portfolio pf der matur\n  coincides_on Mkt Mkt2 (stocks Mkt)\n  prices Mkt2 x = pr\n  x \\<notin> stocks Mkt\n  diff_inv =\n  (\\<pi> - initial_value pf) / constant_image (prices Mkt pos_stock 0)\n  diff_inv \\<noteq> 0\n  arb_pf = (\\<lambda>x n w. 0)\n  (x := \\<lambda>n w. - 1, pos_stock := \\<lambda>n w. diff_inv)\n  contr_pf = qty_sum arb_pf pf\n\ngoal (1 subgoal):\n 1. constant_image (prices Mkt pos_stock 0) * diff_inv - pr 0 w +\n    cls_val_process Mkt2 pf 0 w =\n    \\<pi> - initial_value pf - pr 0 w + cls_val_process Mkt2 pf 0 w", "by simp"], ["proof (state)\nthis:\n  constant_image (prices Mkt pos_stock 0) * diff_inv - pr 0 w +\n  cls_val_process Mkt2 pf 0 w =\n  \\<pi> - initial_value pf - pr 0 w + cls_val_process Mkt2 pf 0 w\n\ngoal (1 subgoal):\n 1. \\<And>w.\n       w \\<in> space M \\<Longrightarrow>\n       cls_val_process Mkt2 contr_pf 0 w = 0", "also"], ["proof (state)\nthis:\n  constant_image (prices Mkt pos_stock 0) * diff_inv - pr 0 w +\n  cls_val_process Mkt2 pf 0 w =\n  \\<pi> - initial_value pf - pr 0 w + cls_val_process Mkt2 pf 0 w\n\ngoal (1 subgoal):\n 1. \\<And>w.\n       w \\<in> space M \\<Longrightarrow>\n       cls_val_process Mkt2 contr_pf 0 w = 0", "have \"... = (\\<pi> - initial_value pf) - \\<pi> + cls_val_process Mkt2 pf 0 w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> - initial_value pf - pr 0 w + cls_val_process Mkt2 pf 0 w =\n    \\<pi> - initial_value pf - \\<pi> + cls_val_process Mkt2 pf 0 w", "using \\<open>price_structure der matur \\<pi> pr\\<close>\n      price_structure_init[of der matur \\<pi> pr]"], ["proof (prove)\nusing this:\n  price_structure der matur \\<pi> pr\n  price_structure der matur \\<pi> pr \\<Longrightarrow>\n  \\<forall>w\\<in>space M. pr 0 w = \\<pi>\n\ngoal (1 subgoal):\n 1. \\<pi> - initial_value pf - pr 0 w + cls_val_process Mkt2 pf 0 w =\n    \\<pi> - initial_value pf - \\<pi> + cls_val_process Mkt2 pf 0 w", "by (simp add: \\<open>w \\<in> space M\\<close>)"], ["proof (state)\nthis:\n  \\<pi> - initial_value pf - pr 0 w + cls_val_process Mkt2 pf 0 w =\n  \\<pi> - initial_value pf - \\<pi> + cls_val_process Mkt2 pf 0 w\n\ngoal (1 subgoal):\n 1. \\<And>w.\n       w \\<in> space M \\<Longrightarrow>\n       cls_val_process Mkt2 contr_pf 0 w = 0", "also"], ["proof (state)\nthis:\n  \\<pi> - initial_value pf - pr 0 w + cls_val_process Mkt2 pf 0 w =\n  \\<pi> - initial_value pf - \\<pi> + cls_val_process Mkt2 pf 0 w\n\ngoal (1 subgoal):\n 1. \\<And>w.\n       w \\<in> space M \\<Longrightarrow>\n       cls_val_process Mkt2 contr_pf 0 w = 0", "have \"... = (\\<pi> - initial_value pf) - \\<pi> + (initial_value pf)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> - initial_value pf - \\<pi> + cls_val_process Mkt2 pf 0 w =\n    \\<pi> - initial_value pf - \\<pi> + initial_value pf", "using initial_valueI assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>trading_strategy ?pf; support_adapt Mkt ?pf\\<rbrakk>\n  \\<Longrightarrow> \\<forall>w\\<in>space M.\n                       val_process Mkt ?pf 0 w = initial_value ?pf\n  price_structure der matur \\<pi> pr\n  replicating_portfolio pf der matur\n  coincides_on Mkt Mkt2 (stocks Mkt)\n  prices Mkt2 x = pr\n  x \\<notin> stocks Mkt\n  diff_inv =\n  (\\<pi> - initial_value pf) / constant_image (prices Mkt pos_stock 0)\n  diff_inv \\<noteq> 0\n  arb_pf = (\\<lambda>x n w. 0)\n  (x := \\<lambda>n w. - 1, pos_stock := \\<lambda>n w. diff_inv)\n  contr_pf = qty_sum arb_pf pf\n\ngoal (1 subgoal):\n 1. \\<pi> - initial_value pf - \\<pi> + cls_val_process Mkt2 pf 0 w =\n    \\<pi> - initial_value pf - \\<pi> + initial_value pf", "unfolding replicating_portfolio_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>trading_strategy ?pf; support_adapt Mkt ?pf\\<rbrakk>\n  \\<Longrightarrow> \\<forall>w\\<in>space M.\n                       val_process Mkt ?pf 0 w = initial_value ?pf\n  price_structure der matur \\<pi> pr\n  stock_portfolio Mkt pf \\<and>\n  trading_strategy pf \\<and>\n  self_financing Mkt pf \\<and> AEeq M (cls_val_process Mkt pf matur) der\n  coincides_on Mkt Mkt2 (stocks Mkt)\n  prices Mkt2 x = pr\n  x \\<notin> stocks Mkt\n  diff_inv =\n  (\\<pi> - initial_value pf) / constant_image (prices Mkt pos_stock 0)\n  diff_inv \\<noteq> 0\n  arb_pf = (\\<lambda>x n w. 0)\n  (x := \\<lambda>n w. - 1, pos_stock := \\<lambda>n w. diff_inv)\n  contr_pf = qty_sum arb_pf pf\n\ngoal (1 subgoal):\n 1. \\<pi> - initial_value pf - \\<pi> + cls_val_process Mkt2 pf 0 w =\n    \\<pi> - initial_value pf - \\<pi> + initial_value pf", "using \\<open>w \\<in> space M\\<close> coincides_stocks_cls_val_process self_financingE readable"], ["proof (prove)\nusing this:\n  \\<lbrakk>trading_strategy ?pf; support_adapt Mkt ?pf\\<rbrakk>\n  \\<Longrightarrow> \\<forall>w\\<in>space M.\n                       val_process Mkt ?pf 0 w = initial_value ?pf\n  price_structure der matur \\<pi> pr\n  stock_portfolio Mkt pf \\<and>\n  trading_strategy pf \\<and>\n  self_financing Mkt pf \\<and> AEeq M (cls_val_process Mkt pf matur) der\n  coincides_on Mkt Mkt2 (stocks Mkt)\n  prices Mkt2 x = pr\n  x \\<notin> stocks Mkt\n  diff_inv =\n  (\\<pi> - initial_value pf) / constant_image (prices Mkt pos_stock 0)\n  diff_inv \\<noteq> 0\n  arb_pf = (\\<lambda>x n w. 0)\n  (x := \\<lambda>n w. - 1, pos_stock := \\<lambda>n w. diff_inv)\n  contr_pf = qty_sum arb_pf pf\n  w \\<in> space M\n  \\<lbrakk>stock_portfolio ?Mkt ?pf;\n   coincides_on ?Mkt ?Mkt2.0 (stocks ?Mkt)\\<rbrakk>\n  \\<Longrightarrow> \\<forall>n w.\n                       cls_val_process ?Mkt ?pf n w =\n                       cls_val_process ?Mkt2.0 ?pf n w\n  self_financing ?Mkt ?p \\<Longrightarrow>\n  \\<forall>n. val_process ?Mkt ?p n = cls_val_process ?Mkt ?p n\n  \\<forall>asset\\<in>stocks Mkt. borel_adapt_stoch_proc F (prices Mkt asset)\n\ngoal (1 subgoal):\n 1. \\<pi> - initial_value pf - \\<pi> + cls_val_process Mkt2 pf 0 w =\n    \\<pi> - initial_value pf - \\<pi> + initial_value pf", "by (metis (no_types, hide_lams) support_adapt_def stock_portfolio_def subsetCE)"], ["proof (state)\nthis:\n  \\<pi> - initial_value pf - \\<pi> + cls_val_process Mkt2 pf 0 w =\n  \\<pi> - initial_value pf - \\<pi> + initial_value pf\n\ngoal (1 subgoal):\n 1. \\<And>w.\n       w \\<in> space M \\<Longrightarrow>\n       cls_val_process Mkt2 contr_pf 0 w = 0", "also"], ["proof (state)\nthis:\n  \\<pi> - initial_value pf - \\<pi> + cls_val_process Mkt2 pf 0 w =\n  \\<pi> - initial_value pf - \\<pi> + initial_value pf\n\ngoal (1 subgoal):\n 1. \\<And>w.\n       w \\<in> space M \\<Longrightarrow>\n       cls_val_process Mkt2 contr_pf 0 w = 0", "have \"... = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> - initial_value pf - \\<pi> + initial_value pf = 0", "by simp"], ["proof (state)\nthis:\n  \\<pi> - initial_value pf - \\<pi> + initial_value pf = 0\n\ngoal (1 subgoal):\n 1. \\<And>w.\n       w \\<in> space M \\<Longrightarrow>\n       cls_val_process Mkt2 contr_pf 0 w = 0", "finally"], ["proof (chain)\npicking this:\n  cls_val_process Mkt2 contr_pf 0 w = 0", "show \"cls_val_process Mkt2 contr_pf 0 w = 0\""], ["proof (prove)\nusing this:\n  cls_val_process Mkt2 contr_pf 0 w = 0\n\ngoal (1 subgoal):\n 1. cls_val_process Mkt2 contr_pf 0 w = 0", "."], ["proof (state)\nthis:\n  cls_val_process Mkt2 contr_pf 0 w = 0\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>w\\<in>space M. cls_val_process Mkt2 contr_pf 0 w = 0\n\ngoal (2 subgoals):\n 1. 0 < diff_inv \\<longrightarrow>\n    (AE w in M. 0 < cls_val_process Mkt2 contr_pf matur w)\n 2. diff_inv < 0 \\<longrightarrow>\n    (AE w in M. cls_val_process Mkt2 contr_pf matur w < 0)", "show \"0 < diff_inv \\<longrightarrow> (AE w in M. 0 < cls_val_process Mkt2 contr_pf matur w)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < diff_inv \\<longrightarrow>\n    (AE w in M. 0 < cls_val_process Mkt2 contr_pf matur w)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. 0 < diff_inv \\<Longrightarrow>\n    AE w in M. 0 < cls_val_process Mkt2 contr_pf matur w", "assume \"0 < diff_inv\""], ["proof (state)\nthis:\n  0 < diff_inv\n\ngoal (1 subgoal):\n 1. 0 < diff_inv \\<Longrightarrow>\n    AE w in M. 0 < cls_val_process Mkt2 contr_pf matur w", "show \"AE w in M. 0 < cls_val_process Mkt2 contr_pf matur w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. AE w in M. 0 < cls_val_process Mkt2 contr_pf matur w", "proof (rule AE_mp)"], ["proof (state)\ngoal (2 subgoals):\n 1. almost_everywhere M ?P\n 2. AE w in M. ?P w \\<longrightarrow>\n               0 < cls_val_process Mkt2 contr_pf matur w", "have \"AE w in M. prices Mkt2 x matur w = der w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. AEeq M (prices Mkt2 x matur) der", "using \\<open>price_structure der matur \\<pi> pr\\<close> \\<open>prices Mkt2 x = pr\\<close>"], ["proof (prove)\nusing this:\n  price_structure der matur \\<pi> pr\n  prices Mkt2 x = pr\n\ngoal (1 subgoal):\n 1. AEeq M (prices Mkt2 x matur) der", "unfolding price_structure_def"], ["proof (prove)\nusing this:\n  (\\<forall>w\\<in>space M. pr 0 w = \\<pi>) \\<and>\n  AEeq M (pr matur) der \\<and> pr matur \\<in> borel_measurable (F matur)\n  prices Mkt2 x = pr\n\ngoal (1 subgoal):\n 1. AEeq M (prices Mkt2 x matur) der", "by auto"], ["proof (state)\nthis:\n  AEeq M (prices Mkt2 x matur) der\n\ngoal (2 subgoals):\n 1. almost_everywhere M ?P\n 2. AE w in M. ?P w \\<longrightarrow>\n               0 < cls_val_process Mkt2 contr_pf matur w", "moreover"], ["proof (state)\nthis:\n  AEeq M (prices Mkt2 x matur) der\n\ngoal (2 subgoals):\n 1. almost_everywhere M ?P\n 2. AE w in M. ?P w \\<longrightarrow>\n               0 < cls_val_process Mkt2 contr_pf matur w", "have \"AE w in M. cls_val_process Mkt2 pf matur  w = der w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. AEeq M (cls_val_process Mkt2 pf matur) der", "using assms coincides_stocks_cls_val_process[of Mkt pf Mkt2]\n        \\<open>coincides_on Mkt Mkt2 (stocks Mkt)\\<close>"], ["proof (prove)\nusing this:\n  price_structure der matur \\<pi> pr\n  replicating_portfolio pf der matur\n  coincides_on Mkt Mkt2 (stocks Mkt)\n  prices Mkt2 x = pr\n  x \\<notin> stocks Mkt\n  diff_inv =\n  (\\<pi> - initial_value pf) / constant_image (prices Mkt pos_stock 0)\n  diff_inv \\<noteq> 0\n  arb_pf = (\\<lambda>x n w. 0)\n  (x := \\<lambda>n w. - 1, pos_stock := \\<lambda>n w. diff_inv)\n  contr_pf = qty_sum arb_pf pf\n  \\<lbrakk>stock_portfolio Mkt pf;\n   coincides_on Mkt Mkt2 (stocks Mkt)\\<rbrakk>\n  \\<Longrightarrow> \\<forall>n w.\n                       cls_val_process Mkt pf n w =\n                       cls_val_process Mkt2 pf n w\n  coincides_on Mkt Mkt2 (stocks Mkt)\n\ngoal (1 subgoal):\n 1. AEeq M (cls_val_process Mkt2 pf matur) der", "unfolding replicating_portfolio_def"], ["proof (prove)\nusing this:\n  price_structure der matur \\<pi> pr\n  stock_portfolio Mkt pf \\<and>\n  trading_strategy pf \\<and>\n  self_financing Mkt pf \\<and> AEeq M (cls_val_process Mkt pf matur) der\n  coincides_on Mkt Mkt2 (stocks Mkt)\n  prices Mkt2 x = pr\n  x \\<notin> stocks Mkt\n  diff_inv =\n  (\\<pi> - initial_value pf) / constant_image (prices Mkt pos_stock 0)\n  diff_inv \\<noteq> 0\n  arb_pf = (\\<lambda>x n w. 0)\n  (x := \\<lambda>n w. - 1, pos_stock := \\<lambda>n w. diff_inv)\n  contr_pf = qty_sum arb_pf pf\n  \\<lbrakk>stock_portfolio Mkt pf;\n   coincides_on Mkt Mkt2 (stocks Mkt)\\<rbrakk>\n  \\<Longrightarrow> \\<forall>n w.\n                       cls_val_process Mkt pf n w =\n                       cls_val_process Mkt2 pf n w\n  coincides_on Mkt Mkt2 (stocks Mkt)\n\ngoal (1 subgoal):\n 1. AEeq M (cls_val_process Mkt2 pf matur) der", "by auto"], ["proof (state)\nthis:\n  AEeq M (cls_val_process Mkt2 pf matur) der\n\ngoal (2 subgoals):\n 1. almost_everywhere M ?P\n 2. AE w in M. ?P w \\<longrightarrow>\n               0 < cls_val_process Mkt2 contr_pf matur w", "ultimately"], ["proof (chain)\npicking this:\n  AEeq M (prices Mkt2 x matur) der\n  AEeq M (cls_val_process Mkt2 pf matur) der", "show \"AE w in M. prices Mkt2 x matur w = cls_val_process Mkt2 pf matur w\""], ["proof (prove)\nusing this:\n  AEeq M (prices Mkt2 x matur) der\n  AEeq M (cls_val_process Mkt2 pf matur) der\n\ngoal (1 subgoal):\n 1. AEeq M (prices Mkt2 x matur) (cls_val_process Mkt2 pf matur)", "by auto"], ["proof (state)\nthis:\n  AEeq M (prices Mkt2 x matur) (cls_val_process Mkt2 pf matur)\n\ngoal (1 subgoal):\n 1. AE w in M. prices Mkt2 x matur w =\n               cls_val_process Mkt2 pf matur w \\<longrightarrow>\n               0 < cls_val_process Mkt2 contr_pf matur w", "show \"AE w in M. prices Mkt2 x matur w = cls_val_process Mkt2 pf matur w \\<longrightarrow> 0 < cls_val_process Mkt2 contr_pf matur w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. AE w in M. prices Mkt2 x matur w =\n               cls_val_process Mkt2 pf matur w \\<longrightarrow>\n               0 < cls_val_process Mkt2 contr_pf matur w", "proof (rule AE_I2, rule impI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>w.\n       \\<lbrakk>w \\<in> space M;\n        prices Mkt2 x matur w = cls_val_process Mkt2 pf matur w\\<rbrakk>\n       \\<Longrightarrow> 0 < cls_val_process Mkt2 contr_pf matur w", "fix w"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>w.\n       \\<lbrakk>w \\<in> space M;\n        prices Mkt2 x matur w = cls_val_process Mkt2 pf matur w\\<rbrakk>\n       \\<Longrightarrow> 0 < cls_val_process Mkt2 contr_pf matur w", "assume \"w\\<in> space M\"\n        and \"prices Mkt2 x matur w = cls_val_process Mkt2 pf matur w\""], ["proof (state)\nthis:\n  w \\<in> space M\n  prices Mkt2 x matur w = cls_val_process Mkt2 pf matur w\n\ngoal (1 subgoal):\n 1. \\<And>w.\n       \\<lbrakk>w \\<in> space M;\n        prices Mkt2 x matur w = cls_val_process Mkt2 pf matur w\\<rbrakk>\n       \\<Longrightarrow> 0 < cls_val_process Mkt2 contr_pf matur w", "have \"cls_val_process Mkt2 contr_pf matur w = cls_val_process Mkt2 arb_pf matur w + cls_val_process Mkt2 pf matur w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cls_val_process Mkt2 contr_pf matur w =\n    cls_val_process Mkt2 arb_pf matur w + cls_val_process Mkt2 pf matur w", "using sum_cls_val_process[of arb_pf pf Mkt2]\n          \\<open>portfolio arb_pf\\<close> assms replicating_portfolio_def stock_portfolio_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>portfolio arb_pf; portfolio pf\\<rbrakk>\n  \\<Longrightarrow> \\<forall>n w.\n                       cls_val_process Mkt2 (qty_sum arb_pf pf) n w =\n                       cls_val_process Mkt2 arb_pf n w +\n                       cls_val_process Mkt2 pf n w\n  portfolio arb_pf\n  price_structure der matur \\<pi> pr\n  replicating_portfolio pf der matur\n  coincides_on Mkt Mkt2 (stocks Mkt)\n  prices Mkt2 x = pr\n  x \\<notin> stocks Mkt\n  diff_inv =\n  (\\<pi> - initial_value pf) / constant_image (prices Mkt pos_stock 0)\n  diff_inv \\<noteq> 0\n  arb_pf = (\\<lambda>x n w. 0)\n  (x := \\<lambda>n w. - 1, pos_stock := \\<lambda>n w. diff_inv)\n  contr_pf = qty_sum arb_pf pf\n  replicating_portfolio ?pf ?der ?matur =\n  (stock_portfolio Mkt ?pf \\<and>\n   trading_strategy ?pf \\<and>\n   self_financing Mkt ?pf \\<and>\n   AEeq M (cls_val_process Mkt ?pf ?matur) ?der)\n  stock_portfolio ?Mkt ?p =\n  (portfolio ?p \\<and> support_set ?p \\<subseteq> stocks ?Mkt)\n\ngoal (1 subgoal):\n 1. cls_val_process Mkt2 contr_pf matur w =\n    cls_val_process Mkt2 arb_pf matur w + cls_val_process Mkt2 pf matur w", "by blast"], ["proof (state)\nthis:\n  cls_val_process Mkt2 contr_pf matur w =\n  cls_val_process Mkt2 arb_pf matur w + cls_val_process Mkt2 pf matur w\n\ngoal (1 subgoal):\n 1. \\<And>w.\n       \\<lbrakk>w \\<in> space M;\n        prices Mkt2 x matur w = cls_val_process Mkt2 pf matur w\\<rbrakk>\n       \\<Longrightarrow> 0 < cls_val_process Mkt2 contr_pf matur w", "also"], ["proof (state)\nthis:\n  cls_val_process Mkt2 contr_pf matur w =\n  cls_val_process Mkt2 arb_pf matur w + cls_val_process Mkt2 pf matur w\n\ngoal (1 subgoal):\n 1. \\<And>w.\n       \\<lbrakk>w \\<in> space M;\n        prices Mkt2 x matur w = cls_val_process Mkt2 pf matur w\\<rbrakk>\n       \\<Longrightarrow> 0 < cls_val_process Mkt2 contr_pf matur w", "have \"... = prices Mkt2 pos_stock matur w * diff_inv - pr matur w + cls_val_process Mkt2 pf matur w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cls_val_process Mkt2 arb_pf matur w + cls_val_process Mkt2 pf matur w =\n    prices Mkt2 pos_stock matur w * diff_inv - pr matur w +\n    cls_val_process Mkt2 pf matur w", "using arb_uvp"], ["proof (prove)\nusing this:\n  \\<forall>n w.\n     cls_val_process Mkt2 arb_pf n w =\n     prices Mkt2 pos_stock n w * diff_inv - pr n w\n\ngoal (1 subgoal):\n 1. cls_val_process Mkt2 arb_pf matur w + cls_val_process Mkt2 pf matur w =\n    prices Mkt2 pos_stock matur w * diff_inv - pr matur w +\n    cls_val_process Mkt2 pf matur w", "by simp"], ["proof (state)\nthis:\n  cls_val_process Mkt2 arb_pf matur w + cls_val_process Mkt2 pf matur w =\n  prices Mkt2 pos_stock matur w * diff_inv - pr matur w +\n  cls_val_process Mkt2 pf matur w\n\ngoal (1 subgoal):\n 1. \\<And>w.\n       \\<lbrakk>w \\<in> space M;\n        prices Mkt2 x matur w = cls_val_process Mkt2 pf matur w\\<rbrakk>\n       \\<Longrightarrow> 0 < cls_val_process Mkt2 contr_pf matur w", "also"], ["proof (state)\nthis:\n  cls_val_process Mkt2 arb_pf matur w + cls_val_process Mkt2 pf matur w =\n  prices Mkt2 pos_stock matur w * diff_inv - pr matur w +\n  cls_val_process Mkt2 pf matur w\n\ngoal (1 subgoal):\n 1. \\<And>w.\n       \\<lbrakk>w \\<in> space M;\n        prices Mkt2 x matur w = cls_val_process Mkt2 pf matur w\\<rbrakk>\n       \\<Longrightarrow> 0 < cls_val_process Mkt2 contr_pf matur w", "have \"... = prices Mkt2 pos_stock matur w * diff_inv - prices Mkt2 x matur w + cls_val_process Mkt2 pf matur w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prices Mkt2 pos_stock matur w * diff_inv - pr matur w +\n    cls_val_process Mkt2 pf matur w =\n    prices Mkt2 pos_stock matur w * diff_inv - prices Mkt2 x matur w +\n    cls_val_process Mkt2 pf matur w", "using \\<open>prices Mkt2 x = pr\\<close>"], ["proof (prove)\nusing this:\n  prices Mkt2 x = pr\n\ngoal (1 subgoal):\n 1. prices Mkt2 pos_stock matur w * diff_inv - pr matur w +\n    cls_val_process Mkt2 pf matur w =\n    prices Mkt2 pos_stock matur w * diff_inv - prices Mkt2 x matur w +\n    cls_val_process Mkt2 pf matur w", "by simp"], ["proof (state)\nthis:\n  prices Mkt2 pos_stock matur w * diff_inv - pr matur w +\n  cls_val_process Mkt2 pf matur w =\n  prices Mkt2 pos_stock matur w * diff_inv - prices Mkt2 x matur w +\n  cls_val_process Mkt2 pf matur w\n\ngoal (1 subgoal):\n 1. \\<And>w.\n       \\<lbrakk>w \\<in> space M;\n        prices Mkt2 x matur w = cls_val_process Mkt2 pf matur w\\<rbrakk>\n       \\<Longrightarrow> 0 < cls_val_process Mkt2 contr_pf matur w", "also"], ["proof (state)\nthis:\n  prices Mkt2 pos_stock matur w * diff_inv - pr matur w +\n  cls_val_process Mkt2 pf matur w =\n  prices Mkt2 pos_stock matur w * diff_inv - prices Mkt2 x matur w +\n  cls_val_process Mkt2 pf matur w\n\ngoal (1 subgoal):\n 1. \\<And>w.\n       \\<lbrakk>w \\<in> space M;\n        prices Mkt2 x matur w = cls_val_process Mkt2 pf matur w\\<rbrakk>\n       \\<Longrightarrow> 0 < cls_val_process Mkt2 contr_pf matur w", "have \"... = prices Mkt2 pos_stock matur w * diff_inv\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prices Mkt2 pos_stock matur w * diff_inv - prices Mkt2 x matur w +\n    cls_val_process Mkt2 pf matur w =\n    prices Mkt2 pos_stock matur w * diff_inv", "using \\<open>prices Mkt2 x matur w = cls_val_process Mkt2 pf matur w\\<close>"], ["proof (prove)\nusing this:\n  prices Mkt2 x matur w = cls_val_process Mkt2 pf matur w\n\ngoal (1 subgoal):\n 1. prices Mkt2 pos_stock matur w * diff_inv - prices Mkt2 x matur w +\n    cls_val_process Mkt2 pf matur w =\n    prices Mkt2 pos_stock matur w * diff_inv", "by simp"], ["proof (state)\nthis:\n  prices Mkt2 pos_stock matur w * diff_inv - prices Mkt2 x matur w +\n  cls_val_process Mkt2 pf matur w =\n  prices Mkt2 pos_stock matur w * diff_inv\n\ngoal (1 subgoal):\n 1. \\<And>w.\n       \\<lbrakk>w \\<in> space M;\n        prices Mkt2 x matur w = cls_val_process Mkt2 pf matur w\\<rbrakk>\n       \\<Longrightarrow> 0 < cls_val_process Mkt2 contr_pf matur w", "also"], ["proof (state)\nthis:\n  prices Mkt2 pos_stock matur w * diff_inv - prices Mkt2 x matur w +\n  cls_val_process Mkt2 pf matur w =\n  prices Mkt2 pos_stock matur w * diff_inv\n\ngoal (1 subgoal):\n 1. \\<And>w.\n       \\<lbrakk>w \\<in> space M;\n        prices Mkt2 x matur w = cls_val_process Mkt2 pf matur w\\<rbrakk>\n       \\<Longrightarrow> 0 < cls_val_process Mkt2 contr_pf matur w", "have \"... > 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < prices Mkt2 pos_stock matur w * diff_inv", "using positive \\<open>0 < diff_inv\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>n w. 0 < prices Mkt pos_stock n w\n  0 < diff_inv\n\ngoal (1 subgoal):\n 1. 0 < prices Mkt2 pos_stock matur w * diff_inv", "by (metis \\<open>coincides_on Mkt Mkt2 (stocks Mkt)\\<close> coincides_on_def in_stock mult_pos_pos)"], ["proof (state)\nthis:\n  0 < prices Mkt2 pos_stock matur w * diff_inv\n\ngoal (1 subgoal):\n 1. \\<And>w.\n       \\<lbrakk>w \\<in> space M;\n        prices Mkt2 x matur w = cls_val_process Mkt2 pf matur w\\<rbrakk>\n       \\<Longrightarrow> 0 < cls_val_process Mkt2 contr_pf matur w", "finally"], ["proof (chain)\npicking this:\n  0 < cls_val_process Mkt2 contr_pf matur w", "have \"cls_val_process Mkt2 contr_pf matur w > 0\""], ["proof (prove)\nusing this:\n  0 < cls_val_process Mkt2 contr_pf matur w\n\ngoal (1 subgoal):\n 1. 0 < cls_val_process Mkt2 contr_pf matur w", "."], ["proof (state)\nthis:\n  0 < cls_val_process Mkt2 contr_pf matur w\n\ngoal (1 subgoal):\n 1. \\<And>w.\n       \\<lbrakk>w \\<in> space M;\n        prices Mkt2 x matur w = cls_val_process Mkt2 pf matur w\\<rbrakk>\n       \\<Longrightarrow> 0 < cls_val_process Mkt2 contr_pf matur w", "thus \"0 < cls_val_process Mkt2 contr_pf matur w\""], ["proof (prove)\nusing this:\n  0 < cls_val_process Mkt2 contr_pf matur w\n\ngoal (1 subgoal):\n 1. 0 < cls_val_process Mkt2 contr_pf matur w", "by simp"], ["proof (state)\nthis:\n  0 < cls_val_process Mkt2 contr_pf matur w\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  AE w in M. prices Mkt2 x matur w =\n             cls_val_process Mkt2 pf matur w \\<longrightarrow>\n             0 < cls_val_process Mkt2 contr_pf matur w\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  AE w in M. 0 < cls_val_process Mkt2 contr_pf matur w\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  0 < diff_inv \\<longrightarrow>\n  (AE w in M. 0 < cls_val_process Mkt2 contr_pf matur w)\n\ngoal (1 subgoal):\n 1. diff_inv < 0 \\<longrightarrow>\n    (AE w in M. cls_val_process Mkt2 contr_pf matur w < 0)", "show \"diff_inv < 0 \\<longrightarrow> (AE w in M. 0 > cls_val_process Mkt2 contr_pf matur w)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. diff_inv < 0 \\<longrightarrow>\n    (AE w in M. cls_val_process Mkt2 contr_pf matur w < 0)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. diff_inv < 0 \\<Longrightarrow>\n    AE w in M. cls_val_process Mkt2 contr_pf matur w < 0", "assume \"diff_inv < 0\""], ["proof (state)\nthis:\n  diff_inv < 0\n\ngoal (1 subgoal):\n 1. diff_inv < 0 \\<Longrightarrow>\n    AE w in M. cls_val_process Mkt2 contr_pf matur w < 0", "show \"AE w in M. 0 > cls_val_process Mkt2 contr_pf matur w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. AE w in M. cls_val_process Mkt2 contr_pf matur w < 0", "proof (rule AE_mp)"], ["proof (state)\ngoal (2 subgoals):\n 1. almost_everywhere M ?P\n 2. AE w in M. ?P w \\<longrightarrow>\n               cls_val_process Mkt2 contr_pf matur w < 0", "have \"AE w in M. prices Mkt2 x matur w = der w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. AEeq M (prices Mkt2 x matur) der", "using \\<open>price_structure der matur \\<pi> pr\\<close> \\<open>prices Mkt2 x = pr\\<close>"], ["proof (prove)\nusing this:\n  price_structure der matur \\<pi> pr\n  prices Mkt2 x = pr\n\ngoal (1 subgoal):\n 1. AEeq M (prices Mkt2 x matur) der", "unfolding price_structure_def"], ["proof (prove)\nusing this:\n  (\\<forall>w\\<in>space M. pr 0 w = \\<pi>) \\<and>\n  AEeq M (pr matur) der \\<and> pr matur \\<in> borel_measurable (F matur)\n  prices Mkt2 x = pr\n\ngoal (1 subgoal):\n 1. AEeq M (prices Mkt2 x matur) der", "by auto"], ["proof (state)\nthis:\n  AEeq M (prices Mkt2 x matur) der\n\ngoal (2 subgoals):\n 1. almost_everywhere M ?P\n 2. AE w in M. ?P w \\<longrightarrow>\n               cls_val_process Mkt2 contr_pf matur w < 0", "moreover"], ["proof (state)\nthis:\n  AEeq M (prices Mkt2 x matur) der\n\ngoal (2 subgoals):\n 1. almost_everywhere M ?P\n 2. AE w in M. ?P w \\<longrightarrow>\n               cls_val_process Mkt2 contr_pf matur w < 0", "have \"AE w in M. cls_val_process Mkt2 pf matur  w = der w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. AEeq M (cls_val_process Mkt2 pf matur) der", "using assms coincides_stocks_cls_val_process[of Mkt pf Mkt2]\n        \\<open>coincides_on Mkt Mkt2 (stocks Mkt)\\<close>"], ["proof (prove)\nusing this:\n  price_structure der matur \\<pi> pr\n  replicating_portfolio pf der matur\n  coincides_on Mkt Mkt2 (stocks Mkt)\n  prices Mkt2 x = pr\n  x \\<notin> stocks Mkt\n  diff_inv =\n  (\\<pi> - initial_value pf) / constant_image (prices Mkt pos_stock 0)\n  diff_inv \\<noteq> 0\n  arb_pf = (\\<lambda>x n w. 0)\n  (x := \\<lambda>n w. - 1, pos_stock := \\<lambda>n w. diff_inv)\n  contr_pf = qty_sum arb_pf pf\n  \\<lbrakk>stock_portfolio Mkt pf;\n   coincides_on Mkt Mkt2 (stocks Mkt)\\<rbrakk>\n  \\<Longrightarrow> \\<forall>n w.\n                       cls_val_process Mkt pf n w =\n                       cls_val_process Mkt2 pf n w\n  coincides_on Mkt Mkt2 (stocks Mkt)\n\ngoal (1 subgoal):\n 1. AEeq M (cls_val_process Mkt2 pf matur) der", "unfolding replicating_portfolio_def"], ["proof (prove)\nusing this:\n  price_structure der matur \\<pi> pr\n  stock_portfolio Mkt pf \\<and>\n  trading_strategy pf \\<and>\n  self_financing Mkt pf \\<and> AEeq M (cls_val_process Mkt pf matur) der\n  coincides_on Mkt Mkt2 (stocks Mkt)\n  prices Mkt2 x = pr\n  x \\<notin> stocks Mkt\n  diff_inv =\n  (\\<pi> - initial_value pf) / constant_image (prices Mkt pos_stock 0)\n  diff_inv \\<noteq> 0\n  arb_pf = (\\<lambda>x n w. 0)\n  (x := \\<lambda>n w. - 1, pos_stock := \\<lambda>n w. diff_inv)\n  contr_pf = qty_sum arb_pf pf\n  \\<lbrakk>stock_portfolio Mkt pf;\n   coincides_on Mkt Mkt2 (stocks Mkt)\\<rbrakk>\n  \\<Longrightarrow> \\<forall>n w.\n                       cls_val_process Mkt pf n w =\n                       cls_val_process Mkt2 pf n w\n  coincides_on Mkt Mkt2 (stocks Mkt)\n\ngoal (1 subgoal):\n 1. AEeq M (cls_val_process Mkt2 pf matur) der", "by auto"], ["proof (state)\nthis:\n  AEeq M (cls_val_process Mkt2 pf matur) der\n\ngoal (2 subgoals):\n 1. almost_everywhere M ?P\n 2. AE w in M. ?P w \\<longrightarrow>\n               cls_val_process Mkt2 contr_pf matur w < 0", "ultimately"], ["proof (chain)\npicking this:\n  AEeq M (prices Mkt2 x matur) der\n  AEeq M (cls_val_process Mkt2 pf matur) der", "show \"AE w in M. prices Mkt2 x matur w = cls_val_process Mkt2 pf matur w\""], ["proof (prove)\nusing this:\n  AEeq M (prices Mkt2 x matur) der\n  AEeq M (cls_val_process Mkt2 pf matur) der\n\ngoal (1 subgoal):\n 1. AEeq M (prices Mkt2 x matur) (cls_val_process Mkt2 pf matur)", "by auto"], ["proof (state)\nthis:\n  AEeq M (prices Mkt2 x matur) (cls_val_process Mkt2 pf matur)\n\ngoal (1 subgoal):\n 1. AE w in M. prices Mkt2 x matur w =\n               cls_val_process Mkt2 pf matur w \\<longrightarrow>\n               cls_val_process Mkt2 contr_pf matur w < 0", "show \"AE w in M. prices Mkt2 x matur w = cls_val_process Mkt2 pf matur w \\<longrightarrow> 0 > cls_val_process Mkt2 contr_pf matur w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. AE w in M. prices Mkt2 x matur w =\n               cls_val_process Mkt2 pf matur w \\<longrightarrow>\n               cls_val_process Mkt2 contr_pf matur w < 0", "proof (rule AE_I2, rule impI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>w.\n       \\<lbrakk>w \\<in> space M;\n        prices Mkt2 x matur w = cls_val_process Mkt2 pf matur w\\<rbrakk>\n       \\<Longrightarrow> cls_val_process Mkt2 contr_pf matur w < 0", "fix w"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>w.\n       \\<lbrakk>w \\<in> space M;\n        prices Mkt2 x matur w = cls_val_process Mkt2 pf matur w\\<rbrakk>\n       \\<Longrightarrow> cls_val_process Mkt2 contr_pf matur w < 0", "assume \"w\\<in> space M\"\n        and \"prices Mkt2 x matur w = cls_val_process Mkt2 pf matur w\""], ["proof (state)\nthis:\n  w \\<in> space M\n  prices Mkt2 x matur w = cls_val_process Mkt2 pf matur w\n\ngoal (1 subgoal):\n 1. \\<And>w.\n       \\<lbrakk>w \\<in> space M;\n        prices Mkt2 x matur w = cls_val_process Mkt2 pf matur w\\<rbrakk>\n       \\<Longrightarrow> cls_val_process Mkt2 contr_pf matur w < 0", "have \"cls_val_process Mkt2 contr_pf matur w = cls_val_process Mkt2 arb_pf matur w + cls_val_process Mkt2 pf matur w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cls_val_process Mkt2 contr_pf matur w =\n    cls_val_process Mkt2 arb_pf matur w + cls_val_process Mkt2 pf matur w", "using sum_cls_val_process[of arb_pf pf Mkt2]\n          \\<open>portfolio arb_pf\\<close> assms replicating_portfolio_def stock_portfolio_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>portfolio arb_pf; portfolio pf\\<rbrakk>\n  \\<Longrightarrow> \\<forall>n w.\n                       cls_val_process Mkt2 (qty_sum arb_pf pf) n w =\n                       cls_val_process Mkt2 arb_pf n w +\n                       cls_val_process Mkt2 pf n w\n  portfolio arb_pf\n  price_structure der matur \\<pi> pr\n  replicating_portfolio pf der matur\n  coincides_on Mkt Mkt2 (stocks Mkt)\n  prices Mkt2 x = pr\n  x \\<notin> stocks Mkt\n  diff_inv =\n  (\\<pi> - initial_value pf) / constant_image (prices Mkt pos_stock 0)\n  diff_inv \\<noteq> 0\n  arb_pf = (\\<lambda>x n w. 0)\n  (x := \\<lambda>n w. - 1, pos_stock := \\<lambda>n w. diff_inv)\n  contr_pf = qty_sum arb_pf pf\n  replicating_portfolio ?pf ?der ?matur =\n  (stock_portfolio Mkt ?pf \\<and>\n   trading_strategy ?pf \\<and>\n   self_financing Mkt ?pf \\<and>\n   AEeq M (cls_val_process Mkt ?pf ?matur) ?der)\n  stock_portfolio ?Mkt ?p =\n  (portfolio ?p \\<and> support_set ?p \\<subseteq> stocks ?Mkt)\n\ngoal (1 subgoal):\n 1. cls_val_process Mkt2 contr_pf matur w =\n    cls_val_process Mkt2 arb_pf matur w + cls_val_process Mkt2 pf matur w", "by blast"], ["proof (state)\nthis:\n  cls_val_process Mkt2 contr_pf matur w =\n  cls_val_process Mkt2 arb_pf matur w + cls_val_process Mkt2 pf matur w\n\ngoal (1 subgoal):\n 1. \\<And>w.\n       \\<lbrakk>w \\<in> space M;\n        prices Mkt2 x matur w = cls_val_process Mkt2 pf matur w\\<rbrakk>\n       \\<Longrightarrow> cls_val_process Mkt2 contr_pf matur w < 0", "also"], ["proof (state)\nthis:\n  cls_val_process Mkt2 contr_pf matur w =\n  cls_val_process Mkt2 arb_pf matur w + cls_val_process Mkt2 pf matur w\n\ngoal (1 subgoal):\n 1. \\<And>w.\n       \\<lbrakk>w \\<in> space M;\n        prices Mkt2 x matur w = cls_val_process Mkt2 pf matur w\\<rbrakk>\n       \\<Longrightarrow> cls_val_process Mkt2 contr_pf matur w < 0", "have \"... = prices Mkt2 pos_stock matur w * diff_inv - pr matur w + cls_val_process Mkt2 pf matur w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cls_val_process Mkt2 arb_pf matur w + cls_val_process Mkt2 pf matur w =\n    prices Mkt2 pos_stock matur w * diff_inv - pr matur w +\n    cls_val_process Mkt2 pf matur w", "using arb_uvp"], ["proof (prove)\nusing this:\n  \\<forall>n w.\n     cls_val_process Mkt2 arb_pf n w =\n     prices Mkt2 pos_stock n w * diff_inv - pr n w\n\ngoal (1 subgoal):\n 1. cls_val_process Mkt2 arb_pf matur w + cls_val_process Mkt2 pf matur w =\n    prices Mkt2 pos_stock matur w * diff_inv - pr matur w +\n    cls_val_process Mkt2 pf matur w", "by simp"], ["proof (state)\nthis:\n  cls_val_process Mkt2 arb_pf matur w + cls_val_process Mkt2 pf matur w =\n  prices Mkt2 pos_stock matur w * diff_inv - pr matur w +\n  cls_val_process Mkt2 pf matur w\n\ngoal (1 subgoal):\n 1. \\<And>w.\n       \\<lbrakk>w \\<in> space M;\n        prices Mkt2 x matur w = cls_val_process Mkt2 pf matur w\\<rbrakk>\n       \\<Longrightarrow> cls_val_process Mkt2 contr_pf matur w < 0", "also"], ["proof (state)\nthis:\n  cls_val_process Mkt2 arb_pf matur w + cls_val_process Mkt2 pf matur w =\n  prices Mkt2 pos_stock matur w * diff_inv - pr matur w +\n  cls_val_process Mkt2 pf matur w\n\ngoal (1 subgoal):\n 1. \\<And>w.\n       \\<lbrakk>w \\<in> space M;\n        prices Mkt2 x matur w = cls_val_process Mkt2 pf matur w\\<rbrakk>\n       \\<Longrightarrow> cls_val_process Mkt2 contr_pf matur w < 0", "have \"... = prices Mkt2 pos_stock matur w * diff_inv - prices Mkt2 x matur w + cls_val_process Mkt2 pf matur w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prices Mkt2 pos_stock matur w * diff_inv - pr matur w +\n    cls_val_process Mkt2 pf matur w =\n    prices Mkt2 pos_stock matur w * diff_inv - prices Mkt2 x matur w +\n    cls_val_process Mkt2 pf matur w", "using \\<open>prices Mkt2 x = pr\\<close>"], ["proof (prove)\nusing this:\n  prices Mkt2 x = pr\n\ngoal (1 subgoal):\n 1. prices Mkt2 pos_stock matur w * diff_inv - pr matur w +\n    cls_val_process Mkt2 pf matur w =\n    prices Mkt2 pos_stock matur w * diff_inv - prices Mkt2 x matur w +\n    cls_val_process Mkt2 pf matur w", "by simp"], ["proof (state)\nthis:\n  prices Mkt2 pos_stock matur w * diff_inv - pr matur w +\n  cls_val_process Mkt2 pf matur w =\n  prices Mkt2 pos_stock matur w * diff_inv - prices Mkt2 x matur w +\n  cls_val_process Mkt2 pf matur w\n\ngoal (1 subgoal):\n 1. \\<And>w.\n       \\<lbrakk>w \\<in> space M;\n        prices Mkt2 x matur w = cls_val_process Mkt2 pf matur w\\<rbrakk>\n       \\<Longrightarrow> cls_val_process Mkt2 contr_pf matur w < 0", "also"], ["proof (state)\nthis:\n  prices Mkt2 pos_stock matur w * diff_inv - pr matur w +\n  cls_val_process Mkt2 pf matur w =\n  prices Mkt2 pos_stock matur w * diff_inv - prices Mkt2 x matur w +\n  cls_val_process Mkt2 pf matur w\n\ngoal (1 subgoal):\n 1. \\<And>w.\n       \\<lbrakk>w \\<in> space M;\n        prices Mkt2 x matur w = cls_val_process Mkt2 pf matur w\\<rbrakk>\n       \\<Longrightarrow> cls_val_process Mkt2 contr_pf matur w < 0", "have \"... = prices Mkt2 pos_stock matur w * diff_inv\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prices Mkt2 pos_stock matur w * diff_inv - prices Mkt2 x matur w +\n    cls_val_process Mkt2 pf matur w =\n    prices Mkt2 pos_stock matur w * diff_inv", "using \\<open>prices Mkt2 x matur w = cls_val_process Mkt2 pf matur w\\<close>"], ["proof (prove)\nusing this:\n  prices Mkt2 x matur w = cls_val_process Mkt2 pf matur w\n\ngoal (1 subgoal):\n 1. prices Mkt2 pos_stock matur w * diff_inv - prices Mkt2 x matur w +\n    cls_val_process Mkt2 pf matur w =\n    prices Mkt2 pos_stock matur w * diff_inv", "by simp"], ["proof (state)\nthis:\n  prices Mkt2 pos_stock matur w * diff_inv - prices Mkt2 x matur w +\n  cls_val_process Mkt2 pf matur w =\n  prices Mkt2 pos_stock matur w * diff_inv\n\ngoal (1 subgoal):\n 1. \\<And>w.\n       \\<lbrakk>w \\<in> space M;\n        prices Mkt2 x matur w = cls_val_process Mkt2 pf matur w\\<rbrakk>\n       \\<Longrightarrow> cls_val_process Mkt2 contr_pf matur w < 0", "also"], ["proof (state)\nthis:\n  prices Mkt2 pos_stock matur w * diff_inv - prices Mkt2 x matur w +\n  cls_val_process Mkt2 pf matur w =\n  prices Mkt2 pos_stock matur w * diff_inv\n\ngoal (1 subgoal):\n 1. \\<And>w.\n       \\<lbrakk>w \\<in> space M;\n        prices Mkt2 x matur w = cls_val_process Mkt2 pf matur w\\<rbrakk>\n       \\<Longrightarrow> cls_val_process Mkt2 contr_pf matur w < 0", "have \"... < 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prices Mkt2 pos_stock matur w * diff_inv < 0", "using positive \\<open>diff_inv < 0\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>n w. 0 < prices Mkt pos_stock n w\n  diff_inv < 0\n\ngoal (1 subgoal):\n 1. prices Mkt2 pos_stock matur w * diff_inv < 0", "by (metis \\<open>coincides_on Mkt Mkt2 (stocks Mkt)\\<close> coincides_on_def in_stock mult_pos_neg)"], ["proof (state)\nthis:\n  prices Mkt2 pos_stock matur w * diff_inv < 0\n\ngoal (1 subgoal):\n 1. \\<And>w.\n       \\<lbrakk>w \\<in> space M;\n        prices Mkt2 x matur w = cls_val_process Mkt2 pf matur w\\<rbrakk>\n       \\<Longrightarrow> cls_val_process Mkt2 contr_pf matur w < 0", "finally"], ["proof (chain)\npicking this:\n  cls_val_process Mkt2 contr_pf matur w < 0", "have \"cls_val_process Mkt2 contr_pf matur w < 0\""], ["proof (prove)\nusing this:\n  cls_val_process Mkt2 contr_pf matur w < 0\n\ngoal (1 subgoal):\n 1. cls_val_process Mkt2 contr_pf matur w < 0", "."], ["proof (state)\nthis:\n  cls_val_process Mkt2 contr_pf matur w < 0\n\ngoal (1 subgoal):\n 1. \\<And>w.\n       \\<lbrakk>w \\<in> space M;\n        prices Mkt2 x matur w = cls_val_process Mkt2 pf matur w\\<rbrakk>\n       \\<Longrightarrow> cls_val_process Mkt2 contr_pf matur w < 0", "thus \"0 > cls_val_process Mkt2 contr_pf matur w\""], ["proof (prove)\nusing this:\n  cls_val_process Mkt2 contr_pf matur w < 0\n\ngoal (1 subgoal):\n 1. cls_val_process Mkt2 contr_pf matur w < 0", "by simp"], ["proof (state)\nthis:\n  cls_val_process Mkt2 contr_pf matur w < 0\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  AE w in M. prices Mkt2 x matur w =\n             cls_val_process Mkt2 pf matur w \\<longrightarrow>\n             cls_val_process Mkt2 contr_pf matur w < 0\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  AE w in M. cls_val_process Mkt2 contr_pf matur w < 0\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  diff_inv < 0 \\<longrightarrow>\n  (AE w in M. cls_val_process Mkt2 contr_pf matur w < 0)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in disc_equity_market) mult_comp_cls_val_process_measurable':\n  assumes \"cls_val_process Mkt2 pf n \\<in>borel_measurable (F n)\"\n  and \"portfolio pf\"\n  and \"qty n \\<in> borel_measurable (F n)\"\n  and \"0 \\<noteq> n\"\nshows \"cls_val_process Mkt2 (qty_mult_comp pf qty) n \\<in> borel_measurable (F n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cls_val_process Mkt2 (qty_mult_comp pf qty) n\n    \\<in> borel_measurable (F n)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. cls_val_process Mkt2 (qty_mult_comp pf qty) n\n    \\<in> borel_measurable (F n)", "have \"\\<exists>m. n = Suc m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>m. n = Suc m", "using assms"], ["proof (prove)\nusing this:\n  cls_val_process Mkt2 pf n \\<in> borel_measurable (F n)\n  portfolio pf\n  qty n \\<in> borel_measurable (F n)\n  0 \\<noteq> n\n\ngoal (1 subgoal):\n 1. \\<exists>m. n = Suc m", "by presburger"], ["proof (state)\nthis:\n  \\<exists>m. n = Suc m\n\ngoal (1 subgoal):\n 1. cls_val_process Mkt2 (qty_mult_comp pf qty) n\n    \\<in> borel_measurable (F n)", "from this"], ["proof (chain)\npicking this:\n  \\<exists>m. n = Suc m", "obtain m where \"n = Suc m\""], ["proof (prove)\nusing this:\n  \\<exists>m. n = Suc m\n\ngoal (1 subgoal):\n 1. (\\<And>m. n = Suc m \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by auto"], ["proof (state)\nthis:\n  n = Suc m\n\ngoal (1 subgoal):\n 1. cls_val_process Mkt2 (qty_mult_comp pf qty) n\n    \\<in> borel_measurable (F n)", "hence \"cls_val_process Mkt2 (qty_mult_comp pf qty) (Suc m) \\<in> borel_measurable (F (Suc m))\""], ["proof (prove)\nusing this:\n  n = Suc m\n\ngoal (1 subgoal):\n 1. cls_val_process Mkt2 (qty_mult_comp pf qty) (Suc m)\n    \\<in> borel_measurable (F (Suc m))", "using  mult_comp_cls_val_process_Suc[of pf Mkt2 qty] borel_measurable_times[of \"cls_val_process Mkt2 pf (Suc m)\" \"F (Suc m)\" \"qty (Suc m)\"]\n      assms \\<open>n= Suc m\\<close>"], ["proof (prove)\nusing this:\n  n = Suc m\n  portfolio pf \\<Longrightarrow>\n  \\<forall>n w.\n     cls_val_process Mkt2 (qty_mult_comp pf qty) (Suc n) w =\n     cls_val_process Mkt2 pf (Suc n) w * qty (Suc n) w\n  \\<lbrakk>cls_val_process Mkt2 pf (Suc m)\n           \\<in> borel_measurable (F (Suc m));\n   qty (Suc m) \\<in> borel_measurable (F (Suc m))\\<rbrakk>\n  \\<Longrightarrow> (\\<lambda>x.\n                        cls_val_process Mkt2 pf (Suc m) x * qty (Suc m) x)\n                    \\<in> borel_measurable (F (Suc m))\n  cls_val_process Mkt2 pf n \\<in> borel_measurable (F n)\n  portfolio pf\n  qty n \\<in> borel_measurable (F n)\n  0 \\<noteq> n\n  n = Suc m\n\ngoal (1 subgoal):\n 1. cls_val_process Mkt2 (qty_mult_comp pf qty) (Suc m)\n    \\<in> borel_measurable (F (Suc m))", "by presburger"], ["proof (state)\nthis:\n  cls_val_process Mkt2 (qty_mult_comp pf qty) (Suc m)\n  \\<in> borel_measurable (F (Suc m))\n\ngoal (1 subgoal):\n 1. cls_val_process Mkt2 (qty_mult_comp pf qty) n\n    \\<in> borel_measurable (F n)", "thus ?thesis"], ["proof (prove)\nusing this:\n  cls_val_process Mkt2 (qty_mult_comp pf qty) (Suc m)\n  \\<in> borel_measurable (F (Suc m))\n\ngoal (1 subgoal):\n 1. cls_val_process Mkt2 (qty_mult_comp pf qty) n\n    \\<in> borel_measurable (F n)", "using \\<open>n = Suc m\\<close>"], ["proof (prove)\nusing this:\n  cls_val_process Mkt2 (qty_mult_comp pf qty) (Suc m)\n  \\<in> borel_measurable (F (Suc m))\n  n = Suc m\n\ngoal (1 subgoal):\n 1. cls_val_process Mkt2 (qty_mult_comp pf qty) n\n    \\<in> borel_measurable (F n)", "by simp"], ["proof (state)\nthis:\n  cls_val_process Mkt2 (qty_mult_comp pf qty) n \\<in> borel_measurable (F n)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in disc_equity_market) mult_comp_cls_val_process_measurable:\n  assumes \"\\<forall>n. cls_val_process Mkt2 pf n \\<in>borel_measurable (F n)\"\n  and \"portfolio pf\"\n  and \"\\<forall>n. qty (Suc n) \\<in> borel_measurable (F n)\"\nshows \"\\<forall>n. cls_val_process Mkt2 (qty_mult_comp pf qty) n \\<in> borel_measurable (F n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n.\n       cls_val_process Mkt2 (qty_mult_comp pf qty) n\n       \\<in> borel_measurable (F n)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       cls_val_process Mkt2 (qty_mult_comp pf qty) n\n       \\<in> borel_measurable (F n)", "fix n"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       cls_val_process Mkt2 (qty_mult_comp pf qty) n\n       \\<in> borel_measurable (F n)", "show \"cls_val_process Mkt2 (qty_mult_comp pf qty) n \\<in> borel_measurable (F n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cls_val_process Mkt2 (qty_mult_comp pf qty) n\n    \\<in> borel_measurable (F n)", "proof (cases \"n=0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    cls_val_process Mkt2 (qty_mult_comp pf qty) n\n    \\<in> borel_measurable (F n)\n 2. n \\<noteq> 0 \\<Longrightarrow>\n    cls_val_process Mkt2 (qty_mult_comp pf qty) n\n    \\<in> borel_measurable (F n)", "case False"], ["proof (state)\nthis:\n  n \\<noteq> 0\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    cls_val_process Mkt2 (qty_mult_comp pf qty) n\n    \\<in> borel_measurable (F n)\n 2. n \\<noteq> 0 \\<Longrightarrow>\n    cls_val_process Mkt2 (qty_mult_comp pf qty) n\n    \\<in> borel_measurable (F n)", "hence \"\\<exists>m. n = Suc m\""], ["proof (prove)\nusing this:\n  n \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<exists>m. n = Suc m", "by presburger"], ["proof (state)\nthis:\n  \\<exists>m. n = Suc m\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    cls_val_process Mkt2 (qty_mult_comp pf qty) n\n    \\<in> borel_measurable (F n)\n 2. n \\<noteq> 0 \\<Longrightarrow>\n    cls_val_process Mkt2 (qty_mult_comp pf qty) n\n    \\<in> borel_measurable (F n)", "from this"], ["proof (chain)\npicking this:\n  \\<exists>m. n = Suc m", "obtain m where \"n = Suc m\""], ["proof (prove)\nusing this:\n  \\<exists>m. n = Suc m\n\ngoal (1 subgoal):\n 1. (\\<And>m. n = Suc m \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by auto"], ["proof (state)\nthis:\n  n = Suc m\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    cls_val_process Mkt2 (qty_mult_comp pf qty) n\n    \\<in> borel_measurable (F n)\n 2. n \\<noteq> 0 \\<Longrightarrow>\n    cls_val_process Mkt2 (qty_mult_comp pf qty) n\n    \\<in> borel_measurable (F n)", "have \"qty n \\<in> borel_measurable (F n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qty n \\<in> borel_measurable (F n)", "using Suc_n_not_le_n \\<open>n = Suc m\\<close> assms(3) increasing_measurable_info nat_le_linear"], ["proof (prove)\nusing this:\n  \\<not> Suc ?n \\<le> ?n\n  n = Suc m\n  \\<forall>n. qty (Suc n) \\<in> borel_measurable (F n)\n  \\<lbrakk>?f \\<in> F ?s \\<rightarrow>\\<^sub>M ?N; ?s \\<le> ?t\\<rbrakk>\n  \\<Longrightarrow> ?f \\<in> F ?t \\<rightarrow>\\<^sub>M ?N\n  ?m \\<le> ?n \\<or> ?n \\<le> ?m\n\ngoal (1 subgoal):\n 1. qty n \\<in> borel_measurable (F n)", "by blast"], ["proof (state)\nthis:\n  qty n \\<in> borel_measurable (F n)\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    cls_val_process Mkt2 (qty_mult_comp pf qty) n\n    \\<in> borel_measurable (F n)\n 2. n \\<noteq> 0 \\<Longrightarrow>\n    cls_val_process Mkt2 (qty_mult_comp pf qty) n\n    \\<in> borel_measurable (F n)", "hence \"qty (Suc m) \\<in> borel_measurable (F (Suc m))\""], ["proof (prove)\nusing this:\n  qty n \\<in> borel_measurable (F n)\n\ngoal (1 subgoal):\n 1. qty (Suc m) \\<in> borel_measurable (F (Suc m))", "using \\<open>n = Suc m\\<close>"], ["proof (prove)\nusing this:\n  qty n \\<in> borel_measurable (F n)\n  n = Suc m\n\ngoal (1 subgoal):\n 1. qty (Suc m) \\<in> borel_measurable (F (Suc m))", "by simp"], ["proof (state)\nthis:\n  qty (Suc m) \\<in> borel_measurable (F (Suc m))\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    cls_val_process Mkt2 (qty_mult_comp pf qty) n\n    \\<in> borel_measurable (F n)\n 2. n \\<noteq> 0 \\<Longrightarrow>\n    cls_val_process Mkt2 (qty_mult_comp pf qty) n\n    \\<in> borel_measurable (F n)", "hence \"cls_val_process Mkt2 (qty_mult_comp pf qty) (Suc m) \\<in> borel_measurable (F (Suc m))\""], ["proof (prove)\nusing this:\n  qty (Suc m) \\<in> borel_measurable (F (Suc m))\n\ngoal (1 subgoal):\n 1. cls_val_process Mkt2 (qty_mult_comp pf qty) (Suc m)\n    \\<in> borel_measurable (F (Suc m))", "using  mult_comp_cls_val_process_Suc[of pf Mkt2 qty] borel_measurable_times[of \"cls_val_process Mkt2 pf (Suc m)\" \"F (Suc m)\" \"qty (Suc m)\"]\n        assms \\<open>n= Suc m\\<close>"], ["proof (prove)\nusing this:\n  qty (Suc m) \\<in> borel_measurable (F (Suc m))\n  portfolio pf \\<Longrightarrow>\n  \\<forall>n w.\n     cls_val_process Mkt2 (qty_mult_comp pf qty) (Suc n) w =\n     cls_val_process Mkt2 pf (Suc n) w * qty (Suc n) w\n  \\<lbrakk>cls_val_process Mkt2 pf (Suc m)\n           \\<in> borel_measurable (F (Suc m));\n   qty (Suc m) \\<in> borel_measurable (F (Suc m))\\<rbrakk>\n  \\<Longrightarrow> (\\<lambda>x.\n                        cls_val_process Mkt2 pf (Suc m) x * qty (Suc m) x)\n                    \\<in> borel_measurable (F (Suc m))\n  \\<forall>n. cls_val_process Mkt2 pf n \\<in> borel_measurable (F n)\n  portfolio pf\n  \\<forall>n. qty (Suc n) \\<in> borel_measurable (F n)\n  n = Suc m\n\ngoal (1 subgoal):\n 1. cls_val_process Mkt2 (qty_mult_comp pf qty) (Suc m)\n    \\<in> borel_measurable (F (Suc m))", "by presburger"], ["proof (state)\nthis:\n  cls_val_process Mkt2 (qty_mult_comp pf qty) (Suc m)\n  \\<in> borel_measurable (F (Suc m))\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    cls_val_process Mkt2 (qty_mult_comp pf qty) n\n    \\<in> borel_measurable (F n)\n 2. n \\<noteq> 0 \\<Longrightarrow>\n    cls_val_process Mkt2 (qty_mult_comp pf qty) n\n    \\<in> borel_measurable (F n)", "thus ?thesis"], ["proof (prove)\nusing this:\n  cls_val_process Mkt2 (qty_mult_comp pf qty) (Suc m)\n  \\<in> borel_measurable (F (Suc m))\n\ngoal (1 subgoal):\n 1. cls_val_process Mkt2 (qty_mult_comp pf qty) n\n    \\<in> borel_measurable (F n)", "using \\<open>n = Suc m\\<close>"], ["proof (prove)\nusing this:\n  cls_val_process Mkt2 (qty_mult_comp pf qty) (Suc m)\n  \\<in> borel_measurable (F (Suc m))\n  n = Suc m\n\ngoal (1 subgoal):\n 1. cls_val_process Mkt2 (qty_mult_comp pf qty) n\n    \\<in> borel_measurable (F n)", "by simp"], ["proof (state)\nthis:\n  cls_val_process Mkt2 (qty_mult_comp pf qty) n \\<in> borel_measurable (F n)\n\ngoal (1 subgoal):\n 1. n = 0 \\<Longrightarrow>\n    cls_val_process Mkt2 (qty_mult_comp pf qty) n\n    \\<in> borel_measurable (F n)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. n = 0 \\<Longrightarrow>\n    cls_val_process Mkt2 (qty_mult_comp pf qty) n\n    \\<in> borel_measurable (F n)", "case True"], ["proof (state)\nthis:\n  n = 0\n\ngoal (1 subgoal):\n 1. n = 0 \\<Longrightarrow>\n    cls_val_process Mkt2 (qty_mult_comp pf qty) n\n    \\<in> borel_measurable (F n)", "have \"qty (Suc 0) \\<in> borel_measurable (F 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qty (Suc 0) \\<in> borel_measurable (F 0)", "using assms"], ["proof (prove)\nusing this:\n  \\<forall>n. cls_val_process Mkt2 pf n \\<in> borel_measurable (F n)\n  portfolio pf\n  \\<forall>n. qty (Suc n) \\<in> borel_measurable (F n)\n\ngoal (1 subgoal):\n 1. qty (Suc 0) \\<in> borel_measurable (F 0)", "by simp"], ["proof (state)\nthis:\n  qty (Suc 0) \\<in> borel_measurable (F 0)\n\ngoal (1 subgoal):\n 1. n = 0 \\<Longrightarrow>\n    cls_val_process Mkt2 (qty_mult_comp pf qty) n\n    \\<in> borel_measurable (F n)", "moreover"], ["proof (state)\nthis:\n  qty (Suc 0) \\<in> borel_measurable (F 0)\n\ngoal (1 subgoal):\n 1. n = 0 \\<Longrightarrow>\n    cls_val_process Mkt2 (qty_mult_comp pf qty) n\n    \\<in> borel_measurable (F n)", "have \"cls_val_process Mkt2 pf 0 \\<in> borel_measurable (F 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cls_val_process Mkt2 pf 0 \\<in> borel_measurable (F 0)", "using assms"], ["proof (prove)\nusing this:\n  \\<forall>n. cls_val_process Mkt2 pf n \\<in> borel_measurable (F n)\n  portfolio pf\n  \\<forall>n. qty (Suc n) \\<in> borel_measurable (F n)\n\ngoal (1 subgoal):\n 1. cls_val_process Mkt2 pf 0 \\<in> borel_measurable (F 0)", "by simp"], ["proof (state)\nthis:\n  cls_val_process Mkt2 pf 0 \\<in> borel_measurable (F 0)\n\ngoal (1 subgoal):\n 1. n = 0 \\<Longrightarrow>\n    cls_val_process Mkt2 (qty_mult_comp pf qty) n\n    \\<in> borel_measurable (F n)", "ultimately"], ["proof (chain)\npicking this:\n  qty (Suc 0) \\<in> borel_measurable (F 0)\n  cls_val_process Mkt2 pf 0 \\<in> borel_measurable (F 0)", "have \"(\\<lambda>w. cls_val_process Mkt2 pf 0 w * qty (Suc 0) w) \\<in> borel_measurable (F 0)\""], ["proof (prove)\nusing this:\n  qty (Suc 0) \\<in> borel_measurable (F 0)\n  cls_val_process Mkt2 pf 0 \\<in> borel_measurable (F 0)\n\ngoal (1 subgoal):\n 1. (\\<lambda>w. cls_val_process Mkt2 pf 0 w * qty (Suc 0) w)\n    \\<in> borel_measurable (F 0)", "by simp"], ["proof (state)\nthis:\n  (\\<lambda>w. cls_val_process Mkt2 pf 0 w * qty (Suc 0) w)\n  \\<in> borel_measurable (F 0)\n\ngoal (1 subgoal):\n 1. n = 0 \\<Longrightarrow>\n    cls_val_process Mkt2 (qty_mult_comp pf qty) n\n    \\<in> borel_measurable (F n)", "thus ?thesis"], ["proof (prove)\nusing this:\n  (\\<lambda>w. cls_val_process Mkt2 pf 0 w * qty (Suc 0) w)\n  \\<in> borel_measurable (F 0)\n\ngoal (1 subgoal):\n 1. cls_val_process Mkt2 (qty_mult_comp pf qty) n\n    \\<in> borel_measurable (F n)", "using assms(2) True mult_comp_cls_val_process0"], ["proof (prove)\nusing this:\n  (\\<lambda>w. cls_val_process Mkt2 pf 0 w * qty (Suc 0) w)\n  \\<in> borel_measurable (F 0)\n  portfolio pf\n  n = 0\n  portfolio ?pf1.0 \\<Longrightarrow>\n  \\<forall>w.\n     cls_val_process ?Mkt (qty_mult_comp ?pf1.0 ?qty) 0 w =\n     cls_val_process ?Mkt ?pf1.0 0 w * ?qty (Suc 0) w\n\ngoal (1 subgoal):\n 1. cls_val_process Mkt2 (qty_mult_comp pf qty) n\n    \\<in> borel_measurable (F n)", "by (simp add: \\<open>(\\<lambda>w. cls_val_process Mkt2 pf 0 w * qty (Suc 0) w) \\<in> borel_measurable (F 0)\\<close> mult_comp_cls_val_process0 measurable_cong)"], ["proof (state)\nthis:\n  cls_val_process Mkt2 (qty_mult_comp pf qty) n \\<in> borel_measurable (F n)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  cls_val_process Mkt2 (qty_mult_comp pf qty) n \\<in> borel_measurable (F n)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in disc_equity_market) mult_comp_val_process_measurable:\n  assumes \"val_process Mkt2 pf n \\<in>borel_measurable (F n)\"\n  and \"portfolio pf\"\n  and \"qty (Suc n) \\<in> borel_measurable (F n)\"\nshows \"val_process Mkt2 (qty_mult_comp pf qty) n \\<in> borel_measurable (F n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. val_process Mkt2 (qty_mult_comp pf qty) n \\<in> borel_measurable (F n)", "using  mult_comp_val_process[of pf Mkt2 qty] borel_measurable_times[of \"val_process Mkt2 pf n\" \"F n\" \"qty (Suc n)\"]\n  assms"], ["proof (prove)\nusing this:\n  portfolio pf \\<Longrightarrow>\n  \\<forall>n w.\n     val_process Mkt2 (qty_mult_comp pf qty) n w =\n     val_process Mkt2 pf n w * qty (Suc n) w\n  \\<lbrakk>val_process Mkt2 pf n \\<in> borel_measurable (F n);\n   qty (Suc n) \\<in> borel_measurable (F n)\\<rbrakk>\n  \\<Longrightarrow> (\\<lambda>x. val_process Mkt2 pf n x * qty (Suc n) x)\n                    \\<in> borel_measurable (F n)\n  val_process Mkt2 pf n \\<in> borel_measurable (F n)\n  portfolio pf\n  qty (Suc n) \\<in> borel_measurable (F n)\n\ngoal (1 subgoal):\n 1. val_process Mkt2 (qty_mult_comp pf qty) n \\<in> borel_measurable (F n)", "by presburger"], ["", "lemma (in disc_market_pos_stock) repl_fair_price_unique:\n  assumes \"replicating_portfolio pf der matur\"\n  and \"fair_price Mkt \\<pi> der matur\"\nshows \"\\<pi> = initial_value pf\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> = initial_value pf", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<pi> = initial_value pf", "have expr: \"(\\<exists> pr. price_structure der matur \\<pi> pr \\<and>\n    (\\<forall> x. (x\\<notin> stocks Mkt \\<longrightarrow>\n      (\\<forall> Mkt2 p. (coincides_on Mkt Mkt2 (stocks Mkt)) \\<and> (prices Mkt2 x = pr) \\<and> portfolio p \\<and> support_set p \\<subseteq> stocks Mkt \\<union> {x} \\<longrightarrow>\n        \\<not> arbitrage_process Mkt2 p))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>pr.\n       price_structure der matur \\<pi> pr \\<and>\n       (\\<forall>x.\n           x \\<notin> stocks Mkt \\<longrightarrow>\n           (\\<forall>Mkt2 p.\n               coincides_on Mkt Mkt2 (stocks Mkt) \\<and>\n               prices Mkt2 x = pr \\<and>\n               portfolio p \\<and>\n               support_set p\n               \\<subseteq> stocks Mkt \\<union> {x} \\<longrightarrow>\n               \\<not> arbitrage_process Mkt2 p))", "using assms fair_priceI"], ["proof (prove)\nusing this:\n  replicating_portfolio pf der matur\n  fair_price Mkt \\<pi> der matur\n  fair_price ?Mkt ?\\<pi> ?pyf ?matur \\<Longrightarrow>\n  \\<exists>pr.\n     price_structure ?pyf ?matur ?\\<pi> pr \\<and>\n     (\\<forall>x.\n         x \\<notin> stocks ?Mkt \\<longrightarrow>\n         (\\<forall>Mkt2 p.\n             coincides_on ?Mkt Mkt2 (stocks ?Mkt) \\<and>\n             prices Mkt2 x = pr \\<and>\n             portfolio p \\<and>\n             support_set p\n             \\<subseteq> stocks ?Mkt \\<union> {x} \\<longrightarrow>\n             \\<not> arbitrage_process Mkt2 p))\n\ngoal (1 subgoal):\n 1. \\<exists>pr.\n       price_structure der matur \\<pi> pr \\<and>\n       (\\<forall>x.\n           x \\<notin> stocks Mkt \\<longrightarrow>\n           (\\<forall>Mkt2 p.\n               coincides_on Mkt Mkt2 (stocks Mkt) \\<and>\n               prices Mkt2 x = pr \\<and>\n               portfolio p \\<and>\n               support_set p\n               \\<subseteq> stocks Mkt \\<union> {x} \\<longrightarrow>\n               \\<not> arbitrage_process Mkt2 p))", "by simp"], ["proof (state)\nthis:\n  \\<exists>pr.\n     price_structure der matur \\<pi> pr \\<and>\n     (\\<forall>x.\n         x \\<notin> stocks Mkt \\<longrightarrow>\n         (\\<forall>Mkt2 p.\n             coincides_on Mkt Mkt2 (stocks Mkt) \\<and>\n             prices Mkt2 x = pr \\<and>\n             portfolio p \\<and>\n             support_set p\n             \\<subseteq> stocks Mkt \\<union> {x} \\<longrightarrow>\n             \\<not> arbitrage_process Mkt2 p))\n\ngoal (1 subgoal):\n 1. \\<pi> = initial_value pf", "then"], ["proof (chain)\npicking this:\n  \\<exists>pr.\n     price_structure der matur \\<pi> pr \\<and>\n     (\\<forall>x.\n         x \\<notin> stocks Mkt \\<longrightarrow>\n         (\\<forall>Mkt2 p.\n             coincides_on Mkt Mkt2 (stocks Mkt) \\<and>\n             prices Mkt2 x = pr \\<and>\n             portfolio p \\<and>\n             support_set p\n             \\<subseteq> stocks Mkt \\<union> {x} \\<longrightarrow>\n             \\<not> arbitrage_process Mkt2 p))", "obtain pr where \"price_structure der matur \\<pi> pr\" and\n    xasset: \"(\\<forall> x. (x\\<notin> stocks Mkt \\<longrightarrow>\n      (\\<forall> Mkt2 p. (coincides_on Mkt Mkt2 (stocks Mkt)) \\<and> (prices Mkt2 x = pr) \\<and> portfolio p \\<and> support_set p \\<subseteq> stocks Mkt \\<union> {x} \\<longrightarrow>\n        \\<not> arbitrage_process Mkt2 p)))\""], ["proof (prove)\nusing this:\n  \\<exists>pr.\n     price_structure der matur \\<pi> pr \\<and>\n     (\\<forall>x.\n         x \\<notin> stocks Mkt \\<longrightarrow>\n         (\\<forall>Mkt2 p.\n             coincides_on Mkt Mkt2 (stocks Mkt) \\<and>\n             prices Mkt2 x = pr \\<and>\n             portfolio p \\<and>\n             support_set p\n             \\<subseteq> stocks Mkt \\<union> {x} \\<longrightarrow>\n             \\<not> arbitrage_process Mkt2 p))\n\ngoal (1 subgoal):\n 1. (\\<And>pr.\n        \\<lbrakk>price_structure der matur \\<pi> pr;\n         \\<forall>x.\n            x \\<notin> stocks Mkt \\<longrightarrow>\n            (\\<forall>Mkt2 p.\n                coincides_on Mkt Mkt2 (stocks Mkt) \\<and>\n                prices Mkt2 x = pr \\<and>\n                portfolio p \\<and>\n                support_set p\n                \\<subseteq> stocks Mkt \\<union> {x} \\<longrightarrow>\n                \\<not> arbitrage_process Mkt2 p)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  price_structure der matur \\<pi> pr\n  \\<forall>x.\n     x \\<notin> stocks Mkt \\<longrightarrow>\n     (\\<forall>Mkt2 p.\n         coincides_on Mkt Mkt2 (stocks Mkt) \\<and>\n         prices Mkt2 x = pr \\<and>\n         portfolio p \\<and>\n         support_set p \\<subseteq> stocks Mkt \\<union> {x} \\<longrightarrow>\n         \\<not> arbitrage_process Mkt2 p)\n\ngoal (1 subgoal):\n 1. \\<pi> = initial_value pf", "define diff_inv where \"diff_inv = (\\<pi> - initial_value pf) / constant_image (prices Mkt pos_stock 0)\""], ["proof (state)\nthis:\n  diff_inv =\n  (\\<pi> - initial_value pf) / constant_image (prices Mkt pos_stock 0)\n\ngoal (1 subgoal):\n 1. \\<pi> = initial_value pf", "{"], ["proof (state)\nthis:\n  diff_inv =\n  (\\<pi> - initial_value pf) / constant_image (prices Mkt pos_stock 0)\n\ngoal (1 subgoal):\n 1. \\<pi> = initial_value pf", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<pi> = initial_value pf", "assume \"x\\<notin> stocks Mkt\""], ["proof (state)\nthis:\n  x \\<notin> stocks Mkt\n\ngoal (1 subgoal):\n 1. \\<pi> = initial_value pf", "hence mkprop: \"(\\<forall> Mkt2 p. (coincides_on Mkt Mkt2 (stocks Mkt)) \\<and> (prices Mkt2 x = pr) \\<and> portfolio p \\<and> support_set p \\<subseteq> stocks Mkt \\<union> {x} \\<longrightarrow>\n          \\<not> arbitrage_process Mkt2 p)\""], ["proof (prove)\nusing this:\n  x \\<notin> stocks Mkt\n\ngoal (1 subgoal):\n 1. \\<forall>Mkt2 p.\n       coincides_on Mkt Mkt2 (stocks Mkt) \\<and>\n       prices Mkt2 x = pr \\<and>\n       portfolio p \\<and>\n       support_set p \\<subseteq> stocks Mkt \\<union> {x} \\<longrightarrow>\n       \\<not> arbitrage_process Mkt2 p", "using xasset"], ["proof (prove)\nusing this:\n  x \\<notin> stocks Mkt\n  \\<forall>x.\n     x \\<notin> stocks Mkt \\<longrightarrow>\n     (\\<forall>Mkt2 p.\n         coincides_on Mkt Mkt2 (stocks Mkt) \\<and>\n         prices Mkt2 x = pr \\<and>\n         portfolio p \\<and>\n         support_set p \\<subseteq> stocks Mkt \\<union> {x} \\<longrightarrow>\n         \\<not> arbitrage_process Mkt2 p)\n\ngoal (1 subgoal):\n 1. \\<forall>Mkt2 p.\n       coincides_on Mkt Mkt2 (stocks Mkt) \\<and>\n       prices Mkt2 x = pr \\<and>\n       portfolio p \\<and>\n       support_set p \\<subseteq> stocks Mkt \\<union> {x} \\<longrightarrow>\n       \\<not> arbitrage_process Mkt2 p", "by simp"], ["proof (state)\nthis:\n  \\<forall>Mkt2 p.\n     coincides_on Mkt Mkt2 (stocks Mkt) \\<and>\n     prices Mkt2 x = pr \\<and>\n     portfolio p \\<and>\n     support_set p \\<subseteq> stocks Mkt \\<union> {x} \\<longrightarrow>\n     \\<not> arbitrage_process Mkt2 p\n\ngoal (1 subgoal):\n 1. \\<pi> = initial_value pf", "fix Mkt2"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<pi> = initial_value pf", "assume \"(coincides_on Mkt Mkt2 (stocks Mkt))\" and \"(prices Mkt2 x = pr)\""], ["proof (state)\nthis:\n  coincides_on Mkt Mkt2 (stocks Mkt)\n  prices Mkt2 x = pr\n\ngoal (1 subgoal):\n 1. \\<pi> = initial_value pf", "have \"0 < constant_image (prices Mkt pos_stock 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < constant_image (prices Mkt pos_stock 0)", "using trading_strategy_init"], ["proof (prove)\nusing this:\n  \\<lbrakk>trading_strategy ?p; support_adapt Mkt ?p\\<rbrakk>\n  \\<Longrightarrow> \\<exists>c.\n                       \\<forall>w\\<in>space M. val_process Mkt ?p 0 w = c\n\ngoal (1 subgoal):\n 1. 0 < constant_image (prices Mkt pos_stock 0)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>p.\n        \\<lbrakk>trading_strategy p; support_adapt Mkt p\\<rbrakk>\n        \\<Longrightarrow> \\<exists>c.\n                             \\<forall>w\\<in>space M.\n                                val_process Mkt p 0 w = c) \\<Longrightarrow>\n    0 < constant_image (prices Mkt pos_stock 0)", "have \"borel_adapt_stoch_proc F (prices Mkt pos_stock)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. borel_adapt_stoch_proc F (prices Mkt pos_stock)", "using pos_stock_borel_adapted"], ["proof (prove)\nusing this:\n  borel_adapt_stoch_proc F (prices Mkt pos_stock)\n\ngoal (1 subgoal):\n 1. borel_adapt_stoch_proc F (prices Mkt pos_stock)", "by simp"], ["proof (state)\nthis:\n  borel_adapt_stoch_proc F (prices Mkt pos_stock)\n\ngoal (1 subgoal):\n 1. (\\<And>p.\n        \\<lbrakk>trading_strategy p; support_adapt Mkt p\\<rbrakk>\n        \\<Longrightarrow> \\<exists>c.\n                             \\<forall>w\\<in>space M.\n                                val_process Mkt p 0 w = c) \\<Longrightarrow>\n    0 < constant_image (prices Mkt pos_stock 0)", "hence \"\\<exists>c. \\<forall>w\\<in>space M. prices Mkt pos_stock 0 w = c\""], ["proof (prove)\nusing this:\n  borel_adapt_stoch_proc F (prices Mkt pos_stock)\n\ngoal (1 subgoal):\n 1. \\<exists>c. \\<forall>w\\<in>space M. prices Mkt pos_stock 0 w = c", "using  adapted_init[of \"prices Mkt pos_stock\"]"], ["proof (prove)\nusing this:\n  borel_adapt_stoch_proc F (prices Mkt pos_stock)\n  borel_adapt_stoch_proc F (prices Mkt pos_stock) \\<Longrightarrow>\n  \\<exists>c. \\<forall>w\\<in>space M. prices Mkt pos_stock 0 w = c\n\ngoal (1 subgoal):\n 1. \\<exists>c. \\<forall>w\\<in>space M. prices Mkt pos_stock 0 w = c", "by simp"], ["proof (state)\nthis:\n  \\<exists>c. \\<forall>w\\<in>space M. prices Mkt pos_stock 0 w = c\n\ngoal (1 subgoal):\n 1. (\\<And>p.\n        \\<lbrakk>trading_strategy p; support_adapt Mkt p\\<rbrakk>\n        \\<Longrightarrow> \\<exists>c.\n                             \\<forall>w\\<in>space M.\n                                val_process Mkt p 0 w = c) \\<Longrightarrow>\n    0 < constant_image (prices Mkt pos_stock 0)", "moreover"], ["proof (state)\nthis:\n  \\<exists>c. \\<forall>w\\<in>space M. prices Mkt pos_stock 0 w = c\n\ngoal (1 subgoal):\n 1. (\\<And>p.\n        \\<lbrakk>trading_strategy p; support_adapt Mkt p\\<rbrakk>\n        \\<Longrightarrow> \\<exists>c.\n                             \\<forall>w\\<in>space M.\n                                val_process Mkt p 0 w = c) \\<Longrightarrow>\n    0 < constant_image (prices Mkt pos_stock 0)", "have \"\\<forall>w\\<in> space M. 0 < prices Mkt pos_stock 0 w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>w\\<in>space M. 0 < prices Mkt pos_stock 0 w", "using positive"], ["proof (prove)\nusing this:\n  \\<forall>n w. 0 < prices Mkt pos_stock n w\n\ngoal (1 subgoal):\n 1. \\<forall>w\\<in>space M. 0 < prices Mkt pos_stock 0 w", "by simp"], ["proof (state)\nthis:\n  \\<forall>w\\<in>space M. 0 < prices Mkt pos_stock 0 w\n\ngoal (1 subgoal):\n 1. (\\<And>p.\n        \\<lbrakk>trading_strategy p; support_adapt Mkt p\\<rbrakk>\n        \\<Longrightarrow> \\<exists>c.\n                             \\<forall>w\\<in>space M.\n                                val_process Mkt p 0 w = c) \\<Longrightarrow>\n    0 < constant_image (prices Mkt pos_stock 0)", "ultimately"], ["proof (chain)\npicking this:\n  \\<exists>c. \\<forall>w\\<in>space M. prices Mkt pos_stock 0 w = c\n  \\<forall>w\\<in>space M. 0 < prices Mkt pos_stock 0 w", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>c. \\<forall>w\\<in>space M. prices Mkt pos_stock 0 w = c\n  \\<forall>w\\<in>space M. 0 < prices Mkt pos_stock 0 w\n\ngoal (1 subgoal):\n 1. 0 < constant_image (prices Mkt pos_stock 0)", "using constant_image_pos"], ["proof (prove)\nusing this:\n  \\<exists>c. \\<forall>w\\<in>space M. prices Mkt pos_stock 0 w = c\n  \\<forall>w\\<in>space M. 0 < prices Mkt pos_stock 0 w\n  \\<lbrakk>\\<forall>x\\<in>space M. 0 < ?f x;\n   \\<exists>c. \\<forall>x\\<in>space M. ?f x = c\\<rbrakk>\n  \\<Longrightarrow> 0 < constant_image ?f\n\ngoal (1 subgoal):\n 1. 0 < constant_image (prices Mkt pos_stock 0)", "by simp"], ["proof (state)\nthis:\n  0 < constant_image (prices Mkt pos_stock 0)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  0 < constant_image (prices Mkt pos_stock 0)\n\ngoal (1 subgoal):\n 1. \\<pi> = initial_value pf", "define arb_pf where \"arb_pf = (\\<lambda> (x::'b) (n::nat) (w::'a). 0::real)(x:= (\\<lambda> n w. -1), pos_stock := (\\<lambda> n w. diff_inv))\""], ["proof (state)\nthis:\n  arb_pf = (\\<lambda>x n w. 0)\n  (x := \\<lambda>n w. - 1, pos_stock := \\<lambda>n w. diff_inv)\n\ngoal (1 subgoal):\n 1. \\<pi> = initial_value pf", "define contr_pf where \"contr_pf = qty_sum arb_pf pf\""], ["proof (state)\nthis:\n  contr_pf = qty_sum arb_pf pf\n\ngoal (1 subgoal):\n 1. \\<pi> = initial_value pf", "have 1:\"0 \\<noteq> diff_inv \\<longrightarrow> self_financing Mkt2 contr_pf\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<noteq> diff_inv \\<longrightarrow> self_financing Mkt2 contr_pf", "using arbitrage_portfolio_properties[of der matur \\<pi> pr pf Mkt2 x diff_inv arb_pf contr_pf]"], ["proof (prove)\nusing this:\n  \\<lbrakk>price_structure der matur \\<pi> pr;\n   replicating_portfolio pf der matur; coincides_on Mkt Mkt2 (stocks Mkt);\n   prices Mkt2 x = pr; x \\<notin> stocks Mkt;\n   diff_inv =\n   (\\<pi> - initial_value pf) / constant_image (prices Mkt pos_stock 0);\n   diff_inv \\<noteq> 0;\n   arb_pf = (\\<lambda>x n w. 0)\n   (x := \\<lambda>n w. - 1, pos_stock := \\<lambda>n w. diff_inv);\n   contr_pf = qty_sum arb_pf pf\\<rbrakk>\n  \\<Longrightarrow> self_financing Mkt2 contr_pf\n  \\<lbrakk>price_structure der matur \\<pi> pr;\n   replicating_portfolio pf der matur; coincides_on Mkt Mkt2 (stocks Mkt);\n   prices Mkt2 x = pr; x \\<notin> stocks Mkt;\n   diff_inv =\n   (\\<pi> - initial_value pf) / constant_image (prices Mkt pos_stock 0);\n   diff_inv \\<noteq> 0;\n   arb_pf = (\\<lambda>x n w. 0)\n   (x := \\<lambda>n w. - 1, pos_stock := \\<lambda>n w. diff_inv);\n   contr_pf = qty_sum arb_pf pf\\<rbrakk>\n  \\<Longrightarrow> trading_strategy contr_pf\n  \\<lbrakk>price_structure der matur \\<pi> pr;\n   replicating_portfolio pf der matur; coincides_on Mkt Mkt2 (stocks Mkt);\n   prices Mkt2 x = pr; x \\<notin> stocks Mkt;\n   diff_inv =\n   (\\<pi> - initial_value pf) / constant_image (prices Mkt pos_stock 0);\n   diff_inv \\<noteq> 0;\n   arb_pf = (\\<lambda>x n w. 0)\n   (x := \\<lambda>n w. - 1, pos_stock := \\<lambda>n w. diff_inv);\n   contr_pf = qty_sum arb_pf pf\\<rbrakk>\n  \\<Longrightarrow> \\<forall>w\\<in>space M.\n                       cls_val_process Mkt2 contr_pf 0 w = 0\n  \\<lbrakk>price_structure der matur \\<pi> pr;\n   replicating_portfolio pf der matur; coincides_on Mkt Mkt2 (stocks Mkt);\n   prices Mkt2 x = pr; x \\<notin> stocks Mkt;\n   diff_inv =\n   (\\<pi> - initial_value pf) / constant_image (prices Mkt pos_stock 0);\n   diff_inv \\<noteq> 0;\n   arb_pf = (\\<lambda>x n w. 0)\n   (x := \\<lambda>n w. - 1, pos_stock := \\<lambda>n w. diff_inv);\n   contr_pf = qty_sum arb_pf pf\\<rbrakk>\n  \\<Longrightarrow> 0 < diff_inv \\<longrightarrow>\n                    (AE w in M. 0 < cls_val_process Mkt2 contr_pf matur w)\n  \\<lbrakk>price_structure der matur \\<pi> pr;\n   replicating_portfolio pf der matur; coincides_on Mkt Mkt2 (stocks Mkt);\n   prices Mkt2 x = pr; x \\<notin> stocks Mkt;\n   diff_inv =\n   (\\<pi> - initial_value pf) / constant_image (prices Mkt pos_stock 0);\n   diff_inv \\<noteq> 0;\n   arb_pf = (\\<lambda>x n w. 0)\n   (x := \\<lambda>n w. - 1, pos_stock := \\<lambda>n w. diff_inv);\n   contr_pf = qty_sum arb_pf pf\\<rbrakk>\n  \\<Longrightarrow> diff_inv < 0 \\<longrightarrow>\n                    (AE w in M. cls_val_process Mkt2 contr_pf matur w < 0)\n  \\<lbrakk>price_structure der matur \\<pi> pr;\n   replicating_portfolio pf der matur; coincides_on Mkt Mkt2 (stocks Mkt);\n   prices Mkt2 x = pr; x \\<notin> stocks Mkt;\n   diff_inv =\n   (\\<pi> - initial_value pf) / constant_image (prices Mkt pos_stock 0);\n   diff_inv \\<noteq> 0;\n   arb_pf = (\\<lambda>x n w. 0)\n   (x := \\<lambda>n w. - 1, pos_stock := \\<lambda>n w. diff_inv);\n   contr_pf = qty_sum arb_pf pf\\<rbrakk>\n  \\<Longrightarrow> support_set arb_pf = {x, pos_stock}\n  \\<lbrakk>price_structure der matur \\<pi> pr;\n   replicating_portfolio pf der matur; coincides_on Mkt Mkt2 (stocks Mkt);\n   prices Mkt2 x = pr; x \\<notin> stocks Mkt;\n   diff_inv =\n   (\\<pi> - initial_value pf) / constant_image (prices Mkt pos_stock 0);\n   diff_inv \\<noteq> 0;\n   arb_pf = (\\<lambda>x n w. 0)\n   (x := \\<lambda>n w. - 1, pos_stock := \\<lambda>n w. diff_inv);\n   contr_pf = qty_sum arb_pf pf\\<rbrakk>\n  \\<Longrightarrow> portfolio contr_pf\n\ngoal (1 subgoal):\n 1. 0 \\<noteq> diff_inv \\<longrightarrow> self_financing Mkt2 contr_pf", "using  \\<open>coincides_on Mkt Mkt2 (stocks Mkt)\\<close> \\<open>price_structure der matur \\<pi> pr\\<close> \\<open>prices Mkt2 x = pr\\<close>\n        \\<open>x \\<notin> stocks Mkt\\<close> arb_pf_def assms(1) contr_pf_def diff_inv_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>price_structure der matur \\<pi> pr;\n   replicating_portfolio pf der matur; coincides_on Mkt Mkt2 (stocks Mkt);\n   prices Mkt2 x = pr; x \\<notin> stocks Mkt;\n   diff_inv =\n   (\\<pi> - initial_value pf) / constant_image (prices Mkt pos_stock 0);\n   diff_inv \\<noteq> 0;\n   arb_pf = (\\<lambda>x n w. 0)\n   (x := \\<lambda>n w. - 1, pos_stock := \\<lambda>n w. diff_inv);\n   contr_pf = qty_sum arb_pf pf\\<rbrakk>\n  \\<Longrightarrow> self_financing Mkt2 contr_pf\n  \\<lbrakk>price_structure der matur \\<pi> pr;\n   replicating_portfolio pf der matur; coincides_on Mkt Mkt2 (stocks Mkt);\n   prices Mkt2 x = pr; x \\<notin> stocks Mkt;\n   diff_inv =\n   (\\<pi> - initial_value pf) / constant_image (prices Mkt pos_stock 0);\n   diff_inv \\<noteq> 0;\n   arb_pf = (\\<lambda>x n w. 0)\n   (x := \\<lambda>n w. - 1, pos_stock := \\<lambda>n w. diff_inv);\n   contr_pf = qty_sum arb_pf pf\\<rbrakk>\n  \\<Longrightarrow> trading_strategy contr_pf\n  \\<lbrakk>price_structure der matur \\<pi> pr;\n   replicating_portfolio pf der matur; coincides_on Mkt Mkt2 (stocks Mkt);\n   prices Mkt2 x = pr; x \\<notin> stocks Mkt;\n   diff_inv =\n   (\\<pi> - initial_value pf) / constant_image (prices Mkt pos_stock 0);\n   diff_inv \\<noteq> 0;\n   arb_pf = (\\<lambda>x n w. 0)\n   (x := \\<lambda>n w. - 1, pos_stock := \\<lambda>n w. diff_inv);\n   contr_pf = qty_sum arb_pf pf\\<rbrakk>\n  \\<Longrightarrow> \\<forall>w\\<in>space M.\n                       cls_val_process Mkt2 contr_pf 0 w = 0\n  \\<lbrakk>price_structure der matur \\<pi> pr;\n   replicating_portfolio pf der matur; coincides_on Mkt Mkt2 (stocks Mkt);\n   prices Mkt2 x = pr; x \\<notin> stocks Mkt;\n   diff_inv =\n   (\\<pi> - initial_value pf) / constant_image (prices Mkt pos_stock 0);\n   diff_inv \\<noteq> 0;\n   arb_pf = (\\<lambda>x n w. 0)\n   (x := \\<lambda>n w. - 1, pos_stock := \\<lambda>n w. diff_inv);\n   contr_pf = qty_sum arb_pf pf\\<rbrakk>\n  \\<Longrightarrow> 0 < diff_inv \\<longrightarrow>\n                    (AE w in M. 0 < cls_val_process Mkt2 contr_pf matur w)\n  \\<lbrakk>price_structure der matur \\<pi> pr;\n   replicating_portfolio pf der matur; coincides_on Mkt Mkt2 (stocks Mkt);\n   prices Mkt2 x = pr; x \\<notin> stocks Mkt;\n   diff_inv =\n   (\\<pi> - initial_value pf) / constant_image (prices Mkt pos_stock 0);\n   diff_inv \\<noteq> 0;\n   arb_pf = (\\<lambda>x n w. 0)\n   (x := \\<lambda>n w. - 1, pos_stock := \\<lambda>n w. diff_inv);\n   contr_pf = qty_sum arb_pf pf\\<rbrakk>\n  \\<Longrightarrow> diff_inv < 0 \\<longrightarrow>\n                    (AE w in M. cls_val_process Mkt2 contr_pf matur w < 0)\n  \\<lbrakk>price_structure der matur \\<pi> pr;\n   replicating_portfolio pf der matur; coincides_on Mkt Mkt2 (stocks Mkt);\n   prices Mkt2 x = pr; x \\<notin> stocks Mkt;\n   diff_inv =\n   (\\<pi> - initial_value pf) / constant_image (prices Mkt pos_stock 0);\n   diff_inv \\<noteq> 0;\n   arb_pf = (\\<lambda>x n w. 0)\n   (x := \\<lambda>n w. - 1, pos_stock := \\<lambda>n w. diff_inv);\n   contr_pf = qty_sum arb_pf pf\\<rbrakk>\n  \\<Longrightarrow> support_set arb_pf = {x, pos_stock}\n  \\<lbrakk>price_structure der matur \\<pi> pr;\n   replicating_portfolio pf der matur; coincides_on Mkt Mkt2 (stocks Mkt);\n   prices Mkt2 x = pr; x \\<notin> stocks Mkt;\n   diff_inv =\n   (\\<pi> - initial_value pf) / constant_image (prices Mkt pos_stock 0);\n   diff_inv \\<noteq> 0;\n   arb_pf = (\\<lambda>x n w. 0)\n   (x := \\<lambda>n w. - 1, pos_stock := \\<lambda>n w. diff_inv);\n   contr_pf = qty_sum arb_pf pf\\<rbrakk>\n  \\<Longrightarrow> portfolio contr_pf\n  coincides_on Mkt Mkt2 (stocks Mkt)\n  price_structure der matur \\<pi> pr\n  prices Mkt2 x = pr\n  x \\<notin> stocks Mkt\n  arb_pf = (\\<lambda>x n w. 0)\n  (x := \\<lambda>n w. - 1, pos_stock := \\<lambda>n w. diff_inv)\n  replicating_portfolio pf der matur\n  contr_pf = qty_sum arb_pf pf\n  diff_inv =\n  (\\<pi> - initial_value pf) / constant_image (prices Mkt pos_stock 0)\n\ngoal (1 subgoal):\n 1. 0 \\<noteq> diff_inv \\<longrightarrow> self_financing Mkt2 contr_pf", "by blast"], ["proof (state)\nthis:\n  0 \\<noteq> diff_inv \\<longrightarrow> self_financing Mkt2 contr_pf\n\ngoal (1 subgoal):\n 1. \\<pi> = initial_value pf", "have 2:\"0 \\<noteq> diff_inv \\<longrightarrow> trading_strategy contr_pf\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<noteq> diff_inv \\<longrightarrow> trading_strategy contr_pf", "using arbitrage_portfolio_properties[of der matur \\<pi> pr pf Mkt2 x diff_inv arb_pf contr_pf]"], ["proof (prove)\nusing this:\n  \\<lbrakk>price_structure der matur \\<pi> pr;\n   replicating_portfolio pf der matur; coincides_on Mkt Mkt2 (stocks Mkt);\n   prices Mkt2 x = pr; x \\<notin> stocks Mkt;\n   diff_inv =\n   (\\<pi> - initial_value pf) / constant_image (prices Mkt pos_stock 0);\n   diff_inv \\<noteq> 0;\n   arb_pf = (\\<lambda>x n w. 0)\n   (x := \\<lambda>n w. - 1, pos_stock := \\<lambda>n w. diff_inv);\n   contr_pf = qty_sum arb_pf pf\\<rbrakk>\n  \\<Longrightarrow> self_financing Mkt2 contr_pf\n  \\<lbrakk>price_structure der matur \\<pi> pr;\n   replicating_portfolio pf der matur; coincides_on Mkt Mkt2 (stocks Mkt);\n   prices Mkt2 x = pr; x \\<notin> stocks Mkt;\n   diff_inv =\n   (\\<pi> - initial_value pf) / constant_image (prices Mkt pos_stock 0);\n   diff_inv \\<noteq> 0;\n   arb_pf = (\\<lambda>x n w. 0)\n   (x := \\<lambda>n w. - 1, pos_stock := \\<lambda>n w. diff_inv);\n   contr_pf = qty_sum arb_pf pf\\<rbrakk>\n  \\<Longrightarrow> trading_strategy contr_pf\n  \\<lbrakk>price_structure der matur \\<pi> pr;\n   replicating_portfolio pf der matur; coincides_on Mkt Mkt2 (stocks Mkt);\n   prices Mkt2 x = pr; x \\<notin> stocks Mkt;\n   diff_inv =\n   (\\<pi> - initial_value pf) / constant_image (prices Mkt pos_stock 0);\n   diff_inv \\<noteq> 0;\n   arb_pf = (\\<lambda>x n w. 0)\n   (x := \\<lambda>n w. - 1, pos_stock := \\<lambda>n w. diff_inv);\n   contr_pf = qty_sum arb_pf pf\\<rbrakk>\n  \\<Longrightarrow> \\<forall>w\\<in>space M.\n                       cls_val_process Mkt2 contr_pf 0 w = 0\n  \\<lbrakk>price_structure der matur \\<pi> pr;\n   replicating_portfolio pf der matur; coincides_on Mkt Mkt2 (stocks Mkt);\n   prices Mkt2 x = pr; x \\<notin> stocks Mkt;\n   diff_inv =\n   (\\<pi> - initial_value pf) / constant_image (prices Mkt pos_stock 0);\n   diff_inv \\<noteq> 0;\n   arb_pf = (\\<lambda>x n w. 0)\n   (x := \\<lambda>n w. - 1, pos_stock := \\<lambda>n w. diff_inv);\n   contr_pf = qty_sum arb_pf pf\\<rbrakk>\n  \\<Longrightarrow> 0 < diff_inv \\<longrightarrow>\n                    (AE w in M. 0 < cls_val_process Mkt2 contr_pf matur w)\n  \\<lbrakk>price_structure der matur \\<pi> pr;\n   replicating_portfolio pf der matur; coincides_on Mkt Mkt2 (stocks Mkt);\n   prices Mkt2 x = pr; x \\<notin> stocks Mkt;\n   diff_inv =\n   (\\<pi> - initial_value pf) / constant_image (prices Mkt pos_stock 0);\n   diff_inv \\<noteq> 0;\n   arb_pf = (\\<lambda>x n w. 0)\n   (x := \\<lambda>n w. - 1, pos_stock := \\<lambda>n w. diff_inv);\n   contr_pf = qty_sum arb_pf pf\\<rbrakk>\n  \\<Longrightarrow> diff_inv < 0 \\<longrightarrow>\n                    (AE w in M. cls_val_process Mkt2 contr_pf matur w < 0)\n  \\<lbrakk>price_structure der matur \\<pi> pr;\n   replicating_portfolio pf der matur; coincides_on Mkt Mkt2 (stocks Mkt);\n   prices Mkt2 x = pr; x \\<notin> stocks Mkt;\n   diff_inv =\n   (\\<pi> - initial_value pf) / constant_image (prices Mkt pos_stock 0);\n   diff_inv \\<noteq> 0;\n   arb_pf = (\\<lambda>x n w. 0)\n   (x := \\<lambda>n w. - 1, pos_stock := \\<lambda>n w. diff_inv);\n   contr_pf = qty_sum arb_pf pf\\<rbrakk>\n  \\<Longrightarrow> support_set arb_pf = {x, pos_stock}\n  \\<lbrakk>price_structure der matur \\<pi> pr;\n   replicating_portfolio pf der matur; coincides_on Mkt Mkt2 (stocks Mkt);\n   prices Mkt2 x = pr; x \\<notin> stocks Mkt;\n   diff_inv =\n   (\\<pi> - initial_value pf) / constant_image (prices Mkt pos_stock 0);\n   diff_inv \\<noteq> 0;\n   arb_pf = (\\<lambda>x n w. 0)\n   (x := \\<lambda>n w. - 1, pos_stock := \\<lambda>n w. diff_inv);\n   contr_pf = qty_sum arb_pf pf\\<rbrakk>\n  \\<Longrightarrow> portfolio contr_pf\n\ngoal (1 subgoal):\n 1. 0 \\<noteq> diff_inv \\<longrightarrow> trading_strategy contr_pf", "using  \\<open>coincides_on Mkt Mkt2 (stocks Mkt)\\<close> \\<open>price_structure der matur \\<pi> pr\\<close> \\<open>prices Mkt2 x = pr\\<close>\n        \\<open>x \\<notin> stocks Mkt\\<close> arb_pf_def assms(1) contr_pf_def diff_inv_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>price_structure der matur \\<pi> pr;\n   replicating_portfolio pf der matur; coincides_on Mkt Mkt2 (stocks Mkt);\n   prices Mkt2 x = pr; x \\<notin> stocks Mkt;\n   diff_inv =\n   (\\<pi> - initial_value pf) / constant_image (prices Mkt pos_stock 0);\n   diff_inv \\<noteq> 0;\n   arb_pf = (\\<lambda>x n w. 0)\n   (x := \\<lambda>n w. - 1, pos_stock := \\<lambda>n w. diff_inv);\n   contr_pf = qty_sum arb_pf pf\\<rbrakk>\n  \\<Longrightarrow> self_financing Mkt2 contr_pf\n  \\<lbrakk>price_structure der matur \\<pi> pr;\n   replicating_portfolio pf der matur; coincides_on Mkt Mkt2 (stocks Mkt);\n   prices Mkt2 x = pr; x \\<notin> stocks Mkt;\n   diff_inv =\n   (\\<pi> - initial_value pf) / constant_image (prices Mkt pos_stock 0);\n   diff_inv \\<noteq> 0;\n   arb_pf = (\\<lambda>x n w. 0)\n   (x := \\<lambda>n w. - 1, pos_stock := \\<lambda>n w. diff_inv);\n   contr_pf = qty_sum arb_pf pf\\<rbrakk>\n  \\<Longrightarrow> trading_strategy contr_pf\n  \\<lbrakk>price_structure der matur \\<pi> pr;\n   replicating_portfolio pf der matur; coincides_on Mkt Mkt2 (stocks Mkt);\n   prices Mkt2 x = pr; x \\<notin> stocks Mkt;\n   diff_inv =\n   (\\<pi> - initial_value pf) / constant_image (prices Mkt pos_stock 0);\n   diff_inv \\<noteq> 0;\n   arb_pf = (\\<lambda>x n w. 0)\n   (x := \\<lambda>n w. - 1, pos_stock := \\<lambda>n w. diff_inv);\n   contr_pf = qty_sum arb_pf pf\\<rbrakk>\n  \\<Longrightarrow> \\<forall>w\\<in>space M.\n                       cls_val_process Mkt2 contr_pf 0 w = 0\n  \\<lbrakk>price_structure der matur \\<pi> pr;\n   replicating_portfolio pf der matur; coincides_on Mkt Mkt2 (stocks Mkt);\n   prices Mkt2 x = pr; x \\<notin> stocks Mkt;\n   diff_inv =\n   (\\<pi> - initial_value pf) / constant_image (prices Mkt pos_stock 0);\n   diff_inv \\<noteq> 0;\n   arb_pf = (\\<lambda>x n w. 0)\n   (x := \\<lambda>n w. - 1, pos_stock := \\<lambda>n w. diff_inv);\n   contr_pf = qty_sum arb_pf pf\\<rbrakk>\n  \\<Longrightarrow> 0 < diff_inv \\<longrightarrow>\n                    (AE w in M. 0 < cls_val_process Mkt2 contr_pf matur w)\n  \\<lbrakk>price_structure der matur \\<pi> pr;\n   replicating_portfolio pf der matur; coincides_on Mkt Mkt2 (stocks Mkt);\n   prices Mkt2 x = pr; x \\<notin> stocks Mkt;\n   diff_inv =\n   (\\<pi> - initial_value pf) / constant_image (prices Mkt pos_stock 0);\n   diff_inv \\<noteq> 0;\n   arb_pf = (\\<lambda>x n w. 0)\n   (x := \\<lambda>n w. - 1, pos_stock := \\<lambda>n w. diff_inv);\n   contr_pf = qty_sum arb_pf pf\\<rbrakk>\n  \\<Longrightarrow> diff_inv < 0 \\<longrightarrow>\n                    (AE w in M. cls_val_process Mkt2 contr_pf matur w < 0)\n  \\<lbrakk>price_structure der matur \\<pi> pr;\n   replicating_portfolio pf der matur; coincides_on Mkt Mkt2 (stocks Mkt);\n   prices Mkt2 x = pr; x \\<notin> stocks Mkt;\n   diff_inv =\n   (\\<pi> - initial_value pf) / constant_image (prices Mkt pos_stock 0);\n   diff_inv \\<noteq> 0;\n   arb_pf = (\\<lambda>x n w. 0)\n   (x := \\<lambda>n w. - 1, pos_stock := \\<lambda>n w. diff_inv);\n   contr_pf = qty_sum arb_pf pf\\<rbrakk>\n  \\<Longrightarrow> support_set arb_pf = {x, pos_stock}\n  \\<lbrakk>price_structure der matur \\<pi> pr;\n   replicating_portfolio pf der matur; coincides_on Mkt Mkt2 (stocks Mkt);\n   prices Mkt2 x = pr; x \\<notin> stocks Mkt;\n   diff_inv =\n   (\\<pi> - initial_value pf) / constant_image (prices Mkt pos_stock 0);\n   diff_inv \\<noteq> 0;\n   arb_pf = (\\<lambda>x n w. 0)\n   (x := \\<lambda>n w. - 1, pos_stock := \\<lambda>n w. diff_inv);\n   contr_pf = qty_sum arb_pf pf\\<rbrakk>\n  \\<Longrightarrow> portfolio contr_pf\n  coincides_on Mkt Mkt2 (stocks Mkt)\n  price_structure der matur \\<pi> pr\n  prices Mkt2 x = pr\n  x \\<notin> stocks Mkt\n  arb_pf = (\\<lambda>x n w. 0)\n  (x := \\<lambda>n w. - 1, pos_stock := \\<lambda>n w. diff_inv)\n  replicating_portfolio pf der matur\n  contr_pf = qty_sum arb_pf pf\n  diff_inv =\n  (\\<pi> - initial_value pf) / constant_image (prices Mkt pos_stock 0)\n\ngoal (1 subgoal):\n 1. 0 \\<noteq> diff_inv \\<longrightarrow> trading_strategy contr_pf", "by blast"], ["proof (state)\nthis:\n  0 \\<noteq> diff_inv \\<longrightarrow> trading_strategy contr_pf\n\ngoal (1 subgoal):\n 1. \\<pi> = initial_value pf", "have 3:\"0 \\<noteq> diff_inv \\<longrightarrow> (\\<forall>w\\<in> space M. cls_val_process Mkt2 contr_pf 0 w = 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<noteq> diff_inv \\<longrightarrow>\n    (\\<forall>w\\<in>space M. cls_val_process Mkt2 contr_pf 0 w = 0)", "using arbitrage_portfolio_properties[of der matur \\<pi> pr pf Mkt2 x diff_inv arb_pf contr_pf]"], ["proof (prove)\nusing this:\n  \\<lbrakk>price_structure der matur \\<pi> pr;\n   replicating_portfolio pf der matur; coincides_on Mkt Mkt2 (stocks Mkt);\n   prices Mkt2 x = pr; x \\<notin> stocks Mkt;\n   diff_inv =\n   (\\<pi> - initial_value pf) / constant_image (prices Mkt pos_stock 0);\n   diff_inv \\<noteq> 0;\n   arb_pf = (\\<lambda>x n w. 0)\n   (x := \\<lambda>n w. - 1, pos_stock := \\<lambda>n w. diff_inv);\n   contr_pf = qty_sum arb_pf pf\\<rbrakk>\n  \\<Longrightarrow> self_financing Mkt2 contr_pf\n  \\<lbrakk>price_structure der matur \\<pi> pr;\n   replicating_portfolio pf der matur; coincides_on Mkt Mkt2 (stocks Mkt);\n   prices Mkt2 x = pr; x \\<notin> stocks Mkt;\n   diff_inv =\n   (\\<pi> - initial_value pf) / constant_image (prices Mkt pos_stock 0);\n   diff_inv \\<noteq> 0;\n   arb_pf = (\\<lambda>x n w. 0)\n   (x := \\<lambda>n w. - 1, pos_stock := \\<lambda>n w. diff_inv);\n   contr_pf = qty_sum arb_pf pf\\<rbrakk>\n  \\<Longrightarrow> trading_strategy contr_pf\n  \\<lbrakk>price_structure der matur \\<pi> pr;\n   replicating_portfolio pf der matur; coincides_on Mkt Mkt2 (stocks Mkt);\n   prices Mkt2 x = pr; x \\<notin> stocks Mkt;\n   diff_inv =\n   (\\<pi> - initial_value pf) / constant_image (prices Mkt pos_stock 0);\n   diff_inv \\<noteq> 0;\n   arb_pf = (\\<lambda>x n w. 0)\n   (x := \\<lambda>n w. - 1, pos_stock := \\<lambda>n w. diff_inv);\n   contr_pf = qty_sum arb_pf pf\\<rbrakk>\n  \\<Longrightarrow> \\<forall>w\\<in>space M.\n                       cls_val_process Mkt2 contr_pf 0 w = 0\n  \\<lbrakk>price_structure der matur \\<pi> pr;\n   replicating_portfolio pf der matur; coincides_on Mkt Mkt2 (stocks Mkt);\n   prices Mkt2 x = pr; x \\<notin> stocks Mkt;\n   diff_inv =\n   (\\<pi> - initial_value pf) / constant_image (prices Mkt pos_stock 0);\n   diff_inv \\<noteq> 0;\n   arb_pf = (\\<lambda>x n w. 0)\n   (x := \\<lambda>n w. - 1, pos_stock := \\<lambda>n w. diff_inv);\n   contr_pf = qty_sum arb_pf pf\\<rbrakk>\n  \\<Longrightarrow> 0 < diff_inv \\<longrightarrow>\n                    (AE w in M. 0 < cls_val_process Mkt2 contr_pf matur w)\n  \\<lbrakk>price_structure der matur \\<pi> pr;\n   replicating_portfolio pf der matur; coincides_on Mkt Mkt2 (stocks Mkt);\n   prices Mkt2 x = pr; x \\<notin> stocks Mkt;\n   diff_inv =\n   (\\<pi> - initial_value pf) / constant_image (prices Mkt pos_stock 0);\n   diff_inv \\<noteq> 0;\n   arb_pf = (\\<lambda>x n w. 0)\n   (x := \\<lambda>n w. - 1, pos_stock := \\<lambda>n w. diff_inv);\n   contr_pf = qty_sum arb_pf pf\\<rbrakk>\n  \\<Longrightarrow> diff_inv < 0 \\<longrightarrow>\n                    (AE w in M. cls_val_process Mkt2 contr_pf matur w < 0)\n  \\<lbrakk>price_structure der matur \\<pi> pr;\n   replicating_portfolio pf der matur; coincides_on Mkt Mkt2 (stocks Mkt);\n   prices Mkt2 x = pr; x \\<notin> stocks Mkt;\n   diff_inv =\n   (\\<pi> - initial_value pf) / constant_image (prices Mkt pos_stock 0);\n   diff_inv \\<noteq> 0;\n   arb_pf = (\\<lambda>x n w. 0)\n   (x := \\<lambda>n w. - 1, pos_stock := \\<lambda>n w. diff_inv);\n   contr_pf = qty_sum arb_pf pf\\<rbrakk>\n  \\<Longrightarrow> support_set arb_pf = {x, pos_stock}\n  \\<lbrakk>price_structure der matur \\<pi> pr;\n   replicating_portfolio pf der matur; coincides_on Mkt Mkt2 (stocks Mkt);\n   prices Mkt2 x = pr; x \\<notin> stocks Mkt;\n   diff_inv =\n   (\\<pi> - initial_value pf) / constant_image (prices Mkt pos_stock 0);\n   diff_inv \\<noteq> 0;\n   arb_pf = (\\<lambda>x n w. 0)\n   (x := \\<lambda>n w. - 1, pos_stock := \\<lambda>n w. diff_inv);\n   contr_pf = qty_sum arb_pf pf\\<rbrakk>\n  \\<Longrightarrow> portfolio contr_pf\n\ngoal (1 subgoal):\n 1. 0 \\<noteq> diff_inv \\<longrightarrow>\n    (\\<forall>w\\<in>space M. cls_val_process Mkt2 contr_pf 0 w = 0)", "using  \\<open>coincides_on Mkt Mkt2 (stocks Mkt)\\<close> \\<open>price_structure der matur \\<pi> pr\\<close> \\<open>prices Mkt2 x = pr\\<close>\n        \\<open>x \\<notin> stocks Mkt\\<close> arb_pf_def assms(1) contr_pf_def diff_inv_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>price_structure der matur \\<pi> pr;\n   replicating_portfolio pf der matur; coincides_on Mkt Mkt2 (stocks Mkt);\n   prices Mkt2 x = pr; x \\<notin> stocks Mkt;\n   diff_inv =\n   (\\<pi> - initial_value pf) / constant_image (prices Mkt pos_stock 0);\n   diff_inv \\<noteq> 0;\n   arb_pf = (\\<lambda>x n w. 0)\n   (x := \\<lambda>n w. - 1, pos_stock := \\<lambda>n w. diff_inv);\n   contr_pf = qty_sum arb_pf pf\\<rbrakk>\n  \\<Longrightarrow> self_financing Mkt2 contr_pf\n  \\<lbrakk>price_structure der matur \\<pi> pr;\n   replicating_portfolio pf der matur; coincides_on Mkt Mkt2 (stocks Mkt);\n   prices Mkt2 x = pr; x \\<notin> stocks Mkt;\n   diff_inv =\n   (\\<pi> - initial_value pf) / constant_image (prices Mkt pos_stock 0);\n   diff_inv \\<noteq> 0;\n   arb_pf = (\\<lambda>x n w. 0)\n   (x := \\<lambda>n w. - 1, pos_stock := \\<lambda>n w. diff_inv);\n   contr_pf = qty_sum arb_pf pf\\<rbrakk>\n  \\<Longrightarrow> trading_strategy contr_pf\n  \\<lbrakk>price_structure der matur \\<pi> pr;\n   replicating_portfolio pf der matur; coincides_on Mkt Mkt2 (stocks Mkt);\n   prices Mkt2 x = pr; x \\<notin> stocks Mkt;\n   diff_inv =\n   (\\<pi> - initial_value pf) / constant_image (prices Mkt pos_stock 0);\n   diff_inv \\<noteq> 0;\n   arb_pf = (\\<lambda>x n w. 0)\n   (x := \\<lambda>n w. - 1, pos_stock := \\<lambda>n w. diff_inv);\n   contr_pf = qty_sum arb_pf pf\\<rbrakk>\n  \\<Longrightarrow> \\<forall>w\\<in>space M.\n                       cls_val_process Mkt2 contr_pf 0 w = 0\n  \\<lbrakk>price_structure der matur \\<pi> pr;\n   replicating_portfolio pf der matur; coincides_on Mkt Mkt2 (stocks Mkt);\n   prices Mkt2 x = pr; x \\<notin> stocks Mkt;\n   diff_inv =\n   (\\<pi> - initial_value pf) / constant_image (prices Mkt pos_stock 0);\n   diff_inv \\<noteq> 0;\n   arb_pf = (\\<lambda>x n w. 0)\n   (x := \\<lambda>n w. - 1, pos_stock := \\<lambda>n w. diff_inv);\n   contr_pf = qty_sum arb_pf pf\\<rbrakk>\n  \\<Longrightarrow> 0 < diff_inv \\<longrightarrow>\n                    (AE w in M. 0 < cls_val_process Mkt2 contr_pf matur w)\n  \\<lbrakk>price_structure der matur \\<pi> pr;\n   replicating_portfolio pf der matur; coincides_on Mkt Mkt2 (stocks Mkt);\n   prices Mkt2 x = pr; x \\<notin> stocks Mkt;\n   diff_inv =\n   (\\<pi> - initial_value pf) / constant_image (prices Mkt pos_stock 0);\n   diff_inv \\<noteq> 0;\n   arb_pf = (\\<lambda>x n w. 0)\n   (x := \\<lambda>n w. - 1, pos_stock := \\<lambda>n w. diff_inv);\n   contr_pf = qty_sum arb_pf pf\\<rbrakk>\n  \\<Longrightarrow> diff_inv < 0 \\<longrightarrow>\n                    (AE w in M. cls_val_process Mkt2 contr_pf matur w < 0)\n  \\<lbrakk>price_structure der matur \\<pi> pr;\n   replicating_portfolio pf der matur; coincides_on Mkt Mkt2 (stocks Mkt);\n   prices Mkt2 x = pr; x \\<notin> stocks Mkt;\n   diff_inv =\n   (\\<pi> - initial_value pf) / constant_image (prices Mkt pos_stock 0);\n   diff_inv \\<noteq> 0;\n   arb_pf = (\\<lambda>x n w. 0)\n   (x := \\<lambda>n w. - 1, pos_stock := \\<lambda>n w. diff_inv);\n   contr_pf = qty_sum arb_pf pf\\<rbrakk>\n  \\<Longrightarrow> support_set arb_pf = {x, pos_stock}\n  \\<lbrakk>price_structure der matur \\<pi> pr;\n   replicating_portfolio pf der matur; coincides_on Mkt Mkt2 (stocks Mkt);\n   prices Mkt2 x = pr; x \\<notin> stocks Mkt;\n   diff_inv =\n   (\\<pi> - initial_value pf) / constant_image (prices Mkt pos_stock 0);\n   diff_inv \\<noteq> 0;\n   arb_pf = (\\<lambda>x n w. 0)\n   (x := \\<lambda>n w. - 1, pos_stock := \\<lambda>n w. diff_inv);\n   contr_pf = qty_sum arb_pf pf\\<rbrakk>\n  \\<Longrightarrow> portfolio contr_pf\n  coincides_on Mkt Mkt2 (stocks Mkt)\n  price_structure der matur \\<pi> pr\n  prices Mkt2 x = pr\n  x \\<notin> stocks Mkt\n  arb_pf = (\\<lambda>x n w. 0)\n  (x := \\<lambda>n w. - 1, pos_stock := \\<lambda>n w. diff_inv)\n  replicating_portfolio pf der matur\n  contr_pf = qty_sum arb_pf pf\n  diff_inv =\n  (\\<pi> - initial_value pf) / constant_image (prices Mkt pos_stock 0)\n\ngoal (1 subgoal):\n 1. 0 \\<noteq> diff_inv \\<longrightarrow>\n    (\\<forall>w\\<in>space M. cls_val_process Mkt2 contr_pf 0 w = 0)", "by blast"], ["proof (state)\nthis:\n  0 \\<noteq> diff_inv \\<longrightarrow>\n  (\\<forall>w\\<in>space M. cls_val_process Mkt2 contr_pf 0 w = 0)\n\ngoal (1 subgoal):\n 1. \\<pi> = initial_value pf", "have 4: \"0 < diff_inv \\<longrightarrow> (AE w in M. 0 < cls_val_process Mkt2 contr_pf matur w)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < diff_inv \\<longrightarrow>\n    (AE w in M. 0 < cls_val_process Mkt2 contr_pf matur w)", "using arbitrage_portfolio_properties[of der matur \\<pi> pr pf Mkt2 x diff_inv arb_pf contr_pf]"], ["proof (prove)\nusing this:\n  \\<lbrakk>price_structure der matur \\<pi> pr;\n   replicating_portfolio pf der matur; coincides_on Mkt Mkt2 (stocks Mkt);\n   prices Mkt2 x = pr; x \\<notin> stocks Mkt;\n   diff_inv =\n   (\\<pi> - initial_value pf) / constant_image (prices Mkt pos_stock 0);\n   diff_inv \\<noteq> 0;\n   arb_pf = (\\<lambda>x n w. 0)\n   (x := \\<lambda>n w. - 1, pos_stock := \\<lambda>n w. diff_inv);\n   contr_pf = qty_sum arb_pf pf\\<rbrakk>\n  \\<Longrightarrow> self_financing Mkt2 contr_pf\n  \\<lbrakk>price_structure der matur \\<pi> pr;\n   replicating_portfolio pf der matur; coincides_on Mkt Mkt2 (stocks Mkt);\n   prices Mkt2 x = pr; x \\<notin> stocks Mkt;\n   diff_inv =\n   (\\<pi> - initial_value pf) / constant_image (prices Mkt pos_stock 0);\n   diff_inv \\<noteq> 0;\n   arb_pf = (\\<lambda>x n w. 0)\n   (x := \\<lambda>n w. - 1, pos_stock := \\<lambda>n w. diff_inv);\n   contr_pf = qty_sum arb_pf pf\\<rbrakk>\n  \\<Longrightarrow> trading_strategy contr_pf\n  \\<lbrakk>price_structure der matur \\<pi> pr;\n   replicating_portfolio pf der matur; coincides_on Mkt Mkt2 (stocks Mkt);\n   prices Mkt2 x = pr; x \\<notin> stocks Mkt;\n   diff_inv =\n   (\\<pi> - initial_value pf) / constant_image (prices Mkt pos_stock 0);\n   diff_inv \\<noteq> 0;\n   arb_pf = (\\<lambda>x n w. 0)\n   (x := \\<lambda>n w. - 1, pos_stock := \\<lambda>n w. diff_inv);\n   contr_pf = qty_sum arb_pf pf\\<rbrakk>\n  \\<Longrightarrow> \\<forall>w\\<in>space M.\n                       cls_val_process Mkt2 contr_pf 0 w = 0\n  \\<lbrakk>price_structure der matur \\<pi> pr;\n   replicating_portfolio pf der matur; coincides_on Mkt Mkt2 (stocks Mkt);\n   prices Mkt2 x = pr; x \\<notin> stocks Mkt;\n   diff_inv =\n   (\\<pi> - initial_value pf) / constant_image (prices Mkt pos_stock 0);\n   diff_inv \\<noteq> 0;\n   arb_pf = (\\<lambda>x n w. 0)\n   (x := \\<lambda>n w. - 1, pos_stock := \\<lambda>n w. diff_inv);\n   contr_pf = qty_sum arb_pf pf\\<rbrakk>\n  \\<Longrightarrow> 0 < diff_inv \\<longrightarrow>\n                    (AE w in M. 0 < cls_val_process Mkt2 contr_pf matur w)\n  \\<lbrakk>price_structure der matur \\<pi> pr;\n   replicating_portfolio pf der matur; coincides_on Mkt Mkt2 (stocks Mkt);\n   prices Mkt2 x = pr; x \\<notin> stocks Mkt;\n   diff_inv =\n   (\\<pi> - initial_value pf) / constant_image (prices Mkt pos_stock 0);\n   diff_inv \\<noteq> 0;\n   arb_pf = (\\<lambda>x n w. 0)\n   (x := \\<lambda>n w. - 1, pos_stock := \\<lambda>n w. diff_inv);\n   contr_pf = qty_sum arb_pf pf\\<rbrakk>\n  \\<Longrightarrow> diff_inv < 0 \\<longrightarrow>\n                    (AE w in M. cls_val_process Mkt2 contr_pf matur w < 0)\n  \\<lbrakk>price_structure der matur \\<pi> pr;\n   replicating_portfolio pf der matur; coincides_on Mkt Mkt2 (stocks Mkt);\n   prices Mkt2 x = pr; x \\<notin> stocks Mkt;\n   diff_inv =\n   (\\<pi> - initial_value pf) / constant_image (prices Mkt pos_stock 0);\n   diff_inv \\<noteq> 0;\n   arb_pf = (\\<lambda>x n w. 0)\n   (x := \\<lambda>n w. - 1, pos_stock := \\<lambda>n w. diff_inv);\n   contr_pf = qty_sum arb_pf pf\\<rbrakk>\n  \\<Longrightarrow> support_set arb_pf = {x, pos_stock}\n  \\<lbrakk>price_structure der matur \\<pi> pr;\n   replicating_portfolio pf der matur; coincides_on Mkt Mkt2 (stocks Mkt);\n   prices Mkt2 x = pr; x \\<notin> stocks Mkt;\n   diff_inv =\n   (\\<pi> - initial_value pf) / constant_image (prices Mkt pos_stock 0);\n   diff_inv \\<noteq> 0;\n   arb_pf = (\\<lambda>x n w. 0)\n   (x := \\<lambda>n w. - 1, pos_stock := \\<lambda>n w. diff_inv);\n   contr_pf = qty_sum arb_pf pf\\<rbrakk>\n  \\<Longrightarrow> portfolio contr_pf\n\ngoal (1 subgoal):\n 1. 0 < diff_inv \\<longrightarrow>\n    (AE w in M. 0 < cls_val_process Mkt2 contr_pf matur w)", "using  \\<open>coincides_on Mkt Mkt2 (stocks Mkt)\\<close> \\<open>price_structure der matur \\<pi> pr\\<close> \\<open>prices Mkt2 x = pr\\<close>\n        \\<open>x \\<notin> stocks Mkt\\<close> arb_pf_def assms(1) contr_pf_def diff_inv_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>price_structure der matur \\<pi> pr;\n   replicating_portfolio pf der matur; coincides_on Mkt Mkt2 (stocks Mkt);\n   prices Mkt2 x = pr; x \\<notin> stocks Mkt;\n   diff_inv =\n   (\\<pi> - initial_value pf) / constant_image (prices Mkt pos_stock 0);\n   diff_inv \\<noteq> 0;\n   arb_pf = (\\<lambda>x n w. 0)\n   (x := \\<lambda>n w. - 1, pos_stock := \\<lambda>n w. diff_inv);\n   contr_pf = qty_sum arb_pf pf\\<rbrakk>\n  \\<Longrightarrow> self_financing Mkt2 contr_pf\n  \\<lbrakk>price_structure der matur \\<pi> pr;\n   replicating_portfolio pf der matur; coincides_on Mkt Mkt2 (stocks Mkt);\n   prices Mkt2 x = pr; x \\<notin> stocks Mkt;\n   diff_inv =\n   (\\<pi> - initial_value pf) / constant_image (prices Mkt pos_stock 0);\n   diff_inv \\<noteq> 0;\n   arb_pf = (\\<lambda>x n w. 0)\n   (x := \\<lambda>n w. - 1, pos_stock := \\<lambda>n w. diff_inv);\n   contr_pf = qty_sum arb_pf pf\\<rbrakk>\n  \\<Longrightarrow> trading_strategy contr_pf\n  \\<lbrakk>price_structure der matur \\<pi> pr;\n   replicating_portfolio pf der matur; coincides_on Mkt Mkt2 (stocks Mkt);\n   prices Mkt2 x = pr; x \\<notin> stocks Mkt;\n   diff_inv =\n   (\\<pi> - initial_value pf) / constant_image (prices Mkt pos_stock 0);\n   diff_inv \\<noteq> 0;\n   arb_pf = (\\<lambda>x n w. 0)\n   (x := \\<lambda>n w. - 1, pos_stock := \\<lambda>n w. diff_inv);\n   contr_pf = qty_sum arb_pf pf\\<rbrakk>\n  \\<Longrightarrow> \\<forall>w\\<in>space M.\n                       cls_val_process Mkt2 contr_pf 0 w = 0\n  \\<lbrakk>price_structure der matur \\<pi> pr;\n   replicating_portfolio pf der matur; coincides_on Mkt Mkt2 (stocks Mkt);\n   prices Mkt2 x = pr; x \\<notin> stocks Mkt;\n   diff_inv =\n   (\\<pi> - initial_value pf) / constant_image (prices Mkt pos_stock 0);\n   diff_inv \\<noteq> 0;\n   arb_pf = (\\<lambda>x n w. 0)\n   (x := \\<lambda>n w. - 1, pos_stock := \\<lambda>n w. diff_inv);\n   contr_pf = qty_sum arb_pf pf\\<rbrakk>\n  \\<Longrightarrow> 0 < diff_inv \\<longrightarrow>\n                    (AE w in M. 0 < cls_val_process Mkt2 contr_pf matur w)\n  \\<lbrakk>price_structure der matur \\<pi> pr;\n   replicating_portfolio pf der matur; coincides_on Mkt Mkt2 (stocks Mkt);\n   prices Mkt2 x = pr; x \\<notin> stocks Mkt;\n   diff_inv =\n   (\\<pi> - initial_value pf) / constant_image (prices Mkt pos_stock 0);\n   diff_inv \\<noteq> 0;\n   arb_pf = (\\<lambda>x n w. 0)\n   (x := \\<lambda>n w. - 1, pos_stock := \\<lambda>n w. diff_inv);\n   contr_pf = qty_sum arb_pf pf\\<rbrakk>\n  \\<Longrightarrow> diff_inv < 0 \\<longrightarrow>\n                    (AE w in M. cls_val_process Mkt2 contr_pf matur w < 0)\n  \\<lbrakk>price_structure der matur \\<pi> pr;\n   replicating_portfolio pf der matur; coincides_on Mkt Mkt2 (stocks Mkt);\n   prices Mkt2 x = pr; x \\<notin> stocks Mkt;\n   diff_inv =\n   (\\<pi> - initial_value pf) / constant_image (prices Mkt pos_stock 0);\n   diff_inv \\<noteq> 0;\n   arb_pf = (\\<lambda>x n w. 0)\n   (x := \\<lambda>n w. - 1, pos_stock := \\<lambda>n w. diff_inv);\n   contr_pf = qty_sum arb_pf pf\\<rbrakk>\n  \\<Longrightarrow> support_set arb_pf = {x, pos_stock}\n  \\<lbrakk>price_structure der matur \\<pi> pr;\n   replicating_portfolio pf der matur; coincides_on Mkt Mkt2 (stocks Mkt);\n   prices Mkt2 x = pr; x \\<notin> stocks Mkt;\n   diff_inv =\n   (\\<pi> - initial_value pf) / constant_image (prices Mkt pos_stock 0);\n   diff_inv \\<noteq> 0;\n   arb_pf = (\\<lambda>x n w. 0)\n   (x := \\<lambda>n w. - 1, pos_stock := \\<lambda>n w. diff_inv);\n   contr_pf = qty_sum arb_pf pf\\<rbrakk>\n  \\<Longrightarrow> portfolio contr_pf\n  coincides_on Mkt Mkt2 (stocks Mkt)\n  price_structure der matur \\<pi> pr\n  prices Mkt2 x = pr\n  x \\<notin> stocks Mkt\n  arb_pf = (\\<lambda>x n w. 0)\n  (x := \\<lambda>n w. - 1, pos_stock := \\<lambda>n w. diff_inv)\n  replicating_portfolio pf der matur\n  contr_pf = qty_sum arb_pf pf\n  diff_inv =\n  (\\<pi> - initial_value pf) / constant_image (prices Mkt pos_stock 0)\n\ngoal (1 subgoal):\n 1. 0 < diff_inv \\<longrightarrow>\n    (AE w in M. 0 < cls_val_process Mkt2 contr_pf matur w)", "by blast"], ["proof (state)\nthis:\n  0 < diff_inv \\<longrightarrow>\n  (AE w in M. 0 < cls_val_process Mkt2 contr_pf matur w)\n\ngoal (1 subgoal):\n 1. \\<pi> = initial_value pf", "have 5: \"diff_inv < 0 \\<longrightarrow> (AE w in M. 0 > cls_val_process Mkt2 contr_pf matur w)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. diff_inv < 0 \\<longrightarrow>\n    (AE w in M. cls_val_process Mkt2 contr_pf matur w < 0)", "using arbitrage_portfolio_properties[of der matur \\<pi> pr pf Mkt2 x diff_inv arb_pf contr_pf]"], ["proof (prove)\nusing this:\n  \\<lbrakk>price_structure der matur \\<pi> pr;\n   replicating_portfolio pf der matur; coincides_on Mkt Mkt2 (stocks Mkt);\n   prices Mkt2 x = pr; x \\<notin> stocks Mkt;\n   diff_inv =\n   (\\<pi> - initial_value pf) / constant_image (prices Mkt pos_stock 0);\n   diff_inv \\<noteq> 0;\n   arb_pf = (\\<lambda>x n w. 0)\n   (x := \\<lambda>n w. - 1, pos_stock := \\<lambda>n w. diff_inv);\n   contr_pf = qty_sum arb_pf pf\\<rbrakk>\n  \\<Longrightarrow> self_financing Mkt2 contr_pf\n  \\<lbrakk>price_structure der matur \\<pi> pr;\n   replicating_portfolio pf der matur; coincides_on Mkt Mkt2 (stocks Mkt);\n   prices Mkt2 x = pr; x \\<notin> stocks Mkt;\n   diff_inv =\n   (\\<pi> - initial_value pf) / constant_image (prices Mkt pos_stock 0);\n   diff_inv \\<noteq> 0;\n   arb_pf = (\\<lambda>x n w. 0)\n   (x := \\<lambda>n w. - 1, pos_stock := \\<lambda>n w. diff_inv);\n   contr_pf = qty_sum arb_pf pf\\<rbrakk>\n  \\<Longrightarrow> trading_strategy contr_pf\n  \\<lbrakk>price_structure der matur \\<pi> pr;\n   replicating_portfolio pf der matur; coincides_on Mkt Mkt2 (stocks Mkt);\n   prices Mkt2 x = pr; x \\<notin> stocks Mkt;\n   diff_inv =\n   (\\<pi> - initial_value pf) / constant_image (prices Mkt pos_stock 0);\n   diff_inv \\<noteq> 0;\n   arb_pf = (\\<lambda>x n w. 0)\n   (x := \\<lambda>n w. - 1, pos_stock := \\<lambda>n w. diff_inv);\n   contr_pf = qty_sum arb_pf pf\\<rbrakk>\n  \\<Longrightarrow> \\<forall>w\\<in>space M.\n                       cls_val_process Mkt2 contr_pf 0 w = 0\n  \\<lbrakk>price_structure der matur \\<pi> pr;\n   replicating_portfolio pf der matur; coincides_on Mkt Mkt2 (stocks Mkt);\n   prices Mkt2 x = pr; x \\<notin> stocks Mkt;\n   diff_inv =\n   (\\<pi> - initial_value pf) / constant_image (prices Mkt pos_stock 0);\n   diff_inv \\<noteq> 0;\n   arb_pf = (\\<lambda>x n w. 0)\n   (x := \\<lambda>n w. - 1, pos_stock := \\<lambda>n w. diff_inv);\n   contr_pf = qty_sum arb_pf pf\\<rbrakk>\n  \\<Longrightarrow> 0 < diff_inv \\<longrightarrow>\n                    (AE w in M. 0 < cls_val_process Mkt2 contr_pf matur w)\n  \\<lbrakk>price_structure der matur \\<pi> pr;\n   replicating_portfolio pf der matur; coincides_on Mkt Mkt2 (stocks Mkt);\n   prices Mkt2 x = pr; x \\<notin> stocks Mkt;\n   diff_inv =\n   (\\<pi> - initial_value pf) / constant_image (prices Mkt pos_stock 0);\n   diff_inv \\<noteq> 0;\n   arb_pf = (\\<lambda>x n w. 0)\n   (x := \\<lambda>n w. - 1, pos_stock := \\<lambda>n w. diff_inv);\n   contr_pf = qty_sum arb_pf pf\\<rbrakk>\n  \\<Longrightarrow> diff_inv < 0 \\<longrightarrow>\n                    (AE w in M. cls_val_process Mkt2 contr_pf matur w < 0)\n  \\<lbrakk>price_structure der matur \\<pi> pr;\n   replicating_portfolio pf der matur; coincides_on Mkt Mkt2 (stocks Mkt);\n   prices Mkt2 x = pr; x \\<notin> stocks Mkt;\n   diff_inv =\n   (\\<pi> - initial_value pf) / constant_image (prices Mkt pos_stock 0);\n   diff_inv \\<noteq> 0;\n   arb_pf = (\\<lambda>x n w. 0)\n   (x := \\<lambda>n w. - 1, pos_stock := \\<lambda>n w. diff_inv);\n   contr_pf = qty_sum arb_pf pf\\<rbrakk>\n  \\<Longrightarrow> support_set arb_pf = {x, pos_stock}\n  \\<lbrakk>price_structure der matur \\<pi> pr;\n   replicating_portfolio pf der matur; coincides_on Mkt Mkt2 (stocks Mkt);\n   prices Mkt2 x = pr; x \\<notin> stocks Mkt;\n   diff_inv =\n   (\\<pi> - initial_value pf) / constant_image (prices Mkt pos_stock 0);\n   diff_inv \\<noteq> 0;\n   arb_pf = (\\<lambda>x n w. 0)\n   (x := \\<lambda>n w. - 1, pos_stock := \\<lambda>n w. diff_inv);\n   contr_pf = qty_sum arb_pf pf\\<rbrakk>\n  \\<Longrightarrow> portfolio contr_pf\n\ngoal (1 subgoal):\n 1. diff_inv < 0 \\<longrightarrow>\n    (AE w in M. cls_val_process Mkt2 contr_pf matur w < 0)", "using  \\<open>coincides_on Mkt Mkt2 (stocks Mkt)\\<close> \\<open>price_structure der matur \\<pi> pr\\<close> \\<open>prices Mkt2 x = pr\\<close>\n        \\<open>x \\<notin> stocks Mkt\\<close> arb_pf_def assms(1) contr_pf_def diff_inv_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>price_structure der matur \\<pi> pr;\n   replicating_portfolio pf der matur; coincides_on Mkt Mkt2 (stocks Mkt);\n   prices Mkt2 x = pr; x \\<notin> stocks Mkt;\n   diff_inv =\n   (\\<pi> - initial_value pf) / constant_image (prices Mkt pos_stock 0);\n   diff_inv \\<noteq> 0;\n   arb_pf = (\\<lambda>x n w. 0)\n   (x := \\<lambda>n w. - 1, pos_stock := \\<lambda>n w. diff_inv);\n   contr_pf = qty_sum arb_pf pf\\<rbrakk>\n  \\<Longrightarrow> self_financing Mkt2 contr_pf\n  \\<lbrakk>price_structure der matur \\<pi> pr;\n   replicating_portfolio pf der matur; coincides_on Mkt Mkt2 (stocks Mkt);\n   prices Mkt2 x = pr; x \\<notin> stocks Mkt;\n   diff_inv =\n   (\\<pi> - initial_value pf) / constant_image (prices Mkt pos_stock 0);\n   diff_inv \\<noteq> 0;\n   arb_pf = (\\<lambda>x n w. 0)\n   (x := \\<lambda>n w. - 1, pos_stock := \\<lambda>n w. diff_inv);\n   contr_pf = qty_sum arb_pf pf\\<rbrakk>\n  \\<Longrightarrow> trading_strategy contr_pf\n  \\<lbrakk>price_structure der matur \\<pi> pr;\n   replicating_portfolio pf der matur; coincides_on Mkt Mkt2 (stocks Mkt);\n   prices Mkt2 x = pr; x \\<notin> stocks Mkt;\n   diff_inv =\n   (\\<pi> - initial_value pf) / constant_image (prices Mkt pos_stock 0);\n   diff_inv \\<noteq> 0;\n   arb_pf = (\\<lambda>x n w. 0)\n   (x := \\<lambda>n w. - 1, pos_stock := \\<lambda>n w. diff_inv);\n   contr_pf = qty_sum arb_pf pf\\<rbrakk>\n  \\<Longrightarrow> \\<forall>w\\<in>space M.\n                       cls_val_process Mkt2 contr_pf 0 w = 0\n  \\<lbrakk>price_structure der matur \\<pi> pr;\n   replicating_portfolio pf der matur; coincides_on Mkt Mkt2 (stocks Mkt);\n   prices Mkt2 x = pr; x \\<notin> stocks Mkt;\n   diff_inv =\n   (\\<pi> - initial_value pf) / constant_image (prices Mkt pos_stock 0);\n   diff_inv \\<noteq> 0;\n   arb_pf = (\\<lambda>x n w. 0)\n   (x := \\<lambda>n w. - 1, pos_stock := \\<lambda>n w. diff_inv);\n   contr_pf = qty_sum arb_pf pf\\<rbrakk>\n  \\<Longrightarrow> 0 < diff_inv \\<longrightarrow>\n                    (AE w in M. 0 < cls_val_process Mkt2 contr_pf matur w)\n  \\<lbrakk>price_structure der matur \\<pi> pr;\n   replicating_portfolio pf der matur; coincides_on Mkt Mkt2 (stocks Mkt);\n   prices Mkt2 x = pr; x \\<notin> stocks Mkt;\n   diff_inv =\n   (\\<pi> - initial_value pf) / constant_image (prices Mkt pos_stock 0);\n   diff_inv \\<noteq> 0;\n   arb_pf = (\\<lambda>x n w. 0)\n   (x := \\<lambda>n w. - 1, pos_stock := \\<lambda>n w. diff_inv);\n   contr_pf = qty_sum arb_pf pf\\<rbrakk>\n  \\<Longrightarrow> diff_inv < 0 \\<longrightarrow>\n                    (AE w in M. cls_val_process Mkt2 contr_pf matur w < 0)\n  \\<lbrakk>price_structure der matur \\<pi> pr;\n   replicating_portfolio pf der matur; coincides_on Mkt Mkt2 (stocks Mkt);\n   prices Mkt2 x = pr; x \\<notin> stocks Mkt;\n   diff_inv =\n   (\\<pi> - initial_value pf) / constant_image (prices Mkt pos_stock 0);\n   diff_inv \\<noteq> 0;\n   arb_pf = (\\<lambda>x n w. 0)\n   (x := \\<lambda>n w. - 1, pos_stock := \\<lambda>n w. diff_inv);\n   contr_pf = qty_sum arb_pf pf\\<rbrakk>\n  \\<Longrightarrow> support_set arb_pf = {x, pos_stock}\n  \\<lbrakk>price_structure der matur \\<pi> pr;\n   replicating_portfolio pf der matur; coincides_on Mkt Mkt2 (stocks Mkt);\n   prices Mkt2 x = pr; x \\<notin> stocks Mkt;\n   diff_inv =\n   (\\<pi> - initial_value pf) / constant_image (prices Mkt pos_stock 0);\n   diff_inv \\<noteq> 0;\n   arb_pf = (\\<lambda>x n w. 0)\n   (x := \\<lambda>n w. - 1, pos_stock := \\<lambda>n w. diff_inv);\n   contr_pf = qty_sum arb_pf pf\\<rbrakk>\n  \\<Longrightarrow> portfolio contr_pf\n  coincides_on Mkt Mkt2 (stocks Mkt)\n  price_structure der matur \\<pi> pr\n  prices Mkt2 x = pr\n  x \\<notin> stocks Mkt\n  arb_pf = (\\<lambda>x n w. 0)\n  (x := \\<lambda>n w. - 1, pos_stock := \\<lambda>n w. diff_inv)\n  replicating_portfolio pf der matur\n  contr_pf = qty_sum arb_pf pf\n  diff_inv =\n  (\\<pi> - initial_value pf) / constant_image (prices Mkt pos_stock 0)\n\ngoal (1 subgoal):\n 1. diff_inv < 0 \\<longrightarrow>\n    (AE w in M. cls_val_process Mkt2 contr_pf matur w < 0)", "by blast"], ["proof (state)\nthis:\n  diff_inv < 0 \\<longrightarrow>\n  (AE w in M. cls_val_process Mkt2 contr_pf matur w < 0)\n\ngoal (1 subgoal):\n 1. \\<pi> = initial_value pf", "have 6: \"0 \\<noteq> diff_inv \\<longrightarrow> support_set arb_pf = {x, pos_stock}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<noteq> diff_inv \\<longrightarrow>\n    support_set arb_pf = {x, pos_stock}", "using arbitrage_portfolio_properties[of der matur \\<pi> pr pf Mkt2 x diff_inv arb_pf contr_pf]"], ["proof (prove)\nusing this:\n  \\<lbrakk>price_structure der matur \\<pi> pr;\n   replicating_portfolio pf der matur; coincides_on Mkt Mkt2 (stocks Mkt);\n   prices Mkt2 x = pr; x \\<notin> stocks Mkt;\n   diff_inv =\n   (\\<pi> - initial_value pf) / constant_image (prices Mkt pos_stock 0);\n   diff_inv \\<noteq> 0;\n   arb_pf = (\\<lambda>x n w. 0)\n   (x := \\<lambda>n w. - 1, pos_stock := \\<lambda>n w. diff_inv);\n   contr_pf = qty_sum arb_pf pf\\<rbrakk>\n  \\<Longrightarrow> self_financing Mkt2 contr_pf\n  \\<lbrakk>price_structure der matur \\<pi> pr;\n   replicating_portfolio pf der matur; coincides_on Mkt Mkt2 (stocks Mkt);\n   prices Mkt2 x = pr; x \\<notin> stocks Mkt;\n   diff_inv =\n   (\\<pi> - initial_value pf) / constant_image (prices Mkt pos_stock 0);\n   diff_inv \\<noteq> 0;\n   arb_pf = (\\<lambda>x n w. 0)\n   (x := \\<lambda>n w. - 1, pos_stock := \\<lambda>n w. diff_inv);\n   contr_pf = qty_sum arb_pf pf\\<rbrakk>\n  \\<Longrightarrow> trading_strategy contr_pf\n  \\<lbrakk>price_structure der matur \\<pi> pr;\n   replicating_portfolio pf der matur; coincides_on Mkt Mkt2 (stocks Mkt);\n   prices Mkt2 x = pr; x \\<notin> stocks Mkt;\n   diff_inv =\n   (\\<pi> - initial_value pf) / constant_image (prices Mkt pos_stock 0);\n   diff_inv \\<noteq> 0;\n   arb_pf = (\\<lambda>x n w. 0)\n   (x := \\<lambda>n w. - 1, pos_stock := \\<lambda>n w. diff_inv);\n   contr_pf = qty_sum arb_pf pf\\<rbrakk>\n  \\<Longrightarrow> \\<forall>w\\<in>space M.\n                       cls_val_process Mkt2 contr_pf 0 w = 0\n  \\<lbrakk>price_structure der matur \\<pi> pr;\n   replicating_portfolio pf der matur; coincides_on Mkt Mkt2 (stocks Mkt);\n   prices Mkt2 x = pr; x \\<notin> stocks Mkt;\n   diff_inv =\n   (\\<pi> - initial_value pf) / constant_image (prices Mkt pos_stock 0);\n   diff_inv \\<noteq> 0;\n   arb_pf = (\\<lambda>x n w. 0)\n   (x := \\<lambda>n w. - 1, pos_stock := \\<lambda>n w. diff_inv);\n   contr_pf = qty_sum arb_pf pf\\<rbrakk>\n  \\<Longrightarrow> 0 < diff_inv \\<longrightarrow>\n                    (AE w in M. 0 < cls_val_process Mkt2 contr_pf matur w)\n  \\<lbrakk>price_structure der matur \\<pi> pr;\n   replicating_portfolio pf der matur; coincides_on Mkt Mkt2 (stocks Mkt);\n   prices Mkt2 x = pr; x \\<notin> stocks Mkt;\n   diff_inv =\n   (\\<pi> - initial_value pf) / constant_image (prices Mkt pos_stock 0);\n   diff_inv \\<noteq> 0;\n   arb_pf = (\\<lambda>x n w. 0)\n   (x := \\<lambda>n w. - 1, pos_stock := \\<lambda>n w. diff_inv);\n   contr_pf = qty_sum arb_pf pf\\<rbrakk>\n  \\<Longrightarrow> diff_inv < 0 \\<longrightarrow>\n                    (AE w in M. cls_val_process Mkt2 contr_pf matur w < 0)\n  \\<lbrakk>price_structure der matur \\<pi> pr;\n   replicating_portfolio pf der matur; coincides_on Mkt Mkt2 (stocks Mkt);\n   prices Mkt2 x = pr; x \\<notin> stocks Mkt;\n   diff_inv =\n   (\\<pi> - initial_value pf) / constant_image (prices Mkt pos_stock 0);\n   diff_inv \\<noteq> 0;\n   arb_pf = (\\<lambda>x n w. 0)\n   (x := \\<lambda>n w. - 1, pos_stock := \\<lambda>n w. diff_inv);\n   contr_pf = qty_sum arb_pf pf\\<rbrakk>\n  \\<Longrightarrow> support_set arb_pf = {x, pos_stock}\n  \\<lbrakk>price_structure der matur \\<pi> pr;\n   replicating_portfolio pf der matur; coincides_on Mkt Mkt2 (stocks Mkt);\n   prices Mkt2 x = pr; x \\<notin> stocks Mkt;\n   diff_inv =\n   (\\<pi> - initial_value pf) / constant_image (prices Mkt pos_stock 0);\n   diff_inv \\<noteq> 0;\n   arb_pf = (\\<lambda>x n w. 0)\n   (x := \\<lambda>n w. - 1, pos_stock := \\<lambda>n w. diff_inv);\n   contr_pf = qty_sum arb_pf pf\\<rbrakk>\n  \\<Longrightarrow> portfolio contr_pf\n\ngoal (1 subgoal):\n 1. 0 \\<noteq> diff_inv \\<longrightarrow>\n    support_set arb_pf = {x, pos_stock}", "using  \\<open>coincides_on Mkt Mkt2 (stocks Mkt)\\<close> \\<open>price_structure der matur \\<pi> pr\\<close> \\<open>prices Mkt2 x = pr\\<close>\n        \\<open>x \\<notin> stocks Mkt\\<close> arb_pf_def assms(1) contr_pf_def diff_inv_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>price_structure der matur \\<pi> pr;\n   replicating_portfolio pf der matur; coincides_on Mkt Mkt2 (stocks Mkt);\n   prices Mkt2 x = pr; x \\<notin> stocks Mkt;\n   diff_inv =\n   (\\<pi> - initial_value pf) / constant_image (prices Mkt pos_stock 0);\n   diff_inv \\<noteq> 0;\n   arb_pf = (\\<lambda>x n w. 0)\n   (x := \\<lambda>n w. - 1, pos_stock := \\<lambda>n w. diff_inv);\n   contr_pf = qty_sum arb_pf pf\\<rbrakk>\n  \\<Longrightarrow> self_financing Mkt2 contr_pf\n  \\<lbrakk>price_structure der matur \\<pi> pr;\n   replicating_portfolio pf der matur; coincides_on Mkt Mkt2 (stocks Mkt);\n   prices Mkt2 x = pr; x \\<notin> stocks Mkt;\n   diff_inv =\n   (\\<pi> - initial_value pf) / constant_image (prices Mkt pos_stock 0);\n   diff_inv \\<noteq> 0;\n   arb_pf = (\\<lambda>x n w. 0)\n   (x := \\<lambda>n w. - 1, pos_stock := \\<lambda>n w. diff_inv);\n   contr_pf = qty_sum arb_pf pf\\<rbrakk>\n  \\<Longrightarrow> trading_strategy contr_pf\n  \\<lbrakk>price_structure der matur \\<pi> pr;\n   replicating_portfolio pf der matur; coincides_on Mkt Mkt2 (stocks Mkt);\n   prices Mkt2 x = pr; x \\<notin> stocks Mkt;\n   diff_inv =\n   (\\<pi> - initial_value pf) / constant_image (prices Mkt pos_stock 0);\n   diff_inv \\<noteq> 0;\n   arb_pf = (\\<lambda>x n w. 0)\n   (x := \\<lambda>n w. - 1, pos_stock := \\<lambda>n w. diff_inv);\n   contr_pf = qty_sum arb_pf pf\\<rbrakk>\n  \\<Longrightarrow> \\<forall>w\\<in>space M.\n                       cls_val_process Mkt2 contr_pf 0 w = 0\n  \\<lbrakk>price_structure der matur \\<pi> pr;\n   replicating_portfolio pf der matur; coincides_on Mkt Mkt2 (stocks Mkt);\n   prices Mkt2 x = pr; x \\<notin> stocks Mkt;\n   diff_inv =\n   (\\<pi> - initial_value pf) / constant_image (prices Mkt pos_stock 0);\n   diff_inv \\<noteq> 0;\n   arb_pf = (\\<lambda>x n w. 0)\n   (x := \\<lambda>n w. - 1, pos_stock := \\<lambda>n w. diff_inv);\n   contr_pf = qty_sum arb_pf pf\\<rbrakk>\n  \\<Longrightarrow> 0 < diff_inv \\<longrightarrow>\n                    (AE w in M. 0 < cls_val_process Mkt2 contr_pf matur w)\n  \\<lbrakk>price_structure der matur \\<pi> pr;\n   replicating_portfolio pf der matur; coincides_on Mkt Mkt2 (stocks Mkt);\n   prices Mkt2 x = pr; x \\<notin> stocks Mkt;\n   diff_inv =\n   (\\<pi> - initial_value pf) / constant_image (prices Mkt pos_stock 0);\n   diff_inv \\<noteq> 0;\n   arb_pf = (\\<lambda>x n w. 0)\n   (x := \\<lambda>n w. - 1, pos_stock := \\<lambda>n w. diff_inv);\n   contr_pf = qty_sum arb_pf pf\\<rbrakk>\n  \\<Longrightarrow> diff_inv < 0 \\<longrightarrow>\n                    (AE w in M. cls_val_process Mkt2 contr_pf matur w < 0)\n  \\<lbrakk>price_structure der matur \\<pi> pr;\n   replicating_portfolio pf der matur; coincides_on Mkt Mkt2 (stocks Mkt);\n   prices Mkt2 x = pr; x \\<notin> stocks Mkt;\n   diff_inv =\n   (\\<pi> - initial_value pf) / constant_image (prices Mkt pos_stock 0);\n   diff_inv \\<noteq> 0;\n   arb_pf = (\\<lambda>x n w. 0)\n   (x := \\<lambda>n w. - 1, pos_stock := \\<lambda>n w. diff_inv);\n   contr_pf = qty_sum arb_pf pf\\<rbrakk>\n  \\<Longrightarrow> support_set arb_pf = {x, pos_stock}\n  \\<lbrakk>price_structure der matur \\<pi> pr;\n   replicating_portfolio pf der matur; coincides_on Mkt Mkt2 (stocks Mkt);\n   prices Mkt2 x = pr; x \\<notin> stocks Mkt;\n   diff_inv =\n   (\\<pi> - initial_value pf) / constant_image (prices Mkt pos_stock 0);\n   diff_inv \\<noteq> 0;\n   arb_pf = (\\<lambda>x n w. 0)\n   (x := \\<lambda>n w. - 1, pos_stock := \\<lambda>n w. diff_inv);\n   contr_pf = qty_sum arb_pf pf\\<rbrakk>\n  \\<Longrightarrow> portfolio contr_pf\n  coincides_on Mkt Mkt2 (stocks Mkt)\n  price_structure der matur \\<pi> pr\n  prices Mkt2 x = pr\n  x \\<notin> stocks Mkt\n  arb_pf = (\\<lambda>x n w. 0)\n  (x := \\<lambda>n w. - 1, pos_stock := \\<lambda>n w. diff_inv)\n  replicating_portfolio pf der matur\n  contr_pf = qty_sum arb_pf pf\n  diff_inv =\n  (\\<pi> - initial_value pf) / constant_image (prices Mkt pos_stock 0)\n\ngoal (1 subgoal):\n 1. 0 \\<noteq> diff_inv \\<longrightarrow>\n    support_set arb_pf = {x, pos_stock}", "by blast"], ["proof (state)\nthis:\n  0 \\<noteq> diff_inv \\<longrightarrow> support_set arb_pf = {x, pos_stock}\n\ngoal (1 subgoal):\n 1. \\<pi> = initial_value pf", "have 7: \"0 \\<noteq> diff_inv \\<longrightarrow>support_set contr_pf \\<subseteq> stocks Mkt \\<union> {x}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<noteq> diff_inv \\<longrightarrow>\n    support_set contr_pf \\<subseteq> stocks Mkt \\<union> {x}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. 0 \\<noteq> diff_inv \\<longrightarrow>\n    support_set contr_pf \\<subseteq> stocks Mkt \\<union> {x}", "have \"0 \\<noteq> diff_inv \\<longrightarrow> support_set contr_pf \\<subseteq> support_set arb_pf \\<union> support_set pf\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<noteq> diff_inv \\<longrightarrow>\n    support_set contr_pf\n    \\<subseteq> support_set arb_pf \\<union> support_set pf", "unfolding contr_pf_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<noteq> diff_inv \\<longrightarrow>\n    support_set (qty_sum arb_pf pf)\n    \\<subseteq> support_set arb_pf \\<union> support_set pf", "by (simp add:sum_support_set)"], ["proof (state)\nthis:\n  0 \\<noteq> diff_inv \\<longrightarrow>\n  support_set contr_pf\n  \\<subseteq> support_set arb_pf \\<union> support_set pf\n\ngoal (1 subgoal):\n 1. 0 \\<noteq> diff_inv \\<longrightarrow>\n    support_set contr_pf \\<subseteq> stocks Mkt \\<union> {x}", "moreover"], ["proof (state)\nthis:\n  0 \\<noteq> diff_inv \\<longrightarrow>\n  support_set contr_pf\n  \\<subseteq> support_set arb_pf \\<union> support_set pf\n\ngoal (1 subgoal):\n 1. 0 \\<noteq> diff_inv \\<longrightarrow>\n    support_set contr_pf \\<subseteq> stocks Mkt \\<union> {x}", "have \"0 \\<noteq> diff_inv \\<longrightarrow>support_set arb_pf \\<subseteq> stocks Mkt \\<union> {x}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<noteq> diff_inv \\<longrightarrow>\n    support_set arb_pf \\<subseteq> stocks Mkt \\<union> {x}", "using \\<open>0 \\<noteq> diff_inv \\<longrightarrow> support_set arb_pf = {x, pos_stock}\\<close> in_stock"], ["proof (prove)\nusing this:\n  0 \\<noteq> diff_inv \\<longrightarrow> support_set arb_pf = {x, pos_stock}\n  pos_stock \\<in> stocks Mkt\n\ngoal (1 subgoal):\n 1. 0 \\<noteq> diff_inv \\<longrightarrow>\n    support_set arb_pf \\<subseteq> stocks Mkt \\<union> {x}", "by simp"], ["proof (state)\nthis:\n  0 \\<noteq> diff_inv \\<longrightarrow>\n  support_set arb_pf \\<subseteq> stocks Mkt \\<union> {x}\n\ngoal (1 subgoal):\n 1. 0 \\<noteq> diff_inv \\<longrightarrow>\n    support_set contr_pf \\<subseteq> stocks Mkt \\<union> {x}", "moreover"], ["proof (state)\nthis:\n  0 \\<noteq> diff_inv \\<longrightarrow>\n  support_set arb_pf \\<subseteq> stocks Mkt \\<union> {x}\n\ngoal (1 subgoal):\n 1. 0 \\<noteq> diff_inv \\<longrightarrow>\n    support_set contr_pf \\<subseteq> stocks Mkt \\<union> {x}", "have \"0 \\<noteq> diff_inv \\<longrightarrow>support_set pf \\<subseteq> stocks Mkt \\<union> {x}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<noteq> diff_inv \\<longrightarrow>\n    support_set pf \\<subseteq> stocks Mkt \\<union> {x}", "using assms"], ["proof (prove)\nusing this:\n  replicating_portfolio pf der matur\n  fair_price Mkt \\<pi> der matur\n\ngoal (1 subgoal):\n 1. 0 \\<noteq> diff_inv \\<longrightarrow>\n    support_set pf \\<subseteq> stocks Mkt \\<union> {x}", "unfolding replicating_portfolio_def\n        stock_portfolio_def"], ["proof (prove)\nusing this:\n  (portfolio pf \\<and> support_set pf \\<subseteq> stocks Mkt) \\<and>\n  trading_strategy pf \\<and>\n  self_financing Mkt pf \\<and> AEeq M (cls_val_process Mkt pf matur) der\n  fair_price Mkt \\<pi> der matur\n\ngoal (1 subgoal):\n 1. 0 \\<noteq> diff_inv \\<longrightarrow>\n    support_set pf \\<subseteq> stocks Mkt \\<union> {x}", "by auto"], ["proof (state)\nthis:\n  0 \\<noteq> diff_inv \\<longrightarrow>\n  support_set pf \\<subseteq> stocks Mkt \\<union> {x}\n\ngoal (1 subgoal):\n 1. 0 \\<noteq> diff_inv \\<longrightarrow>\n    support_set contr_pf \\<subseteq> stocks Mkt \\<union> {x}", "ultimately"], ["proof (chain)\npicking this:\n  0 \\<noteq> diff_inv \\<longrightarrow>\n  support_set contr_pf\n  \\<subseteq> support_set arb_pf \\<union> support_set pf\n  0 \\<noteq> diff_inv \\<longrightarrow>\n  support_set arb_pf \\<subseteq> stocks Mkt \\<union> {x}\n  0 \\<noteq> diff_inv \\<longrightarrow>\n  support_set pf \\<subseteq> stocks Mkt \\<union> {x}", "show ?thesis"], ["proof (prove)\nusing this:\n  0 \\<noteq> diff_inv \\<longrightarrow>\n  support_set contr_pf\n  \\<subseteq> support_set arb_pf \\<union> support_set pf\n  0 \\<noteq> diff_inv \\<longrightarrow>\n  support_set arb_pf \\<subseteq> stocks Mkt \\<union> {x}\n  0 \\<noteq> diff_inv \\<longrightarrow>\n  support_set pf \\<subseteq> stocks Mkt \\<union> {x}\n\ngoal (1 subgoal):\n 1. 0 \\<noteq> diff_inv \\<longrightarrow>\n    support_set contr_pf \\<subseteq> stocks Mkt \\<union> {x}", "by auto"], ["proof (state)\nthis:\n  0 \\<noteq> diff_inv \\<longrightarrow>\n  support_set contr_pf \\<subseteq> stocks Mkt \\<union> {x}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  0 \\<noteq> diff_inv \\<longrightarrow>\n  support_set contr_pf \\<subseteq> stocks Mkt \\<union> {x}\n\ngoal (1 subgoal):\n 1. \\<pi> = initial_value pf", "have 8:\"0 \\<noteq> diff_inv \\<longrightarrow>portfolio contr_pf\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<noteq> diff_inv \\<longrightarrow> portfolio contr_pf", "using arbitrage_portfolio_properties[of der matur \\<pi> pr pf Mkt2 x diff_inv arb_pf contr_pf]"], ["proof (prove)\nusing this:\n  \\<lbrakk>price_structure der matur \\<pi> pr;\n   replicating_portfolio pf der matur; coincides_on Mkt Mkt2 (stocks Mkt);\n   prices Mkt2 x = pr; x \\<notin> stocks Mkt;\n   diff_inv =\n   (\\<pi> - initial_value pf) / constant_image (prices Mkt pos_stock 0);\n   diff_inv \\<noteq> 0;\n   arb_pf = (\\<lambda>x n w. 0)\n   (x := \\<lambda>n w. - 1, pos_stock := \\<lambda>n w. diff_inv);\n   contr_pf = qty_sum arb_pf pf\\<rbrakk>\n  \\<Longrightarrow> self_financing Mkt2 contr_pf\n  \\<lbrakk>price_structure der matur \\<pi> pr;\n   replicating_portfolio pf der matur; coincides_on Mkt Mkt2 (stocks Mkt);\n   prices Mkt2 x = pr; x \\<notin> stocks Mkt;\n   diff_inv =\n   (\\<pi> - initial_value pf) / constant_image (prices Mkt pos_stock 0);\n   diff_inv \\<noteq> 0;\n   arb_pf = (\\<lambda>x n w. 0)\n   (x := \\<lambda>n w. - 1, pos_stock := \\<lambda>n w. diff_inv);\n   contr_pf = qty_sum arb_pf pf\\<rbrakk>\n  \\<Longrightarrow> trading_strategy contr_pf\n  \\<lbrakk>price_structure der matur \\<pi> pr;\n   replicating_portfolio pf der matur; coincides_on Mkt Mkt2 (stocks Mkt);\n   prices Mkt2 x = pr; x \\<notin> stocks Mkt;\n   diff_inv =\n   (\\<pi> - initial_value pf) / constant_image (prices Mkt pos_stock 0);\n   diff_inv \\<noteq> 0;\n   arb_pf = (\\<lambda>x n w. 0)\n   (x := \\<lambda>n w. - 1, pos_stock := \\<lambda>n w. diff_inv);\n   contr_pf = qty_sum arb_pf pf\\<rbrakk>\n  \\<Longrightarrow> \\<forall>w\\<in>space M.\n                       cls_val_process Mkt2 contr_pf 0 w = 0\n  \\<lbrakk>price_structure der matur \\<pi> pr;\n   replicating_portfolio pf der matur; coincides_on Mkt Mkt2 (stocks Mkt);\n   prices Mkt2 x = pr; x \\<notin> stocks Mkt;\n   diff_inv =\n   (\\<pi> - initial_value pf) / constant_image (prices Mkt pos_stock 0);\n   diff_inv \\<noteq> 0;\n   arb_pf = (\\<lambda>x n w. 0)\n   (x := \\<lambda>n w. - 1, pos_stock := \\<lambda>n w. diff_inv);\n   contr_pf = qty_sum arb_pf pf\\<rbrakk>\n  \\<Longrightarrow> 0 < diff_inv \\<longrightarrow>\n                    (AE w in M. 0 < cls_val_process Mkt2 contr_pf matur w)\n  \\<lbrakk>price_structure der matur \\<pi> pr;\n   replicating_portfolio pf der matur; coincides_on Mkt Mkt2 (stocks Mkt);\n   prices Mkt2 x = pr; x \\<notin> stocks Mkt;\n   diff_inv =\n   (\\<pi> - initial_value pf) / constant_image (prices Mkt pos_stock 0);\n   diff_inv \\<noteq> 0;\n   arb_pf = (\\<lambda>x n w. 0)\n   (x := \\<lambda>n w. - 1, pos_stock := \\<lambda>n w. diff_inv);\n   contr_pf = qty_sum arb_pf pf\\<rbrakk>\n  \\<Longrightarrow> diff_inv < 0 \\<longrightarrow>\n                    (AE w in M. cls_val_process Mkt2 contr_pf matur w < 0)\n  \\<lbrakk>price_structure der matur \\<pi> pr;\n   replicating_portfolio pf der matur; coincides_on Mkt Mkt2 (stocks Mkt);\n   prices Mkt2 x = pr; x \\<notin> stocks Mkt;\n   diff_inv =\n   (\\<pi> - initial_value pf) / constant_image (prices Mkt pos_stock 0);\n   diff_inv \\<noteq> 0;\n   arb_pf = (\\<lambda>x n w. 0)\n   (x := \\<lambda>n w. - 1, pos_stock := \\<lambda>n w. diff_inv);\n   contr_pf = qty_sum arb_pf pf\\<rbrakk>\n  \\<Longrightarrow> support_set arb_pf = {x, pos_stock}\n  \\<lbrakk>price_structure der matur \\<pi> pr;\n   replicating_portfolio pf der matur; coincides_on Mkt Mkt2 (stocks Mkt);\n   prices Mkt2 x = pr; x \\<notin> stocks Mkt;\n   diff_inv =\n   (\\<pi> - initial_value pf) / constant_image (prices Mkt pos_stock 0);\n   diff_inv \\<noteq> 0;\n   arb_pf = (\\<lambda>x n w. 0)\n   (x := \\<lambda>n w. - 1, pos_stock := \\<lambda>n w. diff_inv);\n   contr_pf = qty_sum arb_pf pf\\<rbrakk>\n  \\<Longrightarrow> portfolio contr_pf\n\ngoal (1 subgoal):\n 1. 0 \\<noteq> diff_inv \\<longrightarrow> portfolio contr_pf", "using  \\<open>coincides_on Mkt Mkt2 (stocks Mkt)\\<close> \\<open>price_structure der matur \\<pi> pr\\<close> \\<open>prices Mkt2 x = pr\\<close>\n        \\<open>x \\<notin> stocks Mkt\\<close> arb_pf_def assms(1) contr_pf_def diff_inv_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>price_structure der matur \\<pi> pr;\n   replicating_portfolio pf der matur; coincides_on Mkt Mkt2 (stocks Mkt);\n   prices Mkt2 x = pr; x \\<notin> stocks Mkt;\n   diff_inv =\n   (\\<pi> - initial_value pf) / constant_image (prices Mkt pos_stock 0);\n   diff_inv \\<noteq> 0;\n   arb_pf = (\\<lambda>x n w. 0)\n   (x := \\<lambda>n w. - 1, pos_stock := \\<lambda>n w. diff_inv);\n   contr_pf = qty_sum arb_pf pf\\<rbrakk>\n  \\<Longrightarrow> self_financing Mkt2 contr_pf\n  \\<lbrakk>price_structure der matur \\<pi> pr;\n   replicating_portfolio pf der matur; coincides_on Mkt Mkt2 (stocks Mkt);\n   prices Mkt2 x = pr; x \\<notin> stocks Mkt;\n   diff_inv =\n   (\\<pi> - initial_value pf) / constant_image (prices Mkt pos_stock 0);\n   diff_inv \\<noteq> 0;\n   arb_pf = (\\<lambda>x n w. 0)\n   (x := \\<lambda>n w. - 1, pos_stock := \\<lambda>n w. diff_inv);\n   contr_pf = qty_sum arb_pf pf\\<rbrakk>\n  \\<Longrightarrow> trading_strategy contr_pf\n  \\<lbrakk>price_structure der matur \\<pi> pr;\n   replicating_portfolio pf der matur; coincides_on Mkt Mkt2 (stocks Mkt);\n   prices Mkt2 x = pr; x \\<notin> stocks Mkt;\n   diff_inv =\n   (\\<pi> - initial_value pf) / constant_image (prices Mkt pos_stock 0);\n   diff_inv \\<noteq> 0;\n   arb_pf = (\\<lambda>x n w. 0)\n   (x := \\<lambda>n w. - 1, pos_stock := \\<lambda>n w. diff_inv);\n   contr_pf = qty_sum arb_pf pf\\<rbrakk>\n  \\<Longrightarrow> \\<forall>w\\<in>space M.\n                       cls_val_process Mkt2 contr_pf 0 w = 0\n  \\<lbrakk>price_structure der matur \\<pi> pr;\n   replicating_portfolio pf der matur; coincides_on Mkt Mkt2 (stocks Mkt);\n   prices Mkt2 x = pr; x \\<notin> stocks Mkt;\n   diff_inv =\n   (\\<pi> - initial_value pf) / constant_image (prices Mkt pos_stock 0);\n   diff_inv \\<noteq> 0;\n   arb_pf = (\\<lambda>x n w. 0)\n   (x := \\<lambda>n w. - 1, pos_stock := \\<lambda>n w. diff_inv);\n   contr_pf = qty_sum arb_pf pf\\<rbrakk>\n  \\<Longrightarrow> 0 < diff_inv \\<longrightarrow>\n                    (AE w in M. 0 < cls_val_process Mkt2 contr_pf matur w)\n  \\<lbrakk>price_structure der matur \\<pi> pr;\n   replicating_portfolio pf der matur; coincides_on Mkt Mkt2 (stocks Mkt);\n   prices Mkt2 x = pr; x \\<notin> stocks Mkt;\n   diff_inv =\n   (\\<pi> - initial_value pf) / constant_image (prices Mkt pos_stock 0);\n   diff_inv \\<noteq> 0;\n   arb_pf = (\\<lambda>x n w. 0)\n   (x := \\<lambda>n w. - 1, pos_stock := \\<lambda>n w. diff_inv);\n   contr_pf = qty_sum arb_pf pf\\<rbrakk>\n  \\<Longrightarrow> diff_inv < 0 \\<longrightarrow>\n                    (AE w in M. cls_val_process Mkt2 contr_pf matur w < 0)\n  \\<lbrakk>price_structure der matur \\<pi> pr;\n   replicating_portfolio pf der matur; coincides_on Mkt Mkt2 (stocks Mkt);\n   prices Mkt2 x = pr; x \\<notin> stocks Mkt;\n   diff_inv =\n   (\\<pi> - initial_value pf) / constant_image (prices Mkt pos_stock 0);\n   diff_inv \\<noteq> 0;\n   arb_pf = (\\<lambda>x n w. 0)\n   (x := \\<lambda>n w. - 1, pos_stock := \\<lambda>n w. diff_inv);\n   contr_pf = qty_sum arb_pf pf\\<rbrakk>\n  \\<Longrightarrow> support_set arb_pf = {x, pos_stock}\n  \\<lbrakk>price_structure der matur \\<pi> pr;\n   replicating_portfolio pf der matur; coincides_on Mkt Mkt2 (stocks Mkt);\n   prices Mkt2 x = pr; x \\<notin> stocks Mkt;\n   diff_inv =\n   (\\<pi> - initial_value pf) / constant_image (prices Mkt pos_stock 0);\n   diff_inv \\<noteq> 0;\n   arb_pf = (\\<lambda>x n w. 0)\n   (x := \\<lambda>n w. - 1, pos_stock := \\<lambda>n w. diff_inv);\n   contr_pf = qty_sum arb_pf pf\\<rbrakk>\n  \\<Longrightarrow> portfolio contr_pf\n  coincides_on Mkt Mkt2 (stocks Mkt)\n  price_structure der matur \\<pi> pr\n  prices Mkt2 x = pr\n  x \\<notin> stocks Mkt\n  arb_pf = (\\<lambda>x n w. 0)\n  (x := \\<lambda>n w. - 1, pos_stock := \\<lambda>n w. diff_inv)\n  replicating_portfolio pf der matur\n  contr_pf = qty_sum arb_pf pf\n  diff_inv =\n  (\\<pi> - initial_value pf) / constant_image (prices Mkt pos_stock 0)\n\ngoal (1 subgoal):\n 1. 0 \\<noteq> diff_inv \\<longrightarrow> portfolio contr_pf", "by blast"], ["proof (state)\nthis:\n  0 \\<noteq> diff_inv \\<longrightarrow> portfolio contr_pf\n\ngoal (1 subgoal):\n 1. \\<pi> = initial_value pf", "have 9: \"0 \\<noteq> diff_inv \\<longrightarrow> cls_val_process Mkt2 contr_pf matur \\<in> borel_measurable (F matur)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<noteq> diff_inv \\<longrightarrow>\n    cls_val_process Mkt2 contr_pf matur \\<in> borel_measurable (F matur)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. 0 \\<noteq> diff_inv \\<Longrightarrow>\n    cls_val_process Mkt2 contr_pf matur \\<in> borel_measurable (F matur)", "assume \"0 \\<noteq> diff_inv\""], ["proof (state)\nthis:\n  0 \\<noteq> diff_inv\n\ngoal (1 subgoal):\n 1. 0 \\<noteq> diff_inv \\<Longrightarrow>\n    cls_val_process Mkt2 contr_pf matur \\<in> borel_measurable (F matur)", "have 10:\"\\<forall> asset \\<in> support_set arb_pf \\<union> support_set pf. prices Mkt2 asset matur \\<in> borel_measurable (F matur)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>asset\\<in>support_set arb_pf \\<union> support_set pf.\n       prices Mkt2 asset matur \\<in> borel_measurable (F matur)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>asset.\n       asset\n       \\<in> support_set arb_pf \\<union> support_set pf \\<Longrightarrow>\n       prices Mkt2 asset matur \\<in> borel_measurable (F matur)", "fix asset"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>asset.\n       asset\n       \\<in> support_set arb_pf \\<union> support_set pf \\<Longrightarrow>\n       prices Mkt2 asset matur \\<in> borel_measurable (F matur)", "assume \"asset \\<in> support_set arb_pf \\<union> support_set pf\""], ["proof (state)\nthis:\n  asset \\<in> support_set arb_pf \\<union> support_set pf\n\ngoal (1 subgoal):\n 1. \\<And>asset.\n       asset\n       \\<in> support_set arb_pf \\<union> support_set pf \\<Longrightarrow>\n       prices Mkt2 asset matur \\<in> borel_measurable (F matur)", "show \"prices Mkt2 asset matur \\<in> borel_measurable (F matur)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prices Mkt2 asset matur \\<in> borel_measurable (F matur)", "proof (cases \"asset \\<in> support_set pf\")"], ["proof (state)\ngoal (2 subgoals):\n 1. asset \\<in> support_set pf \\<Longrightarrow>\n    prices Mkt2 asset matur \\<in> borel_measurable (F matur)\n 2. asset \\<notin> support_set pf \\<Longrightarrow>\n    prices Mkt2 asset matur \\<in> borel_measurable (F matur)", "case True"], ["proof (state)\nthis:\n  asset \\<in> support_set pf\n\ngoal (2 subgoals):\n 1. asset \\<in> support_set pf \\<Longrightarrow>\n    prices Mkt2 asset matur \\<in> borel_measurable (F matur)\n 2. asset \\<notin> support_set pf \\<Longrightarrow>\n    prices Mkt2 asset matur \\<in> borel_measurable (F matur)", "thus ?thesis"], ["proof (prove)\nusing this:\n  asset \\<in> support_set pf\n\ngoal (1 subgoal):\n 1. prices Mkt2 asset matur \\<in> borel_measurable (F matur)", "using assms readable"], ["proof (prove)\nusing this:\n  asset \\<in> support_set pf\n  replicating_portfolio pf der matur\n  fair_price Mkt \\<pi> der matur\n  \\<forall>asset\\<in>stocks Mkt. borel_adapt_stoch_proc F (prices Mkt asset)\n\ngoal (1 subgoal):\n 1. prices Mkt2 asset matur \\<in> borel_measurable (F matur)", "by (metis (no_types, lifting)  \\<open>coincides_on Mkt Mkt2 (stocks Mkt)\\<close> adapt_stoch_proc_def\n                coincides_on_def disc_equity_market.replicating_portfolio_def\n                disc_equity_market_axioms  stock_portfolio_def subsetCE)"], ["proof (state)\nthis:\n  prices Mkt2 asset matur \\<in> borel_measurable (F matur)\n\ngoal (1 subgoal):\n 1. asset \\<notin> support_set pf \\<Longrightarrow>\n    prices Mkt2 asset matur \\<in> borel_measurable (F matur)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. asset \\<notin> support_set pf \\<Longrightarrow>\n    prices Mkt2 asset matur \\<in> borel_measurable (F matur)", "case False"], ["proof (state)\nthis:\n  asset \\<notin> support_set pf\n\ngoal (1 subgoal):\n 1. asset \\<notin> support_set pf \\<Longrightarrow>\n    prices Mkt2 asset matur \\<in> borel_measurable (F matur)", "hence \"asset\\<in> support_set arb_pf\""], ["proof (prove)\nusing this:\n  asset \\<notin> support_set pf\n\ngoal (1 subgoal):\n 1. asset \\<in> support_set arb_pf", "using \\<open>asset \\<in> support_set arb_pf \\<union> support_set pf\\<close>"], ["proof (prove)\nusing this:\n  asset \\<notin> support_set pf\n  asset \\<in> support_set arb_pf \\<union> support_set pf\n\ngoal (1 subgoal):\n 1. asset \\<in> support_set arb_pf", "by auto"], ["proof (state)\nthis:\n  asset \\<in> support_set arb_pf\n\ngoal (1 subgoal):\n 1. asset \\<notin> support_set pf \\<Longrightarrow>\n    prices Mkt2 asset matur \\<in> borel_measurable (F matur)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. prices Mkt2 asset matur \\<in> borel_measurable (F matur)", "proof (cases \"asset = x\")"], ["proof (state)\ngoal (2 subgoals):\n 1. asset = x \\<Longrightarrow>\n    prices Mkt2 asset matur \\<in> borel_measurable (F matur)\n 2. asset \\<noteq> x \\<Longrightarrow>\n    prices Mkt2 asset matur \\<in> borel_measurable (F matur)", "case True"], ["proof (state)\nthis:\n  asset = x\n\ngoal (2 subgoals):\n 1. asset = x \\<Longrightarrow>\n    prices Mkt2 asset matur \\<in> borel_measurable (F matur)\n 2. asset \\<noteq> x \\<Longrightarrow>\n    prices Mkt2 asset matur \\<in> borel_measurable (F matur)", "thus ?thesis"], ["proof (prove)\nusing this:\n  asset = x\n\ngoal (1 subgoal):\n 1. prices Mkt2 asset matur \\<in> borel_measurable (F matur)", "using \\<open>price_structure der matur \\<pi> pr\\<close> \\<open>prices Mkt2 x = pr\\<close> price_structure_borel_measurable"], ["proof (prove)\nusing this:\n  asset = x\n  price_structure der matur \\<pi> pr\n  prices Mkt2 x = pr\n  price_structure ?pyf ?T ?\\<pi> ?pr \\<Longrightarrow>\n  ?pr ?T \\<in> borel_measurable (F ?T)\n\ngoal (1 subgoal):\n 1. prices Mkt2 asset matur \\<in> borel_measurable (F matur)", "by blast"], ["proof (state)\nthis:\n  prices Mkt2 asset matur \\<in> borel_measurable (F matur)\n\ngoal (1 subgoal):\n 1. asset \\<noteq> x \\<Longrightarrow>\n    prices Mkt2 asset matur \\<in> borel_measurable (F matur)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. asset \\<noteq> x \\<Longrightarrow>\n    prices Mkt2 asset matur \\<in> borel_measurable (F matur)", "case False"], ["proof (state)\nthis:\n  asset \\<noteq> x\n\ngoal (1 subgoal):\n 1. asset \\<noteq> x \\<Longrightarrow>\n    prices Mkt2 asset matur \\<in> borel_measurable (F matur)", "hence \"asset = pos_stock\""], ["proof (prove)\nusing this:\n  asset \\<noteq> x\n\ngoal (1 subgoal):\n 1. asset = pos_stock", "using \\<open>asset\\<in> support_set arb_pf\\<close> \\<open>0 \\<noteq> diff_inv \\<longrightarrow> support_set arb_pf = {x, pos_stock}\\<close>\n              \\<open>0 \\<noteq> diff_inv\\<close>"], ["proof (prove)\nusing this:\n  asset \\<noteq> x\n  asset \\<in> support_set arb_pf\n  0 \\<noteq> diff_inv \\<longrightarrow> support_set arb_pf = {x, pos_stock}\n  0 \\<noteq> diff_inv\n\ngoal (1 subgoal):\n 1. asset = pos_stock", "by auto"], ["proof (state)\nthis:\n  asset = pos_stock\n\ngoal (1 subgoal):\n 1. asset \\<noteq> x \\<Longrightarrow>\n    prices Mkt2 asset matur \\<in> borel_measurable (F matur)", "thus ?thesis"], ["proof (prove)\nusing this:\n  asset = pos_stock\n\ngoal (1 subgoal):\n 1. prices Mkt2 asset matur \\<in> borel_measurable (F matur)", "by (metis \\<open>coincides_on Mkt Mkt2 (stocks Mkt)\\<close> adapt_stoch_proc_def coincides_on_def in_stock pos_stock_borel_adapted)"], ["proof (state)\nthis:\n  prices Mkt2 asset matur \\<in> borel_measurable (F matur)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  prices Mkt2 asset matur \\<in> borel_measurable (F matur)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  prices Mkt2 asset matur \\<in> borel_measurable (F matur)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>asset\\<in>support_set arb_pf \\<union> support_set pf.\n     prices Mkt2 asset matur \\<in> borel_measurable (F matur)\n\ngoal (1 subgoal):\n 1. 0 \\<noteq> diff_inv \\<Longrightarrow>\n    cls_val_process Mkt2 contr_pf matur \\<in> borel_measurable (F matur)", "moreover"], ["proof (state)\nthis:\n  \\<forall>asset\\<in>support_set arb_pf \\<union> support_set pf.\n     prices Mkt2 asset matur \\<in> borel_measurable (F matur)\n\ngoal (1 subgoal):\n 1. 0 \\<noteq> diff_inv \\<Longrightarrow>\n    cls_val_process Mkt2 contr_pf matur \\<in> borel_measurable (F matur)", "have \"\\<forall>asset\\<in>support_set contr_pf. contr_pf asset matur \\<in> borel_measurable (F matur)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>asset\\<in>support_set contr_pf.\n       contr_pf asset matur \\<in> borel_measurable (F matur)", "using \\<open>0 \\<noteq> diff_inv \\<longrightarrow>trading_strategy contr_pf\\<close> \\<open>0 \\<noteq> diff_inv\\<close>"], ["proof (prove)\nusing this:\n  0 \\<noteq> diff_inv \\<longrightarrow> trading_strategy contr_pf\n  0 \\<noteq> diff_inv\n\ngoal (1 subgoal):\n 1. \\<forall>asset\\<in>support_set contr_pf.\n       contr_pf asset matur \\<in> borel_measurable (F matur)", "by (metis adapt_stoch_proc_def disc_filtr_prob_space.predict_imp_adapt disc_filtr_prob_space_axioms trading_strategy_def)"], ["proof (state)\nthis:\n  \\<forall>asset\\<in>support_set contr_pf.\n     contr_pf asset matur \\<in> borel_measurable (F matur)\n\ngoal (1 subgoal):\n 1. 0 \\<noteq> diff_inv \\<Longrightarrow>\n    cls_val_process Mkt2 contr_pf matur \\<in> borel_measurable (F matur)", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>asset\\<in>support_set arb_pf \\<union> support_set pf.\n     prices Mkt2 asset matur \\<in> borel_measurable (F matur)\n  \\<forall>asset\\<in>support_set contr_pf.\n     contr_pf asset matur \\<in> borel_measurable (F matur)", "show \"cls_val_process Mkt2 contr_pf matur \\<in> borel_measurable (F matur)\""], ["proof (prove)\nusing this:\n  \\<forall>asset\\<in>support_set arb_pf \\<union> support_set pf.\n     prices Mkt2 asset matur \\<in> borel_measurable (F matur)\n  \\<forall>asset\\<in>support_set contr_pf.\n     contr_pf asset matur \\<in> borel_measurable (F matur)\n\ngoal (1 subgoal):\n 1. cls_val_process Mkt2 contr_pf matur \\<in> borel_measurable (F matur)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>asset\\<in>support_set arb_pf \\<union> support_set pf.\n                prices Mkt2 asset matur \\<in> borel_measurable (F matur);\n     \\<forall>asset\\<in>support_set contr_pf.\n        contr_pf asset matur \\<in> borel_measurable (F matur)\\<rbrakk>\n    \\<Longrightarrow> cls_val_process Mkt2 contr_pf matur\n                      \\<in> borel_measurable (F matur)", "have \"\\<forall>asset\\<in>support_set contr_pf. contr_pf asset (Suc matur) \\<in> borel_measurable (F matur)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>asset\\<in>support_set contr_pf.\n       contr_pf asset (Suc matur) \\<in> borel_measurable (F matur)", "using \\<open>0 \\<noteq> diff_inv \\<longrightarrow>trading_strategy contr_pf\\<close> \\<open>0 \\<noteq> diff_inv\\<close>"], ["proof (prove)\nusing this:\n  0 \\<noteq> diff_inv \\<longrightarrow> trading_strategy contr_pf\n  0 \\<noteq> diff_inv\n\ngoal (1 subgoal):\n 1. \\<forall>asset\\<in>support_set contr_pf.\n       contr_pf asset (Suc matur) \\<in> borel_measurable (F matur)", "by (simp add: predict_stoch_proc_def trading_strategy_def)"], ["proof (state)\nthis:\n  \\<forall>asset\\<in>support_set contr_pf.\n     contr_pf asset (Suc matur) \\<in> borel_measurable (F matur)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>asset\\<in>support_set arb_pf \\<union> support_set pf.\n                prices Mkt2 asset matur \\<in> borel_measurable (F matur);\n     \\<forall>asset\\<in>support_set contr_pf.\n        contr_pf asset matur \\<in> borel_measurable (F matur)\\<rbrakk>\n    \\<Longrightarrow> cls_val_process Mkt2 contr_pf matur\n                      \\<in> borel_measurable (F matur)", "moreover"], ["proof (state)\nthis:\n  \\<forall>asset\\<in>support_set contr_pf.\n     contr_pf asset (Suc matur) \\<in> borel_measurable (F matur)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>asset\\<in>support_set arb_pf \\<union> support_set pf.\n                prices Mkt2 asset matur \\<in> borel_measurable (F matur);\n     \\<forall>asset\\<in>support_set contr_pf.\n        contr_pf asset matur \\<in> borel_measurable (F matur)\\<rbrakk>\n    \\<Longrightarrow> cls_val_process Mkt2 contr_pf matur\n                      \\<in> borel_measurable (F matur)", "have \"\\<forall>asset\\<in>support_set contr_pf. prices Mkt2 asset matur \\<in> borel_measurable (F matur)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>asset\\<in>support_set contr_pf.\n       prices Mkt2 asset matur \\<in> borel_measurable (F matur)", "using 10"], ["proof (prove)\nusing this:\n  \\<forall>asset\\<in>support_set arb_pf \\<union> support_set pf.\n     prices Mkt2 asset matur \\<in> borel_measurable (F matur)\n\ngoal (1 subgoal):\n 1. \\<forall>asset\\<in>support_set contr_pf.\n       prices Mkt2 asset matur \\<in> borel_measurable (F matur)", "unfolding contr_pf_def"], ["proof (prove)\nusing this:\n  \\<forall>asset\\<in>support_set arb_pf \\<union> support_set pf.\n     prices Mkt2 asset matur \\<in> borel_measurable (F matur)\n\ngoal (1 subgoal):\n 1. \\<forall>asset\\<in>support_set (qty_sum arb_pf pf).\n       prices Mkt2 asset matur \\<in> borel_measurable (F matur)", "using sum_support_set[of arb_pf pf]"], ["proof (prove)\nusing this:\n  \\<forall>asset\\<in>support_set arb_pf \\<union> support_set pf.\n     prices Mkt2 asset matur \\<in> borel_measurable (F matur)\n  support_set (qty_sum arb_pf pf)\n  \\<subseteq> support_set arb_pf \\<union> support_set pf\n\ngoal (1 subgoal):\n 1. \\<forall>asset\\<in>support_set (qty_sum arb_pf pf).\n       prices Mkt2 asset matur \\<in> borel_measurable (F matur)", "by auto"], ["proof (state)\nthis:\n  \\<forall>asset\\<in>support_set contr_pf.\n     prices Mkt2 asset matur \\<in> borel_measurable (F matur)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>asset\\<in>support_set arb_pf \\<union> support_set pf.\n                prices Mkt2 asset matur \\<in> borel_measurable (F matur);\n     \\<forall>asset\\<in>support_set contr_pf.\n        contr_pf asset matur \\<in> borel_measurable (F matur)\\<rbrakk>\n    \\<Longrightarrow> cls_val_process Mkt2 contr_pf matur\n                      \\<in> borel_measurable (F matur)", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>asset\\<in>support_set contr_pf.\n     contr_pf asset (Suc matur) \\<in> borel_measurable (F matur)\n  \\<forall>asset\\<in>support_set contr_pf.\n     prices Mkt2 asset matur \\<in> borel_measurable (F matur)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>asset\\<in>support_set contr_pf.\n     contr_pf asset (Suc matur) \\<in> borel_measurable (F matur)\n  \\<forall>asset\\<in>support_set contr_pf.\n     prices Mkt2 asset matur \\<in> borel_measurable (F matur)\n\ngoal (1 subgoal):\n 1. cls_val_process Mkt2 contr_pf matur \\<in> borel_measurable (F matur)", "by (metis (no_types, lifting) \"1\" \\<open>0 \\<noteq> diff_inv\\<close> quantity_adapted self_financingE)"], ["proof (state)\nthis:\n  cls_val_process Mkt2 contr_pf matur \\<in> borel_measurable (F matur)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  cls_val_process Mkt2 contr_pf matur \\<in> borel_measurable (F matur)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  0 \\<noteq> diff_inv \\<longrightarrow>\n  cls_val_process Mkt2 contr_pf matur \\<in> borel_measurable (F matur)\n\ngoal (1 subgoal):\n 1. \\<pi> = initial_value pf", "{"], ["proof (state)\nthis:\n  0 \\<noteq> diff_inv \\<longrightarrow>\n  cls_val_process Mkt2 contr_pf matur \\<in> borel_measurable (F matur)\n\ngoal (1 subgoal):\n 1. \\<pi> = initial_value pf", "assume \"0 > diff_inv\""], ["proof (state)\nthis:\n  diff_inv < 0\n\ngoal (1 subgoal):\n 1. \\<pi> = initial_value pf", "define opp_pf where \"opp_pf = qty_mult_comp contr_pf (\\<lambda> n w. -1)\""], ["proof (state)\nthis:\n  opp_pf = qty_mult_comp contr_pf (\\<lambda>n w. - 1)\n\ngoal (1 subgoal):\n 1. \\<pi> = initial_value pf", "have \"arbitrage_process Mkt2 opp_pf\""], ["proof (prove)\ngoal (1 subgoal):\n 1. arbitrage_process Mkt2 opp_pf", "proof (rule arbitrage_processI, rule exI, intro conjI)"], ["proof (state)\ngoal (5 subgoals):\n 1. self_financing Mkt2 opp_pf\n 2. trading_strategy opp_pf\n 3. \\<forall>w\\<in>space M. cls_val_process Mkt2 opp_pf 0 w = 0\n 4. AE w in M. 0 \\<le> cls_val_process Mkt2 opp_pf ?m2 w\n 5. 0 < prob {w \\<in> space M. 0 < cls_val_process Mkt2 opp_pf ?m2 w}", "show \"self_financing Mkt2 opp_pf\""], ["proof (prove)\ngoal (1 subgoal):\n 1. self_financing Mkt2 opp_pf", "using 1 \\<open>0 > diff_inv\\<close> mult_time_constant_self_financing[of contr_pf] 8"], ["proof (prove)\nusing this:\n  0 \\<noteq> diff_inv \\<longrightarrow> self_financing Mkt2 contr_pf\n  diff_inv < 0\n  \\<lbrakk>portfolio contr_pf; self_financing ?Mkt contr_pf;\n   \\<forall>n w. ?qty n w = ?qty (Suc n) w\\<rbrakk>\n  \\<Longrightarrow> self_financing ?Mkt (qty_mult_comp contr_pf ?qty)\n  0 \\<noteq> diff_inv \\<longrightarrow> portfolio contr_pf\n\ngoal (1 subgoal):\n 1. self_financing Mkt2 opp_pf", "unfolding opp_pf_def"], ["proof (prove)\nusing this:\n  0 \\<noteq> diff_inv \\<longrightarrow> self_financing Mkt2 contr_pf\n  diff_inv < 0\n  \\<lbrakk>portfolio contr_pf; self_financing ?Mkt contr_pf;\n   \\<forall>n w. ?qty n w = ?qty (Suc n) w\\<rbrakk>\n  \\<Longrightarrow> self_financing ?Mkt (qty_mult_comp contr_pf ?qty)\n  0 \\<noteq> diff_inv \\<longrightarrow> portfolio contr_pf\n\ngoal (1 subgoal):\n 1. self_financing Mkt2 (qty_mult_comp contr_pf (\\<lambda>n w. - 1))", "by auto"], ["proof (state)\nthis:\n  self_financing Mkt2 opp_pf\n\ngoal (4 subgoals):\n 1. trading_strategy opp_pf\n 2. \\<forall>w\\<in>space M. cls_val_process Mkt2 opp_pf 0 w = 0\n 3. AE w in M. 0 \\<le> cls_val_process Mkt2 opp_pf ?m2 w\n 4. 0 < prob {w \\<in> space M. 0 < cls_val_process Mkt2 opp_pf ?m2 w}", "show \"trading_strategy opp_pf\""], ["proof (prove)\ngoal (1 subgoal):\n 1. trading_strategy opp_pf", "unfolding opp_pf_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. trading_strategy (qty_mult_comp contr_pf (\\<lambda>n w. - 1))", "proof (rule mult_comp_trading_strat)"], ["proof (state)\ngoal (2 subgoals):\n 1. trading_strategy contr_pf\n 2. borel_predict_stoch_proc F (\\<lambda>n w. - 1)", "show \"trading_strategy contr_pf\""], ["proof (prove)\ngoal (1 subgoal):\n 1. trading_strategy contr_pf", "using 2 \\<open>0 > diff_inv\\<close>"], ["proof (prove)\nusing this:\n  0 \\<noteq> diff_inv \\<longrightarrow> trading_strategy contr_pf\n  diff_inv < 0\n\ngoal (1 subgoal):\n 1. trading_strategy contr_pf", "by auto"], ["proof (state)\nthis:\n  trading_strategy contr_pf\n\ngoal (1 subgoal):\n 1. borel_predict_stoch_proc F (\\<lambda>n w. - 1)", "show \"borel_predict_stoch_proc F (\\<lambda>n w. - 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. borel_predict_stoch_proc F (\\<lambda>n w. - (1::'c))", "by (simp add: constant_process_borel_predictable)"], ["proof (state)\nthis:\n  borel_predict_stoch_proc F (\\<lambda>n w. - (1::?'c14))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  trading_strategy opp_pf\n\ngoal (3 subgoals):\n 1. \\<forall>w\\<in>space M. cls_val_process Mkt2 opp_pf 0 w = 0\n 2. AE w in M. 0 \\<le> cls_val_process Mkt2 opp_pf ?m2 w\n 3. 0 < prob {w \\<in> space M. 0 < cls_val_process Mkt2 opp_pf ?m2 w}", "show \"\\<forall>w\\<in>space M. cls_val_process Mkt2 opp_pf 0 w = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>w\\<in>space M. cls_val_process Mkt2 opp_pf 0 w = 0", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>w.\n       w \\<in> space M \\<Longrightarrow> cls_val_process Mkt2 opp_pf 0 w = 0", "fix w"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>w.\n       w \\<in> space M \\<Longrightarrow> cls_val_process Mkt2 opp_pf 0 w = 0", "assume \"w\\<in> space M\""], ["proof (state)\nthis:\n  w \\<in> space M\n\ngoal (1 subgoal):\n 1. \\<And>w.\n       w \\<in> space M \\<Longrightarrow> cls_val_process Mkt2 opp_pf 0 w = 0", "show \"cls_val_process Mkt2 opp_pf 0 w = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cls_val_process Mkt2 opp_pf 0 w = 0", "using 3 8 \\<open>0 > diff_inv\\<close>"], ["proof (prove)\nusing this:\n  0 \\<noteq> diff_inv \\<longrightarrow>\n  (\\<forall>w\\<in>space M. cls_val_process Mkt2 contr_pf 0 w = 0)\n  0 \\<noteq> diff_inv \\<longrightarrow> portfolio contr_pf\n  diff_inv < 0\n\ngoal (1 subgoal):\n 1. cls_val_process Mkt2 opp_pf 0 w = 0", "using \\<open>w \\<in> space M\\<close> mult_comp_cls_val_process0 opp_pf_def"], ["proof (prove)\nusing this:\n  0 \\<noteq> diff_inv \\<longrightarrow>\n  (\\<forall>w\\<in>space M. cls_val_process Mkt2 contr_pf 0 w = 0)\n  0 \\<noteq> diff_inv \\<longrightarrow> portfolio contr_pf\n  diff_inv < 0\n  w \\<in> space M\n  portfolio ?pf1.0 \\<Longrightarrow>\n  \\<forall>w.\n     cls_val_process ?Mkt (qty_mult_comp ?pf1.0 ?qty) 0 w =\n     cls_val_process ?Mkt ?pf1.0 0 w * ?qty (Suc 0) w\n  opp_pf = qty_mult_comp contr_pf (\\<lambda>n w. - 1)\n\ngoal (1 subgoal):\n 1. cls_val_process Mkt2 opp_pf 0 w = 0", "by fastforce"], ["proof (state)\nthis:\n  cls_val_process Mkt2 opp_pf 0 w = 0\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>w\\<in>space M. cls_val_process Mkt2 opp_pf 0 w = 0\n\ngoal (2 subgoals):\n 1. AE w in M. 0 \\<le> cls_val_process Mkt2 opp_pf ?m2 w\n 2. 0 < prob {w \\<in> space M. 0 < cls_val_process Mkt2 opp_pf ?m2 w}", "have \"AE w in M. 0 < cls_val_process Mkt2 opp_pf matur w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. AE w in M. 0 < cls_val_process Mkt2 opp_pf matur w", "proof (rule AE_mp)"], ["proof (state)\ngoal (2 subgoals):\n 1. almost_everywhere M ?P\n 2. AE w in M. ?P w \\<longrightarrow>\n               0 < cls_val_process Mkt2 opp_pf matur w", "show \"AE w in M. 0 > cls_val_process Mkt2 contr_pf matur w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. AE w in M. cls_val_process Mkt2 contr_pf matur w < 0", "using 5 \\<open>0 > diff_inv\\<close>"], ["proof (prove)\nusing this:\n  diff_inv < 0 \\<longrightarrow>\n  (AE w in M. cls_val_process Mkt2 contr_pf matur w < 0)\n  diff_inv < 0\n\ngoal (1 subgoal):\n 1. AE w in M. cls_val_process Mkt2 contr_pf matur w < 0", "by auto"], ["proof (state)\nthis:\n  AE w in M. cls_val_process Mkt2 contr_pf matur w < 0\n\ngoal (1 subgoal):\n 1. AE w in M. cls_val_process Mkt2 contr_pf matur w < 0 \\<longrightarrow>\n               0 < cls_val_process Mkt2 opp_pf matur w", "show \"AE w in M. cls_val_process Mkt2 contr_pf matur w < 0 \\<longrightarrow> 0 < cls_val_process Mkt2 opp_pf matur w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. AE w in M. cls_val_process Mkt2 contr_pf matur w < 0 \\<longrightarrow>\n               0 < cls_val_process Mkt2 opp_pf matur w", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>w.\n       w \\<in> space M \\<Longrightarrow>\n       cls_val_process Mkt2 contr_pf matur w < 0 \\<longrightarrow>\n       0 < cls_val_process Mkt2 opp_pf matur w", "fix w"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>w.\n       w \\<in> space M \\<Longrightarrow>\n       cls_val_process Mkt2 contr_pf matur w < 0 \\<longrightarrow>\n       0 < cls_val_process Mkt2 opp_pf matur w", "assume \"w\\<in> space M\""], ["proof (state)\nthis:\n  w \\<in> space M\n\ngoal (1 subgoal):\n 1. \\<And>w.\n       w \\<in> space M \\<Longrightarrow>\n       cls_val_process Mkt2 contr_pf matur w < 0 \\<longrightarrow>\n       0 < cls_val_process Mkt2 opp_pf matur w", "show \"cls_val_process Mkt2 contr_pf matur w < 0 \\<longrightarrow> 0 < cls_val_process Mkt2 opp_pf matur w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cls_val_process Mkt2 contr_pf matur w < 0 \\<longrightarrow>\n    0 < cls_val_process Mkt2 opp_pf matur w", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. cls_val_process Mkt2 contr_pf matur w < 0 \\<Longrightarrow>\n    0 < cls_val_process Mkt2 opp_pf matur w", "assume \"cls_val_process Mkt2 contr_pf matur w < 0\""], ["proof (state)\nthis:\n  cls_val_process Mkt2 contr_pf matur w < 0\n\ngoal (1 subgoal):\n 1. cls_val_process Mkt2 contr_pf matur w < 0 \\<Longrightarrow>\n    0 < cls_val_process Mkt2 opp_pf matur w", "show \"0 < cls_val_process Mkt2 opp_pf matur w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < cls_val_process Mkt2 opp_pf matur w", "proof (cases \"matur = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. matur = 0 \\<Longrightarrow> 0 < cls_val_process Mkt2 opp_pf matur w\n 2. matur \\<noteq> 0 \\<Longrightarrow>\n    0 < cls_val_process Mkt2 opp_pf matur w", "case False"], ["proof (state)\nthis:\n  matur \\<noteq> 0\n\ngoal (2 subgoals):\n 1. matur = 0 \\<Longrightarrow> 0 < cls_val_process Mkt2 opp_pf matur w\n 2. matur \\<noteq> 0 \\<Longrightarrow>\n    0 < cls_val_process Mkt2 opp_pf matur w", "hence \"\\<exists>m. Suc m = matur\""], ["proof (prove)\nusing this:\n  matur \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<exists>m. Suc m = matur", "by presburger"], ["proof (state)\nthis:\n  \\<exists>m. Suc m = matur\n\ngoal (2 subgoals):\n 1. matur = 0 \\<Longrightarrow> 0 < cls_val_process Mkt2 opp_pf matur w\n 2. matur \\<noteq> 0 \\<Longrightarrow>\n    0 < cls_val_process Mkt2 opp_pf matur w", "from this"], ["proof (chain)\npicking this:\n  \\<exists>m. Suc m = matur", "obtain m where \"Suc m = matur\""], ["proof (prove)\nusing this:\n  \\<exists>m. Suc m = matur\n\ngoal (1 subgoal):\n 1. (\\<And>m. Suc m = matur \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  Suc m = matur\n\ngoal (2 subgoals):\n 1. matur = 0 \\<Longrightarrow> 0 < cls_val_process Mkt2 opp_pf matur w\n 2. matur \\<noteq> 0 \\<Longrightarrow>\n    0 < cls_val_process Mkt2 opp_pf matur w", "hence \"0 < cls_val_process Mkt2 opp_pf (Suc m) w\""], ["proof (prove)\nusing this:\n  Suc m = matur\n\ngoal (1 subgoal):\n 1. 0 < cls_val_process Mkt2 opp_pf (Suc m) w", "using 3 8 \\<open>0 > diff_inv\\<close> \\<open>w \\<in> space M\\<close> mult_comp_cls_val_process_Suc  opp_pf_def"], ["proof (prove)\nusing this:\n  Suc m = matur\n  0 \\<noteq> diff_inv \\<longrightarrow>\n  (\\<forall>w\\<in>space M. cls_val_process Mkt2 contr_pf 0 w = 0)\n  0 \\<noteq> diff_inv \\<longrightarrow> portfolio contr_pf\n  diff_inv < 0\n  w \\<in> space M\n  portfolio ?pf1.0 \\<Longrightarrow>\n  \\<forall>n w.\n     cls_val_process ?Mkt (qty_mult_comp ?pf1.0 ?qty) (Suc n) w =\n     cls_val_process ?Mkt ?pf1.0 (Suc n) w * ?qty (Suc n) w\n  opp_pf = qty_mult_comp contr_pf (\\<lambda>n w. - 1)\n\ngoal (1 subgoal):\n 1. 0 < cls_val_process Mkt2 opp_pf (Suc m) w", "using \\<open>cls_val_process Mkt2 contr_pf matur w < 0\\<close>"], ["proof (prove)\nusing this:\n  Suc m = matur\n  0 \\<noteq> diff_inv \\<longrightarrow>\n  (\\<forall>w\\<in>space M. cls_val_process Mkt2 contr_pf 0 w = 0)\n  0 \\<noteq> diff_inv \\<longrightarrow> portfolio contr_pf\n  diff_inv < 0\n  w \\<in> space M\n  portfolio ?pf1.0 \\<Longrightarrow>\n  \\<forall>n w.\n     cls_val_process ?Mkt (qty_mult_comp ?pf1.0 ?qty) (Suc n) w =\n     cls_val_process ?Mkt ?pf1.0 (Suc n) w * ?qty (Suc n) w\n  opp_pf = qty_mult_comp contr_pf (\\<lambda>n w. - 1)\n  cls_val_process Mkt2 contr_pf matur w < 0\n\ngoal (1 subgoal):\n 1. 0 < cls_val_process Mkt2 opp_pf (Suc m) w", "by fastforce"], ["proof (state)\nthis:\n  0 < cls_val_process Mkt2 opp_pf (Suc m) w\n\ngoal (2 subgoals):\n 1. matur = 0 \\<Longrightarrow> 0 < cls_val_process Mkt2 opp_pf matur w\n 2. matur \\<noteq> 0 \\<Longrightarrow>\n    0 < cls_val_process Mkt2 opp_pf matur w", "thus ?thesis"], ["proof (prove)\nusing this:\n  0 < cls_val_process Mkt2 opp_pf (Suc m) w\n\ngoal (1 subgoal):\n 1. 0 < cls_val_process Mkt2 opp_pf matur w", "using \\<open>Suc m = matur\\<close>"], ["proof (prove)\nusing this:\n  0 < cls_val_process Mkt2 opp_pf (Suc m) w\n  Suc m = matur\n\ngoal (1 subgoal):\n 1. 0 < cls_val_process Mkt2 opp_pf matur w", "by simp"], ["proof (state)\nthis:\n  0 < cls_val_process Mkt2 opp_pf matur w\n\ngoal (1 subgoal):\n 1. matur = 0 \\<Longrightarrow> 0 < cls_val_process Mkt2 opp_pf matur w", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. matur = 0 \\<Longrightarrow> 0 < cls_val_process Mkt2 opp_pf matur w", "case True"], ["proof (state)\nthis:\n  matur = 0\n\ngoal (1 subgoal):\n 1. matur = 0 \\<Longrightarrow> 0 < cls_val_process Mkt2 opp_pf matur w", "thus ?thesis"], ["proof (prove)\nusing this:\n  matur = 0\n\ngoal (1 subgoal):\n 1. 0 < cls_val_process Mkt2 opp_pf matur w", "using 3 8 \\<open>0 > diff_inv\\<close> \\<open>w \\<in> space M\\<close> mult_comp_cls_val_process0 opp_pf_def"], ["proof (prove)\nusing this:\n  matur = 0\n  0 \\<noteq> diff_inv \\<longrightarrow>\n  (\\<forall>w\\<in>space M. cls_val_process Mkt2 contr_pf 0 w = 0)\n  0 \\<noteq> diff_inv \\<longrightarrow> portfolio contr_pf\n  diff_inv < 0\n  w \\<in> space M\n  portfolio ?pf1.0 \\<Longrightarrow>\n  \\<forall>w.\n     cls_val_process ?Mkt (qty_mult_comp ?pf1.0 ?qty) 0 w =\n     cls_val_process ?Mkt ?pf1.0 0 w * ?qty (Suc 0) w\n  opp_pf = qty_mult_comp contr_pf (\\<lambda>n w. - 1)\n\ngoal (1 subgoal):\n 1. 0 < cls_val_process Mkt2 opp_pf matur w", "using \\<open>cls_val_process Mkt2 contr_pf matur w < 0\\<close>"], ["proof (prove)\nusing this:\n  matur = 0\n  0 \\<noteq> diff_inv \\<longrightarrow>\n  (\\<forall>w\\<in>space M. cls_val_process Mkt2 contr_pf 0 w = 0)\n  0 \\<noteq> diff_inv \\<longrightarrow> portfolio contr_pf\n  diff_inv < 0\n  w \\<in> space M\n  portfolio ?pf1.0 \\<Longrightarrow>\n  \\<forall>w.\n     cls_val_process ?Mkt (qty_mult_comp ?pf1.0 ?qty) 0 w =\n     cls_val_process ?Mkt ?pf1.0 0 w * ?qty (Suc 0) w\n  opp_pf = qty_mult_comp contr_pf (\\<lambda>n w. - 1)\n  cls_val_process Mkt2 contr_pf matur w < 0\n\ngoal (1 subgoal):\n 1. 0 < cls_val_process Mkt2 opp_pf matur w", "by auto"], ["proof (state)\nthis:\n  0 < cls_val_process Mkt2 opp_pf matur w\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  0 < cls_val_process Mkt2 opp_pf matur w\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  cls_val_process Mkt2 contr_pf matur w < 0 \\<longrightarrow>\n  0 < cls_val_process Mkt2 opp_pf matur w\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  AE w in M. cls_val_process Mkt2 contr_pf matur w < 0 \\<longrightarrow>\n             0 < cls_val_process Mkt2 opp_pf matur w\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  AE w in M. 0 < cls_val_process Mkt2 opp_pf matur w\n\ngoal (2 subgoals):\n 1. AE w in M. 0 \\<le> cls_val_process Mkt2 opp_pf ?m2 w\n 2. 0 < prob {w \\<in> space M. 0 < cls_val_process Mkt2 opp_pf ?m2 w}", "thus \"AE w in M. 0 \\<le> cls_val_process Mkt2 opp_pf matur w\""], ["proof (prove)\nusing this:\n  AE w in M. 0 < cls_val_process Mkt2 opp_pf matur w\n\ngoal (1 subgoal):\n 1. AE w in M. 0 \\<le> cls_val_process Mkt2 opp_pf matur w", "by auto"], ["proof (state)\nthis:\n  AE w in M. 0 \\<le> cls_val_process Mkt2 opp_pf matur w\n\ngoal (1 subgoal):\n 1. 0 < prob {w \\<in> space M. 0 < cls_val_process Mkt2 opp_pf matur w}", "show \"0 < prob {w \\<in> space M. 0 < cls_val_process Mkt2 opp_pf matur w}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < prob {w \\<in> space M. 0 < cls_val_process Mkt2 opp_pf matur w}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. 0 < prob {w \\<in> space M. 0 < cls_val_process Mkt2 opp_pf matur w}", "let ?P = \"{w\\<in> space M. 0 < cls_val_process Mkt2 opp_pf matur w}\""], ["proof (state)\ngoal (1 subgoal):\n 1. 0 < prob {w \\<in> space M. 0 < cls_val_process Mkt2 opp_pf matur w}", "have \"cls_val_process Mkt2 opp_pf matur \\<in> borel_measurable (F matur)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cls_val_process Mkt2 opp_pf matur \\<in> borel_measurable (F matur)", "(*unfolding opp_pf_def *)"], ["proof (prove)\ngoal (1 subgoal):\n 1. cls_val_process Mkt2 opp_pf matur \\<in> borel_measurable (F matur)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. cls_val_process Mkt2 opp_pf matur \\<in> borel_measurable (F matur)", "have \"cls_val_process Mkt2 contr_pf matur \\<in> borel_measurable (F matur)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cls_val_process Mkt2 contr_pf matur \\<in> borel_measurable (F matur)", "using 9 \\<open>0 > diff_inv\\<close>"], ["proof (prove)\nusing this:\n  0 \\<noteq> diff_inv \\<longrightarrow>\n  cls_val_process Mkt2 contr_pf matur \\<in> borel_measurable (F matur)\n  diff_inv < 0\n\ngoal (1 subgoal):\n 1. cls_val_process Mkt2 contr_pf matur \\<in> borel_measurable (F matur)", "by simp"], ["proof (state)\nthis:\n  cls_val_process Mkt2 contr_pf matur \\<in> borel_measurable (F matur)\n\ngoal (1 subgoal):\n 1. cls_val_process Mkt2 opp_pf matur \\<in> borel_measurable (F matur)", "moreover"], ["proof (state)\nthis:\n  cls_val_process Mkt2 contr_pf matur \\<in> borel_measurable (F matur)\n\ngoal (1 subgoal):\n 1. cls_val_process Mkt2 opp_pf matur \\<in> borel_measurable (F matur)", "have \"portfolio contr_pf\""], ["proof (prove)\ngoal (1 subgoal):\n 1. portfolio contr_pf", "using 8 \\<open>0 > diff_inv\\<close>"], ["proof (prove)\nusing this:\n  0 \\<noteq> diff_inv \\<longrightarrow> portfolio contr_pf\n  diff_inv < 0\n\ngoal (1 subgoal):\n 1. portfolio contr_pf", "by simp"], ["proof (state)\nthis:\n  portfolio contr_pf\n\ngoal (1 subgoal):\n 1. cls_val_process Mkt2 opp_pf matur \\<in> borel_measurable (F matur)", "moreover"], ["proof (state)\nthis:\n  portfolio contr_pf\n\ngoal (1 subgoal):\n 1. cls_val_process Mkt2 opp_pf matur \\<in> borel_measurable (F matur)", "have \"(\\<lambda>w. - 1) \\<in> borel_measurable (F matur)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>w. - (1::'c)) \\<in> borel_measurable (F matur)", "by (simp add:constant_process_borel_adapted)"], ["proof (state)\nthis:\n  (\\<lambda>w. - (1::?'c14)) \\<in> borel_measurable (F matur)\n\ngoal (1 subgoal):\n 1. cls_val_process Mkt2 opp_pf matur \\<in> borel_measurable (F matur)", "ultimately"], ["proof (chain)\npicking this:\n  cls_val_process Mkt2 contr_pf matur \\<in> borel_measurable (F matur)\n  portfolio contr_pf\n  (\\<lambda>w. - (1::?'c14)) \\<in> borel_measurable (F matur)", "show ?thesis"], ["proof (prove)\nusing this:\n  cls_val_process Mkt2 contr_pf matur \\<in> borel_measurable (F matur)\n  portfolio contr_pf\n  (\\<lambda>w. - (1::?'c14)) \\<in> borel_measurable (F matur)\n\ngoal (1 subgoal):\n 1. cls_val_process Mkt2 opp_pf matur \\<in> borel_measurable (F matur)", "using mult_comp_cls_val_process_measurable"], ["proof (prove)\nusing this:\n  cls_val_process Mkt2 contr_pf matur \\<in> borel_measurable (F matur)\n  portfolio contr_pf\n  (\\<lambda>w. - (1::?'c14)) \\<in> borel_measurable (F matur)\n  \\<lbrakk>\\<forall>n.\n              cls_val_process ?Mkt2.0 ?pf n \\<in> borel_measurable (F n);\n   portfolio ?pf;\n   \\<forall>n. ?qty (Suc n) \\<in> borel_measurable (F n)\\<rbrakk>\n  \\<Longrightarrow> \\<forall>n.\n                       cls_val_process ?Mkt2.0 (qty_mult_comp ?pf ?qty) n\n                       \\<in> borel_measurable (F n)\n\ngoal (1 subgoal):\n 1. cls_val_process Mkt2 opp_pf matur \\<in> borel_measurable (F matur)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>cls_val_process Mkt2 contr_pf matur\n             \\<in> borel_measurable (F matur);\n     portfolio contr_pf;\n     (\\<lambda>w. - (1::?'c16)) \\<in> borel_measurable (F matur);\n     \\<And>Mkt2 pf qty.\n        \\<lbrakk>\\<forall>n.\n                    cls_val_process Mkt2 pf n \\<in> borel_measurable (F n);\n         portfolio pf;\n         \\<forall>n. qty (Suc n) \\<in> borel_measurable (F n)\\<rbrakk>\n        \\<Longrightarrow> \\<forall>n.\n                             cls_val_process Mkt2 (qty_mult_comp pf qty) n\n                             \\<in> borel_measurable (F n)\\<rbrakk>\n    \\<Longrightarrow> cls_val_process Mkt2 opp_pf matur\n                      \\<in> borel_measurable (F matur)", "have \"diff_inv \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. diff_inv \\<noteq> 0", "using \\<open>diff_inv < 0\\<close>"], ["proof (prove)\nusing this:\n  diff_inv < 0\n\ngoal (1 subgoal):\n 1. diff_inv \\<noteq> 0", "by blast"], ["proof (state)\nthis:\n  diff_inv \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<lbrakk>cls_val_process Mkt2 contr_pf matur\n             \\<in> borel_measurable (F matur);\n     portfolio contr_pf;\n     (\\<lambda>w. - (1::?'c16)) \\<in> borel_measurable (F matur);\n     \\<And>Mkt2 pf qty.\n        \\<lbrakk>\\<forall>n.\n                    cls_val_process Mkt2 pf n \\<in> borel_measurable (F n);\n         portfolio pf;\n         \\<forall>n. qty (Suc n) \\<in> borel_measurable (F n)\\<rbrakk>\n        \\<Longrightarrow> \\<forall>n.\n                             cls_val_process Mkt2 (qty_mult_comp pf qty) n\n                             \\<in> borel_measurable (F n)\\<rbrakk>\n    \\<Longrightarrow> cls_val_process Mkt2 opp_pf matur\n                      \\<in> borel_measurable (F matur)", "then"], ["proof (chain)\npicking this:\n  diff_inv \\<noteq> 0", "have \"self_financing Mkt2 contr_pf\""], ["proof (prove)\nusing this:\n  diff_inv \\<noteq> 0\n\ngoal (1 subgoal):\n 1. self_financing Mkt2 contr_pf", "by (metis \"1\")"], ["proof (state)\nthis:\n  self_financing Mkt2 contr_pf\n\ngoal (1 subgoal):\n 1. \\<lbrakk>cls_val_process Mkt2 contr_pf matur\n             \\<in> borel_measurable (F matur);\n     portfolio contr_pf;\n     (\\<lambda>w. - (1::?'c16)) \\<in> borel_measurable (F matur);\n     \\<And>Mkt2 pf qty.\n        \\<lbrakk>\\<forall>n.\n                    cls_val_process Mkt2 pf n \\<in> borel_measurable (F n);\n         portfolio pf;\n         \\<forall>n. qty (Suc n) \\<in> borel_measurable (F n)\\<rbrakk>\n        \\<Longrightarrow> \\<forall>n.\n                             cls_val_process Mkt2 (qty_mult_comp pf qty) n\n                             \\<in> borel_measurable (F n)\\<rbrakk>\n    \\<Longrightarrow> cls_val_process Mkt2 opp_pf matur\n                      \\<in> borel_measurable (F matur)", "then"], ["proof (chain)\npicking this:\n  self_financing Mkt2 contr_pf", "show ?thesis"], ["proof (prove)\nusing this:\n  self_financing Mkt2 contr_pf\n\ngoal (1 subgoal):\n 1. cls_val_process Mkt2 opp_pf matur \\<in> borel_measurable (F matur)", "by (metis (no_types) \\<open>(\\<lambda>w. - 1) \\<in> borel_measurable (F matur)\\<close> \\<open>portfolio contr_pf\\<close>\n                    \\<open>self_financing Mkt2 opp_pf\\<close> \\<open>cls_val_process Mkt2 contr_pf matur \\<in> borel_measurable (F matur)\\<close>\n                    mult_comp_val_process_measurable opp_pf_def self_financingE)"], ["proof (state)\nthis:\n  cls_val_process Mkt2 opp_pf matur \\<in> borel_measurable (F matur)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  cls_val_process Mkt2 opp_pf matur \\<in> borel_measurable (F matur)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  cls_val_process Mkt2 opp_pf matur \\<in> borel_measurable (F matur)\n\ngoal (1 subgoal):\n 1. 0 < prob {w \\<in> space M. 0 < cls_val_process Mkt2 opp_pf matur w}", "moreover"], ["proof (state)\nthis:\n  cls_val_process Mkt2 opp_pf matur \\<in> borel_measurable (F matur)\n\ngoal (1 subgoal):\n 1. 0 < prob {w \\<in> space M. 0 < cls_val_process Mkt2 opp_pf matur w}", "have \"space M = space (F matur)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. space M = space (F matur)", "using filtration"], ["proof (prove)\nusing this:\n  Filtration.filtration M F\n\ngoal (1 subgoal):\n 1. space M = space (F matur)", "by (simp add: filtration_def subalgebra_def)"], ["proof (state)\nthis:\n  space M = space (F matur)\n\ngoal (1 subgoal):\n 1. 0 < prob {w \\<in> space M. 0 < cls_val_process Mkt2 opp_pf matur w}", "ultimately"], ["proof (chain)\npicking this:\n  cls_val_process Mkt2 opp_pf matur \\<in> borel_measurable (F matur)\n  space M = space (F matur)", "have \"?P \\<in> sets (F matur)\""], ["proof (prove)\nusing this:\n  cls_val_process Mkt2 opp_pf matur \\<in> borel_measurable (F matur)\n  space M = space (F matur)\n\ngoal (1 subgoal):\n 1. {w \\<in> space M. 0 < cls_val_process Mkt2 opp_pf matur w}\n    \\<in> sets (F matur)", "using borel_measurable_iff_greater[of \"val_process Mkt2 contr_pf matur\" \"F matur\"]"], ["proof (prove)\nusing this:\n  cls_val_process Mkt2 opp_pf matur \\<in> borel_measurable (F matur)\n  space M = space (F matur)\n  (val_process Mkt2 contr_pf matur \\<in> borel_measurable (F matur)) =\n  (\\<forall>a.\n      {w \\<in> space (F matur). a < val_process Mkt2 contr_pf matur w}\n      \\<in> sets (F matur))\n\ngoal (1 subgoal):\n 1. {w \\<in> space M. 0 < cls_val_process Mkt2 opp_pf matur w}\n    \\<in> sets (F matur)", "by auto"], ["proof (state)\nthis:\n  {w \\<in> space M. 0 < cls_val_process Mkt2 opp_pf matur w}\n  \\<in> sets (F matur)\n\ngoal (1 subgoal):\n 1. 0 < prob {w \\<in> space M. 0 < cls_val_process Mkt2 opp_pf matur w}", "hence \"?P \\<in> sets M\""], ["proof (prove)\nusing this:\n  {w \\<in> space M. 0 < cls_val_process Mkt2 opp_pf matur w}\n  \\<in> sets (F matur)\n\ngoal (1 subgoal):\n 1. {w \\<in> space M. 0 < cls_val_process Mkt2 opp_pf matur w} \\<in> events", "by (meson filtration filtration_def subalgebra_def subsetCE)"], ["proof (state)\nthis:\n  {w \\<in> space M. 0 < cls_val_process Mkt2 opp_pf matur w} \\<in> events\n\ngoal (1 subgoal):\n 1. 0 < prob {w \\<in> space M. 0 < cls_val_process Mkt2 opp_pf matur w}", "hence \"measure M ?P = 1\""], ["proof (prove)\nusing this:\n  {w \\<in> space M. 0 < cls_val_process Mkt2 opp_pf matur w} \\<in> events\n\ngoal (1 subgoal):\n 1. prob {w \\<in> space M. 0 < cls_val_process Mkt2 opp_pf matur w} = 1", "using  prob_Collect_eq_1[of \"\\<lambda>x. 0 < cls_val_process Mkt2 opp_pf matur x\"]\n             \\<open>AE w in M. 0 < cls_val_process Mkt2 opp_pf matur w\\<close> \\<open>0 > diff_inv\\<close>"], ["proof (prove)\nusing this:\n  {w \\<in> space M. 0 < cls_val_process Mkt2 opp_pf matur w} \\<in> events\n  {x \\<in> space M. 0 < cls_val_process Mkt2 opp_pf matur x}\n  \\<in> events \\<Longrightarrow>\n  (prob {x \\<in> space M. 0 < cls_val_process Mkt2 opp_pf matur x} = 1) =\n  (AE x in M. 0 < cls_val_process Mkt2 opp_pf matur x)\n  AE w in M. 0 < cls_val_process Mkt2 opp_pf matur w\n  diff_inv < 0\n\ngoal (1 subgoal):\n 1. prob {w \\<in> space M. 0 < cls_val_process Mkt2 opp_pf matur w} = 1", "by blast"], ["proof (state)\nthis:\n  prob {w \\<in> space M. 0 < cls_val_process Mkt2 opp_pf matur w} = 1\n\ngoal (1 subgoal):\n 1. 0 < prob {w \\<in> space M. 0 < cls_val_process Mkt2 opp_pf matur w}", "thus ?thesis"], ["proof (prove)\nusing this:\n  prob {w \\<in> space M. 0 < cls_val_process Mkt2 opp_pf matur w} = 1\n\ngoal (1 subgoal):\n 1. 0 < prob {w \\<in> space M. 0 < cls_val_process Mkt2 opp_pf matur w}", "by simp"], ["proof (state)\nthis:\n  0 < prob {w \\<in> space M. 0 < cls_val_process Mkt2 opp_pf matur w}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  0 < prob {w \\<in> space M. 0 < cls_val_process Mkt2 opp_pf matur w}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  arbitrage_process Mkt2 opp_pf\n\ngoal (1 subgoal):\n 1. \\<pi> = initial_value pf", "have \"\\<exists> p. portfolio p \\<and> support_set p \\<subseteq> stocks Mkt \\<union> {x} \\<and> arbitrage_process Mkt2 p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>p.\n       portfolio p \\<and>\n       support_set p \\<subseteq> stocks Mkt \\<union> {x} \\<and>\n       arbitrage_process Mkt2 p", "proof(intro exI conjI)"], ["proof (state)\ngoal (3 subgoals):\n 1. portfolio ?p\n 2. support_set ?p \\<subseteq> stocks Mkt \\<union> {x}\n 3. arbitrage_process Mkt2 ?p", "show \"arbitrage_process Mkt2 opp_pf\""], ["proof (prove)\ngoal (1 subgoal):\n 1. arbitrage_process Mkt2 opp_pf", "using \\<open>arbitrage_process Mkt2 opp_pf\\<close>"], ["proof (prove)\nusing this:\n  arbitrage_process Mkt2 opp_pf\n\ngoal (1 subgoal):\n 1. arbitrage_process Mkt2 opp_pf", "."], ["proof (state)\nthis:\n  arbitrage_process Mkt2 opp_pf\n\ngoal (2 subgoals):\n 1. portfolio opp_pf\n 2. support_set opp_pf \\<subseteq> stocks Mkt \\<union> {x}", "show \"portfolio opp_pf\""], ["proof (prove)\ngoal (1 subgoal):\n 1. portfolio opp_pf", "unfolding opp_pf_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. portfolio (qty_mult_comp contr_pf (\\<lambda>n w. - 1))", "using 8 \\<open>0 > diff_inv\\<close>"], ["proof (prove)\nusing this:\n  0 \\<noteq> diff_inv \\<longrightarrow> portfolio contr_pf\n  diff_inv < 0\n\ngoal (1 subgoal):\n 1. portfolio (qty_mult_comp contr_pf (\\<lambda>n w. - 1))", "by (auto simp add: mult_comp_portfolio)"], ["proof (state)\nthis:\n  portfolio opp_pf\n\ngoal (1 subgoal):\n 1. support_set opp_pf \\<subseteq> stocks Mkt \\<union> {x}", "show \"support_set opp_pf \\<subseteq> stocks Mkt \\<union> {x}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. support_set opp_pf \\<subseteq> stocks Mkt \\<union> {x}", "unfolding opp_pf_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. support_set (qty_mult_comp contr_pf (\\<lambda>n w. - 1))\n    \\<subseteq> stocks Mkt \\<union> {x}", "using 7 \\<open>0 > diff_inv\\<close>"], ["proof (prove)\nusing this:\n  0 \\<noteq> diff_inv \\<longrightarrow>\n  support_set contr_pf \\<subseteq> stocks Mkt \\<union> {x}\n  diff_inv < 0\n\ngoal (1 subgoal):\n 1. support_set (qty_mult_comp contr_pf (\\<lambda>n w. - 1))\n    \\<subseteq> stocks Mkt \\<union> {x}", "using mult_comp_support_set"], ["proof (prove)\nusing this:\n  0 \\<noteq> diff_inv \\<longrightarrow>\n  support_set contr_pf \\<subseteq> stocks Mkt \\<union> {x}\n  diff_inv < 0\n  support_set (qty_mult_comp ?pf1.0 ?qty) \\<subseteq> support_set ?pf1.0\n\ngoal (1 subgoal):\n 1. support_set (qty_mult_comp contr_pf (\\<lambda>n w. - 1))\n    \\<subseteq> stocks Mkt \\<union> {x}", "by fastforce"], ["proof (state)\nthis:\n  support_set opp_pf \\<subseteq> stocks Mkt \\<union> {x}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>p.\n     portfolio p \\<and>\n     support_set p \\<subseteq> stocks Mkt \\<union> {x} \\<and>\n     arbitrage_process Mkt2 p\n\ngoal (1 subgoal):\n 1. \\<pi> = initial_value pf", "}"], ["proof (state)\nthis:\n  diff_inv < 0 \\<Longrightarrow>\n  \\<exists>p.\n     portfolio p \\<and>\n     support_set p \\<subseteq> stocks Mkt \\<union> {x} \\<and>\n     arbitrage_process Mkt2 p\n\ngoal (1 subgoal):\n 1. \\<pi> = initial_value pf", "note negp = this"], ["proof (state)\nthis:\n  diff_inv < 0 \\<Longrightarrow>\n  \\<exists>p.\n     portfolio p \\<and>\n     support_set p \\<subseteq> stocks Mkt \\<union> {x} \\<and>\n     arbitrage_process Mkt2 p\n\ngoal (1 subgoal):\n 1. \\<pi> = initial_value pf", "{"], ["proof (state)\nthis:\n  diff_inv < 0 \\<Longrightarrow>\n  \\<exists>p.\n     portfolio p \\<and>\n     support_set p \\<subseteq> stocks Mkt \\<union> {x} \\<and>\n     arbitrage_process Mkt2 p\n\ngoal (1 subgoal):\n 1. \\<pi> = initial_value pf", "assume \"0 < diff_inv\""], ["proof (state)\nthis:\n  0 < diff_inv\n\ngoal (1 subgoal):\n 1. \\<pi> = initial_value pf", "have \"arbitrage_process Mkt2 contr_pf\""], ["proof (prove)\ngoal (1 subgoal):\n 1. arbitrage_process Mkt2 contr_pf", "proof (rule arbitrage_processI, rule exI, intro conjI)"], ["proof (state)\ngoal (5 subgoals):\n 1. self_financing Mkt2 contr_pf\n 2. trading_strategy contr_pf\n 3. \\<forall>w\\<in>space M. cls_val_process Mkt2 contr_pf 0 w = 0\n 4. AE w in M. 0 \\<le> cls_val_process Mkt2 contr_pf ?m2 w\n 5. 0 < prob {w \\<in> space M. 0 < cls_val_process Mkt2 contr_pf ?m2 w}", "show \"self_financing Mkt2 contr_pf\""], ["proof (prove)\ngoal (1 subgoal):\n 1. self_financing Mkt2 contr_pf", "using 1 \\<open>0 < diff_inv\\<close>"], ["proof (prove)\nusing this:\n  0 \\<noteq> diff_inv \\<longrightarrow> self_financing Mkt2 contr_pf\n  0 < diff_inv\n\ngoal (1 subgoal):\n 1. self_financing Mkt2 contr_pf", "by auto"], ["proof (state)\nthis:\n  self_financing Mkt2 contr_pf\n\ngoal (4 subgoals):\n 1. trading_strategy contr_pf\n 2. \\<forall>w\\<in>space M. cls_val_process Mkt2 contr_pf 0 w = 0\n 3. AE w in M. 0 \\<le> cls_val_process Mkt2 contr_pf ?m2 w\n 4. 0 < prob {w \\<in> space M. 0 < cls_val_process Mkt2 contr_pf ?m2 w}", "show \"trading_strategy contr_pf\""], ["proof (prove)\ngoal (1 subgoal):\n 1. trading_strategy contr_pf", "using 2 \\<open>0 < diff_inv\\<close>"], ["proof (prove)\nusing this:\n  0 \\<noteq> diff_inv \\<longrightarrow> trading_strategy contr_pf\n  0 < diff_inv\n\ngoal (1 subgoal):\n 1. trading_strategy contr_pf", "by auto"], ["proof (state)\nthis:\n  trading_strategy contr_pf\n\ngoal (3 subgoals):\n 1. \\<forall>w\\<in>space M. cls_val_process Mkt2 contr_pf 0 w = 0\n 2. AE w in M. 0 \\<le> cls_val_process Mkt2 contr_pf ?m2 w\n 3. 0 < prob {w \\<in> space M. 0 < cls_val_process Mkt2 contr_pf ?m2 w}", "show \"\\<forall>w\\<in>space M. cls_val_process Mkt2 contr_pf 0 w = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>w\\<in>space M. cls_val_process Mkt2 contr_pf 0 w = 0", "using 3 \\<open>0 < diff_inv\\<close>"], ["proof (prove)\nusing this:\n  0 \\<noteq> diff_inv \\<longrightarrow>\n  (\\<forall>w\\<in>space M. cls_val_process Mkt2 contr_pf 0 w = 0)\n  0 < diff_inv\n\ngoal (1 subgoal):\n 1. \\<forall>w\\<in>space M. cls_val_process Mkt2 contr_pf 0 w = 0", "by auto"], ["proof (state)\nthis:\n  \\<forall>w\\<in>space M. cls_val_process Mkt2 contr_pf 0 w = 0\n\ngoal (2 subgoals):\n 1. AE w in M. 0 \\<le> cls_val_process Mkt2 contr_pf ?m2 w\n 2. 0 < prob {w \\<in> space M. 0 < cls_val_process Mkt2 contr_pf ?m2 w}", "show \"AE w in M. 0 \\<le> cls_val_process Mkt2 contr_pf matur w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. AE w in M. 0 \\<le> cls_val_process Mkt2 contr_pf matur w", "using 4 \\<open>0 < diff_inv\\<close>"], ["proof (prove)\nusing this:\n  0 < diff_inv \\<longrightarrow>\n  (AE w in M. 0 < cls_val_process Mkt2 contr_pf matur w)\n  0 < diff_inv\n\ngoal (1 subgoal):\n 1. AE w in M. 0 \\<le> cls_val_process Mkt2 contr_pf matur w", "by auto"], ["proof (state)\nthis:\n  AE w in M. 0 \\<le> cls_val_process Mkt2 contr_pf matur w\n\ngoal (1 subgoal):\n 1. 0 < prob {w \\<in> space M. 0 < cls_val_process Mkt2 contr_pf matur w}", "show \"0 < prob {w \\<in> space M. 0 < cls_val_process Mkt2 contr_pf matur w}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < prob {w \\<in> space M. 0 < cls_val_process Mkt2 contr_pf matur w}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. 0 < prob {w \\<in> space M. 0 < cls_val_process Mkt2 contr_pf matur w}", "let ?P = \"{w\\<in> space M. 0 < cls_val_process Mkt2 contr_pf matur w}\""], ["proof (state)\ngoal (1 subgoal):\n 1. 0 < prob {w \\<in> space M. 0 < cls_val_process Mkt2 contr_pf matur w}", "have \"cls_val_process Mkt2 contr_pf matur \\<in> borel_measurable (F matur)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cls_val_process Mkt2 contr_pf matur \\<in> borel_measurable (F matur)", "using 9 \\<open>0 < diff_inv\\<close>"], ["proof (prove)\nusing this:\n  0 \\<noteq> diff_inv \\<longrightarrow>\n  cls_val_process Mkt2 contr_pf matur \\<in> borel_measurable (F matur)\n  0 < diff_inv\n\ngoal (1 subgoal):\n 1. cls_val_process Mkt2 contr_pf matur \\<in> borel_measurable (F matur)", "by auto"], ["proof (state)\nthis:\n  cls_val_process Mkt2 contr_pf matur \\<in> borel_measurable (F matur)\n\ngoal (1 subgoal):\n 1. 0 < prob {w \\<in> space M. 0 < cls_val_process Mkt2 contr_pf matur w}", "moreover"], ["proof (state)\nthis:\n  cls_val_process Mkt2 contr_pf matur \\<in> borel_measurable (F matur)\n\ngoal (1 subgoal):\n 1. 0 < prob {w \\<in> space M. 0 < cls_val_process Mkt2 contr_pf matur w}", "have \"space M = space (F matur)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. space M = space (F matur)", "using filtration"], ["proof (prove)\nusing this:\n  Filtration.filtration M F\n\ngoal (1 subgoal):\n 1. space M = space (F matur)", "by (simp add: filtration_def subalgebra_def)"], ["proof (state)\nthis:\n  space M = space (F matur)\n\ngoal (1 subgoal):\n 1. 0 < prob {w \\<in> space M. 0 < cls_val_process Mkt2 contr_pf matur w}", "ultimately"], ["proof (chain)\npicking this:\n  cls_val_process Mkt2 contr_pf matur \\<in> borel_measurable (F matur)\n  space M = space (F matur)", "have \"?P \\<in> sets (F matur)\""], ["proof (prove)\nusing this:\n  cls_val_process Mkt2 contr_pf matur \\<in> borel_measurable (F matur)\n  space M = space (F matur)\n\ngoal (1 subgoal):\n 1. {w \\<in> space M. 0 < cls_val_process Mkt2 contr_pf matur w}\n    \\<in> sets (F matur)", "using borel_measurable_iff_greater[of \"val_process Mkt2 contr_pf matur\" \"F matur\"]"], ["proof (prove)\nusing this:\n  cls_val_process Mkt2 contr_pf matur \\<in> borel_measurable (F matur)\n  space M = space (F matur)\n  (val_process Mkt2 contr_pf matur \\<in> borel_measurable (F matur)) =\n  (\\<forall>a.\n      {w \\<in> space (F matur). a < val_process Mkt2 contr_pf matur w}\n      \\<in> sets (F matur))\n\ngoal (1 subgoal):\n 1. {w \\<in> space M. 0 < cls_val_process Mkt2 contr_pf matur w}\n    \\<in> sets (F matur)", "by auto"], ["proof (state)\nthis:\n  {w \\<in> space M. 0 < cls_val_process Mkt2 contr_pf matur w}\n  \\<in> sets (F matur)\n\ngoal (1 subgoal):\n 1. 0 < prob {w \\<in> space M. 0 < cls_val_process Mkt2 contr_pf matur w}", "hence \"?P \\<in> sets M\""], ["proof (prove)\nusing this:\n  {w \\<in> space M. 0 < cls_val_process Mkt2 contr_pf matur w}\n  \\<in> sets (F matur)\n\ngoal (1 subgoal):\n 1. {w \\<in> space M. 0 < cls_val_process Mkt2 contr_pf matur w}\n    \\<in> events", "by (meson filtration filtration_def subalgebra_def subsetCE)"], ["proof (state)\nthis:\n  {w \\<in> space M. 0 < cls_val_process Mkt2 contr_pf matur w} \\<in> events\n\ngoal (1 subgoal):\n 1. 0 < prob {w \\<in> space M. 0 < cls_val_process Mkt2 contr_pf matur w}", "hence \"measure M ?P = 1\""], ["proof (prove)\nusing this:\n  {w \\<in> space M. 0 < cls_val_process Mkt2 contr_pf matur w} \\<in> events\n\ngoal (1 subgoal):\n 1. prob {w \\<in> space M. 0 < cls_val_process Mkt2 contr_pf matur w} = 1", "using  prob_Collect_eq_1[of \"\\<lambda>x. 0 < cls_val_process Mkt2 contr_pf matur x\"]\n                 4 \\<open>0 < diff_inv\\<close>"], ["proof (prove)\nusing this:\n  {w \\<in> space M. 0 < cls_val_process Mkt2 contr_pf matur w} \\<in> events\n  {x \\<in> space M. 0 < cls_val_process Mkt2 contr_pf matur x}\n  \\<in> events \\<Longrightarrow>\n  (prob {x \\<in> space M. 0 < cls_val_process Mkt2 contr_pf matur x} = 1) =\n  (AE x in M. 0 < cls_val_process Mkt2 contr_pf matur x)\n  0 < diff_inv \\<longrightarrow>\n  (AE w in M. 0 < cls_val_process Mkt2 contr_pf matur w)\n  0 < diff_inv\n\ngoal (1 subgoal):\n 1. prob {w \\<in> space M. 0 < cls_val_process Mkt2 contr_pf matur w} = 1", "by blast"], ["proof (state)\nthis:\n  prob {w \\<in> space M. 0 < cls_val_process Mkt2 contr_pf matur w} = 1\n\ngoal (1 subgoal):\n 1. 0 < prob {w \\<in> space M. 0 < cls_val_process Mkt2 contr_pf matur w}", "thus ?thesis"], ["proof (prove)\nusing this:\n  prob {w \\<in> space M. 0 < cls_val_process Mkt2 contr_pf matur w} = 1\n\ngoal (1 subgoal):\n 1. 0 < prob {w \\<in> space M. 0 < cls_val_process Mkt2 contr_pf matur w}", "by simp"], ["proof (state)\nthis:\n  0 < prob {w \\<in> space M. 0 < cls_val_process Mkt2 contr_pf matur w}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  0 < prob {w \\<in> space M. 0 < cls_val_process Mkt2 contr_pf matur w}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  arbitrage_process Mkt2 contr_pf\n\ngoal (1 subgoal):\n 1. \\<pi> = initial_value pf", "have \"\\<exists> p. portfolio p \\<and> support_set p \\<subseteq> stocks Mkt \\<union> {x} \\<and> arbitrage_process Mkt2 p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>p.\n       portfolio p \\<and>\n       support_set p \\<subseteq> stocks Mkt \\<union> {x} \\<and>\n       arbitrage_process Mkt2 p", "proof(intro exI conjI)"], ["proof (state)\ngoal (3 subgoals):\n 1. portfolio ?p\n 2. support_set ?p \\<subseteq> stocks Mkt \\<union> {x}\n 3. arbitrage_process Mkt2 ?p", "show \"arbitrage_process Mkt2 contr_pf\""], ["proof (prove)\ngoal (1 subgoal):\n 1. arbitrage_process Mkt2 contr_pf", "using \\<open>arbitrage_process Mkt2 contr_pf\\<close>"], ["proof (prove)\nusing this:\n  arbitrage_process Mkt2 contr_pf\n\ngoal (1 subgoal):\n 1. arbitrage_process Mkt2 contr_pf", "."], ["proof (state)\nthis:\n  arbitrage_process Mkt2 contr_pf\n\ngoal (2 subgoals):\n 1. portfolio contr_pf\n 2. support_set contr_pf \\<subseteq> stocks Mkt \\<union> {x}", "show \"portfolio contr_pf\""], ["proof (prove)\ngoal (1 subgoal):\n 1. portfolio contr_pf", "using 8 \\<open>0 < diff_inv\\<close>"], ["proof (prove)\nusing this:\n  0 \\<noteq> diff_inv \\<longrightarrow> portfolio contr_pf\n  0 < diff_inv\n\ngoal (1 subgoal):\n 1. portfolio contr_pf", "by auto"], ["proof (state)\nthis:\n  portfolio contr_pf\n\ngoal (1 subgoal):\n 1. support_set contr_pf \\<subseteq> stocks Mkt \\<union> {x}", "show \"support_set contr_pf \\<subseteq> stocks Mkt \\<union> {x}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. support_set contr_pf \\<subseteq> stocks Mkt \\<union> {x}", "using 7 \\<open>0 < diff_inv\\<close>"], ["proof (prove)\nusing this:\n  0 \\<noteq> diff_inv \\<longrightarrow>\n  support_set contr_pf \\<subseteq> stocks Mkt \\<union> {x}\n  0 < diff_inv\n\ngoal (1 subgoal):\n 1. support_set contr_pf \\<subseteq> stocks Mkt \\<union> {x}", "by auto"], ["proof (state)\nthis:\n  support_set contr_pf \\<subseteq> stocks Mkt \\<union> {x}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>p.\n     portfolio p \\<and>\n     support_set p \\<subseteq> stocks Mkt \\<union> {x} \\<and>\n     arbitrage_process Mkt2 p\n\ngoal (1 subgoal):\n 1. \\<pi> = initial_value pf", "}"], ["proof (state)\nthis:\n  0 < diff_inv \\<Longrightarrow>\n  \\<exists>p.\n     portfolio p \\<and>\n     support_set p \\<subseteq> stocks Mkt \\<union> {x} \\<and>\n     arbitrage_process Mkt2 p\n\ngoal (1 subgoal):\n 1. \\<pi> = initial_value pf", "note posp = this"], ["proof (state)\nthis:\n  0 < diff_inv \\<Longrightarrow>\n  \\<exists>p.\n     portfolio p \\<and>\n     support_set p \\<subseteq> stocks Mkt \\<union> {x} \\<and>\n     arbitrage_process Mkt2 p\n\ngoal (1 subgoal):\n 1. \\<pi> = initial_value pf", "have \"diff_inv \\<noteq> 0 \\<longrightarrow> \\<not>(\\<exists> pr. price_structure der matur \\<pi> pr \\<and>\n        (\\<forall> x. (x\\<notin> stocks Mkt \\<longrightarrow>\n          (\\<forall> Mkt2 p. (coincides_on Mkt Mkt2 (stocks Mkt)) \\<and> (prices Mkt2 x = pr) \\<and> portfolio p \\<and> support_set p \\<subseteq> stocks Mkt \\<union> {x} \\<longrightarrow>\n            \\<not> arbitrage_process Mkt2 p))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. diff_inv \\<noteq> 0 \\<longrightarrow>\n    (\\<nexists>pr.\n        price_structure der matur \\<pi> pr \\<and>\n        (\\<forall>x.\n            x \\<notin> stocks Mkt \\<longrightarrow>\n            (\\<forall>Mkt2 p.\n                coincides_on Mkt Mkt2 (stocks Mkt) \\<and>\n                prices Mkt2 x = pr \\<and>\n                portfolio p \\<and>\n                support_set p\n                \\<subseteq> stocks Mkt \\<union> {x} \\<longrightarrow>\n                \\<not> arbitrage_process Mkt2 p)))", "using \\<open>coincides_on Mkt Mkt2 (stocks Mkt)\\<close> \\<open>prices Mkt2 x = pr\\<close> \\<open>x \\<notin> stocks Mkt\\<close> xasset posp negp"], ["proof (prove)\nusing this:\n  coincides_on Mkt Mkt2 (stocks Mkt)\n  prices Mkt2 x = pr\n  x \\<notin> stocks Mkt\n  \\<forall>x.\n     x \\<notin> stocks Mkt \\<longrightarrow>\n     (\\<forall>Mkt2 p.\n         coincides_on Mkt Mkt2 (stocks Mkt) \\<and>\n         prices Mkt2 x = pr \\<and>\n         portfolio p \\<and>\n         support_set p \\<subseteq> stocks Mkt \\<union> {x} \\<longrightarrow>\n         \\<not> arbitrage_process Mkt2 p)\n  0 < diff_inv \\<Longrightarrow>\n  \\<exists>p.\n     portfolio p \\<and>\n     support_set p \\<subseteq> stocks Mkt \\<union> {x} \\<and>\n     arbitrage_process Mkt2 p\n  diff_inv < 0 \\<Longrightarrow>\n  \\<exists>p.\n     portfolio p \\<and>\n     support_set p \\<subseteq> stocks Mkt \\<union> {x} \\<and>\n     arbitrage_process Mkt2 p\n\ngoal (1 subgoal):\n 1. diff_inv \\<noteq> 0 \\<longrightarrow>\n    (\\<nexists>pr.\n        price_structure der matur \\<pi> pr \\<and>\n        (\\<forall>x.\n            x \\<notin> stocks Mkt \\<longrightarrow>\n            (\\<forall>Mkt2 p.\n                coincides_on Mkt Mkt2 (stocks Mkt) \\<and>\n                prices Mkt2 x = pr \\<and>\n                portfolio p \\<and>\n                support_set p\n                \\<subseteq> stocks Mkt \\<union> {x} \\<longrightarrow>\n                \\<not> arbitrage_process Mkt2 p)))", "by force"], ["proof (state)\nthis:\n  diff_inv \\<noteq> 0 \\<longrightarrow>\n  (\\<nexists>pr.\n      price_structure der matur \\<pi> pr \\<and>\n      (\\<forall>x.\n          x \\<notin> stocks Mkt \\<longrightarrow>\n          (\\<forall>Mkt2 p.\n              coincides_on Mkt Mkt2 (stocks Mkt) \\<and>\n              prices Mkt2 x = pr \\<and>\n              portfolio p \\<and>\n              support_set p\n              \\<subseteq> stocks Mkt \\<union> {x} \\<longrightarrow>\n              \\<not> arbitrage_process Mkt2 p)))\n\ngoal (1 subgoal):\n 1. \\<pi> = initial_value pf", "}"], ["proof (state)\nthis:\n  \\<lbrakk>?x15 \\<notin> stocks Mkt; coincides_on Mkt ?Mkt2.15 (stocks Mkt);\n   prices ?Mkt2.15 ?x15 = pr\\<rbrakk>\n  \\<Longrightarrow> diff_inv \\<noteq> 0 \\<longrightarrow>\n                    (\\<nexists>pr.\n                        price_structure der matur \\<pi> pr \\<and>\n                        (\\<forall>x.\n                            x \\<notin> stocks Mkt \\<longrightarrow>\n                            (\\<forall>Mkt2 p.\n                                coincides_on Mkt Mkt2 (stocks Mkt) \\<and>\n                                prices Mkt2 x = pr \\<and>\n                                portfolio p \\<and>\n                                support_set p\n                                \\<subseteq> stocks Mkt \\<union>\n      {x} \\<longrightarrow>\n                                \\<not> arbitrage_process Mkt2 p)))\n\ngoal (1 subgoal):\n 1. \\<pi> = initial_value pf", "hence \"diff_inv = 0\""], ["proof (prove)\nusing this:\n  \\<lbrakk>?x15 \\<notin> stocks Mkt; coincides_on Mkt ?Mkt2.15 (stocks Mkt);\n   prices ?Mkt2.15 ?x15 = pr\\<rbrakk>\n  \\<Longrightarrow> diff_inv \\<noteq> 0 \\<longrightarrow>\n                    (\\<nexists>pr.\n                        price_structure der matur \\<pi> pr \\<and>\n                        (\\<forall>x.\n                            x \\<notin> stocks Mkt \\<longrightarrow>\n                            (\\<forall>Mkt2 p.\n                                coincides_on Mkt Mkt2 (stocks Mkt) \\<and>\n                                prices Mkt2 x = pr \\<and>\n                                portfolio p \\<and>\n                                support_set p\n                                \\<subseteq> stocks Mkt \\<union>\n      {x} \\<longrightarrow>\n                                \\<not> arbitrage_process Mkt2 p)))\n\ngoal (1 subgoal):\n 1. diff_inv = 0", "using fix_asset_price expr"], ["proof (prove)\nusing this:\n  \\<lbrakk>?x15 \\<notin> stocks Mkt; coincides_on Mkt ?Mkt2.15 (stocks Mkt);\n   prices ?Mkt2.15 ?x15 = pr\\<rbrakk>\n  \\<Longrightarrow> diff_inv \\<noteq> 0 \\<longrightarrow>\n                    (\\<nexists>pr.\n                        price_structure der matur \\<pi> pr \\<and>\n                        (\\<forall>x.\n                            x \\<notin> stocks Mkt \\<longrightarrow>\n                            (\\<forall>Mkt2 p.\n                                coincides_on Mkt Mkt2 (stocks Mkt) \\<and>\n                                prices Mkt2 x = pr \\<and>\n                                portfolio p \\<and>\n                                support_set p\n                                \\<subseteq> stocks Mkt \\<union>\n      {x} \\<longrightarrow>\n                                \\<not> arbitrage_process Mkt2 p)))\n  \\<exists>x Mkt2.\n     x \\<notin> stocks ?Mkt \\<and>\n     coincides_on ?Mkt Mkt2 (stocks ?Mkt) \\<and> prices Mkt2 x = ?pr\n  \\<exists>pr.\n     price_structure der matur \\<pi> pr \\<and>\n     (\\<forall>x.\n         x \\<notin> stocks Mkt \\<longrightarrow>\n         (\\<forall>Mkt2 p.\n             coincides_on Mkt Mkt2 (stocks Mkt) \\<and>\n             prices Mkt2 x = pr \\<and>\n             portfolio p \\<and>\n             support_set p\n             \\<subseteq> stocks Mkt \\<union> {x} \\<longrightarrow>\n             \\<not> arbitrage_process Mkt2 p))\n\ngoal (1 subgoal):\n 1. diff_inv = 0", "by metis"], ["proof (state)\nthis:\n  diff_inv = 0\n\ngoal (1 subgoal):\n 1. \\<pi> = initial_value pf", "moreover"], ["proof (state)\nthis:\n  diff_inv = 0\n\ngoal (1 subgoal):\n 1. \\<pi> = initial_value pf", "have \"constant_image (prices Mkt pos_stock 0) > 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < constant_image (prices Mkt pos_stock 0)", "by (simp add: adapted_init constant_image_pos pos_stock_borel_adapted positive)"], ["proof (state)\nthis:\n  0 < constant_image (prices Mkt pos_stock 0)\n\ngoal (1 subgoal):\n 1. \\<pi> = initial_value pf", "ultimately"], ["proof (chain)\npicking this:\n  diff_inv = 0\n  0 < constant_image (prices Mkt pos_stock 0)", "show ?thesis"], ["proof (prove)\nusing this:\n  diff_inv = 0\n  0 < constant_image (prices Mkt pos_stock 0)\n\ngoal (1 subgoal):\n 1. \\<pi> = initial_value pf", "unfolding diff_inv_def"], ["proof (prove)\nusing this:\n  (\\<pi> - initial_value pf) / constant_image (prices Mkt pos_stock 0) = 0\n  0 < constant_image (prices Mkt pos_stock 0)\n\ngoal (1 subgoal):\n 1. \\<pi> = initial_value pf", "by auto"], ["proof (state)\nthis:\n  \\<pi> = initial_value pf\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Risk-neutral probability space\\<close>"], ["", "subsubsection \\<open>risk-free rate and discount factor processes\\<close>"], ["", "fun disc_rfr_proc:: \"real \\<Rightarrow> nat \\<Rightarrow> 'a \\<Rightarrow> real\"\nwhere\n  rfr_base: \"(disc_rfr_proc r) 0 w = 1\"|\n  rfr_step: \"(disc_rfr_proc r) (Suc n) w = (1+r) * (disc_rfr_proc r) n w\""], ["", "lemma disc_rfr_proc_borel_measurable:\n  shows \"(disc_rfr_proc r) n \\<in> borel_measurable M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. disc_rfr_proc r n \\<in> borel_measurable M", "proof (induct n)"], ["proof (state)\ngoal (2 subgoals):\n 1. disc_rfr_proc r 0 \\<in> borel_measurable M\n 2. \\<And>n.\n       disc_rfr_proc r n \\<in> borel_measurable M \\<Longrightarrow>\n       disc_rfr_proc r (Suc n) \\<in> borel_measurable M", "case (Suc n)"], ["proof (state)\nthis:\n  disc_rfr_proc r n \\<in> borel_measurable M\n\ngoal (2 subgoals):\n 1. disc_rfr_proc r 0 \\<in> borel_measurable M\n 2. \\<And>n.\n       disc_rfr_proc r n \\<in> borel_measurable M \\<Longrightarrow>\n       disc_rfr_proc r (Suc n) \\<in> borel_measurable M", "thus ?case"], ["proof (prove)\nusing this:\n  disc_rfr_proc r n \\<in> borel_measurable M\n\ngoal (1 subgoal):\n 1. disc_rfr_proc r (Suc n) \\<in> borel_measurable M", "by (simp add:borel_measurable_times)"], ["proof (state)\nthis:\n  disc_rfr_proc r (Suc n) \\<in> borel_measurable M\n\ngoal (1 subgoal):\n 1. disc_rfr_proc r 0 \\<in> borel_measurable M", "qed auto"], ["", "lemma disc_rfr_proc_nonrandom:\n  fixes r::real\n  shows \"\\<And>n. disc_rfr_proc r n \\<in> borel_measurable (F 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n. disc_rfr_proc r n \\<in> borel_measurable (F (0::'b))", "using disc_rfr_proc_borel_measurable"], ["proof (prove)\nusing this:\n  disc_rfr_proc ?r ?n \\<in> borel_measurable ?M\n\ngoal (1 subgoal):\n 1. \\<And>n. disc_rfr_proc r n \\<in> borel_measurable (F (0::'b))", "by auto"], ["", "lemma (in disc_equity_market) disc_rfr_constant_time:\nshows \"\\<exists>c. \\<forall>w \\<in> space (F 0).  (disc_rfr_proc r n) w = c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>c. \\<forall>w\\<in>space (F 0). disc_rfr_proc r n w = c", "proof (rule triv_measurable_cst)"], ["proof (state)\ngoal (4 subgoals):\n 1. space (F 0) = space ?M\n 2. space ?M \\<noteq> {}\n 3. sets (F 0) = {{}, space ?M}\n 4. disc_rfr_proc r n \\<in> borel_measurable (F 0)", "show \"space (F 0) = space M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. space (F 0) = space M", "using filtration"], ["proof (prove)\nusing this:\n  Filtration.filtration M F\n\ngoal (1 subgoal):\n 1. space (F 0) = space M", "by (simp add:filtration_def subalgebra_def)"], ["proof (state)\nthis:\n  space (F 0) = space M\n\ngoal (3 subgoals):\n 1. space M \\<noteq> {}\n 2. sets (F 0) = {{}, space M}\n 3. disc_rfr_proc r n \\<in> borel_measurable (F 0)", "show \"sets (F 0) = {{}, space M}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sets (F 0) = {{}, space M}", "using info_disc_filtr"], ["proof (prove)\nusing this:\n  disc_filtr M F \\<and> sets (F \\<bottom>) = {{}, space M}\n\ngoal (1 subgoal):\n 1. sets (F 0) = {{}, space M}", "by (simp add: bot_nat_def init_triv_filt_def)"], ["proof (state)\nthis:\n  sets (F 0) = {{}, space M}\n\ngoal (2 subgoals):\n 1. space M \\<noteq> {}\n 2. disc_rfr_proc r n \\<in> borel_measurable (F 0)", "show \"(disc_rfr_proc r n) \\<in> borel_measurable (F 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. disc_rfr_proc r n \\<in> borel_measurable (F 0)", "using disc_rfr_proc_nonrandom"], ["proof (prove)\nusing this:\n  disc_rfr_proc ?r ?n \\<in> borel_measurable (?F (0::?'b))\n\ngoal (1 subgoal):\n 1. disc_rfr_proc r n \\<in> borel_measurable (F 0)", "by blast"], ["proof (state)\nthis:\n  disc_rfr_proc r n \\<in> borel_measurable (F 0)\n\ngoal (1 subgoal):\n 1. space M \\<noteq> {}", "show \"space M \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. space M \\<noteq> {}", "by (simp add:not_empty)"], ["proof (state)\nthis:\n  space M \\<noteq> {}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in disc_filtr_prob_space) disc_rfr_proc_borel_adapted:\n  shows \"borel_adapt_stoch_proc F (disc_rfr_proc r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. borel_adapt_stoch_proc F (disc_rfr_proc r)", "unfolding adapt_stoch_proc_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>t. disc_rfr_proc r t \\<in> borel_measurable (F t)", "using disc_rfr_proc_nonrandom\n         filtration"], ["proof (prove)\nusing this:\n  disc_rfr_proc ?r ?n \\<in> borel_measurable (?F (0::?'b))\n  Filtration.filtration M F\n\ngoal (1 subgoal):\n 1. \\<forall>t. disc_rfr_proc r t \\<in> borel_measurable (F t)", "unfolding filtration_def"], ["proof (prove)\nusing this:\n  disc_rfr_proc ?r ?n \\<in> borel_measurable (?F (0::?'b))\n  (\\<forall>t. subalgebra M (F t)) \\<and>\n  (\\<forall>s t. s \\<le> t \\<longrightarrow> subalgebra (F t) (F s))\n\ngoal (1 subgoal):\n 1. \\<forall>t. disc_rfr_proc r t \\<in> borel_measurable (F t)", "by (meson increasing_measurable_info le0)"], ["", "lemma disc_rfr_proc_positive:\n  assumes \"-1 < r\"\n  shows \"\\<And>n w . 0 < disc_rfr_proc r n w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n w. 0 < disc_rfr_proc r n w", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n w. 0 < disc_rfr_proc r n w", "fix n"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n w. 0 < disc_rfr_proc r n w", "fix w::'a"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n w. 0 < disc_rfr_proc r n w", "show \"0 < disc_rfr_proc r n w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < disc_rfr_proc r n w", "proof (induct n)"], ["proof (state)\ngoal (2 subgoals):\n 1. 0 < disc_rfr_proc r 0 w\n 2. \\<And>n.\n       0 < disc_rfr_proc r n w \\<Longrightarrow>\n       0 < disc_rfr_proc r (Suc n) w", "case 0"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. 0 < disc_rfr_proc r 0 w\n 2. \\<And>n.\n       0 < disc_rfr_proc r n w \\<Longrightarrow>\n       0 < disc_rfr_proc r (Suc n) w", "thus ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < disc_rfr_proc r 0 w", "using assms  \"disc_rfr_proc.simps\""], ["proof (prove)\nusing this:\n  - 1 < r\n  disc_rfr_proc ?r 0 ?w = 1\n  disc_rfr_proc ?r (Suc ?n) ?w = (1 + ?r) * disc_rfr_proc ?r ?n ?w\n\ngoal (1 subgoal):\n 1. 0 < disc_rfr_proc r 0 w", "by simp"], ["proof (state)\nthis:\n  0 < disc_rfr_proc r 0 w\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       0 < disc_rfr_proc r n w \\<Longrightarrow>\n       0 < disc_rfr_proc r (Suc n) w", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       0 < disc_rfr_proc r n w \\<Longrightarrow>\n       0 < disc_rfr_proc r (Suc n) w", "case (Suc n)"], ["proof (state)\nthis:\n  0 < disc_rfr_proc r n w\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       0 < disc_rfr_proc r n w \\<Longrightarrow>\n       0 < disc_rfr_proc r (Suc n) w", "thus ?case"], ["proof (prove)\nusing this:\n  0 < disc_rfr_proc r n w\n\ngoal (1 subgoal):\n 1. 0 < disc_rfr_proc r (Suc n) w", "using  assms \"disc_rfr_proc.simps\""], ["proof (prove)\nusing this:\n  0 < disc_rfr_proc r n w\n  - 1 < r\n  disc_rfr_proc ?r 0 ?w = 1\n  disc_rfr_proc ?r (Suc ?n) ?w = (1 + ?r) * disc_rfr_proc ?r ?n ?w\n\ngoal (1 subgoal):\n 1. 0 < disc_rfr_proc r (Suc n) w", "by simp"], ["proof (state)\nthis:\n  0 < disc_rfr_proc r (Suc n) w\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  0 < disc_rfr_proc r n w\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in prob_space) disc_rfr_constant_time_pos:\n  assumes \"-1 < r\"\nshows \"\\<exists>c > 0. \\<forall>w \\<in> space M.  (disc_rfr_proc r n) w = c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>c>0. \\<forall>w\\<in>space M. disc_rfr_proc r n w = c", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>c>0. \\<forall>w\\<in>space M. disc_rfr_proc r n w = c", "let ?F = \"sigma (space M) {{}, space M}\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>c>0. \\<forall>w\\<in>space M. disc_rfr_proc r n w = c", "have  ex: \"\\<exists>c. \\<forall>w \\<in> space ?F.  (disc_rfr_proc r n) w = c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>c.\n       \\<forall>w\\<in>space (sigma (space M) {{}, space M}).\n          disc_rfr_proc r n w = c", "proof (rule triv_measurable_cst)"], ["proof (state)\ngoal (4 subgoals):\n 1. space (sigma (space M) {{}, space M}) = space ?M\n 2. space ?M \\<noteq> {}\n 3. sets (sigma (space M) {{}, space M}) = {{}, space ?M}\n 4. disc_rfr_proc r n \\<in> borel_measurable (sigma (space M) {{}, space M})", "show \"space ?F = space M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. space (sigma (space M) {{}, space M}) = space M", "by simp"], ["proof (state)\nthis:\n  space (sigma (space M) {{}, space M}) = space M\n\ngoal (3 subgoals):\n 1. space M \\<noteq> {}\n 2. sets (sigma (space M) {{}, space M}) = {{}, space M}\n 3. disc_rfr_proc r n \\<in> borel_measurable (sigma (space M) {{}, space M})", "show \"sets ?F = {{}, space M}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sets (sigma (space M) {{}, space M}) = {{}, space M}", "by (meson sigma_algebra.sets_measure_of_eq sigma_algebra_trivial)"], ["proof (state)\nthis:\n  sets (sigma (space M) {{}, space M}) = {{}, space M}\n\ngoal (2 subgoals):\n 1. space M \\<noteq> {}\n 2. disc_rfr_proc r n \\<in> borel_measurable (sigma (space M) {{}, space M})", "show \"(disc_rfr_proc r n) \\<in> borel_measurable ?F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. disc_rfr_proc r n \\<in> borel_measurable (sigma (space M) {{}, space M})", "using disc_rfr_proc_borel_measurable"], ["proof (prove)\nusing this:\n  disc_rfr_proc ?r ?n \\<in> borel_measurable ?M\n\ngoal (1 subgoal):\n 1. disc_rfr_proc r n \\<in> borel_measurable (sigma (space M) {{}, space M})", "by blast"], ["proof (state)\nthis:\n  disc_rfr_proc r n \\<in> borel_measurable (sigma (space M) {{}, space M})\n\ngoal (1 subgoal):\n 1. space M \\<noteq> {}", "show \"space M \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. space M \\<noteq> {}", "by (simp add:not_empty)"], ["proof (state)\nthis:\n  space M \\<noteq> {}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>c.\n     \\<forall>w\\<in>space (sigma (space M) {{}, space M}).\n        disc_rfr_proc r n w = c\n\ngoal (1 subgoal):\n 1. \\<exists>c>0. \\<forall>w\\<in>space M. disc_rfr_proc r n w = c", "from this"], ["proof (chain)\npicking this:\n  \\<exists>c.\n     \\<forall>w\\<in>space (sigma (space M) {{}, space M}).\n        disc_rfr_proc r n w = c", "obtain c where \"\\<forall>w \\<in> space ?F.  (disc_rfr_proc r n) w = c\""], ["proof (prove)\nusing this:\n  \\<exists>c.\n     \\<forall>w\\<in>space (sigma (space M) {{}, space M}).\n        disc_rfr_proc r n w = c\n\ngoal (1 subgoal):\n 1. (\\<And>c.\n        \\<forall>w\\<in>space (sigma (space M) {{}, space M}).\n           disc_rfr_proc r n w = c \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  \\<forall>w\\<in>space (sigma (space M) {{}, space M}).\n     disc_rfr_proc r n w = c\n\ngoal (1 subgoal):\n 1. \\<exists>c>0. \\<forall>w\\<in>space M. disc_rfr_proc r n w = c", "note cprops = this"], ["proof (state)\nthis:\n  \\<forall>w\\<in>space (sigma (space M) {{}, space M}).\n     disc_rfr_proc r n w = c\n\ngoal (1 subgoal):\n 1. \\<exists>c>0. \\<forall>w\\<in>space M. disc_rfr_proc r n w = c", "have \"c>0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < c", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. 0 < c", "have \"\\<exists> w. w\\<in> space M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>w. w \\<in> space M", "using subprob_not_empty"], ["proof (prove)\nusing this:\n  space M \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<exists>w. w \\<in> space M", "by blast"], ["proof (state)\nthis:\n  \\<exists>w. w \\<in> space M\n\ngoal (1 subgoal):\n 1. 0 < c", "from this"], ["proof (chain)\npicking this:\n  \\<exists>w. w \\<in> space M", "obtain w where \"w\\<in> space M\""], ["proof (prove)\nusing this:\n  \\<exists>w. w \\<in> space M\n\ngoal (1 subgoal):\n 1. (\\<And>w. w \\<in> space M \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  w \\<in> space M\n\ngoal (1 subgoal):\n 1. 0 < c", "hence \"c = disc_rfr_proc r n w\""], ["proof (prove)\nusing this:\n  w \\<in> space M\n\ngoal (1 subgoal):\n 1. c = disc_rfr_proc r n w", "using cprops"], ["proof (prove)\nusing this:\n  w \\<in> space M\n  \\<forall>w\\<in>space (sigma (space M) {{}, space M}).\n     disc_rfr_proc r n w = c\n\ngoal (1 subgoal):\n 1. c = disc_rfr_proc r n w", "by simp"], ["proof (state)\nthis:\n  c = disc_rfr_proc r n w\n\ngoal (1 subgoal):\n 1. 0 < c", "also"], ["proof (state)\nthis:\n  c = disc_rfr_proc r n w\n\ngoal (1 subgoal):\n 1. 0 < c", "have \"... > 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < disc_rfr_proc r n w", "using disc_rfr_proc_positive[of r n] assms"], ["proof (prove)\nusing this:\n  - 1 < r \\<Longrightarrow> 0 < disc_rfr_proc r n ?w\n  - 1 < r\n\ngoal (1 subgoal):\n 1. 0 < disc_rfr_proc r n w", "by simp"], ["proof (state)\nthis:\n  0 < disc_rfr_proc r n w\n\ngoal (1 subgoal):\n 1. 0 < c", "finally"], ["proof (chain)\npicking this:\n  0 < c", "show ?thesis"], ["proof (prove)\nusing this:\n  0 < c\n\ngoal (1 subgoal):\n 1. 0 < c", "."], ["proof (state)\nthis:\n  0 < c\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  0 < c\n\ngoal (1 subgoal):\n 1. \\<exists>c>0. \\<forall>w\\<in>space M. disc_rfr_proc r n w = c", "moreover"], ["proof (state)\nthis:\n  0 < c\n\ngoal (1 subgoal):\n 1. \\<exists>c>0. \\<forall>w\\<in>space M. disc_rfr_proc r n w = c", "have \"space M = space ?F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. space M = space (sigma (space M) {{}, space M})", "by simp"], ["proof (state)\nthis:\n  space M = space (sigma (space M) {{}, space M})\n\ngoal (1 subgoal):\n 1. \\<exists>c>0. \\<forall>w\\<in>space M. disc_rfr_proc r n w = c", "ultimately"], ["proof (chain)\npicking this:\n  0 < c\n  space M = space (sigma (space M) {{}, space M})", "show ?thesis"], ["proof (prove)\nusing this:\n  0 < c\n  space M = space (sigma (space M) {{}, space M})\n\ngoal (1 subgoal):\n 1. \\<exists>c>0. \\<forall>w\\<in>space M. disc_rfr_proc r n w = c", "using ex"], ["proof (prove)\nusing this:\n  0 < c\n  space M = space (sigma (space M) {{}, space M})\n  \\<exists>c.\n     \\<forall>w\\<in>space (sigma (space M) {{}, space M}).\n        disc_rfr_proc r n w = c\n\ngoal (1 subgoal):\n 1. \\<exists>c>0. \\<forall>w\\<in>space M. disc_rfr_proc r n w = c", "using cprops"], ["proof (prove)\nusing this:\n  0 < c\n  space M = space (sigma (space M) {{}, space M})\n  \\<exists>c.\n     \\<forall>w\\<in>space (sigma (space M) {{}, space M}).\n        disc_rfr_proc r n w = c\n  \\<forall>w\\<in>space (sigma (space M) {{}, space M}).\n     disc_rfr_proc r n w = c\n\ngoal (1 subgoal):\n 1. \\<exists>c>0. \\<forall>w\\<in>space M. disc_rfr_proc r n w = c", "by blast"], ["proof (state)\nthis:\n  \\<exists>c>0. \\<forall>w\\<in>space M. disc_rfr_proc r n w = c\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma  disc_rfr_proc_Suc_div:\n  assumes \"-1 < r\"\n  shows \"\\<And>w. disc_rfr_proc r (Suc n) w/disc_rfr_proc r n w = 1+r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>w. disc_rfr_proc r (Suc n) w / disc_rfr_proc r n w = 1 + r", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>w. disc_rfr_proc r (Suc n) w / disc_rfr_proc r n w = 1 + r", "fix w::'a"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>w. disc_rfr_proc r (Suc n) w / disc_rfr_proc r n w = 1 + r", "show \"disc_rfr_proc r (Suc n) w/disc_rfr_proc r n w = 1+r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. disc_rfr_proc r (Suc n) w / disc_rfr_proc r n w = 1 + r", "using disc_rfr_proc_positive assms"], ["proof (prove)\nusing this:\n  - 1 < ?r \\<Longrightarrow> 0 < disc_rfr_proc ?r ?n ?w\n  - 1 < r\n\ngoal (1 subgoal):\n 1. disc_rfr_proc r (Suc n) w / disc_rfr_proc r n w = 1 + r", "by (metis rfr_step  less_irrefl nonzero_eq_divide_eq)"], ["proof (state)\nthis:\n  disc_rfr_proc r (Suc n) w / disc_rfr_proc r n w = 1 + r\n\ngoal:\nNo subgoals!", "qed"], ["", "definition discount_factor where\n  \"discount_factor r n = (\\<lambda>w. inverse (disc_rfr_proc r n w))\""], ["", "lemma discount_factor_times_rfr:\n  assumes \"-1 < r\"\n  shows \"(1+r) * discount_factor r (Suc n) w = discount_factor r n w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (1 + r) * discount_factor r (Suc n) w = discount_factor r n w", "unfolding discount_factor_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (1 + r) * inverse (disc_rfr_proc r (Suc n) w) =\n    inverse (disc_rfr_proc r n w)", "using assms"], ["proof (prove)\nusing this:\n  - 1 < r\n\ngoal (1 subgoal):\n 1. (1 + r) * inverse (disc_rfr_proc r (Suc n) w) =\n    inverse (disc_rfr_proc r n w)", "by simp"], ["", "lemma discount_factor_borel_measurable:\n  shows \"discount_factor r n \\<in> borel_measurable M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. discount_factor r n \\<in> borel_measurable M", "unfolding discount_factor_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>w. inverse (disc_rfr_proc r n w)) \\<in> borel_measurable M", "proof (rule borel_measurable_inverse)"], ["proof (state)\ngoal (1 subgoal):\n 1. disc_rfr_proc r n \\<in> borel_measurable M", "show \"disc_rfr_proc r n \\<in> borel_measurable M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. disc_rfr_proc r n \\<in> borel_measurable M", "by (simp add:disc_rfr_proc_borel_measurable)"], ["proof (state)\nthis:\n  disc_rfr_proc r n \\<in> borel_measurable M\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma discount_factor_init:\n  shows \"discount_factor r 0 = (\\<lambda>w. 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. discount_factor r 0 = (\\<lambda>w. 1)", "unfolding discount_factor_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>w. inverse (disc_rfr_proc r 0 w)) = (\\<lambda>w. 1)", "by simp"], ["", "lemma discount_factor_nonrandom:\n  shows \"discount_factor r n \\<in> borel_measurable M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. discount_factor r n \\<in> borel_measurable M", "unfolding discount_factor_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>w. inverse (disc_rfr_proc r n w)) \\<in> borel_measurable M", "proof (rule borel_measurable_inverse)"], ["proof (state)\ngoal (1 subgoal):\n 1. disc_rfr_proc r n \\<in> borel_measurable M", "show \"disc_rfr_proc r n \\<in> borel_measurable M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. disc_rfr_proc r n \\<in> borel_measurable M", "by (simp add:disc_rfr_proc_borel_measurable)"], ["proof (state)\nthis:\n  disc_rfr_proc r n \\<in> borel_measurable M\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma discount_factor_positive:\n  assumes \"-1 < r\"\n  shows \"\\<And>n w . 0 < discount_factor r n w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n w. 0 < discount_factor r n w", "using assms disc_rfr_proc_positive"], ["proof (prove)\nusing this:\n  - 1 < r\n  - 1 < ?r \\<Longrightarrow> 0 < disc_rfr_proc ?r ?n ?w\n\ngoal (1 subgoal):\n 1. \\<And>n w. 0 < discount_factor r n w", "unfolding discount_factor_def"], ["proof (prove)\nusing this:\n  - 1 < r\n  - 1 < ?r \\<Longrightarrow> 0 < disc_rfr_proc ?r ?n ?w\n\ngoal (1 subgoal):\n 1. \\<And>n w. 0 < inverse (disc_rfr_proc r n w)", "by auto"], ["", "lemma (in prob_space) discount_factor_constant_time_pos:\n  assumes \"-1 < r\"\nshows \"\\<exists>c > 0. \\<forall>w \\<in> space M.  (discount_factor r n) w = c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>c>0. \\<forall>w\\<in>space M. discount_factor r n w = c", "using  disc_rfr_constant_time_pos"], ["proof (prove)\nusing this:\n  - 1 < ?r \\<Longrightarrow>\n  \\<exists>c>0. \\<forall>w\\<in>space M. disc_rfr_proc ?r ?n w = c\n\ngoal (1 subgoal):\n 1. \\<exists>c>0. \\<forall>w\\<in>space M. discount_factor r n w = c", "unfolding discount_factor_def"], ["proof (prove)\nusing this:\n  - 1 < ?r \\<Longrightarrow>\n  \\<exists>c>0. \\<forall>w\\<in>space M. disc_rfr_proc ?r ?n w = c\n\ngoal (1 subgoal):\n 1. \\<exists>c>0. \\<forall>w\\<in>space M. inverse (disc_rfr_proc r n w) = c", "by (metis assms inverse_positive_iff_positive)"], ["", "locale rsk_free_asset =\n  fixes Mkt r risk_free_asset\n  assumes acceptable_rate: \"-1 < r\"\n  and rf_price: \"prices Mkt risk_free_asset = disc_rfr_proc r\"\n  and rf_stock: \"risk_free_asset \\<in> stocks Mkt\""], ["", "locale rfr_disc_equity_market = disc_equity_market   + rsk_free_asset +\n  assumes rd: \"\\<forall> asset\\<in> stocks Mkt. borel_adapt_stoch_proc F (prices Mkt asset)\""], ["", "sublocale rfr_disc_equity_market \\<subseteq> disc_market_pos_stock _ _ _ \"risk_free_asset\""], ["proof (prove)\ngoal (1 subgoal):\n 1. disc_market_pos_stock M F Mkt risk_free_asset", "by (unfold_locales, (auto simp add: rf_stock rd disc_rfr_proc_positive rf_price acceptable_rate))"], ["", "subsubsection \\<open>Discounted value of a stochastic process\\<close>"], ["", "definition discounted_value where\n  \"discounted_value r X = (\\<lambda> n w. discount_factor r n w * X n w)\""], ["", "lemma (in rfr_disc_equity_market) discounted_rfr:\n  shows \"discounted_value r (prices Mkt risk_free_asset) n w = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. discounted_value r (prices Mkt risk_free_asset) n w = 1", "unfolding discounted_value_def discount_factor_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. inverse (disc_rfr_proc r n w) * prices Mkt risk_free_asset n w = 1", "using rf_price"], ["proof (prove)\nusing this:\n  prices Mkt risk_free_asset = disc_rfr_proc r\n\ngoal (1 subgoal):\n 1. inverse (disc_rfr_proc r n w) * prices Mkt risk_free_asset n w = 1", "by (metis less_irrefl mult.commute positive right_inverse)"], ["", "lemma  discounted_init:\n  shows \"\\<forall>w. discounted_value r X 0 w = X 0 w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>w. discounted_value r X 0 w = X 0 w", "unfolding discounted_value_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>w. discount_factor r 0 w * X 0 w = X 0 w", "by (simp add: discount_factor_init)"], ["", "lemma  discounted_mult:\n  shows \"\\<forall>n w. discounted_value r (\\<lambda>m x. X m x * Y m x) n w = X n w * (discounted_value r Y) n w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n w.\n       discounted_value r (\\<lambda>m x. X m x * Y m x) n w =\n       X n w * discounted_value r Y n w", "by (simp add: discounted_value_def)"], ["", "lemma  discounted_mult':\n  shows \"discounted_value r (\\<lambda>m x. X m x * Y m x) n w = X n w * (discounted_value r Y) n w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. discounted_value r (\\<lambda>m x. X m x * Y m x) n w =\n    X n w * discounted_value r Y n w", "by (simp add: discounted_value_def)"], ["", "lemma discounted_mult_times_rfr:\n  assumes \"-1 < r\"\n  shows \"discounted_value r (\\<lambda>m w. (1+r) * X w) (Suc n) w = discounted_value r (\\<lambda>m w. X w) n w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. discounted_value r (\\<lambda>m w. (1 + r) * X w) (Suc n) w =\n    discounted_value r (\\<lambda>m. X) n w", "unfolding discounted_value_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. discount_factor r (Suc n) w * ((1 + r) * X w) =\n    discount_factor r n w * X w", "using assms discount_factor_times_rfr discounted_mult"], ["proof (prove)\nusing this:\n  - 1 < r\n  - 1 < ?r \\<Longrightarrow>\n  (1 + ?r) * discount_factor ?r (Suc ?n) ?w = discount_factor ?r ?n ?w\n  \\<forall>n w.\n     discounted_value ?r (\\<lambda>m x. ?X m x * ?Y m x) n w =\n     ?X n w * discounted_value ?r ?Y n w\n\ngoal (1 subgoal):\n 1. discount_factor r (Suc n) w * ((1 + r) * X w) =\n    discount_factor r n w * X w", "by (simp add: discount_factor_times_rfr mult.commute)"], ["", "lemma discounted_cong:\n  assumes \"\\<forall>n w. X n w = Y n w\"\n  shows \"\\<forall> n w. discounted_value r X n w = discounted_value r Y n w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n w. discounted_value r X n w = discounted_value r Y n w", "by (simp add: assms discounted_value_def)"], ["", "lemma  discounted_cong':\n  assumes \"X n w = Y n w\"\n  shows \"discounted_value r X n w = discounted_value r Y n w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. discounted_value r X n w = discounted_value r Y n w", "by (simp add: assms discounted_value_def)"], ["", "lemma discounted_AE_cong:\n  assumes \"AE w in N. X n w = Y n w\"\n  shows \"AE w in N. discounted_value r X n w = discounted_value r Y n w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. AEeq N (discounted_value r X n) (discounted_value r Y n)", "proof (rule AE_mp)"], ["proof (state)\ngoal (2 subgoals):\n 1. almost_everywhere N ?P\n 2. AE w in N. ?P w \\<longrightarrow>\n               discounted_value r X n w = discounted_value r Y n w", "show \"AE w in N. X n w = Y n w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. AEeq N (X n) (Y n)", "using assms"], ["proof (prove)\nusing this:\n  AEeq N (X n) (Y n)\n\ngoal (1 subgoal):\n 1. AEeq N (X n) (Y n)", "by simp"], ["proof (state)\nthis:\n  AEeq N (X n) (Y n)\n\ngoal (1 subgoal):\n 1. AE w in N. X n w = Y n w \\<longrightarrow>\n               discounted_value r X n w = discounted_value r Y n w", "show \"AE w in N. X n w = Y n w \\<longrightarrow> discounted_value r X n w = discounted_value r Y n w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. AE w in N. X n w = Y n w \\<longrightarrow>\n               discounted_value r X n w = discounted_value r Y n w", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>w.\n       w \\<in> space N \\<Longrightarrow>\n       X n w = Y n w \\<longrightarrow>\n       discounted_value r X n w = discounted_value r Y n w", "fix w"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>w.\n       w \\<in> space N \\<Longrightarrow>\n       X n w = Y n w \\<longrightarrow>\n       discounted_value r X n w = discounted_value r Y n w", "assume \"w\\<in> space N\""], ["proof (state)\nthis:\n  w \\<in> space N\n\ngoal (1 subgoal):\n 1. \\<And>w.\n       w \\<in> space N \\<Longrightarrow>\n       X n w = Y n w \\<longrightarrow>\n       discounted_value r X n w = discounted_value r Y n w", "thus \"X n w = Y n w \\<longrightarrow> discounted_value r X n w = discounted_value r Y n w \""], ["proof (prove)\nusing this:\n  w \\<in> space N\n\ngoal (1 subgoal):\n 1. X n w = Y n w \\<longrightarrow>\n    discounted_value r X n w = discounted_value r Y n w", "by (simp add:discounted_value_def)"], ["proof (state)\nthis:\n  X n w = Y n w \\<longrightarrow>\n  discounted_value r X n w = discounted_value r Y n w\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  AE w in N. X n w = Y n w \\<longrightarrow>\n             discounted_value r X n w = discounted_value r Y n w\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma discounted_sum:\n  assumes \"finite I\"\nshows \"\\<forall>n w. (\\<Sum> i\\<in> I. (discounted_value r (\\<lambda>m x. f i m x)) n w) = (discounted_value r (\\<lambda>m x. (\\<Sum>i\\<in> I. f i m x)) n w)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n w.\n       (\\<Sum>i\\<in>I. discounted_value r (f i) n w) =\n       discounted_value r (\\<lambda>m x. \\<Sum>i\\<in>I. f i m x) n w", "using assms(1) subset_refl[of I]"], ["proof (prove)\nusing this:\n  finite I\n  I \\<subseteq> I\n\ngoal (1 subgoal):\n 1. \\<forall>n w.\n       (\\<Sum>i\\<in>I. discounted_value r (f i) n w) =\n       discounted_value r (\\<lambda>m x. \\<Sum>i\\<in>I. f i m x) n w", "proof (induct rule: finite_subset_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<forall>n w.\n       (\\<Sum>i\\<in>{}. discounted_value r (f i) n w) =\n       discounted_value r (\\<lambda>m x. \\<Sum>i\\<in>{}. f i m x) n w\n 2. \\<And>a F.\n       \\<lbrakk>finite F; a \\<in> I; a \\<notin> F;\n        \\<forall>n w.\n           (\\<Sum>i\\<in>F. discounted_value r (f i) n w) =\n           discounted_value r (\\<lambda>m x. \\<Sum>i\\<in>F. f i m x) n\n            w\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n w.\n                            (\\<Sum>i\\<in>insert a F.\n                               discounted_value r (f i) n w) =\n                            discounted_value r\n                             (\\<lambda>m x. \\<Sum>i\\<in>insert a F. f i m x)\n                             n w", "case empty"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<forall>n w.\n       (\\<Sum>i\\<in>{}. discounted_value r (f i) n w) =\n       discounted_value r (\\<lambda>m x. \\<Sum>i\\<in>{}. f i m x) n w\n 2. \\<And>a F.\n       \\<lbrakk>finite F; a \\<in> I; a \\<notin> F;\n        \\<forall>n w.\n           (\\<Sum>i\\<in>F. discounted_value r (f i) n w) =\n           discounted_value r (\\<lambda>m x. \\<Sum>i\\<in>F. f i m x) n\n            w\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n w.\n                            (\\<Sum>i\\<in>insert a F.\n                               discounted_value r (f i) n w) =\n                            discounted_value r\n                             (\\<lambda>m x. \\<Sum>i\\<in>insert a F. f i m x)\n                             n w", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n w.\n       (\\<Sum>i\\<in>{}. discounted_value r (f i) n w) =\n       discounted_value r (\\<lambda>m x. \\<Sum>i\\<in>{}. f i m x) n w", "by (simp add: discounted_value_def)"], ["proof (state)\nthis:\n  \\<forall>n w.\n     (\\<Sum>i\\<in>{}. discounted_value r (f i) n w) =\n     discounted_value r (\\<lambda>m x. \\<Sum>i\\<in>{}. f i m x) n w\n\ngoal (1 subgoal):\n 1. \\<And>a F.\n       \\<lbrakk>finite F; a \\<in> I; a \\<notin> F;\n        \\<forall>n w.\n           (\\<Sum>i\\<in>F. discounted_value r (f i) n w) =\n           discounted_value r (\\<lambda>m x. \\<Sum>i\\<in>F. f i m x) n\n            w\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n w.\n                            (\\<Sum>i\\<in>insert a F.\n                               discounted_value r (f i) n w) =\n                            discounted_value r\n                             (\\<lambda>m x. \\<Sum>i\\<in>insert a F. f i m x)\n                             n w", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a F.\n       \\<lbrakk>finite F; a \\<in> I; a \\<notin> F;\n        \\<forall>n w.\n           (\\<Sum>i\\<in>F. discounted_value r (f i) n w) =\n           discounted_value r (\\<lambda>m x. \\<Sum>i\\<in>F. f i m x) n\n            w\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n w.\n                            (\\<Sum>i\\<in>insert a F.\n                               discounted_value r (f i) n w) =\n                            discounted_value r\n                             (\\<lambda>m x. \\<Sum>i\\<in>insert a F. f i m x)\n                             n w", "case (insert a F)"], ["proof (state)\nthis:\n  finite F\n  a \\<in> I\n  a \\<notin> F\n  \\<forall>n w.\n     (\\<Sum>i\\<in>F. discounted_value r (f i) n w) =\n     discounted_value r (\\<lambda>m x. \\<Sum>i\\<in>F. f i m x) n w\n\ngoal (1 subgoal):\n 1. \\<And>a F.\n       \\<lbrakk>finite F; a \\<in> I; a \\<notin> F;\n        \\<forall>n w.\n           (\\<Sum>i\\<in>F. discounted_value r (f i) n w) =\n           discounted_value r (\\<lambda>m x. \\<Sum>i\\<in>F. f i m x) n\n            w\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n w.\n                            (\\<Sum>i\\<in>insert a F.\n                               discounted_value r (f i) n w) =\n                            discounted_value r\n                             (\\<lambda>m x. \\<Sum>i\\<in>insert a F. f i m x)\n                             n w", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n w.\n       (\\<Sum>i\\<in>insert a F. discounted_value r (f i) n w) =\n       discounted_value r (\\<lambda>m x. \\<Sum>i\\<in>insert a F. f i m x) n\n        w", "proof (intro allI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n w.\n       (\\<Sum>i\\<in>insert a F. discounted_value r (f i) n w) =\n       discounted_value r (\\<lambda>m x. \\<Sum>i\\<in>insert a F. f i m x) n\n        w", "fix n w"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n w.\n       (\\<Sum>i\\<in>insert a F. discounted_value r (f i) n w) =\n       discounted_value r (\\<lambda>m x. \\<Sum>i\\<in>insert a F. f i m x) n\n        w", "have \"(\\<Sum>i\\<in>insert a F. discounted_value r (f i) n w) = discounted_value r (f a) n w + (\\<Sum>i\\<in>F. discounted_value r (f i) n w)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<in>insert a F. discounted_value r (f i) n w) =\n    discounted_value r (f a) n w +\n    (\\<Sum>i\\<in>F. discounted_value r (f i) n w)", "by (simp add: insert.hyps(1) insert.hyps(3))"], ["proof (state)\nthis:\n  (\\<Sum>i\\<in>insert a F. discounted_value r (f i) n w) =\n  discounted_value r (f a) n w +\n  (\\<Sum>i\\<in>F. discounted_value r (f i) n w)\n\ngoal (1 subgoal):\n 1. \\<And>n w.\n       (\\<Sum>i\\<in>insert a F. discounted_value r (f i) n w) =\n       discounted_value r (\\<lambda>m x. \\<Sum>i\\<in>insert a F. f i m x) n\n        w", "also"], ["proof (state)\nthis:\n  (\\<Sum>i\\<in>insert a F. discounted_value r (f i) n w) =\n  discounted_value r (f a) n w +\n  (\\<Sum>i\\<in>F. discounted_value r (f i) n w)\n\ngoal (1 subgoal):\n 1. \\<And>n w.\n       (\\<Sum>i\\<in>insert a F. discounted_value r (f i) n w) =\n       discounted_value r (\\<lambda>m x. \\<Sum>i\\<in>insert a F. f i m x) n\n        w", "have \"... = discounted_value r (f a) n w + discounted_value r (\\<lambda>m x. \\<Sum>i\\<in>F. f i m x) n w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. discounted_value r (f a) n w +\n    (\\<Sum>i\\<in>F. discounted_value r (f i) n w) =\n    discounted_value r (f a) n w +\n    discounted_value r (\\<lambda>m x. \\<Sum>i\\<in>F. f i m x) n w", "using insert.hyps(4)"], ["proof (prove)\nusing this:\n  \\<forall>n w.\n     (\\<Sum>i\\<in>F. discounted_value r (f i) n w) =\n     discounted_value r (\\<lambda>m x. \\<Sum>i\\<in>F. f i m x) n w\n\ngoal (1 subgoal):\n 1. discounted_value r (f a) n w +\n    (\\<Sum>i\\<in>F. discounted_value r (f i) n w) =\n    discounted_value r (f a) n w +\n    discounted_value r (\\<lambda>m x. \\<Sum>i\\<in>F. f i m x) n w", "by simp"], ["proof (state)\nthis:\n  discounted_value r (f a) n w +\n  (\\<Sum>i\\<in>F. discounted_value r (f i) n w) =\n  discounted_value r (f a) n w +\n  discounted_value r (\\<lambda>m x. \\<Sum>i\\<in>F. f i m x) n w\n\ngoal (1 subgoal):\n 1. \\<And>n w.\n       (\\<Sum>i\\<in>insert a F. discounted_value r (f i) n w) =\n       discounted_value r (\\<lambda>m x. \\<Sum>i\\<in>insert a F. f i m x) n\n        w", "also"], ["proof (state)\nthis:\n  discounted_value r (f a) n w +\n  (\\<Sum>i\\<in>F. discounted_value r (f i) n w) =\n  discounted_value r (f a) n w +\n  discounted_value r (\\<lambda>m x. \\<Sum>i\\<in>F. f i m x) n w\n\ngoal (1 subgoal):\n 1. \\<And>n w.\n       (\\<Sum>i\\<in>insert a F. discounted_value r (f i) n w) =\n       discounted_value r (\\<lambda>m x. \\<Sum>i\\<in>insert a F. f i m x) n\n        w", "have \"... = discounted_value r (\\<lambda>m x. \\<Sum>i\\<in>insert a F. f i m x) n w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. discounted_value r (f a) n w +\n    discounted_value r (\\<lambda>m x. \\<Sum>i\\<in>F. f i m x) n w =\n    discounted_value r (\\<lambda>m x. \\<Sum>i\\<in>insert a F. f i m x) n w", "by (simp add: discounted_value_def insert.hyps(1) insert.hyps(3) ring_class.ring_distribs(1))"], ["proof (state)\nthis:\n  discounted_value r (f a) n w +\n  discounted_value r (\\<lambda>m x. \\<Sum>i\\<in>F. f i m x) n w =\n  discounted_value r (\\<lambda>m x. \\<Sum>i\\<in>insert a F. f i m x) n w\n\ngoal (1 subgoal):\n 1. \\<And>n w.\n       (\\<Sum>i\\<in>insert a F. discounted_value r (f i) n w) =\n       discounted_value r (\\<lambda>m x. \\<Sum>i\\<in>insert a F. f i m x) n\n        w", "finally"], ["proof (chain)\npicking this:\n  (\\<Sum>i\\<in>insert a F. discounted_value r (f i) n w) =\n  discounted_value r (\\<lambda>m x. \\<Sum>i\\<in>insert a F. f i m x) n w", "show \"(\\<Sum>i\\<in>insert a F. discounted_value r (f i) n w) = discounted_value r (\\<lambda>m x. \\<Sum>i\\<in>insert a F. f i m x) n w\""], ["proof (prove)\nusing this:\n  (\\<Sum>i\\<in>insert a F. discounted_value r (f i) n w) =\n  discounted_value r (\\<lambda>m x. \\<Sum>i\\<in>insert a F. f i m x) n w\n\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<in>insert a F. discounted_value r (f i) n w) =\n    discounted_value r (\\<lambda>m x. \\<Sum>i\\<in>insert a F. f i m x) n w", "."], ["proof (state)\nthis:\n  (\\<Sum>i\\<in>insert a F. discounted_value r (f i) n w) =\n  discounted_value r (\\<lambda>m x. \\<Sum>i\\<in>insert a F. f i m x) n w\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>n w.\n     (\\<Sum>i\\<in>insert a F. discounted_value r (f i) n w) =\n     discounted_value r (\\<lambda>m x. \\<Sum>i\\<in>insert a F. f i m x) n w\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma  discounted_adapted:\n  assumes \"borel_adapt_stoch_proc F X\"\n  shows \"borel_adapt_stoch_proc F (discounted_value r X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. borel_adapt_stoch_proc F (discounted_value r X)", "unfolding adapt_stoch_proc_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>t. discounted_value r X t \\<in> borel_measurable (F t)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>t. discounted_value r X t \\<in> borel_measurable (F t)", "fix t"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>t. discounted_value r X t \\<in> borel_measurable (F t)", "show \"discounted_value r X t \\<in> borel_measurable (F t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. discounted_value r X t \\<in> borel_measurable (F t)", "unfolding discounted_value_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>w. discount_factor r t w * X t w) \\<in> borel_measurable (F t)", "proof (rule borel_measurable_times)"], ["proof (state)\ngoal (2 subgoals):\n 1. discount_factor r t \\<in> borel_measurable (F t)\n 2. X t \\<in> borel_measurable (F t)", "show \"X t \\<in> borel_measurable (F t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X t \\<in> borel_measurable (F t)", "using assms"], ["proof (prove)\nusing this:\n  borel_adapt_stoch_proc F X\n\ngoal (1 subgoal):\n 1. X t \\<in> borel_measurable (F t)", "unfolding adapt_stoch_proc_def"], ["proof (prove)\nusing this:\n  \\<forall>t. X t \\<in> borel_measurable (F t)\n\ngoal (1 subgoal):\n 1. X t \\<in> borel_measurable (F t)", "by simp"], ["proof (state)\nthis:\n  X t \\<in> borel_measurable (F t)\n\ngoal (1 subgoal):\n 1. discount_factor r t \\<in> borel_measurable (F t)", "show \"discount_factor r t \\<in> borel_measurable (F t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. discount_factor r t \\<in> borel_measurable (F t)", "using discount_factor_borel_measurable"], ["proof (prove)\nusing this:\n  discount_factor ?r ?n \\<in> borel_measurable ?M\n\ngoal (1 subgoal):\n 1. discount_factor r t \\<in> borel_measurable (F t)", "by auto"], ["proof (state)\nthis:\n  discount_factor r t \\<in> borel_measurable (F t)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  discounted_value r X t \\<in> borel_measurable (F t)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma discounted_measurable:\n  assumes \"X\\<in> borel_measurable N\"\n  shows \"discounted_value r (\\<lambda>m. X) m \\<in> borel_measurable N\""], ["proof (prove)\ngoal (1 subgoal):\n 1. discounted_value r (\\<lambda>m. X) m \\<in> borel_measurable N", "unfolding discounted_value_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>w. discount_factor r m w * X w) \\<in> borel_measurable N", "proof (rule borel_measurable_times)"], ["proof (state)\ngoal (2 subgoals):\n 1. discount_factor r m \\<in> borel_measurable N\n 2. X \\<in> borel_measurable N", "show \"X\\<in> borel_measurable N\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X \\<in> borel_measurable N", "using assms"], ["proof (prove)\nusing this:\n  X \\<in> borel_measurable N\n\ngoal (1 subgoal):\n 1. X \\<in> borel_measurable N", "by simp"], ["proof (state)\nthis:\n  X \\<in> borel_measurable N\n\ngoal (1 subgoal):\n 1. discount_factor r m \\<in> borel_measurable N", "show \"discount_factor r m \\<in> borel_measurable N\""], ["proof (prove)\ngoal (1 subgoal):\n 1. discount_factor r m \\<in> borel_measurable N", "using discount_factor_borel_measurable"], ["proof (prove)\nusing this:\n  discount_factor ?r ?n \\<in> borel_measurable ?M\n\ngoal (1 subgoal):\n 1. discount_factor r m \\<in> borel_measurable N", "by auto"], ["proof (state)\nthis:\n  discount_factor r m \\<in> borel_measurable N\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in prob_space) discounted_integrable:\n  assumes \"integrable N (X n)\"\n  and \"-1 < r\"\n  and \"space N = space M\"\n  shows \"integrable N (discounted_value r X n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. integrable N (discounted_value r X n)", "unfolding discounted_value_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. integrable N (\\<lambda>w. discount_factor r n w * X n w)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. integrable N (\\<lambda>w. discount_factor r n w * X n w)", "have \"\\<exists>c> 0. \\<forall>w \\<in> space M.  (discount_factor r n) w = c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>c>0. \\<forall>w\\<in>space M. discount_factor r n w = c", "using discount_factor_constant_time_pos assms"], ["proof (prove)\nusing this:\n  - 1 < ?r \\<Longrightarrow>\n  \\<exists>c>0. \\<forall>w\\<in>space M. discount_factor ?r ?n w = c\n  integrable N (X n)\n  - 1 < r\n  space N = space M\n\ngoal (1 subgoal):\n 1. \\<exists>c>0. \\<forall>w\\<in>space M. discount_factor r n w = c", "by simp"], ["proof (state)\nthis:\n  \\<exists>c>0. \\<forall>w\\<in>space M. discount_factor r n w = c\n\ngoal (1 subgoal):\n 1. integrable N (\\<lambda>w. discount_factor r n w * X n w)", "from this"], ["proof (chain)\npicking this:\n  \\<exists>c>0. \\<forall>w\\<in>space M. discount_factor r n w = c", "obtain c where \"c > 0\" and \"\\<forall>w \\<in> space M.  (discount_factor r n) w = c\""], ["proof (prove)\nusing this:\n  \\<exists>c>0. \\<forall>w\\<in>space M. discount_factor r n w = c\n\ngoal (1 subgoal):\n 1. (\\<And>c.\n        \\<lbrakk>0 < c;\n         \\<forall>w\\<in>space M. discount_factor r n w = c\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  0 < c\n  \\<forall>w\\<in>space M. discount_factor r n w = c\n\ngoal (1 subgoal):\n 1. integrable N (\\<lambda>w. discount_factor r n w * X n w)", "note cprops = this"], ["proof (state)\nthis:\n  0 < c\n  \\<forall>w\\<in>space M. discount_factor r n w = c\n\ngoal (1 subgoal):\n 1. integrable N (\\<lambda>w. discount_factor r n w * X n w)", "hence \"\\<forall>w \\<in> space M. discount_factor r n w = c\""], ["proof (prove)\nusing this:\n  0 < c\n  \\<forall>w\\<in>space M. discount_factor r n w = c\n\ngoal (1 subgoal):\n 1. \\<forall>w\\<in>space M. discount_factor r n w = c", "using cprops"], ["proof (prove)\nusing this:\n  0 < c\n  \\<forall>w\\<in>space M. discount_factor r n w = c\n  0 < c\n  \\<forall>w\\<in>space M. discount_factor r n w = c\n\ngoal (1 subgoal):\n 1. \\<forall>w\\<in>space M. discount_factor r n w = c", "by simp"], ["proof (state)\nthis:\n  \\<forall>w\\<in>space M. discount_factor r n w = c\n\ngoal (1 subgoal):\n 1. integrable N (\\<lambda>w. discount_factor r n w * X n w)", "hence \"\\<forall>w \\<in> space N. discount_factor r n w = c\""], ["proof (prove)\nusing this:\n  \\<forall>w\\<in>space M. discount_factor r n w = c\n\ngoal (1 subgoal):\n 1. \\<forall>w\\<in>space N. discount_factor r n w = c", "using assms"], ["proof (prove)\nusing this:\n  \\<forall>w\\<in>space M. discount_factor r n w = c\n  integrable N (X n)\n  - 1 < r\n  space N = space M\n\ngoal (1 subgoal):\n 1. \\<forall>w\\<in>space N. discount_factor r n w = c", "by simp"], ["proof (state)\nthis:\n  \\<forall>w\\<in>space N. discount_factor r n w = c\n\ngoal (1 subgoal):\n 1. integrable N (\\<lambda>w. discount_factor r n w * X n w)", "thus \"integrable N (\\<lambda>w. discount_factor r n w * X n w)\""], ["proof (prove)\nusing this:\n  \\<forall>w\\<in>space N. discount_factor r n w = c\n\ngoal (1 subgoal):\n 1. integrable N (\\<lambda>w. discount_factor r n w * X n w)", "using \\<open>\\<forall>w \\<in> space N. discount_factor r n w = c\\<close> assms\n    integrable_cong[of N N \"(\\<lambda>w. discount_factor r n w * X n w)\" \"(\\<lambda>w. c * X n w)\"]"], ["proof (prove)\nusing this:\n  \\<forall>w\\<in>space N. discount_factor r n w = c\n  \\<forall>w\\<in>space N. discount_factor r n w = c\n  integrable N (X n)\n  - 1 < r\n  space N = space M\n  \\<lbrakk>N = N;\n   \\<And>x.\n      x \\<in> space N \\<Longrightarrow>\n      discount_factor r n x * X n x = c * X n x\\<rbrakk>\n  \\<Longrightarrow> integrable N\n                     (\\<lambda>w. discount_factor r n w * X n w) =\n                    integrable N (\\<lambda>w. c * X n w)\n\ngoal (1 subgoal):\n 1. integrable N (\\<lambda>w. discount_factor r n w * X n w)", "by simp"], ["proof (state)\nthis:\n  integrable N (\\<lambda>w. discount_factor r n w * X n w)\n\ngoal:\nNo subgoals!", "qed"], ["", "subsubsection \\<open>Results on risk-neutral probability spaces\\<close>"], ["", "definition (in rfr_disc_equity_market) risk_neutral_prob where\n  \"risk_neutral_prob N \\<longleftrightarrow> (prob_space N) \\<and> (\\<forall> asset \\<in> stocks Mkt. martingale N F (discounted_value r (prices Mkt asset)))\""], ["", "lemma integrable_val_process:\n  assumes \"\\<forall> asset \\<in> support_set pf. integrable M (\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w)\"\n  shows \"integrable M (val_process Mkt pf n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. integrable M (val_process Mkt pf n)", "proof (cases \"portfolio pf\")"], ["proof (state)\ngoal (2 subgoals):\n 1. portfolio pf \\<Longrightarrow> integrable M (val_process Mkt pf n)\n 2. \\<not> portfolio pf \\<Longrightarrow>\n    integrable M (val_process Mkt pf n)", "case False"], ["proof (state)\nthis:\n  \\<not> portfolio pf\n\ngoal (2 subgoals):\n 1. portfolio pf \\<Longrightarrow> integrable M (val_process Mkt pf n)\n 2. \\<not> portfolio pf \\<Longrightarrow>\n    integrable M (val_process Mkt pf n)", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<not> portfolio pf\n\ngoal (1 subgoal):\n 1. integrable M (val_process Mkt pf n)", "unfolding val_process_def"], ["proof (prove)\nusing this:\n  \\<not> portfolio pf\n\ngoal (1 subgoal):\n 1. integrable M\n     ((if \\<not> portfolio pf then \\<lambda>n w. 0\n       else (\\<lambda>n w.\n                \\<Sum>x\\<in>support_set pf.\n                  prices Mkt x n w * pf x (Suc n) w))\n       n)", "by simp"], ["proof (state)\nthis:\n  integrable M (val_process Mkt pf n)\n\ngoal (1 subgoal):\n 1. portfolio pf \\<Longrightarrow> integrable M (val_process Mkt pf n)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. portfolio pf \\<Longrightarrow> integrable M (val_process Mkt pf n)", "case True"], ["proof (state)\nthis:\n  portfolio pf\n\ngoal (1 subgoal):\n 1. portfolio pf \\<Longrightarrow> integrable M (val_process Mkt pf n)", "hence \"val_process Mkt pf n = (\\<lambda>w. \\<Sum>x\\<in>support_set pf. prices Mkt x n w * pf x (Suc n) w)\""], ["proof (prove)\nusing this:\n  portfolio pf\n\ngoal (1 subgoal):\n 1. val_process Mkt pf n =\n    (\\<lambda>w.\n        \\<Sum>x\\<in>support_set pf. prices Mkt x n w * pf x (Suc n) w)", "unfolding val_process_def"], ["proof (prove)\nusing this:\n  portfolio pf\n\ngoal (1 subgoal):\n 1. (if \\<not> portfolio pf then \\<lambda>n w. 0\n     else (\\<lambda>n w.\n              \\<Sum>x\\<in>support_set pf.\n                prices Mkt x n w * pf x (Suc n) w))\n     n =\n    (\\<lambda>w.\n        \\<Sum>x\\<in>support_set pf. prices Mkt x n w * pf x (Suc n) w)", "by simp"], ["proof (state)\nthis:\n  val_process Mkt pf n =\n  (\\<lambda>w.\n      \\<Sum>x\\<in>support_set pf. prices Mkt x n w * pf x (Suc n) w)\n\ngoal (1 subgoal):\n 1. portfolio pf \\<Longrightarrow> integrable M (val_process Mkt pf n)", "moreover"], ["proof (state)\nthis:\n  val_process Mkt pf n =\n  (\\<lambda>w.\n      \\<Sum>x\\<in>support_set pf. prices Mkt x n w * pf x (Suc n) w)\n\ngoal (1 subgoal):\n 1. portfolio pf \\<Longrightarrow> integrable M (val_process Mkt pf n)", "have \"integrable M (\\<lambda>w. \\<Sum>x\\<in>support_set pf. prices Mkt x n w * pf x (Suc n) w)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. integrable M\n     (\\<lambda>w.\n         \\<Sum>x\\<in>support_set pf. prices Mkt x n w * pf x (Suc n) w)", "using assms"], ["proof (prove)\nusing this:\n  \\<forall>asset\\<in>support_set pf.\n     integrable M (\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w)\n\ngoal (1 subgoal):\n 1. integrable M\n     (\\<lambda>w.\n         \\<Sum>x\\<in>support_set pf. prices Mkt x n w * pf x (Suc n) w)", "by simp"], ["proof (state)\nthis:\n  integrable M\n   (\\<lambda>w.\n       \\<Sum>x\\<in>support_set pf. prices Mkt x n w * pf x (Suc n) w)\n\ngoal (1 subgoal):\n 1. portfolio pf \\<Longrightarrow> integrable M (val_process Mkt pf n)", "ultimately"], ["proof (chain)\npicking this:\n  val_process Mkt pf n =\n  (\\<lambda>w.\n      \\<Sum>x\\<in>support_set pf. prices Mkt x n w * pf x (Suc n) w)\n  integrable M\n   (\\<lambda>w.\n       \\<Sum>x\\<in>support_set pf. prices Mkt x n w * pf x (Suc n) w)", "show ?thesis"], ["proof (prove)\nusing this:\n  val_process Mkt pf n =\n  (\\<lambda>w.\n      \\<Sum>x\\<in>support_set pf. prices Mkt x n w * pf x (Suc n) w)\n  integrable M\n   (\\<lambda>w.\n       \\<Sum>x\\<in>support_set pf. prices Mkt x n w * pf x (Suc n) w)\n\ngoal (1 subgoal):\n 1. integrable M (val_process Mkt pf n)", "by simp"], ["proof (state)\nthis:\n  integrable M (val_process Mkt pf n)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma integrable_self_fin_uvp:\n  assumes \"\\<forall> asset \\<in> support_set pf. integrable M (\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w)\"\n  and \"self_financing Mkt pf\"\nshows \"integrable M (cls_val_process Mkt pf n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. integrable M (cls_val_process Mkt pf n)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. integrable M (cls_val_process Mkt pf n)", "have \"val_process Mkt pf n = cls_val_process Mkt pf n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. val_process Mkt pf n = cls_val_process Mkt pf n", "using assms"], ["proof (prove)\nusing this:\n  \\<forall>asset\\<in>support_set pf.\n     integrable M (\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w)\n  self_financing Mkt pf\n\ngoal (1 subgoal):\n 1. val_process Mkt pf n = cls_val_process Mkt pf n", "by (simp add:self_financingE)"], ["proof (state)\nthis:\n  val_process Mkt pf n = cls_val_process Mkt pf n\n\ngoal (1 subgoal):\n 1. integrable M (cls_val_process Mkt pf n)", "moreover"], ["proof (state)\nthis:\n  val_process Mkt pf n = cls_val_process Mkt pf n\n\ngoal (1 subgoal):\n 1. integrable M (cls_val_process Mkt pf n)", "have \"integrable M (val_process Mkt pf n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. integrable M (val_process Mkt pf n)", "using assms"], ["proof (prove)\nusing this:\n  \\<forall>asset\\<in>support_set pf.\n     integrable M (\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w)\n  self_financing Mkt pf\n\ngoal (1 subgoal):\n 1. integrable M (val_process Mkt pf n)", "by (simp add:integrable_val_process)"], ["proof (state)\nthis:\n  integrable M (val_process Mkt pf n)\n\ngoal (1 subgoal):\n 1. integrable M (cls_val_process Mkt pf n)", "ultimately"], ["proof (chain)\npicking this:\n  val_process Mkt pf n = cls_val_process Mkt pf n\n  integrable M (val_process Mkt pf n)", "show ?thesis"], ["proof (prove)\nusing this:\n  val_process Mkt pf n = cls_val_process Mkt pf n\n  integrable M (val_process Mkt pf n)\n\ngoal (1 subgoal):\n 1. integrable M (cls_val_process Mkt pf n)", "by simp"], ["proof (state)\nthis:\n  integrable M (cls_val_process Mkt pf n)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in rfr_disc_equity_market) stocks_portfolio_risk_neutral:\n  assumes \"risk_neutral_prob N\"\n  and \"trading_strategy pf\"\n  and \"subalgebra N M\"\n  and \"support_set pf \\<subseteq> stocks Mkt\"\n  and \"\\<forall>n. \\<forall> asset \\<in> support_set pf. integrable N (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w)\"\n  shows  \"\\<forall>x \\<in> support_set pf. AE w in N.\n        (real_cond_exp N (F n) (discounted_value r (\\<lambda>m y. prices Mkt x m y * pf x m y) (Suc n))) w =\n        discounted_value r (\\<lambda>m y. prices Mkt x m y * pf x (Suc m) y) n w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>support_set pf.\n       AEeq N\n        (real_cond_exp N (F n)\n          (discounted_value r (\\<lambda>m y. prices Mkt x m y * pf x m y)\n            (Suc n)))\n        (discounted_value r\n          (\\<lambda>m y. prices Mkt x m y * pf x (Suc m) y) n)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> support_set pf \\<Longrightarrow>\n       AEeq N\n        (real_cond_exp N (F n)\n          (discounted_value r (\\<lambda>m y. prices Mkt x m y * pf x m y)\n            (Suc n)))\n        (discounted_value r\n          (\\<lambda>m y. prices Mkt x m y * pf x (Suc m) y) n)", "have nsigfin: \"\\<forall>n. sigma_finite_subalgebra N (F n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n. sigma_finite_subalgebra N (F n)", "using assms"], ["proof (prove)\nusing this:\n  risk_neutral_prob N\n  trading_strategy pf\n  subalgebra N M\n  support_set pf \\<subseteq> stocks Mkt\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        integrable N\n         (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w)\n\ngoal (1 subgoal):\n 1. \\<forall>n. sigma_finite_subalgebra N (F n)", "unfolding risk_neutral_prob_def martingale_def subalgebra_def"], ["proof (prove)\nusing this:\n  prob_space N \\<and>\n  (\\<forall>asset\\<in>stocks Mkt.\n      Filtration.filtration N F \\<and>\n      (\\<forall>t.\n          integrable N (discounted_value r (prices Mkt asset) t)) \\<and>\n      borel_adapt_stoch_proc F\n       (discounted_value r (prices Mkt asset)) \\<and>\n      (\\<forall>t s.\n          t \\<le> s \\<longrightarrow>\n          AEeq N\n           (real_cond_exp N (F t) (discounted_value r (prices Mkt asset) s))\n           (discounted_value r (prices Mkt asset) t)))\n  trading_strategy pf\n  space M = space N \\<and> events \\<subseteq> sets N\n  support_set pf \\<subseteq> stocks Mkt\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        integrable N\n         (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w)\n\ngoal (1 subgoal):\n 1. \\<forall>n. sigma_finite_subalgebra N (F n)", "using filtration filtration_def risk_neutral_prob_def prob_space.subalgebra_sigma_finite in_stock"], ["proof (prove)\nusing this:\n  prob_space N \\<and>\n  (\\<forall>asset\\<in>stocks Mkt.\n      Filtration.filtration N F \\<and>\n      (\\<forall>t.\n          integrable N (discounted_value r (prices Mkt asset) t)) \\<and>\n      borel_adapt_stoch_proc F\n       (discounted_value r (prices Mkt asset)) \\<and>\n      (\\<forall>t s.\n          t \\<le> s \\<longrightarrow>\n          AEeq N\n           (real_cond_exp N (F t) (discounted_value r (prices Mkt asset) s))\n           (discounted_value r (prices Mkt asset) t)))\n  trading_strategy pf\n  space M = space N \\<and> events \\<subseteq> sets N\n  support_set pf \\<subseteq> stocks Mkt\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        integrable N\n         (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w)\n  Filtration.filtration M F\n  Filtration.filtration ?M ?F =\n  ((\\<forall>t. subalgebra ?M (?F t)) \\<and>\n   (\\<forall>s t. s \\<le> t \\<longrightarrow> subalgebra (?F t) (?F s)))\n  risk_neutral_prob ?N =\n  (prob_space ?N \\<and>\n   (\\<forall>asset\\<in>stocks Mkt.\n       martingale ?N F (discounted_value r (prices Mkt asset))))\n  \\<lbrakk>prob_space ?M; subalgebra ?M ?N\\<rbrakk>\n  \\<Longrightarrow> sigma_finite_subalgebra ?M ?N\n  risk_free_asset \\<in> stocks Mkt\n\ngoal (1 subgoal):\n 1. \\<forall>n. sigma_finite_subalgebra N (F n)", "by metis"], ["proof (state)\nthis:\n  \\<forall>n. sigma_finite_subalgebra N (F n)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> support_set pf \\<Longrightarrow>\n       AEeq N\n        (real_cond_exp N (F n)\n          (discounted_value r (\\<lambda>m y. prices Mkt x m y * pf x m y)\n            (Suc n)))\n        (discounted_value r\n          (\\<lambda>m y. prices Mkt x m y * pf x (Suc m) y) n)", "have \"disc_filtr_prob_space N F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. disc_filtr_prob_space N F", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. disc_filtr_prob_space N F", "have \"prob_space N\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prob_space N", "using assms"], ["proof (prove)\nusing this:\n  risk_neutral_prob N\n  trading_strategy pf\n  subalgebra N M\n  support_set pf \\<subseteq> stocks Mkt\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        integrable N\n         (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w)\n\ngoal (1 subgoal):\n 1. prob_space N", "unfolding risk_neutral_prob_def"], ["proof (prove)\nusing this:\n  prob_space N \\<and>\n  (\\<forall>asset\\<in>stocks Mkt.\n      martingale N F (discounted_value r (prices Mkt asset)))\n  trading_strategy pf\n  subalgebra N M\n  support_set pf \\<subseteq> stocks Mkt\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        integrable N\n         (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w)\n\ngoal (1 subgoal):\n 1. prob_space N", "by simp"], ["proof (state)\nthis:\n  prob_space N\n\ngoal (1 subgoal):\n 1. disc_filtr_prob_space N F", "moreover"], ["proof (state)\nthis:\n  prob_space N\n\ngoal (1 subgoal):\n 1. disc_filtr_prob_space N F", "have \"disc_filtr N F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. disc_filtr N F", "using assms subalgebra_filtration"], ["proof (prove)\nusing this:\n  risk_neutral_prob N\n  trading_strategy pf\n  subalgebra N M\n  support_set pf \\<subseteq> stocks Mkt\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        integrable N\n         (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w)\n  \\<lbrakk>subalgebra ?N M; Filtration.filtration M F\\<rbrakk>\n  \\<Longrightarrow> Filtration.filtration ?N F\n\ngoal (1 subgoal):\n 1. disc_filtr N F", "by (metis (no_types, lifting) filtration disc_filtr_def filtration_def)"], ["proof (state)\nthis:\n  disc_filtr N F\n\ngoal (1 subgoal):\n 1. disc_filtr_prob_space N F", "ultimately"], ["proof (chain)\npicking this:\n  prob_space N\n  disc_filtr N F", "show ?thesis"], ["proof (prove)\nusing this:\n  prob_space N\n  disc_filtr N F\n\ngoal (1 subgoal):\n 1. disc_filtr_prob_space N F", "by (simp add: disc_filtr_prob_space_axioms_def disc_filtr_prob_space_def)"], ["proof (state)\nthis:\n  disc_filtr_prob_space N F\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  disc_filtr_prob_space N F\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> support_set pf \\<Longrightarrow>\n       AEeq N\n        (real_cond_exp N (F n)\n          (discounted_value r (\\<lambda>m y. prices Mkt x m y * pf x m y)\n            (Suc n)))\n        (discounted_value r\n          (\\<lambda>m y. prices Mkt x m y * pf x (Suc m) y) n)", "fix asset"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> support_set pf \\<Longrightarrow>\n       AEeq N\n        (real_cond_exp N (F n)\n          (discounted_value r (\\<lambda>m y. prices Mkt x m y * pf x m y)\n            (Suc n)))\n        (discounted_value r\n          (\\<lambda>m y. prices Mkt x m y * pf x (Suc m) y) n)", "assume \"asset \\<in> support_set pf\""], ["proof (state)\nthis:\n  asset \\<in> support_set pf\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> support_set pf \\<Longrightarrow>\n       AEeq N\n        (real_cond_exp N (F n)\n          (discounted_value r (\\<lambda>m y. prices Mkt x m y * pf x m y)\n            (Suc n)))\n        (discounted_value r\n          (\\<lambda>m y. prices Mkt x m y * pf x (Suc m) y) n)", "hence \"asset \\<in> stocks Mkt\""], ["proof (prove)\nusing this:\n  asset \\<in> support_set pf\n\ngoal (1 subgoal):\n 1. asset \\<in> stocks Mkt", "using assms"], ["proof (prove)\nusing this:\n  asset \\<in> support_set pf\n  risk_neutral_prob N\n  trading_strategy pf\n  subalgebra N M\n  support_set pf \\<subseteq> stocks Mkt\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        integrable N\n         (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w)\n\ngoal (1 subgoal):\n 1. asset \\<in> stocks Mkt", "by auto"], ["proof (state)\nthis:\n  asset \\<in> stocks Mkt\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> support_set pf \\<Longrightarrow>\n       AEeq N\n        (real_cond_exp N (F n)\n          (discounted_value r (\\<lambda>m y. prices Mkt x m y * pf x m y)\n            (Suc n)))\n        (discounted_value r\n          (\\<lambda>m y. prices Mkt x m y * pf x (Suc m) y) n)", "have \"discounted_value r (prices Mkt asset) (Suc n) \\<in> borel_measurable M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. random_variable borel (discounted_value r (prices Mkt asset) (Suc n))", "using assms readable"], ["proof (prove)\nusing this:\n  risk_neutral_prob N\n  trading_strategy pf\n  subalgebra N M\n  support_set pf \\<subseteq> stocks Mkt\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        integrable N\n         (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w)\n  \\<forall>asset\\<in>stocks Mkt. borel_adapt_stoch_proc F (prices Mkt asset)\n\ngoal (1 subgoal):\n 1. random_variable borel (discounted_value r (prices Mkt asset) (Suc n))", "by (meson \\<open>asset \\<in> stocks Mkt\\<close> borel_adapt_stoch_proc_borel_measurable discounted_adapted\n        rfr_disc_equity_market.risk_neutral_prob_def rfr_disc_equity_market_axioms)"], ["proof (state)\nthis:\n  random_variable borel (discounted_value r (prices Mkt asset) (Suc n))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> support_set pf \\<Longrightarrow>\n       AEeq N\n        (real_cond_exp N (F n)\n          (discounted_value r (\\<lambda>m y. prices Mkt x m y * pf x m y)\n            (Suc n)))\n        (discounted_value r\n          (\\<lambda>m y. prices Mkt x m y * pf x (Suc m) y) n)", "hence b: \"discounted_value r (prices Mkt asset) (Suc n) \\<in> borel_measurable N\""], ["proof (prove)\nusing this:\n  random_variable borel (discounted_value r (prices Mkt asset) (Suc n))\n\ngoal (1 subgoal):\n 1. discounted_value r (prices Mkt asset) (Suc n) \\<in> borel_measurable N", "using assms Conditional_Expectation.measurable_from_subalg[of N M _ borel]"], ["proof (prove)\nusing this:\n  random_variable borel (discounted_value r (prices Mkt asset) (Suc n))\n  risk_neutral_prob N\n  trading_strategy pf\n  subalgebra N M\n  support_set pf \\<subseteq> stocks Mkt\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        integrable N\n         (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w)\n  \\<lbrakk>subalgebra N M; random_variable borel ?f\\<rbrakk>\n  \\<Longrightarrow> ?f \\<in> borel_measurable N\n\ngoal (1 subgoal):\n 1. discounted_value r (prices Mkt asset) (Suc n) \\<in> borel_measurable N", "by auto"], ["proof (state)\nthis:\n  discounted_value r (prices Mkt asset) (Suc n) \\<in> borel_measurable N\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> support_set pf \\<Longrightarrow>\n       AEeq N\n        (real_cond_exp N (F n)\n          (discounted_value r (\\<lambda>m y. prices Mkt x m y * pf x m y)\n            (Suc n)))\n        (discounted_value r\n          (\\<lambda>m y. prices Mkt x m y * pf x (Suc m) y) n)", "show \"AEeq N (real_cond_exp N (F n) (discounted_value r (\\<lambda>m y. prices Mkt asset m y * pf asset m y) (Suc n)))\n  (discounted_value r (\\<lambda>m y. prices Mkt asset m y * pf asset (Suc m) y) n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. AEeq N\n     (real_cond_exp N (F n)\n       (discounted_value r\n         (\\<lambda>m y. prices Mkt asset m y * pf asset m y) (Suc n)))\n     (discounted_value r\n       (\\<lambda>m y. prices Mkt asset m y * pf asset (Suc m) y) n)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. AEeq N\n     (real_cond_exp N (F n)\n       (discounted_value r\n         (\\<lambda>m y. prices Mkt asset m y * pf asset m y) (Suc n)))\n     (discounted_value r\n       (\\<lambda>m y. prices Mkt asset m y * pf asset (Suc m) y) n)", "have \"AE w in N. (real_cond_exp N (F n) (discounted_value r (\\<lambda>m y. prices Mkt asset m y * pf asset m y) (Suc n))) w =\n      (real_cond_exp N (F n) (\\<lambda>z. pf asset (Suc n) z * discounted_value r (\\<lambda>m y. prices Mkt asset m y) (Suc n) z)) w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. AEeq N\n     (real_cond_exp N (F n)\n       (discounted_value r\n         (\\<lambda>m y. prices Mkt asset m y * pf asset m y) (Suc n)))\n     (real_cond_exp N (F n)\n       (\\<lambda>z.\n           pf asset (Suc n) z *\n           discounted_value r (prices Mkt asset) (Suc n) z))", "proof (rule sigma_finite_subalgebra.real_cond_exp_cong)"], ["proof (state)\ngoal (4 subgoals):\n 1. sigma_finite_subalgebra N (F n)\n 2. AEeq N\n     (discounted_value r (\\<lambda>m y. prices Mkt asset m y * pf asset m y)\n       (Suc n))\n     (\\<lambda>w.\n         pf asset (Suc n) w *\n         discounted_value r (prices Mkt asset) (Suc n) w)\n 3. discounted_value r (\\<lambda>m y. prices Mkt asset m y * pf asset m y)\n     (Suc n)\n    \\<in> borel_measurable N\n 4. (\\<lambda>z.\n        pf asset (Suc n) z *\n        discounted_value r (prices Mkt asset) (Suc n) z)\n    \\<in> borel_measurable N", "show \"sigma_finite_subalgebra N (F n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sigma_finite_subalgebra N (F n)", "using nsigfin"], ["proof (prove)\nusing this:\n  \\<forall>n. sigma_finite_subalgebra N (F n)\n\ngoal (1 subgoal):\n 1. sigma_finite_subalgebra N (F n)", ".."], ["proof (state)\nthis:\n  sigma_finite_subalgebra N (F n)\n\ngoal (3 subgoals):\n 1. AEeq N\n     (discounted_value r (\\<lambda>m y. prices Mkt asset m y * pf asset m y)\n       (Suc n))\n     (\\<lambda>w.\n         pf asset (Suc n) w *\n         discounted_value r (prices Mkt asset) (Suc n) w)\n 2. discounted_value r (\\<lambda>m y. prices Mkt asset m y * pf asset m y)\n     (Suc n)\n    \\<in> borel_measurable N\n 3. (\\<lambda>z.\n        pf asset (Suc n) z *\n        discounted_value r (prices Mkt asset) (Suc n) z)\n    \\<in> borel_measurable N", "show \"AE w in N. discounted_value r (\\<lambda>m y. prices Mkt asset m y * pf asset m y) (Suc n) w =\n         pf asset (Suc n) w * discounted_value r (\\<lambda>m y. prices Mkt asset m y) (Suc n) w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. AEeq N\n     (discounted_value r (\\<lambda>m y. prices Mkt asset m y * pf asset m y)\n       (Suc n))\n     (\\<lambda>w.\n         pf asset (Suc n) w *\n         discounted_value r (prices Mkt asset) (Suc n) w)", "by (simp add: discounted_value_def)"], ["proof (state)\nthis:\n  AEeq N\n   (discounted_value r (\\<lambda>m y. prices Mkt asset m y * pf asset m y)\n     (Suc n))\n   (\\<lambda>w.\n       pf asset (Suc n) w * discounted_value r (prices Mkt asset) (Suc n) w)\n\ngoal (2 subgoals):\n 1. discounted_value r (\\<lambda>m y. prices Mkt asset m y * pf asset m y)\n     (Suc n)\n    \\<in> borel_measurable N\n 2. (\\<lambda>z.\n        pf asset (Suc n) z *\n        discounted_value r (prices Mkt asset) (Suc n) z)\n    \\<in> borel_measurable N", "show \"discounted_value r (\\<lambda>m y. prices Mkt asset m y * pf asset m y) (Suc n) \\<in> borel_measurable N\""], ["proof (prove)\ngoal (1 subgoal):\n 1. discounted_value r (\\<lambda>m y. prices Mkt asset m y * pf asset m y)\n     (Suc n)\n    \\<in> borel_measurable N", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. discounted_value r (\\<lambda>m y. prices Mkt asset m y * pf asset m y)\n     (Suc n)\n    \\<in> borel_measurable N", "have \"(\\<lambda>y. prices Mkt asset (Suc n) y * pf asset (Suc n) y) \\<in> borel_measurable N\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>y. prices Mkt asset (Suc n) y * pf asset (Suc n) y)\n    \\<in> borel_measurable N", "using assms \\<open>asset\\<in> support_set pf\\<close>"], ["proof (prove)\nusing this:\n  risk_neutral_prob N\n  trading_strategy pf\n  subalgebra N M\n  support_set pf \\<subseteq> stocks Mkt\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        integrable N\n         (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w)\n  asset \\<in> support_set pf\n\ngoal (1 subgoal):\n 1. (\\<lambda>y. prices Mkt asset (Suc n) y * pf asset (Suc n) y)\n    \\<in> borel_measurable N", "by (simp add:borel_measurable_integrable)"], ["proof (state)\nthis:\n  (\\<lambda>y. prices Mkt asset (Suc n) y * pf asset (Suc n) y)\n  \\<in> borel_measurable N\n\ngoal (1 subgoal):\n 1. discounted_value r (\\<lambda>m y. prices Mkt asset m y * pf asset m y)\n     (Suc n)\n    \\<in> borel_measurable N", "thus ?thesis"], ["proof (prove)\nusing this:\n  (\\<lambda>y. prices Mkt asset (Suc n) y * pf asset (Suc n) y)\n  \\<in> borel_measurable N\n\ngoal (1 subgoal):\n 1. discounted_value r (\\<lambda>m y. prices Mkt asset m y * pf asset m y)\n     (Suc n)\n    \\<in> borel_measurable N", "unfolding discounted_value_def"], ["proof (prove)\nusing this:\n  (\\<lambda>y. prices Mkt asset (Suc n) y * pf asset (Suc n) y)\n  \\<in> borel_measurable N\n\ngoal (1 subgoal):\n 1. (\\<lambda>w.\n        discount_factor r (Suc n) w *\n        (prices Mkt asset (Suc n) w * pf asset (Suc n) w))\n    \\<in> borel_measurable N", "using discount_factor_borel_measurable[of r \"Suc n\" N]"], ["proof (prove)\nusing this:\n  (\\<lambda>y. prices Mkt asset (Suc n) y * pf asset (Suc n) y)\n  \\<in> borel_measurable N\n  discount_factor r (Suc n) \\<in> borel_measurable N\n\ngoal (1 subgoal):\n 1. (\\<lambda>w.\n        discount_factor r (Suc n) w *\n        (prices Mkt asset (Suc n) w * pf asset (Suc n) w))\n    \\<in> borel_measurable N", "by simp"], ["proof (state)\nthis:\n  discounted_value r (\\<lambda>m y. prices Mkt asset m y * pf asset m y)\n   (Suc n)\n  \\<in> borel_measurable N\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  discounted_value r (\\<lambda>m y. prices Mkt asset m y * pf asset m y)\n   (Suc n)\n  \\<in> borel_measurable N\n\ngoal (1 subgoal):\n 1. (\\<lambda>z.\n        pf asset (Suc n) z *\n        discounted_value r (prices Mkt asset) (Suc n) z)\n    \\<in> borel_measurable N", "show \"(\\<lambda>z. pf asset (Suc n) z * discounted_value r (prices Mkt asset) (Suc n) z) \\<in> borel_measurable N\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>z.\n        pf asset (Suc n) z *\n        discounted_value r (prices Mkt asset) (Suc n) z)\n    \\<in> borel_measurable N", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<lambda>z.\n        pf asset (Suc n) z *\n        discounted_value r (prices Mkt asset) (Suc n) z)\n    \\<in> borel_measurable N", "have \"pf asset (Suc n) \\<in> borel_measurable M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. random_variable borel (pf asset (Suc n))", "using assms \\<open>asset\\<in> support_set pf\\<close>"], ["proof (prove)\nusing this:\n  risk_neutral_prob N\n  trading_strategy pf\n  subalgebra N M\n  support_set pf \\<subseteq> stocks Mkt\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        integrable N\n         (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w)\n  asset \\<in> support_set pf\n\ngoal (1 subgoal):\n 1. random_variable borel (pf asset (Suc n))", "unfolding trading_strategy_def"], ["proof (prove)\nusing this:\n  risk_neutral_prob N\n  portfolio pf \\<and>\n  (\\<forall>asset\\<in>support_set pf. borel_predict_stoch_proc F (pf asset))\n  subalgebra N M\n  support_set pf \\<subseteq> stocks Mkt\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        integrable N\n         (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w)\n  asset \\<in> support_set pf\n\ngoal (1 subgoal):\n 1. random_variable borel (pf asset (Suc n))", "using borel_predict_stoch_proc_borel_measurable[of \"pf asset\"]"], ["proof (prove)\nusing this:\n  risk_neutral_prob N\n  portfolio pf \\<and>\n  (\\<forall>asset\\<in>support_set pf. borel_predict_stoch_proc F (pf asset))\n  subalgebra N M\n  support_set pf \\<subseteq> stocks Mkt\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        integrable N\n         (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w)\n  asset \\<in> support_set pf\n  borel_predict_stoch_proc F (pf asset) \\<Longrightarrow>\n  \\<forall>n. random_variable borel (pf asset n)\n\ngoal (1 subgoal):\n 1. random_variable borel (pf asset (Suc n))", "by auto"], ["proof (state)\nthis:\n  random_variable borel (pf asset (Suc n))\n\ngoal (1 subgoal):\n 1. (\\<lambda>z.\n        pf asset (Suc n) z *\n        discounted_value r (prices Mkt asset) (Suc n) z)\n    \\<in> borel_measurable N", "hence a: \"pf asset (Suc n) \\<in> borel_measurable N\""], ["proof (prove)\nusing this:\n  random_variable borel (pf asset (Suc n))\n\ngoal (1 subgoal):\n 1. pf asset (Suc n) \\<in> borel_measurable N", "using assms Conditional_Expectation.measurable_from_subalg[of N M _ borel]"], ["proof (prove)\nusing this:\n  random_variable borel (pf asset (Suc n))\n  risk_neutral_prob N\n  trading_strategy pf\n  subalgebra N M\n  support_set pf \\<subseteq> stocks Mkt\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        integrable N\n         (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w)\n  \\<lbrakk>subalgebra N M; random_variable borel ?f\\<rbrakk>\n  \\<Longrightarrow> ?f \\<in> borel_measurable N\n\ngoal (1 subgoal):\n 1. pf asset (Suc n) \\<in> borel_measurable N", "by blast"], ["proof (state)\nthis:\n  pf asset (Suc n) \\<in> borel_measurable N\n\ngoal (1 subgoal):\n 1. (\\<lambda>z.\n        pf asset (Suc n) z *\n        discounted_value r (prices Mkt asset) (Suc n) z)\n    \\<in> borel_measurable N", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>z.\n        pf asset (Suc n) z *\n        discounted_value r (prices Mkt asset) (Suc n) z)\n    \\<in> borel_measurable N", "using a b"], ["proof (prove)\nusing this:\n  pf asset (Suc n) \\<in> borel_measurable N\n  discounted_value r (prices Mkt asset) (Suc n) \\<in> borel_measurable N\n\ngoal (1 subgoal):\n 1. (\\<lambda>z.\n        pf asset (Suc n) z *\n        discounted_value r (prices Mkt asset) (Suc n) z)\n    \\<in> borel_measurable N", "by simp"], ["proof (state)\nthis:\n  (\\<lambda>z.\n      pf asset (Suc n) z * discounted_value r (prices Mkt asset) (Suc n) z)\n  \\<in> borel_measurable N\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<lambda>z.\n      pf asset (Suc n) z * discounted_value r (prices Mkt asset) (Suc n) z)\n  \\<in> borel_measurable N\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  AEeq N\n   (real_cond_exp N (F n)\n     (discounted_value r (\\<lambda>m y. prices Mkt asset m y * pf asset m y)\n       (Suc n)))\n   (real_cond_exp N (F n)\n     (\\<lambda>z.\n         pf asset (Suc n) z *\n         discounted_value r (prices Mkt asset) (Suc n) z))\n\ngoal (1 subgoal):\n 1. AEeq N\n     (real_cond_exp N (F n)\n       (discounted_value r\n         (\\<lambda>m y. prices Mkt asset m y * pf asset m y) (Suc n)))\n     (discounted_value r\n       (\\<lambda>m y. prices Mkt asset m y * pf asset (Suc m) y) n)", "also"], ["proof (state)\nthis:\n  AEeq N\n   (real_cond_exp N (F n)\n     (discounted_value r (\\<lambda>m y. prices Mkt asset m y * pf asset m y)\n       (Suc n)))\n   (real_cond_exp N (F n)\n     (\\<lambda>z.\n         pf asset (Suc n) z *\n         discounted_value r (prices Mkt asset) (Suc n) z))\n\ngoal (1 subgoal):\n 1. AEeq N\n     (real_cond_exp N (F n)\n       (discounted_value r\n         (\\<lambda>m y. prices Mkt asset m y * pf asset m y) (Suc n)))\n     (discounted_value r\n       (\\<lambda>m y. prices Mkt asset m y * pf asset (Suc m) y) n)", "have \"AE w in N. (real_cond_exp N (F n) (\\<lambda>z. pf asset (Suc n) z * discounted_value r (\\<lambda>m y. prices Mkt asset m y) (Suc n) z)) w =\n      pf asset (Suc n) w * (real_cond_exp N (F n) (\\<lambda>z. discounted_value r (\\<lambda>m y. prices Mkt asset m y) (Suc n) z)) w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. AEeq N\n     (real_cond_exp N (F n)\n       (\\<lambda>z.\n           pf asset (Suc n) z *\n           discounted_value r (prices Mkt asset) (Suc n) z))\n     (\\<lambda>w.\n         pf asset (Suc n) w *\n         real_cond_exp N (F n)\n          (discounted_value r (prices Mkt asset) (Suc n)) w)", "proof (rule sigma_finite_subalgebra.real_cond_exp_mult)"], ["proof (state)\ngoal (4 subgoals):\n 1. sigma_finite_subalgebra N (F n)\n 2. pf asset (Suc n) \\<in> borel_measurable (F n)\n 3. discounted_value r (prices Mkt asset) (Suc n) \\<in> borel_measurable N\n 4. integrable N\n     (\\<lambda>z.\n         pf asset (Suc n) z *\n         discounted_value r (prices Mkt asset) (Suc n) z)", "show \"discounted_value r (prices Mkt asset) (Suc n) \\<in> borel_measurable N\""], ["proof (prove)\ngoal (1 subgoal):\n 1. discounted_value r (prices Mkt asset) (Suc n) \\<in> borel_measurable N", "using b"], ["proof (prove)\nusing this:\n  discounted_value r (prices Mkt asset) (Suc n) \\<in> borel_measurable N\n\ngoal (1 subgoal):\n 1. discounted_value r (prices Mkt asset) (Suc n) \\<in> borel_measurable N", "by simp"], ["proof (state)\nthis:\n  discounted_value r (prices Mkt asset) (Suc n) \\<in> borel_measurable N\n\ngoal (3 subgoals):\n 1. sigma_finite_subalgebra N (F n)\n 2. pf asset (Suc n) \\<in> borel_measurable (F n)\n 3. integrable N\n     (\\<lambda>z.\n         pf asset (Suc n) z *\n         discounted_value r (prices Mkt asset) (Suc n) z)", "show \"sigma_finite_subalgebra N (F n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sigma_finite_subalgebra N (F n)", "using nsigfin"], ["proof (prove)\nusing this:\n  \\<forall>n. sigma_finite_subalgebra N (F n)\n\ngoal (1 subgoal):\n 1. sigma_finite_subalgebra N (F n)", ".."], ["proof (state)\nthis:\n  sigma_finite_subalgebra N (F n)\n\ngoal (2 subgoals):\n 1. pf asset (Suc n) \\<in> borel_measurable (F n)\n 2. integrable N\n     (\\<lambda>z.\n         pf asset (Suc n) z *\n         discounted_value r (prices Mkt asset) (Suc n) z)", "show \"pf asset (Suc n) \\<in> borel_measurable (F n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pf asset (Suc n) \\<in> borel_measurable (F n)", "using assms \\<open>asset\\<in> support_set pf\\<close>"], ["proof (prove)\nusing this:\n  risk_neutral_prob N\n  trading_strategy pf\n  subalgebra N M\n  support_set pf \\<subseteq> stocks Mkt\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        integrable N\n         (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w)\n  asset \\<in> support_set pf\n\ngoal (1 subgoal):\n 1. pf asset (Suc n) \\<in> borel_measurable (F n)", "unfolding trading_strategy_def\n          predict_stoch_proc_def"], ["proof (prove)\nusing this:\n  risk_neutral_prob N\n  portfolio pf \\<and>\n  (\\<forall>asset\\<in>support_set pf.\n      pf asset 0 \\<in> borel_measurable (F 0) \\<and>\n      (\\<forall>n. pf asset (Suc n) \\<in> borel_measurable (F n)))\n  subalgebra N M\n  support_set pf \\<subseteq> stocks Mkt\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        integrable N\n         (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w)\n  asset \\<in> support_set pf\n\ngoal (1 subgoal):\n 1. pf asset (Suc n) \\<in> borel_measurable (F n)", "by auto"], ["proof (state)\nthis:\n  pf asset (Suc n) \\<in> borel_measurable (F n)\n\ngoal (1 subgoal):\n 1. integrable N\n     (\\<lambda>z.\n         pf asset (Suc n) z *\n         discounted_value r (prices Mkt asset) (Suc n) z)", "show \"integrable N (\\<lambda>z. pf asset (Suc n) z * discounted_value r (prices Mkt asset) (Suc n) z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. integrable N\n     (\\<lambda>z.\n         pf asset (Suc n) z *\n         discounted_value r (prices Mkt asset) (Suc n) z)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. integrable N\n     (\\<lambda>z.\n         pf asset (Suc n) z *\n         discounted_value r (prices Mkt asset) (Suc n) z)", "have \"integrable N (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. integrable N\n     (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w)", "using assms \\<open>asset \\<in> support_set pf\\<close>"], ["proof (prove)\nusing this:\n  risk_neutral_prob N\n  trading_strategy pf\n  subalgebra N M\n  support_set pf \\<subseteq> stocks Mkt\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        integrable N\n         (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w)\n  asset \\<in> support_set pf\n\ngoal (1 subgoal):\n 1. integrable N\n     (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w)", "by auto"], ["proof (state)\nthis:\n  integrable N (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w)\n\ngoal (1 subgoal):\n 1. integrable N\n     (\\<lambda>z.\n         pf asset (Suc n) z *\n         discounted_value r (prices Mkt asset) (Suc n) z)", "hence \"integrable N (discounted_value r (\\<lambda>m w. prices Mkt asset m w * pf asset m w) (Suc n))\""], ["proof (prove)\nusing this:\n  integrable N (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w)\n\ngoal (1 subgoal):\n 1. integrable N\n     (discounted_value r (\\<lambda>m w. prices Mkt asset m w * pf asset m w)\n       (Suc n))", "using assms"], ["proof (prove)\nusing this:\n  integrable N (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w)\n  risk_neutral_prob N\n  trading_strategy pf\n  subalgebra N M\n  support_set pf \\<subseteq> stocks Mkt\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        integrable N\n         (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w)\n\ngoal (1 subgoal):\n 1. integrable N\n     (discounted_value r (\\<lambda>m w. prices Mkt asset m w * pf asset m w)\n       (Suc n))", "unfolding risk_neutral_prob_def"], ["proof (prove)\nusing this:\n  integrable N (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w)\n  prob_space N \\<and>\n  (\\<forall>asset\\<in>stocks Mkt.\n      martingale N F (discounted_value r (prices Mkt asset)))\n  trading_strategy pf\n  subalgebra N M\n  support_set pf \\<subseteq> stocks Mkt\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        integrable N\n         (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w)\n\ngoal (1 subgoal):\n 1. integrable N\n     (discounted_value r (\\<lambda>m w. prices Mkt asset m w * pf asset m w)\n       (Suc n))", "using acceptable_rate"], ["proof (prove)\nusing this:\n  integrable N (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w)\n  prob_space N \\<and>\n  (\\<forall>asset\\<in>stocks Mkt.\n      martingale N F (discounted_value r (prices Mkt asset)))\n  trading_strategy pf\n  subalgebra N M\n  support_set pf \\<subseteq> stocks Mkt\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        integrable N\n         (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w)\n  - 1 < r\n\ngoal (1 subgoal):\n 1. integrable N\n     (discounted_value r (\\<lambda>m w. prices Mkt asset m w * pf asset m w)\n       (Suc n))", "by (auto simp add:discounted_integrable subalgebra_def)"], ["proof (state)\nthis:\n  integrable N\n   (discounted_value r (\\<lambda>m w. prices Mkt asset m w * pf asset m w)\n     (Suc n))\n\ngoal (1 subgoal):\n 1. integrable N\n     (\\<lambda>z.\n         pf asset (Suc n) z *\n         discounted_value r (prices Mkt asset) (Suc n) z)", "thus ?thesis"], ["proof (prove)\nusing this:\n  integrable N\n   (discounted_value r (\\<lambda>m w. prices Mkt asset m w * pf asset m w)\n     (Suc n))\n\ngoal (1 subgoal):\n 1. integrable N\n     (\\<lambda>z.\n         pf asset (Suc n) z *\n         discounted_value r (prices Mkt asset) (Suc n) z)", "using discounted_mult\n            integrable_cong[of N N \"discounted_value r (\\<lambda>m w. prices Mkt asset m w * pf asset m w) (Suc n)\" \"(\\<lambda>z. pf asset (Suc n) z * discounted_value r (prices Mkt asset) (Suc n) z)\"]"], ["proof (prove)\nusing this:\n  integrable N\n   (discounted_value r (\\<lambda>m w. prices Mkt asset m w * pf asset m w)\n     (Suc n))\n  \\<forall>n w.\n     discounted_value ?r (\\<lambda>m x. ?X m x * ?Y m x) n w =\n     ?X n w * discounted_value ?r ?Y n w\n  \\<lbrakk>N = N;\n   \\<And>x.\n      x \\<in> space N \\<Longrightarrow>\n      discounted_value r (\\<lambda>m w. prices Mkt asset m w * pf asset m w)\n       (Suc n) x =\n      pf asset (Suc n) x *\n      discounted_value r (prices Mkt asset) (Suc n) x\\<rbrakk>\n  \\<Longrightarrow> integrable N\n                     (discounted_value r\n                       (\\<lambda>m w. prices Mkt asset m w * pf asset m w)\n                       (Suc n)) =\n                    integrable N\n                     (\\<lambda>z.\n                         pf asset (Suc n) z *\n                         discounted_value r (prices Mkt asset) (Suc n) z)\n\ngoal (1 subgoal):\n 1. integrable N\n     (\\<lambda>z.\n         pf asset (Suc n) z *\n         discounted_value r (prices Mkt asset) (Suc n) z)", "by (simp add: discounted_value_def)"], ["proof (state)\nthis:\n  integrable N\n   (\\<lambda>z.\n       pf asset (Suc n) z * discounted_value r (prices Mkt asset) (Suc n) z)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  integrable N\n   (\\<lambda>z.\n       pf asset (Suc n) z * discounted_value r (prices Mkt asset) (Suc n) z)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  AEeq N\n   (real_cond_exp N (F n)\n     (\\<lambda>z.\n         pf asset (Suc n) z *\n         discounted_value r (prices Mkt asset) (Suc n) z))\n   (\\<lambda>w.\n       pf asset (Suc n) w *\n       real_cond_exp N (F n) (discounted_value r (prices Mkt asset) (Suc n))\n        w)\n\ngoal (1 subgoal):\n 1. AEeq N\n     (real_cond_exp N (F n)\n       (discounted_value r\n         (\\<lambda>m y. prices Mkt asset m y * pf asset m y) (Suc n)))\n     (discounted_value r\n       (\\<lambda>m y. prices Mkt asset m y * pf asset (Suc m) y) n)", "also"], ["proof (state)\nthis:\n  AEeq N\n   (real_cond_exp N (F n)\n     (\\<lambda>z.\n         pf asset (Suc n) z *\n         discounted_value r (prices Mkt asset) (Suc n) z))\n   (\\<lambda>w.\n       pf asset (Suc n) w *\n       real_cond_exp N (F n) (discounted_value r (prices Mkt asset) (Suc n))\n        w)\n\ngoal (1 subgoal):\n 1. AEeq N\n     (real_cond_exp N (F n)\n       (discounted_value r\n         (\\<lambda>m y. prices Mkt asset m y * pf asset m y) (Suc n)))\n     (discounted_value r\n       (\\<lambda>m y. prices Mkt asset m y * pf asset (Suc m) y) n)", "have \"AE w in N.  pf asset (Suc n) w * (real_cond_exp N (F n) (\\<lambda>z. discounted_value r (\\<lambda>m y. prices Mkt asset m y) (Suc n) z)) w =\n            pf asset (Suc n) w * discounted_value r (\\<lambda>m y. prices Mkt asset m y) n w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. AEeq N\n     (\\<lambda>w.\n         pf asset (Suc n) w *\n         real_cond_exp N (F n)\n          (discounted_value r (prices Mkt asset) (Suc n)) w)\n     (\\<lambda>w.\n         pf asset (Suc n) w * discounted_value r (prices Mkt asset) n w)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. AEeq N\n     (\\<lambda>w.\n         pf asset (Suc n) w *\n         real_cond_exp N (F n)\n          (discounted_value r (prices Mkt asset) (Suc n)) w)\n     (\\<lambda>w.\n         pf asset (Suc n) w * discounted_value r (prices Mkt asset) n w)", "have \"AEeq N (real_cond_exp N (F n) (\\<lambda>z. discounted_value r (\\<lambda>m y. prices Mkt asset m y) (Suc n) z))\n        (\\<lambda>z. discounted_value r (\\<lambda>m y. prices Mkt asset m y) n z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. AEeq N\n     (real_cond_exp N (F n) (discounted_value r (prices Mkt asset) (Suc n)))\n     (discounted_value r (prices Mkt asset) n)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. AEeq N\n     (real_cond_exp N (F n) (discounted_value r (prices Mkt asset) (Suc n)))\n     (discounted_value r (prices Mkt asset) n)", "have \"martingale N F (discounted_value r (prices Mkt asset))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. martingale N F (discounted_value r (prices Mkt asset))", "using assms \\<open>asset \\<in> stocks Mkt\\<close>"], ["proof (prove)\nusing this:\n  risk_neutral_prob N\n  trading_strategy pf\n  subalgebra N M\n  support_set pf \\<subseteq> stocks Mkt\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        integrable N\n         (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w)\n  asset \\<in> stocks Mkt\n\ngoal (1 subgoal):\n 1. martingale N F (discounted_value r (prices Mkt asset))", "unfolding risk_neutral_prob_def"], ["proof (prove)\nusing this:\n  prob_space N \\<and>\n  (\\<forall>asset\\<in>stocks Mkt.\n      martingale N F (discounted_value r (prices Mkt asset)))\n  trading_strategy pf\n  subalgebra N M\n  support_set pf \\<subseteq> stocks Mkt\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        integrable N\n         (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w)\n  asset \\<in> stocks Mkt\n\ngoal (1 subgoal):\n 1. martingale N F (discounted_value r (prices Mkt asset))", "by simp"], ["proof (state)\nthis:\n  martingale N F (discounted_value r (prices Mkt asset))\n\ngoal (1 subgoal):\n 1. AEeq N\n     (real_cond_exp N (F n) (discounted_value r (prices Mkt asset) (Suc n)))\n     (discounted_value r (prices Mkt asset) n)", "moreover"], ["proof (state)\nthis:\n  martingale N F (discounted_value r (prices Mkt asset))\n\ngoal (1 subgoal):\n 1. AEeq N\n     (real_cond_exp N (F n) (discounted_value r (prices Mkt asset) (Suc n)))\n     (discounted_value r (prices Mkt asset) n)", "have \"filtrated_prob_space N F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. filtrated_prob_space N F", "using \\<open>disc_filtr_prob_space N F\\<close>"], ["proof (prove)\nusing this:\n  disc_filtr_prob_space N F\n\ngoal (1 subgoal):\n 1. filtrated_prob_space N F", "using assms(2) disc_filtr_prob_space.axioms(1) filtrated_prob_space.intro filtrated_prob_space_axioms.intro filtration prob_space_axioms"], ["proof (prove)\nusing this:\n  disc_filtr_prob_space N F\n  trading_strategy pf\n  disc_filtr_prob_space ?M ?F \\<Longrightarrow> prob_space ?M\n  \\<lbrakk>prob_space ?M; filtrated_prob_space_axioms ?M ?F\\<rbrakk>\n  \\<Longrightarrow> filtrated_prob_space ?M ?F\n  Filtration.filtration ?M ?F \\<Longrightarrow>\n  filtrated_prob_space_axioms ?M ?F\n  Filtration.filtration M F\n  prob_space M\n\ngoal (1 subgoal):\n 1. filtrated_prob_space N F", "by (metis assms(3) subalgebra_filtration)"], ["proof (state)\nthis:\n  filtrated_prob_space N F\n\ngoal (1 subgoal):\n 1. AEeq N\n     (real_cond_exp N (F n) (discounted_value r (prices Mkt asset) (Suc n)))\n     (discounted_value r (prices Mkt asset) n)", "ultimately"], ["proof (chain)\npicking this:\n  martingale N F (discounted_value r (prices Mkt asset))\n  filtrated_prob_space N F", "show ?thesis"], ["proof (prove)\nusing this:\n  martingale N F (discounted_value r (prices Mkt asset))\n  filtrated_prob_space N F\n\ngoal (1 subgoal):\n 1. AEeq N\n     (real_cond_exp N (F n) (discounted_value r (prices Mkt asset) (Suc n)))\n     (discounted_value r (prices Mkt asset) n)", "using martingaleAE[of N F \"discounted_value r (prices Mkt asset)\" n \"Suc n\"] assms"], ["proof (prove)\nusing this:\n  martingale N F (discounted_value r (prices Mkt asset))\n  filtrated_prob_space N F\n  \\<lbrakk>martingale N F (discounted_value r (prices Mkt asset));\n   n \\<le> Suc n\\<rbrakk>\n  \\<Longrightarrow> AEeq N\n                     (real_cond_exp N (F n)\n                       (discounted_value r (prices Mkt asset) (Suc n)))\n                     (discounted_value r (prices Mkt asset) n)\n  risk_neutral_prob N\n  trading_strategy pf\n  subalgebra N M\n  support_set pf \\<subseteq> stocks Mkt\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        integrable N\n         (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w)\n\ngoal (1 subgoal):\n 1. AEeq N\n     (real_cond_exp N (F n) (discounted_value r (prices Mkt asset) (Suc n)))\n     (discounted_value r (prices Mkt asset) n)", "by simp"], ["proof (state)\nthis:\n  AEeq N\n   (real_cond_exp N (F n) (discounted_value r (prices Mkt asset) (Suc n)))\n   (discounted_value r (prices Mkt asset) n)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  AEeq N\n   (real_cond_exp N (F n) (discounted_value r (prices Mkt asset) (Suc n)))\n   (discounted_value r (prices Mkt asset) n)\n\ngoal (1 subgoal):\n 1. AEeq N\n     (\\<lambda>w.\n         pf asset (Suc n) w *\n         real_cond_exp N (F n)\n          (discounted_value r (prices Mkt asset) (Suc n)) w)\n     (\\<lambda>w.\n         pf asset (Suc n) w * discounted_value r (prices Mkt asset) n w)", "thus ?thesis"], ["proof (prove)\nusing this:\n  AEeq N\n   (real_cond_exp N (F n) (discounted_value r (prices Mkt asset) (Suc n)))\n   (discounted_value r (prices Mkt asset) n)\n\ngoal (1 subgoal):\n 1. AEeq N\n     (\\<lambda>w.\n         pf asset (Suc n) w *\n         real_cond_exp N (F n)\n          (discounted_value r (prices Mkt asset) (Suc n)) w)\n     (\\<lambda>w.\n         pf asset (Suc n) w * discounted_value r (prices Mkt asset) n w)", "by auto"], ["proof (state)\nthis:\n  AEeq N\n   (\\<lambda>w.\n       pf asset (Suc n) w *\n       real_cond_exp N (F n) (discounted_value r (prices Mkt asset) (Suc n))\n        w)\n   (\\<lambda>w.\n       pf asset (Suc n) w * discounted_value r (prices Mkt asset) n w)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  AEeq N\n   (\\<lambda>w.\n       pf asset (Suc n) w *\n       real_cond_exp N (F n) (discounted_value r (prices Mkt asset) (Suc n))\n        w)\n   (\\<lambda>w.\n       pf asset (Suc n) w * discounted_value r (prices Mkt asset) n w)\n\ngoal (1 subgoal):\n 1. AEeq N\n     (real_cond_exp N (F n)\n       (discounted_value r\n         (\\<lambda>m y. prices Mkt asset m y * pf asset m y) (Suc n)))\n     (discounted_value r\n       (\\<lambda>m y. prices Mkt asset m y * pf asset (Suc m) y) n)", "also"], ["proof (state)\nthis:\n  AEeq N\n   (\\<lambda>w.\n       pf asset (Suc n) w *\n       real_cond_exp N (F n) (discounted_value r (prices Mkt asset) (Suc n))\n        w)\n   (\\<lambda>w.\n       pf asset (Suc n) w * discounted_value r (prices Mkt asset) n w)\n\ngoal (1 subgoal):\n 1. AEeq N\n     (real_cond_exp N (F n)\n       (discounted_value r\n         (\\<lambda>m y. prices Mkt asset m y * pf asset m y) (Suc n)))\n     (discounted_value r\n       (\\<lambda>m y. prices Mkt asset m y * pf asset (Suc m) y) n)", "have \"AE w in N.  pf asset (Suc n) w * discounted_value r (\\<lambda>m y. prices Mkt asset m y) n w =\n      discounted_value r (\\<lambda>m y. pf asset (Suc m) y * prices Mkt asset m y) n w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. AEeq N\n     (\\<lambda>w.\n         pf asset (Suc n) w * discounted_value r (prices Mkt asset) n w)\n     (discounted_value r\n       (\\<lambda>m y. pf asset (Suc m) y * prices Mkt asset m y) n)", "by (simp add: discounted_value_def)"], ["proof (state)\nthis:\n  AEeq N\n   (\\<lambda>w.\n       pf asset (Suc n) w * discounted_value r (prices Mkt asset) n w)\n   (discounted_value r\n     (\\<lambda>m y. pf asset (Suc m) y * prices Mkt asset m y) n)\n\ngoal (1 subgoal):\n 1. AEeq N\n     (real_cond_exp N (F n)\n       (discounted_value r\n         (\\<lambda>m y. prices Mkt asset m y * pf asset m y) (Suc n)))\n     (discounted_value r\n       (\\<lambda>m y. prices Mkt asset m y * pf asset (Suc m) y) n)", "also"], ["proof (state)\nthis:\n  AEeq N\n   (\\<lambda>w.\n       pf asset (Suc n) w * discounted_value r (prices Mkt asset) n w)\n   (discounted_value r\n     (\\<lambda>m y. pf asset (Suc m) y * prices Mkt asset m y) n)\n\ngoal (1 subgoal):\n 1. AEeq N\n     (real_cond_exp N (F n)\n       (discounted_value r\n         (\\<lambda>m y. prices Mkt asset m y * pf asset m y) (Suc n)))\n     (discounted_value r\n       (\\<lambda>m y. prices Mkt asset m y * pf asset (Suc m) y) n)", "have \"AE w in N. discounted_value r (\\<lambda>m y. pf asset (Suc m) y * prices Mkt asset m y) n w =\n      discounted_value r (\\<lambda>m y. prices Mkt asset m y * pf asset (Suc m) y) n w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. AEeq N\n     (discounted_value r\n       (\\<lambda>m y. pf asset (Suc m) y * prices Mkt asset m y) n)\n     (discounted_value r\n       (\\<lambda>m y. prices Mkt asset m y * pf asset (Suc m) y) n)", "by (simp add: discounted_value_def)"], ["proof (state)\nthis:\n  AEeq N\n   (discounted_value r\n     (\\<lambda>m y. pf asset (Suc m) y * prices Mkt asset m y) n)\n   (discounted_value r\n     (\\<lambda>m y. prices Mkt asset m y * pf asset (Suc m) y) n)\n\ngoal (1 subgoal):\n 1. AEeq N\n     (real_cond_exp N (F n)\n       (discounted_value r\n         (\\<lambda>m y. prices Mkt asset m y * pf asset m y) (Suc n)))\n     (discounted_value r\n       (\\<lambda>m y. prices Mkt asset m y * pf asset (Suc m) y) n)", "finally"], ["proof (chain)\npicking this:\n  AEeq N\n   (real_cond_exp N (F n)\n     (discounted_value r (\\<lambda>m y. prices Mkt asset m y * pf asset m y)\n       (Suc n)))\n   (discounted_value r\n     (\\<lambda>m y. prices Mkt asset m y * pf asset (Suc m) y) n)", "show \"AE w in N.\n      (real_cond_exp N (F n) (discounted_value r (\\<lambda>m y. prices Mkt asset m y * pf asset m y) (Suc n))) w =\n      (\\<lambda>x. discounted_value r (\\<lambda>m y. prices Mkt asset m y * pf asset (Suc m) y) n x) w\""], ["proof (prove)\nusing this:\n  AEeq N\n   (real_cond_exp N (F n)\n     (discounted_value r (\\<lambda>m y. prices Mkt asset m y * pf asset m y)\n       (Suc n)))\n   (discounted_value r\n     (\\<lambda>m y. prices Mkt asset m y * pf asset (Suc m) y) n)\n\ngoal (1 subgoal):\n 1. AEeq N\n     (real_cond_exp N (F n)\n       (discounted_value r\n         (\\<lambda>m y. prices Mkt asset m y * pf asset m y) (Suc n)))\n     (discounted_value r\n       (\\<lambda>m y. prices Mkt asset m y * pf asset (Suc m) y) n)", "."], ["proof (state)\nthis:\n  AEeq N\n   (real_cond_exp N (F n)\n     (discounted_value r (\\<lambda>m y. prices Mkt asset m y * pf asset m y)\n       (Suc n)))\n   (discounted_value r\n     (\\<lambda>m y. prices Mkt asset m y * pf asset (Suc m) y) n)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  AEeq N\n   (real_cond_exp N (F n)\n     (discounted_value r (\\<lambda>m y. prices Mkt asset m y * pf asset m y)\n       (Suc n)))\n   (discounted_value r\n     (\\<lambda>m y. prices Mkt asset m y * pf asset (Suc m) y) n)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in rfr_disc_equity_market) self_fin_trad_strat_mart:\n  assumes \"risk_neutral_prob N\"\n  and \"filt_equiv F M N\"\n  and \"trading_strategy pf\"\n  and \"self_financing Mkt pf\"\nand \"stock_portfolio Mkt pf\"\n  and \"\\<forall>n. \\<forall> asset \\<in> support_set pf. integrable N (\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w)\"\n  and \"\\<forall>n. \\<forall> asset \\<in> support_set pf. integrable N (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w)\"\nshows \"martingale N F (discounted_value r (cls_val_process Mkt pf))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. martingale N F (discounted_value r (cls_val_process Mkt pf))", "(*unfolding martingale_def*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. martingale N F (discounted_value r (cls_val_process Mkt pf))", "proof (rule disc_martingale_charact)"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<forall>n. integrable N (discounted_value r (cls_val_process Mkt pf) n)\n 2. Filtration.filtration N F\n 3. \\<forall>m. sigma_finite_subalgebra N (F m)\n 4. \\<forall>m.\n       discounted_value r (cls_val_process Mkt pf) m\n       \\<in> borel_measurable (F m)\n 5. \\<forall>n.\n       AEeq N\n        (real_cond_exp N (F n)\n          (discounted_value r (cls_val_process Mkt pf) (Suc n)))\n        (discounted_value r (cls_val_process Mkt pf) n)", "show nsigfin: \"\\<forall>n. sigma_finite_subalgebra N (F n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n. sigma_finite_subalgebra N (F n)", "using filt_equiv_prob_space_subalgebra assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>prob_space ?N; filt_equiv ?F ?M ?N;\n   sigma_finite_subalgebra ?M ?G\\<rbrakk>\n  \\<Longrightarrow> sigma_finite_subalgebra ?N ?G\n  risk_neutral_prob N\n  filt_equiv F M N\n  trading_strategy pf\n  self_financing Mkt pf\n  stock_portfolio Mkt pf\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        integrable N (\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w)\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        integrable N\n         (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w)\n\ngoal (1 subgoal):\n 1. \\<forall>n. sigma_finite_subalgebra N (F n)", "using filtration filtration_def risk_neutral_prob_def subalgebra_sigma_finite"], ["proof (prove)\nusing this:\n  \\<lbrakk>prob_space ?N; filt_equiv ?F ?M ?N;\n   sigma_finite_subalgebra ?M ?G\\<rbrakk>\n  \\<Longrightarrow> sigma_finite_subalgebra ?N ?G\n  risk_neutral_prob N\n  filt_equiv F M N\n  trading_strategy pf\n  self_financing Mkt pf\n  stock_portfolio Mkt pf\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        integrable N (\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w)\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        integrable N\n         (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w)\n  Filtration.filtration M F\n  Filtration.filtration ?M ?F =\n  ((\\<forall>t. subalgebra ?M (?F t)) \\<and>\n   (\\<forall>s t. s \\<le> t \\<longrightarrow> subalgebra (?F t) (?F s)))\n  risk_neutral_prob ?N =\n  (prob_space ?N \\<and>\n   (\\<forall>asset\\<in>stocks Mkt.\n       martingale ?N F (discounted_value r (prices Mkt asset))))\n  subalgebra M ?N \\<Longrightarrow> sigma_finite_subalgebra M ?N\n\ngoal (1 subgoal):\n 1. \\<forall>n. sigma_finite_subalgebra N (F n)", "by fastforce"], ["proof (state)\nthis:\n  \\<forall>n. sigma_finite_subalgebra N (F n)\n\ngoal (4 subgoals):\n 1. \\<forall>n. integrable N (discounted_value r (cls_val_process Mkt pf) n)\n 2. Filtration.filtration N F\n 3. \\<forall>m.\n       discounted_value r (cls_val_process Mkt pf) m\n       \\<in> borel_measurable (F m)\n 4. \\<forall>n.\n       AEeq N\n        (real_cond_exp N (F n)\n          (discounted_value r (cls_val_process Mkt pf) (Suc n)))\n        (discounted_value r (cls_val_process Mkt pf) n)", "show \"filtration N F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Filtration.filtration N F", "using assms"], ["proof (prove)\nusing this:\n  risk_neutral_prob N\n  filt_equiv F M N\n  trading_strategy pf\n  self_financing Mkt pf\n  stock_portfolio Mkt pf\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        integrable N (\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w)\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        integrable N\n         (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w)\n\ngoal (1 subgoal):\n 1. Filtration.filtration N F", "by (simp  add:filt_equiv_filtration)"], ["proof (state)\nthis:\n  Filtration.filtration N F\n\ngoal (3 subgoals):\n 1. \\<forall>n. integrable N (discounted_value r (cls_val_process Mkt pf) n)\n 2. \\<forall>m.\n       discounted_value r (cls_val_process Mkt pf) m\n       \\<in> borel_measurable (F m)\n 3. \\<forall>n.\n       AEeq N\n        (real_cond_exp N (F n)\n          (discounted_value r (cls_val_process Mkt pf) (Suc n)))\n        (discounted_value r (cls_val_process Mkt pf) n)", "have \"borel_adapt_stoch_proc F (discounted_value r (cls_val_process Mkt pf))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. borel_adapt_stoch_proc F (discounted_value r (cls_val_process Mkt pf))", "using assms discounted_adapted\n    cls_val_process_adapted[of pf] stock_portfolio_def"], ["proof (prove)\nusing this:\n  risk_neutral_prob N\n  filt_equiv F M N\n  trading_strategy pf\n  self_financing Mkt pf\n  stock_portfolio Mkt pf\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        integrable N (\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w)\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        integrable N\n         (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w)\n  borel_adapt_stoch_proc ?F ?X \\<Longrightarrow>\n  borel_adapt_stoch_proc ?F (discounted_value ?r ?X)\n  \\<lbrakk>trading_strategy pf; support_adapt Mkt pf\\<rbrakk>\n  \\<Longrightarrow> borel_adapt_stoch_proc F (cls_val_process Mkt pf)\n  stock_portfolio ?Mkt ?p =\n  (portfolio ?p \\<and> support_set ?p \\<subseteq> stocks ?Mkt)\n\ngoal (1 subgoal):\n 1. borel_adapt_stoch_proc F (discounted_value r (cls_val_process Mkt pf))", "by (metis (mono_tags, hide_lams) support_adapt_def readable subsetCE)"], ["proof (state)\nthis:\n  borel_adapt_stoch_proc F (discounted_value r (cls_val_process Mkt pf))\n\ngoal (3 subgoals):\n 1. \\<forall>n. integrable N (discounted_value r (cls_val_process Mkt pf) n)\n 2. \\<forall>m.\n       discounted_value r (cls_val_process Mkt pf) m\n       \\<in> borel_measurable (F m)\n 3. \\<forall>n.\n       AEeq N\n        (real_cond_exp N (F n)\n          (discounted_value r (cls_val_process Mkt pf) (Suc n)))\n        (discounted_value r (cls_val_process Mkt pf) n)", "thus \"\\<forall>m. discounted_value r (cls_val_process Mkt pf) m \\<in> borel_measurable (F m)\""], ["proof (prove)\nusing this:\n  borel_adapt_stoch_proc F (discounted_value r (cls_val_process Mkt pf))\n\ngoal (1 subgoal):\n 1. \\<forall>m.\n       discounted_value r (cls_val_process Mkt pf) m\n       \\<in> borel_measurable (F m)", "unfolding adapt_stoch_proc_def"], ["proof (prove)\nusing this:\n  \\<forall>t.\n     discounted_value r (cls_val_process Mkt pf) t\n     \\<in> borel_measurable (F t)\n\ngoal (1 subgoal):\n 1. \\<forall>m.\n       discounted_value r (cls_val_process Mkt pf) m\n       \\<in> borel_measurable (F m)", "by simp"], ["proof (state)\nthis:\n  \\<forall>m.\n     discounted_value r (cls_val_process Mkt pf) m\n     \\<in> borel_measurable (F m)\n\ngoal (2 subgoals):\n 1. \\<forall>n. integrable N (discounted_value r (cls_val_process Mkt pf) n)\n 2. \\<forall>n.\n       AEeq N\n        (real_cond_exp N (F n)\n          (discounted_value r (cls_val_process Mkt pf) (Suc n)))\n        (discounted_value r (cls_val_process Mkt pf) n)", "show \"\\<forall>t. integrable N (discounted_value r (cls_val_process Mkt pf) t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>t. integrable N (discounted_value r (cls_val_process Mkt pf) t)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>t. integrable N (discounted_value r (cls_val_process Mkt pf) t)", "fix t"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>t. integrable N (discounted_value r (cls_val_process Mkt pf) t)", "have \"integrable N (cls_val_process Mkt pf t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. integrable N (cls_val_process Mkt pf t)", "using assms"], ["proof (prove)\nusing this:\n  risk_neutral_prob N\n  filt_equiv F M N\n  trading_strategy pf\n  self_financing Mkt pf\n  stock_portfolio Mkt pf\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        integrable N (\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w)\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        integrable N\n         (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w)\n\ngoal (1 subgoal):\n 1. integrable N (cls_val_process Mkt pf t)", "by (simp add: integrable_self_fin_uvp)"], ["proof (state)\nthis:\n  integrable N (cls_val_process Mkt pf t)\n\ngoal (1 subgoal):\n 1. \\<And>t. integrable N (discounted_value r (cls_val_process Mkt pf) t)", "thus \"integrable N (discounted_value r (cls_val_process Mkt pf) t)\""], ["proof (prove)\nusing this:\n  integrable N (cls_val_process Mkt pf t)\n\ngoal (1 subgoal):\n 1. integrable N (discounted_value r (cls_val_process Mkt pf) t)", "using assms discounted_integrable acceptable_rate"], ["proof (prove)\nusing this:\n  integrable N (cls_val_process Mkt pf t)\n  risk_neutral_prob N\n  filt_equiv F M N\n  trading_strategy pf\n  self_financing Mkt pf\n  stock_portfolio Mkt pf\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        integrable N (\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w)\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        integrable N\n         (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w)\n  \\<lbrakk>integrable ?N (?X ?n); - 1 < ?r; space ?N = space M\\<rbrakk>\n  \\<Longrightarrow> integrable ?N (discounted_value ?r ?X ?n)\n  - 1 < r\n\ngoal (1 subgoal):\n 1. integrable N (discounted_value r (cls_val_process Mkt pf) t)", "by (metis filt_equiv_space)"], ["proof (state)\nthis:\n  integrable N (discounted_value r (cls_val_process Mkt pf) t)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>t. integrable N (discounted_value r (cls_val_process Mkt pf) t)\n\ngoal (1 subgoal):\n 1. \\<forall>n.\n       AEeq N\n        (real_cond_exp N (F n)\n          (discounted_value r (cls_val_process Mkt pf) (Suc n)))\n        (discounted_value r (cls_val_process Mkt pf) n)", "show \"\\<forall>n. AE w in N. real_cond_exp N (F n) (discounted_value r (cls_val_process Mkt pf) (Suc n)) w =\n                   discounted_value r (cls_val_process Mkt pf) n w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n.\n       AEeq N\n        (real_cond_exp N (F n)\n          (discounted_value r (cls_val_process Mkt pf) (Suc n)))\n        (discounted_value r (cls_val_process Mkt pf) n)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       AEeq N\n        (real_cond_exp N (F n)\n          (discounted_value r (cls_val_process Mkt pf) (Suc n)))\n        (discounted_value r (cls_val_process Mkt pf) n)", "fix n"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       AEeq N\n        (real_cond_exp N (F n)\n          (discounted_value r (cls_val_process Mkt pf) (Suc n)))\n        (discounted_value r (cls_val_process Mkt pf) n)", "show \"AE w in N. real_cond_exp N (F n) (discounted_value r (cls_val_process Mkt pf) (Suc n)) w =\n                    discounted_value r (cls_val_process Mkt pf) n w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. AEeq N\n     (real_cond_exp N (F n)\n       (discounted_value r (cls_val_process Mkt pf) (Suc n)))\n     (discounted_value r (cls_val_process Mkt pf) n)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. AEeq N\n     (real_cond_exp N (F n)\n       (discounted_value r (cls_val_process Mkt pf) (Suc n)))\n     (discounted_value r (cls_val_process Mkt pf) n)", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. AEeq N\n     (real_cond_exp N (F n)\n       (discounted_value r (cls_val_process Mkt pf) (Suc n)))\n     (discounted_value r (cls_val_process Mkt pf) n)", "fix w"], ["proof (state)\ngoal (1 subgoal):\n 1. AEeq N\n     (real_cond_exp N (F n)\n       (discounted_value r (cls_val_process Mkt pf) (Suc n)))\n     (discounted_value r (cls_val_process Mkt pf) n)", "assume \"w\\<in> space M\""], ["proof (state)\nthis:\n  w \\<in> space M\n\ngoal (1 subgoal):\n 1. AEeq N\n     (real_cond_exp N (F n)\n       (discounted_value r (cls_val_process Mkt pf) (Suc n)))\n     (discounted_value r (cls_val_process Mkt pf) n)", "have \"discounted_value r (cls_val_process Mkt pf) (Suc n) w =\n                  discount_factor r (Suc n) w * (\\<Sum>x\\<in>support_set pf. prices Mkt x (Suc n) w * pf x (Suc n) w)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. discounted_value r (cls_val_process Mkt pf) (Suc n) w =\n    discount_factor r (Suc n) w *\n    (\\<Sum>x\\<in>support_set pf. prices Mkt x (Suc n) w * pf x (Suc n) w)", "unfolding discounted_value_def cls_val_process_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. discount_factor r (Suc n) w *\n    (if \\<not> portfolio pf then \\<lambda>n w. 0 else up_cl_proc Mkt pf)\n     (Suc n) w =\n    discount_factor r (Suc n) w *\n    (\\<Sum>x\\<in>support_set pf. prices Mkt x (Suc n) w * pf x (Suc n) w)", "using assms"], ["proof (prove)\nusing this:\n  risk_neutral_prob N\n  filt_equiv F M N\n  trading_strategy pf\n  self_financing Mkt pf\n  stock_portfolio Mkt pf\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        integrable N (\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w)\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        integrable N\n         (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w)\n\ngoal (1 subgoal):\n 1. discount_factor r (Suc n) w *\n    (if \\<not> portfolio pf then \\<lambda>n w. 0 else up_cl_proc Mkt pf)\n     (Suc n) w =\n    discount_factor r (Suc n) w *\n    (\\<Sum>x\\<in>support_set pf. prices Mkt x (Suc n) w * pf x (Suc n) w)", "unfolding trading_strategy_def"], ["proof (prove)\nusing this:\n  risk_neutral_prob N\n  filt_equiv F M N\n  portfolio pf \\<and>\n  (\\<forall>asset\\<in>support_set pf. borel_predict_stoch_proc F (pf asset))\n  self_financing Mkt pf\n  stock_portfolio Mkt pf\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        integrable N (\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w)\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        integrable N\n         (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w)\n\ngoal (1 subgoal):\n 1. discount_factor r (Suc n) w *\n    (if \\<not> portfolio pf then \\<lambda>n w. 0 else up_cl_proc Mkt pf)\n     (Suc n) w =\n    discount_factor r (Suc n) w *\n    (\\<Sum>x\\<in>support_set pf. prices Mkt x (Suc n) w * pf x (Suc n) w)", "by simp"], ["proof (state)\nthis:\n  discounted_value r (cls_val_process Mkt pf) (Suc n) w =\n  discount_factor r (Suc n) w *\n  (\\<Sum>x\\<in>support_set pf. prices Mkt x (Suc n) w * pf x (Suc n) w)\n\ngoal (1 subgoal):\n 1. AEeq N\n     (real_cond_exp N (F n)\n       (discounted_value r (cls_val_process Mkt pf) (Suc n)))\n     (discounted_value r (cls_val_process Mkt pf) n)", "also"], ["proof (state)\nthis:\n  discounted_value r (cls_val_process Mkt pf) (Suc n) w =\n  discount_factor r (Suc n) w *\n  (\\<Sum>x\\<in>support_set pf. prices Mkt x (Suc n) w * pf x (Suc n) w)\n\ngoal (1 subgoal):\n 1. AEeq N\n     (real_cond_exp N (F n)\n       (discounted_value r (cls_val_process Mkt pf) (Suc n)))\n     (discounted_value r (cls_val_process Mkt pf) n)", "have \"... = (\\<Sum>x\\<in>support_set pf. discount_factor r (Suc n) w * prices Mkt x (Suc n) w * pf x (Suc n) w)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. discount_factor r (Suc n) w *\n    (\\<Sum>x\\<in>support_set pf. prices Mkt x (Suc n) w * pf x (Suc n) w) =\n    (\\<Sum>x\\<in>support_set pf.\n       discount_factor r (Suc n) w * prices Mkt x (Suc n) w *\n       pf x (Suc n) w)", "by (metis (no_types, lifting) mult.assoc sum.cong sum_distrib_left)"], ["proof (state)\nthis:\n  discount_factor r (Suc n) w *\n  (\\<Sum>x\\<in>support_set pf. prices Mkt x (Suc n) w * pf x (Suc n) w) =\n  (\\<Sum>x\\<in>support_set pf.\n     discount_factor r (Suc n) w * prices Mkt x (Suc n) w * pf x (Suc n) w)\n\ngoal (1 subgoal):\n 1. AEeq N\n     (real_cond_exp N (F n)\n       (discounted_value r (cls_val_process Mkt pf) (Suc n)))\n     (discounted_value r (cls_val_process Mkt pf) n)", "finally"], ["proof (chain)\npicking this:\n  discounted_value r (cls_val_process Mkt pf) (Suc n) w =\n  (\\<Sum>x\\<in>support_set pf.\n     discount_factor r (Suc n) w * prices Mkt x (Suc n) w * pf x (Suc n) w)", "have \"discounted_value r (cls_val_process Mkt pf) (Suc n) w =\n                  (\\<Sum>x\\<in>support_set pf. discount_factor r (Suc n) w * prices Mkt x (Suc n) w * pf x (Suc n) w)\""], ["proof (prove)\nusing this:\n  discounted_value r (cls_val_process Mkt pf) (Suc n) w =\n  (\\<Sum>x\\<in>support_set pf.\n     discount_factor r (Suc n) w * prices Mkt x (Suc n) w * pf x (Suc n) w)\n\ngoal (1 subgoal):\n 1. discounted_value r (cls_val_process Mkt pf) (Suc n) w =\n    (\\<Sum>x\\<in>support_set pf.\n       discount_factor r (Suc n) w * prices Mkt x (Suc n) w *\n       pf x (Suc n) w)", "."], ["proof (state)\nthis:\n  discounted_value r (cls_val_process Mkt pf) (Suc n) w =\n  (\\<Sum>x\\<in>support_set pf.\n     discount_factor r (Suc n) w * prices Mkt x (Suc n) w * pf x (Suc n) w)\n\ngoal (1 subgoal):\n 1. AEeq N\n     (real_cond_exp N (F n)\n       (discounted_value r (cls_val_process Mkt pf) (Suc n)))\n     (discounted_value r (cls_val_process Mkt pf) n)", "}"], ["proof (state)\nthis:\n  ?w15 \\<in> space M \\<Longrightarrow>\n  discounted_value r (cls_val_process Mkt pf) (Suc n) ?w15 =\n  (\\<Sum>x\\<in>support_set pf.\n     discount_factor r (Suc n) ?w15 * prices Mkt x (Suc n) ?w15 *\n     pf x (Suc n) ?w15)\n\ngoal (1 subgoal):\n 1. AEeq N\n     (real_cond_exp N (F n)\n       (discounted_value r (cls_val_process Mkt pf) (Suc n)))\n     (discounted_value r (cls_val_process Mkt pf) n)", "hence space: \"\\<forall>w\\<in> space M. discounted_value r (cls_val_process Mkt pf) (Suc n) w =\n                (\\<Sum>x\\<in>support_set pf. discount_factor r (Suc n) w * prices Mkt x (Suc n) w * pf x (Suc n) w)\""], ["proof (prove)\nusing this:\n  ?w15 \\<in> space M \\<Longrightarrow>\n  discounted_value r (cls_val_process Mkt pf) (Suc n) ?w15 =\n  (\\<Sum>x\\<in>support_set pf.\n     discount_factor r (Suc n) ?w15 * prices Mkt x (Suc n) ?w15 *\n     pf x (Suc n) ?w15)\n\ngoal (1 subgoal):\n 1. \\<forall>w\\<in>space M.\n       discounted_value r (cls_val_process Mkt pf) (Suc n) w =\n       (\\<Sum>x\\<in>support_set pf.\n          discount_factor r (Suc n) w * prices Mkt x (Suc n) w *\n          pf x (Suc n) w)", "by simp"], ["proof (state)\nthis:\n  \\<forall>w\\<in>space M.\n     discounted_value r (cls_val_process Mkt pf) (Suc n) w =\n     (\\<Sum>x\\<in>support_set pf.\n        discount_factor r (Suc n) w * prices Mkt x (Suc n) w *\n        pf x (Suc n) w)\n\ngoal (1 subgoal):\n 1. AEeq N\n     (real_cond_exp N (F n)\n       (discounted_value r (cls_val_process Mkt pf) (Suc n)))\n     (discounted_value r (cls_val_process Mkt pf) n)", "hence nspace: \"\\<forall>w\\<in> space N. discounted_value r (cls_val_process Mkt pf) (Suc n) w =\n                (\\<Sum>x\\<in>support_set pf. discount_factor r (Suc n) w * prices Mkt x (Suc n) w * pf x (Suc n) w)\""], ["proof (prove)\nusing this:\n  \\<forall>w\\<in>space M.\n     discounted_value r (cls_val_process Mkt pf) (Suc n) w =\n     (\\<Sum>x\\<in>support_set pf.\n        discount_factor r (Suc n) w * prices Mkt x (Suc n) w *\n        pf x (Suc n) w)\n\ngoal (1 subgoal):\n 1. \\<forall>w\\<in>space N.\n       discounted_value r (cls_val_process Mkt pf) (Suc n) w =\n       (\\<Sum>x\\<in>support_set pf.\n          discount_factor r (Suc n) w * prices Mkt x (Suc n) w *\n          pf x (Suc n) w)", "using assms"], ["proof (prove)\nusing this:\n  \\<forall>w\\<in>space M.\n     discounted_value r (cls_val_process Mkt pf) (Suc n) w =\n     (\\<Sum>x\\<in>support_set pf.\n        discount_factor r (Suc n) w * prices Mkt x (Suc n) w *\n        pf x (Suc n) w)\n  risk_neutral_prob N\n  filt_equiv F M N\n  trading_strategy pf\n  self_financing Mkt pf\n  stock_portfolio Mkt pf\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        integrable N (\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w)\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        integrable N\n         (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w)\n\ngoal (1 subgoal):\n 1. \\<forall>w\\<in>space N.\n       discounted_value r (cls_val_process Mkt pf) (Suc n) w =\n       (\\<Sum>x\\<in>support_set pf.\n          discount_factor r (Suc n) w * prices Mkt x (Suc n) w *\n          pf x (Suc n) w)", "by (simp add:filt_equiv_space)"], ["proof (state)\nthis:\n  \\<forall>w\\<in>space N.\n     discounted_value r (cls_val_process Mkt pf) (Suc n) w =\n     (\\<Sum>x\\<in>support_set pf.\n        discount_factor r (Suc n) w * prices Mkt x (Suc n) w *\n        pf x (Suc n) w)\n\ngoal (1 subgoal):\n 1. AEeq N\n     (real_cond_exp N (F n)\n       (discounted_value r (cls_val_process Mkt pf) (Suc n)))\n     (discounted_value r (cls_val_process Mkt pf) n)", "have sup_disc: \"\\<forall>x \\<in> support_set pf. AE w in N.\n        (real_cond_exp N (F n) (discounted_value r (\\<lambda>m y. prices Mkt x m y * pf x m y) (Suc n))) w =\n        discounted_value r (\\<lambda>m y. prices Mkt x m y * pf x (Suc m) y) n w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>support_set pf.\n       AEeq N\n        (real_cond_exp N (F n)\n          (discounted_value r (\\<lambda>m y. prices Mkt x m y * pf x m y)\n            (Suc n)))\n        (discounted_value r\n          (\\<lambda>m y. prices Mkt x m y * pf x (Suc m) y) n)", "using assms"], ["proof (prove)\nusing this:\n  risk_neutral_prob N\n  filt_equiv F M N\n  trading_strategy pf\n  self_financing Mkt pf\n  stock_portfolio Mkt pf\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        integrable N (\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w)\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        integrable N\n         (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w)\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>support_set pf.\n       AEeq N\n        (real_cond_exp N (F n)\n          (discounted_value r (\\<lambda>m y. prices Mkt x m y * pf x m y)\n            (Suc n)))\n        (discounted_value r\n          (\\<lambda>m y. prices Mkt x m y * pf x (Suc m) y) n)", "by (simp add:stocks_portfolio_risk_neutral filt_equiv_imp_subalgebra stock_portfolio_def)"], ["proof (state)\nthis:\n  \\<forall>x\\<in>support_set pf.\n     AEeq N\n      (real_cond_exp N (F n)\n        (discounted_value r (\\<lambda>m y. prices Mkt x m y * pf x m y)\n          (Suc n)))\n      (discounted_value r (\\<lambda>m y. prices Mkt x m y * pf x (Suc m) y)\n        n)\n\ngoal (1 subgoal):\n 1. AEeq N\n     (real_cond_exp N (F n)\n       (discounted_value r (cls_val_process Mkt pf) (Suc n)))\n     (discounted_value r (cls_val_process Mkt pf) n)", "have \"AE w in N. real_cond_exp N (F n) (discounted_value r (cls_val_process Mkt pf) (Suc n)) w =\n                real_cond_exp N (F n) (\\<lambda>y. \\<Sum>x\\<in>support_set pf. discounted_value r (\\<lambda>m y. prices Mkt x m y * pf x m y) (Suc n) y) w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. AEeq N\n     (real_cond_exp N (F n)\n       (discounted_value r (cls_val_process Mkt pf) (Suc n)))\n     (real_cond_exp N (F n)\n       (\\<lambda>y.\n           \\<Sum>x\\<in>support_set pf.\n             discounted_value r (\\<lambda>m y. prices Mkt x m y * pf x m y)\n              (Suc n) y))", "proof (rule sigma_finite_subalgebra.real_cond_exp_cong')"], ["proof (state)\ngoal (3 subgoals):\n 1. sigma_finite_subalgebra N (F n)\n 2. \\<forall>w\\<in>space N.\n       discounted_value r (cls_val_process Mkt pf) (Suc n) w =\n       (\\<Sum>x\\<in>support_set pf.\n          discounted_value r (\\<lambda>m y. prices Mkt x m y * pf x m y)\n           (Suc n) w)\n 3. discounted_value r (cls_val_process Mkt pf) (Suc n)\n    \\<in> borel_measurable N", "show \"sigma_finite_subalgebra N (F n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sigma_finite_subalgebra N (F n)", "using nsigfin"], ["proof (prove)\nusing this:\n  \\<forall>n. sigma_finite_subalgebra N (F n)\n\ngoal (1 subgoal):\n 1. sigma_finite_subalgebra N (F n)", ".."], ["proof (state)\nthis:\n  sigma_finite_subalgebra N (F n)\n\ngoal (2 subgoals):\n 1. \\<forall>w\\<in>space N.\n       discounted_value r (cls_val_process Mkt pf) (Suc n) w =\n       (\\<Sum>x\\<in>support_set pf.\n          discounted_value r (\\<lambda>m y. prices Mkt x m y * pf x m y)\n           (Suc n) w)\n 2. discounted_value r (cls_val_process Mkt pf) (Suc n)\n    \\<in> borel_measurable N", "show \"\\<forall>w\\<in>space N. discounted_value r (cls_val_process Mkt pf) (Suc n) w =\n          (\\<lambda>y. \\<Sum>x\\<in>support_set pf. discounted_value r (\\<lambda>m y. prices Mkt x m y * pf x m y) (Suc n) y) w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>w\\<in>space N.\n       discounted_value r (cls_val_process Mkt pf) (Suc n) w =\n       (\\<Sum>x\\<in>support_set pf.\n          discounted_value r (\\<lambda>m y. prices Mkt x m y * pf x m y)\n           (Suc n) w)", "using nspace"], ["proof (prove)\nusing this:\n  \\<forall>w\\<in>space N.\n     discounted_value r (cls_val_process Mkt pf) (Suc n) w =\n     (\\<Sum>x\\<in>support_set pf.\n        discount_factor r (Suc n) w * prices Mkt x (Suc n) w *\n        pf x (Suc n) w)\n\ngoal (1 subgoal):\n 1. \\<forall>w\\<in>space N.\n       discounted_value r (cls_val_process Mkt pf) (Suc n) w =\n       (\\<Sum>x\\<in>support_set pf.\n          discounted_value r (\\<lambda>m y. prices Mkt x m y * pf x m y)\n           (Suc n) w)", "by (metis (no_types, lifting) discounted_value_def mult.assoc sum.cong)"], ["proof (state)\nthis:\n  \\<forall>w\\<in>space N.\n     discounted_value r (cls_val_process Mkt pf) (Suc n) w =\n     (\\<Sum>x\\<in>support_set pf.\n        discounted_value r (\\<lambda>m y. prices Mkt x m y * pf x m y)\n         (Suc n) w)\n\ngoal (1 subgoal):\n 1. discounted_value r (cls_val_process Mkt pf) (Suc n)\n    \\<in> borel_measurable N", "show \"(discounted_value r (cls_val_process Mkt pf) (Suc n)) \\<in> borel_measurable N\""], ["proof (prove)\ngoal (1 subgoal):\n 1. discounted_value r (cls_val_process Mkt pf) (Suc n)\n    \\<in> borel_measurable N", "using assms"], ["proof (prove)\nusing this:\n  risk_neutral_prob N\n  filt_equiv F M N\n  trading_strategy pf\n  self_financing Mkt pf\n  stock_portfolio Mkt pf\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        integrable N (\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w)\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        integrable N\n         (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w)\n\ngoal (1 subgoal):\n 1. discounted_value r (cls_val_process Mkt pf) (Suc n)\n    \\<in> borel_measurable N", "using \\<open>\\<forall>t. integrable N (discounted_value r (cls_val_process Mkt pf) t)\\<close>"], ["proof (prove)\nusing this:\n  risk_neutral_prob N\n  filt_equiv F M N\n  trading_strategy pf\n  self_financing Mkt pf\n  stock_portfolio Mkt pf\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        integrable N (\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w)\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        integrable N\n         (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w)\n  \\<forall>t. integrable N (discounted_value r (cls_val_process Mkt pf) t)\n\ngoal (1 subgoal):\n 1. discounted_value r (cls_val_process Mkt pf) (Suc n)\n    \\<in> borel_measurable N", "by blast"], ["proof (state)\nthis:\n  discounted_value r (cls_val_process Mkt pf) (Suc n)\n  \\<in> borel_measurable N\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  AEeq N\n   (real_cond_exp N (F n)\n     (discounted_value r (cls_val_process Mkt pf) (Suc n)))\n   (real_cond_exp N (F n)\n     (\\<lambda>y.\n         \\<Sum>x\\<in>support_set pf.\n           discounted_value r (\\<lambda>m y. prices Mkt x m y * pf x m y)\n            (Suc n) y))\n\ngoal (1 subgoal):\n 1. AEeq N\n     (real_cond_exp N (F n)\n       (discounted_value r (cls_val_process Mkt pf) (Suc n)))\n     (discounted_value r (cls_val_process Mkt pf) n)", "also"], ["proof (state)\nthis:\n  AEeq N\n   (real_cond_exp N (F n)\n     (discounted_value r (cls_val_process Mkt pf) (Suc n)))\n   (real_cond_exp N (F n)\n     (\\<lambda>y.\n         \\<Sum>x\\<in>support_set pf.\n           discounted_value r (\\<lambda>m y. prices Mkt x m y * pf x m y)\n            (Suc n) y))\n\ngoal (1 subgoal):\n 1. AEeq N\n     (real_cond_exp N (F n)\n       (discounted_value r (cls_val_process Mkt pf) (Suc n)))\n     (discounted_value r (cls_val_process Mkt pf) n)", "have \"AE w in N. real_cond_exp N (F n)\n        (\\<lambda>y. \\<Sum>x\\<in>support_set pf. discounted_value r (\\<lambda>m y. prices Mkt x m y * pf x m y) (Suc n) y) w =\n        (\\<Sum>x\\<in> support_set pf. (real_cond_exp N (F n) (discounted_value r (\\<lambda>m y. prices Mkt x m y * pf x m y) (Suc n))) w)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. AEeq N\n     (real_cond_exp N (F n)\n       (\\<lambda>y.\n           \\<Sum>x\\<in>support_set pf.\n             discounted_value r (\\<lambda>m y. prices Mkt x m y * pf x m y)\n              (Suc n) y))\n     (\\<lambda>w.\n         \\<Sum>x\\<in>support_set pf.\n           real_cond_exp N (F n)\n            (discounted_value r (\\<lambda>m y. prices Mkt x m y * pf x m y)\n              (Suc n))\n            w)", "proof (rule sigma_finite_subalgebra.real_cond_exp_bsum)"], ["proof (state)\ngoal (2 subgoals):\n 1. sigma_finite_subalgebra N (F n)\n 2. \\<And>x.\n       x \\<in> support_set pf \\<Longrightarrow>\n       integrable N\n        (discounted_value r (\\<lambda>m y. prices Mkt x m y * pf x m y)\n          (Suc n))", "show \"sigma_finite_subalgebra N (F n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sigma_finite_subalgebra N (F n)", "using filt_equiv_prob_space_subalgebra assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>prob_space ?N; filt_equiv ?F ?M ?N;\n   sigma_finite_subalgebra ?M ?G\\<rbrakk>\n  \\<Longrightarrow> sigma_finite_subalgebra ?N ?G\n  risk_neutral_prob N\n  filt_equiv F M N\n  trading_strategy pf\n  self_financing Mkt pf\n  stock_portfolio Mkt pf\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        integrable N (\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w)\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        integrable N\n         (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w)\n\ngoal (1 subgoal):\n 1. sigma_finite_subalgebra N (F n)", "using filtration filtration_def risk_neutral_prob_def subalgebra_sigma_finite"], ["proof (prove)\nusing this:\n  \\<lbrakk>prob_space ?N; filt_equiv ?F ?M ?N;\n   sigma_finite_subalgebra ?M ?G\\<rbrakk>\n  \\<Longrightarrow> sigma_finite_subalgebra ?N ?G\n  risk_neutral_prob N\n  filt_equiv F M N\n  trading_strategy pf\n  self_financing Mkt pf\n  stock_portfolio Mkt pf\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        integrable N (\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w)\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        integrable N\n         (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w)\n  Filtration.filtration M F\n  Filtration.filtration ?M ?F =\n  ((\\<forall>t. subalgebra ?M (?F t)) \\<and>\n   (\\<forall>s t. s \\<le> t \\<longrightarrow> subalgebra (?F t) (?F s)))\n  risk_neutral_prob ?N =\n  (prob_space ?N \\<and>\n   (\\<forall>asset\\<in>stocks Mkt.\n       martingale ?N F (discounted_value r (prices Mkt asset))))\n  subalgebra M ?N \\<Longrightarrow> sigma_finite_subalgebra M ?N\n\ngoal (1 subgoal):\n 1. sigma_finite_subalgebra N (F n)", "by fastforce"], ["proof (state)\nthis:\n  sigma_finite_subalgebra N (F n)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> support_set pf \\<Longrightarrow>\n       integrable N\n        (discounted_value r (\\<lambda>m y. prices Mkt x m y * pf x m y)\n          (Suc n))", "fix asset"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> support_set pf \\<Longrightarrow>\n       integrable N\n        (discounted_value r (\\<lambda>m y. prices Mkt x m y * pf x m y)\n          (Suc n))", "assume \"asset \\<in> support_set pf\""], ["proof (state)\nthis:\n  asset \\<in> support_set pf\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> support_set pf \\<Longrightarrow>\n       integrable N\n        (discounted_value r (\\<lambda>m y. prices Mkt x m y * pf x m y)\n          (Suc n))", "show \"integrable N (discounted_value r (\\<lambda>m y. prices Mkt asset m y * pf asset m y) (Suc n))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. integrable N\n     (discounted_value r (\\<lambda>m y. prices Mkt asset m y * pf asset m y)\n       (Suc n))", "proof (rule discounted_integrable)"], ["proof (state)\ngoal (3 subgoals):\n 1. integrable N\n     (\\<lambda>y. prices Mkt asset (Suc n) y * pf asset (Suc n) y)\n 2. - 1 < r\n 3. space N = space M", "show \"integrable N (\\<lambda>y. prices Mkt asset (Suc n) y * pf asset (Suc n) y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. integrable N\n     (\\<lambda>y. prices Mkt asset (Suc n) y * pf asset (Suc n) y)", "using assms \\<open>asset\\<in> support_set pf\\<close>"], ["proof (prove)\nusing this:\n  risk_neutral_prob N\n  filt_equiv F M N\n  trading_strategy pf\n  self_financing Mkt pf\n  stock_portfolio Mkt pf\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        integrable N (\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w)\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        integrable N\n         (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w)\n  asset \\<in> support_set pf\n\ngoal (1 subgoal):\n 1. integrable N\n     (\\<lambda>y. prices Mkt asset (Suc n) y * pf asset (Suc n) y)", "by simp"], ["proof (state)\nthis:\n  integrable N (\\<lambda>y. prices Mkt asset (Suc n) y * pf asset (Suc n) y)\n\ngoal (2 subgoals):\n 1. - 1 < r\n 2. space N = space M", "show \"space N = space M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. space N = space M", "using assms"], ["proof (prove)\nusing this:\n  risk_neutral_prob N\n  filt_equiv F M N\n  trading_strategy pf\n  self_financing Mkt pf\n  stock_portfolio Mkt pf\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        integrable N (\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w)\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        integrable N\n         (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w)\n\ngoal (1 subgoal):\n 1. space N = space M", "by (metis filt_equiv_space)"], ["proof (state)\nthis:\n  space N = space M\n\ngoal (1 subgoal):\n 1. - 1 < r", "show \"-1 < r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - 1 < r", "using acceptable_rate"], ["proof (prove)\nusing this:\n  - 1 < r\n\ngoal (1 subgoal):\n 1. - 1 < r", "by simp"], ["proof (state)\nthis:\n  - 1 < r\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  integrable N\n   (discounted_value r (\\<lambda>m y. prices Mkt asset m y * pf asset m y)\n     (Suc n))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  AEeq N\n   (real_cond_exp N (F n)\n     (\\<lambda>y.\n         \\<Sum>x\\<in>support_set pf.\n           discounted_value r (\\<lambda>m y. prices Mkt x m y * pf x m y)\n            (Suc n) y))\n   (\\<lambda>w.\n       \\<Sum>x\\<in>support_set pf.\n         real_cond_exp N (F n)\n          (discounted_value r (\\<lambda>m y. prices Mkt x m y * pf x m y)\n            (Suc n))\n          w)\n\ngoal (1 subgoal):\n 1. AEeq N\n     (real_cond_exp N (F n)\n       (discounted_value r (cls_val_process Mkt pf) (Suc n)))\n     (discounted_value r (cls_val_process Mkt pf) n)", "also"], ["proof (state)\nthis:\n  AEeq N\n   (real_cond_exp N (F n)\n     (\\<lambda>y.\n         \\<Sum>x\\<in>support_set pf.\n           discounted_value r (\\<lambda>m y. prices Mkt x m y * pf x m y)\n            (Suc n) y))\n   (\\<lambda>w.\n       \\<Sum>x\\<in>support_set pf.\n         real_cond_exp N (F n)\n          (discounted_value r (\\<lambda>m y. prices Mkt x m y * pf x m y)\n            (Suc n))\n          w)\n\ngoal (1 subgoal):\n 1. AEeq N\n     (real_cond_exp N (F n)\n       (discounted_value r (cls_val_process Mkt pf) (Suc n)))\n     (discounted_value r (cls_val_process Mkt pf) n)", "have \"AE w in N.\n        (\\<Sum>x\\<in> support_set pf. (real_cond_exp N (F n) (discounted_value r (\\<lambda>m y. prices Mkt x m y * pf x m y) (Suc n))) w) =\n        (\\<Sum>x\\<in> support_set pf. discounted_value r (\\<lambda>m y. prices Mkt x m y * pf x (Suc m) y) n w)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. AEeq N\n     (\\<lambda>w.\n         \\<Sum>x\\<in>support_set pf.\n           real_cond_exp N (F n)\n            (discounted_value r (\\<lambda>m y. prices Mkt x m y * pf x m y)\n              (Suc n))\n            w)\n     (\\<lambda>w.\n         \\<Sum>x\\<in>support_set pf.\n           discounted_value r\n            (\\<lambda>m y. prices Mkt x m y * pf x (Suc m) y) n w)", "proof (rule AE_sum)"], ["proof (state)\ngoal (2 subgoals):\n 1. finite (support_set pf)\n 2. \\<forall>x\\<in>support_set pf.\n       AEeq N\n        (real_cond_exp N (F n)\n          (discounted_value r (\\<lambda>m y. prices Mkt x m y * pf x m y)\n            (Suc n)))\n        (discounted_value r\n          (\\<lambda>m y. prices Mkt x m y * pf x (Suc m) y) n)", "show \"finite (support_set pf)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (support_set pf)", "using assms(3) portfolio_def trading_strategy_def"], ["proof (prove)\nusing this:\n  trading_strategy pf\n  portfolio ?p = finite (support_set ?p)\n  trading_strategy ?p =\n  (portfolio ?p \\<and>\n   (\\<forall>asset\\<in>support_set ?p.\n       borel_predict_stoch_proc F (?p asset)))\n\ngoal (1 subgoal):\n 1. finite (support_set pf)", "by auto"], ["proof (state)\nthis:\n  finite (support_set pf)\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>support_set pf.\n       AEeq N\n        (real_cond_exp N (F n)\n          (discounted_value r (\\<lambda>m y. prices Mkt x m y * pf x m y)\n            (Suc n)))\n        (discounted_value r\n          (\\<lambda>m y. prices Mkt x m y * pf x (Suc m) y) n)", "show  \"\\<forall>x \\<in> support_set pf. AE w in N.\n        (real_cond_exp N (F n) (discounted_value r (\\<lambda>m y. prices Mkt x m y * pf x m y) (Suc n))) w =\n        discounted_value r (\\<lambda>m y. prices Mkt x m y * pf x (Suc m) y) n w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>support_set pf.\n       AEeq N\n        (real_cond_exp N (F n)\n          (discounted_value r (\\<lambda>m y. prices Mkt x m y * pf x m y)\n            (Suc n)))\n        (discounted_value r\n          (\\<lambda>m y. prices Mkt x m y * pf x (Suc m) y) n)", "using sup_disc"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>support_set pf.\n     AEeq N\n      (real_cond_exp N (F n)\n        (discounted_value r (\\<lambda>m y. prices Mkt x m y * pf x m y)\n          (Suc n)))\n      (discounted_value r (\\<lambda>m y. prices Mkt x m y * pf x (Suc m) y)\n        n)\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>support_set pf.\n       AEeq N\n        (real_cond_exp N (F n)\n          (discounted_value r (\\<lambda>m y. prices Mkt x m y * pf x m y)\n            (Suc n)))\n        (discounted_value r\n          (\\<lambda>m y. prices Mkt x m y * pf x (Suc m) y) n)", "by simp"], ["proof (state)\nthis:\n  \\<forall>x\\<in>support_set pf.\n     AEeq N\n      (real_cond_exp N (F n)\n        (discounted_value r (\\<lambda>m y. prices Mkt x m y * pf x m y)\n          (Suc n)))\n      (discounted_value r (\\<lambda>m y. prices Mkt x m y * pf x (Suc m) y)\n        n)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  AEeq N\n   (\\<lambda>w.\n       \\<Sum>x\\<in>support_set pf.\n         real_cond_exp N (F n)\n          (discounted_value r (\\<lambda>m y. prices Mkt x m y * pf x m y)\n            (Suc n))\n          w)\n   (\\<lambda>w.\n       \\<Sum>x\\<in>support_set pf.\n         discounted_value r\n          (\\<lambda>m y. prices Mkt x m y * pf x (Suc m) y) n w)\n\ngoal (1 subgoal):\n 1. AEeq N\n     (real_cond_exp N (F n)\n       (discounted_value r (cls_val_process Mkt pf) (Suc n)))\n     (discounted_value r (cls_val_process Mkt pf) n)", "also"], ["proof (state)\nthis:\n  AEeq N\n   (\\<lambda>w.\n       \\<Sum>x\\<in>support_set pf.\n         real_cond_exp N (F n)\n          (discounted_value r (\\<lambda>m y. prices Mkt x m y * pf x m y)\n            (Suc n))\n          w)\n   (\\<lambda>w.\n       \\<Sum>x\\<in>support_set pf.\n         discounted_value r\n          (\\<lambda>m y. prices Mkt x m y * pf x (Suc m) y) n w)\n\ngoal (1 subgoal):\n 1. AEeq N\n     (real_cond_exp N (F n)\n       (discounted_value r (cls_val_process Mkt pf) (Suc n)))\n     (discounted_value r (cls_val_process Mkt pf) n)", "have \"AE w in N.\n        (\\<Sum>x\\<in> support_set pf. discounted_value r (\\<lambda>m y. prices Mkt x m y * pf x (Suc m) y) n w) =\n        discounted_value r (cls_val_process Mkt pf) n w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. AEeq N\n     (\\<lambda>w.\n         \\<Sum>x\\<in>support_set pf.\n           discounted_value r\n            (\\<lambda>m y. prices Mkt x m y * pf x (Suc m) y) n w)\n     (discounted_value r (cls_val_process Mkt pf) n)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>w.\n       w \\<in> space N \\<Longrightarrow>\n       (\\<Sum>x\\<in>support_set pf.\n          discounted_value r\n           (\\<lambda>m y. prices Mkt x m y * pf x (Suc m) y) n w) =\n       discounted_value r (cls_val_process Mkt pf) n w", "fix w"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>w.\n       w \\<in> space N \\<Longrightarrow>\n       (\\<Sum>x\\<in>support_set pf.\n          discounted_value r\n           (\\<lambda>m y. prices Mkt x m y * pf x (Suc m) y) n w) =\n       discounted_value r (cls_val_process Mkt pf) n w", "assume \"w\\<in> space N\""], ["proof (state)\nthis:\n  w \\<in> space N\n\ngoal (1 subgoal):\n 1. \\<And>w.\n       w \\<in> space N \\<Longrightarrow>\n       (\\<Sum>x\\<in>support_set pf.\n          discounted_value r\n           (\\<lambda>m y. prices Mkt x m y * pf x (Suc m) y) n w) =\n       discounted_value r (cls_val_process Mkt pf) n w", "have \"(\\<Sum>x\\<in> support_set pf. discounted_value r (\\<lambda>m y. prices Mkt x m y * pf x (Suc m) y) n w) =\n          discounted_value r (\\<lambda>m y. (\\<Sum>x\\<in> support_set pf. prices Mkt x m y * pf x (Suc m) y)) n w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>support_set pf.\n       discounted_value r (\\<lambda>m y. prices Mkt x m y * pf x (Suc m) y)\n        n w) =\n    discounted_value r\n     (\\<lambda>m y.\n         \\<Sum>x\\<in>support_set pf. prices Mkt x m y * pf x (Suc m) y)\n     n w", "using discounted_sum\n          assms(3) portfolio_def trading_strategy_def"], ["proof (prove)\nusing this:\n  finite ?I \\<Longrightarrow>\n  \\<forall>n w.\n     (\\<Sum>i\\<in>?I. discounted_value ?r (?f i) n w) =\n     discounted_value ?r (\\<lambda>m x. \\<Sum>i\\<in>?I. ?f i m x) n w\n  trading_strategy pf\n  portfolio ?p = finite (support_set ?p)\n  trading_strategy ?p =\n  (portfolio ?p \\<and>\n   (\\<forall>asset\\<in>support_set ?p.\n       borel_predict_stoch_proc F (?p asset)))\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>support_set pf.\n       discounted_value r (\\<lambda>m y. prices Mkt x m y * pf x (Suc m) y)\n        n w) =\n    discounted_value r\n     (\\<lambda>m y.\n         \\<Sum>x\\<in>support_set pf. prices Mkt x m y * pf x (Suc m) y)\n     n w", "by (simp add: discounted_value_def sum_distrib_left)"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>support_set pf.\n     discounted_value r (\\<lambda>m y. prices Mkt x m y * pf x (Suc m) y) n\n      w) =\n  discounted_value r\n   (\\<lambda>m y.\n       \\<Sum>x\\<in>support_set pf. prices Mkt x m y * pf x (Suc m) y)\n   n w\n\ngoal (1 subgoal):\n 1. \\<And>w.\n       w \\<in> space N \\<Longrightarrow>\n       (\\<Sum>x\\<in>support_set pf.\n          discounted_value r\n           (\\<lambda>m y. prices Mkt x m y * pf x (Suc m) y) n w) =\n       discounted_value r (cls_val_process Mkt pf) n w", "also"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>support_set pf.\n     discounted_value r (\\<lambda>m y. prices Mkt x m y * pf x (Suc m) y) n\n      w) =\n  discounted_value r\n   (\\<lambda>m y.\n       \\<Sum>x\\<in>support_set pf. prices Mkt x m y * pf x (Suc m) y)\n   n w\n\ngoal (1 subgoal):\n 1. \\<And>w.\n       w \\<in> space N \\<Longrightarrow>\n       (\\<Sum>x\\<in>support_set pf.\n          discounted_value r\n           (\\<lambda>m y. prices Mkt x m y * pf x (Suc m) y) n w) =\n       discounted_value r (cls_val_process Mkt pf) n w", "have \"... = discounted_value r (val_process Mkt pf) n w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. discounted_value r\n     (\\<lambda>m y.\n         \\<Sum>x\\<in>support_set pf. prices Mkt x m y * pf x (Suc m) y)\n     n w =\n    discounted_value r (val_process Mkt pf) n w", "unfolding val_process_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. discounted_value r\n     (\\<lambda>m y.\n         \\<Sum>x\\<in>support_set pf. prices Mkt x m y * pf x (Suc m) y)\n     n w =\n    discounted_value r\n     (if \\<not> portfolio pf then \\<lambda>n w. 0\n      else (\\<lambda>n w.\n               \\<Sum>x\\<in>support_set pf.\n                 prices Mkt x n w * pf x (Suc n) w))\n     n w", "by (simp add: portfolio_def)"], ["proof (state)\nthis:\n  discounted_value r\n   (\\<lambda>m y.\n       \\<Sum>x\\<in>support_set pf. prices Mkt x m y * pf x (Suc m) y)\n   n w =\n  discounted_value r (val_process Mkt pf) n w\n\ngoal (1 subgoal):\n 1. \\<And>w.\n       w \\<in> space N \\<Longrightarrow>\n       (\\<Sum>x\\<in>support_set pf.\n          discounted_value r\n           (\\<lambda>m y. prices Mkt x m y * pf x (Suc m) y) n w) =\n       discounted_value r (cls_val_process Mkt pf) n w", "also"], ["proof (state)\nthis:\n  discounted_value r\n   (\\<lambda>m y.\n       \\<Sum>x\\<in>support_set pf. prices Mkt x m y * pf x (Suc m) y)\n   n w =\n  discounted_value r (val_process Mkt pf) n w\n\ngoal (1 subgoal):\n 1. \\<And>w.\n       w \\<in> space N \\<Longrightarrow>\n       (\\<Sum>x\\<in>support_set pf.\n          discounted_value r\n           (\\<lambda>m y. prices Mkt x m y * pf x (Suc m) y) n w) =\n       discounted_value r (cls_val_process Mkt pf) n w", "have \"... = discounted_value r (cls_val_process Mkt pf) n w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. discounted_value r (val_process Mkt pf) n w =\n    discounted_value r (cls_val_process Mkt pf) n w", "using assms"], ["proof (prove)\nusing this:\n  risk_neutral_prob N\n  filt_equiv F M N\n  trading_strategy pf\n  self_financing Mkt pf\n  stock_portfolio Mkt pf\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        integrable N (\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w)\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        integrable N\n         (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w)\n\ngoal (1 subgoal):\n 1. discounted_value r (val_process Mkt pf) n w =\n    discounted_value r (cls_val_process Mkt pf) n w", "by (simp add:self_financingE discounted_cong)"], ["proof (state)\nthis:\n  discounted_value r (val_process Mkt pf) n w =\n  discounted_value r (cls_val_process Mkt pf) n w\n\ngoal (1 subgoal):\n 1. \\<And>w.\n       w \\<in> space N \\<Longrightarrow>\n       (\\<Sum>x\\<in>support_set pf.\n          discounted_value r\n           (\\<lambda>m y. prices Mkt x m y * pf x (Suc m) y) n w) =\n       discounted_value r (cls_val_process Mkt pf) n w", "finally"], ["proof (chain)\npicking this:\n  (\\<Sum>x\\<in>support_set pf.\n     discounted_value r (\\<lambda>m y. prices Mkt x m y * pf x (Suc m) y) n\n      w) =\n  discounted_value r (cls_val_process Mkt pf) n w", "show \"(\\<Sum>x\\<in> support_set pf. discounted_value r (\\<lambda>m y. prices Mkt x m y * pf x (Suc m) y) n w) =\n          discounted_value r (cls_val_process Mkt pf) n w\""], ["proof (prove)\nusing this:\n  (\\<Sum>x\\<in>support_set pf.\n     discounted_value r (\\<lambda>m y. prices Mkt x m y * pf x (Suc m) y) n\n      w) =\n  discounted_value r (cls_val_process Mkt pf) n w\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>support_set pf.\n       discounted_value r (\\<lambda>m y. prices Mkt x m y * pf x (Suc m) y)\n        n w) =\n    discounted_value r (cls_val_process Mkt pf) n w", "."], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>support_set pf.\n     discounted_value r (\\<lambda>m y. prices Mkt x m y * pf x (Suc m) y) n\n      w) =\n  discounted_value r (cls_val_process Mkt pf) n w\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  AEeq N\n   (\\<lambda>w.\n       \\<Sum>x\\<in>support_set pf.\n         discounted_value r\n          (\\<lambda>m y. prices Mkt x m y * pf x (Suc m) y) n w)\n   (discounted_value r (cls_val_process Mkt pf) n)\n\ngoal (1 subgoal):\n 1. AEeq N\n     (real_cond_exp N (F n)\n       (discounted_value r (cls_val_process Mkt pf) (Suc n)))\n     (discounted_value r (cls_val_process Mkt pf) n)", "finally"], ["proof (chain)\npicking this:\n  AEeq N\n   (real_cond_exp N (F n)\n     (discounted_value r (cls_val_process Mkt pf) (Suc n)))\n   (discounted_value r (cls_val_process Mkt pf) n)", "show \"AE w in N. real_cond_exp N (F n) (discounted_value r (cls_val_process Mkt pf) (Suc n)) w =\n        discounted_value r (cls_val_process Mkt pf) n w\""], ["proof (prove)\nusing this:\n  AEeq N\n   (real_cond_exp N (F n)\n     (discounted_value r (cls_val_process Mkt pf) (Suc n)))\n   (discounted_value r (cls_val_process Mkt pf) n)\n\ngoal (1 subgoal):\n 1. AEeq N\n     (real_cond_exp N (F n)\n       (discounted_value r (cls_val_process Mkt pf) (Suc n)))\n     (discounted_value r (cls_val_process Mkt pf) n)", "."], ["proof (state)\nthis:\n  AEeq N\n   (real_cond_exp N (F n)\n     (discounted_value r (cls_val_process Mkt pf) (Suc n)))\n   (discounted_value r (cls_val_process Mkt pf) n)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  AEeq N\n   (real_cond_exp N (F n)\n     (discounted_value r (cls_val_process Mkt pf) (Suc n)))\n   (discounted_value r (cls_val_process Mkt pf) n)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>n.\n     AEeq N\n      (real_cond_exp N (F n)\n        (discounted_value r (cls_val_process Mkt pf) (Suc n)))\n      (discounted_value r (cls_val_process Mkt pf) n)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in disc_filtr_prob_space) finite_integrable_vp:\n  assumes \"\\<forall>n. \\<forall> asset \\<in> support_set pf. finite (prices Mkt asset n `(space M))\"\n  and \"\\<forall>n. \\<forall> asset \\<in> support_set pf. finite (pf asset n `(space M))\"\nand \"prob_space N\"\n  and \"filt_equiv F M N\"\nand \"trading_strategy pf\"\nand \"\\<forall>n. \\<forall> asset \\<in> support_set pf. prices Mkt asset n \\<in> borel_measurable M\"\nshows  \"\\<forall>n. \\<forall>asset\\<in>support_set pf. integrable N (\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n.\n       \\<forall>asset\\<in>support_set pf.\n          integrable N\n           (\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w)", "proof (intro allI ballI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n asset.\n       asset \\<in> support_set pf \\<Longrightarrow>\n       integrable N (\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w)", "fix n"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n asset.\n       asset \\<in> support_set pf \\<Longrightarrow>\n       integrable N (\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w)", "fix asset"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n asset.\n       asset \\<in> support_set pf \\<Longrightarrow>\n       integrable N (\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w)", "assume \"asset\\<in>support_set pf\""], ["proof (state)\nthis:\n  asset \\<in> support_set pf\n\ngoal (1 subgoal):\n 1. \\<And>n asset.\n       asset \\<in> support_set pf \\<Longrightarrow>\n       integrable N (\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w)", "show \"integrable N (\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. integrable N (\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w)", "proof (rule prob_space.finite_borel_measurable_integrable)"], ["proof (state)\ngoal (3 subgoals):\n 1. prob_space N\n 2. (\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w)\n    \\<in> borel_measurable N\n 3. finite\n     ((\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w) ` space N)", "show \"prob_space N\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prob_space N", "using assms"], ["proof (prove)\nusing this:\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        finite (prices Mkt asset n ` space M)\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf. finite (pf asset n ` space M)\n  prob_space N\n  filt_equiv F M N\n  trading_strategy pf\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        random_variable borel (prices Mkt asset n)\n\ngoal (1 subgoal):\n 1. prob_space N", "by simp"], ["proof (state)\nthis:\n  prob_space N\n\ngoal (2 subgoals):\n 1. (\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w)\n    \\<in> borel_measurable N\n 2. finite\n     ((\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w) ` space N)", "have \"finite ((\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w) ` space M)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite\n     ((\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w) ` space M)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. finite\n     ((\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w) ` space M)", "have \"\\<forall>y\\<in> prices Mkt asset n `(space M). finite ((\\<lambda> z. (\\<lambda>w. z * pf asset (Suc n) w) ` space M) y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>y\\<in>prices Mkt asset n ` space M.\n       finite ((\\<lambda>w. y * pf asset (Suc n) w) ` space M)", "by (metis \\<open>asset \\<in> support_set pf\\<close> assms(2) finite_imageI image_image)"], ["proof (state)\nthis:\n  \\<forall>y\\<in>prices Mkt asset n ` space M.\n     finite ((\\<lambda>w. y * pf asset (Suc n) w) ` space M)\n\ngoal (1 subgoal):\n 1. finite\n     ((\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w) ` space M)", "hence \"finite (\\<Union> y\\<in> prices Mkt asset n `(space M). ((\\<lambda> z. (\\<lambda>w. z * pf asset (Suc n) w) ` space M) y))\""], ["proof (prove)\nusing this:\n  \\<forall>y\\<in>prices Mkt asset n ` space M.\n     finite ((\\<lambda>w. y * pf asset (Suc n) w) ` space M)\n\ngoal (1 subgoal):\n 1. finite\n     (\\<Union>y\\<in>prices Mkt asset n ` space M.\n         (\\<lambda>w. y * pf asset (Suc n) w) ` space M)", "using \\<open>asset \\<in> support_set pf\\<close> assms"], ["proof (prove)\nusing this:\n  \\<forall>y\\<in>prices Mkt asset n ` space M.\n     finite ((\\<lambda>w. y * pf asset (Suc n) w) ` space M)\n  asset \\<in> support_set pf\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        finite (prices Mkt asset n ` space M)\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf. finite (pf asset n ` space M)\n  prob_space N\n  filt_equiv F M N\n  trading_strategy pf\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        random_variable borel (prices Mkt asset n)\n\ngoal (1 subgoal):\n 1. finite\n     (\\<Union>y\\<in>prices Mkt asset n ` space M.\n         (\\<lambda>w. y * pf asset (Suc n) w) ` space M)", "by blast"], ["proof (state)\nthis:\n  finite\n   (\\<Union>y\\<in>prices Mkt asset n ` space M.\n       (\\<lambda>w. y * pf asset (Suc n) w) ` space M)\n\ngoal (1 subgoal):\n 1. finite\n     ((\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w) ` space M)", "moreover"], ["proof (state)\nthis:\n  finite\n   (\\<Union>y\\<in>prices Mkt asset n ` space M.\n       (\\<lambda>w. y * pf asset (Suc n) w) ` space M)\n\ngoal (1 subgoal):\n 1. finite\n     ((\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w) ` space M)", "have \"(\\<Union> y\\<in> prices Mkt asset n `(space M). ((\\<lambda> z. (\\<lambda>w. z * pf asset (Suc n) w) ` space M) y)) =\n        (\\<Union> y\\<in> prices Mkt asset n `(space M). (\\<lambda>w. y * pf asset (Suc n) w) ` space M)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Union>y\\<in>prices Mkt asset n ` space M.\n        (\\<lambda>w. y * pf asset (Suc n) w) ` space M) =\n    (\\<Union>y\\<in>prices Mkt asset n ` space M.\n        (\\<lambda>w. y * pf asset (Suc n) w) ` space M)", "by simp"], ["proof (state)\nthis:\n  (\\<Union>y\\<in>prices Mkt asset n ` space M.\n      (\\<lambda>w. y * pf asset (Suc n) w) ` space M) =\n  (\\<Union>y\\<in>prices Mkt asset n ` space M.\n      (\\<lambda>w. y * pf asset (Suc n) w) ` space M)\n\ngoal (1 subgoal):\n 1. finite\n     ((\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w) ` space M)", "moreover"], ["proof (state)\nthis:\n  (\\<Union>y\\<in>prices Mkt asset n ` space M.\n      (\\<lambda>w. y * pf asset (Suc n) w) ` space M) =\n  (\\<Union>y\\<in>prices Mkt asset n ` space M.\n      (\\<lambda>w. y * pf asset (Suc n) w) ` space M)\n\ngoal (1 subgoal):\n 1. finite\n     ((\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w) ` space M)", "have \"((\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w) ` space M) \\<subseteq>\n        (\\<Union> y\\<in> prices Mkt asset n `(space M). (\\<lambda>w. y * pf asset (Suc n) w) ` space M)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w) ` space M\n    \\<subseteq> (\\<Union>y\\<in>prices Mkt asset n ` space M.\n                    (\\<lambda>w. y * pf asset (Suc n) w) ` space M)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> (\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w) `\n               space M \\<Longrightarrow>\n       x \\<in> (\\<Union>y\\<in>prices Mkt asset n ` space M.\n                   (\\<lambda>w. y * pf asset (Suc n) w) ` space M)", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> (\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w) `\n               space M \\<Longrightarrow>\n       x \\<in> (\\<Union>y\\<in>prices Mkt asset n ` space M.\n                   (\\<lambda>w. y * pf asset (Suc n) w) ` space M)", "assume \"x \\<in> (\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w) ` space M\""], ["proof (state)\nthis:\n  x \\<in> (\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w) ` space M\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> (\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w) `\n               space M \\<Longrightarrow>\n       x \\<in> (\\<Union>y\\<in>prices Mkt asset n ` space M.\n                   (\\<lambda>w. y * pf asset (Suc n) w) ` space M)", "show \"x \\<in> (\\<Union>y\\<in>prices Mkt asset n ` space M. (\\<lambda>w. y * pf asset (Suc n) w) ` space M)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> (\\<Union>y\\<in>prices Mkt asset n ` space M.\n                (\\<lambda>w. y * pf asset (Suc n) w) ` space M)", "using \\<open>x \\<in> (\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w) ` space M\\<close>"], ["proof (prove)\nusing this:\n  x \\<in> (\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w) ` space M\n\ngoal (1 subgoal):\n 1. x \\<in> (\\<Union>y\\<in>prices Mkt asset n ` space M.\n                (\\<lambda>w. y * pf asset (Suc n) w) ` space M)", "by auto"], ["proof (state)\nthis:\n  x \\<in> (\\<Union>y\\<in>prices Mkt asset n ` space M.\n              (\\<lambda>w. y * pf asset (Suc n) w) ` space M)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w) ` space M\n  \\<subseteq> (\\<Union>y\\<in>prices Mkt asset n ` space M.\n                  (\\<lambda>w. y * pf asset (Suc n) w) ` space M)\n\ngoal (1 subgoal):\n 1. finite\n     ((\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w) ` space M)", "ultimately"], ["proof (chain)\npicking this:\n  finite\n   (\\<Union>y\\<in>prices Mkt asset n ` space M.\n       (\\<lambda>w. y * pf asset (Suc n) w) ` space M)\n  (\\<Union>y\\<in>prices Mkt asset n ` space M.\n      (\\<lambda>w. y * pf asset (Suc n) w) ` space M) =\n  (\\<Union>y\\<in>prices Mkt asset n ` space M.\n      (\\<lambda>w. y * pf asset (Suc n) w) ` space M)\n  (\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w) ` space M\n  \\<subseteq> (\\<Union>y\\<in>prices Mkt asset n ` space M.\n                  (\\<lambda>w. y * pf asset (Suc n) w) ` space M)", "show ?thesis"], ["proof (prove)\nusing this:\n  finite\n   (\\<Union>y\\<in>prices Mkt asset n ` space M.\n       (\\<lambda>w. y * pf asset (Suc n) w) ` space M)\n  (\\<Union>y\\<in>prices Mkt asset n ` space M.\n      (\\<lambda>w. y * pf asset (Suc n) w) ` space M) =\n  (\\<Union>y\\<in>prices Mkt asset n ` space M.\n      (\\<lambda>w. y * pf asset (Suc n) w) ` space M)\n  (\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w) ` space M\n  \\<subseteq> (\\<Union>y\\<in>prices Mkt asset n ` space M.\n                  (\\<lambda>w. y * pf asset (Suc n) w) ` space M)\n\ngoal (1 subgoal):\n 1. finite\n     ((\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w) ` space M)", "by (simp add:finite_subset)"], ["proof (state)\nthis:\n  finite ((\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w) ` space M)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  finite ((\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w) ` space M)\n\ngoal (2 subgoals):\n 1. (\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w)\n    \\<in> borel_measurable N\n 2. finite\n     ((\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w) ` space N)", "thus \"finite ((\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w) ` space N)\""], ["proof (prove)\nusing this:\n  finite ((\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w) ` space M)\n\ngoal (1 subgoal):\n 1. finite\n     ((\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w) ` space N)", "using assms"], ["proof (prove)\nusing this:\n  finite ((\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w) ` space M)\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        finite (prices Mkt asset n ` space M)\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf. finite (pf asset n ` space M)\n  prob_space N\n  filt_equiv F M N\n  trading_strategy pf\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        random_variable borel (prices Mkt asset n)\n\ngoal (1 subgoal):\n 1. finite\n     ((\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w) ` space N)", "by (simp add:filt_equiv_space)"], ["proof (state)\nthis:\n  finite ((\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w) ` space N)\n\ngoal (1 subgoal):\n 1. (\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w)\n    \\<in> borel_measurable N", "have \"(\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w) \\<in> borel_measurable M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. random_variable borel\n     (\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. random_variable borel\n     (\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w)", "have \"prices Mkt asset n \\<in> borel_measurable M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. random_variable borel (prices Mkt asset n)", "using assms \\<open>asset \\<in> support_set pf\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        finite (prices Mkt asset n ` space M)\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf. finite (pf asset n ` space M)\n  prob_space N\n  filt_equiv F M N\n  trading_strategy pf\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        random_variable borel (prices Mkt asset n)\n  asset \\<in> support_set pf\n\ngoal (1 subgoal):\n 1. random_variable borel (prices Mkt asset n)", "by simp"], ["proof (state)\nthis:\n  random_variable borel (prices Mkt asset n)\n\ngoal (1 subgoal):\n 1. random_variable borel\n     (\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w)", "moreover"], ["proof (state)\nthis:\n  random_variable borel (prices Mkt asset n)\n\ngoal (1 subgoal):\n 1. random_variable borel\n     (\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w)", "have \"pf asset (Suc n) \\<in> borel_measurable M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. random_variable borel (pf asset (Suc n))", "using assms"], ["proof (prove)\nusing this:\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        finite (prices Mkt asset n ` space M)\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf. finite (pf asset n ` space M)\n  prob_space N\n  filt_equiv F M N\n  trading_strategy pf\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        random_variable borel (prices Mkt asset n)\n\ngoal (1 subgoal):\n 1. random_variable borel (pf asset (Suc n))", "unfolding trading_strategy_def"], ["proof (prove)\nusing this:\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        finite (prices Mkt asset n ` space M)\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf. finite (pf asset n ` space M)\n  prob_space N\n  filt_equiv F M N\n  portfolio pf \\<and>\n  (\\<forall>asset\\<in>support_set pf. borel_predict_stoch_proc F (pf asset))\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        random_variable borel (prices Mkt asset n)\n\ngoal (1 subgoal):\n 1. random_variable borel (pf asset (Suc n))", "using \\<open>asset \\<in> support_set pf\\<close> borel_predict_stoch_proc_borel_measurable"], ["proof (prove)\nusing this:\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        finite (prices Mkt asset n ` space M)\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf. finite (pf asset n ` space M)\n  prob_space N\n  filt_equiv F M N\n  portfolio pf \\<and>\n  (\\<forall>asset\\<in>support_set pf. borel_predict_stoch_proc F (pf asset))\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        random_variable borel (prices Mkt asset n)\n  asset \\<in> support_set pf\n  borel_predict_stoch_proc F ?X \\<Longrightarrow>\n  \\<forall>n. random_variable borel (?X n)\n\ngoal (1 subgoal):\n 1. random_variable borel (pf asset (Suc n))", "by blast"], ["proof (state)\nthis:\n  random_variable borel (pf asset (Suc n))\n\ngoal (1 subgoal):\n 1. random_variable borel\n     (\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w)", "ultimately"], ["proof (chain)\npicking this:\n  random_variable borel (prices Mkt asset n)\n  random_variable borel (pf asset (Suc n))", "show ?thesis"], ["proof (prove)\nusing this:\n  random_variable borel (prices Mkt asset n)\n  random_variable borel (pf asset (Suc n))\n\ngoal (1 subgoal):\n 1. random_variable borel\n     (\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w)", "by simp"], ["proof (state)\nthis:\n  random_variable borel\n   (\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  random_variable borel\n   (\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w)\n\ngoal (1 subgoal):\n 1. (\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w)\n    \\<in> borel_measurable N", "thus \"(\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w) \\<in> borel_measurable N\""], ["proof (prove)\nusing this:\n  random_variable borel\n   (\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w)\n\ngoal (1 subgoal):\n 1. (\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w)\n    \\<in> borel_measurable N", "using assms"], ["proof (prove)\nusing this:\n  random_variable borel\n   (\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w)\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        finite (prices Mkt asset n ` space M)\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf. finite (pf asset n ` space M)\n  prob_space N\n  filt_equiv F M N\n  trading_strategy pf\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        random_variable borel (prices Mkt asset n)\n\ngoal (1 subgoal):\n 1. (\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w)\n    \\<in> borel_measurable N", "by (simp add:filt_equiv_measurable)"], ["proof (state)\nthis:\n  (\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w)\n  \\<in> borel_measurable N\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  integrable N (\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in disc_filtr_prob_space) finite_integrable_uvp:\n  assumes \"\\<forall>n. \\<forall> asset \\<in> support_set pf. finite (prices Mkt asset n `(space M))\"\n  and \"\\<forall>n. \\<forall> asset \\<in> support_set pf. finite (pf asset n `(space M))\"\nand \"prob_space N\"\n  and \"filt_equiv F M N\"\nand \"trading_strategy pf\"\nand \"\\<forall>n. \\<forall> asset \\<in> support_set pf. prices Mkt asset n \\<in> borel_measurable M\"\nshows  \"\\<forall>n. \\<forall>asset\\<in>support_set pf. integrable N (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n.\n       \\<forall>asset\\<in>support_set pf.\n          integrable N\n           (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w)", "proof (intro allI ballI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n asset.\n       asset \\<in> support_set pf \\<Longrightarrow>\n       integrable N\n        (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w)", "fix n"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n asset.\n       asset \\<in> support_set pf \\<Longrightarrow>\n       integrable N\n        (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w)", "fix asset"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n asset.\n       asset \\<in> support_set pf \\<Longrightarrow>\n       integrable N\n        (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w)", "assume \"asset\\<in>support_set pf\""], ["proof (state)\nthis:\n  asset \\<in> support_set pf\n\ngoal (1 subgoal):\n 1. \\<And>n asset.\n       asset \\<in> support_set pf \\<Longrightarrow>\n       integrable N\n        (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w)", "show \"integrable N (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. integrable N\n     (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w)", "proof (rule prob_space.finite_borel_measurable_integrable)"], ["proof (state)\ngoal (3 subgoals):\n 1. prob_space N\n 2. (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w)\n    \\<in> borel_measurable N\n 3. finite\n     ((\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w) `\n      space N)", "show \"prob_space N\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prob_space N", "using assms"], ["proof (prove)\nusing this:\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        finite (prices Mkt asset n ` space M)\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf. finite (pf asset n ` space M)\n  prob_space N\n  filt_equiv F M N\n  trading_strategy pf\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        random_variable borel (prices Mkt asset n)\n\ngoal (1 subgoal):\n 1. prob_space N", "by simp"], ["proof (state)\nthis:\n  prob_space N\n\ngoal (2 subgoals):\n 1. (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w)\n    \\<in> borel_measurable N\n 2. finite\n     ((\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w) `\n      space N)", "have \"finite ((\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w) ` space M)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite\n     ((\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w) `\n      space M)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. finite\n     ((\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w) `\n      space M)", "have \"\\<forall>y\\<in> prices Mkt asset (Suc n) `(space M). finite ((\\<lambda> z. (\\<lambda>w. z * pf asset (Suc n) w) ` space M) y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>y\\<in>prices Mkt asset (Suc n) ` space M.\n       finite ((\\<lambda>w. y * pf asset (Suc n) w) ` space M)", "by (metis \\<open>asset \\<in> support_set pf\\<close> assms(2) finite_imageI image_image)"], ["proof (state)\nthis:\n  \\<forall>y\\<in>prices Mkt asset (Suc n) ` space M.\n     finite ((\\<lambda>w. y * pf asset (Suc n) w) ` space M)\n\ngoal (1 subgoal):\n 1. finite\n     ((\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w) `\n      space M)", "hence \"finite (\\<Union> y\\<in> prices Mkt asset (Suc n) `(space M). ((\\<lambda> z. (\\<lambda>w. z * pf asset (Suc n) w) ` space M) y))\""], ["proof (prove)\nusing this:\n  \\<forall>y\\<in>prices Mkt asset (Suc n) ` space M.\n     finite ((\\<lambda>w. y * pf asset (Suc n) w) ` space M)\n\ngoal (1 subgoal):\n 1. finite\n     (\\<Union>y\\<in>prices Mkt asset (Suc n) ` space M.\n         (\\<lambda>w. y * pf asset (Suc n) w) ` space M)", "using \\<open>asset \\<in> support_set pf\\<close> assms"], ["proof (prove)\nusing this:\n  \\<forall>y\\<in>prices Mkt asset (Suc n) ` space M.\n     finite ((\\<lambda>w. y * pf asset (Suc n) w) ` space M)\n  asset \\<in> support_set pf\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        finite (prices Mkt asset n ` space M)\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf. finite (pf asset n ` space M)\n  prob_space N\n  filt_equiv F M N\n  trading_strategy pf\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        random_variable borel (prices Mkt asset n)\n\ngoal (1 subgoal):\n 1. finite\n     (\\<Union>y\\<in>prices Mkt asset (Suc n) ` space M.\n         (\\<lambda>w. y * pf asset (Suc n) w) ` space M)", "by blast"], ["proof (state)\nthis:\n  finite\n   (\\<Union>y\\<in>prices Mkt asset (Suc n) ` space M.\n       (\\<lambda>w. y * pf asset (Suc n) w) ` space M)\n\ngoal (1 subgoal):\n 1. finite\n     ((\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w) `\n      space M)", "moreover"], ["proof (state)\nthis:\n  finite\n   (\\<Union>y\\<in>prices Mkt asset (Suc n) ` space M.\n       (\\<lambda>w. y * pf asset (Suc n) w) ` space M)\n\ngoal (1 subgoal):\n 1. finite\n     ((\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w) `\n      space M)", "have \"(\\<Union> y\\<in> prices Mkt asset (Suc n) `(space M). ((\\<lambda> z. (\\<lambda>w. z * pf asset (Suc n) w) ` space M) y)) =\n        (\\<Union> y\\<in> prices Mkt asset (Suc n) `(space M). (\\<lambda>w. y * pf asset (Suc n) w) ` space M)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Union>y\\<in>prices Mkt asset (Suc n) ` space M.\n        (\\<lambda>w. y * pf asset (Suc n) w) ` space M) =\n    (\\<Union>y\\<in>prices Mkt asset (Suc n) ` space M.\n        (\\<lambda>w. y * pf asset (Suc n) w) ` space M)", "by simp"], ["proof (state)\nthis:\n  (\\<Union>y\\<in>prices Mkt asset (Suc n) ` space M.\n      (\\<lambda>w. y * pf asset (Suc n) w) ` space M) =\n  (\\<Union>y\\<in>prices Mkt asset (Suc n) ` space M.\n      (\\<lambda>w. y * pf asset (Suc n) w) ` space M)\n\ngoal (1 subgoal):\n 1. finite\n     ((\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w) `\n      space M)", "moreover"], ["proof (state)\nthis:\n  (\\<Union>y\\<in>prices Mkt asset (Suc n) ` space M.\n      (\\<lambda>w. y * pf asset (Suc n) w) ` space M) =\n  (\\<Union>y\\<in>prices Mkt asset (Suc n) ` space M.\n      (\\<lambda>w. y * pf asset (Suc n) w) ` space M)\n\ngoal (1 subgoal):\n 1. finite\n     ((\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w) `\n      space M)", "have \"((\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w) ` space M) \\<subseteq>\n        (\\<Union> y\\<in> prices Mkt asset (Suc n) `(space M). (\\<lambda>w. y * pf asset (Suc n) w) ` space M)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w) ` space M\n    \\<subseteq> (\\<Union>y\\<in>prices Mkt asset (Suc n) ` space M.\n                    (\\<lambda>w. y * pf asset (Suc n) w) ` space M)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> (\\<lambda>w.\n                   prices Mkt asset (Suc n) w * pf asset (Suc n) w) `\n               space M \\<Longrightarrow>\n       x \\<in> (\\<Union>y\\<in>prices Mkt asset (Suc n) ` space M.\n                   (\\<lambda>w. y * pf asset (Suc n) w) ` space M)", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> (\\<lambda>w.\n                   prices Mkt asset (Suc n) w * pf asset (Suc n) w) `\n               space M \\<Longrightarrow>\n       x \\<in> (\\<Union>y\\<in>prices Mkt asset (Suc n) ` space M.\n                   (\\<lambda>w. y * pf asset (Suc n) w) ` space M)", "assume \"x \\<in> (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w) ` space M\""], ["proof (state)\nthis:\n  x \\<in> (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w) `\n          space M\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> (\\<lambda>w.\n                   prices Mkt asset (Suc n) w * pf asset (Suc n) w) `\n               space M \\<Longrightarrow>\n       x \\<in> (\\<Union>y\\<in>prices Mkt asset (Suc n) ` space M.\n                   (\\<lambda>w. y * pf asset (Suc n) w) ` space M)", "show \"x \\<in> (\\<Union>y\\<in>prices Mkt asset (Suc n) ` space M. (\\<lambda>w. y * pf asset (Suc n) w) ` space M)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> (\\<Union>y\\<in>prices Mkt asset (Suc n) ` space M.\n                (\\<lambda>w. y * pf asset (Suc n) w) ` space M)", "using \\<open>x \\<in> (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w) ` space M\\<close>"], ["proof (prove)\nusing this:\n  x \\<in> (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w) `\n          space M\n\ngoal (1 subgoal):\n 1. x \\<in> (\\<Union>y\\<in>prices Mkt asset (Suc n) ` space M.\n                (\\<lambda>w. y * pf asset (Suc n) w) ` space M)", "by auto"], ["proof (state)\nthis:\n  x \\<in> (\\<Union>y\\<in>prices Mkt asset (Suc n) ` space M.\n              (\\<lambda>w. y * pf asset (Suc n) w) ` space M)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w) ` space M\n  \\<subseteq> (\\<Union>y\\<in>prices Mkt asset (Suc n) ` space M.\n                  (\\<lambda>w. y * pf asset (Suc n) w) ` space M)\n\ngoal (1 subgoal):\n 1. finite\n     ((\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w) `\n      space M)", "ultimately"], ["proof (chain)\npicking this:\n  finite\n   (\\<Union>y\\<in>prices Mkt asset (Suc n) ` space M.\n       (\\<lambda>w. y * pf asset (Suc n) w) ` space M)\n  (\\<Union>y\\<in>prices Mkt asset (Suc n) ` space M.\n      (\\<lambda>w. y * pf asset (Suc n) w) ` space M) =\n  (\\<Union>y\\<in>prices Mkt asset (Suc n) ` space M.\n      (\\<lambda>w. y * pf asset (Suc n) w) ` space M)\n  (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w) ` space M\n  \\<subseteq> (\\<Union>y\\<in>prices Mkt asset (Suc n) ` space M.\n                  (\\<lambda>w. y * pf asset (Suc n) w) ` space M)", "show ?thesis"], ["proof (prove)\nusing this:\n  finite\n   (\\<Union>y\\<in>prices Mkt asset (Suc n) ` space M.\n       (\\<lambda>w. y * pf asset (Suc n) w) ` space M)\n  (\\<Union>y\\<in>prices Mkt asset (Suc n) ` space M.\n      (\\<lambda>w. y * pf asset (Suc n) w) ` space M) =\n  (\\<Union>y\\<in>prices Mkt asset (Suc n) ` space M.\n      (\\<lambda>w. y * pf asset (Suc n) w) ` space M)\n  (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w) ` space M\n  \\<subseteq> (\\<Union>y\\<in>prices Mkt asset (Suc n) ` space M.\n                  (\\<lambda>w. y * pf asset (Suc n) w) ` space M)\n\ngoal (1 subgoal):\n 1. finite\n     ((\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w) `\n      space M)", "by (simp add:finite_subset)"], ["proof (state)\nthis:\n  finite\n   ((\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w) ` space M)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  finite\n   ((\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w) ` space M)\n\ngoal (2 subgoals):\n 1. (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w)\n    \\<in> borel_measurable N\n 2. finite\n     ((\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w) `\n      space N)", "thus \"finite ((\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w) ` space N)\""], ["proof (prove)\nusing this:\n  finite\n   ((\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w) ` space M)\n\ngoal (1 subgoal):\n 1. finite\n     ((\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w) `\n      space N)", "using assms"], ["proof (prove)\nusing this:\n  finite\n   ((\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w) ` space M)\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        finite (prices Mkt asset n ` space M)\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf. finite (pf asset n ` space M)\n  prob_space N\n  filt_equiv F M N\n  trading_strategy pf\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        random_variable borel (prices Mkt asset n)\n\ngoal (1 subgoal):\n 1. finite\n     ((\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w) `\n      space N)", "by (simp add:filt_equiv_space)"], ["proof (state)\nthis:\n  finite\n   ((\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w) ` space N)\n\ngoal (1 subgoal):\n 1. (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w)\n    \\<in> borel_measurable N", "have \"(\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w) \\<in> borel_measurable M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. random_variable borel\n     (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. random_variable borel\n     (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w)", "have \"prices Mkt asset (Suc n) \\<in> borel_measurable M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. random_variable borel (prices Mkt asset (Suc n))", "using assms"], ["proof (prove)\nusing this:\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        finite (prices Mkt asset n ` space M)\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf. finite (pf asset n ` space M)\n  prob_space N\n  filt_equiv F M N\n  trading_strategy pf\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        random_variable borel (prices Mkt asset n)\n\ngoal (1 subgoal):\n 1. random_variable borel (prices Mkt asset (Suc n))", "using \\<open>asset \\<in> support_set pf\\<close> borel_adapt_stoch_proc_borel_measurable"], ["proof (prove)\nusing this:\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        finite (prices Mkt asset n ` space M)\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf. finite (pf asset n ` space M)\n  prob_space N\n  filt_equiv F M N\n  trading_strategy pf\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        random_variable borel (prices Mkt asset n)\n  asset \\<in> support_set pf\n  borel_adapt_stoch_proc F ?X \\<Longrightarrow>\n  \\<forall>n. random_variable borel (?X n)\n\ngoal (1 subgoal):\n 1. random_variable borel (prices Mkt asset (Suc n))", "by blast"], ["proof (state)\nthis:\n  random_variable borel (prices Mkt asset (Suc n))\n\ngoal (1 subgoal):\n 1. random_variable borel\n     (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w)", "moreover"], ["proof (state)\nthis:\n  random_variable borel (prices Mkt asset (Suc n))\n\ngoal (1 subgoal):\n 1. random_variable borel\n     (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w)", "have \"pf asset (Suc n) \\<in> borel_measurable M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. random_variable borel (pf asset (Suc n))", "using assms"], ["proof (prove)\nusing this:\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        finite (prices Mkt asset n ` space M)\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf. finite (pf asset n ` space M)\n  prob_space N\n  filt_equiv F M N\n  trading_strategy pf\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        random_variable borel (prices Mkt asset n)\n\ngoal (1 subgoal):\n 1. random_variable borel (pf asset (Suc n))", "unfolding trading_strategy_def"], ["proof (prove)\nusing this:\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        finite (prices Mkt asset n ` space M)\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf. finite (pf asset n ` space M)\n  prob_space N\n  filt_equiv F M N\n  portfolio pf \\<and>\n  (\\<forall>asset\\<in>support_set pf. borel_predict_stoch_proc F (pf asset))\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        random_variable borel (prices Mkt asset n)\n\ngoal (1 subgoal):\n 1. random_variable borel (pf asset (Suc n))", "using \\<open>asset \\<in> support_set pf\\<close> borel_predict_stoch_proc_borel_measurable"], ["proof (prove)\nusing this:\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        finite (prices Mkt asset n ` space M)\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf. finite (pf asset n ` space M)\n  prob_space N\n  filt_equiv F M N\n  portfolio pf \\<and>\n  (\\<forall>asset\\<in>support_set pf. borel_predict_stoch_proc F (pf asset))\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        random_variable borel (prices Mkt asset n)\n  asset \\<in> support_set pf\n  borel_predict_stoch_proc F ?X \\<Longrightarrow>\n  \\<forall>n. random_variable borel (?X n)\n\ngoal (1 subgoal):\n 1. random_variable borel (pf asset (Suc n))", "by blast"], ["proof (state)\nthis:\n  random_variable borel (pf asset (Suc n))\n\ngoal (1 subgoal):\n 1. random_variable borel\n     (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w)", "ultimately"], ["proof (chain)\npicking this:\n  random_variable borel (prices Mkt asset (Suc n))\n  random_variable borel (pf asset (Suc n))", "show ?thesis"], ["proof (prove)\nusing this:\n  random_variable borel (prices Mkt asset (Suc n))\n  random_variable borel (pf asset (Suc n))\n\ngoal (1 subgoal):\n 1. random_variable borel\n     (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w)", "by simp"], ["proof (state)\nthis:\n  random_variable borel\n   (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  random_variable borel\n   (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w)\n\ngoal (1 subgoal):\n 1. (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w)\n    \\<in> borel_measurable N", "thus \"(\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w) \\<in> borel_measurable N\""], ["proof (prove)\nusing this:\n  random_variable borel\n   (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w)\n\ngoal (1 subgoal):\n 1. (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w)\n    \\<in> borel_measurable N", "using assms"], ["proof (prove)\nusing this:\n  random_variable borel\n   (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w)\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        finite (prices Mkt asset n ` space M)\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf. finite (pf asset n ` space M)\n  prob_space N\n  filt_equiv F M N\n  trading_strategy pf\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        random_variable borel (prices Mkt asset n)\n\ngoal (1 subgoal):\n 1. (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w)\n    \\<in> borel_measurable N", "by (simp add:filt_equiv_measurable)"], ["proof (state)\nthis:\n  (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w)\n  \\<in> borel_measurable N\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  integrable N (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in rfr_disc_equity_market) self_fin_trad_strat_mart_finite:\n  assumes \"risk_neutral_prob N\"\n  and \"filt_equiv F M N\"\n  and \"trading_strategy pf\"\n  and \"self_financing Mkt pf\"\n  and \"support_set pf \\<subseteq> stocks Mkt\"\n  and \"\\<forall>n. \\<forall> asset \\<in> support_set pf. finite (prices Mkt asset n `(space M))\"\n  and \"\\<forall>n. \\<forall> asset \\<in> support_set pf. finite (pf asset n `(space M))\"\nand \"\\<forall> asset\\<in> stocks Mkt. borel_adapt_stoch_proc F (prices Mkt asset)\"\nshows \"martingale N F (discounted_value r (cls_val_process Mkt pf))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. martingale N F (discounted_value r (cls_val_process Mkt pf))", "proof (rule self_fin_trad_strat_mart, (simp add:assms)+)"], ["proof (state)\ngoal (3 subgoals):\n 1. stock_portfolio Mkt pf\n 2. \\<forall>n.\n       \\<forall>asset\\<in>support_set pf.\n          integrable N\n           (\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w)\n 3. \\<forall>n.\n       \\<forall>asset\\<in>support_set pf.\n          integrable N\n           (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w)", "show \"\\<forall>n. \\<forall>asset\\<in>support_set pf. integrable N (\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n.\n       \\<forall>asset\\<in>support_set pf.\n          integrable N\n           (\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w)", "proof (intro allI ballI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n asset.\n       asset \\<in> support_set pf \\<Longrightarrow>\n       integrable N (\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w)", "fix n"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n asset.\n       asset \\<in> support_set pf \\<Longrightarrow>\n       integrable N (\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w)", "fix asset"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n asset.\n       asset \\<in> support_set pf \\<Longrightarrow>\n       integrable N (\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w)", "assume \"asset\\<in>support_set pf\""], ["proof (state)\nthis:\n  asset \\<in> support_set pf\n\ngoal (1 subgoal):\n 1. \\<And>n asset.\n       asset \\<in> support_set pf \\<Longrightarrow>\n       integrable N (\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w)", "show \"integrable N (\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. integrable N (\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w)", "proof (rule prob_space.finite_borel_measurable_integrable)"], ["proof (state)\ngoal (3 subgoals):\n 1. prob_space N\n 2. (\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w)\n    \\<in> borel_measurable N\n 3. finite\n     ((\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w) ` space N)", "show \"prob_space N\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prob_space N", "using assms"], ["proof (prove)\nusing this:\n  risk_neutral_prob N\n  filt_equiv F M N\n  trading_strategy pf\n  self_financing Mkt pf\n  support_set pf \\<subseteq> stocks Mkt\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        finite (prices Mkt asset n ` space M)\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf. finite (pf asset n ` space M)\n  \\<forall>asset\\<in>stocks Mkt. borel_adapt_stoch_proc F (prices Mkt asset)\n\ngoal (1 subgoal):\n 1. prob_space N", "unfolding risk_neutral_prob_def"], ["proof (prove)\nusing this:\n  prob_space N \\<and>\n  (\\<forall>asset\\<in>stocks Mkt.\n      martingale N F (discounted_value r (prices Mkt asset)))\n  filt_equiv F M N\n  trading_strategy pf\n  self_financing Mkt pf\n  support_set pf \\<subseteq> stocks Mkt\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        finite (prices Mkt asset n ` space M)\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf. finite (pf asset n ` space M)\n  \\<forall>asset\\<in>stocks Mkt. borel_adapt_stoch_proc F (prices Mkt asset)\n\ngoal (1 subgoal):\n 1. prob_space N", "by auto"], ["proof (state)\nthis:\n  prob_space N\n\ngoal (2 subgoals):\n 1. (\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w)\n    \\<in> borel_measurable N\n 2. finite\n     ((\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w) ` space N)", "have \"finite ((\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w) ` space M)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite\n     ((\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w) ` space M)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. finite\n     ((\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w) ` space M)", "have \"\\<forall>y\\<in> prices Mkt asset n `(space M). finite ((\\<lambda> z. (\\<lambda>w. z * pf asset (Suc n) w) ` space M) y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>y\\<in>prices Mkt asset n ` space M.\n       finite ((\\<lambda>w. y * pf asset (Suc n) w) ` space M)", "by (metis \\<open>asset \\<in> support_set pf\\<close> assms(7) finite_imageI image_image)"], ["proof (state)\nthis:\n  \\<forall>y\\<in>prices Mkt asset n ` space M.\n     finite ((\\<lambda>w. y * pf asset (Suc n) w) ` space M)\n\ngoal (1 subgoal):\n 1. finite\n     ((\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w) ` space M)", "hence \"finite (\\<Union> y\\<in> prices Mkt asset n `(space M). ((\\<lambda> z. (\\<lambda>w. z * pf asset (Suc n) w) ` space M) y))\""], ["proof (prove)\nusing this:\n  \\<forall>y\\<in>prices Mkt asset n ` space M.\n     finite ((\\<lambda>w. y * pf asset (Suc n) w) ` space M)\n\ngoal (1 subgoal):\n 1. finite\n     (\\<Union>y\\<in>prices Mkt asset n ` space M.\n         (\\<lambda>w. y * pf asset (Suc n) w) ` space M)", "using \\<open>asset \\<in> support_set pf\\<close> assms(6)"], ["proof (prove)\nusing this:\n  \\<forall>y\\<in>prices Mkt asset n ` space M.\n     finite ((\\<lambda>w. y * pf asset (Suc n) w) ` space M)\n  asset \\<in> support_set pf\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        finite (prices Mkt asset n ` space M)\n\ngoal (1 subgoal):\n 1. finite\n     (\\<Union>y\\<in>prices Mkt asset n ` space M.\n         (\\<lambda>w. y * pf asset (Suc n) w) ` space M)", "by blast"], ["proof (state)\nthis:\n  finite\n   (\\<Union>y\\<in>prices Mkt asset n ` space M.\n       (\\<lambda>w. y * pf asset (Suc n) w) ` space M)\n\ngoal (1 subgoal):\n 1. finite\n     ((\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w) ` space M)", "moreover"], ["proof (state)\nthis:\n  finite\n   (\\<Union>y\\<in>prices Mkt asset n ` space M.\n       (\\<lambda>w. y * pf asset (Suc n) w) ` space M)\n\ngoal (1 subgoal):\n 1. finite\n     ((\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w) ` space M)", "have \"(\\<Union> y\\<in> prices Mkt asset n `(space M). ((\\<lambda> z. (\\<lambda>w. z * pf asset (Suc n) w) ` space M) y)) =\n          (\\<Union> y\\<in> prices Mkt asset n `(space M). (\\<lambda>w. y * pf asset (Suc n) w) ` space M)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Union>y\\<in>prices Mkt asset n ` space M.\n        (\\<lambda>w. y * pf asset (Suc n) w) ` space M) =\n    (\\<Union>y\\<in>prices Mkt asset n ` space M.\n        (\\<lambda>w. y * pf asset (Suc n) w) ` space M)", "by simp"], ["proof (state)\nthis:\n  (\\<Union>y\\<in>prices Mkt asset n ` space M.\n      (\\<lambda>w. y * pf asset (Suc n) w) ` space M) =\n  (\\<Union>y\\<in>prices Mkt asset n ` space M.\n      (\\<lambda>w. y * pf asset (Suc n) w) ` space M)\n\ngoal (1 subgoal):\n 1. finite\n     ((\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w) ` space M)", "moreover"], ["proof (state)\nthis:\n  (\\<Union>y\\<in>prices Mkt asset n ` space M.\n      (\\<lambda>w. y * pf asset (Suc n) w) ` space M) =\n  (\\<Union>y\\<in>prices Mkt asset n ` space M.\n      (\\<lambda>w. y * pf asset (Suc n) w) ` space M)\n\ngoal (1 subgoal):\n 1. finite\n     ((\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w) ` space M)", "have \"((\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w) ` space M) \\<subseteq>\n          (\\<Union> y\\<in> prices Mkt asset n `(space M). (\\<lambda>w. y * pf asset (Suc n) w) ` space M)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w) ` space M\n    \\<subseteq> (\\<Union>y\\<in>prices Mkt asset n ` space M.\n                    (\\<lambda>w. y * pf asset (Suc n) w) ` space M)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> (\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w) `\n               space M \\<Longrightarrow>\n       x \\<in> (\\<Union>y\\<in>prices Mkt asset n ` space M.\n                   (\\<lambda>w. y * pf asset (Suc n) w) ` space M)", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> (\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w) `\n               space M \\<Longrightarrow>\n       x \\<in> (\\<Union>y\\<in>prices Mkt asset n ` space M.\n                   (\\<lambda>w. y * pf asset (Suc n) w) ` space M)", "assume \"x \\<in> (\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w) ` space M\""], ["proof (state)\nthis:\n  x \\<in> (\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w) ` space M\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> (\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w) `\n               space M \\<Longrightarrow>\n       x \\<in> (\\<Union>y\\<in>prices Mkt asset n ` space M.\n                   (\\<lambda>w. y * pf asset (Suc n) w) ` space M)", "show \"x \\<in> (\\<Union>y\\<in>prices Mkt asset n ` space M. (\\<lambda>w. y * pf asset (Suc n) w) ` space M)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> (\\<Union>y\\<in>prices Mkt asset n ` space M.\n                (\\<lambda>w. y * pf asset (Suc n) w) ` space M)", "using \\<open>x \\<in> (\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w) ` space M\\<close>"], ["proof (prove)\nusing this:\n  x \\<in> (\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w) ` space M\n\ngoal (1 subgoal):\n 1. x \\<in> (\\<Union>y\\<in>prices Mkt asset n ` space M.\n                (\\<lambda>w. y * pf asset (Suc n) w) ` space M)", "by auto"], ["proof (state)\nthis:\n  x \\<in> (\\<Union>y\\<in>prices Mkt asset n ` space M.\n              (\\<lambda>w. y * pf asset (Suc n) w) ` space M)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w) ` space M\n  \\<subseteq> (\\<Union>y\\<in>prices Mkt asset n ` space M.\n                  (\\<lambda>w. y * pf asset (Suc n) w) ` space M)\n\ngoal (1 subgoal):\n 1. finite\n     ((\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w) ` space M)", "ultimately"], ["proof (chain)\npicking this:\n  finite\n   (\\<Union>y\\<in>prices Mkt asset n ` space M.\n       (\\<lambda>w. y * pf asset (Suc n) w) ` space M)\n  (\\<Union>y\\<in>prices Mkt asset n ` space M.\n      (\\<lambda>w. y * pf asset (Suc n) w) ` space M) =\n  (\\<Union>y\\<in>prices Mkt asset n ` space M.\n      (\\<lambda>w. y * pf asset (Suc n) w) ` space M)\n  (\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w) ` space M\n  \\<subseteq> (\\<Union>y\\<in>prices Mkt asset n ` space M.\n                  (\\<lambda>w. y * pf asset (Suc n) w) ` space M)", "show ?thesis"], ["proof (prove)\nusing this:\n  finite\n   (\\<Union>y\\<in>prices Mkt asset n ` space M.\n       (\\<lambda>w. y * pf asset (Suc n) w) ` space M)\n  (\\<Union>y\\<in>prices Mkt asset n ` space M.\n      (\\<lambda>w. y * pf asset (Suc n) w) ` space M) =\n  (\\<Union>y\\<in>prices Mkt asset n ` space M.\n      (\\<lambda>w. y * pf asset (Suc n) w) ` space M)\n  (\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w) ` space M\n  \\<subseteq> (\\<Union>y\\<in>prices Mkt asset n ` space M.\n                  (\\<lambda>w. y * pf asset (Suc n) w) ` space M)\n\ngoal (1 subgoal):\n 1. finite\n     ((\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w) ` space M)", "by (simp add:finite_subset)"], ["proof (state)\nthis:\n  finite ((\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w) ` space M)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  finite ((\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w) ` space M)\n\ngoal (2 subgoals):\n 1. (\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w)\n    \\<in> borel_measurable N\n 2. finite\n     ((\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w) ` space N)", "thus \"finite ((\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w) ` space N)\""], ["proof (prove)\nusing this:\n  finite ((\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w) ` space M)\n\ngoal (1 subgoal):\n 1. finite\n     ((\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w) ` space N)", "using assms"], ["proof (prove)\nusing this:\n  finite ((\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w) ` space M)\n  risk_neutral_prob N\n  filt_equiv F M N\n  trading_strategy pf\n  self_financing Mkt pf\n  support_set pf \\<subseteq> stocks Mkt\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        finite (prices Mkt asset n ` space M)\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf. finite (pf asset n ` space M)\n  \\<forall>asset\\<in>stocks Mkt. borel_adapt_stoch_proc F (prices Mkt asset)\n\ngoal (1 subgoal):\n 1. finite\n     ((\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w) ` space N)", "by (simp add:filt_equiv_space)"], ["proof (state)\nthis:\n  finite ((\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w) ` space N)\n\ngoal (1 subgoal):\n 1. (\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w)\n    \\<in> borel_measurable N", "have \"(\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w) \\<in> borel_measurable M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. random_variable borel\n     (\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. random_variable borel\n     (\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w)", "have \"prices Mkt asset n \\<in> borel_measurable M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. random_variable borel (prices Mkt asset n)", "using assms readable"], ["proof (prove)\nusing this:\n  risk_neutral_prob N\n  filt_equiv F M N\n  trading_strategy pf\n  self_financing Mkt pf\n  support_set pf \\<subseteq> stocks Mkt\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        finite (prices Mkt asset n ` space M)\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf. finite (pf asset n ` space M)\n  \\<forall>asset\\<in>stocks Mkt. borel_adapt_stoch_proc F (prices Mkt asset)\n  \\<forall>asset\\<in>stocks Mkt. borel_adapt_stoch_proc F (prices Mkt asset)\n\ngoal (1 subgoal):\n 1. random_variable borel (prices Mkt asset n)", "using \\<open>asset \\<in> support_set pf\\<close> borel_adapt_stoch_proc_borel_measurable"], ["proof (prove)\nusing this:\n  risk_neutral_prob N\n  filt_equiv F M N\n  trading_strategy pf\n  self_financing Mkt pf\n  support_set pf \\<subseteq> stocks Mkt\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        finite (prices Mkt asset n ` space M)\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf. finite (pf asset n ` space M)\n  \\<forall>asset\\<in>stocks Mkt. borel_adapt_stoch_proc F (prices Mkt asset)\n  \\<forall>asset\\<in>stocks Mkt. borel_adapt_stoch_proc F (prices Mkt asset)\n  asset \\<in> support_set pf\n  borel_adapt_stoch_proc F ?X \\<Longrightarrow>\n  \\<forall>n. random_variable borel (?X n)\n\ngoal (1 subgoal):\n 1. random_variable borel (prices Mkt asset n)", "by blast"], ["proof (state)\nthis:\n  random_variable borel (prices Mkt asset n)\n\ngoal (1 subgoal):\n 1. random_variable borel\n     (\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w)", "moreover"], ["proof (state)\nthis:\n  random_variable borel (prices Mkt asset n)\n\ngoal (1 subgoal):\n 1. random_variable borel\n     (\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w)", "have \"pf asset (Suc n) \\<in> borel_measurable M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. random_variable borel (pf asset (Suc n))", "using assms"], ["proof (prove)\nusing this:\n  risk_neutral_prob N\n  filt_equiv F M N\n  trading_strategy pf\n  self_financing Mkt pf\n  support_set pf \\<subseteq> stocks Mkt\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        finite (prices Mkt asset n ` space M)\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf. finite (pf asset n ` space M)\n  \\<forall>asset\\<in>stocks Mkt. borel_adapt_stoch_proc F (prices Mkt asset)\n\ngoal (1 subgoal):\n 1. random_variable borel (pf asset (Suc n))", "unfolding trading_strategy_def"], ["proof (prove)\nusing this:\n  risk_neutral_prob N\n  filt_equiv F M N\n  portfolio pf \\<and>\n  (\\<forall>asset\\<in>support_set pf. borel_predict_stoch_proc F (pf asset))\n  self_financing Mkt pf\n  support_set pf \\<subseteq> stocks Mkt\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        finite (prices Mkt asset n ` space M)\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf. finite (pf asset n ` space M)\n  \\<forall>asset\\<in>stocks Mkt. borel_adapt_stoch_proc F (prices Mkt asset)\n\ngoal (1 subgoal):\n 1. random_variable borel (pf asset (Suc n))", "using \\<open>asset \\<in> support_set pf\\<close> borel_predict_stoch_proc_borel_measurable"], ["proof (prove)\nusing this:\n  risk_neutral_prob N\n  filt_equiv F M N\n  portfolio pf \\<and>\n  (\\<forall>asset\\<in>support_set pf. borel_predict_stoch_proc F (pf asset))\n  self_financing Mkt pf\n  support_set pf \\<subseteq> stocks Mkt\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        finite (prices Mkt asset n ` space M)\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf. finite (pf asset n ` space M)\n  \\<forall>asset\\<in>stocks Mkt. borel_adapt_stoch_proc F (prices Mkt asset)\n  asset \\<in> support_set pf\n  borel_predict_stoch_proc F ?X \\<Longrightarrow>\n  \\<forall>n. random_variable borel (?X n)\n\ngoal (1 subgoal):\n 1. random_variable borel (pf asset (Suc n))", "by blast"], ["proof (state)\nthis:\n  random_variable borel (pf asset (Suc n))\n\ngoal (1 subgoal):\n 1. random_variable borel\n     (\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w)", "ultimately"], ["proof (chain)\npicking this:\n  random_variable borel (prices Mkt asset n)\n  random_variable borel (pf asset (Suc n))", "show ?thesis"], ["proof (prove)\nusing this:\n  random_variable borel (prices Mkt asset n)\n  random_variable borel (pf asset (Suc n))\n\ngoal (1 subgoal):\n 1. random_variable borel\n     (\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w)", "by simp"], ["proof (state)\nthis:\n  random_variable borel\n   (\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  random_variable borel\n   (\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w)\n\ngoal (1 subgoal):\n 1. (\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w)\n    \\<in> borel_measurable N", "thus \"(\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w) \\<in> borel_measurable N\""], ["proof (prove)\nusing this:\n  random_variable borel\n   (\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w)\n\ngoal (1 subgoal):\n 1. (\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w)\n    \\<in> borel_measurable N", "using assms"], ["proof (prove)\nusing this:\n  random_variable borel\n   (\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w)\n  risk_neutral_prob N\n  filt_equiv F M N\n  trading_strategy pf\n  self_financing Mkt pf\n  support_set pf \\<subseteq> stocks Mkt\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        finite (prices Mkt asset n ` space M)\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf. finite (pf asset n ` space M)\n  \\<forall>asset\\<in>stocks Mkt. borel_adapt_stoch_proc F (prices Mkt asset)\n\ngoal (1 subgoal):\n 1. (\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w)\n    \\<in> borel_measurable N", "by (simp add:filt_equiv_measurable)"], ["proof (state)\nthis:\n  (\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w)\n  \\<in> borel_measurable N\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  integrable N (\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        integrable N (\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w)\n\ngoal (2 subgoals):\n 1. stock_portfolio Mkt pf\n 2. \\<forall>n.\n       \\<forall>asset\\<in>support_set pf.\n          integrable N\n           (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w)", "show \"\\<forall>n. \\<forall>asset\\<in>support_set pf. integrable N (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n.\n       \\<forall>asset\\<in>support_set pf.\n          integrable N\n           (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w)", "proof (intro allI ballI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n asset.\n       asset \\<in> support_set pf \\<Longrightarrow>\n       integrable N\n        (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w)", "fix n"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n asset.\n       asset \\<in> support_set pf \\<Longrightarrow>\n       integrable N\n        (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w)", "fix asset"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n asset.\n       asset \\<in> support_set pf \\<Longrightarrow>\n       integrable N\n        (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w)", "assume \"asset\\<in>support_set pf\""], ["proof (state)\nthis:\n  asset \\<in> support_set pf\n\ngoal (1 subgoal):\n 1. \\<And>n asset.\n       asset \\<in> support_set pf \\<Longrightarrow>\n       integrable N\n        (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w)", "show \"integrable N (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. integrable N\n     (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w)", "proof (rule prob_space.finite_borel_measurable_integrable)"], ["proof (state)\ngoal (3 subgoals):\n 1. prob_space N\n 2. (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w)\n    \\<in> borel_measurable N\n 3. finite\n     ((\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w) `\n      space N)", "show \"prob_space N\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prob_space N", "using assms"], ["proof (prove)\nusing this:\n  risk_neutral_prob N\n  filt_equiv F M N\n  trading_strategy pf\n  self_financing Mkt pf\n  support_set pf \\<subseteq> stocks Mkt\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        finite (prices Mkt asset n ` space M)\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf. finite (pf asset n ` space M)\n  \\<forall>asset\\<in>stocks Mkt. borel_adapt_stoch_proc F (prices Mkt asset)\n\ngoal (1 subgoal):\n 1. prob_space N", "unfolding risk_neutral_prob_def"], ["proof (prove)\nusing this:\n  prob_space N \\<and>\n  (\\<forall>asset\\<in>stocks Mkt.\n      martingale N F (discounted_value r (prices Mkt asset)))\n  filt_equiv F M N\n  trading_strategy pf\n  self_financing Mkt pf\n  support_set pf \\<subseteq> stocks Mkt\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        finite (prices Mkt asset n ` space M)\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf. finite (pf asset n ` space M)\n  \\<forall>asset\\<in>stocks Mkt. borel_adapt_stoch_proc F (prices Mkt asset)\n\ngoal (1 subgoal):\n 1. prob_space N", "by auto"], ["proof (state)\nthis:\n  prob_space N\n\ngoal (2 subgoals):\n 1. (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w)\n    \\<in> borel_measurable N\n 2. finite\n     ((\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w) `\n      space N)", "have \"finite ((\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w) ` space M)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite\n     ((\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w) `\n      space M)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. finite\n     ((\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w) `\n      space M)", "have \"\\<forall>y\\<in> prices Mkt asset (Suc n) `(space M). finite ((\\<lambda> z. (\\<lambda>w. z * pf asset (Suc n) w) ` space M) y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>y\\<in>prices Mkt asset (Suc n) ` space M.\n       finite ((\\<lambda>w. y * pf asset (Suc n) w) ` space M)", "by (metis \\<open>asset \\<in> support_set pf\\<close> assms(7) finite_imageI image_image)"], ["proof (state)\nthis:\n  \\<forall>y\\<in>prices Mkt asset (Suc n) ` space M.\n     finite ((\\<lambda>w. y * pf asset (Suc n) w) ` space M)\n\ngoal (1 subgoal):\n 1. finite\n     ((\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w) `\n      space M)", "hence \"finite (\\<Union> y\\<in> prices Mkt asset (Suc n) `(space M). ((\\<lambda> z. (\\<lambda>w. z * pf asset (Suc n) w) ` space M) y))\""], ["proof (prove)\nusing this:\n  \\<forall>y\\<in>prices Mkt asset (Suc n) ` space M.\n     finite ((\\<lambda>w. y * pf asset (Suc n) w) ` space M)\n\ngoal (1 subgoal):\n 1. finite\n     (\\<Union>y\\<in>prices Mkt asset (Suc n) ` space M.\n         (\\<lambda>w. y * pf asset (Suc n) w) ` space M)", "using \\<open>asset \\<in> support_set pf\\<close> assms(6)"], ["proof (prove)\nusing this:\n  \\<forall>y\\<in>prices Mkt asset (Suc n) ` space M.\n     finite ((\\<lambda>w. y * pf asset (Suc n) w) ` space M)\n  asset \\<in> support_set pf\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        finite (prices Mkt asset n ` space M)\n\ngoal (1 subgoal):\n 1. finite\n     (\\<Union>y\\<in>prices Mkt asset (Suc n) ` space M.\n         (\\<lambda>w. y * pf asset (Suc n) w) ` space M)", "by blast"], ["proof (state)\nthis:\n  finite\n   (\\<Union>y\\<in>prices Mkt asset (Suc n) ` space M.\n       (\\<lambda>w. y * pf asset (Suc n) w) ` space M)\n\ngoal (1 subgoal):\n 1. finite\n     ((\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w) `\n      space M)", "moreover"], ["proof (state)\nthis:\n  finite\n   (\\<Union>y\\<in>prices Mkt asset (Suc n) ` space M.\n       (\\<lambda>w. y * pf asset (Suc n) w) ` space M)\n\ngoal (1 subgoal):\n 1. finite\n     ((\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w) `\n      space M)", "have \"(\\<Union> y\\<in> prices Mkt asset (Suc n) `(space M). ((\\<lambda> z. (\\<lambda>w. z * pf asset (Suc n) w) ` space M) y)) =\n          (\\<Union> y\\<in> prices Mkt asset (Suc n) `(space M). (\\<lambda>w. y * pf asset (Suc n) w) ` space M)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Union>y\\<in>prices Mkt asset (Suc n) ` space M.\n        (\\<lambda>w. y * pf asset (Suc n) w) ` space M) =\n    (\\<Union>y\\<in>prices Mkt asset (Suc n) ` space M.\n        (\\<lambda>w. y * pf asset (Suc n) w) ` space M)", "by simp"], ["proof (state)\nthis:\n  (\\<Union>y\\<in>prices Mkt asset (Suc n) ` space M.\n      (\\<lambda>w. y * pf asset (Suc n) w) ` space M) =\n  (\\<Union>y\\<in>prices Mkt asset (Suc n) ` space M.\n      (\\<lambda>w. y * pf asset (Suc n) w) ` space M)\n\ngoal (1 subgoal):\n 1. finite\n     ((\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w) `\n      space M)", "moreover"], ["proof (state)\nthis:\n  (\\<Union>y\\<in>prices Mkt asset (Suc n) ` space M.\n      (\\<lambda>w. y * pf asset (Suc n) w) ` space M) =\n  (\\<Union>y\\<in>prices Mkt asset (Suc n) ` space M.\n      (\\<lambda>w. y * pf asset (Suc n) w) ` space M)\n\ngoal (1 subgoal):\n 1. finite\n     ((\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w) `\n      space M)", "have \"((\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w) ` space M) \\<subseteq>\n          (\\<Union> y\\<in> prices Mkt asset (Suc n) `(space M). (\\<lambda>w. y * pf asset (Suc n) w) ` space M)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w) ` space M\n    \\<subseteq> (\\<Union>y\\<in>prices Mkt asset (Suc n) ` space M.\n                    (\\<lambda>w. y * pf asset (Suc n) w) ` space M)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> (\\<lambda>w.\n                   prices Mkt asset (Suc n) w * pf asset (Suc n) w) `\n               space M \\<Longrightarrow>\n       x \\<in> (\\<Union>y\\<in>prices Mkt asset (Suc n) ` space M.\n                   (\\<lambda>w. y * pf asset (Suc n) w) ` space M)", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> (\\<lambda>w.\n                   prices Mkt asset (Suc n) w * pf asset (Suc n) w) `\n               space M \\<Longrightarrow>\n       x \\<in> (\\<Union>y\\<in>prices Mkt asset (Suc n) ` space M.\n                   (\\<lambda>w. y * pf asset (Suc n) w) ` space M)", "assume \"x \\<in> (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w) ` space M\""], ["proof (state)\nthis:\n  x \\<in> (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w) `\n          space M\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> (\\<lambda>w.\n                   prices Mkt asset (Suc n) w * pf asset (Suc n) w) `\n               space M \\<Longrightarrow>\n       x \\<in> (\\<Union>y\\<in>prices Mkt asset (Suc n) ` space M.\n                   (\\<lambda>w. y * pf asset (Suc n) w) ` space M)", "show \"x \\<in> (\\<Union>y\\<in>prices Mkt asset (Suc n) ` space M. (\\<lambda>w. y * pf asset (Suc n) w) ` space M)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> (\\<Union>y\\<in>prices Mkt asset (Suc n) ` space M.\n                (\\<lambda>w. y * pf asset (Suc n) w) ` space M)", "using \\<open>x \\<in> (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w) ` space M\\<close>"], ["proof (prove)\nusing this:\n  x \\<in> (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w) `\n          space M\n\ngoal (1 subgoal):\n 1. x \\<in> (\\<Union>y\\<in>prices Mkt asset (Suc n) ` space M.\n                (\\<lambda>w. y * pf asset (Suc n) w) ` space M)", "by auto"], ["proof (state)\nthis:\n  x \\<in> (\\<Union>y\\<in>prices Mkt asset (Suc n) ` space M.\n              (\\<lambda>w. y * pf asset (Suc n) w) ` space M)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w) ` space M\n  \\<subseteq> (\\<Union>y\\<in>prices Mkt asset (Suc n) ` space M.\n                  (\\<lambda>w. y * pf asset (Suc n) w) ` space M)\n\ngoal (1 subgoal):\n 1. finite\n     ((\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w) `\n      space M)", "ultimately"], ["proof (chain)\npicking this:\n  finite\n   (\\<Union>y\\<in>prices Mkt asset (Suc n) ` space M.\n       (\\<lambda>w. y * pf asset (Suc n) w) ` space M)\n  (\\<Union>y\\<in>prices Mkt asset (Suc n) ` space M.\n      (\\<lambda>w. y * pf asset (Suc n) w) ` space M) =\n  (\\<Union>y\\<in>prices Mkt asset (Suc n) ` space M.\n      (\\<lambda>w. y * pf asset (Suc n) w) ` space M)\n  (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w) ` space M\n  \\<subseteq> (\\<Union>y\\<in>prices Mkt asset (Suc n) ` space M.\n                  (\\<lambda>w. y * pf asset (Suc n) w) ` space M)", "show ?thesis"], ["proof (prove)\nusing this:\n  finite\n   (\\<Union>y\\<in>prices Mkt asset (Suc n) ` space M.\n       (\\<lambda>w. y * pf asset (Suc n) w) ` space M)\n  (\\<Union>y\\<in>prices Mkt asset (Suc n) ` space M.\n      (\\<lambda>w. y * pf asset (Suc n) w) ` space M) =\n  (\\<Union>y\\<in>prices Mkt asset (Suc n) ` space M.\n      (\\<lambda>w. y * pf asset (Suc n) w) ` space M)\n  (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w) ` space M\n  \\<subseteq> (\\<Union>y\\<in>prices Mkt asset (Suc n) ` space M.\n                  (\\<lambda>w. y * pf asset (Suc n) w) ` space M)\n\ngoal (1 subgoal):\n 1. finite\n     ((\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w) `\n      space M)", "by (simp add:finite_subset)"], ["proof (state)\nthis:\n  finite\n   ((\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w) ` space M)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  finite\n   ((\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w) ` space M)\n\ngoal (2 subgoals):\n 1. (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w)\n    \\<in> borel_measurable N\n 2. finite\n     ((\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w) `\n      space N)", "thus \"finite ((\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w) ` space N)\""], ["proof (prove)\nusing this:\n  finite\n   ((\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w) ` space M)\n\ngoal (1 subgoal):\n 1. finite\n     ((\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w) `\n      space N)", "using assms"], ["proof (prove)\nusing this:\n  finite\n   ((\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w) ` space M)\n  risk_neutral_prob N\n  filt_equiv F M N\n  trading_strategy pf\n  self_financing Mkt pf\n  support_set pf \\<subseteq> stocks Mkt\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        finite (prices Mkt asset n ` space M)\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf. finite (pf asset n ` space M)\n  \\<forall>asset\\<in>stocks Mkt. borel_adapt_stoch_proc F (prices Mkt asset)\n\ngoal (1 subgoal):\n 1. finite\n     ((\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w) `\n      space N)", "by (simp add:filt_equiv_space)"], ["proof (state)\nthis:\n  finite\n   ((\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w) ` space N)\n\ngoal (1 subgoal):\n 1. (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w)\n    \\<in> borel_measurable N", "have \"(\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w) \\<in> borel_measurable M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. random_variable borel\n     (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. random_variable borel\n     (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w)", "have \"prices Mkt asset (Suc n) \\<in> borel_measurable M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. random_variable borel (prices Mkt asset (Suc n))", "using assms readable"], ["proof (prove)\nusing this:\n  risk_neutral_prob N\n  filt_equiv F M N\n  trading_strategy pf\n  self_financing Mkt pf\n  support_set pf \\<subseteq> stocks Mkt\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        finite (prices Mkt asset n ` space M)\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf. finite (pf asset n ` space M)\n  \\<forall>asset\\<in>stocks Mkt. borel_adapt_stoch_proc F (prices Mkt asset)\n  \\<forall>asset\\<in>stocks Mkt. borel_adapt_stoch_proc F (prices Mkt asset)\n\ngoal (1 subgoal):\n 1. random_variable borel (prices Mkt asset (Suc n))", "using \\<open>asset \\<in> support_set pf\\<close> borel_adapt_stoch_proc_borel_measurable"], ["proof (prove)\nusing this:\n  risk_neutral_prob N\n  filt_equiv F M N\n  trading_strategy pf\n  self_financing Mkt pf\n  support_set pf \\<subseteq> stocks Mkt\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        finite (prices Mkt asset n ` space M)\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf. finite (pf asset n ` space M)\n  \\<forall>asset\\<in>stocks Mkt. borel_adapt_stoch_proc F (prices Mkt asset)\n  \\<forall>asset\\<in>stocks Mkt. borel_adapt_stoch_proc F (prices Mkt asset)\n  asset \\<in> support_set pf\n  borel_adapt_stoch_proc F ?X \\<Longrightarrow>\n  \\<forall>n. random_variable borel (?X n)\n\ngoal (1 subgoal):\n 1. random_variable borel (prices Mkt asset (Suc n))", "by blast"], ["proof (state)\nthis:\n  random_variable borel (prices Mkt asset (Suc n))\n\ngoal (1 subgoal):\n 1. random_variable borel\n     (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w)", "moreover"], ["proof (state)\nthis:\n  random_variable borel (prices Mkt asset (Suc n))\n\ngoal (1 subgoal):\n 1. random_variable borel\n     (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w)", "have \"pf asset (Suc n) \\<in> borel_measurable M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. random_variable borel (pf asset (Suc n))", "using assms"], ["proof (prove)\nusing this:\n  risk_neutral_prob N\n  filt_equiv F M N\n  trading_strategy pf\n  self_financing Mkt pf\n  support_set pf \\<subseteq> stocks Mkt\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        finite (prices Mkt asset n ` space M)\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf. finite (pf asset n ` space M)\n  \\<forall>asset\\<in>stocks Mkt. borel_adapt_stoch_proc F (prices Mkt asset)\n\ngoal (1 subgoal):\n 1. random_variable borel (pf asset (Suc n))", "unfolding trading_strategy_def"], ["proof (prove)\nusing this:\n  risk_neutral_prob N\n  filt_equiv F M N\n  portfolio pf \\<and>\n  (\\<forall>asset\\<in>support_set pf. borel_predict_stoch_proc F (pf asset))\n  self_financing Mkt pf\n  support_set pf \\<subseteq> stocks Mkt\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        finite (prices Mkt asset n ` space M)\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf. finite (pf asset n ` space M)\n  \\<forall>asset\\<in>stocks Mkt. borel_adapt_stoch_proc F (prices Mkt asset)\n\ngoal (1 subgoal):\n 1. random_variable borel (pf asset (Suc n))", "using \\<open>asset \\<in> support_set pf\\<close> borel_predict_stoch_proc_borel_measurable"], ["proof (prove)\nusing this:\n  risk_neutral_prob N\n  filt_equiv F M N\n  portfolio pf \\<and>\n  (\\<forall>asset\\<in>support_set pf. borel_predict_stoch_proc F (pf asset))\n  self_financing Mkt pf\n  support_set pf \\<subseteq> stocks Mkt\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        finite (prices Mkt asset n ` space M)\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf. finite (pf asset n ` space M)\n  \\<forall>asset\\<in>stocks Mkt. borel_adapt_stoch_proc F (prices Mkt asset)\n  asset \\<in> support_set pf\n  borel_predict_stoch_proc F ?X \\<Longrightarrow>\n  \\<forall>n. random_variable borel (?X n)\n\ngoal (1 subgoal):\n 1. random_variable borel (pf asset (Suc n))", "by blast"], ["proof (state)\nthis:\n  random_variable borel (pf asset (Suc n))\n\ngoal (1 subgoal):\n 1. random_variable borel\n     (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w)", "ultimately"], ["proof (chain)\npicking this:\n  random_variable borel (prices Mkt asset (Suc n))\n  random_variable borel (pf asset (Suc n))", "show ?thesis"], ["proof (prove)\nusing this:\n  random_variable borel (prices Mkt asset (Suc n))\n  random_variable borel (pf asset (Suc n))\n\ngoal (1 subgoal):\n 1. random_variable borel\n     (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w)", "by simp"], ["proof (state)\nthis:\n  random_variable borel\n   (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  random_variable borel\n   (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w)\n\ngoal (1 subgoal):\n 1. (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w)\n    \\<in> borel_measurable N", "thus \"(\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w) \\<in> borel_measurable N\""], ["proof (prove)\nusing this:\n  random_variable borel\n   (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w)\n\ngoal (1 subgoal):\n 1. (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w)\n    \\<in> borel_measurable N", "using assms"], ["proof (prove)\nusing this:\n  random_variable borel\n   (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w)\n  risk_neutral_prob N\n  filt_equiv F M N\n  trading_strategy pf\n  self_financing Mkt pf\n  support_set pf \\<subseteq> stocks Mkt\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        finite (prices Mkt asset n ` space M)\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf. finite (pf asset n ` space M)\n  \\<forall>asset\\<in>stocks Mkt. borel_adapt_stoch_proc F (prices Mkt asset)\n\ngoal (1 subgoal):\n 1. (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w)\n    \\<in> borel_measurable N", "by (simp add:filt_equiv_measurable)"], ["proof (state)\nthis:\n  (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w)\n  \\<in> borel_measurable N\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  integrable N (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        integrable N\n         (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w)\n\ngoal (1 subgoal):\n 1. stock_portfolio Mkt pf", "show \"stock_portfolio Mkt pf\""], ["proof (prove)\ngoal (1 subgoal):\n 1. stock_portfolio Mkt pf", "using assms stock_portfolio_def"], ["proof (prove)\nusing this:\n  risk_neutral_prob N\n  filt_equiv F M N\n  trading_strategy pf\n  self_financing Mkt pf\n  support_set pf \\<subseteq> stocks Mkt\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        finite (prices Mkt asset n ` space M)\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf. finite (pf asset n ` space M)\n  \\<forall>asset\\<in>stocks Mkt. borel_adapt_stoch_proc F (prices Mkt asset)\n  stock_portfolio ?Mkt ?p =\n  (portfolio ?p \\<and> support_set ?p \\<subseteq> stocks ?Mkt)\n\ngoal (1 subgoal):\n 1. stock_portfolio Mkt pf", "by (simp add: stock_portfolio_def trading_strategy_def)"], ["proof (state)\nthis:\n  stock_portfolio Mkt pf\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in rfr_disc_equity_market) replicating_expectation:\n  assumes \"risk_neutral_prob N\"\n  and \"filt_equiv F M N\"\n  and \"replicating_portfolio pf pyf matur\"\n  and \"\\<forall>n. \\<forall> asset \\<in> support_set pf. integrable N (\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w)\"\n  and \"\\<forall>n. \\<forall> asset \\<in> support_set pf. integrable N (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w)\"\n  and \"viable_market Mkt\"\n  and \"sets (F 0) = {{}, space M}\"\n  and \"pyf  \\<in> borel_measurable (F matur)\"\nshows \"fair_price Mkt (prob_space.expectation N (discounted_value r (\\<lambda>m. pyf) matur)) pyf matur\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fair_price Mkt\n     (integral\\<^sup>L N (discounted_value r (\\<lambda>m. pyf) matur)) pyf\n     matur", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. fair_price Mkt\n     (integral\\<^sup>L N (discounted_value r (\\<lambda>m. pyf) matur)) pyf\n     matur", "have fn: \"filtrated_prob_space N F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. filtrated_prob_space N F", "using assms"], ["proof (prove)\nusing this:\n  risk_neutral_prob N\n  filt_equiv F M N\n  replicating_portfolio pf pyf matur\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        integrable N (\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w)\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        integrable N\n         (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w)\n  viable_market Mkt\n  sets (F 0) = {{}, space M}\n  pyf \\<in> borel_measurable (F matur)\n\ngoal (1 subgoal):\n 1. filtrated_prob_space N F", "by (simp add: \\<open>pyf \\<in> borel_measurable (F matur)\\<close> filtrated_prob_space_axioms.intro\n        filtrated_prob_space_def risk_neutral_prob_def filt_equiv_filtration)"], ["proof (state)\nthis:\n  filtrated_prob_space N F\n\ngoal (1 subgoal):\n 1. fair_price Mkt\n     (integral\\<^sup>L N (discounted_value r (\\<lambda>m. pyf) matur)) pyf\n     matur", "have \"discounted_value r (cls_val_process Mkt pf) matur \\<in> borel_measurable N\""], ["proof (prove)\ngoal (1 subgoal):\n 1. discounted_value r (cls_val_process Mkt pf) matur\n    \\<in> borel_measurable N", "using assms(3) disc_equity_market.replicating_portfolio_def disc_equity_market_axioms discounted_adapted\n    filtrated_prob_space.borel_adapt_stoch_proc_borel_measurable fn cls_val_process_adapted"], ["proof (prove)\nusing this:\n  replicating_portfolio pf pyf matur\n  disc_equity_market ?M ?F \\<Longrightarrow>\n  disc_equity_market.replicating_portfolio ?M ?F ?Mkt ?pf ?der ?matur =\n  (stock_portfolio ?Mkt ?pf \\<and>\n   disc_filtr_prob_space.trading_strategy ?F ?pf \\<and>\n   self_financing ?Mkt ?pf \\<and>\n   AEeq ?M (cls_val_process ?Mkt ?pf ?matur) ?der)\n  disc_equity_market M F\n  borel_adapt_stoch_proc ?F ?X \\<Longrightarrow>\n  borel_adapt_stoch_proc ?F (discounted_value ?r ?X)\n  \\<lbrakk>filtrated_prob_space ?M ?F; borel_adapt_stoch_proc ?F ?X\\<rbrakk>\n  \\<Longrightarrow> \\<forall>n. ?X n \\<in> borel_measurable ?M\n  filtrated_prob_space N F\n  \\<lbrakk>trading_strategy ?p; support_adapt Mkt ?p\\<rbrakk>\n  \\<Longrightarrow> borel_adapt_stoch_proc F (cls_val_process Mkt ?p)\n\ngoal (1 subgoal):\n 1. discounted_value r (cls_val_process Mkt pf) matur\n    \\<in> borel_measurable N", "by (metis (no_types, hide_lams) support_adapt_def readable  stock_portfolio_def subsetCE)"], ["proof (state)\nthis:\n  discounted_value r (cls_val_process Mkt pf) matur \\<in> borel_measurable N\n\ngoal (1 subgoal):\n 1. fair_price Mkt\n     (integral\\<^sup>L N (discounted_value r (\\<lambda>m. pyf) matur)) pyf\n     matur", "have \"discounted_value r (\\<lambda>m. pyf) matur \\<in> borel_measurable N\""], ["proof (prove)\ngoal (1 subgoal):\n 1. discounted_value r (\\<lambda>m. pyf) matur \\<in> borel_measurable N", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. discounted_value r (\\<lambda>m. pyf) matur \\<in> borel_measurable N", "have \"(\\<lambda>m. pyf) matur \\<in> borel_measurable (F matur)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pyf \\<in> borel_measurable (F matur)", "using assms"], ["proof (prove)\nusing this:\n  risk_neutral_prob N\n  filt_equiv F M N\n  replicating_portfolio pf pyf matur\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        integrable N (\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w)\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        integrable N\n         (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w)\n  viable_market Mkt\n  sets (F 0) = {{}, space M}\n  pyf \\<in> borel_measurable (F matur)\n\ngoal (1 subgoal):\n 1. pyf \\<in> borel_measurable (F matur)", "by simp"], ["proof (state)\nthis:\n  pyf \\<in> borel_measurable (F matur)\n\ngoal (1 subgoal):\n 1. discounted_value r (\\<lambda>m. pyf) matur \\<in> borel_measurable N", "hence \"(\\<lambda>m. pyf) matur \\<in> borel_measurable M\""], ["proof (prove)\nusing this:\n  pyf \\<in> borel_measurable (F matur)\n\ngoal (1 subgoal):\n 1. random_variable borel pyf", "using filtration filtrationE1 measurable_from_subalg"], ["proof (prove)\nusing this:\n  pyf \\<in> borel_measurable (F matur)\n  Filtration.filtration M F\n  Filtration.filtration ?M ?F \\<Longrightarrow> subalgebra ?M (?F ?t)\n  \\<lbrakk>subalgebra ?M ?F; ?f \\<in> ?F \\<rightarrow>\\<^sub>M ?N\\<rbrakk>\n  \\<Longrightarrow> ?f \\<in> ?M \\<rightarrow>\\<^sub>M ?N\n\ngoal (1 subgoal):\n 1. random_variable borel pyf", "by blast"], ["proof (state)\nthis:\n  random_variable borel pyf\n\ngoal (1 subgoal):\n 1. discounted_value r (\\<lambda>m. pyf) matur \\<in> borel_measurable N", "hence \"(\\<lambda>m. pyf) matur \\<in> borel_measurable N\""], ["proof (prove)\nusing this:\n  random_variable borel pyf\n\ngoal (1 subgoal):\n 1. pyf \\<in> borel_measurable N", "using assms"], ["proof (prove)\nusing this:\n  random_variable borel pyf\n  risk_neutral_prob N\n  filt_equiv F M N\n  replicating_portfolio pf pyf matur\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        integrable N (\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w)\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        integrable N\n         (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w)\n  viable_market Mkt\n  sets (F 0) = {{}, space M}\n  pyf \\<in> borel_measurable (F matur)\n\ngoal (1 subgoal):\n 1. pyf \\<in> borel_measurable N", "by (simp add:filt_equiv_measurable)"], ["proof (state)\nthis:\n  pyf \\<in> borel_measurable N\n\ngoal (1 subgoal):\n 1. discounted_value r (\\<lambda>m. pyf) matur \\<in> borel_measurable N", "thus ?thesis"], ["proof (prove)\nusing this:\n  pyf \\<in> borel_measurable N\n\ngoal (1 subgoal):\n 1. discounted_value r (\\<lambda>m. pyf) matur \\<in> borel_measurable N", "by (simp add:discounted_measurable)"], ["proof (state)\nthis:\n  discounted_value r (\\<lambda>m. pyf) matur \\<in> borel_measurable N\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  discounted_value r (\\<lambda>m. pyf) matur \\<in> borel_measurable N\n\ngoal (1 subgoal):\n 1. fair_price Mkt\n     (integral\\<^sup>L N (discounted_value r (\\<lambda>m. pyf) matur)) pyf\n     matur", "have mpyf: \"AE w in M. cls_val_process Mkt pf matur w = pyf w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. AEeq M (cls_val_process Mkt pf matur) pyf", "using assms"], ["proof (prove)\nusing this:\n  risk_neutral_prob N\n  filt_equiv F M N\n  replicating_portfolio pf pyf matur\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        integrable N (\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w)\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        integrable N\n         (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w)\n  viable_market Mkt\n  sets (F 0) = {{}, space M}\n  pyf \\<in> borel_measurable (F matur)\n\ngoal (1 subgoal):\n 1. AEeq M (cls_val_process Mkt pf matur) pyf", "unfolding replicating_portfolio_def"], ["proof (prove)\nusing this:\n  risk_neutral_prob N\n  filt_equiv F M N\n  stock_portfolio Mkt pf \\<and>\n  trading_strategy pf \\<and>\n  self_financing Mkt pf \\<and> AEeq M (cls_val_process Mkt pf matur) pyf\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        integrable N (\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w)\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        integrable N\n         (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w)\n  viable_market Mkt\n  sets (F 0) = {{}, space M}\n  pyf \\<in> borel_measurable (F matur)\n\ngoal (1 subgoal):\n 1. AEeq M (cls_val_process Mkt pf matur) pyf", "by simp"], ["proof (state)\nthis:\n  AEeq M (cls_val_process Mkt pf matur) pyf\n\ngoal (1 subgoal):\n 1. fair_price Mkt\n     (integral\\<^sup>L N (discounted_value r (\\<lambda>m. pyf) matur)) pyf\n     matur", "have \"AE w in N. cls_val_process Mkt pf matur w = pyf w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. AEeq N (cls_val_process Mkt pf matur) pyf", "proof (rule filt_equiv_borel_AE_eq)"], ["proof (state)\ngoal (4 subgoals):\n 1. filt_equiv ?F M N\n 2. cls_val_process Mkt pf matur \\<in> borel_measurable (?F ?t)\n 3. pyf \\<in> borel_measurable (?F ?t)\n 4. AEeq M (cls_val_process Mkt pf matur) pyf", "show \"filt_equiv F M N\""], ["proof (prove)\ngoal (1 subgoal):\n 1. filt_equiv F M N", "using assms"], ["proof (prove)\nusing this:\n  risk_neutral_prob N\n  filt_equiv F M N\n  replicating_portfolio pf pyf matur\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        integrable N (\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w)\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        integrable N\n         (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w)\n  viable_market Mkt\n  sets (F 0) = {{}, space M}\n  pyf \\<in> borel_measurable (F matur)\n\ngoal (1 subgoal):\n 1. filt_equiv F M N", "by simp"], ["proof (state)\nthis:\n  filt_equiv F M N\n\ngoal (3 subgoals):\n 1. cls_val_process Mkt pf matur \\<in> borel_measurable (F ?t)\n 2. pyf \\<in> borel_measurable (F ?t)\n 3. AEeq M (cls_val_process Mkt pf matur) pyf", "show \"pyf \\<in> borel_measurable (F matur)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pyf \\<in> borel_measurable (F matur)", "using assms"], ["proof (prove)\nusing this:\n  risk_neutral_prob N\n  filt_equiv F M N\n  replicating_portfolio pf pyf matur\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        integrable N (\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w)\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        integrable N\n         (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w)\n  viable_market Mkt\n  sets (F 0) = {{}, space M}\n  pyf \\<in> borel_measurable (F matur)\n\ngoal (1 subgoal):\n 1. pyf \\<in> borel_measurable (F matur)", "by simp"], ["proof (state)\nthis:\n  pyf \\<in> borel_measurable (F matur)\n\ngoal (2 subgoals):\n 1. cls_val_process Mkt pf matur \\<in> borel_measurable (F matur)\n 2. AEeq M (cls_val_process Mkt pf matur) pyf", "show \"AE w in M. cls_val_process Mkt pf matur w = pyf w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. AEeq M (cls_val_process Mkt pf matur) pyf", "using mpyf"], ["proof (prove)\nusing this:\n  AEeq M (cls_val_process Mkt pf matur) pyf\n\ngoal (1 subgoal):\n 1. AEeq M (cls_val_process Mkt pf matur) pyf", "by simp"], ["proof (state)\nthis:\n  AEeq M (cls_val_process Mkt pf matur) pyf\n\ngoal (1 subgoal):\n 1. cls_val_process Mkt pf matur \\<in> borel_measurable (F matur)", "show \"cls_val_process Mkt pf matur \\<in> borel_measurable (F matur)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cls_val_process Mkt pf matur \\<in> borel_measurable (F matur)", "using assms(3) price_structure_def replicating_price_process"], ["proof (prove)\nusing this:\n  replicating_portfolio pf pyf matur\n  price_structure ?pyf ?T ?\\<pi> ?pr =\n  ((\\<forall>w\\<in>space M. ?pr 0 w = ?\\<pi>) \\<and>\n   AEeq M (?pr ?T) ?pyf \\<and> ?pr ?T \\<in> borel_measurable (F ?T))\n  \\<lbrakk>replicating_portfolio ?pf ?der ?matur;\n   support_adapt Mkt ?pf\\<rbrakk>\n  \\<Longrightarrow> price_structure ?der ?matur (initial_value ?pf)\n                     (cls_val_process Mkt ?pf)\n\ngoal (1 subgoal):\n 1. cls_val_process Mkt pf matur \\<in> borel_measurable (F matur)", "by (meson support_adapt_def disc_equity_market.replicating_portfolio_def disc_equity_market_axioms readable  stock_portfolio_def subsetCE)"], ["proof (state)\nthis:\n  cls_val_process Mkt pf matur \\<in> borel_measurable (F matur)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  AEeq N (cls_val_process Mkt pf matur) pyf\n\ngoal (1 subgoal):\n 1. fair_price Mkt\n     (integral\\<^sup>L N (discounted_value r (\\<lambda>m. pyf) matur)) pyf\n     matur", "hence disc:\"AE w in N. discounted_value r (cls_val_process Mkt pf) matur w = discounted_value r (\\<lambda>m. pyf) matur w\""], ["proof (prove)\nusing this:\n  AEeq N (cls_val_process Mkt pf matur) pyf\n\ngoal (1 subgoal):\n 1. AEeq N (discounted_value r (cls_val_process Mkt pf) matur)\n     (discounted_value r (\\<lambda>m. pyf) matur)", "by (simp add:discounted_AE_cong)"], ["proof (state)\nthis:\n  AEeq N (discounted_value r (cls_val_process Mkt pf) matur)\n   (discounted_value r (\\<lambda>m. pyf) matur)\n\ngoal (1 subgoal):\n 1. fair_price Mkt\n     (integral\\<^sup>L N (discounted_value r (\\<lambda>m. pyf) matur)) pyf\n     matur", "have \"AEeq N (real_cond_exp N (F 0) (discounted_value r (cls_val_process Mkt pf) matur))\n    (real_cond_exp N (F 0) (discounted_value r (\\<lambda>m. pyf) matur))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. AEeq N\n     (real_cond_exp N (F 0)\n       (discounted_value r (cls_val_process Mkt pf) matur))\n     (real_cond_exp N (F 0) (discounted_value r (\\<lambda>m. pyf) matur))", "proof (rule sigma_finite_subalgebra.real_cond_exp_cong)"], ["proof (state)\ngoal (4 subgoals):\n 1. sigma_finite_subalgebra N (F 0)\n 2. AEeq N (discounted_value r (cls_val_process Mkt pf) matur)\n     (discounted_value r (\\<lambda>m. pyf) matur)\n 3. discounted_value r (cls_val_process Mkt pf) matur\n    \\<in> borel_measurable N\n 4. discounted_value r (\\<lambda>m. pyf) matur \\<in> borel_measurable N", "show \"sigma_finite_subalgebra N (F 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sigma_finite_subalgebra N (F 0)", "using filtrated_prob_space.axioms(1) filtrated_prob_space.filtration fn filtrationE1\n        prob_space.subalgebra_sigma_finite"], ["proof (prove)\nusing this:\n  filtrated_prob_space ?M ?F \\<Longrightarrow> prob_space ?M\n  filtrated_prob_space ?M ?F \\<Longrightarrow> Filtration.filtration ?M ?F\n  filtrated_prob_space N F\n  Filtration.filtration ?M ?F \\<Longrightarrow> subalgebra ?M (?F ?t)\n  \\<lbrakk>prob_space ?M; subalgebra ?M ?N\\<rbrakk>\n  \\<Longrightarrow> sigma_finite_subalgebra ?M ?N\n\ngoal (1 subgoal):\n 1. sigma_finite_subalgebra N (F 0)", "by blast"], ["proof (state)\nthis:\n  sigma_finite_subalgebra N (F 0)\n\ngoal (3 subgoals):\n 1. AEeq N (discounted_value r (cls_val_process Mkt pf) matur)\n     (discounted_value r (\\<lambda>m. pyf) matur)\n 2. discounted_value r (cls_val_process Mkt pf) matur\n    \\<in> borel_measurable N\n 3. discounted_value r (\\<lambda>m. pyf) matur \\<in> borel_measurable N", "show \"AEeq N (discounted_value r (cls_val_process Mkt pf) matur) (discounted_value r (\\<lambda>m. pyf) matur)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. AEeq N (discounted_value r (cls_val_process Mkt pf) matur)\n     (discounted_value r (\\<lambda>m. pyf) matur)", "using disc"], ["proof (prove)\nusing this:\n  AEeq N (discounted_value r (cls_val_process Mkt pf) matur)\n   (discounted_value r (\\<lambda>m. pyf) matur)\n\ngoal (1 subgoal):\n 1. AEeq N (discounted_value r (cls_val_process Mkt pf) matur)\n     (discounted_value r (\\<lambda>m. pyf) matur)", "by simp"], ["proof (state)\nthis:\n  AEeq N (discounted_value r (cls_val_process Mkt pf) matur)\n   (discounted_value r (\\<lambda>m. pyf) matur)\n\ngoal (2 subgoals):\n 1. discounted_value r (cls_val_process Mkt pf) matur\n    \\<in> borel_measurable N\n 2. discounted_value r (\\<lambda>m. pyf) matur \\<in> borel_measurable N", "show \"discounted_value r (cls_val_process Mkt pf) matur \\<in> borel_measurable N\""], ["proof (prove)\ngoal (1 subgoal):\n 1. discounted_value r (cls_val_process Mkt pf) matur\n    \\<in> borel_measurable N", "using \\<open>discounted_value r (cls_val_process Mkt pf) matur \\<in> borel_measurable N\\<close>"], ["proof (prove)\nusing this:\n  discounted_value r (cls_val_process Mkt pf) matur \\<in> borel_measurable N\n\ngoal (1 subgoal):\n 1. discounted_value r (cls_val_process Mkt pf) matur\n    \\<in> borel_measurable N", "."], ["proof (state)\nthis:\n  discounted_value r (cls_val_process Mkt pf) matur \\<in> borel_measurable N\n\ngoal (1 subgoal):\n 1. discounted_value r (\\<lambda>m. pyf) matur \\<in> borel_measurable N", "show \"discounted_value r (\\<lambda>m. pyf) matur \\<in> borel_measurable N\""], ["proof (prove)\ngoal (1 subgoal):\n 1. discounted_value r (\\<lambda>m. pyf) matur \\<in> borel_measurable N", "using \\<open>discounted_value r (\\<lambda>m. pyf) matur \\<in> borel_measurable N\\<close>"], ["proof (prove)\nusing this:\n  discounted_value r (\\<lambda>m. pyf) matur \\<in> borel_measurable N\n\ngoal (1 subgoal):\n 1. discounted_value r (\\<lambda>m. pyf) matur \\<in> borel_measurable N", "."], ["proof (state)\nthis:\n  discounted_value r (\\<lambda>m. pyf) matur \\<in> borel_measurable N\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  AEeq N\n   (real_cond_exp N (F 0)\n     (discounted_value r (cls_val_process Mkt pf) matur))\n   (real_cond_exp N (F 0) (discounted_value r (\\<lambda>m. pyf) matur))\n\ngoal (1 subgoal):\n 1. fair_price Mkt\n     (integral\\<^sup>L N (discounted_value r (\\<lambda>m. pyf) matur)) pyf\n     matur", "have \"martingale N F (discounted_value r (cls_val_process Mkt pf))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. martingale N F (discounted_value r (cls_val_process Mkt pf))", "using assms"], ["proof (prove)\nusing this:\n  risk_neutral_prob N\n  filt_equiv F M N\n  replicating_portfolio pf pyf matur\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        integrable N (\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w)\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        integrable N\n         (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w)\n  viable_market Mkt\n  sets (F 0) = {{}, space M}\n  pyf \\<in> borel_measurable (F matur)\n\ngoal (1 subgoal):\n 1. martingale N F (discounted_value r (cls_val_process Mkt pf))", "unfolding replicating_portfolio_def"], ["proof (prove)\nusing this:\n  risk_neutral_prob N\n  filt_equiv F M N\n  stock_portfolio Mkt pf \\<and>\n  trading_strategy pf \\<and>\n  self_financing Mkt pf \\<and> AEeq M (cls_val_process Mkt pf matur) pyf\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        integrable N (\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w)\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        integrable N\n         (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w)\n  viable_market Mkt\n  sets (F 0) = {{}, space M}\n  pyf \\<in> borel_measurable (F matur)\n\ngoal (1 subgoal):\n 1. martingale N F (discounted_value r (cls_val_process Mkt pf))", "using self_fin_trad_strat_mart[of N pf]"], ["proof (prove)\nusing this:\n  risk_neutral_prob N\n  filt_equiv F M N\n  stock_portfolio Mkt pf \\<and>\n  trading_strategy pf \\<and>\n  self_financing Mkt pf \\<and> AEeq M (cls_val_process Mkt pf matur) pyf\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        integrable N (\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w)\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        integrable N\n         (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w)\n  viable_market Mkt\n  sets (F 0) = {{}, space M}\n  pyf \\<in> borel_measurable (F matur)\n  \\<lbrakk>risk_neutral_prob N; filt_equiv F M N; trading_strategy pf;\n   self_financing Mkt pf; stock_portfolio Mkt pf;\n   \\<forall>n.\n      \\<forall>asset\\<in>support_set pf.\n         integrable N\n          (\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w);\n   \\<forall>n.\n      \\<forall>asset\\<in>support_set pf.\n         integrable N\n          (\\<lambda>w.\n              prices Mkt asset (Suc n) w * pf asset (Suc n) w)\\<rbrakk>\n  \\<Longrightarrow> martingale N F\n                     (discounted_value r (cls_val_process Mkt pf))\n\ngoal (1 subgoal):\n 1. martingale N F (discounted_value r (cls_val_process Mkt pf))", "by (simp add: stock_portfolio_def)"], ["proof (state)\nthis:\n  martingale N F (discounted_value r (cls_val_process Mkt pf))\n\ngoal (1 subgoal):\n 1. fair_price Mkt\n     (integral\\<^sup>L N (discounted_value r (\\<lambda>m. pyf) matur)) pyf\n     matur", "hence \"AEeq N (real_cond_exp N (F 0) (discounted_value r (cls_val_process Mkt pf) matur))\n    (discounted_value r (cls_val_process Mkt pf) 0)\""], ["proof (prove)\nusing this:\n  martingale N F (discounted_value r (cls_val_process Mkt pf))\n\ngoal (1 subgoal):\n 1. AEeq N\n     (real_cond_exp N (F 0)\n       (discounted_value r (cls_val_process Mkt pf) matur))\n     (discounted_value r (cls_val_process Mkt pf) 0)", "using martingaleAE[of N F \"discounted_value r (cls_val_process Mkt pf)\" 0 matur]\n    fn"], ["proof (prove)\nusing this:\n  martingale N F (discounted_value r (cls_val_process Mkt pf))\n  \\<lbrakk>martingale N F (discounted_value r (cls_val_process Mkt pf));\n   0 \\<le> matur\\<rbrakk>\n  \\<Longrightarrow> AEeq N\n                     (real_cond_exp N (F 0)\n                       (discounted_value r (cls_val_process Mkt pf) matur))\n                     (discounted_value r (cls_val_process Mkt pf) 0)\n  filtrated_prob_space N F\n\ngoal (1 subgoal):\n 1. AEeq N\n     (real_cond_exp N (F 0)\n       (discounted_value r (cls_val_process Mkt pf) matur))\n     (discounted_value r (cls_val_process Mkt pf) 0)", "by simp"], ["proof (state)\nthis:\n  AEeq N\n   (real_cond_exp N (F 0)\n     (discounted_value r (cls_val_process Mkt pf) matur))\n   (discounted_value r (cls_val_process Mkt pf) 0)\n\ngoal (1 subgoal):\n 1. fair_price Mkt\n     (integral\\<^sup>L N (discounted_value r (\\<lambda>m. pyf) matur)) pyf\n     matur", "also"], ["proof (state)\nthis:\n  AEeq N\n   (real_cond_exp N (F 0)\n     (discounted_value r (cls_val_process Mkt pf) matur))\n   (discounted_value r (cls_val_process Mkt pf) 0)\n\ngoal (1 subgoal):\n 1. fair_price Mkt\n     (integral\\<^sup>L N (discounted_value r (\\<lambda>m. pyf) matur)) pyf\n     matur", "have \"AE w in N. (discounted_value r (cls_val_process Mkt pf) 0 w) = initial_value pf\""], ["proof (prove)\ngoal (1 subgoal):\n 1. AEeq N (discounted_value r (cls_val_process Mkt pf) 0)\n     (\\<lambda>w. initial_value pf)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>w.\n       w \\<in> space N \\<Longrightarrow>\n       discounted_value r (cls_val_process Mkt pf) 0 w = initial_value pf", "fix w"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>w.\n       w \\<in> space N \\<Longrightarrow>\n       discounted_value r (cls_val_process Mkt pf) 0 w = initial_value pf", "assume \"w\\<in> space N\""], ["proof (state)\nthis:\n  w \\<in> space N\n\ngoal (1 subgoal):\n 1. \\<And>w.\n       w \\<in> space N \\<Longrightarrow>\n       discounted_value r (cls_val_process Mkt pf) 0 w = initial_value pf", "have \"discounted_value r (cls_val_process Mkt pf) 0 w = cls_val_process Mkt pf 0 w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. discounted_value r (cls_val_process Mkt pf) 0 w =\n    cls_val_process Mkt pf 0 w", "by (simp add:discounted_init)"], ["proof (state)\nthis:\n  discounted_value r (cls_val_process Mkt pf) 0 w =\n  cls_val_process Mkt pf 0 w\n\ngoal (1 subgoal):\n 1. \\<And>w.\n       w \\<in> space N \\<Longrightarrow>\n       discounted_value r (cls_val_process Mkt pf) 0 w = initial_value pf", "also"], ["proof (state)\nthis:\n  discounted_value r (cls_val_process Mkt pf) 0 w =\n  cls_val_process Mkt pf 0 w\n\ngoal (1 subgoal):\n 1. \\<And>w.\n       w \\<in> space N \\<Longrightarrow>\n       discounted_value r (cls_val_process Mkt pf) 0 w = initial_value pf", "have \"... = val_process Mkt pf 0 w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cls_val_process Mkt pf 0 w = val_process Mkt pf 0 w", "unfolding cls_val_process_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (if \\<not> portfolio pf then \\<lambda>n w. 0 else up_cl_proc Mkt pf) 0\n     w =\n    val_process Mkt pf 0 w", "using assms"], ["proof (prove)\nusing this:\n  risk_neutral_prob N\n  filt_equiv F M N\n  replicating_portfolio pf pyf matur\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        integrable N (\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w)\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        integrable N\n         (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w)\n  viable_market Mkt\n  sets (F 0) = {{}, space M}\n  pyf \\<in> borel_measurable (F matur)\n\ngoal (1 subgoal):\n 1. (if \\<not> portfolio pf then \\<lambda>n w. 0 else up_cl_proc Mkt pf) 0\n     w =\n    val_process Mkt pf 0 w", "unfolding replicating_portfolio_def stock_portfolio_def"], ["proof (prove)\nusing this:\n  risk_neutral_prob N\n  filt_equiv F M N\n  (portfolio pf \\<and> support_set pf \\<subseteq> stocks Mkt) \\<and>\n  trading_strategy pf \\<and>\n  self_financing Mkt pf \\<and> AEeq M (cls_val_process Mkt pf matur) pyf\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        integrable N (\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w)\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        integrable N\n         (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w)\n  viable_market Mkt\n  sets (F 0) = {{}, space M}\n  pyf \\<in> borel_measurable (F matur)\n\ngoal (1 subgoal):\n 1. (if \\<not> portfolio pf then \\<lambda>n w. 0 else up_cl_proc Mkt pf) 0\n     w =\n    val_process Mkt pf 0 w", "by simp"], ["proof (state)\nthis:\n  cls_val_process Mkt pf 0 w = val_process Mkt pf 0 w\n\ngoal (1 subgoal):\n 1. \\<And>w.\n       w \\<in> space N \\<Longrightarrow>\n       discounted_value r (cls_val_process Mkt pf) 0 w = initial_value pf", "also"], ["proof (state)\nthis:\n  cls_val_process Mkt pf 0 w = val_process Mkt pf 0 w\n\ngoal (1 subgoal):\n 1. \\<And>w.\n       w \\<in> space N \\<Longrightarrow>\n       discounted_value r (cls_val_process Mkt pf) 0 w = initial_value pf", "have \"... = initial_value pf\""], ["proof (prove)\ngoal (1 subgoal):\n 1. val_process Mkt pf 0 w = initial_value pf", "using assms"], ["proof (prove)\nusing this:\n  risk_neutral_prob N\n  filt_equiv F M N\n  replicating_portfolio pf pyf matur\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        integrable N (\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w)\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        integrable N\n         (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w)\n  viable_market Mkt\n  sets (F 0) = {{}, space M}\n  pyf \\<in> borel_measurable (F matur)\n\ngoal (1 subgoal):\n 1. val_process Mkt pf 0 w = initial_value pf", "unfolding replicating_portfolio_def"], ["proof (prove)\nusing this:\n  risk_neutral_prob N\n  filt_equiv F M N\n  stock_portfolio Mkt pf \\<and>\n  trading_strategy pf \\<and>\n  self_financing Mkt pf \\<and> AEeq M (cls_val_process Mkt pf matur) pyf\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        integrable N (\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w)\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        integrable N\n         (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w)\n  viable_market Mkt\n  sets (F 0) = {{}, space M}\n  pyf \\<in> borel_measurable (F matur)\n\ngoal (1 subgoal):\n 1. val_process Mkt pf 0 w = initial_value pf", "using \\<open>w\\<in> space N\\<close>"], ["proof (prove)\nusing this:\n  risk_neutral_prob N\n  filt_equiv F M N\n  stock_portfolio Mkt pf \\<and>\n  trading_strategy pf \\<and>\n  self_financing Mkt pf \\<and> AEeq M (cls_val_process Mkt pf matur) pyf\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        integrable N (\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w)\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        integrable N\n         (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w)\n  viable_market Mkt\n  sets (F 0) = {{}, space M}\n  pyf \\<in> borel_measurable (F matur)\n  w \\<in> space N\n\ngoal (1 subgoal):\n 1. val_process Mkt pf 0 w = initial_value pf", "by (metis (no_types, lifting) support_adapt_def filt_equiv_space initial_valueI readable stock_portfolio_def subsetCE)"], ["proof (state)\nthis:\n  val_process Mkt pf 0 w = initial_value pf\n\ngoal (1 subgoal):\n 1. \\<And>w.\n       w \\<in> space N \\<Longrightarrow>\n       discounted_value r (cls_val_process Mkt pf) 0 w = initial_value pf", "finally"], ["proof (chain)\npicking this:\n  discounted_value r (cls_val_process Mkt pf) 0 w = initial_value pf", "show \"discounted_value r (cls_val_process Mkt pf) 0 w = initial_value pf\""], ["proof (prove)\nusing this:\n  discounted_value r (cls_val_process Mkt pf) 0 w = initial_value pf\n\ngoal (1 subgoal):\n 1. discounted_value r (cls_val_process Mkt pf) 0 w = initial_value pf", "."], ["proof (state)\nthis:\n  discounted_value r (cls_val_process Mkt pf) 0 w = initial_value pf\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  AEeq N (discounted_value r (cls_val_process Mkt pf) 0)\n   (\\<lambda>w. initial_value pf)\n\ngoal (1 subgoal):\n 1. fair_price Mkt\n     (integral\\<^sup>L N (discounted_value r (\\<lambda>m. pyf) matur)) pyf\n     matur", "finally"], ["proof (chain)\npicking this:\n  AEeq N\n   (real_cond_exp N (F 0)\n     (discounted_value r (cls_val_process Mkt pf) matur))\n   (\\<lambda>x. initial_value pf)", "have \"AE w in N. (real_cond_exp N (F 0) (discounted_value r (cls_val_process Mkt pf) matur)) w =\n    initial_value pf\""], ["proof (prove)\nusing this:\n  AEeq N\n   (real_cond_exp N (F 0)\n     (discounted_value r (cls_val_process Mkt pf) matur))\n   (\\<lambda>x. initial_value pf)\n\ngoal (1 subgoal):\n 1. AEeq N\n     (real_cond_exp N (F 0)\n       (discounted_value r (cls_val_process Mkt pf) matur))\n     (\\<lambda>w. initial_value pf)", "."], ["proof (state)\nthis:\n  AEeq N\n   (real_cond_exp N (F 0)\n     (discounted_value r (cls_val_process Mkt pf) matur))\n   (\\<lambda>w. initial_value pf)\n\ngoal (1 subgoal):\n 1. fair_price Mkt\n     (integral\\<^sup>L N (discounted_value r (\\<lambda>m. pyf) matur)) pyf\n     matur", "moreover"], ["proof (state)\nthis:\n  AEeq N\n   (real_cond_exp N (F 0)\n     (discounted_value r (cls_val_process Mkt pf) matur))\n   (\\<lambda>w. initial_value pf)\n\ngoal (1 subgoal):\n 1. fair_price Mkt\n     (integral\\<^sup>L N (discounted_value r (\\<lambda>m. pyf) matur)) pyf\n     matur", "have \"\\<forall>w\\<in> space N. (real_cond_exp N (F 0) (discounted_value r (cls_val_process Mkt pf) matur)) w =\n    prob_space.expectation N (discounted_value r (cls_val_process Mkt pf) matur)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>w\\<in>space N.\n       real_cond_exp N (F 0)\n        (discounted_value r (cls_val_process Mkt pf) matur) w =\n       integral\\<^sup>L N\n        (discounted_value r (cls_val_process Mkt pf) matur)", "proof (rule prob_space.trivial_subalg_cond_expect_eq)"], ["proof (state)\ngoal (4 subgoals):\n 1. prob_space N\n 2. subalgebra N (F 0)\n 3. sets (F 0) = {{}, space N}\n 4. integrable N (discounted_value r (cls_val_process Mkt pf) matur)", "show \"prob_space N\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prob_space N", "using assms"], ["proof (prove)\nusing this:\n  risk_neutral_prob N\n  filt_equiv F M N\n  replicating_portfolio pf pyf matur\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        integrable N (\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w)\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        integrable N\n         (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w)\n  viable_market Mkt\n  sets (F 0) = {{}, space M}\n  pyf \\<in> borel_measurable (F matur)\n\ngoal (1 subgoal):\n 1. prob_space N", "unfolding risk_neutral_prob_def"], ["proof (prove)\nusing this:\n  prob_space N \\<and>\n  (\\<forall>asset\\<in>stocks Mkt.\n      martingale N F (discounted_value r (prices Mkt asset)))\n  filt_equiv F M N\n  replicating_portfolio pf pyf matur\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        integrable N (\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w)\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        integrable N\n         (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w)\n  viable_market Mkt\n  sets (F 0) = {{}, space M}\n  pyf \\<in> borel_measurable (F matur)\n\ngoal (1 subgoal):\n 1. prob_space N", "by simp"], ["proof (state)\nthis:\n  prob_space N\n\ngoal (3 subgoals):\n 1. subalgebra N (F 0)\n 2. sets (F 0) = {{}, space N}\n 3. integrable N (discounted_value r (cls_val_process Mkt pf) matur)", "show \"subalgebra N (F 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subalgebra N (F 0)", "using \\<open>prob_space N\\<close> filtrated_prob_space.filtration fn filtrationE1"], ["proof (prove)\nusing this:\n  prob_space N\n  filtrated_prob_space ?M ?F \\<Longrightarrow> Filtration.filtration ?M ?F\n  filtrated_prob_space N F\n  Filtration.filtration ?M ?F \\<Longrightarrow> subalgebra ?M (?F ?t)\n\ngoal (1 subgoal):\n 1. subalgebra N (F 0)", "by blast"], ["proof (state)\nthis:\n  subalgebra N (F 0)\n\ngoal (2 subgoals):\n 1. sets (F 0) = {{}, space N}\n 2. integrable N (discounted_value r (cls_val_process Mkt pf) matur)", "show \"sets (F 0) = {{}, space N}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sets (F 0) = {{}, space N}", "using assms"], ["proof (prove)\nusing this:\n  risk_neutral_prob N\n  filt_equiv F M N\n  replicating_portfolio pf pyf matur\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        integrable N (\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w)\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        integrable N\n         (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w)\n  viable_market Mkt\n  sets (F 0) = {{}, space M}\n  pyf \\<in> borel_measurable (F matur)\n\ngoal (1 subgoal):\n 1. sets (F 0) = {{}, space N}", "by (simp add:filt_equiv_space)"], ["proof (state)\nthis:\n  sets (F 0) = {{}, space N}\n\ngoal (1 subgoal):\n 1. integrable N (discounted_value r (cls_val_process Mkt pf) matur)", "show \"integrable N (discounted_value r (cls_val_process Mkt pf) matur)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. integrable N (discounted_value r (cls_val_process Mkt pf) matur)", "proof (rule discounted_integrable)"], ["proof (state)\ngoal (3 subgoals):\n 1. integrable N (cls_val_process Mkt pf matur)\n 2. - 1 < r\n 3. space N = space M", "show \"space N = space M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. space N = space M", "using assms"], ["proof (prove)\nusing this:\n  risk_neutral_prob N\n  filt_equiv F M N\n  replicating_portfolio pf pyf matur\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        integrable N (\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w)\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        integrable N\n         (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w)\n  viable_market Mkt\n  sets (F 0) = {{}, space M}\n  pyf \\<in> borel_measurable (F matur)\n\ngoal (1 subgoal):\n 1. space N = space M", "by (simp add:filt_equiv_space)"], ["proof (state)\nthis:\n  space N = space M\n\ngoal (2 subgoals):\n 1. integrable N (cls_val_process Mkt pf matur)\n 2. - 1 < r", "show \"integrable N (cls_val_process Mkt pf matur)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. integrable N (cls_val_process Mkt pf matur)", "using assms"], ["proof (prove)\nusing this:\n  risk_neutral_prob N\n  filt_equiv F M N\n  replicating_portfolio pf pyf matur\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        integrable N (\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w)\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        integrable N\n         (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w)\n  viable_market Mkt\n  sets (F 0) = {{}, space M}\n  pyf \\<in> borel_measurable (F matur)\n\ngoal (1 subgoal):\n 1. integrable N (cls_val_process Mkt pf matur)", "unfolding replicating_portfolio_def"], ["proof (prove)\nusing this:\n  risk_neutral_prob N\n  filt_equiv F M N\n  stock_portfolio Mkt pf \\<and>\n  trading_strategy pf \\<and>\n  self_financing Mkt pf \\<and> AEeq M (cls_val_process Mkt pf matur) pyf\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        integrable N (\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w)\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        integrable N\n         (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w)\n  viable_market Mkt\n  sets (F 0) = {{}, space M}\n  pyf \\<in> borel_measurable (F matur)\n\ngoal (1 subgoal):\n 1. integrable N (cls_val_process Mkt pf matur)", "by (simp add: integrable_self_fin_uvp)"], ["proof (state)\nthis:\n  integrable N (cls_val_process Mkt pf matur)\n\ngoal (1 subgoal):\n 1. - 1 < r", "show \"-1 < r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - 1 < r", "using acceptable_rate"], ["proof (prove)\nusing this:\n  - 1 < r\n\ngoal (1 subgoal):\n 1. - 1 < r", "by simp"], ["proof (state)\nthis:\n  - 1 < r\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  integrable N (discounted_value r (cls_val_process Mkt pf) matur)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>w\\<in>space N.\n     real_cond_exp N (F 0)\n      (discounted_value r (cls_val_process Mkt pf) matur) w =\n     integral\\<^sup>L N (discounted_value r (cls_val_process Mkt pf) matur)\n\ngoal (1 subgoal):\n 1. fair_price Mkt\n     (integral\\<^sup>L N (discounted_value r (\\<lambda>m. pyf) matur)) pyf\n     matur", "ultimately"], ["proof (chain)\npicking this:\n  AEeq N\n   (real_cond_exp N (F 0)\n     (discounted_value r (cls_val_process Mkt pf) matur))\n   (\\<lambda>w. initial_value pf)\n  \\<forall>w\\<in>space N.\n     real_cond_exp N (F 0)\n      (discounted_value r (cls_val_process Mkt pf) matur) w =\n     integral\\<^sup>L N (discounted_value r (cls_val_process Mkt pf) matur)", "have \"AE w in N. prob_space.expectation N (discounted_value r (cls_val_process Mkt pf) matur) =\n     initial_value pf\""], ["proof (prove)\nusing this:\n  AEeq N\n   (real_cond_exp N (F 0)\n     (discounted_value r (cls_val_process Mkt pf) matur))\n   (\\<lambda>w. initial_value pf)\n  \\<forall>w\\<in>space N.\n     real_cond_exp N (F 0)\n      (discounted_value r (cls_val_process Mkt pf) matur) w =\n     integral\\<^sup>L N (discounted_value r (cls_val_process Mkt pf) matur)\n\ngoal (1 subgoal):\n 1. AEeq N\n     (\\<lambda>w.\n         integral\\<^sup>L N\n          (discounted_value r (cls_val_process Mkt pf) matur))\n     (\\<lambda>w. initial_value pf)", "by simp"], ["proof (state)\nthis:\n  AEeq N\n   (\\<lambda>w.\n       integral\\<^sup>L N\n        (discounted_value r (cls_val_process Mkt pf) matur))\n   (\\<lambda>w. initial_value pf)\n\ngoal (1 subgoal):\n 1. fair_price Mkt\n     (integral\\<^sup>L N (discounted_value r (\\<lambda>m. pyf) matur)) pyf\n     matur", "hence \"prob_space.expectation N (discounted_value r (cls_val_process Mkt pf) matur) =\n    initial_value pf\""], ["proof (prove)\nusing this:\n  AEeq N\n   (\\<lambda>w.\n       integral\\<^sup>L N\n        (discounted_value r (cls_val_process Mkt pf) matur))\n   (\\<lambda>w. initial_value pf)\n\ngoal (1 subgoal):\n 1. integral\\<^sup>L N (discounted_value r (cls_val_process Mkt pf) matur) =\n    initial_value pf", "using assms"], ["proof (prove)\nusing this:\n  AEeq N\n   (\\<lambda>w.\n       integral\\<^sup>L N\n        (discounted_value r (cls_val_process Mkt pf) matur))\n   (\\<lambda>w. initial_value pf)\n  risk_neutral_prob N\n  filt_equiv F M N\n  replicating_portfolio pf pyf matur\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        integrable N (\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w)\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        integrable N\n         (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w)\n  viable_market Mkt\n  sets (F 0) = {{}, space M}\n  pyf \\<in> borel_measurable (F matur)\n\ngoal (1 subgoal):\n 1. integral\\<^sup>L N (discounted_value r (cls_val_process Mkt pf) matur) =\n    initial_value pf", "unfolding risk_neutral_prob_def"], ["proof (prove)\nusing this:\n  AEeq N\n   (\\<lambda>w.\n       integral\\<^sup>L N\n        (discounted_value r (cls_val_process Mkt pf) matur))\n   (\\<lambda>w. initial_value pf)\n  prob_space N \\<and>\n  (\\<forall>asset\\<in>stocks Mkt.\n      martingale N F (discounted_value r (prices Mkt asset)))\n  filt_equiv F M N\n  replicating_portfolio pf pyf matur\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        integrable N (\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w)\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        integrable N\n         (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w)\n  viable_market Mkt\n  sets (F 0) = {{}, space M}\n  pyf \\<in> borel_measurable (F matur)\n\ngoal (1 subgoal):\n 1. integral\\<^sup>L N (discounted_value r (cls_val_process Mkt pf) matur) =\n    initial_value pf", "using  prob_space.emeasure_space_1[of N]\n    AE_eq_cst[of _ _ N]"], ["proof (prove)\nusing this:\n  AEeq N\n   (\\<lambda>w.\n       integral\\<^sup>L N\n        (discounted_value r (cls_val_process Mkt pf) matur))\n   (\\<lambda>w. initial_value pf)\n  prob_space N \\<and>\n  (\\<forall>asset\\<in>stocks Mkt.\n      martingale N F (discounted_value r (prices Mkt asset)))\n  filt_equiv F M N\n  replicating_portfolio pf pyf matur\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        integrable N (\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w)\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        integrable N\n         (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w)\n  viable_market Mkt\n  sets (F 0) = {{}, space M}\n  pyf \\<in> borel_measurable (F matur)\n  prob_space N \\<Longrightarrow> emeasure N (space N) = 1\n  \\<lbrakk>AEeq N (\\<lambda>w. ?c) (\\<lambda>w. ?d);\n   emeasure N (space N) \\<noteq> 0\\<rbrakk>\n  \\<Longrightarrow> ?c = ?d\n\ngoal (1 subgoal):\n 1. integral\\<^sup>L N (discounted_value r (cls_val_process Mkt pf) matur) =\n    initial_value pf", "by simp"], ["proof (state)\nthis:\n  integral\\<^sup>L N (discounted_value r (cls_val_process Mkt pf) matur) =\n  initial_value pf\n\ngoal (1 subgoal):\n 1. fair_price Mkt\n     (integral\\<^sup>L N (discounted_value r (\\<lambda>m. pyf) matur)) pyf\n     matur", "moreover"], ["proof (state)\nthis:\n  integral\\<^sup>L N (discounted_value r (cls_val_process Mkt pf) matur) =\n  initial_value pf\n\ngoal (1 subgoal):\n 1. fair_price Mkt\n     (integral\\<^sup>L N (discounted_value r (\\<lambda>m. pyf) matur)) pyf\n     matur", "have \"prob_space.expectation N (discounted_value r (cls_val_process Mkt pf) matur) =\n    prob_space.expectation N (discounted_value r (\\<lambda>m. pyf) matur)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. integral\\<^sup>L N (discounted_value r (cls_val_process Mkt pf) matur) =\n    integral\\<^sup>L N (discounted_value r (\\<lambda>m. pyf) matur)", "proof (rule integral_cong_AE)"], ["proof (state)\ngoal (3 subgoals):\n 1. discounted_value r (cls_val_process Mkt pf) matur\n    \\<in> borel_measurable N\n 2. discounted_value r (\\<lambda>m. pyf) matur \\<in> borel_measurable N\n 3. AEeq N (discounted_value r (cls_val_process Mkt pf) matur)\n     (discounted_value r (\\<lambda>m. pyf) matur)", "show \"AEeq N (discounted_value r (cls_val_process Mkt pf) matur) (discounted_value r (\\<lambda>m. pyf) matur)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. AEeq N (discounted_value r (cls_val_process Mkt pf) matur)\n     (discounted_value r (\\<lambda>m. pyf) matur)", "using disc"], ["proof (prove)\nusing this:\n  AEeq N (discounted_value r (cls_val_process Mkt pf) matur)\n   (discounted_value r (\\<lambda>m. pyf) matur)\n\ngoal (1 subgoal):\n 1. AEeq N (discounted_value r (cls_val_process Mkt pf) matur)\n     (discounted_value r (\\<lambda>m. pyf) matur)", "by simp"], ["proof (state)\nthis:\n  AEeq N (discounted_value r (cls_val_process Mkt pf) matur)\n   (discounted_value r (\\<lambda>m. pyf) matur)\n\ngoal (2 subgoals):\n 1. discounted_value r (cls_val_process Mkt pf) matur\n    \\<in> borel_measurable N\n 2. discounted_value r (\\<lambda>m. pyf) matur \\<in> borel_measurable N", "show \"discounted_value r (\\<lambda>m. pyf) matur \\<in> borel_measurable N\""], ["proof (prove)\ngoal (1 subgoal):\n 1. discounted_value r (\\<lambda>m. pyf) matur \\<in> borel_measurable N", "using \\<open>discounted_value r (\\<lambda>m. pyf) matur \\<in> borel_measurable N\\<close>"], ["proof (prove)\nusing this:\n  discounted_value r (\\<lambda>m. pyf) matur \\<in> borel_measurable N\n\ngoal (1 subgoal):\n 1. discounted_value r (\\<lambda>m. pyf) matur \\<in> borel_measurable N", "."], ["proof (state)\nthis:\n  discounted_value r (\\<lambda>m. pyf) matur \\<in> borel_measurable N\n\ngoal (1 subgoal):\n 1. discounted_value r (cls_val_process Mkt pf) matur\n    \\<in> borel_measurable N", "show \"discounted_value r (cls_val_process Mkt pf) matur \\<in> borel_measurable N\""], ["proof (prove)\ngoal (1 subgoal):\n 1. discounted_value r (cls_val_process Mkt pf) matur\n    \\<in> borel_measurable N", "using \\<open>discounted_value r (cls_val_process Mkt pf) matur \\<in> borel_measurable N\\<close>"], ["proof (prove)\nusing this:\n  discounted_value r (cls_val_process Mkt pf) matur \\<in> borel_measurable N\n\ngoal (1 subgoal):\n 1. discounted_value r (cls_val_process Mkt pf) matur\n    \\<in> borel_measurable N", "."], ["proof (state)\nthis:\n  discounted_value r (cls_val_process Mkt pf) matur \\<in> borel_measurable N\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  integral\\<^sup>L N (discounted_value r (cls_val_process Mkt pf) matur) =\n  integral\\<^sup>L N (discounted_value r (\\<lambda>m. pyf) matur)\n\ngoal (1 subgoal):\n 1. fair_price Mkt\n     (integral\\<^sup>L N (discounted_value r (\\<lambda>m. pyf) matur)) pyf\n     matur", "ultimately"], ["proof (chain)\npicking this:\n  integral\\<^sup>L N (discounted_value r (cls_val_process Mkt pf) matur) =\n  initial_value pf\n  integral\\<^sup>L N (discounted_value r (cls_val_process Mkt pf) matur) =\n  integral\\<^sup>L N (discounted_value r (\\<lambda>m. pyf) matur)", "have \"prob_space.expectation N (discounted_value r (\\<lambda>m. pyf) matur) = initial_value pf\""], ["proof (prove)\nusing this:\n  integral\\<^sup>L N (discounted_value r (cls_val_process Mkt pf) matur) =\n  initial_value pf\n  integral\\<^sup>L N (discounted_value r (cls_val_process Mkt pf) matur) =\n  integral\\<^sup>L N (discounted_value r (\\<lambda>m. pyf) matur)\n\ngoal (1 subgoal):\n 1. integral\\<^sup>L N (discounted_value r (\\<lambda>m. pyf) matur) =\n    initial_value pf", "by simp"], ["proof (state)\nthis:\n  integral\\<^sup>L N (discounted_value r (\\<lambda>m. pyf) matur) =\n  initial_value pf\n\ngoal (1 subgoal):\n 1. fair_price Mkt\n     (integral\\<^sup>L N (discounted_value r (\\<lambda>m. pyf) matur)) pyf\n     matur", "thus ?thesis"], ["proof (prove)\nusing this:\n  integral\\<^sup>L N (discounted_value r (\\<lambda>m. pyf) matur) =\n  initial_value pf\n\ngoal (1 subgoal):\n 1. fair_price Mkt\n     (integral\\<^sup>L N (discounted_value r (\\<lambda>m. pyf) matur)) pyf\n     matur", "using assms"], ["proof (prove)\nusing this:\n  integral\\<^sup>L N (discounted_value r (\\<lambda>m. pyf) matur) =\n  initial_value pf\n  risk_neutral_prob N\n  filt_equiv F M N\n  replicating_portfolio pf pyf matur\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        integrable N (\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w)\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        integrable N\n         (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w)\n  viable_market Mkt\n  sets (F 0) = {{}, space M}\n  pyf \\<in> borel_measurable (F matur)\n\ngoal (1 subgoal):\n 1. fair_price Mkt\n     (integral\\<^sup>L N (discounted_value r (\\<lambda>m. pyf) matur)) pyf\n     matur", "by (metis (full_types) support_adapt_def disc_equity_market.replicating_portfolio_def disc_equity_market_axioms\n        readable replicating_fair_price stock_portfolio_def subsetCE)"], ["proof (state)\nthis:\n  fair_price Mkt\n   (integral\\<^sup>L N (discounted_value r (\\<lambda>m. pyf) matur)) pyf\n   matur\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in rfr_disc_equity_market) replicating_expectation_finite:\n  assumes \"risk_neutral_prob N\"\n  and \"filt_equiv F M N\"\n  and \"replicating_portfolio pf pyf matur\"\n  and \"\\<forall>n. \\<forall> asset \\<in> support_set pf. finite (prices Mkt asset n `(space M))\"\n  and \"\\<forall>n. \\<forall> asset \\<in> support_set pf. finite (pf asset n `(space M))\"\n  and \"viable_market Mkt\"\n  and \"sets (F 0) = {{}, space M}\"\n  and \"pyf  \\<in> borel_measurable (F matur)\"\nshows \"fair_price Mkt (prob_space.expectation N (discounted_value r (\\<lambda>m. pyf) matur)) pyf matur\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fair_price Mkt\n     (integral\\<^sup>L N (discounted_value r (\\<lambda>m. pyf) matur)) pyf\n     matur", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. fair_price Mkt\n     (integral\\<^sup>L N (discounted_value r (\\<lambda>m. pyf) matur)) pyf\n     matur", "have  \"\\<forall>n. \\<forall> asset \\<in> support_set pf. integrable N (\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n.\n       \\<forall>asset\\<in>support_set pf.\n          integrable N\n           (\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w)", "proof (rule finite_integrable_vp, (auto simp add:assms))"], ["proof (state)\ngoal (3 subgoals):\n 1. prob_space N\n 2. trading_strategy pf\n 3. \\<And>n asset.\n       asset \\<in> support_set pf \\<Longrightarrow>\n       random_variable borel (prices Mkt asset n)", "show \"prob_space N\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prob_space N", "using assms"], ["proof (prove)\nusing this:\n  risk_neutral_prob N\n  filt_equiv F M N\n  replicating_portfolio pf pyf matur\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        finite (prices Mkt asset n ` space M)\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf. finite (pf asset n ` space M)\n  viable_market Mkt\n  sets (F 0) = {{}, space M}\n  pyf \\<in> borel_measurable (F matur)\n\ngoal (1 subgoal):\n 1. prob_space N", "unfolding risk_neutral_prob_def"], ["proof (prove)\nusing this:\n  prob_space N \\<and>\n  (\\<forall>asset\\<in>stocks Mkt.\n      martingale N F (discounted_value r (prices Mkt asset)))\n  filt_equiv F M N\n  replicating_portfolio pf pyf matur\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        finite (prices Mkt asset n ` space M)\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf. finite (pf asset n ` space M)\n  viable_market Mkt\n  sets (F 0) = {{}, space M}\n  pyf \\<in> borel_measurable (F matur)\n\ngoal (1 subgoal):\n 1. prob_space N", "by simp"], ["proof (state)\nthis:\n  prob_space N\n\ngoal (2 subgoals):\n 1. trading_strategy pf\n 2. \\<And>n asset.\n       asset \\<in> support_set pf \\<Longrightarrow>\n       random_variable borel (prices Mkt asset n)", "show \"trading_strategy pf\""], ["proof (prove)\ngoal (1 subgoal):\n 1. trading_strategy pf", "using assms"], ["proof (prove)\nusing this:\n  risk_neutral_prob N\n  filt_equiv F M N\n  replicating_portfolio pf pyf matur\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        finite (prices Mkt asset n ` space M)\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf. finite (pf asset n ` space M)\n  viable_market Mkt\n  sets (F 0) = {{}, space M}\n  pyf \\<in> borel_measurable (F matur)\n\ngoal (1 subgoal):\n 1. trading_strategy pf", "unfolding replicating_portfolio_def"], ["proof (prove)\nusing this:\n  risk_neutral_prob N\n  filt_equiv F M N\n  stock_portfolio Mkt pf \\<and>\n  trading_strategy pf \\<and>\n  self_financing Mkt pf \\<and> AEeq M (cls_val_process Mkt pf matur) pyf\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        finite (prices Mkt asset n ` space M)\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf. finite (pf asset n ` space M)\n  viable_market Mkt\n  sets (F 0) = {{}, space M}\n  pyf \\<in> borel_measurable (F matur)\n\ngoal (1 subgoal):\n 1. trading_strategy pf", "by simp"], ["proof (state)\nthis:\n  trading_strategy pf\n\ngoal (1 subgoal):\n 1. \\<And>n asset.\n       asset \\<in> support_set pf \\<Longrightarrow>\n       random_variable borel (prices Mkt asset n)", "show \"\\<And>n asset. asset \\<in> support_set pf \\<Longrightarrow> random_variable borel (prices Mkt asset n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n asset.\n       asset \\<in> support_set pf \\<Longrightarrow>\n       random_variable borel (prices Mkt asset n)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n asset.\n       asset \\<in> support_set pf \\<Longrightarrow>\n       random_variable borel (prices Mkt asset n)", "fix n"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n asset.\n       asset \\<in> support_set pf \\<Longrightarrow>\n       random_variable borel (prices Mkt asset n)", "fix asset"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n asset.\n       asset \\<in> support_set pf \\<Longrightarrow>\n       random_variable borel (prices Mkt asset n)", "assume \"asset \\<in> support_set pf\""], ["proof (state)\nthis:\n  asset \\<in> support_set pf\n\ngoal (1 subgoal):\n 1. \\<And>n asset.\n       asset \\<in> support_set pf \\<Longrightarrow>\n       random_variable borel (prices Mkt asset n)", "show \"random_variable borel (prices Mkt asset n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. random_variable borel (prices Mkt asset n)", "using assms"], ["proof (prove)\nusing this:\n  risk_neutral_prob N\n  filt_equiv F M N\n  replicating_portfolio pf pyf matur\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        finite (prices Mkt asset n ` space M)\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf. finite (pf asset n ` space M)\n  viable_market Mkt\n  sets (F 0) = {{}, space M}\n  pyf \\<in> borel_measurable (F matur)\n\ngoal (1 subgoal):\n 1. random_variable borel (prices Mkt asset n)", "unfolding replicating_portfolio_def stock_portfolio_def  adapt_stoch_proc_def"], ["proof (prove)\nusing this:\n  risk_neutral_prob N\n  filt_equiv F M N\n  (portfolio pf \\<and> support_set pf \\<subseteq> stocks Mkt) \\<and>\n  trading_strategy pf \\<and>\n  self_financing Mkt pf \\<and> AEeq M (cls_val_process Mkt pf matur) pyf\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        finite (prices Mkt asset n ` space M)\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf. finite (pf asset n ` space M)\n  viable_market Mkt\n  sets (F 0) = {{}, space M}\n  pyf \\<in> borel_measurable (F matur)\n\ngoal (1 subgoal):\n 1. random_variable borel (prices Mkt asset n)", "using readable"], ["proof (prove)\nusing this:\n  risk_neutral_prob N\n  filt_equiv F M N\n  (portfolio pf \\<and> support_set pf \\<subseteq> stocks Mkt) \\<and>\n  trading_strategy pf \\<and>\n  self_financing Mkt pf \\<and> AEeq M (cls_val_process Mkt pf matur) pyf\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        finite (prices Mkt asset n ` space M)\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf. finite (pf asset n ` space M)\n  viable_market Mkt\n  sets (F 0) = {{}, space M}\n  pyf \\<in> borel_measurable (F matur)\n  \\<forall>asset\\<in>stocks Mkt. borel_adapt_stoch_proc F (prices Mkt asset)\n\ngoal (1 subgoal):\n 1. random_variable borel (prices Mkt asset n)", "by (meson \\<open>asset \\<in> support_set pf\\<close> adapt_stoch_proc_borel_measurable subsetCE)"], ["proof (state)\nthis:\n  random_variable borel (prices Mkt asset n)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?asset13 \\<in> support_set pf \\<Longrightarrow>\n  random_variable borel (prices Mkt ?asset13 ?n13)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        integrable N (\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w)\n\ngoal (1 subgoal):\n 1. fair_price Mkt\n     (integral\\<^sup>L N (discounted_value r (\\<lambda>m. pyf) matur)) pyf\n     matur", "moreover"], ["proof (state)\nthis:\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        integrable N (\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w)\n\ngoal (1 subgoal):\n 1. fair_price Mkt\n     (integral\\<^sup>L N (discounted_value r (\\<lambda>m. pyf) matur)) pyf\n     matur", "have \"\\<forall>n. \\<forall> asset \\<in> support_set pf. integrable N (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n.\n       \\<forall>asset\\<in>support_set pf.\n          integrable N\n           (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w)", "proof (rule finite_integrable_uvp, (auto simp add:assms))"], ["proof (state)\ngoal (3 subgoals):\n 1. prob_space N\n 2. trading_strategy pf\n 3. \\<And>n asset.\n       asset \\<in> support_set pf \\<Longrightarrow>\n       random_variable borel (prices Mkt asset n)", "show \"prob_space N\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prob_space N", "using assms"], ["proof (prove)\nusing this:\n  risk_neutral_prob N\n  filt_equiv F M N\n  replicating_portfolio pf pyf matur\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        finite (prices Mkt asset n ` space M)\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf. finite (pf asset n ` space M)\n  viable_market Mkt\n  sets (F 0) = {{}, space M}\n  pyf \\<in> borel_measurable (F matur)\n\ngoal (1 subgoal):\n 1. prob_space N", "unfolding risk_neutral_prob_def"], ["proof (prove)\nusing this:\n  prob_space N \\<and>\n  (\\<forall>asset\\<in>stocks Mkt.\n      martingale N F (discounted_value r (prices Mkt asset)))\n  filt_equiv F M N\n  replicating_portfolio pf pyf matur\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        finite (prices Mkt asset n ` space M)\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf. finite (pf asset n ` space M)\n  viable_market Mkt\n  sets (F 0) = {{}, space M}\n  pyf \\<in> borel_measurable (F matur)\n\ngoal (1 subgoal):\n 1. prob_space N", "by simp"], ["proof (state)\nthis:\n  prob_space N\n\ngoal (2 subgoals):\n 1. trading_strategy pf\n 2. \\<And>n asset.\n       asset \\<in> support_set pf \\<Longrightarrow>\n       random_variable borel (prices Mkt asset n)", "show \"trading_strategy pf\""], ["proof (prove)\ngoal (1 subgoal):\n 1. trading_strategy pf", "using assms"], ["proof (prove)\nusing this:\n  risk_neutral_prob N\n  filt_equiv F M N\n  replicating_portfolio pf pyf matur\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        finite (prices Mkt asset n ` space M)\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf. finite (pf asset n ` space M)\n  viable_market Mkt\n  sets (F 0) = {{}, space M}\n  pyf \\<in> borel_measurable (F matur)\n\ngoal (1 subgoal):\n 1. trading_strategy pf", "unfolding replicating_portfolio_def"], ["proof (prove)\nusing this:\n  risk_neutral_prob N\n  filt_equiv F M N\n  stock_portfolio Mkt pf \\<and>\n  trading_strategy pf \\<and>\n  self_financing Mkt pf \\<and> AEeq M (cls_val_process Mkt pf matur) pyf\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        finite (prices Mkt asset n ` space M)\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf. finite (pf asset n ` space M)\n  viable_market Mkt\n  sets (F 0) = {{}, space M}\n  pyf \\<in> borel_measurable (F matur)\n\ngoal (1 subgoal):\n 1. trading_strategy pf", "by simp"], ["proof (state)\nthis:\n  trading_strategy pf\n\ngoal (1 subgoal):\n 1. \\<And>n asset.\n       asset \\<in> support_set pf \\<Longrightarrow>\n       random_variable borel (prices Mkt asset n)", "show \"\\<And>n asset. asset \\<in> support_set pf \\<Longrightarrow> random_variable borel (prices Mkt asset n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n asset.\n       asset \\<in> support_set pf \\<Longrightarrow>\n       random_variable borel (prices Mkt asset n)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n asset.\n       asset \\<in> support_set pf \\<Longrightarrow>\n       random_variable borel (prices Mkt asset n)", "fix n"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n asset.\n       asset \\<in> support_set pf \\<Longrightarrow>\n       random_variable borel (prices Mkt asset n)", "fix asset"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n asset.\n       asset \\<in> support_set pf \\<Longrightarrow>\n       random_variable borel (prices Mkt asset n)", "assume \"asset \\<in> support_set pf\""], ["proof (state)\nthis:\n  asset \\<in> support_set pf\n\ngoal (1 subgoal):\n 1. \\<And>n asset.\n       asset \\<in> support_set pf \\<Longrightarrow>\n       random_variable borel (prices Mkt asset n)", "show \"random_variable borel (prices Mkt asset n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. random_variable borel (prices Mkt asset n)", "using assms"], ["proof (prove)\nusing this:\n  risk_neutral_prob N\n  filt_equiv F M N\n  replicating_portfolio pf pyf matur\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        finite (prices Mkt asset n ` space M)\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf. finite (pf asset n ` space M)\n  viable_market Mkt\n  sets (F 0) = {{}, space M}\n  pyf \\<in> borel_measurable (F matur)\n\ngoal (1 subgoal):\n 1. random_variable borel (prices Mkt asset n)", "unfolding replicating_portfolio_def stock_portfolio_def  adapt_stoch_proc_def"], ["proof (prove)\nusing this:\n  risk_neutral_prob N\n  filt_equiv F M N\n  (portfolio pf \\<and> support_set pf \\<subseteq> stocks Mkt) \\<and>\n  trading_strategy pf \\<and>\n  self_financing Mkt pf \\<and> AEeq M (cls_val_process Mkt pf matur) pyf\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        finite (prices Mkt asset n ` space M)\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf. finite (pf asset n ` space M)\n  viable_market Mkt\n  sets (F 0) = {{}, space M}\n  pyf \\<in> borel_measurable (F matur)\n\ngoal (1 subgoal):\n 1. random_variable borel (prices Mkt asset n)", "using readable"], ["proof (prove)\nusing this:\n  risk_neutral_prob N\n  filt_equiv F M N\n  (portfolio pf \\<and> support_set pf \\<subseteq> stocks Mkt) \\<and>\n  trading_strategy pf \\<and>\n  self_financing Mkt pf \\<and> AEeq M (cls_val_process Mkt pf matur) pyf\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        finite (prices Mkt asset n ` space M)\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf. finite (pf asset n ` space M)\n  viable_market Mkt\n  sets (F 0) = {{}, space M}\n  pyf \\<in> borel_measurable (F matur)\n  \\<forall>asset\\<in>stocks Mkt. borel_adapt_stoch_proc F (prices Mkt asset)\n\ngoal (1 subgoal):\n 1. random_variable borel (prices Mkt asset n)", "by (meson \\<open>asset \\<in> support_set pf\\<close> adapt_stoch_proc_borel_measurable subsetCE)"], ["proof (state)\nthis:\n  random_variable borel (prices Mkt asset n)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?asset13 \\<in> support_set pf \\<Longrightarrow>\n  random_variable borel (prices Mkt ?asset13 ?n13)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        integrable N\n         (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w)\n\ngoal (1 subgoal):\n 1. fair_price Mkt\n     (integral\\<^sup>L N (discounted_value r (\\<lambda>m. pyf) matur)) pyf\n     matur", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        integrable N (\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w)\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        integrable N\n         (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        integrable N (\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w)\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        integrable N\n         (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w)\n\ngoal (1 subgoal):\n 1. fair_price Mkt\n     (integral\\<^sup>L N (discounted_value r (\\<lambda>m. pyf) matur)) pyf\n     matur", "using assms replicating_expectation"], ["proof (prove)\nusing this:\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        integrable N (\\<lambda>w. prices Mkt asset n w * pf asset (Suc n) w)\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        integrable N\n         (\\<lambda>w. prices Mkt asset (Suc n) w * pf asset (Suc n) w)\n  risk_neutral_prob N\n  filt_equiv F M N\n  replicating_portfolio pf pyf matur\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf.\n        finite (prices Mkt asset n ` space M)\n  \\<forall>n.\n     \\<forall>asset\\<in>support_set pf. finite (pf asset n ` space M)\n  viable_market Mkt\n  sets (F 0) = {{}, space M}\n  pyf \\<in> borel_measurable (F matur)\n  \\<lbrakk>risk_neutral_prob ?N; filt_equiv F M ?N;\n   replicating_portfolio ?pf ?pyf ?matur;\n   \\<forall>n.\n      \\<forall>asset\\<in>support_set ?pf.\n         integrable ?N\n          (\\<lambda>w. prices Mkt asset n w * ?pf asset (Suc n) w);\n   \\<forall>n.\n      \\<forall>asset\\<in>support_set ?pf.\n         integrable ?N\n          (\\<lambda>w. prices Mkt asset (Suc n) w * ?pf asset (Suc n) w);\n   viable_market Mkt; sets (F 0) = {{}, space M};\n   ?pyf \\<in> borel_measurable (F ?matur)\\<rbrakk>\n  \\<Longrightarrow> fair_price Mkt\n                     (integral\\<^sup>L ?N\n                       (discounted_value r (\\<lambda>m. ?pyf) ?matur))\n                     ?pyf ?matur\n\ngoal (1 subgoal):\n 1. fair_price Mkt\n     (integral\\<^sup>L N (discounted_value r (\\<lambda>m. pyf) matur)) pyf\n     matur", "by simp"], ["proof (state)\nthis:\n  fair_price Mkt\n   (integral\\<^sup>L N (discounted_value r (\\<lambda>m. pyf) matur)) pyf\n   matur\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}