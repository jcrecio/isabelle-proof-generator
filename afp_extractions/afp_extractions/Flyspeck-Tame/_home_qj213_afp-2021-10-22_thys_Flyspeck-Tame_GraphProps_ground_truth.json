{"file_name": "/home/qj213/afp-2021-10-22/thys/Flyspeck-Tame/GraphProps.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Flyspeck-Tame", "problem_names": ["lemma final_setFinal[iff]: \"final(setFinal f)\"", "lemma eq_setFinal_iff[iff]: \"(f = setFinal f) = final f\"", "lemma setFinal_eq_iff[iff]: \"(setFinal f = f) = final f\"", "lemma distinct_vertices[iff]: \"distinct(vertices(g::graph))\"", "lemma nextElem_append[simp]:\n \"y \\<notin> set xs \\<Longrightarrow> nextElem (xs @ ys) d y = nextElem ys d y\"", "lemma nextElem_cases:\n\"nextElem xs d x = y \\<Longrightarrow>\n x \\<notin> set xs \\<and> y = d \\<or>\n xs \\<noteq> [] \\<and> x = last xs \\<and> y = d \\<and> x \\<notin> set(butlast xs) \\<or>\n (\\<exists>us vs. xs = us @ [x,y] @ vs \\<and> x \\<notin> set us)\"", "lemma nextElem_notin_butlast[rule_format,simp]:\n \"y \\<notin> set(butlast xs) \\<longrightarrow> nextElem xs x y = x\"", "lemma nextElem_in: \"nextElem xs x y : set(x#xs)\"", "lemma nextElem_notin[simp]: \"a \\<notin> set as \\<Longrightarrow> nextElem as c a = c\"", "lemma nextElem_last[simp]: assumes dist: \"distinct xs\"\nshows \"nextElem xs c (last xs) = c\"", "lemma prevElem_nextElem:\nassumes dist: \"distinct xs\" and xxs: \"x : set xs\"\nshows \"nextElem (rev xs) (last xs) (nextElem xs (hd xs) x) = x\"", "lemma nextElem_prevElem:\n \"\\<lbrakk> distinct xs; x : set xs \\<rbrakk> \\<Longrightarrow>\n  nextElem xs (hd xs) (nextElem (rev xs) (last xs) x) = x\"", "lemma nextElem_nth:\n \"\\<And>i. \\<lbrakk>distinct xs; i < length xs \\<rbrakk>\n   \\<Longrightarrow> nextElem xs z (xs!i) = (if length xs = i+1 then z else xs!(i+1))\"", "lemma nextVertex_in_face'[simp]:\n  \"vertices f \\<noteq> [] \\<Longrightarrow> f \\<bullet> v \\<in> \\<V> f\"", "lemma nextVertex_in_face[simp]:\n  \"v \\<in> set (vertices f) \\<Longrightarrow> f \\<bullet> v \\<in> \\<V> f\"", "lemma nextVertex_prevVertex[simp]:\n \"\\<lbrakk> distinct(vertices f); v \\<in> \\<V> f \\<rbrakk>\n \\<Longrightarrow> f \\<bullet> (f\\<^bsup>-1\\<^esup> \\<bullet> v) = v\"", "lemma prevVertex_nextVertex[simp]:\n \"\\<lbrakk> distinct(vertices f); v \\<in> \\<V> f \\<rbrakk>\n \\<Longrightarrow> f\\<^bsup>-1\\<^esup> \\<bullet> (f \\<bullet> v) = v\"", "lemma prevVertex_in_face[simp]:\n \"v \\<in> \\<V> f \\<Longrightarrow> f\\<^bsup>-1\\<^esup> \\<bullet> v \\<in> \\<V> f\"", "lemma nextVertex_nth:\n \"\\<lbrakk> distinct(vertices f); i < |vertices f| \\<rbrakk> \\<Longrightarrow>\n  f \\<bullet> (vertices f ! i) = vertices f ! ((i+1) mod |vertices f| )\"", "lemma edges_face_eq:\n \"((a,b) \\<in> \\<E> (f::face)) = ((f \\<bullet> a = b) \\<and> a \\<in> \\<V> f)\"", "lemma edges_setFinal[simp]: \"\\<E>(setFinal f) = \\<E> f\"", "lemma in_edges_in_vertices:\n \"(x,y) \\<in> \\<E>(f::face) \\<Longrightarrow> x \\<in> \\<V> f \\<and> y \\<in> \\<V> f\"", "lemma vertices_conv_Union_edges:\n \"\\<V>(f::face) = (\\<Union>(a,b)\\<in>\\<E> f. {a})\"", "lemma nextVertex_in_edges: \"v \\<in> \\<V> f \\<Longrightarrow> (v, f \\<bullet> v) \\<in> edges f\"", "lemma prevVertex_in_edges:\n \"\\<lbrakk>distinct(vertices f); v \\<in> \\<V> f\\<rbrakk> \\<Longrightarrow> (f\\<^bsup>-1\\<^esup> \\<bullet> v, v) \\<in> edges f\"", "lemma vertices_triangle:\n   \"|vertices f| = 3 \\<Longrightarrow> a \\<in> \\<V> f \\<Longrightarrow>\n  distinct (vertices f) \\<Longrightarrow>\n  \\<V> f = {a, f \\<bullet> a, f \\<bullet> (f \\<bullet> a)}\"", "lemma tri_next3_id:\n \"|vertices f| = 3 \\<Longrightarrow> distinct(vertices f) \\<Longrightarrow> v \\<in> \\<V> f\n  \\<Longrightarrow> f \\<bullet> (f \\<bullet> (f \\<bullet> v)) = v\"", "lemma triangle_nextVertex_prevVertex:\n \"|vertices f| = 3 \\<Longrightarrow> a \\<in> \\<V> f \\<Longrightarrow>\n  distinct (vertices f) \\<Longrightarrow>\n  f \\<bullet> (f \\<bullet> a) = f\\<^bsup>-1\\<^esup> \\<bullet> a\"", "lemma vertices_quad:\n  \"|vertices f| = 4 \\<Longrightarrow> a \\<in> \\<V> f \\<Longrightarrow>\n  distinct (vertices f) \\<Longrightarrow>\n  \\<V> f = {a, f \\<bullet> a, f \\<bullet> (f \\<bullet> a), f \\<bullet> (f \\<bullet> (f \\<bullet> a))}\"", "lemma quad_next4_id:\n \"\\<lbrakk> |vertices f| = 4; distinct(vertices f); v \\<in> \\<V> f \\<rbrakk> \\<Longrightarrow>\n  f \\<bullet> (f \\<bullet> (f \\<bullet> (f \\<bullet> v))) = v\"", "lemma quad_nextVertex_prevVertex:\n \"|vertices f| = 4 \\<Longrightarrow> a \\<in> \\<V> f \\<Longrightarrow> distinct (vertices f) \\<Longrightarrow>\n  f \\<bullet> (f \\<bullet> (f \\<bullet> a)) = f\\<^bsup>-1\\<^esup> \\<bullet> a\"", "lemma len_faces_sum: \"|faces g| = |finals g| + |nonFinals g|\"", "lemma graph_max_final_ex:\n \"\\<exists>f\\<in>set (finals (graph n)). |vertices f| = n\"", "lemma distinct_no_loop2:\n \"\\<lbrakk> distinct(vertices f); v \\<in> \\<V> f; u \\<in> \\<V> f; u \\<noteq> v \\<rbrakk> \\<Longrightarrow> f \\<bullet> v \\<noteq> v\"", "lemma distinct_no_loop1:\n \"\\<lbrakk> distinct(vertices f); v \\<in> \\<V> f; |vertices f| > 1 \\<rbrakk> \\<Longrightarrow> f \\<bullet> v \\<noteq> v\"", "lemma between_front[simp]:\n \"v \\<notin> set us \\<Longrightarrow> between (u # us @ v # vs) u v = us\"", "lemma between_back:\n \"\\<lbrakk> v \\<notin> set us; u \\<notin> set vs; v \\<noteq> u \\<rbrakk> \\<Longrightarrow> between (v # vs @ u # us) u v = us\"", "lemma next_between:\n \"\\<lbrakk>distinct(vertices f); v \\<in> \\<V> f; u \\<in> \\<V> f; f \\<bullet> v \\<noteq> u \\<rbrakk>\n  \\<Longrightarrow> f \\<bullet> v \\<in> set(between (vertices f) v u)\"", "lemma next_between2:\n \"\\<lbrakk> distinct(vertices f); v \\<in> \\<V> f; u \\<in> \\<V> f; u \\<noteq> v \\<rbrakk> \\<Longrightarrow>\n  v \\<in> set(between (vertices f) u (f \\<bullet> v))\"", "lemma between_next_empty:\n \"distinct(vertices f) \\<Longrightarrow> between (vertices f) v (f \\<bullet> v) = []\"", "lemma unroll_between_next2:\n \"\\<lbrakk> distinct(vertices f); u \\<in> \\<V> f; v \\<in> \\<V> f; u \\<noteq> v \\<rbrakk> \\<Longrightarrow>\n  between (vertices f) u (f \\<bullet> v) = between (vertices f) u v @ [v]\"", "lemma nextVertex_eq_lemma:\n \"\\<lbrakk> distinct(vertices f); x \\<in> \\<V> f; y \\<in> \\<V> f; x \\<noteq> y;\n    v \\<in> set(x # between (vertices f) x y) \\<rbrakk> \\<Longrightarrow>\n  f \\<bullet> v = nextElem (x # between (vertices f) x y @ [y]) z v\""], "translations": [["", "lemma final_setFinal[iff]: \"final(setFinal f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. final (setFinal f)", "by (simp add:setFinal_def)"], ["", "lemma eq_setFinal_iff[iff]: \"(f = setFinal f) = final f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (f = setFinal f) = final f", "proof (induct f)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x1a x2a.\n       (Face x1a x2a = setFinal (Face x1a x2a)) = final (Face x1a x2a)", "case (Face f t)"], ["proof (state)\nthis:\n  \n\ngoal (1 subgoal):\n 1. \\<And>x1a x2a.\n       (Face x1a x2a = setFinal (Face x1a x2a)) = final (Face x1a x2a)", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. (Face f t = setFinal (Face f t)) = final (Face f t)", "by (cases t) (simp_all add: setFinal_def)"], ["proof (state)\nthis:\n  (Face f t = setFinal (Face f t)) = final (Face f t)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma setFinal_eq_iff[iff]: \"(setFinal f = f) = final f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (setFinal f = f) = final f", "by (blast dest:sym intro:sym)"], ["", "lemma distinct_vertices[iff]: \"distinct(vertices(g::graph))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. distinct (vertices g)", "by(induct g) simp"], ["", "subsection\\<open>@{const nextElem}\\<close>"], ["", "lemma nextElem_append[simp]:\n \"y \\<notin> set xs \\<Longrightarrow> nextElem (xs @ ys) d y = nextElem ys d y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y \\<notin> set xs \\<Longrightarrow>\n    nextElem (xs @ ys) d y = nextElem ys d y", "by(induct xs) auto"], ["", "lemma nextElem_cases:\n\"nextElem xs d x = y \\<Longrightarrow>\n x \\<notin> set xs \\<and> y = d \\<or>\n xs \\<noteq> [] \\<and> x = last xs \\<and> y = d \\<and> x \\<notin> set(butlast xs) \\<or>\n (\\<exists>us vs. xs = us @ [x,y] @ vs \\<and> x \\<notin> set us)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nextElem xs d x = y \\<Longrightarrow>\n    x \\<notin> set xs \\<and> y = d \\<or>\n    xs \\<noteq> [] \\<and>\n    x = last xs \\<and> y = d \\<and> x \\<notin> set (butlast xs) \\<or>\n    (\\<exists>us vs. xs = us @ [x, y] @ vs \\<and> x \\<notin> set us)", "apply(induct xs)"], ["proof (prove)\ngoal (2 subgoals):\n 1. nextElem [] d x = y \\<Longrightarrow>\n    x \\<notin> set [] \\<and> y = d \\<or>\n    [] \\<noteq> [] \\<and>\n    x = last [] \\<and> y = d \\<and> x \\<notin> set (butlast []) \\<or>\n    (\\<exists>us vs. [] = us @ [x, y] @ vs \\<and> x \\<notin> set us)\n 2. \\<And>a xs.\n       \\<lbrakk>nextElem xs d x = y \\<Longrightarrow>\n                x \\<notin> set xs \\<and> y = d \\<or>\n                xs \\<noteq> [] \\<and>\n                x = last xs \\<and>\n                y = d \\<and> x \\<notin> set (butlast xs) \\<or>\n                (\\<exists>us vs.\n                    xs = us @ [x, y] @ vs \\<and> x \\<notin> set us);\n        nextElem (a # xs) d x = y\\<rbrakk>\n       \\<Longrightarrow> x \\<notin> set (a # xs) \\<and> y = d \\<or>\n                         a # xs \\<noteq> [] \\<and>\n                         x = last (a # xs) \\<and>\n                         y = d \\<and>\n                         x \\<notin> set (butlast (a # xs)) \\<or>\n                         (\\<exists>us vs.\n                             a # xs = us @ [x, y] @ vs \\<and>\n                             x \\<notin> set us)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a xs.\n       \\<lbrakk>nextElem xs d x = y \\<Longrightarrow>\n                x \\<notin> set xs \\<and> y = d \\<or>\n                xs \\<noteq> [] \\<and>\n                x = last xs \\<and>\n                y = d \\<and> x \\<notin> set (butlast xs) \\<or>\n                (\\<exists>us vs.\n                    xs = us @ [x, y] @ vs \\<and> x \\<notin> set us);\n        nextElem (a # xs) d x = y\\<rbrakk>\n       \\<Longrightarrow> x \\<notin> set (a # xs) \\<and> y = d \\<or>\n                         a # xs \\<noteq> [] \\<and>\n                         x = last (a # xs) \\<and>\n                         y = d \\<and>\n                         x \\<notin> set (butlast (a # xs)) \\<or>\n                         (\\<exists>us vs.\n                             a # xs = us @ [x, y] @ vs \\<and>\n                             x \\<notin> set us)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a xs.\n       \\<lbrakk>nextElem xs d x = y \\<Longrightarrow>\n                x \\<notin> set xs \\<and> y = d \\<or>\n                xs \\<noteq> [] \\<and>\n                x = last xs \\<and>\n                y = d \\<and> x \\<notin> set (butlast xs) \\<or>\n                (\\<exists>us.\n                    (\\<exists>vs. xs = us @ x # y # vs) \\<and>\n                    x \\<notin> set us);\n        (if x = a\n         then case xs of [] \\<Rightarrow> d | a' # as' \\<Rightarrow> a'\n         else nextElem xs d x) =\n        y\\<rbrakk>\n       \\<Longrightarrow> (xs = [] \\<longrightarrow>\n                          x \\<noteq> a \\<and> y = d \\<or>\n                          x = a \\<and> y = d) \\<and>\n                         (xs \\<noteq> [] \\<longrightarrow>\n                          x \\<noteq> a \\<and>\n                          x \\<notin> set xs \\<and> y = d \\<or>\n                          x = last xs \\<and>\n                          y = d \\<and>\n                          x \\<noteq> a \\<and>\n                          x \\<notin> set (butlast xs) \\<or>\n                          (\\<exists>us.\n                              (\\<exists>vs. a # xs = us @ x # y # vs) \\<and>\n                              x \\<notin> set us))", "apply(split if_splits)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a xs.\n       \\<lbrakk>nextElem xs d x = y \\<Longrightarrow>\n                x \\<notin> set xs \\<and> y = d \\<or>\n                xs \\<noteq> [] \\<and>\n                x = last xs \\<and>\n                y = d \\<and> x \\<notin> set (butlast xs) \\<or>\n                (\\<exists>us.\n                    (\\<exists>vs. xs = us @ x # y # vs) \\<and>\n                    x \\<notin> set us);\n        x = a;\n        (case xs of [] \\<Rightarrow> d | a' # as' \\<Rightarrow> a') =\n        y\\<rbrakk>\n       \\<Longrightarrow> (xs = [] \\<longrightarrow>\n                          x \\<noteq> a \\<and> y = d \\<or>\n                          x = a \\<and> y = d) \\<and>\n                         (xs \\<noteq> [] \\<longrightarrow>\n                          x \\<noteq> a \\<and>\n                          x \\<notin> set xs \\<and> y = d \\<or>\n                          x = last xs \\<and>\n                          y = d \\<and>\n                          x \\<noteq> a \\<and>\n                          x \\<notin> set (butlast xs) \\<or>\n                          (\\<exists>us.\n                              (\\<exists>vs. a # xs = us @ x # y # vs) \\<and>\n                              x \\<notin> set us))\n 2. \\<And>a xs.\n       \\<lbrakk>nextElem xs d x = y \\<Longrightarrow>\n                x \\<notin> set xs \\<and> y = d \\<or>\n                xs \\<noteq> [] \\<and>\n                x = last xs \\<and>\n                y = d \\<and> x \\<notin> set (butlast xs) \\<or>\n                (\\<exists>us.\n                    (\\<exists>vs. xs = us @ x # y # vs) \\<and>\n                    x \\<notin> set us);\n        x \\<noteq> a; nextElem xs d x = y\\<rbrakk>\n       \\<Longrightarrow> (xs = [] \\<longrightarrow>\n                          x \\<noteq> a \\<and> y = d \\<or>\n                          x = a \\<and> y = d) \\<and>\n                         (xs \\<noteq> [] \\<longrightarrow>\n                          x \\<noteq> a \\<and>\n                          x \\<notin> set xs \\<and> y = d \\<or>\n                          x = last xs \\<and>\n                          y = d \\<and>\n                          x \\<noteq> a \\<and>\n                          x \\<notin> set (butlast xs) \\<or>\n                          (\\<exists>us.\n                              (\\<exists>vs. a # xs = us @ x # y # vs) \\<and>\n                              x \\<notin> set us))", "apply(simp split:list.splits)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a xs x21 x22.\n       \\<lbrakk>(if a = y\n                 then case x22 of [] \\<Rightarrow> d\n                      | a' # as' \\<Rightarrow> a'\n                 else nextElem x22 d a) =\n                y \\<Longrightarrow>\n                a \\<noteq> y \\<and> a \\<notin> set x22 \\<and> y = d \\<or>\n                a = (if x22 = [] then y else last x22) \\<and>\n                y = d \\<and>\n                a \\<notin> set (if x22 = [] then []\n                                else y # butlast x22) \\<or>\n                (\\<exists>us.\n                    (\\<exists>vs. y # x22 = us @ a # y # vs) \\<and>\n                    a \\<notin> set us);\n        x = a; xs = y # x22; x21 = y\\<rbrakk>\n       \\<Longrightarrow> \\<exists>us.\n                            (\\<exists>vs.\n                                a # y # x22 = us @ a # y # vs) \\<and>\n                            a \\<notin> set us\n 2. \\<And>a xs.\n       \\<lbrakk>nextElem xs d x = y \\<Longrightarrow>\n                x \\<notin> set xs \\<and> y = d \\<or>\n                xs \\<noteq> [] \\<and>\n                x = last xs \\<and>\n                y = d \\<and> x \\<notin> set (butlast xs) \\<or>\n                (\\<exists>us.\n                    (\\<exists>vs. xs = us @ x # y # vs) \\<and>\n                    x \\<notin> set us);\n        x \\<noteq> a; nextElem xs d x = y\\<rbrakk>\n       \\<Longrightarrow> (xs = [] \\<longrightarrow>\n                          x \\<noteq> a \\<and> y = d \\<or>\n                          x = a \\<and> y = d) \\<and>\n                         (xs \\<noteq> [] \\<longrightarrow>\n                          x \\<noteq> a \\<and>\n                          x \\<notin> set xs \\<and> y = d \\<or>\n                          x = last xs \\<and>\n                          y = d \\<and>\n                          x \\<noteq> a \\<and>\n                          x \\<notin> set (butlast xs) \\<or>\n                          (\\<exists>us.\n                              (\\<exists>vs. a # xs = us @ x # y # vs) \\<and>\n                              x \\<notin> set us))", "apply(rule_tac x = \"[]\" in exI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a xs x21 x22.\n       \\<lbrakk>(if a = y\n                 then case x22 of [] \\<Rightarrow> d\n                      | a' # as' \\<Rightarrow> a'\n                 else nextElem x22 d a) =\n                y \\<Longrightarrow>\n                a \\<noteq> y \\<and> a \\<notin> set x22 \\<and> y = d \\<or>\n                a = (if x22 = [] then y else last x22) \\<and>\n                y = d \\<and>\n                a \\<notin> set (if x22 = [] then []\n                                else y # butlast x22) \\<or>\n                (\\<exists>us.\n                    (\\<exists>vs. y # x22 = us @ a # y # vs) \\<and>\n                    a \\<notin> set us);\n        x = a; xs = y # x22; x21 = y\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>vs. a # y # x22 = [] @ a # y # vs) \\<and>\n                         a \\<notin> set []\n 2. \\<And>a xs.\n       \\<lbrakk>nextElem xs d x = y \\<Longrightarrow>\n                x \\<notin> set xs \\<and> y = d \\<or>\n                xs \\<noteq> [] \\<and>\n                x = last xs \\<and>\n                y = d \\<and> x \\<notin> set (butlast xs) \\<or>\n                (\\<exists>us.\n                    (\\<exists>vs. xs = us @ x # y # vs) \\<and>\n                    x \\<notin> set us);\n        x \\<noteq> a; nextElem xs d x = y\\<rbrakk>\n       \\<Longrightarrow> (xs = [] \\<longrightarrow>\n                          x \\<noteq> a \\<and> y = d \\<or>\n                          x = a \\<and> y = d) \\<and>\n                         (xs \\<noteq> [] \\<longrightarrow>\n                          x \\<noteq> a \\<and>\n                          x \\<notin> set xs \\<and> y = d \\<or>\n                          x = last xs \\<and>\n                          y = d \\<and>\n                          x \\<noteq> a \\<and>\n                          x \\<notin> set (butlast xs) \\<or>\n                          (\\<exists>us.\n                              (\\<exists>vs. a # xs = us @ x # y # vs) \\<and>\n                              x \\<notin> set us))", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a xs.\n       \\<lbrakk>nextElem xs d x = y \\<Longrightarrow>\n                x \\<notin> set xs \\<and> y = d \\<or>\n                xs \\<noteq> [] \\<and>\n                x = last xs \\<and>\n                y = d \\<and> x \\<notin> set (butlast xs) \\<or>\n                (\\<exists>us.\n                    (\\<exists>vs. xs = us @ x # y # vs) \\<and>\n                    x \\<notin> set us);\n        x \\<noteq> a; nextElem xs d x = y\\<rbrakk>\n       \\<Longrightarrow> (xs = [] \\<longrightarrow>\n                          x \\<noteq> a \\<and> y = d \\<or>\n                          x = a \\<and> y = d) \\<and>\n                         (xs \\<noteq> [] \\<longrightarrow>\n                          x \\<noteq> a \\<and>\n                          x \\<notin> set xs \\<and> y = d \\<or>\n                          x = last xs \\<and>\n                          y = d \\<and>\n                          x \\<noteq> a \\<and>\n                          x \\<notin> set (butlast xs) \\<or>\n                          (\\<exists>us.\n                              (\\<exists>vs. a # xs = us @ x # y # vs) \\<and>\n                              x \\<notin> set us))", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a xs.\n       \\<lbrakk>x \\<notin> set xs \\<and> y = d \\<or>\n                xs \\<noteq> [] \\<and>\n                x = last xs \\<and>\n                y = d \\<and> x \\<notin> set (butlast xs) \\<or>\n                (\\<exists>us.\n                    (\\<exists>vs. xs = us @ x # y # vs) \\<and>\n                    x \\<notin> set us);\n        x \\<noteq> a; nextElem xs d x = y\\<rbrakk>\n       \\<Longrightarrow> (xs = [] \\<longrightarrow> y = d) \\<and>\n                         (xs \\<noteq> [] \\<longrightarrow>\n                          x \\<notin> set xs \\<and> y = d \\<or>\n                          x = last xs \\<and>\n                          y = d \\<and> x \\<notin> set (butlast xs) \\<or>\n                          (\\<exists>us.\n                              (\\<exists>vs. a # xs = us @ x # y # vs) \\<and>\n                              x \\<notin> set us))", "apply(erule disjE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a xs.\n       \\<lbrakk>x \\<noteq> a; nextElem xs d x = y;\n        x \\<notin> set xs \\<and> y = d\\<rbrakk>\n       \\<Longrightarrow> (xs = [] \\<longrightarrow> y = d) \\<and>\n                         (xs \\<noteq> [] \\<longrightarrow>\n                          x \\<notin> set xs \\<and> y = d \\<or>\n                          x = last xs \\<and>\n                          y = d \\<and> x \\<notin> set (butlast xs) \\<or>\n                          (\\<exists>us.\n                              (\\<exists>vs. a # xs = us @ x # y # vs) \\<and>\n                              x \\<notin> set us))\n 2. \\<And>a xs.\n       \\<lbrakk>x \\<noteq> a; nextElem xs d x = y;\n        xs \\<noteq> [] \\<and>\n        x = last xs \\<and> y = d \\<and> x \\<notin> set (butlast xs) \\<or>\n        (\\<exists>us.\n            (\\<exists>vs. xs = us @ x # y # vs) \\<and>\n            x \\<notin> set us)\\<rbrakk>\n       \\<Longrightarrow> (xs = [] \\<longrightarrow> y = d) \\<and>\n                         (xs \\<noteq> [] \\<longrightarrow>\n                          x \\<notin> set xs \\<and> y = d \\<or>\n                          x = last xs \\<and>\n                          y = d \\<and> x \\<notin> set (butlast xs) \\<or>\n                          (\\<exists>us.\n                              (\\<exists>vs. a # xs = us @ x # y # vs) \\<and>\n                              x \\<notin> set us))", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a xs.\n       \\<lbrakk>x \\<noteq> a; nextElem xs d x = y;\n        xs \\<noteq> [] \\<and>\n        x = last xs \\<and> y = d \\<and> x \\<notin> set (butlast xs) \\<or>\n        (\\<exists>us.\n            (\\<exists>vs. xs = us @ x # y # vs) \\<and>\n            x \\<notin> set us)\\<rbrakk>\n       \\<Longrightarrow> (xs = [] \\<longrightarrow> y = d) \\<and>\n                         (xs \\<noteq> [] \\<longrightarrow>\n                          x \\<notin> set xs \\<and> y = d \\<or>\n                          x = last xs \\<and>\n                          y = d \\<and> x \\<notin> set (butlast xs) \\<or>\n                          (\\<exists>us.\n                              (\\<exists>vs. a # xs = us @ x # y # vs) \\<and>\n                              x \\<notin> set us))", "apply(erule disjE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a xs.\n       \\<lbrakk>x \\<noteq> a; nextElem xs d x = y;\n        xs \\<noteq> [] \\<and>\n        x = last xs \\<and> y = d \\<and> x \\<notin> set (butlast xs)\\<rbrakk>\n       \\<Longrightarrow> (xs = [] \\<longrightarrow> y = d) \\<and>\n                         (xs \\<noteq> [] \\<longrightarrow>\n                          x \\<notin> set xs \\<and> y = d \\<or>\n                          x = last xs \\<and>\n                          y = d \\<and> x \\<notin> set (butlast xs) \\<or>\n                          (\\<exists>us.\n                              (\\<exists>vs. a # xs = us @ x # y # vs) \\<and>\n                              x \\<notin> set us))\n 2. \\<And>a xs.\n       \\<lbrakk>x \\<noteq> a; nextElem xs d x = y;\n        \\<exists>us.\n           (\\<exists>vs. xs = us @ x # y # vs) \\<and>\n           x \\<notin> set us\\<rbrakk>\n       \\<Longrightarrow> (xs = [] \\<longrightarrow> y = d) \\<and>\n                         (xs \\<noteq> [] \\<longrightarrow>\n                          x \\<notin> set xs \\<and> y = d \\<or>\n                          x = last xs \\<and>\n                          y = d \\<and> x \\<notin> set (butlast xs) \\<or>\n                          (\\<exists>us.\n                              (\\<exists>vs. a # xs = us @ x # y # vs) \\<and>\n                              x \\<notin> set us))", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a xs.\n       \\<lbrakk>x \\<noteq> a; nextElem xs d x = y;\n        \\<exists>us.\n           (\\<exists>vs. xs = us @ x # y # vs) \\<and>\n           x \\<notin> set us\\<rbrakk>\n       \\<Longrightarrow> (xs = [] \\<longrightarrow> y = d) \\<and>\n                         (xs \\<noteq> [] \\<longrightarrow>\n                          x \\<notin> set xs \\<and> y = d \\<or>\n                          x = last xs \\<and>\n                          y = d \\<and> x \\<notin> set (butlast xs) \\<or>\n                          (\\<exists>us.\n                              (\\<exists>vs. a # xs = us @ x # y # vs) \\<and>\n                              x \\<notin> set us))", "apply(rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a xs.\n       \\<lbrakk>x \\<noteq> a; nextElem xs d x = y;\n        \\<exists>us.\n           (\\<exists>vs. xs = us @ x # y # vs) \\<and>\n           x \\<notin> set us\\<rbrakk>\n       \\<Longrightarrow> xs = [] \\<longrightarrow> y = d\n 2. \\<And>a xs.\n       \\<lbrakk>x \\<noteq> a; nextElem xs d x = y;\n        \\<exists>us.\n           (\\<exists>vs. xs = us @ x # y # vs) \\<and>\n           x \\<notin> set us\\<rbrakk>\n       \\<Longrightarrow> xs \\<noteq> [] \\<longrightarrow>\n                         x \\<notin> set xs \\<and> y = d \\<or>\n                         x = last xs \\<and>\n                         y = d \\<and> x \\<notin> set (butlast xs) \\<or>\n                         (\\<exists>us.\n                             (\\<exists>vs. a # xs = us @ x # y # vs) \\<and>\n                             x \\<notin> set us)", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a xs.\n       \\<lbrakk>x \\<noteq> a; nextElem xs d x = y;\n        \\<exists>us.\n           (\\<exists>vs. xs = us @ x # y # vs) \\<and>\n           x \\<notin> set us\\<rbrakk>\n       \\<Longrightarrow> xs \\<noteq> [] \\<longrightarrow>\n                         x \\<notin> set xs \\<and> y = d \\<or>\n                         x = last xs \\<and>\n                         y = d \\<and> x \\<notin> set (butlast xs) \\<or>\n                         (\\<exists>us.\n                             (\\<exists>vs. a # xs = us @ x # y # vs) \\<and>\n                             x \\<notin> set us)", "apply (clarsimp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a xs us vs.\n       \\<lbrakk>x \\<noteq> a; y = nextElem xs d x; x \\<notin> set us;\n        xs = us @ x # nextElem xs d x # vs; xs \\<noteq> [];\n        x \\<in> set xs \\<or> nextElem xs d x \\<noteq> d;\n        \\<forall>us.\n           (\\<forall>vs.\n               a # xs \\<noteq> us @ x # nextElem xs d x # vs) \\<or>\n           x \\<in> set us\\<rbrakk>\n       \\<Longrightarrow> x = last xs \\<and>\n                         nextElem xs d x = d \\<and>\n                         x \\<notin> set (butlast xs)", "apply(erule_tac x = \"a#us\" in allE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a xs us vs.\n       \\<lbrakk>x \\<noteq> a; y = nextElem xs d x; x \\<notin> set us;\n        xs = us @ x # nextElem xs d x # vs; xs \\<noteq> [];\n        x \\<in> set xs \\<or> nextElem xs d x \\<noteq> d;\n        (\\<forall>vs.\n            a # xs \\<noteq> (a # us) @ x # nextElem xs d x # vs) \\<or>\n        x \\<in> set (a # us)\\<rbrakk>\n       \\<Longrightarrow> x = last xs \\<and>\n                         nextElem xs d x = d \\<and>\n                         x \\<notin> set (butlast xs)", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma nextElem_notin_butlast[rule_format,simp]:\n \"y \\<notin> set(butlast xs) \\<longrightarrow> nextElem xs x y = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y \\<notin> set (butlast xs) \\<longrightarrow> nextElem xs x y = x", "by(induct xs) auto"], ["", "lemma nextElem_in: \"nextElem xs x y : set(x#xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nextElem xs x y \\<in> set (x # xs)", "apply (induct xs)"], ["proof (prove)\ngoal (2 subgoals):\n 1. nextElem [] x y \\<in> set [x]\n 2. \\<And>a xs.\n       nextElem xs x y \\<in> set (x # xs) \\<Longrightarrow>\n       nextElem (a # xs) x y \\<in> set (x # a # xs)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a xs.\n       nextElem xs x y \\<in> set (x # xs) \\<Longrightarrow>\n       nextElem (a # xs) x y \\<in> set (x # a # xs)", "apply auto"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xs.\n       \\<lbrakk>nextElem xs x y = x;\n        (case xs of [] \\<Rightarrow> x | a' # as' \\<Rightarrow> a') \\<noteq>\n        x;\n        (case xs of [] \\<Rightarrow> x | a' # as' \\<Rightarrow> a')\n        \\<notin> set xs\\<rbrakk>\n       \\<Longrightarrow> (case xs of [] \\<Rightarrow> x\n                          | a' # as' \\<Rightarrow> a') =\n                         y\n 2. \\<And>xs.\n       \\<lbrakk>nextElem xs x y \\<in> set xs;\n        (case xs of [] \\<Rightarrow> x | a' # as' \\<Rightarrow> a') \\<noteq>\n        x;\n        (case xs of [] \\<Rightarrow> x | a' # as' \\<Rightarrow> a')\n        \\<notin> set xs\\<rbrakk>\n       \\<Longrightarrow> (case xs of [] \\<Rightarrow> x\n                          | a' # as' \\<Rightarrow> a') =\n                         y", "apply(clarsimp split: list.splits)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xs.\n       \\<lbrakk>nextElem xs x y \\<in> set xs;\n        (case xs of [] \\<Rightarrow> x | a' # as' \\<Rightarrow> a') \\<noteq>\n        x;\n        (case xs of [] \\<Rightarrow> x | a' # as' \\<Rightarrow> a')\n        \\<notin> set xs\\<rbrakk>\n       \\<Longrightarrow> (case xs of [] \\<Rightarrow> x\n                          | a' # as' \\<Rightarrow> a') =\n                         y", "apply(clarsimp split: list.splits)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma nextElem_notin[simp]: \"a \\<notin> set as \\<Longrightarrow> nextElem as c a = c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<notin> set as \\<Longrightarrow> nextElem as c a = c", "by(erule nextElem_append[where ys = \"[]\", simplified])"], ["", "lemma nextElem_last[simp]: assumes dist: \"distinct xs\"\nshows \"nextElem xs c (last xs) = c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nextElem xs c (last xs) = c", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> nextElem xs c (last xs) = c\n 2. \\<not> ?P \\<Longrightarrow> nextElem xs c (last xs) = c", "assume \"xs = []\""], ["proof (state)\nthis:\n  xs = []\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> nextElem xs c (last xs) = c\n 2. \\<not> ?P \\<Longrightarrow> nextElem xs c (last xs) = c", "thus ?thesis"], ["proof (prove)\nusing this:\n  xs = []\n\ngoal (1 subgoal):\n 1. nextElem xs c (last xs) = c", "by simp"], ["proof (state)\nthis:\n  nextElem xs c (last xs) = c\n\ngoal (1 subgoal):\n 1. xs \\<noteq> [] \\<Longrightarrow> nextElem xs c (last xs) = c", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. xs \\<noteq> [] \\<Longrightarrow> nextElem xs c (last xs) = c", "let ?xs = \"butlast xs @ [last xs]\""], ["proof (state)\ngoal (1 subgoal):\n 1. xs \\<noteq> [] \\<Longrightarrow> nextElem xs c (last xs) = c", "assume xs: \"xs \\<noteq> []\""], ["proof (state)\nthis:\n  xs \\<noteq> []\n\ngoal (1 subgoal):\n 1. xs \\<noteq> [] \\<Longrightarrow> nextElem xs c (last xs) = c", "with dist"], ["proof (chain)\npicking this:\n  distinct xs\n  xs \\<noteq> []", "have \"distinct ?xs\""], ["proof (prove)\nusing this:\n  distinct xs\n  xs \\<noteq> []\n\ngoal (1 subgoal):\n 1. distinct (butlast xs @ [last xs])", "by simp"], ["proof (state)\nthis:\n  distinct (butlast xs @ [last xs])\n\ngoal (1 subgoal):\n 1. xs \\<noteq> [] \\<Longrightarrow> nextElem xs c (last xs) = c", "hence notin: \"last xs \\<notin> set(butlast xs)\""], ["proof (prove)\nusing this:\n  distinct (butlast xs @ [last xs])\n\ngoal (1 subgoal):\n 1. last xs \\<notin> set (butlast xs)", "by simp"], ["proof (state)\nthis:\n  last xs \\<notin> set (butlast xs)\n\ngoal (1 subgoal):\n 1. xs \\<noteq> [] \\<Longrightarrow> nextElem xs c (last xs) = c", "from xs"], ["proof (chain)\npicking this:\n  xs \\<noteq> []", "have \"nextElem xs c (last xs) = nextElem ?xs c (last xs)\""], ["proof (prove)\nusing this:\n  xs \\<noteq> []\n\ngoal (1 subgoal):\n 1. nextElem xs c (last xs) = nextElem (butlast xs @ [last xs]) c (last xs)", "by simp"], ["proof (state)\nthis:\n  nextElem xs c (last xs) = nextElem (butlast xs @ [last xs]) c (last xs)\n\ngoal (1 subgoal):\n 1. xs \\<noteq> [] \\<Longrightarrow> nextElem xs c (last xs) = c", "also"], ["proof (state)\nthis:\n  nextElem xs c (last xs) = nextElem (butlast xs @ [last xs]) c (last xs)\n\ngoal (1 subgoal):\n 1. xs \\<noteq> [] \\<Longrightarrow> nextElem xs c (last xs) = c", "from notin"], ["proof (chain)\npicking this:\n  last xs \\<notin> set (butlast xs)", "have \"\\<dots> = c\""], ["proof (prove)\nusing this:\n  last xs \\<notin> set (butlast xs)\n\ngoal (1 subgoal):\n 1. nextElem (butlast xs @ [last xs]) c (last xs) = c", "by simp"], ["proof (state)\nthis:\n  nextElem (butlast xs @ [last xs]) c (last xs) = c\n\ngoal (1 subgoal):\n 1. xs \\<noteq> [] \\<Longrightarrow> nextElem xs c (last xs) = c", "finally"], ["proof (chain)\npicking this:\n  nextElem xs c (last xs) = c", "show ?thesis"], ["proof (prove)\nusing this:\n  nextElem xs c (last xs) = c\n\ngoal (1 subgoal):\n 1. nextElem xs c (last xs) = c", "."], ["proof (state)\nthis:\n  nextElem xs c (last xs) = c\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma prevElem_nextElem:\nassumes dist: \"distinct xs\" and xxs: \"x : set xs\"\nshows \"nextElem (rev xs) (last xs) (nextElem xs (hd xs) x) = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nextElem (rev xs) (last xs) (nextElem xs (hd xs) x) = x", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. nextElem (rev xs) (last xs) (nextElem xs (hd xs) x) = x", "define x' where \"x' = nextElem xs (hd xs) x\""], ["proof (state)\nthis:\n  x' = nextElem xs (hd xs) x\n\ngoal (1 subgoal):\n 1. nextElem (rev xs) (last xs) (nextElem xs (hd xs) x) = x", "hence nE: \"nextElem xs (hd xs) x = x'\""], ["proof (prove)\nusing this:\n  x' = nextElem xs (hd xs) x\n\ngoal (1 subgoal):\n 1. nextElem xs (hd xs) x = x'", "by simp"], ["proof (state)\nthis:\n  nextElem xs (hd xs) x = x'\n\ngoal (1 subgoal):\n 1. nextElem (rev xs) (last xs) (nextElem xs (hd xs) x) = x", "have \"xs \\<noteq> [] \\<and> x = last xs \\<and> x' = hd xs \\<or> (\\<exists>us vs. xs = us @ [x, x'] @ vs)\"\n    (is \"?A \\<or> ?B\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<noteq> [] \\<and> x = last xs \\<and> x' = hd xs \\<or>\n    (\\<exists>us vs. xs = us @ [x, x'] @ vs)", "using nextElem_cases[OF nE] xxs"], ["proof (prove)\nusing this:\n  x \\<notin> set xs \\<and> x' = hd xs \\<or>\n  xs \\<noteq> [] \\<and>\n  x = last xs \\<and> x' = hd xs \\<and> x \\<notin> set (butlast xs) \\<or>\n  (\\<exists>us vs. xs = us @ [x, x'] @ vs \\<and> x \\<notin> set us)\n  x \\<in> set xs\n\ngoal (1 subgoal):\n 1. xs \\<noteq> [] \\<and> x = last xs \\<and> x' = hd xs \\<or>\n    (\\<exists>us vs. xs = us @ [x, x'] @ vs)", "by blast"], ["proof (state)\nthis:\n  xs \\<noteq> [] \\<and> x = last xs \\<and> x' = hd xs \\<or>\n  (\\<exists>us vs. xs = us @ [x, x'] @ vs)\n\ngoal (1 subgoal):\n 1. nextElem (rev xs) (last xs) (nextElem xs (hd xs) x) = x", "thus ?thesis"], ["proof (prove)\nusing this:\n  xs \\<noteq> [] \\<and> x = last xs \\<and> x' = hd xs \\<or>\n  (\\<exists>us vs. xs = us @ [x, x'] @ vs)\n\ngoal (1 subgoal):\n 1. nextElem (rev xs) (last xs) (nextElem xs (hd xs) x) = x", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. xs \\<noteq> [] \\<and> x = last xs \\<and> x' = hd xs \\<Longrightarrow>\n    nextElem (rev xs) (last xs) (nextElem xs (hd xs) x) = x\n 2. \\<exists>us vs. xs = us @ [x, x'] @ vs \\<Longrightarrow>\n    nextElem (rev xs) (last xs) (nextElem xs (hd xs) x) = x", "assume ?A"], ["proof (state)\nthis:\n  xs \\<noteq> [] \\<and> x = last xs \\<and> x' = hd xs\n\ngoal (2 subgoals):\n 1. xs \\<noteq> [] \\<and> x = last xs \\<and> x' = hd xs \\<Longrightarrow>\n    nextElem (rev xs) (last xs) (nextElem xs (hd xs) x) = x\n 2. \\<exists>us vs. xs = us @ [x, x'] @ vs \\<Longrightarrow>\n    nextElem (rev xs) (last xs) (nextElem xs (hd xs) x) = x", "thus ?thesis"], ["proof (prove)\nusing this:\n  xs \\<noteq> [] \\<and> x = last xs \\<and> x' = hd xs\n\ngoal (1 subgoal):\n 1. nextElem (rev xs) (last xs) (nextElem xs (hd xs) x) = x", "using dist"], ["proof (prove)\nusing this:\n  xs \\<noteq> [] \\<and> x = last xs \\<and> x' = hd xs\n  distinct xs\n\ngoal (1 subgoal):\n 1. nextElem (rev xs) (last xs) (nextElem xs (hd xs) x) = x", "by(clarsimp simp:neq_Nil_conv)"], ["proof (state)\nthis:\n  nextElem (rev xs) (last xs) (nextElem xs (hd xs) x) = x\n\ngoal (1 subgoal):\n 1. \\<exists>us vs. xs = us @ [x, x'] @ vs \\<Longrightarrow>\n    nextElem (rev xs) (last xs) (nextElem xs (hd xs) x) = x", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>us vs. xs = us @ [x, x'] @ vs \\<Longrightarrow>\n    nextElem (rev xs) (last xs) (nextElem xs (hd xs) x) = x", "assume ?B"], ["proof (state)\nthis:\n  \\<exists>us vs. xs = us @ [x, x'] @ vs\n\ngoal (1 subgoal):\n 1. \\<exists>us vs. xs = us @ [x, x'] @ vs \\<Longrightarrow>\n    nextElem (rev xs) (last xs) (nextElem xs (hd xs) x) = x", "then"], ["proof (chain)\npicking this:\n  \\<exists>us vs. xs = us @ [x, x'] @ vs", "obtain us vs where [simp]: \"xs = us @ [x, x'] @ vs\""], ["proof (prove)\nusing this:\n  \\<exists>us vs. xs = us @ [x, x'] @ vs\n\ngoal (1 subgoal):\n 1. (\\<And>us vs.\n        xs = us @ [x, x'] @ vs \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  xs = us @ [x, x'] @ vs\n\ngoal (1 subgoal):\n 1. \\<exists>us vs. xs = us @ [x, x'] @ vs \\<Longrightarrow>\n    nextElem (rev xs) (last xs) (nextElem xs (hd xs) x) = x", "thus ?thesis"], ["proof (prove)\nusing this:\n  xs = us @ [x, x'] @ vs\n\ngoal (1 subgoal):\n 1. nextElem (rev xs) (last xs) (nextElem xs (hd xs) x) = x", "using dist"], ["proof (prove)\nusing this:\n  xs = us @ [x, x'] @ vs\n  distinct xs\n\ngoal (1 subgoal):\n 1. nextElem (rev xs) (last xs) (nextElem xs (hd xs) x) = x", "by simp"], ["proof (state)\nthis:\n  nextElem (rev xs) (last xs) (nextElem xs (hd xs) x) = x\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  nextElem (rev xs) (last xs) (nextElem xs (hd xs) x) = x\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma nextElem_prevElem:\n \"\\<lbrakk> distinct xs; x : set xs \\<rbrakk> \\<Longrightarrow>\n  nextElem xs (hd xs) (nextElem (rev xs) (last xs) x) = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>distinct xs; x \\<in> set xs\\<rbrakk>\n    \\<Longrightarrow> nextElem xs (hd xs) (nextElem (rev xs) (last xs) x) =\n                      x", "apply(cases \"xs = []\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>distinct xs; x \\<in> set xs; xs = []\\<rbrakk>\n    \\<Longrightarrow> nextElem xs (hd xs) (nextElem (rev xs) (last xs) x) =\n                      x\n 2. \\<lbrakk>distinct xs; x \\<in> set xs; xs \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> nextElem xs (hd xs) (nextElem (rev xs) (last xs) x) =\n                      x", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>distinct xs; x \\<in> set xs; xs \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> nextElem xs (hd xs) (nextElem (rev xs) (last xs) x) =\n                      x", "using prevElem_nextElem[where xs = \"rev xs\" and x=x]"], ["proof (prove)\nusing this:\n  \\<lbrakk>distinct (rev xs); x \\<in> set (rev xs)\\<rbrakk>\n  \\<Longrightarrow> nextElem (rev (rev xs)) (last (rev xs))\n                     (nextElem (rev xs) (hd (rev xs)) x) =\n                    x\n\ngoal (1 subgoal):\n 1. \\<lbrakk>distinct xs; x \\<in> set xs; xs \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> nextElem xs (hd xs) (nextElem (rev xs) (last xs) x) =\n                      x", "apply(simp add:hd_rev last_rev)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma nextElem_nth:\n \"\\<And>i. \\<lbrakk>distinct xs; i < length xs \\<rbrakk>\n   \\<Longrightarrow> nextElem xs z (xs!i) = (if length xs = i+1 then z else xs!(i+1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>distinct xs; i < |xs|\\<rbrakk>\n       \\<Longrightarrow> nextElem xs z (xs ! i) =\n                         (if |xs| = i + 1 then z else xs ! (i + 1))", "apply(induct xs)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>distinct []; i < |[]|\\<rbrakk>\n       \\<Longrightarrow> nextElem [] z ([] ! i) =\n                         (if |[]| = i + 1 then z else [] ! (i + 1))\n 2. \\<And>a xs i.\n       \\<lbrakk>\\<And>i.\n                   \\<lbrakk>distinct xs; i < |xs|\\<rbrakk>\n                   \\<Longrightarrow> nextElem xs z (xs ! i) =\n                                     (if |xs| = i + 1 then z\nelse xs ! (i + 1));\n        distinct (a # xs); i < |a # xs|\\<rbrakk>\n       \\<Longrightarrow> nextElem (a # xs) z ((a # xs) ! i) =\n                         (if |a # xs| = i + 1 then z\n                          else (a # xs) ! (i + 1))", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a xs i.\n       \\<lbrakk>\\<And>i.\n                   \\<lbrakk>distinct xs; i < |xs|\\<rbrakk>\n                   \\<Longrightarrow> nextElem xs z (xs ! i) =\n                                     (if |xs| = i + 1 then z\nelse xs ! (i + 1));\n        distinct (a # xs); i < |a # xs|\\<rbrakk>\n       \\<Longrightarrow> nextElem (a # xs) z ((a # xs) ! i) =\n                         (if |a # xs| = i + 1 then z\n                          else (a # xs) ! (i + 1))", "apply(case_tac i)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a xs i.\n       \\<lbrakk>\\<And>i.\n                   \\<lbrakk>distinct xs; i < |xs|\\<rbrakk>\n                   \\<Longrightarrow> nextElem xs z (xs ! i) =\n                                     (if |xs| = i + 1 then z\nelse xs ! (i + 1));\n        distinct (a # xs); i < |a # xs|; i = 0\\<rbrakk>\n       \\<Longrightarrow> nextElem (a # xs) z ((a # xs) ! i) =\n                         (if |a # xs| = i + 1 then z\n                          else (a # xs) ! (i + 1))\n 2. \\<And>a xs i nat.\n       \\<lbrakk>\\<And>i.\n                   \\<lbrakk>distinct xs; i < |xs|\\<rbrakk>\n                   \\<Longrightarrow> nextElem xs z (xs ! i) =\n                                     (if |xs| = i + 1 then z\nelse xs ! (i + 1));\n        distinct (a # xs); i < |a # xs|; i = Suc nat\\<rbrakk>\n       \\<Longrightarrow> nextElem (a # xs) z ((a # xs) ! i) =\n                         (if |a # xs| = i + 1 then z\n                          else (a # xs) ! (i + 1))", "apply(simp split:list.split)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a xs i nat.\n       \\<lbrakk>\\<And>i.\n                   \\<lbrakk>distinct xs; i < |xs|\\<rbrakk>\n                   \\<Longrightarrow> nextElem xs z (xs ! i) =\n                                     (if |xs| = i + 1 then z\nelse xs ! (i + 1));\n        distinct (a # xs); i < |a # xs|; i = Suc nat\\<rbrakk>\n       \\<Longrightarrow> nextElem (a # xs) z ((a # xs) ! i) =\n                         (if |a # xs| = i + 1 then z\n                          else (a # xs) ! (i + 1))", "apply clarsimp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsection \\<open>\\<open>nextVertex\\<close>\\<close>"], ["", "lemma nextVertex_in_face'[simp]:\n  \"vertices f \\<noteq> [] \\<Longrightarrow> f \\<bullet> v \\<in> \\<V> f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vertices f \\<noteq> [] \\<Longrightarrow> f \\<bullet> v \\<in> \\<V> f", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. vertices f \\<noteq> [] \\<Longrightarrow> f \\<bullet> v \\<in> \\<V> f", "assume f: \"vertices f \\<noteq> []\""], ["proof (state)\nthis:\n  vertices f \\<noteq> []\n\ngoal (1 subgoal):\n 1. vertices f \\<noteq> [] \\<Longrightarrow> f \\<bullet> v \\<in> \\<V> f", "define c where \"c = nextElem (vertices f) (hd (vertices f)) v\""], ["proof (state)\nthis:\n  c = nextElem (vertices f) (hd (vertices f)) v\n\ngoal (1 subgoal):\n 1. vertices f \\<noteq> [] \\<Longrightarrow> f \\<bullet> v \\<in> \\<V> f", "then"], ["proof (chain)\npicking this:\n  c = nextElem (vertices f) (hd (vertices f)) v", "have \"nextElem (vertices f) (hd (vertices f)) v = c\""], ["proof (prove)\nusing this:\n  c = nextElem (vertices f) (hd (vertices f)) v\n\ngoal (1 subgoal):\n 1. nextElem (vertices f) (hd (vertices f)) v = c", "by auto"], ["proof (state)\nthis:\n  nextElem (vertices f) (hd (vertices f)) v = c\n\ngoal (1 subgoal):\n 1. vertices f \\<noteq> [] \\<Longrightarrow> f \\<bullet> v \\<in> \\<V> f", "with f"], ["proof (chain)\npicking this:\n  vertices f \\<noteq> []\n  nextElem (vertices f) (hd (vertices f)) v = c", "show ?thesis"], ["proof (prove)\nusing this:\n  vertices f \\<noteq> []\n  nextElem (vertices f) (hd (vertices f)) v = c\n\ngoal (1 subgoal):\n 1. f \\<bullet> v \\<in> \\<V> f", "apply (simp add: nextVertex_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>vertices f \\<noteq> [];\n     nextElem (vertices f) (hd (vertices f)) v = c\\<rbrakk>\n    \\<Longrightarrow> c \\<in> \\<V> f", "apply (drule_tac nextElem_cases)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>vertices f \\<noteq> [];\n     v \\<notin> \\<V> f \\<and> c = hd (vertices f) \\<or>\n     vertices f \\<noteq> [] \\<and>\n     v = last (vertices f) \\<and>\n     c = hd (vertices f) \\<and> v \\<notin> set (butlast (vertices f)) \\<or>\n     (\\<exists>us vs.\n         vertices f = us @ [v, c] @ vs \\<and> v \\<notin> set us)\\<rbrakk>\n    \\<Longrightarrow> c \\<in> \\<V> f", "apply(fastforce simp:neq_Nil_conv)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  f \\<bullet> v \\<in> \\<V> f\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma nextVertex_in_face[simp]:\n  \"v \\<in> set (vertices f) \\<Longrightarrow> f \\<bullet> v \\<in> \\<V> f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<in> \\<V> f \\<Longrightarrow> f \\<bullet> v \\<in> \\<V> f", "by (auto intro: nextVertex_in_face')"], ["", "lemma nextVertex_prevVertex[simp]:\n \"\\<lbrakk> distinct(vertices f); v \\<in> \\<V> f \\<rbrakk>\n \\<Longrightarrow> f \\<bullet> (f\\<^bsup>-1\\<^esup> \\<bullet> v) = v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>distinct (vertices f); v \\<in> \\<V> f\\<rbrakk>\n    \\<Longrightarrow> f \\<bullet> (f\\<^bsup>-1\\<^esup> \\<bullet> v) = v", "by(simp add:prevVertex_def nextVertex_def nextElem_prevElem)"], ["", "lemma prevVertex_nextVertex[simp]:\n \"\\<lbrakk> distinct(vertices f); v \\<in> \\<V> f \\<rbrakk>\n \\<Longrightarrow> f\\<^bsup>-1\\<^esup> \\<bullet> (f \\<bullet> v) = v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>distinct (vertices f); v \\<in> \\<V> f\\<rbrakk>\n    \\<Longrightarrow> f\\<^bsup>-1\\<^esup> \\<bullet> (f \\<bullet> v) = v", "by(simp add:prevVertex_def nextVertex_def prevElem_nextElem)"], ["", "lemma prevVertex_in_face[simp]:\n \"v \\<in> \\<V> f \\<Longrightarrow> f\\<^bsup>-1\\<^esup> \\<bullet> v \\<in> \\<V> f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<in> \\<V> f \\<Longrightarrow>\n    f\\<^bsup>-1\\<^esup> \\<bullet> v \\<in> \\<V> f", "apply(cases \"vertices f = []\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>v \\<in> \\<V> f; vertices f = []\\<rbrakk>\n    \\<Longrightarrow> f\\<^bsup>-1\\<^esup> \\<bullet> v \\<in> \\<V> f\n 2. \\<lbrakk>v \\<in> \\<V> f; vertices f \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> f\\<^bsup>-1\\<^esup> \\<bullet> v \\<in> \\<V> f", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<in> \\<V> f; vertices f \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> f\\<^bsup>-1\\<^esup> \\<bullet> v \\<in> \\<V> f", "using nextElem_in[of \"rev (vertices f)\" \"(last (vertices f))\" v]"], ["proof (prove)\nusing this:\n  nextElem (rev (vertices f)) (last (vertices f)) v\n  \\<in> set (last (vertices f) # rev (vertices f))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<in> \\<V> f; vertices f \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> f\\<^bsup>-1\\<^esup> \\<bullet> v \\<in> \\<V> f", "apply (auto simp add: prevVertex_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma nextVertex_nth:\n \"\\<lbrakk> distinct(vertices f); i < |vertices f| \\<rbrakk> \\<Longrightarrow>\n  f \\<bullet> (vertices f ! i) = vertices f ! ((i+1) mod |vertices f| )\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>distinct (vertices f); i < |vertices f|\\<rbrakk>\n    \\<Longrightarrow> f \\<bullet> (vertices f ! i) =\n                      vertices f ! ((i + 1) mod |vertices f|)", "apply(cases \"vertices f = []\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>distinct (vertices f); i < |vertices f|;\n     vertices f = []\\<rbrakk>\n    \\<Longrightarrow> f \\<bullet> (vertices f ! i) =\n                      vertices f ! ((i + 1) mod |vertices f|)\n 2. \\<lbrakk>distinct (vertices f); i < |vertices f|;\n     vertices f \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> f \\<bullet> (vertices f ! i) =\n                      vertices f ! ((i + 1) mod |vertices f|)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>distinct (vertices f); i < |vertices f|;\n     vertices f \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> f \\<bullet> (vertices f ! i) =\n                      vertices f ! ((i + 1) mod |vertices f|)", "apply(simp add:nextVertex_def nextElem_nth hd_conv_nth)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsection \\<open>\\<open>\\<E>\\<close>\\<close>"], ["", "lemma edges_face_eq:\n \"((a,b) \\<in> \\<E> (f::face)) = ((f \\<bullet> a = b) \\<and> a \\<in> \\<V> f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((a, b) \\<in> \\<E> f) = (f \\<bullet> a = b \\<and> a \\<in> \\<V> f)", "by (auto simp add: edges_face_def)"], ["", "lemma edges_setFinal[simp]: \"\\<E>(setFinal f) = \\<E> f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<E> (setFinal f) = \\<E> f", "by(induct f)(simp add:setFinal_def edges_face_def nextVertex_def)"], ["", "lemma in_edges_in_vertices:\n \"(x,y) \\<in> \\<E>(f::face) \\<Longrightarrow> x \\<in> \\<V> f \\<and> y \\<in> \\<V> f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x, y) \\<in> \\<E> f \\<Longrightarrow>\n    x \\<in> \\<V> f \\<and> y \\<in> \\<V> f", "apply(simp add:edges_face_eq nextVertex_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nextElem (vertices f) (hd (vertices f)) x = y \\<and>\n    x \\<in> \\<V> f \\<Longrightarrow>\n    y \\<in> \\<V> f", "apply(cut_tac xs= \"vertices f\" and x= \"hd(vertices f)\" and y=x in nextElem_in)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>nextElem (vertices f) (hd (vertices f)) x = y \\<and>\n             x \\<in> \\<V> f;\n     nextElem (vertices f) (hd (vertices f)) x\n     \\<in> set (hd (vertices f) # vertices f)\\<rbrakk>\n    \\<Longrightarrow> y \\<in> \\<V> f", "apply(cases \"vertices f\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>nextElem (vertices f) (hd (vertices f)) x = y \\<and>\n             x \\<in> \\<V> f;\n     nextElem (vertices f) (hd (vertices f)) x\n     \\<in> set (hd (vertices f) # vertices f);\n     vertices f = []\\<rbrakk>\n    \\<Longrightarrow> y \\<in> \\<V> f\n 2. \\<And>a list.\n       \\<lbrakk>nextElem (vertices f) (hd (vertices f)) x = y \\<and>\n                x \\<in> \\<V> f;\n        nextElem (vertices f) (hd (vertices f)) x\n        \\<in> set (hd (vertices f) # vertices f);\n        vertices f = a # list\\<rbrakk>\n       \\<Longrightarrow> y \\<in> \\<V> f", "apply(auto)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma vertices_conv_Union_edges:\n \"\\<V>(f::face) = (\\<Union>(a,b)\\<in>\\<E> f. {a})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<V> f = (\\<Union>\\<^bsub>(a, b)\\<in>\\<E> f\\<^esub> {a})", "apply(induct f)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x1a x2a.\n       \\<V> (Face x1a x2a) =\n       (\\<Union>\\<^bsub>a\\<in>\\<E> (Face x1a x2a)\\<^esub>\n           case a of (a, b) \\<Rightarrow> {a})", "apply(simp add:vertices_face_def edges_face_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x1a x2a.\n       set x1a =\n       (\\<Union>\\<^bsub>x\\<in>{(a, Face x1a x2a \\<bullet> a) |a. a \\<in> set x1a}\\<^esub>\n           case x of (a, b) \\<Rightarrow> {a})", "apply blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma nextVertex_in_edges: \"v \\<in> \\<V> f \\<Longrightarrow> (v, f \\<bullet> v) \\<in> edges f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<in> \\<V> f \\<Longrightarrow> (v, f \\<bullet> v) \\<in> \\<E> f", "by(auto simp:edges_face_def)"], ["", "lemma prevVertex_in_edges:\n \"\\<lbrakk>distinct(vertices f); v \\<in> \\<V> f\\<rbrakk> \\<Longrightarrow> (f\\<^bsup>-1\\<^esup> \\<bullet> v, v) \\<in> edges f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>distinct (vertices f); v \\<in> \\<V> f\\<rbrakk>\n    \\<Longrightarrow> (f\\<^bsup>-1\\<^esup> \\<bullet> v, v) \\<in> \\<E> f", "by(simp add:edges_face_eq)"], ["", "subsection \\<open>Triangles\\<close>"], ["", "lemma vertices_triangle:\n   \"|vertices f| = 3 \\<Longrightarrow> a \\<in> \\<V> f \\<Longrightarrow>\n  distinct (vertices f) \\<Longrightarrow>\n  \\<V> f = {a, f \\<bullet> a, f \\<bullet> (f \\<bullet> a)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>triangle f; a \\<in> \\<V> f; distinct (vertices f)\\<rbrakk>\n    \\<Longrightarrow> \\<V> f =\n                      {a, f \\<bullet> a, f \\<bullet> (f \\<bullet> a)}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>triangle f; a \\<in> \\<V> f; distinct (vertices f)\\<rbrakk>\n    \\<Longrightarrow> \\<V> f =\n                      {a, f \\<bullet> a, f \\<bullet> (f \\<bullet> a)}", "assume \"|vertices f| = 3\""], ["proof (state)\nthis:\n  triangle f\n\ngoal (1 subgoal):\n 1. \\<lbrakk>triangle f; a \\<in> \\<V> f; distinct (vertices f)\\<rbrakk>\n    \\<Longrightarrow> \\<V> f =\n                      {a, f \\<bullet> a, f \\<bullet> (f \\<bullet> a)}", "then"], ["proof (chain)\npicking this:\n  triangle f", "obtain a1 a2 a3 where \"vertices f = [a1, a2, a3]\""], ["proof (prove)\nusing this:\n  triangle f\n\ngoal (1 subgoal):\n 1. (\\<And>a1 a2 a3.\n        vertices f = [a1, a2, a3] \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (auto dest!:  length3D)"], ["proof (state)\nthis:\n  vertices f = [a1, a2, a3]\n\ngoal (1 subgoal):\n 1. \\<lbrakk>triangle f; a \\<in> \\<V> f; distinct (vertices f)\\<rbrakk>\n    \\<Longrightarrow> \\<V> f =\n                      {a, f \\<bullet> a, f \\<bullet> (f \\<bullet> a)}", "moreover"], ["proof (state)\nthis:\n  vertices f = [a1, a2, a3]\n\ngoal (1 subgoal):\n 1. \\<lbrakk>triangle f; a \\<in> \\<V> f; distinct (vertices f)\\<rbrakk>\n    \\<Longrightarrow> \\<V> f =\n                      {a, f \\<bullet> a, f \\<bullet> (f \\<bullet> a)}", "assume \"a \\<in> \\<V> f\""], ["proof (state)\nthis:\n  a \\<in> \\<V> f\n\ngoal (1 subgoal):\n 1. \\<lbrakk>triangle f; a \\<in> \\<V> f; distinct (vertices f)\\<rbrakk>\n    \\<Longrightarrow> \\<V> f =\n                      {a, f \\<bullet> a, f \\<bullet> (f \\<bullet> a)}", "moreover"], ["proof (state)\nthis:\n  a \\<in> \\<V> f\n\ngoal (1 subgoal):\n 1. \\<lbrakk>triangle f; a \\<in> \\<V> f; distinct (vertices f)\\<rbrakk>\n    \\<Longrightarrow> \\<V> f =\n                      {a, f \\<bullet> a, f \\<bullet> (f \\<bullet> a)}", "assume \"distinct (vertices f)\""], ["proof (state)\nthis:\n  distinct (vertices f)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>triangle f; a \\<in> \\<V> f; distinct (vertices f)\\<rbrakk>\n    \\<Longrightarrow> \\<V> f =\n                      {a, f \\<bullet> a, f \\<bullet> (f \\<bullet> a)}", "ultimately"], ["proof (chain)\npicking this:\n  vertices f = [a1, a2, a3]\n  a \\<in> \\<V> f\n  distinct (vertices f)", "show ?thesis"], ["proof (prove)\nusing this:\n  vertices f = [a1, a2, a3]\n  a \\<in> \\<V> f\n  distinct (vertices f)\n\ngoal (1 subgoal):\n 1. \\<V> f = {a, f \\<bullet> a, f \\<bullet> (f \\<bullet> a)}", "by (simp, elim disjE) (auto simp add: nextVertex_def)"], ["proof (state)\nthis:\n  \\<V> f = {a, f \\<bullet> a, f \\<bullet> (f \\<bullet> a)}\n\ngoal:\nNo subgoals!", "qed"], ["", "(* could be generalized from 3 to n\n   but presburger would no longer do the job *)"], ["", "lemma tri_next3_id:\n \"|vertices f| = 3 \\<Longrightarrow> distinct(vertices f) \\<Longrightarrow> v \\<in> \\<V> f\n  \\<Longrightarrow> f \\<bullet> (f \\<bullet> (f \\<bullet> v)) = v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>triangle f; distinct (vertices f); v \\<in> \\<V> f\\<rbrakk>\n    \\<Longrightarrow> f \\<bullet> (f \\<bullet> (f \\<bullet> v)) = v", "apply(subgoal_tac \"\\<forall>(i::nat) < 3. (((((i+1) mod 3)+1) mod 3)+1) mod 3 = i\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>triangle f; distinct (vertices f); v \\<in> \\<V> f;\n     \\<forall>i<3. (((i + 1) mod 3 + 1) mod 3 + 1) mod 3 = i\\<rbrakk>\n    \\<Longrightarrow> f \\<bullet> (f \\<bullet> (f \\<bullet> v)) = v\n 2. \\<lbrakk>triangle f; distinct (vertices f); v \\<in> \\<V> f\\<rbrakk>\n    \\<Longrightarrow> \\<forall>i<3.\n                         (((i + 1) mod 3 + 1) mod 3 + 1) mod 3 = i", "apply(clarsimp simp:in_set_conv_nth nextVertex_nth)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>triangle f; distinct (vertices f); v \\<in> \\<V> f\\<rbrakk>\n    \\<Longrightarrow> \\<forall>i<3.\n                         (((i + 1) mod 3 + 1) mod 3 + 1) mod 3 = i", "apply(presburger)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma triangle_nextVertex_prevVertex:\n \"|vertices f| = 3 \\<Longrightarrow> a \\<in> \\<V> f \\<Longrightarrow>\n  distinct (vertices f) \\<Longrightarrow>\n  f \\<bullet> (f \\<bullet> a) = f\\<^bsup>-1\\<^esup> \\<bullet> a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>triangle f; a \\<in> \\<V> f; distinct (vertices f)\\<rbrakk>\n    \\<Longrightarrow> f \\<bullet> (f \\<bullet> a) =\n                      f\\<^bsup>-1\\<^esup> \\<bullet> a", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>triangle f; a \\<in> \\<V> f; distinct (vertices f)\\<rbrakk>\n    \\<Longrightarrow> f \\<bullet> (f \\<bullet> a) =\n                      f\\<^bsup>-1\\<^esup> \\<bullet> a", "assume \"|vertices f| = 3\""], ["proof (state)\nthis:\n  triangle f\n\ngoal (1 subgoal):\n 1. \\<lbrakk>triangle f; a \\<in> \\<V> f; distinct (vertices f)\\<rbrakk>\n    \\<Longrightarrow> f \\<bullet> (f \\<bullet> a) =\n                      f\\<^bsup>-1\\<^esup> \\<bullet> a", "then"], ["proof (chain)\npicking this:\n  triangle f", "obtain a1 a2 a3 where \"vertices f = [a1, a2, a3]\""], ["proof (prove)\nusing this:\n  triangle f\n\ngoal (1 subgoal):\n 1. (\\<And>a1 a2 a3.\n        vertices f = [a1, a2, a3] \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (auto dest!:length3D)"], ["proof (state)\nthis:\n  vertices f = [a1, a2, a3]\n\ngoal (1 subgoal):\n 1. \\<lbrakk>triangle f; a \\<in> \\<V> f; distinct (vertices f)\\<rbrakk>\n    \\<Longrightarrow> f \\<bullet> (f \\<bullet> a) =\n                      f\\<^bsup>-1\\<^esup> \\<bullet> a", "moreover"], ["proof (state)\nthis:\n  vertices f = [a1, a2, a3]\n\ngoal (1 subgoal):\n 1. \\<lbrakk>triangle f; a \\<in> \\<V> f; distinct (vertices f)\\<rbrakk>\n    \\<Longrightarrow> f \\<bullet> (f \\<bullet> a) =\n                      f\\<^bsup>-1\\<^esup> \\<bullet> a", "assume \"a \\<in> \\<V> f\""], ["proof (state)\nthis:\n  a \\<in> \\<V> f\n\ngoal (1 subgoal):\n 1. \\<lbrakk>triangle f; a \\<in> \\<V> f; distinct (vertices f)\\<rbrakk>\n    \\<Longrightarrow> f \\<bullet> (f \\<bullet> a) =\n                      f\\<^bsup>-1\\<^esup> \\<bullet> a", "moreover"], ["proof (state)\nthis:\n  a \\<in> \\<V> f\n\ngoal (1 subgoal):\n 1. \\<lbrakk>triangle f; a \\<in> \\<V> f; distinct (vertices f)\\<rbrakk>\n    \\<Longrightarrow> f \\<bullet> (f \\<bullet> a) =\n                      f\\<^bsup>-1\\<^esup> \\<bullet> a", "assume \"distinct (vertices f)\""], ["proof (state)\nthis:\n  distinct (vertices f)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>triangle f; a \\<in> \\<V> f; distinct (vertices f)\\<rbrakk>\n    \\<Longrightarrow> f \\<bullet> (f \\<bullet> a) =\n                      f\\<^bsup>-1\\<^esup> \\<bullet> a", "ultimately"], ["proof (chain)\npicking this:\n  vertices f = [a1, a2, a3]\n  a \\<in> \\<V> f\n  distinct (vertices f)", "show ?thesis"], ["proof (prove)\nusing this:\n  vertices f = [a1, a2, a3]\n  a \\<in> \\<V> f\n  distinct (vertices f)\n\ngoal (1 subgoal):\n 1. f \\<bullet> (f \\<bullet> a) = f\\<^bsup>-1\\<^esup> \\<bullet> a", "by (simp, elim disjE) (auto simp add: nextVertex_def prevVertex_def)"], ["proof (state)\nthis:\n  f \\<bullet> (f \\<bullet> a) = f\\<^bsup>-1\\<^esup> \\<bullet> a\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Quadrilaterals\\<close>"], ["", "lemma vertices_quad:\n  \"|vertices f| = 4 \\<Longrightarrow> a \\<in> \\<V> f \\<Longrightarrow>\n  distinct (vertices f) \\<Longrightarrow>\n  \\<V> f = {a, f \\<bullet> a, f \\<bullet> (f \\<bullet> a), f \\<bullet> (f \\<bullet> (f \\<bullet> a))}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>|vertices f| = 4; a \\<in> \\<V> f;\n     distinct (vertices f)\\<rbrakk>\n    \\<Longrightarrow> \\<V> f =\n                      {a, f \\<bullet> a, f \\<bullet> (f \\<bullet> a),\n                       f \\<bullet> (f \\<bullet> (f \\<bullet> a))}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>|vertices f| = 4; a \\<in> \\<V> f;\n     distinct (vertices f)\\<rbrakk>\n    \\<Longrightarrow> \\<V> f =\n                      {a, f \\<bullet> a, f \\<bullet> (f \\<bullet> a),\n                       f \\<bullet> (f \\<bullet> (f \\<bullet> a))}", "assume \"|vertices f| = 4\""], ["proof (state)\nthis:\n  |vertices f| = 4\n\ngoal (1 subgoal):\n 1. \\<lbrakk>|vertices f| = 4; a \\<in> \\<V> f;\n     distinct (vertices f)\\<rbrakk>\n    \\<Longrightarrow> \\<V> f =\n                      {a, f \\<bullet> a, f \\<bullet> (f \\<bullet> a),\n                       f \\<bullet> (f \\<bullet> (f \\<bullet> a))}", "then"], ["proof (chain)\npicking this:\n  |vertices f| = 4", "obtain a1 a2 a3 a4 where \"vertices f = [a1, a2, a3, a4]\""], ["proof (prove)\nusing this:\n  |vertices f| = 4\n\ngoal (1 subgoal):\n 1. (\\<And>a1 a2 a3 a4.\n        vertices f = [a1, a2, a3, a4] \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (auto dest!: length4D)"], ["proof (state)\nthis:\n  vertices f = [a1, a2, a3, a4]\n\ngoal (1 subgoal):\n 1. \\<lbrakk>|vertices f| = 4; a \\<in> \\<V> f;\n     distinct (vertices f)\\<rbrakk>\n    \\<Longrightarrow> \\<V> f =\n                      {a, f \\<bullet> a, f \\<bullet> (f \\<bullet> a),\n                       f \\<bullet> (f \\<bullet> (f \\<bullet> a))}", "moreover"], ["proof (state)\nthis:\n  vertices f = [a1, a2, a3, a4]\n\ngoal (1 subgoal):\n 1. \\<lbrakk>|vertices f| = 4; a \\<in> \\<V> f;\n     distinct (vertices f)\\<rbrakk>\n    \\<Longrightarrow> \\<V> f =\n                      {a, f \\<bullet> a, f \\<bullet> (f \\<bullet> a),\n                       f \\<bullet> (f \\<bullet> (f \\<bullet> a))}", "assume \"a \\<in> \\<V> f\""], ["proof (state)\nthis:\n  a \\<in> \\<V> f\n\ngoal (1 subgoal):\n 1. \\<lbrakk>|vertices f| = 4; a \\<in> \\<V> f;\n     distinct (vertices f)\\<rbrakk>\n    \\<Longrightarrow> \\<V> f =\n                      {a, f \\<bullet> a, f \\<bullet> (f \\<bullet> a),\n                       f \\<bullet> (f \\<bullet> (f \\<bullet> a))}", "moreover"], ["proof (state)\nthis:\n  a \\<in> \\<V> f\n\ngoal (1 subgoal):\n 1. \\<lbrakk>|vertices f| = 4; a \\<in> \\<V> f;\n     distinct (vertices f)\\<rbrakk>\n    \\<Longrightarrow> \\<V> f =\n                      {a, f \\<bullet> a, f \\<bullet> (f \\<bullet> a),\n                       f \\<bullet> (f \\<bullet> (f \\<bullet> a))}", "assume \"distinct (vertices f)\""], ["proof (state)\nthis:\n  distinct (vertices f)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>|vertices f| = 4; a \\<in> \\<V> f;\n     distinct (vertices f)\\<rbrakk>\n    \\<Longrightarrow> \\<V> f =\n                      {a, f \\<bullet> a, f \\<bullet> (f \\<bullet> a),\n                       f \\<bullet> (f \\<bullet> (f \\<bullet> a))}", "ultimately"], ["proof (chain)\npicking this:\n  vertices f = [a1, a2, a3, a4]\n  a \\<in> \\<V> f\n  distinct (vertices f)", "show ?thesis"], ["proof (prove)\nusing this:\n  vertices f = [a1, a2, a3, a4]\n  a \\<in> \\<V> f\n  distinct (vertices f)\n\ngoal (1 subgoal):\n 1. \\<V> f =\n    {a, f \\<bullet> a, f \\<bullet> (f \\<bullet> a),\n     f \\<bullet> (f \\<bullet> (f \\<bullet> a))}", "by (simp, elim disjE) (auto simp add: nextVertex_def)"], ["proof (state)\nthis:\n  \\<V> f =\n  {a, f \\<bullet> a, f \\<bullet> (f \\<bullet> a),\n   f \\<bullet> (f \\<bullet> (f \\<bullet> a))}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma quad_next4_id:\n \"\\<lbrakk> |vertices f| = 4; distinct(vertices f); v \\<in> \\<V> f \\<rbrakk> \\<Longrightarrow>\n  f \\<bullet> (f \\<bullet> (f \\<bullet> (f \\<bullet> v))) = v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>|vertices f| = 4; distinct (vertices f);\n     v \\<in> \\<V> f\\<rbrakk>\n    \\<Longrightarrow> f \\<bullet>\n                       (f \\<bullet> (f \\<bullet> (f \\<bullet> v))) =\n                      v", "apply(subgoal_tac \"\\<forall>(i::nat) < 4.\n (((((((i+1) mod 4)+1) mod 4)+1) mod 4)+1) mod 4 = i\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>|vertices f| = 4; distinct (vertices f); v \\<in> \\<V> f;\n     \\<forall>i<4.\n        ((((i + 1) mod 4 + 1) mod 4 + 1) mod 4 + 1) mod 4 = i\\<rbrakk>\n    \\<Longrightarrow> f \\<bullet>\n                       (f \\<bullet> (f \\<bullet> (f \\<bullet> v))) =\n                      v\n 2. \\<lbrakk>|vertices f| = 4; distinct (vertices f);\n     v \\<in> \\<V> f\\<rbrakk>\n    \\<Longrightarrow> \\<forall>i<4.\n                         ((((i + 1) mod 4 + 1) mod 4 + 1) mod 4 + 1) mod 4 =\n                         i", "apply(clarsimp simp:in_set_conv_nth nextVertex_nth)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>|vertices f| = 4; distinct (vertices f);\n     v \\<in> \\<V> f\\<rbrakk>\n    \\<Longrightarrow> \\<forall>i<4.\n                         ((((i + 1) mod 4 + 1) mod 4 + 1) mod 4 + 1) mod 4 =\n                         i", "apply(presburger)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma quad_nextVertex_prevVertex:\n \"|vertices f| = 4 \\<Longrightarrow> a \\<in> \\<V> f \\<Longrightarrow> distinct (vertices f) \\<Longrightarrow>\n  f \\<bullet> (f \\<bullet> (f \\<bullet> a)) = f\\<^bsup>-1\\<^esup> \\<bullet> a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>|vertices f| = 4; a \\<in> \\<V> f;\n     distinct (vertices f)\\<rbrakk>\n    \\<Longrightarrow> f \\<bullet> (f \\<bullet> (f \\<bullet> a)) =\n                      f\\<^bsup>-1\\<^esup> \\<bullet> a", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>|vertices f| = 4; a \\<in> \\<V> f;\n     distinct (vertices f)\\<rbrakk>\n    \\<Longrightarrow> f \\<bullet> (f \\<bullet> (f \\<bullet> a)) =\n                      f\\<^bsup>-1\\<^esup> \\<bullet> a", "assume \"|vertices f| = 4\""], ["proof (state)\nthis:\n  |vertices f| = 4\n\ngoal (1 subgoal):\n 1. \\<lbrakk>|vertices f| = 4; a \\<in> \\<V> f;\n     distinct (vertices f)\\<rbrakk>\n    \\<Longrightarrow> f \\<bullet> (f \\<bullet> (f \\<bullet> a)) =\n                      f\\<^bsup>-1\\<^esup> \\<bullet> a", "then"], ["proof (chain)\npicking this:\n  |vertices f| = 4", "obtain a1 a2 a3 a4 where \"vertices f = [a1, a2, a3, a4]\""], ["proof (prove)\nusing this:\n  |vertices f| = 4\n\ngoal (1 subgoal):\n 1. (\\<And>a1 a2 a3 a4.\n        vertices f = [a1, a2, a3, a4] \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (auto dest!: length4D)"], ["proof (state)\nthis:\n  vertices f = [a1, a2, a3, a4]\n\ngoal (1 subgoal):\n 1. \\<lbrakk>|vertices f| = 4; a \\<in> \\<V> f;\n     distinct (vertices f)\\<rbrakk>\n    \\<Longrightarrow> f \\<bullet> (f \\<bullet> (f \\<bullet> a)) =\n                      f\\<^bsup>-1\\<^esup> \\<bullet> a", "moreover"], ["proof (state)\nthis:\n  vertices f = [a1, a2, a3, a4]\n\ngoal (1 subgoal):\n 1. \\<lbrakk>|vertices f| = 4; a \\<in> \\<V> f;\n     distinct (vertices f)\\<rbrakk>\n    \\<Longrightarrow> f \\<bullet> (f \\<bullet> (f \\<bullet> a)) =\n                      f\\<^bsup>-1\\<^esup> \\<bullet> a", "assume \"a \\<in> \\<V> f\""], ["proof (state)\nthis:\n  a \\<in> \\<V> f\n\ngoal (1 subgoal):\n 1. \\<lbrakk>|vertices f| = 4; a \\<in> \\<V> f;\n     distinct (vertices f)\\<rbrakk>\n    \\<Longrightarrow> f \\<bullet> (f \\<bullet> (f \\<bullet> a)) =\n                      f\\<^bsup>-1\\<^esup> \\<bullet> a", "moreover"], ["proof (state)\nthis:\n  a \\<in> \\<V> f\n\ngoal (1 subgoal):\n 1. \\<lbrakk>|vertices f| = 4; a \\<in> \\<V> f;\n     distinct (vertices f)\\<rbrakk>\n    \\<Longrightarrow> f \\<bullet> (f \\<bullet> (f \\<bullet> a)) =\n                      f\\<^bsup>-1\\<^esup> \\<bullet> a", "assume \"distinct (vertices f)\""], ["proof (state)\nthis:\n  distinct (vertices f)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>|vertices f| = 4; a \\<in> \\<V> f;\n     distinct (vertices f)\\<rbrakk>\n    \\<Longrightarrow> f \\<bullet> (f \\<bullet> (f \\<bullet> a)) =\n                      f\\<^bsup>-1\\<^esup> \\<bullet> a", "ultimately"], ["proof (chain)\npicking this:\n  vertices f = [a1, a2, a3, a4]\n  a \\<in> \\<V> f\n  distinct (vertices f)", "show ?thesis"], ["proof (prove)\nusing this:\n  vertices f = [a1, a2, a3, a4]\n  a \\<in> \\<V> f\n  distinct (vertices f)\n\ngoal (1 subgoal):\n 1. f \\<bullet> (f \\<bullet> (f \\<bullet> a)) =\n    f\\<^bsup>-1\\<^esup> \\<bullet> a", "by (auto) (auto simp add: nextVertex_def prevVertex_def)"], ["proof (state)\nthis:\n  f \\<bullet> (f \\<bullet> (f \\<bullet> a)) =\n  f\\<^bsup>-1\\<^esup> \\<bullet> a\n\ngoal:\nNo subgoals!", "qed"], ["", "(*\nlemma C0[dest]: \"f \\<in> set (facesAt g v) \\<Longrightarrow> v \\<in> \\<V> g\"\n  by (simp add: facesAt_def split: if_split_asm)\n*)"], ["", "lemma len_faces_sum: \"|faces g| = |finals g| + |nonFinals g|\""], ["proof (prove)\ngoal (1 subgoal):\n 1. |faces g| = |finals g| + |nonFinals g|", "by(simp add:finals_def nonFinals_def sum_length_filter_compl)"], ["", "lemma graph_max_final_ex:\n \"\\<exists>f\\<in>set (finals (graph n)). |vertices f| = n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>f\\<in>set (finals (graph n)). |vertices f| = n", "proof (induct \"n\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>f\\<in>set (finals (graph 0)). |vertices f| = 0\n 2. \\<And>n.\n       \\<exists>f\\<in>set (finals (graph n)).\n          |vertices f| = n \\<Longrightarrow>\n       \\<exists>f\\<in>set (finals (graph (Suc n))). |vertices f| = Suc n", "case 0"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<exists>f\\<in>set (finals (graph 0)). |vertices f| = 0\n 2. \\<And>n.\n       \\<exists>f\\<in>set (finals (graph n)).\n          |vertices f| = n \\<Longrightarrow>\n       \\<exists>f\\<in>set (finals (graph (Suc n))). |vertices f| = Suc n", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>f\\<in>set (finals (graph 0)). |vertices f| = 0", "by (simp add: graph_def finals_def)"], ["proof (state)\nthis:\n  \\<exists>f\\<in>set (finals (graph 0)). |vertices f| = 0\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<exists>f\\<in>set (finals (graph n)).\n          |vertices f| = n \\<Longrightarrow>\n       \\<exists>f\\<in>set (finals (graph (Suc n))). |vertices f| = Suc n", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<exists>f\\<in>set (finals (graph n)).\n          |vertices f| = n \\<Longrightarrow>\n       \\<exists>f\\<in>set (finals (graph (Suc n))). |vertices f| = Suc n", "case (Suc n)"], ["proof (state)\nthis:\n  \\<exists>f\\<in>set (finals (graph n)). |vertices f| = n\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<exists>f\\<in>set (finals (graph n)).\n          |vertices f| = n \\<Longrightarrow>\n       \\<exists>f\\<in>set (finals (graph (Suc n))). |vertices f| = Suc n", "then"], ["proof (chain)\npicking this:\n  \\<exists>f\\<in>set (finals (graph n)). |vertices f| = n", "show ?case"], ["proof (prove)\nusing this:\n  \\<exists>f\\<in>set (finals (graph n)). |vertices f| = n\n\ngoal (1 subgoal):\n 1. \\<exists>f\\<in>set (finals (graph (Suc n))). |vertices f| = Suc n", "by (simp add: graph_def finals_def)"], ["proof (state)\nthis:\n  \\<exists>f\\<in>set (finals (graph (Suc n))). |vertices f| = Suc n\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection\\<open>No loops\\<close>"], ["", "lemma distinct_no_loop2:\n \"\\<lbrakk> distinct(vertices f); v \\<in> \\<V> f; u \\<in> \\<V> f; u \\<noteq> v \\<rbrakk> \\<Longrightarrow> f \\<bullet> v \\<noteq> v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>distinct (vertices f); v \\<in> \\<V> f; u \\<in> \\<V> f;\n     u \\<noteq> v\\<rbrakk>\n    \\<Longrightarrow> f \\<bullet> v \\<noteq> v", "apply(frule split_list[of v])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>distinct (vertices f); v \\<in> \\<V> f; u \\<in> \\<V> f;\n     u \\<noteq> v; \\<exists>ys zs. vertices f = ys @ v # zs\\<rbrakk>\n    \\<Longrightarrow> f \\<bullet> v \\<noteq> v", "apply(clarsimp simp: nextVertex_def neq_Nil_conv hd_append\n  split:list.splits if_split_asm)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma distinct_no_loop1:\n \"\\<lbrakk> distinct(vertices f); v \\<in> \\<V> f; |vertices f| > 1 \\<rbrakk> \\<Longrightarrow> f \\<bullet> v \\<noteq> v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>distinct (vertices f); v \\<in> \\<V> f;\n     1 < |vertices f|\\<rbrakk>\n    \\<Longrightarrow> f \\<bullet> v \\<noteq> v", "apply(subgoal_tac \"\\<exists>u \\<in> \\<V> f. u \\<noteq> v\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>distinct (vertices f); v \\<in> \\<V> f; 1 < |vertices f|;\n     \\<exists>u\\<in>\\<V> f. u \\<noteq> v\\<rbrakk>\n    \\<Longrightarrow> f \\<bullet> v \\<noteq> v\n 2. \\<lbrakk>distinct (vertices f); v \\<in> \\<V> f;\n     1 < |vertices f|\\<rbrakk>\n    \\<Longrightarrow> \\<exists>u\\<in>\\<V> f. u \\<noteq> v", "apply(blast dest:distinct_no_loop2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>distinct (vertices f); v \\<in> \\<V> f;\n     1 < |vertices f|\\<rbrakk>\n    \\<Longrightarrow> \\<exists>u\\<in>\\<V> f. u \\<noteq> v", "apply(cases \"vertices f\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>distinct (vertices f); v \\<in> \\<V> f; 1 < |vertices f|;\n     vertices f = []\\<rbrakk>\n    \\<Longrightarrow> \\<exists>u\\<in>\\<V> f. u \\<noteq> v\n 2. \\<And>a list.\n       \\<lbrakk>distinct (vertices f); v \\<in> \\<V> f; 1 < |vertices f|;\n        vertices f = a # list\\<rbrakk>\n       \\<Longrightarrow> \\<exists>u\\<in>\\<V> f. u \\<noteq> v", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a list.\n       \\<lbrakk>distinct (vertices f); v \\<in> \\<V> f; 1 < |vertices f|;\n        vertices f = a # list\\<rbrakk>\n       \\<Longrightarrow> \\<exists>u\\<in>\\<V> f. u \\<noteq> v", "apply(rename_tac a as)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a as.\n       \\<lbrakk>distinct (vertices f); v \\<in> \\<V> f; 1 < |vertices f|;\n        vertices f = a # as\\<rbrakk>\n       \\<Longrightarrow> \\<exists>u\\<in>\\<V> f. u \\<noteq> v", "apply (clarsimp simp:neq_Nil_conv)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsection\\<open>@{const between}\\<close>"], ["", "lemma between_front[simp]:\n \"v \\<notin> set us \\<Longrightarrow> between (u # us @ v # vs) u v = us\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<notin> set us \\<Longrightarrow> between (u # us @ v # vs) u v = us", "by(simp add:between_def split_def)"], ["", "lemma between_back:\n \"\\<lbrakk> v \\<notin> set us; u \\<notin> set vs; v \\<noteq> u \\<rbrakk> \\<Longrightarrow> between (v # vs @ u # us) u v = us\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<notin> set us; u \\<notin> set vs; v \\<noteq> u\\<rbrakk>\n    \\<Longrightarrow> between (v # vs @ u # us) u v = us", "by(simp add:between_def split_def)"], ["", "lemma next_between:\n \"\\<lbrakk>distinct(vertices f); v \\<in> \\<V> f; u \\<in> \\<V> f; f \\<bullet> v \\<noteq> u \\<rbrakk>\n  \\<Longrightarrow> f \\<bullet> v \\<in> set(between (vertices f) v u)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>distinct (vertices f); v \\<in> \\<V> f; u \\<in> \\<V> f;\n     f \\<bullet> v \\<noteq> u\\<rbrakk>\n    \\<Longrightarrow> f \\<bullet> v \\<in> set (between (vertices f) v u)", "apply(frule split_list[of u])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>distinct (vertices f); v \\<in> \\<V> f; u \\<in> \\<V> f;\n     f \\<bullet> v \\<noteq> u;\n     \\<exists>ys zs. vertices f = ys @ u # zs\\<rbrakk>\n    \\<Longrightarrow> f \\<bullet> v \\<in> set (between (vertices f) v u)", "apply(clarsimp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ys zs.\n       \\<lbrakk>v = u \\<or> v \\<in> set ys \\<or> v \\<in> set zs;\n        f \\<bullet> v \\<noteq> u; vertices f = ys @ u # zs; distinct ys;\n        u \\<notin> set zs; distinct zs; u \\<notin> set ys;\n        set ys \\<inter> set zs = {}\\<rbrakk>\n       \\<Longrightarrow> f \\<bullet> v \\<in> set (between (ys @ u # zs) v u)", "apply(erule disjE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>ys zs.\n       \\<lbrakk>f \\<bullet> v \\<noteq> u; vertices f = ys @ u # zs;\n        distinct ys; u \\<notin> set zs; distinct zs; u \\<notin> set ys;\n        set ys \\<inter> set zs = {}; v = u\\<rbrakk>\n       \\<Longrightarrow> f \\<bullet> v \\<in> set (between (ys @ u # zs) v u)\n 2. \\<And>ys zs.\n       \\<lbrakk>f \\<bullet> v \\<noteq> u; vertices f = ys @ u # zs;\n        distinct ys; u \\<notin> set zs; distinct zs; u \\<notin> set ys;\n        set ys \\<inter> set zs = {};\n        v \\<in> set ys \\<or> v \\<in> set zs\\<rbrakk>\n       \\<Longrightarrow> f \\<bullet> v \\<in> set (between (ys @ u # zs) v u)", "apply(clarsimp simp:set_between_id nextVertex_def hd_append split:list.split)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ys zs.\n       \\<lbrakk>f \\<bullet> v \\<noteq> u; vertices f = ys @ u # zs;\n        distinct ys; u \\<notin> set zs; distinct zs; u \\<notin> set ys;\n        set ys \\<inter> set zs = {};\n        v \\<in> set ys \\<or> v \\<in> set zs\\<rbrakk>\n       \\<Longrightarrow> f \\<bullet> v \\<in> set (between (ys @ u # zs) v u)", "apply(erule disjE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>ys zs.\n       \\<lbrakk>f \\<bullet> v \\<noteq> u; vertices f = ys @ u # zs;\n        distinct ys; u \\<notin> set zs; distinct zs; u \\<notin> set ys;\n        set ys \\<inter> set zs = {}; v \\<in> set ys\\<rbrakk>\n       \\<Longrightarrow> f \\<bullet> v \\<in> set (between (ys @ u # zs) v u)\n 2. \\<And>ys zs.\n       \\<lbrakk>f \\<bullet> v \\<noteq> u; vertices f = ys @ u # zs;\n        distinct ys; u \\<notin> set zs; distinct zs; u \\<notin> set ys;\n        set ys \\<inter> set zs = {}; v \\<in> set zs\\<rbrakk>\n       \\<Longrightarrow> f \\<bullet> v \\<in> set (between (ys @ u # zs) v u)", "apply(frule split_list[of v])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>ys zs.\n       \\<lbrakk>f \\<bullet> v \\<noteq> u; vertices f = ys @ u # zs;\n        distinct ys; u \\<notin> set zs; distinct zs; u \\<notin> set ys;\n        set ys \\<inter> set zs = {}; v \\<in> set ys;\n        \\<exists>ysa zs. ys = ysa @ v # zs\\<rbrakk>\n       \\<Longrightarrow> f \\<bullet> v \\<in> set (between (ys @ u # zs) v u)\n 2. \\<And>ys zs.\n       \\<lbrakk>f \\<bullet> v \\<noteq> u; vertices f = ys @ u # zs;\n        distinct ys; u \\<notin> set zs; distinct zs; u \\<notin> set ys;\n        set ys \\<inter> set zs = {}; v \\<in> set zs\\<rbrakk>\n       \\<Longrightarrow> f \\<bullet> v \\<in> set (between (ys @ u # zs) v u)", "apply(clarsimp simp: between_def split_def nextVertex_def split:list.split)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>zs ysa zsa x21 x22.\n       \\<lbrakk>x21 \\<noteq> u; vertices f = ysa @ v # x21 # x22;\n        u \\<notin> set zs; distinct zs; distinct ysa; u \\<noteq> v;\n        v \\<notin> set zs; (set ysa \\<union> set zsa) \\<inter> set zs = {};\n        v \\<notin> set zsa; u \\<notin> set ysa; u \\<notin> set zsa;\n        distinct zsa; v \\<notin> set ysa; set ysa \\<inter> set zsa = {};\n        zsa @ u # zs = x21 # x22\\<rbrakk>\n       \\<Longrightarrow> x21 \\<in> set zsa\n 2. \\<And>ys zs.\n       \\<lbrakk>f \\<bullet> v \\<noteq> u; vertices f = ys @ u # zs;\n        distinct ys; u \\<notin> set zs; distinct zs; u \\<notin> set ys;\n        set ys \\<inter> set zs = {}; v \\<in> set zs\\<rbrakk>\n       \\<Longrightarrow> f \\<bullet> v \\<in> set (between (ys @ u # zs) v u)", "apply(clarsimp simp:append_eq_Cons_conv)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ys zs.\n       \\<lbrakk>f \\<bullet> v \\<noteq> u; vertices f = ys @ u # zs;\n        distinct ys; u \\<notin> set zs; distinct zs; u \\<notin> set ys;\n        set ys \\<inter> set zs = {}; v \\<in> set zs\\<rbrakk>\n       \\<Longrightarrow> f \\<bullet> v \\<in> set (between (ys @ u # zs) v u)", "apply(frule split_list[of v])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ys zs.\n       \\<lbrakk>f \\<bullet> v \\<noteq> u; vertices f = ys @ u # zs;\n        distinct ys; u \\<notin> set zs; distinct zs; u \\<notin> set ys;\n        set ys \\<inter> set zs = {}; v \\<in> set zs;\n        \\<exists>ys zsa. zs = ys @ v # zsa\\<rbrakk>\n       \\<Longrightarrow> f \\<bullet> v \\<in> set (between (ys @ u # zs) v u)", "apply(clarsimp simp: between_def split_def nextVertex_def split:list.split)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ys ysa.\n       \\<lbrakk>hd (ys @ u # ysa @ [v]) \\<noteq> u;\n        vertices f = ys @ u # ysa @ [v]; distinct ys; u \\<notin> set ys;\n        u \\<noteq> v; distinct ysa; v \\<notin> set ys;\n        set ys \\<inter> set ysa = {}; u \\<notin> set ysa;\n        v \\<notin> set ysa\\<rbrakk>\n       \\<Longrightarrow> hd (ys @ u # ysa @ [v]) \\<in> set ys", "apply(clarsimp simp: hd_append)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma next_between2:\n \"\\<lbrakk> distinct(vertices f); v \\<in> \\<V> f; u \\<in> \\<V> f; u \\<noteq> v \\<rbrakk> \\<Longrightarrow>\n  v \\<in> set(between (vertices f) u (f \\<bullet> v))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>distinct (vertices f); v \\<in> \\<V> f; u \\<in> \\<V> f;\n     u \\<noteq> v\\<rbrakk>\n    \\<Longrightarrow> v \\<in> set (between (vertices f) u (f \\<bullet> v))", "apply(frule split_list[of u])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>distinct (vertices f); v \\<in> \\<V> f; u \\<in> \\<V> f;\n     u \\<noteq> v; \\<exists>ys zs. vertices f = ys @ u # zs\\<rbrakk>\n    \\<Longrightarrow> v \\<in> set (between (vertices f) u (f \\<bullet> v))", "apply(clarsimp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ys zs.\n       \\<lbrakk>v \\<in> set ys \\<or> v \\<in> set zs; u \\<noteq> v;\n        vertices f = ys @ u # zs; distinct ys; u \\<notin> set zs;\n        distinct zs; u \\<notin> set ys; set ys \\<inter> set zs = {}\\<rbrakk>\n       \\<Longrightarrow> v \\<in> set (between (ys @ u # zs) u\n (f \\<bullet> v))", "apply(erule disjE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>ys zs.\n       \\<lbrakk>u \\<noteq> v; vertices f = ys @ u # zs; distinct ys;\n        u \\<notin> set zs; distinct zs; u \\<notin> set ys;\n        set ys \\<inter> set zs = {}; v \\<in> set ys\\<rbrakk>\n       \\<Longrightarrow> v \\<in> set (between (ys @ u # zs) u\n (f \\<bullet> v))\n 2. \\<And>ys zs.\n       \\<lbrakk>u \\<noteq> v; vertices f = ys @ u # zs; distinct ys;\n        u \\<notin> set zs; distinct zs; u \\<notin> set ys;\n        set ys \\<inter> set zs = {}; v \\<in> set zs\\<rbrakk>\n       \\<Longrightarrow> v \\<in> set (between (ys @ u # zs) u\n (f \\<bullet> v))", "apply(clarsimp simp: nextVertex_def hd_append split:list.split)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>ys zs.\n       \\<lbrakk>u \\<noteq> v; vertices f = ys @ u # zs; distinct ys;\n        u \\<notin> set zs; distinct zs; u \\<notin> set ys;\n        set ys \\<inter> set zs = {}; v \\<in> set ys\\<rbrakk>\n       \\<Longrightarrow> (ys = [] \\<longrightarrow>\n                          v \\<in> set (between (u # zs) u\n  (nextElem zs u v))) \\<and>\n                         (ys \\<noteq> [] \\<longrightarrow>\n                          v \\<in> set (between (ys @ u # zs) u\n  (nextElem (ys @ u # zs) (hd ys) v)))\n 2. \\<And>ys zs.\n       \\<lbrakk>u \\<noteq> v; vertices f = ys @ u # zs; distinct ys;\n        u \\<notin> set zs; distinct zs; u \\<notin> set ys;\n        set ys \\<inter> set zs = {}; v \\<in> set zs\\<rbrakk>\n       \\<Longrightarrow> v \\<in> set (between (ys @ u # zs) u\n (f \\<bullet> v))", "apply(rule conjI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>ys zs.\n       \\<lbrakk>u \\<noteq> v; vertices f = ys @ u # zs; distinct ys;\n        u \\<notin> set zs; distinct zs; u \\<notin> set ys;\n        set ys \\<inter> set zs = {}; v \\<in> set ys\\<rbrakk>\n       \\<Longrightarrow> ys = [] \\<longrightarrow>\n                         v \\<in> set (between (u # zs) u (nextElem zs u v))\n 2. \\<And>ys zs.\n       \\<lbrakk>u \\<noteq> v; vertices f = ys @ u # zs; distinct ys;\n        u \\<notin> set zs; distinct zs; u \\<notin> set ys;\n        set ys \\<inter> set zs = {}; v \\<in> set ys\\<rbrakk>\n       \\<Longrightarrow> ys \\<noteq> [] \\<longrightarrow>\n                         v \\<in> set (between (ys @ u # zs) u\n (nextElem (ys @ u # zs) (hd ys) v))\n 3. \\<And>ys zs.\n       \\<lbrakk>u \\<noteq> v; vertices f = ys @ u # zs; distinct ys;\n        u \\<notin> set zs; distinct zs; u \\<notin> set ys;\n        set ys \\<inter> set zs = {}; v \\<in> set zs\\<rbrakk>\n       \\<Longrightarrow> v \\<in> set (between (ys @ u # zs) u\n (f \\<bullet> v))", "apply(clarsimp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>ys zs.\n       \\<lbrakk>u \\<noteq> v; vertices f = ys @ u # zs; distinct ys;\n        u \\<notin> set zs; distinct zs; u \\<notin> set ys;\n        set ys \\<inter> set zs = {}; v \\<in> set ys\\<rbrakk>\n       \\<Longrightarrow> ys \\<noteq> [] \\<longrightarrow>\n                         v \\<in> set (between (ys @ u # zs) u\n (nextElem (ys @ u # zs) (hd ys) v))\n 2. \\<And>ys zs.\n       \\<lbrakk>u \\<noteq> v; vertices f = ys @ u # zs; distinct ys;\n        u \\<notin> set zs; distinct zs; u \\<notin> set ys;\n        set ys \\<inter> set zs = {}; v \\<in> set zs\\<rbrakk>\n       \\<Longrightarrow> v \\<in> set (between (ys @ u # zs) u\n (f \\<bullet> v))", "apply(frule split_list[of v])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>ys zs.\n       \\<lbrakk>u \\<noteq> v; vertices f = ys @ u # zs; distinct ys;\n        u \\<notin> set zs; distinct zs; u \\<notin> set ys;\n        set ys \\<inter> set zs = {}; v \\<in> set ys;\n        \\<exists>ysa zs. ys = ysa @ v # zs\\<rbrakk>\n       \\<Longrightarrow> ys \\<noteq> [] \\<longrightarrow>\n                         v \\<in> set (between (ys @ u # zs) u\n (nextElem (ys @ u # zs) (hd ys) v))\n 2. \\<And>ys zs.\n       \\<lbrakk>u \\<noteq> v; vertices f = ys @ u # zs; distinct ys;\n        u \\<notin> set zs; distinct zs; u \\<notin> set ys;\n        set ys \\<inter> set zs = {}; v \\<in> set zs\\<rbrakk>\n       \\<Longrightarrow> v \\<in> set (between (ys @ u # zs) u\n (f \\<bullet> v))", "apply(clarsimp simp: between_def split_def split:list.split)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>zs ysa zsa x21 x22.\n       \\<lbrakk>u \\<noteq> v; vertices f = ysa @ v # x21 # x22;\n        u \\<notin> set zs; distinct zs; distinct ysa; u \\<notin> set ysa;\n        u \\<notin> set zsa; v \\<notin> set zs;\n        (set ysa \\<union> set zsa) \\<inter> set zs = {}; v \\<notin> set zsa;\n        distinct zsa; v \\<notin> set ysa; set ysa \\<inter> set zsa = {};\n        zsa @ u # zs = x21 # x22\\<rbrakk>\n       \\<Longrightarrow> (x21 \\<in> set zs \\<longrightarrow>\n                          v \\<in> set (fst (splitAt x21 zs))) \\<and>\n                         (x21 \\<notin> set zs \\<longrightarrow>\n                          v \\<in> set (fst (splitAt x21 (ysa @ v # zsa))))\n 2. \\<And>ys zs.\n       \\<lbrakk>u \\<noteq> v; vertices f = ys @ u # zs; distinct ys;\n        u \\<notin> set zs; distinct zs; u \\<notin> set ys;\n        set ys \\<inter> set zs = {}; v \\<in> set zs\\<rbrakk>\n       \\<Longrightarrow> v \\<in> set (between (ys @ u # zs) u\n (f \\<bullet> v))", "apply(fastforce simp: append_eq_Cons_conv)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ys zs.\n       \\<lbrakk>u \\<noteq> v; vertices f = ys @ u # zs; distinct ys;\n        u \\<notin> set zs; distinct zs; u \\<notin> set ys;\n        set ys \\<inter> set zs = {}; v \\<in> set zs\\<rbrakk>\n       \\<Longrightarrow> v \\<in> set (between (ys @ u # zs) u\n (f \\<bullet> v))", "apply(frule split_list[of v])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ys zs.\n       \\<lbrakk>u \\<noteq> v; vertices f = ys @ u # zs; distinct ys;\n        u \\<notin> set zs; distinct zs; u \\<notin> set ys;\n        set ys \\<inter> set zs = {}; v \\<in> set zs;\n        \\<exists>ys zsa. zs = ys @ v # zsa\\<rbrakk>\n       \\<Longrightarrow> v \\<in> set (between (ys @ u # zs) u\n (f \\<bullet> v))", "apply(clarsimp simp: between_def split_def nextVertex_def split:list.splits)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ys ysa.\n       \\<lbrakk>u \\<noteq> v; vertices f = ys @ u # ysa @ [v]; distinct ys;\n        u \\<notin> set ys; u \\<notin> set ysa; distinct ysa;\n        v \\<notin> set ys; set ys \\<inter> set ysa = {}; v \\<notin> set ysa;\n        hd (ys @ u # ysa @ [v]) = v \\<or>\n        hd (ys @ u # ysa @ [v]) \\<in> set ysa\\<rbrakk>\n       \\<Longrightarrow> v \\<in> set (fst\n (splitAt (hd (ys @ u # ysa @ [v])) (ysa @ [v])))", "apply(clarsimp simp: hd_append)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ys ysa.\n       \\<lbrakk>u \\<noteq> v; vertices f = ys @ u # ysa @ [v]; distinct ys;\n        u \\<notin> set ys; u \\<notin> set ysa; distinct ysa;\n        v \\<notin> set ys; set ys \\<inter> set ysa = {}; v \\<notin> set ysa;\n        hd ys = v \\<or> hd ys \\<in> set ysa; ys \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> v \\<in> set (fst (splitAt (hd ys) (ysa @ [v])))", "apply(erule disjE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>ys ysa.\n       \\<lbrakk>u \\<noteq> v; vertices f = ys @ u # ysa @ [v]; distinct ys;\n        u \\<notin> set ys; u \\<notin> set ysa; distinct ysa;\n        v \\<notin> set ys; set ys \\<inter> set ysa = {}; v \\<notin> set ysa;\n        ys \\<noteq> []; hd ys = v\\<rbrakk>\n       \\<Longrightarrow> v \\<in> set (fst (splitAt (hd ys) (ysa @ [v])))\n 2. \\<And>ys ysa.\n       \\<lbrakk>u \\<noteq> v; vertices f = ys @ u # ysa @ [v]; distinct ys;\n        u \\<notin> set ys; u \\<notin> set ysa; distinct ysa;\n        v \\<notin> set ys; set ys \\<inter> set ysa = {}; v \\<notin> set ysa;\n        ys \\<noteq> []; hd ys \\<in> set ysa\\<rbrakk>\n       \\<Longrightarrow> v \\<in> set (fst (splitAt (hd ys) (ysa @ [v])))", "apply(clarsimp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ys ysa.\n       \\<lbrakk>u \\<noteq> v; vertices f = ys @ u # ysa @ [v]; distinct ys;\n        u \\<notin> set ys; u \\<notin> set ysa; distinct ysa;\n        v \\<notin> set ys; set ys \\<inter> set ysa = {}; v \\<notin> set ysa;\n        ys \\<noteq> []; hd ys \\<in> set ysa\\<rbrakk>\n       \\<Longrightarrow> v \\<in> set (fst (splitAt (hd ys) (ysa @ [v])))", "apply(frule split_list)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ys ysa.\n       \\<lbrakk>u \\<noteq> v; vertices f = ys @ u # ysa @ [v]; distinct ys;\n        u \\<notin> set ys; u \\<notin> set ysa; distinct ysa;\n        v \\<notin> set ys; set ys \\<inter> set ysa = {}; v \\<notin> set ysa;\n        ys \\<noteq> []; hd ys \\<in> set ysa;\n        \\<exists>ysb zs. ysa = ysb @ hd ys # zs\\<rbrakk>\n       \\<Longrightarrow> v \\<in> set (fst (splitAt (hd ys) (ysa @ [v])))", "apply(fastforce)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(* distinctness seems not to be necessary but simplifies the proof *)"], ["", "lemma between_next_empty:\n \"distinct(vertices f) \\<Longrightarrow> between (vertices f) v (f \\<bullet> v) = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. distinct (vertices f) \\<Longrightarrow>\n    between (vertices f) v (f \\<bullet> v) = []", "apply(cases \"v \\<in> \\<V> f\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>distinct (vertices f); v \\<in> \\<V> f\\<rbrakk>\n    \\<Longrightarrow> between (vertices f) v (f \\<bullet> v) = []\n 2. \\<lbrakk>distinct (vertices f); v \\<notin> \\<V> f\\<rbrakk>\n    \\<Longrightarrow> between (vertices f) v (f \\<bullet> v) = []", "apply(frule split_list)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>distinct (vertices f); v \\<in> \\<V> f;\n     \\<exists>ys zs. vertices f = ys @ v # zs\\<rbrakk>\n    \\<Longrightarrow> between (vertices f) v (f \\<bullet> v) = []\n 2. \\<lbrakk>distinct (vertices f); v \\<notin> \\<V> f\\<rbrakk>\n    \\<Longrightarrow> between (vertices f) v (f \\<bullet> v) = []", "apply(clarsimp simp:between_def split_def nextVertex_def\n   neq_Nil_conv hd_append split:list.split)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>distinct (vertices f); v \\<notin> \\<V> f\\<rbrakk>\n    \\<Longrightarrow> between (vertices f) v (f \\<bullet> v) = []", "apply(clarsimp simp:between_def split_def nextVertex_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>distinct (vertices f); v \\<notin> \\<V> f\\<rbrakk>\n    \\<Longrightarrow> fst (splitAt (hd (vertices f)) (vertices f)) = []", "apply(cases \"vertices f\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>distinct (vertices f); v \\<notin> \\<V> f;\n     vertices f = []\\<rbrakk>\n    \\<Longrightarrow> fst (splitAt (hd (vertices f)) (vertices f)) = []\n 2. \\<And>a list.\n       \\<lbrakk>distinct (vertices f); v \\<notin> \\<V> f;\n        vertices f = a # list\\<rbrakk>\n       \\<Longrightarrow> fst (splitAt (hd (vertices f)) (vertices f)) = []", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a list.\n       \\<lbrakk>distinct (vertices f); v \\<notin> \\<V> f;\n        vertices f = a # list\\<rbrakk>\n       \\<Longrightarrow> fst (splitAt (hd (vertices f)) (vertices f)) = []", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma unroll_between_next2:\n \"\\<lbrakk> distinct(vertices f); u \\<in> \\<V> f; v \\<in> \\<V> f; u \\<noteq> v \\<rbrakk> \\<Longrightarrow>\n  between (vertices f) u (f \\<bullet> v) = between (vertices f) u v @ [v]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>distinct (vertices f); u \\<in> \\<V> f; v \\<in> \\<V> f;\n     u \\<noteq> v\\<rbrakk>\n    \\<Longrightarrow> between (vertices f) u (f \\<bullet> v) =\n                      between (vertices f) u v @ [v]", "using split_between[OF _ _ _ next_between2]"], ["proof (prove)\nusing this:\n  \\<lbrakk>distinct (vertices ?f1); ?r \\<in> \\<V> ?f1;\n   ?f1 \\<bullet> ?u \\<in> \\<V> ?f1; distinct (vertices ?f1);\n   ?u \\<in> \\<V> ?f1; ?r \\<in> \\<V> ?f1; ?r \\<noteq> ?u\\<rbrakk>\n  \\<Longrightarrow> between (vertices ?f1) ?r (?f1 \\<bullet> ?u) =\n                    (if ?r = ?u then []\n                     else between (vertices ?f1) ?r ?u @ [?u]) @\n                    between (vertices ?f1) ?u (?f1 \\<bullet> ?u)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>distinct (vertices f); u \\<in> \\<V> f; v \\<in> \\<V> f;\n     u \\<noteq> v\\<rbrakk>\n    \\<Longrightarrow> between (vertices f) u (f \\<bullet> v) =\n                      between (vertices f) u v @ [v]", "by (simp add: between_next_empty split:if_split_asm)"], ["", "lemma nextVertex_eq_lemma:\n \"\\<lbrakk> distinct(vertices f); x \\<in> \\<V> f; y \\<in> \\<V> f; x \\<noteq> y;\n    v \\<in> set(x # between (vertices f) x y) \\<rbrakk> \\<Longrightarrow>\n  f \\<bullet> v = nextElem (x # between (vertices f) x y @ [y]) z v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>distinct (vertices f); x \\<in> \\<V> f; y \\<in> \\<V> f;\n     x \\<noteq> y; v \\<in> set (x # between (vertices f) x y)\\<rbrakk>\n    \\<Longrightarrow> f \\<bullet> v =\n                      nextElem (x # between (vertices f) x y @ [y]) z v", "apply(drule split_list[of x])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>distinct (vertices f); y \\<in> \\<V> f; x \\<noteq> y;\n     v \\<in> set (x # between (vertices f) x y);\n     \\<exists>ys zs. vertices f = ys @ x # zs\\<rbrakk>\n    \\<Longrightarrow> f \\<bullet> v =\n                      nextElem (x # between (vertices f) x y @ [y]) z v", "apply(simp add:nextVertex_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>distinct (vertices f); y \\<in> \\<V> f; x \\<noteq> y;\n     v = x \\<or> v \\<in> set (between (vertices f) x y);\n     \\<exists>ys zs. vertices f = ys @ x # zs\\<rbrakk>\n    \\<Longrightarrow> (v = x \\<longrightarrow>\n                       nextElem (vertices f) (hd (vertices f)) x =\n                       (case between (vertices f) x y @ [y] of\n                        [] \\<Rightarrow> z\n                        | a' # as' \\<Rightarrow> a')) \\<and>\n                      (v \\<noteq> x \\<longrightarrow>\n                       nextElem (vertices f) (hd (vertices f)) v =\n                       nextElem (between (vertices f) x y @ [y]) z v)", "apply(erule disjE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>distinct (vertices f); y \\<in> \\<V> f; x \\<noteq> y;\n     \\<exists>ys zs. vertices f = ys @ x # zs; v = x\\<rbrakk>\n    \\<Longrightarrow> (v = x \\<longrightarrow>\n                       nextElem (vertices f) (hd (vertices f)) x =\n                       (case between (vertices f) x y @ [y] of\n                        [] \\<Rightarrow> z\n                        | a' # as' \\<Rightarrow> a')) \\<and>\n                      (v \\<noteq> x \\<longrightarrow>\n                       nextElem (vertices f) (hd (vertices f)) v =\n                       nextElem (between (vertices f) x y @ [y]) z v)\n 2. \\<lbrakk>distinct (vertices f); y \\<in> \\<V> f; x \\<noteq> y;\n     \\<exists>ys zs. vertices f = ys @ x # zs;\n     v \\<in> set (between (vertices f) x y)\\<rbrakk>\n    \\<Longrightarrow> (v = x \\<longrightarrow>\n                       nextElem (vertices f) (hd (vertices f)) x =\n                       (case between (vertices f) x y @ [y] of\n                        [] \\<Rightarrow> z\n                        | a' # as' \\<Rightarrow> a')) \\<and>\n                      (v \\<noteq> x \\<longrightarrow>\n                       nextElem (vertices f) (hd (vertices f)) v =\n                       nextElem (between (vertices f) x y @ [y]) z v)", "apply(clarsimp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>ys zs.\n       \\<lbrakk>y \\<in> set ys \\<or> y \\<in> set zs; x \\<noteq> y; v = x;\n        vertices f = ys @ x # zs; distinct ys; x \\<notin> set zs;\n        distinct zs; x \\<notin> set ys; set ys \\<inter> set zs = {}\\<rbrakk>\n       \\<Longrightarrow> (case zs of [] \\<Rightarrow> hd (ys @ x # zs)\n                          | a' # as' \\<Rightarrow> a') =\n                         (case between (ys @ x # zs) x y @ [y] of\n                          [] \\<Rightarrow> z | a' # as' \\<Rightarrow> a')\n 2. \\<lbrakk>distinct (vertices f); y \\<in> \\<V> f; x \\<noteq> y;\n     \\<exists>ys zs. vertices f = ys @ x # zs;\n     v \\<in> set (between (vertices f) x y)\\<rbrakk>\n    \\<Longrightarrow> (v = x \\<longrightarrow>\n                       nextElem (vertices f) (hd (vertices f)) x =\n                       (case between (vertices f) x y @ [y] of\n                        [] \\<Rightarrow> z\n                        | a' # as' \\<Rightarrow> a')) \\<and>\n                      (v \\<noteq> x \\<longrightarrow>\n                       nextElem (vertices f) (hd (vertices f)) v =\n                       nextElem (between (vertices f) x y @ [y]) z v)", "apply(erule disjE)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>ys zs.\n       \\<lbrakk>x \\<noteq> y; v = x; vertices f = ys @ x # zs; distinct ys;\n        x \\<notin> set zs; distinct zs; x \\<notin> set ys;\n        set ys \\<inter> set zs = {}; y \\<in> set ys\\<rbrakk>\n       \\<Longrightarrow> (case zs of [] \\<Rightarrow> hd (ys @ x # zs)\n                          | a' # as' \\<Rightarrow> a') =\n                         (case between (ys @ x # zs) x y @ [y] of\n                          [] \\<Rightarrow> z | a' # as' \\<Rightarrow> a')\n 2. \\<And>ys zs.\n       \\<lbrakk>x \\<noteq> y; v = x; vertices f = ys @ x # zs; distinct ys;\n        x \\<notin> set zs; distinct zs; x \\<notin> set ys;\n        set ys \\<inter> set zs = {}; y \\<in> set zs\\<rbrakk>\n       \\<Longrightarrow> (case zs of [] \\<Rightarrow> hd (ys @ x # zs)\n                          | a' # as' \\<Rightarrow> a') =\n                         (case between (ys @ x # zs) x y @ [y] of\n                          [] \\<Rightarrow> z | a' # as' \\<Rightarrow> a')\n 3. \\<lbrakk>distinct (vertices f); y \\<in> \\<V> f; x \\<noteq> y;\n     \\<exists>ys zs. vertices f = ys @ x # zs;\n     v \\<in> set (between (vertices f) x y)\\<rbrakk>\n    \\<Longrightarrow> (v = x \\<longrightarrow>\n                       nextElem (vertices f) (hd (vertices f)) x =\n                       (case between (vertices f) x y @ [y] of\n                        [] \\<Rightarrow> z\n                        | a' # as' \\<Rightarrow> a')) \\<and>\n                      (v \\<noteq> x \\<longrightarrow>\n                       nextElem (vertices f) (hd (vertices f)) v =\n                       nextElem (between (vertices f) x y @ [y]) z v)", "apply(drule split_list)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>ys zs.\n       \\<lbrakk>x \\<noteq> y; v = x; vertices f = ys @ x # zs; distinct ys;\n        x \\<notin> set zs; distinct zs; x \\<notin> set ys;\n        set ys \\<inter> set zs = {};\n        \\<exists>ysa zs. ys = ysa @ y # zs\\<rbrakk>\n       \\<Longrightarrow> (case zs of [] \\<Rightarrow> hd (ys @ x # zs)\n                          | a' # as' \\<Rightarrow> a') =\n                         (case between (ys @ x # zs) x y @ [y] of\n                          [] \\<Rightarrow> z | a' # as' \\<Rightarrow> a')\n 2. \\<And>ys zs.\n       \\<lbrakk>x \\<noteq> y; v = x; vertices f = ys @ x # zs; distinct ys;\n        x \\<notin> set zs; distinct zs; x \\<notin> set ys;\n        set ys \\<inter> set zs = {}; y \\<in> set zs\\<rbrakk>\n       \\<Longrightarrow> (case zs of [] \\<Rightarrow> hd (ys @ x # zs)\n                          | a' # as' \\<Rightarrow> a') =\n                         (case between (ys @ x # zs) x y @ [y] of\n                          [] \\<Rightarrow> z | a' # as' \\<Rightarrow> a')\n 3. \\<lbrakk>distinct (vertices f); y \\<in> \\<V> f; x \\<noteq> y;\n     \\<exists>ys zs. vertices f = ys @ x # zs;\n     v \\<in> set (between (vertices f) x y)\\<rbrakk>\n    \\<Longrightarrow> (v = x \\<longrightarrow>\n                       nextElem (vertices f) (hd (vertices f)) x =\n                       (case between (vertices f) x y @ [y] of\n                        [] \\<Rightarrow> z\n                        | a' # as' \\<Rightarrow> a')) \\<and>\n                      (v \\<noteq> x \\<longrightarrow>\n                       nextElem (vertices f) (hd (vertices f)) v =\n                       nextElem (between (vertices f) x y @ [y]) z v)", "apply(clarsimp simp add:between_def split_def hd_append split:list.split)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>zs ysa zsa.\n       \\<lbrakk>x \\<noteq> y; v = x; vertices f = ysa @ y # zsa @ x # zs;\n        x \\<notin> set zs; distinct zs; distinct ysa; x \\<notin> set ysa;\n        x \\<notin> set zsa; y \\<notin> set zs;\n        (set ysa \\<union> set zsa) \\<inter> set zs = {}; y \\<notin> set zsa;\n        distinct zsa; y \\<notin> set ysa;\n        set ysa \\<inter> set zsa = {}\\<rbrakk>\n       \\<Longrightarrow> (ysa = [] \\<longrightarrow>\n                          (\\<forall>x21 x22 x21a.\n                              (\\<exists>x22a.\n                                  fst (splitAt y (x21 # x22)) @ [y] =\n                                  x21a # x22a) \\<longrightarrow>\n                              zs = x21 # x22 \\<longrightarrow>\n                              y \\<in> set x22 \\<longrightarrow>\n                              x21 = x21a)) \\<and>\n                         (ysa \\<noteq> [] \\<longrightarrow>\n                          (zs = [] \\<longrightarrow>\n                           (\\<forall>x21.\n                               (\\<exists>x22.\n                                   ysa @ [y] = x21 # x22) \\<longrightarrow>\n                               hd ysa = x21)) \\<and>\n                          (\\<forall>x21 x22 x21a.\n                              (\\<exists>x22a.\n                                  fst (splitAt y (x21 # x22)) @ [y] =\n                                  x21a # x22a) \\<longrightarrow>\n                              zs = x21 # x22 \\<longrightarrow>\n                              y \\<in> set x22 \\<longrightarrow> x21 = x21a))\n 2. \\<And>ys zs.\n       \\<lbrakk>x \\<noteq> y; v = x; vertices f = ys @ x # zs; distinct ys;\n        x \\<notin> set zs; distinct zs; x \\<notin> set ys;\n        set ys \\<inter> set zs = {}; y \\<in> set zs\\<rbrakk>\n       \\<Longrightarrow> (case zs of [] \\<Rightarrow> hd (ys @ x # zs)\n                          | a' # as' \\<Rightarrow> a') =\n                         (case between (ys @ x # zs) x y @ [y] of\n                          [] \\<Rightarrow> z | a' # as' \\<Rightarrow> a')\n 3. \\<lbrakk>distinct (vertices f); y \\<in> \\<V> f; x \\<noteq> y;\n     \\<exists>ys zs. vertices f = ys @ x # zs;\n     v \\<in> set (between (vertices f) x y)\\<rbrakk>\n    \\<Longrightarrow> (v = x \\<longrightarrow>\n                       nextElem (vertices f) (hd (vertices f)) x =\n                       (case between (vertices f) x y @ [y] of\n                        [] \\<Rightarrow> z\n                        | a' # as' \\<Rightarrow> a')) \\<and>\n                      (v \\<noteq> x \\<longrightarrow>\n                       nextElem (vertices f) (hd (vertices f)) v =\n                       nextElem (between (vertices f) x y @ [y]) z v)", "apply(fastforce simp:append_eq_Cons_conv)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>ys zs.\n       \\<lbrakk>x \\<noteq> y; v = x; vertices f = ys @ x # zs; distinct ys;\n        x \\<notin> set zs; distinct zs; x \\<notin> set ys;\n        set ys \\<inter> set zs = {}; y \\<in> set zs\\<rbrakk>\n       \\<Longrightarrow> (case zs of [] \\<Rightarrow> hd (ys @ x # zs)\n                          | a' # as' \\<Rightarrow> a') =\n                         (case between (ys @ x # zs) x y @ [y] of\n                          [] \\<Rightarrow> z | a' # as' \\<Rightarrow> a')\n 2. \\<lbrakk>distinct (vertices f); y \\<in> \\<V> f; x \\<noteq> y;\n     \\<exists>ys zs. vertices f = ys @ x # zs;\n     v \\<in> set (between (vertices f) x y)\\<rbrakk>\n    \\<Longrightarrow> (v = x \\<longrightarrow>\n                       nextElem (vertices f) (hd (vertices f)) x =\n                       (case between (vertices f) x y @ [y] of\n                        [] \\<Rightarrow> z\n                        | a' # as' \\<Rightarrow> a')) \\<and>\n                      (v \\<noteq> x \\<longrightarrow>\n                       nextElem (vertices f) (hd (vertices f)) v =\n                       nextElem (between (vertices f) x y @ [y]) z v)", "apply(drule split_list)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>ys zs.\n       \\<lbrakk>x \\<noteq> y; v = x; vertices f = ys @ x # zs; distinct ys;\n        x \\<notin> set zs; distinct zs; x \\<notin> set ys;\n        set ys \\<inter> set zs = {};\n        \\<exists>ys zsa. zs = ys @ y # zsa\\<rbrakk>\n       \\<Longrightarrow> (case zs of [] \\<Rightarrow> hd (ys @ x # zs)\n                          | a' # as' \\<Rightarrow> a') =\n                         (case between (ys @ x # zs) x y @ [y] of\n                          [] \\<Rightarrow> z | a' # as' \\<Rightarrow> a')\n 2. \\<lbrakk>distinct (vertices f); y \\<in> \\<V> f; x \\<noteq> y;\n     \\<exists>ys zs. vertices f = ys @ x # zs;\n     v \\<in> set (between (vertices f) x y)\\<rbrakk>\n    \\<Longrightarrow> (v = x \\<longrightarrow>\n                       nextElem (vertices f) (hd (vertices f)) x =\n                       (case between (vertices f) x y @ [y] of\n                        [] \\<Rightarrow> z\n                        | a' # as' \\<Rightarrow> a')) \\<and>\n                      (v \\<noteq> x \\<longrightarrow>\n                       nextElem (vertices f) (hd (vertices f)) v =\n                       nextElem (between (vertices f) x y @ [y]) z v)", "apply(clarsimp simp add:between_def split_def hd_append split:list.split)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>ys ysa zsa x21 x22 x21a x22a.\n       \\<lbrakk>x \\<noteq> y; v = x; vertices f = ys @ x # x21 # x22;\n        distinct ys; x \\<notin> set ys; x \\<notin> set ysa;\n        x \\<notin> set zsa; distinct ysa; y \\<notin> set ys;\n        set ys \\<inter> (set ysa \\<union> set zsa) = {}; y \\<notin> set zsa;\n        distinct zsa; y \\<notin> set ysa; set ysa \\<inter> set zsa = {};\n        fst (splitAt y (x21 # x22)) @ [y] = x21a # x22a;\n        ysa @ y # zsa = x21 # x22; y \\<in> set x22\\<rbrakk>\n       \\<Longrightarrow> x21 = x21a\n 2. \\<lbrakk>distinct (vertices f); y \\<in> \\<V> f; x \\<noteq> y;\n     \\<exists>ys zs. vertices f = ys @ x # zs;\n     v \\<in> set (between (vertices f) x y)\\<rbrakk>\n    \\<Longrightarrow> (v = x \\<longrightarrow>\n                       nextElem (vertices f) (hd (vertices f)) x =\n                       (case between (vertices f) x y @ [y] of\n                        [] \\<Rightarrow> z\n                        | a' # as' \\<Rightarrow> a')) \\<and>\n                      (v \\<noteq> x \\<longrightarrow>\n                       nextElem (vertices f) (hd (vertices f)) v =\n                       nextElem (between (vertices f) x y @ [y]) z v)", "apply(fastforce simp:append_eq_Cons_conv)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>distinct (vertices f); y \\<in> \\<V> f; x \\<noteq> y;\n     \\<exists>ys zs. vertices f = ys @ x # zs;\n     v \\<in> set (between (vertices f) x y)\\<rbrakk>\n    \\<Longrightarrow> (v = x \\<longrightarrow>\n                       nextElem (vertices f) (hd (vertices f)) x =\n                       (case between (vertices f) x y @ [y] of\n                        [] \\<Rightarrow> z\n                        | a' # as' \\<Rightarrow> a')) \\<and>\n                      (v \\<noteq> x \\<longrightarrow>\n                       nextElem (vertices f) (hd (vertices f)) v =\n                       nextElem (between (vertices f) x y @ [y]) z v)", "apply(clarsimp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ys zs.\n       \\<lbrakk>y \\<in> set ys \\<or> y \\<in> set zs; x \\<noteq> y;\n        v \\<in> set (between (ys @ x # zs) x y); vertices f = ys @ x # zs;\n        distinct ys; x \\<notin> set zs; distinct zs; x \\<notin> set ys;\n        set ys \\<inter> set zs = {}\\<rbrakk>\n       \\<Longrightarrow> (v = x \\<longrightarrow>\n                          (case zs of [] \\<Rightarrow> hd (ys @ x # zs)\n                           | a' # as' \\<Rightarrow> a') =\n                          (case between (ys @ x # zs) x y @ [y] of\n                           [] \\<Rightarrow> z\n                           | a' # as' \\<Rightarrow> a')) \\<and>\n                         (v \\<noteq> x \\<longrightarrow>\n                          nextElem (ys @ x # zs) (hd (ys @ x # zs)) v =\n                          nextElem (between (ys @ x # zs) x y @ [y]) z v)", "apply(erule disjE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>ys zs.\n       \\<lbrakk>x \\<noteq> y; v \\<in> set (between (ys @ x # zs) x y);\n        vertices f = ys @ x # zs; distinct ys; x \\<notin> set zs;\n        distinct zs; x \\<notin> set ys; set ys \\<inter> set zs = {};\n        y \\<in> set ys\\<rbrakk>\n       \\<Longrightarrow> (v = x \\<longrightarrow>\n                          (case zs of [] \\<Rightarrow> hd (ys @ x # zs)\n                           | a' # as' \\<Rightarrow> a') =\n                          (case between (ys @ x # zs) x y @ [y] of\n                           [] \\<Rightarrow> z\n                           | a' # as' \\<Rightarrow> a')) \\<and>\n                         (v \\<noteq> x \\<longrightarrow>\n                          nextElem (ys @ x # zs) (hd (ys @ x # zs)) v =\n                          nextElem (between (ys @ x # zs) x y @ [y]) z v)\n 2. \\<And>ys zs.\n       \\<lbrakk>x \\<noteq> y; v \\<in> set (between (ys @ x # zs) x y);\n        vertices f = ys @ x # zs; distinct ys; x \\<notin> set zs;\n        distinct zs; x \\<notin> set ys; set ys \\<inter> set zs = {};\n        y \\<in> set zs\\<rbrakk>\n       \\<Longrightarrow> (v = x \\<longrightarrow>\n                          (case zs of [] \\<Rightarrow> hd (ys @ x # zs)\n                           | a' # as' \\<Rightarrow> a') =\n                          (case between (ys @ x # zs) x y @ [y] of\n                           [] \\<Rightarrow> z\n                           | a' # as' \\<Rightarrow> a')) \\<and>\n                         (v \\<noteq> x \\<longrightarrow>\n                          nextElem (ys @ x # zs) (hd (ys @ x # zs)) v =\n                          nextElem (between (ys @ x # zs) x y @ [y]) z v)", "apply(drule split_list[of y])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>ys zs.\n       \\<lbrakk>x \\<noteq> y; v \\<in> set (between (ys @ x # zs) x y);\n        vertices f = ys @ x # zs; distinct ys; x \\<notin> set zs;\n        distinct zs; x \\<notin> set ys; set ys \\<inter> set zs = {};\n        \\<exists>ysa zs. ys = ysa @ y # zs\\<rbrakk>\n       \\<Longrightarrow> (v = x \\<longrightarrow>\n                          (case zs of [] \\<Rightarrow> hd (ys @ x # zs)\n                           | a' # as' \\<Rightarrow> a') =\n                          (case between (ys @ x # zs) x y @ [y] of\n                           [] \\<Rightarrow> z\n                           | a' # as' \\<Rightarrow> a')) \\<and>\n                         (v \\<noteq> x \\<longrightarrow>\n                          nextElem (ys @ x # zs) (hd (ys @ x # zs)) v =\n                          nextElem (between (ys @ x # zs) x y @ [y]) z v)\n 2. \\<And>ys zs.\n       \\<lbrakk>x \\<noteq> y; v \\<in> set (between (ys @ x # zs) x y);\n        vertices f = ys @ x # zs; distinct ys; x \\<notin> set zs;\n        distinct zs; x \\<notin> set ys; set ys \\<inter> set zs = {};\n        y \\<in> set zs\\<rbrakk>\n       \\<Longrightarrow> (v = x \\<longrightarrow>\n                          (case zs of [] \\<Rightarrow> hd (ys @ x # zs)\n                           | a' # as' \\<Rightarrow> a') =\n                          (case between (ys @ x # zs) x y @ [y] of\n                           [] \\<Rightarrow> z\n                           | a' # as' \\<Rightarrow> a')) \\<and>\n                         (v \\<noteq> x \\<longrightarrow>\n                          nextElem (ys @ x # zs) (hd (ys @ x # zs)) v =\n                          nextElem (between (ys @ x # zs) x y @ [y]) z v)", "apply(clarsimp simp:between_def split_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>zs ysa zsa.\n       \\<lbrakk>x \\<noteq> y; v \\<in> set zs \\<or> v \\<in> set ysa;\n        vertices f = ysa @ y # zsa @ x # zs; x \\<notin> set zs; distinct zs;\n        distinct ysa; x \\<notin> set ysa; x \\<notin> set zsa;\n        y \\<notin> set zs; (set ysa \\<union> set zsa) \\<inter> set zs = {};\n        y \\<notin> set zsa; distinct zsa; y \\<notin> set ysa;\n        set ysa \\<inter> set zsa = {}\\<rbrakk>\n       \\<Longrightarrow> (v = x \\<longrightarrow>\n                          (case zs of\n                           [] \\<Rightarrow> hd ((ysa @ y # zsa) @ x # zs)\n                           | a' # as' \\<Rightarrow> a') =\n                          (case zs @ ysa @ [y] of [] \\<Rightarrow> z\n                           | a' # as' \\<Rightarrow> a')) \\<and>\n                         (v \\<noteq> x \\<longrightarrow>\n                          nextElem (ysa @ y # zsa @ x # zs)\n                           (hd (ysa @ y # zsa @ x # zs)) v =\n                          nextElem (zs @ ysa @ [y]) z v)\n 2. \\<And>ys zs.\n       \\<lbrakk>x \\<noteq> y; v \\<in> set (between (ys @ x # zs) x y);\n        vertices f = ys @ x # zs; distinct ys; x \\<notin> set zs;\n        distinct zs; x \\<notin> set ys; set ys \\<inter> set zs = {};\n        y \\<in> set zs\\<rbrakk>\n       \\<Longrightarrow> (v = x \\<longrightarrow>\n                          (case zs of [] \\<Rightarrow> hd (ys @ x # zs)\n                           | a' # as' \\<Rightarrow> a') =\n                          (case between (ys @ x # zs) x y @ [y] of\n                           [] \\<Rightarrow> z\n                           | a' # as' \\<Rightarrow> a')) \\<and>\n                         (v \\<noteq> x \\<longrightarrow>\n                          nextElem (ys @ x # zs) (hd (ys @ x # zs)) v =\n                          nextElem (between (ys @ x # zs) x y @ [y]) z v)", "apply(erule disjE)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>zs ysa zsa.\n       \\<lbrakk>x \\<noteq> y; vertices f = ysa @ y # zsa @ x # zs;\n        x \\<notin> set zs; distinct zs; distinct ysa; x \\<notin> set ysa;\n        x \\<notin> set zsa; y \\<notin> set zs;\n        (set ysa \\<union> set zsa) \\<inter> set zs = {}; y \\<notin> set zsa;\n        distinct zsa; y \\<notin> set ysa; set ysa \\<inter> set zsa = {};\n        v \\<in> set zs\\<rbrakk>\n       \\<Longrightarrow> (v = x \\<longrightarrow>\n                          (case zs of\n                           [] \\<Rightarrow> hd ((ysa @ y # zsa) @ x # zs)\n                           | a' # as' \\<Rightarrow> a') =\n                          (case zs @ ysa @ [y] of [] \\<Rightarrow> z\n                           | a' # as' \\<Rightarrow> a')) \\<and>\n                         (v \\<noteq> x \\<longrightarrow>\n                          nextElem (ysa @ y # zsa @ x # zs)\n                           (hd (ysa @ y # zsa @ x # zs)) v =\n                          nextElem (zs @ ysa @ [y]) z v)\n 2. \\<And>zs ysa zsa.\n       \\<lbrakk>x \\<noteq> y; vertices f = ysa @ y # zsa @ x # zs;\n        x \\<notin> set zs; distinct zs; distinct ysa; x \\<notin> set ysa;\n        x \\<notin> set zsa; y \\<notin> set zs;\n        (set ysa \\<union> set zsa) \\<inter> set zs = {}; y \\<notin> set zsa;\n        distinct zsa; y \\<notin> set ysa; set ysa \\<inter> set zsa = {};\n        v \\<in> set ysa\\<rbrakk>\n       \\<Longrightarrow> (v = x \\<longrightarrow>\n                          (case zs of\n                           [] \\<Rightarrow> hd ((ysa @ y # zsa) @ x # zs)\n                           | a' # as' \\<Rightarrow> a') =\n                          (case zs @ ysa @ [y] of [] \\<Rightarrow> z\n                           | a' # as' \\<Rightarrow> a')) \\<and>\n                         (v \\<noteq> x \\<longrightarrow>\n                          nextElem (ysa @ y # zsa @ x # zs)\n                           (hd (ysa @ y # zsa @ x # zs)) v =\n                          nextElem (zs @ ysa @ [y]) z v)\n 3. \\<And>ys zs.\n       \\<lbrakk>x \\<noteq> y; v \\<in> set (between (ys @ x # zs) x y);\n        vertices f = ys @ x # zs; distinct ys; x \\<notin> set zs;\n        distinct zs; x \\<notin> set ys; set ys \\<inter> set zs = {};\n        y \\<in> set zs\\<rbrakk>\n       \\<Longrightarrow> (v = x \\<longrightarrow>\n                          (case zs of [] \\<Rightarrow> hd (ys @ x # zs)\n                           | a' # as' \\<Rightarrow> a') =\n                          (case between (ys @ x # zs) x y @ [y] of\n                           [] \\<Rightarrow> z\n                           | a' # as' \\<Rightarrow> a')) \\<and>\n                         (v \\<noteq> x \\<longrightarrow>\n                          nextElem (ys @ x # zs) (hd (ys @ x # zs)) v =\n                          nextElem (between (ys @ x # zs) x y @ [y]) z v)", "apply(drule split_list[of v])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>zs ysa zsa.\n       \\<lbrakk>x \\<noteq> y; vertices f = ysa @ y # zsa @ x # zs;\n        x \\<notin> set zs; distinct zs; distinct ysa; x \\<notin> set ysa;\n        x \\<notin> set zsa; y \\<notin> set zs;\n        (set ysa \\<union> set zsa) \\<inter> set zs = {}; y \\<notin> set zsa;\n        distinct zsa; y \\<notin> set ysa; set ysa \\<inter> set zsa = {};\n        \\<exists>ys zsa. zs = ys @ v # zsa\\<rbrakk>\n       \\<Longrightarrow> (v = x \\<longrightarrow>\n                          (case zs of\n                           [] \\<Rightarrow> hd ((ysa @ y # zsa) @ x # zs)\n                           | a' # as' \\<Rightarrow> a') =\n                          (case zs @ ysa @ [y] of [] \\<Rightarrow> z\n                           | a' # as' \\<Rightarrow> a')) \\<and>\n                         (v \\<noteq> x \\<longrightarrow>\n                          nextElem (ysa @ y # zsa @ x # zs)\n                           (hd (ysa @ y # zsa @ x # zs)) v =\n                          nextElem (zs @ ysa @ [y]) z v)\n 2. \\<And>zs ysa zsa.\n       \\<lbrakk>x \\<noteq> y; vertices f = ysa @ y # zsa @ x # zs;\n        x \\<notin> set zs; distinct zs; distinct ysa; x \\<notin> set ysa;\n        x \\<notin> set zsa; y \\<notin> set zs;\n        (set ysa \\<union> set zsa) \\<inter> set zs = {}; y \\<notin> set zsa;\n        distinct zsa; y \\<notin> set ysa; set ysa \\<inter> set zsa = {};\n        v \\<in> set ysa\\<rbrakk>\n       \\<Longrightarrow> (v = x \\<longrightarrow>\n                          (case zs of\n                           [] \\<Rightarrow> hd ((ysa @ y # zsa) @ x # zs)\n                           | a' # as' \\<Rightarrow> a') =\n                          (case zs @ ysa @ [y] of [] \\<Rightarrow> z\n                           | a' # as' \\<Rightarrow> a')) \\<and>\n                         (v \\<noteq> x \\<longrightarrow>\n                          nextElem (ysa @ y # zsa @ x # zs)\n                           (hd (ysa @ y # zsa @ x # zs)) v =\n                          nextElem (zs @ ysa @ [y]) z v)\n 3. \\<And>ys zs.\n       \\<lbrakk>x \\<noteq> y; v \\<in> set (between (ys @ x # zs) x y);\n        vertices f = ys @ x # zs; distinct ys; x \\<notin> set zs;\n        distinct zs; x \\<notin> set ys; set ys \\<inter> set zs = {};\n        y \\<in> set zs\\<rbrakk>\n       \\<Longrightarrow> (v = x \\<longrightarrow>\n                          (case zs of [] \\<Rightarrow> hd (ys @ x # zs)\n                           | a' # as' \\<Rightarrow> a') =\n                          (case between (ys @ x # zs) x y @ [y] of\n                           [] \\<Rightarrow> z\n                           | a' # as' \\<Rightarrow> a')) \\<and>\n                         (v \\<noteq> x \\<longrightarrow>\n                          nextElem (ys @ x # zs) (hd (ys @ x # zs)) v =\n                          nextElem (between (ys @ x # zs) x y @ [y]) z v)", "apply(fastforce simp: hd_append neq_Nil_conv split:list.split)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>zs ysa zsa.\n       \\<lbrakk>x \\<noteq> y; vertices f = ysa @ y # zsa @ x # zs;\n        x \\<notin> set zs; distinct zs; distinct ysa; x \\<notin> set ysa;\n        x \\<notin> set zsa; y \\<notin> set zs;\n        (set ysa \\<union> set zsa) \\<inter> set zs = {}; y \\<notin> set zsa;\n        distinct zsa; y \\<notin> set ysa; set ysa \\<inter> set zsa = {};\n        v \\<in> set ysa\\<rbrakk>\n       \\<Longrightarrow> (v = x \\<longrightarrow>\n                          (case zs of\n                           [] \\<Rightarrow> hd ((ysa @ y # zsa) @ x # zs)\n                           | a' # as' \\<Rightarrow> a') =\n                          (case zs @ ysa @ [y] of [] \\<Rightarrow> z\n                           | a' # as' \\<Rightarrow> a')) \\<and>\n                         (v \\<noteq> x \\<longrightarrow>\n                          nextElem (ysa @ y # zsa @ x # zs)\n                           (hd (ysa @ y # zsa @ x # zs)) v =\n                          nextElem (zs @ ysa @ [y]) z v)\n 2. \\<And>ys zs.\n       \\<lbrakk>x \\<noteq> y; v \\<in> set (between (ys @ x # zs) x y);\n        vertices f = ys @ x # zs; distinct ys; x \\<notin> set zs;\n        distinct zs; x \\<notin> set ys; set ys \\<inter> set zs = {};\n        y \\<in> set zs\\<rbrakk>\n       \\<Longrightarrow> (v = x \\<longrightarrow>\n                          (case zs of [] \\<Rightarrow> hd (ys @ x # zs)\n                           | a' # as' \\<Rightarrow> a') =\n                          (case between (ys @ x # zs) x y @ [y] of\n                           [] \\<Rightarrow> z\n                           | a' # as' \\<Rightarrow> a')) \\<and>\n                         (v \\<noteq> x \\<longrightarrow>\n                          nextElem (ys @ x # zs) (hd (ys @ x # zs)) v =\n                          nextElem (between (ys @ x # zs) x y @ [y]) z v)", "apply(drule split_list[of v])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>zs ysa zsa.\n       \\<lbrakk>x \\<noteq> y; vertices f = ysa @ y # zsa @ x # zs;\n        x \\<notin> set zs; distinct zs; distinct ysa; x \\<notin> set ysa;\n        x \\<notin> set zsa; y \\<notin> set zs;\n        (set ysa \\<union> set zsa) \\<inter> set zs = {}; y \\<notin> set zsa;\n        distinct zsa; y \\<notin> set ysa; set ysa \\<inter> set zsa = {};\n        \\<exists>ys zs. ysa = ys @ v # zs\\<rbrakk>\n       \\<Longrightarrow> (v = x \\<longrightarrow>\n                          (case zs of\n                           [] \\<Rightarrow> hd ((ysa @ y # zsa) @ x # zs)\n                           | a' # as' \\<Rightarrow> a') =\n                          (case zs @ ysa @ [y] of [] \\<Rightarrow> z\n                           | a' # as' \\<Rightarrow> a')) \\<and>\n                         (v \\<noteq> x \\<longrightarrow>\n                          nextElem (ysa @ y # zsa @ x # zs)\n                           (hd (ysa @ y # zsa @ x # zs)) v =\n                          nextElem (zs @ ysa @ [y]) z v)\n 2. \\<And>ys zs.\n       \\<lbrakk>x \\<noteq> y; v \\<in> set (between (ys @ x # zs) x y);\n        vertices f = ys @ x # zs; distinct ys; x \\<notin> set zs;\n        distinct zs; x \\<notin> set ys; set ys \\<inter> set zs = {};\n        y \\<in> set zs\\<rbrakk>\n       \\<Longrightarrow> (v = x \\<longrightarrow>\n                          (case zs of [] \\<Rightarrow> hd (ys @ x # zs)\n                           | a' # as' \\<Rightarrow> a') =\n                          (case between (ys @ x # zs) x y @ [y] of\n                           [] \\<Rightarrow> z\n                           | a' # as' \\<Rightarrow> a')) \\<and>\n                         (v \\<noteq> x \\<longrightarrow>\n                          nextElem (ys @ x # zs) (hd (ys @ x # zs)) v =\n                          nextElem (between (ys @ x # zs) x y @ [y]) z v)", "apply(clarsimp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>zs zsa ys zsb.\n       \\<lbrakk>x \\<noteq> y; vertices f = ys @ v # zsb @ y # zsa @ x # zs;\n        x \\<notin> set zs; distinct zs; x \\<notin> set zsa;\n        y \\<notin> set zs; y \\<notin> set zsa; distinct zsa; distinct ys;\n        x \\<noteq> v; v \\<notin> set zs;\n        (set ys \\<union> set zsb \\<union> set zsa) \\<inter> set zs = {};\n        y \\<noteq> v; v \\<notin> set zsa;\n        (set ys \\<union> set zsb) \\<inter> set zsa = {}; v \\<notin> set zsb;\n        x \\<notin> set ys; x \\<notin> set zsb; y \\<notin> set ys;\n        y \\<notin> set zsb; distinct zsb; v \\<notin> set ys;\n        set ys \\<inter> set zsb = {}\\<rbrakk>\n       \\<Longrightarrow> (case zsb @ y # zsa @ x # zs of\n                          [] \\<Rightarrow>\n                            hd (ys @ v # zsb @ y # zsa @ x # zs)\n                          | a' # as' \\<Rightarrow> a') =\n                         (case zsb @ [y] of [] \\<Rightarrow> z\n                          | a' # as' \\<Rightarrow> a')\n 2. \\<And>ys zs.\n       \\<lbrakk>x \\<noteq> y; v \\<in> set (between (ys @ x # zs) x y);\n        vertices f = ys @ x # zs; distinct ys; x \\<notin> set zs;\n        distinct zs; x \\<notin> set ys; set ys \\<inter> set zs = {};\n        y \\<in> set zs\\<rbrakk>\n       \\<Longrightarrow> (v = x \\<longrightarrow>\n                          (case zs of [] \\<Rightarrow> hd (ys @ x # zs)\n                           | a' # as' \\<Rightarrow> a') =\n                          (case between (ys @ x # zs) x y @ [y] of\n                           [] \\<Rightarrow> z\n                           | a' # as' \\<Rightarrow> a')) \\<and>\n                         (v \\<noteq> x \\<longrightarrow>\n                          nextElem (ys @ x # zs) (hd (ys @ x # zs)) v =\n                          nextElem (between (ys @ x # zs) x y @ [y]) z v)", "apply(clarsimp simp: hd_append split:list.split)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>zs zsa ys zsb x21 x22 x21a x22a.\n       \\<lbrakk>x \\<noteq> y; vertices f = ys @ v # x21 # x22;\n        x \\<notin> set zs; distinct zs; x \\<notin> set zsa;\n        y \\<notin> set zs; y \\<notin> set zsa; distinct zsa; distinct ys;\n        x \\<noteq> v; v \\<notin> set zs;\n        (set ys \\<union> set zsb \\<union> set zsa) \\<inter> set zs = {};\n        y \\<noteq> v; v \\<notin> set zsa;\n        (set ys \\<union> set zsb) \\<inter> set zsa = {}; v \\<notin> set zsb;\n        x \\<notin> set ys; x \\<notin> set zsb; y \\<notin> set ys;\n        y \\<notin> set zsb; distinct zsb; v \\<notin> set ys;\n        set ys \\<inter> set zsb = {}; zsb @ y # zsa @ x # zs = x21 # x22;\n        zsb @ [y] = x21a # x22a\\<rbrakk>\n       \\<Longrightarrow> x21 = x21a\n 2. \\<And>ys zs.\n       \\<lbrakk>x \\<noteq> y; v \\<in> set (between (ys @ x # zs) x y);\n        vertices f = ys @ x # zs; distinct ys; x \\<notin> set zs;\n        distinct zs; x \\<notin> set ys; set ys \\<inter> set zs = {};\n        y \\<in> set zs\\<rbrakk>\n       \\<Longrightarrow> (v = x \\<longrightarrow>\n                          (case zs of [] \\<Rightarrow> hd (ys @ x # zs)\n                           | a' # as' \\<Rightarrow> a') =\n                          (case between (ys @ x # zs) x y @ [y] of\n                           [] \\<Rightarrow> z\n                           | a' # as' \\<Rightarrow> a')) \\<and>\n                         (v \\<noteq> x \\<longrightarrow>\n                          nextElem (ys @ x # zs) (hd (ys @ x # zs)) v =\n                          nextElem (between (ys @ x # zs) x y @ [y]) z v)", "apply(fastforce simp:append_eq_Cons_conv)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ys zs.\n       \\<lbrakk>x \\<noteq> y; v \\<in> set (between (ys @ x # zs) x y);\n        vertices f = ys @ x # zs; distinct ys; x \\<notin> set zs;\n        distinct zs; x \\<notin> set ys; set ys \\<inter> set zs = {};\n        y \\<in> set zs\\<rbrakk>\n       \\<Longrightarrow> (v = x \\<longrightarrow>\n                          (case zs of [] \\<Rightarrow> hd (ys @ x # zs)\n                           | a' # as' \\<Rightarrow> a') =\n                          (case between (ys @ x # zs) x y @ [y] of\n                           [] \\<Rightarrow> z\n                           | a' # as' \\<Rightarrow> a')) \\<and>\n                         (v \\<noteq> x \\<longrightarrow>\n                          nextElem (ys @ x # zs) (hd (ys @ x # zs)) v =\n                          nextElem (between (ys @ x # zs) x y @ [y]) z v)", "apply(drule split_list[of y])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ys zs.\n       \\<lbrakk>x \\<noteq> y; v \\<in> set (between (ys @ x # zs) x y);\n        vertices f = ys @ x # zs; distinct ys; x \\<notin> set zs;\n        distinct zs; x \\<notin> set ys; set ys \\<inter> set zs = {};\n        \\<exists>ys zsa. zs = ys @ y # zsa\\<rbrakk>\n       \\<Longrightarrow> (v = x \\<longrightarrow>\n                          (case zs of [] \\<Rightarrow> hd (ys @ x # zs)\n                           | a' # as' \\<Rightarrow> a') =\n                          (case between (ys @ x # zs) x y @ [y] of\n                           [] \\<Rightarrow> z\n                           | a' # as' \\<Rightarrow> a')) \\<and>\n                         (v \\<noteq> x \\<longrightarrow>\n                          nextElem (ys @ x # zs) (hd (ys @ x # zs)) v =\n                          nextElem (between (ys @ x # zs) x y @ [y]) z v)", "apply(clarsimp simp:between_def split_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ys ysa zsa.\n       \\<lbrakk>x \\<noteq> y; v \\<in> set ysa;\n        vertices f = ys @ x # ysa @ y # zsa; distinct ys; x \\<notin> set ys;\n        x \\<notin> set ysa; x \\<notin> set zsa; distinct ysa;\n        y \\<notin> set ys; set ys \\<inter> (set ysa \\<union> set zsa) = {};\n        y \\<notin> set zsa; distinct zsa; y \\<notin> set ysa;\n        set ysa \\<inter> set zsa = {}\\<rbrakk>\n       \\<Longrightarrow> (v = x \\<longrightarrow>\n                          (case ysa @ y # zsa of\n                           [] \\<Rightarrow> hd (ys @ x # ysa @ y # zsa)\n                           | a' # as' \\<Rightarrow> a') =\n                          (case ysa @ [y] of [] \\<Rightarrow> z\n                           | a' # as' \\<Rightarrow> a')) \\<and>\n                         (v \\<noteq> x \\<longrightarrow>\n                          nextElem (ys @ x # ysa @ y # zsa)\n                           (hd (ys @ x # ysa @ y # zsa)) v =\n                          nextElem (ysa @ [y]) z v)", "apply(drule split_list[of v])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ys ysa zsa.\n       \\<lbrakk>x \\<noteq> y; vertices f = ys @ x # ysa @ y # zsa;\n        distinct ys; x \\<notin> set ys; x \\<notin> set ysa;\n        x \\<notin> set zsa; distinct ysa; y \\<notin> set ys;\n        set ys \\<inter> (set ysa \\<union> set zsa) = {}; y \\<notin> set zsa;\n        distinct zsa; y \\<notin> set ysa; set ysa \\<inter> set zsa = {};\n        \\<exists>ys zs. ysa = ys @ v # zs\\<rbrakk>\n       \\<Longrightarrow> (v = x \\<longrightarrow>\n                          (case ysa @ y # zsa of\n                           [] \\<Rightarrow> hd (ys @ x # ysa @ y # zsa)\n                           | a' # as' \\<Rightarrow> a') =\n                          (case ysa @ [y] of [] \\<Rightarrow> z\n                           | a' # as' \\<Rightarrow> a')) \\<and>\n                         (v \\<noteq> x \\<longrightarrow>\n                          nextElem (ys @ x # ysa @ y # zsa)\n                           (hd (ys @ x # ysa @ y # zsa)) v =\n                          nextElem (ysa @ [y]) z v)", "apply(clarsimp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ys zsa ysb zs.\n       \\<lbrakk>x \\<noteq> y; vertices f = ys @ x # ysb @ v # zs @ y # zsa;\n        distinct ys; x \\<notin> set ys; x \\<notin> set zsa;\n        y \\<notin> set ys; y \\<notin> set zsa; distinct zsa; x \\<noteq> v;\n        distinct ysb; v \\<notin> set ys;\n        set ys \\<inter> (set ysb \\<union> set zs \\<union> set zsa) = {};\n        y \\<noteq> v; v \\<notin> set zsa;\n        (set ysb \\<union> set zs) \\<inter> set zsa = {}; x \\<notin> set ysb;\n        x \\<notin> set zs; v \\<notin> set zs; y \\<notin> set ysb;\n        y \\<notin> set zs; distinct zs; v \\<notin> set ysb;\n        set ysb \\<inter> set zs = {}\\<rbrakk>\n       \\<Longrightarrow> (case zs @ y # zsa of\n                          [] \\<Rightarrow>\n                            hd (ys @ x # ysb @ v # zs @ y # zsa)\n                          | a' # as' \\<Rightarrow> a') =\n                         (case zs @ [y] of [] \\<Rightarrow> z\n                          | a' # as' \\<Rightarrow> a')", "apply(clarsimp simp: hd_append split:list.split)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ys zsa ysb zs x21 x22 x21a x22a.\n       \\<lbrakk>x \\<noteq> y; vertices f = ys @ x # ysb @ v # x21 # x22;\n        distinct ys; x \\<notin> set ys; x \\<notin> set zsa;\n        y \\<notin> set ys; y \\<notin> set zsa; distinct zsa; x \\<noteq> v;\n        distinct ysb; v \\<notin> set ys;\n        set ys \\<inter> (set ysb \\<union> set zs \\<union> set zsa) = {};\n        y \\<noteq> v; v \\<notin> set zsa;\n        (set ysb \\<union> set zs) \\<inter> set zsa = {}; x \\<notin> set ysb;\n        x \\<notin> set zs; v \\<notin> set zs; y \\<notin> set ysb;\n        y \\<notin> set zs; distinct zs; v \\<notin> set ysb;\n        set ysb \\<inter> set zs = {}; zs @ y # zsa = x21 # x22;\n        zs @ [y] = x21a # x22a\\<rbrakk>\n       \\<Longrightarrow> x21 = x21a", "apply(clarsimp simp:append_eq_Cons_conv)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ys zsa ysb zs x21 x22 x21a x22a.\n       \\<lbrakk>x \\<noteq> y; vertices f = ys @ x # ysb @ v # x21 # x22;\n        distinct ys; x \\<notin> set ys; x \\<notin> set zsa;\n        y \\<notin> set ys; y \\<notin> set zsa; distinct zsa; x \\<noteq> v;\n        distinct ysb; v \\<notin> set ys;\n        set ys \\<inter> (set ysb \\<union> set zs \\<union> set zsa) = {};\n        y \\<noteq> v; v \\<notin> set zsa;\n        (set ysb \\<union> set zs) \\<inter> set zsa = {}; x \\<notin> set ysb;\n        x \\<notin> set zs; v \\<notin> set zs; y \\<notin> set ysb;\n        y \\<notin> set zs; distinct zs; v \\<notin> set ysb;\n        set ysb \\<inter> set zs = {};\n        zs = [] \\<and> y = x21 \\<and> zsa = x22 \\<or>\n        (\\<exists>ys'. zs = x21 # ys' \\<and> ys' @ y # zsa = x22);\n        zs = [] \\<and> y = x21a \\<and> [] = x22a \\<or>\n        (\\<exists>ys'. zs = x21a # ys' \\<and> ys' @ [y] = x22a)\\<rbrakk>\n       \\<Longrightarrow> x21 = x21a", "apply(fastforce simp: hd_append neq_Nil_conv split:list.split)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "end"]]}