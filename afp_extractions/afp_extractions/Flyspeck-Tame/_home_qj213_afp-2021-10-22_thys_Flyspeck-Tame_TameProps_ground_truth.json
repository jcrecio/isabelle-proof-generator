{"file_name": "/home/qj213/afp-2021-10-22/thys/Flyspeck-Tame/TameProps.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Flyspeck-Tame", "problem_names": ["lemma length_disj_filter_le: \"\\<forall>x \\<in> set xs. \\<not>(P x \\<and> Q x) \\<Longrightarrow>\n length(filter P xs) + length(filter Q xs) \\<le> length xs\"", "lemma tri_quad_le_degree: \"tri g v + quad g v \\<le> degree g v\"", "lemma faceCountMax_bound:\n \"\\<lbrakk> tame g; v \\<in> \\<V> g \\<rbrakk> \\<Longrightarrow> tri g v + quad g v \\<le> 7\"", "lemma filter_tame_succs:\nassumes invP: \"invariant P succs\" and fin: \"\\<And>g. final g \\<Longrightarrow> succs g = []\"\nand ok_untame: \"\\<And>g. P g \\<Longrightarrow> \\<not> ok g \\<Longrightarrow> final g \\<and> \\<not> tame g\"\nand gg': \"g [succs]\\<rightarrow>* g'\"\nshows \"P g \\<Longrightarrow> final g' \\<Longrightarrow> tame g' \\<Longrightarrow> g [filter ok \\<circ> succs]\\<rightarrow>* g'\"", "lemma filterout_untame_succs:\nassumes invP: \"invariant P f\" and invPU: \"invariant (\\<lambda>g. P g \\<and>  U g) f\"\nand untame: \"untame(\\<lambda>g. P g \\<and> U g)\"\nand new_untame: \"\\<And>g g'. \\<lbrakk> P g; g' \\<in> set(f g); g' \\<notin> set(f' g) \\<rbrakk> \\<Longrightarrow> U g'\"\nand gg': \"g [f]\\<rightarrow>* g'\"\nshows \"P g \\<Longrightarrow> final g' \\<Longrightarrow> tame g' \\<Longrightarrow> g [f']\\<rightarrow>* g'\""], "translations": [["", "lemma length_disj_filter_le: \"\\<forall>x \\<in> set xs. \\<not>(P x \\<and> Q x) \\<Longrightarrow>\n length(filter P xs) + length(filter Q xs) \\<le> length xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set xs. \\<not> (P x \\<and> Q x) \\<Longrightarrow>\n    |filter P xs| + |filter Q xs| \\<le> |xs|", "by(induct xs) auto"], ["", "lemma tri_quad_le_degree: \"tri g v + quad g v \\<le> degree g v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tri g v + quad g v \\<le> degree g v", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. tri g v + quad g v \\<le> degree g v", "let ?fins = \"[f \\<leftarrow> facesAt g v . final f]\""], ["proof (state)\ngoal (1 subgoal):\n 1. tri g v + quad g v \\<le> degree g v", "have \"tri g v + quad g v =\n        |[f \\<leftarrow> ?fins . triangle f]| + |[f \\<leftarrow> ?fins. |vertices f| = 4]|\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tri g v + quad g v =\n    |filter triangle (filter final (facesAt g v))| +\n    |filter (\\<lambda>f. |vertices f| = 4) (filter final (facesAt g v))|", "by(simp add:tri_def quad_def)"], ["proof (state)\nthis:\n  tri g v + quad g v =\n  |filter triangle (filter final (facesAt g v))| +\n  |filter (\\<lambda>f. |vertices f| = 4) (filter final (facesAt g v))|\n\ngoal (1 subgoal):\n 1. tri g v + quad g v \\<le> degree g v", "also"], ["proof (state)\nthis:\n  tri g v + quad g v =\n  |filter triangle (filter final (facesAt g v))| +\n  |filter (\\<lambda>f. |vertices f| = 4) (filter final (facesAt g v))|\n\ngoal (1 subgoal):\n 1. tri g v + quad g v \\<le> degree g v", "have \"\\<dots> \\<le> |[f \\<leftarrow> facesAt g v. final f]|\""], ["proof (prove)\ngoal (1 subgoal):\n 1. |filter triangle (filter final (facesAt g v))| +\n    |filter (\\<lambda>f. |vertices f| = 4) (filter final (facesAt g v))|\n    \\<le> |filter final (facesAt g v)|", "by(rule length_disj_filter_le) simp"], ["proof (state)\nthis:\n  |filter triangle (filter final (facesAt g v))| +\n  |filter (\\<lambda>f. |vertices f| = 4) (filter final (facesAt g v))|\n  \\<le> |filter final (facesAt g v)|\n\ngoal (1 subgoal):\n 1. tri g v + quad g v \\<le> degree g v", "also"], ["proof (state)\nthis:\n  |filter triangle (filter final (facesAt g v))| +\n  |filter (\\<lambda>f. |vertices f| = 4) (filter final (facesAt g v))|\n  \\<le> |filter final (facesAt g v)|\n\ngoal (1 subgoal):\n 1. tri g v + quad g v \\<le> degree g v", "have \"\\<dots> \\<le> |facesAt g v|\""], ["proof (prove)\ngoal (1 subgoal):\n 1. |filter final (facesAt g v)| \\<le> |facesAt g v|", "by(rule length_filter_le)"], ["proof (state)\nthis:\n  |filter final (facesAt g v)| \\<le> |facesAt g v|\n\ngoal (1 subgoal):\n 1. tri g v + quad g v \\<le> degree g v", "finally"], ["proof (chain)\npicking this:\n  tri g v + quad g v \\<le> |facesAt g v|", "show ?thesis"], ["proof (prove)\nusing this:\n  tri g v + quad g v \\<le> |facesAt g v|\n\ngoal (1 subgoal):\n 1. tri g v + quad g v \\<le> degree g v", "by(simp add:degree_def)"], ["proof (state)\nthis:\n  tri g v + quad g v \\<le> degree g v\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma faceCountMax_bound:\n \"\\<lbrakk> tame g; v \\<in> \\<V> g \\<rbrakk> \\<Longrightarrow> tri g v + quad g v \\<le> 7\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>tame g; v \\<in> \\<V> g\\<rbrakk>\n    \\<Longrightarrow> tri g v + quad g v \\<le> 7", "using tri_quad_le_degree[of g v]"], ["proof (prove)\nusing this:\n  tri g v + quad g v \\<le> degree g v\n\ngoal (1 subgoal):\n 1. \\<lbrakk>tame g; v \\<in> \\<V> g\\<rbrakk>\n    \\<Longrightarrow> tri g v + quad g v \\<le> 7", "by(auto simp:tame_def tame11b_def split:if_split_asm)"], ["", "lemma filter_tame_succs:\nassumes invP: \"invariant P succs\" and fin: \"\\<And>g. final g \\<Longrightarrow> succs g = []\"\nand ok_untame: \"\\<And>g. P g \\<Longrightarrow> \\<not> ok g \\<Longrightarrow> final g \\<and> \\<not> tame g\"\nand gg': \"g [succs]\\<rightarrow>* g'\"\nshows \"P g \\<Longrightarrow> final g' \\<Longrightarrow> tame g' \\<Longrightarrow> g [filter ok \\<circ> succs]\\<rightarrow>* g'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>P g; final g'; tame g'\\<rbrakk>\n    \\<Longrightarrow> g [filter ok \\<circ> succs]\\<rightarrow>* g'", "using gg'"], ["proof (prove)\nusing this:\n  g [succs]\\<rightarrow>* g'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>P g; final g'; tame g'\\<rbrakk>\n    \\<Longrightarrow> g [filter ok \\<circ> succs]\\<rightarrow>* g'", "proof (induct rule:RTranCl.induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>g.\n       \\<lbrakk>P g; final g; tame g\\<rbrakk>\n       \\<Longrightarrow> g [filter ok \\<circ> succs]\\<rightarrow>* g\n 2. \\<And>g g' g''.\n       \\<lbrakk>g' \\<in> set (succs g); g' [succs]\\<rightarrow>* g'';\n        \\<lbrakk>P g'; final g''; tame g''\\<rbrakk>\n        \\<Longrightarrow> g' [filter ok \\<circ> succs]\\<rightarrow>* g'';\n        P g; final g''; tame g''\\<rbrakk>\n       \\<Longrightarrow> g [filter ok \\<circ> succs]\\<rightarrow>* g''", "case refl"], ["proof (state)\nthis:\n  P g_\n  final g_\n  tame g_\n\ngoal (2 subgoals):\n 1. \\<And>g.\n       \\<lbrakk>P g; final g; tame g\\<rbrakk>\n       \\<Longrightarrow> g [filter ok \\<circ> succs]\\<rightarrow>* g\n 2. \\<And>g g' g''.\n       \\<lbrakk>g' \\<in> set (succs g); g' [succs]\\<rightarrow>* g'';\n        \\<lbrakk>P g'; final g''; tame g''\\<rbrakk>\n        \\<Longrightarrow> g' [filter ok \\<circ> succs]\\<rightarrow>* g'';\n        P g; final g''; tame g''\\<rbrakk>\n       \\<Longrightarrow> g [filter ok \\<circ> succs]\\<rightarrow>* g''", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. g_ [filter ok \\<circ> succs]\\<rightarrow>* g_", "by(rule RTranCl.refl)"], ["proof (state)\nthis:\n  g_ [filter ok \\<circ> succs]\\<rightarrow>* g_\n\ngoal (1 subgoal):\n 1. \\<And>g g' g''.\n       \\<lbrakk>g' \\<in> set (succs g); g' [succs]\\<rightarrow>* g'';\n        \\<lbrakk>P g'; final g''; tame g''\\<rbrakk>\n        \\<Longrightarrow> g' [filter ok \\<circ> succs]\\<rightarrow>* g'';\n        P g; final g''; tame g''\\<rbrakk>\n       \\<Longrightarrow> g [filter ok \\<circ> succs]\\<rightarrow>* g''", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>g g' g''.\n       \\<lbrakk>g' \\<in> set (succs g); g' [succs]\\<rightarrow>* g'';\n        \\<lbrakk>P g'; final g''; tame g''\\<rbrakk>\n        \\<Longrightarrow> g' [filter ok \\<circ> succs]\\<rightarrow>* g'';\n        P g; final g''; tame g''\\<rbrakk>\n       \\<Longrightarrow> g [filter ok \\<circ> succs]\\<rightarrow>* g''", "case (succs h h' h'')"], ["proof (state)\nthis:\n  h' \\<in> set (succs h)\n  h' [succs]\\<rightarrow>* h''\n  \\<lbrakk>P h'; final h''; tame h''\\<rbrakk>\n  \\<Longrightarrow> h' [filter ok \\<circ> succs]\\<rightarrow>* h''\n  P h\n  final h''\n  tame h''\n\ngoal (1 subgoal):\n 1. \\<And>g g' g''.\n       \\<lbrakk>g' \\<in> set (succs g); g' [succs]\\<rightarrow>* g'';\n        \\<lbrakk>P g'; final g''; tame g''\\<rbrakk>\n        \\<Longrightarrow> g' [filter ok \\<circ> succs]\\<rightarrow>* g'';\n        P g; final g''; tame g''\\<rbrakk>\n       \\<Longrightarrow> g [filter ok \\<circ> succs]\\<rightarrow>* g''", "hence \"P h'\""], ["proof (prove)\nusing this:\n  h' \\<in> set (succs h)\n  h' [succs]\\<rightarrow>* h''\n  \\<lbrakk>P h'; final h''; tame h''\\<rbrakk>\n  \\<Longrightarrow> h' [filter ok \\<circ> succs]\\<rightarrow>* h''\n  P h\n  final h''\n  tame h''\n\ngoal (1 subgoal):\n 1. P h'", "using invP"], ["proof (prove)\nusing this:\n  h' \\<in> set (succs h)\n  h' [succs]\\<rightarrow>* h''\n  \\<lbrakk>P h'; final h''; tame h''\\<rbrakk>\n  \\<Longrightarrow> h' [filter ok \\<circ> succs]\\<rightarrow>* h''\n  P h\n  final h''\n  tame h''\n  invariant P succs\n\ngoal (1 subgoal):\n 1. P h'", "by(unfold invariant_def) blast"], ["proof (state)\nthis:\n  P h'\n\ngoal (1 subgoal):\n 1. \\<And>g g' g''.\n       \\<lbrakk>g' \\<in> set (succs g); g' [succs]\\<rightarrow>* g'';\n        \\<lbrakk>P g'; final g''; tame g''\\<rbrakk>\n        \\<Longrightarrow> g' [filter ok \\<circ> succs]\\<rightarrow>* g'';\n        P g; final g''; tame g''\\<rbrakk>\n       \\<Longrightarrow> g [filter ok \\<circ> succs]\\<rightarrow>* g''", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. h [filter ok \\<circ> succs]\\<rightarrow>* h''", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> h [filter ok \\<circ> succs]\\<rightarrow>* h''\n 2. \\<not> ?P \\<Longrightarrow>\n    h [filter ok \\<circ> succs]\\<rightarrow>* h''", "assume \"ok h'\""], ["proof (state)\nthis:\n  ok h'\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> h [filter ok \\<circ> succs]\\<rightarrow>* h''\n 2. \\<not> ?P \\<Longrightarrow>\n    h [filter ok \\<circ> succs]\\<rightarrow>* h''", "thus ?thesis"], ["proof (prove)\nusing this:\n  ok h'\n\ngoal (1 subgoal):\n 1. h [filter ok \\<circ> succs]\\<rightarrow>* h''", "using succs \\<open>P h'\\<close>"], ["proof (prove)\nusing this:\n  ok h'\n  h' \\<in> set (succs h)\n  h' [succs]\\<rightarrow>* h''\n  \\<lbrakk>P h'; final h''; tame h''\\<rbrakk>\n  \\<Longrightarrow> h' [filter ok \\<circ> succs]\\<rightarrow>* h''\n  P h\n  final h''\n  tame h''\n  P h'\n\ngoal (1 subgoal):\n 1. h [filter ok \\<circ> succs]\\<rightarrow>* h''", "by(fastforce intro:RTranCl.succs)"], ["proof (state)\nthis:\n  h [filter ok \\<circ> succs]\\<rightarrow>* h''\n\ngoal (1 subgoal):\n 1. \\<not> ok h' \\<Longrightarrow>\n    h [filter ok \\<circ> succs]\\<rightarrow>* h''", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> ok h' \\<Longrightarrow>\n    h [filter ok \\<circ> succs]\\<rightarrow>* h''", "assume \"\\<not> ok h'\""], ["proof (state)\nthis:\n  \\<not> ok h'\n\ngoal (1 subgoal):\n 1. \\<not> ok h' \\<Longrightarrow>\n    h [filter ok \\<circ> succs]\\<rightarrow>* h''", "note fin_tame = ok_untame[OF \\<open>P h'\\<close> \\<open>\\<not> ok h'\\<close>]"], ["proof (state)\nthis:\n  final h' \\<and> \\<not> tame h'\n\ngoal (1 subgoal):\n 1. \\<not> ok h' \\<Longrightarrow>\n    h [filter ok \\<circ> succs]\\<rightarrow>* h''", "have \"h'' = h'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. h'' = h'", "using fin_tame"], ["proof (prove)\nusing this:\n  final h' \\<and> \\<not> tame h'\n\ngoal (1 subgoal):\n 1. h'' = h'", "by(rule_tac RTranCl.cases[OF succs(2)])(auto simp:fin)"], ["proof (state)\nthis:\n  h'' = h'\n\ngoal (1 subgoal):\n 1. \\<not> ok h' \\<Longrightarrow>\n    h [filter ok \\<circ> succs]\\<rightarrow>* h''", "hence False"], ["proof (prove)\nusing this:\n  h'' = h'\n\ngoal (1 subgoal):\n 1. False", "using fin_tame succs"], ["proof (prove)\nusing this:\n  h'' = h'\n  final h' \\<and> \\<not> tame h'\n  h' \\<in> set (succs h)\n  h' [succs]\\<rightarrow>* h''\n  \\<lbrakk>P h'; final h''; tame h''\\<rbrakk>\n  \\<Longrightarrow> h' [filter ok \\<circ> succs]\\<rightarrow>* h''\n  P h\n  final h''\n  tame h''\n\ngoal (1 subgoal):\n 1. False", "by fast"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<not> ok h' \\<Longrightarrow>\n    h [filter ok \\<circ> succs]\\<rightarrow>* h''", "thus ?case"], ["proof (prove)\nusing this:\n  False\n\ngoal (1 subgoal):\n 1. h [filter ok \\<circ> succs]\\<rightarrow>* h''", ".."], ["proof (state)\nthis:\n  h [filter ok \\<circ> succs]\\<rightarrow>* h''\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  h [filter ok \\<circ> succs]\\<rightarrow>* h''\n\ngoal:\nNo subgoals!", "qed"], ["", "definition untame :: \"(graph \\<Rightarrow> bool) \\<Rightarrow> bool\" where\n\"untame P \\<equiv> \\<forall>g. final g \\<and> P g \\<longrightarrow> \\<not> tame g\""], ["", "lemma filterout_untame_succs:\nassumes invP: \"invariant P f\" and invPU: \"invariant (\\<lambda>g. P g \\<and>  U g) f\"\nand untame: \"untame(\\<lambda>g. P g \\<and> U g)\"\nand new_untame: \"\\<And>g g'. \\<lbrakk> P g; g' \\<in> set(f g); g' \\<notin> set(f' g) \\<rbrakk> \\<Longrightarrow> U g'\"\nand gg': \"g [f]\\<rightarrow>* g'\"\nshows \"P g \\<Longrightarrow> final g' \\<Longrightarrow> tame g' \\<Longrightarrow> g [f']\\<rightarrow>* g'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>P g; final g'; tame g'\\<rbrakk>\n    \\<Longrightarrow> g [f']\\<rightarrow>* g'", "using gg'"], ["proof (prove)\nusing this:\n  g [f]\\<rightarrow>* g'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>P g; final g'; tame g'\\<rbrakk>\n    \\<Longrightarrow> g [f']\\<rightarrow>* g'", "proof (induct rule:RTranCl.induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>g.\n       \\<lbrakk>P g; final g; tame g\\<rbrakk>\n       \\<Longrightarrow> g [f']\\<rightarrow>* g\n 2. \\<And>g g' g''.\n       \\<lbrakk>g' \\<in> set (f g); g' [f]\\<rightarrow>* g'';\n        \\<lbrakk>P g'; final g''; tame g''\\<rbrakk>\n        \\<Longrightarrow> g' [f']\\<rightarrow>* g'';\n        P g; final g''; tame g''\\<rbrakk>\n       \\<Longrightarrow> g [f']\\<rightarrow>* g''", "case refl"], ["proof (state)\nthis:\n  P g_\n  final g_\n  tame g_\n\ngoal (2 subgoals):\n 1. \\<And>g.\n       \\<lbrakk>P g; final g; tame g\\<rbrakk>\n       \\<Longrightarrow> g [f']\\<rightarrow>* g\n 2. \\<And>g g' g''.\n       \\<lbrakk>g' \\<in> set (f g); g' [f]\\<rightarrow>* g'';\n        \\<lbrakk>P g'; final g''; tame g''\\<rbrakk>\n        \\<Longrightarrow> g' [f']\\<rightarrow>* g'';\n        P g; final g''; tame g''\\<rbrakk>\n       \\<Longrightarrow> g [f']\\<rightarrow>* g''", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. g_ [f']\\<rightarrow>* g_", "by(rule RTranCl.refl)"], ["proof (state)\nthis:\n  g_ [f']\\<rightarrow>* g_\n\ngoal (1 subgoal):\n 1. \\<And>g g' g''.\n       \\<lbrakk>g' \\<in> set (f g); g' [f]\\<rightarrow>* g'';\n        \\<lbrakk>P g'; final g''; tame g''\\<rbrakk>\n        \\<Longrightarrow> g' [f']\\<rightarrow>* g'';\n        P g; final g''; tame g''\\<rbrakk>\n       \\<Longrightarrow> g [f']\\<rightarrow>* g''", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>g g' g''.\n       \\<lbrakk>g' \\<in> set (f g); g' [f]\\<rightarrow>* g'';\n        \\<lbrakk>P g'; final g''; tame g''\\<rbrakk>\n        \\<Longrightarrow> g' [f']\\<rightarrow>* g'';\n        P g; final g''; tame g''\\<rbrakk>\n       \\<Longrightarrow> g [f']\\<rightarrow>* g''", "case (succs h h' h'')"], ["proof (state)\nthis:\n  h' \\<in> set (f h)\n  h' [f]\\<rightarrow>* h''\n  \\<lbrakk>P h'; final h''; tame h''\\<rbrakk>\n  \\<Longrightarrow> h' [f']\\<rightarrow>* h''\n  P h\n  final h''\n  tame h''\n\ngoal (1 subgoal):\n 1. \\<And>g g' g''.\n       \\<lbrakk>g' \\<in> set (f g); g' [f]\\<rightarrow>* g'';\n        \\<lbrakk>P g'; final g''; tame g''\\<rbrakk>\n        \\<Longrightarrow> g' [f']\\<rightarrow>* g'';\n        P g; final g''; tame g''\\<rbrakk>\n       \\<Longrightarrow> g [f']\\<rightarrow>* g''", "hence Ph': \"P h'\""], ["proof (prove)\nusing this:\n  h' \\<in> set (f h)\n  h' [f]\\<rightarrow>* h''\n  \\<lbrakk>P h'; final h''; tame h''\\<rbrakk>\n  \\<Longrightarrow> h' [f']\\<rightarrow>* h''\n  P h\n  final h''\n  tame h''\n\ngoal (1 subgoal):\n 1. P h'", "using invP"], ["proof (prove)\nusing this:\n  h' \\<in> set (f h)\n  h' [f]\\<rightarrow>* h''\n  \\<lbrakk>P h'; final h''; tame h''\\<rbrakk>\n  \\<Longrightarrow> h' [f']\\<rightarrow>* h''\n  P h\n  final h''\n  tame h''\n  invariant P f\n\ngoal (1 subgoal):\n 1. P h'", "by(unfold invariant_def) blast"], ["proof (state)\nthis:\n  P h'\n\ngoal (1 subgoal):\n 1. \\<And>g g' g''.\n       \\<lbrakk>g' \\<in> set (f g); g' [f]\\<rightarrow>* g'';\n        \\<lbrakk>P g'; final g''; tame g''\\<rbrakk>\n        \\<Longrightarrow> g' [f']\\<rightarrow>* g'';\n        P g; final g''; tame g''\\<rbrakk>\n       \\<Longrightarrow> g [f']\\<rightarrow>* g''", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. h [f']\\<rightarrow>* h''", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> h [f']\\<rightarrow>* h''\n 2. \\<not> ?P \\<Longrightarrow> h [f']\\<rightarrow>* h''", "assume \"h' \\<in> set(f' h)\""], ["proof (state)\nthis:\n  h' \\<in> set (f' h)\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> h [f']\\<rightarrow>* h''\n 2. \\<not> ?P \\<Longrightarrow> h [f']\\<rightarrow>* h''", "thus ?thesis"], ["proof (prove)\nusing this:\n  h' \\<in> set (f' h)\n\ngoal (1 subgoal):\n 1. h [f']\\<rightarrow>* h''", "using succs Ph'"], ["proof (prove)\nusing this:\n  h' \\<in> set (f' h)\n  h' \\<in> set (f h)\n  h' [f]\\<rightarrow>* h''\n  \\<lbrakk>P h'; final h''; tame h''\\<rbrakk>\n  \\<Longrightarrow> h' [f']\\<rightarrow>* h''\n  P h\n  final h''\n  tame h''\n  P h'\n\ngoal (1 subgoal):\n 1. h [f']\\<rightarrow>* h''", "by(blast intro:RTranCl.succs)"], ["proof (state)\nthis:\n  h [f']\\<rightarrow>* h''\n\ngoal (1 subgoal):\n 1. h' \\<notin> set (f' h) \\<Longrightarrow> h [f']\\<rightarrow>* h''", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. h' \\<notin> set (f' h) \\<Longrightarrow> h [f']\\<rightarrow>* h''", "assume \"h' \\<notin> set(f' h)\""], ["proof (state)\nthis:\n  h' \\<notin> set (f' h)\n\ngoal (1 subgoal):\n 1. h' \\<notin> set (f' h) \\<Longrightarrow> h [f']\\<rightarrow>* h''", "with succs(4) succs(1)"], ["proof (chain)\npicking this:\n  P h\n  h' \\<in> set (f h)\n  h' \\<notin> set (f' h)", "have \"U h'\""], ["proof (prove)\nusing this:\n  P h\n  h' \\<in> set (f h)\n  h' \\<notin> set (f' h)\n\ngoal (1 subgoal):\n 1. U h'", "by (rule new_untame)"], ["proof (state)\nthis:\n  U h'\n\ngoal (1 subgoal):\n 1. h' \\<notin> set (f' h) \\<Longrightarrow> h [f']\\<rightarrow>* h''", "hence False"], ["proof (prove)\nusing this:\n  U h'\n\ngoal (1 subgoal):\n 1. False", "using Ph' RTranCl_inv[OF invPU] untame succs"], ["proof (prove)\nusing this:\n  U h'\n  P h'\n  \\<lbrakk>?g [f]\\<rightarrow>* ?g'; P ?g \\<and> U ?g\\<rbrakk>\n  \\<Longrightarrow> P ?g' \\<and> U ?g'\n  untame (\\<lambda>g. P g \\<and> U g)\n  h' \\<in> set (f h)\n  h' [f]\\<rightarrow>* h''\n  \\<lbrakk>P h'; final h''; tame h''\\<rbrakk>\n  \\<Longrightarrow> h' [f']\\<rightarrow>* h''\n  P h\n  final h''\n  tame h''\n\ngoal (1 subgoal):\n 1. False", "by (unfold untame_def) fast"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. h' \\<notin> set (f' h) \\<Longrightarrow> h [f']\\<rightarrow>* h''", "thus ?case"], ["proof (prove)\nusing this:\n  False\n\ngoal (1 subgoal):\n 1. h [f']\\<rightarrow>* h''", ".."], ["proof (state)\nthis:\n  h [f']\\<rightarrow>* h''\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  h [f']\\<rightarrow>* h''\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}