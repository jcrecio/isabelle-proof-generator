{"file_name": "/home/qj213/afp-2021-10-22/thys/Flyspeck-Tame/ArchCompProps.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Flyspeck-Tame", "problem_names": ["lemma mgp_pre_iso_test: \"minGraphProps g \\<Longrightarrow> pre_iso_test(fgraph g)\"", "lemma trie_all_eq_set_of_trie:\n  \"invar_trie t \\<Longrightarrow> all_trie (list_all P) t = (\\<forall>v \\<in> set_tries t. P v)\"", "lemma samet_imp_iso_seteq:\nassumes pre1: \"\\<And>gs g. gsopt = Some gs \\<Longrightarrow> g \\<in> set_tries gs \\<Longrightarrow> pre_iso_test g\"\nand pre2: \"\\<And>g. g \\<in> set arch \\<Longrightarrow> pre_iso_test g\"\nand inv: \"\\<And>gs. gsopt = Some gs \\<Longrightarrow> invar_trie gs\"\nand same: \"samet gsopt arch\"\nshows \"\\<exists>gs. gsopt = Some gs \\<and> set_tries gs =\\<^sub>\\<simeq> set arch\"", "lemma samet_imp_iso_subseteq:\nassumes pre1: \"\\<And>gs g. gsopt = Some gs \\<Longrightarrow> g \\<in> set_tries gs \\<Longrightarrow> pre_iso_test g\"\nand pre2: \"\\<And>g. g \\<in> set arch \\<Longrightarrow> pre_iso_test g\"\nand inv: \"\\<And>gs. gsopt = Some gs \\<Longrightarrow> invar_trie gs\"\nand same: \"samet gsopt arch\"\nshows \"\\<exists>gs. gsopt = Some gs \\<and> set_tries gs \\<subseteq>\\<^sub>\\<simeq> set arch\"", "lemma TameEnum_tameEnumFilter:\n  \"tameEnumFilter p = Some t \\<Longrightarrow>  set_tries t  =\\<^sub>\\<simeq> fgraph ` TameEnum\\<^bsub>p\\<^esub>\"", "lemma tameEnumFilter_subseteq_TameEnum:\n  \"tameEnumFilter p = Some t \\<Longrightarrow> set_tries t \\<subseteq> fgraph ` TameEnum\\<^bsub>p\\<^esub>\"", "lemma inv_tries_tameEnumFilter:\n  \"tameEnumFilter p = Some t \\<Longrightarrow> invar_trie t\"", "theorem combine_evals_filter:\n \"\\<forall>g \\<in> set arch. pre_iso_test g \\<Longrightarrow> samet (tameEnumFilter p) arch\n  \\<Longrightarrow> fgraph ` TameEnum\\<^bsub>p\\<^esub> \\<subseteq>\\<^sub>\\<simeq> set arch\""], "translations": [["", "lemma mgp_pre_iso_test: \"minGraphProps g \\<Longrightarrow> pre_iso_test(fgraph g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. minGraphProps g \\<Longrightarrow> pre_iso_test (fgraph g)", "apply(simp add:pre_iso_test_def fgraph_def image_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. minGraphProps g \\<Longrightarrow>\n    (\\<forall>x\\<in>\\<F> g. [] \\<noteq> vertices x) \\<and>\n    (\\<forall>x.\n        (\\<exists>xa\\<in>\\<F> g. x = vertices xa) \\<longrightarrow>\n        distinct x) \\<and>\n    distinct (map (rotate_min \\<circ> vertices) (faces g))", "apply(rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. minGraphProps g \\<Longrightarrow>\n    \\<forall>x\\<in>\\<F> g. [] \\<noteq> vertices x\n 2. minGraphProps g \\<Longrightarrow>\n    (\\<forall>x.\n        (\\<exists>xa\\<in>\\<F> g. x = vertices xa) \\<longrightarrow>\n        distinct x) \\<and>\n    distinct (map (rotate_min \\<circ> vertices) (faces g))", "apply(blast dest: mgp_vertices_nonempty[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. minGraphProps g \\<Longrightarrow>\n    (\\<forall>x.\n        (\\<exists>xa\\<in>\\<F> g. x = vertices xa) \\<longrightarrow>\n        distinct x) \\<and>\n    distinct (map (rotate_min \\<circ> vertices) (faces g))", "apply(rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. minGraphProps g \\<Longrightarrow>\n    \\<forall>x.\n       (\\<exists>xa\\<in>\\<F> g. x = vertices xa) \\<longrightarrow>\n       distinct x\n 2. minGraphProps g \\<Longrightarrow>\n    distinct (map (rotate_min \\<circ> vertices) (faces g))", "apply(blast intro:minGraphProps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. minGraphProps g \\<Longrightarrow>\n    distinct (map (rotate_min \\<circ> vertices) (faces g))", "apply(drule minGraphProps11)"], ["proof (prove)\ngoal (1 subgoal):\n 1. distinct (normFaces (faces g)) \\<Longrightarrow>\n    distinct (map (rotate_min \\<circ> vertices) (faces g))", "apply(simp add:normFaces_def normFace_def verticesFrom_def minVertex_def\n               rotate_min_def o_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "corollary iso_test_correct:\n \"\\<lbrakk> pre_iso_test Fs\\<^sub>1; pre_iso_test Fs\\<^sub>2 \\<rbrakk> \\<Longrightarrow>\n  iso_test Fs\\<^sub>1 Fs\\<^sub>2 = (Fs\\<^sub>1 \\<simeq> Fs\\<^sub>2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>pre_iso_test Fs\\<^sub>1; pre_iso_test Fs\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> iso_test Fs\\<^sub>1 Fs\\<^sub>2 =\n                      Fs\\<^sub>1 \\<simeq> Fs\\<^sub>2", "by(simp add:pre_iso_test_def iso_correct inj_on_rotate_min_iff[symmetric]\n            distinct_map nof_vertices_def length_remdups_concat)"], ["", "lemma trie_all_eq_set_of_trie:\n  \"invar_trie t \\<Longrightarrow> all_trie (list_all P) t = (\\<forall>v \\<in> set_tries t. P v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. invar_trie t \\<Longrightarrow>\n    all_trie (list_all P) t = (\\<forall>v\\<in>set_tries t. P v)", "by(simp add: all_trie_eq_ran set_tries_eq_ran)"], ["", "lemma samet_imp_iso_seteq:\nassumes pre1: \"\\<And>gs g. gsopt = Some gs \\<Longrightarrow> g \\<in> set_tries gs \\<Longrightarrow> pre_iso_test g\"\nand pre2: \"\\<And>g. g \\<in> set arch \\<Longrightarrow> pre_iso_test g\"\nand inv: \"\\<And>gs. gsopt = Some gs \\<Longrightarrow> invar_trie gs\"\nand same: \"samet gsopt arch\"\nshows \"\\<exists>gs. gsopt = Some gs \\<and> set_tries gs =\\<^sub>\\<simeq> set arch\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>gs.\n       gsopt = Some gs \\<and> set_tries gs =\\<^sub>\\<simeq> set arch", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>gs.\n       gsopt = Some gs \\<and> set_tries gs =\\<^sub>\\<simeq> set arch", "obtain gs where [simp]: \"gsopt = Some gs\" and test1: \"\\<And>g. g \\<in> set_tries gs \\<Longrightarrow>\n    \\<exists>h \\<in> set arch. iso_test g h\" and test2: \"\\<And>g. g \\<in> set arch \\<Longrightarrow>\n    \\<exists>h \\<in> set_tries gs. iso_test g h\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>gs.\n        \\<lbrakk>gsopt = Some gs;\n         \\<And>g.\n            g \\<in> set_tries gs \\<Longrightarrow>\n            \\<exists>h\\<in>set arch. iso_test g h;\n         \\<And>g.\n            g \\<in> set arch \\<Longrightarrow>\n            \\<exists>h\\<in>set_tries gs. iso_test g h\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using same inv"], ["proof (prove)\nusing this:\n  samet gsopt arch\n  gsopt = Some ?gs \\<Longrightarrow> invar_trie ?gs\n\ngoal (1 subgoal):\n 1. (\\<And>gs.\n        \\<lbrakk>gsopt = Some gs;\n         \\<And>g.\n            g \\<in> set_tries gs \\<Longrightarrow>\n            \\<exists>h\\<in>set arch. iso_test g h;\n         \\<And>g.\n            g \\<in> set arch \\<Longrightarrow>\n            \\<exists>h\\<in>set_tries gs. iso_test g h\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(force simp: samet_def trie_all_eq_set_of_trie invar_of_list all_tries_def\n      split:option.splits\n      dest: in_set_lookup_of_listD in_set_lookup_set_triesD)"], ["proof (state)\nthis:\n  gsopt = Some gs\n  ?g \\<in> set_tries gs \\<Longrightarrow>\n  \\<exists>h\\<in>set arch. iso_test ?g h\n  ?g \\<in> set arch \\<Longrightarrow>\n  \\<exists>h\\<in>set_tries gs. iso_test ?g h\n\ngoal (1 subgoal):\n 1. \\<exists>gs.\n       gsopt = Some gs \\<and> set_tries gs =\\<^sub>\\<simeq> set arch", "have \"set_tries gs \\<subseteq>\\<^sub>\\<simeq> set arch\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set_tries gs \\<subseteq>\\<^sub>\\<simeq> set arch", "proof (auto simp:qle_gr.defs)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set_tries gs \\<Longrightarrow>\n       \\<exists>y\\<in>set arch. x \\<simeq> y", "fix g"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set_tries gs \\<Longrightarrow>\n       \\<exists>y\\<in>set arch. x \\<simeq> y", "assume g: \"g \\<in> set_tries gs\""], ["proof (state)\nthis:\n  g \\<in> set_tries gs\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set_tries gs \\<Longrightarrow>\n       \\<exists>y\\<in>set arch. x \\<simeq> y", "obtain h where h: \"h \\<in> set arch\" and test: \"iso_test g h\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>h.\n        \\<lbrakk>h \\<in> set arch; iso_test g h\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using test1[OF g]"], ["proof (prove)\nusing this:\n  \\<exists>h\\<in>set arch. iso_test g h\n\ngoal (1 subgoal):\n 1. (\\<And>h.\n        \\<lbrakk>h \\<in> set arch; iso_test g h\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  h \\<in> set arch\n  iso_test g h\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set_tries gs \\<Longrightarrow>\n       \\<exists>y\\<in>set arch. x \\<simeq> y", "thus \"\\<exists>h\\<in>set arch. g \\<simeq> h\""], ["proof (prove)\nusing this:\n  h \\<in> set arch\n  iso_test g h\n\ngoal (1 subgoal):\n 1. \\<exists>h\\<in>set arch. g \\<simeq> h", "using h pre1[OF _ g] pre2[OF h]"], ["proof (prove)\nusing this:\n  h \\<in> set arch\n  iso_test g h\n  h \\<in> set arch\n  gsopt = Some gs \\<Longrightarrow> pre_iso_test g\n  pre_iso_test h\n\ngoal (1 subgoal):\n 1. \\<exists>h\\<in>set arch. g \\<simeq> h", "by (auto simp:iso_test_correct)"], ["proof (state)\nthis:\n  \\<exists>h\\<in>set arch. g \\<simeq> h\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  set_tries gs \\<subseteq>\\<^sub>\\<simeq> set arch\n\ngoal (1 subgoal):\n 1. \\<exists>gs.\n       gsopt = Some gs \\<and> set_tries gs =\\<^sub>\\<simeq> set arch", "moreover"], ["proof (state)\nthis:\n  set_tries gs \\<subseteq>\\<^sub>\\<simeq> set arch\n\ngoal (1 subgoal):\n 1. \\<exists>gs.\n       gsopt = Some gs \\<and> set_tries gs =\\<^sub>\\<simeq> set arch", "have \"set arch \\<subseteq>\\<^sub>\\<simeq> set_tries gs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set arch \\<subseteq>\\<^sub>\\<simeq> set_tries gs", "proof (auto simp:qle_gr.defs)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set arch \\<Longrightarrow>\n       \\<exists>y\\<in>set_tries gs. x \\<simeq> y", "fix g"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set arch \\<Longrightarrow>\n       \\<exists>y\\<in>set_tries gs. x \\<simeq> y", "assume g: \"g \\<in> set arch\""], ["proof (state)\nthis:\n  g \\<in> set arch\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set arch \\<Longrightarrow>\n       \\<exists>y\\<in>set_tries gs. x \\<simeq> y", "obtain h where h: \"h \\<in> set_tries gs\" and test: \"iso_test g h\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>h.\n        \\<lbrakk>h \\<in> set_tries gs; iso_test g h\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using test2[OF g]"], ["proof (prove)\nusing this:\n  \\<exists>h\\<in>set_tries gs. iso_test g h\n\ngoal (1 subgoal):\n 1. (\\<And>h.\n        \\<lbrakk>h \\<in> set_tries gs; iso_test g h\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  h \\<in> set_tries gs\n  iso_test g h\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set arch \\<Longrightarrow>\n       \\<exists>y\\<in>set_tries gs. x \\<simeq> y", "thus \"\\<exists>h \\<in> set_tries gs. g \\<simeq> h\""], ["proof (prove)\nusing this:\n  h \\<in> set_tries gs\n  iso_test g h\n\ngoal (1 subgoal):\n 1. \\<exists>h\\<in>set_tries gs. g \\<simeq> h", "using h pre1[OF _ h] pre2[OF g]"], ["proof (prove)\nusing this:\n  h \\<in> set_tries gs\n  iso_test g h\n  h \\<in> set_tries gs\n  gsopt = Some gs \\<Longrightarrow> pre_iso_test h\n  pre_iso_test g\n\ngoal (1 subgoal):\n 1. \\<exists>h\\<in>set_tries gs. g \\<simeq> h", "by (auto simp:iso_test_correct)"], ["proof (state)\nthis:\n  \\<exists>h\\<in>set_tries gs. g \\<simeq> h\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  set arch \\<subseteq>\\<^sub>\\<simeq> set_tries gs\n\ngoal (1 subgoal):\n 1. \\<exists>gs.\n       gsopt = Some gs \\<and> set_tries gs =\\<^sub>\\<simeq> set arch", "ultimately"], ["proof (chain)\npicking this:\n  set_tries gs \\<subseteq>\\<^sub>\\<simeq> set arch\n  set arch \\<subseteq>\\<^sub>\\<simeq> set_tries gs", "show ?thesis"], ["proof (prove)\nusing this:\n  set_tries gs \\<subseteq>\\<^sub>\\<simeq> set arch\n  set arch \\<subseteq>\\<^sub>\\<simeq> set_tries gs\n\ngoal (1 subgoal):\n 1. \\<exists>gs.\n       gsopt = Some gs \\<and> set_tries gs =\\<^sub>\\<simeq> set arch", "by (auto simp: qle_gr.seteq_qle_def)"], ["proof (state)\nthis:\n  \\<exists>gs. gsopt = Some gs \\<and> set_tries gs =\\<^sub>\\<simeq> set arch\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma samet_imp_iso_subseteq:\nassumes pre1: \"\\<And>gs g. gsopt = Some gs \\<Longrightarrow> g \\<in> set_tries gs \\<Longrightarrow> pre_iso_test g\"\nand pre2: \"\\<And>g. g \\<in> set arch \\<Longrightarrow> pre_iso_test g\"\nand inv: \"\\<And>gs. gsopt = Some gs \\<Longrightarrow> invar_trie gs\"\nand same: \"samet gsopt arch\"\nshows \"\\<exists>gs. gsopt = Some gs \\<and> set_tries gs \\<subseteq>\\<^sub>\\<simeq> set arch\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>gs.\n       gsopt = Some gs \\<and>\n       set_tries gs \\<subseteq>\\<^sub>\\<simeq> set arch", "using qle_gr.seteq_qle_def assms samet_imp_iso_seteq"], ["proof (prove)\nusing this:\n  ?M =\\<^sub>\\<simeq> ?N \\<equiv>\n  ?M \\<subseteq>\\<^sub>\\<simeq> ?N \\<and> ?N \\<subseteq>\\<^sub>\\<simeq> ?M\n  \\<lbrakk>gsopt = Some ?gs; ?g \\<in> set_tries ?gs\\<rbrakk>\n  \\<Longrightarrow> pre_iso_test ?g\n  ?g \\<in> set arch \\<Longrightarrow> pre_iso_test ?g\n  gsopt = Some ?gs \\<Longrightarrow> invar_trie ?gs\n  samet gsopt arch\n  \\<lbrakk>\\<And>gs g.\n              \\<lbrakk>?gsopt = Some gs; g \\<in> set_tries gs\\<rbrakk>\n              \\<Longrightarrow> pre_iso_test g;\n   \\<And>g. g \\<in> set ?arch \\<Longrightarrow> pre_iso_test g;\n   \\<And>gs. ?gsopt = Some gs \\<Longrightarrow> invar_trie gs;\n   samet ?gsopt ?arch\\<rbrakk>\n  \\<Longrightarrow> \\<exists>gs.\n                       ?gsopt = Some gs \\<and>\n                       set_tries gs =\\<^sub>\\<simeq> set ?arch\n\ngoal (1 subgoal):\n 1. \\<exists>gs.\n       gsopt = Some gs \\<and>\n       set_tries gs \\<subseteq>\\<^sub>\\<simeq> set arch", "by metis"], ["", "global_interpretation set_mod_trie:\n  set_mod_maps \"Trie None []\" update_trie lookup_tries invar_trie \"(\\<simeq>)\" iso_test pre_iso_test hash\n  defines insert_mod_trie = \"set_mod_maps.insert_mod update_trie lookup_tries iso_test hash\"\n  and worklist_tree_coll_trie = \"set_modulo.worklist_tree_coll (Trie None []) insert_mod_trie\"\n  and worklist_tree_coll_aux_trie = \"set_modulo.worklist_tree_coll_aux insert_mod_trie\"\n  and insert_mod2_trie = \"set_modulo.insert_mod2 insert_mod_trie\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set_mod_maps (Trie None []) update_trie lookup_tries invar_trie\n     (\\<simeq>) iso_test pre_iso_test hash", "by standard (simp_all add: iso_test_correct)"], ["", "definition enum_filter_finals ::\n  \"(graph \\<Rightarrow> graph list) \\<Rightarrow> graph list\n   \\<Rightarrow> (nat,nat fgraph) tries option\" where\n\"enum_filter_finals succs = set_mod_trie.worklist_tree_coll succs final fgraph\""], ["", "definition tameEnumFilter :: \"nat \\<Rightarrow> (nat,nat fgraph)tries option\" where\n\"tameEnumFilter p = enum_filter_finals (next_tame p) [Seed p]\""], ["", "lemma TameEnum_tameEnumFilter:\n  \"tameEnumFilter p = Some t \\<Longrightarrow>  set_tries t  =\\<^sub>\\<simeq> fgraph ` TameEnum\\<^bsub>p\\<^esub>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tameEnumFilter p = Some t \\<Longrightarrow>\n    set_tries t =\\<^sub>\\<simeq> fgraph ` TameEnum\\<^bsub>p\\<^esub>", "apply(auto simp: tameEnumFilter_def TameEnumP_def enum_filter_finals_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. worklist_tree_coll_trie next_tame\\<^bsub>p\\<^esub> final fgraph\n     [Seed\\<^bsub>p\\<^esub>] =\n    Some t \\<Longrightarrow>\n    set_tries t =\\<^sub>\\<simeq>\n    fgraph `\n    {g. Seed\\<^bsub>p\\<^esub> [next_tame\\<^bsub>p\\<^esub>]\\<rightarrow>* g \\<and>\n        final g}", "apply(drule set_mod_trie.worklist_tree_coll_equiv[OF _ inv_inv_next_tame])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<forall>x\\<in>set [Seed\\<^bsub>p\\<^esub>]. Invariants.inv x\n 2. \\<And>x. Invariants.inv x \\<Longrightarrow> pre_iso_test (fgraph x)\n 3. map.set_of t =\\<^sub>\\<simeq>\n    fgraph `\n    {x \\<in> (Rel next_tame\\<^bsub>p\\<^esub>)\\<^sup>* ``\n             set [Seed\\<^bsub>p\\<^esub>].\n     final x} \\<Longrightarrow>\n    set_tries t =\\<^sub>\\<simeq>\n    fgraph `\n    {g. Seed\\<^bsub>p\\<^esub> [next_tame\\<^bsub>p\\<^esub>]\\<rightarrow>* g \\<and>\n        final g}", "apply (auto simp: set_of_conv inv_Seed mgp_pre_iso_test RTranCl_conv)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma tameEnumFilter_subseteq_TameEnum:\n  \"tameEnumFilter p = Some t \\<Longrightarrow> set_tries t \\<subseteq> fgraph ` TameEnum\\<^bsub>p\\<^esub>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tameEnumFilter p = Some t \\<Longrightarrow>\n    set_tries t \\<subseteq> fgraph ` TameEnum\\<^bsub>p\\<^esub>", "by(auto simp add:tameEnumFilter_def TameEnumP_def enum_filter_finals_def\n     set_of_conv inv_Seed mgp_pre_iso_test RTranCl_conv\n     dest!: set_mod_trie.worklist_tree_coll_subseteq[OF _ inv_inv_next_tame])"], ["", "lemma inv_tries_tameEnumFilter:\n  \"tameEnumFilter p = Some t \\<Longrightarrow> invar_trie t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tameEnumFilter p = Some t \\<Longrightarrow> invar_trie t", "unfolding tameEnumFilter_def enum_filter_finals_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. worklist_tree_coll_trie next_tame\\<^bsub>p\\<^esub> final fgraph\n     [Seed\\<^bsub>p\\<^esub>] =\n    Some t \\<Longrightarrow>\n    invar_trie t", "by(erule set_mod_trie.worklist_tree_coll_inv)"], ["", "theorem combine_evals_filter:\n \"\\<forall>g \\<in> set arch. pre_iso_test g \\<Longrightarrow> samet (tameEnumFilter p) arch\n  \\<Longrightarrow> fgraph ` TameEnum\\<^bsub>p\\<^esub> \\<subseteq>\\<^sub>\\<simeq> set arch\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>g\\<in>set arch. pre_iso_test g;\n     samet (tameEnumFilter p) arch\\<rbrakk>\n    \\<Longrightarrow> fgraph `\n                      TameEnum\\<^bsub>p\\<^esub> \\<subseteq>\\<^sub>\\<simeq>\n                      set arch", "apply(subgoal_tac \"\\<exists>t. tameEnumFilter p = Some t \\<and> set_tries t \\<subseteq>\\<^sub>\\<simeq> set arch\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>g\\<in>set arch. pre_iso_test g;\n     samet (tameEnumFilter p) arch;\n     \\<exists>t.\n        tameEnumFilter p = Some t \\<and>\n        set_tries t \\<subseteq>\\<^sub>\\<simeq> set arch\\<rbrakk>\n    \\<Longrightarrow> fgraph `\n                      TameEnum\\<^bsub>p\\<^esub> \\<subseteq>\\<^sub>\\<simeq>\n                      set arch\n 2. \\<lbrakk>\\<forall>g\\<in>set arch. pre_iso_test g;\n     samet (tameEnumFilter p) arch\\<rbrakk>\n    \\<Longrightarrow> \\<exists>t.\n                         tameEnumFilter p = Some t \\<and>\n                         set_tries t \\<subseteq>\\<^sub>\\<simeq> set arch", "apply(metis TameEnum_tameEnumFilter qle_gr.seteq_qle_def qle_gr.subseteq_qle_trans)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>g\\<in>set arch. pre_iso_test g;\n     samet (tameEnumFilter p) arch\\<rbrakk>\n    \\<Longrightarrow> \\<exists>t.\n                         tameEnumFilter p = Some t \\<and>\n                         set_tries t \\<subseteq>\\<^sub>\\<simeq> set arch", "apply(fastforce intro!: samet_imp_iso_subseteq\n  dest: inv_tries_tameEnumFilter tameEnumFilter_subseteq_TameEnum mgp_TameEnum mgp_pre_iso_test)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "end"]]}