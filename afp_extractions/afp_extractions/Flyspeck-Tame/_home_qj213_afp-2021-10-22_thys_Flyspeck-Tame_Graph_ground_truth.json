{"file_name": "/home/qj213/afp-2021-10-22/thys/Flyspeck-Tame/Graph.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Flyspeck-Tame", "problem_names": ["lemma nextV2: \"f\\<^bsup>2\\<^esup>\\<bullet>v = f\\<bullet> (f\\<bullet> v)\"", "lemma [simp]: \"vertices ((f::face)\\<^bsup>op\\<^esup>) = (vertices f)\\<^bsup>op\\<^esup>\"", "lemma [simp]: \"xs \\<noteq> [] \\<Longrightarrow> hd (rev xs)= last xs\"", "lemma vertices_graph: \"vertices g = [0 ..< countVertices g]\"", "lemma in_vertices_graph:\n  \"v \\<in> set (vertices g) = (v < countVertices g)\"", "lemma len_vertices_graph:\n  \"|vertices g| = countVertices g\"", "lemma finalGraph_faces[simp]: \"final g \\<Longrightarrow> finals g = faces g\"", "lemma finalGraph_face: \"final g \\<Longrightarrow> f \\<in> set (faces g) \\<Longrightarrow> final f\"", "lemma finalVertex_final_face[dest]:\n  \"finalVertex g v \\<Longrightarrow> f \\<in> set (facesAt g v) \\<Longrightarrow> final f\"", "lemma[simp]: \"0 \\<le> tri g v\"", "lemma[simp]: \"0 \\<le> quad g v\"", "lemma[simp]: \"0 \\<le> except g v\"", "lemma final_face_code [code]:\n  \"final_face (Face vs Final) \\<longleftrightarrow> True\"\n  \"final_face (Face vs Nonfinal) \\<longleftrightarrow> False\"", "lemma final_graph_code [code]: \"final_graph g = List.null (nonFinals g)\"", "lemma vertices_face_code [code]: \"vertices_face (Face vs f) = vs\"", "lemma vertices_graph_code [code]:\n  \"vertices_graph (Graph fs n f h) = [0 ..< n]\""], "translations": [["", "lemma nextV2: \"f\\<^bsup>2\\<^esup>\\<bullet>v = f\\<bullet> (f\\<bullet> v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f\\<^bsup>2\\<^esup> \\<bullet> v = f \\<bullet> (f \\<bullet> v)", "by (simp add: nextVertices_def eval_nat_numeral)"], ["", "(*<*)"], ["", "overloading edges_face \\<equiv> \"edges :: face \\<Rightarrow> (vertex \\<times> vertex) set\"\nbegin"], ["", "definition \"\\<E> f \\<equiv> {(a, f \\<bullet> a)|a. a \\<in> \\<V> f}\""], ["", "end"], ["", "(*>*)\n\n(*<*)"], ["", "consts op :: \"'a \\<Rightarrow> 'a\" (\"_\\<^bsup>op\\<^esup>\" [1000] 999)"], ["", "(*>*) (* *)"], ["", "overloading op_vertices \\<equiv> \"Graph.op :: vertex list \\<Rightarrow> vertex list\"\nbegin"], ["", "definition \"(vs::vertex list)\\<^bsup>op\\<^esup> \\<equiv> rev vs\""], ["", "end"], ["", "overloading op_graph \\<equiv> \"Graph.op :: face \\<Rightarrow> face\"\nbegin"], ["", "primrec op_graph where \"(Face vs f)\\<^bsup>op\\<^esup> = Face (rev vs) f\""], ["", "end"], ["", "(*<*)"], ["", "lemma [simp]: \"vertices ((f::face)\\<^bsup>op\\<^esup>) = (vertices f)\\<^bsup>op\\<^esup>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vertices (f\\<^bsup>op\\<^esup>) = (vertices f)\\<^bsup>op\\<^esup>", "by (induct f) (simp add: op_vertices_def)"], ["", "lemma [simp]: \"xs \\<noteq> [] \\<Longrightarrow> hd (rev xs)= last xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<noteq> [] \\<Longrightarrow> hd (rev xs) = last xs", "by(induct xs) simp_all"], ["", "(*>*) (* *)"], ["", "definition prevVertex :: \"face \\<Rightarrow> vertex \\<Rightarrow> vertex\" (*<*)(\"_\\<^bsup>-1\\<^esup> \\<bullet>\" [100]) (*>*)where (* *)\n  \"f\\<^bsup>-1\\<^esup> \\<bullet> v \\<equiv> (let vs = vertices f in nextElem (rev vs) (last vs) v)\""], ["", "abbreviation\n  triangle :: \"face \\<Rightarrow> bool\" where\n  \"triangle f == |vertices f| = 3\""], ["", "subsection \\<open>Graphs\\<close>"], ["", "datatype graph = Graph \"(face list)\" \"nat\" \"face list list\" \"nat list\""], ["", "primrec faces :: \"graph \\<Rightarrow> face list\" where\n  \"faces (Graph fs n f h) = fs\""], ["", "abbreviation\n  Faces :: \"graph \\<Rightarrow> face set\" (\"\\<F>\") where\n  \"\\<F> g == set(faces g)\""], ["", "primrec countVertices :: \"graph \\<Rightarrow> nat\" where\n  \"countVertices (Graph fs n f h) = n\""], ["", "overloading\n  vertices_graph \\<equiv> \"vertices :: graph \\<Rightarrow> vertex list\"\nbegin"], ["", "primrec vertices_graph where \"vertices (Graph fs n f h) = [0 ..< n]\""], ["", "end"], ["", "lemma vertices_graph: \"vertices g = [0 ..< countVertices g]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vertices g = [0..<countVertices g]", "by (induct g) simp"], ["", "lemma in_vertices_graph:\n  \"v \\<in> set (vertices g) = (v < countVertices g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (v \\<in> \\<V> g) = (v < countVertices g)", "by (simp add:vertices_graph)"], ["", "lemma len_vertices_graph:\n  \"|vertices g| = countVertices g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. |vertices g| = countVertices g", "by (simp add:vertices_graph)"], ["", "primrec faceListAt :: \"graph \\<Rightarrow> face list list\" where\n  \"faceListAt (Graph fs n f h) = f\""], ["", "definition facesAt :: \"graph \\<Rightarrow> vertex \\<Rightarrow> face list\" where\n \"facesAt g v \\<equiv> \\<^cancel>\\<open>if v \\<in> set(vertices g) then\\<close> faceListAt g ! v \\<^cancel>\\<open>else []\\<close>\""], ["", "primrec heights :: \"graph \\<Rightarrow> nat list\" where\n  \"heights (Graph fs n f h) = h\""], ["", "definition height :: \"graph \\<Rightarrow> vertex \\<Rightarrow> nat\" where\n  \"height g v \\<equiv> heights g ! v\""], ["", "definition graph :: \"nat \\<Rightarrow> graph\" where\n  \"graph n \\<equiv>\n    (let vs = [0 ..< n];\n     fs = [ Face vs Final, Face (rev vs) Nonfinal]\n     in (Graph fs n (replicate n fs) (replicate n 0)))\""], ["", "subsection\\<open>Operations on graphs\\<close>"], ["", "text \\<open>final graph, final / nonfinal faces\\<close>"], ["", "definition finals :: \"graph \\<Rightarrow> face list\" where\n  \"finals g \\<equiv> [f \\<leftarrow> faces g. final f]\""], ["", "definition nonFinals :: \"graph \\<Rightarrow> face list\" where\n  \"nonFinals g \\<equiv> [f \\<leftarrow> faces g. \\<not> final f]\""], ["", "definition countNonFinals :: \"graph \\<Rightarrow> nat\" where\n  \"countNonFinals g \\<equiv> |nonFinals g|\""], ["", "overloading finalGraph \\<equiv> \"final :: graph \\<Rightarrow> bool\"\nbegin"], ["", "definition \"finalGraph g \\<equiv> (nonFinals g = [])\""], ["", "end"], ["", "lemma finalGraph_faces[simp]: \"final g \\<Longrightarrow> finals g = faces g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. final g \\<Longrightarrow> finals g = faces g", "by (simp add: finalGraph_def finals_def nonFinals_def filter_compl1)"], ["", "lemma finalGraph_face: \"final g \\<Longrightarrow> f \\<in> set (faces g) \\<Longrightarrow> final f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>final g; f \\<in> \\<F> g\\<rbrakk> \\<Longrightarrow> final f", "by (simp only: finalGraph_faces[symmetric]) (simp add: finals_def)"], ["", "definition finalVertex :: \"graph \\<Rightarrow> vertex \\<Rightarrow> bool\" where\n  \"finalVertex g v \\<equiv> \\<forall>f \\<in> set(facesAt g v). final f\""], ["", "lemma finalVertex_final_face[dest]:\n  \"finalVertex g v \\<Longrightarrow> f \\<in> set (facesAt g v) \\<Longrightarrow> final f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finalVertex g v; f \\<in> set (facesAt g v)\\<rbrakk>\n    \\<Longrightarrow> final f", "by (auto simp add: finalVertex_def)"], ["", "text \\<open>counting faces\\<close>"], ["", "definition degree :: \"graph \\<Rightarrow> vertex \\<Rightarrow> nat\" where\n  \"degree g v \\<equiv> |facesAt g v|\""], ["", "definition tri :: \"graph \\<Rightarrow> vertex \\<Rightarrow> nat\" where\n \"tri g v \\<equiv> |[f \\<leftarrow> facesAt g v. final f \\<and> |vertices f| = 3]|\""], ["", "definition quad :: \"graph \\<Rightarrow> vertex \\<Rightarrow> nat\" where\n \"quad g v \\<equiv> |[f \\<leftarrow> facesAt g v. final f \\<and> |vertices f| = 4]|\""], ["", "definition except :: \"graph \\<Rightarrow> vertex \\<Rightarrow> nat\" where\n \"except g v \\<equiv> |[f \\<leftarrow> facesAt g v. final f \\<and> 5 \\<le> |vertices f| ]|\""], ["", "definition vertextype :: \"graph \\<Rightarrow> vertex \\<Rightarrow> nat \\<times> nat \\<times> nat\" where\n  \"vertextype g v \\<equiv> (tri g v, quad g v, except g v)\""], ["", "lemma[simp]: \"0 \\<le> tri g v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<le> tri g v", "by (simp add: tri_def)"], ["", "lemma[simp]: \"0 \\<le> quad g v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<le> quad g v", "by (simp add: quad_def)"], ["", "lemma[simp]: \"0 \\<le> except g v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<le> except g v", "by (simp add: except_def)"], ["", "definition exceptionalVertex :: \"graph \\<Rightarrow> vertex \\<Rightarrow> bool\" where\n  \"exceptionalVertex g v \\<equiv> except g v \\<noteq> 0\""], ["", "definition noExceptionals :: \"graph \\<Rightarrow> vertex set \\<Rightarrow> bool\" where\n  \"noExceptionals g V \\<equiv> (\\<forall>v \\<in> V. \\<not> exceptionalVertex g v)\""], ["", "text \\<open>An edge $(a,b)$ is contained in face f,\n  $b$ is the successor of $a$ in $f$.\\<close>"], ["", "(*>*)"], ["", "overloading edges_graph \\<equiv> \"edges :: graph \\<Rightarrow> (vertex \\<times> vertex) set\"\nbegin"], ["", "definition \"\\<E> (g::graph) \\<equiv> \\<Union>\\<^bsub>f \\<in> \\<F> g\\<^esub> edges f\""], ["", "end"], ["", "definition neighbors :: \"graph \\<Rightarrow> vertex \\<Rightarrow> vertex list\" where\n \"neighbors g v \\<equiv> [f\\<bullet>v. f \\<leftarrow> facesAt g v]\""], ["", "subsection \\<open>Navigation in graphs\\<close>"], ["", "text \\<open>\nThe function $s'$ permutating the faces at a vertex,\nis implemeted by the function \\<open>nextFace\\<close>\n\\<close>"], ["", "definition nextFace :: \"graph \\<times> vertex \\<Rightarrow> face \\<Rightarrow> face\" (*<*)(\"_ \\<bullet>\") (*>*)where\n(*<*) nextFace_def_aux: \"p \\<bullet> \\<equiv> \\<lambda>f. (let (g,v) = p; fs = (facesAt g v) in\n   (case fs of [] \\<Rightarrow> f\n           | g#gs \\<Rightarrow> nextElem fs (hd fs) f))\""], ["", "(*>*)\n\n\n(* precondition a b in f *)"], ["", "definition directedLength :: \"face \\<Rightarrow> vertex \\<Rightarrow> vertex \\<Rightarrow> nat\" where\n  \"directedLength f a b \\<equiv>\n  if a = b then 0 else |(between (vertices f) a b)| + 1\""], ["", "subsection \\<open>Code generator setup\\<close>"], ["", "definition final_face :: \"face \\<Rightarrow> bool\" where\n  final_face_code_def: \"final_face = final\""], ["", "declare final_face_code_def [symmetric, code_unfold]"], ["", "lemma final_face_code [code]:\n  \"final_face (Face vs Final) \\<longleftrightarrow> True\"\n  \"final_face (Face vs Nonfinal) \\<longleftrightarrow> False\""], ["proof (prove)\ngoal (1 subgoal):\n 1. final_face (Face vs Final) = True &&&\n    final_face (Face vs Nonfinal) = False", "by (simp_all add: final_face_code_def)"], ["", "definition final_graph :: \"graph \\<Rightarrow> bool\" where\n  final_graph_code_def: \"final_graph = final\""], ["", "declare final_graph_code_def [symmetric, code_unfold]"], ["", "lemma final_graph_code [code]: \"final_graph g = List.null (nonFinals g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. final_graph g = List.null (nonFinals g)", "unfolding final_graph_code_def finalGraph_def null_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (nonFinals g = []) = (nonFinals g = [])", ".."], ["", "definition vertices_face :: \"face \\<Rightarrow> vertex list\" where\n  vertices_face_code_def: \"vertices_face = vertices\""], ["", "declare vertices_face_code_def [symmetric, code_unfold]"], ["", "lemma vertices_face_code [code]: \"vertices_face (Face vs f) = vs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vertices_face (Face vs f) = vs", "unfolding vertices_face_code_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. vertices (Face vs f) = vs", "by simp"], ["", "definition vertices_graph :: \"graph \\<Rightarrow> vertex list\" where\n  vertices_graph_code_def: \"vertices_graph = vertices\""], ["", "declare vertices_graph_code_def [symmetric, code_unfold]"], ["", "lemma vertices_graph_code [code]:\n  \"vertices_graph (Graph fs n f h) = [0 ..< n]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vertices_graph (Graph fs n f h) = [0..<n]", "unfolding vertices_graph_code_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. vertices (Graph fs n f h) = [0..<n]", "by simp"], ["", "end"]]}