{"file_name": "/home/qj213/afp-2021-10-22/thys/Flyspeck-Tame/PlaneProps.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Flyspeck-Tame", "problem_names": ["lemma plane_final_facesAt:\nassumes \"inv g\" \"final g\" \"v : \\<V> g\" \"f \\<in> set (facesAt g v)\" shows \"final f\"", "lemma finalVertexI:\n  \"\\<lbrakk> inv g;  final g;  v \\<in> \\<V> g \\<rbrakk> \\<Longrightarrow> finalVertex g v\"", "lemma setFinal_notin_finals:\n \"\\<lbrakk> f \\<in> \\<F> g; \\<not> final f; minGraphProps g \\<rbrakk> \\<Longrightarrow> setFinal f \\<notin> set (finals g)\"", "lemma planeN4: \"inv g \\<Longrightarrow> f \\<in> \\<F> g \\<Longrightarrow> 3 \\<le> |vertices f|\"", "lemma degree_eq:\nassumes pl: \"inv g\" and fin: \"final g\" and v: \"v : \\<V> g\"\nshows \"degree g v = tri g v + quad g v + except g v\"", "lemma plane_fin_exceptionalVertex_def:\nassumes pl: \"inv g\" and fin: \"final g\" and v: \"v : \\<V> g\"\nshows \"exceptionalVertex g v =\n ( | [f \\<leftarrow> facesAt g v . 5 \\<le> |vertices f| ] | \\<noteq> 0)\"", "lemma not_exceptional:\n  \"inv g \\<Longrightarrow> final g \\<Longrightarrow> v : \\<V> g \\<Longrightarrow> f \\<in> set (facesAt g v) \\<Longrightarrow>\n  \\<not> exceptionalVertex g v \\<Longrightarrow> |vertices f| \\<le> 4\"", "lemma in_next_plane0I:\nassumes \"g' \\<in> set (generatePolygon n v f g)\" \"f \\<in> set (nonFinals g)\"\n        \"v \\<in> \\<V> f\" \"3 \\<le> n\" \"n < 4+p\"\nshows \"g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g)\"", "lemma next_plane0_nonfinals: \"g [next_plane0\\<^bsub>p\\<^esub>]\\<rightarrow> g' \\<Longrightarrow> nonFinals g \\<noteq> []\"", "lemma next_plane0_ex:\nassumes a: \"g [next_plane0\\<^bsub>p\\<^esub>]\\<rightarrow> g'\"\nshows \"\\<exists>f\\<in> set(nonFinals g). \\<exists>v \\<in> \\<V> f. \\<exists>i \\<in> set([3..<Suc(maxGon p)]).\n       g' \\<in> set (generatePolygon i v f g)\"", "lemma step_outside2:\n \"inv g \\<Longrightarrow> g [next_plane0\\<^bsub>p\\<^esub>]\\<rightarrow> g' \\<Longrightarrow> \\<not> final g' \\<Longrightarrow> |faces g'| \\<noteq> 2\"", "lemma set_finals_splitFace[simp]:\n \"\\<lbrakk> f \\<in> \\<F> g; \\<not> final f \\<rbrakk> \\<Longrightarrow>\n  set(finals(snd(snd(splitFace g u v f vs)))) = set(finals g)\"", "lemma next_plane0_finals_incr:\n \"g [next_plane0\\<^bsub>p\\<^esub>]\\<rightarrow> g' \\<Longrightarrow> f \\<in> set(finals g) \\<Longrightarrow> f \\<in> set(finals g')\"", "lemma next_plane0_finals_subset:\n  \"g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g) \\<Longrightarrow>\n  set (finals g) \\<subseteq> set (finals g')\"", "lemma next_plane0_final_mono:\n  \"\\<lbrakk> g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g); f \\<in> \\<F> g; final f \\<rbrakk> \\<Longrightarrow> f \\<in> \\<F> g'\"", "lemma next_plane0_vertices_subset:\n \"\\<lbrakk> g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g); minGraphProps g \\<rbrakk> \\<Longrightarrow> \\<V> g \\<subseteq> \\<V> g'\"", "lemma next_plane0_incr_faceListAt:\n \"\\<lbrakk> g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g); minGraphProps g \\<rbrakk>\n  \\<Longrightarrow> |faceListAt g| \\<le> |faceListAt g'| \\<and>\n      (\\<forall>v < |faceListAt g|. |faceListAt g ! v| \\<le> |faceListAt g' ! v| )\"\n (is \"_ \\<Longrightarrow> _ \\<Longrightarrow> ?Q g g'\")", "lemma next_plane0_incr_degree:\n \"\\<lbrakk> g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g); minGraphProps g; v \\<in> \\<V> g \\<rbrakk>\n  \\<Longrightarrow> degree g v \\<le> degree g' v\"", "lemma next_plane0_incr_except:\nassumes \"g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g)\" \"inv g\" \"v \\<in> \\<V> g\"\nshows \"except g v \\<le> except g' v\"", "lemma next_plane0_set_edges_subset:\n  \"\\<lbrakk> minGraphProps g;  g [next_plane0\\<^bsub>p\\<^esub>]\\<rightarrow> g' \\<rbrakk> \\<Longrightarrow> edges g \\<subseteq> edges g'\"", "lemma next_plane0_incr_finV:\n \"\\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g); minGraphProps g \\<rbrakk>\n  \\<Longrightarrow> \\<forall>v \\<in> \\<V> g. v \\<in> \\<V> g' \\<and>\n        ((\\<forall>f\\<in>\\<F> g. v \\<in> \\<V> f \\<longrightarrow> final f) \\<longrightarrow>\n         (\\<forall>f\\<in>\\<F> g'. v \\<in> \\<V> f \\<longrightarrow> f \\<in> \\<F> g))\" (is \"_ \\<Longrightarrow> _ \\<Longrightarrow> ?Q g g'\")", "lemma next_plane0_finalVertex_mono:\n \"\\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g); inv g; u \\<in> \\<V> g; finalVertex g u \\<rbrakk>\n  \\<Longrightarrow> finalVertex g' u\"", "lemma next_plane0_finalVertex_facesAt_eq:\n \"\\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g); inv g; v \\<in> \\<V> g; finalVertex g v \\<rbrakk>\n  \\<Longrightarrow> set(facesAt g' v) = set(facesAt g v)\"", "lemma next_plane0_len_filter_eq:\nassumes \"g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g)\" \"inv g\" \"v \\<in> \\<V> g\" \"finalVertex g v\"\nshows \"|filter P (facesAt g' v)| = |filter P (facesAt g v)|\"", "lemma new_edge_subdivFace':\n  \"\\<And>f v n g.\n  pre_subdivFace' g f u v n ovs \\<Longrightarrow> minGraphProps g \\<Longrightarrow> f \\<in> \\<F> g \\<Longrightarrow>\n  subdivFace' g f v n ovs = makeFaceFinal f g \\<or>\n  (\\<forall>f' \\<in> \\<F> (subdivFace' g f v n ovs) - (\\<F> g - {f}).\n   \\<exists>e \\<in> \\<E> f'. e \\<notin> \\<E> g)\"", "lemma dist_edges_subdivFace':\n  \"pre_subdivFace' g f u v n ovs \\<Longrightarrow> minGraphProps g \\<Longrightarrow> f \\<in> \\<F> g \\<Longrightarrow>\n  subdivFace' g f v n ovs = makeFaceFinal f g \\<or>\n  (\\<forall>f' \\<in> \\<F> (subdivFace' g f v n ovs) - (\\<F> g - {f}). \\<E> f' \\<noteq> \\<E> f)\"", "lemma between_last: \"\\<lbrakk> distinct(vertices f); u \\<in> \\<V> f \\<rbrakk> \\<Longrightarrow>\n   between (vertices f) u (last (verticesFrom f u)) =\n   butlast(tl(verticesFrom f u))\"", "lemma final_subdivFace': \"\\<And>f u n g. minGraphProps g \\<Longrightarrow>\n  pre_subdivFace' g f r u n ovs \\<Longrightarrow> f \\<in> \\<F> g \\<Longrightarrow>\n  (ovs = [] \\<longrightarrow> n=0 \\<and> u = last(verticesFrom f r)) \\<Longrightarrow>\n  \\<exists>f' \\<in> set(finals(subdivFace' g f u n ovs)) - set(finals g).\n   (f\\<^bsup>-1\\<^esup> \\<bullet> r,r) \\<in> \\<E> f' \\<and>  |vertices f'| =\n      n + |ovs| + (if r=u then 1 else |between (vertices f) r u| + 2)\"", "lemma Seed_max_final_ex:\n \"\\<exists>f\\<in>set (finals (Seed p)). |vertices f| = maxGon p\"", "lemma max_face_ex: assumes a: \"Seed\\<^bsub>p\\<^esub> [next_plane0\\<^bsub>p\\<^esub>]\\<rightarrow>* g\"\nshows \"\\<exists>f \\<in> set (finals g). |vertices f| = maxGon p\""], "translations": [["", "lemma plane_final_facesAt:\nassumes \"inv g\" \"final g\" \"v : \\<V> g\" \"f \\<in> set (facesAt g v)\" shows \"final f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. final f", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. final f", "from assms(1,3,4)"], ["proof (chain)\npicking this:\n  Invariants.inv g\n  v \\<in> \\<V> g\n  f \\<in> set (facesAt g v)", "have \"f \\<in> \\<F> g\""], ["proof (prove)\nusing this:\n  Invariants.inv g\n  v \\<in> \\<V> g\n  f \\<in> set (facesAt g v)\n\ngoal (1 subgoal):\n 1. f \\<in> \\<F> g", "by(blast intro: minGraphProps inv_mgp)"], ["proof (state)\nthis:\n  f \\<in> \\<F> g\n\ngoal (1 subgoal):\n 1. final f", "with assms(2)"], ["proof (chain)\npicking this:\n  final g\n  f \\<in> \\<F> g", "show ?thesis"], ["proof (prove)\nusing this:\n  final g\n  f \\<in> \\<F> g\n\ngoal (1 subgoal):\n 1. final f", "by (rule finalGraph_face)"], ["proof (state)\nthis:\n  final f\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma finalVertexI:\n  \"\\<lbrakk> inv g;  final g;  v \\<in> \\<V> g \\<rbrakk> \\<Longrightarrow> finalVertex g v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Invariants.inv g; final g; v \\<in> \\<V> g\\<rbrakk>\n    \\<Longrightarrow> finalVertex g v", "by (auto simp add: finalVertex_def nonFinals_def filter_empty_conv plane_final_facesAt)"], ["", "lemma setFinal_notin_finals:\n \"\\<lbrakk> f \\<in> \\<F> g; \\<not> final f; minGraphProps g \\<rbrakk> \\<Longrightarrow> setFinal f \\<notin> set (finals g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> \\<F> g; \\<not> final f; minGraphProps g\\<rbrakk>\n    \\<Longrightarrow> setFinal f \\<notin> set (finals g)", "apply(drule minGraphProps11)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> \\<F> g; \\<not> final f;\n     distinct (normFaces (faces g))\\<rbrakk>\n    \\<Longrightarrow> setFinal f \\<notin> set (finals g)", "apply(cases f)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x1 x2.\n       \\<lbrakk>f \\<in> \\<F> g; \\<not> final f;\n        distinct (normFaces (faces g)); f = Face x1 x2\\<rbrakk>\n       \\<Longrightarrow> setFinal f \\<notin> set (finals g)", "apply(fastforce simp:finals_def setFinal_def normFaces_def normFace_def\n                    verticesFrom_def minVertex_def inj_on_def distinct_map\n           split:facetype.splits)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsection \\<open>@{const degree}\\<close>"], ["", "lemma planeN4: \"inv g \\<Longrightarrow> f \\<in> \\<F> g \\<Longrightarrow> 3 \\<le> |vertices f|\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Invariants.inv g; f \\<in> \\<F> g\\<rbrakk>\n    \\<Longrightarrow> 3 \\<le> |vertices f|", "apply(subgoal_tac \"2 < | vertices f |\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Invariants.inv g; f \\<in> \\<F> g; 2 < |vertices f|\\<rbrakk>\n    \\<Longrightarrow> 3 \\<le> |vertices f|\n 2. \\<lbrakk>Invariants.inv g; f \\<in> \\<F> g\\<rbrakk>\n    \\<Longrightarrow> 2 < |vertices f|", "apply arith"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Invariants.inv g; f \\<in> \\<F> g\\<rbrakk>\n    \\<Longrightarrow> 2 < |vertices f|", "apply(drule inv_mgp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> \\<F> g; minGraphProps g\\<rbrakk>\n    \\<Longrightarrow> 2 < |vertices f|", "apply (erule (1) minGraphProps2)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma degree_eq:\nassumes pl: \"inv g\" and fin: \"final g\" and v: \"v : \\<V> g\"\nshows \"degree g v = tri g v + quad g v + except g v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. degree g v = tri g v + quad g v + except g v", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. degree g v = tri g v + quad g v + except g v", "have dist: \"distinct(facesAt g v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. distinct (facesAt g v)", "using pl v"], ["proof (prove)\nusing this:\n  Invariants.inv g\n  v \\<in> \\<V> g\n\ngoal (1 subgoal):\n 1. distinct (facesAt g v)", "by simp"], ["proof (state)\nthis:\n  distinct (facesAt g v)\n\ngoal (1 subgoal):\n 1. degree g v = tri g v + quad g v + except g v", "have 3: \"\\<forall>f \\<in> set(facesAt g v). |vertices f| = 3 \\<or> |vertices f| = 4 \\<or>\n                                  |vertices f| \\<ge> 5\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>f\\<in>set (facesAt g v).\n       triangle f \\<or> |vertices f| = 4 \\<or> 5 \\<le> |vertices f|", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       f \\<in> set (facesAt g v) \\<Longrightarrow>\n       triangle f \\<or> |vertices f| = 4 \\<or> 5 \\<le> |vertices f|", "fix f"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       f \\<in> set (facesAt g v) \\<Longrightarrow>\n       triangle f \\<or> |vertices f| = 4 \\<or> 5 \\<le> |vertices f|", "assume f: \"f \\<in> set (facesAt g v)\""], ["proof (state)\nthis:\n  f \\<in> set (facesAt g v)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       f \\<in> set (facesAt g v) \\<Longrightarrow>\n       triangle f \\<or> |vertices f| = 4 \\<or> 5 \\<le> |vertices f|", "hence \"|vertices f| \\<ge> 3\""], ["proof (prove)\nusing this:\n  f \\<in> set (facesAt g v)\n\ngoal (1 subgoal):\n 1. 3 \\<le> |vertices f|", "using minGraphProps5[OF inv_mgp[OF pl] v f] planeN4[OF pl]"], ["proof (prove)\nusing this:\n  f \\<in> set (facesAt g v)\n  f \\<in> \\<F> g\n  ?f \\<in> \\<F> g \\<Longrightarrow> 3 \\<le> |vertices ?f|\n\ngoal (1 subgoal):\n 1. 3 \\<le> |vertices f|", "by blast"], ["proof (state)\nthis:\n  3 \\<le> |vertices f|\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       f \\<in> set (facesAt g v) \\<Longrightarrow>\n       triangle f \\<or> |vertices f| = 4 \\<or> 5 \\<le> |vertices f|", "thus \"|vertices f| = 3 \\<or> |vertices f| = 4 \\<or> |vertices f| \\<ge> 5\""], ["proof (prove)\nusing this:\n  3 \\<le> |vertices f|\n\ngoal (1 subgoal):\n 1. triangle f \\<or> |vertices f| = 4 \\<or> 5 \\<le> |vertices f|", "by arith"], ["proof (state)\nthis:\n  triangle f \\<or> |vertices f| = 4 \\<or> 5 \\<le> |vertices f|\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>f\\<in>set (facesAt g v).\n     triangle f \\<or> |vertices f| = 4 \\<or> 5 \\<le> |vertices f|\n\ngoal (1 subgoal):\n 1. degree g v = tri g v + quad g v + except g v", "have \"degree g v = |facesAt g v|\""], ["proof (prove)\ngoal (1 subgoal):\n 1. degree g v = |facesAt g v|", "by(simp add:degree_def)"], ["proof (state)\nthis:\n  degree g v = |facesAt g v|\n\ngoal (1 subgoal):\n 1. degree g v = tri g v + quad g v + except g v", "also"], ["proof (state)\nthis:\n  degree g v = |facesAt g v|\n\ngoal (1 subgoal):\n 1. degree g v = tri g v + quad g v + except g v", "have \"\\<dots> = card(set(facesAt g v))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. |facesAt g v| = card (set (facesAt g v))", "by (simp add:distinct_card[OF dist])"], ["proof (state)\nthis:\n  |facesAt g v| = card (set (facesAt g v))\n\ngoal (1 subgoal):\n 1. degree g v = tri g v + quad g v + except g v", "also"], ["proof (state)\nthis:\n  |facesAt g v| = card (set (facesAt g v))\n\ngoal (1 subgoal):\n 1. degree g v = tri g v + quad g v + except g v", "have \"set(facesAt g v) = {f \\<in> set(facesAt g v). |vertices f| = 3} \\<union>\n                                {f \\<in> set(facesAt g v). |vertices f| = 4} \\<union>\n                                {f \\<in> set(facesAt g v). |vertices f| \\<ge> 5}\"\n    (is \"_ = ?T \\<union> ?Q \\<union> ?E\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. set (facesAt g v) =\n    {f \\<in> set (facesAt g v). triangle f} \\<union>\n    {f \\<in> set (facesAt g v). |vertices f| = 4} \\<union>\n    {f \\<in> set (facesAt g v). 5 \\<le> |vertices f|}", "using 3"], ["proof (prove)\nusing this:\n  \\<forall>f\\<in>set (facesAt g v).\n     triangle f \\<or> |vertices f| = 4 \\<or> 5 \\<le> |vertices f|\n\ngoal (1 subgoal):\n 1. set (facesAt g v) =\n    {f \\<in> set (facesAt g v). triangle f} \\<union>\n    {f \\<in> set (facesAt g v). |vertices f| = 4} \\<union>\n    {f \\<in> set (facesAt g v). 5 \\<le> |vertices f|}", "by blast"], ["proof (state)\nthis:\n  set (facesAt g v) =\n  {f \\<in> set (facesAt g v). triangle f} \\<union>\n  {f \\<in> set (facesAt g v). |vertices f| = 4} \\<union>\n  {f \\<in> set (facesAt g v). 5 \\<le> |vertices f|}\n\ngoal (1 subgoal):\n 1. degree g v = tri g v + quad g v + except g v", "also"], ["proof (state)\nthis:\n  set (facesAt g v) =\n  {f \\<in> set (facesAt g v). triangle f} \\<union>\n  {f \\<in> set (facesAt g v). |vertices f| = 4} \\<union>\n  {f \\<in> set (facesAt g v). 5 \\<le> |vertices f|}\n\ngoal (1 subgoal):\n 1. degree g v = tri g v + quad g v + except g v", "have \"card(?T \\<union> ?Q \\<union> ?E) = card ?T + card ?Q + card ?E\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card\n     ({f \\<in> set (facesAt g v). triangle f} \\<union>\n      {f \\<in> set (facesAt g v). |vertices f| = 4} \\<union>\n      {f \\<in> set (facesAt g v). 5 \\<le> |vertices f|}) =\n    card {f \\<in> set (facesAt g v). triangle f} +\n    card {f \\<in> set (facesAt g v). |vertices f| = 4} +\n    card {f \\<in> set (facesAt g v). 5 \\<le> |vertices f|}", "apply (subst card_Un_disjoint)"], ["proof (prove)\ngoal (4 subgoals):\n 1. finite\n     ({f \\<in> set (facesAt g v). triangle f} \\<union>\n      {f \\<in> set (facesAt g v). |vertices f| = 4})\n 2. finite {f \\<in> set (facesAt g v). 5 \\<le> |vertices f|}\n 3. ({f \\<in> set (facesAt g v). triangle f} \\<union>\n     {f \\<in> set (facesAt g v). |vertices f| = 4}) \\<inter>\n    {f \\<in> set (facesAt g v). 5 \\<le> |vertices f|} =\n    {}\n 4. card\n     ({f \\<in> set (facesAt g v). triangle f} \\<union>\n      {f \\<in> set (facesAt g v). |vertices f| = 4}) +\n    card {f \\<in> set (facesAt g v). 5 \\<le> |vertices f|} =\n    card {f \\<in> set (facesAt g v). triangle f} +\n    card {f \\<in> set (facesAt g v). |vertices f| = 4} +\n    card {f \\<in> set (facesAt g v). 5 \\<le> |vertices f|}", "apply simp"], ["proof (prove)\ngoal (3 subgoals):\n 1. finite {f \\<in> set (facesAt g v). 5 \\<le> |vertices f|}\n 2. ({f \\<in> set (facesAt g v). triangle f} \\<union>\n     {f \\<in> set (facesAt g v). |vertices f| = 4}) \\<inter>\n    {f \\<in> set (facesAt g v). 5 \\<le> |vertices f|} =\n    {}\n 3. card\n     ({f \\<in> set (facesAt g v). triangle f} \\<union>\n      {f \\<in> set (facesAt g v). |vertices f| = 4}) +\n    card {f \\<in> set (facesAt g v). 5 \\<le> |vertices f|} =\n    card {f \\<in> set (facesAt g v). triangle f} +\n    card {f \\<in> set (facesAt g v). |vertices f| = 4} +\n    card {f \\<in> set (facesAt g v). 5 \\<le> |vertices f|}", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. ({f \\<in> set (facesAt g v). triangle f} \\<union>\n     {f \\<in> set (facesAt g v). |vertices f| = 4}) \\<inter>\n    {f \\<in> set (facesAt g v). 5 \\<le> |vertices f|} =\n    {}\n 2. card\n     ({f \\<in> set (facesAt g v). triangle f} \\<union>\n      {f \\<in> set (facesAt g v). |vertices f| = 4}) +\n    card {f \\<in> set (facesAt g v). 5 \\<le> |vertices f|} =\n    card {f \\<in> set (facesAt g v). triangle f} +\n    card {f \\<in> set (facesAt g v). |vertices f| = 4} +\n    card {f \\<in> set (facesAt g v). 5 \\<le> |vertices f|}", "apply fastforce"], ["proof (prove)\ngoal (1 subgoal):\n 1. card\n     ({f \\<in> set (facesAt g v). triangle f} \\<union>\n      {f \\<in> set (facesAt g v). |vertices f| = 4}) +\n    card {f \\<in> set (facesAt g v). 5 \\<le> |vertices f|} =\n    card {f \\<in> set (facesAt g v). triangle f} +\n    card {f \\<in> set (facesAt g v). |vertices f| = 4} +\n    card {f \\<in> set (facesAt g v). 5 \\<le> |vertices f|}", "apply (subst card_Un_disjoint)"], ["proof (prove)\ngoal (4 subgoals):\n 1. finite {f \\<in> set (facesAt g v). triangle f}\n 2. finite {f \\<in> set (facesAt g v). |vertices f| = 4}\n 3. {f \\<in> set (facesAt g v). triangle f} \\<inter>\n    {f \\<in> set (facesAt g v). |vertices f| = 4} =\n    {}\n 4. card {f \\<in> set (facesAt g v). triangle f} +\n    card {f \\<in> set (facesAt g v). |vertices f| = 4} +\n    card {f \\<in> set (facesAt g v). 5 \\<le> |vertices f|} =\n    card {f \\<in> set (facesAt g v). triangle f} +\n    card {f \\<in> set (facesAt g v). |vertices f| = 4} +\n    card {f \\<in> set (facesAt g v). 5 \\<le> |vertices f|}", "apply simp"], ["proof (prove)\ngoal (3 subgoals):\n 1. finite {f \\<in> set (facesAt g v). |vertices f| = 4}\n 2. {f \\<in> set (facesAt g v). triangle f} \\<inter>\n    {f \\<in> set (facesAt g v). |vertices f| = 4} =\n    {}\n 3. card {f \\<in> set (facesAt g v). triangle f} +\n    card {f \\<in> set (facesAt g v). |vertices f| = 4} +\n    card {f \\<in> set (facesAt g v). 5 \\<le> |vertices f|} =\n    card {f \\<in> set (facesAt g v). triangle f} +\n    card {f \\<in> set (facesAt g v). |vertices f| = 4} +\n    card {f \\<in> set (facesAt g v). 5 \\<le> |vertices f|}", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. {f \\<in> set (facesAt g v). triangle f} \\<inter>\n    {f \\<in> set (facesAt g v). |vertices f| = 4} =\n    {}\n 2. card {f \\<in> set (facesAt g v). triangle f} +\n    card {f \\<in> set (facesAt g v). |vertices f| = 4} +\n    card {f \\<in> set (facesAt g v). 5 \\<le> |vertices f|} =\n    card {f \\<in> set (facesAt g v). triangle f} +\n    card {f \\<in> set (facesAt g v). |vertices f| = 4} +\n    card {f \\<in> set (facesAt g v). 5 \\<le> |vertices f|}", "apply fastforce"], ["proof (prove)\ngoal (1 subgoal):\n 1. card {f \\<in> set (facesAt g v). triangle f} +\n    card {f \\<in> set (facesAt g v). |vertices f| = 4} +\n    card {f \\<in> set (facesAt g v). 5 \\<le> |vertices f|} =\n    card {f \\<in> set (facesAt g v). triangle f} +\n    card {f \\<in> set (facesAt g v). |vertices f| = 4} +\n    card {f \\<in> set (facesAt g v). 5 \\<le> |vertices f|}", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  card\n   ({f \\<in> set (facesAt g v). triangle f} \\<union>\n    {f \\<in> set (facesAt g v). |vertices f| = 4} \\<union>\n    {f \\<in> set (facesAt g v). 5 \\<le> |vertices f|}) =\n  card {f \\<in> set (facesAt g v). triangle f} +\n  card {f \\<in> set (facesAt g v). |vertices f| = 4} +\n  card {f \\<in> set (facesAt g v). 5 \\<le> |vertices f|}\n\ngoal (1 subgoal):\n 1. degree g v = tri g v + quad g v + except g v", "also"], ["proof (state)\nthis:\n  card\n   ({f \\<in> set (facesAt g v). triangle f} \\<union>\n    {f \\<in> set (facesAt g v). |vertices f| = 4} \\<union>\n    {f \\<in> set (facesAt g v). 5 \\<le> |vertices f|}) =\n  card {f \\<in> set (facesAt g v). triangle f} +\n  card {f \\<in> set (facesAt g v). |vertices f| = 4} +\n  card {f \\<in> set (facesAt g v). 5 \\<le> |vertices f|}\n\ngoal (1 subgoal):\n 1. degree g v = tri g v + quad g v + except g v", "have \"\\<dots> = tri g v + quad g v + except g v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card {f \\<in> set (facesAt g v). triangle f} +\n    card {f \\<in> set (facesAt g v). |vertices f| = 4} +\n    card {f \\<in> set (facesAt g v). 5 \\<le> |vertices f|} =\n    tri g v + quad g v + except g v", "using fin"], ["proof (prove)\nusing this:\n  final g\n\ngoal (1 subgoal):\n 1. card {f \\<in> set (facesAt g v). triangle f} +\n    card {f \\<in> set (facesAt g v). |vertices f| = 4} +\n    card {f \\<in> set (facesAt g v). 5 \\<le> |vertices f|} =\n    tri g v + quad g v + except g v", "by(simp add:tri_def quad_def except_def\n                distinct_card[symmetric] distinct_filter[OF dist]\n                plane_final_facesAt[OF pl fin v] cong:conj_cong)"], ["proof (state)\nthis:\n  card {f \\<in> set (facesAt g v). triangle f} +\n  card {f \\<in> set (facesAt g v). |vertices f| = 4} +\n  card {f \\<in> set (facesAt g v). 5 \\<le> |vertices f|} =\n  tri g v + quad g v + except g v\n\ngoal (1 subgoal):\n 1. degree g v = tri g v + quad g v + except g v", "finally"], ["proof (chain)\npicking this:\n  degree g v = tri g v + quad g v + except g v", "show ?thesis"], ["proof (prove)\nusing this:\n  degree g v = tri g v + quad g v + except g v\n\ngoal (1 subgoal):\n 1. degree g v = tri g v + quad g v + except g v", "."], ["proof (state)\nthis:\n  degree g v = tri g v + quad g v + except g v\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma plane_fin_exceptionalVertex_def:\nassumes pl: \"inv g\" and fin: \"final g\" and v: \"v : \\<V> g\"\nshows \"exceptionalVertex g v =\n ( | [f \\<leftarrow> facesAt g v . 5 \\<le> |vertices f| ] | \\<noteq> 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. exceptionalVertex g v =\n    (|filter (\\<lambda>f. 5 \\<le> |vertices f|) (facesAt g v)| \\<noteq> 0)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. exceptionalVertex g v =\n    (|filter (\\<lambda>f. 5 \\<le> |vertices f|) (facesAt g v)| \\<noteq> 0)", "have \"\\<And>f. f \\<in> set (facesAt g v) \\<Longrightarrow> final f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f. f \\<in> set (facesAt g v) \\<Longrightarrow> final f", "by(rule plane_final_facesAt[OF pl fin v])"], ["proof (state)\nthis:\n  ?f \\<in> set (facesAt g v) \\<Longrightarrow> final ?f\n\ngoal (1 subgoal):\n 1. exceptionalVertex g v =\n    (|filter (\\<lambda>f. 5 \\<le> |vertices f|) (facesAt g v)| \\<noteq> 0)", "then"], ["proof (chain)\npicking this:\n  ?f \\<in> set (facesAt g v) \\<Longrightarrow> final ?f", "show ?thesis"], ["proof (prove)\nusing this:\n  ?f \\<in> set (facesAt g v) \\<Longrightarrow> final ?f\n\ngoal (1 subgoal):\n 1. exceptionalVertex g v =\n    (|filter (\\<lambda>f. 5 \\<le> |vertices f|) (facesAt g v)| \\<noteq> 0)", "by (simp add: filter_simp exceptionalVertex_def except_def)"], ["proof (state)\nthis:\n  exceptionalVertex g v =\n  (|filter (\\<lambda>f. 5 \\<le> |vertices f|) (facesAt g v)| \\<noteq> 0)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma not_exceptional:\n  \"inv g \\<Longrightarrow> final g \\<Longrightarrow> v : \\<V> g \\<Longrightarrow> f \\<in> set (facesAt g v) \\<Longrightarrow>\n  \\<not> exceptionalVertex g v \\<Longrightarrow> |vertices f| \\<le> 4\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Invariants.inv g; final g; v \\<in> \\<V> g;\n     f \\<in> set (facesAt g v); \\<not> exceptionalVertex g v\\<rbrakk>\n    \\<Longrightarrow> |vertices f| \\<le> 4", "by (auto simp add: plane_fin_exceptionalVertex_def except_def filter_empty_conv)"], ["", "subsection \\<open>Misc\\<close>"], ["", "lemma in_next_plane0I:\nassumes \"g' \\<in> set (generatePolygon n v f g)\" \"f \\<in> set (nonFinals g)\"\n        \"v \\<in> \\<V> f\" \"3 \\<le> n\" \"n < 4+p\"\nshows \"g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g)", "from assms"], ["proof (chain)\npicking this:\n  g' \\<in> set (generatePolygon n v f g)\n  f \\<in> set (nonFinals g)\n  v \\<in> \\<V> f\n  3 \\<le> n\n  n < 4 + p", "have\n    \"\\<exists>n\\<in>{3..<4 + p}. g' \\<in> set (generatePolygon n v f g)\""], ["proof (prove)\nusing this:\n  g' \\<in> set (generatePolygon n v f g)\n  f \\<in> set (nonFinals g)\n  v \\<in> \\<V> f\n  3 \\<le> n\n  n < 4 + p\n\ngoal (1 subgoal):\n 1. \\<exists>n\\<in>{3..<4 + p}. g' \\<in> set (generatePolygon n v f g)", "by auto"], ["proof (state)\nthis:\n  \\<exists>n\\<in>{3..<4 + p}. g' \\<in> set (generatePolygon n v f g)\n\ngoal (1 subgoal):\n 1. g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g)", "with assms"], ["proof (chain)\npicking this:\n  g' \\<in> set (generatePolygon n v f g)\n  f \\<in> set (nonFinals g)\n  v \\<in> \\<V> f\n  3 \\<le> n\n  n < 4 + p\n  \\<exists>n\\<in>{3..<4 + p}. g' \\<in> set (generatePolygon n v f g)", "have \n    \"\\<exists>v\\<in>\\<V> f. \\<exists>n\\<in>{3..<4 + p}. g' \\<in> set (generatePolygon n v f g)\""], ["proof (prove)\nusing this:\n  g' \\<in> set (generatePolygon n v f g)\n  f \\<in> set (nonFinals g)\n  v \\<in> \\<V> f\n  3 \\<le> n\n  n < 4 + p\n  \\<exists>n\\<in>{3..<4 + p}. g' \\<in> set (generatePolygon n v f g)\n\ngoal (1 subgoal):\n 1. \\<exists>v\\<in>\\<V> f.\n       \\<exists>n\\<in>{3..<4 + p}. g' \\<in> set (generatePolygon n v f g)", "by auto"], ["proof (state)\nthis:\n  \\<exists>v\\<in>\\<V> f.\n     \\<exists>n\\<in>{3..<4 + p}. g' \\<in> set (generatePolygon n v f g)\n\ngoal (1 subgoal):\n 1. g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g)", "with assms"], ["proof (chain)\npicking this:\n  g' \\<in> set (generatePolygon n v f g)\n  f \\<in> set (nonFinals g)\n  v \\<in> \\<V> f\n  3 \\<le> n\n  n < 4 + p\n  \\<exists>v\\<in>\\<V> f.\n     \\<exists>n\\<in>{3..<4 + p}. g' \\<in> set (generatePolygon n v f g)", "have\n    \"\\<exists>f\\<in>set (nonFinals g). \\<exists>v\\<in>\\<V> f. \\<exists>n\\<in>{3..<4 + p}. g' \\<in> set (generatePolygon n v f g)\""], ["proof (prove)\nusing this:\n  g' \\<in> set (generatePolygon n v f g)\n  f \\<in> set (nonFinals g)\n  v \\<in> \\<V> f\n  3 \\<le> n\n  n < 4 + p\n  \\<exists>v\\<in>\\<V> f.\n     \\<exists>n\\<in>{3..<4 + p}. g' \\<in> set (generatePolygon n v f g)\n\ngoal (1 subgoal):\n 1. \\<exists>f\\<in>set (nonFinals g).\n       \\<exists>v\\<in>\\<V> f.\n          \\<exists>n\\<in>{3..<4 + p}. g' \\<in> set (generatePolygon n v f g)", "by auto"], ["proof (state)\nthis:\n  \\<exists>f\\<in>set (nonFinals g).\n     \\<exists>v\\<in>\\<V> f.\n        \\<exists>n\\<in>{3..<4 + p}. g' \\<in> set (generatePolygon n v f g)\n\ngoal (1 subgoal):\n 1. g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g)", "moreover"], ["proof (state)\nthis:\n  \\<exists>f\\<in>set (nonFinals g).\n     \\<exists>v\\<in>\\<V> f.\n        \\<exists>n\\<in>{3..<4 + p}. g' \\<in> set (generatePolygon n v f g)\n\ngoal (1 subgoal):\n 1. g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g)", "have \"\\<not> final g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> final g", "using assms(2)"], ["proof (prove)\nusing this:\n  f \\<in> set (nonFinals g)\n\ngoal (1 subgoal):\n 1. \\<not> final g", "by (auto simp: nonFinals_def finalGraph_def filter_empty_conv)"], ["proof (state)\nthis:\n  \\<not> final g\n\ngoal (1 subgoal):\n 1. g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g)", "ultimately"], ["proof (chain)\npicking this:\n  \\<exists>f\\<in>set (nonFinals g).\n     \\<exists>v\\<in>\\<V> f.\n        \\<exists>n\\<in>{3..<4 + p}. g' \\<in> set (generatePolygon n v f g)\n  \\<not> final g", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>f\\<in>set (nonFinals g).\n     \\<exists>v\\<in>\\<V> f.\n        \\<exists>n\\<in>{3..<4 + p}. g' \\<in> set (generatePolygon n v f g)\n  \\<not> final g\n\ngoal (1 subgoal):\n 1. g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g)", "by (simp add: next_plane0_def)"], ["proof (state)\nthis:\n  g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma next_plane0_nonfinals: \"g [next_plane0\\<^bsub>p\\<^esub>]\\<rightarrow> g' \\<Longrightarrow> nonFinals g \\<noteq> []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g) \\<Longrightarrow>\n    nonFinals g \\<noteq> []", "by(auto simp:next_plane0_def finalGraph_def)"], ["", "lemma next_plane0_ex:\nassumes a: \"g [next_plane0\\<^bsub>p\\<^esub>]\\<rightarrow> g'\"\nshows \"\\<exists>f\\<in> set(nonFinals g). \\<exists>v \\<in> \\<V> f. \\<exists>i \\<in> set([3..<Suc(maxGon p)]).\n       g' \\<in> set (generatePolygon i v f g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>f\\<in>set (nonFinals g).\n       \\<exists>v\\<in>\\<V> f.\n          \\<exists>i\\<in>set [3..<Suc (maxGon p)].\n             g' \\<in> set (generatePolygon i v f g)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>f\\<in>set (nonFinals g).\n       \\<exists>v\\<in>\\<V> f.\n          \\<exists>i\\<in>set [3..<Suc (maxGon p)].\n             g' \\<in> set (generatePolygon i v f g)", "from a"], ["proof (chain)\npicking this:\n  g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g)", "have \"\\<not> final g\""], ["proof (prove)\nusing this:\n  g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g)\n\ngoal (1 subgoal):\n 1. \\<not> final g", "by (auto simp add: next_plane0_def)"], ["proof (state)\nthis:\n  \\<not> final g\n\ngoal (1 subgoal):\n 1. \\<exists>f\\<in>set (nonFinals g).\n       \\<exists>v\\<in>\\<V> f.\n          \\<exists>i\\<in>set [3..<Suc (maxGon p)].\n             g' \\<in> set (generatePolygon i v f g)", "with a"], ["proof (chain)\npicking this:\n  g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g)\n  \\<not> final g", "show ?thesis"], ["proof (prove)\nusing this:\n  g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g)\n  \\<not> final g\n\ngoal (1 subgoal):\n 1. \\<exists>f\\<in>set (nonFinals g).\n       \\<exists>v\\<in>\\<V> f.\n          \\<exists>i\\<in>set [3..<Suc (maxGon p)].\n             g' \\<in> set (generatePolygon i v f g)", "by (auto simp add: next_plane0_def nonFinals_def)"], ["proof (state)\nthis:\n  \\<exists>f\\<in>set (nonFinals g).\n     \\<exists>v\\<in>\\<V> f.\n        \\<exists>i\\<in>set [3..<Suc (maxGon p)].\n           g' \\<in> set (generatePolygon i v f g)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma step_outside2:\n \"inv g \\<Longrightarrow> g [next_plane0\\<^bsub>p\\<^esub>]\\<rightarrow> g' \\<Longrightarrow> \\<not> final g' \\<Longrightarrow> |faces g'| \\<noteq> 2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Invariants.inv g;\n     g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g); \\<not> final g'\\<rbrakk>\n    \\<Longrightarrow> |faces g'| \\<noteq> 2", "apply(frule inv_two_faces)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Invariants.inv g;\n     g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g); \\<not> final g';\n     2 \\<le> |faces g|\\<rbrakk>\n    \\<Longrightarrow> |faces g'| \\<noteq> 2", "apply(frule inv_finals_nonempty)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Invariants.inv g;\n     g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g); \\<not> final g';\n     2 \\<le> |faces g|; finals g \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> |faces g'| \\<noteq> 2", "apply(drule inv_mgp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g); \\<not> final g';\n     2 \\<le> |faces g|; finals g \\<noteq> []; minGraphProps g\\<rbrakk>\n    \\<Longrightarrow> |faces g'| \\<noteq> 2", "apply(insert len_faces_sum[of g] len_faces_sum[of g'])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g); \\<not> final g';\n     2 \\<le> |faces g|; finals g \\<noteq> []; minGraphProps g;\n     |faces g| = |finals g| + |nonFinals g|;\n     |faces g'| = |finals g'| + |nonFinals g'|\\<rbrakk>\n    \\<Longrightarrow> |faces g'| \\<noteq> 2", "apply(subgoal_tac \"|nonFinals g| \\<noteq> 0\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g); \\<not> final g';\n     2 \\<le> |faces g|; finals g \\<noteq> []; minGraphProps g;\n     |faces g| = |finals g| + |nonFinals g|;\n     |faces g'| = |finals g'| + |nonFinals g'|;\n     |nonFinals g| \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> |faces g'| \\<noteq> 2\n 2. \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g); \\<not> final g';\n     2 \\<le> |faces g|; finals g \\<noteq> []; minGraphProps g;\n     |faces g| = |finals g| + |nonFinals g|;\n     |faces g'| = |finals g'| + |nonFinals g'|\\<rbrakk>\n    \\<Longrightarrow> |nonFinals g| \\<noteq> 0", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g); \\<not> final g';\n     2 \\<le> |faces g|; finals g \\<noteq> []; minGraphProps g;\n     |faces g| = |finals g| + |nonFinals g|;\n     |faces g'| = |finals g'| + |nonFinals g'|\\<rbrakk>\n    \\<Longrightarrow> |nonFinals g| \\<noteq> 0\n 2. \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g); \\<not> final g';\n     2 \\<le> |faces g|; finals g \\<noteq> []; minGraphProps g;\n     |faces g| = |finals g| + |nonFinals g|;\n     |faces g'| = |finals g'| + |nonFinals g'|;\n     |nonFinals g| \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> |faces g'| \\<noteq> 2", "apply(drule next_plane0_nonfinals)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<not> final g'; 2 \\<le> |faces g|; finals g \\<noteq> [];\n     minGraphProps g; |faces g| = |finals g| + |nonFinals g|;\n     |faces g'| = |finals g'| + |nonFinals g'|;\n     nonFinals g \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> |nonFinals g| \\<noteq> 0\n 2. \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g); \\<not> final g';\n     2 \\<le> |faces g|; finals g \\<noteq> []; minGraphProps g;\n     |faces g| = |finals g| + |nonFinals g|;\n     |faces g'| = |finals g'| + |nonFinals g'|;\n     |nonFinals g| \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> |faces g'| \\<noteq> 2", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g); \\<not> final g';\n     2 \\<le> |faces g|; finals g \\<noteq> []; minGraphProps g;\n     |faces g| = |finals g| + |nonFinals g|;\n     |faces g'| = |finals g'| + |nonFinals g'|;\n     |nonFinals g| \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> |faces g'| \\<noteq> 2", "apply(subgoal_tac \"|nonFinals g'| \\<noteq> 0\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g); \\<not> final g';\n     2 \\<le> |faces g|; finals g \\<noteq> []; minGraphProps g;\n     |faces g| = |finals g| + |nonFinals g|;\n     |faces g'| = |finals g'| + |nonFinals g'|; |nonFinals g| \\<noteq> 0;\n     |nonFinals g'| \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> |faces g'| \\<noteq> 2\n 2. \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g); \\<not> final g';\n     2 \\<le> |faces g|; finals g \\<noteq> []; minGraphProps g;\n     |faces g| = |finals g| + |nonFinals g|;\n     |faces g'| = |finals g'| + |nonFinals g'|;\n     |nonFinals g| \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> |nonFinals g'| \\<noteq> 0", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g); \\<not> final g';\n     2 \\<le> |faces g|; finals g \\<noteq> []; minGraphProps g;\n     |faces g| = |finals g| + |nonFinals g|;\n     |faces g'| = |finals g'| + |nonFinals g'|;\n     |nonFinals g| \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> |nonFinals g'| \\<noteq> 0\n 2. \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g); \\<not> final g';\n     2 \\<le> |faces g|; finals g \\<noteq> []; minGraphProps g;\n     |faces g| = |finals g| + |nonFinals g|;\n     |faces g'| = |finals g'| + |nonFinals g'|; |nonFinals g| \\<noteq> 0;\n     |nonFinals g'| \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> |faces g'| \\<noteq> 2", "apply(simp add:finalGraph_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g); \\<not> final g';\n     2 \\<le> |faces g|; finals g \\<noteq> []; minGraphProps g;\n     |faces g| = |finals g| + |nonFinals g|;\n     |faces g'| = |finals g'| + |nonFinals g'|; |nonFinals g| \\<noteq> 0;\n     |nonFinals g'| \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> |faces g'| \\<noteq> 2", "apply(drule (1) next_plane0_incr_faces)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g); \\<not> final g';\n     2 \\<le> |faces g|; finals g \\<noteq> [];\n     |faces g| = |finals g| + |nonFinals g|;\n     |faces g'| = |finals g'| + |nonFinals g'|; |nonFinals g| \\<noteq> 0;\n     |nonFinals g'| \\<noteq> 0;\n     |finals g'| = |finals g| + 1 \\<and>\n     |nonFinals g| - 1 \\<le> |nonFinals g'|\\<rbrakk>\n    \\<Longrightarrow> |faces g'| \\<noteq> 2", "apply(case_tac \"|faces g| = 2\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g); \\<not> final g';\n     2 \\<le> |faces g|; finals g \\<noteq> [];\n     |faces g| = |finals g| + |nonFinals g|;\n     |faces g'| = |finals g'| + |nonFinals g'|; |nonFinals g| \\<noteq> 0;\n     |nonFinals g'| \\<noteq> 0;\n     |finals g'| = |finals g| + 1 \\<and>\n     |nonFinals g| - 1 \\<le> |nonFinals g'|;\n     |faces g| = 2\\<rbrakk>\n    \\<Longrightarrow> |faces g'| \\<noteq> 2\n 2. \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g); \\<not> final g';\n     2 \\<le> |faces g|; finals g \\<noteq> [];\n     |faces g| = |finals g| + |nonFinals g|;\n     |faces g'| = |finals g'| + |nonFinals g'|; |nonFinals g| \\<noteq> 0;\n     |nonFinals g'| \\<noteq> 0;\n     |finals g'| = |finals g| + 1 \\<and>\n     |nonFinals g| - 1 \\<le> |nonFinals g'|;\n     |faces g| \\<noteq> 2\\<rbrakk>\n    \\<Longrightarrow> |faces g'| \\<noteq> 2", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g); \\<not> final g';\n     2 \\<le> |faces g|; finals g \\<noteq> [];\n     |faces g| = |finals g| + |nonFinals g|;\n     |faces g'| = |finals g'| + |nonFinals g'|; |nonFinals g| \\<noteq> 0;\n     |nonFinals g'| \\<noteq> 0;\n     |finals g'| = |finals g| + 1 \\<and>\n     |nonFinals g| - 1 \\<le> |nonFinals g'|;\n     |faces g| \\<noteq> 2\\<rbrakk>\n    \\<Longrightarrow> |faces g'| \\<noteq> 2\n 2. \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g); \\<not> final g';\n     2 \\<le> |faces g|; finals g \\<noteq> [];\n     |faces g| = |finals g| + |nonFinals g|;\n     |faces g'| = |finals g'| + |nonFinals g'|; |nonFinals g| \\<noteq> 0;\n     |nonFinals g'| \\<noteq> 0;\n     |finals g'| = |finals g| + 1 \\<and>\n     |nonFinals g| - 1 \\<le> |nonFinals g'|;\n     |faces g| = 2\\<rbrakk>\n    \\<Longrightarrow> |faces g'| \\<noteq> 2", "apply arith"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g); \\<not> final g';\n     2 \\<le> |faces g|; finals g \\<noteq> [];\n     |faces g| = |finals g| + |nonFinals g|;\n     |faces g'| = |finals g'| + |nonFinals g'|; |nonFinals g| \\<noteq> 0;\n     |nonFinals g'| \\<noteq> 0;\n     |finals g'| = |finals g| + 1 \\<and>\n     |nonFinals g| - 1 \\<le> |nonFinals g'|;\n     |faces g| = 2\\<rbrakk>\n    \\<Longrightarrow> |faces g'| \\<noteq> 2", "apply(subgoal_tac \"|finals g| \\<noteq> 0\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g); \\<not> final g';\n     2 \\<le> |faces g|; finals g \\<noteq> [];\n     |faces g| = |finals g| + |nonFinals g|;\n     |faces g'| = |finals g'| + |nonFinals g'|; |nonFinals g| \\<noteq> 0;\n     |nonFinals g'| \\<noteq> 0;\n     |finals g'| = |finals g| + 1 \\<and>\n     |nonFinals g| - 1 \\<le> |nonFinals g'|;\n     |faces g| = 2; |finals g| \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> |faces g'| \\<noteq> 2\n 2. \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g); \\<not> final g';\n     2 \\<le> |faces g|; finals g \\<noteq> [];\n     |faces g| = |finals g| + |nonFinals g|;\n     |faces g'| = |finals g'| + |nonFinals g'|; |nonFinals g| \\<noteq> 0;\n     |nonFinals g'| \\<noteq> 0;\n     |finals g'| = |finals g| + 1 \\<and>\n     |nonFinals g| - 1 \\<le> |nonFinals g'|;\n     |faces g| = 2\\<rbrakk>\n    \\<Longrightarrow> |finals g| \\<noteq> 0", "apply arith"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g); \\<not> final g';\n     2 \\<le> |faces g|; finals g \\<noteq> [];\n     |faces g| = |finals g| + |nonFinals g|;\n     |faces g'| = |finals g'| + |nonFinals g'|; |nonFinals g| \\<noteq> 0;\n     |nonFinals g'| \\<noteq> 0;\n     |finals g'| = |finals g| + 1 \\<and>\n     |nonFinals g| - 1 \\<le> |nonFinals g'|;\n     |faces g| = 2\\<rbrakk>\n    \\<Longrightarrow> |finals g| \\<noteq> 0", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsection\\<open>Increasing final faces\\<close>"], ["", "lemma set_finals_splitFace[simp]:\n \"\\<lbrakk> f \\<in> \\<F> g; \\<not> final f \\<rbrakk> \\<Longrightarrow>\n  set(finals(snd(snd(splitFace g u v f vs)))) = set(finals g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> \\<F> g; \\<not> final f\\<rbrakk>\n    \\<Longrightarrow> set (finals (snd (snd (splitFace g u v f vs)))) =\n                      set (finals g)", "apply(auto simp add:splitFace_def split_def finals_def\n                split_face_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>f \\<in> \\<F> g; \\<not> final f;\n        x \\<in> set (replace f\n                      [Face (v # between (vertices f) v u @ u # vs)\n                        Nonfinal]\n                      (faces g));\n        final x\\<rbrakk>\n       \\<Longrightarrow> x \\<in> \\<F> g\n 2. \\<And>x.\n       \\<lbrakk>f \\<in> \\<F> g; \\<not> final f; x \\<in> \\<F> g;\n        final x\\<rbrakk>\n       \\<Longrightarrow> x \\<in> set (replace f\n [Face (v # between (vertices f) v u @ u # vs) Nonfinal] (faces g))", "apply(drule replace5)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>f \\<in> \\<F> g; \\<not> final f; final x;\n        x \\<in> \\<F> g \\<or>\n        x \\<in> set [Face (v # between (vertices f) v u @ u # vs)\n                      Nonfinal]\\<rbrakk>\n       \\<Longrightarrow> x \\<in> \\<F> g\n 2. \\<And>x.\n       \\<lbrakk>f \\<in> \\<F> g; \\<not> final f; x \\<in> \\<F> g;\n        final x\\<rbrakk>\n       \\<Longrightarrow> x \\<in> set (replace f\n [Face (v # between (vertices f) v u @ u # vs) Nonfinal] (faces g))", "apply(clarsimp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>f \\<in> \\<F> g; \\<not> final f; x \\<in> \\<F> g;\n        final x\\<rbrakk>\n       \\<Longrightarrow> x \\<in> set (replace f\n [Face (v # between (vertices f) v u @ u # vs) Nonfinal] (faces g))", "apply(erule replace4)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>f \\<in> \\<F> g; \\<not> final f; final x\\<rbrakk>\n       \\<Longrightarrow> f \\<noteq> x", "apply clarsimp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma next_plane0_finals_incr:\n \"g [next_plane0\\<^bsub>p\\<^esub>]\\<rightarrow> g' \\<Longrightarrow> f \\<in> set(finals g) \\<Longrightarrow> f \\<in> set(finals g')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g);\n     f \\<in> set (finals g)\\<rbrakk>\n    \\<Longrightarrow> f \\<in> set (finals g')", "apply(auto simp:next_plane0_def generatePolygon_def split:if_split_asm)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa xb xc.\n       \\<lbrakk>f \\<in> set (finals g); \\<not> final g;\n        x \\<in> set (nonFinals g); xa \\<in> \\<V> x;\n        g' = subdivFace g x (indexToVertexList x xa xc);\n        xc \\<in> set (enumerator xb |vertices x|);\n        \\<not> containsDuplicateEdge g x xa xc; 3 \\<le> xb;\n        xb < 4 + p\\<rbrakk>\n       \\<Longrightarrow> f \\<in> set (finals\n (subdivFace g x (indexToVertexList x xa xc)))", "apply(erule subdivFace_pres_finals)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa xb xc.\n       \\<lbrakk>\\<not> final g; x \\<in> set (nonFinals g); xa \\<in> \\<V> x;\n        g' = subdivFace g x (indexToVertexList x xa xc);\n        xc \\<in> set (enumerator xb |vertices x|);\n        \\<not> containsDuplicateEdge g x xa xc; 3 \\<le> xb;\n        xb < 4 + p\\<rbrakk>\n       \\<Longrightarrow> \\<not> final x", "apply (simp add:nonFinals_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma next_plane0_finals_subset:\n  \"g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g) \\<Longrightarrow>\n  set (finals g) \\<subseteq> set (finals g')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g) \\<Longrightarrow>\n    set (finals g) \\<subseteq> set (finals g')", "by (auto simp add: next_plane0_finals_incr)"], ["", "lemma next_plane0_final_mono:\n  \"\\<lbrakk> g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g); f \\<in> \\<F> g; final f \\<rbrakk> \\<Longrightarrow> f \\<in> \\<F> g'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g); f \\<in> \\<F> g;\n     final f\\<rbrakk>\n    \\<Longrightarrow> f \\<in> \\<F> g'", "apply(drule next_plane0_finals_subset)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> \\<F> g; final f;\n     set (finals g) \\<subseteq> set (finals g')\\<rbrakk>\n    \\<Longrightarrow> f \\<in> \\<F> g'", "apply(simp add:finals_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> \\<F> g; final f;\n     {x \\<in> \\<F> g. final x}\n     \\<subseteq> {x \\<in> \\<F> g'. final x}\\<rbrakk>\n    \\<Longrightarrow> f \\<in> \\<F> g'", "apply blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsection\\<open>Increasing vertices\\<close>"], ["", "lemma next_plane0_vertices_subset:\n \"\\<lbrakk> g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g); minGraphProps g \\<rbrakk> \\<Longrightarrow> \\<V> g \\<subseteq> \\<V> g'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g);\n     minGraphProps g\\<rbrakk>\n    \\<Longrightarrow> \\<V> g \\<subseteq> \\<V> g'", "apply(rule next_plane0_incr)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g);\n        minGraphProps g; ?Q x y; \\<V> y \\<subseteq> \\<V> z\\<rbrakk>\n       \\<Longrightarrow> \\<V> x \\<subseteq> \\<V> z\n 2. \\<And>f ga.\n       \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g);\n        minGraphProps g; f \\<in> \\<F> ga; \\<not> final f\\<rbrakk>\n       \\<Longrightarrow> \\<V> ga \\<subseteq> \\<V> (makeFaceFinal f ga)\n 3. \\<And>ga u v f vs.\n       \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g);\n        minGraphProps g; pre_splitFace ga u v f vs\\<rbrakk>\n       \\<Longrightarrow> ?Q ga (snd (snd (splitFace ga u v f vs)))\n 4. \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g);\n     minGraphProps g\\<rbrakk>\n    \\<Longrightarrow> minGraphProps g\n 5. \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g);\n     minGraphProps g\\<rbrakk>\n    \\<Longrightarrow> g' \\<in> set (next_plane0\\<^bsub>?p\\<^esub> g)", "apply(erule (1) subset_trans)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>f ga.\n       \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g);\n        minGraphProps g; f \\<in> \\<F> ga; \\<not> final f\\<rbrakk>\n       \\<Longrightarrow> \\<V> ga \\<subseteq> \\<V> (makeFaceFinal f ga)\n 2. \\<And>ga u v f vs.\n       \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g);\n        minGraphProps g; pre_splitFace ga u v f vs\\<rbrakk>\n       \\<Longrightarrow> \\<V> ga\n                         \\<subseteq> \\<V>\n(snd (snd (splitFace ga u v f vs)))\n 3. \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g);\n     minGraphProps g\\<rbrakk>\n    \\<Longrightarrow> minGraphProps g\n 4. \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g);\n     minGraphProps g\\<rbrakk>\n    \\<Longrightarrow> g' \\<in> set (next_plane0\\<^bsub>?p\\<^esub> g)", "apply(simp add: vertices_makeFaceFinal)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>ga u v f vs.\n       \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g);\n        minGraphProps g; pre_splitFace ga u v f vs\\<rbrakk>\n       \\<Longrightarrow> \\<V> ga\n                         \\<subseteq> \\<V>\n(snd (snd (splitFace ga u v f vs)))\n 2. \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g);\n     minGraphProps g\\<rbrakk>\n    \\<Longrightarrow> minGraphProps g\n 3. \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g);\n     minGraphProps g\\<rbrakk>\n    \\<Longrightarrow> g' \\<in> set (next_plane0\\<^bsub>?p\\<^esub> g)", "defer"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g);\n     minGraphProps g\\<rbrakk>\n    \\<Longrightarrow> minGraphProps g\n 2. \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g);\n     minGraphProps g\\<rbrakk>\n    \\<Longrightarrow> g' \\<in> set (next_plane0\\<^bsub>?p\\<^esub> g)\n 3. \\<And>ga u v f vs.\n       \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g);\n        minGraphProps g; pre_splitFace ga u v f vs\\<rbrakk>\n       \\<Longrightarrow> \\<V> ga\n                         \\<subseteq> \\<V>\n(snd (snd (splitFace ga u v f vs)))", "apply assumption+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ga u v f vs.\n       \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g);\n        minGraphProps g; pre_splitFace ga u v f vs\\<rbrakk>\n       \\<Longrightarrow> \\<V> ga\n                         \\<subseteq> \\<V>\n(snd (snd (splitFace ga u v f vs)))", "apply (auto simp: splitFace_def split_def vertices_graph)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsection\\<open>Increasing vertex degrees\\<close>"], ["", "lemma next_plane0_incr_faceListAt:\n \"\\<lbrakk> g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g); minGraphProps g \\<rbrakk>\n  \\<Longrightarrow> |faceListAt g| \\<le> |faceListAt g'| \\<and>\n      (\\<forall>v < |faceListAt g|. |faceListAt g ! v| \\<le> |faceListAt g' ! v| )\"\n (is \"_ \\<Longrightarrow> _ \\<Longrightarrow> ?Q g g'\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g);\n     minGraphProps g\\<rbrakk>\n    \\<Longrightarrow> |faceListAt g| \\<le> |faceListAt g'| \\<and>\n                      (\\<forall>v<|faceListAt g|.\n                          |faceListAt g ! v| \\<le> |faceListAt g' ! v|)", "apply(rule next_plane0_incr[where Q = ?Q])"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g);\n        minGraphProps g;\n        |faceListAt x| \\<le> |faceListAt y| \\<and>\n        (\\<forall>v<|faceListAt x|.\n            |faceListAt x ! v| \\<le> |faceListAt y ! v|);\n        |faceListAt y| \\<le> |faceListAt z| \\<and>\n        (\\<forall>v<|faceListAt y|.\n            |faceListAt y ! v| \\<le> |faceListAt z ! v|)\\<rbrakk>\n       \\<Longrightarrow> |faceListAt x| \\<le> |faceListAt z| \\<and>\n                         (\\<forall>v<|faceListAt x|.\n                             |faceListAt x ! v| \\<le> |faceListAt z ! v|)\n 2. \\<And>f ga.\n       \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g);\n        minGraphProps g; f \\<in> \\<F> ga; \\<not> final f\\<rbrakk>\n       \\<Longrightarrow> |faceListAt ga|\n                         \\<le> |faceListAt (makeFaceFinal f ga)| \\<and>\n                         (\\<forall>v<|faceListAt ga|.\n                             |faceListAt ga ! v|\n                             \\<le> |faceListAt (makeFaceFinal f ga) ! v|)\n 3. \\<And>ga u v f vs.\n       \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g);\n        minGraphProps g; pre_splitFace ga u v f vs\\<rbrakk>\n       \\<Longrightarrow> |faceListAt ga|\n                         \\<le> |faceListAt\n                                 (snd (snd (splitFace ga u v f vs)))| \\<and>\n                         (\\<forall>va<|faceListAt ga|.\n                             |faceListAt ga ! va|\n                             \\<le> |faceListAt\n                                     (snd (snd (splitFace ga u v f vs))) !\n                                    va|)\n 4. \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g);\n     minGraphProps g\\<rbrakk>\n    \\<Longrightarrow> minGraphProps g\n 5. \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g);\n     minGraphProps g\\<rbrakk>\n    \\<Longrightarrow> g' \\<in> set (next_plane0\\<^bsub>?p\\<^esub> g)", "prefer 4"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g);\n     minGraphProps g\\<rbrakk>\n    \\<Longrightarrow> minGraphProps g\n 2. \\<And>x y z.\n       \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g);\n        minGraphProps g;\n        |faceListAt x| \\<le> |faceListAt y| \\<and>\n        (\\<forall>v<|faceListAt x|.\n            |faceListAt x ! v| \\<le> |faceListAt y ! v|);\n        |faceListAt y| \\<le> |faceListAt z| \\<and>\n        (\\<forall>v<|faceListAt y|.\n            |faceListAt y ! v| \\<le> |faceListAt z ! v|)\\<rbrakk>\n       \\<Longrightarrow> |faceListAt x| \\<le> |faceListAt z| \\<and>\n                         (\\<forall>v<|faceListAt x|.\n                             |faceListAt x ! v| \\<le> |faceListAt z ! v|)\n 3. \\<And>f ga.\n       \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g);\n        minGraphProps g; f \\<in> \\<F> ga; \\<not> final f\\<rbrakk>\n       \\<Longrightarrow> |faceListAt ga|\n                         \\<le> |faceListAt (makeFaceFinal f ga)| \\<and>\n                         (\\<forall>v<|faceListAt ga|.\n                             |faceListAt ga ! v|\n                             \\<le> |faceListAt (makeFaceFinal f ga) ! v|)\n 4. \\<And>ga u v f vs.\n       \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g);\n        minGraphProps g; pre_splitFace ga u v f vs\\<rbrakk>\n       \\<Longrightarrow> |faceListAt ga|\n                         \\<le> |faceListAt\n                                 (snd (snd (splitFace ga u v f vs)))| \\<and>\n                         (\\<forall>va<|faceListAt ga|.\n                             |faceListAt ga ! va|\n                             \\<le> |faceListAt\n                                     (snd (snd (splitFace ga u v f vs))) !\n                                    va|)\n 5. \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g);\n     minGraphProps g\\<rbrakk>\n    \\<Longrightarrow> g' \\<in> set (next_plane0\\<^bsub>?p\\<^esub> g)", "apply assumption"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g);\n        minGraphProps g;\n        |faceListAt x| \\<le> |faceListAt y| \\<and>\n        (\\<forall>v<|faceListAt x|.\n            |faceListAt x ! v| \\<le> |faceListAt y ! v|);\n        |faceListAt y| \\<le> |faceListAt z| \\<and>\n        (\\<forall>v<|faceListAt y|.\n            |faceListAt y ! v| \\<le> |faceListAt z ! v|)\\<rbrakk>\n       \\<Longrightarrow> |faceListAt x| \\<le> |faceListAt z| \\<and>\n                         (\\<forall>v<|faceListAt x|.\n                             |faceListAt x ! v| \\<le> |faceListAt z ! v|)\n 2. \\<And>f ga.\n       \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g);\n        minGraphProps g; f \\<in> \\<F> ga; \\<not> final f\\<rbrakk>\n       \\<Longrightarrow> |faceListAt ga|\n                         \\<le> |faceListAt (makeFaceFinal f ga)| \\<and>\n                         (\\<forall>v<|faceListAt ga|.\n                             |faceListAt ga ! v|\n                             \\<le> |faceListAt (makeFaceFinal f ga) ! v|)\n 3. \\<And>ga u v f vs.\n       \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g);\n        minGraphProps g; pre_splitFace ga u v f vs\\<rbrakk>\n       \\<Longrightarrow> |faceListAt ga|\n                         \\<le> |faceListAt\n                                 (snd (snd (splitFace ga u v f vs)))| \\<and>\n                         (\\<forall>va<|faceListAt ga|.\n                             |faceListAt ga ! va|\n                             \\<le> |faceListAt\n                                     (snd (snd (splitFace ga u v f vs))) !\n                                    va|)\n 4. \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g);\n     minGraphProps g\\<rbrakk>\n    \\<Longrightarrow> g' \\<in> set (next_plane0\\<^bsub>?p\\<^esub> g)", "prefer 4"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g);\n     minGraphProps g\\<rbrakk>\n    \\<Longrightarrow> g' \\<in> set (next_plane0\\<^bsub>?p\\<^esub> g)\n 2. \\<And>x y z.\n       \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g);\n        minGraphProps g;\n        |faceListAt x| \\<le> |faceListAt y| \\<and>\n        (\\<forall>v<|faceListAt x|.\n            |faceListAt x ! v| \\<le> |faceListAt y ! v|);\n        |faceListAt y| \\<le> |faceListAt z| \\<and>\n        (\\<forall>v<|faceListAt y|.\n            |faceListAt y ! v| \\<le> |faceListAt z ! v|)\\<rbrakk>\n       \\<Longrightarrow> |faceListAt x| \\<le> |faceListAt z| \\<and>\n                         (\\<forall>v<|faceListAt x|.\n                             |faceListAt x ! v| \\<le> |faceListAt z ! v|)\n 3. \\<And>f ga.\n       \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g);\n        minGraphProps g; f \\<in> \\<F> ga; \\<not> final f\\<rbrakk>\n       \\<Longrightarrow> |faceListAt ga|\n                         \\<le> |faceListAt (makeFaceFinal f ga)| \\<and>\n                         (\\<forall>v<|faceListAt ga|.\n                             |faceListAt ga ! v|\n                             \\<le> |faceListAt (makeFaceFinal f ga) ! v|)\n 4. \\<And>ga u v f vs.\n       \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g);\n        minGraphProps g; pre_splitFace ga u v f vs\\<rbrakk>\n       \\<Longrightarrow> |faceListAt ga|\n                         \\<le> |faceListAt\n                                 (snd (snd (splitFace ga u v f vs)))| \\<and>\n                         (\\<forall>va<|faceListAt ga|.\n                             |faceListAt ga ! va|\n                             \\<le> |faceListAt\n                                     (snd (snd (splitFace ga u v f vs))) !\n                                    va|)", "apply assumption"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g);\n        minGraphProps g;\n        |faceListAt x| \\<le> |faceListAt y| \\<and>\n        (\\<forall>v<|faceListAt x|.\n            |faceListAt x ! v| \\<le> |faceListAt y ! v|);\n        |faceListAt y| \\<le> |faceListAt z| \\<and>\n        (\\<forall>v<|faceListAt y|.\n            |faceListAt y ! v| \\<le> |faceListAt z ! v|)\\<rbrakk>\n       \\<Longrightarrow> |faceListAt x| \\<le> |faceListAt z| \\<and>\n                         (\\<forall>v<|faceListAt x|.\n                             |faceListAt x ! v| \\<le> |faceListAt z ! v|)\n 2. \\<And>f ga.\n       \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g);\n        minGraphProps g; f \\<in> \\<F> ga; \\<not> final f\\<rbrakk>\n       \\<Longrightarrow> |faceListAt ga|\n                         \\<le> |faceListAt (makeFaceFinal f ga)| \\<and>\n                         (\\<forall>v<|faceListAt ga|.\n                             |faceListAt ga ! v|\n                             \\<le> |faceListAt (makeFaceFinal f ga) ! v|)\n 3. \\<And>ga u v f vs.\n       \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g);\n        minGraphProps g; pre_splitFace ga u v f vs\\<rbrakk>\n       \\<Longrightarrow> |faceListAt ga|\n                         \\<le> |faceListAt\n                                 (snd (snd (splitFace ga u v f vs)))| \\<and>\n                         (\\<forall>va<|faceListAt ga|.\n                             |faceListAt ga ! va|\n                             \\<le> |faceListAt\n                                     (snd (snd (splitFace ga u v f vs))) !\n                                    va|)", "apply(rule conjI)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g);\n        minGraphProps g;\n        |faceListAt x| \\<le> |faceListAt y| \\<and>\n        (\\<forall>v<|faceListAt x|.\n            |faceListAt x ! v| \\<le> |faceListAt y ! v|);\n        |faceListAt y| \\<le> |faceListAt z| \\<and>\n        (\\<forall>v<|faceListAt y|.\n            |faceListAt y ! v| \\<le> |faceListAt z ! v|)\\<rbrakk>\n       \\<Longrightarrow> |faceListAt x| \\<le> |faceListAt z|\n 2. \\<And>x y z.\n       \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g);\n        minGraphProps g;\n        |faceListAt x| \\<le> |faceListAt y| \\<and>\n        (\\<forall>v<|faceListAt x|.\n            |faceListAt x ! v| \\<le> |faceListAt y ! v|);\n        |faceListAt y| \\<le> |faceListAt z| \\<and>\n        (\\<forall>v<|faceListAt y|.\n            |faceListAt y ! v| \\<le> |faceListAt z ! v|)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>v<|faceListAt x|.\n                            |faceListAt x ! v| \\<le> |faceListAt z ! v|\n 3. \\<And>f ga.\n       \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g);\n        minGraphProps g; f \\<in> \\<F> ga; \\<not> final f\\<rbrakk>\n       \\<Longrightarrow> |faceListAt ga|\n                         \\<le> |faceListAt (makeFaceFinal f ga)| \\<and>\n                         (\\<forall>v<|faceListAt ga|.\n                             |faceListAt ga ! v|\n                             \\<le> |faceListAt (makeFaceFinal f ga) ! v|)\n 4. \\<And>ga u v f vs.\n       \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g);\n        minGraphProps g; pre_splitFace ga u v f vs\\<rbrakk>\n       \\<Longrightarrow> |faceListAt ga|\n                         \\<le> |faceListAt\n                                 (snd (snd (splitFace ga u v f vs)))| \\<and>\n                         (\\<forall>va<|faceListAt ga|.\n                             |faceListAt ga ! va|\n                             \\<le> |faceListAt\n                                     (snd (snd (splitFace ga u v f vs))) !\n                                    va|)", "apply fastforce"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g);\n        minGraphProps g;\n        |faceListAt x| \\<le> |faceListAt y| \\<and>\n        (\\<forall>v<|faceListAt x|.\n            |faceListAt x ! v| \\<le> |faceListAt y ! v|);\n        |faceListAt y| \\<le> |faceListAt z| \\<and>\n        (\\<forall>v<|faceListAt y|.\n            |faceListAt y ! v| \\<le> |faceListAt z ! v|)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>v<|faceListAt x|.\n                            |faceListAt x ! v| \\<le> |faceListAt z ! v|\n 2. \\<And>f ga.\n       \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g);\n        minGraphProps g; f \\<in> \\<F> ga; \\<not> final f\\<rbrakk>\n       \\<Longrightarrow> |faceListAt ga|\n                         \\<le> |faceListAt (makeFaceFinal f ga)| \\<and>\n                         (\\<forall>v<|faceListAt ga|.\n                             |faceListAt ga ! v|\n                             \\<le> |faceListAt (makeFaceFinal f ga) ! v|)\n 3. \\<And>ga u v f vs.\n       \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g);\n        minGraphProps g; pre_splitFace ga u v f vs\\<rbrakk>\n       \\<Longrightarrow> |faceListAt ga|\n                         \\<le> |faceListAt\n                                 (snd (snd (splitFace ga u v f vs)))| \\<and>\n                         (\\<forall>va<|faceListAt ga|.\n                             |faceListAt ga ! va|\n                             \\<le> |faceListAt\n                                     (snd (snd (splitFace ga u v f vs))) !\n                                    va|)", "apply(clarsimp)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x y z v.\n       \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g);\n        minGraphProps g; |faceListAt x| \\<le> |faceListAt y|;\n        \\<forall>v<|faceListAt x|.\n           |faceListAt x ! v| \\<le> |faceListAt y ! v|;\n        |faceListAt y| \\<le> |faceListAt z|;\n        \\<forall>v<|faceListAt y|.\n           |faceListAt y ! v| \\<le> |faceListAt z ! v|;\n        v < |faceListAt x|\\<rbrakk>\n       \\<Longrightarrow> |faceListAt x ! v| \\<le> |faceListAt z ! v|\n 2. \\<And>f ga.\n       \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g);\n        minGraphProps g; f \\<in> \\<F> ga; \\<not> final f\\<rbrakk>\n       \\<Longrightarrow> |faceListAt ga|\n                         \\<le> |faceListAt (makeFaceFinal f ga)| \\<and>\n                         (\\<forall>v<|faceListAt ga|.\n                             |faceListAt ga ! v|\n                             \\<le> |faceListAt (makeFaceFinal f ga) ! v|)\n 3. \\<And>ga u v f vs.\n       \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g);\n        minGraphProps g; pre_splitFace ga u v f vs\\<rbrakk>\n       \\<Longrightarrow> |faceListAt ga|\n                         \\<le> |faceListAt\n                                 (snd (snd (splitFace ga u v f vs)))| \\<and>\n                         (\\<forall>va<|faceListAt ga|.\n                             |faceListAt ga ! va|\n                             \\<le> |faceListAt\n                                     (snd (snd (splitFace ga u v f vs))) !\n                                    va|)", "apply(erule allE, erule impE, assumption)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x y z v.\n       \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g);\n        minGraphProps g; |faceListAt x| \\<le> |faceListAt y|;\n        |faceListAt y| \\<le> |faceListAt z|;\n        \\<forall>v<|faceListAt y|.\n           |faceListAt y ! v| \\<le> |faceListAt z ! v|;\n        v < |faceListAt x|;\n        |faceListAt x ! v| \\<le> |faceListAt y ! v|\\<rbrakk>\n       \\<Longrightarrow> |faceListAt x ! v| \\<le> |faceListAt z ! v|\n 2. \\<And>f ga.\n       \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g);\n        minGraphProps g; f \\<in> \\<F> ga; \\<not> final f\\<rbrakk>\n       \\<Longrightarrow> |faceListAt ga|\n                         \\<le> |faceListAt (makeFaceFinal f ga)| \\<and>\n                         (\\<forall>v<|faceListAt ga|.\n                             |faceListAt ga ! v|\n                             \\<le> |faceListAt (makeFaceFinal f ga) ! v|)\n 3. \\<And>ga u v f vs.\n       \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g);\n        minGraphProps g; pre_splitFace ga u v f vs\\<rbrakk>\n       \\<Longrightarrow> |faceListAt ga|\n                         \\<le> |faceListAt\n                                 (snd (snd (splitFace ga u v f vs)))| \\<and>\n                         (\\<forall>va<|faceListAt ga|.\n                             |faceListAt ga ! va|\n                             \\<le> |faceListAt\n                                     (snd (snd (splitFace ga u v f vs))) !\n                                    va|)", "apply(erule_tac x = v in allE, erule impE)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x y z v.\n       \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g);\n        minGraphProps g; |faceListAt x| \\<le> |faceListAt y|;\n        |faceListAt y| \\<le> |faceListAt z|; v < |faceListAt x|;\n        |faceListAt x ! v| \\<le> |faceListAt y ! v|\\<rbrakk>\n       \\<Longrightarrow> v < |faceListAt y|\n 2. \\<And>x y z v.\n       \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g);\n        minGraphProps g; |faceListAt x| \\<le> |faceListAt y|;\n        |faceListAt y| \\<le> |faceListAt z|; v < |faceListAt x|;\n        |faceListAt x ! v| \\<le> |faceListAt y ! v|;\n        |faceListAt y ! v| \\<le> |faceListAt z ! v|\\<rbrakk>\n       \\<Longrightarrow> |faceListAt x ! v| \\<le> |faceListAt z ! v|\n 3. \\<And>f ga.\n       \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g);\n        minGraphProps g; f \\<in> \\<F> ga; \\<not> final f\\<rbrakk>\n       \\<Longrightarrow> |faceListAt ga|\n                         \\<le> |faceListAt (makeFaceFinal f ga)| \\<and>\n                         (\\<forall>v<|faceListAt ga|.\n                             |faceListAt ga ! v|\n                             \\<le> |faceListAt (makeFaceFinal f ga) ! v|)\n 4. \\<And>ga u v f vs.\n       \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g);\n        minGraphProps g; pre_splitFace ga u v f vs\\<rbrakk>\n       \\<Longrightarrow> |faceListAt ga|\n                         \\<le> |faceListAt\n                                 (snd (snd (splitFace ga u v f vs)))| \\<and>\n                         (\\<forall>va<|faceListAt ga|.\n                             |faceListAt ga ! va|\n                             \\<le> |faceListAt\n                                     (snd (snd (splitFace ga u v f vs))) !\n                                    va|)", "apply force"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x y z v.\n       \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g);\n        minGraphProps g; |faceListAt x| \\<le> |faceListAt y|;\n        |faceListAt y| \\<le> |faceListAt z|; v < |faceListAt x|;\n        |faceListAt x ! v| \\<le> |faceListAt y ! v|;\n        |faceListAt y ! v| \\<le> |faceListAt z ! v|\\<rbrakk>\n       \\<Longrightarrow> |faceListAt x ! v| \\<le> |faceListAt z ! v|\n 2. \\<And>f ga.\n       \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g);\n        minGraphProps g; f \\<in> \\<F> ga; \\<not> final f\\<rbrakk>\n       \\<Longrightarrow> |faceListAt ga|\n                         \\<le> |faceListAt (makeFaceFinal f ga)| \\<and>\n                         (\\<forall>v<|faceListAt ga|.\n                             |faceListAt ga ! v|\n                             \\<le> |faceListAt (makeFaceFinal f ga) ! v|)\n 3. \\<And>ga u v f vs.\n       \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g);\n        minGraphProps g; pre_splitFace ga u v f vs\\<rbrakk>\n       \\<Longrightarrow> |faceListAt ga|\n                         \\<le> |faceListAt\n                                 (snd (snd (splitFace ga u v f vs)))| \\<and>\n                         (\\<forall>va<|faceListAt ga|.\n                             |faceListAt ga ! va|\n                             \\<le> |faceListAt\n                                     (snd (snd (splitFace ga u v f vs))) !\n                                    va|)", "apply force"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>f ga.\n       \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g);\n        minGraphProps g; f \\<in> \\<F> ga; \\<not> final f\\<rbrakk>\n       \\<Longrightarrow> |faceListAt ga|\n                         \\<le> |faceListAt (makeFaceFinal f ga)| \\<and>\n                         (\\<forall>v<|faceListAt ga|.\n                             |faceListAt ga ! v|\n                             \\<le> |faceListAt (makeFaceFinal f ga) ! v|)\n 2. \\<And>ga u v f vs.\n       \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g);\n        minGraphProps g; pre_splitFace ga u v f vs\\<rbrakk>\n       \\<Longrightarrow> |faceListAt ga|\n                         \\<le> |faceListAt\n                                 (snd (snd (splitFace ga u v f vs)))| \\<and>\n                         (\\<forall>va<|faceListAt ga|.\n                             |faceListAt ga ! va|\n                             \\<le> |faceListAt\n                                     (snd (snd (splitFace ga u v f vs))) !\n                                    va|)", "apply(simp add: makeFaceFinal_def makeFaceFinalFaceList_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ga u v f vs.\n       \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g);\n        minGraphProps g; pre_splitFace ga u v f vs\\<rbrakk>\n       \\<Longrightarrow> |faceListAt ga|\n                         \\<le> |faceListAt\n                                 (snd (snd (splitFace ga u v f vs)))| \\<and>\n                         (\\<forall>va<|faceListAt ga|.\n                             |faceListAt ga ! va|\n                             \\<le> |faceListAt\n                                     (snd (snd (splitFace ga u v f vs))) !\n                                    va|)", "apply (simp add: splitFace_def split_def nth_append nth_list_update)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma next_plane0_incr_degree:\n \"\\<lbrakk> g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g); minGraphProps g; v \\<in> \\<V> g \\<rbrakk>\n  \\<Longrightarrow> degree g v \\<le> degree g' v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g); minGraphProps g;\n     v \\<in> \\<V> g\\<rbrakk>\n    \\<Longrightarrow> degree g v \\<le> degree g' v", "apply(frule (1) next_plane0_incr_faceListAt)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g); minGraphProps g;\n     v \\<in> \\<V> g;\n     |faceListAt g| \\<le> |faceListAt g'| \\<and>\n     (\\<forall>v<|faceListAt g|.\n         |faceListAt g ! v| \\<le> |faceListAt g' ! v|)\\<rbrakk>\n    \\<Longrightarrow> degree g v \\<le> degree g' v", "apply(frule (1) next_plane0_vertices_subset)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g); minGraphProps g;\n     v \\<in> \\<V> g;\n     |faceListAt g| \\<le> |faceListAt g'| \\<and>\n     (\\<forall>v<|faceListAt g|.\n         |faceListAt g ! v| \\<le> |faceListAt g' ! v|);\n     \\<V> g \\<subseteq> \\<V> g'\\<rbrakk>\n    \\<Longrightarrow> degree g v \\<le> degree g' v", "apply(simp add:degree_def facesAt_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g); minGraphProps g;\n     v \\<in> \\<V> g;\n     |faceListAt g| \\<le> |faceListAt g'| \\<and>\n     (\\<forall>v<|faceListAt g|.\n         |faceListAt g ! v| \\<le> |faceListAt g' ! v|);\n     \\<V> g \\<subseteq> \\<V> g'\\<rbrakk>\n    \\<Longrightarrow> |faceListAt g ! v| \\<le> |faceListAt g' ! v|", "apply(frule minGraphProps4)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g); minGraphProps g;\n     v \\<in> \\<V> g;\n     |faceListAt g| \\<le> |faceListAt g'| \\<and>\n     (\\<forall>v<|faceListAt g|.\n         |faceListAt g ! v| \\<le> |faceListAt g' ! v|);\n     \\<V> g \\<subseteq> \\<V> g'; |faceListAt g| = countVertices g\\<rbrakk>\n    \\<Longrightarrow> |faceListAt g ! v| \\<le> |faceListAt g' ! v|", "apply(simp add:vertices_graph)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsection\\<open>Increasing @{const except}\\<close>"], ["", "lemma next_plane0_incr_except:\nassumes \"g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g)\" \"inv g\" \"v \\<in> \\<V> g\"\nshows \"except g v \\<le> except g' v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. except g v \\<le> except g' v", "proof (unfold except_def)"], ["proof (state)\ngoal (1 subgoal):\n 1. |filter (\\<lambda>f. final f \\<and> 5 \\<le> |vertices f|) (facesAt g v)|\n    \\<le> |filter (\\<lambda>f. final f \\<and> 5 \\<le> |vertices f|)\n            (facesAt g' v)|", "note inv' = invariantE[OF inv_inv_next_plane0, OF assms(1,2)]"], ["proof (state)\nthis:\n  Invariants.inv g'\n\ngoal (1 subgoal):\n 1. |filter (\\<lambda>f. final f \\<and> 5 \\<le> |vertices f|) (facesAt g v)|\n    \\<le> |filter (\\<lambda>f. final f \\<and> 5 \\<le> |vertices f|)\n            (facesAt g' v)|", "note mgp = inv_mgp[OF assms(2)] and mgp' = inv_mgp[OF inv']"], ["proof (state)\nthis:\n  minGraphProps g\n  minGraphProps g'\n\ngoal (1 subgoal):\n 1. |filter (\\<lambda>f. final f \\<and> 5 \\<le> |vertices f|) (facesAt g v)|\n    \\<le> |filter (\\<lambda>f. final f \\<and> 5 \\<le> |vertices f|)\n            (facesAt g' v)|", "note dist = distinct_filter[OF mgp_dist_facesAt[OF mgp \\<open>v : \\<V> g\\<close>]]"], ["proof (state)\nthis:\n  distinct (filter ?P (facesAt g v))\n\ngoal (1 subgoal):\n 1. |filter (\\<lambda>f. final f \\<and> 5 \\<le> |vertices f|) (facesAt g v)|\n    \\<le> |filter (\\<lambda>f. final f \\<and> 5 \\<le> |vertices f|)\n            (facesAt g' v)|", "have \"v \\<in> \\<V> g'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<in> \\<V> g'", "using assms(3) next_plane0_vertices_subset[OF assms(1) mgp]"], ["proof (prove)\nusing this:\n  v \\<in> \\<V> g\n  \\<V> g \\<subseteq> \\<V> g'\n\ngoal (1 subgoal):\n 1. v \\<in> \\<V> g'", "by blast"], ["proof (state)\nthis:\n  v \\<in> \\<V> g'\n\ngoal (1 subgoal):\n 1. |filter (\\<lambda>f. final f \\<and> 5 \\<le> |vertices f|) (facesAt g v)|\n    \\<le> |filter (\\<lambda>f. final f \\<and> 5 \\<le> |vertices f|)\n            (facesAt g' v)|", "note dist' = distinct_filter[OF mgp_dist_facesAt[OF mgp' \\<open>v : \\<V> g'\\<close>]]"], ["proof (state)\nthis:\n  distinct (filter ?P (facesAt g' v))\n\ngoal (1 subgoal):\n 1. |filter (\\<lambda>f. final f \\<and> 5 \\<le> |vertices f|) (facesAt g v)|\n    \\<le> |filter (\\<lambda>f. final f \\<and> 5 \\<le> |vertices f|)\n            (facesAt g' v)|", "have \"|[f\\<leftarrow>facesAt g v . final f \\<and> 5 \\<le> |vertices f| ]| =\n        card{f\\<in> set(facesAt g v) . final f \\<and> 5 \\<le> |vertices f|}\"\n    (is \"?L = card ?M\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. |filter (\\<lambda>f. final f \\<and> 5 \\<le> |vertices f|)\n      (facesAt g v)| =\n    card {f \\<in> set (facesAt g v). final f \\<and> 5 \\<le> |vertices f|}", "using distinct_card[OF dist]"], ["proof (prove)\nusing this:\n  card (set (filter ?P1 (facesAt g v))) = |filter ?P1 (facesAt g v)|\n\ngoal (1 subgoal):\n 1. |filter (\\<lambda>f. final f \\<and> 5 \\<le> |vertices f|)\n      (facesAt g v)| =\n    card {f \\<in> set (facesAt g v). final f \\<and> 5 \\<le> |vertices f|}", "by simp"], ["proof (state)\nthis:\n  |filter (\\<lambda>f. final f \\<and> 5 \\<le> |vertices f|) (facesAt g v)| =\n  card {f \\<in> set (facesAt g v). final f \\<and> 5 \\<le> |vertices f|}\n\ngoal (1 subgoal):\n 1. |filter (\\<lambda>f. final f \\<and> 5 \\<le> |vertices f|) (facesAt g v)|\n    \\<le> |filter (\\<lambda>f. final f \\<and> 5 \\<le> |vertices f|)\n            (facesAt g' v)|", "also"], ["proof (state)\nthis:\n  |filter (\\<lambda>f. final f \\<and> 5 \\<le> |vertices f|) (facesAt g v)| =\n  card {f \\<in> set (facesAt g v). final f \\<and> 5 \\<le> |vertices f|}\n\ngoal (1 subgoal):\n 1. |filter (\\<lambda>f. final f \\<and> 5 \\<le> |vertices f|) (facesAt g v)|\n    \\<le> |filter (\\<lambda>f. final f \\<and> 5 \\<le> |vertices f|)\n            (facesAt g' v)|", "have \"?M = {f\\<in> \\<F> g. v \\<in> \\<V> f \\<and> final f \\<and> 5 \\<le> |vertices f|}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {f \\<in> set (facesAt g v). final f \\<and> 5 \\<le> |vertices f|} =\n    {f \\<in> \\<F> g.\n     v \\<in> \\<V> f \\<and> final f \\<and> 5 \\<le> |vertices f|}", "by(simp add: minGraphProps_facesAt_eq[OF mgp assms(3)])"], ["proof (state)\nthis:\n  {f \\<in> set (facesAt g v). final f \\<and> 5 \\<le> |vertices f|} =\n  {f \\<in> \\<F> g.\n   v \\<in> \\<V> f \\<and> final f \\<and> 5 \\<le> |vertices f|}\n\ngoal (1 subgoal):\n 1. |filter (\\<lambda>f. final f \\<and> 5 \\<le> |vertices f|) (facesAt g v)|\n    \\<le> |filter (\\<lambda>f. final f \\<and> 5 \\<le> |vertices f|)\n            (facesAt g' v)|", "also"], ["proof (state)\nthis:\n  {f \\<in> set (facesAt g v). final f \\<and> 5 \\<le> |vertices f|} =\n  {f \\<in> \\<F> g.\n   v \\<in> \\<V> f \\<and> final f \\<and> 5 \\<le> |vertices f|}\n\ngoal (1 subgoal):\n 1. |filter (\\<lambda>f. final f \\<and> 5 \\<le> |vertices f|) (facesAt g v)|\n    \\<le> |filter (\\<lambda>f. final f \\<and> 5 \\<le> |vertices f|)\n            (facesAt g' v)|", "have \"\\<dots> = {f \\<in> set(finals g) . v \\<in> \\<V> f \\<and> 5 \\<le> |vertices f|}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {f \\<in> \\<F> g.\n     v \\<in> \\<V> f \\<and> final f \\<and> 5 \\<le> |vertices f|} =\n    {f \\<in> set (finals g). v \\<in> \\<V> f \\<and> 5 \\<le> |vertices f|}", "by(auto simp:finals_def)"], ["proof (state)\nthis:\n  {f \\<in> \\<F> g.\n   v \\<in> \\<V> f \\<and> final f \\<and> 5 \\<le> |vertices f|} =\n  {f \\<in> set (finals g). v \\<in> \\<V> f \\<and> 5 \\<le> |vertices f|}\n\ngoal (1 subgoal):\n 1. |filter (\\<lambda>f. final f \\<and> 5 \\<le> |vertices f|) (facesAt g v)|\n    \\<le> |filter (\\<lambda>f. final f \\<and> 5 \\<le> |vertices f|)\n            (facesAt g' v)|", "also"], ["proof (state)\nthis:\n  {f \\<in> \\<F> g.\n   v \\<in> \\<V> f \\<and> final f \\<and> 5 \\<le> |vertices f|} =\n  {f \\<in> set (finals g). v \\<in> \\<V> f \\<and> 5 \\<le> |vertices f|}\n\ngoal (1 subgoal):\n 1. |filter (\\<lambda>f. final f \\<and> 5 \\<le> |vertices f|) (facesAt g v)|\n    \\<le> |filter (\\<lambda>f. final f \\<and> 5 \\<le> |vertices f|)\n            (facesAt g' v)|", "have \"card \\<dots> \\<le> card{f \\<in> set(finals g'). v \\<in> \\<V> f \\<and> 5 \\<le> |vertices f|}\"\n    (is \"_ \\<le> card ?M\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. card\n     {f \\<in> set (finals g). v \\<in> \\<V> f \\<and> 5 \\<le> |vertices f|}\n    \\<le> card\n           {f \\<in> set (finals g').\n            v \\<in> \\<V> f \\<and> 5 \\<le> |vertices f|}", "apply(rule card_mono)"], ["proof (prove)\ngoal (2 subgoals):\n 1. finite\n     {f \\<in> set (finals g'). v \\<in> \\<V> f \\<and> 5 \\<le> |vertices f|}\n 2. {f \\<in> set (finals g). v \\<in> \\<V> f \\<and> 5 \\<le> |vertices f|}\n    \\<subseteq> {f \\<in> set (finals g').\n                 v \\<in> \\<V> f \\<and> 5 \\<le> |vertices f|}", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. {f \\<in> set (finals g). v \\<in> \\<V> f \\<and> 5 \\<le> |vertices f|}\n    \\<subseteq> {f \\<in> set (finals g').\n                 v \\<in> \\<V> f \\<and> 5 \\<le> |vertices f|}", "using next_plane0_finals_subset[OF assms(1)]"], ["proof (prove)\nusing this:\n  set (finals g) \\<subseteq> set (finals g')\n\ngoal (1 subgoal):\n 1. {f \\<in> set (finals g). v \\<in> \\<V> f \\<and> 5 \\<le> |vertices f|}\n    \\<subseteq> {f \\<in> set (finals g').\n                 v \\<in> \\<V> f \\<and> 5 \\<le> |vertices f|}", "by blast"], ["proof (state)\nthis:\n  card {f \\<in> set (finals g). v \\<in> \\<V> f \\<and> 5 \\<le> |vertices f|}\n  \\<le> card\n         {f \\<in> set (finals g').\n          v \\<in> \\<V> f \\<and> 5 \\<le> |vertices f|}\n\ngoal (1 subgoal):\n 1. |filter (\\<lambda>f. final f \\<and> 5 \\<le> |vertices f|) (facesAt g v)|\n    \\<le> |filter (\\<lambda>f. final f \\<and> 5 \\<le> |vertices f|)\n            (facesAt g' v)|", "also"], ["proof (state)\nthis:\n  card {f \\<in> set (finals g). v \\<in> \\<V> f \\<and> 5 \\<le> |vertices f|}\n  \\<le> card\n         {f \\<in> set (finals g').\n          v \\<in> \\<V> f \\<and> 5 \\<le> |vertices f|}\n\ngoal (1 subgoal):\n 1. |filter (\\<lambda>f. final f \\<and> 5 \\<le> |vertices f|) (facesAt g v)|\n    \\<le> |filter (\\<lambda>f. final f \\<and> 5 \\<le> |vertices f|)\n            (facesAt g' v)|", "have \"?M = {f\\<in> \\<F> g' . v \\<in> \\<V> f \\<and> final f \\<and> 5 \\<le> |vertices f|}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {f \\<in> set (finals g'). v \\<in> \\<V> f \\<and> 5 \\<le> |vertices f|} =\n    {f \\<in> \\<F> g'.\n     v \\<in> \\<V> f \\<and> final f \\<and> 5 \\<le> |vertices f|}", "by(auto simp:finals_def)"], ["proof (state)\nthis:\n  {f \\<in> set (finals g'). v \\<in> \\<V> f \\<and> 5 \\<le> |vertices f|} =\n  {f \\<in> \\<F> g'.\n   v \\<in> \\<V> f \\<and> final f \\<and> 5 \\<le> |vertices f|}\n\ngoal (1 subgoal):\n 1. |filter (\\<lambda>f. final f \\<and> 5 \\<le> |vertices f|) (facesAt g v)|\n    \\<le> |filter (\\<lambda>f. final f \\<and> 5 \\<le> |vertices f|)\n            (facesAt g' v)|", "also"], ["proof (state)\nthis:\n  {f \\<in> set (finals g'). v \\<in> \\<V> f \\<and> 5 \\<le> |vertices f|} =\n  {f \\<in> \\<F> g'.\n   v \\<in> \\<V> f \\<and> final f \\<and> 5 \\<le> |vertices f|}\n\ngoal (1 subgoal):\n 1. |filter (\\<lambda>f. final f \\<and> 5 \\<le> |vertices f|) (facesAt g v)|\n    \\<le> |filter (\\<lambda>f. final f \\<and> 5 \\<le> |vertices f|)\n            (facesAt g' v)|", "have \"\\<dots> = {f \\<in> set(facesAt g' v) . final f \\<and> 5 \\<le> |vertices f|}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {f \\<in> \\<F> g'.\n     v \\<in> \\<V> f \\<and> final f \\<and> 5 \\<le> |vertices f|} =\n    {f \\<in> set (facesAt g' v). final f \\<and> 5 \\<le> |vertices f|}", "by(simp add: minGraphProps_facesAt_eq[OF mgp' \\<open>v \\<in> \\<V> g'\\<close>])"], ["proof (state)\nthis:\n  {f \\<in> \\<F> g'.\n   v \\<in> \\<V> f \\<and> final f \\<and> 5 \\<le> |vertices f|} =\n  {f \\<in> set (facesAt g' v). final f \\<and> 5 \\<le> |vertices f|}\n\ngoal (1 subgoal):\n 1. |filter (\\<lambda>f. final f \\<and> 5 \\<le> |vertices f|) (facesAt g v)|\n    \\<le> |filter (\\<lambda>f. final f \\<and> 5 \\<le> |vertices f|)\n            (facesAt g' v)|", "also"], ["proof (state)\nthis:\n  {f \\<in> \\<F> g'.\n   v \\<in> \\<V> f \\<and> final f \\<and> 5 \\<le> |vertices f|} =\n  {f \\<in> set (facesAt g' v). final f \\<and> 5 \\<le> |vertices f|}\n\ngoal (1 subgoal):\n 1. |filter (\\<lambda>f. final f \\<and> 5 \\<le> |vertices f|) (facesAt g v)|\n    \\<le> |filter (\\<lambda>f. final f \\<and> 5 \\<le> |vertices f|)\n            (facesAt g' v)|", "have \"card \\<dots> =\n    |[f \\<leftarrow> facesAt g' v . final f \\<and> 5 \\<le> |vertices f| ]|\" (is \"_ = ?R\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. card {f \\<in> set (facesAt g' v). final f \\<and> 5 \\<le> |vertices f|} =\n    |filter (\\<lambda>f. final f \\<and> 5 \\<le> |vertices f|)\n      (facesAt g' v)|", "using distinct_card[OF dist']"], ["proof (prove)\nusing this:\n  card (set (filter ?P1 (facesAt g' v))) = |filter ?P1 (facesAt g' v)|\n\ngoal (1 subgoal):\n 1. card {f \\<in> set (facesAt g' v). final f \\<and> 5 \\<le> |vertices f|} =\n    |filter (\\<lambda>f. final f \\<and> 5 \\<le> |vertices f|)\n      (facesAt g' v)|", "by simp"], ["proof (state)\nthis:\n  card {f \\<in> set (facesAt g' v). final f \\<and> 5 \\<le> |vertices f|} =\n  |filter (\\<lambda>f. final f \\<and> 5 \\<le> |vertices f|) (facesAt g' v)|\n\ngoal (1 subgoal):\n 1. |filter (\\<lambda>f. final f \\<and> 5 \\<le> |vertices f|) (facesAt g v)|\n    \\<le> |filter (\\<lambda>f. final f \\<and> 5 \\<le> |vertices f|)\n            (facesAt g' v)|", "finally"], ["proof (chain)\npicking this:\n  |filter (\\<lambda>f. final f \\<and> 5 \\<le> |vertices f|) (facesAt g v)|\n  \\<le> |filter (\\<lambda>f. final f \\<and> 5 \\<le> |vertices f|)\n          (facesAt g' v)|", "show \"?L \\<le> ?R\""], ["proof (prove)\nusing this:\n  |filter (\\<lambda>f. final f \\<and> 5 \\<le> |vertices f|) (facesAt g v)|\n  \\<le> |filter (\\<lambda>f. final f \\<and> 5 \\<le> |vertices f|)\n          (facesAt g' v)|\n\ngoal (1 subgoal):\n 1. |filter (\\<lambda>f. final f \\<and> 5 \\<le> |vertices f|) (facesAt g v)|\n    \\<le> |filter (\\<lambda>f. final f \\<and> 5 \\<le> |vertices f|)\n            (facesAt g' v)|", "."], ["proof (state)\nthis:\n  |filter (\\<lambda>f. final f \\<and> 5 \\<le> |vertices f|) (facesAt g v)|\n  \\<le> |filter (\\<lambda>f. final f \\<and> 5 \\<le> |vertices f|)\n          (facesAt g' v)|\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection\\<open>Increasing edges\\<close>"], ["", "lemma next_plane0_set_edges_subset:\n  \"\\<lbrakk> minGraphProps g;  g [next_plane0\\<^bsub>p\\<^esub>]\\<rightarrow> g' \\<rbrakk> \\<Longrightarrow> edges g \\<subseteq> edges g'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>minGraphProps g;\n     g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g)\\<rbrakk>\n    \\<Longrightarrow> \\<E> g \\<subseteq> \\<E> g'", "apply(rule next_plane0_incr)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>minGraphProps g;\n        g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g); ?Q x y;\n        \\<E> y \\<subseteq> \\<E> z\\<rbrakk>\n       \\<Longrightarrow> \\<E> x \\<subseteq> \\<E> z\n 2. \\<And>f ga.\n       \\<lbrakk>minGraphProps g;\n        g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g); f \\<in> \\<F> ga;\n        \\<not> final f\\<rbrakk>\n       \\<Longrightarrow> \\<E> ga \\<subseteq> \\<E> (makeFaceFinal f ga)\n 3. \\<And>ga u v f vs.\n       \\<lbrakk>minGraphProps g;\n        g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g);\n        pre_splitFace ga u v f vs\\<rbrakk>\n       \\<Longrightarrow> ?Q ga (snd (snd (splitFace ga u v f vs)))\n 4. \\<lbrakk>minGraphProps g;\n     g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g)\\<rbrakk>\n    \\<Longrightarrow> minGraphProps g\n 5. \\<lbrakk>minGraphProps g;\n     g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g)\\<rbrakk>\n    \\<Longrightarrow> g' \\<in> set (next_plane0\\<^bsub>?p\\<^esub> g)", "apply(erule (1) subset_trans)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>f ga.\n       \\<lbrakk>minGraphProps g;\n        g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g); f \\<in> \\<F> ga;\n        \\<not> final f\\<rbrakk>\n       \\<Longrightarrow> \\<E> ga \\<subseteq> \\<E> (makeFaceFinal f ga)\n 2. \\<And>ga u v f vs.\n       \\<lbrakk>minGraphProps g;\n        g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g);\n        pre_splitFace ga u v f vs\\<rbrakk>\n       \\<Longrightarrow> \\<E> ga\n                         \\<subseteq> \\<E>\n(snd (snd (splitFace ga u v f vs)))\n 3. \\<lbrakk>minGraphProps g;\n     g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g)\\<rbrakk>\n    \\<Longrightarrow> minGraphProps g\n 4. \\<lbrakk>minGraphProps g;\n     g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g)\\<rbrakk>\n    \\<Longrightarrow> g' \\<in> set (next_plane0\\<^bsub>?p\\<^esub> g)", "apply(simp add: edges_makeFaceFinal)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>ga u v f vs.\n       \\<lbrakk>minGraphProps g;\n        g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g);\n        pre_splitFace ga u v f vs\\<rbrakk>\n       \\<Longrightarrow> \\<E> ga\n                         \\<subseteq> \\<E>\n(snd (snd (splitFace ga u v f vs)))\n 2. \\<lbrakk>minGraphProps g;\n     g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g)\\<rbrakk>\n    \\<Longrightarrow> minGraphProps g\n 3. \\<lbrakk>minGraphProps g;\n     g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g)\\<rbrakk>\n    \\<Longrightarrow> g' \\<in> set (next_plane0\\<^bsub>?p\\<^esub> g)", "apply(erule snd_snd_splitFace_edges_incr)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>minGraphProps g;\n     g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g)\\<rbrakk>\n    \\<Longrightarrow> minGraphProps g\n 2. \\<lbrakk>minGraphProps g;\n     g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g)\\<rbrakk>\n    \\<Longrightarrow> g' \\<in> set (next_plane0\\<^bsub>?p\\<^esub> g)", "apply assumption+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsection\\<open>Increasing final vertices\\<close>"], ["", "(*\nThis should really be proved via the (unproven) invariant\nv : f \\<Longrightarrow> ((g,v).f).(f.v) = v\n*)"], ["", "declare  atLeastLessThan_iff[iff]"], ["", "lemma next_plane0_incr_finV:\n \"\\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g); minGraphProps g \\<rbrakk>\n  \\<Longrightarrow> \\<forall>v \\<in> \\<V> g. v \\<in> \\<V> g' \\<and>\n        ((\\<forall>f\\<in>\\<F> g. v \\<in> \\<V> f \\<longrightarrow> final f) \\<longrightarrow>\n         (\\<forall>f\\<in>\\<F> g'. v \\<in> \\<V> f \\<longrightarrow> f \\<in> \\<F> g))\" (is \"_ \\<Longrightarrow> _ \\<Longrightarrow> ?Q g g'\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g);\n     minGraphProps g\\<rbrakk>\n    \\<Longrightarrow> \\<forall>v\\<in>\\<V> g.\n                         v \\<in> \\<V> g' \\<and>\n                         ((\\<forall>f\\<in>\\<F> g.\n                              v \\<in> \\<V> f \\<longrightarrow>\n                              final f) \\<longrightarrow>\n                          (\\<forall>f\\<in>\\<F> g'.\n                              v \\<in> \\<V> f \\<longrightarrow>\n                              f \\<in> \\<F> g))", "apply(rule next_plane0_incr[where Q = ?Q and g=g and g'=g'])"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g);\n        minGraphProps g;\n        \\<forall>v\\<in>\\<V> x.\n           v \\<in> \\<V> y \\<and>\n           ((\\<forall>f\\<in>\\<F> x.\n                v \\<in> \\<V> f \\<longrightarrow> final f) \\<longrightarrow>\n            (\\<forall>f\\<in>\\<F> y.\n                v \\<in> \\<V> f \\<longrightarrow> f \\<in> \\<F> x));\n        \\<forall>v\\<in>\\<V> y.\n           v \\<in> \\<V> z \\<and>\n           ((\\<forall>f\\<in>\\<F> y.\n                v \\<in> \\<V> f \\<longrightarrow> final f) \\<longrightarrow>\n            (\\<forall>f\\<in>\\<F> z.\n                v \\<in> \\<V> f \\<longrightarrow> f \\<in> \\<F> y))\\<rbrakk>\n       \\<Longrightarrow> \\<forall>v\\<in>\\<V> x.\n                            v \\<in> \\<V> z \\<and>\n                            ((\\<forall>f\\<in>\\<F> x.\n                                 v \\<in> \\<V> f \\<longrightarrow>\n                                 final f) \\<longrightarrow>\n                             (\\<forall>f\\<in>\\<F> z.\n                                 v \\<in> \\<V> f \\<longrightarrow>\n                                 f \\<in> \\<F> x))\n 2. \\<And>f ga.\n       \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g);\n        minGraphProps g; f \\<in> \\<F> ga; \\<not> final f\\<rbrakk>\n       \\<Longrightarrow> \\<forall>v\\<in>\\<V> ga.\n                            v \\<in> \\<V> (makeFaceFinal f ga) \\<and>\n                            ((\\<forall>f\\<in>\\<F> ga.\n                                 v \\<in> \\<V> f \\<longrightarrow>\n                                 final f) \\<longrightarrow>\n                             (\\<forall>f\\<in>\\<F> (makeFaceFinal f ga).\n                                 v \\<in> \\<V> f \\<longrightarrow>\n                                 f \\<in> \\<F> ga))\n 3. \\<And>ga u v f vs.\n       \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g);\n        minGraphProps g; pre_splitFace ga u v f vs\\<rbrakk>\n       \\<Longrightarrow> \\<forall>va\\<in>\\<V> ga.\n                            va \\<in> \\<V>\n(snd (snd (splitFace ga u v f vs))) \\<and>\n                            ((\\<forall>f\\<in>\\<F> ga.\n                                 va \\<in> \\<V> f \\<longrightarrow>\n                                 final f) \\<longrightarrow>\n                             (\\<forall>f\n \\<in>\\<F> (snd (snd (splitFace ga u v f vs))).\n                                 va \\<in> \\<V> f \\<longrightarrow>\n                                 f \\<in> \\<F> ga))\n 4. \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g);\n     minGraphProps g\\<rbrakk>\n    \\<Longrightarrow> minGraphProps g\n 5. \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g);\n     minGraphProps g\\<rbrakk>\n    \\<Longrightarrow> g' \\<in> set (next_plane0\\<^bsub>?p\\<^esub> g)", "prefer 4"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g);\n     minGraphProps g\\<rbrakk>\n    \\<Longrightarrow> minGraphProps g\n 2. \\<And>x y z.\n       \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g);\n        minGraphProps g;\n        \\<forall>v\\<in>\\<V> x.\n           v \\<in> \\<V> y \\<and>\n           ((\\<forall>f\\<in>\\<F> x.\n                v \\<in> \\<V> f \\<longrightarrow> final f) \\<longrightarrow>\n            (\\<forall>f\\<in>\\<F> y.\n                v \\<in> \\<V> f \\<longrightarrow> f \\<in> \\<F> x));\n        \\<forall>v\\<in>\\<V> y.\n           v \\<in> \\<V> z \\<and>\n           ((\\<forall>f\\<in>\\<F> y.\n                v \\<in> \\<V> f \\<longrightarrow> final f) \\<longrightarrow>\n            (\\<forall>f\\<in>\\<F> z.\n                v \\<in> \\<V> f \\<longrightarrow> f \\<in> \\<F> y))\\<rbrakk>\n       \\<Longrightarrow> \\<forall>v\\<in>\\<V> x.\n                            v \\<in> \\<V> z \\<and>\n                            ((\\<forall>f\\<in>\\<F> x.\n                                 v \\<in> \\<V> f \\<longrightarrow>\n                                 final f) \\<longrightarrow>\n                             (\\<forall>f\\<in>\\<F> z.\n                                 v \\<in> \\<V> f \\<longrightarrow>\n                                 f \\<in> \\<F> x))\n 3. \\<And>f ga.\n       \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g);\n        minGraphProps g; f \\<in> \\<F> ga; \\<not> final f\\<rbrakk>\n       \\<Longrightarrow> \\<forall>v\\<in>\\<V> ga.\n                            v \\<in> \\<V> (makeFaceFinal f ga) \\<and>\n                            ((\\<forall>f\\<in>\\<F> ga.\n                                 v \\<in> \\<V> f \\<longrightarrow>\n                                 final f) \\<longrightarrow>\n                             (\\<forall>f\\<in>\\<F> (makeFaceFinal f ga).\n                                 v \\<in> \\<V> f \\<longrightarrow>\n                                 f \\<in> \\<F> ga))\n 4. \\<And>ga u v f vs.\n       \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g);\n        minGraphProps g; pre_splitFace ga u v f vs\\<rbrakk>\n       \\<Longrightarrow> \\<forall>va\\<in>\\<V> ga.\n                            va \\<in> \\<V>\n(snd (snd (splitFace ga u v f vs))) \\<and>\n                            ((\\<forall>f\\<in>\\<F> ga.\n                                 va \\<in> \\<V> f \\<longrightarrow>\n                                 final f) \\<longrightarrow>\n                             (\\<forall>f\n \\<in>\\<F> (snd (snd (splitFace ga u v f vs))).\n                                 va \\<in> \\<V> f \\<longrightarrow>\n                                 f \\<in> \\<F> ga))\n 5. \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g);\n     minGraphProps g\\<rbrakk>\n    \\<Longrightarrow> g' \\<in> set (next_plane0\\<^bsub>?p\\<^esub> g)", "apply assumption"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g);\n        minGraphProps g;\n        \\<forall>v\\<in>\\<V> x.\n           v \\<in> \\<V> y \\<and>\n           ((\\<forall>f\\<in>\\<F> x.\n                v \\<in> \\<V> f \\<longrightarrow> final f) \\<longrightarrow>\n            (\\<forall>f\\<in>\\<F> y.\n                v \\<in> \\<V> f \\<longrightarrow> f \\<in> \\<F> x));\n        \\<forall>v\\<in>\\<V> y.\n           v \\<in> \\<V> z \\<and>\n           ((\\<forall>f\\<in>\\<F> y.\n                v \\<in> \\<V> f \\<longrightarrow> final f) \\<longrightarrow>\n            (\\<forall>f\\<in>\\<F> z.\n                v \\<in> \\<V> f \\<longrightarrow> f \\<in> \\<F> y))\\<rbrakk>\n       \\<Longrightarrow> \\<forall>v\\<in>\\<V> x.\n                            v \\<in> \\<V> z \\<and>\n                            ((\\<forall>f\\<in>\\<F> x.\n                                 v \\<in> \\<V> f \\<longrightarrow>\n                                 final f) \\<longrightarrow>\n                             (\\<forall>f\\<in>\\<F> z.\n                                 v \\<in> \\<V> f \\<longrightarrow>\n                                 f \\<in> \\<F> x))\n 2. \\<And>f ga.\n       \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g);\n        minGraphProps g; f \\<in> \\<F> ga; \\<not> final f\\<rbrakk>\n       \\<Longrightarrow> \\<forall>v\\<in>\\<V> ga.\n                            v \\<in> \\<V> (makeFaceFinal f ga) \\<and>\n                            ((\\<forall>f\\<in>\\<F> ga.\n                                 v \\<in> \\<V> f \\<longrightarrow>\n                                 final f) \\<longrightarrow>\n                             (\\<forall>f\\<in>\\<F> (makeFaceFinal f ga).\n                                 v \\<in> \\<V> f \\<longrightarrow>\n                                 f \\<in> \\<F> ga))\n 3. \\<And>ga u v f vs.\n       \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g);\n        minGraphProps g; pre_splitFace ga u v f vs\\<rbrakk>\n       \\<Longrightarrow> \\<forall>va\\<in>\\<V> ga.\n                            va \\<in> \\<V>\n(snd (snd (splitFace ga u v f vs))) \\<and>\n                            ((\\<forall>f\\<in>\\<F> ga.\n                                 va \\<in> \\<V> f \\<longrightarrow>\n                                 final f) \\<longrightarrow>\n                             (\\<forall>f\n \\<in>\\<F> (snd (snd (splitFace ga u v f vs))).\n                                 va \\<in> \\<V> f \\<longrightarrow>\n                                 f \\<in> \\<F> ga))\n 4. \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g);\n     minGraphProps g\\<rbrakk>\n    \\<Longrightarrow> g' \\<in> set (next_plane0\\<^bsub>?p\\<^esub> g)", "prefer 4"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g);\n     minGraphProps g\\<rbrakk>\n    \\<Longrightarrow> g' \\<in> set (next_plane0\\<^bsub>?p\\<^esub> g)\n 2. \\<And>x y z.\n       \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g);\n        minGraphProps g;\n        \\<forall>v\\<in>\\<V> x.\n           v \\<in> \\<V> y \\<and>\n           ((\\<forall>f\\<in>\\<F> x.\n                v \\<in> \\<V> f \\<longrightarrow> final f) \\<longrightarrow>\n            (\\<forall>f\\<in>\\<F> y.\n                v \\<in> \\<V> f \\<longrightarrow> f \\<in> \\<F> x));\n        \\<forall>v\\<in>\\<V> y.\n           v \\<in> \\<V> z \\<and>\n           ((\\<forall>f\\<in>\\<F> y.\n                v \\<in> \\<V> f \\<longrightarrow> final f) \\<longrightarrow>\n            (\\<forall>f\\<in>\\<F> z.\n                v \\<in> \\<V> f \\<longrightarrow> f \\<in> \\<F> y))\\<rbrakk>\n       \\<Longrightarrow> \\<forall>v\\<in>\\<V> x.\n                            v \\<in> \\<V> z \\<and>\n                            ((\\<forall>f\\<in>\\<F> x.\n                                 v \\<in> \\<V> f \\<longrightarrow>\n                                 final f) \\<longrightarrow>\n                             (\\<forall>f\\<in>\\<F> z.\n                                 v \\<in> \\<V> f \\<longrightarrow>\n                                 f \\<in> \\<F> x))\n 3. \\<And>f ga.\n       \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g);\n        minGraphProps g; f \\<in> \\<F> ga; \\<not> final f\\<rbrakk>\n       \\<Longrightarrow> \\<forall>v\\<in>\\<V> ga.\n                            v \\<in> \\<V> (makeFaceFinal f ga) \\<and>\n                            ((\\<forall>f\\<in>\\<F> ga.\n                                 v \\<in> \\<V> f \\<longrightarrow>\n                                 final f) \\<longrightarrow>\n                             (\\<forall>f\\<in>\\<F> (makeFaceFinal f ga).\n                                 v \\<in> \\<V> f \\<longrightarrow>\n                                 f \\<in> \\<F> ga))\n 4. \\<And>ga u v f vs.\n       \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g);\n        minGraphProps g; pre_splitFace ga u v f vs\\<rbrakk>\n       \\<Longrightarrow> \\<forall>va\\<in>\\<V> ga.\n                            va \\<in> \\<V>\n(snd (snd (splitFace ga u v f vs))) \\<and>\n                            ((\\<forall>f\\<in>\\<F> ga.\n                                 va \\<in> \\<V> f \\<longrightarrow>\n                                 final f) \\<longrightarrow>\n                             (\\<forall>f\n \\<in>\\<F> (snd (snd (splitFace ga u v f vs))).\n                                 va \\<in> \\<V> f \\<longrightarrow>\n                                 f \\<in> \\<F> ga))", "apply assumption"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g);\n        minGraphProps g;\n        \\<forall>v\\<in>\\<V> x.\n           v \\<in> \\<V> y \\<and>\n           ((\\<forall>f\\<in>\\<F> x.\n                v \\<in> \\<V> f \\<longrightarrow> final f) \\<longrightarrow>\n            (\\<forall>f\\<in>\\<F> y.\n                v \\<in> \\<V> f \\<longrightarrow> f \\<in> \\<F> x));\n        \\<forall>v\\<in>\\<V> y.\n           v \\<in> \\<V> z \\<and>\n           ((\\<forall>f\\<in>\\<F> y.\n                v \\<in> \\<V> f \\<longrightarrow> final f) \\<longrightarrow>\n            (\\<forall>f\\<in>\\<F> z.\n                v \\<in> \\<V> f \\<longrightarrow> f \\<in> \\<F> y))\\<rbrakk>\n       \\<Longrightarrow> \\<forall>v\\<in>\\<V> x.\n                            v \\<in> \\<V> z \\<and>\n                            ((\\<forall>f\\<in>\\<F> x.\n                                 v \\<in> \\<V> f \\<longrightarrow>\n                                 final f) \\<longrightarrow>\n                             (\\<forall>f\\<in>\\<F> z.\n                                 v \\<in> \\<V> f \\<longrightarrow>\n                                 f \\<in> \\<F> x))\n 2. \\<And>f ga.\n       \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g);\n        minGraphProps g; f \\<in> \\<F> ga; \\<not> final f\\<rbrakk>\n       \\<Longrightarrow> \\<forall>v\\<in>\\<V> ga.\n                            v \\<in> \\<V> (makeFaceFinal f ga) \\<and>\n                            ((\\<forall>f\\<in>\\<F> ga.\n                                 v \\<in> \\<V> f \\<longrightarrow>\n                                 final f) \\<longrightarrow>\n                             (\\<forall>f\\<in>\\<F> (makeFaceFinal f ga).\n                                 v \\<in> \\<V> f \\<longrightarrow>\n                                 f \\<in> \\<F> ga))\n 3. \\<And>ga u v f vs.\n       \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g);\n        minGraphProps g; pre_splitFace ga u v f vs\\<rbrakk>\n       \\<Longrightarrow> \\<forall>va\\<in>\\<V> ga.\n                            va \\<in> \\<V>\n(snd (snd (splitFace ga u v f vs))) \\<and>\n                            ((\\<forall>f\\<in>\\<F> ga.\n                                 va \\<in> \\<V> f \\<longrightarrow>\n                                 final f) \\<longrightarrow>\n                             (\\<forall>f\n \\<in>\\<F> (snd (snd (splitFace ga u v f vs))).\n                                 va \\<in> \\<V> f \\<longrightarrow>\n                                 f \\<in> \\<F> ga))", "apply fast"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>f ga.\n       \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g);\n        minGraphProps g; f \\<in> \\<F> ga; \\<not> final f\\<rbrakk>\n       \\<Longrightarrow> \\<forall>v\\<in>\\<V> ga.\n                            v \\<in> \\<V> (makeFaceFinal f ga) \\<and>\n                            ((\\<forall>f\\<in>\\<F> ga.\n                                 v \\<in> \\<V> f \\<longrightarrow>\n                                 final f) \\<longrightarrow>\n                             (\\<forall>f\\<in>\\<F> (makeFaceFinal f ga).\n                                 v \\<in> \\<V> f \\<longrightarrow>\n                                 f \\<in> \\<F> ga))\n 2. \\<And>ga u v f vs.\n       \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g);\n        minGraphProps g; pre_splitFace ga u v f vs\\<rbrakk>\n       \\<Longrightarrow> \\<forall>va\\<in>\\<V> ga.\n                            va \\<in> \\<V>\n(snd (snd (splitFace ga u v f vs))) \\<and>\n                            ((\\<forall>f\\<in>\\<F> ga.\n                                 va \\<in> \\<V> f \\<longrightarrow>\n                                 final f) \\<longrightarrow>\n                             (\\<forall>f\n \\<in>\\<F> (snd (snd (splitFace ga u v f vs))).\n                                 va \\<in> \\<V> f \\<longrightarrow>\n                                 f \\<in> \\<F> ga))", "apply(clarsimp simp:makeFaceFinal_def vertices_graph makeFaceFinalFaceList_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>f ga v fa.\n       \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g);\n        minGraphProps g; f \\<in> \\<F> ga; \\<not> final f;\n        v < countVertices ga;\n        \\<forall>f\\<in>\\<F> ga. v \\<in> \\<V> f \\<longrightarrow> final f;\n        fa \\<in> set (replace f [setFinal f] (faces ga));\n        v \\<in> \\<V> fa\\<rbrakk>\n       \\<Longrightarrow> fa \\<in> \\<F> ga\n 2. \\<And>ga u v f vs.\n       \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g);\n        minGraphProps g; pre_splitFace ga u v f vs\\<rbrakk>\n       \\<Longrightarrow> \\<forall>va\\<in>\\<V> ga.\n                            va \\<in> \\<V>\n(snd (snd (splitFace ga u v f vs))) \\<and>\n                            ((\\<forall>f\\<in>\\<F> ga.\n                                 va \\<in> \\<V> f \\<longrightarrow>\n                                 final f) \\<longrightarrow>\n                             (\\<forall>f\n \\<in>\\<F> (snd (snd (splitFace ga u v f vs))).\n                                 va \\<in> \\<V> f \\<longrightarrow>\n                                 f \\<in> \\<F> ga))", "apply(drule replace5)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>f ga v fa.\n       \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g);\n        minGraphProps g; f \\<in> \\<F> ga; \\<not> final f;\n        v < countVertices ga;\n        \\<forall>f\\<in>\\<F> ga. v \\<in> \\<V> f \\<longrightarrow> final f;\n        v \\<in> \\<V> fa;\n        fa \\<in> \\<F> ga \\<or> fa \\<in> set [setFinal f]\\<rbrakk>\n       \\<Longrightarrow> fa \\<in> \\<F> ga\n 2. \\<And>ga u v f vs.\n       \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g);\n        minGraphProps g; pre_splitFace ga u v f vs\\<rbrakk>\n       \\<Longrightarrow> \\<forall>va\\<in>\\<V> ga.\n                            va \\<in> \\<V>\n(snd (snd (splitFace ga u v f vs))) \\<and>\n                            ((\\<forall>f\\<in>\\<F> ga.\n                                 va \\<in> \\<V> f \\<longrightarrow>\n                                 final f) \\<longrightarrow>\n                             (\\<forall>f\n \\<in>\\<F> (snd (snd (splitFace ga u v f vs))).\n                                 va \\<in> \\<V> f \\<longrightarrow>\n                                 f \\<in> \\<F> ga))", "apply(erule disjE)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>f ga v fa.\n       \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g);\n        minGraphProps g; f \\<in> \\<F> ga; \\<not> final f;\n        v < countVertices ga;\n        \\<forall>f\\<in>\\<F> ga. v \\<in> \\<V> f \\<longrightarrow> final f;\n        v \\<in> \\<V> fa; fa \\<in> \\<F> ga\\<rbrakk>\n       \\<Longrightarrow> fa \\<in> \\<F> ga\n 2. \\<And>f ga v fa.\n       \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g);\n        minGraphProps g; f \\<in> \\<F> ga; \\<not> final f;\n        v < countVertices ga;\n        \\<forall>f\\<in>\\<F> ga. v \\<in> \\<V> f \\<longrightarrow> final f;\n        v \\<in> \\<V> fa; fa \\<in> set [setFinal f]\\<rbrakk>\n       \\<Longrightarrow> fa \\<in> \\<F> ga\n 3. \\<And>ga u v f vs.\n       \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g);\n        minGraphProps g; pre_splitFace ga u v f vs\\<rbrakk>\n       \\<Longrightarrow> \\<forall>va\\<in>\\<V> ga.\n                            va \\<in> \\<V>\n(snd (snd (splitFace ga u v f vs))) \\<and>\n                            ((\\<forall>f\\<in>\\<F> ga.\n                                 va \\<in> \\<V> f \\<longrightarrow>\n                                 final f) \\<longrightarrow>\n                             (\\<forall>f\n \\<in>\\<F> (snd (snd (splitFace ga u v f vs))).\n                                 va \\<in> \\<V> f \\<longrightarrow>\n                                 f \\<in> \\<F> ga))", "apply blast"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>f ga v fa.\n       \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g);\n        minGraphProps g; f \\<in> \\<F> ga; \\<not> final f;\n        v < countVertices ga;\n        \\<forall>f\\<in>\\<F> ga. v \\<in> \\<V> f \\<longrightarrow> final f;\n        v \\<in> \\<V> fa; fa \\<in> set [setFinal f]\\<rbrakk>\n       \\<Longrightarrow> fa \\<in> \\<F> ga\n 2. \\<And>ga u v f vs.\n       \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g);\n        minGraphProps g; pre_splitFace ga u v f vs\\<rbrakk>\n       \\<Longrightarrow> \\<forall>va\\<in>\\<V> ga.\n                            va \\<in> \\<V>\n(snd (snd (splitFace ga u v f vs))) \\<and>\n                            ((\\<forall>f\\<in>\\<F> ga.\n                                 va \\<in> \\<V> f \\<longrightarrow>\n                                 final f) \\<longrightarrow>\n                             (\\<forall>f\n \\<in>\\<F> (snd (snd (splitFace ga u v f vs))).\n                                 va \\<in> \\<V> f \\<longrightarrow>\n                                 f \\<in> \\<F> ga))", "apply(simp add:setFinal_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ga u v f vs.\n       \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g);\n        minGraphProps g; pre_splitFace ga u v f vs\\<rbrakk>\n       \\<Longrightarrow> \\<forall>va\\<in>\\<V> ga.\n                            va \\<in> \\<V>\n(snd (snd (splitFace ga u v f vs))) \\<and>\n                            ((\\<forall>f\\<in>\\<F> ga.\n                                 va \\<in> \\<V> f \\<longrightarrow>\n                                 final f) \\<longrightarrow>\n                             (\\<forall>f\n \\<in>\\<F> (snd (snd (splitFace ga u v f vs))).\n                                 va \\<in> \\<V> f \\<longrightarrow>\n                                 f \\<in> \\<F> ga))", "apply(unfold pre_splitFace_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ga u v f vs.\n       \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g);\n        minGraphProps g;\n        f \\<in> \\<F> ga \\<and>\n        \\<not> final f \\<and>\n        distinct (vertices f) \\<and>\n        distinct vs \\<and>\n        \\<V> ga \\<inter> set vs = {} \\<and>\n        \\<V> f \\<inter> set vs = {} \\<and>\n        u \\<in> \\<V> f \\<and>\n        v \\<in> \\<V> f \\<and>\n        u \\<noteq> v \\<and>\n        ((u, v) \\<notin> \\<E> f \\<and>\n         (v, u) \\<notin> \\<E> f \\<and>\n         (u, v) \\<notin> \\<E> ga \\<and> (v, u) \\<notin> \\<E> ga \\<or>\n         vs \\<noteq> [])\\<rbrakk>\n       \\<Longrightarrow> \\<forall>va\\<in>\\<V> ga.\n                            va \\<in> \\<V>\n(snd (snd (splitFace ga u v f vs))) \\<and>\n                            ((\\<forall>f\\<in>\\<F> ga.\n                                 va \\<in> \\<V> f \\<longrightarrow>\n                                 final f) \\<longrightarrow>\n                             (\\<forall>f\n \\<in>\\<F> (snd (snd (splitFace ga u v f vs))).\n                                 va \\<in> \\<V> f \\<longrightarrow>\n                                 f \\<in> \\<F> ga))", "apply(clarsimp simp:splitFace_def split_def vertices_graph)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ga u v f vs va.\n       \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g);\n        minGraphProps g; f \\<in> \\<F> ga; va < countVertices ga;\n        \\<not> final f; distinct (vertices f); distinct vs;\n        {0..<countVertices ga} \\<inter> set vs = {};\n        \\<V> f \\<inter> set vs = {}; u \\<in> \\<V> f; v \\<in> \\<V> f;\n        u \\<noteq> v;\n        \\<not> is_nextElem (vertices f) u v \\<and>\n        \\<not> is_nextElem (vertices f) v u \\<and>\n        (u, v) \\<notin> \\<E> ga \\<and> (v, u) \\<notin> \\<E> ga \\<or>\n        vs \\<noteq> [];\n        \\<forall>f\\<in>\\<F> ga.\n           va \\<in> \\<V> f \\<longrightarrow> final f\\<rbrakk>\n       \\<Longrightarrow> (va \\<in> \\<V>\n                                    (fst\n(split_face f u v vs)) \\<longrightarrow>\n                          fst (split_face f u v vs) \\<in> \\<F> ga) \\<and>\n                         (\\<forall>f\\<in>set\n    (replace f [snd (split_face f u v vs)] (faces ga)).\n                             va \\<in> \\<V> f \\<longrightarrow>\n                             f \\<in> \\<F> ga)", "apply(rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>ga u v f vs va.\n       \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g);\n        minGraphProps g; f \\<in> \\<F> ga; va < countVertices ga;\n        \\<not> final f; distinct (vertices f); distinct vs;\n        {0..<countVertices ga} \\<inter> set vs = {};\n        \\<V> f \\<inter> set vs = {}; u \\<in> \\<V> f; v \\<in> \\<V> f;\n        u \\<noteq> v;\n        \\<not> is_nextElem (vertices f) u v \\<and>\n        \\<not> is_nextElem (vertices f) v u \\<and>\n        (u, v) \\<notin> \\<E> ga \\<and> (v, u) \\<notin> \\<E> ga \\<or>\n        vs \\<noteq> [];\n        \\<forall>f\\<in>\\<F> ga.\n           va \\<in> \\<V> f \\<longrightarrow> final f\\<rbrakk>\n       \\<Longrightarrow> va \\<in> \\<V>\n                                   (fst (split_face f u v\n    vs)) \\<longrightarrow>\n                         fst (split_face f u v vs) \\<in> \\<F> ga\n 2. \\<And>ga u v f vs va.\n       \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g);\n        minGraphProps g; f \\<in> \\<F> ga; va < countVertices ga;\n        \\<not> final f; distinct (vertices f); distinct vs;\n        {0..<countVertices ga} \\<inter> set vs = {};\n        \\<V> f \\<inter> set vs = {}; u \\<in> \\<V> f; v \\<in> \\<V> f;\n        u \\<noteq> v;\n        \\<not> is_nextElem (vertices f) u v \\<and>\n        \\<not> is_nextElem (vertices f) v u \\<and>\n        (u, v) \\<notin> \\<E> ga \\<and> (v, u) \\<notin> \\<E> ga \\<or>\n        vs \\<noteq> [];\n        \\<forall>f\\<in>\\<F> ga.\n           va \\<in> \\<V> f \\<longrightarrow> final f\\<rbrakk>\n       \\<Longrightarrow> \\<forall>f\\<in>set\n   (replace f [snd (split_face f u v vs)] (faces ga)).\n                            va \\<in> \\<V> f \\<longrightarrow>\n                            f \\<in> \\<F> ga", "apply(clarsimp simp:split_face_def vertices_graph atLeastLessThan_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>ga u v f vs va.\n       \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g);\n        minGraphProps g; f \\<in> \\<F> ga; va < countVertices ga;\n        \\<not> final f; distinct (vertices f); distinct vs;\n        {..<countVertices ga} \\<inter> set vs = {};\n        \\<V> f \\<inter> set vs = {}; u \\<in> \\<V> f; v \\<in> \\<V> f;\n        u \\<noteq> v;\n        \\<not> is_nextElem (vertices f) u v \\<and>\n        \\<not> is_nextElem (vertices f) v u \\<and>\n        (u, v) \\<notin> \\<E> ga \\<and> (v, u) \\<notin> \\<E> ga \\<or>\n        vs \\<noteq> [];\n        \\<forall>f\\<in>\\<F> ga.\n           va \\<in> \\<V> f \\<longrightarrow> final f\\<rbrakk>\n       \\<Longrightarrow> (va = u \\<longrightarrow>\n                          Face (rev vs @ u # between (vertices f) u v @ [v])\n                           Nonfinal\n                          \\<in> \\<F> ga) \\<and>\n                         (va = v \\<longrightarrow>\n                          Face (rev vs @ u # between (vertices f) u v @ [v])\n                           Nonfinal\n                          \\<in> \\<F> ga) \\<and>\n                         (va \\<in> set vs \\<longrightarrow>\n                          Face (rev vs @ u # between (vertices f) u v @ [v])\n                           Nonfinal\n                          \\<in> \\<F> ga) \\<and>\n                         (va \\<in> set (between (vertices f) u\n   v) \\<longrightarrow>\n                          Face (rev vs @ u # between (vertices f) u v @ [v])\n                           Nonfinal\n                          \\<in> \\<F> ga)\n 2. \\<And>ga u v f vs va.\n       \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g);\n        minGraphProps g; f \\<in> \\<F> ga; va < countVertices ga;\n        \\<not> final f; distinct (vertices f); distinct vs;\n        {0..<countVertices ga} \\<inter> set vs = {};\n        \\<V> f \\<inter> set vs = {}; u \\<in> \\<V> f; v \\<in> \\<V> f;\n        u \\<noteq> v;\n        \\<not> is_nextElem (vertices f) u v \\<and>\n        \\<not> is_nextElem (vertices f) v u \\<and>\n        (u, v) \\<notin> \\<E> ga \\<and> (v, u) \\<notin> \\<E> ga \\<or>\n        vs \\<noteq> [];\n        \\<forall>f\\<in>\\<F> ga.\n           va \\<in> \\<V> f \\<longrightarrow> final f\\<rbrakk>\n       \\<Longrightarrow> \\<forall>f\\<in>set\n   (replace f [snd (split_face f u v vs)] (faces ga)).\n                            va \\<in> \\<V> f \\<longrightarrow>\n                            f \\<in> \\<F> ga", "apply(blast dest:inbetween_inset)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ga u v f vs va.\n       \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g);\n        minGraphProps g; f \\<in> \\<F> ga; va < countVertices ga;\n        \\<not> final f; distinct (vertices f); distinct vs;\n        {0..<countVertices ga} \\<inter> set vs = {};\n        \\<V> f \\<inter> set vs = {}; u \\<in> \\<V> f; v \\<in> \\<V> f;\n        u \\<noteq> v;\n        \\<not> is_nextElem (vertices f) u v \\<and>\n        \\<not> is_nextElem (vertices f) v u \\<and>\n        (u, v) \\<notin> \\<E> ga \\<and> (v, u) \\<notin> \\<E> ga \\<or>\n        vs \\<noteq> [];\n        \\<forall>f\\<in>\\<F> ga.\n           va \\<in> \\<V> f \\<longrightarrow> final f\\<rbrakk>\n       \\<Longrightarrow> \\<forall>f\\<in>set\n   (replace f [snd (split_face f u v vs)] (faces ga)).\n                            va \\<in> \\<V> f \\<longrightarrow>\n                            f \\<in> \\<F> ga", "apply(clarsimp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ga u v f vs va fa.\n       \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g);\n        minGraphProps g; f \\<in> \\<F> ga; va < countVertices ga;\n        \\<not> final f; distinct (vertices f); distinct vs;\n        {0..<countVertices ga} \\<inter> set vs = {};\n        \\<V> f \\<inter> set vs = {}; u \\<in> \\<V> f; v \\<in> \\<V> f;\n        u \\<noteq> v;\n        \\<not> is_nextElem (vertices f) u v \\<and>\n        \\<not> is_nextElem (vertices f) v u \\<and>\n        (u, v) \\<notin> \\<E> ga \\<and> (v, u) \\<notin> \\<E> ga \\<or>\n        vs \\<noteq> [];\n        \\<forall>f\\<in>\\<F> ga. va \\<in> \\<V> f \\<longrightarrow> final f;\n        fa \\<in> set (replace f [snd (split_face f u v vs)] (faces ga));\n        va \\<in> \\<V> fa\\<rbrakk>\n       \\<Longrightarrow> fa \\<in> \\<F> ga", "apply(erule disjE[OF replace5])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>ga u v f vs va fa.\n       \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g);\n        minGraphProps g; f \\<in> \\<F> ga; va < countVertices ga;\n        \\<not> final f; distinct (vertices f); distinct vs;\n        {0..<countVertices ga} \\<inter> set vs = {};\n        \\<V> f \\<inter> set vs = {}; u \\<in> \\<V> f; v \\<in> \\<V> f;\n        u \\<noteq> v;\n        \\<not> is_nextElem (vertices f) u v \\<and>\n        \\<not> is_nextElem (vertices f) v u \\<and>\n        (u, v) \\<notin> \\<E> ga \\<and> (v, u) \\<notin> \\<E> ga \\<or>\n        vs \\<noteq> [];\n        \\<forall>f\\<in>\\<F> ga. va \\<in> \\<V> f \\<longrightarrow> final f;\n        va \\<in> \\<V> fa; fa \\<in> \\<F> ga\\<rbrakk>\n       \\<Longrightarrow> fa \\<in> \\<F> ga\n 2. \\<And>ga u v f vs va fa.\n       \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g);\n        minGraphProps g; f \\<in> \\<F> ga; va < countVertices ga;\n        \\<not> final f; distinct (vertices f); distinct vs;\n        {0..<countVertices ga} \\<inter> set vs = {};\n        \\<V> f \\<inter> set vs = {}; u \\<in> \\<V> f; v \\<in> \\<V> f;\n        u \\<noteq> v;\n        \\<not> is_nextElem (vertices f) u v \\<and>\n        \\<not> is_nextElem (vertices f) v u \\<and>\n        (u, v) \\<notin> \\<E> ga \\<and> (v, u) \\<notin> \\<E> ga \\<or>\n        vs \\<noteq> [];\n        \\<forall>f\\<in>\\<F> ga. va \\<in> \\<V> f \\<longrightarrow> final f;\n        va \\<in> \\<V> fa; fa \\<in> set [snd (split_face f u v vs)]\\<rbrakk>\n       \\<Longrightarrow> fa \\<in> \\<F> ga", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ga u v f vs va fa.\n       \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g);\n        minGraphProps g; f \\<in> \\<F> ga; va < countVertices ga;\n        \\<not> final f; distinct (vertices f); distinct vs;\n        {0..<countVertices ga} \\<inter> set vs = {};\n        \\<V> f \\<inter> set vs = {}; u \\<in> \\<V> f; v \\<in> \\<V> f;\n        u \\<noteq> v;\n        \\<not> is_nextElem (vertices f) u v \\<and>\n        \\<not> is_nextElem (vertices f) v u \\<and>\n        (u, v) \\<notin> \\<E> ga \\<and> (v, u) \\<notin> \\<E> ga \\<or>\n        vs \\<noteq> [];\n        \\<forall>f\\<in>\\<F> ga. va \\<in> \\<V> f \\<longrightarrow> final f;\n        va \\<in> \\<V> fa; fa \\<in> set [snd (split_face f u v vs)]\\<rbrakk>\n       \\<Longrightarrow> fa \\<in> \\<F> ga", "apply(clarsimp simp:split_face_def vertices_graph)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ga u v f vs va.\n       \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g);\n        minGraphProps g; f \\<in> \\<F> ga; va < countVertices ga;\n        \\<not> final f; distinct (vertices f); distinct vs;\n        {0..<countVertices ga} \\<inter> set vs = {};\n        \\<V> f \\<inter> set vs = {}; u \\<in> \\<V> f; v \\<in> \\<V> f;\n        u \\<noteq> v;\n        \\<not> is_nextElem (vertices f) u v \\<and>\n        \\<not> is_nextElem (vertices f) v u \\<and>\n        (u, v) \\<notin> \\<E> ga \\<and> (v, u) \\<notin> \\<E> ga \\<or>\n        vs \\<noteq> [];\n        \\<forall>f\\<in>\\<F> ga. va \\<in> \\<V> f \\<longrightarrow> final f;\n        va = v \\<or>\n        va = u \\<or>\n        va \\<in> set (between (vertices f) v u) \\<or>\n        va \\<in> set vs\\<rbrakk>\n       \\<Longrightarrow> Face (v # between (vertices f) v u @ u # vs)\n                          Nonfinal\n                         \\<in> \\<F> ga", "apply(blast dest:inbetween_inset)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma next_plane0_finalVertex_mono:\n \"\\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g); inv g; u \\<in> \\<V> g; finalVertex g u \\<rbrakk>\n  \\<Longrightarrow> finalVertex g' u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g);\n     Invariants.inv g; u \\<in> \\<V> g; finalVertex g u\\<rbrakk>\n    \\<Longrightarrow> finalVertex g' u", "apply(frule (1) invariantE[OF inv_inv_next_plane0])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g);\n     Invariants.inv g; u \\<in> \\<V> g; finalVertex g u;\n     Invariants.inv g'\\<rbrakk>\n    \\<Longrightarrow> finalVertex g' u", "apply(subgoal_tac \"u \\<in> \\<V> g'\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g);\n     Invariants.inv g; u \\<in> \\<V> g; finalVertex g u; Invariants.inv g';\n     u \\<in> \\<V> g'\\<rbrakk>\n    \\<Longrightarrow> finalVertex g' u\n 2. \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g);\n     Invariants.inv g; u \\<in> \\<V> g; finalVertex g u;\n     Invariants.inv g'\\<rbrakk>\n    \\<Longrightarrow> u \\<in> \\<V> g'", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g);\n     Invariants.inv g; u \\<in> \\<V> g; finalVertex g u;\n     Invariants.inv g'\\<rbrakk>\n    \\<Longrightarrow> u \\<in> \\<V> g'\n 2. \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g);\n     Invariants.inv g; u \\<in> \\<V> g; finalVertex g u; Invariants.inv g';\n     u \\<in> \\<V> g'\\<rbrakk>\n    \\<Longrightarrow> finalVertex g' u", "apply(blast dest:next_plane0_vertices_subset inv_mgp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g);\n     Invariants.inv g; u \\<in> \\<V> g; finalVertex g u; Invariants.inv g';\n     u \\<in> \\<V> g'\\<rbrakk>\n    \\<Longrightarrow> finalVertex g' u", "apply(clarsimp simp:finalVertex_def minGraphProps_facesAt_eq[OF inv_mgp])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g);\n        Invariants.inv g; u \\<in> \\<V> g;\n        \\<forall>x.\n           x \\<in> \\<F> g \\<and> u \\<in> \\<V> x \\<longrightarrow> final x;\n        Invariants.inv g'; u \\<in> \\<V> g'; x \\<in> \\<F> g';\n        u \\<in> \\<V> x\\<rbrakk>\n       \\<Longrightarrow> final x", "apply(blast dest:next_plane0_incr_finV inv_mgp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsection\\<open>Preservation of @{const facesAt} at final vertices\\<close>"], ["", "lemma next_plane0_finalVertex_facesAt_eq:\n \"\\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g); inv g; v \\<in> \\<V> g; finalVertex g v \\<rbrakk>\n  \\<Longrightarrow> set(facesAt g' v) = set(facesAt g v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g);\n     Invariants.inv g; v \\<in> \\<V> g; finalVertex g v\\<rbrakk>\n    \\<Longrightarrow> set (facesAt g' v) = set (facesAt g v)", "apply(frule (1) invariantE[OF inv_inv_next_plane0])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g);\n     Invariants.inv g; v \\<in> \\<V> g; finalVertex g v;\n     Invariants.inv g'\\<rbrakk>\n    \\<Longrightarrow> set (facesAt g' v) = set (facesAt g v)", "apply(subgoal_tac \"v \\<in> \\<V> g'\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g);\n     Invariants.inv g; v \\<in> \\<V> g; finalVertex g v; Invariants.inv g';\n     v \\<in> \\<V> g'\\<rbrakk>\n    \\<Longrightarrow> set (facesAt g' v) = set (facesAt g v)\n 2. \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g);\n     Invariants.inv g; v \\<in> \\<V> g; finalVertex g v;\n     Invariants.inv g'\\<rbrakk>\n    \\<Longrightarrow> v \\<in> \\<V> g'", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g);\n     Invariants.inv g; v \\<in> \\<V> g; finalVertex g v;\n     Invariants.inv g'\\<rbrakk>\n    \\<Longrightarrow> v \\<in> \\<V> g'\n 2. \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g);\n     Invariants.inv g; v \\<in> \\<V> g; finalVertex g v; Invariants.inv g';\n     v \\<in> \\<V> g'\\<rbrakk>\n    \\<Longrightarrow> set (facesAt g' v) = set (facesAt g v)", "apply(blast dest:next_plane0_vertices_subset inv_mgp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g);\n     Invariants.inv g; v \\<in> \\<V> g; finalVertex g v; Invariants.inv g';\n     v \\<in> \\<V> g'\\<rbrakk>\n    \\<Longrightarrow> set (facesAt g' v) = set (facesAt g v)", "apply(clarsimp simp:finalVertex_def minGraphProps_facesAt_eq[OF inv_mgp])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g);\n     Invariants.inv g; v \\<in> \\<V> g;\n     \\<forall>x.\n        x \\<in> \\<F> g \\<and> v \\<in> \\<V> x \\<longrightarrow> final x;\n     Invariants.inv g'; v \\<in> \\<V> g'\\<rbrakk>\n    \\<Longrightarrow> {f \\<in> \\<F> g'. v \\<in> \\<V> f} =\n                      {f \\<in> \\<F> g. v \\<in> \\<V> f}", "by(blast dest:next_plane0_incr_finV next_plane0_final_mono inv_mgp)"], ["", "lemma next_plane0_len_filter_eq:\nassumes \"g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g)\" \"inv g\" \"v \\<in> \\<V> g\" \"finalVertex g v\"\nshows \"|filter P (facesAt g' v)| = |filter P (facesAt g v)|\""], ["proof (prove)\ngoal (1 subgoal):\n 1. |filter P (facesAt g' v)| = |filter P (facesAt g v)|", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. |filter P (facesAt g' v)| = |filter P (facesAt g v)|", "note inv' = invariantE[OF inv_inv_next_plane0, OF assms(1,2)]"], ["proof (state)\nthis:\n  Invariants.inv g'\n\ngoal (1 subgoal):\n 1. |filter P (facesAt g' v)| = |filter P (facesAt g v)|", "note mgp = inv_mgp[OF assms(2)] and mgp' = inv_mgp[OF inv']"], ["proof (state)\nthis:\n  minGraphProps g\n  minGraphProps g'\n\ngoal (1 subgoal):\n 1. |filter P (facesAt g' v)| = |filter P (facesAt g v)|", "note dist = distinct_filter[OF mgp_dist_facesAt[OF mgp \\<open>v : \\<V> g\\<close>]]"], ["proof (state)\nthis:\n  distinct (filter ?P (facesAt g v))\n\ngoal (1 subgoal):\n 1. |filter P (facesAt g' v)| = |filter P (facesAt g v)|", "have \"v \\<in> \\<V> g'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<in> \\<V> g'", "using assms(3) next_plane0_vertices_subset[OF assms(1) mgp]"], ["proof (prove)\nusing this:\n  v \\<in> \\<V> g\n  \\<V> g \\<subseteq> \\<V> g'\n\ngoal (1 subgoal):\n 1. v \\<in> \\<V> g'", "by blast"], ["proof (state)\nthis:\n  v \\<in> \\<V> g'\n\ngoal (1 subgoal):\n 1. |filter P (facesAt g' v)| = |filter P (facesAt g v)|", "note dist' = distinct_filter[OF mgp_dist_facesAt[OF mgp' \\<open>v : \\<V> g'\\<close>]]"], ["proof (state)\nthis:\n  distinct (filter ?P (facesAt g' v))\n\ngoal (1 subgoal):\n 1. |filter P (facesAt g' v)| = |filter P (facesAt g v)|", "have \"|filter P (facesAt g' v)| = card{f \\<in> set(facesAt g' v) . P f}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. |filter P (facesAt g' v)| = card {f \\<in> set (facesAt g' v). P f}", "using distinct_card[OF dist']"], ["proof (prove)\nusing this:\n  card (set (filter ?P1 (facesAt g' v))) = |filter ?P1 (facesAt g' v)|\n\ngoal (1 subgoal):\n 1. |filter P (facesAt g' v)| = card {f \\<in> set (facesAt g' v). P f}", "by simp"], ["proof (state)\nthis:\n  |filter P (facesAt g' v)| = card {f \\<in> set (facesAt g' v). P f}\n\ngoal (1 subgoal):\n 1. |filter P (facesAt g' v)| = |filter P (facesAt g v)|", "also"], ["proof (state)\nthis:\n  |filter P (facesAt g' v)| = card {f \\<in> set (facesAt g' v). P f}\n\ngoal (1 subgoal):\n 1. |filter P (facesAt g' v)| = |filter P (facesAt g v)|", "have \"\\<dots> = card{f \\<in> set(facesAt g v) . P f}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card {f \\<in> set (facesAt g' v). P f} =\n    card {f \\<in> set (facesAt g v). P f}", "by(simp add: next_plane0_finalVertex_facesAt_eq[OF assms])"], ["proof (state)\nthis:\n  card {f \\<in> set (facesAt g' v). P f} =\n  card {f \\<in> set (facesAt g v). P f}\n\ngoal (1 subgoal):\n 1. |filter P (facesAt g' v)| = |filter P (facesAt g v)|", "also"], ["proof (state)\nthis:\n  card {f \\<in> set (facesAt g' v). P f} =\n  card {f \\<in> set (facesAt g v). P f}\n\ngoal (1 subgoal):\n 1. |filter P (facesAt g' v)| = |filter P (facesAt g v)|", "have \"\\<dots> = |filter P (facesAt g v)|\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card {f \\<in> set (facesAt g v). P f} = |filter P (facesAt g v)|", "using distinct_card[OF dist]"], ["proof (prove)\nusing this:\n  card (set (filter ?P1 (facesAt g v))) = |filter ?P1 (facesAt g v)|\n\ngoal (1 subgoal):\n 1. card {f \\<in> set (facesAt g v). P f} = |filter P (facesAt g v)|", "by simp"], ["proof (state)\nthis:\n  card {f \\<in> set (facesAt g v). P f} = |filter P (facesAt g v)|\n\ngoal (1 subgoal):\n 1. |filter P (facesAt g' v)| = |filter P (facesAt g v)|", "finally"], ["proof (chain)\npicking this:\n  |filter P (facesAt g' v)| = |filter P (facesAt g v)|", "show ?thesis"], ["proof (prove)\nusing this:\n  |filter P (facesAt g' v)| = |filter P (facesAt g v)|\n\ngoal (1 subgoal):\n 1. |filter P (facesAt g' v)| = |filter P (facesAt g v)|", "."], ["proof (state)\nthis:\n  |filter P (facesAt g' v)| = |filter P (facesAt g v)|\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection\\<open>Properties of @{const subdivFace'}\\<close>"], ["", "lemma new_edge_subdivFace':\n  \"\\<And>f v n g.\n  pre_subdivFace' g f u v n ovs \\<Longrightarrow> minGraphProps g \\<Longrightarrow> f \\<in> \\<F> g \\<Longrightarrow>\n  subdivFace' g f v n ovs = makeFaceFinal f g \\<or>\n  (\\<forall>f' \\<in> \\<F> (subdivFace' g f v n ovs) - (\\<F> g - {f}).\n   \\<exists>e \\<in> \\<E> f'. e \\<notin> \\<E> g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f v n g.\n       \\<lbrakk>pre_subdivFace' g f u v n ovs; minGraphProps g;\n        f \\<in> \\<F> g\\<rbrakk>\n       \\<Longrightarrow> subdivFace' g f v n ovs = makeFaceFinal f g \\<or>\n                         (\\<forall>f'\\<in>\\<F> (subdivFace' g f v n ovs) -\n    (\\<F> g - {f}).\n                             \\<exists>e\\<in>\\<E> f'. e \\<notin> \\<E> g)", "proof (induct ovs)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>f v n g.\n       \\<lbrakk>pre_subdivFace' g f u v n []; minGraphProps g;\n        f \\<in> \\<F> g\\<rbrakk>\n       \\<Longrightarrow> subdivFace' g f v n [] = makeFaceFinal f g \\<or>\n                         (\\<forall>f'\\<in>\\<F> (subdivFace' g f v n []) -\n    (\\<F> g - {f}).\n                             \\<exists>e\\<in>\\<E> f'. e \\<notin> \\<E> g)\n 2. \\<And>a ovs f v n g.\n       \\<lbrakk>\\<And>f v n g.\n                   \\<lbrakk>pre_subdivFace' g f u v n ovs; minGraphProps g;\n                    f \\<in> \\<F> g\\<rbrakk>\n                   \\<Longrightarrow> subdivFace' g f v n ovs =\n                                     makeFaceFinal f g \\<or>\n                                     (\\<forall>f'\n         \\<in>\\<F> (subdivFace' g f v n ovs) - (\\<F> g - {f}).\n   \\<exists>e\\<in>\\<E> f'. e \\<notin> \\<E> g);\n        pre_subdivFace' g f u v n (a # ovs); minGraphProps g;\n        f \\<in> \\<F> g\\<rbrakk>\n       \\<Longrightarrow> subdivFace' g f v n (a # ovs) =\n                         makeFaceFinal f g \\<or>\n                         (\\<forall>f'\\<in>\\<F>\n     (subdivFace' g f v n (a # ovs)) -\n    (\\<F> g - {f}).\n                             \\<exists>e\\<in>\\<E> f'. e \\<notin> \\<E> g)", "case Nil"], ["proof (state)\nthis:\n  pre_subdivFace' g f u v n []\n  minGraphProps g\n  f \\<in> \\<F> g\n\ngoal (2 subgoals):\n 1. \\<And>f v n g.\n       \\<lbrakk>pre_subdivFace' g f u v n []; minGraphProps g;\n        f \\<in> \\<F> g\\<rbrakk>\n       \\<Longrightarrow> subdivFace' g f v n [] = makeFaceFinal f g \\<or>\n                         (\\<forall>f'\\<in>\\<F> (subdivFace' g f v n []) -\n    (\\<F> g - {f}).\n                             \\<exists>e\\<in>\\<E> f'. e \\<notin> \\<E> g)\n 2. \\<And>a ovs f v n g.\n       \\<lbrakk>\\<And>f v n g.\n                   \\<lbrakk>pre_subdivFace' g f u v n ovs; minGraphProps g;\n                    f \\<in> \\<F> g\\<rbrakk>\n                   \\<Longrightarrow> subdivFace' g f v n ovs =\n                                     makeFaceFinal f g \\<or>\n                                     (\\<forall>f'\n         \\<in>\\<F> (subdivFace' g f v n ovs) - (\\<F> g - {f}).\n   \\<exists>e\\<in>\\<E> f'. e \\<notin> \\<E> g);\n        pre_subdivFace' g f u v n (a # ovs); minGraphProps g;\n        f \\<in> \\<F> g\\<rbrakk>\n       \\<Longrightarrow> subdivFace' g f v n (a # ovs) =\n                         makeFaceFinal f g \\<or>\n                         (\\<forall>f'\\<in>\\<F>\n     (subdivFace' g f v n (a # ovs)) -\n    (\\<F> g - {f}).\n                             \\<exists>e\\<in>\\<E> f'. e \\<notin> \\<E> g)", "thus ?case"], ["proof (prove)\nusing this:\n  pre_subdivFace' g f u v n []\n  minGraphProps g\n  f \\<in> \\<F> g\n\ngoal (1 subgoal):\n 1. subdivFace' g f v n [] = makeFaceFinal f g \\<or>\n    (\\<forall>f'\\<in>\\<F> (subdivFace' g f v n []) - (\\<F> g - {f}).\n        \\<exists>e\\<in>\\<E> f'. e \\<notin> \\<E> g)", "by simp"], ["proof (state)\nthis:\n  subdivFace' g f v n [] = makeFaceFinal f g \\<or>\n  (\\<forall>f'\\<in>\\<F> (subdivFace' g f v n []) - (\\<F> g - {f}).\n      \\<exists>e\\<in>\\<E> f'. e \\<notin> \\<E> g)\n\ngoal (1 subgoal):\n 1. \\<And>a ovs f v n g.\n       \\<lbrakk>\\<And>f v n g.\n                   \\<lbrakk>pre_subdivFace' g f u v n ovs; minGraphProps g;\n                    f \\<in> \\<F> g\\<rbrakk>\n                   \\<Longrightarrow> subdivFace' g f v n ovs =\n                                     makeFaceFinal f g \\<or>\n                                     (\\<forall>f'\n         \\<in>\\<F> (subdivFace' g f v n ovs) - (\\<F> g - {f}).\n   \\<exists>e\\<in>\\<E> f'. e \\<notin> \\<E> g);\n        pre_subdivFace' g f u v n (a # ovs); minGraphProps g;\n        f \\<in> \\<F> g\\<rbrakk>\n       \\<Longrightarrow> subdivFace' g f v n (a # ovs) =\n                         makeFaceFinal f g \\<or>\n                         (\\<forall>f'\\<in>\\<F>\n     (subdivFace' g f v n (a # ovs)) -\n    (\\<F> g - {f}).\n                             \\<exists>e\\<in>\\<E> f'. e \\<notin> \\<E> g)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a ovs f v n g.\n       \\<lbrakk>\\<And>f v n g.\n                   \\<lbrakk>pre_subdivFace' g f u v n ovs; minGraphProps g;\n                    f \\<in> \\<F> g\\<rbrakk>\n                   \\<Longrightarrow> subdivFace' g f v n ovs =\n                                     makeFaceFinal f g \\<or>\n                                     (\\<forall>f'\n         \\<in>\\<F> (subdivFace' g f v n ovs) - (\\<F> g - {f}).\n   \\<exists>e\\<in>\\<E> f'. e \\<notin> \\<E> g);\n        pre_subdivFace' g f u v n (a # ovs); minGraphProps g;\n        f \\<in> \\<F> g\\<rbrakk>\n       \\<Longrightarrow> subdivFace' g f v n (a # ovs) =\n                         makeFaceFinal f g \\<or>\n                         (\\<forall>f'\\<in>\\<F>\n     (subdivFace' g f v n (a # ovs)) -\n    (\\<F> g - {f}).\n                             \\<exists>e\\<in>\\<E> f'. e \\<notin> \\<E> g)", "case (Cons ov ovs)"], ["proof (state)\nthis:\n  \\<lbrakk>pre_subdivFace' ?g ?f u ?v ?n ovs; minGraphProps ?g;\n   ?f \\<in> \\<F> ?g\\<rbrakk>\n  \\<Longrightarrow> subdivFace' ?g ?f ?v ?n ovs = makeFaceFinal ?f ?g \\<or>\n                    (\\<forall>f'\\<in>\\<F> (subdivFace' ?g ?f ?v ?n ovs) -\n                                     (\\<F> ?g - {?f}).\n                        \\<exists>e\\<in>\\<E> f'. e \\<notin> \\<E> ?g)\n  pre_subdivFace' g f u v n (ov # ovs)\n  minGraphProps g\n  f \\<in> \\<F> g\n\ngoal (1 subgoal):\n 1. \\<And>a ovs f v n g.\n       \\<lbrakk>\\<And>f v n g.\n                   \\<lbrakk>pre_subdivFace' g f u v n ovs; minGraphProps g;\n                    f \\<in> \\<F> g\\<rbrakk>\n                   \\<Longrightarrow> subdivFace' g f v n ovs =\n                                     makeFaceFinal f g \\<or>\n                                     (\\<forall>f'\n         \\<in>\\<F> (subdivFace' g f v n ovs) - (\\<F> g - {f}).\n   \\<exists>e\\<in>\\<E> f'. e \\<notin> \\<E> g);\n        pre_subdivFace' g f u v n (a # ovs); minGraphProps g;\n        f \\<in> \\<F> g\\<rbrakk>\n       \\<Longrightarrow> subdivFace' g f v n (a # ovs) =\n                         makeFaceFinal f g \\<or>\n                         (\\<forall>f'\\<in>\\<F>\n     (subdivFace' g f v n (a # ovs)) -\n    (\\<F> g - {f}).\n                             \\<exists>e\\<in>\\<E> f'. e \\<notin> \\<E> g)", "note IH = Cons(1) and pre = Cons(2) and mgp = Cons(3) and fg = Cons(4)"], ["proof (state)\nthis:\n  \\<lbrakk>pre_subdivFace' ?g ?f u ?v ?n ovs; minGraphProps ?g;\n   ?f \\<in> \\<F> ?g\\<rbrakk>\n  \\<Longrightarrow> subdivFace' ?g ?f ?v ?n ovs = makeFaceFinal ?f ?g \\<or>\n                    (\\<forall>f'\\<in>\\<F> (subdivFace' ?g ?f ?v ?n ovs) -\n                                     (\\<F> ?g - {?f}).\n                        \\<exists>e\\<in>\\<E> f'. e \\<notin> \\<E> ?g)\n  pre_subdivFace' g f u v n (ov # ovs)\n  minGraphProps g\n  f \\<in> \\<F> g\n\ngoal (1 subgoal):\n 1. \\<And>a ovs f v n g.\n       \\<lbrakk>\\<And>f v n g.\n                   \\<lbrakk>pre_subdivFace' g f u v n ovs; minGraphProps g;\n                    f \\<in> \\<F> g\\<rbrakk>\n                   \\<Longrightarrow> subdivFace' g f v n ovs =\n                                     makeFaceFinal f g \\<or>\n                                     (\\<forall>f'\n         \\<in>\\<F> (subdivFace' g f v n ovs) - (\\<F> g - {f}).\n   \\<exists>e\\<in>\\<E> f'. e \\<notin> \\<E> g);\n        pre_subdivFace' g f u v n (a # ovs); minGraphProps g;\n        f \\<in> \\<F> g\\<rbrakk>\n       \\<Longrightarrow> subdivFace' g f v n (a # ovs) =\n                         makeFaceFinal f g \\<or>\n                         (\\<forall>f'\\<in>\\<F>\n     (subdivFace' g f v n (a # ovs)) -\n    (\\<F> g - {f}).\n                             \\<exists>e\\<in>\\<E> f'. e \\<notin> \\<E> g)", "have uf: \"u \\<in> \\<V> f\" and vf: \"v \\<in> \\<V> f\" and distf: \"distinct (vertices f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. u \\<in> \\<V> f &&& v \\<in> \\<V> f &&& distinct (vertices f)", "using pre"], ["proof (prove)\nusing this:\n  pre_subdivFace' g f u v n (ov # ovs)\n\ngoal (1 subgoal):\n 1. u \\<in> \\<V> f &&& v \\<in> \\<V> f &&& distinct (vertices f)", "by(simp add:pre_subdivFace'_def)+"], ["proof (state)\nthis:\n  u \\<in> \\<V> f\n  v \\<in> \\<V> f\n  distinct (vertices f)\n\ngoal (1 subgoal):\n 1. \\<And>a ovs f v n g.\n       \\<lbrakk>\\<And>f v n g.\n                   \\<lbrakk>pre_subdivFace' g f u v n ovs; minGraphProps g;\n                    f \\<in> \\<F> g\\<rbrakk>\n                   \\<Longrightarrow> subdivFace' g f v n ovs =\n                                     makeFaceFinal f g \\<or>\n                                     (\\<forall>f'\n         \\<in>\\<F> (subdivFace' g f v n ovs) - (\\<F> g - {f}).\n   \\<exists>e\\<in>\\<E> f'. e \\<notin> \\<E> g);\n        pre_subdivFace' g f u v n (a # ovs); minGraphProps g;\n        f \\<in> \\<F> g\\<rbrakk>\n       \\<Longrightarrow> subdivFace' g f v n (a # ovs) =\n                         makeFaceFinal f g \\<or>\n                         (\\<forall>f'\\<in>\\<F>\n     (subdivFace' g f v n (a # ovs)) -\n    (\\<F> g - {f}).\n                             \\<exists>e\\<in>\\<E> f'. e \\<notin> \\<E> g)", "note distFg = minGraphProps11'[OF mgp]"], ["proof (state)\nthis:\n  distinct (faces g)\n\ngoal (1 subgoal):\n 1. \\<And>a ovs f v n g.\n       \\<lbrakk>\\<And>f v n g.\n                   \\<lbrakk>pre_subdivFace' g f u v n ovs; minGraphProps g;\n                    f \\<in> \\<F> g\\<rbrakk>\n                   \\<Longrightarrow> subdivFace' g f v n ovs =\n                                     makeFaceFinal f g \\<or>\n                                     (\\<forall>f'\n         \\<in>\\<F> (subdivFace' g f v n ovs) - (\\<F> g - {f}).\n   \\<exists>e\\<in>\\<E> f'. e \\<notin> \\<E> g);\n        pre_subdivFace' g f u v n (a # ovs); minGraphProps g;\n        f \\<in> \\<F> g\\<rbrakk>\n       \\<Longrightarrow> subdivFace' g f v n (a # ovs) =\n                         makeFaceFinal f g \\<or>\n                         (\\<forall>f'\\<in>\\<F>\n     (subdivFace' g f v n (a # ovs)) -\n    (\\<F> g - {f}).\n                             \\<exists>e\\<in>\\<E> f'. e \\<notin> \\<E> g)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. subdivFace' g f v n (ov # ovs) = makeFaceFinal f g \\<or>\n    (\\<forall>f'\\<in>\\<F> (subdivFace' g f v n (ov # ovs)) - (\\<F> g - {f}).\n        \\<exists>e\\<in>\\<E> f'. e \\<notin> \\<E> g)", "proof (cases ov)"], ["proof (state)\ngoal (2 subgoals):\n 1. ov = None \\<Longrightarrow>\n    subdivFace' g f v n (ov # ovs) = makeFaceFinal f g \\<or>\n    (\\<forall>f'\\<in>\\<F> (subdivFace' g f v n (ov # ovs)) - (\\<F> g - {f}).\n        \\<exists>e\\<in>\\<E> f'. e \\<notin> \\<E> g)\n 2. \\<And>a.\n       ov = Some a \\<Longrightarrow>\n       subdivFace' g f v n (ov # ovs) = makeFaceFinal f g \\<or>\n       (\\<forall>f'\\<in>\\<F> (subdivFace' g f v n (ov # ovs)) -\n                        (\\<F> g - {f}).\n           \\<exists>e\\<in>\\<E> f'. e \\<notin> \\<E> g)", "case None"], ["proof (state)\nthis:\n  ov = None\n\ngoal (2 subgoals):\n 1. ov = None \\<Longrightarrow>\n    subdivFace' g f v n (ov # ovs) = makeFaceFinal f g \\<or>\n    (\\<forall>f'\\<in>\\<F> (subdivFace' g f v n (ov # ovs)) - (\\<F> g - {f}).\n        \\<exists>e\\<in>\\<E> f'. e \\<notin> \\<E> g)\n 2. \\<And>a.\n       ov = Some a \\<Longrightarrow>\n       subdivFace' g f v n (ov # ovs) = makeFaceFinal f g \\<or>\n       (\\<forall>f'\\<in>\\<F> (subdivFace' g f v n (ov # ovs)) -\n                        (\\<F> g - {f}).\n           \\<exists>e\\<in>\\<E> f'. e \\<notin> \\<E> g)", "have pre': \"pre_subdivFace' g f u v (Suc n) ovs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pre_subdivFace' g f u v (Suc n) ovs", "using None pre"], ["proof (prove)\nusing this:\n  ov = None\n  pre_subdivFace' g f u v n (ov # ovs)\n\ngoal (1 subgoal):\n 1. pre_subdivFace' g f u v (Suc n) ovs", "by (simp add: pre_subdivFace'_None)"], ["proof (state)\nthis:\n  pre_subdivFace' g f u v (Suc n) ovs\n\ngoal (2 subgoals):\n 1. ov = None \\<Longrightarrow>\n    subdivFace' g f v n (ov # ovs) = makeFaceFinal f g \\<or>\n    (\\<forall>f'\\<in>\\<F> (subdivFace' g f v n (ov # ovs)) - (\\<F> g - {f}).\n        \\<exists>e\\<in>\\<E> f'. e \\<notin> \\<E> g)\n 2. \\<And>a.\n       ov = Some a \\<Longrightarrow>\n       subdivFace' g f v n (ov # ovs) = makeFaceFinal f g \\<or>\n       (\\<forall>f'\\<in>\\<F> (subdivFace' g f v n (ov # ovs)) -\n                        (\\<F> g - {f}).\n           \\<exists>e\\<in>\\<E> f'. e \\<notin> \\<E> g)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. subdivFace' g f v n (ov # ovs) = makeFaceFinal f g \\<or>\n    (\\<forall>f'\\<in>\\<F> (subdivFace' g f v n (ov # ovs)) - (\\<F> g - {f}).\n        \\<exists>e\\<in>\\<E> f'. e \\<notin> \\<E> g)", "using None"], ["proof (prove)\nusing this:\n  ov = None\n\ngoal (1 subgoal):\n 1. subdivFace' g f v n (ov # ovs) = makeFaceFinal f g \\<or>\n    (\\<forall>f'\\<in>\\<F> (subdivFace' g f v n (ov # ovs)) - (\\<F> g - {f}).\n        \\<exists>e\\<in>\\<E> f'. e \\<notin> \\<E> g)", "by (simp add: IH[OF pre' mgp fg])"], ["proof (state)\nthis:\n  subdivFace' g f v n (ov # ovs) = makeFaceFinal f g \\<or>\n  (\\<forall>f'\\<in>\\<F> (subdivFace' g f v n (ov # ovs)) - (\\<F> g - {f}).\n      \\<exists>e\\<in>\\<E> f'. e \\<notin> \\<E> g)\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       ov = Some a \\<Longrightarrow>\n       subdivFace' g f v n (ov # ovs) = makeFaceFinal f g \\<or>\n       (\\<forall>f'\\<in>\\<F> (subdivFace' g f v n (ov # ovs)) -\n                        (\\<F> g - {f}).\n           \\<exists>e\\<in>\\<E> f'. e \\<notin> \\<E> g)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a.\n       ov = Some a \\<Longrightarrow>\n       subdivFace' g f v n (ov # ovs) = makeFaceFinal f g \\<or>\n       (\\<forall>f'\\<in>\\<F> (subdivFace' g f v n (ov # ovs)) -\n                        (\\<F> g - {f}).\n           \\<exists>e\\<in>\\<E> f'. e \\<notin> \\<E> g)", "case (Some w)"], ["proof (state)\nthis:\n  ov = Some w\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       ov = Some a \\<Longrightarrow>\n       subdivFace' g f v n (ov # ovs) = makeFaceFinal f g \\<or>\n       (\\<forall>f'\\<in>\\<F> (subdivFace' g f v n (ov # ovs)) -\n                        (\\<F> g - {f}).\n           \\<exists>e\\<in>\\<E> f'. e \\<notin> \\<E> g)", "note pre = pre[simplified Some]"], ["proof (state)\nthis:\n  pre_subdivFace' g f u v n (Some w # ovs)\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       ov = Some a \\<Longrightarrow>\n       subdivFace' g f v n (ov # ovs) = makeFaceFinal f g \\<or>\n       (\\<forall>f'\\<in>\\<F> (subdivFace' g f v n (ov # ovs)) -\n                        (\\<F> g - {f}).\n           \\<exists>e\\<in>\\<E> f'. e \\<notin> \\<E> g)", "have uvw: \"before (verticesFrom f u) v w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. before (verticesFrom f u) v w", "using pre"], ["proof (prove)\nusing this:\n  pre_subdivFace' g f u v n (Some w # ovs)\n\ngoal (1 subgoal):\n 1. before (verticesFrom f u) v w", "by(simp add:pre_subdivFace'_def)"], ["proof (state)\nthis:\n  before (verticesFrom f u) v w\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       ov = Some a \\<Longrightarrow>\n       subdivFace' g f v n (ov # ovs) = makeFaceFinal f g \\<or>\n       (\\<forall>f'\\<in>\\<F> (subdivFace' g f v n (ov # ovs)) -\n                        (\\<F> g - {f}).\n           \\<exists>e\\<in>\\<E> f'. e \\<notin> \\<E> g)", "have uw: \"u \\<noteq> w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. u \\<noteq> w", "using pre"], ["proof (prove)\nusing this:\n  pre_subdivFace' g f u v n (Some w # ovs)\n\ngoal (1 subgoal):\n 1. u \\<noteq> w", "by(clarsimp simp: pre_subdivFace'_def)"], ["proof (state)\nthis:\n  u \\<noteq> w\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       ov = Some a \\<Longrightarrow>\n       subdivFace' g f v n (ov # ovs) = makeFaceFinal f g \\<or>\n       (\\<forall>f'\\<in>\\<F> (subdivFace' g f v n (ov # ovs)) -\n                        (\\<F> g - {f}).\n           \\<exists>e\\<in>\\<E> f'. e \\<notin> \\<E> g)", "{"], ["proof (state)\nthis:\n  u \\<noteq> w\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       ov = Some a \\<Longrightarrow>\n       subdivFace' g f v n (ov # ovs) = makeFaceFinal f g \\<or>\n       (\\<forall>f'\\<in>\\<F> (subdivFace' g f v n (ov # ovs)) -\n                        (\\<F> g - {f}).\n           \\<exists>e\\<in>\\<E> f'. e \\<notin> \\<E> g)", "assume w: \"f \\<bullet> v = w\" and n: \"n = 0\""], ["proof (state)\nthis:\n  f \\<bullet> v = w\n  n = 0\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       ov = Some a \\<Longrightarrow>\n       subdivFace' g f v n (ov # ovs) = makeFaceFinal f g \\<or>\n       (\\<forall>f'\\<in>\\<F> (subdivFace' g f v n (ov # ovs)) -\n                        (\\<F> g - {f}).\n           \\<exists>e\\<in>\\<E> f'. e \\<notin> \\<E> g)", "have pre': \"pre_subdivFace' g f u w 0 ovs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pre_subdivFace' g f u w 0 ovs", "using pre Some n"], ["proof (prove)\nusing this:\n  pre_subdivFace' g f u v n (Some w # ovs)\n  ov = Some w\n  n = 0\n\ngoal (1 subgoal):\n 1. pre_subdivFace' g f u w 0 ovs", "using [[simp_depth_limit = 5]]"], ["proof (prove)\nusing this:\n  pre_subdivFace' g f u v n (Some w # ovs)\n  ov = Some w\n  n = 0\n\ngoal (1 subgoal):\n 1. pre_subdivFace' g f u w 0 ovs", "by (simp add: pre_subdivFace'_Some2)"], ["proof (state)\nthis:\n  pre_subdivFace' g f u w 0 ovs\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       ov = Some a \\<Longrightarrow>\n       subdivFace' g f v n (ov # ovs) = makeFaceFinal f g \\<or>\n       (\\<forall>f'\\<in>\\<F> (subdivFace' g f v n (ov # ovs)) -\n                        (\\<F> g - {f}).\n           \\<exists>e\\<in>\\<E> f'. e \\<notin> \\<E> g)", "note IH[OF pre' mgp fg]"], ["proof (state)\nthis:\n  subdivFace' g f w 0 ovs = makeFaceFinal f g \\<or>\n  (\\<forall>f'\\<in>\\<F> (subdivFace' g f w 0 ovs) - (\\<F> g - {f}).\n      \\<exists>e\\<in>\\<E> f'. e \\<notin> \\<E> g)\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       ov = Some a \\<Longrightarrow>\n       subdivFace' g f v n (ov # ovs) = makeFaceFinal f g \\<or>\n       (\\<forall>f'\\<in>\\<F> (subdivFace' g f v n (ov # ovs)) -\n                        (\\<F> g - {f}).\n           \\<exists>e\\<in>\\<E> f'. e \\<notin> \\<E> g)", "}"], ["proof (state)\nthis:\n  \\<lbrakk>f \\<bullet> v = w; n = 0\\<rbrakk>\n  \\<Longrightarrow> subdivFace' g f w 0 ovs = makeFaceFinal f g \\<or>\n                    (\\<forall>f'\\<in>\\<F> (subdivFace' g f w 0 ovs) -\n                                     (\\<F> g - {f}).\n                        \\<exists>e\\<in>\\<E> f'. e \\<notin> \\<E> g)\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       ov = Some a \\<Longrightarrow>\n       subdivFace' g f v n (ov # ovs) = makeFaceFinal f g \\<or>\n       (\\<forall>f'\\<in>\\<F> (subdivFace' g f v n (ov # ovs)) -\n                        (\\<F> g - {f}).\n           \\<exists>e\\<in>\\<E> f'. e \\<notin> \\<E> g)", "moreover"], ["proof (state)\nthis:\n  \\<lbrakk>f \\<bullet> v = w; n = 0\\<rbrakk>\n  \\<Longrightarrow> subdivFace' g f w 0 ovs = makeFaceFinal f g \\<or>\n                    (\\<forall>f'\\<in>\\<F> (subdivFace' g f w 0 ovs) -\n                                     (\\<F> g - {f}).\n                        \\<exists>e\\<in>\\<E> f'. e \\<notin> \\<E> g)\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       ov = Some a \\<Longrightarrow>\n       subdivFace' g f v n (ov # ovs) = makeFaceFinal f g \\<or>\n       (\\<forall>f'\\<in>\\<F> (subdivFace' g f v n (ov # ovs)) -\n                        (\\<F> g - {f}).\n           \\<exists>e\\<in>\\<E> f'. e \\<notin> \\<E> g)", "{"], ["proof (state)\nthis:\n  \\<lbrakk>f \\<bullet> v = w; n = 0\\<rbrakk>\n  \\<Longrightarrow> subdivFace' g f w 0 ovs = makeFaceFinal f g \\<or>\n                    (\\<forall>f'\\<in>\\<F> (subdivFace' g f w 0 ovs) -\n                                     (\\<F> g - {f}).\n                        \\<exists>e\\<in>\\<E> f'. e \\<notin> \\<E> g)\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       ov = Some a \\<Longrightarrow>\n       subdivFace' g f v n (ov # ovs) = makeFaceFinal f g \\<or>\n       (\\<forall>f'\\<in>\\<F> (subdivFace' g f v n (ov # ovs)) -\n                        (\\<F> g - {f}).\n           \\<exists>e\\<in>\\<E> f'. e \\<notin> \\<E> g)", "let ?vs = \"[countVertices g..<countVertices g + n]\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a.\n       ov = Some a \\<Longrightarrow>\n       subdivFace' g f v n (ov # ovs) = makeFaceFinal f g \\<or>\n       (\\<forall>f'\\<in>\\<F> (subdivFace' g f v n (ov # ovs)) -\n                        (\\<F> g - {f}).\n           \\<exists>e\\<in>\\<E> f'. e \\<notin> \\<E> g)", "let ?fdg = \"splitFace g v w f ?vs\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a.\n       ov = Some a \\<Longrightarrow>\n       subdivFace' g f v n (ov # ovs) = makeFaceFinal f g \\<or>\n       (\\<forall>f'\\<in>\\<F> (subdivFace' g f v n (ov # ovs)) -\n                        (\\<F> g - {f}).\n           \\<exists>e\\<in>\\<E> f'. e \\<notin> \\<E> g)", "let  ?f\\<^sub>1 = \"fst ?fdg\" and ?f\\<^sub>2 = \"fst(snd ?fdg)\" and ?g' = \"snd(snd ?fdg)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a.\n       ov = Some a \\<Longrightarrow>\n       subdivFace' g f v n (ov # ovs) = makeFaceFinal f g \\<or>\n       (\\<forall>f'\\<in>\\<F> (subdivFace' g f v n (ov # ovs)) -\n                        (\\<F> g - {f}).\n           \\<exists>e\\<in>\\<E> f'. e \\<notin> \\<E> g)", "let ?g'' = \"subdivFace' ?g' ?f\\<^sub>2 w 0 ovs\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a.\n       ov = Some a \\<Longrightarrow>\n       subdivFace' g f v n (ov # ovs) = makeFaceFinal f g \\<or>\n       (\\<forall>f'\\<in>\\<F> (subdivFace' g f v n (ov # ovs)) -\n                        (\\<F> g - {f}).\n           \\<exists>e\\<in>\\<E> f'. e \\<notin> \\<E> g)", "let ?fvw = \"between(vertices f) v w\" and ?fwv = \"between(vertices f) w v\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a.\n       ov = Some a \\<Longrightarrow>\n       subdivFace' g f v n (ov # ovs) = makeFaceFinal f g \\<or>\n       (\\<forall>f'\\<in>\\<F> (subdivFace' g f v n (ov # ovs)) -\n                        (\\<F> g - {f}).\n           \\<exists>e\\<in>\\<E> f'. e \\<notin> \\<E> g)", "assume a: \"f \\<bullet> v = w \\<longrightarrow> 0 < n\""], ["proof (state)\nthis:\n  f \\<bullet> v = w \\<longrightarrow> 0 < n\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       ov = Some a \\<Longrightarrow>\n       subdivFace' g f v n (ov # ovs) = makeFaceFinal f g \\<or>\n       (\\<forall>f'\\<in>\\<F> (subdivFace' g f v n (ov # ovs)) -\n                        (\\<F> g - {f}).\n           \\<exists>e\\<in>\\<E> f'. e \\<notin> \\<E> g)", "have fsubg: \"\\<V> f \\<subseteq> \\<V> g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<V> f \\<subseteq> \\<V> g", "using mgp fg"], ["proof (prove)\nusing this:\n  minGraphProps g\n  f \\<in> \\<F> g\n\ngoal (1 subgoal):\n 1. \\<V> f \\<subseteq> \\<V> g", "by(simp add: minGraphProps_def faces_subset_def)"], ["proof (state)\nthis:\n  \\<V> f \\<subseteq> \\<V> g\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       ov = Some a \\<Longrightarrow>\n       subdivFace' g f v n (ov # ovs) = makeFaceFinal f g \\<or>\n       (\\<forall>f'\\<in>\\<F> (subdivFace' g f v n (ov # ovs)) -\n                        (\\<F> g - {f}).\n           \\<exists>e\\<in>\\<E> f'. e \\<notin> \\<E> g)", "have pre_fdg: \"pre_splitFace g v w f ?vs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pre_splitFace g v w f [countVertices g..<countVertices g + n]", "apply (rule pre_subdivFace'_preFaceDiv[OF pre fg _ fsubg])"], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<bullet> v = w \\<longrightarrow> n \\<noteq> 0", "using a"], ["proof (prove)\nusing this:\n  f \\<bullet> v = w \\<longrightarrow> 0 < n\n\ngoal (1 subgoal):\n 1. f \\<bullet> v = w \\<longrightarrow> n \\<noteq> 0", "by (simp)"], ["proof (state)\nthis:\n  pre_splitFace g v w f [countVertices g..<countVertices g + n]\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       ov = Some a \\<Longrightarrow>\n       subdivFace' g f v n (ov # ovs) = makeFaceFinal f g \\<or>\n       (\\<forall>f'\\<in>\\<F> (subdivFace' g f v n (ov # ovs)) -\n                        (\\<F> g - {f}).\n           \\<exists>e\\<in>\\<E> f'. e \\<notin> \\<E> g)", "hence \"v \\<noteq> w\" and \"w \\<in> \\<V> f\""], ["proof (prove)\nusing this:\n  pre_splitFace g v w f [countVertices g..<countVertices g + n]\n\ngoal (1 subgoal):\n 1. v \\<noteq> w &&& w \\<in> \\<V> f", "by(unfold pre_splitFace_def)simp+"], ["proof (state)\nthis:\n  v \\<noteq> w\n  w \\<in> \\<V> f\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       ov = Some a \\<Longrightarrow>\n       subdivFace' g f v n (ov # ovs) = makeFaceFinal f g \\<or>\n       (\\<forall>f'\\<in>\\<F> (subdivFace' g f v n (ov # ovs)) -\n                        (\\<F> g - {f}).\n           \\<exists>e\\<in>\\<E> f'. e \\<notin> \\<E> g)", "have f\\<^sub>1: \"?f\\<^sub>1= fst(split_face f v w ?vs)\"\n        and f\\<^sub>2: \"?f\\<^sub>2 = snd(split_face f v w ?vs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (splitFace g v w f [countVertices g..<countVertices g + n]) =\n    fst (split_face f v w [countVertices g..<countVertices g + n]) &&&\n    fst (snd (splitFace g v w f [countVertices g..<countVertices g + n])) =\n    snd (split_face f v w [countVertices g..<countVertices g + n])", "by(auto simp add:splitFace_def split_def)"], ["proof (state)\nthis:\n  fst (splitFace g v w f [countVertices g..<countVertices g + n]) =\n  fst (split_face f v w [countVertices g..<countVertices g + n])\n  fst (snd (splitFace g v w f [countVertices g..<countVertices g + n])) =\n  snd (split_face f v w [countVertices g..<countVertices g + n])\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       ov = Some a \\<Longrightarrow>\n       subdivFace' g f v n (ov # ovs) = makeFaceFinal f g \\<or>\n       (\\<forall>f'\\<in>\\<F> (subdivFace' g f v n (ov # ovs)) -\n                        (\\<F> g - {f}).\n           \\<exists>e\\<in>\\<E> f'. e \\<notin> \\<E> g)", "note pre_split = pre_splitFace_pre_split_face[OF pre_fdg]"], ["proof (state)\nthis:\n  pre_split_face f v w [countVertices g..<countVertices g + n]\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       ov = Some a \\<Longrightarrow>\n       subdivFace' g f v n (ov # ovs) = makeFaceFinal f g \\<or>\n       (\\<forall>f'\\<in>\\<F> (subdivFace' g f v n (ov # ovs)) -\n                        (\\<F> g - {f}).\n           \\<exists>e\\<in>\\<E> f'. e \\<notin> \\<E> g)", "have E\\<^sub>1: \"\\<E> ?f\\<^sub>1 = Edges (w # rev ?vs @ [v]) \\<union> Edges (v # ?fvw @ [w])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<E> (fst (splitFace g v w f [countVertices g..<countVertices g + n])) =\n    Edges (w # rev [countVertices g..<countVertices g + n] @ [v]) \\<union>\n    Edges (v # between (vertices f) v w @ [w])", "using f\\<^sub>1"], ["proof (prove)\nusing this:\n  fst (splitFace g v w f [countVertices g..<countVertices g + n]) =\n  fst (split_face f v w [countVertices g..<countVertices g + n])\n\ngoal (1 subgoal):\n 1. \\<E> (fst (splitFace g v w f [countVertices g..<countVertices g + n])) =\n    Edges (w # rev [countVertices g..<countVertices g + n] @ [v]) \\<union>\n    Edges (v # between (vertices f) v w @ [w])", "by(simp add:edges_split_face1[OF pre_split])"], ["proof (state)\nthis:\n  \\<E> (fst (splitFace g v w f [countVertices g..<countVertices g + n])) =\n  Edges (w # rev [countVertices g..<countVertices g + n] @ [v]) \\<union>\n  Edges (v # between (vertices f) v w @ [w])\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       ov = Some a \\<Longrightarrow>\n       subdivFace' g f v n (ov # ovs) = makeFaceFinal f g \\<or>\n       (\\<forall>f'\\<in>\\<F> (subdivFace' g f v n (ov # ovs)) -\n                        (\\<F> g - {f}).\n           \\<exists>e\\<in>\\<E> f'. e \\<notin> \\<E> g)", "have E\\<^sub>2: \"\\<E> ?f\\<^sub>2 = Edges (v # ?vs @ [w]) \\<union> Edges (w # ?fwv @ [v])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<E>\n     (fst (snd (splitFace g v w f\n                 [countVertices g..<countVertices g + n]))) =\n    Edges (v # [countVertices g..<countVertices g + n] @ [w]) \\<union>\n    Edges (w # between (vertices f) w v @ [v])", "by(simp add:splitFace_def split_def\n            edges_split_face2[OF pre_split])"], ["proof (state)\nthis:\n  \\<E>\n   (fst (snd (splitFace g v w f [countVertices g..<countVertices g + n]))) =\n  Edges (v # [countVertices g..<countVertices g + n] @ [w]) \\<union>\n  Edges (w # between (vertices f) w v @ [v])\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       ov = Some a \\<Longrightarrow>\n       subdivFace' g f v n (ov # ovs) = makeFaceFinal f g \\<or>\n       (\\<forall>f'\\<in>\\<F> (subdivFace' g f v n (ov # ovs)) -\n                        (\\<F> g - {f}).\n           \\<exists>e\\<in>\\<E> f'. e \\<notin> \\<E> g)", "note mgp' = splitFace_holds_minGraphProps[OF pre_fdg mgp]"], ["proof (state)\nthis:\n  minGraphProps\n   (snd (snd (splitFace g v w f [countVertices g..<countVertices g + n])))\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       ov = Some a \\<Longrightarrow>\n       subdivFace' g f v n (ov # ovs) = makeFaceFinal f g \\<or>\n       (\\<forall>f'\\<in>\\<F> (subdivFace' g f v n (ov # ovs)) -\n                        (\\<F> g - {f}).\n           \\<exists>e\\<in>\\<E> f'. e \\<notin> \\<E> g)", "note distFg' = minGraphProps11'[OF mgp']"], ["proof (state)\nthis:\n  distinct\n   (faces\n     (snd (snd (splitFace g v w f\n                 [countVertices g..<countVertices g + n]))))\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       ov = Some a \\<Longrightarrow>\n       subdivFace' g f v n (ov # ovs) = makeFaceFinal f g \\<or>\n       (\\<forall>f'\\<in>\\<F> (subdivFace' g f v n (ov # ovs)) -\n                        (\\<F> g - {f}).\n           \\<exists>e\\<in>\\<E> f'. e \\<notin> \\<E> g)", "have pre': \"pre_subdivFace' ?g' ?f\\<^sub>2 u w 0 ovs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pre_subdivFace'\n     (snd (snd (splitFace g v w f [countVertices g..<countVertices g + n])))\n     (fst (snd (splitFace g v w f [countVertices g..<countVertices g + n])))\n     u w 0 ovs", "by (rule pre_subdivFace'_Some1[OF pre fg _ fsubg HOL.refl HOL.refl])\n           (simp add:a)"], ["proof (state)\nthis:\n  pre_subdivFace'\n   (snd (snd (splitFace g v w f [countVertices g..<countVertices g + n])))\n   (fst (snd (splitFace g v w f [countVertices g..<countVertices g + n]))) u\n   w 0 ovs\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       ov = Some a \\<Longrightarrow>\n       subdivFace' g f v n (ov # ovs) = makeFaceFinal f g \\<or>\n       (\\<forall>f'\\<in>\\<F> (subdivFace' g f v n (ov # ovs)) -\n                        (\\<F> g - {f}).\n           \\<exists>e\\<in>\\<E> f'. e \\<notin> \\<E> g)", "note f2inF = splitFace_add_f21'[OF fg]"], ["proof (state)\nthis:\n  fst (snd (splitFace g ?v ?a f ?nvl))\n  \\<in> \\<F> (snd (snd (splitFace g ?v ?a f ?nvl)))\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       ov = Some a \\<Longrightarrow>\n       subdivFace' g f v n (ov # ovs) = makeFaceFinal f g \\<or>\n       (\\<forall>f'\\<in>\\<F> (subdivFace' g f v n (ov # ovs)) -\n                        (\\<F> g - {f}).\n           \\<exists>e\\<in>\\<E> f'. e \\<notin> \\<E> g)", "have 1: \"\\<exists>e \\<in> \\<E> ?f\\<^sub>1. e \\<notin> \\<E> g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>e\\<in>\\<E>\n                    (fst (splitFace g v w f\n                           [countVertices g..<countVertices g + n])).\n       e \\<notin> \\<E> g", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>e\\<in>\\<E>\n                    (fst (splitFace g v w f\n                           [countVertices g..<countVertices g + n])).\n       e \\<notin> \\<E> g\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>e\\<in>\\<E>\n                    (fst (splitFace g v w f\n                           [countVertices g..<countVertices g + n])).\n       e \\<notin> \\<E> g", "assume \"rev ?vs = []\""], ["proof (state)\nthis:\n  rev [countVertices g..<countVertices g + n] = []\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>e\\<in>\\<E>\n                    (fst (splitFace g v w f\n                           [countVertices g..<countVertices g + n])).\n       e \\<notin> \\<E> g\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>e\\<in>\\<E>\n                    (fst (splitFace g v w f\n                           [countVertices g..<countVertices g + n])).\n       e \\<notin> \\<E> g", "hence \"(w,v) \\<in> \\<E> ?f\\<^sub>1 \\<and> (w,v) \\<notin> \\<E> g\""], ["proof (prove)\nusing this:\n  rev [countVertices g..<countVertices g + n] = []\n\ngoal (1 subgoal):\n 1. (w, v)\n    \\<in> \\<E>\n           (fst (splitFace g v w f\n                  [countVertices g..<countVertices g + n])) \\<and>\n    (w, v) \\<notin> \\<E> g", "using pre_fdg E\\<^sub>1"], ["proof (prove)\nusing this:\n  rev [countVertices g..<countVertices g + n] = []\n  pre_splitFace g v w f [countVertices g..<countVertices g + n]\n  \\<E> (fst (splitFace g v w f [countVertices g..<countVertices g + n])) =\n  Edges (w # rev [countVertices g..<countVertices g + n] @ [v]) \\<union>\n  Edges (v # between (vertices f) v w @ [w])\n\ngoal (1 subgoal):\n 1. (w, v)\n    \\<in> \\<E>\n           (fst (splitFace g v w f\n                  [countVertices g..<countVertices g + n])) \\<and>\n    (w, v) \\<notin> \\<E> g", "by(unfold pre_splitFace_def) (auto simp:Edges_Cons)"], ["proof (state)\nthis:\n  (w, v)\n  \\<in> \\<E>\n         (fst (splitFace g v w f\n                [countVertices g..<countVertices g + n])) \\<and>\n  (w, v) \\<notin> \\<E> g\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>e\\<in>\\<E>\n                    (fst (splitFace g v w f\n                           [countVertices g..<countVertices g + n])).\n       e \\<notin> \\<E> g\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>e\\<in>\\<E>\n                    (fst (splitFace g v w f\n                           [countVertices g..<countVertices g + n])).\n       e \\<notin> \\<E> g", "thus ?thesis"], ["proof (prove)\nusing this:\n  (w, v)\n  \\<in> \\<E>\n         (fst (splitFace g v w f\n                [countVertices g..<countVertices g + n])) \\<and>\n  (w, v) \\<notin> \\<E> g\n\ngoal (1 subgoal):\n 1. \\<exists>e\\<in>\\<E>\n                    (fst (splitFace g v w f\n                           [countVertices g..<countVertices g + n])).\n       e \\<notin> \\<E> g", "by blast"], ["proof (state)\nthis:\n  \\<exists>e\\<in>\\<E>\n                  (fst (splitFace g v w f\n                         [countVertices g..<countVertices g + n])).\n     e \\<notin> \\<E> g\n\ngoal (1 subgoal):\n 1. rev [countVertices g..<countVertices g + n] \\<noteq>\n    [] \\<Longrightarrow>\n    \\<exists>e\\<in>\\<E>\n                    (fst (splitFace g v w f\n                           [countVertices g..<countVertices g + n])).\n       e \\<notin> \\<E> g", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. rev [countVertices g..<countVertices g + n] \\<noteq>\n    [] \\<Longrightarrow>\n    \\<exists>e\\<in>\\<E>\n                    (fst (splitFace g v w f\n                           [countVertices g..<countVertices g + n])).\n       e \\<notin> \\<E> g", "assume \"rev ?vs \\<noteq> []\""], ["proof (state)\nthis:\n  rev [countVertices g..<countVertices g + n] \\<noteq> []\n\ngoal (1 subgoal):\n 1. rev [countVertices g..<countVertices g + n] \\<noteq>\n    [] \\<Longrightarrow>\n    \\<exists>e\\<in>\\<E>\n                    (fst (splitFace g v w f\n                           [countVertices g..<countVertices g + n])).\n       e \\<notin> \\<E> g", "then"], ["proof (chain)\npicking this:\n  rev [countVertices g..<countVertices g + n] \\<noteq> []", "obtain x xs where rvs: \"rev ?vs = x#xs\""], ["proof (prove)\nusing this:\n  rev [countVertices g..<countVertices g + n] \\<noteq> []\n\ngoal (1 subgoal):\n 1. (\\<And>x xs.\n        rev [countVertices g..<countVertices g + n] =\n        x # xs \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by(auto simp only:neq_Nil_conv)"], ["proof (state)\nthis:\n  rev [countVertices g..<countVertices g + n] = x # xs\n\ngoal (1 subgoal):\n 1. rev [countVertices g..<countVertices g + n] \\<noteq>\n    [] \\<Longrightarrow>\n    \\<exists>e\\<in>\\<E>\n                    (fst (splitFace g v w f\n                           [countVertices g..<countVertices g + n])).\n       e \\<notin> \\<E> g", "hence \"(w,x) \\<in> \\<E> ?f\\<^sub>1\""], ["proof (prove)\nusing this:\n  rev [countVertices g..<countVertices g + n] = x # xs\n\ngoal (1 subgoal):\n 1. (w, x)\n    \\<in> \\<E>\n           (fst (splitFace g v w f [countVertices g..<countVertices g + n]))", "using E\\<^sub>1"], ["proof (prove)\nusing this:\n  rev [countVertices g..<countVertices g + n] = x # xs\n  \\<E> (fst (splitFace g v w f [countVertices g..<countVertices g + n])) =\n  Edges (w # rev [countVertices g..<countVertices g + n] @ [v]) \\<union>\n  Edges (v # between (vertices f) v w @ [w])\n\ngoal (1 subgoal):\n 1. (w, x)\n    \\<in> \\<E>\n           (fst (splitFace g v w f [countVertices g..<countVertices g + n]))", "by (auto simp:Edges_Cons)"], ["proof (state)\nthis:\n  (w, x)\n  \\<in> \\<E>\n         (fst (splitFace g v w f [countVertices g..<countVertices g + n]))\n\ngoal (1 subgoal):\n 1. rev [countVertices g..<countVertices g + n] \\<noteq>\n    [] \\<Longrightarrow>\n    \\<exists>e\\<in>\\<E>\n                    (fst (splitFace g v w f\n                           [countVertices g..<countVertices g + n])).\n       e \\<notin> \\<E> g", "moreover"], ["proof (state)\nthis:\n  (w, x)\n  \\<in> \\<E>\n         (fst (splitFace g v w f [countVertices g..<countVertices g + n]))\n\ngoal (1 subgoal):\n 1. rev [countVertices g..<countVertices g + n] \\<noteq>\n    [] \\<Longrightarrow>\n    \\<exists>e\\<in>\\<E>\n                    (fst (splitFace g v w f\n                           [countVertices g..<countVertices g + n])).\n       e \\<notin> \\<E> g", "have \"(w,x) \\<notin> \\<E> g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (w, x) \\<notin> \\<E> g", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (w, x) \\<notin> \\<E> g", "have \"x \\<in> set(rev ?vs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> set (rev [countVertices g..<countVertices g + n])", "using rvs"], ["proof (prove)\nusing this:\n  rev [countVertices g..<countVertices g + n] = x # xs\n\ngoal (1 subgoal):\n 1. x \\<in> set (rev [countVertices g..<countVertices g + n])", "by simp"], ["proof (state)\nthis:\n  x \\<in> set (rev [countVertices g..<countVertices g + n])\n\ngoal (1 subgoal):\n 1. (w, x) \\<notin> \\<E> g", "hence \"x \\<ge> countVertices g\""], ["proof (prove)\nusing this:\n  x \\<in> set (rev [countVertices g..<countVertices g + n])\n\ngoal (1 subgoal):\n 1. countVertices g \\<le> x", "by simp"], ["proof (state)\nthis:\n  countVertices g \\<le> x\n\ngoal (1 subgoal):\n 1. (w, x) \\<notin> \\<E> g", "hence \"x \\<notin> \\<V> g\""], ["proof (prove)\nusing this:\n  countVertices g \\<le> x\n\ngoal (1 subgoal):\n 1. x \\<notin> \\<V> g", "by(induct g) (simp add:vertices_graph_def)"], ["proof (state)\nthis:\n  x \\<notin> \\<V> g\n\ngoal (1 subgoal):\n 1. (w, x) \\<notin> \\<E> g", "thus ?thesis"], ["proof (prove)\nusing this:\n  x \\<notin> \\<V> g\n\ngoal (1 subgoal):\n 1. (w, x) \\<notin> \\<E> g", "by (auto simp:edges_graph_def)\n               (blast dest: in_edges_in_vertices minGraphProps9[OF mgp])"], ["proof (state)\nthis:\n  (w, x) \\<notin> \\<E> g\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (w, x) \\<notin> \\<E> g\n\ngoal (1 subgoal):\n 1. rev [countVertices g..<countVertices g + n] \\<noteq>\n    [] \\<Longrightarrow>\n    \\<exists>e\\<in>\\<E>\n                    (fst (splitFace g v w f\n                           [countVertices g..<countVertices g + n])).\n       e \\<notin> \\<E> g", "ultimately"], ["proof (chain)\npicking this:\n  (w, x)\n  \\<in> \\<E>\n         (fst (splitFace g v w f [countVertices g..<countVertices g + n]))\n  (w, x) \\<notin> \\<E> g", "show ?thesis"], ["proof (prove)\nusing this:\n  (w, x)\n  \\<in> \\<E>\n         (fst (splitFace g v w f [countVertices g..<countVertices g + n]))\n  (w, x) \\<notin> \\<E> g\n\ngoal (1 subgoal):\n 1. \\<exists>e\\<in>\\<E>\n                    (fst (splitFace g v w f\n                           [countVertices g..<countVertices g + n])).\n       e \\<notin> \\<E> g", "by blast"], ["proof (state)\nthis:\n  \\<exists>e\\<in>\\<E>\n                  (fst (splitFace g v w f\n                         [countVertices g..<countVertices g + n])).\n     e \\<notin> \\<E> g\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>e\\<in>\\<E>\n                  (fst (splitFace g v w f\n                         [countVertices g..<countVertices g + n])).\n     e \\<notin> \\<E> g\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       ov = Some a \\<Longrightarrow>\n       subdivFace' g f v n (ov # ovs) = makeFaceFinal f g \\<or>\n       (\\<forall>f'\\<in>\\<F> (subdivFace' g f v n (ov # ovs)) -\n                        (\\<F> g - {f}).\n           \\<exists>e\\<in>\\<E> f'. e \\<notin> \\<E> g)", "have 2: \"\\<exists>e \\<in> \\<E> ?f\\<^sub>2. e \\<notin> \\<E> g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>e\\<in>\\<E>\n                    (fst (snd (splitFace g v w f\n                                [countVertices g..<countVertices g + n]))).\n       e \\<notin> \\<E> g", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>e\\<in>\\<E>\n                    (fst (snd (splitFace g v w f\n                                [countVertices g..<countVertices g + n]))).\n       e \\<notin> \\<E> g\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>e\\<in>\\<E>\n                    (fst (snd (splitFace g v w f\n                                [countVertices g..<countVertices g + n]))).\n       e \\<notin> \\<E> g", "assume \"?vs = []\""], ["proof (state)\nthis:\n  [countVertices g..<countVertices g + n] = []\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>e\\<in>\\<E>\n                    (fst (snd (splitFace g v w f\n                                [countVertices g..<countVertices g + n]))).\n       e \\<notin> \\<E> g\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>e\\<in>\\<E>\n                    (fst (snd (splitFace g v w f\n                                [countVertices g..<countVertices g + n]))).\n       e \\<notin> \\<E> g", "hence \"(v,w) \\<in> \\<E> ?f\\<^sub>2 \\<and> (v,w) \\<notin> \\<E> g\""], ["proof (prove)\nusing this:\n  [countVertices g..<countVertices g + n] = []\n\ngoal (1 subgoal):\n 1. (v, w)\n    \\<in> \\<E>\n           (fst (snd (splitFace g v w f\n                       [countVertices g..<countVertices g + n]))) \\<and>\n    (v, w) \\<notin> \\<E> g", "using pre_fdg E\\<^sub>2"], ["proof (prove)\nusing this:\n  [countVertices g..<countVertices g + n] = []\n  pre_splitFace g v w f [countVertices g..<countVertices g + n]\n  \\<E>\n   (fst (snd (splitFace g v w f [countVertices g..<countVertices g + n]))) =\n  Edges (v # [countVertices g..<countVertices g + n] @ [w]) \\<union>\n  Edges (w # between (vertices f) w v @ [v])\n\ngoal (1 subgoal):\n 1. (v, w)\n    \\<in> \\<E>\n           (fst (snd (splitFace g v w f\n                       [countVertices g..<countVertices g + n]))) \\<and>\n    (v, w) \\<notin> \\<E> g", "by(unfold pre_splitFace_def) (auto simp:Edges_Cons)"], ["proof (state)\nthis:\n  (v, w)\n  \\<in> \\<E>\n         (fst (snd (splitFace g v w f\n                     [countVertices g..<countVertices g + n]))) \\<and>\n  (v, w) \\<notin> \\<E> g\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>e\\<in>\\<E>\n                    (fst (snd (splitFace g v w f\n                                [countVertices g..<countVertices g + n]))).\n       e \\<notin> \\<E> g\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>e\\<in>\\<E>\n                    (fst (snd (splitFace g v w f\n                                [countVertices g..<countVertices g + n]))).\n       e \\<notin> \\<E> g", "thus ?thesis"], ["proof (prove)\nusing this:\n  (v, w)\n  \\<in> \\<E>\n         (fst (snd (splitFace g v w f\n                     [countVertices g..<countVertices g + n]))) \\<and>\n  (v, w) \\<notin> \\<E> g\n\ngoal (1 subgoal):\n 1. \\<exists>e\\<in>\\<E>\n                    (fst (snd (splitFace g v w f\n                                [countVertices g..<countVertices g + n]))).\n       e \\<notin> \\<E> g", "by blast"], ["proof (state)\nthis:\n  \\<exists>e\\<in>\\<E>\n                  (fst (snd (splitFace g v w f\n                              [countVertices g..<countVertices g + n]))).\n     e \\<notin> \\<E> g\n\ngoal (1 subgoal):\n 1. [countVertices g..<countVertices g + n] \\<noteq> [] \\<Longrightarrow>\n    \\<exists>e\\<in>\\<E>\n                    (fst (snd (splitFace g v w f\n                                [countVertices g..<countVertices g + n]))).\n       e \\<notin> \\<E> g", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. [countVertices g..<countVertices g + n] \\<noteq> [] \\<Longrightarrow>\n    \\<exists>e\\<in>\\<E>\n                    (fst (snd (splitFace g v w f\n                                [countVertices g..<countVertices g + n]))).\n       e \\<notin> \\<E> g", "assume \"?vs \\<noteq> []\""], ["proof (state)\nthis:\n  [countVertices g..<countVertices g + n] \\<noteq> []\n\ngoal (1 subgoal):\n 1. [countVertices g..<countVertices g + n] \\<noteq> [] \\<Longrightarrow>\n    \\<exists>e\\<in>\\<E>\n                    (fst (snd (splitFace g v w f\n                                [countVertices g..<countVertices g + n]))).\n       e \\<notin> \\<E> g", "then"], ["proof (chain)\npicking this:\n  [countVertices g..<countVertices g + n] \\<noteq> []", "obtain x xs where vs: \"?vs = x#xs\""], ["proof (prove)\nusing this:\n  [countVertices g..<countVertices g + n] \\<noteq> []\n\ngoal (1 subgoal):\n 1. (\\<And>x xs.\n        [countVertices g..<countVertices g + n] = x # xs \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by(auto simp only:neq_Nil_conv)"], ["proof (state)\nthis:\n  [countVertices g..<countVertices g + n] = x # xs\n\ngoal (1 subgoal):\n 1. [countVertices g..<countVertices g + n] \\<noteq> [] \\<Longrightarrow>\n    \\<exists>e\\<in>\\<E>\n                    (fst (snd (splitFace g v w f\n                                [countVertices g..<countVertices g + n]))).\n       e \\<notin> \\<E> g", "hence \"(v,x) \\<in> \\<E> ?f\\<^sub>2\""], ["proof (prove)\nusing this:\n  [countVertices g..<countVertices g + n] = x # xs\n\ngoal (1 subgoal):\n 1. (v, x)\n    \\<in> \\<E>\n           (fst (snd (splitFace g v w f\n                       [countVertices g..<countVertices g + n])))", "using E\\<^sub>2"], ["proof (prove)\nusing this:\n  [countVertices g..<countVertices g + n] = x # xs\n  \\<E>\n   (fst (snd (splitFace g v w f [countVertices g..<countVertices g + n]))) =\n  Edges (v # [countVertices g..<countVertices g + n] @ [w]) \\<union>\n  Edges (w # between (vertices f) w v @ [v])\n\ngoal (1 subgoal):\n 1. (v, x)\n    \\<in> \\<E>\n           (fst (snd (splitFace g v w f\n                       [countVertices g..<countVertices g + n])))", "by (auto simp:Edges_Cons)"], ["proof (state)\nthis:\n  (v, x)\n  \\<in> \\<E>\n         (fst (snd (splitFace g v w f\n                     [countVertices g..<countVertices g + n])))\n\ngoal (1 subgoal):\n 1. [countVertices g..<countVertices g + n] \\<noteq> [] \\<Longrightarrow>\n    \\<exists>e\\<in>\\<E>\n                    (fst (snd (splitFace g v w f\n                                [countVertices g..<countVertices g + n]))).\n       e \\<notin> \\<E> g", "moreover"], ["proof (state)\nthis:\n  (v, x)\n  \\<in> \\<E>\n         (fst (snd (splitFace g v w f\n                     [countVertices g..<countVertices g + n])))\n\ngoal (1 subgoal):\n 1. [countVertices g..<countVertices g + n] \\<noteq> [] \\<Longrightarrow>\n    \\<exists>e\\<in>\\<E>\n                    (fst (snd (splitFace g v w f\n                                [countVertices g..<countVertices g + n]))).\n       e \\<notin> \\<E> g", "have \"(v,x) \\<notin> \\<E> g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (v, x) \\<notin> \\<E> g", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (v, x) \\<notin> \\<E> g", "have \"x \\<in> set ?vs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> set [countVertices g..<countVertices g + n]", "using vs"], ["proof (prove)\nusing this:\n  [countVertices g..<countVertices g + n] = x # xs\n\ngoal (1 subgoal):\n 1. x \\<in> set [countVertices g..<countVertices g + n]", "by simp"], ["proof (state)\nthis:\n  x \\<in> set [countVertices g..<countVertices g + n]\n\ngoal (1 subgoal):\n 1. (v, x) \\<notin> \\<E> g", "hence \"x \\<ge> countVertices g\""], ["proof (prove)\nusing this:\n  x \\<in> set [countVertices g..<countVertices g + n]\n\ngoal (1 subgoal):\n 1. countVertices g \\<le> x", "by simp"], ["proof (state)\nthis:\n  countVertices g \\<le> x\n\ngoal (1 subgoal):\n 1. (v, x) \\<notin> \\<E> g", "hence \"x \\<notin> \\<V> g\""], ["proof (prove)\nusing this:\n  countVertices g \\<le> x\n\ngoal (1 subgoal):\n 1. x \\<notin> \\<V> g", "by(induct g) (simp add:vertices_graph_def)"], ["proof (state)\nthis:\n  x \\<notin> \\<V> g\n\ngoal (1 subgoal):\n 1. (v, x) \\<notin> \\<E> g", "thus ?thesis"], ["proof (prove)\nusing this:\n  x \\<notin> \\<V> g\n\ngoal (1 subgoal):\n 1. (v, x) \\<notin> \\<E> g", "by (auto simp:edges_graph_def)\n               (blast dest: in_edges_in_vertices minGraphProps9[OF mgp])"], ["proof (state)\nthis:\n  (v, x) \\<notin> \\<E> g\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (v, x) \\<notin> \\<E> g\n\ngoal (1 subgoal):\n 1. [countVertices g..<countVertices g + n] \\<noteq> [] \\<Longrightarrow>\n    \\<exists>e\\<in>\\<E>\n                    (fst (snd (splitFace g v w f\n                                [countVertices g..<countVertices g + n]))).\n       e \\<notin> \\<E> g", "ultimately"], ["proof (chain)\npicking this:\n  (v, x)\n  \\<in> \\<E>\n         (fst (snd (splitFace g v w f\n                     [countVertices g..<countVertices g + n])))\n  (v, x) \\<notin> \\<E> g", "show ?thesis"], ["proof (prove)\nusing this:\n  (v, x)\n  \\<in> \\<E>\n         (fst (snd (splitFace g v w f\n                     [countVertices g..<countVertices g + n])))\n  (v, x) \\<notin> \\<E> g\n\ngoal (1 subgoal):\n 1. \\<exists>e\\<in>\\<E>\n                    (fst (snd (splitFace g v w f\n                                [countVertices g..<countVertices g + n]))).\n       e \\<notin> \\<E> g", "by blast"], ["proof (state)\nthis:\n  \\<exists>e\\<in>\\<E>\n                  (fst (snd (splitFace g v w f\n                              [countVertices g..<countVertices g + n]))).\n     e \\<notin> \\<E> g\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>e\\<in>\\<E>\n                  (fst (snd (splitFace g v w f\n                              [countVertices g..<countVertices g + n]))).\n     e \\<notin> \\<E> g\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       ov = Some a \\<Longrightarrow>\n       subdivFace' g f v n (ov # ovs) = makeFaceFinal f g \\<or>\n       (\\<forall>f'\\<in>\\<F> (subdivFace' g f v n (ov # ovs)) -\n                        (\\<F> g - {f}).\n           \\<exists>e\\<in>\\<E> f'. e \\<notin> \\<E> g)", "have fdg: \"(?f\\<^sub>1,?f\\<^sub>2,?g') = splitFace g v w f ?vs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (fst (splitFace g v w f [countVertices g..<countVertices g + n]),\n     fst (snd (splitFace g v w f [countVertices g..<countVertices g + n])),\n     snd (snd (splitFace g v w f\n                [countVertices g..<countVertices g + n]))) =\n    splitFace g v w f [countVertices g..<countVertices g + n]", "by auto"], ["proof (state)\nthis:\n  (fst (splitFace g v w f [countVertices g..<countVertices g + n]),\n   fst (snd (splitFace g v w f [countVertices g..<countVertices g + n])),\n   snd (snd (splitFace g v w f [countVertices g..<countVertices g + n]))) =\n  splitFace g v w f [countVertices g..<countVertices g + n]\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       ov = Some a \\<Longrightarrow>\n       subdivFace' g f v n (ov # ovs) = makeFaceFinal f g \\<or>\n       (\\<forall>f'\\<in>\\<F> (subdivFace' g f v n (ov # ovs)) -\n                        (\\<F> g - {f}).\n           \\<exists>e\\<in>\\<E> f'. e \\<notin> \\<E> g)", "hence Fg': \"\\<F> ?g' = {?f\\<^sub>1,?f\\<^sub>2} \\<union> (\\<F> g - {f})\""], ["proof (prove)\nusing this:\n  (fst (splitFace g v w f [countVertices g..<countVertices g + n]),\n   fst (snd (splitFace g v w f [countVertices g..<countVertices g + n])),\n   snd (snd (splitFace g v w f [countVertices g..<countVertices g + n]))) =\n  splitFace g v w f [countVertices g..<countVertices g + n]\n\ngoal (1 subgoal):\n 1. \\<F>\n     (snd (snd (splitFace g v w f\n                 [countVertices g..<countVertices g + n]))) =\n    {fst (splitFace g v w f [countVertices g..<countVertices g + n]),\n     fst (snd (splitFace g v w f\n                [countVertices g..<countVertices g + n]))} \\<union>\n    (\\<F> g - {f})", "using set_faces_splitFace[OF mgp fg pre_fdg]"], ["proof (prove)\nusing this:\n  (fst (splitFace g v w f [countVertices g..<countVertices g + n]),\n   fst (snd (splitFace g v w f [countVertices g..<countVertices g + n])),\n   snd (snd (splitFace g v w f [countVertices g..<countVertices g + n]))) =\n  splitFace g v w f [countVertices g..<countVertices g + n]\n  (?f1.0, ?f2.0, ?g') =\n  splitFace g v w f\n   [countVertices g..<countVertices g + n] \\<Longrightarrow>\n  \\<F> ?g' = {?f1.0, ?f2.0} \\<union> (\\<F> g - {f})\n\ngoal (1 subgoal):\n 1. \\<F>\n     (snd (snd (splitFace g v w f\n                 [countVertices g..<countVertices g + n]))) =\n    {fst (splitFace g v w f [countVertices g..<countVertices g + n]),\n     fst (snd (splitFace g v w f\n                [countVertices g..<countVertices g + n]))} \\<union>\n    (\\<F> g - {f})", "by blast"], ["proof (state)\nthis:\n  \\<F>\n   (snd (snd (splitFace g v w f [countVertices g..<countVertices g + n]))) =\n  {fst (splitFace g v w f [countVertices g..<countVertices g + n]),\n   fst (snd (splitFace g v w f\n              [countVertices g..<countVertices g + n]))} \\<union>\n  (\\<F> g - {f})\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       ov = Some a \\<Longrightarrow>\n       subdivFace' g f v n (ov # ovs) = makeFaceFinal f g \\<or>\n       (\\<forall>f'\\<in>\\<F> (subdivFace' g f v n (ov # ovs)) -\n                        (\\<F> g - {f}).\n           \\<exists>e\\<in>\\<E> f'. e \\<notin> \\<E> g)", "have \"\\<forall>f' \\<in> \\<F> ?g'' - (\\<F> g - {f}). \\<exists>e \\<in> \\<E> f'. e \\<notin> \\<E> g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>f'\\<in>\\<F>\n                     (subdivFace'\n                       (snd (snd (splitFace g v w f\n                                   [countVertices g..<\n                                    countVertices g + n])))\n                       (fst (snd (splitFace g v w f\n                                   [countVertices g..<\n                                    countVertices g + n])))\n                       w 0 ovs) -\n                    (\\<F> g - {f}).\n       \\<exists>e\\<in>\\<E> f'. e \\<notin> \\<E> g", "proof (clarify)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f'.\n       \\<lbrakk>f' \\<in> \\<F>\n                          (subdivFace'\n                            (snd (snd (splitFace g v w f\n  [countVertices g..<countVertices g + n])))\n                            (fst (snd (splitFace g v w f\n  [countVertices g..<countVertices g + n])))\n                            w 0 ovs);\n        f' \\<notin> \\<F> g - {f}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>e\\<in>\\<E> f'. e \\<notin> \\<E> g", "fix f'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f'.\n       \\<lbrakk>f' \\<in> \\<F>\n                          (subdivFace'\n                            (snd (snd (splitFace g v w f\n  [countVertices g..<countVertices g + n])))\n                            (fst (snd (splitFace g v w f\n  [countVertices g..<countVertices g + n])))\n                            w 0 ovs);\n        f' \\<notin> \\<F> g - {f}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>e\\<in>\\<E> f'. e \\<notin> \\<E> g", "assume f'g'': \"f' \\<in> \\<F> ?g''\" and f'ng: \"f' \\<notin> \\<F> g - {f}\""], ["proof (state)\nthis:\n  f' \\<in> \\<F>\n            (subdivFace'\n              (snd (snd (splitFace g v w f\n                          [countVertices g..<countVertices g + n])))\n              (fst (snd (splitFace g v w f\n                          [countVertices g..<countVertices g + n])))\n              w 0 ovs)\n  f' \\<notin> \\<F> g - {f}\n\ngoal (1 subgoal):\n 1. \\<And>f'.\n       \\<lbrakk>f' \\<in> \\<F>\n                          (subdivFace'\n                            (snd (snd (splitFace g v w f\n  [countVertices g..<countVertices g + n])))\n                            (fst (snd (splitFace g v w f\n  [countVertices g..<countVertices g + n])))\n                            w 0 ovs);\n        f' \\<notin> \\<F> g - {f}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>e\\<in>\\<E> f'. e \\<notin> \\<E> g", "from IH[OF pre' mgp' f2inF]"], ["proof (chain)\npicking this:\n  subdivFace'\n   (snd (snd (splitFace g v w f [countVertices g..<countVertices g + n])))\n   (fst (snd (splitFace g v w f [countVertices g..<countVertices g + n]))) w\n   0 ovs =\n  makeFaceFinal\n   (fst (snd (splitFace g v w f [countVertices g..<countVertices g + n])))\n   (snd (snd (splitFace g v w f\n               [countVertices g..<countVertices g + n]))) \\<or>\n  (\\<forall>f'\\<in>\\<F>\n                    (subdivFace'\n                      (snd (snd (splitFace g v w f\n                                  [countVertices g..<countVertices g + n])))\n                      (fst (snd (splitFace g v w f\n                                  [countVertices g..<countVertices g + n])))\n                      w 0 ovs) -\n                   (\\<F>\n                     (snd (snd (splitFace g v w f\n                                 [countVertices g..<\n                                  countVertices g + n]))) -\n                    {fst (snd (splitFace g v w f\n                                [countVertices g..<countVertices g + n]))}).\n      \\<exists>e\\<in>\\<E> f'.\n         e \\<notin> \\<E>\n                     (snd (snd (splitFace g v w f\n                                 [countVertices g..<countVertices g + n]))))", "show \"\\<exists>e \\<in> \\<E> f'. e \\<notin> \\<E> g\""], ["proof (prove)\nusing this:\n  subdivFace'\n   (snd (snd (splitFace g v w f [countVertices g..<countVertices g + n])))\n   (fst (snd (splitFace g v w f [countVertices g..<countVertices g + n]))) w\n   0 ovs =\n  makeFaceFinal\n   (fst (snd (splitFace g v w f [countVertices g..<countVertices g + n])))\n   (snd (snd (splitFace g v w f\n               [countVertices g..<countVertices g + n]))) \\<or>\n  (\\<forall>f'\\<in>\\<F>\n                    (subdivFace'\n                      (snd (snd (splitFace g v w f\n                                  [countVertices g..<countVertices g + n])))\n                      (fst (snd (splitFace g v w f\n                                  [countVertices g..<countVertices g + n])))\n                      w 0 ovs) -\n                   (\\<F>\n                     (snd (snd (splitFace g v w f\n                                 [countVertices g..<\n                                  countVertices g + n]))) -\n                    {fst (snd (splitFace g v w f\n                                [countVertices g..<countVertices g + n]))}).\n      \\<exists>e\\<in>\\<E> f'.\n         e \\<notin> \\<E>\n                     (snd (snd (splitFace g v w f\n                                 [countVertices g..<countVertices g + n]))))\n\ngoal (1 subgoal):\n 1. \\<exists>e\\<in>\\<E> f'. e \\<notin> \\<E> g", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. subdivFace'\n     (snd (snd (splitFace g v w f [countVertices g..<countVertices g + n])))\n     (fst (snd (splitFace g v w f [countVertices g..<countVertices g + n])))\n     w 0 ovs =\n    makeFaceFinal\n     (fst (snd (splitFace g v w f [countVertices g..<countVertices g + n])))\n     (snd (snd (splitFace g v w f\n                 [countVertices g..<\n                  countVertices g + n]))) \\<Longrightarrow>\n    \\<exists>e\\<in>\\<E> f'. e \\<notin> \\<E> g\n 2. \\<forall>f'\\<in>\\<F>\n                     (subdivFace'\n                       (snd (snd (splitFace g v w f\n                                   [countVertices g..<\n                                    countVertices g + n])))\n                       (fst (snd (splitFace g v w f\n                                   [countVertices g..<\n                                    countVertices g + n])))\n                       w 0 ovs) -\n                    (\\<F>\n                      (snd (snd (splitFace g v w f\n                                  [countVertices g..<\n                                   countVertices g + n]))) -\n                     {fst (snd (splitFace g v w f\n                                 [countVertices g..<\n                                  countVertices g + n]))}).\n       \\<exists>e\\<in>\\<E> f'.\n          e \\<notin> \\<E>\n                      (snd (snd (splitFace g v w f\n                                  [countVertices g..<\n                                   countVertices g + n]))) \\<Longrightarrow>\n    \\<exists>e\\<in>\\<E> f'. e \\<notin> \\<E> g", "assume \"?g'' = makeFaceFinal ?f\\<^sub>2 ?g'\""], ["proof (state)\nthis:\n  subdivFace'\n   (snd (snd (splitFace g v w f [countVertices g..<countVertices g + n])))\n   (fst (snd (splitFace g v w f [countVertices g..<countVertices g + n]))) w\n   0 ovs =\n  makeFaceFinal\n   (fst (snd (splitFace g v w f [countVertices g..<countVertices g + n])))\n   (snd (snd (splitFace g v w f [countVertices g..<countVertices g + n])))\n\ngoal (2 subgoals):\n 1. subdivFace'\n     (snd (snd (splitFace g v w f [countVertices g..<countVertices g + n])))\n     (fst (snd (splitFace g v w f [countVertices g..<countVertices g + n])))\n     w 0 ovs =\n    makeFaceFinal\n     (fst (snd (splitFace g v w f [countVertices g..<countVertices g + n])))\n     (snd (snd (splitFace g v w f\n                 [countVertices g..<\n                  countVertices g + n]))) \\<Longrightarrow>\n    \\<exists>e\\<in>\\<E> f'. e \\<notin> \\<E> g\n 2. \\<forall>f'\\<in>\\<F>\n                     (subdivFace'\n                       (snd (snd (splitFace g v w f\n                                   [countVertices g..<\n                                    countVertices g + n])))\n                       (fst (snd (splitFace g v w f\n                                   [countVertices g..<\n                                    countVertices g + n])))\n                       w 0 ovs) -\n                    (\\<F>\n                      (snd (snd (splitFace g v w f\n                                  [countVertices g..<\n                                   countVertices g + n]))) -\n                     {fst (snd (splitFace g v w f\n                                 [countVertices g..<\n                                  countVertices g + n]))}).\n       \\<exists>e\\<in>\\<E> f'.\n          e \\<notin> \\<E>\n                      (snd (snd (splitFace g v w f\n                                  [countVertices g..<\n                                   countVertices g + n]))) \\<Longrightarrow>\n    \\<exists>e\\<in>\\<E> f'. e \\<notin> \\<E> g", "hence \"f' = setFinal ?f\\<^sub>2 \\<or> f' = ?f\\<^sub>1\" (is \"?A \\<or> ?B\")"], ["proof (prove)\nusing this:\n  subdivFace'\n   (snd (snd (splitFace g v w f [countVertices g..<countVertices g + n])))\n   (fst (snd (splitFace g v w f [countVertices g..<countVertices g + n]))) w\n   0 ovs =\n  makeFaceFinal\n   (fst (snd (splitFace g v w f [countVertices g..<countVertices g + n])))\n   (snd (snd (splitFace g v w f [countVertices g..<countVertices g + n])))\n\ngoal (1 subgoal):\n 1. f' =\n    setFinal\n     (fst (snd (splitFace g v w f\n                 [countVertices g..<countVertices g + n]))) \\<or>\n    f' = fst (splitFace g v w f [countVertices g..<countVertices g + n])", "using f'g'' Fg' f'ng"], ["proof (prove)\nusing this:\n  subdivFace'\n   (snd (snd (splitFace g v w f [countVertices g..<countVertices g + n])))\n   (fst (snd (splitFace g v w f [countVertices g..<countVertices g + n]))) w\n   0 ovs =\n  makeFaceFinal\n   (fst (snd (splitFace g v w f [countVertices g..<countVertices g + n])))\n   (snd (snd (splitFace g v w f [countVertices g..<countVertices g + n])))\n  f' \\<in> \\<F>\n            (subdivFace'\n              (snd (snd (splitFace g v w f\n                          [countVertices g..<countVertices g + n])))\n              (fst (snd (splitFace g v w f\n                          [countVertices g..<countVertices g + n])))\n              w 0 ovs)\n  \\<F>\n   (snd (snd (splitFace g v w f [countVertices g..<countVertices g + n]))) =\n  {fst (splitFace g v w f [countVertices g..<countVertices g + n]),\n   fst (snd (splitFace g v w f\n              [countVertices g..<countVertices g + n]))} \\<union>\n  (\\<F> g - {f})\n  f' \\<notin> \\<F> g - {f}\n\ngoal (1 subgoal):\n 1. f' =\n    setFinal\n     (fst (snd (splitFace g v w f\n                 [countVertices g..<countVertices g + n]))) \\<or>\n    f' = fst (splitFace g v w f [countVertices g..<countVertices g + n])", "by(auto simp:makeFaceFinal_def makeFaceFinalFaceList_def\n              distinct_set_replace[OF distFg'])"], ["proof (state)\nthis:\n  f' =\n  setFinal\n   (fst (snd (splitFace g v w f\n               [countVertices g..<countVertices g + n]))) \\<or>\n  f' = fst (splitFace g v w f [countVertices g..<countVertices g + n])\n\ngoal (2 subgoals):\n 1. subdivFace'\n     (snd (snd (splitFace g v w f [countVertices g..<countVertices g + n])))\n     (fst (snd (splitFace g v w f [countVertices g..<countVertices g + n])))\n     w 0 ovs =\n    makeFaceFinal\n     (fst (snd (splitFace g v w f [countVertices g..<countVertices g + n])))\n     (snd (snd (splitFace g v w f\n                 [countVertices g..<\n                  countVertices g + n]))) \\<Longrightarrow>\n    \\<exists>e\\<in>\\<E> f'. e \\<notin> \\<E> g\n 2. \\<forall>f'\\<in>\\<F>\n                     (subdivFace'\n                       (snd (snd (splitFace g v w f\n                                   [countVertices g..<\n                                    countVertices g + n])))\n                       (fst (snd (splitFace g v w f\n                                   [countVertices g..<\n                                    countVertices g + n])))\n                       w 0 ovs) -\n                    (\\<F>\n                      (snd (snd (splitFace g v w f\n                                  [countVertices g..<\n                                   countVertices g + n]))) -\n                     {fst (snd (splitFace g v w f\n                                 [countVertices g..<\n                                  countVertices g + n]))}).\n       \\<exists>e\\<in>\\<E> f'.\n          e \\<notin> \\<E>\n                      (snd (snd (splitFace g v w f\n                                  [countVertices g..<\n                                   countVertices g + n]))) \\<Longrightarrow>\n    \\<exists>e\\<in>\\<E> f'. e \\<notin> \\<E> g", "thus ?thesis"], ["proof (prove)\nusing this:\n  f' =\n  setFinal\n   (fst (snd (splitFace g v w f\n               [countVertices g..<countVertices g + n]))) \\<or>\n  f' = fst (splitFace g v w f [countVertices g..<countVertices g + n])\n\ngoal (1 subgoal):\n 1. \\<exists>e\\<in>\\<E> f'. e \\<notin> \\<E> g", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. f' =\n    setFinal\n     (fst (snd (splitFace g v w f\n                 [countVertices g..<\n                  countVertices g + n]))) \\<Longrightarrow>\n    \\<exists>e\\<in>\\<E> f'. e \\<notin> \\<E> g\n 2. f' =\n    fst (splitFace g v w f\n          [countVertices g..<countVertices g + n]) \\<Longrightarrow>\n    \\<exists>e\\<in>\\<E> f'. e \\<notin> \\<E> g", "assume ?A"], ["proof (state)\nthis:\n  f' =\n  setFinal\n   (fst (snd (splitFace g v w f [countVertices g..<countVertices g + n])))\n\ngoal (2 subgoals):\n 1. f' =\n    setFinal\n     (fst (snd (splitFace g v w f\n                 [countVertices g..<\n                  countVertices g + n]))) \\<Longrightarrow>\n    \\<exists>e\\<in>\\<E> f'. e \\<notin> \\<E> g\n 2. f' =\n    fst (splitFace g v w f\n          [countVertices g..<countVertices g + n]) \\<Longrightarrow>\n    \\<exists>e\\<in>\\<E> f'. e \\<notin> \\<E> g", "thus ?thesis"], ["proof (prove)\nusing this:\n  f' =\n  setFinal\n   (fst (snd (splitFace g v w f [countVertices g..<countVertices g + n])))\n\ngoal (1 subgoal):\n 1. \\<exists>e\\<in>\\<E> f'. e \\<notin> \\<E> g", "using 2"], ["proof (prove)\nusing this:\n  f' =\n  setFinal\n   (fst (snd (splitFace g v w f [countVertices g..<countVertices g + n])))\n  \\<exists>e\\<in>\\<E>\n                  (fst (snd (splitFace g v w f\n                              [countVertices g..<countVertices g + n]))).\n     e \\<notin> \\<E> g\n\ngoal (1 subgoal):\n 1. \\<exists>e\\<in>\\<E> f'. e \\<notin> \\<E> g", "by(simp)"], ["proof (state)\nthis:\n  \\<exists>e\\<in>\\<E> f'. e \\<notin> \\<E> g\n\ngoal (1 subgoal):\n 1. f' =\n    fst (splitFace g v w f\n          [countVertices g..<countVertices g + n]) \\<Longrightarrow>\n    \\<exists>e\\<in>\\<E> f'. e \\<notin> \\<E> g", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. f' =\n    fst (splitFace g v w f\n          [countVertices g..<countVertices g + n]) \\<Longrightarrow>\n    \\<exists>e\\<in>\\<E> f'. e \\<notin> \\<E> g", "assume ?B"], ["proof (state)\nthis:\n  f' = fst (splitFace g v w f [countVertices g..<countVertices g + n])\n\ngoal (1 subgoal):\n 1. f' =\n    fst (splitFace g v w f\n          [countVertices g..<countVertices g + n]) \\<Longrightarrow>\n    \\<exists>e\\<in>\\<E> f'. e \\<notin> \\<E> g", "thus ?thesis"], ["proof (prove)\nusing this:\n  f' = fst (splitFace g v w f [countVertices g..<countVertices g + n])\n\ngoal (1 subgoal):\n 1. \\<exists>e\\<in>\\<E> f'. e \\<notin> \\<E> g", "using 1"], ["proof (prove)\nusing this:\n  f' = fst (splitFace g v w f [countVertices g..<countVertices g + n])\n  \\<exists>e\\<in>\\<E>\n                  (fst (splitFace g v w f\n                         [countVertices g..<countVertices g + n])).\n     e \\<notin> \\<E> g\n\ngoal (1 subgoal):\n 1. \\<exists>e\\<in>\\<E> f'. e \\<notin> \\<E> g", "by blast"], ["proof (state)\nthis:\n  \\<exists>e\\<in>\\<E> f'. e \\<notin> \\<E> g\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>e\\<in>\\<E> f'. e \\<notin> \\<E> g\n\ngoal (1 subgoal):\n 1. \\<forall>f'\\<in>\\<F>\n                     (subdivFace'\n                       (snd (snd (splitFace g v w f\n                                   [countVertices g..<\n                                    countVertices g + n])))\n                       (fst (snd (splitFace g v w f\n                                   [countVertices g..<\n                                    countVertices g + n])))\n                       w 0 ovs) -\n                    (\\<F>\n                      (snd (snd (splitFace g v w f\n                                  [countVertices g..<\n                                   countVertices g + n]))) -\n                     {fst (snd (splitFace g v w f\n                                 [countVertices g..<\n                                  countVertices g + n]))}).\n       \\<exists>e\\<in>\\<E> f'.\n          e \\<notin> \\<E>\n                      (snd (snd (splitFace g v w f\n                                  [countVertices g..<\n                                   countVertices g + n]))) \\<Longrightarrow>\n    \\<exists>e\\<in>\\<E> f'. e \\<notin> \\<E> g", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>f'\\<in>\\<F>\n                     (subdivFace'\n                       (snd (snd (splitFace g v w f\n                                   [countVertices g..<\n                                    countVertices g + n])))\n                       (fst (snd (splitFace g v w f\n                                   [countVertices g..<\n                                    countVertices g + n])))\n                       w 0 ovs) -\n                    (\\<F>\n                      (snd (snd (splitFace g v w f\n                                  [countVertices g..<\n                                   countVertices g + n]))) -\n                     {fst (snd (splitFace g v w f\n                                 [countVertices g..<\n                                  countVertices g + n]))}).\n       \\<exists>e\\<in>\\<E> f'.\n          e \\<notin> \\<E>\n                      (snd (snd (splitFace g v w f\n                                  [countVertices g..<\n                                   countVertices g + n]))) \\<Longrightarrow>\n    \\<exists>e\\<in>\\<E> f'. e \\<notin> \\<E> g", "assume A: \"\\<forall>f' \\<in> \\<F> ?g'' - (\\<F> ?g' - {?f\\<^sub>2}).\n                     \\<exists>e \\<in> \\<E> f'. e \\<notin> \\<E> ?g'\""], ["proof (state)\nthis:\n  \\<forall>f'\\<in>\\<F>\n                   (subdivFace'\n                     (snd (snd (splitFace g v w f\n                                 [countVertices g..<countVertices g + n])))\n                     (fst (snd (splitFace g v w f\n                                 [countVertices g..<countVertices g + n])))\n                     w 0 ovs) -\n                  (\\<F>\n                    (snd (snd (splitFace g v w f\n                                [countVertices g..<countVertices g + n]))) -\n                   {fst (snd (splitFace g v w f\n                               [countVertices g..<countVertices g + n]))}).\n     \\<exists>e\\<in>\\<E> f'.\n        e \\<notin> \\<E>\n                    (snd (snd (splitFace g v w f\n                                [countVertices g..<countVertices g + n])))\n\ngoal (1 subgoal):\n 1. \\<forall>f'\\<in>\\<F>\n                     (subdivFace'\n                       (snd (snd (splitFace g v w f\n                                   [countVertices g..<\n                                    countVertices g + n])))\n                       (fst (snd (splitFace g v w f\n                                   [countVertices g..<\n                                    countVertices g + n])))\n                       w 0 ovs) -\n                    (\\<F>\n                      (snd (snd (splitFace g v w f\n                                  [countVertices g..<\n                                   countVertices g + n]))) -\n                     {fst (snd (splitFace g v w f\n                                 [countVertices g..<\n                                  countVertices g + n]))}).\n       \\<exists>e\\<in>\\<E> f'.\n          e \\<notin> \\<E>\n                      (snd (snd (splitFace g v w f\n                                  [countVertices g..<\n                                   countVertices g + n]))) \\<Longrightarrow>\n    \\<exists>e\\<in>\\<E> f'. e \\<notin> \\<E> g", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>e\\<in>\\<E> f'. e \\<notin> \\<E> g", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> \\<exists>e\\<in>\\<E> f'. e \\<notin> \\<E> g\n 2. \\<not> ?P \\<Longrightarrow> \\<exists>e\\<in>\\<E> f'. e \\<notin> \\<E> g", "assume \"f' \\<in> {?f\\<^sub>1,?f\\<^sub>2}\""], ["proof (state)\nthis:\n  f' \\<in> {fst (splitFace g v w f [countVertices g..<countVertices g + n]),\n            fst (snd (splitFace g v w f\n                       [countVertices g..<countVertices g + n]))}\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> \\<exists>e\\<in>\\<E> f'. e \\<notin> \\<E> g\n 2. \\<not> ?P \\<Longrightarrow> \\<exists>e\\<in>\\<E> f'. e \\<notin> \\<E> g", "thus ?thesis"], ["proof (prove)\nusing this:\n  f' \\<in> {fst (splitFace g v w f [countVertices g..<countVertices g + n]),\n            fst (snd (splitFace g v w f\n                       [countVertices g..<countVertices g + n]))}\n\ngoal (1 subgoal):\n 1. \\<exists>e\\<in>\\<E> f'. e \\<notin> \\<E> g", "using 1 2"], ["proof (prove)\nusing this:\n  f' \\<in> {fst (splitFace g v w f [countVertices g..<countVertices g + n]),\n            fst (snd (splitFace g v w f\n                       [countVertices g..<countVertices g + n]))}\n  \\<exists>e\\<in>\\<E>\n                  (fst (splitFace g v w f\n                         [countVertices g..<countVertices g + n])).\n     e \\<notin> \\<E> g\n  \\<exists>e\\<in>\\<E>\n                  (fst (snd (splitFace g v w f\n                              [countVertices g..<countVertices g + n]))).\n     e \\<notin> \\<E> g\n\ngoal (1 subgoal):\n 1. \\<exists>e\\<in>\\<E> f'. e \\<notin> \\<E> g", "by blast"], ["proof (state)\nthis:\n  \\<exists>e\\<in>\\<E> f'. e \\<notin> \\<E> g\n\ngoal (1 subgoal):\n 1. f' \\<notin> {fst (splitFace g v w f\n                       [countVertices g..<countVertices g + n]),\n                 fst (snd (splitFace g v w f\n                            [countVertices g..<\n                             countVertices g + n]))} \\<Longrightarrow>\n    \\<exists>e\\<in>\\<E> f'. e \\<notin> \\<E> g", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. f' \\<notin> {fst (splitFace g v w f\n                       [countVertices g..<countVertices g + n]),\n                 fst (snd (splitFace g v w f\n                            [countVertices g..<\n                             countVertices g + n]))} \\<Longrightarrow>\n    \\<exists>e\\<in>\\<E> f'. e \\<notin> \\<E> g", "assume \"f' \\<notin> {?f\\<^sub>1,?f\\<^sub>2}\""], ["proof (state)\nthis:\n  f' \\<notin> {fst (splitFace g v w f\n                     [countVertices g..<countVertices g + n]),\n               fst (snd (splitFace g v w f\n                          [countVertices g..<countVertices g + n]))}\n\ngoal (1 subgoal):\n 1. f' \\<notin> {fst (splitFace g v w f\n                       [countVertices g..<countVertices g + n]),\n                 fst (snd (splitFace g v w f\n                            [countVertices g..<\n                             countVertices g + n]))} \\<Longrightarrow>\n    \\<exists>e\\<in>\\<E> f'. e \\<notin> \\<E> g", "hence \"\\<exists>e\\<in>\\<E> f'. e \\<notin> \\<E> ?g'\""], ["proof (prove)\nusing this:\n  f' \\<notin> {fst (splitFace g v w f\n                     [countVertices g..<countVertices g + n]),\n               fst (snd (splitFace g v w f\n                          [countVertices g..<countVertices g + n]))}\n\ngoal (1 subgoal):\n 1. \\<exists>e\\<in>\\<E> f'.\n       e \\<notin> \\<E>\n                   (snd (snd (splitFace g v w f\n                               [countVertices g..<countVertices g + n])))", "using A f'g'' f'ng Fg'"], ["proof (prove)\nusing this:\n  f' \\<notin> {fst (splitFace g v w f\n                     [countVertices g..<countVertices g + n]),\n               fst (snd (splitFace g v w f\n                          [countVertices g..<countVertices g + n]))}\n  \\<forall>f'\\<in>\\<F>\n                   (subdivFace'\n                     (snd (snd (splitFace g v w f\n                                 [countVertices g..<countVertices g + n])))\n                     (fst (snd (splitFace g v w f\n                                 [countVertices g..<countVertices g + n])))\n                     w 0 ovs) -\n                  (\\<F>\n                    (snd (snd (splitFace g v w f\n                                [countVertices g..<countVertices g + n]))) -\n                   {fst (snd (splitFace g v w f\n                               [countVertices g..<countVertices g + n]))}).\n     \\<exists>e\\<in>\\<E> f'.\n        e \\<notin> \\<E>\n                    (snd (snd (splitFace g v w f\n                                [countVertices g..<countVertices g + n])))\n  f' \\<in> \\<F>\n            (subdivFace'\n              (snd (snd (splitFace g v w f\n                          [countVertices g..<countVertices g + n])))\n              (fst (snd (splitFace g v w f\n                          [countVertices g..<countVertices g + n])))\n              w 0 ovs)\n  f' \\<notin> \\<F> g - {f}\n  \\<F>\n   (snd (snd (splitFace g v w f [countVertices g..<countVertices g + n]))) =\n  {fst (splitFace g v w f [countVertices g..<countVertices g + n]),\n   fst (snd (splitFace g v w f\n              [countVertices g..<countVertices g + n]))} \\<union>\n  (\\<F> g - {f})\n\ngoal (1 subgoal):\n 1. \\<exists>e\\<in>\\<E> f'.\n       e \\<notin> \\<E>\n                   (snd (snd (splitFace g v w f\n                               [countVertices g..<countVertices g + n])))", "by simp"], ["proof (state)\nthis:\n  \\<exists>e\\<in>\\<E> f'.\n     e \\<notin> \\<E>\n                 (snd (snd (splitFace g v w f\n                             [countVertices g..<countVertices g + n])))\n\ngoal (1 subgoal):\n 1. f' \\<notin> {fst (splitFace g v w f\n                       [countVertices g..<countVertices g + n]),\n                 fst (snd (splitFace g v w f\n                            [countVertices g..<\n                             countVertices g + n]))} \\<Longrightarrow>\n    \\<exists>e\\<in>\\<E> f'. e \\<notin> \\<E> g", "with splitFace_edges_incr[OF pre_fdg fdg]"], ["proof (chain)\npicking this:\n  \\<E> g\n  \\<subseteq> \\<E>\n               (snd (snd (splitFace g v w f\n                           [countVertices g..<countVertices g + n])))\n  \\<exists>e\\<in>\\<E> f'.\n     e \\<notin> \\<E>\n                 (snd (snd (splitFace g v w f\n                             [countVertices g..<countVertices g + n])))", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<E> g\n  \\<subseteq> \\<E>\n               (snd (snd (splitFace g v w f\n                           [countVertices g..<countVertices g + n])))\n  \\<exists>e\\<in>\\<E> f'.\n     e \\<notin> \\<E>\n                 (snd (snd (splitFace g v w f\n                             [countVertices g..<countVertices g + n])))\n\ngoal (1 subgoal):\n 1. \\<exists>e\\<in>\\<E> f'. e \\<notin> \\<E> g", "by blast"], ["proof (state)\nthis:\n  \\<exists>e\\<in>\\<E> f'. e \\<notin> \\<E> g\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>e\\<in>\\<E> f'. e \\<notin> \\<E> g\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>e\\<in>\\<E> f'. e \\<notin> \\<E> g\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>f'\\<in>\\<F>\n                   (subdivFace'\n                     (snd (snd (splitFace g v w f\n                                 [countVertices g..<countVertices g + n])))\n                     (fst (snd (splitFace g v w f\n                                 [countVertices g..<countVertices g + n])))\n                     w 0 ovs) -\n                  (\\<F> g - {f}).\n     \\<exists>e\\<in>\\<E> f'. e \\<notin> \\<E> g\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       ov = Some a \\<Longrightarrow>\n       subdivFace' g f v n (ov # ovs) = makeFaceFinal f g \\<or>\n       (\\<forall>f'\\<in>\\<F> (subdivFace' g f v n (ov # ovs)) -\n                        (\\<F> g - {f}).\n           \\<exists>e\\<in>\\<E> f'. e \\<notin> \\<E> g)", "}"], ["proof (state)\nthis:\n  f \\<bullet> v = w \\<longrightarrow> 0 < n \\<Longrightarrow>\n  \\<forall>f'\\<in>\\<F>\n                   (subdivFace'\n                     (snd (snd (splitFace g v w f\n                                 [countVertices g..<countVertices g + n])))\n                     (fst (snd (splitFace g v w f\n                                 [countVertices g..<countVertices g + n])))\n                     w 0 ovs) -\n                  (\\<F> g - {f}).\n     \\<exists>e\\<in>\\<E> f'. e \\<notin> \\<E> g\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       ov = Some a \\<Longrightarrow>\n       subdivFace' g f v n (ov # ovs) = makeFaceFinal f g \\<or>\n       (\\<forall>f'\\<in>\\<F> (subdivFace' g f v n (ov # ovs)) -\n                        (\\<F> g - {f}).\n           \\<exists>e\\<in>\\<E> f'. e \\<notin> \\<E> g)", "ultimately"], ["proof (chain)\npicking this:\n  \\<lbrakk>f \\<bullet> v = w; n = 0\\<rbrakk>\n  \\<Longrightarrow> subdivFace' g f w 0 ovs = makeFaceFinal f g \\<or>\n                    (\\<forall>f'\\<in>\\<F> (subdivFace' g f w 0 ovs) -\n                                     (\\<F> g - {f}).\n                        \\<exists>e\\<in>\\<E> f'. e \\<notin> \\<E> g)\n  f \\<bullet> v = w \\<longrightarrow> 0 < n \\<Longrightarrow>\n  \\<forall>f'\\<in>\\<F>\n                   (subdivFace'\n                     (snd (snd (splitFace g v w f\n                                 [countVertices g..<countVertices g + n])))\n                     (fst (snd (splitFace g v w f\n                                 [countVertices g..<countVertices g + n])))\n                     w 0 ovs) -\n                  (\\<F> g - {f}).\n     \\<exists>e\\<in>\\<E> f'. e \\<notin> \\<E> g", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>f \\<bullet> v = w; n = 0\\<rbrakk>\n  \\<Longrightarrow> subdivFace' g f w 0 ovs = makeFaceFinal f g \\<or>\n                    (\\<forall>f'\\<in>\\<F> (subdivFace' g f w 0 ovs) -\n                                     (\\<F> g - {f}).\n                        \\<exists>e\\<in>\\<E> f'. e \\<notin> \\<E> g)\n  f \\<bullet> v = w \\<longrightarrow> 0 < n \\<Longrightarrow>\n  \\<forall>f'\\<in>\\<F>\n                   (subdivFace'\n                     (snd (snd (splitFace g v w f\n                                 [countVertices g..<countVertices g + n])))\n                     (fst (snd (splitFace g v w f\n                                 [countVertices g..<countVertices g + n])))\n                     w 0 ovs) -\n                  (\\<F> g - {f}).\n     \\<exists>e\\<in>\\<E> f'. e \\<notin> \\<E> g\n\ngoal (1 subgoal):\n 1. subdivFace' g f v n (ov # ovs) = makeFaceFinal f g \\<or>\n    (\\<forall>f'\\<in>\\<F> (subdivFace' g f v n (ov # ovs)) - (\\<F> g - {f}).\n        \\<exists>e\\<in>\\<E> f'. e \\<notin> \\<E> g)", "using Some"], ["proof (prove)\nusing this:\n  \\<lbrakk>f \\<bullet> v = w; n = 0\\<rbrakk>\n  \\<Longrightarrow> subdivFace' g f w 0 ovs = makeFaceFinal f g \\<or>\n                    (\\<forall>f'\\<in>\\<F> (subdivFace' g f w 0 ovs) -\n                                     (\\<F> g - {f}).\n                        \\<exists>e\\<in>\\<E> f'. e \\<notin> \\<E> g)\n  f \\<bullet> v = w \\<longrightarrow> 0 < n \\<Longrightarrow>\n  \\<forall>f'\\<in>\\<F>\n                   (subdivFace'\n                     (snd (snd (splitFace g v w f\n                                 [countVertices g..<countVertices g + n])))\n                     (fst (snd (splitFace g v w f\n                                 [countVertices g..<countVertices g + n])))\n                     w 0 ovs) -\n                  (\\<F> g - {f}).\n     \\<exists>e\\<in>\\<E> f'. e \\<notin> \\<E> g\n  ov = Some w\n\ngoal (1 subgoal):\n 1. subdivFace' g f v n (ov # ovs) = makeFaceFinal f g \\<or>\n    (\\<forall>f'\\<in>\\<F> (subdivFace' g f v n (ov # ovs)) - (\\<F> g - {f}).\n        \\<exists>e\\<in>\\<E> f'. e \\<notin> \\<E> g)", "by(auto simp: split_def)"], ["proof (state)\nthis:\n  subdivFace' g f v n (ov # ovs) = makeFaceFinal f g \\<or>\n  (\\<forall>f'\\<in>\\<F> (subdivFace' g f v n (ov # ovs)) - (\\<F> g - {f}).\n      \\<exists>e\\<in>\\<E> f'. e \\<notin> \\<E> g)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  subdivFace' g f v n (ov # ovs) = makeFaceFinal f g \\<or>\n  (\\<forall>f'\\<in>\\<F> (subdivFace' g f v n (ov # ovs)) - (\\<F> g - {f}).\n      \\<exists>e\\<in>\\<E> f'. e \\<notin> \\<E> g)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma dist_edges_subdivFace':\n  \"pre_subdivFace' g f u v n ovs \\<Longrightarrow> minGraphProps g \\<Longrightarrow> f \\<in> \\<F> g \\<Longrightarrow>\n  subdivFace' g f v n ovs = makeFaceFinal f g \\<or>\n  (\\<forall>f' \\<in> \\<F> (subdivFace' g f v n ovs) - (\\<F> g - {f}). \\<E> f' \\<noteq> \\<E> f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>pre_subdivFace' g f u v n ovs; minGraphProps g;\n     f \\<in> \\<F> g\\<rbrakk>\n    \\<Longrightarrow> subdivFace' g f v n ovs = makeFaceFinal f g \\<or>\n                      (\\<forall>f'\\<in>\\<F> (subdivFace' g f v n ovs) -\n (\\<F> g - {f}).\n                          \\<E> f' \\<noteq> \\<E> f)", "apply(drule (2) new_edge_subdivFace')"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>minGraphProps g; f \\<in> \\<F> g;\n     subdivFace' g f v n ovs = makeFaceFinal f g \\<or>\n     (\\<forall>f'\\<in>\\<F> (subdivFace' g f v n ovs) - (\\<F> g - {f}).\n         \\<exists>e\\<in>\\<E> f'. e \\<notin> \\<E> g)\\<rbrakk>\n    \\<Longrightarrow> subdivFace' g f v n ovs = makeFaceFinal f g \\<or>\n                      (\\<forall>f'\\<in>\\<F> (subdivFace' g f v n ovs) -\n (\\<F> g - {f}).\n                          \\<E> f' \\<noteq> \\<E> f)", "apply(erule disjE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>minGraphProps g; f \\<in> \\<F> g;\n     subdivFace' g f v n ovs = makeFaceFinal f g\\<rbrakk>\n    \\<Longrightarrow> subdivFace' g f v n ovs = makeFaceFinal f g \\<or>\n                      (\\<forall>f'\\<in>\\<F> (subdivFace' g f v n ovs) -\n (\\<F> g - {f}).\n                          \\<E> f' \\<noteq> \\<E> f)\n 2. \\<lbrakk>minGraphProps g; f \\<in> \\<F> g;\n     \\<forall>f'\\<in>\\<F> (subdivFace' g f v n ovs) - (\\<F> g - {f}).\n        \\<exists>e\\<in>\\<E> f'. e \\<notin> \\<E> g\\<rbrakk>\n    \\<Longrightarrow> subdivFace' g f v n ovs = makeFaceFinal f g \\<or>\n                      (\\<forall>f'\\<in>\\<F> (subdivFace' g f v n ovs) -\n (\\<F> g - {f}).\n                          \\<E> f' \\<noteq> \\<E> f)", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>minGraphProps g; f \\<in> \\<F> g;\n     \\<forall>f'\\<in>\\<F> (subdivFace' g f v n ovs) - (\\<F> g - {f}).\n        \\<exists>e\\<in>\\<E> f'. e \\<notin> \\<E> g\\<rbrakk>\n    \\<Longrightarrow> subdivFace' g f v n ovs = makeFaceFinal f g \\<or>\n                      (\\<forall>f'\\<in>\\<F> (subdivFace' g f v n ovs) -\n (\\<F> g - {f}).\n                          \\<E> f' \\<noteq> \\<E> f)", "apply(rule disjI2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>minGraphProps g; f \\<in> \\<F> g;\n     \\<forall>f'\\<in>\\<F> (subdivFace' g f v n ovs) - (\\<F> g - {f}).\n        \\<exists>e\\<in>\\<E> f'. e \\<notin> \\<E> g\\<rbrakk>\n    \\<Longrightarrow> \\<forall>f'\\<in>\\<F> (subdivFace' g f v n ovs) -\n(\\<F> g - {f}).\n                         \\<E> f' \\<noteq> \\<E> f", "apply(clarify)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f'.\n       \\<lbrakk>minGraphProps g; f \\<in> \\<F> g;\n        \\<forall>f'\\<in>\\<F> (subdivFace' g f v n ovs) - (\\<F> g - {f}).\n           \\<exists>e\\<in>\\<E> f'. e \\<notin> \\<E> g;\n        f' \\<in> \\<F> (subdivFace' g f v n ovs); f' \\<notin> \\<F> g - {f};\n        \\<E> f' = \\<E> f\\<rbrakk>\n       \\<Longrightarrow> False", "apply(drule bspec)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>f'.\n       \\<lbrakk>minGraphProps g; f \\<in> \\<F> g;\n        f' \\<in> \\<F> (subdivFace' g f v n ovs); f' \\<notin> \\<F> g - {f};\n        \\<E> f' = \\<E> f\\<rbrakk>\n       \\<Longrightarrow> ?f'15 f'\n                         \\<in> \\<F> (subdivFace' g f v n ovs) -\n                               (\\<F> g - {f})\n 2. \\<And>f'.\n       \\<lbrakk>minGraphProps g; f \\<in> \\<F> g;\n        f' \\<in> \\<F> (subdivFace' g f v n ovs); f' \\<notin> \\<F> g - {f};\n        \\<E> f' = \\<E> f;\n        \\<exists>e\\<in>\\<E> (?f'15 f'). e \\<notin> \\<E> g\\<rbrakk>\n       \\<Longrightarrow> False", "apply fast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f'.\n       \\<lbrakk>minGraphProps g; f \\<in> \\<F> g;\n        f' \\<in> \\<F> (subdivFace' g f v n ovs); f' \\<notin> \\<F> g - {f};\n        \\<E> f' = \\<E> f; \\<exists>e\\<in>\\<E> f'. e \\<notin> \\<E> g\\<rbrakk>\n       \\<Longrightarrow> False", "apply(simp add:edges_graph_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f'.\n       \\<lbrakk>minGraphProps g; f \\<in> \\<F> g;\n        f' \\<in> \\<F> (subdivFace' g f v n ovs);\n        f' \\<in> \\<F> g \\<longrightarrow> f' = f; \\<E> f' = \\<E> f;\n        \\<exists>e\\<in>\\<E> f.\n           \\<forall>x\\<in>\\<F> g. e \\<notin> \\<E> x\\<rbrakk>\n       \\<Longrightarrow> False", "by(blast)"], ["", "lemma between_last: \"\\<lbrakk> distinct(vertices f); u \\<in> \\<V> f \\<rbrakk> \\<Longrightarrow>\n   between (vertices f) u (last (verticesFrom f u)) =\n   butlast(tl(verticesFrom f u))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>distinct (vertices f); u \\<in> \\<V> f\\<rbrakk>\n    \\<Longrightarrow> between (vertices f) u (last (verticesFrom f u)) =\n                      butlast (tl (verticesFrom f u))", "apply(drule split_list)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>distinct (vertices f);\n     \\<exists>ys zs. vertices f = ys @ u # zs\\<rbrakk>\n    \\<Longrightarrow> between (vertices f) u (last (verticesFrom f u)) =\n                      butlast (tl (verticesFrom f u))", "apply (fastforce dest: last_in_set\n  simp: between_def verticesFrom_Def split_def\n       last_append butlast_append fst_splitAt_last)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(* FIXME move condition to pre_addfacesnd? *)"], ["", "lemma final_subdivFace': \"\\<And>f u n g. minGraphProps g \\<Longrightarrow>\n  pre_subdivFace' g f r u n ovs \\<Longrightarrow> f \\<in> \\<F> g \\<Longrightarrow>\n  (ovs = [] \\<longrightarrow> n=0 \\<and> u = last(verticesFrom f r)) \\<Longrightarrow>\n  \\<exists>f' \\<in> set(finals(subdivFace' g f u n ovs)) - set(finals g).\n   (f\\<^bsup>-1\\<^esup> \\<bullet> r,r) \\<in> \\<E> f' \\<and>  |vertices f'| =\n      n + |ovs| + (if r=u then 1 else |between (vertices f) r u| + 2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f u n g.\n       \\<lbrakk>minGraphProps g; pre_subdivFace' g f r u n ovs;\n        f \\<in> \\<F> g;\n        ovs = [] \\<longrightarrow>\n        n = 0 \\<and> u = last (verticesFrom f r)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f'\\<in>set\n    (finals (subdivFace' g f u n ovs)) -\n   set (finals g).\n                            (f\\<^bsup>-1\\<^esup> \\<bullet> r, r)\n                            \\<in> \\<E> f' \\<and>\n                            |vertices f'| =\n                            n + |ovs| +\n                            (if r = u then 1\n                             else |between (vertices f) r u| + 2)", "proof (induct ovs)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>f u n g.\n       \\<lbrakk>minGraphProps g; pre_subdivFace' g f r u n [];\n        f \\<in> \\<F> g;\n        [] = [] \\<longrightarrow>\n        n = 0 \\<and> u = last (verticesFrom f r)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f'\\<in>set\n    (finals (subdivFace' g f u n [])) -\n   set (finals g).\n                            (f\\<^bsup>-1\\<^esup> \\<bullet> r, r)\n                            \\<in> \\<E> f' \\<and>\n                            |vertices f'| =\n                            n + |[]| +\n                            (if r = u then 1\n                             else |between (vertices f) r u| + 2)\n 2. \\<And>a ovs f u n g.\n       \\<lbrakk>\\<And>f u n g.\n                   \\<lbrakk>minGraphProps g; pre_subdivFace' g f r u n ovs;\n                    f \\<in> \\<F> g;\n                    ovs = [] \\<longrightarrow>\n                    n = 0 \\<and> u = last (verticesFrom f r)\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>f'\n        \\<in>set (finals (subdivFace' g f u n ovs)) - set (finals g).\n  (f\\<^bsup>-1\\<^esup> \\<bullet> r, r) \\<in> \\<E> f' \\<and>\n  |vertices f'| =\n  n + |ovs| + (if r = u then 1 else |between (vertices f) r u| + 2);\n        minGraphProps g; pre_subdivFace' g f r u n (a # ovs);\n        f \\<in> \\<F> g;\n        a # ovs = [] \\<longrightarrow>\n        n = 0 \\<and> u = last (verticesFrom f r)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f'\\<in>set\n    (finals (subdivFace' g f u n (a # ovs))) -\n   set (finals g).\n                            (f\\<^bsup>-1\\<^esup> \\<bullet> r, r)\n                            \\<in> \\<E> f' \\<and>\n                            |vertices f'| =\n                            n + |a # ovs| +\n                            (if r = u then 1\n                             else |between (vertices f) r u| + 2)", "case Nil"], ["proof (state)\nthis:\n  minGraphProps g\n  pre_subdivFace' g f r u n []\n  f \\<in> \\<F> g\n  [] = [] \\<longrightarrow> n = 0 \\<and> u = last (verticesFrom f r)\n\ngoal (2 subgoals):\n 1. \\<And>f u n g.\n       \\<lbrakk>minGraphProps g; pre_subdivFace' g f r u n [];\n        f \\<in> \\<F> g;\n        [] = [] \\<longrightarrow>\n        n = 0 \\<and> u = last (verticesFrom f r)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f'\\<in>set\n    (finals (subdivFace' g f u n [])) -\n   set (finals g).\n                            (f\\<^bsup>-1\\<^esup> \\<bullet> r, r)\n                            \\<in> \\<E> f' \\<and>\n                            |vertices f'| =\n                            n + |[]| +\n                            (if r = u then 1\n                             else |between (vertices f) r u| + 2)\n 2. \\<And>a ovs f u n g.\n       \\<lbrakk>\\<And>f u n g.\n                   \\<lbrakk>minGraphProps g; pre_subdivFace' g f r u n ovs;\n                    f \\<in> \\<F> g;\n                    ovs = [] \\<longrightarrow>\n                    n = 0 \\<and> u = last (verticesFrom f r)\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>f'\n        \\<in>set (finals (subdivFace' g f u n ovs)) - set (finals g).\n  (f\\<^bsup>-1\\<^esup> \\<bullet> r, r) \\<in> \\<E> f' \\<and>\n  |vertices f'| =\n  n + |ovs| + (if r = u then 1 else |between (vertices f) r u| + 2);\n        minGraphProps g; pre_subdivFace' g f r u n (a # ovs);\n        f \\<in> \\<F> g;\n        a # ovs = [] \\<longrightarrow>\n        n = 0 \\<and> u = last (verticesFrom f r)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f'\\<in>set\n    (finals (subdivFace' g f u n (a # ovs))) -\n   set (finals g).\n                            (f\\<^bsup>-1\\<^esup> \\<bullet> r, r)\n                            \\<in> \\<E> f' \\<and>\n                            |vertices f'| =\n                            n + |a # ovs| +\n                            (if r = u then 1\n                             else |between (vertices f) r u| + 2)", "show ?case (is \"\\<exists>f' \\<in> ?F. ?P f'\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>f'\\<in>set (finals (subdivFace' g f u n [])) - set (finals g).\n       (f\\<^bsup>-1\\<^esup> \\<bullet> r, r) \\<in> \\<E> f' \\<and>\n       |vertices f'| =\n       n + |[]| + (if r = u then 1 else |between (vertices f) r u| + 2)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. (f\\<^bsup>-1\\<^esup> \\<bullet> r, r) \\<in> \\<E> ?f' \\<and>\n    |vertices ?f'| =\n    n + |[]| + (if r = u then 1 else |between (vertices f) r u| + 2)\n 2. ?f' \\<in> set (finals (subdivFace' g f u n [])) - set (finals g)", "show \"?P (setFinal f)\" (is \"?A \\<and> ?B\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (f\\<^bsup>-1\\<^esup> \\<bullet> r, r) \\<in> \\<E> (setFinal f) \\<and>\n    |vertices (setFinal f)| =\n    n + |[]| + (if r = u then 1 else |between (vertices f) r u| + 2)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. (f\\<^bsup>-1\\<^esup> \\<bullet> r, r) \\<in> \\<E> (setFinal f)\n 2. |vertices (setFinal f)| =\n    n + |[]| + (if r = u then 1 else |between (vertices f) r u| + 2)", "show \"?A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (f\\<^bsup>-1\\<^esup> \\<bullet> r, r) \\<in> \\<E> (setFinal f)", "using Nil"], ["proof (prove)\nusing this:\n  minGraphProps g\n  pre_subdivFace' g f r u n []\n  f \\<in> \\<F> g\n  [] = [] \\<longrightarrow> n = 0 \\<and> u = last (verticesFrom f r)\n\ngoal (1 subgoal):\n 1. (f\\<^bsup>-1\\<^esup> \\<bullet> r, r) \\<in> \\<E> (setFinal f)", "by(simp add:pre_subdivFace'_def prevVertex_in_edges\n          del:is_nextElem_edges_eq)"], ["proof (state)\nthis:\n  (f\\<^bsup>-1\\<^esup> \\<bullet> r, r) \\<in> \\<E> (setFinal f)\n\ngoal (1 subgoal):\n 1. |vertices (setFinal f)| =\n    n + |[]| + (if r = u then 1 else |between (vertices f) r u| + 2)", "show  \"?B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. |vertices (setFinal f)| =\n    n + |[]| + (if r = u then 1 else |between (vertices f) r u| + 2)", "using Nil mgp_vertices3[OF Nil(1,3)]"], ["proof (prove)\nusing this:\n  minGraphProps g\n  pre_subdivFace' g f r u n []\n  f \\<in> \\<F> g\n  [] = [] \\<longrightarrow> n = 0 \\<and> u = last (verticesFrom f r)\n  3 \\<le> |vertices f|\n\ngoal (1 subgoal):\n 1. |vertices (setFinal f)| =\n    n + |[]| + (if r = u then 1 else |between (vertices f) r u| + 2)", "by(simp add:  setFinal_def between_last pre_subdivFace'_def)"], ["proof (state)\nthis:\n  |vertices (setFinal f)| =\n  n + |[]| + (if r = u then 1 else |between (vertices f) r u| + 2)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (f\\<^bsup>-1\\<^esup> \\<bullet> r, r) \\<in> \\<E> (setFinal f) \\<and>\n  |vertices (setFinal f)| =\n  n + |[]| + (if r = u then 1 else |between (vertices f) r u| + 2)\n\ngoal (1 subgoal):\n 1. setFinal f \\<in> set (finals (subdivFace' g f u n [])) - set (finals g)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. setFinal f \\<in> set (finals (subdivFace' g f u n [])) - set (finals g)", "show \"setFinal f \\<in> ?F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. setFinal f \\<in> set (finals (subdivFace' g f u n [])) - set (finals g)", "using Nil"], ["proof (prove)\nusing this:\n  minGraphProps g\n  pre_subdivFace' g f r u n []\n  f \\<in> \\<F> g\n  [] = [] \\<longrightarrow> n = 0 \\<and> u = last (verticesFrom f r)\n\ngoal (1 subgoal):\n 1. setFinal f \\<in> set (finals (subdivFace' g f u n [])) - set (finals g)", "by(simp add:pre_subdivFace'_def setFinal_notin_finals minGraphProps11')"], ["proof (state)\nthis:\n  setFinal f \\<in> set (finals (subdivFace' g f u n [])) - set (finals g)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>f'\\<in>set (finals (subdivFace' g f u n [])) - set (finals g).\n     (f\\<^bsup>-1\\<^esup> \\<bullet> r, r) \\<in> \\<E> f' \\<and>\n     |vertices f'| =\n     n + |[]| + (if r = u then 1 else |between (vertices f) r u| + 2)\n\ngoal (1 subgoal):\n 1. \\<And>a ovs f u n g.\n       \\<lbrakk>\\<And>f u n g.\n                   \\<lbrakk>minGraphProps g; pre_subdivFace' g f r u n ovs;\n                    f \\<in> \\<F> g;\n                    ovs = [] \\<longrightarrow>\n                    n = 0 \\<and> u = last (verticesFrom f r)\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>f'\n        \\<in>set (finals (subdivFace' g f u n ovs)) - set (finals g).\n  (f\\<^bsup>-1\\<^esup> \\<bullet> r, r) \\<in> \\<E> f' \\<and>\n  |vertices f'| =\n  n + |ovs| + (if r = u then 1 else |between (vertices f) r u| + 2);\n        minGraphProps g; pre_subdivFace' g f r u n (a # ovs);\n        f \\<in> \\<F> g;\n        a # ovs = [] \\<longrightarrow>\n        n = 0 \\<and> u = last (verticesFrom f r)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f'\\<in>set\n    (finals (subdivFace' g f u n (a # ovs))) -\n   set (finals g).\n                            (f\\<^bsup>-1\\<^esup> \\<bullet> r, r)\n                            \\<in> \\<E> f' \\<and>\n                            |vertices f'| =\n                            n + |a # ovs| +\n                            (if r = u then 1\n                             else |between (vertices f) r u| + 2)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a ovs f u n g.\n       \\<lbrakk>\\<And>f u n g.\n                   \\<lbrakk>minGraphProps g; pre_subdivFace' g f r u n ovs;\n                    f \\<in> \\<F> g;\n                    ovs = [] \\<longrightarrow>\n                    n = 0 \\<and> u = last (verticesFrom f r)\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>f'\n        \\<in>set (finals (subdivFace' g f u n ovs)) - set (finals g).\n  (f\\<^bsup>-1\\<^esup> \\<bullet> r, r) \\<in> \\<E> f' \\<and>\n  |vertices f'| =\n  n + |ovs| + (if r = u then 1 else |between (vertices f) r u| + 2);\n        minGraphProps g; pre_subdivFace' g f r u n (a # ovs);\n        f \\<in> \\<F> g;\n        a # ovs = [] \\<longrightarrow>\n        n = 0 \\<and> u = last (verticesFrom f r)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f'\\<in>set\n    (finals (subdivFace' g f u n (a # ovs))) -\n   set (finals g).\n                            (f\\<^bsup>-1\\<^esup> \\<bullet> r, r)\n                            \\<in> \\<E> f' \\<and>\n                            |vertices f'| =\n                            n + |a # ovs| +\n                            (if r = u then 1\n                             else |between (vertices f) r u| + 2)", "case (Cons ov ovs)"], ["proof (state)\nthis:\n  \\<lbrakk>minGraphProps ?g; pre_subdivFace' ?g ?f r ?u ?n ovs;\n   ?f \\<in> \\<F> ?g;\n   ovs = [] \\<longrightarrow>\n   ?n = 0 \\<and> ?u = last (verticesFrom ?f r)\\<rbrakk>\n  \\<Longrightarrow> \\<exists>f'\\<in>set (finals\n    (subdivFace' ?g ?f ?u ?n ovs)) -\n                                    set (finals ?g).\n                       (?f\\<^bsup>-1\\<^esup> \\<bullet> r, r)\n                       \\<in> \\<E> f' \\<and>\n                       |vertices f'| =\n                       ?n + |ovs| +\n                       (if r = ?u then 1\n                        else |between (vertices ?f) r ?u| + 2)\n  minGraphProps g\n  pre_subdivFace' g f r u n (ov # ovs)\n  f \\<in> \\<F> g\n  ov # ovs = [] \\<longrightarrow> n = 0 \\<and> u = last (verticesFrom f r)\n\ngoal (1 subgoal):\n 1. \\<And>a ovs f u n g.\n       \\<lbrakk>\\<And>f u n g.\n                   \\<lbrakk>minGraphProps g; pre_subdivFace' g f r u n ovs;\n                    f \\<in> \\<F> g;\n                    ovs = [] \\<longrightarrow>\n                    n = 0 \\<and> u = last (verticesFrom f r)\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>f'\n        \\<in>set (finals (subdivFace' g f u n ovs)) - set (finals g).\n  (f\\<^bsup>-1\\<^esup> \\<bullet> r, r) \\<in> \\<E> f' \\<and>\n  |vertices f'| =\n  n + |ovs| + (if r = u then 1 else |between (vertices f) r u| + 2);\n        minGraphProps g; pre_subdivFace' g f r u n (a # ovs);\n        f \\<in> \\<F> g;\n        a # ovs = [] \\<longrightarrow>\n        n = 0 \\<and> u = last (verticesFrom f r)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f'\\<in>set\n    (finals (subdivFace' g f u n (a # ovs))) -\n   set (finals g).\n                            (f\\<^bsup>-1\\<^esup> \\<bullet> r, r)\n                            \\<in> \\<E> f' \\<and>\n                            |vertices f'| =\n                            n + |a # ovs| +\n                            (if r = u then 1\n                             else |between (vertices f) r u| + 2)", "note IH = Cons(1) and mgp = Cons(2) and pre = Cons(3) and fg = Cons(4)\n    and mt = Cons(5)"], ["proof (state)\nthis:\n  \\<lbrakk>minGraphProps ?g; pre_subdivFace' ?g ?f r ?u ?n ovs;\n   ?f \\<in> \\<F> ?g;\n   ovs = [] \\<longrightarrow>\n   ?n = 0 \\<and> ?u = last (verticesFrom ?f r)\\<rbrakk>\n  \\<Longrightarrow> \\<exists>f'\\<in>set (finals\n    (subdivFace' ?g ?f ?u ?n ovs)) -\n                                    set (finals ?g).\n                       (?f\\<^bsup>-1\\<^esup> \\<bullet> r, r)\n                       \\<in> \\<E> f' \\<and>\n                       |vertices f'| =\n                       ?n + |ovs| +\n                       (if r = ?u then 1\n                        else |between (vertices ?f) r ?u| + 2)\n  minGraphProps g\n  pre_subdivFace' g f r u n (ov # ovs)\n  f \\<in> \\<F> g\n  ov # ovs = [] \\<longrightarrow> n = 0 \\<and> u = last (verticesFrom f r)\n\ngoal (1 subgoal):\n 1. \\<And>a ovs f u n g.\n       \\<lbrakk>\\<And>f u n g.\n                   \\<lbrakk>minGraphProps g; pre_subdivFace' g f r u n ovs;\n                    f \\<in> \\<F> g;\n                    ovs = [] \\<longrightarrow>\n                    n = 0 \\<and> u = last (verticesFrom f r)\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>f'\n        \\<in>set (finals (subdivFace' g f u n ovs)) - set (finals g).\n  (f\\<^bsup>-1\\<^esup> \\<bullet> r, r) \\<in> \\<E> f' \\<and>\n  |vertices f'| =\n  n + |ovs| + (if r = u then 1 else |between (vertices f) r u| + 2);\n        minGraphProps g; pre_subdivFace' g f r u n (a # ovs);\n        f \\<in> \\<F> g;\n        a # ovs = [] \\<longrightarrow>\n        n = 0 \\<and> u = last (verticesFrom f r)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f'\\<in>set\n    (finals (subdivFace' g f u n (a # ovs))) -\n   set (finals g).\n                            (f\\<^bsup>-1\\<^esup> \\<bullet> r, r)\n                            \\<in> \\<E> f' \\<and>\n                            |vertices f'| =\n                            n + |a # ovs| +\n                            (if r = u then 1\n                             else |between (vertices f) r u| + 2)", "have \"r \\<in> \\<V> f\" and \"u \\<in> \\<V> f\" and distf: \"distinct (vertices f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r \\<in> \\<V> f &&& u \\<in> \\<V> f &&& distinct (vertices f)", "using pre"], ["proof (prove)\nusing this:\n  pre_subdivFace' g f r u n (ov # ovs)\n\ngoal (1 subgoal):\n 1. r \\<in> \\<V> f &&& u \\<in> \\<V> f &&& distinct (vertices f)", "by(simp add:pre_subdivFace'_def)+"], ["proof (state)\nthis:\n  r \\<in> \\<V> f\n  u \\<in> \\<V> f\n  distinct (vertices f)\n\ngoal (1 subgoal):\n 1. \\<And>a ovs f u n g.\n       \\<lbrakk>\\<And>f u n g.\n                   \\<lbrakk>minGraphProps g; pre_subdivFace' g f r u n ovs;\n                    f \\<in> \\<F> g;\n                    ovs = [] \\<longrightarrow>\n                    n = 0 \\<and> u = last (verticesFrom f r)\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>f'\n        \\<in>set (finals (subdivFace' g f u n ovs)) - set (finals g).\n  (f\\<^bsup>-1\\<^esup> \\<bullet> r, r) \\<in> \\<E> f' \\<and>\n  |vertices f'| =\n  n + |ovs| + (if r = u then 1 else |between (vertices f) r u| + 2);\n        minGraphProps g; pre_subdivFace' g f r u n (a # ovs);\n        f \\<in> \\<F> g;\n        a # ovs = [] \\<longrightarrow>\n        n = 0 \\<and> u = last (verticesFrom f r)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f'\\<in>set\n    (finals (subdivFace' g f u n (a # ovs))) -\n   set (finals g).\n                            (f\\<^bsup>-1\\<^esup> \\<bullet> r, r)\n                            \\<in> \\<E> f' \\<and>\n                            |vertices f'| =\n                            n + |a # ovs| +\n                            (if r = u then 1\n                             else |between (vertices f) r u| + 2)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>f'\\<in>set (finals (subdivFace' g f u n (ov # ovs))) -\n                    set (finals g).\n       (f\\<^bsup>-1\\<^esup> \\<bullet> r, r) \\<in> \\<E> f' \\<and>\n       |vertices f'| =\n       n + |ov # ovs| +\n       (if r = u then 1 else |between (vertices f) r u| + 2)", "proof (cases ov)"], ["proof (state)\ngoal (2 subgoals):\n 1. ov = None \\<Longrightarrow>\n    \\<exists>f'\\<in>set (finals (subdivFace' g f u n (ov # ovs))) -\n                    set (finals g).\n       (f\\<^bsup>-1\\<^esup> \\<bullet> r, r) \\<in> \\<E> f' \\<and>\n       |vertices f'| =\n       n + |ov # ovs| +\n       (if r = u then 1 else |between (vertices f) r u| + 2)\n 2. \\<And>a.\n       ov = Some a \\<Longrightarrow>\n       \\<exists>f'\\<in>set (finals (subdivFace' g f u n (ov # ovs))) -\n                       set (finals g).\n          (f\\<^bsup>-1\\<^esup> \\<bullet> r, r) \\<in> \\<E> f' \\<and>\n          |vertices f'| =\n          n + |ov # ovs| +\n          (if r = u then 1 else |between (vertices f) r u| + 2)", "case None"], ["proof (state)\nthis:\n  ov = None\n\ngoal (2 subgoals):\n 1. ov = None \\<Longrightarrow>\n    \\<exists>f'\\<in>set (finals (subdivFace' g f u n (ov # ovs))) -\n                    set (finals g).\n       (f\\<^bsup>-1\\<^esup> \\<bullet> r, r) \\<in> \\<E> f' \\<and>\n       |vertices f'| =\n       n + |ov # ovs| +\n       (if r = u then 1 else |between (vertices f) r u| + 2)\n 2. \\<And>a.\n       ov = Some a \\<Longrightarrow>\n       \\<exists>f'\\<in>set (finals (subdivFace' g f u n (ov # ovs))) -\n                       set (finals g).\n          (f\\<^bsup>-1\\<^esup> \\<bullet> r, r) \\<in> \\<E> f' \\<and>\n          |vertices f'| =\n          n + |ov # ovs| +\n          (if r = u then 1 else |between (vertices f) r u| + 2)", "have pre': \"pre_subdivFace' g f r u (Suc n) ovs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pre_subdivFace' g f r u (Suc n) ovs", "using None pre"], ["proof (prove)\nusing this:\n  ov = None\n  pre_subdivFace' g f r u n (ov # ovs)\n\ngoal (1 subgoal):\n 1. pre_subdivFace' g f r u (Suc n) ovs", "by (simp add: pre_subdivFace'_None)"], ["proof (state)\nthis:\n  pre_subdivFace' g f r u (Suc n) ovs\n\ngoal (2 subgoals):\n 1. ov = None \\<Longrightarrow>\n    \\<exists>f'\\<in>set (finals (subdivFace' g f u n (ov # ovs))) -\n                    set (finals g).\n       (f\\<^bsup>-1\\<^esup> \\<bullet> r, r) \\<in> \\<E> f' \\<and>\n       |vertices f'| =\n       n + |ov # ovs| +\n       (if r = u then 1 else |between (vertices f) r u| + 2)\n 2. \\<And>a.\n       ov = Some a \\<Longrightarrow>\n       \\<exists>f'\\<in>set (finals (subdivFace' g f u n (ov # ovs))) -\n                       set (finals g).\n          (f\\<^bsup>-1\\<^esup> \\<bullet> r, r) \\<in> \\<E> f' \\<and>\n          |vertices f'| =\n          n + |ov # ovs| +\n          (if r = u then 1 else |between (vertices f) r u| + 2)", "have \"ovs \\<noteq> []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ovs \\<noteq> []", "using pre None"], ["proof (prove)\nusing this:\n  pre_subdivFace' g f r u n (ov # ovs)\n  ov = None\n\ngoal (1 subgoal):\n 1. ovs \\<noteq> []", "by (auto simp: pre_subdivFace'_def)"], ["proof (state)\nthis:\n  ovs \\<noteq> []\n\ngoal (2 subgoals):\n 1. ov = None \\<Longrightarrow>\n    \\<exists>f'\\<in>set (finals (subdivFace' g f u n (ov # ovs))) -\n                    set (finals g).\n       (f\\<^bsup>-1\\<^esup> \\<bullet> r, r) \\<in> \\<E> f' \\<and>\n       |vertices f'| =\n       n + |ov # ovs| +\n       (if r = u then 1 else |between (vertices f) r u| + 2)\n 2. \\<And>a.\n       ov = Some a \\<Longrightarrow>\n       \\<exists>f'\\<in>set (finals (subdivFace' g f u n (ov # ovs))) -\n                       set (finals g).\n          (f\\<^bsup>-1\\<^esup> \\<bullet> r, r) \\<in> \\<E> f' \\<and>\n          |vertices f'| =\n          n + |ov # ovs| +\n          (if r = u then 1 else |between (vertices f) r u| + 2)", "thus ?thesis"], ["proof (prove)\nusing this:\n  ovs \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<exists>f'\\<in>set (finals (subdivFace' g f u n (ov # ovs))) -\n                    set (finals g).\n       (f\\<^bsup>-1\\<^esup> \\<bullet> r, r) \\<in> \\<E> f' \\<and>\n       |vertices f'| =\n       n + |ov # ovs| +\n       (if r = u then 1 else |between (vertices f) r u| + 2)", "using None IH[OF mgp pre' fg]"], ["proof (prove)\nusing this:\n  ovs \\<noteq> []\n  ov = None\n  ovs = [] \\<longrightarrow>\n  Suc n = 0 \\<and> u = last (verticesFrom f r) \\<Longrightarrow>\n  \\<exists>f'\\<in>set (finals (subdivFace' g f u (Suc n) ovs)) -\n                  set (finals g).\n     (f\\<^bsup>-1\\<^esup> \\<bullet> r, r) \\<in> \\<E> f' \\<and>\n     |vertices f'| =\n     Suc n + |ovs| + (if r = u then 1 else |between (vertices f) r u| + 2)\n\ngoal (1 subgoal):\n 1. \\<exists>f'\\<in>set (finals (subdivFace' g f u n (ov # ovs))) -\n                    set (finals g).\n       (f\\<^bsup>-1\\<^esup> \\<bullet> r, r) \\<in> \\<E> f' \\<and>\n       |vertices f'| =\n       n + |ov # ovs| +\n       (if r = u then 1 else |between (vertices f) r u| + 2)", "by simp"], ["proof (state)\nthis:\n  \\<exists>f'\\<in>set (finals (subdivFace' g f u n (ov # ovs))) -\n                  set (finals g).\n     (f\\<^bsup>-1\\<^esup> \\<bullet> r, r) \\<in> \\<E> f' \\<and>\n     |vertices f'| =\n     n + |ov # ovs| + (if r = u then 1 else |between (vertices f) r u| + 2)\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       ov = Some a \\<Longrightarrow>\n       \\<exists>f'\\<in>set (finals (subdivFace' g f u n (ov # ovs))) -\n                       set (finals g).\n          (f\\<^bsup>-1\\<^esup> \\<bullet> r, r) \\<in> \\<E> f' \\<and>\n          |vertices f'| =\n          n + |ov # ovs| +\n          (if r = u then 1 else |between (vertices f) r u| + 2)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a.\n       ov = Some a \\<Longrightarrow>\n       \\<exists>f'\\<in>set (finals (subdivFace' g f u n (ov # ovs))) -\n                       set (finals g).\n          (f\\<^bsup>-1\\<^esup> \\<bullet> r, r) \\<in> \\<E> f' \\<and>\n          |vertices f'| =\n          n + |ov # ovs| +\n          (if r = u then 1 else |between (vertices f) r u| + 2)", "case (Some v)"], ["proof (state)\nthis:\n  ov = Some v\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       ov = Some a \\<Longrightarrow>\n       \\<exists>f'\\<in>set (finals (subdivFace' g f u n (ov # ovs))) -\n                       set (finals g).\n          (f\\<^bsup>-1\\<^esup> \\<bullet> r, r) \\<in> \\<E> f' \\<and>\n          |vertices f'| =\n          n + |ov # ovs| +\n          (if r = u then 1 else |between (vertices f) r u| + 2)", "note pre = pre[simplified Some]"], ["proof (state)\nthis:\n  pre_subdivFace' g f r u n (Some v # ovs)\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       ov = Some a \\<Longrightarrow>\n       \\<exists>f'\\<in>set (finals (subdivFace' g f u n (ov # ovs))) -\n                       set (finals g).\n          (f\\<^bsup>-1\\<^esup> \\<bullet> r, r) \\<in> \\<E> f' \\<and>\n          |vertices f'| =\n          n + |ov # ovs| +\n          (if r = u then 1 else |between (vertices f) r u| + 2)", "have ruv: \"before (verticesFrom f r) u v\" and \"r \\<noteq> v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. before (verticesFrom f r) u v &&& r \\<noteq> v", "using pre"], ["proof (prove)\nusing this:\n  pre_subdivFace' g f r u n (Some v # ovs)\n\ngoal (1 subgoal):\n 1. before (verticesFrom f r) u v &&& r \\<noteq> v", "by(simp add:pre_subdivFace'_def)+"], ["proof (state)\nthis:\n  before (verticesFrom f r) u v\n  r \\<noteq> v\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       ov = Some a \\<Longrightarrow>\n       \\<exists>f'\\<in>set (finals (subdivFace' g f u n (ov # ovs))) -\n                       set (finals g).\n          (f\\<^bsup>-1\\<^esup> \\<bullet> r, r) \\<in> \\<E> f' \\<and>\n          |vertices f'| =\n          n + |ov # ovs| +\n          (if r = u then 1 else |between (vertices f) r u| + 2)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>f'\\<in>set (finals (subdivFace' g f u n (ov # ovs))) -\n                    set (finals g).\n       (f\\<^bsup>-1\\<^esup> \\<bullet> r, r) \\<in> \\<E> f' \\<and>\n       |vertices f'| =\n       n + |ov # ovs| +\n       (if r = u then 1 else |between (vertices f) r u| + 2)", "proof (cases \"f \\<bullet> u = v \\<and> n = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. f \\<bullet> u = v \\<and> n = 0 \\<Longrightarrow>\n    \\<exists>f'\\<in>set (finals (subdivFace' g f u n (ov # ovs))) -\n                    set (finals g).\n       (f\\<^bsup>-1\\<^esup> \\<bullet> r, r) \\<in> \\<E> f' \\<and>\n       |vertices f'| =\n       n + |ov # ovs| +\n       (if r = u then 1 else |between (vertices f) r u| + 2)\n 2. \\<not> (f \\<bullet> u = v \\<and> n = 0) \\<Longrightarrow>\n    \\<exists>f'\\<in>set (finals (subdivFace' g f u n (ov # ovs))) -\n                    set (finals g).\n       (f\\<^bsup>-1\\<^esup> \\<bullet> r, r) \\<in> \\<E> f' \\<and>\n       |vertices f'| =\n       n + |ov # ovs| +\n       (if r = u then 1 else |between (vertices f) r u| + 2)", "case True"], ["proof (state)\nthis:\n  f \\<bullet> u = v \\<and> n = 0\n\ngoal (2 subgoals):\n 1. f \\<bullet> u = v \\<and> n = 0 \\<Longrightarrow>\n    \\<exists>f'\\<in>set (finals (subdivFace' g f u n (ov # ovs))) -\n                    set (finals g).\n       (f\\<^bsup>-1\\<^esup> \\<bullet> r, r) \\<in> \\<E> f' \\<and>\n       |vertices f'| =\n       n + |ov # ovs| +\n       (if r = u then 1 else |between (vertices f) r u| + 2)\n 2. \\<not> (f \\<bullet> u = v \\<and> n = 0) \\<Longrightarrow>\n    \\<exists>f'\\<in>set (finals (subdivFace' g f u n (ov # ovs))) -\n                    set (finals g).\n       (f\\<^bsup>-1\\<^esup> \\<bullet> r, r) \\<in> \\<E> f' \\<and>\n       |vertices f'| =\n       n + |ov # ovs| +\n       (if r = u then 1 else |between (vertices f) r u| + 2)", "have pre': \"pre_subdivFace' g f r v 0 ovs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pre_subdivFace' g f r v 0 ovs", "using pre True"], ["proof (prove)\nusing this:\n  pre_subdivFace' g f r u n (Some v # ovs)\n  f \\<bullet> u = v \\<and> n = 0\n\ngoal (1 subgoal):\n 1. pre_subdivFace' g f r v 0 ovs", "using [[simp_depth_limit = 5]]"], ["proof (prove)\nusing this:\n  pre_subdivFace' g f r u n (Some v # ovs)\n  f \\<bullet> u = v \\<and> n = 0\n\ngoal (1 subgoal):\n 1. pre_subdivFace' g f r v 0 ovs", "by (simp add: pre_subdivFace'_Some2)"], ["proof (state)\nthis:\n  pre_subdivFace' g f r v 0 ovs\n\ngoal (2 subgoals):\n 1. f \\<bullet> u = v \\<and> n = 0 \\<Longrightarrow>\n    \\<exists>f'\\<in>set (finals (subdivFace' g f u n (ov # ovs))) -\n                    set (finals g).\n       (f\\<^bsup>-1\\<^esup> \\<bullet> r, r) \\<in> \\<E> f' \\<and>\n       |vertices f'| =\n       n + |ov # ovs| +\n       (if r = u then 1 else |between (vertices f) r u| + 2)\n 2. \\<not> (f \\<bullet> u = v \\<and> n = 0) \\<Longrightarrow>\n    \\<exists>f'\\<in>set (finals (subdivFace' g f u n (ov # ovs))) -\n                    set (finals g).\n       (f\\<^bsup>-1\\<^esup> \\<bullet> r, r) \\<in> \\<E> f' \\<and>\n       |vertices f'| =\n       n + |ov # ovs| +\n       (if r = u then 1 else |between (vertices f) r u| + 2)", "have mt: \"ovs = [] \\<longrightarrow> 0 = 0 \\<and> v = last (verticesFrom f r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ovs = [] \\<longrightarrow>\n    (0::'a) = (0::'a) \\<and> v = last (verticesFrom f r)", "using pre"], ["proof (prove)\nusing this:\n  pre_subdivFace' g f r u n (Some v # ovs)\n\ngoal (1 subgoal):\n 1. ovs = [] \\<longrightarrow>\n    (0::'a) = (0::'a) \\<and> v = last (verticesFrom f r)", "by(clarsimp simp:pre_subdivFace'_def)"], ["proof (state)\nthis:\n  ovs = [] \\<longrightarrow>\n  (0::?'a1) = (0::?'a1) \\<and> v = last (verticesFrom f r)\n\ngoal (2 subgoals):\n 1. f \\<bullet> u = v \\<and> n = 0 \\<Longrightarrow>\n    \\<exists>f'\\<in>set (finals (subdivFace' g f u n (ov # ovs))) -\n                    set (finals g).\n       (f\\<^bsup>-1\\<^esup> \\<bullet> r, r) \\<in> \\<E> f' \\<and>\n       |vertices f'| =\n       n + |ov # ovs| +\n       (if r = u then 1 else |between (vertices f) r u| + 2)\n 2. \\<not> (f \\<bullet> u = v \\<and> n = 0) \\<Longrightarrow>\n    \\<exists>f'\\<in>set (finals (subdivFace' g f u n (ov # ovs))) -\n                    set (finals g).\n       (f\\<^bsup>-1\\<^esup> \\<bullet> r, r) \\<in> \\<E> f' \\<and>\n       |vertices f'| =\n       n + |ov # ovs| +\n       (if r = u then 1 else |between (vertices f) r u| + 2)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>f'\\<in>set (finals (subdivFace' g f u n (ov # ovs))) -\n                    set (finals g).\n       (f\\<^bsup>-1\\<^esup> \\<bullet> r, r) \\<in> \\<E> f' \\<and>\n       |vertices f'| =\n       n + |ov # ovs| +\n       (if r = u then 1 else |between (vertices f) r u| + 2)", "using Some True IH[OF mgp pre' fg mt] \\<open>r \\<noteq> v\\<close>"], ["proof (prove)\nusing this:\n  ov = Some v\n  f \\<bullet> u = v \\<and> n = 0\n  \\<exists>f'\\<in>set (finals (subdivFace' g f v 0 ovs)) - set (finals g).\n     (f\\<^bsup>-1\\<^esup> \\<bullet> r, r) \\<in> \\<E> f' \\<and>\n     |vertices f'| =\n     0 + |ovs| + (if r = v then 1 else |between (vertices f) r v| + 2)\n  r \\<noteq> v\n\ngoal (1 subgoal):\n 1. \\<exists>f'\\<in>set (finals (subdivFace' g f u n (ov # ovs))) -\n                    set (finals g).\n       (f\\<^bsup>-1\\<^esup> \\<bullet> r, r) \\<in> \\<E> f' \\<and>\n       |vertices f'| =\n       n + |ov # ovs| +\n       (if r = u then 1 else |between (vertices f) r u| + 2)", "by(auto simp: between_next_empty[OF distf]\n          unroll_between_next2[OF distf \\<open>r \\<in> \\<V> f\\<close> \\<open>u \\<in> \\<V> f\\<close>])"], ["proof (state)\nthis:\n  \\<exists>f'\\<in>set (finals (subdivFace' g f u n (ov # ovs))) -\n                  set (finals g).\n     (f\\<^bsup>-1\\<^esup> \\<bullet> r, r) \\<in> \\<E> f' \\<and>\n     |vertices f'| =\n     n + |ov # ovs| + (if r = u then 1 else |between (vertices f) r u| + 2)\n\ngoal (1 subgoal):\n 1. \\<not> (f \\<bullet> u = v \\<and> n = 0) \\<Longrightarrow>\n    \\<exists>f'\\<in>set (finals (subdivFace' g f u n (ov # ovs))) -\n                    set (finals g).\n       (f\\<^bsup>-1\\<^esup> \\<bullet> r, r) \\<in> \\<E> f' \\<and>\n       |vertices f'| =\n       n + |ov # ovs| +\n       (if r = u then 1 else |between (vertices f) r u| + 2)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> (f \\<bullet> u = v \\<and> n = 0) \\<Longrightarrow>\n    \\<exists>f'\\<in>set (finals (subdivFace' g f u n (ov # ovs))) -\n                    set (finals g).\n       (f\\<^bsup>-1\\<^esup> \\<bullet> r, r) \\<in> \\<E> f' \\<and>\n       |vertices f'| =\n       n + |ov # ovs| +\n       (if r = u then 1 else |between (vertices f) r u| + 2)", "case False"], ["proof (state)\nthis:\n  \\<not> (f \\<bullet> u = v \\<and> n = 0)\n\ngoal (1 subgoal):\n 1. \\<not> (f \\<bullet> u = v \\<and> n = 0) \\<Longrightarrow>\n    \\<exists>f'\\<in>set (finals (subdivFace' g f u n (ov # ovs))) -\n                    set (finals g).\n       (f\\<^bsup>-1\\<^esup> \\<bullet> r, r) \\<in> \\<E> f' \\<and>\n       |vertices f'| =\n       n + |ov # ovs| +\n       (if r = u then 1 else |between (vertices f) r u| + 2)", "let ?vs = \"[countVertices g..<countVertices g + n]\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> (f \\<bullet> u = v \\<and> n = 0) \\<Longrightarrow>\n    \\<exists>f'\\<in>set (finals (subdivFace' g f u n (ov # ovs))) -\n                    set (finals g).\n       (f\\<^bsup>-1\\<^esup> \\<bullet> r, r) \\<in> \\<E> f' \\<and>\n       |vertices f'| =\n       n + |ov # ovs| +\n       (if r = u then 1 else |between (vertices f) r u| + 2)", "let ?fdg = \"splitFace g u v f ?vs\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> (f \\<bullet> u = v \\<and> n = 0) \\<Longrightarrow>\n    \\<exists>f'\\<in>set (finals (subdivFace' g f u n (ov # ovs))) -\n                    set (finals g).\n       (f\\<^bsup>-1\\<^esup> \\<bullet> r, r) \\<in> \\<E> f' \\<and>\n       |vertices f'| =\n       n + |ov # ovs| +\n       (if r = u then 1 else |between (vertices f) r u| + 2)", "let ?g' = \"snd(snd ?fdg)\" and ?f\\<^sub>2 = \"fst(snd ?fdg)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> (f \\<bullet> u = v \\<and> n = 0) \\<Longrightarrow>\n    \\<exists>f'\\<in>set (finals (subdivFace' g f u n (ov # ovs))) -\n                    set (finals g).\n       (f\\<^bsup>-1\\<^esup> \\<bullet> r, r) \\<in> \\<E> f' \\<and>\n       |vertices f'| =\n       n + |ov # ovs| +\n       (if r = u then 1 else |between (vertices f) r u| + 2)", "let ?fvu = \"between (vertices f) v u\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> (f \\<bullet> u = v \\<and> n = 0) \\<Longrightarrow>\n    \\<exists>f'\\<in>set (finals (subdivFace' g f u n (ov # ovs))) -\n                    set (finals g).\n       (f\\<^bsup>-1\\<^esup> \\<bullet> r, r) \\<in> \\<E> f' \\<and>\n       |vertices f'| =\n       n + |ov # ovs| +\n       (if r = u then 1 else |between (vertices f) r u| + 2)", "have False': \"f \\<bullet> u = v \\<longrightarrow> n \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<bullet> u = v \\<longrightarrow> n \\<noteq> 0", "using False"], ["proof (prove)\nusing this:\n  \\<not> (f \\<bullet> u = v \\<and> n = 0)\n\ngoal (1 subgoal):\n 1. f \\<bullet> u = v \\<longrightarrow> n \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  f \\<bullet> u = v \\<longrightarrow> n \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<not> (f \\<bullet> u = v \\<and> n = 0) \\<Longrightarrow>\n    \\<exists>f'\\<in>set (finals (subdivFace' g f u n (ov # ovs))) -\n                    set (finals g).\n       (f\\<^bsup>-1\\<^esup> \\<bullet> r, r) \\<in> \\<E> f' \\<and>\n       |vertices f'| =\n       n + |ov # ovs| +\n       (if r = u then 1 else |between (vertices f) r u| + 2)", "have VfVg: \"\\<V> f \\<subseteq> \\<V> g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<V> f \\<subseteq> \\<V> g", "using mgp fg"], ["proof (prove)\nusing this:\n  minGraphProps g\n  f \\<in> \\<F> g\n\ngoal (1 subgoal):\n 1. \\<V> f \\<subseteq> \\<V> g", "by (simp add: minGraphProps_def faces_subset_def)"], ["proof (state)\nthis:\n  \\<V> f \\<subseteq> \\<V> g\n\ngoal (1 subgoal):\n 1. \\<not> (f \\<bullet> u = v \\<and> n = 0) \\<Longrightarrow>\n    \\<exists>f'\\<in>set (finals (subdivFace' g f u n (ov # ovs))) -\n                    set (finals g).\n       (f\\<^bsup>-1\\<^esup> \\<bullet> r, r) \\<in> \\<E> f' \\<and>\n       |vertices f'| =\n       n + |ov # ovs| +\n       (if r = u then 1 else |between (vertices f) r u| + 2)", "note pre_fdg = pre_subdivFace'_preFaceDiv[OF pre fg False' VfVg]"], ["proof (state)\nthis:\n  pre_splitFace g u v f [countVertices g..<countVertices g + n]\n\ngoal (1 subgoal):\n 1. \\<not> (f \\<bullet> u = v \\<and> n = 0) \\<Longrightarrow>\n    \\<exists>f'\\<in>set (finals (subdivFace' g f u n (ov # ovs))) -\n                    set (finals g).\n       (f\\<^bsup>-1\\<^esup> \\<bullet> r, r) \\<in> \\<E> f' \\<and>\n       |vertices f'| =\n       n + |ov # ovs| +\n       (if r = u then 1 else |between (vertices f) r u| + 2)", "hence \"u \\<noteq> v\" and \"v \\<in> \\<V> f\" and disj: \"\\<V> f \\<inter> set ?vs = {}\""], ["proof (prove)\nusing this:\n  pre_splitFace g u v f [countVertices g..<countVertices g + n]\n\ngoal (1 subgoal):\n 1. u \\<noteq> v &&&\n    v \\<in> \\<V> f &&&\n    \\<V> f \\<inter> set [countVertices g..<countVertices g + n] = {}", "by(unfold pre_splitFace_def)simp+"], ["proof (state)\nthis:\n  u \\<noteq> v\n  v \\<in> \\<V> f\n  \\<V> f \\<inter> set [countVertices g..<countVertices g + n] = {}\n\ngoal (1 subgoal):\n 1. \\<not> (f \\<bullet> u = v \\<and> n = 0) \\<Longrightarrow>\n    \\<exists>f'\\<in>set (finals (subdivFace' g f u n (ov # ovs))) -\n                    set (finals g).\n       (f\\<^bsup>-1\\<^esup> \\<bullet> r, r) \\<in> \\<E> f' \\<and>\n       |vertices f'| =\n       n + |ov # ovs| +\n       (if r = u then 1 else |between (vertices f) r u| + 2)", "hence vvs: \"v \\<notin> set ?vs\""], ["proof (prove)\nusing this:\n  u \\<noteq> v\n  v \\<in> \\<V> f\n  \\<V> f \\<inter> set [countVertices g..<countVertices g + n] = {}\n\ngoal (1 subgoal):\n 1. v \\<notin> set [countVertices g..<countVertices g + n]", "by auto"], ["proof (state)\nthis:\n  v \\<notin> set [countVertices g..<countVertices g + n]\n\ngoal (1 subgoal):\n 1. \\<not> (f \\<bullet> u = v \\<and> n = 0) \\<Longrightarrow>\n    \\<exists>f'\\<in>set (finals (subdivFace' g f u n (ov # ovs))) -\n                    set (finals g).\n       (f\\<^bsup>-1\\<^esup> \\<bullet> r, r) \\<in> \\<E> f' \\<and>\n       |vertices f'| =\n       n + |ov # ovs| +\n       (if r = u then 1 else |between (vertices f) r u| + 2)", "have vf\\<^sub>2: \"vertices ?f\\<^sub>2 = [v] @ ?fvu @ u # ?vs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vertices\n     (fst (snd (splitFace g u v f\n                 [countVertices g..<countVertices g + n]))) =\n    [v] @\n    between (vertices f) v u @ u # [countVertices g..<countVertices g + n]", "by(simp add:split_face_def splitFace_def split_def)"], ["proof (state)\nthis:\n  vertices\n   (fst (snd (splitFace g u v f [countVertices g..<countVertices g + n]))) =\n  [v] @\n  between (vertices f) v u @ u # [countVertices g..<countVertices g + n]\n\ngoal (1 subgoal):\n 1. \\<not> (f \\<bullet> u = v \\<and> n = 0) \\<Longrightarrow>\n    \\<exists>f'\\<in>set (finals (subdivFace' g f u n (ov # ovs))) -\n                    set (finals g).\n       (f\\<^bsup>-1\\<^esup> \\<bullet> r, r) \\<in> \\<E> f' \\<and>\n       |vertices f'| =\n       n + |ov # ovs| +\n       (if r = u then 1 else |between (vertices f) r u| + 2)", "hence betuvf\\<^sub>2: \"between (vertices ?f\\<^sub>2) u v = ?vs\""], ["proof (prove)\nusing this:\n  vertices\n   (fst (snd (splitFace g u v f [countVertices g..<countVertices g + n]))) =\n  [v] @\n  between (vertices f) v u @ u # [countVertices g..<countVertices g + n]\n\ngoal (1 subgoal):\n 1. between\n     (vertices\n       (fst (snd (splitFace g u v f\n                   [countVertices g..<countVertices g + n]))))\n     u v =\n    [countVertices g..<countVertices g + n]", "using splitFace_distinct1[OF pre_fdg]"], ["proof (prove)\nusing this:\n  vertices\n   (fst (snd (splitFace g u v f [countVertices g..<countVertices g + n]))) =\n  [v] @\n  between (vertices f) v u @ u # [countVertices g..<countVertices g + n]\n  distinct\n   (vertices\n     (fst (snd (splitFace g u v f\n                 [countVertices g..<countVertices g + n]))))\n\ngoal (1 subgoal):\n 1. between\n     (vertices\n       (fst (snd (splitFace g u v f\n                   [countVertices g..<countVertices g + n]))))\n     u v =\n    [countVertices g..<countVertices g + n]", "by(simp add: between_back)"], ["proof (state)\nthis:\n  between\n   (vertices\n     (fst (snd (splitFace g u v f\n                 [countVertices g..<countVertices g + n]))))\n   u v =\n  [countVertices g..<countVertices g + n]\n\ngoal (1 subgoal):\n 1. \\<not> (f \\<bullet> u = v \\<and> n = 0) \\<Longrightarrow>\n    \\<exists>f'\\<in>set (finals (subdivFace' g f u n (ov # ovs))) -\n                    set (finals g).\n       (f\\<^bsup>-1\\<^esup> \\<bullet> r, r) \\<in> \\<E> f' \\<and>\n       |vertices f'| =\n       n + |ov # ovs| +\n       (if r = u then 1 else |between (vertices f) r u| + 2)", "have betrvf\\<^sub>2: \"r \\<noteq> u \\<Longrightarrow> between (vertices ?f\\<^sub>2) r v =\n        between (vertices f) r u @ [u] @ ?vs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r \\<noteq> u \\<Longrightarrow>\n    between\n     (vertices\n       (fst (snd (splitFace g u v f\n                   [countVertices g..<countVertices g + n]))))\n     r v =\n    between (vertices f) r u @ [u] @ [countVertices g..<countVertices g + n]", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. r \\<noteq> u \\<Longrightarrow>\n    between\n     (vertices\n       (fst (snd (splitFace g u v f\n                   [countVertices g..<countVertices g + n]))))\n     r v =\n    between (vertices f) r u @ [u] @ [countVertices g..<countVertices g + n]", "assume \"r\\<noteq>u\""], ["proof (state)\nthis:\n  r \\<noteq> u\n\ngoal (1 subgoal):\n 1. r \\<noteq> u \\<Longrightarrow>\n    between\n     (vertices\n       (fst (snd (splitFace g u v f\n                   [countVertices g..<countVertices g + n]))))\n     r v =\n    between (vertices f) r u @ [u] @ [countVertices g..<countVertices g + n]", "have r: \"r \\<in> set (between (vertices f) v u)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r \\<in> set (between (vertices f) v u)", "using \\<open>r\\<noteq>u\\<close> \\<open>r\\<noteq>v\\<close> \\<open>u\\<noteq>v\\<close> \\<open>v \\<in> \\<V> f\\<close> \\<open>r \\<in> \\<V> f\\<close> distf ruv"], ["proof (prove)\nusing this:\n  r \\<noteq> u\n  r \\<noteq> v\n  u \\<noteq> v\n  v \\<in> \\<V> f\n  r \\<in> \\<V> f\n  distinct (vertices f)\n  before (verticesFrom f r) u v\n\ngoal (1 subgoal):\n 1. r \\<in> set (between (vertices f) v u)", "by(blast intro:rotate_before_vFrom before_between)"], ["proof (state)\nthis:\n  r \\<in> set (between (vertices f) v u)\n\ngoal (1 subgoal):\n 1. r \\<noteq> u \\<Longrightarrow>\n    between\n     (vertices\n       (fst (snd (splitFace g u v f\n                   [countVertices g..<countVertices g + n]))))\n     r v =\n    between (vertices f) r u @ [u] @ [countVertices g..<countVertices g + n]", "have \"between (vertices f) v u =\n          between (vertices f) v r @ [r] @ between (vertices f) r u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. between (vertices f) v u =\n    between (vertices f) v r @ [r] @ between (vertices f) r u", "using split_between[OF distf \\<open>v \\<in> \\<V> f\\<close> \\<open>u \\<in> \\<V> f\\<close> r] \\<open>r\\<noteq>v\\<close>"], ["proof (prove)\nusing this:\n  between (vertices f) v u =\n  (if v = r then [] else between (vertices f) v r @ [r]) @\n  between (vertices f) r u\n  r \\<noteq> v\n\ngoal (1 subgoal):\n 1. between (vertices f) v u =\n    between (vertices f) v r @ [r] @ between (vertices f) r u", "by simp"], ["proof (state)\nthis:\n  between (vertices f) v u =\n  between (vertices f) v r @ [r] @ between (vertices f) r u\n\ngoal (1 subgoal):\n 1. r \\<noteq> u \\<Longrightarrow>\n    between\n     (vertices\n       (fst (snd (splitFace g u v f\n                   [countVertices g..<countVertices g + n]))))\n     r v =\n    between (vertices f) r u @ [u] @ [countVertices g..<countVertices g + n]", "moreover"], ["proof (state)\nthis:\n  between (vertices f) v u =\n  between (vertices f) v r @ [r] @ between (vertices f) r u\n\ngoal (1 subgoal):\n 1. r \\<noteq> u \\<Longrightarrow>\n    between\n     (vertices\n       (fst (snd (splitFace g u v f\n                   [countVertices g..<countVertices g + n]))))\n     r v =\n    between (vertices f) r u @ [u] @ [countVertices g..<countVertices g + n]", "hence \"v \\<notin> set (between (vertices f) r u)\""], ["proof (prove)\nusing this:\n  between (vertices f) v u =\n  between (vertices f) v r @ [r] @ between (vertices f) r u\n\ngoal (1 subgoal):\n 1. v \\<notin> set (between (vertices f) r u)", "using between_not_r1[OF distf, of v u]"], ["proof (prove)\nusing this:\n  between (vertices f) v u =\n  between (vertices f) v r @ [r] @ between (vertices f) r u\n  v \\<notin> set (between (vertices f) v u)\n\ngoal (1 subgoal):\n 1. v \\<notin> set (between (vertices f) r u)", "by simp"], ["proof (state)\nthis:\n  v \\<notin> set (between (vertices f) r u)\n\ngoal (1 subgoal):\n 1. r \\<noteq> u \\<Longrightarrow>\n    between\n     (vertices\n       (fst (snd (splitFace g u v f\n                   [countVertices g..<countVertices g + n]))))\n     r v =\n    between (vertices f) r u @ [u] @ [countVertices g..<countVertices g + n]", "ultimately"], ["proof (chain)\npicking this:\n  between (vertices f) v u =\n  between (vertices f) v r @ [r] @ between (vertices f) r u\n  v \\<notin> set (between (vertices f) r u)", "show ?thesis"], ["proof (prove)\nusing this:\n  between (vertices f) v u =\n  between (vertices f) v r @ [r] @ between (vertices f) r u\n  v \\<notin> set (between (vertices f) r u)\n\ngoal (1 subgoal):\n 1. between\n     (vertices\n       (fst (snd (splitFace g u v f\n                   [countVertices g..<countVertices g + n]))))\n     r v =\n    between (vertices f) r u @ [u] @ [countVertices g..<countVertices g + n]", "using vf\\<^sub>2 \\<open>r\\<noteq>v\\<close> \\<open>u\\<noteq>v\\<close> vvs"], ["proof (prove)\nusing this:\n  between (vertices f) v u =\n  between (vertices f) v r @ [r] @ between (vertices f) r u\n  v \\<notin> set (between (vertices f) r u)\n  vertices\n   (fst (snd (splitFace g u v f [countVertices g..<countVertices g + n]))) =\n  [v] @\n  between (vertices f) v u @ u # [countVertices g..<countVertices g + n]\n  r \\<noteq> v\n  u \\<noteq> v\n  v \\<notin> set [countVertices g..<countVertices g + n]\n\ngoal (1 subgoal):\n 1. between\n     (vertices\n       (fst (snd (splitFace g u v f\n                   [countVertices g..<countVertices g + n]))))\n     r v =\n    between (vertices f) r u @ [u] @ [countVertices g..<countVertices g + n]", "by (simp add: between_back between_not_r2[OF distf])"], ["proof (state)\nthis:\n  between\n   (vertices\n     (fst (snd (splitFace g u v f\n                 [countVertices g..<countVertices g + n]))))\n   r v =\n  between (vertices f) r u @ [u] @ [countVertices g..<countVertices g + n]\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  r \\<noteq> u \\<Longrightarrow>\n  between\n   (vertices\n     (fst (snd (splitFace g u v f\n                 [countVertices g..<countVertices g + n]))))\n   r v =\n  between (vertices f) r u @ [u] @ [countVertices g..<countVertices g + n]\n\ngoal (1 subgoal):\n 1. \\<not> (f \\<bullet> u = v \\<and> n = 0) \\<Longrightarrow>\n    \\<exists>f'\\<in>set (finals (subdivFace' g f u n (ov # ovs))) -\n                    set (finals g).\n       (f\\<^bsup>-1\\<^esup> \\<bullet> r, r) \\<in> \\<E> f' \\<and>\n       |vertices f'| =\n       n + |ov # ovs| +\n       (if r = u then 1 else |between (vertices f) r u| + 2)", "note mgp' = splitFace_holds_minGraphProps[OF pre_fdg mgp]"], ["proof (state)\nthis:\n  minGraphProps\n   (snd (snd (splitFace g u v f [countVertices g..<countVertices g + n])))\n\ngoal (1 subgoal):\n 1. \\<not> (f \\<bullet> u = v \\<and> n = 0) \\<Longrightarrow>\n    \\<exists>f'\\<in>set (finals (subdivFace' g f u n (ov # ovs))) -\n                    set (finals g).\n       (f\\<^bsup>-1\\<^esup> \\<bullet> r, r) \\<in> \\<E> f' \\<and>\n       |vertices f'| =\n       n + |ov # ovs| +\n       (if r = u then 1 else |between (vertices f) r u| + 2)", "note f2g = splitFace_add_f21'[OF fg]"], ["proof (state)\nthis:\n  fst (snd (splitFace g ?v ?a f ?nvl))\n  \\<in> \\<F> (snd (snd (splitFace g ?v ?a f ?nvl)))\n\ngoal (1 subgoal):\n 1. \\<not> (f \\<bullet> u = v \\<and> n = 0) \\<Longrightarrow>\n    \\<exists>f'\\<in>set (finals (subdivFace' g f u n (ov # ovs))) -\n                    set (finals g).\n       (f\\<^bsup>-1\\<^esup> \\<bullet> r, r) \\<in> \\<E> f' \\<and>\n       |vertices f'| =\n       n + |ov # ovs| +\n       (if r = u then 1 else |between (vertices f) r u| + 2)", "note pre' = pre_subdivFace'_Some1[OF pre fg False' VfVg HOL.refl HOL.refl]"], ["proof (state)\nthis:\n  pre_subdivFace'\n   (snd (snd (splitFace g u v f [countVertices g..<countVertices g + n])))\n   (fst (snd (splitFace g u v f [countVertices g..<countVertices g + n]))) r\n   v 0 ovs\n\ngoal (1 subgoal):\n 1. \\<not> (f \\<bullet> u = v \\<and> n = 0) \\<Longrightarrow>\n    \\<exists>f'\\<in>set (finals (subdivFace' g f u n (ov # ovs))) -\n                    set (finals g).\n       (f\\<^bsup>-1\\<^esup> \\<bullet> r, r) \\<in> \\<E> f' \\<and>\n       |vertices f'| =\n       n + |ov # ovs| +\n       (if r = u then 1 else |between (vertices f) r u| + 2)", "from pre_fdg"], ["proof (chain)\npicking this:\n  pre_splitFace g u v f [countVertices g..<countVertices g + n]", "have \"v \\<in> \\<V> f\" and disj: \"\\<V> f \\<inter> set ?vs = {}\""], ["proof (prove)\nusing this:\n  pre_splitFace g u v f [countVertices g..<countVertices g + n]\n\ngoal (1 subgoal):\n 1. v \\<in> \\<V> f &&&\n    \\<V> f \\<inter> set [countVertices g..<countVertices g + n] = {}", "by(unfold pre_splitFace_def, simp)+"], ["proof (state)\nthis:\n  v \\<in> \\<V> f\n  \\<V> f \\<inter> set [countVertices g..<countVertices g + n] = {}\n\ngoal (1 subgoal):\n 1. \\<not> (f \\<bullet> u = v \\<and> n = 0) \\<Longrightarrow>\n    \\<exists>f'\\<in>set (finals (subdivFace' g f u n (ov # ovs))) -\n                    set (finals g).\n       (f\\<^bsup>-1\\<^esup> \\<bullet> r, r) \\<in> \\<E> f' \\<and>\n       |vertices f'| =\n       n + |ov # ovs| +\n       (if r = u then 1 else |between (vertices f) r u| + 2)", "have fr: \"?f\\<^sub>2\\<^bsup>-1\\<^esup> \\<bullet> r = f\\<^bsup>-1\\<^esup> \\<bullet> r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (snd (splitFace g u v f\n               [countVertices g..<\n                countVertices g + n]))\\<^bsup>-1\\<^esup> \\<bullet>\n     r =\n    f\\<^bsup>-1\\<^esup> \\<bullet> r", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. fst (snd (splitFace g u v f\n               [countVertices g..<\n                countVertices g + n]))\\<^bsup>-1\\<^esup> \\<bullet>\n     r =\n    f\\<^bsup>-1\\<^esup> \\<bullet> r", "note pre_split = pre_splitFace_pre_split_face[OF pre_fdg]"], ["proof (state)\nthis:\n  pre_split_face f u v [countVertices g..<countVertices g + n]\n\ngoal (1 subgoal):\n 1. fst (snd (splitFace g u v f\n               [countVertices g..<\n                countVertices g + n]))\\<^bsup>-1\\<^esup> \\<bullet>\n     r =\n    f\\<^bsup>-1\\<^esup> \\<bullet> r", "have rinf\\<^sub>2: \"r \\<in> \\<V> ?f\\<^sub>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r \\<in> \\<V>\n             (fst (snd (splitFace g u v f\n                         [countVertices g..<countVertices g + n])))", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    r \\<in> \\<V>\n             (fst (snd (splitFace g u v f\n                         [countVertices g..<countVertices g + n])))\n 2. \\<not> ?P \\<Longrightarrow>\n    r \\<in> \\<V>\n             (fst (snd (splitFace g u v f\n                         [countVertices g..<countVertices g + n])))", "assume \"r = u\""], ["proof (state)\nthis:\n  r = u\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    r \\<in> \\<V>\n             (fst (snd (splitFace g u v f\n                         [countVertices g..<countVertices g + n])))\n 2. \\<not> ?P \\<Longrightarrow>\n    r \\<in> \\<V>\n             (fst (snd (splitFace g u v f\n                         [countVertices g..<countVertices g + n])))", "thus ?thesis"], ["proof (prove)\nusing this:\n  r = u\n\ngoal (1 subgoal):\n 1. r \\<in> \\<V>\n             (fst (snd (splitFace g u v f\n                         [countVertices g..<countVertices g + n])))", "by(simp add:vf\\<^sub>2)"], ["proof (state)\nthis:\n  r \\<in> \\<V>\n           (fst (snd (splitFace g u v f\n                       [countVertices g..<countVertices g + n])))\n\ngoal (1 subgoal):\n 1. r \\<noteq> u \\<Longrightarrow>\n    r \\<in> \\<V>\n             (fst (snd (splitFace g u v f\n                         [countVertices g..<countVertices g + n])))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. r \\<noteq> u \\<Longrightarrow>\n    r \\<in> \\<V>\n             (fst (snd (splitFace g u v f\n                         [countVertices g..<countVertices g + n])))", "assume \"r \\<noteq> u\""], ["proof (state)\nthis:\n  r \\<noteq> u\n\ngoal (1 subgoal):\n 1. r \\<noteq> u \\<Longrightarrow>\n    r \\<in> \\<V>\n             (fst (snd (splitFace g u v f\n                         [countVertices g..<countVertices g + n])))", "hence \"r \\<in> set ?fvu\""], ["proof (prove)\nusing this:\n  r \\<noteq> u\n\ngoal (1 subgoal):\n 1. r \\<in> set (between (vertices f) v u)", "using distf \\<open>v : \\<V> f\\<close> \\<open>r\\<noteq>v\\<close> \\<open>r : \\<V> f\\<close> ruv"], ["proof (prove)\nusing this:\n  r \\<noteq> u\n  distinct (vertices f)\n  v \\<in> \\<V> f\n  r \\<noteq> v\n  r \\<in> \\<V> f\n  before (verticesFrom f r) u v\n\ngoal (1 subgoal):\n 1. r \\<in> set (between (vertices f) v u)", "by(blast intro: before_between rotate_before_vFrom)"], ["proof (state)\nthis:\n  r \\<in> set (between (vertices f) v u)\n\ngoal (1 subgoal):\n 1. r \\<noteq> u \\<Longrightarrow>\n    r \\<in> \\<V>\n             (fst (snd (splitFace g u v f\n                         [countVertices g..<countVertices g + n])))", "thus ?thesis"], ["proof (prove)\nusing this:\n  r \\<in> set (between (vertices f) v u)\n\ngoal (1 subgoal):\n 1. r \\<in> \\<V>\n             (fst (snd (splitFace g u v f\n                         [countVertices g..<countVertices g + n])))", "by(simp add:vf\\<^sub>2)"], ["proof (state)\nthis:\n  r \\<in> \\<V>\n           (fst (snd (splitFace g u v f\n                       [countVertices g..<countVertices g + n])))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  r \\<in> \\<V>\n           (fst (snd (splitFace g u v f\n                       [countVertices g..<countVertices g + n])))\n\ngoal (1 subgoal):\n 1. fst (snd (splitFace g u v f\n               [countVertices g..<\n                countVertices g + n]))\\<^bsup>-1\\<^esup> \\<bullet>\n     r =\n    f\\<^bsup>-1\\<^esup> \\<bullet> r", "have E\\<^sub>2: \"\\<E> ?f\\<^sub>2 = Edges (u # ?vs @ [v]) \\<union>\n                             Edges (v # ?fvu @ [u])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<E>\n     (fst (snd (splitFace g u v f\n                 [countVertices g..<countVertices g + n]))) =\n    Edges (u # [countVertices g..<countVertices g + n] @ [v]) \\<union>\n    Edges (v # between (vertices f) v u @ [u])", "by(simp add:splitFace_def split_def\n            edges_split_face2[OF pre_split])"], ["proof (state)\nthis:\n  \\<E>\n   (fst (snd (splitFace g u v f [countVertices g..<countVertices g + n]))) =\n  Edges (u # [countVertices g..<countVertices g + n] @ [v]) \\<union>\n  Edges (v # between (vertices f) v u @ [u])\n\ngoal (1 subgoal):\n 1. fst (snd (splitFace g u v f\n               [countVertices g..<\n                countVertices g + n]))\\<^bsup>-1\\<^esup> \\<bullet>\n     r =\n    f\\<^bsup>-1\\<^esup> \\<bullet> r", "moreover"], ["proof (state)\nthis:\n  \\<E>\n   (fst (snd (splitFace g u v f [countVertices g..<countVertices g + n]))) =\n  Edges (u # [countVertices g..<countVertices g + n] @ [v]) \\<union>\n  Edges (v # between (vertices f) v u @ [u])\n\ngoal (1 subgoal):\n 1. fst (snd (splitFace g u v f\n               [countVertices g..<\n                countVertices g + n]))\\<^bsup>-1\\<^esup> \\<bullet>\n     r =\n    f\\<^bsup>-1\\<^esup> \\<bullet> r", "have \"(?f\\<^sub>2\\<^bsup>-1\\<^esup> \\<bullet> r, r) \\<in> \\<E> ?f\\<^sub>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (fst (snd (splitFace g u v f\n                [countVertices g..<\n                 countVertices g + n]))\\<^bsup>-1\\<^esup> \\<bullet>\n      r,\n     r)\n    \\<in> \\<E>\n           (fst (snd (splitFace g u v f\n                       [countVertices g..<countVertices g + n])))", "by(blast intro: prevVertex_in_edges rinf\\<^sub>2\n            splitFace_distinct1[OF pre_fdg])"], ["proof (state)\nthis:\n  (fst (snd (splitFace g u v f\n              [countVertices g..<\n               countVertices g + n]))\\<^bsup>-1\\<^esup> \\<bullet>\n    r,\n   r)\n  \\<in> \\<E>\n         (fst (snd (splitFace g u v f\n                     [countVertices g..<countVertices g + n])))\n\ngoal (1 subgoal):\n 1. fst (snd (splitFace g u v f\n               [countVertices g..<\n                countVertices g + n]))\\<^bsup>-1\\<^esup> \\<bullet>\n     r =\n    f\\<^bsup>-1\\<^esup> \\<bullet> r", "moreover"], ["proof (state)\nthis:\n  (fst (snd (splitFace g u v f\n              [countVertices g..<\n               countVertices g + n]))\\<^bsup>-1\\<^esup> \\<bullet>\n    r,\n   r)\n  \\<in> \\<E>\n         (fst (snd (splitFace g u v f\n                     [countVertices g..<countVertices g + n])))\n\ngoal (1 subgoal):\n 1. fst (snd (splitFace g u v f\n               [countVertices g..<\n                countVertices g + n]))\\<^bsup>-1\\<^esup> \\<bullet>\n     r =\n    f\\<^bsup>-1\\<^esup> \\<bullet> r", "have \"(?f\\<^sub>2\\<^bsup>-1\\<^esup> \\<bullet> r, r) \\<notin> Edges (u # ?vs @ [v])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (fst (snd (splitFace g u v f\n                [countVertices g..<\n                 countVertices g + n]))\\<^bsup>-1\\<^esup> \\<bullet>\n      r,\n     r)\n    \\<notin> Edges (u # [countVertices g..<countVertices g + n] @ [v])", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (fst (snd (splitFace g u v f\n                [countVertices g..<\n                 countVertices g + n]))\\<^bsup>-1\\<^esup> \\<bullet>\n      r,\n     r)\n    \\<notin> Edges (u # [countVertices g..<countVertices g + n] @ [v])", "have \"r \\<notin> set ?vs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r \\<notin> set [countVertices g..<countVertices g + n]", "using \\<open>r : \\<V> f\\<close> disj"], ["proof (prove)\nusing this:\n  r \\<in> \\<V> f\n  \\<V> f \\<inter> set [countVertices g..<countVertices g + n] = {}\n\ngoal (1 subgoal):\n 1. r \\<notin> set [countVertices g..<countVertices g + n]", "by blast"], ["proof (state)\nthis:\n  r \\<notin> set [countVertices g..<countVertices g + n]\n\ngoal (1 subgoal):\n 1. (fst (snd (splitFace g u v f\n                [countVertices g..<\n                 countVertices g + n]))\\<^bsup>-1\\<^esup> \\<bullet>\n      r,\n     r)\n    \\<notin> Edges (u # [countVertices g..<countVertices g + n] @ [v])", "thus ?thesis"], ["proof (prove)\nusing this:\n  r \\<notin> set [countVertices g..<countVertices g + n]\n\ngoal (1 subgoal):\n 1. (fst (snd (splitFace g u v f\n                [countVertices g..<\n                 countVertices g + n]))\\<^bsup>-1\\<^esup> \\<bullet>\n      r,\n     r)\n    \\<notin> Edges (u # [countVertices g..<countVertices g + n] @ [v])", "using \\<open>r \\<noteq> v\\<close>"], ["proof (prove)\nusing this:\n  r \\<notin> set [countVertices g..<countVertices g + n]\n  r \\<noteq> v\n\ngoal (1 subgoal):\n 1. (fst (snd (splitFace g u v f\n                [countVertices g..<\n                 countVertices g + n]))\\<^bsup>-1\\<^esup> \\<bullet>\n      r,\n     r)\n    \\<notin> Edges (u # [countVertices g..<countVertices g + n] @ [v])", "by(simp add:Edges_Cons Edges_append notinset_notinEdge2) arith"], ["proof (state)\nthis:\n  (fst (snd (splitFace g u v f\n              [countVertices g..<\n               countVertices g + n]))\\<^bsup>-1\\<^esup> \\<bullet>\n    r,\n   r)\n  \\<notin> Edges (u # [countVertices g..<countVertices g + n] @ [v])\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (fst (snd (splitFace g u v f\n              [countVertices g..<\n               countVertices g + n]))\\<^bsup>-1\\<^esup> \\<bullet>\n    r,\n   r)\n  \\<notin> Edges (u # [countVertices g..<countVertices g + n] @ [v])\n\ngoal (1 subgoal):\n 1. fst (snd (splitFace g u v f\n               [countVertices g..<\n                countVertices g + n]))\\<^bsup>-1\\<^esup> \\<bullet>\n     r =\n    f\\<^bsup>-1\\<^esup> \\<bullet> r", "ultimately"], ["proof (chain)\npicking this:\n  \\<E>\n   (fst (snd (splitFace g u v f [countVertices g..<countVertices g + n]))) =\n  Edges (u # [countVertices g..<countVertices g + n] @ [v]) \\<union>\n  Edges (v # between (vertices f) v u @ [u])\n  (fst (snd (splitFace g u v f\n              [countVertices g..<\n               countVertices g + n]))\\<^bsup>-1\\<^esup> \\<bullet>\n    r,\n   r)\n  \\<in> \\<E>\n         (fst (snd (splitFace g u v f\n                     [countVertices g..<countVertices g + n])))\n  (fst (snd (splitFace g u v f\n              [countVertices g..<\n               countVertices g + n]))\\<^bsup>-1\\<^esup> \\<bullet>\n    r,\n   r)\n  \\<notin> Edges (u # [countVertices g..<countVertices g + n] @ [v])", "have \"(?f\\<^sub>2\\<^bsup>-1\\<^esup> \\<bullet> r, r) \\<in> Edges (v # ?fvu @ [u])\""], ["proof (prove)\nusing this:\n  \\<E>\n   (fst (snd (splitFace g u v f [countVertices g..<countVertices g + n]))) =\n  Edges (u # [countVertices g..<countVertices g + n] @ [v]) \\<union>\n  Edges (v # between (vertices f) v u @ [u])\n  (fst (snd (splitFace g u v f\n              [countVertices g..<\n               countVertices g + n]))\\<^bsup>-1\\<^esup> \\<bullet>\n    r,\n   r)\n  \\<in> \\<E>\n         (fst (snd (splitFace g u v f\n                     [countVertices g..<countVertices g + n])))\n  (fst (snd (splitFace g u v f\n              [countVertices g..<\n               countVertices g + n]))\\<^bsup>-1\\<^esup> \\<bullet>\n    r,\n   r)\n  \\<notin> Edges (u # [countVertices g..<countVertices g + n] @ [v])\n\ngoal (1 subgoal):\n 1. (fst (snd (splitFace g u v f\n                [countVertices g..<\n                 countVertices g + n]))\\<^bsup>-1\\<^esup> \\<bullet>\n      r,\n     r)\n    \\<in> Edges (v # between (vertices f) v u @ [u])", "by blast"], ["proof (state)\nthis:\n  (fst (snd (splitFace g u v f\n              [countVertices g..<\n               countVertices g + n]))\\<^bsup>-1\\<^esup> \\<bullet>\n    r,\n   r)\n  \\<in> Edges (v # between (vertices f) v u @ [u])\n\ngoal (1 subgoal):\n 1. fst (snd (splitFace g u v f\n               [countVertices g..<\n                countVertices g + n]))\\<^bsup>-1\\<^esup> \\<bullet>\n     r =\n    f\\<^bsup>-1\\<^esup> \\<bullet> r", "hence \"(?f\\<^sub>2\\<^bsup>-1\\<^esup> \\<bullet> r, r) \\<in> \\<E> f\""], ["proof (prove)\nusing this:\n  (fst (snd (splitFace g u v f\n              [countVertices g..<\n               countVertices g + n]))\\<^bsup>-1\\<^esup> \\<bullet>\n    r,\n   r)\n  \\<in> Edges (v # between (vertices f) v u @ [u])\n\ngoal (1 subgoal):\n 1. (fst (snd (splitFace g u v f\n                [countVertices g..<\n                 countVertices g + n]))\\<^bsup>-1\\<^esup> \\<bullet>\n      r,\n     r)\n    \\<in> \\<E> f", "using pre_split_face_symI[OF pre_split]"], ["proof (prove)\nusing this:\n  (fst (snd (splitFace g u v f\n              [countVertices g..<\n               countVertices g + n]))\\<^bsup>-1\\<^esup> \\<bullet>\n    r,\n   r)\n  \\<in> Edges (v # between (vertices f) v u @ [u])\n  pre_split_face f v u [countVertices g..<countVertices g + n]\n\ngoal (1 subgoal):\n 1. (fst (snd (splitFace g u v f\n                [countVertices g..<\n                 countVertices g + n]))\\<^bsup>-1\\<^esup> \\<bullet>\n      r,\n     r)\n    \\<in> \\<E> f", "by(blast intro: Edges_between_edges)"], ["proof (state)\nthis:\n  (fst (snd (splitFace g u v f\n              [countVertices g..<\n               countVertices g + n]))\\<^bsup>-1\\<^esup> \\<bullet>\n    r,\n   r)\n  \\<in> \\<E> f\n\ngoal (1 subgoal):\n 1. fst (snd (splitFace g u v f\n               [countVertices g..<\n                countVertices g + n]))\\<^bsup>-1\\<^esup> \\<bullet>\n     r =\n    f\\<^bsup>-1\\<^esup> \\<bullet> r", "hence eq: \"f \\<bullet> (?f\\<^sub>2\\<^bsup>-1\\<^esup> \\<bullet> r) = r\" and inf: \"?f\\<^sub>2\\<^bsup>-1\\<^esup> \\<bullet> r \\<in> \\<V> f\""], ["proof (prove)\nusing this:\n  (fst (snd (splitFace g u v f\n              [countVertices g..<\n               countVertices g + n]))\\<^bsup>-1\\<^esup> \\<bullet>\n    r,\n   r)\n  \\<in> \\<E> f\n\ngoal (1 subgoal):\n 1. f \\<bullet>\n     (fst (snd (splitFace g u v f\n                 [countVertices g..<\n                  countVertices g + n]))\\<^bsup>-1\\<^esup> \\<bullet>\n       r) =\n    r &&&\n    fst (snd (splitFace g u v f\n               [countVertices g..<\n                countVertices g + n]))\\<^bsup>-1\\<^esup> \\<bullet>\n     r\n    \\<in> \\<V> f", "by(simp add:edges_face_eq)+"], ["proof (state)\nthis:\n  f \\<bullet>\n   (fst (snd (splitFace g u v f\n               [countVertices g..<\n                countVertices g + n]))\\<^bsup>-1\\<^esup> \\<bullet>\n     r) =\n  r\n  fst (snd (splitFace g u v f\n             [countVertices g..<\n              countVertices g + n]))\\<^bsup>-1\\<^esup> \\<bullet>\n   r\n  \\<in> \\<V> f\n\ngoal (1 subgoal):\n 1. fst (snd (splitFace g u v f\n               [countVertices g..<\n                countVertices g + n]))\\<^bsup>-1\\<^esup> \\<bullet>\n     r =\n    f\\<^bsup>-1\\<^esup> \\<bullet> r", "have \"?f\\<^sub>2\\<^bsup>-1\\<^esup> \\<bullet> r = f\\<^bsup>-1\\<^esup> \\<bullet> (f \\<bullet> (?f\\<^sub>2\\<^bsup>-1\\<^esup> \\<bullet> r))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (snd (splitFace g u v f\n               [countVertices g..<\n                countVertices g + n]))\\<^bsup>-1\\<^esup> \\<bullet>\n     r =\n    f\\<^bsup>-1\\<^esup> \\<bullet>\n     (f \\<bullet>\n       (fst (snd (splitFace g u v f\n                   [countVertices g..<\n                    countVertices g + n]))\\<^bsup>-1\\<^esup> \\<bullet>\n         r))", "using prevVertex_nextVertex[OF distf inf]"], ["proof (prove)\nusing this:\n  f\\<^bsup>-1\\<^esup> \\<bullet>\n   (f \\<bullet>\n     (fst (snd (splitFace g u v f\n                 [countVertices g..<\n                  countVertices g + n]))\\<^bsup>-1\\<^esup> \\<bullet>\n       r)) =\n  fst (snd (splitFace g u v f\n             [countVertices g..<\n              countVertices g + n]))\\<^bsup>-1\\<^esup> \\<bullet>\n   r\n\ngoal (1 subgoal):\n 1. fst (snd (splitFace g u v f\n               [countVertices g..<\n                countVertices g + n]))\\<^bsup>-1\\<^esup> \\<bullet>\n     r =\n    f\\<^bsup>-1\\<^esup> \\<bullet>\n     (f \\<bullet>\n       (fst (snd (splitFace g u v f\n                   [countVertices g..<\n                    countVertices g + n]))\\<^bsup>-1\\<^esup> \\<bullet>\n         r))", "by simp"], ["proof (state)\nthis:\n  fst (snd (splitFace g u v f\n             [countVertices g..<\n              countVertices g + n]))\\<^bsup>-1\\<^esup> \\<bullet>\n   r =\n  f\\<^bsup>-1\\<^esup> \\<bullet>\n   (f \\<bullet>\n     (fst (snd (splitFace g u v f\n                 [countVertices g..<\n                  countVertices g + n]))\\<^bsup>-1\\<^esup> \\<bullet>\n       r))\n\ngoal (1 subgoal):\n 1. fst (snd (splitFace g u v f\n               [countVertices g..<\n                countVertices g + n]))\\<^bsup>-1\\<^esup> \\<bullet>\n     r =\n    f\\<^bsup>-1\\<^esup> \\<bullet> r", "also"], ["proof (state)\nthis:\n  fst (snd (splitFace g u v f\n             [countVertices g..<\n              countVertices g + n]))\\<^bsup>-1\\<^esup> \\<bullet>\n   r =\n  f\\<^bsup>-1\\<^esup> \\<bullet>\n   (f \\<bullet>\n     (fst (snd (splitFace g u v f\n                 [countVertices g..<\n                  countVertices g + n]))\\<^bsup>-1\\<^esup> \\<bullet>\n       r))\n\ngoal (1 subgoal):\n 1. fst (snd (splitFace g u v f\n               [countVertices g..<\n                countVertices g + n]))\\<^bsup>-1\\<^esup> \\<bullet>\n     r =\n    f\\<^bsup>-1\\<^esup> \\<bullet> r", "have \"\\<dots> = f\\<^bsup>-1\\<^esup> \\<bullet> r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f\\<^bsup>-1\\<^esup> \\<bullet>\n     (f \\<bullet>\n       (fst (snd (splitFace g u v f\n                   [countVertices g..<\n                    countVertices g + n]))\\<^bsup>-1\\<^esup> \\<bullet>\n         r)) =\n    f\\<^bsup>-1\\<^esup> \\<bullet> r", "using eq"], ["proof (prove)\nusing this:\n  f \\<bullet>\n   (fst (snd (splitFace g u v f\n               [countVertices g..<\n                countVertices g + n]))\\<^bsup>-1\\<^esup> \\<bullet>\n     r) =\n  r\n\ngoal (1 subgoal):\n 1. f\\<^bsup>-1\\<^esup> \\<bullet>\n     (f \\<bullet>\n       (fst (snd (splitFace g u v f\n                   [countVertices g..<\n                    countVertices g + n]))\\<^bsup>-1\\<^esup> \\<bullet>\n         r)) =\n    f\\<^bsup>-1\\<^esup> \\<bullet> r", "by simp"], ["proof (state)\nthis:\n  f\\<^bsup>-1\\<^esup> \\<bullet>\n   (f \\<bullet>\n     (fst (snd (splitFace g u v f\n                 [countVertices g..<\n                  countVertices g + n]))\\<^bsup>-1\\<^esup> \\<bullet>\n       r)) =\n  f\\<^bsup>-1\\<^esup> \\<bullet> r\n\ngoal (1 subgoal):\n 1. fst (snd (splitFace g u v f\n               [countVertices g..<\n                countVertices g + n]))\\<^bsup>-1\\<^esup> \\<bullet>\n     r =\n    f\\<^bsup>-1\\<^esup> \\<bullet> r", "finally"], ["proof (chain)\npicking this:\n  fst (snd (splitFace g u v f\n             [countVertices g..<\n              countVertices g + n]))\\<^bsup>-1\\<^esup> \\<bullet>\n   r =\n  f\\<^bsup>-1\\<^esup> \\<bullet> r", "show ?thesis"], ["proof (prove)\nusing this:\n  fst (snd (splitFace g u v f\n             [countVertices g..<\n              countVertices g + n]))\\<^bsup>-1\\<^esup> \\<bullet>\n   r =\n  f\\<^bsup>-1\\<^esup> \\<bullet> r\n\ngoal (1 subgoal):\n 1. fst (snd (splitFace g u v f\n               [countVertices g..<\n                countVertices g + n]))\\<^bsup>-1\\<^esup> \\<bullet>\n     r =\n    f\\<^bsup>-1\\<^esup> \\<bullet> r", "."], ["proof (state)\nthis:\n  fst (snd (splitFace g u v f\n             [countVertices g..<\n              countVertices g + n]))\\<^bsup>-1\\<^esup> \\<bullet>\n   r =\n  f\\<^bsup>-1\\<^esup> \\<bullet> r\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  fst (snd (splitFace g u v f\n             [countVertices g..<\n              countVertices g + n]))\\<^bsup>-1\\<^esup> \\<bullet>\n   r =\n  f\\<^bsup>-1\\<^esup> \\<bullet> r\n\ngoal (1 subgoal):\n 1. \\<not> (f \\<bullet> u = v \\<and> n = 0) \\<Longrightarrow>\n    \\<exists>f'\\<in>set (finals (subdivFace' g f u n (ov # ovs))) -\n                    set (finals g).\n       (f\\<^bsup>-1\\<^esup> \\<bullet> r, r) \\<in> \\<E> f' \\<and>\n       |vertices f'| =\n       n + |ov # ovs| +\n       (if r = u then 1 else |between (vertices f) r u| + 2)", "hence mt: \"ovs = [] \\<longrightarrow> 0 = 0 \\<and> v = last (verticesFrom ?f\\<^sub>2 r)\""], ["proof (prove)\nusing this:\n  fst (snd (splitFace g u v f\n             [countVertices g..<\n              countVertices g + n]))\\<^bsup>-1\\<^esup> \\<bullet>\n   r =\n  f\\<^bsup>-1\\<^esup> \\<bullet> r\n\ngoal (1 subgoal):\n 1. ovs = [] \\<longrightarrow>\n    (0::'a) = (0::'a) \\<and>\n    v =\n    last\n     (verticesFrom\n       (fst (snd (splitFace g u v f\n                   [countVertices g..<countVertices g + n])))\n       r)", "using pre' pre"], ["proof (prove)\nusing this:\n  fst (snd (splitFace g u v f\n             [countVertices g..<\n              countVertices g + n]))\\<^bsup>-1\\<^esup> \\<bullet>\n   r =\n  f\\<^bsup>-1\\<^esup> \\<bullet> r\n  pre_subdivFace'\n   (snd (snd (splitFace g u v f [countVertices g..<countVertices g + n])))\n   (fst (snd (splitFace g u v f [countVertices g..<countVertices g + n]))) r\n   v 0 ovs\n  pre_subdivFace' g f r u n (Some v # ovs)\n\ngoal (1 subgoal):\n 1. ovs = [] \\<longrightarrow>\n    (0::'a) = (0::'a) \\<and>\n    v =\n    last\n     (verticesFrom\n       (fst (snd (splitFace g u v f\n                   [countVertices g..<countVertices g + n])))\n       r)", "by(auto simp:pre_subdivFace'_def splitFace_def\n          split_def last_vFrom)"], ["proof (state)\nthis:\n  ovs = [] \\<longrightarrow>\n  (0::?'a1) = (0::?'a1) \\<and>\n  v =\n  last\n   (verticesFrom\n     (fst (snd (splitFace g u v f [countVertices g..<countVertices g + n])))\n     r)\n\ngoal (1 subgoal):\n 1. \\<not> (f \\<bullet> u = v \\<and> n = 0) \\<Longrightarrow>\n    \\<exists>f'\\<in>set (finals (subdivFace' g f u n (ov # ovs))) -\n                    set (finals g).\n       (f\\<^bsup>-1\\<^esup> \\<bullet> r, r) \\<in> \\<E> f' \\<and>\n       |vertices f'| =\n       n + |ov # ovs| +\n       (if r = u then 1 else |between (vertices f) r u| + 2)", "from IH[OF mgp' pre' f2g mt] \\<open>r \\<noteq> v\\<close>"], ["proof (chain)\npicking this:\n  \\<exists>f'\\<in>set (finals\n                        (subdivFace'\n                          (snd (snd (splitFace g u v f\n[countVertices g..<countVertices g + n])))\n                          (fst (snd (splitFace g u v f\n[countVertices g..<countVertices g + n])))\n                          v 0 ovs)) -\n                  set (finals\n                        (snd (snd (splitFace g u v f\n                                    [countVertices g..<\n                                     countVertices g + n])))).\n     (fst (snd (splitFace g u v f\n                 [countVertices g..<\n                  countVertices g + n]))\\<^bsup>-1\\<^esup> \\<bullet>\n       r,\n      r)\n     \\<in> \\<E> f' \\<and>\n     |vertices f'| =\n     0 + |ovs| +\n     (if r = v then 1\n      else |between\n             (vertices\n               (fst (snd (splitFace g u v f\n                           [countVertices g..<countVertices g + n]))))\n             r v| +\n           2)\n  r \\<noteq> v", "obtain f' :: face where\n        f: \"f' \\<in> set(finals(subdivFace' ?g' ?f\\<^sub>2 v 0 ovs)) - set(finals ?g')\"\n        and ff: \"(?f\\<^sub>2\\<^bsup>-1\\<^esup> \\<bullet> r, r) \\<in> \\<E> f'\"\n        \"|vertices f'| = |ovs| + |between (vertices ?f\\<^sub>2) r v| + 2\""], ["proof (prove)\nusing this:\n  \\<exists>f'\\<in>set (finals\n                        (subdivFace'\n                          (snd (snd (splitFace g u v f\n[countVertices g..<countVertices g + n])))\n                          (fst (snd (splitFace g u v f\n[countVertices g..<countVertices g + n])))\n                          v 0 ovs)) -\n                  set (finals\n                        (snd (snd (splitFace g u v f\n                                    [countVertices g..<\n                                     countVertices g + n])))).\n     (fst (snd (splitFace g u v f\n                 [countVertices g..<\n                  countVertices g + n]))\\<^bsup>-1\\<^esup> \\<bullet>\n       r,\n      r)\n     \\<in> \\<E> f' \\<and>\n     |vertices f'| =\n     0 + |ovs| +\n     (if r = v then 1\n      else |between\n             (vertices\n               (fst (snd (splitFace g u v f\n                           [countVertices g..<countVertices g + n]))))\n             r v| +\n           2)\n  r \\<noteq> v\n\ngoal (1 subgoal):\n 1. (\\<And>f'.\n        \\<lbrakk>f' \\<in> set (finals\n                                (subdivFace'\n                                  (snd (snd\n   (splitFace g u v f [countVertices g..<countVertices g + n])))\n                                  (fst (snd\n   (splitFace g u v f [countVertices g..<countVertices g + n])))\n                                  v 0 ovs)) -\n                          set (finals\n                                (snd (snd\n (splitFace g u v f [countVertices g..<countVertices g + n]))));\n         (fst (snd (splitFace g u v f\n                     [countVertices g..<\n                      countVertices g + n]))\\<^bsup>-1\\<^esup> \\<bullet>\n           r,\n          r)\n         \\<in> \\<E> f';\n         |vertices f'| =\n         |ovs| +\n         |between\n           (vertices\n             (fst (snd (splitFace g u v f\n                         [countVertices g..<countVertices g + n]))))\n           r v| +\n         2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by simp blast"], ["proof (state)\nthis:\n  f' \\<in> set (finals\n                 (subdivFace'\n                   (snd (snd (splitFace g u v f\n                               [countVertices g..<countVertices g + n])))\n                   (fst (snd (splitFace g u v f\n                               [countVertices g..<countVertices g + n])))\n                   v 0 ovs)) -\n           set (finals\n                 (snd (snd (splitFace g u v f\n                             [countVertices g..<countVertices g + n]))))\n  (fst (snd (splitFace g u v f\n              [countVertices g..<\n               countVertices g + n]))\\<^bsup>-1\\<^esup> \\<bullet>\n    r,\n   r)\n  \\<in> \\<E> f'\n  |vertices f'| =\n  |ovs| +\n  |between\n    (vertices\n      (fst (snd (splitFace g u v f\n                  [countVertices g..<countVertices g + n]))))\n    r v| +\n  2\n\ngoal (1 subgoal):\n 1. \\<not> (f \\<bullet> u = v \\<and> n = 0) \\<Longrightarrow>\n    \\<exists>f'\\<in>set (finals (subdivFace' g f u n (ov # ovs))) -\n                    set (finals g).\n       (f\\<^bsup>-1\\<^esup> \\<bullet> r, r) \\<in> \\<E> f' \\<and>\n       |vertices f'| =\n       n + |ov # ovs| +\n       (if r = u then 1 else |between (vertices f) r u| + 2)", "show ?thesis (is \"\\<exists>f' \\<in> ?F. ?P f'\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>f'\\<in>set (finals (subdivFace' g f u n (ov # ovs))) -\n                    set (finals g).\n       (f\\<^bsup>-1\\<^esup> \\<bullet> r, r) \\<in> \\<E> f' \\<and>\n       |vertices f'| =\n       n + |ov # ovs| +\n       (if r = u then 1 else |between (vertices f) r u| + 2)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. (f\\<^bsup>-1\\<^esup> \\<bullet> r, r) \\<in> \\<E> ?f' \\<and>\n    |vertices ?f'| =\n    n + |ov # ovs| + (if r = u then 1 else |between (vertices f) r u| + 2)\n 2. ?f' \\<in> set (finals (subdivFace' g f u n (ov # ovs))) - set (finals g)", "show \"f' \\<in> ?F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f' \\<in> set (finals (subdivFace' g f u n (ov # ovs))) - set (finals g)", "using f pre Some fg"], ["proof (prove)\nusing this:\n  f' \\<in> set (finals\n                 (subdivFace'\n                   (snd (snd (splitFace g u v f\n                               [countVertices g..<countVertices g + n])))\n                   (fst (snd (splitFace g u v f\n                               [countVertices g..<countVertices g + n])))\n                   v 0 ovs)) -\n           set (finals\n                 (snd (snd (splitFace g u v f\n                             [countVertices g..<countVertices g + n]))))\n  pre_subdivFace' g f r u n (Some v # ovs)\n  ov = Some v\n  f \\<in> \\<F> g\n\ngoal (1 subgoal):\n 1. f' \\<in> set (finals (subdivFace' g f u n (ov # ovs))) - set (finals g)", "by(simp add:False split_def pre_subdivFace'_def)"], ["proof (state)\nthis:\n  f' \\<in> set (finals (subdivFace' g f u n (ov # ovs))) - set (finals g)\n\ngoal (1 subgoal):\n 1. (f\\<^bsup>-1\\<^esup> \\<bullet> r, r) \\<in> \\<E> f' \\<and>\n    |vertices f'| =\n    n + |ov # ovs| + (if r = u then 1 else |between (vertices f) r u| + 2)", "show \"?P f'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (f\\<^bsup>-1\\<^esup> \\<bullet> r, r) \\<in> \\<E> f' \\<and>\n    |vertices f'| =\n    n + |ov # ovs| + (if r = u then 1 else |between (vertices f) r u| + 2)", "using ff fr"], ["proof (prove)\nusing this:\n  (fst (snd (splitFace g u v f\n              [countVertices g..<\n               countVertices g + n]))\\<^bsup>-1\\<^esup> \\<bullet>\n    r,\n   r)\n  \\<in> \\<E> f'\n  |vertices f'| =\n  |ovs| +\n  |between\n    (vertices\n      (fst (snd (splitFace g u v f\n                  [countVertices g..<countVertices g + n]))))\n    r v| +\n  2\n  fst (snd (splitFace g u v f\n             [countVertices g..<\n              countVertices g + n]))\\<^bsup>-1\\<^esup> \\<bullet>\n   r =\n  f\\<^bsup>-1\\<^esup> \\<bullet> r\n\ngoal (1 subgoal):\n 1. (f\\<^bsup>-1\\<^esup> \\<bullet> r, r) \\<in> \\<E> f' \\<and>\n    |vertices f'| =\n    n + |ov # ovs| + (if r = u then 1 else |between (vertices f) r u| + 2)", "by(clarsimp simp:betuvf\\<^sub>2 betrvf\\<^sub>2)"], ["proof (state)\nthis:\n  (f\\<^bsup>-1\\<^esup> \\<bullet> r, r) \\<in> \\<E> f' \\<and>\n  |vertices f'| =\n  n + |ov # ovs| + (if r = u then 1 else |between (vertices f) r u| + 2)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>f'\\<in>set (finals (subdivFace' g f u n (ov # ovs))) -\n                  set (finals g).\n     (f\\<^bsup>-1\\<^esup> \\<bullet> r, r) \\<in> \\<E> f' \\<and>\n     |vertices f'| =\n     n + |ov # ovs| + (if r = u then 1 else |between (vertices f) r u| + 2)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>f'\\<in>set (finals (subdivFace' g f u n (ov # ovs))) -\n                  set (finals g).\n     (f\\<^bsup>-1\\<^esup> \\<bullet> r, r) \\<in> \\<E> f' \\<and>\n     |vertices f'| =\n     n + |ov # ovs| + (if r = u then 1 else |between (vertices f) r u| + 2)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>f'\\<in>set (finals (subdivFace' g f u n (ov # ovs))) -\n                  set (finals g).\n     (f\\<^bsup>-1\\<^esup> \\<bullet> r, r) \\<in> \\<E> f' \\<and>\n     |vertices f'| =\n     n + |ov # ovs| + (if r = u then 1 else |between (vertices f) r u| + 2)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Seed_max_final_ex:\n \"\\<exists>f\\<in>set (finals (Seed p)). |vertices f| = maxGon p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>f\\<in>set (finals Seed\\<^bsub>p\\<^esub>).\n       |vertices f| = maxGon p", "by (simp add: Seed_def graph_max_final_ex)"], ["", "lemma max_face_ex: assumes a: \"Seed\\<^bsub>p\\<^esub> [next_plane0\\<^bsub>p\\<^esub>]\\<rightarrow>* g\"\nshows \"\\<exists>f \\<in> set (finals g). |vertices f| = maxGon p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>f\\<in>set (finals g). |vertices f| = maxGon p", "using a"], ["proof (prove)\nusing this:\n  Seed\\<^bsub>p\\<^esub> [next_plane0\\<^bsub>p\\<^esub>]\\<rightarrow>* g\n\ngoal (1 subgoal):\n 1. \\<exists>f\\<in>set (finals g). |vertices f| = maxGon p", "proof (induct rule: RTranCl_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>f\\<in>set (finals Seed\\<^bsub>p\\<^esub>).\n       |vertices f| = maxGon p\n 2. \\<And>g g'.\n       \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g);\n        \\<exists>f\\<in>set (finals g). |vertices f| = maxGon p\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f\\<in>set (finals g').\n                            |vertices f| = maxGon p", "case refl"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<exists>f\\<in>set (finals Seed\\<^bsub>p\\<^esub>).\n       |vertices f| = maxGon p\n 2. \\<And>g g'.\n       \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g);\n        \\<exists>f\\<in>set (finals g). |vertices f| = maxGon p\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f\\<in>set (finals g').\n                            |vertices f| = maxGon p", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>f\\<in>set (finals Seed\\<^bsub>p\\<^esub>).\n       |vertices f| = maxGon p", "using Seed_max_final_ex"], ["proof (prove)\nusing this:\n  \\<exists>f\\<in>set (finals Seed\\<^bsub>?p\\<^esub>).\n     |vertices f| = maxGon ?p\n\ngoal (1 subgoal):\n 1. \\<exists>f\\<in>set (finals Seed\\<^bsub>p\\<^esub>).\n       |vertices f| = maxGon p", "by simp"], ["proof (state)\nthis:\n  \\<exists>f\\<in>set (finals Seed\\<^bsub>p\\<^esub>). |vertices f| = maxGon p\n\ngoal (1 subgoal):\n 1. \\<And>g g'.\n       \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g);\n        \\<exists>f\\<in>set (finals g). |vertices f| = maxGon p\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f\\<in>set (finals g').\n                            |vertices f| = maxGon p", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>g g'.\n       \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g);\n        \\<exists>f\\<in>set (finals g). |vertices f| = maxGon p\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f\\<in>set (finals g').\n                            |vertices f| = maxGon p", "case (succs g g')"], ["proof (state)\nthis:\n  g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g)\n  \\<exists>f\\<in>set (finals g). |vertices f| = maxGon p\n\ngoal (1 subgoal):\n 1. \\<And>g g'.\n       \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g);\n        \\<exists>f\\<in>set (finals g). |vertices f| = maxGon p\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f\\<in>set (finals g').\n                            |vertices f| = maxGon p", "then"], ["proof (chain)\npicking this:\n  g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g)\n  \\<exists>f\\<in>set (finals g). |vertices f| = maxGon p", "obtain f where f: \"f\\<in>set (finals g)\" and \"|vertices f| = maxGon p\""], ["proof (prove)\nusing this:\n  g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g)\n  \\<exists>f\\<in>set (finals g). |vertices f| = maxGon p\n\ngoal (1 subgoal):\n 1. (\\<And>f.\n        \\<lbrakk>f \\<in> set (finals g); |vertices f| = maxGon p\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  f \\<in> set (finals g)\n  |vertices f| = maxGon p\n\ngoal (1 subgoal):\n 1. \\<And>g g'.\n       \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g);\n        \\<exists>f\\<in>set (finals g). |vertices f| = maxGon p\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f\\<in>set (finals g').\n                            |vertices f| = maxGon p", "moreover"], ["proof (state)\nthis:\n  f \\<in> set (finals g)\n  |vertices f| = maxGon p\n\ngoal (1 subgoal):\n 1. \\<And>g g'.\n       \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g);\n        \\<exists>f\\<in>set (finals g). |vertices f| = maxGon p\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f\\<in>set (finals g').\n                            |vertices f| = maxGon p", "from succs(1) f"], ["proof (chain)\npicking this:\n  g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g)\n  f \\<in> set (finals g)", "have \"f\\<in>set (finals g')\""], ["proof (prove)\nusing this:\n  g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g)\n  f \\<in> set (finals g)\n\ngoal (1 subgoal):\n 1. f \\<in> set (finals g')", "by (rule next_plane0_finals_incr)"], ["proof (state)\nthis:\n  f \\<in> set (finals g')\n\ngoal (1 subgoal):\n 1. \\<And>g g'.\n       \\<lbrakk>g' \\<in> set (next_plane0\\<^bsub>p\\<^esub> g);\n        \\<exists>f\\<in>set (finals g). |vertices f| = maxGon p\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f\\<in>set (finals g').\n                            |vertices f| = maxGon p", "ultimately"], ["proof (chain)\npicking this:\n  f \\<in> set (finals g)\n  |vertices f| = maxGon p\n  f \\<in> set (finals g')", "show ?case"], ["proof (prove)\nusing this:\n  f \\<in> set (finals g)\n  |vertices f| = maxGon p\n  f \\<in> set (finals g')\n\ngoal (1 subgoal):\n 1. \\<exists>f\\<in>set (finals g'). |vertices f| = maxGon p", "by auto"], ["proof (state)\nthis:\n  \\<exists>f\\<in>set (finals g'). |vertices f| = maxGon p\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}