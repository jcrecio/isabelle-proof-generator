{"file_name": "/home/qj213/afp-2021-10-22/thys/Flyspeck-Tame/Worklist.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Flyspeck-Tame", "problem_names": ["lemma worklist_aux_Nil: \"worklist_aux succs f ([],s) = Some([],s)\"", "lemma worklist_aux_Cons:\n \"worklist_aux succs f (x#ws',s) = worklist_aux succs f (succs s x @ ws', f x s)\"", "lemma worklist_aux_unfold[code]:\n \"worklist_aux succs f (ws,s) =\n (case ws of [] \\<Rightarrow> Some([],s)\n  | x#ws' \\<Rightarrow> worklist_aux succs f (succs s x @ ws', f x s))\"", "lemma worklist_tree_aux_unfold[code]:\n\"worklist_tree_aux succs f (ws,s) =\n (case ws of [] \\<Rightarrow> Some([],s) |\n  x#ws' \\<Rightarrow> worklist_tree_aux succs f (succs x @ ws', f x s))\"", "lemma Image_Rel_set:\n  \"(Rel succs)\\<^sup>* `` set(succs x) = (Rel succs)\\<^sup>+ `` {x}\"", "lemma RTranCl_conv:\n  \"g [succs]\\<rightarrow>* h \\<longleftrightarrow> (g,h) : ((Rel succs)\\<^sup>*)\" (is \"?L = ?R\")", "lemma worklist_end_empty:\n  \"worklist_aux succs f (ws,s) = Some(ws',s') \\<Longrightarrow> ws' = []\"", "theorem worklist_tree_aux_Some_foldl:\nassumes \"worklist_tree_aux succs f (ws,s) = Some(ws',s')\"\nshows \"\\<exists>rs. set rs = ((Rel succs)\\<^sup>*) `` (set ws) \\<and>\n              s' = foldl (\\<lambda>s x. f x s) s rs\"", "theorem worklist_tree_Some_foldl:\n  \"worklist_tree succs f ws s = Some s' \\<Longrightarrow>\n   \\<exists>rs. set rs = ((Rel succs)\\<^sup>*) `` (set ws) \\<and>\n              s' = foldl (\\<lambda>s x. f x s) s rs\"", "lemma invariant_succs:\nassumes \"invariant I succs\"\nand \"\\<forall>x\\<in>S. I x\"\nshows \"\\<forall>x \\<in> (Rel succs)\\<^sup>* `` S. I x\"", "lemma worklist_tree_aux_rule:\nassumes \"worklist_tree_aux succs f (ws,s) = Some(ws',s')\"\nand \"invariant I succs\"\nand \"\\<forall>x \\<in> set ws. I x\"\nand \"\\<And>s. P [] s s\"\nand \"\\<And>r x ws s. I x \\<Longrightarrow> \\<forall>x \\<in> set ws. I x \\<Longrightarrow> P ws (f x s) r \\<Longrightarrow> P (x#ws) s r\"\nshows \"\\<exists>rs. set rs = ((Rel succs)\\<^sup>* ) `` (set ws) \\<and> P rs s s'\"", "lemma worklist_tree_aux_rule2:\nassumes \"worklist_tree_aux succs f (ws,s) = Some(ws',s')\"\nand \"invariant I succs\"\nand \"\\<forall>x \\<in> set ws. I x\"\nand \"S s\" and \"\\<And>x s. I x \\<Longrightarrow> S s \\<Longrightarrow> S(f x s)\"\nand \"\\<And>s. P [] s s\"\nand \"\\<And>r x ws s. I x \\<Longrightarrow> \\<forall>x \\<in> set ws. I x \\<Longrightarrow> S s\n  \\<Longrightarrow> P ws (f x s) r \\<Longrightarrow> P (x#ws) s r\"\nshows \"\\<exists>rs. set rs = ((Rel succs)\\<^sup>*) `` (set ws) \\<and> P rs s s'\"", "lemma worklist_tree_rule:\nassumes \"worklist_tree succs f ws s = Some(s')\"\nand \"invariant I succs\"\nand \"\\<forall>x \\<in> set ws. I x\"\nand \"\\<And>s. P [] s s\"\nand \"\\<And>r x ws s. I x \\<Longrightarrow> \\<forall>x \\<in> set ws. I x \\<Longrightarrow> P ws (f x s) r \\<Longrightarrow> P (x#ws) s r\"\nshows \"\\<exists>rs. set rs = ((Rel succs)\\<^sup>*) `` (set ws) \\<and> P rs s s'\"", "lemma worklist_tree_rule2:\nassumes \"worklist_tree succs f ws s = Some(s')\"\nand \"invariant I succs\"\nand \"\\<forall>x \\<in> set ws. I x\"\nand \"S s\" and \"\\<And>x s. I x \\<Longrightarrow> S s \\<Longrightarrow> S(f x s)\"\nand \"\\<And>s. P [] s s\"\nand \"\\<And>r x ws s. I x \\<Longrightarrow> \\<forall>x \\<in> set ws. I x \\<Longrightarrow> S s\n  \\<Longrightarrow> P ws (f x s) r \\<Longrightarrow> P (x#ws) s r\"\nshows \"\\<exists>rs. set rs = ((Rel succs)\\<^sup>*) `` (set ws) \\<and> P rs s s'\"", "lemma worklist_tree_aux_state_inv:\nassumes \"worklist_tree_aux succs f (ws,s) = Some(ws',s')\"\nand \"I s\"\nand \"\\<And>x s. I s \\<Longrightarrow> I(f x s)\"\nshows \"I s'\"", "lemma worklist_tree_state_inv:\n  \"worklist_tree succs f ws s = Some(s')\n   \\<Longrightarrow> I s \\<Longrightarrow> (\\<And>x s. I s \\<Longrightarrow> I(f x s)) \\<Longrightarrow> I s'\"", "lemma SI_empty: \"SI empty\"", "lemma SI_insert_mod:\n  \"I x \\<Longrightarrow> SI s \\<Longrightarrow> SI (insert_mod x s)\"", "lemma SI_insert_mod2: \"(\\<And>x. inv0 x \\<Longrightarrow> I (f x)) \\<Longrightarrow>\n  inv0 x \\<Longrightarrow> SI s \\<Longrightarrow> SI (insert_mod2 P f x s)\"", "lemma worklist_tree_coll_aux_equiv:\nassumes \"worklist_tree_coll_aux succs P f ws s = Some s'\"\nand \"invariant inv0 succs\"\nand \"\\<forall>x \\<in> set ws. inv0 x\"\nand \"\\<And>x. inv0 x \\<Longrightarrow> I(f x)\"\nand \"SI s\"\nshows \"set_of s' =\\<^sub>\\<preceq>\n  f ` {x : (Rel succs)\\<^sup>* `` (set ws). P x} \\<union> set_of s\"", "lemma worklist_tree_coll_equiv:\n  \"worklist_tree_coll succs P f ws = Some s' \\<Longrightarrow> invariant inv0 succs\n   \\<Longrightarrow> \\<forall>x \\<in> set ws. inv0 x \\<Longrightarrow> (\\<And>x. inv0 x \\<Longrightarrow> I(f x))\n   \\<Longrightarrow> set_of s' =\\<^sub>\\<preceq> f ` {x : (Rel succs)\\<^sup>* `` (set ws). P x}\"", "lemma worklist_tree_coll_aux_subseteq:\n  \"worklist_tree_coll_aux succs P f ws t\\<^sub>0 = Some t \\<Longrightarrow>\n  invariant inv0 succs \\<Longrightarrow>  \\<forall>g \\<in> set ws. inv0 g \\<Longrightarrow>\n  (\\<And>x. inv0 x \\<Longrightarrow> I(f x)) \\<Longrightarrow> SI t\\<^sub>0 \\<Longrightarrow>\n  set_of t \\<subseteq> set_of t\\<^sub>0 \\<union> f ` {h : (Rel succs)\\<^sup>* `` set ws. P h}\"", "lemma worklist_tree_coll_subseteq:\n  \"worklist_tree_coll succs P f ws = Some t \\<Longrightarrow>\n  invariant inv0 succs \\<Longrightarrow> \\<forall>g \\<in> set ws. inv0 g \\<Longrightarrow>\n  (\\<And>x. inv0 x \\<Longrightarrow> I(f x)) \\<Longrightarrow>\n  set_of t \\<subseteq> f ` {h : (Rel succs)\\<^sup>* `` set ws. P h}\"", "lemma worklist_tree_coll_inv:\n  \"worklist_tree_coll succs P f ws = Some s \\<Longrightarrow> S s\""], "translations": [["", "lemma worklist_aux_Nil: \"worklist_aux succs f ([],s) = Some([],s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. worklist_aux succs f ([], s) = Some ([], s)", "by(simp add: worklist_aux_def while_option_unfold)"], ["", "lemma worklist_aux_Cons:\n \"worklist_aux succs f (x#ws',s) = worklist_aux succs f (succs s x @ ws', f x s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. worklist_aux succs f (x # ws', s) =\n    worklist_aux succs f (succs s x @ ws', f x s)", "by(simp add: worklist_aux_def while_option_unfold)"], ["", "lemma worklist_aux_unfold[code]:\n \"worklist_aux succs f (ws,s) =\n (case ws of [] \\<Rightarrow> Some([],s)\n  | x#ws' \\<Rightarrow> worklist_aux succs f (succs s x @ ws', f x s))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. worklist_aux succs f (ws, s) =\n    (case ws of [] \\<Rightarrow> Some ([], s)\n     | x # ws' \\<Rightarrow> worklist_aux succs f (succs s x @ ws', f x s))", "by(simp add: worklist_aux_Nil worklist_aux_Cons split: list.split)"], ["", "definition\n  worklist_tree_aux :: \"('a \\<Rightarrow> 'a list) \\<Rightarrow> ('a \\<Rightarrow> 's \\<Rightarrow> 's)\n    \\<Rightarrow> 'a list * 's \\<Rightarrow> ('a list * 's)option\"\nwhere\n\"worklist_tree_aux succs = worklist_aux (\\<lambda>s. succs)\""], ["", "lemma worklist_tree_aux_unfold[code]:\n\"worklist_tree_aux succs f (ws,s) =\n (case ws of [] \\<Rightarrow> Some([],s) |\n  x#ws' \\<Rightarrow> worklist_tree_aux succs f (succs x @ ws', f x s))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. worklist_tree_aux succs f (ws, s) =\n    (case ws of [] \\<Rightarrow> Some ([], s)\n     | x # ws' \\<Rightarrow>\n         worklist_tree_aux succs f (succs x @ ws', f x s))", "by(simp add: worklist_tree_aux_def worklist_aux_Nil worklist_aux_Cons split: list.split)"], ["", "abbreviation Rel :: \"('a \\<Rightarrow> 'a list) \\<Rightarrow> ('a * 'a)set\" where\n\"Rel f == {(x,y). y : set(f x)}\""], ["", "lemma Image_Rel_set:\n  \"(Rel succs)\\<^sup>* `` set(succs x) = (Rel succs)\\<^sup>+ `` {x}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Rel succs)\\<^sup>* `` set (succs x) = (Rel succs)\\<^sup>+ `` {x}", "by(auto simp add: trancl_unfold_left)"], ["", "lemma RTranCl_conv:\n  \"g [succs]\\<rightarrow>* h \\<longleftrightarrow> (g,h) : ((Rel succs)\\<^sup>*)\" (is \"?L = ?R\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (g [succs]\\<rightarrow>* h) = ((g, h) \\<in> (Rel succs)\\<^sup>*)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. (g [succs]\\<rightarrow>* h) = ((g, h) \\<in> (Rel succs)\\<^sup>*)", "have \"?L \\<Longrightarrow> ?R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. g [succs]\\<rightarrow>* h \\<Longrightarrow>\n    (g, h) \\<in> (Rel succs)\\<^sup>*", "apply(erule RTranCl_induct)"], ["proof (prove)\ngoal (2 subgoals):\n 1. (g, g) \\<in> (Rel succs)\\<^sup>*\n 2. \\<And>ga g'.\n       \\<lbrakk>g' \\<in> set (succs ga);\n        (g, ga) \\<in> (Rel succs)\\<^sup>*\\<rbrakk>\n       \\<Longrightarrow> (g, g') \\<in> (Rel succs)\\<^sup>*", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ga g'.\n       \\<lbrakk>g' \\<in> set (succs ga);\n        (g, ga) \\<in> (Rel succs)\\<^sup>*\\<rbrakk>\n       \\<Longrightarrow> (g, g') \\<in> (Rel succs)\\<^sup>*", "apply (auto elim: rtrancl_into_rtrancl)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  g [succs]\\<rightarrow>* h \\<Longrightarrow>\n  (g, h) \\<in> (Rel succs)\\<^sup>*\n\ngoal (1 subgoal):\n 1. (g [succs]\\<rightarrow>* h) = ((g, h) \\<in> (Rel succs)\\<^sup>*)", "moreover"], ["proof (state)\nthis:\n  g [succs]\\<rightarrow>* h \\<Longrightarrow>\n  (g, h) \\<in> (Rel succs)\\<^sup>*\n\ngoal (1 subgoal):\n 1. (g [succs]\\<rightarrow>* h) = ((g, h) \\<in> (Rel succs)\\<^sup>*)", "have \"?R \\<Longrightarrow> ?L\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (g, h) \\<in> (Rel succs)\\<^sup>* \\<Longrightarrow>\n    g [succs]\\<rightarrow>* h", "apply(erule converse_rtrancl_induct)"], ["proof (prove)\ngoal (2 subgoals):\n 1. h [succs]\\<rightarrow>* h\n 2. \\<And>y z.\n       \\<lbrakk>(y, z) \\<in> Rel succs; (z, h) \\<in> (Rel succs)\\<^sup>*;\n        z [succs]\\<rightarrow>* h\\<rbrakk>\n       \\<Longrightarrow> y [succs]\\<rightarrow>* h", "apply(rule RTranCl.refl)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(y, z) \\<in> Rel succs; (z, h) \\<in> (Rel succs)\\<^sup>*;\n        z [succs]\\<rightarrow>* h\\<rbrakk>\n       \\<Longrightarrow> y [succs]\\<rightarrow>* h", "apply (auto elim: RTranCl.succs)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  (g, h) \\<in> (Rel succs)\\<^sup>* \\<Longrightarrow>\n  g [succs]\\<rightarrow>* h\n\ngoal (1 subgoal):\n 1. (g [succs]\\<rightarrow>* h) = ((g, h) \\<in> (Rel succs)\\<^sup>*)", "ultimately"], ["proof (chain)\npicking this:\n  g [succs]\\<rightarrow>* h \\<Longrightarrow>\n  (g, h) \\<in> (Rel succs)\\<^sup>*\n  (g, h) \\<in> (Rel succs)\\<^sup>* \\<Longrightarrow>\n  g [succs]\\<rightarrow>* h", "show ?thesis"], ["proof (prove)\nusing this:\n  g [succs]\\<rightarrow>* h \\<Longrightarrow>\n  (g, h) \\<in> (Rel succs)\\<^sup>*\n  (g, h) \\<in> (Rel succs)\\<^sup>* \\<Longrightarrow>\n  g [succs]\\<rightarrow>* h\n\ngoal (1 subgoal):\n 1. (g [succs]\\<rightarrow>* h) = ((g, h) \\<in> (Rel succs)\\<^sup>*)", "by blast"], ["proof (state)\nthis:\n  (g [succs]\\<rightarrow>* h) = ((g, h) \\<in> (Rel succs)\\<^sup>*)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma worklist_end_empty:\n  \"worklist_aux succs f (ws,s) = Some(ws',s') \\<Longrightarrow> ws' = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. worklist_aux succs f (ws, s) = Some (ws', s') \\<Longrightarrow> ws' = []", "unfolding worklist_aux_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. while_option (\\<lambda>(ws, s). ws \\<noteq> [])\n     (\\<lambda>(ws, s).\n         case ws of x # ws' \\<Rightarrow> (succs s x @ ws', f x s))\n     (ws, s) =\n    Some (ws', s') \\<Longrightarrow>\n    ws' = []", "by (drule while_option_stop) simp"], ["", "theorem worklist_tree_aux_Some_foldl:\nassumes \"worklist_tree_aux succs f (ws,s) = Some(ws',s')\"\nshows \"\\<exists>rs. set rs = ((Rel succs)\\<^sup>*) `` (set ws) \\<and>\n              s' = foldl (\\<lambda>s x. f x s) s rs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>rs.\n       set rs = (Rel succs)\\<^sup>* `` set ws \\<and>\n       s' = foldl (\\<lambda>s x. f x s) s rs", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>rs.\n       set rs = (Rel succs)\\<^sup>* `` set ws \\<and>\n       s' = foldl (\\<lambda>s x. f x s) s rs", "let ?b = \"\\<lambda>(ws,s). ws \\<noteq> []\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>rs.\n       set rs = (Rel succs)\\<^sup>* `` set ws \\<and>\n       s' = foldl (\\<lambda>s x. f x s) s rs", "let ?c = \"\\<lambda>(ws,s). case ws of x#ws' \\<Rightarrow> (succs x @ ws', f x s)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>rs.\n       set rs = (Rel succs)\\<^sup>* `` set ws \\<and>\n       s' = foldl (\\<lambda>s x. f x s) s rs", "let ?Q = \"\\<lambda>ws' s' done.\n    s' = foldl (\\<lambda>x s. f s x) s done \\<and>\n      ((Rel succs)\\<^sup>*) `` (set ws) =\n          set done \\<union> ((Rel succs)\\<^sup>*) `` set ws'\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>rs.\n       set rs = (Rel succs)\\<^sup>* `` set ws \\<and>\n       s' = foldl (\\<lambda>s x. f x s) s rs", "let ?P = \"\\<lambda>(ws,s). \\<exists>done. ?Q ws s done\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>rs.\n       set rs = (Rel succs)\\<^sup>* `` set ws \\<and>\n       s' = foldl (\\<lambda>s x. f x s) s rs", "have 0: \"while_option ?b ?c (ws,s) = Some(ws',s')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. while_option (\\<lambda>(ws, s). ws \\<noteq> [])\n     (\\<lambda>(ws, s).\n         case ws of x # ws' \\<Rightarrow> (succs x @ ws', f x s))\n     (ws, s) =\n    Some (ws', s')", "using assms"], ["proof (prove)\nusing this:\n  worklist_tree_aux succs f (ws, s) = Some (ws', s')\n\ngoal (1 subgoal):\n 1. while_option (\\<lambda>(ws, s). ws \\<noteq> [])\n     (\\<lambda>(ws, s).\n         case ws of x # ws' \\<Rightarrow> (succs x @ ws', f x s))\n     (ws, s) =\n    Some (ws', s')", "by(simp add: worklist_tree_aux_def worklist_aux_def)"], ["proof (state)\nthis:\n  while_option (\\<lambda>(ws, s). ws \\<noteq> [])\n   (\\<lambda>(ws, s).\n       case ws of x # ws' \\<Rightarrow> (succs x @ ws', f x s))\n   (ws, s) =\n  Some (ws', s')\n\ngoal (1 subgoal):\n 1. \\<exists>rs.\n       set rs = (Rel succs)\\<^sup>* `` set ws \\<and>\n       s' = foldl (\\<lambda>s x. f x s) s rs", "from while_option_stop[OF 0]"], ["proof (chain)\npicking this:\n  \\<not> (case (ws', s') of (ws, s) \\<Rightarrow> ws \\<noteq> [])", "have \"ws' = []\""], ["proof (prove)\nusing this:\n  \\<not> (case (ws', s') of (ws, s) \\<Rightarrow> ws \\<noteq> [])\n\ngoal (1 subgoal):\n 1. ws' = []", "by simp"], ["proof (state)\nthis:\n  ws' = []\n\ngoal (1 subgoal):\n 1. \\<exists>rs.\n       set rs = (Rel succs)\\<^sup>* `` set ws \\<and>\n       s' = foldl (\\<lambda>s x. f x s) s rs", "have init: \"?P (ws,s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. case (ws, s) of\n    (wsa, sa) \\<Rightarrow>\n      \\<exists>done.\n         sa = foldl (\\<lambda>x s. f s x) s done \\<and>\n         (Rel succs)\\<^sup>* `` set ws =\n         set done \\<union> (Rel succs)\\<^sup>* `` set wsa", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>done.\n       s = foldl (\\<lambda>x s. f s x) s done \\<and>\n       (Rel succs)\\<^sup>* `` set ws =\n       set done \\<union> (Rel succs)\\<^sup>* `` set ws", "apply(rule_tac x = \"[]\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. s = foldl (\\<lambda>x s. f s x) s [] \\<and>\n    (Rel succs)\\<^sup>* `` set ws =\n    set [] \\<union> (Rel succs)\\<^sup>* `` set ws", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  case (ws, s) of\n  (wsa, sa) \\<Rightarrow>\n    \\<exists>done.\n       sa = foldl (\\<lambda>x s. f s x) s done \\<and>\n       (Rel succs)\\<^sup>* `` set ws =\n       set done \\<union> (Rel succs)\\<^sup>* `` set wsa\n\ngoal (1 subgoal):\n 1. \\<exists>rs.\n       set rs = (Rel succs)\\<^sup>* `` set ws \\<and>\n       s' = foldl (\\<lambda>s x. f x s) s rs", "{"], ["proof (state)\nthis:\n  case (ws, s) of\n  (wsa, sa) \\<Rightarrow>\n    \\<exists>done.\n       sa = foldl (\\<lambda>x s. f s x) s done \\<and>\n       (Rel succs)\\<^sup>* `` set ws =\n       set done \\<union> (Rel succs)\\<^sup>* `` set wsa\n\ngoal (1 subgoal):\n 1. \\<exists>rs.\n       set rs = (Rel succs)\\<^sup>* `` set ws \\<and>\n       s' = foldl (\\<lambda>s x. f x s) s rs", "fix ws s"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>rs.\n       set rs = (Rel succs)\\<^sup>* `` set ws \\<and>\n       s' = foldl (\\<lambda>s x. f x s) s rs", "assume \"?P (ws,s)\""], ["proof (state)\nthis:\n  case (ws, s) of\n  (wsa, sa) \\<Rightarrow>\n    \\<exists>done.\n       sa = foldl (\\<lambda>x s. f s x) s done \\<and>\n       (Rel succs)\\<^sup>* `` set ws =\n       set done \\<union> (Rel succs)\\<^sup>* `` set wsa\n\ngoal (1 subgoal):\n 1. \\<exists>rs.\n       set rs = (Rel succs)\\<^sup>* `` set ws \\<and>\n       s' = foldl (\\<lambda>s x. f x s) s rs", "then"], ["proof (chain)\npicking this:\n  case (ws, s) of\n  (wsa, sa) \\<Rightarrow>\n    \\<exists>done.\n       sa = foldl (\\<lambda>x s. f s x) s done \\<and>\n       (Rel succs)\\<^sup>* `` set ws =\n       set done \\<union> (Rel succs)\\<^sup>* `` set wsa", "obtain \"done\" where \"?Q ws s done\""], ["proof (prove)\nusing this:\n  case (ws, s) of\n  (wsa, sa) \\<Rightarrow>\n    \\<exists>done.\n       sa = foldl (\\<lambda>x s. f s x) s done \\<and>\n       (Rel succs)\\<^sup>* `` set ws =\n       set done \\<union> (Rel succs)\\<^sup>* `` set wsa\n\ngoal (1 subgoal):\n 1. (\\<And>done.\n        s = foldl (\\<lambda>x s. f s x) s done \\<and>\n        (Rel succs)\\<^sup>* `` set ws =\n        set done \\<union> (Rel succs)\\<^sup>* `` set ws \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  s = foldl (\\<lambda>x s. f s x) s done \\<and>\n  (Rel succs)\\<^sup>* `` set ws =\n  set done \\<union> (Rel succs)\\<^sup>* `` set ws\n\ngoal (1 subgoal):\n 1. \\<exists>rs.\n       set rs = (Rel succs)\\<^sup>* `` set ws \\<and>\n       s' = foldl (\\<lambda>s x. f x s) s rs", "assume \"?b(ws,s)\""], ["proof (state)\nthis:\n  case (ws, s) of (ws, s) \\<Rightarrow> ws \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<exists>rs.\n       set rs = (Rel succs)\\<^sup>* `` set ws \\<and>\n       s' = foldl (\\<lambda>s x. f x s) s rs", "then"], ["proof (chain)\npicking this:\n  case (ws, s) of (ws, s) \\<Rightarrow> ws \\<noteq> []", "obtain x ws' where \"ws = x # ws'\""], ["proof (prove)\nusing this:\n  case (ws, s) of (ws, s) \\<Rightarrow> ws \\<noteq> []\n\ngoal (1 subgoal):\n 1. (\\<And>x ws'. ws = x # ws' \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(auto simp: neq_Nil_conv)"], ["proof (state)\nthis:\n  ws = x # ws'\n\ngoal (1 subgoal):\n 1. \\<exists>rs.\n       set rs = (Rel succs)\\<^sup>* `` set ws \\<and>\n       s' = foldl (\\<lambda>s x. f x s) s rs", "then"], ["proof (chain)\npicking this:\n  ws = x # ws'", "have \"?Q (succs x @ ws') (f x s) (done @ [x])\""], ["proof (prove)\nusing this:\n  ws = x # ws'\n\ngoal (1 subgoal):\n 1. f x s = foldl (\\<lambda>x s. f s x) s (done @ [x]) \\<and>\n    (Rel succs)\\<^sup>* `` set ws =\n    set (done @ [x]) \\<union> (Rel succs)\\<^sup>* `` set (succs x @ ws')", "using \\<open>?Q ws s done\\<close>"], ["proof (prove)\nusing this:\n  ws = x # ws'\n  s = foldl (\\<lambda>x s. f s x) s done \\<and>\n  (Rel succs)\\<^sup>* `` set ws =\n  set done \\<union> (Rel succs)\\<^sup>* `` set ws\n\ngoal (1 subgoal):\n 1. f x s = foldl (\\<lambda>x s. f s x) s (done @ [x]) \\<and>\n    (Rel succs)\\<^sup>* `` set ws =\n    set (done @ [x]) \\<union> (Rel succs)\\<^sup>* `` set (succs x @ ws')", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ws = x # ws';\n     s = foldl (\\<lambda>x s. f s x) s done \\<and>\n     (Rel succs)\\<^sup>* `` set ws =\n     set done \\<union> (Rel succs)\\<^sup>* `` insert x (set ws')\\<rbrakk>\n    \\<Longrightarrow> set done \\<union>\n                      (Rel succs)\\<^sup>* `` insert x (set ws') =\n                      insert x\n                       (set done \\<union>\n                        (Rel succs)\\<^sup>* ``\n                        (set (succs x) \\<union> set ws'))", "apply(erule thin_rl)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. set done \\<union> (Rel succs)\\<^sup>* `` insert x (set ws') =\n    insert x\n     (set done \\<union>\n      (Rel succs)\\<^sup>* `` (set (succs x) \\<union> set ws'))", "apply (auto simp add: Image_Un Image_Rel_set)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>xa \\<noteq> x; xa \\<notin> set done;\n        xa \\<notin> (Rel succs)\\<^sup>* `` set ws';\n        (x, xa) \\<in> (Rel succs)\\<^sup>*\\<rbrakk>\n       \\<Longrightarrow> (x, xa) \\<in> (Rel succs)\\<^sup>+", "apply (blast elim: rtranclE intro: rtrancl_into_trancl1)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  f x s = foldl (\\<lambda>x s. f s x) s (done @ [x]) \\<and>\n  (Rel succs)\\<^sup>* `` set ws =\n  set (done @ [x]) \\<union> (Rel succs)\\<^sup>* `` set (succs x @ ws')\n\ngoal (1 subgoal):\n 1. \\<exists>rs.\n       set rs = (Rel succs)\\<^sup>* `` set ws \\<and>\n       s' = foldl (\\<lambda>s x. f x s) s rs", "hence \"?P(?c(ws,s))\""], ["proof (prove)\nusing this:\n  f x s = foldl (\\<lambda>x s. f s x) s (done @ [x]) \\<and>\n  (Rel succs)\\<^sup>* `` set ws =\n  set (done @ [x]) \\<union> (Rel succs)\\<^sup>* `` set (succs x @ ws')\n\ngoal (1 subgoal):\n 1. case case (ws, s) of\n         (x # ws', s) \\<Rightarrow> (succs x @ ws', f x s) of\n    (wsa, sa) \\<Rightarrow>\n      \\<exists>done.\n         sa = foldl (\\<lambda>x s. f s x) s done \\<and>\n         (Rel succs)\\<^sup>* `` set ws =\n         set done \\<union> (Rel succs)\\<^sup>* `` set wsa", "using \\<open>ws=x#ws'\\<close>"], ["proof (prove)\nusing this:\n  f x s = foldl (\\<lambda>x s. f s x) s (done @ [x]) \\<and>\n  (Rel succs)\\<^sup>* `` set ws =\n  set (done @ [x]) \\<union> (Rel succs)\\<^sup>* `` set (succs x @ ws')\n  ws = x # ws'\n\ngoal (1 subgoal):\n 1. case case (ws, s) of\n         (x # ws', s) \\<Rightarrow> (succs x @ ws', f x s) of\n    (wsa, sa) \\<Rightarrow>\n      \\<exists>done.\n         sa = foldl (\\<lambda>x s. f s x) s done \\<and>\n         (Rel succs)\\<^sup>* `` set ws =\n         set done \\<union> (Rel succs)\\<^sup>* `` set wsa", "by(simp only: split_conv list.cases) blast"], ["proof (state)\nthis:\n  case case (ws, s) of (x # ws', s) \\<Rightarrow> (succs x @ ws', f x s) of\n  (wsa, sa) \\<Rightarrow>\n    \\<exists>done.\n       sa = foldl (\\<lambda>x s. f s x) s done \\<and>\n       (Rel succs)\\<^sup>* `` set ws =\n       set done \\<union> (Rel succs)\\<^sup>* `` set wsa\n\ngoal (1 subgoal):\n 1. \\<exists>rs.\n       set rs = (Rel succs)\\<^sup>* `` set ws \\<and>\n       s' = foldl (\\<lambda>s x. f x s) s rs", "}"], ["proof (state)\nthis:\n  \\<lbrakk>case (?wsa3, ?sa3) of\n           (wsa, sa) \\<Rightarrow>\n             \\<exists>done.\n                sa = foldl (\\<lambda>x s. f s x) s done \\<and>\n                (Rel succs)\\<^sup>* `` set ws =\n                set done \\<union> (Rel succs)\\<^sup>* `` set wsa;\n   case (?wsa3, ?sa3) of (ws, s) \\<Rightarrow> ws \\<noteq> []\\<rbrakk>\n  \\<Longrightarrow> case case (?wsa3, ?sa3) of\n                         (x # ws', s) \\<Rightarrow>\n                           (succs x @ ws', f x s) of\n                    (wsa, sa) \\<Rightarrow>\n                      \\<exists>done.\n                         sa = foldl (\\<lambda>x s. f s x) s done \\<and>\n                         (Rel succs)\\<^sup>* `` set ws =\n                         set done \\<union> (Rel succs)\\<^sup>* `` set wsa\n\ngoal (1 subgoal):\n 1. \\<exists>rs.\n       set rs = (Rel succs)\\<^sup>* `` set ws \\<and>\n       s' = foldl (\\<lambda>s x. f x s) s rs", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>case (?wsa3, ?sa3) of\n           (wsa, sa) \\<Rightarrow>\n             \\<exists>done.\n                sa = foldl (\\<lambda>x s. f s x) s done \\<and>\n                (Rel succs)\\<^sup>* `` set ws =\n                set done \\<union> (Rel succs)\\<^sup>* `` set wsa;\n   case (?wsa3, ?sa3) of (ws, s) \\<Rightarrow> ws \\<noteq> []\\<rbrakk>\n  \\<Longrightarrow> case case (?wsa3, ?sa3) of\n                         (x # ws', s) \\<Rightarrow>\n                           (succs x @ ws', f x s) of\n                    (wsa, sa) \\<Rightarrow>\n                      \\<exists>done.\n                         sa = foldl (\\<lambda>x s. f s x) s done \\<and>\n                         (Rel succs)\\<^sup>* `` set ws =\n                         set done \\<union> (Rel succs)\\<^sup>* `` set wsa", "have \"?P(ws',s')\""], ["proof (prove)\nusing this:\n  \\<lbrakk>case (?wsa3, ?sa3) of\n           (wsa, sa) \\<Rightarrow>\n             \\<exists>done.\n                sa = foldl (\\<lambda>x s. f s x) s done \\<and>\n                (Rel succs)\\<^sup>* `` set ws =\n                set done \\<union> (Rel succs)\\<^sup>* `` set wsa;\n   case (?wsa3, ?sa3) of (ws, s) \\<Rightarrow> ws \\<noteq> []\\<rbrakk>\n  \\<Longrightarrow> case case (?wsa3, ?sa3) of\n                         (x # ws', s) \\<Rightarrow>\n                           (succs x @ ws', f x s) of\n                    (wsa, sa) \\<Rightarrow>\n                      \\<exists>done.\n                         sa = foldl (\\<lambda>x s. f s x) s done \\<and>\n                         (Rel succs)\\<^sup>* `` set ws =\n                         set done \\<union> (Rel succs)\\<^sup>* `` set wsa\n\ngoal (1 subgoal):\n 1. case (ws', s') of\n    (wsa, sa) \\<Rightarrow>\n      \\<exists>done.\n         sa = foldl (\\<lambda>x s. f s x) s done \\<and>\n         (Rel succs)\\<^sup>* `` set ws =\n         set done \\<union> (Rel succs)\\<^sup>* `` set wsa", "using while_option_rule[where P=\"?P\", OF _ 0 init]"], ["proof (prove)\nusing this:\n  \\<lbrakk>case (?wsa3, ?sa3) of\n           (wsa, sa) \\<Rightarrow>\n             \\<exists>done.\n                sa = foldl (\\<lambda>x s. f s x) s done \\<and>\n                (Rel succs)\\<^sup>* `` set ws =\n                set done \\<union> (Rel succs)\\<^sup>* `` set wsa;\n   case (?wsa3, ?sa3) of (ws, s) \\<Rightarrow> ws \\<noteq> []\\<rbrakk>\n  \\<Longrightarrow> case case (?wsa3, ?sa3) of\n                         (x # ws', s) \\<Rightarrow>\n                           (succs x @ ws', f x s) of\n                    (wsa, sa) \\<Rightarrow>\n                      \\<exists>done.\n                         sa = foldl (\\<lambda>x s. f s x) s done \\<and>\n                         (Rel succs)\\<^sup>* `` set ws =\n                         set done \\<union> (Rel succs)\\<^sup>* `` set wsa\n  (\\<And>sa.\n      \\<lbrakk>case sa of\n               (wsa, sa) \\<Rightarrow>\n                 \\<exists>done.\n                    sa = foldl (\\<lambda>x s. f s x) s done \\<and>\n                    (Rel succs)\\<^sup>* `` set ws =\n                    set done \\<union> (Rel succs)\\<^sup>* `` set wsa;\n       case sa of (ws, s) \\<Rightarrow> ws \\<noteq> []\\<rbrakk>\n      \\<Longrightarrow> case case sa of\n                             (x # ws', s) \\<Rightarrow>\n                               (succs x @ ws', f x s) of\n                        (wsa, sa) \\<Rightarrow>\n                          \\<exists>done.\n                             sa = foldl (\\<lambda>x s. f s x) s done \\<and>\n                             (Rel succs)\\<^sup>* `` set ws =\n                             set done \\<union>\n                             (Rel succs)\\<^sup>* ``\n                             set wsa) \\<Longrightarrow>\n  case (ws', s') of\n  (wsa, sa) \\<Rightarrow>\n    \\<exists>done.\n       sa = foldl (\\<lambda>x s. f s x) s done \\<and>\n       (Rel succs)\\<^sup>* `` set ws =\n       set done \\<union> (Rel succs)\\<^sup>* `` set wsa\n\ngoal (1 subgoal):\n 1. case (ws', s') of\n    (wsa, sa) \\<Rightarrow>\n      \\<exists>done.\n         sa = foldl (\\<lambda>x s. f s x) s done \\<and>\n         (Rel succs)\\<^sup>* `` set ws =\n         set done \\<union> (Rel succs)\\<^sup>* `` set wsa", "by auto"], ["proof (state)\nthis:\n  case (ws', s') of\n  (wsa, sa) \\<Rightarrow>\n    \\<exists>done.\n       sa = foldl (\\<lambda>x s. f s x) s done \\<and>\n       (Rel succs)\\<^sup>* `` set ws =\n       set done \\<union> (Rel succs)\\<^sup>* `` set wsa\n\ngoal (1 subgoal):\n 1. \\<exists>rs.\n       set rs = (Rel succs)\\<^sup>* `` set ws \\<and>\n       s' = foldl (\\<lambda>s x. f x s) s rs", "then"], ["proof (chain)\npicking this:\n  case (ws', s') of\n  (wsa, sa) \\<Rightarrow>\n    \\<exists>done.\n       sa = foldl (\\<lambda>x s. f s x) s done \\<and>\n       (Rel succs)\\<^sup>* `` set ws =\n       set done \\<union> (Rel succs)\\<^sup>* `` set wsa", "show ?thesis"], ["proof (prove)\nusing this:\n  case (ws', s') of\n  (wsa, sa) \\<Rightarrow>\n    \\<exists>done.\n       sa = foldl (\\<lambda>x s. f s x) s done \\<and>\n       (Rel succs)\\<^sup>* `` set ws =\n       set done \\<union> (Rel succs)\\<^sup>* `` set wsa\n\ngoal (1 subgoal):\n 1. \\<exists>rs.\n       set rs = (Rel succs)\\<^sup>* `` set ws \\<and>\n       s' = foldl (\\<lambda>s x. f x s) s rs", "using \\<open>ws'=[]\\<close>"], ["proof (prove)\nusing this:\n  case (ws', s') of\n  (wsa, sa) \\<Rightarrow>\n    \\<exists>done.\n       sa = foldl (\\<lambda>x s. f s x) s done \\<and>\n       (Rel succs)\\<^sup>* `` set ws =\n       set done \\<union> (Rel succs)\\<^sup>* `` set wsa\n  ws' = []\n\ngoal (1 subgoal):\n 1. \\<exists>rs.\n       set rs = (Rel succs)\\<^sup>* `` set ws \\<and>\n       s' = foldl (\\<lambda>s x. f x s) s rs", "by auto"], ["proof (state)\nthis:\n  \\<exists>rs.\n     set rs = (Rel succs)\\<^sup>* `` set ws \\<and>\n     s' = foldl (\\<lambda>s x. f x s) s rs\n\ngoal:\nNo subgoals!", "qed"], ["", "definition \"worklist_tree succs f ws s =\n  (case worklist_tree_aux succs f (ws,s) of\n     None \\<Rightarrow> None | Some(ws,s) \\<Rightarrow> Some s)\""], ["", "theorem worklist_tree_Some_foldl:\n  \"worklist_tree succs f ws s = Some s' \\<Longrightarrow>\n   \\<exists>rs. set rs = ((Rel succs)\\<^sup>*) `` (set ws) \\<and>\n              s' = foldl (\\<lambda>s x. f x s) s rs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. worklist_tree succs f ws s = Some s' \\<Longrightarrow>\n    \\<exists>rs.\n       set rs = (Rel succs)\\<^sup>* `` set ws \\<and>\n       s' = foldl (\\<lambda>s x. f x s) s rs", "by(simp add: worklist_tree_def worklist_tree_aux_Some_foldl split:option.splits prod.splits)"], ["", "lemma invariant_succs:\nassumes \"invariant I succs\"\nand \"\\<forall>x\\<in>S. I x\"\nshows \"\\<forall>x \\<in> (Rel succs)\\<^sup>* `` S. I x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>(Rel succs)\\<^sup>* `` S. I x", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>(Rel succs)\\<^sup>* `` S. I x", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>(Rel succs)\\<^sup>* `` S. I x", "fix x y"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>(Rel succs)\\<^sup>* `` S. I x", "have \"(x,y) : (Rel succs)\\<^sup>* \\<Longrightarrow> I x \\<Longrightarrow> I y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(x, y) \\<in> (Rel succs)\\<^sup>*; I x\\<rbrakk>\n    \\<Longrightarrow> I y", "proof(induct rule:rtrancl_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. I x \\<Longrightarrow> I x\n 2. \\<And>y z.\n       \\<lbrakk>(x, y) \\<in> (Rel succs)\\<^sup>*; (y, z) \\<in> Rel succs;\n        I x \\<Longrightarrow> I y; I x\\<rbrakk>\n       \\<Longrightarrow> I z", "case base"], ["proof (state)\nthis:\n  I x\n\ngoal (2 subgoals):\n 1. I x \\<Longrightarrow> I x\n 2. \\<And>y z.\n       \\<lbrakk>(x, y) \\<in> (Rel succs)\\<^sup>*; (y, z) \\<in> Rel succs;\n        I x \\<Longrightarrow> I y; I x\\<rbrakk>\n       \\<Longrightarrow> I z", "thus ?case"], ["proof (prove)\nusing this:\n  I x\n\ngoal (1 subgoal):\n 1. I x", "."], ["proof (state)\nthis:\n  I x\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(x, y) \\<in> (Rel succs)\\<^sup>*; (y, z) \\<in> Rel succs;\n        I x \\<Longrightarrow> I y; I x\\<rbrakk>\n       \\<Longrightarrow> I z", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(x, y) \\<in> (Rel succs)\\<^sup>*; (y, z) \\<in> Rel succs;\n        I x \\<Longrightarrow> I y; I x\\<rbrakk>\n       \\<Longrightarrow> I z", "case step"], ["proof (state)\nthis:\n  (x, y_) \\<in> (Rel succs)\\<^sup>*\n  (y_, z_) \\<in> Rel succs\n  I x \\<Longrightarrow> I y_\n  I x\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(x, y) \\<in> (Rel succs)\\<^sup>*; (y, z) \\<in> Rel succs;\n        I x \\<Longrightarrow> I y; I x\\<rbrakk>\n       \\<Longrightarrow> I z", "with assms(1)"], ["proof (chain)\npicking this:\n  invariant I succs\n  (x, y_) \\<in> (Rel succs)\\<^sup>*\n  (y_, z_) \\<in> Rel succs\n  I x \\<Longrightarrow> I y_\n  I x", "show ?case"], ["proof (prove)\nusing this:\n  invariant I succs\n  (x, y_) \\<in> (Rel succs)\\<^sup>*\n  (y_, z_) \\<in> Rel succs\n  I x \\<Longrightarrow> I y_\n  I x\n\ngoal (1 subgoal):\n 1. I z_", "by(auto simp:invariant_def)"], ["proof (state)\nthis:\n  I z_\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<lbrakk>(x, y) \\<in> (Rel succs)\\<^sup>*; I x\\<rbrakk>\n  \\<Longrightarrow> I y\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>(Rel succs)\\<^sup>* `` S. I x", "}"], ["proof (state)\nthis:\n  \\<lbrakk>(?x2, ?y2) \\<in> (Rel succs)\\<^sup>*; I ?x2\\<rbrakk>\n  \\<Longrightarrow> I ?y2\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>(Rel succs)\\<^sup>* `` S. I x", "with assms(2)"], ["proof (chain)\npicking this:\n  \\<forall>x\\<in>S. I x\n  \\<lbrakk>(?x2, ?y2) \\<in> (Rel succs)\\<^sup>*; I ?x2\\<rbrakk>\n  \\<Longrightarrow> I ?y2", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>S. I x\n  \\<lbrakk>(?x2, ?y2) \\<in> (Rel succs)\\<^sup>*; I ?x2\\<rbrakk>\n  \\<Longrightarrow> I ?y2\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>(Rel succs)\\<^sup>* `` S. I x", "by blast"], ["proof (state)\nthis:\n  \\<forall>x\\<in>(Rel succs)\\<^sup>* `` S. I x\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma worklist_tree_aux_rule:\nassumes \"worklist_tree_aux succs f (ws,s) = Some(ws',s')\"\nand \"invariant I succs\"\nand \"\\<forall>x \\<in> set ws. I x\"\nand \"\\<And>s. P [] s s\"\nand \"\\<And>r x ws s. I x \\<Longrightarrow> \\<forall>x \\<in> set ws. I x \\<Longrightarrow> P ws (f x s) r \\<Longrightarrow> P (x#ws) s r\"\nshows \"\\<exists>rs. set rs = ((Rel succs)\\<^sup>* ) `` (set ws) \\<and> P rs s s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>rs. set rs = (Rel succs)\\<^sup>* `` set ws \\<and> P rs s s'", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>rs. set rs = (Rel succs)\\<^sup>* `` set ws \\<and> P rs s s'", "let ?R = \"(Rel succs)\\<^sup>* `` set ws\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>rs. set rs = (Rel succs)\\<^sup>* `` set ws \\<and> P rs s s'", "from worklist_tree_aux_Some_foldl[OF assms(1)]"], ["proof (chain)\npicking this:\n  \\<exists>rs.\n     set rs = (Rel succs)\\<^sup>* `` set ws \\<and>\n     s' = foldl (\\<lambda>s x. f x s) s rs", "obtain rs where\n    rs: \"set rs = ?R\" \"s' = foldl (\\<lambda>s x. f x s) s rs\""], ["proof (prove)\nusing this:\n  \\<exists>rs.\n     set rs = (Rel succs)\\<^sup>* `` set ws \\<and>\n     s' = foldl (\\<lambda>s x. f x s) s rs\n\ngoal (1 subgoal):\n 1. (\\<And>rs.\n        \\<lbrakk>set rs = (Rel succs)\\<^sup>* `` set ws;\n         s' = foldl (\\<lambda>s x. f x s) s rs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  set rs = (Rel succs)\\<^sup>* `` set ws\n  s' = foldl (\\<lambda>s x. f x s) s rs\n\ngoal (1 subgoal):\n 1. \\<exists>rs. set rs = (Rel succs)\\<^sup>* `` set ws \\<and> P rs s s'", "{"], ["proof (state)\nthis:\n  set rs = (Rel succs)\\<^sup>* `` set ws\n  s' = foldl (\\<lambda>s x. f x s) s rs\n\ngoal (1 subgoal):\n 1. \\<exists>rs. set rs = (Rel succs)\\<^sup>* `` set ws \\<and> P rs s s'", "fix xs"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>rs. set rs = (Rel succs)\\<^sup>* `` set ws \\<and> P rs s s'", "have \"(\\<forall>x \\<in> set xs. I x) \\<Longrightarrow> P xs s (foldl (\\<lambda>s x. f x s) s xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set xs. I x \\<Longrightarrow>\n    P xs s (foldl (\\<lambda>s x. f x s) s xs)", "proof(induct xs arbitrary: s)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s.\n       Ball (set []) I \\<Longrightarrow>\n       P [] s (foldl (\\<lambda>s x. f x s) s [])\n 2. \\<And>a xs s.\n       \\<lbrakk>\\<And>s.\n                   Ball (set xs) I \\<Longrightarrow>\n                   P xs s (foldl (\\<lambda>s x. f x s) s xs);\n        Ball (set (a # xs)) I\\<rbrakk>\n       \\<Longrightarrow> P (a # xs) s\n                          (foldl (\\<lambda>s x. f x s) s (a # xs))", "case Nil"], ["proof (state)\nthis:\n  \\<forall>a\\<in>set []. I a\n\ngoal (2 subgoals):\n 1. \\<And>s.\n       Ball (set []) I \\<Longrightarrow>\n       P [] s (foldl (\\<lambda>s x. f x s) s [])\n 2. \\<And>a xs s.\n       \\<lbrakk>\\<And>s.\n                   Ball (set xs) I \\<Longrightarrow>\n                   P xs s (foldl (\\<lambda>s x. f x s) s xs);\n        Ball (set (a # xs)) I\\<rbrakk>\n       \\<Longrightarrow> P (a # xs) s\n                          (foldl (\\<lambda>s x. f x s) s (a # xs))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. P [] s (foldl (\\<lambda>s x. f x s) s [])", "using assms(4)"], ["proof (prove)\nusing this:\n  P [] ?s ?s\n\ngoal (1 subgoal):\n 1. P [] s (foldl (\\<lambda>s x. f x s) s [])", "by simp"], ["proof (state)\nthis:\n  P [] s (foldl (\\<lambda>s x. f x s) s [])\n\ngoal (1 subgoal):\n 1. \\<And>a xs s.\n       \\<lbrakk>\\<And>s.\n                   Ball (set xs) I \\<Longrightarrow>\n                   P xs s (foldl (\\<lambda>s x. f x s) s xs);\n        Ball (set (a # xs)) I\\<rbrakk>\n       \\<Longrightarrow> P (a # xs) s\n                          (foldl (\\<lambda>s x. f x s) s (a # xs))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a xs s.\n       \\<lbrakk>\\<And>s.\n                   Ball (set xs) I \\<Longrightarrow>\n                   P xs s (foldl (\\<lambda>s x. f x s) s xs);\n        Ball (set (a # xs)) I\\<rbrakk>\n       \\<Longrightarrow> P (a # xs) s\n                          (foldl (\\<lambda>s x. f x s) s (a # xs))", "case Cons"], ["proof (state)\nthis:\n  \\<forall>a\\<in>set xs_. I a \\<Longrightarrow>\n  P xs_ ?s (foldl (\\<lambda>s x. f x s) ?s xs_)\n  \\<forall>a\\<in>set (a_ # xs_). I a\n\ngoal (1 subgoal):\n 1. \\<And>a xs s.\n       \\<lbrakk>\\<And>s.\n                   Ball (set xs) I \\<Longrightarrow>\n                   P xs s (foldl (\\<lambda>s x. f x s) s xs);\n        Ball (set (a # xs)) I\\<rbrakk>\n       \\<Longrightarrow> P (a # xs) s\n                          (foldl (\\<lambda>s x. f x s) s (a # xs))", "thus ?case"], ["proof (prove)\nusing this:\n  \\<forall>a\\<in>set xs_. I a \\<Longrightarrow>\n  P xs_ ?s (foldl (\\<lambda>s x. f x s) ?s xs_)\n  \\<forall>a\\<in>set (a_ # xs_). I a\n\ngoal (1 subgoal):\n 1. P (a_ # xs_) s (foldl (\\<lambda>s x. f x s) s (a_ # xs_))", "using assms(5)"], ["proof (prove)\nusing this:\n  \\<forall>a\\<in>set xs_. I a \\<Longrightarrow>\n  P xs_ ?s (foldl (\\<lambda>s x. f x s) ?s xs_)\n  \\<forall>a\\<in>set (a_ # xs_). I a\n  \\<lbrakk>I ?x; \\<forall>x\\<in>set ?ws. I x; P ?ws (f ?x ?s) ?r\\<rbrakk>\n  \\<Longrightarrow> P (?x # ?ws) ?s ?r\n\ngoal (1 subgoal):\n 1. P (a_ # xs_) s (foldl (\\<lambda>s x. f x s) s (a_ # xs_))", "by simp"], ["proof (state)\nthis:\n  P (a_ # xs_) s (foldl (\\<lambda>s x. f x s) s (a_ # xs_))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>x\\<in>set xs. I x \\<Longrightarrow>\n  P xs s (foldl (\\<lambda>s x. f x s) s xs)\n\ngoal (1 subgoal):\n 1. \\<exists>rs. set rs = (Rel succs)\\<^sup>* `` set ws \\<and> P rs s s'", "}"], ["proof (state)\nthis:\n  \\<forall>x\\<in>set ?xs2. I x \\<Longrightarrow>\n  P ?xs2 s (foldl (\\<lambda>s x. f x s) s ?xs2)\n\ngoal (1 subgoal):\n 1. \\<exists>rs. set rs = (Rel succs)\\<^sup>* `` set ws \\<and> P rs s s'", "with invariant_succs[OF assms(2,3)]"], ["proof (chain)\npicking this:\n  \\<forall>x\\<in>(Rel succs)\\<^sup>* `` set ws. I x\n  \\<forall>x\\<in>set ?xs2. I x \\<Longrightarrow>\n  P ?xs2 s (foldl (\\<lambda>s x. f x s) s ?xs2)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>(Rel succs)\\<^sup>* `` set ws. I x\n  \\<forall>x\\<in>set ?xs2. I x \\<Longrightarrow>\n  P ?xs2 s (foldl (\\<lambda>s x. f x s) s ?xs2)\n\ngoal (1 subgoal):\n 1. \\<exists>rs. set rs = (Rel succs)\\<^sup>* `` set ws \\<and> P rs s s'", "by (metis rs)"], ["proof (state)\nthis:\n  \\<exists>rs. set rs = (Rel succs)\\<^sup>* `` set ws \\<and> P rs s s'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma worklist_tree_aux_rule2:\nassumes \"worklist_tree_aux succs f (ws,s) = Some(ws',s')\"\nand \"invariant I succs\"\nand \"\\<forall>x \\<in> set ws. I x\"\nand \"S s\" and \"\\<And>x s. I x \\<Longrightarrow> S s \\<Longrightarrow> S(f x s)\"\nand \"\\<And>s. P [] s s\"\nand \"\\<And>r x ws s. I x \\<Longrightarrow> \\<forall>x \\<in> set ws. I x \\<Longrightarrow> S s\n  \\<Longrightarrow> P ws (f x s) r \\<Longrightarrow> P (x#ws) s r\"\nshows \"\\<exists>rs. set rs = ((Rel succs)\\<^sup>*) `` (set ws) \\<and> P rs s s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>rs. set rs = (Rel succs)\\<^sup>* `` set ws \\<and> P rs s s'", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>rs. set rs = (Rel succs)\\<^sup>* `` set ws \\<and> P rs s s'", "let ?R = \"(Rel succs)\\<^sup>* `` set ws\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>rs. set rs = (Rel succs)\\<^sup>* `` set ws \\<and> P rs s s'", "from worklist_tree_aux_Some_foldl[OF assms(1)]"], ["proof (chain)\npicking this:\n  \\<exists>rs.\n     set rs = (Rel succs)\\<^sup>* `` set ws \\<and>\n     s' = foldl (\\<lambda>s x. f x s) s rs", "obtain rs where\n    rs: \"set rs = ?R\" \"s' = foldl (\\<lambda>s x. f x s) s rs\""], ["proof (prove)\nusing this:\n  \\<exists>rs.\n     set rs = (Rel succs)\\<^sup>* `` set ws \\<and>\n     s' = foldl (\\<lambda>s x. f x s) s rs\n\ngoal (1 subgoal):\n 1. (\\<And>rs.\n        \\<lbrakk>set rs = (Rel succs)\\<^sup>* `` set ws;\n         s' = foldl (\\<lambda>s x. f x s) s rs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  set rs = (Rel succs)\\<^sup>* `` set ws\n  s' = foldl (\\<lambda>s x. f x s) s rs\n\ngoal (1 subgoal):\n 1. \\<exists>rs. set rs = (Rel succs)\\<^sup>* `` set ws \\<and> P rs s s'", "{"], ["proof (state)\nthis:\n  set rs = (Rel succs)\\<^sup>* `` set ws\n  s' = foldl (\\<lambda>s x. f x s) s rs\n\ngoal (1 subgoal):\n 1. \\<exists>rs. set rs = (Rel succs)\\<^sup>* `` set ws \\<and> P rs s s'", "fix xs"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>rs. set rs = (Rel succs)\\<^sup>* `` set ws \\<and> P rs s s'", "have \"(\\<forall>x \\<in> set xs. I x) \\<Longrightarrow> S s \\<Longrightarrow> P xs s (foldl (\\<lambda>s x. f x s) s xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>x\\<in>set xs. I x; S s\\<rbrakk>\n    \\<Longrightarrow> P xs s (foldl (\\<lambda>s x. f x s) s xs)", "proof(induct xs arbitrary: s)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s.\n       \\<lbrakk>Ball (set []) I; S s\\<rbrakk>\n       \\<Longrightarrow> P [] s (foldl (\\<lambda>s x. f x s) s [])\n 2. \\<And>a xs s.\n       \\<lbrakk>\\<And>s.\n                   \\<lbrakk>Ball (set xs) I; S s\\<rbrakk>\n                   \\<Longrightarrow> P xs s\n(foldl (\\<lambda>s x. f x s) s xs);\n        Ball (set (a # xs)) I; S s\\<rbrakk>\n       \\<Longrightarrow> P (a # xs) s\n                          (foldl (\\<lambda>s x. f x s) s (a # xs))", "case Nil"], ["proof (state)\nthis:\n  \\<forall>a\\<in>set []. I a\n  S s\n\ngoal (2 subgoals):\n 1. \\<And>s.\n       \\<lbrakk>Ball (set []) I; S s\\<rbrakk>\n       \\<Longrightarrow> P [] s (foldl (\\<lambda>s x. f x s) s [])\n 2. \\<And>a xs s.\n       \\<lbrakk>\\<And>s.\n                   \\<lbrakk>Ball (set xs) I; S s\\<rbrakk>\n                   \\<Longrightarrow> P xs s\n(foldl (\\<lambda>s x. f x s) s xs);\n        Ball (set (a # xs)) I; S s\\<rbrakk>\n       \\<Longrightarrow> P (a # xs) s\n                          (foldl (\\<lambda>s x. f x s) s (a # xs))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. P [] s (foldl (\\<lambda>s x. f x s) s [])", "using assms(6)"], ["proof (prove)\nusing this:\n  P [] ?s ?s\n\ngoal (1 subgoal):\n 1. P [] s (foldl (\\<lambda>s x. f x s) s [])", "by simp"], ["proof (state)\nthis:\n  P [] s (foldl (\\<lambda>s x. f x s) s [])\n\ngoal (1 subgoal):\n 1. \\<And>a xs s.\n       \\<lbrakk>\\<And>s.\n                   \\<lbrakk>Ball (set xs) I; S s\\<rbrakk>\n                   \\<Longrightarrow> P xs s\n(foldl (\\<lambda>s x. f x s) s xs);\n        Ball (set (a # xs)) I; S s\\<rbrakk>\n       \\<Longrightarrow> P (a # xs) s\n                          (foldl (\\<lambda>s x. f x s) s (a # xs))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a xs s.\n       \\<lbrakk>\\<And>s.\n                   \\<lbrakk>Ball (set xs) I; S s\\<rbrakk>\n                   \\<Longrightarrow> P xs s\n(foldl (\\<lambda>s x. f x s) s xs);\n        Ball (set (a # xs)) I; S s\\<rbrakk>\n       \\<Longrightarrow> P (a # xs) s\n                          (foldl (\\<lambda>s x. f x s) s (a # xs))", "case Cons"], ["proof (state)\nthis:\n  \\<lbrakk>\\<forall>a\\<in>set xs_. I a; S ?s\\<rbrakk>\n  \\<Longrightarrow> P xs_ ?s (foldl (\\<lambda>s x. f x s) ?s xs_)\n  \\<forall>a\\<in>set (a_ # xs_). I a\n  S s\n\ngoal (1 subgoal):\n 1. \\<And>a xs s.\n       \\<lbrakk>\\<And>s.\n                   \\<lbrakk>Ball (set xs) I; S s\\<rbrakk>\n                   \\<Longrightarrow> P xs s\n(foldl (\\<lambda>s x. f x s) s xs);\n        Ball (set (a # xs)) I; S s\\<rbrakk>\n       \\<Longrightarrow> P (a # xs) s\n                          (foldl (\\<lambda>s x. f x s) s (a # xs))", "thus ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<forall>a\\<in>set xs_. I a; S ?s\\<rbrakk>\n  \\<Longrightarrow> P xs_ ?s (foldl (\\<lambda>s x. f x s) ?s xs_)\n  \\<forall>a\\<in>set (a_ # xs_). I a\n  S s\n\ngoal (1 subgoal):\n 1. P (a_ # xs_) s (foldl (\\<lambda>s x. f x s) s (a_ # xs_))", "using assms(5,7)"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<forall>a\\<in>set xs_. I a; S ?s\\<rbrakk>\n  \\<Longrightarrow> P xs_ ?s (foldl (\\<lambda>s x. f x s) ?s xs_)\n  \\<forall>a\\<in>set (a_ # xs_). I a\n  S s\n  \\<lbrakk>I ?x; S ?s\\<rbrakk> \\<Longrightarrow> S (f ?x ?s)\n  \\<lbrakk>I ?x; \\<forall>x\\<in>set ?ws. I x; S ?s;\n   P ?ws (f ?x ?s) ?r\\<rbrakk>\n  \\<Longrightarrow> P (?x # ?ws) ?s ?r\n\ngoal (1 subgoal):\n 1. P (a_ # xs_) s (foldl (\\<lambda>s x. f x s) s (a_ # xs_))", "by simp"], ["proof (state)\nthis:\n  P (a_ # xs_) s (foldl (\\<lambda>s x. f x s) s (a_ # xs_))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<lbrakk>\\<forall>x\\<in>set xs. I x; S s\\<rbrakk>\n  \\<Longrightarrow> P xs s (foldl (\\<lambda>s x. f x s) s xs)\n\ngoal (1 subgoal):\n 1. \\<exists>rs. set rs = (Rel succs)\\<^sup>* `` set ws \\<and> P rs s s'", "}"], ["proof (state)\nthis:\n  \\<lbrakk>\\<forall>x\\<in>set ?xs2. I x; S s\\<rbrakk>\n  \\<Longrightarrow> P ?xs2 s (foldl (\\<lambda>s x. f x s) s ?xs2)\n\ngoal (1 subgoal):\n 1. \\<exists>rs. set rs = (Rel succs)\\<^sup>* `` set ws \\<and> P rs s s'", "with invariant_succs[OF assms(2,3)] assms(4)"], ["proof (chain)\npicking this:\n  \\<forall>x\\<in>(Rel succs)\\<^sup>* `` set ws. I x\n  S s\n  \\<lbrakk>\\<forall>x\\<in>set ?xs2. I x; S s\\<rbrakk>\n  \\<Longrightarrow> P ?xs2 s (foldl (\\<lambda>s x. f x s) s ?xs2)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>(Rel succs)\\<^sup>* `` set ws. I x\n  S s\n  \\<lbrakk>\\<forall>x\\<in>set ?xs2. I x; S s\\<rbrakk>\n  \\<Longrightarrow> P ?xs2 s (foldl (\\<lambda>s x. f x s) s ?xs2)\n\ngoal (1 subgoal):\n 1. \\<exists>rs. set rs = (Rel succs)\\<^sup>* `` set ws \\<and> P rs s s'", "by (metis rs)"], ["proof (state)\nthis:\n  \\<exists>rs. set rs = (Rel succs)\\<^sup>* `` set ws \\<and> P rs s s'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma worklist_tree_rule:\nassumes \"worklist_tree succs f ws s = Some(s')\"\nand \"invariant I succs\"\nand \"\\<forall>x \\<in> set ws. I x\"\nand \"\\<And>s. P [] s s\"\nand \"\\<And>r x ws s. I x \\<Longrightarrow> \\<forall>x \\<in> set ws. I x \\<Longrightarrow> P ws (f x s) r \\<Longrightarrow> P (x#ws) s r\"\nshows \"\\<exists>rs. set rs = ((Rel succs)\\<^sup>*) `` (set ws) \\<and> P rs s s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>rs. set rs = (Rel succs)\\<^sup>* `` set ws \\<and> P rs s s'", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>rs. set rs = (Rel succs)\\<^sup>* `` set ws \\<and> P rs s s'", "obtain ws' where \"worklist_tree_aux succs f (ws,s) = Some(ws',s')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>ws'.\n        worklist_tree_aux succs f (ws, s) = Some (ws', s') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using assms(1)"], ["proof (prove)\nusing this:\n  worklist_tree succs f ws s = Some s'\n\ngoal (1 subgoal):\n 1. (\\<And>ws'.\n        worklist_tree_aux succs f (ws, s) = Some (ws', s') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by(simp add: worklist_tree_def split: option.split_asm prod.split_asm)"], ["proof (state)\nthis:\n  worklist_tree_aux succs f (ws, s) = Some (ws', s')\n\ngoal (1 subgoal):\n 1. \\<exists>rs. set rs = (Rel succs)\\<^sup>* `` set ws \\<and> P rs s s'", "from worklist_tree_aux_rule[where P=P,OF this assms(2-5)]"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<And>r x ws s.\n              \\<lbrakk>I x; \\<forall>x\\<in>set ws. I x;\n               P ws (f x s) r\\<rbrakk>\n              \\<Longrightarrow> I x;\n   \\<And>r x ws s.\n      \\<lbrakk>I x; \\<forall>x\\<in>set ws. I x; P ws (f x s) r\\<rbrakk>\n      \\<Longrightarrow> \\<forall>x\\<in>set ws. I x;\n   \\<And>r x ws s.\n      \\<lbrakk>I x; \\<forall>x\\<in>set ws. I x; P ws (f x s) r\\<rbrakk>\n      \\<Longrightarrow> P ws (f x s) r\\<rbrakk>\n  \\<Longrightarrow> \\<exists>rs.\n                       set rs = (Rel succs)\\<^sup>* `` set ws \\<and>\n                       P rs s s'", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>r x ws s.\n              \\<lbrakk>I x; \\<forall>x\\<in>set ws. I x;\n               P ws (f x s) r\\<rbrakk>\n              \\<Longrightarrow> I x;\n   \\<And>r x ws s.\n      \\<lbrakk>I x; \\<forall>x\\<in>set ws. I x; P ws (f x s) r\\<rbrakk>\n      \\<Longrightarrow> \\<forall>x\\<in>set ws. I x;\n   \\<And>r x ws s.\n      \\<lbrakk>I x; \\<forall>x\\<in>set ws. I x; P ws (f x s) r\\<rbrakk>\n      \\<Longrightarrow> P ws (f x s) r\\<rbrakk>\n  \\<Longrightarrow> \\<exists>rs.\n                       set rs = (Rel succs)\\<^sup>* `` set ws \\<and>\n                       P rs s s'\n\ngoal (1 subgoal):\n 1. \\<exists>rs. set rs = (Rel succs)\\<^sup>* `` set ws \\<and> P rs s s'", "by blast"], ["proof (state)\nthis:\n  \\<exists>rs. set rs = (Rel succs)\\<^sup>* `` set ws \\<and> P rs s s'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma worklist_tree_rule2:\nassumes \"worklist_tree succs f ws s = Some(s')\"\nand \"invariant I succs\"\nand \"\\<forall>x \\<in> set ws. I x\"\nand \"S s\" and \"\\<And>x s. I x \\<Longrightarrow> S s \\<Longrightarrow> S(f x s)\"\nand \"\\<And>s. P [] s s\"\nand \"\\<And>r x ws s. I x \\<Longrightarrow> \\<forall>x \\<in> set ws. I x \\<Longrightarrow> S s\n  \\<Longrightarrow> P ws (f x s) r \\<Longrightarrow> P (x#ws) s r\"\nshows \"\\<exists>rs. set rs = ((Rel succs)\\<^sup>*) `` (set ws) \\<and> P rs s s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>rs. set rs = (Rel succs)\\<^sup>* `` set ws \\<and> P rs s s'", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>rs. set rs = (Rel succs)\\<^sup>* `` set ws \\<and> P rs s s'", "obtain ws' where \"worklist_tree_aux succs f (ws,s) = Some(ws',s')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>ws'.\n        worklist_tree_aux succs f (ws, s) = Some (ws', s') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using assms(1)"], ["proof (prove)\nusing this:\n  worklist_tree succs f ws s = Some s'\n\ngoal (1 subgoal):\n 1. (\\<And>ws'.\n        worklist_tree_aux succs f (ws, s) = Some (ws', s') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by(simp add: worklist_tree_def split: option.split_asm prod.split_asm)"], ["proof (state)\nthis:\n  worklist_tree_aux succs f (ws, s) = Some (ws', s')\n\ngoal (1 subgoal):\n 1. \\<exists>rs. set rs = (Rel succs)\\<^sup>* `` set ws \\<and> P rs s s'", "from worklist_tree_aux_rule2[where P=P and S=S,OF this assms(2-7)]"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<And>x s. \\<lbrakk>I x; S s\\<rbrakk> \\<Longrightarrow> I x;\n   \\<And>x s. \\<lbrakk>I x; S s\\<rbrakk> \\<Longrightarrow> S s;\n   \\<And>r x ws s.\n      \\<lbrakk>I x; \\<forall>x\\<in>set ws. I x; S s; P ws (f x s) r\\<rbrakk>\n      \\<Longrightarrow> I x;\n   \\<And>r x ws s.\n      \\<lbrakk>I x; \\<forall>x\\<in>set ws. I x; S s; P ws (f x s) r\\<rbrakk>\n      \\<Longrightarrow> \\<forall>x\\<in>set ws. I x;\n   \\<And>r x ws s.\n      \\<lbrakk>I x; \\<forall>x\\<in>set ws. I x; S s; P ws (f x s) r\\<rbrakk>\n      \\<Longrightarrow> S s;\n   \\<And>r x ws s.\n      \\<lbrakk>I x; \\<forall>x\\<in>set ws. I x; S s; P ws (f x s) r\\<rbrakk>\n      \\<Longrightarrow> P ws (f x s) r\\<rbrakk>\n  \\<Longrightarrow> \\<exists>rs.\n                       set rs = (Rel succs)\\<^sup>* `` set ws \\<and>\n                       P rs s s'", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>x s. \\<lbrakk>I x; S s\\<rbrakk> \\<Longrightarrow> I x;\n   \\<And>x s. \\<lbrakk>I x; S s\\<rbrakk> \\<Longrightarrow> S s;\n   \\<And>r x ws s.\n      \\<lbrakk>I x; \\<forall>x\\<in>set ws. I x; S s; P ws (f x s) r\\<rbrakk>\n      \\<Longrightarrow> I x;\n   \\<And>r x ws s.\n      \\<lbrakk>I x; \\<forall>x\\<in>set ws. I x; S s; P ws (f x s) r\\<rbrakk>\n      \\<Longrightarrow> \\<forall>x\\<in>set ws. I x;\n   \\<And>r x ws s.\n      \\<lbrakk>I x; \\<forall>x\\<in>set ws. I x; S s; P ws (f x s) r\\<rbrakk>\n      \\<Longrightarrow> S s;\n   \\<And>r x ws s.\n      \\<lbrakk>I x; \\<forall>x\\<in>set ws. I x; S s; P ws (f x s) r\\<rbrakk>\n      \\<Longrightarrow> P ws (f x s) r\\<rbrakk>\n  \\<Longrightarrow> \\<exists>rs.\n                       set rs = (Rel succs)\\<^sup>* `` set ws \\<and>\n                       P rs s s'\n\ngoal (1 subgoal):\n 1. \\<exists>rs. set rs = (Rel succs)\\<^sup>* `` set ws \\<and> P rs s s'", "by blast"], ["proof (state)\nthis:\n  \\<exists>rs. set rs = (Rel succs)\\<^sup>* `` set ws \\<and> P rs s s'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma worklist_tree_aux_state_inv:\nassumes \"worklist_tree_aux succs f (ws,s) = Some(ws',s')\"\nand \"I s\"\nand \"\\<And>x s. I s \\<Longrightarrow> I(f x s)\"\nshows \"I s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. I s'", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. I s'", "from worklist_tree_aux_rule[where P=\"\\<lambda>ws s s'. I s \\<longrightarrow> I s'\" and I=\"\\<lambda>x. True\",\n    OF assms(1)] assms(2-3)"], ["proof (chain)\npicking this:\n  \\<lbrakk>invariant (\\<lambda>x. True) succs; \\<forall>x\\<in>set ws. True;\n   \\<And>s. I s \\<longrightarrow> I s;\n   \\<And>r x ws s.\n      \\<lbrakk>True; \\<forall>x\\<in>set ws. True;\n       I (f x s) \\<longrightarrow> I r\\<rbrakk>\n      \\<Longrightarrow> I s \\<longrightarrow> I r\\<rbrakk>\n  \\<Longrightarrow> \\<exists>rs.\n                       set rs = (Rel succs)\\<^sup>* `` set ws \\<and>\n                       (I s \\<longrightarrow> I s')\n  I s\n  I ?s \\<Longrightarrow> I (f ?x ?s)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>invariant (\\<lambda>x. True) succs; \\<forall>x\\<in>set ws. True;\n   \\<And>s. I s \\<longrightarrow> I s;\n   \\<And>r x ws s.\n      \\<lbrakk>True; \\<forall>x\\<in>set ws. True;\n       I (f x s) \\<longrightarrow> I r\\<rbrakk>\n      \\<Longrightarrow> I s \\<longrightarrow> I r\\<rbrakk>\n  \\<Longrightarrow> \\<exists>rs.\n                       set rs = (Rel succs)\\<^sup>* `` set ws \\<and>\n                       (I s \\<longrightarrow> I s')\n  I s\n  I ?s \\<Longrightarrow> I (f ?x ?s)\n\ngoal (1 subgoal):\n 1. I s'", "by(auto simp: invariant_def)"], ["proof (state)\nthis:\n  I s'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma worklist_tree_state_inv:\n  \"worklist_tree succs f ws s = Some(s')\n   \\<Longrightarrow> I s \\<Longrightarrow> (\\<And>x s. I s \\<Longrightarrow> I(f x s)) \\<Longrightarrow> I s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>worklist_tree succs f ws s = Some s'; I s;\n     \\<And>x s. I s \\<Longrightarrow> I (f x s)\\<rbrakk>\n    \\<Longrightarrow> I s'", "unfolding worklist_tree_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(case worklist_tree_aux succs f (ws, s) of\n              None \\<Rightarrow> None\n              | Some (ws, xa) \\<Rightarrow> Some xa) =\n             Some s';\n     I s; \\<And>x s. I s \\<Longrightarrow> I (f x s)\\<rbrakk>\n    \\<Longrightarrow> I s'", "by(auto intro: worklist_tree_aux_state_inv split: option.splits)"], ["", "locale set_modulo = quasi_order +\nfixes empty :: \"'s\"\nand insert_mod :: \"'a \\<Rightarrow> 's \\<Rightarrow> 's\"\nand set_of :: \"'s \\<Rightarrow> 'a set\"\nand I :: \"'a \\<Rightarrow> bool\"\nand S :: \"'s \\<Rightarrow> bool\"\nassumes set_of_empty: \"set_of empty = {}\"\nand set_of_insert_mod: \"I x \\<Longrightarrow> S s \\<and> (\\<forall>x \\<in> set_of s. I x)\n  \\<Longrightarrow>\n  set_of(insert_mod x s) = insert x (set_of s) \\<or>\n  (\\<exists>y \\<in> set_of s. x \\<preceq> y) \\<and> set_of (insert_mod x s) = set_of s\"\nand S_empty: \"S empty\"\nand S_insert_mod: \"S s \\<Longrightarrow> S (insert_mod x s)\"\nbegin"], ["", "definition insert_mod2 :: \"('b \\<Rightarrow> bool) \\<Rightarrow> ('b \\<Rightarrow> 'a) \\<Rightarrow> 'b \\<Rightarrow> 's \\<Rightarrow> 's\" where\n\"insert_mod2 P f x s = (if P x then insert_mod (f x) s else s)\""], ["", "definition \"SI s = (S s \\<and> (\\<forall>x \\<in> set_of s. I x))\""], ["", "lemma SI_empty: \"SI empty\""], ["proof (prove)\ngoal (1 subgoal):\n 1. SI empty", "by(simp add: SI_def S_empty set_of_empty)"], ["", "lemma SI_insert_mod:\n  \"I x \\<Longrightarrow> SI s \\<Longrightarrow> SI (insert_mod x s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>I x; SI s\\<rbrakk> \\<Longrightarrow> SI (insert_mod x s)", "apply(simp add: SI_def S_insert_mod)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>I x; S s \\<and> (\\<forall>x\\<in>set_of s. I x)\\<rbrakk>\n    \\<Longrightarrow> Ball (set_of (insert_mod x s)) I", "by (metis insertE set_of_insert_mod)"], ["", "lemma SI_insert_mod2: \"(\\<And>x. inv0 x \\<Longrightarrow> I (f x)) \\<Longrightarrow>\n  inv0 x \\<Longrightarrow> SI s \\<Longrightarrow> SI (insert_mod2 P f x s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>x. inv0 x \\<Longrightarrow> I (f x); inv0 x;\n     SI s\\<rbrakk>\n    \\<Longrightarrow> SI (insert_mod2 P f x s)", "by (metis insert_mod2_def SI_insert_mod)"], ["", "definition worklist_tree_coll_aux ::\n  \"('b \\<Rightarrow> 'b list) \\<Rightarrow> ('b \\<Rightarrow> bool) \\<Rightarrow> ('b \\<Rightarrow> 'a) \\<Rightarrow> 'b list \\<Rightarrow> 's \\<Rightarrow> 's option\"\nwhere\n\"worklist_tree_coll_aux succs P f = worklist_tree succs (insert_mod2 P f)\""], ["", "definition worklist_tree_coll ::\n  \"('b \\<Rightarrow> 'b list) \\<Rightarrow> ('b \\<Rightarrow> bool) \\<Rightarrow> ('b \\<Rightarrow> 'a) \\<Rightarrow> 'b list \\<Rightarrow> 's option\"\nwhere\n\"worklist_tree_coll succs P f ws = worklist_tree_coll_aux succs P f ws empty\""], ["", "lemma worklist_tree_coll_aux_equiv:\nassumes \"worklist_tree_coll_aux succs P f ws s = Some s'\"\nand \"invariant inv0 succs\"\nand \"\\<forall>x \\<in> set ws. inv0 x\"\nand \"\\<And>x. inv0 x \\<Longrightarrow> I(f x)\"\nand \"SI s\"\nshows \"set_of s' =\\<^sub>\\<preceq>\n  f ` {x : (Rel succs)\\<^sup>* `` (set ws). P x} \\<union> set_of s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set_of s' =\\<^sub>\\<preceq>\n    f ` {x \\<in> (Rel succs)\\<^sup>* `` set ws. P x} \\<union> set_of s", "apply(insert assms(1))"], ["proof (prove)\ngoal (1 subgoal):\n 1. worklist_tree_coll_aux succs P f ws s = Some s' \\<Longrightarrow>\n    set_of s' =\\<^sub>\\<preceq>\n    f ` {x \\<in> (Rel succs)\\<^sup>* `` set ws. P x} \\<union> set_of s", "unfolding worklist_tree_coll_aux_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. worklist_tree succs (insert_mod2 P f) ws s = Some s' \\<Longrightarrow>\n    set_of s' =\\<^sub>\\<preceq>\n    f ` {x \\<in> (Rel succs)\\<^sup>* `` set ws. P x} \\<union> set_of s", "apply(drule worklist_tree_rule2[where I = inv0 and S = SI and\n  P = \"\\<lambda>ws s s'. SI s \\<longrightarrow> set_of s' =\\<^sub>\\<preceq> f ` {x : set ws. P x} \\<union> set_of s\",\n  OF _ assms(2,3,5)])"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x s.\n       \\<lbrakk>inv0 x; SI s\\<rbrakk>\n       \\<Longrightarrow> SI (insert_mod2 P f x s)\n 2. \\<And>s.\n       SI s \\<longrightarrow>\n       set_of s =\\<^sub>\\<preceq>\n       f ` {x \\<in> set []. P x} \\<union> set_of s\n 3. \\<And>r x ws s.\n       \\<lbrakk>inv0 x; \\<forall>x\\<in>set ws. inv0 x; SI s;\n        SI (insert_mod2 P f x s) \\<longrightarrow>\n        set_of r =\\<^sub>\\<preceq>\n        f ` {x \\<in> set ws. P x} \\<union>\n        set_of (insert_mod2 P f x s)\\<rbrakk>\n       \\<Longrightarrow> SI s \\<longrightarrow>\n                         set_of r =\\<^sub>\\<preceq>\n                         f ` {xa \\<in> set (x # ws). P xa} \\<union> set_of s\n 4. \\<exists>rs.\n       set rs = (Rel succs)\\<^sup>* `` set ws \\<and>\n       (SI s \\<longrightarrow>\n        set_of s' =\\<^sub>\\<preceq>\n        f ` {x \\<in> set rs. P x} \\<union> set_of s) \\<Longrightarrow>\n    set_of s' =\\<^sub>\\<preceq>\n    f ` {x \\<in> (Rel succs)\\<^sup>* `` set ws. P x} \\<union> set_of s", "apply(simp add: SI_insert_mod2 assms(4))"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>s.\n       SI s \\<longrightarrow>\n       set_of s =\\<^sub>\\<preceq>\n       f ` {x \\<in> set []. P x} \\<union> set_of s\n 2. \\<And>r x ws s.\n       \\<lbrakk>inv0 x; \\<forall>x\\<in>set ws. inv0 x; SI s;\n        SI (insert_mod2 P f x s) \\<longrightarrow>\n        set_of r =\\<^sub>\\<preceq>\n        f ` {x \\<in> set ws. P x} \\<union>\n        set_of (insert_mod2 P f x s)\\<rbrakk>\n       \\<Longrightarrow> SI s \\<longrightarrow>\n                         set_of r =\\<^sub>\\<preceq>\n                         f ` {xa \\<in> set (x # ws). P xa} \\<union> set_of s\n 3. \\<exists>rs.\n       set rs = (Rel succs)\\<^sup>* `` set ws \\<and>\n       (SI s \\<longrightarrow>\n        set_of s' =\\<^sub>\\<preceq>\n        f ` {x \\<in> set rs. P x} \\<union> set_of s) \\<Longrightarrow>\n    set_of s' =\\<^sub>\\<preceq>\n    f ` {x \\<in> (Rel succs)\\<^sup>* `` set ws. P x} \\<union> set_of s", "apply(clarsimp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>r x ws s.\n       \\<lbrakk>inv0 x; \\<forall>x\\<in>set ws. inv0 x; SI s;\n        SI (insert_mod2 P f x s) \\<longrightarrow>\n        set_of r =\\<^sub>\\<preceq>\n        f ` {x \\<in> set ws. P x} \\<union>\n        set_of (insert_mod2 P f x s)\\<rbrakk>\n       \\<Longrightarrow> SI s \\<longrightarrow>\n                         set_of r =\\<^sub>\\<preceq>\n                         f ` {xa \\<in> set (x # ws). P xa} \\<union> set_of s\n 2. \\<exists>rs.\n       set rs = (Rel succs)\\<^sup>* `` set ws \\<and>\n       (SI s \\<longrightarrow>\n        set_of s' =\\<^sub>\\<preceq>\n        f ` {x \\<in> set rs. P x} \\<union> set_of s) \\<Longrightarrow>\n    set_of s' =\\<^sub>\\<preceq>\n    f ` {x \\<in> (Rel succs)\\<^sup>* `` set ws. P x} \\<union> set_of s", "apply(clarsimp simp add: insert_mod2_def split: if_split_asm)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>r x ws s.\n       \\<lbrakk>inv0 x; \\<forall>x\\<in>set ws. inv0 x; SI s; P x;\n        SI (insert_mod (f x) s) \\<longrightarrow>\n        set_of r =\\<^sub>\\<preceq>\n        f ` {x \\<in> set ws. P x} \\<union>\n        set_of (insert_mod (f x) s)\\<rbrakk>\n       \\<Longrightarrow> set_of r =\\<^sub>\\<preceq>\n                         f `\n                         {xa.\n                          (xa = x \\<or> xa \\<in> set ws) \\<and>\n                          P xa} \\<union>\n                         set_of s\n 2. \\<And>r x ws s.\n       \\<lbrakk>inv0 x; \\<forall>x\\<in>set ws. inv0 x; SI s; \\<not> P x;\n        set_of r =\\<^sub>\\<preceq>\n        f ` {x \\<in> set ws. P x} \\<union> set_of s\\<rbrakk>\n       \\<Longrightarrow> set_of r =\\<^sub>\\<preceq>\n                         f `\n                         {xa.\n                          (xa = x \\<or> xa \\<in> set ws) \\<and>\n                          P xa} \\<union>\n                         set_of s\n 3. \\<exists>rs.\n       set rs = (Rel succs)\\<^sup>* `` set ws \\<and>\n       (SI s \\<longrightarrow>\n        set_of s' =\\<^sub>\\<preceq>\n        f ` {x \\<in> set rs. P x} \\<union> set_of s) \\<Longrightarrow>\n    set_of s' =\\<^sub>\\<preceq>\n    f ` {x \\<in> (Rel succs)\\<^sup>* `` set ws. P x} \\<union> set_of s", "apply(frule assms(4))"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>r x ws s.\n       \\<lbrakk>inv0 x; \\<forall>x\\<in>set ws. inv0 x; SI s; P x;\n        SI (insert_mod (f x) s) \\<longrightarrow>\n        set_of r =\\<^sub>\\<preceq>\n        f ` {x \\<in> set ws. P x} \\<union> set_of (insert_mod (f x) s);\n        I (f x)\\<rbrakk>\n       \\<Longrightarrow> set_of r =\\<^sub>\\<preceq>\n                         f `\n                         {xa.\n                          (xa = x \\<or> xa \\<in> set ws) \\<and>\n                          P xa} \\<union>\n                         set_of s\n 2. \\<And>r x ws s.\n       \\<lbrakk>inv0 x; \\<forall>x\\<in>set ws. inv0 x; SI s; \\<not> P x;\n        set_of r =\\<^sub>\\<preceq>\n        f ` {x \\<in> set ws. P x} \\<union> set_of s\\<rbrakk>\n       \\<Longrightarrow> set_of r =\\<^sub>\\<preceq>\n                         f `\n                         {xa.\n                          (xa = x \\<or> xa \\<in> set ws) \\<and>\n                          P xa} \\<union>\n                         set_of s\n 3. \\<exists>rs.\n       set rs = (Rel succs)\\<^sup>* `` set ws \\<and>\n       (SI s \\<longrightarrow>\n        set_of s' =\\<^sub>\\<preceq>\n        f ` {x \\<in> set rs. P x} \\<union> set_of s) \\<Longrightarrow>\n    set_of s' =\\<^sub>\\<preceq>\n    f ` {x \\<in> (Rel succs)\\<^sup>* `` set ws. P x} \\<union> set_of s", "apply(frule SI_def[THEN iffD1])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>r x ws s.\n       \\<lbrakk>inv0 x; \\<forall>x\\<in>set ws. inv0 x; SI s; P x;\n        SI (insert_mod (f x) s) \\<longrightarrow>\n        set_of r =\\<^sub>\\<preceq>\n        f ` {x \\<in> set ws. P x} \\<union> set_of (insert_mod (f x) s);\n        I (f x); S s \\<and> (\\<forall>x\\<in>set_of s. I x)\\<rbrakk>\n       \\<Longrightarrow> set_of r =\\<^sub>\\<preceq>\n                         f `\n                         {xa.\n                          (xa = x \\<or> xa \\<in> set ws) \\<and>\n                          P xa} \\<union>\n                         set_of s\n 2. \\<And>r x ws s.\n       \\<lbrakk>inv0 x; \\<forall>x\\<in>set ws. inv0 x; SI s; \\<not> P x;\n        set_of r =\\<^sub>\\<preceq>\n        f ` {x \\<in> set ws. P x} \\<union> set_of s\\<rbrakk>\n       \\<Longrightarrow> set_of r =\\<^sub>\\<preceq>\n                         f `\n                         {xa.\n                          (xa = x \\<or> xa \\<in> set ws) \\<and>\n                          P xa} \\<union>\n                         set_of s\n 3. \\<exists>rs.\n       set rs = (Rel succs)\\<^sup>* `` set ws \\<and>\n       (SI s \\<longrightarrow>\n        set_of s' =\\<^sub>\\<preceq>\n        f ` {x \\<in> set rs. P x} \\<union> set_of s) \\<Longrightarrow>\n    set_of s' =\\<^sub>\\<preceq>\n    f ` {x \\<in> (Rel succs)\\<^sup>* `` set ws. P x} \\<union> set_of s", "apply(frule (1) set_of_insert_mod)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>r x ws s.\n       \\<lbrakk>inv0 x; \\<forall>x\\<in>set ws. inv0 x; SI s; P x;\n        SI (insert_mod (f x) s) \\<longrightarrow>\n        set_of r =\\<^sub>\\<preceq>\n        f ` {x \\<in> set ws. P x} \\<union> set_of (insert_mod (f x) s);\n        I (f x); S s \\<and> (\\<forall>x\\<in>set_of s. I x);\n        set_of (insert_mod (f x) s) = insert (f x) (set_of s) \\<or>\n        (\\<exists>y\\<in>set_of s. f x \\<preceq> y) \\<and>\n        set_of (insert_mod (f x) s) = set_of s\\<rbrakk>\n       \\<Longrightarrow> set_of r =\\<^sub>\\<preceq>\n                         f `\n                         {xa.\n                          (xa = x \\<or> xa \\<in> set ws) \\<and>\n                          P xa} \\<union>\n                         set_of s\n 2. \\<And>r x ws s.\n       \\<lbrakk>inv0 x; \\<forall>x\\<in>set ws. inv0 x; SI s; \\<not> P x;\n        set_of r =\\<^sub>\\<preceq>\n        f ` {x \\<in> set ws. P x} \\<union> set_of s\\<rbrakk>\n       \\<Longrightarrow> set_of r =\\<^sub>\\<preceq>\n                         f `\n                         {xa.\n                          (xa = x \\<or> xa \\<in> set ws) \\<and>\n                          P xa} \\<union>\n                         set_of s\n 3. \\<exists>rs.\n       set rs = (Rel succs)\\<^sup>* `` set ws \\<and>\n       (SI s \\<longrightarrow>\n        set_of s' =\\<^sub>\\<preceq>\n        f ` {x \\<in> set rs. P x} \\<union> set_of s) \\<Longrightarrow>\n    set_of s' =\\<^sub>\\<preceq>\n    f ` {x \\<in> (Rel succs)\\<^sup>* `` set ws. P x} \\<union> set_of s", "apply (simp add: SI_insert_mod)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>r x ws s.\n       \\<lbrakk>inv0 x; \\<forall>x\\<in>set ws. inv0 x; SI s; P x;\n        set_of r =\\<^sub>\\<preceq>\n        f ` {x \\<in> set ws. P x} \\<union> set_of (insert_mod (f x) s);\n        I (f x); S s \\<and> (\\<forall>x\\<in>set_of s. I x);\n        set_of (insert_mod (f x) s) = insert (f x) (set_of s) \\<or>\n        (\\<exists>y\\<in>set_of s. f x \\<preceq> y) \\<and>\n        set_of (insert_mod (f x) s) = set_of s\\<rbrakk>\n       \\<Longrightarrow> set_of r =\\<^sub>\\<preceq>\n                         f `\n                         {xa.\n                          (xa = x \\<or> xa \\<in> set ws) \\<and>\n                          P xa} \\<union>\n                         set_of s\n 2. \\<And>r x ws s.\n       \\<lbrakk>inv0 x; \\<forall>x\\<in>set ws. inv0 x; SI s; \\<not> P x;\n        set_of r =\\<^sub>\\<preceq>\n        f ` {x \\<in> set ws. P x} \\<union> set_of s\\<rbrakk>\n       \\<Longrightarrow> set_of r =\\<^sub>\\<preceq>\n                         f `\n                         {xa.\n                          (xa = x \\<or> xa \\<in> set ws) \\<and>\n                          P xa} \\<union>\n                         set_of s\n 3. \\<exists>rs.\n       set rs = (Rel succs)\\<^sup>* `` set ws \\<and>\n       (SI s \\<longrightarrow>\n        set_of s' =\\<^sub>\\<preceq>\n        f ` {x \\<in> set rs. P x} \\<union> set_of s) \\<Longrightarrow>\n    set_of s' =\\<^sub>\\<preceq>\n    f ` {x \\<in> (Rel succs)\\<^sup>* `` set ws. P x} \\<union> set_of s", "apply(erule disjE)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>r x ws s.\n       \\<lbrakk>inv0 x; \\<forall>x\\<in>set ws. inv0 x; SI s; P x;\n        set_of r =\\<^sub>\\<preceq>\n        f ` {x \\<in> set ws. P x} \\<union> set_of (insert_mod (f x) s);\n        I (f x); S s \\<and> (\\<forall>x\\<in>set_of s. I x);\n        set_of (insert_mod (f x) s) = insert (f x) (set_of s)\\<rbrakk>\n       \\<Longrightarrow> set_of r =\\<^sub>\\<preceq>\n                         f `\n                         {xa.\n                          (xa = x \\<or> xa \\<in> set ws) \\<and>\n                          P xa} \\<union>\n                         set_of s\n 2. \\<And>r x ws s.\n       \\<lbrakk>inv0 x; \\<forall>x\\<in>set ws. inv0 x; SI s; P x;\n        set_of r =\\<^sub>\\<preceq>\n        f ` {x \\<in> set ws. P x} \\<union> set_of (insert_mod (f x) s);\n        I (f x); S s \\<and> (\\<forall>x\\<in>set_of s. I x);\n        (\\<exists>y\\<in>set_of s. f x \\<preceq> y) \\<and>\n        set_of (insert_mod (f x) s) = set_of s\\<rbrakk>\n       \\<Longrightarrow> set_of r =\\<^sub>\\<preceq>\n                         f `\n                         {xa.\n                          (xa = x \\<or> xa \\<in> set ws) \\<and>\n                          P xa} \\<union>\n                         set_of s\n 3. \\<And>r x ws s.\n       \\<lbrakk>inv0 x; \\<forall>x\\<in>set ws. inv0 x; SI s; \\<not> P x;\n        set_of r =\\<^sub>\\<preceq>\n        f ` {x \\<in> set ws. P x} \\<union> set_of s\\<rbrakk>\n       \\<Longrightarrow> set_of r =\\<^sub>\\<preceq>\n                         f `\n                         {xa.\n                          (xa = x \\<or> xa \\<in> set ws) \\<and>\n                          P xa} \\<union>\n                         set_of s\n 4. \\<exists>rs.\n       set rs = (Rel succs)\\<^sup>* `` set ws \\<and>\n       (SI s \\<longrightarrow>\n        set_of s' =\\<^sub>\\<preceq>\n        f ` {x \\<in> set rs. P x} \\<union> set_of s) \\<Longrightarrow>\n    set_of s' =\\<^sub>\\<preceq>\n    f ` {x \\<in> (Rel succs)\\<^sup>* `` set ws. P x} \\<union> set_of s", "prefer 2"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>r x ws s.\n       \\<lbrakk>inv0 x; \\<forall>x\\<in>set ws. inv0 x; SI s; P x;\n        set_of r =\\<^sub>\\<preceq>\n        f ` {x \\<in> set ws. P x} \\<union> set_of (insert_mod (f x) s);\n        I (f x); S s \\<and> (\\<forall>x\\<in>set_of s. I x);\n        (\\<exists>y\\<in>set_of s. f x \\<preceq> y) \\<and>\n        set_of (insert_mod (f x) s) = set_of s\\<rbrakk>\n       \\<Longrightarrow> set_of r =\\<^sub>\\<preceq>\n                         f `\n                         {xa.\n                          (xa = x \\<or> xa \\<in> set ws) \\<and>\n                          P xa} \\<union>\n                         set_of s\n 2. \\<And>r x ws s.\n       \\<lbrakk>inv0 x; \\<forall>x\\<in>set ws. inv0 x; SI s; P x;\n        set_of r =\\<^sub>\\<preceq>\n        f ` {x \\<in> set ws. P x} \\<union> set_of (insert_mod (f x) s);\n        I (f x); S s \\<and> (\\<forall>x\\<in>set_of s. I x);\n        set_of (insert_mod (f x) s) = insert (f x) (set_of s)\\<rbrakk>\n       \\<Longrightarrow> set_of r =\\<^sub>\\<preceq>\n                         f `\n                         {xa.\n                          (xa = x \\<or> xa \\<in> set ws) \\<and>\n                          P xa} \\<union>\n                         set_of s\n 3. \\<And>r x ws s.\n       \\<lbrakk>inv0 x; \\<forall>x\\<in>set ws. inv0 x; SI s; \\<not> P x;\n        set_of r =\\<^sub>\\<preceq>\n        f ` {x \\<in> set ws. P x} \\<union> set_of s\\<rbrakk>\n       \\<Longrightarrow> set_of r =\\<^sub>\\<preceq>\n                         f `\n                         {xa.\n                          (xa = x \\<or> xa \\<in> set ws) \\<and>\n                          P xa} \\<union>\n                         set_of s\n 4. \\<exists>rs.\n       set rs = (Rel succs)\\<^sup>* `` set ws \\<and>\n       (SI s \\<longrightarrow>\n        set_of s' =\\<^sub>\\<preceq>\n        f ` {x \\<in> set rs. P x} \\<union> set_of s) \\<Longrightarrow>\n    set_of s' =\\<^sub>\\<preceq>\n    f ` {x \\<in> (Rel succs)\\<^sup>* `` set ws. P x} \\<union> set_of s", "apply(rule seteq_qle_trans)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>r x ws s.\n       \\<lbrakk>inv0 x; \\<forall>x\\<in>set ws. inv0 x; SI s; P x;\n        set_of r =\\<^sub>\\<preceq>\n        f ` {x \\<in> set ws. P x} \\<union> set_of (insert_mod (f x) s);\n        I (f x); S s \\<and> (\\<forall>x\\<in>set_of s. I x);\n        (\\<exists>y\\<in>set_of s. f x \\<preceq> y) \\<and>\n        set_of (insert_mod (f x) s) = set_of s\\<rbrakk>\n       \\<Longrightarrow> set_of r =\\<^sub>\\<preceq> ?B33 r x ws s\n 2. \\<And>r x ws s.\n       \\<lbrakk>inv0 x; \\<forall>x\\<in>set ws. inv0 x; SI s; P x;\n        set_of r =\\<^sub>\\<preceq>\n        f ` {x \\<in> set ws. P x} \\<union> set_of (insert_mod (f x) s);\n        I (f x); S s \\<and> (\\<forall>x\\<in>set_of s. I x);\n        (\\<exists>y\\<in>set_of s. f x \\<preceq> y) \\<and>\n        set_of (insert_mod (f x) s) = set_of s\\<rbrakk>\n       \\<Longrightarrow> ?B33 r x ws s =\\<^sub>\\<preceq>\n                         f `\n                         {xa.\n                          (xa = x \\<or> xa \\<in> set ws) \\<and>\n                          P xa} \\<union>\n                         set_of s\n 3. \\<And>r x ws s.\n       \\<lbrakk>inv0 x; \\<forall>x\\<in>set ws. inv0 x; SI s; P x;\n        set_of r =\\<^sub>\\<preceq>\n        f ` {x \\<in> set ws. P x} \\<union> set_of (insert_mod (f x) s);\n        I (f x); S s \\<and> (\\<forall>x\\<in>set_of s. I x);\n        set_of (insert_mod (f x) s) = insert (f x) (set_of s)\\<rbrakk>\n       \\<Longrightarrow> set_of r =\\<^sub>\\<preceq>\n                         f `\n                         {xa.\n                          (xa = x \\<or> xa \\<in> set ws) \\<and>\n                          P xa} \\<union>\n                         set_of s\n 4. \\<And>r x ws s.\n       \\<lbrakk>inv0 x; \\<forall>x\\<in>set ws. inv0 x; SI s; \\<not> P x;\n        set_of r =\\<^sub>\\<preceq>\n        f ` {x \\<in> set ws. P x} \\<union> set_of s\\<rbrakk>\n       \\<Longrightarrow> set_of r =\\<^sub>\\<preceq>\n                         f `\n                         {xa.\n                          (xa = x \\<or> xa \\<in> set ws) \\<and>\n                          P xa} \\<union>\n                         set_of s\n 5. \\<exists>rs.\n       set rs = (Rel succs)\\<^sup>* `` set ws \\<and>\n       (SI s \\<longrightarrow>\n        set_of s' =\\<^sub>\\<preceq>\n        f ` {x \\<in> set rs. P x} \\<union> set_of s) \\<Longrightarrow>\n    set_of s' =\\<^sub>\\<preceq>\n    f ` {x \\<in> (Rel succs)\\<^sup>* `` set ws. P x} \\<union> set_of s", "apply assumption"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>r x ws s.\n       \\<lbrakk>inv0 x; \\<forall>x\\<in>set ws. inv0 x; SI s; P x;\n        set_of r =\\<^sub>\\<preceq>\n        f ` {x \\<in> set ws. P x} \\<union> set_of (insert_mod (f x) s);\n        I (f x); S s \\<and> (\\<forall>x\\<in>set_of s. I x);\n        (\\<exists>y\\<in>set_of s. f x \\<preceq> y) \\<and>\n        set_of (insert_mod (f x) s) = set_of s\\<rbrakk>\n       \\<Longrightarrow> f ` {x \\<in> set ws. P x} \\<union>\n                         set_of (insert_mod (f x) s) =\\<^sub>\\<preceq>\n                         f `\n                         {xa.\n                          (xa = x \\<or> xa \\<in> set ws) \\<and>\n                          P xa} \\<union>\n                         set_of s\n 2. \\<And>r x ws s.\n       \\<lbrakk>inv0 x; \\<forall>x\\<in>set ws. inv0 x; SI s; P x;\n        set_of r =\\<^sub>\\<preceq>\n        f ` {x \\<in> set ws. P x} \\<union> set_of (insert_mod (f x) s);\n        I (f x); S s \\<and> (\\<forall>x\\<in>set_of s. I x);\n        set_of (insert_mod (f x) s) = insert (f x) (set_of s)\\<rbrakk>\n       \\<Longrightarrow> set_of r =\\<^sub>\\<preceq>\n                         f `\n                         {xa.\n                          (xa = x \\<or> xa \\<in> set ws) \\<and>\n                          P xa} \\<union>\n                         set_of s\n 3. \\<And>r x ws s.\n       \\<lbrakk>inv0 x; \\<forall>x\\<in>set ws. inv0 x; SI s; \\<not> P x;\n        set_of r =\\<^sub>\\<preceq>\n        f ` {x \\<in> set ws. P x} \\<union> set_of s\\<rbrakk>\n       \\<Longrightarrow> set_of r =\\<^sub>\\<preceq>\n                         f `\n                         {xa.\n                          (xa = x \\<or> xa \\<in> set ws) \\<and>\n                          P xa} \\<union>\n                         set_of s\n 4. \\<exists>rs.\n       set rs = (Rel succs)\\<^sup>* `` set ws \\<and>\n       (SI s \\<longrightarrow>\n        set_of s' =\\<^sub>\\<preceq>\n        f ` {x \\<in> set rs. P x} \\<union> set_of s) \\<Longrightarrow>\n    set_of s' =\\<^sub>\\<preceq>\n    f ` {x \\<in> (Rel succs)\\<^sup>* `` set ws. P x} \\<union> set_of s", "apply (simp add: \"defs\")"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>r x ws s.\n       \\<lbrakk>inv0 x; \\<forall>x\\<in>set ws. inv0 x; SI s; P x;\n        (\\<forall>x\\<in>set_of r.\n            \\<exists>y\\<in>f ` {x \\<in> set ws. P x} \\<union> set_of s.\n               x \\<preceq> y) \\<and>\n        (\\<forall>x\\<in>f ` {x \\<in> set ws. P x} \\<union> set_of s.\n            \\<exists>y\\<in>set_of r. x \\<preceq> y);\n        I (f x); S s \\<and> (\\<forall>x\\<in>set_of s. I x);\n        (\\<exists>y\\<in>set_of s. f x \\<preceq> y) \\<and>\n        set_of (insert_mod (f x) s) = set_of s\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>xa\\<in>f ` {x \\<in> set ws. P x} \\<union>\n    set_of s.\n                             \\<exists>y\n\\<in>f ` {xa. (xa = x \\<or> xa \\<in> set ws) \\<and> P xa} \\<union> set_of s.\n                                xa \\<preceq> y) \\<and>\n                         (\\<forall>x\\<in>f `\n   {xa. (xa = x \\<or> xa \\<in> set ws) \\<and> P xa} \\<union>\n   set_of s.\n                             \\<exists>y\n\\<in>f ` {x \\<in> set ws. P x} \\<union> set_of s.\n                                x \\<preceq> y)\n 2. \\<And>r x ws s.\n       \\<lbrakk>inv0 x; \\<forall>x\\<in>set ws. inv0 x; SI s; P x;\n        set_of r =\\<^sub>\\<preceq>\n        f ` {x \\<in> set ws. P x} \\<union> set_of (insert_mod (f x) s);\n        I (f x); S s \\<and> (\\<forall>x\\<in>set_of s. I x);\n        set_of (insert_mod (f x) s) = insert (f x) (set_of s)\\<rbrakk>\n       \\<Longrightarrow> set_of r =\\<^sub>\\<preceq>\n                         f `\n                         {xa.\n                          (xa = x \\<or> xa \\<in> set ws) \\<and>\n                          P xa} \\<union>\n                         set_of s\n 3. \\<And>r x ws s.\n       \\<lbrakk>inv0 x; \\<forall>x\\<in>set ws. inv0 x; SI s; \\<not> P x;\n        set_of r =\\<^sub>\\<preceq>\n        f ` {x \\<in> set ws. P x} \\<union> set_of s\\<rbrakk>\n       \\<Longrightarrow> set_of r =\\<^sub>\\<preceq>\n                         f `\n                         {xa.\n                          (xa = x \\<or> xa \\<in> set ws) \\<and>\n                          P xa} \\<union>\n                         set_of s\n 4. \\<exists>rs.\n       set rs = (Rel succs)\\<^sup>* `` set ws \\<and>\n       (SI s \\<longrightarrow>\n        set_of s' =\\<^sub>\\<preceq>\n        f ` {x \\<in> set rs. P x} \\<union> set_of s) \\<Longrightarrow>\n    set_of s' =\\<^sub>\\<preceq>\n    f ` {x \\<in> (Rel succs)\\<^sup>* `` set ws. P x} \\<union> set_of s", "apply blast"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>r x ws s.\n       \\<lbrakk>inv0 x; \\<forall>x\\<in>set ws. inv0 x; SI s; P x;\n        set_of r =\\<^sub>\\<preceq>\n        f ` {x \\<in> set ws. P x} \\<union> set_of (insert_mod (f x) s);\n        I (f x); S s \\<and> (\\<forall>x\\<in>set_of s. I x);\n        set_of (insert_mod (f x) s) = insert (f x) (set_of s)\\<rbrakk>\n       \\<Longrightarrow> set_of r =\\<^sub>\\<preceq>\n                         f `\n                         {xa.\n                          (xa = x \\<or> xa \\<in> set ws) \\<and>\n                          P xa} \\<union>\n                         set_of s\n 2. \\<And>r x ws s.\n       \\<lbrakk>inv0 x; \\<forall>x\\<in>set ws. inv0 x; SI s; \\<not> P x;\n        set_of r =\\<^sub>\\<preceq>\n        f ` {x \\<in> set ws. P x} \\<union> set_of s\\<rbrakk>\n       \\<Longrightarrow> set_of r =\\<^sub>\\<preceq>\n                         f `\n                         {xa.\n                          (xa = x \\<or> xa \\<in> set ws) \\<and>\n                          P xa} \\<union>\n                         set_of s\n 3. \\<exists>rs.\n       set rs = (Rel succs)\\<^sup>* `` set ws \\<and>\n       (SI s \\<longrightarrow>\n        set_of s' =\\<^sub>\\<preceq>\n        f ` {x \\<in> set rs. P x} \\<union> set_of s) \\<Longrightarrow>\n    set_of s' =\\<^sub>\\<preceq>\n    f ` {x \\<in> (Rel succs)\\<^sup>* `` set ws. P x} \\<union> set_of s", "apply(rule seteq_qle_trans)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>r x ws s.\n       \\<lbrakk>inv0 x; \\<forall>x\\<in>set ws. inv0 x; SI s; P x;\n        set_of r =\\<^sub>\\<preceq>\n        f ` {x \\<in> set ws. P x} \\<union> set_of (insert_mod (f x) s);\n        I (f x); S s \\<and> (\\<forall>x\\<in>set_of s. I x);\n        set_of (insert_mod (f x) s) = insert (f x) (set_of s)\\<rbrakk>\n       \\<Longrightarrow> set_of r =\\<^sub>\\<preceq> ?B528 r x ws s\n 2. \\<And>r x ws s.\n       \\<lbrakk>inv0 x; \\<forall>x\\<in>set ws. inv0 x; SI s; P x;\n        set_of r =\\<^sub>\\<preceq>\n        f ` {x \\<in> set ws. P x} \\<union> set_of (insert_mod (f x) s);\n        I (f x); S s \\<and> (\\<forall>x\\<in>set_of s. I x);\n        set_of (insert_mod (f x) s) = insert (f x) (set_of s)\\<rbrakk>\n       \\<Longrightarrow> ?B528 r x ws s =\\<^sub>\\<preceq>\n                         f `\n                         {xa.\n                          (xa = x \\<or> xa \\<in> set ws) \\<and>\n                          P xa} \\<union>\n                         set_of s\n 3. \\<And>r x ws s.\n       \\<lbrakk>inv0 x; \\<forall>x\\<in>set ws. inv0 x; SI s; \\<not> P x;\n        set_of r =\\<^sub>\\<preceq>\n        f ` {x \\<in> set ws. P x} \\<union> set_of s\\<rbrakk>\n       \\<Longrightarrow> set_of r =\\<^sub>\\<preceq>\n                         f `\n                         {xa.\n                          (xa = x \\<or> xa \\<in> set ws) \\<and>\n                          P xa} \\<union>\n                         set_of s\n 4. \\<exists>rs.\n       set rs = (Rel succs)\\<^sup>* `` set ws \\<and>\n       (SI s \\<longrightarrow>\n        set_of s' =\\<^sub>\\<preceq>\n        f ` {x \\<in> set rs. P x} \\<union> set_of s) \\<Longrightarrow>\n    set_of s' =\\<^sub>\\<preceq>\n    f ` {x \\<in> (Rel succs)\\<^sup>* `` set ws. P x} \\<union> set_of s", "apply assumption"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>r x ws s.\n       \\<lbrakk>inv0 x; \\<forall>x\\<in>set ws. inv0 x; SI s; P x;\n        set_of r =\\<^sub>\\<preceq>\n        f ` {x \\<in> set ws. P x} \\<union> set_of (insert_mod (f x) s);\n        I (f x); S s \\<and> (\\<forall>x\\<in>set_of s. I x);\n        set_of (insert_mod (f x) s) = insert (f x) (set_of s)\\<rbrakk>\n       \\<Longrightarrow> f ` {x \\<in> set ws. P x} \\<union>\n                         set_of (insert_mod (f x) s) =\\<^sub>\\<preceq>\n                         f `\n                         {xa.\n                          (xa = x \\<or> xa \\<in> set ws) \\<and>\n                          P xa} \\<union>\n                         set_of s\n 2. \\<And>r x ws s.\n       \\<lbrakk>inv0 x; \\<forall>x\\<in>set ws. inv0 x; SI s; \\<not> P x;\n        set_of r =\\<^sub>\\<preceq>\n        f ` {x \\<in> set ws. P x} \\<union> set_of s\\<rbrakk>\n       \\<Longrightarrow> set_of r =\\<^sub>\\<preceq>\n                         f `\n                         {xa.\n                          (xa = x \\<or> xa \\<in> set ws) \\<and>\n                          P xa} \\<union>\n                         set_of s\n 3. \\<exists>rs.\n       set rs = (Rel succs)\\<^sup>* `` set ws \\<and>\n       (SI s \\<longrightarrow>\n        set_of s' =\\<^sub>\\<preceq>\n        f ` {x \\<in> set rs. P x} \\<union> set_of s) \\<Longrightarrow>\n    set_of s' =\\<^sub>\\<preceq>\n    f ` {x \\<in> (Rel succs)\\<^sup>* `` set ws. P x} \\<union> set_of s", "apply (simp add: \"defs\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>r x ws s.\n       \\<lbrakk>inv0 x; \\<forall>x\\<in>set ws. inv0 x; SI s; P x;\n        (\\<forall>xa\\<in>set_of r.\n            xa \\<preceq> f x \\<or>\n            (\\<exists>x\\<in>f ` {x \\<in> set ws. P x} \\<union> set_of s.\n                xa \\<preceq> x)) \\<and>\n        (\\<exists>xa\\<in>set_of r. f x \\<preceq> xa) \\<and>\n        (\\<forall>x\\<in>f ` {x \\<in> set ws. P x} \\<union> set_of s.\n            \\<exists>xa\\<in>set_of r. x \\<preceq> xa);\n        I (f x); S s \\<and> (\\<forall>x\\<in>set_of s. I x);\n        set_of (insert_mod (f x) s) = insert (f x) (set_of s)\\<rbrakk>\n       \\<Longrightarrow> Bex (f `\n                              {xa.\n                               (xa = x \\<or> xa \\<in> set ws) \\<and>\n                               P xa} \\<union>\n                              set_of s)\n                          ((\\<preceq>) (f x)) \\<and>\n                         (\\<forall>xa\\<in>f ` {x \\<in> set ws. P x} \\<union>\n    set_of s.\n                             Bex (f `\n                                  {xa.\n                                   (xa = x \\<or> xa \\<in> set ws) \\<and>\n                                   P xa} \\<union>\n                                  set_of s)\n                              ((\\<preceq>) xa)) \\<and>\n                         (\\<forall>xa\\<in>f `\n    {xa. (xa = x \\<or> xa \\<in> set ws) \\<and> P xa} \\<union>\n    set_of s.\n                             xa \\<preceq> f x \\<or>\n                             Bex (f ` {x \\<in> set ws. P x} \\<union>\n                                  set_of s)\n                              ((\\<preceq>) xa))\n 2. \\<And>r x ws s.\n       \\<lbrakk>inv0 x; \\<forall>x\\<in>set ws. inv0 x; SI s; \\<not> P x;\n        set_of r =\\<^sub>\\<preceq>\n        f ` {x \\<in> set ws. P x} \\<union> set_of s\\<rbrakk>\n       \\<Longrightarrow> set_of r =\\<^sub>\\<preceq>\n                         f `\n                         {xa.\n                          (xa = x \\<or> xa \\<in> set ws) \\<and>\n                          P xa} \\<union>\n                         set_of s\n 3. \\<exists>rs.\n       set rs = (Rel succs)\\<^sup>* `` set ws \\<and>\n       (SI s \\<longrightarrow>\n        set_of s' =\\<^sub>\\<preceq>\n        f ` {x \\<in> set rs. P x} \\<union> set_of s) \\<Longrightarrow>\n    set_of s' =\\<^sub>\\<preceq>\n    f ` {x \\<in> (Rel succs)\\<^sup>* `` set ws. P x} \\<union> set_of s", "apply blast"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>r x ws s.\n       \\<lbrakk>inv0 x; \\<forall>x\\<in>set ws. inv0 x; SI s; \\<not> P x;\n        set_of r =\\<^sub>\\<preceq>\n        f ` {x \\<in> set ws. P x} \\<union> set_of s\\<rbrakk>\n       \\<Longrightarrow> set_of r =\\<^sub>\\<preceq>\n                         f `\n                         {xa.\n                          (xa = x \\<or> xa \\<in> set ws) \\<and>\n                          P xa} \\<union>\n                         set_of s\n 2. \\<exists>rs.\n       set rs = (Rel succs)\\<^sup>* `` set ws \\<and>\n       (SI s \\<longrightarrow>\n        set_of s' =\\<^sub>\\<preceq>\n        f ` {x \\<in> set rs. P x} \\<union> set_of s) \\<Longrightarrow>\n    set_of s' =\\<^sub>\\<preceq>\n    f ` {x \\<in> (Rel succs)\\<^sup>* `` set ws. P x} \\<union> set_of s", "apply(rule seteq_qle_trans)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>r x ws s.\n       \\<lbrakk>inv0 x; \\<forall>x\\<in>set ws. inv0 x; SI s; \\<not> P x;\n        set_of r =\\<^sub>\\<preceq>\n        f ` {x \\<in> set ws. P x} \\<union> set_of s\\<rbrakk>\n       \\<Longrightarrow> set_of r =\\<^sub>\\<preceq> ?B1393 r x ws s\n 2. \\<And>r x ws s.\n       \\<lbrakk>inv0 x; \\<forall>x\\<in>set ws. inv0 x; SI s; \\<not> P x;\n        set_of r =\\<^sub>\\<preceq>\n        f ` {x \\<in> set ws. P x} \\<union> set_of s\\<rbrakk>\n       \\<Longrightarrow> ?B1393 r x ws s =\\<^sub>\\<preceq>\n                         f `\n                         {xa.\n                          (xa = x \\<or> xa \\<in> set ws) \\<and>\n                          P xa} \\<union>\n                         set_of s\n 3. \\<exists>rs.\n       set rs = (Rel succs)\\<^sup>* `` set ws \\<and>\n       (SI s \\<longrightarrow>\n        set_of s' =\\<^sub>\\<preceq>\n        f ` {x \\<in> set rs. P x} \\<union> set_of s) \\<Longrightarrow>\n    set_of s' =\\<^sub>\\<preceq>\n    f ` {x \\<in> (Rel succs)\\<^sup>* `` set ws. P x} \\<union> set_of s", "apply assumption"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>r x ws s.\n       \\<lbrakk>inv0 x; \\<forall>x\\<in>set ws. inv0 x; SI s; \\<not> P x;\n        set_of r =\\<^sub>\\<preceq>\n        f ` {x \\<in> set ws. P x} \\<union> set_of s\\<rbrakk>\n       \\<Longrightarrow> f ` {x \\<in> set ws. P x} \\<union>\n                         set_of s =\\<^sub>\\<preceq>\n                         f `\n                         {xa.\n                          (xa = x \\<or> xa \\<in> set ws) \\<and>\n                          P xa} \\<union>\n                         set_of s\n 2. \\<exists>rs.\n       set rs = (Rel succs)\\<^sup>* `` set ws \\<and>\n       (SI s \\<longrightarrow>\n        set_of s' =\\<^sub>\\<preceq>\n        f ` {x \\<in> set rs. P x} \\<union> set_of s) \\<Longrightarrow>\n    set_of s' =\\<^sub>\\<preceq>\n    f ` {x \\<in> (Rel succs)\\<^sup>* `` set ws. P x} \\<union> set_of s", "apply (simp add: \"defs\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>r x ws s.\n       \\<lbrakk>inv0 x; \\<forall>x\\<in>set ws. inv0 x; SI s; \\<not> P x;\n        (\\<forall>x\\<in>set_of r.\n            \\<exists>y\\<in>f ` {x \\<in> set ws. P x} \\<union> set_of s.\n               x \\<preceq> y) \\<and>\n        (\\<forall>x\\<in>f ` {x \\<in> set ws. P x} \\<union> set_of s.\n            \\<exists>y\\<in>set_of r. x \\<preceq> y)\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>xa\\<in>f ` {x \\<in> set ws. P x} \\<union>\n    set_of s.\n                             \\<exists>y\n\\<in>f ` {xa. (xa = x \\<or> xa \\<in> set ws) \\<and> P xa} \\<union> set_of s.\n                                xa \\<preceq> y) \\<and>\n                         (\\<forall>x\\<in>f `\n   {xa. (xa = x \\<or> xa \\<in> set ws) \\<and> P xa} \\<union>\n   set_of s.\n                             \\<exists>y\n\\<in>f ` {x \\<in> set ws. P x} \\<union> set_of s.\n                                x \\<preceq> y)\n 2. \\<exists>rs.\n       set rs = (Rel succs)\\<^sup>* `` set ws \\<and>\n       (SI s \\<longrightarrow>\n        set_of s' =\\<^sub>\\<preceq>\n        f ` {x \\<in> set rs. P x} \\<union> set_of s) \\<Longrightarrow>\n    set_of s' =\\<^sub>\\<preceq>\n    f ` {x \\<in> (Rel succs)\\<^sup>* `` set ws. P x} \\<union> set_of s", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>rs.\n       set rs = (Rel succs)\\<^sup>* `` set ws \\<and>\n       (SI s \\<longrightarrow>\n        set_of s' =\\<^sub>\\<preceq>\n        f ` {x \\<in> set rs. P x} \\<union> set_of s) \\<Longrightarrow>\n    set_of s' =\\<^sub>\\<preceq>\n    f ` {x \\<in> (Rel succs)\\<^sup>* `` set ws. P x} \\<union> set_of s", "using assms(5)"], ["proof (prove)\nusing this:\n  SI s\n\ngoal (1 subgoal):\n 1. \\<exists>rs.\n       set rs = (Rel succs)\\<^sup>* `` set ws \\<and>\n       (SI s \\<longrightarrow>\n        set_of s' =\\<^sub>\\<preceq>\n        f ` {x \\<in> set rs. P x} \\<union> set_of s) \\<Longrightarrow>\n    set_of s' =\\<^sub>\\<preceq>\n    f ` {x \\<in> (Rel succs)\\<^sup>* `` set ws. P x} \\<union> set_of s", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma worklist_tree_coll_equiv:\n  \"worklist_tree_coll succs P f ws = Some s' \\<Longrightarrow> invariant inv0 succs\n   \\<Longrightarrow> \\<forall>x \\<in> set ws. inv0 x \\<Longrightarrow> (\\<And>x. inv0 x \\<Longrightarrow> I(f x))\n   \\<Longrightarrow> set_of s' =\\<^sub>\\<preceq> f ` {x : (Rel succs)\\<^sup>* `` (set ws). P x}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>worklist_tree_coll succs P f ws = Some s';\n     invariant inv0 succs; \\<forall>x\\<in>set ws. inv0 x;\n     \\<And>x. inv0 x \\<Longrightarrow> I (f x)\\<rbrakk>\n    \\<Longrightarrow> set_of s' =\\<^sub>\\<preceq>\n                      f ` {x \\<in> (Rel succs)\\<^sup>* `` set ws. P x}", "unfolding worklist_tree_coll_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>worklist_tree_coll_aux succs P f ws empty = Some s';\n     invariant inv0 succs; \\<forall>x\\<in>set ws. inv0 x;\n     \\<And>x. inv0 x \\<Longrightarrow> I (f x)\\<rbrakk>\n    \\<Longrightarrow> set_of s' =\\<^sub>\\<preceq>\n                      f ` {x \\<in> (Rel succs)\\<^sup>* `` set ws. P x}", "apply(drule (2) worklist_tree_coll_aux_equiv)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>invariant inv0 succs; \\<forall>x\\<in>set ws. inv0 x;\n        \\<And>x. inv0 x \\<Longrightarrow> I (f x); inv0 x\\<rbrakk>\n       \\<Longrightarrow> I (f x)\n 2. \\<lbrakk>invariant inv0 succs; \\<forall>x\\<in>set ws. inv0 x;\n     \\<And>x. inv0 x \\<Longrightarrow> I (f x)\\<rbrakk>\n    \\<Longrightarrow> SI empty\n 3. \\<lbrakk>invariant inv0 succs; \\<forall>x\\<in>set ws. inv0 x;\n     \\<And>x. inv0 x \\<Longrightarrow> I (f x);\n     set_of s' =\\<^sub>\\<preceq>\n     f ` {x \\<in> (Rel succs)\\<^sup>* `` set ws. P x} \\<union>\n     set_of empty\\<rbrakk>\n    \\<Longrightarrow> set_of s' =\\<^sub>\\<preceq>\n                      f ` {x \\<in> (Rel succs)\\<^sup>* `` set ws. P x}", "apply(auto simp: set_of_empty SI_empty)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma worklist_tree_coll_aux_subseteq:\n  \"worklist_tree_coll_aux succs P f ws t\\<^sub>0 = Some t \\<Longrightarrow>\n  invariant inv0 succs \\<Longrightarrow>  \\<forall>g \\<in> set ws. inv0 g \\<Longrightarrow>\n  (\\<And>x. inv0 x \\<Longrightarrow> I(f x)) \\<Longrightarrow> SI t\\<^sub>0 \\<Longrightarrow>\n  set_of t \\<subseteq> set_of t\\<^sub>0 \\<union> f ` {h : (Rel succs)\\<^sup>* `` set ws. P h}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>worklist_tree_coll_aux succs P f ws t\\<^sub>0 = Some t;\n     invariant inv0 succs; \\<forall>g\\<in>set ws. inv0 g;\n     \\<And>x. inv0 x \\<Longrightarrow> I (f x); SI t\\<^sub>0\\<rbrakk>\n    \\<Longrightarrow> set_of t\n                      \\<subseteq> set_of t\\<^sub>0 \\<union>\n                                  f `\n                                  {h \\<in> (Rel succs)\\<^sup>* `` set ws.\n                                   P h}", "unfolding worklist_tree_coll_aux_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>worklist_tree succs (insert_mod2 P f) ws t\\<^sub>0 = Some t;\n     invariant inv0 succs; \\<forall>g\\<in>set ws. inv0 g;\n     \\<And>x. inv0 x \\<Longrightarrow> I (f x); SI t\\<^sub>0\\<rbrakk>\n    \\<Longrightarrow> set_of t\n                      \\<subseteq> set_of t\\<^sub>0 \\<union>\n                                  f `\n                                  {h \\<in> (Rel succs)\\<^sup>* `` set ws.\n                                   P h}", "apply(drule worklist_tree_rule2[where I = inv0 and S = SI and P =\n  \"\\<lambda>ws t t'. set_of t' \\<subseteq> set_of t \\<union> f ` {g \\<in> set ws. P g}\"])"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<lbrakk>invariant inv0 succs; \\<forall>g\\<in>set ws. inv0 g;\n     \\<And>x. inv0 x \\<Longrightarrow> I (f x); SI t\\<^sub>0\\<rbrakk>\n    \\<Longrightarrow> invariant inv0 succs\n 2. \\<lbrakk>invariant inv0 succs; \\<forall>g\\<in>set ws. inv0 g;\n     \\<And>x. inv0 x \\<Longrightarrow> I (f x); SI t\\<^sub>0\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>set ws. inv0 x\n 3. \\<lbrakk>invariant inv0 succs; \\<forall>g\\<in>set ws. inv0 g;\n     \\<And>x. inv0 x \\<Longrightarrow> I (f x); SI t\\<^sub>0\\<rbrakk>\n    \\<Longrightarrow> SI t\\<^sub>0\n 4. \\<And>x s.\n       \\<lbrakk>invariant inv0 succs; \\<forall>g\\<in>set ws. inv0 g;\n        \\<And>x. inv0 x \\<Longrightarrow> I (f x); SI t\\<^sub>0; inv0 x;\n        SI s\\<rbrakk>\n       \\<Longrightarrow> SI (insert_mod2 P f x s)\n 5. \\<And>s.\n       \\<lbrakk>invariant inv0 succs; \\<forall>g\\<in>set ws. inv0 g;\n        \\<And>x. inv0 x \\<Longrightarrow> I (f x); SI t\\<^sub>0\\<rbrakk>\n       \\<Longrightarrow> set_of s\n                         \\<subseteq> set_of s \\<union>\n                                     f ` {g \\<in> set []. P g}\n 6. \\<And>r x wsa s.\n       \\<lbrakk>invariant inv0 succs; \\<forall>g\\<in>set ws. inv0 g;\n        \\<And>x. inv0 x \\<Longrightarrow> I (f x); SI t\\<^sub>0; inv0 x;\n        \\<forall>x\\<in>set wsa. inv0 x; SI s;\n        set_of r\n        \\<subseteq> set_of (insert_mod2 P f x s) \\<union>\n                    f ` {g \\<in> set wsa. P g}\\<rbrakk>\n       \\<Longrightarrow> set_of r\n                         \\<subseteq> set_of s \\<union>\n                                     f ` {g \\<in> set (x # wsa). P g}\n 7. \\<lbrakk>invariant inv0 succs; \\<forall>g\\<in>set ws. inv0 g;\n     \\<And>x. inv0 x \\<Longrightarrow> I (f x); SI t\\<^sub>0;\n     \\<exists>rs.\n        set rs = (Rel succs)\\<^sup>* `` set ws \\<and>\n        set_of t\n        \\<subseteq> set_of t\\<^sub>0 \\<union>\n                    f ` {g \\<in> set rs. P g}\\<rbrakk>\n    \\<Longrightarrow> set_of t\n                      \\<subseteq> set_of t\\<^sub>0 \\<union>\n                                  f `\n                                  {h \\<in> (Rel succs)\\<^sup>* `` set ws.\n                                   P h}", "apply assumption"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<lbrakk>invariant inv0 succs; \\<forall>g\\<in>set ws. inv0 g;\n     \\<And>x. inv0 x \\<Longrightarrow> I (f x); SI t\\<^sub>0\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>set ws. inv0 x\n 2. \\<lbrakk>invariant inv0 succs; \\<forall>g\\<in>set ws. inv0 g;\n     \\<And>x. inv0 x \\<Longrightarrow> I (f x); SI t\\<^sub>0\\<rbrakk>\n    \\<Longrightarrow> SI t\\<^sub>0\n 3. \\<And>x s.\n       \\<lbrakk>invariant inv0 succs; \\<forall>g\\<in>set ws. inv0 g;\n        \\<And>x. inv0 x \\<Longrightarrow> I (f x); SI t\\<^sub>0; inv0 x;\n        SI s\\<rbrakk>\n       \\<Longrightarrow> SI (insert_mod2 P f x s)\n 4. \\<And>s.\n       \\<lbrakk>invariant inv0 succs; \\<forall>g\\<in>set ws. inv0 g;\n        \\<And>x. inv0 x \\<Longrightarrow> I (f x); SI t\\<^sub>0\\<rbrakk>\n       \\<Longrightarrow> set_of s\n                         \\<subseteq> set_of s \\<union>\n                                     f ` {g \\<in> set []. P g}\n 5. \\<And>r x wsa s.\n       \\<lbrakk>invariant inv0 succs; \\<forall>g\\<in>set ws. inv0 g;\n        \\<And>x. inv0 x \\<Longrightarrow> I (f x); SI t\\<^sub>0; inv0 x;\n        \\<forall>x\\<in>set wsa. inv0 x; SI s;\n        set_of r\n        \\<subseteq> set_of (insert_mod2 P f x s) \\<union>\n                    f ` {g \\<in> set wsa. P g}\\<rbrakk>\n       \\<Longrightarrow> set_of r\n                         \\<subseteq> set_of s \\<union>\n                                     f ` {g \\<in> set (x # wsa). P g}\n 6. \\<lbrakk>invariant inv0 succs; \\<forall>g\\<in>set ws. inv0 g;\n     \\<And>x. inv0 x \\<Longrightarrow> I (f x); SI t\\<^sub>0;\n     \\<exists>rs.\n        set rs = (Rel succs)\\<^sup>* `` set ws \\<and>\n        set_of t\n        \\<subseteq> set_of t\\<^sub>0 \\<union>\n                    f ` {g \\<in> set rs. P g}\\<rbrakk>\n    \\<Longrightarrow> set_of t\n                      \\<subseteq> set_of t\\<^sub>0 \\<union>\n                                  f `\n                                  {h \\<in> (Rel succs)\\<^sup>* `` set ws.\n                                   P h}", "apply assumption"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>invariant inv0 succs; \\<forall>g\\<in>set ws. inv0 g;\n     \\<And>x. inv0 x \\<Longrightarrow> I (f x); SI t\\<^sub>0\\<rbrakk>\n    \\<Longrightarrow> SI t\\<^sub>0\n 2. \\<And>x s.\n       \\<lbrakk>invariant inv0 succs; \\<forall>g\\<in>set ws. inv0 g;\n        \\<And>x. inv0 x \\<Longrightarrow> I (f x); SI t\\<^sub>0; inv0 x;\n        SI s\\<rbrakk>\n       \\<Longrightarrow> SI (insert_mod2 P f x s)\n 3. \\<And>s.\n       \\<lbrakk>invariant inv0 succs; \\<forall>g\\<in>set ws. inv0 g;\n        \\<And>x. inv0 x \\<Longrightarrow> I (f x); SI t\\<^sub>0\\<rbrakk>\n       \\<Longrightarrow> set_of s\n                         \\<subseteq> set_of s \\<union>\n                                     f ` {g \\<in> set []. P g}\n 4. \\<And>r x wsa s.\n       \\<lbrakk>invariant inv0 succs; \\<forall>g\\<in>set ws. inv0 g;\n        \\<And>x. inv0 x \\<Longrightarrow> I (f x); SI t\\<^sub>0; inv0 x;\n        \\<forall>x\\<in>set wsa. inv0 x; SI s;\n        set_of r\n        \\<subseteq> set_of (insert_mod2 P f x s) \\<union>\n                    f ` {g \\<in> set wsa. P g}\\<rbrakk>\n       \\<Longrightarrow> set_of r\n                         \\<subseteq> set_of s \\<union>\n                                     f ` {g \\<in> set (x # wsa). P g}\n 5. \\<lbrakk>invariant inv0 succs; \\<forall>g\\<in>set ws. inv0 g;\n     \\<And>x. inv0 x \\<Longrightarrow> I (f x); SI t\\<^sub>0;\n     \\<exists>rs.\n        set rs = (Rel succs)\\<^sup>* `` set ws \\<and>\n        set_of t\n        \\<subseteq> set_of t\\<^sub>0 \\<union>\n                    f ` {g \\<in> set rs. P g}\\<rbrakk>\n    \\<Longrightarrow> set_of t\n                      \\<subseteq> set_of t\\<^sub>0 \\<union>\n                                  f `\n                                  {h \\<in> (Rel succs)\\<^sup>* `` set ws.\n                                   P h}", "apply assumption"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x s.\n       \\<lbrakk>invariant inv0 succs; \\<forall>g\\<in>set ws. inv0 g;\n        \\<And>x. inv0 x \\<Longrightarrow> I (f x); SI t\\<^sub>0; inv0 x;\n        SI s\\<rbrakk>\n       \\<Longrightarrow> SI (insert_mod2 P f x s)\n 2. \\<And>s.\n       \\<lbrakk>invariant inv0 succs; \\<forall>g\\<in>set ws. inv0 g;\n        \\<And>x. inv0 x \\<Longrightarrow> I (f x); SI t\\<^sub>0\\<rbrakk>\n       \\<Longrightarrow> set_of s\n                         \\<subseteq> set_of s \\<union>\n                                     f ` {g \\<in> set []. P g}\n 3. \\<And>r x wsa s.\n       \\<lbrakk>invariant inv0 succs; \\<forall>g\\<in>set ws. inv0 g;\n        \\<And>x. inv0 x \\<Longrightarrow> I (f x); SI t\\<^sub>0; inv0 x;\n        \\<forall>x\\<in>set wsa. inv0 x; SI s;\n        set_of r\n        \\<subseteq> set_of (insert_mod2 P f x s) \\<union>\n                    f ` {g \\<in> set wsa. P g}\\<rbrakk>\n       \\<Longrightarrow> set_of r\n                         \\<subseteq> set_of s \\<union>\n                                     f ` {g \\<in> set (x # wsa). P g}\n 4. \\<lbrakk>invariant inv0 succs; \\<forall>g\\<in>set ws. inv0 g;\n     \\<And>x. inv0 x \\<Longrightarrow> I (f x); SI t\\<^sub>0;\n     \\<exists>rs.\n        set rs = (Rel succs)\\<^sup>* `` set ws \\<and>\n        set_of t\n        \\<subseteq> set_of t\\<^sub>0 \\<union>\n                    f ` {g \\<in> set rs. P g}\\<rbrakk>\n    \\<Longrightarrow> set_of t\n                      \\<subseteq> set_of t\\<^sub>0 \\<union>\n                                  f `\n                                  {h \\<in> (Rel succs)\\<^sup>* `` set ws.\n                                   P h}", "apply(simp add: SI_insert_mod2)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>s.\n       \\<lbrakk>invariant inv0 succs; \\<forall>g\\<in>set ws. inv0 g;\n        \\<And>x. inv0 x \\<Longrightarrow> I (f x); SI t\\<^sub>0\\<rbrakk>\n       \\<Longrightarrow> set_of s\n                         \\<subseteq> set_of s \\<union>\n                                     f ` {g \\<in> set []. P g}\n 2. \\<And>r x wsa s.\n       \\<lbrakk>invariant inv0 succs; \\<forall>g\\<in>set ws. inv0 g;\n        \\<And>x. inv0 x \\<Longrightarrow> I (f x); SI t\\<^sub>0; inv0 x;\n        \\<forall>x\\<in>set wsa. inv0 x; SI s;\n        set_of r\n        \\<subseteq> set_of (insert_mod2 P f x s) \\<union>\n                    f ` {g \\<in> set wsa. P g}\\<rbrakk>\n       \\<Longrightarrow> set_of r\n                         \\<subseteq> set_of s \\<union>\n                                     f ` {g \\<in> set (x # wsa). P g}\n 3. \\<lbrakk>invariant inv0 succs; \\<forall>g\\<in>set ws. inv0 g;\n     \\<And>x. inv0 x \\<Longrightarrow> I (f x); SI t\\<^sub>0;\n     \\<exists>rs.\n        set rs = (Rel succs)\\<^sup>* `` set ws \\<and>\n        set_of t\n        \\<subseteq> set_of t\\<^sub>0 \\<union>\n                    f ` {g \\<in> set rs. P g}\\<rbrakk>\n    \\<Longrightarrow> set_of t\n                      \\<subseteq> set_of t\\<^sub>0 \\<union>\n                                  f `\n                                  {h \\<in> (Rel succs)\\<^sup>* `` set ws.\n                                   P h}", "apply clarsimp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>r x wsa s.\n       \\<lbrakk>invariant inv0 succs; \\<forall>g\\<in>set ws. inv0 g;\n        \\<And>x. inv0 x \\<Longrightarrow> I (f x); SI t\\<^sub>0; inv0 x;\n        \\<forall>x\\<in>set wsa. inv0 x; SI s;\n        set_of r\n        \\<subseteq> set_of (insert_mod2 P f x s) \\<union>\n                    f ` {g \\<in> set wsa. P g}\\<rbrakk>\n       \\<Longrightarrow> set_of r\n                         \\<subseteq> set_of s \\<union>\n                                     f ` {g \\<in> set (x # wsa). P g}\n 2. \\<lbrakk>invariant inv0 succs; \\<forall>g\\<in>set ws. inv0 g;\n     \\<And>x. inv0 x \\<Longrightarrow> I (f x); SI t\\<^sub>0;\n     \\<exists>rs.\n        set rs = (Rel succs)\\<^sup>* `` set ws \\<and>\n        set_of t\n        \\<subseteq> set_of t\\<^sub>0 \\<union>\n                    f ` {g \\<in> set rs. P g}\\<rbrakk>\n    \\<Longrightarrow> set_of t\n                      \\<subseteq> set_of t\\<^sub>0 \\<union>\n                                  f `\n                                  {h \\<in> (Rel succs)\\<^sup>* `` set ws.\n                                   P h}", "apply (clarsimp simp: insert_mod2_def split: if_split_asm)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>r x wsa s xa.\n       \\<lbrakk>invariant inv0 succs; \\<forall>g\\<in>set ws. inv0 g;\n        \\<And>x. inv0 x \\<Longrightarrow> I (f x); SI t\\<^sub>0; inv0 x;\n        \\<forall>x\\<in>set wsa. inv0 x; SI s; P x;\n        set_of r\n        \\<subseteq> set_of (insert_mod (f x) s) \\<union>\n                    f ` {g \\<in> set wsa. P g};\n        xa \\<in> set_of r;\n        xa \\<notin> f `\n                    {g. (g = x \\<or> g \\<in> set wsa) \\<and> P g}\\<rbrakk>\n       \\<Longrightarrow> xa \\<in> set_of s\n 2. \\<And>r x wsa s xa.\n       \\<lbrakk>invariant inv0 succs; \\<forall>g\\<in>set ws. inv0 g;\n        \\<And>x. inv0 x \\<Longrightarrow> I (f x); SI t\\<^sub>0; inv0 x;\n        \\<forall>x\\<in>set wsa. inv0 x; SI s; \\<not> P x;\n        set_of r \\<subseteq> set_of s \\<union> f ` {g \\<in> set wsa. P g};\n        xa \\<in> set_of r;\n        xa \\<notin> f `\n                    {g. (g = x \\<or> g \\<in> set wsa) \\<and> P g}\\<rbrakk>\n       \\<Longrightarrow> xa \\<in> set_of s\n 3. \\<lbrakk>invariant inv0 succs; \\<forall>g\\<in>set ws. inv0 g;\n     \\<And>x. inv0 x \\<Longrightarrow> I (f x); SI t\\<^sub>0;\n     \\<exists>rs.\n        set rs = (Rel succs)\\<^sup>* `` set ws \\<and>\n        set_of t\n        \\<subseteq> set_of t\\<^sub>0 \\<union>\n                    f ` {g \\<in> set rs. P g}\\<rbrakk>\n    \\<Longrightarrow> set_of t\n                      \\<subseteq> set_of t\\<^sub>0 \\<union>\n                                  f `\n                                  {h \\<in> (Rel succs)\\<^sup>* `` set ws.\n                                   P h}", "using set_of_insert_mod"], ["proof (prove)\nusing this:\n  \\<lbrakk>I ?x; S ?s \\<and> (\\<forall>x\\<in>set_of ?s. I x)\\<rbrakk>\n  \\<Longrightarrow> set_of (insert_mod ?x ?s) = insert ?x (set_of ?s) \\<or>\n                    (\\<exists>y\\<in>set_of ?s. ?x \\<preceq> y) \\<and>\n                    set_of (insert_mod ?x ?s) = set_of ?s\n\ngoal (3 subgoals):\n 1. \\<And>r x wsa s xa.\n       \\<lbrakk>invariant inv0 succs; \\<forall>g\\<in>set ws. inv0 g;\n        \\<And>x. inv0 x \\<Longrightarrow> I (f x); SI t\\<^sub>0; inv0 x;\n        \\<forall>x\\<in>set wsa. inv0 x; SI s; P x;\n        set_of r\n        \\<subseteq> set_of (insert_mod (f x) s) \\<union>\n                    f ` {g \\<in> set wsa. P g};\n        xa \\<in> set_of r;\n        xa \\<notin> f `\n                    {g. (g = x \\<or> g \\<in> set wsa) \\<and> P g}\\<rbrakk>\n       \\<Longrightarrow> xa \\<in> set_of s\n 2. \\<And>r x wsa s xa.\n       \\<lbrakk>invariant inv0 succs; \\<forall>g\\<in>set ws. inv0 g;\n        \\<And>x. inv0 x \\<Longrightarrow> I (f x); SI t\\<^sub>0; inv0 x;\n        \\<forall>x\\<in>set wsa. inv0 x; SI s; \\<not> P x;\n        set_of r \\<subseteq> set_of s \\<union> f ` {g \\<in> set wsa. P g};\n        xa \\<in> set_of r;\n        xa \\<notin> f `\n                    {g. (g = x \\<or> g \\<in> set wsa) \\<and> P g}\\<rbrakk>\n       \\<Longrightarrow> xa \\<in> set_of s\n 3. \\<lbrakk>invariant inv0 succs; \\<forall>g\\<in>set ws. inv0 g;\n     \\<And>x. inv0 x \\<Longrightarrow> I (f x); SI t\\<^sub>0;\n     \\<exists>rs.\n        set rs = (Rel succs)\\<^sup>* `` set ws \\<and>\n        set_of t\n        \\<subseteq> set_of t\\<^sub>0 \\<union>\n                    f ` {g \\<in> set rs. P g}\\<rbrakk>\n    \\<Longrightarrow> set_of t\n                      \\<subseteq> set_of t\\<^sub>0 \\<union>\n                                  f `\n                                  {h \\<in> (Rel succs)\\<^sup>* `` set ws.\n                                   P h}", "apply(simp add: SI_def image_def)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>r x wsa s xa.\n       \\<lbrakk>invariant inv0 succs; \\<forall>g\\<in>set ws. inv0 g;\n        \\<And>x. inv0 x \\<Longrightarrow> I (f x);\n        S t\\<^sub>0 \\<and> (\\<forall>x\\<in>set_of t\\<^sub>0. I x); inv0 x;\n        \\<forall>x\\<in>set wsa. inv0 x;\n        S s \\<and> (\\<forall>x\\<in>set_of s. I x); P x;\n        set_of r\n        \\<subseteq> set_of (insert_mod (f x) s) \\<union>\n                    {y. \\<exists>x.\n                           x \\<in> set wsa \\<and> P x \\<and> y = f x};\n        xa \\<in> set_of r;\n        \\<forall>xb.\n           P xb \\<longrightarrow>\n           xb \\<noteq> x \\<and> xb \\<notin> set wsa \\<or> xa \\<noteq> f xb;\n        \\<And>x s.\n           \\<lbrakk>I x; S s \\<and> (\\<forall>x\\<in>set_of s. I x)\\<rbrakk>\n           \\<Longrightarrow> set_of (insert_mod x s) =\n                             insert x (set_of s) \\<or>\n                             (\\<exists>y\\<in>set_of s. x \\<preceq> y) \\<and>\n                             set_of (insert_mod x s) = set_of s\\<rbrakk>\n       \\<Longrightarrow> xa \\<in> set_of s\n 2. \\<And>r x wsa s xa.\n       \\<lbrakk>invariant inv0 succs; \\<forall>g\\<in>set ws. inv0 g;\n        \\<And>x. inv0 x \\<Longrightarrow> I (f x); SI t\\<^sub>0; inv0 x;\n        \\<forall>x\\<in>set wsa. inv0 x; SI s; \\<not> P x;\n        set_of r \\<subseteq> set_of s \\<union> f ` {g \\<in> set wsa. P g};\n        xa \\<in> set_of r;\n        xa \\<notin> f `\n                    {g. (g = x \\<or> g \\<in> set wsa) \\<and> P g}\\<rbrakk>\n       \\<Longrightarrow> xa \\<in> set_of s\n 3. \\<lbrakk>invariant inv0 succs; \\<forall>g\\<in>set ws. inv0 g;\n     \\<And>x. inv0 x \\<Longrightarrow> I (f x); SI t\\<^sub>0;\n     \\<exists>rs.\n        set rs = (Rel succs)\\<^sup>* `` set ws \\<and>\n        set_of t\n        \\<subseteq> set_of t\\<^sub>0 \\<union>\n                    f ` {g \\<in> set rs. P g}\\<rbrakk>\n    \\<Longrightarrow> set_of t\n                      \\<subseteq> set_of t\\<^sub>0 \\<union>\n                                  f `\n                                  {h \\<in> (Rel succs)\\<^sup>* `` set ws.\n                                   P h}", "apply(blast)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>r x wsa s xa.\n       \\<lbrakk>invariant inv0 succs; \\<forall>g\\<in>set ws. inv0 g;\n        \\<And>x. inv0 x \\<Longrightarrow> I (f x); SI t\\<^sub>0; inv0 x;\n        \\<forall>x\\<in>set wsa. inv0 x; SI s; \\<not> P x;\n        set_of r \\<subseteq> set_of s \\<union> f ` {g \\<in> set wsa. P g};\n        xa \\<in> set_of r;\n        xa \\<notin> f `\n                    {g. (g = x \\<or> g \\<in> set wsa) \\<and> P g}\\<rbrakk>\n       \\<Longrightarrow> xa \\<in> set_of s\n 2. \\<lbrakk>invariant inv0 succs; \\<forall>g\\<in>set ws. inv0 g;\n     \\<And>x. inv0 x \\<Longrightarrow> I (f x); SI t\\<^sub>0;\n     \\<exists>rs.\n        set rs = (Rel succs)\\<^sup>* `` set ws \\<and>\n        set_of t\n        \\<subseteq> set_of t\\<^sub>0 \\<union>\n                    f ` {g \\<in> set rs. P g}\\<rbrakk>\n    \\<Longrightarrow> set_of t\n                      \\<subseteq> set_of t\\<^sub>0 \\<union>\n                                  f `\n                                  {h \\<in> (Rel succs)\\<^sup>* `` set ws.\n                                   P h}", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>invariant inv0 succs; \\<forall>g\\<in>set ws. inv0 g;\n     \\<And>x. inv0 x \\<Longrightarrow> I (f x); SI t\\<^sub>0;\n     \\<exists>rs.\n        set rs = (Rel succs)\\<^sup>* `` set ws \\<and>\n        set_of t\n        \\<subseteq> set_of t\\<^sub>0 \\<union>\n                    f ` {g \\<in> set rs. P g}\\<rbrakk>\n    \\<Longrightarrow> set_of t\n                      \\<subseteq> set_of t\\<^sub>0 \\<union>\n                                  f `\n                                  {h \\<in> (Rel succs)\\<^sup>* `` set ws.\n                                   P h}", "apply blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma worklist_tree_coll_subseteq:\n  \"worklist_tree_coll succs P f ws = Some t \\<Longrightarrow>\n  invariant inv0 succs \\<Longrightarrow> \\<forall>g \\<in> set ws. inv0 g \\<Longrightarrow>\n  (\\<And>x. inv0 x \\<Longrightarrow> I(f x)) \\<Longrightarrow>\n  set_of t \\<subseteq> f ` {h : (Rel succs)\\<^sup>* `` set ws. P h}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>worklist_tree_coll succs P f ws = Some t; invariant inv0 succs;\n     \\<forall>g\\<in>set ws. inv0 g;\n     \\<And>x. inv0 x \\<Longrightarrow> I (f x)\\<rbrakk>\n    \\<Longrightarrow> set_of t\n                      \\<subseteq> f `\n                                  {h \\<in> (Rel succs)\\<^sup>* `` set ws.\n                                   P h}", "unfolding worklist_tree_coll_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>worklist_tree_coll_aux succs P f ws empty = Some t;\n     invariant inv0 succs; \\<forall>g\\<in>set ws. inv0 g;\n     \\<And>x. inv0 x \\<Longrightarrow> I (f x)\\<rbrakk>\n    \\<Longrightarrow> set_of t\n                      \\<subseteq> f `\n                                  {h \\<in> (Rel succs)\\<^sup>* `` set ws.\n                                   P h}", "apply(drule (1) worklist_tree_coll_aux_subseteq)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>invariant inv0 succs; \\<forall>g\\<in>set ws. inv0 g;\n     \\<And>x. inv0 x \\<Longrightarrow> I (f x)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>g\\<in>set ws. inv0 g\n 2. \\<And>x.\n       \\<lbrakk>invariant inv0 succs; \\<forall>g\\<in>set ws. inv0 g;\n        \\<And>x. inv0 x \\<Longrightarrow> I (f x); inv0 x\\<rbrakk>\n       \\<Longrightarrow> I (f x)\n 3. \\<lbrakk>invariant inv0 succs; \\<forall>g\\<in>set ws. inv0 g;\n     \\<And>x. inv0 x \\<Longrightarrow> I (f x)\\<rbrakk>\n    \\<Longrightarrow> SI empty\n 4. \\<lbrakk>invariant inv0 succs; \\<forall>g\\<in>set ws. inv0 g;\n     \\<And>x. inv0 x \\<Longrightarrow> I (f x);\n     set_of t\n     \\<subseteq> set_of empty \\<union>\n                 f ` {h \\<in> (Rel succs)\\<^sup>* `` set ws. P h}\\<rbrakk>\n    \\<Longrightarrow> set_of t\n                      \\<subseteq> f `\n                                  {h \\<in> (Rel succs)\\<^sup>* `` set ws.\n                                   P h}", "apply(auto simp: set_of_empty SI_empty)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma worklist_tree_coll_inv:\n  \"worklist_tree_coll succs P f ws = Some s \\<Longrightarrow> S s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. worklist_tree_coll succs P f ws = Some s \\<Longrightarrow> S s", "unfolding worklist_tree_coll_def worklist_tree_coll_aux_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. worklist_tree succs (insert_mod2 P f) ws empty =\n    Some s \\<Longrightarrow>\n    S s", "apply(drule worklist_tree_state_inv[where I = S])"], ["proof (prove)\ngoal (3 subgoals):\n 1. S empty\n 2. \\<And>x s. S s \\<Longrightarrow> S (insert_mod2 P f x s)\n 3. S s \\<Longrightarrow> S s", "apply (auto simp: S_empty insert_mod2_def S_insert_mod)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "end"], ["", "end"]]}