{"file_name": "/home/qj213/afp-2021-10-22/thys/Flyspeck-Tame/LowerBound.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Flyspeck-Tame", "problem_names": ["lemma trans1:\n \"(l::nat) = a1 + a2 + (a3 + a4) \\<Longrightarrow> a1 + a3 = r \\<Longrightarrow> l = r + a2 + a4\"", "lemma trans2: \"(l::nat) =  a1 + a2 + a3  \\<Longrightarrow>  a1 \\<le> r \\<Longrightarrow> l \\<le> r + a2 + a3\"", "lemma trans3:\n \"(l::nat) \\<le>  a1 + a2 + (a3 + a4) \\<Longrightarrow> a2 + a3 \\<le> r \\<Longrightarrow> l \\<le> a1 + r + a4\"", "lemma trans4: \"(l::nat) \\<le> a1 + a2 + a3 \\<Longrightarrow> a3 \\<le> r \\<Longrightarrow> l \\<le> a1 + a2 + r\"", "lemma trans5: \"(l::nat) \\<le> a1 + a2 + a3 \\<Longrightarrow> a2 + a3 = r \\<Longrightarrow> l \\<le> a1 + r\"", "lemma trans6: \"(a::nat) = b1 + (b2 + b3) + b4 \\<Longrightarrow> b3 = 0 \\<Longrightarrow>\n            a = b1 + b2 + b4\"", "theorem total_weight_lowerbound:\n \"inv g \\<Longrightarrow> final g \\<Longrightarrow> tame g \\<Longrightarrow> admissible w g \\<Longrightarrow>\n (\\<Sum>\\<^bsub>f \\<in> faces g\\<^esub> w f) < squanderTarget \\<Longrightarrow>\n squanderLowerBound g \\<le> (\\<Sum>\\<^bsub>f \\<in> faces g\\<^esub> w f)\""], "translations": [["", "lemma trans1:\n \"(l::nat) = a1 + a2 + (a3 + a4) \\<Longrightarrow> a1 + a3 = r \\<Longrightarrow> l = r + a2 + a4\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>l = a1 + a2 + (a3 + a4); a1 + a3 = r\\<rbrakk>\n    \\<Longrightarrow> l = r + a2 + a4", "by simp"], ["", "lemma trans2: \"(l::nat) =  a1 + a2 + a3  \\<Longrightarrow>  a1 \\<le> r \\<Longrightarrow> l \\<le> r + a2 + a3\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>l = a1 + a2 + a3; a1 \\<le> r\\<rbrakk>\n    \\<Longrightarrow> l \\<le> r + a2 + a3", "by simp"], ["", "lemma trans3:\n \"(l::nat) \\<le>  a1 + a2 + (a3 + a4) \\<Longrightarrow> a2 + a3 \\<le> r \\<Longrightarrow> l \\<le> a1 + r + a4\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>l \\<le> a1 + a2 + (a3 + a4); a2 + a3 \\<le> r\\<rbrakk>\n    \\<Longrightarrow> l \\<le> a1 + r + a4", "by simp"], ["", "lemma trans4: \"(l::nat) \\<le> a1 + a2 + a3 \\<Longrightarrow> a3 \\<le> r \\<Longrightarrow> l \\<le> a1 + a2 + r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>l \\<le> a1 + a2 + a3; a3 \\<le> r\\<rbrakk>\n    \\<Longrightarrow> l \\<le> a1 + a2 + r", "by simp"], ["", "lemma trans5: \"(l::nat) \\<le> a1 + a2 + a3 \\<Longrightarrow> a2 + a3 = r \\<Longrightarrow> l \\<le> a1 + r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>l \\<le> a1 + a2 + a3; a2 + a3 = r\\<rbrakk>\n    \\<Longrightarrow> l \\<le> a1 + r", "by simp"], ["", "lemma trans6: \"(a::nat) = b1 + (b2 + b3) + b4 \\<Longrightarrow> b3 = 0 \\<Longrightarrow>\n            a = b1 + b2 + b4\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a = b1 + (b2 + b3) + b4; b3 = 0\\<rbrakk>\n    \\<Longrightarrow> a = b1 + b2 + b4", "by (simp add: ac_simps)"], ["", "(*>*)\n\n(* FIXME in Tame: admissibility should be expressed via sum!\n   \\<rightarrow> convert a lot of listsum to sum\n*)"], ["", "theorem total_weight_lowerbound:\n \"inv g \\<Longrightarrow> final g \\<Longrightarrow> tame g \\<Longrightarrow> admissible w g \\<Longrightarrow>\n (\\<Sum>\\<^bsub>f \\<in> faces g\\<^esub> w f) < squanderTarget \\<Longrightarrow>\n squanderLowerBound g \\<le> (\\<Sum>\\<^bsub>f \\<in> faces g\\<^esub> w f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Invariants.inv g; final g; tame g; admissible w g;\n     ListSum (faces g) w < squanderTarget\\<rbrakk>\n    \\<Longrightarrow> squanderLowerBound g \\<le> ListSum (faces g) w", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>Invariants.inv g; final g; tame g; admissible w g;\n     ListSum (faces g) w < squanderTarget\\<rbrakk>\n    \\<Longrightarrow> squanderLowerBound g \\<le> ListSum (faces g) w", "assume final: \"final g\" and tame: \"tame g\" and pl: \"inv g\""], ["proof (state)\nthis:\n  final g\n  tame g\n  Invariants.inv g\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Invariants.inv g; final g; tame g; admissible w g;\n     ListSum (faces g) w < squanderTarget\\<rbrakk>\n    \\<Longrightarrow> squanderLowerBound g \\<le> ListSum (faces g) w", "assume admissible: \"admissible w g\""], ["proof (state)\nthis:\n  admissible w g\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Invariants.inv g; final g; tame g; admissible w g;\n     ListSum (faces g) w < squanderTarget\\<rbrakk>\n    \\<Longrightarrow> squanderLowerBound g \\<le> ListSum (faces g) w", "assume w: \"(\\<Sum>\\<^bsub>f \\<in> faces g\\<^esub> w f) < squanderTarget\""], ["proof (state)\nthis:\n  ListSum (faces g) w < squanderTarget\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Invariants.inv g; final g; tame g; admissible w g;\n     ListSum (faces g) w < squanderTarget\\<rbrakk>\n    \\<Longrightarrow> squanderLowerBound g \\<le> ListSum (faces g) w", "(*<*)"], ["proof (state)\nthis:\n  ListSum (faces g) w < squanderTarget\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Invariants.inv g; final g; tame g; admissible w g;\n     ListSum (faces g) w < squanderTarget\\<rbrakk>\n    \\<Longrightarrow> squanderLowerBound g \\<le> ListSum (faces g) w", "from admissible"], ["proof (chain)\npicking this:\n  admissible w g", "have admissible\\<^sub>1:\n   \"\\<And>f. f \\<in> set (faces g) \\<Longrightarrow> \\<d> |vertices f| \\<le> w f\""], ["proof (prove)\nusing this:\n  admissible w g\n\ngoal (1 subgoal):\n 1. \\<And>f. f \\<in> \\<F> g \\<Longrightarrow> \\<d> |vertices f| \\<le> w f", "by (simp add: admissible_def admissible\\<^sub>1_def)"], ["proof (state)\nthis:\n  ?f \\<in> \\<F> g \\<Longrightarrow> \\<d> |vertices ?f| \\<le> w ?f\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Invariants.inv g; final g; tame g; admissible w g;\n     ListSum (faces g) w < squanderTarget\\<rbrakk>\n    \\<Longrightarrow> squanderLowerBound g \\<le> ListSum (faces g) w", "(*>*) (* *)"], ["proof (state)\nthis:\n  ?f \\<in> \\<F> g \\<Longrightarrow> \\<d> |vertices ?f| \\<le> w ?f\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Invariants.inv g; final g; tame g; admissible w g;\n     ListSum (faces g) w < squanderTarget\\<rbrakk>\n    \\<Longrightarrow> squanderLowerBound g \\<le> ListSum (faces g) w", "have \"squanderLowerBound g\n     = ExcessNotAt g None + faceSquanderLowerBound g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. squanderLowerBound g = ExcessNotAt g None + faceSquanderLowerBound g", "by (simp add: squanderLowerBound_def)"], ["proof (state)\nthis:\n  squanderLowerBound g = ExcessNotAt g None + faceSquanderLowerBound g\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Invariants.inv g; final g; tame g; admissible w g;\n     ListSum (faces g) w < squanderTarget\\<rbrakk>\n    \\<Longrightarrow> squanderLowerBound g \\<le> ListSum (faces g) w", "txt \\<open>We expand the definition of \\<open>faceSquanderLowerBound\\<close>.\\<close>"], ["proof (state)\nthis:\n  squanderLowerBound g = ExcessNotAt g None + faceSquanderLowerBound g\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Invariants.inv g; final g; tame g; admissible w g;\n     ListSum (faces g) w < squanderTarget\\<rbrakk>\n    \\<Longrightarrow> squanderLowerBound g \\<le> ListSum (faces g) w", "also"], ["proof (state)\nthis:\n  squanderLowerBound g = ExcessNotAt g None + faceSquanderLowerBound g\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Invariants.inv g; final g; tame g; admissible w g;\n     ListSum (faces g) w < squanderTarget\\<rbrakk>\n    \\<Longrightarrow> squanderLowerBound g \\<le> ListSum (faces g) w", "have \"faceSquanderLowerBound g = (\\<Sum>\\<^bsub>f \\<in> faces g\\<^esub> \\<d> |vertices f| )\""], ["proof (prove)\ngoal (1 subgoal):\n 1. faceSquanderLowerBound g =\n    (\\<Sum>\\<^bsub>f\\<in>faces g\\<^esub> \\<d> |vertices f|)", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. faceSquanderLowerBound g =\n    (\\<Sum>\\<^bsub>f\\<in>faces g\\<^esub> \\<d> |vertices f|)", "by (simp add: faceSquanderLowerBound_def final)"], ["proof (state)\nthis:\n  faceSquanderLowerBound g =\n  (\\<Sum>\\<^bsub>f\\<in>faces g\\<^esub> \\<d> |vertices f|)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Invariants.inv g; final g; tame g; admissible w g;\n     ListSum (faces g) w < squanderTarget\\<rbrakk>\n    \\<Longrightarrow> squanderLowerBound g \\<le> ListSum (faces g) w", "(*>*)"], ["proof (state)\nthis:\n  faceSquanderLowerBound g =\n  (\\<Sum>\\<^bsub>f\\<in>faces g\\<^esub> \\<d> |vertices f|)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Invariants.inv g; final g; tame g; admissible w g;\n     ListSum (faces g) w < squanderTarget\\<rbrakk>\n    \\<Longrightarrow> squanderLowerBound g \\<le> ListSum (faces g) w", "txt \\<open>We expand the definition of \\<open>ExcessNotAt\\<close>.\\<close>"], ["proof (state)\nthis:\n  faceSquanderLowerBound g =\n  (\\<Sum>\\<^bsub>f\\<in>faces g\\<^esub> \\<d> |vertices f|)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Invariants.inv g; final g; tame g; admissible w g;\n     ListSum (faces g) w < squanderTarget\\<rbrakk>\n    \\<Longrightarrow> squanderLowerBound g \\<le> ListSum (faces g) w", "also"], ["proof (state)\nthis:\n  faceSquanderLowerBound g =\n  (\\<Sum>\\<^bsub>f\\<in>faces g\\<^esub> \\<d> |vertices f|)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Invariants.inv g; final g; tame g; admissible w g;\n     ListSum (faces g) w < squanderTarget\\<rbrakk>\n    \\<Longrightarrow> squanderLowerBound g \\<le> ListSum (faces g) w", "from ExcessNotAt_eq[OF pl[THEN inv_mgp] final]"], ["proof (chain)\npicking this:\n  \\<exists>V.\n     ExcessNotAt g None = ListSum V (ExcessAt g) \\<and>\n     separated g (set V) \\<and> set V \\<subseteq> \\<V> g \\<and> distinct V", "obtain V\n    where eq: \"ExcessNotAt g None = (\\<Sum>\\<^bsub>v \\<in> V\\<^esub> ExcessAt g v)\"\n    and pS:  \"separated g (set V)\"\n    and V_subset: \"set V \\<subseteq> set(vertices g)\"\n    and V_distinct: \"distinct V\""], ["proof (prove)\nusing this:\n  \\<exists>V.\n     ExcessNotAt g None = ListSum V (ExcessAt g) \\<and>\n     separated g (set V) \\<and> set V \\<subseteq> \\<V> g \\<and> distinct V\n\ngoal (1 subgoal):\n 1. (\\<And>V.\n        \\<lbrakk>ExcessNotAt g None = ListSum V (ExcessAt g);\n         separated g (set V); set V \\<subseteq> \\<V> g; distinct V\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "(*<*)"], ["proof (prove)\nusing this:\n  \\<exists>V.\n     ExcessNotAt g None = ListSum V (ExcessAt g) \\<and>\n     separated g (set V) \\<and> set V \\<subseteq> \\<V> g \\<and> distinct V\n\ngoal (1 subgoal):\n 1. (\\<And>V.\n        \\<lbrakk>ExcessNotAt g None = ListSum V (ExcessAt g);\n         separated g (set V); set V \\<subseteq> \\<V> g; distinct V\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (blast)"], ["proof (state)\nthis:\n  ExcessNotAt g None = ListSum V (ExcessAt g)\n  separated g (set V)\n  set V \\<subseteq> \\<V> g\n  distinct V\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Invariants.inv g; final g; tame g; admissible w g;\n     ListSum (faces g) w < squanderTarget\\<rbrakk>\n    \\<Longrightarrow> squanderLowerBound g \\<le> ListSum (faces g) w", "note eq"], ["proof (state)\nthis:\n  ExcessNotAt g None = ListSum V (ExcessAt g)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Invariants.inv g; final g; tame g; admissible w g;\n     ListSum (faces g) w < squanderTarget\\<rbrakk>\n    \\<Longrightarrow> squanderLowerBound g \\<le> ListSum (faces g) w", "txt \\<open>We partition V in two disjoint subsets $V1, V2$,\n  where $V2$ contains all exceptional vertices, $V1$ all\n  not exceptional vertices.\\<close>"], ["proof (state)\nthis:\n  ExcessNotAt g None = ListSum V (ExcessAt g)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Invariants.inv g; final g; tame g; admissible w g;\n     ListSum (faces g) w < squanderTarget\\<rbrakk>\n    \\<Longrightarrow> squanderLowerBound g \\<le> ListSum (faces g) w", "also"], ["proof (state)\nthis:\n  ExcessNotAt g None = ListSum V (ExcessAt g)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Invariants.inv g; final g; tame g; admissible w g;\n     ListSum (faces g) w < squanderTarget\\<rbrakk>\n    \\<Longrightarrow> squanderLowerBound g \\<le> ListSum (faces g) w", "define V1 where \"V1 = [v \\<leftarrow> V. except g v = 0]\""], ["proof (state)\nthis:\n  V1 = filter (\\<lambda>v. except g v = 0) V\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Invariants.inv g; final g; tame g; admissible w g;\n     ListSum (faces g) w < squanderTarget\\<rbrakk>\n    \\<Longrightarrow> squanderLowerBound g \\<le> ListSum (faces g) w", "define V2 where \"V2 = [v \\<leftarrow> V. except g v \\<noteq> 0]\""], ["proof (state)\nthis:\n  V2 = filter (\\<lambda>v. except g v \\<noteq> 0) V\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Invariants.inv g; final g; tame g; admissible w g;\n     ListSum (faces g) w < squanderTarget\\<rbrakk>\n    \\<Longrightarrow> squanderLowerBound g \\<le> ListSum (faces g) w", "(*<*)"], ["proof (state)\nthis:\n  V2 = filter (\\<lambda>v. except g v \\<noteq> 0) V\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Invariants.inv g; final g; tame g; admissible w g;\n     ListSum (faces g) w < squanderTarget\\<rbrakk>\n    \\<Longrightarrow> squanderLowerBound g \\<le> ListSum (faces g) w", "have s: \"set V1 \\<subseteq> set V\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set V1 \\<subseteq> set V", "by (auto simp add: V1_def)"], ["proof (state)\nthis:\n  set V1 \\<subseteq> set V\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Invariants.inv g; final g; tame g; admissible w g;\n     ListSum (faces g) w < squanderTarget\\<rbrakk>\n    \\<Longrightarrow> squanderLowerBound g \\<le> ListSum (faces g) w", "with pS"], ["proof (chain)\npicking this:\n  separated g (set V)\n  set V1 \\<subseteq> set V", "obtain pSV1: \"separated g (set V1)\""], ["proof (prove)\nusing this:\n  separated g (set V)\n  set V1 \\<subseteq> set V\n\ngoal (1 subgoal):\n 1. (separated g (set V1) \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by (auto dest: separated_subset)"], ["proof (state)\nthis:\n  separated g (set V1)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Invariants.inv g; final g; tame g; admissible w g;\n     ListSum (faces g) w < squanderTarget\\<rbrakk>\n    \\<Longrightarrow> squanderLowerBound g \\<le> ListSum (faces g) w", "from V_distinct"], ["proof (chain)\npicking this:\n  distinct V", "obtain V1_distinct: \"distinct V1\""], ["proof (prove)\nusing this:\n  distinct V\n\ngoal (1 subgoal):\n 1. (distinct V1 \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by (unfold V1_def) (auto dest: distinct_filter)"], ["proof (state)\nthis:\n  distinct V1\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Invariants.inv g; final g; tame g; admissible w g;\n     ListSum (faces g) w < squanderTarget\\<rbrakk>\n    \\<Longrightarrow> squanderLowerBound g \\<le> ListSum (faces g) w", "obtain noExV1: \"noExceptionals g (set V1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (noExceptionals g (set V1) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp add: V1_def noExceptionals_def\n      exceptionalVertex_def)"], ["proof (state)\nthis:\n  noExceptionals g (set V1)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Invariants.inv g; final g; tame g; admissible w g;\n     ListSum (faces g) w < squanderTarget\\<rbrakk>\n    \\<Longrightarrow> squanderLowerBound g \\<le> ListSum (faces g) w", "(*>*) (* *)"], ["proof (state)\nthis:\n  noExceptionals g (set V1)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Invariants.inv g; final g; tame g; admissible w g;\n     ListSum (faces g) w < squanderTarget\\<rbrakk>\n    \\<Longrightarrow> squanderLowerBound g \\<le> ListSum (faces g) w", "have V_subset_simp: \"\\<And>v. v: set V \\<Longrightarrow> v : \\<V> g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>v. v \\<in> set V \\<Longrightarrow> v \\<in> \\<V> g", "using V_subset"], ["proof (prove)\nusing this:\n  set V \\<subseteq> \\<V> g\n\ngoal (1 subgoal):\n 1. \\<And>v. v \\<in> set V \\<Longrightarrow> v \\<in> \\<V> g", "by fast"], ["proof (state)\nthis:\n  ?v \\<in> set V \\<Longrightarrow> ?v \\<in> \\<V> g\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Invariants.inv g; final g; tame g; admissible w g;\n     ListSum (faces g) w < squanderTarget\\<rbrakk>\n    \\<Longrightarrow> squanderLowerBound g \\<le> ListSum (faces g) w", "have \"(\\<Sum>\\<^bsub>v \\<in> V\\<^esub> ExcessAt g v)\n    = (\\<Sum>\\<^bsub>v \\<in> V1\\<^esub> ExcessAt g v) + (\\<Sum>\\<^bsub>v \\<in> V2\\<^esub> ExcessAt g v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ListSum V (ExcessAt g) =\n    ListSum V1 (ExcessAt g) + ListSum V2 (ExcessAt g)", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. ListSum V (ExcessAt g) =\n    ListSum V1 (ExcessAt g) + ListSum V2 (ExcessAt g)", "by (simp only: V1_def V2_def ListSum_compl)"], ["proof (state)\nthis:\n  ListSum V (ExcessAt g) = ListSum V1 (ExcessAt g) + ListSum V2 (ExcessAt g)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Invariants.inv g; final g; tame g; admissible w g;\n     ListSum (faces g) w < squanderTarget\\<rbrakk>\n    \\<Longrightarrow> squanderLowerBound g \\<le> ListSum (faces g) w", "(*>*)"], ["proof (state)\nthis:\n  ListSum V (ExcessAt g) = ListSum V1 (ExcessAt g) + ListSum V2 (ExcessAt g)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Invariants.inv g; final g; tame g; admissible w g;\n     ListSum (faces g) w < squanderTarget\\<rbrakk>\n    \\<Longrightarrow> squanderLowerBound g \\<le> ListSum (faces g) w", "txt \\<open>We partition \\<open>V2\\<close> in two disjoint subsets,\n  $V4$ contains all exceptional vertices of degree $\\neq 5$\n  $V3$ contains all exceptional vertices of degree $5$.\n\\<close>"], ["proof (state)\nthis:\n  ListSum V (ExcessAt g) = ListSum V1 (ExcessAt g) + ListSum V2 (ExcessAt g)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Invariants.inv g; final g; tame g; admissible w g;\n     ListSum (faces g) w < squanderTarget\\<rbrakk>\n    \\<Longrightarrow> squanderLowerBound g \\<le> ListSum (faces g) w", "also"], ["proof (state)\nthis:\n  ListSum V (ExcessAt g) = ListSum V1 (ExcessAt g) + ListSum V2 (ExcessAt g)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Invariants.inv g; final g; tame g; admissible w g;\n     ListSum (faces g) w < squanderTarget\\<rbrakk>\n    \\<Longrightarrow> squanderLowerBound g \\<le> ListSum (faces g) w", "define V4 where \"V4 = [v \\<leftarrow> V2. vertextype g v \\<noteq> (5,0,1)]\""], ["proof (state)\nthis:\n  V4 = filter (\\<lambda>v. vertextype g v \\<noteq> (5, 0, 1)) V2\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Invariants.inv g; final g; tame g; admissible w g;\n     ListSum (faces g) w < squanderTarget\\<rbrakk>\n    \\<Longrightarrow> squanderLowerBound g \\<le> ListSum (faces g) w", "define V3 where \"V3 = [v \\<leftarrow> V2. vertextype g v = (5,0,1)]\""], ["proof (state)\nthis:\n  V3 = filter (\\<lambda>v. vertextype g v = (5, 0, 1)) V2\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Invariants.inv g; final g; tame g; admissible w g;\n     ListSum (faces g) w < squanderTarget\\<rbrakk>\n    \\<Longrightarrow> squanderLowerBound g \\<le> ListSum (faces g) w", "(*<*)"], ["proof (state)\nthis:\n  V3 = filter (\\<lambda>v. vertextype g v = (5, 0, 1)) V2\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Invariants.inv g; final g; tame g; admissible w g;\n     ListSum (faces g) w < squanderTarget\\<rbrakk>\n    \\<Longrightarrow> squanderLowerBound g \\<le> ListSum (faces g) w", "with pS V2_def"], ["proof (chain)\npicking this:\n  separated g (set V)\n  V2 = filter (\\<lambda>v. except g v \\<noteq> 0) V\n  V3 = filter (\\<lambda>v. vertextype g v = (5, 0, 1)) V2", "have V3: \"separated g (set V3)\""], ["proof (prove)\nusing this:\n  separated g (set V)\n  V2 = filter (\\<lambda>v. except g v \\<noteq> 0) V\n  V3 = filter (\\<lambda>v. vertextype g v = (5, 0, 1)) V2\n\ngoal (1 subgoal):\n 1. separated g (set V3)", "by (rule_tac separated_subset) auto"], ["proof (state)\nthis:\n  separated g (set V3)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Invariants.inv g; final g; tame g; admissible w g;\n     ListSum (faces g) w < squanderTarget\\<rbrakk>\n    \\<Longrightarrow> squanderLowerBound g \\<le> ListSum (faces g) w", "have \"distinct V3\""], ["proof (prove)\ngoal (1 subgoal):\n 1. distinct V3", "by(simp add:V3_def V2_def \\<open>distinct V\\<close>)"], ["proof (state)\nthis:\n  distinct V3\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Invariants.inv g; final g; tame g; admissible w g;\n     ListSum (faces g) w < squanderTarget\\<rbrakk>\n    \\<Longrightarrow> squanderLowerBound g \\<le> ListSum (faces g) w", "(*\n  with V3_def V2_def obtain V3: \"separated g (set V3)\"\n    by (simp add: vertextype_def separated_def preSeparated_def separated\\<^sub>1_def\n      separated\\<^sub>4_def)\n*)"], ["proof (state)\nthis:\n  distinct V3\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Invariants.inv g; final g; tame g; admissible w g;\n     ListSum (faces g) w < squanderTarget\\<rbrakk>\n    \\<Longrightarrow> squanderLowerBound g \\<le> ListSum (faces g) w", "from V_subset"], ["proof (chain)\npicking this:\n  set V \\<subseteq> \\<V> g", "obtain V3_subset: \"set V3 \\<subseteq> \\<V> g\""], ["proof (prove)\nusing this:\n  set V \\<subseteq> \\<V> g\n\ngoal (1 subgoal):\n 1. (set V3 \\<subseteq> \\<V> g \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp add: V3_def V2_def)"], ["proof (state)\nthis:\n  set V3 \\<subseteq> \\<V> g\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Invariants.inv g; final g; tame g; admissible w g;\n     ListSum (faces g) w < squanderTarget\\<rbrakk>\n    \\<Longrightarrow> squanderLowerBound g \\<le> ListSum (faces g) w", "(*>*)"], ["proof (state)\nthis:\n  set V3 \\<subseteq> \\<V> g\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Invariants.inv g; final g; tame g; admissible w g;\n     ListSum (faces g) w < squanderTarget\\<rbrakk>\n    \\<Longrightarrow> squanderLowerBound g \\<le> ListSum (faces g) w", "have \"(\\<Sum>\\<^bsub>v \\<in> V2\\<^esub> ExcessAt g v)\n    = (\\<Sum>\\<^bsub>v \\<in> V3\\<^esub> ExcessAt g v) + (\\<Sum>\\<^bsub>v \\<in> V4\\<^esub> ExcessAt g v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ListSum V2 (ExcessAt g) =\n    ListSum V3 (ExcessAt g) + ListSum V4 (ExcessAt g)", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. ListSum V2 (ExcessAt g) =\n    ListSum V3 (ExcessAt g) + ListSum V4 (ExcessAt g)", "by (simp add: V4_def V3_def ListSum_compl)"], ["proof (state)\nthis:\n  ListSum V2 (ExcessAt g) =\n  ListSum V3 (ExcessAt g) + ListSum V4 (ExcessAt g)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Invariants.inv g; final g; tame g; admissible w g;\n     ListSum (faces g) w < squanderTarget\\<rbrakk>\n    \\<Longrightarrow> squanderLowerBound g \\<le> ListSum (faces g) w", "(*>*) (* *)"], ["proof (state)\nthis:\n  ListSum V2 (ExcessAt g) =\n  ListSum V3 (ExcessAt g) + ListSum V4 (ExcessAt g)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Invariants.inv g; final g; tame g; admissible w g;\n     ListSum (faces g) w < squanderTarget\\<rbrakk>\n    \\<Longrightarrow> squanderLowerBound g \\<le> ListSum (faces g) w", "txt \\<open>We partition  \\<open>faces g\\<close> in two disjoint subsets:\n  $F1$ contains all faces that contain a vertex of $V1$,\n  $F2$ the remaining faces.\\<close>"], ["proof (state)\nthis:\n  ListSum V2 (ExcessAt g) =\n  ListSum V3 (ExcessAt g) + ListSum V4 (ExcessAt g)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Invariants.inv g; final g; tame g; admissible w g;\n     ListSum (faces g) w < squanderTarget\\<rbrakk>\n    \\<Longrightarrow> squanderLowerBound g \\<le> ListSum (faces g) w", "also"], ["proof (state)\nthis:\n  ListSum V2 (ExcessAt g) =\n  ListSum V3 (ExcessAt g) + ListSum V4 (ExcessAt g)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Invariants.inv g; final g; tame g; admissible w g;\n     ListSum (faces g) w < squanderTarget\\<rbrakk>\n    \\<Longrightarrow> squanderLowerBound g \\<le> ListSum (faces g) w", "define F1 where \"F1 = [f \\<leftarrow> faces g . \\<exists> v \\<in> set V1. f \\<in> set (facesAt g v)]\""], ["proof (state)\nthis:\n  F1 =\n  filter (\\<lambda>f. \\<exists>v\\<in>set V1. f \\<in> set (facesAt g v))\n   (faces g)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Invariants.inv g; final g; tame g; admissible w g;\n     ListSum (faces g) w < squanderTarget\\<rbrakk>\n    \\<Longrightarrow> squanderLowerBound g \\<le> ListSum (faces g) w", "define F2 where \"F2 = [f \\<leftarrow> faces g . \\<not>(\\<exists> v \\<in> set V1. f \\<in> set (facesAt g v))]\""], ["proof (state)\nthis:\n  F2 =\n  filter\n   (\\<lambda>f. \\<not> (\\<exists>v\\<in>set V1. f \\<in> set (facesAt g v)))\n   (faces g)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Invariants.inv g; final g; tame g; admissible w g;\n     ListSum (faces g) w < squanderTarget\\<rbrakk>\n    \\<Longrightarrow> squanderLowerBound g \\<le> ListSum (faces g) w", "have \"(\\<Sum>\\<^bsub>f \\<in> faces g\\<^esub> \\<d> |vertices f| )\n      = (\\<Sum>\\<^bsub>f \\<in> F1\\<^esub> \\<d> |vertices f| ) + (\\<Sum>\\<^bsub> f \\<in> F2\\<^esub> \\<d> |vertices f| )\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^bsub>f\\<in>faces g\\<^esub> \\<d> |vertices f|) =\n    (\\<Sum>\\<^bsub>f\\<in>F1\\<^esub> \\<d> |vertices f|) +\n    (\\<Sum>\\<^bsub>f\\<in>F2\\<^esub> \\<d> |vertices f|)", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^bsub>f\\<in>faces g\\<^esub> \\<d> |vertices f|) =\n    (\\<Sum>\\<^bsub>f\\<in>F1\\<^esub> \\<d> |vertices f|) +\n    (\\<Sum>\\<^bsub>f\\<in>F2\\<^esub> \\<d> |vertices f|)", "by (simp only: ListSum_compl F1_def F2_def)"], ["proof (state)\nthis:\n  (\\<Sum>\\<^bsub>f\\<in>faces g\\<^esub> \\<d> |vertices f|) =\n  (\\<Sum>\\<^bsub>f\\<in>F1\\<^esub> \\<d> |vertices f|) +\n  (\\<Sum>\\<^bsub>f\\<in>F2\\<^esub> \\<d> |vertices f|)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Invariants.inv g; final g; tame g; admissible w g;\n     ListSum (faces g) w < squanderTarget\\<rbrakk>\n    \\<Longrightarrow> squanderLowerBound g \\<le> ListSum (faces g) w", "(*>*) (* *)"], ["proof (state)\nthis:\n  (\\<Sum>\\<^bsub>f\\<in>faces g\\<^esub> \\<d> |vertices f|) =\n  (\\<Sum>\\<^bsub>f\\<in>F1\\<^esub> \\<d> |vertices f|) +\n  (\\<Sum>\\<^bsub>f\\<in>F2\\<^esub> \\<d> |vertices f|)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Invariants.inv g; final g; tame g; admissible w g;\n     ListSum (faces g) w < squanderTarget\\<rbrakk>\n    \\<Longrightarrow> squanderLowerBound g \\<le> ListSum (faces g) w", "txt \\<open>We split up \\<open>F2\\<close> in two disjoint subsets:\\<close>"], ["proof (state)\nthis:\n  (\\<Sum>\\<^bsub>f\\<in>faces g\\<^esub> \\<d> |vertices f|) =\n  (\\<Sum>\\<^bsub>f\\<in>F1\\<^esub> \\<d> |vertices f|) +\n  (\\<Sum>\\<^bsub>f\\<in>F2\\<^esub> \\<d> |vertices f|)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Invariants.inv g; final g; tame g; admissible w g;\n     ListSum (faces g) w < squanderTarget\\<rbrakk>\n    \\<Longrightarrow> squanderLowerBound g \\<le> ListSum (faces g) w", "also"], ["proof (state)\nthis:\n  (\\<Sum>\\<^bsub>f\\<in>faces g\\<^esub> \\<d> |vertices f|) =\n  (\\<Sum>\\<^bsub>f\\<in>F1\\<^esub> \\<d> |vertices f|) +\n  (\\<Sum>\\<^bsub>f\\<in>F2\\<^esub> \\<d> |vertices f|)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Invariants.inv g; final g; tame g; admissible w g;\n     ListSum (faces g) w < squanderTarget\\<rbrakk>\n    \\<Longrightarrow> squanderLowerBound g \\<le> ListSum (faces g) w", "define F3 where \"F3 = [f\\<leftarrow>F2. \\<exists>v \\<in> set V3. f \\<in> set (facesAt g v)]\""], ["proof (state)\nthis:\n  F3 =\n  filter (\\<lambda>f. \\<exists>v\\<in>set V3. f \\<in> set (facesAt g v)) F2\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Invariants.inv g; final g; tame g; admissible w g;\n     ListSum (faces g) w < squanderTarget\\<rbrakk>\n    \\<Longrightarrow> squanderLowerBound g \\<le> ListSum (faces g) w", "define F4 where \"F4 = [f\\<leftarrow>F2. \\<not> (\\<exists>v \\<in> set V3. f \\<in> set (facesAt g v))]\""], ["proof (state)\nthis:\n  F4 =\n  filter\n   (\\<lambda>f. \\<not> (\\<exists>v\\<in>set V3. f \\<in> set (facesAt g v)))\n   F2\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Invariants.inv g; final g; tame g; admissible w g;\n     ListSum (faces g) w < squanderTarget\\<rbrakk>\n    \\<Longrightarrow> squanderLowerBound g \\<le> ListSum (faces g) w", "have F3: \"F3 = [f\\<leftarrow>faces g . \\<exists>v \\<in> set V3. f \\<in> set (facesAt g v)]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. F3 =\n    filter (\\<lambda>f. \\<exists>v\\<in>set V3. f \\<in> set (facesAt g v))\n     (faces g)", "proof(simp add: F3_def F2_def, intro filter_eqI iffI conjI)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> \\<F> g;\n        (\\<forall>v\\<in>set V1. x \\<notin> set (facesAt g v)) \\<and>\n        (\\<exists>v\\<in>set V3. x \\<in> set (facesAt g v))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v\\<in>set V3. x \\<in> set (facesAt g v)\n 2. \\<And>x.\n       \\<lbrakk>x \\<in> \\<F> g;\n        \\<exists>v\\<in>set V3. x \\<in> set (facesAt g v)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>v\\<in>set V1. x \\<notin> set (facesAt g v)\n 3. \\<And>x.\n       \\<lbrakk>x \\<in> \\<F> g;\n        \\<exists>v\\<in>set V3. x \\<in> set (facesAt g v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v\\<in>set V3. x \\<in> set (facesAt g v)", "fix f"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> \\<F> g;\n        (\\<forall>v\\<in>set V1. x \\<notin> set (facesAt g v)) \\<and>\n        (\\<exists>v\\<in>set V3. x \\<in> set (facesAt g v))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v\\<in>set V3. x \\<in> set (facesAt g v)\n 2. \\<And>x.\n       \\<lbrakk>x \\<in> \\<F> g;\n        \\<exists>v\\<in>set V3. x \\<in> set (facesAt g v)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>v\\<in>set V1. x \\<notin> set (facesAt g v)\n 3. \\<And>x.\n       \\<lbrakk>x \\<in> \\<F> g;\n        \\<exists>v\\<in>set V3. x \\<in> set (facesAt g v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v\\<in>set V3. x \\<in> set (facesAt g v)", "assume \"f \\<in> set (faces g)\""], ["proof (state)\nthis:\n  f \\<in> \\<F> g\n\ngoal (3 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> \\<F> g;\n        (\\<forall>v\\<in>set V1. x \\<notin> set (facesAt g v)) \\<and>\n        (\\<exists>v\\<in>set V3. x \\<in> set (facesAt g v))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v\\<in>set V3. x \\<in> set (facesAt g v)\n 2. \\<And>x.\n       \\<lbrakk>x \\<in> \\<F> g;\n        \\<exists>v\\<in>set V3. x \\<in> set (facesAt g v)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>v\\<in>set V1. x \\<notin> set (facesAt g v)\n 3. \\<And>x.\n       \\<lbrakk>x \\<in> \\<F> g;\n        \\<exists>v\\<in>set V3. x \\<in> set (facesAt g v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v\\<in>set V3. x \\<in> set (facesAt g v)", "with final"], ["proof (chain)\npicking this:\n  final g\n  f \\<in> \\<F> g", "have fin: \"final f\""], ["proof (prove)\nusing this:\n  final g\n  f \\<in> \\<F> g\n\ngoal (1 subgoal):\n 1. final f", "by (rule finalGraph_face)"], ["proof (state)\nthis:\n  final f\n\ngoal (3 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> \\<F> g;\n        (\\<forall>v\\<in>set V1. x \\<notin> set (facesAt g v)) \\<and>\n        (\\<exists>v\\<in>set V3. x \\<in> set (facesAt g v))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v\\<in>set V3. x \\<in> set (facesAt g v)\n 2. \\<And>x.\n       \\<lbrakk>x \\<in> \\<F> g;\n        \\<exists>v\\<in>set V3. x \\<in> set (facesAt g v)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>v\\<in>set V1. x \\<notin> set (facesAt g v)\n 3. \\<And>x.\n       \\<lbrakk>x \\<in> \\<F> g;\n        \\<exists>v\\<in>set V3. x \\<in> set (facesAt g v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v\\<in>set V3. x \\<in> set (facesAt g v)", "assume \"\\<exists>v3\\<in>set V3. f \\<in> set (facesAt g v3)\""], ["proof (state)\nthis:\n  \\<exists>v3\\<in>set V3. f \\<in> set (facesAt g v3)\n\ngoal (3 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> \\<F> g;\n        (\\<forall>v\\<in>set V1. x \\<notin> set (facesAt g v)) \\<and>\n        (\\<exists>v\\<in>set V3. x \\<in> set (facesAt g v))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v\\<in>set V3. x \\<in> set (facesAt g v)\n 2. \\<And>x.\n       \\<lbrakk>x \\<in> \\<F> g;\n        \\<exists>v\\<in>set V3. x \\<in> set (facesAt g v)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>v\\<in>set V1. x \\<notin> set (facesAt g v)\n 3. \\<And>x.\n       \\<lbrakk>x \\<in> \\<F> g;\n        \\<exists>v\\<in>set V3. x \\<in> set (facesAt g v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v\\<in>set V3. x \\<in> set (facesAt g v)", "then"], ["proof (chain)\npicking this:\n  \\<exists>v3\\<in>set V3. f \\<in> set (facesAt g v3)", "obtain v3 where v3: \"v3 \\<in> set V3\" \"f \\<in> set (facesAt g v3)\""], ["proof (prove)\nusing this:\n  \\<exists>v3\\<in>set V3. f \\<in> set (facesAt g v3)\n\ngoal (1 subgoal):\n 1. (\\<And>v3.\n        \\<lbrakk>v3 \\<in> set V3; f \\<in> set (facesAt g v3)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  v3 \\<in> set V3\n  f \\<in> set (facesAt g v3)\n\ngoal (3 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> \\<F> g;\n        (\\<forall>v\\<in>set V1. x \\<notin> set (facesAt g v)) \\<and>\n        (\\<exists>v\\<in>set V3. x \\<in> set (facesAt g v))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v\\<in>set V3. x \\<in> set (facesAt g v)\n 2. \\<And>x.\n       \\<lbrakk>x \\<in> \\<F> g;\n        \\<exists>v\\<in>set V3. x \\<in> set (facesAt g v)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>v\\<in>set V1. x \\<notin> set (facesAt g v)\n 3. \\<And>x.\n       \\<lbrakk>x \\<in> \\<F> g;\n        \\<exists>v\\<in>set V3. x \\<in> set (facesAt g v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v\\<in>set V3. x \\<in> set (facesAt g v)", "show \"(\\<forall>v1\\<in>set V1. f \\<notin> set (facesAt g v1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>v1\\<in>set V1. f \\<notin> set (facesAt g v1)", "proof (intro ballI notI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>v1.\n       \\<lbrakk>v1 \\<in> set V1; f \\<in> set (facesAt g v1)\\<rbrakk>\n       \\<Longrightarrow> False", "fix v1"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>v1.\n       \\<lbrakk>v1 \\<in> set V1; f \\<in> set (facesAt g v1)\\<rbrakk>\n       \\<Longrightarrow> False", "assume v1: \"v1 \\<in> set V1\""], ["proof (state)\nthis:\n  v1 \\<in> set V1\n\ngoal (1 subgoal):\n 1. \\<And>v1.\n       \\<lbrakk>v1 \\<in> set V1; f \\<in> set (facesAt g v1)\\<rbrakk>\n       \\<Longrightarrow> False", "with v3"], ["proof (chain)\npicking this:\n  v3 \\<in> set V3\n  f \\<in> set (facesAt g v3)\n  v1 \\<in> set V1", "have \"v1 \\<noteq> v3\""], ["proof (prove)\nusing this:\n  v3 \\<in> set V3\n  f \\<in> set (facesAt g v3)\n  v1 \\<in> set V1\n\ngoal (1 subgoal):\n 1. v1 \\<noteq> v3", "by (auto simp add: V3_def V2_def V1_def)"], ["proof (state)\nthis:\n  v1 \\<noteq> v3\n\ngoal (1 subgoal):\n 1. \\<And>v1.\n       \\<lbrakk>v1 \\<in> set V1; f \\<in> set (facesAt g v1)\\<rbrakk>\n       \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  v1 \\<noteq> v3\n\ngoal (1 subgoal):\n 1. \\<And>v1.\n       \\<lbrakk>v1 \\<in> set V1; f \\<in> set (facesAt g v1)\\<rbrakk>\n       \\<Longrightarrow> False", "assume f: \"f \\<in> set (facesAt g v1)\""], ["proof (state)\nthis:\n  f \\<in> set (facesAt g v1)\n\ngoal (1 subgoal):\n 1. \\<And>v1.\n       \\<lbrakk>v1 \\<in> set V1; f \\<in> set (facesAt g v1)\\<rbrakk>\n       \\<Longrightarrow> False", "with v1 fin"], ["proof (chain)\npicking this:\n  v1 \\<in> set V1\n  final f\n  f \\<in> set (facesAt g v1)", "have c: \"|vertices f| \\<le> 4\""], ["proof (prove)\nusing this:\n  v1 \\<in> set V1\n  final f\n  f \\<in> set (facesAt g v1)\n\ngoal (1 subgoal):\n 1. |vertices f| \\<le> 4", "by (auto simp add: V1_def except_def)"], ["proof (state)\nthis:\n  |vertices f| \\<le> 4\n\ngoal (1 subgoal):\n 1. \\<And>v1.\n       \\<lbrakk>v1 \\<in> set V1; f \\<in> set (facesAt g v1)\\<rbrakk>\n       \\<Longrightarrow> False", "from v1"], ["proof (chain)\npicking this:\n  v1 \\<in> set V1", "have \"v1 \\<in> set V\""], ["proof (prove)\nusing this:\n  v1 \\<in> set V1\n\ngoal (1 subgoal):\n 1. v1 \\<in> set V", "by (simp add: V1_def)"], ["proof (state)\nthis:\n  v1 \\<in> set V\n\ngoal (1 subgoal):\n 1. \\<And>v1.\n       \\<lbrakk>v1 \\<in> set V1; f \\<in> set (facesAt g v1)\\<rbrakk>\n       \\<Longrightarrow> False", "with f pS c"], ["proof (chain)\npicking this:\n  f \\<in> set (facesAt g v1)\n  separated g (set V)\n  |vertices f| \\<le> 4\n  v1 \\<in> set V", "have \"set (vertices f) \\<inter> set V = {v1}\""], ["proof (prove)\nusing this:\n  f \\<in> set (facesAt g v1)\n  separated g (set V)\n  |vertices f| \\<le> 4\n  v1 \\<in> set V\n\ngoal (1 subgoal):\n 1. \\<V> f \\<inter> set V = {v1}", "by (simp add: separated_def separated\\<^sub>3_def)"], ["proof (state)\nthis:\n  \\<V> f \\<inter> set V = {v1}\n\ngoal (1 subgoal):\n 1. \\<And>v1.\n       \\<lbrakk>v1 \\<in> set V1; f \\<in> set (facesAt g v1)\\<rbrakk>\n       \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  \\<V> f \\<inter> set V = {v1}\n\ngoal (1 subgoal):\n 1. \\<And>v1.\n       \\<lbrakk>v1 \\<in> set V1; f \\<in> set (facesAt g v1)\\<rbrakk>\n       \\<Longrightarrow> False", "from v3"], ["proof (chain)\npicking this:\n  v3 \\<in> set V3\n  f \\<in> set (facesAt g v3)", "have \"v3 \\<in> set V\""], ["proof (prove)\nusing this:\n  v3 \\<in> set V3\n  f \\<in> set (facesAt g v3)\n\ngoal (1 subgoal):\n 1. v3 \\<in> set V", "by (simp add: V3_def V2_def)"], ["proof (state)\nthis:\n  v3 \\<in> set V\n\ngoal (1 subgoal):\n 1. \\<And>v1.\n       \\<lbrakk>v1 \\<in> set V1; f \\<in> set (facesAt g v1)\\<rbrakk>\n       \\<Longrightarrow> False", "with v3 pS c"], ["proof (chain)\npicking this:\n  v3 \\<in> set V3\n  f \\<in> set (facesAt g v3)\n  separated g (set V)\n  |vertices f| \\<le> 4\n  v3 \\<in> set V", "have \"set (vertices f) \\<inter> set V = {v3}\""], ["proof (prove)\nusing this:\n  v3 \\<in> set V3\n  f \\<in> set (facesAt g v3)\n  separated g (set V)\n  |vertices f| \\<le> 4\n  v3 \\<in> set V\n\ngoal (1 subgoal):\n 1. \\<V> f \\<inter> set V = {v3}", "by (simp add: separated_def separated\\<^sub>3_def)"], ["proof (state)\nthis:\n  \\<V> f \\<inter> set V = {v3}\n\ngoal (1 subgoal):\n 1. \\<And>v1.\n       \\<lbrakk>v1 \\<in> set V1; f \\<in> set (facesAt g v1)\\<rbrakk>\n       \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  v1 \\<noteq> v3\n  \\<V> f \\<inter> set V = {v1}\n  \\<V> f \\<inter> set V = {v3}", "show False"], ["proof (prove)\nusing this:\n  v1 \\<noteq> v3\n  \\<V> f \\<inter> set V = {v1}\n  \\<V> f \\<inter> set V = {v3}\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>v1\\<in>set V1. f \\<notin> set (facesAt g v1)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> \\<F> g;\n        (\\<forall>v\\<in>set V1. x \\<notin> set (facesAt g v)) \\<and>\n        (\\<exists>v\\<in>set V3. x \\<in> set (facesAt g v))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v\\<in>set V3. x \\<in> set (facesAt g v)\n 2. \\<And>x.\n       \\<lbrakk>x \\<in> \\<F> g;\n        \\<exists>v\\<in>set V3. x \\<in> set (facesAt g v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v\\<in>set V3. x \\<in> set (facesAt g v)", "qed simp"], ["proof (state)\nthis:\n  F3 =\n  filter (\\<lambda>f. \\<exists>v\\<in>set V3. f \\<in> set (facesAt g v))\n   (faces g)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Invariants.inv g; final g; tame g; admissible w g;\n     ListSum (faces g) w < squanderTarget\\<rbrakk>\n    \\<Longrightarrow> squanderLowerBound g \\<le> ListSum (faces g) w", "have \"(\\<Sum>\\<^bsub>f\\<in>F2\\<^esub> \\<d> |vertices f| )\n   = (\\<Sum>\\<^bsub>f\\<in>F3\\<^esub> \\<d> |vertices f| ) + (\\<Sum>\\<^bsub>f\\<in>F4\\<^esub> \\<d> |vertices f| )\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^bsub>f\\<in>F2\\<^esub> \\<d> |vertices f|) =\n    (\\<Sum>\\<^bsub>f\\<in>F3\\<^esub> \\<d> |vertices f|) +\n    (\\<Sum>\\<^bsub>f\\<in>F4\\<^esub> \\<d> |vertices f|)", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^bsub>f\\<in>F2\\<^esub> \\<d> |vertices f|) =\n    (\\<Sum>\\<^bsub>f\\<in>F3\\<^esub> \\<d> |vertices f|) +\n    (\\<Sum>\\<^bsub>f\\<in>F4\\<^esub> \\<d> |vertices f|)", "by (simp only: F3_def F4_def ListSum_compl)"], ["proof (state)\nthis:\n  (\\<Sum>\\<^bsub>f\\<in>F2\\<^esub> \\<d> |vertices f|) =\n  (\\<Sum>\\<^bsub>f\\<in>F3\\<^esub> \\<d> |vertices f|) +\n  (\\<Sum>\\<^bsub>f\\<in>F4\\<^esub> \\<d> |vertices f|)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Invariants.inv g; final g; tame g; admissible w g;\n     ListSum (faces g) w < squanderTarget\\<rbrakk>\n    \\<Longrightarrow> squanderLowerBound g \\<le> ListSum (faces g) w", "(*>*) (* *)"], ["proof (state)\nthis:\n  (\\<Sum>\\<^bsub>f\\<in>F2\\<^esub> \\<d> |vertices f|) =\n  (\\<Sum>\\<^bsub>f\\<in>F3\\<^esub> \\<d> |vertices f|) +\n  (\\<Sum>\\<^bsub>f\\<in>F4\\<^esub> \\<d> |vertices f|)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Invariants.inv g; final g; tame g; admissible w g;\n     ListSum (faces g) w < squanderTarget\\<rbrakk>\n    \\<Longrightarrow> squanderLowerBound g \\<le> ListSum (faces g) w", "text_raw \\<open>\\newpage\\<close>"], ["proof (state)\nthis:\n  (\\<Sum>\\<^bsub>f\\<in>F2\\<^esub> \\<d> |vertices f|) =\n  (\\<Sum>\\<^bsub>f\\<in>F3\\<^esub> \\<d> |vertices f|) +\n  (\\<Sum>\\<^bsub>f\\<in>F4\\<^esub> \\<d> |vertices f|)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Invariants.inv g; final g; tame g; admissible w g;\n     ListSum (faces g) w < squanderTarget\\<rbrakk>\n    \\<Longrightarrow> squanderLowerBound g \\<le> ListSum (faces g) w", "txt \\<open>($E_1$) From the definition of \\<open>ExcessAt\\<close> we have\\<close>"], ["proof (state)\nthis:\n  (\\<Sum>\\<^bsub>f\\<in>F2\\<^esub> \\<d> |vertices f|) =\n  (\\<Sum>\\<^bsub>f\\<in>F3\\<^esub> \\<d> |vertices f|) +\n  (\\<Sum>\\<^bsub>f\\<in>F4\\<^esub> \\<d> |vertices f|)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Invariants.inv g; final g; tame g; admissible w g;\n     ListSum (faces g) w < squanderTarget\\<rbrakk>\n    \\<Longrightarrow> squanderLowerBound g \\<le> ListSum (faces g) w", "also"], ["proof (state)\nthis:\n  (\\<Sum>\\<^bsub>f\\<in>F2\\<^esub> \\<d> |vertices f|) =\n  (\\<Sum>\\<^bsub>f\\<in>F3\\<^esub> \\<d> |vertices f|) +\n  (\\<Sum>\\<^bsub>f\\<in>F4\\<^esub> \\<d> |vertices f|)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Invariants.inv g; final g; tame g; admissible w g;\n     ListSum (faces g) w < squanderTarget\\<rbrakk>\n    \\<Longrightarrow> squanderLowerBound g \\<le> ListSum (faces g) w", "have \"(\\<Sum>\\<^bsub>v \\<in> V1\\<^esub> ExcessAt g v) + (\\<Sum>\\<^bsub> f \\<in> F1\\<^esub> \\<d> |vertices f| )\n      = (\\<Sum>\\<^bsub>v \\<in> V1\\<^esub> \\<b> (tri g v) (quad g v))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ListSum V1 (ExcessAt g) +\n    (\\<Sum>\\<^bsub>f\\<in>F1\\<^esub> \\<d> |vertices f|) =\n    (\\<Sum>\\<^bsub>v\\<in>V1\\<^esub> \\<b> (tri g v) (quad g v))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. ListSum V1 (ExcessAt g) +\n    (\\<Sum>\\<^bsub>f\\<in>F1\\<^esub> \\<d> |vertices f|) =\n    (\\<Sum>\\<^bsub>v\\<in>V1\\<^esub> \\<b> (tri g v) (quad g v))", "from noExV1 V_subset"], ["proof (chain)\npicking this:\n  noExceptionals g (set V1)\n  set V \\<subseteq> \\<V> g", "have \"(\\<Sum>\\<^bsub> f \\<in> F1\\<^esub> \\<d> |vertices f| )\n      = (\\<Sum>\\<^bsub>v \\<in> V1\\<^esub> (tri g v *  \\<d> 3 + quad g v * \\<d> 4))\""], ["proof (prove)\nusing this:\n  noExceptionals g (set V1)\n  set V \\<subseteq> \\<V> g\n\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^bsub>f\\<in>F1\\<^esub> \\<d> |vertices f|) =\n    (\\<Sum>\\<^bsub>v\\<in>V1\\<^esub> tri g v * \\<d> 3 + quad g v * \\<d> 4)", "apply (unfold F1_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>noExceptionals g (set V1); set V \\<subseteq> \\<V> g\\<rbrakk>\n    \\<Longrightarrow> (\\<Sum>\\<^bsub>f\\<in>filter\n      (\\<lambda>f. \\<exists>v\\<in>set V1. f \\<in> set (facesAt g v))\n      (faces g)\\<^esub> \\<d> |vertices f|) =\n                      (\\<Sum>\\<^bsub>v\\<in>V1\\<^esub> tri g v * \\<d> 3 +\n                quad g v * \\<d> 4)", "apply (rule_tac squanderFace_distr2)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<lbrakk>noExceptionals g (set V1); set V \\<subseteq> \\<V> g\\<rbrakk>\n    \\<Longrightarrow> Invariants.inv g\n 2. \\<lbrakk>noExceptionals g (set V1); set V \\<subseteq> \\<V> g\\<rbrakk>\n    \\<Longrightarrow> final g\n 3. \\<lbrakk>noExceptionals g (set V1); set V \\<subseteq> \\<V> g\\<rbrakk>\n    \\<Longrightarrow> noExceptionals g (set V1)\n 4. \\<lbrakk>noExceptionals g (set V1); set V \\<subseteq> \\<V> g\\<rbrakk>\n    \\<Longrightarrow> separated g (set V1)\n 5. \\<lbrakk>noExceptionals g (set V1); set V \\<subseteq> \\<V> g\\<rbrakk>\n    \\<Longrightarrow> distinct V1\n 6. \\<lbrakk>noExceptionals g (set V1); set V \\<subseteq> \\<V> g\\<rbrakk>\n    \\<Longrightarrow> set V1 \\<subseteq> \\<V> g", "apply (rule pl)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>noExceptionals g (set V1); set V \\<subseteq> \\<V> g\\<rbrakk>\n    \\<Longrightarrow> final g\n 2. \\<lbrakk>noExceptionals g (set V1); set V \\<subseteq> \\<V> g\\<rbrakk>\n    \\<Longrightarrow> noExceptionals g (set V1)\n 3. \\<lbrakk>noExceptionals g (set V1); set V \\<subseteq> \\<V> g\\<rbrakk>\n    \\<Longrightarrow> separated g (set V1)\n 4. \\<lbrakk>noExceptionals g (set V1); set V \\<subseteq> \\<V> g\\<rbrakk>\n    \\<Longrightarrow> distinct V1\n 5. \\<lbrakk>noExceptionals g (set V1); set V \\<subseteq> \\<V> g\\<rbrakk>\n    \\<Longrightarrow> set V1 \\<subseteq> \\<V> g", "apply (rule final)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>noExceptionals g (set V1); set V \\<subseteq> \\<V> g\\<rbrakk>\n    \\<Longrightarrow> noExceptionals g (set V1)\n 2. \\<lbrakk>noExceptionals g (set V1); set V \\<subseteq> \\<V> g\\<rbrakk>\n    \\<Longrightarrow> separated g (set V1)\n 3. \\<lbrakk>noExceptionals g (set V1); set V \\<subseteq> \\<V> g\\<rbrakk>\n    \\<Longrightarrow> distinct V1\n 4. \\<lbrakk>noExceptionals g (set V1); set V \\<subseteq> \\<V> g\\<rbrakk>\n    \\<Longrightarrow> set V1 \\<subseteq> \\<V> g", "apply (rule noExV1)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>noExceptionals g (set V1); set V \\<subseteq> \\<V> g\\<rbrakk>\n    \\<Longrightarrow> separated g (set V1)\n 2. \\<lbrakk>noExceptionals g (set V1); set V \\<subseteq> \\<V> g\\<rbrakk>\n    \\<Longrightarrow> distinct V1\n 3. \\<lbrakk>noExceptionals g (set V1); set V \\<subseteq> \\<V> g\\<rbrakk>\n    \\<Longrightarrow> set V1 \\<subseteq> \\<V> g", "apply (rule pSV1)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>noExceptionals g (set V1); set V \\<subseteq> \\<V> g\\<rbrakk>\n    \\<Longrightarrow> distinct V1\n 2. \\<lbrakk>noExceptionals g (set V1); set V \\<subseteq> \\<V> g\\<rbrakk>\n    \\<Longrightarrow> set V1 \\<subseteq> \\<V> g", "apply (rule V1_distinct)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>noExceptionals g (set V1); set V \\<subseteq> \\<V> g\\<rbrakk>\n    \\<Longrightarrow> set V1 \\<subseteq> \\<V> g", "apply (unfold V1_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>noExceptionals g (set (filter (\\<lambda>v. except g v = 0) V));\n     set V \\<subseteq> \\<V> g\\<rbrakk>\n    \\<Longrightarrow> set (filter (\\<lambda>v. except g v = 0) V)\n                      \\<subseteq> \\<V> g", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  (\\<Sum>\\<^bsub>f\\<in>F1\\<^esub> \\<d> |vertices f|) =\n  (\\<Sum>\\<^bsub>v\\<in>V1\\<^esub> tri g v * \\<d> 3 + quad g v * \\<d> 4)\n\ngoal (1 subgoal):\n 1. ListSum V1 (ExcessAt g) +\n    (\\<Sum>\\<^bsub>f\\<in>F1\\<^esub> \\<d> |vertices f|) =\n    (\\<Sum>\\<^bsub>v\\<in>V1\\<^esub> \\<b> (tri g v) (quad g v))", "also"], ["proof (state)\nthis:\n  (\\<Sum>\\<^bsub>f\\<in>F1\\<^esub> \\<d> |vertices f|) =\n  (\\<Sum>\\<^bsub>v\\<in>V1\\<^esub> tri g v * \\<d> 3 + quad g v * \\<d> 4)\n\ngoal (1 subgoal):\n 1. ListSum V1 (ExcessAt g) +\n    (\\<Sum>\\<^bsub>f\\<in>F1\\<^esub> \\<d> |vertices f|) =\n    (\\<Sum>\\<^bsub>v\\<in>V1\\<^esub> \\<b> (tri g v) (quad g v))", "have \"(\\<Sum>\\<^bsub>v \\<in> V1\\<^esub> ExcessAt g v)\n      + (\\<Sum>\\<^bsub>v \\<in> V1\\<^esub> (tri g v * \\<d> 3 + quad g v * \\<d> 4))\n      = (\\<Sum>\\<^bsub>v \\<in> V1\\<^esub> (ExcessAt g v\n      + tri g v * \\<d> 3 + quad g v * \\<d> 4))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ListSum V1 (ExcessAt g) +\n    (\\<Sum>\\<^bsub>v\\<in>V1\\<^esub> tri g v * \\<d> 3 + quad g v * \\<d> 4) =\n    (\\<Sum>\\<^bsub>v\\<in>V1\\<^esub> ExcessAt g v + tri g v * \\<d> 3 +\n                                    quad g v * \\<d> 4)", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. ListSum V1 (ExcessAt g) +\n    (\\<Sum>\\<^bsub>v\\<in>V1\\<^esub> tri g v * \\<d> 3 + quad g v * \\<d> 4) =\n    (\\<Sum>\\<^bsub>v\\<in>V1\\<^esub> ExcessAt g v + tri g v * \\<d> 3 +\n                                    quad g v * \\<d> 4)", "by (simp add: ListSum_add ac_simps)"], ["proof (state)\nthis:\n  ListSum V1 (ExcessAt g) +\n  (\\<Sum>\\<^bsub>v\\<in>V1\\<^esub> tri g v * \\<d> 3 + quad g v * \\<d> 4) =\n  (\\<Sum>\\<^bsub>v\\<in>V1\\<^esub> ExcessAt g v + tri g v * \\<d> 3 +\n                                  quad g v * \\<d> 4)\n\ngoal (1 subgoal):\n 1. ListSum V1 (ExcessAt g) +\n    (\\<Sum>\\<^bsub>f\\<in>F1\\<^esub> \\<d> |vertices f|) =\n    (\\<Sum>\\<^bsub>v\\<in>V1\\<^esub> \\<b> (tri g v) (quad g v))", "(*>*) (* FIXME  also takes too long *)"], ["proof (state)\nthis:\n  ListSum V1 (ExcessAt g) +\n  (\\<Sum>\\<^bsub>v\\<in>V1\\<^esub> tri g v * \\<d> 3 + quad g v * \\<d> 4) =\n  (\\<Sum>\\<^bsub>v\\<in>V1\\<^esub> ExcessAt g v + tri g v * \\<d> 3 +\n                                  quad g v * \\<d> 4)\n\ngoal (1 subgoal):\n 1. ListSum V1 (ExcessAt g) +\n    (\\<Sum>\\<^bsub>f\\<in>F1\\<^esub> \\<d> |vertices f|) =\n    (\\<Sum>\\<^bsub>v\\<in>V1\\<^esub> \\<b> (tri g v) (quad g v))", "also"], ["proof (state)\nthis:\n  ListSum V1 (ExcessAt g) +\n  (\\<Sum>\\<^bsub>v\\<in>V1\\<^esub> tri g v * \\<d> 3 + quad g v * \\<d> 4) =\n  (\\<Sum>\\<^bsub>v\\<in>V1\\<^esub> ExcessAt g v + tri g v * \\<d> 3 +\n                                  quad g v * \\<d> 4)\n\ngoal (1 subgoal):\n 1. ListSum V1 (ExcessAt g) +\n    (\\<Sum>\\<^bsub>f\\<in>F1\\<^esub> \\<d> |vertices f|) =\n    (\\<Sum>\\<^bsub>v\\<in>V1\\<^esub> \\<b> (tri g v) (quad g v))", "from pl final tame"], ["proof (chain)\npicking this:\n  Invariants.inv g\n  final g\n  tame g", "have \"\\<dots> = (\\<Sum>\\<^bsub>v \\<in> V1\\<^esub> \\<b> (tri g v) (quad g v))\""], ["proof (prove)\nusing this:\n  Invariants.inv g\n  final g\n  tame g\n\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^bsub>v\\<in>V1\\<^esub> ExcessAt g v + tri g v * \\<d> 3 +\n                                    quad g v * \\<d> 4) =\n    (\\<Sum>\\<^bsub>v\\<in>V1\\<^esub> \\<b> (tri g v) (quad g v))", "by (rule_tac ListSum_eq)\n         (fastforce simp add: V1_def V_subset[THEN subsetD] intro: excess_eq1)"], ["proof (state)\nthis:\n  (\\<Sum>\\<^bsub>v\\<in>V1\\<^esub> ExcessAt g v + tri g v * \\<d> 3 +\n                                  quad g v * \\<d> 4) =\n  (\\<Sum>\\<^bsub>v\\<in>V1\\<^esub> \\<b> (tri g v) (quad g v))\n\ngoal (1 subgoal):\n 1. ListSum V1 (ExcessAt g) +\n    (\\<Sum>\\<^bsub>f\\<in>F1\\<^esub> \\<d> |vertices f|) =\n    (\\<Sum>\\<^bsub>v\\<in>V1\\<^esub> \\<b> (tri g v) (quad g v))", "finally"], ["proof (chain)\npicking this:\n  ListSum V1 (ExcessAt g) +\n  (\\<Sum>\\<^bsub>f\\<in>F1\\<^esub> \\<d> |vertices f|) =\n  (\\<Sum>\\<^bsub>v\\<in>V1\\<^esub> \\<b> (tri g v) (quad g v))", "show ?thesis"], ["proof (prove)\nusing this:\n  ListSum V1 (ExcessAt g) +\n  (\\<Sum>\\<^bsub>f\\<in>F1\\<^esub> \\<d> |vertices f|) =\n  (\\<Sum>\\<^bsub>v\\<in>V1\\<^esub> \\<b> (tri g v) (quad g v))\n\ngoal (1 subgoal):\n 1. ListSum V1 (ExcessAt g) +\n    (\\<Sum>\\<^bsub>f\\<in>F1\\<^esub> \\<d> |vertices f|) =\n    (\\<Sum>\\<^bsub>v\\<in>V1\\<^esub> \\<b> (tri g v) (quad g v))", "."], ["proof (state)\nthis:\n  ListSum V1 (ExcessAt g) +\n  (\\<Sum>\\<^bsub>f\\<in>F1\\<^esub> \\<d> |vertices f|) =\n  (\\<Sum>\\<^bsub>v\\<in>V1\\<^esub> \\<b> (tri g v) (quad g v))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ListSum V1 (ExcessAt g) +\n  (\\<Sum>\\<^bsub>f\\<in>F1\\<^esub> \\<d> |vertices f|) =\n  (\\<Sum>\\<^bsub>v\\<in>V1\\<^esub> \\<b> (tri g v) (quad g v))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Invariants.inv g; final g; tame g; admissible w g;\n     ListSum (faces g) w < squanderTarget\\<rbrakk>\n    \\<Longrightarrow> squanderLowerBound g \\<le> ListSum (faces g) w", "txt \\<open>($E_2$)  For all exceptional vertices of degree $5$\n  \\<open>excess\\<close> returns \\<open>a (tri g v)\\<close>.\\<close>"], ["proof (state)\nthis:\n  ListSum V1 (ExcessAt g) +\n  (\\<Sum>\\<^bsub>f\\<in>F1\\<^esub> \\<d> |vertices f|) =\n  (\\<Sum>\\<^bsub>v\\<in>V1\\<^esub> \\<b> (tri g v) (quad g v))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Invariants.inv g; final g; tame g; admissible w g;\n     ListSum (faces g) w < squanderTarget\\<rbrakk>\n    \\<Longrightarrow> squanderLowerBound g \\<le> ListSum (faces g) w", "also (trans1)"], ["proof (state)\nthis:\n  ListSum V1 (ExcessAt g) +\n  (\\<Sum>\\<^bsub>f\\<in>F1\\<^esub> \\<d> |vertices f|) =\n  (\\<Sum>\\<^bsub>v\\<in>V1\\<^esub> \\<b> (tri g v) (quad g v))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Invariants.inv g; final g; tame g; admissible w g;\n     ListSum (faces g) w < squanderTarget\\<rbrakk>\n    \\<Longrightarrow> squanderLowerBound g \\<le> ListSum (faces g) w", "from pl final V_subset"], ["proof (chain)\npicking this:\n  Invariants.inv g\n  final g\n  set V \\<subseteq> \\<V> g", "have\n    \"(\\<Sum>\\<^bsub>v \\<in> V3\\<^esub> ExcessAt g v) = (\\<Sum>\\<^bsub>v \\<in> V3\\<^esub> \\<a>)\""], ["proof (prove)\nusing this:\n  Invariants.inv g\n  final g\n  set V \\<subseteq> \\<V> g\n\ngoal (1 subgoal):\n 1. ListSum V3 (ExcessAt g) = (\\<Sum>\\<^bsub>v\\<in>V3\\<^esub> \\<a>)", "(*<*)"], ["proof (prove)\nusing this:\n  Invariants.inv g\n  final g\n  set V \\<subseteq> \\<V> g\n\ngoal (1 subgoal):\n 1. ListSum V3 (ExcessAt g) = (\\<Sum>\\<^bsub>v\\<in>V3\\<^esub> \\<a>)", "apply (rule_tac ListSum_eq)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>v.\n       \\<lbrakk>Invariants.inv g; final g; set V \\<subseteq> \\<V> g;\n        v \\<in> set V3\\<rbrakk>\n       \\<Longrightarrow> ExcessAt g v = \\<a>", "apply (simp add: V3_def V2_def excessAtType_def ExcessAt_def degree_eq vertextype_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>v.\n       \\<lbrakk>Invariants.inv g; final g; set V \\<subseteq> \\<V> g;\n        v \\<in> set V \\<and>\n        0 < except g v \\<and>\n        tri g v = 5 \\<and> quad g v = 0 \\<and> except g v = Suc 0\\<rbrakk>\n       \\<Longrightarrow> \\<not> finalVertex g v \\<longrightarrow> \\<a> = 0", "by(blast intro: finalVertexI)"], ["proof (state)\nthis:\n  ListSum V3 (ExcessAt g) = (\\<Sum>\\<^bsub>v\\<in>V3\\<^esub> \\<a>)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Invariants.inv g; final g; tame g; admissible w g;\n     ListSum (faces g) w < squanderTarget\\<rbrakk>\n    \\<Longrightarrow> squanderLowerBound g \\<le> ListSum (faces g) w", "(*     apply force by(blast intro: finalVertexI)*) (*>*) (* *)"], ["proof (state)\nthis:\n  ListSum V3 (ExcessAt g) = (\\<Sum>\\<^bsub>v\\<in>V3\\<^esub> \\<a>)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Invariants.inv g; final g; tame g; admissible w g;\n     ListSum (faces g) w < squanderTarget\\<rbrakk>\n    \\<Longrightarrow> squanderLowerBound g \\<le> ListSum (faces g) w", "txt \\<open>($E_3$) For all exceptional vertices of degree $\\neq 5$\n  \\<open>ExcessAt\\<close> returns 0.\\<close>"], ["proof (state)\nthis:\n  ListSum V3 (ExcessAt g) = (\\<Sum>\\<^bsub>v\\<in>V3\\<^esub> \\<a>)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Invariants.inv g; final g; tame g; admissible w g;\n     ListSum (faces g) w < squanderTarget\\<rbrakk>\n    \\<Longrightarrow> squanderLowerBound g \\<le> ListSum (faces g) w", "also"], ["proof (state)\nthis:\n  ListSum V3 (ExcessAt g) = (\\<Sum>\\<^bsub>v\\<in>V3\\<^esub> \\<a>)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Invariants.inv g; final g; tame g; admissible w g;\n     ListSum (faces g) w < squanderTarget\\<rbrakk>\n    \\<Longrightarrow> squanderLowerBound g \\<le> ListSum (faces g) w", "from pl final tame"], ["proof (chain)\npicking this:\n  Invariants.inv g\n  final g\n  tame g", "have \"(\\<Sum>\\<^bsub>v \\<in> V4\\<^esub> ExcessAt g v) = (\\<Sum>\\<^bsub>v \\<in> V4\\<^esub> 0)\""], ["proof (prove)\nusing this:\n  Invariants.inv g\n  final g\n  tame g\n\ngoal (1 subgoal):\n 1. ListSum V4 (ExcessAt g) = (\\<Sum>\\<^bsub>v\\<in>V4\\<^esub> 0)", "(*<*)"], ["proof (prove)\nusing this:\n  Invariants.inv g\n  final g\n  tame g\n\ngoal (1 subgoal):\n 1. ListSum V4 (ExcessAt g) = (\\<Sum>\\<^bsub>v\\<in>V4\\<^esub> 0)", "by (rule_tac ListSum_eq)\n       (auto simp: V2_def V4_def excessAtType_def ExcessAt_def degree_eq V_subset_simp tame_def tame12o_def)"], ["proof (state)\nthis:\n  ListSum V4 (ExcessAt g) = (\\<Sum>\\<^bsub>v\\<in>V4\\<^esub> 0)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Invariants.inv g; final g; tame g; admissible w g;\n     ListSum (faces g) w < squanderTarget\\<rbrakk>\n    \\<Longrightarrow> squanderLowerBound g \\<le> ListSum (faces g) w", "(*>*) (* *)"], ["proof (state)\nthis:\n  ListSum V4 (ExcessAt g) = (\\<Sum>\\<^bsub>v\\<in>V4\\<^esub> 0)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Invariants.inv g; final g; tame g; admissible w g;\n     ListSum (faces g) w < squanderTarget\\<rbrakk>\n    \\<Longrightarrow> squanderLowerBound g \\<le> ListSum (faces g) w", "also"], ["proof (state)\nthis:\n  ListSum V4 (ExcessAt g) = (\\<Sum>\\<^bsub>v\\<in>V4\\<^esub> 0)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Invariants.inv g; final g; tame g; admissible w g;\n     ListSum (faces g) w < squanderTarget\\<rbrakk>\n    \\<Longrightarrow> squanderLowerBound g \\<le> ListSum (faces g) w", "have \"\\<dots> = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^bsub>v\\<in>V4\\<^esub> 0) = 0", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^bsub>v\\<in>V4\\<^esub> 0) = 0", "by simp"], ["proof (state)\nthis:\n  (\\<Sum>\\<^bsub>v\\<in>V4\\<^esub> 0) = 0\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Invariants.inv g; final g; tame g; admissible w g;\n     ListSum (faces g) w < squanderTarget\\<rbrakk>\n    \\<Longrightarrow> squanderLowerBound g \\<le> ListSum (faces g) w", "(*>*) (* *)"], ["proof (state)\nthis:\n  (\\<Sum>\\<^bsub>v\\<in>V4\\<^esub> 0) = 0\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Invariants.inv g; final g; tame g; admissible w g;\n     ListSum (faces g) w < squanderTarget\\<rbrakk>\n    \\<Longrightarrow> squanderLowerBound g \\<le> ListSum (faces g) w", "txt \\<open>($A_1$) We use property \\<open>admissible\\<^sub>2\\<close>.\\<close>"], ["proof (state)\nthis:\n  (\\<Sum>\\<^bsub>v\\<in>V4\\<^esub> 0) = 0\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Invariants.inv g; final g; tame g; admissible w g;\n     ListSum (faces g) w < squanderTarget\\<rbrakk>\n    \\<Longrightarrow> squanderLowerBound g \\<le> ListSum (faces g) w", "also(trans6)"], ["proof (state)\nthis:\n  (\\<Sum>\\<^bsub>v\\<in>V4\\<^esub> 0) = 0\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Invariants.inv g; final g; tame g; admissible w g;\n     ListSum (faces g) w < squanderTarget\\<rbrakk>\n    \\<Longrightarrow> squanderLowerBound g \\<le> ListSum (faces g) w", "have\n  \"(\\<Sum>\\<^bsub>v \\<in> V1\\<^esub> \\<b> (tri g v) (quad g v)) \\<le> (\\<Sum>\\<^bsub>v \\<in> V1\\<^esub> \\<Sum>\\<^bsub>f \\<in> facesAt g v\\<^esub> w f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^bsub>v\\<in>V1\\<^esub> \\<b> (tri g v) (quad g v))\n    \\<le> (\\<Sum>\\<^bsub>v\\<in>V1\\<^esub> ListSum (facesAt g v) w)", "proof (rule_tac ListSum_le)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>v.\n       v \\<in> set V1 \\<Longrightarrow>\n       \\<b> (tri g v) (quad g v) \\<le> ListSum (facesAt g v) w", "fix v"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>v.\n       v \\<in> set V1 \\<Longrightarrow>\n       \\<b> (tri g v) (quad g v) \\<le> ListSum (facesAt g v) w", "assume \"v \\<in> set V1\""], ["proof (state)\nthis:\n  v \\<in> set V1\n\ngoal (1 subgoal):\n 1. \\<And>v.\n       v \\<in> set V1 \\<Longrightarrow>\n       \\<b> (tri g v) (quad g v) \\<le> ListSum (facesAt g v) w", "with V1_def V_subset"], ["proof (chain)\npicking this:\n  V1 = filter (\\<lambda>v. except g v = 0) V\n  set V \\<subseteq> \\<V> g\n  v \\<in> set V1", "have \"v \\<in> set (vertices g)\""], ["proof (prove)\nusing this:\n  V1 = filter (\\<lambda>v. except g v = 0) V\n  set V \\<subseteq> \\<V> g\n  v \\<in> set V1\n\ngoal (1 subgoal):\n 1. v \\<in> \\<V> g", "(*<*)"], ["proof (prove)\nusing this:\n  V1 = filter (\\<lambda>v. except g v = 0) V\n  set V \\<subseteq> \\<V> g\n  v \\<in> set V1\n\ngoal (1 subgoal):\n 1. v \\<in> \\<V> g", "by auto"], ["proof (state)\nthis:\n  v \\<in> \\<V> g\n\ngoal (1 subgoal):\n 1. \\<And>v.\n       v \\<in> set V1 \\<Longrightarrow>\n       \\<b> (tri g v) (quad g v) \\<le> ListSum (facesAt g v) w", "(*>*) (* *)"], ["proof (state)\nthis:\n  v \\<in> \\<V> g\n\ngoal (1 subgoal):\n 1. \\<And>v.\n       v \\<in> set V1 \\<Longrightarrow>\n       \\<b> (tri g v) (quad g v) \\<le> ListSum (facesAt g v) w", "with admissible"], ["proof (chain)\npicking this:\n  admissible w g\n  v \\<in> \\<V> g", "show \"\\<b> (tri g v) (quad g v) \\<le> (\\<Sum>\\<^bsub>f \\<in> facesAt g v\\<^esub> w f)\""], ["proof (prove)\nusing this:\n  admissible w g\n  v \\<in> \\<V> g\n\ngoal (1 subgoal):\n 1. \\<b> (tri g v) (quad g v) \\<le> ListSum (facesAt g v) w", "using \\<open>v \\<in> set V1\\<close>"], ["proof (prove)\nusing this:\n  admissible w g\n  v \\<in> \\<V> g\n  v \\<in> set V1\n\ngoal (1 subgoal):\n 1. \\<b> (tri g v) (quad g v) \\<le> ListSum (facesAt g v) w", "by (auto simp add:admissible_def admissible\\<^sub>2_def V1_def)"], ["proof (state)\nthis:\n  \\<b> (tri g v) (quad g v) \\<le> ListSum (facesAt g v) w\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<Sum>\\<^bsub>v\\<in>V1\\<^esub> \\<b> (tri g v) (quad g v))\n  \\<le> (\\<Sum>\\<^bsub>v\\<in>V1\\<^esub> ListSum (facesAt g v) w)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Invariants.inv g; final g; tame g; admissible w g;\n     ListSum (faces g) w < squanderTarget\\<rbrakk>\n    \\<Longrightarrow> squanderLowerBound g \\<le> ListSum (faces g) w", "also(trans2)"], ["proof (state)\nthis:\n  (\\<Sum>\\<^bsub>v\\<in>V1\\<^esub> \\<b> (tri g v) (quad g v))\n  \\<le> (\\<Sum>\\<^bsub>v\\<in>V1\\<^esub> ListSum (facesAt g v) w)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Invariants.inv g; final g; tame g; admissible w g;\n     ListSum (faces g) w < squanderTarget\\<rbrakk>\n    \\<Longrightarrow> squanderLowerBound g \\<le> ListSum (faces g) w", "from pSV1 V1_distinct V_subset"], ["proof (chain)\npicking this:\n  separated g (set V1)\n  distinct V1\n  set V \\<subseteq> \\<V> g", "have \"\\<dots> = (\\<Sum>\\<^bsub>f \\<in> F1\\<^esub> w f)\""], ["proof (prove)\nusing this:\n  separated g (set V1)\n  distinct V1\n  set V \\<subseteq> \\<V> g\n\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^bsub>v\\<in>V1\\<^esub> ListSum (facesAt g v) w) = ListSum F1 w", "apply (unfold F1_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>separated g (set V1); distinct V1;\n     set V \\<subseteq> \\<V> g\\<rbrakk>\n    \\<Longrightarrow> (\\<Sum>\\<^bsub>v\\<in>V1\\<^esub> ListSum (facesAt g v)\n                 w) =\n                      ListSum\n                       (filter\n                         (\\<lambda>f.\n                             \\<exists>v\\<in>set V1.\n                                f \\<in> set (facesAt g v))\n                         (faces g))\n                       w", "apply (rule ScoreProps.separated_disj_Union2)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<lbrakk>separated g (set V1); distinct V1;\n     set V \\<subseteq> \\<V> g\\<rbrakk>\n    \\<Longrightarrow> Invariants.inv g\n 2. \\<lbrakk>separated g (set V1); distinct V1;\n     set V \\<subseteq> \\<V> g\\<rbrakk>\n    \\<Longrightarrow> final g\n 3. \\<lbrakk>separated g (set V1); distinct V1;\n     set V \\<subseteq> \\<V> g\\<rbrakk>\n    \\<Longrightarrow> noExceptionals g (set V1)\n 4. \\<lbrakk>separated g (set V1); distinct V1;\n     set V \\<subseteq> \\<V> g\\<rbrakk>\n    \\<Longrightarrow> separated g (set V1)\n 5. \\<lbrakk>separated g (set V1); distinct V1;\n     set V \\<subseteq> \\<V> g\\<rbrakk>\n    \\<Longrightarrow> distinct V1\n 6. \\<lbrakk>separated g (set V1); distinct V1;\n     set V \\<subseteq> \\<V> g\\<rbrakk>\n    \\<Longrightarrow> set V1 \\<subseteq> \\<V> g", "apply (rule pl)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>separated g (set V1); distinct V1;\n     set V \\<subseteq> \\<V> g\\<rbrakk>\n    \\<Longrightarrow> final g\n 2. \\<lbrakk>separated g (set V1); distinct V1;\n     set V \\<subseteq> \\<V> g\\<rbrakk>\n    \\<Longrightarrow> noExceptionals g (set V1)\n 3. \\<lbrakk>separated g (set V1); distinct V1;\n     set V \\<subseteq> \\<V> g\\<rbrakk>\n    \\<Longrightarrow> separated g (set V1)\n 4. \\<lbrakk>separated g (set V1); distinct V1;\n     set V \\<subseteq> \\<V> g\\<rbrakk>\n    \\<Longrightarrow> distinct V1\n 5. \\<lbrakk>separated g (set V1); distinct V1;\n     set V \\<subseteq> \\<V> g\\<rbrakk>\n    \\<Longrightarrow> set V1 \\<subseteq> \\<V> g", "apply (rule final)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>separated g (set V1); distinct V1;\n     set V \\<subseteq> \\<V> g\\<rbrakk>\n    \\<Longrightarrow> noExceptionals g (set V1)\n 2. \\<lbrakk>separated g (set V1); distinct V1;\n     set V \\<subseteq> \\<V> g\\<rbrakk>\n    \\<Longrightarrow> separated g (set V1)\n 3. \\<lbrakk>separated g (set V1); distinct V1;\n     set V \\<subseteq> \\<V> g\\<rbrakk>\n    \\<Longrightarrow> distinct V1\n 4. \\<lbrakk>separated g (set V1); distinct V1;\n     set V \\<subseteq> \\<V> g\\<rbrakk>\n    \\<Longrightarrow> set V1 \\<subseteq> \\<V> g", "apply (rule noExV1)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>separated g (set V1); distinct V1;\n     set V \\<subseteq> \\<V> g\\<rbrakk>\n    \\<Longrightarrow> separated g (set V1)\n 2. \\<lbrakk>separated g (set V1); distinct V1;\n     set V \\<subseteq> \\<V> g\\<rbrakk>\n    \\<Longrightarrow> distinct V1\n 3. \\<lbrakk>separated g (set V1); distinct V1;\n     set V \\<subseteq> \\<V> g\\<rbrakk>\n    \\<Longrightarrow> set V1 \\<subseteq> \\<V> g", "apply (rule pSV1)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>separated g (set V1); distinct V1;\n     set V \\<subseteq> \\<V> g\\<rbrakk>\n    \\<Longrightarrow> distinct V1\n 2. \\<lbrakk>separated g (set V1); distinct V1;\n     set V \\<subseteq> \\<V> g\\<rbrakk>\n    \\<Longrightarrow> set V1 \\<subseteq> \\<V> g", "apply (rule V1_distinct)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>separated g (set V1); distinct V1;\n     set V \\<subseteq> \\<V> g\\<rbrakk>\n    \\<Longrightarrow> set V1 \\<subseteq> \\<V> g", "apply (unfold V1_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>separated g (set (filter (\\<lambda>v. except g v = 0) V));\n     distinct (filter (\\<lambda>v. except g v = 0) V);\n     set V \\<subseteq> \\<V> g\\<rbrakk>\n    \\<Longrightarrow> set (filter (\\<lambda>v. except g v = 0) V)\n                      \\<subseteq> \\<V> g", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  (\\<Sum>\\<^bsub>v\\<in>V1\\<^esub> ListSum (facesAt g v) w) = ListSum F1 w\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Invariants.inv g; final g; tame g; admissible w g;\n     ListSum (faces g) w < squanderTarget\\<rbrakk>\n    \\<Longrightarrow> squanderLowerBound g \\<le> ListSum (faces g) w", "txt \\<open>($A_2$) We use property \\<open>admissible\\<^sub>4\\<close>.\\<close>"], ["proof (state)\nthis:\n  (\\<Sum>\\<^bsub>v\\<in>V1\\<^esub> ListSum (facesAt g v) w) = ListSum F1 w\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Invariants.inv g; final g; tame g; admissible w g;\n     ListSum (faces g) w < squanderTarget\\<rbrakk>\n    \\<Longrightarrow> squanderLowerBound g \\<le> ListSum (faces g) w", "also"], ["proof (state)\nthis:\n  (\\<Sum>\\<^bsub>v\\<in>V1\\<^esub> ListSum (facesAt g v) w) = ListSum F1 w\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Invariants.inv g; final g; tame g; admissible w g;\n     ListSum (faces g) w < squanderTarget\\<rbrakk>\n    \\<Longrightarrow> squanderLowerBound g \\<le> ListSum (faces g) w", "have \"(\\<Sum>\\<^bsub>v\\<in>V3\\<^esub> \\<a>) + (\\<Sum>\\<^bsub>f\\<in>F3\\<^esub> \\<d> |vertices f| ) \\<le> (\\<Sum>\\<^bsub>f \\<in> F3 \\<^esub>w f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^bsub>v\\<in>V3\\<^esub> \\<a>) +\n    (\\<Sum>\\<^bsub>f\\<in>F3\\<^esub> \\<d> |vertices f|)\n    \\<le> ListSum F3 w", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^bsub>v\\<in>V3\\<^esub> \\<a>) +\n    (\\<Sum>\\<^bsub>f\\<in>F3\\<^esub> \\<d> |vertices f|)\n    \\<le> ListSum F3 w", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^bsub>v\\<in>V3\\<^esub> \\<a>) +\n    (\\<Sum>\\<^bsub>f\\<in>F3\\<^esub> \\<d> |vertices f|)\n    \\<le> ListSum F3 w", "define T where \"T = [f\\<leftarrow>F3. triangle f]\""], ["proof (state)\nthis:\n  T = filter triangle F3\n\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^bsub>v\\<in>V3\\<^esub> \\<a>) +\n    (\\<Sum>\\<^bsub>f\\<in>F3\\<^esub> \\<d> |vertices f|)\n    \\<le> ListSum F3 w", "define E where \"E = [f\\<leftarrow>F3. \\<not> triangle f]\""], ["proof (state)\nthis:\n  E = filter (\\<lambda>f. |vertices f| \\<noteq> 3) F3\n\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^bsub>v\\<in>V3\\<^esub> \\<a>) +\n    (\\<Sum>\\<^bsub>f\\<in>F3\\<^esub> \\<d> |vertices f|)\n    \\<le> ListSum F3 w", "have \"(\\<Sum>\\<^bsub>f\\<in>F3\\<^esub> \\<d> |vertices f| ) =\n      (\\<Sum>\\<^bsub>f\\<in>T\\<^esub> \\<d> |vertices f| ) + (\\<Sum>\\<^bsub>f\\<in>E\\<^esub> \\<d> |vertices f| )\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^bsub>f\\<in>F3\\<^esub> \\<d> |vertices f|) =\n    (\\<Sum>\\<^bsub>f\\<in>T\\<^esub> \\<d> |vertices f|) +\n    (\\<Sum>\\<^bsub>f\\<in>E\\<^esub> \\<d> |vertices f|)", "by(simp only: T_def E_def ListSum_compl2)"], ["proof (state)\nthis:\n  (\\<Sum>\\<^bsub>f\\<in>F3\\<^esub> \\<d> |vertices f|) =\n  (\\<Sum>\\<^bsub>f\\<in>T\\<^esub> \\<d> |vertices f|) +\n  (\\<Sum>\\<^bsub>f\\<in>E\\<^esub> \\<d> |vertices f|)\n\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^bsub>v\\<in>V3\\<^esub> \\<a>) +\n    (\\<Sum>\\<^bsub>f\\<in>F3\\<^esub> \\<d> |vertices f|)\n    \\<le> ListSum F3 w", "also"], ["proof (state)\nthis:\n  (\\<Sum>\\<^bsub>f\\<in>F3\\<^esub> \\<d> |vertices f|) =\n  (\\<Sum>\\<^bsub>f\\<in>T\\<^esub> \\<d> |vertices f|) +\n  (\\<Sum>\\<^bsub>f\\<in>E\\<^esub> \\<d> |vertices f|)\n\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^bsub>v\\<in>V3\\<^esub> \\<a>) +\n    (\\<Sum>\\<^bsub>f\\<in>F3\\<^esub> \\<d> |vertices f|)\n    \\<le> ListSum F3 w", "have \"(\\<Sum>\\<^bsub>f\\<in>T\\<^esub> \\<d> |vertices f| ) =\n          (\\<Sum>\\<^bsub>f \\<in> [f\\<leftarrow>faces g . \\<exists>v \\<in> set V3. f \\<in> set (facesAt g v) \\<inter> Collect triangle]\\<^esub> \\<d> |vertices f| )\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^bsub>f\\<in>T\\<^esub> \\<d> |vertices f|) =\n    (\\<Sum>\\<^bsub>f\\<in>filter\n                          (\\<lambda>f.\n                              \\<exists>v\\<in>set V3.\n                                 f \\<in> set (facesAt g v) \\<inter>\n   {f. triangle f})\n                          (faces g)\\<^esub> \\<d> |vertices f|)", "by(rule listsum_cong[OF _ HOL.refl])\n        (simp add:T_def F3 Int_def)"], ["proof (state)\nthis:\n  (\\<Sum>\\<^bsub>f\\<in>T\\<^esub> \\<d> |vertices f|) =\n  (\\<Sum>\\<^bsub>f\\<in>filter\n                        (\\<lambda>f.\n                            \\<exists>v\\<in>set V3.\n                               f \\<in> set (facesAt g v) \\<inter>\n {f. triangle f})\n                        (faces g)\\<^esub> \\<d> |vertices f|)\n\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^bsub>v\\<in>V3\\<^esub> \\<a>) +\n    (\\<Sum>\\<^bsub>f\\<in>F3\\<^esub> \\<d> |vertices f|)\n    \\<le> ListSum F3 w", "also"], ["proof (state)\nthis:\n  (\\<Sum>\\<^bsub>f\\<in>T\\<^esub> \\<d> |vertices f|) =\n  (\\<Sum>\\<^bsub>f\\<in>filter\n                        (\\<lambda>f.\n                            \\<exists>v\\<in>set V3.\n                               f \\<in> set (facesAt g v) \\<inter>\n {f. triangle f})\n                        (faces g)\\<^esub> \\<d> |vertices f|)\n\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^bsub>v\\<in>V3\\<^esub> \\<a>) +\n    (\\<Sum>\\<^bsub>f\\<in>F3\\<^esub> \\<d> |vertices f|)\n    \\<le> ListSum F3 w", "have \"\\<dots> = (\\<Sum>\\<^bsub>v \\<in> V3\\<^esub> \\<Sum>\\<^bsub>f \\<in> filter triangle (facesAt g v)\\<^esub> \\<d> |vertices f| )\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^bsub>f\\<in>filter\n                          (\\<lambda>f.\n                              \\<exists>v\\<in>set V3.\n                                 f \\<in> set (facesAt g v) \\<inter>\n   {f. triangle f})\n                          (faces g)\\<^esub> \\<d> |vertices f|) =\n    (\\<Sum>\\<^bsub>v\\<in>V3\\<^esub> \\<Sum>\\<^bsub>f\\<in>filter triangle\n                   (facesAt g v)\\<^esub> \\<d> |vertices f|)", "by(rule ListSum_V_F_eq_ListSum_F[symmetric, OF \\<open>inv g\\<close> V3 \\<open>distinct V3\\<close> \\<open>set V3 \\<subseteq> \\<V> g\\<close>])\n        (simp add:Ball_def)"], ["proof (state)\nthis:\n  (\\<Sum>\\<^bsub>f\\<in>filter\n                        (\\<lambda>f.\n                            \\<exists>v\\<in>set V3.\n                               f \\<in> set (facesAt g v) \\<inter>\n {f. triangle f})\n                        (faces g)\\<^esub> \\<d> |vertices f|) =\n  (\\<Sum>\\<^bsub>v\\<in>V3\\<^esub> \\<Sum>\\<^bsub>f\\<in>filter triangle\n                 (facesAt g v)\\<^esub> \\<d> |vertices f|)\n\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^bsub>v\\<in>V3\\<^esub> \\<a>) +\n    (\\<Sum>\\<^bsub>f\\<in>F3\\<^esub> \\<d> |vertices f|)\n    \\<le> ListSum F3 w", "also"], ["proof (state)\nthis:\n  (\\<Sum>\\<^bsub>f\\<in>filter\n                        (\\<lambda>f.\n                            \\<exists>v\\<in>set V3.\n                               f \\<in> set (facesAt g v) \\<inter>\n {f. triangle f})\n                        (faces g)\\<^esub> \\<d> |vertices f|) =\n  (\\<Sum>\\<^bsub>v\\<in>V3\\<^esub> \\<Sum>\\<^bsub>f\\<in>filter triangle\n                 (facesAt g v)\\<^esub> \\<d> |vertices f|)\n\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^bsub>v\\<in>V3\\<^esub> \\<a>) +\n    (\\<Sum>\\<^bsub>f\\<in>F3\\<^esub> \\<d> |vertices f|)\n    \\<le> ListSum F3 w", "have \"\\<dots> = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^bsub>v\\<in>V3\\<^esub> \\<Sum>\\<^bsub>f\\<in>filter triangle\n                   (facesAt g v)\\<^esub> \\<d> |vertices f|) =\n    0", "by (simp add: squanderFace_def)"], ["proof (state)\nthis:\n  (\\<Sum>\\<^bsub>v\\<in>V3\\<^esub> \\<Sum>\\<^bsub>f\\<in>filter triangle\n                 (facesAt g v)\\<^esub> \\<d> |vertices f|) =\n  0\n\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^bsub>v\\<in>V3\\<^esub> \\<a>) +\n    (\\<Sum>\\<^bsub>f\\<in>F3\\<^esub> \\<d> |vertices f|)\n    \\<le> ListSum F3 w", "finally"], ["proof (chain)\npicking this:\n  (\\<Sum>\\<^bsub>f\\<in>F3\\<^esub> \\<d> |vertices f|) =\n  0 + (\\<Sum>\\<^bsub>f\\<in>E\\<^esub> \\<d> |vertices f|)", "have \"(\\<Sum>\\<^bsub>v\\<in>V3\\<^esub> \\<a>) + (\\<Sum>\\<^bsub>f\\<in>F3\\<^esub> \\<d> |vertices f| ) =\n      (\\<Sum>\\<^bsub>v\\<in>V3\\<^esub> \\<a>) + (\\<Sum>\\<^bsub>f\\<in>E\\<^esub> \\<d> |vertices f| )\""], ["proof (prove)\nusing this:\n  (\\<Sum>\\<^bsub>f\\<in>F3\\<^esub> \\<d> |vertices f|) =\n  0 + (\\<Sum>\\<^bsub>f\\<in>E\\<^esub> \\<d> |vertices f|)\n\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^bsub>v\\<in>V3\\<^esub> \\<a>) +\n    (\\<Sum>\\<^bsub>f\\<in>F3\\<^esub> \\<d> |vertices f|) =\n    (\\<Sum>\\<^bsub>v\\<in>V3\\<^esub> \\<a>) +\n    (\\<Sum>\\<^bsub>f\\<in>E\\<^esub> \\<d> |vertices f|)", "by simp"], ["proof (state)\nthis:\n  (\\<Sum>\\<^bsub>v\\<in>V3\\<^esub> \\<a>) +\n  (\\<Sum>\\<^bsub>f\\<in>F3\\<^esub> \\<d> |vertices f|) =\n  (\\<Sum>\\<^bsub>v\\<in>V3\\<^esub> \\<a>) +\n  (\\<Sum>\\<^bsub>f\\<in>E\\<^esub> \\<d> |vertices f|)\n\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^bsub>v\\<in>V3\\<^esub> \\<a>) +\n    (\\<Sum>\\<^bsub>f\\<in>F3\\<^esub> \\<d> |vertices f|)\n    \\<le> ListSum F3 w", "also"], ["proof (state)\nthis:\n  (\\<Sum>\\<^bsub>v\\<in>V3\\<^esub> \\<a>) +\n  (\\<Sum>\\<^bsub>f\\<in>F3\\<^esub> \\<d> |vertices f|) =\n  (\\<Sum>\\<^bsub>v\\<in>V3\\<^esub> \\<a>) +\n  (\\<Sum>\\<^bsub>f\\<in>E\\<^esub> \\<d> |vertices f|)\n\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^bsub>v\\<in>V3\\<^esub> \\<a>) +\n    (\\<Sum>\\<^bsub>f\\<in>F3\\<^esub> \\<d> |vertices f|)\n    \\<le> ListSum F3 w", "have \"(\\<Sum>\\<^bsub>f\\<in>E\\<^esub> \\<d> |vertices f| ) \\<le> (\\<Sum>\\<^bsub>f\\<in>E\\<^esub> w f )\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^bsub>f\\<in>E\\<^esub> \\<d> |vertices f|) \\<le> ListSum E w", "using \\<open>admissible w g\\<close>"], ["proof (prove)\nusing this:\n  admissible w g\n\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^bsub>f\\<in>E\\<^esub> \\<d> |vertices f|) \\<le> ListSum E w", "by(rule_tac ListSum_le)\n        (simp add: admissible_def admissible\\<^sub>1_def E_def F3_def F2_def)"], ["proof (state)\nthis:\n  (\\<Sum>\\<^bsub>f\\<in>E\\<^esub> \\<d> |vertices f|) \\<le> ListSum E w\n\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^bsub>v\\<in>V3\\<^esub> \\<a>) +\n    (\\<Sum>\\<^bsub>f\\<in>F3\\<^esub> \\<d> |vertices f|)\n    \\<le> ListSum F3 w", "also"], ["proof (state)\nthis:\n  (\\<Sum>\\<^bsub>f\\<in>E\\<^esub> \\<d> |vertices f|) \\<le> ListSum E w\n\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^bsub>v\\<in>V3\\<^esub> \\<a>) +\n    (\\<Sum>\\<^bsub>f\\<in>F3\\<^esub> \\<d> |vertices f|)\n    \\<le> ListSum F3 w", "have \"(\\<Sum>\\<^bsub>v\\<in>V3\\<^esub> \\<a>) \\<le> (\\<Sum>\\<^bsub>v\\<in>V3\\<^esub> \\<Sum>\\<^bsub>f\\<in>filter triangle (facesAt g v)\\<^esub> w(f))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^bsub>v\\<in>V3\\<^esub> \\<a>)\n    \\<le> (\\<Sum>\\<^bsub>v\\<in>V3\\<^esub> ListSum\n     (filter triangle (facesAt g v)) w)", "using \\<open>admissible w g\\<close>"], ["proof (prove)\nusing this:\n  admissible w g\n\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^bsub>v\\<in>V3\\<^esub> \\<a>)\n    \\<le> (\\<Sum>\\<^bsub>v\\<in>V3\\<^esub> ListSum\n     (filter triangle (facesAt g v)) w)", "by(rule_tac ListSum_le)\n        (simp add: admissible_def admissible\\<^sub>3_def V3_def V2_def V_subset_simp)"], ["proof (state)\nthis:\n  (\\<Sum>\\<^bsub>v\\<in>V3\\<^esub> \\<a>)\n  \\<le> (\\<Sum>\\<^bsub>v\\<in>V3\\<^esub> ListSum\n   (filter triangle (facesAt g v)) w)\n\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^bsub>v\\<in>V3\\<^esub> \\<a>) +\n    (\\<Sum>\\<^bsub>f\\<in>F3\\<^esub> \\<d> |vertices f|)\n    \\<le> ListSum F3 w", "also"], ["proof (state)\nthis:\n  (\\<Sum>\\<^bsub>v\\<in>V3\\<^esub> \\<a>)\n  \\<le> (\\<Sum>\\<^bsub>v\\<in>V3\\<^esub> ListSum\n   (filter triangle (facesAt g v)) w)\n\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^bsub>v\\<in>V3\\<^esub> \\<a>) +\n    (\\<Sum>\\<^bsub>f\\<in>F3\\<^esub> \\<d> |vertices f|)\n    \\<le> ListSum F3 w", "have \"\\<dots> = (\\<Sum>\\<^bsub>f \\<in> [f\\<leftarrow>faces g . \\<exists>v \\<in> set V3. f \\<in> set (facesAt g v) \\<inter> Collect triangle]\\<^esub> w f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^bsub>v\\<in>V3\\<^esub> ListSum (filter triangle (facesAt g v))\n                                     w) =\n    ListSum\n     (filter\n       (\\<lambda>f.\n           \\<exists>v\\<in>set V3.\n              f \\<in> set (facesAt g v) \\<inter> {f. triangle f})\n       (faces g))\n     w", "by(rule ListSum_V_F_eq_ListSum_F[OF \\<open>inv g\\<close> V3 \\<open>distinct V3\\<close> \\<open>set V3 \\<subseteq> \\<V> g\\<close>])\n        (simp add:Ball_def)"], ["proof (state)\nthis:\n  (\\<Sum>\\<^bsub>v\\<in>V3\\<^esub> ListSum (filter triangle (facesAt g v))\n                                   w) =\n  ListSum\n   (filter\n     (\\<lambda>f.\n         \\<exists>v\\<in>set V3.\n            f \\<in> set (facesAt g v) \\<inter> {f. triangle f})\n     (faces g))\n   w\n\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^bsub>v\\<in>V3\\<^esub> \\<a>) +\n    (\\<Sum>\\<^bsub>f\\<in>F3\\<^esub> \\<d> |vertices f|)\n    \\<le> ListSum F3 w", "also"], ["proof (state)\nthis:\n  (\\<Sum>\\<^bsub>v\\<in>V3\\<^esub> ListSum (filter triangle (facesAt g v))\n                                   w) =\n  ListSum\n   (filter\n     (\\<lambda>f.\n         \\<exists>v\\<in>set V3.\n            f \\<in> set (facesAt g v) \\<inter> {f. triangle f})\n     (faces g))\n   w\n\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^bsub>v\\<in>V3\\<^esub> \\<a>) +\n    (\\<Sum>\\<^bsub>f\\<in>F3\\<^esub> \\<d> |vertices f|)\n    \\<le> ListSum F3 w", "have \"\\<dots> = (\\<Sum>\\<^bsub>f\\<in>T\\<^esub> w f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ListSum\n     (filter\n       (\\<lambda>f.\n           \\<exists>v\\<in>set V3.\n              f \\<in> set (facesAt g v) \\<inter> {f. triangle f})\n       (faces g))\n     w =\n    ListSum T w", "by(simp add: T_def F3 Int_def)"], ["proof (state)\nthis:\n  ListSum\n   (filter\n     (\\<lambda>f.\n         \\<exists>v\\<in>set V3.\n            f \\<in> set (facesAt g v) \\<inter> {f. triangle f})\n     (faces g))\n   w =\n  ListSum T w\n\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^bsub>v\\<in>V3\\<^esub> \\<a>) +\n    (\\<Sum>\\<^bsub>f\\<in>F3\\<^esub> \\<d> |vertices f|)\n    \\<le> ListSum F3 w", "also"], ["proof (state)\nthis:\n  ListSum\n   (filter\n     (\\<lambda>f.\n         \\<exists>v\\<in>set V3.\n            f \\<in> set (facesAt g v) \\<inter> {f. triangle f})\n     (faces g))\n   w =\n  ListSum T w\n\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^bsub>v\\<in>V3\\<^esub> \\<a>) +\n    (\\<Sum>\\<^bsub>f\\<in>F3\\<^esub> \\<d> |vertices f|)\n    \\<le> ListSum F3 w", "have \"ListSum T w + ListSum E w = ListSum F3 w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ListSum T w + ListSum E w = ListSum F3 w", "by(simp add: T_def E_def ListSum_compl2)"], ["proof (state)\nthis:\n  ListSum T w + ListSum E w = ListSum F3 w\n\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^bsub>v\\<in>V3\\<^esub> \\<a>) +\n    (\\<Sum>\\<^bsub>f\\<in>F3\\<^esub> \\<d> |vertices f|)\n    \\<le> ListSum F3 w", "finally"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<And>x y.\n              x \\<le> y \\<Longrightarrow>\n              (\\<Sum>\\<^bsub>v\\<in>V3\\<^esub> \\<a>) + x\n              \\<le> (\\<Sum>\\<^bsub>v\\<in>V3\\<^esub> \\<a>) + y;\n   \\<And>x y.\n      x \\<le> y \\<Longrightarrow>\n      x + ListSum E w \\<le> y + ListSum E w\\<rbrakk>\n  \\<Longrightarrow> (\\<Sum>\\<^bsub>v\\<in>V3\\<^esub> \\<a>) +\n                    (\\<Sum>\\<^bsub>f\\<in>F3\\<^esub> \\<d> |vertices f|)\n                    \\<le> ListSum F3 w", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>x y.\n              x \\<le> y \\<Longrightarrow>\n              (\\<Sum>\\<^bsub>v\\<in>V3\\<^esub> \\<a>) + x\n              \\<le> (\\<Sum>\\<^bsub>v\\<in>V3\\<^esub> \\<a>) + y;\n   \\<And>x y.\n      x \\<le> y \\<Longrightarrow>\n      x + ListSum E w \\<le> y + ListSum E w\\<rbrakk>\n  \\<Longrightarrow> (\\<Sum>\\<^bsub>v\\<in>V3\\<^esub> \\<a>) +\n                    (\\<Sum>\\<^bsub>f\\<in>F3\\<^esub> \\<d> |vertices f|)\n                    \\<le> ListSum F3 w\n\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^bsub>v\\<in>V3\\<^esub> \\<a>) +\n    (\\<Sum>\\<^bsub>f\\<in>F3\\<^esub> \\<d> |vertices f|)\n    \\<le> ListSum F3 w", "by simp"], ["proof (state)\nthis:\n  (\\<Sum>\\<^bsub>v\\<in>V3\\<^esub> \\<a>) +\n  (\\<Sum>\\<^bsub>f\\<in>F3\\<^esub> \\<d> |vertices f|)\n  \\<le> ListSum F3 w\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<Sum>\\<^bsub>v\\<in>V3\\<^esub> \\<a>) +\n  (\\<Sum>\\<^bsub>f\\<in>F3\\<^esub> \\<d> |vertices f|)\n  \\<le> ListSum F3 w\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Invariants.inv g; final g; tame g; admissible w g;\n     ListSum (faces g) w < squanderTarget\\<rbrakk>\n    \\<Longrightarrow> squanderLowerBound g \\<le> ListSum (faces g) w", "text_raw \\<open>\\newpage\\<close>"], ["proof (state)\nthis:\n  (\\<Sum>\\<^bsub>v\\<in>V3\\<^esub> \\<a>) +\n  (\\<Sum>\\<^bsub>f\\<in>F3\\<^esub> \\<d> |vertices f|)\n  \\<le> ListSum F3 w\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Invariants.inv g; final g; tame g; admissible w g;\n     ListSum (faces g) w < squanderTarget\\<rbrakk>\n    \\<Longrightarrow> squanderLowerBound g \\<le> ListSum (faces g) w", "txt \\<open>($A_3$) We use property \\<open>admissible\\<^sub>1\\<close>.\\<close>"], ["proof (state)\nthis:\n  (\\<Sum>\\<^bsub>v\\<in>V3\\<^esub> \\<a>) +\n  (\\<Sum>\\<^bsub>f\\<in>F3\\<^esub> \\<d> |vertices f|)\n  \\<le> ListSum F3 w\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Invariants.inv g; final g; tame g; admissible w g;\n     ListSum (faces g) w < squanderTarget\\<rbrakk>\n    \\<Longrightarrow> squanderLowerBound g \\<le> ListSum (faces g) w", "also(trans3)"], ["proof (state)\nthis:\n  (\\<Sum>\\<^bsub>v\\<in>V3\\<^esub> \\<a>) +\n  (\\<Sum>\\<^bsub>f\\<in>F3\\<^esub> \\<d> |vertices f|)\n  \\<le> ListSum F3 w\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Invariants.inv g; final g; tame g; admissible w g;\n     ListSum (faces g) w < squanderTarget\\<rbrakk>\n    \\<Longrightarrow> squanderLowerBound g \\<le> ListSum (faces g) w", "have \"(\\<Sum>\\<^bsub> f \\<in> F4\\<^esub> \\<d> |vertices f| ) \\<le> (\\<Sum>\\<^bsub>f \\<in> F4\\<^esub> w f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^bsub>f\\<in>F4\\<^esub> \\<d> |vertices f|) \\<le> ListSum F4 w", "proof (rule ListSum_le)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f. f \\<in> set F4 \\<Longrightarrow> \\<d> |vertices f| \\<le> w f", "fix f"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f. f \\<in> set F4 \\<Longrightarrow> \\<d> |vertices f| \\<le> w f", "assume \"f \\<in> set F4\""], ["proof (state)\nthis:\n  f \\<in> set F4\n\ngoal (1 subgoal):\n 1. \\<And>f. f \\<in> set F4 \\<Longrightarrow> \\<d> |vertices f| \\<le> w f", "then"], ["proof (chain)\npicking this:\n  f \\<in> set F4", "have f: \"f \\<in> set (faces g)\""], ["proof (prove)\nusing this:\n  f \\<in> set F4\n\ngoal (1 subgoal):\n 1. f \\<in> \\<F> g", "(*<*)"], ["proof (prove)\nusing this:\n  f \\<in> set F4\n\ngoal (1 subgoal):\n 1. f \\<in> \\<F> g", "by (simp add: F4_def F2_def)"], ["proof (state)\nthis:\n  f \\<in> \\<F> g\n\ngoal (1 subgoal):\n 1. \\<And>f. f \\<in> set F4 \\<Longrightarrow> \\<d> |vertices f| \\<le> w f", "(*>*) (* *)"], ["proof (state)\nthis:\n  f \\<in> \\<F> g\n\ngoal (1 subgoal):\n 1. \\<And>f. f \\<in> set F4 \\<Longrightarrow> \\<d> |vertices f| \\<le> w f", "with admissible\\<^sub>1 f"], ["proof (chain)\npicking this:\n  ?f \\<in> \\<F> g \\<Longrightarrow> \\<d> |vertices ?f| \\<le> w ?f\n  f \\<in> \\<F> g\n  f \\<in> \\<F> g", "show \"\\<d> |vertices f| \\<le> w f\""], ["proof (prove)\nusing this:\n  ?f \\<in> \\<F> g \\<Longrightarrow> \\<d> |vertices ?f| \\<le> w ?f\n  f \\<in> \\<F> g\n  f \\<in> \\<F> g\n\ngoal (1 subgoal):\n 1. \\<d> |vertices f| \\<le> w f", "by (simp)"], ["proof (state)\nthis:\n  \\<d> |vertices f| \\<le> w f\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<Sum>\\<^bsub>f\\<in>F4\\<^esub> \\<d> |vertices f|) \\<le> ListSum F4 w\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Invariants.inv g; final g; tame g; admissible w g;\n     ListSum (faces g) w < squanderTarget\\<rbrakk>\n    \\<Longrightarrow> squanderLowerBound g \\<le> ListSum (faces g) w", "txt \\<open>We reunite $F3$ and $F4$.\\<close>"], ["proof (state)\nthis:\n  (\\<Sum>\\<^bsub>f\\<in>F4\\<^esub> \\<d> |vertices f|) \\<le> ListSum F4 w\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Invariants.inv g; final g; tame g; admissible w g;\n     ListSum (faces g) w < squanderTarget\\<rbrakk>\n    \\<Longrightarrow> squanderLowerBound g \\<le> ListSum (faces g) w", "also(trans4)"], ["proof (state)\nthis:\n  (\\<Sum>\\<^bsub>f\\<in>F4\\<^esub> \\<d> |vertices f|) \\<le> ListSum F4 w\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Invariants.inv g; final g; tame g; admissible w g;\n     ListSum (faces g) w < squanderTarget\\<rbrakk>\n    \\<Longrightarrow> squanderLowerBound g \\<le> ListSum (faces g) w", "have \"(\\<Sum>\\<^bsub> f \\<in> F3\\<^esub> w f) + (\\<Sum>\\<^bsub> f \\<in> F4\\<^esub> w f) = (\\<Sum>\\<^bsub> f \\<in> F2\\<^esub> w f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ListSum F3 w + ListSum F4 w = ListSum F2 w", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. ListSum F3 w + ListSum F4 w = ListSum F2 w", "by (simp only: F3_def F4_def ListSum_compl)"], ["proof (state)\nthis:\n  ListSum F3 w + ListSum F4 w = ListSum F2 w\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Invariants.inv g; final g; tame g; admissible w g;\n     ListSum (faces g) w < squanderTarget\\<rbrakk>\n    \\<Longrightarrow> squanderLowerBound g \\<le> ListSum (faces g) w", "(*>*) (* *)"], ["proof (state)\nthis:\n  ListSum F3 w + ListSum F4 w = ListSum F2 w\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Invariants.inv g; final g; tame g; admissible w g;\n     ListSum (faces g) w < squanderTarget\\<rbrakk>\n    \\<Longrightarrow> squanderLowerBound g \\<le> ListSum (faces g) w", "txt \\<open>We reunite $F1$ and $F2$.\\<close>"], ["proof (state)\nthis:\n  ListSum F3 w + ListSum F4 w = ListSum F2 w\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Invariants.inv g; final g; tame g; admissible w g;\n     ListSum (faces g) w < squanderTarget\\<rbrakk>\n    \\<Longrightarrow> squanderLowerBound g \\<le> ListSum (faces g) w", "also(trans5)"], ["proof (state)\nthis:\n  ListSum F3 w + ListSum F4 w = ListSum F2 w\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Invariants.inv g; final g; tame g; admissible w g;\n     ListSum (faces g) w < squanderTarget\\<rbrakk>\n    \\<Longrightarrow> squanderLowerBound g \\<le> ListSum (faces g) w", "have \"(\\<Sum>\\<^bsub> f \\<in> F1\\<^esub> w f) + (\\<Sum>\\<^bsub> f \\<in> F2\\<^esub> w f) = (\\<Sum>\\<^bsub>f \\<in> faces g\\<^esub> w f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ListSum F1 w + ListSum F2 w = ListSum (faces g) w", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. ListSum F1 w + ListSum F2 w = ListSum (faces g) w", "by (simp only: F1_def F2_def ListSum_compl)"], ["proof (state)\nthis:\n  ListSum F1 w + ListSum F2 w = ListSum (faces g) w\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Invariants.inv g; final g; tame g; admissible w g;\n     ListSum (faces g) w < squanderTarget\\<rbrakk>\n    \\<Longrightarrow> squanderLowerBound g \\<le> ListSum (faces g) w", "(*>*) (* *)"], ["proof (state)\nthis:\n  ListSum F1 w + ListSum F2 w = ListSum (faces g) w\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Invariants.inv g; final g; tame g; admissible w g;\n     ListSum (faces g) w < squanderTarget\\<rbrakk>\n    \\<Longrightarrow> squanderLowerBound g \\<le> ListSum (faces g) w", "finally"], ["proof (chain)\npicking this:\n  squanderLowerBound g \\<le> ListSum (faces g) w", "show \"squanderLowerBound g \\<le> (\\<Sum>\\<^bsub>f \\<in> faces g\\<^esub> w f)\""], ["proof (prove)\nusing this:\n  squanderLowerBound g \\<le> ListSum (faces g) w\n\ngoal (1 subgoal):\n 1. squanderLowerBound g \\<le> ListSum (faces g) w", "."], ["proof (state)\nthis:\n  squanderLowerBound g \\<le> ListSum (faces g) w\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}