{"file_name": "/home/qj213/afp-2021-10-22/thys/Priority_Search_Trees/PST_General.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Priority_Search_Trees", "problem_names": ["lemma pst_getmin_ismin: \n  \"invpst t \\<Longrightarrow> t\\<noteq>Leaf \\<Longrightarrow> is_min2 (pst_getmin t) (set_tree t)\"", "lemma is_min2_Empty[simp]: \"\\<not>is_min2 x {}\"", "lemma is_min2_singleton[simp]: \"is_min2 a {b} \\<longleftrightarrow> b=a\"", "lemma is_min2_insert:\n  \"is_min2 x (insert y ys) \n  \\<longleftrightarrow> (y=x \\<and> (\\<forall>z\\<in>ys. snd x \\<le> snd z)) \\<or> (snd x \\<le> snd y \\<and> is_min2 x ys)\"", "lemma is_min2_union:\n  \"is_min2 x (ys \\<union> zs) \n  \\<longleftrightarrow> (is_min2 x ys \\<and> (\\<forall>z\\<in>zs. snd x \\<le> snd z)) \n    \\<or> ((\\<forall>y\\<in>ys. snd x \\<le> snd y) \\<and> is_min2 x zs)\"", "lemma is_min2_min2_insI: \"is_min2 y ys \\<Longrightarrow> is_min2 (min2 x y) (insert x ys)\"", "lemma is_min2_mergeI: \n  \"is_min2 x xs \\<Longrightarrow> is_min2 y ys \\<Longrightarrow> is_min2 (min2 x y) (xs \\<union> ys)\"", "theorem invpst_mkNode[simp]: \"invpst (mkNode c l a r) \\<longleftrightarrow> invpst l \\<and> invpst r\""], "translations": [["", "lemma pst_getmin_ismin: \n  \"invpst t \\<Longrightarrow> t\\<noteq>Leaf \\<Longrightarrow> is_min2 (pst_getmin t) (set_tree t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>invpst t; t \\<noteq> \\<langle>\\<rangle>\\<rbrakk>\n    \\<Longrightarrow> is_min2 (pst_getmin t) (Tree2.set_tree t)", "by (cases t rule: pst_getmin.cases) auto"], ["", "text \\<open>  \n  It remains to upgrade the existing map operations to work with augmented nodes.\n  Therefore we now show how to transform any function definition on un-augmented \n  trees into one on trees augmented with \\<open>(k',p')\\<close> pairs. A defining equation\n  \\<open>f pats = e\\<close> for the original type of nodes is transformed into an equation\n  \\<open>f pats' = e'\\<close> on the augmented type of nodes as follows:\n  \\<^item> Every pattern @{term \"Node l (kp, b) r\"} in \\<open>pats\\<close> and \\<open>e\\<close> is replaced by\n    @{term \"Node l (kp, (b,DUMMY)) r\"} to obtain \\<open>pats'\\<close> and \\<open>e\\<^sub>2\\<close>.\n  \\<^item> To obtain \\<open>e'\\<close>, every expression @{term \"Node l (kp, b) r\"} in \\<open>e\\<^sub>2\\<close> is \n    replaced by \\<open>mkNode l kp b r\\<close> where:\n\\<close>"], ["", "definition \"min2 \\<equiv> \\<lambda>(k,p) (k',p'). if p\\<le>p' then (k,p) else (k',p')\""], ["", "definition \"min_kp a l r \\<equiv> case (l,r) of\n  (Leaf,Leaf) \\<Rightarrow> a\n| (Leaf,Node _ (_, (_,kpr)) _) \\<Rightarrow> min2 a kpr\n| (Node _ (_, (_,kpl)) _,Leaf) \\<Rightarrow> min2 a kpl\n| (Node _ (_, (_,kpl)) _,Node _ (_, (_,kpr)) _) \\<Rightarrow> min2 a (min2 kpl kpr)\""], ["", "definition \"mkNode c l a r \\<equiv> Node l (a, (c,min_kp a l r)) r\""], ["", "text \\<open>  \n  Note that this transformation does not affect the asymptotic complexity \n  of \\<open>f\\<close>. Therefore the priority search tree operations have the same complexity \n  as the underlying search tree operations, i.e.\\ typically logarithmic \n  (\\<open>update\\<close>, \\<open>delete\\<close>, \\<open>lookup\\<close>) and constant time (\\<open>empty\\<close>, \\<open>is_empty\\<close>).\n\\<close>"], ["", "text \\<open>It is straightforward to show that @{const mkNode} preserves the invariant:\\<close>"], ["", "lemma is_min2_Empty[simp]: \"\\<not>is_min2 x {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> is_min2 x {}", "by (auto simp: is_min2_def)"], ["", "lemma is_min2_singleton[simp]: \"is_min2 a {b} \\<longleftrightarrow> b=a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_min2 a {b} = (b = a)", "by (auto simp: is_min2_def)"], ["", "lemma is_min2_insert:\n  \"is_min2 x (insert y ys) \n  \\<longleftrightarrow> (y=x \\<and> (\\<forall>z\\<in>ys. snd x \\<le> snd z)) \\<or> (snd x \\<le> snd y \\<and> is_min2 x ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_min2 x (insert y ys) =\n    (y = x \\<and> (\\<forall>z\\<in>ys. snd x \\<le> snd z) \\<or>\n     snd x \\<le> snd y \\<and> is_min2 x ys)", "by (auto simp: is_min2_def)"], ["", "lemma is_min2_union:\n  \"is_min2 x (ys \\<union> zs) \n  \\<longleftrightarrow> (is_min2 x ys \\<and> (\\<forall>z\\<in>zs. snd x \\<le> snd z)) \n    \\<or> ((\\<forall>y\\<in>ys. snd x \\<le> snd y) \\<and> is_min2 x zs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_min2 x (ys \\<union> zs) =\n    (is_min2 x ys \\<and> (\\<forall>z\\<in>zs. snd x \\<le> snd z) \\<or>\n     (\\<forall>y\\<in>ys. snd x \\<le> snd y) \\<and> is_min2 x zs)", "by (auto simp: is_min2_def)"], ["", "lemma is_min2_min2_insI: \"is_min2 y ys \\<Longrightarrow> is_min2 (min2 x y) (insert x ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_min2 y ys \\<Longrightarrow> is_min2 (min2 x y) (insert x ys)", "by (auto simp: is_min2_def min2_def split: prod.split)"], ["", "lemma is_min2_mergeI: \n  \"is_min2 x xs \\<Longrightarrow> is_min2 y ys \\<Longrightarrow> is_min2 (min2 x y) (xs \\<union> ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_min2 x xs; is_min2 y ys\\<rbrakk>\n    \\<Longrightarrow> is_min2 (min2 x y) (xs \\<union> ys)", "by (auto simp: is_min2_def min2_def split: prod.split)"], ["", "theorem invpst_mkNode[simp]: \"invpst (mkNode c l a r) \\<longleftrightarrow> invpst l \\<and> invpst r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. invpst (mkNode c l a r) = (invpst l \\<and> invpst r)", "apply (cases l rule: invpst.cases; \n       cases r rule: invpst.cases; \n       simp add: mkNode_def min_kp_def)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>la x uu_ mkp ra.\n       \\<lbrakk>l = \\<langle>\\<rangle>;\n        r = \\<langle>la, (x, uu_, mkp), ra\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> (invpst la \\<and>\n                          invpst ra \\<and>\n                          is_min2 mkp\n                           (insert x\n                             (Tree2.set_tree la \\<union>\n                              Tree2.set_tree ra)) \\<and>\n                          is_min2 (min2 a mkp)\n                           (insert a\n                             (insert x\n                               (Tree2.set_tree la \\<union>\n                                Tree2.set_tree ra)))) =\n                         (invpst la \\<and>\n                          invpst ra \\<and>\n                          is_min2 mkp\n                           (insert x\n                             (Tree2.set_tree la \\<union>\n                              Tree2.set_tree ra)))\n 2. \\<And>la x uu_ mkp ra.\n       \\<lbrakk>l = \\<langle>la, (x, uu_, mkp), ra\\<rangle>;\n        r = \\<langle>\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> (invpst la \\<and>\n                          invpst ra \\<and>\n                          is_min2 mkp\n                           (insert x\n                             (Tree2.set_tree la \\<union>\n                              Tree2.set_tree ra)) \\<and>\n                          is_min2 (min2 a mkp)\n                           (insert x\n                             (insert a\n                               (Tree2.set_tree la \\<union>\n                                Tree2.set_tree ra)))) =\n                         (invpst la \\<and>\n                          invpst ra \\<and>\n                          is_min2 mkp\n                           (insert x\n                             (Tree2.set_tree la \\<union>\n                              Tree2.set_tree ra)))\n 3. \\<And>la x uu_ mkp ra laa xa uua_ mkpa raa.\n       \\<lbrakk>l = \\<langle>la, (x, uu_, mkp), ra\\<rangle>;\n        r = \\<langle>laa, (xa, uua_, mkpa), raa\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> (invpst la \\<and>\n                          invpst ra \\<and>\n                          is_min2 mkp\n                           (insert x\n                             (Tree2.set_tree la \\<union>\n                              Tree2.set_tree ra)) \\<and>\n                          invpst laa \\<and>\n                          invpst raa \\<and>\n                          is_min2 mkpa\n                           (insert xa\n                             (Tree2.set_tree laa \\<union>\n                              Tree2.set_tree raa)) \\<and>\n                          is_min2 (min2 a (min2 mkp mkpa))\n                           (insert x\n                             (insert a\n                               (insert xa\n                                 (Tree2.set_tree la \\<union>\n                                  (Tree2.set_tree ra \\<union>\n                                   (Tree2.set_tree laa \\<union>\n                                    Tree2.set_tree raa))))))) =\n                         (invpst la \\<and>\n                          invpst ra \\<and>\n                          is_min2 mkp\n                           (insert x\n                             (Tree2.set_tree la \\<union>\n                              Tree2.set_tree ra)) \\<and>\n                          invpst laa \\<and>\n                          invpst raa \\<and>\n                          is_min2 mkpa\n                           (insert xa\n                             (Tree2.set_tree laa \\<union>\n                              Tree2.set_tree raa)))", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>l = \\<langle>\\<rangle>;\n     r = \\<langle>la_, (x_, uu_, mkp_), ra_\\<rangle>\\<rbrakk>\n    \\<Longrightarrow> (invpst la_ \\<and>\n                       invpst ra_ \\<and>\n                       is_min2 mkp_\n                        (insert x_\n                          (Tree2.set_tree la_ \\<union>\n                           Tree2.set_tree ra_)) \\<and>\n                       is_min2 (min2 a mkp_)\n                        (insert a\n                          (insert x_\n                            (Tree2.set_tree la_ \\<union>\n                             Tree2.set_tree ra_)))) =\n                      (invpst la_ \\<and>\n                       invpst ra_ \\<and>\n                       is_min2 mkp_\n                        (insert x_\n                          (Tree2.set_tree la_ \\<union> Tree2.set_tree ra_)))", "using is_min2_min2_insI"], ["proof (prove)\nusing this:\n  is_min2 ?y ?ys \\<Longrightarrow> is_min2 (min2 ?x ?y) (insert ?x ?ys)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>l = \\<langle>\\<rangle>;\n     r = \\<langle>la_, (x_, uu_, mkp_), ra_\\<rangle>\\<rbrakk>\n    \\<Longrightarrow> (invpst la_ \\<and>\n                       invpst ra_ \\<and>\n                       is_min2 mkp_\n                        (insert x_\n                          (Tree2.set_tree la_ \\<union>\n                           Tree2.set_tree ra_)) \\<and>\n                       is_min2 (min2 a mkp_)\n                        (insert a\n                          (insert x_\n                            (Tree2.set_tree la_ \\<union>\n                             Tree2.set_tree ra_)))) =\n                      (invpst la_ \\<and>\n                       invpst ra_ \\<and>\n                       is_min2 mkp_\n                        (insert x_\n                          (Tree2.set_tree la_ \\<union> Tree2.set_tree ra_)))", "by blast"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>la x uu_ mkp ra.\n       \\<lbrakk>l = \\<langle>la, (x, uu_, mkp), ra\\<rangle>;\n        r = \\<langle>\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> (invpst la \\<and>\n                          invpst ra \\<and>\n                          is_min2 mkp\n                           (insert x\n                             (Tree2.set_tree la \\<union>\n                              Tree2.set_tree ra)) \\<and>\n                          is_min2 (min2 a mkp)\n                           (insert x\n                             (insert a\n                               (Tree2.set_tree la \\<union>\n                                Tree2.set_tree ra)))) =\n                         (invpst la \\<and>\n                          invpst ra \\<and>\n                          is_min2 mkp\n                           (insert x\n                             (Tree2.set_tree la \\<union>\n                              Tree2.set_tree ra)))\n 2. \\<And>la x uu_ mkp ra laa xa uua_ mkpa raa.\n       \\<lbrakk>l = \\<langle>la, (x, uu_, mkp), ra\\<rangle>;\n        r = \\<langle>laa, (xa, uua_, mkpa), raa\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> (invpst la \\<and>\n                          invpst ra \\<and>\n                          is_min2 mkp\n                           (insert x\n                             (Tree2.set_tree la \\<union>\n                              Tree2.set_tree ra)) \\<and>\n                          invpst laa \\<and>\n                          invpst raa \\<and>\n                          is_min2 mkpa\n                           (insert xa\n                             (Tree2.set_tree laa \\<union>\n                              Tree2.set_tree raa)) \\<and>\n                          is_min2 (min2 a (min2 mkp mkpa))\n                           (insert x\n                             (insert a\n                               (insert xa\n                                 (Tree2.set_tree la \\<union>\n                                  (Tree2.set_tree ra \\<union>\n                                   (Tree2.set_tree laa \\<union>\n                                    Tree2.set_tree raa))))))) =\n                         (invpst la \\<and>\n                          invpst ra \\<and>\n                          is_min2 mkp\n                           (insert x\n                             (Tree2.set_tree la \\<union>\n                              Tree2.set_tree ra)) \\<and>\n                          invpst laa \\<and>\n                          invpst raa \\<and>\n                          is_min2 mkpa\n                           (insert xa\n                             (Tree2.set_tree laa \\<union>\n                              Tree2.set_tree raa)))", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>l = \\<langle>la_, (x_, uu_, mkp_), ra_\\<rangle>;\n     r = \\<langle>\\<rangle>\\<rbrakk>\n    \\<Longrightarrow> (invpst la_ \\<and>\n                       invpst ra_ \\<and>\n                       is_min2 mkp_\n                        (insert x_\n                          (Tree2.set_tree la_ \\<union>\n                           Tree2.set_tree ra_)) \\<and>\n                       is_min2 (min2 a mkp_)\n                        (insert x_\n                          (insert a\n                            (Tree2.set_tree la_ \\<union>\n                             Tree2.set_tree ra_)))) =\n                      (invpst la_ \\<and>\n                       invpst ra_ \\<and>\n                       is_min2 mkp_\n                        (insert x_\n                          (Tree2.set_tree la_ \\<union> Tree2.set_tree ra_)))", "by (auto intro!: is_min2_min2_insI simp: insert_commute)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>la x uu_ mkp ra laa xa uua_ mkpa raa.\n       \\<lbrakk>l = \\<langle>la, (x, uu_, mkp), ra\\<rangle>;\n        r = \\<langle>laa, (xa, uua_, mkpa), raa\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> (invpst la \\<and>\n                          invpst ra \\<and>\n                          is_min2 mkp\n                           (insert x\n                             (Tree2.set_tree la \\<union>\n                              Tree2.set_tree ra)) \\<and>\n                          invpst laa \\<and>\n                          invpst raa \\<and>\n                          is_min2 mkpa\n                           (insert xa\n                             (Tree2.set_tree laa \\<union>\n                              Tree2.set_tree raa)) \\<and>\n                          is_min2 (min2 a (min2 mkp mkpa))\n                           (insert x\n                             (insert a\n                               (insert xa\n                                 (Tree2.set_tree la \\<union>\n                                  (Tree2.set_tree ra \\<union>\n                                   (Tree2.set_tree laa \\<union>\n                                    Tree2.set_tree raa))))))) =\n                         (invpst la \\<and>\n                          invpst ra \\<and>\n                          is_min2 mkp\n                           (insert x\n                             (Tree2.set_tree la \\<union>\n                              Tree2.set_tree ra)) \\<and>\n                          invpst laa \\<and>\n                          invpst raa \\<and>\n                          is_min2 mkpa\n                           (insert xa\n                             (Tree2.set_tree laa \\<union>\n                              Tree2.set_tree raa)))", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>l = \\<langle>la_, (x_, uu_, mkp_), ra_\\<rangle>;\n     r = \\<langle>laa_, (xa_, uua_, mkpa_), raa_\\<rangle>\\<rbrakk>\n    \\<Longrightarrow> (invpst la_ \\<and>\n                       invpst ra_ \\<and>\n                       is_min2 mkp_\n                        (insert x_\n                          (Tree2.set_tree la_ \\<union>\n                           Tree2.set_tree ra_)) \\<and>\n                       invpst laa_ \\<and>\n                       invpst raa_ \\<and>\n                       is_min2 mkpa_\n                        (insert xa_\n                          (Tree2.set_tree laa_ \\<union>\n                           Tree2.set_tree raa_)) \\<and>\n                       is_min2 (min2 a (min2 mkp_ mkpa_))\n                        (insert x_\n                          (insert a\n                            (insert xa_\n                              (Tree2.set_tree la_ \\<union>\n                               (Tree2.set_tree ra_ \\<union>\n                                (Tree2.set_tree laa_ \\<union>\n                                 Tree2.set_tree raa_))))))) =\n                      (invpst la_ \\<and>\n                       invpst ra_ \\<and>\n                       is_min2 mkp_\n                        (insert x_\n                          (Tree2.set_tree la_ \\<union>\n                           Tree2.set_tree ra_)) \\<and>\n                       invpst laa_ \\<and>\n                       invpst raa_ \\<and>\n                       is_min2 mkpa_\n                        (insert xa_\n                          (Tree2.set_tree laa_ \\<union>\n                           Tree2.set_tree raa_)))", "by (smt Un_insert_left Un_insert_right is_min2_mergeI is_min2_min2_insI \n                sup_assoc)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "end"]]}