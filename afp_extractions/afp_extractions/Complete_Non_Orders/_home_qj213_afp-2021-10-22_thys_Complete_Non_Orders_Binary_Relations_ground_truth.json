{"file_name": "/home/qj213/afp-2021-10-22/thys/Complete_Non_Orders/Binary_Relations.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Complete_Non_Orders", "problem_names": ["lemma conj_imp_eq_imp_imp: \"(P \\<and> Q \\<Longrightarrow> PROP R) \\<equiv> (P \\<Longrightarrow> Q \\<Longrightarrow> PROP R)\"", "lemma tranclp_trancl: \"r\\<^sup>+\\<^sup>+ = (\\<lambda>x y. (x,y) \\<in> {(a,b). r a b}\\<^sup>+)\"", "lemma tranclp_id[simp]: \"transp r \\<Longrightarrow> tranclp r = r\"", "lemma transp_tranclp[simp]: \"transp (tranclp r)\"", "lemma funpow_dom: \"f ` A \\<subseteq> A \\<Longrightarrow> (f^^n) ` A \\<subseteq> A\"", "lemma image_constant:\n  assumes \"\\<And>i. i \\<in> I \\<Longrightarrow> f i = y\"\n  shows \"f ` I = (if I = {} then {} else {y})\"", "lemma conversep_is_dual[simp]: \"conversep = dual\"", "lemmas monotone_onI = monotone_on_def[unfolded atomize_eq, THEN iffD2, rule_format]", "lemma monotone_onD: \"monotone_on X r s f \\<Longrightarrow> r x y \\<Longrightarrow> x \\<in> X \\<Longrightarrow> y \\<in> X \\<Longrightarrow> s (f x) (f y)\"", "lemmas monotone_onE = monotone_on_def[unfolded atomize_eq, THEN iffD1, elim_format, rule_format]", "lemma monotone_on_UNIV[simp]: \"monotone_on UNIV = monotone\"", "lemma monotone_on_dual: \"monotone_on X r s f \\<Longrightarrow> monotone_on X r\\<^sup>- s\\<^sup>- f\"", "lemma monotone_on_id: \"monotone_on X r r id\"", "lemma monotone_on_cmono: \"A \\<subseteq> B \\<Longrightarrow> monotone_on B \\<le> monotone_on A\"", "lemma sympartpI[intro]:\n  fixes r (infix \"\\<sqsubseteq>\" 50)\n  assumes \"x \\<sqsubseteq> y\" and \"y \\<sqsubseteq> x\" shows \"sympartp (\\<sqsubseteq>) x y\"", "lemma sympartpE[elim]:\n  fixes r (infix \"\\<sqsubseteq>\" 50)\n  assumes \"sympartp (\\<sqsubseteq>) x y\" and \"x \\<sqsubseteq> y \\<Longrightarrow> y \\<sqsubseteq> x \\<Longrightarrow> thesis\" shows thesis", "lemma sympartp_dual: \"sympartp r\\<^sup>- = sympartp r\"", "lemma sympartp_eq[simp]: \"sympartp (=) = (=)\"", "lemma reflclp_sympartp[simp]: \"(sympartp r)\\<^sup>=\\<^sup>= = sympartp r\\<^sup>=\\<^sup>=\"", "lemma sympartp_reflclp_equivp[simp]: \"sympartp r\\<^sup>=\\<^sup>= = equivpartp r\"", "lemma equivpartI[simp]: \"equivpartp r x x\"\n  and sympartp_equivpartpI: \"sympartp r x y \\<Longrightarrow> equivpartp r x y\"\n  and equivpartpCI[intro]: \"(x \\<noteq> y \\<Longrightarrow> sympartp r x y) \\<Longrightarrow> equivpartp r x y\"", "lemma equivpartpE[elim]:\n  assumes \"equivpartp r x y\"\n    and \"x = y \\<Longrightarrow> thesis\"\n    and \"r x y \\<Longrightarrow> r y x \\<Longrightarrow> thesis\"\n  shows \"thesis\"", "lemma equivpartp_eq[simp]: \"equivpartp (=) = (=)\"", "lemma sympartp_equivpartp[simp]: \"sympartp (equivpartp r) = (equivpartp r)\"\n  and equivpartp_equivpartp[simp]: \"equivpartp (equivpartp r) = (equivpartp r)\"\n  and equivpartp_sympartp[simp]: \"equivpartp (sympartp r) = (equivpartp r)\"", "lemma equivpartp_dual: \"equivpartp r\\<^sup>- = equivpartp r\"", "lemma asympartpE[elim]:\n  fixes r (infix \"\\<sqsubseteq>\" 50)\n  shows \"asympartp (\\<sqsubseteq>) x y \\<Longrightarrow> (x \\<sqsubseteq> y \\<Longrightarrow> \\<not>y \\<sqsubseteq> x \\<Longrightarrow> thesis) \\<Longrightarrow> thesis\"", "lemmas asympartpI[intro] = asympartp_def[unfolded atomize_eq, THEN iffD2, unfolded conj_imp_eq_imp_imp, rule_format]", "lemma asympartp_eq[simp]: \"asympartp (=) = bot\"", "lemma asympartp_sympartp [simp]: \"asympartp (sympartp r) = bot\"\n  and sympartp_asympartp [simp]: \"sympartp (asympartp r) = bot\"", "lemmas RestrpI[intro!] = Restrp_def[unfolded atomize_eq, THEN iffD2, unfolded conj_imp_eq_imp_imp]", "lemmas RestrpE[elim!] = Restrp_def[unfolded atomize_eq, THEN iffD1, elim_format, unfolded conj_imp_eq_imp_imp]", "lemma Restrp_UNIV[simp]: \"r \\<restriction> UNIV \\<equiv> r\"", "lemma Restrp_Restrp[simp]: \"r \\<restriction> A \\<restriction> B \\<equiv> r \\<restriction> A \\<inter> B\"", "lemma sympartp_Restrp[simp]: \"sympartp (r \\<restriction> A) \\<equiv> sympartp r \\<restriction> A\"", "lemma Imagep_Image: \"r ``` A = {(a,b). r a b} `` A\"", "lemma in_Imagep: \"b \\<in> r ``` A \\<longleftrightarrow> (\\<exists>a \\<in> A. r a b)\"", "lemma ImagepI: \"a \\<in> A \\<Longrightarrow> r a b \\<Longrightarrow> b \\<in> r ``` A\"", "lemma subset_Imagep: \"B \\<subseteq> r ``` A \\<longleftrightarrow> (\\<forall>b\\<in>B. \\<exists>a\\<in>A. r a b)\"", "lemma\n  fixes r (infix \"\\<sqsubseteq>\" 50)\n  shows boundI[intro!]: \"(\\<And>x. x \\<in> X \\<Longrightarrow> x \\<sqsubseteq> b) \\<Longrightarrow> bound X (\\<sqsubseteq>) b\"\n    and boundE[elim]: \"bound X (\\<sqsubseteq>) b \\<Longrightarrow> ((\\<And>x. x \\<in> X \\<Longrightarrow> x \\<sqsubseteq> b) \\<Longrightarrow> thesis) \\<Longrightarrow> thesis\"", "lemma bound_empty: \"bound {} = (\\<lambda>r x. True)\"", "lemma bound_insert[simp]:\n  fixes r (infix \"\\<sqsubseteq>\" 50)\n  shows \"bound (insert x X) (\\<sqsubseteq>) b \\<longleftrightarrow> x \\<sqsubseteq> b \\<and> bound X (\\<sqsubseteq>) b\"", "lemma\n  fixes r (infix \"\\<sqsubseteq>\" 50)\n  shows extremeI[intro]: \"e \\<in> X \\<Longrightarrow> (\\<And>x. x \\<in> X \\<Longrightarrow> x \\<sqsubseteq> e) \\<Longrightarrow> extreme X (\\<sqsubseteq>) e\"\n    and extremeD: \"extreme X (\\<sqsubseteq>) e \\<Longrightarrow> e \\<in> X\" \"extreme X (\\<sqsubseteq>) e \\<Longrightarrow> (\\<And>x. x \\<in> X \\<Longrightarrow> x \\<sqsubseteq> e)\"\n    and extremeE[elim]: \"extreme X (\\<sqsubseteq>) e \\<Longrightarrow> (e \\<in> X \\<Longrightarrow> (\\<And>x. x \\<in> X \\<Longrightarrow> x \\<sqsubseteq> e) \\<Longrightarrow> thesis) \\<Longrightarrow> thesis\"", "lemma\n  fixes r (infix \"\\<sqsubseteq>\" 50)\n  shows extreme_UNIV[simp]: \"extreme UNIV (\\<sqsubseteq>) t \\<longleftrightarrow> (\\<forall>x. x \\<sqsubseteq> t)\"", "lemma extremes_equiv: \"extreme X r b \\<Longrightarrow> extreme X r c \\<Longrightarrow> sympartp r b c\"", "lemma bound_cmono: assumes \"X \\<subseteq> Y\" shows \"bound Y \\<le> bound X\"", "lemma sympartp_sympartp[simp]: \"sympartp (sympartp r) = sympartp r\"", "lemma extreme_boundI[intro]:\n  assumes \"\\<And>b. bound X (\\<sqsubseteq>) b \\<Longrightarrow> b \\<in> A \\<Longrightarrow> s \\<sqsubseteq> b\" and \"\\<And>x. x \\<in> X \\<Longrightarrow> x \\<sqsubseteq> s\" and \"s \\<in> A\"\n  shows \"extreme_bound X s\"", "lemma extreme_bound_bound: \"extreme_bound X y \\<Longrightarrow> x \\<in> X \\<Longrightarrow> x \\<sqsubseteq> y\"", "lemma extreme_bound_mono:\n  assumes XY: \"X \\<subseteq> Y\"\n    and sX: \"extreme_bound X sX\"\n    and sY: \"extreme_bound Y sY\"\n  shows \"sX \\<sqsubseteq> sY\"", "lemma extreme_bound_iff:\n  shows \"extreme_bound X s \\<longleftrightarrow> s \\<in> A \\<and> (\\<forall>c \\<in> A. (\\<forall>x \\<in> X. x \\<sqsubseteq> c) \\<longrightarrow> s \\<sqsubseteq> c) \\<and> (\\<forall>x \\<in> X. x \\<sqsubseteq> s)\"", "lemma extreme_bound_singleton_refl[simp]:\n  \"extreme_bound {x} x \\<longleftrightarrow> x \\<in> A \\<and> x \\<sqsubseteq> x\"", "lemma extreme_bound_image_const:\n  \"x \\<sqsubseteq> x \\<Longrightarrow> I \\<noteq> {} \\<Longrightarrow> (\\<And>i. i \\<in> I \\<Longrightarrow> f i = x) \\<Longrightarrow> x \\<in> A \\<Longrightarrow> extreme_bound (f ` I) x\"", "lemma extreme_bound_UN_const:\n  \"x \\<sqsubseteq> x \\<Longrightarrow> I \\<noteq> {} \\<Longrightarrow> (\\<And>i y. i \\<in> I \\<Longrightarrow> P i y \\<longleftrightarrow> x = y) \\<Longrightarrow> x \\<in> A \\<Longrightarrow>\n  extreme_bound (\\<Union>i\\<in>I. {y. P i y}) x\"", "lemma monotone_extreme_imp_extreme_bound:\n  \"extreme_bound A (\\<sqsubseteq>) (f ` I) (f e)\"", "lemma monotone_extreme_extreme_boundI:\n  \"x = f e \\<Longrightarrow> extreme_bound A (\\<sqsubseteq>) (f ` I) x\"", "lemma asym_cases[consumes 1, case_names asym sym]:\n  assumes \"x \\<sqsubseteq> y\" and \"x \\<sqsubset> y \\<Longrightarrow> thesis\" and \"x \\<sim> y \\<Longrightarrow> thesis\"\n  shows thesis", "lemma eq_implies: \"x = y \\<Longrightarrow> x \\<in> A \\<Longrightarrow> x \\<sqsubseteq> y\"", "lemma extreme_singleton[simp]: \"x \\<in> A \\<Longrightarrow> extreme {x} (\\<sqsubseteq>) y \\<longleftrightarrow> x = y\"", "lemma extreme_bound_singleton: \"x \\<in> A \\<Longrightarrow> extreme_bound A (\\<sqsubseteq>) {x} x\"", "lemma reflexive_subset: \"B \\<subseteq> A \\<Longrightarrow> reflexive B (\\<sqsubseteq>)\"", "lemma reflexiveE[elim]:\n  assumes \"reflexive A r\" and \"(\\<And>x. x \\<in> A \\<Longrightarrow> r x x) \\<Longrightarrow> thesis\" shows thesis", "lemma reflexive_cong:\n  \"(\\<And>a b. a \\<in> A \\<Longrightarrow> b \\<in> A \\<Longrightarrow> r a b \\<longleftrightarrow> r' a b) \\<Longrightarrow> reflexive A r \\<longleftrightarrow> reflexive A r'\"", "lemma irreflD[simp]: \"x \\<sqsubset> x \\<Longrightarrow> \\<not>x \\<in> A\"", "lemma implies_not_eq: \"x \\<sqsubset> y \\<Longrightarrow> x \\<in> A \\<Longrightarrow> x \\<noteq> y\"", "lemma Restrp_irreflexive: \"irreflexive UNIV ((\\<sqsubset>)\\<restriction>A)\"", "lemma irreflexive_subset: \"B \\<subseteq> A \\<Longrightarrow> irreflexive B (\\<sqsubset>)\"", "lemma irreflexive_cong:\n  \"(\\<And>a b. a \\<in> A \\<Longrightarrow> b \\<in> A \\<Longrightarrow> r a b \\<longleftrightarrow> r' a b) \\<Longrightarrow> irreflexive A r \\<longleftrightarrow> irreflexive A r'\"", "lemma Restrp_transitive: \"transitive UNIV ((\\<sqsubseteq>)\\<restriction>A)\"", "lemma bound_trans[trans]: \"bound X (\\<sqsubseteq>) b \\<Longrightarrow> b \\<sqsubseteq> c \\<Longrightarrow> X \\<subseteq> A \\<Longrightarrow> b \\<in> A \\<Longrightarrow> c \\<in> A \\<Longrightarrow> bound X (\\<sqsubseteq>) c\"", "lemma transitive_subset:\n  assumes BA: \"B \\<subseteq> A\" shows \"transitive B (\\<sqsubseteq>)\"", "lemma asympartp_transitive: \"transitive A (\\<sqsubset>)\"", "lemma reflclp_transitive: \"transitive A (\\<sqsubseteq>)\\<^sup>=\\<^sup>=\"", "lemma transitive_cong:\n  assumes r: \"\\<And>a b. a \\<in> A \\<Longrightarrow> b \\<in> A \\<Longrightarrow> r a b \\<longleftrightarrow> r' a b\" shows \"transitive A r \\<longleftrightarrow> transitive A r'\"", "lemma tranclp_transitive: \"transitive A (tranclp r)\"", "lemma sym_iff: \"x \\<in> A \\<Longrightarrow> y \\<in> A \\<Longrightarrow> x \\<sim> y \\<longleftrightarrow> y \\<sim> x\"", "lemma Restrp_symmetric: \"symmetric UNIV ((\\<sim>)\\<restriction>A)\"", "lemma symmetric_subset: \"B \\<subseteq> A \\<Longrightarrow> symmetric B (\\<sim>)\"", "lemma symmetric_cong:\n  \"(\\<And>a b. a \\<in> A \\<Longrightarrow> b \\<in> A \\<Longrightarrow> r a b \\<longleftrightarrow> r' a b) \\<Longrightarrow> symmetric A r \\<longleftrightarrow> symmetric A r'\"", "lemma sympartp_symmetric: \"symmetric A (sympartp r)\"", "lemma sym_iff_eq_refl: \"x \\<in> A \\<Longrightarrow> y \\<in> A \\<Longrightarrow> x \\<sim> y \\<longleftrightarrow> x = y \\<and> y \\<sqsubseteq> y\"", "lemma equiv_iff_eq[simp]: \"x \\<in> A \\<Longrightarrow> y \\<in> A \\<Longrightarrow> x \\<simeq> y \\<longleftrightarrow> x = y\"", "lemma extreme_unique: \"X \\<subseteq> A \\<Longrightarrow> extreme X (\\<sqsubseteq>) x \\<Longrightarrow> extreme X (\\<sqsubseteq>) y \\<longleftrightarrow> x = y\"", "lemma ex_extreme_iff_ex1:\n  \"X \\<subseteq> A \\<Longrightarrow> Ex (extreme X (\\<sqsubseteq>)) \\<longleftrightarrow> Ex1 (extreme X (\\<sqsubseteq>))\"", "lemma ex_extreme_iff_the:\n   \"X \\<subseteq> A \\<Longrightarrow> Ex (extreme X (\\<sqsubseteq>)) \\<longleftrightarrow> extreme X (\\<sqsubseteq>) (The (extreme X (\\<sqsubseteq>)))\"", "lemma Restrp_antisymmetric: \"antisymmetric UNIV ((\\<sqsubseteq>)\\<restriction>A)\"", "lemma antisymmetric_subset: \"B \\<subseteq> A \\<Longrightarrow> antisymmetric B (\\<sqsubseteq>)\"", "lemma antisymmetric_cong:\n  \"(\\<And>a b. a \\<in> A \\<Longrightarrow> b \\<in> A \\<Longrightarrow> r a b \\<longleftrightarrow> r' a b) \\<Longrightarrow> antisymmetric A r \\<longleftrightarrow> antisymmetric A r'\"", "lemma antisymmetric_union:\n  fixes less_eq (infix \"\\<sqsubseteq>\" 50)\n  assumes A: \"antisymmetric A (\\<sqsubseteq>)\" and B: \"antisymmetric B (\\<sqsubseteq>)\"\n    and AB: \"\\<forall>a \\<in> A. \\<forall>b \\<in> B. a \\<sqsubseteq> b \\<longrightarrow> b \\<sqsubseteq> a \\<longrightarrow> a = b\"\n  shows \"antisymmetric (A \\<union> B) (\\<sqsubseteq>)\"", "lemma equiv_order_trans[trans]:\n  assumes xy: \"x \\<simeq> y\" and yz: \"y \\<sqsubseteq> z\" and x: \"x \\<in> A\" and y: \"y \\<in> A\" and z: \"z \\<in> A\"\n  shows \"x \\<sqsubseteq> z\"", "lemma equiv_transitive: \"transitive A (\\<simeq>)\"", "lemma sym_order_trans[trans]:\n  assumes xy: \"x \\<sim> y\" and yz: \"y \\<sqsubseteq> z\" and x: \"x \\<in> A\" and y: \"y \\<in> A\" and z: \"z \\<in> A\"\n  shows \"x \\<sqsubseteq> z\"", "lemmas sym_transitive = sym.transitive_axioms", "lemma extreme_bound_quasi_const:\n  assumes C: \"C \\<subseteq> A\" and x: \"x \\<in> A\" and C0: \"C \\<noteq> {}\" and const: \"\\<forall>y \\<in> C. y \\<sim> x\"\n  shows \"extreme_bound A (\\<sqsubseteq>) C x\"", "lemma extreme_bound_quasi_const_iff:\n  assumes C: \"C \\<subseteq> A\" and x: \"x \\<in> A\" and y: \"y \\<in> A\" and C0: \"C \\<noteq> {}\" and const: \"\\<forall>z \\<in> C. z \\<sim> x\"\n  shows \"extreme_bound A (\\<sqsubseteq>) C y \\<longleftrightarrow> x \\<sim> y\"", "lemma Restrp_semiattractive: \"semiattractive UNIV ((\\<sqsubseteq>)\\<restriction>A)\"", "lemma semiattractive_subset: \"B \\<subseteq> A \\<Longrightarrow> semiattractive B (\\<sqsubseteq>)\"", "lemma semiattractive_cong:\n  assumes r: \"\\<And>a b. a \\<in> A \\<Longrightarrow> b \\<in> A \\<Longrightarrow> r a b \\<longleftrightarrow> r' a b\"\n  shows \"semiattractive A r \\<longleftrightarrow> semiattractive A r'\" (is \"?l \\<longleftrightarrow> ?r\")", "lemma order_equiv_trans[trans]:\n  assumes xy: \"x \\<sqsubseteq> y\" and yz: \"y \\<simeq> z\" and x: \"x \\<in> A\" and y: \"y \\<in> A\" and z: \"z \\<in> A\"\n  shows \"x \\<sqsubseteq> z\"", "lemma order_sym_trans[trans]:\n  assumes xy: \"x \\<sqsubseteq> y\" and yz: \"y \\<sim> z\" and x: \"x \\<in> A\" and y: \"y \\<in> A\" and z: \"z \\<in> A\"\n  shows \"x \\<sqsubseteq> z\"", "lemma Restrp_attractive: \"attractive UNIV ((\\<sqsubseteq>)\\<restriction>A)\"", "lemma attractive_subset: \"B \\<subseteq> A \\<Longrightarrow> attractive B (\\<sqsubseteq>)\"", "lemma attractive_cong:\n  assumes r: \"\\<And>a b. a \\<in> A \\<Longrightarrow> b \\<in> A \\<Longrightarrow> r a b \\<longleftrightarrow> r' a b\"\n  shows \"attractive A r \\<longleftrightarrow> attractive A r'\"", "lemma antisymmetric_axioms: \"antisymmetric A (\\<sqsubset>)\"", "lemma Restrp_asymmetric: \"asymmetric UNIV ((\\<sqsubset>)\\<restriction>A)\"", "lemma asymmetric_subset: \"B \\<subseteq> A \\<Longrightarrow> asymmetric B (\\<sqsubset>)\"", "lemma asymmetric_iff_irreflexive_antisymmetric:\n  fixes less (infix \"\\<sqsubset>\" 50)\n  shows \"asymmetric A (\\<sqsubset>) \\<longleftrightarrow> irreflexive A (\\<sqsubset>) \\<and> antisymmetric A (\\<sqsubset>)\" (is \"?l \\<longleftrightarrow> ?r\")", "lemma asymmetric_cong:\n  assumes r: \"\\<And>a b. a \\<in> A \\<Longrightarrow> b \\<in> A \\<Longrightarrow> r a b \\<longleftrightarrow> r' a b\"\n  shows \"asymmetric A r \\<longleftrightarrow> asymmetric A r'\"", "lemma quasi_ordered_subset: \"B \\<subseteq> A \\<Longrightarrow> quasi_ordered_set B (\\<sqsubseteq>)\"", "lemma quasi_ordered_set_cong:\n  assumes r: \"\\<And>a b. a \\<in> A \\<Longrightarrow> b \\<in> A \\<Longrightarrow> r a b \\<longleftrightarrow> r' a b\"\n  shows \"quasi_ordered_set A r \\<longleftrightarrow> quasi_ordered_set A r'\"", "lemma Restrp_near_order: \"near_ordered_set UNIV ((\\<sqsubseteq>)\\<restriction>A)\"", "lemma near_ordered_subset: \"B \\<subseteq> A \\<Longrightarrow> near_ordered_set B (\\<sqsubseteq>)\"", "lemma near_ordered_set_cong:\n  assumes r: \"\\<And>a b. a \\<in> A \\<Longrightarrow> b \\<in> A \\<Longrightarrow> r a b \\<longleftrightarrow> r' a b\"\n  shows \"near_ordered_set A r \\<longleftrightarrow> near_ordered_set A r'\"", "lemma sym_eq[simp]: \"x \\<in> A \\<Longrightarrow> y \\<in> A \\<Longrightarrow> x \\<sim> y \\<longleftrightarrow> x = y\"", "lemma extreme_bound_singleton_eq[simp]: \"x \\<in> A \\<Longrightarrow> extreme_bound A (\\<sqsubseteq>) {x} y \\<longleftrightarrow> x = y\"", "lemma eq_iff: \"x \\<in> A \\<Longrightarrow> y \\<in> A \\<Longrightarrow> x = y \\<longleftrightarrow> x \\<sqsubseteq> y \\<and> y \\<sqsubseteq> x\"", "lemma extreme_order_iff_eq: \"e \\<in> A \\<Longrightarrow> extreme {x \\<in> A. x \\<sqsubseteq> e} (\\<sqsubseteq>) s \\<longleftrightarrow> e = s\"", "lemma pseudo_ordered_subset: \"B \\<subseteq> A \\<Longrightarrow> pseudo_ordered_set B (\\<sqsubseteq>)\"", "lemma pseudo_ordered_set_cong:\n  assumes r: \"\\<And>a b. a \\<in> A \\<Longrightarrow> b \\<in> A \\<Longrightarrow> r a b \\<longleftrightarrow> r' a b\"\n  shows \"pseudo_ordered_set A r \\<longleftrightarrow> pseudo_ordered_set A r'\"", "lemma partially_ordered_subset: \"B \\<subseteq> A \\<Longrightarrow> partially_ordered_set B (\\<sqsubseteq>)\"", "lemma partially_ordered_set_cong:\n  assumes r: \"\\<And>a b. a \\<in> A \\<Longrightarrow> b \\<in> A \\<Longrightarrow> r a b \\<longleftrightarrow> r' a b\"\n  shows \"partially_ordered_set A r \\<longleftrightarrow> partially_ordered_set A r'\"", "lemma near_ordered_set_axioms: \"near_ordered_set A (\\<sqsubset>)\"", "lemma Restrp_strict_order: \"strict_ordered_set UNIV ((\\<sqsubset>)\\<restriction>A)\"", "lemma strict_ordered_subset: \"B \\<subseteq> A \\<Longrightarrow> strict_ordered_set B (\\<sqsubset>)\"", "lemma strict_ordered_set_cong:\n  assumes r: \"\\<And>a b. a \\<in> A \\<Longrightarrow> b \\<in> A \\<Longrightarrow> r a b \\<longleftrightarrow> r' a b\"\n  shows \"strict_ordered_set A r \\<longleftrightarrow> strict_ordered_set A r'\"", "lemma tolerance_subset: \"B \\<subseteq> A \\<Longrightarrow> tolerance B (\\<sim>)\"", "lemma tolerance_cong:\n  assumes r: \"\\<And>a b. a \\<in> A \\<Longrightarrow> b \\<in> A \\<Longrightarrow> r a b \\<longleftrightarrow> r' a b\"\n  shows \"tolerance A r \\<longleftrightarrow> tolerance A r'\"", "lemma partial_equivalence_subset: \"B \\<subseteq> A \\<Longrightarrow> partial_equivalence B (\\<sim>)\"", "lemma partial_equivalence_cong:\n  assumes r: \"\\<And>a b. a \\<in> A \\<Longrightarrow> b \\<in> A \\<Longrightarrow> r a b \\<longleftrightarrow> r' a b\"\n  shows \"partial_equivalence A r \\<longleftrightarrow> partial_equivalence A r'\"", "lemma equivalence_subset: \"B \\<subseteq> A \\<Longrightarrow> equivalence B (\\<sim>)\"", "lemma equivalence_cong:\n  assumes r: \"\\<And>a b. a \\<in> A \\<Longrightarrow> b \\<in> A \\<Longrightarrow> r a b \\<longleftrightarrow> r' a b\"\n  shows \"equivalence A r \\<longleftrightarrow> equivalence A r'\"", "lemma cases[consumes 2, case_names less eq greater]:\n  assumes \"x \\<in> A\" and \"y \\<in> A\" and \"x \\<sqsubset> y \\<Longrightarrow> P\" and \"x = y \\<Longrightarrow> P\" and \"y \\<sqsubset> x \\<Longrightarrow> P\"\n  shows \"P\"", "lemma neqE:\n  assumes \"x \\<in> A\" and \"y \\<in> A\"\n  shows \"x \\<noteq> y \\<Longrightarrow> (x \\<sqsubset> y \\<Longrightarrow> P) \\<Longrightarrow> (y \\<sqsubset> x \\<Longrightarrow> P) \\<Longrightarrow> P\"", "lemma semiconnex_subset: \"B \\<subseteq> A \\<Longrightarrow> semiconnex B (\\<sqsubset>)\"", "lemma semiconnex_cong:\n  assumes r: \"\\<And>a b. a \\<in> A \\<Longrightarrow> b \\<in> A \\<Longrightarrow> r a b \\<longleftrightarrow> r' a b\"\n  shows \"semiconnex A r \\<longleftrightarrow> semiconnex A r'\"", "lemma neq_iff: \"x \\<in> A \\<Longrightarrow> y \\<in> A \\<Longrightarrow> x \\<noteq> y \\<longleftrightarrow> x \\<sqsubset> y \\<or> y \\<sqsubset> x\"", "lemma semiconnex_irreflexive_subset: \"B \\<subseteq> A \\<Longrightarrow> semiconnex_irreflexive B (\\<sqsubset>)\"", "lemma semiconnex_irreflexive_cong:\n  assumes r: \"\\<And>a b. a \\<in> A \\<Longrightarrow> b \\<in> A \\<Longrightarrow> r a b \\<longleftrightarrow> r' a b\"\n  shows \"semiconnex_irreflexive A r \\<longleftrightarrow> semiconnex_irreflexive A r'\"", "lemma comparable_cases[consumes 2, case_names le ge]:\n  assumes \"x \\<in> A\" and \"y \\<in> A\" and \"x \\<sqsubseteq> y \\<Longrightarrow> P\" and \"y \\<sqsubseteq> x \\<Longrightarrow> P\" shows \"P\"", "lemma comparable_three_cases[consumes 2, case_names less eq greater]:\n  assumes \"x \\<in> A\" and \"y \\<in> A\" and \"x \\<sqsubset> y \\<Longrightarrow> P\" and \"x \\<sim> y \\<Longrightarrow> P\" and \"y \\<sqsubset> x \\<Longrightarrow> P\" shows \"P\"", "lemma\n  assumes x: \"x \\<in> A\" and y: \"y \\<in> A\"\n  shows not_iff_asym: \"\\<not>x \\<sqsubseteq> y \\<longleftrightarrow> y \\<sqsubset> x\"\n    and not_asym_iff[simp]: \"\\<not>x \\<sqsubset> y \\<longleftrightarrow> y \\<sqsubseteq> x\"", "lemma connex_subset: \"B \\<subseteq> A \\<Longrightarrow> connex B (\\<sqsubseteq>)\"", "lemmas connexE = connex.comparable_cases", "lemmas connexI[intro] = connex.intro", "lemma connex_iff_semiconnex_reflexive: \"connex A (\\<sqsubseteq>) \\<longleftrightarrow> semiconnex A (\\<sqsubseteq>) \\<and> reflexive A (\\<sqsubseteq>)\"\n  (is \"?c \\<longleftrightarrow> ?t \\<and> ?r\")", "lemma chain_connect: \"Complete_Partial_Order.chain r A \\<equiv> connex A r\"", "lemma connex_union:\n  assumes \"connex X (\\<sqsubseteq>)\" and \"connex Y (\\<sqsubseteq>)\" and \"\\<forall>x \\<in> X. \\<forall>y \\<in> Y. x \\<sqsubseteq> y \\<or> y \\<sqsubseteq> x\"\n  shows \"connex (X\\<union>Y) (\\<sqsubseteq>)\"", "lemma connex_cong:\n  assumes r: \"\\<And>a b. a \\<in> A \\<Longrightarrow> b \\<in> A \\<Longrightarrow> r a b \\<longleftrightarrow> r' a b\"\n  shows \"connex A r \\<longleftrightarrow> connex A r'\"", "lemma not_weak_iff:\n  assumes x: \"x \\<in> A\" and y: \"y \\<in> A\" shows \"\\<not> y \\<sqsubseteq> x \\<longleftrightarrow> x \\<sqsubseteq> y \\<and> x \\<noteq> y\"", "lemma total_pseudo_ordered_subset: \"B \\<subseteq> A \\<Longrightarrow> total_pseudo_ordered_set B (\\<sqsubseteq>)\"", "lemma total_pseudo_ordered_set_cong:\n  assumes r: \"\\<And>a b. a \\<in> A \\<Longrightarrow> b \\<in> A \\<Longrightarrow> r a b \\<longleftrightarrow> r' a b\"\n  shows \"total_pseudo_ordered_set A r \\<longleftrightarrow> total_pseudo_ordered_set A r'\"", "lemma total_quasi_ordered_subset: \"B \\<subseteq> A \\<Longrightarrow> total_quasi_ordered_set B (\\<sqsubseteq>)\"", "lemma total_quasi_ordered_set_cong:\n  assumes r: \"\\<And>a b. a \\<in> A \\<Longrightarrow> b \\<in> A \\<Longrightarrow> r a b \\<longleftrightarrow> r' a b\"\n  shows \"total_quasi_ordered_set A r \\<longleftrightarrow> total_quasi_ordered_set A r'\"", "lemma total_ordered_subset: \"B \\<subseteq> A \\<Longrightarrow> total_ordered_set B (\\<sqsubseteq>)\"", "lemma total_ordered_set_cong:\n  assumes r: \"\\<And>a b. a \\<in> A \\<Longrightarrow> b \\<in> A \\<Longrightarrow> r a b \\<longleftrightarrow> r' a b\"\n  shows \"total_ordered_set A r \\<longleftrightarrow> total_ordered_set A r'\"", "lemma prefixed_Imagep_imp_empty:\n  assumes a: \"X \\<subseteq> ((\\<sqsubset>) ``` X) \\<inter> A\" shows \"X = {}\"", "lemma nonempty_imp_ex_extremal:\n  assumes QA: \"Q \\<subseteq> A\" and Q: \"Q \\<noteq> {}\"\n  shows \"\\<exists>z \\<in> Q. \\<forall>y \\<in> Q. \\<not> y \\<sqsubset> z\"", "lemmas Restrp_well_founded = Restrp.well_founded_axioms", "lemmas Restrp_induct[consumes 0, case_names less] = Restrp.induct", "lemmas Restrp_tranclp_well_founded = Restrp.tranclp.well_founded_axioms", "lemmas Restrp_tranclp_induct[consumes 0, case_names less] = Restrp.tranclp.induct", "lemma well_foundedI_pf:\n  assumes pre: \"\\<And>X. X \\<subseteq> A \\<Longrightarrow> X \\<subseteq> ((\\<sqsubset>) ``` X) \\<inter> A \\<Longrightarrow> X = {}\"\n  shows \"well_founded A (\\<sqsubset>)\"", "lemma well_foundedI_extremal:\n  assumes a: \"\\<And>X. X \\<subseteq> A \\<Longrightarrow> X \\<noteq> {} \\<Longrightarrow> \\<exists>x \\<in> X. \\<forall>y \\<in> X. \\<not> y \\<sqsubset> x\"\n  shows \"well_founded A (\\<sqsubset>)\"", "lemma well_founded_iff_ex_extremal:\n  \"well_founded A (\\<sqsubset>) \\<longleftrightarrow> (\\<forall>X \\<subseteq> A. X \\<noteq> {} \\<longrightarrow> (\\<exists>x \\<in> X. \\<forall>z \\<in> X. \\<not> z \\<sqsubset> x))\"", "lemma well_founded_cong:\n  assumes r: \"\\<And>a b. a \\<in> A \\<Longrightarrow> b \\<in> A \\<Longrightarrow> r a b \\<longleftrightarrow> r' a b\"\n    and A: \"\\<And>a b. r' a b \\<Longrightarrow> a \\<in> A \\<longleftrightarrow> a \\<in> A'\"\n    and B: \"\\<And>a b. r' a b \\<Longrightarrow> b \\<in> A \\<longleftrightarrow> b \\<in> A'\"\n  shows \"well_founded A r \\<longleftrightarrow> well_founded A' r'\"", "lemma wfP_iff_well_founded_UNIV: \"wfP r \\<longleftrightarrow> well_founded UNIV r\"", "lemma well_founded_singleton:\n  assumes \"\\<not>r x x\" shows \"well_founded {x} r\"", "lemma well_founded_Restrp[simp]: \"well_founded A (r\\<restriction>B) \\<longleftrightarrow> well_founded (A\\<inter>B) r\" (is \"?l \\<longleftrightarrow> ?r\")", "lemma (in well_founded) well_founded_subset:\n  assumes \"B \\<subseteq> A\" shows \"well_founded B (\\<sqsubset>)\"", "lemma well_founded_extend:\n  fixes less (infix \"\\<sqsubset>\" 50)\n  assumes A: \"well_founded A (\\<sqsubset>)\"\n  assumes B: \"well_founded B (\\<sqsubset>)\"\n  assumes AB: \"\\<forall>a \\<in> A. \\<forall>b \\<in> B. \\<not>b \\<sqsubset> a\"\n  shows \"well_founded (A \\<union> B) (\\<sqsubset>)\"", "lemma closed_UN_well_founded:\n  fixes r (infix \"\\<sqsubset>\" 50)\n  assumes XX: \"\\<forall>X\\<in>XX. well_founded X (\\<sqsubset>) \\<and> (\\<forall>x\\<in>X. \\<forall>y\\<in>\\<Union>XX. y \\<sqsubset> x \\<longrightarrow> y \\<in> X)\"\n  shows \"well_founded (\\<Union>XX) (\\<sqsubset>)\"", "lemma well_founded_cmono:\n  assumes r': \"r' \\<le> r\" and wf: \"well_founded A r\"\n  shows \"well_founded A r'\"", "lemma Restrp_well_founded_order: \"well_founded_ordered_set UNIV ((\\<sqsubset>)\\<restriction>A)\"", "lemma well_founded_ordered_subset: \"B \\<subseteq> A \\<Longrightarrow> well_founded_ordered_set B (\\<sqsubset>)\"", "lemma (in well_founded) Restrp_tranclp_well_founded_ordered: \"well_founded_ordered_set UNIV ((\\<sqsubset>)\\<restriction>A)\\<^sup>+\\<^sup>+\"", "lemmas connex_axioms = connex_axioms", "lemma well_related_subset: \"B \\<subseteq> A \\<Longrightarrow> well_related_set B (\\<sqsubseteq>)\"", "lemma well_related_iff_neg_well_founded:\n  \"well_related_set A (\\<sqsubseteq>) \\<longleftrightarrow> well_founded A (\\<lambda>x y. \\<not> y \\<sqsubseteq> x)\"", "lemma well_related_singleton_refl: \n  assumes \"x \\<sqsubseteq> x\" shows \"well_related_set {x} (\\<sqsubseteq>)\"", "lemma closed_UN_well_related:\n  assumes XX: \"\\<forall>X\\<in>XX. well_related_set X (\\<sqsubseteq>) \\<and> (\\<forall>x\\<in>X. \\<forall>y\\<in>\\<Union>XX. \\<not>x \\<sqsubseteq> y \\<longrightarrow> y \\<in> X)\"\n  shows \"well_related_set (\\<Union>XX) (\\<sqsubseteq>)\"", "lemma well_related_extend:\n  fixes r (infix \"\\<sqsubseteq>\" 50)\n  assumes \"well_related_set A (\\<sqsubseteq>)\" and \"well_related_set B (\\<sqsubseteq>)\" and \"\\<forall>a \\<in> A. \\<forall>b \\<in> B. a \\<sqsubseteq> b\"\n  shows \"well_related_set (A \\<union> B) (\\<sqsubseteq>)\"", "lemmas connex_axioms = connex_axioms", "lemma strict_weak_trans[trans]:\n  assumes xy: \"x \\<sqsubset> y\" and yz: \"y \\<sqsubseteq> z\" and x: \"x \\<in> A\" and y: \"y \\<in> A\" and z: \"z \\<in> A\"\n  shows \"x \\<sqsubset> z\"", "lemma weak_strict_trans[trans]:\n  assumes xy: \"x \\<sqsubseteq> y\" and yz: \"y \\<sqsubset> z\" and x: \"x \\<in> A\" and y: \"y \\<in> A\" and z: \"z \\<in> A\"\n  shows \"x \\<sqsubset> z\"", "lemma pre_well_ordered_iff:\n  \"pre_well_ordered_set A r \\<longleftrightarrow> total_quasi_ordered_set A r \\<and> well_founded A (asympartp r)\"\n  (is \"?p \\<longleftrightarrow> ?t \\<and> ?w\")", "lemma (in semiattractive) pre_well_ordered_iff_well_related:\n  assumes XA: \"X \\<subseteq> A\"\n  shows \"pre_well_ordered_set X (\\<sqsubseteq>) \\<longleftrightarrow> well_related_set X (\\<sqsubseteq>)\" (is \"?l \\<longleftrightarrow> ?r\")", "lemma semiattractive_extend:\n  fixes r (infix \"\\<sqsubseteq>\" 50)\n  assumes A: \"semiattractive A (\\<sqsubseteq>)\" and B: \"semiattractive B (\\<sqsubseteq>)\"\n    and AB: \"\\<forall>a \\<in> A. \\<forall>b \\<in> B. a \\<sqsubseteq> b \\<and> \\<not> b \\<sqsubseteq> a\"\n  shows \"semiattractive (A \\<union> B) (\\<sqsubseteq>)\"", "lemma pre_well_order_extend:\n  fixes r (infix \"\\<sqsubseteq>\" 50)\n  assumes A: \"pre_well_ordered_set A (\\<sqsubseteq>)\" and B: \"pre_well_ordered_set B (\\<sqsubseteq>)\"\n    and AB: \"\\<forall>a \\<in> A. \\<forall>b \\<in> B. a \\<sqsubseteq> b \\<and> \\<not> b \\<sqsubseteq> a\"\n  shows \"pre_well_ordered_set (A\\<union>B) (\\<sqsubseteq>)\"", "lemma well_ordered_subset: \"B \\<subseteq> A \\<Longrightarrow> well_ordered_set B (\\<sqsubseteq>)\"", "lemmas connex_axioms = connex_axioms", "lemma (in antisymmetric) well_ordered_iff_well_related:\n  assumes XA: \"X \\<subseteq> A\"\n  shows \"well_ordered_set X (\\<sqsubseteq>) \\<longleftrightarrow> well_related_set X (\\<sqsubseteq>)\" (is \"?l \\<longleftrightarrow> ?r\")", "lemmas trivial_well_related = well_related_set_axioms", "lemma trivial_pre_well_order: \"pre_well_ordered_set A (\\<sqsubseteq>)\"", "lemma well_order_extend:\n  assumes A: \"well_ordered_set A (\\<sqsubseteq>)\" and B: \"well_ordered_set B (\\<sqsubseteq>)\"\n    and ABa: \"\\<forall>a \\<in> A. \\<forall>b \\<in> B. a \\<sqsubseteq> b \\<longrightarrow> b \\<sqsubseteq> a \\<longrightarrow> a = b\"\n    and AB: \"\\<forall>a \\<in> A. \\<forall>b \\<in> B. a \\<sqsubseteq> b\"\n  shows \"well_ordered_set (A\\<union>B) (\\<sqsubseteq>)\"", "lemmas singleton_antisymmetric[intro!] = singleton.antisymmetric_axioms", "lemma singleton_well_ordered[intro!]: \"a \\<sqsubseteq> a \\<Longrightarrow> well_ordered_set {a} (\\<sqsubseteq>)\"", "lemma closed_UN_well_ordered:\n  assumes anti: \"antisymmetric (\\<Union> XX) (\\<sqsubseteq>)\"\n    and XX: \"\\<forall>X\\<in>XX. well_ordered_set X (\\<sqsubseteq>) \\<and> (\\<forall>x\\<in>X. \\<forall>y\\<in>\\<Union>XX. \\<not> x \\<sqsubseteq> y \\<longrightarrow> y \\<in> X)\"\n  shows \"well_ordered_set (\\<Union>XX) (\\<sqsubseteq>)\"", "lemmas directedI[intro] = directed_def[unfolded atomize_eq, THEN iffD2, rule_format]", "lemmas directedD = directed_def[unfolded atomize_eq, THEN iffD1, rule_format]", "lemma directedE:\n  assumes \"directed A (\\<sqsubseteq>)\" and \"x \\<in> A\" and \"y \\<in> A\"\n    and \"\\<And>z. z \\<in> A \\<Longrightarrow> x \\<sqsubseteq> z \\<Longrightarrow> y \\<sqsubseteq> z \\<Longrightarrow> thesis\"\n  shows \"thesis\"", "lemma directed_empty[simp]: \"directed {} (\\<sqsubseteq>)\"", "lemma directed_union:\n  assumes dX: \"directed X (\\<sqsubseteq>)\" and dY: \"directed Y (\\<sqsubseteq>)\"\n    and XY: \"\\<forall>x\\<in>X. \\<forall>y\\<in>Y. \\<exists>z \\<in> X \\<union> Y. x \\<sqsubseteq> z \\<and> y \\<sqsubseteq> z\"\n  shows \"directed (X \\<union> Y) (\\<sqsubseteq>)\"", "lemma directed_extend:\n  assumes X: \"directed X (\\<sqsubseteq>)\" and Y: \"directed Y (\\<sqsubseteq>)\" and XY: \"\\<forall>x\\<in>X. \\<forall>y\\<in>Y. x \\<sqsubseteq> y\"\n  shows \"directed (X \\<union> Y) (\\<sqsubseteq>)\"", "lemma directed: \"directed A (\\<sqsubseteq>)\"", "lemma monotone_connex_image:\n  assumes mono: \"monotone_on I (\\<preceq>) (\\<sqsubseteq>) f\"\n  assumes connex: \"connex I (\\<preceq>)\"\n  shows \"connex (f ` I) (\\<sqsubseteq>)\"", "lemma monotone_directed_image:\n  assumes mono: \"monotone_on I (\\<preceq>) (\\<sqsubseteq>) f\"\n  assumes dir: \"directed I (\\<preceq>)\" shows \"directed (f ` I) (\\<sqsubseteq>)\"", "lemma strict_implies_not_weak: \"x \\<sqsubset> y \\<Longrightarrow> x \\<in> A \\<Longrightarrow> y \\<in> A \\<Longrightarrow> \\<not> y \\<sqsubseteq> x\"", "lemma asym_trans[trans]:\n  shows \"x \\<sqsubset> y \\<Longrightarrow> y \\<sqsubseteq> z \\<Longrightarrow> x \\<in> A \\<Longrightarrow> y \\<in> A \\<Longrightarrow> z \\<in> A \\<Longrightarrow> x \\<sqsubset> z\"\n    and \"x \\<sqsubseteq> y \\<Longrightarrow> y \\<sqsubset> z \\<Longrightarrow> x \\<in> A \\<Longrightarrow> y \\<in> A \\<Longrightarrow> z \\<in> A \\<Longrightarrow> x \\<sqsubset> z\"", "lemma not_weak[simp]:\n  assumes \"x \\<in> A\" and \"y \\<in> A\" shows \"\\<not> x \\<sqsubseteq> y \\<longleftrightarrow> y \\<sqsubset> x\"", "lemma not_strict[simp]: \"x \\<in> A \\<Longrightarrow> y \\<in> A \\<Longrightarrow> \\<not> x \\<sqsubset> y \\<longleftrightarrow> y \\<sqsubseteq> x\"", "lemma Least_eq_The_least: \"Least P = The (least {x. P x})\"", "lemma Greatest_eq_The_greatest: \"Greatest P = The (greatest {x. P x})\"", "lemma Ball_UNIV[simp]: \"Ball UNIV = All\"", "lemma Bex_UNIV[simp]: \"Bex UNIV = Ex\"", "lemma(in antisymmetric) monotone_extreme_imp_extreme_bound_iff:\n  fixes ir (infix \"\\<preceq>\" 50)\n  assumes \"f ` C \\<subseteq> A\" and \"monotone_on C (\\<preceq>) (\\<sqsubseteq>) f\" and i: \"extreme C (\\<preceq>) i\"\n  shows \"extreme_bound A (\\<sqsubseteq>) (f ` C) x \\<longleftrightarrow> f i = x\""], "translations": [["", "lemma conj_imp_eq_imp_imp: \"(P \\<and> Q \\<Longrightarrow> PROP R) \\<equiv> (P \\<Longrightarrow> Q \\<Longrightarrow> PROP R)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (P \\<and> Q \\<Longrightarrow> PROP R) \\<equiv>\n    (\\<lbrakk>P; Q\\<rbrakk> \\<Longrightarrow> PROP R)", "by standard simp_all"], ["", "lemma tranclp_trancl: \"r\\<^sup>+\\<^sup>+ = (\\<lambda>x y. (x,y) \\<in> {(a,b). r a b}\\<^sup>+)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r\\<^sup>+\\<^sup>+ = (\\<lambda>x y. (x, y) \\<in> {(a, b). r a b}\\<^sup>+)", "by (auto simp: tranclp_trancl_eq[symmetric])"], ["", "lemma tranclp_id[simp]: \"transp r \\<Longrightarrow> tranclp r = r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. transp r \\<Longrightarrow> r\\<^sup>+\\<^sup>+ = r", "using trancl_id[of \"{(x,y). r x y}\", folded transp_trans]"], ["proof (prove)\nusing this:\n  transp r \\<Longrightarrow> {(x, y). r x y}\\<^sup>+ = {(x, y). r x y}\n\ngoal (1 subgoal):\n 1. transp r \\<Longrightarrow> r\\<^sup>+\\<^sup>+ = r", "by (auto simp:tranclp_trancl)"], ["", "lemma transp_tranclp[simp]: \"transp (tranclp r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. transp r\\<^sup>+\\<^sup>+", "by (auto simp: tranclp_trancl transp_trans)"], ["", "lemma funpow_dom: \"f ` A \\<subseteq> A \\<Longrightarrow> (f^^n) ` A \\<subseteq> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f ` A \\<subseteq> A \\<Longrightarrow> (f ^^ n) ` A \\<subseteq> A", "by (induct n, auto)"], ["", "text \\<open>Below we introduce an Isabelle-notation for $\\{ \\ldots x\\ldots \\mid x \\in X \\}$.\\<close>"], ["", "syntax\n  \"_range\" :: \"'a \\<Rightarrow> idts \\<Rightarrow> 'a set\" (\"(1{_ /|./ _})\")\n  \"_image\" :: \"'a \\<Rightarrow> pttrn \\<Rightarrow> 'a set \\<Rightarrow> 'a set\"  (\"(1{_ /|./ (_/ \\<in> _)})\")"], ["", "translations\n  \"{e |. p}\" \\<rightleftharpoons> \"{e | p. CONST True}\"\n  \"{e |. p \\<in> A}\" \\<rightleftharpoons> \"CONST image (\\<lambda>p. e) A\""], ["", "lemma image_constant:\n  assumes \"\\<And>i. i \\<in> I \\<Longrightarrow> f i = y\"\n  shows \"f ` I = (if I = {} then {} else {y})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f ` I = (if I = {} then {} else {y})", "using assms"], ["proof (prove)\nusing this:\n  ?i \\<in> I \\<Longrightarrow> f ?i = y\n\ngoal (1 subgoal):\n 1. f ` I = (if I = {} then {} else {y})", "by auto"], ["", "subsection \\<open>Various Definitions\\<close>"], ["", "text \\<open>Here we introduce various definitions for binary relations.\nThe first one is our abbreviation for the dual of a relation.\\<close>"], ["", "abbreviation(input) dual (\"(_\\<^sup>-)\" [1000] 1000) where \"r\\<^sup>- x y \\<equiv> r y x\""], ["", "lemma conversep_is_dual[simp]: \"conversep = dual\""], ["proof (prove)\ngoal (1 subgoal):\n 1. conversep = (\\<lambda>r x y. r y x)", "by auto"], ["", "text \\<open>Monotonicity is already defined in the library, but we want one restricted to a domain.\\<close>"], ["", "definition \"monotone_on X r s f \\<equiv> \\<forall>x y. x \\<in> X \\<longrightarrow> y \\<in> X \\<longrightarrow> r x y \\<longrightarrow> s (f x) (f y)\""], ["", "lemmas monotone_onI = monotone_on_def[unfolded atomize_eq, THEN iffD2, rule_format]"], ["", "lemma monotone_onD: \"monotone_on X r s f \\<Longrightarrow> r x y \\<Longrightarrow> x \\<in> X \\<Longrightarrow> y \\<in> X \\<Longrightarrow> s (f x) (f y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>monotone_on X r s f; r x y; x \\<in> X; y \\<in> X\\<rbrakk>\n    \\<Longrightarrow> s (f x) (f y)", "by (auto simp: monotone_on_def)"], ["", "lemmas monotone_onE = monotone_on_def[unfolded atomize_eq, THEN iffD1, elim_format, rule_format]"], ["", "lemma monotone_on_UNIV[simp]: \"monotone_on UNIV = monotone\""], ["proof (prove)\ngoal (1 subgoal):\n 1. monotone_on UNIV = monotone", "by (intro ext, auto simp: monotone_on_def monotone_def)"], ["", "lemma monotone_on_dual: \"monotone_on X r s f \\<Longrightarrow> monotone_on X r\\<^sup>- s\\<^sup>- f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. monotone_on X r s f \\<Longrightarrow>\n    monotone_on X (\\<lambda>x y. r y x) (\\<lambda>x y. s y x) f", "by (auto simp: monotone_on_def)"], ["", "lemma monotone_on_id: \"monotone_on X r r id\""], ["proof (prove)\ngoal (1 subgoal):\n 1. monotone_on X r r id", "by (auto simp: monotone_on_def)"], ["", "lemma monotone_on_cmono: \"A \\<subseteq> B \\<Longrightarrow> monotone_on B \\<le> monotone_on A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<subseteq> B \\<Longrightarrow> monotone_on B \\<le> monotone_on A", "by (intro le_funI, auto simp: monotone_on_def)"], ["", "text \\<open>Here we define the following notions in a standard manner\\<close>"], ["", "text \\<open>The symmetric part of a relation:\\<close>"], ["", "definition sympartp where \"sympartp r x y \\<equiv> r x y \\<and> r y x\""], ["", "lemma sympartpI[intro]:\n  fixes r (infix \"\\<sqsubseteq>\" 50)\n  assumes \"x \\<sqsubseteq> y\" and \"y \\<sqsubseteq> x\" shows \"sympartp (\\<sqsubseteq>) x y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sympartp (\\<sqsubseteq>) x y", "using assms"], ["proof (prove)\nusing this:\n  x \\<sqsubseteq> y\n  y \\<sqsubseteq> x\n\ngoal (1 subgoal):\n 1. sympartp (\\<sqsubseteq>) x y", "by (auto simp: sympartp_def)"], ["", "lemma sympartpE[elim]:\n  fixes r (infix \"\\<sqsubseteq>\" 50)\n  assumes \"sympartp (\\<sqsubseteq>) x y\" and \"x \\<sqsubseteq> y \\<Longrightarrow> y \\<sqsubseteq> x \\<Longrightarrow> thesis\" shows thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. thesis", "using assms"], ["proof (prove)\nusing this:\n  sympartp (\\<sqsubseteq>) x y\n  \\<lbrakk>x \\<sqsubseteq> y; y \\<sqsubseteq> x\\<rbrakk>\n  \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. thesis", "by (auto simp: sympartp_def)"], ["", "lemma sympartp_dual: \"sympartp r\\<^sup>- = sympartp r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sympartp (\\<lambda>x y. r y x) = sympartp r", "by (auto intro!:ext simp: sympartp_def)"], ["", "lemma sympartp_eq[simp]: \"sympartp (=) = (=)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sympartp (=) = (=)", "by auto"], ["", "lemma reflclp_sympartp[simp]: \"(sympartp r)\\<^sup>=\\<^sup>= = sympartp r\\<^sup>=\\<^sup>=\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (sympartp r)\\<^sup>=\\<^sup>= = sympartp r\\<^sup>=\\<^sup>=", "by auto"], ["", "definition \"equivpartp r x y \\<equiv> x = y \\<or> r x y \\<and> r y x\""], ["", "lemma sympartp_reflclp_equivp[simp]: \"sympartp r\\<^sup>=\\<^sup>= = equivpartp r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sympartp r\\<^sup>=\\<^sup>= = equivpartp r", "by (auto intro!:ext simp: equivpartp_def)"], ["", "lemma equivpartI[simp]: \"equivpartp r x x\"\n  and sympartp_equivpartpI: \"sympartp r x y \\<Longrightarrow> equivpartp r x y\"\n  and equivpartpCI[intro]: \"(x \\<noteq> y \\<Longrightarrow> sympartp r x y) \\<Longrightarrow> equivpartp r x y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. equivpartp r x x &&&\n    (sympartp r x y \\<Longrightarrow> equivpartp r x y) &&&\n    ((x \\<noteq> y \\<Longrightarrow> sympartp r x y) \\<Longrightarrow>\n     equivpartp r x y)", "by (auto simp:equivpartp_def)"], ["", "lemma equivpartpE[elim]:\n  assumes \"equivpartp r x y\"\n    and \"x = y \\<Longrightarrow> thesis\"\n    and \"r x y \\<Longrightarrow> r y x \\<Longrightarrow> thesis\"\n  shows \"thesis\""], ["proof (prove)\ngoal (1 subgoal):\n 1. thesis", "using assms"], ["proof (prove)\nusing this:\n  equivpartp r x y\n  x = y \\<Longrightarrow> thesis\n  \\<lbrakk>r x y; r y x\\<rbrakk> \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. thesis", "by (auto simp: equivpartp_def)"], ["", "lemma equivpartp_eq[simp]: \"equivpartp (=) = (=)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. equivpartp (=) = (=)", "by auto"], ["", "lemma sympartp_equivpartp[simp]: \"sympartp (equivpartp r) = (equivpartp r)\"\n  and equivpartp_equivpartp[simp]: \"equivpartp (equivpartp r) = (equivpartp r)\"\n  and equivpartp_sympartp[simp]: \"equivpartp (sympartp r) = (equivpartp r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sympartp (equivpartp r) = equivpartp r &&&\n    equivpartp (equivpartp r) = equivpartp r &&&\n    equivpartp (sympartp r) = equivpartp r", "by (auto 0 5 intro!:ext)"], ["", "lemma equivpartp_dual: \"equivpartp r\\<^sup>- = equivpartp r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. equivpartp (\\<lambda>x y. r y x) = equivpartp r", "by (auto intro!:ext simp: equivpartp_def)"], ["", "text \\<open>The asymmetric part:\\<close>"], ["", "definition \"asympartp r x y \\<equiv> r x y \\<and> \\<not> r y x\""], ["", "lemma asympartpE[elim]:\n  fixes r (infix \"\\<sqsubseteq>\" 50)\n  shows \"asympartp (\\<sqsubseteq>) x y \\<Longrightarrow> (x \\<sqsubseteq> y \\<Longrightarrow> \\<not>y \\<sqsubseteq> x \\<Longrightarrow> thesis) \\<Longrightarrow> thesis\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>asympartp (\\<sqsubseteq>) x y;\n     \\<lbrakk>x \\<sqsubseteq> y; \\<not> y \\<sqsubseteq> x\\<rbrakk>\n     \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "by (auto simp: asympartp_def)"], ["", "lemmas asympartpI[intro] = asympartp_def[unfolded atomize_eq, THEN iffD2, unfolded conj_imp_eq_imp_imp, rule_format]"], ["", "lemma asympartp_eq[simp]: \"asympartp (=) = bot\""], ["proof (prove)\ngoal (1 subgoal):\n 1. asympartp (=) = bot", "by auto"], ["", "lemma asympartp_sympartp [simp]: \"asympartp (sympartp r) = bot\"\n  and sympartp_asympartp [simp]: \"sympartp (asympartp r) = bot\""], ["proof (prove)\ngoal (1 subgoal):\n 1. asympartp (sympartp r) = bot &&& sympartp (asympartp r) = bot", "by (auto intro!: ext)"], ["", "text \\<open>Restriction to a set:\\<close>"], ["", "definition Restrp (infixl \"\\<restriction>\" 60) where \"(r \\<restriction> A) a b \\<equiv> a \\<in> A \\<and> b \\<in> A \\<and> r a b\""], ["", "lemmas RestrpI[intro!] = Restrp_def[unfolded atomize_eq, THEN iffD2, unfolded conj_imp_eq_imp_imp]"], ["", "lemmas RestrpE[elim!] = Restrp_def[unfolded atomize_eq, THEN iffD1, elim_format, unfolded conj_imp_eq_imp_imp]"], ["", "lemma Restrp_UNIV[simp]: \"r \\<restriction> UNIV \\<equiv> r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r \\<restriction> UNIV \\<equiv> r", "by (auto simp: atomize_eq)"], ["", "lemma Restrp_Restrp[simp]: \"r \\<restriction> A \\<restriction> B \\<equiv> r \\<restriction> A \\<inter> B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r \\<restriction> A \\<restriction> B \\<equiv>\n    r \\<restriction> A \\<inter> B", "by (auto simp: atomize_eq Restrp_def)"], ["", "lemma sympartp_Restrp[simp]: \"sympartp (r \\<restriction> A) \\<equiv> sympartp r \\<restriction> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sympartp (r \\<restriction> A) \\<equiv> sympartp r \\<restriction> A", "by (auto simp: atomize_eq)"], ["", "text \\<open>Relational images:\\<close>"], ["", "definition Imagep (infixr \"```\" 59) where \"r ``` A \\<equiv> {b. \\<exists>a \\<in> A. r a b}\""], ["", "lemma Imagep_Image: \"r ``` A = {(a,b). r a b} `` A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r ``` A = {(a, b). r a b} `` A", "by (auto simp: Imagep_def)"], ["", "lemma in_Imagep: \"b \\<in> r ``` A \\<longleftrightarrow> (\\<exists>a \\<in> A. r a b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (b \\<in> r ``` A) = (\\<exists>a\\<in>A. r a b)", "by (auto simp: Imagep_def)"], ["", "lemma ImagepI: \"a \\<in> A \\<Longrightarrow> r a b \\<Longrightarrow> b \\<in> r ``` A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> A; r a b\\<rbrakk> \\<Longrightarrow> b \\<in> r ``` A", "by (auto simp: in_Imagep)"], ["", "lemma subset_Imagep: \"B \\<subseteq> r ``` A \\<longleftrightarrow> (\\<forall>b\\<in>B. \\<exists>a\\<in>A. r a b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (B \\<subseteq> r ``` A) = (\\<forall>b\\<in>B. \\<exists>a\\<in>A. r a b)", "by (auto simp: Imagep_def)"], ["", "text \\<open>Bounds of a set:\\<close>"], ["", "definition \"bound X r b \\<equiv> \\<forall>x \\<in> X. r x b\""], ["", "lemma\n  fixes r (infix \"\\<sqsubseteq>\" 50)\n  shows boundI[intro!]: \"(\\<And>x. x \\<in> X \\<Longrightarrow> x \\<sqsubseteq> b) \\<Longrightarrow> bound X (\\<sqsubseteq>) b\"\n    and boundE[elim]: \"bound X (\\<sqsubseteq>) b \\<Longrightarrow> ((\\<And>x. x \\<in> X \\<Longrightarrow> x \\<sqsubseteq> b) \\<Longrightarrow> thesis) \\<Longrightarrow> thesis\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<And>x.\n         x \\<in> X \\<Longrightarrow> x \\<sqsubseteq> b) \\<Longrightarrow>\n     bound X (\\<sqsubseteq>) b) &&&\n    (\\<lbrakk>bound X (\\<sqsubseteq>) b;\n      (\\<And>x.\n          x \\<in> X \\<Longrightarrow> x \\<sqsubseteq> b) \\<Longrightarrow>\n      thesis\\<rbrakk>\n     \\<Longrightarrow> thesis)", "by (auto simp: bound_def)"], ["", "lemma bound_empty: \"bound {} = (\\<lambda>r x. True)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bound {} = (\\<lambda>r x. True)", "by auto"], ["", "lemma bound_insert[simp]:\n  fixes r (infix \"\\<sqsubseteq>\" 50)\n  shows \"bound (insert x X) (\\<sqsubseteq>) b \\<longleftrightarrow> x \\<sqsubseteq> b \\<and> bound X (\\<sqsubseteq>) b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bound (insert x X) (\\<sqsubseteq>) b =\n    (x \\<sqsubseteq> b \\<and> bound X (\\<sqsubseteq>) b)", "by auto"], ["", "text \\<open>Extreme (greatest) elements in a set:\\<close>"], ["", "definition \"extreme X r e \\<equiv> e \\<in> X \\<and> (\\<forall>x \\<in> X. r x e)\""], ["", "lemma\n  fixes r (infix \"\\<sqsubseteq>\" 50)\n  shows extremeI[intro]: \"e \\<in> X \\<Longrightarrow> (\\<And>x. x \\<in> X \\<Longrightarrow> x \\<sqsubseteq> e) \\<Longrightarrow> extreme X (\\<sqsubseteq>) e\"\n    and extremeD: \"extreme X (\\<sqsubseteq>) e \\<Longrightarrow> e \\<in> X\" \"extreme X (\\<sqsubseteq>) e \\<Longrightarrow> (\\<And>x. x \\<in> X \\<Longrightarrow> x \\<sqsubseteq> e)\"\n    and extremeE[elim]: \"extreme X (\\<sqsubseteq>) e \\<Longrightarrow> (e \\<in> X \\<Longrightarrow> (\\<And>x. x \\<in> X \\<Longrightarrow> x \\<sqsubseteq> e) \\<Longrightarrow> thesis) \\<Longrightarrow> thesis\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lbrakk>e \\<in> X;\n      \\<And>x. x \\<in> X \\<Longrightarrow> x \\<sqsubseteq> e\\<rbrakk>\n     \\<Longrightarrow> extreme X (\\<sqsubseteq>) e) &&&\n    ((extreme X (\\<sqsubseteq>) e \\<Longrightarrow> e \\<in> X) &&&\n     (extreme X (\\<sqsubseteq>) e \\<Longrightarrow>\n      (\\<And>x. x \\<in> X \\<Longrightarrow> x \\<sqsubseteq> e))) &&&\n    (\\<lbrakk>extreme X (\\<sqsubseteq>) e;\n      \\<lbrakk>e \\<in> X;\n       \\<And>x. x \\<in> X \\<Longrightarrow> x \\<sqsubseteq> e\\<rbrakk>\n      \\<Longrightarrow> thesis\\<rbrakk>\n     \\<Longrightarrow> thesis)", "by (auto simp: extreme_def)"], ["", "lemma\n  fixes r (infix \"\\<sqsubseteq>\" 50)\n  shows extreme_UNIV[simp]: \"extreme UNIV (\\<sqsubseteq>) t \\<longleftrightarrow> (\\<forall>x. x \\<sqsubseteq> t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. extreme UNIV (\\<sqsubseteq>) t = (\\<forall>x. x \\<sqsubseteq> t)", "by auto"], ["", "lemma extremes_equiv: \"extreme X r b \\<Longrightarrow> extreme X r c \\<Longrightarrow> sympartp r b c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>extreme X r b; extreme X r c\\<rbrakk>\n    \\<Longrightarrow> sympartp r b c", "by blast"], ["", "lemma bound_cmono: assumes \"X \\<subseteq> Y\" shows \"bound Y \\<le> bound X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bound Y \\<le> bound X", "using assms"], ["proof (prove)\nusing this:\n  X \\<subseteq> Y\n\ngoal (1 subgoal):\n 1. bound Y \\<le> bound X", "by auto"], ["", "lemma sympartp_sympartp[simp]: \"sympartp (sympartp r) = sympartp r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sympartp (sympartp r) = sympartp r", "by (auto intro!:ext)"], ["", "text \\<open>Now suprema and infima are given uniformly as follows.\n  The definition is restricted to a given set.\n\\<close>"], ["", "context\n  fixes A :: \"'a set\" and less_eq :: \"'a \\<Rightarrow> 'a \\<Rightarrow> bool\" (infix \"\\<sqsubseteq>\" 50)\nbegin"], ["", "abbreviation \"extreme_bound X \\<equiv> extreme {b \\<in> A. bound X (\\<sqsubseteq>) b} (\\<lambda>x y. y \\<sqsubseteq> x)\""], ["", "lemma extreme_boundI[intro]:\n  assumes \"\\<And>b. bound X (\\<sqsubseteq>) b \\<Longrightarrow> b \\<in> A \\<Longrightarrow> s \\<sqsubseteq> b\" and \"\\<And>x. x \\<in> X \\<Longrightarrow> x \\<sqsubseteq> s\" and \"s \\<in> A\"\n  shows \"extreme_bound X s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.extreme_bound X s", "using assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>bound X (\\<sqsubseteq>) ?b; ?b \\<in> A\\<rbrakk>\n  \\<Longrightarrow> s \\<sqsubseteq> ?b\n  ?x \\<in> X \\<Longrightarrow> ?x \\<sqsubseteq> s\n  s \\<in> A\n\ngoal (1 subgoal):\n 1. local.extreme_bound X s", "by auto"], ["", "lemma extreme_bound_bound: \"extreme_bound X y \\<Longrightarrow> x \\<in> X \\<Longrightarrow> x \\<sqsubseteq> y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>local.extreme_bound X y; x \\<in> X\\<rbrakk>\n    \\<Longrightarrow> x \\<sqsubseteq> y", "by auto"], ["", "lemma extreme_bound_mono:\n  assumes XY: \"X \\<subseteq> Y\"\n    and sX: \"extreme_bound X sX\"\n    and sY: \"extreme_bound Y sY\"\n  shows \"sX \\<sqsubseteq> sY\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sX \\<sqsubseteq> sY", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. sX \\<sqsubseteq> sY", "have \"bound X (\\<sqsubseteq>) sY\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bound X (\\<sqsubseteq>) sY", "using XY sY"], ["proof (prove)\nusing this:\n  X \\<subseteq> Y\n  local.extreme_bound Y sY\n\ngoal (1 subgoal):\n 1. bound X (\\<sqsubseteq>) sY", "by force"], ["proof (state)\nthis:\n  bound X (\\<sqsubseteq>) sY\n\ngoal (1 subgoal):\n 1. sX \\<sqsubseteq> sY", "with sX sY"], ["proof (chain)\npicking this:\n  local.extreme_bound X sX\n  local.extreme_bound Y sY\n  bound X (\\<sqsubseteq>) sY", "show ?thesis"], ["proof (prove)\nusing this:\n  local.extreme_bound X sX\n  local.extreme_bound Y sY\n  bound X (\\<sqsubseteq>) sY\n\ngoal (1 subgoal):\n 1. sX \\<sqsubseteq> sY", "by (auto 0 4)"], ["proof (state)\nthis:\n  sX \\<sqsubseteq> sY\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma extreme_bound_iff:\n  shows \"extreme_bound X s \\<longleftrightarrow> s \\<in> A \\<and> (\\<forall>c \\<in> A. (\\<forall>x \\<in> X. x \\<sqsubseteq> c) \\<longrightarrow> s \\<sqsubseteq> c) \\<and> (\\<forall>x \\<in> X. x \\<sqsubseteq> s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.extreme_bound X s =\n    (s \\<in> A \\<and>\n     (\\<forall>c\\<in>A.\n         (\\<forall>x\\<in>X. x \\<sqsubseteq> c) \\<longrightarrow>\n         s \\<sqsubseteq> c) \\<and>\n     (\\<forall>x\\<in>X. x \\<sqsubseteq> s))", "by (auto simp: extreme_def)"], ["", "lemma extreme_bound_singleton_refl[simp]:\n  \"extreme_bound {x} x \\<longleftrightarrow> x \\<in> A \\<and> x \\<sqsubseteq> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.extreme_bound {x} x = (x \\<in> A \\<and> x \\<sqsubseteq> x)", "by auto"], ["", "lemma extreme_bound_image_const:\n  \"x \\<sqsubseteq> x \\<Longrightarrow> I \\<noteq> {} \\<Longrightarrow> (\\<And>i. i \\<in> I \\<Longrightarrow> f i = x) \\<Longrightarrow> x \\<in> A \\<Longrightarrow> extreme_bound (f ` I) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<sqsubseteq> x; I \\<noteq> {};\n     \\<And>i. i \\<in> I \\<Longrightarrow> f i = x; x \\<in> A\\<rbrakk>\n    \\<Longrightarrow> local.extreme_bound (f ` I) x", "by (auto simp: image_constant)"], ["", "lemma extreme_bound_UN_const:\n  \"x \\<sqsubseteq> x \\<Longrightarrow> I \\<noteq> {} \\<Longrightarrow> (\\<And>i y. i \\<in> I \\<Longrightarrow> P i y \\<longleftrightarrow> x = y) \\<Longrightarrow> x \\<in> A \\<Longrightarrow>\n  extreme_bound (\\<Union>i\\<in>I. {y. P i y}) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<sqsubseteq> x; I \\<noteq> {};\n     \\<And>i y. i \\<in> I \\<Longrightarrow> P i y = (x = y);\n     x \\<in> A\\<rbrakk>\n    \\<Longrightarrow> local.extreme_bound (\\<Union>i\\<in>I. {y. P i y}) x", "by auto"], ["", "end"], ["", "context\n  fixes ir :: \"'i \\<Rightarrow> 'i \\<Rightarrow> bool\" (infix \"\\<preceq>\" 50)\n    and r :: \"'a \\<Rightarrow> 'a \\<Rightarrow> bool\" (infix \"\\<sqsubseteq>\" 50)\n    and f and A and e and I\n  assumes fIA: \"f ` I \\<subseteq> A\"\n    and mono: \"monotone_on I (\\<preceq>) (\\<sqsubseteq>) f\"\n    and e: \"extreme I (\\<preceq>) e\"\nbegin"], ["", "lemma monotone_extreme_imp_extreme_bound:\n  \"extreme_bound A (\\<sqsubseteq>) (f ` I) (f e)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. extreme_bound A (\\<sqsubseteq>) (f ` I) (f e)", "using monotone_onD[OF mono] e fIA"], ["proof (prove)\nusing this:\n  \\<lbrakk>?x \\<preceq> ?y; ?x \\<in> I; ?y \\<in> I\\<rbrakk>\n  \\<Longrightarrow> f ?x \\<sqsubseteq> f ?y\n  extreme I (\\<preceq>) e\n  f ` I \\<subseteq> A\n\ngoal (1 subgoal):\n 1. extreme_bound A (\\<sqsubseteq>) (f ` I) (f e)", "by (intro extreme_boundI, auto simp: image_def elim!: extremeE)"], ["", "lemma monotone_extreme_extreme_boundI:\n  \"x = f e \\<Longrightarrow> extreme_bound A (\\<sqsubseteq>) (f ` I) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x = f e \\<Longrightarrow> extreme_bound A (\\<sqsubseteq>) (f ` I) x", "using monotone_extreme_imp_extreme_bound"], ["proof (prove)\nusing this:\n  extreme_bound A (\\<sqsubseteq>) (f ` I) (f e)\n\ngoal (1 subgoal):\n 1. x = f e \\<Longrightarrow> extreme_bound A (\\<sqsubseteq>) (f ` I) x", "by auto"], ["", "end"], ["", "subsection \\<open>Locales for Binary Relations\\<close>"], ["", "text \\<open>We now define basic properties of binary relations,\nin form of \\emph{locales}~\\cite{Kammuller00,locale}.\\<close>"], ["", "subsubsection \\<open>Syntactic Locales\\<close>"], ["", "text \\<open>The following locales do not assume anything, but provide infix notations for\nrelations.\\<close>"], ["", "locale less_eq_syntax =\n  fixes less_eq :: \"'a \\<Rightarrow> 'a \\<Rightarrow> bool\" (infix \"\\<sqsubseteq>\" 50)"], ["", "locale less_syntax =\n  fixes less :: \"'a \\<Rightarrow> 'a \\<Rightarrow> bool\" (infix \"\\<sqsubset>\" 50)"], ["", "locale equivalence_syntax =\n  fixes equiv :: \"'a \\<Rightarrow> 'a \\<Rightarrow> bool\" (infix \"\\<sim>\" 50)\nbegin"], ["", "abbreviation equiv_class (\"[_]\\<^sub>\\<sim>\") where \"[x]\\<^sub>\\<sim> \\<equiv> { y. x \\<sim> y }\""], ["", "end"], ["", "text \\<open>Next ones introduce abbreviations for dual etc.\nTo avoid needless constants, one should be careful when declaring them as sublocales.\\<close>"], ["", "locale less_eq_notations = less_eq_syntax\nbegin"], ["", "abbreviation (input) greater_eq (infix \"\\<sqsupseteq>\" 50) where \"x \\<sqsupseteq> y \\<equiv> y \\<sqsubseteq> x\""], ["", "abbreviation sym (infix \"\\<sim>\" 50) where \"(\\<sim>) \\<equiv> sympartp (\\<sqsubseteq>)\""], ["", "abbreviation less (infix \"\\<sqsubset>\" 50) where \"(\\<sqsubset>) \\<equiv> asympartp (\\<sqsubseteq>)\""], ["", "abbreviation greater (infix \"\\<sqsupset>\" 50) where \"(\\<sqsupset>) \\<equiv> (\\<sqsubset>)\\<^sup>-\""], ["", "abbreviation equiv (infix \"(\\<simeq>)\" 50) where \"(\\<simeq>) \\<equiv> equivpartp (\\<sqsubseteq>)\""], ["", "lemma asym_cases[consumes 1, case_names asym sym]:\n  assumes \"x \\<sqsubseteq> y\" and \"x \\<sqsubset> y \\<Longrightarrow> thesis\" and \"x \\<sim> y \\<Longrightarrow> thesis\"\n  shows thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. thesis", "using assms"], ["proof (prove)\nusing this:\n  x \\<sqsubseteq> y\n  x \\<sqsubset> y \\<Longrightarrow> thesis\n  x \\<sim> y \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. thesis", "by auto"], ["", "end"], ["", "locale less_notations = less_syntax\nbegin"], ["", "abbreviation (input) greater (infix \"\\<sqsupset>\" 50) where \"x \\<sqsupset> y \\<equiv> y \\<sqsubset> x\""], ["", "end"], ["", "locale related_set =\n  fixes A :: \"'a set\" and less_eq :: \"'a \\<Rightarrow> 'a \\<Rightarrow> bool\" (infix \"\\<sqsubseteq>\" 50)"], ["", "subsubsection \\<open>Basic Properties of Relations\\<close>"], ["", "text \\<open>In the following we define basic properties in form of locales.\\<close>"], ["", "text \\<open>Reflexivity restricted on a set:\\<close>"], ["", "locale reflexive = related_set +\n  assumes refl[intro]: \"x \\<in> A \\<Longrightarrow> x \\<sqsubseteq> x\"\nbegin"], ["", "lemma eq_implies: \"x = y \\<Longrightarrow> x \\<in> A \\<Longrightarrow> x \\<sqsubseteq> y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x = y; x \\<in> A\\<rbrakk> \\<Longrightarrow> x \\<sqsubseteq> y", "by auto"], ["", "lemma extreme_singleton[simp]: \"x \\<in> A \\<Longrightarrow> extreme {x} (\\<sqsubseteq>) y \\<longleftrightarrow> x = y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> A \\<Longrightarrow> extreme {x} (\\<sqsubseteq>) y = (x = y)", "by auto"], ["", "lemma extreme_bound_singleton: \"x \\<in> A \\<Longrightarrow> extreme_bound A (\\<sqsubseteq>) {x} x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> A \\<Longrightarrow> extreme_bound A (\\<sqsubseteq>) {x} x", "by auto"], ["", "lemma reflexive_subset: \"B \\<subseteq> A \\<Longrightarrow> reflexive B (\\<sqsubseteq>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. B \\<subseteq> A \\<Longrightarrow> reflexive B (\\<sqsubseteq>)", "apply unfold_locales"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>B \\<subseteq> A; x \\<in> B\\<rbrakk>\n       \\<Longrightarrow> x \\<sqsubseteq> x", "by auto"], ["", "end"], ["", "declare reflexive.intro[intro!]"], ["", "lemma reflexiveE[elim]:\n  assumes \"reflexive A r\" and \"(\\<And>x. x \\<in> A \\<Longrightarrow> r x x) \\<Longrightarrow> thesis\" shows thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. thesis", "using assms"], ["proof (prove)\nusing this:\n  reflexive A r\n  (\\<And>x. x \\<in> A \\<Longrightarrow> r x x) \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. thesis", "by (auto simp: reflexive.refl)"], ["", "lemma reflexive_cong:\n  \"(\\<And>a b. a \\<in> A \\<Longrightarrow> b \\<in> A \\<Longrightarrow> r a b \\<longleftrightarrow> r' a b) \\<Longrightarrow> reflexive A r \\<longleftrightarrow> reflexive A r'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>a b.\n        \\<lbrakk>a \\<in> A; b \\<in> A\\<rbrakk>\n        \\<Longrightarrow> r a b = r' a b) \\<Longrightarrow>\n    reflexive A r = reflexive A r'", "by (simp add: reflexive_def)"], ["", "locale irreflexive = related_set A \"(\\<sqsubset>)\" for A and less (infix \"\\<sqsubset>\" 50) +\n  assumes irrefl: \"x \\<in> A \\<Longrightarrow> \\<not> x \\<sqsubset> x\"\nbegin"], ["", "lemma irreflD[simp]: \"x \\<sqsubset> x \\<Longrightarrow> \\<not>x \\<in> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<sqsubset> x \\<Longrightarrow> x \\<notin> A", "by (auto simp: irrefl)"], ["", "lemma implies_not_eq: \"x \\<sqsubset> y \\<Longrightarrow> x \\<in> A \\<Longrightarrow> x \\<noteq> y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<sqsubset> y; x \\<in> A\\<rbrakk>\n    \\<Longrightarrow> x \\<noteq> y", "by auto"], ["", "lemma Restrp_irreflexive: \"irreflexive UNIV ((\\<sqsubset>)\\<restriction>A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. irreflexive UNIV ((\\<sqsubset>) \\<restriction> A)", "apply unfold_locales"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> UNIV \\<Longrightarrow>\n       \\<not> ((\\<sqsubset>) \\<restriction> A) x x", "by auto"], ["", "lemma irreflexive_subset: \"B \\<subseteq> A \\<Longrightarrow> irreflexive B (\\<sqsubset>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. B \\<subseteq> A \\<Longrightarrow> irreflexive B (\\<sqsubset>)", "apply unfold_locales"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>B \\<subseteq> A; x \\<in> B\\<rbrakk>\n       \\<Longrightarrow> \\<not> x \\<sqsubset> x", "by auto"], ["", "end"], ["", "declare irreflexive.intro[intro!]"], ["", "lemma irreflexive_cong:\n  \"(\\<And>a b. a \\<in> A \\<Longrightarrow> b \\<in> A \\<Longrightarrow> r a b \\<longleftrightarrow> r' a b) \\<Longrightarrow> irreflexive A r \\<longleftrightarrow> irreflexive A r'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>a b.\n        \\<lbrakk>a \\<in> A; b \\<in> A\\<rbrakk>\n        \\<Longrightarrow> r a b = r' a b) \\<Longrightarrow>\n    irreflexive A r = irreflexive A r'", "by (simp add: irreflexive_def)"], ["", "locale transitive = related_set +\n  assumes trans[trans]: \"x \\<sqsubseteq> y \\<Longrightarrow> y \\<sqsubseteq> z \\<Longrightarrow> x \\<in> A \\<Longrightarrow> y \\<in> A \\<Longrightarrow> z \\<in> A \\<Longrightarrow> x \\<sqsubseteq> z\"\nbegin"], ["", "interpretation less_eq_notations"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "lemma Restrp_transitive: \"transitive UNIV ((\\<sqsubseteq>)\\<restriction>A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. transitive UNIV ((\\<sqsubseteq>) \\<restriction> A)", "apply unfold_locales"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y z.\n       \\<lbrakk>((\\<sqsubseteq>) \\<restriction> A) x y;\n        ((\\<sqsubseteq>) \\<restriction> A) y z; x \\<in> UNIV; y \\<in> UNIV;\n        z \\<in> UNIV\\<rbrakk>\n       \\<Longrightarrow> ((\\<sqsubseteq>) \\<restriction> A) x z", "by (auto intro: trans)"], ["", "lemma bound_trans[trans]: \"bound X (\\<sqsubseteq>) b \\<Longrightarrow> b \\<sqsubseteq> c \\<Longrightarrow> X \\<subseteq> A \\<Longrightarrow> b \\<in> A \\<Longrightarrow> c \\<in> A \\<Longrightarrow> bound X (\\<sqsubseteq>) c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>bound X (\\<sqsubseteq>) b; b \\<sqsubseteq> c; X \\<subseteq> A;\n     b \\<in> A; c \\<in> A\\<rbrakk>\n    \\<Longrightarrow> bound X (\\<sqsubseteq>) c", "by (auto 0 4 dest: trans)"], ["", "lemma transitive_subset:\n  assumes BA: \"B \\<subseteq> A\" shows \"transitive B (\\<sqsubseteq>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. transitive B (\\<sqsubseteq>)", "apply unfold_locales"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<sqsubseteq> y; y \\<sqsubseteq> z; x \\<in> B; y \\<in> B;\n        z \\<in> B\\<rbrakk>\n       \\<Longrightarrow> x \\<sqsubseteq> z", "using trans BA"], ["proof (prove)\nusing this:\n  \\<lbrakk>?x \\<sqsubseteq> ?y; ?y \\<sqsubseteq> ?z; ?x \\<in> A; ?y \\<in> A;\n   ?z \\<in> A\\<rbrakk>\n  \\<Longrightarrow> ?x \\<sqsubseteq> ?z\n  B \\<subseteq> A\n\ngoal (1 subgoal):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<sqsubseteq> y; y \\<sqsubseteq> z; x \\<in> B; y \\<in> B;\n        z \\<in> B\\<rbrakk>\n       \\<Longrightarrow> x \\<sqsubseteq> z", "by blast"], ["", "lemma asympartp_transitive: \"transitive A (\\<sqsubset>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. transitive A (\\<sqsubset>)", "apply unfold_locales"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<sqsubset> y; y \\<sqsubset> z; x \\<in> A; y \\<in> A;\n        z \\<in> A\\<rbrakk>\n       \\<Longrightarrow> x \\<sqsubset> z", "by (auto dest:trans)"], ["", "lemma reflclp_transitive: \"transitive A (\\<sqsubseteq>)\\<^sup>=\\<^sup>=\""], ["proof (prove)\ngoal (1 subgoal):\n 1. transitive A (\\<sqsubseteq>)\\<^sup>=\\<^sup>=", "apply unfold_locales"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y z.\n       \\<lbrakk>(\\<sqsubseteq>)\\<^sup>=\\<^sup>= x y;\n        (\\<sqsubseteq>)\\<^sup>=\\<^sup>= y z; x \\<in> A; y \\<in> A;\n        z \\<in> A\\<rbrakk>\n       \\<Longrightarrow> (\\<sqsubseteq>)\\<^sup>=\\<^sup>= x z", "by (auto dest: trans)"], ["", "text \\<open>The symmetric part is also transitive, but this is done in the later semiattractive locale\\<close>"], ["", "end"], ["", "declare transitive.intro[intro?]"], ["", "lemma transitive_cong:\n  assumes r: \"\\<And>a b. a \\<in> A \\<Longrightarrow> b \\<in> A \\<Longrightarrow> r a b \\<longleftrightarrow> r' a b\" shows \"transitive A r \\<longleftrightarrow> transitive A r'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. transitive A r = transitive A r'", "proof (intro iffI)"], ["proof (state)\ngoal (2 subgoals):\n 1. transitive A r \\<Longrightarrow> transitive A r'\n 2. transitive A r' \\<Longrightarrow> transitive A r", "show \"transitive A r \\<Longrightarrow> transitive A r'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. transitive A r \\<Longrightarrow> transitive A r'", "apply (intro transitive.intro)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y z.\n       \\<lbrakk>transitive A r; r' x y; r' y z; x \\<in> A; y \\<in> A;\n        z \\<in> A\\<rbrakk>\n       \\<Longrightarrow> r' x z", "apply (unfold r[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y z.\n       \\<lbrakk>transitive A r; r x y; r y z; x \\<in> A; y \\<in> A;\n        z \\<in> A\\<rbrakk>\n       \\<Longrightarrow> r x z", "using transitive.trans"], ["proof (prove)\nusing this:\n  \\<lbrakk>transitive ?A ?less_eq; ?less_eq ?x ?y; ?less_eq ?y ?z;\n   ?x \\<in> ?A; ?y \\<in> ?A; ?z \\<in> ?A\\<rbrakk>\n  \\<Longrightarrow> ?less_eq ?x ?z\n\ngoal (1 subgoal):\n 1. \\<And>x y z.\n       \\<lbrakk>transitive A r; r x y; r y z; x \\<in> A; y \\<in> A;\n        z \\<in> A\\<rbrakk>\n       \\<Longrightarrow> r x z", "."], ["proof (state)\nthis:\n  transitive A r \\<Longrightarrow> transitive A r'\n\ngoal (1 subgoal):\n 1. transitive A r' \\<Longrightarrow> transitive A r", "show \"transitive A r' \\<Longrightarrow> transitive A r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. transitive A r' \\<Longrightarrow> transitive A r", "apply (intro transitive.intro)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y z.\n       \\<lbrakk>transitive A r'; r x y; r y z; x \\<in> A; y \\<in> A;\n        z \\<in> A\\<rbrakk>\n       \\<Longrightarrow> r x z", "apply (unfold r)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y z.\n       \\<lbrakk>transitive A r'; r' x y; r' y z; x \\<in> A; y \\<in> A;\n        z \\<in> A\\<rbrakk>\n       \\<Longrightarrow> r' x z", "using transitive.trans"], ["proof (prove)\nusing this:\n  \\<lbrakk>transitive ?A ?less_eq; ?less_eq ?x ?y; ?less_eq ?y ?z;\n   ?x \\<in> ?A; ?y \\<in> ?A; ?z \\<in> ?A\\<rbrakk>\n  \\<Longrightarrow> ?less_eq ?x ?z\n\ngoal (1 subgoal):\n 1. \\<And>x y z.\n       \\<lbrakk>transitive A r'; r' x y; r' y z; x \\<in> A; y \\<in> A;\n        z \\<in> A\\<rbrakk>\n       \\<Longrightarrow> r' x z", "."], ["proof (state)\nthis:\n  transitive A r' \\<Longrightarrow> transitive A r\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma tranclp_transitive: \"transitive A (tranclp r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. transitive A r\\<^sup>+\\<^sup>+", "using tranclp_trans"], ["proof (prove)\nusing this:\n  \\<lbrakk>?r\\<^sup>+\\<^sup>+ ?x ?y; ?r\\<^sup>+\\<^sup>+ ?y ?z\\<rbrakk>\n  \\<Longrightarrow> ?r\\<^sup>+\\<^sup>+ ?x ?z\n\ngoal (1 subgoal):\n 1. transitive A r\\<^sup>+\\<^sup>+", "by unfold_locales"], ["", "locale symmetric = related_set A \"(\\<sim>)\" for A and equiv (infix \"\\<sim>\" 50) +\n  assumes sym[sym]: \"x \\<sim> y \\<Longrightarrow> x \\<in> A \\<Longrightarrow> y \\<in> A \\<Longrightarrow> y \\<sim> x\"\nbegin"], ["", "lemma sym_iff: \"x \\<in> A \\<Longrightarrow> y \\<in> A \\<Longrightarrow> x \\<sim> y \\<longleftrightarrow> y \\<sim> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<in> A; y \\<in> A\\<rbrakk>\n    \\<Longrightarrow> (x \\<sim> y) = (y \\<sim> x)", "by (auto dest: sym)"], ["", "lemma Restrp_symmetric: \"symmetric UNIV ((\\<sim>)\\<restriction>A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. symmetric UNIV ((\\<sim>) \\<restriction> A)", "apply unfold_locales"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>((\\<sim>) \\<restriction> A) x y; x \\<in> UNIV;\n        y \\<in> UNIV\\<rbrakk>\n       \\<Longrightarrow> ((\\<sim>) \\<restriction> A) y x", "by (auto simp: sym_iff)"], ["", "lemma symmetric_subset: \"B \\<subseteq> A \\<Longrightarrow> symmetric B (\\<sim>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. B \\<subseteq> A \\<Longrightarrow> symmetric B (\\<sim>)", "apply unfold_locales"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>B \\<subseteq> A; x \\<sim> y; x \\<in> B; y \\<in> B\\<rbrakk>\n       \\<Longrightarrow> y \\<sim> x", "by (auto dest: sym)"], ["", "end"], ["", "declare symmetric.intro[intro]"], ["", "lemma symmetric_cong:\n  \"(\\<And>a b. a \\<in> A \\<Longrightarrow> b \\<in> A \\<Longrightarrow> r a b \\<longleftrightarrow> r' a b) \\<Longrightarrow> symmetric A r \\<longleftrightarrow> symmetric A r'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>a b.\n        \\<lbrakk>a \\<in> A; b \\<in> A\\<rbrakk>\n        \\<Longrightarrow> r a b = r' a b) \\<Longrightarrow>\n    symmetric A r = symmetric A r'", "by (auto simp: symmetric_def)"], ["", "global_interpretation sympartp: symmetric UNIV \"sympartp r\"\n  rewrites \"\\<And>r. r \\<restriction> UNIV \\<equiv> r\"\n    and \"\\<And>x. x \\<in> UNIV \\<equiv> True\"\n    and \"\\<And>P1. (True \\<Longrightarrow> P1) \\<equiv> Trueprop P1\"\n    and \"\\<And>P1 P2. (True \\<Longrightarrow> PROP P1 \\<Longrightarrow> PROP P2) \\<equiv> (PROP P1 \\<Longrightarrow> PROP P2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (symmetric UNIV (sympartp r) &&&\n     (\\<And>r. r \\<restriction> UNIV \\<equiv> r)) &&&\n    (\\<And>x. x \\<in> UNIV \\<equiv> True) &&&\n    (\\<And>P1. (True \\<Longrightarrow> P1) \\<equiv> P1) &&&\n    (\\<And>P1 P2.\n        (\\<lbrakk>True; PROP P1\\<rbrakk> \\<Longrightarrow> PROP P2) \\<equiv>\n        (PROP P1 \\<Longrightarrow> PROP P2))", "by auto"], ["", "lemma sympartp_symmetric: \"symmetric A (sympartp r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. symmetric A (sympartp r)", "by auto"], ["", "locale antisymmetric = related_set +\n  assumes antisym: \"x \\<sqsubseteq> y \\<Longrightarrow> y \\<sqsubseteq> x \\<Longrightarrow> x \\<in> A \\<Longrightarrow> y \\<in> A \\<Longrightarrow> x = y\"\nbegin"], ["", "interpretation less_eq_notations"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "lemma sym_iff_eq_refl: \"x \\<in> A \\<Longrightarrow> y \\<in> A \\<Longrightarrow> x \\<sim> y \\<longleftrightarrow> x = y \\<and> y \\<sqsubseteq> y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<in> A; y \\<in> A\\<rbrakk>\n    \\<Longrightarrow> (x \\<sim> y) = (x = y \\<and> y \\<sqsubseteq> y)", "by (auto dest: antisym)"], ["", "lemma equiv_iff_eq[simp]: \"x \\<in> A \\<Longrightarrow> y \\<in> A \\<Longrightarrow> x \\<simeq> y \\<longleftrightarrow> x = y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<in> A; y \\<in> A\\<rbrakk>\n    \\<Longrightarrow> (x \\<simeq> y) = (x = y)", "by (auto dest: antisym elim: equivpartpE)"], ["", "lemma extreme_unique: \"X \\<subseteq> A \\<Longrightarrow> extreme X (\\<sqsubseteq>) x \\<Longrightarrow> extreme X (\\<sqsubseteq>) y \\<longleftrightarrow> x = y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>X \\<subseteq> A; extreme X (\\<sqsubseteq>) x\\<rbrakk>\n    \\<Longrightarrow> extreme X (\\<sqsubseteq>) y = (x = y)", "by (elim extremeE, auto dest!: antisym[OF _ _ subsetD])"], ["", "lemma ex_extreme_iff_ex1:\n  \"X \\<subseteq> A \\<Longrightarrow> Ex (extreme X (\\<sqsubseteq>)) \\<longleftrightarrow> Ex1 (extreme X (\\<sqsubseteq>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X \\<subseteq> A \\<Longrightarrow>\n    Ex (extreme X (\\<sqsubseteq>)) = Ex1 (extreme X (\\<sqsubseteq>))", "by (auto simp: extreme_unique)"], ["", "lemma ex_extreme_iff_the:\n   \"X \\<subseteq> A \\<Longrightarrow> Ex (extreme X (\\<sqsubseteq>)) \\<longleftrightarrow> extreme X (\\<sqsubseteq>) (The (extreme X (\\<sqsubseteq>)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X \\<subseteq> A \\<Longrightarrow>\n    Ex (extreme X (\\<sqsubseteq>)) =\n    extreme X (\\<sqsubseteq>) (The (extreme X (\\<sqsubseteq>)))", "apply (rule iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>X \\<subseteq> A; Ex (extreme X (\\<sqsubseteq>))\\<rbrakk>\n    \\<Longrightarrow> extreme X (\\<sqsubseteq>)\n                       (The (extreme X (\\<sqsubseteq>)))\n 2. \\<lbrakk>X \\<subseteq> A;\n     extreme X (\\<sqsubseteq>) (The (extreme X (\\<sqsubseteq>)))\\<rbrakk>\n    \\<Longrightarrow> Ex (extreme X (\\<sqsubseteq>))", "apply (rule theI')"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>X \\<subseteq> A; Ex (extreme X (\\<sqsubseteq>))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>!x. extreme X (\\<sqsubseteq>) x\n 2. \\<lbrakk>X \\<subseteq> A;\n     extreme X (\\<sqsubseteq>) (The (extreme X (\\<sqsubseteq>)))\\<rbrakk>\n    \\<Longrightarrow> Ex (extreme X (\\<sqsubseteq>))", "using extreme_unique"], ["proof (prove)\nusing this:\n  \\<lbrakk>?X \\<subseteq> A; extreme ?X (\\<sqsubseteq>) ?x\\<rbrakk>\n  \\<Longrightarrow> extreme ?X (\\<sqsubseteq>) ?y = (?x = ?y)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>X \\<subseteq> A; Ex (extreme X (\\<sqsubseteq>))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>!x. extreme X (\\<sqsubseteq>) x\n 2. \\<lbrakk>X \\<subseteq> A;\n     extreme X (\\<sqsubseteq>) (The (extreme X (\\<sqsubseteq>)))\\<rbrakk>\n    \\<Longrightarrow> Ex (extreme X (\\<sqsubseteq>))", "by auto"], ["", "lemma Restrp_antisymmetric: \"antisymmetric UNIV ((\\<sqsubseteq>)\\<restriction>A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. antisymmetric UNIV ((\\<sqsubseteq>) \\<restriction> A)", "apply unfold_locales"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>((\\<sqsubseteq>) \\<restriction> A) x y;\n        ((\\<sqsubseteq>) \\<restriction> A) y x; x \\<in> UNIV;\n        y \\<in> UNIV\\<rbrakk>\n       \\<Longrightarrow> x = y", "by (auto dest: antisym)"], ["", "lemma antisymmetric_subset: \"B \\<subseteq> A \\<Longrightarrow> antisymmetric B (\\<sqsubseteq>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. B \\<subseteq> A \\<Longrightarrow> antisymmetric B (\\<sqsubseteq>)", "apply unfold_locales"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>B \\<subseteq> A; x \\<sqsubseteq> y; y \\<sqsubseteq> x;\n        x \\<in> B; y \\<in> B\\<rbrakk>\n       \\<Longrightarrow> x = y", "using antisym"], ["proof (prove)\nusing this:\n  \\<lbrakk>?x \\<sqsubseteq> ?y; ?y \\<sqsubseteq> ?x; ?x \\<in> A;\n   ?y \\<in> A\\<rbrakk>\n  \\<Longrightarrow> ?x = ?y\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>B \\<subseteq> A; x \\<sqsubseteq> y; y \\<sqsubseteq> x;\n        x \\<in> B; y \\<in> B\\<rbrakk>\n       \\<Longrightarrow> x = y", "by auto"], ["", "end"], ["", "declare antisymmetric.intro[intro]"], ["", "lemma antisymmetric_cong:\n  \"(\\<And>a b. a \\<in> A \\<Longrightarrow> b \\<in> A \\<Longrightarrow> r a b \\<longleftrightarrow> r' a b) \\<Longrightarrow> antisymmetric A r \\<longleftrightarrow> antisymmetric A r'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>a b.\n        \\<lbrakk>a \\<in> A; b \\<in> A\\<rbrakk>\n        \\<Longrightarrow> r a b = r' a b) \\<Longrightarrow>\n    antisymmetric A r = antisymmetric A r'", "by (auto simp: antisymmetric_def)"], ["", "lemma antisymmetric_union:\n  fixes less_eq (infix \"\\<sqsubseteq>\" 50)\n  assumes A: \"antisymmetric A (\\<sqsubseteq>)\" and B: \"antisymmetric B (\\<sqsubseteq>)\"\n    and AB: \"\\<forall>a \\<in> A. \\<forall>b \\<in> B. a \\<sqsubseteq> b \\<longrightarrow> b \\<sqsubseteq> a \\<longrightarrow> a = b\"\n  shows \"antisymmetric (A \\<union> B) (\\<sqsubseteq>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. antisymmetric (A \\<union> B) (\\<sqsubseteq>)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. antisymmetric (A \\<union> B) (\\<sqsubseteq>)", "interpret A: antisymmetric A \"(\\<sqsubseteq>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. antisymmetric A (\\<sqsubseteq>)", "using A"], ["proof (prove)\nusing this:\n  antisymmetric A (\\<sqsubseteq>)\n\ngoal (1 subgoal):\n 1. antisymmetric A (\\<sqsubseteq>)", "."], ["proof (state)\ngoal (1 subgoal):\n 1. antisymmetric (A \\<union> B) (\\<sqsubseteq>)", "interpret B: antisymmetric B \"(\\<sqsubseteq>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. antisymmetric B (\\<sqsubseteq>)", "using B"], ["proof (prove)\nusing this:\n  antisymmetric B (\\<sqsubseteq>)\n\ngoal (1 subgoal):\n 1. antisymmetric B (\\<sqsubseteq>)", "."], ["proof (state)\ngoal (1 subgoal):\n 1. antisymmetric (A \\<union> B) (\\<sqsubseteq>)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. antisymmetric (A \\<union> B) (\\<sqsubseteq>)", "by (auto dest: AB[rule_format] A.antisym B.antisym)"], ["proof (state)\nthis:\n  antisymmetric (A \\<union> B) (\\<sqsubseteq>)\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>The following notion is new, generalizing antisymmetry and transitivity.\\<close>"], ["", "locale semiattractive = related_set +\n  assumes attract: \"x \\<sqsubseteq> y \\<Longrightarrow> y \\<sqsubseteq> x \\<Longrightarrow> y \\<sqsubseteq> z \\<Longrightarrow> x \\<in> A \\<Longrightarrow> y \\<in> A \\<Longrightarrow> z \\<in> A \\<Longrightarrow> x \\<sqsubseteq> z\"\nbegin"], ["", "interpretation less_eq_notations"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "lemma equiv_order_trans[trans]:\n  assumes xy: \"x \\<simeq> y\" and yz: \"y \\<sqsubseteq> z\" and x: \"x \\<in> A\" and y: \"y \\<in> A\" and z: \"z \\<in> A\"\n  shows \"x \\<sqsubseteq> z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<sqsubseteq> z", "using attract[OF _ _ _ x y z] xy yz"], ["proof (prove)\nusing this:\n  \\<lbrakk>x \\<sqsubseteq> y; y \\<sqsubseteq> x; y \\<sqsubseteq> z\\<rbrakk>\n  \\<Longrightarrow> x \\<sqsubseteq> z\n  x \\<simeq> y\n  y \\<sqsubseteq> z\n\ngoal (1 subgoal):\n 1. x \\<sqsubseteq> z", "by (auto elim: equivpartpE)"], ["", "lemma equiv_transitive: \"transitive A (\\<simeq>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. transitive A (\\<simeq>)", "proof unfold_locales"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<simeq> y; y \\<simeq> z; x \\<in> A; y \\<in> A;\n        z \\<in> A\\<rbrakk>\n       \\<Longrightarrow> x \\<simeq> z", "fix x y z"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<simeq> y; y \\<simeq> z; x \\<in> A; y \\<in> A;\n        z \\<in> A\\<rbrakk>\n       \\<Longrightarrow> x \\<simeq> z", "assume x: \"x \\<in> A\" and y: \"y \\<in> A\" and z: \"z \\<in> A\" and xy: \"x \\<simeq> y\" and yz: \"y \\<simeq> z\""], ["proof (state)\nthis:\n  x \\<in> A\n  y \\<in> A\n  z \\<in> A\n  x \\<simeq> y\n  y \\<simeq> z\n\ngoal (1 subgoal):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<simeq> y; y \\<simeq> z; x \\<in> A; y \\<in> A;\n        z \\<in> A\\<rbrakk>\n       \\<Longrightarrow> x \\<simeq> z", "show \"x \\<simeq> z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<simeq> z", "using equiv_order_trans[OF xy _ x y z] attract[OF _ _ _ z y x] xy yz"], ["proof (prove)\nusing this:\n  y \\<sqsubseteq> z \\<Longrightarrow> x \\<sqsubseteq> z\n  \\<lbrakk>z \\<sqsubseteq> y; y \\<sqsubseteq> z; y \\<sqsubseteq> x\\<rbrakk>\n  \\<Longrightarrow> z \\<sqsubseteq> x\n  x \\<simeq> y\n  y \\<simeq> z\n\ngoal (1 subgoal):\n 1. x \\<simeq> z", "by (auto simp:equivpartp_def)"], ["proof (state)\nthis:\n  x \\<simeq> z\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma sym_order_trans[trans]:\n  assumes xy: \"x \\<sim> y\" and yz: \"y \\<sqsubseteq> z\" and x: \"x \\<in> A\" and y: \"y \\<in> A\" and z: \"z \\<in> A\"\n  shows \"x \\<sqsubseteq> z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<sqsubseteq> z", "using attract[OF _ _ _ x y z] xy yz"], ["proof (prove)\nusing this:\n  \\<lbrakk>x \\<sqsubseteq> y; y \\<sqsubseteq> x; y \\<sqsubseteq> z\\<rbrakk>\n  \\<Longrightarrow> x \\<sqsubseteq> z\n  x \\<sim> y\n  y \\<sqsubseteq> z\n\ngoal (1 subgoal):\n 1. x \\<sqsubseteq> z", "by auto"], ["", "interpretation sym: transitive A \"(\\<sim>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. transitive A (\\<sim>)", "proof unfold_locales"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<sim> y; y \\<sim> z; x \\<in> A; y \\<in> A;\n        z \\<in> A\\<rbrakk>\n       \\<Longrightarrow> x \\<sim> z", "fix x y z"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<sim> y; y \\<sim> z; x \\<in> A; y \\<in> A;\n        z \\<in> A\\<rbrakk>\n       \\<Longrightarrow> x \\<sim> z", "assume x: \"x \\<in> A\" and y: \"y \\<in> A\" and z: \"z \\<in> A\" and xy: \"x \\<sim> y\" and yz: \"y \\<sim> z\""], ["proof (state)\nthis:\n  x \\<in> A\n  y \\<in> A\n  z \\<in> A\n  x \\<sim> y\n  y \\<sim> z\n\ngoal (1 subgoal):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<sim> y; y \\<sim> z; x \\<in> A; y \\<in> A;\n        z \\<in> A\\<rbrakk>\n       \\<Longrightarrow> x \\<sim> z", "show \"x \\<sim> z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<sim> z", "using sym_order_trans[OF xy _ x y z] attract[OF _ _ _ z y x] xy yz"], ["proof (prove)\nusing this:\n  y \\<sqsubseteq> z \\<Longrightarrow> x \\<sqsubseteq> z\n  \\<lbrakk>z \\<sqsubseteq> y; y \\<sqsubseteq> z; y \\<sqsubseteq> x\\<rbrakk>\n  \\<Longrightarrow> z \\<sqsubseteq> x\n  x \\<sim> y\n  y \\<sim> z\n\ngoal (1 subgoal):\n 1. x \\<sim> z", "by auto"], ["proof (state)\nthis:\n  x \\<sim> z\n\ngoal:\nNo subgoals!", "qed"], ["", "lemmas sym_transitive = sym.transitive_axioms"], ["", "lemma extreme_bound_quasi_const:\n  assumes C: \"C \\<subseteq> A\" and x: \"x \\<in> A\" and C0: \"C \\<noteq> {}\" and const: \"\\<forall>y \\<in> C. y \\<sim> x\"\n  shows \"extreme_bound A (\\<sqsubseteq>) C x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. extreme_bound A (\\<sqsubseteq>) C x", "proof (intro extreme_boundI x)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>b.\n       \\<lbrakk>bound C (\\<sqsubseteq>) b; b \\<in> A\\<rbrakk>\n       \\<Longrightarrow> x \\<sqsubseteq> b\n 2. \\<And>xa. xa \\<in> C \\<Longrightarrow> xa \\<sqsubseteq> x", "from C0"], ["proof (chain)\npicking this:\n  C \\<noteq> {}", "obtain c where cC: \"c \\<in> C\""], ["proof (prove)\nusing this:\n  C \\<noteq> {}\n\ngoal (1 subgoal):\n 1. (\\<And>c. c \\<in> C \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by auto"], ["proof (state)\nthis:\n  c \\<in> C\n\ngoal (2 subgoals):\n 1. \\<And>b.\n       \\<lbrakk>bound C (\\<sqsubseteq>) b; b \\<in> A\\<rbrakk>\n       \\<Longrightarrow> x \\<sqsubseteq> b\n 2. \\<And>xa. xa \\<in> C \\<Longrightarrow> xa \\<sqsubseteq> x", "with C"], ["proof (chain)\npicking this:\n  C \\<subseteq> A\n  c \\<in> C", "have c: \"c \\<in> A\""], ["proof (prove)\nusing this:\n  C \\<subseteq> A\n  c \\<in> C\n\ngoal (1 subgoal):\n 1. c \\<in> A", "by auto"], ["proof (state)\nthis:\n  c \\<in> A\n\ngoal (2 subgoals):\n 1. \\<And>b.\n       \\<lbrakk>bound C (\\<sqsubseteq>) b; b \\<in> A\\<rbrakk>\n       \\<Longrightarrow> x \\<sqsubseteq> b\n 2. \\<And>xa. xa \\<in> C \\<Longrightarrow> xa \\<sqsubseteq> x", "from cC const"], ["proof (chain)\npicking this:\n  c \\<in> C\n  \\<forall>y\\<in>C. y \\<sim> x", "have cx: \"c \\<sim> x\""], ["proof (prove)\nusing this:\n  c \\<in> C\n  \\<forall>y\\<in>C. y \\<sim> x\n\ngoal (1 subgoal):\n 1. c \\<sim> x", "by auto"], ["proof (state)\nthis:\n  c \\<sim> x\n\ngoal (2 subgoals):\n 1. \\<And>b.\n       \\<lbrakk>bound C (\\<sqsubseteq>) b; b \\<in> A\\<rbrakk>\n       \\<Longrightarrow> x \\<sqsubseteq> b\n 2. \\<And>xa. xa \\<in> C \\<Longrightarrow> xa \\<sqsubseteq> x", "fix b"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>b.\n       \\<lbrakk>bound C (\\<sqsubseteq>) b; b \\<in> A\\<rbrakk>\n       \\<Longrightarrow> x \\<sqsubseteq> b\n 2. \\<And>xa. xa \\<in> C \\<Longrightarrow> xa \\<sqsubseteq> x", "assume b: \"b \\<in> A\" and \"bound C (\\<sqsubseteq>) b\""], ["proof (state)\nthis:\n  b \\<in> A\n  bound C (\\<sqsubseteq>) b\n\ngoal (2 subgoals):\n 1. \\<And>b.\n       \\<lbrakk>bound C (\\<sqsubseteq>) b; b \\<in> A\\<rbrakk>\n       \\<Longrightarrow> x \\<sqsubseteq> b\n 2. \\<And>xa. xa \\<in> C \\<Longrightarrow> xa \\<sqsubseteq> x", "with cC"], ["proof (chain)\npicking this:\n  c \\<in> C\n  b \\<in> A\n  bound C (\\<sqsubseteq>) b", "have cb: \"c \\<sqsubseteq> b\""], ["proof (prove)\nusing this:\n  c \\<in> C\n  b \\<in> A\n  bound C (\\<sqsubseteq>) b\n\ngoal (1 subgoal):\n 1. c \\<sqsubseteq> b", "by auto"], ["proof (state)\nthis:\n  c \\<sqsubseteq> b\n\ngoal (2 subgoals):\n 1. \\<And>b.\n       \\<lbrakk>bound C (\\<sqsubseteq>) b; b \\<in> A\\<rbrakk>\n       \\<Longrightarrow> x \\<sqsubseteq> b\n 2. \\<And>xa. xa \\<in> C \\<Longrightarrow> xa \\<sqsubseteq> x", "from attract[OF _ _ cb x c b] cx"], ["proof (chain)\npicking this:\n  \\<lbrakk>x \\<sqsubseteq> c; c \\<sqsubseteq> x\\<rbrakk>\n  \\<Longrightarrow> x \\<sqsubseteq> b\n  c \\<sim> x", "show \"x \\<sqsubseteq> b\""], ["proof (prove)\nusing this:\n  \\<lbrakk>x \\<sqsubseteq> c; c \\<sqsubseteq> x\\<rbrakk>\n  \\<Longrightarrow> x \\<sqsubseteq> b\n  c \\<sim> x\n\ngoal (1 subgoal):\n 1. x \\<sqsubseteq> b", "by auto"], ["proof (state)\nthis:\n  x \\<sqsubseteq> b\n\ngoal (1 subgoal):\n 1. \\<And>xa. xa \\<in> C \\<Longrightarrow> xa \\<sqsubseteq> x", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa. xa \\<in> C \\<Longrightarrow> xa \\<sqsubseteq> x", "fix c"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa. xa \\<in> C \\<Longrightarrow> xa \\<sqsubseteq> x", "assume \"c \\<in> C\""], ["proof (state)\nthis:\n  c \\<in> C\n\ngoal (1 subgoal):\n 1. \\<And>xa. xa \\<in> C \\<Longrightarrow> xa \\<sqsubseteq> x", "with const"], ["proof (chain)\npicking this:\n  \\<forall>y\\<in>C. y \\<sim> x\n  c \\<in> C", "show \"c \\<sqsubseteq> x\""], ["proof (prove)\nusing this:\n  \\<forall>y\\<in>C. y \\<sim> x\n  c \\<in> C\n\ngoal (1 subgoal):\n 1. c \\<sqsubseteq> x", "by auto"], ["proof (state)\nthis:\n  c \\<sqsubseteq> x\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma extreme_bound_quasi_const_iff:\n  assumes C: \"C \\<subseteq> A\" and x: \"x \\<in> A\" and y: \"y \\<in> A\" and C0: \"C \\<noteq> {}\" and const: \"\\<forall>z \\<in> C. z \\<sim> x\"\n  shows \"extreme_bound A (\\<sqsubseteq>) C y \\<longleftrightarrow> x \\<sim> y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. extreme_bound A (\\<sqsubseteq>) C y = (x \\<sim> y)", "proof (intro iffI)"], ["proof (state)\ngoal (2 subgoals):\n 1. extreme_bound A (\\<sqsubseteq>) C y \\<Longrightarrow> x \\<sim> y\n 2. x \\<sim> y \\<Longrightarrow> extreme_bound A (\\<sqsubseteq>) C y", "assume y: \"extreme_bound A (\\<sqsubseteq>) C y\""], ["proof (state)\nthis:\n  extreme_bound A (\\<sqsubseteq>) C y\n\ngoal (2 subgoals):\n 1. extreme_bound A (\\<sqsubseteq>) C y \\<Longrightarrow> x \\<sim> y\n 2. x \\<sim> y \\<Longrightarrow> extreme_bound A (\\<sqsubseteq>) C y", "note x = extreme_bound_quasi_const[OF C x C0 const]"], ["proof (state)\nthis:\n  extreme_bound A (\\<sqsubseteq>) C x\n\ngoal (2 subgoals):\n 1. extreme_bound A (\\<sqsubseteq>) C y \\<Longrightarrow> x \\<sim> y\n 2. x \\<sim> y \\<Longrightarrow> extreme_bound A (\\<sqsubseteq>) C y", "from extremes_equiv[OF y x]"], ["proof (chain)\npicking this:\n  sympartp (\\<lambda>x y. y \\<sqsubseteq> x) y x", "show \"x \\<sim> y\""], ["proof (prove)\nusing this:\n  sympartp (\\<lambda>x y. y \\<sqsubseteq> x) y x\n\ngoal (1 subgoal):\n 1. x \\<sim> y", "by auto"], ["proof (state)\nthis:\n  x \\<sim> y\n\ngoal (1 subgoal):\n 1. x \\<sim> y \\<Longrightarrow> extreme_bound A (\\<sqsubseteq>) C y", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<sim> y \\<Longrightarrow> extreme_bound A (\\<sqsubseteq>) C y", "assume xy: \"x \\<sim> y\""], ["proof (state)\nthis:\n  x \\<sim> y\n\ngoal (1 subgoal):\n 1. x \\<sim> y \\<Longrightarrow> extreme_bound A (\\<sqsubseteq>) C y", "with const C sym.trans[OF _ xy _ x y]"], ["proof (chain)\npicking this:\n  \\<forall>z\\<in>C. z \\<sim> x\n  C \\<subseteq> A\n  \\<lbrakk>?x \\<sim> x; ?x \\<in> A\\<rbrakk> \\<Longrightarrow> ?x \\<sim> y\n  x \\<sim> y", "have Cy: \"\\<forall>z \\<in> C. z \\<sim> y\""], ["proof (prove)\nusing this:\n  \\<forall>z\\<in>C. z \\<sim> x\n  C \\<subseteq> A\n  \\<lbrakk>?x \\<sim> x; ?x \\<in> A\\<rbrakk> \\<Longrightarrow> ?x \\<sim> y\n  x \\<sim> y\n\ngoal (1 subgoal):\n 1. \\<forall>z\\<in>C. z \\<sim> y", "by auto"], ["proof (state)\nthis:\n  \\<forall>z\\<in>C. z \\<sim> y\n\ngoal (1 subgoal):\n 1. x \\<sim> y \\<Longrightarrow> extreme_bound A (\\<sqsubseteq>) C y", "show \"extreme_bound A (\\<sqsubseteq>) C y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. extreme_bound A (\\<sqsubseteq>) C y", "using extreme_bound_quasi_const[OF C y C0 Cy]"], ["proof (prove)\nusing this:\n  extreme_bound A (\\<sqsubseteq>) C y\n\ngoal (1 subgoal):\n 1. extreme_bound A (\\<sqsubseteq>) C y", "."], ["proof (state)\nthis:\n  extreme_bound A (\\<sqsubseteq>) C y\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Restrp_semiattractive: \"semiattractive UNIV ((\\<sqsubseteq>)\\<restriction>A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. semiattractive UNIV ((\\<sqsubseteq>) \\<restriction> A)", "apply unfold_locales"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y z.\n       \\<lbrakk>((\\<sqsubseteq>) \\<restriction> A) x y;\n        ((\\<sqsubseteq>) \\<restriction> A) y x;\n        ((\\<sqsubseteq>) \\<restriction> A) y z; x \\<in> UNIV; y \\<in> UNIV;\n        z \\<in> UNIV\\<rbrakk>\n       \\<Longrightarrow> ((\\<sqsubseteq>) \\<restriction> A) x z", "by (auto dest: attract)"], ["", "lemma semiattractive_subset: \"B \\<subseteq> A \\<Longrightarrow> semiattractive B (\\<sqsubseteq>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. B \\<subseteq> A \\<Longrightarrow> semiattractive B (\\<sqsubseteq>)", "apply unfold_locales"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y z.\n       \\<lbrakk>B \\<subseteq> A; x \\<sqsubseteq> y; y \\<sqsubseteq> x;\n        y \\<sqsubseteq> z; x \\<in> B; y \\<in> B; z \\<in> B\\<rbrakk>\n       \\<Longrightarrow> x \\<sqsubseteq> z", "using attract"], ["proof (prove)\nusing this:\n  \\<lbrakk>?x \\<sqsubseteq> ?y; ?y \\<sqsubseteq> ?x; ?y \\<sqsubseteq> ?z;\n   ?x \\<in> A; ?y \\<in> A; ?z \\<in> A\\<rbrakk>\n  \\<Longrightarrow> ?x \\<sqsubseteq> ?z\n\ngoal (1 subgoal):\n 1. \\<And>x y z.\n       \\<lbrakk>B \\<subseteq> A; x \\<sqsubseteq> y; y \\<sqsubseteq> x;\n        y \\<sqsubseteq> z; x \\<in> B; y \\<in> B; z \\<in> B\\<rbrakk>\n       \\<Longrightarrow> x \\<sqsubseteq> z", "by blast"], ["", "end"], ["", "lemma semiattractive_cong:\n  assumes r: \"\\<And>a b. a \\<in> A \\<Longrightarrow> b \\<in> A \\<Longrightarrow> r a b \\<longleftrightarrow> r' a b\"\n  shows \"semiattractive A r \\<longleftrightarrow> semiattractive A r'\" (is \"?l \\<longleftrightarrow> ?r\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. semiattractive A r = semiattractive A r'", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. semiattractive A r \\<Longrightarrow> semiattractive A r'\n 2. semiattractive A r' \\<Longrightarrow> semiattractive A r", "show \"?l \\<Longrightarrow> ?r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. semiattractive A r \\<Longrightarrow> semiattractive A r'", "apply (intro semiattractive.intro)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y z.\n       \\<lbrakk>semiattractive A r; r' x y; r' y x; r' y z; x \\<in> A;\n        y \\<in> A; z \\<in> A\\<rbrakk>\n       \\<Longrightarrow> r' x z", "apply (unfold r[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y z.\n       \\<lbrakk>semiattractive A r; r x y; r y x; r y z; x \\<in> A;\n        y \\<in> A; z \\<in> A\\<rbrakk>\n       \\<Longrightarrow> r x z", "using semiattractive.attract"], ["proof (prove)\nusing this:\n  \\<lbrakk>semiattractive ?A ?less_eq; ?less_eq ?x ?y; ?less_eq ?y ?x;\n   ?less_eq ?y ?z; ?x \\<in> ?A; ?y \\<in> ?A; ?z \\<in> ?A\\<rbrakk>\n  \\<Longrightarrow> ?less_eq ?x ?z\n\ngoal (1 subgoal):\n 1. \\<And>x y z.\n       \\<lbrakk>semiattractive A r; r x y; r y x; r y z; x \\<in> A;\n        y \\<in> A; z \\<in> A\\<rbrakk>\n       \\<Longrightarrow> r x z", "."], ["proof (state)\nthis:\n  semiattractive A r \\<Longrightarrow> semiattractive A r'\n\ngoal (1 subgoal):\n 1. semiattractive A r' \\<Longrightarrow> semiattractive A r", "show \"?r \\<Longrightarrow> ?l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. semiattractive A r' \\<Longrightarrow> semiattractive A r", "apply (intro semiattractive.intro)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y z.\n       \\<lbrakk>semiattractive A r'; r x y; r y x; r y z; x \\<in> A;\n        y \\<in> A; z \\<in> A\\<rbrakk>\n       \\<Longrightarrow> r x z", "apply (unfold r)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y z.\n       \\<lbrakk>semiattractive A r'; r' x y; r' y x; r' y z; x \\<in> A;\n        y \\<in> A; z \\<in> A\\<rbrakk>\n       \\<Longrightarrow> r' x z", "using semiattractive.attract"], ["proof (prove)\nusing this:\n  \\<lbrakk>semiattractive ?A ?less_eq; ?less_eq ?x ?y; ?less_eq ?y ?x;\n   ?less_eq ?y ?z; ?x \\<in> ?A; ?y \\<in> ?A; ?z \\<in> ?A\\<rbrakk>\n  \\<Longrightarrow> ?less_eq ?x ?z\n\ngoal (1 subgoal):\n 1. \\<And>x y z.\n       \\<lbrakk>semiattractive A r'; r' x y; r' y x; r' y z; x \\<in> A;\n        y \\<in> A; z \\<in> A\\<rbrakk>\n       \\<Longrightarrow> r' x z", "."], ["proof (state)\nthis:\n  semiattractive A r' \\<Longrightarrow> semiattractive A r\n\ngoal:\nNo subgoals!", "qed"], ["", "locale attractive = semiattractive +\n  assumes \"semiattractive A (\\<sqsubseteq>)\\<^sup>-\"\nbegin"], ["", "interpretation less_eq_notations"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "sublocale dual: semiattractive A \"(\\<sqsubseteq>)\\<^sup>-\"\n  rewrites \"\\<And>r. sympartp (r \\<restriction> A) \\<equiv> sympartp r \\<restriction> A\"\n    and \"\\<And>r. sympartp (sympartp r) \\<equiv> sympartp r\"\n    and \"sympartp ((\\<sqsubseteq>) \\<restriction> A)\\<^sup>- \\<equiv> (\\<sim>) \\<restriction> A\"\n    and \"sympartp (\\<sqsubseteq>)\\<^sup>- \\<equiv> (\\<sim>)\"\n    and \"equivpartp (\\<sqsubseteq>)\\<^sup>- \\<equiv> (\\<simeq>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (semiattractive A (\\<lambda>x y. y \\<sqsubseteq> x) &&&\n     (\\<And>r.\n         sympartp (r \\<restriction> A) \\<equiv>\n         sympartp r \\<restriction> A) &&&\n     (\\<And>r. sympartp (sympartp r) \\<equiv> sympartp r)) &&&\n    (sympartp\n      (\\<lambda>x y. ((\\<sqsubseteq>) \\<restriction> A) y x) \\<equiv>\n     (\\<sim>) \\<restriction> A) &&&\n    (sympartp (\\<lambda>x y. y \\<sqsubseteq> x) \\<equiv> (\\<sim>)) &&&\n    equivpartp (\\<lambda>x y. y \\<sqsubseteq> x) \\<equiv> (\\<simeq>)", "using attractive_axioms[unfolded attractive_def]"], ["proof (prove)\nusing this:\n  semiattractive A (\\<sqsubseteq>) \\<and>\n  attractive_axioms A (\\<sqsubseteq>)\n\ngoal (1 subgoal):\n 1. (semiattractive A (\\<lambda>x y. y \\<sqsubseteq> x) &&&\n     (\\<And>r.\n         sympartp (r \\<restriction> A) \\<equiv>\n         sympartp r \\<restriction> A) &&&\n     (\\<And>r. sympartp (sympartp r) \\<equiv> sympartp r)) &&&\n    (sympartp\n      (\\<lambda>x y. ((\\<sqsubseteq>) \\<restriction> A) y x) \\<equiv>\n     (\\<sim>) \\<restriction> A) &&&\n    (sympartp (\\<lambda>x y. y \\<sqsubseteq> x) \\<equiv> (\\<sim>)) &&&\n    equivpartp (\\<lambda>x y. y \\<sqsubseteq> x) \\<equiv> (\\<simeq>)", "by (auto intro!: ext simp: attractive_axioms_def atomize_eq equivpartp_def)"], ["", "lemma order_equiv_trans[trans]:\n  assumes xy: \"x \\<sqsubseteq> y\" and yz: \"y \\<simeq> z\" and x: \"x \\<in> A\" and y: \"y \\<in> A\" and z: \"z \\<in> A\"\n  shows \"x \\<sqsubseteq> z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<sqsubseteq> z", "using dual.attract[OF _ _ _ z y x] xy yz"], ["proof (prove)\nusing this:\n  \\<lbrakk>y \\<sqsubseteq> z; z \\<sqsubseteq> y; x \\<sqsubseteq> y\\<rbrakk>\n  \\<Longrightarrow> x \\<sqsubseteq> z\n  x \\<sqsubseteq> y\n  y \\<simeq> z\n\ngoal (1 subgoal):\n 1. x \\<sqsubseteq> z", "by auto"], ["", "lemma order_sym_trans[trans]:\n  assumes xy: \"x \\<sqsubseteq> y\" and yz: \"y \\<sim> z\" and x: \"x \\<in> A\" and y: \"y \\<in> A\" and z: \"z \\<in> A\"\n  shows \"x \\<sqsubseteq> z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<sqsubseteq> z", "using dual.attract[OF _ _ _ z y x] xy yz"], ["proof (prove)\nusing this:\n  \\<lbrakk>y \\<sqsubseteq> z; z \\<sqsubseteq> y; x \\<sqsubseteq> y\\<rbrakk>\n  \\<Longrightarrow> x \\<sqsubseteq> z\n  x \\<sqsubseteq> y\n  y \\<sim> z\n\ngoal (1 subgoal):\n 1. x \\<sqsubseteq> z", "by auto"], ["", "interpretation Restrp: semiattractive UNIV \"(\\<sqsubseteq>)\\<restriction>A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. semiattractive UNIV ((\\<sqsubseteq>) \\<restriction> A)", "using Restrp_semiattractive"], ["proof (prove)\nusing this:\n  semiattractive UNIV ((\\<sqsubseteq>) \\<restriction> A)\n\ngoal (1 subgoal):\n 1. semiattractive UNIV ((\\<sqsubseteq>) \\<restriction> A)", "."], ["", "interpretation dual.Restrp: semiattractive UNIV \"(\\<sqsubseteq>)\\<^sup>-\\<restriction>A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. semiattractive UNIV ((\\<lambda>x y. y \\<sqsubseteq> x) \\<restriction> A)", "using dual.Restrp_semiattractive"], ["proof (prove)\nusing this:\n  semiattractive UNIV ((\\<lambda>x y. y \\<sqsubseteq> x) \\<restriction> A)\n\ngoal (1 subgoal):\n 1. semiattractive UNIV ((\\<lambda>x y. y \\<sqsubseteq> x) \\<restriction> A)", "."], ["", "lemma Restrp_attractive: \"attractive UNIV ((\\<sqsubseteq>)\\<restriction>A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. attractive UNIV ((\\<sqsubseteq>) \\<restriction> A)", "apply unfold_locales"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y z.\n       \\<lbrakk>((\\<sqsubseteq>) \\<restriction> A) y x;\n        ((\\<sqsubseteq>) \\<restriction> A) x y;\n        ((\\<sqsubseteq>) \\<restriction> A) z y; x \\<in> UNIV; y \\<in> UNIV;\n        z \\<in> UNIV\\<rbrakk>\n       \\<Longrightarrow> ((\\<sqsubseteq>) \\<restriction> A) z x", "using dual.Restrp.attract"], ["proof (prove)\nusing this:\n  \\<lbrakk>((\\<lambda>x y. y \\<sqsubseteq> x) \\<restriction> A) ?x ?y;\n   ((\\<lambda>x y. y \\<sqsubseteq> x) \\<restriction> A) ?y ?x;\n   ((\\<lambda>x y. y \\<sqsubseteq> x) \\<restriction> A) ?y ?z;\n   ?x \\<in> UNIV; ?y \\<in> UNIV; ?z \\<in> UNIV\\<rbrakk>\n  \\<Longrightarrow> ((\\<lambda>x y. y \\<sqsubseteq> x) \\<restriction> A) ?x\n                     ?z\n\ngoal (1 subgoal):\n 1. \\<And>x y z.\n       \\<lbrakk>((\\<sqsubseteq>) \\<restriction> A) y x;\n        ((\\<sqsubseteq>) \\<restriction> A) x y;\n        ((\\<sqsubseteq>) \\<restriction> A) z y; x \\<in> UNIV; y \\<in> UNIV;\n        z \\<in> UNIV\\<rbrakk>\n       \\<Longrightarrow> ((\\<sqsubseteq>) \\<restriction> A) z x", "by auto"], ["", "lemma attractive_subset: \"B \\<subseteq> A \\<Longrightarrow> attractive B (\\<sqsubseteq>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. B \\<subseteq> A \\<Longrightarrow> attractive B (\\<sqsubseteq>)", "apply (intro attractive.intro attractive_axioms.intro)"], ["proof (prove)\ngoal (2 subgoals):\n 1. B \\<subseteq> A \\<Longrightarrow> semiattractive B (\\<sqsubseteq>)\n 2. B \\<subseteq> A \\<Longrightarrow>\n    semiattractive B (\\<lambda>x y. y \\<sqsubseteq> x)", "using semiattractive_subset dual.semiattractive_subset"], ["proof (prove)\nusing this:\n  ?B \\<subseteq> A \\<Longrightarrow> semiattractive ?B (\\<sqsubseteq>)\n  ?B \\<subseteq> A \\<Longrightarrow>\n  semiattractive ?B (\\<lambda>x y. y \\<sqsubseteq> x)\n\ngoal (2 subgoals):\n 1. B \\<subseteq> A \\<Longrightarrow> semiattractive B (\\<sqsubseteq>)\n 2. B \\<subseteq> A \\<Longrightarrow>\n    semiattractive B (\\<lambda>x y. y \\<sqsubseteq> x)", "by auto"], ["", "end"], ["", "lemma attractive_cong:\n  assumes r: \"\\<And>a b. a \\<in> A \\<Longrightarrow> b \\<in> A \\<Longrightarrow> r a b \\<longleftrightarrow> r' a b\"\n  shows \"attractive A r \\<longleftrightarrow> attractive A r'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. attractive A r = attractive A r'", "by (simp add: attractive_def attractive_axioms_def r cong: semiattractive_cong)"], ["", "context antisymmetric begin"], ["", "sublocale attractive"], ["proof (prove)\ngoal (1 subgoal):\n 1. attractive A (\\<sqsubseteq>)", "apply unfold_locales"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<sqsubseteq> y; y \\<sqsubseteq> x; y \\<sqsubseteq> z;\n        x \\<in> A; y \\<in> A; z \\<in> A\\<rbrakk>\n       \\<Longrightarrow> x \\<sqsubseteq> z\n 2. \\<And>x y z.\n       \\<lbrakk>y \\<sqsubseteq> x; x \\<sqsubseteq> y; z \\<sqsubseteq> y;\n        x \\<in> A; y \\<in> A; z \\<in> A\\<rbrakk>\n       \\<Longrightarrow> z \\<sqsubseteq> x", "by (auto dest: antisym)"], ["", "end"], ["", "context transitive begin"], ["", "sublocale attractive\n  rewrites \"\\<And>r. sympartp (r \\<restriction> A) \\<equiv> sympartp r \\<restriction> A\"\n    and \"\\<And>r. sympartp (sympartp r) \\<equiv> sympartp r\"\n    and \"sympartp (\\<sqsubseteq>)\\<^sup>- \\<equiv> sympartp (\\<sqsubseteq>)\"\n    and \"(sympartp (\\<sqsubseteq>))\\<^sup>- \\<equiv> sympartp (\\<sqsubseteq>)\"\n    and \"(sympartp (\\<sqsubseteq>) \\<restriction> A)\\<^sup>- \\<equiv> sympartp (\\<sqsubseteq>) \\<restriction> A\"\n    and \"asympartp (asympartp (\\<sqsubseteq>)) = asympartp (\\<sqsubseteq>)\"\n    and \"asympartp (sympartp (\\<sqsubseteq>)) = bot\"\n    and \"asympartp (\\<sqsubseteq>) \\<restriction> A = asympartp ((\\<sqsubseteq>) \\<restriction> A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((attractive A (\\<sqsubseteq>) &&&\n      (\\<And>r.\n          sympartp (r \\<restriction> A) \\<equiv>\n          sympartp r \\<restriction> A)) &&&\n     (\\<And>r. sympartp (sympartp r) \\<equiv> sympartp r) &&&\n     sympartp (\\<lambda>x y. y \\<sqsubseteq> x) \\<equiv>\n     sympartp (\\<sqsubseteq>)) &&&\n    ((\\<lambda>x y. sympartp (\\<sqsubseteq>) y x \\<equiv>\n      sympartp (\\<sqsubseteq>)) &&&\n     \\<lambda>x y. (sympartp (\\<sqsubseteq>) \\<restriction> A) y x \\<equiv>\n     sympartp (\\<sqsubseteq>) \\<restriction> A) &&&\n    asympartp (asympartp (\\<sqsubseteq>)) = asympartp (\\<sqsubseteq>) &&&\n    asympartp (sympartp (\\<sqsubseteq>)) = bot &&&\n    asympartp (\\<sqsubseteq>) \\<restriction> A =\n    asympartp ((\\<sqsubseteq>) \\<restriction> A)", "apply unfold_locales"], ["proof (prove)\ngoal (10 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<sqsubseteq> y; y \\<sqsubseteq> x; y \\<sqsubseteq> z;\n        x \\<in> A; y \\<in> A; z \\<in> A\\<rbrakk>\n       \\<Longrightarrow> x \\<sqsubseteq> z\n 2. \\<And>x y z.\n       \\<lbrakk>y \\<sqsubseteq> x; x \\<sqsubseteq> y; z \\<sqsubseteq> y;\n        x \\<in> A; y \\<in> A; z \\<in> A\\<rbrakk>\n       \\<Longrightarrow> z \\<sqsubseteq> x\n 3. \\<And>r.\n       sympartp (r \\<restriction> A) \\<equiv> sympartp r \\<restriction> A\n 4. \\<And>r. sympartp (sympartp r) \\<equiv> sympartp r\n 5. sympartp (\\<lambda>x y. y \\<sqsubseteq> x) \\<equiv>\n    sympartp (\\<sqsubseteq>)\n 6. \\<lambda>x y. sympartp (\\<sqsubseteq>) y x \\<equiv>\n    sympartp (\\<sqsubseteq>)\n 7. \\<lambda>x y. (sympartp (\\<sqsubseteq>) \\<restriction> A) y x \\<equiv>\n    sympartp (\\<sqsubseteq>) \\<restriction> A\n 8. asympartp (asympartp (\\<sqsubseteq>)) = asympartp (\\<sqsubseteq>)\n 9. asympartp (sympartp (\\<sqsubseteq>)) = bot\n 10. asympartp (\\<sqsubseteq>) \\<restriction> A =\n     asympartp ((\\<sqsubseteq>) \\<restriction> A)", "by (auto intro!:ext dest: trans simp: atomize_eq)"], ["", "end"], ["", "subsection \\<open>Combined Properties\\<close>"], ["", "text \\<open>Some combinations of the above basic properties are given names.\\<close>"], ["", "locale asymmetric = related_set A \"(\\<sqsubset>)\" for A and less (infix \"\\<sqsubset>\" 50) +\n  assumes asym: \"x \\<sqsubset> y \\<Longrightarrow> y \\<sqsubset> x \\<Longrightarrow> x \\<in> A \\<Longrightarrow> y \\<in> A \\<Longrightarrow> False\"\nbegin"], ["", "sublocale irreflexive"], ["proof (prove)\ngoal (1 subgoal):\n 1. irreflexive A (\\<sqsubset>)", "apply unfold_locales"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> A \\<Longrightarrow> \\<not> x \\<sqsubset> x", "by (auto dest: asym)"], ["", "lemma antisymmetric_axioms: \"antisymmetric A (\\<sqsubset>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. antisymmetric A (\\<sqsubset>)", "apply unfold_locales"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<sqsubset> y; y \\<sqsubset> x; x \\<in> A;\n        y \\<in> A\\<rbrakk>\n       \\<Longrightarrow> x = y", "by (auto dest: asym)"], ["", "lemma Restrp_asymmetric: \"asymmetric UNIV ((\\<sqsubset>)\\<restriction>A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. asymmetric UNIV ((\\<sqsubset>) \\<restriction> A)", "apply unfold_locales"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>((\\<sqsubset>) \\<restriction> A) x y;\n        ((\\<sqsubset>) \\<restriction> A) y x; x \\<in> UNIV;\n        y \\<in> UNIV\\<rbrakk>\n       \\<Longrightarrow> False", "by (auto dest:asym)"], ["", "lemma asymmetric_subset: \"B \\<subseteq> A \\<Longrightarrow> asymmetric B (\\<sqsubset>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. B \\<subseteq> A \\<Longrightarrow> asymmetric B (\\<sqsubset>)", "apply unfold_locales"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>B \\<subseteq> A; x \\<sqsubset> y; y \\<sqsubset> x;\n        x \\<in> B; y \\<in> B\\<rbrakk>\n       \\<Longrightarrow> False", "using asym"], ["proof (prove)\nusing this:\n  \\<lbrakk>?x \\<sqsubset> ?y; ?y \\<sqsubset> ?x; ?x \\<in> A;\n   ?y \\<in> A\\<rbrakk>\n  \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>B \\<subseteq> A; x \\<sqsubset> y; y \\<sqsubset> x;\n        x \\<in> B; y \\<in> B\\<rbrakk>\n       \\<Longrightarrow> False", "by auto"], ["", "end"], ["", "lemma asymmetric_iff_irreflexive_antisymmetric:\n  fixes less (infix \"\\<sqsubset>\" 50)\n  shows \"asymmetric A (\\<sqsubset>) \\<longleftrightarrow> irreflexive A (\\<sqsubset>) \\<and> antisymmetric A (\\<sqsubset>)\" (is \"?l \\<longleftrightarrow> ?r\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. asymmetric A (\\<sqsubset>) =\n    (irreflexive A (\\<sqsubset>) \\<and> antisymmetric A (\\<sqsubset>))", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. asymmetric A (\\<sqsubset>) \\<Longrightarrow>\n    irreflexive A (\\<sqsubset>) \\<and> antisymmetric A (\\<sqsubset>)\n 2. irreflexive A (\\<sqsubset>) \\<and>\n    antisymmetric A (\\<sqsubset>) \\<Longrightarrow>\n    asymmetric A (\\<sqsubset>)", "assume ?l"], ["proof (state)\nthis:\n  asymmetric A (\\<sqsubset>)\n\ngoal (2 subgoals):\n 1. asymmetric A (\\<sqsubset>) \\<Longrightarrow>\n    irreflexive A (\\<sqsubset>) \\<and> antisymmetric A (\\<sqsubset>)\n 2. irreflexive A (\\<sqsubset>) \\<and>\n    antisymmetric A (\\<sqsubset>) \\<Longrightarrow>\n    asymmetric A (\\<sqsubset>)", "then"], ["proof (chain)\npicking this:\n  asymmetric A (\\<sqsubset>)", "interpret asymmetric"], ["proof (prove)\nusing this:\n  asymmetric A (\\<sqsubset>)\n\ngoal (1 subgoal):\n 1. asymmetric A (\\<sqsubset>)", "."], ["proof (state)\ngoal (2 subgoals):\n 1. asymmetric A (\\<sqsubset>) \\<Longrightarrow>\n    irreflexive A (\\<sqsubset>) \\<and> antisymmetric A (\\<sqsubset>)\n 2. irreflexive A (\\<sqsubset>) \\<and>\n    antisymmetric A (\\<sqsubset>) \\<Longrightarrow>\n    asymmetric A (\\<sqsubset>)", "show ?r"], ["proof (prove)\ngoal (1 subgoal):\n 1. irreflexive A (\\<sqsubset>) \\<and> antisymmetric A (\\<sqsubset>)", "by (auto dest: asym)"], ["proof (state)\nthis:\n  irreflexive A (\\<sqsubset>) \\<and> antisymmetric A (\\<sqsubset>)\n\ngoal (1 subgoal):\n 1. irreflexive A (\\<sqsubset>) \\<and>\n    antisymmetric A (\\<sqsubset>) \\<Longrightarrow>\n    asymmetric A (\\<sqsubset>)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. irreflexive A (\\<sqsubset>) \\<and>\n    antisymmetric A (\\<sqsubset>) \\<Longrightarrow>\n    asymmetric A (\\<sqsubset>)", "assume ?r"], ["proof (state)\nthis:\n  irreflexive A (\\<sqsubset>) \\<and> antisymmetric A (\\<sqsubset>)\n\ngoal (1 subgoal):\n 1. irreflexive A (\\<sqsubset>) \\<and>\n    antisymmetric A (\\<sqsubset>) \\<Longrightarrow>\n    asymmetric A (\\<sqsubset>)", "then"], ["proof (chain)\npicking this:\n  irreflexive A (\\<sqsubset>) \\<and> antisymmetric A (\\<sqsubset>)", "interpret irreflexive + antisymmetric A \"(\\<sqsubset>)\""], ["proof (prove)\nusing this:\n  irreflexive A (\\<sqsubset>) \\<and> antisymmetric A (\\<sqsubset>)\n\ngoal (1 subgoal):\n 1. irreflexive A (\\<sqsubset>) &&& antisymmetric A (\\<sqsubset>)", "by auto"], ["proof (state)\ngoal (1 subgoal):\n 1. irreflexive A (\\<sqsubset>) \\<and>\n    antisymmetric A (\\<sqsubset>) \\<Longrightarrow>\n    asymmetric A (\\<sqsubset>)", "show ?l"], ["proof (prove)\ngoal (1 subgoal):\n 1. asymmetric A (\\<sqsubset>)", "by (auto intro!:asymmetric.intro dest: antisym irrefl)"], ["proof (state)\nthis:\n  asymmetric A (\\<sqsubset>)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma asymmetric_cong:\n  assumes r: \"\\<And>a b. a \\<in> A \\<Longrightarrow> b \\<in> A \\<Longrightarrow> r a b \\<longleftrightarrow> r' a b\"\n  shows \"asymmetric A r \\<longleftrightarrow> asymmetric A r'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. asymmetric A r = asymmetric A r'", "by (simp add: asymmetric_iff_irreflexive_antisymmetric r cong: irreflexive_cong antisymmetric_cong)"], ["", "locale quasi_ordered_set = reflexive + transitive\nbegin"], ["", "lemma quasi_ordered_subset: \"B \\<subseteq> A \\<Longrightarrow> quasi_ordered_set B (\\<sqsubseteq>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. B \\<subseteq> A \\<Longrightarrow> quasi_ordered_set B (\\<sqsubseteq>)", "apply intro_locales"], ["proof (prove)\ngoal (2 subgoals):\n 1. B \\<subseteq> A \\<Longrightarrow> reflexive B (\\<sqsubseteq>)\n 2. B \\<subseteq> A \\<Longrightarrow> transitive B (\\<sqsubseteq>)", "using reflexive_subset transitive_subset"], ["proof (prove)\nusing this:\n  ?B \\<subseteq> A \\<Longrightarrow> reflexive ?B (\\<sqsubseteq>)\n  ?B \\<subseteq> A \\<Longrightarrow> transitive ?B (\\<sqsubseteq>)\n\ngoal (2 subgoals):\n 1. B \\<subseteq> A \\<Longrightarrow> reflexive B (\\<sqsubseteq>)\n 2. B \\<subseteq> A \\<Longrightarrow> transitive B (\\<sqsubseteq>)", "by auto"], ["", "end"], ["", "lemma quasi_ordered_set_cong:\n  assumes r: \"\\<And>a b. a \\<in> A \\<Longrightarrow> b \\<in> A \\<Longrightarrow> r a b \\<longleftrightarrow> r' a b\"\n  shows \"quasi_ordered_set A r \\<longleftrightarrow> quasi_ordered_set A r'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. quasi_ordered_set A r = quasi_ordered_set A r'", "by (simp add: quasi_ordered_set_def r cong: reflexive_cong transitive_cong)"], ["", "locale near_ordered_set = antisymmetric + transitive\nbegin"], ["", "interpretation Restrp: antisymmetric UNIV \"(\\<sqsubseteq>)\\<restriction>A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. antisymmetric UNIV ((\\<sqsubseteq>) \\<restriction> A)", "using Restrp_antisymmetric"], ["proof (prove)\nusing this:\n  antisymmetric UNIV ((\\<sqsubseteq>) \\<restriction> A)\n\ngoal (1 subgoal):\n 1. antisymmetric UNIV ((\\<sqsubseteq>) \\<restriction> A)", "."], ["", "interpretation Restrp: transitive UNIV \"(\\<sqsubseteq>)\\<restriction>A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. transitive UNIV ((\\<sqsubseteq>) \\<restriction> A)", "using Restrp_transitive"], ["proof (prove)\nusing this:\n  transitive UNIV ((\\<sqsubseteq>) \\<restriction> A)\n\ngoal (1 subgoal):\n 1. transitive UNIV ((\\<sqsubseteq>) \\<restriction> A)", "."], ["", "lemma Restrp_near_order: \"near_ordered_set UNIV ((\\<sqsubseteq>)\\<restriction>A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. near_ordered_set UNIV ((\\<sqsubseteq>) \\<restriction> A)", ".."], ["", "lemma near_ordered_subset: \"B \\<subseteq> A \\<Longrightarrow> near_ordered_set B (\\<sqsubseteq>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. B \\<subseteq> A \\<Longrightarrow> near_ordered_set B (\\<sqsubseteq>)", "apply intro_locales"], ["proof (prove)\ngoal (2 subgoals):\n 1. B \\<subseteq> A \\<Longrightarrow> antisymmetric B (\\<sqsubseteq>)\n 2. B \\<subseteq> A \\<Longrightarrow> transitive B (\\<sqsubseteq>)", "using antisymmetric_subset transitive_subset"], ["proof (prove)\nusing this:\n  ?B \\<subseteq> A \\<Longrightarrow> antisymmetric ?B (\\<sqsubseteq>)\n  ?B \\<subseteq> A \\<Longrightarrow> transitive ?B (\\<sqsubseteq>)\n\ngoal (2 subgoals):\n 1. B \\<subseteq> A \\<Longrightarrow> antisymmetric B (\\<sqsubseteq>)\n 2. B \\<subseteq> A \\<Longrightarrow> transitive B (\\<sqsubseteq>)", "by auto"], ["", "end"], ["", "lemma near_ordered_set_cong:\n  assumes r: \"\\<And>a b. a \\<in> A \\<Longrightarrow> b \\<in> A \\<Longrightarrow> r a b \\<longleftrightarrow> r' a b\"\n  shows \"near_ordered_set A r \\<longleftrightarrow> near_ordered_set A r'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. near_ordered_set A r = near_ordered_set A r'", "by (simp add: near_ordered_set_def r cong: antisymmetric_cong transitive_cong)"], ["", "locale pseudo_ordered_set = reflexive + antisymmetric\nbegin"], ["", "interpretation less_eq_notations"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "lemma sym_eq[simp]: \"x \\<in> A \\<Longrightarrow> y \\<in> A \\<Longrightarrow> x \\<sim> y \\<longleftrightarrow> x = y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<in> A; y \\<in> A\\<rbrakk>\n    \\<Longrightarrow> (x \\<sim> y) = (x = y)", "by (auto simp: refl dest: antisym)"], ["", "lemma extreme_bound_singleton_eq[simp]: \"x \\<in> A \\<Longrightarrow> extreme_bound A (\\<sqsubseteq>) {x} y \\<longleftrightarrow> x = y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> A \\<Longrightarrow>\n    extreme_bound A (\\<sqsubseteq>) {x} y = (x = y)", "by (auto intro!: antisym)"], ["", "lemma eq_iff: \"x \\<in> A \\<Longrightarrow> y \\<in> A \\<Longrightarrow> x = y \\<longleftrightarrow> x \\<sqsubseteq> y \\<and> y \\<sqsubseteq> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<in> A; y \\<in> A\\<rbrakk>\n    \\<Longrightarrow> (x = y) = (x \\<sqsubseteq> y \\<and> y \\<sqsubseteq> x)", "by (auto dest: antisym simp:refl)"], ["", "lemma extreme_order_iff_eq: \"e \\<in> A \\<Longrightarrow> extreme {x \\<in> A. x \\<sqsubseteq> e} (\\<sqsubseteq>) s \\<longleftrightarrow> e = s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. e \\<in> A \\<Longrightarrow>\n    extreme {x \\<in> A. x \\<sqsubseteq> e} (\\<sqsubseteq>) s = (e = s)", "by (auto intro!: antisym)"], ["", "lemma pseudo_ordered_subset: \"B \\<subseteq> A \\<Longrightarrow> pseudo_ordered_set B (\\<sqsubseteq>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. B \\<subseteq> A \\<Longrightarrow> pseudo_ordered_set B (\\<sqsubseteq>)", "apply intro_locales"], ["proof (prove)\ngoal (2 subgoals):\n 1. B \\<subseteq> A \\<Longrightarrow> reflexive B (\\<sqsubseteq>)\n 2. B \\<subseteq> A \\<Longrightarrow> antisymmetric B (\\<sqsubseteq>)", "using reflexive_subset antisymmetric_subset"], ["proof (prove)\nusing this:\n  ?B \\<subseteq> A \\<Longrightarrow> reflexive ?B (\\<sqsubseteq>)\n  ?B \\<subseteq> A \\<Longrightarrow> antisymmetric ?B (\\<sqsubseteq>)\n\ngoal (2 subgoals):\n 1. B \\<subseteq> A \\<Longrightarrow> reflexive B (\\<sqsubseteq>)\n 2. B \\<subseteq> A \\<Longrightarrow> antisymmetric B (\\<sqsubseteq>)", "by auto"], ["", "end"], ["", "lemma pseudo_ordered_set_cong:\n  assumes r: \"\\<And>a b. a \\<in> A \\<Longrightarrow> b \\<in> A \\<Longrightarrow> r a b \\<longleftrightarrow> r' a b\"\n  shows \"pseudo_ordered_set A r \\<longleftrightarrow> pseudo_ordered_set A r'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pseudo_ordered_set A r = pseudo_ordered_set A r'", "by (simp add: pseudo_ordered_set_def r cong: reflexive_cong antisymmetric_cong)"], ["", "locale partially_ordered_set = reflexive + antisymmetric + transitive\nbegin"], ["", "sublocale pseudo_ordered_set + quasi_ordered_set + near_ordered_set"], ["proof (prove)\ngoal (1 subgoal):\n 1. pseudo_ordered_set A (\\<sqsubseteq>) &&&\n    quasi_ordered_set A (\\<sqsubseteq>) &&&\n    near_ordered_set A (\\<sqsubseteq>)", ".."], ["", "lemma partially_ordered_subset: \"B \\<subseteq> A \\<Longrightarrow> partially_ordered_set B (\\<sqsubseteq>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. B \\<subseteq> A \\<Longrightarrow>\n    partially_ordered_set B (\\<sqsubseteq>)", "apply intro_locales"], ["proof (prove)\ngoal (3 subgoals):\n 1. B \\<subseteq> A \\<Longrightarrow> reflexive B (\\<sqsubseteq>)\n 2. B \\<subseteq> A \\<Longrightarrow> antisymmetric B (\\<sqsubseteq>)\n 3. B \\<subseteq> A \\<Longrightarrow> transitive B (\\<sqsubseteq>)", "using reflexive_subset transitive_subset antisymmetric_subset"], ["proof (prove)\nusing this:\n  ?B \\<subseteq> A \\<Longrightarrow> reflexive ?B (\\<sqsubseteq>)\n  ?B \\<subseteq> A \\<Longrightarrow> transitive ?B (\\<sqsubseteq>)\n  ?B \\<subseteq> A \\<Longrightarrow> antisymmetric ?B (\\<sqsubseteq>)\n\ngoal (3 subgoals):\n 1. B \\<subseteq> A \\<Longrightarrow> reflexive B (\\<sqsubseteq>)\n 2. B \\<subseteq> A \\<Longrightarrow> antisymmetric B (\\<sqsubseteq>)\n 3. B \\<subseteq> A \\<Longrightarrow> transitive B (\\<sqsubseteq>)", "by auto"], ["", "end"], ["", "lemma partially_ordered_set_cong:\n  assumes r: \"\\<And>a b. a \\<in> A \\<Longrightarrow> b \\<in> A \\<Longrightarrow> r a b \\<longleftrightarrow> r' a b\"\n  shows \"partially_ordered_set A r \\<longleftrightarrow> partially_ordered_set A r'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. partially_ordered_set A r = partially_ordered_set A r'", "by (simp add: partially_ordered_set_def r cong: reflexive_cong antisymmetric_cong transitive_cong)"], ["", "locale strict_ordered_set = irreflexive + transitive A \"(\\<sqsubset>)\"\nbegin"], ["", "sublocale asymmetric"], ["proof (prove)\ngoal (1 subgoal):\n 1. asymmetric A (\\<sqsubset>)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<sqsubset> y; y \\<sqsubset> x; x \\<in> A;\n        y \\<in> A\\<rbrakk>\n       \\<Longrightarrow> False", "fix x y"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<sqsubset> y; y \\<sqsubset> x; x \\<in> A;\n        y \\<in> A\\<rbrakk>\n       \\<Longrightarrow> False", "assume x: \"x \\<in> A\" and y: \"y \\<in> A\""], ["proof (state)\nthis:\n  x \\<in> A\n  y \\<in> A\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<sqsubset> y; y \\<sqsubset> x; x \\<in> A;\n        y \\<in> A\\<rbrakk>\n       \\<Longrightarrow> False", "assume xy: \"x \\<sqsubset> y\""], ["proof (state)\nthis:\n  x \\<sqsubset> y\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<sqsubset> y; y \\<sqsubset> x; x \\<in> A;\n        y \\<in> A\\<rbrakk>\n       \\<Longrightarrow> False", "also"], ["proof (state)\nthis:\n  x \\<sqsubset> y\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<sqsubset> y; y \\<sqsubset> x; x \\<in> A;\n        y \\<in> A\\<rbrakk>\n       \\<Longrightarrow> False", "assume yx: \"y \\<sqsubset> x\""], ["proof (state)\nthis:\n  y \\<sqsubset> x\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<sqsubset> y; y \\<sqsubset> x; x \\<in> A;\n        y \\<in> A\\<rbrakk>\n       \\<Longrightarrow> False", "finally"], ["proof (chain)\npicking this:\n  \\<lbrakk>x \\<in> A; y \\<in> A; x \\<in> A\\<rbrakk>\n  \\<Longrightarrow> x \\<sqsubset> x", "have \"x \\<sqsubset> x\""], ["proof (prove)\nusing this:\n  \\<lbrakk>x \\<in> A; y \\<in> A; x \\<in> A\\<rbrakk>\n  \\<Longrightarrow> x \\<sqsubset> x\n\ngoal (1 subgoal):\n 1. x \\<sqsubset> x", "using x y"], ["proof (prove)\nusing this:\n  \\<lbrakk>x \\<in> A; y \\<in> A; x \\<in> A\\<rbrakk>\n  \\<Longrightarrow> x \\<sqsubset> x\n  x \\<in> A\n  y \\<in> A\n\ngoal (1 subgoal):\n 1. x \\<sqsubset> x", "by auto"], ["proof (state)\nthis:\n  x \\<sqsubset> x\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<sqsubset> y; y \\<sqsubset> x; x \\<in> A;\n        y \\<in> A\\<rbrakk>\n       \\<Longrightarrow> False", "with x"], ["proof (chain)\npicking this:\n  x \\<in> A\n  x \\<sqsubset> x", "show False"], ["proof (prove)\nusing this:\n  x \\<in> A\n  x \\<sqsubset> x\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma near_ordered_set_axioms: \"near_ordered_set A (\\<sqsubset>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. near_ordered_set A (\\<sqsubset>)", "using antisymmetric_axioms"], ["proof (prove)\nusing this:\n  antisymmetric A (\\<sqsubset>)\n\ngoal (1 subgoal):\n 1. near_ordered_set A (\\<sqsubset>)", "by intro_locales"], ["", "interpretation Restrp: asymmetric UNIV \"(\\<sqsubset>)\\<restriction>A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. asymmetric UNIV ((\\<sqsubset>) \\<restriction> A)", "using Restrp_asymmetric"], ["proof (prove)\nusing this:\n  asymmetric UNIV ((\\<sqsubset>) \\<restriction> A)\n\ngoal (1 subgoal):\n 1. asymmetric UNIV ((\\<sqsubset>) \\<restriction> A)", "."], ["", "interpretation Restrp: transitive UNIV \"(\\<sqsubset>)\\<restriction>A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. transitive UNIV ((\\<sqsubset>) \\<restriction> A)", "using Restrp_transitive"], ["proof (prove)\nusing this:\n  transitive UNIV ((\\<sqsubset>) \\<restriction> A)\n\ngoal (1 subgoal):\n 1. transitive UNIV ((\\<sqsubset>) \\<restriction> A)", "."], ["", "lemma Restrp_strict_order: \"strict_ordered_set UNIV ((\\<sqsubset>)\\<restriction>A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. strict_ordered_set UNIV ((\\<sqsubset>) \\<restriction> A)", ".."], ["", "lemma strict_ordered_subset: \"B \\<subseteq> A \\<Longrightarrow> strict_ordered_set B (\\<sqsubset>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. B \\<subseteq> A \\<Longrightarrow> strict_ordered_set B (\\<sqsubset>)", "apply intro_locales"], ["proof (prove)\ngoal (2 subgoals):\n 1. B \\<subseteq> A \\<Longrightarrow> irreflexive B (\\<sqsubset>)\n 2. B \\<subseteq> A \\<Longrightarrow> transitive B (\\<sqsubset>)", "using irreflexive_subset transitive_subset"], ["proof (prove)\nusing this:\n  ?B \\<subseteq> A \\<Longrightarrow> irreflexive ?B (\\<sqsubset>)\n  ?B \\<subseteq> A \\<Longrightarrow> transitive ?B (\\<sqsubset>)\n\ngoal (2 subgoals):\n 1. B \\<subseteq> A \\<Longrightarrow> irreflexive B (\\<sqsubset>)\n 2. B \\<subseteq> A \\<Longrightarrow> transitive B (\\<sqsubset>)", "by auto"], ["", "end"], ["", "lemma strict_ordered_set_cong:\n  assumes r: \"\\<And>a b. a \\<in> A \\<Longrightarrow> b \\<in> A \\<Longrightarrow> r a b \\<longleftrightarrow> r' a b\"\n  shows \"strict_ordered_set A r \\<longleftrightarrow> strict_ordered_set A r'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. strict_ordered_set A r = strict_ordered_set A r'", "by (simp add: strict_ordered_set_def r cong: irreflexive_cong transitive_cong)"], ["", "locale tolerance = symmetric + reflexive A \"(\\<sim>)\"\nbegin"], ["", "lemma tolerance_subset: \"B \\<subseteq> A \\<Longrightarrow> tolerance B (\\<sim>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. B \\<subseteq> A \\<Longrightarrow> tolerance B (\\<sim>)", "apply intro_locales"], ["proof (prove)\ngoal (2 subgoals):\n 1. B \\<subseteq> A \\<Longrightarrow> symmetric B (\\<sim>)\n 2. B \\<subseteq> A \\<Longrightarrow> reflexive B (\\<sim>)", "using symmetric_subset reflexive_subset"], ["proof (prove)\nusing this:\n  ?B \\<subseteq> A \\<Longrightarrow> symmetric ?B (\\<sim>)\n  ?B \\<subseteq> A \\<Longrightarrow> reflexive ?B (\\<sim>)\n\ngoal (2 subgoals):\n 1. B \\<subseteq> A \\<Longrightarrow> symmetric B (\\<sim>)\n 2. B \\<subseteq> A \\<Longrightarrow> reflexive B (\\<sim>)", "by auto"], ["", "end"], ["", "lemma tolerance_cong:\n  assumes r: \"\\<And>a b. a \\<in> A \\<Longrightarrow> b \\<in> A \\<Longrightarrow> r a b \\<longleftrightarrow> r' a b\"\n  shows \"tolerance A r \\<longleftrightarrow> tolerance A r'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tolerance A r = tolerance A r'", "by (simp add: tolerance_def r cong: reflexive_cong symmetric_cong)"], ["", "global_interpretation equiv: tolerance UNIV \"equivpartp r\"\n  rewrites \"\\<And>r. r \\<restriction> UNIV \\<equiv> r\"\n    and \"\\<And>x. x \\<in> UNIV \\<equiv> True\"\n    and \"\\<And>P1. (True \\<Longrightarrow> P1) \\<equiv> Trueprop P1\"\n    and \"\\<And>P1 P2. (True \\<Longrightarrow> PROP P1 \\<Longrightarrow> PROP P2) \\<equiv> (PROP P1 \\<Longrightarrow> PROP P2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (tolerance UNIV (equivpartp r) &&&\n     (\\<And>r. r \\<restriction> UNIV \\<equiv> r)) &&&\n    (\\<And>x. x \\<in> UNIV \\<equiv> True) &&&\n    (\\<And>P1. (True \\<Longrightarrow> P1) \\<equiv> P1) &&&\n    (\\<And>P1 P2.\n        (\\<lbrakk>True; PROP P1\\<rbrakk> \\<Longrightarrow> PROP P2) \\<equiv>\n        (PROP P1 \\<Longrightarrow> PROP P2))", "by unfold_locales (auto simp:equivpartp_def)"], ["", "locale partial_equivalence = symmetric +\n  assumes \"transitive A (\\<sim>)\"\nbegin"], ["", "sublocale transitive A \"(\\<sim>)\"\n  rewrites \"sympartp (\\<sim>)\\<restriction>A \\<equiv> (\\<sim>)\\<restriction>A\"\n    and \"sympartp ((\\<sim>)\\<restriction>A) \\<equiv> (\\<sim>)\\<restriction>A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. transitive A (\\<sim>) &&&\n    (sympartp (\\<sim>) \\<restriction> A \\<equiv>\n     (\\<sim>) \\<restriction> A) &&&\n    sympartp ((\\<sim>) \\<restriction> A) \\<equiv> (\\<sim>) \\<restriction> A", "using partial_equivalence_axioms"], ["proof (prove)\nusing this:\n  partial_equivalence A (\\<sim>)\n\ngoal (1 subgoal):\n 1. transitive A (\\<sim>) &&&\n    (sympartp (\\<sim>) \\<restriction> A \\<equiv>\n     (\\<sim>) \\<restriction> A) &&&\n    sympartp ((\\<sim>) \\<restriction> A) \\<equiv> (\\<sim>) \\<restriction> A", "unfolding partial_equivalence_axioms_def partial_equivalence_def"], ["proof (prove)\nusing this:\n  symmetric A (\\<sim>) \\<and> transitive A (\\<sim>)\n\ngoal (1 subgoal):\n 1. transitive A (\\<sim>) &&&\n    (sympartp (\\<sim>) \\<restriction> A \\<equiv>\n     (\\<sim>) \\<restriction> A) &&&\n    sympartp ((\\<sim>) \\<restriction> A) \\<equiv> (\\<sim>) \\<restriction> A", "by (auto simp: atomize_eq sym intro!:ext)"], ["", "lemma partial_equivalence_subset: \"B \\<subseteq> A \\<Longrightarrow> partial_equivalence B (\\<sim>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. B \\<subseteq> A \\<Longrightarrow> partial_equivalence B (\\<sim>)", "apply (intro partial_equivalence.intro partial_equivalence_axioms.intro)"], ["proof (prove)\ngoal (2 subgoals):\n 1. B \\<subseteq> A \\<Longrightarrow> symmetric B (\\<sim>)\n 2. B \\<subseteq> A \\<Longrightarrow> transitive B (\\<sim>)", "using symmetric_subset transitive_subset"], ["proof (prove)\nusing this:\n  ?B \\<subseteq> A \\<Longrightarrow> symmetric ?B (\\<sim>)\n  ?B \\<subseteq> A \\<Longrightarrow> transitive ?B (\\<sim>)\n\ngoal (2 subgoals):\n 1. B \\<subseteq> A \\<Longrightarrow> symmetric B (\\<sim>)\n 2. B \\<subseteq> A \\<Longrightarrow> transitive B (\\<sim>)", "by auto"], ["", "end"], ["", "lemma partial_equivalence_cong:\n  assumes r: \"\\<And>a b. a \\<in> A \\<Longrightarrow> b \\<in> A \\<Longrightarrow> r a b \\<longleftrightarrow> r' a b\"\n  shows \"partial_equivalence A r \\<longleftrightarrow> partial_equivalence A r'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. partial_equivalence A r = partial_equivalence A r'", "by (simp add: partial_equivalence_def partial_equivalence_axioms_def r\n      cong: transitive_cong symmetric_cong)"], ["", "locale equivalence = symmetric + reflexive A \"(\\<sim>)\" + transitive A \"(\\<sim>)\"\nbegin"], ["", "sublocale tolerance + partial_equivalence + quasi_ordered_set A \"(\\<sim>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tolerance A (\\<sim>) &&&\n    partial_equivalence A (\\<sim>) &&& quasi_ordered_set A (\\<sim>)", ".."], ["", "lemma equivalence_subset: \"B \\<subseteq> A \\<Longrightarrow> equivalence B (\\<sim>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. B \\<subseteq> A \\<Longrightarrow> equivalence B (\\<sim>)", "apply (intro equivalence.intro)"], ["proof (prove)\ngoal (3 subgoals):\n 1. B \\<subseteq> A \\<Longrightarrow> symmetric B (\\<sim>)\n 2. B \\<subseteq> A \\<Longrightarrow> reflexive B (\\<sim>)\n 3. B \\<subseteq> A \\<Longrightarrow> transitive B (\\<sim>)", "using symmetric_subset transitive_subset"], ["proof (prove)\nusing this:\n  ?B \\<subseteq> A \\<Longrightarrow> symmetric ?B (\\<sim>)\n  ?B \\<subseteq> A \\<Longrightarrow> transitive ?B (\\<sim>)\n\ngoal (3 subgoals):\n 1. B \\<subseteq> A \\<Longrightarrow> symmetric B (\\<sim>)\n 2. B \\<subseteq> A \\<Longrightarrow> reflexive B (\\<sim>)\n 3. B \\<subseteq> A \\<Longrightarrow> transitive B (\\<sim>)", "by auto"], ["", "end"], ["", "lemma equivalence_cong:\n  assumes r: \"\\<And>a b. a \\<in> A \\<Longrightarrow> b \\<in> A \\<Longrightarrow> r a b \\<longleftrightarrow> r' a b\"\n  shows \"equivalence A r \\<longleftrightarrow> equivalence A r'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. equivalence A r = equivalence A r'", "by (simp add: equivalence_def r cong: reflexive_cong transitive_cong symmetric_cong)"], ["", "text \\<open>Some combinations lead to uninteresting relations.\\<close>"], ["", "context\n  fixes r :: \"'a \\<Rightarrow> 'a \\<Rightarrow> bool\" (infix \"\\<bowtie>\" 50)\nbegin"], ["", "proposition reflexive_irreflexive_is_empty:\n  assumes r: \"reflexive A (\\<bowtie>)\" and ir: \"irreflexive A (\\<bowtie>)\"\n  shows \"A = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A = {}", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. A \\<noteq> {} \\<Longrightarrow> False", "interpret irreflexive A \"(\\<bowtie>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. irreflexive A (\\<bowtie>)", "using ir"], ["proof (prove)\nusing this:\n  irreflexive A (\\<bowtie>)\n\ngoal (1 subgoal):\n 1. irreflexive A (\\<bowtie>)", "."], ["proof (state)\ngoal (1 subgoal):\n 1. A \\<noteq> {} \\<Longrightarrow> False", "interpret reflexive A \"(\\<bowtie>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. reflexive A (\\<bowtie>)", "using r"], ["proof (prove)\nusing this:\n  reflexive A (\\<bowtie>)\n\ngoal (1 subgoal):\n 1. reflexive A (\\<bowtie>)", "."], ["proof (state)\ngoal (1 subgoal):\n 1. A \\<noteq> {} \\<Longrightarrow> False", "assume \"A \\<noteq> {}\""], ["proof (state)\nthis:\n  A \\<noteq> {}\n\ngoal (1 subgoal):\n 1. A \\<noteq> {} \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  A \\<noteq> {}", "obtain a where a: \"a \\<in> A\""], ["proof (prove)\nusing this:\n  A \\<noteq> {}\n\ngoal (1 subgoal):\n 1. (\\<And>a. a \\<in> A \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by auto"], ["proof (state)\nthis:\n  a \\<in> A\n\ngoal (1 subgoal):\n 1. A \\<noteq> {} \\<Longrightarrow> False", "from a refl"], ["proof (chain)\npicking this:\n  a \\<in> A\n  ?x \\<in> A \\<Longrightarrow> ?x \\<bowtie> ?x", "have \"a \\<bowtie> a\""], ["proof (prove)\nusing this:\n  a \\<in> A\n  ?x \\<in> A \\<Longrightarrow> ?x \\<bowtie> ?x\n\ngoal (1 subgoal):\n 1. a \\<bowtie> a", "by auto"], ["proof (state)\nthis:\n  a \\<bowtie> a\n\ngoal (1 subgoal):\n 1. A \\<noteq> {} \\<Longrightarrow> False", "with irrefl a"], ["proof (chain)\npicking this:\n  ?x \\<in> A \\<Longrightarrow> \\<not> ?x \\<bowtie> ?x\n  a \\<in> A\n  a \\<bowtie> a", "show False"], ["proof (prove)\nusing this:\n  ?x \\<in> A \\<Longrightarrow> \\<not> ?x \\<bowtie> ?x\n  a \\<in> A\n  a \\<bowtie> a\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "proposition symmetric_antisymmetric_imp_eq:\n  assumes s: \"symmetric A (\\<bowtie>)\" and as: \"antisymmetric A (\\<bowtie>)\"\n  shows \"(\\<bowtie>)\\<restriction>A \\<le> (=)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<bowtie>) \\<restriction> A \\<le> (=)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<bowtie>) \\<restriction> A \\<le> (=)", "interpret symmetric A \"(\\<bowtie>)\" + antisymmetric A \"(\\<bowtie>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. symmetric A (\\<bowtie>) &&& antisymmetric A (\\<bowtie>)", "using assms"], ["proof (prove)\nusing this:\n  symmetric A (\\<bowtie>)\n  antisymmetric A (\\<bowtie>)\n\ngoal (1 subgoal):\n 1. symmetric A (\\<bowtie>) &&& antisymmetric A (\\<bowtie>)", "by auto"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<bowtie>) \\<restriction> A \\<le> (=)", "show \"?thesis\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<bowtie>) \\<restriction> A \\<le> (=)", "using antisym"], ["proof (prove)\nusing this:\n  \\<lbrakk>?x \\<bowtie> ?y; ?y \\<bowtie> ?x; ?x \\<in> A; ?y \\<in> A\\<rbrakk>\n  \\<Longrightarrow> ?x = ?y\n\ngoal (1 subgoal):\n 1. (\\<bowtie>) \\<restriction> A \\<le> (=)", "by (auto dest: sym)"], ["proof (state)\nthis:\n  (\\<bowtie>) \\<restriction> A \\<le> (=)\n\ngoal:\nNo subgoals!", "qed"], ["", "proposition nontolerance:\n  shows \"irreflexive A (\\<bowtie>) \\<and> symmetric A (\\<bowtie>) \\<longleftrightarrow> tolerance A (\\<lambda>x y. \\<not> x \\<bowtie> y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (irreflexive A (\\<bowtie>) \\<and> symmetric A (\\<bowtie>)) =\n    tolerance A (\\<lambda>x y. \\<not> x \\<bowtie> y)", "proof (intro iffI conjI, elim conjE)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<lbrakk>irreflexive A (\\<bowtie>); symmetric A (\\<bowtie>)\\<rbrakk>\n    \\<Longrightarrow> tolerance A (\\<lambda>x y. \\<not> x \\<bowtie> y)\n 2. tolerance A (\\<lambda>x y. \\<not> x \\<bowtie> y) \\<Longrightarrow>\n    irreflexive A (\\<bowtie>)\n 3. tolerance A (\\<lambda>x y. \\<not> x \\<bowtie> y) \\<Longrightarrow>\n    symmetric A (\\<bowtie>)", "assume \"irreflexive A (\\<bowtie>)\" and \"symmetric A (\\<bowtie>)\""], ["proof (state)\nthis:\n  irreflexive A (\\<bowtie>)\n  symmetric A (\\<bowtie>)\n\ngoal (3 subgoals):\n 1. \\<lbrakk>irreflexive A (\\<bowtie>); symmetric A (\\<bowtie>)\\<rbrakk>\n    \\<Longrightarrow> tolerance A (\\<lambda>x y. \\<not> x \\<bowtie> y)\n 2. tolerance A (\\<lambda>x y. \\<not> x \\<bowtie> y) \\<Longrightarrow>\n    irreflexive A (\\<bowtie>)\n 3. tolerance A (\\<lambda>x y. \\<not> x \\<bowtie> y) \\<Longrightarrow>\n    symmetric A (\\<bowtie>)", "then"], ["proof (chain)\npicking this:\n  irreflexive A (\\<bowtie>)\n  symmetric A (\\<bowtie>)", "interpret irreflexive A \"(\\<bowtie>)\" + symmetric A \"(\\<bowtie>)\""], ["proof (prove)\nusing this:\n  irreflexive A (\\<bowtie>)\n  symmetric A (\\<bowtie>)\n\ngoal (1 subgoal):\n 1. irreflexive A (\\<bowtie>) &&& symmetric A (\\<bowtie>)", "."], ["proof (state)\ngoal (3 subgoals):\n 1. \\<lbrakk>irreflexive A (\\<bowtie>); symmetric A (\\<bowtie>)\\<rbrakk>\n    \\<Longrightarrow> tolerance A (\\<lambda>x y. \\<not> x \\<bowtie> y)\n 2. tolerance A (\\<lambda>x y. \\<not> x \\<bowtie> y) \\<Longrightarrow>\n    irreflexive A (\\<bowtie>)\n 3. tolerance A (\\<lambda>x y. \\<not> x \\<bowtie> y) \\<Longrightarrow>\n    symmetric A (\\<bowtie>)", "show \"tolerance A (\\<lambda>x y. \\<not> x \\<bowtie> y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tolerance A (\\<lambda>x y. \\<not> x \\<bowtie> y)", "by (unfold_locales, auto dest: sym irrefl)"], ["proof (state)\nthis:\n  tolerance A (\\<lambda>x y. \\<not> x \\<bowtie> y)\n\ngoal (2 subgoals):\n 1. tolerance A (\\<lambda>x y. \\<not> x \\<bowtie> y) \\<Longrightarrow>\n    irreflexive A (\\<bowtie>)\n 2. tolerance A (\\<lambda>x y. \\<not> x \\<bowtie> y) \\<Longrightarrow>\n    symmetric A (\\<bowtie>)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. tolerance A (\\<lambda>x y. \\<not> x \\<bowtie> y) \\<Longrightarrow>\n    irreflexive A (\\<bowtie>)\n 2. tolerance A (\\<lambda>x y. \\<not> x \\<bowtie> y) \\<Longrightarrow>\n    symmetric A (\\<bowtie>)", "assume \"tolerance A (\\<lambda>x y. \\<not> x \\<bowtie> y)\""], ["proof (state)\nthis:\n  tolerance A (\\<lambda>x y. \\<not> x \\<bowtie> y)\n\ngoal (2 subgoals):\n 1. tolerance A (\\<lambda>x y. \\<not> x \\<bowtie> y) \\<Longrightarrow>\n    irreflexive A (\\<bowtie>)\n 2. tolerance A (\\<lambda>x y. \\<not> x \\<bowtie> y) \\<Longrightarrow>\n    symmetric A (\\<bowtie>)", "then"], ["proof (chain)\npicking this:\n  tolerance A (\\<lambda>x y. \\<not> x \\<bowtie> y)", "interpret tolerance A \"\\<lambda>x y. \\<not> x \\<bowtie> y\""], ["proof (prove)\nusing this:\n  tolerance A (\\<lambda>x y. \\<not> x \\<bowtie> y)\n\ngoal (1 subgoal):\n 1. tolerance A (\\<lambda>x y. \\<not> x \\<bowtie> y)", "."], ["proof (state)\ngoal (2 subgoals):\n 1. tolerance A (\\<lambda>x y. \\<not> x \\<bowtie> y) \\<Longrightarrow>\n    irreflexive A (\\<bowtie>)\n 2. tolerance A (\\<lambda>x y. \\<not> x \\<bowtie> y) \\<Longrightarrow>\n    symmetric A (\\<bowtie>)", "show \"irreflexive A (\\<bowtie>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. irreflexive A (\\<bowtie>)", "by (auto simp: eq_implies)"], ["proof (state)\nthis:\n  irreflexive A (\\<bowtie>)\n\ngoal (1 subgoal):\n 1. tolerance A (\\<lambda>x y. \\<not> x \\<bowtie> y) \\<Longrightarrow>\n    symmetric A (\\<bowtie>)", "show \"symmetric A (\\<bowtie>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. symmetric A (\\<bowtie>)", "using sym"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<not> ?x \\<bowtie> ?y; ?x \\<in> A; ?y \\<in> A\\<rbrakk>\n  \\<Longrightarrow> \\<not> ?y \\<bowtie> ?x\n\ngoal (1 subgoal):\n 1. symmetric A (\\<bowtie>)", "by auto"], ["proof (state)\nthis:\n  symmetric A (\\<bowtie>)\n\ngoal:\nNo subgoals!", "qed"], ["", "proposition irreflexive_transitive_symmetric_is_empty:\n  assumes irr: \"irreflexive A (\\<bowtie>)\" and tr: \"transitive A (\\<bowtie>)\" and sym: \"symmetric A (\\<bowtie>)\"\n  shows \"(\\<bowtie>)\\<restriction>A = bot\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<bowtie>) \\<restriction> A = bot", "proof (intro ext, unfold bot_fun_def bot_bool_def eq_False, rule notI, erule RestrpE)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       \\<lbrakk>x \\<in> A; xa \\<in> A; x \\<bowtie> xa\\<rbrakk>\n       \\<Longrightarrow> False", "interpret strict_ordered_set A \"(\\<bowtie>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. strict_ordered_set A (\\<bowtie>)", "using assms"], ["proof (prove)\nusing this:\n  irreflexive A (\\<bowtie>)\n  transitive A (\\<bowtie>)\n  symmetric A (\\<bowtie>)\n\ngoal (1 subgoal):\n 1. strict_ordered_set A (\\<bowtie>)", "by (unfold strict_ordered_set_def, auto)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       \\<lbrakk>x \\<in> A; xa \\<in> A; x \\<bowtie> xa\\<rbrakk>\n       \\<Longrightarrow> False", "interpret symmetric A \"(\\<bowtie>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. symmetric A (\\<bowtie>)", "using assms"], ["proof (prove)\nusing this:\n  irreflexive A (\\<bowtie>)\n  transitive A (\\<bowtie>)\n  symmetric A (\\<bowtie>)\n\ngoal (1 subgoal):\n 1. symmetric A (\\<bowtie>)", "by auto"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       \\<lbrakk>x \\<in> A; xa \\<in> A; x \\<bowtie> xa\\<rbrakk>\n       \\<Longrightarrow> False", "fix x y"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       \\<lbrakk>x \\<in> A; xa \\<in> A; x \\<bowtie> xa\\<rbrakk>\n       \\<Longrightarrow> False", "assume x: \"x \\<in> A\" and y: \"y \\<in> A\""], ["proof (state)\nthis:\n  x \\<in> A\n  y \\<in> A\n\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       \\<lbrakk>x \\<in> A; xa \\<in> A; x \\<bowtie> xa\\<rbrakk>\n       \\<Longrightarrow> False", "assume xy: \"x \\<bowtie> y\""], ["proof (state)\nthis:\n  x \\<bowtie> y\n\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       \\<lbrakk>x \\<in> A; xa \\<in> A; x \\<bowtie> xa\\<rbrakk>\n       \\<Longrightarrow> False", "also"], ["proof (state)\nthis:\n  x \\<bowtie> y\n\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       \\<lbrakk>x \\<in> A; xa \\<in> A; x \\<bowtie> xa\\<rbrakk>\n       \\<Longrightarrow> False", "note sym[OF xy x y]"], ["proof (state)\nthis:\n  y \\<bowtie> x\n\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       \\<lbrakk>x \\<in> A; xa \\<in> A; x \\<bowtie> xa\\<rbrakk>\n       \\<Longrightarrow> False", "finally"], ["proof (chain)\npicking this:\n  \\<lbrakk>x \\<in> A; y \\<in> A; x \\<in> A\\<rbrakk>\n  \\<Longrightarrow> x \\<bowtie> x", "have \"x \\<bowtie> x\""], ["proof (prove)\nusing this:\n  \\<lbrakk>x \\<in> A; y \\<in> A; x \\<in> A\\<rbrakk>\n  \\<Longrightarrow> x \\<bowtie> x\n\ngoal (1 subgoal):\n 1. x \\<bowtie> x", "using x y"], ["proof (prove)\nusing this:\n  \\<lbrakk>x \\<in> A; y \\<in> A; x \\<in> A\\<rbrakk>\n  \\<Longrightarrow> x \\<bowtie> x\n  x \\<in> A\n  y \\<in> A\n\ngoal (1 subgoal):\n 1. x \\<bowtie> x", "by auto"], ["proof (state)\nthis:\n  x \\<bowtie> x\n\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       \\<lbrakk>x \\<in> A; xa \\<in> A; x \\<bowtie> xa\\<rbrakk>\n       \\<Longrightarrow> False", "with x"], ["proof (chain)\npicking this:\n  x \\<in> A\n  x \\<bowtie> x", "show False"], ["proof (prove)\nusing this:\n  x \\<in> A\n  x \\<bowtie> x\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "subsection \\<open>Totality\\<close>"], ["", "locale semiconnex = related_set A \"(\\<sqsubset>)\" for A and less (infix \"\\<sqsubset>\" 50) +\n  assumes semiconnex: \"x \\<in> A \\<Longrightarrow> y \\<in> A \\<Longrightarrow> x \\<sqsubset> y \\<or> x = y \\<or> y \\<sqsubset> x\"\nbegin"], ["", "lemma cases[consumes 2, case_names less eq greater]:\n  assumes \"x \\<in> A\" and \"y \\<in> A\" and \"x \\<sqsubset> y \\<Longrightarrow> P\" and \"x = y \\<Longrightarrow> P\" and \"y \\<sqsubset> x \\<Longrightarrow> P\"\n  shows \"P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P", "using semiconnex assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>?x \\<in> A; ?y \\<in> A\\<rbrakk>\n  \\<Longrightarrow> ?x \\<sqsubset> ?y \\<or> ?x = ?y \\<or> ?y \\<sqsubset> ?x\n  x \\<in> A\n  y \\<in> A\n  x \\<sqsubset> y \\<Longrightarrow> P\n  x = y \\<Longrightarrow> P\n  y \\<sqsubset> x \\<Longrightarrow> P\n\ngoal (1 subgoal):\n 1. P", "by auto"], ["", "lemma neqE:\n  assumes \"x \\<in> A\" and \"y \\<in> A\"\n  shows \"x \\<noteq> y \\<Longrightarrow> (x \\<sqsubset> y \\<Longrightarrow> P) \\<Longrightarrow> (y \\<sqsubset> x \\<Longrightarrow> P) \\<Longrightarrow> P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<noteq> y; x \\<sqsubset> y \\<Longrightarrow> P;\n     y \\<sqsubset> x \\<Longrightarrow> P\\<rbrakk>\n    \\<Longrightarrow> P", "by (cases rule: cases[OF assms], auto)"], ["", "lemma semiconnex_subset: \"B \\<subseteq> A \\<Longrightarrow> semiconnex B (\\<sqsubset>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. B \\<subseteq> A \\<Longrightarrow> semiconnex B (\\<sqsubset>)", "apply (intro semiconnex.intro)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>B \\<subseteq> A; x \\<in> B; y \\<in> B\\<rbrakk>\n       \\<Longrightarrow> x \\<sqsubset> y \\<or> x = y \\<or> y \\<sqsubset> x", "using semiconnex"], ["proof (prove)\nusing this:\n  \\<lbrakk>?x \\<in> A; ?y \\<in> A\\<rbrakk>\n  \\<Longrightarrow> ?x \\<sqsubset> ?y \\<or> ?x = ?y \\<or> ?y \\<sqsubset> ?x\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>B \\<subseteq> A; x \\<in> B; y \\<in> B\\<rbrakk>\n       \\<Longrightarrow> x \\<sqsubset> y \\<or> x = y \\<or> y \\<sqsubset> x", "by auto"], ["", "end"], ["", "declare semiconnex.intro[intro]"], ["", "text \\<open>Totality is negated antisymmetry \\cite[Proposition 2.2.4]{Schmidt1993}.\\<close>"], ["", "proposition semiconnex_iff_neg_antisymmetric:\n  fixes less (infix \"\\<sqsubset>\" 50)\n  shows \"semiconnex A (\\<sqsubset>) \\<longleftrightarrow> antisymmetric A (\\<lambda>x y. \\<not> x \\<sqsubset> y)\" (is \"?l \\<longleftrightarrow> ?r\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. semiconnex A (\\<sqsubset>) =\n    antisymmetric A (\\<lambda>x y. \\<not> x \\<sqsubset> y)", "proof (intro iffI semiconnex.intro antisymmetric.intro)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>semiconnex A (\\<sqsubset>); \\<not> x \\<sqsubset> y;\n        \\<not> y \\<sqsubset> x; x \\<in> A; y \\<in> A\\<rbrakk>\n       \\<Longrightarrow> x = y\n 2. \\<And>x y.\n       \\<lbrakk>antisymmetric A (\\<lambda>x y. \\<not> x \\<sqsubset> y);\n        x \\<in> A; y \\<in> A\\<rbrakk>\n       \\<Longrightarrow> x \\<sqsubset> y \\<or> x = y \\<or> y \\<sqsubset> x", "assume ?l"], ["proof (state)\nthis:\n  semiconnex A (\\<sqsubset>)\n\ngoal (2 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>semiconnex A (\\<sqsubset>); \\<not> x \\<sqsubset> y;\n        \\<not> y \\<sqsubset> x; x \\<in> A; y \\<in> A\\<rbrakk>\n       \\<Longrightarrow> x = y\n 2. \\<And>x y.\n       \\<lbrakk>antisymmetric A (\\<lambda>x y. \\<not> x \\<sqsubset> y);\n        x \\<in> A; y \\<in> A\\<rbrakk>\n       \\<Longrightarrow> x \\<sqsubset> y \\<or> x = y \\<or> y \\<sqsubset> x", "then"], ["proof (chain)\npicking this:\n  semiconnex A (\\<sqsubset>)", "interpret semiconnex"], ["proof (prove)\nusing this:\n  semiconnex A (\\<sqsubset>)\n\ngoal (1 subgoal):\n 1. semiconnex A (\\<sqsubset>)", "."], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>semiconnex A (\\<sqsubset>); \\<not> x \\<sqsubset> y;\n        \\<not> y \\<sqsubset> x; x \\<in> A; y \\<in> A\\<rbrakk>\n       \\<Longrightarrow> x = y\n 2. \\<And>x y.\n       \\<lbrakk>antisymmetric A (\\<lambda>x y. \\<not> x \\<sqsubset> y);\n        x \\<in> A; y \\<in> A\\<rbrakk>\n       \\<Longrightarrow> x \\<sqsubset> y \\<or> x = y \\<or> y \\<sqsubset> x", "fix x y"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>semiconnex A (\\<sqsubset>); \\<not> x \\<sqsubset> y;\n        \\<not> y \\<sqsubset> x; x \\<in> A; y \\<in> A\\<rbrakk>\n       \\<Longrightarrow> x = y\n 2. \\<And>x y.\n       \\<lbrakk>antisymmetric A (\\<lambda>x y. \\<not> x \\<sqsubset> y);\n        x \\<in> A; y \\<in> A\\<rbrakk>\n       \\<Longrightarrow> x \\<sqsubset> y \\<or> x = y \\<or> y \\<sqsubset> x", "assume \"x \\<in> A\" \"y \\<in> A\" \"\\<not> x \\<sqsubset> y\" and \"\\<not> y \\<sqsubset> x\""], ["proof (state)\nthis:\n  x \\<in> A\n  y \\<in> A\n  \\<not> x \\<sqsubset> y\n  \\<not> y \\<sqsubset> x\n\ngoal (2 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>semiconnex A (\\<sqsubset>); \\<not> x \\<sqsubset> y;\n        \\<not> y \\<sqsubset> x; x \\<in> A; y \\<in> A\\<rbrakk>\n       \\<Longrightarrow> x = y\n 2. \\<And>x y.\n       \\<lbrakk>antisymmetric A (\\<lambda>x y. \\<not> x \\<sqsubset> y);\n        x \\<in> A; y \\<in> A\\<rbrakk>\n       \\<Longrightarrow> x \\<sqsubset> y \\<or> x = y \\<or> y \\<sqsubset> x", "then"], ["proof (chain)\npicking this:\n  x \\<in> A\n  y \\<in> A\n  \\<not> x \\<sqsubset> y\n  \\<not> y \\<sqsubset> x", "show \"x = y\""], ["proof (prove)\nusing this:\n  x \\<in> A\n  y \\<in> A\n  \\<not> x \\<sqsubset> y\n  \\<not> y \\<sqsubset> x\n\ngoal (1 subgoal):\n 1. x = y", "by (cases rule: cases, auto)"], ["proof (state)\nthis:\n  x = y\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>antisymmetric A (\\<lambda>x y. \\<not> x \\<sqsubset> y);\n        x \\<in> A; y \\<in> A\\<rbrakk>\n       \\<Longrightarrow> x \\<sqsubset> y \\<or> x = y \\<or> y \\<sqsubset> x", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>antisymmetric A (\\<lambda>x y. \\<not> x \\<sqsubset> y);\n        x \\<in> A; y \\<in> A\\<rbrakk>\n       \\<Longrightarrow> x \\<sqsubset> y \\<or> x = y \\<or> y \\<sqsubset> x", "assume ?r"], ["proof (state)\nthis:\n  antisymmetric A (\\<lambda>x y. \\<not> x \\<sqsubset> y)\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>antisymmetric A (\\<lambda>x y. \\<not> x \\<sqsubset> y);\n        x \\<in> A; y \\<in> A\\<rbrakk>\n       \\<Longrightarrow> x \\<sqsubset> y \\<or> x = y \\<or> y \\<sqsubset> x", "then"], ["proof (chain)\npicking this:\n  antisymmetric A (\\<lambda>x y. \\<not> x \\<sqsubset> y)", "interpret neg: antisymmetric A \"(\\<lambda>x y. \\<not> x \\<sqsubset> y)\""], ["proof (prove)\nusing this:\n  antisymmetric A (\\<lambda>x y. \\<not> x \\<sqsubset> y)\n\ngoal (1 subgoal):\n 1. antisymmetric A (\\<lambda>x y. \\<not> x \\<sqsubset> y)", "."], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>antisymmetric A (\\<lambda>x y. \\<not> x \\<sqsubset> y);\n        x \\<in> A; y \\<in> A\\<rbrakk>\n       \\<Longrightarrow> x \\<sqsubset> y \\<or> x = y \\<or> y \\<sqsubset> x", "fix x y"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>antisymmetric A (\\<lambda>x y. \\<not> x \\<sqsubset> y);\n        x \\<in> A; y \\<in> A\\<rbrakk>\n       \\<Longrightarrow> x \\<sqsubset> y \\<or> x = y \\<or> y \\<sqsubset> x", "show \"x \\<in> A \\<Longrightarrow> y \\<in> A \\<Longrightarrow> x \\<sqsubset> y \\<or> x = y \\<or> y \\<sqsubset> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<in> A; y \\<in> A\\<rbrakk>\n    \\<Longrightarrow> x \\<sqsubset> y \\<or> x = y \\<or> y \\<sqsubset> x", "using neg.antisym"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<not> ?x \\<sqsubset> ?y; \\<not> ?y \\<sqsubset> ?x; ?x \\<in> A;\n   ?y \\<in> A\\<rbrakk>\n  \\<Longrightarrow> ?x = ?y\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<in> A; y \\<in> A\\<rbrakk>\n    \\<Longrightarrow> x \\<sqsubset> y \\<or> x = y \\<or> y \\<sqsubset> x", "by auto"], ["proof (state)\nthis:\n  \\<lbrakk>x \\<in> A; y \\<in> A\\<rbrakk>\n  \\<Longrightarrow> x \\<sqsubset> y \\<or> x = y \\<or> y \\<sqsubset> x\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma semiconnex_cong:\n  assumes r: \"\\<And>a b. a \\<in> A \\<Longrightarrow> b \\<in> A \\<Longrightarrow> r a b \\<longleftrightarrow> r' a b\"\n  shows \"semiconnex A r \\<longleftrightarrow> semiconnex A r'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. semiconnex A r = semiconnex A r'", "by (simp add: semiconnex_iff_neg_antisymmetric r cong: antisymmetric_cong)"], ["", "locale semiconnex_irreflexive = semiconnex + irreflexive\nbegin"], ["", "lemma neq_iff: \"x \\<in> A \\<Longrightarrow> y \\<in> A \\<Longrightarrow> x \\<noteq> y \\<longleftrightarrow> x \\<sqsubset> y \\<or> y \\<sqsubset> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<in> A; y \\<in> A\\<rbrakk>\n    \\<Longrightarrow> (x \\<noteq> y) =\n                      (x \\<sqsubset> y \\<or> y \\<sqsubset> x)", "by (auto elim:neqE dest: irrefl)"], ["", "lemma semiconnex_irreflexive_subset: \"B \\<subseteq> A \\<Longrightarrow> semiconnex_irreflexive B (\\<sqsubset>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. B \\<subseteq> A \\<Longrightarrow> semiconnex_irreflexive B (\\<sqsubset>)", "apply (intro semiconnex_irreflexive.intro)"], ["proof (prove)\ngoal (2 subgoals):\n 1. B \\<subseteq> A \\<Longrightarrow> semiconnex B (\\<sqsubset>)\n 2. B \\<subseteq> A \\<Longrightarrow> irreflexive B (\\<sqsubset>)", "using semiconnex_subset irreflexive_subset"], ["proof (prove)\nusing this:\n  ?B \\<subseteq> A \\<Longrightarrow> semiconnex ?B (\\<sqsubset>)\n  ?B \\<subseteq> A \\<Longrightarrow> irreflexive ?B (\\<sqsubset>)\n\ngoal (2 subgoals):\n 1. B \\<subseteq> A \\<Longrightarrow> semiconnex B (\\<sqsubset>)\n 2. B \\<subseteq> A \\<Longrightarrow> irreflexive B (\\<sqsubset>)", "by auto"], ["", "end"], ["", "lemma semiconnex_irreflexive_cong:\n  assumes r: \"\\<And>a b. a \\<in> A \\<Longrightarrow> b \\<in> A \\<Longrightarrow> r a b \\<longleftrightarrow> r' a b\"\n  shows \"semiconnex_irreflexive A r \\<longleftrightarrow> semiconnex_irreflexive A r'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. semiconnex_irreflexive A r = semiconnex_irreflexive A r'", "by (simp add: semiconnex_irreflexive_def r cong: semiconnex_cong irreflexive_cong)"], ["", "locale connex = related_set +\n  assumes comparable: \"x \\<in> A \\<Longrightarrow> y \\<in> A \\<Longrightarrow> x \\<sqsubseteq> y \\<or> y \\<sqsubseteq> x\"\nbegin"], ["", "interpretation less_eq_notations"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "sublocale reflexive"], ["proof (prove)\ngoal (1 subgoal):\n 1. reflexive A (\\<sqsubseteq>)", "apply unfold_locales"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> A \\<Longrightarrow> x \\<sqsubseteq> x", "using comparable"], ["proof (prove)\nusing this:\n  \\<lbrakk>?x \\<in> A; ?y \\<in> A\\<rbrakk>\n  \\<Longrightarrow> ?x \\<sqsubseteq> ?y \\<or> ?y \\<sqsubseteq> ?x\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> A \\<Longrightarrow> x \\<sqsubseteq> x", "by auto"], ["", "lemma comparable_cases[consumes 2, case_names le ge]:\n  assumes \"x \\<in> A\" and \"y \\<in> A\" and \"x \\<sqsubseteq> y \\<Longrightarrow> P\" and \"y \\<sqsubseteq> x \\<Longrightarrow> P\" shows \"P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P", "using assms comparable"], ["proof (prove)\nusing this:\n  x \\<in> A\n  y \\<in> A\n  x \\<sqsubseteq> y \\<Longrightarrow> P\n  y \\<sqsubseteq> x \\<Longrightarrow> P\n  \\<lbrakk>?x \\<in> A; ?y \\<in> A\\<rbrakk>\n  \\<Longrightarrow> ?x \\<sqsubseteq> ?y \\<or> ?y \\<sqsubseteq> ?x\n\ngoal (1 subgoal):\n 1. P", "by auto"], ["", "lemma comparable_three_cases[consumes 2, case_names less eq greater]:\n  assumes \"x \\<in> A\" and \"y \\<in> A\" and \"x \\<sqsubset> y \\<Longrightarrow> P\" and \"x \\<sim> y \\<Longrightarrow> P\" and \"y \\<sqsubset> x \\<Longrightarrow> P\" shows \"P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P", "using assms comparable"], ["proof (prove)\nusing this:\n  x \\<in> A\n  y \\<in> A\n  x \\<sqsubset> y \\<Longrightarrow> P\n  x \\<sim> y \\<Longrightarrow> P\n  y \\<sqsubset> x \\<Longrightarrow> P\n  \\<lbrakk>?x \\<in> A; ?y \\<in> A\\<rbrakk>\n  \\<Longrightarrow> ?x \\<sqsubseteq> ?y \\<or> ?y \\<sqsubseteq> ?x\n\ngoal (1 subgoal):\n 1. P", "by auto"], ["", "lemma\n  assumes x: \"x \\<in> A\" and y: \"y \\<in> A\"\n  shows not_iff_asym: \"\\<not>x \\<sqsubseteq> y \\<longleftrightarrow> y \\<sqsubset> x\"\n    and not_asym_iff[simp]: \"\\<not>x \\<sqsubset> y \\<longleftrightarrow> y \\<sqsubseteq> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<not> x \\<sqsubseteq> y) = (y \\<sqsubset> x) &&&\n    (\\<not> x \\<sqsubset> y) = (y \\<sqsubseteq> x)", "using comparable[OF x y]"], ["proof (prove)\nusing this:\n  x \\<sqsubseteq> y \\<or> y \\<sqsubseteq> x\n\ngoal (1 subgoal):\n 1. (\\<not> x \\<sqsubseteq> y) = (y \\<sqsubset> x) &&&\n    (\\<not> x \\<sqsubset> y) = (y \\<sqsubseteq> x)", "by auto"], ["", "lemma connex_subset: \"B \\<subseteq> A \\<Longrightarrow> connex B (\\<sqsubseteq>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. B \\<subseteq> A \\<Longrightarrow> connex B (\\<sqsubseteq>)", "by (intro connex.intro comparable, auto)"], ["", "end"], ["", "lemmas connexE = connex.comparable_cases"], ["", "lemmas connexI[intro] = connex.intro"], ["", "context\n  fixes less_eq :: \"'a \\<Rightarrow> 'a \\<Rightarrow> bool\" (infix \"\\<sqsubseteq>\" 50)\nbegin"], ["", "lemma connex_iff_semiconnex_reflexive: \"connex A (\\<sqsubseteq>) \\<longleftrightarrow> semiconnex A (\\<sqsubseteq>) \\<and> reflexive A (\\<sqsubseteq>)\"\n  (is \"?c \\<longleftrightarrow> ?t \\<and> ?r\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. connex A (\\<sqsubseteq>) =\n    (semiconnex A (\\<sqsubseteq>) \\<and> reflexive A (\\<sqsubseteq>))", "proof (intro iffI conjI; (elim conjE)?)"], ["proof (state)\ngoal (3 subgoals):\n 1. connex A (\\<sqsubseteq>) \\<Longrightarrow> semiconnex A (\\<sqsubseteq>)\n 2. connex A (\\<sqsubseteq>) \\<Longrightarrow> reflexive A (\\<sqsubseteq>)\n 3. \\<lbrakk>semiconnex A (\\<sqsubseteq>);\n     reflexive A (\\<sqsubseteq>)\\<rbrakk>\n    \\<Longrightarrow> connex A (\\<sqsubseteq>)", "assume ?c"], ["proof (state)\nthis:\n  connex A (\\<sqsubseteq>)\n\ngoal (3 subgoals):\n 1. connex A (\\<sqsubseteq>) \\<Longrightarrow> semiconnex A (\\<sqsubseteq>)\n 2. connex A (\\<sqsubseteq>) \\<Longrightarrow> reflexive A (\\<sqsubseteq>)\n 3. \\<lbrakk>semiconnex A (\\<sqsubseteq>);\n     reflexive A (\\<sqsubseteq>)\\<rbrakk>\n    \\<Longrightarrow> connex A (\\<sqsubseteq>)", "then"], ["proof (chain)\npicking this:\n  connex A (\\<sqsubseteq>)", "interpret connex"], ["proof (prove)\nusing this:\n  connex A (\\<sqsubseteq>)\n\ngoal (1 subgoal):\n 1. connex A (\\<sqsubseteq>)", "."], ["proof (state)\ngoal (3 subgoals):\n 1. connex A (\\<sqsubseteq>) \\<Longrightarrow> semiconnex A (\\<sqsubseteq>)\n 2. connex A (\\<sqsubseteq>) \\<Longrightarrow> reflexive A (\\<sqsubseteq>)\n 3. \\<lbrakk>semiconnex A (\\<sqsubseteq>);\n     reflexive A (\\<sqsubseteq>)\\<rbrakk>\n    \\<Longrightarrow> connex A (\\<sqsubseteq>)", "show ?t"], ["proof (prove)\ngoal (1 subgoal):\n 1. semiconnex A (\\<sqsubseteq>)", "apply unfold_locales"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> A; y \\<in> A\\<rbrakk>\n       \\<Longrightarrow> x \\<sqsubseteq> y \\<or>\n                         x = y \\<or> y \\<sqsubseteq> x", "using comparable"], ["proof (prove)\nusing this:\n  \\<lbrakk>?x \\<in> A; ?y \\<in> A\\<rbrakk>\n  \\<Longrightarrow> ?x \\<sqsubseteq> ?y \\<or> ?y \\<sqsubseteq> ?x\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> A; y \\<in> A\\<rbrakk>\n       \\<Longrightarrow> x \\<sqsubseteq> y \\<or>\n                         x = y \\<or> y \\<sqsubseteq> x", "by auto"], ["proof (state)\nthis:\n  semiconnex A (\\<sqsubseteq>)\n\ngoal (2 subgoals):\n 1. connex A (\\<sqsubseteq>) \\<Longrightarrow> reflexive A (\\<sqsubseteq>)\n 2. \\<lbrakk>semiconnex A (\\<sqsubseteq>);\n     reflexive A (\\<sqsubseteq>)\\<rbrakk>\n    \\<Longrightarrow> connex A (\\<sqsubseteq>)", "show ?r"], ["proof (prove)\ngoal (1 subgoal):\n 1. reflexive A (\\<sqsubseteq>)", "by unfold_locales"], ["proof (state)\nthis:\n  reflexive A (\\<sqsubseteq>)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>semiconnex A (\\<sqsubseteq>);\n     reflexive A (\\<sqsubseteq>)\\<rbrakk>\n    \\<Longrightarrow> connex A (\\<sqsubseteq>)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>semiconnex A (\\<sqsubseteq>);\n     reflexive A (\\<sqsubseteq>)\\<rbrakk>\n    \\<Longrightarrow> connex A (\\<sqsubseteq>)", "assume ?t"], ["proof (state)\nthis:\n  semiconnex A (\\<sqsubseteq>)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>semiconnex A (\\<sqsubseteq>);\n     reflexive A (\\<sqsubseteq>)\\<rbrakk>\n    \\<Longrightarrow> connex A (\\<sqsubseteq>)", "then"], ["proof (chain)\npicking this:\n  semiconnex A (\\<sqsubseteq>)", "interpret semiconnex A \"(\\<sqsubseteq>)\""], ["proof (prove)\nusing this:\n  semiconnex A (\\<sqsubseteq>)\n\ngoal (1 subgoal):\n 1. semiconnex A (\\<sqsubseteq>)", "."], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>semiconnex A (\\<sqsubseteq>);\n     reflexive A (\\<sqsubseteq>)\\<rbrakk>\n    \\<Longrightarrow> connex A (\\<sqsubseteq>)", "assume ?r"], ["proof (state)\nthis:\n  reflexive A (\\<sqsubseteq>)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>semiconnex A (\\<sqsubseteq>);\n     reflexive A (\\<sqsubseteq>)\\<rbrakk>\n    \\<Longrightarrow> connex A (\\<sqsubseteq>)", "then"], ["proof (chain)\npicking this:\n  reflexive A (\\<sqsubseteq>)", "interpret reflexive"], ["proof (prove)\nusing this:\n  reflexive A (\\<sqsubseteq>)\n\ngoal (1 subgoal):\n 1. reflexive A (\\<sqsubseteq>)", "."], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>semiconnex A (\\<sqsubseteq>);\n     reflexive A (\\<sqsubseteq>)\\<rbrakk>\n    \\<Longrightarrow> connex A (\\<sqsubseteq>)", "from semiconnex"], ["proof (chain)\npicking this:\n  \\<lbrakk>?x \\<in> A; ?y \\<in> A\\<rbrakk>\n  \\<Longrightarrow> ?x \\<sqsubseteq> ?y \\<or>\n                    ?x = ?y \\<or> ?y \\<sqsubseteq> ?x", "show ?c"], ["proof (prove)\nusing this:\n  \\<lbrakk>?x \\<in> A; ?y \\<in> A\\<rbrakk>\n  \\<Longrightarrow> ?x \\<sqsubseteq> ?y \\<or>\n                    ?x = ?y \\<or> ?y \\<sqsubseteq> ?x\n\ngoal (1 subgoal):\n 1. connex A (\\<sqsubseteq>)", "by auto"], ["proof (state)\nthis:\n  connex A (\\<sqsubseteq>)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma chain_connect: \"Complete_Partial_Order.chain r A \\<equiv> connex A r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Complete_Partial_Order.chain r A \\<equiv> connex A r", "by (auto intro!: ext simp: atomize_eq connex_def Complete_Partial_Order.chain_def)"], ["", "lemma connex_union:\n  assumes \"connex X (\\<sqsubseteq>)\" and \"connex Y (\\<sqsubseteq>)\" and \"\\<forall>x \\<in> X. \\<forall>y \\<in> Y. x \\<sqsubseteq> y \\<or> y \\<sqsubseteq> x\"\n  shows \"connex (X\\<union>Y) (\\<sqsubseteq>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. connex (X \\<union> Y) (\\<sqsubseteq>)", "using assms"], ["proof (prove)\nusing this:\n  connex X (\\<sqsubseteq>)\n  connex Y (\\<sqsubseteq>)\n  \\<forall>x\\<in>X.\n     \\<forall>y\\<in>Y. x \\<sqsubseteq> y \\<or> y \\<sqsubseteq> x\n\ngoal (1 subgoal):\n 1. connex (X \\<union> Y) (\\<sqsubseteq>)", "by (auto simp: connex_def)"], ["", "end"], ["", "lemma connex_cong:\n  assumes r: \"\\<And>a b. a \\<in> A \\<Longrightarrow> b \\<in> A \\<Longrightarrow> r a b \\<longleftrightarrow> r' a b\"\n  shows \"connex A r \\<longleftrightarrow> connex A r'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. connex A r = connex A r'", "by (simp add: connex_iff_semiconnex_reflexive r cong: semiconnex_cong reflexive_cong)"], ["", "locale total_pseudo_ordered_set = connex + antisymmetric\nbegin"], ["", "sublocale pseudo_ordered_set"], ["proof (prove)\ngoal (1 subgoal):\n 1. pseudo_ordered_set A (\\<sqsubseteq>)", ".."], ["", "lemma not_weak_iff:\n  assumes x: \"x \\<in> A\" and y: \"y \\<in> A\" shows \"\\<not> y \\<sqsubseteq> x \\<longleftrightarrow> x \\<sqsubseteq> y \\<and> x \\<noteq> y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<not> y \\<sqsubseteq> x) = (x \\<sqsubseteq> y \\<and> x \\<noteq> y)", "using x y"], ["proof (prove)\nusing this:\n  x \\<in> A\n  y \\<in> A\n\ngoal (1 subgoal):\n 1. (\\<not> y \\<sqsubseteq> x) = (x \\<sqsubseteq> y \\<and> x \\<noteq> y)", "by (cases rule: comparable_cases, auto intro:antisym)"], ["", "lemma total_pseudo_ordered_subset: \"B \\<subseteq> A \\<Longrightarrow> total_pseudo_ordered_set B (\\<sqsubseteq>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. B \\<subseteq> A \\<Longrightarrow>\n    total_pseudo_ordered_set B (\\<sqsubseteq>)", "apply (intro_locales)"], ["proof (prove)\ngoal (2 subgoals):\n 1. B \\<subseteq> A \\<Longrightarrow> connex B (\\<sqsubseteq>)\n 2. B \\<subseteq> A \\<Longrightarrow> antisymmetric B (\\<sqsubseteq>)", "using antisymmetric_subset connex_subset"], ["proof (prove)\nusing this:\n  ?B \\<subseteq> A \\<Longrightarrow> antisymmetric ?B (\\<sqsubseteq>)\n  ?B \\<subseteq> A \\<Longrightarrow> connex ?B (\\<sqsubseteq>)\n\ngoal (2 subgoals):\n 1. B \\<subseteq> A \\<Longrightarrow> connex B (\\<sqsubseteq>)\n 2. B \\<subseteq> A \\<Longrightarrow> antisymmetric B (\\<sqsubseteq>)", "by auto"], ["", "end"], ["", "lemma total_pseudo_ordered_set_cong:\n  assumes r: \"\\<And>a b. a \\<in> A \\<Longrightarrow> b \\<in> A \\<Longrightarrow> r a b \\<longleftrightarrow> r' a b\"\n  shows \"total_pseudo_ordered_set A r \\<longleftrightarrow> total_pseudo_ordered_set A r'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. total_pseudo_ordered_set A r = total_pseudo_ordered_set A r'", "by (simp add: total_pseudo_ordered_set_def r cong: connex_cong antisymmetric_cong)"], ["", "locale total_quasi_ordered_set = connex + transitive\nbegin"], ["", "sublocale quasi_ordered_set"], ["proof (prove)\ngoal (1 subgoal):\n 1. quasi_ordered_set A (\\<sqsubseteq>)", ".."], ["", "lemma total_quasi_ordered_subset: \"B \\<subseteq> A \\<Longrightarrow> total_quasi_ordered_set B (\\<sqsubseteq>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. B \\<subseteq> A \\<Longrightarrow>\n    total_quasi_ordered_set B (\\<sqsubseteq>)", "using transitive_subset connex_subset"], ["proof (prove)\nusing this:\n  ?B \\<subseteq> A \\<Longrightarrow> transitive ?B (\\<sqsubseteq>)\n  ?B \\<subseteq> A \\<Longrightarrow> connex ?B (\\<sqsubseteq>)\n\ngoal (1 subgoal):\n 1. B \\<subseteq> A \\<Longrightarrow>\n    total_quasi_ordered_set B (\\<sqsubseteq>)", "by intro_locales"], ["", "end"], ["", "lemma total_quasi_ordered_set_cong:\n  assumes r: \"\\<And>a b. a \\<in> A \\<Longrightarrow> b \\<in> A \\<Longrightarrow> r a b \\<longleftrightarrow> r' a b\"\n  shows \"total_quasi_ordered_set A r \\<longleftrightarrow> total_quasi_ordered_set A r'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. total_quasi_ordered_set A r = total_quasi_ordered_set A r'", "by (simp add: total_quasi_ordered_set_def r cong: connex_cong transitive_cong)"], ["", "locale total_ordered_set = total_quasi_ordered_set + antisymmetric\nbegin"], ["", "sublocale partially_ordered_set + total_pseudo_ordered_set"], ["proof (prove)\ngoal (1 subgoal):\n 1. partially_ordered_set A (\\<sqsubseteq>) &&&\n    total_pseudo_ordered_set A (\\<sqsubseteq>)", ".."], ["", "lemma total_ordered_subset: \"B \\<subseteq> A \\<Longrightarrow> total_ordered_set B (\\<sqsubseteq>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. B \\<subseteq> A \\<Longrightarrow> total_ordered_set B (\\<sqsubseteq>)", "using total_quasi_ordered_subset antisymmetric_subset"], ["proof (prove)\nusing this:\n  ?B \\<subseteq> A \\<Longrightarrow>\n  total_quasi_ordered_set ?B (\\<sqsubseteq>)\n  ?B \\<subseteq> A \\<Longrightarrow> antisymmetric ?B (\\<sqsubseteq>)\n\ngoal (1 subgoal):\n 1. B \\<subseteq> A \\<Longrightarrow> total_ordered_set B (\\<sqsubseteq>)", "by (intro total_ordered_set.intro)"], ["", "end"], ["", "lemma total_ordered_set_cong:\n  assumes r: \"\\<And>a b. a \\<in> A \\<Longrightarrow> b \\<in> A \\<Longrightarrow> r a b \\<longleftrightarrow> r' a b\"\n  shows \"total_ordered_set A r \\<longleftrightarrow> total_ordered_set A r'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. total_ordered_set A r = total_ordered_set A r'", "by (simp add: total_ordered_set_def r cong: total_quasi_ordered_set_cong antisymmetric_cong)"], ["", "subsection \\<open>Well-Foundedness\\<close>"], ["", "locale well_founded = related_set A \"(\\<sqsubset>)\" for A and less (infix \"\\<sqsubset>\" 50) +\n  assumes induct[consumes 1, case_names less, induct set]:\n    \"a \\<in> A \\<Longrightarrow> (\\<And>x. x \\<in> A \\<Longrightarrow> (\\<And>y. y \\<in> A \\<Longrightarrow> y \\<sqsubset> x \\<Longrightarrow> P y) \\<Longrightarrow> P x) \\<Longrightarrow> P a\"\nbegin"], ["", "sublocale asymmetric"], ["proof (prove)\ngoal (1 subgoal):\n 1. asymmetric A (\\<sqsubset>)", "proof (intro asymmetric.intro notI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<sqsubset> y; y \\<sqsubset> x; x \\<in> A;\n        y \\<in> A\\<rbrakk>\n       \\<Longrightarrow> False", "fix x y"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<sqsubset> y; y \\<sqsubset> x; x \\<in> A;\n        y \\<in> A\\<rbrakk>\n       \\<Longrightarrow> False", "assume xA: \"x \\<in> A\""], ["proof (state)\nthis:\n  x \\<in> A\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<sqsubset> y; y \\<sqsubset> x; x \\<in> A;\n        y \\<in> A\\<rbrakk>\n       \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  x \\<in> A", "show \"y \\<in> A \\<Longrightarrow> x \\<sqsubset> y \\<Longrightarrow> y \\<sqsubset> x \\<Longrightarrow> False\""], ["proof (prove)\nusing this:\n  x \\<in> A\n\ngoal (1 subgoal):\n 1. \\<lbrakk>y \\<in> A; x \\<sqsubset> y; y \\<sqsubset> x\\<rbrakk>\n    \\<Longrightarrow> False", "by (induct arbitrary: y rule: induct, auto)"], ["proof (state)\nthis:\n  \\<lbrakk>y \\<in> A; x \\<sqsubset> y; y \\<sqsubset> x\\<rbrakk>\n  \\<Longrightarrow> False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma prefixed_Imagep_imp_empty:\n  assumes a: \"X \\<subseteq> ((\\<sqsubset>) ``` X) \\<inter> A\" shows \"X = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X = {}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. X = {}", "from a"], ["proof (chain)\npicking this:\n  X \\<subseteq> ((\\<sqsubset>) ``` X) \\<inter> A", "have XA: \"X \\<subseteq> A\""], ["proof (prove)\nusing this:\n  X \\<subseteq> ((\\<sqsubset>) ``` X) \\<inter> A\n\ngoal (1 subgoal):\n 1. X \\<subseteq> A", "by auto"], ["proof (state)\nthis:\n  X \\<subseteq> A\n\ngoal (1 subgoal):\n 1. X = {}", "have \"x \\<in> A \\<Longrightarrow> x \\<notin> X\" for x"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> A \\<Longrightarrow> x \\<notin> X", "proof (induct x rule: induct)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> A;\n        \\<And>y.\n           \\<lbrakk>y \\<in> A; y \\<sqsubset> x\\<rbrakk>\n           \\<Longrightarrow> y \\<notin> X\\<rbrakk>\n       \\<Longrightarrow> x \\<notin> X", "case (less x)"], ["proof (state)\nthis:\n  x \\<in> A\n  \\<lbrakk>?y \\<in> A; ?y \\<sqsubset> x\\<rbrakk>\n  \\<Longrightarrow> ?y \\<notin> X\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> A;\n        \\<And>y.\n           \\<lbrakk>y \\<in> A; y \\<sqsubset> x\\<rbrakk>\n           \\<Longrightarrow> y \\<notin> X\\<rbrakk>\n       \\<Longrightarrow> x \\<notin> X", "with a"], ["proof (chain)\npicking this:\n  X \\<subseteq> ((\\<sqsubset>) ``` X) \\<inter> A\n  x \\<in> A\n  \\<lbrakk>?y \\<in> A; ?y \\<sqsubset> x\\<rbrakk>\n  \\<Longrightarrow> ?y \\<notin> X", "show ?case"], ["proof (prove)\nusing this:\n  X \\<subseteq> ((\\<sqsubset>) ``` X) \\<inter> A\n  x \\<in> A\n  \\<lbrakk>?y \\<in> A; ?y \\<sqsubset> x\\<rbrakk>\n  \\<Longrightarrow> ?y \\<notin> X\n\ngoal (1 subgoal):\n 1. x \\<notin> X", "by (auto simp: Imagep_def)"], ["proof (state)\nthis:\n  x \\<notin> X\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?x \\<in> A \\<Longrightarrow> ?x \\<notin> X\n\ngoal (1 subgoal):\n 1. X = {}", "with XA"], ["proof (chain)\npicking this:\n  X \\<subseteq> A\n  ?x \\<in> A \\<Longrightarrow> ?x \\<notin> X", "show ?thesis"], ["proof (prove)\nusing this:\n  X \\<subseteq> A\n  ?x \\<in> A \\<Longrightarrow> ?x \\<notin> X\n\ngoal (1 subgoal):\n 1. X = {}", "by auto"], ["proof (state)\nthis:\n  X = {}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma nonempty_imp_ex_extremal:\n  assumes QA: \"Q \\<subseteq> A\" and Q: \"Q \\<noteq> {}\"\n  shows \"\\<exists>z \\<in> Q. \\<forall>y \\<in> Q. \\<not> y \\<sqsubset> z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>z\\<in>Q. \\<forall>y\\<in>Q. \\<not> y \\<sqsubset> z", "using Q prefixed_Imagep_imp_empty[of Q] QA"], ["proof (prove)\nusing this:\n  Q \\<noteq> {}\n  Q \\<subseteq> ((\\<sqsubset>) ``` Q) \\<inter> A \\<Longrightarrow> Q = {}\n  Q \\<subseteq> A\n\ngoal (1 subgoal):\n 1. \\<exists>z\\<in>Q. \\<forall>y\\<in>Q. \\<not> y \\<sqsubset> z", "by (auto simp: Imagep_def)"], ["", "interpretation Restrp: well_founded UNIV \"(\\<sqsubset>)\\<restriction>A\"\n  rewrites \"\\<And>x. x \\<in> UNIV \\<equiv> True\"\n    and \"(\\<sqsubset>)\\<restriction>A\\<restriction>UNIV = (\\<sqsubset>)\\<restriction>A\"\n    and \"\\<And>P1. (True \\<Longrightarrow> PROP P1) \\<equiv> PROP P1\"\n    and \"\\<And>P1. (True \\<Longrightarrow> P1) \\<equiv> Trueprop P1\"\n    and \"\\<And>P1 P2. (True \\<Longrightarrow> PROP P1 \\<Longrightarrow> PROP P2) \\<equiv> (PROP P1 \\<Longrightarrow> PROP P2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (well_founded UNIV ((\\<sqsubset>) \\<restriction> A) &&&\n     (\\<And>x. x \\<in> UNIV \\<equiv> True) &&&\n     (\\<sqsubset>) \\<restriction> A \\<restriction> UNIV =\n     (\\<sqsubset>) \\<restriction> A) &&&\n    (\\<And>P1. (True \\<Longrightarrow> PROP P1) \\<equiv> PROP P1) &&&\n    (\\<And>P1. (True \\<Longrightarrow> P1) \\<equiv> P1) &&&\n    (\\<And>P1 P2.\n        (\\<lbrakk>True; PROP P1\\<rbrakk> \\<Longrightarrow> PROP P2) \\<equiv>\n        (PROP P1 \\<Longrightarrow> PROP P2))", "proof -"], ["proof (state)\ngoal (6 subgoals):\n 1. well_founded UNIV ((\\<sqsubset>) \\<restriction> A)\n 2. \\<And>x. x \\<in> UNIV \\<equiv> True\n 3. (\\<sqsubset>) \\<restriction> A \\<restriction> UNIV =\n    (\\<sqsubset>) \\<restriction> A\n 4. \\<And>P1. (True \\<Longrightarrow> PROP P1) \\<equiv> PROP P1\n 5. \\<And>P1. (True \\<Longrightarrow> P1) \\<equiv> P1\n 6. \\<And>P1 P2.\n       (\\<lbrakk>True; PROP P1\\<rbrakk> \\<Longrightarrow> PROP P2) \\<equiv>\n       (PROP P1 \\<Longrightarrow> PROP P2)", "have \"(\\<And>x. (\\<And>y. ((\\<sqsubset>) \\<restriction> A) y x \\<Longrightarrow> P y) \\<Longrightarrow> P x) \\<Longrightarrow> P a\" for a P"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>x.\n        (\\<And>y.\n            ((\\<sqsubset>) \\<restriction> A) y x \\<Longrightarrow>\n            P y) \\<Longrightarrow>\n        P x) \\<Longrightarrow>\n    P a", "using induct[of a P]"], ["proof (prove)\nusing this:\n  \\<lbrakk>a \\<in> A;\n   \\<And>x.\n      \\<lbrakk>x \\<in> A;\n       \\<And>y.\n          \\<lbrakk>y \\<in> A; y \\<sqsubset> x\\<rbrakk>\n          \\<Longrightarrow> P y\\<rbrakk>\n      \\<Longrightarrow> P x\\<rbrakk>\n  \\<Longrightarrow> P a\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        (\\<And>y.\n            ((\\<sqsubset>) \\<restriction> A) y x \\<Longrightarrow>\n            P y) \\<Longrightarrow>\n        P x) \\<Longrightarrow>\n    P a", "by (auto simp: Restrp_def)"], ["proof (state)\nthis:\n  (\\<And>x.\n      (\\<And>y.\n          ((\\<sqsubset>) \\<restriction> A) y x \\<Longrightarrow>\n          ?P1 y) \\<Longrightarrow>\n      ?P1 x) \\<Longrightarrow>\n  ?P1 ?a1\n\ngoal (6 subgoals):\n 1. well_founded UNIV ((\\<sqsubset>) \\<restriction> A)\n 2. \\<And>x. x \\<in> UNIV \\<equiv> True\n 3. (\\<sqsubset>) \\<restriction> A \\<restriction> UNIV =\n    (\\<sqsubset>) \\<restriction> A\n 4. \\<And>P1. (True \\<Longrightarrow> PROP P1) \\<equiv> PROP P1\n 5. \\<And>P1. (True \\<Longrightarrow> P1) \\<equiv> P1\n 6. \\<And>P1 P2.\n       (\\<lbrakk>True; PROP P1\\<rbrakk> \\<Longrightarrow> PROP P2) \\<equiv>\n       (PROP P1 \\<Longrightarrow> PROP P2)", "then"], ["proof (chain)\npicking this:\n  (\\<And>x.\n      (\\<And>y.\n          ((\\<sqsubset>) \\<restriction> A) y x \\<Longrightarrow>\n          ?P1 y) \\<Longrightarrow>\n      ?P1 x) \\<Longrightarrow>\n  ?P1 ?a1", "show \"well_founded UNIV ((\\<sqsubset>)\\<restriction>A)\""], ["proof (prove)\nusing this:\n  (\\<And>x.\n      (\\<And>y.\n          ((\\<sqsubset>) \\<restriction> A) y x \\<Longrightarrow>\n          ?P1 y) \\<Longrightarrow>\n      ?P1 x) \\<Longrightarrow>\n  ?P1 ?a1\n\ngoal (1 subgoal):\n 1. well_founded UNIV ((\\<sqsubset>) \\<restriction> A)", "apply unfold_locales"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a P.\n       \\<lbrakk>\\<And>P a.\n                   (\\<And>x.\n                       (\\<And>y.\n                           ((\\<sqsubset>) \\<restriction> A) y\n                            x \\<Longrightarrow>\n                           P y) \\<Longrightarrow>\n                       P x) \\<Longrightarrow>\n                   P a;\n        a \\<in> UNIV;\n        \\<And>x.\n           \\<lbrakk>x \\<in> UNIV;\n            \\<And>y.\n               \\<lbrakk>y \\<in> UNIV;\n                ((\\<sqsubset>) \\<restriction> A) y x\\<rbrakk>\n               \\<Longrightarrow> P y\\<rbrakk>\n           \\<Longrightarrow> P x\\<rbrakk>\n       \\<Longrightarrow> P a", "by auto"], ["proof (state)\nthis:\n  well_founded UNIV ((\\<sqsubset>) \\<restriction> A)\n\ngoal (5 subgoals):\n 1. \\<And>x. x \\<in> UNIV \\<equiv> True\n 2. (\\<sqsubset>) \\<restriction> A \\<restriction> UNIV =\n    (\\<sqsubset>) \\<restriction> A\n 3. \\<And>P1. (True \\<Longrightarrow> PROP P1) \\<equiv> PROP P1\n 4. \\<And>P1. (True \\<Longrightarrow> P1) \\<equiv> P1\n 5. \\<And>P1 P2.\n       (\\<lbrakk>True; PROP P1\\<rbrakk> \\<Longrightarrow> PROP P2) \\<equiv>\n       (PROP P1 \\<Longrightarrow> PROP P2)", "qed auto"], ["", "lemmas Restrp_well_founded = Restrp.well_founded_axioms"], ["", "lemmas Restrp_induct[consumes 0, case_names less] = Restrp.induct"], ["", "interpretation Restrp.tranclp: well_founded UNIV \"((\\<sqsubset>)\\<restriction>A)\\<^sup>+\\<^sup>+\"\n  rewrites \"\\<And>x. x \\<in> UNIV \\<equiv> True\"\n    and \"((\\<sqsubset>)\\<restriction>A)\\<^sup>+\\<^sup>+ \\<restriction> UNIV = ((\\<sqsubset>)\\<restriction>A)\\<^sup>+\\<^sup>+\"\n    and \"(((\\<sqsubset>)\\<restriction>A)\\<^sup>+\\<^sup>+)\\<^sup>+\\<^sup>+ = ((\\<sqsubset>)\\<restriction>A)\\<^sup>+\\<^sup>+\"\n    and \"\\<And>P1. (True \\<Longrightarrow> PROP P1) \\<equiv> PROP P1\"\n    and \"\\<And>P1. (True \\<Longrightarrow> P1) \\<equiv> Trueprop P1\"\n    and \"\\<And>P1 P2. (True \\<Longrightarrow> PROP P1 \\<Longrightarrow> PROP P2) \\<equiv> (PROP P1 \\<Longrightarrow> PROP P2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (well_founded UNIV ((\\<sqsubset>) \\<restriction> A)\\<^sup>+\\<^sup>+ &&&\n     (\\<And>x. x \\<in> UNIV \\<equiv> True) &&&\n     ((\\<sqsubset>) \\<restriction> A)\\<^sup>+\\<^sup>+ \\<restriction> UNIV =\n     ((\\<sqsubset>) \\<restriction> A)\\<^sup>+\\<^sup>+) &&&\n    (((\\<sqsubset>) \\<restriction> A)\\<^sup>+\\<^sup>+\\<^sup>+\\<^sup>+ =\n     ((\\<sqsubset>) \\<restriction> A)\\<^sup>+\\<^sup>+ &&&\n     (\\<And>P1. (True \\<Longrightarrow> PROP P1) \\<equiv> PROP P1)) &&&\n    (\\<And>P1. (True \\<Longrightarrow> P1) \\<equiv> P1) &&&\n    (\\<And>P1 P2.\n        (\\<lbrakk>True; PROP P1\\<rbrakk> \\<Longrightarrow> PROP P2) \\<equiv>\n        (PROP P1 \\<Longrightarrow> PROP P2))", "proof-"], ["proof (state)\ngoal (7 subgoals):\n 1. well_founded UNIV ((\\<sqsubset>) \\<restriction> A)\\<^sup>+\\<^sup>+\n 2. \\<And>x. x \\<in> UNIV \\<equiv> True\n 3. ((\\<sqsubset>) \\<restriction> A)\\<^sup>+\\<^sup>+ \\<restriction> UNIV =\n    ((\\<sqsubset>) \\<restriction> A)\\<^sup>+\\<^sup>+\n 4. ((\\<sqsubset>) \\<restriction> A)\\<^sup>+\\<^sup>+\\<^sup>+\\<^sup>+ =\n    ((\\<sqsubset>) \\<restriction> A)\\<^sup>+\\<^sup>+\n 5. \\<And>P1. (True \\<Longrightarrow> PROP P1) \\<equiv> PROP P1\n 6. \\<And>P1. (True \\<Longrightarrow> P1) \\<equiv> P1\n 7. \\<And>P1 P2.\n       (\\<lbrakk>True; PROP P1\\<rbrakk> \\<Longrightarrow> PROP P2) \\<equiv>\n       (PROP P1 \\<Longrightarrow> PROP P2)", "{"], ["proof (state)\ngoal (7 subgoals):\n 1. well_founded UNIV ((\\<sqsubset>) \\<restriction> A)\\<^sup>+\\<^sup>+\n 2. \\<And>x. x \\<in> UNIV \\<equiv> True\n 3. ((\\<sqsubset>) \\<restriction> A)\\<^sup>+\\<^sup>+ \\<restriction> UNIV =\n    ((\\<sqsubset>) \\<restriction> A)\\<^sup>+\\<^sup>+\n 4. ((\\<sqsubset>) \\<restriction> A)\\<^sup>+\\<^sup>+\\<^sup>+\\<^sup>+ =\n    ((\\<sqsubset>) \\<restriction> A)\\<^sup>+\\<^sup>+\n 5. \\<And>P1. (True \\<Longrightarrow> PROP P1) \\<equiv> PROP P1\n 6. \\<And>P1. (True \\<Longrightarrow> P1) \\<equiv> P1\n 7. \\<And>P1 P2.\n       (\\<lbrakk>True; PROP P1\\<rbrakk> \\<Longrightarrow> PROP P2) \\<equiv>\n       (PROP P1 \\<Longrightarrow> PROP P2)", "fix P x"], ["proof (state)\ngoal (7 subgoals):\n 1. well_founded UNIV ((\\<sqsubset>) \\<restriction> A)\\<^sup>+\\<^sup>+\n 2. \\<And>x. x \\<in> UNIV \\<equiv> True\n 3. ((\\<sqsubset>) \\<restriction> A)\\<^sup>+\\<^sup>+ \\<restriction> UNIV =\n    ((\\<sqsubset>) \\<restriction> A)\\<^sup>+\\<^sup>+\n 4. ((\\<sqsubset>) \\<restriction> A)\\<^sup>+\\<^sup>+\\<^sup>+\\<^sup>+ =\n    ((\\<sqsubset>) \\<restriction> A)\\<^sup>+\\<^sup>+\n 5. \\<And>P1. (True \\<Longrightarrow> PROP P1) \\<equiv> PROP P1\n 6. \\<And>P1. (True \\<Longrightarrow> P1) \\<equiv> P1\n 7. \\<And>P1 P2.\n       (\\<lbrakk>True; PROP P1\\<rbrakk> \\<Longrightarrow> PROP P2) \\<equiv>\n       (PROP P1 \\<Longrightarrow> PROP P2)", "assume induct_step: \"\\<And>x. (\\<And>y. ((\\<sqsubset>)\\<restriction>A)\\<^sup>+\\<^sup>+ y x \\<Longrightarrow> P y) \\<Longrightarrow> P x\""], ["proof (state)\nthis:\n  (\\<And>y.\n      ((\\<sqsubset>) \\<restriction> A)\\<^sup>+\\<^sup>+ y\n       ?x1 \\<Longrightarrow>\n      P y) \\<Longrightarrow>\n  P ?x1\n\ngoal (7 subgoals):\n 1. well_founded UNIV ((\\<sqsubset>) \\<restriction> A)\\<^sup>+\\<^sup>+\n 2. \\<And>x. x \\<in> UNIV \\<equiv> True\n 3. ((\\<sqsubset>) \\<restriction> A)\\<^sup>+\\<^sup>+ \\<restriction> UNIV =\n    ((\\<sqsubset>) \\<restriction> A)\\<^sup>+\\<^sup>+\n 4. ((\\<sqsubset>) \\<restriction> A)\\<^sup>+\\<^sup>+\\<^sup>+\\<^sup>+ =\n    ((\\<sqsubset>) \\<restriction> A)\\<^sup>+\\<^sup>+\n 5. \\<And>P1. (True \\<Longrightarrow> PROP P1) \\<equiv> PROP P1\n 6. \\<And>P1. (True \\<Longrightarrow> P1) \\<equiv> P1\n 7. \\<And>P1 P2.\n       (\\<lbrakk>True; PROP P1\\<rbrakk> \\<Longrightarrow> PROP P2) \\<equiv>\n       (PROP P1 \\<Longrightarrow> PROP P2)", "have \"P x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P x", "proof (rule induct_step)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y.\n       ((\\<sqsubset>) \\<restriction> A)\\<^sup>+\\<^sup>+ y\n        x \\<Longrightarrow>\n       P y", "show \"\\<And>y. ((\\<sqsubset>)\\<restriction>A)\\<^sup>+\\<^sup>+ y x \\<Longrightarrow> P y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y.\n       ((\\<sqsubset>) \\<restriction> A)\\<^sup>+\\<^sup>+ y\n        x \\<Longrightarrow>\n       P y", "proof (induct x rule: Restrp_induct)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>\\<And>y ya.\n                   \\<lbrakk>((\\<sqsubset>) \\<restriction> A) y x;\n                    ((\\<sqsubset>) \\<restriction> A)\\<^sup>+\\<^sup>+ ya\n                     y\\<rbrakk>\n                   \\<Longrightarrow> P ya;\n        ((\\<sqsubset>) \\<restriction> A)\\<^sup>+\\<^sup>+ y x\\<rbrakk>\n       \\<Longrightarrow> P y", "case (less x)"], ["proof (state)\nthis:\n  \\<lbrakk>((\\<sqsubset>) \\<restriction> A) ?y1 x;\n   ((\\<sqsubset>) \\<restriction> A)\\<^sup>+\\<^sup>+ ?ya1 ?y1\\<rbrakk>\n  \\<Longrightarrow> P ?ya1\n  ((\\<sqsubset>) \\<restriction> A)\\<^sup>+\\<^sup>+ y x\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>\\<And>y ya.\n                   \\<lbrakk>((\\<sqsubset>) \\<restriction> A) y x;\n                    ((\\<sqsubset>) \\<restriction> A)\\<^sup>+\\<^sup>+ ya\n                     y\\<rbrakk>\n                   \\<Longrightarrow> P ya;\n        ((\\<sqsubset>) \\<restriction> A)\\<^sup>+\\<^sup>+ y x\\<rbrakk>\n       \\<Longrightarrow> P y", "from \\<open>((\\<sqsubset>)\\<restriction>A)\\<^sup>+\\<^sup>+ y x\\<close>"], ["proof (chain)\npicking this:\n  ((\\<sqsubset>) \\<restriction> A)\\<^sup>+\\<^sup>+ y x", "show ?case"], ["proof (prove)\nusing this:\n  ((\\<sqsubset>) \\<restriction> A)\\<^sup>+\\<^sup>+ y x\n\ngoal (1 subgoal):\n 1. P y", "proof (cases rule: tranclp.cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. ((\\<sqsubset>) \\<restriction> A) y x \\<Longrightarrow> P y\n 2. \\<And>b.\n       \\<lbrakk>((\\<sqsubset>) \\<restriction> A)\\<^sup>+\\<^sup>+ y b;\n        ((\\<sqsubset>) \\<restriction> A) b x\\<rbrakk>\n       \\<Longrightarrow> P y", "case r_into_trancl"], ["proof (state)\nthis:\n  ((\\<sqsubset>) \\<restriction> A) y x\n\ngoal (2 subgoals):\n 1. ((\\<sqsubset>) \\<restriction> A) y x \\<Longrightarrow> P y\n 2. \\<And>b.\n       \\<lbrakk>((\\<sqsubset>) \\<restriction> A)\\<^sup>+\\<^sup>+ y b;\n        ((\\<sqsubset>) \\<restriction> A) b x\\<rbrakk>\n       \\<Longrightarrow> P y", "with induct_step less"], ["proof (chain)\npicking this:\n  (\\<And>y.\n      ((\\<sqsubset>) \\<restriction> A)\\<^sup>+\\<^sup>+ y\n       ?x1 \\<Longrightarrow>\n      P y) \\<Longrightarrow>\n  P ?x1\n  \\<lbrakk>((\\<sqsubset>) \\<restriction> A) ?y1 x;\n   ((\\<sqsubset>) \\<restriction> A)\\<^sup>+\\<^sup>+ ?ya1 ?y1\\<rbrakk>\n  \\<Longrightarrow> P ?ya1\n  ((\\<sqsubset>) \\<restriction> A)\\<^sup>+\\<^sup>+ y x\n  ((\\<sqsubset>) \\<restriction> A) y x", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<And>y.\n      ((\\<sqsubset>) \\<restriction> A)\\<^sup>+\\<^sup>+ y\n       ?x1 \\<Longrightarrow>\n      P y) \\<Longrightarrow>\n  P ?x1\n  \\<lbrakk>((\\<sqsubset>) \\<restriction> A) ?y1 x;\n   ((\\<sqsubset>) \\<restriction> A)\\<^sup>+\\<^sup>+ ?ya1 ?y1\\<rbrakk>\n  \\<Longrightarrow> P ?ya1\n  ((\\<sqsubset>) \\<restriction> A)\\<^sup>+\\<^sup>+ y x\n  ((\\<sqsubset>) \\<restriction> A) y x\n\ngoal (1 subgoal):\n 1. P y", "by auto"], ["proof (state)\nthis:\n  P y\n\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>((\\<sqsubset>) \\<restriction> A)\\<^sup>+\\<^sup>+ y b;\n        ((\\<sqsubset>) \\<restriction> A) b x\\<rbrakk>\n       \\<Longrightarrow> P y", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>((\\<sqsubset>) \\<restriction> A)\\<^sup>+\\<^sup>+ y b;\n        ((\\<sqsubset>) \\<restriction> A) b x\\<rbrakk>\n       \\<Longrightarrow> P y", "case (trancl_into_trancl b)"], ["proof (state)\nthis:\n  ((\\<sqsubset>) \\<restriction> A)\\<^sup>+\\<^sup>+ y b\n  ((\\<sqsubset>) \\<restriction> A) b x\n\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>((\\<sqsubset>) \\<restriction> A)\\<^sup>+\\<^sup>+ y b;\n        ((\\<sqsubset>) \\<restriction> A) b x\\<rbrakk>\n       \\<Longrightarrow> P y", "with less"], ["proof (chain)\npicking this:\n  \\<lbrakk>((\\<sqsubset>) \\<restriction> A) ?y1 x;\n   ((\\<sqsubset>) \\<restriction> A)\\<^sup>+\\<^sup>+ ?ya1 ?y1\\<rbrakk>\n  \\<Longrightarrow> P ?ya1\n  ((\\<sqsubset>) \\<restriction> A)\\<^sup>+\\<^sup>+ y x\n  ((\\<sqsubset>) \\<restriction> A)\\<^sup>+\\<^sup>+ y b\n  ((\\<sqsubset>) \\<restriction> A) b x", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>((\\<sqsubset>) \\<restriction> A) ?y1 x;\n   ((\\<sqsubset>) \\<restriction> A)\\<^sup>+\\<^sup>+ ?ya1 ?y1\\<rbrakk>\n  \\<Longrightarrow> P ?ya1\n  ((\\<sqsubset>) \\<restriction> A)\\<^sup>+\\<^sup>+ y x\n  ((\\<sqsubset>) \\<restriction> A)\\<^sup>+\\<^sup>+ y b\n  ((\\<sqsubset>) \\<restriction> A) b x\n\ngoal (1 subgoal):\n 1. P y", "by auto"], ["proof (state)\nthis:\n  P y\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  P y\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ((\\<sqsubset>) \\<restriction> A)\\<^sup>+\\<^sup>+ ?y1 x \\<Longrightarrow>\n  P ?y1\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  P x\n\ngoal (7 subgoals):\n 1. well_founded UNIV ((\\<sqsubset>) \\<restriction> A)\\<^sup>+\\<^sup>+\n 2. \\<And>x. x \\<in> UNIV \\<equiv> True\n 3. ((\\<sqsubset>) \\<restriction> A)\\<^sup>+\\<^sup>+ \\<restriction> UNIV =\n    ((\\<sqsubset>) \\<restriction> A)\\<^sup>+\\<^sup>+\n 4. ((\\<sqsubset>) \\<restriction> A)\\<^sup>+\\<^sup>+\\<^sup>+\\<^sup>+ =\n    ((\\<sqsubset>) \\<restriction> A)\\<^sup>+\\<^sup>+\n 5. \\<And>P1. (True \\<Longrightarrow> PROP P1) \\<equiv> PROP P1\n 6. \\<And>P1. (True \\<Longrightarrow> P1) \\<equiv> P1\n 7. \\<And>P1 P2.\n       (\\<lbrakk>True; PROP P1\\<rbrakk> \\<Longrightarrow> PROP P2) \\<equiv>\n       (PROP P1 \\<Longrightarrow> PROP P2)", "}"], ["proof (state)\nthis:\n  (\\<And>x.\n      (\\<And>y.\n          ((\\<sqsubset>) \\<restriction> A)\\<^sup>+\\<^sup>+ y\n           x \\<Longrightarrow>\n          ?P3 y) \\<Longrightarrow>\n      ?P3 x) \\<Longrightarrow>\n  ?P3 ?x3\n\ngoal (7 subgoals):\n 1. well_founded UNIV ((\\<sqsubset>) \\<restriction> A)\\<^sup>+\\<^sup>+\n 2. \\<And>x. x \\<in> UNIV \\<equiv> True\n 3. ((\\<sqsubset>) \\<restriction> A)\\<^sup>+\\<^sup>+ \\<restriction> UNIV =\n    ((\\<sqsubset>) \\<restriction> A)\\<^sup>+\\<^sup>+\n 4. ((\\<sqsubset>) \\<restriction> A)\\<^sup>+\\<^sup>+\\<^sup>+\\<^sup>+ =\n    ((\\<sqsubset>) \\<restriction> A)\\<^sup>+\\<^sup>+\n 5. \\<And>P1. (True \\<Longrightarrow> PROP P1) \\<equiv> PROP P1\n 6. \\<And>P1. (True \\<Longrightarrow> P1) \\<equiv> P1\n 7. \\<And>P1 P2.\n       (\\<lbrakk>True; PROP P1\\<rbrakk> \\<Longrightarrow> PROP P2) \\<equiv>\n       (PROP P1 \\<Longrightarrow> PROP P2)", "then"], ["proof (chain)\npicking this:\n  (\\<And>x.\n      (\\<And>y.\n          ((\\<sqsubset>) \\<restriction> A)\\<^sup>+\\<^sup>+ y\n           x \\<Longrightarrow>\n          ?P3 y) \\<Longrightarrow>\n      ?P3 x) \\<Longrightarrow>\n  ?P3 ?x3", "show \"well_founded UNIV ((\\<sqsubset>)\\<restriction>A)\\<^sup>+\\<^sup>+\""], ["proof (prove)\nusing this:\n  (\\<And>x.\n      (\\<And>y.\n          ((\\<sqsubset>) \\<restriction> A)\\<^sup>+\\<^sup>+ y\n           x \\<Longrightarrow>\n          ?P3 y) \\<Longrightarrow>\n      ?P3 x) \\<Longrightarrow>\n  ?P3 ?x3\n\ngoal (1 subgoal):\n 1. well_founded UNIV ((\\<sqsubset>) \\<restriction> A)\\<^sup>+\\<^sup>+", "by unfold_locales auto"], ["proof (state)\nthis:\n  well_founded UNIV ((\\<sqsubset>) \\<restriction> A)\\<^sup>+\\<^sup>+\n\ngoal (6 subgoals):\n 1. \\<And>x. x \\<in> UNIV \\<equiv> True\n 2. ((\\<sqsubset>) \\<restriction> A)\\<^sup>+\\<^sup>+ \\<restriction> UNIV =\n    ((\\<sqsubset>) \\<restriction> A)\\<^sup>+\\<^sup>+\n 3. ((\\<sqsubset>) \\<restriction> A)\\<^sup>+\\<^sup>+\\<^sup>+\\<^sup>+ =\n    ((\\<sqsubset>) \\<restriction> A)\\<^sup>+\\<^sup>+\n 4. \\<And>P1. (True \\<Longrightarrow> PROP P1) \\<equiv> PROP P1\n 5. \\<And>P1. (True \\<Longrightarrow> P1) \\<equiv> P1\n 6. \\<And>P1 P2.\n       (\\<lbrakk>True; PROP P1\\<rbrakk> \\<Longrightarrow> PROP P2) \\<equiv>\n       (PROP P1 \\<Longrightarrow> PROP P2)", "qed auto"], ["", "lemmas Restrp_tranclp_well_founded = Restrp.tranclp.well_founded_axioms"], ["", "lemmas Restrp_tranclp_induct[consumes 0, case_names less] = Restrp.tranclp.induct"], ["", "end"], ["", "context\n  fixes A :: \"'a set\" and less :: \"'a \\<Rightarrow> 'a \\<Rightarrow> bool\" (infix \"\\<sqsubset>\" 50)\nbegin"], ["", "lemma well_foundedI_pf:\n  assumes pre: \"\\<And>X. X \\<subseteq> A \\<Longrightarrow> X \\<subseteq> ((\\<sqsubset>) ``` X) \\<inter> A \\<Longrightarrow> X = {}\"\n  shows \"well_founded A (\\<sqsubset>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. well_founded A (\\<sqsubset>)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a P.\n       \\<lbrakk>a \\<in> A;\n        \\<And>x.\n           \\<lbrakk>x \\<in> A;\n            \\<And>y.\n               \\<lbrakk>y \\<in> A; y \\<sqsubset> x\\<rbrakk>\n               \\<Longrightarrow> P y\\<rbrakk>\n           \\<Longrightarrow> P x\\<rbrakk>\n       \\<Longrightarrow> P a", "fix P a"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a P.\n       \\<lbrakk>a \\<in> A;\n        \\<And>x.\n           \\<lbrakk>x \\<in> A;\n            \\<And>y.\n               \\<lbrakk>y \\<in> A; y \\<sqsubset> x\\<rbrakk>\n               \\<Longrightarrow> P y\\<rbrakk>\n           \\<Longrightarrow> P x\\<rbrakk>\n       \\<Longrightarrow> P a", "assume aA: \"a \\<in> A\" and Ind: \"\\<And>x. x \\<in> A \\<Longrightarrow> (\\<And>y. y \\<in> A \\<Longrightarrow> y \\<sqsubset> x \\<Longrightarrow> P y) \\<Longrightarrow> P x\""], ["proof (state)\nthis:\n  a \\<in> A\n  \\<lbrakk>?x \\<in> A;\n   \\<And>y.\n      \\<lbrakk>y \\<in> A; y \\<sqsubset> ?x\\<rbrakk>\n      \\<Longrightarrow> P y\\<rbrakk>\n  \\<Longrightarrow> P ?x\n\ngoal (1 subgoal):\n 1. \\<And>a P.\n       \\<lbrakk>a \\<in> A;\n        \\<And>x.\n           \\<lbrakk>x \\<in> A;\n            \\<And>y.\n               \\<lbrakk>y \\<in> A; y \\<sqsubset> x\\<rbrakk>\n               \\<Longrightarrow> P y\\<rbrakk>\n           \\<Longrightarrow> P x\\<rbrakk>\n       \\<Longrightarrow> P a", "from Ind"], ["proof (chain)\npicking this:\n  \\<lbrakk>?x \\<in> A;\n   \\<And>y.\n      \\<lbrakk>y \\<in> A; y \\<sqsubset> ?x\\<rbrakk>\n      \\<Longrightarrow> P y\\<rbrakk>\n  \\<Longrightarrow> P ?x", "have \"{a\\<in>A. \\<not>P a} \\<subseteq> ((\\<sqsubset>) ``` {a\\<in>A. \\<not>P a}) \\<inter> A\""], ["proof (prove)\nusing this:\n  \\<lbrakk>?x \\<in> A;\n   \\<And>y.\n      \\<lbrakk>y \\<in> A; y \\<sqsubset> ?x\\<rbrakk>\n      \\<Longrightarrow> P y\\<rbrakk>\n  \\<Longrightarrow> P ?x\n\ngoal (1 subgoal):\n 1. {a \\<in> A. \\<not> P a}\n    \\<subseteq> ((\\<sqsubset>) ``` {a \\<in> A. \\<not> P a}) \\<inter> A", "by (auto simp: Imagep_def)"], ["proof (state)\nthis:\n  {a \\<in> A. \\<not> P a}\n  \\<subseteq> ((\\<sqsubset>) ``` {a \\<in> A. \\<not> P a}) \\<inter> A\n\ngoal (1 subgoal):\n 1. \\<And>a P.\n       \\<lbrakk>a \\<in> A;\n        \\<And>x.\n           \\<lbrakk>x \\<in> A;\n            \\<And>y.\n               \\<lbrakk>y \\<in> A; y \\<sqsubset> x\\<rbrakk>\n               \\<Longrightarrow> P y\\<rbrakk>\n           \\<Longrightarrow> P x\\<rbrakk>\n       \\<Longrightarrow> P a", "from pre[OF _ this] aA"], ["proof (chain)\npicking this:\n  {a \\<in> A. \\<not> P a} \\<subseteq> A \\<Longrightarrow>\n  {a \\<in> A. \\<not> P a} = {}\n  a \\<in> A", "show \"P a\""], ["proof (prove)\nusing this:\n  {a \\<in> A. \\<not> P a} \\<subseteq> A \\<Longrightarrow>\n  {a \\<in> A. \\<not> P a} = {}\n  a \\<in> A\n\ngoal (1 subgoal):\n 1. P a", "by auto"], ["proof (state)\nthis:\n  P a\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma well_foundedI_extremal:\n  assumes a: \"\\<And>X. X \\<subseteq> A \\<Longrightarrow> X \\<noteq> {} \\<Longrightarrow> \\<exists>x \\<in> X. \\<forall>y \\<in> X. \\<not> y \\<sqsubset> x\"\n  shows \"well_founded A (\\<sqsubset>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. well_founded A (\\<sqsubset>)", "proof (rule well_foundedI_pf)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>X.\n       \\<lbrakk>X \\<subseteq> A;\n        X \\<subseteq> ((\\<sqsubset>) ``` X) \\<inter> A\\<rbrakk>\n       \\<Longrightarrow> X = {}", "fix X"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>X.\n       \\<lbrakk>X \\<subseteq> A;\n        X \\<subseteq> ((\\<sqsubset>) ``` X) \\<inter> A\\<rbrakk>\n       \\<Longrightarrow> X = {}", "assume XA: \"X \\<subseteq> A\" and pf: \"X \\<subseteq> ((\\<sqsubset>) ``` X) \\<inter> A\""], ["proof (state)\nthis:\n  X \\<subseteq> A\n  X \\<subseteq> ((\\<sqsubset>) ``` X) \\<inter> A\n\ngoal (1 subgoal):\n 1. \\<And>X.\n       \\<lbrakk>X \\<subseteq> A;\n        X \\<subseteq> ((\\<sqsubset>) ``` X) \\<inter> A\\<rbrakk>\n       \\<Longrightarrow> X = {}", "from a[OF XA] pf"], ["proof (chain)\npicking this:\n  X \\<noteq> {} \\<Longrightarrow>\n  \\<exists>x\\<in>X. \\<forall>y\\<in>X. \\<not> y \\<sqsubset> x\n  X \\<subseteq> ((\\<sqsubset>) ``` X) \\<inter> A", "show \"X = {}\""], ["proof (prove)\nusing this:\n  X \\<noteq> {} \\<Longrightarrow>\n  \\<exists>x\\<in>X. \\<forall>y\\<in>X. \\<not> y \\<sqsubset> x\n  X \\<subseteq> ((\\<sqsubset>) ``` X) \\<inter> A\n\ngoal (1 subgoal):\n 1. X = {}", "by (auto simp: Imagep_def)"], ["proof (state)\nthis:\n  X = {}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma well_founded_iff_ex_extremal:\n  \"well_founded A (\\<sqsubset>) \\<longleftrightarrow> (\\<forall>X \\<subseteq> A. X \\<noteq> {} \\<longrightarrow> (\\<exists>x \\<in> X. \\<forall>z \\<in> X. \\<not> z \\<sqsubset> x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. well_founded A (\\<sqsubset>) =\n    (\\<forall>X\\<subseteq>A.\n        X \\<noteq> {} \\<longrightarrow>\n        (\\<exists>x\\<in>X. \\<forall>z\\<in>X. \\<not> z \\<sqsubset> x))", "using well_founded.nonempty_imp_ex_extremal well_foundedI_extremal"], ["proof (prove)\nusing this:\n  \\<lbrakk>well_founded ?A ?less; ?Q \\<subseteq> ?A; ?Q \\<noteq> {}\\<rbrakk>\n  \\<Longrightarrow> \\<exists>z\\<in>?Q. \\<forall>y\\<in>?Q. \\<not> ?less y z\n  (\\<And>X.\n      \\<lbrakk>X \\<subseteq> A; X \\<noteq> {}\\<rbrakk>\n      \\<Longrightarrow> \\<exists>x\\<in>X.\n                           \\<forall>y\\<in>X.\n                              \\<not> y \\<sqsubset> x) \\<Longrightarrow>\n  well_founded A (\\<sqsubset>)\n\ngoal (1 subgoal):\n 1. well_founded A (\\<sqsubset>) =\n    (\\<forall>X\\<subseteq>A.\n        X \\<noteq> {} \\<longrightarrow>\n        (\\<exists>x\\<in>X. \\<forall>z\\<in>X. \\<not> z \\<sqsubset> x))", "by blast"], ["", "end"], ["", "lemma well_founded_cong:\n  assumes r: \"\\<And>a b. a \\<in> A \\<Longrightarrow> b \\<in> A \\<Longrightarrow> r a b \\<longleftrightarrow> r' a b\"\n    and A: \"\\<And>a b. r' a b \\<Longrightarrow> a \\<in> A \\<longleftrightarrow> a \\<in> A'\"\n    and B: \"\\<And>a b. r' a b \\<Longrightarrow> b \\<in> A \\<longleftrightarrow> b \\<in> A'\"\n  shows \"well_founded A r \\<longleftrightarrow> well_founded A' r'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. well_founded A r = well_founded A' r'", "proof (intro iffI)"], ["proof (state)\ngoal (2 subgoals):\n 1. well_founded A r \\<Longrightarrow> well_founded A' r'\n 2. well_founded A' r' \\<Longrightarrow> well_founded A r", "assume wf: \"well_founded A r\""], ["proof (state)\nthis:\n  well_founded A r\n\ngoal (2 subgoals):\n 1. well_founded A r \\<Longrightarrow> well_founded A' r'\n 2. well_founded A' r' \\<Longrightarrow> well_founded A r", "show \"well_founded A' r'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. well_founded A' r'", "proof (intro well_foundedI_extremal)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>X.\n       \\<lbrakk>X \\<subseteq> A'; X \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>X. \\<forall>y\\<in>X. \\<not> r' y x", "fix X"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>X.\n       \\<lbrakk>X \\<subseteq> A'; X \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>X. \\<forall>y\\<in>X. \\<not> r' y x", "assume X: \"X \\<subseteq> A'\" and X0: \"X \\<noteq> {}\""], ["proof (state)\nthis:\n  X \\<subseteq> A'\n  X \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<And>X.\n       \\<lbrakk>X \\<subseteq> A'; X \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>X. \\<forall>y\\<in>X. \\<not> r' y x", "show \"\\<exists>x\\<in>X. \\<forall>y\\<in>X. \\<not> r' y x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x\\<in>X. \\<forall>y\\<in>X. \\<not> r' y x", "proof (cases \"X \\<inter> A = {}\")"], ["proof (state)\ngoal (2 subgoals):\n 1. X \\<inter> A = {} \\<Longrightarrow>\n    \\<exists>x\\<in>X. \\<forall>y\\<in>X. \\<not> r' y x\n 2. X \\<inter> A \\<noteq> {} \\<Longrightarrow>\n    \\<exists>x\\<in>X. \\<forall>y\\<in>X. \\<not> r' y x", "case True"], ["proof (state)\nthis:\n  X \\<inter> A = {}\n\ngoal (2 subgoals):\n 1. X \\<inter> A = {} \\<Longrightarrow>\n    \\<exists>x\\<in>X. \\<forall>y\\<in>X. \\<not> r' y x\n 2. X \\<inter> A \\<noteq> {} \\<Longrightarrow>\n    \\<exists>x\\<in>X. \\<forall>y\\<in>X. \\<not> r' y x", "from X0"], ["proof (chain)\npicking this:\n  X \\<noteq> {}", "obtain x where xX: \"x \\<in> X\""], ["proof (prove)\nusing this:\n  X \\<noteq> {}\n\ngoal (1 subgoal):\n 1. (\\<And>x. x \\<in> X \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by auto"], ["proof (state)\nthis:\n  x \\<in> X\n\ngoal (2 subgoals):\n 1. X \\<inter> A = {} \\<Longrightarrow>\n    \\<exists>x\\<in>X. \\<forall>y\\<in>X. \\<not> r' y x\n 2. X \\<inter> A \\<noteq> {} \\<Longrightarrow>\n    \\<exists>x\\<in>X. \\<forall>y\\<in>X. \\<not> r' y x", "with True"], ["proof (chain)\npicking this:\n  X \\<inter> A = {}\n  x \\<in> X", "have \"x \\<notin> A\""], ["proof (prove)\nusing this:\n  X \\<inter> A = {}\n  x \\<in> X\n\ngoal (1 subgoal):\n 1. x \\<notin> A", "by auto"], ["proof (state)\nthis:\n  x \\<notin> A\n\ngoal (2 subgoals):\n 1. X \\<inter> A = {} \\<Longrightarrow>\n    \\<exists>x\\<in>X. \\<forall>y\\<in>X. \\<not> r' y x\n 2. X \\<inter> A \\<noteq> {} \\<Longrightarrow>\n    \\<exists>x\\<in>X. \\<forall>y\\<in>X. \\<not> r' y x", "with xX X"], ["proof (chain)\npicking this:\n  x \\<in> X\n  X \\<subseteq> A'\n  x \\<notin> A", "have \"\\<forall>y\\<in>X. \\<not> r' y x\""], ["proof (prove)\nusing this:\n  x \\<in> X\n  X \\<subseteq> A'\n  x \\<notin> A\n\ngoal (1 subgoal):\n 1. \\<forall>y\\<in>X. \\<not> r' y x", "by (auto simp: B)"], ["proof (state)\nthis:\n  \\<forall>y\\<in>X. \\<not> r' y x\n\ngoal (2 subgoals):\n 1. X \\<inter> A = {} \\<Longrightarrow>\n    \\<exists>x\\<in>X. \\<forall>y\\<in>X. \\<not> r' y x\n 2. X \\<inter> A \\<noteq> {} \\<Longrightarrow>\n    \\<exists>x\\<in>X. \\<forall>y\\<in>X. \\<not> r' y x", "with xX"], ["proof (chain)\npicking this:\n  x \\<in> X\n  \\<forall>y\\<in>X. \\<not> r' y x", "show ?thesis"], ["proof (prove)\nusing this:\n  x \\<in> X\n  \\<forall>y\\<in>X. \\<not> r' y x\n\ngoal (1 subgoal):\n 1. \\<exists>x\\<in>X. \\<forall>y\\<in>X. \\<not> r' y x", "by auto"], ["proof (state)\nthis:\n  \\<exists>x\\<in>X. \\<forall>y\\<in>X. \\<not> r' y x\n\ngoal (1 subgoal):\n 1. X \\<inter> A \\<noteq> {} \\<Longrightarrow>\n    \\<exists>x\\<in>X. \\<forall>y\\<in>X. \\<not> r' y x", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. X \\<inter> A \\<noteq> {} \\<Longrightarrow>\n    \\<exists>x\\<in>X. \\<forall>y\\<in>X. \\<not> r' y x", "case False"], ["proof (state)\nthis:\n  X \\<inter> A \\<noteq> {}\n\ngoal (1 subgoal):\n 1. X \\<inter> A \\<noteq> {} \\<Longrightarrow>\n    \\<exists>x\\<in>X. \\<forall>y\\<in>X. \\<not> r' y x", "from well_founded.nonempty_imp_ex_extremal[OF wf _ this]"], ["proof (chain)\npicking this:\n  X \\<inter> A \\<subseteq> A \\<Longrightarrow>\n  \\<exists>z\\<in>X \\<inter> A. \\<forall>y\\<in>X \\<inter> A. \\<not> r y z", "obtain x where x: \"x \\<in> X \\<inter> A\" and Ar: \"\\<And>y. y \\<in> X \\<Longrightarrow> y \\<in> A \\<Longrightarrow> \\<not> r y x\""], ["proof (prove)\nusing this:\n  X \\<inter> A \\<subseteq> A \\<Longrightarrow>\n  \\<exists>z\\<in>X \\<inter> A. \\<forall>y\\<in>X \\<inter> A. \\<not> r y z\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        \\<lbrakk>x \\<in> X \\<inter> A;\n         \\<And>y.\n            \\<lbrakk>y \\<in> X; y \\<in> A\\<rbrakk>\n            \\<Longrightarrow> \\<not> r y x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  x \\<in> X \\<inter> A\n  \\<lbrakk>?y \\<in> X; ?y \\<in> A\\<rbrakk> \\<Longrightarrow> \\<not> r ?y x\n\ngoal (1 subgoal):\n 1. X \\<inter> A \\<noteq> {} \\<Longrightarrow>\n    \\<exists>x\\<in>X. \\<forall>y\\<in>X. \\<not> r' y x", "have \"\\<forall>y \\<in> X. \\<not> r' y x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>y\\<in>X. \\<not> r' y x", "proof (intro ballI notI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y. \\<lbrakk>y \\<in> X; r' y x\\<rbrakk> \\<Longrightarrow> False", "fix y"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y. \\<lbrakk>y \\<in> X; r' y x\\<rbrakk> \\<Longrightarrow> False", "assume yX: \"y \\<in> X\" and yx: \"r' y x\""], ["proof (state)\nthis:\n  y \\<in> X\n  r' y x\n\ngoal (1 subgoal):\n 1. \\<And>y. \\<lbrakk>y \\<in> X; r' y x\\<rbrakk> \\<Longrightarrow> False", "from yX X"], ["proof (chain)\npicking this:\n  y \\<in> X\n  X \\<subseteq> A'", "have yA': \"y \\<in> A'\""], ["proof (prove)\nusing this:\n  y \\<in> X\n  X \\<subseteq> A'\n\ngoal (1 subgoal):\n 1. y \\<in> A'", "by auto"], ["proof (state)\nthis:\n  y \\<in> A'\n\ngoal (1 subgoal):\n 1. \\<And>y. \\<lbrakk>y \\<in> X; r' y x\\<rbrakk> \\<Longrightarrow> False", "show False"], ["proof (prove)\ngoal (1 subgoal):\n 1. False", "proof (cases \"y \\<in> A\")"], ["proof (state)\ngoal (2 subgoals):\n 1. y \\<in> A \\<Longrightarrow> False\n 2. y \\<notin> A \\<Longrightarrow> False", "case True"], ["proof (state)\nthis:\n  y \\<in> A\n\ngoal (2 subgoals):\n 1. y \\<in> A \\<Longrightarrow> False\n 2. y \\<notin> A \\<Longrightarrow> False", "with x Ar[OF yX] yx r"], ["proof (chain)\npicking this:\n  x \\<in> X \\<inter> A\n  y \\<in> A \\<Longrightarrow> \\<not> r y x\n  r' y x\n  \\<lbrakk>?a \\<in> A; ?b \\<in> A\\<rbrakk>\n  \\<Longrightarrow> r ?a ?b = r' ?a ?b\n  y \\<in> A", "show ?thesis"], ["proof (prove)\nusing this:\n  x \\<in> X \\<inter> A\n  y \\<in> A \\<Longrightarrow> \\<not> r y x\n  r' y x\n  \\<lbrakk>?a \\<in> A; ?b \\<in> A\\<rbrakk>\n  \\<Longrightarrow> r ?a ?b = r' ?a ?b\n  y \\<in> A\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. y \\<notin> A \\<Longrightarrow> False", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. y \\<notin> A \\<Longrightarrow> False", "case False"], ["proof (state)\nthis:\n  y \\<notin> A\n\ngoal (1 subgoal):\n 1. y \\<notin> A \\<Longrightarrow> False", "with yA' x A[OF yx] r X"], ["proof (chain)\npicking this:\n  y \\<in> A'\n  x \\<in> X \\<inter> A\n  (y \\<in> A) = (y \\<in> A')\n  \\<lbrakk>?a \\<in> A; ?b \\<in> A\\<rbrakk>\n  \\<Longrightarrow> r ?a ?b = r' ?a ?b\n  X \\<subseteq> A'\n  y \\<notin> A", "show ?thesis"], ["proof (prove)\nusing this:\n  y \\<in> A'\n  x \\<in> X \\<inter> A\n  (y \\<in> A) = (y \\<in> A')\n  \\<lbrakk>?a \\<in> A; ?b \\<in> A\\<rbrakk>\n  \\<Longrightarrow> r ?a ?b = r' ?a ?b\n  X \\<subseteq> A'\n  y \\<notin> A\n\ngoal (1 subgoal):\n 1. False", "by (auto simp:)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>y\\<in>X. \\<not> r' y x\n\ngoal (1 subgoal):\n 1. X \\<inter> A \\<noteq> {} \\<Longrightarrow>\n    \\<exists>x\\<in>X. \\<forall>y\\<in>X. \\<not> r' y x", "with x"], ["proof (chain)\npicking this:\n  x \\<in> X \\<inter> A\n  \\<forall>y\\<in>X. \\<not> r' y x", "show \"\\<exists>x \\<in> X. \\<forall>y \\<in> X. \\<not> r' y x\""], ["proof (prove)\nusing this:\n  x \\<in> X \\<inter> A\n  \\<forall>y\\<in>X. \\<not> r' y x\n\ngoal (1 subgoal):\n 1. \\<exists>x\\<in>X. \\<forall>y\\<in>X. \\<not> r' y x", "by auto"], ["proof (state)\nthis:\n  \\<exists>x\\<in>X. \\<forall>y\\<in>X. \\<not> r' y x\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>x\\<in>X. \\<forall>y\\<in>X. \\<not> r' y x\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  well_founded A' r'\n\ngoal (1 subgoal):\n 1. well_founded A' r' \\<Longrightarrow> well_founded A r", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. well_founded A' r' \\<Longrightarrow> well_founded A r", "assume wf: \"well_founded A' r'\""], ["proof (state)\nthis:\n  well_founded A' r'\n\ngoal (1 subgoal):\n 1. well_founded A' r' \\<Longrightarrow> well_founded A r", "show \"well_founded A r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. well_founded A r", "proof (intro well_foundedI_extremal)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>X.\n       \\<lbrakk>X \\<subseteq> A; X \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>X. \\<forall>y\\<in>X. \\<not> r y x", "fix X"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>X.\n       \\<lbrakk>X \\<subseteq> A; X \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>X. \\<forall>y\\<in>X. \\<not> r y x", "assume X: \"X \\<subseteq> A\" and X0: \"X \\<noteq> {}\""], ["proof (state)\nthis:\n  X \\<subseteq> A\n  X \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<And>X.\n       \\<lbrakk>X \\<subseteq> A; X \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>X. \\<forall>y\\<in>X. \\<not> r y x", "show \"\\<exists>x\\<in>X. \\<forall>y\\<in>X. \\<not> r y x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x\\<in>X. \\<forall>y\\<in>X. \\<not> r y x", "proof (cases \"X \\<inter> A' = {}\")"], ["proof (state)\ngoal (2 subgoals):\n 1. X \\<inter> A' = {} \\<Longrightarrow>\n    \\<exists>x\\<in>X. \\<forall>y\\<in>X. \\<not> r y x\n 2. X \\<inter> A' \\<noteq> {} \\<Longrightarrow>\n    \\<exists>x\\<in>X. \\<forall>y\\<in>X. \\<not> r y x", "case True"], ["proof (state)\nthis:\n  X \\<inter> A' = {}\n\ngoal (2 subgoals):\n 1. X \\<inter> A' = {} \\<Longrightarrow>\n    \\<exists>x\\<in>X. \\<forall>y\\<in>X. \\<not> r y x\n 2. X \\<inter> A' \\<noteq> {} \\<Longrightarrow>\n    \\<exists>x\\<in>X. \\<forall>y\\<in>X. \\<not> r y x", "from X0"], ["proof (chain)\npicking this:\n  X \\<noteq> {}", "obtain x where xX: \"x \\<in> X\""], ["proof (prove)\nusing this:\n  X \\<noteq> {}\n\ngoal (1 subgoal):\n 1. (\\<And>x. x \\<in> X \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by auto"], ["proof (state)\nthis:\n  x \\<in> X\n\ngoal (2 subgoals):\n 1. X \\<inter> A' = {} \\<Longrightarrow>\n    \\<exists>x\\<in>X. \\<forall>y\\<in>X. \\<not> r y x\n 2. X \\<inter> A' \\<noteq> {} \\<Longrightarrow>\n    \\<exists>x\\<in>X. \\<forall>y\\<in>X. \\<not> r y x", "with True"], ["proof (chain)\npicking this:\n  X \\<inter> A' = {}\n  x \\<in> X", "have \"x \\<notin> A'\""], ["proof (prove)\nusing this:\n  X \\<inter> A' = {}\n  x \\<in> X\n\ngoal (1 subgoal):\n 1. x \\<notin> A'", "by auto"], ["proof (state)\nthis:\n  x \\<notin> A'\n\ngoal (2 subgoals):\n 1. X \\<inter> A' = {} \\<Longrightarrow>\n    \\<exists>x\\<in>X. \\<forall>y\\<in>X. \\<not> r y x\n 2. X \\<inter> A' \\<noteq> {} \\<Longrightarrow>\n    \\<exists>x\\<in>X. \\<forall>y\\<in>X. \\<not> r y x", "with xX X B"], ["proof (chain)\npicking this:\n  x \\<in> X\n  X \\<subseteq> A\n  r' ?a ?b \\<Longrightarrow> (?b \\<in> A) = (?b \\<in> A')\n  x \\<notin> A'", "have \"\\<forall>y\\<in>X. \\<not> r y x\""], ["proof (prove)\nusing this:\n  x \\<in> X\n  X \\<subseteq> A\n  r' ?a ?b \\<Longrightarrow> (?b \\<in> A) = (?b \\<in> A')\n  x \\<notin> A'\n\ngoal (1 subgoal):\n 1. \\<forall>y\\<in>X. \\<not> r y x", "by (auto simp: r in_mono)"], ["proof (state)\nthis:\n  \\<forall>y\\<in>X. \\<not> r y x\n\ngoal (2 subgoals):\n 1. X \\<inter> A' = {} \\<Longrightarrow>\n    \\<exists>x\\<in>X. \\<forall>y\\<in>X. \\<not> r y x\n 2. X \\<inter> A' \\<noteq> {} \\<Longrightarrow>\n    \\<exists>x\\<in>X. \\<forall>y\\<in>X. \\<not> r y x", "with xX"], ["proof (chain)\npicking this:\n  x \\<in> X\n  \\<forall>y\\<in>X. \\<not> r y x", "show ?thesis"], ["proof (prove)\nusing this:\n  x \\<in> X\n  \\<forall>y\\<in>X. \\<not> r y x\n\ngoal (1 subgoal):\n 1. \\<exists>x\\<in>X. \\<forall>y\\<in>X. \\<not> r y x", "by auto"], ["proof (state)\nthis:\n  \\<exists>x\\<in>X. \\<forall>y\\<in>X. \\<not> r y x\n\ngoal (1 subgoal):\n 1. X \\<inter> A' \\<noteq> {} \\<Longrightarrow>\n    \\<exists>x\\<in>X. \\<forall>y\\<in>X. \\<not> r y x", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. X \\<inter> A' \\<noteq> {} \\<Longrightarrow>\n    \\<exists>x\\<in>X. \\<forall>y\\<in>X. \\<not> r y x", "case False"], ["proof (state)\nthis:\n  X \\<inter> A' \\<noteq> {}\n\ngoal (1 subgoal):\n 1. X \\<inter> A' \\<noteq> {} \\<Longrightarrow>\n    \\<exists>x\\<in>X. \\<forall>y\\<in>X. \\<not> r y x", "from well_founded.nonempty_imp_ex_extremal[OF wf _ this]"], ["proof (chain)\npicking this:\n  X \\<inter> A' \\<subseteq> A' \\<Longrightarrow>\n  \\<exists>z\\<in>X \\<inter> A'. \\<forall>y\\<in>X \\<inter> A'. \\<not> r' y z", "obtain x where x: \"x \\<in> X \\<inter> A'\" and Ar: \"\\<And>y. y \\<in> X \\<Longrightarrow> y \\<in> A' \\<Longrightarrow> \\<not> r' y x\""], ["proof (prove)\nusing this:\n  X \\<inter> A' \\<subseteq> A' \\<Longrightarrow>\n  \\<exists>z\\<in>X \\<inter> A'. \\<forall>y\\<in>X \\<inter> A'. \\<not> r' y z\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        \\<lbrakk>x \\<in> X \\<inter> A';\n         \\<And>y.\n            \\<lbrakk>y \\<in> X; y \\<in> A'\\<rbrakk>\n            \\<Longrightarrow> \\<not> r' y x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  x \\<in> X \\<inter> A'\n  \\<lbrakk>?y \\<in> X; ?y \\<in> A'\\<rbrakk> \\<Longrightarrow> \\<not> r' ?y x\n\ngoal (1 subgoal):\n 1. X \\<inter> A' \\<noteq> {} \\<Longrightarrow>\n    \\<exists>x\\<in>X. \\<forall>y\\<in>X. \\<not> r y x", "have \"\\<forall>y \\<in> X. \\<not> r y x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>y\\<in>X. \\<not> r y x", "proof (intro ballI notI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y. \\<lbrakk>y \\<in> X; r y x\\<rbrakk> \\<Longrightarrow> False", "fix y"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y. \\<lbrakk>y \\<in> X; r y x\\<rbrakk> \\<Longrightarrow> False", "assume yX: \"y \\<in> X\" and yx: \"r y x\""], ["proof (state)\nthis:\n  y \\<in> X\n  r y x\n\ngoal (1 subgoal):\n 1. \\<And>y. \\<lbrakk>y \\<in> X; r y x\\<rbrakk> \\<Longrightarrow> False", "from yX X"], ["proof (chain)\npicking this:\n  y \\<in> X\n  X \\<subseteq> A", "have y: \"y \\<in> A\""], ["proof (prove)\nusing this:\n  y \\<in> X\n  X \\<subseteq> A\n\ngoal (1 subgoal):\n 1. y \\<in> A", "by auto"], ["proof (state)\nthis:\n  y \\<in> A\n\ngoal (1 subgoal):\n 1. \\<And>y. \\<lbrakk>y \\<in> X; r y x\\<rbrakk> \\<Longrightarrow> False", "show False"], ["proof (prove)\ngoal (1 subgoal):\n 1. False", "proof (cases \"y \\<in> A'\")"], ["proof (state)\ngoal (2 subgoals):\n 1. y \\<in> A' \\<Longrightarrow> False\n 2. y \\<notin> A' \\<Longrightarrow> False", "case True"], ["proof (state)\nthis:\n  y \\<in> A'\n\ngoal (2 subgoals):\n 1. y \\<in> A' \\<Longrightarrow> False\n 2. y \\<notin> A' \\<Longrightarrow> False", "with x Ar[OF yX] yx r X y"], ["proof (chain)\npicking this:\n  x \\<in> X \\<inter> A'\n  y \\<in> A' \\<Longrightarrow> \\<not> r' y x\n  r y x\n  \\<lbrakk>?a \\<in> A; ?b \\<in> A\\<rbrakk>\n  \\<Longrightarrow> r ?a ?b = r' ?a ?b\n  X \\<subseteq> A\n  y \\<in> A\n  y \\<in> A'", "show ?thesis"], ["proof (prove)\nusing this:\n  x \\<in> X \\<inter> A'\n  y \\<in> A' \\<Longrightarrow> \\<not> r' y x\n  r y x\n  \\<lbrakk>?a \\<in> A; ?b \\<in> A\\<rbrakk>\n  \\<Longrightarrow> r ?a ?b = r' ?a ?b\n  X \\<subseteq> A\n  y \\<in> A\n  y \\<in> A'\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. y \\<notin> A' \\<Longrightarrow> False", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. y \\<notin> A' \\<Longrightarrow> False", "case False"], ["proof (state)\nthis:\n  y \\<notin> A'\n\ngoal (1 subgoal):\n 1. y \\<notin> A' \\<Longrightarrow> False", "with y x A yx r X"], ["proof (chain)\npicking this:\n  y \\<in> A\n  x \\<in> X \\<inter> A'\n  r' ?a ?b \\<Longrightarrow> (?a \\<in> A) = (?a \\<in> A')\n  r y x\n  \\<lbrakk>?a \\<in> A; ?b \\<in> A\\<rbrakk>\n  \\<Longrightarrow> r ?a ?b = r' ?a ?b\n  X \\<subseteq> A\n  y \\<notin> A'", "show ?thesis"], ["proof (prove)\nusing this:\n  y \\<in> A\n  x \\<in> X \\<inter> A'\n  r' ?a ?b \\<Longrightarrow> (?a \\<in> A) = (?a \\<in> A')\n  r y x\n  \\<lbrakk>?a \\<in> A; ?b \\<in> A\\<rbrakk>\n  \\<Longrightarrow> r ?a ?b = r' ?a ?b\n  X \\<subseteq> A\n  y \\<notin> A'\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>y\\<in>X. \\<not> r y x\n\ngoal (1 subgoal):\n 1. X \\<inter> A' \\<noteq> {} \\<Longrightarrow>\n    \\<exists>x\\<in>X. \\<forall>y\\<in>X. \\<not> r y x", "with x"], ["proof (chain)\npicking this:\n  x \\<in> X \\<inter> A'\n  \\<forall>y\\<in>X. \\<not> r y x", "show \"\\<exists>x \\<in> X. \\<forall>y \\<in> X. \\<not> r y x\""], ["proof (prove)\nusing this:\n  x \\<in> X \\<inter> A'\n  \\<forall>y\\<in>X. \\<not> r y x\n\ngoal (1 subgoal):\n 1. \\<exists>x\\<in>X. \\<forall>y\\<in>X. \\<not> r y x", "by auto"], ["proof (state)\nthis:\n  \\<exists>x\\<in>X. \\<forall>y\\<in>X. \\<not> r y x\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>x\\<in>X. \\<forall>y\\<in>X. \\<not> r y x\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  well_founded A r\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma wfP_iff_well_founded_UNIV: \"wfP r \\<longleftrightarrow> well_founded UNIV r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wfP r = well_founded UNIV r", "by (auto simp: wfP_def wf_def well_founded_def)"], ["", "lemma well_founded_singleton:\n  assumes \"\\<not>r x x\" shows \"well_founded {x} r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. well_founded {x} r", "using assms"], ["proof (prove)\nusing this:\n  \\<not> r x x\n\ngoal (1 subgoal):\n 1. well_founded {x} r", "by (auto simp: well_founded_iff_ex_extremal)"], ["", "lemma well_founded_Restrp[simp]: \"well_founded A (r\\<restriction>B) \\<longleftrightarrow> well_founded (A\\<inter>B) r\" (is \"?l \\<longleftrightarrow> ?r\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. well_founded A (r \\<restriction> B) = well_founded (A \\<inter> B) r", "proof (intro iffI well_foundedI_extremal)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>X.\n       \\<lbrakk>well_founded A (r \\<restriction> B);\n        X \\<subseteq> A \\<inter> B; X \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>X. \\<forall>y\\<in>X. \\<not> r y x\n 2. \\<And>X.\n       \\<lbrakk>well_founded (A \\<inter> B) r; X \\<subseteq> A;\n        X \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>X.\n                            \\<forall>y\\<in>X.\n                               \\<not> (r \\<restriction> B) y x", "assume l: ?l"], ["proof (state)\nthis:\n  well_founded A (r \\<restriction> B)\n\ngoal (2 subgoals):\n 1. \\<And>X.\n       \\<lbrakk>well_founded A (r \\<restriction> B);\n        X \\<subseteq> A \\<inter> B; X \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>X. \\<forall>y\\<in>X. \\<not> r y x\n 2. \\<And>X.\n       \\<lbrakk>well_founded (A \\<inter> B) r; X \\<subseteq> A;\n        X \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>X.\n                            \\<forall>y\\<in>X.\n                               \\<not> (r \\<restriction> B) y x", "fix X"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>X.\n       \\<lbrakk>well_founded A (r \\<restriction> B);\n        X \\<subseteq> A \\<inter> B; X \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>X. \\<forall>y\\<in>X. \\<not> r y x\n 2. \\<And>X.\n       \\<lbrakk>well_founded (A \\<inter> B) r; X \\<subseteq> A;\n        X \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>X.\n                            \\<forall>y\\<in>X.\n                               \\<not> (r \\<restriction> B) y x", "assume XAB: \"X \\<subseteq> A \\<inter> B\" and X0: \"X \\<noteq> {}\""], ["proof (state)\nthis:\n  X \\<subseteq> A \\<inter> B\n  X \\<noteq> {}\n\ngoal (2 subgoals):\n 1. \\<And>X.\n       \\<lbrakk>well_founded A (r \\<restriction> B);\n        X \\<subseteq> A \\<inter> B; X \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>X. \\<forall>y\\<in>X. \\<not> r y x\n 2. \\<And>X.\n       \\<lbrakk>well_founded (A \\<inter> B) r; X \\<subseteq> A;\n        X \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>X.\n                            \\<forall>y\\<in>X.\n                               \\<not> (r \\<restriction> B) y x", "with l[THEN well_founded.nonempty_imp_ex_extremal]"], ["proof (chain)\npicking this:\n  \\<lbrakk>?Q \\<subseteq> A; ?Q \\<noteq> {}\\<rbrakk>\n  \\<Longrightarrow> \\<exists>z\\<in>?Q.\n                       \\<forall>y\\<in>?Q. \\<not> (r \\<restriction> B) y z\n  X \\<subseteq> A \\<inter> B\n  X \\<noteq> {}", "have \"\\<exists>x\\<in>X. \\<forall>z\\<in>X. \\<not> (r \\<restriction> B) z x\""], ["proof (prove)\nusing this:\n  \\<lbrakk>?Q \\<subseteq> A; ?Q \\<noteq> {}\\<rbrakk>\n  \\<Longrightarrow> \\<exists>z\\<in>?Q.\n                       \\<forall>y\\<in>?Q. \\<not> (r \\<restriction> B) y z\n  X \\<subseteq> A \\<inter> B\n  X \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<exists>x\\<in>X. \\<forall>z\\<in>X. \\<not> (r \\<restriction> B) z x", "by auto"], ["proof (state)\nthis:\n  \\<exists>x\\<in>X. \\<forall>z\\<in>X. \\<not> (r \\<restriction> B) z x\n\ngoal (2 subgoals):\n 1. \\<And>X.\n       \\<lbrakk>well_founded A (r \\<restriction> B);\n        X \\<subseteq> A \\<inter> B; X \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>X. \\<forall>y\\<in>X. \\<not> r y x\n 2. \\<And>X.\n       \\<lbrakk>well_founded (A \\<inter> B) r; X \\<subseteq> A;\n        X \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>X.\n                            \\<forall>y\\<in>X.\n                               \\<not> (r \\<restriction> B) y x", "with XAB"], ["proof (chain)\npicking this:\n  X \\<subseteq> A \\<inter> B\n  \\<exists>x\\<in>X. \\<forall>z\\<in>X. \\<not> (r \\<restriction> B) z x", "show \"\\<exists>x\\<in>X. \\<forall>y\\<in>X. \\<not> r y x\""], ["proof (prove)\nusing this:\n  X \\<subseteq> A \\<inter> B\n  \\<exists>x\\<in>X. \\<forall>z\\<in>X. \\<not> (r \\<restriction> B) z x\n\ngoal (1 subgoal):\n 1. \\<exists>x\\<in>X. \\<forall>y\\<in>X. \\<not> r y x", "by (auto simp: Restrp_def)"], ["proof (state)\nthis:\n  \\<exists>x\\<in>X. \\<forall>y\\<in>X. \\<not> r y x\n\ngoal (1 subgoal):\n 1. \\<And>X.\n       \\<lbrakk>well_founded (A \\<inter> B) r; X \\<subseteq> A;\n        X \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>X.\n                            \\<forall>y\\<in>X.\n                               \\<not> (r \\<restriction> B) y x", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>X.\n       \\<lbrakk>well_founded (A \\<inter> B) r; X \\<subseteq> A;\n        X \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>X.\n                            \\<forall>y\\<in>X.\n                               \\<not> (r \\<restriction> B) y x", "assume r: ?r"], ["proof (state)\nthis:\n  well_founded (A \\<inter> B) r\n\ngoal (1 subgoal):\n 1. \\<And>X.\n       \\<lbrakk>well_founded (A \\<inter> B) r; X \\<subseteq> A;\n        X \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>X.\n                            \\<forall>y\\<in>X.\n                               \\<not> (r \\<restriction> B) y x", "fix X"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>X.\n       \\<lbrakk>well_founded (A \\<inter> B) r; X \\<subseteq> A;\n        X \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>X.\n                            \\<forall>y\\<in>X.\n                               \\<not> (r \\<restriction> B) y x", "assume XA: \"X \\<subseteq> A\" and X0: \"X \\<noteq> {}\""], ["proof (state)\nthis:\n  X \\<subseteq> A\n  X \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<And>X.\n       \\<lbrakk>well_founded (A \\<inter> B) r; X \\<subseteq> A;\n        X \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>X.\n                            \\<forall>y\\<in>X.\n                               \\<not> (r \\<restriction> B) y x", "show \"\\<exists>x\\<in>X. \\<forall>y\\<in>X. \\<not> (r \\<restriction> B) y x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x\\<in>X. \\<forall>y\\<in>X. \\<not> (r \\<restriction> B) y x", "proof (cases \"X \\<subseteq> B\")"], ["proof (state)\ngoal (2 subgoals):\n 1. X \\<subseteq> B \\<Longrightarrow>\n    \\<exists>x\\<in>X. \\<forall>y\\<in>X. \\<not> (r \\<restriction> B) y x\n 2. \\<not> X \\<subseteq> B \\<Longrightarrow>\n    \\<exists>x\\<in>X. \\<forall>y\\<in>X. \\<not> (r \\<restriction> B) y x", "case True"], ["proof (state)\nthis:\n  X \\<subseteq> B\n\ngoal (2 subgoals):\n 1. X \\<subseteq> B \\<Longrightarrow>\n    \\<exists>x\\<in>X. \\<forall>y\\<in>X. \\<not> (r \\<restriction> B) y x\n 2. \\<not> X \\<subseteq> B \\<Longrightarrow>\n    \\<exists>x\\<in>X. \\<forall>y\\<in>X. \\<not> (r \\<restriction> B) y x", "with r[THEN well_founded.nonempty_imp_ex_extremal, of X] XA X0"], ["proof (chain)\npicking this:\n  \\<lbrakk>X \\<subseteq> A \\<inter> B; X \\<noteq> {}\\<rbrakk>\n  \\<Longrightarrow> \\<exists>z\\<in>X. \\<forall>y\\<in>X. \\<not> r y z\n  X \\<subseteq> A\n  X \\<noteq> {}\n  X \\<subseteq> B", "have \"\\<exists>z\\<in>X. \\<forall>y\\<in>X. \\<not> r y z\""], ["proof (prove)\nusing this:\n  \\<lbrakk>X \\<subseteq> A \\<inter> B; X \\<noteq> {}\\<rbrakk>\n  \\<Longrightarrow> \\<exists>z\\<in>X. \\<forall>y\\<in>X. \\<not> r y z\n  X \\<subseteq> A\n  X \\<noteq> {}\n  X \\<subseteq> B\n\ngoal (1 subgoal):\n 1. \\<exists>z\\<in>X. \\<forall>y\\<in>X. \\<not> r y z", "by auto"], ["proof (state)\nthis:\n  \\<exists>z\\<in>X. \\<forall>y\\<in>X. \\<not> r y z\n\ngoal (2 subgoals):\n 1. X \\<subseteq> B \\<Longrightarrow>\n    \\<exists>x\\<in>X. \\<forall>y\\<in>X. \\<not> (r \\<restriction> B) y x\n 2. \\<not> X \\<subseteq> B \\<Longrightarrow>\n    \\<exists>x\\<in>X. \\<forall>y\\<in>X. \\<not> (r \\<restriction> B) y x", "then"], ["proof (chain)\npicking this:\n  \\<exists>z\\<in>X. \\<forall>y\\<in>X. \\<not> r y z", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>z\\<in>X. \\<forall>y\\<in>X. \\<not> r y z\n\ngoal (1 subgoal):\n 1. \\<exists>x\\<in>X. \\<forall>y\\<in>X. \\<not> (r \\<restriction> B) y x", "by auto"], ["proof (state)\nthis:\n  \\<exists>x\\<in>X. \\<forall>y\\<in>X. \\<not> (r \\<restriction> B) y x\n\ngoal (1 subgoal):\n 1. \\<not> X \\<subseteq> B \\<Longrightarrow>\n    \\<exists>x\\<in>X. \\<forall>y\\<in>X. \\<not> (r \\<restriction> B) y x", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> X \\<subseteq> B \\<Longrightarrow>\n    \\<exists>x\\<in>X. \\<forall>y\\<in>X. \\<not> (r \\<restriction> B) y x", "case False"], ["proof (state)\nthis:\n  \\<not> X \\<subseteq> B\n\ngoal (1 subgoal):\n 1. \\<not> X \\<subseteq> B \\<Longrightarrow>\n    \\<exists>x\\<in>X. \\<forall>y\\<in>X. \\<not> (r \\<restriction> B) y x", "then"], ["proof (chain)\npicking this:\n  \\<not> X \\<subseteq> B", "obtain x where x: \"x \\<in> X - B\""], ["proof (prove)\nusing this:\n  \\<not> X \\<subseteq> B\n\ngoal (1 subgoal):\n 1. (\\<And>x. x \\<in> X - B \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  x \\<in> X - B\n\ngoal (1 subgoal):\n 1. \\<not> X \\<subseteq> B \\<Longrightarrow>\n    \\<exists>x\\<in>X. \\<forall>y\\<in>X. \\<not> (r \\<restriction> B) y x", "then"], ["proof (chain)\npicking this:\n  x \\<in> X - B", "have \"\\<forall>y\\<in>X. \\<not> (r \\<restriction> B) y x\""], ["proof (prove)\nusing this:\n  x \\<in> X - B\n\ngoal (1 subgoal):\n 1. \\<forall>y\\<in>X. \\<not> (r \\<restriction> B) y x", "by auto"], ["proof (state)\nthis:\n  \\<forall>y\\<in>X. \\<not> (r \\<restriction> B) y x\n\ngoal (1 subgoal):\n 1. \\<not> X \\<subseteq> B \\<Longrightarrow>\n    \\<exists>x\\<in>X. \\<forall>y\\<in>X. \\<not> (r \\<restriction> B) y x", "with x"], ["proof (chain)\npicking this:\n  x \\<in> X - B\n  \\<forall>y\\<in>X. \\<not> (r \\<restriction> B) y x", "show ?thesis"], ["proof (prove)\nusing this:\n  x \\<in> X - B\n  \\<forall>y\\<in>X. \\<not> (r \\<restriction> B) y x\n\ngoal (1 subgoal):\n 1. \\<exists>x\\<in>X. \\<forall>y\\<in>X. \\<not> (r \\<restriction> B) y x", "by auto"], ["proof (state)\nthis:\n  \\<exists>x\\<in>X. \\<forall>y\\<in>X. \\<not> (r \\<restriction> B) y x\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>x\\<in>X. \\<forall>y\\<in>X. \\<not> (r \\<restriction> B) y x\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in well_founded) well_founded_subset:\n  assumes \"B \\<subseteq> A\" shows \"well_founded B (\\<sqsubset>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. well_founded B (\\<sqsubset>)", "using assms well_founded_axioms"], ["proof (prove)\nusing this:\n  B \\<subseteq> A\n  well_founded A (\\<sqsubset>)\n\ngoal (1 subgoal):\n 1. well_founded B (\\<sqsubset>)", "by (auto simp: well_founded_iff_ex_extremal)"], ["", "lemma well_founded_extend:\n  fixes less (infix \"\\<sqsubset>\" 50)\n  assumes A: \"well_founded A (\\<sqsubset>)\"\n  assumes B: \"well_founded B (\\<sqsubset>)\"\n  assumes AB: \"\\<forall>a \\<in> A. \\<forall>b \\<in> B. \\<not>b \\<sqsubset> a\"\n  shows \"well_founded (A \\<union> B) (\\<sqsubset>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. well_founded (A \\<union> B) (\\<sqsubset>)", "proof (intro well_foundedI_extremal)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>X.\n       \\<lbrakk>X \\<subseteq> A \\<union> B; X \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>X.\n                            \\<forall>y\\<in>X. \\<not> y \\<sqsubset> x", "interpret A: well_founded A \"(\\<sqsubset>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. well_founded A (\\<sqsubset>)", "using A"], ["proof (prove)\nusing this:\n  well_founded A (\\<sqsubset>)\n\ngoal (1 subgoal):\n 1. well_founded A (\\<sqsubset>)", "."], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>X.\n       \\<lbrakk>X \\<subseteq> A \\<union> B; X \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>X.\n                            \\<forall>y\\<in>X. \\<not> y \\<sqsubset> x", "interpret B: well_founded B \"(\\<sqsubset>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. well_founded B (\\<sqsubset>)", "using B"], ["proof (prove)\nusing this:\n  well_founded B (\\<sqsubset>)\n\ngoal (1 subgoal):\n 1. well_founded B (\\<sqsubset>)", "."], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>X.\n       \\<lbrakk>X \\<subseteq> A \\<union> B; X \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>X.\n                            \\<forall>y\\<in>X. \\<not> y \\<sqsubset> x", "fix X"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>X.\n       \\<lbrakk>X \\<subseteq> A \\<union> B; X \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>X.\n                            \\<forall>y\\<in>X. \\<not> y \\<sqsubset> x", "assume XAB: \"X \\<subseteq> A \\<union> B\" and X0: \"X \\<noteq> {}\""], ["proof (state)\nthis:\n  X \\<subseteq> A \\<union> B\n  X \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<And>X.\n       \\<lbrakk>X \\<subseteq> A \\<union> B; X \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>X.\n                            \\<forall>y\\<in>X. \\<not> y \\<sqsubset> x", "show \"\\<exists>x\\<in>X. \\<forall>y\\<in>X. \\<not> y \\<sqsubset> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x\\<in>X. \\<forall>y\\<in>X. \\<not> y \\<sqsubset> x", "proof (cases \"X \\<inter> A = {}\")"], ["proof (state)\ngoal (2 subgoals):\n 1. X \\<inter> A = {} \\<Longrightarrow>\n    \\<exists>x\\<in>X. \\<forall>y\\<in>X. \\<not> y \\<sqsubset> x\n 2. X \\<inter> A \\<noteq> {} \\<Longrightarrow>\n    \\<exists>x\\<in>X. \\<forall>y\\<in>X. \\<not> y \\<sqsubset> x", "case True"], ["proof (state)\nthis:\n  X \\<inter> A = {}\n\ngoal (2 subgoals):\n 1. X \\<inter> A = {} \\<Longrightarrow>\n    \\<exists>x\\<in>X. \\<forall>y\\<in>X. \\<not> y \\<sqsubset> x\n 2. X \\<inter> A \\<noteq> {} \\<Longrightarrow>\n    \\<exists>x\\<in>X. \\<forall>y\\<in>X. \\<not> y \\<sqsubset> x", "with XAB"], ["proof (chain)\npicking this:\n  X \\<subseteq> A \\<union> B\n  X \\<inter> A = {}", "have XB: \"X \\<subseteq> B\""], ["proof (prove)\nusing this:\n  X \\<subseteq> A \\<union> B\n  X \\<inter> A = {}\n\ngoal (1 subgoal):\n 1. X \\<subseteq> B", "by auto"], ["proof (state)\nthis:\n  X \\<subseteq> B\n\ngoal (2 subgoals):\n 1. X \\<inter> A = {} \\<Longrightarrow>\n    \\<exists>x\\<in>X. \\<forall>y\\<in>X. \\<not> y \\<sqsubset> x\n 2. X \\<inter> A \\<noteq> {} \\<Longrightarrow>\n    \\<exists>x\\<in>X. \\<forall>y\\<in>X. \\<not> y \\<sqsubset> x", "from B.nonempty_imp_ex_extremal[OF XB X0]"], ["proof (chain)\npicking this:\n  \\<exists>z\\<in>X. \\<forall>y\\<in>X. \\<not> y \\<sqsubset> z", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>z\\<in>X. \\<forall>y\\<in>X. \\<not> y \\<sqsubset> z\n\ngoal (1 subgoal):\n 1. \\<exists>x\\<in>X. \\<forall>y\\<in>X. \\<not> y \\<sqsubset> x", "."], ["proof (state)\nthis:\n  \\<exists>x\\<in>X. \\<forall>y\\<in>X. \\<not> y \\<sqsubset> x\n\ngoal (1 subgoal):\n 1. X \\<inter> A \\<noteq> {} \\<Longrightarrow>\n    \\<exists>x\\<in>X. \\<forall>y\\<in>X. \\<not> y \\<sqsubset> x", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. X \\<inter> A \\<noteq> {} \\<Longrightarrow>\n    \\<exists>x\\<in>X. \\<forall>y\\<in>X. \\<not> y \\<sqsubset> x", "case False"], ["proof (state)\nthis:\n  X \\<inter> A \\<noteq> {}\n\ngoal (1 subgoal):\n 1. X \\<inter> A \\<noteq> {} \\<Longrightarrow>\n    \\<exists>x\\<in>X. \\<forall>y\\<in>X. \\<not> y \\<sqsubset> x", "with A.nonempty_imp_ex_extremal[OF _ this]"], ["proof (chain)\npicking this:\n  X \\<inter> A \\<subseteq> A \\<Longrightarrow>\n  \\<exists>z\\<in>X \\<inter> A.\n     \\<forall>y\\<in>X \\<inter> A. \\<not> y \\<sqsubset> z\n  X \\<inter> A \\<noteq> {}", "obtain e where XAe: \"e \\<in> X \\<inter> A\" \"\\<forall>y\\<in>X \\<inter> A. \\<not> y \\<sqsubset> e\""], ["proof (prove)\nusing this:\n  X \\<inter> A \\<subseteq> A \\<Longrightarrow>\n  \\<exists>z\\<in>X \\<inter> A.\n     \\<forall>y\\<in>X \\<inter> A. \\<not> y \\<sqsubset> z\n  X \\<inter> A \\<noteq> {}\n\ngoal (1 subgoal):\n 1. (\\<And>e.\n        \\<lbrakk>e \\<in> X \\<inter> A;\n         \\<forall>y\\<in>X \\<inter> A. \\<not> y \\<sqsubset> e\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  e \\<in> X \\<inter> A\n  \\<forall>y\\<in>X \\<inter> A. \\<not> y \\<sqsubset> e\n\ngoal (1 subgoal):\n 1. X \\<inter> A \\<noteq> {} \\<Longrightarrow>\n    \\<exists>x\\<in>X. \\<forall>y\\<in>X. \\<not> y \\<sqsubset> x", "then"], ["proof (chain)\npicking this:\n  e \\<in> X \\<inter> A\n  \\<forall>y\\<in>X \\<inter> A. \\<not> y \\<sqsubset> e", "have eX: \"e \\<in> X\" and eA: \"e \\<in> A\""], ["proof (prove)\nusing this:\n  e \\<in> X \\<inter> A\n  \\<forall>y\\<in>X \\<inter> A. \\<not> y \\<sqsubset> e\n\ngoal (1 subgoal):\n 1. e \\<in> X &&& e \\<in> A", "by auto"], ["proof (state)\nthis:\n  e \\<in> X\n  e \\<in> A\n\ngoal (1 subgoal):\n 1. X \\<inter> A \\<noteq> {} \\<Longrightarrow>\n    \\<exists>x\\<in>X. \\<forall>y\\<in>X. \\<not> y \\<sqsubset> x", "{"], ["proof (state)\nthis:\n  e \\<in> X\n  e \\<in> A\n\ngoal (1 subgoal):\n 1. X \\<inter> A \\<noteq> {} \\<Longrightarrow>\n    \\<exists>x\\<in>X. \\<forall>y\\<in>X. \\<not> y \\<sqsubset> x", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. X \\<inter> A \\<noteq> {} \\<Longrightarrow>\n    \\<exists>x\\<in>X. \\<forall>y\\<in>X. \\<not> y \\<sqsubset> x", "assume xX: \"x \\<in> X\""], ["proof (state)\nthis:\n  x \\<in> X\n\ngoal (1 subgoal):\n 1. X \\<inter> A \\<noteq> {} \\<Longrightarrow>\n    \\<exists>x\\<in>X. \\<forall>y\\<in>X. \\<not> y \\<sqsubset> x", "have \"\\<not>x \\<sqsubset> e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> x \\<sqsubset> e", "proof (cases \"x \\<in> A\")"], ["proof (state)\ngoal (2 subgoals):\n 1. x \\<in> A \\<Longrightarrow> \\<not> x \\<sqsubset> e\n 2. x \\<notin> A \\<Longrightarrow> \\<not> x \\<sqsubset> e", "case True"], ["proof (state)\nthis:\n  x \\<in> A\n\ngoal (2 subgoals):\n 1. x \\<in> A \\<Longrightarrow> \\<not> x \\<sqsubset> e\n 2. x \\<notin> A \\<Longrightarrow> \\<not> x \\<sqsubset> e", "with XAe xX"], ["proof (chain)\npicking this:\n  e \\<in> X \\<inter> A\n  \\<forall>y\\<in>X \\<inter> A. \\<not> y \\<sqsubset> e\n  x \\<in> X\n  x \\<in> A", "show ?thesis"], ["proof (prove)\nusing this:\n  e \\<in> X \\<inter> A\n  \\<forall>y\\<in>X \\<inter> A. \\<not> y \\<sqsubset> e\n  x \\<in> X\n  x \\<in> A\n\ngoal (1 subgoal):\n 1. \\<not> x \\<sqsubset> e", "by auto"], ["proof (state)\nthis:\n  \\<not> x \\<sqsubset> e\n\ngoal (1 subgoal):\n 1. x \\<notin> A \\<Longrightarrow> \\<not> x \\<sqsubset> e", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<notin> A \\<Longrightarrow> \\<not> x \\<sqsubset> e", "case False"], ["proof (state)\nthis:\n  x \\<notin> A\n\ngoal (1 subgoal):\n 1. x \\<notin> A \\<Longrightarrow> \\<not> x \\<sqsubset> e", "with xX XAB"], ["proof (chain)\npicking this:\n  x \\<in> X\n  X \\<subseteq> A \\<union> B\n  x \\<notin> A", "have \"x \\<in> B\""], ["proof (prove)\nusing this:\n  x \\<in> X\n  X \\<subseteq> A \\<union> B\n  x \\<notin> A\n\ngoal (1 subgoal):\n 1. x \\<in> B", "by auto"], ["proof (state)\nthis:\n  x \\<in> B\n\ngoal (1 subgoal):\n 1. x \\<notin> A \\<Longrightarrow> \\<not> x \\<sqsubset> e", "with AB eA"], ["proof (chain)\npicking this:\n  \\<forall>a\\<in>A. \\<forall>b\\<in>B. \\<not> b \\<sqsubset> a\n  e \\<in> A\n  x \\<in> B", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>a\\<in>A. \\<forall>b\\<in>B. \\<not> b \\<sqsubset> a\n  e \\<in> A\n  x \\<in> B\n\ngoal (1 subgoal):\n 1. \\<not> x \\<sqsubset> e", "by auto"], ["proof (state)\nthis:\n  \\<not> x \\<sqsubset> e\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> x \\<sqsubset> e\n\ngoal (1 subgoal):\n 1. X \\<inter> A \\<noteq> {} \\<Longrightarrow>\n    \\<exists>x\\<in>X. \\<forall>y\\<in>X. \\<not> y \\<sqsubset> x", "}"], ["proof (state)\nthis:\n  ?x2 \\<in> X \\<Longrightarrow> \\<not> ?x2 \\<sqsubset> e\n\ngoal (1 subgoal):\n 1. X \\<inter> A \\<noteq> {} \\<Longrightarrow>\n    \\<exists>x\\<in>X. \\<forall>y\\<in>X. \\<not> y \\<sqsubset> x", "with eX"], ["proof (chain)\npicking this:\n  e \\<in> X\n  ?x2 \\<in> X \\<Longrightarrow> \\<not> ?x2 \\<sqsubset> e", "show ?thesis"], ["proof (prove)\nusing this:\n  e \\<in> X\n  ?x2 \\<in> X \\<Longrightarrow> \\<not> ?x2 \\<sqsubset> e\n\ngoal (1 subgoal):\n 1. \\<exists>x\\<in>X. \\<forall>y\\<in>X. \\<not> y \\<sqsubset> x", "by auto"], ["proof (state)\nthis:\n  \\<exists>x\\<in>X. \\<forall>y\\<in>X. \\<not> y \\<sqsubset> x\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>x\\<in>X. \\<forall>y\\<in>X. \\<not> y \\<sqsubset> x\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma closed_UN_well_founded:\n  fixes r (infix \"\\<sqsubset>\" 50)\n  assumes XX: \"\\<forall>X\\<in>XX. well_founded X (\\<sqsubset>) \\<and> (\\<forall>x\\<in>X. \\<forall>y\\<in>\\<Union>XX. y \\<sqsubset> x \\<longrightarrow> y \\<in> X)\"\n  shows \"well_founded (\\<Union>XX) (\\<sqsubset>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. well_founded (\\<Union> XX) (\\<sqsubset>)", "proof (intro well_foundedI_extremal)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>X.\n       \\<lbrakk>X \\<subseteq> \\<Union> XX; X \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>X.\n                            \\<forall>y\\<in>X. \\<not> y \\<sqsubset> x", "have *: \"X \\<in> XX \\<Longrightarrow> x\\<in>X \\<Longrightarrow> y \\<in> \\<Union>XX \\<Longrightarrow> y \\<sqsubset> x \\<Longrightarrow> y \\<in> X\" for X x y"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>X \\<in> XX; x \\<in> X; y \\<in> \\<Union> XX;\n     y \\<sqsubset> x\\<rbrakk>\n    \\<Longrightarrow> y \\<in> X", "using XX"], ["proof (prove)\nusing this:\n  \\<forall>X\\<in>XX.\n     well_founded X (\\<sqsubset>) \\<and>\n     (\\<forall>x\\<in>X.\n         \\<forall>y\\<in>\\<Union> XX.\n            y \\<sqsubset> x \\<longrightarrow> y \\<in> X)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>X \\<in> XX; x \\<in> X; y \\<in> \\<Union> XX;\n     y \\<sqsubset> x\\<rbrakk>\n    \\<Longrightarrow> y \\<in> X", "by blast"], ["proof (state)\nthis:\n  \\<lbrakk>?X \\<in> XX; ?x \\<in> ?X; ?y \\<in> \\<Union> XX;\n   ?y \\<sqsubset> ?x\\<rbrakk>\n  \\<Longrightarrow> ?y \\<in> ?X\n\ngoal (1 subgoal):\n 1. \\<And>X.\n       \\<lbrakk>X \\<subseteq> \\<Union> XX; X \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>X.\n                            \\<forall>y\\<in>X. \\<not> y \\<sqsubset> x", "fix S"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>X.\n       \\<lbrakk>X \\<subseteq> \\<Union> XX; X \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>X.\n                            \\<forall>y\\<in>X. \\<not> y \\<sqsubset> x", "assume S: \"S \\<subseteq> \\<Union>XX\" and S0: \"S \\<noteq> {}\""], ["proof (state)\nthis:\n  S \\<subseteq> \\<Union> XX\n  S \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<And>X.\n       \\<lbrakk>X \\<subseteq> \\<Union> XX; X \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>X.\n                            \\<forall>y\\<in>X. \\<not> y \\<sqsubset> x", "from S0"], ["proof (chain)\npicking this:\n  S \\<noteq> {}", "obtain x where xS: \"x \\<in> S\""], ["proof (prove)\nusing this:\n  S \\<noteq> {}\n\ngoal (1 subgoal):\n 1. (\\<And>x. x \\<in> S \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by auto"], ["proof (state)\nthis:\n  x \\<in> S\n\ngoal (1 subgoal):\n 1. \\<And>X.\n       \\<lbrakk>X \\<subseteq> \\<Union> XX; X \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>X.\n                            \\<forall>y\\<in>X. \\<not> y \\<sqsubset> x", "with S"], ["proof (chain)\npicking this:\n  S \\<subseteq> \\<Union> XX\n  x \\<in> S", "obtain X where X: \"X \\<in> XX\" and xX: \"x \\<in> X\""], ["proof (prove)\nusing this:\n  S \\<subseteq> \\<Union> XX\n  x \\<in> S\n\ngoal (1 subgoal):\n 1. (\\<And>X.\n        \\<lbrakk>X \\<in> XX; x \\<in> X\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  X \\<in> XX\n  x \\<in> X\n\ngoal (1 subgoal):\n 1. \\<And>X.\n       \\<lbrakk>X \\<subseteq> \\<Union> XX; X \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>X.\n                            \\<forall>y\\<in>X. \\<not> y \\<sqsubset> x", "from xS xX"], ["proof (chain)\npicking this:\n  x \\<in> S\n  x \\<in> X", "have Sx0: \"S \\<inter> X \\<noteq> {}\""], ["proof (prove)\nusing this:\n  x \\<in> S\n  x \\<in> X\n\ngoal (1 subgoal):\n 1. S \\<inter> X \\<noteq> {}", "by auto"], ["proof (state)\nthis:\n  S \\<inter> X \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<And>X.\n       \\<lbrakk>X \\<subseteq> \\<Union> XX; X \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>X.\n                            \\<forall>y\\<in>X. \\<not> y \\<sqsubset> x", "from X XX"], ["proof (chain)\npicking this:\n  X \\<in> XX\n  \\<forall>X\\<in>XX.\n     well_founded X (\\<sqsubset>) \\<and>\n     (\\<forall>x\\<in>X.\n         \\<forall>y\\<in>\\<Union> XX.\n            y \\<sqsubset> x \\<longrightarrow> y \\<in> X)", "interpret well_founded X \"(\\<sqsubset>)\""], ["proof (prove)\nusing this:\n  X \\<in> XX\n  \\<forall>X\\<in>XX.\n     well_founded X (\\<sqsubset>) \\<and>\n     (\\<forall>x\\<in>X.\n         \\<forall>y\\<in>\\<Union> XX.\n            y \\<sqsubset> x \\<longrightarrow> y \\<in> X)\n\ngoal (1 subgoal):\n 1. well_founded X (\\<sqsubset>)", "by auto"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>X.\n       \\<lbrakk>X \\<subseteq> \\<Union> XX; X \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>X.\n                            \\<forall>y\\<in>X. \\<not> y \\<sqsubset> x", "from nonempty_imp_ex_extremal[OF _ Sx0]"], ["proof (chain)\npicking this:\n  S \\<inter> X \\<subseteq> X \\<Longrightarrow>\n  \\<exists>z\\<in>S \\<inter> X.\n     \\<forall>y\\<in>S \\<inter> X. \\<not> y \\<sqsubset> z", "obtain z where zS: \"z \\<in> S\" and zX: \"z \\<in> X\" and min: \"\\<forall>y \\<in> S \\<inter> X. \\<not> y \\<sqsubset> z\""], ["proof (prove)\nusing this:\n  S \\<inter> X \\<subseteq> X \\<Longrightarrow>\n  \\<exists>z\\<in>S \\<inter> X.\n     \\<forall>y\\<in>S \\<inter> X. \\<not> y \\<sqsubset> z\n\ngoal (1 subgoal):\n 1. (\\<And>z.\n        \\<lbrakk>z \\<in> S; z \\<in> X;\n         \\<forall>y\\<in>S \\<inter> X. \\<not> y \\<sqsubset> z\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  z \\<in> S\n  z \\<in> X\n  \\<forall>y\\<in>S \\<inter> X. \\<not> y \\<sqsubset> z\n\ngoal (1 subgoal):\n 1. \\<And>X.\n       \\<lbrakk>X \\<subseteq> \\<Union> XX; X \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>X.\n                            \\<forall>y\\<in>X. \\<not> y \\<sqsubset> x", "show \"\\<exists>x\\<in>S. \\<forall>y\\<in>S. \\<not> y \\<sqsubset> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x\\<in>S. \\<forall>y\\<in>S. \\<not> y \\<sqsubset> x", "proof (intro bexI[OF _ zS] ballI notI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>y \\<in> S; y \\<sqsubset> z\\<rbrakk> \\<Longrightarrow> False", "fix y"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>y \\<in> S; y \\<sqsubset> z\\<rbrakk> \\<Longrightarrow> False", "assume yS: \"y \\<in> S\" and yz: \"y \\<sqsubset> z\""], ["proof (state)\nthis:\n  y \\<in> S\n  y \\<sqsubset> z\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>y \\<in> S; y \\<sqsubset> z\\<rbrakk> \\<Longrightarrow> False", "have yXX: \"y \\<in> \\<Union> XX\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y \\<in> \\<Union> XX", "using S yS"], ["proof (prove)\nusing this:\n  S \\<subseteq> \\<Union> XX\n  y \\<in> S\n\ngoal (1 subgoal):\n 1. y \\<in> \\<Union> XX", "by auto"], ["proof (state)\nthis:\n  y \\<in> \\<Union> XX\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>y \\<in> S; y \\<sqsubset> z\\<rbrakk> \\<Longrightarrow> False", "from *[OF X zX yXX yz] yS"], ["proof (chain)\npicking this:\n  y \\<in> X\n  y \\<in> S", "have \"y \\<in> X \\<inter> S\""], ["proof (prove)\nusing this:\n  y \\<in> X\n  y \\<in> S\n\ngoal (1 subgoal):\n 1. y \\<in> X \\<inter> S", "by auto"], ["proof (state)\nthis:\n  y \\<in> X \\<inter> S\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>y \\<in> S; y \\<sqsubset> z\\<rbrakk> \\<Longrightarrow> False", "with min yz"], ["proof (chain)\npicking this:\n  \\<forall>y\\<in>S \\<inter> X. \\<not> y \\<sqsubset> z\n  y \\<sqsubset> z\n  y \\<in> X \\<inter> S", "show False"], ["proof (prove)\nusing this:\n  \\<forall>y\\<in>S \\<inter> X. \\<not> y \\<sqsubset> z\n  y \\<sqsubset> z\n  y \\<in> X \\<inter> S\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>x\\<in>S. \\<forall>y\\<in>S. \\<not> y \\<sqsubset> x\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma well_founded_cmono:\n  assumes r': \"r' \\<le> r\" and wf: \"well_founded A r\"\n  shows \"well_founded A r'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. well_founded A r'", "proof (intro well_foundedI_extremal)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>X.\n       \\<lbrakk>X \\<subseteq> A; X \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>X. \\<forall>y\\<in>X. \\<not> r' y x", "fix X"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>X.\n       \\<lbrakk>X \\<subseteq> A; X \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>X. \\<forall>y\\<in>X. \\<not> r' y x", "assume \"X \\<subseteq> A\" and \"X \\<noteq> {}\""], ["proof (state)\nthis:\n  X \\<subseteq> A\n  X \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<And>X.\n       \\<lbrakk>X \\<subseteq> A; X \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>X. \\<forall>y\\<in>X. \\<not> r' y x", "from well_founded.nonempty_imp_ex_extremal[OF wf this]"], ["proof (chain)\npicking this:\n  \\<exists>z\\<in>X. \\<forall>y\\<in>X. \\<not> r y z", "show \"\\<exists>x\\<in>X. \\<forall>y\\<in>X. \\<not> r' y x\""], ["proof (prove)\nusing this:\n  \\<exists>z\\<in>X. \\<forall>y\\<in>X. \\<not> r y z\n\ngoal (1 subgoal):\n 1. \\<exists>x\\<in>X. \\<forall>y\\<in>X. \\<not> r' y x", "using r'"], ["proof (prove)\nusing this:\n  \\<exists>z\\<in>X. \\<forall>y\\<in>X. \\<not> r y z\n  r' \\<le> r\n\ngoal (1 subgoal):\n 1. \\<exists>x\\<in>X. \\<forall>y\\<in>X. \\<not> r' y x", "by auto"], ["proof (state)\nthis:\n  \\<exists>x\\<in>X. \\<forall>y\\<in>X. \\<not> r' y x\n\ngoal:\nNo subgoals!", "qed"], ["", "locale well_founded_ordered_set = well_founded + transitive _ \"(\\<sqsubset>)\"\nbegin"], ["", "sublocale strict_ordered_set"], ["proof (prove)\ngoal (1 subgoal):\n 1. strict_ordered_set A (\\<sqsubset>)", ".."], ["", "interpretation Restrp: strict_ordered_set UNIV \"(\\<sqsubset>)\\<restriction>A\" + Restrp: well_founded UNIV \"(\\<sqsubset>)\\<restriction>A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. strict_ordered_set UNIV ((\\<sqsubset>) \\<restriction> A) &&&\n    well_founded UNIV ((\\<sqsubset>) \\<restriction> A)", "using Restrp_strict_order Restrp_well_founded"], ["proof (prove)\nusing this:\n  strict_ordered_set UNIV ((\\<sqsubset>) \\<restriction> A)\n  well_founded UNIV ((\\<sqsubset>) \\<restriction> A)\n\ngoal (1 subgoal):\n 1. strict_ordered_set UNIV ((\\<sqsubset>) \\<restriction> A) &&&\n    well_founded UNIV ((\\<sqsubset>) \\<restriction> A)", "."], ["", "lemma Restrp_well_founded_order: \"well_founded_ordered_set UNIV ((\\<sqsubset>)\\<restriction>A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. well_founded_ordered_set UNIV ((\\<sqsubset>) \\<restriction> A)", ".."], ["", "lemma well_founded_ordered_subset: \"B \\<subseteq> A \\<Longrightarrow> well_founded_ordered_set B (\\<sqsubset>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. B \\<subseteq> A \\<Longrightarrow>\n    well_founded_ordered_set B (\\<sqsubset>)", "apply intro_locales"], ["proof (prove)\ngoal (2 subgoals):\n 1. B \\<subseteq> A \\<Longrightarrow> well_founded B (\\<sqsubset>)\n 2. B \\<subseteq> A \\<Longrightarrow> transitive B (\\<sqsubset>)", "using well_founded_subset transitive_subset"], ["proof (prove)\nusing this:\n  ?B \\<subseteq> A \\<Longrightarrow> well_founded ?B (\\<sqsubset>)\n  ?B \\<subseteq> A \\<Longrightarrow> transitive ?B (\\<sqsubset>)\n\ngoal (2 subgoals):\n 1. B \\<subseteq> A \\<Longrightarrow> well_founded B (\\<sqsubset>)\n 2. B \\<subseteq> A \\<Longrightarrow> transitive B (\\<sqsubset>)", "by auto"], ["", "end"], ["", "lemma (in well_founded) Restrp_tranclp_well_founded_ordered: \"well_founded_ordered_set UNIV ((\\<sqsubset>)\\<restriction>A)\\<^sup>+\\<^sup>+\""], ["proof (prove)\ngoal (1 subgoal):\n 1. well_founded_ordered_set UNIV\n     ((\\<sqsubset>) \\<restriction> A)\\<^sup>+\\<^sup>+", "using Restrp_tranclp_well_founded tranclp_transitive"], ["proof (prove)\nusing this:\n  well_founded UNIV ((\\<sqsubset>) \\<restriction> A)\\<^sup>+\\<^sup>+\n  transitive ?A ?r\\<^sup>+\\<^sup>+\n\ngoal (1 subgoal):\n 1. well_founded_ordered_set UNIV\n     ((\\<sqsubset>) \\<restriction> A)\\<^sup>+\\<^sup>+", "by intro_locales"], ["", "locale well_related_set = related_set +\n  assumes nonempty_imp_ex_extreme: \"X \\<subseteq> A \\<Longrightarrow> X \\<noteq> {} \\<Longrightarrow> \\<exists>e. extreme X (\\<sqsubseteq>)\\<^sup>- e\"\nbegin"], ["", "sublocale connex"], ["proof (prove)\ngoal (1 subgoal):\n 1. connex A (\\<sqsubseteq>)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> A; y \\<in> A\\<rbrakk>\n       \\<Longrightarrow> x \\<sqsubseteq> y \\<or> y \\<sqsubseteq> x", "fix x y"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> A; y \\<in> A\\<rbrakk>\n       \\<Longrightarrow> x \\<sqsubseteq> y \\<or> y \\<sqsubseteq> x", "assume \"x \\<in> A\" and \"y \\<in> A\""], ["proof (state)\nthis:\n  x \\<in> A\n  y \\<in> A\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> A; y \\<in> A\\<rbrakk>\n       \\<Longrightarrow> x \\<sqsubseteq> y \\<or> y \\<sqsubseteq> x", "with nonempty_imp_ex_extreme[of \"{x,y}\"]"], ["proof (chain)\npicking this:\n  \\<lbrakk>{x, y} \\<subseteq> A; {x, y} \\<noteq> {}\\<rbrakk>\n  \\<Longrightarrow> \\<exists>e.\n                       extreme {x, y} (\\<lambda>x y. y \\<sqsubseteq> x) e\n  x \\<in> A\n  y \\<in> A", "show \"x \\<sqsubseteq> y \\<or> y \\<sqsubseteq> x\""], ["proof (prove)\nusing this:\n  \\<lbrakk>{x, y} \\<subseteq> A; {x, y} \\<noteq> {}\\<rbrakk>\n  \\<Longrightarrow> \\<exists>e.\n                       extreme {x, y} (\\<lambda>x y. y \\<sqsubseteq> x) e\n  x \\<in> A\n  y \\<in> A\n\ngoal (1 subgoal):\n 1. x \\<sqsubseteq> y \\<or> y \\<sqsubseteq> x", "by auto"], ["proof (state)\nthis:\n  x \\<sqsubseteq> y \\<or> y \\<sqsubseteq> x\n\ngoal:\nNo subgoals!", "qed"], ["", "lemmas connex_axioms = connex_axioms"], ["", "interpretation less_eq_notations"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "sublocale asym: well_founded A \"(\\<sqsubset>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. well_founded A (\\<sqsubset>)", "proof (unfold well_founded_iff_ex_extremal, intro allI impI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>X.\n       \\<lbrakk>X \\<subseteq> A; X \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>X.\n                            \\<forall>z\\<in>X. \\<not> z \\<sqsubset> x", "fix X"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>X.\n       \\<lbrakk>X \\<subseteq> A; X \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>X.\n                            \\<forall>z\\<in>X. \\<not> z \\<sqsubset> x", "assume XA: \"X \\<subseteq> A\" and X0: \"X \\<noteq> {}\""], ["proof (state)\nthis:\n  X \\<subseteq> A\n  X \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<And>X.\n       \\<lbrakk>X \\<subseteq> A; X \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>X.\n                            \\<forall>z\\<in>X. \\<not> z \\<sqsubset> x", "from nonempty_imp_ex_extreme[OF XA X0]"], ["proof (chain)\npicking this:\n  \\<exists>e. extreme X (\\<lambda>x y. y \\<sqsubseteq> x) e", "obtain e where \"extreme X (\\<sqsubseteq>)\\<^sup>- e\""], ["proof (prove)\nusing this:\n  \\<exists>e. extreme X (\\<lambda>x y. y \\<sqsubseteq> x) e\n\ngoal (1 subgoal):\n 1. (\\<And>e.\n        extreme X (\\<lambda>x y. y \\<sqsubseteq> x) e \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  extreme X (\\<lambda>x y. y \\<sqsubseteq> x) e\n\ngoal (1 subgoal):\n 1. \\<And>X.\n       \\<lbrakk>X \\<subseteq> A; X \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>X.\n                            \\<forall>z\\<in>X. \\<not> z \\<sqsubset> x", "then"], ["proof (chain)\npicking this:\n  extreme X (\\<lambda>x y. y \\<sqsubseteq> x) e", "show \"\\<exists>x\\<in>X. \\<forall>z\\<in>X. \\<not>z \\<sqsubset> x\""], ["proof (prove)\nusing this:\n  extreme X (\\<lambda>x y. y \\<sqsubseteq> x) e\n\ngoal (1 subgoal):\n 1. \\<exists>x\\<in>X. \\<forall>z\\<in>X. \\<not> z \\<sqsubset> x", "by (auto intro!: bexI[of _ e])"], ["proof (state)\nthis:\n  \\<exists>x\\<in>X. \\<forall>z\\<in>X. \\<not> z \\<sqsubset> x\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma well_related_subset: \"B \\<subseteq> A \\<Longrightarrow> well_related_set B (\\<sqsubseteq>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. B \\<subseteq> A \\<Longrightarrow> well_related_set B (\\<sqsubseteq>)", "by (auto intro!: well_related_set.intro nonempty_imp_ex_extreme)"], ["", "end"], ["", "context\n  fixes less_eq :: \"'a \\<Rightarrow> 'a \\<Rightarrow> bool\" (infix \"\\<sqsubseteq>\" 50)\nbegin"], ["", "lemma well_related_iff_neg_well_founded:\n  \"well_related_set A (\\<sqsubseteq>) \\<longleftrightarrow> well_founded A (\\<lambda>x y. \\<not> y \\<sqsubseteq> x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. well_related_set A (\\<sqsubseteq>) =\n    well_founded A (\\<lambda>x y. \\<not> y \\<sqsubseteq> x)", "by (simp add: well_related_set_def well_founded_iff_ex_extremal extreme_def Bex_def)"], ["", "lemma well_related_singleton_refl: \n  assumes \"x \\<sqsubseteq> x\" shows \"well_related_set {x} (\\<sqsubseteq>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. well_related_set {x} (\\<sqsubseteq>)", "by (intro well_related_set.intro exI[of _ x], auto simp: subset_singleton_iff assms)"], ["", "lemma closed_UN_well_related:\n  assumes XX: \"\\<forall>X\\<in>XX. well_related_set X (\\<sqsubseteq>) \\<and> (\\<forall>x\\<in>X. \\<forall>y\\<in>\\<Union>XX. \\<not>x \\<sqsubseteq> y \\<longrightarrow> y \\<in> X)\"\n  shows \"well_related_set (\\<Union>XX) (\\<sqsubseteq>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. well_related_set (\\<Union> XX) (\\<sqsubseteq>)", "using XX"], ["proof (prove)\nusing this:\n  \\<forall>X\\<in>XX.\n     well_related_set X (\\<sqsubseteq>) \\<and>\n     (\\<forall>x\\<in>X.\n         \\<forall>y\\<in>\\<Union> XX.\n            \\<not> x \\<sqsubseteq> y \\<longrightarrow> y \\<in> X)\n\ngoal (1 subgoal):\n 1. well_related_set (\\<Union> XX) (\\<sqsubseteq>)", "apply (unfold well_related_iff_neg_well_founded)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>X\\<in>XX.\n       well_founded X (\\<lambda>x y. \\<not> y \\<sqsubseteq> x) \\<and>\n       (\\<forall>x\\<in>X.\n           \\<forall>y\\<in>\\<Union> XX.\n              \\<not> x \\<sqsubseteq> y \\<longrightarrow>\n              y \\<in> X) \\<Longrightarrow>\n    well_founded (\\<Union> XX) (\\<lambda>x y. \\<not> y \\<sqsubseteq> x)", "using closed_UN_well_founded[of _ \"\\<lambda>x y. \\<not> y \\<sqsubseteq> x\"]"], ["proof (prove)\nusing this:\n  \\<forall>X\\<in>?XX.\n     well_founded X (\\<lambda>x y. \\<not> y \\<sqsubseteq> x) \\<and>\n     (\\<forall>x\\<in>X.\n         \\<forall>y\\<in>\\<Union> ?XX.\n            \\<not> x \\<sqsubseteq> y \\<longrightarrow>\n            y \\<in> X) \\<Longrightarrow>\n  well_founded (\\<Union> ?XX) (\\<lambda>x y. \\<not> y \\<sqsubseteq> x)\n\ngoal (1 subgoal):\n 1. \\<forall>X\\<in>XX.\n       well_founded X (\\<lambda>x y. \\<not> y \\<sqsubseteq> x) \\<and>\n       (\\<forall>x\\<in>X.\n           \\<forall>y\\<in>\\<Union> XX.\n              \\<not> x \\<sqsubseteq> y \\<longrightarrow>\n              y \\<in> X) \\<Longrightarrow>\n    well_founded (\\<Union> XX) (\\<lambda>x y. \\<not> y \\<sqsubseteq> x)", "."], ["", "end"], ["", "lemma well_related_extend:\n  fixes r (infix \"\\<sqsubseteq>\" 50)\n  assumes \"well_related_set A (\\<sqsubseteq>)\" and \"well_related_set B (\\<sqsubseteq>)\" and \"\\<forall>a \\<in> A. \\<forall>b \\<in> B. a \\<sqsubseteq> b\"\n  shows \"well_related_set (A \\<union> B) (\\<sqsubseteq>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. well_related_set (A \\<union> B) (\\<sqsubseteq>)", "using well_founded_extend[of _ \"\\<lambda>x y. \\<not> y \\<sqsubseteq> x\", folded well_related_iff_neg_well_founded]"], ["proof (prove)\nusing this:\n  \\<lbrakk>well_related_set ?A (\\<sqsubseteq>);\n   well_related_set ?B (\\<sqsubseteq>);\n   \\<forall>a\\<in>?A.\n      \\<forall>b\\<in>?B. \\<not> \\<not> a \\<sqsubseteq> b\\<rbrakk>\n  \\<Longrightarrow> well_related_set (?A \\<union> ?B) (\\<sqsubseteq>)\n\ngoal (1 subgoal):\n 1. well_related_set (A \\<union> B) (\\<sqsubseteq>)", "using assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>well_related_set ?A (\\<sqsubseteq>);\n   well_related_set ?B (\\<sqsubseteq>);\n   \\<forall>a\\<in>?A.\n      \\<forall>b\\<in>?B. \\<not> \\<not> a \\<sqsubseteq> b\\<rbrakk>\n  \\<Longrightarrow> well_related_set (?A \\<union> ?B) (\\<sqsubseteq>)\n  well_related_set A (\\<sqsubseteq>)\n  well_related_set B (\\<sqsubseteq>)\n  \\<forall>a\\<in>A. \\<forall>b\\<in>B. a \\<sqsubseteq> b\n\ngoal (1 subgoal):\n 1. well_related_set (A \\<union> B) (\\<sqsubseteq>)", "by auto"], ["", "locale pre_well_ordered_set = semiattractive + well_related_set\nbegin"], ["", "interpretation less_eq_notations"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "sublocale transitive"], ["proof (prove)\ngoal (1 subgoal):\n 1. transitive A (\\<sqsubseteq>)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<sqsubseteq> y; y \\<sqsubseteq> z; x \\<in> A; y \\<in> A;\n        z \\<in> A\\<rbrakk>\n       \\<Longrightarrow> x \\<sqsubseteq> z", "fix x y z"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<sqsubseteq> y; y \\<sqsubseteq> z; x \\<in> A; y \\<in> A;\n        z \\<in> A\\<rbrakk>\n       \\<Longrightarrow> x \\<sqsubseteq> z", "assume xy: \"x \\<sqsubseteq> y\" and yz: \"y \\<sqsubseteq> z\" and x: \"x \\<in> A\" and y: \"y \\<in> A\" and z: \"z \\<in> A\""], ["proof (state)\nthis:\n  x \\<sqsubseteq> y\n  y \\<sqsubseteq> z\n  x \\<in> A\n  y \\<in> A\n  z \\<in> A\n\ngoal (1 subgoal):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<sqsubseteq> y; y \\<sqsubseteq> z; x \\<in> A; y \\<in> A;\n        z \\<in> A\\<rbrakk>\n       \\<Longrightarrow> x \\<sqsubseteq> z", "from x y z"], ["proof (chain)\npicking this:\n  x \\<in> A\n  y \\<in> A\n  z \\<in> A", "have \"\\<exists>e. extreme {x,y,z} (\\<sqsupseteq>) e\" (is \"\\<exists>e. ?P e\")"], ["proof (prove)\nusing this:\n  x \\<in> A\n  y \\<in> A\n  z \\<in> A\n\ngoal (1 subgoal):\n 1. \\<exists>e. extreme {x, y, z} (\\<lambda>x y. y \\<sqsubseteq> x) e", "by (auto intro!: nonempty_imp_ex_extreme)"], ["proof (state)\nthis:\n  \\<exists>e. extreme {x, y, z} (\\<lambda>x y. y \\<sqsubseteq> x) e\n\ngoal (1 subgoal):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<sqsubseteq> y; y \\<sqsubseteq> z; x \\<in> A; y \\<in> A;\n        z \\<in> A\\<rbrakk>\n       \\<Longrightarrow> x \\<sqsubseteq> z", "then"], ["proof (chain)\npicking this:\n  \\<exists>e. extreme {x, y, z} (\\<lambda>x y. y \\<sqsubseteq> x) e", "have \"?P x \\<or> ?P y \\<or> ?P z\""], ["proof (prove)\nusing this:\n  \\<exists>e. extreme {x, y, z} (\\<lambda>x y. y \\<sqsubseteq> x) e\n\ngoal (1 subgoal):\n 1. extreme {x, y, z} (\\<lambda>x y. y \\<sqsubseteq> x) x \\<or>\n    extreme {x, y, z} (\\<lambda>x y. y \\<sqsubseteq> x) y \\<or>\n    extreme {x, y, z} (\\<lambda>x y. y \\<sqsubseteq> x) z", "by auto"], ["proof (state)\nthis:\n  extreme {x, y, z} (\\<lambda>x y. y \\<sqsubseteq> x) x \\<or>\n  extreme {x, y, z} (\\<lambda>x y. y \\<sqsubseteq> x) y \\<or>\n  extreme {x, y, z} (\\<lambda>x y. y \\<sqsubseteq> x) z\n\ngoal (1 subgoal):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<sqsubseteq> y; y \\<sqsubseteq> z; x \\<in> A; y \\<in> A;\n        z \\<in> A\\<rbrakk>\n       \\<Longrightarrow> x \\<sqsubseteq> z", "then"], ["proof (chain)\npicking this:\n  extreme {x, y, z} (\\<lambda>x y. y \\<sqsubseteq> x) x \\<or>\n  extreme {x, y, z} (\\<lambda>x y. y \\<sqsubseteq> x) y \\<or>\n  extreme {x, y, z} (\\<lambda>x y. y \\<sqsubseteq> x) z", "show \"x \\<sqsubseteq> z\""], ["proof (prove)\nusing this:\n  extreme {x, y, z} (\\<lambda>x y. y \\<sqsubseteq> x) x \\<or>\n  extreme {x, y, z} (\\<lambda>x y. y \\<sqsubseteq> x) y \\<or>\n  extreme {x, y, z} (\\<lambda>x y. y \\<sqsubseteq> x) z\n\ngoal (1 subgoal):\n 1. x \\<sqsubseteq> z", "proof (elim disjE)"], ["proof (state)\ngoal (3 subgoals):\n 1. extreme {x, y, z} (\\<lambda>x y. y \\<sqsubseteq> x) x \\<Longrightarrow>\n    x \\<sqsubseteq> z\n 2. extreme {x, y, z} (\\<lambda>x y. y \\<sqsubseteq> x) y \\<Longrightarrow>\n    x \\<sqsubseteq> z\n 3. extreme {x, y, z} (\\<lambda>x y. y \\<sqsubseteq> x) z \\<Longrightarrow>\n    x \\<sqsubseteq> z", "assume \"?P x\""], ["proof (state)\nthis:\n  extreme {x, y, z} (\\<lambda>x y. y \\<sqsubseteq> x) x\n\ngoal (3 subgoals):\n 1. extreme {x, y, z} (\\<lambda>x y. y \\<sqsubseteq> x) x \\<Longrightarrow>\n    x \\<sqsubseteq> z\n 2. extreme {x, y, z} (\\<lambda>x y. y \\<sqsubseteq> x) y \\<Longrightarrow>\n    x \\<sqsubseteq> z\n 3. extreme {x, y, z} (\\<lambda>x y. y \\<sqsubseteq> x) z \\<Longrightarrow>\n    x \\<sqsubseteq> z", "then"], ["proof (chain)\npicking this:\n  extreme {x, y, z} (\\<lambda>x y. y \\<sqsubseteq> x) x", "show ?thesis"], ["proof (prove)\nusing this:\n  extreme {x, y, z} (\\<lambda>x y. y \\<sqsubseteq> x) x\n\ngoal (1 subgoal):\n 1. x \\<sqsubseteq> z", "by auto"], ["proof (state)\nthis:\n  x \\<sqsubseteq> z\n\ngoal (2 subgoals):\n 1. extreme {x, y, z} (\\<lambda>x y. y \\<sqsubseteq> x) y \\<Longrightarrow>\n    x \\<sqsubseteq> z\n 2. extreme {x, y, z} (\\<lambda>x y. y \\<sqsubseteq> x) z \\<Longrightarrow>\n    x \\<sqsubseteq> z", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. extreme {x, y, z} (\\<lambda>x y. y \\<sqsubseteq> x) y \\<Longrightarrow>\n    x \\<sqsubseteq> z\n 2. extreme {x, y, z} (\\<lambda>x y. y \\<sqsubseteq> x) z \\<Longrightarrow>\n    x \\<sqsubseteq> z", "assume \"?P y\""], ["proof (state)\nthis:\n  extreme {x, y, z} (\\<lambda>x y. y \\<sqsubseteq> x) y\n\ngoal (2 subgoals):\n 1. extreme {x, y, z} (\\<lambda>x y. y \\<sqsubseteq> x) y \\<Longrightarrow>\n    x \\<sqsubseteq> z\n 2. extreme {x, y, z} (\\<lambda>x y. y \\<sqsubseteq> x) z \\<Longrightarrow>\n    x \\<sqsubseteq> z", "then"], ["proof (chain)\npicking this:\n  extreme {x, y, z} (\\<lambda>x y. y \\<sqsubseteq> x) y", "have \"y \\<sqsubseteq> x\""], ["proof (prove)\nusing this:\n  extreme {x, y, z} (\\<lambda>x y. y \\<sqsubseteq> x) y\n\ngoal (1 subgoal):\n 1. y \\<sqsubseteq> x", "by auto"], ["proof (state)\nthis:\n  y \\<sqsubseteq> x\n\ngoal (2 subgoals):\n 1. extreme {x, y, z} (\\<lambda>x y. y \\<sqsubseteq> x) y \\<Longrightarrow>\n    x \\<sqsubseteq> z\n 2. extreme {x, y, z} (\\<lambda>x y. y \\<sqsubseteq> x) z \\<Longrightarrow>\n    x \\<sqsubseteq> z", "from attract[OF xy this yz] x y z"], ["proof (chain)\npicking this:\n  \\<lbrakk>x \\<in> A; y \\<in> A; z \\<in> A\\<rbrakk>\n  \\<Longrightarrow> x \\<sqsubseteq> z\n  x \\<in> A\n  y \\<in> A\n  z \\<in> A", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>x \\<in> A; y \\<in> A; z \\<in> A\\<rbrakk>\n  \\<Longrightarrow> x \\<sqsubseteq> z\n  x \\<in> A\n  y \\<in> A\n  z \\<in> A\n\ngoal (1 subgoal):\n 1. x \\<sqsubseteq> z", "by auto"], ["proof (state)\nthis:\n  x \\<sqsubseteq> z\n\ngoal (1 subgoal):\n 1. extreme {x, y, z} (\\<lambda>x y. y \\<sqsubseteq> x) z \\<Longrightarrow>\n    x \\<sqsubseteq> z", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. extreme {x, y, z} (\\<lambda>x y. y \\<sqsubseteq> x) z \\<Longrightarrow>\n    x \\<sqsubseteq> z", "assume \"?P z\""], ["proof (state)\nthis:\n  extreme {x, y, z} (\\<lambda>x y. y \\<sqsubseteq> x) z\n\ngoal (1 subgoal):\n 1. extreme {x, y, z} (\\<lambda>x y. y \\<sqsubseteq> x) z \\<Longrightarrow>\n    x \\<sqsubseteq> z", "then"], ["proof (chain)\npicking this:\n  extreme {x, y, z} (\\<lambda>x y. y \\<sqsubseteq> x) z", "have zx: \"z \\<sqsubseteq> x\" and zy: \"z \\<sqsubseteq> y\""], ["proof (prove)\nusing this:\n  extreme {x, y, z} (\\<lambda>x y. y \\<sqsubseteq> x) z\n\ngoal (1 subgoal):\n 1. z \\<sqsubseteq> x &&& z \\<sqsubseteq> y", "by auto"], ["proof (state)\nthis:\n  z \\<sqsubseteq> x\n  z \\<sqsubseteq> y\n\ngoal (1 subgoal):\n 1. extreme {x, y, z} (\\<lambda>x y. y \\<sqsubseteq> x) z \\<Longrightarrow>\n    x \\<sqsubseteq> z", "from attract[OF yz zy zx] x y z"], ["proof (chain)\npicking this:\n  \\<lbrakk>y \\<in> A; z \\<in> A; x \\<in> A\\<rbrakk>\n  \\<Longrightarrow> y \\<sqsubseteq> x\n  x \\<in> A\n  y \\<in> A\n  z \\<in> A", "have yx: \"y \\<sqsubseteq> x\""], ["proof (prove)\nusing this:\n  \\<lbrakk>y \\<in> A; z \\<in> A; x \\<in> A\\<rbrakk>\n  \\<Longrightarrow> y \\<sqsubseteq> x\n  x \\<in> A\n  y \\<in> A\n  z \\<in> A\n\ngoal (1 subgoal):\n 1. y \\<sqsubseteq> x", "by auto"], ["proof (state)\nthis:\n  y \\<sqsubseteq> x\n\ngoal (1 subgoal):\n 1. extreme {x, y, z} (\\<lambda>x y. y \\<sqsubseteq> x) z \\<Longrightarrow>\n    x \\<sqsubseteq> z", "from attract[OF xy yx yz] x y z"], ["proof (chain)\npicking this:\n  \\<lbrakk>x \\<in> A; y \\<in> A; z \\<in> A\\<rbrakk>\n  \\<Longrightarrow> x \\<sqsubseteq> z\n  x \\<in> A\n  y \\<in> A\n  z \\<in> A", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>x \\<in> A; y \\<in> A; z \\<in> A\\<rbrakk>\n  \\<Longrightarrow> x \\<sqsubseteq> z\n  x \\<in> A\n  y \\<in> A\n  z \\<in> A\n\ngoal (1 subgoal):\n 1. x \\<sqsubseteq> z", "by auto"], ["proof (state)\nthis:\n  x \\<sqsubseteq> z\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  x \\<sqsubseteq> z\n\ngoal:\nNo subgoals!", "qed"], ["", "sublocale total_quasi_ordered_set"], ["proof (prove)\ngoal (1 subgoal):\n 1. total_quasi_ordered_set A (\\<sqsubseteq>)", ".."], ["", "lemmas connex_axioms = connex_axioms"], ["", "lemma strict_weak_trans[trans]:\n  assumes xy: \"x \\<sqsubset> y\" and yz: \"y \\<sqsubseteq> z\" and x: \"x \\<in> A\" and y: \"y \\<in> A\" and z: \"z \\<in> A\"\n  shows \"x \\<sqsubset> z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<sqsubset> z", "proof (intro asympartpI notI)"], ["proof (state)\ngoal (2 subgoals):\n 1. x \\<sqsubseteq> z\n 2. z \\<sqsubseteq> x \\<Longrightarrow> False", "from trans xy yz x y z"], ["proof (chain)\npicking this:\n  \\<lbrakk>?x \\<sqsubseteq> ?y; ?y \\<sqsubseteq> ?z; ?x \\<in> A; ?y \\<in> A;\n   ?z \\<in> A\\<rbrakk>\n  \\<Longrightarrow> ?x \\<sqsubseteq> ?z\n  x \\<sqsubset> y\n  y \\<sqsubseteq> z\n  x \\<in> A\n  y \\<in> A\n  z \\<in> A", "show \"x \\<sqsubseteq> z\""], ["proof (prove)\nusing this:\n  \\<lbrakk>?x \\<sqsubseteq> ?y; ?y \\<sqsubseteq> ?z; ?x \\<in> A; ?y \\<in> A;\n   ?z \\<in> A\\<rbrakk>\n  \\<Longrightarrow> ?x \\<sqsubseteq> ?z\n  x \\<sqsubset> y\n  y \\<sqsubseteq> z\n  x \\<in> A\n  y \\<in> A\n  z \\<in> A\n\ngoal (1 subgoal):\n 1. x \\<sqsubseteq> z", "by auto"], ["proof (state)\nthis:\n  x \\<sqsubseteq> z\n\ngoal (1 subgoal):\n 1. z \\<sqsubseteq> x \\<Longrightarrow> False", "assume \"z \\<sqsubseteq> x\""], ["proof (state)\nthis:\n  z \\<sqsubseteq> x\n\ngoal (1 subgoal):\n 1. z \\<sqsubseteq> x \\<Longrightarrow> False", "from trans[OF yz this] y z x"], ["proof (chain)\npicking this:\n  \\<lbrakk>y \\<in> A; z \\<in> A; x \\<in> A\\<rbrakk>\n  \\<Longrightarrow> y \\<sqsubseteq> x\n  y \\<in> A\n  z \\<in> A\n  x \\<in> A", "have \"y \\<sqsubseteq> x\""], ["proof (prove)\nusing this:\n  \\<lbrakk>y \\<in> A; z \\<in> A; x \\<in> A\\<rbrakk>\n  \\<Longrightarrow> y \\<sqsubseteq> x\n  y \\<in> A\n  z \\<in> A\n  x \\<in> A\n\ngoal (1 subgoal):\n 1. y \\<sqsubseteq> x", "by auto"], ["proof (state)\nthis:\n  y \\<sqsubseteq> x\n\ngoal (1 subgoal):\n 1. z \\<sqsubseteq> x \\<Longrightarrow> False", "with xy"], ["proof (chain)\npicking this:\n  x \\<sqsubset> y\n  y \\<sqsubseteq> x", "show False"], ["proof (prove)\nusing this:\n  x \\<sqsubset> y\n  y \\<sqsubseteq> x\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma weak_strict_trans[trans]:\n  assumes xy: \"x \\<sqsubseteq> y\" and yz: \"y \\<sqsubset> z\" and x: \"x \\<in> A\" and y: \"y \\<in> A\" and z: \"z \\<in> A\"\n  shows \"x \\<sqsubset> z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<sqsubset> z", "proof (intro asympartpI notI)"], ["proof (state)\ngoal (2 subgoals):\n 1. x \\<sqsubseteq> z\n 2. z \\<sqsubseteq> x \\<Longrightarrow> False", "from trans xy yz x y z"], ["proof (chain)\npicking this:\n  \\<lbrakk>?x \\<sqsubseteq> ?y; ?y \\<sqsubseteq> ?z; ?x \\<in> A; ?y \\<in> A;\n   ?z \\<in> A\\<rbrakk>\n  \\<Longrightarrow> ?x \\<sqsubseteq> ?z\n  x \\<sqsubseteq> y\n  y \\<sqsubset> z\n  x \\<in> A\n  y \\<in> A\n  z \\<in> A", "show \"x \\<sqsubseteq> z\""], ["proof (prove)\nusing this:\n  \\<lbrakk>?x \\<sqsubseteq> ?y; ?y \\<sqsubseteq> ?z; ?x \\<in> A; ?y \\<in> A;\n   ?z \\<in> A\\<rbrakk>\n  \\<Longrightarrow> ?x \\<sqsubseteq> ?z\n  x \\<sqsubseteq> y\n  y \\<sqsubset> z\n  x \\<in> A\n  y \\<in> A\n  z \\<in> A\n\ngoal (1 subgoal):\n 1. x \\<sqsubseteq> z", "by auto"], ["proof (state)\nthis:\n  x \\<sqsubseteq> z\n\ngoal (1 subgoal):\n 1. z \\<sqsubseteq> x \\<Longrightarrow> False", "assume \"z \\<sqsubseteq> x\""], ["proof (state)\nthis:\n  z \\<sqsubseteq> x\n\ngoal (1 subgoal):\n 1. z \\<sqsubseteq> x \\<Longrightarrow> False", "from trans[OF this xy] z x y"], ["proof (chain)\npicking this:\n  \\<lbrakk>z \\<in> A; x \\<in> A; y \\<in> A\\<rbrakk>\n  \\<Longrightarrow> z \\<sqsubseteq> y\n  z \\<in> A\n  x \\<in> A\n  y \\<in> A", "have \"z \\<sqsubseteq> y\""], ["proof (prove)\nusing this:\n  \\<lbrakk>z \\<in> A; x \\<in> A; y \\<in> A\\<rbrakk>\n  \\<Longrightarrow> z \\<sqsubseteq> y\n  z \\<in> A\n  x \\<in> A\n  y \\<in> A\n\ngoal (1 subgoal):\n 1. z \\<sqsubseteq> y", "by auto"], ["proof (state)\nthis:\n  z \\<sqsubseteq> y\n\ngoal (1 subgoal):\n 1. z \\<sqsubseteq> x \\<Longrightarrow> False", "with yz"], ["proof (chain)\npicking this:\n  y \\<sqsubset> z\n  z \\<sqsubseteq> y", "show False"], ["proof (prove)\nusing this:\n  y \\<sqsubset> z\n  z \\<sqsubseteq> y\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "lemma pre_well_ordered_iff:\n  \"pre_well_ordered_set A r \\<longleftrightarrow> total_quasi_ordered_set A r \\<and> well_founded A (asympartp r)\"\n  (is \"?p \\<longleftrightarrow> ?t \\<and> ?w\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. pre_well_ordered_set A r =\n    (total_quasi_ordered_set A r \\<and> well_founded A (asympartp r))", "proof safe"], ["proof (state)\ngoal (3 subgoals):\n 1. pre_well_ordered_set A r \\<Longrightarrow> total_quasi_ordered_set A r\n 2. pre_well_ordered_set A r \\<Longrightarrow> well_founded A (asympartp r)\n 3. \\<lbrakk>total_quasi_ordered_set A r;\n     well_founded A (asympartp r)\\<rbrakk>\n    \\<Longrightarrow> pre_well_ordered_set A r", "assume ?p"], ["proof (state)\nthis:\n  pre_well_ordered_set A r\n\ngoal (3 subgoals):\n 1. pre_well_ordered_set A r \\<Longrightarrow> total_quasi_ordered_set A r\n 2. pre_well_ordered_set A r \\<Longrightarrow> well_founded A (asympartp r)\n 3. \\<lbrakk>total_quasi_ordered_set A r;\n     well_founded A (asympartp r)\\<rbrakk>\n    \\<Longrightarrow> pre_well_ordered_set A r", "then"], ["proof (chain)\npicking this:\n  pre_well_ordered_set A r", "interpret pre_well_ordered_set A r"], ["proof (prove)\nusing this:\n  pre_well_ordered_set A r\n\ngoal (1 subgoal):\n 1. pre_well_ordered_set A r", "."], ["proof (state)\ngoal (3 subgoals):\n 1. pre_well_ordered_set A r \\<Longrightarrow> total_quasi_ordered_set A r\n 2. pre_well_ordered_set A r \\<Longrightarrow> well_founded A (asympartp r)\n 3. \\<lbrakk>total_quasi_ordered_set A r;\n     well_founded A (asympartp r)\\<rbrakk>\n    \\<Longrightarrow> pre_well_ordered_set A r", "show ?t ?w"], ["proof (prove)\ngoal (1 subgoal):\n 1. total_quasi_ordered_set A r &&& well_founded A (asympartp r)", "by unfold_locales"], ["proof (state)\nthis:\n  total_quasi_ordered_set A r\n  well_founded A (asympartp r)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>total_quasi_ordered_set A r;\n     well_founded A (asympartp r)\\<rbrakk>\n    \\<Longrightarrow> pre_well_ordered_set A r", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>total_quasi_ordered_set A r;\n     well_founded A (asympartp r)\\<rbrakk>\n    \\<Longrightarrow> pre_well_ordered_set A r", "assume ?t"], ["proof (state)\nthis:\n  total_quasi_ordered_set A r\n\ngoal (1 subgoal):\n 1. \\<lbrakk>total_quasi_ordered_set A r;\n     well_founded A (asympartp r)\\<rbrakk>\n    \\<Longrightarrow> pre_well_ordered_set A r", "then"], ["proof (chain)\npicking this:\n  total_quasi_ordered_set A r", "interpret total_quasi_ordered_set A r"], ["proof (prove)\nusing this:\n  total_quasi_ordered_set A r\n\ngoal (1 subgoal):\n 1. total_quasi_ordered_set A r", "."], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>total_quasi_ordered_set A r;\n     well_founded A (asympartp r)\\<rbrakk>\n    \\<Longrightarrow> pre_well_ordered_set A r", "assume ?w"], ["proof (state)\nthis:\n  well_founded A (asympartp r)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>total_quasi_ordered_set A r;\n     well_founded A (asympartp r)\\<rbrakk>\n    \\<Longrightarrow> pre_well_ordered_set A r", "then"], ["proof (chain)\npicking this:\n  well_founded A (asympartp r)", "have \"well_founded UNIV (asympartp r \\<restriction> A)\""], ["proof (prove)\nusing this:\n  well_founded A (asympartp r)\n\ngoal (1 subgoal):\n 1. well_founded UNIV (asympartp r \\<restriction> A)", "by simp"], ["proof (state)\nthis:\n  well_founded UNIV (asympartp r \\<restriction> A)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>total_quasi_ordered_set A r;\n     well_founded A (asympartp r)\\<rbrakk>\n    \\<Longrightarrow> pre_well_ordered_set A r", "also"], ["proof (state)\nthis:\n  well_founded UNIV (asympartp r \\<restriction> A)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>total_quasi_ordered_set A r;\n     well_founded A (asympartp r)\\<rbrakk>\n    \\<Longrightarrow> pre_well_ordered_set A r", "have \"asympartp r \\<restriction> A = (\\<lambda>x y. \\<not> r y x) \\<restriction> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. asympartp r \\<restriction> A =\n    (\\<lambda>x y. \\<not> r y x) \\<restriction> A", "by (intro ext, auto simp: not_iff_asym)"], ["proof (state)\nthis:\n  asympartp r \\<restriction> A =\n  (\\<lambda>x y. \\<not> r y x) \\<restriction> A\n\ngoal (1 subgoal):\n 1. \\<lbrakk>total_quasi_ordered_set A r;\n     well_founded A (asympartp r)\\<rbrakk>\n    \\<Longrightarrow> pre_well_ordered_set A r", "finally"], ["proof (chain)\npicking this:\n  well_founded UNIV ((\\<lambda>x y. \\<not> r y x) \\<restriction> A)", "have \"well_related_set A r\""], ["proof (prove)\nusing this:\n  well_founded UNIV ((\\<lambda>x y. \\<not> r y x) \\<restriction> A)\n\ngoal (1 subgoal):\n 1. well_related_set A r", "by (simp add: well_related_iff_neg_well_founded)"], ["proof (state)\nthis:\n  well_related_set A r\n\ngoal (1 subgoal):\n 1. \\<lbrakk>total_quasi_ordered_set A r;\n     well_founded A (asympartp r)\\<rbrakk>\n    \\<Longrightarrow> pre_well_ordered_set A r", "then"], ["proof (chain)\npicking this:\n  well_related_set A r", "show ?p"], ["proof (prove)\nusing this:\n  well_related_set A r\n\ngoal (1 subgoal):\n 1. pre_well_ordered_set A r", "by intro_locales"], ["proof (state)\nthis:\n  pre_well_ordered_set A r\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in semiattractive) pre_well_ordered_iff_well_related:\n  assumes XA: \"X \\<subseteq> A\"\n  shows \"pre_well_ordered_set X (\\<sqsubseteq>) \\<longleftrightarrow> well_related_set X (\\<sqsubseteq>)\" (is \"?l \\<longleftrightarrow> ?r\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. pre_well_ordered_set X (\\<sqsubseteq>) =\n    well_related_set X (\\<sqsubseteq>)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. pre_well_ordered_set X (\\<sqsubseteq>) \\<Longrightarrow>\n    well_related_set X (\\<sqsubseteq>)\n 2. well_related_set X (\\<sqsubseteq>) \\<Longrightarrow>\n    pre_well_ordered_set X (\\<sqsubseteq>)", "interpret X: semiattractive X"], ["proof (prove)\ngoal (1 subgoal):\n 1. semiattractive X (\\<sqsubseteq>)", "using semiattractive_subset[OF XA]"], ["proof (prove)\nusing this:\n  semiattractive X (\\<sqsubseteq>)\n\ngoal (1 subgoal):\n 1. semiattractive X (\\<sqsubseteq>)", "."], ["proof (state)\ngoal (2 subgoals):\n 1. pre_well_ordered_set X (\\<sqsubseteq>) \\<Longrightarrow>\n    well_related_set X (\\<sqsubseteq>)\n 2. well_related_set X (\\<sqsubseteq>) \\<Longrightarrow>\n    pre_well_ordered_set X (\\<sqsubseteq>)", "{"], ["proof (state)\ngoal (2 subgoals):\n 1. pre_well_ordered_set X (\\<sqsubseteq>) \\<Longrightarrow>\n    well_related_set X (\\<sqsubseteq>)\n 2. well_related_set X (\\<sqsubseteq>) \\<Longrightarrow>\n    pre_well_ordered_set X (\\<sqsubseteq>)", "assume ?l"], ["proof (state)\nthis:\n  pre_well_ordered_set X (\\<sqsubseteq>)\n\ngoal (2 subgoals):\n 1. pre_well_ordered_set X (\\<sqsubseteq>) \\<Longrightarrow>\n    well_related_set X (\\<sqsubseteq>)\n 2. well_related_set X (\\<sqsubseteq>) \\<Longrightarrow>\n    pre_well_ordered_set X (\\<sqsubseteq>)", "then"], ["proof (chain)\npicking this:\n  pre_well_ordered_set X (\\<sqsubseteq>)", "interpret X: pre_well_ordered_set X"], ["proof (prove)\nusing this:\n  pre_well_ordered_set X (\\<sqsubseteq>)\n\ngoal (1 subgoal):\n 1. pre_well_ordered_set X (\\<sqsubseteq>)", "."], ["proof (state)\ngoal (2 subgoals):\n 1. pre_well_ordered_set X (\\<sqsubseteq>) \\<Longrightarrow>\n    well_related_set X (\\<sqsubseteq>)\n 2. well_related_set X (\\<sqsubseteq>) \\<Longrightarrow>\n    pre_well_ordered_set X (\\<sqsubseteq>)", "show ?r"], ["proof (prove)\ngoal (1 subgoal):\n 1. well_related_set X (\\<sqsubseteq>)", "by unfold_locales"], ["proof (state)\nthis:\n  well_related_set X (\\<sqsubseteq>)\n\ngoal (1 subgoal):\n 1. well_related_set X (\\<sqsubseteq>) \\<Longrightarrow>\n    pre_well_ordered_set X (\\<sqsubseteq>)", "}"], ["proof (state)\nthis:\n  pre_well_ordered_set X (\\<sqsubseteq>) \\<Longrightarrow>\n  well_related_set X (\\<sqsubseteq>)\n\ngoal (1 subgoal):\n 1. well_related_set X (\\<sqsubseteq>) \\<Longrightarrow>\n    pre_well_ordered_set X (\\<sqsubseteq>)", "assume ?r"], ["proof (state)\nthis:\n  well_related_set X (\\<sqsubseteq>)\n\ngoal (1 subgoal):\n 1. well_related_set X (\\<sqsubseteq>) \\<Longrightarrow>\n    pre_well_ordered_set X (\\<sqsubseteq>)", "then"], ["proof (chain)\npicking this:\n  well_related_set X (\\<sqsubseteq>)", "interpret X: well_related_set X"], ["proof (prove)\nusing this:\n  well_related_set X (\\<sqsubseteq>)\n\ngoal (1 subgoal):\n 1. well_related_set X (\\<sqsubseteq>)", "."], ["proof (state)\ngoal (1 subgoal):\n 1. well_related_set X (\\<sqsubseteq>) \\<Longrightarrow>\n    pre_well_ordered_set X (\\<sqsubseteq>)", "show ?l"], ["proof (prove)\ngoal (1 subgoal):\n 1. pre_well_ordered_set X (\\<sqsubseteq>)", "by unfold_locales"], ["proof (state)\nthis:\n  pre_well_ordered_set X (\\<sqsubseteq>)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma semiattractive_extend:\n  fixes r (infix \"\\<sqsubseteq>\" 50)\n  assumes A: \"semiattractive A (\\<sqsubseteq>)\" and B: \"semiattractive B (\\<sqsubseteq>)\"\n    and AB: \"\\<forall>a \\<in> A. \\<forall>b \\<in> B. a \\<sqsubseteq> b \\<and> \\<not> b \\<sqsubseteq> a\"\n  shows \"semiattractive (A \\<union> B) (\\<sqsubseteq>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. semiattractive (A \\<union> B) (\\<sqsubseteq>)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. semiattractive (A \\<union> B) (\\<sqsubseteq>)", "interpret A: semiattractive A \"(\\<sqsubseteq>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. semiattractive A (\\<sqsubseteq>)", "using A"], ["proof (prove)\nusing this:\n  semiattractive A (\\<sqsubseteq>)\n\ngoal (1 subgoal):\n 1. semiattractive A (\\<sqsubseteq>)", "."], ["proof (state)\ngoal (1 subgoal):\n 1. semiattractive (A \\<union> B) (\\<sqsubseteq>)", "interpret B: semiattractive B \"(\\<sqsubseteq>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. semiattractive B (\\<sqsubseteq>)", "using B"], ["proof (prove)\nusing this:\n  semiattractive B (\\<sqsubseteq>)\n\ngoal (1 subgoal):\n 1. semiattractive B (\\<sqsubseteq>)", "."], ["proof (state)\ngoal (1 subgoal):\n 1. semiattractive (A \\<union> B) (\\<sqsubseteq>)", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. semiattractive (A \\<union> B) (\\<sqsubseteq>)", "fix x y z"], ["proof (state)\ngoal (1 subgoal):\n 1. semiattractive (A \\<union> B) (\\<sqsubseteq>)", "assume yB: \"y \\<in> B\" and zA: \"z \\<in> A\" and yz: \"y \\<sqsubseteq> z\""], ["proof (state)\nthis:\n  y \\<in> B\n  z \\<in> A\n  y \\<sqsubseteq> z\n\ngoal (1 subgoal):\n 1. semiattractive (A \\<union> B) (\\<sqsubseteq>)", "have False"], ["proof (prove)\ngoal (1 subgoal):\n 1. False", "using AB[rule_format, OF zA yB] yz"], ["proof (prove)\nusing this:\n  z \\<sqsubseteq> y \\<and> \\<not> y \\<sqsubseteq> z\n  y \\<sqsubseteq> z\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. semiattractive (A \\<union> B) (\\<sqsubseteq>)", "}"], ["proof (state)\nthis:\n  \\<lbrakk>?y2 \\<in> B; ?z2 \\<in> A; ?y2 \\<sqsubseteq> ?z2\\<rbrakk>\n  \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. semiattractive (A \\<union> B) (\\<sqsubseteq>)", "note * = this"], ["proof (state)\nthis:\n  \\<lbrakk>?y2 \\<in> B; ?z2 \\<in> A; ?y2 \\<sqsubseteq> ?z2\\<rbrakk>\n  \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. semiattractive (A \\<union> B) (\\<sqsubseteq>)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. semiattractive (A \\<union> B) (\\<sqsubseteq>)", "by (auto intro!: semiattractive.intro dest:* AB[rule_format] A.attract B.attract)"], ["proof (state)\nthis:\n  semiattractive (A \\<union> B) (\\<sqsubseteq>)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma pre_well_order_extend:\n  fixes r (infix \"\\<sqsubseteq>\" 50)\n  assumes A: \"pre_well_ordered_set A (\\<sqsubseteq>)\" and B: \"pre_well_ordered_set B (\\<sqsubseteq>)\"\n    and AB: \"\\<forall>a \\<in> A. \\<forall>b \\<in> B. a \\<sqsubseteq> b \\<and> \\<not> b \\<sqsubseteq> a\"\n  shows \"pre_well_ordered_set (A\\<union>B) (\\<sqsubseteq>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pre_well_ordered_set (A \\<union> B) (\\<sqsubseteq>)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. pre_well_ordered_set (A \\<union> B) (\\<sqsubseteq>)", "interpret A: pre_well_ordered_set A \"(\\<sqsubseteq>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pre_well_ordered_set A (\\<sqsubseteq>)", "using A"], ["proof (prove)\nusing this:\n  pre_well_ordered_set A (\\<sqsubseteq>)\n\ngoal (1 subgoal):\n 1. pre_well_ordered_set A (\\<sqsubseteq>)", "."], ["proof (state)\ngoal (1 subgoal):\n 1. pre_well_ordered_set (A \\<union> B) (\\<sqsubseteq>)", "interpret B: pre_well_ordered_set B \"(\\<sqsubseteq>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pre_well_ordered_set B (\\<sqsubseteq>)", "using B"], ["proof (prove)\nusing this:\n  pre_well_ordered_set B (\\<sqsubseteq>)\n\ngoal (1 subgoal):\n 1. pre_well_ordered_set B (\\<sqsubseteq>)", "."], ["proof (state)\ngoal (1 subgoal):\n 1. pre_well_ordered_set (A \\<union> B) (\\<sqsubseteq>)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. pre_well_ordered_set (A \\<union> B) (\\<sqsubseteq>)", "apply (intro pre_well_ordered_set.intro well_related_extend semiattractive_extend)"], ["proof (prove)\ngoal (6 subgoals):\n 1. semiattractive A (\\<sqsubseteq>)\n 2. semiattractive B (\\<sqsubseteq>)\n 3. \\<forall>a\\<in>A.\n       \\<forall>b\\<in>B. a \\<sqsubseteq> b \\<and> \\<not> b \\<sqsubseteq> a\n 4. well_related_set A (\\<sqsubseteq>)\n 5. well_related_set B (\\<sqsubseteq>)\n 6. \\<forall>a\\<in>A. \\<forall>b\\<in>B. a \\<sqsubseteq> b", "apply unfold_locales"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<forall>a\\<in>A.\n       \\<forall>b\\<in>B. a \\<sqsubseteq> b \\<and> \\<not> b \\<sqsubseteq> a\n 2. \\<forall>a\\<in>A. \\<forall>b\\<in>B. a \\<sqsubseteq> b", "by (auto dest: AB[rule_format])"], ["proof (state)\nthis:\n  pre_well_ordered_set (A \\<union> B) (\\<sqsubseteq>)\n\ngoal:\nNo subgoals!", "qed"], ["", "locale well_ordered_set = antisymmetric + well_related_set\nbegin"], ["", "sublocale pre_well_ordered_set"], ["proof (prove)\ngoal (1 subgoal):\n 1. pre_well_ordered_set A (\\<sqsubseteq>)", ".."], ["", "sublocale total_ordered_set"], ["proof (prove)\ngoal (1 subgoal):\n 1. total_ordered_set A (\\<sqsubseteq>)", ".."], ["", "lemma well_ordered_subset: \"B \\<subseteq> A \\<Longrightarrow> well_ordered_set B (\\<sqsubseteq>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. B \\<subseteq> A \\<Longrightarrow> well_ordered_set B (\\<sqsubseteq>)", "using well_related_subset antisymmetric_subset"], ["proof (prove)\nusing this:\n  ?B \\<subseteq> A \\<Longrightarrow> well_related_set ?B (\\<sqsubseteq>)\n  ?B \\<subseteq> A \\<Longrightarrow> antisymmetric ?B (\\<sqsubseteq>)\n\ngoal (1 subgoal):\n 1. B \\<subseteq> A \\<Longrightarrow> well_ordered_set B (\\<sqsubseteq>)", "by (intro well_ordered_set.intro)"], ["", "lemmas connex_axioms = connex_axioms"], ["", "end"], ["", "lemma (in antisymmetric) well_ordered_iff_well_related:\n  assumes XA: \"X \\<subseteq> A\"\n  shows \"well_ordered_set X (\\<sqsubseteq>) \\<longleftrightarrow> well_related_set X (\\<sqsubseteq>)\" (is \"?l \\<longleftrightarrow> ?r\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. well_ordered_set X (\\<sqsubseteq>) = well_related_set X (\\<sqsubseteq>)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. well_ordered_set X (\\<sqsubseteq>) \\<Longrightarrow>\n    well_related_set X (\\<sqsubseteq>)\n 2. well_related_set X (\\<sqsubseteq>) \\<Longrightarrow>\n    well_ordered_set X (\\<sqsubseteq>)", "interpret X: antisymmetric X"], ["proof (prove)\ngoal (1 subgoal):\n 1. antisymmetric X (\\<sqsubseteq>)", "using antisymmetric_subset[OF XA]"], ["proof (prove)\nusing this:\n  antisymmetric X (\\<sqsubseteq>)\n\ngoal (1 subgoal):\n 1. antisymmetric X (\\<sqsubseteq>)", "."], ["proof (state)\ngoal (2 subgoals):\n 1. well_ordered_set X (\\<sqsubseteq>) \\<Longrightarrow>\n    well_related_set X (\\<sqsubseteq>)\n 2. well_related_set X (\\<sqsubseteq>) \\<Longrightarrow>\n    well_ordered_set X (\\<sqsubseteq>)", "{"], ["proof (state)\ngoal (2 subgoals):\n 1. well_ordered_set X (\\<sqsubseteq>) \\<Longrightarrow>\n    well_related_set X (\\<sqsubseteq>)\n 2. well_related_set X (\\<sqsubseteq>) \\<Longrightarrow>\n    well_ordered_set X (\\<sqsubseteq>)", "assume ?l"], ["proof (state)\nthis:\n  well_ordered_set X (\\<sqsubseteq>)\n\ngoal (2 subgoals):\n 1. well_ordered_set X (\\<sqsubseteq>) \\<Longrightarrow>\n    well_related_set X (\\<sqsubseteq>)\n 2. well_related_set X (\\<sqsubseteq>) \\<Longrightarrow>\n    well_ordered_set X (\\<sqsubseteq>)", "then"], ["proof (chain)\npicking this:\n  well_ordered_set X (\\<sqsubseteq>)", "interpret X: well_ordered_set X"], ["proof (prove)\nusing this:\n  well_ordered_set X (\\<sqsubseteq>)\n\ngoal (1 subgoal):\n 1. well_ordered_set X (\\<sqsubseteq>)", "."], ["proof (state)\ngoal (2 subgoals):\n 1. well_ordered_set X (\\<sqsubseteq>) \\<Longrightarrow>\n    well_related_set X (\\<sqsubseteq>)\n 2. well_related_set X (\\<sqsubseteq>) \\<Longrightarrow>\n    well_ordered_set X (\\<sqsubseteq>)", "show ?r"], ["proof (prove)\ngoal (1 subgoal):\n 1. well_related_set X (\\<sqsubseteq>)", "by unfold_locales"], ["proof (state)\nthis:\n  well_related_set X (\\<sqsubseteq>)\n\ngoal (1 subgoal):\n 1. well_related_set X (\\<sqsubseteq>) \\<Longrightarrow>\n    well_ordered_set X (\\<sqsubseteq>)", "}"], ["proof (state)\nthis:\n  well_ordered_set X (\\<sqsubseteq>) \\<Longrightarrow>\n  well_related_set X (\\<sqsubseteq>)\n\ngoal (1 subgoal):\n 1. well_related_set X (\\<sqsubseteq>) \\<Longrightarrow>\n    well_ordered_set X (\\<sqsubseteq>)", "assume ?r"], ["proof (state)\nthis:\n  well_related_set X (\\<sqsubseteq>)\n\ngoal (1 subgoal):\n 1. well_related_set X (\\<sqsubseteq>) \\<Longrightarrow>\n    well_ordered_set X (\\<sqsubseteq>)", "then"], ["proof (chain)\npicking this:\n  well_related_set X (\\<sqsubseteq>)", "interpret X: well_related_set X"], ["proof (prove)\nusing this:\n  well_related_set X (\\<sqsubseteq>)\n\ngoal (1 subgoal):\n 1. well_related_set X (\\<sqsubseteq>)", "."], ["proof (state)\ngoal (1 subgoal):\n 1. well_related_set X (\\<sqsubseteq>) \\<Longrightarrow>\n    well_ordered_set X (\\<sqsubseteq>)", "show ?l"], ["proof (prove)\ngoal (1 subgoal):\n 1. well_ordered_set X (\\<sqsubseteq>)", "by unfold_locales"], ["proof (state)\nthis:\n  well_ordered_set X (\\<sqsubseteq>)\n\ngoal:\nNo subgoals!", "qed"], ["", "context\n  fixes A and less_eq (infix \"\\<sqsubseteq>\" 50)\n  assumes A: \"\\<forall>a \\<in> A. \\<forall>b \\<in> A. a \\<sqsubseteq> b\"\nbegin"], ["", "interpretation well_related_set A \"(\\<sqsubseteq>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. well_related_set A (\\<sqsubseteq>)", "apply unfold_locales"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>X.\n       \\<lbrakk>X \\<subseteq> A; X \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>e.\n                            extreme X (\\<lambda>x y. y \\<sqsubseteq> x) e", "using A"], ["proof (prove)\nusing this:\n  \\<forall>a\\<in>A. \\<forall>b\\<in>A. a \\<sqsubseteq> b\n\ngoal (1 subgoal):\n 1. \\<And>X.\n       \\<lbrakk>X \\<subseteq> A; X \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>e.\n                            extreme X (\\<lambda>x y. y \\<sqsubseteq> x) e", "by blast"], ["", "lemmas trivial_well_related = well_related_set_axioms"], ["", "lemma trivial_pre_well_order: \"pre_well_ordered_set A (\\<sqsubseteq>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pre_well_ordered_set A (\\<sqsubseteq>)", "apply unfold_locales"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<sqsubseteq> y; y \\<sqsubseteq> x; y \\<sqsubseteq> z;\n        x \\<in> A; y \\<in> A; z \\<in> A\\<rbrakk>\n       \\<Longrightarrow> x \\<sqsubseteq> z", "using A"], ["proof (prove)\nusing this:\n  \\<forall>a\\<in>A. \\<forall>b\\<in>A. a \\<sqsubseteq> b\n\ngoal (1 subgoal):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<sqsubseteq> y; y \\<sqsubseteq> x; y \\<sqsubseteq> z;\n        x \\<in> A; y \\<in> A; z \\<in> A\\<rbrakk>\n       \\<Longrightarrow> x \\<sqsubseteq> z", "by blast"], ["", "end"], ["", "context\n  fixes less_eq :: \"'a \\<Rightarrow> 'a \\<Rightarrow> bool\" (infix \"\\<sqsubseteq>\" 50)\nbegin"], ["", "interpretation less_eq_notations"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "lemma well_order_extend:\n  assumes A: \"well_ordered_set A (\\<sqsubseteq>)\" and B: \"well_ordered_set B (\\<sqsubseteq>)\"\n    and ABa: \"\\<forall>a \\<in> A. \\<forall>b \\<in> B. a \\<sqsubseteq> b \\<longrightarrow> b \\<sqsubseteq> a \\<longrightarrow> a = b\"\n    and AB: \"\\<forall>a \\<in> A. \\<forall>b \\<in> B. a \\<sqsubseteq> b\"\n  shows \"well_ordered_set (A\\<union>B) (\\<sqsubseteq>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. well_ordered_set (A \\<union> B) (\\<sqsubseteq>)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. well_ordered_set (A \\<union> B) (\\<sqsubseteq>)", "interpret A: well_ordered_set A \"(\\<sqsubseteq>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. well_ordered_set A (\\<sqsubseteq>)", "using A"], ["proof (prove)\nusing this:\n  well_ordered_set A (\\<sqsubseteq>)\n\ngoal (1 subgoal):\n 1. well_ordered_set A (\\<sqsubseteq>)", "."], ["proof (state)\ngoal (1 subgoal):\n 1. well_ordered_set (A \\<union> B) (\\<sqsubseteq>)", "interpret B: well_ordered_set B \"(\\<sqsubseteq>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. well_ordered_set B (\\<sqsubseteq>)", "using B"], ["proof (prove)\nusing this:\n  well_ordered_set B (\\<sqsubseteq>)\n\ngoal (1 subgoal):\n 1. well_ordered_set B (\\<sqsubseteq>)", "."], ["proof (state)\ngoal (1 subgoal):\n 1. well_ordered_set (A \\<union> B) (\\<sqsubseteq>)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. well_ordered_set (A \\<union> B) (\\<sqsubseteq>)", "apply (intro well_ordered_set.intro antisymmetric_union well_related_extend ABa AB)"], ["proof (prove)\ngoal (4 subgoals):\n 1. antisymmetric A (\\<sqsubseteq>)\n 2. antisymmetric B (\\<sqsubseteq>)\n 3. well_related_set A (\\<sqsubseteq>)\n 4. well_related_set B (\\<sqsubseteq>)", "by unfold_locales"], ["proof (state)\nthis:\n  well_ordered_set (A \\<union> B) (\\<sqsubseteq>)\n\ngoal:\nNo subgoals!", "qed"], ["", "interpretation singleton: antisymmetric \"{a}\" \"(\\<sqsubseteq>)\" for a"], ["proof (prove)\ngoal (1 subgoal):\n 1. antisymmetric {a} (\\<sqsubseteq>)", "apply unfold_locales"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<sqsubseteq> y; y \\<sqsubseteq> x; x \\<in> {a};\n        y \\<in> {a}\\<rbrakk>\n       \\<Longrightarrow> x = y", "by auto"], ["", "lemmas singleton_antisymmetric[intro!] = singleton.antisymmetric_axioms"], ["", "lemma singleton_well_ordered[intro!]: \"a \\<sqsubseteq> a \\<Longrightarrow> well_ordered_set {a} (\\<sqsubseteq>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<sqsubseteq> a \\<Longrightarrow> well_ordered_set {a} (\\<sqsubseteq>)", "apply unfold_locales"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>X.\n       \\<lbrakk>a \\<sqsubseteq> a; X \\<subseteq> {a}; X \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>e.\n                            extreme X (\\<lambda>x y. y \\<sqsubseteq> x) e", "by auto"], ["", "lemma closed_UN_well_ordered:\n  assumes anti: \"antisymmetric (\\<Union> XX) (\\<sqsubseteq>)\"\n    and XX: \"\\<forall>X\\<in>XX. well_ordered_set X (\\<sqsubseteq>) \\<and> (\\<forall>x\\<in>X. \\<forall>y\\<in>\\<Union>XX. \\<not> x \\<sqsubseteq> y \\<longrightarrow> y \\<in> X)\"\n  shows \"well_ordered_set (\\<Union>XX) (\\<sqsubseteq>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. well_ordered_set (\\<Union> XX) (\\<sqsubseteq>)", "apply (intro well_ordered_set.intro closed_UN_well_related anti)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>X\\<in>XX.\n       well_related_set X (\\<sqsubseteq>) \\<and>\n       (\\<forall>x\\<in>X.\n           \\<forall>y\\<in>\\<Union> XX.\n              \\<not> x \\<sqsubseteq> y \\<longrightarrow> y \\<in> X)", "using XX well_ordered_set.axioms"], ["proof (prove)\nusing this:\n  \\<forall>X\\<in>XX.\n     well_ordered_set X (\\<sqsubseteq>) \\<and>\n     (\\<forall>x\\<in>X.\n         \\<forall>y\\<in>\\<Union> XX.\n            \\<not> x \\<sqsubseteq> y \\<longrightarrow> y \\<in> X)\n  well_ordered_set ?A ?less_eq \\<Longrightarrow> antisymmetric ?A ?less_eq\n  well_ordered_set ?A ?less_eq \\<Longrightarrow>\n  well_related_set ?A ?less_eq\n\ngoal (1 subgoal):\n 1. \\<forall>X\\<in>XX.\n       well_related_set X (\\<sqsubseteq>) \\<and>\n       (\\<forall>x\\<in>X.\n           \\<forall>y\\<in>\\<Union> XX.\n              \\<not> x \\<sqsubseteq> y \\<longrightarrow> y \\<in> X)", "by fast"], ["", "end"], ["", "text \\<open>Directed sets:\\<close>"], ["", "definition \"directed A r \\<equiv> \\<forall>x \\<in> A. \\<forall>y \\<in> A. \\<exists>z \\<in> A. r x z \\<and> r y z\""], ["", "lemmas directedI[intro] = directed_def[unfolded atomize_eq, THEN iffD2, rule_format]"], ["", "lemmas directedD = directed_def[unfolded atomize_eq, THEN iffD1, rule_format]"], ["", "context\n  fixes less_eq :: \"'a \\<Rightarrow> 'a \\<Rightarrow> bool\" (infix \"\\<sqsubseteq>\" 50)\nbegin"], ["", "lemma directedE:\n  assumes \"directed A (\\<sqsubseteq>)\" and \"x \\<in> A\" and \"y \\<in> A\"\n    and \"\\<And>z. z \\<in> A \\<Longrightarrow> x \\<sqsubseteq> z \\<Longrightarrow> y \\<sqsubseteq> z \\<Longrightarrow> thesis\"\n  shows \"thesis\""], ["proof (prove)\ngoal (1 subgoal):\n 1. thesis", "using assms"], ["proof (prove)\nusing this:\n  directed A (\\<sqsubseteq>)\n  x \\<in> A\n  y \\<in> A\n  \\<lbrakk>?z \\<in> A; x \\<sqsubseteq> ?z; y \\<sqsubseteq> ?z\\<rbrakk>\n  \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. thesis", "by (auto dest: directedD)"], ["", "lemma directed_empty[simp]: \"directed {} (\\<sqsubseteq>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. directed {} (\\<sqsubseteq>)", "by auto"], ["", "lemma directed_union:\n  assumes dX: \"directed X (\\<sqsubseteq>)\" and dY: \"directed Y (\\<sqsubseteq>)\"\n    and XY: \"\\<forall>x\\<in>X. \\<forall>y\\<in>Y. \\<exists>z \\<in> X \\<union> Y. x \\<sqsubseteq> z \\<and> y \\<sqsubseteq> z\"\n  shows \"directed (X \\<union> Y) (\\<sqsubseteq>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. directed (X \\<union> Y) (\\<sqsubseteq>)", "using directedD[OF dX] directedD[OF dY] XY"], ["proof (prove)\nusing this:\n  \\<lbrakk>?x \\<in> X; ?y \\<in> X\\<rbrakk>\n  \\<Longrightarrow> \\<exists>z\\<in>X.\n                       ?x \\<sqsubseteq> z \\<and> ?y \\<sqsubseteq> z\n  \\<lbrakk>?x \\<in> Y; ?y \\<in> Y\\<rbrakk>\n  \\<Longrightarrow> \\<exists>z\\<in>Y.\n                       ?x \\<sqsubseteq> z \\<and> ?y \\<sqsubseteq> z\n  \\<forall>x\\<in>X.\n     \\<forall>y\\<in>Y.\n        \\<exists>z\\<in>X \\<union> Y.\n           x \\<sqsubseteq> z \\<and> y \\<sqsubseteq> z\n\ngoal (1 subgoal):\n 1. directed (X \\<union> Y) (\\<sqsubseteq>)", "apply (intro directedI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>\\<And>x y.\n                   \\<lbrakk>x \\<in> X; y \\<in> X\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>z\\<in>X.\n  x \\<sqsubseteq> z \\<and> y \\<sqsubseteq> z;\n        \\<And>x y.\n           \\<lbrakk>x \\<in> Y; y \\<in> Y\\<rbrakk>\n           \\<Longrightarrow> \\<exists>z\\<in>Y.\n                                x \\<sqsubseteq> z \\<and> y \\<sqsubseteq> z;\n        \\<forall>x\\<in>X.\n           \\<forall>y\\<in>Y.\n              \\<exists>z\\<in>X \\<union> Y.\n                 x \\<sqsubseteq> z \\<and> y \\<sqsubseteq> z;\n        x \\<in> X \\<union> Y; y \\<in> X \\<union> Y\\<rbrakk>\n       \\<Longrightarrow> \\<exists>z\\<in>X \\<union> Y.\n                            x \\<sqsubseteq> z \\<and> y \\<sqsubseteq> z", "by blast"], ["", "lemma directed_extend:\n  assumes X: \"directed X (\\<sqsubseteq>)\" and Y: \"directed Y (\\<sqsubseteq>)\" and XY: \"\\<forall>x\\<in>X. \\<forall>y\\<in>Y. x \\<sqsubseteq> y\"\n  shows \"directed (X \\<union> Y) (\\<sqsubseteq>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. directed (X \\<union> Y) (\\<sqsubseteq>)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. directed (X \\<union> Y) (\\<sqsubseteq>)", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. directed (X \\<union> Y) (\\<sqsubseteq>)", "fix x y"], ["proof (state)\ngoal (1 subgoal):\n 1. directed (X \\<union> Y) (\\<sqsubseteq>)", "assume xX: \"x \\<in> X\" and yY: \"y \\<in> Y\""], ["proof (state)\nthis:\n  x \\<in> X\n  y \\<in> Y\n\ngoal (1 subgoal):\n 1. directed (X \\<union> Y) (\\<sqsubseteq>)", "let ?g = \"\\<exists>z\\<in>X \\<union> Y. x \\<sqsubseteq> z \\<and> y \\<sqsubseteq> z\""], ["proof (state)\ngoal (1 subgoal):\n 1. directed (X \\<union> Y) (\\<sqsubseteq>)", "from directedD[OF Y yY yY]"], ["proof (chain)\npicking this:\n  \\<exists>z\\<in>Y. y \\<sqsubseteq> z \\<and> y \\<sqsubseteq> z", "obtain z where zY: \"z \\<in> Y\" and yz: \"y \\<sqsubseteq> z\""], ["proof (prove)\nusing this:\n  \\<exists>z\\<in>Y. y \\<sqsubseteq> z \\<and> y \\<sqsubseteq> z\n\ngoal (1 subgoal):\n 1. (\\<And>z.\n        \\<lbrakk>z \\<in> Y; y \\<sqsubseteq> z\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  z \\<in> Y\n  y \\<sqsubseteq> z\n\ngoal (1 subgoal):\n 1. directed (X \\<union> Y) (\\<sqsubseteq>)", "from xX XY zY yz"], ["proof (chain)\npicking this:\n  x \\<in> X\n  \\<forall>x\\<in>X. \\<forall>y\\<in>Y. x \\<sqsubseteq> y\n  z \\<in> Y\n  y \\<sqsubseteq> z", "have ?g"], ["proof (prove)\nusing this:\n  x \\<in> X\n  \\<forall>x\\<in>X. \\<forall>y\\<in>Y. x \\<sqsubseteq> y\n  z \\<in> Y\n  y \\<sqsubseteq> z\n\ngoal (1 subgoal):\n 1. \\<exists>z\\<in>X \\<union> Y. x \\<sqsubseteq> z \\<and> y \\<sqsubseteq> z", "by auto"], ["proof (state)\nthis:\n  \\<exists>z\\<in>X \\<union> Y. x \\<sqsubseteq> z \\<and> y \\<sqsubseteq> z\n\ngoal (1 subgoal):\n 1. directed (X \\<union> Y) (\\<sqsubseteq>)", "}"], ["proof (state)\nthis:\n  \\<lbrakk>?x2 \\<in> X; ?y2 \\<in> Y\\<rbrakk>\n  \\<Longrightarrow> \\<exists>z\\<in>X \\<union> Y.\n                       ?x2 \\<sqsubseteq> z \\<and> ?y2 \\<sqsubseteq> z\n\ngoal (1 subgoal):\n 1. directed (X \\<union> Y) (\\<sqsubseteq>)", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>?x2 \\<in> X; ?y2 \\<in> Y\\<rbrakk>\n  \\<Longrightarrow> \\<exists>z\\<in>X \\<union> Y.\n                       ?x2 \\<sqsubseteq> z \\<and> ?y2 \\<sqsubseteq> z", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>?x2 \\<in> X; ?y2 \\<in> Y\\<rbrakk>\n  \\<Longrightarrow> \\<exists>z\\<in>X \\<union> Y.\n                       ?x2 \\<sqsubseteq> z \\<and> ?y2 \\<sqsubseteq> z\n\ngoal (1 subgoal):\n 1. directed (X \\<union> Y) (\\<sqsubseteq>)", "by (auto intro!: directed_union[OF X Y])"], ["proof (state)\nthis:\n  directed (X \\<union> Y) (\\<sqsubseteq>)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "context connex begin"], ["", "lemma directed: \"directed A (\\<sqsubseteq>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. directed A (\\<sqsubseteq>)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> A; y \\<in> A\\<rbrakk>\n       \\<Longrightarrow> \\<exists>z\\<in>A.\n                            x \\<sqsubseteq> z \\<and> y \\<sqsubseteq> z", "fix x y"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> A; y \\<in> A\\<rbrakk>\n       \\<Longrightarrow> \\<exists>z\\<in>A.\n                            x \\<sqsubseteq> z \\<and> y \\<sqsubseteq> z", "assume x: \"x \\<in> A\" and y: \"y \\<in> A\""], ["proof (state)\nthis:\n  x \\<in> A\n  y \\<in> A\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> A; y \\<in> A\\<rbrakk>\n       \\<Longrightarrow> \\<exists>z\\<in>A.\n                            x \\<sqsubseteq> z \\<and> y \\<sqsubseteq> z", "then"], ["proof (chain)\npicking this:\n  x \\<in> A\n  y \\<in> A", "show \"\\<exists>z\\<in>A. x \\<sqsubseteq> z \\<and> y \\<sqsubseteq> z\""], ["proof (prove)\nusing this:\n  x \\<in> A\n  y \\<in> A\n\ngoal (1 subgoal):\n 1. \\<exists>z\\<in>A. x \\<sqsubseteq> z \\<and> y \\<sqsubseteq> z", "proof (cases rule: comparable_cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. x \\<sqsubseteq> y \\<Longrightarrow>\n    \\<exists>z\\<in>A. x \\<sqsubseteq> z \\<and> y \\<sqsubseteq> z\n 2. y \\<sqsubseteq> x \\<Longrightarrow>\n    \\<exists>z\\<in>A. x \\<sqsubseteq> z \\<and> y \\<sqsubseteq> z", "case le"], ["proof (state)\nthis:\n  x \\<sqsubseteq> y\n\ngoal (2 subgoals):\n 1. x \\<sqsubseteq> y \\<Longrightarrow>\n    \\<exists>z\\<in>A. x \\<sqsubseteq> z \\<and> y \\<sqsubseteq> z\n 2. y \\<sqsubseteq> x \\<Longrightarrow>\n    \\<exists>z\\<in>A. x \\<sqsubseteq> z \\<and> y \\<sqsubseteq> z", "with refl[OF y] y"], ["proof (chain)\npicking this:\n  y \\<sqsubseteq> y\n  y \\<in> A\n  x \\<sqsubseteq> y", "show ?thesis"], ["proof (prove)\nusing this:\n  y \\<sqsubseteq> y\n  y \\<in> A\n  x \\<sqsubseteq> y\n\ngoal (1 subgoal):\n 1. \\<exists>z\\<in>A. x \\<sqsubseteq> z \\<and> y \\<sqsubseteq> z", "by (intro bexI[of _ y], auto)"], ["proof (state)\nthis:\n  \\<exists>z\\<in>A. x \\<sqsubseteq> z \\<and> y \\<sqsubseteq> z\n\ngoal (1 subgoal):\n 1. y \\<sqsubseteq> x \\<Longrightarrow>\n    \\<exists>z\\<in>A. x \\<sqsubseteq> z \\<and> y \\<sqsubseteq> z", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. y \\<sqsubseteq> x \\<Longrightarrow>\n    \\<exists>z\\<in>A. x \\<sqsubseteq> z \\<and> y \\<sqsubseteq> z", "case ge"], ["proof (state)\nthis:\n  y \\<sqsubseteq> x\n\ngoal (1 subgoal):\n 1. y \\<sqsubseteq> x \\<Longrightarrow>\n    \\<exists>z\\<in>A. x \\<sqsubseteq> z \\<and> y \\<sqsubseteq> z", "with refl[OF x] x"], ["proof (chain)\npicking this:\n  x \\<sqsubseteq> x\n  x \\<in> A\n  y \\<sqsubseteq> x", "show ?thesis"], ["proof (prove)\nusing this:\n  x \\<sqsubseteq> x\n  x \\<in> A\n  y \\<sqsubseteq> x\n\ngoal (1 subgoal):\n 1. \\<exists>z\\<in>A. x \\<sqsubseteq> z \\<and> y \\<sqsubseteq> z", "by (intro bexI[of _ x], auto)"], ["proof (state)\nthis:\n  \\<exists>z\\<in>A. x \\<sqsubseteq> z \\<and> y \\<sqsubseteq> z\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>z\\<in>A. x \\<sqsubseteq> z \\<and> y \\<sqsubseteq> z\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "context\n  fixes ir :: \"'i \\<Rightarrow> 'i \\<Rightarrow> bool\" (infix \"\\<preceq>\" 50)\n  fixes r :: \"'a \\<Rightarrow> 'a \\<Rightarrow> bool\" (infix \"\\<sqsubseteq>\" 50)\nbegin"], ["", "lemma monotone_connex_image:\n  assumes mono: \"monotone_on I (\\<preceq>) (\\<sqsubseteq>) f\"\n  assumes connex: \"connex I (\\<preceq>)\"\n  shows \"connex (f ` I) (\\<sqsubseteq>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. connex (f ` I) (\\<sqsubseteq>)", "proof (rule connexI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> f ` I; y \\<in> f ` I\\<rbrakk>\n       \\<Longrightarrow> x \\<sqsubseteq> y \\<or> y \\<sqsubseteq> x", "fix x y"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> f ` I; y \\<in> f ` I\\<rbrakk>\n       \\<Longrightarrow> x \\<sqsubseteq> y \\<or> y \\<sqsubseteq> x", "assume \"x \\<in> f ` I\" and \"y \\<in> f ` I\""], ["proof (state)\nthis:\n  x \\<in> f ` I\n  y \\<in> f ` I\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> f ` I; y \\<in> f ` I\\<rbrakk>\n       \\<Longrightarrow> x \\<sqsubseteq> y \\<or> y \\<sqsubseteq> x", "then"], ["proof (chain)\npicking this:\n  x \\<in> f ` I\n  y \\<in> f ` I", "obtain i j where ij: \"i \\<in> I\" \"j \\<in> I\" and [simp]: \"x = f i\" \"y = f j\""], ["proof (prove)\nusing this:\n  x \\<in> f ` I\n  y \\<in> f ` I\n\ngoal (1 subgoal):\n 1. (\\<And>i j.\n        \\<lbrakk>i \\<in> I; j \\<in> I; x = f i; y = f j\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  i \\<in> I\n  j \\<in> I\n  x = f i\n  y = f j\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> f ` I; y \\<in> f ` I\\<rbrakk>\n       \\<Longrightarrow> x \\<sqsubseteq> y \\<or> y \\<sqsubseteq> x", "from connex ij"], ["proof (chain)\npicking this:\n  connex I (\\<preceq>)\n  i \\<in> I\n  j \\<in> I", "have \"i \\<preceq> j \\<or> j \\<preceq> i\""], ["proof (prove)\nusing this:\n  connex I (\\<preceq>)\n  i \\<in> I\n  j \\<in> I\n\ngoal (1 subgoal):\n 1. i \\<preceq> j \\<or> j \\<preceq> i", "by (auto elim: connexE)"], ["proof (state)\nthis:\n  i \\<preceq> j \\<or> j \\<preceq> i\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> f ` I; y \\<in> f ` I\\<rbrakk>\n       \\<Longrightarrow> x \\<sqsubseteq> y \\<or> y \\<sqsubseteq> x", "with ij mono"], ["proof (chain)\npicking this:\n  i \\<in> I\n  j \\<in> I\n  monotone_on I (\\<preceq>) (\\<sqsubseteq>) f\n  i \\<preceq> j \\<or> j \\<preceq> i", "show \"x \\<sqsubseteq> y \\<or> y \\<sqsubseteq> x\""], ["proof (prove)\nusing this:\n  i \\<in> I\n  j \\<in> I\n  monotone_on I (\\<preceq>) (\\<sqsubseteq>) f\n  i \\<preceq> j \\<or> j \\<preceq> i\n\ngoal (1 subgoal):\n 1. x \\<sqsubseteq> y \\<or> y \\<sqsubseteq> x", "by (elim disjE, auto dest: monotone_onD)"], ["proof (state)\nthis:\n  x \\<sqsubseteq> y \\<or> y \\<sqsubseteq> x\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma monotone_directed_image:\n  assumes mono: \"monotone_on I (\\<preceq>) (\\<sqsubseteq>) f\"\n  assumes dir: \"directed I (\\<preceq>)\" shows \"directed (f ` I) (\\<sqsubseteq>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. directed (f ` I) (\\<sqsubseteq>)", "proof (rule directedI, safe)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y xa xb.\n       \\<lbrakk>xa \\<in> I; xb \\<in> I\\<rbrakk>\n       \\<Longrightarrow> \\<exists>z\\<in>f ` I.\n                            f xa \\<sqsubseteq> z \\<and> f xb \\<sqsubseteq> z", "fix x y"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y xa xb.\n       \\<lbrakk>xa \\<in> I; xb \\<in> I\\<rbrakk>\n       \\<Longrightarrow> \\<exists>z\\<in>f ` I.\n                            f xa \\<sqsubseteq> z \\<and> f xb \\<sqsubseteq> z", "assume x: \"x \\<in> I\" and y: \"y \\<in> I\""], ["proof (state)\nthis:\n  x \\<in> I\n  y \\<in> I\n\ngoal (1 subgoal):\n 1. \\<And>x y xa xb.\n       \\<lbrakk>xa \\<in> I; xb \\<in> I\\<rbrakk>\n       \\<Longrightarrow> \\<exists>z\\<in>f ` I.\n                            f xa \\<sqsubseteq> z \\<and> f xb \\<sqsubseteq> z", "with dir"], ["proof (chain)\npicking this:\n  directed I (\\<preceq>)\n  x \\<in> I\n  y \\<in> I", "obtain z where z: \"z \\<in> I\" and \"x \\<preceq> z\" and \"y \\<preceq> z\""], ["proof (prove)\nusing this:\n  directed I (\\<preceq>)\n  x \\<in> I\n  y \\<in> I\n\ngoal (1 subgoal):\n 1. (\\<And>z.\n        \\<lbrakk>z \\<in> I; x \\<preceq> z; y \\<preceq> z\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto elim: directedE)"], ["proof (state)\nthis:\n  z \\<in> I\n  x \\<preceq> z\n  y \\<preceq> z\n\ngoal (1 subgoal):\n 1. \\<And>x y xa xb.\n       \\<lbrakk>xa \\<in> I; xb \\<in> I\\<rbrakk>\n       \\<Longrightarrow> \\<exists>z\\<in>f ` I.\n                            f xa \\<sqsubseteq> z \\<and> f xb \\<sqsubseteq> z", "with mono x y"], ["proof (chain)\npicking this:\n  monotone_on I (\\<preceq>) (\\<sqsubseteq>) f\n  x \\<in> I\n  y \\<in> I\n  z \\<in> I\n  x \\<preceq> z\n  y \\<preceq> z", "have \"f x \\<sqsubseteq> f z\" and \"f y \\<sqsubseteq> f z\""], ["proof (prove)\nusing this:\n  monotone_on I (\\<preceq>) (\\<sqsubseteq>) f\n  x \\<in> I\n  y \\<in> I\n  z \\<in> I\n  x \\<preceq> z\n  y \\<preceq> z\n\ngoal (1 subgoal):\n 1. f x \\<sqsubseteq> f z &&& f y \\<sqsubseteq> f z", "by (auto dest: monotone_onD)"], ["proof (state)\nthis:\n  f x \\<sqsubseteq> f z\n  f y \\<sqsubseteq> f z\n\ngoal (1 subgoal):\n 1. \\<And>x y xa xb.\n       \\<lbrakk>xa \\<in> I; xb \\<in> I\\<rbrakk>\n       \\<Longrightarrow> \\<exists>z\\<in>f ` I.\n                            f xa \\<sqsubseteq> z \\<and> f xb \\<sqsubseteq> z", "with z"], ["proof (chain)\npicking this:\n  z \\<in> I\n  f x \\<sqsubseteq> f z\n  f y \\<sqsubseteq> f z", "show \"\\<exists>fz \\<in> f ` I. f x \\<sqsubseteq> fz \\<and> f y \\<sqsubseteq> fz\""], ["proof (prove)\nusing this:\n  z \\<in> I\n  f x \\<sqsubseteq> f z\n  f y \\<sqsubseteq> f z\n\ngoal (1 subgoal):\n 1. \\<exists>fz\\<in>f ` I. f x \\<sqsubseteq> fz \\<and> f y \\<sqsubseteq> fz", "by auto"], ["proof (state)\nthis:\n  \\<exists>fz\\<in>f ` I. f x \\<sqsubseteq> fz \\<and> f y \\<sqsubseteq> fz\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "subsection \\<open>Order Pairs\\<close>"], ["", "locale compatible = related_set + related_set A \"(\\<sqsubset>)\" for less (infix \"\\<sqsubset>\" 50) +\n  assumes compat_right[trans]: \"x \\<sqsubseteq> y \\<Longrightarrow> y \\<sqsubset> z \\<Longrightarrow> x \\<in> A \\<Longrightarrow> y \\<in> A \\<Longrightarrow> z \\<in> A \\<Longrightarrow> x \\<sqsubset> z\"\n  assumes compat_left[trans]: \"x \\<sqsubset> y \\<Longrightarrow> y \\<sqsubseteq> z \\<Longrightarrow> x \\<in> A \\<Longrightarrow> y \\<in> A \\<Longrightarrow> z \\<in> A \\<Longrightarrow> x \\<sqsubset> z\""], ["", "locale compatible_ordering = reflexive + irreflexive + compatible +\n  assumes strict_implies_weak: \"x \\<sqsubset> y \\<Longrightarrow> x \\<in> A \\<Longrightarrow> y \\<in> A \\<Longrightarrow> x \\<sqsubseteq> y\"\nbegin"], ["", "text \\<open>The strict part is necessarily transitive.\\<close>"], ["", "text \\<open>The following sequence of declarations are in order to obtain fact names in a manner\nsimilar to the Isabelle/HOL facts of orders.\\<close>"], ["", "sublocale strict: transitive A \"(\\<sqsubset>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. transitive A (\\<sqsubset>)", "using compat_right[OF strict_implies_weak]"], ["proof (prove)\nusing this:\n  \\<lbrakk>?x \\<sqsubset> ?y; ?x \\<in> A; ?y \\<in> A; ?y \\<sqsubset> ?z;\n   ?x \\<in> A; ?y \\<in> A; ?z \\<in> A\\<rbrakk>\n  \\<Longrightarrow> ?x \\<sqsubset> ?z\n\ngoal (1 subgoal):\n 1. transitive A (\\<sqsubset>)", "by unfold_locales"], ["", "sublocale strict_ordered_set A \"(\\<sqsubset>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. strict_ordered_set A (\\<sqsubset>)", ".."], ["", "thm strict.trans asym irrefl"], ["", "lemma strict_implies_not_weak: \"x \\<sqsubset> y \\<Longrightarrow> x \\<in> A \\<Longrightarrow> y \\<in> A \\<Longrightarrow> \\<not> y \\<sqsubseteq> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<sqsubset> y; x \\<in> A; y \\<in> A\\<rbrakk>\n    \\<Longrightarrow> \\<not> y \\<sqsubseteq> x", "using irrefl compat_left"], ["proof (prove)\nusing this:\n  ?x \\<in> A \\<Longrightarrow> \\<not> ?x \\<sqsubset> ?x\n  \\<lbrakk>?x \\<sqsubset> ?y; ?y \\<sqsubseteq> ?z; ?x \\<in> A; ?y \\<in> A;\n   ?z \\<in> A\\<rbrakk>\n  \\<Longrightarrow> ?x \\<sqsubset> ?z\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<sqsubset> y; x \\<in> A; y \\<in> A\\<rbrakk>\n    \\<Longrightarrow> \\<not> y \\<sqsubseteq> x", "by blast"], ["", "end"], ["", "context transitive begin"], ["", "interpretation less_eq_notations"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "lemma asym_trans[trans]:\n  shows \"x \\<sqsubset> y \\<Longrightarrow> y \\<sqsubseteq> z \\<Longrightarrow> x \\<in> A \\<Longrightarrow> y \\<in> A \\<Longrightarrow> z \\<in> A \\<Longrightarrow> x \\<sqsubset> z\"\n    and \"x \\<sqsubseteq> y \\<Longrightarrow> y \\<sqsubset> z \\<Longrightarrow> x \\<in> A \\<Longrightarrow> y \\<in> A \\<Longrightarrow> z \\<in> A \\<Longrightarrow> x \\<sqsubset> z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lbrakk>x \\<sqsubset> y; y \\<sqsubseteq> z; x \\<in> A; y \\<in> A;\n      z \\<in> A\\<rbrakk>\n     \\<Longrightarrow> x \\<sqsubset> z) &&&\n    (\\<lbrakk>x \\<sqsubseteq> y; y \\<sqsubset> z; x \\<in> A; y \\<in> A;\n      z \\<in> A\\<rbrakk>\n     \\<Longrightarrow> x \\<sqsubset> z)", "by (auto 0 3 dest: trans)"], ["", "end"], ["", "locale attractive_ordering = compatible_ordering + attractive"], ["", "locale pseudo_ordering = compatible_ordering + pseudo_ordered_set\nbegin"], ["", "sublocale attractive_ordering"], ["proof (prove)\ngoal (1 subgoal):\n 1. attractive_ordering A (\\<sqsubseteq>) (\\<sqsubset>)", ".."], ["", "end"], ["", "locale quasi_ordering = compatible_ordering + quasi_ordered_set\nbegin"], ["", "sublocale attractive_ordering"], ["proof (prove)\ngoal (1 subgoal):\n 1. attractive_ordering A (\\<sqsubseteq>) (\\<sqsubset>)", ".."], ["", "end"], ["", "locale partial_ordering = compatible_ordering + partially_ordered_set\nbegin"], ["", "sublocale pseudo_ordering + quasi_ordering"], ["proof (prove)\ngoal (1 subgoal):\n 1. pseudo_ordering A (\\<sqsubseteq>) (\\<sqsubset>) &&&\n    quasi_ordering A (\\<sqsubseteq>) (\\<sqsubset>)", ".."], ["", "end"], ["", "locale well_founded_ordering = quasi_ordering + well_founded"], ["", "locale total_ordering = compatible_ordering + total_ordered_set\nbegin"], ["", "sublocale partial_ordering"], ["proof (prove)\ngoal (1 subgoal):\n 1. partial_ordering A (\\<sqsubseteq>) (\\<sqsubset>)", ".."], ["", "end"], ["", "locale strict_total_ordering = partial_ordering + semiconnex A \"(\\<sqsubset>)\"\nbegin"], ["", "sublocale semiconnex_irreflexive"], ["proof (prove)\ngoal (1 subgoal):\n 1. semiconnex_irreflexive A (\\<sqsubset>)", ".."], ["", "sublocale connex"], ["proof (prove)\ngoal (1 subgoal):\n 1. connex A (\\<sqsubseteq>)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> A; y \\<in> A\\<rbrakk>\n       \\<Longrightarrow> x \\<sqsubseteq> y \\<or> y \\<sqsubseteq> x", "fix x y"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> A; y \\<in> A\\<rbrakk>\n       \\<Longrightarrow> x \\<sqsubseteq> y \\<or> y \\<sqsubseteq> x", "assume x: \"x \\<in> A\" and y: \"y \\<in> A\""], ["proof (state)\nthis:\n  x \\<in> A\n  y \\<in> A\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> A; y \\<in> A\\<rbrakk>\n       \\<Longrightarrow> x \\<sqsubseteq> y \\<or> y \\<sqsubseteq> x", "then"], ["proof (chain)\npicking this:\n  x \\<in> A\n  y \\<in> A", "show \"x \\<sqsubseteq> y \\<or> y \\<sqsubseteq> x\""], ["proof (prove)\nusing this:\n  x \\<in> A\n  y \\<in> A\n\ngoal (1 subgoal):\n 1. x \\<sqsubseteq> y \\<or> y \\<sqsubseteq> x", "apply (cases rule: cases[OF x y])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>x \\<in> A; y \\<in> A; x \\<sqsubset> y\\<rbrakk>\n    \\<Longrightarrow> x \\<sqsubseteq> y \\<or> y \\<sqsubseteq> x\n 2. \\<lbrakk>x \\<in> A; y \\<in> A; x = y\\<rbrakk>\n    \\<Longrightarrow> x \\<sqsubseteq> y \\<or> y \\<sqsubseteq> x\n 3. \\<lbrakk>x \\<in> A; y \\<in> A; y \\<sqsubset> x\\<rbrakk>\n    \\<Longrightarrow> x \\<sqsubseteq> y \\<or> y \\<sqsubseteq> x", "by (auto dest: strict_implies_weak)"], ["proof (state)\nthis:\n  x \\<sqsubseteq> y \\<or> y \\<sqsubseteq> x\n\ngoal:\nNo subgoals!", "qed"], ["", "sublocale total_ordering"], ["proof (prove)\ngoal (1 subgoal):\n 1. total_ordering A (\\<sqsubseteq>) (\\<sqsubset>)", ".."], ["", "(*\nsublocale old: ordering \"(\\<sqsubseteq>)\" \"(\\<sqsubset>)\"\nproof-\n  have \"a \\<sqsubseteq> b \\<Longrightarrow> a \\<noteq> b \\<Longrightarrow> a \\<sqsubset> b\" for a b\n    by (cases a b rule: cases, auto dest: strict_implies_weak)\n  then show \"ordering (\\<sqsubseteq>) (\\<sqsubset>)\"\n    by (unfold_locales, auto dest:strict_implies_weak trans)\nqed\n*)"], ["", "lemma not_weak[simp]:\n  assumes \"x \\<in> A\" and \"y \\<in> A\" shows \"\\<not> x \\<sqsubseteq> y \\<longleftrightarrow> y \\<sqsubset> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<not> x \\<sqsubseteq> y) = (y \\<sqsubset> x)", "using assms"], ["proof (prove)\nusing this:\n  x \\<in> A\n  y \\<in> A\n\ngoal (1 subgoal):\n 1. (\\<not> x \\<sqsubseteq> y) = (y \\<sqsubset> x)", "by (cases rule:cases, auto simp: strict_implies_not_weak dest: strict_implies_weak)"], ["", "lemma not_strict[simp]: \"x \\<in> A \\<Longrightarrow> y \\<in> A \\<Longrightarrow> \\<not> x \\<sqsubset> y \\<longleftrightarrow> y \\<sqsubseteq> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<in> A; y \\<in> A\\<rbrakk>\n    \\<Longrightarrow> (\\<not> x \\<sqsubset> y) = (y \\<sqsubseteq> x)", "using not_weak"], ["proof (prove)\nusing this:\n  \\<lbrakk>?x \\<in> A; ?y \\<in> A\\<rbrakk>\n  \\<Longrightarrow> (\\<not> ?x \\<sqsubseteq> ?y) = (?y \\<sqsubset> ?x)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<in> A; y \\<in> A\\<rbrakk>\n    \\<Longrightarrow> (\\<not> x \\<sqsubset> y) = (y \\<sqsubseteq> x)", "by blast"], ["", "end"], ["", "subsection \\<open>Relating to Classes\\<close>"], ["", "text \\<open>In Isabelle 2020, we should declare sublocales in class before declaring dual\nsublocales, since otherwise facts would be prefixed by ``dual.dual.''\\<close>"], ["", "context ord begin"], ["", "abbreviation least where \"least X \\<equiv> extreme X (\\<lambda>x y. y \\<le> x)\""], ["", "abbreviation greatest where \"greatest X \\<equiv> extreme X (\\<le>)\""], ["", "abbreviation supremum where \"supremum X \\<equiv> least (Collect (bound X (\\<le>)))\""], ["", "abbreviation infimum where \"infimum X \\<equiv> greatest (Collect (bound X (\\<lambda>x y. y \\<le> x)))\""], ["", "lemma Least_eq_The_least: \"Least P = The (least {x. P x})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Least P = The (least {x. P x})", "by (auto simp: Least_def extreme_def[unfolded atomize_eq, THEN ext])"], ["", "lemma Greatest_eq_The_greatest: \"Greatest P = The (greatest {x. P x})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Greatest P = The (greatest {x. P x})", "by (auto simp: Greatest_def extreme_def[unfolded atomize_eq, THEN ext])"], ["", "end"], ["", "lemma Ball_UNIV[simp]: \"Ball UNIV = All\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Ball UNIV = All", "by auto"], ["", "lemma Bex_UNIV[simp]: \"Bex UNIV = Ex\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Bex UNIV = Ex", "by auto"], ["", "class compat = ord + assumes \"compatible_ordering UNIV (\\<le>) (<)\"\nbegin"], ["", "sublocale order: compatible_ordering UNIV\n  rewrites \"\\<And>x. x \\<in> UNIV \\<equiv> True\"\n    and \"\\<And>X. X \\<subseteq> UNIV \\<equiv> True\"\n    and \"\\<And>r. r \\<restriction> UNIV \\<equiv> r\"\n    and \"\\<And>P. True \\<and> P \\<equiv> P\"\n    and \"Ball UNIV \\<equiv> All\"\n    and \"Bex UNIV \\<equiv> Ex\"\n    and \"sympartp (\\<le>)\\<^sup>- \\<equiv> sympartp (\\<le>)\"\n    and \"\\<And>P1. (True \\<Longrightarrow> PROP P1) \\<equiv> PROP P1\"\n    and \"\\<And>P1. (True \\<Longrightarrow> P1) \\<equiv> Trueprop P1\"\n    and \"\\<And>P1 P2. (True \\<Longrightarrow> PROP P1 \\<Longrightarrow> PROP P2) \\<equiv> (PROP P1 \\<Longrightarrow> PROP P2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((compatible_ordering UNIV (\\<le>) (<) &&&\n      (\\<And>x. x \\<in> UNIV \\<equiv> True)) &&&\n     (\\<And>X. X \\<subseteq> UNIV \\<equiv> True) &&&\n     (\\<And>r. r \\<restriction> UNIV \\<equiv> r) &&&\n     (\\<And>P. True \\<and> P \\<equiv> P)) &&&\n    ((Ball UNIV \\<equiv> All) &&&\n     (Bex UNIV \\<equiv> Ex) &&&\n     sympartp (\\<lambda>x y. y \\<le> x) \\<equiv> sympartp (\\<le>)) &&&\n    (\\<And>P1. (True \\<Longrightarrow> PROP P1) \\<equiv> PROP P1) &&&\n    (\\<And>P1. (True \\<Longrightarrow> P1) \\<equiv> P1) &&&\n    (\\<And>P1 P2.\n        (\\<lbrakk>True; PROP P1\\<rbrakk> \\<Longrightarrow> PROP P2) \\<equiv>\n        (PROP P1 \\<Longrightarrow> PROP P2))", "using compat_axioms"], ["proof (prove)\nusing this:\n  class.compat (\\<le>) (<)\n\ngoal (1 subgoal):\n 1. ((compatible_ordering UNIV (\\<le>) (<) &&&\n      (\\<And>x. x \\<in> UNIV \\<equiv> True)) &&&\n     (\\<And>X. X \\<subseteq> UNIV \\<equiv> True) &&&\n     (\\<And>r. r \\<restriction> UNIV \\<equiv> r) &&&\n     (\\<And>P. True \\<and> P \\<equiv> P)) &&&\n    ((Ball UNIV \\<equiv> All) &&&\n     (Bex UNIV \\<equiv> Ex) &&&\n     sympartp (\\<lambda>x y. y \\<le> x) \\<equiv> sympartp (\\<le>)) &&&\n    (\\<And>P1. (True \\<Longrightarrow> PROP P1) \\<equiv> PROP P1) &&&\n    (\\<And>P1. (True \\<Longrightarrow> P1) \\<equiv> P1) &&&\n    (\\<And>P1 P2.\n        (\\<lbrakk>True; PROP P1\\<rbrakk> \\<Longrightarrow> PROP P2) \\<equiv>\n        (PROP P1 \\<Longrightarrow> PROP P2))", "unfolding class.compat_def"], ["proof (prove)\nusing this:\n  compatible_ordering UNIV (\\<le>) (<)\n\ngoal (1 subgoal):\n 1. ((compatible_ordering UNIV (\\<le>) (<) &&&\n      (\\<And>x. x \\<in> UNIV \\<equiv> True)) &&&\n     (\\<And>X. X \\<subseteq> UNIV \\<equiv> True) &&&\n     (\\<And>r. r \\<restriction> UNIV \\<equiv> r) &&&\n     (\\<And>P. True \\<and> P \\<equiv> P)) &&&\n    ((Ball UNIV \\<equiv> All) &&&\n     (Bex UNIV \\<equiv> Ex) &&&\n     sympartp (\\<lambda>x y. y \\<le> x) \\<equiv> sympartp (\\<le>)) &&&\n    (\\<And>P1. (True \\<Longrightarrow> PROP P1) \\<equiv> PROP P1) &&&\n    (\\<And>P1. (True \\<Longrightarrow> P1) \\<equiv> P1) &&&\n    (\\<And>P1 P2.\n        (\\<lbrakk>True; PROP P1\\<rbrakk> \\<Longrightarrow> PROP P2) \\<equiv>\n        (PROP P1 \\<Longrightarrow> PROP P2))", "by (auto 0 4 simp:atomize_eq)"], ["", "end"], ["", "text \\<open>We should have imported locale-based facts in classes, e.g.:\\<close>"], ["", "thm order.trans order.strict.trans order.refl order.irrefl order.asym order.extreme_bound_singleton"], ["", "class attractive_order = ord + assumes \"attractive_ordering UNIV (\\<le>) (<)\"\nbegin"], ["", "text \\<open>We need to declare subclasses before sublocales in order to preserve facts for superclasses.\\<close>"], ["", "interpretation attractive_ordering UNIV"], ["proof (prove)\ngoal (1 subgoal):\n 1. attractive_ordering UNIV (\\<le>) (<)", "using attractive_order_axioms"], ["proof (prove)\nusing this:\n  class.attractive_order (\\<le>) (<)\n\ngoal (1 subgoal):\n 1. attractive_ordering UNIV (\\<le>) (<)", "unfolding class.attractive_order_def"], ["proof (prove)\nusing this:\n  attractive_ordering UNIV (\\<le>) (<)\n\ngoal (1 subgoal):\n 1. attractive_ordering UNIV (\\<le>) (<)", "."], ["", "subclass compat"], ["proof (prove)\ngoal (1 subgoal):\n 1. class.compat (\\<le>) (<)", ".."], ["", "sublocale order: attractive_ordering UNIV\n  rewrites \"\\<And>x. x \\<in> UNIV \\<equiv> True\"\n    and \"\\<And>X. X \\<subseteq> UNIV \\<equiv> True\"\n    and \"\\<And>r. r \\<restriction> UNIV \\<equiv> r\"\n    and \"\\<And>P. True \\<and> P \\<equiv> P\"\n    and \"Ball UNIV \\<equiv> All\"\n    and \"Bex UNIV \\<equiv> Ex\"\n    and \"sympartp (\\<le>)\\<^sup>- \\<equiv> sympartp (\\<le>)\"\n    and \"\\<And>P1. (True \\<Longrightarrow> PROP P1) \\<equiv> PROP P1\"\n    and \"\\<And>P1. (True \\<Longrightarrow> P1) \\<equiv> Trueprop P1\"\n    and \"\\<And>P1 P2. (True \\<Longrightarrow> PROP P1 \\<Longrightarrow> PROP P2) \\<equiv> (PROP P1 \\<Longrightarrow> PROP P2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((attractive_ordering UNIV (\\<le>) (<) &&&\n      (\\<And>x. x \\<in> UNIV \\<equiv> True)) &&&\n     (\\<And>X. X \\<subseteq> UNIV \\<equiv> True) &&&\n     (\\<And>r. r \\<restriction> UNIV \\<equiv> r) &&&\n     (\\<And>P. True \\<and> P \\<equiv> P)) &&&\n    ((Ball UNIV \\<equiv> All) &&&\n     (Bex UNIV \\<equiv> Ex) &&&\n     sympartp (\\<lambda>x y. y \\<le> x) \\<equiv> sympartp (\\<le>)) &&&\n    (\\<And>P1. (True \\<Longrightarrow> PROP P1) \\<equiv> PROP P1) &&&\n    (\\<And>P1. (True \\<Longrightarrow> P1) \\<equiv> P1) &&&\n    (\\<And>P1 P2.\n        (\\<lbrakk>True; PROP P1\\<rbrakk> \\<Longrightarrow> PROP P2) \\<equiv>\n        (PROP P1 \\<Longrightarrow> PROP P2))", "apply unfold_locales"], ["proof (prove)\ngoal (10 subgoals):\n 1. \\<And>x. x \\<in> UNIV \\<equiv> True\n 2. \\<And>X. X \\<subseteq> UNIV \\<equiv> True\n 3. \\<And>r. r \\<restriction> UNIV \\<equiv> r\n 4. \\<And>P. True \\<and> P \\<equiv> P\n 5. Ball UNIV \\<equiv> All\n 6. Bex UNIV \\<equiv> Ex\n 7. sympartp (\\<lambda>x y. y \\<le> x) \\<equiv> sympartp (\\<le>)\n 8. \\<And>P1. (True \\<Longrightarrow> PROP P1) \\<equiv> PROP P1\n 9. \\<And>P1. (True \\<Longrightarrow> P1) \\<equiv> P1\n 10. \\<And>P1 P2.\n        (\\<lbrakk>True; PROP P1\\<rbrakk> \\<Longrightarrow> PROP P2) \\<equiv>\n        (PROP P1 \\<Longrightarrow> PROP P2)", "by (auto simp:atomize_eq)"], ["", "end"], ["", "thm order.extreme_bound_quasi_const"], ["", "class psorder = ord + assumes \"pseudo_ordering UNIV (\\<le>) (<)\"\nbegin"], ["", "interpretation pseudo_ordering UNIV"], ["proof (prove)\ngoal (1 subgoal):\n 1. pseudo_ordering UNIV (\\<le>) (<)", "using psorder_axioms"], ["proof (prove)\nusing this:\n  class.psorder (\\<le>) (<)\n\ngoal (1 subgoal):\n 1. pseudo_ordering UNIV (\\<le>) (<)", "unfolding class.psorder_def"], ["proof (prove)\nusing this:\n  pseudo_ordering UNIV (\\<le>) (<)\n\ngoal (1 subgoal):\n 1. pseudo_ordering UNIV (\\<le>) (<)", "."], ["", "subclass attractive_order"], ["proof (prove)\ngoal (1 subgoal):\n 1. class.attractive_order (\\<le>) (<)", ".."], ["", "sublocale order: pseudo_ordering UNIV\n  rewrites \"\\<And>x. x \\<in> UNIV \\<equiv> True\"\n    and \"\\<And>X. X \\<subseteq> UNIV \\<equiv> True\"\n    and \"\\<And>r. r \\<restriction> UNIV \\<equiv> r\"\n    and \"\\<And>P. True \\<and> P \\<equiv> P\"\n    and \"Ball UNIV \\<equiv> All\"\n    and \"Bex UNIV \\<equiv> Ex\"\n    and \"sympartp (\\<le>)\\<^sup>- \\<equiv> sympartp (\\<le>)\"\n    and \"\\<And>P1. (True \\<Longrightarrow> PROP P1) \\<equiv> PROP P1\"\n    and \"\\<And>P1. (True \\<Longrightarrow> P1) \\<equiv> Trueprop P1\"\n    and \"\\<And>P1 P2. (True \\<Longrightarrow> PROP P1 \\<Longrightarrow> PROP P2) \\<equiv> (PROP P1 \\<Longrightarrow> PROP P2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((pseudo_ordering UNIV (\\<le>) (<) &&&\n      (\\<And>x. x \\<in> UNIV \\<equiv> True)) &&&\n     (\\<And>X. X \\<subseteq> UNIV \\<equiv> True) &&&\n     (\\<And>r. r \\<restriction> UNIV \\<equiv> r) &&&\n     (\\<And>P. True \\<and> P \\<equiv> P)) &&&\n    ((Ball UNIV \\<equiv> All) &&&\n     (Bex UNIV \\<equiv> Ex) &&&\n     sympartp (\\<lambda>x y. y \\<le> x) \\<equiv> sympartp (\\<le>)) &&&\n    (\\<And>P1. (True \\<Longrightarrow> PROP P1) \\<equiv> PROP P1) &&&\n    (\\<And>P1. (True \\<Longrightarrow> P1) \\<equiv> P1) &&&\n    (\\<And>P1 P2.\n        (\\<lbrakk>True; PROP P1\\<rbrakk> \\<Longrightarrow> PROP P2) \\<equiv>\n        (PROP P1 \\<Longrightarrow> PROP P2))", "apply unfold_locales"], ["proof (prove)\ngoal (10 subgoals):\n 1. \\<And>x. x \\<in> UNIV \\<equiv> True\n 2. \\<And>X. X \\<subseteq> UNIV \\<equiv> True\n 3. \\<And>r. r \\<restriction> UNIV \\<equiv> r\n 4. \\<And>P. True \\<and> P \\<equiv> P\n 5. Ball UNIV \\<equiv> All\n 6. Bex UNIV \\<equiv> Ex\n 7. sympartp (\\<lambda>x y. y \\<le> x) \\<equiv> sympartp (\\<le>)\n 8. \\<And>P1. (True \\<Longrightarrow> PROP P1) \\<equiv> PROP P1\n 9. \\<And>P1. (True \\<Longrightarrow> P1) \\<equiv> P1\n 10. \\<And>P1 P2.\n        (\\<lbrakk>True; PROP P1\\<rbrakk> \\<Longrightarrow> PROP P2) \\<equiv>\n        (PROP P1 \\<Longrightarrow> PROP P2)", "by (auto simp:atomize_eq)"], ["", "end"], ["", "class qorder = ord + assumes \"quasi_ordering UNIV (\\<le>) (<)\"\nbegin"], ["", "interpretation quasi_ordering UNIV"], ["proof (prove)\ngoal (1 subgoal):\n 1. quasi_ordering UNIV (\\<le>) (<)", "using qorder_axioms"], ["proof (prove)\nusing this:\n  class.qorder (\\<le>) (<)\n\ngoal (1 subgoal):\n 1. quasi_ordering UNIV (\\<le>) (<)", "unfolding class.qorder_def"], ["proof (prove)\nusing this:\n  quasi_ordering UNIV (\\<le>) (<)\n\ngoal (1 subgoal):\n 1. quasi_ordering UNIV (\\<le>) (<)", "."], ["", "subclass attractive_order"], ["proof (prove)\ngoal (1 subgoal):\n 1. class.attractive_order (\\<le>) (<)", ".."], ["", "sublocale order: quasi_ordering UNIV\n  rewrites \"\\<And>x. x \\<in> UNIV \\<equiv> True\"\n    and \"\\<And>X. X \\<subseteq> UNIV \\<equiv> True\"\n    and \"\\<And>r. r \\<restriction> UNIV \\<equiv> r\"\n    and \"\\<And>P. True \\<and> P \\<equiv> P\"\n    and \"Ball UNIV \\<equiv> All\"\n    and \"Bex UNIV \\<equiv> Ex\"\n    and \"sympartp (\\<le>)\\<^sup>- \\<equiv> sympartp (\\<le>)\"\n    and \"\\<And>P1. (True \\<Longrightarrow> PROP P1) \\<equiv> PROP P1\"\n    and \"\\<And>P1. (True \\<Longrightarrow> P1) \\<equiv> Trueprop P1\"\n    and \"\\<And>P1 P2. (True \\<Longrightarrow> PROP P1 \\<Longrightarrow> PROP P2) \\<equiv> (PROP P1 \\<Longrightarrow> PROP P2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((quasi_ordering UNIV (\\<le>) (<) &&&\n      (\\<And>x. x \\<in> UNIV \\<equiv> True)) &&&\n     (\\<And>X. X \\<subseteq> UNIV \\<equiv> True) &&&\n     (\\<And>r. r \\<restriction> UNIV \\<equiv> r) &&&\n     (\\<And>P. True \\<and> P \\<equiv> P)) &&&\n    ((Ball UNIV \\<equiv> All) &&&\n     (Bex UNIV \\<equiv> Ex) &&&\n     sympartp (\\<lambda>x y. y \\<le> x) \\<equiv> sympartp (\\<le>)) &&&\n    (\\<And>P1. (True \\<Longrightarrow> PROP P1) \\<equiv> PROP P1) &&&\n    (\\<And>P1. (True \\<Longrightarrow> P1) \\<equiv> P1) &&&\n    (\\<And>P1 P2.\n        (\\<lbrakk>True; PROP P1\\<rbrakk> \\<Longrightarrow> PROP P2) \\<equiv>\n        (PROP P1 \\<Longrightarrow> PROP P2))", "apply unfold_locales"], ["proof (prove)\ngoal (10 subgoals):\n 1. \\<And>x. x \\<in> UNIV \\<equiv> True\n 2. \\<And>X. X \\<subseteq> UNIV \\<equiv> True\n 3. \\<And>r. r \\<restriction> UNIV \\<equiv> r\n 4. \\<And>P. True \\<and> P \\<equiv> P\n 5. Ball UNIV \\<equiv> All\n 6. Bex UNIV \\<equiv> Ex\n 7. sympartp (\\<lambda>x y. y \\<le> x) \\<equiv> sympartp (\\<le>)\n 8. \\<And>P1. (True \\<Longrightarrow> PROP P1) \\<equiv> PROP P1\n 9. \\<And>P1. (True \\<Longrightarrow> P1) \\<equiv> P1\n 10. \\<And>P1 P2.\n        (\\<lbrakk>True; PROP P1\\<rbrakk> \\<Longrightarrow> PROP P2) \\<equiv>\n        (PROP P1 \\<Longrightarrow> PROP P2)", "by (auto simp:atomize_eq)"], ["", "end"], ["", "class porder = ord + assumes \"partial_ordering UNIV (\\<le>) (<)\"\nbegin"], ["", "interpretation partial_ordering UNIV"], ["proof (prove)\ngoal (1 subgoal):\n 1. partial_ordering UNIV (\\<le>) (<)", "using porder_axioms"], ["proof (prove)\nusing this:\n  class.porder (\\<le>) (<)\n\ngoal (1 subgoal):\n 1. partial_ordering UNIV (\\<le>) (<)", "unfolding class.porder_def"], ["proof (prove)\nusing this:\n  partial_ordering UNIV (\\<le>) (<)\n\ngoal (1 subgoal):\n 1. partial_ordering UNIV (\\<le>) (<)", "."], ["", "subclass psorder"], ["proof (prove)\ngoal (1 subgoal):\n 1. class.psorder (\\<le>) (<)", ".."], ["", "subclass qorder"], ["proof (prove)\ngoal (1 subgoal):\n 1. class.qorder (\\<le>) (<)", ".."], ["", "sublocale order: partial_ordering UNIV\n  rewrites \"\\<And>x. x \\<in> UNIV \\<equiv> True\"\n    and \"\\<And>X. X \\<subseteq> UNIV \\<equiv> True\"\n    and \"\\<And>r. r \\<restriction> UNIV \\<equiv> r\"\n    and \"\\<And>P. True \\<and> P \\<equiv> P\"\n    and \"Ball UNIV \\<equiv> All\"\n    and \"Bex UNIV \\<equiv> Ex\"\n    and \"sympartp (\\<le>)\\<^sup>- \\<equiv> sympartp (\\<le>)\"\n    and \"\\<And>P1. (True \\<Longrightarrow> PROP P1) \\<equiv> PROP P1\"\n    and \"\\<And>P1. (True \\<Longrightarrow> P1) \\<equiv> Trueprop P1\"\n    and \"\\<And>P1 P2. (True \\<Longrightarrow> PROP P1 \\<Longrightarrow> PROP P2) \\<equiv> (PROP P1 \\<Longrightarrow> PROP P2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((partial_ordering UNIV (\\<le>) (<) &&&\n      (\\<And>x. x \\<in> UNIV \\<equiv> True)) &&&\n     (\\<And>X. X \\<subseteq> UNIV \\<equiv> True) &&&\n     (\\<And>r. r \\<restriction> UNIV \\<equiv> r) &&&\n     (\\<And>P. True \\<and> P \\<equiv> P)) &&&\n    ((Ball UNIV \\<equiv> All) &&&\n     (Bex UNIV \\<equiv> Ex) &&&\n     sympartp (\\<lambda>x y. y \\<le> x) \\<equiv> sympartp (\\<le>)) &&&\n    (\\<And>P1. (True \\<Longrightarrow> PROP P1) \\<equiv> PROP P1) &&&\n    (\\<And>P1. (True \\<Longrightarrow> P1) \\<equiv> P1) &&&\n    (\\<And>P1 P2.\n        (\\<lbrakk>True; PROP P1\\<rbrakk> \\<Longrightarrow> PROP P2) \\<equiv>\n        (PROP P1 \\<Longrightarrow> PROP P2))", "apply unfold_locales"], ["proof (prove)\ngoal (10 subgoals):\n 1. \\<And>x. x \\<in> UNIV \\<equiv> True\n 2. \\<And>X. X \\<subseteq> UNIV \\<equiv> True\n 3. \\<And>r. r \\<restriction> UNIV \\<equiv> r\n 4. \\<And>P. True \\<and> P \\<equiv> P\n 5. Ball UNIV \\<equiv> All\n 6. Bex UNIV \\<equiv> Ex\n 7. sympartp (\\<lambda>x y. y \\<le> x) \\<equiv> sympartp (\\<le>)\n 8. \\<And>P1. (True \\<Longrightarrow> PROP P1) \\<equiv> PROP P1\n 9. \\<And>P1. (True \\<Longrightarrow> P1) \\<equiv> P1\n 10. \\<And>P1 P2.\n        (\\<lbrakk>True; PROP P1\\<rbrakk> \\<Longrightarrow> PROP P2) \\<equiv>\n        (PROP P1 \\<Longrightarrow> PROP P2)", "by (auto simp:atomize_eq)"], ["", "end"], ["", "class wf_qorder = ord + assumes \"well_founded_ordering UNIV (\\<le>) (<)\"\nbegin"], ["", "interpretation well_founded_ordering UNIV"], ["proof (prove)\ngoal (1 subgoal):\n 1. well_founded_ordering UNIV (\\<le>) (<)", "using wf_qorder_axioms"], ["proof (prove)\nusing this:\n  class.wf_qorder (\\<le>) (<)\n\ngoal (1 subgoal):\n 1. well_founded_ordering UNIV (\\<le>) (<)", "unfolding class.wf_qorder_def"], ["proof (prove)\nusing this:\n  well_founded_ordering UNIV (\\<le>) (<)\n\ngoal (1 subgoal):\n 1. well_founded_ordering UNIV (\\<le>) (<)", "."], ["", "subclass qorder"], ["proof (prove)\ngoal (1 subgoal):\n 1. class.qorder (\\<le>) (<)", ".."], ["", "sublocale order: well_founded_ordering UNIV\n  rewrites \"\\<And>x. x \\<in> UNIV \\<equiv> True\"\n    and \"\\<And>X. X \\<subseteq> UNIV \\<equiv> True\"\n    and \"\\<And>r. r \\<restriction> UNIV \\<equiv> r\"\n    and \"\\<And>P. True \\<and> P \\<equiv> P\"\n    and \"Ball UNIV \\<equiv> All\"\n    and \"Bex UNIV \\<equiv> Ex\"\n    and \"sympartp (\\<le>)\\<^sup>- \\<equiv> sympartp (\\<le>)\"\n    and \"\\<And>P1. (True \\<Longrightarrow> PROP P1) \\<equiv> PROP P1\"\n    and \"\\<And>P1. (True \\<Longrightarrow> P1) \\<equiv> Trueprop P1\"\n    and \"\\<And>P1 P2. (True \\<Longrightarrow> PROP P1 \\<Longrightarrow> PROP P2) \\<equiv> (PROP P1 \\<Longrightarrow> PROP P2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((well_founded_ordering UNIV (\\<le>) (<) &&&\n      (\\<And>x. x \\<in> UNIV \\<equiv> True)) &&&\n     (\\<And>X. X \\<subseteq> UNIV \\<equiv> True) &&&\n     (\\<And>r. r \\<restriction> UNIV \\<equiv> r) &&&\n     (\\<And>P. True \\<and> P \\<equiv> P)) &&&\n    ((Ball UNIV \\<equiv> All) &&&\n     (Bex UNIV \\<equiv> Ex) &&&\n     sympartp (\\<lambda>x y. y \\<le> x) \\<equiv> sympartp (\\<le>)) &&&\n    (\\<And>P1. (True \\<Longrightarrow> PROP P1) \\<equiv> PROP P1) &&&\n    (\\<And>P1. (True \\<Longrightarrow> P1) \\<equiv> P1) &&&\n    (\\<And>P1 P2.\n        (\\<lbrakk>True; PROP P1\\<rbrakk> \\<Longrightarrow> PROP P2) \\<equiv>\n        (PROP P1 \\<Longrightarrow> PROP P2))", "apply unfold_locales"], ["proof (prove)\ngoal (10 subgoals):\n 1. \\<And>x. x \\<in> UNIV \\<equiv> True\n 2. \\<And>X. X \\<subseteq> UNIV \\<equiv> True\n 3. \\<And>r. r \\<restriction> UNIV \\<equiv> r\n 4. \\<And>P. True \\<and> P \\<equiv> P\n 5. Ball UNIV \\<equiv> All\n 6. Bex UNIV \\<equiv> Ex\n 7. sympartp (\\<lambda>x y. y \\<le> x) \\<equiv> sympartp (\\<le>)\n 8. \\<And>P1. (True \\<Longrightarrow> PROP P1) \\<equiv> PROP P1\n 9. \\<And>P1. (True \\<Longrightarrow> P1) \\<equiv> P1\n 10. \\<And>P1 P2.\n        (\\<lbrakk>True; PROP P1\\<rbrakk> \\<Longrightarrow> PROP P2) \\<equiv>\n        (PROP P1 \\<Longrightarrow> PROP P2)", "by (auto simp:atomize_eq)"], ["", "end"], ["", "class totalorder = ord + assumes \"total_ordering UNIV (\\<le>) (<)\"\nbegin"], ["", "interpretation total_ordering UNIV"], ["proof (prove)\ngoal (1 subgoal):\n 1. total_ordering UNIV (\\<le>) (<)", "using totalorder_axioms"], ["proof (prove)\nusing this:\n  class.totalorder (\\<le>) (<)\n\ngoal (1 subgoal):\n 1. total_ordering UNIV (\\<le>) (<)", "unfolding class.totalorder_def"], ["proof (prove)\nusing this:\n  total_ordering UNIV (\\<le>) (<)\n\ngoal (1 subgoal):\n 1. total_ordering UNIV (\\<le>) (<)", "."], ["", "subclass porder"], ["proof (prove)\ngoal (1 subgoal):\n 1. class.porder (\\<le>) (<)", ".."], ["", "sublocale order: total_ordering UNIV\n  rewrites \"\\<And>x. x \\<in> UNIV \\<equiv> True\"\n    and \"\\<And>X. X \\<subseteq> UNIV \\<equiv> True\"\n    and \"\\<And>r. r \\<restriction> UNIV \\<equiv> r\"\n    and \"\\<And>P. True \\<and> P \\<equiv> P\"\n    and \"Ball UNIV \\<equiv> All\"\n    and \"Bex UNIV \\<equiv> Ex\"\n    and \"sympartp (\\<le>)\\<^sup>- \\<equiv> sympartp (\\<le>)\"\n    and \"\\<And>P1. (True \\<Longrightarrow> PROP P1) \\<equiv> PROP P1\"\n    and \"\\<And>P1. (True \\<Longrightarrow> P1) \\<equiv> Trueprop P1\"\n    and \"\\<And>P1 P2. (True \\<Longrightarrow> PROP P1 \\<Longrightarrow> PROP P2) \\<equiv> (PROP P1 \\<Longrightarrow> PROP P2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((total_ordering UNIV (\\<le>) (<) &&&\n      (\\<And>x. x \\<in> UNIV \\<equiv> True)) &&&\n     (\\<And>X. X \\<subseteq> UNIV \\<equiv> True) &&&\n     (\\<And>r. r \\<restriction> UNIV \\<equiv> r) &&&\n     (\\<And>P. True \\<and> P \\<equiv> P)) &&&\n    ((Ball UNIV \\<equiv> All) &&&\n     (Bex UNIV \\<equiv> Ex) &&&\n     sympartp (\\<lambda>x y. y \\<le> x) \\<equiv> sympartp (\\<le>)) &&&\n    (\\<And>P1. (True \\<Longrightarrow> PROP P1) \\<equiv> PROP P1) &&&\n    (\\<And>P1. (True \\<Longrightarrow> P1) \\<equiv> P1) &&&\n    (\\<And>P1 P2.\n        (\\<lbrakk>True; PROP P1\\<rbrakk> \\<Longrightarrow> PROP P2) \\<equiv>\n        (PROP P1 \\<Longrightarrow> PROP P2))", "apply unfold_locales"], ["proof (prove)\ngoal (10 subgoals):\n 1. \\<And>x. x \\<in> UNIV \\<equiv> True\n 2. \\<And>X. X \\<subseteq> UNIV \\<equiv> True\n 3. \\<And>r. r \\<restriction> UNIV \\<equiv> r\n 4. \\<And>P. True \\<and> P \\<equiv> P\n 5. Ball UNIV \\<equiv> All\n 6. Bex UNIV \\<equiv> Ex\n 7. sympartp (\\<lambda>x y. y \\<le> x) \\<equiv> sympartp (\\<le>)\n 8. \\<And>P1. (True \\<Longrightarrow> PROP P1) \\<equiv> PROP P1\n 9. \\<And>P1. (True \\<Longrightarrow> P1) \\<equiv> P1\n 10. \\<And>P1 P2.\n        (\\<lbrakk>True; PROP P1\\<rbrakk> \\<Longrightarrow> PROP P2) \\<equiv>\n        (PROP P1 \\<Longrightarrow> PROP P2)", "by (auto simp:atomize_eq)"], ["", "end"], ["", "text \\<open>Isabelle/HOL's @{class preorder} belongs to @{class qorder}, but not vice versa.\\<close>"], ["", "subclass (in preorder) qorder"], ["proof (prove)\ngoal (1 subgoal):\n 1. class.qorder (\\<le>) (<)", "apply unfold_locales"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>x. x \\<in> UNIV \\<Longrightarrow> x \\<le> x\n 2. \\<And>x. x \\<in> UNIV \\<Longrightarrow> \\<not> x < x\n 3. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; y < z; x \\<in> UNIV; y \\<in> UNIV;\n        z \\<in> UNIV\\<rbrakk>\n       \\<Longrightarrow> x < z\n 4. \\<And>x y z.\n       \\<lbrakk>x < y; y \\<le> z; x \\<in> UNIV; y \\<in> UNIV;\n        z \\<in> UNIV\\<rbrakk>\n       \\<Longrightarrow> x < z\n 5. \\<And>x y.\n       \\<lbrakk>x < y; x \\<in> UNIV; y \\<in> UNIV\\<rbrakk>\n       \\<Longrightarrow> x \\<le> y\n 6. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; y \\<le> z; x \\<in> UNIV; y \\<in> UNIV;\n        z \\<in> UNIV\\<rbrakk>\n       \\<Longrightarrow> x \\<le> z", "using order_refl"], ["proof (prove)\nusing this:\n  ?x \\<le> ?x\n\ngoal (6 subgoals):\n 1. \\<And>x. x \\<in> UNIV \\<Longrightarrow> x \\<le> x\n 2. \\<And>x. x \\<in> UNIV \\<Longrightarrow> \\<not> x < x\n 3. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; y < z; x \\<in> UNIV; y \\<in> UNIV;\n        z \\<in> UNIV\\<rbrakk>\n       \\<Longrightarrow> x < z\n 4. \\<And>x y z.\n       \\<lbrakk>x < y; y \\<le> z; x \\<in> UNIV; y \\<in> UNIV;\n        z \\<in> UNIV\\<rbrakk>\n       \\<Longrightarrow> x < z\n 5. \\<And>x y.\n       \\<lbrakk>x < y; x \\<in> UNIV; y \\<in> UNIV\\<rbrakk>\n       \\<Longrightarrow> x \\<le> y\n 6. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; y \\<le> z; x \\<in> UNIV; y \\<in> UNIV;\n        z \\<in> UNIV\\<rbrakk>\n       \\<Longrightarrow> x \\<le> z", "apply assumption"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>x. x \\<in> UNIV \\<Longrightarrow> \\<not> x < x\n 2. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; y < z; x \\<in> UNIV; y \\<in> UNIV;\n        z \\<in> UNIV\\<rbrakk>\n       \\<Longrightarrow> x < z\n 3. \\<And>x y z.\n       \\<lbrakk>x < y; y \\<le> z; x \\<in> UNIV; y \\<in> UNIV;\n        z \\<in> UNIV\\<rbrakk>\n       \\<Longrightarrow> x < z\n 4. \\<And>x y.\n       \\<lbrakk>x < y; x \\<in> UNIV; y \\<in> UNIV\\<rbrakk>\n       \\<Longrightarrow> x \\<le> y\n 5. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; y \\<le> z; x \\<in> UNIV; y \\<in> UNIV;\n        z \\<in> UNIV\\<rbrakk>\n       \\<Longrightarrow> x \\<le> z", "apply simp"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; y < z; x \\<in> UNIV; y \\<in> UNIV;\n        z \\<in> UNIV\\<rbrakk>\n       \\<Longrightarrow> x < z\n 2. \\<And>x y z.\n       \\<lbrakk>x < y; y \\<le> z; x \\<in> UNIV; y \\<in> UNIV;\n        z \\<in> UNIV\\<rbrakk>\n       \\<Longrightarrow> x < z\n 3. \\<And>x y.\n       \\<lbrakk>x < y; x \\<in> UNIV; y \\<in> UNIV\\<rbrakk>\n       \\<Longrightarrow> x \\<le> y\n 4. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; y \\<le> z; x \\<in> UNIV; y \\<in> UNIV;\n        z \\<in> UNIV\\<rbrakk>\n       \\<Longrightarrow> x \\<le> z", "using le_less_trans"], ["proof (prove)\nusing this:\n  \\<lbrakk>?x \\<le> ?y; ?y < ?z\\<rbrakk> \\<Longrightarrow> ?x < ?z\n\ngoal (4 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; y < z; x \\<in> UNIV; y \\<in> UNIV;\n        z \\<in> UNIV\\<rbrakk>\n       \\<Longrightarrow> x < z\n 2. \\<And>x y z.\n       \\<lbrakk>x < y; y \\<le> z; x \\<in> UNIV; y \\<in> UNIV;\n        z \\<in> UNIV\\<rbrakk>\n       \\<Longrightarrow> x < z\n 3. \\<And>x y.\n       \\<lbrakk>x < y; x \\<in> UNIV; y \\<in> UNIV\\<rbrakk>\n       \\<Longrightarrow> x \\<le> y\n 4. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; y \\<le> z; x \\<in> UNIV; y \\<in> UNIV;\n        z \\<in> UNIV\\<rbrakk>\n       \\<Longrightarrow> x \\<le> z", "apply assumption"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>x < y; y \\<le> z; x \\<in> UNIV; y \\<in> UNIV;\n        z \\<in> UNIV\\<rbrakk>\n       \\<Longrightarrow> x < z\n 2. \\<And>x y.\n       \\<lbrakk>x < y; x \\<in> UNIV; y \\<in> UNIV\\<rbrakk>\n       \\<Longrightarrow> x \\<le> y\n 3. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; y \\<le> z; x \\<in> UNIV; y \\<in> UNIV;\n        z \\<in> UNIV\\<rbrakk>\n       \\<Longrightarrow> x \\<le> z", "using less_le_trans"], ["proof (prove)\nusing this:\n  \\<lbrakk>?x < ?y; ?y \\<le> ?z\\<rbrakk> \\<Longrightarrow> ?x < ?z\n\ngoal (3 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>x < y; y \\<le> z; x \\<in> UNIV; y \\<in> UNIV;\n        z \\<in> UNIV\\<rbrakk>\n       \\<Longrightarrow> x < z\n 2. \\<And>x y.\n       \\<lbrakk>x < y; x \\<in> UNIV; y \\<in> UNIV\\<rbrakk>\n       \\<Longrightarrow> x \\<le> y\n 3. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; y \\<le> z; x \\<in> UNIV; y \\<in> UNIV;\n        z \\<in> UNIV\\<rbrakk>\n       \\<Longrightarrow> x \\<le> z", "apply assumption"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>x < y; x \\<in> UNIV; y \\<in> UNIV\\<rbrakk>\n       \\<Longrightarrow> x \\<le> y\n 2. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; y \\<le> z; x \\<in> UNIV; y \\<in> UNIV;\n        z \\<in> UNIV\\<rbrakk>\n       \\<Longrightarrow> x \\<le> z", "using less_imp_le"], ["proof (prove)\nusing this:\n  ?x < ?y \\<Longrightarrow> ?x \\<le> ?y\n\ngoal (2 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>x < y; x \\<in> UNIV; y \\<in> UNIV\\<rbrakk>\n       \\<Longrightarrow> x \\<le> y\n 2. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; y \\<le> z; x \\<in> UNIV; y \\<in> UNIV;\n        z \\<in> UNIV\\<rbrakk>\n       \\<Longrightarrow> x \\<le> z", "apply assumption"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; y \\<le> z; x \\<in> UNIV; y \\<in> UNIV;\n        z \\<in> UNIV\\<rbrakk>\n       \\<Longrightarrow> x \\<le> z", "using  order_trans"], ["proof (prove)\nusing this:\n  \\<lbrakk>?x \\<le> ?y; ?y \\<le> ?z\\<rbrakk> \\<Longrightarrow> ?x \\<le> ?z\n\ngoal (1 subgoal):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; y \\<le> z; x \\<in> UNIV; y \\<in> UNIV;\n        z \\<in> UNIV\\<rbrakk>\n       \\<Longrightarrow> x \\<le> z", "apply assumption"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subclass (in order) porder"], ["proof (prove)\ngoal (1 subgoal):\n 1. class.porder (\\<le>) (<)", "by (unfold_locales, auto)"], ["", "subclass (in wellorder) wf_qorder"], ["proof (prove)\ngoal (1 subgoal):\n 1. class.wf_qorder (\\<le>) (<)", "apply (unfold_locales)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a P.\n       \\<lbrakk>a \\<in> UNIV;\n        \\<And>x.\n           \\<lbrakk>x \\<in> UNIV;\n            \\<And>y.\n               \\<lbrakk>y \\<in> UNIV; y < x\\<rbrakk>\n               \\<Longrightarrow> P y\\<rbrakk>\n           \\<Longrightarrow> P x\\<rbrakk>\n       \\<Longrightarrow> P a", "using less_induct"], ["proof (prove)\nusing this:\n  (\\<And>x.\n      (\\<And>y. y < x \\<Longrightarrow> ?P y) \\<Longrightarrow>\n      ?P x) \\<Longrightarrow>\n  ?P ?a\n\ngoal (1 subgoal):\n 1. \\<And>a P.\n       \\<lbrakk>a \\<in> UNIV;\n        \\<And>x.\n           \\<lbrakk>x \\<in> UNIV;\n            \\<And>y.\n               \\<lbrakk>y \\<in> UNIV; y < x\\<rbrakk>\n               \\<Longrightarrow> P y\\<rbrakk>\n           \\<Longrightarrow> P x\\<rbrakk>\n       \\<Longrightarrow> P a", "by auto"], ["", "text \\<open>Isabelle/HOL's @{class linorder} is equivalent to our locale @{locale strict_total_ordering}.\\<close>"], ["", "context linorder begin"], ["", "interpretation strict_total_ordering UNIV"], ["proof (prove)\ngoal (1 subgoal):\n 1. strict_total_ordering UNIV (\\<le>) (<)", "apply unfold_locales"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> UNIV; y \\<in> UNIV\\<rbrakk>\n       \\<Longrightarrow> x < y \\<or> x = y \\<or> y < x", "by auto"], ["", "subclass totalorder"], ["proof (prove)\ngoal (1 subgoal):\n 1. class.totalorder (\\<le>) (<)", ".."], ["", "sublocale order: strict_total_ordering UNIV\n  rewrites \"\\<And>x. x \\<in> UNIV \\<equiv> True\"\n    and \"\\<And>X. X \\<subseteq> UNIV \\<equiv> True\"\n    and \"\\<And>r. r \\<restriction> UNIV \\<equiv> r\"\n    and \"\\<And>P. True \\<and> P \\<equiv> P\"\n    and \"Ball UNIV \\<equiv> All\"\n    and \"Bex UNIV \\<equiv> Ex\"\n    and \"sympartp (\\<le>)\\<^sup>- \\<equiv> sympartp (\\<le>)\"\n    and \"\\<And>P1. (True \\<Longrightarrow> PROP P1) \\<equiv> PROP P1\"\n    and \"\\<And>P1. (True \\<Longrightarrow> P1) \\<equiv> Trueprop P1\"\n    and \"\\<And>P1 P2. (True \\<Longrightarrow> PROP P1 \\<Longrightarrow> PROP P2) \\<equiv> (PROP P1 \\<Longrightarrow> PROP P2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((strict_total_ordering UNIV (\\<le>) (<) &&&\n      (\\<And>x. x \\<in> UNIV \\<equiv> True)) &&&\n     (\\<And>X. X \\<subseteq> UNIV \\<equiv> True) &&&\n     (\\<And>r. r \\<restriction> UNIV \\<equiv> r) &&&\n     (\\<And>P. True \\<and> P \\<equiv> P)) &&&\n    ((Ball UNIV \\<equiv> All) &&&\n     (Bex UNIV \\<equiv> Ex) &&&\n     sympartp (\\<lambda>x y. y \\<le> x) \\<equiv> sympartp (\\<le>)) &&&\n    (\\<And>P1. (True \\<Longrightarrow> PROP P1) \\<equiv> PROP P1) &&&\n    (\\<And>P1. (True \\<Longrightarrow> P1) \\<equiv> P1) &&&\n    (\\<And>P1 P2.\n        (\\<lbrakk>True; PROP P1\\<rbrakk> \\<Longrightarrow> PROP P2) \\<equiv>\n        (PROP P1 \\<Longrightarrow> PROP P2))", "apply unfold_locales"], ["proof (prove)\ngoal (10 subgoals):\n 1. \\<And>x. x \\<in> UNIV \\<equiv> True\n 2. \\<And>X. X \\<subseteq> UNIV \\<equiv> True\n 3. \\<And>r. r \\<restriction> UNIV \\<equiv> r\n 4. \\<And>P. True \\<and> P \\<equiv> P\n 5. Ball UNIV \\<equiv> All\n 6. Bex UNIV \\<equiv> Ex\n 7. sympartp (\\<lambda>x y. y \\<le> x) \\<equiv> sympartp (\\<le>)\n 8. \\<And>P1. (True \\<Longrightarrow> PROP P1) \\<equiv> PROP P1\n 9. \\<And>P1. (True \\<Longrightarrow> P1) \\<equiv> P1\n 10. \\<And>P1 P2.\n        (\\<lbrakk>True; PROP P1\\<rbrakk> \\<Longrightarrow> PROP P2) \\<equiv>\n        (PROP P1 \\<Longrightarrow> PROP P2)", "by (auto simp:atomize_eq)"], ["", "end"], ["", "text \\<open>Tests: facts should be available in the most general classes.\\<close>"], ["", "thm order.strict.trans[where 'a=\"'a::compat\"]"], ["", "thm order.extreme_bound_quasi_const[where 'a=\"'a::attractive_order\"]"], ["", "thm order.extreme_bound_singleton_eq[where 'a=\"'a::psorder\"]"], ["", "thm order.trans[where 'a=\"'a::qorder\"]"], ["", "thm order.comparable_cases[where 'a=\"'a::totalorder\"]"], ["", "thm order.cases[where 'a=\"'a::linorder\"]"], ["", "subsection \\<open>Declaring Duals\\<close>"], ["", "sublocale reflexive \\<subseteq> sym: reflexive A \"sympartp (\\<sqsubseteq>)\"\n  rewrites \"sympartp (\\<sqsubseteq>)\\<^sup>- \\<equiv> sympartp (\\<sqsubseteq>)\"\n    and \"\\<And>r. sympartp (sympartp r) \\<equiv> sympartp r\"\n    and \"\\<And>r. sympartp r \\<restriction> A \\<equiv> sympartp (r \\<restriction> A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (reflexive A (sympartp (\\<sqsubseteq>)) &&&\n     sympartp (\\<lambda>x y. y \\<sqsubseteq> x) \\<equiv>\n     sympartp (\\<sqsubseteq>)) &&&\n    (\\<And>r. sympartp (sympartp r) \\<equiv> sympartp r) &&&\n    (\\<And>r.\n        sympartp r \\<restriction> A \\<equiv> sympartp (r \\<restriction> A))", "by (auto 0 4 simp:atomize_eq)"], ["", "sublocale quasi_ordered_set \\<subseteq> sym: quasi_ordered_set A \"sympartp (\\<sqsubseteq>)\"\n  rewrites \"sympartp (\\<sqsubseteq>)\\<^sup>- = sympartp (\\<sqsubseteq>)\"\n    and \"sympartp (sympartp (\\<sqsubseteq>)) = sympartp (\\<sqsubseteq>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. quasi_ordered_set A (sympartp (\\<sqsubseteq>)) &&&\n    sympartp (\\<lambda>x y. y \\<sqsubseteq> x) =\n    sympartp (\\<sqsubseteq>) &&&\n    sympartp (sympartp (\\<sqsubseteq>)) = sympartp (\\<sqsubseteq>)", "apply unfold_locales"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>sympartp (\\<sqsubseteq>) x y; sympartp (\\<sqsubseteq>) y z;\n        x \\<in> A; y \\<in> A; z \\<in> A\\<rbrakk>\n       \\<Longrightarrow> sympartp (\\<sqsubseteq>) x z\n 2. sympartp (\\<lambda>x y. y \\<sqsubseteq> x) = sympartp (\\<sqsubseteq>)\n 3. sympartp (sympartp (\\<sqsubseteq>)) = sympartp (\\<sqsubseteq>)", "by (auto 0 4 dest: trans)"], ["", "text \\<open>At this point, we declare dual as sublocales.\nIn the following, ``rewrites'' eventually cleans up redundant facts.\\<close>"], ["", "sublocale reflexive \\<subseteq> dual: reflexive A \"(\\<sqsubseteq>)\\<^sup>-\"\n  rewrites \"sympartp (\\<sqsubseteq>)\\<^sup>- \\<equiv> sympartp (\\<sqsubseteq>)\"\n    and \"\\<And>r. sympartp (r \\<restriction> A) \\<equiv> sympartp r \\<restriction> A\"\n    and \"(\\<sqsubseteq>)\\<^sup>- \\<restriction> A \\<equiv> ((\\<sqsubseteq>) \\<restriction> A)\\<^sup>-\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (reflexive A (\\<lambda>x y. y \\<sqsubseteq> x) &&&\n     sympartp (\\<lambda>x y. y \\<sqsubseteq> x) \\<equiv>\n     sympartp (\\<sqsubseteq>)) &&&\n    (\\<And>r.\n        sympartp (r \\<restriction> A) \\<equiv>\n        sympartp r \\<restriction> A) &&&\n    (\\<lambda>x y. y \\<sqsubseteq> x) \\<restriction> A \\<equiv>\n    \\<lambda>x y. ((\\<sqsubseteq>) \\<restriction> A) y x", "by (auto simp: atomize_eq)"], ["", "context attractive begin"], ["", "interpretation less_eq_notations"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "sublocale dual: attractive A \"(\\<sqsupseteq>)\"\n  rewrites \"sympartp (\\<sqsupseteq>) = (\\<sim>)\"\n    and \"equivpartp (\\<sqsupseteq>) \\<equiv> (\\<simeq>)\"\n    and \"\\<And>r. sympartp (r \\<restriction> A) \\<equiv> sympartp r \\<restriction> A\"\n    and \"\\<And>r. sympartp (sympartp r) \\<equiv> sympartp r\"\n    and \"(\\<sqsubseteq>)\\<^sup>- \\<restriction> A \\<equiv> ((\\<sqsubseteq>) \\<restriction> A)\\<^sup>-\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (attractive A (\\<lambda>x y. y \\<sqsubseteq> x) &&&\n     sympartp (\\<lambda>x y. y \\<sqsubseteq> x) = (\\<sim>) &&&\n     equivpartp (\\<lambda>x y. y \\<sqsubseteq> x) \\<equiv> (\\<simeq>)) &&&\n    (\\<And>r.\n        sympartp (r \\<restriction> A) \\<equiv>\n        sympartp r \\<restriction> A) &&&\n    (\\<And>r. sympartp (sympartp r) \\<equiv> sympartp r) &&&\n    (\\<lambda>x y. y \\<sqsubseteq> x) \\<restriction> A \\<equiv>\n    \\<lambda>x y. ((\\<sqsubseteq>) \\<restriction> A) y x", "apply unfold_locales"], ["proof (prove)\ngoal (5 subgoals):\n 1. sympartp (\\<lambda>x y. y \\<sqsubseteq> x) = (\\<sim>)\n 2. equivpartp (\\<lambda>x y. y \\<sqsubseteq> x) \\<equiv> (\\<simeq>)\n 3. \\<And>r.\n       sympartp (r \\<restriction> A) \\<equiv> sympartp r \\<restriction> A\n 4. \\<And>r. sympartp (sympartp r) \\<equiv> sympartp r\n 5. (\\<lambda>x y. y \\<sqsubseteq> x) \\<restriction> A \\<equiv>\n    \\<lambda>x y. ((\\<sqsubseteq>) \\<restriction> A) y x", "by (auto intro!: ext dest: attract dual.attract simp: atomize_eq)"], ["", "end"], ["", "context irreflexive begin"], ["", "sublocale dual: irreflexive A \"(\\<sqsubset>)\\<^sup>-\"\n  rewrites \"(\\<sqsubset>)\\<^sup>- \\<restriction> A \\<equiv> ((\\<sqsubset>) \\<restriction> A)\\<^sup>-\""], ["proof (prove)\ngoal (1 subgoal):\n 1. irreflexive A (\\<lambda>x y. y \\<sqsubset> x) &&&\n    (\\<lambda>x y. y \\<sqsubset> x) \\<restriction> A \\<equiv>\n    \\<lambda>x y. ((\\<sqsubset>) \\<restriction> A) y x", "apply unfold_locales"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x. x \\<in> A \\<Longrightarrow> \\<not> x \\<sqsubset> x\n 2. (\\<lambda>x y. y \\<sqsubset> x) \\<restriction> A \\<equiv>\n    \\<lambda>x y. ((\\<sqsubset>) \\<restriction> A) y x", "by (auto dest: irrefl simp: atomize_eq)"], ["", "end"], ["", "sublocale transitive \\<subseteq> dual: transitive A \"(\\<sqsubseteq>)\\<^sup>-\"\n  rewrites \"(\\<sqsubseteq>)\\<^sup>- \\<restriction> A \\<equiv> ((\\<sqsubseteq>) \\<restriction> A)\\<^sup>-\"\n    and \"sympartp (\\<sqsubseteq>)\\<^sup>- = sympartp (\\<sqsubseteq>)\"\n    and \"asympartp (\\<sqsubseteq>)\\<^sup>- = (asympartp (\\<sqsubseteq>))\\<^sup>-\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (transitive A (\\<lambda>x y. y \\<sqsubseteq> x) &&&\n     (\\<lambda>x y. y \\<sqsubseteq> x) \\<restriction> A \\<equiv>\n     \\<lambda>x y. ((\\<sqsubseteq>) \\<restriction> A) y x) &&&\n    sympartp (\\<lambda>x y. y \\<sqsubseteq> x) =\n    sympartp (\\<sqsubseteq>) &&&\n    asympartp (\\<lambda>x y. y \\<sqsubseteq> x) =\n    (\\<lambda>x y. asympartp (\\<sqsubseteq>) y x)", "apply unfold_locales"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>y \\<sqsubseteq> x; z \\<sqsubseteq> y; x \\<in> A; y \\<in> A;\n        z \\<in> A\\<rbrakk>\n       \\<Longrightarrow> z \\<sqsubseteq> x\n 2. (\\<lambda>x y. y \\<sqsubseteq> x) \\<restriction> A \\<equiv>\n    \\<lambda>x y. ((\\<sqsubseteq>) \\<restriction> A) y x\n 3. sympartp (\\<lambda>x y. y \\<sqsubseteq> x) = sympartp (\\<sqsubseteq>)\n 4. asympartp (\\<lambda>x y. y \\<sqsubseteq> x) =\n    (\\<lambda>x y. asympartp (\\<sqsubseteq>) y x)", "by (auto dest: trans simp: atomize_eq intro!:ext)"], ["", "sublocale antisymmetric \\<subseteq> dual: antisymmetric A \"(\\<sqsubseteq>)\\<^sup>-\"\n  rewrites \"(\\<sqsubseteq>)\\<^sup>- \\<restriction> A \\<equiv> ((\\<sqsubseteq>) \\<restriction> A)\\<^sup>-\"\n    and \"sympartp (\\<sqsubseteq>)\\<^sup>- = sympartp (\\<sqsubseteq>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. antisymmetric A (\\<lambda>x y. y \\<sqsubseteq> x) &&&\n    ((\\<lambda>x y. y \\<sqsubseteq> x) \\<restriction> A \\<equiv>\n     \\<lambda>x y. ((\\<sqsubseteq>) \\<restriction> A) y x) &&&\n    sympartp (\\<lambda>x y. y \\<sqsubseteq> x) = sympartp (\\<sqsubseteq>)", "by (auto dest: antisym simp: atomize_eq)"], ["", "sublocale semiconnex \\<subseteq> dual: semiconnex A \"(\\<sqsubset>)\\<^sup>-\"\n  rewrites \"sympartp (\\<sqsubset>)\\<^sup>- = sympartp (\\<sqsubset>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. semiconnex A (\\<lambda>x y. y \\<sqsubset> x) &&&\n    sympartp (\\<lambda>x y. y \\<sqsubset> x) = sympartp (\\<sqsubset>)", "using semiconnex"], ["proof (prove)\nusing this:\n  \\<lbrakk>?x \\<in> A; ?y \\<in> A\\<rbrakk>\n  \\<Longrightarrow> ?x \\<sqsubset> ?y \\<or> ?x = ?y \\<or> ?y \\<sqsubset> ?x\n\ngoal (1 subgoal):\n 1. semiconnex A (\\<lambda>x y. y \\<sqsubset> x) &&&\n    sympartp (\\<lambda>x y. y \\<sqsubset> x) = sympartp (\\<sqsubset>)", "by auto"], ["", "sublocale connex \\<subseteq> dual: connex A \"(\\<sqsubseteq>)\\<^sup>-\"\n  rewrites \"sympartp (\\<sqsubseteq>)\\<^sup>- = sympartp (\\<sqsubseteq>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. connex A (\\<lambda>x y. y \\<sqsubseteq> x) &&&\n    sympartp (\\<lambda>x y. y \\<sqsubseteq> x) = sympartp (\\<sqsubseteq>)", "by (auto intro!: chainI dest:comparable)"], ["", "sublocale semiconnex_irreflexive \\<subseteq> dual: semiconnex_irreflexive A \"(\\<sqsubset>)\\<^sup>-\"\n  rewrites \"sympartp (\\<sqsubset>)\\<^sup>- = sympartp (\\<sqsubset>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. semiconnex_irreflexive A (\\<lambda>x y. y \\<sqsubset> x) &&&\n    sympartp (\\<lambda>x y. y \\<sqsubset> x) = sympartp (\\<sqsubset>)", "by unfold_locales auto"], ["", "sublocale pseudo_ordered_set \\<subseteq> dual: pseudo_ordered_set A \"(\\<sqsubseteq>)\\<^sup>-\"\n  rewrites \"sympartp (\\<sqsubseteq>)\\<^sup>- = sympartp (\\<sqsubseteq>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pseudo_ordered_set A (\\<lambda>x y. y \\<sqsubseteq> x) &&&\n    sympartp (\\<lambda>x y. y \\<sqsubseteq> x) = sympartp (\\<sqsubseteq>)", "by unfold_locales (auto 0 4)"], ["", "sublocale quasi_ordered_set \\<subseteq> dual: quasi_ordered_set A \"(\\<sqsubseteq>)\\<^sup>-\"\n  rewrites \"sympartp (\\<sqsubseteq>)\\<^sup>- = sympartp (\\<sqsubseteq>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. quasi_ordered_set A (\\<lambda>x y. y \\<sqsubseteq> x) &&&\n    sympartp (\\<lambda>x y. y \\<sqsubseteq> x) = sympartp (\\<sqsubseteq>)", "by unfold_locales auto"], ["", "sublocale partially_ordered_set \\<subseteq> dual: partially_ordered_set A \"(\\<sqsubseteq>)\\<^sup>-\"\n  rewrites \"sympartp (\\<sqsubseteq>)\\<^sup>- = sympartp (\\<sqsubseteq>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. partially_ordered_set A (\\<lambda>x y. y \\<sqsubseteq> x) &&&\n    sympartp (\\<lambda>x y. y \\<sqsubseteq> x) = sympartp (\\<sqsubseteq>)", "by unfold_locales (auto 0 4)"], ["", "sublocale total_pseudo_ordered_set \\<subseteq> dual: total_pseudo_ordered_set A \"(\\<sqsubseteq>)\\<^sup>-\"\n  rewrites \"sympartp (\\<sqsubseteq>)\\<^sup>- = sympartp (\\<sqsubseteq>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. total_pseudo_ordered_set A (\\<lambda>x y. y \\<sqsubseteq> x) &&&\n    sympartp (\\<lambda>x y. y \\<sqsubseteq> x) = sympartp (\\<sqsubseteq>)", "by unfold_locales (auto 0 4)"], ["", "sublocale total_quasi_ordered_set \\<subseteq> dual: total_quasi_ordered_set A \"(\\<sqsubseteq>)\\<^sup>-\"\n  rewrites \"sympartp (\\<sqsubseteq>)\\<^sup>- = sympartp (\\<sqsubseteq>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. total_quasi_ordered_set A (\\<lambda>x y. y \\<sqsubseteq> x) &&&\n    sympartp (\\<lambda>x y. y \\<sqsubseteq> x) = sympartp (\\<sqsubseteq>)", "by unfold_locales auto"], ["", "sublocale compatible_ordering \\<subseteq> dual: compatible_ordering A \"(\\<sqsubseteq>)\\<^sup>-\" \"(\\<sqsubset>)\\<^sup>-\"\n  rewrites \"sympartp (\\<sqsubseteq>)\\<^sup>- = sympartp (\\<sqsubseteq>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. compatible_ordering A (\\<lambda>x y. y \\<sqsubseteq> x)\n     (\\<lambda>x y. y \\<sqsubset> x) &&&\n    sympartp (\\<lambda>x y. y \\<sqsubseteq> x) = sympartp (\\<sqsubseteq>)", "apply unfold_locales"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>y \\<sqsubseteq> x; z \\<sqsubset> y; x \\<in> A; y \\<in> A;\n        z \\<in> A\\<rbrakk>\n       \\<Longrightarrow> z \\<sqsubset> x\n 2. \\<And>x y z.\n       \\<lbrakk>y \\<sqsubset> x; z \\<sqsubseteq> y; x \\<in> A; y \\<in> A;\n        z \\<in> A\\<rbrakk>\n       \\<Longrightarrow> z \\<sqsubset> x\n 3. \\<And>x y.\n       \\<lbrakk>y \\<sqsubset> x; x \\<in> A; y \\<in> A\\<rbrakk>\n       \\<Longrightarrow> y \\<sqsubseteq> x\n 4. sympartp (\\<lambda>x y. y \\<sqsubseteq> x) = sympartp (\\<sqsubseteq>)", "by (auto dest: compat_left compat_right strict_implies_weak)"], ["", "sublocale attractive_ordering \\<subseteq> dual: attractive_ordering A \"(\\<sqsubseteq>)\\<^sup>-\" \"(\\<sqsubset>)\\<^sup>-\"\n  rewrites \"sympartp (\\<sqsubseteq>)\\<^sup>- = sympartp (\\<sqsubseteq>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. attractive_ordering A (\\<lambda>x y. y \\<sqsubseteq> x)\n     (\\<lambda>x y. y \\<sqsubset> x) &&&\n    sympartp (\\<lambda>x y. y \\<sqsubseteq> x) = sympartp (\\<sqsubseteq>)", "by unfold_locales auto"], ["", "sublocale pseudo_ordering \\<subseteq> dual: pseudo_ordering A \"(\\<sqsubseteq>)\\<^sup>-\" \"(\\<sqsubset>)\\<^sup>-\"\n  rewrites \"sympartp (\\<sqsubseteq>)\\<^sup>- = sympartp (\\<sqsubseteq>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pseudo_ordering A (\\<lambda>x y. y \\<sqsubseteq> x)\n     (\\<lambda>x y. y \\<sqsubset> x) &&&\n    sympartp (\\<lambda>x y. y \\<sqsubseteq> x) = sympartp (\\<sqsubseteq>)", "by unfold_locales (auto 0 4)"], ["", "sublocale quasi_ordering \\<subseteq> dual: quasi_ordering A \"(\\<sqsubseteq>)\\<^sup>-\" \"(\\<sqsubset>)\\<^sup>-\"\n  rewrites \"sympartp (\\<sqsubseteq>)\\<^sup>- = sympartp (\\<sqsubseteq>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. quasi_ordering A (\\<lambda>x y. y \\<sqsubseteq> x)\n     (\\<lambda>x y. y \\<sqsubset> x) &&&\n    sympartp (\\<lambda>x y. y \\<sqsubseteq> x) = sympartp (\\<sqsubseteq>)", "by unfold_locales auto"], ["", "sublocale partial_ordering \\<subseteq> dual: partial_ordering A \"(\\<sqsubseteq>)\\<^sup>-\" \"(\\<sqsubset>)\\<^sup>-\"\n  rewrites \"sympartp (\\<sqsubseteq>)\\<^sup>- = sympartp (\\<sqsubseteq>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. partial_ordering A (\\<lambda>x y. y \\<sqsubseteq> x)\n     (\\<lambda>x y. y \\<sqsubset> x) &&&\n    sympartp (\\<lambda>x y. y \\<sqsubseteq> x) = sympartp (\\<sqsubseteq>)", "by unfold_locales (auto 0 4)"], ["", "sublocale total_ordering \\<subseteq> dual: total_ordering A \"(\\<sqsubseteq>)\\<^sup>-\" \"(\\<sqsubset>)\\<^sup>-\"\n  rewrites \"sympartp (\\<sqsubseteq>)\\<^sup>- = sympartp (\\<sqsubseteq>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. total_ordering A (\\<lambda>x y. y \\<sqsubseteq> x)\n     (\\<lambda>x y. y \\<sqsubset> x) &&&\n    sympartp (\\<lambda>x y. y \\<sqsubseteq> x) = sympartp (\\<sqsubseteq>)", "by unfold_locales (auto 0 4)"], ["", "lemma(in antisymmetric) monotone_extreme_imp_extreme_bound_iff:\n  fixes ir (infix \"\\<preceq>\" 50)\n  assumes \"f ` C \\<subseteq> A\" and \"monotone_on C (\\<preceq>) (\\<sqsubseteq>) f\" and i: \"extreme C (\\<preceq>) i\"\n  shows \"extreme_bound A (\\<sqsubseteq>) (f ` C) x \\<longleftrightarrow> f i = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. extreme_bound A (\\<sqsubseteq>) (f ` C) x = (f i = x)", "using dual.extreme_unique monotone_extreme_extreme_boundI[OF assms]"], ["proof (prove)\nusing this:\n  \\<lbrakk>?X \\<subseteq> A;\n   extreme ?X (\\<lambda>x y. y \\<sqsubseteq> x) ?x\\<rbrakk>\n  \\<Longrightarrow> extreme ?X (\\<lambda>x y. y \\<sqsubseteq> x) ?y =\n                    (?x = ?y)\n  ?x = f i \\<Longrightarrow> extreme_bound A (\\<sqsubseteq>) (f ` C) ?x\n\ngoal (1 subgoal):\n 1. extreme_bound A (\\<sqsubseteq>) (f ` C) x = (f i = x)", "by auto"], ["", "subsection \\<open>Instantiations\\<close>"], ["", "text \\<open>Finally, we instantiate our classes for sanity check.\\<close>"], ["", "instance nat :: linorder"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS(nat, linorder_class)", ".."], ["", "text \\<open>Pointwise ordering of functions are compatible only if the weak part is transitive.\\<close>"], ["", "instance \"fun\" :: (type,qorder) compat"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS('a \\<Rightarrow> 'b, compat_class)", "proof (intro_classes, unfold_locales)"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>x. x \\<in> UNIV \\<Longrightarrow> x \\<le> x\n 2. \\<And>x. x \\<in> UNIV \\<Longrightarrow> \\<not> x < x\n 3. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; y < z; x \\<in> UNIV; y \\<in> UNIV;\n        z \\<in> UNIV\\<rbrakk>\n       \\<Longrightarrow> x < z\n 4. \\<And>x y z.\n       \\<lbrakk>x < y; y \\<le> z; x \\<in> UNIV; y \\<in> UNIV;\n        z \\<in> UNIV\\<rbrakk>\n       \\<Longrightarrow> x < z\n 5. \\<And>x y.\n       \\<lbrakk>x < y; x \\<in> UNIV; y \\<in> UNIV\\<rbrakk>\n       \\<Longrightarrow> x \\<le> y", "note [simp] = le_fun_def less_fun_def"], ["proof (state)\nthis:\n  (?f \\<le> ?g) = (\\<forall>x. ?f x \\<le> ?g x)\n  (?f < ?g) = (?f \\<le> ?g \\<and> \\<not> ?g \\<le> ?f)\n\ngoal (5 subgoals):\n 1. \\<And>x. x \\<in> UNIV \\<Longrightarrow> x \\<le> x\n 2. \\<And>x. x \\<in> UNIV \\<Longrightarrow> \\<not> x < x\n 3. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; y < z; x \\<in> UNIV; y \\<in> UNIV;\n        z \\<in> UNIV\\<rbrakk>\n       \\<Longrightarrow> x < z\n 4. \\<And>x y z.\n       \\<lbrakk>x < y; y \\<le> z; x \\<in> UNIV; y \\<in> UNIV;\n        z \\<in> UNIV\\<rbrakk>\n       \\<Longrightarrow> x < z\n 5. \\<And>x y.\n       \\<lbrakk>x < y; x \\<in> UNIV; y \\<in> UNIV\\<rbrakk>\n       \\<Longrightarrow> x \\<le> y", "fix f g h :: \"'a \\<Rightarrow> 'b\""], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>x. x \\<in> UNIV \\<Longrightarrow> x \\<le> x\n 2. \\<And>x. x \\<in> UNIV \\<Longrightarrow> \\<not> x < x\n 3. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; y < z; x \\<in> UNIV; y \\<in> UNIV;\n        z \\<in> UNIV\\<rbrakk>\n       \\<Longrightarrow> x < z\n 4. \\<And>x y z.\n       \\<lbrakk>x < y; y \\<le> z; x \\<in> UNIV; y \\<in> UNIV;\n        z \\<in> UNIV\\<rbrakk>\n       \\<Longrightarrow> x < z\n 5. \\<And>x y.\n       \\<lbrakk>x < y; x \\<in> UNIV; y \\<in> UNIV\\<rbrakk>\n       \\<Longrightarrow> x \\<le> y", "{"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>x. x \\<in> UNIV \\<Longrightarrow> x \\<le> x\n 2. \\<And>x. x \\<in> UNIV \\<Longrightarrow> \\<not> x < x\n 3. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; y < z; x \\<in> UNIV; y \\<in> UNIV;\n        z \\<in> UNIV\\<rbrakk>\n       \\<Longrightarrow> x < z\n 4. \\<And>x y z.\n       \\<lbrakk>x < y; y \\<le> z; x \\<in> UNIV; y \\<in> UNIV;\n        z \\<in> UNIV\\<rbrakk>\n       \\<Longrightarrow> x < z\n 5. \\<And>x y.\n       \\<lbrakk>x < y; x \\<in> UNIV; y \\<in> UNIV\\<rbrakk>\n       \\<Longrightarrow> x \\<le> y", "assume fg: \"f \\<le> g\" and gh: \"g < h\""], ["proof (state)\nthis:\n  f \\<le> g\n  g < h\n\ngoal (5 subgoals):\n 1. \\<And>x. x \\<in> UNIV \\<Longrightarrow> x \\<le> x\n 2. \\<And>x. x \\<in> UNIV \\<Longrightarrow> \\<not> x < x\n 3. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; y < z; x \\<in> UNIV; y \\<in> UNIV;\n        z \\<in> UNIV\\<rbrakk>\n       \\<Longrightarrow> x < z\n 4. \\<And>x y z.\n       \\<lbrakk>x < y; y \\<le> z; x \\<in> UNIV; y \\<in> UNIV;\n        z \\<in> UNIV\\<rbrakk>\n       \\<Longrightarrow> x < z\n 5. \\<And>x y.\n       \\<lbrakk>x < y; x \\<in> UNIV; y \\<in> UNIV\\<rbrakk>\n       \\<Longrightarrow> x \\<le> y", "show \"f < h\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f < h", "proof (unfold less_fun_def, intro conjI le_funI notI)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x. f x \\<le> h x\n 2. h \\<le> f \\<Longrightarrow> False", "from fg"], ["proof (chain)\npicking this:\n  f \\<le> g", "have \"f x \\<le> g x\" for x"], ["proof (prove)\nusing this:\n  f \\<le> g\n\ngoal (1 subgoal):\n 1. f x \\<le> g x", "by auto"], ["proof (state)\nthis:\n  f ?x \\<le> g ?x\n\ngoal (2 subgoals):\n 1. \\<And>x. f x \\<le> h x\n 2. h \\<le> f \\<Longrightarrow> False", "also"], ["proof (state)\nthis:\n  f ?x \\<le> g ?x\n\ngoal (2 subgoals):\n 1. \\<And>x. f x \\<le> h x\n 2. h \\<le> f \\<Longrightarrow> False", "from gh"], ["proof (chain)\npicking this:\n  g < h", "have \"g x \\<le> h x\" for x"], ["proof (prove)\nusing this:\n  g < h\n\ngoal (1 subgoal):\n 1. g x \\<le> h x", "by auto"], ["proof (state)\nthis:\n  g ?x \\<le> h ?x\n\ngoal (2 subgoals):\n 1. \\<And>x. f x \\<le> h x\n 2. h \\<le> f \\<Longrightarrow> False", "finally (order.trans)"], ["proof (chain)\npicking this:\n  f ?x1 \\<le> h ?x1", "show \"f x \\<le> h x\" for x"], ["proof (prove)\nusing this:\n  f ?x1 \\<le> h ?x1\n\ngoal (1 subgoal):\n 1. f x \\<le> h x", "."], ["proof (state)\nthis:\n  f ?x \\<le> h ?x\n\ngoal (1 subgoal):\n 1. h \\<le> f \\<Longrightarrow> False", "assume hf: \"h \\<le> f\""], ["proof (state)\nthis:\n  h \\<le> f\n\ngoal (1 subgoal):\n 1. h \\<le> f \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  h \\<le> f", "have \"h x \\<le> f x\" for x"], ["proof (prove)\nusing this:\n  h \\<le> f\n\ngoal (1 subgoal):\n 1. h x \\<le> f x", "by auto"], ["proof (state)\nthis:\n  h ?x \\<le> f ?x\n\ngoal (1 subgoal):\n 1. h \\<le> f \\<Longrightarrow> False", "also"], ["proof (state)\nthis:\n  h ?x \\<le> f ?x\n\ngoal (1 subgoal):\n 1. h \\<le> f \\<Longrightarrow> False", "from fg"], ["proof (chain)\npicking this:\n  f \\<le> g", "have \"f x \\<le> g x\" for x"], ["proof (prove)\nusing this:\n  f \\<le> g\n\ngoal (1 subgoal):\n 1. f x \\<le> g x", "by auto"], ["proof (state)\nthis:\n  f ?x \\<le> g ?x\n\ngoal (1 subgoal):\n 1. h \\<le> f \\<Longrightarrow> False", "finally"], ["proof (chain)\npicking this:\n  h ?x1 \\<le> g ?x1", "have \"h \\<le> g\""], ["proof (prove)\nusing this:\n  h ?x1 \\<le> g ?x1\n\ngoal (1 subgoal):\n 1. h \\<le> g", "by auto"], ["proof (state)\nthis:\n  h \\<le> g\n\ngoal (1 subgoal):\n 1. h \\<le> f \\<Longrightarrow> False", "with gh"], ["proof (chain)\npicking this:\n  g < h\n  h \\<le> g", "show False"], ["proof (prove)\nusing this:\n  g < h\n  h \\<le> g\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  f < h\n\ngoal (4 subgoals):\n 1. \\<And>x. x \\<in> UNIV \\<Longrightarrow> x \\<le> x\n 2. \\<And>x. x \\<in> UNIV \\<Longrightarrow> \\<not> x < x\n 3. \\<And>x y z.\n       \\<lbrakk>x < y; y \\<le> z; x \\<in> UNIV; y \\<in> UNIV;\n        z \\<in> UNIV\\<rbrakk>\n       \\<Longrightarrow> x < z\n 4. \\<And>x y.\n       \\<lbrakk>x < y; x \\<in> UNIV; y \\<in> UNIV\\<rbrakk>\n       \\<Longrightarrow> x \\<le> y", "}"], ["proof (state)\nthis:\n  \\<lbrakk>f \\<le> g; g < h\\<rbrakk> \\<Longrightarrow> f < h\n\ngoal (4 subgoals):\n 1. \\<And>x. x \\<in> UNIV \\<Longrightarrow> x \\<le> x\n 2. \\<And>x. x \\<in> UNIV \\<Longrightarrow> \\<not> x < x\n 3. \\<And>x y z.\n       \\<lbrakk>x < y; y \\<le> z; x \\<in> UNIV; y \\<in> UNIV;\n        z \\<in> UNIV\\<rbrakk>\n       \\<Longrightarrow> x < z\n 4. \\<And>x y.\n       \\<lbrakk>x < y; x \\<in> UNIV; y \\<in> UNIV\\<rbrakk>\n       \\<Longrightarrow> x \\<le> y", "{"], ["proof (state)\nthis:\n  \\<lbrakk>f \\<le> g; g < h\\<rbrakk> \\<Longrightarrow> f < h\n\ngoal (4 subgoals):\n 1. \\<And>x. x \\<in> UNIV \\<Longrightarrow> x \\<le> x\n 2. \\<And>x. x \\<in> UNIV \\<Longrightarrow> \\<not> x < x\n 3. \\<And>x y z.\n       \\<lbrakk>x < y; y \\<le> z; x \\<in> UNIV; y \\<in> UNIV;\n        z \\<in> UNIV\\<rbrakk>\n       \\<Longrightarrow> x < z\n 4. \\<And>x y.\n       \\<lbrakk>x < y; x \\<in> UNIV; y \\<in> UNIV\\<rbrakk>\n       \\<Longrightarrow> x \\<le> y", "assume fg: \"f < g\" and gh: \"g \\<le> h\""], ["proof (state)\nthis:\n  f < g\n  g \\<le> h\n\ngoal (4 subgoals):\n 1. \\<And>x. x \\<in> UNIV \\<Longrightarrow> x \\<le> x\n 2. \\<And>x. x \\<in> UNIV \\<Longrightarrow> \\<not> x < x\n 3. \\<And>x y z.\n       \\<lbrakk>x < y; y \\<le> z; x \\<in> UNIV; y \\<in> UNIV;\n        z \\<in> UNIV\\<rbrakk>\n       \\<Longrightarrow> x < z\n 4. \\<And>x y.\n       \\<lbrakk>x < y; x \\<in> UNIV; y \\<in> UNIV\\<rbrakk>\n       \\<Longrightarrow> x \\<le> y", "show \"f < h\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f < h", "proof (unfold less_fun_def, intro conjI le_funI notI)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x. f x \\<le> h x\n 2. h \\<le> f \\<Longrightarrow> False", "from fg"], ["proof (chain)\npicking this:\n  f < g", "have \"f x \\<le> g x\" for x"], ["proof (prove)\nusing this:\n  f < g\n\ngoal (1 subgoal):\n 1. f x \\<le> g x", "by auto"], ["proof (state)\nthis:\n  f ?x \\<le> g ?x\n\ngoal (2 subgoals):\n 1. \\<And>x. f x \\<le> h x\n 2. h \\<le> f \\<Longrightarrow> False", "also"], ["proof (state)\nthis:\n  f ?x \\<le> g ?x\n\ngoal (2 subgoals):\n 1. \\<And>x. f x \\<le> h x\n 2. h \\<le> f \\<Longrightarrow> False", "from gh"], ["proof (chain)\npicking this:\n  g \\<le> h", "have \"g x \\<le> h x\" for x"], ["proof (prove)\nusing this:\n  g \\<le> h\n\ngoal (1 subgoal):\n 1. g x \\<le> h x", "by auto"], ["proof (state)\nthis:\n  g ?x \\<le> h ?x\n\ngoal (2 subgoals):\n 1. \\<And>x. f x \\<le> h x\n 2. h \\<le> f \\<Longrightarrow> False", "finally"], ["proof (chain)\npicking this:\n  f ?x1 \\<le> h ?x1", "show \"f x \\<le> h x\" for x"], ["proof (prove)\nusing this:\n  f ?x1 \\<le> h ?x1\n\ngoal (1 subgoal):\n 1. f x \\<le> h x", "."], ["proof (state)\nthis:\n  f ?x \\<le> h ?x\n\ngoal (1 subgoal):\n 1. h \\<le> f \\<Longrightarrow> False", "from gh"], ["proof (chain)\npicking this:\n  g \\<le> h", "have \"g x \\<le> h x\" for x"], ["proof (prove)\nusing this:\n  g \\<le> h\n\ngoal (1 subgoal):\n 1. g x \\<le> h x", "by auto"], ["proof (state)\nthis:\n  g ?x \\<le> h ?x\n\ngoal (1 subgoal):\n 1. h \\<le> f \\<Longrightarrow> False", "also"], ["proof (state)\nthis:\n  g ?x \\<le> h ?x\n\ngoal (1 subgoal):\n 1. h \\<le> f \\<Longrightarrow> False", "assume hf: \"h \\<le> f\""], ["proof (state)\nthis:\n  h \\<le> f\n\ngoal (1 subgoal):\n 1. h \\<le> f \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  h \\<le> f", "have \"h x \\<le> f x\" for x"], ["proof (prove)\nusing this:\n  h \\<le> f\n\ngoal (1 subgoal):\n 1. h x \\<le> f x", "by auto"], ["proof (state)\nthis:\n  h ?x \\<le> f ?x\n\ngoal (1 subgoal):\n 1. h \\<le> f \\<Longrightarrow> False", "finally"], ["proof (chain)\npicking this:\n  g ?x1 \\<le> f ?x1", "have \"g \\<le> f\""], ["proof (prove)\nusing this:\n  g ?x1 \\<le> f ?x1\n\ngoal (1 subgoal):\n 1. g \\<le> f", "by auto"], ["proof (state)\nthis:\n  g \\<le> f\n\ngoal (1 subgoal):\n 1. h \\<le> f \\<Longrightarrow> False", "with fg"], ["proof (chain)\npicking this:\n  f < g\n  g \\<le> f", "show False"], ["proof (prove)\nusing this:\n  f < g\n  g \\<le> f\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  f < h\n\ngoal (3 subgoals):\n 1. \\<And>x. x \\<in> UNIV \\<Longrightarrow> x \\<le> x\n 2. \\<And>x. x \\<in> UNIV \\<Longrightarrow> \\<not> x < x\n 3. \\<And>x y.\n       \\<lbrakk>x < y; x \\<in> UNIV; y \\<in> UNIV\\<rbrakk>\n       \\<Longrightarrow> x \\<le> y", "}"], ["proof (state)\nthis:\n  \\<lbrakk>f < g; g \\<le> h\\<rbrakk> \\<Longrightarrow> f < h\n\ngoal (3 subgoals):\n 1. \\<And>x. x \\<in> UNIV \\<Longrightarrow> x \\<le> x\n 2. \\<And>x. x \\<in> UNIV \\<Longrightarrow> \\<not> x < x\n 3. \\<And>x y.\n       \\<lbrakk>x < y; x \\<in> UNIV; y \\<in> UNIV\\<rbrakk>\n       \\<Longrightarrow> x \\<le> y", "show \"f < g \\<Longrightarrow> f \\<le> g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f < g \\<Longrightarrow> f \\<le> g", "by auto"], ["proof (state)\nthis:\n  f < g \\<Longrightarrow> f \\<le> g\n\ngoal (2 subgoals):\n 1. \\<And>x. x \\<in> UNIV \\<Longrightarrow> x \\<le> x\n 2. \\<And>x. x \\<in> UNIV \\<Longrightarrow> \\<not> x < x", "show \"\\<not>f < f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> f < f", "by auto"], ["proof (state)\nthis:\n  \\<not> f < f\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> UNIV \\<Longrightarrow> x \\<le> x", "show \"f \\<le> f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<le> f", "by auto"], ["proof (state)\nthis:\n  f \\<le> f\n\ngoal:\nNo subgoals!", "qed"], ["", "instance \"fun\" :: (type,qorder) qorder"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS('a \\<Rightarrow> 'b, qorder_class)", "apply intro_classes"], ["proof (prove)\ngoal (1 subgoal):\n 1. quasi_ordering UNIV (\\<le>) (<)", "apply unfold_locales"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; y \\<le> z; x \\<in> UNIV; y \\<in> UNIV;\n        z \\<in> UNIV\\<rbrakk>\n       \\<Longrightarrow> x \\<le> z", "by (auto simp: le_fun_def dest: order.trans)"], ["", "instance \"fun\" :: (type,porder) porder"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS('a \\<Rightarrow> 'b, porder_class)", "apply intro_classes"], ["proof (prove)\ngoal (1 subgoal):\n 1. partial_ordering UNIV (\\<le>) (<)", "apply unfold_locales"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<le> y; y \\<le> x; x \\<in> UNIV; y \\<in> UNIV\\<rbrakk>\n       \\<Longrightarrow> x = y", "proof (intro ext)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y xa.\n       \\<lbrakk>x \\<le> y; y \\<le> x; x \\<in> UNIV; y \\<in> UNIV\\<rbrakk>\n       \\<Longrightarrow> x xa = y xa", "fix f g :: \"'a \\<Rightarrow> 'b\" and x :: 'a"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y xa.\n       \\<lbrakk>x \\<le> y; y \\<le> x; x \\<in> UNIV; y \\<in> UNIV\\<rbrakk>\n       \\<Longrightarrow> x xa = y xa", "assume fg: \"f \\<le> g\" and gf: \"g \\<le> f\""], ["proof (state)\nthis:\n  f \\<le> g\n  g \\<le> f\n\ngoal (1 subgoal):\n 1. \\<And>x y xa.\n       \\<lbrakk>x \\<le> y; y \\<le> x; x \\<in> UNIV; y \\<in> UNIV\\<rbrakk>\n       \\<Longrightarrow> x xa = y xa", "then"], ["proof (chain)\npicking this:\n  f \\<le> g\n  g \\<le> f", "have \"f x \\<le> g x\" and \"g x \\<le> f x\""], ["proof (prove)\nusing this:\n  f \\<le> g\n  g \\<le> f\n\ngoal (1 subgoal):\n 1. f x \\<le> g x &&& g x \\<le> f x", "by (auto elim: le_funE)"], ["proof (state)\nthis:\n  f x \\<le> g x\n  g x \\<le> f x\n\ngoal (1 subgoal):\n 1. \\<And>x y xa.\n       \\<lbrakk>x \\<le> y; y \\<le> x; x \\<in> UNIV; y \\<in> UNIV\\<rbrakk>\n       \\<Longrightarrow> x xa = y xa", "from order.antisym[OF this]"], ["proof (chain)\npicking this:\n  f x = g x", "show \"f x = g x\""], ["proof (prove)\nusing this:\n  f x = g x\n\ngoal (1 subgoal):\n 1. f x = g x", "by auto"], ["proof (state)\nthis:\n  f x = g x\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}