{"file_name": "/home/qj213/afp-2021-10-22/thys/Verified-Prover/Prover.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Verified-Prover", "problem_names": ["lemma size_subst[simp]: \"\\<forall>m. size (subst m f) = size f\"", "lemma size_finst[simp]: \"size (finst f m) = size f\"", "lemma sfv_nil: \"sfv [] = []\"", "lemma sfv_cons: \"sfv (a#list) = (fv a) @ (sfv list) \"", "lemma maxvar: \"\\<forall>v \\<in> set vs. v \\<le> maxvar vs\"", "lemma newvar: \"newvar vs \\<notin> (set vs)\"", "lemma patom:  \"(n,(m,PAtom p vs)#xs) \\<in> deriv(nfs) ==> ~is_axiom (s_of_ns ((m,PAtom p vs)#xs)) ==> (Suc n,xs@[(0,PAtom p vs)]) \\<in> deriv(nfs)\"\n  and natom:  \"(n,(m,NAtom p vs)#xs) \\<in> deriv(nfs) ==> ~is_axiom (s_of_ns ((m,NAtom p vs)#xs)) ==> (Suc n,xs@[(0,NAtom p vs)]) \\<in> deriv(nfs)\"\n  and fconj1: \"(n,(m,FConj f g)#xs) \\<in> deriv(nfs) ==> ~is_axiom (s_of_ns ((m,FConj f g)#xs)) ==> (Suc n,xs@[(0,f)]) \\<in> deriv(nfs)\"\n  and fconj2: \"(n,(m,FConj f g)#xs) \\<in> deriv(nfs) ==> ~is_axiom (s_of_ns ((m,FConj f g)#xs)) ==> (Suc n,xs@[(0,g)]) \\<in> deriv(nfs)\"\n  and fdisj:  \"(n,(m,FDisj f g)#xs) \\<in> deriv(nfs) ==> ~is_axiom (s_of_ns ((m,FDisj f g)#xs)) ==> (Suc n,xs@[(0,f),(0,g)]) \\<in> deriv(nfs)\"\n  and fall:   \"(n,(m,FAll f)#xs) \\<in> deriv(nfs) ==> ~is_axiom (s_of_ns ((m,FAll f)#xs)) ==> (Suc n,xs@[(0,finst f (newvar (sfv (s_of_ns ((m,FAll f)#xs)))))]) \\<in> deriv(nfs)\" \n  and fex:    \"(n,(m,FEx f)#xs) \\<in> deriv(nfs) ==> ~is_axiom (s_of_ns ((m,FEx f)#xs)) ==> (Suc n,xs@[(0,finst f m),(Suc m,FEx f)]) \\<in> deriv(nfs)\"", "lemmas not_is_axiom_subs = patom natom fconj1 fconj2 fdisj fall fex", "lemmas[simp] = init", "lemmas [intro] = init step", "lemma deriv0[simp]: \"(0,x) \\<in> deriv y = (x = y)\"", "lemma deriv_upwards: \"(n,list) \\<in> deriv s ==> ~ is_axiom (s_of_ns (list)) ==> (\\<exists>zs. (Suc n, zs) \\<in> deriv s & zs : set (subs list))\"", "lemma deriv_downwards (*derivSucE*): \"(Suc n, x) \\<in> deriv s ==> \\<exists>y. (n,y) \\<in> deriv s & x : set (subs y) & ~ is_axiom (s_of_ns y)\"", "lemma deriv_deriv_child(*derivSuc*)[rule_format]: \"\\<forall>x y. (Suc n,x) \\<in> deriv y = (\\<exists>z. z : set (subs y) & ~ is_axiom (s_of_ns y) & (n,x) \\<in> deriv z)\"", "lemma deriv_progress: \"(n,a#list) \\<in> deriv s ==> ~ is_axiom (s_of_ns (a#list)) ==> (\\<exists>zs. (Suc n, list@zs) \\<in> deriv s)\"", "lemma inj_inc[simp]: \"inj inc\"", "lemma deriv: \"deriv y = insert (0,y) (inc ` (Union (deriv ` {w. ~is_axiom (s_of_ns y) & w : set (subs y)})))\"", "lemma deriv_is_axiom: \"is_axiom (s_of_ns s) ==> deriv s = {(0,s)}\"", "lemma is_axiom_finite_deriv: \"is_axiom (s_of_ns s) ==> finite (deriv s)\"", "lemma (in loc1) f0: \"infinite (deriv s) ==> f 0 \\<in> (deriv s) & fst (f 0) = 0 & infinite (deriv (snd (f 0))) & ~ is_axiom (s_of_ns (snd (f 0)))\"", "lemma infinite_union: \"finite Y ==> infinite (Union (f ` Y)) ==> \\<exists>y. y \\<in> Y & infinite (f y)\"", "lemma infinite_inj_infinite_image: \"inj_on f Z ==> infinite (f ` Z) = infinite Z\"", "lemma inj_inj_on: \"inj f ==> inj_on f A\"", "lemma collect_disj: \"{x. P x | Q x} = {x. P x} Un {x. Q x}\"", "lemma t: \"finite {w. P w} ==> finite {w. Q w & P w}\"", "lemma finite_subs: \"finite {w. ~is_axiom (s_of_ns y) & w : set (subs y)}\"", "lemma (in loc1) fSuc:\n  shows \"[|\n  f n \\<in> deriv s & fst (f n) = n & infinite (deriv (snd (f n))) & ~is_axiom (s_of_ns (snd (f n)))\n  |] ==> f (Suc n) \\<in> deriv s & fst (f (Suc n)) = Suc n & (snd (f (Suc n))) : set (subs (snd (f n))) & infinite (deriv (snd (f (Suc n)))) & ~is_axiom (s_of_ns (snd (f (Suc n))))\"", "lemma (in loc1) is_path_f_0: \"infinite (deriv s) ==> f 0 = (0,s)\"", "lemma (in loc1) is_path_f': \"infinite (deriv s) ==> \\<forall>n. f n \\<in> deriv s & fst (f n) = n & infinite (deriv (snd (f n))) & ~ is_axiom (s_of_ns (snd (f n)))\"", "lemma (in loc1) is_path_f: \"infinite (deriv s) ==> \\<forall>n. f n \\<in> deriv s & fst (f n) = n & (snd (f (Suc n))) : set (subs (snd (f n))) & infinite (deriv (snd (f n)))\"", "lemma and_lem: \"(a=c) ==> (b=d) ==> (a & b) = (c & d)\"", "lemma or_lem: \"(a=c) ==> (b=d) ==> (a | b) = (c | d)\"", "lemma ball_eq_ball: \"\\<forall>x \\<in> m. P x = Q x ==> (\\<forall>x \\<in> m. P x) = (\\<forall>x \\<in> m. Q x)\"", "lemma bex_eq_bex: \"\\<forall>x \\<in> m. P x = Q x ==> (\\<exists>x \\<in> m. P x) = (\\<exists>x \\<in> m. Q x)\"", "lemma preSuc[simp]:\"\\<forall>n. Suc n \\<in> set A = (n \\<in> set (preSuc A))\"", "lemma FEval_cong: \"\\<forall>e1 e2. (\\<forall>x. x \\<in> set (fv A) --> e1 x = e2 x) --> FEval MI e1 A = FEval MI e2 A\"", "lemma SEval_def2: \"SEval m e s = (\\<exists>f. f \\<in> set s & FEval m e f)\"", "lemma SEval_append: \"SEval m e (xs@ys) = ( (SEval m e xs) | (SEval m e ys))\"", "lemma all_eq_all: \"\\<forall>x. P x = Q x ==> (\\<forall>x. P x) = (\\<forall>x. Q x)\"", "lemma all_conj: \"(\\<forall>x. A x & B x) = ((\\<forall>x. A x) & (\\<forall>x. B x))\"", "lemma SEval_cong: \"(\\<forall>x. x \\<in> set (sfv s) --> e1 x = e2 x) --> SEval m e1 s = SEval m e2 s\"", "lemma fold_compose1: \"(% x. f (g x)) = (f o g)\"", "lemma FEval_subst: \"\\<forall>e f. (FEval MI e (subst f A)) = (FEval MI (e o f) A)\"", "lemma FEval_finst: \"FEval mo e (finst A u) = FEval mo (case_nat (e u) e) A\"", "lemma ball_maxscope: \"(\\<forall>x \\<in> m. P x | Q) ==> (\\<forall>x \\<in> m. P x) | Q \"", "lemma sound_FAll: \"u \\<notin> set (sfv (FAll f#s)) ==> Svalid (s@[finst f u]) ==> Svalid (FAll f#s)\"", "lemma sound_FAll': \"u \\<notin> set (sfv (FAll f#s)) ==> Svalid (s@[finst f u]) ==> Svalid (FAll f#s)\"", "lemma sound_FEx: \"Svalid (s@[finst f u,FEx f]) ==> Svalid (FEx f#s)\"", "lemma max_exists: \"finite (X::nat set) ==> X \\<noteq> {} --> (\\<exists>x. x \\<in> X & (\\<forall>y. y \\<in> X --> y \\<le> x))\"", "lemma inj_finite_image_eq_finite: \"inj_on f Z ==> finite (f ` Z) = finite Z\"", "lemma finite_inc: \"finite (inc ` X) = finite X\"", "lemma finite_deriv_deriv: \"finite (deriv s) ==> finite  (deriv ` {w. ~is_axiom (s_of_ns s) & w : set (subs s)})\"", "lemma is_FEx[simp]: \"~ is_FEx (PAtom p vs)\n  & ~ is_FEx (NAtom p vs)\n  & ~ is_FEx (FConj f g)\n  & ~ is_FEx (FDisj f g)\n  & ~ is_FEx (FAll f)\"", "lemma index0: \"init s ==> \\<forall>u m A. (n, u) \\<in> deriv s --> (m,A) \\<in> (set u) --> (~ is_FEx A) --> m = 0\"", "lemma soundness': \"init s ==> finite (deriv s) ==> m \\<in> (fst ` (deriv s)) ==> \\<forall>y u. (y,u) \\<in> (deriv s) --> y \\<le> m ==> \\<forall>n t. h = m - n & (n,t) \\<in> deriv s --> Svalid (s_of_ns t)\"", "lemma [simp]: \"s_of_ns (ns_of_s s) = s\"", "lemma soundness: \"finite (deriv (ns_of_s s)) ==> Svalid s\"", "lemma (in loc1) progress: \"infinite (deriv s) ==> snd (f n) = a#list --> (\\<exists>zs'. snd (f (Suc n)) = list@zs')\"", "lemma (in loc1) contains_considers': \"infinite (deriv s) ==> \\<forall>n y ys. snd (f n) = xs@y#ys --> (\\<exists>m zs'. snd (f (n+m)) = y#zs')\"", "lemma list_decomp[rule_format]: \"v \\<in> set p --> (\\<exists> xs ys. p = xs@(v#ys) \\<and> v \\<notin> set xs)\"", "lemma (in loc1) contains_considers: \"infinite (deriv s) ==> contains f n y ==> (\\<exists>m. considers f (n+m) y)\"", "lemma (in loc1) contains_propagates_patoms[rule_format]: \"infinite (deriv s) ==> contains f n (0, PAtom p vs) --> contains f (n+q) (0, PAtom p vs)\"", "lemma (in loc1) contains_propagates_natoms[rule_format]: \"infinite (deriv s) ==> contains f n (0, NAtom p vs) --> contains f (n+q) (0, NAtom p vs)\"", "lemma (in loc1) contains_propagates_fconj: \"infinite (deriv s) ==> contains f n (0, FConj g h) ==> (\\<exists>y. contains f (n+y) (0,g) | contains f (n+y) (0,h))\"", "lemma (in loc1) contains_propagates_fdisj: \"infinite (deriv s) ==> contains f n (0, FDisj g h) ==> (\\<exists>y. contains f (n+y) (0,g) & contains f (n+y) (0,h))\"", "lemma (in loc1) contains_propagates_fall: \"infinite (deriv s) ==> contains f n (0, FAll g) \n  ==> (\\<exists>y. contains f (Suc(n+y)) (0,finst g (newvar (sfv (s_of_ns (snd (f (n+y))))))))\" \\<comment> \\<open>may need constraint on fv\\<close>", "lemma (in loc1) contains_propagates_fex: \"infinite (deriv s) ==> contains f n (m, FEx g) \n  ==> (\\<exists>y. \n  (contains f (n+y) (0,finst g m))\n  & (contains f (n+y) (Suc m,FEx g)))\"", "lemma (in loc1) FEx_downward: \"infinite (deriv s) ==> init s ==> \\<forall>m. (Suc m,FEx g) \\<in> set (snd (f n)) --> (\\<exists>n'. (m, FEx g) \\<in> set (snd (f n')))\"", "lemma (in loc1) FEx0: \"infinite (deriv s) ==> init s ==> \\<forall>n. contains f n (m,FEx g) --> (\\<exists>n'. contains f n' (0, FEx g))\"", "lemma (in loc1) FEx_upward': \"infinite (deriv s) ==> init s ==> \\<forall>n. contains f n (0, FEx g) --> (\\<exists>n'. contains f n' (m, FEx g))\"", "lemma (in loc1) FEx_upward: \"infinite (deriv s) ==> init s ==> contains f n (m, FEx g) ==> (\\<forall>m'. \\<exists>n'. contains f n' (0, finst g m'))\"", "lemma uton_ntou: \"uton (ntou x) = x\"", "lemma map_uton_ntou[simp]: \"map uton (map ntou xs) = xs\"", "lemma ntou_uton: \"x \\<in> range ntou ==> ntou (uton x) = x\"", "lemma is_env_model_ntou: \"is_env (model s) ntou\"", "lemma (in loc1) [simp]: \"infinite (deriv s) ==> init s ==> (contains f n (m,A)) ==> ~ is_FEx A ==> m = 0\"", "lemma (in loc2) model': \n  notes [simp] = FEval_subst\n  notes [simp del] = is_axiom.simps\n  shows \"infinite (deriv s) ==> init s ==> \\<forall>A. size A = h --> (\\<forall>m n. contains f n (m,A) --> ~ (FEval mo ntou A))\"", "lemma (in loc2) model: \"infinite (deriv s) ==> init s ==> (\\<forall>A m n. contains f n (m,A) --> ~ (FEval mo ntou A))\"", "lemma (in loc2) completeness': \"infinite (deriv s) ==> init s ==> \\<forall>mA \\<in> set s. ~ FEval mo ntou (snd mA)\" \\<comment> \\<open>FIXME tidy deriv s so that s consists of formulae only?\\<close>", "lemma completeness': \"infinite (deriv s) ==> init s ==> \\<forall>mA \\<in> set s. ~ FEval (model s) ntou (snd mA)\"", "lemma completeness'': \"infinite (deriv (ns_of_s s)) ==> init (ns_of_s s) ==> \\<forall>A. A \\<in> set s --> ~ FEval (model (ns_of_s s)) ntou A\"", "lemma completeness: \"infinite (deriv (ns_of_s s)) ==> ~ Svalid s\"", "lemma \"Svalid s = finite (deriv (ns_of_s s))\"", "lemma iter: \"\\<forall>a. (iter g (g a) n) = (g (iter g a n))\"", "lemma ex_iter': \"(\\<exists>n. R (iter g a n)) = (R a | (\\<exists>n. R (iter g (g a) n)))\"", "lemma ex_iter: \"(\\<exists>n. R (iter g a n)) = (if R a then True else (\\<exists>n. R (iter g (g a) n)))\"", "lemma f_upwards: \"f s n = [] ==> f s (n+m) = []\"", "lemma flatten_append: \"flatten (xs@ys) = ((flatten xs) @ (flatten ys))\"", "lemma set_flatten: \"set (flatten xs) = Union (set ` set xs)\"", "lemma f: \"\\<forall>x. ((n,x) \\<in> deriv s) = (x \\<in> set (f [s] n))\"", "lemma deriv_f: \"deriv s = (\\<Union>x. set (map (Pair x) (f [s] x)))\"", "lemma finite_f: \"finite (set (f s x))\"", "lemma finite_deriv: \"finite (deriv s) = (\\<exists>m. f [s] m = [])\"", "lemma ex_iter_fSucn: \"(\\<exists>m. iter (% x. flat (map subs x)) l m = []) = (if l = [] then True else (\\<exists>n. (iter (% x. flat (map subs x)) ((% x. flat (map subs x)) l) n) = []))\"", "lemma prove': \"prove' l = (if l = [] then True else prove' ((% x. flatten (map subs x)) l))\"", "lemma finite_deriv_prove: \"finite (deriv s) = prove s\"", "lemma \"(\\<exists>x. A x | B x) --> ( (\\<exists>x. B x) | (\\<exists>x. A x))\"", "lemma \"((\\<exists>x. A x | B x) --> ( (\\<exists>x. B x) | (\\<exists>x. A x)))\n  = ( (\\<forall>x. ~ A x & ~ B x) | ( (\\<exists>x. B x) | (\\<exists>x. A x)))\"", "lemma membership_simps:\n  \"x \\<in> set [] \\<longleftrightarrow> False\"\n  \"x \\<in> set (y # ys) \\<longleftrightarrow> x = y \\<or> x \\<in> set ys\"", "lemmas ss = list.inject if_True if_False flatten.simps list.map\n  bump_def sfv_def filter.simps is_axiom.simps fst_conv snd_conv\n  form.simps collect_disj inc_def finst_def ns_of_s_def s_of_ns_def\n  Let_def newvar_def subs.simps split_beta append_Nil append_Cons\n  subst.simps nat.simps fv.simps maxvar.simps preSuc.simps simp_thms\n  membership_simps", "lemmas prove'_Nil = prove' [of \"[]\", simplified]", "lemmas prove'_Cons = prove' [of \"x#l\", simplified] for x l", "lemma search: \"finite (deriv [(0,my_f)])\"", "theorem \"check = valid\""], "translations": [["", "lemma size_subst[simp]: \"\\<forall>m. size (subst m f) = size f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>m. size (subst m f) = size f", "by (induct f) (force+)"], ["", "definition\n  finst :: \"form => var => form\" where\n  \"finst body w = (subst (% v. case v of 0 => w | Suc n => n) body)\""], ["", "lemma size_finst[simp]: \"size (finst f m) = size f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. size (finst f m) = size f", "by (simp add: finst_def)"], ["", "type_synonym seq = \"form list\""], ["", "type_synonym nform = \"nat * form\""], ["", "type_synonym nseq = \"nform list\""], ["", "definition\n  s_of_ns :: \"nseq => seq\" where\n  \"s_of_ns ns = map snd ns\""], ["", "definition\n  ns_of_s :: \"seq => nseq\" where\n  \"ns_of_s s = map (% x. (0,x)) s\""], ["", "primrec flatten :: \"'a list list => 'a list\"\nwhere\n  \"flatten [] = []\"\n| \"flatten (a#list) = (a@(flatten list))\""], ["", "definition\n  sfv :: \"seq => var list\" where\n  \"sfv s = flatten (map fv s)\""], ["", "lemma sfv_nil: \"sfv [] = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sfv [] = []", "by(force simp: sfv_def)"], ["", "lemma sfv_cons: \"sfv (a#list) = (fv a) @ (sfv list) \""], ["proof (prove)\ngoal (1 subgoal):\n 1. sfv (a # list) = fv a @ sfv list", "by(force simp: sfv_def)"], ["", "primrec maxvar :: \"var list => var\"\nwhere\n  \"maxvar [] = 0\"\n| \"maxvar (a#list) = max a (maxvar list)\""], ["", "lemma maxvar: \"\\<forall>v \\<in> set vs. v \\<le> maxvar vs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>v\\<in>set vs. v \\<le> maxvar vs", "by (induct vs) (auto simp: max_def)"], ["", "definition\n  newvar :: \"var list => var\" where\n  \"newvar vs = (if vs = [] then 0 else Suc (maxvar vs))\"\n  \\<comment> \\<open>note that for newvar to be constructive, need an operation to get a different var from a given set\\<close>"], ["", "lemma newvar: \"newvar vs \\<notin> (set vs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. newvar vs \\<notin> set vs", "using length_pos_if_in_set maxvar newvar_def"], ["proof (prove)\nusing this:\n  ?x \\<in> set ?xs \\<Longrightarrow> 0 < length ?xs\n  \\<forall>v\\<in>set ?vs. v \\<le> maxvar ?vs\n  newvar ?vs = (if ?vs = [] then 0 else Suc (maxvar ?vs))\n\ngoal (1 subgoal):\n 1. newvar vs \\<notin> set vs", "by force"], ["", "(*lemmas newvar_sfv = newvar[of \"sfv s\"]*)"], ["", "primrec subs :: \"nseq => nseq list\"\nwhere\n  \"subs [] = [[]]\"\n| \"subs (x#xs) =\n  (let (m,f) = x in\n                case f of\n                        PAtom p vs => if NAtom p vs : set (map snd xs) then [] else [xs@[(0,PAtom p vs)]]\n                        | NAtom p vs => if PAtom p vs : set (map snd xs) then [] else [xs@[(0,NAtom p vs)]] \n                        | FConj f g => [xs@[(0,f)],xs@[(0,g)]]\n                        | FDisj f g => [xs@[(0,f),(0,g)]]\n                        | FAll f => [xs@[(0,finst f (newvar (sfv (s_of_ns (x#xs)))))]]\n                        | FEx f => [xs@[(0,finst f m),(Suc m,FEx f)]]\n                )\""], ["", "subsection \"Derivations\""], ["", "primrec is_axiom :: \"seq => bool\"\nwhere\n  \"is_axiom [] = False\"\n| \"is_axiom (a#list) = ((? p vs. a = PAtom p vs & NAtom p vs : set list) | (? p vs. a = NAtom p vs & PAtom p vs : set list))\""], ["", "inductive_set\n  deriv :: \"nseq => (nat * nseq) set\"\n  for s :: nseq\nwhere\n  init: \"(0,s) \\<in> deriv s\"\n| step: \"(n,x) \\<in> deriv s ==> y : set (subs x) ==> (Suc n,y) \\<in> deriv s\"\n  \\<comment> \\<open>the closure of the branch at isaxiom\\<close>"], ["", "(*lemma step': \"(n,x) \\<in> deriv s ==> y : set (subs x) ==> ~ is_axiom (s_of_ns x) ==> (Suc n,y) \\<in> deriv s\"*)"], ["", "lemma patom:  \"(n,(m,PAtom p vs)#xs) \\<in> deriv(nfs) ==> ~is_axiom (s_of_ns ((m,PAtom p vs)#xs)) ==> (Suc n,xs@[(0,PAtom p vs)]) \\<in> deriv(nfs)\"\n  and natom:  \"(n,(m,NAtom p vs)#xs) \\<in> deriv(nfs) ==> ~is_axiom (s_of_ns ((m,NAtom p vs)#xs)) ==> (Suc n,xs@[(0,NAtom p vs)]) \\<in> deriv(nfs)\"\n  and fconj1: \"(n,(m,FConj f g)#xs) \\<in> deriv(nfs) ==> ~is_axiom (s_of_ns ((m,FConj f g)#xs)) ==> (Suc n,xs@[(0,f)]) \\<in> deriv(nfs)\"\n  and fconj2: \"(n,(m,FConj f g)#xs) \\<in> deriv(nfs) ==> ~is_axiom (s_of_ns ((m,FConj f g)#xs)) ==> (Suc n,xs@[(0,g)]) \\<in> deriv(nfs)\"\n  and fdisj:  \"(n,(m,FDisj f g)#xs) \\<in> deriv(nfs) ==> ~is_axiom (s_of_ns ((m,FDisj f g)#xs)) ==> (Suc n,xs@[(0,f),(0,g)]) \\<in> deriv(nfs)\"\n  and fall:   \"(n,(m,FAll f)#xs) \\<in> deriv(nfs) ==> ~is_axiom (s_of_ns ((m,FAll f)#xs)) ==> (Suc n,xs@[(0,finst f (newvar (sfv (s_of_ns ((m,FAll f)#xs)))))]) \\<in> deriv(nfs)\" \n  and fex:    \"(n,(m,FEx f)#xs) \\<in> deriv(nfs) ==> ~is_axiom (s_of_ns ((m,FEx f)#xs)) ==> (Suc n,xs@[(0,finst f m),(Suc m,FEx f)]) \\<in> deriv(nfs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<lbrakk>(n, (m, PAtom p vs) # xs) \\<in> deriv nfs;\n       \\<not> is_axiom (s_of_ns ((m, PAtom p vs) # xs))\\<rbrakk>\n      \\<Longrightarrow> (Suc n, xs @ [(0, PAtom p vs)]) \\<in> deriv nfs) &&&\n     (\\<lbrakk>(n, (m, NAtom p vs) # xs) \\<in> deriv nfs;\n       \\<not> is_axiom (s_of_ns ((m, NAtom p vs) # xs))\\<rbrakk>\n      \\<Longrightarrow> (Suc n, xs @ [(0, NAtom p vs)]) \\<in> deriv nfs) &&&\n     (\\<lbrakk>(n, (m, FConj f g) # xs) \\<in> deriv nfs;\n       \\<not> is_axiom (s_of_ns ((m, FConj f g) # xs))\\<rbrakk>\n      \\<Longrightarrow> (Suc n, xs @ [(0, f)]) \\<in> deriv nfs)) &&&\n    ((\\<lbrakk>(n, (m, FConj f g) # xs) \\<in> deriv nfs;\n       \\<not> is_axiom (s_of_ns ((m, FConj f g) # xs))\\<rbrakk>\n      \\<Longrightarrow> (Suc n, xs @ [(0, g)]) \\<in> deriv nfs) &&&\n     (\\<lbrakk>(n, (m, FDisj f g) # xs) \\<in> deriv nfs;\n       \\<not> is_axiom (s_of_ns ((m, FDisj f g) # xs))\\<rbrakk>\n      \\<Longrightarrow> (Suc n, xs @ [(0, f), (0, g)]) \\<in> deriv nfs)) &&&\n    (\\<lbrakk>(n, (m, FAll f) # xs) \\<in> deriv nfs;\n      \\<not> is_axiom (s_of_ns ((m, FAll f) # xs))\\<rbrakk>\n     \\<Longrightarrow> (Suc n,\n                        xs @\n                        [(0, finst f\n                              (newvar (sfv (s_of_ns ((m, FAll f) # xs)))))])\n                       \\<in> deriv nfs) &&&\n    (\\<lbrakk>(n, (m, FEx f) # xs) \\<in> deriv nfs;\n      \\<not> is_axiom (s_of_ns ((m, FEx f) # xs))\\<rbrakk>\n     \\<Longrightarrow> (Suc n, xs @ [(0, finst f m), (Suc m, FEx f)])\n                       \\<in> deriv nfs)", "apply(auto intro: step simp add: Let_def s_of_ns_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemmas not_is_axiom_subs = patom natom fconj1 fconj2 fdisj fall fex"], ["", "lemmas[simp] = init"], ["", "lemmas [intro] = init step"], ["", "lemma deriv0[simp]: \"(0,x) \\<in> deriv y = (x = y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((0, x) \\<in> deriv y) = (x = y)", "apply(rule)"], ["proof (prove)\ngoal (2 subgoals):\n 1. (0, x) \\<in> deriv y \\<Longrightarrow> x = y\n 2. x = y \\<Longrightarrow> (0, x) \\<in> deriv y", "apply(erule deriv.cases)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>0 = 0; x = y\\<rbrakk> \\<Longrightarrow> x = y\n 2. \\<And>n xa ya.\n       \\<lbrakk>0 = Suc n; x = ya; (n, xa) \\<in> deriv y;\n        ya \\<in> set (subs xa)\\<rbrakk>\n       \\<Longrightarrow> x = y\n 3. x = y \\<Longrightarrow> (0, x) \\<in> deriv y", "apply(simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n xa ya.\n       \\<lbrakk>0 = Suc n; x = ya; (n, xa) \\<in> deriv y;\n        ya \\<in> set (subs xa)\\<rbrakk>\n       \\<Longrightarrow> x = y\n 2. x = y \\<Longrightarrow> (0, x) \\<in> deriv y", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. x = y \\<Longrightarrow> (0, x) \\<in> deriv y", "apply(simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*\nlemma deriv_exists: \"(n,x) \\<in> deriv s ==> x \\<noteq> [] ==> ~ is_axiom (s_of_ns x) ==> (\\<exists>y. (Suc n, y) \\<in> deriv s & y : set (subs x))\"\n  apply(case_tac x) apply(simp)\n  apply(case_tac a) apply(case_tac b)\n       apply(auto simp add: Let_def s_of_ns_def intro: step) \n  apply(rule_tac x= \"list @ [(0, form1)]\" in exI)\n  apply(simp)\n  apply(rule step) apply(assumption) apply(simp add: Let_def) \n  done\n*)"], ["", "lemma deriv_upwards: \"(n,list) \\<in> deriv s ==> ~ is_axiom (s_of_ns (list)) ==> (\\<exists>zs. (Suc n, zs) \\<in> deriv s & zs : set (subs list))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(n, list) \\<in> deriv s;\n     \\<not> is_axiom (s_of_ns list)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>zs.\n                         (Suc n, zs) \\<in> deriv s \\<and>\n                         zs \\<in> set (subs list)", "apply(case_tac list)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>(n, list) \\<in> deriv s; \\<not> is_axiom (s_of_ns list);\n     list = []\\<rbrakk>\n    \\<Longrightarrow> \\<exists>zs.\n                         (Suc n, zs) \\<in> deriv s \\<and>\n                         zs \\<in> set (subs list)\n 2. \\<And>a lista.\n       \\<lbrakk>(n, list) \\<in> deriv s; \\<not> is_axiom (s_of_ns list);\n        list = a # lista\\<rbrakk>\n       \\<Longrightarrow> \\<exists>zs.\n                            (Suc n, zs) \\<in> deriv s \\<and>\n                            zs \\<in> set (subs list)", "apply force"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a lista.\n       \\<lbrakk>(n, list) \\<in> deriv s; \\<not> is_axiom (s_of_ns list);\n        list = a # lista\\<rbrakk>\n       \\<Longrightarrow> \\<exists>zs.\n                            (Suc n, zs) \\<in> deriv s \\<and>\n                            zs \\<in> set (subs list)", "apply(case_tac a)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a lista aa b.\n       \\<lbrakk>(n, list) \\<in> deriv s; \\<not> is_axiom (s_of_ns list);\n        list = a # lista; a = (aa, b)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>zs.\n                            (Suc n, zs) \\<in> deriv s \\<and>\n                            zs \\<in> set (subs list)", "apply(case_tac b)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>a lista aa b x11 x12.\n       \\<lbrakk>(n, list) \\<in> deriv s; \\<not> is_axiom (s_of_ns list);\n        list = a # lista; a = (aa, b); b = PAtom x11 x12\\<rbrakk>\n       \\<Longrightarrow> \\<exists>zs.\n                            (Suc n, zs) \\<in> deriv s \\<and>\n                            zs \\<in> set (subs list)\n 2. \\<And>a lista aa b x21 x22.\n       \\<lbrakk>(n, list) \\<in> deriv s; \\<not> is_axiom (s_of_ns list);\n        list = a # lista; a = (aa, b); b = NAtom x21 x22\\<rbrakk>\n       \\<Longrightarrow> \\<exists>zs.\n                            (Suc n, zs) \\<in> deriv s \\<and>\n                            zs \\<in> set (subs list)\n 3. \\<And>a lista aa b x31 x32.\n       \\<lbrakk>(n, list) \\<in> deriv s; \\<not> is_axiom (s_of_ns list);\n        list = a # lista; a = (aa, b); b = FConj x31 x32\\<rbrakk>\n       \\<Longrightarrow> \\<exists>zs.\n                            (Suc n, zs) \\<in> deriv s \\<and>\n                            zs \\<in> set (subs list)\n 4. \\<And>a lista aa b x41 x42.\n       \\<lbrakk>(n, list) \\<in> deriv s; \\<not> is_axiom (s_of_ns list);\n        list = a # lista; a = (aa, b); b = FDisj x41 x42\\<rbrakk>\n       \\<Longrightarrow> \\<exists>zs.\n                            (Suc n, zs) \\<in> deriv s \\<and>\n                            zs \\<in> set (subs list)\n 5. \\<And>a lista aa b x5.\n       \\<lbrakk>(n, list) \\<in> deriv s; \\<not> is_axiom (s_of_ns list);\n        list = a # lista; a = (aa, b); b = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<exists>zs.\n                            (Suc n, zs) \\<in> deriv s \\<and>\n                            zs \\<in> set (subs list)\n 6. \\<And>a lista aa b x6.\n       \\<lbrakk>(n, list) \\<in> deriv s; \\<not> is_axiom (s_of_ns list);\n        list = a # lista; a = (aa, b); b = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<exists>zs.\n                            (Suc n, zs) \\<in> deriv s \\<and>\n                            zs \\<in> set (subs list)", "apply(simp add: Let_def)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>a lista aa b x11 x12.\n       \\<lbrakk>(n, (aa, PAtom x11 x12) # lista) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns ((aa, PAtom x11 x12) # lista));\n        list = (aa, PAtom x11 x12) # lista; a = (aa, PAtom x11 x12);\n        b = PAtom x11 x12\\<rbrakk>\n       \\<Longrightarrow> NAtom x11 x12 \\<notin> snd ` set lista \\<and>\n                         (NAtom x11 x12\n                          \\<notin> snd ` set lista \\<longrightarrow>\n                          (Suc n, lista @ [(0, PAtom x11 x12)])\n                          \\<in> deriv s)\n 2. \\<And>a lista aa b x21 x22.\n       \\<lbrakk>(n, list) \\<in> deriv s; \\<not> is_axiom (s_of_ns list);\n        list = a # lista; a = (aa, b); b = NAtom x21 x22\\<rbrakk>\n       \\<Longrightarrow> \\<exists>zs.\n                            (Suc n, zs) \\<in> deriv s \\<and>\n                            zs \\<in> set (subs list)\n 3. \\<And>a lista aa b x31 x32.\n       \\<lbrakk>(n, list) \\<in> deriv s; \\<not> is_axiom (s_of_ns list);\n        list = a # lista; a = (aa, b); b = FConj x31 x32\\<rbrakk>\n       \\<Longrightarrow> \\<exists>zs.\n                            (Suc n, zs) \\<in> deriv s \\<and>\n                            zs \\<in> set (subs list)\n 4. \\<And>a lista aa b x41 x42.\n       \\<lbrakk>(n, list) \\<in> deriv s; \\<not> is_axiom (s_of_ns list);\n        list = a # lista; a = (aa, b); b = FDisj x41 x42\\<rbrakk>\n       \\<Longrightarrow> \\<exists>zs.\n                            (Suc n, zs) \\<in> deriv s \\<and>\n                            zs \\<in> set (subs list)\n 5. \\<And>a lista aa b x5.\n       \\<lbrakk>(n, list) \\<in> deriv s; \\<not> is_axiom (s_of_ns list);\n        list = a # lista; a = (aa, b); b = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<exists>zs.\n                            (Suc n, zs) \\<in> deriv s \\<and>\n                            zs \\<in> set (subs list)\n 6. \\<And>a lista aa b x6.\n       \\<lbrakk>(n, list) \\<in> deriv s; \\<not> is_axiom (s_of_ns list);\n        list = a # lista; a = (aa, b); b = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<exists>zs.\n                            (Suc n, zs) \\<in> deriv s \\<and>\n                            zs \\<in> set (subs list)", "apply(rule)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>a lista aa b x11 x12.\n       \\<lbrakk>(n, (aa, PAtom x11 x12) # lista) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns ((aa, PAtom x11 x12) # lista));\n        list = (aa, PAtom x11 x12) # lista; a = (aa, PAtom x11 x12);\n        b = PAtom x11 x12\\<rbrakk>\n       \\<Longrightarrow> NAtom x11 x12 \\<notin> snd ` set lista\n 2. \\<And>a lista aa b x11 x12.\n       \\<lbrakk>(n, (aa, PAtom x11 x12) # lista) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns ((aa, PAtom x11 x12) # lista));\n        list = (aa, PAtom x11 x12) # lista; a = (aa, PAtom x11 x12);\n        b = PAtom x11 x12\\<rbrakk>\n       \\<Longrightarrow> NAtom x11 x12\n                         \\<notin> snd ` set lista \\<longrightarrow>\n                         (Suc n, lista @ [(0, PAtom x11 x12)]) \\<in> deriv s\n 3. \\<And>a lista aa b x21 x22.\n       \\<lbrakk>(n, list) \\<in> deriv s; \\<not> is_axiom (s_of_ns list);\n        list = a # lista; a = (aa, b); b = NAtom x21 x22\\<rbrakk>\n       \\<Longrightarrow> \\<exists>zs.\n                            (Suc n, zs) \\<in> deriv s \\<and>\n                            zs \\<in> set (subs list)\n 4. \\<And>a lista aa b x31 x32.\n       \\<lbrakk>(n, list) \\<in> deriv s; \\<not> is_axiom (s_of_ns list);\n        list = a # lista; a = (aa, b); b = FConj x31 x32\\<rbrakk>\n       \\<Longrightarrow> \\<exists>zs.\n                            (Suc n, zs) \\<in> deriv s \\<and>\n                            zs \\<in> set (subs list)\n 5. \\<And>a lista aa b x41 x42.\n       \\<lbrakk>(n, list) \\<in> deriv s; \\<not> is_axiom (s_of_ns list);\n        list = a # lista; a = (aa, b); b = FDisj x41 x42\\<rbrakk>\n       \\<Longrightarrow> \\<exists>zs.\n                            (Suc n, zs) \\<in> deriv s \\<and>\n                            zs \\<in> set (subs list)\n 6. \\<And>a lista aa b x5.\n       \\<lbrakk>(n, list) \\<in> deriv s; \\<not> is_axiom (s_of_ns list);\n        list = a # lista; a = (aa, b); b = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<exists>zs.\n                            (Suc n, zs) \\<in> deriv s \\<and>\n                            zs \\<in> set (subs list)\n 7. \\<And>a lista aa b x6.\n       \\<lbrakk>(n, list) \\<in> deriv s; \\<not> is_axiom (s_of_ns list);\n        list = a # lista; a = (aa, b); b = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<exists>zs.\n                            (Suc n, zs) \\<in> deriv s \\<and>\n                            zs \\<in> set (subs list)", "apply(simp add: s_of_ns_def)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>a lista aa b x11 x12.\n       \\<lbrakk>(n, (aa, PAtom x11 x12) # lista) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns ((aa, PAtom x11 x12) # lista));\n        list = (aa, PAtom x11 x12) # lista; a = (aa, PAtom x11 x12);\n        b = PAtom x11 x12\\<rbrakk>\n       \\<Longrightarrow> NAtom x11 x12\n                         \\<notin> snd ` set lista \\<longrightarrow>\n                         (Suc n, lista @ [(0, PAtom x11 x12)]) \\<in> deriv s\n 2. \\<And>a lista aa b x21 x22.\n       \\<lbrakk>(n, list) \\<in> deriv s; \\<not> is_axiom (s_of_ns list);\n        list = a # lista; a = (aa, b); b = NAtom x21 x22\\<rbrakk>\n       \\<Longrightarrow> \\<exists>zs.\n                            (Suc n, zs) \\<in> deriv s \\<and>\n                            zs \\<in> set (subs list)\n 3. \\<And>a lista aa b x31 x32.\n       \\<lbrakk>(n, list) \\<in> deriv s; \\<not> is_axiom (s_of_ns list);\n        list = a # lista; a = (aa, b); b = FConj x31 x32\\<rbrakk>\n       \\<Longrightarrow> \\<exists>zs.\n                            (Suc n, zs) \\<in> deriv s \\<and>\n                            zs \\<in> set (subs list)\n 4. \\<And>a lista aa b x41 x42.\n       \\<lbrakk>(n, list) \\<in> deriv s; \\<not> is_axiom (s_of_ns list);\n        list = a # lista; a = (aa, b); b = FDisj x41 x42\\<rbrakk>\n       \\<Longrightarrow> \\<exists>zs.\n                            (Suc n, zs) \\<in> deriv s \\<and>\n                            zs \\<in> set (subs list)\n 5. \\<And>a lista aa b x5.\n       \\<lbrakk>(n, list) \\<in> deriv s; \\<not> is_axiom (s_of_ns list);\n        list = a # lista; a = (aa, b); b = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<exists>zs.\n                            (Suc n, zs) \\<in> deriv s \\<and>\n                            zs \\<in> set (subs list)\n 6. \\<And>a lista aa b x6.\n       \\<lbrakk>(n, list) \\<in> deriv s; \\<not> is_axiom (s_of_ns list);\n        list = a # lista; a = (aa, b); b = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<exists>zs.\n                            (Suc n, zs) \\<in> deriv s \\<and>\n                            zs \\<in> set (subs list)", "apply(force dest: not_is_axiom_subs)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>a lista aa b x21 x22.\n       \\<lbrakk>(n, list) \\<in> deriv s; \\<not> is_axiom (s_of_ns list);\n        list = a # lista; a = (aa, b); b = NAtom x21 x22\\<rbrakk>\n       \\<Longrightarrow> \\<exists>zs.\n                            (Suc n, zs) \\<in> deriv s \\<and>\n                            zs \\<in> set (subs list)\n 2. \\<And>a lista aa b x31 x32.\n       \\<lbrakk>(n, list) \\<in> deriv s; \\<not> is_axiom (s_of_ns list);\n        list = a # lista; a = (aa, b); b = FConj x31 x32\\<rbrakk>\n       \\<Longrightarrow> \\<exists>zs.\n                            (Suc n, zs) \\<in> deriv s \\<and>\n                            zs \\<in> set (subs list)\n 3. \\<And>a lista aa b x41 x42.\n       \\<lbrakk>(n, list) \\<in> deriv s; \\<not> is_axiom (s_of_ns list);\n        list = a # lista; a = (aa, b); b = FDisj x41 x42\\<rbrakk>\n       \\<Longrightarrow> \\<exists>zs.\n                            (Suc n, zs) \\<in> deriv s \\<and>\n                            zs \\<in> set (subs list)\n 4. \\<And>a lista aa b x5.\n       \\<lbrakk>(n, list) \\<in> deriv s; \\<not> is_axiom (s_of_ns list);\n        list = a # lista; a = (aa, b); b = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<exists>zs.\n                            (Suc n, zs) \\<in> deriv s \\<and>\n                            zs \\<in> set (subs list)\n 5. \\<And>a lista aa b x6.\n       \\<lbrakk>(n, list) \\<in> deriv s; \\<not> is_axiom (s_of_ns list);\n        list = a # lista; a = (aa, b); b = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<exists>zs.\n                            (Suc n, zs) \\<in> deriv s \\<and>\n                            zs \\<in> set (subs list)", "apply(simp add: Let_def)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>a lista aa b x21 x22.\n       \\<lbrakk>(n, (aa, NAtom x21 x22) # lista) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns ((aa, NAtom x21 x22) # lista));\n        list = (aa, NAtom x21 x22) # lista; a = (aa, NAtom x21 x22);\n        b = NAtom x21 x22\\<rbrakk>\n       \\<Longrightarrow> PAtom x21 x22 \\<notin> snd ` set lista \\<and>\n                         (PAtom x21 x22\n                          \\<notin> snd ` set lista \\<longrightarrow>\n                          (Suc n, lista @ [(0, NAtom x21 x22)])\n                          \\<in> deriv s)\n 2. \\<And>a lista aa b x31 x32.\n       \\<lbrakk>(n, list) \\<in> deriv s; \\<not> is_axiom (s_of_ns list);\n        list = a # lista; a = (aa, b); b = FConj x31 x32\\<rbrakk>\n       \\<Longrightarrow> \\<exists>zs.\n                            (Suc n, zs) \\<in> deriv s \\<and>\n                            zs \\<in> set (subs list)\n 3. \\<And>a lista aa b x41 x42.\n       \\<lbrakk>(n, list) \\<in> deriv s; \\<not> is_axiom (s_of_ns list);\n        list = a # lista; a = (aa, b); b = FDisj x41 x42\\<rbrakk>\n       \\<Longrightarrow> \\<exists>zs.\n                            (Suc n, zs) \\<in> deriv s \\<and>\n                            zs \\<in> set (subs list)\n 4. \\<And>a lista aa b x5.\n       \\<lbrakk>(n, list) \\<in> deriv s; \\<not> is_axiom (s_of_ns list);\n        list = a # lista; a = (aa, b); b = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<exists>zs.\n                            (Suc n, zs) \\<in> deriv s \\<and>\n                            zs \\<in> set (subs list)\n 5. \\<And>a lista aa b x6.\n       \\<lbrakk>(n, list) \\<in> deriv s; \\<not> is_axiom (s_of_ns list);\n        list = a # lista; a = (aa, b); b = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<exists>zs.\n                            (Suc n, zs) \\<in> deriv s \\<and>\n                            zs \\<in> set (subs list)", "apply(rule)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>a lista aa b x21 x22.\n       \\<lbrakk>(n, (aa, NAtom x21 x22) # lista) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns ((aa, NAtom x21 x22) # lista));\n        list = (aa, NAtom x21 x22) # lista; a = (aa, NAtom x21 x22);\n        b = NAtom x21 x22\\<rbrakk>\n       \\<Longrightarrow> PAtom x21 x22 \\<notin> snd ` set lista\n 2. \\<And>a lista aa b x21 x22.\n       \\<lbrakk>(n, (aa, NAtom x21 x22) # lista) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns ((aa, NAtom x21 x22) # lista));\n        list = (aa, NAtom x21 x22) # lista; a = (aa, NAtom x21 x22);\n        b = NAtom x21 x22\\<rbrakk>\n       \\<Longrightarrow> PAtom x21 x22\n                         \\<notin> snd ` set lista \\<longrightarrow>\n                         (Suc n, lista @ [(0, NAtom x21 x22)]) \\<in> deriv s\n 3. \\<And>a lista aa b x31 x32.\n       \\<lbrakk>(n, list) \\<in> deriv s; \\<not> is_axiom (s_of_ns list);\n        list = a # lista; a = (aa, b); b = FConj x31 x32\\<rbrakk>\n       \\<Longrightarrow> \\<exists>zs.\n                            (Suc n, zs) \\<in> deriv s \\<and>\n                            zs \\<in> set (subs list)\n 4. \\<And>a lista aa b x41 x42.\n       \\<lbrakk>(n, list) \\<in> deriv s; \\<not> is_axiom (s_of_ns list);\n        list = a # lista; a = (aa, b); b = FDisj x41 x42\\<rbrakk>\n       \\<Longrightarrow> \\<exists>zs.\n                            (Suc n, zs) \\<in> deriv s \\<and>\n                            zs \\<in> set (subs list)\n 5. \\<And>a lista aa b x5.\n       \\<lbrakk>(n, list) \\<in> deriv s; \\<not> is_axiom (s_of_ns list);\n        list = a # lista; a = (aa, b); b = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<exists>zs.\n                            (Suc n, zs) \\<in> deriv s \\<and>\n                            zs \\<in> set (subs list)\n 6. \\<And>a lista aa b x6.\n       \\<lbrakk>(n, list) \\<in> deriv s; \\<not> is_axiom (s_of_ns list);\n        list = a # lista; a = (aa, b); b = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<exists>zs.\n                            (Suc n, zs) \\<in> deriv s \\<and>\n                            zs \\<in> set (subs list)", "apply(simp add: s_of_ns_def)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>a lista aa b x21 x22.\n       \\<lbrakk>(n, (aa, NAtom x21 x22) # lista) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns ((aa, NAtom x21 x22) # lista));\n        list = (aa, NAtom x21 x22) # lista; a = (aa, NAtom x21 x22);\n        b = NAtom x21 x22\\<rbrakk>\n       \\<Longrightarrow> PAtom x21 x22\n                         \\<notin> snd ` set lista \\<longrightarrow>\n                         (Suc n, lista @ [(0, NAtom x21 x22)]) \\<in> deriv s\n 2. \\<And>a lista aa b x31 x32.\n       \\<lbrakk>(n, list) \\<in> deriv s; \\<not> is_axiom (s_of_ns list);\n        list = a # lista; a = (aa, b); b = FConj x31 x32\\<rbrakk>\n       \\<Longrightarrow> \\<exists>zs.\n                            (Suc n, zs) \\<in> deriv s \\<and>\n                            zs \\<in> set (subs list)\n 3. \\<And>a lista aa b x41 x42.\n       \\<lbrakk>(n, list) \\<in> deriv s; \\<not> is_axiom (s_of_ns list);\n        list = a # lista; a = (aa, b); b = FDisj x41 x42\\<rbrakk>\n       \\<Longrightarrow> \\<exists>zs.\n                            (Suc n, zs) \\<in> deriv s \\<and>\n                            zs \\<in> set (subs list)\n 4. \\<And>a lista aa b x5.\n       \\<lbrakk>(n, list) \\<in> deriv s; \\<not> is_axiom (s_of_ns list);\n        list = a # lista; a = (aa, b); b = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<exists>zs.\n                            (Suc n, zs) \\<in> deriv s \\<and>\n                            zs \\<in> set (subs list)\n 5. \\<And>a lista aa b x6.\n       \\<lbrakk>(n, list) \\<in> deriv s; \\<not> is_axiom (s_of_ns list);\n        list = a # lista; a = (aa, b); b = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<exists>zs.\n                            (Suc n, zs) \\<in> deriv s \\<and>\n                            zs \\<in> set (subs list)", "apply(force dest: not_is_axiom_subs)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>a lista aa b x31 x32.\n       \\<lbrakk>(n, list) \\<in> deriv s; \\<not> is_axiom (s_of_ns list);\n        list = a # lista; a = (aa, b); b = FConj x31 x32\\<rbrakk>\n       \\<Longrightarrow> \\<exists>zs.\n                            (Suc n, zs) \\<in> deriv s \\<and>\n                            zs \\<in> set (subs list)\n 2. \\<And>a lista aa b x41 x42.\n       \\<lbrakk>(n, list) \\<in> deriv s; \\<not> is_axiom (s_of_ns list);\n        list = a # lista; a = (aa, b); b = FDisj x41 x42\\<rbrakk>\n       \\<Longrightarrow> \\<exists>zs.\n                            (Suc n, zs) \\<in> deriv s \\<and>\n                            zs \\<in> set (subs list)\n 3. \\<And>a lista aa b x5.\n       \\<lbrakk>(n, list) \\<in> deriv s; \\<not> is_axiom (s_of_ns list);\n        list = a # lista; a = (aa, b); b = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<exists>zs.\n                            (Suc n, zs) \\<in> deriv s \\<and>\n                            zs \\<in> set (subs list)\n 4. \\<And>a lista aa b x6.\n       \\<lbrakk>(n, list) \\<in> deriv s; \\<not> is_axiom (s_of_ns list);\n        list = a # lista; a = (aa, b); b = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<exists>zs.\n                            (Suc n, zs) \\<in> deriv s \\<and>\n                            zs \\<in> set (subs list)", "apply(simp add: Let_def)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>a lista aa b x31 x32.\n       \\<lbrakk>(n, (aa, FConj x31 x32) # lista) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns ((aa, FConj x31 x32) # lista));\n        list = (aa, FConj x31 x32) # lista; a = (aa, FConj x31 x32);\n        b = FConj x31 x32\\<rbrakk>\n       \\<Longrightarrow> \\<exists>zs.\n                            (Suc n, zs) \\<in> deriv s \\<and>\n                            (zs = lista @ [(0, x31)] \\<or>\n                             zs = lista @ [(0, x32)])\n 2. \\<And>a lista aa b x41 x42.\n       \\<lbrakk>(n, list) \\<in> deriv s; \\<not> is_axiom (s_of_ns list);\n        list = a # lista; a = (aa, b); b = FDisj x41 x42\\<rbrakk>\n       \\<Longrightarrow> \\<exists>zs.\n                            (Suc n, zs) \\<in> deriv s \\<and>\n                            zs \\<in> set (subs list)\n 3. \\<And>a lista aa b x5.\n       \\<lbrakk>(n, list) \\<in> deriv s; \\<not> is_axiom (s_of_ns list);\n        list = a # lista; a = (aa, b); b = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<exists>zs.\n                            (Suc n, zs) \\<in> deriv s \\<and>\n                            zs \\<in> set (subs list)\n 4. \\<And>a lista aa b x6.\n       \\<lbrakk>(n, list) \\<in> deriv s; \\<not> is_axiom (s_of_ns list);\n        list = a # lista; a = (aa, b); b = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<exists>zs.\n                            (Suc n, zs) \\<in> deriv s \\<and>\n                            zs \\<in> set (subs list)", "apply(force dest: not_is_axiom_subs)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a lista aa b x41 x42.\n       \\<lbrakk>(n, list) \\<in> deriv s; \\<not> is_axiom (s_of_ns list);\n        list = a # lista; a = (aa, b); b = FDisj x41 x42\\<rbrakk>\n       \\<Longrightarrow> \\<exists>zs.\n                            (Suc n, zs) \\<in> deriv s \\<and>\n                            zs \\<in> set (subs list)\n 2. \\<And>a lista aa b x5.\n       \\<lbrakk>(n, list) \\<in> deriv s; \\<not> is_axiom (s_of_ns list);\n        list = a # lista; a = (aa, b); b = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<exists>zs.\n                            (Suc n, zs) \\<in> deriv s \\<and>\n                            zs \\<in> set (subs list)\n 3. \\<And>a lista aa b x6.\n       \\<lbrakk>(n, list) \\<in> deriv s; \\<not> is_axiom (s_of_ns list);\n        list = a # lista; a = (aa, b); b = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<exists>zs.\n                            (Suc n, zs) \\<in> deriv s \\<and>\n                            zs \\<in> set (subs list)", "apply(simp add: Let_def)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a lista aa b x41 x42.\n       \\<lbrakk>(n, (aa, FDisj x41 x42) # lista) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns ((aa, FDisj x41 x42) # lista));\n        list = (aa, FDisj x41 x42) # lista; a = (aa, FDisj x41 x42);\n        b = FDisj x41 x42\\<rbrakk>\n       \\<Longrightarrow> (Suc n, lista @ [(0, x41), (0, x42)]) \\<in> deriv s\n 2. \\<And>a lista aa b x5.\n       \\<lbrakk>(n, list) \\<in> deriv s; \\<not> is_axiom (s_of_ns list);\n        list = a # lista; a = (aa, b); b = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<exists>zs.\n                            (Suc n, zs) \\<in> deriv s \\<and>\n                            zs \\<in> set (subs list)\n 3. \\<And>a lista aa b x6.\n       \\<lbrakk>(n, list) \\<in> deriv s; \\<not> is_axiom (s_of_ns list);\n        list = a # lista; a = (aa, b); b = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<exists>zs.\n                            (Suc n, zs) \\<in> deriv s \\<and>\n                            zs \\<in> set (subs list)", "apply(force dest: not_is_axiom_subs)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a lista aa b x5.\n       \\<lbrakk>(n, list) \\<in> deriv s; \\<not> is_axiom (s_of_ns list);\n        list = a # lista; a = (aa, b); b = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<exists>zs.\n                            (Suc n, zs) \\<in> deriv s \\<and>\n                            zs \\<in> set (subs list)\n 2. \\<And>a lista aa b x6.\n       \\<lbrakk>(n, list) \\<in> deriv s; \\<not> is_axiom (s_of_ns list);\n        list = a # lista; a = (aa, b); b = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<exists>zs.\n                            (Suc n, zs) \\<in> deriv s \\<and>\n                            zs \\<in> set (subs list)", "apply(simp add: Let_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a lista aa b x5.\n       \\<lbrakk>(n, (aa, FAll x5) # lista) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns ((aa, FAll x5) # lista));\n        list = (aa, FAll x5) # lista; a = (aa, FAll x5);\n        b = FAll x5\\<rbrakk>\n       \\<Longrightarrow> (Suc n,\n                          lista @\n                          [(0, finst x5\n                                (newvar\n                                  (sfv (s_of_ns\n   ((aa, FAll x5) # lista)))))])\n                         \\<in> deriv s\n 2. \\<And>a lista aa b x6.\n       \\<lbrakk>(n, list) \\<in> deriv s; \\<not> is_axiom (s_of_ns list);\n        list = a # lista; a = (aa, b); b = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<exists>zs.\n                            (Suc n, zs) \\<in> deriv s \\<and>\n                            zs \\<in> set (subs list)", "apply(force dest: not_is_axiom_subs)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a lista aa b x6.\n       \\<lbrakk>(n, list) \\<in> deriv s; \\<not> is_axiom (s_of_ns list);\n        list = a # lista; a = (aa, b); b = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<exists>zs.\n                            (Suc n, zs) \\<in> deriv s \\<and>\n                            zs \\<in> set (subs list)", "apply(simp add: Let_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a lista aa b x6.\n       \\<lbrakk>(n, (aa, FEx x6) # lista) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns ((aa, FEx x6) # lista));\n        list = (aa, FEx x6) # lista; a = (aa, FEx x6); b = FEx x6\\<rbrakk>\n       \\<Longrightarrow> (Suc n,\n                          lista @ [(0, finst x6 aa), (Suc aa, FEx x6)])\n                         \\<in> deriv s", "apply(force dest: not_is_axiom_subs)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma deriv_downwards (*derivSucE*): \"(Suc n, x) \\<in> deriv s ==> \\<exists>y. (n,y) \\<in> deriv s & x : set (subs y) & ~ is_axiom (s_of_ns y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Suc n, x) \\<in> deriv s \\<Longrightarrow>\n    \\<exists>y.\n       (n, y) \\<in> deriv s \\<and>\n       x \\<in> set (subs y) \\<and> \\<not> is_axiom (s_of_ns y)", "apply(erule deriv.cases)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Suc n = 0; x = s\\<rbrakk>\n    \\<Longrightarrow> \\<exists>y.\n                         (n, y) \\<in> deriv s \\<and>\n                         x \\<in> set (subs y) \\<and>\n                         \\<not> is_axiom (s_of_ns y)\n 2. \\<And>na xa y.\n       \\<lbrakk>Suc n = Suc na; x = y; (na, xa) \\<in> deriv s;\n        y \\<in> set (subs xa)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y.\n                            (n, y) \\<in> deriv s \\<and>\n                            x \\<in> set (subs y) \\<and>\n                            \\<not> is_axiom (s_of_ns y)", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>na xa y.\n       \\<lbrakk>Suc n = Suc na; x = y; (na, xa) \\<in> deriv s;\n        y \\<in> set (subs xa)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y.\n                            (n, y) \\<in> deriv s \\<and>\n                            x \\<in> set (subs y) \\<and>\n                            \\<not> is_axiom (s_of_ns y)", "apply(simp add: s_of_ns_def Let_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>na xa y.\n       \\<lbrakk>n = na; x = y; (na, xa) \\<in> deriv s;\n        y \\<in> set (subs xa)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ya.\n                            (na, ya) \\<in> deriv s \\<and>\n                            y \\<in> set (subs ya) \\<and>\n                            \\<not> is_axiom (map snd ya)", "apply(rule_tac x=xa in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>na xa y.\n       \\<lbrakk>n = na; x = y; (na, xa) \\<in> deriv s;\n        y \\<in> set (subs xa)\\<rbrakk>\n       \\<Longrightarrow> (na, xa) \\<in> deriv s \\<and>\n                         y \\<in> set (subs xa) \\<and>\n                         \\<not> is_axiom (map snd xa)", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>na xa y.\n       \\<lbrakk>n = na; x = y; (na, xa) \\<in> deriv s;\n        y \\<in> set (subs xa)\\<rbrakk>\n       \\<Longrightarrow> \\<not> is_axiom (map snd xa)", "apply(case_tac xa)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>na xa y.\n       \\<lbrakk>n = na; x = y; (na, xa) \\<in> deriv s;\n        y \\<in> set (subs xa); xa = []\\<rbrakk>\n       \\<Longrightarrow> \\<not> is_axiom (map snd xa)\n 2. \\<And>na xa y a list.\n       \\<lbrakk>n = na; x = y; (na, xa) \\<in> deriv s;\n        y \\<in> set (subs xa); xa = a # list\\<rbrakk>\n       \\<Longrightarrow> \\<not> is_axiom (map snd xa)", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>na xa y a list.\n       \\<lbrakk>n = na; x = y; (na, xa) \\<in> deriv s;\n        y \\<in> set (subs xa); xa = a # list\\<rbrakk>\n       \\<Longrightarrow> \\<not> is_axiom (map snd xa)", "apply(case_tac a)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>na xa y a list aa b.\n       \\<lbrakk>n = na; x = y; (na, xa) \\<in> deriv s;\n        y \\<in> set (subs xa); xa = a # list; a = (aa, b)\\<rbrakk>\n       \\<Longrightarrow> \\<not> is_axiom (map snd xa)", "apply(case_tac b)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>na xa y a list aa b x11 x12.\n       \\<lbrakk>n = na; x = y; (na, xa) \\<in> deriv s;\n        y \\<in> set (subs xa); xa = a # list; a = (aa, b);\n        b = PAtom x11 x12\\<rbrakk>\n       \\<Longrightarrow> \\<not> is_axiom (map snd xa)\n 2. \\<And>na xa y a list aa b x21 x22.\n       \\<lbrakk>n = na; x = y; (na, xa) \\<in> deriv s;\n        y \\<in> set (subs xa); xa = a # list; a = (aa, b);\n        b = NAtom x21 x22\\<rbrakk>\n       \\<Longrightarrow> \\<not> is_axiom (map snd xa)\n 3. \\<And>na xa y a list aa b x31 x32.\n       \\<lbrakk>n = na; x = y; (na, xa) \\<in> deriv s;\n        y \\<in> set (subs xa); xa = a # list; a = (aa, b);\n        b = FConj x31 x32\\<rbrakk>\n       \\<Longrightarrow> \\<not> is_axiom (map snd xa)\n 4. \\<And>na xa y a list aa b x41 x42.\n       \\<lbrakk>n = na; x = y; (na, xa) \\<in> deriv s;\n        y \\<in> set (subs xa); xa = a # list; a = (aa, b);\n        b = FDisj x41 x42\\<rbrakk>\n       \\<Longrightarrow> \\<not> is_axiom (map snd xa)\n 5. \\<And>na xa y a list aa b x5.\n       \\<lbrakk>n = na; x = y; (na, xa) \\<in> deriv s;\n        y \\<in> set (subs xa); xa = a # list; a = (aa, b);\n        b = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<not> is_axiom (map snd xa)\n 6. \\<And>na xa y a list aa b x6.\n       \\<lbrakk>n = na; x = y; (na, xa) \\<in> deriv s;\n        y \\<in> set (subs xa); xa = a # list; a = (aa, b);\n        b = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<not> is_axiom (map snd xa)", "apply(auto simp add: Let_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>list aa x11 x12 a.\n       \\<lbrakk>(n, (aa, PAtom x11 x12) # list) \\<in> deriv s;\n        x \\<in> set (if NAtom x11 x12 \\<in> snd ` set list then []\n                     else [list @ [(0, PAtom x11 x12)]]);\n        (a, NAtom x11 x12) \\<in> set list\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>list aa x21 x22 a.\n       \\<lbrakk>(n, (aa, NAtom x21 x22) # list) \\<in> deriv s;\n        x \\<in> set (if PAtom x21 x22 \\<in> snd ` set list then []\n                     else [list @ [(0, NAtom x21 x22)]]);\n        (a, PAtom x21 x22) \\<in> set list\\<rbrakk>\n       \\<Longrightarrow> False", "apply (rename_tac[!] nat lista a)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>list aa nat lista a.\n       \\<lbrakk>(n, (aa, PAtom nat lista) # list) \\<in> deriv s;\n        x \\<in> set (if NAtom nat lista \\<in> snd ` set list then []\n                     else [list @ [(0, PAtom nat lista)]]);\n        (a, NAtom nat lista) \\<in> set list\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>list aa nat lista a.\n       \\<lbrakk>(n, (aa, NAtom nat lista) # list) \\<in> deriv s;\n        x \\<in> set (if PAtom nat lista \\<in> snd ` set list then []\n                     else [list @ [(0, NAtom nat lista)]]);\n        (a, PAtom nat lista) \\<in> set list\\<rbrakk>\n       \\<Longrightarrow> False", "apply(subgoal_tac \"NAtom nat lista \\<in> snd ` set list\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>list aa nat lista a.\n       \\<lbrakk>(n, (aa, PAtom nat lista) # list) \\<in> deriv s;\n        x \\<in> set (if NAtom nat lista \\<in> snd ` set list then []\n                     else [list @ [(0, PAtom nat lista)]]);\n        (a, NAtom nat lista) \\<in> set list;\n        NAtom nat lista \\<in> snd ` set list\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>list aa nat lista a.\n       \\<lbrakk>(n, (aa, PAtom nat lista) # list) \\<in> deriv s;\n        x \\<in> set (if NAtom nat lista \\<in> snd ` set list then []\n                     else [list @ [(0, PAtom nat lista)]]);\n        (a, NAtom nat lista) \\<in> set list\\<rbrakk>\n       \\<Longrightarrow> NAtom nat lista \\<in> snd ` set list\n 3. \\<And>list aa nat lista a.\n       \\<lbrakk>(n, (aa, NAtom nat lista) # list) \\<in> deriv s;\n        x \\<in> set (if PAtom nat lista \\<in> snd ` set list then []\n                     else [list @ [(0, NAtom nat lista)]]);\n        (a, PAtom nat lista) \\<in> set list\\<rbrakk>\n       \\<Longrightarrow> False", "apply(simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>list aa nat lista a.\n       \\<lbrakk>(n, (aa, PAtom nat lista) # list) \\<in> deriv s;\n        x \\<in> set (if NAtom nat lista \\<in> snd ` set list then []\n                     else [list @ [(0, PAtom nat lista)]]);\n        (a, NAtom nat lista) \\<in> set list\\<rbrakk>\n       \\<Longrightarrow> NAtom nat lista \\<in> snd ` set list\n 2. \\<And>list aa nat lista a.\n       \\<lbrakk>(n, (aa, NAtom nat lista) # list) \\<in> deriv s;\n        x \\<in> set (if PAtom nat lista \\<in> snd ` set list then []\n                     else [list @ [(0, NAtom nat lista)]]);\n        (a, PAtom nat lista) \\<in> set list\\<rbrakk>\n       \\<Longrightarrow> False", "apply(force)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>list aa nat lista a.\n       \\<lbrakk>(n, (aa, NAtom nat lista) # list) \\<in> deriv s;\n        x \\<in> set (if PAtom nat lista \\<in> snd ` set list then []\n                     else [list @ [(0, NAtom nat lista)]]);\n        (a, PAtom nat lista) \\<in> set list\\<rbrakk>\n       \\<Longrightarrow> False", "apply(subgoal_tac \"PAtom nat lista \\<in> snd ` set list\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>list aa nat lista a.\n       \\<lbrakk>(n, (aa, NAtom nat lista) # list) \\<in> deriv s;\n        x \\<in> set (if PAtom nat lista \\<in> snd ` set list then []\n                     else [list @ [(0, NAtom nat lista)]]);\n        (a, PAtom nat lista) \\<in> set list;\n        PAtom nat lista \\<in> snd ` set list\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>list aa nat lista a.\n       \\<lbrakk>(n, (aa, NAtom nat lista) # list) \\<in> deriv s;\n        x \\<in> set (if PAtom nat lista \\<in> snd ` set list then []\n                     else [list @ [(0, NAtom nat lista)]]);\n        (a, PAtom nat lista) \\<in> set list\\<rbrakk>\n       \\<Longrightarrow> PAtom nat lista \\<in> snd ` set list", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>list aa nat lista a.\n       \\<lbrakk>(n, (aa, NAtom nat lista) # list) \\<in> deriv s;\n        x \\<in> set (if PAtom nat lista \\<in> snd ` set list then []\n                     else [list @ [(0, NAtom nat lista)]]);\n        (a, PAtom nat lista) \\<in> set list\\<rbrakk>\n       \\<Longrightarrow> PAtom nat lista \\<in> snd ` set list", "apply(force)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma deriv_deriv_child(*derivSuc*)[rule_format]: \"\\<forall>x y. (Suc n,x) \\<in> deriv y = (\\<exists>z. z : set (subs y) & ~ is_axiom (s_of_ns y) & (n,x) \\<in> deriv z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x y.\n       ((Suc n, x) \\<in> deriv y) =\n       (\\<exists>z.\n           z \\<in> set (subs y) \\<and>\n           \\<not> is_axiom (s_of_ns y) \\<and> (n, x) \\<in> deriv z)", "apply(induct n)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<forall>x y.\n       ((Suc 0, x) \\<in> deriv y) =\n       (\\<exists>z.\n           z \\<in> set (subs y) \\<and>\n           \\<not> is_axiom (s_of_ns y) \\<and> (0, x) \\<in> deriv z)\n 2. \\<And>n.\n       \\<forall>x y.\n          ((Suc n, x) \\<in> deriv y) =\n          (\\<exists>z.\n              z \\<in> set (subs y) \\<and>\n              \\<not> is_axiom (s_of_ns y) \\<and>\n              (n, x) \\<in> deriv z) \\<Longrightarrow>\n       \\<forall>x y.\n          ((Suc (Suc n), x) \\<in> deriv y) =\n          (\\<exists>z.\n              z \\<in> set (subs y) \\<and>\n              \\<not> is_axiom (s_of_ns y) \\<and> (Suc n, x) \\<in> deriv z)", "apply(rule, rule)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x y.\n       ((Suc 0, x) \\<in> deriv y) =\n       (\\<exists>z.\n           z \\<in> set (subs y) \\<and>\n           \\<not> is_axiom (s_of_ns y) \\<and> (0, x) \\<in> deriv z)\n 2. \\<And>n.\n       \\<forall>x y.\n          ((Suc n, x) \\<in> deriv y) =\n          (\\<exists>z.\n              z \\<in> set (subs y) \\<and>\n              \\<not> is_axiom (s_of_ns y) \\<and>\n              (n, x) \\<in> deriv z) \\<Longrightarrow>\n       \\<forall>x y.\n          ((Suc (Suc n), x) \\<in> deriv y) =\n          (\\<exists>z.\n              z \\<in> set (subs y) \\<and>\n              \\<not> is_axiom (s_of_ns y) \\<and> (Suc n, x) \\<in> deriv z)", "apply(rule)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x y.\n       (Suc 0, x) \\<in> deriv y \\<Longrightarrow>\n       \\<exists>z.\n          z \\<in> set (subs y) \\<and>\n          \\<not> is_axiom (s_of_ns y) \\<and> (0, x) \\<in> deriv z\n 2. \\<And>x y.\n       \\<exists>z.\n          z \\<in> set (subs y) \\<and>\n          \\<not> is_axiom (s_of_ns y) \\<and>\n          (0, x) \\<in> deriv z \\<Longrightarrow>\n       (Suc 0, x) \\<in> deriv y\n 3. \\<And>n.\n       \\<forall>x y.\n          ((Suc n, x) \\<in> deriv y) =\n          (\\<exists>z.\n              z \\<in> set (subs y) \\<and>\n              \\<not> is_axiom (s_of_ns y) \\<and>\n              (n, x) \\<in> deriv z) \\<Longrightarrow>\n       \\<forall>x y.\n          ((Suc (Suc n), x) \\<in> deriv y) =\n          (\\<exists>z.\n              z \\<in> set (subs y) \\<and>\n              \\<not> is_axiom (s_of_ns y) \\<and> (Suc n, x) \\<in> deriv z)", "apply(frule_tac deriv_downwards)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>(Suc 0, x) \\<in> deriv y;\n        \\<exists>ya.\n           (0, ya) \\<in> deriv y \\<and>\n           x \\<in> set (subs ya) \\<and>\n           \\<not> is_axiom (s_of_ns ya)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>z.\n                            z \\<in> set (subs y) \\<and>\n                            \\<not> is_axiom (s_of_ns y) \\<and>\n                            (0, x) \\<in> deriv z\n 2. \\<And>x y.\n       \\<exists>z.\n          z \\<in> set (subs y) \\<and>\n          \\<not> is_axiom (s_of_ns y) \\<and>\n          (0, x) \\<in> deriv z \\<Longrightarrow>\n       (Suc 0, x) \\<in> deriv y\n 3. \\<And>n.\n       \\<forall>x y.\n          ((Suc n, x) \\<in> deriv y) =\n          (\\<exists>z.\n              z \\<in> set (subs y) \\<and>\n              \\<not> is_axiom (s_of_ns y) \\<and>\n              (n, x) \\<in> deriv z) \\<Longrightarrow>\n       \\<forall>x y.\n          ((Suc (Suc n), x) \\<in> deriv y) =\n          (\\<exists>z.\n              z \\<in> set (subs y) \\<and>\n              \\<not> is_axiom (s_of_ns y) \\<and> (Suc n, x) \\<in> deriv z)", "apply(simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x y.\n       \\<exists>z.\n          z \\<in> set (subs y) \\<and>\n          \\<not> is_axiom (s_of_ns y) \\<and>\n          (0, x) \\<in> deriv z \\<Longrightarrow>\n       (Suc 0, x) \\<in> deriv y\n 2. \\<And>n.\n       \\<forall>x y.\n          ((Suc n, x) \\<in> deriv y) =\n          (\\<exists>z.\n              z \\<in> set (subs y) \\<and>\n              \\<not> is_axiom (s_of_ns y) \\<and>\n              (n, x) \\<in> deriv z) \\<Longrightarrow>\n       \\<forall>x y.\n          ((Suc (Suc n), x) \\<in> deriv y) =\n          (\\<exists>z.\n              z \\<in> set (subs y) \\<and>\n              \\<not> is_axiom (s_of_ns y) \\<and> (Suc n, x) \\<in> deriv z)", "apply(simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x y.\n       x \\<in> set (subs y) \\<and>\n       \\<not> is_axiom (s_of_ns y) \\<Longrightarrow>\n       (Suc 0, x) \\<in> deriv y\n 2. \\<And>n.\n       \\<forall>x y.\n          ((Suc n, x) \\<in> deriv y) =\n          (\\<exists>z.\n              z \\<in> set (subs y) \\<and>\n              \\<not> is_axiom (s_of_ns y) \\<and>\n              (n, x) \\<in> deriv z) \\<Longrightarrow>\n       \\<forall>x y.\n          ((Suc (Suc n), x) \\<in> deriv y) =\n          (\\<exists>z.\n              z \\<in> set (subs y) \\<and>\n              \\<not> is_axiom (s_of_ns y) \\<and> (Suc n, x) \\<in> deriv z)", "apply(rule step)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x y.\n       x \\<in> set (subs y) \\<and>\n       \\<not> is_axiom (s_of_ns y) \\<Longrightarrow>\n       (0, ?x10 x y) \\<in> deriv y\n 2. \\<And>x y.\n       x \\<in> set (subs y) \\<and>\n       \\<not> is_axiom (s_of_ns y) \\<Longrightarrow>\n       x \\<in> set (subs (?x10 x y))\n 3. \\<And>n.\n       \\<forall>x y.\n          ((Suc n, x) \\<in> deriv y) =\n          (\\<exists>z.\n              z \\<in> set (subs y) \\<and>\n              \\<not> is_axiom (s_of_ns y) \\<and>\n              (n, x) \\<in> deriv z) \\<Longrightarrow>\n       \\<forall>x y.\n          ((Suc (Suc n), x) \\<in> deriv y) =\n          (\\<exists>z.\n              z \\<in> set (subs y) \\<and>\n              \\<not> is_axiom (s_of_ns y) \\<and> (Suc n, x) \\<in> deriv z)", "apply(simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x y.\n       x \\<in> set (subs y) \\<and>\n       \\<not> is_axiom (s_of_ns y) \\<Longrightarrow>\n       x \\<in> set (subs y)\n 2. \\<And>n.\n       \\<forall>x y.\n          ((Suc n, x) \\<in> deriv y) =\n          (\\<exists>z.\n              z \\<in> set (subs y) \\<and>\n              \\<not> is_axiom (s_of_ns y) \\<and>\n              (n, x) \\<in> deriv z) \\<Longrightarrow>\n       \\<forall>x y.\n          ((Suc (Suc n), x) \\<in> deriv y) =\n          (\\<exists>z.\n              z \\<in> set (subs y) \\<and>\n              \\<not> is_axiom (s_of_ns y) \\<and> (Suc n, x) \\<in> deriv z)", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<forall>x y.\n          ((Suc n, x) \\<in> deriv y) =\n          (\\<exists>z.\n              z \\<in> set (subs y) \\<and>\n              \\<not> is_axiom (s_of_ns y) \\<and>\n              (n, x) \\<in> deriv z) \\<Longrightarrow>\n       \\<forall>x y.\n          ((Suc (Suc n), x) \\<in> deriv y) =\n          (\\<exists>z.\n              z \\<in> set (subs y) \\<and>\n              \\<not> is_axiom (s_of_ns y) \\<and> (Suc n, x) \\<in> deriv z)", "apply(blast dest!: deriv_downwards elim: deriv.cases) \\<comment> \\<open>blast needs some help with the reasoning, hence derivSucE\\<close>"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*\nlemma deriv_not_nil: \"s \\<noteq> [] ==> \\<forall>t. (n,t) \\<in> deriv s --> t \\<noteq> []\"\n  apply(induct_tac n)\n  apply(force)\n  apply (blast dest: derivSucE deriv_exists); \n  done\n*)"], ["", "lemma deriv_progress: \"(n,a#list) \\<in> deriv s ==> ~ is_axiom (s_of_ns (a#list)) ==> (\\<exists>zs. (Suc n, list@zs) \\<in> deriv s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(n, a # list) \\<in> deriv s;\n     \\<not> is_axiom (s_of_ns (a # list))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>zs. (Suc n, list @ zs) \\<in> deriv s", "apply(subgoal_tac \"a#list \\<noteq> []\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>(n, a # list) \\<in> deriv s;\n     \\<not> is_axiom (s_of_ns (a # list)); a # list \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> \\<exists>zs. (Suc n, list @ zs) \\<in> deriv s\n 2. \\<lbrakk>(n, a # list) \\<in> deriv s;\n     \\<not> is_axiom (s_of_ns (a # list))\\<rbrakk>\n    \\<Longrightarrow> a # list \\<noteq> []", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>(n, a # list) \\<in> deriv s;\n     \\<not> is_axiom (s_of_ns (a # list))\\<rbrakk>\n    \\<Longrightarrow> a # list \\<noteq> []\n 2. \\<lbrakk>(n, a # list) \\<in> deriv s;\n     \\<not> is_axiom (s_of_ns (a # list)); a # list \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> \\<exists>zs. (Suc n, list @ zs) \\<in> deriv s", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(n, a # list) \\<in> deriv s;\n     \\<not> is_axiom (s_of_ns (a # list)); a # list \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> \\<exists>zs. (Suc n, list @ zs) \\<in> deriv s", "apply(case_tac a)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa b.\n       \\<lbrakk>(n, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list)); a # list \\<noteq> [];\n        a = (aa, b)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>zs. (Suc n, list @ zs) \\<in> deriv s", "apply(case_tac b)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>aa b x11 x12.\n       \\<lbrakk>(n, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list)); a # list \\<noteq> [];\n        a = (aa, b); b = PAtom x11 x12\\<rbrakk>\n       \\<Longrightarrow> \\<exists>zs. (Suc n, list @ zs) \\<in> deriv s\n 2. \\<And>aa b x21 x22.\n       \\<lbrakk>(n, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list)); a # list \\<noteq> [];\n        a = (aa, b); b = NAtom x21 x22\\<rbrakk>\n       \\<Longrightarrow> \\<exists>zs. (Suc n, list @ zs) \\<in> deriv s\n 3. \\<And>aa b x31 x32.\n       \\<lbrakk>(n, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list)); a # list \\<noteq> [];\n        a = (aa, b); b = FConj x31 x32\\<rbrakk>\n       \\<Longrightarrow> \\<exists>zs. (Suc n, list @ zs) \\<in> deriv s\n 4. \\<And>aa b x41 x42.\n       \\<lbrakk>(n, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list)); a # list \\<noteq> [];\n        a = (aa, b); b = FDisj x41 x42\\<rbrakk>\n       \\<Longrightarrow> \\<exists>zs. (Suc n, list @ zs) \\<in> deriv s\n 5. \\<And>aa b x5.\n       \\<lbrakk>(n, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list)); a # list \\<noteq> [];\n        a = (aa, b); b = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<exists>zs. (Suc n, list @ zs) \\<in> deriv s\n 6. \\<And>aa b x6.\n       \\<lbrakk>(n, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list)); a # list \\<noteq> [];\n        a = (aa, b); b = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<exists>zs. (Suc n, list @ zs) \\<in> deriv s", "apply(force dest: not_is_axiom_subs)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "definition\n  inc :: \"nat * nseq => nat * nseq\" where\n  \"inc = (%(n,fs). (Suc n, fs))\""], ["", "lemma inj_inc[simp]: \"inj inc\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj inc", "apply(simp add: inc_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. inj (\\<lambda>(n, fs). (Suc n, fs))", "apply(simp add: inj_on_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma deriv: \"deriv y = insert (0,y) (inc ` (Union (deriv ` {w. ~is_axiom (s_of_ns y) & w : set (subs y)})))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. deriv y =\n    insert (0, y)\n     (inc `\n      \\<Union>\n       (deriv `\n        {w. \\<not> is_axiom (s_of_ns y) \\<and> w \\<in> set (subs y)}))", "apply(rule set_eqI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       (x \\<in> deriv y) =\n       (x \\<in> insert (0, y)\n                 (inc `\n                  \\<Union>\n                   (deriv `\n                    {w. \\<not> is_axiom (s_of_ns y) \\<and>\n                        w \\<in> set (subs y)})))", "apply(simp add: split_paired_all)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       ((a, b) \\<in> deriv y) =\n       (a = 0 \\<and> b = y \\<or>\n        (a, b)\n        \\<in> inc `\n              \\<Union>\n               (deriv `\n                {w. \\<not> is_axiom (s_of_ns y) \\<and>\n                    w \\<in> set (subs y)}))", "apply(case_tac a)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       a = 0 \\<Longrightarrow>\n       ((a, b) \\<in> deriv y) =\n       (a = 0 \\<and> b = y \\<or>\n        (a, b)\n        \\<in> inc `\n              \\<Union>\n               (deriv `\n                {w. \\<not> is_axiom (s_of_ns y) \\<and>\n                    w \\<in> set (subs y)}))\n 2. \\<And>a b nat.\n       a = Suc nat \\<Longrightarrow>\n       ((a, b) \\<in> deriv y) =\n       (a = 0 \\<and> b = y \\<or>\n        (a, b)\n        \\<in> inc `\n              \\<Union>\n               (deriv `\n                {w. \\<not> is_axiom (s_of_ns y) \\<and>\n                    w \\<in> set (subs y)}))", "apply(force simp: inc_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b nat.\n       a = Suc nat \\<Longrightarrow>\n       ((a, b) \\<in> deriv y) =\n       (a = 0 \\<and> b = y \\<or>\n        (a, b)\n        \\<in> inc `\n              \\<Union>\n               (deriv `\n                {w. \\<not> is_axiom (s_of_ns y) \\<and>\n                    w \\<in> set (subs y)}))", "apply(force simp: deriv_deriv_child inc_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma deriv_is_axiom: \"is_axiom (s_of_ns s) ==> deriv s = {(0,s)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_axiom (s_of_ns s) \\<Longrightarrow> deriv s = {(0, s)}", "apply(rule)"], ["proof (prove)\ngoal (2 subgoals):\n 1. is_axiom (s_of_ns s) \\<Longrightarrow> deriv s \\<subseteq> {(0, s)}\n 2. is_axiom (s_of_ns s) \\<Longrightarrow> {(0, s)} \\<subseteq> deriv s", "apply(rule)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>is_axiom (s_of_ns s); x \\<in> deriv s\\<rbrakk>\n       \\<Longrightarrow> x \\<in> {(0, s)}\n 2. is_axiom (s_of_ns s) \\<Longrightarrow> {(0, s)} \\<subseteq> deriv s", "apply(case_tac x)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x a b.\n       \\<lbrakk>is_axiom (s_of_ns s); x \\<in> deriv s; x = (a, b)\\<rbrakk>\n       \\<Longrightarrow> x \\<in> {(0, s)}\n 2. is_axiom (s_of_ns s) \\<Longrightarrow> {(0, s)} \\<subseteq> deriv s", "apply(simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x a b.\n       \\<lbrakk>is_axiom (s_of_ns s); (a, b) \\<in> deriv s;\n        x = (a, b)\\<rbrakk>\n       \\<Longrightarrow> a = 0 \\<and> b = s\n 2. is_axiom (s_of_ns s) \\<Longrightarrow> {(0, s)} \\<subseteq> deriv s", "apply(erule_tac deriv.induct)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x a b.\n       \\<lbrakk>is_axiom (s_of_ns s); x = (a, b)\\<rbrakk>\n       \\<Longrightarrow> 0 = 0 \\<and> s = s\n 2. \\<And>x a b n xa y.\n       \\<lbrakk>is_axiom (s_of_ns s); x = (a, b); (n, xa) \\<in> deriv s;\n        n = 0 \\<and> xa = s; y \\<in> set (subs xa)\\<rbrakk>\n       \\<Longrightarrow> Suc n = 0 \\<and> y = s\n 3. is_axiom (s_of_ns s) \\<Longrightarrow> {(0, s)} \\<subseteq> deriv s", "apply(force)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x a b n xa y.\n       \\<lbrakk>is_axiom (s_of_ns s); x = (a, b); (n, xa) \\<in> deriv s;\n        n = 0 \\<and> xa = s; y \\<in> set (subs xa)\\<rbrakk>\n       \\<Longrightarrow> Suc n = 0 \\<and> y = s\n 2. is_axiom (s_of_ns s) \\<Longrightarrow> {(0, s)} \\<subseteq> deriv s", "apply(simp add: s_of_ns_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x a b n y.\n       \\<lbrakk>is_axiom (map snd s); x = (a, b); n = 0;\n        y \\<in> set (subs s)\\<rbrakk>\n       \\<Longrightarrow> False\n 2. is_axiom (s_of_ns s) \\<Longrightarrow> {(0, s)} \\<subseteq> deriv s", "apply(case_tac s)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x a b n y.\n       \\<lbrakk>is_axiom (map snd s); x = (a, b); n = 0;\n        y \\<in> set (subs s); s = []\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>x a b n y aa list.\n       \\<lbrakk>is_axiom (map snd s); x = (a, b); n = 0;\n        y \\<in> set (subs s); s = aa # list\\<rbrakk>\n       \\<Longrightarrow> False\n 3. is_axiom (s_of_ns s) \\<Longrightarrow> {(0, s)} \\<subseteq> deriv s", "apply(simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x a b n y aa list.\n       \\<lbrakk>is_axiom (map snd s); x = (a, b); n = 0;\n        y \\<in> set (subs s); s = aa # list\\<rbrakk>\n       \\<Longrightarrow> False\n 2. is_axiom (s_of_ns s) \\<Longrightarrow> {(0, s)} \\<subseteq> deriv s", "apply(case_tac aa)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x a b n y aa list ab ba.\n       \\<lbrakk>is_axiom (map snd s); x = (a, b); n = 0;\n        y \\<in> set (subs s); s = aa # list; aa = (ab, ba)\\<rbrakk>\n       \\<Longrightarrow> False\n 2. is_axiom (s_of_ns s) \\<Longrightarrow> {(0, s)} \\<subseteq> deriv s", "apply(case_tac ba)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>x a b n y aa list ab ba x11 x12.\n       \\<lbrakk>is_axiom (map snd s); x = (a, b); n = 0;\n        y \\<in> set (subs s); s = aa # list; aa = (ab, ba);\n        ba = PAtom x11 x12\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>x a b n y aa list ab ba x21 x22.\n       \\<lbrakk>is_axiom (map snd s); x = (a, b); n = 0;\n        y \\<in> set (subs s); s = aa # list; aa = (ab, ba);\n        ba = NAtom x21 x22\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>x a b n y aa list ab ba x31 x32.\n       \\<lbrakk>is_axiom (map snd s); x = (a, b); n = 0;\n        y \\<in> set (subs s); s = aa # list; aa = (ab, ba);\n        ba = FConj x31 x32\\<rbrakk>\n       \\<Longrightarrow> False\n 4. \\<And>x a b n y aa list ab ba x41 x42.\n       \\<lbrakk>is_axiom (map snd s); x = (a, b); n = 0;\n        y \\<in> set (subs s); s = aa # list; aa = (ab, ba);\n        ba = FDisj x41 x42\\<rbrakk>\n       \\<Longrightarrow> False\n 5. \\<And>x a b n y aa list ab ba x5.\n       \\<lbrakk>is_axiom (map snd s); x = (a, b); n = 0;\n        y \\<in> set (subs s); s = aa # list; aa = (ab, ba);\n        ba = FAll x5\\<rbrakk>\n       \\<Longrightarrow> False\n 6. \\<And>x a b n y aa list ab ba x6.\n       \\<lbrakk>is_axiom (map snd s); x = (a, b); n = 0;\n        y \\<in> set (subs s); s = aa # list; aa = (ab, ba);\n        ba = FEx x6\\<rbrakk>\n       \\<Longrightarrow> False\n 7. is_axiom (s_of_ns s) \\<Longrightarrow> {(0, s)} \\<subseteq> deriv s", "apply(simp_all add: Let_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma is_axiom_finite_deriv: \"is_axiom (s_of_ns s) ==> finite (deriv s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_axiom (s_of_ns s) \\<Longrightarrow> finite (deriv s)", "apply(simp add: deriv_is_axiom)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsection \"Failing path\""], ["", "primrec failing_path :: \"(nat * nseq) set => nat => (nat * nseq)\"\nwhere\n  \"failing_path ns 0 = (SOME x. x \\<in> ns & fst x = 0 & infinite (deriv (snd x)) & ~ is_axiom (s_of_ns (snd x)))\"\n| \"failing_path ns (Suc n) = (let fn = failing_path ns n in \n  (SOME fsucn. fsucn \\<in> ns & fst fsucn = Suc n & (snd fsucn) : set (subs (snd fn)) & infinite (deriv (snd fsucn)) & ~ is_axiom (s_of_ns (snd fsucn))))\""], ["", "locale loc1 = \n  fixes s and f \n  assumes f: \"f = failing_path (deriv s)\""], ["", "lemma (in loc1) f0: \"infinite (deriv s) ==> f 0 \\<in> (deriv s) & fst (f 0) = 0 & infinite (deriv (snd (f 0))) & ~ is_axiom (s_of_ns (snd (f 0)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. infinite (deriv s) \\<Longrightarrow>\n    f 0 \\<in> deriv s \\<and>\n    fst (f 0) = 0 \\<and>\n    infinite (deriv (snd (f 0))) \\<and>\n    \\<not> is_axiom (s_of_ns (snd (f 0)))", "apply(simp add: f)"], ["proof (prove)\ngoal (1 subgoal):\n 1. infinite (deriv s) \\<Longrightarrow>\n    (SOME x.\n        x \\<in> deriv s \\<and>\n        fst x = 0 \\<and>\n        infinite (deriv (snd x)) \\<and> \\<not> is_axiom (s_of_ns (snd x)))\n    \\<in> deriv s \\<and>\n    fst (SOME x.\n            x \\<in> deriv s \\<and>\n            fst x = 0 \\<and>\n            infinite (deriv (snd x)) \\<and>\n            \\<not> is_axiom (s_of_ns (snd x))) =\n    0 \\<and>\n    infinite\n     (deriv\n       (snd (SOME x.\n                x \\<in> deriv s \\<and>\n                fst x = 0 \\<and>\n                infinite (deriv (snd x)) \\<and>\n                \\<not> is_axiom (s_of_ns (snd x))))) \\<and>\n    \\<not> is_axiom\n            (s_of_ns\n              (snd (SOME x.\n                       x \\<in> deriv s \\<and>\n                       fst x = 0 \\<and>\n                       infinite (deriv (snd x)) \\<and>\n                       \\<not> is_axiom (s_of_ns (snd x)))))", "apply(rule someI_ex)"], ["proof (prove)\ngoal (1 subgoal):\n 1. infinite (deriv s) \\<Longrightarrow>\n    \\<exists>x.\n       x \\<in> deriv s \\<and>\n       fst x = 0 \\<and>\n       infinite (deriv (snd x)) \\<and> \\<not> is_axiom (s_of_ns (snd x))", "apply(rule_tac x=\"(0,s)\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. infinite (deriv s) \\<Longrightarrow>\n    (0, s) \\<in> deriv s \\<and>\n    fst (0, s) = 0 \\<and>\n    infinite (deriv (snd (0, s))) \\<and>\n    \\<not> is_axiom (s_of_ns (snd (0, s)))", "apply(force simp add: deriv_is_axiom)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma infinite_union: \"finite Y ==> infinite (Union (f ` Y)) ==> \\<exists>y. y \\<in> Y & infinite (f y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite Y; infinite (\\<Union> (f ` Y))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>y. y \\<in> Y \\<and> infinite (f y)", "apply(rule ccontr)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite Y; infinite (\\<Union> (f ` Y));\n     \\<nexists>y. y \\<in> Y \\<and> infinite (f y)\\<rbrakk>\n    \\<Longrightarrow> False", "apply(simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma infinite_inj_infinite_image: \"inj_on f Z ==> infinite (f ` Z) = infinite Z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_on f Z \\<Longrightarrow> infinite (f ` Z) = infinite Z", "apply(rule ccontr)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>inj_on f Z; infinite (f ` Z) \\<noteq> infinite Z\\<rbrakk>\n    \\<Longrightarrow> False", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>inj_on f Z; finite (f ` Z) = infinite Z\\<rbrakk>\n    \\<Longrightarrow> False", "apply(force dest: finite_imageD)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma inj_inj_on: \"inj f ==> inj_on f A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj f \\<Longrightarrow> inj_on f A", "by(blast intro: subset_inj_on)"], ["", "lemma collect_disj: \"{x. P x | Q x} = {x. P x} Un {x. Q x}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {x. P x \\<or> Q x} = {x. P x} \\<union> {x. Q x}", "by(force)"], ["", "lemma t: \"finite {w. P w} ==> finite {w. Q w & P w}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite {w. P w} \\<Longrightarrow> finite {w. Q w \\<and> P w}", "by (rule finite_subset, auto)"], ["", "lemma finite_subs: \"finite {w. ~is_axiom (s_of_ns y) & w : set (subs y)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite {w. \\<not> is_axiom (s_of_ns y) \\<and> w \\<in> set (subs y)}", "apply(case_tac y)"], ["proof (prove)\ngoal (2 subgoals):\n 1. y = [] \\<Longrightarrow>\n    finite {w. \\<not> is_axiom (s_of_ns y) \\<and> w \\<in> set (subs y)}\n 2. \\<And>a list.\n       y = a # list \\<Longrightarrow>\n       finite {w. \\<not> is_axiom (s_of_ns y) \\<and> w \\<in> set (subs y)}", "apply(simp add: s_of_ns_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a list.\n       y = a # list \\<Longrightarrow>\n       finite {w. \\<not> is_axiom (s_of_ns y) \\<and> w \\<in> set (subs y)}", "apply(case_tac a)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a list aa b.\n       \\<lbrakk>y = a # list; a = (aa, b)\\<rbrakk>\n       \\<Longrightarrow> finite\n                          {w. \\<not> is_axiom (s_of_ns y) \\<and>\n                              w \\<in> set (subs y)}", "apply(case_tac b)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>a list aa b x11 x12.\n       \\<lbrakk>y = a # list; a = (aa, b); b = PAtom x11 x12\\<rbrakk>\n       \\<Longrightarrow> finite\n                          {w. \\<not> is_axiom (s_of_ns y) \\<and>\n                              w \\<in> set (subs y)}\n 2. \\<And>a list aa b x21 x22.\n       \\<lbrakk>y = a # list; a = (aa, b); b = NAtom x21 x22\\<rbrakk>\n       \\<Longrightarrow> finite\n                          {w. \\<not> is_axiom (s_of_ns y) \\<and>\n                              w \\<in> set (subs y)}\n 3. \\<And>a list aa b x31 x32.\n       \\<lbrakk>y = a # list; a = (aa, b); b = FConj x31 x32\\<rbrakk>\n       \\<Longrightarrow> finite\n                          {w. \\<not> is_axiom (s_of_ns y) \\<and>\n                              w \\<in> set (subs y)}\n 4. \\<And>a list aa b x41 x42.\n       \\<lbrakk>y = a # list; a = (aa, b); b = FDisj x41 x42\\<rbrakk>\n       \\<Longrightarrow> finite\n                          {w. \\<not> is_axiom (s_of_ns y) \\<and>\n                              w \\<in> set (subs y)}\n 5. \\<And>a list aa b x5.\n       \\<lbrakk>y = a # list; a = (aa, b); b = FAll x5\\<rbrakk>\n       \\<Longrightarrow> finite\n                          {w. \\<not> is_axiom (s_of_ns y) \\<and>\n                              w \\<in> set (subs y)}\n 6. \\<And>a list aa b x6.\n       \\<lbrakk>y = a # list; a = (aa, b); b = FEx x6\\<rbrakk>\n       \\<Longrightarrow> finite\n                          {w. \\<not> is_axiom (s_of_ns y) \\<and>\n                              w \\<in> set (subs y)}", "apply(simp_all only: subs.simps)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>a list aa b x11 x12.\n       \\<lbrakk>y = (aa, PAtom x11 x12) # list; a = (aa, PAtom x11 x12);\n        b = PAtom x11 x12\\<rbrakk>\n       \\<Longrightarrow> finite\n                          {w. \\<not> is_axiom\n(s_of_ns ((aa, PAtom x11 x12) # list)) \\<and>\n                              w \\<in> set\n (let (m, f) = (aa, PAtom x11 x12)\n  in case f of\n     PAtom p vs \\<Rightarrow>\n       if NAtom p vs \\<in> set (map snd list) then []\n       else [list @ [(0, PAtom p vs)]]\n     | NAtom p vs \\<Rightarrow>\n         if PAtom p vs \\<in> set (map snd list) then []\n         else [list @ [(0, NAtom p vs)]]\n     | FConj f g \\<Rightarrow> [list @ [(0, f)], list @ [(0, g)]]\n     | FDisj f g \\<Rightarrow> [list @ [(0, f), (0, g)]]\n     | FAll f \\<Rightarrow>\n         [list @\n          [(0, finst f\n                (newvar (sfv (s_of_ns ((aa, PAtom x11 x12) # list)))))]]\n     | FEx f \\<Rightarrow> [list @ [(0, finst f m), (Suc m, FEx f)]])}\n 2. \\<And>a list aa b x21 x22.\n       \\<lbrakk>y = (aa, NAtom x21 x22) # list; a = (aa, NAtom x21 x22);\n        b = NAtom x21 x22\\<rbrakk>\n       \\<Longrightarrow> finite\n                          {w. \\<not> is_axiom\n(s_of_ns ((aa, NAtom x21 x22) # list)) \\<and>\n                              w \\<in> set\n (let (m, f) = (aa, NAtom x21 x22)\n  in case f of\n     PAtom p vs \\<Rightarrow>\n       if NAtom p vs \\<in> set (map snd list) then []\n       else [list @ [(0, PAtom p vs)]]\n     | NAtom p vs \\<Rightarrow>\n         if PAtom p vs \\<in> set (map snd list) then []\n         else [list @ [(0, NAtom p vs)]]\n     | FConj f g \\<Rightarrow> [list @ [(0, f)], list @ [(0, g)]]\n     | FDisj f g \\<Rightarrow> [list @ [(0, f), (0, g)]]\n     | FAll f \\<Rightarrow>\n         [list @\n          [(0, finst f\n                (newvar (sfv (s_of_ns ((aa, NAtom x21 x22) # list)))))]]\n     | FEx f \\<Rightarrow> [list @ [(0, finst f m), (Suc m, FEx f)]])}\n 3. \\<And>a list aa b x31 x32.\n       \\<lbrakk>y = (aa, FConj x31 x32) # list; a = (aa, FConj x31 x32);\n        b = FConj x31 x32\\<rbrakk>\n       \\<Longrightarrow> finite\n                          {w. \\<not> is_axiom\n(s_of_ns ((aa, FConj x31 x32) # list)) \\<and>\n                              w \\<in> set\n (let (m, f) = (aa, FConj x31 x32)\n  in case f of\n     PAtom p vs \\<Rightarrow>\n       if NAtom p vs \\<in> set (map snd list) then []\n       else [list @ [(0, PAtom p vs)]]\n     | NAtom p vs \\<Rightarrow>\n         if PAtom p vs \\<in> set (map snd list) then []\n         else [list @ [(0, NAtom p vs)]]\n     | FConj f g \\<Rightarrow> [list @ [(0, f)], list @ [(0, g)]]\n     | FDisj f g \\<Rightarrow> [list @ [(0, f), (0, g)]]\n     | FAll f \\<Rightarrow>\n         [list @\n          [(0, finst f\n                (newvar (sfv (s_of_ns ((aa, FConj x31 x32) # list)))))]]\n     | FEx f \\<Rightarrow> [list @ [(0, finst f m), (Suc m, FEx f)]])}\n 4. \\<And>a list aa b x41 x42.\n       \\<lbrakk>y = (aa, FDisj x41 x42) # list; a = (aa, FDisj x41 x42);\n        b = FDisj x41 x42\\<rbrakk>\n       \\<Longrightarrow> finite\n                          {w. \\<not> is_axiom\n(s_of_ns ((aa, FDisj x41 x42) # list)) \\<and>\n                              w \\<in> set\n (let (m, f) = (aa, FDisj x41 x42)\n  in case f of\n     PAtom p vs \\<Rightarrow>\n       if NAtom p vs \\<in> set (map snd list) then []\n       else [list @ [(0, PAtom p vs)]]\n     | NAtom p vs \\<Rightarrow>\n         if PAtom p vs \\<in> set (map snd list) then []\n         else [list @ [(0, NAtom p vs)]]\n     | FConj f g \\<Rightarrow> [list @ [(0, f)], list @ [(0, g)]]\n     | FDisj f g \\<Rightarrow> [list @ [(0, f), (0, g)]]\n     | FAll f \\<Rightarrow>\n         [list @\n          [(0, finst f\n                (newvar (sfv (s_of_ns ((aa, FDisj x41 x42) # list)))))]]\n     | FEx f \\<Rightarrow> [list @ [(0, finst f m), (Suc m, FEx f)]])}\n 5. \\<And>a list aa b x5.\n       \\<lbrakk>y = (aa, FAll x5) # list; a = (aa, FAll x5);\n        b = FAll x5\\<rbrakk>\n       \\<Longrightarrow> finite\n                          {w. \\<not> is_axiom\n(s_of_ns ((aa, FAll x5) # list)) \\<and>\n                              w \\<in> set\n (let (m, f) = (aa, FAll x5)\n  in case f of\n     PAtom p vs \\<Rightarrow>\n       if NAtom p vs \\<in> set (map snd list) then []\n       else [list @ [(0, PAtom p vs)]]\n     | NAtom p vs \\<Rightarrow>\n         if PAtom p vs \\<in> set (map snd list) then []\n         else [list @ [(0, NAtom p vs)]]\n     | FConj f g \\<Rightarrow> [list @ [(0, f)], list @ [(0, g)]]\n     | FDisj f g \\<Rightarrow> [list @ [(0, f), (0, g)]]\n     | FAll f \\<Rightarrow>\n         [list @\n          [(0, finst f (newvar (sfv (s_of_ns ((aa, FAll x5) # list)))))]]\n     | FEx f \\<Rightarrow> [list @ [(0, finst f m), (Suc m, FEx f)]])}\n 6. \\<And>a list aa b x6.\n       \\<lbrakk>y = (aa, FEx x6) # list; a = (aa, FEx x6);\n        b = FEx x6\\<rbrakk>\n       \\<Longrightarrow> finite\n                          {w. \\<not> is_axiom\n(s_of_ns ((aa, FEx x6) # list)) \\<and>\n                              w \\<in> set\n (let (m, f) = (aa, FEx x6)\n  in case f of\n     PAtom p vs \\<Rightarrow>\n       if NAtom p vs \\<in> set (map snd list) then []\n       else [list @ [(0, PAtom p vs)]]\n     | NAtom p vs \\<Rightarrow>\n         if PAtom p vs \\<in> set (map snd list) then []\n         else [list @ [(0, NAtom p vs)]]\n     | FConj f g \\<Rightarrow> [list @ [(0, f)], list @ [(0, g)]]\n     | FDisj f g \\<Rightarrow> [list @ [(0, f), (0, g)]]\n     | FAll f \\<Rightarrow>\n         [list @\n          [(0, finst f (newvar (sfv (s_of_ns ((aa, FEx x6) # list)))))]]\n     | FEx f \\<Rightarrow> [list @ [(0, finst f m), (Suc m, FEx f)]])}", "apply(auto intro: t simp add: collect_disj)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in loc1) fSuc:\n  shows \"[|\n  f n \\<in> deriv s & fst (f n) = n & infinite (deriv (snd (f n))) & ~is_axiom (s_of_ns (snd (f n)))\n  |] ==> f (Suc n) \\<in> deriv s & fst (f (Suc n)) = Suc n & (snd (f (Suc n))) : set (subs (snd (f n))) & infinite (deriv (snd (f (Suc n)))) & ~is_axiom (s_of_ns (snd (f (Suc n))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f n \\<in> deriv s \\<and>\n    fst (f n) = n \\<and>\n    infinite (deriv (snd (f n))) \\<and>\n    \\<not> is_axiom (s_of_ns (snd (f n))) \\<Longrightarrow>\n    f (Suc n) \\<in> deriv s \\<and>\n    fst (f (Suc n)) = Suc n \\<and>\n    snd (f (Suc n)) \\<in> set (subs (snd (f n))) \\<and>\n    infinite (deriv (snd (f (Suc n)))) \\<and>\n    \\<not> is_axiom (s_of_ns (snd (f (Suc n))))", "apply(simp add: Let_def f)"], ["proof (prove)\ngoal (1 subgoal):\n 1. failing_path (deriv s) n \\<in> deriv s \\<and>\n    fst (failing_path (deriv s) n) = n \\<and>\n    infinite (deriv (snd (failing_path (deriv s) n))) \\<and>\n    \\<not> is_axiom\n            (s_of_ns (snd (failing_path (deriv s) n))) \\<Longrightarrow>\n    (SOME fsucn.\n        fsucn \\<in> deriv s \\<and>\n        fst fsucn = Suc n \\<and>\n        snd fsucn \\<in> set (subs (snd (failing_path (deriv s) n))) \\<and>\n        infinite (deriv (snd fsucn)) \\<and>\n        \\<not> is_axiom (s_of_ns (snd fsucn)))\n    \\<in> deriv s \\<and>\n    fst (SOME fsucn.\n            fsucn \\<in> deriv s \\<and>\n            fst fsucn = Suc n \\<and>\n            snd fsucn\n            \\<in> set (subs (snd (failing_path (deriv s) n))) \\<and>\n            infinite (deriv (snd fsucn)) \\<and>\n            \\<not> is_axiom (s_of_ns (snd fsucn))) =\n    Suc n \\<and>\n    snd (SOME fsucn.\n            fsucn \\<in> deriv s \\<and>\n            fst fsucn = Suc n \\<and>\n            snd fsucn\n            \\<in> set (subs (snd (failing_path (deriv s) n))) \\<and>\n            infinite (deriv (snd fsucn)) \\<and>\n            \\<not> is_axiom (s_of_ns (snd fsucn)))\n    \\<in> set (subs (snd (failing_path (deriv s) n))) \\<and>\n    infinite\n     (deriv\n       (snd (SOME fsucn.\n                fsucn \\<in> deriv s \\<and>\n                fst fsucn = Suc n \\<and>\n                snd fsucn\n                \\<in> set (subs (snd (failing_path (deriv s) n))) \\<and>\n                infinite (deriv (snd fsucn)) \\<and>\n                \\<not> is_axiom (s_of_ns (snd fsucn))))) \\<and>\n    \\<not> is_axiom\n            (s_of_ns\n              (snd (SOME fsucn.\n                       fsucn \\<in> deriv s \\<and>\n                       fst fsucn = Suc n \\<and>\n                       snd fsucn\n                       \\<in> set (subs\n                                   (snd (failing_path (deriv s) n))) \\<and>\n                       infinite (deriv (snd fsucn)) \\<and>\n                       \\<not> is_axiom (s_of_ns (snd fsucn)))))", "apply(rule_tac someI_ex)"], ["proof (prove)\ngoal (1 subgoal):\n 1. failing_path (deriv s) n \\<in> deriv s \\<and>\n    fst (failing_path (deriv s) n) = n \\<and>\n    infinite (deriv (snd (failing_path (deriv s) n))) \\<and>\n    \\<not> is_axiom\n            (s_of_ns (snd (failing_path (deriv s) n))) \\<Longrightarrow>\n    \\<exists>x.\n       x \\<in> deriv s \\<and>\n       fst x = Suc n \\<and>\n       snd x \\<in> set (subs (snd (failing_path (deriv s) n))) \\<and>\n       infinite (deriv (snd x)) \\<and> \\<not> is_axiom (s_of_ns (snd x))", "apply(simp only: f[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. f n \\<in> deriv s \\<and>\n    fst (f n) = n \\<and>\n    infinite (deriv (snd (f n))) \\<and>\n    \\<not> is_axiom (s_of_ns (snd (f n))) \\<Longrightarrow>\n    \\<exists>x.\n       x \\<in> deriv s \\<and>\n       fst x = Suc n \\<and>\n       snd x \\<in> set (subs (snd (f n))) \\<and>\n       infinite (deriv (snd x)) \\<and> \\<not> is_axiom (s_of_ns (snd x))", "apply(drule_tac subst[OF deriv[of \"snd (f n)\"] ])"], ["proof (prove)\ngoal (1 subgoal):\n 1. f n \\<in> deriv s \\<and>\n    fst (f n) = n \\<and>\n    infinite\n     (insert (0, snd (f n))\n       (inc `\n        \\<Union>\n         (deriv `\n          {w. \\<not> is_axiom (s_of_ns (snd (f n))) \\<and>\n              w \\<in> set (subs (snd (f n)))}))) \\<and>\n    \\<not> is_axiom (s_of_ns (snd (f n))) \\<Longrightarrow>\n    \\<exists>x.\n       x \\<in> deriv s \\<and>\n       fst x = Suc n \\<and>\n       snd x \\<in> set (subs (snd (f n))) \\<and>\n       infinite (deriv (snd x)) \\<and> \\<not> is_axiom (s_of_ns (snd x))", "apply(simp only: finite_insert)"], ["proof (prove)\ngoal (1 subgoal):\n 1. f n \\<in> deriv s \\<and>\n    fst (f n) = n \\<and>\n    infinite\n     (inc `\n      \\<Union>\n       (deriv `\n        {w. \\<not> is_axiom (s_of_ns (snd (f n))) \\<and>\n            w \\<in> set (subs (snd (f n)))})) \\<and>\n    \\<not> is_axiom (s_of_ns (snd (f n))) \\<Longrightarrow>\n    \\<exists>x.\n       x \\<in> deriv s \\<and>\n       fst x = Suc n \\<and>\n       snd x \\<in> set (subs (snd (f n))) \\<and>\n       infinite (deriv (snd x)) \\<and> \\<not> is_axiom (s_of_ns (snd x))", "apply(subgoal_tac \"infinite (\\<Union>(deriv ` {w. ~is_axiom (s_of_ns (snd (f n))) & w : set (subs (snd (f n)))}))\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>f n \\<in> deriv s \\<and>\n             fst (f n) = n \\<and>\n             infinite\n              (inc `\n               \\<Union>\n                (deriv `\n                 {w. \\<not> is_axiom (s_of_ns (snd (f n))) \\<and>\n                     w \\<in> set (subs (snd (f n)))})) \\<and>\n             \\<not> is_axiom (s_of_ns (snd (f n)));\n     infinite\n      (\\<Union>\n        (deriv `\n         {w. \\<not> is_axiom (s_of_ns (snd (f n))) \\<and>\n             w \\<in> set (subs (snd (f n)))}))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         x \\<in> deriv s \\<and>\n                         fst x = Suc n \\<and>\n                         snd x \\<in> set (subs (snd (f n))) \\<and>\n                         infinite (deriv (snd x)) \\<and>\n                         \\<not> is_axiom (s_of_ns (snd x))\n 2. f n \\<in> deriv s \\<and>\n    fst (f n) = n \\<and>\n    infinite\n     (inc `\n      \\<Union>\n       (deriv `\n        {w. \\<not> is_axiom (s_of_ns (snd (f n))) \\<and>\n            w \\<in> set (subs (snd (f n)))})) \\<and>\n    \\<not> is_axiom (s_of_ns (snd (f n))) \\<Longrightarrow>\n    infinite\n     (\\<Union>\n       (deriv `\n        {w. \\<not> is_axiom (s_of_ns (snd (f n))) \\<and>\n            w \\<in> set (subs (snd (f n)))}))", "apply(drule_tac infinite_union[OF finite_subs])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>f n \\<in> deriv s \\<and>\n             fst (f n) = n \\<and>\n             infinite\n              (inc `\n               \\<Union>\n                (deriv `\n                 {w. \\<not> is_axiom (s_of_ns (snd (f n))) \\<and>\n                     w \\<in> set (subs (snd (f n)))})) \\<and>\n             \\<not> is_axiom (s_of_ns (snd (f n)));\n     \\<exists>y.\n        y \\<in> {w. \\<not> is_axiom (s_of_ns (snd (f n))) \\<and>\n                    w \\<in> set (subs (snd (f n)))} \\<and>\n        infinite (deriv y)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         x \\<in> deriv s \\<and>\n                         fst x = Suc n \\<and>\n                         snd x \\<in> set (subs (snd (f n))) \\<and>\n                         infinite (deriv (snd x)) \\<and>\n                         \\<not> is_axiom (s_of_ns (snd x))\n 2. f n \\<in> deriv s \\<and>\n    fst (f n) = n \\<and>\n    infinite\n     (inc `\n      \\<Union>\n       (deriv `\n        {w. \\<not> is_axiom (s_of_ns (snd (f n))) \\<and>\n            w \\<in> set (subs (snd (f n)))})) \\<and>\n    \\<not> is_axiom (s_of_ns (snd (f n))) \\<Longrightarrow>\n    infinite\n     (\\<Union>\n       (deriv `\n        {w. \\<not> is_axiom (s_of_ns (snd (f n))) \\<and>\n            w \\<in> set (subs (snd (f n)))}))", "apply(erule exE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>y.\n       \\<lbrakk>f n \\<in> deriv s \\<and>\n                fst (f n) = n \\<and>\n                infinite\n                 (inc `\n                  \\<Union>\n                   (deriv `\n                    {w. \\<not> is_axiom (s_of_ns (snd (f n))) \\<and>\n                        w \\<in> set (subs (snd (f n)))})) \\<and>\n                \\<not> is_axiom (s_of_ns (snd (f n)));\n        y \\<in> {w. \\<not> is_axiom (s_of_ns (snd (f n))) \\<and>\n                    w \\<in> set (subs (snd (f n)))} \\<and>\n        infinite (deriv y)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            x \\<in> deriv s \\<and>\n                            fst x = Suc n \\<and>\n                            snd x \\<in> set (subs (snd (f n))) \\<and>\n                            infinite (deriv (snd x)) \\<and>\n                            \\<not> is_axiom (s_of_ns (snd x))\n 2. f n \\<in> deriv s \\<and>\n    fst (f n) = n \\<and>\n    infinite\n     (inc `\n      \\<Union>\n       (deriv `\n        {w. \\<not> is_axiom (s_of_ns (snd (f n))) \\<and>\n            w \\<in> set (subs (snd (f n)))})) \\<and>\n    \\<not> is_axiom (s_of_ns (snd (f n))) \\<Longrightarrow>\n    infinite\n     (\\<Union>\n       (deriv `\n        {w. \\<not> is_axiom (s_of_ns (snd (f n))) \\<and>\n            w \\<in> set (subs (snd (f n)))}))", "apply(rule_tac x=\"(Suc n, y)\" in exI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>y.\n       \\<lbrakk>f n \\<in> deriv s \\<and>\n                fst (f n) = n \\<and>\n                infinite\n                 (inc `\n                  \\<Union>\n                   (deriv `\n                    {w. \\<not> is_axiom (s_of_ns (snd (f n))) \\<and>\n                        w \\<in> set (subs (snd (f n)))})) \\<and>\n                \\<not> is_axiom (s_of_ns (snd (f n)));\n        y \\<in> {w. \\<not> is_axiom (s_of_ns (snd (f n))) \\<and>\n                    w \\<in> set (subs (snd (f n)))} \\<and>\n        infinite (deriv y)\\<rbrakk>\n       \\<Longrightarrow> (Suc n, y) \\<in> deriv s \\<and>\n                         fst (Suc n, y) = Suc n \\<and>\n                         snd (Suc n, y) \\<in> set (subs (snd (f n))) \\<and>\n                         infinite (deriv (snd (Suc n, y))) \\<and>\n                         \\<not> is_axiom (s_of_ns (snd (Suc n, y)))\n 2. f n \\<in> deriv s \\<and>\n    fst (f n) = n \\<and>\n    infinite\n     (inc `\n      \\<Union>\n       (deriv `\n        {w. \\<not> is_axiom (s_of_ns (snd (f n))) \\<and>\n            w \\<in> set (subs (snd (f n)))})) \\<and>\n    \\<not> is_axiom (s_of_ns (snd (f n))) \\<Longrightarrow>\n    infinite\n     (\\<Union>\n       (deriv `\n        {w. \\<not> is_axiom (s_of_ns (snd (f n))) \\<and>\n            w \\<in> set (subs (snd (f n)))}))", "apply(clarify)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>y.\n       \\<lbrakk>f n \\<in> deriv s; infinite (deriv y); fst (f n) = n;\n        \\<not> is_axiom (s_of_ns (snd (f n)));\n        y \\<in> set (subs (snd (f n)));\n        infinite\n         (inc `\n          \\<Union>\n           (deriv `\n            {w. \\<not> is_axiom (s_of_ns (snd (f n))) \\<and>\n                w \\<in> set (subs (snd (f n)))}));\n        \\<not> is_axiom (s_of_ns (snd (f n)))\\<rbrakk>\n       \\<Longrightarrow> (Suc n, y) \\<in> deriv s \\<and>\n                         fst (Suc n, y) = Suc n \\<and>\n                         snd (Suc n, y) \\<in> set (subs (snd (f n))) \\<and>\n                         infinite (deriv (snd (Suc n, y))) \\<and>\n                         \\<not> is_axiom (s_of_ns (snd (Suc n, y)))\n 2. f n \\<in> deriv s \\<and>\n    fst (f n) = n \\<and>\n    infinite\n     (inc `\n      \\<Union>\n       (deriv `\n        {w. \\<not> is_axiom (s_of_ns (snd (f n))) \\<and>\n            w \\<in> set (subs (snd (f n)))})) \\<and>\n    \\<not> is_axiom (s_of_ns (snd (f n))) \\<Longrightarrow>\n    infinite\n     (\\<Union>\n       (deriv `\n        {w. \\<not> is_axiom (s_of_ns (snd (f n))) \\<and>\n            w \\<in> set (subs (snd (f n)))}))", "apply(simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>y.\n       \\<lbrakk>f n \\<in> deriv s; infinite (deriv y); fst (f n) = n;\n        y \\<in> set (subs (snd (f n)));\n        infinite (inc ` \\<Union> (deriv ` set (subs (snd (f n)))));\n        \\<not> is_axiom (s_of_ns (snd (f n)))\\<rbrakk>\n       \\<Longrightarrow> (Suc n, y) \\<in> deriv s \\<and>\n                         \\<not> is_axiom (s_of_ns y)\n 2. f n \\<in> deriv s \\<and>\n    fst (f n) = n \\<and>\n    infinite\n     (inc `\n      \\<Union>\n       (deriv `\n        {w. \\<not> is_axiom (s_of_ns (snd (f n))) \\<and>\n            w \\<in> set (subs (snd (f n)))})) \\<and>\n    \\<not> is_axiom (s_of_ns (snd (f n))) \\<Longrightarrow>\n    infinite\n     (\\<Union>\n       (deriv `\n        {w. \\<not> is_axiom (s_of_ns (snd (f n))) \\<and>\n            w \\<in> set (subs (snd (f n)))}))", "apply(case_tac \"f n\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>y a b.\n       \\<lbrakk>f n \\<in> deriv s; infinite (deriv y); fst (f n) = n;\n        y \\<in> set (subs (snd (f n)));\n        infinite (inc ` \\<Union> (deriv ` set (subs (snd (f n)))));\n        \\<not> is_axiom (s_of_ns (snd (f n))); f n = (a, b)\\<rbrakk>\n       \\<Longrightarrow> (Suc n, y) \\<in> deriv s \\<and>\n                         \\<not> is_axiom (s_of_ns y)\n 2. f n \\<in> deriv s \\<and>\n    fst (f n) = n \\<and>\n    infinite\n     (inc `\n      \\<Union>\n       (deriv `\n        {w. \\<not> is_axiom (s_of_ns (snd (f n))) \\<and>\n            w \\<in> set (subs (snd (f n)))})) \\<and>\n    \\<not> is_axiom (s_of_ns (snd (f n))) \\<Longrightarrow>\n    infinite\n     (\\<Union>\n       (deriv `\n        {w. \\<not> is_axiom (s_of_ns (snd (f n))) \\<and>\n            w \\<in> set (subs (snd (f n)))}))", "apply(simp add: step)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>y a b.\n       \\<lbrakk>(n, b) \\<in> deriv s; infinite (deriv y); a = n;\n        y \\<in> set (subs b);\n        infinite (inc ` \\<Union> (deriv ` set (subs b)));\n        \\<not> is_axiom (s_of_ns b); f n = (n, b)\\<rbrakk>\n       \\<Longrightarrow> \\<not> is_axiom (s_of_ns y)\n 2. f n \\<in> deriv s \\<and>\n    fst (f n) = n \\<and>\n    infinite\n     (inc `\n      \\<Union>\n       (deriv `\n        {w. \\<not> is_axiom (s_of_ns (snd (f n))) \\<and>\n            w \\<in> set (subs (snd (f n)))})) \\<and>\n    \\<not> is_axiom (s_of_ns (snd (f n))) \\<Longrightarrow>\n    infinite\n     (\\<Union>\n       (deriv `\n        {w. \\<not> is_axiom (s_of_ns (snd (f n))) \\<and>\n            w \\<in> set (subs (snd (f n)))}))", "apply(force simp add: is_axiom_finite_deriv)"], ["proof (prove)\ngoal (1 subgoal):\n 1. f n \\<in> deriv s \\<and>\n    fst (f n) = n \\<and>\n    infinite\n     (inc `\n      \\<Union>\n       (deriv `\n        {w. \\<not> is_axiom (s_of_ns (snd (f n))) \\<and>\n            w \\<in> set (subs (snd (f n)))})) \\<and>\n    \\<not> is_axiom (s_of_ns (snd (f n))) \\<Longrightarrow>\n    infinite\n     (\\<Union>\n       (deriv `\n        {w. \\<not> is_axiom (s_of_ns (snd (f n))) \\<and>\n            w \\<in> set (subs (snd (f n)))}))", "apply(force simp add: infinite_inj_infinite_image inj_inj_on)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in loc1) is_path_f_0: \"infinite (deriv s) ==> f 0 = (0,s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. infinite (deriv s) \\<Longrightarrow> f 0 = (0, s)", "apply(subgoal_tac \"f 0 \\<in> deriv s & fst (f 0) = 0\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>infinite (deriv s);\n     f 0 \\<in> deriv s \\<and> fst (f 0) = 0\\<rbrakk>\n    \\<Longrightarrow> f 0 = (0, s)\n 2. infinite (deriv s) \\<Longrightarrow>\n    f 0 \\<in> deriv s \\<and> fst (f 0) = 0", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. infinite (deriv s) \\<Longrightarrow>\n    f 0 \\<in> deriv s \\<and> fst (f 0) = 0\n 2. \\<lbrakk>infinite (deriv s);\n     f 0 \\<in> deriv s \\<and> fst (f 0) = 0\\<rbrakk>\n    \\<Longrightarrow> f 0 = (0, s)", "apply(frule_tac f0)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>infinite (deriv s);\n     f 0 \\<in> deriv s \\<and>\n     fst (f 0) = 0 \\<and>\n     infinite (deriv (snd (f 0))) \\<and>\n     \\<not> is_axiom (s_of_ns (snd (f 0)))\\<rbrakk>\n    \\<Longrightarrow> f 0 \\<in> deriv s \\<and> fst (f 0) = 0\n 2. \\<lbrakk>infinite (deriv s);\n     f 0 \\<in> deriv s \\<and> fst (f 0) = 0\\<rbrakk>\n    \\<Longrightarrow> f 0 = (0, s)", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>infinite (deriv s);\n     f 0 \\<in> deriv s \\<and> fst (f 0) = 0\\<rbrakk>\n    \\<Longrightarrow> f 0 = (0, s)", "apply(case_tac \"f 0\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>infinite (deriv s); f 0 \\<in> deriv s \\<and> fst (f 0) = 0;\n        f 0 = (a, b)\\<rbrakk>\n       \\<Longrightarrow> f 0 = (0, s)", "apply(elim conjE, simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in loc1) is_path_f': \"infinite (deriv s) ==> \\<forall>n. f n \\<in> deriv s & fst (f n) = n & infinite (deriv (snd (f n))) & ~ is_axiom (s_of_ns (snd (f n)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. infinite (deriv s) \\<Longrightarrow>\n    \\<forall>n.\n       f n \\<in> deriv s \\<and>\n       fst (f n) = n \\<and>\n       infinite (deriv (snd (f n))) \\<and>\n       \\<not> is_axiom (s_of_ns (snd (f n)))", "apply(rule)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       infinite (deriv s) \\<Longrightarrow>\n       f n \\<in> deriv s \\<and>\n       fst (f n) = n \\<and>\n       infinite (deriv (snd (f n))) \\<and>\n       \\<not> is_axiom (s_of_ns (snd (f n)))", "apply(induct_tac n)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n.\n       infinite (deriv s) \\<Longrightarrow>\n       f 0 \\<in> deriv s \\<and>\n       fst (f 0) = 0 \\<and>\n       infinite (deriv (snd (f 0))) \\<and>\n       \\<not> is_axiom (s_of_ns (snd (f 0)))\n 2. \\<And>n na.\n       \\<lbrakk>infinite (deriv s);\n        f na \\<in> deriv s \\<and>\n        fst (f na) = na \\<and>\n        infinite (deriv (snd (f na))) \\<and>\n        \\<not> is_axiom (s_of_ns (snd (f na)))\\<rbrakk>\n       \\<Longrightarrow> f (Suc na) \\<in> deriv s \\<and>\n                         fst (f (Suc na)) = Suc na \\<and>\n                         infinite (deriv (snd (f (Suc na)))) \\<and>\n                         \\<not> is_axiom (s_of_ns (snd (f (Suc na))))", "apply(simp add: f0)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n na.\n       \\<lbrakk>infinite (deriv s);\n        f na \\<in> deriv s \\<and>\n        fst (f na) = na \\<and>\n        infinite (deriv (snd (f na))) \\<and>\n        \\<not> is_axiom (s_of_ns (snd (f na)))\\<rbrakk>\n       \\<Longrightarrow> f (Suc na) \\<in> deriv s \\<and>\n                         fst (f (Suc na)) = Suc na \\<and>\n                         infinite (deriv (snd (f (Suc na)))) \\<and>\n                         \\<not> is_axiom (s_of_ns (snd (f (Suc na))))", "apply(simp add: fSuc)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in loc1) is_path_f: \"infinite (deriv s) ==> \\<forall>n. f n \\<in> deriv s & fst (f n) = n & (snd (f (Suc n))) : set (subs (snd (f n))) & infinite (deriv (snd (f n)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. infinite (deriv s) \\<Longrightarrow>\n    \\<forall>n.\n       f n \\<in> deriv s \\<and>\n       fst (f n) = n \\<and>\n       snd (f (Suc n)) \\<in> set (subs (snd (f n))) \\<and>\n       infinite (deriv (snd (f n)))", "apply(rule)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       infinite (deriv s) \\<Longrightarrow>\n       f n \\<in> deriv s \\<and>\n       fst (f n) = n \\<and>\n       snd (f (Suc n)) \\<in> set (subs (snd (f n))) \\<and>\n       infinite (deriv (snd (f n)))", "apply(frule_tac is_path_f')"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>infinite (deriv s);\n        \\<forall>n.\n           f n \\<in> deriv s \\<and>\n           fst (f n) = n \\<and>\n           infinite (deriv (snd (f n))) \\<and>\n           \\<not> is_axiom (s_of_ns (snd (f n)))\\<rbrakk>\n       \\<Longrightarrow> f n \\<in> deriv s \\<and>\n                         fst (f n) = n \\<and>\n                         snd (f (Suc n)) \\<in> set (subs (snd (f n))) \\<and>\n                         infinite (deriv (snd (f n)))", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>infinite (deriv s);\n        \\<forall>n.\n           f n \\<in> deriv s \\<and>\n           fst (f n) = n \\<and>\n           infinite (deriv (snd (f n))) \\<and>\n           \\<not> is_axiom (s_of_ns (snd (f n)))\\<rbrakk>\n       \\<Longrightarrow> snd (f (Suc n)) \\<in> set (subs (snd (f n)))", "apply(simp add: fSuc)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsection \"Models\""], ["", "typedecl U"], ["", "type_synonym model = \"U set * (pred => U list => bool)\""], ["", "type_synonym env = \"var => U\""], ["", "primrec FEval :: \"model => env => form => bool\"\nwhere\n  \"FEval MI e (PAtom P vs) = (let IP = (snd MI) P in IP (map e vs))\"\n| \"FEval MI e (NAtom P vs) = (let IP = (snd MI) P in ~ (IP (map e vs)))\"\n| \"FEval MI e (FConj f g) = ((FEval MI e f) & (FEval MI e g))\"\n| \"FEval MI e (FDisj f g) = ((FEval MI e f) | (FEval MI e g))\"\n| \"FEval MI e (FAll f) = (\\<forall>m \\<in> (fst MI). FEval MI (% y. case y of 0 => m | Suc n => e n) f)\" \n| \"FEval MI e (FEx f) = (\\<exists>m \\<in> (fst MI). FEval MI (% y. case y of 0 => m | Suc n => e n) f)\""], ["", "lemma and_lem: \"(a=c) ==> (b=d) ==> (a & b) = (c & d)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a = c; b = d\\<rbrakk>\n    \\<Longrightarrow> (a \\<and> b) = (c \\<and> d)", "by simp"], ["", "lemma or_lem: \"(a=c) ==> (b=d) ==> (a | b) = (c | d)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a = c; b = d\\<rbrakk>\n    \\<Longrightarrow> (a \\<or> b) = (c \\<or> d)", "by simp"], ["", "(*lemma all_eq_all: \"\\<forall>x. P x = Q x ==> (\\<forall>x. P x) = (\\<forall>x. Q x)\" by blast*)"], ["", "lemma ball_eq_ball: \"\\<forall>x \\<in> m. P x = Q x ==> (\\<forall>x \\<in> m. P x) = (\\<forall>x \\<in> m. Q x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>m. P x = Q x \\<Longrightarrow>\n    (\\<forall>x\\<in>m. P x) = (\\<forall>x\\<in>m. Q x)", "by blast"], ["", "lemma bex_eq_bex: \"\\<forall>x \\<in> m. P x = Q x ==> (\\<exists>x \\<in> m. P x) = (\\<exists>x \\<in> m. Q x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>m. P x = Q x \\<Longrightarrow>\n    (\\<exists>x\\<in>m. P x) = (\\<exists>x\\<in>m. Q x)", "by blast"], ["", "lemma preSuc[simp]:\"\\<forall>n. Suc n \\<in> set A = (n \\<in> set (preSuc A))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n. (Suc n \\<in> set A) = (n \\<in> set (preSuc A))", "apply(induct_tac A)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<forall>n. (Suc n \\<in> set []) = (n \\<in> set (preSuc []))\n 2. \\<And>a list.\n       \\<forall>n.\n          (Suc n \\<in> set list) =\n          (n \\<in> set (preSuc list)) \\<Longrightarrow>\n       \\<forall>n.\n          (Suc n \\<in> set (a # list)) = (n \\<in> set (preSuc (a # list)))", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a list.\n       \\<forall>n.\n          (Suc n \\<in> set list) =\n          (n \\<in> set (preSuc list)) \\<Longrightarrow>\n       \\<forall>n.\n          (Suc n \\<in> set (a # list)) = (n \\<in> set (preSuc (a # list)))", "apply(case_tac a, force, force)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma FEval_cong: \"\\<forall>e1 e2. (\\<forall>x. x \\<in> set (fv A) --> e1 x = e2 x) --> FEval MI e1 A = FEval MI e2 A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>e1 e2.\n       (\\<forall>x.\n           x \\<in> set (fv A) \\<longrightarrow>\n           e1 x = e2 x) \\<longrightarrow>\n       FEval MI e1 A = FEval MI e2 A", "proof (induction A)"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>x1 x2.\n       \\<forall>e1 e2.\n          (\\<forall>x.\n              x \\<in> set (fv (PAtom x1 x2)) \\<longrightarrow>\n              e1 x = e2 x) \\<longrightarrow>\n          FEval MI e1 (PAtom x1 x2) = FEval MI e2 (PAtom x1 x2)\n 2. \\<And>x1 x2.\n       \\<forall>e1 e2.\n          (\\<forall>x.\n              x \\<in> set (fv (NAtom x1 x2)) \\<longrightarrow>\n              e1 x = e2 x) \\<longrightarrow>\n          FEval MI e1 (NAtom x1 x2) = FEval MI e2 (NAtom x1 x2)\n 3. \\<And>A1 A2.\n       \\<lbrakk>\\<forall>e1 e2.\n                   (\\<forall>x.\n                       x \\<in> set (fv A1) \\<longrightarrow>\n                       e1 x = e2 x) \\<longrightarrow>\n                   FEval MI e1 A1 = FEval MI e2 A1;\n        \\<forall>e1 e2.\n           (\\<forall>x.\n               x \\<in> set (fv A2) \\<longrightarrow>\n               e1 x = e2 x) \\<longrightarrow>\n           FEval MI e1 A2 = FEval MI e2 A2\\<rbrakk>\n       \\<Longrightarrow> \\<forall>e1 e2.\n                            (\\<forall>x.\n                                x \\<in> set\n   (fv (FConj A1 A2)) \\<longrightarrow>\n                                e1 x = e2 x) \\<longrightarrow>\n                            FEval MI e1 (FConj A1 A2) =\n                            FEval MI e2 (FConj A1 A2)\n 4. \\<And>A1 A2.\n       \\<lbrakk>\\<forall>e1 e2.\n                   (\\<forall>x.\n                       x \\<in> set (fv A1) \\<longrightarrow>\n                       e1 x = e2 x) \\<longrightarrow>\n                   FEval MI e1 A1 = FEval MI e2 A1;\n        \\<forall>e1 e2.\n           (\\<forall>x.\n               x \\<in> set (fv A2) \\<longrightarrow>\n               e1 x = e2 x) \\<longrightarrow>\n           FEval MI e1 A2 = FEval MI e2 A2\\<rbrakk>\n       \\<Longrightarrow> \\<forall>e1 e2.\n                            (\\<forall>x.\n                                x \\<in> set\n   (fv (FDisj A1 A2)) \\<longrightarrow>\n                                e1 x = e2 x) \\<longrightarrow>\n                            FEval MI e1 (FDisj A1 A2) =\n                            FEval MI e2 (FDisj A1 A2)\n 5. \\<And>A.\n       \\<forall>e1 e2.\n          (\\<forall>x.\n              x \\<in> set (fv A) \\<longrightarrow>\n              e1 x = e2 x) \\<longrightarrow>\n          FEval MI e1 A = FEval MI e2 A \\<Longrightarrow>\n       \\<forall>e1 e2.\n          (\\<forall>x.\n              x \\<in> set (fv (FAll A)) \\<longrightarrow>\n              e1 x = e2 x) \\<longrightarrow>\n          FEval MI e1 (FAll A) = FEval MI e2 (FAll A)\n 6. \\<And>A.\n       \\<forall>e1 e2.\n          (\\<forall>x.\n              x \\<in> set (fv A) \\<longrightarrow>\n              e1 x = e2 x) \\<longrightarrow>\n          FEval MI e1 A = FEval MI e2 A \\<Longrightarrow>\n       \\<forall>e1 e2.\n          (\\<forall>x.\n              x \\<in> set (fv (FEx A)) \\<longrightarrow>\n              e1 x = e2 x) \\<longrightarrow>\n          FEval MI e1 (FEx A) = FEval MI e2 (FEx A)", "case (PAtom x1 x2)"], ["proof (state)\nthis:\n  \n\ngoal (6 subgoals):\n 1. \\<And>x1 x2.\n       \\<forall>e1 e2.\n          (\\<forall>x.\n              x \\<in> set (fv (PAtom x1 x2)) \\<longrightarrow>\n              e1 x = e2 x) \\<longrightarrow>\n          FEval MI e1 (PAtom x1 x2) = FEval MI e2 (PAtom x1 x2)\n 2. \\<And>x1 x2.\n       \\<forall>e1 e2.\n          (\\<forall>x.\n              x \\<in> set (fv (NAtom x1 x2)) \\<longrightarrow>\n              e1 x = e2 x) \\<longrightarrow>\n          FEval MI e1 (NAtom x1 x2) = FEval MI e2 (NAtom x1 x2)\n 3. \\<And>A1 A2.\n       \\<lbrakk>\\<forall>e1 e2.\n                   (\\<forall>x.\n                       x \\<in> set (fv A1) \\<longrightarrow>\n                       e1 x = e2 x) \\<longrightarrow>\n                   FEval MI e1 A1 = FEval MI e2 A1;\n        \\<forall>e1 e2.\n           (\\<forall>x.\n               x \\<in> set (fv A2) \\<longrightarrow>\n               e1 x = e2 x) \\<longrightarrow>\n           FEval MI e1 A2 = FEval MI e2 A2\\<rbrakk>\n       \\<Longrightarrow> \\<forall>e1 e2.\n                            (\\<forall>x.\n                                x \\<in> set\n   (fv (FConj A1 A2)) \\<longrightarrow>\n                                e1 x = e2 x) \\<longrightarrow>\n                            FEval MI e1 (FConj A1 A2) =\n                            FEval MI e2 (FConj A1 A2)\n 4. \\<And>A1 A2.\n       \\<lbrakk>\\<forall>e1 e2.\n                   (\\<forall>x.\n                       x \\<in> set (fv A1) \\<longrightarrow>\n                       e1 x = e2 x) \\<longrightarrow>\n                   FEval MI e1 A1 = FEval MI e2 A1;\n        \\<forall>e1 e2.\n           (\\<forall>x.\n               x \\<in> set (fv A2) \\<longrightarrow>\n               e1 x = e2 x) \\<longrightarrow>\n           FEval MI e1 A2 = FEval MI e2 A2\\<rbrakk>\n       \\<Longrightarrow> \\<forall>e1 e2.\n                            (\\<forall>x.\n                                x \\<in> set\n   (fv (FDisj A1 A2)) \\<longrightarrow>\n                                e1 x = e2 x) \\<longrightarrow>\n                            FEval MI e1 (FDisj A1 A2) =\n                            FEval MI e2 (FDisj A1 A2)\n 5. \\<And>A.\n       \\<forall>e1 e2.\n          (\\<forall>x.\n              x \\<in> set (fv A) \\<longrightarrow>\n              e1 x = e2 x) \\<longrightarrow>\n          FEval MI e1 A = FEval MI e2 A \\<Longrightarrow>\n       \\<forall>e1 e2.\n          (\\<forall>x.\n              x \\<in> set (fv (FAll A)) \\<longrightarrow>\n              e1 x = e2 x) \\<longrightarrow>\n          FEval MI e1 (FAll A) = FEval MI e2 (FAll A)\n 6. \\<And>A.\n       \\<forall>e1 e2.\n          (\\<forall>x.\n              x \\<in> set (fv A) \\<longrightarrow>\n              e1 x = e2 x) \\<longrightarrow>\n          FEval MI e1 A = FEval MI e2 A \\<Longrightarrow>\n       \\<forall>e1 e2.\n          (\\<forall>x.\n              x \\<in> set (fv (FEx A)) \\<longrightarrow>\n              e1 x = e2 x) \\<longrightarrow>\n          FEval MI e1 (FEx A) = FEval MI e2 (FEx A)", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>e1 e2.\n       (\\<forall>x.\n           x \\<in> set (fv (PAtom x1 x2)) \\<longrightarrow>\n           e1 x = e2 x) \\<longrightarrow>\n       FEval MI e1 (PAtom x1 x2) = FEval MI e2 (PAtom x1 x2)", "by (metis FEval.simps(1) fv.simps(1) map_cong)"], ["proof (state)\nthis:\n  \\<forall>e1 e2.\n     (\\<forall>x.\n         x \\<in> set (fv (PAtom x1 x2)) \\<longrightarrow>\n         e1 x = e2 x) \\<longrightarrow>\n     FEval MI e1 (PAtom x1 x2) = FEval MI e2 (PAtom x1 x2)\n\ngoal (5 subgoals):\n 1. \\<And>x1 x2.\n       \\<forall>e1 e2.\n          (\\<forall>x.\n              x \\<in> set (fv (NAtom x1 x2)) \\<longrightarrow>\n              e1 x = e2 x) \\<longrightarrow>\n          FEval MI e1 (NAtom x1 x2) = FEval MI e2 (NAtom x1 x2)\n 2. \\<And>A1 A2.\n       \\<lbrakk>\\<forall>e1 e2.\n                   (\\<forall>x.\n                       x \\<in> set (fv A1) \\<longrightarrow>\n                       e1 x = e2 x) \\<longrightarrow>\n                   FEval MI e1 A1 = FEval MI e2 A1;\n        \\<forall>e1 e2.\n           (\\<forall>x.\n               x \\<in> set (fv A2) \\<longrightarrow>\n               e1 x = e2 x) \\<longrightarrow>\n           FEval MI e1 A2 = FEval MI e2 A2\\<rbrakk>\n       \\<Longrightarrow> \\<forall>e1 e2.\n                            (\\<forall>x.\n                                x \\<in> set\n   (fv (FConj A1 A2)) \\<longrightarrow>\n                                e1 x = e2 x) \\<longrightarrow>\n                            FEval MI e1 (FConj A1 A2) =\n                            FEval MI e2 (FConj A1 A2)\n 3. \\<And>A1 A2.\n       \\<lbrakk>\\<forall>e1 e2.\n                   (\\<forall>x.\n                       x \\<in> set (fv A1) \\<longrightarrow>\n                       e1 x = e2 x) \\<longrightarrow>\n                   FEval MI e1 A1 = FEval MI e2 A1;\n        \\<forall>e1 e2.\n           (\\<forall>x.\n               x \\<in> set (fv A2) \\<longrightarrow>\n               e1 x = e2 x) \\<longrightarrow>\n           FEval MI e1 A2 = FEval MI e2 A2\\<rbrakk>\n       \\<Longrightarrow> \\<forall>e1 e2.\n                            (\\<forall>x.\n                                x \\<in> set\n   (fv (FDisj A1 A2)) \\<longrightarrow>\n                                e1 x = e2 x) \\<longrightarrow>\n                            FEval MI e1 (FDisj A1 A2) =\n                            FEval MI e2 (FDisj A1 A2)\n 4. \\<And>A.\n       \\<forall>e1 e2.\n          (\\<forall>x.\n              x \\<in> set (fv A) \\<longrightarrow>\n              e1 x = e2 x) \\<longrightarrow>\n          FEval MI e1 A = FEval MI e2 A \\<Longrightarrow>\n       \\<forall>e1 e2.\n          (\\<forall>x.\n              x \\<in> set (fv (FAll A)) \\<longrightarrow>\n              e1 x = e2 x) \\<longrightarrow>\n          FEval MI e1 (FAll A) = FEval MI e2 (FAll A)\n 5. \\<And>A.\n       \\<forall>e1 e2.\n          (\\<forall>x.\n              x \\<in> set (fv A) \\<longrightarrow>\n              e1 x = e2 x) \\<longrightarrow>\n          FEval MI e1 A = FEval MI e2 A \\<Longrightarrow>\n       \\<forall>e1 e2.\n          (\\<forall>x.\n              x \\<in> set (fv (FEx A)) \\<longrightarrow>\n              e1 x = e2 x) \\<longrightarrow>\n          FEval MI e1 (FEx A) = FEval MI e2 (FEx A)", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>x1 x2.\n       \\<forall>e1 e2.\n          (\\<forall>x.\n              x \\<in> set (fv (NAtom x1 x2)) \\<longrightarrow>\n              e1 x = e2 x) \\<longrightarrow>\n          FEval MI e1 (NAtom x1 x2) = FEval MI e2 (NAtom x1 x2)\n 2. \\<And>A1 A2.\n       \\<lbrakk>\\<forall>e1 e2.\n                   (\\<forall>x.\n                       x \\<in> set (fv A1) \\<longrightarrow>\n                       e1 x = e2 x) \\<longrightarrow>\n                   FEval MI e1 A1 = FEval MI e2 A1;\n        \\<forall>e1 e2.\n           (\\<forall>x.\n               x \\<in> set (fv A2) \\<longrightarrow>\n               e1 x = e2 x) \\<longrightarrow>\n           FEval MI e1 A2 = FEval MI e2 A2\\<rbrakk>\n       \\<Longrightarrow> \\<forall>e1 e2.\n                            (\\<forall>x.\n                                x \\<in> set\n   (fv (FConj A1 A2)) \\<longrightarrow>\n                                e1 x = e2 x) \\<longrightarrow>\n                            FEval MI e1 (FConj A1 A2) =\n                            FEval MI e2 (FConj A1 A2)\n 3. \\<And>A1 A2.\n       \\<lbrakk>\\<forall>e1 e2.\n                   (\\<forall>x.\n                       x \\<in> set (fv A1) \\<longrightarrow>\n                       e1 x = e2 x) \\<longrightarrow>\n                   FEval MI e1 A1 = FEval MI e2 A1;\n        \\<forall>e1 e2.\n           (\\<forall>x.\n               x \\<in> set (fv A2) \\<longrightarrow>\n               e1 x = e2 x) \\<longrightarrow>\n           FEval MI e1 A2 = FEval MI e2 A2\\<rbrakk>\n       \\<Longrightarrow> \\<forall>e1 e2.\n                            (\\<forall>x.\n                                x \\<in> set\n   (fv (FDisj A1 A2)) \\<longrightarrow>\n                                e1 x = e2 x) \\<longrightarrow>\n                            FEval MI e1 (FDisj A1 A2) =\n                            FEval MI e2 (FDisj A1 A2)\n 4. \\<And>A.\n       \\<forall>e1 e2.\n          (\\<forall>x.\n              x \\<in> set (fv A) \\<longrightarrow>\n              e1 x = e2 x) \\<longrightarrow>\n          FEval MI e1 A = FEval MI e2 A \\<Longrightarrow>\n       \\<forall>e1 e2.\n          (\\<forall>x.\n              x \\<in> set (fv (FAll A)) \\<longrightarrow>\n              e1 x = e2 x) \\<longrightarrow>\n          FEval MI e1 (FAll A) = FEval MI e2 (FAll A)\n 5. \\<And>A.\n       \\<forall>e1 e2.\n          (\\<forall>x.\n              x \\<in> set (fv A) \\<longrightarrow>\n              e1 x = e2 x) \\<longrightarrow>\n          FEval MI e1 A = FEval MI e2 A \\<Longrightarrow>\n       \\<forall>e1 e2.\n          (\\<forall>x.\n              x \\<in> set (fv (FEx A)) \\<longrightarrow>\n              e1 x = e2 x) \\<longrightarrow>\n          FEval MI e1 (FEx A) = FEval MI e2 (FEx A)", "case (NAtom x1 x2)"], ["proof (state)\nthis:\n  \n\ngoal (5 subgoals):\n 1. \\<And>x1 x2.\n       \\<forall>e1 e2.\n          (\\<forall>x.\n              x \\<in> set (fv (NAtom x1 x2)) \\<longrightarrow>\n              e1 x = e2 x) \\<longrightarrow>\n          FEval MI e1 (NAtom x1 x2) = FEval MI e2 (NAtom x1 x2)\n 2. \\<And>A1 A2.\n       \\<lbrakk>\\<forall>e1 e2.\n                   (\\<forall>x.\n                       x \\<in> set (fv A1) \\<longrightarrow>\n                       e1 x = e2 x) \\<longrightarrow>\n                   FEval MI e1 A1 = FEval MI e2 A1;\n        \\<forall>e1 e2.\n           (\\<forall>x.\n               x \\<in> set (fv A2) \\<longrightarrow>\n               e1 x = e2 x) \\<longrightarrow>\n           FEval MI e1 A2 = FEval MI e2 A2\\<rbrakk>\n       \\<Longrightarrow> \\<forall>e1 e2.\n                            (\\<forall>x.\n                                x \\<in> set\n   (fv (FConj A1 A2)) \\<longrightarrow>\n                                e1 x = e2 x) \\<longrightarrow>\n                            FEval MI e1 (FConj A1 A2) =\n                            FEval MI e2 (FConj A1 A2)\n 3. \\<And>A1 A2.\n       \\<lbrakk>\\<forall>e1 e2.\n                   (\\<forall>x.\n                       x \\<in> set (fv A1) \\<longrightarrow>\n                       e1 x = e2 x) \\<longrightarrow>\n                   FEval MI e1 A1 = FEval MI e2 A1;\n        \\<forall>e1 e2.\n           (\\<forall>x.\n               x \\<in> set (fv A2) \\<longrightarrow>\n               e1 x = e2 x) \\<longrightarrow>\n           FEval MI e1 A2 = FEval MI e2 A2\\<rbrakk>\n       \\<Longrightarrow> \\<forall>e1 e2.\n                            (\\<forall>x.\n                                x \\<in> set\n   (fv (FDisj A1 A2)) \\<longrightarrow>\n                                e1 x = e2 x) \\<longrightarrow>\n                            FEval MI e1 (FDisj A1 A2) =\n                            FEval MI e2 (FDisj A1 A2)\n 4. \\<And>A.\n       \\<forall>e1 e2.\n          (\\<forall>x.\n              x \\<in> set (fv A) \\<longrightarrow>\n              e1 x = e2 x) \\<longrightarrow>\n          FEval MI e1 A = FEval MI e2 A \\<Longrightarrow>\n       \\<forall>e1 e2.\n          (\\<forall>x.\n              x \\<in> set (fv (FAll A)) \\<longrightarrow>\n              e1 x = e2 x) \\<longrightarrow>\n          FEval MI e1 (FAll A) = FEval MI e2 (FAll A)\n 5. \\<And>A.\n       \\<forall>e1 e2.\n          (\\<forall>x.\n              x \\<in> set (fv A) \\<longrightarrow>\n              e1 x = e2 x) \\<longrightarrow>\n          FEval MI e1 A = FEval MI e2 A \\<Longrightarrow>\n       \\<forall>e1 e2.\n          (\\<forall>x.\n              x \\<in> set (fv (FEx A)) \\<longrightarrow>\n              e1 x = e2 x) \\<longrightarrow>\n          FEval MI e1 (FEx A) = FEval MI e2 (FEx A)", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>e1 e2.\n       (\\<forall>x.\n           x \\<in> set (fv (NAtom x1 x2)) \\<longrightarrow>\n           e1 x = e2 x) \\<longrightarrow>\n       FEval MI e1 (NAtom x1 x2) = FEval MI e2 (NAtom x1 x2)", "by simp (metis list.map_cong0)"], ["proof (state)\nthis:\n  \\<forall>e1 e2.\n     (\\<forall>x.\n         x \\<in> set (fv (NAtom x1 x2)) \\<longrightarrow>\n         e1 x = e2 x) \\<longrightarrow>\n     FEval MI e1 (NAtom x1 x2) = FEval MI e2 (NAtom x1 x2)\n\ngoal (4 subgoals):\n 1. \\<And>A1 A2.\n       \\<lbrakk>\\<forall>e1 e2.\n                   (\\<forall>x.\n                       x \\<in> set (fv A1) \\<longrightarrow>\n                       e1 x = e2 x) \\<longrightarrow>\n                   FEval MI e1 A1 = FEval MI e2 A1;\n        \\<forall>e1 e2.\n           (\\<forall>x.\n               x \\<in> set (fv A2) \\<longrightarrow>\n               e1 x = e2 x) \\<longrightarrow>\n           FEval MI e1 A2 = FEval MI e2 A2\\<rbrakk>\n       \\<Longrightarrow> \\<forall>e1 e2.\n                            (\\<forall>x.\n                                x \\<in> set\n   (fv (FConj A1 A2)) \\<longrightarrow>\n                                e1 x = e2 x) \\<longrightarrow>\n                            FEval MI e1 (FConj A1 A2) =\n                            FEval MI e2 (FConj A1 A2)\n 2. \\<And>A1 A2.\n       \\<lbrakk>\\<forall>e1 e2.\n                   (\\<forall>x.\n                       x \\<in> set (fv A1) \\<longrightarrow>\n                       e1 x = e2 x) \\<longrightarrow>\n                   FEval MI e1 A1 = FEval MI e2 A1;\n        \\<forall>e1 e2.\n           (\\<forall>x.\n               x \\<in> set (fv A2) \\<longrightarrow>\n               e1 x = e2 x) \\<longrightarrow>\n           FEval MI e1 A2 = FEval MI e2 A2\\<rbrakk>\n       \\<Longrightarrow> \\<forall>e1 e2.\n                            (\\<forall>x.\n                                x \\<in> set\n   (fv (FDisj A1 A2)) \\<longrightarrow>\n                                e1 x = e2 x) \\<longrightarrow>\n                            FEval MI e1 (FDisj A1 A2) =\n                            FEval MI e2 (FDisj A1 A2)\n 3. \\<And>A.\n       \\<forall>e1 e2.\n          (\\<forall>x.\n              x \\<in> set (fv A) \\<longrightarrow>\n              e1 x = e2 x) \\<longrightarrow>\n          FEval MI e1 A = FEval MI e2 A \\<Longrightarrow>\n       \\<forall>e1 e2.\n          (\\<forall>x.\n              x \\<in> set (fv (FAll A)) \\<longrightarrow>\n              e1 x = e2 x) \\<longrightarrow>\n          FEval MI e1 (FAll A) = FEval MI e2 (FAll A)\n 4. \\<And>A.\n       \\<forall>e1 e2.\n          (\\<forall>x.\n              x \\<in> set (fv A) \\<longrightarrow>\n              e1 x = e2 x) \\<longrightarrow>\n          FEval MI e1 A = FEval MI e2 A \\<Longrightarrow>\n       \\<forall>e1 e2.\n          (\\<forall>x.\n              x \\<in> set (fv (FEx A)) \\<longrightarrow>\n              e1 x = e2 x) \\<longrightarrow>\n          FEval MI e1 (FEx A) = FEval MI e2 (FEx A)", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>A1 A2.\n       \\<lbrakk>\\<forall>e1 e2.\n                   (\\<forall>x.\n                       x \\<in> set (fv A1) \\<longrightarrow>\n                       e1 x = e2 x) \\<longrightarrow>\n                   FEval MI e1 A1 = FEval MI e2 A1;\n        \\<forall>e1 e2.\n           (\\<forall>x.\n               x \\<in> set (fv A2) \\<longrightarrow>\n               e1 x = e2 x) \\<longrightarrow>\n           FEval MI e1 A2 = FEval MI e2 A2\\<rbrakk>\n       \\<Longrightarrow> \\<forall>e1 e2.\n                            (\\<forall>x.\n                                x \\<in> set\n   (fv (FConj A1 A2)) \\<longrightarrow>\n                                e1 x = e2 x) \\<longrightarrow>\n                            FEval MI e1 (FConj A1 A2) =\n                            FEval MI e2 (FConj A1 A2)\n 2. \\<And>A1 A2.\n       \\<lbrakk>\\<forall>e1 e2.\n                   (\\<forall>x.\n                       x \\<in> set (fv A1) \\<longrightarrow>\n                       e1 x = e2 x) \\<longrightarrow>\n                   FEval MI e1 A1 = FEval MI e2 A1;\n        \\<forall>e1 e2.\n           (\\<forall>x.\n               x \\<in> set (fv A2) \\<longrightarrow>\n               e1 x = e2 x) \\<longrightarrow>\n           FEval MI e1 A2 = FEval MI e2 A2\\<rbrakk>\n       \\<Longrightarrow> \\<forall>e1 e2.\n                            (\\<forall>x.\n                                x \\<in> set\n   (fv (FDisj A1 A2)) \\<longrightarrow>\n                                e1 x = e2 x) \\<longrightarrow>\n                            FEval MI e1 (FDisj A1 A2) =\n                            FEval MI e2 (FDisj A1 A2)\n 3. \\<And>A.\n       \\<forall>e1 e2.\n          (\\<forall>x.\n              x \\<in> set (fv A) \\<longrightarrow>\n              e1 x = e2 x) \\<longrightarrow>\n          FEval MI e1 A = FEval MI e2 A \\<Longrightarrow>\n       \\<forall>e1 e2.\n          (\\<forall>x.\n              x \\<in> set (fv (FAll A)) \\<longrightarrow>\n              e1 x = e2 x) \\<longrightarrow>\n          FEval MI e1 (FAll A) = FEval MI e2 (FAll A)\n 4. \\<And>A.\n       \\<forall>e1 e2.\n          (\\<forall>x.\n              x \\<in> set (fv A) \\<longrightarrow>\n              e1 x = e2 x) \\<longrightarrow>\n          FEval MI e1 A = FEval MI e2 A \\<Longrightarrow>\n       \\<forall>e1 e2.\n          (\\<forall>x.\n              x \\<in> set (fv (FEx A)) \\<longrightarrow>\n              e1 x = e2 x) \\<longrightarrow>\n          FEval MI e1 (FEx A) = FEval MI e2 (FEx A)", "case (FConj A1 A2)"], ["proof (state)\nthis:\n  \\<forall>e1 e2.\n     (\\<forall>x.\n         x \\<in> set (fv A1) \\<longrightarrow>\n         e1 x = e2 x) \\<longrightarrow>\n     FEval MI e1 A1 = FEval MI e2 A1\n  \\<forall>e1 e2.\n     (\\<forall>x.\n         x \\<in> set (fv A2) \\<longrightarrow>\n         e1 x = e2 x) \\<longrightarrow>\n     FEval MI e1 A2 = FEval MI e2 A2\n\ngoal (4 subgoals):\n 1. \\<And>A1 A2.\n       \\<lbrakk>\\<forall>e1 e2.\n                   (\\<forall>x.\n                       x \\<in> set (fv A1) \\<longrightarrow>\n                       e1 x = e2 x) \\<longrightarrow>\n                   FEval MI e1 A1 = FEval MI e2 A1;\n        \\<forall>e1 e2.\n           (\\<forall>x.\n               x \\<in> set (fv A2) \\<longrightarrow>\n               e1 x = e2 x) \\<longrightarrow>\n           FEval MI e1 A2 = FEval MI e2 A2\\<rbrakk>\n       \\<Longrightarrow> \\<forall>e1 e2.\n                            (\\<forall>x.\n                                x \\<in> set\n   (fv (FConj A1 A2)) \\<longrightarrow>\n                                e1 x = e2 x) \\<longrightarrow>\n                            FEval MI e1 (FConj A1 A2) =\n                            FEval MI e2 (FConj A1 A2)\n 2. \\<And>A1 A2.\n       \\<lbrakk>\\<forall>e1 e2.\n                   (\\<forall>x.\n                       x \\<in> set (fv A1) \\<longrightarrow>\n                       e1 x = e2 x) \\<longrightarrow>\n                   FEval MI e1 A1 = FEval MI e2 A1;\n        \\<forall>e1 e2.\n           (\\<forall>x.\n               x \\<in> set (fv A2) \\<longrightarrow>\n               e1 x = e2 x) \\<longrightarrow>\n           FEval MI e1 A2 = FEval MI e2 A2\\<rbrakk>\n       \\<Longrightarrow> \\<forall>e1 e2.\n                            (\\<forall>x.\n                                x \\<in> set\n   (fv (FDisj A1 A2)) \\<longrightarrow>\n                                e1 x = e2 x) \\<longrightarrow>\n                            FEval MI e1 (FDisj A1 A2) =\n                            FEval MI e2 (FDisj A1 A2)\n 3. \\<And>A.\n       \\<forall>e1 e2.\n          (\\<forall>x.\n              x \\<in> set (fv A) \\<longrightarrow>\n              e1 x = e2 x) \\<longrightarrow>\n          FEval MI e1 A = FEval MI e2 A \\<Longrightarrow>\n       \\<forall>e1 e2.\n          (\\<forall>x.\n              x \\<in> set (fv (FAll A)) \\<longrightarrow>\n              e1 x = e2 x) \\<longrightarrow>\n          FEval MI e1 (FAll A) = FEval MI e2 (FAll A)\n 4. \\<And>A.\n       \\<forall>e1 e2.\n          (\\<forall>x.\n              x \\<in> set (fv A) \\<longrightarrow>\n              e1 x = e2 x) \\<longrightarrow>\n          FEval MI e1 A = FEval MI e2 A \\<Longrightarrow>\n       \\<forall>e1 e2.\n          (\\<forall>x.\n              x \\<in> set (fv (FEx A)) \\<longrightarrow>\n              e1 x = e2 x) \\<longrightarrow>\n          FEval MI e1 (FEx A) = FEval MI e2 (FEx A)", "then"], ["proof (chain)\npicking this:\n  \\<forall>e1 e2.\n     (\\<forall>x.\n         x \\<in> set (fv A1) \\<longrightarrow>\n         e1 x = e2 x) \\<longrightarrow>\n     FEval MI e1 A1 = FEval MI e2 A1\n  \\<forall>e1 e2.\n     (\\<forall>x.\n         x \\<in> set (fv A2) \\<longrightarrow>\n         e1 x = e2 x) \\<longrightarrow>\n     FEval MI e1 A2 = FEval MI e2 A2", "show ?case"], ["proof (prove)\nusing this:\n  \\<forall>e1 e2.\n     (\\<forall>x.\n         x \\<in> set (fv A1) \\<longrightarrow>\n         e1 x = e2 x) \\<longrightarrow>\n     FEval MI e1 A1 = FEval MI e2 A1\n  \\<forall>e1 e2.\n     (\\<forall>x.\n         x \\<in> set (fv A2) \\<longrightarrow>\n         e1 x = e2 x) \\<longrightarrow>\n     FEval MI e1 A2 = FEval MI e2 A2\n\ngoal (1 subgoal):\n 1. \\<forall>e1 e2.\n       (\\<forall>x.\n           x \\<in> set (fv (FConj A1 A2)) \\<longrightarrow>\n           e1 x = e2 x) \\<longrightarrow>\n       FEval MI e1 (FConj A1 A2) = FEval MI e2 (FConj A1 A2)", "by simp blast"], ["proof (state)\nthis:\n  \\<forall>e1 e2.\n     (\\<forall>x.\n         x \\<in> set (fv (FConj A1 A2)) \\<longrightarrow>\n         e1 x = e2 x) \\<longrightarrow>\n     FEval MI e1 (FConj A1 A2) = FEval MI e2 (FConj A1 A2)\n\ngoal (3 subgoals):\n 1. \\<And>A1 A2.\n       \\<lbrakk>\\<forall>e1 e2.\n                   (\\<forall>x.\n                       x \\<in> set (fv A1) \\<longrightarrow>\n                       e1 x = e2 x) \\<longrightarrow>\n                   FEval MI e1 A1 = FEval MI e2 A1;\n        \\<forall>e1 e2.\n           (\\<forall>x.\n               x \\<in> set (fv A2) \\<longrightarrow>\n               e1 x = e2 x) \\<longrightarrow>\n           FEval MI e1 A2 = FEval MI e2 A2\\<rbrakk>\n       \\<Longrightarrow> \\<forall>e1 e2.\n                            (\\<forall>x.\n                                x \\<in> set\n   (fv (FDisj A1 A2)) \\<longrightarrow>\n                                e1 x = e2 x) \\<longrightarrow>\n                            FEval MI e1 (FDisj A1 A2) =\n                            FEval MI e2 (FDisj A1 A2)\n 2. \\<And>A.\n       \\<forall>e1 e2.\n          (\\<forall>x.\n              x \\<in> set (fv A) \\<longrightarrow>\n              e1 x = e2 x) \\<longrightarrow>\n          FEval MI e1 A = FEval MI e2 A \\<Longrightarrow>\n       \\<forall>e1 e2.\n          (\\<forall>x.\n              x \\<in> set (fv (FAll A)) \\<longrightarrow>\n              e1 x = e2 x) \\<longrightarrow>\n          FEval MI e1 (FAll A) = FEval MI e2 (FAll A)\n 3. \\<And>A.\n       \\<forall>e1 e2.\n          (\\<forall>x.\n              x \\<in> set (fv A) \\<longrightarrow>\n              e1 x = e2 x) \\<longrightarrow>\n          FEval MI e1 A = FEval MI e2 A \\<Longrightarrow>\n       \\<forall>e1 e2.\n          (\\<forall>x.\n              x \\<in> set (fv (FEx A)) \\<longrightarrow>\n              e1 x = e2 x) \\<longrightarrow>\n          FEval MI e1 (FEx A) = FEval MI e2 (FEx A)", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>A1 A2.\n       \\<lbrakk>\\<forall>e1 e2.\n                   (\\<forall>x.\n                       x \\<in> set (fv A1) \\<longrightarrow>\n                       e1 x = e2 x) \\<longrightarrow>\n                   FEval MI e1 A1 = FEval MI e2 A1;\n        \\<forall>e1 e2.\n           (\\<forall>x.\n               x \\<in> set (fv A2) \\<longrightarrow>\n               e1 x = e2 x) \\<longrightarrow>\n           FEval MI e1 A2 = FEval MI e2 A2\\<rbrakk>\n       \\<Longrightarrow> \\<forall>e1 e2.\n                            (\\<forall>x.\n                                x \\<in> set\n   (fv (FDisj A1 A2)) \\<longrightarrow>\n                                e1 x = e2 x) \\<longrightarrow>\n                            FEval MI e1 (FDisj A1 A2) =\n                            FEval MI e2 (FDisj A1 A2)\n 2. \\<And>A.\n       \\<forall>e1 e2.\n          (\\<forall>x.\n              x \\<in> set (fv A) \\<longrightarrow>\n              e1 x = e2 x) \\<longrightarrow>\n          FEval MI e1 A = FEval MI e2 A \\<Longrightarrow>\n       \\<forall>e1 e2.\n          (\\<forall>x.\n              x \\<in> set (fv (FAll A)) \\<longrightarrow>\n              e1 x = e2 x) \\<longrightarrow>\n          FEval MI e1 (FAll A) = FEval MI e2 (FAll A)\n 3. \\<And>A.\n       \\<forall>e1 e2.\n          (\\<forall>x.\n              x \\<in> set (fv A) \\<longrightarrow>\n              e1 x = e2 x) \\<longrightarrow>\n          FEval MI e1 A = FEval MI e2 A \\<Longrightarrow>\n       \\<forall>e1 e2.\n          (\\<forall>x.\n              x \\<in> set (fv (FEx A)) \\<longrightarrow>\n              e1 x = e2 x) \\<longrightarrow>\n          FEval MI e1 (FEx A) = FEval MI e2 (FEx A)", "case (FDisj A1 A2)"], ["proof (state)\nthis:\n  \\<forall>e1 e2.\n     (\\<forall>x.\n         x \\<in> set (fv A1) \\<longrightarrow>\n         e1 x = e2 x) \\<longrightarrow>\n     FEval MI e1 A1 = FEval MI e2 A1\n  \\<forall>e1 e2.\n     (\\<forall>x.\n         x \\<in> set (fv A2) \\<longrightarrow>\n         e1 x = e2 x) \\<longrightarrow>\n     FEval MI e1 A2 = FEval MI e2 A2\n\ngoal (3 subgoals):\n 1. \\<And>A1 A2.\n       \\<lbrakk>\\<forall>e1 e2.\n                   (\\<forall>x.\n                       x \\<in> set (fv A1) \\<longrightarrow>\n                       e1 x = e2 x) \\<longrightarrow>\n                   FEval MI e1 A1 = FEval MI e2 A1;\n        \\<forall>e1 e2.\n           (\\<forall>x.\n               x \\<in> set (fv A2) \\<longrightarrow>\n               e1 x = e2 x) \\<longrightarrow>\n           FEval MI e1 A2 = FEval MI e2 A2\\<rbrakk>\n       \\<Longrightarrow> \\<forall>e1 e2.\n                            (\\<forall>x.\n                                x \\<in> set\n   (fv (FDisj A1 A2)) \\<longrightarrow>\n                                e1 x = e2 x) \\<longrightarrow>\n                            FEval MI e1 (FDisj A1 A2) =\n                            FEval MI e2 (FDisj A1 A2)\n 2. \\<And>A.\n       \\<forall>e1 e2.\n          (\\<forall>x.\n              x \\<in> set (fv A) \\<longrightarrow>\n              e1 x = e2 x) \\<longrightarrow>\n          FEval MI e1 A = FEval MI e2 A \\<Longrightarrow>\n       \\<forall>e1 e2.\n          (\\<forall>x.\n              x \\<in> set (fv (FAll A)) \\<longrightarrow>\n              e1 x = e2 x) \\<longrightarrow>\n          FEval MI e1 (FAll A) = FEval MI e2 (FAll A)\n 3. \\<And>A.\n       \\<forall>e1 e2.\n          (\\<forall>x.\n              x \\<in> set (fv A) \\<longrightarrow>\n              e1 x = e2 x) \\<longrightarrow>\n          FEval MI e1 A = FEval MI e2 A \\<Longrightarrow>\n       \\<forall>e1 e2.\n          (\\<forall>x.\n              x \\<in> set (fv (FEx A)) \\<longrightarrow>\n              e1 x = e2 x) \\<longrightarrow>\n          FEval MI e1 (FEx A) = FEval MI e2 (FEx A)", "then"], ["proof (chain)\npicking this:\n  \\<forall>e1 e2.\n     (\\<forall>x.\n         x \\<in> set (fv A1) \\<longrightarrow>\n         e1 x = e2 x) \\<longrightarrow>\n     FEval MI e1 A1 = FEval MI e2 A1\n  \\<forall>e1 e2.\n     (\\<forall>x.\n         x \\<in> set (fv A2) \\<longrightarrow>\n         e1 x = e2 x) \\<longrightarrow>\n     FEval MI e1 A2 = FEval MI e2 A2", "show ?case"], ["proof (prove)\nusing this:\n  \\<forall>e1 e2.\n     (\\<forall>x.\n         x \\<in> set (fv A1) \\<longrightarrow>\n         e1 x = e2 x) \\<longrightarrow>\n     FEval MI e1 A1 = FEval MI e2 A1\n  \\<forall>e1 e2.\n     (\\<forall>x.\n         x \\<in> set (fv A2) \\<longrightarrow>\n         e1 x = e2 x) \\<longrightarrow>\n     FEval MI e1 A2 = FEval MI e2 A2\n\ngoal (1 subgoal):\n 1. \\<forall>e1 e2.\n       (\\<forall>x.\n           x \\<in> set (fv (FDisj A1 A2)) \\<longrightarrow>\n           e1 x = e2 x) \\<longrightarrow>\n       FEval MI e1 (FDisj A1 A2) = FEval MI e2 (FDisj A1 A2)", "by simp blast"], ["proof (state)\nthis:\n  \\<forall>e1 e2.\n     (\\<forall>x.\n         x \\<in> set (fv (FDisj A1 A2)) \\<longrightarrow>\n         e1 x = e2 x) \\<longrightarrow>\n     FEval MI e1 (FDisj A1 A2) = FEval MI e2 (FDisj A1 A2)\n\ngoal (2 subgoals):\n 1. \\<And>A.\n       \\<forall>e1 e2.\n          (\\<forall>x.\n              x \\<in> set (fv A) \\<longrightarrow>\n              e1 x = e2 x) \\<longrightarrow>\n          FEval MI e1 A = FEval MI e2 A \\<Longrightarrow>\n       \\<forall>e1 e2.\n          (\\<forall>x.\n              x \\<in> set (fv (FAll A)) \\<longrightarrow>\n              e1 x = e2 x) \\<longrightarrow>\n          FEval MI e1 (FAll A) = FEval MI e2 (FAll A)\n 2. \\<And>A.\n       \\<forall>e1 e2.\n          (\\<forall>x.\n              x \\<in> set (fv A) \\<longrightarrow>\n              e1 x = e2 x) \\<longrightarrow>\n          FEval MI e1 A = FEval MI e2 A \\<Longrightarrow>\n       \\<forall>e1 e2.\n          (\\<forall>x.\n              x \\<in> set (fv (FEx A)) \\<longrightarrow>\n              e1 x = e2 x) \\<longrightarrow>\n          FEval MI e1 (FEx A) = FEval MI e2 (FEx A)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>A.\n       \\<forall>e1 e2.\n          (\\<forall>x.\n              x \\<in> set (fv A) \\<longrightarrow>\n              e1 x = e2 x) \\<longrightarrow>\n          FEval MI e1 A = FEval MI e2 A \\<Longrightarrow>\n       \\<forall>e1 e2.\n          (\\<forall>x.\n              x \\<in> set (fv (FAll A)) \\<longrightarrow>\n              e1 x = e2 x) \\<longrightarrow>\n          FEval MI e1 (FAll A) = FEval MI e2 (FAll A)\n 2. \\<And>A.\n       \\<forall>e1 e2.\n          (\\<forall>x.\n              x \\<in> set (fv A) \\<longrightarrow>\n              e1 x = e2 x) \\<longrightarrow>\n          FEval MI e1 A = FEval MI e2 A \\<Longrightarrow>\n       \\<forall>e1 e2.\n          (\\<forall>x.\n              x \\<in> set (fv (FEx A)) \\<longrightarrow>\n              e1 x = e2 x) \\<longrightarrow>\n          FEval MI e1 (FEx A) = FEval MI e2 (FEx A)", "case (FAll A)"], ["proof (state)\nthis:\n  \\<forall>e1 e2.\n     (\\<forall>x.\n         x \\<in> set (fv A) \\<longrightarrow> e1 x = e2 x) \\<longrightarrow>\n     FEval MI e1 A = FEval MI e2 A\n\ngoal (2 subgoals):\n 1. \\<And>A.\n       \\<forall>e1 e2.\n          (\\<forall>x.\n              x \\<in> set (fv A) \\<longrightarrow>\n              e1 x = e2 x) \\<longrightarrow>\n          FEval MI e1 A = FEval MI e2 A \\<Longrightarrow>\n       \\<forall>e1 e2.\n          (\\<forall>x.\n              x \\<in> set (fv (FAll A)) \\<longrightarrow>\n              e1 x = e2 x) \\<longrightarrow>\n          FEval MI e1 (FAll A) = FEval MI e2 (FAll A)\n 2. \\<And>A.\n       \\<forall>e1 e2.\n          (\\<forall>x.\n              x \\<in> set (fv A) \\<longrightarrow>\n              e1 x = e2 x) \\<longrightarrow>\n          FEval MI e1 A = FEval MI e2 A \\<Longrightarrow>\n       \\<forall>e1 e2.\n          (\\<forall>x.\n              x \\<in> set (fv (FEx A)) \\<longrightarrow>\n              e1 x = e2 x) \\<longrightarrow>\n          FEval MI e1 (FEx A) = FEval MI e2 (FEx A)", "then"], ["proof (chain)\npicking this:\n  \\<forall>e1 e2.\n     (\\<forall>x.\n         x \\<in> set (fv A) \\<longrightarrow> e1 x = e2 x) \\<longrightarrow>\n     FEval MI e1 A = FEval MI e2 A", "show ?case"], ["proof (prove)\nusing this:\n  \\<forall>e1 e2.\n     (\\<forall>x.\n         x \\<in> set (fv A) \\<longrightarrow> e1 x = e2 x) \\<longrightarrow>\n     FEval MI e1 A = FEval MI e2 A\n\ngoal (1 subgoal):\n 1. \\<forall>e1 e2.\n       (\\<forall>x.\n           x \\<in> set (fv (FAll A)) \\<longrightarrow>\n           e1 x = e2 x) \\<longrightarrow>\n       FEval MI e1 (FAll A) = FEval MI e2 (FAll A)", "by (metis (no_types, lifting) FEval.simps(5) Nitpick.case_nat_unfold One_nat_def Suc_pred fv.simps(5) gr0I preSuc)"], ["proof (state)\nthis:\n  \\<forall>e1 e2.\n     (\\<forall>x.\n         x \\<in> set (fv (FAll A)) \\<longrightarrow>\n         e1 x = e2 x) \\<longrightarrow>\n     FEval MI e1 (FAll A) = FEval MI e2 (FAll A)\n\ngoal (1 subgoal):\n 1. \\<And>A.\n       \\<forall>e1 e2.\n          (\\<forall>x.\n              x \\<in> set (fv A) \\<longrightarrow>\n              e1 x = e2 x) \\<longrightarrow>\n          FEval MI e1 A = FEval MI e2 A \\<Longrightarrow>\n       \\<forall>e1 e2.\n          (\\<forall>x.\n              x \\<in> set (fv (FEx A)) \\<longrightarrow>\n              e1 x = e2 x) \\<longrightarrow>\n          FEval MI e1 (FEx A) = FEval MI e2 (FEx A)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>A.\n       \\<forall>e1 e2.\n          (\\<forall>x.\n              x \\<in> set (fv A) \\<longrightarrow>\n              e1 x = e2 x) \\<longrightarrow>\n          FEval MI e1 A = FEval MI e2 A \\<Longrightarrow>\n       \\<forall>e1 e2.\n          (\\<forall>x.\n              x \\<in> set (fv (FEx A)) \\<longrightarrow>\n              e1 x = e2 x) \\<longrightarrow>\n          FEval MI e1 (FEx A) = FEval MI e2 (FEx A)", "case (FEx A)"], ["proof (state)\nthis:\n  \\<forall>e1 e2.\n     (\\<forall>x.\n         x \\<in> set (fv A) \\<longrightarrow> e1 x = e2 x) \\<longrightarrow>\n     FEval MI e1 A = FEval MI e2 A\n\ngoal (1 subgoal):\n 1. \\<And>A.\n       \\<forall>e1 e2.\n          (\\<forall>x.\n              x \\<in> set (fv A) \\<longrightarrow>\n              e1 x = e2 x) \\<longrightarrow>\n          FEval MI e1 A = FEval MI e2 A \\<Longrightarrow>\n       \\<forall>e1 e2.\n          (\\<forall>x.\n              x \\<in> set (fv (FEx A)) \\<longrightarrow>\n              e1 x = e2 x) \\<longrightarrow>\n          FEval MI e1 (FEx A) = FEval MI e2 (FEx A)", "then"], ["proof (chain)\npicking this:\n  \\<forall>e1 e2.\n     (\\<forall>x.\n         x \\<in> set (fv A) \\<longrightarrow> e1 x = e2 x) \\<longrightarrow>\n     FEval MI e1 A = FEval MI e2 A", "show ?case"], ["proof (prove)\nusing this:\n  \\<forall>e1 e2.\n     (\\<forall>x.\n         x \\<in> set (fv A) \\<longrightarrow> e1 x = e2 x) \\<longrightarrow>\n     FEval MI e1 A = FEval MI e2 A\n\ngoal (1 subgoal):\n 1. \\<forall>e1 e2.\n       (\\<forall>x.\n           x \\<in> set (fv (FEx A)) \\<longrightarrow>\n           e1 x = e2 x) \\<longrightarrow>\n       FEval MI e1 (FEx A) = FEval MI e2 (FEx A)", "by (metis (no_types, lifting) FEval.simps(6) Nitpick.case_nat_unfold One_nat_def Suc_pred fv.simps(6) gr0I preSuc)"], ["proof (state)\nthis:\n  \\<forall>e1 e2.\n     (\\<forall>x.\n         x \\<in> set (fv (FEx A)) \\<longrightarrow>\n         e1 x = e2 x) \\<longrightarrow>\n     FEval MI e1 (FEx A) = FEval MI e2 (FEx A)\n\ngoal:\nNo subgoals!", "qed"], ["", "primrec SEval :: \"model => env => form list => bool\"\nwhere\n  \"SEval m e [] = False\"\n| \"SEval m e (x#xs) = (FEval m e x | SEval m e xs)\""], ["", "lemma SEval_def2: \"SEval m e s = (\\<exists>f. f \\<in> set s & FEval m e f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. SEval m e s = (\\<exists>f. f \\<in> set s \\<and> FEval m e f)", "by (induct s) auto"], ["", "lemma SEval_append: \"SEval m e (xs@ys) = ( (SEval m e xs) | (SEval m e ys))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. SEval m e (xs @ ys) = (SEval m e xs \\<or> SEval m e ys)", "by (induct xs) auto"], ["", "lemma all_eq_all: \"\\<forall>x. P x = Q x ==> (\\<forall>x. P x) = (\\<forall>x. Q x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x. P x = Q x \\<Longrightarrow>\n    (\\<forall>x. P x) = (\\<forall>x. Q x)", "by blast"], ["", "lemma all_conj: \"(\\<forall>x. A x & B x) = ((\\<forall>x. A x) & (\\<forall>x. B x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>x. A x \\<and> B x) =\n    ((\\<forall>x. A x) \\<and> (\\<forall>x. B x))", "by blast"], ["", "lemma SEval_cong: \"(\\<forall>x. x \\<in> set (sfv s) --> e1 x = e2 x) --> SEval m e1 s = SEval m e2 s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>x.\n        x \\<in> set (sfv s) \\<longrightarrow> e1 x = e2 x) \\<longrightarrow>\n    SEval m e1 s = SEval m e2 s", "apply(induct s)"], ["proof (prove)\ngoal (2 subgoals):\n 1. (\\<forall>x.\n        x \\<in> set (sfv []) \\<longrightarrow>\n        e1 x = e2 x) \\<longrightarrow>\n    SEval m e1 [] = SEval m e2 []\n 2. \\<And>a s.\n       (\\<forall>x.\n           x \\<in> set (sfv s) \\<longrightarrow>\n           e1 x = e2 x) \\<longrightarrow>\n       SEval m e1 s = SEval m e2 s \\<Longrightarrow>\n       (\\<forall>x.\n           x \\<in> set (sfv (a # s)) \\<longrightarrow>\n           e1 x = e2 x) \\<longrightarrow>\n       SEval m e1 (a # s) = SEval m e2 (a # s)", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a s.\n       (\\<forall>x.\n           x \\<in> set (sfv s) \\<longrightarrow>\n           e1 x = e2 x) \\<longrightarrow>\n       SEval m e1 s = SEval m e2 s \\<Longrightarrow>\n       (\\<forall>x.\n           x \\<in> set (sfv (a # s)) \\<longrightarrow>\n           e1 x = e2 x) \\<longrightarrow>\n       SEval m e1 (a # s) = SEval m e2 (a # s)", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a s.\n       (\\<forall>x.\n           x \\<in> set (sfv s) \\<longrightarrow>\n           e1 x = e2 x) \\<longrightarrow>\n       SEval m e1 s = SEval m e2 s \\<Longrightarrow>\n       (\\<forall>x.\n           x \\<in> set (sfv (a # s)) \\<longrightarrow>\n           e1 x = e2 x) \\<longrightarrow>\n       (FEval m e1 a \\<or> SEval m e1 s) = (FEval m e2 a \\<or> SEval m e2 s)", "apply(intro allI impI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a s.\n       \\<lbrakk>(\\<forall>x.\n                    x \\<in> set (sfv s) \\<longrightarrow>\n                    e1 x = e2 x) \\<longrightarrow>\n                SEval m e1 s = SEval m e2 s;\n        \\<forall>x.\n           x \\<in> set (sfv (a # s)) \\<longrightarrow> e1 x = e2 x\\<rbrakk>\n       \\<Longrightarrow> (FEval m e1 a \\<or> SEval m e1 s) =\n                         (FEval m e2 a \\<or> SEval m e2 s)", "apply(rule or_lem)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a s.\n       \\<lbrakk>(\\<forall>x.\n                    x \\<in> set (sfv s) \\<longrightarrow>\n                    e1 x = e2 x) \\<longrightarrow>\n                SEval m e1 s = SEval m e2 s;\n        \\<forall>x.\n           x \\<in> set (sfv (a # s)) \\<longrightarrow> e1 x = e2 x\\<rbrakk>\n       \\<Longrightarrow> FEval m e1 a = FEval m e2 a\n 2. \\<And>a s.\n       \\<lbrakk>(\\<forall>x.\n                    x \\<in> set (sfv s) \\<longrightarrow>\n                    e1 x = e2 x) \\<longrightarrow>\n                SEval m e1 s = SEval m e2 s;\n        \\<forall>x.\n           x \\<in> set (sfv (a # s)) \\<longrightarrow> e1 x = e2 x\\<rbrakk>\n       \\<Longrightarrow> SEval m e1 s = SEval m e2 s", "apply(simp add: sfv_cons)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a s.\n       \\<lbrakk>SEval m e1 s = SEval m e2 s;\n        \\<forall>x.\n           (x \\<in> set (fv a) \\<longrightarrow> e1 x = e2 x) \\<and>\n           (x \\<in> set (sfv s) \\<longrightarrow> e1 x = e2 x)\\<rbrakk>\n       \\<Longrightarrow> FEval m e1 a = FEval m e2 a\n 2. \\<And>a s.\n       \\<lbrakk>(\\<forall>x.\n                    x \\<in> set (sfv s) \\<longrightarrow>\n                    e1 x = e2 x) \\<longrightarrow>\n                SEval m e1 s = SEval m e2 s;\n        \\<forall>x.\n           x \\<in> set (sfv (a # s)) \\<longrightarrow> e1 x = e2 x\\<rbrakk>\n       \\<Longrightarrow> SEval m e1 s = SEval m e2 s", "apply(simp add: FEval_cong)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a s.\n       \\<lbrakk>(\\<forall>x.\n                    x \\<in> set (sfv s) \\<longrightarrow>\n                    e1 x = e2 x) \\<longrightarrow>\n                SEval m e1 s = SEval m e2 s;\n        \\<forall>x.\n           x \\<in> set (sfv (a # s)) \\<longrightarrow> e1 x = e2 x\\<rbrakk>\n       \\<Longrightarrow> SEval m e1 s = SEval m e2 s", "apply(simp add: sfv_cons)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "definition\n  is_env :: \"model => env => bool\" where\n  \"is_env MI e = (\\<forall>x. e x \\<in> (fst MI))\""], ["", "definition\n  Svalid :: \"form list => bool\" where\n  \"Svalid s = (\\<forall>MI e. is_env MI e --> SEval MI e s)\""], ["", "subsection \"Soundness\""], ["", "lemma fold_compose1: \"(% x. f (g x)) = (f o g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. f (g x)) = f \\<circ> g", "apply(rule ext)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x. f (g x) = (f \\<circ> g) x", "apply(force)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma FEval_subst: \"\\<forall>e f. (FEval MI e (subst f A)) = (FEval MI (e o f) A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>e f. FEval MI e (subst f A) = FEval MI (e \\<circ> f) A", "apply(induct A)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>x1 x2.\n       \\<forall>e f.\n          FEval MI e (subst f (PAtom x1 x2)) =\n          FEval MI (e \\<circ> f) (PAtom x1 x2)\n 2. \\<And>x1 x2.\n       \\<forall>e f.\n          FEval MI e (subst f (NAtom x1 x2)) =\n          FEval MI (e \\<circ> f) (NAtom x1 x2)\n 3. \\<And>A1 A2.\n       \\<lbrakk>\\<forall>e f.\n                   FEval MI e (subst f A1) = FEval MI (e \\<circ> f) A1;\n        \\<forall>e f.\n           FEval MI e (subst f A2) = FEval MI (e \\<circ> f) A2\\<rbrakk>\n       \\<Longrightarrow> \\<forall>e f.\n                            FEval MI e (subst f (FConj A1 A2)) =\n                            FEval MI (e \\<circ> f) (FConj A1 A2)\n 4. \\<And>A1 A2.\n       \\<lbrakk>\\<forall>e f.\n                   FEval MI e (subst f A1) = FEval MI (e \\<circ> f) A1;\n        \\<forall>e f.\n           FEval MI e (subst f A2) = FEval MI (e \\<circ> f) A2\\<rbrakk>\n       \\<Longrightarrow> \\<forall>e f.\n                            FEval MI e (subst f (FDisj A1 A2)) =\n                            FEval MI (e \\<circ> f) (FDisj A1 A2)\n 5. \\<And>A.\n       \\<forall>e f.\n          FEval MI e (subst f A) =\n          FEval MI (e \\<circ> f) A \\<Longrightarrow>\n       \\<forall>e f.\n          FEval MI e (subst f (FAll A)) = FEval MI (e \\<circ> f) (FAll A)\n 6. \\<And>A.\n       \\<forall>e f.\n          FEval MI e (subst f A) =\n          FEval MI (e \\<circ> f) A \\<Longrightarrow>\n       \\<forall>e f.\n          FEval MI e (subst f (FEx A)) = FEval MI (e \\<circ> f) (FEx A)", "apply(simp add: Let_def)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>x1 x2.\n       \\<forall>e f.\n          snd MI x1 (map (e \\<circ> f) x2) =\n          snd MI x1 (map (\\<lambda>a. e (f a)) x2)\n 2. \\<And>x1 x2.\n       \\<forall>e f.\n          FEval MI e (subst f (NAtom x1 x2)) =\n          FEval MI (e \\<circ> f) (NAtom x1 x2)\n 3. \\<And>A1 A2.\n       \\<lbrakk>\\<forall>e f.\n                   FEval MI e (subst f A1) = FEval MI (e \\<circ> f) A1;\n        \\<forall>e f.\n           FEval MI e (subst f A2) = FEval MI (e \\<circ> f) A2\\<rbrakk>\n       \\<Longrightarrow> \\<forall>e f.\n                            FEval MI e (subst f (FConj A1 A2)) =\n                            FEval MI (e \\<circ> f) (FConj A1 A2)\n 4. \\<And>A1 A2.\n       \\<lbrakk>\\<forall>e f.\n                   FEval MI e (subst f A1) = FEval MI (e \\<circ> f) A1;\n        \\<forall>e f.\n           FEval MI e (subst f A2) = FEval MI (e \\<circ> f) A2\\<rbrakk>\n       \\<Longrightarrow> \\<forall>e f.\n                            FEval MI e (subst f (FDisj A1 A2)) =\n                            FEval MI (e \\<circ> f) (FDisj A1 A2)\n 5. \\<And>A.\n       \\<forall>e f.\n          FEval MI e (subst f A) =\n          FEval MI (e \\<circ> f) A \\<Longrightarrow>\n       \\<forall>e f.\n          FEval MI e (subst f (FAll A)) = FEval MI (e \\<circ> f) (FAll A)\n 6. \\<And>A.\n       \\<forall>e f.\n          FEval MI e (subst f A) =\n          FEval MI (e \\<circ> f) A \\<Longrightarrow>\n       \\<forall>e f.\n          FEval MI e (subst f (FEx A)) = FEval MI (e \\<circ> f) (FEx A)", "apply(simp only: fold_compose1 map_map)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>x1 x2.\n       \\<forall>e f.\n          snd MI x1 (map (e \\<circ> f) x2) =\n          snd MI x1 (map (e \\<circ> f) x2)\n 2. \\<And>x1 x2.\n       \\<forall>e f.\n          FEval MI e (subst f (NAtom x1 x2)) =\n          FEval MI (e \\<circ> f) (NAtom x1 x2)\n 3. \\<And>A1 A2.\n       \\<lbrakk>\\<forall>e f.\n                   FEval MI e (subst f A1) = FEval MI (e \\<circ> f) A1;\n        \\<forall>e f.\n           FEval MI e (subst f A2) = FEval MI (e \\<circ> f) A2\\<rbrakk>\n       \\<Longrightarrow> \\<forall>e f.\n                            FEval MI e (subst f (FConj A1 A2)) =\n                            FEval MI (e \\<circ> f) (FConj A1 A2)\n 4. \\<And>A1 A2.\n       \\<lbrakk>\\<forall>e f.\n                   FEval MI e (subst f A1) = FEval MI (e \\<circ> f) A1;\n        \\<forall>e f.\n           FEval MI e (subst f A2) = FEval MI (e \\<circ> f) A2\\<rbrakk>\n       \\<Longrightarrow> \\<forall>e f.\n                            FEval MI e (subst f (FDisj A1 A2)) =\n                            FEval MI (e \\<circ> f) (FDisj A1 A2)\n 5. \\<And>A.\n       \\<forall>e f.\n          FEval MI e (subst f A) =\n          FEval MI (e \\<circ> f) A \\<Longrightarrow>\n       \\<forall>e f.\n          FEval MI e (subst f (FAll A)) = FEval MI (e \\<circ> f) (FAll A)\n 6. \\<And>A.\n       \\<forall>e f.\n          FEval MI e (subst f A) =\n          FEval MI (e \\<circ> f) A \\<Longrightarrow>\n       \\<forall>e f.\n          FEval MI e (subst f (FEx A)) = FEval MI (e \\<circ> f) (FEx A)", "apply(blast)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>x1 x2.\n       \\<forall>e f.\n          FEval MI e (subst f (NAtom x1 x2)) =\n          FEval MI (e \\<circ> f) (NAtom x1 x2)\n 2. \\<And>A1 A2.\n       \\<lbrakk>\\<forall>e f.\n                   FEval MI e (subst f A1) = FEval MI (e \\<circ> f) A1;\n        \\<forall>e f.\n           FEval MI e (subst f A2) = FEval MI (e \\<circ> f) A2\\<rbrakk>\n       \\<Longrightarrow> \\<forall>e f.\n                            FEval MI e (subst f (FConj A1 A2)) =\n                            FEval MI (e \\<circ> f) (FConj A1 A2)\n 3. \\<And>A1 A2.\n       \\<lbrakk>\\<forall>e f.\n                   FEval MI e (subst f A1) = FEval MI (e \\<circ> f) A1;\n        \\<forall>e f.\n           FEval MI e (subst f A2) = FEval MI (e \\<circ> f) A2\\<rbrakk>\n       \\<Longrightarrow> \\<forall>e f.\n                            FEval MI e (subst f (FDisj A1 A2)) =\n                            FEval MI (e \\<circ> f) (FDisj A1 A2)\n 4. \\<And>A.\n       \\<forall>e f.\n          FEval MI e (subst f A) =\n          FEval MI (e \\<circ> f) A \\<Longrightarrow>\n       \\<forall>e f.\n          FEval MI e (subst f (FAll A)) = FEval MI (e \\<circ> f) (FAll A)\n 5. \\<And>A.\n       \\<forall>e f.\n          FEval MI e (subst f A) =\n          FEval MI (e \\<circ> f) A \\<Longrightarrow>\n       \\<forall>e f.\n          FEval MI e (subst f (FEx A)) = FEval MI (e \\<circ> f) (FEx A)", "apply(simp add: Let_def)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>x1 x2.\n       \\<forall>e f.\n          snd MI x1 (map (e \\<circ> f) x2) =\n          snd MI x1 (map (\\<lambda>a. e (f a)) x2)\n 2. \\<And>A1 A2.\n       \\<lbrakk>\\<forall>e f.\n                   FEval MI e (subst f A1) = FEval MI (e \\<circ> f) A1;\n        \\<forall>e f.\n           FEval MI e (subst f A2) = FEval MI (e \\<circ> f) A2\\<rbrakk>\n       \\<Longrightarrow> \\<forall>e f.\n                            FEval MI e (subst f (FConj A1 A2)) =\n                            FEval MI (e \\<circ> f) (FConj A1 A2)\n 3. \\<And>A1 A2.\n       \\<lbrakk>\\<forall>e f.\n                   FEval MI e (subst f A1) = FEval MI (e \\<circ> f) A1;\n        \\<forall>e f.\n           FEval MI e (subst f A2) = FEval MI (e \\<circ> f) A2\\<rbrakk>\n       \\<Longrightarrow> \\<forall>e f.\n                            FEval MI e (subst f (FDisj A1 A2)) =\n                            FEval MI (e \\<circ> f) (FDisj A1 A2)\n 4. \\<And>A.\n       \\<forall>e f.\n          FEval MI e (subst f A) =\n          FEval MI (e \\<circ> f) A \\<Longrightarrow>\n       \\<forall>e f.\n          FEval MI e (subst f (FAll A)) = FEval MI (e \\<circ> f) (FAll A)\n 5. \\<And>A.\n       \\<forall>e f.\n          FEval MI e (subst f A) =\n          FEval MI (e \\<circ> f) A \\<Longrightarrow>\n       \\<forall>e f.\n          FEval MI e (subst f (FEx A)) = FEval MI (e \\<circ> f) (FEx A)", "apply(simp only: fold_compose1 map_map)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>x1 x2.\n       \\<forall>e f.\n          snd MI x1 (map (e \\<circ> f) x2) =\n          snd MI x1 (map (e \\<circ> f) x2)\n 2. \\<And>A1 A2.\n       \\<lbrakk>\\<forall>e f.\n                   FEval MI e (subst f A1) = FEval MI (e \\<circ> f) A1;\n        \\<forall>e f.\n           FEval MI e (subst f A2) = FEval MI (e \\<circ> f) A2\\<rbrakk>\n       \\<Longrightarrow> \\<forall>e f.\n                            FEval MI e (subst f (FConj A1 A2)) =\n                            FEval MI (e \\<circ> f) (FConj A1 A2)\n 3. \\<And>A1 A2.\n       \\<lbrakk>\\<forall>e f.\n                   FEval MI e (subst f A1) = FEval MI (e \\<circ> f) A1;\n        \\<forall>e f.\n           FEval MI e (subst f A2) = FEval MI (e \\<circ> f) A2\\<rbrakk>\n       \\<Longrightarrow> \\<forall>e f.\n                            FEval MI e (subst f (FDisj A1 A2)) =\n                            FEval MI (e \\<circ> f) (FDisj A1 A2)\n 4. \\<And>A.\n       \\<forall>e f.\n          FEval MI e (subst f A) =\n          FEval MI (e \\<circ> f) A \\<Longrightarrow>\n       \\<forall>e f.\n          FEval MI e (subst f (FAll A)) = FEval MI (e \\<circ> f) (FAll A)\n 5. \\<And>A.\n       \\<forall>e f.\n          FEval MI e (subst f A) =\n          FEval MI (e \\<circ> f) A \\<Longrightarrow>\n       \\<forall>e f.\n          FEval MI e (subst f (FEx A)) = FEval MI (e \\<circ> f) (FEx A)", "apply(blast)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>A1 A2.\n       \\<lbrakk>\\<forall>e f.\n                   FEval MI e (subst f A1) = FEval MI (e \\<circ> f) A1;\n        \\<forall>e f.\n           FEval MI e (subst f A2) = FEval MI (e \\<circ> f) A2\\<rbrakk>\n       \\<Longrightarrow> \\<forall>e f.\n                            FEval MI e (subst f (FConj A1 A2)) =\n                            FEval MI (e \\<circ> f) (FConj A1 A2)\n 2. \\<And>A1 A2.\n       \\<lbrakk>\\<forall>e f.\n                   FEval MI e (subst f A1) = FEval MI (e \\<circ> f) A1;\n        \\<forall>e f.\n           FEval MI e (subst f A2) = FEval MI (e \\<circ> f) A2\\<rbrakk>\n       \\<Longrightarrow> \\<forall>e f.\n                            FEval MI e (subst f (FDisj A1 A2)) =\n                            FEval MI (e \\<circ> f) (FDisj A1 A2)\n 3. \\<And>A.\n       \\<forall>e f.\n          FEval MI e (subst f A) =\n          FEval MI (e \\<circ> f) A \\<Longrightarrow>\n       \\<forall>e f.\n          FEval MI e (subst f (FAll A)) = FEval MI (e \\<circ> f) (FAll A)\n 4. \\<And>A.\n       \\<forall>e f.\n          FEval MI e (subst f A) =\n          FEval MI (e \\<circ> f) A \\<Longrightarrow>\n       \\<forall>e f.\n          FEval MI e (subst f (FEx A)) = FEval MI (e \\<circ> f) (FEx A)", "apply(simp)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>A1 A2.\n       \\<lbrakk>\\<forall>e f.\n                   FEval MI e (subst f A1) = FEval MI (e \\<circ> f) A1;\n        \\<forall>e f.\n           FEval MI e (subst f A2) = FEval MI (e \\<circ> f) A2\\<rbrakk>\n       \\<Longrightarrow> \\<forall>e f.\n                            FEval MI e (subst f (FDisj A1 A2)) =\n                            FEval MI (e \\<circ> f) (FDisj A1 A2)\n 2. \\<And>A.\n       \\<forall>e f.\n          FEval MI e (subst f A) =\n          FEval MI (e \\<circ> f) A \\<Longrightarrow>\n       \\<forall>e f.\n          FEval MI e (subst f (FAll A)) = FEval MI (e \\<circ> f) (FAll A)\n 3. \\<And>A.\n       \\<forall>e f.\n          FEval MI e (subst f A) =\n          FEval MI (e \\<circ> f) A \\<Longrightarrow>\n       \\<forall>e f.\n          FEval MI e (subst f (FEx A)) = FEval MI (e \\<circ> f) (FEx A)", "apply(simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>A.\n       \\<forall>e f.\n          FEval MI e (subst f A) =\n          FEval MI (e \\<circ> f) A \\<Longrightarrow>\n       \\<forall>e f.\n          FEval MI e (subst f (FAll A)) = FEval MI (e \\<circ> f) (FAll A)\n 2. \\<And>A.\n       \\<forall>e f.\n          FEval MI e (subst f A) =\n          FEval MI (e \\<circ> f) A \\<Longrightarrow>\n       \\<forall>e f.\n          FEval MI e (subst f (FEx A)) = FEval MI (e \\<circ> f) (FEx A)", "apply(simp (no_asm_use))"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>A.\n       \\<forall>e f.\n          FEval MI e (subst f A) =\n          FEval MI (\\<lambda>a. e (f a)) A \\<Longrightarrow>\n       \\<forall>e f.\n          (\\<forall>m\\<in>fst MI.\n              FEval MI\n               (\\<lambda>y.\n                   case y of 0 \\<Rightarrow> m | Suc n \\<Rightarrow> e n)\n               (subst (bump f) A)) =\n          (\\<forall>m\\<in>fst MI.\n              FEval MI\n               (\\<lambda>y.\n                   case y of 0 \\<Rightarrow> m\n                   | Suc n \\<Rightarrow> e (f n))\n               A)\n 2. \\<And>A.\n       \\<forall>e f.\n          FEval MI e (subst f A) =\n          FEval MI (e \\<circ> f) A \\<Longrightarrow>\n       \\<forall>e f.\n          FEval MI e (subst f (FEx A)) = FEval MI (e \\<circ> f) (FEx A)", "apply(simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>A.\n       \\<forall>e f.\n          FEval MI e (subst f A) =\n          FEval MI (\\<lambda>a. e (f a)) A \\<Longrightarrow>\n       \\<forall>e f.\n          (\\<forall>m\\<in>fst MI.\n              FEval MI\n               (\\<lambda>a.\n                   case bump f a of 0 \\<Rightarrow> m\n                   | Suc x \\<Rightarrow> e x)\n               A) =\n          (\\<forall>m\\<in>fst MI.\n              FEval MI\n               (\\<lambda>y.\n                   case y of 0 \\<Rightarrow> m\n                   | Suc n \\<Rightarrow> e (f n))\n               A)\n 2. \\<And>A.\n       \\<forall>e f.\n          FEval MI e (subst f A) =\n          FEval MI (e \\<circ> f) A \\<Longrightarrow>\n       \\<forall>e f.\n          FEval MI e (subst f (FEx A)) = FEval MI (e \\<circ> f) (FEx A)", "apply(rule,rule)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>A e f.\n       \\<forall>e f.\n          FEval MI e (subst f A) =\n          FEval MI (\\<lambda>a. e (f a)) A \\<Longrightarrow>\n       (\\<forall>m\\<in>fst MI.\n           FEval MI\n            (\\<lambda>a.\n                case bump f a of 0 \\<Rightarrow> m\n                | Suc x \\<Rightarrow> e x)\n            A) =\n       (\\<forall>m\\<in>fst MI.\n           FEval MI\n            (\\<lambda>y.\n                case y of 0 \\<Rightarrow> m | Suc n \\<Rightarrow> e (f n))\n            A)\n 2. \\<And>A.\n       \\<forall>e f.\n          FEval MI e (subst f A) =\n          FEval MI (e \\<circ> f) A \\<Longrightarrow>\n       \\<forall>e f.\n          FEval MI e (subst f (FEx A)) = FEval MI (e \\<circ> f) (FEx A)", "apply(rule ball_eq_ball)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>A e f.\n       \\<forall>e f.\n          FEval MI e (subst f A) =\n          FEval MI (\\<lambda>a. e (f a)) A \\<Longrightarrow>\n       \\<forall>m\\<in>fst MI.\n          FEval MI\n           (\\<lambda>a.\n               case bump f a of 0 \\<Rightarrow> m | Suc x \\<Rightarrow> e x)\n           A =\n          FEval MI\n           (\\<lambda>y.\n               case y of 0 \\<Rightarrow> m | Suc n \\<Rightarrow> e (f n))\n           A\n 2. \\<And>A.\n       \\<forall>e f.\n          FEval MI e (subst f A) =\n          FEval MI (e \\<circ> f) A \\<Longrightarrow>\n       \\<forall>e f.\n          FEval MI e (subst f (FEx A)) = FEval MI (e \\<circ> f) (FEx A)", "apply(rule)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>A e f m.\n       \\<lbrakk>\\<forall>e f.\n                   FEval MI e (subst f A) =\n                   FEval MI (\\<lambda>a. e (f a)) A;\n        m \\<in> fst MI\\<rbrakk>\n       \\<Longrightarrow> FEval MI\n                          (\\<lambda>a.\n                              case bump f a of 0 \\<Rightarrow> m\n                              | Suc x \\<Rightarrow> e x)\n                          A =\n                         FEval MI\n                          (\\<lambda>y.\n                              case y of 0 \\<Rightarrow> m\n                              | Suc n \\<Rightarrow> e (f n))\n                          A\n 2. \\<And>A.\n       \\<forall>e f.\n          FEval MI e (subst f A) =\n          FEval MI (e \\<circ> f) A \\<Longrightarrow>\n       \\<forall>e f.\n          FEval MI e (subst f (FEx A)) = FEval MI (e \\<circ> f) (FEx A)", "apply(simp add: bump_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>A e f m.\n       \\<lbrakk>\\<forall>e f.\n                   FEval MI e (subst f A) =\n                   FEval MI (\\<lambda>a. e (f a)) A;\n        m \\<in> fst MI\\<rbrakk>\n       \\<Longrightarrow> FEval MI\n                          (\\<lambda>a.\n                              case case a of 0 \\<Rightarrow> 0\n                                   | Suc n \\<Rightarrow> Suc (f n) of\n                              0 \\<Rightarrow> m | Suc x \\<Rightarrow> e x)\n                          A =\n                         FEval MI\n                          (\\<lambda>y.\n                              case y of 0 \\<Rightarrow> m\n                              | Suc n \\<Rightarrow> e (f n))\n                          A\n 2. \\<And>A.\n       \\<forall>e f.\n          FEval MI e (subst f A) =\n          FEval MI (e \\<circ> f) A \\<Longrightarrow>\n       \\<forall>e f.\n          FEval MI e (subst f (FEx A)) = FEval MI (e \\<circ> f) (FEx A)", "apply(subgoal_tac \"(%u. case_nat m e (case u of 0 => 0 | Suc n => Suc (f n))) = (case_nat m (%n. e (f n)))\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>A e f m.\n       \\<lbrakk>\\<forall>e f.\n                   FEval MI e (subst f A) =\n                   FEval MI (\\<lambda>a. e (f a)) A;\n        m \\<in> fst MI;\n        (\\<lambda>u.\n            case case u of 0 \\<Rightarrow> 0\n                 | Suc n \\<Rightarrow> Suc (f n) of\n            0 \\<Rightarrow> m | Suc x \\<Rightarrow> e x) =\n        case_nat m (\\<lambda>n. e (f n))\\<rbrakk>\n       \\<Longrightarrow> FEval MI\n                          (\\<lambda>a.\n                              case case a of 0 \\<Rightarrow> 0\n                                   | Suc n \\<Rightarrow> Suc (f n) of\n                              0 \\<Rightarrow> m | Suc x \\<Rightarrow> e x)\n                          A =\n                         FEval MI\n                          (\\<lambda>y.\n                              case y of 0 \\<Rightarrow> m\n                              | Suc n \\<Rightarrow> e (f n))\n                          A\n 2. \\<And>A e f m.\n       \\<lbrakk>\\<forall>e f.\n                   FEval MI e (subst f A) =\n                   FEval MI (\\<lambda>a. e (f a)) A;\n        m \\<in> fst MI\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>u.\n                             case case u of 0 \\<Rightarrow> 0\n                                  | Suc n \\<Rightarrow> Suc (f n) of\n                             0 \\<Rightarrow> m | Suc x \\<Rightarrow> e x) =\n                         case_nat m (\\<lambda>n. e (f n))\n 3. \\<And>A.\n       \\<forall>e f.\n          FEval MI e (subst f A) =\n          FEval MI (e \\<circ> f) A \\<Longrightarrow>\n       \\<forall>e f.\n          FEval MI e (subst f (FEx A)) = FEval MI (e \\<circ> f) (FEx A)", "apply(simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>A e f m.\n       \\<lbrakk>\\<forall>e f.\n                   FEval MI e (subst f A) =\n                   FEval MI (\\<lambda>a. e (f a)) A;\n        m \\<in> fst MI\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>u.\n                             case case u of 0 \\<Rightarrow> 0\n                                  | Suc n \\<Rightarrow> Suc (f n) of\n                             0 \\<Rightarrow> m | Suc x \\<Rightarrow> e x) =\n                         case_nat m (\\<lambda>n. e (f n))\n 2. \\<And>A.\n       \\<forall>e f.\n          FEval MI e (subst f A) =\n          FEval MI (e \\<circ> f) A \\<Longrightarrow>\n       \\<forall>e f.\n          FEval MI e (subst f (FEx A)) = FEval MI (e \\<circ> f) (FEx A)", "apply(rule ext)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>A e f m u.\n       \\<lbrakk>\\<forall>e f.\n                   FEval MI e (subst f A) =\n                   FEval MI (\\<lambda>a. e (f a)) A;\n        m \\<in> fst MI\\<rbrakk>\n       \\<Longrightarrow> (case case u of 0 \\<Rightarrow> 0\n                               | Suc n \\<Rightarrow> Suc (f n) of\n                          0 \\<Rightarrow> m | Suc x \\<Rightarrow> e x) =\n                         (case u of 0 \\<Rightarrow> m\n                          | Suc n \\<Rightarrow> e (f n))\n 2. \\<And>A.\n       \\<forall>e f.\n          FEval MI e (subst f A) =\n          FEval MI (e \\<circ> f) A \\<Longrightarrow>\n       \\<forall>e f.\n          FEval MI e (subst f (FEx A)) = FEval MI (e \\<circ> f) (FEx A)", "apply(case_tac u)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>A e f m u.\n       \\<lbrakk>\\<forall>e f.\n                   FEval MI e (subst f A) =\n                   FEval MI (\\<lambda>a. e (f a)) A;\n        m \\<in> fst MI; u = 0\\<rbrakk>\n       \\<Longrightarrow> (case case u of 0 \\<Rightarrow> 0\n                               | Suc n \\<Rightarrow> Suc (f n) of\n                          0 \\<Rightarrow> m | Suc x \\<Rightarrow> e x) =\n                         (case u of 0 \\<Rightarrow> m\n                          | Suc n \\<Rightarrow> e (f n))\n 2. \\<And>A e f m u nat.\n       \\<lbrakk>\\<forall>e f.\n                   FEval MI e (subst f A) =\n                   FEval MI (\\<lambda>a. e (f a)) A;\n        m \\<in> fst MI; u = Suc nat\\<rbrakk>\n       \\<Longrightarrow> (case case u of 0 \\<Rightarrow> 0\n                               | Suc n \\<Rightarrow> Suc (f n) of\n                          0 \\<Rightarrow> m | Suc x \\<Rightarrow> e x) =\n                         (case u of 0 \\<Rightarrow> m\n                          | Suc n \\<Rightarrow> e (f n))\n 3. \\<And>A.\n       \\<forall>e f.\n          FEval MI e (subst f A) =\n          FEval MI (e \\<circ> f) A \\<Longrightarrow>\n       \\<forall>e f.\n          FEval MI e (subst f (FEx A)) = FEval MI (e \\<circ> f) (FEx A)", "apply(simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>A e f m u nat.\n       \\<lbrakk>\\<forall>e f.\n                   FEval MI e (subst f A) =\n                   FEval MI (\\<lambda>a. e (f a)) A;\n        m \\<in> fst MI; u = Suc nat\\<rbrakk>\n       \\<Longrightarrow> (case case u of 0 \\<Rightarrow> 0\n                               | Suc n \\<Rightarrow> Suc (f n) of\n                          0 \\<Rightarrow> m | Suc x \\<Rightarrow> e x) =\n                         (case u of 0 \\<Rightarrow> m\n                          | Suc n \\<Rightarrow> e (f n))\n 2. \\<And>A.\n       \\<forall>e f.\n          FEval MI e (subst f A) =\n          FEval MI (e \\<circ> f) A \\<Longrightarrow>\n       \\<forall>e f.\n          FEval MI e (subst f (FEx A)) = FEval MI (e \\<circ> f) (FEx A)", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>A.\n       \\<forall>e f.\n          FEval MI e (subst f A) =\n          FEval MI (e \\<circ> f) A \\<Longrightarrow>\n       \\<forall>e f.\n          FEval MI e (subst f (FEx A)) = FEval MI (e \\<circ> f) (FEx A)", "apply(simp (no_asm_use))"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>A.\n       \\<forall>e f.\n          FEval MI e (subst f A) =\n          FEval MI (\\<lambda>a. e (f a)) A \\<Longrightarrow>\n       \\<forall>e f.\n          (\\<exists>m\\<in>fst MI.\n              FEval MI\n               (\\<lambda>y.\n                   case y of 0 \\<Rightarrow> m | Suc n \\<Rightarrow> e n)\n               (subst (bump f) A)) =\n          (\\<exists>m\\<in>fst MI.\n              FEval MI\n               (\\<lambda>y.\n                   case y of 0 \\<Rightarrow> m\n                   | Suc n \\<Rightarrow> e (f n))\n               A)", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>A.\n       \\<forall>e f.\n          FEval MI e (subst f A) =\n          FEval MI (\\<lambda>a. e (f a)) A \\<Longrightarrow>\n       \\<forall>e f.\n          (\\<exists>m\\<in>fst MI.\n              FEval MI\n               (\\<lambda>a.\n                   case bump f a of 0 \\<Rightarrow> m\n                   | Suc x \\<Rightarrow> e x)\n               A) =\n          (\\<exists>m\\<in>fst MI.\n              FEval MI\n               (\\<lambda>y.\n                   case y of 0 \\<Rightarrow> m\n                   | Suc n \\<Rightarrow> e (f n))\n               A)", "apply(rule,rule)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>A e f.\n       \\<forall>e f.\n          FEval MI e (subst f A) =\n          FEval MI (\\<lambda>a. e (f a)) A \\<Longrightarrow>\n       (\\<exists>m\\<in>fst MI.\n           FEval MI\n            (\\<lambda>a.\n                case bump f a of 0 \\<Rightarrow> m\n                | Suc x \\<Rightarrow> e x)\n            A) =\n       (\\<exists>m\\<in>fst MI.\n           FEval MI\n            (\\<lambda>y.\n                case y of 0 \\<Rightarrow> m | Suc n \\<Rightarrow> e (f n))\n            A)", "apply(rule bex_eq_bex)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>A e f.\n       \\<forall>e f.\n          FEval MI e (subst f A) =\n          FEval MI (\\<lambda>a. e (f a)) A \\<Longrightarrow>\n       \\<forall>m\\<in>fst MI.\n          FEval MI\n           (\\<lambda>a.\n               case bump f a of 0 \\<Rightarrow> m | Suc x \\<Rightarrow> e x)\n           A =\n          FEval MI\n           (\\<lambda>y.\n               case y of 0 \\<Rightarrow> m | Suc n \\<Rightarrow> e (f n))\n           A", "apply(rule)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>A e f m.\n       \\<lbrakk>\\<forall>e f.\n                   FEval MI e (subst f A) =\n                   FEval MI (\\<lambda>a. e (f a)) A;\n        m \\<in> fst MI\\<rbrakk>\n       \\<Longrightarrow> FEval MI\n                          (\\<lambda>a.\n                              case bump f a of 0 \\<Rightarrow> m\n                              | Suc x \\<Rightarrow> e x)\n                          A =\n                         FEval MI\n                          (\\<lambda>y.\n                              case y of 0 \\<Rightarrow> m\n                              | Suc n \\<Rightarrow> e (f n))\n                          A", "apply(simp add: bump_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>A e f m.\n       \\<lbrakk>\\<forall>e f.\n                   FEval MI e (subst f A) =\n                   FEval MI (\\<lambda>a. e (f a)) A;\n        m \\<in> fst MI\\<rbrakk>\n       \\<Longrightarrow> FEval MI\n                          (\\<lambda>a.\n                              case case a of 0 \\<Rightarrow> 0\n                                   | Suc n \\<Rightarrow> Suc (f n) of\n                              0 \\<Rightarrow> m | Suc x \\<Rightarrow> e x)\n                          A =\n                         FEval MI\n                          (\\<lambda>y.\n                              case y of 0 \\<Rightarrow> m\n                              | Suc n \\<Rightarrow> e (f n))\n                          A", "apply(subgoal_tac \"(%u. case_nat m e (case u of 0 => 0 | Suc n => Suc (f n))) = (case_nat m (%n. e (f n)))\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>A e f m.\n       \\<lbrakk>\\<forall>e f.\n                   FEval MI e (subst f A) =\n                   FEval MI (\\<lambda>a. e (f a)) A;\n        m \\<in> fst MI;\n        (\\<lambda>u.\n            case case u of 0 \\<Rightarrow> 0\n                 | Suc n \\<Rightarrow> Suc (f n) of\n            0 \\<Rightarrow> m | Suc x \\<Rightarrow> e x) =\n        case_nat m (\\<lambda>n. e (f n))\\<rbrakk>\n       \\<Longrightarrow> FEval MI\n                          (\\<lambda>a.\n                              case case a of 0 \\<Rightarrow> 0\n                                   | Suc n \\<Rightarrow> Suc (f n) of\n                              0 \\<Rightarrow> m | Suc x \\<Rightarrow> e x)\n                          A =\n                         FEval MI\n                          (\\<lambda>y.\n                              case y of 0 \\<Rightarrow> m\n                              | Suc n \\<Rightarrow> e (f n))\n                          A\n 2. \\<And>A e f m.\n       \\<lbrakk>\\<forall>e f.\n                   FEval MI e (subst f A) =\n                   FEval MI (\\<lambda>a. e (f a)) A;\n        m \\<in> fst MI\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>u.\n                             case case u of 0 \\<Rightarrow> 0\n                                  | Suc n \\<Rightarrow> Suc (f n) of\n                             0 \\<Rightarrow> m | Suc x \\<Rightarrow> e x) =\n                         case_nat m (\\<lambda>n. e (f n))", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>A e f m.\n       \\<lbrakk>\\<forall>e f.\n                   FEval MI e (subst f A) =\n                   FEval MI (\\<lambda>a. e (f a)) A;\n        m \\<in> fst MI\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>u.\n                             case case u of 0 \\<Rightarrow> 0\n                                  | Suc n \\<Rightarrow> Suc (f n) of\n                             0 \\<Rightarrow> m | Suc x \\<Rightarrow> e x) =\n                         case_nat m (\\<lambda>n. e (f n))", "apply(rule ext)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>A e f m u.\n       \\<lbrakk>\\<forall>e f.\n                   FEval MI e (subst f A) =\n                   FEval MI (\\<lambda>a. e (f a)) A;\n        m \\<in> fst MI\\<rbrakk>\n       \\<Longrightarrow> (case case u of 0 \\<Rightarrow> 0\n                               | Suc n \\<Rightarrow> Suc (f n) of\n                          0 \\<Rightarrow> m | Suc x \\<Rightarrow> e x) =\n                         (case u of 0 \\<Rightarrow> m\n                          | Suc n \\<Rightarrow> e (f n))", "apply(case_tac u)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>A e f m u.\n       \\<lbrakk>\\<forall>e f.\n                   FEval MI e (subst f A) =\n                   FEval MI (\\<lambda>a. e (f a)) A;\n        m \\<in> fst MI; u = 0\\<rbrakk>\n       \\<Longrightarrow> (case case u of 0 \\<Rightarrow> 0\n                               | Suc n \\<Rightarrow> Suc (f n) of\n                          0 \\<Rightarrow> m | Suc x \\<Rightarrow> e x) =\n                         (case u of 0 \\<Rightarrow> m\n                          | Suc n \\<Rightarrow> e (f n))\n 2. \\<And>A e f m u nat.\n       \\<lbrakk>\\<forall>e f.\n                   FEval MI e (subst f A) =\n                   FEval MI (\\<lambda>a. e (f a)) A;\n        m \\<in> fst MI; u = Suc nat\\<rbrakk>\n       \\<Longrightarrow> (case case u of 0 \\<Rightarrow> 0\n                               | Suc n \\<Rightarrow> Suc (f n) of\n                          0 \\<Rightarrow> m | Suc x \\<Rightarrow> e x) =\n                         (case u of 0 \\<Rightarrow> m\n                          | Suc n \\<Rightarrow> e (f n))", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>A e f m u nat.\n       \\<lbrakk>\\<forall>e f.\n                   FEval MI e (subst f A) =\n                   FEval MI (\\<lambda>a. e (f a)) A;\n        m \\<in> fst MI; u = Suc nat\\<rbrakk>\n       \\<Longrightarrow> (case case u of 0 \\<Rightarrow> 0\n                               | Suc n \\<Rightarrow> Suc (f n) of\n                          0 \\<Rightarrow> m | Suc x \\<Rightarrow> e x) =\n                         (case u of 0 \\<Rightarrow> m\n                          | Suc n \\<Rightarrow> e (f n))", "apply(simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*\nlemma bump_f_x_0[simp]: \"bump f x 0 = x\" apply(simp add: bump_def) done\n\nlemma bump_id_suc[simp]: \"bump id x (Suc n) = Suc n\" apply(simp add: bump_def) done\n\nlemma bump_id_0[simp]: \"bump id 0 = id\" apply(rule ext) apply(simp add: bump_def) apply(case_tac x) apply(auto) done\n*)"], ["", "lemma FEval_finst: \"FEval mo e (finst A u) = FEval mo (case_nat (e u) e) A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. FEval mo e (finst A u) = FEval mo (case_nat (e u) e) A", "apply(simp add: finst_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. FEval mo e\n     (subst\n       (\\<lambda>v. case v of 0 \\<Rightarrow> u | Suc n \\<Rightarrow> n)\n       A) =\n    FEval mo (case_nat (e u) e) A", "apply(simp add: FEval_subst)"], ["proof (prove)\ngoal (1 subgoal):\n 1. FEval mo (e \\<circ> case_nat u (\\<lambda>n. n)) A =\n    FEval mo (case_nat (e u) e) A", "apply(subgoal_tac \"(e o case_nat u (%n. n)) = (case_nat (e u) e)\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. e \\<circ> case_nat u (\\<lambda>n. n) =\n    case_nat (e u) e \\<Longrightarrow>\n    FEval mo (e \\<circ> case_nat u (\\<lambda>n. n)) A =\n    FEval mo (case_nat (e u) e) A\n 2. e \\<circ> case_nat u (\\<lambda>n. n) = case_nat (e u) e", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. e \\<circ> case_nat u (\\<lambda>n. n) = case_nat (e u) e", "apply(rule ext)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       (e \\<circ> case_nat u (\\<lambda>n. n)) x =\n       (case x of 0 \\<Rightarrow> e u | Suc x \\<Rightarrow> e x)", "apply(case_tac x,auto)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma ball_maxscope: \"(\\<forall>x \\<in> m. P x | Q) ==> (\\<forall>x \\<in> m. P x) | Q \""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>m. P x \\<or> Q \\<Longrightarrow>\n    (\\<forall>x\\<in>m. P x) \\<or> Q", "by blast"], ["", "lemma sound_FAll: \"u \\<notin> set (sfv (FAll f#s)) ==> Svalid (s@[finst f u]) ==> Svalid (FAll f#s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>u \\<notin> set (sfv (FAll f # s));\n     Svalid (s @ [finst f u])\\<rbrakk>\n    \\<Longrightarrow> Svalid (FAll f # s)", "apply(simp add: Svalid_def del: SEval.simps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>u \\<notin> set (sfv (FAll f # s));\n     \\<forall>a b e.\n        is_env (a, b) e \\<longrightarrow>\n        SEval (a, b) e (s @ [finst f u])\\<rbrakk>\n    \\<Longrightarrow> \\<forall>a b e.\n                         is_env (a, b) e \\<longrightarrow>\n                         SEval (a, b) e (FAll f # s)", "apply(rule allI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>u \\<notin> set (sfv (FAll f # s));\n        \\<forall>a b e.\n           is_env (a, b) e \\<longrightarrow>\n           SEval (a, b) e (s @ [finst f u])\\<rbrakk>\n       \\<Longrightarrow> \\<forall>b e.\n                            is_env (a, b) e \\<longrightarrow>\n                            SEval (a, b) e (FAll f # s)", "apply(rule allI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>u \\<notin> set (sfv (FAll f # s));\n        \\<forall>a b e.\n           is_env (a, b) e \\<longrightarrow>\n           SEval (a, b) e (s @ [finst f u])\\<rbrakk>\n       \\<Longrightarrow> \\<forall>e.\n                            is_env (a, b) e \\<longrightarrow>\n                            SEval (a, b) e (FAll f # s)", "apply(rename_tac M I)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>M I.\n       \\<lbrakk>u \\<notin> set (sfv (FAll f # s));\n        \\<forall>a b e.\n           is_env (a, b) e \\<longrightarrow>\n           SEval (a, b) e (s @ [finst f u])\\<rbrakk>\n       \\<Longrightarrow> \\<forall>e.\n                            is_env (M, I) e \\<longrightarrow>\n                            SEval (M, I) e (FAll f # s)", "apply(rule allI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>M I e.\n       \\<lbrakk>u \\<notin> set (sfv (FAll f # s));\n        \\<forall>a b e.\n           is_env (a, b) e \\<longrightarrow>\n           SEval (a, b) e (s @ [finst f u])\\<rbrakk>\n       \\<Longrightarrow> is_env (M, I) e \\<longrightarrow>\n                         SEval (M, I) e (FAll f # s)", "apply(rule)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>M I e.\n       \\<lbrakk>u \\<notin> set (sfv (FAll f # s));\n        \\<forall>a b e.\n           is_env (a, b) e \\<longrightarrow>\n           SEval (a, b) e (s @ [finst f u]);\n        is_env (M, I) e\\<rbrakk>\n       \\<Longrightarrow> SEval (M, I) e (FAll f # s)", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>M I e.\n       \\<lbrakk>u \\<notin> set (sfv (FAll f # s));\n        \\<forall>a b e.\n           is_env (a, b) e \\<longrightarrow>\n           SEval (a, b) e (s @ [finst f u]);\n        is_env (M, I) e\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>m\\<in>M.\n                             FEval (M, I)\n                              (\\<lambda>y.\n                                  case y of 0 \\<Rightarrow> m\n                                  | Suc n \\<Rightarrow> e n)\n                              f) \\<or>\n                         SEval (M, I) e s", "apply(simp add: SEval_append)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>M I e.\n       \\<lbrakk>u \\<notin> set (sfv (FAll f # s));\n        \\<forall>a b e.\n           is_env (a, b) e \\<longrightarrow>\n           SEval (a, b) e s \\<or> FEval (a, b) e (finst f u);\n        is_env (M, I) e\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>m\\<in>M.\n                             FEval (M, I)\n                              (\\<lambda>y.\n                                  case y of 0 \\<Rightarrow> m\n                                  | Suc n \\<Rightarrow> e n)\n                              f) \\<or>\n                         SEval (M, I) e s", "apply(rule ball_maxscope)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>M I e.\n       \\<lbrakk>u \\<notin> set (sfv (FAll f # s));\n        \\<forall>a b e.\n           is_env (a, b) e \\<longrightarrow>\n           SEval (a, b) e s \\<or> FEval (a, b) e (finst f u);\n        is_env (M, I) e\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m\\<in>M.\n                            FEval (M, I)\n                             (\\<lambda>y.\n                                 case y of 0 \\<Rightarrow> m\n                                 | Suc n \\<Rightarrow> e n)\n                             f \\<or>\n                            SEval (M, I) e s", "apply(rule)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>M I e m.\n       \\<lbrakk>u \\<notin> set (sfv (FAll f # s));\n        \\<forall>a b e.\n           is_env (a, b) e \\<longrightarrow>\n           SEval (a, b) e s \\<or> FEval (a, b) e (finst f u);\n        is_env (M, I) e; m \\<in> M\\<rbrakk>\n       \\<Longrightarrow> FEval (M, I)\n                          (\\<lambda>y.\n                              case y of 0 \\<Rightarrow> m\n                              | Suc n \\<Rightarrow> e n)\n                          f \\<or>\n                         SEval (M, I) e s", "apply(simp add: FEval_finst)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>M I e m.\n       \\<lbrakk>u \\<notin> set (sfv (FAll f # s));\n        \\<forall>a b e.\n           is_env (a, b) e \\<longrightarrow>\n           SEval (a, b) e s \\<or> FEval (a, b) (case_nat (e u) e) f;\n        is_env (M, I) e; m \\<in> M\\<rbrakk>\n       \\<Longrightarrow> FEval (M, I)\n                          (\\<lambda>y.\n                              case y of 0 \\<Rightarrow> m\n                              | Suc n \\<Rightarrow> e n)\n                          f \\<or>\n                         SEval (M, I) e s", "apply(drule_tac x=M in spec, drule_tac x=I in spec) \\<comment> \\<open>this is the goal\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>M I e m.\n       \\<lbrakk>u \\<notin> set (sfv (FAll f # s)); is_env (M, I) e;\n        m \\<in> M;\n        \\<forall>e.\n           is_env (M, I) e \\<longrightarrow>\n           SEval (M, I) e s \\<or> FEval (M, I) (case_nat (e u) e) f\\<rbrakk>\n       \\<Longrightarrow> FEval (M, I)\n                          (\\<lambda>y.\n                              case y of 0 \\<Rightarrow> m\n                              | Suc n \\<Rightarrow> e n)\n                          f \\<or>\n                         SEval (M, I) e s", "apply(drule_tac x=\"e(u:=m)\" in spec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>M I e m.\n       \\<lbrakk>u \\<notin> set (sfv (FAll f # s)); is_env (M, I) e;\n        m \\<in> M;\n        is_env (M, I) (e(u := m)) \\<longrightarrow>\n        SEval (M, I) (e(u := m)) s \\<or>\n        FEval (M, I) (case_nat ((e(u := m)) u) (e(u := m))) f\\<rbrakk>\n       \\<Longrightarrow> FEval (M, I)\n                          (\\<lambda>y.\n                              case y of 0 \\<Rightarrow> m\n                              | Suc n \\<Rightarrow> e n)\n                          f \\<or>\n                         SEval (M, I) e s", "apply(erule impE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>M I e m.\n       \\<lbrakk>u \\<notin> set (sfv (FAll f # s)); is_env (M, I) e;\n        m \\<in> M\\<rbrakk>\n       \\<Longrightarrow> is_env (M, I) (e(u := m))\n 2. \\<And>M I e m.\n       \\<lbrakk>u \\<notin> set (sfv (FAll f # s)); is_env (M, I) e;\n        m \\<in> M;\n        SEval (M, I) (e(u := m)) s \\<or>\n        FEval (M, I) (case_nat ((e(u := m)) u) (e(u := m))) f\\<rbrakk>\n       \\<Longrightarrow> FEval (M, I)\n                          (\\<lambda>y.\n                              case y of 0 \\<Rightarrow> m\n                              | Suc n \\<Rightarrow> e n)\n                          f \\<or>\n                         SEval (M, I) e s", "apply(simp add: is_env_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>M I e m.\n       \\<lbrakk>u \\<notin> set (sfv (FAll f # s)); is_env (M, I) e;\n        m \\<in> M;\n        SEval (M, I) (e(u := m)) s \\<or>\n        FEval (M, I) (case_nat ((e(u := m)) u) (e(u := m))) f\\<rbrakk>\n       \\<Longrightarrow> FEval (M, I)\n                          (\\<lambda>y.\n                              case y of 0 \\<Rightarrow> m\n                              | Suc n \\<Rightarrow> e n)\n                          f \\<or>\n                         SEval (M, I) e s", "apply(erule disjE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>M I e m.\n       \\<lbrakk>u \\<notin> set (sfv (FAll f # s)); is_env (M, I) e;\n        m \\<in> M; SEval (M, I) (e(u := m)) s\\<rbrakk>\n       \\<Longrightarrow> FEval (M, I)\n                          (\\<lambda>y.\n                              case y of 0 \\<Rightarrow> m\n                              | Suc n \\<Rightarrow> e n)\n                          f \\<or>\n                         SEval (M, I) e s\n 2. \\<And>M I e m.\n       \\<lbrakk>u \\<notin> set (sfv (FAll f # s)); is_env (M, I) e;\n        m \\<in> M;\n        FEval (M, I) (case_nat ((e(u := m)) u) (e(u := m))) f\\<rbrakk>\n       \\<Longrightarrow> FEval (M, I)\n                          (\\<lambda>y.\n                              case y of 0 \\<Rightarrow> m\n                              | Suc n \\<Rightarrow> e n)\n                          f \\<or>\n                         SEval (M, I) e s", "apply(rule disjI2)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>M I e m.\n       \\<lbrakk>u \\<notin> set (sfv (FAll f # s)); is_env (M, I) e;\n        m \\<in> M; SEval (M, I) (e(u := m)) s\\<rbrakk>\n       \\<Longrightarrow> SEval (M, I) e s\n 2. \\<And>M I e m.\n       \\<lbrakk>u \\<notin> set (sfv (FAll f # s)); is_env (M, I) e;\n        m \\<in> M;\n        FEval (M, I) (case_nat ((e(u := m)) u) (e(u := m))) f\\<rbrakk>\n       \\<Longrightarrow> FEval (M, I)\n                          (\\<lambda>y.\n                              case y of 0 \\<Rightarrow> m\n                              | Suc n \\<Rightarrow> e n)\n                          f \\<or>\n                         SEval (M, I) e s", "apply(subgoal_tac \"SEval (M,I) (e(u :=m)) s = SEval (M,I) e s\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>M I e m.\n       \\<lbrakk>u \\<notin> set (sfv (FAll f # s)); is_env (M, I) e;\n        m \\<in> M; SEval (M, I) (e(u := m)) s;\n        SEval (M, I) (e(u := m)) s = SEval (M, I) e s\\<rbrakk>\n       \\<Longrightarrow> SEval (M, I) e s\n 2. \\<And>M I e m.\n       \\<lbrakk>u \\<notin> set (sfv (FAll f # s)); is_env (M, I) e;\n        m \\<in> M; SEval (M, I) (e(u := m)) s\\<rbrakk>\n       \\<Longrightarrow> SEval (M, I) (e(u := m)) s = SEval (M, I) e s\n 3. \\<And>M I e m.\n       \\<lbrakk>u \\<notin> set (sfv (FAll f # s)); is_env (M, I) e;\n        m \\<in> M;\n        FEval (M, I) (case_nat ((e(u := m)) u) (e(u := m))) f\\<rbrakk>\n       \\<Longrightarrow> FEval (M, I)\n                          (\\<lambda>y.\n                              case y of 0 \\<Rightarrow> m\n                              | Suc n \\<Rightarrow> e n)\n                          f \\<or>\n                         SEval (M, I) e s", "apply(simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>M I e m.\n       \\<lbrakk>u \\<notin> set (sfv (FAll f # s)); is_env (M, I) e;\n        m \\<in> M; SEval (M, I) (e(u := m)) s\\<rbrakk>\n       \\<Longrightarrow> SEval (M, I) (e(u := m)) s = SEval (M, I) e s\n 2. \\<And>M I e m.\n       \\<lbrakk>u \\<notin> set (sfv (FAll f # s)); is_env (M, I) e;\n        m \\<in> M;\n        FEval (M, I) (case_nat ((e(u := m)) u) (e(u := m))) f\\<rbrakk>\n       \\<Longrightarrow> FEval (M, I)\n                          (\\<lambda>y.\n                              case y of 0 \\<Rightarrow> m\n                              | Suc n \\<Rightarrow> e n)\n                          f \\<or>\n                         SEval (M, I) e s", "apply(rule SEval_cong[rule_format])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>M I e m x.\n       \\<lbrakk>u \\<notin> set (sfv (FAll f # s)); is_env (M, I) e;\n        m \\<in> M; SEval (M, I) (e(u := m)) s; x \\<in> set (sfv s)\\<rbrakk>\n       \\<Longrightarrow> (e(u := m)) x = e x\n 2. \\<And>M I e m.\n       \\<lbrakk>u \\<notin> set (sfv (FAll f # s)); is_env (M, I) e;\n        m \\<in> M;\n        FEval (M, I) (case_nat ((e(u := m)) u) (e(u := m))) f\\<rbrakk>\n       \\<Longrightarrow> FEval (M, I)\n                          (\\<lambda>y.\n                              case y of 0 \\<Rightarrow> m\n                              | Suc n \\<Rightarrow> e n)\n                          f \\<or>\n                         SEval (M, I) e s", "apply(simp add: sfv_cons)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>M I e m x.\n       \\<lbrakk>u \\<notin> set (preSuc (fv f)) \\<and>\n                u \\<notin> set (sfv s);\n        is_env (M, I) e; m \\<in> M; SEval (M, I) (e(u := m)) s;\n        x \\<in> set (sfv s)\\<rbrakk>\n       \\<Longrightarrow> x = u \\<longrightarrow> m = e u\n 2. \\<And>M I e m.\n       \\<lbrakk>u \\<notin> set (sfv (FAll f # s)); is_env (M, I) e;\n        m \\<in> M;\n        FEval (M, I) (case_nat ((e(u := m)) u) (e(u := m))) f\\<rbrakk>\n       \\<Longrightarrow> FEval (M, I)\n                          (\\<lambda>y.\n                              case y of 0 \\<Rightarrow> m\n                              | Suc n \\<Rightarrow> e n)\n                          f \\<or>\n                         SEval (M, I) e s", "apply(force)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>M I e m.\n       \\<lbrakk>u \\<notin> set (sfv (FAll f # s)); is_env (M, I) e;\n        m \\<in> M;\n        FEval (M, I) (case_nat ((e(u := m)) u) (e(u := m))) f\\<rbrakk>\n       \\<Longrightarrow> FEval (M, I)\n                          (\\<lambda>y.\n                              case y of 0 \\<Rightarrow> m\n                              | Suc n \\<Rightarrow> e n)\n                          f \\<or>\n                         SEval (M, I) e s", "apply(rule disjI1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>M I e m.\n       \\<lbrakk>u \\<notin> set (sfv (FAll f # s)); is_env (M, I) e;\n        m \\<in> M;\n        FEval (M, I) (case_nat ((e(u := m)) u) (e(u := m))) f\\<rbrakk>\n       \\<Longrightarrow> FEval (M, I)\n                          (\\<lambda>y.\n                              case y of 0 \\<Rightarrow> m\n                              | Suc n \\<Rightarrow> e n)\n                          f", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>M I e m.\n       \\<lbrakk>u \\<notin> set (sfv (FAll f # s)); is_env (M, I) e;\n        m \\<in> M; FEval (M, I) (case_nat m (e(u := m))) f\\<rbrakk>\n       \\<Longrightarrow> FEval (M, I)\n                          (\\<lambda>y.\n                              case y of 0 \\<Rightarrow> m\n                              | Suc n \\<Rightarrow> e n)\n                          f", "apply(subgoal_tac \"FEval (M,I) (case_nat m (e(u :=m))) f = FEval (M,I) (case_nat m e) f\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>M I e m.\n       \\<lbrakk>u \\<notin> set (sfv (FAll f # s)); is_env (M, I) e;\n        m \\<in> M; FEval (M, I) (case_nat m (e(u := m))) f;\n        FEval (M, I) (case_nat m (e(u := m))) f =\n        FEval (M, I) (case_nat m e) f\\<rbrakk>\n       \\<Longrightarrow> FEval (M, I)\n                          (\\<lambda>y.\n                              case y of 0 \\<Rightarrow> m\n                              | Suc n \\<Rightarrow> e n)\n                          f\n 2. \\<And>M I e m.\n       \\<lbrakk>u \\<notin> set (sfv (FAll f # s)); is_env (M, I) e;\n        m \\<in> M; FEval (M, I) (case_nat m (e(u := m))) f\\<rbrakk>\n       \\<Longrightarrow> FEval (M, I) (case_nat m (e(u := m))) f =\n                         FEval (M, I) (case_nat m e) f", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>M I e m.\n       \\<lbrakk>u \\<notin> set (sfv (FAll f # s)); is_env (M, I) e;\n        m \\<in> M; FEval (M, I) (case_nat m (e(u := m))) f\\<rbrakk>\n       \\<Longrightarrow> FEval (M, I) (case_nat m (e(u := m))) f =\n                         FEval (M, I) (case_nat m e) f", "apply(rule FEval_cong[rule_format])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>M I e m x.\n       \\<lbrakk>u \\<notin> set (sfv (FAll f # s)); is_env (M, I) e;\n        m \\<in> M; FEval (M, I) (case_nat m (e(u := m))) f;\n        x \\<in> set (fv f)\\<rbrakk>\n       \\<Longrightarrow> (case x of 0 \\<Rightarrow> m\n                          | Suc x \\<Rightarrow> (e(u := m)) x) =\n                         (case x of 0 \\<Rightarrow> m\n                          | Suc x \\<Rightarrow> e x)", "apply(case_tac x, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>M I e m x nat.\n       \\<lbrakk>u \\<notin> set (sfv (FAll f # s)); is_env (M, I) e;\n        m \\<in> M; FEval (M, I) (case_nat m (e(u := m))) f;\n        x \\<in> set (fv f); x = Suc nat\\<rbrakk>\n       \\<Longrightarrow> (case x of 0 \\<Rightarrow> m\n                          | Suc x \\<Rightarrow> (e(u := m)) x) =\n                         (case x of 0 \\<Rightarrow> m\n                          | Suc x \\<Rightarrow> e x)", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>M I e m x nat.\n       \\<lbrakk>u \\<notin> set (sfv (FAll f # s)); is_env (M, I) e;\n        m \\<in> M; FEval (M, I) (case_nat m (e(u := m))) f;\n        nat \\<in> set (preSuc (fv f)); x = Suc nat\\<rbrakk>\n       \\<Longrightarrow> nat = u \\<longrightarrow> m = e u", "apply(simp only: preSuc[rule_format, symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>M I e m x nat.\n       \\<lbrakk>u \\<notin> set (sfv (FAll f # s)); is_env (M, I) e;\n        m \\<in> M; FEval (M, I) (case_nat m (e(u := m))) f;\n        Suc nat \\<in> set (fv f); x = Suc nat\\<rbrakk>\n       \\<Longrightarrow> nat = u \\<longrightarrow> m = e u", "apply(subgoal_tac \"nat \\<in> set (fv (FAll f))\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>M I e m x nat.\n       \\<lbrakk>u \\<notin> set (sfv (FAll f # s)); is_env (M, I) e;\n        m \\<in> M; FEval (M, I) (case_nat m (e(u := m))) f;\n        Suc nat \\<in> set (fv f); x = Suc nat;\n        nat \\<in> set (fv (FAll f))\\<rbrakk>\n       \\<Longrightarrow> nat = u \\<longrightarrow> m = e u\n 2. \\<And>M I e m x nat.\n       \\<lbrakk>u \\<notin> set (sfv (FAll f # s)); is_env (M, I) e;\n        m \\<in> M; FEval (M, I) (case_nat m (e(u := m))) f;\n        Suc nat \\<in> set (fv f); x = Suc nat\\<rbrakk>\n       \\<Longrightarrow> nat \\<in> set (fv (FAll f))", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>M I e m x nat.\n       \\<lbrakk>u \\<notin> set (sfv (FAll f # s)); is_env (M, I) e;\n        m \\<in> M; FEval (M, I) (case_nat m (e(u := m))) f;\n        Suc nat \\<in> set (fv f); x = Suc nat\\<rbrakk>\n       \\<Longrightarrow> nat \\<in> set (fv (FAll f))\n 2. \\<And>M I e m x nat.\n       \\<lbrakk>u \\<notin> set (sfv (FAll f # s)); is_env (M, I) e;\n        m \\<in> M; FEval (M, I) (case_nat m (e(u := m))) f;\n        Suc nat \\<in> set (fv f); x = Suc nat;\n        nat \\<in> set (fv (FAll f))\\<rbrakk>\n       \\<Longrightarrow> nat = u \\<longrightarrow> m = e u", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>M I e m x nat.\n       \\<lbrakk>u \\<notin> set (sfv (FAll f # s)); is_env (M, I) e;\n        m \\<in> M; FEval (M, I) (case_nat m (e(u := m))) f;\n        Suc nat \\<in> set (fv f); x = Suc nat;\n        nat \\<in> set (fv (FAll f))\\<rbrakk>\n       \\<Longrightarrow> nat = u \\<longrightarrow> m = e u", "apply(force simp: sfv_cons)"], ["proof (prove)\ngoal:\nNo subgoals!", "done\n    \\<comment> \\<open>phew, that really was a bit more difficult than expected\\<close>\n    \\<comment> \\<open>note that we can avoid maxscoping at the cost of instantiating the hyp twice- an additional time for M\\<close>\n\n    \\<comment> \\<open>different proof, instantiating quantifier twice, avoiding maxscoping\\<close>"], ["", "lemma sound_FAll': \"u \\<notin> set (sfv (FAll f#s)) ==> Svalid (s@[finst f u]) ==> Svalid (FAll f#s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>u \\<notin> set (sfv (FAll f # s));\n     Svalid (s @ [finst f u])\\<rbrakk>\n    \\<Longrightarrow> Svalid (FAll f # s)", "apply(simp add: Svalid_def del: SEval.simps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>u \\<notin> set (sfv (FAll f # s));\n     \\<forall>a b e.\n        is_env (a, b) e \\<longrightarrow>\n        SEval (a, b) e (s @ [finst f u])\\<rbrakk>\n    \\<Longrightarrow> \\<forall>a b e.\n                         is_env (a, b) e \\<longrightarrow>\n                         SEval (a, b) e (FAll f # s)", "apply(rule allI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>u \\<notin> set (sfv (FAll f # s));\n        \\<forall>a b e.\n           is_env (a, b) e \\<longrightarrow>\n           SEval (a, b) e (s @ [finst f u])\\<rbrakk>\n       \\<Longrightarrow> \\<forall>b e.\n                            is_env (a, b) e \\<longrightarrow>\n                            SEval (a, b) e (FAll f # s)", "apply(rule allI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>u \\<notin> set (sfv (FAll f # s));\n        \\<forall>a b e.\n           is_env (a, b) e \\<longrightarrow>\n           SEval (a, b) e (s @ [finst f u])\\<rbrakk>\n       \\<Longrightarrow> \\<forall>e.\n                            is_env (a, b) e \\<longrightarrow>\n                            SEval (a, b) e (FAll f # s)", "apply(rename_tac M I)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>M I.\n       \\<lbrakk>u \\<notin> set (sfv (FAll f # s));\n        \\<forall>a b e.\n           is_env (a, b) e \\<longrightarrow>\n           SEval (a, b) e (s @ [finst f u])\\<rbrakk>\n       \\<Longrightarrow> \\<forall>e.\n                            is_env (M, I) e \\<longrightarrow>\n                            SEval (M, I) e (FAll f # s)", "apply(rule allI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>M I e.\n       \\<lbrakk>u \\<notin> set (sfv (FAll f # s));\n        \\<forall>a b e.\n           is_env (a, b) e \\<longrightarrow>\n           SEval (a, b) e (s @ [finst f u])\\<rbrakk>\n       \\<Longrightarrow> is_env (M, I) e \\<longrightarrow>\n                         SEval (M, I) e (FAll f # s)", "apply(rule)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>M I e.\n       \\<lbrakk>u \\<notin> set (sfv (FAll f # s));\n        \\<forall>a b e.\n           is_env (a, b) e \\<longrightarrow>\n           SEval (a, b) e (s @ [finst f u]);\n        is_env (M, I) e\\<rbrakk>\n       \\<Longrightarrow> SEval (M, I) e (FAll f # s)", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>M I e.\n       \\<lbrakk>u \\<notin> set (sfv (FAll f # s));\n        \\<forall>a b e.\n           is_env (a, b) e \\<longrightarrow>\n           SEval (a, b) e (s @ [finst f u]);\n        is_env (M, I) e\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>m\\<in>M.\n                             FEval (M, I)\n                              (\\<lambda>y.\n                                  case y of 0 \\<Rightarrow> m\n                                  | Suc n \\<Rightarrow> e n)\n                              f) \\<or>\n                         SEval (M, I) e s", "apply(simp add: SEval_append)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>M I e.\n       \\<lbrakk>u \\<notin> set (sfv (FAll f # s));\n        \\<forall>a b e.\n           is_env (a, b) e \\<longrightarrow>\n           SEval (a, b) e s \\<or> FEval (a, b) e (finst f u);\n        is_env (M, I) e\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>m\\<in>M.\n                             FEval (M, I)\n                              (\\<lambda>y.\n                                  case y of 0 \\<Rightarrow> m\n                                  | Suc n \\<Rightarrow> e n)\n                              f) \\<or>\n                         SEval (M, I) e s", "apply(drule_tac x=M in spec, drule_tac x=I in spec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>M I e.\n       \\<lbrakk>u \\<notin> set (sfv (FAll f # s)); is_env (M, I) e;\n        \\<forall>e.\n           is_env (M, I) e \\<longrightarrow>\n           SEval (M, I) e s \\<or> FEval (M, I) e (finst f u)\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>m\\<in>M.\n                             FEval (M, I)\n                              (\\<lambda>y.\n                                  case y of 0 \\<Rightarrow> m\n                                  | Suc n \\<Rightarrow> e n)\n                              f) \\<or>\n                         SEval (M, I) e s", "apply(frule_tac x=\"e\" in spec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>M I e.\n       \\<lbrakk>u \\<notin> set (sfv (FAll f # s)); is_env (M, I) e;\n        \\<forall>e.\n           is_env (M, I) e \\<longrightarrow>\n           SEval (M, I) e s \\<or> FEval (M, I) e (finst f u);\n        is_env (M, I) e \\<longrightarrow>\n        SEval (M, I) e s \\<or> FEval (M, I) e (finst f u)\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>m\\<in>M.\n                             FEval (M, I)\n                              (\\<lambda>y.\n                                  case y of 0 \\<Rightarrow> m\n                                  | Suc n \\<Rightarrow> e n)\n                              f) \\<or>\n                         SEval (M, I) e s", "apply(erule impE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>M I e.\n       \\<lbrakk>u \\<notin> set (sfv (FAll f # s)); is_env (M, I) e;\n        \\<forall>e.\n           is_env (M, I) e \\<longrightarrow>\n           SEval (M, I) e s \\<or> FEval (M, I) e (finst f u)\\<rbrakk>\n       \\<Longrightarrow> is_env (M, I) e\n 2. \\<And>M I e.\n       \\<lbrakk>u \\<notin> set (sfv (FAll f # s)); is_env (M, I) e;\n        \\<forall>e.\n           is_env (M, I) e \\<longrightarrow>\n           SEval (M, I) e s \\<or> FEval (M, I) e (finst f u);\n        SEval (M, I) e s \\<or> FEval (M, I) e (finst f u)\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>m\\<in>M.\n                             FEval (M, I)\n                              (\\<lambda>y.\n                                  case y of 0 \\<Rightarrow> m\n                                  | Suc n \\<Rightarrow> e n)\n                              f) \\<or>\n                         SEval (M, I) e s", "apply(simp add: is_env_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>M I e.\n       \\<lbrakk>u \\<notin> set (sfv (FAll f # s)); is_env (M, I) e;\n        \\<forall>e.\n           is_env (M, I) e \\<longrightarrow>\n           SEval (M, I) e s \\<or> FEval (M, I) e (finst f u);\n        SEval (M, I) e s \\<or> FEval (M, I) e (finst f u)\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>m\\<in>M.\n                             FEval (M, I)\n                              (\\<lambda>y.\n                                  case y of 0 \\<Rightarrow> m\n                                  | Suc n \\<Rightarrow> e n)\n                              f) \\<or>\n                         SEval (M, I) e s", "apply(case_tac \"SEval (M, I) e s\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>M I e.\n       \\<lbrakk>u \\<notin> set (sfv (FAll f # s)); is_env (M, I) e;\n        \\<forall>e.\n           is_env (M, I) e \\<longrightarrow>\n           SEval (M, I) e s \\<or> FEval (M, I) e (finst f u);\n        SEval (M, I) e s \\<or> FEval (M, I) e (finst f u);\n        SEval (M, I) e s\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>m\\<in>M.\n                             FEval (M, I)\n                              (\\<lambda>y.\n                                  case y of 0 \\<Rightarrow> m\n                                  | Suc n \\<Rightarrow> e n)\n                              f) \\<or>\n                         SEval (M, I) e s\n 2. \\<And>M I e.\n       \\<lbrakk>u \\<notin> set (sfv (FAll f # s)); is_env (M, I) e;\n        \\<forall>e.\n           is_env (M, I) e \\<longrightarrow>\n           SEval (M, I) e s \\<or> FEval (M, I) e (finst f u);\n        SEval (M, I) e s \\<or> FEval (M, I) e (finst f u);\n        \\<not> SEval (M, I) e s\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>m\\<in>M.\n                             FEval (M, I)\n                              (\\<lambda>y.\n                                  case y of 0 \\<Rightarrow> m\n                                  | Suc n \\<Rightarrow> e n)\n                              f) \\<or>\n                         SEval (M, I) e s", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>M I e.\n       \\<lbrakk>u \\<notin> set (sfv (FAll f # s)); is_env (M, I) e;\n        \\<forall>e.\n           is_env (M, I) e \\<longrightarrow>\n           SEval (M, I) e s \\<or> FEval (M, I) e (finst f u);\n        SEval (M, I) e s \\<or> FEval (M, I) e (finst f u);\n        \\<not> SEval (M, I) e s\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>m\\<in>M.\n                             FEval (M, I)\n                              (\\<lambda>y.\n                                  case y of 0 \\<Rightarrow> m\n                                  | Suc n \\<Rightarrow> e n)\n                              f) \\<or>\n                         SEval (M, I) e s", "apply(simp)\n    \\<comment> \\<open>second instantiation\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>M I e.\n       \\<lbrakk>u \\<notin> set (sfv (FAll f # s)); is_env (M, I) e;\n        \\<forall>e.\n           is_env (M, I) e \\<longrightarrow>\n           SEval (M, I) e s \\<or> FEval (M, I) e (finst f u);\n        FEval (M, I) e (finst f u); \\<not> SEval (M, I) e s\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m\\<in>M. FEval (M, I) (case_nat m e) f", "apply(simp add: FEval_finst)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>M I e.\n       \\<lbrakk>u \\<notin> set (sfv (FAll f # s)); is_env (M, I) e;\n        \\<forall>e.\n           is_env (M, I) e \\<longrightarrow>\n           SEval (M, I) e s \\<or> FEval (M, I) (case_nat (e u) e) f;\n        FEval (M, I) (case_nat (e u) e) f; \\<not> SEval (M, I) e s\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m\\<in>M. FEval (M, I) (case_nat m e) f", "apply(rule)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>M I e m.\n       \\<lbrakk>u \\<notin> set (sfv (FAll f # s)); is_env (M, I) e;\n        \\<forall>e.\n           is_env (M, I) e \\<longrightarrow>\n           SEval (M, I) e s \\<or> FEval (M, I) (case_nat (e u) e) f;\n        FEval (M, I) (case_nat (e u) e) f; \\<not> SEval (M, I) e s;\n        m \\<in> M\\<rbrakk>\n       \\<Longrightarrow> FEval (M, I) (case_nat m e) f", "apply(drule_tac x=\"e(u:=m)\" in spec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>M I e m.\n       \\<lbrakk>u \\<notin> set (sfv (FAll f # s)); is_env (M, I) e;\n        FEval (M, I) (case_nat (e u) e) f; \\<not> SEval (M, I) e s;\n        m \\<in> M;\n        is_env (M, I) (e(u := m)) \\<longrightarrow>\n        SEval (M, I) (e(u := m)) s \\<or>\n        FEval (M, I) (case_nat ((e(u := m)) u) (e(u := m))) f\\<rbrakk>\n       \\<Longrightarrow> FEval (M, I) (case_nat m e) f", "apply(erule impE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>M I e m.\n       \\<lbrakk>u \\<notin> set (sfv (FAll f # s)); is_env (M, I) e;\n        FEval (M, I) (case_nat (e u) e) f; \\<not> SEval (M, I) e s;\n        m \\<in> M\\<rbrakk>\n       \\<Longrightarrow> is_env (M, I) (e(u := m))\n 2. \\<And>M I e m.\n       \\<lbrakk>u \\<notin> set (sfv (FAll f # s)); is_env (M, I) e;\n        FEval (M, I) (case_nat (e u) e) f; \\<not> SEval (M, I) e s;\n        m \\<in> M;\n        SEval (M, I) (e(u := m)) s \\<or>\n        FEval (M, I) (case_nat ((e(u := m)) u) (e(u := m))) f\\<rbrakk>\n       \\<Longrightarrow> FEval (M, I) (case_nat m e) f", "apply(simp add: is_env_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>M I e m.\n       \\<lbrakk>u \\<notin> set (sfv (FAll f # s)); is_env (M, I) e;\n        FEval (M, I) (case_nat (e u) e) f; \\<not> SEval (M, I) e s;\n        m \\<in> M;\n        SEval (M, I) (e(u := m)) s \\<or>\n        FEval (M, I) (case_nat ((e(u := m)) u) (e(u := m))) f\\<rbrakk>\n       \\<Longrightarrow> FEval (M, I) (case_nat m e) f", "apply(erule disjE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>M I e m.\n       \\<lbrakk>u \\<notin> set (sfv (FAll f # s)); is_env (M, I) e;\n        FEval (M, I) (case_nat (e u) e) f; \\<not> SEval (M, I) e s;\n        m \\<in> M; SEval (M, I) (e(u := m)) s\\<rbrakk>\n       \\<Longrightarrow> FEval (M, I) (case_nat m e) f\n 2. \\<And>M I e m.\n       \\<lbrakk>u \\<notin> set (sfv (FAll f # s)); is_env (M, I) e;\n        FEval (M, I) (case_nat (e u) e) f; \\<not> SEval (M, I) e s;\n        m \\<in> M;\n        FEval (M, I) (case_nat ((e(u := m)) u) (e(u := m))) f\\<rbrakk>\n       \\<Longrightarrow> FEval (M, I) (case_nat m e) f", "apply(subgoal_tac \"SEval (M,I) (e(u :=m)) s = SEval (M,I) e s\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>M I e m.\n       \\<lbrakk>u \\<notin> set (sfv (FAll f # s)); is_env (M, I) e;\n        FEval (M, I) (case_nat (e u) e) f; \\<not> SEval (M, I) e s;\n        m \\<in> M; SEval (M, I) (e(u := m)) s;\n        SEval (M, I) (e(u := m)) s = SEval (M, I) e s\\<rbrakk>\n       \\<Longrightarrow> FEval (M, I) (case_nat m e) f\n 2. \\<And>M I e m.\n       \\<lbrakk>u \\<notin> set (sfv (FAll f # s)); is_env (M, I) e;\n        FEval (M, I) (case_nat (e u) e) f; \\<not> SEval (M, I) e s;\n        m \\<in> M; SEval (M, I) (e(u := m)) s\\<rbrakk>\n       \\<Longrightarrow> SEval (M, I) (e(u := m)) s = SEval (M, I) e s\n 3. \\<And>M I e m.\n       \\<lbrakk>u \\<notin> set (sfv (FAll f # s)); is_env (M, I) e;\n        FEval (M, I) (case_nat (e u) e) f; \\<not> SEval (M, I) e s;\n        m \\<in> M;\n        FEval (M, I) (case_nat ((e(u := m)) u) (e(u := m))) f\\<rbrakk>\n       \\<Longrightarrow> FEval (M, I) (case_nat m e) f", "apply(simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>M I e m.\n       \\<lbrakk>u \\<notin> set (sfv (FAll f # s)); is_env (M, I) e;\n        FEval (M, I) (case_nat (e u) e) f; \\<not> SEval (M, I) e s;\n        m \\<in> M; SEval (M, I) (e(u := m)) s\\<rbrakk>\n       \\<Longrightarrow> SEval (M, I) (e(u := m)) s = SEval (M, I) e s\n 2. \\<And>M I e m.\n       \\<lbrakk>u \\<notin> set (sfv (FAll f # s)); is_env (M, I) e;\n        FEval (M, I) (case_nat (e u) e) f; \\<not> SEval (M, I) e s;\n        m \\<in> M;\n        FEval (M, I) (case_nat ((e(u := m)) u) (e(u := m))) f\\<rbrakk>\n       \\<Longrightarrow> FEval (M, I) (case_nat m e) f", "apply(rule SEval_cong[rule_format])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>M I e m x.\n       \\<lbrakk>u \\<notin> set (sfv (FAll f # s)); is_env (M, I) e;\n        FEval (M, I) (case_nat (e u) e) f; \\<not> SEval (M, I) e s;\n        m \\<in> M; SEval (M, I) (e(u := m)) s; x \\<in> set (sfv s)\\<rbrakk>\n       \\<Longrightarrow> (e(u := m)) x = e x\n 2. \\<And>M I e m.\n       \\<lbrakk>u \\<notin> set (sfv (FAll f # s)); is_env (M, I) e;\n        FEval (M, I) (case_nat (e u) e) f; \\<not> SEval (M, I) e s;\n        m \\<in> M;\n        FEval (M, I) (case_nat ((e(u := m)) u) (e(u := m))) f\\<rbrakk>\n       \\<Longrightarrow> FEval (M, I) (case_nat m e) f", "apply(simp add: sfv_cons)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>M I e m x.\n       \\<lbrakk>u \\<notin> set (preSuc (fv f)) \\<and>\n                u \\<notin> set (sfv s);\n        is_env (M, I) e; FEval (M, I) (case_nat (e u) e) f;\n        \\<not> SEval (M, I) e s; m \\<in> M; SEval (M, I) (e(u := m)) s;\n        x \\<in> set (sfv s)\\<rbrakk>\n       \\<Longrightarrow> x = u \\<longrightarrow> m = e u\n 2. \\<And>M I e m.\n       \\<lbrakk>u \\<notin> set (sfv (FAll f # s)); is_env (M, I) e;\n        FEval (M, I) (case_nat (e u) e) f; \\<not> SEval (M, I) e s;\n        m \\<in> M;\n        FEval (M, I) (case_nat ((e(u := m)) u) (e(u := m))) f\\<rbrakk>\n       \\<Longrightarrow> FEval (M, I) (case_nat m e) f", "apply(force)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>M I e m.\n       \\<lbrakk>u \\<notin> set (sfv (FAll f # s)); is_env (M, I) e;\n        FEval (M, I) (case_nat (e u) e) f; \\<not> SEval (M, I) e s;\n        m \\<in> M;\n        FEval (M, I) (case_nat ((e(u := m)) u) (e(u := m))) f\\<rbrakk>\n       \\<Longrightarrow> FEval (M, I) (case_nat m e) f", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>M I e m.\n       \\<lbrakk>u \\<notin> set (sfv (FAll f # s)); is_env (M, I) e;\n        FEval (M, I) (case_nat (e u) e) f; \\<not> SEval (M, I) e s;\n        m \\<in> M; FEval (M, I) (case_nat m (e(u := m))) f\\<rbrakk>\n       \\<Longrightarrow> FEval (M, I) (case_nat m e) f", "apply(subgoal_tac \"FEval (M,I) (case_nat m (e(u :=m))) f = FEval (M,I) (case_nat m e) f\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>M I e m.\n       \\<lbrakk>u \\<notin> set (sfv (FAll f # s)); is_env (M, I) e;\n        FEval (M, I) (case_nat (e u) e) f; \\<not> SEval (M, I) e s;\n        m \\<in> M; FEval (M, I) (case_nat m (e(u := m))) f;\n        FEval (M, I) (case_nat m (e(u := m))) f =\n        FEval (M, I) (case_nat m e) f\\<rbrakk>\n       \\<Longrightarrow> FEval (M, I) (case_nat m e) f\n 2. \\<And>M I e m.\n       \\<lbrakk>u \\<notin> set (sfv (FAll f # s)); is_env (M, I) e;\n        FEval (M, I) (case_nat (e u) e) f; \\<not> SEval (M, I) e s;\n        m \\<in> M; FEval (M, I) (case_nat m (e(u := m))) f\\<rbrakk>\n       \\<Longrightarrow> FEval (M, I) (case_nat m (e(u := m))) f =\n                         FEval (M, I) (case_nat m e) f", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>M I e m.\n       \\<lbrakk>u \\<notin> set (sfv (FAll f # s)); is_env (M, I) e;\n        FEval (M, I) (case_nat (e u) e) f; \\<not> SEval (M, I) e s;\n        m \\<in> M; FEval (M, I) (case_nat m (e(u := m))) f\\<rbrakk>\n       \\<Longrightarrow> FEval (M, I) (case_nat m (e(u := m))) f =\n                         FEval (M, I) (case_nat m e) f", "apply(rule FEval_cong[rule_format])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>M I e m x.\n       \\<lbrakk>u \\<notin> set (sfv (FAll f # s)); is_env (M, I) e;\n        FEval (M, I) (case_nat (e u) e) f; \\<not> SEval (M, I) e s;\n        m \\<in> M; FEval (M, I) (case_nat m (e(u := m))) f;\n        x \\<in> set (fv f)\\<rbrakk>\n       \\<Longrightarrow> (case x of 0 \\<Rightarrow> m\n                          | Suc x \\<Rightarrow> (e(u := m)) x) =\n                         (case x of 0 \\<Rightarrow> m\n                          | Suc x \\<Rightarrow> e x)", "apply(case_tac x, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>M I e m x nat.\n       \\<lbrakk>u \\<notin> set (sfv (FAll f # s)); is_env (M, I) e;\n        FEval (M, I) (case_nat (e u) e) f; \\<not> SEval (M, I) e s;\n        m \\<in> M; FEval (M, I) (case_nat m (e(u := m))) f;\n        x \\<in> set (fv f); x = Suc nat\\<rbrakk>\n       \\<Longrightarrow> (case x of 0 \\<Rightarrow> m\n                          | Suc x \\<Rightarrow> (e(u := m)) x) =\n                         (case x of 0 \\<Rightarrow> m\n                          | Suc x \\<Rightarrow> e x)", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>M I e m x nat.\n       \\<lbrakk>u \\<notin> set (sfv (FAll f # s)); is_env (M, I) e;\n        FEval (M, I) (case_nat (e u) e) f; \\<not> SEval (M, I) e s;\n        m \\<in> M; FEval (M, I) (case_nat m (e(u := m))) f;\n        nat \\<in> set (preSuc (fv f)); x = Suc nat\\<rbrakk>\n       \\<Longrightarrow> nat = u \\<longrightarrow> m = e u", "apply(simp only: preSuc[rule_format, symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>M I e m x nat.\n       \\<lbrakk>u \\<notin> set (sfv (FAll f # s)); is_env (M, I) e;\n        FEval (M, I) (case_nat (e u) e) f; \\<not> SEval (M, I) e s;\n        m \\<in> M; FEval (M, I) (case_nat m (e(u := m))) f;\n        Suc nat \\<in> set (fv f); x = Suc nat\\<rbrakk>\n       \\<Longrightarrow> nat = u \\<longrightarrow> m = e u", "apply(subgoal_tac \"nat \\<in> set (fv (FAll f))\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>M I e m x nat.\n       \\<lbrakk>u \\<notin> set (sfv (FAll f # s)); is_env (M, I) e;\n        FEval (M, I) (case_nat (e u) e) f; \\<not> SEval (M, I) e s;\n        m \\<in> M; FEval (M, I) (case_nat m (e(u := m))) f;\n        Suc nat \\<in> set (fv f); x = Suc nat;\n        nat \\<in> set (fv (FAll f))\\<rbrakk>\n       \\<Longrightarrow> nat = u \\<longrightarrow> m = e u\n 2. \\<And>M I e m x nat.\n       \\<lbrakk>u \\<notin> set (sfv (FAll f # s)); is_env (M, I) e;\n        FEval (M, I) (case_nat (e u) e) f; \\<not> SEval (M, I) e s;\n        m \\<in> M; FEval (M, I) (case_nat m (e(u := m))) f;\n        Suc nat \\<in> set (fv f); x = Suc nat\\<rbrakk>\n       \\<Longrightarrow> nat \\<in> set (fv (FAll f))", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>M I e m x nat.\n       \\<lbrakk>u \\<notin> set (sfv (FAll f # s)); is_env (M, I) e;\n        FEval (M, I) (case_nat (e u) e) f; \\<not> SEval (M, I) e s;\n        m \\<in> M; FEval (M, I) (case_nat m (e(u := m))) f;\n        Suc nat \\<in> set (fv f); x = Suc nat\\<rbrakk>\n       \\<Longrightarrow> nat \\<in> set (fv (FAll f))\n 2. \\<And>M I e m x nat.\n       \\<lbrakk>u \\<notin> set (sfv (FAll f # s)); is_env (M, I) e;\n        FEval (M, I) (case_nat (e u) e) f; \\<not> SEval (M, I) e s;\n        m \\<in> M; FEval (M, I) (case_nat m (e(u := m))) f;\n        Suc nat \\<in> set (fv f); x = Suc nat;\n        nat \\<in> set (fv (FAll f))\\<rbrakk>\n       \\<Longrightarrow> nat = u \\<longrightarrow> m = e u", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>M I e m x nat.\n       \\<lbrakk>u \\<notin> set (sfv (FAll f # s)); is_env (M, I) e;\n        FEval (M, I) (case_nat (e u) e) f; \\<not> SEval (M, I) e s;\n        m \\<in> M; FEval (M, I) (case_nat m (e(u := m))) f;\n        Suc nat \\<in> set (fv f); x = Suc nat;\n        nat \\<in> set (fv (FAll f))\\<rbrakk>\n       \\<Longrightarrow> nat = u \\<longrightarrow> m = e u", "apply(force simp: sfv_cons)"], ["proof (prove)\ngoal:\nNo subgoals!", "done\n    \\<comment> \\<open>not much better, probably slightly worse\\<close>"], ["", "(*\nlemma sound_FAll: \"u \\<notin> sfv ((0,FAll f)#s) ==> SEval m e (map snd (s@[(0,finst u f)])) ==> SEval m e (map snd ((0,FAll f)#s))\"\n  apply(simp)\n  apply(rule all_maxscope)\n  apply(rule)\n  apply(simp add: SEval_append)\n  apply(erule disjE)\n  apply(simp)\n  apply(rule disjI1)\n  apply(simp add: FEval_finst)\n  apply(subgoal_tac \"FEval m (case_nat (e u) e) f = FEval m (case_nat x e) f\") apply(simp)\n  apply(rule FEval_cong[rule_format])\n  apply(case_tac xa)\n  apply(simp)\n  oops -- \"and this isn't provable- the heart of the rules-preserve-validity debate\"\n*)"], ["", "lemma sound_FEx: \"Svalid (s@[finst f u,FEx f]) ==> Svalid (FEx f#s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Svalid (s @ [finst f u, FEx f]) \\<Longrightarrow> Svalid (FEx f # s)", "apply(simp add: Svalid_def del: SEval.simps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>a b e.\n       is_env (a, b) e \\<longrightarrow>\n       SEval (a, b) e (s @ [finst f u, FEx f]) \\<Longrightarrow>\n    \\<forall>a b e.\n       is_env (a, b) e \\<longrightarrow> SEval (a, b) e (FEx f # s)", "apply(rule allI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<forall>a b e.\n          is_env (a, b) e \\<longrightarrow>\n          SEval (a, b) e (s @ [finst f u, FEx f]) \\<Longrightarrow>\n       \\<forall>b e.\n          is_env (a, b) e \\<longrightarrow> SEval (a, b) e (FEx f # s)", "apply(rule allI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<forall>a b e.\n          is_env (a, b) e \\<longrightarrow>\n          SEval (a, b) e (s @ [finst f u, FEx f]) \\<Longrightarrow>\n       \\<forall>e.\n          is_env (a, b) e \\<longrightarrow> SEval (a, b) e (FEx f # s)", "apply(rename_tac ms m)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ms m.\n       \\<forall>a b e.\n          is_env (a, b) e \\<longrightarrow>\n          SEval (a, b) e (s @ [finst f u, FEx f]) \\<Longrightarrow>\n       \\<forall>e.\n          is_env (ms, m) e \\<longrightarrow> SEval (ms, m) e (FEx f # s)", "apply(rule)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ms m e.\n       \\<forall>a b e.\n          is_env (a, b) e \\<longrightarrow>\n          SEval (a, b) e (s @ [finst f u, FEx f]) \\<Longrightarrow>\n       is_env (ms, m) e \\<longrightarrow> SEval (ms, m) e (FEx f # s)", "apply(rule)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ms m e.\n       \\<lbrakk>\\<forall>a b e.\n                   is_env (a, b) e \\<longrightarrow>\n                   SEval (a, b) e (s @ [finst f u, FEx f]);\n        is_env (ms, m) e\\<rbrakk>\n       \\<Longrightarrow> SEval (ms, m) e (FEx f # s)", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ms m e.\n       \\<lbrakk>\\<forall>a b e.\n                   is_env (a, b) e \\<longrightarrow>\n                   SEval (a, b) e (s @ [finst f u, FEx f]);\n        is_env (ms, m) e\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>ma\\<in>ms.\n                             FEval (ms, m)\n                              (\\<lambda>y.\n                                  case y of 0 \\<Rightarrow> ma\n                                  | Suc n \\<Rightarrow> e n)\n                              f) \\<or>\n                         SEval (ms, m) e s", "apply(simp add: SEval_append)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ms m e.\n       \\<lbrakk>\\<forall>a b e.\n                   is_env (a, b) e \\<longrightarrow>\n                   SEval (a, b) e s \\<or>\n                   FEval (a, b) e (finst f u) \\<or>\n                   (\\<exists>m\\<in>a. FEval (a, b) (case_nat m e) f);\n        is_env (ms, m) e\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>ma\\<in>ms.\n                             FEval (ms, m)\n                              (\\<lambda>y.\n                                  case y of 0 \\<Rightarrow> ma\n                                  | Suc n \\<Rightarrow> e n)\n                              f) \\<or>\n                         SEval (ms, m) e s", "apply(simp add: FEval_finst)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ms m e.\n       \\<lbrakk>\\<forall>a b e.\n                   is_env (a, b) e \\<longrightarrow>\n                   SEval (a, b) e s \\<or>\n                   FEval (a, b) (case_nat (e u) e) f \\<or>\n                   (\\<exists>m\\<in>a. FEval (a, b) (case_nat m e) f);\n        is_env (ms, m) e\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>ma\\<in>ms.\n                             FEval (ms, m)\n                              (\\<lambda>y.\n                                  case y of 0 \\<Rightarrow> ma\n                                  | Suc n \\<Rightarrow> e n)\n                              f) \\<or>\n                         SEval (ms, m) e s", "apply(drule_tac x=ms in spec, drule_tac x=m in spec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ms m e.\n       \\<lbrakk>is_env (ms, m) e;\n        \\<forall>e.\n           is_env (ms, m) e \\<longrightarrow>\n           SEval (ms, m) e s \\<or>\n           FEval (ms, m) (case_nat (e u) e) f \\<or>\n           (\\<exists>ma\\<in>ms. FEval (ms, m) (case_nat ma e) f)\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>ma\\<in>ms.\n                             FEval (ms, m)\n                              (\\<lambda>y.\n                                  case y of 0 \\<Rightarrow> ma\n                                  | Suc n \\<Rightarrow> e n)\n                              f) \\<or>\n                         SEval (ms, m) e s", "apply(drule_tac x=e in spec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ms m e.\n       \\<lbrakk>is_env (ms, m) e;\n        is_env (ms, m) e \\<longrightarrow>\n        SEval (ms, m) e s \\<or>\n        FEval (ms, m) (case_nat (e u) e) f \\<or>\n        (\\<exists>ma\\<in>ms. FEval (ms, m) (case_nat ma e) f)\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>ma\\<in>ms.\n                             FEval (ms, m)\n                              (\\<lambda>y.\n                                  case y of 0 \\<Rightarrow> ma\n                                  | Suc n \\<Rightarrow> e n)\n                              f) \\<or>\n                         SEval (ms, m) e s", "apply(erule impE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>ms m e. is_env (ms, m) e \\<Longrightarrow> is_env (ms, m) e\n 2. \\<And>ms m e.\n       \\<lbrakk>is_env (ms, m) e;\n        SEval (ms, m) e s \\<or>\n        FEval (ms, m) (case_nat (e u) e) f \\<or>\n        (\\<exists>ma\\<in>ms. FEval (ms, m) (case_nat ma e) f)\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>ma\\<in>ms.\n                             FEval (ms, m)\n                              (\\<lambda>y.\n                                  case y of 0 \\<Rightarrow> ma\n                                  | Suc n \\<Rightarrow> e n)\n                              f) \\<or>\n                         SEval (ms, m) e s", "apply(assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ms m e.\n       \\<lbrakk>is_env (ms, m) e;\n        SEval (ms, m) e s \\<or>\n        FEval (ms, m) (case_nat (e u) e) f \\<or>\n        (\\<exists>ma\\<in>ms. FEval (ms, m) (case_nat ma e) f)\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>ma\\<in>ms.\n                             FEval (ms, m)\n                              (\\<lambda>y.\n                                  case y of 0 \\<Rightarrow> ma\n                                  | Suc n \\<Rightarrow> e n)\n                              f) \\<or>\n                         SEval (ms, m) e s", "apply(erule disjE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>ms m e.\n       \\<lbrakk>is_env (ms, m) e; SEval (ms, m) e s\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>ma\\<in>ms.\n                             FEval (ms, m)\n                              (\\<lambda>y.\n                                  case y of 0 \\<Rightarrow> ma\n                                  | Suc n \\<Rightarrow> e n)\n                              f) \\<or>\n                         SEval (ms, m) e s\n 2. \\<And>ms m e.\n       \\<lbrakk>is_env (ms, m) e;\n        FEval (ms, m) (case_nat (e u) e) f \\<or>\n        (\\<exists>ma\\<in>ms. FEval (ms, m) (case_nat ma e) f)\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>ma\\<in>ms.\n                             FEval (ms, m)\n                              (\\<lambda>y.\n                                  case y of 0 \\<Rightarrow> ma\n                                  | Suc n \\<Rightarrow> e n)\n                              f) \\<or>\n                         SEval (ms, m) e s", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ms m e.\n       \\<lbrakk>is_env (ms, m) e;\n        FEval (ms, m) (case_nat (e u) e) f \\<or>\n        (\\<exists>ma\\<in>ms. FEval (ms, m) (case_nat ma e) f)\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>ma\\<in>ms.\n                             FEval (ms, m)\n                              (\\<lambda>y.\n                                  case y of 0 \\<Rightarrow> ma\n                                  | Suc n \\<Rightarrow> e n)\n                              f) \\<or>\n                         SEval (ms, m) e s", "apply(erule disjE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>ms m e.\n       \\<lbrakk>is_env (ms, m) e;\n        FEval (ms, m) (case_nat (e u) e) f\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>ma\\<in>ms.\n                             FEval (ms, m)\n                              (\\<lambda>y.\n                                  case y of 0 \\<Rightarrow> ma\n                                  | Suc n \\<Rightarrow> e n)\n                              f) \\<or>\n                         SEval (ms, m) e s\n 2. \\<And>ms m e.\n       \\<lbrakk>is_env (ms, m) e;\n        \\<exists>ma\\<in>ms. FEval (ms, m) (case_nat ma e) f\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>ma\\<in>ms.\n                             FEval (ms, m)\n                              (\\<lambda>y.\n                                  case y of 0 \\<Rightarrow> ma\n                                  | Suc n \\<Rightarrow> e n)\n                              f) \\<or>\n                         SEval (ms, m) e s", "apply(rule disjI1)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>ms m e.\n       \\<lbrakk>is_env (ms, m) e;\n        FEval (ms, m) (case_nat (e u) e) f\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ma\\<in>ms.\n                            FEval (ms, m)\n                             (\\<lambda>y.\n                                 case y of 0 \\<Rightarrow> ma\n                                 | Suc n \\<Rightarrow> e n)\n                             f\n 2. \\<And>ms m e.\n       \\<lbrakk>is_env (ms, m) e;\n        \\<exists>ma\\<in>ms. FEval (ms, m) (case_nat ma e) f\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>ma\\<in>ms.\n                             FEval (ms, m)\n                              (\\<lambda>y.\n                                  case y of 0 \\<Rightarrow> ma\n                                  | Suc n \\<Rightarrow> e n)\n                              f) \\<or>\n                         SEval (ms, m) e s", "apply(rule_tac x=\"e u\" in bexI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>ms m e.\n       \\<lbrakk>is_env (ms, m) e;\n        FEval (ms, m) (case_nat (e u) e) f\\<rbrakk>\n       \\<Longrightarrow> FEval (ms, m)\n                          (\\<lambda>y.\n                              case y of 0 \\<Rightarrow> e u\n                              | Suc n \\<Rightarrow> e n)\n                          f\n 2. \\<And>ms m e.\n       \\<lbrakk>is_env (ms, m) e;\n        FEval (ms, m) (case_nat (e u) e) f\\<rbrakk>\n       \\<Longrightarrow> e u \\<in> ms\n 3. \\<And>ms m e.\n       \\<lbrakk>is_env (ms, m) e;\n        \\<exists>ma\\<in>ms. FEval (ms, m) (case_nat ma e) f\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>ma\\<in>ms.\n                             FEval (ms, m)\n                              (\\<lambda>y.\n                                  case y of 0 \\<Rightarrow> ma\n                                  | Suc n \\<Rightarrow> e n)\n                              f) \\<or>\n                         SEval (ms, m) e s", "apply(simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>ms m e.\n       \\<lbrakk>is_env (ms, m) e;\n        FEval (ms, m) (case_nat (e u) e) f\\<rbrakk>\n       \\<Longrightarrow> e u \\<in> ms\n 2. \\<And>ms m e.\n       \\<lbrakk>is_env (ms, m) e;\n        \\<exists>ma\\<in>ms. FEval (ms, m) (case_nat ma e) f\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>ma\\<in>ms.\n                             FEval (ms, m)\n                              (\\<lambda>y.\n                                  case y of 0 \\<Rightarrow> ma\n                                  | Suc n \\<Rightarrow> e n)\n                              f) \\<or>\n                         SEval (ms, m) e s", "apply(simp add: is_env_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ms m e.\n       \\<lbrakk>is_env (ms, m) e;\n        \\<exists>ma\\<in>ms. FEval (ms, m) (case_nat ma e) f\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>ma\\<in>ms.\n                             FEval (ms, m)\n                              (\\<lambda>y.\n                                  case y of 0 \\<Rightarrow> ma\n                                  | Suc n \\<Rightarrow> e n)\n                              f) \\<or>\n                         SEval (ms, m) e s", "apply(force)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma max_exists: \"finite (X::nat set) ==> X \\<noteq> {} --> (\\<exists>x. x \\<in> X & (\\<forall>y. y \\<in> X --> y \\<le> x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite X \\<Longrightarrow>\n    X \\<noteq> {} \\<longrightarrow>\n    (\\<exists>x.\n        x \\<in> X \\<and>\n        (\\<forall>y. y \\<in> X \\<longrightarrow> y \\<le> x))", "apply(erule_tac finite_induct)"], ["proof (prove)\ngoal (2 subgoals):\n 1. {} \\<noteq> {} \\<longrightarrow>\n    (\\<exists>x.\n        x \\<in> {} \\<and>\n        (\\<forall>y. y \\<in> {} \\<longrightarrow> y \\<le> x))\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        F \\<noteq> {} \\<longrightarrow>\n        (\\<exists>x.\n            x \\<in> F \\<and>\n            (\\<forall>y. y \\<in> F \\<longrightarrow> y \\<le> x))\\<rbrakk>\n       \\<Longrightarrow> insert x F \\<noteq> {} \\<longrightarrow>\n                         (\\<exists>xa.\n                             xa \\<in> insert x F \\<and>\n                             (\\<forall>y.\n                                 y \\<in> insert x F \\<longrightarrow>\n                                 y \\<le> xa))", "apply(force)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        F \\<noteq> {} \\<longrightarrow>\n        (\\<exists>x.\n            x \\<in> F \\<and>\n            (\\<forall>y. y \\<in> F \\<longrightarrow> y \\<le> x))\\<rbrakk>\n       \\<Longrightarrow> insert x F \\<noteq> {} \\<longrightarrow>\n                         (\\<exists>xa.\n                             xa \\<in> insert x F \\<and>\n                             (\\<forall>y.\n                                 y \\<in> insert x F \\<longrightarrow>\n                                 y \\<le> xa))", "apply(rule)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        F \\<noteq> {} \\<longrightarrow>\n        (\\<exists>x.\n            x \\<in> F \\<and>\n            (\\<forall>y. y \\<in> F \\<longrightarrow> y \\<le> x));\n        insert x F \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            xa \\<in> insert x F \\<and>\n                            (\\<forall>y.\n                                y \\<in> insert x F \\<longrightarrow>\n                                y \\<le> xa)", "apply(case_tac \"F = {}\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        F \\<noteq> {} \\<longrightarrow>\n        (\\<exists>x.\n            x \\<in> F \\<and>\n            (\\<forall>y. y \\<in> F \\<longrightarrow> y \\<le> x));\n        insert x F \\<noteq> {}; F = {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            xa \\<in> insert x F \\<and>\n                            (\\<forall>y.\n                                y \\<in> insert x F \\<longrightarrow>\n                                y \\<le> xa)\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        F \\<noteq> {} \\<longrightarrow>\n        (\\<exists>x.\n            x \\<in> F \\<and>\n            (\\<forall>y. y \\<in> F \\<longrightarrow> y \\<le> x));\n        insert x F \\<noteq> {}; F \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            xa \\<in> insert x F \\<and>\n                            (\\<forall>y.\n                                y \\<in> insert x F \\<longrightarrow>\n                                y \\<le> xa)", "apply(force)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        F \\<noteq> {} \\<longrightarrow>\n        (\\<exists>x.\n            x \\<in> F \\<and>\n            (\\<forall>y. y \\<in> F \\<longrightarrow> y \\<le> x));\n        insert x F \\<noteq> {}; F \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            xa \\<in> insert x F \\<and>\n                            (\\<forall>y.\n                                y \\<in> insert x F \\<longrightarrow>\n                                y \\<le> xa)", "apply(erule impE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F; insert x F \\<noteq> {};\n        F \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> F \\<noteq> {}\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F; insert x F \\<noteq> {};\n        F \\<noteq> {};\n        \\<exists>x.\n           x \\<in> F \\<and>\n           (\\<forall>y. y \\<in> F \\<longrightarrow> y \\<le> x)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            xa \\<in> insert x F \\<and>\n                            (\\<forall>y.\n                                y \\<in> insert x F \\<longrightarrow>\n                                y \\<le> xa)", "apply(force)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F; insert x F \\<noteq> {};\n        F \\<noteq> {};\n        \\<exists>x.\n           x \\<in> F \\<and>\n           (\\<forall>y. y \\<in> F \\<longrightarrow> y \\<le> x)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            xa \\<in> insert x F \\<and>\n                            (\\<forall>y.\n                                y \\<in> insert x F \\<longrightarrow>\n                                y \\<le> xa)", "apply(elim exE conjE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x F xa.\n       \\<lbrakk>finite F; x \\<notin> F; insert x F \\<noteq> {};\n        F \\<noteq> {}; xa \\<in> F;\n        \\<forall>y. y \\<in> F \\<longrightarrow> y \\<le> xa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            xa \\<in> insert x F \\<and>\n                            (\\<forall>y.\n                                y \\<in> insert x F \\<longrightarrow>\n                                y \\<le> xa)", "apply(rule_tac x=\"max x xa\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x F xa.\n       \\<lbrakk>finite F; x \\<notin> F; insert x F \\<noteq> {};\n        F \\<noteq> {}; xa \\<in> F;\n        \\<forall>y. y \\<in> F \\<longrightarrow> y \\<le> xa\\<rbrakk>\n       \\<Longrightarrow> max x xa \\<in> insert x F \\<and>\n                         (\\<forall>y.\n                             y \\<in> insert x F \\<longrightarrow>\n                             y \\<le> max x xa)", "apply(rule)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x F xa.\n       \\<lbrakk>finite F; x \\<notin> F; insert x F \\<noteq> {};\n        F \\<noteq> {}; xa \\<in> F;\n        \\<forall>y. y \\<in> F \\<longrightarrow> y \\<le> xa\\<rbrakk>\n       \\<Longrightarrow> max x xa \\<in> insert x F\n 2. \\<And>x F xa.\n       \\<lbrakk>finite F; x \\<notin> F; insert x F \\<noteq> {};\n        F \\<noteq> {}; xa \\<in> F;\n        \\<forall>y. y \\<in> F \\<longrightarrow> y \\<le> xa\\<rbrakk>\n       \\<Longrightarrow> \\<forall>y.\n                            y \\<in> insert x F \\<longrightarrow>\n                            y \\<le> max x xa", "apply(simp add: max_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x F xa.\n       \\<lbrakk>finite F; x \\<notin> F; insert x F \\<noteq> {};\n        F \\<noteq> {}; xa \\<in> F;\n        \\<forall>y. y \\<in> F \\<longrightarrow> y \\<le> xa\\<rbrakk>\n       \\<Longrightarrow> \\<forall>y.\n                            y \\<in> insert x F \\<longrightarrow>\n                            y \\<le> max x xa", "apply(simp add: max_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x F xa.\n       \\<lbrakk>finite F; x \\<notin> F; F \\<noteq> {}; xa \\<in> F;\n        \\<forall>y. y \\<in> F \\<longrightarrow> y \\<le> xa\\<rbrakk>\n       \\<Longrightarrow> \\<not> x \\<le> xa \\<longrightarrow>\n                         (\\<forall>y. y \\<in> F \\<longrightarrow> y \\<le> x)", "apply(force)"], ["proof (prove)\ngoal:\nNo subgoals!", "done\n  \\<comment> \\<open>poor max lemmas in lib\\<close>"], ["", "lemma inj_finite_image_eq_finite: \"inj_on f Z ==> finite (f ` Z) = finite Z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_on f Z \\<Longrightarrow> finite (f ` Z) = finite Z", "by (blast intro: finite_imageD)"], ["", "lemma finite_inc: \"finite (inc ` X) = finite X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (inc ` X) = finite X", "apply(rule inj_finite_image_eq_finite)"], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_on inc X", "apply(rule_tac B=UNIV in subset_inj_on)"], ["proof (prove)\ngoal (2 subgoals):\n 1. inj inc\n 2. X \\<subseteq> UNIV", "apply(auto)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma finite_deriv_deriv: \"finite (deriv s) ==> finite  (deriv ` {w. ~is_axiom (s_of_ns s) & w : set (subs s)})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (deriv s) \\<Longrightarrow>\n    finite\n     (deriv ` {w. \\<not> is_axiom (s_of_ns s) \\<and> w \\<in> set (subs s)})", "by (simp only: deriv) simp"], ["", "definition\n  init :: \"nseq => bool\" where\n  \"init s = (\\<forall>x \\<in> (set s). fst x = 0)\""], ["", "definition\n  is_FEx :: \"form => bool\" where\n  \"is_FEx f = (case f of\n      PAtom p vs => False\n    | NAtom p vs => False\n    | FConj f g => False\n    | FDisj f g => False\n    | FAll f => False\n    | FEx f => True)\""], ["", "lemma is_FEx[simp]: \"~ is_FEx (PAtom p vs)\n  & ~ is_FEx (NAtom p vs)\n  & ~ is_FEx (FConj f g)\n  & ~ is_FEx (FDisj f g)\n  & ~ is_FEx (FAll f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> is_FEx (PAtom p vs) \\<and>\n    \\<not> is_FEx (NAtom p vs) \\<and>\n    \\<not> is_FEx (FConj f g) \\<and>\n    \\<not> is_FEx (FDisj f g) \\<and> \\<not> is_FEx (FAll f)", "by(force simp: is_FEx_def)"], ["", "lemma index0: \"init s ==> \\<forall>u m A. (n, u) \\<in> deriv s --> (m,A) \\<in> (set u) --> (~ is_FEx A) --> m = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. init s \\<Longrightarrow>\n    \\<forall>u m A.\n       (n, u) \\<in> deriv s \\<longrightarrow>\n       (m, A) \\<in> set u \\<longrightarrow>\n       \\<not> is_FEx A \\<longrightarrow> m = 0", "apply(induct_tac n)"], ["proof (prove)\ngoal (2 subgoals):\n 1. init s \\<Longrightarrow>\n    \\<forall>u m A.\n       (0, u) \\<in> deriv s \\<longrightarrow>\n       (m, A) \\<in> set u \\<longrightarrow>\n       \\<not> is_FEx A \\<longrightarrow> m = 0\n 2. \\<And>n.\n       \\<lbrakk>init s;\n        \\<forall>u m A.\n           (n, u) \\<in> deriv s \\<longrightarrow>\n           (m, A) \\<in> set u \\<longrightarrow>\n           \\<not> is_FEx A \\<longrightarrow> m = 0\\<rbrakk>\n       \\<Longrightarrow> \\<forall>u m A.\n                            (Suc n, u) \\<in> deriv s \\<longrightarrow>\n                            (m, A) \\<in> set u \\<longrightarrow>\n                            \\<not> is_FEx A \\<longrightarrow> m = 0", "apply(rule,rule,rule,rule,rule,rule)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>u m A.\n       \\<lbrakk>init s; (0, u) \\<in> deriv s; (m, A) \\<in> set u;\n        \\<not> is_FEx A\\<rbrakk>\n       \\<Longrightarrow> m = 0\n 2. \\<And>n.\n       \\<lbrakk>init s;\n        \\<forall>u m A.\n           (n, u) \\<in> deriv s \\<longrightarrow>\n           (m, A) \\<in> set u \\<longrightarrow>\n           \\<not> is_FEx A \\<longrightarrow> m = 0\\<rbrakk>\n       \\<Longrightarrow> \\<forall>u m A.\n                            (Suc n, u) \\<in> deriv s \\<longrightarrow>\n                            (m, A) \\<in> set u \\<longrightarrow>\n                            \\<not> is_FEx A \\<longrightarrow> m = 0", "apply(simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>u m A.\n       \\<lbrakk>init s; u = s; (m, A) \\<in> set s; \\<not> is_FEx A\\<rbrakk>\n       \\<Longrightarrow> m = 0\n 2. \\<And>n.\n       \\<lbrakk>init s;\n        \\<forall>u m A.\n           (n, u) \\<in> deriv s \\<longrightarrow>\n           (m, A) \\<in> set u \\<longrightarrow>\n           \\<not> is_FEx A \\<longrightarrow> m = 0\\<rbrakk>\n       \\<Longrightarrow> \\<forall>u m A.\n                            (Suc n, u) \\<in> deriv s \\<longrightarrow>\n                            (m, A) \\<in> set u \\<longrightarrow>\n                            \\<not> is_FEx A \\<longrightarrow> m = 0", "apply(force simp add: init_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>init s;\n        \\<forall>u m A.\n           (n, u) \\<in> deriv s \\<longrightarrow>\n           (m, A) \\<in> set u \\<longrightarrow>\n           \\<not> is_FEx A \\<longrightarrow> m = 0\\<rbrakk>\n       \\<Longrightarrow> \\<forall>u m A.\n                            (Suc n, u) \\<in> deriv s \\<longrightarrow>\n                            (m, A) \\<in> set u \\<longrightarrow>\n                            \\<not> is_FEx A \\<longrightarrow> m = 0", "apply(rule,rule,rule,rule,rule,rule) \n  \\<comment> \\<open>inversion on @{term \"(Suc n, u) \\<in> deriv s\"}\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n u m A.\n       \\<lbrakk>init s;\n        \\<forall>u m A.\n           (n, u) \\<in> deriv s \\<longrightarrow>\n           (m, A) \\<in> set u \\<longrightarrow>\n           \\<not> is_FEx A \\<longrightarrow> m = 0;\n        (Suc n, u) \\<in> deriv s; (m, A) \\<in> set u;\n        \\<not> is_FEx A\\<rbrakk>\n       \\<Longrightarrow> m = 0", "apply(drule_tac deriv_downwards)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n u m A.\n       \\<lbrakk>init s;\n        \\<forall>u m A.\n           (n, u) \\<in> deriv s \\<longrightarrow>\n           (m, A) \\<in> set u \\<longrightarrow>\n           \\<not> is_FEx A \\<longrightarrow> m = 0;\n        (m, A) \\<in> set u; \\<not> is_FEx A;\n        \\<exists>y.\n           (n, y) \\<in> deriv s \\<and>\n           u \\<in> set (subs y) \\<and> \\<not> is_axiom (s_of_ns y)\\<rbrakk>\n       \\<Longrightarrow> m = 0", "apply(elim exE conjE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n u m A y.\n       \\<lbrakk>init s;\n        \\<forall>u m A.\n           (n, u) \\<in> deriv s \\<longrightarrow>\n           (m, A) \\<in> set u \\<longrightarrow>\n           \\<not> is_FEx A \\<longrightarrow> m = 0;\n        (m, A) \\<in> set u; \\<not> is_FEx A; (n, y) \\<in> deriv s;\n        u \\<in> set (subs y); \\<not> is_axiom (s_of_ns y)\\<rbrakk>\n       \\<Longrightarrow> m = 0", "apply(case_tac y)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n u m A y.\n       \\<lbrakk>init s;\n        \\<forall>u m A.\n           (n, u) \\<in> deriv s \\<longrightarrow>\n           (m, A) \\<in> set u \\<longrightarrow>\n           \\<not> is_FEx A \\<longrightarrow> m = 0;\n        (m, A) \\<in> set u; \\<not> is_FEx A; (n, y) \\<in> deriv s;\n        u \\<in> set (subs y); \\<not> is_axiom (s_of_ns y); y = []\\<rbrakk>\n       \\<Longrightarrow> m = 0\n 2. \\<And>n u m A y a list.\n       \\<lbrakk>init s;\n        \\<forall>u m A.\n           (n, u) \\<in> deriv s \\<longrightarrow>\n           (m, A) \\<in> set u \\<longrightarrow>\n           \\<not> is_FEx A \\<longrightarrow> m = 0;\n        (m, A) \\<in> set u; \\<not> is_FEx A; (n, y) \\<in> deriv s;\n        u \\<in> set (subs y); \\<not> is_axiom (s_of_ns y);\n        y = a # list\\<rbrakk>\n       \\<Longrightarrow> m = 0", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n u m A y a list.\n       \\<lbrakk>init s;\n        \\<forall>u m A.\n           (n, u) \\<in> deriv s \\<longrightarrow>\n           (m, A) \\<in> set u \\<longrightarrow>\n           \\<not> is_FEx A \\<longrightarrow> m = 0;\n        (m, A) \\<in> set u; \\<not> is_FEx A; (n, y) \\<in> deriv s;\n        u \\<in> set (subs y); \\<not> is_axiom (s_of_ns y);\n        y = a # list\\<rbrakk>\n       \\<Longrightarrow> m = 0", "apply(case_tac a)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n u m A y a list aa b.\n       \\<lbrakk>init s;\n        \\<forall>u m A.\n           (n, u) \\<in> deriv s \\<longrightarrow>\n           (m, A) \\<in> set u \\<longrightarrow>\n           \\<not> is_FEx A \\<longrightarrow> m = 0;\n        (m, A) \\<in> set u; \\<not> is_FEx A; (n, y) \\<in> deriv s;\n        u \\<in> set (subs y); \\<not> is_axiom (s_of_ns y); y = a # list;\n        a = (aa, b)\\<rbrakk>\n       \\<Longrightarrow> m = 0", "apply(case_tac b)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>n u m A y a list aa b x11 x12.\n       \\<lbrakk>init s;\n        \\<forall>u m A.\n           (n, u) \\<in> deriv s \\<longrightarrow>\n           (m, A) \\<in> set u \\<longrightarrow>\n           \\<not> is_FEx A \\<longrightarrow> m = 0;\n        (m, A) \\<in> set u; \\<not> is_FEx A; (n, y) \\<in> deriv s;\n        u \\<in> set (subs y); \\<not> is_axiom (s_of_ns y); y = a # list;\n        a = (aa, b); b = PAtom x11 x12\\<rbrakk>\n       \\<Longrightarrow> m = 0\n 2. \\<And>n u m A y a list aa b x21 x22.\n       \\<lbrakk>init s;\n        \\<forall>u m A.\n           (n, u) \\<in> deriv s \\<longrightarrow>\n           (m, A) \\<in> set u \\<longrightarrow>\n           \\<not> is_FEx A \\<longrightarrow> m = 0;\n        (m, A) \\<in> set u; \\<not> is_FEx A; (n, y) \\<in> deriv s;\n        u \\<in> set (subs y); \\<not> is_axiom (s_of_ns y); y = a # list;\n        a = (aa, b); b = NAtom x21 x22\\<rbrakk>\n       \\<Longrightarrow> m = 0\n 3. \\<And>n u m A y a list aa b x31 x32.\n       \\<lbrakk>init s;\n        \\<forall>u m A.\n           (n, u) \\<in> deriv s \\<longrightarrow>\n           (m, A) \\<in> set u \\<longrightarrow>\n           \\<not> is_FEx A \\<longrightarrow> m = 0;\n        (m, A) \\<in> set u; \\<not> is_FEx A; (n, y) \\<in> deriv s;\n        u \\<in> set (subs y); \\<not> is_axiom (s_of_ns y); y = a # list;\n        a = (aa, b); b = FConj x31 x32\\<rbrakk>\n       \\<Longrightarrow> m = 0\n 4. \\<And>n u m A y a list aa b x41 x42.\n       \\<lbrakk>init s;\n        \\<forall>u m A.\n           (n, u) \\<in> deriv s \\<longrightarrow>\n           (m, A) \\<in> set u \\<longrightarrow>\n           \\<not> is_FEx A \\<longrightarrow> m = 0;\n        (m, A) \\<in> set u; \\<not> is_FEx A; (n, y) \\<in> deriv s;\n        u \\<in> set (subs y); \\<not> is_axiom (s_of_ns y); y = a # list;\n        a = (aa, b); b = FDisj x41 x42\\<rbrakk>\n       \\<Longrightarrow> m = 0\n 5. \\<And>n u m A y a list aa b x5.\n       \\<lbrakk>init s;\n        \\<forall>u m A.\n           (n, u) \\<in> deriv s \\<longrightarrow>\n           (m, A) \\<in> set u \\<longrightarrow>\n           \\<not> is_FEx A \\<longrightarrow> m = 0;\n        (m, A) \\<in> set u; \\<not> is_FEx A; (n, y) \\<in> deriv s;\n        u \\<in> set (subs y); \\<not> is_axiom (s_of_ns y); y = a # list;\n        a = (aa, b); b = FAll x5\\<rbrakk>\n       \\<Longrightarrow> m = 0\n 6. \\<And>n u m A y a list aa b x6.\n       \\<lbrakk>init s;\n        \\<forall>u m A.\n           (n, u) \\<in> deriv s \\<longrightarrow>\n           (m, A) \\<in> set u \\<longrightarrow>\n           \\<not> is_FEx A \\<longrightarrow> m = 0;\n        (m, A) \\<in> set u; \\<not> is_FEx A; (n, y) \\<in> deriv s;\n        u \\<in> set (subs y); \\<not> is_axiom (s_of_ns y); y = a # list;\n        a = (aa, b); b = FEx x6\\<rbrakk>\n       \\<Longrightarrow> m = 0", "apply(force simp add: Let_def s_of_ns_def)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>n u m A y a list aa b x21 x22.\n       \\<lbrakk>init s;\n        \\<forall>u m A.\n           (n, u) \\<in> deriv s \\<longrightarrow>\n           (m, A) \\<in> set u \\<longrightarrow>\n           \\<not> is_FEx A \\<longrightarrow> m = 0;\n        (m, A) \\<in> set u; \\<not> is_FEx A; (n, y) \\<in> deriv s;\n        u \\<in> set (subs y); \\<not> is_axiom (s_of_ns y); y = a # list;\n        a = (aa, b); b = NAtom x21 x22\\<rbrakk>\n       \\<Longrightarrow> m = 0\n 2. \\<And>n u m A y a list aa b x31 x32.\n       \\<lbrakk>init s;\n        \\<forall>u m A.\n           (n, u) \\<in> deriv s \\<longrightarrow>\n           (m, A) \\<in> set u \\<longrightarrow>\n           \\<not> is_FEx A \\<longrightarrow> m = 0;\n        (m, A) \\<in> set u; \\<not> is_FEx A; (n, y) \\<in> deriv s;\n        u \\<in> set (subs y); \\<not> is_axiom (s_of_ns y); y = a # list;\n        a = (aa, b); b = FConj x31 x32\\<rbrakk>\n       \\<Longrightarrow> m = 0\n 3. \\<And>n u m A y a list aa b x41 x42.\n       \\<lbrakk>init s;\n        \\<forall>u m A.\n           (n, u) \\<in> deriv s \\<longrightarrow>\n           (m, A) \\<in> set u \\<longrightarrow>\n           \\<not> is_FEx A \\<longrightarrow> m = 0;\n        (m, A) \\<in> set u; \\<not> is_FEx A; (n, y) \\<in> deriv s;\n        u \\<in> set (subs y); \\<not> is_axiom (s_of_ns y); y = a # list;\n        a = (aa, b); b = FDisj x41 x42\\<rbrakk>\n       \\<Longrightarrow> m = 0\n 4. \\<And>n u m A y a list aa b x5.\n       \\<lbrakk>init s;\n        \\<forall>u m A.\n           (n, u) \\<in> deriv s \\<longrightarrow>\n           (m, A) \\<in> set u \\<longrightarrow>\n           \\<not> is_FEx A \\<longrightarrow> m = 0;\n        (m, A) \\<in> set u; \\<not> is_FEx A; (n, y) \\<in> deriv s;\n        u \\<in> set (subs y); \\<not> is_axiom (s_of_ns y); y = a # list;\n        a = (aa, b); b = FAll x5\\<rbrakk>\n       \\<Longrightarrow> m = 0\n 5. \\<And>n u m A y a list aa b x6.\n       \\<lbrakk>init s;\n        \\<forall>u m A.\n           (n, u) \\<in> deriv s \\<longrightarrow>\n           (m, A) \\<in> set u \\<longrightarrow>\n           \\<not> is_FEx A \\<longrightarrow> m = 0;\n        (m, A) \\<in> set u; \\<not> is_FEx A; (n, y) \\<in> deriv s;\n        u \\<in> set (subs y); \\<not> is_axiom (s_of_ns y); y = a # list;\n        a = (aa, b); b = FEx x6\\<rbrakk>\n       \\<Longrightarrow> m = 0", "apply(force simp add: Let_def s_of_ns_def)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>n u m A y a list aa b x31 x32.\n       \\<lbrakk>init s;\n        \\<forall>u m A.\n           (n, u) \\<in> deriv s \\<longrightarrow>\n           (m, A) \\<in> set u \\<longrightarrow>\n           \\<not> is_FEx A \\<longrightarrow> m = 0;\n        (m, A) \\<in> set u; \\<not> is_FEx A; (n, y) \\<in> deriv s;\n        u \\<in> set (subs y); \\<not> is_axiom (s_of_ns y); y = a # list;\n        a = (aa, b); b = FConj x31 x32\\<rbrakk>\n       \\<Longrightarrow> m = 0\n 2. \\<And>n u m A y a list aa b x41 x42.\n       \\<lbrakk>init s;\n        \\<forall>u m A.\n           (n, u) \\<in> deriv s \\<longrightarrow>\n           (m, A) \\<in> set u \\<longrightarrow>\n           \\<not> is_FEx A \\<longrightarrow> m = 0;\n        (m, A) \\<in> set u; \\<not> is_FEx A; (n, y) \\<in> deriv s;\n        u \\<in> set (subs y); \\<not> is_axiom (s_of_ns y); y = a # list;\n        a = (aa, b); b = FDisj x41 x42\\<rbrakk>\n       \\<Longrightarrow> m = 0\n 3. \\<And>n u m A y a list aa b x5.\n       \\<lbrakk>init s;\n        \\<forall>u m A.\n           (n, u) \\<in> deriv s \\<longrightarrow>\n           (m, A) \\<in> set u \\<longrightarrow>\n           \\<not> is_FEx A \\<longrightarrow> m = 0;\n        (m, A) \\<in> set u; \\<not> is_FEx A; (n, y) \\<in> deriv s;\n        u \\<in> set (subs y); \\<not> is_axiom (s_of_ns y); y = a # list;\n        a = (aa, b); b = FAll x5\\<rbrakk>\n       \\<Longrightarrow> m = 0\n 4. \\<And>n u m A y a list aa b x6.\n       \\<lbrakk>init s;\n        \\<forall>u m A.\n           (n, u) \\<in> deriv s \\<longrightarrow>\n           (m, A) \\<in> set u \\<longrightarrow>\n           \\<not> is_FEx A \\<longrightarrow> m = 0;\n        (m, A) \\<in> set u; \\<not> is_FEx A; (n, y) \\<in> deriv s;\n        u \\<in> set (subs y); \\<not> is_axiom (s_of_ns y); y = a # list;\n        a = (aa, b); b = FEx x6\\<rbrakk>\n       \\<Longrightarrow> m = 0", "apply(force simp add: Let_def s_of_ns_def)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>n u m A y a list aa b x41 x42.\n       \\<lbrakk>init s;\n        \\<forall>u m A.\n           (n, u) \\<in> deriv s \\<longrightarrow>\n           (m, A) \\<in> set u \\<longrightarrow>\n           \\<not> is_FEx A \\<longrightarrow> m = 0;\n        (m, A) \\<in> set u; \\<not> is_FEx A; (n, y) \\<in> deriv s;\n        u \\<in> set (subs y); \\<not> is_axiom (s_of_ns y); y = a # list;\n        a = (aa, b); b = FDisj x41 x42\\<rbrakk>\n       \\<Longrightarrow> m = 0\n 2. \\<And>n u m A y a list aa b x5.\n       \\<lbrakk>init s;\n        \\<forall>u m A.\n           (n, u) \\<in> deriv s \\<longrightarrow>\n           (m, A) \\<in> set u \\<longrightarrow>\n           \\<not> is_FEx A \\<longrightarrow> m = 0;\n        (m, A) \\<in> set u; \\<not> is_FEx A; (n, y) \\<in> deriv s;\n        u \\<in> set (subs y); \\<not> is_axiom (s_of_ns y); y = a # list;\n        a = (aa, b); b = FAll x5\\<rbrakk>\n       \\<Longrightarrow> m = 0\n 3. \\<And>n u m A y a list aa b x6.\n       \\<lbrakk>init s;\n        \\<forall>u m A.\n           (n, u) \\<in> deriv s \\<longrightarrow>\n           (m, A) \\<in> set u \\<longrightarrow>\n           \\<not> is_FEx A \\<longrightarrow> m = 0;\n        (m, A) \\<in> set u; \\<not> is_FEx A; (n, y) \\<in> deriv s;\n        u \\<in> set (subs y); \\<not> is_axiom (s_of_ns y); y = a # list;\n        a = (aa, b); b = FEx x6\\<rbrakk>\n       \\<Longrightarrow> m = 0", "apply(force simp add: Let_def s_of_ns_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n u m A y a list aa b x5.\n       \\<lbrakk>init s;\n        \\<forall>u m A.\n           (n, u) \\<in> deriv s \\<longrightarrow>\n           (m, A) \\<in> set u \\<longrightarrow>\n           \\<not> is_FEx A \\<longrightarrow> m = 0;\n        (m, A) \\<in> set u; \\<not> is_FEx A; (n, y) \\<in> deriv s;\n        u \\<in> set (subs y); \\<not> is_axiom (s_of_ns y); y = a # list;\n        a = (aa, b); b = FAll x5\\<rbrakk>\n       \\<Longrightarrow> m = 0\n 2. \\<And>n u m A y a list aa b x6.\n       \\<lbrakk>init s;\n        \\<forall>u m A.\n           (n, u) \\<in> deriv s \\<longrightarrow>\n           (m, A) \\<in> set u \\<longrightarrow>\n           \\<not> is_FEx A \\<longrightarrow> m = 0;\n        (m, A) \\<in> set u; \\<not> is_FEx A; (n, y) \\<in> deriv s;\n        u \\<in> set (subs y); \\<not> is_axiom (s_of_ns y); y = a # list;\n        a = (aa, b); b = FEx x6\\<rbrakk>\n       \\<Longrightarrow> m = 0", "apply(force simp add: Let_def s_of_ns_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n u m A y a list aa b x6.\n       \\<lbrakk>init s;\n        \\<forall>u m A.\n           (n, u) \\<in> deriv s \\<longrightarrow>\n           (m, A) \\<in> set u \\<longrightarrow>\n           \\<not> is_FEx A \\<longrightarrow> m = 0;\n        (m, A) \\<in> set u; \\<not> is_FEx A; (n, y) \\<in> deriv s;\n        u \\<in> set (subs y); \\<not> is_axiom (s_of_ns y); y = a # list;\n        a = (aa, b); b = FEx x6\\<rbrakk>\n       \\<Longrightarrow> m = 0", "apply(force simp add: is_FEx_def Let_def s_of_ns_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma soundness': \"init s ==> finite (deriv s) ==> m \\<in> (fst ` (deriv s)) ==> \\<forall>y u. (y,u) \\<in> (deriv s) --> y \\<le> m ==> \\<forall>n t. h = m - n & (n,t) \\<in> deriv s --> Svalid (s_of_ns t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n     \\<forall>y u. (y, u) \\<in> deriv s \\<longrightarrow> y \\<le> m\\<rbrakk>\n    \\<Longrightarrow> \\<forall>n t.\n                         h = m - n \\<and>\n                         (n, t) \\<in> deriv s \\<longrightarrow>\n                         Svalid (s_of_ns t)", "apply(induct_tac h)\n    \\<comment> \\<open>base case\\<close>"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n     \\<forall>y u. (y, u) \\<in> deriv s \\<longrightarrow> y \\<le> m\\<rbrakk>\n    \\<Longrightarrow> \\<forall>n t.\n                         0 = m - n \\<and>\n                         (n, t) \\<in> deriv s \\<longrightarrow>\n                         Svalid (s_of_ns t)\n 2. \\<And>n.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y u. (y, u) \\<in> deriv s \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>na t.\n                            Suc n = m - na \\<and>\n                            (na, t) \\<in> deriv s \\<longrightarrow>\n                            Svalid (s_of_ns t)", "apply(simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n     \\<forall>y.\n        (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow>\n        y \\<le> m\\<rbrakk>\n    \\<Longrightarrow> \\<forall>n t.\n                         m \\<le> n \\<and>\n                         (n, t) \\<in> deriv s \\<longrightarrow>\n                         Svalid (s_of_ns t)\n 2. \\<And>n.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y u. (y, u) \\<in> deriv s \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>na t.\n                            Suc n = m - na \\<and>\n                            (na, t) \\<in> deriv s \\<longrightarrow>\n                            Svalid (s_of_ns t)", "apply(rule,rule,rule)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n t.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        m \\<le> n \\<and> (n, t) \\<in> deriv s\\<rbrakk>\n       \\<Longrightarrow> Svalid (s_of_ns t)\n 2. \\<And>n.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y u. (y, u) \\<in> deriv s \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>na t.\n                            Suc n = m - na \\<and>\n                            (na, t) \\<in> deriv s \\<longrightarrow>\n                            Svalid (s_of_ns t)", "apply(elim conjE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n t.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        m \\<le> n; (n, t) \\<in> deriv s\\<rbrakk>\n       \\<Longrightarrow> Svalid (s_of_ns t)\n 2. \\<And>n.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y u. (y, u) \\<in> deriv s \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>na t.\n                            Suc n = m - na \\<and>\n                            (na, t) \\<in> deriv s \\<longrightarrow>\n                            Svalid (s_of_ns t)", "apply(subgoal_tac \"n=m\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>n t.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        m \\<le> n; (n, t) \\<in> deriv s; n = m\\<rbrakk>\n       \\<Longrightarrow> Svalid (s_of_ns t)\n 2. \\<And>n t.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        m \\<le> n; (n, t) \\<in> deriv s\\<rbrakk>\n       \\<Longrightarrow> n = m\n 3. \\<And>n.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y u. (y, u) \\<in> deriv s \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>na t.\n                            Suc n = m - na \\<and>\n                            (na, t) \\<in> deriv s \\<longrightarrow>\n                            Svalid (s_of_ns t)", "prefer 2"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>n t.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        m \\<le> n; (n, t) \\<in> deriv s\\<rbrakk>\n       \\<Longrightarrow> n = m\n 2. \\<And>n t.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        m \\<le> n; (n, t) \\<in> deriv s; n = m\\<rbrakk>\n       \\<Longrightarrow> Svalid (s_of_ns t)\n 3. \\<And>n.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y u. (y, u) \\<in> deriv s \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>na t.\n                            Suc n = m - na \\<and>\n                            (na, t) \\<in> deriv s \\<longrightarrow>\n                            Svalid (s_of_ns t)", "apply(force)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n t.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        m \\<le> n; (n, t) \\<in> deriv s; n = m\\<rbrakk>\n       \\<Longrightarrow> Svalid (s_of_ns t)\n 2. \\<And>n.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y u. (y, u) \\<in> deriv s \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>na t.\n                            Suc n = m - na \\<and>\n                            (na, t) \\<in> deriv s \\<longrightarrow>\n                            Svalid (s_of_ns t)", "apply(simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n t.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        (m, t) \\<in> deriv s; n = m\\<rbrakk>\n       \\<Longrightarrow> Svalid (s_of_ns t)\n 2. \\<And>n.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y u. (y, u) \\<in> deriv s \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>na t.\n                            Suc n = m - na \\<and>\n                            (na, t) \\<in> deriv s \\<longrightarrow>\n                            Svalid (s_of_ns t)", "apply(simp add: Svalid_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n t.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        (m, t) \\<in> deriv s; n = m\\<rbrakk>\n       \\<Longrightarrow> \\<forall>a b e.\n                            is_env (a, b) e \\<longrightarrow>\n                            SEval (a, b) e (s_of_ns t)\n 2. \\<And>n.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y u. (y, u) \\<in> deriv s \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>na t.\n                            Suc n = m - na \\<and>\n                            (na, t) \\<in> deriv s \\<longrightarrow>\n                            Svalid (s_of_ns t)", "apply(rule,rule)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n t a b.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        (m, t) \\<in> deriv s; n = m\\<rbrakk>\n       \\<Longrightarrow> \\<forall>e.\n                            is_env (a, b) e \\<longrightarrow>\n                            SEval (a, b) e (s_of_ns t)\n 2. \\<And>n.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y u. (y, u) \\<in> deriv s \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>na t.\n                            Suc n = m - na \\<and>\n                            (na, t) \\<in> deriv s \\<longrightarrow>\n                            Svalid (s_of_ns t)", "apply(rename_tac gs g)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n t gs g.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        (m, t) \\<in> deriv s; n = m\\<rbrakk>\n       \\<Longrightarrow> \\<forall>e.\n                            is_env (gs, g) e \\<longrightarrow>\n                            SEval (gs, g) e (s_of_ns t)\n 2. \\<And>n.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y u. (y, u) \\<in> deriv s \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>na t.\n                            Suc n = m - na \\<and>\n                            (na, t) \\<in> deriv s \\<longrightarrow>\n                            Svalid (s_of_ns t)", "apply(rule)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n t gs g e.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        (m, t) \\<in> deriv s; n = m\\<rbrakk>\n       \\<Longrightarrow> is_env (gs, g) e \\<longrightarrow>\n                         SEval (gs, g) e (s_of_ns t)\n 2. \\<And>n.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y u. (y, u) \\<in> deriv s \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>na t.\n                            Suc n = m - na \\<and>\n                            (na, t) \\<in> deriv s \\<longrightarrow>\n                            Svalid (s_of_ns t)", "apply(rule)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n t gs g e.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        (m, t) \\<in> deriv s; n = m; is_env (gs, g) e\\<rbrakk>\n       \\<Longrightarrow> SEval (gs, g) e (s_of_ns t)\n 2. \\<And>n.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y u. (y, u) \\<in> deriv s \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>na t.\n                            Suc n = m - na \\<and>\n                            (na, t) \\<in> deriv s \\<longrightarrow>\n                            Svalid (s_of_ns t)", "apply(simp add: SEval_def2)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n t gs g e.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        (m, t) \\<in> deriv s; n = m; is_env (gs, g) e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns t) \\<and> FEval (gs, g) e f\n 2. \\<And>n.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y u. (y, u) \\<in> deriv s \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>na t.\n                            Suc n = m - na \\<and>\n                            (na, t) \\<in> deriv s \\<longrightarrow>\n                            Svalid (s_of_ns t)", "apply(case_tac \"is_axiom (s_of_ns t)\")\n     \\<comment> \\<open>base case, is axiom\\<close>"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>n t gs g e.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        (m, t) \\<in> deriv s; n = m; is_env (gs, g) e;\n        is_axiom (s_of_ns t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns t) \\<and> FEval (gs, g) e f\n 2. \\<And>n t gs g e.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        (m, t) \\<in> deriv s; n = m; is_env (gs, g) e;\n        \\<not> is_axiom (s_of_ns t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns t) \\<and> FEval (gs, g) e f\n 3. \\<And>n.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y u. (y, u) \\<in> deriv s \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>na t.\n                            Suc n = m - na \\<and>\n                            (na, t) \\<in> deriv s \\<longrightarrow>\n                            Svalid (s_of_ns t)", "apply(simp add: s_of_ns_def)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>n t gs g e.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        (m, t) \\<in> deriv s; n = m; is_env (gs, g) e;\n        is_axiom (map snd t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> snd ` set t \\<and> FEval (gs, g) e f\n 2. \\<And>n t gs g e.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        (m, t) \\<in> deriv s; n = m; is_env (gs, g) e;\n        \\<not> is_axiom (s_of_ns t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns t) \\<and> FEval (gs, g) e f\n 3. \\<And>n.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y u. (y, u) \\<in> deriv s \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>na t.\n                            Suc n = m - na \\<and>\n                            (na, t) \\<in> deriv s \\<longrightarrow>\n                            Svalid (s_of_ns t)", "apply(case_tac t)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>n t gs g e.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        (m, t) \\<in> deriv s; n = m; is_env (gs, g) e; is_axiom (map snd t);\n        t = []\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> snd ` set t \\<and> FEval (gs, g) e f\n 2. \\<And>n t gs g e a list.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        (m, t) \\<in> deriv s; n = m; is_env (gs, g) e; is_axiom (map snd t);\n        t = a # list\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> snd ` set t \\<and> FEval (gs, g) e f\n 3. \\<And>n t gs g e.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        (m, t) \\<in> deriv s; n = m; is_env (gs, g) e;\n        \\<not> is_axiom (s_of_ns t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns t) \\<and> FEval (gs, g) e f\n 4. \\<And>n.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y u. (y, u) \\<in> deriv s \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>na t.\n                            Suc n = m - na \\<and>\n                            (na, t) \\<in> deriv s \\<longrightarrow>\n                            Svalid (s_of_ns t)", "apply(simp)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>n t gs g e a list.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        (m, t) \\<in> deriv s; n = m; is_env (gs, g) e; is_axiom (map snd t);\n        t = a # list\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> snd ` set t \\<and> FEval (gs, g) e f\n 2. \\<And>n t gs g e.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        (m, t) \\<in> deriv s; n = m; is_env (gs, g) e;\n        \\<not> is_axiom (s_of_ns t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns t) \\<and> FEval (gs, g) e f\n 3. \\<And>n.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y u. (y, u) \\<in> deriv s \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>na t.\n                            Suc n = m - na \\<and>\n                            (na, t) \\<in> deriv s \\<longrightarrow>\n                            Svalid (s_of_ns t)", "apply(simp)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>n t gs g e a list.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        (m, a # list) \\<in> deriv s; n = m; is_env (gs, g) e;\n        (\\<exists>p vs.\n            snd a = PAtom p vs \\<and> NAtom p vs \\<in> snd ` set list) \\<or>\n        (\\<exists>p vs.\n            snd a = NAtom p vs \\<and> PAtom p vs \\<in> snd ` set list);\n        t = a # list\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            (f = snd a \\<or> f \\<in> snd ` set list) \\<and>\n                            FEval (gs, g) e f\n 2. \\<And>n t gs g e.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        (m, t) \\<in> deriv s; n = m; is_env (gs, g) e;\n        \\<not> is_axiom (s_of_ns t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns t) \\<and> FEval (gs, g) e f\n 3. \\<And>n.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y u. (y, u) \\<in> deriv s \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>na t.\n                            Suc n = m - na \\<and>\n                            (na, t) \\<in> deriv s \\<longrightarrow>\n                            Svalid (s_of_ns t)", "apply(erule disjE) \n      \\<comment> \\<open>base case, is axiom, starts with PAtom\\<close>"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>n t gs g e a list.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        (m, a # list) \\<in> deriv s; n = m; is_env (gs, g) e; t = a # list;\n        \\<exists>p vs.\n           snd a = PAtom p vs \\<and>\n           NAtom p vs \\<in> snd ` set list\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            (f = snd a \\<or> f \\<in> snd ` set list) \\<and>\n                            FEval (gs, g) e f\n 2. \\<And>n t gs g e a list.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        (m, a # list) \\<in> deriv s; n = m; is_env (gs, g) e; t = a # list;\n        \\<exists>p vs.\n           snd a = NAtom p vs \\<and>\n           PAtom p vs \\<in> snd ` set list\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            (f = snd a \\<or> f \\<in> snd ` set list) \\<and>\n                            FEval (gs, g) e f\n 3. \\<And>n t gs g e.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        (m, t) \\<in> deriv s; n = m; is_env (gs, g) e;\n        \\<not> is_axiom (s_of_ns t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns t) \\<and> FEval (gs, g) e f\n 4. \\<And>n.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y u. (y, u) \\<in> deriv s \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>na t.\n                            Suc n = m - na \\<and>\n                            (na, t) \\<in> deriv s \\<longrightarrow>\n                            Svalid (s_of_ns t)", "apply(elim conjE exE)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>n t gs g e a list p vs.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        (m, a # list) \\<in> deriv s; n = m; is_env (gs, g) e; t = a # list;\n        snd a = PAtom p vs; NAtom p vs \\<in> snd ` set list\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            (f = snd a \\<or> f \\<in> snd ` set list) \\<and>\n                            FEval (gs, g) e f\n 2. \\<And>n t gs g e a list.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        (m, a # list) \\<in> deriv s; n = m; is_env (gs, g) e; t = a # list;\n        \\<exists>p vs.\n           snd a = NAtom p vs \\<and>\n           PAtom p vs \\<in> snd ` set list\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            (f = snd a \\<or> f \\<in> snd ` set list) \\<and>\n                            FEval (gs, g) e f\n 3. \\<And>n t gs g e.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        (m, t) \\<in> deriv s; n = m; is_env (gs, g) e;\n        \\<not> is_axiom (s_of_ns t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns t) \\<and> FEval (gs, g) e f\n 4. \\<And>n.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y u. (y, u) \\<in> deriv s \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>na t.\n                            Suc n = m - na \\<and>\n                            (na, t) \\<in> deriv s \\<longrightarrow>\n                            Svalid (s_of_ns t)", "apply(subgoal_tac \"FEval (gs,g) e (PAtom p vs) | FEval (gs,g) e (NAtom p vs)\")"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>n t gs g e a list p vs.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        (m, a # list) \\<in> deriv s; n = m; is_env (gs, g) e; t = a # list;\n        snd a = PAtom p vs; NAtom p vs \\<in> snd ` set list;\n        FEval (gs, g) e (PAtom p vs) \\<or>\n        FEval (gs, g) e (NAtom p vs)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            (f = snd a \\<or> f \\<in> snd ` set list) \\<and>\n                            FEval (gs, g) e f\n 2. \\<And>n t gs g e a list p vs.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        (m, a # list) \\<in> deriv s; n = m; is_env (gs, g) e; t = a # list;\n        snd a = PAtom p vs; NAtom p vs \\<in> snd ` set list\\<rbrakk>\n       \\<Longrightarrow> FEval (gs, g) e (PAtom p vs) \\<or>\n                         FEval (gs, g) e (NAtom p vs)\n 3. \\<And>n t gs g e a list.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        (m, a # list) \\<in> deriv s; n = m; is_env (gs, g) e; t = a # list;\n        \\<exists>p vs.\n           snd a = NAtom p vs \\<and>\n           PAtom p vs \\<in> snd ` set list\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            (f = snd a \\<or> f \\<in> snd ` set list) \\<and>\n                            FEval (gs, g) e f\n 4. \\<And>n t gs g e.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        (m, t) \\<in> deriv s; n = m; is_env (gs, g) e;\n        \\<not> is_axiom (s_of_ns t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns t) \\<and> FEval (gs, g) e f\n 5. \\<And>n.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y u. (y, u) \\<in> deriv s \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>na t.\n                            Suc n = m - na \\<and>\n                            (na, t) \\<in> deriv s \\<longrightarrow>\n                            Svalid (s_of_ns t)", "apply(erule disjE)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>n t gs g e a list p vs.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        (m, a # list) \\<in> deriv s; n = m; is_env (gs, g) e; t = a # list;\n        snd a = PAtom p vs; NAtom p vs \\<in> snd ` set list;\n        FEval (gs, g) e (PAtom p vs)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            (f = snd a \\<or> f \\<in> snd ` set list) \\<and>\n                            FEval (gs, g) e f\n 2. \\<And>n t gs g e a list p vs.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        (m, a # list) \\<in> deriv s; n = m; is_env (gs, g) e; t = a # list;\n        snd a = PAtom p vs; NAtom p vs \\<in> snd ` set list;\n        FEval (gs, g) e (NAtom p vs)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            (f = snd a \\<or> f \\<in> snd ` set list) \\<and>\n                            FEval (gs, g) e f\n 3. \\<And>n t gs g e a list p vs.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        (m, a # list) \\<in> deriv s; n = m; is_env (gs, g) e; t = a # list;\n        snd a = PAtom p vs; NAtom p vs \\<in> snd ` set list\\<rbrakk>\n       \\<Longrightarrow> FEval (gs, g) e (PAtom p vs) \\<or>\n                         FEval (gs, g) e (NAtom p vs)\n 4. \\<And>n t gs g e a list.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        (m, a # list) \\<in> deriv s; n = m; is_env (gs, g) e; t = a # list;\n        \\<exists>p vs.\n           snd a = NAtom p vs \\<and>\n           PAtom p vs \\<in> snd ` set list\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            (f = snd a \\<or> f \\<in> snd ` set list) \\<and>\n                            FEval (gs, g) e f\n 5. \\<And>n t gs g e.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        (m, t) \\<in> deriv s; n = m; is_env (gs, g) e;\n        \\<not> is_axiom (s_of_ns t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns t) \\<and> FEval (gs, g) e f\n 6. \\<And>n.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y u. (y, u) \\<in> deriv s \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>na t.\n                            Suc n = m - na \\<and>\n                            (na, t) \\<in> deriv s \\<longrightarrow>\n                            Svalid (s_of_ns t)", "apply(force)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>n t gs g e a list p vs.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        (m, a # list) \\<in> deriv s; n = m; is_env (gs, g) e; t = a # list;\n        snd a = PAtom p vs; NAtom p vs \\<in> snd ` set list;\n        FEval (gs, g) e (NAtom p vs)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            (f = snd a \\<or> f \\<in> snd ` set list) \\<and>\n                            FEval (gs, g) e f\n 2. \\<And>n t gs g e a list p vs.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        (m, a # list) \\<in> deriv s; n = m; is_env (gs, g) e; t = a # list;\n        snd a = PAtom p vs; NAtom p vs \\<in> snd ` set list\\<rbrakk>\n       \\<Longrightarrow> FEval (gs, g) e (PAtom p vs) \\<or>\n                         FEval (gs, g) e (NAtom p vs)\n 3. \\<And>n t gs g e a list.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        (m, a # list) \\<in> deriv s; n = m; is_env (gs, g) e; t = a # list;\n        \\<exists>p vs.\n           snd a = NAtom p vs \\<and>\n           PAtom p vs \\<in> snd ` set list\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            (f = snd a \\<or> f \\<in> snd ` set list) \\<and>\n                            FEval (gs, g) e f\n 4. \\<And>n t gs g e.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        (m, t) \\<in> deriv s; n = m; is_env (gs, g) e;\n        \\<not> is_axiom (s_of_ns t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns t) \\<and> FEval (gs, g) e f\n 5. \\<And>n.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y u. (y, u) \\<in> deriv s \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>na t.\n                            Suc n = m - na \\<and>\n                            (na, t) \\<in> deriv s \\<longrightarrow>\n                            Svalid (s_of_ns t)", "apply(rule_tac x=\"NAtom p vs\" in exI)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>n t gs g e a list p vs.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        (m, a # list) \\<in> deriv s; n = m; is_env (gs, g) e; t = a # list;\n        snd a = PAtom p vs; NAtom p vs \\<in> snd ` set list;\n        FEval (gs, g) e (NAtom p vs)\\<rbrakk>\n       \\<Longrightarrow> (NAtom p vs = snd a \\<or>\n                          NAtom p vs \\<in> snd ` set list) \\<and>\n                         FEval (gs, g) e (NAtom p vs)\n 2. \\<And>n t gs g e a list p vs.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        (m, a # list) \\<in> deriv s; n = m; is_env (gs, g) e; t = a # list;\n        snd a = PAtom p vs; NAtom p vs \\<in> snd ` set list\\<rbrakk>\n       \\<Longrightarrow> FEval (gs, g) e (PAtom p vs) \\<or>\n                         FEval (gs, g) e (NAtom p vs)\n 3. \\<And>n t gs g e a list.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        (m, a # list) \\<in> deriv s; n = m; is_env (gs, g) e; t = a # list;\n        \\<exists>p vs.\n           snd a = NAtom p vs \\<and>\n           PAtom p vs \\<in> snd ` set list\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            (f = snd a \\<or> f \\<in> snd ` set list) \\<and>\n                            FEval (gs, g) e f\n 4. \\<And>n t gs g e.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        (m, t) \\<in> deriv s; n = m; is_env (gs, g) e;\n        \\<not> is_axiom (s_of_ns t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns t) \\<and> FEval (gs, g) e f\n 5. \\<And>n.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y u. (y, u) \\<in> deriv s \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>na t.\n                            Suc n = m - na \\<and>\n                            (na, t) \\<in> deriv s \\<longrightarrow>\n                            Svalid (s_of_ns t)", "apply(force)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>n t gs g e a list p vs.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        (m, a # list) \\<in> deriv s; n = m; is_env (gs, g) e; t = a # list;\n        snd a = PAtom p vs; NAtom p vs \\<in> snd ` set list\\<rbrakk>\n       \\<Longrightarrow> FEval (gs, g) e (PAtom p vs) \\<or>\n                         FEval (gs, g) e (NAtom p vs)\n 2. \\<And>n t gs g e a list.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        (m, a # list) \\<in> deriv s; n = m; is_env (gs, g) e; t = a # list;\n        \\<exists>p vs.\n           snd a = NAtom p vs \\<and>\n           PAtom p vs \\<in> snd ` set list\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            (f = snd a \\<or> f \\<in> snd ` set list) \\<and>\n                            FEval (gs, g) e f\n 3. \\<And>n t gs g e.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        (m, t) \\<in> deriv s; n = m; is_env (gs, g) e;\n        \\<not> is_axiom (s_of_ns t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns t) \\<and> FEval (gs, g) e f\n 4. \\<And>n.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y u. (y, u) \\<in> deriv s \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>na t.\n                            Suc n = m - na \\<and>\n                            (na, t) \\<in> deriv s \\<longrightarrow>\n                            Svalid (s_of_ns t)", "apply(simp add: Let_def) \n      \\<comment> \\<open>base case, is axiom, starts with NAtom\\<close>"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>n t gs g e a list.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        (m, a # list) \\<in> deriv s; n = m; is_env (gs, g) e; t = a # list;\n        \\<exists>p vs.\n           snd a = NAtom p vs \\<and>\n           PAtom p vs \\<in> snd ` set list\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            (f = snd a \\<or> f \\<in> snd ` set list) \\<and>\n                            FEval (gs, g) e f\n 2. \\<And>n t gs g e.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        (m, t) \\<in> deriv s; n = m; is_env (gs, g) e;\n        \\<not> is_axiom (s_of_ns t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns t) \\<and> FEval (gs, g) e f\n 3. \\<And>n.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y u. (y, u) \\<in> deriv s \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>na t.\n                            Suc n = m - na \\<and>\n                            (na, t) \\<in> deriv s \\<longrightarrow>\n                            Svalid (s_of_ns t)", "apply(elim conjE exE)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>n t gs g e a list p vs.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        (m, a # list) \\<in> deriv s; n = m; is_env (gs, g) e; t = a # list;\n        snd a = NAtom p vs; PAtom p vs \\<in> snd ` set list\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            (f = snd a \\<or> f \\<in> snd ` set list) \\<and>\n                            FEval (gs, g) e f\n 2. \\<And>n t gs g e.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        (m, t) \\<in> deriv s; n = m; is_env (gs, g) e;\n        \\<not> is_axiom (s_of_ns t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns t) \\<and> FEval (gs, g) e f\n 3. \\<And>n.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y u. (y, u) \\<in> deriv s \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>na t.\n                            Suc n = m - na \\<and>\n                            (na, t) \\<in> deriv s \\<longrightarrow>\n                            Svalid (s_of_ns t)", "apply(subgoal_tac \"FEval (gs,g) e (PAtom p vs) | FEval (gs,g) e (NAtom p vs)\")"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>n t gs g e a list p vs.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        (m, a # list) \\<in> deriv s; n = m; is_env (gs, g) e; t = a # list;\n        snd a = NAtom p vs; PAtom p vs \\<in> snd ` set list;\n        FEval (gs, g) e (PAtom p vs) \\<or>\n        FEval (gs, g) e (NAtom p vs)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            (f = snd a \\<or> f \\<in> snd ` set list) \\<and>\n                            FEval (gs, g) e f\n 2. \\<And>n t gs g e a list p vs.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        (m, a # list) \\<in> deriv s; n = m; is_env (gs, g) e; t = a # list;\n        snd a = NAtom p vs; PAtom p vs \\<in> snd ` set list\\<rbrakk>\n       \\<Longrightarrow> FEval (gs, g) e (PAtom p vs) \\<or>\n                         FEval (gs, g) e (NAtom p vs)\n 3. \\<And>n t gs g e.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        (m, t) \\<in> deriv s; n = m; is_env (gs, g) e;\n        \\<not> is_axiom (s_of_ns t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns t) \\<and> FEval (gs, g) e f\n 4. \\<And>n.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y u. (y, u) \\<in> deriv s \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>na t.\n                            Suc n = m - na \\<and>\n                            (na, t) \\<in> deriv s \\<longrightarrow>\n                            Svalid (s_of_ns t)", "apply(erule disjE)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>n t gs g e a list p vs.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        (m, a # list) \\<in> deriv s; n = m; is_env (gs, g) e; t = a # list;\n        snd a = NAtom p vs; PAtom p vs \\<in> snd ` set list;\n        FEval (gs, g) e (PAtom p vs)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            (f = snd a \\<or> f \\<in> snd ` set list) \\<and>\n                            FEval (gs, g) e f\n 2. \\<And>n t gs g e a list p vs.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        (m, a # list) \\<in> deriv s; n = m; is_env (gs, g) e; t = a # list;\n        snd a = NAtom p vs; PAtom p vs \\<in> snd ` set list;\n        FEval (gs, g) e (NAtom p vs)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            (f = snd a \\<or> f \\<in> snd ` set list) \\<and>\n                            FEval (gs, g) e f\n 3. \\<And>n t gs g e a list p vs.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        (m, a # list) \\<in> deriv s; n = m; is_env (gs, g) e; t = a # list;\n        snd a = NAtom p vs; PAtom p vs \\<in> snd ` set list\\<rbrakk>\n       \\<Longrightarrow> FEval (gs, g) e (PAtom p vs) \\<or>\n                         FEval (gs, g) e (NAtom p vs)\n 4. \\<And>n t gs g e.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        (m, t) \\<in> deriv s; n = m; is_env (gs, g) e;\n        \\<not> is_axiom (s_of_ns t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns t) \\<and> FEval (gs, g) e f\n 5. \\<And>n.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y u. (y, u) \\<in> deriv s \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>na t.\n                            Suc n = m - na \\<and>\n                            (na, t) \\<in> deriv s \\<longrightarrow>\n                            Svalid (s_of_ns t)", "apply(rule_tac x=\"PAtom p vs\" in exI)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>n t gs g e a list p vs.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        (m, a # list) \\<in> deriv s; n = m; is_env (gs, g) e; t = a # list;\n        snd a = NAtom p vs; PAtom p vs \\<in> snd ` set list;\n        FEval (gs, g) e (PAtom p vs)\\<rbrakk>\n       \\<Longrightarrow> (PAtom p vs = snd a \\<or>\n                          PAtom p vs \\<in> snd ` set list) \\<and>\n                         FEval (gs, g) e (PAtom p vs)\n 2. \\<And>n t gs g e a list p vs.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        (m, a # list) \\<in> deriv s; n = m; is_env (gs, g) e; t = a # list;\n        snd a = NAtom p vs; PAtom p vs \\<in> snd ` set list;\n        FEval (gs, g) e (NAtom p vs)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            (f = snd a \\<or> f \\<in> snd ` set list) \\<and>\n                            FEval (gs, g) e f\n 3. \\<And>n t gs g e a list p vs.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        (m, a # list) \\<in> deriv s; n = m; is_env (gs, g) e; t = a # list;\n        snd a = NAtom p vs; PAtom p vs \\<in> snd ` set list\\<rbrakk>\n       \\<Longrightarrow> FEval (gs, g) e (PAtom p vs) \\<or>\n                         FEval (gs, g) e (NAtom p vs)\n 4. \\<And>n t gs g e.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        (m, t) \\<in> deriv s; n = m; is_env (gs, g) e;\n        \\<not> is_axiom (s_of_ns t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns t) \\<and> FEval (gs, g) e f\n 5. \\<And>n.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y u. (y, u) \\<in> deriv s \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>na t.\n                            Suc n = m - na \\<and>\n                            (na, t) \\<in> deriv s \\<longrightarrow>\n                            Svalid (s_of_ns t)", "apply(force)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>n t gs g e a list p vs.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        (m, a # list) \\<in> deriv s; n = m; is_env (gs, g) e; t = a # list;\n        snd a = NAtom p vs; PAtom p vs \\<in> snd ` set list;\n        FEval (gs, g) e (NAtom p vs)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            (f = snd a \\<or> f \\<in> snd ` set list) \\<and>\n                            FEval (gs, g) e f\n 2. \\<And>n t gs g e a list p vs.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        (m, a # list) \\<in> deriv s; n = m; is_env (gs, g) e; t = a # list;\n        snd a = NAtom p vs; PAtom p vs \\<in> snd ` set list\\<rbrakk>\n       \\<Longrightarrow> FEval (gs, g) e (PAtom p vs) \\<or>\n                         FEval (gs, g) e (NAtom p vs)\n 3. \\<And>n t gs g e.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        (m, t) \\<in> deriv s; n = m; is_env (gs, g) e;\n        \\<not> is_axiom (s_of_ns t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns t) \\<and> FEval (gs, g) e f\n 4. \\<And>n.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y u. (y, u) \\<in> deriv s \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>na t.\n                            Suc n = m - na \\<and>\n                            (na, t) \\<in> deriv s \\<longrightarrow>\n                            Svalid (s_of_ns t)", "apply(force)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>n t gs g e a list p vs.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        (m, a # list) \\<in> deriv s; n = m; is_env (gs, g) e; t = a # list;\n        snd a = NAtom p vs; PAtom p vs \\<in> snd ` set list\\<rbrakk>\n       \\<Longrightarrow> FEval (gs, g) e (PAtom p vs) \\<or>\n                         FEval (gs, g) e (NAtom p vs)\n 2. \\<And>n t gs g e.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        (m, t) \\<in> deriv s; n = m; is_env (gs, g) e;\n        \\<not> is_axiom (s_of_ns t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns t) \\<and> FEval (gs, g) e f\n 3. \\<And>n.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y u. (y, u) \\<in> deriv s \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>na t.\n                            Suc n = m - na \\<and>\n                            (na, t) \\<in> deriv s \\<longrightarrow>\n                            Svalid (s_of_ns t)", "apply(simp add: Let_def) \n    \n    \\<comment> \\<open>base case, not is axiom: if not a satax, then subs holds... but this can't be\\<close>"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n t gs g e.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        (m, t) \\<in> deriv s; n = m; is_env (gs, g) e;\n        \\<not> is_axiom (s_of_ns t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns t) \\<and> FEval (gs, g) e f\n 2. \\<And>n.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y u. (y, u) \\<in> deriv s \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>na t.\n                            Suc n = m - na \\<and>\n                            (na, t) \\<in> deriv s \\<longrightarrow>\n                            Svalid (s_of_ns t)", "apply(drule_tac deriv_upwards)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>n t gs g e.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        n = m; is_env (gs, g) e; \\<not> is_axiom (s_of_ns t)\\<rbrakk>\n       \\<Longrightarrow> \\<not> is_axiom (s_of_ns t)\n 2. \\<And>n t gs g e.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        n = m; is_env (gs, g) e; \\<not> is_axiom (s_of_ns t);\n        \\<exists>zs.\n           (Suc m, zs) \\<in> deriv s \\<and> zs \\<in> set (subs t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns t) \\<and> FEval (gs, g) e f\n 3. \\<And>n.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y u. (y, u) \\<in> deriv s \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>na t.\n                            Suc n = m - na \\<and>\n                            (na, t) \\<in> deriv s \\<longrightarrow>\n                            Svalid (s_of_ns t)", "apply(assumption)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n t gs g e.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        n = m; is_env (gs, g) e; \\<not> is_axiom (s_of_ns t);\n        \\<exists>zs.\n           (Suc m, zs) \\<in> deriv s \\<and> zs \\<in> set (subs t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns t) \\<and> FEval (gs, g) e f\n 2. \\<And>n.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y u. (y, u) \\<in> deriv s \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>na t.\n                            Suc n = m - na \\<and>\n                            (na, t) \\<in> deriv s \\<longrightarrow>\n                            Svalid (s_of_ns t)", "apply(elim conjE exE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n t gs g e zs.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        n = m; is_env (gs, g) e; \\<not> is_axiom (s_of_ns t);\n        (Suc m, zs) \\<in> deriv s; zs \\<in> set (subs t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns t) \\<and> FEval (gs, g) e f\n 2. \\<And>n.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y u. (y, u) \\<in> deriv s \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>na t.\n                            Suc n = m - na \\<and>\n                            (na, t) \\<in> deriv s \\<longrightarrow>\n                            Svalid (s_of_ns t)", "apply(force) \n   \n     \\<comment> \\<open>step case, by case analysis\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y u. (y, u) \\<in> deriv s \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>na t.\n                            Suc n = m - na \\<and>\n                            (na, t) \\<in> deriv s \\<longrightarrow>\n                            Svalid (s_of_ns t)", "apply(intro allI impI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n na t.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y u. (y, u) \\<in> deriv s \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t);\n        Suc n = m - na \\<and> (na, t) \\<in> deriv s\\<rbrakk>\n       \\<Longrightarrow> Svalid (s_of_ns t)", "apply(elim exE conjE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n na t.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y u. (y, u) \\<in> deriv s \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t);\n        Suc n = m - na; (na, t) \\<in> deriv s\\<rbrakk>\n       \\<Longrightarrow> Svalid (s_of_ns t)", "apply(case_tac \"is_axiom (s_of_ns t)\")\n    \\<comment> \\<open>step case, is axiom\\<close>"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n na t.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y u. (y, u) \\<in> deriv s \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t);\n        Suc n = m - na; (na, t) \\<in> deriv s; is_axiom (s_of_ns t)\\<rbrakk>\n       \\<Longrightarrow> Svalid (s_of_ns t)\n 2. \\<And>n na t.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y u. (y, u) \\<in> deriv s \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t);\n        Suc n = m - na; (na, t) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns t)\\<rbrakk>\n       \\<Longrightarrow> Svalid (s_of_ns t)", "apply(simp add: Svalid_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n na t.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               SEval (a, b) e (s_of_ns t));\n        Suc n = m - na; (na, t) \\<in> deriv s; is_axiom (s_of_ns t)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>a b e.\n                            is_env (a, b) e \\<longrightarrow>\n                            SEval (a, b) e (s_of_ns t)\n 2. \\<And>n na t.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y u. (y, u) \\<in> deriv s \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t);\n        Suc n = m - na; (na, t) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns t)\\<rbrakk>\n       \\<Longrightarrow> Svalid (s_of_ns t)", "apply(rule,rule)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n na t a b.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               SEval (a, b) e (s_of_ns t));\n        Suc n = m - na; (na, t) \\<in> deriv s; is_axiom (s_of_ns t)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>e.\n                            is_env (a, b) e \\<longrightarrow>\n                            SEval (a, b) e (s_of_ns t)\n 2. \\<And>n na t.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y u. (y, u) \\<in> deriv s \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t);\n        Suc n = m - na; (na, t) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns t)\\<rbrakk>\n       \\<Longrightarrow> Svalid (s_of_ns t)", "apply(rename_tac gs g)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n na t gs g.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               SEval (a, b) e (s_of_ns t));\n        Suc n = m - na; (na, t) \\<in> deriv s; is_axiom (s_of_ns t)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>e.\n                            is_env (gs, g) e \\<longrightarrow>\n                            SEval (gs, g) e (s_of_ns t)\n 2. \\<And>n na t.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y u. (y, u) \\<in> deriv s \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t);\n        Suc n = m - na; (na, t) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns t)\\<rbrakk>\n       \\<Longrightarrow> Svalid (s_of_ns t)", "apply(rule)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n na t gs g e.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               SEval (a, b) e (s_of_ns t));\n        Suc n = m - na; (na, t) \\<in> deriv s; is_axiom (s_of_ns t)\\<rbrakk>\n       \\<Longrightarrow> is_env (gs, g) e \\<longrightarrow>\n                         SEval (gs, g) e (s_of_ns t)\n 2. \\<And>n na t.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y u. (y, u) \\<in> deriv s \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t);\n        Suc n = m - na; (na, t) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns t)\\<rbrakk>\n       \\<Longrightarrow> Svalid (s_of_ns t)", "apply(rule)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n na t gs g e.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               SEval (a, b) e (s_of_ns t));\n        Suc n = m - na; (na, t) \\<in> deriv s; is_axiom (s_of_ns t);\n        is_env (gs, g) e\\<rbrakk>\n       \\<Longrightarrow> SEval (gs, g) e (s_of_ns t)\n 2. \\<And>n na t.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y u. (y, u) \\<in> deriv s \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t);\n        Suc n = m - na; (na, t) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns t)\\<rbrakk>\n       \\<Longrightarrow> Svalid (s_of_ns t)", "apply(simp add: SEval_def2)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n na t gs g e.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, t) \\<in> deriv s; is_axiom (s_of_ns t);\n        is_env (gs, g) e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns t) \\<and> FEval (gs, g) e f\n 2. \\<And>n na t.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y u. (y, u) \\<in> deriv s \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t);\n        Suc n = m - na; (na, t) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns t)\\<rbrakk>\n       \\<Longrightarrow> Svalid (s_of_ns t)", "apply(simp add: s_of_ns_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n na t gs g e.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f. f \\<in> snd ` set t \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, t) \\<in> deriv s; is_axiom (map snd t);\n        is_env (gs, g) e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> snd ` set t \\<and> FEval (gs, g) e f\n 2. \\<And>n na t.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y u. (y, u) \\<in> deriv s \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t);\n        Suc n = m - na; (na, t) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns t)\\<rbrakk>\n       \\<Longrightarrow> Svalid (s_of_ns t)", "apply(case_tac t)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>n na t gs g e.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f. f \\<in> snd ` set t \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, t) \\<in> deriv s; is_axiom (map snd t);\n        is_env (gs, g) e; t = []\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> snd ` set t \\<and> FEval (gs, g) e f\n 2. \\<And>n na t gs g e a list.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f. f \\<in> snd ` set t \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, t) \\<in> deriv s; is_axiom (map snd t);\n        is_env (gs, g) e; t = a # list\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> snd ` set t \\<and> FEval (gs, g) e f\n 3. \\<And>n na t.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y u. (y, u) \\<in> deriv s \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t);\n        Suc n = m - na; (na, t) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns t)\\<rbrakk>\n       \\<Longrightarrow> Svalid (s_of_ns t)", "apply(simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n na t gs g e a list.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f. f \\<in> snd ` set t \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, t) \\<in> deriv s; is_axiom (map snd t);\n        is_env (gs, g) e; t = a # list\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> snd ` set t \\<and> FEval (gs, g) e f\n 2. \\<And>n na t.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y u. (y, u) \\<in> deriv s \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t);\n        Suc n = m - na; (na, t) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns t)\\<rbrakk>\n       \\<Longrightarrow> Svalid (s_of_ns t)", "apply(simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n na t gs g e a list.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f. f \\<in> snd ` set t \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        (\\<exists>p vs.\n            snd a = PAtom p vs \\<and> NAtom p vs \\<in> snd ` set list) \\<or>\n        (\\<exists>p vs.\n            snd a = NAtom p vs \\<and> PAtom p vs \\<in> snd ` set list);\n        is_env (gs, g) e; t = a # list\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            (f = snd a \\<or> f \\<in> snd ` set list) \\<and>\n                            FEval (gs, g) e f\n 2. \\<And>n na t.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y u. (y, u) \\<in> deriv s \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t);\n        Suc n = m - na; (na, t) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns t)\\<rbrakk>\n       \\<Longrightarrow> Svalid (s_of_ns t)", "apply(erule disjE)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>n na t gs g e a list.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f. f \\<in> snd ` set t \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s; is_env (gs, g) e;\n        t = a # list;\n        \\<exists>p vs.\n           snd a = PAtom p vs \\<and>\n           NAtom p vs \\<in> snd ` set list\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            (f = snd a \\<or> f \\<in> snd ` set list) \\<and>\n                            FEval (gs, g) e f\n 2. \\<And>n na t gs g e a list.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f. f \\<in> snd ` set t \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s; is_env (gs, g) e;\n        t = a # list;\n        \\<exists>p vs.\n           snd a = NAtom p vs \\<and>\n           PAtom p vs \\<in> snd ` set list\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            (f = snd a \\<or> f \\<in> snd ` set list) \\<and>\n                            FEval (gs, g) e f\n 3. \\<And>n na t.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y u. (y, u) \\<in> deriv s \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t);\n        Suc n = m - na; (na, t) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns t)\\<rbrakk>\n       \\<Longrightarrow> Svalid (s_of_ns t)", "apply(elim conjE exE)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>n na t gs g e a list p vs.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f. f \\<in> snd ` set t \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s; is_env (gs, g) e;\n        t = a # list; snd a = PAtom p vs;\n        NAtom p vs \\<in> snd ` set list\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            (f = snd a \\<or> f \\<in> snd ` set list) \\<and>\n                            FEval (gs, g) e f\n 2. \\<And>n na t gs g e a list.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f. f \\<in> snd ` set t \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s; is_env (gs, g) e;\n        t = a # list;\n        \\<exists>p vs.\n           snd a = NAtom p vs \\<and>\n           PAtom p vs \\<in> snd ` set list\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            (f = snd a \\<or> f \\<in> snd ` set list) \\<and>\n                            FEval (gs, g) e f\n 3. \\<And>n na t.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y u. (y, u) \\<in> deriv s \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t);\n        Suc n = m - na; (na, t) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns t)\\<rbrakk>\n       \\<Longrightarrow> Svalid (s_of_ns t)", "apply(subgoal_tac \"FEval (gs,g) e (PAtom p vs) | FEval (gs,g) e (NAtom p vs)\")"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>n na t gs g e a list p vs.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f. f \\<in> snd ` set t \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s; is_env (gs, g) e;\n        t = a # list; snd a = PAtom p vs; NAtom p vs \\<in> snd ` set list;\n        FEval (gs, g) e (PAtom p vs) \\<or>\n        FEval (gs, g) e (NAtom p vs)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            (f = snd a \\<or> f \\<in> snd ` set list) \\<and>\n                            FEval (gs, g) e f\n 2. \\<And>n na t gs g e a list p vs.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f. f \\<in> snd ` set t \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s; is_env (gs, g) e;\n        t = a # list; snd a = PAtom p vs;\n        NAtom p vs \\<in> snd ` set list\\<rbrakk>\n       \\<Longrightarrow> FEval (gs, g) e (PAtom p vs) \\<or>\n                         FEval (gs, g) e (NAtom p vs)\n 3. \\<And>n na t gs g e a list.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f. f \\<in> snd ` set t \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s; is_env (gs, g) e;\n        t = a # list;\n        \\<exists>p vs.\n           snd a = NAtom p vs \\<and>\n           PAtom p vs \\<in> snd ` set list\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            (f = snd a \\<or> f \\<in> snd ` set list) \\<and>\n                            FEval (gs, g) e f\n 4. \\<And>n na t.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y u. (y, u) \\<in> deriv s \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t);\n        Suc n = m - na; (na, t) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns t)\\<rbrakk>\n       \\<Longrightarrow> Svalid (s_of_ns t)", "apply(erule disjE)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>n na t gs g e a list p vs.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f. f \\<in> snd ` set t \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s; is_env (gs, g) e;\n        t = a # list; snd a = PAtom p vs; NAtom p vs \\<in> snd ` set list;\n        FEval (gs, g) e (PAtom p vs)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            (f = snd a \\<or> f \\<in> snd ` set list) \\<and>\n                            FEval (gs, g) e f\n 2. \\<And>n na t gs g e a list p vs.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f. f \\<in> snd ` set t \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s; is_env (gs, g) e;\n        t = a # list; snd a = PAtom p vs; NAtom p vs \\<in> snd ` set list;\n        FEval (gs, g) e (NAtom p vs)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            (f = snd a \\<or> f \\<in> snd ` set list) \\<and>\n                            FEval (gs, g) e f\n 3. \\<And>n na t gs g e a list p vs.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f. f \\<in> snd ` set t \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s; is_env (gs, g) e;\n        t = a # list; snd a = PAtom p vs;\n        NAtom p vs \\<in> snd ` set list\\<rbrakk>\n       \\<Longrightarrow> FEval (gs, g) e (PAtom p vs) \\<or>\n                         FEval (gs, g) e (NAtom p vs)\n 4. \\<And>n na t gs g e a list.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f. f \\<in> snd ` set t \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s; is_env (gs, g) e;\n        t = a # list;\n        \\<exists>p vs.\n           snd a = NAtom p vs \\<and>\n           PAtom p vs \\<in> snd ` set list\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            (f = snd a \\<or> f \\<in> snd ` set list) \\<and>\n                            FEval (gs, g) e f\n 5. \\<And>n na t.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y u. (y, u) \\<in> deriv s \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t);\n        Suc n = m - na; (na, t) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns t)\\<rbrakk>\n       \\<Longrightarrow> Svalid (s_of_ns t)", "apply(force)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>n na t gs g e a list p vs.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f. f \\<in> snd ` set t \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s; is_env (gs, g) e;\n        t = a # list; snd a = PAtom p vs; NAtom p vs \\<in> snd ` set list;\n        FEval (gs, g) e (NAtom p vs)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            (f = snd a \\<or> f \\<in> snd ` set list) \\<and>\n                            FEval (gs, g) e f\n 2. \\<And>n na t gs g e a list p vs.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f. f \\<in> snd ` set t \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s; is_env (gs, g) e;\n        t = a # list; snd a = PAtom p vs;\n        NAtom p vs \\<in> snd ` set list\\<rbrakk>\n       \\<Longrightarrow> FEval (gs, g) e (PAtom p vs) \\<or>\n                         FEval (gs, g) e (NAtom p vs)\n 3. \\<And>n na t gs g e a list.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f. f \\<in> snd ` set t \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s; is_env (gs, g) e;\n        t = a # list;\n        \\<exists>p vs.\n           snd a = NAtom p vs \\<and>\n           PAtom p vs \\<in> snd ` set list\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            (f = snd a \\<or> f \\<in> snd ` set list) \\<and>\n                            FEval (gs, g) e f\n 4. \\<And>n na t.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y u. (y, u) \\<in> deriv s \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t);\n        Suc n = m - na; (na, t) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns t)\\<rbrakk>\n       \\<Longrightarrow> Svalid (s_of_ns t)", "apply(rule_tac x=\"NAtom p vs\" in exI)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>n na t gs g e a list p vs.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f. f \\<in> snd ` set t \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s; is_env (gs, g) e;\n        t = a # list; snd a = PAtom p vs; NAtom p vs \\<in> snd ` set list;\n        FEval (gs, g) e (NAtom p vs)\\<rbrakk>\n       \\<Longrightarrow> (NAtom p vs = snd a \\<or>\n                          NAtom p vs \\<in> snd ` set list) \\<and>\n                         FEval (gs, g) e (NAtom p vs)\n 2. \\<And>n na t gs g e a list p vs.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f. f \\<in> snd ` set t \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s; is_env (gs, g) e;\n        t = a # list; snd a = PAtom p vs;\n        NAtom p vs \\<in> snd ` set list\\<rbrakk>\n       \\<Longrightarrow> FEval (gs, g) e (PAtom p vs) \\<or>\n                         FEval (gs, g) e (NAtom p vs)\n 3. \\<And>n na t gs g e a list.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f. f \\<in> snd ` set t \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s; is_env (gs, g) e;\n        t = a # list;\n        \\<exists>p vs.\n           snd a = NAtom p vs \\<and>\n           PAtom p vs \\<in> snd ` set list\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            (f = snd a \\<or> f \\<in> snd ` set list) \\<and>\n                            FEval (gs, g) e f\n 4. \\<And>n na t.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y u. (y, u) \\<in> deriv s \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t);\n        Suc n = m - na; (na, t) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns t)\\<rbrakk>\n       \\<Longrightarrow> Svalid (s_of_ns t)", "apply(blast)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>n na t gs g e a list p vs.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f. f \\<in> snd ` set t \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s; is_env (gs, g) e;\n        t = a # list; snd a = PAtom p vs;\n        NAtom p vs \\<in> snd ` set list\\<rbrakk>\n       \\<Longrightarrow> FEval (gs, g) e (PAtom p vs) \\<or>\n                         FEval (gs, g) e (NAtom p vs)\n 2. \\<And>n na t gs g e a list.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f. f \\<in> snd ` set t \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s; is_env (gs, g) e;\n        t = a # list;\n        \\<exists>p vs.\n           snd a = NAtom p vs \\<and>\n           PAtom p vs \\<in> snd ` set list\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            (f = snd a \\<or> f \\<in> snd ` set list) \\<and>\n                            FEval (gs, g) e f\n 3. \\<And>n na t.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y u. (y, u) \\<in> deriv s \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t);\n        Suc n = m - na; (na, t) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns t)\\<rbrakk>\n       \\<Longrightarrow> Svalid (s_of_ns t)", "apply(simp add: Let_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n na t gs g e a list.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f. f \\<in> snd ` set t \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s; is_env (gs, g) e;\n        t = a # list;\n        \\<exists>p vs.\n           snd a = NAtom p vs \\<and>\n           PAtom p vs \\<in> snd ` set list\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            (f = snd a \\<or> f \\<in> snd ` set list) \\<and>\n                            FEval (gs, g) e f\n 2. \\<And>n na t.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y u. (y, u) \\<in> deriv s \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t);\n        Suc n = m - na; (na, t) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns t)\\<rbrakk>\n       \\<Longrightarrow> Svalid (s_of_ns t)", "apply(elim conjE exE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n na t gs g e a list p vs.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f. f \\<in> snd ` set t \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s; is_env (gs, g) e;\n        t = a # list; snd a = NAtom p vs;\n        PAtom p vs \\<in> snd ` set list\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            (f = snd a \\<or> f \\<in> snd ` set list) \\<and>\n                            FEval (gs, g) e f\n 2. \\<And>n na t.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y u. (y, u) \\<in> deriv s \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t);\n        Suc n = m - na; (na, t) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns t)\\<rbrakk>\n       \\<Longrightarrow> Svalid (s_of_ns t)", "apply(subgoal_tac \"FEval (gs,g) e (PAtom p vs) | FEval (gs,g) e (NAtom p vs)\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>n na t gs g e a list p vs.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f. f \\<in> snd ` set t \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s; is_env (gs, g) e;\n        t = a # list; snd a = NAtom p vs; PAtom p vs \\<in> snd ` set list;\n        FEval (gs, g) e (PAtom p vs) \\<or>\n        FEval (gs, g) e (NAtom p vs)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            (f = snd a \\<or> f \\<in> snd ` set list) \\<and>\n                            FEval (gs, g) e f\n 2. \\<And>n na t gs g e a list p vs.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f. f \\<in> snd ` set t \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s; is_env (gs, g) e;\n        t = a # list; snd a = NAtom p vs;\n        PAtom p vs \\<in> snd ` set list\\<rbrakk>\n       \\<Longrightarrow> FEval (gs, g) e (PAtom p vs) \\<or>\n                         FEval (gs, g) e (NAtom p vs)\n 3. \\<And>n na t.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y u. (y, u) \\<in> deriv s \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t);\n        Suc n = m - na; (na, t) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns t)\\<rbrakk>\n       \\<Longrightarrow> Svalid (s_of_ns t)", "apply(erule disjE)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>n na t gs g e a list p vs.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f. f \\<in> snd ` set t \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s; is_env (gs, g) e;\n        t = a # list; snd a = NAtom p vs; PAtom p vs \\<in> snd ` set list;\n        FEval (gs, g) e (PAtom p vs)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            (f = snd a \\<or> f \\<in> snd ` set list) \\<and>\n                            FEval (gs, g) e f\n 2. \\<And>n na t gs g e a list p vs.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f. f \\<in> snd ` set t \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s; is_env (gs, g) e;\n        t = a # list; snd a = NAtom p vs; PAtom p vs \\<in> snd ` set list;\n        FEval (gs, g) e (NAtom p vs)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            (f = snd a \\<or> f \\<in> snd ` set list) \\<and>\n                            FEval (gs, g) e f\n 3. \\<And>n na t gs g e a list p vs.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f. f \\<in> snd ` set t \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s; is_env (gs, g) e;\n        t = a # list; snd a = NAtom p vs;\n        PAtom p vs \\<in> snd ` set list\\<rbrakk>\n       \\<Longrightarrow> FEval (gs, g) e (PAtom p vs) \\<or>\n                         FEval (gs, g) e (NAtom p vs)\n 4. \\<And>n na t.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y u. (y, u) \\<in> deriv s \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t);\n        Suc n = m - na; (na, t) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns t)\\<rbrakk>\n       \\<Longrightarrow> Svalid (s_of_ns t)", "apply(rule_tac x=\"PAtom p vs\" in exI)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>n na t gs g e a list p vs.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f. f \\<in> snd ` set t \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s; is_env (gs, g) e;\n        t = a # list; snd a = NAtom p vs; PAtom p vs \\<in> snd ` set list;\n        FEval (gs, g) e (PAtom p vs)\\<rbrakk>\n       \\<Longrightarrow> (PAtom p vs = snd a \\<or>\n                          PAtom p vs \\<in> snd ` set list) \\<and>\n                         FEval (gs, g) e (PAtom p vs)\n 2. \\<And>n na t gs g e a list p vs.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f. f \\<in> snd ` set t \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s; is_env (gs, g) e;\n        t = a # list; snd a = NAtom p vs; PAtom p vs \\<in> snd ` set list;\n        FEval (gs, g) e (NAtom p vs)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            (f = snd a \\<or> f \\<in> snd ` set list) \\<and>\n                            FEval (gs, g) e f\n 3. \\<And>n na t gs g e a list p vs.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f. f \\<in> snd ` set t \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s; is_env (gs, g) e;\n        t = a # list; snd a = NAtom p vs;\n        PAtom p vs \\<in> snd ` set list\\<rbrakk>\n       \\<Longrightarrow> FEval (gs, g) e (PAtom p vs) \\<or>\n                         FEval (gs, g) e (NAtom p vs)\n 4. \\<And>n na t.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y u. (y, u) \\<in> deriv s \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t);\n        Suc n = m - na; (na, t) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns t)\\<rbrakk>\n       \\<Longrightarrow> Svalid (s_of_ns t)", "apply(blast)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>n na t gs g e a list p vs.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f. f \\<in> snd ` set t \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s; is_env (gs, g) e;\n        t = a # list; snd a = NAtom p vs; PAtom p vs \\<in> snd ` set list;\n        FEval (gs, g) e (NAtom p vs)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            (f = snd a \\<or> f \\<in> snd ` set list) \\<and>\n                            FEval (gs, g) e f\n 2. \\<And>n na t gs g e a list p vs.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f. f \\<in> snd ` set t \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s; is_env (gs, g) e;\n        t = a # list; snd a = NAtom p vs;\n        PAtom p vs \\<in> snd ` set list\\<rbrakk>\n       \\<Longrightarrow> FEval (gs, g) e (PAtom p vs) \\<or>\n                         FEval (gs, g) e (NAtom p vs)\n 3. \\<And>n na t.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y u. (y, u) \\<in> deriv s \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t);\n        Suc n = m - na; (na, t) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns t)\\<rbrakk>\n       \\<Longrightarrow> Svalid (s_of_ns t)", "apply(simp)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>n na t gs g e a list p vs.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f. f \\<in> snd ` set t \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s; is_env (gs, g) e;\n        t = a # list; snd a = NAtom p vs; PAtom p vs \\<in> snd ` set list;\n        \\<not> g p (map e vs)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            (f = NAtom p vs \\<or>\n                             f \\<in> snd ` set list) \\<and>\n                            FEval (gs, g) e f\n 2. \\<And>n na t gs g e a list p vs.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f. f \\<in> snd ` set t \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s; is_env (gs, g) e;\n        t = a # list; snd a = NAtom p vs;\n        PAtom p vs \\<in> snd ` set list\\<rbrakk>\n       \\<Longrightarrow> FEval (gs, g) e (PAtom p vs) \\<or>\n                         FEval (gs, g) e (NAtom p vs)\n 3. \\<And>n na t.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y u. (y, u) \\<in> deriv s \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t);\n        Suc n = m - na; (na, t) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns t)\\<rbrakk>\n       \\<Longrightarrow> Svalid (s_of_ns t)", "apply(force)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n na t gs g e a list p vs.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f. f \\<in> snd ` set t \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s; is_env (gs, g) e;\n        t = a # list; snd a = NAtom p vs;\n        PAtom p vs \\<in> snd ` set list\\<rbrakk>\n       \\<Longrightarrow> FEval (gs, g) e (PAtom p vs) \\<or>\n                         FEval (gs, g) e (NAtom p vs)\n 2. \\<And>n na t.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y u. (y, u) \\<in> deriv s \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t);\n        Suc n = m - na; (na, t) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns t)\\<rbrakk>\n       \\<Longrightarrow> Svalid (s_of_ns t)", "apply(simp add: Let_def) \n\n     \\<comment> \\<open>we hit FAll/ FEx cases first\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n na t.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y u. (y, u) \\<in> deriv s \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t);\n        Suc n = m - na; (na, t) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns t)\\<rbrakk>\n       \\<Longrightarrow> Svalid (s_of_ns t)", "apply(case_tac \"\\<exists>(a::nat) f list. t = (a,FAll f)#list\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n na t.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y u. (y, u) \\<in> deriv s \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t);\n        Suc n = m - na; (na, t) \\<in> deriv s; \\<not> is_axiom (s_of_ns t);\n        \\<exists>a f list. t = (a, FAll f) # list\\<rbrakk>\n       \\<Longrightarrow> Svalid (s_of_ns t)\n 2. \\<And>n na t.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y u. (y, u) \\<in> deriv s \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t);\n        Suc n = m - na; (na, t) \\<in> deriv s; \\<not> is_axiom (s_of_ns t);\n        \\<nexists>a f list. t = (a, FAll f) # list\\<rbrakk>\n       \\<Longrightarrow> Svalid (s_of_ns t)", "apply(elim exE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n na t a f list.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y u. (y, u) \\<in> deriv s \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t);\n        Suc n = m - na; (na, t) \\<in> deriv s; \\<not> is_axiom (s_of_ns t);\n        t = (a, FAll f) # list\\<rbrakk>\n       \\<Longrightarrow> Svalid (s_of_ns t)\n 2. \\<And>n na t.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y u. (y, u) \\<in> deriv s \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t);\n        Suc n = m - na; (na, t) \\<in> deriv s; \\<not> is_axiom (s_of_ns t);\n        \\<nexists>a f list. t = (a, FAll f) # list\\<rbrakk>\n       \\<Longrightarrow> Svalid (s_of_ns t)", "apply(simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n na t a f list.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t);\n        Suc n = m - na; (na, (a, FAll f) # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns ((a, FAll f) # list));\n        t = (a, FAll f) # list\\<rbrakk>\n       \\<Longrightarrow> Svalid (s_of_ns ((a, FAll f) # list))\n 2. \\<And>n na t.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y u. (y, u) \\<in> deriv s \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t);\n        Suc n = m - na; (na, t) \\<in> deriv s; \\<not> is_axiom (s_of_ns t);\n        \\<nexists>a f list. t = (a, FAll f) # list\\<rbrakk>\n       \\<Longrightarrow> Svalid (s_of_ns t)", "apply(subgoal_tac \"a = 0\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>n na t a f list.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t);\n        Suc n = m - na; (na, (a, FAll f) # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns ((a, FAll f) # list));\n        t = (a, FAll f) # list; a = 0\\<rbrakk>\n       \\<Longrightarrow> Svalid (s_of_ns ((a, FAll f) # list))\n 2. \\<And>n na t a f list.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t);\n        Suc n = m - na; (na, (a, FAll f) # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns ((a, FAll f) # list));\n        t = (a, FAll f) # list\\<rbrakk>\n       \\<Longrightarrow> a = 0\n 3. \\<And>n na t.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y u. (y, u) \\<in> deriv s \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t);\n        Suc n = m - na; (na, t) \\<in> deriv s; \\<not> is_axiom (s_of_ns t);\n        \\<nexists>a f list. t = (a, FAll f) # list\\<rbrakk>\n       \\<Longrightarrow> Svalid (s_of_ns t)", "prefer 2"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>n na t a f list.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t);\n        Suc n = m - na; (na, (a, FAll f) # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns ((a, FAll f) # list));\n        t = (a, FAll f) # list\\<rbrakk>\n       \\<Longrightarrow> a = 0\n 2. \\<And>n na t a f list.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t);\n        Suc n = m - na; (na, (a, FAll f) # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns ((a, FAll f) # list));\n        t = (a, FAll f) # list; a = 0\\<rbrakk>\n       \\<Longrightarrow> Svalid (s_of_ns ((a, FAll f) # list))\n 3. \\<And>n na t.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y u. (y, u) \\<in> deriv s \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t);\n        Suc n = m - na; (na, t) \\<in> deriv s; \\<not> is_axiom (s_of_ns t);\n        \\<nexists>a f list. t = (a, FAll f) # list\\<rbrakk>\n       \\<Longrightarrow> Svalid (s_of_ns t)", "apply(rule_tac n=na and u=t and A=\"FAll f\" in index0[rule_format])"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>n na t a f list.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t);\n        Suc n = m - na; (na, (a, FAll f) # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns ((a, FAll f) # list));\n        t = (a, FAll f) # list\\<rbrakk>\n       \\<Longrightarrow> init (?s235 n na t a f list)\n 2. \\<And>n na t a f list.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t);\n        Suc n = m - na; (na, (a, FAll f) # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns ((a, FAll f) # list));\n        t = (a, FAll f) # list\\<rbrakk>\n       \\<Longrightarrow> (na, t) \\<in> deriv (?s235 n na t a f list)\n 3. \\<And>n na t a f list.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t);\n        Suc n = m - na; (na, (a, FAll f) # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns ((a, FAll f) # list));\n        t = (a, FAll f) # list\\<rbrakk>\n       \\<Longrightarrow> (a, FAll f) \\<in> set t\n 4. \\<And>n na t a f list.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t);\n        Suc n = m - na; (na, (a, FAll f) # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns ((a, FAll f) # list));\n        t = (a, FAll f) # list\\<rbrakk>\n       \\<Longrightarrow> \\<not> is_FEx (FAll f)\n 5. \\<And>n na t a f list.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t);\n        Suc n = m - na; (na, (a, FAll f) # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns ((a, FAll f) # list));\n        t = (a, FAll f) # list; a = 0\\<rbrakk>\n       \\<Longrightarrow> Svalid (s_of_ns ((a, FAll f) # list))\n 6. \\<And>n na t.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y u. (y, u) \\<in> deriv s \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t);\n        Suc n = m - na; (na, t) \\<in> deriv s; \\<not> is_axiom (s_of_ns t);\n        \\<nexists>a f list. t = (a, FAll f) # list\\<rbrakk>\n       \\<Longrightarrow> Svalid (s_of_ns t)", "apply(assumption)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>n na t a f list.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t);\n        Suc n = m - na; (na, (a, FAll f) # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns ((a, FAll f) # list));\n        t = (a, FAll f) # list\\<rbrakk>\n       \\<Longrightarrow> (na, t) \\<in> deriv s\n 2. \\<And>n na t a f list.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t);\n        Suc n = m - na; (na, (a, FAll f) # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns ((a, FAll f) # list));\n        t = (a, FAll f) # list\\<rbrakk>\n       \\<Longrightarrow> (a, FAll f) \\<in> set t\n 3. \\<And>n na t a f list.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t);\n        Suc n = m - na; (na, (a, FAll f) # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns ((a, FAll f) # list));\n        t = (a, FAll f) # list\\<rbrakk>\n       \\<Longrightarrow> \\<not> is_FEx (FAll f)\n 4. \\<And>n na t a f list.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t);\n        Suc n = m - na; (na, (a, FAll f) # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns ((a, FAll f) # list));\n        t = (a, FAll f) # list; a = 0\\<rbrakk>\n       \\<Longrightarrow> Svalid (s_of_ns ((a, FAll f) # list))\n 5. \\<And>n na t.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y u. (y, u) \\<in> deriv s \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t);\n        Suc n = m - na; (na, t) \\<in> deriv s; \\<not> is_axiom (s_of_ns t);\n        \\<nexists>a f list. t = (a, FAll f) # list\\<rbrakk>\n       \\<Longrightarrow> Svalid (s_of_ns t)", "apply(simp)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>n na t a f list.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t);\n        Suc n = m - na; (na, (a, FAll f) # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns ((a, FAll f) # list));\n        t = (a, FAll f) # list\\<rbrakk>\n       \\<Longrightarrow> (a, FAll f) \\<in> set t\n 2. \\<And>n na t a f list.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t);\n        Suc n = m - na; (na, (a, FAll f) # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns ((a, FAll f) # list));\n        t = (a, FAll f) # list\\<rbrakk>\n       \\<Longrightarrow> \\<not> is_FEx (FAll f)\n 3. \\<And>n na t a f list.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t);\n        Suc n = m - na; (na, (a, FAll f) # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns ((a, FAll f) # list));\n        t = (a, FAll f) # list; a = 0\\<rbrakk>\n       \\<Longrightarrow> Svalid (s_of_ns ((a, FAll f) # list))\n 4. \\<And>n na t.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y u. (y, u) \\<in> deriv s \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t);\n        Suc n = m - na; (na, t) \\<in> deriv s; \\<not> is_axiom (s_of_ns t);\n        \\<nexists>a f list. t = (a, FAll f) # list\\<rbrakk>\n       \\<Longrightarrow> Svalid (s_of_ns t)", "apply(simp)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>n na t a f list.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t);\n        Suc n = m - na; (na, (a, FAll f) # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns ((a, FAll f) # list));\n        t = (a, FAll f) # list\\<rbrakk>\n       \\<Longrightarrow> \\<not> is_FEx (FAll f)\n 2. \\<And>n na t a f list.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t);\n        Suc n = m - na; (na, (a, FAll f) # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns ((a, FAll f) # list));\n        t = (a, FAll f) # list; a = 0\\<rbrakk>\n       \\<Longrightarrow> Svalid (s_of_ns ((a, FAll f) # list))\n 3. \\<And>n na t.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y u. (y, u) \\<in> deriv s \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t);\n        Suc n = m - na; (na, t) \\<in> deriv s; \\<not> is_axiom (s_of_ns t);\n        \\<nexists>a f list. t = (a, FAll f) # list\\<rbrakk>\n       \\<Longrightarrow> Svalid (s_of_ns t)", "apply(simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n na t a f list.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t);\n        Suc n = m - na; (na, (a, FAll f) # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns ((a, FAll f) # list));\n        t = (a, FAll f) # list; a = 0\\<rbrakk>\n       \\<Longrightarrow> Svalid (s_of_ns ((a, FAll f) # list))\n 2. \\<And>n na t.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y u. (y, u) \\<in> deriv s \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t);\n        Suc n = m - na; (na, t) \\<in> deriv s; \\<not> is_axiom (s_of_ns t);\n        \\<nexists>a f list. t = (a, FAll f) # list\\<rbrakk>\n       \\<Longrightarrow> Svalid (s_of_ns t)", "apply(frule_tac deriv.step)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>n na t a f list.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t);\n        Suc n = m - na; (na, (a, FAll f) # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns ((a, FAll f) # list));\n        t = (a, FAll f) # list; a = 0\\<rbrakk>\n       \\<Longrightarrow> ?y236 n na t a f list\n                         \\<in> set (subs ((a, FAll f) # list))\n 2. \\<And>n na t a f list.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t);\n        Suc n = m - na; (na, (a, FAll f) # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns ((a, FAll f) # list));\n        t = (a, FAll f) # list; a = 0;\n        (Suc na, ?y236 n na t a f list) \\<in> deriv s\\<rbrakk>\n       \\<Longrightarrow> Svalid (s_of_ns ((a, FAll f) # list))\n 3. \\<And>n na t.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y u. (y, u) \\<in> deriv s \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t);\n        Suc n = m - na; (na, t) \\<in> deriv s; \\<not> is_axiom (s_of_ns t);\n        \\<nexists>a f list. t = (a, FAll f) # list\\<rbrakk>\n       \\<Longrightarrow> Svalid (s_of_ns t)", "apply(simp add: Let_def)  \\<comment> \\<open>nice use of simp to instantiate\\<close>"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n na t a f list.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t);\n        Suc n = m - na; (na, (a, FAll f) # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns ((a, FAll f) # list));\n        t = (a, FAll f) # list; a = 0;\n        (Suc na, list @ [(a, finst f (newvar (sfv (s_of_ns t))))])\n        \\<in> deriv s\\<rbrakk>\n       \\<Longrightarrow> Svalid (s_of_ns ((a, FAll f) # list))\n 2. \\<And>n na t.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y u. (y, u) \\<in> deriv s \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t);\n        Suc n = m - na; (na, t) \\<in> deriv s; \\<not> is_axiom (s_of_ns t);\n        \\<nexists>a f list. t = (a, FAll f) # list\\<rbrakk>\n       \\<Longrightarrow> Svalid (s_of_ns t)", "apply(drule_tac x=\"Suc na\" in spec, drule_tac x=\"list @ [(0, finst f (newvar (sfv (s_of_ns t))))]\" in spec)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n na t a f list.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        Suc n = m - na; (na, (a, FAll f) # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns ((a, FAll f) # list));\n        t = (a, FAll f) # list; a = 0;\n        (Suc na, list @ [(a, finst f (newvar (sfv (s_of_ns t))))])\n        \\<in> deriv s;\n        n = m - Suc na \\<and>\n        (Suc na, list @ [(0, finst f (newvar (sfv (s_of_ns t))))])\n        \\<in> deriv s \\<longrightarrow>\n        Svalid\n         (s_of_ns\n           (list @ [(0, finst f (newvar (sfv (s_of_ns t))))]))\\<rbrakk>\n       \\<Longrightarrow> Svalid (s_of_ns ((a, FAll f) # list))\n 2. \\<And>n na t.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y u. (y, u) \\<in> deriv s \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t);\n        Suc n = m - na; (na, t) \\<in> deriv s; \\<not> is_axiom (s_of_ns t);\n        \\<nexists>a f list. t = (a, FAll f) # list\\<rbrakk>\n       \\<Longrightarrow> Svalid (s_of_ns t)", "apply(erule impE, simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n na t a f list.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        Suc n = m - na; (na, (a, FAll f) # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns ((a, FAll f) # list));\n        t = (a, FAll f) # list; a = 0;\n        (Suc na, list @ [(a, finst f (newvar (sfv (s_of_ns t))))])\n        \\<in> deriv s;\n        Svalid\n         (s_of_ns\n           (list @ [(0, finst f (newvar (sfv (s_of_ns t))))]))\\<rbrakk>\n       \\<Longrightarrow> Svalid (s_of_ns ((a, FAll f) # list))\n 2. \\<And>n na t.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y u. (y, u) \\<in> deriv s \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t);\n        Suc n = m - na; (na, t) \\<in> deriv s; \\<not> is_axiom (s_of_ns t);\n        \\<nexists>a f list. t = (a, FAll f) # list\\<rbrakk>\n       \\<Longrightarrow> Svalid (s_of_ns t)", "apply(subgoal_tac \"newvar (sfv (s_of_ns t)) \\<notin> set (sfv (s_of_ns t))\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>n na t a f list.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        Suc n = m - na; (na, (a, FAll f) # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns ((a, FAll f) # list));\n        t = (a, FAll f) # list; a = 0;\n        (Suc na, list @ [(a, finst f (newvar (sfv (s_of_ns t))))])\n        \\<in> deriv s;\n        Svalid (s_of_ns (list @ [(0, finst f (newvar (sfv (s_of_ns t))))]));\n        newvar (sfv (s_of_ns t)) \\<notin> set (sfv (s_of_ns t))\\<rbrakk>\n       \\<Longrightarrow> Svalid (s_of_ns ((a, FAll f) # list))\n 2. \\<And>n na t a f list.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        Suc n = m - na; (na, (a, FAll f) # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns ((a, FAll f) # list));\n        t = (a, FAll f) # list; a = 0;\n        (Suc na, list @ [(a, finst f (newvar (sfv (s_of_ns t))))])\n        \\<in> deriv s;\n        Svalid\n         (s_of_ns\n           (list @ [(0, finst f (newvar (sfv (s_of_ns t))))]))\\<rbrakk>\n       \\<Longrightarrow> newvar (sfv (s_of_ns t))\n                         \\<notin> set (sfv (s_of_ns t))\n 3. \\<And>n na t.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y u. (y, u) \\<in> deriv s \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t);\n        Suc n = m - na; (na, t) \\<in> deriv s; \\<not> is_axiom (s_of_ns t);\n        \\<nexists>a f list. t = (a, FAll f) # list\\<rbrakk>\n       \\<Longrightarrow> Svalid (s_of_ns t)", "prefer 2"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>n na t a f list.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        Suc n = m - na; (na, (a, FAll f) # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns ((a, FAll f) # list));\n        t = (a, FAll f) # list; a = 0;\n        (Suc na, list @ [(a, finst f (newvar (sfv (s_of_ns t))))])\n        \\<in> deriv s;\n        Svalid\n         (s_of_ns\n           (list @ [(0, finst f (newvar (sfv (s_of_ns t))))]))\\<rbrakk>\n       \\<Longrightarrow> newvar (sfv (s_of_ns t))\n                         \\<notin> set (sfv (s_of_ns t))\n 2. \\<And>n na t a f list.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        Suc n = m - na; (na, (a, FAll f) # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns ((a, FAll f) # list));\n        t = (a, FAll f) # list; a = 0;\n        (Suc na, list @ [(a, finst f (newvar (sfv (s_of_ns t))))])\n        \\<in> deriv s;\n        Svalid (s_of_ns (list @ [(0, finst f (newvar (sfv (s_of_ns t))))]));\n        newvar (sfv (s_of_ns t)) \\<notin> set (sfv (s_of_ns t))\\<rbrakk>\n       \\<Longrightarrow> Svalid (s_of_ns ((a, FAll f) # list))\n 3. \\<And>n na t.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y u. (y, u) \\<in> deriv s \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t);\n        Suc n = m - na; (na, t) \\<in> deriv s; \\<not> is_axiom (s_of_ns t);\n        \\<nexists>a f list. t = (a, FAll f) # list\\<rbrakk>\n       \\<Longrightarrow> Svalid (s_of_ns t)", "apply(rule newvar)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n na t a f list.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        Suc n = m - na; (na, (a, FAll f) # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns ((a, FAll f) # list));\n        t = (a, FAll f) # list; a = 0;\n        (Suc na, list @ [(a, finst f (newvar (sfv (s_of_ns t))))])\n        \\<in> deriv s;\n        Svalid (s_of_ns (list @ [(0, finst f (newvar (sfv (s_of_ns t))))]));\n        newvar (sfv (s_of_ns t)) \\<notin> set (sfv (s_of_ns t))\\<rbrakk>\n       \\<Longrightarrow> Svalid (s_of_ns ((a, FAll f) # list))\n 2. \\<And>n na t.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y u. (y, u) \\<in> deriv s \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t);\n        Suc n = m - na; (na, t) \\<in> deriv s; \\<not> is_axiom (s_of_ns t);\n        \\<nexists>a f list. t = (a, FAll f) # list\\<rbrakk>\n       \\<Longrightarrow> Svalid (s_of_ns t)", "apply(simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n na t a f list.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        Suc n = m - na; (na, (0, FAll f) # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns ((0, FAll f) # list));\n        t = (0, FAll f) # list; a = 0;\n        (Suc na,\n         list @\n         [(0, finst f (newvar (sfv (s_of_ns ((0, FAll f) # list)))))])\n        \\<in> deriv s;\n        Svalid\n         (s_of_ns\n           (list @\n            [(0, finst f (newvar (sfv (s_of_ns ((0, FAll f) # list)))))]));\n        newvar (sfv (s_of_ns ((0, FAll f) # list)))\n        \\<notin> set (sfv (s_of_ns ((0, FAll f) # list)))\\<rbrakk>\n       \\<Longrightarrow> Svalid (s_of_ns ((0, FAll f) # list))\n 2. \\<And>n na t.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y u. (y, u) \\<in> deriv s \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t);\n        Suc n = m - na; (na, t) \\<in> deriv s; \\<not> is_axiom (s_of_ns t);\n        \\<nexists>a f list. t = (a, FAll f) # list\\<rbrakk>\n       \\<Longrightarrow> Svalid (s_of_ns t)", "apply(simp add: s_of_ns_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n na t a f list.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        Suc n = m - na; (na, (0, FAll f) # list) \\<in> deriv s;\n        t = (0, FAll f) # list; a = 0;\n        (Suc na,\n         list @ [(0, finst f (newvar (sfv (FAll f # map snd list))))])\n        \\<in> deriv s;\n        Svalid\n         (map snd list @ [finst f (newvar (sfv (FAll f # map snd list)))]);\n        newvar (sfv (FAll f # map snd list))\n        \\<notin> set (sfv (FAll f # map snd list))\\<rbrakk>\n       \\<Longrightarrow> Svalid (FAll f # map snd list)\n 2. \\<And>n na t.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y u. (y, u) \\<in> deriv s \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t);\n        Suc n = m - na; (na, t) \\<in> deriv s; \\<not> is_axiom (s_of_ns t);\n        \\<nexists>a f list. t = (a, FAll f) # list\\<rbrakk>\n       \\<Longrightarrow> Svalid (s_of_ns t)", "apply(frule_tac sound_FAll)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>n na t a f list.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        Suc n = m - na; (na, (0, FAll f) # list) \\<in> deriv s;\n        t = (0, FAll f) # list; a = 0;\n        (Suc na,\n         list @ [(0, finst f (newvar (sfv (FAll f # map snd list))))])\n        \\<in> deriv s;\n        Svalid\n         (map snd list @ [finst f (newvar (sfv (FAll f # map snd list)))]);\n        newvar (sfv (FAll f # map snd list))\n        \\<notin> set (sfv (FAll f # map snd list))\\<rbrakk>\n       \\<Longrightarrow> Svalid\n                          (map snd list @\n                           [finst f (newvar (sfv (FAll f # map snd list)))])\n 2. \\<And>n na t a f list.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        Suc n = m - na; (na, (0, FAll f) # list) \\<in> deriv s;\n        t = (0, FAll f) # list; a = 0;\n        (Suc na,\n         list @ [(0, finst f (newvar (sfv (FAll f # map snd list))))])\n        \\<in> deriv s;\n        Svalid\n         (map snd list @ [finst f (newvar (sfv (FAll f # map snd list)))]);\n        newvar (sfv (FAll f # map snd list))\n        \\<notin> set (sfv (FAll f # map snd list));\n        Svalid (FAll f # map snd list)\\<rbrakk>\n       \\<Longrightarrow> Svalid (FAll f # map snd list)\n 3. \\<And>n na t.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y u. (y, u) \\<in> deriv s \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t);\n        Suc n = m - na; (na, t) \\<in> deriv s; \\<not> is_axiom (s_of_ns t);\n        \\<nexists>a f list. t = (a, FAll f) # list\\<rbrakk>\n       \\<Longrightarrow> Svalid (s_of_ns t)", "apply(simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n na t a f list.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        Suc n = m - na; (na, (0, FAll f) # list) \\<in> deriv s;\n        t = (0, FAll f) # list; a = 0;\n        (Suc na,\n         list @ [(0, finst f (newvar (sfv (FAll f # map snd list))))])\n        \\<in> deriv s;\n        Svalid\n         (map snd list @ [finst f (newvar (sfv (FAll f # map snd list)))]);\n        newvar (sfv (FAll f # map snd list))\n        \\<notin> set (sfv (FAll f # map snd list));\n        Svalid (FAll f # map snd list)\\<rbrakk>\n       \\<Longrightarrow> Svalid (FAll f # map snd list)\n 2. \\<And>n na t.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y u. (y, u) \\<in> deriv s \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t);\n        Suc n = m - na; (na, t) \\<in> deriv s; \\<not> is_axiom (s_of_ns t);\n        \\<nexists>a f list. t = (a, FAll f) # list\\<rbrakk>\n       \\<Longrightarrow> Svalid (s_of_ns t)", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n na t.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y u. (y, u) \\<in> deriv s \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t);\n        Suc n = m - na; (na, t) \\<in> deriv s; \\<not> is_axiom (s_of_ns t);\n        \\<nexists>a f list. t = (a, FAll f) # list\\<rbrakk>\n       \\<Longrightarrow> Svalid (s_of_ns t)", "apply(case_tac \"\\<exists>a f list. t = (a,FEx f)#list\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n na t.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y u. (y, u) \\<in> deriv s \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t);\n        Suc n = m - na; (na, t) \\<in> deriv s; \\<not> is_axiom (s_of_ns t);\n        \\<nexists>a f list. t = (a, FAll f) # list;\n        \\<exists>a f list. t = (a, FEx f) # list\\<rbrakk>\n       \\<Longrightarrow> Svalid (s_of_ns t)\n 2. \\<And>n na t.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y u. (y, u) \\<in> deriv s \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t);\n        Suc n = m - na; (na, t) \\<in> deriv s; \\<not> is_axiom (s_of_ns t);\n        \\<nexists>a f list. t = (a, FAll f) # list;\n        \\<nexists>a f list. t = (a, FEx f) # list\\<rbrakk>\n       \\<Longrightarrow> Svalid (s_of_ns t)", "apply(elim exE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n na t a f list.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y u. (y, u) \\<in> deriv s \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t);\n        Suc n = m - na; (na, t) \\<in> deriv s; \\<not> is_axiom (s_of_ns t);\n        \\<nexists>a f list. t = (a, FAll f) # list;\n        t = (a, FEx f) # list\\<rbrakk>\n       \\<Longrightarrow> Svalid (s_of_ns t)\n 2. \\<And>n na t.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y u. (y, u) \\<in> deriv s \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t);\n        Suc n = m - na; (na, t) \\<in> deriv s; \\<not> is_axiom (s_of_ns t);\n        \\<nexists>a f list. t = (a, FAll f) # list;\n        \\<nexists>a f list. t = (a, FEx f) # list\\<rbrakk>\n       \\<Longrightarrow> Svalid (s_of_ns t)", "apply(frule_tac deriv.step)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>n na t a f list.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y u. (y, u) \\<in> deriv s \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t);\n        Suc n = m - na; (na, t) \\<in> deriv s; \\<not> is_axiom (s_of_ns t);\n        \\<nexists>a f list. t = (a, FAll f) # list;\n        t = (a, FEx f) # list\\<rbrakk>\n       \\<Longrightarrow> ?y337 n na t a f list \\<in> set (subs t)\n 2. \\<And>n na t a f list.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y u. (y, u) \\<in> deriv s \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t);\n        Suc n = m - na; (na, t) \\<in> deriv s; \\<not> is_axiom (s_of_ns t);\n        \\<nexists>a f list. t = (a, FAll f) # list; t = (a, FEx f) # list;\n        (Suc na, ?y337 n na t a f list) \\<in> deriv s\\<rbrakk>\n       \\<Longrightarrow> Svalid (s_of_ns t)\n 3. \\<And>n na t.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y u. (y, u) \\<in> deriv s \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t);\n        Suc n = m - na; (na, t) \\<in> deriv s; \\<not> is_axiom (s_of_ns t);\n        \\<nexists>a f list. t = (a, FAll f) # list;\n        \\<nexists>a f list. t = (a, FEx f) # list\\<rbrakk>\n       \\<Longrightarrow> Svalid (s_of_ns t)", "apply(simp add: Let_def) \\<comment> \\<open>nice use of simp to instantiate\\<close>"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n na t a f list.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y u. (y, u) \\<in> deriv s \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t);\n        Suc n = m - na; (na, t) \\<in> deriv s; \\<not> is_axiom (s_of_ns t);\n        \\<nexists>a f list. t = (a, FAll f) # list; t = (a, FEx f) # list;\n        (Suc na, list @ [(0, finst f a), (Suc a, FEx f)])\n        \\<in> deriv s\\<rbrakk>\n       \\<Longrightarrow> Svalid (s_of_ns t)\n 2. \\<And>n na t.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y u. (y, u) \\<in> deriv s \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t);\n        Suc n = m - na; (na, t) \\<in> deriv s; \\<not> is_axiom (s_of_ns t);\n        \\<nexists>a f list. t = (a, FAll f) # list;\n        \\<nexists>a f list. t = (a, FEx f) # list\\<rbrakk>\n       \\<Longrightarrow> Svalid (s_of_ns t)", "apply(drule_tac x=\"Suc na\" in spec, drule_tac x=\"list @ [(0, finst f a), (Suc a, FEx f)]\" in spec)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n na t a f list.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t);\n        Suc n = m - na; (na, t) \\<in> deriv s; \\<not> is_axiom (s_of_ns t);\n        \\<nexists>a f list. t = (a, FAll f) # list; t = (a, FEx f) # list;\n        (Suc na, list @ [(0, finst f a), (Suc a, FEx f)]) \\<in> deriv s;\n        (Suc na, list @ [(0, finst f a), (Suc a, FEx f)])\n        \\<in> deriv s \\<longrightarrow>\n        Suc na \\<le> m\\<rbrakk>\n       \\<Longrightarrow> Svalid (s_of_ns t)\n 2. \\<And>n na t.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y u. (y, u) \\<in> deriv s \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t);\n        Suc n = m - na; (na, t) \\<in> deriv s; \\<not> is_axiom (s_of_ns t);\n        \\<nexists>a f list. t = (a, FAll f) # list;\n        \\<nexists>a f list. t = (a, FEx f) # list\\<rbrakk>\n       \\<Longrightarrow> Svalid (s_of_ns t)", "apply(erule impE, assumption)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n na t a f list.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t);\n        Suc n = m - na; (na, t) \\<in> deriv s; \\<not> is_axiom (s_of_ns t);\n        \\<nexists>a f list. t = (a, FAll f) # list; t = (a, FEx f) # list;\n        (Suc na, list @ [(0, finst f a), (Suc a, FEx f)]) \\<in> deriv s;\n        Suc na \\<le> m\\<rbrakk>\n       \\<Longrightarrow> Svalid (s_of_ns t)\n 2. \\<And>n na t.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y u. (y, u) \\<in> deriv s \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t);\n        Suc n = m - na; (na, t) \\<in> deriv s; \\<not> is_axiom (s_of_ns t);\n        \\<nexists>a f list. t = (a, FAll f) # list;\n        \\<nexists>a f list. t = (a, FEx f) # list\\<rbrakk>\n       \\<Longrightarrow> Svalid (s_of_ns t)", "apply(drule_tac x=\"Suc na\" in spec, drule_tac x=\"list @ [(0, finst f a), (Suc a, FEx f)]\" in spec)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n na t a f list.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        Suc n = m - na; (na, t) \\<in> deriv s; \\<not> is_axiom (s_of_ns t);\n        \\<nexists>a f list. t = (a, FAll f) # list; t = (a, FEx f) # list;\n        (Suc na, list @ [(0, finst f a), (Suc a, FEx f)]) \\<in> deriv s;\n        Suc na \\<le> m;\n        n = m - Suc na \\<and>\n        (Suc na, list @ [(0, finst f a), (Suc a, FEx f)])\n        \\<in> deriv s \\<longrightarrow>\n        Svalid (s_of_ns (list @ [(0, finst f a), (Suc a, FEx f)]))\\<rbrakk>\n       \\<Longrightarrow> Svalid (s_of_ns t)\n 2. \\<And>n na t.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y u. (y, u) \\<in> deriv s \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t);\n        Suc n = m - na; (na, t) \\<in> deriv s; \\<not> is_axiom (s_of_ns t);\n        \\<nexists>a f list. t = (a, FAll f) # list;\n        \\<nexists>a f list. t = (a, FEx f) # list\\<rbrakk>\n       \\<Longrightarrow> Svalid (s_of_ns t)", "apply(erule impE)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>n na t a f list.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        Suc n = m - na; (na, t) \\<in> deriv s; \\<not> is_axiom (s_of_ns t);\n        \\<nexists>a f list. t = (a, FAll f) # list; t = (a, FEx f) # list;\n        (Suc na, list @ [(0, finst f a), (Suc a, FEx f)]) \\<in> deriv s;\n        Suc na \\<le> m\\<rbrakk>\n       \\<Longrightarrow> n = m - Suc na \\<and>\n                         (Suc na, list @ [(0, finst f a), (Suc a, FEx f)])\n                         \\<in> deriv s\n 2. \\<And>n na t a f list.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        Suc n = m - na; (na, t) \\<in> deriv s; \\<not> is_axiom (s_of_ns t);\n        \\<nexists>a f list. t = (a, FAll f) # list; t = (a, FEx f) # list;\n        (Suc na, list @ [(0, finst f a), (Suc a, FEx f)]) \\<in> deriv s;\n        Suc na \\<le> m;\n        Svalid (s_of_ns (list @ [(0, finst f a), (Suc a, FEx f)]))\\<rbrakk>\n       \\<Longrightarrow> Svalid (s_of_ns t)\n 3. \\<And>n na t.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y u. (y, u) \\<in> deriv s \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t);\n        Suc n = m - na; (na, t) \\<in> deriv s; \\<not> is_axiom (s_of_ns t);\n        \\<nexists>a f list. t = (a, FAll f) # list;\n        \\<nexists>a f list. t = (a, FEx f) # list\\<rbrakk>\n       \\<Longrightarrow> Svalid (s_of_ns t)", "apply(rule)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>n na t a f list.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        Suc n = m - na; (na, t) \\<in> deriv s; \\<not> is_axiom (s_of_ns t);\n        \\<nexists>a f list. t = (a, FAll f) # list; t = (a, FEx f) # list;\n        (Suc na, list @ [(0, finst f a), (Suc a, FEx f)]) \\<in> deriv s;\n        Suc na \\<le> m\\<rbrakk>\n       \\<Longrightarrow> n = m - Suc na\n 2. \\<And>n na t a f list.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        Suc n = m - na; (na, t) \\<in> deriv s; \\<not> is_axiom (s_of_ns t);\n        \\<nexists>a f list. t = (a, FAll f) # list; t = (a, FEx f) # list;\n        (Suc na, list @ [(0, finst f a), (Suc a, FEx f)]) \\<in> deriv s;\n        Suc na \\<le> m\\<rbrakk>\n       \\<Longrightarrow> (Suc na, list @ [(0, finst f a), (Suc a, FEx f)])\n                         \\<in> deriv s\n 3. \\<And>n na t a f list.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        Suc n = m - na; (na, t) \\<in> deriv s; \\<not> is_axiom (s_of_ns t);\n        \\<nexists>a f list. t = (a, FAll f) # list; t = (a, FEx f) # list;\n        (Suc na, list @ [(0, finst f a), (Suc a, FEx f)]) \\<in> deriv s;\n        Suc na \\<le> m;\n        Svalid (s_of_ns (list @ [(0, finst f a), (Suc a, FEx f)]))\\<rbrakk>\n       \\<Longrightarrow> Svalid (s_of_ns t)\n 4. \\<And>n na t.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y u. (y, u) \\<in> deriv s \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t);\n        Suc n = m - na; (na, t) \\<in> deriv s; \\<not> is_axiom (s_of_ns t);\n        \\<nexists>a f list. t = (a, FAll f) # list;\n        \\<nexists>a f list. t = (a, FEx f) # list\\<rbrakk>\n       \\<Longrightarrow> Svalid (s_of_ns t)", "apply(arith)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>n na t a f list.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        Suc n = m - na; (na, t) \\<in> deriv s; \\<not> is_axiom (s_of_ns t);\n        \\<nexists>a f list. t = (a, FAll f) # list; t = (a, FEx f) # list;\n        (Suc na, list @ [(0, finst f a), (Suc a, FEx f)]) \\<in> deriv s;\n        Suc na \\<le> m\\<rbrakk>\n       \\<Longrightarrow> (Suc na, list @ [(0, finst f a), (Suc a, FEx f)])\n                         \\<in> deriv s\n 2. \\<And>n na t a f list.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        Suc n = m - na; (na, t) \\<in> deriv s; \\<not> is_axiom (s_of_ns t);\n        \\<nexists>a f list. t = (a, FAll f) # list; t = (a, FEx f) # list;\n        (Suc na, list @ [(0, finst f a), (Suc a, FEx f)]) \\<in> deriv s;\n        Suc na \\<le> m;\n        Svalid (s_of_ns (list @ [(0, finst f a), (Suc a, FEx f)]))\\<rbrakk>\n       \\<Longrightarrow> Svalid (s_of_ns t)\n 3. \\<And>n na t.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y u. (y, u) \\<in> deriv s \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t);\n        Suc n = m - na; (na, t) \\<in> deriv s; \\<not> is_axiom (s_of_ns t);\n        \\<nexists>a f list. t = (a, FAll f) # list;\n        \\<nexists>a f list. t = (a, FEx f) # list\\<rbrakk>\n       \\<Longrightarrow> Svalid (s_of_ns t)", "apply(assumption)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n na t a f list.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        Suc n = m - na; (na, t) \\<in> deriv s; \\<not> is_axiom (s_of_ns t);\n        \\<nexists>a f list. t = (a, FAll f) # list; t = (a, FEx f) # list;\n        (Suc na, list @ [(0, finst f a), (Suc a, FEx f)]) \\<in> deriv s;\n        Suc na \\<le> m;\n        Svalid (s_of_ns (list @ [(0, finst f a), (Suc a, FEx f)]))\\<rbrakk>\n       \\<Longrightarrow> Svalid (s_of_ns t)\n 2. \\<And>n na t.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y u. (y, u) \\<in> deriv s \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t);\n        Suc n = m - na; (na, t) \\<in> deriv s; \\<not> is_axiom (s_of_ns t);\n        \\<nexists>a f list. t = (a, FAll f) # list;\n        \\<nexists>a f list. t = (a, FEx f) # list\\<rbrakk>\n       \\<Longrightarrow> Svalid (s_of_ns t)", "apply(subgoal_tac \"Svalid (s_of_ns (list@[(0,finst f a), (Suc a, FEx f)]))\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>n na t a f list.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        Suc n = m - na; (na, t) \\<in> deriv s; \\<not> is_axiom (s_of_ns t);\n        \\<nexists>a f list. t = (a, FAll f) # list; t = (a, FEx f) # list;\n        (Suc na, list @ [(0, finst f a), (Suc a, FEx f)]) \\<in> deriv s;\n        Suc na \\<le> m;\n        Svalid (s_of_ns (list @ [(0, finst f a), (Suc a, FEx f)]));\n        Svalid (s_of_ns (list @ [(0, finst f a), (Suc a, FEx f)]))\\<rbrakk>\n       \\<Longrightarrow> Svalid (s_of_ns t)\n 2. \\<And>n na t a f list.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        Suc n = m - na; (na, t) \\<in> deriv s; \\<not> is_axiom (s_of_ns t);\n        \\<nexists>a f list. t = (a, FAll f) # list; t = (a, FEx f) # list;\n        (Suc na, list @ [(0, finst f a), (Suc a, FEx f)]) \\<in> deriv s;\n        Suc na \\<le> m;\n        Svalid (s_of_ns (list @ [(0, finst f a), (Suc a, FEx f)]))\\<rbrakk>\n       \\<Longrightarrow> Svalid\n                          (s_of_ns\n                            (list @ [(0, finst f a), (Suc a, FEx f)]))\n 3. \\<And>n na t.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y u. (y, u) \\<in> deriv s \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t);\n        Suc n = m - na; (na, t) \\<in> deriv s; \\<not> is_axiom (s_of_ns t);\n        \\<nexists>a f list. t = (a, FAll f) # list;\n        \\<nexists>a f list. t = (a, FEx f) # list\\<rbrakk>\n       \\<Longrightarrow> Svalid (s_of_ns t)", "apply(simp add: s_of_ns_def)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>n na t a f list.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        Suc n = m - na; (na, (a, FEx f) # list) \\<in> deriv s;\n        t = (a, FEx f) # list;\n        (Suc na, list @ [(0, finst f a), (Suc a, FEx f)]) \\<in> deriv s;\n        Suc na \\<le> m; Svalid (map snd list @ [finst f a, FEx f])\\<rbrakk>\n       \\<Longrightarrow> Svalid (FEx f # map snd list)\n 2. \\<And>n na t a f list.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        Suc n = m - na; (na, t) \\<in> deriv s; \\<not> is_axiom (s_of_ns t);\n        \\<nexists>a f list. t = (a, FAll f) # list; t = (a, FEx f) # list;\n        (Suc na, list @ [(0, finst f a), (Suc a, FEx f)]) \\<in> deriv s;\n        Suc na \\<le> m;\n        Svalid (s_of_ns (list @ [(0, finst f a), (Suc a, FEx f)]))\\<rbrakk>\n       \\<Longrightarrow> Svalid\n                          (s_of_ns\n                            (list @ [(0, finst f a), (Suc a, FEx f)]))\n 3. \\<And>n na t.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y u. (y, u) \\<in> deriv s \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t);\n        Suc n = m - na; (na, t) \\<in> deriv s; \\<not> is_axiom (s_of_ns t);\n        \\<nexists>a f list. t = (a, FAll f) # list;\n        \\<nexists>a f list. t = (a, FEx f) # list\\<rbrakk>\n       \\<Longrightarrow> Svalid (s_of_ns t)", "apply(frule_tac sound_FEx)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>n na t a f list.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        Suc n = m - na; (na, (a, FEx f) # list) \\<in> deriv s;\n        t = (a, FEx f) # list;\n        (Suc na, list @ [(0, finst f a), (Suc a, FEx f)]) \\<in> deriv s;\n        Suc na \\<le> m; Svalid (map snd list @ [finst f a, FEx f]);\n        Svalid (FEx f # map snd list)\\<rbrakk>\n       \\<Longrightarrow> Svalid (FEx f # map snd list)\n 2. \\<And>n na t a f list.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        Suc n = m - na; (na, t) \\<in> deriv s; \\<not> is_axiom (s_of_ns t);\n        \\<nexists>a f list. t = (a, FAll f) # list; t = (a, FEx f) # list;\n        (Suc na, list @ [(0, finst f a), (Suc a, FEx f)]) \\<in> deriv s;\n        Suc na \\<le> m;\n        Svalid (s_of_ns (list @ [(0, finst f a), (Suc a, FEx f)]))\\<rbrakk>\n       \\<Longrightarrow> Svalid\n                          (s_of_ns\n                            (list @ [(0, finst f a), (Suc a, FEx f)]))\n 3. \\<And>n na t.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y u. (y, u) \\<in> deriv s \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t);\n        Suc n = m - na; (na, t) \\<in> deriv s; \\<not> is_axiom (s_of_ns t);\n        \\<nexists>a f list. t = (a, FAll f) # list;\n        \\<nexists>a f list. t = (a, FEx f) # list\\<rbrakk>\n       \\<Longrightarrow> Svalid (s_of_ns t)", "apply(simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n na t a f list.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        Suc n = m - na; (na, t) \\<in> deriv s; \\<not> is_axiom (s_of_ns t);\n        \\<nexists>a f list. t = (a, FAll f) # list; t = (a, FEx f) # list;\n        (Suc na, list @ [(0, finst f a), (Suc a, FEx f)]) \\<in> deriv s;\n        Suc na \\<le> m;\n        Svalid (s_of_ns (list @ [(0, finst f a), (Suc a, FEx f)]))\\<rbrakk>\n       \\<Longrightarrow> Svalid\n                          (s_of_ns\n                            (list @ [(0, finst f a), (Suc a, FEx f)]))\n 2. \\<And>n na t.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y u. (y, u) \\<in> deriv s \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t);\n        Suc n = m - na; (na, t) \\<in> deriv s; \\<not> is_axiom (s_of_ns t);\n        \\<nexists>a f list. t = (a, FAll f) # list;\n        \\<nexists>a f list. t = (a, FEx f) # list\\<rbrakk>\n       \\<Longrightarrow> Svalid (s_of_ns t)", "apply(simp)\n   \n  \\<comment> \\<open>now for other cases\\<close> \n      \\<comment> \\<open>case empty list\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n na t.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y u. (y, u) \\<in> deriv s \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t);\n        Suc n = m - na; (na, t) \\<in> deriv s; \\<not> is_axiom (s_of_ns t);\n        \\<nexists>a f list. t = (a, FAll f) # list;\n        \\<nexists>a f list. t = (a, FEx f) # list\\<rbrakk>\n       \\<Longrightarrow> Svalid (s_of_ns t)", "apply(case_tac t)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n na t.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y u. (y, u) \\<in> deriv s \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t);\n        Suc n = m - na; (na, t) \\<in> deriv s; \\<not> is_axiom (s_of_ns t);\n        \\<nexists>a f list. t = (a, FAll f) # list;\n        \\<nexists>a f list. t = (a, FEx f) # list; t = []\\<rbrakk>\n       \\<Longrightarrow> Svalid (s_of_ns t)\n 2. \\<And>n na t a list.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y u. (y, u) \\<in> deriv s \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t);\n        Suc n = m - na; (na, t) \\<in> deriv s; \\<not> is_axiom (s_of_ns t);\n        \\<nexists>a f list. t = (a, FAll f) # list;\n        \\<nexists>a f list. t = (a, FEx f) # list; t = a # list\\<rbrakk>\n       \\<Longrightarrow> Svalid (s_of_ns t)", "apply(simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n na t.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t);\n        Suc n = m - na; (na, []) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns []); t = []\\<rbrakk>\n       \\<Longrightarrow> Svalid (s_of_ns [])\n 2. \\<And>n na t a list.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y u. (y, u) \\<in> deriv s \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t);\n        Suc n = m - na; (na, t) \\<in> deriv s; \\<not> is_axiom (s_of_ns t);\n        \\<nexists>a f list. t = (a, FAll f) # list;\n        \\<nexists>a f list. t = (a, FEx f) # list; t = a # list\\<rbrakk>\n       \\<Longrightarrow> Svalid (s_of_ns t)", "apply(frule_tac step)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>n na t.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t);\n        Suc n = m - na; (na, []) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns []); t = []\\<rbrakk>\n       \\<Longrightarrow> ?y444 n na t \\<in> set (subs [])\n 2. \\<And>n na t.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t);\n        Suc n = m - na; (na, []) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns []); t = [];\n        (Suc na, ?y444 n na t) \\<in> deriv s\\<rbrakk>\n       \\<Longrightarrow> Svalid (s_of_ns [])\n 3. \\<And>n na t a list.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y u. (y, u) \\<in> deriv s \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t);\n        Suc n = m - na; (na, t) \\<in> deriv s; \\<not> is_axiom (s_of_ns t);\n        \\<nexists>a f list. t = (a, FAll f) # list;\n        \\<nexists>a f list. t = (a, FEx f) # list; t = a # list\\<rbrakk>\n       \\<Longrightarrow> Svalid (s_of_ns t)", "apply(simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n na t.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t);\n        Suc n = m - na; (na, []) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns []); t = [];\n        (Suc na, t) \\<in> deriv s\\<rbrakk>\n       \\<Longrightarrow> Svalid (s_of_ns [])\n 2. \\<And>n na t a list.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y u. (y, u) \\<in> deriv s \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t);\n        Suc n = m - na; (na, t) \\<in> deriv s; \\<not> is_axiom (s_of_ns t);\n        \\<nexists>a f list. t = (a, FAll f) # list;\n        \\<nexists>a f list. t = (a, FEx f) # list; t = a # list\\<rbrakk>\n       \\<Longrightarrow> Svalid (s_of_ns t)", "apply(simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n na t.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t);\n        Suc n = m - na; (na, []) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns []); t = [];\n        (Suc na, []) \\<in> deriv s\\<rbrakk>\n       \\<Longrightarrow> Svalid (s_of_ns [])\n 2. \\<And>n na t a list.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y u. (y, u) \\<in> deriv s \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t);\n        Suc n = m - na; (na, t) \\<in> deriv s; \\<not> is_axiom (s_of_ns t);\n        \\<nexists>a f list. t = (a, FAll f) # list;\n        \\<nexists>a f list. t = (a, FEx f) # list; t = a # list\\<rbrakk>\n       \\<Longrightarrow> Svalid (s_of_ns t)", "apply(drule_tac x=\"Suc na\" in spec)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n na t.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t);\n        Suc n = m - na; (na, []) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns []); t = []; (Suc na, []) \\<in> deriv s;\n        (\\<exists>u. (Suc na, u) \\<in> deriv s) \\<longrightarrow>\n        Suc na \\<le> m\\<rbrakk>\n       \\<Longrightarrow> Svalid (s_of_ns [])\n 2. \\<And>n na t a list.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y u. (y, u) \\<in> deriv s \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t);\n        Suc n = m - na; (na, t) \\<in> deriv s; \\<not> is_axiom (s_of_ns t);\n        \\<nexists>a f list. t = (a, FAll f) # list;\n        \\<nexists>a f list. t = (a, FEx f) # list; t = a # list\\<rbrakk>\n       \\<Longrightarrow> Svalid (s_of_ns t)", "back"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n na t.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        Suc n = m - na; (na, []) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns []); t = []; (Suc na, []) \\<in> deriv s;\n        \\<forall>t.\n           n = m - Suc na \\<and> (Suc na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t)\\<rbrakk>\n       \\<Longrightarrow> Svalid (s_of_ns [])\n 2. \\<And>n na t a list.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y u. (y, u) \\<in> deriv s \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t);\n        Suc n = m - na; (na, t) \\<in> deriv s; \\<not> is_axiom (s_of_ns t);\n        \\<nexists>a f list. t = (a, FAll f) # list;\n        \\<nexists>a f list. t = (a, FEx f) # list; t = a # list\\<rbrakk>\n       \\<Longrightarrow> Svalid (s_of_ns t)", "apply(drule_tac x=\"[]\" in spec)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n na t.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        Suc n = m - na; (na, []) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns []); t = []; (Suc na, []) \\<in> deriv s;\n        n = m - Suc na \\<and> (Suc na, []) \\<in> deriv s \\<longrightarrow>\n        Svalid (s_of_ns [])\\<rbrakk>\n       \\<Longrightarrow> Svalid (s_of_ns [])\n 2. \\<And>n na t a list.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y u. (y, u) \\<in> deriv s \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t);\n        Suc n = m - na; (na, t) \\<in> deriv s; \\<not> is_axiom (s_of_ns t);\n        \\<nexists>a f list. t = (a, FAll f) # list;\n        \\<nexists>a f list. t = (a, FEx f) # list; t = a # list\\<rbrakk>\n       \\<Longrightarrow> Svalid (s_of_ns t)", "apply(erule impE)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>n na t.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        Suc n = m - na; (na, []) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns []); t = [];\n        (Suc na, []) \\<in> deriv s\\<rbrakk>\n       \\<Longrightarrow> n = m - Suc na \\<and> (Suc na, []) \\<in> deriv s\n 2. \\<And>n na t.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        Suc n = m - na; (na, []) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns []); t = []; (Suc na, []) \\<in> deriv s;\n        Svalid (s_of_ns [])\\<rbrakk>\n       \\<Longrightarrow> Svalid (s_of_ns [])\n 3. \\<And>n na t a list.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y u. (y, u) \\<in> deriv s \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t);\n        Suc n = m - na; (na, t) \\<in> deriv s; \\<not> is_axiom (s_of_ns t);\n        \\<nexists>a f list. t = (a, FAll f) # list;\n        \\<nexists>a f list. t = (a, FEx f) # list; t = a # list\\<rbrakk>\n       \\<Longrightarrow> Svalid (s_of_ns t)", "apply(rule)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>n na t.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        Suc n = m - na; (na, []) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns []); t = [];\n        (Suc na, []) \\<in> deriv s\\<rbrakk>\n       \\<Longrightarrow> n = m - Suc na\n 2. \\<And>n na t.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        Suc n = m - na; (na, []) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns []); t = [];\n        (Suc na, []) \\<in> deriv s\\<rbrakk>\n       \\<Longrightarrow> (Suc na, []) \\<in> deriv s\n 3. \\<And>n na t.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        Suc n = m - na; (na, []) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns []); t = []; (Suc na, []) \\<in> deriv s;\n        Svalid (s_of_ns [])\\<rbrakk>\n       \\<Longrightarrow> Svalid (s_of_ns [])\n 4. \\<And>n na t a list.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y u. (y, u) \\<in> deriv s \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t);\n        Suc n = m - na; (na, t) \\<in> deriv s; \\<not> is_axiom (s_of_ns t);\n        \\<nexists>a f list. t = (a, FAll f) # list;\n        \\<nexists>a f list. t = (a, FEx f) # list; t = a # list\\<rbrakk>\n       \\<Longrightarrow> Svalid (s_of_ns t)", "apply(arith)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>n na t.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        Suc n = m - na; (na, []) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns []); t = [];\n        (Suc na, []) \\<in> deriv s\\<rbrakk>\n       \\<Longrightarrow> (Suc na, []) \\<in> deriv s\n 2. \\<And>n na t.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        Suc n = m - na; (na, []) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns []); t = []; (Suc na, []) \\<in> deriv s;\n        Svalid (s_of_ns [])\\<rbrakk>\n       \\<Longrightarrow> Svalid (s_of_ns [])\n 3. \\<And>n na t a list.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y u. (y, u) \\<in> deriv s \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t);\n        Suc n = m - na; (na, t) \\<in> deriv s; \\<not> is_axiom (s_of_ns t);\n        \\<nexists>a f list. t = (a, FAll f) # list;\n        \\<nexists>a f list. t = (a, FEx f) # list; t = a # list\\<rbrakk>\n       \\<Longrightarrow> Svalid (s_of_ns t)", "apply(assumption)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n na t.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        Suc n = m - na; (na, []) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns []); t = []; (Suc na, []) \\<in> deriv s;\n        Svalid (s_of_ns [])\\<rbrakk>\n       \\<Longrightarrow> Svalid (s_of_ns [])\n 2. \\<And>n na t a list.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y u. (y, u) \\<in> deriv s \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t);\n        Suc n = m - na; (na, t) \\<in> deriv s; \\<not> is_axiom (s_of_ns t);\n        \\<nexists>a f list. t = (a, FAll f) # list;\n        \\<nexists>a f list. t = (a, FEx f) # list; t = a # list\\<rbrakk>\n       \\<Longrightarrow> Svalid (s_of_ns t)", "apply(assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n na t a list.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y u. (y, u) \\<in> deriv s \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           Svalid (s_of_ns t);\n        Suc n = m - na; (na, t) \\<in> deriv s; \\<not> is_axiom (s_of_ns t);\n        \\<nexists>a f list. t = (a, FAll f) # list;\n        \\<nexists>a f list. t = (a, FEx f) # list; t = a # list\\<rbrakk>\n       \\<Longrightarrow> Svalid (s_of_ns t)", "apply(simp add: Svalid_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n na t a list.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               SEval (a, b) e (s_of_ns t));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list\\<rbrakk>\n       \\<Longrightarrow> \\<forall>aa b e.\n                            is_env (aa, b) e \\<longrightarrow>\n                            SEval (aa, b) e (s_of_ns (a # list))", "apply(rule,rule)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n na t a list aa b.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               SEval (a, b) e (s_of_ns t));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list\\<rbrakk>\n       \\<Longrightarrow> \\<forall>e.\n                            is_env (aa, b) e \\<longrightarrow>\n                            SEval (aa, b) e (s_of_ns (a # list))", "apply(rename_tac gs g)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n na t a list gs g.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               SEval (a, b) e (s_of_ns t));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list\\<rbrakk>\n       \\<Longrightarrow> \\<forall>e.\n                            is_env (gs, g) e \\<longrightarrow>\n                            SEval (gs, g) e (s_of_ns (a # list))", "apply(rule)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n na t a list gs g e.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               SEval (a, b) e (s_of_ns t));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list\\<rbrakk>\n       \\<Longrightarrow> is_env (gs, g) e \\<longrightarrow>\n                         SEval (gs, g) e (s_of_ns (a # list))", "apply(rule)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n na t a list gs g e.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               SEval (a, b) e (s_of_ns t));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e\\<rbrakk>\n       \\<Longrightarrow> SEval (gs, g) e (s_of_ns (a # list))", "apply(simp add: SEval_def2)\n  \\<comment> \\<open>na t in deriv, so too is subs\\<close>\n   \\<comment> \\<open>if not a satax, then subs holds...\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n na t a list gs g e.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f", "apply(case_tac a)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n na t a list gs g e aa b.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f", "apply(case_tac b)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>n na t a list gs g e aa b x11 x12.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = PAtom x11 x12\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 2. \\<And>n na t a list gs g e aa b x21 x22.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = NAtom x21 x22\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 3. \\<And>n na t a list gs g e aa b x31 x32.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FConj x31 x32\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 4. \\<And>n na t a list gs g e aa b x41 x42.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FDisj x41 x42\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 5. \\<And>n na t a list gs g e aa b x5.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 6. \\<And>n na t a list gs g e aa b x6.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f", "apply(simp del: FEval.simps)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>n na t a list gs g e aa b x11 x12.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, (aa, PAtom x11 x12) # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns ((aa, PAtom x11 x12) # list));\n        t = (aa, PAtom x11 x12) # list; is_env (gs, g) e;\n        a = (aa, PAtom x11 x12); b = PAtom x11 x12\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns\n    ((aa, PAtom x11 x12) # list)) \\<and>\n                            FEval (gs, g) e f\n 2. \\<And>n na t a list gs g e aa b x21 x22.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = NAtom x21 x22\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 3. \\<And>n na t a list gs g e aa b x31 x32.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FConj x31 x32\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 4. \\<And>n na t a list gs g e aa b x41 x42.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FDisj x41 x42\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 5. \\<And>n na t a list gs g e aa b x5.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 6. \\<And>n na t a list gs g e aa b x6.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f", "apply(frule_tac patom)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>n na t a list gs g e aa b x11 x12.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, (aa, PAtom x11 x12) # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns ((aa, PAtom x11 x12) # list));\n        t = (aa, PAtom x11 x12) # list; is_env (gs, g) e;\n        a = (aa, PAtom x11 x12); b = PAtom x11 x12\\<rbrakk>\n       \\<Longrightarrow> \\<not> is_axiom\n                                 (s_of_ns ((aa, PAtom x11 x12) # list))\n 2. \\<And>n na t a list gs g e aa b x11 x12.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, (aa, PAtom x11 x12) # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns ((aa, PAtom x11 x12) # list));\n        t = (aa, PAtom x11 x12) # list; is_env (gs, g) e;\n        a = (aa, PAtom x11 x12); b = PAtom x11 x12;\n        (Suc na, list @ [(0, PAtom x11 x12)]) \\<in> deriv s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns\n    ((aa, PAtom x11 x12) # list)) \\<and>\n                            FEval (gs, g) e f\n 3. \\<And>n na t a list gs g e aa b x21 x22.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = NAtom x21 x22\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 4. \\<And>n na t a list gs g e aa b x31 x32.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FConj x31 x32\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 5. \\<And>n na t a list gs g e aa b x41 x42.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FDisj x41 x42\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 6. \\<And>n na t a list gs g e aa b x5.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 7. \\<And>n na t a list gs g e aa b x6.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f", "apply(assumption)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>n na t a list gs g e aa b x11 x12.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, (aa, PAtom x11 x12) # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns ((aa, PAtom x11 x12) # list));\n        t = (aa, PAtom x11 x12) # list; is_env (gs, g) e;\n        a = (aa, PAtom x11 x12); b = PAtom x11 x12;\n        (Suc na, list @ [(0, PAtom x11 x12)]) \\<in> deriv s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns\n    ((aa, PAtom x11 x12) # list)) \\<and>\n                            FEval (gs, g) e f\n 2. \\<And>n na t a list gs g e aa b x21 x22.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = NAtom x21 x22\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 3. \\<And>n na t a list gs g e aa b x31 x32.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FConj x31 x32\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 4. \\<And>n na t a list gs g e aa b x41 x42.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FDisj x41 x42\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 5. \\<And>n na t a list gs g e aa b x5.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 6. \\<And>n na t a list gs g e aa b x6.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f", "apply(rename_tac nat lista)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>n na t a list gs g e aa b nat lista.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, (aa, PAtom nat lista) # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns ((aa, PAtom nat lista) # list));\n        t = (aa, PAtom nat lista) # list; is_env (gs, g) e;\n        a = (aa, PAtom nat lista); b = PAtom nat lista;\n        (Suc na, list @ [(0, PAtom nat lista)]) \\<in> deriv s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns\n    ((aa, PAtom nat lista) # list)) \\<and>\n                            FEval (gs, g) e f\n 2. \\<And>n na t a list gs g e aa b x21 x22.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = NAtom x21 x22\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 3. \\<And>n na t a list gs g e aa b x31 x32.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FConj x31 x32\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 4. \\<And>n na t a list gs g e aa b x41 x42.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FDisj x41 x42\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 5. \\<And>n na t a list gs g e aa b x5.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 6. \\<And>n na t a list gs g e aa b x6.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f", "apply(frule_tac x=\"Suc na\" in spec, drule_tac x=\"list @ [(0, PAtom nat lista)]\" in spec)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>n na t a list gs g e aa b nat lista.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, (aa, PAtom nat lista) # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns ((aa, PAtom nat lista) # list));\n        t = (aa, PAtom nat lista) # list; is_env (gs, g) e;\n        a = (aa, PAtom nat lista); b = PAtom nat lista;\n        (Suc na, list @ [(0, PAtom nat lista)]) \\<in> deriv s;\n        n = m - Suc na \\<and>\n        (Suc na, list @ [(0, PAtom nat lista)])\n        \\<in> deriv s \\<longrightarrow>\n        (\\<forall>a b e.\n            is_env (a, b) e \\<longrightarrow>\n            (\\<exists>f.\n                f \\<in> set (s_of_ns (list @ [(0, PAtom nat lista)])) \\<and>\n                FEval (a, b) e f))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns\n    ((aa, PAtom nat lista) # list)) \\<and>\n                            FEval (gs, g) e f\n 2. \\<And>n na t a list gs g e aa b x21 x22.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = NAtom x21 x22\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 3. \\<And>n na t a list gs g e aa b x31 x32.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FConj x31 x32\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 4. \\<And>n na t a list gs g e aa b x41 x42.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FDisj x41 x42\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 5. \\<And>n na t a list gs g e aa b x5.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 6. \\<And>n na t a list gs g e aa b x6.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f", "apply(erule impE)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>n na t a list gs g e aa b nat lista.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, (aa, PAtom nat lista) # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns ((aa, PAtom nat lista) # list));\n        t = (aa, PAtom nat lista) # list; is_env (gs, g) e;\n        a = (aa, PAtom nat lista); b = PAtom nat lista;\n        (Suc na, list @ [(0, PAtom nat lista)]) \\<in> deriv s\\<rbrakk>\n       \\<Longrightarrow> n = m - Suc na \\<and>\n                         (Suc na, list @ [(0, PAtom nat lista)])\n                         \\<in> deriv s\n 2. \\<And>n na t a list gs g e aa b nat lista.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, (aa, PAtom nat lista) # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns ((aa, PAtom nat lista) # list));\n        t = (aa, PAtom nat lista) # list; is_env (gs, g) e;\n        a = (aa, PAtom nat lista); b = PAtom nat lista;\n        (Suc na, list @ [(0, PAtom nat lista)]) \\<in> deriv s;\n        \\<forall>a b e.\n           is_env (a, b) e \\<longrightarrow>\n           (\\<exists>f.\n               f \\<in> set (s_of_ns (list @ [(0, PAtom nat lista)])) \\<and>\n               FEval (a, b) e f)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns\n    ((aa, PAtom nat lista) # list)) \\<and>\n                            FEval (gs, g) e f\n 3. \\<And>n na t a list gs g e aa b x21 x22.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = NAtom x21 x22\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 4. \\<And>n na t a list gs g e aa b x31 x32.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FConj x31 x32\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 5. \\<And>n na t a list gs g e aa b x41 x42.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FDisj x41 x42\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 6. \\<And>n na t a list gs g e aa b x5.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 7. \\<And>n na t a list gs g e aa b x6.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f", "apply(arith)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>n na t a list gs g e aa b nat lista.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, (aa, PAtom nat lista) # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns ((aa, PAtom nat lista) # list));\n        t = (aa, PAtom nat lista) # list; is_env (gs, g) e;\n        a = (aa, PAtom nat lista); b = PAtom nat lista;\n        (Suc na, list @ [(0, PAtom nat lista)]) \\<in> deriv s;\n        \\<forall>a b e.\n           is_env (a, b) e \\<longrightarrow>\n           (\\<exists>f.\n               f \\<in> set (s_of_ns (list @ [(0, PAtom nat lista)])) \\<and>\n               FEval (a, b) e f)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns\n    ((aa, PAtom nat lista) # list)) \\<and>\n                            FEval (gs, g) e f\n 2. \\<And>n na t a list gs g e aa b x21 x22.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = NAtom x21 x22\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 3. \\<And>n na t a list gs g e aa b x31 x32.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FConj x31 x32\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 4. \\<And>n na t a list gs g e aa b x41 x42.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FDisj x41 x42\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 5. \\<And>n na t a list gs g e aa b x5.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 6. \\<And>n na t a list gs g e aa b x6.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f", "apply(drule_tac x=gs in spec, drule_tac x=g in spec, drule_tac x=e in spec)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>n na t a list gs g e aa b nat lista.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, (aa, PAtom nat lista) # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns ((aa, PAtom nat lista) # list));\n        t = (aa, PAtom nat lista) # list; is_env (gs, g) e;\n        a = (aa, PAtom nat lista); b = PAtom nat lista;\n        (Suc na, list @ [(0, PAtom nat lista)]) \\<in> deriv s;\n        is_env (gs, g) e \\<longrightarrow>\n        (\\<exists>f.\n            f \\<in> set (s_of_ns (list @ [(0, PAtom nat lista)])) \\<and>\n            FEval (gs, g) e f)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns\n    ((aa, PAtom nat lista) # list)) \\<and>\n                            FEval (gs, g) e f\n 2. \\<And>n na t a list gs g e aa b x21 x22.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = NAtom x21 x22\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 3. \\<And>n na t a list gs g e aa b x31 x32.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FConj x31 x32\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 4. \\<And>n na t a list gs g e aa b x41 x42.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FDisj x41 x42\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 5. \\<And>n na t a list gs g e aa b x5.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 6. \\<And>n na t a list gs g e aa b x6.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f", "apply(erule impE)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>n na t a list gs g e aa b nat lista.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, (aa, PAtom nat lista) # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns ((aa, PAtom nat lista) # list));\n        t = (aa, PAtom nat lista) # list; is_env (gs, g) e;\n        a = (aa, PAtom nat lista); b = PAtom nat lista;\n        (Suc na, list @ [(0, PAtom nat lista)]) \\<in> deriv s\\<rbrakk>\n       \\<Longrightarrow> is_env (gs, g) e\n 2. \\<And>n na t a list gs g e aa b nat lista.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, (aa, PAtom nat lista) # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns ((aa, PAtom nat lista) # list));\n        t = (aa, PAtom nat lista) # list; is_env (gs, g) e;\n        a = (aa, PAtom nat lista); b = PAtom nat lista;\n        (Suc na, list @ [(0, PAtom nat lista)]) \\<in> deriv s;\n        \\<exists>f.\n           f \\<in> set (s_of_ns (list @ [(0, PAtom nat lista)])) \\<and>\n           FEval (gs, g) e f\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns\n    ((aa, PAtom nat lista) # list)) \\<and>\n                            FEval (gs, g) e f\n 3. \\<And>n na t a list gs g e aa b x21 x22.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = NAtom x21 x22\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 4. \\<And>n na t a list gs g e aa b x31 x32.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FConj x31 x32\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 5. \\<And>n na t a list gs g e aa b x41 x42.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FDisj x41 x42\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 6. \\<And>n na t a list gs g e aa b x5.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 7. \\<And>n na t a list gs g e aa b x6.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f", "apply(simp add: is_env_def)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>n na t a list gs g e aa b nat lista.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, (aa, PAtom nat lista) # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns ((aa, PAtom nat lista) # list));\n        t = (aa, PAtom nat lista) # list; is_env (gs, g) e;\n        a = (aa, PAtom nat lista); b = PAtom nat lista;\n        (Suc na, list @ [(0, PAtom nat lista)]) \\<in> deriv s;\n        \\<exists>f.\n           f \\<in> set (s_of_ns (list @ [(0, PAtom nat lista)])) \\<and>\n           FEval (gs, g) e f\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns\n    ((aa, PAtom nat lista) # list)) \\<and>\n                            FEval (gs, g) e f\n 2. \\<And>n na t a list gs g e aa b x21 x22.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = NAtom x21 x22\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 3. \\<And>n na t a list gs g e aa b x31 x32.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FConj x31 x32\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 4. \\<And>n na t a list gs g e aa b x41 x42.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FDisj x41 x42\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 5. \\<And>n na t a list gs g e aa b x5.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 6. \\<And>n na t a list gs g e aa b x6.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f", "apply(elim exE conjE)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>n na t a list gs g e aa b nat lista f.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, (aa, PAtom nat lista) # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns ((aa, PAtom nat lista) # list));\n        t = (aa, PAtom nat lista) # list; is_env (gs, g) e;\n        a = (aa, PAtom nat lista); b = PAtom nat lista;\n        (Suc na, list @ [(0, PAtom nat lista)]) \\<in> deriv s;\n        f \\<in> set (s_of_ns (list @ [(0, PAtom nat lista)]));\n        FEval (gs, g) e f\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns\n    ((aa, PAtom nat lista) # list)) \\<and>\n                            FEval (gs, g) e f\n 2. \\<And>n na t a list gs g e aa b x21 x22.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = NAtom x21 x22\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 3. \\<And>n na t a list gs g e aa b x31 x32.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FConj x31 x32\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 4. \\<And>n na t a list gs g e aa b x41 x42.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FDisj x41 x42\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 5. \\<And>n na t a list gs g e aa b x5.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 6. \\<And>n na t a list gs g e aa b x6.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f", "apply(rule_tac x=f in exI)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>n na t a list gs g e aa b nat lista f.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, (aa, PAtom nat lista) # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns ((aa, PAtom nat lista) # list));\n        t = (aa, PAtom nat lista) # list; is_env (gs, g) e;\n        a = (aa, PAtom nat lista); b = PAtom nat lista;\n        (Suc na, list @ [(0, PAtom nat lista)]) \\<in> deriv s;\n        f \\<in> set (s_of_ns (list @ [(0, PAtom nat lista)]));\n        FEval (gs, g) e f\\<rbrakk>\n       \\<Longrightarrow> f \\<in> set (s_of_ns\n ((aa, PAtom nat lista) # list)) \\<and>\n                         FEval (gs, g) e f\n 2. \\<And>n na t a list gs g e aa b x21 x22.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = NAtom x21 x22\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 3. \\<And>n na t a list gs g e aa b x31 x32.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FConj x31 x32\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 4. \\<And>n na t a list gs g e aa b x41 x42.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FDisj x41 x42\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 5. \\<And>n na t a list gs g e aa b x5.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 6. \\<And>n na t a list gs g e aa b x6.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f", "apply(simp add: s_of_ns_def) \\<comment> \\<open>weirdly, simp succeeds, force and blast fail\\<close>"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>n na t a list gs g e aa b x21 x22.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = NAtom x21 x22\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 2. \\<And>n na t a list gs g e aa b x31 x32.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FConj x31 x32\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 3. \\<And>n na t a list gs g e aa b x41 x42.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FDisj x41 x42\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 4. \\<And>n na t a list gs g e aa b x5.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 5. \\<And>n na t a list gs g e aa b x6.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f", "apply(simp del: FEval.simps)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>n na t a list gs g e aa b x21 x22.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, (aa, NAtom x21 x22) # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns ((aa, NAtom x21 x22) # list));\n        t = (aa, NAtom x21 x22) # list; is_env (gs, g) e;\n        a = (aa, NAtom x21 x22); b = NAtom x21 x22\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns\n    ((aa, NAtom x21 x22) # list)) \\<and>\n                            FEval (gs, g) e f\n 2. \\<And>n na t a list gs g e aa b x31 x32.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FConj x31 x32\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 3. \\<And>n na t a list gs g e aa b x41 x42.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FDisj x41 x42\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 4. \\<And>n na t a list gs g e aa b x5.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 5. \\<And>n na t a list gs g e aa b x6.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f", "apply(frule_tac natom)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>n na t a list gs g e aa b x21 x22.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, (aa, NAtom x21 x22) # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns ((aa, NAtom x21 x22) # list));\n        t = (aa, NAtom x21 x22) # list; is_env (gs, g) e;\n        a = (aa, NAtom x21 x22); b = NAtom x21 x22\\<rbrakk>\n       \\<Longrightarrow> \\<not> is_axiom\n                                 (s_of_ns ((aa, NAtom x21 x22) # list))\n 2. \\<And>n na t a list gs g e aa b x21 x22.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, (aa, NAtom x21 x22) # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns ((aa, NAtom x21 x22) # list));\n        t = (aa, NAtom x21 x22) # list; is_env (gs, g) e;\n        a = (aa, NAtom x21 x22); b = NAtom x21 x22;\n        (Suc na, list @ [(0, NAtom x21 x22)]) \\<in> deriv s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns\n    ((aa, NAtom x21 x22) # list)) \\<and>\n                            FEval (gs, g) e f\n 3. \\<And>n na t a list gs g e aa b x31 x32.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FConj x31 x32\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 4. \\<And>n na t a list gs g e aa b x41 x42.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FDisj x41 x42\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 5. \\<And>n na t a list gs g e aa b x5.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 6. \\<And>n na t a list gs g e aa b x6.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f", "apply(assumption)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>n na t a list gs g e aa b x21 x22.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, (aa, NAtom x21 x22) # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns ((aa, NAtom x21 x22) # list));\n        t = (aa, NAtom x21 x22) # list; is_env (gs, g) e;\n        a = (aa, NAtom x21 x22); b = NAtom x21 x22;\n        (Suc na, list @ [(0, NAtom x21 x22)]) \\<in> deriv s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns\n    ((aa, NAtom x21 x22) # list)) \\<and>\n                            FEval (gs, g) e f\n 2. \\<And>n na t a list gs g e aa b x31 x32.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FConj x31 x32\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 3. \\<And>n na t a list gs g e aa b x41 x42.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FDisj x41 x42\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 4. \\<And>n na t a list gs g e aa b x5.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 5. \\<And>n na t a list gs g e aa b x6.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f", "apply(rename_tac nat lista)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>n na t a list gs g e aa b nat lista.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, (aa, NAtom nat lista) # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns ((aa, NAtom nat lista) # list));\n        t = (aa, NAtom nat lista) # list; is_env (gs, g) e;\n        a = (aa, NAtom nat lista); b = NAtom nat lista;\n        (Suc na, list @ [(0, NAtom nat lista)]) \\<in> deriv s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns\n    ((aa, NAtom nat lista) # list)) \\<and>\n                            FEval (gs, g) e f\n 2. \\<And>n na t a list gs g e aa b x31 x32.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FConj x31 x32\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 3. \\<And>n na t a list gs g e aa b x41 x42.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FDisj x41 x42\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 4. \\<And>n na t a list gs g e aa b x5.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 5. \\<And>n na t a list gs g e aa b x6.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f", "apply(frule_tac x=\"Suc na\" in spec, drule_tac x=\"list @ [(0, NAtom nat lista)]\" in spec)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>n na t a list gs g e aa b nat lista.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, (aa, NAtom nat lista) # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns ((aa, NAtom nat lista) # list));\n        t = (aa, NAtom nat lista) # list; is_env (gs, g) e;\n        a = (aa, NAtom nat lista); b = NAtom nat lista;\n        (Suc na, list @ [(0, NAtom nat lista)]) \\<in> deriv s;\n        n = m - Suc na \\<and>\n        (Suc na, list @ [(0, NAtom nat lista)])\n        \\<in> deriv s \\<longrightarrow>\n        (\\<forall>a b e.\n            is_env (a, b) e \\<longrightarrow>\n            (\\<exists>f.\n                f \\<in> set (s_of_ns (list @ [(0, NAtom nat lista)])) \\<and>\n                FEval (a, b) e f))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns\n    ((aa, NAtom nat lista) # list)) \\<and>\n                            FEval (gs, g) e f\n 2. \\<And>n na t a list gs g e aa b x31 x32.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FConj x31 x32\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 3. \\<And>n na t a list gs g e aa b x41 x42.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FDisj x41 x42\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 4. \\<And>n na t a list gs g e aa b x5.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 5. \\<And>n na t a list gs g e aa b x6.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f", "apply(erule impE)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>n na t a list gs g e aa b nat lista.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, (aa, NAtom nat lista) # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns ((aa, NAtom nat lista) # list));\n        t = (aa, NAtom nat lista) # list; is_env (gs, g) e;\n        a = (aa, NAtom nat lista); b = NAtom nat lista;\n        (Suc na, list @ [(0, NAtom nat lista)]) \\<in> deriv s\\<rbrakk>\n       \\<Longrightarrow> n = m - Suc na \\<and>\n                         (Suc na, list @ [(0, NAtom nat lista)])\n                         \\<in> deriv s\n 2. \\<And>n na t a list gs g e aa b nat lista.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, (aa, NAtom nat lista) # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns ((aa, NAtom nat lista) # list));\n        t = (aa, NAtom nat lista) # list; is_env (gs, g) e;\n        a = (aa, NAtom nat lista); b = NAtom nat lista;\n        (Suc na, list @ [(0, NAtom nat lista)]) \\<in> deriv s;\n        \\<forall>a b e.\n           is_env (a, b) e \\<longrightarrow>\n           (\\<exists>f.\n               f \\<in> set (s_of_ns (list @ [(0, NAtom nat lista)])) \\<and>\n               FEval (a, b) e f)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns\n    ((aa, NAtom nat lista) # list)) \\<and>\n                            FEval (gs, g) e f\n 3. \\<And>n na t a list gs g e aa b x31 x32.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FConj x31 x32\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 4. \\<And>n na t a list gs g e aa b x41 x42.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FDisj x41 x42\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 5. \\<And>n na t a list gs g e aa b x5.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 6. \\<And>n na t a list gs g e aa b x6.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f", "apply(arith)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>n na t a list gs g e aa b nat lista.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, (aa, NAtom nat lista) # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns ((aa, NAtom nat lista) # list));\n        t = (aa, NAtom nat lista) # list; is_env (gs, g) e;\n        a = (aa, NAtom nat lista); b = NAtom nat lista;\n        (Suc na, list @ [(0, NAtom nat lista)]) \\<in> deriv s;\n        \\<forall>a b e.\n           is_env (a, b) e \\<longrightarrow>\n           (\\<exists>f.\n               f \\<in> set (s_of_ns (list @ [(0, NAtom nat lista)])) \\<and>\n               FEval (a, b) e f)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns\n    ((aa, NAtom nat lista) # list)) \\<and>\n                            FEval (gs, g) e f\n 2. \\<And>n na t a list gs g e aa b x31 x32.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FConj x31 x32\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 3. \\<And>n na t a list gs g e aa b x41 x42.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FDisj x41 x42\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 4. \\<And>n na t a list gs g e aa b x5.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 5. \\<And>n na t a list gs g e aa b x6.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f", "apply(drule_tac x=gs in spec, drule_tac x=g in spec, drule_tac x=e in spec)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>n na t a list gs g e aa b nat lista.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, (aa, NAtom nat lista) # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns ((aa, NAtom nat lista) # list));\n        t = (aa, NAtom nat lista) # list; is_env (gs, g) e;\n        a = (aa, NAtom nat lista); b = NAtom nat lista;\n        (Suc na, list @ [(0, NAtom nat lista)]) \\<in> deriv s;\n        is_env (gs, g) e \\<longrightarrow>\n        (\\<exists>f.\n            f \\<in> set (s_of_ns (list @ [(0, NAtom nat lista)])) \\<and>\n            FEval (gs, g) e f)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns\n    ((aa, NAtom nat lista) # list)) \\<and>\n                            FEval (gs, g) e f\n 2. \\<And>n na t a list gs g e aa b x31 x32.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FConj x31 x32\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 3. \\<And>n na t a list gs g e aa b x41 x42.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FDisj x41 x42\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 4. \\<And>n na t a list gs g e aa b x5.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 5. \\<And>n na t a list gs g e aa b x6.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f", "apply(erule impE, simp)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>n na t a list gs g e aa b nat lista.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, (aa, NAtom nat lista) # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns ((aa, NAtom nat lista) # list));\n        t = (aa, NAtom nat lista) # list; is_env (gs, g) e;\n        a = (aa, NAtom nat lista); b = NAtom nat lista;\n        (Suc na, list @ [(0, NAtom nat lista)]) \\<in> deriv s;\n        \\<exists>f.\n           f \\<in> set (s_of_ns (list @ [(0, NAtom nat lista)])) \\<and>\n           FEval (gs, g) e f\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns\n    ((aa, NAtom nat lista) # list)) \\<and>\n                            FEval (gs, g) e f\n 2. \\<And>n na t a list gs g e aa b x31 x32.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FConj x31 x32\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 3. \\<And>n na t a list gs g e aa b x41 x42.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FDisj x41 x42\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 4. \\<And>n na t a list gs g e aa b x5.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 5. \\<And>n na t a list gs g e aa b x6.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f", "apply(elim exE conjE)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>n na t a list gs g e aa b nat lista f.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, (aa, NAtom nat lista) # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns ((aa, NAtom nat lista) # list));\n        t = (aa, NAtom nat lista) # list; is_env (gs, g) e;\n        a = (aa, NAtom nat lista); b = NAtom nat lista;\n        (Suc na, list @ [(0, NAtom nat lista)]) \\<in> deriv s;\n        f \\<in> set (s_of_ns (list @ [(0, NAtom nat lista)]));\n        FEval (gs, g) e f\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns\n    ((aa, NAtom nat lista) # list)) \\<and>\n                            FEval (gs, g) e f\n 2. \\<And>n na t a list gs g e aa b x31 x32.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FConj x31 x32\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 3. \\<And>n na t a list gs g e aa b x41 x42.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FDisj x41 x42\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 4. \\<And>n na t a list gs g e aa b x5.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 5. \\<And>n na t a list gs g e aa b x6.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f", "apply(rule_tac x=f in exI)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>n na t a list gs g e aa b nat lista f.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, (aa, NAtom nat lista) # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns ((aa, NAtom nat lista) # list));\n        t = (aa, NAtom nat lista) # list; is_env (gs, g) e;\n        a = (aa, NAtom nat lista); b = NAtom nat lista;\n        (Suc na, list @ [(0, NAtom nat lista)]) \\<in> deriv s;\n        f \\<in> set (s_of_ns (list @ [(0, NAtom nat lista)]));\n        FEval (gs, g) e f\\<rbrakk>\n       \\<Longrightarrow> f \\<in> set (s_of_ns\n ((aa, NAtom nat lista) # list)) \\<and>\n                         FEval (gs, g) e f\n 2. \\<And>n na t a list gs g e aa b x31 x32.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FConj x31 x32\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 3. \\<And>n na t a list gs g e aa b x41 x42.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FDisj x41 x42\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 4. \\<And>n na t a list gs g e aa b x5.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 5. \\<And>n na t a list gs g e aa b x6.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f", "apply(simp add: s_of_ns_def)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>n na t a list gs g e aa b x31 x32.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FConj x31 x32\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 2. \\<And>n na t a list gs g e aa b x41 x42.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FDisj x41 x42\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 3. \\<And>n na t a list gs g e aa b x5.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 4. \\<And>n na t a list gs g e aa b x6.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f", "apply(simp del: FEval.simps)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>n na t a list gs g e aa b x31 x32.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, (aa, FConj x31 x32) # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns ((aa, FConj x31 x32) # list));\n        t = (aa, FConj x31 x32) # list; is_env (gs, g) e;\n        a = (aa, FConj x31 x32); b = FConj x31 x32\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns\n    ((aa, FConj x31 x32) # list)) \\<and>\n                            FEval (gs, g) e f\n 2. \\<And>n na t a list gs g e aa b x41 x42.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FDisj x41 x42\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 3. \\<And>n na t a list gs g e aa b x5.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 4. \\<And>n na t a list gs g e aa b x6.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f", "apply(frule_tac fconj1)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>n na t a list gs g e aa b x31 x32.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, (aa, FConj x31 x32) # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns ((aa, FConj x31 x32) # list));\n        t = (aa, FConj x31 x32) # list; is_env (gs, g) e;\n        a = (aa, FConj x31 x32); b = FConj x31 x32\\<rbrakk>\n       \\<Longrightarrow> \\<not> is_axiom\n                                 (s_of_ns ((aa, FConj x31 x32) # list))\n 2. \\<And>n na t a list gs g e aa b x31 x32.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, (aa, FConj x31 x32) # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns ((aa, FConj x31 x32) # list));\n        t = (aa, FConj x31 x32) # list; is_env (gs, g) e;\n        a = (aa, FConj x31 x32); b = FConj x31 x32;\n        (Suc na, list @ [(0, x31)]) \\<in> deriv s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns\n    ((aa, FConj x31 x32) # list)) \\<and>\n                            FEval (gs, g) e f\n 3. \\<And>n na t a list gs g e aa b x41 x42.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FDisj x41 x42\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 4. \\<And>n na t a list gs g e aa b x5.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 5. \\<And>n na t a list gs g e aa b x6.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f", "apply(assumption)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>n na t a list gs g e aa b x31 x32.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, (aa, FConj x31 x32) # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns ((aa, FConj x31 x32) # list));\n        t = (aa, FConj x31 x32) # list; is_env (gs, g) e;\n        a = (aa, FConj x31 x32); b = FConj x31 x32;\n        (Suc na, list @ [(0, x31)]) \\<in> deriv s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns\n    ((aa, FConj x31 x32) # list)) \\<and>\n                            FEval (gs, g) e f\n 2. \\<And>n na t a list gs g e aa b x41 x42.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FDisj x41 x42\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 3. \\<And>n na t a list gs g e aa b x5.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 4. \\<And>n na t a list gs g e aa b x6.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f", "apply(frule_tac fconj2)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>n na t a list gs g e aa b x31 x32.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, (aa, FConj x31 x32) # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns ((aa, FConj x31 x32) # list));\n        t = (aa, FConj x31 x32) # list; is_env (gs, g) e;\n        a = (aa, FConj x31 x32); b = FConj x31 x32;\n        (Suc na, list @ [(0, x31)]) \\<in> deriv s\\<rbrakk>\n       \\<Longrightarrow> \\<not> is_axiom\n                                 (s_of_ns ((aa, FConj x31 x32) # list))\n 2. \\<And>n na t a list gs g e aa b x31 x32.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, (aa, FConj x31 x32) # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns ((aa, FConj x31 x32) # list));\n        t = (aa, FConj x31 x32) # list; is_env (gs, g) e;\n        a = (aa, FConj x31 x32); b = FConj x31 x32;\n        (Suc na, list @ [(0, x31)]) \\<in> deriv s;\n        (Suc na, list @ [(0, x32)]) \\<in> deriv s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns\n    ((aa, FConj x31 x32) # list)) \\<and>\n                            FEval (gs, g) e f\n 3. \\<And>n na t a list gs g e aa b x41 x42.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FDisj x41 x42\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 4. \\<And>n na t a list gs g e aa b x5.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 5. \\<And>n na t a list gs g e aa b x6.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f", "apply(assumption)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>n na t a list gs g e aa b x31 x32.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, (aa, FConj x31 x32) # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns ((aa, FConj x31 x32) # list));\n        t = (aa, FConj x31 x32) # list; is_env (gs, g) e;\n        a = (aa, FConj x31 x32); b = FConj x31 x32;\n        (Suc na, list @ [(0, x31)]) \\<in> deriv s;\n        (Suc na, list @ [(0, x32)]) \\<in> deriv s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns\n    ((aa, FConj x31 x32) # list)) \\<and>\n                            FEval (gs, g) e f\n 2. \\<And>n na t a list gs g e aa b x41 x42.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FDisj x41 x42\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 3. \\<And>n na t a list gs g e aa b x5.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 4. \\<And>n na t a list gs g e aa b x6.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f", "apply(rename_tac form1 form2)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>n na t a list gs g e aa b form1 form2.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, (aa, FConj form1 form2) # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns ((aa, FConj form1 form2) # list));\n        t = (aa, FConj form1 form2) # list; is_env (gs, g) e;\n        a = (aa, FConj form1 form2); b = FConj form1 form2;\n        (Suc na, list @ [(0, form1)]) \\<in> deriv s;\n        (Suc na, list @ [(0, form2)]) \\<in> deriv s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns\n    ((aa, FConj form1 form2) # list)) \\<and>\n                            FEval (gs, g) e f\n 2. \\<And>n na t a list gs g e aa b x41 x42.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FDisj x41 x42\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 3. \\<And>n na t a list gs g e aa b x5.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 4. \\<And>n na t a list gs g e aa b x6.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f", "apply(frule_tac x=\"Suc na\" in spec, drule_tac x=\"list @ [(0, form1)]\" in spec)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>n na t a list gs g e aa b form1 form2.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, (aa, FConj form1 form2) # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns ((aa, FConj form1 form2) # list));\n        t = (aa, FConj form1 form2) # list; is_env (gs, g) e;\n        a = (aa, FConj form1 form2); b = FConj form1 form2;\n        (Suc na, list @ [(0, form1)]) \\<in> deriv s;\n        (Suc na, list @ [(0, form2)]) \\<in> deriv s;\n        n = m - Suc na \\<and>\n        (Suc na, list @ [(0, form1)]) \\<in> deriv s \\<longrightarrow>\n        (\\<forall>a b e.\n            is_env (a, b) e \\<longrightarrow>\n            (\\<exists>f.\n                f \\<in> set (s_of_ns (list @ [(0, form1)])) \\<and>\n                FEval (a, b) e f))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns\n    ((aa, FConj form1 form2) # list)) \\<and>\n                            FEval (gs, g) e f\n 2. \\<And>n na t a list gs g e aa b x41 x42.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FDisj x41 x42\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 3. \\<And>n na t a list gs g e aa b x5.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 4. \\<And>n na t a list gs g e aa b x6.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f", "apply(erule impE)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>n na t a list gs g e aa b form1 form2.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, (aa, FConj form1 form2) # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns ((aa, FConj form1 form2) # list));\n        t = (aa, FConj form1 form2) # list; is_env (gs, g) e;\n        a = (aa, FConj form1 form2); b = FConj form1 form2;\n        (Suc na, list @ [(0, form1)]) \\<in> deriv s;\n        (Suc na, list @ [(0, form2)]) \\<in> deriv s\\<rbrakk>\n       \\<Longrightarrow> n = m - Suc na \\<and>\n                         (Suc na, list @ [(0, form1)]) \\<in> deriv s\n 2. \\<And>n na t a list gs g e aa b form1 form2.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, (aa, FConj form1 form2) # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns ((aa, FConj form1 form2) # list));\n        t = (aa, FConj form1 form2) # list; is_env (gs, g) e;\n        a = (aa, FConj form1 form2); b = FConj form1 form2;\n        (Suc na, list @ [(0, form1)]) \\<in> deriv s;\n        (Suc na, list @ [(0, form2)]) \\<in> deriv s;\n        \\<forall>a b e.\n           is_env (a, b) e \\<longrightarrow>\n           (\\<exists>f.\n               f \\<in> set (s_of_ns (list @ [(0, form1)])) \\<and>\n               FEval (a, b) e f)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns\n    ((aa, FConj form1 form2) # list)) \\<and>\n                            FEval (gs, g) e f\n 3. \\<And>n na t a list gs g e aa b x41 x42.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FDisj x41 x42\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 4. \\<And>n na t a list gs g e aa b x5.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 5. \\<And>n na t a list gs g e aa b x6.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f", "apply(arith)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>n na t a list gs g e aa b form1 form2.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, (aa, FConj form1 form2) # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns ((aa, FConj form1 form2) # list));\n        t = (aa, FConj form1 form2) # list; is_env (gs, g) e;\n        a = (aa, FConj form1 form2); b = FConj form1 form2;\n        (Suc na, list @ [(0, form1)]) \\<in> deriv s;\n        (Suc na, list @ [(0, form2)]) \\<in> deriv s;\n        \\<forall>a b e.\n           is_env (a, b) e \\<longrightarrow>\n           (\\<exists>f.\n               f \\<in> set (s_of_ns (list @ [(0, form1)])) \\<and>\n               FEval (a, b) e f)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns\n    ((aa, FConj form1 form2) # list)) \\<and>\n                            FEval (gs, g) e f\n 2. \\<And>n na t a list gs g e aa b x41 x42.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FDisj x41 x42\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 3. \\<And>n na t a list gs g e aa b x5.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 4. \\<And>n na t a list gs g e aa b x6.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f", "apply(drule_tac x=gs in spec, drule_tac x=g in spec, drule_tac x=e in spec)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>n na t a list gs g e aa b form1 form2.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, (aa, FConj form1 form2) # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns ((aa, FConj form1 form2) # list));\n        t = (aa, FConj form1 form2) # list; is_env (gs, g) e;\n        a = (aa, FConj form1 form2); b = FConj form1 form2;\n        (Suc na, list @ [(0, form1)]) \\<in> deriv s;\n        (Suc na, list @ [(0, form2)]) \\<in> deriv s;\n        is_env (gs, g) e \\<longrightarrow>\n        (\\<exists>f.\n            f \\<in> set (s_of_ns (list @ [(0, form1)])) \\<and>\n            FEval (gs, g) e f)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns\n    ((aa, FConj form1 form2) # list)) \\<and>\n                            FEval (gs, g) e f\n 2. \\<And>n na t a list gs g e aa b x41 x42.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FDisj x41 x42\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 3. \\<And>n na t a list gs g e aa b x5.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 4. \\<And>n na t a list gs g e aa b x6.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f", "apply(erule impE, simp)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>n na t a list gs g e aa b form1 form2.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, (aa, FConj form1 form2) # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns ((aa, FConj form1 form2) # list));\n        t = (aa, FConj form1 form2) # list; is_env (gs, g) e;\n        a = (aa, FConj form1 form2); b = FConj form1 form2;\n        (Suc na, list @ [(0, form1)]) \\<in> deriv s;\n        (Suc na, list @ [(0, form2)]) \\<in> deriv s;\n        \\<exists>f.\n           f \\<in> set (s_of_ns (list @ [(0, form1)])) \\<and>\n           FEval (gs, g) e f\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns\n    ((aa, FConj form1 form2) # list)) \\<and>\n                            FEval (gs, g) e f\n 2. \\<And>n na t a list gs g e aa b x41 x42.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FDisj x41 x42\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 3. \\<And>n na t a list gs g e aa b x5.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 4. \\<And>n na t a list gs g e aa b x6.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f", "apply(elim exE conjE)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>n na t a list gs g e aa b form1 form2 f.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, (aa, FConj form1 form2) # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns ((aa, FConj form1 form2) # list));\n        t = (aa, FConj form1 form2) # list; is_env (gs, g) e;\n        a = (aa, FConj form1 form2); b = FConj form1 form2;\n        (Suc na, list @ [(0, form1)]) \\<in> deriv s;\n        (Suc na, list @ [(0, form2)]) \\<in> deriv s;\n        f \\<in> set (s_of_ns (list @ [(0, form1)]));\n        FEval (gs, g) e f\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns\n    ((aa, FConj form1 form2) # list)) \\<and>\n                            FEval (gs, g) e f\n 2. \\<And>n na t a list gs g e aa b x41 x42.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FDisj x41 x42\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 3. \\<And>n na t a list gs g e aa b x5.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 4. \\<And>n na t a list gs g e aa b x6.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f", "apply(drule_tac x=\"Suc na\" in spec, drule_tac x=\"list @ [(0, form2)]\" in spec)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>n na t a list gs g e aa b form1 form2 f.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        Suc n = m - na; (na, (aa, FConj form1 form2) # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns ((aa, FConj form1 form2) # list));\n        t = (aa, FConj form1 form2) # list; is_env (gs, g) e;\n        a = (aa, FConj form1 form2); b = FConj form1 form2;\n        (Suc na, list @ [(0, form1)]) \\<in> deriv s;\n        (Suc na, list @ [(0, form2)]) \\<in> deriv s;\n        f \\<in> set (s_of_ns (list @ [(0, form1)])); FEval (gs, g) e f;\n        n = m - Suc na \\<and>\n        (Suc na, list @ [(0, form2)]) \\<in> deriv s \\<longrightarrow>\n        (\\<forall>a b e.\n            is_env (a, b) e \\<longrightarrow>\n            (\\<exists>f.\n                f \\<in> set (s_of_ns (list @ [(0, form2)])) \\<and>\n                FEval (a, b) e f))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns\n    ((aa, FConj form1 form2) # list)) \\<and>\n                            FEval (gs, g) e f\n 2. \\<And>n na t a list gs g e aa b x41 x42.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FDisj x41 x42\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 3. \\<And>n na t a list gs g e aa b x5.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 4. \\<And>n na t a list gs g e aa b x6.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f", "apply(erule impE)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>n na t a list gs g e aa b form1 form2 f.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        Suc n = m - na; (na, (aa, FConj form1 form2) # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns ((aa, FConj form1 form2) # list));\n        t = (aa, FConj form1 form2) # list; is_env (gs, g) e;\n        a = (aa, FConj form1 form2); b = FConj form1 form2;\n        (Suc na, list @ [(0, form1)]) \\<in> deriv s;\n        (Suc na, list @ [(0, form2)]) \\<in> deriv s;\n        f \\<in> set (s_of_ns (list @ [(0, form1)]));\n        FEval (gs, g) e f\\<rbrakk>\n       \\<Longrightarrow> n = m - Suc na \\<and>\n                         (Suc na, list @ [(0, form2)]) \\<in> deriv s\n 2. \\<And>n na t a list gs g e aa b form1 form2 f.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        Suc n = m - na; (na, (aa, FConj form1 form2) # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns ((aa, FConj form1 form2) # list));\n        t = (aa, FConj form1 form2) # list; is_env (gs, g) e;\n        a = (aa, FConj form1 form2); b = FConj form1 form2;\n        (Suc na, list @ [(0, form1)]) \\<in> deriv s;\n        (Suc na, list @ [(0, form2)]) \\<in> deriv s;\n        f \\<in> set (s_of_ns (list @ [(0, form1)])); FEval (gs, g) e f;\n        \\<forall>a b e.\n           is_env (a, b) e \\<longrightarrow>\n           (\\<exists>f.\n               f \\<in> set (s_of_ns (list @ [(0, form2)])) \\<and>\n               FEval (a, b) e f)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns\n    ((aa, FConj form1 form2) # list)) \\<and>\n                            FEval (gs, g) e f\n 3. \\<And>n na t a list gs g e aa b x41 x42.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FDisj x41 x42\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 4. \\<And>n na t a list gs g e aa b x5.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 5. \\<And>n na t a list gs g e aa b x6.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f", "apply(arith)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>n na t a list gs g e aa b form1 form2 f.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        Suc n = m - na; (na, (aa, FConj form1 form2) # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns ((aa, FConj form1 form2) # list));\n        t = (aa, FConj form1 form2) # list; is_env (gs, g) e;\n        a = (aa, FConj form1 form2); b = FConj form1 form2;\n        (Suc na, list @ [(0, form1)]) \\<in> deriv s;\n        (Suc na, list @ [(0, form2)]) \\<in> deriv s;\n        f \\<in> set (s_of_ns (list @ [(0, form1)])); FEval (gs, g) e f;\n        \\<forall>a b e.\n           is_env (a, b) e \\<longrightarrow>\n           (\\<exists>f.\n               f \\<in> set (s_of_ns (list @ [(0, form2)])) \\<and>\n               FEval (a, b) e f)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns\n    ((aa, FConj form1 form2) # list)) \\<and>\n                            FEval (gs, g) e f\n 2. \\<And>n na t a list gs g e aa b x41 x42.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FDisj x41 x42\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 3. \\<And>n na t a list gs g e aa b x5.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 4. \\<And>n na t a list gs g e aa b x6.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f", "apply(drule_tac x=gs in spec, drule_tac x=g in spec, drule_tac x=e in spec)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>n na t a list gs g e aa b form1 form2 f.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        Suc n = m - na; (na, (aa, FConj form1 form2) # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns ((aa, FConj form1 form2) # list));\n        t = (aa, FConj form1 form2) # list; is_env (gs, g) e;\n        a = (aa, FConj form1 form2); b = FConj form1 form2;\n        (Suc na, list @ [(0, form1)]) \\<in> deriv s;\n        (Suc na, list @ [(0, form2)]) \\<in> deriv s;\n        f \\<in> set (s_of_ns (list @ [(0, form1)])); FEval (gs, g) e f;\n        is_env (gs, g) e \\<longrightarrow>\n        (\\<exists>f.\n            f \\<in> set (s_of_ns (list @ [(0, form2)])) \\<and>\n            FEval (gs, g) e f)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns\n    ((aa, FConj form1 form2) # list)) \\<and>\n                            FEval (gs, g) e f\n 2. \\<And>n na t a list gs g e aa b x41 x42.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FDisj x41 x42\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 3. \\<And>n na t a list gs g e aa b x5.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 4. \\<And>n na t a list gs g e aa b x6.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f", "apply(erule impE, simp)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>n na t a list gs g e aa b form1 form2 f.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        Suc n = m - na; (na, (aa, FConj form1 form2) # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns ((aa, FConj form1 form2) # list));\n        t = (aa, FConj form1 form2) # list; is_env (gs, g) e;\n        a = (aa, FConj form1 form2); b = FConj form1 form2;\n        (Suc na, list @ [(0, form1)]) \\<in> deriv s;\n        (Suc na, list @ [(0, form2)]) \\<in> deriv s;\n        f \\<in> set (s_of_ns (list @ [(0, form1)])); FEval (gs, g) e f;\n        \\<exists>f.\n           f \\<in> set (s_of_ns (list @ [(0, form2)])) \\<and>\n           FEval (gs, g) e f\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns\n    ((aa, FConj form1 form2) # list)) \\<and>\n                            FEval (gs, g) e f\n 2. \\<And>n na t a list gs g e aa b x41 x42.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FDisj x41 x42\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 3. \\<And>n na t a list gs g e aa b x5.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 4. \\<And>n na t a list gs g e aa b x6.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f", "apply(elim exE conjE)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>n na t a list gs g e aa b form1 form2 f fa.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        Suc n = m - na; (na, (aa, FConj form1 form2) # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns ((aa, FConj form1 form2) # list));\n        t = (aa, FConj form1 form2) # list; is_env (gs, g) e;\n        a = (aa, FConj form1 form2); b = FConj form1 form2;\n        (Suc na, list @ [(0, form1)]) \\<in> deriv s;\n        (Suc na, list @ [(0, form2)]) \\<in> deriv s;\n        f \\<in> set (s_of_ns (list @ [(0, form1)])); FEval (gs, g) e f;\n        fa \\<in> set (s_of_ns (list @ [(0, form2)]));\n        FEval (gs, g) e fa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns\n    ((aa, FConj form1 form2) # list)) \\<and>\n                            FEval (gs, g) e f\n 2. \\<And>n na t a list gs g e aa b x41 x42.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FDisj x41 x42\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 3. \\<And>n na t a list gs g e aa b x5.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 4. \\<And>n na t a list gs g e aa b x6.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f", "apply(simp only: s_of_ns_def)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>n na t a list gs g e aa b form1 form2 f fa.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        Suc n = m - na; (na, (aa, FConj form1 form2) # list) \\<in> deriv s;\n        \\<not> is_axiom (map snd ((aa, FConj form1 form2) # list));\n        t = (aa, FConj form1 form2) # list; is_env (gs, g) e;\n        a = (aa, FConj form1 form2); b = FConj form1 form2;\n        (Suc na, list @ [(0, form1)]) \\<in> deriv s;\n        (Suc na, list @ [(0, form2)]) \\<in> deriv s;\n        f \\<in> set (map snd (list @ [(0, form1)])); FEval (gs, g) e f;\n        fa \\<in> set (map snd (list @ [(0, form2)]));\n        FEval (gs, g) e fa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (map snd\n    ((aa, FConj form1 form2) # list)) \\<and>\n                            FEval (gs, g) e f\n 2. \\<And>n na t a list gs g e aa b x41 x42.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FDisj x41 x42\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 3. \\<And>n na t a list gs g e aa b x5.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 4. \\<And>n na t a list gs g e aa b x6.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f", "apply(simp)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>n na t a list gs g e aa b form1 form2 f fa.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        Suc n = m - na; (na, (aa, FConj form1 form2) # list) \\<in> deriv s;\n        t = (aa, FConj form1 form2) # list; is_env (gs, g) e;\n        a = (aa, FConj form1 form2); b = FConj form1 form2;\n        (Suc na, list @ [(0, form1)]) \\<in> deriv s;\n        (Suc na, list @ [(0, form2)]) \\<in> deriv s;\n        f = form1 \\<or> f \\<in> snd ` set list; FEval (gs, g) e f;\n        fa = form2 \\<or> fa \\<in> snd ` set list;\n        FEval (gs, g) e fa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            (f = FConj form1 form2 \\<or>\n                             f \\<in> snd ` set list) \\<and>\n                            FEval (gs, g) e f\n 2. \\<And>n na t a list gs g e aa b x41 x42.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FDisj x41 x42\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 3. \\<And>n na t a list gs g e aa b x5.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 4. \\<And>n na t a list gs g e aa b x6.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f", "apply(elim disjE)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>n na t a list gs g e aa b form1 form2 f fa.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        Suc n = m - na; (na, (aa, FConj form1 form2) # list) \\<in> deriv s;\n        t = (aa, FConj form1 form2) # list; is_env (gs, g) e;\n        a = (aa, FConj form1 form2); b = FConj form1 form2;\n        (Suc na, list @ [(0, form1)]) \\<in> deriv s;\n        (Suc na, list @ [(0, form2)]) \\<in> deriv s; FEval (gs, g) e f;\n        FEval (gs, g) e fa; f = form1; fa = form2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            (f = FConj form1 form2 \\<or>\n                             f \\<in> snd ` set list) \\<and>\n                            FEval (gs, g) e f\n 2. \\<And>n na t a list gs g e aa b form1 form2 f fa.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        Suc n = m - na; (na, (aa, FConj form1 form2) # list) \\<in> deriv s;\n        t = (aa, FConj form1 form2) # list; is_env (gs, g) e;\n        a = (aa, FConj form1 form2); b = FConj form1 form2;\n        (Suc na, list @ [(0, form1)]) \\<in> deriv s;\n        (Suc na, list @ [(0, form2)]) \\<in> deriv s; FEval (gs, g) e f;\n        FEval (gs, g) e fa; f = form1; fa \\<in> snd ` set list\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            (f = FConj form1 form2 \\<or>\n                             f \\<in> snd ` set list) \\<and>\n                            FEval (gs, g) e f\n 3. \\<And>n na t a list gs g e aa b form1 form2 f fa.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        Suc n = m - na; (na, (aa, FConj form1 form2) # list) \\<in> deriv s;\n        t = (aa, FConj form1 form2) # list; is_env (gs, g) e;\n        a = (aa, FConj form1 form2); b = FConj form1 form2;\n        (Suc na, list @ [(0, form1)]) \\<in> deriv s;\n        (Suc na, list @ [(0, form2)]) \\<in> deriv s; FEval (gs, g) e f;\n        FEval (gs, g) e fa; f \\<in> snd ` set list; fa = form2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            (f = FConj form1 form2 \\<or>\n                             f \\<in> snd ` set list) \\<and>\n                            FEval (gs, g) e f\n 4. \\<And>n na t a list gs g e aa b form1 form2 f fa.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        Suc n = m - na; (na, (aa, FConj form1 form2) # list) \\<in> deriv s;\n        t = (aa, FConj form1 form2) # list; is_env (gs, g) e;\n        a = (aa, FConj form1 form2); b = FConj form1 form2;\n        (Suc na, list @ [(0, form1)]) \\<in> deriv s;\n        (Suc na, list @ [(0, form2)]) \\<in> deriv s; FEval (gs, g) e f;\n        FEval (gs, g) e fa; f \\<in> snd ` set list;\n        fa \\<in> snd ` set list\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            (f = FConj form1 form2 \\<or>\n                             f \\<in> snd ` set list) \\<and>\n                            FEval (gs, g) e f\n 5. \\<And>n na t a list gs g e aa b x41 x42.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FDisj x41 x42\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 6. \\<And>n na t a list gs g e aa b x5.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 7. \\<And>n na t a list gs g e aa b x6.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f", "apply(simp)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>n na t a list gs g e aa b form1 form2 f fa.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        Suc n = m - na; (na, (aa, FConj form1 form2) # list) \\<in> deriv s;\n        t = (aa, FConj form1 form2) # list; is_env (gs, g) e;\n        a = (aa, FConj form1 form2); b = FConj form1 form2;\n        (Suc na, list @ [(0, form1)]) \\<in> deriv s;\n        (Suc na, list @ [(0, form2)]) \\<in> deriv s; FEval (gs, g) e form1;\n        FEval (gs, g) e form2; f = form1; fa = form2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            (f = FConj form1 form2 \\<or>\n                             f \\<in> snd ` set list) \\<and>\n                            FEval (gs, g) e f\n 2. \\<And>n na t a list gs g e aa b form1 form2 f fa.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        Suc n = m - na; (na, (aa, FConj form1 form2) # list) \\<in> deriv s;\n        t = (aa, FConj form1 form2) # list; is_env (gs, g) e;\n        a = (aa, FConj form1 form2); b = FConj form1 form2;\n        (Suc na, list @ [(0, form1)]) \\<in> deriv s;\n        (Suc na, list @ [(0, form2)]) \\<in> deriv s; FEval (gs, g) e f;\n        FEval (gs, g) e fa; f = form1; fa \\<in> snd ` set list\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            (f = FConj form1 form2 \\<or>\n                             f \\<in> snd ` set list) \\<and>\n                            FEval (gs, g) e f\n 3. \\<And>n na t a list gs g e aa b form1 form2 f fa.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        Suc n = m - na; (na, (aa, FConj form1 form2) # list) \\<in> deriv s;\n        t = (aa, FConj form1 form2) # list; is_env (gs, g) e;\n        a = (aa, FConj form1 form2); b = FConj form1 form2;\n        (Suc na, list @ [(0, form1)]) \\<in> deriv s;\n        (Suc na, list @ [(0, form2)]) \\<in> deriv s; FEval (gs, g) e f;\n        FEval (gs, g) e fa; f \\<in> snd ` set list; fa = form2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            (f = FConj form1 form2 \\<or>\n                             f \\<in> snd ` set list) \\<and>\n                            FEval (gs, g) e f\n 4. \\<And>n na t a list gs g e aa b form1 form2 f fa.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        Suc n = m - na; (na, (aa, FConj form1 form2) # list) \\<in> deriv s;\n        t = (aa, FConj form1 form2) # list; is_env (gs, g) e;\n        a = (aa, FConj form1 form2); b = FConj form1 form2;\n        (Suc na, list @ [(0, form1)]) \\<in> deriv s;\n        (Suc na, list @ [(0, form2)]) \\<in> deriv s; FEval (gs, g) e f;\n        FEval (gs, g) e fa; f \\<in> snd ` set list;\n        fa \\<in> snd ` set list\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            (f = FConj form1 form2 \\<or>\n                             f \\<in> snd ` set list) \\<and>\n                            FEval (gs, g) e f\n 5. \\<And>n na t a list gs g e aa b x41 x42.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FDisj x41 x42\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 6. \\<And>n na t a list gs g e aa b x5.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 7. \\<And>n na t a list gs g e aa b x6.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f", "apply(rule_tac x=\"FConj form1 form2\" in exI)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>n na t a list gs g e aa b form1 form2 f fa.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        Suc n = m - na; (na, (aa, FConj form1 form2) # list) \\<in> deriv s;\n        t = (aa, FConj form1 form2) # list; is_env (gs, g) e;\n        a = (aa, FConj form1 form2); b = FConj form1 form2;\n        (Suc na, list @ [(0, form1)]) \\<in> deriv s;\n        (Suc na, list @ [(0, form2)]) \\<in> deriv s; FEval (gs, g) e form1;\n        FEval (gs, g) e form2; f = form1; fa = form2\\<rbrakk>\n       \\<Longrightarrow> (FConj form1 form2 = FConj form1 form2 \\<or>\n                          FConj form1 form2 \\<in> snd ` set list) \\<and>\n                         FEval (gs, g) e (FConj form1 form2)\n 2. \\<And>n na t a list gs g e aa b form1 form2 f fa.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        Suc n = m - na; (na, (aa, FConj form1 form2) # list) \\<in> deriv s;\n        t = (aa, FConj form1 form2) # list; is_env (gs, g) e;\n        a = (aa, FConj form1 form2); b = FConj form1 form2;\n        (Suc na, list @ [(0, form1)]) \\<in> deriv s;\n        (Suc na, list @ [(0, form2)]) \\<in> deriv s; FEval (gs, g) e f;\n        FEval (gs, g) e fa; f = form1; fa \\<in> snd ` set list\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            (f = FConj form1 form2 \\<or>\n                             f \\<in> snd ` set list) \\<and>\n                            FEval (gs, g) e f\n 3. \\<And>n na t a list gs g e aa b form1 form2 f fa.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        Suc n = m - na; (na, (aa, FConj form1 form2) # list) \\<in> deriv s;\n        t = (aa, FConj form1 form2) # list; is_env (gs, g) e;\n        a = (aa, FConj form1 form2); b = FConj form1 form2;\n        (Suc na, list @ [(0, form1)]) \\<in> deriv s;\n        (Suc na, list @ [(0, form2)]) \\<in> deriv s; FEval (gs, g) e f;\n        FEval (gs, g) e fa; f \\<in> snd ` set list; fa = form2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            (f = FConj form1 form2 \\<or>\n                             f \\<in> snd ` set list) \\<and>\n                            FEval (gs, g) e f\n 4. \\<And>n na t a list gs g e aa b form1 form2 f fa.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        Suc n = m - na; (na, (aa, FConj form1 form2) # list) \\<in> deriv s;\n        t = (aa, FConj form1 form2) # list; is_env (gs, g) e;\n        a = (aa, FConj form1 form2); b = FConj form1 form2;\n        (Suc na, list @ [(0, form1)]) \\<in> deriv s;\n        (Suc na, list @ [(0, form2)]) \\<in> deriv s; FEval (gs, g) e f;\n        FEval (gs, g) e fa; f \\<in> snd ` set list;\n        fa \\<in> snd ` set list\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            (f = FConj form1 form2 \\<or>\n                             f \\<in> snd ` set list) \\<and>\n                            FEval (gs, g) e f\n 5. \\<And>n na t a list gs g e aa b x41 x42.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FDisj x41 x42\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 6. \\<And>n na t a list gs g e aa b x5.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 7. \\<And>n na t a list gs g e aa b x6.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f", "apply(simp)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>n na t a list gs g e aa b form1 form2 f fa.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        Suc n = m - na; (na, (aa, FConj form1 form2) # list) \\<in> deriv s;\n        t = (aa, FConj form1 form2) # list; is_env (gs, g) e;\n        a = (aa, FConj form1 form2); b = FConj form1 form2;\n        (Suc na, list @ [(0, form1)]) \\<in> deriv s;\n        (Suc na, list @ [(0, form2)]) \\<in> deriv s; FEval (gs, g) e f;\n        FEval (gs, g) e fa; f = form1; fa \\<in> snd ` set list\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            (f = FConj form1 form2 \\<or>\n                             f \\<in> snd ` set list) \\<and>\n                            FEval (gs, g) e f\n 2. \\<And>n na t a list gs g e aa b form1 form2 f fa.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        Suc n = m - na; (na, (aa, FConj form1 form2) # list) \\<in> deriv s;\n        t = (aa, FConj form1 form2) # list; is_env (gs, g) e;\n        a = (aa, FConj form1 form2); b = FConj form1 form2;\n        (Suc na, list @ [(0, form1)]) \\<in> deriv s;\n        (Suc na, list @ [(0, form2)]) \\<in> deriv s; FEval (gs, g) e f;\n        FEval (gs, g) e fa; f \\<in> snd ` set list; fa = form2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            (f = FConj form1 form2 \\<or>\n                             f \\<in> snd ` set list) \\<and>\n                            FEval (gs, g) e f\n 3. \\<And>n na t a list gs g e aa b form1 form2 f fa.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        Suc n = m - na; (na, (aa, FConj form1 form2) # list) \\<in> deriv s;\n        t = (aa, FConj form1 form2) # list; is_env (gs, g) e;\n        a = (aa, FConj form1 form2); b = FConj form1 form2;\n        (Suc na, list @ [(0, form1)]) \\<in> deriv s;\n        (Suc na, list @ [(0, form2)]) \\<in> deriv s; FEval (gs, g) e f;\n        FEval (gs, g) e fa; f \\<in> snd ` set list;\n        fa \\<in> snd ` set list\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            (f = FConj form1 form2 \\<or>\n                             f \\<in> snd ` set list) \\<and>\n                            FEval (gs, g) e f\n 4. \\<And>n na t a list gs g e aa b x41 x42.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FDisj x41 x42\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 5. \\<And>n na t a list gs g e aa b x5.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 6. \\<And>n na t a list gs g e aa b x6.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f", "apply(simp)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>n na t a list gs g e aa b form1 form2 f fa.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        Suc n = m - na; (na, (aa, FConj form1 form2) # list) \\<in> deriv s;\n        t = (aa, FConj form1 form2) # list; is_env (gs, g) e;\n        a = (aa, FConj form1 form2); b = FConj form1 form2;\n        (Suc na, list @ [(0, form1)]) \\<in> deriv s;\n        (Suc na, list @ [(0, form2)]) \\<in> deriv s; FEval (gs, g) e form1;\n        FEval (gs, g) e fa; f = form1; fa \\<in> snd ` set list\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            (f = FConj form1 form2 \\<or>\n                             f \\<in> snd ` set list) \\<and>\n                            FEval (gs, g) e f\n 2. \\<And>n na t a list gs g e aa b form1 form2 f fa.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        Suc n = m - na; (na, (aa, FConj form1 form2) # list) \\<in> deriv s;\n        t = (aa, FConj form1 form2) # list; is_env (gs, g) e;\n        a = (aa, FConj form1 form2); b = FConj form1 form2;\n        (Suc na, list @ [(0, form1)]) \\<in> deriv s;\n        (Suc na, list @ [(0, form2)]) \\<in> deriv s; FEval (gs, g) e f;\n        FEval (gs, g) e fa; f \\<in> snd ` set list; fa = form2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            (f = FConj form1 form2 \\<or>\n                             f \\<in> snd ` set list) \\<and>\n                            FEval (gs, g) e f\n 3. \\<And>n na t a list gs g e aa b form1 form2 f fa.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        Suc n = m - na; (na, (aa, FConj form1 form2) # list) \\<in> deriv s;\n        t = (aa, FConj form1 form2) # list; is_env (gs, g) e;\n        a = (aa, FConj form1 form2); b = FConj form1 form2;\n        (Suc na, list @ [(0, form1)]) \\<in> deriv s;\n        (Suc na, list @ [(0, form2)]) \\<in> deriv s; FEval (gs, g) e f;\n        FEval (gs, g) e fa; f \\<in> snd ` set list;\n        fa \\<in> snd ` set list\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            (f = FConj form1 form2 \\<or>\n                             f \\<in> snd ` set list) \\<and>\n                            FEval (gs, g) e f\n 4. \\<And>n na t a list gs g e aa b x41 x42.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FDisj x41 x42\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 5. \\<And>n na t a list gs g e aa b x5.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 6. \\<And>n na t a list gs g e aa b x6.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f", "apply(rule_tac x=\"fa\" in exI)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>n na t a list gs g e aa b form1 form2 f fa.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        Suc n = m - na; (na, (aa, FConj form1 form2) # list) \\<in> deriv s;\n        t = (aa, FConj form1 form2) # list; is_env (gs, g) e;\n        a = (aa, FConj form1 form2); b = FConj form1 form2;\n        (Suc na, list @ [(0, form1)]) \\<in> deriv s;\n        (Suc na, list @ [(0, form2)]) \\<in> deriv s; FEval (gs, g) e form1;\n        FEval (gs, g) e fa; f = form1; fa \\<in> snd ` set list\\<rbrakk>\n       \\<Longrightarrow> (fa = FConj form1 form2 \\<or>\n                          fa \\<in> snd ` set list) \\<and>\n                         FEval (gs, g) e fa\n 2. \\<And>n na t a list gs g e aa b form1 form2 f fa.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        Suc n = m - na; (na, (aa, FConj form1 form2) # list) \\<in> deriv s;\n        t = (aa, FConj form1 form2) # list; is_env (gs, g) e;\n        a = (aa, FConj form1 form2); b = FConj form1 form2;\n        (Suc na, list @ [(0, form1)]) \\<in> deriv s;\n        (Suc na, list @ [(0, form2)]) \\<in> deriv s; FEval (gs, g) e f;\n        FEval (gs, g) e fa; f \\<in> snd ` set list; fa = form2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            (f = FConj form1 form2 \\<or>\n                             f \\<in> snd ` set list) \\<and>\n                            FEval (gs, g) e f\n 3. \\<And>n na t a list gs g e aa b form1 form2 f fa.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        Suc n = m - na; (na, (aa, FConj form1 form2) # list) \\<in> deriv s;\n        t = (aa, FConj form1 form2) # list; is_env (gs, g) e;\n        a = (aa, FConj form1 form2); b = FConj form1 form2;\n        (Suc na, list @ [(0, form1)]) \\<in> deriv s;\n        (Suc na, list @ [(0, form2)]) \\<in> deriv s; FEval (gs, g) e f;\n        FEval (gs, g) e fa; f \\<in> snd ` set list;\n        fa \\<in> snd ` set list\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            (f = FConj form1 form2 \\<or>\n                             f \\<in> snd ` set list) \\<and>\n                            FEval (gs, g) e f\n 4. \\<And>n na t a list gs g e aa b x41 x42.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FDisj x41 x42\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 5. \\<And>n na t a list gs g e aa b x5.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 6. \\<And>n na t a list gs g e aa b x6.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f", "apply(simp)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>n na t a list gs g e aa b form1 form2 f fa.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        Suc n = m - na; (na, (aa, FConj form1 form2) # list) \\<in> deriv s;\n        t = (aa, FConj form1 form2) # list; is_env (gs, g) e;\n        a = (aa, FConj form1 form2); b = FConj form1 form2;\n        (Suc na, list @ [(0, form1)]) \\<in> deriv s;\n        (Suc na, list @ [(0, form2)]) \\<in> deriv s; FEval (gs, g) e f;\n        FEval (gs, g) e fa; f \\<in> snd ` set list; fa = form2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            (f = FConj form1 form2 \\<or>\n                             f \\<in> snd ` set list) \\<and>\n                            FEval (gs, g) e f\n 2. \\<And>n na t a list gs g e aa b form1 form2 f fa.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        Suc n = m - na; (na, (aa, FConj form1 form2) # list) \\<in> deriv s;\n        t = (aa, FConj form1 form2) # list; is_env (gs, g) e;\n        a = (aa, FConj form1 form2); b = FConj form1 form2;\n        (Suc na, list @ [(0, form1)]) \\<in> deriv s;\n        (Suc na, list @ [(0, form2)]) \\<in> deriv s; FEval (gs, g) e f;\n        FEval (gs, g) e fa; f \\<in> snd ` set list;\n        fa \\<in> snd ` set list\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            (f = FConj form1 form2 \\<or>\n                             f \\<in> snd ` set list) \\<and>\n                            FEval (gs, g) e f\n 3. \\<And>n na t a list gs g e aa b x41 x42.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FDisj x41 x42\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 4. \\<And>n na t a list gs g e aa b x5.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 5. \\<And>n na t a list gs g e aa b x6.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f", "apply(simp)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>n na t a list gs g e aa b form1 form2 f fa.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        Suc n = m - na; (na, (aa, FConj form1 form2) # list) \\<in> deriv s;\n        t = (aa, FConj form1 form2) # list; is_env (gs, g) e;\n        a = (aa, FConj form1 form2); b = FConj form1 form2;\n        (Suc na, list @ [(0, form1)]) \\<in> deriv s;\n        (Suc na, list @ [(0, form2)]) \\<in> deriv s; FEval (gs, g) e f;\n        FEval (gs, g) e form2; f \\<in> snd ` set list; fa = form2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            (f = FConj form1 form2 \\<or>\n                             f \\<in> snd ` set list) \\<and>\n                            FEval (gs, g) e f\n 2. \\<And>n na t a list gs g e aa b form1 form2 f fa.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        Suc n = m - na; (na, (aa, FConj form1 form2) # list) \\<in> deriv s;\n        t = (aa, FConj form1 form2) # list; is_env (gs, g) e;\n        a = (aa, FConj form1 form2); b = FConj form1 form2;\n        (Suc na, list @ [(0, form1)]) \\<in> deriv s;\n        (Suc na, list @ [(0, form2)]) \\<in> deriv s; FEval (gs, g) e f;\n        FEval (gs, g) e fa; f \\<in> snd ` set list;\n        fa \\<in> snd ` set list\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            (f = FConj form1 form2 \\<or>\n                             f \\<in> snd ` set list) \\<and>\n                            FEval (gs, g) e f\n 3. \\<And>n na t a list gs g e aa b x41 x42.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FDisj x41 x42\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 4. \\<And>n na t a list gs g e aa b x5.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 5. \\<And>n na t a list gs g e aa b x6.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f", "apply(rule_tac x=\"f\" in exI)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>n na t a list gs g e aa b form1 form2 f fa.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        Suc n = m - na; (na, (aa, FConj form1 form2) # list) \\<in> deriv s;\n        t = (aa, FConj form1 form2) # list; is_env (gs, g) e;\n        a = (aa, FConj form1 form2); b = FConj form1 form2;\n        (Suc na, list @ [(0, form1)]) \\<in> deriv s;\n        (Suc na, list @ [(0, form2)]) \\<in> deriv s; FEval (gs, g) e f;\n        FEval (gs, g) e form2; f \\<in> snd ` set list; fa = form2\\<rbrakk>\n       \\<Longrightarrow> (f = FConj form1 form2 \\<or>\n                          f \\<in> snd ` set list) \\<and>\n                         FEval (gs, g) e f\n 2. \\<And>n na t a list gs g e aa b form1 form2 f fa.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        Suc n = m - na; (na, (aa, FConj form1 form2) # list) \\<in> deriv s;\n        t = (aa, FConj form1 form2) # list; is_env (gs, g) e;\n        a = (aa, FConj form1 form2); b = FConj form1 form2;\n        (Suc na, list @ [(0, form1)]) \\<in> deriv s;\n        (Suc na, list @ [(0, form2)]) \\<in> deriv s; FEval (gs, g) e f;\n        FEval (gs, g) e fa; f \\<in> snd ` set list;\n        fa \\<in> snd ` set list\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            (f = FConj form1 form2 \\<or>\n                             f \\<in> snd ` set list) \\<and>\n                            FEval (gs, g) e f\n 3. \\<And>n na t a list gs g e aa b x41 x42.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FDisj x41 x42\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 4. \\<And>n na t a list gs g e aa b x5.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 5. \\<And>n na t a list gs g e aa b x6.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f", "apply(simp)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>n na t a list gs g e aa b form1 form2 f fa.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        Suc n = m - na; (na, (aa, FConj form1 form2) # list) \\<in> deriv s;\n        t = (aa, FConj form1 form2) # list; is_env (gs, g) e;\n        a = (aa, FConj form1 form2); b = FConj form1 form2;\n        (Suc na, list @ [(0, form1)]) \\<in> deriv s;\n        (Suc na, list @ [(0, form2)]) \\<in> deriv s; FEval (gs, g) e f;\n        FEval (gs, g) e fa; f \\<in> snd ` set list;\n        fa \\<in> snd ` set list\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            (f = FConj form1 form2 \\<or>\n                             f \\<in> snd ` set list) \\<and>\n                            FEval (gs, g) e f\n 2. \\<And>n na t a list gs g e aa b x41 x42.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FDisj x41 x42\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 3. \\<And>n na t a list gs g e aa b x5.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 4. \\<And>n na t a list gs g e aa b x6.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f", "apply(rule_tac x=\"f\" in exI, simp)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>n na t a list gs g e aa b x41 x42.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FDisj x41 x42\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 2. \\<And>n na t a list gs g e aa b x5.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 3. \\<And>n na t a list gs g e aa b x6.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f", "apply(simp del: FEval.simps)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>n na t a list gs g e aa b x41 x42.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, (aa, FDisj x41 x42) # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns ((aa, FDisj x41 x42) # list));\n        t = (aa, FDisj x41 x42) # list; is_env (gs, g) e;\n        a = (aa, FDisj x41 x42); b = FDisj x41 x42\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns\n    ((aa, FDisj x41 x42) # list)) \\<and>\n                            FEval (gs, g) e f\n 2. \\<And>n na t a list gs g e aa b x5.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 3. \\<And>n na t a list gs g e aa b x6.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f", "apply(frule_tac fdisj)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>n na t a list gs g e aa b x41 x42.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, (aa, FDisj x41 x42) # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns ((aa, FDisj x41 x42) # list));\n        t = (aa, FDisj x41 x42) # list; is_env (gs, g) e;\n        a = (aa, FDisj x41 x42); b = FDisj x41 x42\\<rbrakk>\n       \\<Longrightarrow> \\<not> is_axiom\n                                 (s_of_ns ((aa, FDisj x41 x42) # list))\n 2. \\<And>n na t a list gs g e aa b x41 x42.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, (aa, FDisj x41 x42) # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns ((aa, FDisj x41 x42) # list));\n        t = (aa, FDisj x41 x42) # list; is_env (gs, g) e;\n        a = (aa, FDisj x41 x42); b = FDisj x41 x42;\n        (Suc na, list @ [(0, x41), (0, x42)]) \\<in> deriv s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns\n    ((aa, FDisj x41 x42) # list)) \\<and>\n                            FEval (gs, g) e f\n 3. \\<And>n na t a list gs g e aa b x5.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 4. \\<And>n na t a list gs g e aa b x6.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f", "apply(assumption)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>n na t a list gs g e aa b x41 x42.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, (aa, FDisj x41 x42) # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns ((aa, FDisj x41 x42) # list));\n        t = (aa, FDisj x41 x42) # list; is_env (gs, g) e;\n        a = (aa, FDisj x41 x42); b = FDisj x41 x42;\n        (Suc na, list @ [(0, x41), (0, x42)]) \\<in> deriv s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns\n    ((aa, FDisj x41 x42) # list)) \\<and>\n                            FEval (gs, g) e f\n 2. \\<And>n na t a list gs g e aa b x5.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 3. \\<And>n na t a list gs g e aa b x6.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f", "apply(rename_tac form1 form2)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>n na t a list gs g e aa b form1 form2.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, (aa, FDisj form1 form2) # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns ((aa, FDisj form1 form2) # list));\n        t = (aa, FDisj form1 form2) # list; is_env (gs, g) e;\n        a = (aa, FDisj form1 form2); b = FDisj form1 form2;\n        (Suc na, list @ [(0, form1), (0, form2)]) \\<in> deriv s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns\n    ((aa, FDisj form1 form2) # list)) \\<and>\n                            FEval (gs, g) e f\n 2. \\<And>n na t a list gs g e aa b x5.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 3. \\<And>n na t a list gs g e aa b x6.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f", "apply(frule_tac x=\"Suc na\" in spec, drule_tac x=\"list @ [(0, form1),(0,form2)]\" in spec)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>n na t a list gs g e aa b form1 form2.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, (aa, FDisj form1 form2) # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns ((aa, FDisj form1 form2) # list));\n        t = (aa, FDisj form1 form2) # list; is_env (gs, g) e;\n        a = (aa, FDisj form1 form2); b = FDisj form1 form2;\n        (Suc na, list @ [(0, form1), (0, form2)]) \\<in> deriv s;\n        n = m - Suc na \\<and>\n        (Suc na, list @ [(0, form1), (0, form2)])\n        \\<in> deriv s \\<longrightarrow>\n        (\\<forall>a b e.\n            is_env (a, b) e \\<longrightarrow>\n            (\\<exists>f.\n                f \\<in> set (s_of_ns\n                              (list @ [(0, form1), (0, form2)])) \\<and>\n                FEval (a, b) e f))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns\n    ((aa, FDisj form1 form2) # list)) \\<and>\n                            FEval (gs, g) e f\n 2. \\<And>n na t a list gs g e aa b x5.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 3. \\<And>n na t a list gs g e aa b x6.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f", "apply(erule impE)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>n na t a list gs g e aa b form1 form2.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, (aa, FDisj form1 form2) # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns ((aa, FDisj form1 form2) # list));\n        t = (aa, FDisj form1 form2) # list; is_env (gs, g) e;\n        a = (aa, FDisj form1 form2); b = FDisj form1 form2;\n        (Suc na, list @ [(0, form1), (0, form2)]) \\<in> deriv s\\<rbrakk>\n       \\<Longrightarrow> n = m - Suc na \\<and>\n                         (Suc na, list @ [(0, form1), (0, form2)])\n                         \\<in> deriv s\n 2. \\<And>n na t a list gs g e aa b form1 form2.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, (aa, FDisj form1 form2) # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns ((aa, FDisj form1 form2) # list));\n        t = (aa, FDisj form1 form2) # list; is_env (gs, g) e;\n        a = (aa, FDisj form1 form2); b = FDisj form1 form2;\n        (Suc na, list @ [(0, form1), (0, form2)]) \\<in> deriv s;\n        \\<forall>a b e.\n           is_env (a, b) e \\<longrightarrow>\n           (\\<exists>f.\n               f \\<in> set (s_of_ns\n                             (list @ [(0, form1), (0, form2)])) \\<and>\n               FEval (a, b) e f)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns\n    ((aa, FDisj form1 form2) # list)) \\<and>\n                            FEval (gs, g) e f\n 3. \\<And>n na t a list gs g e aa b x5.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 4. \\<And>n na t a list gs g e aa b x6.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f", "apply(arith)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>n na t a list gs g e aa b form1 form2.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, (aa, FDisj form1 form2) # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns ((aa, FDisj form1 form2) # list));\n        t = (aa, FDisj form1 form2) # list; is_env (gs, g) e;\n        a = (aa, FDisj form1 form2); b = FDisj form1 form2;\n        (Suc na, list @ [(0, form1), (0, form2)]) \\<in> deriv s;\n        \\<forall>a b e.\n           is_env (a, b) e \\<longrightarrow>\n           (\\<exists>f.\n               f \\<in> set (s_of_ns\n                             (list @ [(0, form1), (0, form2)])) \\<and>\n               FEval (a, b) e f)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns\n    ((aa, FDisj form1 form2) # list)) \\<and>\n                            FEval (gs, g) e f\n 2. \\<And>n na t a list gs g e aa b x5.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 3. \\<And>n na t a list gs g e aa b x6.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f", "apply(drule_tac x=gs in spec, drule_tac x=g in spec, drule_tac x=e in spec)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>n na t a list gs g e aa b form1 form2.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, (aa, FDisj form1 form2) # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns ((aa, FDisj form1 form2) # list));\n        t = (aa, FDisj form1 form2) # list; is_env (gs, g) e;\n        a = (aa, FDisj form1 form2); b = FDisj form1 form2;\n        (Suc na, list @ [(0, form1), (0, form2)]) \\<in> deriv s;\n        is_env (gs, g) e \\<longrightarrow>\n        (\\<exists>f.\n            f \\<in> set (s_of_ns (list @ [(0, form1), (0, form2)])) \\<and>\n            FEval (gs, g) e f)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns\n    ((aa, FDisj form1 form2) # list)) \\<and>\n                            FEval (gs, g) e f\n 2. \\<And>n na t a list gs g e aa b x5.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 3. \\<And>n na t a list gs g e aa b x6.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f", "apply(erule impE, simp)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>n na t a list gs g e aa b form1 form2.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, (aa, FDisj form1 form2) # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns ((aa, FDisj form1 form2) # list));\n        t = (aa, FDisj form1 form2) # list; is_env (gs, g) e;\n        a = (aa, FDisj form1 form2); b = FDisj form1 form2;\n        (Suc na, list @ [(0, form1), (0, form2)]) \\<in> deriv s;\n        \\<exists>f.\n           f \\<in> set (s_of_ns (list @ [(0, form1), (0, form2)])) \\<and>\n           FEval (gs, g) e f\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns\n    ((aa, FDisj form1 form2) # list)) \\<and>\n                            FEval (gs, g) e f\n 2. \\<And>n na t a list gs g e aa b x5.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 3. \\<And>n na t a list gs g e aa b x6.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f", "apply(elim exE conjE)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>n na t a list gs g e aa b form1 form2 f.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, (aa, FDisj form1 form2) # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns ((aa, FDisj form1 form2) # list));\n        t = (aa, FDisj form1 form2) # list; is_env (gs, g) e;\n        a = (aa, FDisj form1 form2); b = FDisj form1 form2;\n        (Suc na, list @ [(0, form1), (0, form2)]) \\<in> deriv s;\n        f \\<in> set (s_of_ns (list @ [(0, form1), (0, form2)]));\n        FEval (gs, g) e f\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns\n    ((aa, FDisj form1 form2) # list)) \\<and>\n                            FEval (gs, g) e f\n 2. \\<And>n na t a list gs g e aa b x5.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 3. \\<And>n na t a list gs g e aa b x6.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f", "apply(simp add: s_of_ns_def)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>n na t a list gs g e aa b form1 form2 f.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f. f \\<in> snd ` set t \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, (aa, FDisj form1 form2) # list) \\<in> deriv s;\n        t = (aa, FDisj form1 form2) # list; is_env (gs, g) e;\n        a = (aa, FDisj form1 form2); b = FDisj form1 form2;\n        (Suc na, list @ [(0, form1), (0, form2)]) \\<in> deriv s;\n        f = form1 \\<or> f = form2 \\<or> f \\<in> snd ` set list;\n        FEval (gs, g) e f\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            (f = FDisj form1 form2 \\<or>\n                             f \\<in> snd ` set list) \\<and>\n                            FEval (gs, g) e f\n 2. \\<And>n na t a list gs g e aa b x5.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 3. \\<And>n na t a list gs g e aa b x6.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f", "apply(elim disjE)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>n na t a list gs g e aa b form1 form2 f.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f. f \\<in> snd ` set t \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, (aa, FDisj form1 form2) # list) \\<in> deriv s;\n        t = (aa, FDisj form1 form2) # list; is_env (gs, g) e;\n        a = (aa, FDisj form1 form2); b = FDisj form1 form2;\n        (Suc na, list @ [(0, form1), (0, form2)]) \\<in> deriv s;\n        FEval (gs, g) e f; f = form1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            (f = FDisj form1 form2 \\<or>\n                             f \\<in> snd ` set list) \\<and>\n                            FEval (gs, g) e f\n 2. \\<And>n na t a list gs g e aa b form1 form2 f.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f. f \\<in> snd ` set t \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, (aa, FDisj form1 form2) # list) \\<in> deriv s;\n        t = (aa, FDisj form1 form2) # list; is_env (gs, g) e;\n        a = (aa, FDisj form1 form2); b = FDisj form1 form2;\n        (Suc na, list @ [(0, form1), (0, form2)]) \\<in> deriv s;\n        FEval (gs, g) e f; f = form2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            (f = FDisj form1 form2 \\<or>\n                             f \\<in> snd ` set list) \\<and>\n                            FEval (gs, g) e f\n 3. \\<And>n na t a list gs g e aa b form1 form2 f.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f. f \\<in> snd ` set t \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, (aa, FDisj form1 form2) # list) \\<in> deriv s;\n        t = (aa, FDisj form1 form2) # list; is_env (gs, g) e;\n        a = (aa, FDisj form1 form2); b = FDisj form1 form2;\n        (Suc na, list @ [(0, form1), (0, form2)]) \\<in> deriv s;\n        FEval (gs, g) e f; f \\<in> snd ` set list\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            (f = FDisj form1 form2 \\<or>\n                             f \\<in> snd ` set list) \\<and>\n                            FEval (gs, g) e f\n 4. \\<And>n na t a list gs g e aa b x5.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 5. \\<And>n na t a list gs g e aa b x6.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f", "apply(simp)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>n na t a list gs g e aa b form1 form2 f.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f. f \\<in> snd ` set t \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, (aa, FDisj form1 form2) # list) \\<in> deriv s;\n        t = (aa, FDisj form1 form2) # list; is_env (gs, g) e;\n        a = (aa, FDisj form1 form2); b = FDisj form1 form2;\n        (Suc na, list @ [(0, form1), (0, form2)]) \\<in> deriv s;\n        FEval (gs, g) e form1; f = form1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            (f = FDisj form1 form2 \\<or>\n                             f \\<in> snd ` set list) \\<and>\n                            FEval (gs, g) e f\n 2. \\<And>n na t a list gs g e aa b form1 form2 f.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f. f \\<in> snd ` set t \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, (aa, FDisj form1 form2) # list) \\<in> deriv s;\n        t = (aa, FDisj form1 form2) # list; is_env (gs, g) e;\n        a = (aa, FDisj form1 form2); b = FDisj form1 form2;\n        (Suc na, list @ [(0, form1), (0, form2)]) \\<in> deriv s;\n        FEval (gs, g) e f; f = form2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            (f = FDisj form1 form2 \\<or>\n                             f \\<in> snd ` set list) \\<and>\n                            FEval (gs, g) e f\n 3. \\<And>n na t a list gs g e aa b form1 form2 f.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f. f \\<in> snd ` set t \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, (aa, FDisj form1 form2) # list) \\<in> deriv s;\n        t = (aa, FDisj form1 form2) # list; is_env (gs, g) e;\n        a = (aa, FDisj form1 form2); b = FDisj form1 form2;\n        (Suc na, list @ [(0, form1), (0, form2)]) \\<in> deriv s;\n        FEval (gs, g) e f; f \\<in> snd ` set list\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            (f = FDisj form1 form2 \\<or>\n                             f \\<in> snd ` set list) \\<and>\n                            FEval (gs, g) e f\n 4. \\<And>n na t a list gs g e aa b x5.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 5. \\<And>n na t a list gs g e aa b x6.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f", "apply(rule_tac x=\"FDisj form1 form2\" in exI)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>n na t a list gs g e aa b form1 form2 f.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f. f \\<in> snd ` set t \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, (aa, FDisj form1 form2) # list) \\<in> deriv s;\n        t = (aa, FDisj form1 form2) # list; is_env (gs, g) e;\n        a = (aa, FDisj form1 form2); b = FDisj form1 form2;\n        (Suc na, list @ [(0, form1), (0, form2)]) \\<in> deriv s;\n        FEval (gs, g) e form1; f = form1\\<rbrakk>\n       \\<Longrightarrow> (FDisj form1 form2 = FDisj form1 form2 \\<or>\n                          FDisj form1 form2 \\<in> snd ` set list) \\<and>\n                         FEval (gs, g) e (FDisj form1 form2)\n 2. \\<And>n na t a list gs g e aa b form1 form2 f.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f. f \\<in> snd ` set t \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, (aa, FDisj form1 form2) # list) \\<in> deriv s;\n        t = (aa, FDisj form1 form2) # list; is_env (gs, g) e;\n        a = (aa, FDisj form1 form2); b = FDisj form1 form2;\n        (Suc na, list @ [(0, form1), (0, form2)]) \\<in> deriv s;\n        FEval (gs, g) e f; f = form2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            (f = FDisj form1 form2 \\<or>\n                             f \\<in> snd ` set list) \\<and>\n                            FEval (gs, g) e f\n 3. \\<And>n na t a list gs g e aa b form1 form2 f.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f. f \\<in> snd ` set t \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, (aa, FDisj form1 form2) # list) \\<in> deriv s;\n        t = (aa, FDisj form1 form2) # list; is_env (gs, g) e;\n        a = (aa, FDisj form1 form2); b = FDisj form1 form2;\n        (Suc na, list @ [(0, form1), (0, form2)]) \\<in> deriv s;\n        FEval (gs, g) e f; f \\<in> snd ` set list\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            (f = FDisj form1 form2 \\<or>\n                             f \\<in> snd ` set list) \\<and>\n                            FEval (gs, g) e f\n 4. \\<And>n na t a list gs g e aa b x5.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 5. \\<And>n na t a list gs g e aa b x6.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f", "apply(simp)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>n na t a list gs g e aa b form1 form2 f.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f. f \\<in> snd ` set t \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, (aa, FDisj form1 form2) # list) \\<in> deriv s;\n        t = (aa, FDisj form1 form2) # list; is_env (gs, g) e;\n        a = (aa, FDisj form1 form2); b = FDisj form1 form2;\n        (Suc na, list @ [(0, form1), (0, form2)]) \\<in> deriv s;\n        FEval (gs, g) e f; f = form2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            (f = FDisj form1 form2 \\<or>\n                             f \\<in> snd ` set list) \\<and>\n                            FEval (gs, g) e f\n 2. \\<And>n na t a list gs g e aa b form1 form2 f.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f. f \\<in> snd ` set t \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, (aa, FDisj form1 form2) # list) \\<in> deriv s;\n        t = (aa, FDisj form1 form2) # list; is_env (gs, g) e;\n        a = (aa, FDisj form1 form2); b = FDisj form1 form2;\n        (Suc na, list @ [(0, form1), (0, form2)]) \\<in> deriv s;\n        FEval (gs, g) e f; f \\<in> snd ` set list\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            (f = FDisj form1 form2 \\<or>\n                             f \\<in> snd ` set list) \\<and>\n                            FEval (gs, g) e f\n 3. \\<And>n na t a list gs g e aa b x5.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 4. \\<And>n na t a list gs g e aa b x6.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f", "apply(simp)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>n na t a list gs g e aa b form1 form2 f.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f. f \\<in> snd ` set t \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, (aa, FDisj form1 form2) # list) \\<in> deriv s;\n        t = (aa, FDisj form1 form2) # list; is_env (gs, g) e;\n        a = (aa, FDisj form1 form2); b = FDisj form1 form2;\n        (Suc na, list @ [(0, form1), (0, form2)]) \\<in> deriv s;\n        FEval (gs, g) e form2; f = form2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            (f = FDisj form1 form2 \\<or>\n                             f \\<in> snd ` set list) \\<and>\n                            FEval (gs, g) e f\n 2. \\<And>n na t a list gs g e aa b form1 form2 f.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f. f \\<in> snd ` set t \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, (aa, FDisj form1 form2) # list) \\<in> deriv s;\n        t = (aa, FDisj form1 form2) # list; is_env (gs, g) e;\n        a = (aa, FDisj form1 form2); b = FDisj form1 form2;\n        (Suc na, list @ [(0, form1), (0, form2)]) \\<in> deriv s;\n        FEval (gs, g) e f; f \\<in> snd ` set list\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            (f = FDisj form1 form2 \\<or>\n                             f \\<in> snd ` set list) \\<and>\n                            FEval (gs, g) e f\n 3. \\<And>n na t a list gs g e aa b x5.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 4. \\<And>n na t a list gs g e aa b x6.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f", "apply(rule_tac x=\"FDisj form1 form2\" in exI)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>n na t a list gs g e aa b form1 form2 f.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f. f \\<in> snd ` set t \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, (aa, FDisj form1 form2) # list) \\<in> deriv s;\n        t = (aa, FDisj form1 form2) # list; is_env (gs, g) e;\n        a = (aa, FDisj form1 form2); b = FDisj form1 form2;\n        (Suc na, list @ [(0, form1), (0, form2)]) \\<in> deriv s;\n        FEval (gs, g) e form2; f = form2\\<rbrakk>\n       \\<Longrightarrow> (FDisj form1 form2 = FDisj form1 form2 \\<or>\n                          FDisj form1 form2 \\<in> snd ` set list) \\<and>\n                         FEval (gs, g) e (FDisj form1 form2)\n 2. \\<And>n na t a list gs g e aa b form1 form2 f.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f. f \\<in> snd ` set t \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, (aa, FDisj form1 form2) # list) \\<in> deriv s;\n        t = (aa, FDisj form1 form2) # list; is_env (gs, g) e;\n        a = (aa, FDisj form1 form2); b = FDisj form1 form2;\n        (Suc na, list @ [(0, form1), (0, form2)]) \\<in> deriv s;\n        FEval (gs, g) e f; f \\<in> snd ` set list\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            (f = FDisj form1 form2 \\<or>\n                             f \\<in> snd ` set list) \\<and>\n                            FEval (gs, g) e f\n 3. \\<And>n na t a list gs g e aa b x5.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 4. \\<And>n na t a list gs g e aa b x6.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f", "apply(simp)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>n na t a list gs g e aa b form1 form2 f.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f. f \\<in> snd ` set t \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, (aa, FDisj form1 form2) # list) \\<in> deriv s;\n        t = (aa, FDisj form1 form2) # list; is_env (gs, g) e;\n        a = (aa, FDisj form1 form2); b = FDisj form1 form2;\n        (Suc na, list @ [(0, form1), (0, form2)]) \\<in> deriv s;\n        FEval (gs, g) e f; f \\<in> snd ` set list\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            (f = FDisj form1 form2 \\<or>\n                             f \\<in> snd ` set list) \\<and>\n                            FEval (gs, g) e f\n 2. \\<And>n na t a list gs g e aa b x5.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 3. \\<And>n na t a list gs g e aa b x6.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f", "apply(rule_tac x=\"f\" in exI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>n na t a list gs g e aa b form1 form2 f.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f. f \\<in> snd ` set t \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, (aa, FDisj form1 form2) # list) \\<in> deriv s;\n        t = (aa, FDisj form1 form2) # list; is_env (gs, g) e;\n        a = (aa, FDisj form1 form2); b = FDisj form1 form2;\n        (Suc na, list @ [(0, form1), (0, form2)]) \\<in> deriv s;\n        FEval (gs, g) e f; f \\<in> snd ` set list\\<rbrakk>\n       \\<Longrightarrow> (f = FDisj form1 form2 \\<or>\n                          f \\<in> snd ` set list) \\<and>\n                         FEval (gs, g) e f\n 2. \\<And>n na t a list gs g e aa b x5.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 3. \\<And>n na t a list gs g e aa b x6.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f", "apply(simp)\n      \\<comment> \\<open>all case\\<close>"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n na t a list gs g e aa b x5.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f\n 2. \\<And>n na t a list gs g e aa b x6.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f", "apply(force)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n na t a list gs g e aa b x6.\n       \\<lbrakk>init s; finite (deriv s); m \\<in> fst ` deriv s;\n        \\<forall>y.\n           (\\<exists>u. (y, u) \\<in> deriv s) \\<longrightarrow> y \\<le> m;\n        \\<forall>na t.\n           n = m - na \\<and> (na, t) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>a b e.\n               is_env (a, b) e \\<longrightarrow>\n               (\\<exists>f.\n                   f \\<in> set (s_of_ns t) \\<and> FEval (a, b) e f));\n        Suc n = m - na; (na, a # list) \\<in> deriv s;\n        \\<not> is_axiom (s_of_ns (a # list));\n        \\<forall>aa f. a \\<noteq> (aa, FAll f);\n        \\<forall>aa f. a \\<noteq> (aa, FEx f); t = a # list;\n        is_env (gs, g) e; a = (aa, b); b = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> set (s_of_ns (a # list)) \\<and>\n                            FEval (gs, g) e f", "apply(force)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma [simp]: \"s_of_ns (ns_of_s s) = s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s_of_ns (ns_of_s s) = s", "apply(induct s)"], ["proof (prove)\ngoal (2 subgoals):\n 1. s_of_ns (ns_of_s []) = []\n 2. \\<And>a s.\n       s_of_ns (ns_of_s s) = s \\<Longrightarrow>\n       s_of_ns (ns_of_s (a # s)) = a # s", "apply(simp add: s_of_ns_def ns_of_s_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a s.\n       s_of_ns (ns_of_s s) = s \\<Longrightarrow>\n       s_of_ns (ns_of_s (a # s)) = a # s", "apply(simp add: s_of_ns_def ns_of_s_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma soundness: \"finite (deriv (ns_of_s s)) ==> Svalid s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (deriv (ns_of_s s)) \\<Longrightarrow> Svalid s", "apply(subgoal_tac \"init (ns_of_s s)\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite (deriv (ns_of_s s)); init (ns_of_s s)\\<rbrakk>\n    \\<Longrightarrow> Svalid s\n 2. finite (deriv (ns_of_s s)) \\<Longrightarrow> init (ns_of_s s)", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. finite (deriv (ns_of_s s)) \\<Longrightarrow> init (ns_of_s s)\n 2. \\<lbrakk>finite (deriv (ns_of_s s)); init (ns_of_s s)\\<rbrakk>\n    \\<Longrightarrow> Svalid s", "apply(simp add: init_def ns_of_s_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite (deriv (ns_of_s s)); init (ns_of_s s)\\<rbrakk>\n    \\<Longrightarrow> Svalid s", "apply(subgoal_tac \"finite (fst ` (deriv (ns_of_s s)))\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite (deriv (ns_of_s s)); init (ns_of_s s);\n     finite (fst ` deriv (ns_of_s s))\\<rbrakk>\n    \\<Longrightarrow> Svalid s\n 2. \\<lbrakk>finite (deriv (ns_of_s s)); init (ns_of_s s)\\<rbrakk>\n    \\<Longrightarrow> finite (fst ` deriv (ns_of_s s))", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite (deriv (ns_of_s s)); init (ns_of_s s)\\<rbrakk>\n    \\<Longrightarrow> finite (fst ` deriv (ns_of_s s))\n 2. \\<lbrakk>finite (deriv (ns_of_s s)); init (ns_of_s s);\n     finite (fst ` deriv (ns_of_s s))\\<rbrakk>\n    \\<Longrightarrow> Svalid s", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite (deriv (ns_of_s s)); init (ns_of_s s);\n     finite (fst ` deriv (ns_of_s s))\\<rbrakk>\n    \\<Longrightarrow> Svalid s", "apply(frule_tac max_exists)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite (deriv (ns_of_s s)); init (ns_of_s s);\n     finite (fst ` deriv (ns_of_s s));\n     fst ` deriv (ns_of_s s) \\<noteq> {} \\<longrightarrow>\n     (\\<exists>x.\n         x \\<in> fst ` deriv (ns_of_s s) \\<and>\n         (\\<forall>y.\n             y \\<in> fst ` deriv (ns_of_s s) \\<longrightarrow>\n             y \\<le> x))\\<rbrakk>\n    \\<Longrightarrow> Svalid s", "apply(erule impE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite (deriv (ns_of_s s)); init (ns_of_s s);\n     finite (fst ` deriv (ns_of_s s))\\<rbrakk>\n    \\<Longrightarrow> fst ` deriv (ns_of_s s) \\<noteq> {}\n 2. \\<lbrakk>finite (deriv (ns_of_s s)); init (ns_of_s s);\n     finite (fst ` deriv (ns_of_s s));\n     \\<exists>x.\n        x \\<in> fst ` deriv (ns_of_s s) \\<and>\n        (\\<forall>y.\n            y \\<in> fst ` deriv (ns_of_s s) \\<longrightarrow>\n            y \\<le> x)\\<rbrakk>\n    \\<Longrightarrow> Svalid s", "apply(simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite (deriv (ns_of_s s)); init (ns_of_s s)\\<rbrakk>\n    \\<Longrightarrow> deriv (ns_of_s s) \\<noteq> {}\n 2. \\<lbrakk>finite (deriv (ns_of_s s)); init (ns_of_s s);\n     finite (fst ` deriv (ns_of_s s));\n     \\<exists>x.\n        x \\<in> fst ` deriv (ns_of_s s) \\<and>\n        (\\<forall>y.\n            y \\<in> fst ` deriv (ns_of_s s) \\<longrightarrow>\n            y \\<le> x)\\<rbrakk>\n    \\<Longrightarrow> Svalid s", "apply(subgoal_tac \"(0,ns_of_s s) \\<in> deriv (ns_of_s s)\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>finite (deriv (ns_of_s s)); init (ns_of_s s);\n     (0, ns_of_s s) \\<in> deriv (ns_of_s s)\\<rbrakk>\n    \\<Longrightarrow> deriv (ns_of_s s) \\<noteq> {}\n 2. \\<lbrakk>finite (deriv (ns_of_s s)); init (ns_of_s s)\\<rbrakk>\n    \\<Longrightarrow> (0, ns_of_s s) \\<in> deriv (ns_of_s s)\n 3. \\<lbrakk>finite (deriv (ns_of_s s)); init (ns_of_s s);\n     finite (fst ` deriv (ns_of_s s));\n     \\<exists>x.\n        x \\<in> fst ` deriv (ns_of_s s) \\<and>\n        (\\<forall>y.\n            y \\<in> fst ` deriv (ns_of_s s) \\<longrightarrow>\n            y \\<le> x)\\<rbrakk>\n    \\<Longrightarrow> Svalid s", "apply(force)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite (deriv (ns_of_s s)); init (ns_of_s s)\\<rbrakk>\n    \\<Longrightarrow> (0, ns_of_s s) \\<in> deriv (ns_of_s s)\n 2. \\<lbrakk>finite (deriv (ns_of_s s)); init (ns_of_s s);\n     finite (fst ` deriv (ns_of_s s));\n     \\<exists>x.\n        x \\<in> fst ` deriv (ns_of_s s) \\<and>\n        (\\<forall>y.\n            y \\<in> fst ` deriv (ns_of_s s) \\<longrightarrow>\n            y \\<le> x)\\<rbrakk>\n    \\<Longrightarrow> Svalid s", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite (deriv (ns_of_s s)); init (ns_of_s s);\n     finite (fst ` deriv (ns_of_s s));\n     \\<exists>x.\n        x \\<in> fst ` deriv (ns_of_s s) \\<and>\n        (\\<forall>y.\n            y \\<in> fst ` deriv (ns_of_s s) \\<longrightarrow>\n            y \\<le> x)\\<rbrakk>\n    \\<Longrightarrow> Svalid s", "apply(elim exE conjE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>finite (deriv (ns_of_s s)); init (ns_of_s s);\n        finite (fst ` deriv (ns_of_s s)); x \\<in> fst ` deriv (ns_of_s s);\n        \\<forall>y.\n           y \\<in> fst ` deriv (ns_of_s s) \\<longrightarrow>\n           y \\<le> x\\<rbrakk>\n       \\<Longrightarrow> Svalid s", "apply(frule_tac soundness')"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>finite (deriv (ns_of_s s)); init (ns_of_s s);\n        finite (fst ` deriv (ns_of_s s)); x \\<in> fst ` deriv (ns_of_s s);\n        \\<forall>y.\n           y \\<in> fst ` deriv (ns_of_s s) \\<longrightarrow>\n           y \\<le> x\\<rbrakk>\n       \\<Longrightarrow> finite (deriv (ns_of_s s))\n 2. \\<And>x.\n       \\<lbrakk>finite (deriv (ns_of_s s)); init (ns_of_s s);\n        finite (fst ` deriv (ns_of_s s)); x \\<in> fst ` deriv (ns_of_s s);\n        \\<forall>y.\n           y \\<in> fst ` deriv (ns_of_s s) \\<longrightarrow>\n           y \\<le> x\\<rbrakk>\n       \\<Longrightarrow> ?m22 x \\<in> fst ` deriv (ns_of_s s)\n 3. \\<And>x.\n       \\<lbrakk>finite (deriv (ns_of_s s)); init (ns_of_s s);\n        finite (fst ` deriv (ns_of_s s)); x \\<in> fst ` deriv (ns_of_s s);\n        \\<forall>y.\n           y \\<in> fst ` deriv (ns_of_s s) \\<longrightarrow>\n           y \\<le> x\\<rbrakk>\n       \\<Longrightarrow> \\<forall>y u.\n                            (y, u) \\<in> deriv (ns_of_s s) \\<longrightarrow>\n                            y \\<le> ?m22 x\n 4. \\<And>x.\n       \\<lbrakk>finite (deriv (ns_of_s s)); init (ns_of_s s);\n        finite (fst ` deriv (ns_of_s s)); x \\<in> fst ` deriv (ns_of_s s);\n        \\<forall>y.\n           y \\<in> fst ` deriv (ns_of_s s) \\<longrightarrow> y \\<le> x;\n        \\<forall>n t.\n           ?h22 x = ?m22 x - n \\<and>\n           (n, t) \\<in> deriv (ns_of_s s) \\<longrightarrow>\n           Svalid (s_of_ns t)\\<rbrakk>\n       \\<Longrightarrow> Svalid s", "apply(assumption)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>finite (deriv (ns_of_s s)); init (ns_of_s s);\n        finite (fst ` deriv (ns_of_s s)); x \\<in> fst ` deriv (ns_of_s s);\n        \\<forall>y.\n           y \\<in> fst ` deriv (ns_of_s s) \\<longrightarrow>\n           y \\<le> x\\<rbrakk>\n       \\<Longrightarrow> ?m22 x \\<in> fst ` deriv (ns_of_s s)\n 2. \\<And>x.\n       \\<lbrakk>finite (deriv (ns_of_s s)); init (ns_of_s s);\n        finite (fst ` deriv (ns_of_s s)); x \\<in> fst ` deriv (ns_of_s s);\n        \\<forall>y.\n           y \\<in> fst ` deriv (ns_of_s s) \\<longrightarrow>\n           y \\<le> x\\<rbrakk>\n       \\<Longrightarrow> \\<forall>y u.\n                            (y, u) \\<in> deriv (ns_of_s s) \\<longrightarrow>\n                            y \\<le> ?m22 x\n 3. \\<And>x.\n       \\<lbrakk>finite (deriv (ns_of_s s)); init (ns_of_s s);\n        finite (fst ` deriv (ns_of_s s)); x \\<in> fst ` deriv (ns_of_s s);\n        \\<forall>y.\n           y \\<in> fst ` deriv (ns_of_s s) \\<longrightarrow> y \\<le> x;\n        \\<forall>n t.\n           ?h22 x = ?m22 x - n \\<and>\n           (n, t) \\<in> deriv (ns_of_s s) \\<longrightarrow>\n           Svalid (s_of_ns t)\\<rbrakk>\n       \\<Longrightarrow> Svalid s", "apply(assumption)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>finite (deriv (ns_of_s s)); init (ns_of_s s);\n        finite (fst ` deriv (ns_of_s s)); x \\<in> fst ` deriv (ns_of_s s);\n        \\<forall>y.\n           y \\<in> fst ` deriv (ns_of_s s) \\<longrightarrow>\n           y \\<le> x\\<rbrakk>\n       \\<Longrightarrow> \\<forall>y u.\n                            (y, u) \\<in> deriv (ns_of_s s) \\<longrightarrow>\n                            y \\<le> x\n 2. \\<And>x.\n       \\<lbrakk>finite (deriv (ns_of_s s)); init (ns_of_s s);\n        finite (fst ` deriv (ns_of_s s)); x \\<in> fst ` deriv (ns_of_s s);\n        \\<forall>y.\n           y \\<in> fst ` deriv (ns_of_s s) \\<longrightarrow> y \\<le> x;\n        \\<forall>n t.\n           ?h22 x = x - n \\<and>\n           (n, t) \\<in> deriv (ns_of_s s) \\<longrightarrow>\n           Svalid (s_of_ns t)\\<rbrakk>\n       \\<Longrightarrow> Svalid s", "apply(force)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>finite (deriv (ns_of_s s)); init (ns_of_s s);\n        finite (fst ` deriv (ns_of_s s)); x \\<in> fst ` deriv (ns_of_s s);\n        \\<forall>y.\n           y \\<in> fst ` deriv (ns_of_s s) \\<longrightarrow> y \\<le> x;\n        \\<forall>n t.\n           ?h22 x = x - n \\<and>\n           (n, t) \\<in> deriv (ns_of_s s) \\<longrightarrow>\n           Svalid (s_of_ns t)\\<rbrakk>\n       \\<Longrightarrow> Svalid s", "apply(drule_tac x=0 in spec, drule_tac x=\"ns_of_s s\" in spec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>finite (deriv (ns_of_s s)); init (ns_of_s s);\n        finite (fst ` deriv (ns_of_s s)); x \\<in> fst ` deriv (ns_of_s s);\n        \\<forall>y.\n           y \\<in> fst ` deriv (ns_of_s s) \\<longrightarrow> y \\<le> x;\n        ?h22 x = x - 0 \\<and>\n        (0, ns_of_s s) \\<in> deriv (ns_of_s s) \\<longrightarrow>\n        Svalid (s_of_ns (ns_of_s s))\\<rbrakk>\n       \\<Longrightarrow> Svalid s", "apply(force )"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsection \"Contains, Considers\""], ["", "definition\n  \"contains\" :: \"(nat => (nat*nseq)) => nat => nform => bool\" where\n  \"contains f n nf = (nf \\<in> set (snd (f n)))\""], ["", "definition\n  considers :: \"(nat => (nat*nseq)) => nat => nform => bool\" where\n  \"considers f n nf = (case snd (f n) of [] => False | (x#xs) => x = nf)\""], ["", "lemma (in loc1) progress: \"infinite (deriv s) ==> snd (f n) = a#list --> (\\<exists>zs'. snd (f (Suc n)) = list@zs')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. infinite (deriv s) \\<Longrightarrow>\n    snd (f n) = a # list \\<longrightarrow>\n    (\\<exists>zs'. snd (f (Suc n)) = list @ zs')", "apply(subgoal_tac \"(snd (f (Suc n))) : set (subs (snd (f n)))\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>infinite (deriv s);\n     snd (f (Suc n)) \\<in> set (subs (snd (f n)))\\<rbrakk>\n    \\<Longrightarrow> snd (f n) = a # list \\<longrightarrow>\n                      (\\<exists>zs'. snd (f (Suc n)) = list @ zs')\n 2. infinite (deriv s) \\<Longrightarrow>\n    snd (f (Suc n)) \\<in> set (subs (snd (f n)))", "defer"], ["proof (prove)\ngoal (2 subgoals):\n 1. infinite (deriv s) \\<Longrightarrow>\n    snd (f (Suc n)) \\<in> set (subs (snd (f n)))\n 2. \\<lbrakk>infinite (deriv s);\n     snd (f (Suc n)) \\<in> set (subs (snd (f n)))\\<rbrakk>\n    \\<Longrightarrow> snd (f n) = a # list \\<longrightarrow>\n                      (\\<exists>zs'. snd (f (Suc n)) = list @ zs')", "apply(frule_tac is_path_f)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>infinite (deriv s);\n     \\<forall>n.\n        f n \\<in> deriv s \\<and>\n        fst (f n) = n \\<and>\n        snd (f (Suc n)) \\<in> set (subs (snd (f n))) \\<and>\n        infinite (deriv (snd (f n)))\\<rbrakk>\n    \\<Longrightarrow> snd (f (Suc n)) \\<in> set (subs (snd (f n)))\n 2. \\<lbrakk>infinite (deriv s);\n     snd (f (Suc n)) \\<in> set (subs (snd (f n)))\\<rbrakk>\n    \\<Longrightarrow> snd (f n) = a # list \\<longrightarrow>\n                      (\\<exists>zs'. snd (f (Suc n)) = list @ zs')", "apply(blast)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>infinite (deriv s);\n     snd (f (Suc n)) \\<in> set (subs (snd (f n)))\\<rbrakk>\n    \\<Longrightarrow> snd (f n) = a # list \\<longrightarrow>\n                      (\\<exists>zs'. snd (f (Suc n)) = list @ zs')", "apply(case_tac a)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa b.\n       \\<lbrakk>infinite (deriv s);\n        snd (f (Suc n)) \\<in> set (subs (snd (f n))); a = (aa, b)\\<rbrakk>\n       \\<Longrightarrow> snd (f n) = a # list \\<longrightarrow>\n                         (\\<exists>zs'. snd (f (Suc n)) = list @ zs')", "apply(case_tac b)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>aa b x11 x12.\n       \\<lbrakk>infinite (deriv s);\n        snd (f (Suc n)) \\<in> set (subs (snd (f n))); a = (aa, b);\n        b = PAtom x11 x12\\<rbrakk>\n       \\<Longrightarrow> snd (f n) = a # list \\<longrightarrow>\n                         (\\<exists>zs'. snd (f (Suc n)) = list @ zs')\n 2. \\<And>aa b x21 x22.\n       \\<lbrakk>infinite (deriv s);\n        snd (f (Suc n)) \\<in> set (subs (snd (f n))); a = (aa, b);\n        b = NAtom x21 x22\\<rbrakk>\n       \\<Longrightarrow> snd (f n) = a # list \\<longrightarrow>\n                         (\\<exists>zs'. snd (f (Suc n)) = list @ zs')\n 3. \\<And>aa b x31 x32.\n       \\<lbrakk>infinite (deriv s);\n        snd (f (Suc n)) \\<in> set (subs (snd (f n))); a = (aa, b);\n        b = FConj x31 x32\\<rbrakk>\n       \\<Longrightarrow> snd (f n) = a # list \\<longrightarrow>\n                         (\\<exists>zs'. snd (f (Suc n)) = list @ zs')\n 4. \\<And>aa b x41 x42.\n       \\<lbrakk>infinite (deriv s);\n        snd (f (Suc n)) \\<in> set (subs (snd (f n))); a = (aa, b);\n        b = FDisj x41 x42\\<rbrakk>\n       \\<Longrightarrow> snd (f n) = a # list \\<longrightarrow>\n                         (\\<exists>zs'. snd (f (Suc n)) = list @ zs')\n 5. \\<And>aa b x5.\n       \\<lbrakk>infinite (deriv s);\n        snd (f (Suc n)) \\<in> set (subs (snd (f n))); a = (aa, b);\n        b = FAll x5\\<rbrakk>\n       \\<Longrightarrow> snd (f n) = a # list \\<longrightarrow>\n                         (\\<exists>zs'. snd (f (Suc n)) = list @ zs')\n 6. \\<And>aa b x6.\n       \\<lbrakk>infinite (deriv s);\n        snd (f (Suc n)) \\<in> set (subs (snd (f n))); a = (aa, b);\n        b = FEx x6\\<rbrakk>\n       \\<Longrightarrow> snd (f n) = a # list \\<longrightarrow>\n                         (\\<exists>zs'. snd (f (Suc n)) = list @ zs')", "apply(safe)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>aa b x11 x12.\n       \\<lbrakk>infinite (deriv s);\n        snd (f (Suc n)) \\<in> set (subs (snd (f n)));\n        a = (aa, PAtom x11 x12);\n        snd (f n) = (aa, PAtom x11 x12) # list\\<rbrakk>\n       \\<Longrightarrow> \\<exists>zs'. snd (f (Suc n)) = list @ zs'\n 2. \\<And>aa b x21 x22.\n       \\<lbrakk>infinite (deriv s);\n        snd (f (Suc n)) \\<in> set (subs (snd (f n)));\n        a = (aa, NAtom x21 x22);\n        snd (f n) = (aa, NAtom x21 x22) # list\\<rbrakk>\n       \\<Longrightarrow> \\<exists>zs'. snd (f (Suc n)) = list @ zs'\n 3. \\<And>aa b x31 x32.\n       \\<lbrakk>infinite (deriv s);\n        snd (f (Suc n)) \\<in> set (subs (snd (f n)));\n        a = (aa, FConj x31 x32);\n        snd (f n) = (aa, FConj x31 x32) # list\\<rbrakk>\n       \\<Longrightarrow> \\<exists>zs'. snd (f (Suc n)) = list @ zs'\n 4. \\<And>aa b x41 x42.\n       \\<lbrakk>infinite (deriv s);\n        snd (f (Suc n)) \\<in> set (subs (snd (f n)));\n        a = (aa, FDisj x41 x42);\n        snd (f n) = (aa, FDisj x41 x42) # list\\<rbrakk>\n       \\<Longrightarrow> \\<exists>zs'. snd (f (Suc n)) = list @ zs'\n 5. \\<And>aa b x5.\n       \\<lbrakk>infinite (deriv s);\n        snd (f (Suc n)) \\<in> set (subs (snd (f n))); a = (aa, FAll x5);\n        snd (f n) = (aa, FAll x5) # list\\<rbrakk>\n       \\<Longrightarrow> \\<exists>zs'. snd (f (Suc n)) = list @ zs'\n 6. \\<And>aa b x6.\n       \\<lbrakk>infinite (deriv s);\n        snd (f (Suc n)) \\<in> set (subs (snd (f n))); a = (aa, FEx x6);\n        snd (f n) = (aa, FEx x6) # list\\<rbrakk>\n       \\<Longrightarrow> \\<exists>zs'. snd (f (Suc n)) = list @ zs'", "apply(simp_all add: Let_def split: if_splits)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa x31 x32.\n       \\<lbrakk>infinite (deriv s);\n        snd (f (Suc n)) = list @ [(0, x31)] \\<or>\n        snd (f (Suc n)) = list @ [(0, x32)];\n        a = (aa, FConj x31 x32);\n        snd (f n) = (aa, FConj x31 x32) # list\\<rbrakk>\n       \\<Longrightarrow> \\<exists>zs'. snd (f (Suc n)) = list @ zs'", "apply(erule disjE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>aa x31 x32.\n       \\<lbrakk>infinite (deriv s); a = (aa, FConj x31 x32);\n        snd (f n) = (aa, FConj x31 x32) # list;\n        snd (f (Suc n)) = list @ [(0, x31)]\\<rbrakk>\n       \\<Longrightarrow> \\<exists>zs'. snd (f (Suc n)) = list @ zs'\n 2. \\<And>aa x31 x32.\n       \\<lbrakk>infinite (deriv s); a = (aa, FConj x31 x32);\n        snd (f n) = (aa, FConj x31 x32) # list;\n        snd (f (Suc n)) = list @ [(0, x32)]\\<rbrakk>\n       \\<Longrightarrow> \\<exists>zs'. snd (f (Suc n)) = list @ zs'", "apply(simp_all)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in loc1) contains_considers': \"infinite (deriv s) ==> \\<forall>n y ys. snd (f n) = xs@y#ys --> (\\<exists>m zs'. snd (f (n+m)) = y#zs')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. infinite (deriv s) \\<Longrightarrow>\n    \\<forall>n y ys.\n       snd (f n) = xs @ y # ys \\<longrightarrow>\n       (\\<exists>m zs'. snd (f (n + m)) = y # zs')", "apply(induct_tac xs)"], ["proof (prove)\ngoal (2 subgoals):\n 1. infinite (deriv s) \\<Longrightarrow>\n    \\<forall>n y ys.\n       snd (f n) = [] @ y # ys \\<longrightarrow>\n       (\\<exists>m zs'. snd (f (n + m)) = y # zs')\n 2. \\<And>a list.\n       \\<lbrakk>infinite (deriv s);\n        \\<forall>n y ys.\n           snd (f n) = list @ y # ys \\<longrightarrow>\n           (\\<exists>m zs'. snd (f (n + m)) = y # zs')\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n y ys.\n                            snd (f n) =\n                            (a # list) @ y # ys \\<longrightarrow>\n                            (\\<exists>m zs'. snd (f (n + m)) = y # zs')", "apply(rule,rule,rule,rule)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n y ys.\n       \\<lbrakk>infinite (deriv s); snd (f n) = [] @ y # ys\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m zs'. snd (f (n + m)) = y # zs'\n 2. \\<And>a list.\n       \\<lbrakk>infinite (deriv s);\n        \\<forall>n y ys.\n           snd (f n) = list @ y # ys \\<longrightarrow>\n           (\\<exists>m zs'. snd (f (n + m)) = y # zs')\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n y ys.\n                            snd (f n) =\n                            (a # list) @ y # ys \\<longrightarrow>\n                            (\\<exists>m zs'. snd (f (n + m)) = y # zs')", "apply(rule_tac x=0 in exI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n y ys.\n       \\<lbrakk>infinite (deriv s); snd (f n) = [] @ y # ys\\<rbrakk>\n       \\<Longrightarrow> \\<exists>zs'. snd (f (n + 0)) = y # zs'\n 2. \\<And>a list.\n       \\<lbrakk>infinite (deriv s);\n        \\<forall>n y ys.\n           snd (f n) = list @ y # ys \\<longrightarrow>\n           (\\<exists>m zs'. snd (f (n + m)) = y # zs')\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n y ys.\n                            snd (f n) =\n                            (a # list) @ y # ys \\<longrightarrow>\n                            (\\<exists>m zs'. snd (f (n + m)) = y # zs')", "apply(rule_tac x=ys in exI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n y ys.\n       \\<lbrakk>infinite (deriv s); snd (f n) = [] @ y # ys\\<rbrakk>\n       \\<Longrightarrow> snd (f (n + 0)) = y # ys\n 2. \\<And>a list.\n       \\<lbrakk>infinite (deriv s);\n        \\<forall>n y ys.\n           snd (f n) = list @ y # ys \\<longrightarrow>\n           (\\<exists>m zs'. snd (f (n + m)) = y # zs')\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n y ys.\n                            snd (f n) =\n                            (a # list) @ y # ys \\<longrightarrow>\n                            (\\<exists>m zs'. snd (f (n + m)) = y # zs')", "apply(force)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a list.\n       \\<lbrakk>infinite (deriv s);\n        \\<forall>n y ys.\n           snd (f n) = list @ y # ys \\<longrightarrow>\n           (\\<exists>m zs'. snd (f (n + m)) = y # zs')\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n y ys.\n                            snd (f n) =\n                            (a # list) @ y # ys \\<longrightarrow>\n                            (\\<exists>m zs'. snd (f (n + m)) = y # zs')", "apply(rule,rule,rule,rule)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a list n y ys.\n       \\<lbrakk>infinite (deriv s);\n        \\<forall>n y ys.\n           snd (f n) = list @ y # ys \\<longrightarrow>\n           (\\<exists>m zs'. snd (f (n + m)) = y # zs');\n        snd (f n) = (a # list) @ y # ys\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m zs'. snd (f (n + m)) = y # zs'", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a list n y ys.\n       \\<lbrakk>infinite (deriv s);\n        \\<forall>n a b.\n           (\\<exists>ys. snd (f n) = list @ (a, b) # ys) \\<longrightarrow>\n           (\\<exists>m zs'. snd (f (n + m)) = (a, b) # zs');\n        snd (f n) = a # list @ y # ys\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m zs'. snd (f (n + m)) = y # zs'", "apply(frule_tac progress)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a list n y ys.\n       \\<lbrakk>infinite (deriv s);\n        \\<forall>n a b.\n           (\\<exists>ys. snd (f n) = list @ (a, b) # ys) \\<longrightarrow>\n           (\\<exists>m zs'. snd (f (n + m)) = (a, b) # zs');\n        snd (f n) = a # list @ y # ys;\n        snd (f (?n22 a list n y ys)) =\n        ?a22 a list n y ys # ?list22 a list n y ys \\<longrightarrow>\n        (\\<exists>zs'.\n            snd (f (Suc (?n22 a list n y ys))) =\n            ?list22 a list n y ys @ zs')\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m zs'. snd (f (n + m)) = y # zs'", "apply(erule impE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a list n y ys.\n       \\<lbrakk>infinite (deriv s);\n        \\<forall>n a b.\n           (\\<exists>ys. snd (f n) = list @ (a, b) # ys) \\<longrightarrow>\n           (\\<exists>m zs'. snd (f (n + m)) = (a, b) # zs');\n        snd (f n) = a # list @ y # ys\\<rbrakk>\n       \\<Longrightarrow> snd (f (?n22 a list n y ys)) =\n                         ?a22 a list n y ys # ?list22 a list n y ys\n 2. \\<And>a list n y ys.\n       \\<lbrakk>infinite (deriv s);\n        \\<forall>n a b.\n           (\\<exists>ys. snd (f n) = list @ (a, b) # ys) \\<longrightarrow>\n           (\\<exists>m zs'. snd (f (n + m)) = (a, b) # zs');\n        snd (f n) = a # list @ y # ys;\n        \\<exists>zs'.\n           snd (f (Suc (?n22 a list n y ys))) =\n           ?list22 a list n y ys @ zs'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m zs'. snd (f (n + m)) = y # zs'", "apply(assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a list n y ys.\n       \\<lbrakk>infinite (deriv s);\n        \\<forall>n a b.\n           (\\<exists>ys. snd (f n) = list @ (a, b) # ys) \\<longrightarrow>\n           (\\<exists>m zs'. snd (f (n + m)) = (a, b) # zs');\n        snd (f n) = a # list @ y # ys;\n        \\<exists>zs'. snd (f (Suc n)) = (list @ y # ys) @ zs'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m zs'. snd (f (n + m)) = y # zs'", "apply(erule exE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a list n y ys zs'.\n       \\<lbrakk>infinite (deriv s);\n        \\<forall>n a b.\n           (\\<exists>ys. snd (f n) = list @ (a, b) # ys) \\<longrightarrow>\n           (\\<exists>m zs'. snd (f (n + m)) = (a, b) # zs');\n        snd (f n) = a # list @ y # ys;\n        snd (f (Suc n)) = (list @ y # ys) @ zs'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m zs'. snd (f (n + m)) = y # zs'", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a list n y ys zs'.\n       \\<lbrakk>infinite (deriv s);\n        \\<forall>n a b.\n           (\\<exists>ys. snd (f n) = list @ (a, b) # ys) \\<longrightarrow>\n           (\\<exists>m zs'. snd (f (n + m)) = (a, b) # zs');\n        snd (f n) = a # list @ y # ys;\n        snd (f (Suc n)) = list @ y # ys @ zs'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m zs'. snd (f (n + m)) = y # zs'", "apply(drule_tac x=\"Suc n\" in spec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a list n y ys zs'.\n       \\<lbrakk>infinite (deriv s); snd (f n) = a # list @ y # ys;\n        snd (f (Suc n)) = list @ y # ys @ zs';\n        \\<forall>a b.\n           (\\<exists>ys.\n               snd (f (Suc n)) = list @ (a, b) # ys) \\<longrightarrow>\n           (\\<exists>m zs'. snd (f (Suc n + m)) = (a, b) # zs')\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m zs'. snd (f (n + m)) = y # zs'", "apply(case_tac y)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a list n y ys zs' aa b.\n       \\<lbrakk>infinite (deriv s); snd (f n) = a # list @ y # ys;\n        snd (f (Suc n)) = list @ y # ys @ zs';\n        \\<forall>a b.\n           (\\<exists>ys.\n               snd (f (Suc n)) = list @ (a, b) # ys) \\<longrightarrow>\n           (\\<exists>m zs'. snd (f (Suc n + m)) = (a, b) # zs');\n        y = (aa, b)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m zs'. snd (f (n + m)) = y # zs'", "apply(rename_tac u v)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a list n y ys zs' u v.\n       \\<lbrakk>infinite (deriv s); snd (f n) = a # list @ y # ys;\n        snd (f (Suc n)) = list @ y # ys @ zs';\n        \\<forall>a b.\n           (\\<exists>ys.\n               snd (f (Suc n)) = list @ (a, b) # ys) \\<longrightarrow>\n           (\\<exists>m zs'. snd (f (Suc n + m)) = (a, b) # zs');\n        y = (u, v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m zs'. snd (f (n + m)) = y # zs'", "apply(drule_tac x=\"u\" in spec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a list n y ys zs' u v.\n       \\<lbrakk>infinite (deriv s); snd (f n) = a # list @ y # ys;\n        snd (f (Suc n)) = list @ y # ys @ zs'; y = (u, v);\n        \\<forall>b.\n           (\\<exists>ys.\n               snd (f (Suc n)) = list @ (u, b) # ys) \\<longrightarrow>\n           (\\<exists>m zs'. snd (f (Suc n + m)) = (u, b) # zs')\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m zs'. snd (f (n + m)) = y # zs'", "apply(drule_tac x=\"v\" in spec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a list n y ys zs' u v.\n       \\<lbrakk>infinite (deriv s); snd (f n) = a # list @ y # ys;\n        snd (f (Suc n)) = list @ y # ys @ zs'; y = (u, v);\n        (\\<exists>ys.\n            snd (f (Suc n)) = list @ (u, v) # ys) \\<longrightarrow>\n        (\\<exists>m zs'. snd (f (Suc n + m)) = (u, v) # zs')\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m zs'. snd (f (n + m)) = y # zs'", "apply(erule impE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a list n y ys zs' u v.\n       \\<lbrakk>infinite (deriv s); snd (f n) = a # list @ y # ys;\n        snd (f (Suc n)) = list @ y # ys @ zs'; y = (u, v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ys. snd (f (Suc n)) = list @ (u, v) # ys\n 2. \\<And>a list n y ys zs' u v.\n       \\<lbrakk>infinite (deriv s); snd (f n) = a # list @ y # ys;\n        snd (f (Suc n)) = list @ y # ys @ zs'; y = (u, v);\n        \\<exists>m zs'. snd (f (Suc n + m)) = (u, v) # zs'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m zs'. snd (f (n + m)) = y # zs'", "apply(force)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a list n y ys zs' u v.\n       \\<lbrakk>infinite (deriv s); snd (f n) = a # list @ y # ys;\n        snd (f (Suc n)) = list @ y # ys @ zs'; y = (u, v);\n        \\<exists>m zs'. snd (f (Suc n + m)) = (u, v) # zs'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m zs'. snd (f (n + m)) = y # zs'", "apply(elim exE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a list n y ys zs' u v m zs'a.\n       \\<lbrakk>infinite (deriv s); snd (f n) = a # list @ y # ys;\n        snd (f (Suc n)) = list @ y # ys @ zs'; y = (u, v);\n        snd (f (Suc n + m)) = (u, v) # zs'a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m zs'. snd (f (n + m)) = y # zs'", "apply(rule_tac x=\"Suc m\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a list n y ys zs' u v m zs'a.\n       \\<lbrakk>infinite (deriv s); snd (f n) = a # list @ y # ys;\n        snd (f (Suc n)) = list @ y # ys @ zs'; y = (u, v);\n        snd (f (Suc n + m)) = (u, v) # zs'a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>zs'. snd (f (n + Suc m)) = y # zs'", "apply(force)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma list_decomp[rule_format]: \"v \\<in> set p --> (\\<exists> xs ys. p = xs@(v#ys) \\<and> v \\<notin> set xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<in> set p \\<longrightarrow>\n    (\\<exists>xs ys. p = xs @ v # ys \\<and> v \\<notin> set xs)", "apply(induct p)"], ["proof (prove)\ngoal (2 subgoals):\n 1. v \\<in> set [] \\<longrightarrow>\n    (\\<exists>xs ys. [] = xs @ v # ys \\<and> v \\<notin> set xs)\n 2. \\<And>a p.\n       v \\<in> set p \\<longrightarrow>\n       (\\<exists>xs ys.\n           p = xs @ v # ys \\<and> v \\<notin> set xs) \\<Longrightarrow>\n       v \\<in> set (a # p) \\<longrightarrow>\n       (\\<exists>xs ys. a # p = xs @ v # ys \\<and> v \\<notin> set xs)", "apply(force)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a p.\n       v \\<in> set p \\<longrightarrow>\n       (\\<exists>xs ys.\n           p = xs @ v # ys \\<and> v \\<notin> set xs) \\<Longrightarrow>\n       v \\<in> set (a # p) \\<longrightarrow>\n       (\\<exists>xs ys. a # p = xs @ v # ys \\<and> v \\<notin> set xs)", "apply(case_tac \"v=a\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a p.\n       \\<lbrakk>v \\<in> set p \\<longrightarrow>\n                (\\<exists>xs ys. p = xs @ v # ys \\<and> v \\<notin> set xs);\n        v = a\\<rbrakk>\n       \\<Longrightarrow> v \\<in> set (a # p) \\<longrightarrow>\n                         (\\<exists>xs ys.\n                             a # p = xs @ v # ys \\<and> v \\<notin> set xs)\n 2. \\<And>a p.\n       \\<lbrakk>v \\<in> set p \\<longrightarrow>\n                (\\<exists>xs ys. p = xs @ v # ys \\<and> v \\<notin> set xs);\n        v \\<noteq> a\\<rbrakk>\n       \\<Longrightarrow> v \\<in> set (a # p) \\<longrightarrow>\n                         (\\<exists>xs ys.\n                             a # p = xs @ v # ys \\<and> v \\<notin> set xs)", "apply(force)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a p.\n       \\<lbrakk>v \\<in> set p \\<longrightarrow>\n                (\\<exists>xs ys. p = xs @ v # ys \\<and> v \\<notin> set xs);\n        v \\<noteq> a\\<rbrakk>\n       \\<Longrightarrow> v \\<in> set (a # p) \\<longrightarrow>\n                         (\\<exists>xs ys.\n                             a # p = xs @ v # ys \\<and> v \\<notin> set xs)", "apply(auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a xs ys.\n       \\<lbrakk>v \\<noteq> a; v \\<notin> set xs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xsa.\n                            (\\<exists>ysa.\n                                a # xs @ v # ys = xsa @ v # ysa) \\<and>\n                            v \\<notin> set xsa", "apply(rule_tac x=\"a#xs\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a xs ys.\n       \\<lbrakk>v \\<noteq> a; v \\<notin> set xs\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>ysa.\n                             a # xs @ v # ys = (a # xs) @ v # ysa) \\<and>\n                         v \\<notin> set (a # xs)", "apply(auto)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in loc1) contains_considers: \"infinite (deriv s) ==> contains f n y ==> (\\<exists>m. considers f (n+m) y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>infinite (deriv s); contains f n y\\<rbrakk>\n    \\<Longrightarrow> \\<exists>m. considers f (n + m) y", "apply(simp add: contains_def considers_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>infinite (deriv s); y \\<in> set (snd (f n))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>m.\n                         case snd (f (n + m)) of [] \\<Rightarrow> False\n                         | x # xs \\<Rightarrow> x = y", "apply(frule_tac list_decomp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>infinite (deriv s); y \\<in> set (snd (f n));\n     \\<exists>xs ys.\n        snd (f n) = xs @ y # ys \\<and> y \\<notin> set xs\\<rbrakk>\n    \\<Longrightarrow> \\<exists>m.\n                         case snd (f (n + m)) of [] \\<Rightarrow> False\n                         | x # xs \\<Rightarrow> x = y", "apply(elim exE conjE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xs ys.\n       \\<lbrakk>infinite (deriv s); y \\<in> set (snd (f n));\n        snd (f n) = xs @ y # ys; y \\<notin> set xs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m.\n                            case snd (f (n + m)) of [] \\<Rightarrow> False\n                            | x # xs \\<Rightarrow> x = y", "apply(frule_tac contains_considers'[rule_format])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xs ys.\n       \\<lbrakk>infinite (deriv s); y \\<in> set (snd (f n));\n        snd (f n) = xs @ y # ys; y \\<notin> set xs\\<rbrakk>\n       \\<Longrightarrow> snd (f (?n4 xs ys)) =\n                         ?xs4 xs ys @ ?y4 xs ys # ?ys4 xs ys\n 2. \\<And>xs ys.\n       \\<lbrakk>infinite (deriv s); y \\<in> set (snd (f n));\n        snd (f n) = xs @ y # ys; y \\<notin> set xs;\n        \\<exists>m zs'. snd (f (?n4 xs ys + m)) = ?y4 xs ys # zs'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m.\n                            case snd (f (n + m)) of [] \\<Rightarrow> False\n                            | x # xs \\<Rightarrow> x = y", "apply(assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xs ys.\n       \\<lbrakk>infinite (deriv s); y \\<in> set (snd (f n));\n        snd (f n) = xs @ y # ys; y \\<notin> set xs;\n        \\<exists>m zs'. snd (f (n + m)) = y # zs'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m.\n                            case snd (f (n + m)) of [] \\<Rightarrow> False\n                            | x # xs \\<Rightarrow> x = y", "apply(elim exE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xs ys m zs'.\n       \\<lbrakk>infinite (deriv s); y \\<in> set (snd (f n));\n        snd (f n) = xs @ y # ys; y \\<notin> set xs;\n        snd (f (n + m)) = y # zs'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m.\n                            case snd (f (n + m)) of [] \\<Rightarrow> False\n                            | x # xs \\<Rightarrow> x = y", "apply(rule_tac x=m in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xs ys m zs'.\n       \\<lbrakk>infinite (deriv s); y \\<in> set (snd (f n));\n        snd (f n) = xs @ y # ys; y \\<notin> set xs;\n        snd (f (n + m)) = y # zs'\\<rbrakk>\n       \\<Longrightarrow> case snd (f (n + m)) of [] \\<Rightarrow> False\n                         | x # xs \\<Rightarrow> x = y", "apply(force)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in loc1) contains_propagates_patoms[rule_format]: \"infinite (deriv s) ==> contains f n (0, PAtom p vs) --> contains f (n+q) (0, PAtom p vs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. infinite (deriv s) \\<Longrightarrow>\n    contains f n (0, PAtom p vs) \\<longrightarrow>\n    contains f (n + q) (0, PAtom p vs)", "apply(induct_tac q)"], ["proof (prove)\ngoal (2 subgoals):\n 1. infinite (deriv s) \\<Longrightarrow>\n    contains f n (0, PAtom p vs) \\<longrightarrow>\n    contains f (n + 0) (0, PAtom p vs)\n 2. \\<And>na.\n       \\<lbrakk>infinite (deriv s);\n        contains f n (0, PAtom p vs) \\<longrightarrow>\n        contains f (n + na) (0, PAtom p vs)\\<rbrakk>\n       \\<Longrightarrow> contains f n (0, PAtom p vs) \\<longrightarrow>\n                         contains f (n + Suc na) (0, PAtom p vs)", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>na.\n       \\<lbrakk>infinite (deriv s);\n        contains f n (0, PAtom p vs) \\<longrightarrow>\n        contains f (n + na) (0, PAtom p vs)\\<rbrakk>\n       \\<Longrightarrow> contains f n (0, PAtom p vs) \\<longrightarrow>\n                         contains f (n + Suc na) (0, PAtom p vs)", "apply(rule)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>na.\n       \\<lbrakk>infinite (deriv s);\n        contains f n (0, PAtom p vs) \\<longrightarrow>\n        contains f (n + na) (0, PAtom p vs);\n        contains f n (0, PAtom p vs)\\<rbrakk>\n       \\<Longrightarrow> contains f (n + Suc na) (0, PAtom p vs)", "apply(erule impE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>na.\n       \\<lbrakk>infinite (deriv s); contains f n (0, PAtom p vs)\\<rbrakk>\n       \\<Longrightarrow> contains f n (0, PAtom p vs)\n 2. \\<And>na.\n       \\<lbrakk>infinite (deriv s); contains f n (0, PAtom p vs);\n        contains f (n + na) (0, PAtom p vs)\\<rbrakk>\n       \\<Longrightarrow> contains f (n + Suc na) (0, PAtom p vs)", "apply(assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>na.\n       \\<lbrakk>infinite (deriv s); contains f n (0, PAtom p vs);\n        contains f (n + na) (0, PAtom p vs)\\<rbrakk>\n       \\<Longrightarrow> contains f (n + Suc na) (0, PAtom p vs)", "apply(subgoal_tac \"~is_axiom (s_of_ns (snd (f (n+na))))\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>na.\n       \\<lbrakk>infinite (deriv s); contains f n (0, PAtom p vs);\n        contains f (n + na) (0, PAtom p vs);\n        \\<not> is_axiom (s_of_ns (snd (f (n + na))))\\<rbrakk>\n       \\<Longrightarrow> contains f (n + Suc na) (0, PAtom p vs)\n 2. \\<And>na.\n       \\<lbrakk>infinite (deriv s); contains f n (0, PAtom p vs);\n        contains f (n + na) (0, PAtom p vs)\\<rbrakk>\n       \\<Longrightarrow> \\<not> is_axiom (s_of_ns (snd (f (n + na))))", "defer"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>na.\n       \\<lbrakk>infinite (deriv s); contains f n (0, PAtom p vs);\n        contains f (n + na) (0, PAtom p vs)\\<rbrakk>\n       \\<Longrightarrow> \\<not> is_axiom (s_of_ns (snd (f (n + na))))\n 2. \\<And>na.\n       \\<lbrakk>infinite (deriv s); contains f n (0, PAtom p vs);\n        contains f (n + na) (0, PAtom p vs);\n        \\<not> is_axiom (s_of_ns (snd (f (n + na))))\\<rbrakk>\n       \\<Longrightarrow> contains f (n + Suc na) (0, PAtom p vs)", "apply(subgoal_tac \"infinite (deriv (snd (f (n+na))))\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>na.\n       \\<lbrakk>infinite (deriv s); contains f n (0, PAtom p vs);\n        contains f (n + na) (0, PAtom p vs);\n        infinite (deriv (snd (f (n + na))))\\<rbrakk>\n       \\<Longrightarrow> \\<not> is_axiom (s_of_ns (snd (f (n + na))))\n 2. \\<And>na.\n       \\<lbrakk>infinite (deriv s); contains f n (0, PAtom p vs);\n        contains f (n + na) (0, PAtom p vs)\\<rbrakk>\n       \\<Longrightarrow> infinite (deriv (snd (f (n + na))))\n 3. \\<And>na.\n       \\<lbrakk>infinite (deriv s); contains f n (0, PAtom p vs);\n        contains f (n + na) (0, PAtom p vs);\n        \\<not> is_axiom (s_of_ns (snd (f (n + na))))\\<rbrakk>\n       \\<Longrightarrow> contains f (n + Suc na) (0, PAtom p vs)", "defer"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>na.\n       \\<lbrakk>infinite (deriv s); contains f n (0, PAtom p vs);\n        contains f (n + na) (0, PAtom p vs)\\<rbrakk>\n       \\<Longrightarrow> infinite (deriv (snd (f (n + na))))\n 2. \\<And>na.\n       \\<lbrakk>infinite (deriv s); contains f n (0, PAtom p vs);\n        contains f (n + na) (0, PAtom p vs);\n        \\<not> is_axiom (s_of_ns (snd (f (n + na))))\\<rbrakk>\n       \\<Longrightarrow> contains f (n + Suc na) (0, PAtom p vs)\n 3. \\<And>na.\n       \\<lbrakk>infinite (deriv s); contains f n (0, PAtom p vs);\n        contains f (n + na) (0, PAtom p vs);\n        infinite (deriv (snd (f (n + na))))\\<rbrakk>\n       \\<Longrightarrow> \\<not> is_axiom (s_of_ns (snd (f (n + na))))", "apply(force dest: is_path_f)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>na.\n       \\<lbrakk>infinite (deriv s); contains f n (0, PAtom p vs);\n        contains f (n + na) (0, PAtom p vs);\n        \\<not> is_axiom (s_of_ns (snd (f (n + na))))\\<rbrakk>\n       \\<Longrightarrow> contains f (n + Suc na) (0, PAtom p vs)\n 2. \\<And>na.\n       \\<lbrakk>infinite (deriv s); contains f n (0, PAtom p vs);\n        contains f (n + na) (0, PAtom p vs);\n        infinite (deriv (snd (f (n + na))))\\<rbrakk>\n       \\<Longrightarrow> \\<not> is_axiom (s_of_ns (snd (f (n + na))))", "defer"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>na.\n       \\<lbrakk>infinite (deriv s); contains f n (0, PAtom p vs);\n        contains f (n + na) (0, PAtom p vs);\n        infinite (deriv (snd (f (n + na))))\\<rbrakk>\n       \\<Longrightarrow> \\<not> is_axiom (s_of_ns (snd (f (n + na))))\n 2. \\<And>na.\n       \\<lbrakk>infinite (deriv s); contains f n (0, PAtom p vs);\n        contains f (n + na) (0, PAtom p vs);\n        \\<not> is_axiom (s_of_ns (snd (f (n + na))))\\<rbrakk>\n       \\<Longrightarrow> contains f (n + Suc na) (0, PAtom p vs)", "apply(rule)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>na.\n       \\<lbrakk>infinite (deriv s); contains f n (0, PAtom p vs);\n        contains f (n + na) (0, PAtom p vs);\n        infinite (deriv (snd (f (n + na))));\n        is_axiom (s_of_ns (snd (f (n + na))))\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>na.\n       \\<lbrakk>infinite (deriv s); contains f n (0, PAtom p vs);\n        contains f (n + na) (0, PAtom p vs);\n        \\<not> is_axiom (s_of_ns (snd (f (n + na))))\\<rbrakk>\n       \\<Longrightarrow> contains f (n + Suc na) (0, PAtom p vs)", "apply(simp add: deriv_is_axiom)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>na.\n       \\<lbrakk>infinite (deriv s); contains f n (0, PAtom p vs);\n        contains f (n + na) (0, PAtom p vs);\n        \\<not> is_axiom (s_of_ns (snd (f (n + na))))\\<rbrakk>\n       \\<Longrightarrow> contains f (n + Suc na) (0, PAtom p vs)", "apply(simp add: contains_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>na.\n       \\<lbrakk>infinite (deriv s); (0, PAtom p vs) \\<in> set (snd (f n));\n        (0, PAtom p vs) \\<in> set (snd (f (n + na)));\n        \\<not> is_axiom (s_of_ns (snd (f (n + na))))\\<rbrakk>\n       \\<Longrightarrow> (0, PAtom p vs) \\<in> set (snd (f (Suc (n + na))))", "apply(drule_tac p=\"snd (f (n + na))\" in list_decomp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>na.\n       \\<lbrakk>infinite (deriv s); (0, PAtom p vs) \\<in> set (snd (f n));\n        \\<not> is_axiom (s_of_ns (snd (f (n + na))));\n        \\<exists>xs ys.\n           snd (f (n + na)) = xs @ (0, PAtom p vs) # ys \\<and>\n           (0, PAtom p vs) \\<notin> set xs\\<rbrakk>\n       \\<Longrightarrow> (0, PAtom p vs) \\<in> set (snd (f (Suc (n + na))))", "apply(elim exE conjE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>na xs ys.\n       \\<lbrakk>infinite (deriv s); (0, PAtom p vs) \\<in> set (snd (f n));\n        \\<not> is_axiom (s_of_ns (snd (f (n + na))));\n        snd (f (n + na)) = xs @ (0, PAtom p vs) # ys;\n        (0, PAtom p vs) \\<notin> set xs\\<rbrakk>\n       \\<Longrightarrow> (0, PAtom p vs) \\<in> set (snd (f (Suc (n + na))))", "apply(case_tac xs)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>na xs ys.\n       \\<lbrakk>infinite (deriv s); (0, PAtom p vs) \\<in> set (snd (f n));\n        \\<not> is_axiom (s_of_ns (snd (f (n + na))));\n        snd (f (n + na)) = xs @ (0, PAtom p vs) # ys;\n        (0, PAtom p vs) \\<notin> set xs; xs = []\\<rbrakk>\n       \\<Longrightarrow> (0, PAtom p vs) \\<in> set (snd (f (Suc (n + na))))\n 2. \\<And>na xs ys a list.\n       \\<lbrakk>infinite (deriv s); (0, PAtom p vs) \\<in> set (snd (f n));\n        \\<not> is_axiom (s_of_ns (snd (f (n + na))));\n        snd (f (n + na)) = xs @ (0, PAtom p vs) # ys;\n        (0, PAtom p vs) \\<notin> set xs; xs = a # list\\<rbrakk>\n       \\<Longrightarrow> (0, PAtom p vs) \\<in> set (snd (f (Suc (n + na))))", "apply(simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>na xs ys.\n       \\<lbrakk>infinite (deriv s); (0, PAtom p vs) \\<in> set (snd (f n));\n        \\<not> is_axiom (s_of_ns ((0, PAtom p vs) # ys));\n        snd (f (n + na)) = (0, PAtom p vs) # ys; xs = []\\<rbrakk>\n       \\<Longrightarrow> (0, PAtom p vs) \\<in> set (snd (f (Suc (n + na))))\n 2. \\<And>na xs ys a list.\n       \\<lbrakk>infinite (deriv s); (0, PAtom p vs) \\<in> set (snd (f n));\n        \\<not> is_axiom (s_of_ns (snd (f (n + na))));\n        snd (f (n + na)) = xs @ (0, PAtom p vs) # ys;\n        (0, PAtom p vs) \\<notin> set xs; xs = a # list\\<rbrakk>\n       \\<Longrightarrow> (0, PAtom p vs) \\<in> set (snd (f (Suc (n + na))))", "apply(subgoal_tac \"(snd (f (Suc (n + na)))) : set (subs (snd (f (n + na))))\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>na xs ys.\n       \\<lbrakk>infinite (deriv s); (0, PAtom p vs) \\<in> set (snd (f n));\n        \\<not> is_axiom (s_of_ns ((0, PAtom p vs) # ys));\n        snd (f (n + na)) = (0, PAtom p vs) # ys; xs = [];\n        snd (f (Suc (n + na))) \\<in> set (subs (snd (f (n + na))))\\<rbrakk>\n       \\<Longrightarrow> (0, PAtom p vs) \\<in> set (snd (f (Suc (n + na))))\n 2. \\<And>na xs ys.\n       \\<lbrakk>infinite (deriv s); (0, PAtom p vs) \\<in> set (snd (f n));\n        \\<not> is_axiom (s_of_ns ((0, PAtom p vs) # ys));\n        snd (f (n + na)) = (0, PAtom p vs) # ys; xs = []\\<rbrakk>\n       \\<Longrightarrow> snd (f (Suc (n + na)))\n                         \\<in> set (subs (snd (f (n + na))))\n 3. \\<And>na xs ys a list.\n       \\<lbrakk>infinite (deriv s); (0, PAtom p vs) \\<in> set (snd (f n));\n        \\<not> is_axiom (s_of_ns (snd (f (n + na))));\n        snd (f (n + na)) = xs @ (0, PAtom p vs) # ys;\n        (0, PAtom p vs) \\<notin> set xs; xs = a # list\\<rbrakk>\n       \\<Longrightarrow> (0, PAtom p vs) \\<in> set (snd (f (Suc (n + na))))", "apply(simp add: Let_def split: if_splits)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>na xs ys.\n       \\<lbrakk>infinite (deriv s); (0, PAtom p vs) \\<in> set (snd (f n));\n        \\<not> is_axiom (s_of_ns ((0, PAtom p vs) # ys));\n        snd (f (n + na)) = (0, PAtom p vs) # ys; xs = []\\<rbrakk>\n       \\<Longrightarrow> snd (f (Suc (n + na)))\n                         \\<in> set (subs (snd (f (n + na))))\n 2. \\<And>na xs ys a list.\n       \\<lbrakk>infinite (deriv s); (0, PAtom p vs) \\<in> set (snd (f n));\n        \\<not> is_axiom (s_of_ns (snd (f (n + na))));\n        snd (f (n + na)) = xs @ (0, PAtom p vs) # ys;\n        (0, PAtom p vs) \\<notin> set xs; xs = a # list\\<rbrakk>\n       \\<Longrightarrow> (0, PAtom p vs) \\<in> set (snd (f (Suc (n + na))))", "apply(frule_tac is_path_f)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>na xs ys.\n       \\<lbrakk>infinite (deriv s); (0, PAtom p vs) \\<in> set (snd (f n));\n        \\<not> is_axiom (s_of_ns ((0, PAtom p vs) # ys));\n        snd (f (n + na)) = (0, PAtom p vs) # ys; xs = [];\n        \\<forall>n.\n           f n \\<in> deriv s \\<and>\n           fst (f n) = n \\<and>\n           snd (f (Suc n)) \\<in> set (subs (snd (f n))) \\<and>\n           infinite (deriv (snd (f n)))\\<rbrakk>\n       \\<Longrightarrow> snd (f (Suc (n + na)))\n                         \\<in> set (subs (snd (f (n + na))))\n 2. \\<And>na xs ys a list.\n       \\<lbrakk>infinite (deriv s); (0, PAtom p vs) \\<in> set (snd (f n));\n        \\<not> is_axiom (s_of_ns (snd (f (n + na))));\n        snd (f (n + na)) = xs @ (0, PAtom p vs) # ys;\n        (0, PAtom p vs) \\<notin> set xs; xs = a # list\\<rbrakk>\n       \\<Longrightarrow> (0, PAtom p vs) \\<in> set (snd (f (Suc (n + na))))", "apply(drule_tac x=\"n+na\" in spec)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>na xs ys.\n       \\<lbrakk>infinite (deriv s); (0, PAtom p vs) \\<in> set (snd (f n));\n        \\<not> is_axiom (s_of_ns ((0, PAtom p vs) # ys));\n        snd (f (n + na)) = (0, PAtom p vs) # ys; xs = [];\n        f (n + na) \\<in> deriv s \\<and>\n        fst (f (n + na)) = n + na \\<and>\n        snd (f (Suc (n + na))) \\<in> set (subs (snd (f (n + na)))) \\<and>\n        infinite (deriv (snd (f (n + na))))\\<rbrakk>\n       \\<Longrightarrow> snd (f (Suc (n + na)))\n                         \\<in> set (subs (snd (f (n + na))))\n 2. \\<And>na xs ys a list.\n       \\<lbrakk>infinite (deriv s); (0, PAtom p vs) \\<in> set (snd (f n));\n        \\<not> is_axiom (s_of_ns (snd (f (n + na))));\n        snd (f (n + na)) = xs @ (0, PAtom p vs) # ys;\n        (0, PAtom p vs) \\<notin> set xs; xs = a # list\\<rbrakk>\n       \\<Longrightarrow> (0, PAtom p vs) \\<in> set (snd (f (Suc (n + na))))", "apply(force)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>na xs ys a list.\n       \\<lbrakk>infinite (deriv s); (0, PAtom p vs) \\<in> set (snd (f n));\n        \\<not> is_axiom (s_of_ns (snd (f (n + na))));\n        snd (f (n + na)) = xs @ (0, PAtom p vs) # ys;\n        (0, PAtom p vs) \\<notin> set xs; xs = a # list\\<rbrakk>\n       \\<Longrightarrow> (0, PAtom p vs) \\<in> set (snd (f (Suc (n + na))))", "apply(drule_tac progress)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>na xs ys a list.\n       \\<lbrakk>(0, PAtom p vs) \\<in> set (snd (f n));\n        \\<not> is_axiom (s_of_ns (snd (f (n + na))));\n        snd (f (n + na)) = xs @ (0, PAtom p vs) # ys;\n        (0, PAtom p vs) \\<notin> set xs; xs = a # list;\n        snd (f (?n43 na xs ys a list)) =\n        ?a43 na xs ys a list # ?list43 na xs ys a list \\<longrightarrow>\n        (\\<exists>zs'.\n            snd (f (Suc (?n43 na xs ys a list))) =\n            ?list43 na xs ys a list @ zs')\\<rbrakk>\n       \\<Longrightarrow> (0, PAtom p vs) \\<in> set (snd (f (Suc (n + na))))", "apply(erule impE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>na xs ys a list.\n       \\<lbrakk>(0, PAtom p vs) \\<in> set (snd (f n));\n        \\<not> is_axiom (s_of_ns (snd (f (n + na))));\n        snd (f (n + na)) = xs @ (0, PAtom p vs) # ys;\n        (0, PAtom p vs) \\<notin> set xs; xs = a # list\\<rbrakk>\n       \\<Longrightarrow> snd (f (?n43 na xs ys a list)) =\n                         ?a43 na xs ys a list # ?list43 na xs ys a list\n 2. \\<And>na xs ys a list.\n       \\<lbrakk>(0, PAtom p vs) \\<in> set (snd (f n));\n        \\<not> is_axiom (s_of_ns (snd (f (n + na))));\n        snd (f (n + na)) = xs @ (0, PAtom p vs) # ys;\n        (0, PAtom p vs) \\<notin> set xs; xs = a # list;\n        \\<exists>zs'.\n           snd (f (Suc (?n43 na xs ys a list))) =\n           ?list43 na xs ys a list @ zs'\\<rbrakk>\n       \\<Longrightarrow> (0, PAtom p vs) \\<in> set (snd (f (Suc (n + na))))", "apply(force)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>na xs ys a list.\n       \\<lbrakk>(0, PAtom p vs) \\<in> set (snd (f n));\n        \\<not> is_axiom (s_of_ns (snd (f (n + na))));\n        snd (f (n + na)) = xs @ (0, PAtom p vs) # ys;\n        (0, PAtom p vs) \\<notin> set xs; xs = a # list;\n        \\<exists>zs'.\n           snd (f (Suc (n + na))) =\n           (list @ (0, PAtom p vs) # ys) @ zs'\\<rbrakk>\n       \\<Longrightarrow> (0, PAtom p vs) \\<in> set (snd (f (Suc (n + na))))", "apply(force)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in loc1) contains_propagates_natoms[rule_format]: \"infinite (deriv s) ==> contains f n (0, NAtom p vs) --> contains f (n+q) (0, NAtom p vs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. infinite (deriv s) \\<Longrightarrow>\n    contains f n (0, NAtom p vs) \\<longrightarrow>\n    contains f (n + q) (0, NAtom p vs)", "apply(induct_tac q)"], ["proof (prove)\ngoal (2 subgoals):\n 1. infinite (deriv s) \\<Longrightarrow>\n    contains f n (0, NAtom p vs) \\<longrightarrow>\n    contains f (n + 0) (0, NAtom p vs)\n 2. \\<And>na.\n       \\<lbrakk>infinite (deriv s);\n        contains f n (0, NAtom p vs) \\<longrightarrow>\n        contains f (n + na) (0, NAtom p vs)\\<rbrakk>\n       \\<Longrightarrow> contains f n (0, NAtom p vs) \\<longrightarrow>\n                         contains f (n + Suc na) (0, NAtom p vs)", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>na.\n       \\<lbrakk>infinite (deriv s);\n        contains f n (0, NAtom p vs) \\<longrightarrow>\n        contains f (n + na) (0, NAtom p vs)\\<rbrakk>\n       \\<Longrightarrow> contains f n (0, NAtom p vs) \\<longrightarrow>\n                         contains f (n + Suc na) (0, NAtom p vs)", "apply(rule)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>na.\n       \\<lbrakk>infinite (deriv s);\n        contains f n (0, NAtom p vs) \\<longrightarrow>\n        contains f (n + na) (0, NAtom p vs);\n        contains f n (0, NAtom p vs)\\<rbrakk>\n       \\<Longrightarrow> contains f (n + Suc na) (0, NAtom p vs)", "apply(erule impE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>na.\n       \\<lbrakk>infinite (deriv s); contains f n (0, NAtom p vs)\\<rbrakk>\n       \\<Longrightarrow> contains f n (0, NAtom p vs)\n 2. \\<And>na.\n       \\<lbrakk>infinite (deriv s); contains f n (0, NAtom p vs);\n        contains f (n + na) (0, NAtom p vs)\\<rbrakk>\n       \\<Longrightarrow> contains f (n + Suc na) (0, NAtom p vs)", "apply(assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>na.\n       \\<lbrakk>infinite (deriv s); contains f n (0, NAtom p vs);\n        contains f (n + na) (0, NAtom p vs)\\<rbrakk>\n       \\<Longrightarrow> contains f (n + Suc na) (0, NAtom p vs)", "apply(subgoal_tac \"~is_axiom (s_of_ns (snd (f (n+na))))\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>na.\n       \\<lbrakk>infinite (deriv s); contains f n (0, NAtom p vs);\n        contains f (n + na) (0, NAtom p vs);\n        \\<not> is_axiom (s_of_ns (snd (f (n + na))))\\<rbrakk>\n       \\<Longrightarrow> contains f (n + Suc na) (0, NAtom p vs)\n 2. \\<And>na.\n       \\<lbrakk>infinite (deriv s); contains f n (0, NAtom p vs);\n        contains f (n + na) (0, NAtom p vs)\\<rbrakk>\n       \\<Longrightarrow> \\<not> is_axiom (s_of_ns (snd (f (n + na))))", "defer"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>na.\n       \\<lbrakk>infinite (deriv s); contains f n (0, NAtom p vs);\n        contains f (n + na) (0, NAtom p vs)\\<rbrakk>\n       \\<Longrightarrow> \\<not> is_axiom (s_of_ns (snd (f (n + na))))\n 2. \\<And>na.\n       \\<lbrakk>infinite (deriv s); contains f n (0, NAtom p vs);\n        contains f (n + na) (0, NAtom p vs);\n        \\<not> is_axiom (s_of_ns (snd (f (n + na))))\\<rbrakk>\n       \\<Longrightarrow> contains f (n + Suc na) (0, NAtom p vs)", "apply(subgoal_tac \"infinite (deriv (snd (f (n+na))))\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>na.\n       \\<lbrakk>infinite (deriv s); contains f n (0, NAtom p vs);\n        contains f (n + na) (0, NAtom p vs);\n        infinite (deriv (snd (f (n + na))))\\<rbrakk>\n       \\<Longrightarrow> \\<not> is_axiom (s_of_ns (snd (f (n + na))))\n 2. \\<And>na.\n       \\<lbrakk>infinite (deriv s); contains f n (0, NAtom p vs);\n        contains f (n + na) (0, NAtom p vs)\\<rbrakk>\n       \\<Longrightarrow> infinite (deriv (snd (f (n + na))))\n 3. \\<And>na.\n       \\<lbrakk>infinite (deriv s); contains f n (0, NAtom p vs);\n        contains f (n + na) (0, NAtom p vs);\n        \\<not> is_axiom (s_of_ns (snd (f (n + na))))\\<rbrakk>\n       \\<Longrightarrow> contains f (n + Suc na) (0, NAtom p vs)", "defer"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>na.\n       \\<lbrakk>infinite (deriv s); contains f n (0, NAtom p vs);\n        contains f (n + na) (0, NAtom p vs)\\<rbrakk>\n       \\<Longrightarrow> infinite (deriv (snd (f (n + na))))\n 2. \\<And>na.\n       \\<lbrakk>infinite (deriv s); contains f n (0, NAtom p vs);\n        contains f (n + na) (0, NAtom p vs);\n        \\<not> is_axiom (s_of_ns (snd (f (n + na))))\\<rbrakk>\n       \\<Longrightarrow> contains f (n + Suc na) (0, NAtom p vs)\n 3. \\<And>na.\n       \\<lbrakk>infinite (deriv s); contains f n (0, NAtom p vs);\n        contains f (n + na) (0, NAtom p vs);\n        infinite (deriv (snd (f (n + na))))\\<rbrakk>\n       \\<Longrightarrow> \\<not> is_axiom (s_of_ns (snd (f (n + na))))", "apply(force dest: is_path_f)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>na.\n       \\<lbrakk>infinite (deriv s); contains f n (0, NAtom p vs);\n        contains f (n + na) (0, NAtom p vs);\n        \\<not> is_axiom (s_of_ns (snd (f (n + na))))\\<rbrakk>\n       \\<Longrightarrow> contains f (n + Suc na) (0, NAtom p vs)\n 2. \\<And>na.\n       \\<lbrakk>infinite (deriv s); contains f n (0, NAtom p vs);\n        contains f (n + na) (0, NAtom p vs);\n        infinite (deriv (snd (f (n + na))))\\<rbrakk>\n       \\<Longrightarrow> \\<not> is_axiom (s_of_ns (snd (f (n + na))))", "defer"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>na.\n       \\<lbrakk>infinite (deriv s); contains f n (0, NAtom p vs);\n        contains f (n + na) (0, NAtom p vs);\n        infinite (deriv (snd (f (n + na))))\\<rbrakk>\n       \\<Longrightarrow> \\<not> is_axiom (s_of_ns (snd (f (n + na))))\n 2. \\<And>na.\n       \\<lbrakk>infinite (deriv s); contains f n (0, NAtom p vs);\n        contains f (n + na) (0, NAtom p vs);\n        \\<not> is_axiom (s_of_ns (snd (f (n + na))))\\<rbrakk>\n       \\<Longrightarrow> contains f (n + Suc na) (0, NAtom p vs)", "apply(rule)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>na.\n       \\<lbrakk>infinite (deriv s); contains f n (0, NAtom p vs);\n        contains f (n + na) (0, NAtom p vs);\n        infinite (deriv (snd (f (n + na))));\n        is_axiom (s_of_ns (snd (f (n + na))))\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>na.\n       \\<lbrakk>infinite (deriv s); contains f n (0, NAtom p vs);\n        contains f (n + na) (0, NAtom p vs);\n        \\<not> is_axiom (s_of_ns (snd (f (n + na))))\\<rbrakk>\n       \\<Longrightarrow> contains f (n + Suc na) (0, NAtom p vs)", "apply(simp add: deriv_is_axiom)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>na.\n       \\<lbrakk>infinite (deriv s); contains f n (0, NAtom p vs);\n        contains f (n + na) (0, NAtom p vs);\n        \\<not> is_axiom (s_of_ns (snd (f (n + na))))\\<rbrakk>\n       \\<Longrightarrow> contains f (n + Suc na) (0, NAtom p vs)", "apply(simp add: contains_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>na.\n       \\<lbrakk>infinite (deriv s); (0, NAtom p vs) \\<in> set (snd (f n));\n        (0, NAtom p vs) \\<in> set (snd (f (n + na)));\n        \\<not> is_axiom (s_of_ns (snd (f (n + na))))\\<rbrakk>\n       \\<Longrightarrow> (0, NAtom p vs) \\<in> set (snd (f (Suc (n + na))))", "apply(drule_tac p = \"snd (f (n + na))\" in list_decomp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>na.\n       \\<lbrakk>infinite (deriv s); (0, NAtom p vs) \\<in> set (snd (f n));\n        \\<not> is_axiom (s_of_ns (snd (f (n + na))));\n        \\<exists>xs ys.\n           snd (f (n + na)) = xs @ (0, NAtom p vs) # ys \\<and>\n           (0, NAtom p vs) \\<notin> set xs\\<rbrakk>\n       \\<Longrightarrow> (0, NAtom p vs) \\<in> set (snd (f (Suc (n + na))))", "apply(elim exE conjE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>na xs ys.\n       \\<lbrakk>infinite (deriv s); (0, NAtom p vs) \\<in> set (snd (f n));\n        \\<not> is_axiom (s_of_ns (snd (f (n + na))));\n        snd (f (n + na)) = xs @ (0, NAtom p vs) # ys;\n        (0, NAtom p vs) \\<notin> set xs\\<rbrakk>\n       \\<Longrightarrow> (0, NAtom p vs) \\<in> set (snd (f (Suc (n + na))))", "apply(case_tac xs)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>na xs ys.\n       \\<lbrakk>infinite (deriv s); (0, NAtom p vs) \\<in> set (snd (f n));\n        \\<not> is_axiom (s_of_ns (snd (f (n + na))));\n        snd (f (n + na)) = xs @ (0, NAtom p vs) # ys;\n        (0, NAtom p vs) \\<notin> set xs; xs = []\\<rbrakk>\n       \\<Longrightarrow> (0, NAtom p vs) \\<in> set (snd (f (Suc (n + na))))\n 2. \\<And>na xs ys a list.\n       \\<lbrakk>infinite (deriv s); (0, NAtom p vs) \\<in> set (snd (f n));\n        \\<not> is_axiom (s_of_ns (snd (f (n + na))));\n        snd (f (n + na)) = xs @ (0, NAtom p vs) # ys;\n        (0, NAtom p vs) \\<notin> set xs; xs = a # list\\<rbrakk>\n       \\<Longrightarrow> (0, NAtom p vs) \\<in> set (snd (f (Suc (n + na))))", "apply(simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>na xs ys.\n       \\<lbrakk>infinite (deriv s); (0, NAtom p vs) \\<in> set (snd (f n));\n        \\<not> is_axiom (s_of_ns ((0, NAtom p vs) # ys));\n        snd (f (n + na)) = (0, NAtom p vs) # ys; xs = []\\<rbrakk>\n       \\<Longrightarrow> (0, NAtom p vs) \\<in> set (snd (f (Suc (n + na))))\n 2. \\<And>na xs ys a list.\n       \\<lbrakk>infinite (deriv s); (0, NAtom p vs) \\<in> set (snd (f n));\n        \\<not> is_axiom (s_of_ns (snd (f (n + na))));\n        snd (f (n + na)) = xs @ (0, NAtom p vs) # ys;\n        (0, NAtom p vs) \\<notin> set xs; xs = a # list\\<rbrakk>\n       \\<Longrightarrow> (0, NAtom p vs) \\<in> set (snd (f (Suc (n + na))))", "apply(subgoal_tac \"(snd (f (Suc (n + na)))) : set (subs (snd (f (n + na))))\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>na xs ys.\n       \\<lbrakk>infinite (deriv s); (0, NAtom p vs) \\<in> set (snd (f n));\n        \\<not> is_axiom (s_of_ns ((0, NAtom p vs) # ys));\n        snd (f (n + na)) = (0, NAtom p vs) # ys; xs = [];\n        snd (f (Suc (n + na))) \\<in> set (subs (snd (f (n + na))))\\<rbrakk>\n       \\<Longrightarrow> (0, NAtom p vs) \\<in> set (snd (f (Suc (n + na))))\n 2. \\<And>na xs ys.\n       \\<lbrakk>infinite (deriv s); (0, NAtom p vs) \\<in> set (snd (f n));\n        \\<not> is_axiom (s_of_ns ((0, NAtom p vs) # ys));\n        snd (f (n + na)) = (0, NAtom p vs) # ys; xs = []\\<rbrakk>\n       \\<Longrightarrow> snd (f (Suc (n + na)))\n                         \\<in> set (subs (snd (f (n + na))))\n 3. \\<And>na xs ys a list.\n       \\<lbrakk>infinite (deriv s); (0, NAtom p vs) \\<in> set (snd (f n));\n        \\<not> is_axiom (s_of_ns (snd (f (n + na))));\n        snd (f (n + na)) = xs @ (0, NAtom p vs) # ys;\n        (0, NAtom p vs) \\<notin> set xs; xs = a # list\\<rbrakk>\n       \\<Longrightarrow> (0, NAtom p vs) \\<in> set (snd (f (Suc (n + na))))", "apply(simp add: Let_def split: if_splits)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>na xs ys.\n       \\<lbrakk>infinite (deriv s); (0, NAtom p vs) \\<in> set (snd (f n));\n        \\<not> is_axiom (s_of_ns ((0, NAtom p vs) # ys));\n        snd (f (n + na)) = (0, NAtom p vs) # ys; xs = []\\<rbrakk>\n       \\<Longrightarrow> snd (f (Suc (n + na)))\n                         \\<in> set (subs (snd (f (n + na))))\n 2. \\<And>na xs ys a list.\n       \\<lbrakk>infinite (deriv s); (0, NAtom p vs) \\<in> set (snd (f n));\n        \\<not> is_axiom (s_of_ns (snd (f (n + na))));\n        snd (f (n + na)) = xs @ (0, NAtom p vs) # ys;\n        (0, NAtom p vs) \\<notin> set xs; xs = a # list\\<rbrakk>\n       \\<Longrightarrow> (0, NAtom p vs) \\<in> set (snd (f (Suc (n + na))))", "apply(frule_tac is_path_f)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>na xs ys.\n       \\<lbrakk>infinite (deriv s); (0, NAtom p vs) \\<in> set (snd (f n));\n        \\<not> is_axiom (s_of_ns ((0, NAtom p vs) # ys));\n        snd (f (n + na)) = (0, NAtom p vs) # ys; xs = [];\n        \\<forall>n.\n           f n \\<in> deriv s \\<and>\n           fst (f n) = n \\<and>\n           snd (f (Suc n)) \\<in> set (subs (snd (f n))) \\<and>\n           infinite (deriv (snd (f n)))\\<rbrakk>\n       \\<Longrightarrow> snd (f (Suc (n + na)))\n                         \\<in> set (subs (snd (f (n + na))))\n 2. \\<And>na xs ys a list.\n       \\<lbrakk>infinite (deriv s); (0, NAtom p vs) \\<in> set (snd (f n));\n        \\<not> is_axiom (s_of_ns (snd (f (n + na))));\n        snd (f (n + na)) = xs @ (0, NAtom p vs) # ys;\n        (0, NAtom p vs) \\<notin> set xs; xs = a # list\\<rbrakk>\n       \\<Longrightarrow> (0, NAtom p vs) \\<in> set (snd (f (Suc (n + na))))", "apply(drule_tac x=\"n+na\" in spec)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>na xs ys.\n       \\<lbrakk>infinite (deriv s); (0, NAtom p vs) \\<in> set (snd (f n));\n        \\<not> is_axiom (s_of_ns ((0, NAtom p vs) # ys));\n        snd (f (n + na)) = (0, NAtom p vs) # ys; xs = [];\n        f (n + na) \\<in> deriv s \\<and>\n        fst (f (n + na)) = n + na \\<and>\n        snd (f (Suc (n + na))) \\<in> set (subs (snd (f (n + na)))) \\<and>\n        infinite (deriv (snd (f (n + na))))\\<rbrakk>\n       \\<Longrightarrow> snd (f (Suc (n + na)))\n                         \\<in> set (subs (snd (f (n + na))))\n 2. \\<And>na xs ys a list.\n       \\<lbrakk>infinite (deriv s); (0, NAtom p vs) \\<in> set (snd (f n));\n        \\<not> is_axiom (s_of_ns (snd (f (n + na))));\n        snd (f (n + na)) = xs @ (0, NAtom p vs) # ys;\n        (0, NAtom p vs) \\<notin> set xs; xs = a # list\\<rbrakk>\n       \\<Longrightarrow> (0, NAtom p vs) \\<in> set (snd (f (Suc (n + na))))", "apply(force)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>na xs ys a list.\n       \\<lbrakk>infinite (deriv s); (0, NAtom p vs) \\<in> set (snd (f n));\n        \\<not> is_axiom (s_of_ns (snd (f (n + na))));\n        snd (f (n + na)) = xs @ (0, NAtom p vs) # ys;\n        (0, NAtom p vs) \\<notin> set xs; xs = a # list\\<rbrakk>\n       \\<Longrightarrow> (0, NAtom p vs) \\<in> set (snd (f (Suc (n + na))))", "apply(drule_tac progress)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>na xs ys a list.\n       \\<lbrakk>(0, NAtom p vs) \\<in> set (snd (f n));\n        \\<not> is_axiom (s_of_ns (snd (f (n + na))));\n        snd (f (n + na)) = xs @ (0, NAtom p vs) # ys;\n        (0, NAtom p vs) \\<notin> set xs; xs = a # list;\n        snd (f (?n43 na xs ys a list)) =\n        ?a43 na xs ys a list # ?list43 na xs ys a list \\<longrightarrow>\n        (\\<exists>zs'.\n            snd (f (Suc (?n43 na xs ys a list))) =\n            ?list43 na xs ys a list @ zs')\\<rbrakk>\n       \\<Longrightarrow> (0, NAtom p vs) \\<in> set (snd (f (Suc (n + na))))", "apply(erule impE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>na xs ys a list.\n       \\<lbrakk>(0, NAtom p vs) \\<in> set (snd (f n));\n        \\<not> is_axiom (s_of_ns (snd (f (n + na))));\n        snd (f (n + na)) = xs @ (0, NAtom p vs) # ys;\n        (0, NAtom p vs) \\<notin> set xs; xs = a # list\\<rbrakk>\n       \\<Longrightarrow> snd (f (?n43 na xs ys a list)) =\n                         ?a43 na xs ys a list # ?list43 na xs ys a list\n 2. \\<And>na xs ys a list.\n       \\<lbrakk>(0, NAtom p vs) \\<in> set (snd (f n));\n        \\<not> is_axiom (s_of_ns (snd (f (n + na))));\n        snd (f (n + na)) = xs @ (0, NAtom p vs) # ys;\n        (0, NAtom p vs) \\<notin> set xs; xs = a # list;\n        \\<exists>zs'.\n           snd (f (Suc (?n43 na xs ys a list))) =\n           ?list43 na xs ys a list @ zs'\\<rbrakk>\n       \\<Longrightarrow> (0, NAtom p vs) \\<in> set (snd (f (Suc (n + na))))", "apply(force)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>na xs ys a list.\n       \\<lbrakk>(0, NAtom p vs) \\<in> set (snd (f n));\n        \\<not> is_axiom (s_of_ns (snd (f (n + na))));\n        snd (f (n + na)) = xs @ (0, NAtom p vs) # ys;\n        (0, NAtom p vs) \\<notin> set xs; xs = a # list;\n        \\<exists>zs'.\n           snd (f (Suc (n + na))) =\n           (list @ (0, NAtom p vs) # ys) @ zs'\\<rbrakk>\n       \\<Longrightarrow> (0, NAtom p vs) \\<in> set (snd (f (Suc (n + na))))", "apply(force)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in loc1) contains_propagates_fconj: \"infinite (deriv s) ==> contains f n (0, FConj g h) ==> (\\<exists>y. contains f (n+y) (0,g) | contains f (n+y) (0,h))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>infinite (deriv s); contains f n (0, FConj g h)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>y.\n                         contains f (n + y) (0, g) \\<or>\n                         contains f (n + y) (0, h)", "apply(subgoal_tac \"(\\<exists>l. considers f (n+l) (0,FConj g h))\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>infinite (deriv s); contains f n (0, FConj g h);\n     \\<exists>l. considers f (n + l) (0, FConj g h)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>y.\n                         contains f (n + y) (0, g) \\<or>\n                         contains f (n + y) (0, h)\n 2. \\<lbrakk>infinite (deriv s); contains f n (0, FConj g h)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>l. considers f (n + l) (0, FConj g h)", "defer"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>infinite (deriv s); contains f n (0, FConj g h)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>l. considers f (n + l) (0, FConj g h)\n 2. \\<lbrakk>infinite (deriv s); contains f n (0, FConj g h);\n     \\<exists>l. considers f (n + l) (0, FConj g h)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>y.\n                         contains f (n + y) (0, g) \\<or>\n                         contains f (n + y) (0, h)", "apply(rule contains_considers)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>infinite (deriv s); contains f n (0, FConj g h)\\<rbrakk>\n    \\<Longrightarrow> infinite (deriv s)\n 2. \\<lbrakk>infinite (deriv s); contains f n (0, FConj g h)\\<rbrakk>\n    \\<Longrightarrow> contains f n (0, FConj g h)\n 3. \\<lbrakk>infinite (deriv s); contains f n (0, FConj g h);\n     \\<exists>l. considers f (n + l) (0, FConj g h)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>y.\n                         contains f (n + y) (0, g) \\<or>\n                         contains f (n + y) (0, h)", "apply(assumption)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>infinite (deriv s); contains f n (0, FConj g h)\\<rbrakk>\n    \\<Longrightarrow> contains f n (0, FConj g h)\n 2. \\<lbrakk>infinite (deriv s); contains f n (0, FConj g h);\n     \\<exists>l. considers f (n + l) (0, FConj g h)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>y.\n                         contains f (n + y) (0, g) \\<or>\n                         contains f (n + y) (0, h)", "apply(assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>infinite (deriv s); contains f n (0, FConj g h);\n     \\<exists>l. considers f (n + l) (0, FConj g h)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>y.\n                         contains f (n + y) (0, g) \\<or>\n                         contains f (n + y) (0, h)", "apply(erule exE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>l.\n       \\<lbrakk>infinite (deriv s); contains f n (0, FConj g h);\n        considers f (n + l) (0, FConj g h)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y.\n                            contains f (n + y) (0, g) \\<or>\n                            contains f (n + y) (0, h)", "apply(rule_tac x=\"Suc l\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>l.\n       \\<lbrakk>infinite (deriv s); contains f n (0, FConj g h);\n        considers f (n + l) (0, FConj g h)\\<rbrakk>\n       \\<Longrightarrow> contains f (n + Suc l) (0, g) \\<or>\n                         contains f (n + Suc l) (0, h)", "apply(simp add: considers_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>l.\n       \\<lbrakk>infinite (deriv s); contains f n (0, FConj g h);\n        case snd (f (n + l)) of [] \\<Rightarrow> False\n        | x # xs \\<Rightarrow> x = (0, FConj g h)\\<rbrakk>\n       \\<Longrightarrow> contains f (Suc (n + l)) (0, g) \\<or>\n                         contains f (Suc (n + l)) (0, h)", "apply(case_tac \"snd (f (n + l))\", simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>l a list.\n       \\<lbrakk>infinite (deriv s); contains f n (0, FConj g h);\n        case snd (f (n + l)) of [] \\<Rightarrow> False\n        | x # xs \\<Rightarrow> x = (0, FConj g h);\n        snd (f (n + l)) = a # list\\<rbrakk>\n       \\<Longrightarrow> contains f (Suc (n + l)) (0, g) \\<or>\n                         contains f (Suc (n + l)) (0, h)", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>l a list.\n       \\<lbrakk>infinite (deriv s); contains f n (0, FConj g h);\n        a = (0, FConj g h); snd (f (n + l)) = (0, FConj g h) # list\\<rbrakk>\n       \\<Longrightarrow> contains f (Suc (n + l)) (0, g) \\<or>\n                         contains f (Suc (n + l)) (0, h)", "apply(subgoal_tac \"(snd (f (Suc (n + l)))) : set (subs (snd (f (n + l))))\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>l a list.\n       \\<lbrakk>infinite (deriv s); contains f n (0, FConj g h);\n        a = (0, FConj g h); snd (f (n + l)) = (0, FConj g h) # list;\n        snd (f (Suc (n + l))) \\<in> set (subs (snd (f (n + l))))\\<rbrakk>\n       \\<Longrightarrow> contains f (Suc (n + l)) (0, g) \\<or>\n                         contains f (Suc (n + l)) (0, h)\n 2. \\<And>l a list.\n       \\<lbrakk>infinite (deriv s); contains f n (0, FConj g h);\n        a = (0, FConj g h); snd (f (n + l)) = (0, FConj g h) # list\\<rbrakk>\n       \\<Longrightarrow> snd (f (Suc (n + l)))\n                         \\<in> set (subs (snd (f (n + l))))", "apply(simp add: contains_def Let_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>l a list.\n       \\<lbrakk>infinite (deriv s); (0, FConj g h) \\<in> set (snd (f n));\n        a = (0, FConj g h); snd (f (n + l)) = (0, FConj g h) # list;\n        snd (f (Suc (n + l))) = list @ [(0, g)] \\<or>\n        snd (f (Suc (n + l))) = list @ [(0, h)]\\<rbrakk>\n       \\<Longrightarrow> (0, g) \\<in> set (snd (f (Suc (n + l)))) \\<or>\n                         (0, h) \\<in> set (snd (f (Suc (n + l))))\n 2. \\<And>l a list.\n       \\<lbrakk>infinite (deriv s); contains f n (0, FConj g h);\n        a = (0, FConj g h); snd (f (n + l)) = (0, FConj g h) # list\\<rbrakk>\n       \\<Longrightarrow> snd (f (Suc (n + l)))\n                         \\<in> set (subs (snd (f (n + l))))", "apply(force)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>l a list.\n       \\<lbrakk>infinite (deriv s); contains f n (0, FConj g h);\n        a = (0, FConj g h); snd (f (n + l)) = (0, FConj g h) # list\\<rbrakk>\n       \\<Longrightarrow> snd (f (Suc (n + l)))\n                         \\<in> set (subs (snd (f (n + l))))", "apply(frule_tac is_path_f)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>l a list.\n       \\<lbrakk>infinite (deriv s); contains f n (0, FConj g h);\n        a = (0, FConj g h); snd (f (n + l)) = (0, FConj g h) # list;\n        \\<forall>n.\n           f n \\<in> deriv s \\<and>\n           fst (f n) = n \\<and>\n           snd (f (Suc n)) \\<in> set (subs (snd (f n))) \\<and>\n           infinite (deriv (snd (f n)))\\<rbrakk>\n       \\<Longrightarrow> snd (f (Suc (n + l)))\n                         \\<in> set (subs (snd (f (n + l))))", "apply(drule_tac x=\"n+l\" in spec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>l a list.\n       \\<lbrakk>infinite (deriv s); contains f n (0, FConj g h);\n        a = (0, FConj g h); snd (f (n + l)) = (0, FConj g h) # list;\n        f (n + l) \\<in> deriv s \\<and>\n        fst (f (n + l)) = n + l \\<and>\n        snd (f (Suc (n + l))) \\<in> set (subs (snd (f (n + l)))) \\<and>\n        infinite (deriv (snd (f (n + l))))\\<rbrakk>\n       \\<Longrightarrow> snd (f (Suc (n + l)))\n                         \\<in> set (subs (snd (f (n + l))))", "apply(force)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in loc1) contains_propagates_fdisj: \"infinite (deriv s) ==> contains f n (0, FDisj g h) ==> (\\<exists>y. contains f (n+y) (0,g) & contains f (n+y) (0,h))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>infinite (deriv s); contains f n (0, FDisj g h)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>y.\n                         contains f (n + y) (0, g) \\<and>\n                         contains f (n + y) (0, h)", "apply(subgoal_tac \"(\\<exists>l. considers f (n+l) (0,FDisj g h))\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>infinite (deriv s); contains f n (0, FDisj g h);\n     \\<exists>l. considers f (n + l) (0, FDisj g h)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>y.\n                         contains f (n + y) (0, g) \\<and>\n                         contains f (n + y) (0, h)\n 2. \\<lbrakk>infinite (deriv s); contains f n (0, FDisj g h)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>l. considers f (n + l) (0, FDisj g h)", "defer"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>infinite (deriv s); contains f n (0, FDisj g h)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>l. considers f (n + l) (0, FDisj g h)\n 2. \\<lbrakk>infinite (deriv s); contains f n (0, FDisj g h);\n     \\<exists>l. considers f (n + l) (0, FDisj g h)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>y.\n                         contains f (n + y) (0, g) \\<and>\n                         contains f (n + y) (0, h)", "apply(rule contains_considers)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>infinite (deriv s); contains f n (0, FDisj g h)\\<rbrakk>\n    \\<Longrightarrow> infinite (deriv s)\n 2. \\<lbrakk>infinite (deriv s); contains f n (0, FDisj g h)\\<rbrakk>\n    \\<Longrightarrow> contains f n (0, FDisj g h)\n 3. \\<lbrakk>infinite (deriv s); contains f n (0, FDisj g h);\n     \\<exists>l. considers f (n + l) (0, FDisj g h)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>y.\n                         contains f (n + y) (0, g) \\<and>\n                         contains f (n + y) (0, h)", "apply(assumption)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>infinite (deriv s); contains f n (0, FDisj g h)\\<rbrakk>\n    \\<Longrightarrow> contains f n (0, FDisj g h)\n 2. \\<lbrakk>infinite (deriv s); contains f n (0, FDisj g h);\n     \\<exists>l. considers f (n + l) (0, FDisj g h)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>y.\n                         contains f (n + y) (0, g) \\<and>\n                         contains f (n + y) (0, h)", "apply(assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>infinite (deriv s); contains f n (0, FDisj g h);\n     \\<exists>l. considers f (n + l) (0, FDisj g h)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>y.\n                         contains f (n + y) (0, g) \\<and>\n                         contains f (n + y) (0, h)", "apply(erule exE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>l.\n       \\<lbrakk>infinite (deriv s); contains f n (0, FDisj g h);\n        considers f (n + l) (0, FDisj g h)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y.\n                            contains f (n + y) (0, g) \\<and>\n                            contains f (n + y) (0, h)", "apply(rule_tac x=\"Suc l\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>l.\n       \\<lbrakk>infinite (deriv s); contains f n (0, FDisj g h);\n        considers f (n + l) (0, FDisj g h)\\<rbrakk>\n       \\<Longrightarrow> contains f (n + Suc l) (0, g) \\<and>\n                         contains f (n + Suc l) (0, h)", "apply(simp add: considers_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>l.\n       \\<lbrakk>infinite (deriv s); contains f n (0, FDisj g h);\n        case snd (f (n + l)) of [] \\<Rightarrow> False\n        | x # xs \\<Rightarrow> x = (0, FDisj g h)\\<rbrakk>\n       \\<Longrightarrow> contains f (Suc (n + l)) (0, g) \\<and>\n                         contains f (Suc (n + l)) (0, h)", "apply(case_tac \"snd (f (n + l))\", simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>l a list.\n       \\<lbrakk>infinite (deriv s); contains f n (0, FDisj g h);\n        case snd (f (n + l)) of [] \\<Rightarrow> False\n        | x # xs \\<Rightarrow> x = (0, FDisj g h);\n        snd (f (n + l)) = a # list\\<rbrakk>\n       \\<Longrightarrow> contains f (Suc (n + l)) (0, g) \\<and>\n                         contains f (Suc (n + l)) (0, h)", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>l a list.\n       \\<lbrakk>infinite (deriv s); contains f n (0, FDisj g h);\n        a = (0, FDisj g h); snd (f (n + l)) = (0, FDisj g h) # list\\<rbrakk>\n       \\<Longrightarrow> contains f (Suc (n + l)) (0, g) \\<and>\n                         contains f (Suc (n + l)) (0, h)", "apply(subgoal_tac \" (snd (f (Suc (n + l)))) : set (subs (snd (f (n + l))))\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>l a list.\n       \\<lbrakk>infinite (deriv s); contains f n (0, FDisj g h);\n        a = (0, FDisj g h); snd (f (n + l)) = (0, FDisj g h) # list;\n        snd (f (Suc (n + l))) \\<in> set (subs (snd (f (n + l))))\\<rbrakk>\n       \\<Longrightarrow> contains f (Suc (n + l)) (0, g) \\<and>\n                         contains f (Suc (n + l)) (0, h)\n 2. \\<And>l a list.\n       \\<lbrakk>infinite (deriv s); contains f n (0, FDisj g h);\n        a = (0, FDisj g h); snd (f (n + l)) = (0, FDisj g h) # list\\<rbrakk>\n       \\<Longrightarrow> snd (f (Suc (n + l)))\n                         \\<in> set (subs (snd (f (n + l))))", "apply(simp add: contains_def Let_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>l a list.\n       \\<lbrakk>infinite (deriv s); contains f n (0, FDisj g h);\n        a = (0, FDisj g h); snd (f (n + l)) = (0, FDisj g h) # list\\<rbrakk>\n       \\<Longrightarrow> snd (f (Suc (n + l)))\n                         \\<in> set (subs (snd (f (n + l))))", "apply(frule_tac is_path_f)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>l a list.\n       \\<lbrakk>infinite (deriv s); contains f n (0, FDisj g h);\n        a = (0, FDisj g h); snd (f (n + l)) = (0, FDisj g h) # list;\n        \\<forall>n.\n           f n \\<in> deriv s \\<and>\n           fst (f n) = n \\<and>\n           snd (f (Suc n)) \\<in> set (subs (snd (f n))) \\<and>\n           infinite (deriv (snd (f n)))\\<rbrakk>\n       \\<Longrightarrow> snd (f (Suc (n + l)))\n                         \\<in> set (subs (snd (f (n + l))))", "apply(drule_tac x=\"n+l\" in spec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>l a list.\n       \\<lbrakk>infinite (deriv s); contains f n (0, FDisj g h);\n        a = (0, FDisj g h); snd (f (n + l)) = (0, FDisj g h) # list;\n        f (n + l) \\<in> deriv s \\<and>\n        fst (f (n + l)) = n + l \\<and>\n        snd (f (Suc (n + l))) \\<in> set (subs (snd (f (n + l)))) \\<and>\n        infinite (deriv (snd (f (n + l))))\\<rbrakk>\n       \\<Longrightarrow> snd (f (Suc (n + l)))\n                         \\<in> set (subs (snd (f (n + l))))", "apply(force)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in loc1) contains_propagates_fall: \"infinite (deriv s) ==> contains f n (0, FAll g) \n  ==> (\\<exists>y. contains f (Suc(n+y)) (0,finst g (newvar (sfv (s_of_ns (snd (f (n+y))))))))\" \\<comment> \\<open>may need constraint on fv\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>infinite (deriv s); contains f n (0, FAll g)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>y.\n                         contains f (Suc (n + y))\n                          (0, finst g\n                               (newvar (sfv (s_of_ns (snd (f (n + y)))))))", "apply(subgoal_tac \"(\\<exists>l. considers f (n+l) (0,FAll g))\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>infinite (deriv s); contains f n (0, FAll g);\n     \\<exists>l. considers f (n + l) (0, FAll g)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>y.\n                         contains f (Suc (n + y))\n                          (0, finst g\n                               (newvar (sfv (s_of_ns (snd (f (n + y)))))))\n 2. \\<lbrakk>infinite (deriv s); contains f n (0, FAll g)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>l. considers f (n + l) (0, FAll g)", "defer"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>infinite (deriv s); contains f n (0, FAll g)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>l. considers f (n + l) (0, FAll g)\n 2. \\<lbrakk>infinite (deriv s); contains f n (0, FAll g);\n     \\<exists>l. considers f (n + l) (0, FAll g)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>y.\n                         contains f (Suc (n + y))\n                          (0, finst g\n                               (newvar (sfv (s_of_ns (snd (f (n + y)))))))", "apply(rule contains_considers)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>infinite (deriv s); contains f n (0, FAll g)\\<rbrakk>\n    \\<Longrightarrow> infinite (deriv s)\n 2. \\<lbrakk>infinite (deriv s); contains f n (0, FAll g)\\<rbrakk>\n    \\<Longrightarrow> contains f n (0, FAll g)\n 3. \\<lbrakk>infinite (deriv s); contains f n (0, FAll g);\n     \\<exists>l. considers f (n + l) (0, FAll g)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>y.\n                         contains f (Suc (n + y))\n                          (0, finst g\n                               (newvar (sfv (s_of_ns (snd (f (n + y)))))))", "apply(assumption)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>infinite (deriv s); contains f n (0, FAll g)\\<rbrakk>\n    \\<Longrightarrow> contains f n (0, FAll g)\n 2. \\<lbrakk>infinite (deriv s); contains f n (0, FAll g);\n     \\<exists>l. considers f (n + l) (0, FAll g)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>y.\n                         contains f (Suc (n + y))\n                          (0, finst g\n                               (newvar (sfv (s_of_ns (snd (f (n + y)))))))", "apply(assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>infinite (deriv s); contains f n (0, FAll g);\n     \\<exists>l. considers f (n + l) (0, FAll g)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>y.\n                         contains f (Suc (n + y))\n                          (0, finst g\n                               (newvar (sfv (s_of_ns (snd (f (n + y)))))))", "apply(erule exE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>l.\n       \\<lbrakk>infinite (deriv s); contains f n (0, FAll g);\n        considers f (n + l) (0, FAll g)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y.\n                            contains f (Suc (n + y))\n                             (0, finst g\n                                  (newvar\n                                    (sfv (s_of_ns (snd (f (n + y)))))))", "apply(rule_tac x=\"l\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>l.\n       \\<lbrakk>infinite (deriv s); contains f n (0, FAll g);\n        considers f (n + l) (0, FAll g)\\<rbrakk>\n       \\<Longrightarrow> contains f (Suc (n + l))\n                          (0, finst g\n                               (newvar (sfv (s_of_ns (snd (f (n + l)))))))", "apply(simp add: considers_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>l.\n       \\<lbrakk>infinite (deriv s); contains f n (0, FAll g);\n        case snd (f (n + l)) of [] \\<Rightarrow> False\n        | x # xs \\<Rightarrow> x = (0, FAll g)\\<rbrakk>\n       \\<Longrightarrow> contains f (Suc (n + l))\n                          (0, finst g\n                               (newvar (sfv (s_of_ns (snd (f (n + l)))))))", "apply(case_tac \"snd (f (n + l))\", simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>l a list.\n       \\<lbrakk>infinite (deriv s); contains f n (0, FAll g);\n        case snd (f (n + l)) of [] \\<Rightarrow> False\n        | x # xs \\<Rightarrow> x = (0, FAll g);\n        snd (f (n + l)) = a # list\\<rbrakk>\n       \\<Longrightarrow> contains f (Suc (n + l))\n                          (0, finst g\n                               (newvar (sfv (s_of_ns (snd (f (n + l)))))))", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>l a list.\n       \\<lbrakk>infinite (deriv s); contains f n (0, FAll g);\n        a = (0, FAll g); snd (f (n + l)) = (0, FAll g) # list\\<rbrakk>\n       \\<Longrightarrow> contains f (Suc (n + l))\n                          (0, finst g\n                               (newvar\n                                 (sfv (s_of_ns ((0, FAll g) # list)))))", "apply(subgoal_tac \"(snd (f (Suc (n + l)))) : set (subs (snd (f (n + l))))\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>l a list.\n       \\<lbrakk>infinite (deriv s); contains f n (0, FAll g);\n        a = (0, FAll g); snd (f (n + l)) = (0, FAll g) # list;\n        snd (f (Suc (n + l))) \\<in> set (subs (snd (f (n + l))))\\<rbrakk>\n       \\<Longrightarrow> contains f (Suc (n + l))\n                          (0, finst g\n                               (newvar\n                                 (sfv (s_of_ns ((0, FAll g) # list)))))\n 2. \\<And>l a list.\n       \\<lbrakk>infinite (deriv s); contains f n (0, FAll g);\n        a = (0, FAll g); snd (f (n + l)) = (0, FAll g) # list\\<rbrakk>\n       \\<Longrightarrow> snd (f (Suc (n + l)))\n                         \\<in> set (subs (snd (f (n + l))))", "apply(simp add: contains_def Let_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>l a list.\n       \\<lbrakk>infinite (deriv s); contains f n (0, FAll g);\n        a = (0, FAll g); snd (f (n + l)) = (0, FAll g) # list\\<rbrakk>\n       \\<Longrightarrow> snd (f (Suc (n + l)))\n                         \\<in> set (subs (snd (f (n + l))))", "apply(frule_tac is_path_f)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>l a list.\n       \\<lbrakk>infinite (deriv s); contains f n (0, FAll g);\n        a = (0, FAll g); snd (f (n + l)) = (0, FAll g) # list;\n        \\<forall>n.\n           f n \\<in> deriv s \\<and>\n           fst (f n) = n \\<and>\n           snd (f (Suc n)) \\<in> set (subs (snd (f n))) \\<and>\n           infinite (deriv (snd (f n)))\\<rbrakk>\n       \\<Longrightarrow> snd (f (Suc (n + l)))\n                         \\<in> set (subs (snd (f (n + l))))", "apply(drule_tac x=\"n+l\" in spec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>l a list.\n       \\<lbrakk>infinite (deriv s); contains f n (0, FAll g);\n        a = (0, FAll g); snd (f (n + l)) = (0, FAll g) # list;\n        f (n + l) \\<in> deriv s \\<and>\n        fst (f (n + l)) = n + l \\<and>\n        snd (f (Suc (n + l))) \\<in> set (subs (snd (f (n + l)))) \\<and>\n        infinite (deriv (snd (f (n + l))))\\<rbrakk>\n       \\<Longrightarrow> snd (f (Suc (n + l)))\n                         \\<in> set (subs (snd (f (n + l))))", "apply(force)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in loc1) contains_propagates_fex: \"infinite (deriv s) ==> contains f n (m, FEx g) \n  ==> (\\<exists>y. \n  (contains f (n+y) (0,finst g m))\n  & (contains f (n+y) (Suc m,FEx g)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>infinite (deriv s); contains f n (m, FEx g)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>y.\n                         contains f (n + y) (0, finst g m) \\<and>\n                         contains f (n + y) (Suc m, FEx g)", "apply(subgoal_tac \"(\\<exists>l. considers f (n+l) (m,FEx g))\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>infinite (deriv s); contains f n (m, FEx g);\n     \\<exists>l. considers f (n + l) (m, FEx g)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>y.\n                         contains f (n + y) (0, finst g m) \\<and>\n                         contains f (n + y) (Suc m, FEx g)\n 2. \\<lbrakk>infinite (deriv s); contains f n (m, FEx g)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>l. considers f (n + l) (m, FEx g)", "defer"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>infinite (deriv s); contains f n (m, FEx g)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>l. considers f (n + l) (m, FEx g)\n 2. \\<lbrakk>infinite (deriv s); contains f n (m, FEx g);\n     \\<exists>l. considers f (n + l) (m, FEx g)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>y.\n                         contains f (n + y) (0, finst g m) \\<and>\n                         contains f (n + y) (Suc m, FEx g)", "apply(rule contains_considers)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>infinite (deriv s); contains f n (m, FEx g)\\<rbrakk>\n    \\<Longrightarrow> infinite (deriv s)\n 2. \\<lbrakk>infinite (deriv s); contains f n (m, FEx g)\\<rbrakk>\n    \\<Longrightarrow> contains f n (m, FEx g)\n 3. \\<lbrakk>infinite (deriv s); contains f n (m, FEx g);\n     \\<exists>l. considers f (n + l) (m, FEx g)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>y.\n                         contains f (n + y) (0, finst g m) \\<and>\n                         contains f (n + y) (Suc m, FEx g)", "apply(assumption)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>infinite (deriv s); contains f n (m, FEx g)\\<rbrakk>\n    \\<Longrightarrow> contains f n (m, FEx g)\n 2. \\<lbrakk>infinite (deriv s); contains f n (m, FEx g);\n     \\<exists>l. considers f (n + l) (m, FEx g)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>y.\n                         contains f (n + y) (0, finst g m) \\<and>\n                         contains f (n + y) (Suc m, FEx g)", "apply(assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>infinite (deriv s); contains f n (m, FEx g);\n     \\<exists>l. considers f (n + l) (m, FEx g)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>y.\n                         contains f (n + y) (0, finst g m) \\<and>\n                         contains f (n + y) (Suc m, FEx g)", "apply(erule exE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>l.\n       \\<lbrakk>infinite (deriv s); contains f n (m, FEx g);\n        considers f (n + l) (m, FEx g)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y.\n                            contains f (n + y) (0, finst g m) \\<and>\n                            contains f (n + y) (Suc m, FEx g)", "apply(rule_tac x=\"Suc l\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>l.\n       \\<lbrakk>infinite (deriv s); contains f n (m, FEx g);\n        considers f (n + l) (m, FEx g)\\<rbrakk>\n       \\<Longrightarrow> contains f (n + Suc l) (0, finst g m) \\<and>\n                         contains f (n + Suc l) (Suc m, FEx g)", "apply(simp add: considers_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>l.\n       \\<lbrakk>infinite (deriv s); contains f n (m, FEx g);\n        case snd (f (n + l)) of [] \\<Rightarrow> False\n        | x # xs \\<Rightarrow> x = (m, FEx g)\\<rbrakk>\n       \\<Longrightarrow> contains f (Suc (n + l)) (0, finst g m) \\<and>\n                         contains f (Suc (n + l)) (Suc m, FEx g)", "apply(case_tac \"snd (f (n + l))\", simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>l a list.\n       \\<lbrakk>infinite (deriv s); contains f n (m, FEx g);\n        case snd (f (n + l)) of [] \\<Rightarrow> False\n        | x # xs \\<Rightarrow> x = (m, FEx g);\n        snd (f (n + l)) = a # list\\<rbrakk>\n       \\<Longrightarrow> contains f (Suc (n + l)) (0, finst g m) \\<and>\n                         contains f (Suc (n + l)) (Suc m, FEx g)", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>l a list.\n       \\<lbrakk>infinite (deriv s); contains f n (m, FEx g); a = (m, FEx g);\n        snd (f (n + l)) = (m, FEx g) # list\\<rbrakk>\n       \\<Longrightarrow> contains f (Suc (n + l)) (0, finst g m) \\<and>\n                         contains f (Suc (n + l)) (Suc m, FEx g)", "apply(subgoal_tac \" (snd (f (Suc (n + l)))) : set (subs (snd (f (n + l))))\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>l a list.\n       \\<lbrakk>infinite (deriv s); contains f n (m, FEx g); a = (m, FEx g);\n        snd (f (n + l)) = (m, FEx g) # list;\n        snd (f (Suc (n + l))) \\<in> set (subs (snd (f (n + l))))\\<rbrakk>\n       \\<Longrightarrow> contains f (Suc (n + l)) (0, finst g m) \\<and>\n                         contains f (Suc (n + l)) (Suc m, FEx g)\n 2. \\<And>l a list.\n       \\<lbrakk>infinite (deriv s); contains f n (m, FEx g); a = (m, FEx g);\n        snd (f (n + l)) = (m, FEx g) # list\\<rbrakk>\n       \\<Longrightarrow> snd (f (Suc (n + l)))\n                         \\<in> set (subs (snd (f (n + l))))", "apply(simp add: contains_def Let_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>l a list.\n       \\<lbrakk>infinite (deriv s); contains f n (m, FEx g); a = (m, FEx g);\n        snd (f (n + l)) = (m, FEx g) # list\\<rbrakk>\n       \\<Longrightarrow> snd (f (Suc (n + l)))\n                         \\<in> set (subs (snd (f (n + l))))", "apply(frule_tac is_path_f)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>l a list.\n       \\<lbrakk>infinite (deriv s); contains f n (m, FEx g); a = (m, FEx g);\n        snd (f (n + l)) = (m, FEx g) # list;\n        \\<forall>n.\n           f n \\<in> deriv s \\<and>\n           fst (f n) = n \\<and>\n           snd (f (Suc n)) \\<in> set (subs (snd (f n))) \\<and>\n           infinite (deriv (snd (f n)))\\<rbrakk>\n       \\<Longrightarrow> snd (f (Suc (n + l)))\n                         \\<in> set (subs (snd (f (n + l))))", "apply(drule_tac x=\"n+l\" in spec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>l a list.\n       \\<lbrakk>infinite (deriv s); contains f n (m, FEx g); a = (m, FEx g);\n        snd (f (n + l)) = (m, FEx g) # list;\n        f (n + l) \\<in> deriv s \\<and>\n        fst (f (n + l)) = n + l \\<and>\n        snd (f (Suc (n + l))) \\<in> set (subs (snd (f (n + l)))) \\<and>\n        infinite (deriv (snd (f (n + l))))\\<rbrakk>\n       \\<Longrightarrow> snd (f (Suc (n + l)))\n                         \\<in> set (subs (snd (f (n + l))))", "apply(force)"], ["proof (prove)\ngoal:\nNo subgoals!", "done\n\n  \\<comment> \\<open>also need that if contains one, then contained an original at beginning\\<close>\n  \\<comment> \\<open>existentials: show that for exists formulae, if Suc m is marker, then there must have been m\\<close>\n  \\<comment> \\<open>show this by showing that nodes are upwardly closed, i.e. if never contains (m,x), then never contains (Suc m, x), by induction on n\\<close>"], ["", "lemma (in loc1) FEx_downward: \"infinite (deriv s) ==> init s ==> \\<forall>m. (Suc m,FEx g) \\<in> set (snd (f n)) --> (\\<exists>n'. (m, FEx g) \\<in> set (snd (f n')))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>infinite (deriv s); init s\\<rbrakk>\n    \\<Longrightarrow> \\<forall>m.\n                         (Suc m, FEx g)\n                         \\<in> set (snd (f n)) \\<longrightarrow>\n                         (\\<exists>n'. (m, FEx g) \\<in> set (snd (f n')))", "apply(frule_tac is_path_f)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>infinite (deriv s); init s;\n     \\<forall>n.\n        f n \\<in> deriv s \\<and>\n        fst (f n) = n \\<and>\n        snd (f (Suc n)) \\<in> set (subs (snd (f n))) \\<and>\n        infinite (deriv (snd (f n)))\\<rbrakk>\n    \\<Longrightarrow> \\<forall>m.\n                         (Suc m, FEx g)\n                         \\<in> set (snd (f n)) \\<longrightarrow>\n                         (\\<exists>n'. (m, FEx g) \\<in> set (snd (f n')))", "apply(induct_tac n)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>infinite (deriv s); init s;\n     \\<forall>n.\n        f n \\<in> deriv s \\<and>\n        fst (f n) = n \\<and>\n        snd (f (Suc n)) \\<in> set (subs (snd (f n))) \\<and>\n        infinite (deriv (snd (f n)))\\<rbrakk>\n    \\<Longrightarrow> \\<forall>m.\n                         (Suc m, FEx g)\n                         \\<in> set (snd (f 0)) \\<longrightarrow>\n                         (\\<exists>n'. (m, FEx g) \\<in> set (snd (f n')))\n 2. \\<And>n.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>n.\n           f n \\<in> deriv s \\<and>\n           fst (f n) = n \\<and>\n           snd (f (Suc n)) \\<in> set (subs (snd (f n))) \\<and>\n           infinite (deriv (snd (f n)));\n        \\<forall>m.\n           (Suc m, FEx g) \\<in> set (snd (f n)) \\<longrightarrow>\n           (\\<exists>n'. (m, FEx g) \\<in> set (snd (f n')))\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m.\n                            (Suc m, FEx g)\n                            \\<in> set (snd (f (Suc n))) \\<longrightarrow>\n                            (\\<exists>n'. (m, FEx g) \\<in> set (snd (f n')))", "apply(drule_tac x=\"0\" in spec)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>infinite (deriv s); init s;\n     f 0 \\<in> deriv s \\<and>\n     fst (f 0) = 0 \\<and>\n     snd (f (Suc 0)) \\<in> set (subs (snd (f 0))) \\<and>\n     infinite (deriv (snd (f 0)))\\<rbrakk>\n    \\<Longrightarrow> \\<forall>m.\n                         (Suc m, FEx g)\n                         \\<in> set (snd (f 0)) \\<longrightarrow>\n                         (\\<exists>n'. (m, FEx g) \\<in> set (snd (f n')))\n 2. \\<And>n.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>n.\n           f n \\<in> deriv s \\<and>\n           fst (f n) = n \\<and>\n           snd (f (Suc n)) \\<in> set (subs (snd (f n))) \\<and>\n           infinite (deriv (snd (f n)));\n        \\<forall>m.\n           (Suc m, FEx g) \\<in> set (snd (f n)) \\<longrightarrow>\n           (\\<exists>n'. (m, FEx g) \\<in> set (snd (f n')))\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m.\n                            (Suc m, FEx g)\n                            \\<in> set (snd (f (Suc n))) \\<longrightarrow>\n                            (\\<exists>n'. (m, FEx g) \\<in> set (snd (f n')))", "apply(case_tac \"f 0\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>infinite (deriv s); init s;\n        f 0 \\<in> deriv s \\<and>\n        fst (f 0) = 0 \\<and>\n        snd (f (Suc 0)) \\<in> set (subs (snd (f 0))) \\<and>\n        infinite (deriv (snd (f 0)));\n        f 0 = (a, b)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m.\n                            (Suc m, FEx g)\n                            \\<in> set (snd (f 0)) \\<longrightarrow>\n                            (\\<exists>n'. (m, FEx g) \\<in> set (snd (f n')))\n 2. \\<And>n.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>n.\n           f n \\<in> deriv s \\<and>\n           fst (f n) = n \\<and>\n           snd (f (Suc n)) \\<in> set (subs (snd (f n))) \\<and>\n           infinite (deriv (snd (f n)));\n        \\<forall>m.\n           (Suc m, FEx g) \\<in> set (snd (f n)) \\<longrightarrow>\n           (\\<exists>n'. (m, FEx g) \\<in> set (snd (f n')))\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m.\n                            (Suc m, FEx g)\n                            \\<in> set (snd (f (Suc n))) \\<longrightarrow>\n                            (\\<exists>n'. (m, FEx g) \\<in> set (snd (f n')))", "apply(force simp: init_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>n.\n           f n \\<in> deriv s \\<and>\n           fst (f n) = n \\<and>\n           snd (f (Suc n)) \\<in> set (subs (snd (f n))) \\<and>\n           infinite (deriv (snd (f n)));\n        \\<forall>m.\n           (Suc m, FEx g) \\<in> set (snd (f n)) \\<longrightarrow>\n           (\\<exists>n'. (m, FEx g) \\<in> set (snd (f n')))\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m.\n                            (Suc m, FEx g)\n                            \\<in> set (snd (f (Suc n))) \\<longrightarrow>\n                            (\\<exists>n'. (m, FEx g) \\<in> set (snd (f n')))", "apply(intro allI impI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n m.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>n.\n           f n \\<in> deriv s \\<and>\n           fst (f n) = n \\<and>\n           snd (f (Suc n)) \\<in> set (subs (snd (f n))) \\<and>\n           infinite (deriv (snd (f n)));\n        \\<forall>m.\n           (Suc m, FEx g) \\<in> set (snd (f n)) \\<longrightarrow>\n           (\\<exists>n'. (m, FEx g) \\<in> set (snd (f n')));\n        (Suc m, FEx g) \\<in> set (snd (f (Suc n)))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n'. (m, FEx g) \\<in> set (snd (f n'))", "apply(frule_tac x=\"Suc n\" in spec, elim conjE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n m.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>n.\n           f n \\<in> deriv s \\<and>\n           fst (f n) = n \\<and>\n           snd (f (Suc n)) \\<in> set (subs (snd (f n))) \\<and>\n           infinite (deriv (snd (f n)));\n        \\<forall>m.\n           (Suc m, FEx g) \\<in> set (snd (f n)) \\<longrightarrow>\n           (\\<exists>n'. (m, FEx g) \\<in> set (snd (f n')));\n        (Suc m, FEx g) \\<in> set (snd (f (Suc n))); f (Suc n) \\<in> deriv s;\n        fst (f (Suc n)) = Suc n;\n        snd (f (Suc (Suc n))) \\<in> set (subs (snd (f (Suc n))));\n        infinite (deriv (snd (f (Suc n))))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n'. (m, FEx g) \\<in> set (snd (f n'))", "apply(drule_tac x=\"n\" in spec, elim conjE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n m.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m.\n           (Suc m, FEx g) \\<in> set (snd (f n)) \\<longrightarrow>\n           (\\<exists>n'. (m, FEx g) \\<in> set (snd (f n')));\n        (Suc m, FEx g) \\<in> set (snd (f (Suc n))); f (Suc n) \\<in> deriv s;\n        fst (f (Suc n)) = Suc n;\n        snd (f (Suc (Suc n))) \\<in> set (subs (snd (f (Suc n))));\n        infinite (deriv (snd (f (Suc n)))); f n \\<in> deriv s;\n        fst (f n) = n; snd (f (Suc n)) \\<in> set (subs (snd (f n)));\n        infinite (deriv (snd (f n)))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n'. (m, FEx g) \\<in> set (snd (f n'))", "apply(thin_tac \"(snd (f (Suc (Suc n)))) : set (subs (snd (f (Suc n))))\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n m.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m.\n           (Suc m, FEx g) \\<in> set (snd (f n)) \\<longrightarrow>\n           (\\<exists>n'. (m, FEx g) \\<in> set (snd (f n')));\n        (Suc m, FEx g) \\<in> set (snd (f (Suc n))); f (Suc n) \\<in> deriv s;\n        fst (f (Suc n)) = Suc n; infinite (deriv (snd (f (Suc n))));\n        f n \\<in> deriv s; fst (f n) = n;\n        snd (f (Suc n)) \\<in> set (subs (snd (f n)));\n        infinite (deriv (snd (f n)))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n'. (m, FEx g) \\<in> set (snd (f n'))", "apply(case_tac \"f n\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n m a b.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m.\n           (Suc m, FEx g) \\<in> set (snd (f n)) \\<longrightarrow>\n           (\\<exists>n'. (m, FEx g) \\<in> set (snd (f n')));\n        (Suc m, FEx g) \\<in> set (snd (f (Suc n))); f (Suc n) \\<in> deriv s;\n        fst (f (Suc n)) = Suc n; infinite (deriv (snd (f (Suc n))));\n        f n \\<in> deriv s; fst (f n) = n;\n        snd (f (Suc n)) \\<in> set (subs (snd (f n)));\n        infinite (deriv (snd (f n))); f n = (a, b)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n'. (m, FEx g) \\<in> set (snd (f n'))", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n m a b.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m.\n           (Suc m, FEx g) \\<in> set b \\<longrightarrow>\n           (\\<exists>n'. (m, FEx g) \\<in> set (snd (f n')));\n        (Suc m, FEx g) \\<in> set (snd (f (Suc n))); f (Suc n) \\<in> deriv s;\n        fst (f (Suc n)) = Suc n; infinite (deriv (snd (f (Suc n))));\n        (n, b) \\<in> deriv s; a = n; snd (f (Suc n)) \\<in> set (subs b);\n        infinite (deriv b); f n = (n, b)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n'. (m, FEx g) \\<in> set (snd (f n'))", "apply(case_tac b)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n m a b.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m.\n           (Suc m, FEx g) \\<in> set b \\<longrightarrow>\n           (\\<exists>n'. (m, FEx g) \\<in> set (snd (f n')));\n        (Suc m, FEx g) \\<in> set (snd (f (Suc n))); f (Suc n) \\<in> deriv s;\n        fst (f (Suc n)) = Suc n; infinite (deriv (snd (f (Suc n))));\n        (n, b) \\<in> deriv s; a = n; snd (f (Suc n)) \\<in> set (subs b);\n        infinite (deriv b); f n = (n, b); b = []\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n'. (m, FEx g) \\<in> set (snd (f n'))\n 2. \\<And>n m a b aa list.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m.\n           (Suc m, FEx g) \\<in> set b \\<longrightarrow>\n           (\\<exists>n'. (m, FEx g) \\<in> set (snd (f n')));\n        (Suc m, FEx g) \\<in> set (snd (f (Suc n))); f (Suc n) \\<in> deriv s;\n        fst (f (Suc n)) = Suc n; infinite (deriv (snd (f (Suc n))));\n        (n, b) \\<in> deriv s; a = n; snd (f (Suc n)) \\<in> set (subs b);\n        infinite (deriv b); f n = (n, b); b = aa # list\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n'. (m, FEx g) \\<in> set (snd (f n'))", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n m a b aa list.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m.\n           (Suc m, FEx g) \\<in> set b \\<longrightarrow>\n           (\\<exists>n'. (m, FEx g) \\<in> set (snd (f n')));\n        (Suc m, FEx g) \\<in> set (snd (f (Suc n))); f (Suc n) \\<in> deriv s;\n        fst (f (Suc n)) = Suc n; infinite (deriv (snd (f (Suc n))));\n        (n, b) \\<in> deriv s; a = n; snd (f (Suc n)) \\<in> set (subs b);\n        infinite (deriv b); f n = (n, b); b = aa # list\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n'. (m, FEx g) \\<in> set (snd (f n'))", "apply(case_tac aa)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n m a b aa list ab ba.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m.\n           (Suc m, FEx g) \\<in> set b \\<longrightarrow>\n           (\\<exists>n'. (m, FEx g) \\<in> set (snd (f n')));\n        (Suc m, FEx g) \\<in> set (snd (f (Suc n))); f (Suc n) \\<in> deriv s;\n        fst (f (Suc n)) = Suc n; infinite (deriv (snd (f (Suc n))));\n        (n, b) \\<in> deriv s; a = n; snd (f (Suc n)) \\<in> set (subs b);\n        infinite (deriv b); f n = (n, b); b = aa # list;\n        aa = (ab, ba)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n'. (m, FEx g) \\<in> set (snd (f n'))", "apply(case_tac ba)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>n m a b aa list ab ba x11 x12.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m.\n           (Suc m, FEx g) \\<in> set b \\<longrightarrow>\n           (\\<exists>n'. (m, FEx g) \\<in> set (snd (f n')));\n        (Suc m, FEx g) \\<in> set (snd (f (Suc n))); f (Suc n) \\<in> deriv s;\n        fst (f (Suc n)) = Suc n; infinite (deriv (snd (f (Suc n))));\n        (n, b) \\<in> deriv s; a = n; snd (f (Suc n)) \\<in> set (subs b);\n        infinite (deriv b); f n = (n, b); b = aa # list; aa = (ab, ba);\n        ba = PAtom x11 x12\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n'. (m, FEx g) \\<in> set (snd (f n'))\n 2. \\<And>n m a b aa list ab ba x21 x22.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m.\n           (Suc m, FEx g) \\<in> set b \\<longrightarrow>\n           (\\<exists>n'. (m, FEx g) \\<in> set (snd (f n')));\n        (Suc m, FEx g) \\<in> set (snd (f (Suc n))); f (Suc n) \\<in> deriv s;\n        fst (f (Suc n)) = Suc n; infinite (deriv (snd (f (Suc n))));\n        (n, b) \\<in> deriv s; a = n; snd (f (Suc n)) \\<in> set (subs b);\n        infinite (deriv b); f n = (n, b); b = aa # list; aa = (ab, ba);\n        ba = NAtom x21 x22\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n'. (m, FEx g) \\<in> set (snd (f n'))\n 3. \\<And>n m a b aa list ab ba x31 x32.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m.\n           (Suc m, FEx g) \\<in> set b \\<longrightarrow>\n           (\\<exists>n'. (m, FEx g) \\<in> set (snd (f n')));\n        (Suc m, FEx g) \\<in> set (snd (f (Suc n))); f (Suc n) \\<in> deriv s;\n        fst (f (Suc n)) = Suc n; infinite (deriv (snd (f (Suc n))));\n        (n, b) \\<in> deriv s; a = n; snd (f (Suc n)) \\<in> set (subs b);\n        infinite (deriv b); f n = (n, b); b = aa # list; aa = (ab, ba);\n        ba = FConj x31 x32\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n'. (m, FEx g) \\<in> set (snd (f n'))\n 4. \\<And>n m a b aa list ab ba x41 x42.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m.\n           (Suc m, FEx g) \\<in> set b \\<longrightarrow>\n           (\\<exists>n'. (m, FEx g) \\<in> set (snd (f n')));\n        (Suc m, FEx g) \\<in> set (snd (f (Suc n))); f (Suc n) \\<in> deriv s;\n        fst (f (Suc n)) = Suc n; infinite (deriv (snd (f (Suc n))));\n        (n, b) \\<in> deriv s; a = n; snd (f (Suc n)) \\<in> set (subs b);\n        infinite (deriv b); f n = (n, b); b = aa # list; aa = (ab, ba);\n        ba = FDisj x41 x42\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n'. (m, FEx g) \\<in> set (snd (f n'))\n 5. \\<And>n m a b aa list ab ba x5.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m.\n           (Suc m, FEx g) \\<in> set b \\<longrightarrow>\n           (\\<exists>n'. (m, FEx g) \\<in> set (snd (f n')));\n        (Suc m, FEx g) \\<in> set (snd (f (Suc n))); f (Suc n) \\<in> deriv s;\n        fst (f (Suc n)) = Suc n; infinite (deriv (snd (f (Suc n))));\n        (n, b) \\<in> deriv s; a = n; snd (f (Suc n)) \\<in> set (subs b);\n        infinite (deriv b); f n = (n, b); b = aa # list; aa = (ab, ba);\n        ba = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n'. (m, FEx g) \\<in> set (snd (f n'))\n 6. \\<And>n m a b aa list ab ba x6.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m.\n           (Suc m, FEx g) \\<in> set b \\<longrightarrow>\n           (\\<exists>n'. (m, FEx g) \\<in> set (snd (f n')));\n        (Suc m, FEx g) \\<in> set (snd (f (Suc n))); f (Suc n) \\<in> deriv s;\n        fst (f (Suc n)) = Suc n; infinite (deriv (snd (f (Suc n))));\n        (n, b) \\<in> deriv s; a = n; snd (f (Suc n)) \\<in> set (subs b);\n        infinite (deriv b); f n = (n, b); b = aa # list; aa = (ab, ba);\n        ba = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n'. (m, FEx g) \\<in> set (snd (f n'))", "apply(simp add: Let_def split: if_splits)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>n m a b aa list ab ba x21 x22.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m.\n           (Suc m, FEx g) \\<in> set b \\<longrightarrow>\n           (\\<exists>n'. (m, FEx g) \\<in> set (snd (f n')));\n        (Suc m, FEx g) \\<in> set (snd (f (Suc n))); f (Suc n) \\<in> deriv s;\n        fst (f (Suc n)) = Suc n; infinite (deriv (snd (f (Suc n))));\n        (n, b) \\<in> deriv s; a = n; snd (f (Suc n)) \\<in> set (subs b);\n        infinite (deriv b); f n = (n, b); b = aa # list; aa = (ab, ba);\n        ba = NAtom x21 x22\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n'. (m, FEx g) \\<in> set (snd (f n'))\n 2. \\<And>n m a b aa list ab ba x31 x32.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m.\n           (Suc m, FEx g) \\<in> set b \\<longrightarrow>\n           (\\<exists>n'. (m, FEx g) \\<in> set (snd (f n')));\n        (Suc m, FEx g) \\<in> set (snd (f (Suc n))); f (Suc n) \\<in> deriv s;\n        fst (f (Suc n)) = Suc n; infinite (deriv (snd (f (Suc n))));\n        (n, b) \\<in> deriv s; a = n; snd (f (Suc n)) \\<in> set (subs b);\n        infinite (deriv b); f n = (n, b); b = aa # list; aa = (ab, ba);\n        ba = FConj x31 x32\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n'. (m, FEx g) \\<in> set (snd (f n'))\n 3. \\<And>n m a b aa list ab ba x41 x42.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m.\n           (Suc m, FEx g) \\<in> set b \\<longrightarrow>\n           (\\<exists>n'. (m, FEx g) \\<in> set (snd (f n')));\n        (Suc m, FEx g) \\<in> set (snd (f (Suc n))); f (Suc n) \\<in> deriv s;\n        fst (f (Suc n)) = Suc n; infinite (deriv (snd (f (Suc n))));\n        (n, b) \\<in> deriv s; a = n; snd (f (Suc n)) \\<in> set (subs b);\n        infinite (deriv b); f n = (n, b); b = aa # list; aa = (ab, ba);\n        ba = FDisj x41 x42\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n'. (m, FEx g) \\<in> set (snd (f n'))\n 4. \\<And>n m a b aa list ab ba x5.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m.\n           (Suc m, FEx g) \\<in> set b \\<longrightarrow>\n           (\\<exists>n'. (m, FEx g) \\<in> set (snd (f n')));\n        (Suc m, FEx g) \\<in> set (snd (f (Suc n))); f (Suc n) \\<in> deriv s;\n        fst (f (Suc n)) = Suc n; infinite (deriv (snd (f (Suc n))));\n        (n, b) \\<in> deriv s; a = n; snd (f (Suc n)) \\<in> set (subs b);\n        infinite (deriv b); f n = (n, b); b = aa # list; aa = (ab, ba);\n        ba = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n'. (m, FEx g) \\<in> set (snd (f n'))\n 5. \\<And>n m a b aa list ab ba x6.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m.\n           (Suc m, FEx g) \\<in> set b \\<longrightarrow>\n           (\\<exists>n'. (m, FEx g) \\<in> set (snd (f n')));\n        (Suc m, FEx g) \\<in> set (snd (f (Suc n))); f (Suc n) \\<in> deriv s;\n        fst (f (Suc n)) = Suc n; infinite (deriv (snd (f (Suc n))));\n        (n, b) \\<in> deriv s; a = n; snd (f (Suc n)) \\<in> set (subs b);\n        infinite (deriv b); f n = (n, b); b = aa # list; aa = (ab, ba);\n        ba = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n'. (m, FEx g) \\<in> set (snd (f n'))", "apply(simp add: Let_def split: if_splits)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>n m a b aa list ab ba x31 x32.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m.\n           (Suc m, FEx g) \\<in> set b \\<longrightarrow>\n           (\\<exists>n'. (m, FEx g) \\<in> set (snd (f n')));\n        (Suc m, FEx g) \\<in> set (snd (f (Suc n))); f (Suc n) \\<in> deriv s;\n        fst (f (Suc n)) = Suc n; infinite (deriv (snd (f (Suc n))));\n        (n, b) \\<in> deriv s; a = n; snd (f (Suc n)) \\<in> set (subs b);\n        infinite (deriv b); f n = (n, b); b = aa # list; aa = (ab, ba);\n        ba = FConj x31 x32\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n'. (m, FEx g) \\<in> set (snd (f n'))\n 2. \\<And>n m a b aa list ab ba x41 x42.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m.\n           (Suc m, FEx g) \\<in> set b \\<longrightarrow>\n           (\\<exists>n'. (m, FEx g) \\<in> set (snd (f n')));\n        (Suc m, FEx g) \\<in> set (snd (f (Suc n))); f (Suc n) \\<in> deriv s;\n        fst (f (Suc n)) = Suc n; infinite (deriv (snd (f (Suc n))));\n        (n, b) \\<in> deriv s; a = n; snd (f (Suc n)) \\<in> set (subs b);\n        infinite (deriv b); f n = (n, b); b = aa # list; aa = (ab, ba);\n        ba = FDisj x41 x42\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n'. (m, FEx g) \\<in> set (snd (f n'))\n 3. \\<And>n m a b aa list ab ba x5.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m.\n           (Suc m, FEx g) \\<in> set b \\<longrightarrow>\n           (\\<exists>n'. (m, FEx g) \\<in> set (snd (f n')));\n        (Suc m, FEx g) \\<in> set (snd (f (Suc n))); f (Suc n) \\<in> deriv s;\n        fst (f (Suc n)) = Suc n; infinite (deriv (snd (f (Suc n))));\n        (n, b) \\<in> deriv s; a = n; snd (f (Suc n)) \\<in> set (subs b);\n        infinite (deriv b); f n = (n, b); b = aa # list; aa = (ab, ba);\n        ba = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n'. (m, FEx g) \\<in> set (snd (f n'))\n 4. \\<And>n m a b aa list ab ba x6.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m.\n           (Suc m, FEx g) \\<in> set b \\<longrightarrow>\n           (\\<exists>n'. (m, FEx g) \\<in> set (snd (f n')));\n        (Suc m, FEx g) \\<in> set (snd (f (Suc n))); f (Suc n) \\<in> deriv s;\n        fst (f (Suc n)) = Suc n; infinite (deriv (snd (f (Suc n))));\n        (n, b) \\<in> deriv s; a = n; snd (f (Suc n)) \\<in> set (subs b);\n        infinite (deriv b); f n = (n, b); b = aa # list; aa = (ab, ba);\n        ba = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n'. (m, FEx g) \\<in> set (snd (f n'))", "apply(force simp add: Let_def)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>n m a b aa list ab ba x41 x42.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m.\n           (Suc m, FEx g) \\<in> set b \\<longrightarrow>\n           (\\<exists>n'. (m, FEx g) \\<in> set (snd (f n')));\n        (Suc m, FEx g) \\<in> set (snd (f (Suc n))); f (Suc n) \\<in> deriv s;\n        fst (f (Suc n)) = Suc n; infinite (deriv (snd (f (Suc n))));\n        (n, b) \\<in> deriv s; a = n; snd (f (Suc n)) \\<in> set (subs b);\n        infinite (deriv b); f n = (n, b); b = aa # list; aa = (ab, ba);\n        ba = FDisj x41 x42\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n'. (m, FEx g) \\<in> set (snd (f n'))\n 2. \\<And>n m a b aa list ab ba x5.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m.\n           (Suc m, FEx g) \\<in> set b \\<longrightarrow>\n           (\\<exists>n'. (m, FEx g) \\<in> set (snd (f n')));\n        (Suc m, FEx g) \\<in> set (snd (f (Suc n))); f (Suc n) \\<in> deriv s;\n        fst (f (Suc n)) = Suc n; infinite (deriv (snd (f (Suc n))));\n        (n, b) \\<in> deriv s; a = n; snd (f (Suc n)) \\<in> set (subs b);\n        infinite (deriv b); f n = (n, b); b = aa # list; aa = (ab, ba);\n        ba = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n'. (m, FEx g) \\<in> set (snd (f n'))\n 3. \\<And>n m a b aa list ab ba x6.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m.\n           (Suc m, FEx g) \\<in> set b \\<longrightarrow>\n           (\\<exists>n'. (m, FEx g) \\<in> set (snd (f n')));\n        (Suc m, FEx g) \\<in> set (snd (f (Suc n))); f (Suc n) \\<in> deriv s;\n        fst (f (Suc n)) = Suc n; infinite (deriv (snd (f (Suc n))));\n        (n, b) \\<in> deriv s; a = n; snd (f (Suc n)) \\<in> set (subs b);\n        infinite (deriv b); f n = (n, b); b = aa # list; aa = (ab, ba);\n        ba = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n'. (m, FEx g) \\<in> set (snd (f n'))", "apply(force simp add: Let_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n m a b aa list ab ba x5.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m.\n           (Suc m, FEx g) \\<in> set b \\<longrightarrow>\n           (\\<exists>n'. (m, FEx g) \\<in> set (snd (f n')));\n        (Suc m, FEx g) \\<in> set (snd (f (Suc n))); f (Suc n) \\<in> deriv s;\n        fst (f (Suc n)) = Suc n; infinite (deriv (snd (f (Suc n))));\n        (n, b) \\<in> deriv s; a = n; snd (f (Suc n)) \\<in> set (subs b);\n        infinite (deriv b); f n = (n, b); b = aa # list; aa = (ab, ba);\n        ba = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n'. (m, FEx g) \\<in> set (snd (f n'))\n 2. \\<And>n m a b aa list ab ba x6.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m.\n           (Suc m, FEx g) \\<in> set b \\<longrightarrow>\n           (\\<exists>n'. (m, FEx g) \\<in> set (snd (f n')));\n        (Suc m, FEx g) \\<in> set (snd (f (Suc n))); f (Suc n) \\<in> deriv s;\n        fst (f (Suc n)) = Suc n; infinite (deriv (snd (f (Suc n))));\n        (n, b) \\<in> deriv s; a = n; snd (f (Suc n)) \\<in> set (subs b);\n        infinite (deriv b); f n = (n, b); b = aa # list; aa = (ab, ba);\n        ba = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n'. (m, FEx g) \\<in> set (snd (f n'))", "apply(force simp add: Let_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n m a b aa list ab ba x6.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m.\n           (Suc m, FEx g) \\<in> set b \\<longrightarrow>\n           (\\<exists>n'. (m, FEx g) \\<in> set (snd (f n')));\n        (Suc m, FEx g) \\<in> set (snd (f (Suc n))); f (Suc n) \\<in> deriv s;\n        fst (f (Suc n)) = Suc n; infinite (deriv (snd (f (Suc n))));\n        (n, b) \\<in> deriv s; a = n; snd (f (Suc n)) \\<in> set (subs b);\n        infinite (deriv b); f n = (n, b); b = aa # list; aa = (ab, ba);\n        ba = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n'. (m, FEx g) \\<in> set (snd (f n'))", "apply(rename_tac form)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n m a b aa list ab ba form.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m.\n           (Suc m, FEx g) \\<in> set b \\<longrightarrow>\n           (\\<exists>n'. (m, FEx g) \\<in> set (snd (f n')));\n        (Suc m, FEx g) \\<in> set (snd (f (Suc n))); f (Suc n) \\<in> deriv s;\n        fst (f (Suc n)) = Suc n; infinite (deriv (snd (f (Suc n))));\n        (n, b) \\<in> deriv s; a = n; snd (f (Suc n)) \\<in> set (subs b);\n        infinite (deriv b); f n = (n, b); b = aa # list; aa = (ab, ba);\n        ba = FEx form\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n'. (m, FEx g) \\<in> set (snd (f n'))", "apply(case_tac \"(ab, FEx form) = (m, FEx g)\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n m a b aa list ab ba form.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m.\n           (Suc m, FEx g) \\<in> set b \\<longrightarrow>\n           (\\<exists>n'. (m, FEx g) \\<in> set (snd (f n')));\n        (Suc m, FEx g) \\<in> set (snd (f (Suc n))); f (Suc n) \\<in> deriv s;\n        fst (f (Suc n)) = Suc n; infinite (deriv (snd (f (Suc n))));\n        (n, b) \\<in> deriv s; a = n; snd (f (Suc n)) \\<in> set (subs b);\n        infinite (deriv b); f n = (n, b); b = aa # list; aa = (ab, ba);\n        ba = FEx form; (ab, FEx form) = (m, FEx g)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n'. (m, FEx g) \\<in> set (snd (f n'))\n 2. \\<And>n m a b aa list ab ba form.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m.\n           (Suc m, FEx g) \\<in> set b \\<longrightarrow>\n           (\\<exists>n'. (m, FEx g) \\<in> set (snd (f n')));\n        (Suc m, FEx g) \\<in> set (snd (f (Suc n))); f (Suc n) \\<in> deriv s;\n        fst (f (Suc n)) = Suc n; infinite (deriv (snd (f (Suc n))));\n        (n, b) \\<in> deriv s; a = n; snd (f (Suc n)) \\<in> set (subs b);\n        infinite (deriv b); f n = (n, b); b = aa # list; aa = (ab, ba);\n        ba = FEx form; (ab, FEx form) \\<noteq> (m, FEx g)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n'. (m, FEx g) \\<in> set (snd (f n'))", "apply(rule_tac x=n in exI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n m a b aa list ab ba form.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m.\n           (Suc m, FEx g) \\<in> set b \\<longrightarrow>\n           (\\<exists>n'. (m, FEx g) \\<in> set (snd (f n')));\n        (Suc m, FEx g) \\<in> set (snd (f (Suc n))); f (Suc n) \\<in> deriv s;\n        fst (f (Suc n)) = Suc n; infinite (deriv (snd (f (Suc n))));\n        (n, b) \\<in> deriv s; a = n; snd (f (Suc n)) \\<in> set (subs b);\n        infinite (deriv b); f n = (n, b); b = aa # list; aa = (ab, ba);\n        ba = FEx form; (ab, FEx form) = (m, FEx g)\\<rbrakk>\n       \\<Longrightarrow> (m, FEx g) \\<in> set (snd (f n))\n 2. \\<And>n m a b aa list ab ba form.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m.\n           (Suc m, FEx g) \\<in> set b \\<longrightarrow>\n           (\\<exists>n'. (m, FEx g) \\<in> set (snd (f n')));\n        (Suc m, FEx g) \\<in> set (snd (f (Suc n))); f (Suc n) \\<in> deriv s;\n        fst (f (Suc n)) = Suc n; infinite (deriv (snd (f (Suc n))));\n        (n, b) \\<in> deriv s; a = n; snd (f (Suc n)) \\<in> set (subs b);\n        infinite (deriv b); f n = (n, b); b = aa # list; aa = (ab, ba);\n        ba = FEx form; (ab, FEx form) \\<noteq> (m, FEx g)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n'. (m, FEx g) \\<in> set (snd (f n'))", "apply(force)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n m a b aa list ab ba form.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m.\n           (Suc m, FEx g) \\<in> set b \\<longrightarrow>\n           (\\<exists>n'. (m, FEx g) \\<in> set (snd (f n')));\n        (Suc m, FEx g) \\<in> set (snd (f (Suc n))); f (Suc n) \\<in> deriv s;\n        fst (f (Suc n)) = Suc n; infinite (deriv (snd (f (Suc n))));\n        (n, b) \\<in> deriv s; a = n; snd (f (Suc n)) \\<in> set (subs b);\n        infinite (deriv b); f n = (n, b); b = aa # list; aa = (ab, ba);\n        ba = FEx form; (ab, FEx form) \\<noteq> (m, FEx g)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n'. (m, FEx g) \\<in> set (snd (f n'))", "apply(force simp add: Let_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in loc1) FEx0: \"infinite (deriv s) ==> init s ==> \\<forall>n. contains f n (m,FEx g) --> (\\<exists>n'. contains f n' (0, FEx g))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>infinite (deriv s); init s\\<rbrakk>\n    \\<Longrightarrow> \\<forall>n.\n                         contains f n (m, FEx g) \\<longrightarrow>\n                         (\\<exists>n'. contains f n' (0, FEx g))", "apply(simp add: contains_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>infinite (deriv s); init s\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>n.\n                          (m, FEx g)\n                          \\<in> set (snd (f n))) \\<longrightarrow>\n                      (\\<exists>n'. (0, FEx g) \\<in> set (snd (f n')))", "apply(induct_tac m)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>infinite (deriv s); init s\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>n.\n                          (0, FEx g)\n                          \\<in> set (snd (f n))) \\<longrightarrow>\n                      (\\<exists>n'. (0, FEx g) \\<in> set (snd (f n')))\n 2. \\<And>n.\n       \\<lbrakk>infinite (deriv s); init s;\n        (\\<exists>na. (n, FEx g) \\<in> set (snd (f na))) \\<longrightarrow>\n        (\\<exists>n'. (0, FEx g) \\<in> set (snd (f n')))\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>na.\n                             (Suc n, FEx g)\n                             \\<in> set (snd (f na))) \\<longrightarrow>\n                         (\\<exists>n'. (0, FEx g) \\<in> set (snd (f n')))", "apply(force)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>infinite (deriv s); init s;\n        (\\<exists>na. (n, FEx g) \\<in> set (snd (f na))) \\<longrightarrow>\n        (\\<exists>n'. (0, FEx g) \\<in> set (snd (f n')))\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>na.\n                             (Suc n, FEx g)\n                             \\<in> set (snd (f na))) \\<longrightarrow>\n                         (\\<exists>n'. (0, FEx g) \\<in> set (snd (f n')))", "apply(intro allI impI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>infinite (deriv s); init s;\n        (\\<exists>na. (n, FEx g) \\<in> set (snd (f na))) \\<longrightarrow>\n        (\\<exists>n'. (0, FEx g) \\<in> set (snd (f n')));\n        \\<exists>na. (Suc n, FEx g) \\<in> set (snd (f na))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n'. (0, FEx g) \\<in> set (snd (f n'))", "apply(erule exE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n na.\n       \\<lbrakk>infinite (deriv s); init s;\n        (\\<exists>na. (n, FEx g) \\<in> set (snd (f na))) \\<longrightarrow>\n        (\\<exists>n'. (0, FEx g) \\<in> set (snd (f n')));\n        (Suc n, FEx g) \\<in> set (snd (f na))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n'. (0, FEx g) \\<in> set (snd (f n'))", "apply(drule_tac FEx_downward[rule_format])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>n na.\n       \\<lbrakk>init s;\n        (\\<exists>na. (n, FEx g) \\<in> set (snd (f na))) \\<longrightarrow>\n        (\\<exists>n'. (0, FEx g) \\<in> set (snd (f n')));\n        (Suc n, FEx g) \\<in> set (snd (f na))\\<rbrakk>\n       \\<Longrightarrow> init s\n 2. \\<And>n na.\n       \\<lbrakk>init s;\n        (\\<exists>na. (n, FEx g) \\<in> set (snd (f na))) \\<longrightarrow>\n        (\\<exists>n'. (0, FEx g) \\<in> set (snd (f n')));\n        (Suc n, FEx g) \\<in> set (snd (f na))\\<rbrakk>\n       \\<Longrightarrow> (Suc (?m12 n na), FEx (?g12 n na))\n                         \\<in> set (snd (f (?n12 n na)))\n 3. \\<And>n na.\n       \\<lbrakk>init s;\n        (\\<exists>na. (n, FEx g) \\<in> set (snd (f na))) \\<longrightarrow>\n        (\\<exists>n'. (0, FEx g) \\<in> set (snd (f n')));\n        (Suc n, FEx g) \\<in> set (snd (f na));\n        \\<exists>n'.\n           (?m12 n na, FEx (?g12 n na)) \\<in> set (snd (f n'))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n'. (0, FEx g) \\<in> set (snd (f n'))", "apply(assumption)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n na.\n       \\<lbrakk>init s;\n        (\\<exists>na. (n, FEx g) \\<in> set (snd (f na))) \\<longrightarrow>\n        (\\<exists>n'. (0, FEx g) \\<in> set (snd (f n')));\n        (Suc n, FEx g) \\<in> set (snd (f na))\\<rbrakk>\n       \\<Longrightarrow> (Suc (?m12 n na), FEx (?g12 n na))\n                         \\<in> set (snd (f (?n12 n na)))\n 2. \\<And>n na.\n       \\<lbrakk>init s;\n        (\\<exists>na. (n, FEx g) \\<in> set (snd (f na))) \\<longrightarrow>\n        (\\<exists>n'. (0, FEx g) \\<in> set (snd (f n')));\n        (Suc n, FEx g) \\<in> set (snd (f na));\n        \\<exists>n'.\n           (?m12 n na, FEx (?g12 n na)) \\<in> set (snd (f n'))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n'. (0, FEx g) \\<in> set (snd (f n'))", "apply(force)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n na.\n       \\<lbrakk>init s;\n        (\\<exists>na. (n, FEx g) \\<in> set (snd (f na))) \\<longrightarrow>\n        (\\<exists>n'. (0, FEx g) \\<in> set (snd (f n')));\n        (Suc n, FEx g) \\<in> set (snd (f na));\n        \\<exists>n'. (n, FEx g) \\<in> set (snd (f n'))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n'. (0, FEx g) \\<in> set (snd (f n'))", "apply(elim exE conjE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n na n'.\n       \\<lbrakk>init s;\n        (\\<exists>na. (n, FEx g) \\<in> set (snd (f na))) \\<longrightarrow>\n        (\\<exists>n'. (0, FEx g) \\<in> set (snd (f n')));\n        (Suc n, FEx g) \\<in> set (snd (f na));\n        (n, FEx g) \\<in> set (snd (f n'))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n'. (0, FEx g) \\<in> set (snd (f n'))", "apply(force)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in loc1) FEx_upward': \"infinite (deriv s) ==> init s ==> \\<forall>n. contains f n (0, FEx g) --> (\\<exists>n'. contains f n' (m, FEx g))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>infinite (deriv s); init s\\<rbrakk>\n    \\<Longrightarrow> \\<forall>n.\n                         contains f n (0, FEx g) \\<longrightarrow>\n                         (\\<exists>n'. contains f n' (m, FEx g))", "apply(intro allI impI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>infinite (deriv s); init s; contains f n (0, FEx g)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n'. contains f n' (m, FEx g)", "apply(induct_tac m)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>infinite (deriv s); init s; contains f n (0, FEx g)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n'. contains f n' (0, FEx g)\n 2. \\<And>n na.\n       \\<lbrakk>infinite (deriv s); init s; contains f n (0, FEx g);\n        \\<exists>n'. contains f n' (na, FEx g)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n'. contains f n' (Suc na, FEx g)", "apply(force)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n na.\n       \\<lbrakk>infinite (deriv s); init s; contains f n (0, FEx g);\n        \\<exists>n'. contains f n' (na, FEx g)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n'. contains f n' (Suc na, FEx g)", "apply(erule exE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n na n'.\n       \\<lbrakk>infinite (deriv s); init s; contains f n (0, FEx g);\n        contains f n' (na, FEx g)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n'. contains f n' (Suc na, FEx g)", "apply(frule_tac n=n' in contains_considers)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n na n'.\n       \\<lbrakk>infinite (deriv s); init s; contains f n (0, FEx g);\n        contains f n' (na, FEx g)\\<rbrakk>\n       \\<Longrightarrow> contains f n' (?y8 n na n')\n 2. \\<And>n na n'.\n       \\<lbrakk>infinite (deriv s); init s; contains f n (0, FEx g);\n        contains f n' (na, FEx g);\n        \\<exists>m. considers f (n' + m) (?y8 n na n')\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n'. contains f n' (Suc na, FEx g)", "apply(assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n na n'.\n       \\<lbrakk>infinite (deriv s); init s; contains f n (0, FEx g);\n        contains f n' (na, FEx g);\n        \\<exists>m. considers f (n' + m) (na, FEx g)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n'. contains f n' (Suc na, FEx g)", "apply(erule exE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n na n' m.\n       \\<lbrakk>infinite (deriv s); init s; contains f n (0, FEx g);\n        contains f n' (na, FEx g); considers f (n' + m) (na, FEx g)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n'. contains f n' (Suc na, FEx g)", "apply(rule_tac x=\"Suc(n'+m)\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n na n' m.\n       \\<lbrakk>infinite (deriv s); init s; contains f n (0, FEx g);\n        contains f n' (na, FEx g); considers f (n' + m) (na, FEx g)\\<rbrakk>\n       \\<Longrightarrow> contains f (Suc (n' + m)) (Suc na, FEx g)", "apply(frule_tac is_path_f)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n na n' m.\n       \\<lbrakk>infinite (deriv s); init s; contains f n (0, FEx g);\n        contains f n' (na, FEx g); considers f (n' + m) (na, FEx g);\n        \\<forall>n.\n           f n \\<in> deriv s \\<and>\n           fst (f n) = n \\<and>\n           snd (f (Suc n)) \\<in> set (subs (snd (f n))) \\<and>\n           infinite (deriv (snd (f n)))\\<rbrakk>\n       \\<Longrightarrow> contains f (Suc (n' + m)) (Suc na, FEx g)", "apply(simp add: considers_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n na n' m.\n       \\<lbrakk>infinite (deriv s); init s; contains f n (0, FEx g);\n        contains f n' (na, FEx g);\n        case snd (f (n' + m)) of [] \\<Rightarrow> False\n        | x # xs \\<Rightarrow> x = (na, FEx g);\n        \\<forall>n.\n           f n \\<in> deriv s \\<and>\n           fst (f n) = n \\<and>\n           snd (f (Suc n)) \\<in> set (subs (snd (f n))) \\<and>\n           infinite (deriv (snd (f n)))\\<rbrakk>\n       \\<Longrightarrow> contains f (Suc (n' + m)) (Suc na, FEx g)", "apply(case_tac \"snd (f (n'+m))\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n na n' m.\n       \\<lbrakk>infinite (deriv s); init s; contains f n (0, FEx g);\n        contains f n' (na, FEx g);\n        case snd (f (n' + m)) of [] \\<Rightarrow> False\n        | x # xs \\<Rightarrow> x = (na, FEx g);\n        \\<forall>n.\n           f n \\<in> deriv s \\<and>\n           fst (f n) = n \\<and>\n           snd (f (Suc n)) \\<in> set (subs (snd (f n))) \\<and>\n           infinite (deriv (snd (f n)));\n        snd (f (n' + m)) = []\\<rbrakk>\n       \\<Longrightarrow> contains f (Suc (n' + m)) (Suc na, FEx g)\n 2. \\<And>n na n' m a list.\n       \\<lbrakk>infinite (deriv s); init s; contains f n (0, FEx g);\n        contains f n' (na, FEx g);\n        case snd (f (n' + m)) of [] \\<Rightarrow> False\n        | x # xs \\<Rightarrow> x = (na, FEx g);\n        \\<forall>n.\n           f n \\<in> deriv s \\<and>\n           fst (f n) = n \\<and>\n           snd (f (Suc n)) \\<in> set (subs (snd (f n))) \\<and>\n           infinite (deriv (snd (f n)));\n        snd (f (n' + m)) = a # list\\<rbrakk>\n       \\<Longrightarrow> contains f (Suc (n' + m)) (Suc na, FEx g)", "apply(force)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n na n' m a list.\n       \\<lbrakk>infinite (deriv s); init s; contains f n (0, FEx g);\n        contains f n' (na, FEx g);\n        case snd (f (n' + m)) of [] \\<Rightarrow> False\n        | x # xs \\<Rightarrow> x = (na, FEx g);\n        \\<forall>n.\n           f n \\<in> deriv s \\<and>\n           fst (f n) = n \\<and>\n           snd (f (Suc n)) \\<in> set (subs (snd (f n))) \\<and>\n           infinite (deriv (snd (f n)));\n        snd (f (n' + m)) = a # list\\<rbrakk>\n       \\<Longrightarrow> contains f (Suc (n' + m)) (Suc na, FEx g)", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n na n' m a list.\n       \\<lbrakk>infinite (deriv s); init s; contains f n (0, FEx g);\n        contains f n' (na, FEx g); a = (na, FEx g);\n        \\<forall>n.\n           f n \\<in> deriv s \\<and>\n           fst (f n) = n \\<and>\n           snd (f (Suc n)) \\<in> set (subs (snd (f n))) \\<and>\n           infinite (deriv (snd (f n)));\n        snd (f (n' + m)) = (na, FEx g) # list\\<rbrakk>\n       \\<Longrightarrow> contains f (Suc (n' + m)) (Suc na, FEx g)", "apply(drule_tac x=\"n'+m\" in spec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n na n' m a list.\n       \\<lbrakk>infinite (deriv s); init s; contains f n (0, FEx g);\n        contains f n' (na, FEx g); a = (na, FEx g);\n        snd (f (n' + m)) = (na, FEx g) # list;\n        f (n' + m) \\<in> deriv s \\<and>\n        fst (f (n' + m)) = n' + m \\<and>\n        snd (f (Suc (n' + m))) \\<in> set (subs (snd (f (n' + m)))) \\<and>\n        infinite (deriv (snd (f (n' + m))))\\<rbrakk>\n       \\<Longrightarrow> contains f (Suc (n' + m)) (Suc na, FEx g)", "apply(force simp add: contains_def considers_def Let_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done\n  \\<comment> \\<open>FIXME contains and considers aren't buying us much\\<close>"], ["", "lemma (in loc1) FEx_upward: \"infinite (deriv s) ==> init s ==> contains f n (m, FEx g) ==> (\\<forall>m'. \\<exists>n'. contains f n' (0, finst g m'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>infinite (deriv s); init s; contains f n (m, FEx g)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>m'.\n                         \\<exists>n'. contains f n' (0, finst g m')", "apply(intro allI impI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>m'.\n       \\<lbrakk>infinite (deriv s); init s; contains f n (m, FEx g)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n'. contains f n' (0, finst g m')", "apply(subgoal_tac \"\\<exists>n'. contains f n' (m', FEx g)\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>m'.\n       \\<lbrakk>infinite (deriv s); init s; contains f n (m, FEx g);\n        \\<exists>n'. contains f n' (m', FEx g)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n'. contains f n' (0, finst g m')\n 2. \\<And>m'.\n       \\<lbrakk>infinite (deriv s); init s; contains f n (m, FEx g)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n'. contains f n' (m', FEx g)", "defer"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>m'.\n       \\<lbrakk>infinite (deriv s); init s; contains f n (m, FEx g)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n'. contains f n' (m', FEx g)\n 2. \\<And>m'.\n       \\<lbrakk>infinite (deriv s); init s; contains f n (m, FEx g);\n        \\<exists>n'. contains f n' (m', FEx g)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n'. contains f n' (0, finst g m')", "apply(frule_tac m = m and g = g in FEx0)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>m'.\n       \\<lbrakk>infinite (deriv s); init s; contains f n (m, FEx g)\\<rbrakk>\n       \\<Longrightarrow> init s\n 2. \\<And>m'.\n       \\<lbrakk>infinite (deriv s); init s; contains f n (m, FEx g);\n        \\<forall>n.\n           contains f n (m, FEx g) \\<longrightarrow>\n           (\\<exists>n'. contains f n' (0, FEx g))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n'. contains f n' (m', FEx g)\n 3. \\<And>m'.\n       \\<lbrakk>infinite (deriv s); init s; contains f n (m, FEx g);\n        \\<exists>n'. contains f n' (m', FEx g)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n'. contains f n' (0, finst g m')", "apply(assumption)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>m'.\n       \\<lbrakk>infinite (deriv s); init s; contains f n (m, FEx g);\n        \\<forall>n.\n           contains f n (m, FEx g) \\<longrightarrow>\n           (\\<exists>n'. contains f n' (0, FEx g))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n'. contains f n' (m', FEx g)\n 2. \\<And>m'.\n       \\<lbrakk>infinite (deriv s); init s; contains f n (m, FEx g);\n        \\<exists>n'. contains f n' (m', FEx g)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n'. contains f n' (0, finst g m')", "apply(drule_tac x=n in spec)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>m'.\n       \\<lbrakk>infinite (deriv s); init s; contains f n (m, FEx g);\n        contains f n (m, FEx g) \\<longrightarrow>\n        (\\<exists>n'. contains f n' (0, FEx g))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n'. contains f n' (m', FEx g)\n 2. \\<And>m'.\n       \\<lbrakk>infinite (deriv s); init s; contains f n (m, FEx g);\n        \\<exists>n'. contains f n' (m', FEx g)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n'. contains f n' (0, finst g m')", "apply(simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>m'.\n       \\<lbrakk>infinite (deriv s); init s; contains f n (m, FEx g);\n        \\<exists>n'. contains f n' (0, FEx g)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n'. contains f n' (m', FEx g)\n 2. \\<And>m'.\n       \\<lbrakk>infinite (deriv s); init s; contains f n (m, FEx g);\n        \\<exists>n'. contains f n' (m', FEx g)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n'. contains f n' (0, finst g m')", "apply(elim exE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>m' n'.\n       \\<lbrakk>infinite (deriv s); init s; contains f n (m, FEx g);\n        contains f n' (0, FEx g)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n'. contains f n' (m', FEx g)\n 2. \\<And>m'.\n       \\<lbrakk>infinite (deriv s); init s; contains f n (m, FEx g);\n        \\<exists>n'. contains f n' (m', FEx g)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n'. contains f n' (0, finst g m')", "apply(frule_tac g=g and m=m' in FEx_upward')"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>m' n'.\n       \\<lbrakk>infinite (deriv s); init s; contains f n (m, FEx g);\n        contains f n' (0, FEx g)\\<rbrakk>\n       \\<Longrightarrow> init s\n 2. \\<And>m' n'.\n       \\<lbrakk>infinite (deriv s); init s; contains f n (m, FEx g);\n        contains f n' (0, FEx g);\n        \\<forall>n.\n           contains f n (0, FEx g) \\<longrightarrow>\n           (\\<exists>n'. contains f n' (m', FEx g))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n'. contains f n' (m', FEx g)\n 3. \\<And>m'.\n       \\<lbrakk>infinite (deriv s); init s; contains f n (m, FEx g);\n        \\<exists>n'. contains f n' (m', FEx g)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n'. contains f n' (0, finst g m')", "apply(assumption)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>m' n'.\n       \\<lbrakk>infinite (deriv s); init s; contains f n (m, FEx g);\n        contains f n' (0, FEx g);\n        \\<forall>n.\n           contains f n (0, FEx g) \\<longrightarrow>\n           (\\<exists>n'. contains f n' (m', FEx g))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n'. contains f n' (m', FEx g)\n 2. \\<And>m'.\n       \\<lbrakk>infinite (deriv s); init s; contains f n (m, FEx g);\n        \\<exists>n'. contains f n' (m', FEx g)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n'. contains f n' (0, finst g m')", "apply (blast dest: contains_propagates_fex intro: elim:)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsection \"Models 2\""], ["", "axiomatization ntou :: \"nat => U\"\nwhere ntou: \"inj ntou\"  \\<comment> \\<open>assume universe set is infinite\\<close>"], ["", "definition uton :: \"U => nat\" where \"uton = inv ntou\""], ["", "lemma uton_ntou: \"uton (ntou x) = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. uton (ntou x) = x", "apply(simp add: uton_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. inv ntou (ntou x) = x", "apply(simp add: ntou inv_f_f)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma map_uton_ntou[simp]: \"map uton (map ntou xs) = xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map uton (map ntou xs) = xs", "apply(induct xs, auto simp: uton_ntou)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma ntou_uton: \"x \\<in> range ntou ==> ntou (uton x) = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> range ntou \\<Longrightarrow> ntou (uton x) = x", "apply(simp add: uton_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> range ntou \\<Longrightarrow> ntou (inv ntou x) = x", "apply(simp add: f_inv_into_f)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsection \"Falsifying Model From Failing Path\""], ["", "definition model :: \"nseq => model\" where\n  \"model s = (range ntou, % p ms. (let f = failing_path (deriv s) in\n    (\\<forall>n m. ~ contains f n (m,PAtom p (map uton ms)))))\""], ["", "locale loc2 = loc1 +\n  fixes mo\n  assumes mo: \"mo = model s\""], ["", "lemma is_env_model_ntou: \"is_env (model s) ntou\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_env (model s) ntou", "apply(simp add: is_env_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x. ntou x \\<in> fst (model s)", "apply(simp add: model_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in loc1) [simp]: \"infinite (deriv s) ==> init s ==> (contains f n (m,A)) ==> ~ is_FEx A ==> m = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>infinite (deriv s); init s; contains f n (m, A);\n     \\<not> is_FEx A\\<rbrakk>\n    \\<Longrightarrow> m = 0", "apply(frule_tac n=n in index0)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>infinite (deriv s); init s; contains f n (m, A);\n     \\<not> is_FEx A;\n     \\<forall>u m A.\n        (n, u) \\<in> deriv s \\<longrightarrow>\n        (m, A) \\<in> set u \\<longrightarrow>\n        \\<not> is_FEx A \\<longrightarrow> m = 0\\<rbrakk>\n    \\<Longrightarrow> m = 0", "apply(frule_tac is_path_f)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>infinite (deriv s); init s; contains f n (m, A);\n     \\<not> is_FEx A;\n     \\<forall>u m A.\n        (n, u) \\<in> deriv s \\<longrightarrow>\n        (m, A) \\<in> set u \\<longrightarrow>\n        \\<not> is_FEx A \\<longrightarrow> m = 0;\n     \\<forall>n.\n        f n \\<in> deriv s \\<and>\n        fst (f n) = n \\<and>\n        snd (f (Suc n)) \\<in> set (subs (snd (f n))) \\<and>\n        infinite (deriv (snd (f n)))\\<rbrakk>\n    \\<Longrightarrow> m = 0", "apply(drule_tac x=n in spec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>infinite (deriv s); init s; contains f n (m, A);\n     \\<not> is_FEx A;\n     \\<forall>u m A.\n        (n, u) \\<in> deriv s \\<longrightarrow>\n        (m, A) \\<in> set u \\<longrightarrow>\n        \\<not> is_FEx A \\<longrightarrow> m = 0;\n     f n \\<in> deriv s \\<and>\n     fst (f n) = n \\<and>\n     snd (f (Suc n)) \\<in> set (subs (snd (f n))) \\<and>\n     infinite (deriv (snd (f n)))\\<rbrakk>\n    \\<Longrightarrow> m = 0", "apply(case_tac \"f n\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>infinite (deriv s); init s; contains f n (m, A);\n        \\<not> is_FEx A;\n        \\<forall>u m A.\n           (n, u) \\<in> deriv s \\<longrightarrow>\n           (m, A) \\<in> set u \\<longrightarrow>\n           \\<not> is_FEx A \\<longrightarrow> m = 0;\n        f n \\<in> deriv s \\<and>\n        fst (f n) = n \\<and>\n        snd (f (Suc n)) \\<in> set (subs (snd (f n))) \\<and>\n        infinite (deriv (snd (f n)));\n        f n = (a, b)\\<rbrakk>\n       \\<Longrightarrow> m = 0", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>infinite (deriv s); init s; contains f n (m, A);\n        \\<not> is_FEx A;\n        \\<forall>u.\n           (n, u) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>m A.\n               (m, A) \\<in> set u \\<longrightarrow>\n               \\<not> is_FEx A \\<longrightarrow> m = 0);\n        (n, b) \\<in> deriv s \\<and>\n        snd (f (Suc n)) \\<in> set (subs b) \\<and> infinite (deriv b);\n        f n = (n, b)\\<rbrakk>\n       \\<Longrightarrow> m = 0", "apply(simp add: contains_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>infinite (deriv s); init s; (m, A) \\<in> set b;\n        \\<not> is_FEx A;\n        \\<forall>u.\n           (n, u) \\<in> deriv s \\<longrightarrow>\n           (\\<forall>m A.\n               (m, A) \\<in> set u \\<longrightarrow>\n               \\<not> is_FEx A \\<longrightarrow> m = 0);\n        (n, b) \\<in> deriv s \\<and>\n        snd (f (Suc n)) \\<in> set (subs b) \\<and> infinite (deriv b);\n        f n = (n, b)\\<rbrakk>\n       \\<Longrightarrow> m = 0", "apply(force)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in loc2) model': \n  notes [simp] = FEval_subst\n  notes [simp del] = is_axiom.simps\n  shows \"infinite (deriv s) ==> init s ==> \\<forall>A. size A = h --> (\\<forall>m n. contains f n (m,A) --> ~ (FEval mo ntou A))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>infinite (deriv s); init s\\<rbrakk>\n    \\<Longrightarrow> \\<forall>A.\n                         size A = h \\<longrightarrow>\n                         (\\<forall>m n.\n                             contains f n (m, A) \\<longrightarrow>\n                             \\<not> FEval mo ntou A)", "supply [[simproc del: defined_all]]"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>infinite (deriv s); init s\\<rbrakk>\n    \\<Longrightarrow> \\<forall>A.\n                         size A = h \\<longrightarrow>\n                         (\\<forall>m n.\n                             contains f n (m, A) \\<longrightarrow>\n                             \\<not> FEval mo ntou A)", "apply(rule_tac nat_less_induct)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>A.\n                            size A = n \\<longrightarrow>\n                            (\\<forall>m n.\n                                contains f n (m, A) \\<longrightarrow>\n                                \\<not> FEval mo ntou A)", "apply(rule, rule)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n A.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A", "apply(case_tac A)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>n A x11 x12.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = PAtom x11 x12\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 2. \\<And>n A x21 x22.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = NAtom x21 x22\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 3. \\<And>n A x31 x32.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FConj x31 x32\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 4. \\<And>n A x41 x42.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FDisj x41 x42\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 5. \\<And>n A x5.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 6. \\<And>n A x6.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A", "apply(rule,rule,rule)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>n A x11 x12 m na.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = PAtom x11 x12; contains f na (m, A)\\<rbrakk>\n       \\<Longrightarrow> \\<not> FEval mo ntou A\n 2. \\<And>n A x21 x22.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = NAtom x21 x22\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 3. \\<And>n A x31 x32.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FConj x31 x32\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 4. \\<And>n A x41 x42.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FDisj x41 x42\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 5. \\<And>n A x5.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 6. \\<And>n A x6.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A", "apply(simp add: mo Let_def)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>n A x11 x12 m na.\n       \\<lbrakk>infinite (deriv s); init s; n = 0; A = PAtom x11 x12;\n        contains f na (m, PAtom x11 x12)\\<rbrakk>\n       \\<Longrightarrow> \\<not> snd (model s) x11 (map ntou x12)\n 2. \\<And>n A x21 x22.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = NAtom x21 x22\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 3. \\<And>n A x31 x32.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FConj x31 x32\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 4. \\<And>n A x41 x42.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FDisj x41 x42\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 5. \\<And>n A x5.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 6. \\<And>n A x6.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A", "apply(simp add: model_def Let_def del: map_map)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>n A x11 x12 m na.\n       \\<lbrakk>infinite (deriv s); init s; n = 0; A = PAtom x11 x12;\n        contains f na (m, PAtom x11 x12)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n m.\n                            contains (failing_path (deriv s)) n\n                             (m, PAtom x11 x12)\n 2. \\<And>n A x21 x22.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = NAtom x21 x22\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 3. \\<And>n A x31 x32.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FConj x31 x32\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 4. \\<And>n A x41 x42.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FDisj x41 x42\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 5. \\<And>n A x5.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 6. \\<And>n A x6.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A", "apply(simp only: f[symmetric])"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>n A x11 x12 m na.\n       \\<lbrakk>infinite (deriv s); init s; n = 0; A = PAtom x11 x12;\n        contains f na (m, PAtom x11 x12)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n m. contains f n (m, PAtom x11 x12)\n 2. \\<And>n A x21 x22.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = NAtom x21 x22\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 3. \\<And>n A x31 x32.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FConj x31 x32\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 4. \\<And>n A x41 x42.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FDisj x41 x42\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 5. \\<And>n A x5.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 6. \\<And>n A x6.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A", "apply(force)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>n A x21 x22.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = NAtom x21 x22\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 2. \\<And>n A x31 x32.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FConj x31 x32\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 3. \\<And>n A x41 x42.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FDisj x41 x42\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 4. \\<And>n A x5.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 5. \\<And>n A x6.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A", "apply(rule,rule,rule)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>n A x21 x22 m na.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = NAtom x21 x22; contains f na (m, A)\\<rbrakk>\n       \\<Longrightarrow> \\<not> FEval mo ntou A\n 2. \\<And>n A x31 x32.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FConj x31 x32\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 3. \\<And>n A x41 x42.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FDisj x41 x42\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 4. \\<And>n A x5.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 5. \\<And>n A x6.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A", "apply(simp add: mo Let_def)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>n A x21 x22 m na.\n       \\<lbrakk>infinite (deriv s); init s; n = 0; A = NAtom x21 x22;\n        contains f na (m, NAtom x21 x22)\\<rbrakk>\n       \\<Longrightarrow> snd (model s) x21 (map ntou x22)\n 2. \\<And>n A x31 x32.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FConj x31 x32\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 3. \\<And>n A x41 x42.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FDisj x41 x42\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 4. \\<And>n A x5.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 5. \\<And>n A x6.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A", "apply(simp add: model_def Let_def del: map_map)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>n A x21 x22 m na.\n       \\<lbrakk>infinite (deriv s); init s; n = 0; A = NAtom x21 x22;\n        contains f na (m, NAtom x21 x22)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n m.\n                            \\<not> contains (failing_path (deriv s)) n\n                                    (m, PAtom x21 x22)\n 2. \\<And>n A x31 x32.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FConj x31 x32\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 3. \\<And>n A x41 x42.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FDisj x41 x42\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 4. \\<And>n A x5.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 5. \\<And>n A x6.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A", "apply(simp only: f[symmetric])"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>n A x21 x22 m na.\n       \\<lbrakk>infinite (deriv s); init s; n = 0; A = NAtom x21 x22;\n        contains f na (m, NAtom x21 x22)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n m.\n                            \\<not> contains f n (m, PAtom x21 x22)\n 2. \\<And>n A x31 x32.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FConj x31 x32\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 3. \\<And>n A x41 x42.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FDisj x41 x42\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 4. \\<And>n A x5.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 5. \\<And>n A x6.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A", "apply(rule ccontr)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>n A x21 x22 m na.\n       \\<lbrakk>infinite (deriv s); init s; n = 0; A = NAtom x21 x22;\n        contains f na (m, NAtom x21 x22);\n        \\<not> (\\<forall>n m.\n                   \\<not> contains f n (m, PAtom x21 x22))\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>n A x31 x32.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FConj x31 x32\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 3. \\<And>n A x41 x42.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FDisj x41 x42\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 4. \\<And>n A x5.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 5. \\<And>n A x6.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A", "apply(simp del: map_map)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>n A x21 x22 m na.\n       \\<lbrakk>infinite (deriv s); init s; n = 0; A = NAtom x21 x22;\n        contains f na (m, NAtom x21 x22);\n        \\<exists>n m. contains f n (m, PAtom x21 x22)\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>n A x31 x32.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FConj x31 x32\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 3. \\<And>n A x41 x42.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FDisj x41 x42\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 4. \\<And>n A x5.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 5. \\<And>n A x6.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A", "apply(elim exE)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>n A x21 x22 m na nb ma.\n       \\<lbrakk>infinite (deriv s); init s; n = 0; A = NAtom x21 x22;\n        contains f na (m, NAtom x21 x22);\n        contains f nb (ma, PAtom x21 x22)\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>n A x31 x32.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FConj x31 x32\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 3. \\<And>n A x41 x42.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FDisj x41 x42\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 4. \\<And>n A x5.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 5. \\<And>n A x6.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A", "apply(subgoal_tac \"m = 0 & ma = 0\")"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>n A x21 x22 m na nb ma.\n       \\<lbrakk>infinite (deriv s); init s; n = 0; A = NAtom x21 x22;\n        contains f na (m, NAtom x21 x22); contains f nb (ma, PAtom x21 x22);\n        m = 0 \\<and> ma = 0\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>n A x21 x22 m na nb ma.\n       \\<lbrakk>infinite (deriv s); init s; n = 0; A = NAtom x21 x22;\n        contains f na (m, NAtom x21 x22);\n        contains f nb (ma, PAtom x21 x22)\\<rbrakk>\n       \\<Longrightarrow> m = 0 \\<and> ma = 0\n 3. \\<And>n A x31 x32.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FConj x31 x32\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 4. \\<And>n A x41 x42.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FDisj x41 x42\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 5. \\<And>n A x5.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 6. \\<And>n A x6.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A", "prefer 2"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>n A x21 x22 m na nb ma.\n       \\<lbrakk>infinite (deriv s); init s; n = 0; A = NAtom x21 x22;\n        contains f na (m, NAtom x21 x22);\n        contains f nb (ma, PAtom x21 x22)\\<rbrakk>\n       \\<Longrightarrow> m = 0 \\<and> ma = 0\n 2. \\<And>n A x21 x22 m na nb ma.\n       \\<lbrakk>infinite (deriv s); init s; n = 0; A = NAtom x21 x22;\n        contains f na (m, NAtom x21 x22); contains f nb (ma, PAtom x21 x22);\n        m = 0 \\<and> ma = 0\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>n A x31 x32.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FConj x31 x32\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 4. \\<And>n A x41 x42.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FDisj x41 x42\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 5. \\<And>n A x5.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 6. \\<And>n A x6.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A", "apply(simp del: map_map)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>n A x21 x22 m na nb ma.\n       \\<lbrakk>infinite (deriv s); init s; n = 0; A = NAtom x21 x22;\n        contains f na (m, NAtom x21 x22); contains f nb (ma, PAtom x21 x22);\n        m = 0 \\<and> ma = 0\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>n A x31 x32.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FConj x31 x32\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 3. \\<And>n A x41 x42.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FDisj x41 x42\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 4. \\<And>n A x5.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 5. \\<And>n A x6.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A", "apply(simp del: map_map)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>n A x21 x22 m na nb ma.\n       \\<lbrakk>infinite (deriv s); init s; n = 0; A = NAtom x21 x22;\n        contains f na (0, NAtom x21 x22); contains f nb (0, PAtom x21 x22);\n        m = 0 \\<and> ma = 0\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>n A x31 x32.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FConj x31 x32\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 3. \\<And>n A x41 x42.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FDisj x41 x42\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 4. \\<And>n A x5.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 5. \\<And>n A x6.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A", "apply(rename_tac nat list m na nb ma)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>n A nat list m na nb ma.\n       \\<lbrakk>infinite (deriv s); init s; n = 0; A = NAtom nat list;\n        contains f na (0, NAtom nat list);\n        contains f nb (0, PAtom nat list); m = 0 \\<and> ma = 0\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>n A x31 x32.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FConj x31 x32\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 3. \\<And>n A x41 x42.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FDisj x41 x42\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 4. \\<And>n A x5.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 5. \\<And>n A x6.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A", "apply(subgoal_tac \"? y. considers f (nb+na+y) (0, PAtom nat list)\")"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>n A nat list m na nb ma.\n       \\<lbrakk>infinite (deriv s); init s; n = 0; A = NAtom nat list;\n        contains f na (0, NAtom nat list);\n        contains f nb (0, PAtom nat list); m = 0 \\<and> ma = 0;\n        \\<exists>y. considers f (nb + na + y) (0, PAtom nat list)\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>n A nat list m na nb ma.\n       \\<lbrakk>infinite (deriv s); init s; n = 0; A = NAtom nat list;\n        contains f na (0, NAtom nat list);\n        contains f nb (0, PAtom nat list); m = 0 \\<and> ma = 0\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y.\n                            considers f (nb + na + y) (0, PAtom nat list)\n 3. \\<And>n A x31 x32.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FConj x31 x32\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 4. \\<And>n A x41 x42.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FDisj x41 x42\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 5. \\<And>n A x5.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 6. \\<And>n A x6.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A", "prefer 2"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>n A nat list m na nb ma.\n       \\<lbrakk>infinite (deriv s); init s; n = 0; A = NAtom nat list;\n        contains f na (0, NAtom nat list);\n        contains f nb (0, PAtom nat list); m = 0 \\<and> ma = 0\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y.\n                            considers f (nb + na + y) (0, PAtom nat list)\n 2. \\<And>n A nat list m na nb ma.\n       \\<lbrakk>infinite (deriv s); init s; n = 0; A = NAtom nat list;\n        contains f na (0, NAtom nat list);\n        contains f nb (0, PAtom nat list); m = 0 \\<and> ma = 0;\n        \\<exists>y. considers f (nb + na + y) (0, PAtom nat list)\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>n A x31 x32.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FConj x31 x32\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 4. \\<And>n A x41 x42.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FDisj x41 x42\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 5. \\<And>n A x5.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 6. \\<And>n A x6.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A", "apply(rule contains_considers)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>n A nat list m na nb ma.\n       \\<lbrakk>infinite (deriv s); init s; n = 0; A = NAtom nat list;\n        contains f na (0, NAtom nat list);\n        contains f nb (0, PAtom nat list); m = 0 \\<and> ma = 0\\<rbrakk>\n       \\<Longrightarrow> infinite (deriv s)\n 2. \\<And>n A nat list m na nb ma.\n       \\<lbrakk>infinite (deriv s); init s; n = 0; A = NAtom nat list;\n        contains f na (0, NAtom nat list);\n        contains f nb (0, PAtom nat list); m = 0 \\<and> ma = 0\\<rbrakk>\n       \\<Longrightarrow> contains f (nb + na) (0, PAtom nat list)\n 3. \\<And>n A nat list m na nb ma.\n       \\<lbrakk>infinite (deriv s); init s; n = 0; A = NAtom nat list;\n        contains f na (0, NAtom nat list);\n        contains f nb (0, PAtom nat list); m = 0 \\<and> ma = 0;\n        \\<exists>y. considers f (nb + na + y) (0, PAtom nat list)\\<rbrakk>\n       \\<Longrightarrow> False\n 4. \\<And>n A x31 x32.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FConj x31 x32\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 5. \\<And>n A x41 x42.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FDisj x41 x42\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 6. \\<And>n A x5.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 7. \\<And>n A x6.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A", "apply(assumption)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>n A nat list m na nb ma.\n       \\<lbrakk>infinite (deriv s); init s; n = 0; A = NAtom nat list;\n        contains f na (0, NAtom nat list);\n        contains f nb (0, PAtom nat list); m = 0 \\<and> ma = 0\\<rbrakk>\n       \\<Longrightarrow> contains f (nb + na) (0, PAtom nat list)\n 2. \\<And>n A nat list m na nb ma.\n       \\<lbrakk>infinite (deriv s); init s; n = 0; A = NAtom nat list;\n        contains f na (0, NAtom nat list);\n        contains f nb (0, PAtom nat list); m = 0 \\<and> ma = 0;\n        \\<exists>y. considers f (nb + na + y) (0, PAtom nat list)\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>n A x31 x32.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FConj x31 x32\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 4. \\<And>n A x41 x42.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FDisj x41 x42\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 5. \\<And>n A x5.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 6. \\<And>n A x6.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A", "apply(rule contains_propagates_patoms)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>n A nat list m na nb ma.\n       \\<lbrakk>infinite (deriv s); init s; n = 0; A = NAtom nat list;\n        contains f na (0, NAtom nat list);\n        contains f nb (0, PAtom nat list); m = 0 \\<and> ma = 0\\<rbrakk>\n       \\<Longrightarrow> infinite (deriv s)\n 2. \\<And>n A nat list m na nb ma.\n       \\<lbrakk>infinite (deriv s); init s; n = 0; A = NAtom nat list;\n        contains f na (0, NAtom nat list);\n        contains f nb (0, PAtom nat list); m = 0 \\<and> ma = 0\\<rbrakk>\n       \\<Longrightarrow> contains f nb (0, PAtom nat list)\n 3. \\<And>n A nat list m na nb ma.\n       \\<lbrakk>infinite (deriv s); init s; n = 0; A = NAtom nat list;\n        contains f na (0, NAtom nat list);\n        contains f nb (0, PAtom nat list); m = 0 \\<and> ma = 0;\n        \\<exists>y. considers f (nb + na + y) (0, PAtom nat list)\\<rbrakk>\n       \\<Longrightarrow> False\n 4. \\<And>n A x31 x32.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FConj x31 x32\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 5. \\<And>n A x41 x42.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FDisj x41 x42\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 6. \\<And>n A x5.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 7. \\<And>n A x6.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A", "apply(assumption)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>n A nat list m na nb ma.\n       \\<lbrakk>infinite (deriv s); init s; n = 0; A = NAtom nat list;\n        contains f na (0, NAtom nat list);\n        contains f nb (0, PAtom nat list); m = 0 \\<and> ma = 0\\<rbrakk>\n       \\<Longrightarrow> contains f nb (0, PAtom nat list)\n 2. \\<And>n A nat list m na nb ma.\n       \\<lbrakk>infinite (deriv s); init s; n = 0; A = NAtom nat list;\n        contains f na (0, NAtom nat list);\n        contains f nb (0, PAtom nat list); m = 0 \\<and> ma = 0;\n        \\<exists>y. considers f (nb + na + y) (0, PAtom nat list)\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>n A x31 x32.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FConj x31 x32\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 4. \\<And>n A x41 x42.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FDisj x41 x42\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 5. \\<And>n A x5.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 6. \\<And>n A x6.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A", "apply(assumption)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>n A nat list m na nb ma.\n       \\<lbrakk>infinite (deriv s); init s; n = 0; A = NAtom nat list;\n        contains f na (0, NAtom nat list);\n        contains f nb (0, PAtom nat list); m = 0 \\<and> ma = 0;\n        \\<exists>y. considers f (nb + na + y) (0, PAtom nat list)\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>n A x31 x32.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FConj x31 x32\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 3. \\<And>n A x41 x42.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FDisj x41 x42\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 4. \\<And>n A x5.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 5. \\<And>n A x6.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A", "apply(erule exE)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>n A nat list m na nb ma y.\n       \\<lbrakk>infinite (deriv s); init s; n = 0; A = NAtom nat list;\n        contains f na (0, NAtom nat list);\n        contains f nb (0, PAtom nat list); m = 0 \\<and> ma = 0;\n        considers f (nb + na + y) (0, PAtom nat list)\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>n A x31 x32.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FConj x31 x32\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 3. \\<And>n A x41 x42.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FDisj x41 x42\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 4. \\<And>n A x5.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 5. \\<And>n A x6.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A", "apply(subgoal_tac \"contains f (na+nb+y) (0, NAtom nat list)\")"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>n A nat list m na nb ma y.\n       \\<lbrakk>infinite (deriv s); init s; n = 0; A = NAtom nat list;\n        contains f na (0, NAtom nat list);\n        contains f nb (0, PAtom nat list); m = 0 \\<and> ma = 0;\n        considers f (nb + na + y) (0, PAtom nat list);\n        contains f (na + nb + y) (0, NAtom nat list)\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>n A nat list m na nb ma y.\n       \\<lbrakk>infinite (deriv s); init s; n = 0; A = NAtom nat list;\n        contains f na (0, NAtom nat list);\n        contains f nb (0, PAtom nat list); m = 0 \\<and> ma = 0;\n        considers f (nb + na + y) (0, PAtom nat list)\\<rbrakk>\n       \\<Longrightarrow> contains f (na + nb + y) (0, NAtom nat list)\n 3. \\<And>n A x31 x32.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FConj x31 x32\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 4. \\<And>n A x41 x42.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FDisj x41 x42\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 5. \\<And>n A x5.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 6. \\<And>n A x6.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A", "apply(subgoal_tac \"nb+na=na+nb\")"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>n A nat list m na nb ma y.\n       \\<lbrakk>infinite (deriv s); init s; n = 0; A = NAtom nat list;\n        contains f na (0, NAtom nat list);\n        contains f nb (0, PAtom nat list); m = 0 \\<and> ma = 0;\n        considers f (nb + na + y) (0, PAtom nat list);\n        contains f (na + nb + y) (0, NAtom nat list);\n        nb + na = na + nb\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>n A nat list m na nb ma y.\n       \\<lbrakk>infinite (deriv s); init s; n = 0; A = NAtom nat list;\n        contains f na (0, NAtom nat list);\n        contains f nb (0, PAtom nat list); m = 0 \\<and> ma = 0;\n        considers f (nb + na + y) (0, PAtom nat list);\n        contains f (na + nb + y) (0, NAtom nat list)\\<rbrakk>\n       \\<Longrightarrow> nb + na = na + nb\n 3. \\<And>n A nat list m na nb ma y.\n       \\<lbrakk>infinite (deriv s); init s; n = 0; A = NAtom nat list;\n        contains f na (0, NAtom nat list);\n        contains f nb (0, PAtom nat list); m = 0 \\<and> ma = 0;\n        considers f (nb + na + y) (0, PAtom nat list)\\<rbrakk>\n       \\<Longrightarrow> contains f (na + nb + y) (0, NAtom nat list)\n 4. \\<And>n A x31 x32.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FConj x31 x32\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 5. \\<And>n A x41 x42.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FDisj x41 x42\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 6. \\<And>n A x5.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 7. \\<And>n A x6.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A", "apply(simp)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>n A nat list m na nb ma y.\n       \\<lbrakk>infinite (deriv s); init s; n = 0; A = NAtom nat list;\n        contains f na (0, NAtom nat list);\n        contains f nb (0, PAtom nat list); m = 0 \\<and> ma = 0;\n        considers f (na + nb + y) (0, PAtom nat list);\n        contains f (na + nb + y) (0, NAtom nat list)\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>n A nat list m na nb ma y.\n       \\<lbrakk>infinite (deriv s); init s; n = 0; A = NAtom nat list;\n        contains f na (0, NAtom nat list);\n        contains f nb (0, PAtom nat list); m = 0 \\<and> ma = 0;\n        considers f (nb + na + y) (0, PAtom nat list);\n        contains f (na + nb + y) (0, NAtom nat list)\\<rbrakk>\n       \\<Longrightarrow> nb + na = na + nb\n 3. \\<And>n A nat list m na nb ma y.\n       \\<lbrakk>infinite (deriv s); init s; n = 0; A = NAtom nat list;\n        contains f na (0, NAtom nat list);\n        contains f nb (0, PAtom nat list); m = 0 \\<and> ma = 0;\n        considers f (nb + na + y) (0, PAtom nat list)\\<rbrakk>\n       \\<Longrightarrow> contains f (na + nb + y) (0, NAtom nat list)\n 4. \\<And>n A x31 x32.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FConj x31 x32\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 5. \\<And>n A x41 x42.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FDisj x41 x42\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 6. \\<And>n A x5.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 7. \\<And>n A x6.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A", "apply(subgoal_tac \"is_axiom (s_of_ns (snd (f (na+nb+y))))\")"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<And>n A nat list m na nb ma y.\n       \\<lbrakk>infinite (deriv s); init s; n = 0; A = NAtom nat list;\n        contains f na (0, NAtom nat list);\n        contains f nb (0, PAtom nat list); m = 0 \\<and> ma = 0;\n        considers f (na + nb + y) (0, PAtom nat list);\n        contains f (na + nb + y) (0, NAtom nat list);\n        is_axiom (s_of_ns (snd (f (na + nb + y))))\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>n A nat list m na nb ma y.\n       \\<lbrakk>infinite (deriv s); init s; n = 0; A = NAtom nat list;\n        contains f na (0, NAtom nat list);\n        contains f nb (0, PAtom nat list); m = 0 \\<and> ma = 0;\n        considers f (na + nb + y) (0, PAtom nat list);\n        contains f (na + nb + y) (0, NAtom nat list)\\<rbrakk>\n       \\<Longrightarrow> is_axiom (s_of_ns (snd (f (na + nb + y))))\n 3. \\<And>n A nat list m na nb ma y.\n       \\<lbrakk>infinite (deriv s); init s; n = 0; A = NAtom nat list;\n        contains f na (0, NAtom nat list);\n        contains f nb (0, PAtom nat list); m = 0 \\<and> ma = 0;\n        considers f (nb + na + y) (0, PAtom nat list);\n        contains f (na + nb + y) (0, NAtom nat list)\\<rbrakk>\n       \\<Longrightarrow> nb + na = na + nb\n 4. \\<And>n A nat list m na nb ma y.\n       \\<lbrakk>infinite (deriv s); init s; n = 0; A = NAtom nat list;\n        contains f na (0, NAtom nat list);\n        contains f nb (0, PAtom nat list); m = 0 \\<and> ma = 0;\n        considers f (nb + na + y) (0, PAtom nat list)\\<rbrakk>\n       \\<Longrightarrow> contains f (na + nb + y) (0, NAtom nat list)\n 5. \\<And>n A x31 x32.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FConj x31 x32\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 6. \\<And>n A x41 x42.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FDisj x41 x42\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 7. \\<And>n A x5.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 8. \\<And>n A x6.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A", "apply(drule_tac is_axiom_finite_deriv)"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<And>n A nat list m na nb ma y.\n       \\<lbrakk>infinite (deriv s); init s; n = 0; A = NAtom nat list;\n        contains f na (0, NAtom nat list);\n        contains f nb (0, PAtom nat list); m = 0 \\<and> ma = 0;\n        considers f (na + nb + y) (0, PAtom nat list);\n        contains f (na + nb + y) (0, NAtom nat list);\n        finite (deriv (snd (f (na + nb + y))))\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>n A nat list m na nb ma y.\n       \\<lbrakk>infinite (deriv s); init s; n = 0; A = NAtom nat list;\n        contains f na (0, NAtom nat list);\n        contains f nb (0, PAtom nat list); m = 0 \\<and> ma = 0;\n        considers f (na + nb + y) (0, PAtom nat list);\n        contains f (na + nb + y) (0, NAtom nat list)\\<rbrakk>\n       \\<Longrightarrow> is_axiom (s_of_ns (snd (f (na + nb + y))))\n 3. \\<And>n A nat list m na nb ma y.\n       \\<lbrakk>infinite (deriv s); init s; n = 0; A = NAtom nat list;\n        contains f na (0, NAtom nat list);\n        contains f nb (0, PAtom nat list); m = 0 \\<and> ma = 0;\n        considers f (nb + na + y) (0, PAtom nat list);\n        contains f (na + nb + y) (0, NAtom nat list)\\<rbrakk>\n       \\<Longrightarrow> nb + na = na + nb\n 4. \\<And>n A nat list m na nb ma y.\n       \\<lbrakk>infinite (deriv s); init s; n = 0; A = NAtom nat list;\n        contains f na (0, NAtom nat list);\n        contains f nb (0, PAtom nat list); m = 0 \\<and> ma = 0;\n        considers f (nb + na + y) (0, PAtom nat list)\\<rbrakk>\n       \\<Longrightarrow> contains f (na + nb + y) (0, NAtom nat list)\n 5. \\<And>n A x31 x32.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FConj x31 x32\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 6. \\<And>n A x41 x42.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FDisj x41 x42\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 7. \\<And>n A x5.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 8. \\<And>n A x6.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A", "apply(force dest: is_path_f)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>n A nat list m na nb ma y.\n       \\<lbrakk>infinite (deriv s); init s; n = 0; A = NAtom nat list;\n        contains f na (0, NAtom nat list);\n        contains f nb (0, PAtom nat list); m = 0 \\<and> ma = 0;\n        considers f (na + nb + y) (0, PAtom nat list);\n        contains f (na + nb + y) (0, NAtom nat list)\\<rbrakk>\n       \\<Longrightarrow> is_axiom (s_of_ns (snd (f (na + nb + y))))\n 2. \\<And>n A nat list m na nb ma y.\n       \\<lbrakk>infinite (deriv s); init s; n = 0; A = NAtom nat list;\n        contains f na (0, NAtom nat list);\n        contains f nb (0, PAtom nat list); m = 0 \\<and> ma = 0;\n        considers f (nb + na + y) (0, PAtom nat list);\n        contains f (na + nb + y) (0, NAtom nat list)\\<rbrakk>\n       \\<Longrightarrow> nb + na = na + nb\n 3. \\<And>n A nat list m na nb ma y.\n       \\<lbrakk>infinite (deriv s); init s; n = 0; A = NAtom nat list;\n        contains f na (0, NAtom nat list);\n        contains f nb (0, PAtom nat list); m = 0 \\<and> ma = 0;\n        considers f (nb + na + y) (0, PAtom nat list)\\<rbrakk>\n       \\<Longrightarrow> contains f (na + nb + y) (0, NAtom nat list)\n 4. \\<And>n A x31 x32.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FConj x31 x32\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 5. \\<And>n A x41 x42.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FDisj x41 x42\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 6. \\<And>n A x5.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 7. \\<And>n A x6.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A", "apply(simp add: contains_def considers_def)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>n A nat list m na nb ma y.\n       \\<lbrakk>infinite (deriv s); init s; n = 0; A = NAtom nat list;\n        (0, NAtom nat list) \\<in> set (snd (f na));\n        (0, PAtom nat list) \\<in> set (snd (f nb)); m = 0 \\<and> ma = 0;\n        case snd (f (na + nb + y)) of [] \\<Rightarrow> False\n        | x # xs \\<Rightarrow> x = (0, PAtom nat list);\n        (0, NAtom nat list) \\<in> set (snd (f (na + nb + y)))\\<rbrakk>\n       \\<Longrightarrow> is_axiom (s_of_ns (snd (f (na + nb + y))))\n 2. \\<And>n A nat list m na nb ma y.\n       \\<lbrakk>infinite (deriv s); init s; n = 0; A = NAtom nat list;\n        contains f na (0, NAtom nat list);\n        contains f nb (0, PAtom nat list); m = 0 \\<and> ma = 0;\n        considers f (nb + na + y) (0, PAtom nat list);\n        contains f (na + nb + y) (0, NAtom nat list)\\<rbrakk>\n       \\<Longrightarrow> nb + na = na + nb\n 3. \\<And>n A nat list m na nb ma y.\n       \\<lbrakk>infinite (deriv s); init s; n = 0; A = NAtom nat list;\n        contains f na (0, NAtom nat list);\n        contains f nb (0, PAtom nat list); m = 0 \\<and> ma = 0;\n        considers f (nb + na + y) (0, PAtom nat list)\\<rbrakk>\n       \\<Longrightarrow> contains f (na + nb + y) (0, NAtom nat list)\n 4. \\<And>n A x31 x32.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FConj x31 x32\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 5. \\<And>n A x41 x42.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FDisj x41 x42\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 6. \\<And>n A x5.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 7. \\<And>n A x6.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A", "apply(case_tac \"snd (f (na + nb + y))\")"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<And>n A nat list m na nb ma y.\n       \\<lbrakk>infinite (deriv s); init s; n = 0; A = NAtom nat list;\n        (0, NAtom nat list) \\<in> set (snd (f na));\n        (0, PAtom nat list) \\<in> set (snd (f nb)); m = 0 \\<and> ma = 0;\n        case snd (f (na + nb + y)) of [] \\<Rightarrow> False\n        | x # xs \\<Rightarrow> x = (0, PAtom nat list);\n        (0, NAtom nat list) \\<in> set (snd (f (na + nb + y)));\n        snd (f (na + nb + y)) = []\\<rbrakk>\n       \\<Longrightarrow> is_axiom (s_of_ns (snd (f (na + nb + y))))\n 2. \\<And>n A nat list m na nb ma y a lista.\n       \\<lbrakk>infinite (deriv s); init s; n = 0; A = NAtom nat list;\n        (0, NAtom nat list) \\<in> set (snd (f na));\n        (0, PAtom nat list) \\<in> set (snd (f nb)); m = 0 \\<and> ma = 0;\n        case snd (f (na + nb + y)) of [] \\<Rightarrow> False\n        | x # xs \\<Rightarrow> x = (0, PAtom nat list);\n        (0, NAtom nat list) \\<in> set (snd (f (na + nb + y)));\n        snd (f (na + nb + y)) = a # lista\\<rbrakk>\n       \\<Longrightarrow> is_axiom (s_of_ns (snd (f (na + nb + y))))\n 3. \\<And>n A nat list m na nb ma y.\n       \\<lbrakk>infinite (deriv s); init s; n = 0; A = NAtom nat list;\n        contains f na (0, NAtom nat list);\n        contains f nb (0, PAtom nat list); m = 0 \\<and> ma = 0;\n        considers f (nb + na + y) (0, PAtom nat list);\n        contains f (na + nb + y) (0, NAtom nat list)\\<rbrakk>\n       \\<Longrightarrow> nb + na = na + nb\n 4. \\<And>n A nat list m na nb ma y.\n       \\<lbrakk>infinite (deriv s); init s; n = 0; A = NAtom nat list;\n        contains f na (0, NAtom nat list);\n        contains f nb (0, PAtom nat list); m = 0 \\<and> ma = 0;\n        considers f (nb + na + y) (0, PAtom nat list)\\<rbrakk>\n       \\<Longrightarrow> contains f (na + nb + y) (0, NAtom nat list)\n 5. \\<And>n A x31 x32.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FConj x31 x32\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 6. \\<And>n A x41 x42.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FDisj x41 x42\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 7. \\<And>n A x5.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 8. \\<And>n A x6.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A", "apply(simp)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>n A nat list m na nb ma y a lista.\n       \\<lbrakk>infinite (deriv s); init s; n = 0; A = NAtom nat list;\n        (0, NAtom nat list) \\<in> set (snd (f na));\n        (0, PAtom nat list) \\<in> set (snd (f nb)); m = 0 \\<and> ma = 0;\n        case snd (f (na + nb + y)) of [] \\<Rightarrow> False\n        | x # xs \\<Rightarrow> x = (0, PAtom nat list);\n        (0, NAtom nat list) \\<in> set (snd (f (na + nb + y)));\n        snd (f (na + nb + y)) = a # lista\\<rbrakk>\n       \\<Longrightarrow> is_axiom (s_of_ns (snd (f (na + nb + y))))\n 2. \\<And>n A nat list m na nb ma y.\n       \\<lbrakk>infinite (deriv s); init s; n = 0; A = NAtom nat list;\n        contains f na (0, NAtom nat list);\n        contains f nb (0, PAtom nat list); m = 0 \\<and> ma = 0;\n        considers f (nb + na + y) (0, PAtom nat list);\n        contains f (na + nb + y) (0, NAtom nat list)\\<rbrakk>\n       \\<Longrightarrow> nb + na = na + nb\n 3. \\<And>n A nat list m na nb ma y.\n       \\<lbrakk>infinite (deriv s); init s; n = 0; A = NAtom nat list;\n        contains f na (0, NAtom nat list);\n        contains f nb (0, PAtom nat list); m = 0 \\<and> ma = 0;\n        considers f (nb + na + y) (0, PAtom nat list)\\<rbrakk>\n       \\<Longrightarrow> contains f (na + nb + y) (0, NAtom nat list)\n 4. \\<And>n A x31 x32.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FConj x31 x32\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 5. \\<And>n A x41 x42.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FDisj x41 x42\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 6. \\<And>n A x5.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 7. \\<And>n A x6.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A", "apply(simp add: s_of_ns_def is_axiom.simps)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>n A nat list m na nb ma y a lista.\n       \\<lbrakk>infinite (deriv s); init s; n = 0; A = NAtom nat list;\n        (0, NAtom nat list) \\<in> set (snd (f na));\n        (0, PAtom nat list) \\<in> set (snd (f nb)); m = 0 \\<and> ma = 0;\n        a = (0, PAtom nat list); (0, NAtom nat list) \\<in> set lista;\n        snd (f (na + nb + y)) = (0, PAtom nat list) # lista\\<rbrakk>\n       \\<Longrightarrow> NAtom nat list \\<in> snd ` set lista\n 2. \\<And>n A nat list m na nb ma y.\n       \\<lbrakk>infinite (deriv s); init s; n = 0; A = NAtom nat list;\n        contains f na (0, NAtom nat list);\n        contains f nb (0, PAtom nat list); m = 0 \\<and> ma = 0;\n        considers f (nb + na + y) (0, PAtom nat list);\n        contains f (na + nb + y) (0, NAtom nat list)\\<rbrakk>\n       \\<Longrightarrow> nb + na = na + nb\n 3. \\<And>n A nat list m na nb ma y.\n       \\<lbrakk>infinite (deriv s); init s; n = 0; A = NAtom nat list;\n        contains f na (0, NAtom nat list);\n        contains f nb (0, PAtom nat list); m = 0 \\<and> ma = 0;\n        considers f (nb + na + y) (0, PAtom nat list)\\<rbrakk>\n       \\<Longrightarrow> contains f (na + nb + y) (0, NAtom nat list)\n 4. \\<And>n A x31 x32.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FConj x31 x32\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 5. \\<And>n A x41 x42.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FDisj x41 x42\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 6. \\<And>n A x5.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 7. \\<And>n A x6.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A", "apply(force)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>n A nat list m na nb ma y.\n       \\<lbrakk>infinite (deriv s); init s; n = 0; A = NAtom nat list;\n        contains f na (0, NAtom nat list);\n        contains f nb (0, PAtom nat list); m = 0 \\<and> ma = 0;\n        considers f (nb + na + y) (0, PAtom nat list);\n        contains f (na + nb + y) (0, NAtom nat list)\\<rbrakk>\n       \\<Longrightarrow> nb + na = na + nb\n 2. \\<And>n A nat list m na nb ma y.\n       \\<lbrakk>infinite (deriv s); init s; n = 0; A = NAtom nat list;\n        contains f na (0, NAtom nat list);\n        contains f nb (0, PAtom nat list); m = 0 \\<and> ma = 0;\n        considers f (nb + na + y) (0, PAtom nat list)\\<rbrakk>\n       \\<Longrightarrow> contains f (na + nb + y) (0, NAtom nat list)\n 3. \\<And>n A x31 x32.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FConj x31 x32\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 4. \\<And>n A x41 x42.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FDisj x41 x42\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 5. \\<And>n A x5.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 6. \\<And>n A x6.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A", "apply(force)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>n A nat list m na nb ma y.\n       \\<lbrakk>infinite (deriv s); init s; n = 0; A = NAtom nat list;\n        contains f na (0, NAtom nat list);\n        contains f nb (0, PAtom nat list); m = 0 \\<and> ma = 0;\n        considers f (nb + na + y) (0, PAtom nat list)\\<rbrakk>\n       \\<Longrightarrow> contains f (na + nb + y) (0, NAtom nat list)\n 2. \\<And>n A x31 x32.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FConj x31 x32\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 3. \\<And>n A x41 x42.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FDisj x41 x42\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 4. \\<And>n A x5.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 5. \\<And>n A x6.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A", "apply(force intro: contains_propagates_natoms contains_propagates_patoms)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>n A x31 x32.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FConj x31 x32\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 2. \\<And>n A x41 x42.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FDisj x41 x42\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 3. \\<And>n A x5.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 4. \\<And>n A x6.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A", "apply(intro impI allI)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>n A x31 x32 m na.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FConj x31 x32; contains f na (m, A)\\<rbrakk>\n       \\<Longrightarrow> \\<not> FEval mo ntou A\n 2. \\<And>n A x41 x42.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FDisj x41 x42\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 3. \\<And>n A x5.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 4. \\<And>n A x6.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A", "apply(subgoal_tac \"m=0\")"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>n A x31 x32 m na.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FConj x31 x32; contains f na (m, A); m = 0\\<rbrakk>\n       \\<Longrightarrow> \\<not> FEval mo ntou A\n 2. \\<And>n A x31 x32 m na.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FConj x31 x32; contains f na (m, A)\\<rbrakk>\n       \\<Longrightarrow> m = 0\n 3. \\<And>n A x41 x42.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FDisj x41 x42\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 4. \\<And>n A x5.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 5. \\<And>n A x6.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A", "prefer 2"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>n A x31 x32 m na.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FConj x31 x32; contains f na (m, A)\\<rbrakk>\n       \\<Longrightarrow> m = 0\n 2. \\<And>n A x31 x32 m na.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FConj x31 x32; contains f na (m, A); m = 0\\<rbrakk>\n       \\<Longrightarrow> \\<not> FEval mo ntou A\n 3. \\<And>n A x41 x42.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FDisj x41 x42\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 4. \\<And>n A x5.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 5. \\<And>n A x6.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A", "apply(simp)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>n A x31 x32 m na.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FConj x31 x32; contains f na (m, A); m = 0\\<rbrakk>\n       \\<Longrightarrow> \\<not> FEval mo ntou A\n 2. \\<And>n A x41 x42.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FDisj x41 x42\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 3. \\<And>n A x5.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 4. \\<And>n A x6.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A", "apply(simp del: FEval.simps)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>n A x31 x32 m na.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<exists>m n. contains f n (m, A)) \\<longrightarrow>\n              \\<not> FEval mo ntou A;\n        Suc (size x31 + size x32) = n; A = FConj x31 x32;\n        contains f na (0, FConj x31 x32); m = 0\\<rbrakk>\n       \\<Longrightarrow> \\<not> FEval mo ntou (FConj x31 x32)\n 2. \\<And>n A x41 x42.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FDisj x41 x42\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 3. \\<And>n A x5.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 4. \\<And>n A x6.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A", "apply(frule_tac contains_propagates_fconj)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>n A x31 x32 m na.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<exists>m n. contains f n (m, A)) \\<longrightarrow>\n              \\<not> FEval mo ntou A;\n        Suc (size x31 + size x32) = n; A = FConj x31 x32;\n        contains f na (0, FConj x31 x32); m = 0\\<rbrakk>\n       \\<Longrightarrow> contains f (?n84 n A x31 x32 m na)\n                          (0, FConj (?g84 n A x31 x32 m na)\n                               (?h84 n A x31 x32 m na))\n 2. \\<And>n A x31 x32 m na.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<exists>m n. contains f n (m, A)) \\<longrightarrow>\n              \\<not> FEval mo ntou A;\n        Suc (size x31 + size x32) = n; A = FConj x31 x32;\n        contains f na (0, FConj x31 x32); m = 0;\n        \\<exists>y.\n           contains f (?n84 n A x31 x32 m na + y)\n            (0, ?g84 n A x31 x32 m na) \\<or>\n           contains f (?n84 n A x31 x32 m na + y)\n            (0, ?h84 n A x31 x32 m na)\\<rbrakk>\n       \\<Longrightarrow> \\<not> FEval mo ntou (FConj x31 x32)\n 3. \\<And>n A x41 x42.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FDisj x41 x42\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 4. \\<And>n A x5.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 5. \\<And>n A x6.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A", "apply(assumption)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>n A x31 x32 m na.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<exists>m n. contains f n (m, A)) \\<longrightarrow>\n              \\<not> FEval mo ntou A;\n        Suc (size x31 + size x32) = n; A = FConj x31 x32;\n        contains f na (0, FConj x31 x32); m = 0;\n        \\<exists>y.\n           contains f (na + y) (0, x31) \\<or>\n           contains f (na + y) (0, x32)\\<rbrakk>\n       \\<Longrightarrow> \\<not> FEval mo ntou (FConj x31 x32)\n 2. \\<And>n A x41 x42.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FDisj x41 x42\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 3. \\<And>n A x5.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 4. \\<And>n A x6.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A", "apply(rename_tac form1 form2 m na)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>n A form1 form2 m na.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<exists>m n. contains f n (m, A)) \\<longrightarrow>\n              \\<not> FEval mo ntou A;\n        Suc (size form1 + size form2) = n; A = FConj form1 form2;\n        contains f na (0, FConj form1 form2); m = 0;\n        \\<exists>y.\n           contains f (na + y) (0, form1) \\<or>\n           contains f (na + y) (0, form2)\\<rbrakk>\n       \\<Longrightarrow> \\<not> FEval mo ntou (FConj form1 form2)\n 2. \\<And>n A x41 x42.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FDisj x41 x42\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 3. \\<And>n A x5.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 4. \\<And>n A x6.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A", "apply(frule_tac x=\"size form1\" in spec)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>n A form1 form2 m na.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<exists>m n. contains f n (m, A)) \\<longrightarrow>\n              \\<not> FEval mo ntou A;\n        Suc (size form1 + size form2) = n; A = FConj form1 form2;\n        contains f na (0, FConj form1 form2); m = 0;\n        \\<exists>y.\n           contains f (na + y) (0, form1) \\<or>\n           contains f (na + y) (0, form2);\n        size form1 < n \\<longrightarrow>\n        (\\<forall>A.\n            size A = size form1 \\<longrightarrow>\n            (\\<exists>m n. contains f n (m, A)) \\<longrightarrow>\n            \\<not> FEval mo ntou A)\\<rbrakk>\n       \\<Longrightarrow> \\<not> FEval mo ntou (FConj form1 form2)\n 2. \\<And>n A x41 x42.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FDisj x41 x42\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 3. \\<And>n A x5.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 4. \\<And>n A x6.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A", "apply(erule impE)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>n A form1 form2 m na.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<exists>m n. contains f n (m, A)) \\<longrightarrow>\n              \\<not> FEval mo ntou A;\n        Suc (size form1 + size form2) = n; A = FConj form1 form2;\n        contains f na (0, FConj form1 form2); m = 0;\n        \\<exists>y.\n           contains f (na + y) (0, form1) \\<or>\n           contains f (na + y) (0, form2)\\<rbrakk>\n       \\<Longrightarrow> size form1 < n\n 2. \\<And>n A form1 form2 m na.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<exists>m n. contains f n (m, A)) \\<longrightarrow>\n              \\<not> FEval mo ntou A;\n        Suc (size form1 + size form2) = n; A = FConj form1 form2;\n        contains f na (0, FConj form1 form2); m = 0;\n        \\<exists>y.\n           contains f (na + y) (0, form1) \\<or>\n           contains f (na + y) (0, form2);\n        \\<forall>A.\n           size A = size form1 \\<longrightarrow>\n           (\\<exists>m n. contains f n (m, A)) \\<longrightarrow>\n           \\<not> FEval mo ntou A\\<rbrakk>\n       \\<Longrightarrow> \\<not> FEval mo ntou (FConj form1 form2)\n 3. \\<And>n A x41 x42.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FDisj x41 x42\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 4. \\<And>n A x5.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 5. \\<And>n A x6.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A", "apply(force)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>n A form1 form2 m na.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<exists>m n. contains f n (m, A)) \\<longrightarrow>\n              \\<not> FEval mo ntou A;\n        Suc (size form1 + size form2) = n; A = FConj form1 form2;\n        contains f na (0, FConj form1 form2); m = 0;\n        \\<exists>y.\n           contains f (na + y) (0, form1) \\<or>\n           contains f (na + y) (0, form2);\n        \\<forall>A.\n           size A = size form1 \\<longrightarrow>\n           (\\<exists>m n. contains f n (m, A)) \\<longrightarrow>\n           \\<not> FEval mo ntou A\\<rbrakk>\n       \\<Longrightarrow> \\<not> FEval mo ntou (FConj form1 form2)\n 2. \\<And>n A x41 x42.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FDisj x41 x42\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 3. \\<And>n A x5.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 4. \\<And>n A x6.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A", "apply(drule_tac x=\"form1\" in spec)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>n A form1 form2 m na.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<exists>m n. contains f n (m, A)) \\<longrightarrow>\n              \\<not> FEval mo ntou A;\n        Suc (size form1 + size form2) = n; A = FConj form1 form2;\n        contains f na (0, FConj form1 form2); m = 0;\n        \\<exists>y.\n           contains f (na + y) (0, form1) \\<or>\n           contains f (na + y) (0, form2);\n        size form1 = size form1 \\<longrightarrow>\n        (\\<exists>m n. contains f n (m, form1)) \\<longrightarrow>\n        \\<not> FEval mo ntou form1\\<rbrakk>\n       \\<Longrightarrow> \\<not> FEval mo ntou (FConj form1 form2)\n 2. \\<And>n A x41 x42.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FDisj x41 x42\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 3. \\<And>n A x5.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 4. \\<And>n A x6.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A", "apply(drule_tac x=\"size form2\" in spec)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>n A form1 form2 m na.\n       \\<lbrakk>infinite (deriv s); init s;\n        Suc (size form1 + size form2) = n; A = FConj form1 form2;\n        contains f na (0, FConj form1 form2); m = 0;\n        \\<exists>y.\n           contains f (na + y) (0, form1) \\<or>\n           contains f (na + y) (0, form2);\n        size form1 = size form1 \\<longrightarrow>\n        (\\<exists>m n. contains f n (m, form1)) \\<longrightarrow>\n        \\<not> FEval mo ntou form1;\n        size form2 < n \\<longrightarrow>\n        (\\<forall>A.\n            size A = size form2 \\<longrightarrow>\n            (\\<exists>m n. contains f n (m, A)) \\<longrightarrow>\n            \\<not> FEval mo ntou A)\\<rbrakk>\n       \\<Longrightarrow> \\<not> FEval mo ntou (FConj form1 form2)\n 2. \\<And>n A x41 x42.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FDisj x41 x42\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 3. \\<And>n A x5.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 4. \\<And>n A x6.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A", "apply(erule impE)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>n A form1 form2 m na.\n       \\<lbrakk>infinite (deriv s); init s;\n        Suc (size form1 + size form2) = n; A = FConj form1 form2;\n        contains f na (0, FConj form1 form2); m = 0;\n        \\<exists>y.\n           contains f (na + y) (0, form1) \\<or>\n           contains f (na + y) (0, form2);\n        size form2 < n \\<longrightarrow>\n        (\\<forall>A.\n            size A = size form2 \\<longrightarrow>\n            (\\<exists>m n. contains f n (m, A)) \\<longrightarrow>\n            \\<not> FEval mo ntou A)\\<rbrakk>\n       \\<Longrightarrow> size form1 = size form1\n 2. \\<And>n A form1 form2 m na.\n       \\<lbrakk>infinite (deriv s); init s;\n        Suc (size form1 + size form2) = n; A = FConj form1 form2;\n        contains f na (0, FConj form1 form2); m = 0;\n        \\<exists>y.\n           contains f (na + y) (0, form1) \\<or>\n           contains f (na + y) (0, form2);\n        size form2 < n \\<longrightarrow>\n        (\\<forall>A.\n            size A = size form2 \\<longrightarrow>\n            (\\<exists>m n. contains f n (m, A)) \\<longrightarrow>\n            \\<not> FEval mo ntou A);\n        (\\<exists>m n. contains f n (m, form1)) \\<longrightarrow>\n        \\<not> FEval mo ntou form1\\<rbrakk>\n       \\<Longrightarrow> \\<not> FEval mo ntou (FConj form1 form2)\n 3. \\<And>n A x41 x42.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FDisj x41 x42\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 4. \\<And>n A x5.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 5. \\<And>n A x6.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A", "apply(force)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>n A form1 form2 m na.\n       \\<lbrakk>infinite (deriv s); init s;\n        Suc (size form1 + size form2) = n; A = FConj form1 form2;\n        contains f na (0, FConj form1 form2); m = 0;\n        \\<exists>y.\n           contains f (na + y) (0, form1) \\<or>\n           contains f (na + y) (0, form2);\n        size form2 < n \\<longrightarrow>\n        (\\<forall>A.\n            size A = size form2 \\<longrightarrow>\n            (\\<exists>m n. contains f n (m, A)) \\<longrightarrow>\n            \\<not> FEval mo ntou A);\n        (\\<exists>m n. contains f n (m, form1)) \\<longrightarrow>\n        \\<not> FEval mo ntou form1\\<rbrakk>\n       \\<Longrightarrow> \\<not> FEval mo ntou (FConj form1 form2)\n 2. \\<And>n A x41 x42.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FDisj x41 x42\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 3. \\<And>n A x5.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 4. \\<And>n A x6.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A", "apply(simp)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>n A form1 form2 m na.\n       \\<lbrakk>infinite (deriv s); init s;\n        Suc (size form1 + size form2) = n; A = FConj form1 form2;\n        contains f na (0, FConj form1 form2); m = 0;\n        \\<exists>y.\n           contains f (na + y) (0, form1) \\<or>\n           contains f (na + y) (0, form2);\n        \\<forall>A.\n           size A = size form2 \\<longrightarrow>\n           (\\<exists>m n. contains f n (m, A)) \\<longrightarrow>\n           \\<not> FEval mo ntou A;\n        (\\<exists>m n. contains f n (m, form1)) \\<longrightarrow>\n        \\<not> FEval mo ntou form1\\<rbrakk>\n       \\<Longrightarrow> FEval mo ntou form1 \\<longrightarrow>\n                         \\<not> FEval mo ntou form2\n 2. \\<And>n A x41 x42.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FDisj x41 x42\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 3. \\<And>n A x5.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 4. \\<And>n A x6.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A", "apply(force)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>n A x41 x42.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FDisj x41 x42\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 2. \\<And>n A x5.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 3. \\<And>n A x6.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A", "apply(intro impI allI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>n A x41 x42 m na.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FDisj x41 x42; contains f na (m, A)\\<rbrakk>\n       \\<Longrightarrow> \\<not> FEval mo ntou A\n 2. \\<And>n A x5.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 3. \\<And>n A x6.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A", "apply(subgoal_tac \"m=0\")"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>n A x41 x42 m na.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FDisj x41 x42; contains f na (m, A); m = 0\\<rbrakk>\n       \\<Longrightarrow> \\<not> FEval mo ntou A\n 2. \\<And>n A x41 x42 m na.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FDisj x41 x42; contains f na (m, A)\\<rbrakk>\n       \\<Longrightarrow> m = 0\n 3. \\<And>n A x5.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 4. \\<And>n A x6.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A", "prefer 2"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>n A x41 x42 m na.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FDisj x41 x42; contains f na (m, A)\\<rbrakk>\n       \\<Longrightarrow> m = 0\n 2. \\<And>n A x41 x42 m na.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FDisj x41 x42; contains f na (m, A); m = 0\\<rbrakk>\n       \\<Longrightarrow> \\<not> FEval mo ntou A\n 3. \\<And>n A x5.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 4. \\<And>n A x6.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A", "apply(simp)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>n A x41 x42 m na.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FDisj x41 x42; contains f na (m, A); m = 0\\<rbrakk>\n       \\<Longrightarrow> \\<not> FEval mo ntou A\n 2. \\<And>n A x5.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 3. \\<And>n A x6.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A", "apply(simp del: FEval.simps)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>n A x41 x42 m na.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<exists>m n. contains f n (m, A)) \\<longrightarrow>\n              \\<not> FEval mo ntou A;\n        Suc (size x41 + size x42) = n; A = FDisj x41 x42;\n        contains f na (0, FDisj x41 x42); m = 0\\<rbrakk>\n       \\<Longrightarrow> \\<not> FEval mo ntou (FDisj x41 x42)\n 2. \\<And>n A x5.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 3. \\<And>n A x6.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A", "apply(frule_tac contains_propagates_fdisj)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>n A x41 x42 m na.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<exists>m n. contains f n (m, A)) \\<longrightarrow>\n              \\<not> FEval mo ntou A;\n        Suc (size x41 + size x42) = n; A = FDisj x41 x42;\n        contains f na (0, FDisj x41 x42); m = 0\\<rbrakk>\n       \\<Longrightarrow> contains f (?n126 n A x41 x42 m na)\n                          (0, FDisj (?g126 n A x41 x42 m na)\n                               (?h126 n A x41 x42 m na))\n 2. \\<And>n A x41 x42 m na.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<exists>m n. contains f n (m, A)) \\<longrightarrow>\n              \\<not> FEval mo ntou A;\n        Suc (size x41 + size x42) = n; A = FDisj x41 x42;\n        contains f na (0, FDisj x41 x42); m = 0;\n        \\<exists>y.\n           contains f (?n126 n A x41 x42 m na + y)\n            (0, ?g126 n A x41 x42 m na) \\<and>\n           contains f (?n126 n A x41 x42 m na + y)\n            (0, ?h126 n A x41 x42 m na)\\<rbrakk>\n       \\<Longrightarrow> \\<not> FEval mo ntou (FDisj x41 x42)\n 3. \\<And>n A x5.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 4. \\<And>n A x6.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A", "apply(assumption)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>n A x41 x42 m na.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<exists>m n. contains f n (m, A)) \\<longrightarrow>\n              \\<not> FEval mo ntou A;\n        Suc (size x41 + size x42) = n; A = FDisj x41 x42;\n        contains f na (0, FDisj x41 x42); m = 0;\n        \\<exists>y.\n           contains f (na + y) (0, x41) \\<and>\n           contains f (na + y) (0, x42)\\<rbrakk>\n       \\<Longrightarrow> \\<not> FEval mo ntou (FDisj x41 x42)\n 2. \\<And>n A x5.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 3. \\<And>n A x6.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A", "apply(rename_tac form1 form2 m na)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>n A form1 form2 m na.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<exists>m n. contains f n (m, A)) \\<longrightarrow>\n              \\<not> FEval mo ntou A;\n        Suc (size form1 + size form2) = n; A = FDisj form1 form2;\n        contains f na (0, FDisj form1 form2); m = 0;\n        \\<exists>y.\n           contains f (na + y) (0, form1) \\<and>\n           contains f (na + y) (0, form2)\\<rbrakk>\n       \\<Longrightarrow> \\<not> FEval mo ntou (FDisj form1 form2)\n 2. \\<And>n A x5.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 3. \\<And>n A x6.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A", "apply(frule_tac x=\"size form1\" in spec)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>n A form1 form2 m na.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<exists>m n. contains f n (m, A)) \\<longrightarrow>\n              \\<not> FEval mo ntou A;\n        Suc (size form1 + size form2) = n; A = FDisj form1 form2;\n        contains f na (0, FDisj form1 form2); m = 0;\n        \\<exists>y.\n           contains f (na + y) (0, form1) \\<and>\n           contains f (na + y) (0, form2);\n        size form1 < n \\<longrightarrow>\n        (\\<forall>A.\n            size A = size form1 \\<longrightarrow>\n            (\\<exists>m n. contains f n (m, A)) \\<longrightarrow>\n            \\<not> FEval mo ntou A)\\<rbrakk>\n       \\<Longrightarrow> \\<not> FEval mo ntou (FDisj form1 form2)\n 2. \\<And>n A x5.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 3. \\<And>n A x6.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A", "apply(erule impE)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>n A form1 form2 m na.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<exists>m n. contains f n (m, A)) \\<longrightarrow>\n              \\<not> FEval mo ntou A;\n        Suc (size form1 + size form2) = n; A = FDisj form1 form2;\n        contains f na (0, FDisj form1 form2); m = 0;\n        \\<exists>y.\n           contains f (na + y) (0, form1) \\<and>\n           contains f (na + y) (0, form2)\\<rbrakk>\n       \\<Longrightarrow> size form1 < n\n 2. \\<And>n A form1 form2 m na.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<exists>m n. contains f n (m, A)) \\<longrightarrow>\n              \\<not> FEval mo ntou A;\n        Suc (size form1 + size form2) = n; A = FDisj form1 form2;\n        contains f na (0, FDisj form1 form2); m = 0;\n        \\<exists>y.\n           contains f (na + y) (0, form1) \\<and>\n           contains f (na + y) (0, form2);\n        \\<forall>A.\n           size A = size form1 \\<longrightarrow>\n           (\\<exists>m n. contains f n (m, A)) \\<longrightarrow>\n           \\<not> FEval mo ntou A\\<rbrakk>\n       \\<Longrightarrow> \\<not> FEval mo ntou (FDisj form1 form2)\n 3. \\<And>n A x5.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 4. \\<And>n A x6.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A", "apply(force)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>n A form1 form2 m na.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<exists>m n. contains f n (m, A)) \\<longrightarrow>\n              \\<not> FEval mo ntou A;\n        Suc (size form1 + size form2) = n; A = FDisj form1 form2;\n        contains f na (0, FDisj form1 form2); m = 0;\n        \\<exists>y.\n           contains f (na + y) (0, form1) \\<and>\n           contains f (na + y) (0, form2);\n        \\<forall>A.\n           size A = size form1 \\<longrightarrow>\n           (\\<exists>m n. contains f n (m, A)) \\<longrightarrow>\n           \\<not> FEval mo ntou A\\<rbrakk>\n       \\<Longrightarrow> \\<not> FEval mo ntou (FDisj form1 form2)\n 2. \\<And>n A x5.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 3. \\<And>n A x6.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A", "apply(drule_tac x=\"form1\" in spec)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>n A form1 form2 m na.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<exists>m n. contains f n (m, A)) \\<longrightarrow>\n              \\<not> FEval mo ntou A;\n        Suc (size form1 + size form2) = n; A = FDisj form1 form2;\n        contains f na (0, FDisj form1 form2); m = 0;\n        \\<exists>y.\n           contains f (na + y) (0, form1) \\<and>\n           contains f (na + y) (0, form2);\n        size form1 = size form1 \\<longrightarrow>\n        (\\<exists>m n. contains f n (m, form1)) \\<longrightarrow>\n        \\<not> FEval mo ntou form1\\<rbrakk>\n       \\<Longrightarrow> \\<not> FEval mo ntou (FDisj form1 form2)\n 2. \\<And>n A x5.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 3. \\<And>n A x6.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A", "apply(drule_tac x=\"size form2\" in spec)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>n A form1 form2 m na.\n       \\<lbrakk>infinite (deriv s); init s;\n        Suc (size form1 + size form2) = n; A = FDisj form1 form2;\n        contains f na (0, FDisj form1 form2); m = 0;\n        \\<exists>y.\n           contains f (na + y) (0, form1) \\<and>\n           contains f (na + y) (0, form2);\n        size form1 = size form1 \\<longrightarrow>\n        (\\<exists>m n. contains f n (m, form1)) \\<longrightarrow>\n        \\<not> FEval mo ntou form1;\n        size form2 < n \\<longrightarrow>\n        (\\<forall>A.\n            size A = size form2 \\<longrightarrow>\n            (\\<exists>m n. contains f n (m, A)) \\<longrightarrow>\n            \\<not> FEval mo ntou A)\\<rbrakk>\n       \\<Longrightarrow> \\<not> FEval mo ntou (FDisj form1 form2)\n 2. \\<And>n A x5.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 3. \\<And>n A x6.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A", "apply(erule impE)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>n A form1 form2 m na.\n       \\<lbrakk>infinite (deriv s); init s;\n        Suc (size form1 + size form2) = n; A = FDisj form1 form2;\n        contains f na (0, FDisj form1 form2); m = 0;\n        \\<exists>y.\n           contains f (na + y) (0, form1) \\<and>\n           contains f (na + y) (0, form2);\n        size form2 < n \\<longrightarrow>\n        (\\<forall>A.\n            size A = size form2 \\<longrightarrow>\n            (\\<exists>m n. contains f n (m, A)) \\<longrightarrow>\n            \\<not> FEval mo ntou A)\\<rbrakk>\n       \\<Longrightarrow> size form1 = size form1\n 2. \\<And>n A form1 form2 m na.\n       \\<lbrakk>infinite (deriv s); init s;\n        Suc (size form1 + size form2) = n; A = FDisj form1 form2;\n        contains f na (0, FDisj form1 form2); m = 0;\n        \\<exists>y.\n           contains f (na + y) (0, form1) \\<and>\n           contains f (na + y) (0, form2);\n        size form2 < n \\<longrightarrow>\n        (\\<forall>A.\n            size A = size form2 \\<longrightarrow>\n            (\\<exists>m n. contains f n (m, A)) \\<longrightarrow>\n            \\<not> FEval mo ntou A);\n        (\\<exists>m n. contains f n (m, form1)) \\<longrightarrow>\n        \\<not> FEval mo ntou form1\\<rbrakk>\n       \\<Longrightarrow> \\<not> FEval mo ntou (FDisj form1 form2)\n 3. \\<And>n A x5.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 4. \\<And>n A x6.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A", "apply(force)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>n A form1 form2 m na.\n       \\<lbrakk>infinite (deriv s); init s;\n        Suc (size form1 + size form2) = n; A = FDisj form1 form2;\n        contains f na (0, FDisj form1 form2); m = 0;\n        \\<exists>y.\n           contains f (na + y) (0, form1) \\<and>\n           contains f (na + y) (0, form2);\n        size form2 < n \\<longrightarrow>\n        (\\<forall>A.\n            size A = size form2 \\<longrightarrow>\n            (\\<exists>m n. contains f n (m, A)) \\<longrightarrow>\n            \\<not> FEval mo ntou A);\n        (\\<exists>m n. contains f n (m, form1)) \\<longrightarrow>\n        \\<not> FEval mo ntou form1\\<rbrakk>\n       \\<Longrightarrow> \\<not> FEval mo ntou (FDisj form1 form2)\n 2. \\<And>n A x5.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 3. \\<And>n A x6.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A", "apply(simp)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>n A form1 form2 m na.\n       \\<lbrakk>infinite (deriv s); init s;\n        Suc (size form1 + size form2) = n; A = FDisj form1 form2;\n        contains f na (0, FDisj form1 form2); m = 0;\n        \\<exists>y.\n           contains f (na + y) (0, form1) \\<and>\n           contains f (na + y) (0, form2);\n        \\<forall>A.\n           size A = size form2 \\<longrightarrow>\n           (\\<exists>m n. contains f n (m, A)) \\<longrightarrow>\n           \\<not> FEval mo ntou A;\n        (\\<exists>m n. contains f n (m, form1)) \\<longrightarrow>\n        \\<not> FEval mo ntou form1\\<rbrakk>\n       \\<Longrightarrow> \\<not> FEval mo ntou form1 \\<and>\n                         \\<not> FEval mo ntou form2\n 2. \\<And>n A x5.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 3. \\<And>n A x6.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A", "apply(force)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n A x5.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FAll x5\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A\n 2. \\<And>n A x6.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A", "apply(intro impI allI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n A x5 m na.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FAll x5; contains f na (m, A)\\<rbrakk>\n       \\<Longrightarrow> \\<not> FEval mo ntou A\n 2. \\<And>n A x6.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A", "apply(subgoal_tac \"m=0\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>n A x5 m na.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FAll x5; contains f na (m, A); m = 0\\<rbrakk>\n       \\<Longrightarrow> \\<not> FEval mo ntou A\n 2. \\<And>n A x5 m na.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FAll x5; contains f na (m, A)\\<rbrakk>\n       \\<Longrightarrow> m = 0\n 3. \\<And>n A x6.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A", "prefer 2"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>n A x5 m na.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FAll x5; contains f na (m, A)\\<rbrakk>\n       \\<Longrightarrow> m = 0\n 2. \\<And>n A x5 m na.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FAll x5; contains f na (m, A); m = 0\\<rbrakk>\n       \\<Longrightarrow> \\<not> FEval mo ntou A\n 3. \\<And>n A x6.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A", "apply(simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n A x5 m na.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FAll x5; contains f na (m, A); m = 0\\<rbrakk>\n       \\<Longrightarrow> \\<not> FEval mo ntou A\n 2. \\<And>n A x6.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A", "apply(simp del: FEval.simps)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n A x5 m na.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<exists>m n. contains f n (m, A)) \\<longrightarrow>\n              \\<not> FEval mo ntou A;\n        Suc (size x5) = n; A = FAll x5; contains f na (0, FAll x5);\n        m = 0\\<rbrakk>\n       \\<Longrightarrow> \\<not> FEval mo ntou (FAll x5)\n 2. \\<And>n A x6.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A", "apply(frule_tac contains_propagates_fall)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>n A x5 m na.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<exists>m n. contains f n (m, A)) \\<longrightarrow>\n              \\<not> FEval mo ntou A;\n        Suc (size x5) = n; A = FAll x5; contains f na (0, FAll x5);\n        m = 0\\<rbrakk>\n       \\<Longrightarrow> contains f (?n172 n A x5 m na)\n                          (0, FAll (?g172 n A x5 m na))\n 2. \\<And>n A x5 m na.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<exists>m n. contains f n (m, A)) \\<longrightarrow>\n              \\<not> FEval mo ntou A;\n        Suc (size x5) = n; A = FAll x5; contains f na (0, FAll x5); m = 0;\n        \\<exists>y.\n           contains f (Suc (?n172 n A x5 m na + y))\n            (0, finst (?g172 n A x5 m na)\n                 (newvar\n                   (sfv (s_of_ns\n                          (snd (f (?n172 n A x5 m na + y)))))))\\<rbrakk>\n       \\<Longrightarrow> \\<not> FEval mo ntou (FAll x5)\n 3. \\<And>n A x6.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A", "apply(assumption)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n A x5 m na.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<exists>m n. contains f n (m, A)) \\<longrightarrow>\n              \\<not> FEval mo ntou A;\n        Suc (size x5) = n; A = FAll x5; contains f na (0, FAll x5); m = 0;\n        \\<exists>y.\n           contains f (Suc (na + y))\n            (0, finst x5\n                 (newvar (sfv (s_of_ns (snd (f (na + y)))))))\\<rbrakk>\n       \\<Longrightarrow> \\<not> FEval mo ntou (FAll x5)\n 2. \\<And>n A x6.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A", "apply(erule exE) \\<comment> \\<open>all case\\<close>"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n A x5 m na y.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<exists>m n. contains f n (m, A)) \\<longrightarrow>\n              \\<not> FEval mo ntou A;\n        Suc (size x5) = n; A = FAll x5; contains f na (0, FAll x5); m = 0;\n        contains f (Suc (na + y))\n         (0, finst x5 (newvar (sfv (s_of_ns (snd (f (na + y)))))))\\<rbrakk>\n       \\<Longrightarrow> \\<not> FEval mo ntou (FAll x5)\n 2. \\<And>n A x6.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A", "apply(rename_tac form m na y)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n A form m na y.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<exists>m n. contains f n (m, A)) \\<longrightarrow>\n              \\<not> FEval mo ntou A;\n        Suc (size form) = n; A = FAll form; contains f na (0, FAll form);\n        m = 0;\n        contains f (Suc (na + y))\n         (0, finst form\n              (newvar (sfv (s_of_ns (snd (f (na + y)))))))\\<rbrakk>\n       \\<Longrightarrow> \\<not> FEval mo ntou (FAll form)\n 2. \\<And>n A x6.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A", "apply(drule_tac x=\"size form\" in spec)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n A form m na y.\n       \\<lbrakk>infinite (deriv s); init s; Suc (size form) = n;\n        A = FAll form; contains f na (0, FAll form); m = 0;\n        contains f (Suc (na + y))\n         (0, finst form (newvar (sfv (s_of_ns (snd (f (na + y)))))));\n        size form < n \\<longrightarrow>\n        (\\<forall>A.\n            size A = size form \\<longrightarrow>\n            (\\<exists>m n. contains f n (m, A)) \\<longrightarrow>\n            \\<not> FEval mo ntou A)\\<rbrakk>\n       \\<Longrightarrow> \\<not> FEval mo ntou (FAll form)\n 2. \\<And>n A x6.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A", "apply(erule impE, force)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n A form m na y.\n       \\<lbrakk>infinite (deriv s); init s; Suc (size form) = n;\n        A = FAll form; contains f na (0, FAll form); m = 0;\n        contains f (Suc (na + y))\n         (0, finst form (newvar (sfv (s_of_ns (snd (f (na + y)))))));\n        \\<forall>A.\n           size A = size form \\<longrightarrow>\n           (\\<exists>m n. contains f n (m, A)) \\<longrightarrow>\n           \\<not> FEval mo ntou A\\<rbrakk>\n       \\<Longrightarrow> \\<not> FEval mo ntou (FAll form)\n 2. \\<And>n A x6.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A", "apply(drule_tac x=\"finst form (newvar (sfv (s_of_ns (snd (f (na + y))))))\" in spec)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n A form m na y.\n       \\<lbrakk>infinite (deriv s); init s; Suc (size form) = n;\n        A = FAll form; contains f na (0, FAll form); m = 0;\n        contains f (Suc (na + y))\n         (0, finst form (newvar (sfv (s_of_ns (snd (f (na + y)))))));\n        size (finst form (newvar (sfv (s_of_ns (snd (f (na + y))))))) =\n        size form \\<longrightarrow>\n        (\\<exists>m n.\n            contains f n\n             (m, finst form\n                  (newvar\n                    (sfv (s_of_ns (snd (f (na + y)))))))) \\<longrightarrow>\n        \\<not> FEval mo ntou\n                (finst form\n                  (newvar (sfv (s_of_ns (snd (f (na + y)))))))\\<rbrakk>\n       \\<Longrightarrow> \\<not> FEval mo ntou (FAll form)\n 2. \\<And>n A x6.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A", "apply(erule impE, force)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n A form m na y.\n       \\<lbrakk>infinite (deriv s); init s; Suc (size form) = n;\n        A = FAll form; contains f na (0, FAll form); m = 0;\n        contains f (Suc (na + y))\n         (0, finst form (newvar (sfv (s_of_ns (snd (f (na + y)))))));\n        (\\<exists>m n.\n            contains f n\n             (m, finst form\n                  (newvar\n                    (sfv (s_of_ns (snd (f (na + y)))))))) \\<longrightarrow>\n        \\<not> FEval mo ntou\n                (finst form\n                  (newvar (sfv (s_of_ns (snd (f (na + y)))))))\\<rbrakk>\n       \\<Longrightarrow> \\<not> FEval mo ntou (FAll form)\n 2. \\<And>n A x6.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A", "apply(erule impE, force)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n A form m na y.\n       \\<lbrakk>infinite (deriv s); init s; Suc (size form) = n;\n        A = FAll form; contains f na (0, FAll form); m = 0;\n        contains f (Suc (na + y))\n         (0, finst form (newvar (sfv (s_of_ns (snd (f (na + y)))))));\n        \\<not> FEval mo ntou\n                (finst form\n                  (newvar (sfv (s_of_ns (snd (f (na + y)))))))\\<rbrakk>\n       \\<Longrightarrow> \\<not> FEval mo ntou (FAll form)\n 2. \\<And>n A x6.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A", "apply(simp add: FEval_finst)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n A form m na y.\n       \\<lbrakk>infinite (deriv s); init s; Suc (size form) = n;\n        A = FAll form; contains f na (0, FAll form); m = 0;\n        contains f (Suc (na + y))\n         (0, finst form (newvar (sfv (s_of_ns (snd (f (na + y)))))));\n        \\<not> FEval mo\n                (case_nat (ntou (newvar (sfv (s_of_ns (snd (f (na + y)))))))\n                  ntou)\n                form\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m\\<in>fst mo.\n                            \\<not> FEval mo (case_nat m ntou) form\n 2. \\<And>n A x6.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A", "apply(rule_tac x=\"ntou (newvar (sfv (s_of_ns (snd (f (na + y))))))\" in bexI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>n A form m na y.\n       \\<lbrakk>infinite (deriv s); init s; Suc (size form) = n;\n        A = FAll form; contains f na (0, FAll form); m = 0;\n        contains f (Suc (na + y))\n         (0, finst form (newvar (sfv (s_of_ns (snd (f (na + y)))))));\n        \\<not> FEval mo\n                (case_nat (ntou (newvar (sfv (s_of_ns (snd (f (na + y)))))))\n                  ntou)\n                form\\<rbrakk>\n       \\<Longrightarrow> \\<not> FEval mo\n                                 (case_nat\n                                   (ntou\n                                     (newvar\n (sfv (s_of_ns (snd (f (na + y)))))))\n                                   ntou)\n                                 form\n 2. \\<And>n A form m na y.\n       \\<lbrakk>infinite (deriv s); init s; Suc (size form) = n;\n        A = FAll form; contains f na (0, FAll form); m = 0;\n        contains f (Suc (na + y))\n         (0, finst form (newvar (sfv (s_of_ns (snd (f (na + y)))))));\n        \\<not> FEval mo\n                (case_nat (ntou (newvar (sfv (s_of_ns (snd (f (na + y)))))))\n                  ntou)\n                form\\<rbrakk>\n       \\<Longrightarrow> ntou (newvar (sfv (s_of_ns (snd (f (na + y))))))\n                         \\<in> fst mo\n 3. \\<And>n A x6.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A", "apply(assumption)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n A form m na y.\n       \\<lbrakk>infinite (deriv s); init s; Suc (size form) = n;\n        A = FAll form; contains f na (0, FAll form); m = 0;\n        contains f (Suc (na + y))\n         (0, finst form (newvar (sfv (s_of_ns (snd (f (na + y)))))));\n        \\<not> FEval mo\n                (case_nat (ntou (newvar (sfv (s_of_ns (snd (f (na + y)))))))\n                  ntou)\n                form\\<rbrakk>\n       \\<Longrightarrow> ntou (newvar (sfv (s_of_ns (snd (f (na + y))))))\n                         \\<in> fst mo\n 2. \\<And>n A x6.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A", "using is_env_model_ntou[of s]"], ["proof (prove)\nusing this:\n  is_env (model s) ntou\n\ngoal (2 subgoals):\n 1. \\<And>n A form m na y.\n       \\<lbrakk>infinite (deriv s); init s; Suc (size form) = n;\n        A = FAll form; contains f na (0, FAll form); m = 0;\n        contains f (Suc (na + y))\n         (0, finst form (newvar (sfv (s_of_ns (snd (f (na + y)))))));\n        \\<not> FEval mo\n                (case_nat (ntou (newvar (sfv (s_of_ns (snd (f (na + y)))))))\n                  ntou)\n                form\\<rbrakk>\n       \\<Longrightarrow> ntou (newvar (sfv (s_of_ns (snd (f (na + y))))))\n                         \\<in> fst mo\n 2. \\<And>n A x6.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A", "apply(simp add: is_env_def mo)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n A x6.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FEx x6\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A", "apply(intro impI allI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n A x6 m na.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<forall>m n.\n                  contains f n (m, A) \\<longrightarrow>\n                  \\<not> FEval mo ntou A);\n        size A = n; A = FEx x6; contains f na (m, A)\\<rbrakk>\n       \\<Longrightarrow> \\<not> FEval mo ntou A", "apply(simp del: FEval.simps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n A x6 m na.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<exists>m n. contains f n (m, A)) \\<longrightarrow>\n              \\<not> FEval mo ntou A;\n        Suc (size x6) = n; A = FEx x6; contains f na (m, FEx x6)\\<rbrakk>\n       \\<Longrightarrow> \\<not> FEval mo ntou (FEx x6)", "apply(frule_tac FEx_upward)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>n A x6 m na.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<exists>m n. contains f n (m, A)) \\<longrightarrow>\n              \\<not> FEval mo ntou A;\n        Suc (size x6) = n; A = FEx x6; contains f na (m, FEx x6)\\<rbrakk>\n       \\<Longrightarrow> init s\n 2. \\<And>n A x6 m na.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<exists>m n. contains f n (m, A)) \\<longrightarrow>\n              \\<not> FEval mo ntou A;\n        Suc (size x6) = n; A = FEx x6; contains f na (m, FEx x6)\\<rbrakk>\n       \\<Longrightarrow> contains f (?n211 n A x6 m na)\n                          (?m211 n A x6 m na, FEx (?g211 n A x6 m na))\n 3. \\<And>n A x6 m na.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<exists>m n. contains f n (m, A)) \\<longrightarrow>\n              \\<not> FEval mo ntou A;\n        Suc (size x6) = n; A = FEx x6; contains f na (m, FEx x6);\n        \\<forall>m'.\n           \\<exists>n'.\n              contains f n' (0, finst (?g211 n A x6 m na) m')\\<rbrakk>\n       \\<Longrightarrow> \\<not> FEval mo ntou (FEx x6)", "apply(assumption)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n A x6 m na.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<exists>m n. contains f n (m, A)) \\<longrightarrow>\n              \\<not> FEval mo ntou A;\n        Suc (size x6) = n; A = FEx x6; contains f na (m, FEx x6)\\<rbrakk>\n       \\<Longrightarrow> contains f (?n211 n A x6 m na)\n                          (?m211 n A x6 m na, FEx (?g211 n A x6 m na))\n 2. \\<And>n A x6 m na.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<exists>m n. contains f n (m, A)) \\<longrightarrow>\n              \\<not> FEval mo ntou A;\n        Suc (size x6) = n; A = FEx x6; contains f na (m, FEx x6);\n        \\<forall>m'.\n           \\<exists>n'.\n              contains f n' (0, finst (?g211 n A x6 m na) m')\\<rbrakk>\n       \\<Longrightarrow> \\<not> FEval mo ntou (FEx x6)", "apply(assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n A x6 m na.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<exists>m n. contains f n (m, A)) \\<longrightarrow>\n              \\<not> FEval mo ntou A;\n        Suc (size x6) = n; A = FEx x6; contains f na (m, FEx x6);\n        \\<forall>m'. \\<exists>n'. contains f n' (0, finst x6 m')\\<rbrakk>\n       \\<Longrightarrow> \\<not> FEval mo ntou (FEx x6)", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n A x6 m na.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<exists>m n. contains f n (m, A)) \\<longrightarrow>\n              \\<not> FEval mo ntou A;\n        Suc (size x6) = n; A = FEx x6; contains f na (m, FEx x6);\n        \\<forall>m'. \\<exists>n'. contains f n' (0, finst x6 m')\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m\\<in>fst mo.\n                            \\<not> FEval mo (case_nat m ntou) x6", "apply(rule)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n A x6 m na ma.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<exists>m n. contains f n (m, A)) \\<longrightarrow>\n              \\<not> FEval mo ntou A;\n        Suc (size x6) = n; A = FEx x6; contains f na (m, FEx x6);\n        \\<forall>m'. \\<exists>n'. contains f n' (0, finst x6 m');\n        ma \\<in> fst mo\\<rbrakk>\n       \\<Longrightarrow> \\<not> FEval mo (case_nat ma ntou) x6", "apply(rename_tac form m na ma)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n A form m na ma.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<exists>m n. contains f n (m, A)) \\<longrightarrow>\n              \\<not> FEval mo ntou A;\n        Suc (size form) = n; A = FEx form; contains f na (m, FEx form);\n        \\<forall>m'. \\<exists>n'. contains f n' (0, finst form m');\n        ma \\<in> fst mo\\<rbrakk>\n       \\<Longrightarrow> \\<not> FEval mo (case_nat ma ntou) form", "apply(subgoal_tac \"\\<forall>m'. ~ FEval mo ntou (finst form m')\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n A form m na ma.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<exists>m n. contains f n (m, A)) \\<longrightarrow>\n              \\<not> FEval mo ntou A;\n        Suc (size form) = n; A = FEx form; contains f na (m, FEx form);\n        \\<forall>m'. \\<exists>n'. contains f n' (0, finst form m');\n        ma \\<in> fst mo;\n        \\<forall>m'. \\<not> FEval mo ntou (finst form m')\\<rbrakk>\n       \\<Longrightarrow> \\<not> FEval mo (case_nat ma ntou) form\n 2. \\<And>n A form m na ma.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<exists>m n. contains f n (m, A)) \\<longrightarrow>\n              \\<not> FEval mo ntou A;\n        Suc (size form) = n; A = FEx form; contains f na (m, FEx form);\n        \\<forall>m'. \\<exists>n'. contains f n' (0, finst form m');\n        ma \\<in> fst mo\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m'. \\<not> FEval mo ntou (finst form m')", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n A form m na ma.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<exists>m n. contains f n (m, A)) \\<longrightarrow>\n              \\<not> FEval mo ntou A;\n        Suc (size form) = n; A = FEx form; contains f na (m, FEx form);\n        \\<forall>m'. \\<exists>n'. contains f n' (0, finst form m');\n        ma \\<in> fst mo\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m'. \\<not> FEval mo ntou (finst form m')\n 2. \\<And>n A form m na ma.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<exists>m n. contains f n (m, A)) \\<longrightarrow>\n              \\<not> FEval mo ntou A;\n        Suc (size form) = n; A = FEx form; contains f na (m, FEx form);\n        \\<forall>m'. \\<exists>n'. contains f n' (0, finst form m');\n        ma \\<in> fst mo;\n        \\<forall>m'. \\<not> FEval mo ntou (finst form m')\\<rbrakk>\n       \\<Longrightarrow> \\<not> FEval mo (case_nat ma ntou) form", "apply(rule)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n A form m na ma m'.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<exists>m n. contains f n (m, A)) \\<longrightarrow>\n              \\<not> FEval mo ntou A;\n        Suc (size form) = n; A = FEx form; contains f na (m, FEx form);\n        \\<forall>m'. \\<exists>n'. contains f n' (0, finst form m');\n        ma \\<in> fst mo\\<rbrakk>\n       \\<Longrightarrow> \\<not> FEval mo ntou (finst form m')\n 2. \\<And>n A form m na ma.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<exists>m n. contains f n (m, A)) \\<longrightarrow>\n              \\<not> FEval mo ntou A;\n        Suc (size form) = n; A = FEx form; contains f na (m, FEx form);\n        \\<forall>m'. \\<exists>n'. contains f n' (0, finst form m');\n        ma \\<in> fst mo;\n        \\<forall>m'. \\<not> FEval mo ntou (finst form m')\\<rbrakk>\n       \\<Longrightarrow> \\<not> FEval mo (case_nat ma ntou) form", "apply(drule_tac x=\"size form\" in spec)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n A form m na ma m'.\n       \\<lbrakk>infinite (deriv s); init s; Suc (size form) = n;\n        A = FEx form; contains f na (m, FEx form);\n        \\<forall>m'. \\<exists>n'. contains f n' (0, finst form m');\n        ma \\<in> fst mo;\n        size form < n \\<longrightarrow>\n        (\\<forall>A.\n            size A = size form \\<longrightarrow>\n            (\\<exists>m n. contains f n (m, A)) \\<longrightarrow>\n            \\<not> FEval mo ntou A)\\<rbrakk>\n       \\<Longrightarrow> \\<not> FEval mo ntou (finst form m')\n 2. \\<And>n A form m na ma.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<exists>m n. contains f n (m, A)) \\<longrightarrow>\n              \\<not> FEval mo ntou A;\n        Suc (size form) = n; A = FEx form; contains f na (m, FEx form);\n        \\<forall>m'. \\<exists>n'. contains f n' (0, finst form m');\n        ma \\<in> fst mo;\n        \\<forall>m'. \\<not> FEval mo ntou (finst form m')\\<rbrakk>\n       \\<Longrightarrow> \\<not> FEval mo (case_nat ma ntou) form", "apply(erule impE, force)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n A form m na ma m'.\n       \\<lbrakk>infinite (deriv s); init s; Suc (size form) = n;\n        A = FEx form; contains f na (m, FEx form);\n        \\<forall>m'. \\<exists>n'. contains f n' (0, finst form m');\n        ma \\<in> fst mo;\n        \\<forall>A.\n           size A = size form \\<longrightarrow>\n           (\\<exists>m n. contains f n (m, A)) \\<longrightarrow>\n           \\<not> FEval mo ntou A\\<rbrakk>\n       \\<Longrightarrow> \\<not> FEval mo ntou (finst form m')\n 2. \\<And>n A form m na ma.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<exists>m n. contains f n (m, A)) \\<longrightarrow>\n              \\<not> FEval mo ntou A;\n        Suc (size form) = n; A = FEx form; contains f na (m, FEx form);\n        \\<forall>m'. \\<exists>n'. contains f n' (0, finst form m');\n        ma \\<in> fst mo;\n        \\<forall>m'. \\<not> FEval mo ntou (finst form m')\\<rbrakk>\n       \\<Longrightarrow> \\<not> FEval mo (case_nat ma ntou) form", "apply(drule_tac x=\"finst form m'\" in spec)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n A form m na ma m'.\n       \\<lbrakk>infinite (deriv s); init s; Suc (size form) = n;\n        A = FEx form; contains f na (m, FEx form);\n        \\<forall>m'. \\<exists>n'. contains f n' (0, finst form m');\n        ma \\<in> fst mo;\n        size (finst form m') = size form \\<longrightarrow>\n        (\\<exists>m n. contains f n (m, finst form m')) \\<longrightarrow>\n        \\<not> FEval mo ntou (finst form m')\\<rbrakk>\n       \\<Longrightarrow> \\<not> FEval mo ntou (finst form m')\n 2. \\<And>n A form m na ma.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<exists>m n. contains f n (m, A)) \\<longrightarrow>\n              \\<not> FEval mo ntou A;\n        Suc (size form) = n; A = FEx form; contains f na (m, FEx form);\n        \\<forall>m'. \\<exists>n'. contains f n' (0, finst form m');\n        ma \\<in> fst mo;\n        \\<forall>m'. \\<not> FEval mo ntou (finst form m')\\<rbrakk>\n       \\<Longrightarrow> \\<not> FEval mo (case_nat ma ntou) form", "apply(erule impE, force)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n A form m na ma m'.\n       \\<lbrakk>infinite (deriv s); init s; Suc (size form) = n;\n        A = FEx form; contains f na (m, FEx form);\n        \\<forall>m'. \\<exists>n'. contains f n' (0, finst form m');\n        ma \\<in> fst mo;\n        (\\<exists>m n. contains f n (m, finst form m')) \\<longrightarrow>\n        \\<not> FEval mo ntou (finst form m')\\<rbrakk>\n       \\<Longrightarrow> \\<not> FEval mo ntou (finst form m')\n 2. \\<And>n A form m na ma.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<exists>m n. contains f n (m, A)) \\<longrightarrow>\n              \\<not> FEval mo ntou A;\n        Suc (size form) = n; A = FEx form; contains f na (m, FEx form);\n        \\<forall>m'. \\<exists>n'. contains f n' (0, finst form m');\n        ma \\<in> fst mo;\n        \\<forall>m'. \\<not> FEval mo ntou (finst form m')\\<rbrakk>\n       \\<Longrightarrow> \\<not> FEval mo (case_nat ma ntou) form", "apply(erule impE)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>n A form m na ma m'.\n       \\<lbrakk>infinite (deriv s); init s; Suc (size form) = n;\n        A = FEx form; contains f na (m, FEx form);\n        \\<forall>m'. \\<exists>n'. contains f n' (0, finst form m');\n        ma \\<in> fst mo\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m n. contains f n (m, finst form m')\n 2. \\<And>n A form m na ma m'.\n       \\<lbrakk>infinite (deriv s); init s; Suc (size form) = n;\n        A = FEx form; contains f na (m, FEx form);\n        \\<forall>m'. \\<exists>n'. contains f n' (0, finst form m');\n        ma \\<in> fst mo; \\<not> FEval mo ntou (finst form m')\\<rbrakk>\n       \\<Longrightarrow> \\<not> FEval mo ntou (finst form m')\n 3. \\<And>n A form m na ma.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<exists>m n. contains f n (m, A)) \\<longrightarrow>\n              \\<not> FEval mo ntou A;\n        Suc (size form) = n; A = FEx form; contains f na (m, FEx form);\n        \\<forall>m'. \\<exists>n'. contains f n' (0, finst form m');\n        ma \\<in> fst mo;\n        \\<forall>m'. \\<not> FEval mo ntou (finst form m')\\<rbrakk>\n       \\<Longrightarrow> \\<not> FEval mo (case_nat ma ntou) form", "apply(force)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n A form m na ma m'.\n       \\<lbrakk>infinite (deriv s); init s; Suc (size form) = n;\n        A = FEx form; contains f na (m, FEx form);\n        \\<forall>m'. \\<exists>n'. contains f n' (0, finst form m');\n        ma \\<in> fst mo; \\<not> FEval mo ntou (finst form m')\\<rbrakk>\n       \\<Longrightarrow> \\<not> FEval mo ntou (finst form m')\n 2. \\<And>n A form m na ma.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<exists>m n. contains f n (m, A)) \\<longrightarrow>\n              \\<not> FEval mo ntou A;\n        Suc (size form) = n; A = FEx form; contains f na (m, FEx form);\n        \\<forall>m'. \\<exists>n'. contains f n' (0, finst form m');\n        ma \\<in> fst mo;\n        \\<forall>m'. \\<not> FEval mo ntou (finst form m')\\<rbrakk>\n       \\<Longrightarrow> \\<not> FEval mo (case_nat ma ntou) form", "apply(simp add: id_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n A form m na ma.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<exists>m n. contains f n (m, A)) \\<longrightarrow>\n              \\<not> FEval mo ntou A;\n        Suc (size form) = n; A = FEx form; contains f na (m, FEx form);\n        \\<forall>m'. \\<exists>n'. contains f n' (0, finst form m');\n        ma \\<in> fst mo;\n        \\<forall>m'. \\<not> FEval mo ntou (finst form m')\\<rbrakk>\n       \\<Longrightarrow> \\<not> FEval mo (case_nat ma ntou) form", "apply(simp add: FEval_finst id_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n A form m na ma.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<exists>m n. contains f n (m, A)) \\<longrightarrow>\n              \\<not> FEval mo ntou A;\n        Suc (size form) = n; A = FEx form; contains f na (m, FEx form);\n        \\<forall>m'. \\<exists>n'. contains f n' (0, finst form m');\n        ma \\<in> fst mo;\n        \\<forall>m'. \\<not> FEval mo (case_nat (ntou m') ntou) form\\<rbrakk>\n       \\<Longrightarrow> \\<not> FEval mo (case_nat ma ntou) form", "apply(drule_tac x=\"uton ma\" and P=\"%m'. ~ (P m')\" for P in spec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n A form m na ma.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<exists>m n. contains f n (m, A)) \\<longrightarrow>\n              \\<not> FEval mo ntou A;\n        Suc (size form) = n; A = FEx form; contains f na (m, FEx form);\n        \\<forall>m'. \\<exists>n'. contains f n' (0, finst form m');\n        ma \\<in> fst mo;\n        \\<not> FEval mo (case_nat (ntou (uton ma)) ntou) form\\<rbrakk>\n       \\<Longrightarrow> \\<not> FEval mo (case_nat ma ntou) form", "apply(subgoal_tac \"ma \\<in> range ntou\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n A form m na ma.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<exists>m n. contains f n (m, A)) \\<longrightarrow>\n              \\<not> FEval mo ntou A;\n        Suc (size form) = n; A = FEx form; contains f na (m, FEx form);\n        \\<forall>m'. \\<exists>n'. contains f n' (0, finst form m');\n        ma \\<in> fst mo;\n        \\<not> FEval mo (case_nat (ntou (uton ma)) ntou) form;\n        ma \\<in> range ntou\\<rbrakk>\n       \\<Longrightarrow> \\<not> FEval mo (case_nat ma ntou) form\n 2. \\<And>n A form m na ma.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<exists>m n. contains f n (m, A)) \\<longrightarrow>\n              \\<not> FEval mo ntou A;\n        Suc (size form) = n; A = FEx form; contains f na (m, FEx form);\n        \\<forall>m'. \\<exists>n'. contains f n' (0, finst form m');\n        ma \\<in> fst mo;\n        \\<not> FEval mo (case_nat (ntou (uton ma)) ntou) form\\<rbrakk>\n       \\<Longrightarrow> ma \\<in> range ntou", "apply(frule_tac ntou_uton)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n A form m na ma.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<exists>m n. contains f n (m, A)) \\<longrightarrow>\n              \\<not> FEval mo ntou A;\n        Suc (size form) = n; A = FEx form; contains f na (m, FEx form);\n        \\<forall>m'. \\<exists>n'. contains f n' (0, finst form m');\n        ma \\<in> fst mo;\n        \\<not> FEval mo (case_nat (ntou (uton ma)) ntou) form;\n        ma \\<in> range ntou; ntou (uton ma) = ma\\<rbrakk>\n       \\<Longrightarrow> \\<not> FEval mo (case_nat ma ntou) form\n 2. \\<And>n A form m na ma.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<exists>m n. contains f n (m, A)) \\<longrightarrow>\n              \\<not> FEval mo ntou A;\n        Suc (size form) = n; A = FEx form; contains f na (m, FEx form);\n        \\<forall>m'. \\<exists>n'. contains f n' (0, finst form m');\n        ma \\<in> fst mo;\n        \\<not> FEval mo (case_nat (ntou (uton ma)) ntou) form\\<rbrakk>\n       \\<Longrightarrow> ma \\<in> range ntou", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n A form m na ma.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>m<n.\n           \\<forall>A.\n              size A = m \\<longrightarrow>\n              (\\<exists>m n. contains f n (m, A)) \\<longrightarrow>\n              \\<not> FEval mo ntou A;\n        Suc (size form) = n; A = FEx form; contains f na (m, FEx form);\n        \\<forall>m'. \\<exists>n'. contains f n' (0, finst form m');\n        ma \\<in> fst mo;\n        \\<not> FEval mo (case_nat (ntou (uton ma)) ntou) form\\<rbrakk>\n       \\<Longrightarrow> ma \\<in> range ntou", "apply(simp add: mo model_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in loc2) model: \"infinite (deriv s) ==> init s ==> (\\<forall>A m n. contains f n (m,A) --> ~ (FEval mo ntou A))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>infinite (deriv s); init s\\<rbrakk>\n    \\<Longrightarrow> \\<forall>A m n.\n                         contains f n (m, A) \\<longrightarrow>\n                         \\<not> FEval mo ntou A", "apply(rule)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>A.\n       \\<lbrakk>infinite (deriv s); init s\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A", "apply(frule_tac model')"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>A.\n       \\<lbrakk>infinite (deriv s); init s\\<rbrakk> \\<Longrightarrow> init s\n 2. \\<And>A.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>Aa.\n           size Aa = ?h2 A \\<longrightarrow>\n           (\\<forall>m n.\n               contains f n (m, Aa) \\<longrightarrow>\n               \\<not> FEval mo ntou Aa)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m n.\n                            contains f n (m, A) \\<longrightarrow>\n                            \\<not> FEval mo ntou A", "apply(auto)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsection \"Completeness\""], ["", "lemma (in loc2) completeness': \"infinite (deriv s) ==> init s ==> \\<forall>mA \\<in> set s. ~ FEval mo ntou (snd mA)\" \\<comment> \\<open>FIXME tidy deriv s so that s consists of formulae only?\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>infinite (deriv s); init s\\<rbrakk>\n    \\<Longrightarrow> \\<forall>mA\\<in>set s. \\<not> FEval mo ntou (snd mA)", "apply(frule_tac model)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>infinite (deriv s); init s\\<rbrakk> \\<Longrightarrow> init s\n 2. \\<lbrakk>infinite (deriv s); init s;\n     \\<forall>A m n.\n        contains f n (m, A) \\<longrightarrow>\n        \\<not> FEval mo ntou A\\<rbrakk>\n    \\<Longrightarrow> \\<forall>mA\\<in>set s. \\<not> FEval mo ntou (snd mA)", "apply(assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>infinite (deriv s); init s;\n     \\<forall>A m n.\n        contains f n (m, A) \\<longrightarrow>\n        \\<not> FEval mo ntou A\\<rbrakk>\n    \\<Longrightarrow> \\<forall>mA\\<in>set s. \\<not> FEval mo ntou (snd mA)", "apply(rule)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>mA.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>A m n.\n           contains f n (m, A) \\<longrightarrow> \\<not> FEval mo ntou A;\n        mA \\<in> set s\\<rbrakk>\n       \\<Longrightarrow> \\<not> FEval mo ntou (snd mA)", "apply(case_tac mA)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>mA a b.\n       \\<lbrakk>infinite (deriv s); init s;\n        \\<forall>A m n.\n           contains f n (m, A) \\<longrightarrow> \\<not> FEval mo ntou A;\n        mA \\<in> set s; mA = (a, b)\\<rbrakk>\n       \\<Longrightarrow> \\<not> FEval mo ntou (snd mA)", "apply(drule_tac x=\"b\" in spec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>mA a b.\n       \\<lbrakk>infinite (deriv s); init s; mA \\<in> set s; mA = (a, b);\n        \\<forall>m n.\n           contains f n (m, b) \\<longrightarrow>\n           \\<not> FEval mo ntou b\\<rbrakk>\n       \\<Longrightarrow> \\<not> FEval mo ntou (snd mA)", "apply(drule_tac x=\"0\" in spec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>mA a b.\n       \\<lbrakk>infinite (deriv s); init s; mA \\<in> set s; mA = (a, b);\n        \\<forall>n.\n           contains f n (0, b) \\<longrightarrow>\n           \\<not> FEval mo ntou b\\<rbrakk>\n       \\<Longrightarrow> \\<not> FEval mo ntou (snd mA)", "apply(drule_tac x=0 in spec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>mA a b.\n       \\<lbrakk>infinite (deriv s); init s; mA \\<in> set s; mA = (a, b);\n        contains f 0 (0, b) \\<longrightarrow>\n        \\<not> FEval mo ntou b\\<rbrakk>\n       \\<Longrightarrow> \\<not> FEval mo ntou (snd mA)", "apply(erule impE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>mA a b.\n       \\<lbrakk>infinite (deriv s); init s; mA \\<in> set s;\n        mA = (a, b)\\<rbrakk>\n       \\<Longrightarrow> contains f 0 (0, b)\n 2. \\<And>mA a b.\n       \\<lbrakk>infinite (deriv s); init s; mA \\<in> set s; mA = (a, b);\n        \\<not> FEval mo ntou b\\<rbrakk>\n       \\<Longrightarrow> \\<not> FEval mo ntou (snd mA)", "apply(simp add: contains_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>mA a b.\n       \\<lbrakk>infinite (deriv s); init s; (a, b) \\<in> set s;\n        mA = (a, b)\\<rbrakk>\n       \\<Longrightarrow> (0, b) \\<in> set (snd (f 0))\n 2. \\<And>mA a b.\n       \\<lbrakk>infinite (deriv s); init s; mA \\<in> set s; mA = (a, b);\n        \\<not> FEval mo ntou b\\<rbrakk>\n       \\<Longrightarrow> \\<not> FEval mo ntou (snd mA)", "apply(frule_tac is_path_f_0)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>mA a b.\n       \\<lbrakk>infinite (deriv s); init s; (a, b) \\<in> set s; mA = (a, b);\n        f 0 = (0, s)\\<rbrakk>\n       \\<Longrightarrow> (0, b) \\<in> set (snd (f 0))\n 2. \\<And>mA a b.\n       \\<lbrakk>infinite (deriv s); init s; mA \\<in> set s; mA = (a, b);\n        \\<not> FEval mo ntou b\\<rbrakk>\n       \\<Longrightarrow> \\<not> FEval mo ntou (snd mA)", "apply(simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>mA a b.\n       \\<lbrakk>infinite (deriv s); init s; (a, b) \\<in> set s; mA = (a, b);\n        f 0 = (0, s)\\<rbrakk>\n       \\<Longrightarrow> (0, b) \\<in> set s\n 2. \\<And>mA a b.\n       \\<lbrakk>infinite (deriv s); init s; mA \\<in> set s; mA = (a, b);\n        \\<not> FEval mo ntou b\\<rbrakk>\n       \\<Longrightarrow> \\<not> FEval mo ntou (snd mA)", "apply(subgoal_tac \"a=0\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>mA a b.\n       \\<lbrakk>infinite (deriv s); init s; (a, b) \\<in> set s; mA = (a, b);\n        f 0 = (0, s); a = 0\\<rbrakk>\n       \\<Longrightarrow> (0, b) \\<in> set s\n 2. \\<And>mA a b.\n       \\<lbrakk>infinite (deriv s); init s; (a, b) \\<in> set s; mA = (a, b);\n        f 0 = (0, s)\\<rbrakk>\n       \\<Longrightarrow> a = 0\n 3. \\<And>mA a b.\n       \\<lbrakk>infinite (deriv s); init s; mA \\<in> set s; mA = (a, b);\n        \\<not> FEval mo ntou b\\<rbrakk>\n       \\<Longrightarrow> \\<not> FEval mo ntou (snd mA)", "prefer 2"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>mA a b.\n       \\<lbrakk>infinite (deriv s); init s; (a, b) \\<in> set s; mA = (a, b);\n        f 0 = (0, s)\\<rbrakk>\n       \\<Longrightarrow> a = 0\n 2. \\<And>mA a b.\n       \\<lbrakk>infinite (deriv s); init s; (a, b) \\<in> set s; mA = (a, b);\n        f 0 = (0, s); a = 0\\<rbrakk>\n       \\<Longrightarrow> (0, b) \\<in> set s\n 3. \\<And>mA a b.\n       \\<lbrakk>infinite (deriv s); init s; mA \\<in> set s; mA = (a, b);\n        \\<not> FEval mo ntou b\\<rbrakk>\n       \\<Longrightarrow> \\<not> FEval mo ntou (snd mA)", "apply(simp only: init_def, force)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>mA a b.\n       \\<lbrakk>infinite (deriv s); init s; (a, b) \\<in> set s; mA = (a, b);\n        f 0 = (0, s); a = 0\\<rbrakk>\n       \\<Longrightarrow> (0, b) \\<in> set s\n 2. \\<And>mA a b.\n       \\<lbrakk>infinite (deriv s); init s; mA \\<in> set s; mA = (a, b);\n        \\<not> FEval mo ntou b\\<rbrakk>\n       \\<Longrightarrow> \\<not> FEval mo ntou (snd mA)", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done \\<comment> \\<open>FIXME very ugly\\<close>"], ["", "thm loc2.completeness'[simplified loc2_def loc2_axioms_def loc1_def]"], ["", "lemma completeness': \"infinite (deriv s) ==> init s ==> \\<forall>mA \\<in> set s. ~ FEval (model s) ntou (snd mA)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>infinite (deriv s); init s\\<rbrakk>\n    \\<Longrightarrow> \\<forall>mA\\<in>set s.\n                         \\<not> FEval (model s) ntou (snd mA)", "apply(rule loc2.completeness'[simplified loc2_def loc2_axioms_def loc1_def])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>infinite (deriv s); init s\\<rbrakk>\n    \\<Longrightarrow> ?f = failing_path (deriv s) \\<and> model s = model s\n 2. \\<lbrakk>infinite (deriv s); init s\\<rbrakk>\n    \\<Longrightarrow> infinite (deriv s)\n 3. \\<lbrakk>infinite (deriv s); init s\\<rbrakk> \\<Longrightarrow> init s", "apply(auto)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma completeness'': \"infinite (deriv (ns_of_s s)) ==> init (ns_of_s s) ==> \\<forall>A. A \\<in> set s --> ~ FEval (model (ns_of_s s)) ntou A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>infinite (deriv (ns_of_s s)); init (ns_of_s s)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>A.\n                         A \\<in> set s \\<longrightarrow>\n                         \\<not> FEval (model (ns_of_s s)) ntou A", "apply(frule_tac completeness')"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>infinite (deriv (ns_of_s s)); init (ns_of_s s)\\<rbrakk>\n    \\<Longrightarrow> init (ns_of_s s)\n 2. \\<lbrakk>infinite (deriv (ns_of_s s)); init (ns_of_s s);\n     \\<forall>mA\\<in>set (ns_of_s s).\n        \\<not> FEval (model (ns_of_s s)) ntou (snd mA)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>A.\n                         A \\<in> set s \\<longrightarrow>\n                         \\<not> FEval (model (ns_of_s s)) ntou A", "apply(assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>infinite (deriv (ns_of_s s)); init (ns_of_s s);\n     \\<forall>mA\\<in>set (ns_of_s s).\n        \\<not> FEval (model (ns_of_s s)) ntou (snd mA)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>A.\n                         A \\<in> set s \\<longrightarrow>\n                         \\<not> FEval (model (ns_of_s s)) ntou A", "apply(simp add: ns_of_s_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma completeness: \"infinite (deriv (ns_of_s s)) ==> ~ Svalid s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. infinite (deriv (ns_of_s s)) \\<Longrightarrow> \\<not> Svalid s", "apply(subgoal_tac \"init (ns_of_s s)\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>infinite (deriv (ns_of_s s)); init (ns_of_s s)\\<rbrakk>\n    \\<Longrightarrow> \\<not> Svalid s\n 2. infinite (deriv (ns_of_s s)) \\<Longrightarrow> init (ns_of_s s)", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. infinite (deriv (ns_of_s s)) \\<Longrightarrow> init (ns_of_s s)\n 2. \\<lbrakk>infinite (deriv (ns_of_s s)); init (ns_of_s s)\\<rbrakk>\n    \\<Longrightarrow> \\<not> Svalid s", "apply(simp add: init_def ns_of_s_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>infinite (deriv (ns_of_s s)); init (ns_of_s s)\\<rbrakk>\n    \\<Longrightarrow> \\<not> Svalid s", "apply(frule_tac completeness'')"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>infinite (deriv (ns_of_s s)); init (ns_of_s s)\\<rbrakk>\n    \\<Longrightarrow> init (ns_of_s s)\n 2. \\<lbrakk>infinite (deriv (ns_of_s s)); init (ns_of_s s);\n     \\<forall>A.\n        A \\<in> set s \\<longrightarrow>\n        \\<not> FEval (model (ns_of_s s)) ntou A\\<rbrakk>\n    \\<Longrightarrow> \\<not> Svalid s", "apply(assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>infinite (deriv (ns_of_s s)); init (ns_of_s s);\n     \\<forall>A.\n        A \\<in> set s \\<longrightarrow>\n        \\<not> FEval (model (ns_of_s s)) ntou A\\<rbrakk>\n    \\<Longrightarrow> \\<not> Svalid s", "apply(simp add: Svalid_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>infinite (deriv (ns_of_s s)); init (ns_of_s s);\n     \\<forall>A.\n        A \\<in> set s \\<longrightarrow>\n        \\<not> FEval (model (ns_of_s s)) ntou A\\<rbrakk>\n    \\<Longrightarrow> \\<exists>a b e.\n                         is_env (a, b) e \\<and> \\<not> SEval (a, b) e s", "apply(simp add: SEval_def2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>infinite (deriv (ns_of_s s)); init (ns_of_s s);\n     \\<forall>A.\n        A \\<in> set s \\<longrightarrow>\n        \\<not> FEval (model (ns_of_s s)) ntou A\\<rbrakk>\n    \\<Longrightarrow> \\<exists>a b e.\n                         is_env (a, b) e \\<and>\n                         (\\<forall>f.\n                             f \\<in> set s \\<longrightarrow>\n                             \\<not> FEval (a, b) e f)", "apply(rule_tac x=\"fst (model (ns_of_s s))\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>infinite (deriv (ns_of_s s)); init (ns_of_s s);\n     \\<forall>A.\n        A \\<in> set s \\<longrightarrow>\n        \\<not> FEval (model (ns_of_s s)) ntou A\\<rbrakk>\n    \\<Longrightarrow> \\<exists>b e.\n                         is_env (fst (model (ns_of_s s)), b) e \\<and>\n                         (\\<forall>f.\n                             f \\<in> set s \\<longrightarrow>\n                             \\<not> FEval (fst (model (ns_of_s s)), b) e f)", "apply(rule_tac x=\"snd (model (ns_of_s s))\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>infinite (deriv (ns_of_s s)); init (ns_of_s s);\n     \\<forall>A.\n        A \\<in> set s \\<longrightarrow>\n        \\<not> FEval (model (ns_of_s s)) ntou A\\<rbrakk>\n    \\<Longrightarrow> \\<exists>e.\n                         is_env\n                          (fst (model (ns_of_s s)), snd (model (ns_of_s s)))\n                          e \\<and>\n                         (\\<forall>f.\n                             f \\<in> set s \\<longrightarrow>\n                             \\<not> FEval\n                                     (fst (model (ns_of_s s)),\nsnd (model (ns_of_s s)))\n                                     e f)", "apply(rule_tac x=\"ntou\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>infinite (deriv (ns_of_s s)); init (ns_of_s s);\n     \\<forall>A.\n        A \\<in> set s \\<longrightarrow>\n        \\<not> FEval (model (ns_of_s s)) ntou A\\<rbrakk>\n    \\<Longrightarrow> is_env\n                       (fst (model (ns_of_s s)), snd (model (ns_of_s s)))\n                       ntou \\<and>\n                      (\\<forall>f.\n                          f \\<in> set s \\<longrightarrow>\n                          \\<not> FEval\n                                  (fst (model (ns_of_s s)),\n                                   snd (model (ns_of_s s)))\n                                  ntou f)", "apply(simp add: model_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>infinite (deriv (ns_of_s s)); init (ns_of_s s);\n     \\<forall>A.\n        A \\<in> set s \\<longrightarrow>\n        \\<not> FEval\n                (range ntou,\n                 \\<lambda>p ms.\n                    \\<forall>n m.\n                       \\<not> contains (failing_path (deriv (ns_of_s s))) n\n                               (m, PAtom p (map uton ms)))\n                ntou A\\<rbrakk>\n    \\<Longrightarrow> is_env\n                       (range ntou,\n                        \\<lambda>p ms.\n                           \\<forall>n m.\n                              \\<not> contains\n(failing_path (deriv (ns_of_s s))) n (m, PAtom p (map uton ms)))\n                       ntou", "apply(simp add: is_env_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done\n\\<comment> \\<open>FIXME silly splitting of quantified pairs\\<close>"], ["", "subsection \"Sound and Complete\""], ["", "lemma \"Svalid s = finite (deriv (ns_of_s s))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Svalid s = finite (deriv (ns_of_s s))", "using soundness completeness"], ["proof (prove)\nusing this:\n  finite (deriv (ns_of_s ?s)) \\<Longrightarrow> Svalid ?s\n  infinite (deriv (ns_of_s ?s)) \\<Longrightarrow> \\<not> Svalid ?s\n\ngoal (1 subgoal):\n 1. Svalid s = finite (deriv (ns_of_s s))", "by blast"], ["", "subsection \"Algorithm\""], ["", "primrec iter :: \"('a => 'a) => 'a => nat => 'a\" \\<comment> \\<open>fold for nats\\<close>\nwhere\n  \"iter g a 0 = a\"\n| \"iter g a (Suc n) = g (iter g a n)\""], ["", "lemma iter: \"\\<forall>a. (iter g (g a) n) = (g (iter g a n))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>a. iter g (g a) n = g (iter g a n)", "apply(induct n)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<forall>a. iter g (g a) 0 = g (iter g a 0)\n 2. \\<And>n.\n       \\<forall>a. iter g (g a) n = g (iter g a n) \\<Longrightarrow>\n       \\<forall>a. iter g (g a) (Suc n) = g (iter g a (Suc n))", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<forall>a. iter g (g a) n = g (iter g a n) \\<Longrightarrow>\n       \\<forall>a. iter g (g a) (Suc n) = g (iter g a (Suc n))", "apply(simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma ex_iter': \"(\\<exists>n. R (iter g a n)) = (R a | (\\<exists>n. R (iter g (g a) n)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>n. R (iter g a n)) =\n    (R a \\<or> (\\<exists>n. R (iter g (g a) n)))", "apply(rule)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<exists>n. R (iter g a n) \\<Longrightarrow>\n    R a \\<or> (\\<exists>n. R (iter g (g a) n))\n 2. R a \\<or> (\\<exists>n. R (iter g (g a) n)) \\<Longrightarrow>\n    \\<exists>n. R (iter g a n)", "apply(erule exE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n.\n       R (iter g a n) \\<Longrightarrow>\n       R a \\<or> (\\<exists>n. R (iter g (g a) n))\n 2. R a \\<or> (\\<exists>n. R (iter g (g a) n)) \\<Longrightarrow>\n    \\<exists>n. R (iter g a n)", "apply(case_tac n)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>R (iter g a n); n = 0\\<rbrakk>\n       \\<Longrightarrow> R a \\<or> (\\<exists>n. R (iter g (g a) n))\n 2. \\<And>n nat.\n       \\<lbrakk>R (iter g a n); n = Suc nat\\<rbrakk>\n       \\<Longrightarrow> R a \\<or> (\\<exists>n. R (iter g (g a) n))\n 3. R a \\<or> (\\<exists>n. R (iter g (g a) n)) \\<Longrightarrow>\n    \\<exists>n. R (iter g a n)", "apply(simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n nat.\n       \\<lbrakk>R (iter g a n); n = Suc nat\\<rbrakk>\n       \\<Longrightarrow> R a \\<or> (\\<exists>n. R (iter g (g a) n))\n 2. R a \\<or> (\\<exists>n. R (iter g (g a) n)) \\<Longrightarrow>\n    \\<exists>n. R (iter g a n)", "apply(rule disjI2)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n nat.\n       \\<lbrakk>R (iter g a n); n = Suc nat\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n. R (iter g (g a) n)\n 2. R a \\<or> (\\<exists>n. R (iter g (g a) n)) \\<Longrightarrow>\n    \\<exists>n. R (iter g a n)", "apply(rule_tac x=nat in exI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n nat.\n       \\<lbrakk>R (iter g a n); n = Suc nat\\<rbrakk>\n       \\<Longrightarrow> R (iter g (g a) nat)\n 2. R a \\<or> (\\<exists>n. R (iter g (g a) n)) \\<Longrightarrow>\n    \\<exists>n. R (iter g a n)", "apply(simp add: iter)"], ["proof (prove)\ngoal (1 subgoal):\n 1. R a \\<or> (\\<exists>n. R (iter g (g a) n)) \\<Longrightarrow>\n    \\<exists>n. R (iter g a n)", "apply(erule disjE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. R a \\<Longrightarrow> \\<exists>n. R (iter g a n)\n 2. \\<exists>n. R (iter g (g a) n) \\<Longrightarrow>\n    \\<exists>n. R (iter g a n)", "apply(rule_tac x=0 in exI, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>n. R (iter g (g a) n) \\<Longrightarrow>\n    \\<exists>n. R (iter g a n)", "apply(erule exE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n. R (iter g (g a) n) \\<Longrightarrow> \\<exists>n. R (iter g a n)", "apply(rule_tac x=\"Suc n\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n. R (iter g (g a) n) \\<Longrightarrow> R (iter g a (Suc n))", "apply(simp add: iter)"], ["proof (prove)\ngoal:\nNo subgoals!", "done\n\n    \\<comment> \\<open>version suitable for computation\\<close>"], ["", "lemma ex_iter: \"(\\<exists>n. R (iter g a n)) = (if R a then True else (\\<exists>n. R (iter g (g a) n)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>n. R (iter g a n)) =\n    (if R a then True else \\<exists>n. R (iter g (g a) n))", "apply (rule trans)"], ["proof (prove)\ngoal (2 subgoals):\n 1. (\\<exists>n. R (iter g a n)) = ?s\n 2. ?s = (if R a then True else \\<exists>n. R (iter g (g a) n))", "apply (rule ex_iter')"], ["proof (prove)\ngoal (1 subgoal):\n 1. (R a \\<or> (\\<exists>n. R (iter g (g a) n))) =\n    (if R a then True else \\<exists>n. R (iter g (g a) n))", "apply (force )"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "definition\n  f :: \"nseq list => nat => nseq list\" where\n  \"f s n = iter (% x. flatten (map subs x)) s n\""], ["", "lemma f_upwards: \"f s n = [] ==> f s (n+m) = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f s n = [] \\<Longrightarrow> f s (n + m) = []", "apply(induct_tac m)"], ["proof (prove)\ngoal (2 subgoals):\n 1. f s n = [] \\<Longrightarrow> f s (n + 0) = []\n 2. \\<And>na.\n       \\<lbrakk>f s n = []; f s (n + na) = []\\<rbrakk>\n       \\<Longrightarrow> f s (n + Suc na) = []", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>na.\n       \\<lbrakk>f s n = []; f s (n + na) = []\\<rbrakk>\n       \\<Longrightarrow> f s (n + Suc na) = []", "apply(simp add: f_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma flatten_append: \"flatten (xs@ys) = ((flatten xs) @ (flatten ys))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. flatten (xs @ ys) = flatten xs @ flatten ys", "apply(induct xs)"], ["proof (prove)\ngoal (2 subgoals):\n 1. flatten ([] @ ys) = flatten [] @ flatten ys\n 2. \\<And>a xs.\n       flatten (xs @ ys) = flatten xs @ flatten ys \\<Longrightarrow>\n       flatten ((a # xs) @ ys) = flatten (a # xs) @ flatten ys", "by auto"], ["", "lemma set_flatten: \"set (flatten xs) = Union (set ` set xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (flatten xs) = \\<Union> (set ` set xs)", "apply(induct xs)"], ["proof (prove)\ngoal (2 subgoals):\n 1. set (flatten []) = \\<Union> (set ` set [])\n 2. \\<And>a xs.\n       set (flatten xs) = \\<Union> (set ` set xs) \\<Longrightarrow>\n       set (flatten (a # xs)) = \\<Union> (set ` set (a # xs))", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a xs.\n       set (flatten xs) = \\<Union> (set ` set xs) \\<Longrightarrow>\n       set (flatten (a # xs)) = \\<Union> (set ` set (a # xs))", "apply(simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma f: \"\\<forall>x. ((n,x) \\<in> deriv s) = (x \\<in> set (f [s] n))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x. ((n, x) \\<in> deriv s) = (x \\<in> set (f [s] n))", "apply(induct n)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<forall>x. ((0, x) \\<in> deriv s) = (x \\<in> set (f [s] 0))\n 2. \\<And>n.\n       \\<forall>x.\n          ((n, x) \\<in> deriv s) = (x \\<in> set (f [s] n)) \\<Longrightarrow>\n       \\<forall>x.\n          ((Suc n, x) \\<in> deriv s) = (x \\<in> set (f [s] (Suc n)))", "apply(simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<forall>x. (x = s) = (x \\<in> set (f [s] 0))\n 2. \\<And>n.\n       \\<forall>x.\n          ((n, x) \\<in> deriv s) = (x \\<in> set (f [s] n)) \\<Longrightarrow>\n       \\<forall>x.\n          ((Suc n, x) \\<in> deriv s) = (x \\<in> set (f [s] (Suc n)))", "apply(simp add: f_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<forall>x.\n          ((n, x) \\<in> deriv s) = (x \\<in> set (f [s] n)) \\<Longrightarrow>\n       \\<forall>x.\n          ((Suc n, x) \\<in> deriv s) = (x \\<in> set (f [s] (Suc n)))", "apply(rule)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n x.\n       \\<forall>x.\n          ((n, x) \\<in> deriv s) = (x \\<in> set (f [s] n)) \\<Longrightarrow>\n       ((Suc n, x) \\<in> deriv s) = (x \\<in> set (f [s] (Suc n)))", "apply(rule)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n x.\n       \\<lbrakk>\\<forall>x.\n                   ((n, x) \\<in> deriv s) = (x \\<in> set (f [s] n));\n        (Suc n, x) \\<in> deriv s\\<rbrakk>\n       \\<Longrightarrow> x \\<in> set (f [s] (Suc n))\n 2. \\<And>n x.\n       \\<lbrakk>\\<forall>x.\n                   ((n, x) \\<in> deriv s) = (x \\<in> set (f [s] n));\n        x \\<in> set (f [s] (Suc n))\\<rbrakk>\n       \\<Longrightarrow> (Suc n, x) \\<in> deriv s", "apply(drule_tac deriv_downwards)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n x.\n       \\<lbrakk>\\<forall>x.\n                   ((n, x) \\<in> deriv s) = (x \\<in> set (f [s] n));\n        \\<exists>y.\n           (n, y) \\<in> deriv s \\<and>\n           x \\<in> set (subs y) \\<and> \\<not> is_axiom (s_of_ns y)\\<rbrakk>\n       \\<Longrightarrow> x \\<in> set (f [s] (Suc n))\n 2. \\<And>n x.\n       \\<lbrakk>\\<forall>x.\n                   ((n, x) \\<in> deriv s) = (x \\<in> set (f [s] n));\n        x \\<in> set (f [s] (Suc n))\\<rbrakk>\n       \\<Longrightarrow> (Suc n, x) \\<in> deriv s", "apply(elim exE conjE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n x y.\n       \\<lbrakk>\\<forall>x.\n                   ((n, x) \\<in> deriv s) = (x \\<in> set (f [s] n));\n        (n, y) \\<in> deriv s; x \\<in> set (subs y);\n        \\<not> is_axiom (s_of_ns y)\\<rbrakk>\n       \\<Longrightarrow> x \\<in> set (f [s] (Suc n))\n 2. \\<And>n x.\n       \\<lbrakk>\\<forall>x.\n                   ((n, x) \\<in> deriv s) = (x \\<in> set (f [s] n));\n        x \\<in> set (f [s] (Suc n))\\<rbrakk>\n       \\<Longrightarrow> (Suc n, x) \\<in> deriv s", "apply(drule_tac x=y in spec)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n x y.\n       \\<lbrakk>(n, y) \\<in> deriv s; x \\<in> set (subs y);\n        \\<not> is_axiom (s_of_ns y);\n        ((n, y) \\<in> deriv s) = (y \\<in> set (f [s] n))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> set (f [s] (Suc n))\n 2. \\<And>n x.\n       \\<lbrakk>\\<forall>x.\n                   ((n, x) \\<in> deriv s) = (x \\<in> set (f [s] n));\n        x \\<in> set (f [s] (Suc n))\\<rbrakk>\n       \\<Longrightarrow> (Suc n, x) \\<in> deriv s", "apply(simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n x y.\n       \\<lbrakk>y \\<in> set (f [s] n); x \\<in> set (subs y);\n        \\<not> is_axiom (s_of_ns y); (n, y) \\<in> deriv s\\<rbrakk>\n       \\<Longrightarrow> x \\<in> set (f [s] (Suc n))\n 2. \\<And>n x.\n       \\<lbrakk>\\<forall>x.\n                   ((n, x) \\<in> deriv s) = (x \\<in> set (f [s] n));\n        x \\<in> set (f [s] (Suc n))\\<rbrakk>\n       \\<Longrightarrow> (Suc n, x) \\<in> deriv s", "apply(drule_tac list_decomp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n x y.\n       \\<lbrakk>x \\<in> set (subs y); \\<not> is_axiom (s_of_ns y);\n        (n, y) \\<in> deriv s;\n        \\<exists>xs ys.\n           f [s] n = xs @ y # ys \\<and> y \\<notin> set xs\\<rbrakk>\n       \\<Longrightarrow> x \\<in> set (f [s] (Suc n))\n 2. \\<And>n x.\n       \\<lbrakk>\\<forall>x.\n                   ((n, x) \\<in> deriv s) = (x \\<in> set (f [s] n));\n        x \\<in> set (f [s] (Suc n))\\<rbrakk>\n       \\<Longrightarrow> (Suc n, x) \\<in> deriv s", "apply(elim exE conjE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n x y xs ys.\n       \\<lbrakk>x \\<in> set (subs y); \\<not> is_axiom (s_of_ns y);\n        (n, y) \\<in> deriv s; f [s] n = xs @ y # ys;\n        y \\<notin> set xs\\<rbrakk>\n       \\<Longrightarrow> x \\<in> set (f [s] (Suc n))\n 2. \\<And>n x.\n       \\<lbrakk>\\<forall>x.\n                   ((n, x) \\<in> deriv s) = (x \\<in> set (f [s] n));\n        x \\<in> set (f [s] (Suc n))\\<rbrakk>\n       \\<Longrightarrow> (Suc n, x) \\<in> deriv s", "apply(simp add: flatten_append f_def Let_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n x.\n       \\<lbrakk>\\<forall>x.\n                   ((n, x) \\<in> deriv s) = (x \\<in> set (f [s] n));\n        x \\<in> set (f [s] (Suc n))\\<rbrakk>\n       \\<Longrightarrow> (Suc n, x) \\<in> deriv s", "apply(simp add: f_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n x.\n       \\<lbrakk>\\<forall>x.\n                   ((n, x) \\<in> deriv s) =\n                   (x \\<in> set (iter (\\<lambda>x. flatten (map subs x)) [s]\n                                  n));\n        x \\<in> set (flatten\n                      (map subs\n                        (iter (\\<lambda>x. flatten (map subs x)) [s]\n                          n)))\\<rbrakk>\n       \\<Longrightarrow> (Suc n, x) \\<in> deriv s", "apply(simp add: set_flatten)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n x.\n       \\<lbrakk>\\<forall>x.\n                   ((n, x) \\<in> deriv s) =\n                   (x \\<in> set (iter (\\<lambda>x. flatten (map subs x)) [s]\n                                  n));\n        \\<exists>xa\\<in>set (iter (\\<lambda>x. flatten (map subs x)) [s] n).\n           x \\<in> set (subs xa)\\<rbrakk>\n       \\<Longrightarrow> (Suc n, x) \\<in> deriv s", "apply(erule bexE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n x xa.\n       \\<lbrakk>\\<forall>x.\n                   ((n, x) \\<in> deriv s) =\n                   (x \\<in> set (iter (\\<lambda>x. flatten (map subs x)) [s]\n                                  n));\n        xa \\<in> set (iter (\\<lambda>x. flatten (map subs x)) [s] n);\n        x \\<in> set (subs xa)\\<rbrakk>\n       \\<Longrightarrow> (Suc n, x) \\<in> deriv s", "apply(drule_tac x=xa in spec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n x xa.\n       \\<lbrakk>xa \\<in> set (iter (\\<lambda>x. flatten (map subs x)) [s]\n                               n);\n        x \\<in> set (subs xa);\n        ((n, xa) \\<in> deriv s) =\n        (xa \\<in> set (iter (\\<lambda>x. flatten (map subs x)) [s]\n                        n))\\<rbrakk>\n       \\<Longrightarrow> (Suc n, x) \\<in> deriv s", "apply(rule step)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n x xa.\n       \\<lbrakk>xa \\<in> set (iter (\\<lambda>x. flatten (map subs x)) [s]\n                               n);\n        x \\<in> set (subs xa);\n        ((n, xa) \\<in> deriv s) =\n        (xa \\<in> set (iter (\\<lambda>x. flatten (map subs x)) [s]\n                        n))\\<rbrakk>\n       \\<Longrightarrow> (n, ?x21 n x xa) \\<in> deriv s\n 2. \\<And>n x xa.\n       \\<lbrakk>xa \\<in> set (iter (\\<lambda>x. flatten (map subs x)) [s]\n                               n);\n        x \\<in> set (subs xa);\n        ((n, xa) \\<in> deriv s) =\n        (xa \\<in> set (iter (\\<lambda>x. flatten (map subs x)) [s]\n                        n))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> set (subs (?x21 n x xa))", "apply(auto)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma deriv_f: \"deriv s = (\\<Union>x. set (map (Pair x) (f [s] x)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. deriv s = (\\<Union>x. set (map (Pair x) (f [s] x)))", "using f"], ["proof (prove)\nusing this:\n  \\<forall>x. ((?n, x) \\<in> deriv ?s) = (x \\<in> set (f [?s] ?n))\n\ngoal (1 subgoal):\n 1. deriv s = (\\<Union>x. set (map (Pair x) (f [s] x)))", "by (auto simp add: set_eq_iff)"], ["", "lemma finite_f: \"finite (set (f s x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (set (f s x))", "by (fact finite_set)"], ["", "lemma finite_deriv: \"finite (deriv s) = (\\<exists>m. f [s] m = [])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (deriv s) = (\\<exists>m. f [s] m = [])", "apply(rule)"], ["proof (prove)\ngoal (2 subgoals):\n 1. finite (deriv s) \\<Longrightarrow> \\<exists>m. f [s] m = []\n 2. \\<exists>m. f [s] m = [] \\<Longrightarrow> finite (deriv s)", "apply(subgoal_tac \"finite (fst ` (deriv s))\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>finite (deriv s); finite (fst ` deriv s)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>m. f [s] m = []\n 2. finite (deriv s) \\<Longrightarrow> finite (fst ` deriv s)\n 3. \\<exists>m. f [s] m = [] \\<Longrightarrow> finite (deriv s)", "prefer 2"], ["proof (prove)\ngoal (3 subgoals):\n 1. finite (deriv s) \\<Longrightarrow> finite (fst ` deriv s)\n 2. \\<lbrakk>finite (deriv s); finite (fst ` deriv s)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>m. f [s] m = []\n 3. \\<exists>m. f [s] m = [] \\<Longrightarrow> finite (deriv s)", "apply(simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite (deriv s); finite (fst ` deriv s)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>m. f [s] m = []\n 2. \\<exists>m. f [s] m = [] \\<Longrightarrow> finite (deriv s)", "apply(frule_tac max_exists)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite (deriv s); finite (fst ` deriv s);\n     fst ` deriv s \\<noteq> {} \\<longrightarrow>\n     (\\<exists>x.\n         x \\<in> fst ` deriv s \\<and>\n         (\\<forall>y.\n             y \\<in> fst ` deriv s \\<longrightarrow> y \\<le> x))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>m. f [s] m = []\n 2. \\<exists>m. f [s] m = [] \\<Longrightarrow> finite (deriv s)", "apply(erule impE)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>finite (deriv s); finite (fst ` deriv s)\\<rbrakk>\n    \\<Longrightarrow> fst ` deriv s \\<noteq> {}\n 2. \\<lbrakk>finite (deriv s); finite (fst ` deriv s);\n     \\<exists>x.\n        x \\<in> fst ` deriv s \\<and>\n        (\\<forall>y.\n            y \\<in> fst ` deriv s \\<longrightarrow> y \\<le> x)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>m. f [s] m = []\n 3. \\<exists>m. f [s] m = [] \\<Longrightarrow> finite (deriv s)", "apply(simp)"], ["proof (prove)\ngoal (3 subgoals):\n 1. finite (deriv s) \\<Longrightarrow> deriv s \\<noteq> {}\n 2. \\<lbrakk>finite (deriv s); finite (fst ` deriv s);\n     \\<exists>x.\n        x \\<in> fst ` deriv s \\<and>\n        (\\<forall>y.\n            y \\<in> fst ` deriv s \\<longrightarrow> y \\<le> x)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>m. f [s] m = []\n 3. \\<exists>m. f [s] m = [] \\<Longrightarrow> finite (deriv s)", "apply(subgoal_tac \"(0,s) \\<in> deriv s\")"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>finite (deriv s); (0, s) \\<in> deriv s\\<rbrakk>\n    \\<Longrightarrow> deriv s \\<noteq> {}\n 2. finite (deriv s) \\<Longrightarrow> (0, s) \\<in> deriv s\n 3. \\<lbrakk>finite (deriv s); finite (fst ` deriv s);\n     \\<exists>x.\n        x \\<in> fst ` deriv s \\<and>\n        (\\<forall>y.\n            y \\<in> fst ` deriv s \\<longrightarrow> y \\<le> x)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>m. f [s] m = []\n 4. \\<exists>m. f [s] m = [] \\<Longrightarrow> finite (deriv s)", "apply(force)"], ["proof (prove)\ngoal (3 subgoals):\n 1. finite (deriv s) \\<Longrightarrow> (0, s) \\<in> deriv s\n 2. \\<lbrakk>finite (deriv s); finite (fst ` deriv s);\n     \\<exists>x.\n        x \\<in> fst ` deriv s \\<and>\n        (\\<forall>y.\n            y \\<in> fst ` deriv s \\<longrightarrow> y \\<le> x)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>m. f [s] m = []\n 3. \\<exists>m. f [s] m = [] \\<Longrightarrow> finite (deriv s)", "apply(simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite (deriv s); finite (fst ` deriv s);\n     \\<exists>x.\n        x \\<in> fst ` deriv s \\<and>\n        (\\<forall>y.\n            y \\<in> fst ` deriv s \\<longrightarrow> y \\<le> x)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>m. f [s] m = []\n 2. \\<exists>m. f [s] m = [] \\<Longrightarrow> finite (deriv s)", "apply(elim exE conjE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>finite (deriv s); finite (fst ` deriv s);\n        x \\<in> fst ` deriv s;\n        \\<forall>y.\n           y \\<in> fst ` deriv s \\<longrightarrow> y \\<le> x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m. f [s] m = []\n 2. \\<exists>m. f [s] m = [] \\<Longrightarrow> finite (deriv s)", "apply(rule_tac x=\"Suc x\" in exI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>finite (deriv s); finite (fst ` deriv s);\n        x \\<in> fst ` deriv s;\n        \\<forall>y.\n           y \\<in> fst ` deriv s \\<longrightarrow> y \\<le> x\\<rbrakk>\n       \\<Longrightarrow> f [s] (Suc x) = []\n 2. \\<exists>m. f [s] m = [] \\<Longrightarrow> finite (deriv s)", "apply(simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>finite (deriv s); x \\<in> fst ` deriv s;\n        \\<forall>y.\n           y \\<in> fst ` deriv s \\<longrightarrow> y \\<le> x\\<rbrakk>\n       \\<Longrightarrow> f [s] (Suc x) = []\n 2. \\<exists>m. f [s] m = [] \\<Longrightarrow> finite (deriv s)", "apply(rule ccontr)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>finite (deriv s); x \\<in> fst ` deriv s;\n        \\<forall>y. y \\<in> fst ` deriv s \\<longrightarrow> y \\<le> x;\n        f [s] (Suc x) \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<exists>m. f [s] m = [] \\<Longrightarrow> finite (deriv s)", "apply(case_tac \"f [s] (Suc x)\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>finite (deriv s); x \\<in> fst ` deriv s;\n        \\<forall>y. y \\<in> fst ` deriv s \\<longrightarrow> y \\<le> x;\n        f [s] (Suc x) \\<noteq> []; f [s] (Suc x) = []\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>x a list.\n       \\<lbrakk>finite (deriv s); x \\<in> fst ` deriv s;\n        \\<forall>y. y \\<in> fst ` deriv s \\<longrightarrow> y \\<le> x;\n        f [s] (Suc x) \\<noteq> []; f [s] (Suc x) = a # list\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<exists>m. f [s] m = [] \\<Longrightarrow> finite (deriv s)", "apply(simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x a list.\n       \\<lbrakk>finite (deriv s); x \\<in> fst ` deriv s;\n        \\<forall>y. y \\<in> fst ` deriv s \\<longrightarrow> y \\<le> x;\n        f [s] (Suc x) \\<noteq> []; f [s] (Suc x) = a # list\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<exists>m. f [s] m = [] \\<Longrightarrow> finite (deriv s)", "apply(subgoal_tac \"(Suc x, a) \\<in> deriv s\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x a list.\n       \\<lbrakk>finite (deriv s); x \\<in> fst ` deriv s;\n        \\<forall>y. y \\<in> fst ` deriv s \\<longrightarrow> y \\<le> x;\n        f [s] (Suc x) \\<noteq> []; f [s] (Suc x) = a # list;\n        (Suc x, a) \\<in> deriv s\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>x a list.\n       \\<lbrakk>finite (deriv s); x \\<in> fst ` deriv s;\n        \\<forall>y. y \\<in> fst ` deriv s \\<longrightarrow> y \\<le> x;\n        f [s] (Suc x) \\<noteq> []; f [s] (Suc x) = a # list\\<rbrakk>\n       \\<Longrightarrow> (Suc x, a) \\<in> deriv s\n 3. \\<exists>m. f [s] m = [] \\<Longrightarrow> finite (deriv s)", "apply(force)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x a list.\n       \\<lbrakk>finite (deriv s); x \\<in> fst ` deriv s;\n        \\<forall>y. y \\<in> fst ` deriv s \\<longrightarrow> y \\<le> x;\n        f [s] (Suc x) \\<noteq> []; f [s] (Suc x) = a # list\\<rbrakk>\n       \\<Longrightarrow> (Suc x, a) \\<in> deriv s\n 2. \\<exists>m. f [s] m = [] \\<Longrightarrow> finite (deriv s)", "apply(simp add: f)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>m. f [s] m = [] \\<Longrightarrow> finite (deriv s)", "apply(erule exE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>m. f [s] m = [] \\<Longrightarrow> finite (deriv s)", "apply(subgoal_tac \"\\<forall>y. f [s] (m+y) = []\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>m.\n       \\<lbrakk>f [s] m = []; \\<forall>y. f [s] (m + y) = []\\<rbrakk>\n       \\<Longrightarrow> finite (deriv s)\n 2. \\<And>m. f [s] m = [] \\<Longrightarrow> \\<forall>y. f [s] (m + y) = []", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>m. f [s] m = [] \\<Longrightarrow> \\<forall>y. f [s] (m + y) = []\n 2. \\<And>m.\n       \\<lbrakk>f [s] m = []; \\<forall>y. f [s] (m + y) = []\\<rbrakk>\n       \\<Longrightarrow> finite (deriv s)", "apply(rule)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>m y. f [s] m = [] \\<Longrightarrow> f [s] (m + y) = []\n 2. \\<And>m.\n       \\<lbrakk>f [s] m = []; \\<forall>y. f [s] (m + y) = []\\<rbrakk>\n       \\<Longrightarrow> finite (deriv s)", "apply(rule f_upwards)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>m y. f [s] m = [] \\<Longrightarrow> f [s] m = []\n 2. \\<And>m.\n       \\<lbrakk>f [s] m = []; \\<forall>y. f [s] (m + y) = []\\<rbrakk>\n       \\<Longrightarrow> finite (deriv s)", "apply(assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>m.\n       \\<lbrakk>f [s] m = []; \\<forall>y. f [s] (m + y) = []\\<rbrakk>\n       \\<Longrightarrow> finite (deriv s)", "apply(simp add: deriv_f)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>m.\n       \\<lbrakk>f [s] m = []; \\<forall>y. f [s] (m + y) = []\\<rbrakk>\n       \\<Longrightarrow> finite (\\<Union>x. Pair x ` set (f [s] x))", "apply(subgoal_tac \"(UNIV::nat set) = {y. y < m} Un {y. m \\<le> y}\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>m.\n       \\<lbrakk>f [s] m = []; \\<forall>y. f [s] (m + y) = [];\n        UNIV = {y. y < m} \\<union> {y. m \\<le> y}\\<rbrakk>\n       \\<Longrightarrow> finite (\\<Union>x. Pair x ` set (f [s] x))\n 2. \\<And>m.\n       \\<lbrakk>f [s] m = []; \\<forall>y. f [s] (m + y) = []\\<rbrakk>\n       \\<Longrightarrow> UNIV = {y. y < m} \\<union> {y. m \\<le> y}", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>m.\n       \\<lbrakk>f [s] m = []; \\<forall>y. f [s] (m + y) = []\\<rbrakk>\n       \\<Longrightarrow> UNIV = {y. y < m} \\<union> {y. m \\<le> y}\n 2. \\<And>m.\n       \\<lbrakk>f [s] m = []; \\<forall>y. f [s] (m + y) = [];\n        UNIV = {y. y < m} \\<union> {y. m \\<le> y}\\<rbrakk>\n       \\<Longrightarrow> finite (\\<Union>x. Pair x ` set (f [s] x))", "apply force"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>m.\n       \\<lbrakk>f [s] m = []; \\<forall>y. f [s] (m + y) = [];\n        UNIV = {y. y < m} \\<union> {y. m \\<le> y}\\<rbrakk>\n       \\<Longrightarrow> finite (\\<Union>x. Pair x ` set (f [s] x))", "apply(erule_tac t=\"UNIV::nat set\" in ssubst)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>m.\n       \\<lbrakk>f [s] m = []; \\<forall>y. f [s] (m + y) = []\\<rbrakk>\n       \\<Longrightarrow> finite\n                          (\\<Union>x\\<in>{y. y < m} \\<union> {y. m \\<le> y}.\n                              Pair x ` set (f [s] x))", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>m.\n       \\<lbrakk>f [s] m = []; \\<forall>y. f [s] (m + y) = []\\<rbrakk>\n       \\<Longrightarrow> finite\n                          (\\<Union>x\\<in>Collect ((\\<le>) m).\n                              Pair x ` set (f [s] x))", "apply(subgoal_tac \"(UN x:Collect ((\\<le>) m). Pair x ` set (f [s] x)) =  (UN x:Collect ((\\<le>) m). {})\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>m.\n       \\<lbrakk>f [s] m = []; \\<forall>y. f [s] (m + y) = [];\n        (\\<Union>x\\<in>Collect ((\\<le>) m). Pair x ` set (f [s] x)) =\n        (\\<Union>x\\<in>Collect ((\\<le>) m). {})\\<rbrakk>\n       \\<Longrightarrow> finite\n                          (\\<Union>x\\<in>Collect ((\\<le>) m).\n                              Pair x ` set (f [s] x))\n 2. \\<And>m.\n       \\<lbrakk>f [s] m = []; \\<forall>y. f [s] (m + y) = []\\<rbrakk>\n       \\<Longrightarrow> (\\<Union>x\\<in>Collect ((\\<le>) m).\n                             Pair x ` set (f [s] x)) =\n                         (\\<Union>x\\<in>Collect ((\\<le>) m). {})", "apply(simp only:)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>m.\n       \\<lbrakk>f [s] m = []; \\<forall>y. f [s] (m + y) = [];\n        (\\<Union>x\\<in>Collect ((\\<le>) m). Pair x ` set (f [s] x)) =\n        (\\<Union>x\\<in>Collect ((\\<le>) m). {})\\<rbrakk>\n       \\<Longrightarrow> finite (\\<Union>x\\<in>Collect ((\\<le>) m). {})\n 2. \\<And>m.\n       \\<lbrakk>f [s] m = []; \\<forall>y. f [s] (m + y) = []\\<rbrakk>\n       \\<Longrightarrow> (\\<Union>x\\<in>Collect ((\\<le>) m).\n                             Pair x ` set (f [s] x)) =\n                         (\\<Union>x\\<in>Collect ((\\<le>) m). {})", "apply(force)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>m.\n       \\<lbrakk>f [s] m = []; \\<forall>y. f [s] (m + y) = []\\<rbrakk>\n       \\<Longrightarrow> (\\<Union>x\\<in>Collect ((\\<le>) m).\n                             Pair x ` set (f [s] x)) =\n                         (\\<Union>x\\<in>Collect ((\\<le>) m). {})", "apply(rule SUP_cong)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>m.\n       \\<lbrakk>f [s] m = []; \\<forall>y. f [s] (m + y) = []\\<rbrakk>\n       \\<Longrightarrow> Collect ((\\<le>) m) = Collect ((\\<le>) m)\n 2. \\<And>m x.\n       \\<lbrakk>f [s] m = []; \\<forall>y. f [s] (m + y) = [];\n        x \\<in> Collect ((\\<le>) m)\\<rbrakk>\n       \\<Longrightarrow> Pair x ` set (f [s] x) = {}", "apply(force)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>m x.\n       \\<lbrakk>f [s] m = []; \\<forall>y. f [s] (m + y) = [];\n        x \\<in> Collect ((\\<le>) m)\\<rbrakk>\n       \\<Longrightarrow> Pair x ` set (f [s] x) = {}", "apply(drule_tac x=\"x-m\" in spec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>m x.\n       \\<lbrakk>f [s] m = []; x \\<in> Collect ((\\<le>) m);\n        f [s] (m + (x - m)) = []\\<rbrakk>\n       \\<Longrightarrow> Pair x ` set (f [s] x) = {}", "apply(force)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma ex_iter_fSucn: \"(\\<exists>m. iter (% x. flat (map subs x)) l m = []) = (if l = [] then True else (\\<exists>n. (iter (% x. flat (map subs x)) ((% x. flat (map subs x)) l) n) = []))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>m. iter (\\<lambda>x. flat (map subs x)) l m = []) =\n    (if l = [] then True\n     else \\<exists>n.\n             iter (\\<lambda>x. flat (map subs x)) (flat (map subs l)) n =\n             [])", "using ex_iter[of \"% x. x = []\", of \"(% x. flat (map subs x))\" l ]"], ["proof (prove)\nusing this:\n  (\\<exists>n. iter (\\<lambda>x. flat (map subs x)) l n = []) =\n  (if l = [] then True\n   else \\<exists>n.\n           iter (\\<lambda>x. flat (map subs x)) (flat (map subs l)) n = [])\n\ngoal (1 subgoal):\n 1. (\\<exists>m. iter (\\<lambda>x. flat (map subs x)) l m = []) =\n    (if l = [] then True\n     else \\<exists>n.\n             iter (\\<lambda>x. flat (map subs x)) (flat (map subs l)) n =\n             [])", "apply(force)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "definition prove' :: \"nseq list => bool\" where\n  \"prove' s = (\\<exists>m. iter (% x. flatten (map subs x)) s m = [])\""], ["", "lemma prove': \"prove' l = (if l = [] then True else prove' ((% x. flatten (map subs x)) l))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prove' l = (if l = [] then True else prove' (flatten (map subs l)))", "apply(simp only: prove'_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>m. iter (\\<lambda>x. flatten (map subs x)) l m = []) =\n    (if l = [] then True\n     else \\<exists>m.\n             iter (\\<lambda>x. flatten (map subs x)) (flatten (map subs l))\n              m =\n             [])", "apply(rule ex_iter_fSucn)"], ["proof (prove)\ngoal:\nNo subgoals!", "done\n    \\<comment> \\<open>this is the main claim for efficiency- we have a tail recursive implementation via this lemma\\<close>"], ["", "definition prove :: \"nseq => bool\" where \"prove s = prove' ([s])\""], ["", "lemma finite_deriv_prove: \"finite (deriv s) = prove s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (deriv s) = prove s", "by (simp add: finite_deriv prove_def prove'_def f_def)"], ["", "subsection \"Computation\"\n\n  \\<comment> \\<open>a sample formula to prove\\<close>"], ["", "lemma \"(\\<exists>x. A x | B x) --> ( (\\<exists>x. B x) | (\\<exists>x. A x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>x. A x \\<or> B x) \\<longrightarrow>\n    (\\<exists>x. B x) \\<or> (\\<exists>x. A x)", "by blast\n\n  \\<comment> \\<open>convert to our form\\<close>"], ["", "lemma \"((\\<exists>x. A x | B x) --> ( (\\<exists>x. B x) | (\\<exists>x. A x)))\n  = ( (\\<forall>x. ~ A x & ~ B x) | ( (\\<exists>x. B x) | (\\<exists>x. A x)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<exists>x. A x \\<or> B x) \\<longrightarrow>\n     (\\<exists>x. B x) \\<or> (\\<exists>x. A x)) =\n    ((\\<forall>x. \\<not> A x \\<and> \\<not> B x) \\<or>\n     (\\<exists>x. B x) \\<or> (\\<exists>x. A x))", "by blast"], ["", "definition my_f :: \"form\" where\n  \"my_f = FDisj \n  (FAll (FConj (NAtom 0 [0]) (NAtom 1 [0])))\n  (FDisj (FEx (PAtom 1 [0])) (FEx (PAtom 0 [0])))\"\n\n  \\<comment> \\<open>we compute by rewriting\\<close>"], ["", "lemma membership_simps:\n  \"x \\<in> set [] \\<longleftrightarrow> False\"\n  \"x \\<in> set (y # ys) \\<longleftrightarrow> x = y \\<or> x \\<in> set ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x \\<in> set []) = False &&&\n    (x \\<in> set (y # ys)) = (x = y \\<or> x \\<in> set ys)", "by simp_all"], ["", "lemmas ss = list.inject if_True if_False flatten.simps list.map\n  bump_def sfv_def filter.simps is_axiom.simps fst_conv snd_conv\n  form.simps collect_disj inc_def finst_def ns_of_s_def s_of_ns_def\n  Let_def newvar_def subs.simps split_beta append_Nil append_Cons\n  subst.simps nat.simps fv.simps maxvar.simps preSuc.simps simp_thms\n  membership_simps"], ["", "lemmas prove'_Nil = prove' [of \"[]\", simplified]"], ["", "lemmas prove'_Cons = prove' [of \"x#l\", simplified] for x l"], ["", "lemma search: \"finite (deriv [(0,my_f)])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (deriv [(0, my_f)])", "apply(simp add: my_f_def finite_deriv_prove prove_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. prove'\n     [[(0, FDisj (FAll (FConj (NAtom 0 [0]) (NAtom (Suc 0) [0])))\n            (FDisj (FEx (PAtom (Suc 0) [0])) (FEx (PAtom 0 [0]))))]]", "apply(simp only: prove'_Nil prove'_Cons ss)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "abbreviation Sprove :: \"form list \\<Rightarrow> bool\" where \"Sprove \\<equiv> prove o ns_of_s\""], ["", "abbreviation check :: \"form \\<Rightarrow> bool\" where \"check formula \\<equiv> Sprove [formula]\""], ["", "abbreviation valid :: \"form \\<Rightarrow> bool\" where \"valid formula \\<equiv> Svalid [formula]\""], ["", "theorem \"check = valid\""], ["proof (prove)\ngoal (1 subgoal):\n 1. check = valid", "using soundness completeness finite_deriv_prove"], ["proof (prove)\nusing this:\n  finite (deriv (ns_of_s ?s)) \\<Longrightarrow> Svalid ?s\n  infinite (deriv (ns_of_s ?s)) \\<Longrightarrow> \\<not> Svalid ?s\n  finite (deriv ?s) = prove ?s\n\ngoal (1 subgoal):\n 1. check = valid", "by auto"], ["", "ML \\<open>\n\nfun max x y = if x > y then x else y;\n\nfun flatten [] = []\n  | flatten (a::list) = a @ (flatten list);\n\ntype pred = int;\n\ntype var = int;\n\ndatatype form = \n    PAtom of pred * (var list)\n  | NAtom of pred * (var list)\n  | FConj of form * form\n  | FDisj of form * form\n  | FAll  of form\n  | FEx   of form;\n\nfun preSuc [] = []\n  | preSuc (a::list) = if a = 0 then preSuc list else (a-1)::(preSuc list);\n\nfun fv (PAtom (_,vs)) = vs\n  | fv (NAtom (_,vs)) = vs\n  | fv (FConj (f,g)) = (fv f) @ (fv g)\n  | fv (FDisj (f,g)) = (fv f) @ (fv g)\n  | fv (FAll f) = preSuc (fv f)\n  | fv (FEx f)  = preSuc (fv f);\n\nfun subst r (PAtom (p,vs)) = PAtom (p,map r vs)\n  | subst r (NAtom (p,vs)) = NAtom (p,map r vs)\n  | subst r (FConj (f,g)) = FConj (subst r f,subst r g)\n  | subst r (FDisj (f,g)) = FDisj (subst r f,subst r g)\n  | subst r (FAll f) = FAll (subst (fn 0 => 0 | v => (r (v-1))+1) f)\n  | subst r (FEx f)  = FEx  (subst (fn 0 => 0 | v => (r (v-1))+1) f);\n\nfun finst body w = subst (fn 0 => w | v => v-1) body;\n\nfun s_of_ns ns = map (fn (_,y) => y) ns;\n\nfun ns_of_s s = map (fn y => (0,y)) s;\n\nfun sfv s = flatten (map fv s);\n\nfun maxvar [] = 0\n  | maxvar (a::list) = max a (maxvar list);\n\nfun newvar vs = if vs = [] then 0 else (maxvar vs)+1;\n\nfun test [] _ = false\n  | test ((_,y)::list) z = if y = z then true else test list z;\n\nfun subs [] = [[]]\n  | subs (x::xs) = let val (n,f') = x in case f' of\n      PAtom (p,vs) => if test xs (NAtom (p,vs)) then [] else [xs @ [(0,PAtom (p,vs))]]\n    | NAtom (p,vs) => if test xs (PAtom (p,vs)) then [] else [xs @ [(0,NAtom (p,vs))]]\n    | FConj (f,g) => [xs @ [(0,f)],xs @ [(0,g)]]\n    | FDisj (f,g) => [xs @ [(0,f),(0,g)]]\n    | FAll f => [xs @ [(0,finst f (newvar (sfv (s_of_ns (x::xs)))))]]\n    | FEx f  => [xs @ [(0,finst f n),(n+1,f')]]\n  end;\n\nfun step s = flatten (map subs s);\n\nfun prove' s = if s = [] then true else prove' (step s);\n\nfun prove s = prove' [s];\n\nfun check f = (prove o ns_of_s) [f];\n\nval my_f = FDisj (\n  (FAll (FConj ((NAtom (0,[0])), (NAtom (1,[0])))),\n  (FDisj ((FEx ((PAtom (1,[0])))), (FEx (PAtom (0,[0])))))));\n\ncheck my_f;\n\n\\<close>"], ["", "end"]]}