{"file_name": "/home/qj213/afp-2021-10-22/thys/Automated_Stateful_Protocol_Verification/Transactions.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Automated_Stateful_Protocol_Verification", "problem_names": ["lemma prot_atom_UNIV:\n  \"(UNIV::'b prot_atom set) = range Atom \\<union> {Value, SetType, AttackType, Bottom, OccursSecType}\"", "lemma wellformed_transaction_cases:\n  assumes \"wellformed_transaction T\"\n  shows \n      \"(l,x) \\<in> set (transaction_receive T) \\<Longrightarrow> \\<exists>t. x = receive\\<langle>t\\<rangle>\" (is \"?A \\<Longrightarrow> ?A'\")\n      \"(l,x) \\<in> set (transaction_selects T) \\<Longrightarrow>\n             (\\<exists>t s. x = \\<langle>t := s\\<rangle>) \\<or> (\\<exists>t s. x = select\\<langle>t,s\\<rangle>)\" (is \"?B \\<Longrightarrow> ?B'\")\n      \"(l,x) \\<in> set (transaction_checks T) \\<Longrightarrow>\n              (\\<exists>t s. x = \\<langle>t == s\\<rangle>) \\<or> (\\<exists>t s. x = \\<langle>t in s\\<rangle>) \\<or> (\\<exists>X F G. x = \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\" (is \"?C \\<Longrightarrow> ?C'\")\n      \"(l,x) \\<in> set (transaction_updates T) \\<Longrightarrow>\n              (\\<exists>t s. x = insert\\<langle>t,s\\<rangle>) \\<or> (\\<exists>t s. x = delete\\<langle>t,s\\<rangle>)\" (is \"?D \\<Longrightarrow> ?D'\")\n      \"(l,x) \\<in> set (transaction_send T) \\<Longrightarrow> \\<exists>t. x = send\\<langle>t\\<rangle>\" (is \"?E \\<Longrightarrow> ?E'\")", "lemma wellformed_transaction_unlabel_cases:\n  assumes \"wellformed_transaction T\"\n  shows \n      \"x \\<in> set (unlabel (transaction_receive T)) \\<Longrightarrow> \\<exists>t. x = receive\\<langle>t\\<rangle>\" (is \"?A \\<Longrightarrow> ?A'\")\n      \"x \\<in> set (unlabel (transaction_selects T)) \\<Longrightarrow>\n             (\\<exists>t s. x = \\<langle>t := s\\<rangle>) \\<or> (\\<exists>t s. x = select\\<langle>t,s\\<rangle>)\" (is \"?B \\<Longrightarrow> ?B'\")\n      \"x \\<in> set (unlabel (transaction_checks T)) \\<Longrightarrow>\n              (\\<exists>t s. x = \\<langle>t == s\\<rangle>) \\<or> (\\<exists>t s. x = \\<langle>t in s\\<rangle>) \\<or> (\\<exists>X F G. x = \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\"\n        (is \"?C \\<Longrightarrow> ?C'\")\n      \"x \\<in> set (unlabel (transaction_updates T)) \\<Longrightarrow>\n              (\\<exists>t s. x = insert\\<langle>t,s\\<rangle>) \\<or> (\\<exists>t s. x = delete\\<langle>t,s\\<rangle>)\" (is \"?D \\<Longrightarrow> ?D'\")\n      \"x \\<in> set (unlabel (transaction_send T)) \\<Longrightarrow> \\<exists>t. x = send\\<langle>t\\<rangle>\" (is \"?E \\<Longrightarrow> ?E'\")", "lemma transaction_strand_subsets[simp]:\n  \"set (transaction_receive T) \\<subseteq> set (transaction_strand T)\"\n  \"set (transaction_selects T) \\<subseteq> set (transaction_strand T)\"\n  \"set (transaction_checks T) \\<subseteq> set (transaction_strand T)\"\n  \"set (transaction_updates T) \\<subseteq> set (transaction_strand T)\"\n  \"set (transaction_send T) \\<subseteq> set (transaction_strand T)\"\n  \"set (unlabel (transaction_receive T)) \\<subseteq> set (unlabel (transaction_strand T))\"\n  \"set (unlabel (transaction_selects T)) \\<subseteq> set (unlabel (transaction_strand T))\"\n  \"set (unlabel (transaction_checks T)) \\<subseteq> set (unlabel (transaction_strand T))\"\n  \"set (unlabel (transaction_updates T)) \\<subseteq> set (unlabel (transaction_strand T))\"\n  \"set (unlabel (transaction_send T)) \\<subseteq> set (unlabel (transaction_strand T))\"", "lemma transaction_strand_subst_subsets[simp]:\n  \"set (transaction_receive T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>) \\<subseteq> set (transaction_strand T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>)\"\n  \"set (transaction_selects T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>) \\<subseteq> set (transaction_strand T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>)\"\n  \"set (transaction_checks T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>) \\<subseteq> set (transaction_strand T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>)\"\n  \"set (transaction_updates T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>) \\<subseteq> set (transaction_strand T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>)\"\n  \"set (transaction_send T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>) \\<subseteq> set (transaction_strand T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>)\"\n  \"set (unlabel (transaction_receive T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>)) \\<subseteq> set (unlabel (transaction_strand T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>))\"\n  \"set (unlabel (transaction_selects T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>)) \\<subseteq> set (unlabel (transaction_strand T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>))\"\n  \"set (unlabel (transaction_checks T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>)) \\<subseteq> set (unlabel (transaction_strand T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>))\"\n  \"set (unlabel (transaction_updates T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>)) \\<subseteq> set (unlabel (transaction_strand T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>))\"\n  \"set (unlabel (transaction_send T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>)) \\<subseteq> set (unlabel (transaction_strand T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>))\"", "lemma transaction_dual_subst_unfold:\n  \"unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_strand T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>)) =\n    unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>))@\n    unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_selects T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>))@\n    unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_checks T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>))@\n    unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_updates T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>))@\n    unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>))\"", "lemma trms_transaction_unfold:\n  \"trms_transaction T =\n      trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T) \\<union> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_selects T) \\<union>\n      trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_checks T) \\<union> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_updates T) \\<union>\n      trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T)\"", "lemma trms_transaction_subst_unfold:\n  \"trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_strand T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>) =\n      trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>) \\<union> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_selects T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>) \\<union>\n      trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_checks T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>) \\<union> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_updates T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>) \\<union>\n      trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>)\"", "lemma vars_transaction_unfold:\n  \"vars_transaction T =\n      vars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T) \\<union> vars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_selects T) \\<union>\n      vars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_checks T) \\<union> vars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_updates T) \\<union>\n      vars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T)\"", "lemma vars_transaction_subst_unfold:\n  \"vars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_strand T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>) =\n      vars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>) \\<union> vars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_selects T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>) \\<union>\n      vars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_checks T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>) \\<union> vars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_updates T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>) \\<union>\n      vars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>)\"", "lemma fv_transaction_unfold:\n  \"fv_transaction T =\n      fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T) \\<union> fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_selects T) \\<union>\n      fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_checks T) \\<union> fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_updates T) \\<union>\n      fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T)\"", "lemma fv_transaction_subst_unfold:\n  \"fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_strand T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>) =\n      fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>) \\<union> fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_selects T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>) \\<union>\n      fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_checks T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>) \\<union> fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_updates T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>) \\<union>\n      fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>)\"", "lemma fv_wellformed_transaction_unfold:\n  assumes \"wellformed_transaction T\"\n  shows \"fv_transaction T =\n    fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T) \\<union> fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_selects T) \\<union> set (transaction_fresh T)\"", "lemma bvars_transaction_unfold:\n  \"bvars_transaction T =\n      bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T) \\<union> bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_selects T) \\<union>\n      bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_checks T) \\<union> bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_updates T) \\<union>\n      bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T)\"", "lemma bvars_transaction_subst_unfold:\n  \"bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_strand T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>) =\n      bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>) \\<union> bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_selects T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>) \\<union>\n      bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_checks T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>) \\<union> bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_updates T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>) \\<union>\n      bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>)\"", "lemma bvars_wellformed_transaction_unfold:\n  assumes \"wellformed_transaction T\"\n  shows \"bvars_transaction T = bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_checks T)\" (is ?A)\n    and \"bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T) = {}\" (is ?B)\n    and \"bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_selects T) = {}\" (is ?C)\n    and \"bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_updates T) = {}\" (is ?D)\n    and \"bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T) = {}\" (is ?E)", "lemma transaction_strand_memberD[dest]:\n  assumes \"x \\<in> set (transaction_strand T)\"\n  shows \"x \\<in> set (transaction_receive T) \\<or> x \\<in> set (transaction_selects T) \\<or>\n         x \\<in> set (transaction_checks T) \\<or> x \\<in> set (transaction_updates T) \\<or>\n         x \\<in> set (transaction_send T)\"", "lemma transaction_strand_unlabel_memberD[dest]:\n  assumes \"x \\<in> set (unlabel (transaction_strand T))\"\n  shows \"x \\<in> set (unlabel (transaction_receive T)) \\<or> x \\<in> set (unlabel (transaction_selects T)) \\<or>\n         x \\<in> set (unlabel (transaction_checks T)) \\<or> x \\<in> set (unlabel (transaction_updates T)) \\<or>\n         x \\<in> set (unlabel (transaction_send T))\"", "lemma wellformed_transaction_strand_memberD[dest]:\n  assumes \"wellformed_transaction T\" and \"(l,x) \\<in> set (transaction_strand T)\"\n  shows\n    \"x = receive\\<langle>t\\<rangle> \\<Longrightarrow> (l,x) \\<in> set (transaction_receive T)\" (is \"?A \\<Longrightarrow> ?A'\")\n    \"x = select\\<langle>t,s\\<rangle> \\<Longrightarrow> (l,x) \\<in> set (transaction_selects T)\" (is \"?B \\<Longrightarrow> ?B'\")\n    \"x = \\<langle>t == s\\<rangle> \\<Longrightarrow> (l,x) \\<in> set (transaction_checks T)\" (is \"?C \\<Longrightarrow> ?C'\")\n    \"x = \\<langle>t in s\\<rangle> \\<Longrightarrow> (l,x) \\<in> set (transaction_checks T)\" (is \"?D \\<Longrightarrow> ?D'\")\n    \"x = \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>  \\<Longrightarrow> (l,x) \\<in> set (transaction_checks T)\" (is \"?E \\<Longrightarrow> ?E'\")\n    \"x = insert\\<langle>t,s\\<rangle> \\<Longrightarrow> (l,x) \\<in> set (transaction_updates T)\" (is \"?F \\<Longrightarrow> ?F'\")\n    \"x = delete\\<langle>t,s\\<rangle> \\<Longrightarrow> (l,x) \\<in> set (transaction_updates T)\" (is \"?G \\<Longrightarrow> ?G'\")\n    \"x = send\\<langle>t\\<rangle> \\<Longrightarrow> (l,x) \\<in> set (transaction_send T)\" (is \"?H \\<Longrightarrow> ?H'\")", "lemma wellformed_transaction_strand_unlabel_memberD[dest]:\n  assumes \"wellformed_transaction T\" and \"x \\<in> set (unlabel (transaction_strand T))\"\n  shows\n    \"x = receive\\<langle>t\\<rangle> \\<Longrightarrow> x \\<in> set (unlabel (transaction_receive T))\" (is \"?A \\<Longrightarrow> ?A'\")\n    \"x = select\\<langle>t,s\\<rangle> \\<Longrightarrow> x \\<in> set (unlabel (transaction_selects T))\" (is \"?B \\<Longrightarrow> ?B'\")\n    \"x = \\<langle>t == s\\<rangle> \\<Longrightarrow> x \\<in> set (unlabel (transaction_checks T))\" (is \"?C \\<Longrightarrow> ?C'\")\n    \"x = \\<langle>t in s\\<rangle> \\<Longrightarrow> x \\<in> set (unlabel (transaction_checks T))\" (is \"?D \\<Longrightarrow> ?D'\")\n    \"x = \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>  \\<Longrightarrow> x \\<in> set (unlabel (transaction_checks T))\" (is \"?E \\<Longrightarrow> ?E'\")\n    \"x = insert\\<langle>t,s\\<rangle> \\<Longrightarrow> x \\<in> set (unlabel (transaction_updates T))\" (is \"?F \\<Longrightarrow> ?F'\")\n    \"x = delete\\<langle>t,s\\<rangle> \\<Longrightarrow> x \\<in> set (unlabel (transaction_updates T))\" (is \"?G \\<Longrightarrow> ?G'\")\n    \"x = send\\<langle>t\\<rangle> \\<Longrightarrow> x \\<in> set (unlabel (transaction_send T))\" (is \"?H \\<Longrightarrow> ?H'\")", "lemma wellformed_transaction_send_receive_trm_cases:\n  assumes T: \"wellformed_transaction T\"\n  shows \"t \\<in> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T) \\<Longrightarrow> receive\\<langle>t\\<rangle> \\<in> set (unlabel (transaction_receive T))\"\n    and \"t \\<in> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T) \\<Longrightarrow> send\\<langle>t\\<rangle> \\<in> set (unlabel (transaction_send T))\"", "lemma wellformed_transaction_send_receive_subst_trm_cases:\n  assumes T: \"wellformed_transaction T\"\n  shows \"t \\<in> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T) \\<cdot>\\<^sub>s\\<^sub>e\\<^sub>t \\<theta> \\<Longrightarrow> receive\\<langle>t\\<rangle> \\<in> set (unlabel (transaction_receive T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>))\"\n    and \"t \\<in> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T) \\<cdot>\\<^sub>s\\<^sub>e\\<^sub>t \\<theta> \\<Longrightarrow> send\\<langle>t\\<rangle> \\<in> set (unlabel (transaction_send T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>))\"", "lemma wellformed_transaction_send_receive_fv_subset:\n  assumes T: \"wellformed_transaction T\"\n  shows \"t \\<in> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T) \\<Longrightarrow> fv t \\<subseteq> fv_transaction T\" (is \"?A \\<Longrightarrow> ?A'\")\n    and \"t \\<in> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T) \\<Longrightarrow> fv t \\<subseteq> fv_transaction T\" (is \"?B \\<Longrightarrow> ?B'\")", "lemma dual_wellformed_transaction_ident_cases[dest]:\n  \"list_all is_Assignment (unlabel S) \\<Longrightarrow> dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S = S\"\n  \"list_all is_Check (unlabel S) \\<Longrightarrow> dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S = S\"\n  \"list_all is_Update (unlabel S) \\<Longrightarrow> dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S = S\"", "lemma wellformed_transaction_wf\\<^sub>s\\<^sub>s\\<^sub>t:\n  fixes T::\"('a, 'b, 'c, 'd) prot_transaction\"\n  assumes T: \"wellformed_transaction T\"\n  shows \"wf'\\<^sub>s\\<^sub>s\\<^sub>t (set (transaction_fresh T)) (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_strand T)))\" (is ?A)\n    and \"fv_transaction T \\<inter> bvars_transaction T = {}\" (is ?B)\n    and \"set (transaction_fresh T) \\<inter> bvars_transaction T = {}\" (is ?C)", "lemma dual_wellformed_transaction_ident_cases'[dest]:\n  assumes \"wellformed_transaction T\"\n  shows \"dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_selects T) = transaction_selects T\"\n        \"dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_checks T) = transaction_checks T\"\n        \"dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_updates T) = transaction_updates T\"", "lemma dual_transaction_strand:\n  assumes \"wellformed_transaction T\"\n  shows \"dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_strand T) =\n         dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T)@transaction_selects T@transaction_checks T@\n         transaction_updates T@dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T)\"", "lemma dual_unlabel_transaction_strand:\n  assumes \"wellformed_transaction T\"\n  shows \"unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_strand T)) =\n         (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T)))@(unlabel (transaction_selects T))@\n         (unlabel (transaction_checks T))@(unlabel (transaction_updates T))@\n         (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T)))\"", "lemma dual_transaction_strand_subst:\n  assumes \"wellformed_transaction T\"\n  shows \"dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_strand T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>) =\n         (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T)@transaction_selects T@transaction_checks T@\n          transaction_updates T@dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T)) \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>\"", "lemma dual_transaction_ik_is_transaction_send:\n  assumes \"wellformed_transaction T\"\n  shows \"ik\\<^sub>s\\<^sub>s\\<^sub>t (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_strand T))) = trms\\<^sub>s\\<^sub>s\\<^sub>t (unlabel (transaction_send T))\"\n    (is \"?A = ?B\")", "lemma dual_transaction_ik_is_transaction_send':\n  fixes \\<delta>::\"('a,'b,'c) prot_subst\"\n  assumes \"wellformed_transaction T\"\n  shows \"ik\\<^sub>s\\<^sub>s\\<^sub>t (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_strand T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>)))  =\n         trms\\<^sub>s\\<^sub>s\\<^sub>t (unlabel (transaction_send T)) \\<cdot>\\<^sub>s\\<^sub>e\\<^sub>t \\<delta>\" (is \"?A = ?B\")", "lemma db\\<^sub>s\\<^sub>s\\<^sub>t_transaction_prefix_eq:\n  assumes T: \"wellformed_transaction T\"\n    and S: \"prefix S (transaction_receive T@transaction_selects T@transaction_checks T)\"\n  shows \"db\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A = db\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (A@dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>))\"", "lemma db\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t_dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t_set_ex:\n   assumes \"d \\<in> set (db'\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>) \\<I> D)\"\n    \"\\<forall>t u. insert\\<langle>t,u\\<rangle> \\<in> set (unlabel A) \\<longrightarrow> (\\<exists>s. u = Fun (Set s) [])\"\n    \"\\<forall>t u. delete\\<langle>t,u\\<rangle> \\<in> set (unlabel A) \\<longrightarrow> (\\<exists>s. u = Fun (Set s) [])\"\n    \"\\<forall>d \\<in> set D. \\<exists>s. snd d = Fun (Set s) []\"\n  shows \"\\<exists>s. snd d = Fun (Set s) []\"", "lemma is_Fun_SetE[elim]:\n  assumes t: \"is_Fun_Set t\"\n  obtains s where \"t = Fun (Set s) []\"", "lemma Fun_Set_InSet_iff:\n  \"(u = \\<langle>a: Var x \\<in> Fun (Set s) []\\<rangle>) \\<longleftrightarrow>\n   (is_InSet u \\<and> is_Var (the_elem_term u) \\<and> is_Fun_Set (the_set_term u) \\<and>\n    the_Set (the_Fun (the_set_term u)) = s \\<and> the_Var (the_elem_term u) = x \\<and> the_check u = a)\"\n  (is \"?A \\<longleftrightarrow> ?B\")", "lemma Fun_Set_NotInSet_iff:\n  \"(u = \\<langle>Var x not in Fun (Set s) []\\<rangle>) \\<longleftrightarrow>\n   (is_NegChecks u \\<and> bvars\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p u = [] \\<and> the_eqs u = [] \\<and> length (the_ins u) = 1 \\<and>\n    is_Var (fst (hd (the_ins u))) \\<and> is_Fun_Set (snd (hd (the_ins u)))) \\<and>\n    the_Set (the_Fun (snd (hd (the_ins u)))) = s \\<and> the_Var (fst (hd (the_ins u))) = x\"\n  (is \"?A \\<longleftrightarrow> ?B\")", "lemma is_Fun_Set_exi: \"is_Fun_Set x \\<longleftrightarrow> (\\<exists>s. x = Fun (Set s) [])\"", "lemma is_Fun_Set_subst:\n  assumes \"is_Fun_Set S'\"\n  shows \"is_Fun_Set (S' \\<cdot> \\<sigma>)\"", "lemma is_Update_in_transaction_updates:\n  assumes tu: \"is_Update t\"\n  assumes t: \"t \\<in> set (unlabel (transaction_strand TT))\"\n  assumes vt: \"wellformed_transaction TT\"\n  shows \"t \\<in> set (unlabel (transaction_updates TT))\"", "lemma transaction_fresh_vars_subset:\n  assumes \"wellformed_transaction T\"\n  shows \"set (transaction_fresh T) \\<subseteq> fv_transaction T\"", "lemma transaction_fresh_vars_notin:\n  assumes T: \"wellformed_transaction T\"\n    and x: \"x \\<in> set (transaction_fresh T)\"\n  shows \"x \\<notin> fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T)\" (is ?A)\n    and \"x \\<notin> fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_selects T)\" (is ?B)\n    and \"x \\<notin> fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_checks T)\" (is ?C)\n    and \"x \\<notin> vars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T)\" (is ?D)\n    and \"x \\<notin> vars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_selects T)\" (is ?E)\n    and \"x \\<notin> vars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_checks T)\" (is ?F)\n    and \"x \\<notin> bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T)\" (is ?G)\n    and \"x \\<notin> bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_selects T)\" (is ?H)\n    and \"x \\<notin> bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_checks T)\" (is ?I)", "lemma transaction_proj_member:\n  assumes \"T \\<in> set P\"\n  shows \"transaction_proj n T \\<in> set (map (transaction_proj n) P)\"", "lemma transaction_strand_proj:\n  \"transaction_strand (transaction_proj n T) = proj n (transaction_strand T)\"", "lemma transaction_proj_fresh_eq:\n  \"transaction_fresh (transaction_proj n T) = transaction_fresh T\"", "lemma transaction_proj_trms_subset:\n  \"trms_transaction (transaction_proj n T) \\<subseteq> trms_transaction T\"", "lemma transaction_proj_vars_subset:\n  \"vars_transaction (transaction_proj n T) \\<subseteq> vars_transaction T\""], "translations": [["", "lemma prot_atom_UNIV:\n  \"(UNIV::'b prot_atom set) = range Atom \\<union> {Value, SetType, AttackType, Bottom, OccursSecType}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. UNIV =\n    range prot_atom.Atom \\<union>\n    {Value, SetType, AttackType, Bottom, OccursSecType}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. UNIV =\n    range prot_atom.Atom \\<union>\n    {Value, SetType, AttackType, Bottom, OccursSecType}", "have \"a \\<in> range Atom \\<or> a = Value \\<or> a = SetType \\<or> a = AttackType \\<or> a = Bottom \\<or> a = OccursSecType\"\n    for a::\"'b prot_atom\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<in> range prot_atom.Atom \\<or>\n    a = Value \\<or>\n    a = SetType \\<or>\n    a = AttackType \\<or> a = Bottom \\<or> a = OccursSecType", "by (cases a) auto"], ["proof (state)\nthis:\n  ?a \\<in> range prot_atom.Atom \\<or>\n  ?a = Value \\<or>\n  ?a = SetType \\<or>\n  ?a = AttackType \\<or> ?a = Bottom \\<or> ?a = OccursSecType\n\ngoal (1 subgoal):\n 1. UNIV =\n    range prot_atom.Atom \\<union>\n    {Value, SetType, AttackType, Bottom, OccursSecType}", "thus ?thesis"], ["proof (prove)\nusing this:\n  ?a \\<in> range prot_atom.Atom \\<or>\n  ?a = Value \\<or>\n  ?a = SetType \\<or>\n  ?a = AttackType \\<or> ?a = Bottom \\<or> ?a = OccursSecType\n\ngoal (1 subgoal):\n 1. UNIV =\n    range prot_atom.Atom \\<union>\n    {Value, SetType, AttackType, Bottom, OccursSecType}", "by auto"], ["proof (state)\nthis:\n  UNIV =\n  range prot_atom.Atom \\<union>\n  {Value, SetType, AttackType, Bottom, OccursSecType}\n\ngoal:\nNo subgoals!", "qed"], ["", "instance prot_atom::(finite) finite"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS('a prot_atom, finite_class)", "by intro_classes (simp add: prot_atom_UNIV)"], ["", "instantiation prot_atom::(enum) enum\nbegin"], ["", "definition \"enum_prot_atom == map Atom enum_class.enum@[Value, SetType, AttackType, Bottom, OccursSecType]\""], ["", "definition \"enum_all_prot_atom P == list_all P (map Atom enum_class.enum@[Value, SetType, AttackType, Bottom, OccursSecType])\""], ["", "definition \"enum_ex_prot_atom P == list_ex P (map Atom enum_class.enum@[Value, SetType, AttackType, Bottom, OccursSecType])\""], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS('a prot_atom, enum_class)", "proof intro_classes"], ["proof (state)\ngoal (4 subgoals):\n 1. UNIV = set enum_class.enum\n 2. distinct enum_class.enum\n 3. \\<And>P. enum_class.enum_all P = Ball UNIV P\n 4. \\<And>P. enum_class.enum_ex P = Bex UNIV P", "have *: \"set (map Atom (enum_class.enum::'a list)) = range Atom\"\n          \"distinct (enum_class.enum::'a list)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (map prot_atom.Atom enum_class.enum) = range prot_atom.Atom &&&\n    distinct enum_class.enum", "using UNIV_enum enum_distinct"], ["proof (prove)\nusing this:\n  UNIV = set enum_class.enum\n  distinct enum_class.enum\n\ngoal (1 subgoal):\n 1. set (map prot_atom.Atom enum_class.enum) = range prot_atom.Atom &&&\n    distinct enum_class.enum", "by auto"], ["proof (state)\nthis:\n  set (map prot_atom.Atom enum_class.enum) = range prot_atom.Atom\n  distinct enum_class.enum\n\ngoal (4 subgoals):\n 1. UNIV = set enum_class.enum\n 2. distinct enum_class.enum\n 3. \\<And>P. enum_class.enum_all P = Ball UNIV P\n 4. \\<And>P. enum_class.enum_ex P = Bex UNIV P", "show \"(UNIV::'a prot_atom set) = set enum_class.enum\""], ["proof (prove)\ngoal (1 subgoal):\n 1. UNIV = set enum_class.enum", "using *(1)"], ["proof (prove)\nusing this:\n  set (map prot_atom.Atom enum_class.enum) = range prot_atom.Atom\n\ngoal (1 subgoal):\n 1. UNIV = set enum_class.enum", "by (simp add: prot_atom_UNIV enum_prot_atom_def)"], ["proof (state)\nthis:\n  UNIV = set enum_class.enum\n\ngoal (3 subgoals):\n 1. distinct enum_class.enum\n 2. \\<And>P. enum_class.enum_all P = Ball UNIV P\n 3. \\<And>P. enum_class.enum_ex P = Bex UNIV P", "have \"set (map Atom enum_class.enum) \\<inter> set [Value, SetType, AttackType, Bottom, OccursSecType] = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (map prot_atom.Atom enum_class.enum) \\<inter>\n    set [Value, SetType, AttackType, Bottom, OccursSecType] =\n    {}", "by auto"], ["proof (state)\nthis:\n  set (map prot_atom.Atom enum_class.enum) \\<inter>\n  set [Value, SetType, AttackType, Bottom, OccursSecType] =\n  {}\n\ngoal (3 subgoals):\n 1. distinct enum_class.enum\n 2. \\<And>P. enum_class.enum_all P = Ball UNIV P\n 3. \\<And>P. enum_class.enum_ex P = Bex UNIV P", "moreover"], ["proof (state)\nthis:\n  set (map prot_atom.Atom enum_class.enum) \\<inter>\n  set [Value, SetType, AttackType, Bottom, OccursSecType] =\n  {}\n\ngoal (3 subgoals):\n 1. distinct enum_class.enum\n 2. \\<And>P. enum_class.enum_all P = Ball UNIV P\n 3. \\<And>P. enum_class.enum_ex P = Bex UNIV P", "have \"inj_on Atom (set (enum_class.enum::'a list))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_on prot_atom.Atom (set enum_class.enum)", "unfolding inj_on_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set enum_class.enum.\n       \\<forall>y\\<in>set enum_class.enum.\n          prot_atom.Atom x = prot_atom.Atom y \\<longrightarrow> x = y", "by auto"], ["proof (state)\nthis:\n  inj_on prot_atom.Atom (set enum_class.enum)\n\ngoal (3 subgoals):\n 1. distinct enum_class.enum\n 2. \\<And>P. enum_class.enum_all P = Ball UNIV P\n 3. \\<And>P. enum_class.enum_ex P = Bex UNIV P", "hence \"distinct (map Atom (enum_class.enum::'a list))\""], ["proof (prove)\nusing this:\n  inj_on prot_atom.Atom (set enum_class.enum)\n\ngoal (1 subgoal):\n 1. distinct (map prot_atom.Atom enum_class.enum)", "by (metis *(2) distinct_map)"], ["proof (state)\nthis:\n  distinct (map prot_atom.Atom enum_class.enum)\n\ngoal (3 subgoals):\n 1. distinct enum_class.enum\n 2. \\<And>P. enum_class.enum_all P = Ball UNIV P\n 3. \\<And>P. enum_class.enum_ex P = Bex UNIV P", "ultimately"], ["proof (chain)\npicking this:\n  set (map prot_atom.Atom enum_class.enum) \\<inter>\n  set [Value, SetType, AttackType, Bottom, OccursSecType] =\n  {}\n  distinct (map prot_atom.Atom enum_class.enum)", "show \"distinct (enum_class.enum::'a prot_atom list)\""], ["proof (prove)\nusing this:\n  set (map prot_atom.Atom enum_class.enum) \\<inter>\n  set [Value, SetType, AttackType, Bottom, OccursSecType] =\n  {}\n  distinct (map prot_atom.Atom enum_class.enum)\n\ngoal (1 subgoal):\n 1. distinct enum_class.enum", "by (simp add: enum_prot_atom_def)"], ["proof (state)\nthis:\n  distinct enum_class.enum\n\ngoal (2 subgoals):\n 1. \\<And>P. enum_class.enum_all P = Ball UNIV P\n 2. \\<And>P. enum_class.enum_ex P = Bex UNIV P", "have \"Ball UNIV P \\<longleftrightarrow> Ball (range Atom) P \\<and> Ball {Value, SetType, AttackType, Bottom, OccursSecType} P\"\n    for P::\"'a prot_atom \\<Rightarrow> bool\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Ball UNIV P =\n    (Ball (range prot_atom.Atom) P \\<and>\n     Ball {Value, SetType, AttackType, Bottom, OccursSecType} P)", "by (metis prot_atom_UNIV UNIV_I UnE)"], ["proof (state)\nthis:\n  Ball UNIV ?P1 =\n  (Ball (range prot_atom.Atom) ?P1 \\<and>\n   Ball {Value, SetType, AttackType, Bottom, OccursSecType} ?P1)\n\ngoal (2 subgoals):\n 1. \\<And>P. enum_class.enum_all P = Ball UNIV P\n 2. \\<And>P. enum_class.enum_ex P = Bex UNIV P", "thus \"enum_class.enum_all P = Ball (UNIV::'a prot_atom set) P\" for P"], ["proof (prove)\nusing this:\n  Ball UNIV ?P1 =\n  (Ball (range prot_atom.Atom) ?P1 \\<and>\n   Ball {Value, SetType, AttackType, Bottom, OccursSecType} ?P1)\n\ngoal (1 subgoal):\n 1. enum_class.enum_all P = Ball UNIV P", "using *(1) Ball_set[of \"map Atom enum_class.enum\" P]"], ["proof (prove)\nusing this:\n  Ball UNIV ?P1 =\n  (Ball (range prot_atom.Atom) ?P1 \\<and>\n   Ball {Value, SetType, AttackType, Bottom, OccursSecType} ?P1)\n  set (map prot_atom.Atom enum_class.enum) = range prot_atom.Atom\n  Ball (set (map prot_atom.Atom enum_class.enum)) P =\n  list_all P (map prot_atom.Atom enum_class.enum)\n\ngoal (1 subgoal):\n 1. enum_class.enum_all P = Ball UNIV P", "by (auto simp add: enum_all_prot_atom_def)"], ["proof (state)\nthis:\n  enum_class.enum_all ?P1 = Ball UNIV ?P1\n\ngoal (1 subgoal):\n 1. \\<And>P. enum_class.enum_ex P = Bex UNIV P", "have \"Bex UNIV P \\<longleftrightarrow> Bex (range Atom) P \\<or> Bex {Value, SetType, AttackType, Bottom, OccursSecType} P\"\n    for P::\"'a prot_atom \\<Rightarrow> bool\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Bex UNIV P =\n    (Bex (range prot_atom.Atom) P \\<or>\n     Bex {Value, SetType, AttackType, Bottom, OccursSecType} P)", "by (metis prot_atom_UNIV UNIV_I UnE)"], ["proof (state)\nthis:\n  Bex UNIV ?P1 =\n  (Bex (range prot_atom.Atom) ?P1 \\<or>\n   Bex {Value, SetType, AttackType, Bottom, OccursSecType} ?P1)\n\ngoal (1 subgoal):\n 1. \\<And>P. enum_class.enum_ex P = Bex UNIV P", "thus \"enum_class.enum_ex P = Bex (UNIV::'a prot_atom set) P\" for P"], ["proof (prove)\nusing this:\n  Bex UNIV ?P1 =\n  (Bex (range prot_atom.Atom) ?P1 \\<or>\n   Bex {Value, SetType, AttackType, Bottom, OccursSecType} ?P1)\n\ngoal (1 subgoal):\n 1. enum_class.enum_ex P = Bex UNIV P", "using *(1) Bex_set[of \"map Atom enum_class.enum\" P]"], ["proof (prove)\nusing this:\n  Bex UNIV ?P1 =\n  (Bex (range prot_atom.Atom) ?P1 \\<or>\n   Bex {Value, SetType, AttackType, Bottom, OccursSecType} ?P1)\n  set (map prot_atom.Atom enum_class.enum) = range prot_atom.Atom\n  Bex (set (map prot_atom.Atom enum_class.enum)) P =\n  list_ex P (map prot_atom.Atom enum_class.enum)\n\ngoal (1 subgoal):\n 1. enum_class.enum_ex P = Bex UNIV P", "by (auto simp add: enum_ex_prot_atom_def)"], ["proof (state)\nthis:\n  enum_class.enum_ex ?P1 = Bex UNIV ?P1\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "lemma wellformed_transaction_cases:\n  assumes \"wellformed_transaction T\"\n  shows \n      \"(l,x) \\<in> set (transaction_receive T) \\<Longrightarrow> \\<exists>t. x = receive\\<langle>t\\<rangle>\" (is \"?A \\<Longrightarrow> ?A'\")\n      \"(l,x) \\<in> set (transaction_selects T) \\<Longrightarrow>\n             (\\<exists>t s. x = \\<langle>t := s\\<rangle>) \\<or> (\\<exists>t s. x = select\\<langle>t,s\\<rangle>)\" (is \"?B \\<Longrightarrow> ?B'\")\n      \"(l,x) \\<in> set (transaction_checks T) \\<Longrightarrow>\n              (\\<exists>t s. x = \\<langle>t == s\\<rangle>) \\<or> (\\<exists>t s. x = \\<langle>t in s\\<rangle>) \\<or> (\\<exists>X F G. x = \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\" (is \"?C \\<Longrightarrow> ?C'\")\n      \"(l,x) \\<in> set (transaction_updates T) \\<Longrightarrow>\n              (\\<exists>t s. x = insert\\<langle>t,s\\<rangle>) \\<or> (\\<exists>t s. x = delete\\<langle>t,s\\<rangle>)\" (is \"?D \\<Longrightarrow> ?D'\")\n      \"(l,x) \\<in> set (transaction_send T) \\<Longrightarrow> \\<exists>t. x = send\\<langle>t\\<rangle>\" (is \"?E \\<Longrightarrow> ?E'\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (((l, x) \\<in> set (transaction_receive T) \\<Longrightarrow>\n      \\<exists>t. x = receive\\<langle>t\\<rangle>) &&&\n     ((l, x) \\<in> set (transaction_selects T) \\<Longrightarrow>\n      (\\<exists>t s. x = \\<langle>t := s\\<rangle>) \\<or>\n      (\\<exists>t s. x = select\\<langle>t,s\\<rangle>))) &&&\n    ((l, x) \\<in> set (transaction_checks T) \\<Longrightarrow>\n     (\\<exists>t s. x = \\<langle>t == s\\<rangle>) \\<or>\n     (\\<exists>t s. x = \\<langle>t in s\\<rangle>) \\<or>\n     (\\<exists>X F G.\n         x =\n         \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)) &&&\n    ((l, x) \\<in> set (transaction_updates T) \\<Longrightarrow>\n     (\\<exists>t s. x = insert\\<langle>t,s\\<rangle>) \\<or>\n     (\\<exists>t s. x = delete\\<langle>t,s\\<rangle>)) &&&\n    ((l, x) \\<in> set (transaction_send T) \\<Longrightarrow>\n     \\<exists>t. x = send\\<langle>t\\<rangle>)", "proof -"], ["proof (state)\ngoal (5 subgoals):\n 1. (l, x) \\<in> set (transaction_receive T) \\<Longrightarrow>\n    \\<exists>t. x = receive\\<langle>t\\<rangle>\n 2. (l, x) \\<in> set (transaction_selects T) \\<Longrightarrow>\n    (\\<exists>t s. x = \\<langle>t := s\\<rangle>) \\<or>\n    (\\<exists>t s. x = select\\<langle>t,s\\<rangle>)\n 3. (l, x) \\<in> set (transaction_checks T) \\<Longrightarrow>\n    (\\<exists>t s. x = \\<langle>t == s\\<rangle>) \\<or>\n    (\\<exists>t s. x = \\<langle>t in s\\<rangle>) \\<or>\n    (\\<exists>X F G.\n        x = \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n 4. (l, x) \\<in> set (transaction_updates T) \\<Longrightarrow>\n    (\\<exists>t s. x = insert\\<langle>t,s\\<rangle>) \\<or>\n    (\\<exists>t s. x = delete\\<langle>t,s\\<rangle>)\n 5. (l, x) \\<in> set (transaction_send T) \\<Longrightarrow>\n    \\<exists>t. x = send\\<langle>t\\<rangle>", "have a:\n      \"list_all is_Receive (unlabel (transaction_receive T))\"\n      \"list_all is_Assignment (unlabel (transaction_selects T))\"\n      \"list_all is_Check (unlabel (transaction_checks T))\"\n      \"list_all is_Update (unlabel (transaction_updates T))\"\n      \"list_all is_Send (unlabel (transaction_send T))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (list_all stateful_strand_step.is_Receive\n      (unlabel (transaction_receive T)) &&&\n     list_all is_Assignment (unlabel (transaction_selects T))) &&&\n    list_all is_Check (unlabel (transaction_checks T)) &&&\n    list_all is_Update (unlabel (transaction_updates T)) &&&\n    list_all stateful_strand_step.is_Send (unlabel (transaction_send T))", "using assms"], ["proof (prove)\nusing this:\n  wellformed_transaction T\n\ngoal (1 subgoal):\n 1. (list_all stateful_strand_step.is_Receive\n      (unlabel (transaction_receive T)) &&&\n     list_all is_Assignment (unlabel (transaction_selects T))) &&&\n    list_all is_Check (unlabel (transaction_checks T)) &&&\n    list_all is_Update (unlabel (transaction_updates T)) &&&\n    list_all stateful_strand_step.is_Send (unlabel (transaction_send T))", "unfolding wellformed_transaction_def"], ["proof (prove)\nusing this:\n  list_all stateful_strand_step.is_Receive\n   (unlabel (transaction_receive T)) \\<and>\n  list_all is_Assignment (unlabel (transaction_selects T)) \\<and>\n  list_all is_Check (unlabel (transaction_checks T)) \\<and>\n  list_all is_Update (unlabel (transaction_updates T)) \\<and>\n  list_all stateful_strand_step.is_Send\n   (unlabel (transaction_send T)) \\<and>\n  set (transaction_fresh T)\n  \\<subseteq> fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n               (transaction_updates T) \\<union>\n              fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T) \\<and>\n  set (transaction_fresh T) \\<inter>\n  fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T) =\n  {} \\<and>\n  set (transaction_fresh T) \\<inter>\n  fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_selects T) =\n  {} \\<and>\n  fv_transaction T \\<inter> bvars_transaction T = {} \\<and>\n  fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_checks T)\n  \\<subseteq> fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n               (transaction_receive T) \\<union>\n              fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n               (transaction_selects T) \\<and>\n  fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_updates T) \\<union>\n  fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T) -\n  set (transaction_fresh T)\n  \\<subseteq> fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n               (transaction_receive T) \\<union>\n              fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n               (transaction_selects T) \\<and>\n  (\\<forall>x\\<in>set (unlabel (transaction_selects T)).\n      stateful_strand_step.is_Equality x \\<longrightarrow>\n      fv (the_rhs x)\n      \\<subseteq> fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                   (transaction_receive T))\n\ngoal (1 subgoal):\n 1. (list_all stateful_strand_step.is_Receive\n      (unlabel (transaction_receive T)) &&&\n     list_all is_Assignment (unlabel (transaction_selects T))) &&&\n    list_all is_Check (unlabel (transaction_checks T)) &&&\n    list_all is_Update (unlabel (transaction_updates T)) &&&\n    list_all stateful_strand_step.is_Send (unlabel (transaction_send T))", "by metis+"], ["proof (state)\nthis:\n  list_all stateful_strand_step.is_Receive (unlabel (transaction_receive T))\n  list_all is_Assignment (unlabel (transaction_selects T))\n  list_all is_Check (unlabel (transaction_checks T))\n  list_all is_Update (unlabel (transaction_updates T))\n  list_all stateful_strand_step.is_Send (unlabel (transaction_send T))\n\ngoal (5 subgoals):\n 1. (l, x) \\<in> set (transaction_receive T) \\<Longrightarrow>\n    \\<exists>t. x = receive\\<langle>t\\<rangle>\n 2. (l, x) \\<in> set (transaction_selects T) \\<Longrightarrow>\n    (\\<exists>t s. x = \\<langle>t := s\\<rangle>) \\<or>\n    (\\<exists>t s. x = select\\<langle>t,s\\<rangle>)\n 3. (l, x) \\<in> set (transaction_checks T) \\<Longrightarrow>\n    (\\<exists>t s. x = \\<langle>t == s\\<rangle>) \\<or>\n    (\\<exists>t s. x = \\<langle>t in s\\<rangle>) \\<or>\n    (\\<exists>X F G.\n        x = \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n 4. (l, x) \\<in> set (transaction_updates T) \\<Longrightarrow>\n    (\\<exists>t s. x = insert\\<langle>t,s\\<rangle>) \\<or>\n    (\\<exists>t s. x = delete\\<langle>t,s\\<rangle>)\n 5. (l, x) \\<in> set (transaction_send T) \\<Longrightarrow>\n    \\<exists>t. x = send\\<langle>t\\<rangle>", "note b = Ball_set unlabel_in"], ["proof (state)\nthis:\n  Ball (set ?xs) ?P = list_all ?P ?xs\n  (?l, ?x) \\<in> set ?A \\<Longrightarrow> ?x \\<in> set (unlabel ?A)\n\ngoal (5 subgoals):\n 1. (l, x) \\<in> set (transaction_receive T) \\<Longrightarrow>\n    \\<exists>t. x = receive\\<langle>t\\<rangle>\n 2. (l, x) \\<in> set (transaction_selects T) \\<Longrightarrow>\n    (\\<exists>t s. x = \\<langle>t := s\\<rangle>) \\<or>\n    (\\<exists>t s. x = select\\<langle>t,s\\<rangle>)\n 3. (l, x) \\<in> set (transaction_checks T) \\<Longrightarrow>\n    (\\<exists>t s. x = \\<langle>t == s\\<rangle>) \\<or>\n    (\\<exists>t s. x = \\<langle>t in s\\<rangle>) \\<or>\n    (\\<exists>X F G.\n        x = \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n 4. (l, x) \\<in> set (transaction_updates T) \\<Longrightarrow>\n    (\\<exists>t s. x = insert\\<langle>t,s\\<rangle>) \\<or>\n    (\\<exists>t s. x = delete\\<langle>t,s\\<rangle>)\n 5. (l, x) \\<in> set (transaction_send T) \\<Longrightarrow>\n    \\<exists>t. x = send\\<langle>t\\<rangle>", "note c = stateful_strand_step.collapse"], ["proof (state)\nthis:\n  stateful_strand_step.is_Send ?stateful_strand_step \\<Longrightarrow>\n  send\\<langle>the_msg ?stateful_strand_step\\<rangle> =\n  ?stateful_strand_step\n  stateful_strand_step.is_Receive ?stateful_strand_step \\<Longrightarrow>\n  receive\\<langle>the_msg ?stateful_strand_step\\<rangle> =\n  ?stateful_strand_step\n  stateful_strand_step.is_Equality ?stateful_strand_step \\<Longrightarrow>\n  \\<langle>the_check\n            ?stateful_strand_step: the_lhs\n                                    ?stateful_strand_step \\<doteq> the_rhs\n                              ?stateful_strand_step\\<rangle> =\n  ?stateful_strand_step\n  is_Insert ?stateful_strand_step \\<Longrightarrow>\n  insert\\<langle>the_elem_term\n                  ?stateful_strand_step,the_set_term\n   ?stateful_strand_step\\<rangle> =\n  ?stateful_strand_step\n  is_Delete ?stateful_strand_step \\<Longrightarrow>\n  delete\\<langle>the_elem_term\n                  ?stateful_strand_step,the_set_term\n   ?stateful_strand_step\\<rangle> =\n  ?stateful_strand_step\n  is_InSet ?stateful_strand_step \\<Longrightarrow>\n  \\<langle>the_check\n            ?stateful_strand_step: the_elem_term\n                                    ?stateful_strand_step \\<in> the_set_term\n                           ?stateful_strand_step\\<rangle> =\n  ?stateful_strand_step\n  is_NegChecks ?stateful_strand_step \\<Longrightarrow>\n  \\<forall>bvars\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n            ?stateful_strand_step\\<langle>\\<or>\\<noteq>: the_eqs\n                    ?stateful_strand_step \\<or>\\<notin>: the_ins\n                    ?stateful_strand_step\\<rangle> =\n  ?stateful_strand_step\n\ngoal (5 subgoals):\n 1. (l, x) \\<in> set (transaction_receive T) \\<Longrightarrow>\n    \\<exists>t. x = receive\\<langle>t\\<rangle>\n 2. (l, x) \\<in> set (transaction_selects T) \\<Longrightarrow>\n    (\\<exists>t s. x = \\<langle>t := s\\<rangle>) \\<or>\n    (\\<exists>t s. x = select\\<langle>t,s\\<rangle>)\n 3. (l, x) \\<in> set (transaction_checks T) \\<Longrightarrow>\n    (\\<exists>t s. x = \\<langle>t == s\\<rangle>) \\<or>\n    (\\<exists>t s. x = \\<langle>t in s\\<rangle>) \\<or>\n    (\\<exists>X F G.\n        x = \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n 4. (l, x) \\<in> set (transaction_updates T) \\<Longrightarrow>\n    (\\<exists>t s. x = insert\\<langle>t,s\\<rangle>) \\<or>\n    (\\<exists>t s. x = delete\\<langle>t,s\\<rangle>)\n 5. (l, x) \\<in> set (transaction_send T) \\<Longrightarrow>\n    \\<exists>t. x = send\\<langle>t\\<rangle>", "show \"?A \\<Longrightarrow> ?A'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (l, x) \\<in> set (transaction_receive T) \\<Longrightarrow>\n    \\<exists>t. x = receive\\<langle>t\\<rangle>", "by (metis (mono_tags, lifting) a(1) b c(2))"], ["proof (state)\nthis:\n  (l, x) \\<in> set (transaction_receive T) \\<Longrightarrow>\n  \\<exists>t. x = receive\\<langle>t\\<rangle>\n\ngoal (4 subgoals):\n 1. (l, x) \\<in> set (transaction_selects T) \\<Longrightarrow>\n    (\\<exists>t s. x = \\<langle>t := s\\<rangle>) \\<or>\n    (\\<exists>t s. x = select\\<langle>t,s\\<rangle>)\n 2. (l, x) \\<in> set (transaction_checks T) \\<Longrightarrow>\n    (\\<exists>t s. x = \\<langle>t == s\\<rangle>) \\<or>\n    (\\<exists>t s. x = \\<langle>t in s\\<rangle>) \\<or>\n    (\\<exists>X F G.\n        x = \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n 3. (l, x) \\<in> set (transaction_updates T) \\<Longrightarrow>\n    (\\<exists>t s. x = insert\\<langle>t,s\\<rangle>) \\<or>\n    (\\<exists>t s. x = delete\\<langle>t,s\\<rangle>)\n 4. (l, x) \\<in> set (transaction_send T) \\<Longrightarrow>\n    \\<exists>t. x = send\\<langle>t\\<rangle>", "show \"?B \\<Longrightarrow> ?B'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (l, x) \\<in> set (transaction_selects T) \\<Longrightarrow>\n    (\\<exists>t s. x = \\<langle>t := s\\<rangle>) \\<or>\n    (\\<exists>t s. x = select\\<langle>t,s\\<rangle>)", "by (metis (mono_tags, lifting) a(2) b c(3,6))"], ["proof (state)\nthis:\n  (l, x) \\<in> set (transaction_selects T) \\<Longrightarrow>\n  (\\<exists>t s. x = \\<langle>t := s\\<rangle>) \\<or>\n  (\\<exists>t s. x = select\\<langle>t,s\\<rangle>)\n\ngoal (3 subgoals):\n 1. (l, x) \\<in> set (transaction_checks T) \\<Longrightarrow>\n    (\\<exists>t s. x = \\<langle>t == s\\<rangle>) \\<or>\n    (\\<exists>t s. x = \\<langle>t in s\\<rangle>) \\<or>\n    (\\<exists>X F G.\n        x = \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n 2. (l, x) \\<in> set (transaction_updates T) \\<Longrightarrow>\n    (\\<exists>t s. x = insert\\<langle>t,s\\<rangle>) \\<or>\n    (\\<exists>t s. x = delete\\<langle>t,s\\<rangle>)\n 3. (l, x) \\<in> set (transaction_send T) \\<Longrightarrow>\n    \\<exists>t. x = send\\<langle>t\\<rangle>", "show \"?C \\<Longrightarrow> ?C'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (l, x) \\<in> set (transaction_checks T) \\<Longrightarrow>\n    (\\<exists>t s. x = \\<langle>t == s\\<rangle>) \\<or>\n    (\\<exists>t s. x = \\<langle>t in s\\<rangle>) \\<or>\n    (\\<exists>X F G.\n        x = \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)", "by (metis (mono_tags, lifting) a(3) b c(3,6,7))"], ["proof (state)\nthis:\n  (l, x) \\<in> set (transaction_checks T) \\<Longrightarrow>\n  (\\<exists>t s. x = \\<langle>t == s\\<rangle>) \\<or>\n  (\\<exists>t s. x = \\<langle>t in s\\<rangle>) \\<or>\n  (\\<exists>X F G.\n      x = \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n\ngoal (2 subgoals):\n 1. (l, x) \\<in> set (transaction_updates T) \\<Longrightarrow>\n    (\\<exists>t s. x = insert\\<langle>t,s\\<rangle>) \\<or>\n    (\\<exists>t s. x = delete\\<langle>t,s\\<rangle>)\n 2. (l, x) \\<in> set (transaction_send T) \\<Longrightarrow>\n    \\<exists>t. x = send\\<langle>t\\<rangle>", "show \"?D \\<Longrightarrow> ?D'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (l, x) \\<in> set (transaction_updates T) \\<Longrightarrow>\n    (\\<exists>t s. x = insert\\<langle>t,s\\<rangle>) \\<or>\n    (\\<exists>t s. x = delete\\<langle>t,s\\<rangle>)", "by (metis (mono_tags, lifting) a(4) b c(4,5))"], ["proof (state)\nthis:\n  (l, x) \\<in> set (transaction_updates T) \\<Longrightarrow>\n  (\\<exists>t s. x = insert\\<langle>t,s\\<rangle>) \\<or>\n  (\\<exists>t s. x = delete\\<langle>t,s\\<rangle>)\n\ngoal (1 subgoal):\n 1. (l, x) \\<in> set (transaction_send T) \\<Longrightarrow>\n    \\<exists>t. x = send\\<langle>t\\<rangle>", "show \"?E \\<Longrightarrow> ?E'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (l, x) \\<in> set (transaction_send T) \\<Longrightarrow>\n    \\<exists>t. x = send\\<langle>t\\<rangle>", "by (metis (mono_tags, lifting) a(5) b c(1))"], ["proof (state)\nthis:\n  (l, x) \\<in> set (transaction_send T) \\<Longrightarrow>\n  \\<exists>t. x = send\\<langle>t\\<rangle>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma wellformed_transaction_unlabel_cases:\n  assumes \"wellformed_transaction T\"\n  shows \n      \"x \\<in> set (unlabel (transaction_receive T)) \\<Longrightarrow> \\<exists>t. x = receive\\<langle>t\\<rangle>\" (is \"?A \\<Longrightarrow> ?A'\")\n      \"x \\<in> set (unlabel (transaction_selects T)) \\<Longrightarrow>\n             (\\<exists>t s. x = \\<langle>t := s\\<rangle>) \\<or> (\\<exists>t s. x = select\\<langle>t,s\\<rangle>)\" (is \"?B \\<Longrightarrow> ?B'\")\n      \"x \\<in> set (unlabel (transaction_checks T)) \\<Longrightarrow>\n              (\\<exists>t s. x = \\<langle>t == s\\<rangle>) \\<or> (\\<exists>t s. x = \\<langle>t in s\\<rangle>) \\<or> (\\<exists>X F G. x = \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\"\n        (is \"?C \\<Longrightarrow> ?C'\")\n      \"x \\<in> set (unlabel (transaction_updates T)) \\<Longrightarrow>\n              (\\<exists>t s. x = insert\\<langle>t,s\\<rangle>) \\<or> (\\<exists>t s. x = delete\\<langle>t,s\\<rangle>)\" (is \"?D \\<Longrightarrow> ?D'\")\n      \"x \\<in> set (unlabel (transaction_send T)) \\<Longrightarrow> \\<exists>t. x = send\\<langle>t\\<rangle>\" (is \"?E \\<Longrightarrow> ?E'\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((x \\<in> set (unlabel (transaction_receive T)) \\<Longrightarrow>\n      \\<exists>t. x = receive\\<langle>t\\<rangle>) &&&\n     (x \\<in> set (unlabel (transaction_selects T)) \\<Longrightarrow>\n      (\\<exists>t s. x = \\<langle>t := s\\<rangle>) \\<or>\n      (\\<exists>t s. x = select\\<langle>t,s\\<rangle>))) &&&\n    (x \\<in> set (unlabel (transaction_checks T)) \\<Longrightarrow>\n     (\\<exists>t s. x = \\<langle>t == s\\<rangle>) \\<or>\n     (\\<exists>t s. x = \\<langle>t in s\\<rangle>) \\<or>\n     (\\<exists>X F G.\n         x =\n         \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)) &&&\n    (x \\<in> set (unlabel (transaction_updates T)) \\<Longrightarrow>\n     (\\<exists>t s. x = insert\\<langle>t,s\\<rangle>) \\<or>\n     (\\<exists>t s. x = delete\\<langle>t,s\\<rangle>)) &&&\n    (x \\<in> set (unlabel (transaction_send T)) \\<Longrightarrow>\n     \\<exists>t. x = send\\<langle>t\\<rangle>)", "proof -"], ["proof (state)\ngoal (5 subgoals):\n 1. x \\<in> set (unlabel (transaction_receive T)) \\<Longrightarrow>\n    \\<exists>t. x = receive\\<langle>t\\<rangle>\n 2. x \\<in> set (unlabel (transaction_selects T)) \\<Longrightarrow>\n    (\\<exists>t s. x = \\<langle>t := s\\<rangle>) \\<or>\n    (\\<exists>t s. x = select\\<langle>t,s\\<rangle>)\n 3. x \\<in> set (unlabel (transaction_checks T)) \\<Longrightarrow>\n    (\\<exists>t s. x = \\<langle>t == s\\<rangle>) \\<or>\n    (\\<exists>t s. x = \\<langle>t in s\\<rangle>) \\<or>\n    (\\<exists>X F G.\n        x = \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n 4. x \\<in> set (unlabel (transaction_updates T)) \\<Longrightarrow>\n    (\\<exists>t s. x = insert\\<langle>t,s\\<rangle>) \\<or>\n    (\\<exists>t s. x = delete\\<langle>t,s\\<rangle>)\n 5. x \\<in> set (unlabel (transaction_send T)) \\<Longrightarrow>\n    \\<exists>t. x = send\\<langle>t\\<rangle>", "have a:\n      \"list_all is_Receive (unlabel (transaction_receive T))\"\n      \"list_all is_Assignment (unlabel (transaction_selects T))\"\n      \"list_all is_Check (unlabel (transaction_checks T))\"\n      \"list_all is_Update (unlabel (transaction_updates T))\"\n      \"list_all is_Send (unlabel (transaction_send T))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (list_all stateful_strand_step.is_Receive\n      (unlabel (transaction_receive T)) &&&\n     list_all is_Assignment (unlabel (transaction_selects T))) &&&\n    list_all is_Check (unlabel (transaction_checks T)) &&&\n    list_all is_Update (unlabel (transaction_updates T)) &&&\n    list_all stateful_strand_step.is_Send (unlabel (transaction_send T))", "using assms"], ["proof (prove)\nusing this:\n  wellformed_transaction T\n\ngoal (1 subgoal):\n 1. (list_all stateful_strand_step.is_Receive\n      (unlabel (transaction_receive T)) &&&\n     list_all is_Assignment (unlabel (transaction_selects T))) &&&\n    list_all is_Check (unlabel (transaction_checks T)) &&&\n    list_all is_Update (unlabel (transaction_updates T)) &&&\n    list_all stateful_strand_step.is_Send (unlabel (transaction_send T))", "unfolding wellformed_transaction_def"], ["proof (prove)\nusing this:\n  list_all stateful_strand_step.is_Receive\n   (unlabel (transaction_receive T)) \\<and>\n  list_all is_Assignment (unlabel (transaction_selects T)) \\<and>\n  list_all is_Check (unlabel (transaction_checks T)) \\<and>\n  list_all is_Update (unlabel (transaction_updates T)) \\<and>\n  list_all stateful_strand_step.is_Send\n   (unlabel (transaction_send T)) \\<and>\n  set (transaction_fresh T)\n  \\<subseteq> fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n               (transaction_updates T) \\<union>\n              fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T) \\<and>\n  set (transaction_fresh T) \\<inter>\n  fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T) =\n  {} \\<and>\n  set (transaction_fresh T) \\<inter>\n  fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_selects T) =\n  {} \\<and>\n  fv_transaction T \\<inter> bvars_transaction T = {} \\<and>\n  fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_checks T)\n  \\<subseteq> fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n               (transaction_receive T) \\<union>\n              fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n               (transaction_selects T) \\<and>\n  fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_updates T) \\<union>\n  fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T) -\n  set (transaction_fresh T)\n  \\<subseteq> fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n               (transaction_receive T) \\<union>\n              fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n               (transaction_selects T) \\<and>\n  (\\<forall>x\\<in>set (unlabel (transaction_selects T)).\n      stateful_strand_step.is_Equality x \\<longrightarrow>\n      fv (the_rhs x)\n      \\<subseteq> fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                   (transaction_receive T))\n\ngoal (1 subgoal):\n 1. (list_all stateful_strand_step.is_Receive\n      (unlabel (transaction_receive T)) &&&\n     list_all is_Assignment (unlabel (transaction_selects T))) &&&\n    list_all is_Check (unlabel (transaction_checks T)) &&&\n    list_all is_Update (unlabel (transaction_updates T)) &&&\n    list_all stateful_strand_step.is_Send (unlabel (transaction_send T))", "by metis+"], ["proof (state)\nthis:\n  list_all stateful_strand_step.is_Receive (unlabel (transaction_receive T))\n  list_all is_Assignment (unlabel (transaction_selects T))\n  list_all is_Check (unlabel (transaction_checks T))\n  list_all is_Update (unlabel (transaction_updates T))\n  list_all stateful_strand_step.is_Send (unlabel (transaction_send T))\n\ngoal (5 subgoals):\n 1. x \\<in> set (unlabel (transaction_receive T)) \\<Longrightarrow>\n    \\<exists>t. x = receive\\<langle>t\\<rangle>\n 2. x \\<in> set (unlabel (transaction_selects T)) \\<Longrightarrow>\n    (\\<exists>t s. x = \\<langle>t := s\\<rangle>) \\<or>\n    (\\<exists>t s. x = select\\<langle>t,s\\<rangle>)\n 3. x \\<in> set (unlabel (transaction_checks T)) \\<Longrightarrow>\n    (\\<exists>t s. x = \\<langle>t == s\\<rangle>) \\<or>\n    (\\<exists>t s. x = \\<langle>t in s\\<rangle>) \\<or>\n    (\\<exists>X F G.\n        x = \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n 4. x \\<in> set (unlabel (transaction_updates T)) \\<Longrightarrow>\n    (\\<exists>t s. x = insert\\<langle>t,s\\<rangle>) \\<or>\n    (\\<exists>t s. x = delete\\<langle>t,s\\<rangle>)\n 5. x \\<in> set (unlabel (transaction_send T)) \\<Longrightarrow>\n    \\<exists>t. x = send\\<langle>t\\<rangle>", "note b = Ball_set"], ["proof (state)\nthis:\n  Ball (set ?xs) ?P = list_all ?P ?xs\n\ngoal (5 subgoals):\n 1. x \\<in> set (unlabel (transaction_receive T)) \\<Longrightarrow>\n    \\<exists>t. x = receive\\<langle>t\\<rangle>\n 2. x \\<in> set (unlabel (transaction_selects T)) \\<Longrightarrow>\n    (\\<exists>t s. x = \\<langle>t := s\\<rangle>) \\<or>\n    (\\<exists>t s. x = select\\<langle>t,s\\<rangle>)\n 3. x \\<in> set (unlabel (transaction_checks T)) \\<Longrightarrow>\n    (\\<exists>t s. x = \\<langle>t == s\\<rangle>) \\<or>\n    (\\<exists>t s. x = \\<langle>t in s\\<rangle>) \\<or>\n    (\\<exists>X F G.\n        x = \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n 4. x \\<in> set (unlabel (transaction_updates T)) \\<Longrightarrow>\n    (\\<exists>t s. x = insert\\<langle>t,s\\<rangle>) \\<or>\n    (\\<exists>t s. x = delete\\<langle>t,s\\<rangle>)\n 5. x \\<in> set (unlabel (transaction_send T)) \\<Longrightarrow>\n    \\<exists>t. x = send\\<langle>t\\<rangle>", "note c = stateful_strand_step.collapse"], ["proof (state)\nthis:\n  stateful_strand_step.is_Send ?stateful_strand_step \\<Longrightarrow>\n  send\\<langle>the_msg ?stateful_strand_step\\<rangle> =\n  ?stateful_strand_step\n  stateful_strand_step.is_Receive ?stateful_strand_step \\<Longrightarrow>\n  receive\\<langle>the_msg ?stateful_strand_step\\<rangle> =\n  ?stateful_strand_step\n  stateful_strand_step.is_Equality ?stateful_strand_step \\<Longrightarrow>\n  \\<langle>the_check\n            ?stateful_strand_step: the_lhs\n                                    ?stateful_strand_step \\<doteq> the_rhs\n                              ?stateful_strand_step\\<rangle> =\n  ?stateful_strand_step\n  is_Insert ?stateful_strand_step \\<Longrightarrow>\n  insert\\<langle>the_elem_term\n                  ?stateful_strand_step,the_set_term\n   ?stateful_strand_step\\<rangle> =\n  ?stateful_strand_step\n  is_Delete ?stateful_strand_step \\<Longrightarrow>\n  delete\\<langle>the_elem_term\n                  ?stateful_strand_step,the_set_term\n   ?stateful_strand_step\\<rangle> =\n  ?stateful_strand_step\n  is_InSet ?stateful_strand_step \\<Longrightarrow>\n  \\<langle>the_check\n            ?stateful_strand_step: the_elem_term\n                                    ?stateful_strand_step \\<in> the_set_term\n                           ?stateful_strand_step\\<rangle> =\n  ?stateful_strand_step\n  is_NegChecks ?stateful_strand_step \\<Longrightarrow>\n  \\<forall>bvars\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n            ?stateful_strand_step\\<langle>\\<or>\\<noteq>: the_eqs\n                    ?stateful_strand_step \\<or>\\<notin>: the_ins\n                    ?stateful_strand_step\\<rangle> =\n  ?stateful_strand_step\n\ngoal (5 subgoals):\n 1. x \\<in> set (unlabel (transaction_receive T)) \\<Longrightarrow>\n    \\<exists>t. x = receive\\<langle>t\\<rangle>\n 2. x \\<in> set (unlabel (transaction_selects T)) \\<Longrightarrow>\n    (\\<exists>t s. x = \\<langle>t := s\\<rangle>) \\<or>\n    (\\<exists>t s. x = select\\<langle>t,s\\<rangle>)\n 3. x \\<in> set (unlabel (transaction_checks T)) \\<Longrightarrow>\n    (\\<exists>t s. x = \\<langle>t == s\\<rangle>) \\<or>\n    (\\<exists>t s. x = \\<langle>t in s\\<rangle>) \\<or>\n    (\\<exists>X F G.\n        x = \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n 4. x \\<in> set (unlabel (transaction_updates T)) \\<Longrightarrow>\n    (\\<exists>t s. x = insert\\<langle>t,s\\<rangle>) \\<or>\n    (\\<exists>t s. x = delete\\<langle>t,s\\<rangle>)\n 5. x \\<in> set (unlabel (transaction_send T)) \\<Longrightarrow>\n    \\<exists>t. x = send\\<langle>t\\<rangle>", "show \"?A \\<Longrightarrow> ?A'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> set (unlabel (transaction_receive T)) \\<Longrightarrow>\n    \\<exists>t. x = receive\\<langle>t\\<rangle>", "by (metis (mono_tags, lifting) a(1) b c(2))"], ["proof (state)\nthis:\n  x \\<in> set (unlabel (transaction_receive T)) \\<Longrightarrow>\n  \\<exists>t. x = receive\\<langle>t\\<rangle>\n\ngoal (4 subgoals):\n 1. x \\<in> set (unlabel (transaction_selects T)) \\<Longrightarrow>\n    (\\<exists>t s. x = \\<langle>t := s\\<rangle>) \\<or>\n    (\\<exists>t s. x = select\\<langle>t,s\\<rangle>)\n 2. x \\<in> set (unlabel (transaction_checks T)) \\<Longrightarrow>\n    (\\<exists>t s. x = \\<langle>t == s\\<rangle>) \\<or>\n    (\\<exists>t s. x = \\<langle>t in s\\<rangle>) \\<or>\n    (\\<exists>X F G.\n        x = \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n 3. x \\<in> set (unlabel (transaction_updates T)) \\<Longrightarrow>\n    (\\<exists>t s. x = insert\\<langle>t,s\\<rangle>) \\<or>\n    (\\<exists>t s. x = delete\\<langle>t,s\\<rangle>)\n 4. x \\<in> set (unlabel (transaction_send T)) \\<Longrightarrow>\n    \\<exists>t. x = send\\<langle>t\\<rangle>", "show \"?B \\<Longrightarrow> ?B'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> set (unlabel (transaction_selects T)) \\<Longrightarrow>\n    (\\<exists>t s. x = \\<langle>t := s\\<rangle>) \\<or>\n    (\\<exists>t s. x = select\\<langle>t,s\\<rangle>)", "by (metis (mono_tags, lifting) a(2) b c(3,6))"], ["proof (state)\nthis:\n  x \\<in> set (unlabel (transaction_selects T)) \\<Longrightarrow>\n  (\\<exists>t s. x = \\<langle>t := s\\<rangle>) \\<or>\n  (\\<exists>t s. x = select\\<langle>t,s\\<rangle>)\n\ngoal (3 subgoals):\n 1. x \\<in> set (unlabel (transaction_checks T)) \\<Longrightarrow>\n    (\\<exists>t s. x = \\<langle>t == s\\<rangle>) \\<or>\n    (\\<exists>t s. x = \\<langle>t in s\\<rangle>) \\<or>\n    (\\<exists>X F G.\n        x = \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n 2. x \\<in> set (unlabel (transaction_updates T)) \\<Longrightarrow>\n    (\\<exists>t s. x = insert\\<langle>t,s\\<rangle>) \\<or>\n    (\\<exists>t s. x = delete\\<langle>t,s\\<rangle>)\n 3. x \\<in> set (unlabel (transaction_send T)) \\<Longrightarrow>\n    \\<exists>t. x = send\\<langle>t\\<rangle>", "show \"?C \\<Longrightarrow> ?C'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> set (unlabel (transaction_checks T)) \\<Longrightarrow>\n    (\\<exists>t s. x = \\<langle>t == s\\<rangle>) \\<or>\n    (\\<exists>t s. x = \\<langle>t in s\\<rangle>) \\<or>\n    (\\<exists>X F G.\n        x = \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)", "by (metis (mono_tags, lifting) a(3) b c(3,6,7))"], ["proof (state)\nthis:\n  x \\<in> set (unlabel (transaction_checks T)) \\<Longrightarrow>\n  (\\<exists>t s. x = \\<langle>t == s\\<rangle>) \\<or>\n  (\\<exists>t s. x = \\<langle>t in s\\<rangle>) \\<or>\n  (\\<exists>X F G.\n      x = \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n\ngoal (2 subgoals):\n 1. x \\<in> set (unlabel (transaction_updates T)) \\<Longrightarrow>\n    (\\<exists>t s. x = insert\\<langle>t,s\\<rangle>) \\<or>\n    (\\<exists>t s. x = delete\\<langle>t,s\\<rangle>)\n 2. x \\<in> set (unlabel (transaction_send T)) \\<Longrightarrow>\n    \\<exists>t. x = send\\<langle>t\\<rangle>", "show \"?D \\<Longrightarrow> ?D'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> set (unlabel (transaction_updates T)) \\<Longrightarrow>\n    (\\<exists>t s. x = insert\\<langle>t,s\\<rangle>) \\<or>\n    (\\<exists>t s. x = delete\\<langle>t,s\\<rangle>)", "by (metis (mono_tags, lifting) a(4) b c(4,5))"], ["proof (state)\nthis:\n  x \\<in> set (unlabel (transaction_updates T)) \\<Longrightarrow>\n  (\\<exists>t s. x = insert\\<langle>t,s\\<rangle>) \\<or>\n  (\\<exists>t s. x = delete\\<langle>t,s\\<rangle>)\n\ngoal (1 subgoal):\n 1. x \\<in> set (unlabel (transaction_send T)) \\<Longrightarrow>\n    \\<exists>t. x = send\\<langle>t\\<rangle>", "show \"?E \\<Longrightarrow> ?E'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> set (unlabel (transaction_send T)) \\<Longrightarrow>\n    \\<exists>t. x = send\\<langle>t\\<rangle>", "by (metis (mono_tags, lifting) a(5) b c(1))"], ["proof (state)\nthis:\n  x \\<in> set (unlabel (transaction_send T)) \\<Longrightarrow>\n  \\<exists>t. x = send\\<langle>t\\<rangle>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma transaction_strand_subsets[simp]:\n  \"set (transaction_receive T) \\<subseteq> set (transaction_strand T)\"\n  \"set (transaction_selects T) \\<subseteq> set (transaction_strand T)\"\n  \"set (transaction_checks T) \\<subseteq> set (transaction_strand T)\"\n  \"set (transaction_updates T) \\<subseteq> set (transaction_strand T)\"\n  \"set (transaction_send T) \\<subseteq> set (transaction_strand T)\"\n  \"set (unlabel (transaction_receive T)) \\<subseteq> set (unlabel (transaction_strand T))\"\n  \"set (unlabel (transaction_selects T)) \\<subseteq> set (unlabel (transaction_strand T))\"\n  \"set (unlabel (transaction_checks T)) \\<subseteq> set (unlabel (transaction_strand T))\"\n  \"set (unlabel (transaction_updates T)) \\<subseteq> set (unlabel (transaction_strand T))\"\n  \"set (unlabel (transaction_send T)) \\<subseteq> set (unlabel (transaction_strand T))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((set (transaction_receive T) \\<subseteq> set (transaction_strand T) &&&\n      set (transaction_selects T)\n      \\<subseteq> set (transaction_strand T)) &&&\n     set (transaction_checks T) \\<subseteq> set (transaction_strand T) &&&\n     set (transaction_updates T) \\<subseteq> set (transaction_strand T) &&&\n     set (transaction_send T) \\<subseteq> set (transaction_strand T)) &&&\n    (set (unlabel (transaction_receive T))\n     \\<subseteq> set (unlabel (transaction_strand T)) &&&\n     set (unlabel (transaction_selects T))\n     \\<subseteq> set (unlabel (transaction_strand T))) &&&\n    set (unlabel (transaction_checks T))\n    \\<subseteq> set (unlabel (transaction_strand T)) &&&\n    set (unlabel (transaction_updates T))\n    \\<subseteq> set (unlabel (transaction_strand T)) &&&\n    set (unlabel (transaction_send T))\n    \\<subseteq> set (unlabel (transaction_strand T))", "unfolding transaction_strand_def unlabel_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((set (transaction_receive T)\n      \\<subseteq> set (transaction_receive T @\n                       transaction_selects T @\n                       transaction_checks T @\n                       transaction_updates T @ transaction_send T) &&&\n      set (transaction_selects T)\n      \\<subseteq> set (transaction_receive T @\n                       transaction_selects T @\n                       transaction_checks T @\n                       transaction_updates T @ transaction_send T)) &&&\n     set (transaction_checks T)\n     \\<subseteq> set (transaction_receive T @\n                      transaction_selects T @\n                      transaction_checks T @\n                      transaction_updates T @ transaction_send T) &&&\n     set (transaction_updates T)\n     \\<subseteq> set (transaction_receive T @\n                      transaction_selects T @\n                      transaction_checks T @\n                      transaction_updates T @ transaction_send T) &&&\n     set (transaction_send T)\n     \\<subseteq> set (transaction_receive T @\n                      transaction_selects T @\n                      transaction_checks T @\n                      transaction_updates T @ transaction_send T)) &&&\n    (set (map snd (transaction_receive T))\n     \\<subseteq> set (map snd\n                       (transaction_receive T @\n                        transaction_selects T @\n                        transaction_checks T @\n                        transaction_updates T @ transaction_send T)) &&&\n     set (map snd (transaction_selects T))\n     \\<subseteq> set (map snd\n                       (transaction_receive T @\n                        transaction_selects T @\n                        transaction_checks T @\n                        transaction_updates T @ transaction_send T))) &&&\n    set (map snd (transaction_checks T))\n    \\<subseteq> set (map snd\n                      (transaction_receive T @\n                       transaction_selects T @\n                       transaction_checks T @\n                       transaction_updates T @ transaction_send T)) &&&\n    set (map snd (transaction_updates T))\n    \\<subseteq> set (map snd\n                      (transaction_receive T @\n                       transaction_selects T @\n                       transaction_checks T @\n                       transaction_updates T @ transaction_send T)) &&&\n    set (map snd (transaction_send T))\n    \\<subseteq> set (map snd\n                      (transaction_receive T @\n                       transaction_selects T @\n                       transaction_checks T @\n                       transaction_updates T @ transaction_send T))", "by force+"], ["", "lemma transaction_strand_subst_subsets[simp]:\n  \"set (transaction_receive T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>) \\<subseteq> set (transaction_strand T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>)\"\n  \"set (transaction_selects T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>) \\<subseteq> set (transaction_strand T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>)\"\n  \"set (transaction_checks T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>) \\<subseteq> set (transaction_strand T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>)\"\n  \"set (transaction_updates T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>) \\<subseteq> set (transaction_strand T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>)\"\n  \"set (transaction_send T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>) \\<subseteq> set (transaction_strand T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>)\"\n  \"set (unlabel (transaction_receive T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>)) \\<subseteq> set (unlabel (transaction_strand T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>))\"\n  \"set (unlabel (transaction_selects T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>)) \\<subseteq> set (unlabel (transaction_strand T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>))\"\n  \"set (unlabel (transaction_checks T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>)) \\<subseteq> set (unlabel (transaction_strand T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>))\"\n  \"set (unlabel (transaction_updates T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>)) \\<subseteq> set (unlabel (transaction_strand T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>))\"\n  \"set (unlabel (transaction_send T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>)) \\<subseteq> set (unlabel (transaction_strand T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((set (transaction_receive T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n           \\<theta>)\n      \\<subseteq> set (transaction_strand\n                        T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                       \\<theta>) &&&\n      set (transaction_selects T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n           \\<theta>)\n      \\<subseteq> set (transaction_strand\n                        T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                       \\<theta>)) &&&\n     set (transaction_checks T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n          \\<theta>)\n     \\<subseteq> set (transaction_strand\n                       T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                      \\<theta>) &&&\n     set (transaction_updates T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n          \\<theta>)\n     \\<subseteq> set (transaction_strand\n                       T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                      \\<theta>) &&&\n     set (transaction_send T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n          \\<theta>)\n     \\<subseteq> set (transaction_strand\n                       T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                      \\<theta>)) &&&\n    (set (unlabel\n           (transaction_receive T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n            \\<theta>))\n     \\<subseteq> set (unlabel\n                       (transaction_strand\n                         T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                        \\<theta>)) &&&\n     set (unlabel\n           (transaction_selects T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n            \\<theta>))\n     \\<subseteq> set (unlabel\n                       (transaction_strand\n                         T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                        \\<theta>))) &&&\n    set (unlabel\n          (transaction_checks T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n           \\<theta>))\n    \\<subseteq> set (unlabel\n                      (transaction_strand\n                        T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                       \\<theta>)) &&&\n    set (unlabel\n          (transaction_updates T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n           \\<theta>))\n    \\<subseteq> set (unlabel\n                      (transaction_strand\n                        T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                       \\<theta>)) &&&\n    set (unlabel\n          (transaction_send T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n           \\<theta>))\n    \\<subseteq> set (unlabel\n                      (transaction_strand\n                        T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                       \\<theta>))", "unfolding transaction_strand_def unlabel_def subst_apply_labeled_stateful_strand_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((set (map (\\<lambda>x.\n                   x \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n                   \\<theta>)\n            (transaction_receive T))\n      \\<subseteq> set (map (\\<lambda>x.\n                               x \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n                               \\<theta>)\n                        (transaction_receive T @\n                         transaction_selects T @\n                         transaction_checks T @\n                         transaction_updates T @ transaction_send T)) &&&\n      set (map (\\<lambda>x.\n                   x \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n                   \\<theta>)\n            (transaction_selects T))\n      \\<subseteq> set (map (\\<lambda>x.\n                               x \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n                               \\<theta>)\n                        (transaction_receive T @\n                         transaction_selects T @\n                         transaction_checks T @\n                         transaction_updates T @ transaction_send T))) &&&\n     set (map (\\<lambda>x.\n                  x \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n                  \\<theta>)\n           (transaction_checks T))\n     \\<subseteq> set (map (\\<lambda>x.\n                              x \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n                              \\<theta>)\n                       (transaction_receive T @\n                        transaction_selects T @\n                        transaction_checks T @\n                        transaction_updates T @ transaction_send T)) &&&\n     set (map (\\<lambda>x.\n                  x \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n                  \\<theta>)\n           (transaction_updates T))\n     \\<subseteq> set (map (\\<lambda>x.\n                              x \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n                              \\<theta>)\n                       (transaction_receive T @\n                        transaction_selects T @\n                        transaction_checks T @\n                        transaction_updates T @ transaction_send T)) &&&\n     set (map (\\<lambda>x.\n                  x \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n                  \\<theta>)\n           (transaction_send T))\n     \\<subseteq> set (map (\\<lambda>x.\n                              x \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n                              \\<theta>)\n                       (transaction_receive T @\n                        transaction_selects T @\n                        transaction_checks T @\n                        transaction_updates T @ transaction_send T))) &&&\n    (set (map snd\n           (map (\\<lambda>x.\n                    x \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n                    \\<theta>)\n             (transaction_receive T)))\n     \\<subseteq> set (map snd\n                       (map (\\<lambda>x.\n                                x \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n                                \\<theta>)\n                         (transaction_receive T @\n                          transaction_selects T @\n                          transaction_checks T @\n                          transaction_updates T @ transaction_send T))) &&&\n     set (map snd\n           (map (\\<lambda>x.\n                    x \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n                    \\<theta>)\n             (transaction_selects T)))\n     \\<subseteq> set (map snd\n                       (map (\\<lambda>x.\n                                x \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n                                \\<theta>)\n                         (transaction_receive T @\n                          transaction_selects T @\n                          transaction_checks T @\n                          transaction_updates T @ transaction_send T)))) &&&\n    set (map snd\n          (map (\\<lambda>x.\n                   x \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n                   \\<theta>)\n            (transaction_checks T)))\n    \\<subseteq> set (map snd\n                      (map (\\<lambda>x.\n                               x \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n                               \\<theta>)\n                        (transaction_receive T @\n                         transaction_selects T @\n                         transaction_checks T @\n                         transaction_updates T @ transaction_send T))) &&&\n    set (map snd\n          (map (\\<lambda>x.\n                   x \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n                   \\<theta>)\n            (transaction_updates T)))\n    \\<subseteq> set (map snd\n                      (map (\\<lambda>x.\n                               x \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n                               \\<theta>)\n                        (transaction_receive T @\n                         transaction_selects T @\n                         transaction_checks T @\n                         transaction_updates T @ transaction_send T))) &&&\n    set (map snd\n          (map (\\<lambda>x.\n                   x \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n                   \\<theta>)\n            (transaction_send T)))\n    \\<subseteq> set (map snd\n                      (map (\\<lambda>x.\n                               x \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n                               \\<theta>)\n                        (transaction_receive T @\n                         transaction_selects T @\n                         transaction_checks T @\n                         transaction_updates T @ transaction_send T)))", "by force+"], ["", "lemma transaction_dual_subst_unfold:\n  \"unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_strand T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>)) =\n    unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>))@\n    unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_selects T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>))@\n    unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_checks T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>))@\n    unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_updates T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>))@\n    unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. unlabel\n     (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n       (transaction_strand T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n        \\<theta>)) =\n    unlabel\n     (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n       (transaction_receive T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n        \\<theta>)) @\n    unlabel\n     (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n       (transaction_selects T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n        \\<theta>)) @\n    unlabel\n     (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n       (transaction_checks T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n        \\<theta>)) @\n    unlabel\n     (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n       (transaction_updates T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n        \\<theta>)) @\n    unlabel\n     (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n       (transaction_send T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n        \\<theta>))", "by (simp add: transaction_strand_def unlabel_append dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t_append subst_lsst_append)"], ["", "lemma trms_transaction_unfold:\n  \"trms_transaction T =\n      trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T) \\<union> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_selects T) \\<union>\n      trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_checks T) \\<union> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_updates T) \\<union>\n      trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. trms_transaction T =\n    trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T) \\<union>\n    trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_selects T) \\<union>\n    trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_checks T) \\<union>\n    trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_updates T) \\<union>\n    trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T)", "by (metis trms\\<^sub>s\\<^sub>s\\<^sub>t_append unlabel_append append_assoc transaction_strand_def)"], ["", "lemma trms_transaction_subst_unfold:\n  \"trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_strand T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>) =\n      trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>) \\<union> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_selects T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>) \\<union>\n      trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_checks T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>) \\<union> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_updates T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>) \\<union>\n      trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (transaction_strand T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n      \\<theta>) =\n    trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (transaction_receive T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n      \\<theta>) \\<union>\n    trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (transaction_selects T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n      \\<theta>) \\<union>\n    trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (transaction_checks T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n      \\<theta>) \\<union>\n    trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (transaction_updates T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n      \\<theta>) \\<union>\n    trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (transaction_send T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>)", "by (metis trms\\<^sub>s\\<^sub>s\\<^sub>t_append unlabel_append append_assoc transaction_strand_def subst_lsst_append)"], ["", "lemma vars_transaction_unfold:\n  \"vars_transaction T =\n      vars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T) \\<union> vars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_selects T) \\<union>\n      vars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_checks T) \\<union> vars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_updates T) \\<union>\n      vars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vars_transaction T =\n    vars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T) \\<union>\n    vars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_selects T) \\<union>\n    vars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_checks T) \\<union>\n    vars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_updates T) \\<union>\n    vars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T)", "by (metis vars\\<^sub>s\\<^sub>s\\<^sub>t_append unlabel_append append_assoc transaction_strand_def)"], ["", "lemma vars_transaction_subst_unfold:\n  \"vars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_strand T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>) =\n      vars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>) \\<union> vars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_selects T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>) \\<union>\n      vars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_checks T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>) \\<union> vars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_updates T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>) \\<union>\n      vars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (transaction_strand T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n      \\<theta>) =\n    vars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (transaction_receive T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n      \\<theta>) \\<union>\n    vars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (transaction_selects T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n      \\<theta>) \\<union>\n    vars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (transaction_checks T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n      \\<theta>) \\<union>\n    vars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (transaction_updates T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n      \\<theta>) \\<union>\n    vars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (transaction_send T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>)", "by (metis vars\\<^sub>s\\<^sub>s\\<^sub>t_append unlabel_append append_assoc transaction_strand_def subst_lsst_append)"], ["", "lemma fv_transaction_unfold:\n  \"fv_transaction T =\n      fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T) \\<union> fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_selects T) \\<union>\n      fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_checks T) \\<union> fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_updates T) \\<union>\n      fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fv_transaction T =\n    fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T) \\<union>\n    fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_selects T) \\<union>\n    fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_checks T) \\<union>\n    fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_updates T) \\<union>\n    fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T)", "by (metis fv\\<^sub>s\\<^sub>s\\<^sub>t_append unlabel_append append_assoc transaction_strand_def)"], ["", "lemma fv_transaction_subst_unfold:\n  \"fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_strand T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>) =\n      fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>) \\<union> fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_selects T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>) \\<union>\n      fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_checks T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>) \\<union> fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_updates T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>) \\<union>\n      fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (transaction_strand T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n      \\<theta>) =\n    fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (transaction_receive T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n      \\<theta>) \\<union>\n    fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (transaction_selects T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n      \\<theta>) \\<union>\n    fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (transaction_checks T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n      \\<theta>) \\<union>\n    fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (transaction_updates T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n      \\<theta>) \\<union>\n    fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (transaction_send T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>)", "by (metis fv\\<^sub>s\\<^sub>s\\<^sub>t_append unlabel_append append_assoc transaction_strand_def subst_lsst_append)"], ["", "lemma fv_wellformed_transaction_unfold:\n  assumes \"wellformed_transaction T\"\n  shows \"fv_transaction T =\n    fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T) \\<union> fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_selects T) \\<union> set (transaction_fresh T)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fv_transaction T =\n    fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T) \\<union>\n    fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_selects T) \\<union>\n    set (transaction_fresh T)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. fv_transaction T =\n    fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T) \\<union>\n    fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_selects T) \\<union>\n    set (transaction_fresh T)", "let ?A = \"set (transaction_fresh T)\""], ["proof (state)\ngoal (1 subgoal):\n 1. fv_transaction T =\n    fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T) \\<union>\n    fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_selects T) \\<union>\n    set (transaction_fresh T)", "let ?B = \"fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_updates T)\""], ["proof (state)\ngoal (1 subgoal):\n 1. fv_transaction T =\n    fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T) \\<union>\n    fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_selects T) \\<union>\n    set (transaction_fresh T)", "let ?C = \"fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T)\""], ["proof (state)\ngoal (1 subgoal):\n 1. fv_transaction T =\n    fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T) \\<union>\n    fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_selects T) \\<union>\n    set (transaction_fresh T)", "let ?D = \"fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T)\""], ["proof (state)\ngoal (1 subgoal):\n 1. fv_transaction T =\n    fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T) \\<union>\n    fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_selects T) \\<union>\n    set (transaction_fresh T)", "let ?E = \"fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_selects T)\""], ["proof (state)\ngoal (1 subgoal):\n 1. fv_transaction T =\n    fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T) \\<union>\n    fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_selects T) \\<union>\n    set (transaction_fresh T)", "let ?F = \"fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_checks T)\""], ["proof (state)\ngoal (1 subgoal):\n 1. fv_transaction T =\n    fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T) \\<union>\n    fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_selects T) \\<union>\n    set (transaction_fresh T)", "have \"?A \\<subseteq> ?B \\<union> ?C\" \"?A \\<inter> ?D = {}\" \"?A \\<inter> ?E = {}\" \"?F \\<subseteq> ?D \\<union> ?E\" \"?B \\<union> ?C - ?A \\<subseteq> ?D \\<union> ?E\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (set (transaction_fresh T)\n     \\<subseteq> fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                  (transaction_updates T) \\<union>\n                 fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T) &&&\n     set (transaction_fresh T) \\<inter>\n     fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T) =\n     {}) &&&\n    set (transaction_fresh T) \\<inter>\n    fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_selects T) =\n    {} &&&\n    fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_checks T)\n    \\<subseteq> fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                 (transaction_receive T) \\<union>\n                fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                 (transaction_selects T) &&&\n    fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_updates T) \\<union>\n    fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T) -\n    set (transaction_fresh T)\n    \\<subseteq> fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                 (transaction_receive T) \\<union>\n                fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_selects T)", "using assms"], ["proof (prove)\nusing this:\n  wellformed_transaction T\n\ngoal (1 subgoal):\n 1. (set (transaction_fresh T)\n     \\<subseteq> fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                  (transaction_updates T) \\<union>\n                 fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T) &&&\n     set (transaction_fresh T) \\<inter>\n     fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T) =\n     {}) &&&\n    set (transaction_fresh T) \\<inter>\n    fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_selects T) =\n    {} &&&\n    fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_checks T)\n    \\<subseteq> fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                 (transaction_receive T) \\<union>\n                fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                 (transaction_selects T) &&&\n    fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_updates T) \\<union>\n    fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T) -\n    set (transaction_fresh T)\n    \\<subseteq> fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                 (transaction_receive T) \\<union>\n                fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_selects T)", "unfolding wellformed_transaction_def"], ["proof (prove)\nusing this:\n  list_all stateful_strand_step.is_Receive\n   (unlabel (transaction_receive T)) \\<and>\n  list_all is_Assignment (unlabel (transaction_selects T)) \\<and>\n  list_all is_Check (unlabel (transaction_checks T)) \\<and>\n  list_all is_Update (unlabel (transaction_updates T)) \\<and>\n  list_all stateful_strand_step.is_Send\n   (unlabel (transaction_send T)) \\<and>\n  set (transaction_fresh T)\n  \\<subseteq> fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n               (transaction_updates T) \\<union>\n              fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T) \\<and>\n  set (transaction_fresh T) \\<inter>\n  fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T) =\n  {} \\<and>\n  set (transaction_fresh T) \\<inter>\n  fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_selects T) =\n  {} \\<and>\n  fv_transaction T \\<inter> bvars_transaction T = {} \\<and>\n  fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_checks T)\n  \\<subseteq> fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n               (transaction_receive T) \\<union>\n              fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n               (transaction_selects T) \\<and>\n  fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_updates T) \\<union>\n  fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T) -\n  set (transaction_fresh T)\n  \\<subseteq> fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n               (transaction_receive T) \\<union>\n              fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n               (transaction_selects T) \\<and>\n  (\\<forall>x\\<in>set (unlabel (transaction_selects T)).\n      stateful_strand_step.is_Equality x \\<longrightarrow>\n      fv (the_rhs x)\n      \\<subseteq> fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                   (transaction_receive T))\n\ngoal (1 subgoal):\n 1. (set (transaction_fresh T)\n     \\<subseteq> fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                  (transaction_updates T) \\<union>\n                 fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T) &&&\n     set (transaction_fresh T) \\<inter>\n     fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T) =\n     {}) &&&\n    set (transaction_fresh T) \\<inter>\n    fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_selects T) =\n    {} &&&\n    fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_checks T)\n    \\<subseteq> fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                 (transaction_receive T) \\<union>\n                fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                 (transaction_selects T) &&&\n    fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_updates T) \\<union>\n    fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T) -\n    set (transaction_fresh T)\n    \\<subseteq> fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                 (transaction_receive T) \\<union>\n                fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_selects T)", "by fast+"], ["proof (state)\nthis:\n  set (transaction_fresh T)\n  \\<subseteq> fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n               (transaction_updates T) \\<union>\n              fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T)\n  set (transaction_fresh T) \\<inter>\n  fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T) =\n  {}\n  set (transaction_fresh T) \\<inter>\n  fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_selects T) =\n  {}\n  fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_checks T)\n  \\<subseteq> fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n               (transaction_receive T) \\<union>\n              fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_selects T)\n  fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_updates T) \\<union>\n  fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T) -\n  set (transaction_fresh T)\n  \\<subseteq> fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n               (transaction_receive T) \\<union>\n              fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_selects T)\n\ngoal (1 subgoal):\n 1. fv_transaction T =\n    fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T) \\<union>\n    fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_selects T) \\<union>\n    set (transaction_fresh T)", "thus ?thesis"], ["proof (prove)\nusing this:\n  set (transaction_fresh T)\n  \\<subseteq> fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n               (transaction_updates T) \\<union>\n              fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T)\n  set (transaction_fresh T) \\<inter>\n  fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T) =\n  {}\n  set (transaction_fresh T) \\<inter>\n  fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_selects T) =\n  {}\n  fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_checks T)\n  \\<subseteq> fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n               (transaction_receive T) \\<union>\n              fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_selects T)\n  fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_updates T) \\<union>\n  fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T) -\n  set (transaction_fresh T)\n  \\<subseteq> fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n               (transaction_receive T) \\<union>\n              fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_selects T)\n\ngoal (1 subgoal):\n 1. fv_transaction T =\n    fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T) \\<union>\n    fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_selects T) \\<union>\n    set (transaction_fresh T)", "using fv_transaction_unfold"], ["proof (prove)\nusing this:\n  set (transaction_fresh T)\n  \\<subseteq> fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n               (transaction_updates T) \\<union>\n              fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T)\n  set (transaction_fresh T) \\<inter>\n  fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T) =\n  {}\n  set (transaction_fresh T) \\<inter>\n  fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_selects T) =\n  {}\n  fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_checks T)\n  \\<subseteq> fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n               (transaction_receive T) \\<union>\n              fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_selects T)\n  fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_updates T) \\<union>\n  fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T) -\n  set (transaction_fresh T)\n  \\<subseteq> fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n               (transaction_receive T) \\<union>\n              fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_selects T)\n  fv_transaction ?T =\n  fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive ?T) \\<union>\n  fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_selects ?T) \\<union>\n  fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_checks ?T) \\<union>\n  fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_updates ?T) \\<union>\n  fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send ?T)\n\ngoal (1 subgoal):\n 1. fv_transaction T =\n    fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T) \\<union>\n    fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_selects T) \\<union>\n    set (transaction_fresh T)", "by blast"], ["proof (state)\nthis:\n  fv_transaction T =\n  fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T) \\<union>\n  fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_selects T) \\<union>\n  set (transaction_fresh T)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma bvars_transaction_unfold:\n  \"bvars_transaction T =\n      bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T) \\<union> bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_selects T) \\<union>\n      bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_checks T) \\<union> bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_updates T) \\<union>\n      bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bvars_transaction T =\n    bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T) \\<union>\n    bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_selects T) \\<union>\n    bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_checks T) \\<union>\n    bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_updates T) \\<union>\n    bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T)", "by (metis bvars\\<^sub>s\\<^sub>s\\<^sub>t_append unlabel_append append_assoc transaction_strand_def)"], ["", "lemma bvars_transaction_subst_unfold:\n  \"bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_strand T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>) =\n      bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>) \\<union> bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_selects T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>) \\<union>\n      bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_checks T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>) \\<union> bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_updates T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>) \\<union>\n      bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (transaction_strand T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n      \\<theta>) =\n    bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (transaction_receive T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n      \\<theta>) \\<union>\n    bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (transaction_selects T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n      \\<theta>) \\<union>\n    bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (transaction_checks T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n      \\<theta>) \\<union>\n    bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (transaction_updates T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n      \\<theta>) \\<union>\n    bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (transaction_send T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>)", "by (metis bvars\\<^sub>s\\<^sub>s\\<^sub>t_append unlabel_append append_assoc transaction_strand_def subst_lsst_append)"], ["", "lemma bvars_wellformed_transaction_unfold:\n  assumes \"wellformed_transaction T\"\n  shows \"bvars_transaction T = bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_checks T)\" (is ?A)\n    and \"bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T) = {}\" (is ?B)\n    and \"bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_selects T) = {}\" (is ?C)\n    and \"bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_updates T) = {}\" (is ?D)\n    and \"bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T) = {}\" (is ?E)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (bvars_transaction T =\n     bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_checks T) &&&\n     bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T) = {}) &&&\n    bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_selects T) = {} &&&\n    bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_updates T) = {} &&&\n    bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T) = {}", "proof -"], ["proof (state)\ngoal (5 subgoals):\n 1. bvars_transaction T =\n    bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_checks T)\n 2. bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T) = {}\n 3. bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_selects T) = {}\n 4. bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_updates T) = {}\n 5. bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T) = {}", "have 0: \"list_all is_Receive (unlabel (transaction_receive T))\"\n          \"list_all is_Assignment (unlabel (transaction_selects T))\"\n          \"list_all is_Update (unlabel (transaction_updates T))\"\n          \"list_all is_Send (unlabel (transaction_send T))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (list_all stateful_strand_step.is_Receive\n      (unlabel (transaction_receive T)) &&&\n     list_all is_Assignment (unlabel (transaction_selects T))) &&&\n    list_all is_Update (unlabel (transaction_updates T)) &&&\n    list_all stateful_strand_step.is_Send (unlabel (transaction_send T))", "using assms"], ["proof (prove)\nusing this:\n  wellformed_transaction T\n\ngoal (1 subgoal):\n 1. (list_all stateful_strand_step.is_Receive\n      (unlabel (transaction_receive T)) &&&\n     list_all is_Assignment (unlabel (transaction_selects T))) &&&\n    list_all is_Update (unlabel (transaction_updates T)) &&&\n    list_all stateful_strand_step.is_Send (unlabel (transaction_send T))", "unfolding wellformed_transaction_def"], ["proof (prove)\nusing this:\n  list_all stateful_strand_step.is_Receive\n   (unlabel (transaction_receive T)) \\<and>\n  list_all is_Assignment (unlabel (transaction_selects T)) \\<and>\n  list_all is_Check (unlabel (transaction_checks T)) \\<and>\n  list_all is_Update (unlabel (transaction_updates T)) \\<and>\n  list_all stateful_strand_step.is_Send\n   (unlabel (transaction_send T)) \\<and>\n  set (transaction_fresh T)\n  \\<subseteq> fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n               (transaction_updates T) \\<union>\n              fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T) \\<and>\n  set (transaction_fresh T) \\<inter>\n  fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T) =\n  {} \\<and>\n  set (transaction_fresh T) \\<inter>\n  fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_selects T) =\n  {} \\<and>\n  fv_transaction T \\<inter> bvars_transaction T = {} \\<and>\n  fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_checks T)\n  \\<subseteq> fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n               (transaction_receive T) \\<union>\n              fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n               (transaction_selects T) \\<and>\n  fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_updates T) \\<union>\n  fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T) -\n  set (transaction_fresh T)\n  \\<subseteq> fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n               (transaction_receive T) \\<union>\n              fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n               (transaction_selects T) \\<and>\n  (\\<forall>x\\<in>set (unlabel (transaction_selects T)).\n      stateful_strand_step.is_Equality x \\<longrightarrow>\n      fv (the_rhs x)\n      \\<subseteq> fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                   (transaction_receive T))\n\ngoal (1 subgoal):\n 1. (list_all stateful_strand_step.is_Receive\n      (unlabel (transaction_receive T)) &&&\n     list_all is_Assignment (unlabel (transaction_selects T))) &&&\n    list_all is_Update (unlabel (transaction_updates T)) &&&\n    list_all stateful_strand_step.is_Send (unlabel (transaction_send T))", "by metis+"], ["proof (state)\nthis:\n  list_all stateful_strand_step.is_Receive (unlabel (transaction_receive T))\n  list_all is_Assignment (unlabel (transaction_selects T))\n  list_all is_Update (unlabel (transaction_updates T))\n  list_all stateful_strand_step.is_Send (unlabel (transaction_send T))\n\ngoal (5 subgoals):\n 1. bvars_transaction T =\n    bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_checks T)\n 2. bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T) = {}\n 3. bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_selects T) = {}\n 4. bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_updates T) = {}\n 5. bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T) = {}", "have \"filter is_NegChecks (unlabel (transaction_receive T)) = []\"\n       \"filter is_NegChecks (unlabel (transaction_selects T)) = []\"\n       \"filter is_NegChecks (unlabel (transaction_updates T)) = []\"\n       \"filter is_NegChecks (unlabel (transaction_send T)) = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (filter is_NegChecks (unlabel (transaction_receive T)) = [] &&&\n     filter is_NegChecks (unlabel (transaction_selects T)) = []) &&&\n    filter is_NegChecks (unlabel (transaction_updates T)) = [] &&&\n    filter is_NegChecks (unlabel (transaction_send T)) = []", "using list_all_filter_nil[OF 0(1), of is_NegChecks]\n          list_all_filter_nil[OF 0(2), of is_NegChecks]\n          list_all_filter_nil[OF 0(3), of is_NegChecks]\n          list_all_filter_nil[OF 0(4), of is_NegChecks]\n          stateful_strand_step.distinct_disc(11,21,29,35,39,41)"], ["proof (prove)\nusing this:\n  (\\<And>x.\n      stateful_strand_step.is_Receive x \\<Longrightarrow>\n      \\<not> is_NegChecks x) \\<Longrightarrow>\n  filter is_NegChecks (unlabel (transaction_receive T)) = []\n  (\\<And>x.\n      is_Assignment x \\<Longrightarrow>\n      \\<not> is_NegChecks x) \\<Longrightarrow>\n  filter is_NegChecks (unlabel (transaction_selects T)) = []\n  (\\<And>x.\n      is_Update x \\<Longrightarrow> \\<not> is_NegChecks x) \\<Longrightarrow>\n  filter is_NegChecks (unlabel (transaction_updates T)) = []\n  (\\<And>x.\n      stateful_strand_step.is_Send x \\<Longrightarrow>\n      \\<not> is_NegChecks x) \\<Longrightarrow>\n  filter is_NegChecks (unlabel (transaction_send T)) = []\n  stateful_strand_step.is_Send ?stateful_strand_step \\<Longrightarrow>\n  \\<not> is_NegChecks ?stateful_strand_step\n  stateful_strand_step.is_Receive ?stateful_strand_step \\<Longrightarrow>\n  \\<not> is_NegChecks ?stateful_strand_step\n  stateful_strand_step.is_Equality ?stateful_strand_step \\<Longrightarrow>\n  \\<not> is_NegChecks ?stateful_strand_step\n  is_Insert ?stateful_strand_step \\<Longrightarrow>\n  \\<not> is_NegChecks ?stateful_strand_step\n  is_Delete ?stateful_strand_step \\<Longrightarrow>\n  \\<not> is_NegChecks ?stateful_strand_step\n  is_InSet ?stateful_strand_step \\<Longrightarrow>\n  \\<not> is_NegChecks ?stateful_strand_step\n\ngoal (1 subgoal):\n 1. (filter is_NegChecks (unlabel (transaction_receive T)) = [] &&&\n     filter is_NegChecks (unlabel (transaction_selects T)) = []) &&&\n    filter is_NegChecks (unlabel (transaction_updates T)) = [] &&&\n    filter is_NegChecks (unlabel (transaction_send T)) = []", "by blast+"], ["proof (state)\nthis:\n  filter is_NegChecks (unlabel (transaction_receive T)) = []\n  filter is_NegChecks (unlabel (transaction_selects T)) = []\n  filter is_NegChecks (unlabel (transaction_updates T)) = []\n  filter is_NegChecks (unlabel (transaction_send T)) = []\n\ngoal (5 subgoals):\n 1. bvars_transaction T =\n    bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_checks T)\n 2. bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T) = {}\n 3. bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_selects T) = {}\n 4. bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_updates T) = {}\n 5. bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T) = {}", "thus ?A ?B ?C ?D ?E"], ["proof (prove)\nusing this:\n  filter is_NegChecks (unlabel (transaction_receive T)) = []\n  filter is_NegChecks (unlabel (transaction_selects T)) = []\n  filter is_NegChecks (unlabel (transaction_updates T)) = []\n  filter is_NegChecks (unlabel (transaction_send T)) = []\n\ngoal (1 subgoal):\n 1. (bvars_transaction T =\n     bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_checks T) &&&\n     bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T) = {}) &&&\n    bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_selects T) = {} &&&\n    bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_updates T) = {} &&&\n    bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T) = {}", "using bvars_transaction_unfold[of T]\n          bvars\\<^sub>s\\<^sub>s\\<^sub>t_NegChecks[of \"unlabel (transaction_receive T)\"]\n          bvars\\<^sub>s\\<^sub>s\\<^sub>t_NegChecks[of \"unlabel (transaction_selects T)\"]\n          bvars\\<^sub>s\\<^sub>s\\<^sub>t_NegChecks[of \"unlabel (transaction_updates T)\"]\n          bvars\\<^sub>s\\<^sub>s\\<^sub>t_NegChecks[of \"unlabel (transaction_send T)\"]"], ["proof (prove)\nusing this:\n  filter is_NegChecks (unlabel (transaction_receive T)) = []\n  filter is_NegChecks (unlabel (transaction_selects T)) = []\n  filter is_NegChecks (unlabel (transaction_updates T)) = []\n  filter is_NegChecks (unlabel (transaction_send T)) = []\n  bvars_transaction T =\n  bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T) \\<union>\n  bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_selects T) \\<union>\n  bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_checks T) \\<union>\n  bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_updates T) \\<union>\n  bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T)\n  bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T) =\n  bvars\\<^sub>s\\<^sub>s\\<^sub>t\n   (filter is_NegChecks (unlabel (transaction_receive T)))\n  bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_selects T) =\n  bvars\\<^sub>s\\<^sub>s\\<^sub>t\n   (filter is_NegChecks (unlabel (transaction_selects T)))\n  bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_updates T) =\n  bvars\\<^sub>s\\<^sub>s\\<^sub>t\n   (filter is_NegChecks (unlabel (transaction_updates T)))\n  bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T) =\n  bvars\\<^sub>s\\<^sub>s\\<^sub>t\n   (filter is_NegChecks (unlabel (transaction_send T)))\n\ngoal (1 subgoal):\n 1. (bvars_transaction T =\n     bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_checks T) &&&\n     bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T) = {}) &&&\n    bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_selects T) = {} &&&\n    bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_updates T) = {} &&&\n    bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T) = {}", "by (metis bvars\\<^sub>s\\<^sub>s\\<^sub>t_def UnionE emptyE list.set(1) list.simps(8) subsetI subset_Un_eq sup_commute)+"], ["proof (state)\nthis:\n  bvars_transaction T =\n  bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_checks T)\n  bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T) = {}\n  bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_selects T) = {}\n  bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_updates T) = {}\n  bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T) = {}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma transaction_strand_memberD[dest]:\n  assumes \"x \\<in> set (transaction_strand T)\"\n  shows \"x \\<in> set (transaction_receive T) \\<or> x \\<in> set (transaction_selects T) \\<or>\n         x \\<in> set (transaction_checks T) \\<or> x \\<in> set (transaction_updates T) \\<or>\n         x \\<in> set (transaction_send T)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> set (transaction_receive T) \\<or>\n    x \\<in> set (transaction_selects T) \\<or>\n    x \\<in> set (transaction_checks T) \\<or>\n    x \\<in> set (transaction_updates T) \\<or>\n    x \\<in> set (transaction_send T)", "using assms"], ["proof (prove)\nusing this:\n  x \\<in> set (transaction_strand T)\n\ngoal (1 subgoal):\n 1. x \\<in> set (transaction_receive T) \\<or>\n    x \\<in> set (transaction_selects T) \\<or>\n    x \\<in> set (transaction_checks T) \\<or>\n    x \\<in> set (transaction_updates T) \\<or>\n    x \\<in> set (transaction_send T)", "by (simp add: transaction_strand_def)"], ["", "lemma transaction_strand_unlabel_memberD[dest]:\n  assumes \"x \\<in> set (unlabel (transaction_strand T))\"\n  shows \"x \\<in> set (unlabel (transaction_receive T)) \\<or> x \\<in> set (unlabel (transaction_selects T)) \\<or>\n         x \\<in> set (unlabel (transaction_checks T)) \\<or> x \\<in> set (unlabel (transaction_updates T)) \\<or>\n         x \\<in> set (unlabel (transaction_send T))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> set (unlabel (transaction_receive T)) \\<or>\n    x \\<in> set (unlabel (transaction_selects T)) \\<or>\n    x \\<in> set (unlabel (transaction_checks T)) \\<or>\n    x \\<in> set (unlabel (transaction_updates T)) \\<or>\n    x \\<in> set (unlabel (transaction_send T))", "using assms"], ["proof (prove)\nusing this:\n  x \\<in> set (unlabel (transaction_strand T))\n\ngoal (1 subgoal):\n 1. x \\<in> set (unlabel (transaction_receive T)) \\<or>\n    x \\<in> set (unlabel (transaction_selects T)) \\<or>\n    x \\<in> set (unlabel (transaction_checks T)) \\<or>\n    x \\<in> set (unlabel (transaction_updates T)) \\<or>\n    x \\<in> set (unlabel (transaction_send T))", "by (simp add: unlabel_def transaction_strand_def)"], ["", "lemma wellformed_transaction_strand_memberD[dest]:\n  assumes \"wellformed_transaction T\" and \"(l,x) \\<in> set (transaction_strand T)\"\n  shows\n    \"x = receive\\<langle>t\\<rangle> \\<Longrightarrow> (l,x) \\<in> set (transaction_receive T)\" (is \"?A \\<Longrightarrow> ?A'\")\n    \"x = select\\<langle>t,s\\<rangle> \\<Longrightarrow> (l,x) \\<in> set (transaction_selects T)\" (is \"?B \\<Longrightarrow> ?B'\")\n    \"x = \\<langle>t == s\\<rangle> \\<Longrightarrow> (l,x) \\<in> set (transaction_checks T)\" (is \"?C \\<Longrightarrow> ?C'\")\n    \"x = \\<langle>t in s\\<rangle> \\<Longrightarrow> (l,x) \\<in> set (transaction_checks T)\" (is \"?D \\<Longrightarrow> ?D'\")\n    \"x = \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>  \\<Longrightarrow> (l,x) \\<in> set (transaction_checks T)\" (is \"?E \\<Longrightarrow> ?E'\")\n    \"x = insert\\<langle>t,s\\<rangle> \\<Longrightarrow> (l,x) \\<in> set (transaction_updates T)\" (is \"?F \\<Longrightarrow> ?F'\")\n    \"x = delete\\<langle>t,s\\<rangle> \\<Longrightarrow> (l,x) \\<in> set (transaction_updates T)\" (is \"?G \\<Longrightarrow> ?G'\")\n    \"x = send\\<langle>t\\<rangle> \\<Longrightarrow> (l,x) \\<in> set (transaction_send T)\" (is \"?H \\<Longrightarrow> ?H'\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (((x = receive\\<langle>t\\<rangle> \\<Longrightarrow>\n       (l, x) \\<in> set (transaction_receive T)) &&&\n      (x = select\\<langle>t,s\\<rangle> \\<Longrightarrow>\n       (l, x) \\<in> set (transaction_selects T))) &&&\n     (x = \\<langle>t == s\\<rangle> \\<Longrightarrow>\n      (l, x) \\<in> set (transaction_checks T)) &&&\n     (x = \\<langle>t in s\\<rangle> \\<Longrightarrow>\n      (l, x) \\<in> set (transaction_checks T))) &&&\n    ((x =\n      \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle> \\<Longrightarrow>\n      (l, x) \\<in> set (transaction_checks T)) &&&\n     (x = insert\\<langle>t,s\\<rangle> \\<Longrightarrow>\n      (l, x) \\<in> set (transaction_updates T))) &&&\n    (x = delete\\<langle>t,s\\<rangle> \\<Longrightarrow>\n     (l, x) \\<in> set (transaction_updates T)) &&&\n    (x = send\\<langle>t\\<rangle> \\<Longrightarrow>\n     (l, x) \\<in> set (transaction_send T))", "proof -"], ["proof (state)\ngoal (8 subgoals):\n 1. x = receive\\<langle>t\\<rangle> \\<Longrightarrow>\n    (l, x) \\<in> set (transaction_receive T)\n 2. x = select\\<langle>t,s\\<rangle> \\<Longrightarrow>\n    (l, x) \\<in> set (transaction_selects T)\n 3. x = \\<langle>t == s\\<rangle> \\<Longrightarrow>\n    (l, x) \\<in> set (transaction_checks T)\n 4. x = \\<langle>t in s\\<rangle> \\<Longrightarrow>\n    (l, x) \\<in> set (transaction_checks T)\n 5. x =\n    \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle> \\<Longrightarrow>\n    (l, x) \\<in> set (transaction_checks T)\n 6. x = insert\\<langle>t,s\\<rangle> \\<Longrightarrow>\n    (l, x) \\<in> set (transaction_updates T)\n 7. x = delete\\<langle>t,s\\<rangle> \\<Longrightarrow>\n    (l, x) \\<in> set (transaction_updates T)\n 8. x = send\\<langle>t\\<rangle> \\<Longrightarrow>\n    (l, x) \\<in> set (transaction_send T)", "have \"(l,x) \\<in> set (transaction_receive T) \\<or> (l,x) \\<in> set (transaction_selects T) \\<or>\n        (l,x) \\<in> set (transaction_checks T) \\<or> (l,x) \\<in> set (transaction_updates T) \\<or>\n        (l,x) \\<in> set (transaction_send T)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (l, x) \\<in> set (transaction_receive T) \\<or>\n    (l, x) \\<in> set (transaction_selects T) \\<or>\n    (l, x) \\<in> set (transaction_checks T) \\<or>\n    (l, x) \\<in> set (transaction_updates T) \\<or>\n    (l, x) \\<in> set (transaction_send T)", "using assms(2)"], ["proof (prove)\nusing this:\n  (l, x) \\<in> set (transaction_strand T)\n\ngoal (1 subgoal):\n 1. (l, x) \\<in> set (transaction_receive T) \\<or>\n    (l, x) \\<in> set (transaction_selects T) \\<or>\n    (l, x) \\<in> set (transaction_checks T) \\<or>\n    (l, x) \\<in> set (transaction_updates T) \\<or>\n    (l, x) \\<in> set (transaction_send T)", "by auto"], ["proof (state)\nthis:\n  (l, x) \\<in> set (transaction_receive T) \\<or>\n  (l, x) \\<in> set (transaction_selects T) \\<or>\n  (l, x) \\<in> set (transaction_checks T) \\<or>\n  (l, x) \\<in> set (transaction_updates T) \\<or>\n  (l, x) \\<in> set (transaction_send T)\n\ngoal (8 subgoals):\n 1. x = receive\\<langle>t\\<rangle> \\<Longrightarrow>\n    (l, x) \\<in> set (transaction_receive T)\n 2. x = select\\<langle>t,s\\<rangle> \\<Longrightarrow>\n    (l, x) \\<in> set (transaction_selects T)\n 3. x = \\<langle>t == s\\<rangle> \\<Longrightarrow>\n    (l, x) \\<in> set (transaction_checks T)\n 4. x = \\<langle>t in s\\<rangle> \\<Longrightarrow>\n    (l, x) \\<in> set (transaction_checks T)\n 5. x =\n    \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle> \\<Longrightarrow>\n    (l, x) \\<in> set (transaction_checks T)\n 6. x = insert\\<langle>t,s\\<rangle> \\<Longrightarrow>\n    (l, x) \\<in> set (transaction_updates T)\n 7. x = delete\\<langle>t,s\\<rangle> \\<Longrightarrow>\n    (l, x) \\<in> set (transaction_updates T)\n 8. x = send\\<langle>t\\<rangle> \\<Longrightarrow>\n    (l, x) \\<in> set (transaction_send T)", "thus \"?A \\<Longrightarrow> ?A'\" \"?B \\<Longrightarrow> ?B'\" \"?C \\<Longrightarrow> ?C'\" \"?D \\<Longrightarrow> ?D'\"\n       \"?E \\<Longrightarrow> ?E'\" \"?F \\<Longrightarrow> ?F'\" \"?G \\<Longrightarrow> ?G'\" \"?H \\<Longrightarrow> ?H'\""], ["proof (prove)\nusing this:\n  (l, x) \\<in> set (transaction_receive T) \\<or>\n  (l, x) \\<in> set (transaction_selects T) \\<or>\n  (l, x) \\<in> set (transaction_checks T) \\<or>\n  (l, x) \\<in> set (transaction_updates T) \\<or>\n  (l, x) \\<in> set (transaction_send T)\n\ngoal (1 subgoal):\n 1. (((x = receive\\<langle>t\\<rangle> \\<Longrightarrow>\n       (l, x) \\<in> set (transaction_receive T)) &&&\n      (x = select\\<langle>t,s\\<rangle> \\<Longrightarrow>\n       (l, x) \\<in> set (transaction_selects T))) &&&\n     (x = \\<langle>t == s\\<rangle> \\<Longrightarrow>\n      (l, x) \\<in> set (transaction_checks T)) &&&\n     (x = \\<langle>t in s\\<rangle> \\<Longrightarrow>\n      (l, x) \\<in> set (transaction_checks T))) &&&\n    ((x =\n      \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle> \\<Longrightarrow>\n      (l, x) \\<in> set (transaction_checks T)) &&&\n     (x = insert\\<langle>t,s\\<rangle> \\<Longrightarrow>\n      (l, x) \\<in> set (transaction_updates T))) &&&\n    (x = delete\\<langle>t,s\\<rangle> \\<Longrightarrow>\n     (l, x) \\<in> set (transaction_updates T)) &&&\n    (x = send\\<langle>t\\<rangle> \\<Longrightarrow>\n     (l, x) \\<in> set (transaction_send T))", "using wellformed_transaction_cases[OF assms(1)]"], ["proof (prove)\nusing this:\n  (l, x) \\<in> set (transaction_receive T) \\<or>\n  (l, x) \\<in> set (transaction_selects T) \\<or>\n  (l, x) \\<in> set (transaction_checks T) \\<or>\n  (l, x) \\<in> set (transaction_updates T) \\<or>\n  (l, x) \\<in> set (transaction_send T)\n  (?l, ?x) \\<in> set (transaction_receive T) \\<Longrightarrow>\n  \\<exists>t. ?x = receive\\<langle>t\\<rangle>\n  (?l, ?x) \\<in> set (transaction_selects T) \\<Longrightarrow>\n  (\\<exists>t s. ?x = \\<langle>t := s\\<rangle>) \\<or>\n  (\\<exists>t s. ?x = select\\<langle>t,s\\<rangle>)\n  (?l, ?x) \\<in> set (transaction_checks T) \\<Longrightarrow>\n  (\\<exists>t s. ?x = \\<langle>t == s\\<rangle>) \\<or>\n  (\\<exists>t s. ?x = \\<langle>t in s\\<rangle>) \\<or>\n  (\\<exists>X F G.\n      ?x = \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n  (?l, ?x) \\<in> set (transaction_updates T) \\<Longrightarrow>\n  (\\<exists>t s. ?x = insert\\<langle>t,s\\<rangle>) \\<or>\n  (\\<exists>t s. ?x = delete\\<langle>t,s\\<rangle>)\n  (?l, ?x) \\<in> set (transaction_send T) \\<Longrightarrow>\n  \\<exists>t. ?x = send\\<langle>t\\<rangle>\n\ngoal (1 subgoal):\n 1. (((x = receive\\<langle>t\\<rangle> \\<Longrightarrow>\n       (l, x) \\<in> set (transaction_receive T)) &&&\n      (x = select\\<langle>t,s\\<rangle> \\<Longrightarrow>\n       (l, x) \\<in> set (transaction_selects T))) &&&\n     (x = \\<langle>t == s\\<rangle> \\<Longrightarrow>\n      (l, x) \\<in> set (transaction_checks T)) &&&\n     (x = \\<langle>t in s\\<rangle> \\<Longrightarrow>\n      (l, x) \\<in> set (transaction_checks T))) &&&\n    ((x =\n      \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle> \\<Longrightarrow>\n      (l, x) \\<in> set (transaction_checks T)) &&&\n     (x = insert\\<langle>t,s\\<rangle> \\<Longrightarrow>\n      (l, x) \\<in> set (transaction_updates T))) &&&\n    (x = delete\\<langle>t,s\\<rangle> \\<Longrightarrow>\n     (l, x) \\<in> set (transaction_updates T)) &&&\n    (x = send\\<langle>t\\<rangle> \\<Longrightarrow>\n     (l, x) \\<in> set (transaction_send T))", "by fast+"], ["proof (state)\nthis:\n  x = receive\\<langle>t\\<rangle> \\<Longrightarrow>\n  (l, x) \\<in> set (transaction_receive T)\n  x = select\\<langle>t,s\\<rangle> \\<Longrightarrow>\n  (l, x) \\<in> set (transaction_selects T)\n  x = \\<langle>t == s\\<rangle> \\<Longrightarrow>\n  (l, x) \\<in> set (transaction_checks T)\n  x = \\<langle>t in s\\<rangle> \\<Longrightarrow>\n  (l, x) \\<in> set (transaction_checks T)\n  x =\n  \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle> \\<Longrightarrow>\n  (l, x) \\<in> set (transaction_checks T)\n  x = insert\\<langle>t,s\\<rangle> \\<Longrightarrow>\n  (l, x) \\<in> set (transaction_updates T)\n  x = delete\\<langle>t,s\\<rangle> \\<Longrightarrow>\n  (l, x) \\<in> set (transaction_updates T)\n  x = send\\<langle>t\\<rangle> \\<Longrightarrow>\n  (l, x) \\<in> set (transaction_send T)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma wellformed_transaction_strand_unlabel_memberD[dest]:\n  assumes \"wellformed_transaction T\" and \"x \\<in> set (unlabel (transaction_strand T))\"\n  shows\n    \"x = receive\\<langle>t\\<rangle> \\<Longrightarrow> x \\<in> set (unlabel (transaction_receive T))\" (is \"?A \\<Longrightarrow> ?A'\")\n    \"x = select\\<langle>t,s\\<rangle> \\<Longrightarrow> x \\<in> set (unlabel (transaction_selects T))\" (is \"?B \\<Longrightarrow> ?B'\")\n    \"x = \\<langle>t == s\\<rangle> \\<Longrightarrow> x \\<in> set (unlabel (transaction_checks T))\" (is \"?C \\<Longrightarrow> ?C'\")\n    \"x = \\<langle>t in s\\<rangle> \\<Longrightarrow> x \\<in> set (unlabel (transaction_checks T))\" (is \"?D \\<Longrightarrow> ?D'\")\n    \"x = \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>  \\<Longrightarrow> x \\<in> set (unlabel (transaction_checks T))\" (is \"?E \\<Longrightarrow> ?E'\")\n    \"x = insert\\<langle>t,s\\<rangle> \\<Longrightarrow> x \\<in> set (unlabel (transaction_updates T))\" (is \"?F \\<Longrightarrow> ?F'\")\n    \"x = delete\\<langle>t,s\\<rangle> \\<Longrightarrow> x \\<in> set (unlabel (transaction_updates T))\" (is \"?G \\<Longrightarrow> ?G'\")\n    \"x = send\\<langle>t\\<rangle> \\<Longrightarrow> x \\<in> set (unlabel (transaction_send T))\" (is \"?H \\<Longrightarrow> ?H'\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (((x = receive\\<langle>t\\<rangle> \\<Longrightarrow>\n       x \\<in> set (unlabel (transaction_receive T))) &&&\n      (x = select\\<langle>t,s\\<rangle> \\<Longrightarrow>\n       x \\<in> set (unlabel (transaction_selects T)))) &&&\n     (x = \\<langle>t == s\\<rangle> \\<Longrightarrow>\n      x \\<in> set (unlabel (transaction_checks T))) &&&\n     (x = \\<langle>t in s\\<rangle> \\<Longrightarrow>\n      x \\<in> set (unlabel (transaction_checks T)))) &&&\n    ((x =\n      \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle> \\<Longrightarrow>\n      x \\<in> set (unlabel (transaction_checks T))) &&&\n     (x = insert\\<langle>t,s\\<rangle> \\<Longrightarrow>\n      x \\<in> set (unlabel (transaction_updates T)))) &&&\n    (x = delete\\<langle>t,s\\<rangle> \\<Longrightarrow>\n     x \\<in> set (unlabel (transaction_updates T))) &&&\n    (x = send\\<langle>t\\<rangle> \\<Longrightarrow>\n     x \\<in> set (unlabel (transaction_send T)))", "proof -"], ["proof (state)\ngoal (8 subgoals):\n 1. x = receive\\<langle>t\\<rangle> \\<Longrightarrow>\n    x \\<in> set (unlabel (transaction_receive T))\n 2. x = select\\<langle>t,s\\<rangle> \\<Longrightarrow>\n    x \\<in> set (unlabel (transaction_selects T))\n 3. x = \\<langle>t == s\\<rangle> \\<Longrightarrow>\n    x \\<in> set (unlabel (transaction_checks T))\n 4. x = \\<langle>t in s\\<rangle> \\<Longrightarrow>\n    x \\<in> set (unlabel (transaction_checks T))\n 5. x =\n    \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle> \\<Longrightarrow>\n    x \\<in> set (unlabel (transaction_checks T))\n 6. x = insert\\<langle>t,s\\<rangle> \\<Longrightarrow>\n    x \\<in> set (unlabel (transaction_updates T))\n 7. x = delete\\<langle>t,s\\<rangle> \\<Longrightarrow>\n    x \\<in> set (unlabel (transaction_updates T))\n 8. x = send\\<langle>t\\<rangle> \\<Longrightarrow>\n    x \\<in> set (unlabel (transaction_send T))", "have \"x \\<in> set (unlabel (transaction_receive T)) \\<or> x \\<in> set (unlabel (transaction_selects T)) \\<or>\n        x \\<in> set (unlabel (transaction_checks T)) \\<or> x \\<in> set (unlabel (transaction_updates T)) \\<or>\n        x \\<in> set (unlabel (transaction_send T))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> set (unlabel (transaction_receive T)) \\<or>\n    x \\<in> set (unlabel (transaction_selects T)) \\<or>\n    x \\<in> set (unlabel (transaction_checks T)) \\<or>\n    x \\<in> set (unlabel (transaction_updates T)) \\<or>\n    x \\<in> set (unlabel (transaction_send T))", "using assms(2)"], ["proof (prove)\nusing this:\n  x \\<in> set (unlabel (transaction_strand T))\n\ngoal (1 subgoal):\n 1. x \\<in> set (unlabel (transaction_receive T)) \\<or>\n    x \\<in> set (unlabel (transaction_selects T)) \\<or>\n    x \\<in> set (unlabel (transaction_checks T)) \\<or>\n    x \\<in> set (unlabel (transaction_updates T)) \\<or>\n    x \\<in> set (unlabel (transaction_send T))", "by auto"], ["proof (state)\nthis:\n  x \\<in> set (unlabel (transaction_receive T)) \\<or>\n  x \\<in> set (unlabel (transaction_selects T)) \\<or>\n  x \\<in> set (unlabel (transaction_checks T)) \\<or>\n  x \\<in> set (unlabel (transaction_updates T)) \\<or>\n  x \\<in> set (unlabel (transaction_send T))\n\ngoal (8 subgoals):\n 1. x = receive\\<langle>t\\<rangle> \\<Longrightarrow>\n    x \\<in> set (unlabel (transaction_receive T))\n 2. x = select\\<langle>t,s\\<rangle> \\<Longrightarrow>\n    x \\<in> set (unlabel (transaction_selects T))\n 3. x = \\<langle>t == s\\<rangle> \\<Longrightarrow>\n    x \\<in> set (unlabel (transaction_checks T))\n 4. x = \\<langle>t in s\\<rangle> \\<Longrightarrow>\n    x \\<in> set (unlabel (transaction_checks T))\n 5. x =\n    \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle> \\<Longrightarrow>\n    x \\<in> set (unlabel (transaction_checks T))\n 6. x = insert\\<langle>t,s\\<rangle> \\<Longrightarrow>\n    x \\<in> set (unlabel (transaction_updates T))\n 7. x = delete\\<langle>t,s\\<rangle> \\<Longrightarrow>\n    x \\<in> set (unlabel (transaction_updates T))\n 8. x = send\\<langle>t\\<rangle> \\<Longrightarrow>\n    x \\<in> set (unlabel (transaction_send T))", "thus \"?A \\<Longrightarrow> ?A'\" \"?B \\<Longrightarrow> ?B'\" \"?C \\<Longrightarrow> ?C'\" \"?D \\<Longrightarrow> ?D'\"\n       \"?E \\<Longrightarrow> ?E'\" \"?F \\<Longrightarrow> ?F'\" \"?G \\<Longrightarrow> ?G'\" \"?H \\<Longrightarrow> ?H'\""], ["proof (prove)\nusing this:\n  x \\<in> set (unlabel (transaction_receive T)) \\<or>\n  x \\<in> set (unlabel (transaction_selects T)) \\<or>\n  x \\<in> set (unlabel (transaction_checks T)) \\<or>\n  x \\<in> set (unlabel (transaction_updates T)) \\<or>\n  x \\<in> set (unlabel (transaction_send T))\n\ngoal (1 subgoal):\n 1. (((x = receive\\<langle>t\\<rangle> \\<Longrightarrow>\n       x \\<in> set (unlabel (transaction_receive T))) &&&\n      (x = select\\<langle>t,s\\<rangle> \\<Longrightarrow>\n       x \\<in> set (unlabel (transaction_selects T)))) &&&\n     (x = \\<langle>t == s\\<rangle> \\<Longrightarrow>\n      x \\<in> set (unlabel (transaction_checks T))) &&&\n     (x = \\<langle>t in s\\<rangle> \\<Longrightarrow>\n      x \\<in> set (unlabel (transaction_checks T)))) &&&\n    ((x =\n      \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle> \\<Longrightarrow>\n      x \\<in> set (unlabel (transaction_checks T))) &&&\n     (x = insert\\<langle>t,s\\<rangle> \\<Longrightarrow>\n      x \\<in> set (unlabel (transaction_updates T)))) &&&\n    (x = delete\\<langle>t,s\\<rangle> \\<Longrightarrow>\n     x \\<in> set (unlabel (transaction_updates T))) &&&\n    (x = send\\<langle>t\\<rangle> \\<Longrightarrow>\n     x \\<in> set (unlabel (transaction_send T)))", "using wellformed_transaction_unlabel_cases[OF assms(1)]"], ["proof (prove)\nusing this:\n  x \\<in> set (unlabel (transaction_receive T)) \\<or>\n  x \\<in> set (unlabel (transaction_selects T)) \\<or>\n  x \\<in> set (unlabel (transaction_checks T)) \\<or>\n  x \\<in> set (unlabel (transaction_updates T)) \\<or>\n  x \\<in> set (unlabel (transaction_send T))\n  ?x \\<in> set (unlabel (transaction_receive T)) \\<Longrightarrow>\n  \\<exists>t. ?x = receive\\<langle>t\\<rangle>\n  ?x \\<in> set (unlabel (transaction_selects T)) \\<Longrightarrow>\n  (\\<exists>t s. ?x = \\<langle>t := s\\<rangle>) \\<or>\n  (\\<exists>t s. ?x = select\\<langle>t,s\\<rangle>)\n  ?x \\<in> set (unlabel (transaction_checks T)) \\<Longrightarrow>\n  (\\<exists>t s. ?x = \\<langle>t == s\\<rangle>) \\<or>\n  (\\<exists>t s. ?x = \\<langle>t in s\\<rangle>) \\<or>\n  (\\<exists>X F G.\n      ?x = \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle>)\n  ?x \\<in> set (unlabel (transaction_updates T)) \\<Longrightarrow>\n  (\\<exists>t s. ?x = insert\\<langle>t,s\\<rangle>) \\<or>\n  (\\<exists>t s. ?x = delete\\<langle>t,s\\<rangle>)\n  ?x \\<in> set (unlabel (transaction_send T)) \\<Longrightarrow>\n  \\<exists>t. ?x = send\\<langle>t\\<rangle>\n\ngoal (1 subgoal):\n 1. (((x = receive\\<langle>t\\<rangle> \\<Longrightarrow>\n       x \\<in> set (unlabel (transaction_receive T))) &&&\n      (x = select\\<langle>t,s\\<rangle> \\<Longrightarrow>\n       x \\<in> set (unlabel (transaction_selects T)))) &&&\n     (x = \\<langle>t == s\\<rangle> \\<Longrightarrow>\n      x \\<in> set (unlabel (transaction_checks T))) &&&\n     (x = \\<langle>t in s\\<rangle> \\<Longrightarrow>\n      x \\<in> set (unlabel (transaction_checks T)))) &&&\n    ((x =\n      \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle> \\<Longrightarrow>\n      x \\<in> set (unlabel (transaction_checks T))) &&&\n     (x = insert\\<langle>t,s\\<rangle> \\<Longrightarrow>\n      x \\<in> set (unlabel (transaction_updates T)))) &&&\n    (x = delete\\<langle>t,s\\<rangle> \\<Longrightarrow>\n     x \\<in> set (unlabel (transaction_updates T))) &&&\n    (x = send\\<langle>t\\<rangle> \\<Longrightarrow>\n     x \\<in> set (unlabel (transaction_send T)))", "by fast+"], ["proof (state)\nthis:\n  x = receive\\<langle>t\\<rangle> \\<Longrightarrow>\n  x \\<in> set (unlabel (transaction_receive T))\n  x = select\\<langle>t,s\\<rangle> \\<Longrightarrow>\n  x \\<in> set (unlabel (transaction_selects T))\n  x = \\<langle>t == s\\<rangle> \\<Longrightarrow>\n  x \\<in> set (unlabel (transaction_checks T))\n  x = \\<langle>t in s\\<rangle> \\<Longrightarrow>\n  x \\<in> set (unlabel (transaction_checks T))\n  x =\n  \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: G\\<rangle> \\<Longrightarrow>\n  x \\<in> set (unlabel (transaction_checks T))\n  x = insert\\<langle>t,s\\<rangle> \\<Longrightarrow>\n  x \\<in> set (unlabel (transaction_updates T))\n  x = delete\\<langle>t,s\\<rangle> \\<Longrightarrow>\n  x \\<in> set (unlabel (transaction_updates T))\n  x = send\\<langle>t\\<rangle> \\<Longrightarrow>\n  x \\<in> set (unlabel (transaction_send T))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma wellformed_transaction_send_receive_trm_cases:\n  assumes T: \"wellformed_transaction T\"\n  shows \"t \\<in> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T) \\<Longrightarrow> receive\\<langle>t\\<rangle> \\<in> set (unlabel (transaction_receive T))\"\n    and \"t \\<in> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T) \\<Longrightarrow> send\\<langle>t\\<rangle> \\<in> set (unlabel (transaction_send T))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (t \\<in> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n              (transaction_receive T) \\<Longrightarrow>\n     receive\\<langle>t\\<rangle>\n     \\<in> set (unlabel (transaction_receive T))) &&&\n    (t \\<in> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n              (transaction_send T) \\<Longrightarrow>\n     send\\<langle>t\\<rangle> \\<in> set (unlabel (transaction_send T)))", "using wellformed_transaction_unlabel_cases(1,5)[OF T]\n      trms\\<^sub>s\\<^sub>s\\<^sub>t_in[of t \"unlabel (transaction_receive T)\"]\n      trms\\<^sub>s\\<^sub>s\\<^sub>t_in[of t \"unlabel (transaction_send T)\"]"], ["proof (prove)\nusing this:\n  ?x \\<in> set (unlabel (transaction_receive T)) \\<Longrightarrow>\n  \\<exists>t. ?x = receive\\<langle>t\\<rangle>\n  ?x \\<in> set (unlabel (transaction_send T)) \\<Longrightarrow>\n  \\<exists>t. ?x = send\\<langle>t\\<rangle>\n  t \\<in> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n           (transaction_receive T) \\<Longrightarrow>\n  \\<exists>a\\<in>set (unlabel (transaction_receive T)).\n     t \\<in> trms\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a\n  t \\<in> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n           (transaction_send T) \\<Longrightarrow>\n  \\<exists>a\\<in>set (unlabel (transaction_send T)).\n     t \\<in> trms\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p a\n\ngoal (1 subgoal):\n 1. (t \\<in> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n              (transaction_receive T) \\<Longrightarrow>\n     receive\\<langle>t\\<rangle>\n     \\<in> set (unlabel (transaction_receive T))) &&&\n    (t \\<in> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n              (transaction_send T) \\<Longrightarrow>\n     send\\<langle>t\\<rangle> \\<in> set (unlabel (transaction_send T)))", "by fastforce+"], ["", "lemma wellformed_transaction_send_receive_subst_trm_cases:\n  assumes T: \"wellformed_transaction T\"\n  shows \"t \\<in> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T) \\<cdot>\\<^sub>s\\<^sub>e\\<^sub>t \\<theta> \\<Longrightarrow> receive\\<langle>t\\<rangle> \\<in> set (unlabel (transaction_receive T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>))\"\n    and \"t \\<in> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T) \\<cdot>\\<^sub>s\\<^sub>e\\<^sub>t \\<theta> \\<Longrightarrow> send\\<langle>t\\<rangle> \\<in> set (unlabel (transaction_send T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (t \\<in> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n              (transaction_receive T) \\<cdot>\\<^sub>s\\<^sub>e\\<^sub>t\n             \\<theta> \\<Longrightarrow>\n     receive\\<langle>t\\<rangle>\n     \\<in> set (unlabel\n                 (transaction_receive\n                   T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                  \\<theta>))) &&&\n    (t \\<in> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n              (transaction_send T) \\<cdot>\\<^sub>s\\<^sub>e\\<^sub>t\n             \\<theta> \\<Longrightarrow>\n     send\\<langle>t\\<rangle>\n     \\<in> set (unlabel\n                 (transaction_send T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                  \\<theta>)))", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. t \\<in> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n             (transaction_receive T) \\<cdot>\\<^sub>s\\<^sub>e\\<^sub>t\n            \\<theta> \\<Longrightarrow>\n    receive\\<langle>t\\<rangle>\n    \\<in> set (unlabel\n                (transaction_receive\n                  T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                 \\<theta>))\n 2. t \\<in> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n             (transaction_send T) \\<cdot>\\<^sub>s\\<^sub>e\\<^sub>t\n            \\<theta> \\<Longrightarrow>\n    send\\<langle>t\\<rangle>\n    \\<in> set (unlabel\n                (transaction_send T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                 \\<theta>))", "assume \"t \\<in> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T) \\<cdot>\\<^sub>s\\<^sub>e\\<^sub>t \\<theta>\""], ["proof (state)\nthis:\n  t \\<in> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n           (transaction_receive T) \\<cdot>\\<^sub>s\\<^sub>e\\<^sub>t\n          \\<theta>\n\ngoal (2 subgoals):\n 1. t \\<in> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n             (transaction_receive T) \\<cdot>\\<^sub>s\\<^sub>e\\<^sub>t\n            \\<theta> \\<Longrightarrow>\n    receive\\<langle>t\\<rangle>\n    \\<in> set (unlabel\n                (transaction_receive\n                  T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                 \\<theta>))\n 2. t \\<in> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n             (transaction_send T) \\<cdot>\\<^sub>s\\<^sub>e\\<^sub>t\n            \\<theta> \\<Longrightarrow>\n    send\\<langle>t\\<rangle>\n    \\<in> set (unlabel\n                (transaction_send T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                 \\<theta>))", "then"], ["proof (chain)\npicking this:\n  t \\<in> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n           (transaction_receive T) \\<cdot>\\<^sub>s\\<^sub>e\\<^sub>t\n          \\<theta>", "obtain s where s: \"s \\<in> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T)\" \"t = s \\<cdot> \\<theta>\""], ["proof (prove)\nusing this:\n  t \\<in> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n           (transaction_receive T) \\<cdot>\\<^sub>s\\<^sub>e\\<^sub>t\n          \\<theta>\n\ngoal (1 subgoal):\n 1. (\\<And>s.\n        \\<lbrakk>s \\<in> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                          (transaction_receive T);\n         t = s \\<cdot> \\<theta>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  s \\<in> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T)\n  t = s \\<cdot> \\<theta>\n\ngoal (2 subgoals):\n 1. t \\<in> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n             (transaction_receive T) \\<cdot>\\<^sub>s\\<^sub>e\\<^sub>t\n            \\<theta> \\<Longrightarrow>\n    receive\\<langle>t\\<rangle>\n    \\<in> set (unlabel\n                (transaction_receive\n                  T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                 \\<theta>))\n 2. t \\<in> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n             (transaction_send T) \\<cdot>\\<^sub>s\\<^sub>e\\<^sub>t\n            \\<theta> \\<Longrightarrow>\n    send\\<langle>t\\<rangle>\n    \\<in> set (unlabel\n                (transaction_send T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                 \\<theta>))", "hence \"receive\\<langle>s\\<rangle> \\<in> set (unlabel (transaction_receive T))\""], ["proof (prove)\nusing this:\n  s \\<in> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T)\n  t = s \\<cdot> \\<theta>\n\ngoal (1 subgoal):\n 1. receive\\<langle>s\\<rangle> \\<in> set (unlabel (transaction_receive T))", "using wellformed_transaction_send_receive_trm_cases(1)[OF T]"], ["proof (prove)\nusing this:\n  s \\<in> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T)\n  t = s \\<cdot> \\<theta>\n  ?t \\<in> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n            (transaction_receive T) \\<Longrightarrow>\n  receive\\<langle>?t\\<rangle> \\<in> set (unlabel (transaction_receive T))\n\ngoal (1 subgoal):\n 1. receive\\<langle>s\\<rangle> \\<in> set (unlabel (transaction_receive T))", "by simp"], ["proof (state)\nthis:\n  receive\\<langle>s\\<rangle> \\<in> set (unlabel (transaction_receive T))\n\ngoal (2 subgoals):\n 1. t \\<in> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n             (transaction_receive T) \\<cdot>\\<^sub>s\\<^sub>e\\<^sub>t\n            \\<theta> \\<Longrightarrow>\n    receive\\<langle>t\\<rangle>\n    \\<in> set (unlabel\n                (transaction_receive\n                  T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                 \\<theta>))\n 2. t \\<in> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n             (transaction_send T) \\<cdot>\\<^sub>s\\<^sub>e\\<^sub>t\n            \\<theta> \\<Longrightarrow>\n    send\\<langle>t\\<rangle>\n    \\<in> set (unlabel\n                (transaction_send T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                 \\<theta>))", "thus \"receive\\<langle>t\\<rangle> \\<in> set (unlabel (transaction_receive T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>))\""], ["proof (prove)\nusing this:\n  receive\\<langle>s\\<rangle> \\<in> set (unlabel (transaction_receive T))\n\ngoal (1 subgoal):\n 1. receive\\<langle>t\\<rangle>\n    \\<in> set (unlabel\n                (transaction_receive\n                  T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                 \\<theta>))", "by (metis s(2) unlabel_subst[of _ \\<theta>] stateful_strand_step_subst_inI(2))"], ["proof (state)\nthis:\n  receive\\<langle>t\\<rangle>\n  \\<in> set (unlabel\n              (transaction_receive T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n               \\<theta>))\n\ngoal (1 subgoal):\n 1. t \\<in> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n             (transaction_send T) \\<cdot>\\<^sub>s\\<^sub>e\\<^sub>t\n            \\<theta> \\<Longrightarrow>\n    send\\<langle>t\\<rangle>\n    \\<in> set (unlabel\n                (transaction_send T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                 \\<theta>))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. t \\<in> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n             (transaction_send T) \\<cdot>\\<^sub>s\\<^sub>e\\<^sub>t\n            \\<theta> \\<Longrightarrow>\n    send\\<langle>t\\<rangle>\n    \\<in> set (unlabel\n                (transaction_send T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                 \\<theta>))", "assume \"t \\<in> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T) \\<cdot>\\<^sub>s\\<^sub>e\\<^sub>t \\<theta>\""], ["proof (state)\nthis:\n  t \\<in> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n           (transaction_send T) \\<cdot>\\<^sub>s\\<^sub>e\\<^sub>t\n          \\<theta>\n\ngoal (1 subgoal):\n 1. t \\<in> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n             (transaction_send T) \\<cdot>\\<^sub>s\\<^sub>e\\<^sub>t\n            \\<theta> \\<Longrightarrow>\n    send\\<langle>t\\<rangle>\n    \\<in> set (unlabel\n                (transaction_send T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                 \\<theta>))", "then"], ["proof (chain)\npicking this:\n  t \\<in> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n           (transaction_send T) \\<cdot>\\<^sub>s\\<^sub>e\\<^sub>t\n          \\<theta>", "obtain s where s: \"s \\<in> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T)\" \"t = s \\<cdot> \\<theta>\""], ["proof (prove)\nusing this:\n  t \\<in> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n           (transaction_send T) \\<cdot>\\<^sub>s\\<^sub>e\\<^sub>t\n          \\<theta>\n\ngoal (1 subgoal):\n 1. (\\<And>s.\n        \\<lbrakk>s \\<in> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                          (transaction_send T);\n         t = s \\<cdot> \\<theta>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  s \\<in> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T)\n  t = s \\<cdot> \\<theta>\n\ngoal (1 subgoal):\n 1. t \\<in> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n             (transaction_send T) \\<cdot>\\<^sub>s\\<^sub>e\\<^sub>t\n            \\<theta> \\<Longrightarrow>\n    send\\<langle>t\\<rangle>\n    \\<in> set (unlabel\n                (transaction_send T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                 \\<theta>))", "hence \"send\\<langle>s\\<rangle> \\<in> set (unlabel (transaction_send T))\""], ["proof (prove)\nusing this:\n  s \\<in> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T)\n  t = s \\<cdot> \\<theta>\n\ngoal (1 subgoal):\n 1. send\\<langle>s\\<rangle> \\<in> set (unlabel (transaction_send T))", "using wellformed_transaction_send_receive_trm_cases(2)[OF T]"], ["proof (prove)\nusing this:\n  s \\<in> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T)\n  t = s \\<cdot> \\<theta>\n  ?t \\<in> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n            (transaction_send T) \\<Longrightarrow>\n  send\\<langle>?t\\<rangle> \\<in> set (unlabel (transaction_send T))\n\ngoal (1 subgoal):\n 1. send\\<langle>s\\<rangle> \\<in> set (unlabel (transaction_send T))", "by simp"], ["proof (state)\nthis:\n  send\\<langle>s\\<rangle> \\<in> set (unlabel (transaction_send T))\n\ngoal (1 subgoal):\n 1. t \\<in> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n             (transaction_send T) \\<cdot>\\<^sub>s\\<^sub>e\\<^sub>t\n            \\<theta> \\<Longrightarrow>\n    send\\<langle>t\\<rangle>\n    \\<in> set (unlabel\n                (transaction_send T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                 \\<theta>))", "thus \"send\\<langle>t\\<rangle> \\<in> set (unlabel (transaction_send T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>))\""], ["proof (prove)\nusing this:\n  send\\<langle>s\\<rangle> \\<in> set (unlabel (transaction_send T))\n\ngoal (1 subgoal):\n 1. send\\<langle>t\\<rangle>\n    \\<in> set (unlabel\n                (transaction_send T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                 \\<theta>))", "by (metis s(2) unlabel_subst[of _ \\<theta>] stateful_strand_step_subst_inI(1))"], ["proof (state)\nthis:\n  send\\<langle>t\\<rangle>\n  \\<in> set (unlabel\n              (transaction_send T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n               \\<theta>))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma wellformed_transaction_send_receive_fv_subset:\n  assumes T: \"wellformed_transaction T\"\n  shows \"t \\<in> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T) \\<Longrightarrow> fv t \\<subseteq> fv_transaction T\" (is \"?A \\<Longrightarrow> ?A'\")\n    and \"t \\<in> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T) \\<Longrightarrow> fv t \\<subseteq> fv_transaction T\" (is \"?B \\<Longrightarrow> ?B'\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (t \\<in> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n              (transaction_receive T) \\<Longrightarrow>\n     fv t \\<subseteq> fv_transaction T) &&&\n    (t \\<in> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n              (transaction_send T) \\<Longrightarrow>\n     fv t \\<subseteq> fv_transaction T)", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. t \\<in> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n             (transaction_receive T) \\<Longrightarrow>\n    fv t \\<subseteq> fv_transaction T\n 2. t \\<in> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n             (transaction_send T) \\<Longrightarrow>\n    fv t \\<subseteq> fv_transaction T", "have \"t \\<in> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T) \\<Longrightarrow> receive\\<langle>t\\<rangle> \\<in> set (unlabel (transaction_strand T))\"\n       \"t \\<in> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T) \\<Longrightarrow> send\\<langle>t\\<rangle> \\<in> set (unlabel (transaction_strand T))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (t \\<in> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n              (transaction_receive T) \\<Longrightarrow>\n     receive\\<langle>t\\<rangle>\n     \\<in> set (unlabel (transaction_strand T))) &&&\n    (t \\<in> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n              (transaction_send T) \\<Longrightarrow>\n     send\\<langle>t\\<rangle> \\<in> set (unlabel (transaction_strand T)))", "using wellformed_transaction_send_receive_trm_cases[OF T, of t]"], ["proof (prove)\nusing this:\n  t \\<in> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n           (transaction_receive T) \\<Longrightarrow>\n  receive\\<langle>t\\<rangle> \\<in> set (unlabel (transaction_receive T))\n  t \\<in> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n           (transaction_send T) \\<Longrightarrow>\n  send\\<langle>t\\<rangle> \\<in> set (unlabel (transaction_send T))\n\ngoal (1 subgoal):\n 1. (t \\<in> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n              (transaction_receive T) \\<Longrightarrow>\n     receive\\<langle>t\\<rangle>\n     \\<in> set (unlabel (transaction_strand T))) &&&\n    (t \\<in> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n              (transaction_send T) \\<Longrightarrow>\n     send\\<langle>t\\<rangle> \\<in> set (unlabel (transaction_strand T)))", "unfolding transaction_strand_def"], ["proof (prove)\nusing this:\n  t \\<in> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n           (transaction_receive T) \\<Longrightarrow>\n  receive\\<langle>t\\<rangle> \\<in> set (unlabel (transaction_receive T))\n  t \\<in> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n           (transaction_send T) \\<Longrightarrow>\n  send\\<langle>t\\<rangle> \\<in> set (unlabel (transaction_send T))\n\ngoal (1 subgoal):\n 1. (t \\<in> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n              (transaction_receive T) \\<Longrightarrow>\n     receive\\<langle>t\\<rangle>\n     \\<in> set (unlabel\n                 (transaction_receive T @\n                  transaction_selects T @\n                  transaction_checks T @\n                  transaction_updates T @ transaction_send T))) &&&\n    (t \\<in> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n              (transaction_send T) \\<Longrightarrow>\n     send\\<langle>t\\<rangle>\n     \\<in> set (unlabel\n                 (transaction_receive T @\n                  transaction_selects T @\n                  transaction_checks T @\n                  transaction_updates T @ transaction_send T)))", "by force+"], ["proof (state)\nthis:\n  t \\<in> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n           (transaction_receive T) \\<Longrightarrow>\n  receive\\<langle>t\\<rangle> \\<in> set (unlabel (transaction_strand T))\n  t \\<in> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n           (transaction_send T) \\<Longrightarrow>\n  send\\<langle>t\\<rangle> \\<in> set (unlabel (transaction_strand T))\n\ngoal (2 subgoals):\n 1. t \\<in> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n             (transaction_receive T) \\<Longrightarrow>\n    fv t \\<subseteq> fv_transaction T\n 2. t \\<in> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n             (transaction_send T) \\<Longrightarrow>\n    fv t \\<subseteq> fv_transaction T", "thus \"?A \\<Longrightarrow> ?A'\" \"?B \\<Longrightarrow> ?B'\""], ["proof (prove)\nusing this:\n  t \\<in> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n           (transaction_receive T) \\<Longrightarrow>\n  receive\\<langle>t\\<rangle> \\<in> set (unlabel (transaction_strand T))\n  t \\<in> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n           (transaction_send T) \\<Longrightarrow>\n  send\\<langle>t\\<rangle> \\<in> set (unlabel (transaction_strand T))\n\ngoal (1 subgoal):\n 1. (t \\<in> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n              (transaction_receive T) \\<Longrightarrow>\n     fv t \\<subseteq> fv_transaction T) &&&\n    (t \\<in> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n              (transaction_send T) \\<Longrightarrow>\n     fv t \\<subseteq> fv_transaction T)", "by (induct \"transaction_strand T\") auto"], ["proof (state)\nthis:\n  t \\<in> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n           (transaction_receive T) \\<Longrightarrow>\n  fv t \\<subseteq> fv_transaction T\n  t \\<in> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n           (transaction_send T) \\<Longrightarrow>\n  fv t \\<subseteq> fv_transaction T\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma dual_wellformed_transaction_ident_cases[dest]:\n  \"list_all is_Assignment (unlabel S) \\<Longrightarrow> dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S = S\"\n  \"list_all is_Check (unlabel S) \\<Longrightarrow> dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S = S\"\n  \"list_all is_Update (unlabel S) \\<Longrightarrow> dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S = S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (list_all is_Assignment (unlabel S) \\<Longrightarrow>\n     dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S = S) &&&\n    (list_all is_Check (unlabel S) \\<Longrightarrow>\n     dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S = S) &&&\n    (list_all is_Update (unlabel S) \\<Longrightarrow>\n     dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S = S)", "proof (induction S)"], ["proof (state)\ngoal (6 subgoals):\n 1. list_all is_Assignment (unlabel []) \\<Longrightarrow>\n    dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t [] = []\n 2. list_all is_Check (unlabel []) \\<Longrightarrow>\n    dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t [] = []\n 3. list_all is_Update (unlabel []) \\<Longrightarrow>\n    dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t [] = []\n 4. \\<And>a S.\n       \\<lbrakk>list_all is_Assignment (unlabel S) \\<Longrightarrow>\n                dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S = S;\n        list_all is_Check (unlabel S) \\<Longrightarrow>\n        dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S = S;\n        list_all is_Update (unlabel S) \\<Longrightarrow>\n        dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S = S;\n        list_all is_Assignment (unlabel (a # S))\\<rbrakk>\n       \\<Longrightarrow> dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # S) =\n                         a # S\n 5. \\<And>a S.\n       \\<lbrakk>list_all is_Assignment (unlabel S) \\<Longrightarrow>\n                dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S = S;\n        list_all is_Check (unlabel S) \\<Longrightarrow>\n        dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S = S;\n        list_all is_Update (unlabel S) \\<Longrightarrow>\n        dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S = S;\n        list_all is_Check (unlabel (a # S))\\<rbrakk>\n       \\<Longrightarrow> dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # S) =\n                         a # S\n 6. \\<And>a S.\n       \\<lbrakk>list_all is_Assignment (unlabel S) \\<Longrightarrow>\n                dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S = S;\n        list_all is_Check (unlabel S) \\<Longrightarrow>\n        dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S = S;\n        list_all is_Update (unlabel S) \\<Longrightarrow>\n        dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S = S;\n        list_all is_Update (unlabel (a # S))\\<rbrakk>\n       \\<Longrightarrow> dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # S) =\n                         a # S", "case (Cons s S)"], ["proof (state)\nthis:\n  list_all is_Assignment (unlabel S) \\<Longrightarrow>\n  dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S = S\n  list_all is_Check (unlabel S) \\<Longrightarrow>\n  dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S = S\n  list_all is_Update (unlabel S) \\<Longrightarrow>\n  dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S = S\n\ngoal (6 subgoals):\n 1. list_all is_Assignment (unlabel []) \\<Longrightarrow>\n    dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t [] = []\n 2. list_all is_Check (unlabel []) \\<Longrightarrow>\n    dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t [] = []\n 3. list_all is_Update (unlabel []) \\<Longrightarrow>\n    dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t [] = []\n 4. \\<And>a S.\n       \\<lbrakk>list_all is_Assignment (unlabel S) \\<Longrightarrow>\n                dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S = S;\n        list_all is_Check (unlabel S) \\<Longrightarrow>\n        dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S = S;\n        list_all is_Update (unlabel S) \\<Longrightarrow>\n        dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S = S;\n        list_all is_Assignment (unlabel (a # S))\\<rbrakk>\n       \\<Longrightarrow> dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # S) =\n                         a # S\n 5. \\<And>a S.\n       \\<lbrakk>list_all is_Assignment (unlabel S) \\<Longrightarrow>\n                dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S = S;\n        list_all is_Check (unlabel S) \\<Longrightarrow>\n        dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S = S;\n        list_all is_Update (unlabel S) \\<Longrightarrow>\n        dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S = S;\n        list_all is_Check (unlabel (a # S))\\<rbrakk>\n       \\<Longrightarrow> dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # S) =\n                         a # S\n 6. \\<And>a S.\n       \\<lbrakk>list_all is_Assignment (unlabel S) \\<Longrightarrow>\n                dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S = S;\n        list_all is_Check (unlabel S) \\<Longrightarrow>\n        dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S = S;\n        list_all is_Update (unlabel S) \\<Longrightarrow>\n        dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S = S;\n        list_all is_Update (unlabel (a # S))\\<rbrakk>\n       \\<Longrightarrow> dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # S) =\n                         a # S", "obtain l x where s: \"s = (l,x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>l x. s = (l, x) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by moura"], ["proof (state)\nthis:\n  s = (l, x)\n\ngoal (6 subgoals):\n 1. list_all is_Assignment (unlabel []) \\<Longrightarrow>\n    dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t [] = []\n 2. list_all is_Check (unlabel []) \\<Longrightarrow>\n    dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t [] = []\n 3. list_all is_Update (unlabel []) \\<Longrightarrow>\n    dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t [] = []\n 4. \\<And>a S.\n       \\<lbrakk>list_all is_Assignment (unlabel S) \\<Longrightarrow>\n                dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S = S;\n        list_all is_Check (unlabel S) \\<Longrightarrow>\n        dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S = S;\n        list_all is_Update (unlabel S) \\<Longrightarrow>\n        dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S = S;\n        list_all is_Assignment (unlabel (a # S))\\<rbrakk>\n       \\<Longrightarrow> dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # S) =\n                         a # S\n 5. \\<And>a S.\n       \\<lbrakk>list_all is_Assignment (unlabel S) \\<Longrightarrow>\n                dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S = S;\n        list_all is_Check (unlabel S) \\<Longrightarrow>\n        dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S = S;\n        list_all is_Update (unlabel S) \\<Longrightarrow>\n        dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S = S;\n        list_all is_Check (unlabel (a # S))\\<rbrakk>\n       \\<Longrightarrow> dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # S) =\n                         a # S\n 6. \\<And>a S.\n       \\<lbrakk>list_all is_Assignment (unlabel S) \\<Longrightarrow>\n                dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S = S;\n        list_all is_Check (unlabel S) \\<Longrightarrow>\n        dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S = S;\n        list_all is_Update (unlabel S) \\<Longrightarrow>\n        dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S = S;\n        list_all is_Update (unlabel (a # S))\\<rbrakk>\n       \\<Longrightarrow> dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # S) =\n                         a # S", "{"], ["proof (state)\nthis:\n  s = (l, x)\n\ngoal (6 subgoals):\n 1. list_all is_Assignment (unlabel []) \\<Longrightarrow>\n    dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t [] = []\n 2. list_all is_Check (unlabel []) \\<Longrightarrow>\n    dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t [] = []\n 3. list_all is_Update (unlabel []) \\<Longrightarrow>\n    dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t [] = []\n 4. \\<And>a S.\n       \\<lbrakk>list_all is_Assignment (unlabel S) \\<Longrightarrow>\n                dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S = S;\n        list_all is_Check (unlabel S) \\<Longrightarrow>\n        dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S = S;\n        list_all is_Update (unlabel S) \\<Longrightarrow>\n        dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S = S;\n        list_all is_Assignment (unlabel (a # S))\\<rbrakk>\n       \\<Longrightarrow> dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # S) =\n                         a # S\n 5. \\<And>a S.\n       \\<lbrakk>list_all is_Assignment (unlabel S) \\<Longrightarrow>\n                dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S = S;\n        list_all is_Check (unlabel S) \\<Longrightarrow>\n        dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S = S;\n        list_all is_Update (unlabel S) \\<Longrightarrow>\n        dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S = S;\n        list_all is_Check (unlabel (a # S))\\<rbrakk>\n       \\<Longrightarrow> dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # S) =\n                         a # S\n 6. \\<And>a S.\n       \\<lbrakk>list_all is_Assignment (unlabel S) \\<Longrightarrow>\n                dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S = S;\n        list_all is_Check (unlabel S) \\<Longrightarrow>\n        dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S = S;\n        list_all is_Update (unlabel S) \\<Longrightarrow>\n        dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S = S;\n        list_all is_Update (unlabel (a # S))\\<rbrakk>\n       \\<Longrightarrow> dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # S) =\n                         a # S", "case 1"], ["proof (state)\nthis:\n  list_all is_Assignment (unlabel (s # S))\n\ngoal (6 subgoals):\n 1. list_all is_Assignment (unlabel []) \\<Longrightarrow>\n    dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t [] = []\n 2. list_all is_Check (unlabel []) \\<Longrightarrow>\n    dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t [] = []\n 3. list_all is_Update (unlabel []) \\<Longrightarrow>\n    dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t [] = []\n 4. \\<And>a S.\n       \\<lbrakk>list_all is_Assignment (unlabel S) \\<Longrightarrow>\n                dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S = S;\n        list_all is_Check (unlabel S) \\<Longrightarrow>\n        dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S = S;\n        list_all is_Update (unlabel S) \\<Longrightarrow>\n        dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S = S;\n        list_all is_Assignment (unlabel (a # S))\\<rbrakk>\n       \\<Longrightarrow> dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # S) =\n                         a # S\n 5. \\<And>a S.\n       \\<lbrakk>list_all is_Assignment (unlabel S) \\<Longrightarrow>\n                dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S = S;\n        list_all is_Check (unlabel S) \\<Longrightarrow>\n        dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S = S;\n        list_all is_Update (unlabel S) \\<Longrightarrow>\n        dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S = S;\n        list_all is_Check (unlabel (a # S))\\<rbrakk>\n       \\<Longrightarrow> dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # S) =\n                         a # S\n 6. \\<And>a S.\n       \\<lbrakk>list_all is_Assignment (unlabel S) \\<Longrightarrow>\n                dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S = S;\n        list_all is_Check (unlabel S) \\<Longrightarrow>\n        dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S = S;\n        list_all is_Update (unlabel S) \\<Longrightarrow>\n        dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S = S;\n        list_all is_Update (unlabel (a # S))\\<rbrakk>\n       \\<Longrightarrow> dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # S) =\n                         a # S", "thus ?case"], ["proof (prove)\nusing this:\n  list_all is_Assignment (unlabel (s # S))\n\ngoal (1 subgoal):\n 1. dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (s # S) = s # S", "using Cons s"], ["proof (prove)\nusing this:\n  list_all is_Assignment (unlabel (s # S))\n  list_all is_Assignment (unlabel S) \\<Longrightarrow>\n  dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S = S\n  list_all is_Check (unlabel S) \\<Longrightarrow>\n  dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S = S\n  list_all is_Update (unlabel S) \\<Longrightarrow>\n  dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S = S\n  s = (l, x)\n\ngoal (1 subgoal):\n 1. dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (s # S) = s # S", "unfolding unlabel_def dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t_def"], ["proof (prove)\nusing this:\n  list_all is_Assignment (map snd (s # S))\n  list_all is_Assignment (map snd S) \\<Longrightarrow>\n  map dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p S = S\n  list_all is_Check (map snd S) \\<Longrightarrow>\n  map dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p S = S\n  list_all is_Update (map snd S) \\<Longrightarrow>\n  map dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p S = S\n  s = (l, x)\n\ngoal (1 subgoal):\n 1. map dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (s # S) = s # S", "by (cases x) auto"], ["proof (state)\nthis:\n  dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (s # S) = s # S\n\ngoal (5 subgoals):\n 1. list_all is_Assignment (unlabel []) \\<Longrightarrow>\n    dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t [] = []\n 2. list_all is_Check (unlabel []) \\<Longrightarrow>\n    dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t [] = []\n 3. list_all is_Update (unlabel []) \\<Longrightarrow>\n    dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t [] = []\n 4. \\<And>a S.\n       \\<lbrakk>list_all is_Assignment (unlabel S) \\<Longrightarrow>\n                dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S = S;\n        list_all is_Check (unlabel S) \\<Longrightarrow>\n        dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S = S;\n        list_all is_Update (unlabel S) \\<Longrightarrow>\n        dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S = S;\n        list_all is_Check (unlabel (a # S))\\<rbrakk>\n       \\<Longrightarrow> dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # S) =\n                         a # S\n 5. \\<And>a S.\n       \\<lbrakk>list_all is_Assignment (unlabel S) \\<Longrightarrow>\n                dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S = S;\n        list_all is_Check (unlabel S) \\<Longrightarrow>\n        dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S = S;\n        list_all is_Update (unlabel S) \\<Longrightarrow>\n        dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S = S;\n        list_all is_Update (unlabel (a # S))\\<rbrakk>\n       \\<Longrightarrow> dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # S) =\n                         a # S", "}"], ["proof (state)\nthis:\n  list_all is_Assignment (unlabel (s # S)) \\<Longrightarrow>\n  dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (s # S) = s # S\n\ngoal (5 subgoals):\n 1. list_all is_Assignment (unlabel []) \\<Longrightarrow>\n    dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t [] = []\n 2. list_all is_Check (unlabel []) \\<Longrightarrow>\n    dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t [] = []\n 3. list_all is_Update (unlabel []) \\<Longrightarrow>\n    dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t [] = []\n 4. \\<And>a S.\n       \\<lbrakk>list_all is_Assignment (unlabel S) \\<Longrightarrow>\n                dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S = S;\n        list_all is_Check (unlabel S) \\<Longrightarrow>\n        dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S = S;\n        list_all is_Update (unlabel S) \\<Longrightarrow>\n        dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S = S;\n        list_all is_Check (unlabel (a # S))\\<rbrakk>\n       \\<Longrightarrow> dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # S) =\n                         a # S\n 5. \\<And>a S.\n       \\<lbrakk>list_all is_Assignment (unlabel S) \\<Longrightarrow>\n                dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S = S;\n        list_all is_Check (unlabel S) \\<Longrightarrow>\n        dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S = S;\n        list_all is_Update (unlabel S) \\<Longrightarrow>\n        dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S = S;\n        list_all is_Update (unlabel (a # S))\\<rbrakk>\n       \\<Longrightarrow> dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # S) =\n                         a # S", "{"], ["proof (state)\nthis:\n  list_all is_Assignment (unlabel (s # S)) \\<Longrightarrow>\n  dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (s # S) = s # S\n\ngoal (5 subgoals):\n 1. list_all is_Assignment (unlabel []) \\<Longrightarrow>\n    dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t [] = []\n 2. list_all is_Check (unlabel []) \\<Longrightarrow>\n    dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t [] = []\n 3. list_all is_Update (unlabel []) \\<Longrightarrow>\n    dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t [] = []\n 4. \\<And>a S.\n       \\<lbrakk>list_all is_Assignment (unlabel S) \\<Longrightarrow>\n                dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S = S;\n        list_all is_Check (unlabel S) \\<Longrightarrow>\n        dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S = S;\n        list_all is_Update (unlabel S) \\<Longrightarrow>\n        dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S = S;\n        list_all is_Check (unlabel (a # S))\\<rbrakk>\n       \\<Longrightarrow> dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # S) =\n                         a # S\n 5. \\<And>a S.\n       \\<lbrakk>list_all is_Assignment (unlabel S) \\<Longrightarrow>\n                dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S = S;\n        list_all is_Check (unlabel S) \\<Longrightarrow>\n        dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S = S;\n        list_all is_Update (unlabel S) \\<Longrightarrow>\n        dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S = S;\n        list_all is_Update (unlabel (a # S))\\<rbrakk>\n       \\<Longrightarrow> dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # S) =\n                         a # S", "case 2"], ["proof (state)\nthis:\n  list_all is_Check (unlabel (s # S))\n\ngoal (5 subgoals):\n 1. list_all is_Assignment (unlabel []) \\<Longrightarrow>\n    dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t [] = []\n 2. list_all is_Check (unlabel []) \\<Longrightarrow>\n    dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t [] = []\n 3. list_all is_Update (unlabel []) \\<Longrightarrow>\n    dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t [] = []\n 4. \\<And>a S.\n       \\<lbrakk>list_all is_Assignment (unlabel S) \\<Longrightarrow>\n                dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S = S;\n        list_all is_Check (unlabel S) \\<Longrightarrow>\n        dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S = S;\n        list_all is_Update (unlabel S) \\<Longrightarrow>\n        dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S = S;\n        list_all is_Check (unlabel (a # S))\\<rbrakk>\n       \\<Longrightarrow> dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # S) =\n                         a # S\n 5. \\<And>a S.\n       \\<lbrakk>list_all is_Assignment (unlabel S) \\<Longrightarrow>\n                dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S = S;\n        list_all is_Check (unlabel S) \\<Longrightarrow>\n        dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S = S;\n        list_all is_Update (unlabel S) \\<Longrightarrow>\n        dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S = S;\n        list_all is_Update (unlabel (a # S))\\<rbrakk>\n       \\<Longrightarrow> dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # S) =\n                         a # S", "thus ?case"], ["proof (prove)\nusing this:\n  list_all is_Check (unlabel (s # S))\n\ngoal (1 subgoal):\n 1. dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (s # S) = s # S", "using Cons s"], ["proof (prove)\nusing this:\n  list_all is_Check (unlabel (s # S))\n  list_all is_Assignment (unlabel S) \\<Longrightarrow>\n  dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S = S\n  list_all is_Check (unlabel S) \\<Longrightarrow>\n  dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S = S\n  list_all is_Update (unlabel S) \\<Longrightarrow>\n  dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S = S\n  s = (l, x)\n\ngoal (1 subgoal):\n 1. dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (s # S) = s # S", "unfolding unlabel_def dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t_def"], ["proof (prove)\nusing this:\n  list_all is_Check (map snd (s # S))\n  list_all is_Assignment (map snd S) \\<Longrightarrow>\n  map dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p S = S\n  list_all is_Check (map snd S) \\<Longrightarrow>\n  map dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p S = S\n  list_all is_Update (map snd S) \\<Longrightarrow>\n  map dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p S = S\n  s = (l, x)\n\ngoal (1 subgoal):\n 1. map dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (s # S) = s # S", "by (cases x) auto"], ["proof (state)\nthis:\n  dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (s # S) = s # S\n\ngoal (4 subgoals):\n 1. list_all is_Assignment (unlabel []) \\<Longrightarrow>\n    dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t [] = []\n 2. list_all is_Check (unlabel []) \\<Longrightarrow>\n    dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t [] = []\n 3. list_all is_Update (unlabel []) \\<Longrightarrow>\n    dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t [] = []\n 4. \\<And>a S.\n       \\<lbrakk>list_all is_Assignment (unlabel S) \\<Longrightarrow>\n                dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S = S;\n        list_all is_Check (unlabel S) \\<Longrightarrow>\n        dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S = S;\n        list_all is_Update (unlabel S) \\<Longrightarrow>\n        dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S = S;\n        list_all is_Update (unlabel (a # S))\\<rbrakk>\n       \\<Longrightarrow> dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # S) =\n                         a # S", "}"], ["proof (state)\nthis:\n  list_all is_Check (unlabel (s # S)) \\<Longrightarrow>\n  dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (s # S) = s # S\n\ngoal (4 subgoals):\n 1. list_all is_Assignment (unlabel []) \\<Longrightarrow>\n    dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t [] = []\n 2. list_all is_Check (unlabel []) \\<Longrightarrow>\n    dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t [] = []\n 3. list_all is_Update (unlabel []) \\<Longrightarrow>\n    dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t [] = []\n 4. \\<And>a S.\n       \\<lbrakk>list_all is_Assignment (unlabel S) \\<Longrightarrow>\n                dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S = S;\n        list_all is_Check (unlabel S) \\<Longrightarrow>\n        dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S = S;\n        list_all is_Update (unlabel S) \\<Longrightarrow>\n        dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S = S;\n        list_all is_Update (unlabel (a # S))\\<rbrakk>\n       \\<Longrightarrow> dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # S) =\n                         a # S", "{"], ["proof (state)\nthis:\n  list_all is_Check (unlabel (s # S)) \\<Longrightarrow>\n  dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (s # S) = s # S\n\ngoal (4 subgoals):\n 1. list_all is_Assignment (unlabel []) \\<Longrightarrow>\n    dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t [] = []\n 2. list_all is_Check (unlabel []) \\<Longrightarrow>\n    dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t [] = []\n 3. list_all is_Update (unlabel []) \\<Longrightarrow>\n    dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t [] = []\n 4. \\<And>a S.\n       \\<lbrakk>list_all is_Assignment (unlabel S) \\<Longrightarrow>\n                dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S = S;\n        list_all is_Check (unlabel S) \\<Longrightarrow>\n        dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S = S;\n        list_all is_Update (unlabel S) \\<Longrightarrow>\n        dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S = S;\n        list_all is_Update (unlabel (a # S))\\<rbrakk>\n       \\<Longrightarrow> dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # S) =\n                         a # S", "case 3"], ["proof (state)\nthis:\n  list_all is_Update (unlabel (s # S))\n\ngoal (4 subgoals):\n 1. list_all is_Assignment (unlabel []) \\<Longrightarrow>\n    dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t [] = []\n 2. list_all is_Check (unlabel []) \\<Longrightarrow>\n    dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t [] = []\n 3. list_all is_Update (unlabel []) \\<Longrightarrow>\n    dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t [] = []\n 4. \\<And>a S.\n       \\<lbrakk>list_all is_Assignment (unlabel S) \\<Longrightarrow>\n                dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S = S;\n        list_all is_Check (unlabel S) \\<Longrightarrow>\n        dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S = S;\n        list_all is_Update (unlabel S) \\<Longrightarrow>\n        dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S = S;\n        list_all is_Update (unlabel (a # S))\\<rbrakk>\n       \\<Longrightarrow> dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a # S) =\n                         a # S", "thus ?case"], ["proof (prove)\nusing this:\n  list_all is_Update (unlabel (s # S))\n\ngoal (1 subgoal):\n 1. dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (s # S) = s # S", "using Cons s"], ["proof (prove)\nusing this:\n  list_all is_Update (unlabel (s # S))\n  list_all is_Assignment (unlabel S) \\<Longrightarrow>\n  dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S = S\n  list_all is_Check (unlabel S) \\<Longrightarrow>\n  dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S = S\n  list_all is_Update (unlabel S) \\<Longrightarrow>\n  dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S = S\n  s = (l, x)\n\ngoal (1 subgoal):\n 1. dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (s # S) = s # S", "unfolding unlabel_def dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t_def"], ["proof (prove)\nusing this:\n  list_all is_Update (map snd (s # S))\n  list_all is_Assignment (map snd S) \\<Longrightarrow>\n  map dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p S = S\n  list_all is_Check (map snd S) \\<Longrightarrow>\n  map dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p S = S\n  list_all is_Update (map snd S) \\<Longrightarrow>\n  map dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p S = S\n  s = (l, x)\n\ngoal (1 subgoal):\n 1. map dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (s # S) = s # S", "by (cases x) auto"], ["proof (state)\nthis:\n  dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (s # S) = s # S\n\ngoal (3 subgoals):\n 1. list_all is_Assignment (unlabel []) \\<Longrightarrow>\n    dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t [] = []\n 2. list_all is_Check (unlabel []) \\<Longrightarrow>\n    dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t [] = []\n 3. list_all is_Update (unlabel []) \\<Longrightarrow>\n    dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t [] = []", "}"], ["proof (state)\nthis:\n  list_all is_Update (unlabel (s # S)) \\<Longrightarrow>\n  dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (s # S) = s # S\n\ngoal (3 subgoals):\n 1. list_all is_Assignment (unlabel []) \\<Longrightarrow>\n    dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t [] = []\n 2. list_all is_Check (unlabel []) \\<Longrightarrow>\n    dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t [] = []\n 3. list_all is_Update (unlabel []) \\<Longrightarrow>\n    dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t [] = []", "qed simp_all"], ["", "lemma wellformed_transaction_wf\\<^sub>s\\<^sub>s\\<^sub>t:\n  fixes T::\"('a, 'b, 'c, 'd) prot_transaction\"\n  assumes T: \"wellformed_transaction T\"\n  shows \"wf'\\<^sub>s\\<^sub>s\\<^sub>t (set (transaction_fresh T)) (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_strand T)))\" (is ?A)\n    and \"fv_transaction T \\<inter> bvars_transaction T = {}\" (is ?B)\n    and \"set (transaction_fresh T) \\<inter> bvars_transaction T = {}\" (is ?C)"], ["proof (prove)\ngoal (1 subgoal):\n 1. wf'\\<^sub>s\\<^sub>s\\<^sub>t (set (transaction_fresh T))\n     (unlabel\n       (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_strand T))) &&&\n    fv_transaction T \\<inter> bvars_transaction T = {} &&&\n    set (transaction_fresh T) \\<inter> bvars_transaction T = {}", "proof -"], ["proof (state)\ngoal (3 subgoals):\n 1. wf'\\<^sub>s\\<^sub>s\\<^sub>t (set (transaction_fresh T))\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_strand T)))\n 2. fv_transaction T \\<inter> bvars_transaction T = {}\n 3. set (transaction_fresh T) \\<inter> bvars_transaction T = {}", "define T1 where \"T1 \\<equiv> unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T))\""], ["proof (state)\nthis:\n  T1 \\<equiv>\n  unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T))\n\ngoal (3 subgoals):\n 1. wf'\\<^sub>s\\<^sub>s\\<^sub>t (set (transaction_fresh T))\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_strand T)))\n 2. fv_transaction T \\<inter> bvars_transaction T = {}\n 3. set (transaction_fresh T) \\<inter> bvars_transaction T = {}", "define T2 where \"T2 \\<equiv> unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_selects T))\""], ["proof (state)\nthis:\n  T2 \\<equiv>\n  unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_selects T))\n\ngoal (3 subgoals):\n 1. wf'\\<^sub>s\\<^sub>s\\<^sub>t (set (transaction_fresh T))\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_strand T)))\n 2. fv_transaction T \\<inter> bvars_transaction T = {}\n 3. set (transaction_fresh T) \\<inter> bvars_transaction T = {}", "define T3 where \"T3 \\<equiv> unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_checks T))\""], ["proof (state)\nthis:\n  T3 \\<equiv>\n  unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_checks T))\n\ngoal (3 subgoals):\n 1. wf'\\<^sub>s\\<^sub>s\\<^sub>t (set (transaction_fresh T))\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_strand T)))\n 2. fv_transaction T \\<inter> bvars_transaction T = {}\n 3. set (transaction_fresh T) \\<inter> bvars_transaction T = {}", "define T4 where \"T4 \\<equiv> unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_updates T))\""], ["proof (state)\nthis:\n  T4 \\<equiv>\n  unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_updates T))\n\ngoal (3 subgoals):\n 1. wf'\\<^sub>s\\<^sub>s\\<^sub>t (set (transaction_fresh T))\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_strand T)))\n 2. fv_transaction T \\<inter> bvars_transaction T = {}\n 3. set (transaction_fresh T) \\<inter> bvars_transaction T = {}", "define T5 where \"T5 \\<equiv> unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T))\""], ["proof (state)\nthis:\n  T5 \\<equiv>\n  unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T))\n\ngoal (3 subgoals):\n 1. wf'\\<^sub>s\\<^sub>s\\<^sub>t (set (transaction_fresh T))\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_strand T)))\n 2. fv_transaction T \\<inter> bvars_transaction T = {}\n 3. set (transaction_fresh T) \\<inter> bvars_transaction T = {}", "define X where \"X \\<equiv> set (transaction_fresh T)\""], ["proof (state)\nthis:\n  X \\<equiv> set (transaction_fresh T)\n\ngoal (3 subgoals):\n 1. wf'\\<^sub>s\\<^sub>s\\<^sub>t (set (transaction_fresh T))\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_strand T)))\n 2. fv_transaction T \\<inter> bvars_transaction T = {}\n 3. set (transaction_fresh T) \\<inter> bvars_transaction T = {}", "define Y where \"Y \\<equiv> X \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1\""], ["proof (state)\nthis:\n  Y \\<equiv> X \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1\n\ngoal (3 subgoals):\n 1. wf'\\<^sub>s\\<^sub>s\\<^sub>t (set (transaction_fresh T))\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_strand T)))\n 2. fv_transaction T \\<inter> bvars_transaction T = {}\n 3. set (transaction_fresh T) \\<inter> bvars_transaction T = {}", "define Z where \"Z \\<equiv> Y \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T2\""], ["proof (state)\nthis:\n  Z \\<equiv> Y \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T2\n\ngoal (3 subgoals):\n 1. wf'\\<^sub>s\\<^sub>s\\<^sub>t (set (transaction_fresh T))\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_strand T)))\n 2. fv_transaction T \\<inter> bvars_transaction T = {}\n 3. set (transaction_fresh T) \\<inter> bvars_transaction T = {}", "define f where \"f \\<equiv> \\<lambda>S::(('a,'b,'c) prot_fun, ('a,'b,'c) prot_var) stateful_strand.\n          \\<Union>((\\<lambda>x. case x of\n            Receive t \\<Rightarrow> fv t\n          | Equality Assign _ t' \\<Rightarrow> fv t'\n          | Insert t t' \\<Rightarrow> fv t \\<union> fv t'\n          | _ \\<Rightarrow> {}) ` set S)\""], ["proof (state)\nthis:\n  f \\<equiv>\n  \\<lambda>S.\n     \\<Union>x\\<in>set S.\n        case x of receive\\<langle>x\\<rangle> \\<Rightarrow> fv x\n        | \\<langle>assign: x \\<doteq> t'\\<rangle> \\<Rightarrow> fv t'\n        | \\<langle>check: x \\<doteq> t'\\<rangle> \\<Rightarrow> {}\n        | insert\\<langle>t,t'\\<rangle> \\<Rightarrow> fv t \\<union> fv t'\n        | _ \\<Rightarrow> {}\n\ngoal (3 subgoals):\n 1. wf'\\<^sub>s\\<^sub>s\\<^sub>t (set (transaction_fresh T))\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_strand T)))\n 2. fv_transaction T \\<inter> bvars_transaction T = {}\n 3. set (transaction_fresh T) \\<inter> bvars_transaction T = {}", "note defs1 = T1_def T2_def T3_def T4_def T5_def"], ["proof (state)\nthis:\n  T1 \\<equiv>\n  unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T))\n  T2 \\<equiv>\n  unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_selects T))\n  T3 \\<equiv>\n  unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_checks T))\n  T4 \\<equiv>\n  unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_updates T))\n  T5 \\<equiv>\n  unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T))\n\ngoal (3 subgoals):\n 1. wf'\\<^sub>s\\<^sub>s\\<^sub>t (set (transaction_fresh T))\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_strand T)))\n 2. fv_transaction T \\<inter> bvars_transaction T = {}\n 3. set (transaction_fresh T) \\<inter> bvars_transaction T = {}", "note defs2 = X_def Y_def Z_def"], ["proof (state)\nthis:\n  X \\<equiv> set (transaction_fresh T)\n  Y \\<equiv> X \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1\n  Z \\<equiv> Y \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T2\n\ngoal (3 subgoals):\n 1. wf'\\<^sub>s\\<^sub>s\\<^sub>t (set (transaction_fresh T))\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_strand T)))\n 2. fv_transaction T \\<inter> bvars_transaction T = {}\n 3. set (transaction_fresh T) \\<inter> bvars_transaction T = {}", "note defs3 = f_def"], ["proof (state)\nthis:\n  f \\<equiv>\n  \\<lambda>S.\n     \\<Union>x\\<in>set S.\n        case x of receive\\<langle>x\\<rangle> \\<Rightarrow> fv x\n        | \\<langle>assign: x \\<doteq> t'\\<rangle> \\<Rightarrow> fv t'\n        | \\<langle>check: x \\<doteq> t'\\<rangle> \\<Rightarrow> {}\n        | insert\\<langle>t,t'\\<rangle> \\<Rightarrow> fv t \\<union> fv t'\n        | _ \\<Rightarrow> {}\n\ngoal (3 subgoals):\n 1. wf'\\<^sub>s\\<^sub>s\\<^sub>t (set (transaction_fresh T))\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_strand T)))\n 2. fv_transaction T \\<inter> bvars_transaction T = {}\n 3. set (transaction_fresh T) \\<inter> bvars_transaction T = {}", "have 0: \"wf'\\<^sub>s\\<^sub>s\\<^sub>t V (S @ S')\"\n    when \"wf'\\<^sub>s\\<^sub>s\\<^sub>t V S\" \"f S' \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t S \\<union> V\" for V S S'"], ["proof (prove)\ngoal (1 subgoal):\n 1. wf'\\<^sub>s\\<^sub>s\\<^sub>t V (S @ S')", "by (metis that wf\\<^sub>s\\<^sub>s\\<^sub>t_append_suffix' f_def)"], ["proof (state)\nthis:\n  \\<lbrakk>wf'\\<^sub>s\\<^sub>s\\<^sub>t ?V ?S;\n   f ?S'\n   \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t ?S \\<union> ?V\\<rbrakk>\n  \\<Longrightarrow> wf'\\<^sub>s\\<^sub>s\\<^sub>t ?V (?S @ ?S')\n\ngoal (3 subgoals):\n 1. wf'\\<^sub>s\\<^sub>s\\<^sub>t (set (transaction_fresh T))\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_strand T)))\n 2. fv_transaction T \\<inter> bvars_transaction T = {}\n 3. set (transaction_fresh T) \\<inter> bvars_transaction T = {}", "have 1: \"unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_strand T)) = T1@T2@T3@T4@T5\""], ["proof (prove)\ngoal (1 subgoal):\n 1. unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_strand T)) =\n    T1 @ T2 @ T3 @ T4 @ T5", "using dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t_append unlabel_append"], ["proof (prove)\nusing this:\n  dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (?A @ ?B) =\n  dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t ?A @\n  dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t ?B\n  unlabel (?A @ ?B) = unlabel ?A @ unlabel ?B\n\ngoal (1 subgoal):\n 1. unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_strand T)) =\n    T1 @ T2 @ T3 @ T4 @ T5", "unfolding transaction_strand_def defs1"], ["proof (prove)\nusing this:\n  dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (?A @ ?B) =\n  dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t ?A @\n  dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t ?B\n  unlabel (?A @ ?B) = unlabel ?A @ unlabel ?B\n\ngoal (1 subgoal):\n 1. unlabel\n     (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n       (transaction_receive T @\n        transaction_selects T @\n        transaction_checks T @\n        transaction_updates T @ transaction_send T)) =\n    unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T)) @\n    unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_selects T)) @\n    unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_checks T)) @\n    unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_updates T)) @\n    unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T))", "by simp"], ["proof (state)\nthis:\n  unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_strand T)) =\n  T1 @ T2 @ T3 @ T4 @ T5\n\ngoal (3 subgoals):\n 1. wf'\\<^sub>s\\<^sub>s\\<^sub>t (set (transaction_fresh T))\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_strand T)))\n 2. fv_transaction T \\<inter> bvars_transaction T = {}\n 3. set (transaction_fresh T) \\<inter> bvars_transaction T = {}", "have 2:\n      \"\\<forall>x \\<in> set T1. is_Send x\" \"\\<forall>x \\<in> set T2. is_Assignment x\" \"\\<forall>x \\<in> set T3. is_Check x\"\n      \"\\<forall>x \\<in> set T4. is_Update x\" \"\\<forall>x \\<in> set T5. is_Receive x\"\n      \"fv\\<^sub>s\\<^sub>s\\<^sub>t T3 \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1 \\<union> fv\\<^sub>s\\<^sub>s\\<^sub>t T2\" \"fv\\<^sub>s\\<^sub>s\\<^sub>t T4 \\<union> fv\\<^sub>s\\<^sub>s\\<^sub>t T5 \\<subseteq> X \\<union> fv\\<^sub>s\\<^sub>s\\<^sub>t T1 \\<union> fv\\<^sub>s\\<^sub>s\\<^sub>t T2\"\n      \"X \\<inter> fv\\<^sub>s\\<^sub>s\\<^sub>t T1 = {}\" \"X \\<inter> fv\\<^sub>s\\<^sub>s\\<^sub>t T2 = {}\"\n      \"\\<forall>x \\<in> set T2. is_Equality x \\<longrightarrow> fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<forall>x\\<in>set T1. stateful_strand_step.is_Send x &&&\n      \\<forall>x\\<in>set T2. is_Assignment x) &&&\n     \\<forall>x\\<in>set T3. is_Check x &&&\n     \\<forall>x\\<in>set T4. is_Update x &&&\n     \\<forall>x\\<in>set T5. stateful_strand_step.is_Receive x) &&&\n    (fv\\<^sub>s\\<^sub>s\\<^sub>t T3\n     \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1 \\<union>\n                 fv\\<^sub>s\\<^sub>s\\<^sub>t T2 &&&\n     fv\\<^sub>s\\<^sub>s\\<^sub>t T4 \\<union> fv\\<^sub>s\\<^sub>s\\<^sub>t T5\n     \\<subseteq> X \\<union> fv\\<^sub>s\\<^sub>s\\<^sub>t T1 \\<union>\n                 fv\\<^sub>s\\<^sub>s\\<^sub>t T2) &&&\n    X \\<inter> fv\\<^sub>s\\<^sub>s\\<^sub>t T1 = {} &&&\n    X \\<inter> fv\\<^sub>s\\<^sub>s\\<^sub>t T2 = {} &&&\n    \\<forall>x\\<in>set T2.\n       stateful_strand_step.is_Equality x \\<longrightarrow>\n       fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1", "using T"], ["proof (prove)\nusing this:\n  wellformed_transaction T\n\ngoal (1 subgoal):\n 1. ((\\<forall>x\\<in>set T1. stateful_strand_step.is_Send x &&&\n      \\<forall>x\\<in>set T2. is_Assignment x) &&&\n     \\<forall>x\\<in>set T3. is_Check x &&&\n     \\<forall>x\\<in>set T4. is_Update x &&&\n     \\<forall>x\\<in>set T5. stateful_strand_step.is_Receive x) &&&\n    (fv\\<^sub>s\\<^sub>s\\<^sub>t T3\n     \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1 \\<union>\n                 fv\\<^sub>s\\<^sub>s\\<^sub>t T2 &&&\n     fv\\<^sub>s\\<^sub>s\\<^sub>t T4 \\<union> fv\\<^sub>s\\<^sub>s\\<^sub>t T5\n     \\<subseteq> X \\<union> fv\\<^sub>s\\<^sub>s\\<^sub>t T1 \\<union>\n                 fv\\<^sub>s\\<^sub>s\\<^sub>t T2) &&&\n    X \\<inter> fv\\<^sub>s\\<^sub>s\\<^sub>t T1 = {} &&&\n    X \\<inter> fv\\<^sub>s\\<^sub>s\\<^sub>t T2 = {} &&&\n    \\<forall>x\\<in>set T2.\n       stateful_strand_step.is_Equality x \\<longrightarrow>\n       fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1", "unfolding defs1 defs2 wellformed_transaction_def"], ["proof (prove)\nusing this:\n  list_all stateful_strand_step.is_Receive\n   (unlabel (transaction_receive T)) \\<and>\n  list_all is_Assignment (unlabel (transaction_selects T)) \\<and>\n  list_all is_Check (unlabel (transaction_checks T)) \\<and>\n  list_all is_Update (unlabel (transaction_updates T)) \\<and>\n  list_all stateful_strand_step.is_Send\n   (unlabel (transaction_send T)) \\<and>\n  set (transaction_fresh T)\n  \\<subseteq> fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n               (transaction_updates T) \\<union>\n              fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T) \\<and>\n  set (transaction_fresh T) \\<inter>\n  fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T) =\n  {} \\<and>\n  set (transaction_fresh T) \\<inter>\n  fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_selects T) =\n  {} \\<and>\n  fv_transaction T \\<inter> bvars_transaction T = {} \\<and>\n  fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_checks T)\n  \\<subseteq> fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n               (transaction_receive T) \\<union>\n              fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n               (transaction_selects T) \\<and>\n  fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_updates T) \\<union>\n  fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T) -\n  set (transaction_fresh T)\n  \\<subseteq> fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n               (transaction_receive T) \\<union>\n              fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n               (transaction_selects T) \\<and>\n  (\\<forall>x\\<in>set (unlabel (transaction_selects T)).\n      stateful_strand_step.is_Equality x \\<longrightarrow>\n      fv (the_rhs x)\n      \\<subseteq> fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                   (transaction_receive T))\n\ngoal (1 subgoal):\n 1. ((\\<forall>x\\<in>set (unlabel\n                           (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                             (transaction_receive T))).\n         stateful_strand_step.is_Send x &&&\n      \\<forall>x\\<in>set (unlabel\n                           (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                             (transaction_selects T))).\n         is_Assignment x) &&&\n     \\<forall>x\\<in>set (unlabel\n                          (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                            (transaction_checks T))).\n        is_Check x &&&\n     \\<forall>x\\<in>set (unlabel\n                          (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                            (transaction_updates T))).\n        is_Update x &&&\n     \\<forall>x\\<in>set (unlabel\n                          (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                            (transaction_send T))).\n        stateful_strand_step.is_Receive x) &&&\n    (fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n      (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_checks T))\n     \\<subseteq> fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                  (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                    (transaction_receive T)) \\<union>\n                 fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                  (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                    (transaction_selects T)) &&&\n     fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n      (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n        (transaction_updates T)) \\<union>\n     fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n      (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T))\n     \\<subseteq> set (transaction_fresh T) \\<union>\n                 fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                  (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                    (transaction_receive T)) \\<union>\n                 fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                  (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                    (transaction_selects T))) &&&\n    set (transaction_fresh T) \\<inter>\n    fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T)) =\n    {} &&&\n    set (transaction_fresh T) \\<inter>\n    fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_selects T)) =\n    {} &&&\n    \\<forall>x\\<in>set (unlabel\n                         (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                           (transaction_selects T))).\n       stateful_strand_step.is_Equality x \\<longrightarrow>\n       fv (the_rhs x)\n       \\<subseteq> fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                    (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                      (transaction_receive T))", "by (auto simp add: Ball_set dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t_list_all fv\\<^sub>s\\<^sub>s\\<^sub>t_unlabel_dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t_eq simp del: fv\\<^sub>s\\<^sub>s\\<^sub>t_def)"], ["proof (state)\nthis:\n  \\<forall>x\\<in>set T1. stateful_strand_step.is_Send x\n  \\<forall>x\\<in>set T2. is_Assignment x\n  \\<forall>x\\<in>set T3. is_Check x\n  \\<forall>x\\<in>set T4. is_Update x\n  \\<forall>x\\<in>set T5. stateful_strand_step.is_Receive x\n  fv\\<^sub>s\\<^sub>s\\<^sub>t T3\n  \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1 \\<union>\n              fv\\<^sub>s\\<^sub>s\\<^sub>t T2\n  fv\\<^sub>s\\<^sub>s\\<^sub>t T4 \\<union> fv\\<^sub>s\\<^sub>s\\<^sub>t T5\n  \\<subseteq> X \\<union> fv\\<^sub>s\\<^sub>s\\<^sub>t T1 \\<union>\n              fv\\<^sub>s\\<^sub>s\\<^sub>t T2\n  X \\<inter> fv\\<^sub>s\\<^sub>s\\<^sub>t T1 = {}\n  X \\<inter> fv\\<^sub>s\\<^sub>s\\<^sub>t T2 = {}\n  \\<forall>x\\<in>set T2.\n     stateful_strand_step.is_Equality x \\<longrightarrow>\n     fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\n\ngoal (3 subgoals):\n 1. wf'\\<^sub>s\\<^sub>s\\<^sub>t (set (transaction_fresh T))\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_strand T)))\n 2. fv_transaction T \\<inter> bvars_transaction T = {}\n 3. set (transaction_fresh T) \\<inter> bvars_transaction T = {}", "have 3: \"wf'\\<^sub>s\\<^sub>s\\<^sub>t X T1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf'\\<^sub>s\\<^sub>s\\<^sub>t X T1", "using 2(1)"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>set T1. stateful_strand_step.is_Send x\n\ngoal (1 subgoal):\n 1. wf'\\<^sub>s\\<^sub>s\\<^sub>t X T1", "proof (induction T1 arbitrary: X)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>X.\n       Ball (set []) stateful_strand_step.is_Send \\<Longrightarrow>\n       wf'\\<^sub>s\\<^sub>s\\<^sub>t X []\n 2. \\<And>a T1 X.\n       \\<lbrakk>\\<And>X.\n                   Ball (set T1)\n                    stateful_strand_step.is_Send \\<Longrightarrow>\n                   wf'\\<^sub>s\\<^sub>s\\<^sub>t X T1;\n        Ball (set (a # T1)) stateful_strand_step.is_Send\\<rbrakk>\n       \\<Longrightarrow> wf'\\<^sub>s\\<^sub>s\\<^sub>t X (a # T1)", "case (Cons s T)"], ["proof (state)\nthis:\n  \\<forall>a\\<in>set T. stateful_strand_step.is_Send a \\<Longrightarrow>\n  wf'\\<^sub>s\\<^sub>s\\<^sub>t ?X T\n  \\<forall>a\\<in>set (s # T). stateful_strand_step.is_Send a\n\ngoal (2 subgoals):\n 1. \\<And>X.\n       Ball (set []) stateful_strand_step.is_Send \\<Longrightarrow>\n       wf'\\<^sub>s\\<^sub>s\\<^sub>t X []\n 2. \\<And>a T1 X.\n       \\<lbrakk>\\<And>X.\n                   Ball (set T1)\n                    stateful_strand_step.is_Send \\<Longrightarrow>\n                   wf'\\<^sub>s\\<^sub>s\\<^sub>t X T1;\n        Ball (set (a # T1)) stateful_strand_step.is_Send\\<rbrakk>\n       \\<Longrightarrow> wf'\\<^sub>s\\<^sub>s\\<^sub>t X (a # T1)", "obtain t where \"s = send\\<langle>t\\<rangle>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>t.\n        s = send\\<langle>t\\<rangle> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using Cons.prems"], ["proof (prove)\nusing this:\n  \\<forall>a\\<in>set (s # T). stateful_strand_step.is_Send a\n\ngoal (1 subgoal):\n 1. (\\<And>t.\n        s = send\\<langle>t\\<rangle> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (cases s) moura+"], ["proof (state)\nthis:\n  s = send\\<langle>t\\<rangle>\n\ngoal (2 subgoals):\n 1. \\<And>X.\n       Ball (set []) stateful_strand_step.is_Send \\<Longrightarrow>\n       wf'\\<^sub>s\\<^sub>s\\<^sub>t X []\n 2. \\<And>a T1 X.\n       \\<lbrakk>\\<And>X.\n                   Ball (set T1)\n                    stateful_strand_step.is_Send \\<Longrightarrow>\n                   wf'\\<^sub>s\\<^sub>s\\<^sub>t X T1;\n        Ball (set (a # T1)) stateful_strand_step.is_Send\\<rbrakk>\n       \\<Longrightarrow> wf'\\<^sub>s\\<^sub>s\\<^sub>t X (a # T1)", "thus ?case"], ["proof (prove)\nusing this:\n  s = send\\<langle>t\\<rangle>\n\ngoal (1 subgoal):\n 1. wf'\\<^sub>s\\<^sub>s\\<^sub>t X (s # T)", "using Cons"], ["proof (prove)\nusing this:\n  s = send\\<langle>t\\<rangle>\n  \\<forall>a\\<in>set T. stateful_strand_step.is_Send a \\<Longrightarrow>\n  wf'\\<^sub>s\\<^sub>s\\<^sub>t ?X T\n  \\<forall>a\\<in>set (s # T). stateful_strand_step.is_Send a\n\ngoal (1 subgoal):\n 1. wf'\\<^sub>s\\<^sub>s\\<^sub>t X (s # T)", "by auto"], ["proof (state)\nthis:\n  wf'\\<^sub>s\\<^sub>s\\<^sub>t X (s # T)\n\ngoal (1 subgoal):\n 1. \\<And>X.\n       Ball (set []) stateful_strand_step.is_Send \\<Longrightarrow>\n       wf'\\<^sub>s\\<^sub>s\\<^sub>t X []", "qed simp"], ["proof (state)\nthis:\n  wf'\\<^sub>s\\<^sub>s\\<^sub>t X T1\n\ngoal (3 subgoals):\n 1. wf'\\<^sub>s\\<^sub>s\\<^sub>t (set (transaction_fresh T))\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_strand T)))\n 2. fv_transaction T \\<inter> bvars_transaction T = {}\n 3. set (transaction_fresh T) \\<inter> bvars_transaction T = {}", "have 4: \"f T1 = {}\" \"fv\\<^sub>s\\<^sub>s\\<^sub>t T1 = wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f T1 = {} &&&\n    fv\\<^sub>s\\<^sub>s\\<^sub>t T1 = wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1", "using 2(1)"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>set T1. stateful_strand_step.is_Send x\n\ngoal (1 subgoal):\n 1. f T1 = {} &&&\n    fv\\<^sub>s\\<^sub>s\\<^sub>t T1 = wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1", "proof (induction T1)"], ["proof (state)\ngoal (4 subgoals):\n 1. Ball (set []) stateful_strand_step.is_Send \\<Longrightarrow> f [] = {}\n 2. Ball (set []) stateful_strand_step.is_Send \\<Longrightarrow>\n    fv\\<^sub>s\\<^sub>s\\<^sub>t [] = wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t []\n 3. \\<And>a T1.\n       \\<lbrakk>Ball (set T1) stateful_strand_step.is_Send \\<Longrightarrow>\n                f T1 = {};\n        Ball (set T1) stateful_strand_step.is_Send \\<Longrightarrow>\n        fv\\<^sub>s\\<^sub>s\\<^sub>t T1 =\n        wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        Ball (set (a # T1)) stateful_strand_step.is_Send\\<rbrakk>\n       \\<Longrightarrow> f (a # T1) = {}\n 4. \\<And>a T1.\n       \\<lbrakk>Ball (set T1) stateful_strand_step.is_Send \\<Longrightarrow>\n                f T1 = {};\n        Ball (set T1) stateful_strand_step.is_Send \\<Longrightarrow>\n        fv\\<^sub>s\\<^sub>s\\<^sub>t T1 =\n        wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        Ball (set (a # T1)) stateful_strand_step.is_Send\\<rbrakk>\n       \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t (a # T1) =\n                         wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t (a # T1)", "case (Cons s T)"], ["proof (state)\nthis:\n  \\<forall>a\\<in>set T. stateful_strand_step.is_Send a \\<Longrightarrow>\n  f T = {}\n  \\<forall>a\\<in>set T. stateful_strand_step.is_Send a \\<Longrightarrow>\n  fv\\<^sub>s\\<^sub>s\\<^sub>t T = wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T\n\ngoal (4 subgoals):\n 1. Ball (set []) stateful_strand_step.is_Send \\<Longrightarrow> f [] = {}\n 2. Ball (set []) stateful_strand_step.is_Send \\<Longrightarrow>\n    fv\\<^sub>s\\<^sub>s\\<^sub>t [] = wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t []\n 3. \\<And>a T1.\n       \\<lbrakk>Ball (set T1) stateful_strand_step.is_Send \\<Longrightarrow>\n                f T1 = {};\n        Ball (set T1) stateful_strand_step.is_Send \\<Longrightarrow>\n        fv\\<^sub>s\\<^sub>s\\<^sub>t T1 =\n        wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        Ball (set (a # T1)) stateful_strand_step.is_Send\\<rbrakk>\n       \\<Longrightarrow> f (a # T1) = {}\n 4. \\<And>a T1.\n       \\<lbrakk>Ball (set T1) stateful_strand_step.is_Send \\<Longrightarrow>\n                f T1 = {};\n        Ball (set T1) stateful_strand_step.is_Send \\<Longrightarrow>\n        fv\\<^sub>s\\<^sub>s\\<^sub>t T1 =\n        wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        Ball (set (a # T1)) stateful_strand_step.is_Send\\<rbrakk>\n       \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t (a # T1) =\n                         wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t (a # T1)", "{"], ["proof (state)\nthis:\n  \\<forall>a\\<in>set T. stateful_strand_step.is_Send a \\<Longrightarrow>\n  f T = {}\n  \\<forall>a\\<in>set T. stateful_strand_step.is_Send a \\<Longrightarrow>\n  fv\\<^sub>s\\<^sub>s\\<^sub>t T = wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T\n\ngoal (4 subgoals):\n 1. Ball (set []) stateful_strand_step.is_Send \\<Longrightarrow> f [] = {}\n 2. Ball (set []) stateful_strand_step.is_Send \\<Longrightarrow>\n    fv\\<^sub>s\\<^sub>s\\<^sub>t [] = wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t []\n 3. \\<And>a T1.\n       \\<lbrakk>Ball (set T1) stateful_strand_step.is_Send \\<Longrightarrow>\n                f T1 = {};\n        Ball (set T1) stateful_strand_step.is_Send \\<Longrightarrow>\n        fv\\<^sub>s\\<^sub>s\\<^sub>t T1 =\n        wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        Ball (set (a # T1)) stateful_strand_step.is_Send\\<rbrakk>\n       \\<Longrightarrow> f (a # T1) = {}\n 4. \\<And>a T1.\n       \\<lbrakk>Ball (set T1) stateful_strand_step.is_Send \\<Longrightarrow>\n                f T1 = {};\n        Ball (set T1) stateful_strand_step.is_Send \\<Longrightarrow>\n        fv\\<^sub>s\\<^sub>s\\<^sub>t T1 =\n        wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        Ball (set (a # T1)) stateful_strand_step.is_Send\\<rbrakk>\n       \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t (a # T1) =\n                         wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t (a # T1)", "case 1"], ["proof (state)\nthis:\n  \\<forall>a\\<in>set (s # T). stateful_strand_step.is_Send a\n\ngoal (4 subgoals):\n 1. Ball (set []) stateful_strand_step.is_Send \\<Longrightarrow> f [] = {}\n 2. Ball (set []) stateful_strand_step.is_Send \\<Longrightarrow>\n    fv\\<^sub>s\\<^sub>s\\<^sub>t [] = wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t []\n 3. \\<And>a T1.\n       \\<lbrakk>Ball (set T1) stateful_strand_step.is_Send \\<Longrightarrow>\n                f T1 = {};\n        Ball (set T1) stateful_strand_step.is_Send \\<Longrightarrow>\n        fv\\<^sub>s\\<^sub>s\\<^sub>t T1 =\n        wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        Ball (set (a # T1)) stateful_strand_step.is_Send\\<rbrakk>\n       \\<Longrightarrow> f (a # T1) = {}\n 4. \\<And>a T1.\n       \\<lbrakk>Ball (set T1) stateful_strand_step.is_Send \\<Longrightarrow>\n                f T1 = {};\n        Ball (set T1) stateful_strand_step.is_Send \\<Longrightarrow>\n        fv\\<^sub>s\\<^sub>s\\<^sub>t T1 =\n        wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        Ball (set (a # T1)) stateful_strand_step.is_Send\\<rbrakk>\n       \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t (a # T1) =\n                         wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t (a # T1)", "thus ?case"], ["proof (prove)\nusing this:\n  \\<forall>a\\<in>set (s # T). stateful_strand_step.is_Send a\n\ngoal (1 subgoal):\n 1. f (s # T) = {}", "using Cons"], ["proof (prove)\nusing this:\n  \\<forall>a\\<in>set (s # T). stateful_strand_step.is_Send a\n  \\<forall>a\\<in>set T. stateful_strand_step.is_Send a \\<Longrightarrow>\n  f T = {}\n  \\<forall>a\\<in>set T. stateful_strand_step.is_Send a \\<Longrightarrow>\n  fv\\<^sub>s\\<^sub>s\\<^sub>t T = wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T\n\ngoal (1 subgoal):\n 1. f (s # T) = {}", "unfolding defs3"], ["proof (prove)\nusing this:\n  \\<forall>a\\<in>set (s # T). stateful_strand_step.is_Send a\n  \\<forall>a\\<in>set T. stateful_strand_step.is_Send a \\<Longrightarrow>\n  \\<Union>\n   (case_stateful_strand_step (\\<lambda>term. {}) fv\n     (\\<lambda>poscheckvariant x t'.\n         case poscheckvariant of assign \\<Rightarrow> fv t'\n         | check \\<Rightarrow> {})\n     (\\<lambda>t t'. fv t \\<union> fv t') (\\<lambda>term1 term2. {})\n     (\\<lambda>poscheckvariant term1 term2. {})\n     (\\<lambda>list1 list2 list3. {}) `\n    set T) =\n  {}\n  \\<forall>a\\<in>set T. stateful_strand_step.is_Send a \\<Longrightarrow>\n  fv\\<^sub>s\\<^sub>s\\<^sub>t T = wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T\n\ngoal (1 subgoal):\n 1. \\<Union>\n     (case_stateful_strand_step (\\<lambda>term. {}) fv\n       (\\<lambda>poscheckvariant x t'.\n           case poscheckvariant of assign \\<Rightarrow> fv t'\n           | check \\<Rightarrow> {})\n       (\\<lambda>t t'. fv t \\<union> fv t') (\\<lambda>term1 term2. {})\n       (\\<lambda>poscheckvariant term1 term2. {})\n       (\\<lambda>list1 list2 list3. {}) `\n      set (s # T)) =\n    {}", "by (cases s) auto"], ["proof (state)\nthis:\n  f (s # T) = {}\n\ngoal (3 subgoals):\n 1. Ball (set []) stateful_strand_step.is_Send \\<Longrightarrow> f [] = {}\n 2. Ball (set []) stateful_strand_step.is_Send \\<Longrightarrow>\n    fv\\<^sub>s\\<^sub>s\\<^sub>t [] = wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t []\n 3. \\<And>a T1.\n       \\<lbrakk>Ball (set T1) stateful_strand_step.is_Send \\<Longrightarrow>\n                f T1 = {};\n        Ball (set T1) stateful_strand_step.is_Send \\<Longrightarrow>\n        fv\\<^sub>s\\<^sub>s\\<^sub>t T1 =\n        wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        Ball (set (a # T1)) stateful_strand_step.is_Send\\<rbrakk>\n       \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t (a # T1) =\n                         wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t (a # T1)", "}"], ["proof (state)\nthis:\n  \\<forall>a\\<in>set (s # T).\n     stateful_strand_step.is_Send a \\<Longrightarrow>\n  f (s # T) = {}\n\ngoal (3 subgoals):\n 1. Ball (set []) stateful_strand_step.is_Send \\<Longrightarrow> f [] = {}\n 2. Ball (set []) stateful_strand_step.is_Send \\<Longrightarrow>\n    fv\\<^sub>s\\<^sub>s\\<^sub>t [] = wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t []\n 3. \\<And>a T1.\n       \\<lbrakk>Ball (set T1) stateful_strand_step.is_Send \\<Longrightarrow>\n                f T1 = {};\n        Ball (set T1) stateful_strand_step.is_Send \\<Longrightarrow>\n        fv\\<^sub>s\\<^sub>s\\<^sub>t T1 =\n        wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        Ball (set (a # T1)) stateful_strand_step.is_Send\\<rbrakk>\n       \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t (a # T1) =\n                         wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t (a # T1)", "{"], ["proof (state)\nthis:\n  \\<forall>a\\<in>set (s # T).\n     stateful_strand_step.is_Send a \\<Longrightarrow>\n  f (s # T) = {}\n\ngoal (3 subgoals):\n 1. Ball (set []) stateful_strand_step.is_Send \\<Longrightarrow> f [] = {}\n 2. Ball (set []) stateful_strand_step.is_Send \\<Longrightarrow>\n    fv\\<^sub>s\\<^sub>s\\<^sub>t [] = wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t []\n 3. \\<And>a T1.\n       \\<lbrakk>Ball (set T1) stateful_strand_step.is_Send \\<Longrightarrow>\n                f T1 = {};\n        Ball (set T1) stateful_strand_step.is_Send \\<Longrightarrow>\n        fv\\<^sub>s\\<^sub>s\\<^sub>t T1 =\n        wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        Ball (set (a # T1)) stateful_strand_step.is_Send\\<rbrakk>\n       \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t (a # T1) =\n                         wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t (a # T1)", "case 2"], ["proof (state)\nthis:\n  \\<forall>a\\<in>set (s # T). stateful_strand_step.is_Send a\n\ngoal (3 subgoals):\n 1. Ball (set []) stateful_strand_step.is_Send \\<Longrightarrow> f [] = {}\n 2. Ball (set []) stateful_strand_step.is_Send \\<Longrightarrow>\n    fv\\<^sub>s\\<^sub>s\\<^sub>t [] = wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t []\n 3. \\<And>a T1.\n       \\<lbrakk>Ball (set T1) stateful_strand_step.is_Send \\<Longrightarrow>\n                f T1 = {};\n        Ball (set T1) stateful_strand_step.is_Send \\<Longrightarrow>\n        fv\\<^sub>s\\<^sub>s\\<^sub>t T1 =\n        wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        Ball (set (a # T1)) stateful_strand_step.is_Send\\<rbrakk>\n       \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t (a # T1) =\n                         wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t (a # T1)", "thus ?case"], ["proof (prove)\nusing this:\n  \\<forall>a\\<in>set (s # T). stateful_strand_step.is_Send a\n\ngoal (1 subgoal):\n 1. fv\\<^sub>s\\<^sub>s\\<^sub>t (s # T) =\n    wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t (s # T)", "using Cons"], ["proof (prove)\nusing this:\n  \\<forall>a\\<in>set (s # T). stateful_strand_step.is_Send a\n  \\<forall>a\\<in>set T. stateful_strand_step.is_Send a \\<Longrightarrow>\n  f T = {}\n  \\<forall>a\\<in>set T. stateful_strand_step.is_Send a \\<Longrightarrow>\n  fv\\<^sub>s\\<^sub>s\\<^sub>t T = wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T\n\ngoal (1 subgoal):\n 1. fv\\<^sub>s\\<^sub>s\\<^sub>t (s # T) =\n    wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t (s # T)", "unfolding defs3 wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t_def fv\\<^sub>s\\<^sub>s\\<^sub>t_def"], ["proof (prove)\nusing this:\n  \\<forall>a\\<in>set (s # T). stateful_strand_step.is_Send a\n  \\<forall>a\\<in>set T. stateful_strand_step.is_Send a \\<Longrightarrow>\n  \\<Union>\n   (case_stateful_strand_step (\\<lambda>term. {}) fv\n     (\\<lambda>poscheckvariant x t'.\n         case poscheckvariant of assign \\<Rightarrow> fv t'\n         | check \\<Rightarrow> {})\n     (\\<lambda>t t'. fv t \\<union> fv t') (\\<lambda>term1 term2. {})\n     (\\<lambda>poscheckvariant term1 term2. {})\n     (\\<lambda>list1 list2 list3. {}) `\n    set T) =\n  {}\n  \\<forall>a\\<in>set T. stateful_strand_step.is_Send a \\<Longrightarrow>\n  \\<Union> (set (map fv\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p T)) =\n  \\<Union> (set (map wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p T))\n\ngoal (1 subgoal):\n 1. \\<Union> (set (map fv\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (s # T))) =\n    \\<Union> (set (map wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (s # T)))", "by (cases s) auto"], ["proof (state)\nthis:\n  fv\\<^sub>s\\<^sub>s\\<^sub>t (s # T) =\n  wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t (s # T)\n\ngoal (2 subgoals):\n 1. Ball (set []) stateful_strand_step.is_Send \\<Longrightarrow> f [] = {}\n 2. Ball (set []) stateful_strand_step.is_Send \\<Longrightarrow>\n    fv\\<^sub>s\\<^sub>s\\<^sub>t [] = wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t []", "}"], ["proof (state)\nthis:\n  \\<forall>a\\<in>set (s # T).\n     stateful_strand_step.is_Send a \\<Longrightarrow>\n  fv\\<^sub>s\\<^sub>s\\<^sub>t (s # T) =\n  wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t (s # T)\n\ngoal (2 subgoals):\n 1. Ball (set []) stateful_strand_step.is_Send \\<Longrightarrow> f [] = {}\n 2. Ball (set []) stateful_strand_step.is_Send \\<Longrightarrow>\n    fv\\<^sub>s\\<^sub>s\\<^sub>t [] = wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t []", "qed (simp_all add: defs3 wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t_def fv\\<^sub>s\\<^sub>s\\<^sub>t_def)"], ["proof (state)\nthis:\n  f T1 = {}\n  fv\\<^sub>s\\<^sub>s\\<^sub>t T1 = wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1\n\ngoal (3 subgoals):\n 1. wf'\\<^sub>s\\<^sub>s\\<^sub>t (set (transaction_fresh T))\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_strand T)))\n 2. fv_transaction T \\<inter> bvars_transaction T = {}\n 3. set (transaction_fresh T) \\<inter> bvars_transaction T = {}", "have 5: \"f T2 \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1\" \"fv\\<^sub>s\\<^sub>s\\<^sub>t T2 = f T2 \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f T2 \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1 &&&\n    fv\\<^sub>s\\<^sub>s\\<^sub>t T2 =\n    f T2 \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T2", "using 2(2,10)"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>set T2. is_Assignment x\n  \\<forall>x\\<in>set T2.\n     stateful_strand_step.is_Equality x \\<longrightarrow>\n     fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\n\ngoal (1 subgoal):\n 1. f T2 \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1 &&&\n    fv\\<^sub>s\\<^sub>s\\<^sub>t T2 =\n    f T2 \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T2", "proof (induction T2)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<lbrakk>\\<forall>x\\<in>set []. is_Assignment x;\n     \\<forall>x\\<in>set [].\n        stateful_strand_step.is_Equality x \\<longrightarrow>\n        fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n    \\<Longrightarrow> f [] \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1\n 2. \\<lbrakk>\\<forall>x\\<in>set []. is_Assignment x;\n     \\<forall>x\\<in>set [].\n        stateful_strand_step.is_Equality x \\<longrightarrow>\n        fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n    \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t [] =\n                      f [] \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t []\n 3. \\<And>a T2.\n       \\<lbrakk>\\<lbrakk>\\<forall>x\\<in>set T2. is_Assignment x;\n                 \\<forall>x\\<in>set T2.\n                    stateful_strand_step.is_Equality x \\<longrightarrow>\n                    fv (the_rhs x)\n                    \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n                \\<Longrightarrow> f T2\n                                  \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t\n         T1;\n        \\<lbrakk>\\<forall>x\\<in>set T2. is_Assignment x;\n         \\<forall>x\\<in>set T2.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t T2 =\n                          f T2 \\<union>\n                          wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T2;\n        \\<forall>x\\<in>set (a # T2). is_Assignment x;\n        \\<forall>x\\<in>set (a # T2).\n           stateful_strand_step.is_Equality x \\<longrightarrow>\n           fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n       \\<Longrightarrow> f (a # T2)\n                         \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1\n 4. \\<And>a T2.\n       \\<lbrakk>\\<lbrakk>\\<forall>x\\<in>set T2. is_Assignment x;\n                 \\<forall>x\\<in>set T2.\n                    stateful_strand_step.is_Equality x \\<longrightarrow>\n                    fv (the_rhs x)\n                    \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n                \\<Longrightarrow> f T2\n                                  \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t\n         T1;\n        \\<lbrakk>\\<forall>x\\<in>set T2. is_Assignment x;\n         \\<forall>x\\<in>set T2.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t T2 =\n                          f T2 \\<union>\n                          wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T2;\n        \\<forall>x\\<in>set (a # T2). is_Assignment x;\n        \\<forall>x\\<in>set (a # T2).\n           stateful_strand_step.is_Equality x \\<longrightarrow>\n           fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n       \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t (a # T2) =\n                         f (a # T2) \\<union>\n                         wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t (a # T2)", "case (Cons s T)"], ["proof (state)\nthis:\n  \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n   \\<forall>x\\<in>set T.\n      stateful_strand_step.is_Equality x \\<longrightarrow>\n      fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n  \\<Longrightarrow> f T \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1\n  \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n   \\<forall>x\\<in>set T.\n      stateful_strand_step.is_Equality x \\<longrightarrow>\n      fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n  \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t T =\n                    f T \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T\n\ngoal (4 subgoals):\n 1. \\<lbrakk>\\<forall>x\\<in>set []. is_Assignment x;\n     \\<forall>x\\<in>set [].\n        stateful_strand_step.is_Equality x \\<longrightarrow>\n        fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n    \\<Longrightarrow> f [] \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1\n 2. \\<lbrakk>\\<forall>x\\<in>set []. is_Assignment x;\n     \\<forall>x\\<in>set [].\n        stateful_strand_step.is_Equality x \\<longrightarrow>\n        fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n    \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t [] =\n                      f [] \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t []\n 3. \\<And>a T2.\n       \\<lbrakk>\\<lbrakk>\\<forall>x\\<in>set T2. is_Assignment x;\n                 \\<forall>x\\<in>set T2.\n                    stateful_strand_step.is_Equality x \\<longrightarrow>\n                    fv (the_rhs x)\n                    \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n                \\<Longrightarrow> f T2\n                                  \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t\n         T1;\n        \\<lbrakk>\\<forall>x\\<in>set T2. is_Assignment x;\n         \\<forall>x\\<in>set T2.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t T2 =\n                          f T2 \\<union>\n                          wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T2;\n        \\<forall>x\\<in>set (a # T2). is_Assignment x;\n        \\<forall>x\\<in>set (a # T2).\n           stateful_strand_step.is_Equality x \\<longrightarrow>\n           fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n       \\<Longrightarrow> f (a # T2)\n                         \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1\n 4. \\<And>a T2.\n       \\<lbrakk>\\<lbrakk>\\<forall>x\\<in>set T2. is_Assignment x;\n                 \\<forall>x\\<in>set T2.\n                    stateful_strand_step.is_Equality x \\<longrightarrow>\n                    fv (the_rhs x)\n                    \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n                \\<Longrightarrow> f T2\n                                  \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t\n         T1;\n        \\<lbrakk>\\<forall>x\\<in>set T2. is_Assignment x;\n         \\<forall>x\\<in>set T2.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t T2 =\n                          f T2 \\<union>\n                          wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T2;\n        \\<forall>x\\<in>set (a # T2). is_Assignment x;\n        \\<forall>x\\<in>set (a # T2).\n           stateful_strand_step.is_Equality x \\<longrightarrow>\n           fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n       \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t (a # T2) =\n                         f (a # T2) \\<union>\n                         wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t (a # T2)", "{"], ["proof (state)\nthis:\n  \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n   \\<forall>x\\<in>set T.\n      stateful_strand_step.is_Equality x \\<longrightarrow>\n      fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n  \\<Longrightarrow> f T \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1\n  \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n   \\<forall>x\\<in>set T.\n      stateful_strand_step.is_Equality x \\<longrightarrow>\n      fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n  \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t T =\n                    f T \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T\n\ngoal (4 subgoals):\n 1. \\<lbrakk>\\<forall>x\\<in>set []. is_Assignment x;\n     \\<forall>x\\<in>set [].\n        stateful_strand_step.is_Equality x \\<longrightarrow>\n        fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n    \\<Longrightarrow> f [] \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1\n 2. \\<lbrakk>\\<forall>x\\<in>set []. is_Assignment x;\n     \\<forall>x\\<in>set [].\n        stateful_strand_step.is_Equality x \\<longrightarrow>\n        fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n    \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t [] =\n                      f [] \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t []\n 3. \\<And>a T2.\n       \\<lbrakk>\\<lbrakk>\\<forall>x\\<in>set T2. is_Assignment x;\n                 \\<forall>x\\<in>set T2.\n                    stateful_strand_step.is_Equality x \\<longrightarrow>\n                    fv (the_rhs x)\n                    \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n                \\<Longrightarrow> f T2\n                                  \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t\n         T1;\n        \\<lbrakk>\\<forall>x\\<in>set T2. is_Assignment x;\n         \\<forall>x\\<in>set T2.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t T2 =\n                          f T2 \\<union>\n                          wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T2;\n        \\<forall>x\\<in>set (a # T2). is_Assignment x;\n        \\<forall>x\\<in>set (a # T2).\n           stateful_strand_step.is_Equality x \\<longrightarrow>\n           fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n       \\<Longrightarrow> f (a # T2)\n                         \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1\n 4. \\<And>a T2.\n       \\<lbrakk>\\<lbrakk>\\<forall>x\\<in>set T2. is_Assignment x;\n                 \\<forall>x\\<in>set T2.\n                    stateful_strand_step.is_Equality x \\<longrightarrow>\n                    fv (the_rhs x)\n                    \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n                \\<Longrightarrow> f T2\n                                  \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t\n         T1;\n        \\<lbrakk>\\<forall>x\\<in>set T2. is_Assignment x;\n         \\<forall>x\\<in>set T2.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t T2 =\n                          f T2 \\<union>\n                          wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T2;\n        \\<forall>x\\<in>set (a # T2). is_Assignment x;\n        \\<forall>x\\<in>set (a # T2).\n           stateful_strand_step.is_Equality x \\<longrightarrow>\n           fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n       \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t (a # T2) =\n                         f (a # T2) \\<union>\n                         wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t (a # T2)", "case 1"], ["proof (state)\nthis:\n  \\<forall>x\\<in>set (s # T). is_Assignment x\n  \\<forall>x\\<in>set (s # T).\n     stateful_strand_step.is_Equality x \\<longrightarrow>\n     fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\n\ngoal (4 subgoals):\n 1. \\<lbrakk>\\<forall>x\\<in>set []. is_Assignment x;\n     \\<forall>x\\<in>set [].\n        stateful_strand_step.is_Equality x \\<longrightarrow>\n        fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n    \\<Longrightarrow> f [] \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1\n 2. \\<lbrakk>\\<forall>x\\<in>set []. is_Assignment x;\n     \\<forall>x\\<in>set [].\n        stateful_strand_step.is_Equality x \\<longrightarrow>\n        fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n    \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t [] =\n                      f [] \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t []\n 3. \\<And>a T2.\n       \\<lbrakk>\\<lbrakk>\\<forall>x\\<in>set T2. is_Assignment x;\n                 \\<forall>x\\<in>set T2.\n                    stateful_strand_step.is_Equality x \\<longrightarrow>\n                    fv (the_rhs x)\n                    \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n                \\<Longrightarrow> f T2\n                                  \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t\n         T1;\n        \\<lbrakk>\\<forall>x\\<in>set T2. is_Assignment x;\n         \\<forall>x\\<in>set T2.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t T2 =\n                          f T2 \\<union>\n                          wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T2;\n        \\<forall>x\\<in>set (a # T2). is_Assignment x;\n        \\<forall>x\\<in>set (a # T2).\n           stateful_strand_step.is_Equality x \\<longrightarrow>\n           fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n       \\<Longrightarrow> f (a # T2)\n                         \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1\n 4. \\<And>a T2.\n       \\<lbrakk>\\<lbrakk>\\<forall>x\\<in>set T2. is_Assignment x;\n                 \\<forall>x\\<in>set T2.\n                    stateful_strand_step.is_Equality x \\<longrightarrow>\n                    fv (the_rhs x)\n                    \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n                \\<Longrightarrow> f T2\n                                  \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t\n         T1;\n        \\<lbrakk>\\<forall>x\\<in>set T2. is_Assignment x;\n         \\<forall>x\\<in>set T2.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t T2 =\n                          f T2 \\<union>\n                          wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T2;\n        \\<forall>x\\<in>set (a # T2). is_Assignment x;\n        \\<forall>x\\<in>set (a # T2).\n           stateful_strand_step.is_Equality x \\<longrightarrow>\n           fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n       \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t (a # T2) =\n                         f (a # T2) \\<union>\n                         wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t (a # T2)", "thus ?case"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>set (s # T). is_Assignment x\n  \\<forall>x\\<in>set (s # T).\n     stateful_strand_step.is_Equality x \\<longrightarrow>\n     fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\n\ngoal (1 subgoal):\n 1. f (s # T) \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1", "using Cons"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>set (s # T). is_Assignment x\n  \\<forall>x\\<in>set (s # T).\n     stateful_strand_step.is_Equality x \\<longrightarrow>\n     fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\n  \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n   \\<forall>x\\<in>set T.\n      stateful_strand_step.is_Equality x \\<longrightarrow>\n      fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n  \\<Longrightarrow> f T \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1\n  \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n   \\<forall>x\\<in>set T.\n      stateful_strand_step.is_Equality x \\<longrightarrow>\n      fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n  \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t T =\n                    f T \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T\n\ngoal (1 subgoal):\n 1. f (s # T) \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1", "proof (cases s)"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<forall>x\\<in>set (s # T). is_Assignment x;\n        \\<forall>x\\<in>set (s # T).\n           stateful_strand_step.is_Equality x \\<longrightarrow>\n           fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> f T\n                          \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t T =\n                          f T \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T;\n        s = send\\<langle>x1\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> f (s # T)\n                         \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1\n 2. \\<And>x2.\n       \\<lbrakk>\\<forall>x\\<in>set (s # T). is_Assignment x;\n        \\<forall>x\\<in>set (s # T).\n           stateful_strand_step.is_Equality x \\<longrightarrow>\n           fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> f T\n                          \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t T =\n                          f T \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T;\n        s = receive\\<langle>x2\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> f (s # T)\n                         \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1\n 3. \\<And>x31 x32 x33.\n       \\<lbrakk>\\<forall>x\\<in>set (s # T). is_Assignment x;\n        \\<forall>x\\<in>set (s # T).\n           stateful_strand_step.is_Equality x \\<longrightarrow>\n           fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> f T\n                          \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t T =\n                          f T \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T;\n        s = \\<langle>x31: x32 \\<doteq> x33\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> f (s # T)\n                         \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1\n 4. \\<And>x41 x42.\n       \\<lbrakk>\\<forall>x\\<in>set (s # T). is_Assignment x;\n        \\<forall>x\\<in>set (s # T).\n           stateful_strand_step.is_Equality x \\<longrightarrow>\n           fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> f T\n                          \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t T =\n                          f T \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T;\n        s = insert\\<langle>x41,x42\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> f (s # T)\n                         \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1\n 5. \\<And>x51 x52.\n       \\<lbrakk>\\<forall>x\\<in>set (s # T). is_Assignment x;\n        \\<forall>x\\<in>set (s # T).\n           stateful_strand_step.is_Equality x \\<longrightarrow>\n           fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> f T\n                          \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t T =\n                          f T \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T;\n        s = delete\\<langle>x51,x52\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> f (s # T)\n                         \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1\n 6. \\<And>x61 x62 x63.\n       \\<lbrakk>\\<forall>x\\<in>set (s # T). is_Assignment x;\n        \\<forall>x\\<in>set (s # T).\n           stateful_strand_step.is_Equality x \\<longrightarrow>\n           fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> f T\n                          \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t T =\n                          f T \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T;\n        s = \\<langle>x61: x62 \\<in> x63\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> f (s # T)\n                         \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1\n 7. \\<And>x71 x72 x73.\n       \\<lbrakk>\\<forall>x\\<in>set (s # T). is_Assignment x;\n        \\<forall>x\\<in>set (s # T).\n           stateful_strand_step.is_Equality x \\<longrightarrow>\n           fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> f T\n                          \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t T =\n                          f T \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T;\n        s =\n        \\<forall>x71\\<langle>\\<or>\\<noteq>: x72 \\<or>\\<notin>: x73\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> f (s # T)\n                         \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1", "case (Equality ac t t')"], ["proof (state)\nthis:\n  s = \\<langle>ac: t \\<doteq> t'\\<rangle>\n\ngoal (7 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<forall>x\\<in>set (s # T). is_Assignment x;\n        \\<forall>x\\<in>set (s # T).\n           stateful_strand_step.is_Equality x \\<longrightarrow>\n           fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> f T\n                          \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t T =\n                          f T \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T;\n        s = send\\<langle>x1\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> f (s # T)\n                         \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1\n 2. \\<And>x2.\n       \\<lbrakk>\\<forall>x\\<in>set (s # T). is_Assignment x;\n        \\<forall>x\\<in>set (s # T).\n           stateful_strand_step.is_Equality x \\<longrightarrow>\n           fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> f T\n                          \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t T =\n                          f T \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T;\n        s = receive\\<langle>x2\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> f (s # T)\n                         \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1\n 3. \\<And>x31 x32 x33.\n       \\<lbrakk>\\<forall>x\\<in>set (s # T). is_Assignment x;\n        \\<forall>x\\<in>set (s # T).\n           stateful_strand_step.is_Equality x \\<longrightarrow>\n           fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> f T\n                          \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t T =\n                          f T \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T;\n        s = \\<langle>x31: x32 \\<doteq> x33\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> f (s # T)\n                         \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1\n 4. \\<And>x41 x42.\n       \\<lbrakk>\\<forall>x\\<in>set (s # T). is_Assignment x;\n        \\<forall>x\\<in>set (s # T).\n           stateful_strand_step.is_Equality x \\<longrightarrow>\n           fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> f T\n                          \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t T =\n                          f T \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T;\n        s = insert\\<langle>x41,x42\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> f (s # T)\n                         \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1\n 5. \\<And>x51 x52.\n       \\<lbrakk>\\<forall>x\\<in>set (s # T). is_Assignment x;\n        \\<forall>x\\<in>set (s # T).\n           stateful_strand_step.is_Equality x \\<longrightarrow>\n           fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> f T\n                          \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t T =\n                          f T \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T;\n        s = delete\\<langle>x51,x52\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> f (s # T)\n                         \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1\n 6. \\<And>x61 x62 x63.\n       \\<lbrakk>\\<forall>x\\<in>set (s # T). is_Assignment x;\n        \\<forall>x\\<in>set (s # T).\n           stateful_strand_step.is_Equality x \\<longrightarrow>\n           fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> f T\n                          \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t T =\n                          f T \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T;\n        s = \\<langle>x61: x62 \\<in> x63\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> f (s # T)\n                         \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1\n 7. \\<And>x71 x72 x73.\n       \\<lbrakk>\\<forall>x\\<in>set (s # T). is_Assignment x;\n        \\<forall>x\\<in>set (s # T).\n           stateful_strand_step.is_Equality x \\<longrightarrow>\n           fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> f T\n                          \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t T =\n                          f T \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T;\n        s =\n        \\<forall>x71\\<langle>\\<or>\\<noteq>: x72 \\<or>\\<notin>: x73\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> f (s # T)\n                         \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1", "thus ?thesis"], ["proof (prove)\nusing this:\n  s = \\<langle>ac: t \\<doteq> t'\\<rangle>\n\ngoal (1 subgoal):\n 1. f (s # T) \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1", "using 1 Cons 4(2)"], ["proof (prove)\nusing this:\n  s = \\<langle>ac: t \\<doteq> t'\\<rangle>\n  \\<forall>x\\<in>set (s # T). is_Assignment x\n  \\<forall>x\\<in>set (s # T).\n     stateful_strand_step.is_Equality x \\<longrightarrow>\n     fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\n  \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n   \\<forall>x\\<in>set T.\n      stateful_strand_step.is_Equality x \\<longrightarrow>\n      fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n  \\<Longrightarrow> f T \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1\n  \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n   \\<forall>x\\<in>set T.\n      stateful_strand_step.is_Equality x \\<longrightarrow>\n      fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n  \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t T =\n                    f T \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T\n  fv\\<^sub>s\\<^sub>s\\<^sub>t T1 = wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1\n\ngoal (1 subgoal):\n 1. f (s # T) \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1", "unfolding defs3"], ["proof (prove)\nusing this:\n  s = \\<langle>ac: t \\<doteq> t'\\<rangle>\n  \\<forall>x\\<in>set (s # T). is_Assignment x\n  \\<forall>x\\<in>set (s # T).\n     stateful_strand_step.is_Equality x \\<longrightarrow>\n     fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\n  \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n   \\<forall>x\\<in>set T.\n      stateful_strand_step.is_Equality x \\<longrightarrow>\n      fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n  \\<Longrightarrow> \\<Union>\n                     (case_stateful_strand_step (\\<lambda>term. {}) fv\n                       (\\<lambda>poscheckvariant x t'.\n                           case poscheckvariant of\n                           assign \\<Rightarrow> fv t'\n                           | check \\<Rightarrow> {})\n                       (\\<lambda>t t'. fv t \\<union> fv t')\n                       (\\<lambda>term1 term2. {})\n                       (\\<lambda>poscheckvariant term1 term2. {})\n                       (\\<lambda>list1 list2 list3. {}) `\n                      set T)\n                    \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1\n  \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n   \\<forall>x\\<in>set T.\n      stateful_strand_step.is_Equality x \\<longrightarrow>\n      fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n  \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t T =\n                    \\<Union>\n                     (case_stateful_strand_step (\\<lambda>term. {}) fv\n                       (\\<lambda>poscheckvariant x t'.\n                           case poscheckvariant of\n                           assign \\<Rightarrow> fv t'\n                           | check \\<Rightarrow> {})\n                       (\\<lambda>t t'. fv t \\<union> fv t')\n                       (\\<lambda>term1 term2. {})\n                       (\\<lambda>poscheckvariant term1 term2. {})\n                       (\\<lambda>list1 list2 list3. {}) `\n                      set T) \\<union>\n                    wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T\n  fv\\<^sub>s\\<^sub>s\\<^sub>t T1 = wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1\n\ngoal (1 subgoal):\n 1. \\<Union>\n     (case_stateful_strand_step (\\<lambda>term. {}) fv\n       (\\<lambda>poscheckvariant x t'.\n           case poscheckvariant of assign \\<Rightarrow> fv t'\n           | check \\<Rightarrow> {})\n       (\\<lambda>t t'. fv t \\<union> fv t') (\\<lambda>term1 term2. {})\n       (\\<lambda>poscheckvariant term1 term2. {})\n       (\\<lambda>list1 list2 list3. {}) `\n      set (s # T))\n    \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1", "by (cases ac) auto"], ["proof (state)\nthis:\n  f (s # T) \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1\n\ngoal (6 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<forall>x\\<in>set (s # T). is_Assignment x;\n        \\<forall>x\\<in>set (s # T).\n           stateful_strand_step.is_Equality x \\<longrightarrow>\n           fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> f T\n                          \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t T =\n                          f T \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T;\n        s = send\\<langle>x1\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> f (s # T)\n                         \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1\n 2. \\<And>x2.\n       \\<lbrakk>\\<forall>x\\<in>set (s # T). is_Assignment x;\n        \\<forall>x\\<in>set (s # T).\n           stateful_strand_step.is_Equality x \\<longrightarrow>\n           fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> f T\n                          \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t T =\n                          f T \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T;\n        s = receive\\<langle>x2\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> f (s # T)\n                         \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1\n 3. \\<And>x41 x42.\n       \\<lbrakk>\\<forall>x\\<in>set (s # T). is_Assignment x;\n        \\<forall>x\\<in>set (s # T).\n           stateful_strand_step.is_Equality x \\<longrightarrow>\n           fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> f T\n                          \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t T =\n                          f T \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T;\n        s = insert\\<langle>x41,x42\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> f (s # T)\n                         \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1\n 4. \\<And>x51 x52.\n       \\<lbrakk>\\<forall>x\\<in>set (s # T). is_Assignment x;\n        \\<forall>x\\<in>set (s # T).\n           stateful_strand_step.is_Equality x \\<longrightarrow>\n           fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> f T\n                          \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t T =\n                          f T \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T;\n        s = delete\\<langle>x51,x52\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> f (s # T)\n                         \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1\n 5. \\<And>x61 x62 x63.\n       \\<lbrakk>\\<forall>x\\<in>set (s # T). is_Assignment x;\n        \\<forall>x\\<in>set (s # T).\n           stateful_strand_step.is_Equality x \\<longrightarrow>\n           fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> f T\n                          \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t T =\n                          f T \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T;\n        s = \\<langle>x61: x62 \\<in> x63\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> f (s # T)\n                         \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1\n 6. \\<And>x71 x72 x73.\n       \\<lbrakk>\\<forall>x\\<in>set (s # T). is_Assignment x;\n        \\<forall>x\\<in>set (s # T).\n           stateful_strand_step.is_Equality x \\<longrightarrow>\n           fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> f T\n                          \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t T =\n                          f T \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T;\n        s =\n        \\<forall>x71\\<langle>\\<or>\\<noteq>: x72 \\<or>\\<notin>: x73\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> f (s # T)\n                         \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1", "qed (simp_all add: defs3)"], ["proof (state)\nthis:\n  f (s # T) \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1\n\ngoal (3 subgoals):\n 1. \\<lbrakk>\\<forall>x\\<in>set []. is_Assignment x;\n     \\<forall>x\\<in>set [].\n        stateful_strand_step.is_Equality x \\<longrightarrow>\n        fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n    \\<Longrightarrow> f [] \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1\n 2. \\<lbrakk>\\<forall>x\\<in>set []. is_Assignment x;\n     \\<forall>x\\<in>set [].\n        stateful_strand_step.is_Equality x \\<longrightarrow>\n        fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n    \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t [] =\n                      f [] \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t []\n 3. \\<And>a T2.\n       \\<lbrakk>\\<lbrakk>\\<forall>x\\<in>set T2. is_Assignment x;\n                 \\<forall>x\\<in>set T2.\n                    stateful_strand_step.is_Equality x \\<longrightarrow>\n                    fv (the_rhs x)\n                    \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n                \\<Longrightarrow> f T2\n                                  \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t\n         T1;\n        \\<lbrakk>\\<forall>x\\<in>set T2. is_Assignment x;\n         \\<forall>x\\<in>set T2.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t T2 =\n                          f T2 \\<union>\n                          wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T2;\n        \\<forall>x\\<in>set (a # T2). is_Assignment x;\n        \\<forall>x\\<in>set (a # T2).\n           stateful_strand_step.is_Equality x \\<longrightarrow>\n           fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n       \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t (a # T2) =\n                         f (a # T2) \\<union>\n                         wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t (a # T2)", "}"], ["proof (state)\nthis:\n  \\<lbrakk>\\<forall>x\\<in>set (s # T). is_Assignment x;\n   \\<forall>x\\<in>set (s # T).\n      stateful_strand_step.is_Equality x \\<longrightarrow>\n      fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n  \\<Longrightarrow> f (s # T)\n                    \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1\n\ngoal (3 subgoals):\n 1. \\<lbrakk>\\<forall>x\\<in>set []. is_Assignment x;\n     \\<forall>x\\<in>set [].\n        stateful_strand_step.is_Equality x \\<longrightarrow>\n        fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n    \\<Longrightarrow> f [] \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1\n 2. \\<lbrakk>\\<forall>x\\<in>set []. is_Assignment x;\n     \\<forall>x\\<in>set [].\n        stateful_strand_step.is_Equality x \\<longrightarrow>\n        fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n    \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t [] =\n                      f [] \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t []\n 3. \\<And>a T2.\n       \\<lbrakk>\\<lbrakk>\\<forall>x\\<in>set T2. is_Assignment x;\n                 \\<forall>x\\<in>set T2.\n                    stateful_strand_step.is_Equality x \\<longrightarrow>\n                    fv (the_rhs x)\n                    \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n                \\<Longrightarrow> f T2\n                                  \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t\n         T1;\n        \\<lbrakk>\\<forall>x\\<in>set T2. is_Assignment x;\n         \\<forall>x\\<in>set T2.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t T2 =\n                          f T2 \\<union>\n                          wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T2;\n        \\<forall>x\\<in>set (a # T2). is_Assignment x;\n        \\<forall>x\\<in>set (a # T2).\n           stateful_strand_step.is_Equality x \\<longrightarrow>\n           fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n       \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t (a # T2) =\n                         f (a # T2) \\<union>\n                         wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t (a # T2)", "{"], ["proof (state)\nthis:\n  \\<lbrakk>\\<forall>x\\<in>set (s # T). is_Assignment x;\n   \\<forall>x\\<in>set (s # T).\n      stateful_strand_step.is_Equality x \\<longrightarrow>\n      fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n  \\<Longrightarrow> f (s # T)\n                    \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1\n\ngoal (3 subgoals):\n 1. \\<lbrakk>\\<forall>x\\<in>set []. is_Assignment x;\n     \\<forall>x\\<in>set [].\n        stateful_strand_step.is_Equality x \\<longrightarrow>\n        fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n    \\<Longrightarrow> f [] \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1\n 2. \\<lbrakk>\\<forall>x\\<in>set []. is_Assignment x;\n     \\<forall>x\\<in>set [].\n        stateful_strand_step.is_Equality x \\<longrightarrow>\n        fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n    \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t [] =\n                      f [] \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t []\n 3. \\<And>a T2.\n       \\<lbrakk>\\<lbrakk>\\<forall>x\\<in>set T2. is_Assignment x;\n                 \\<forall>x\\<in>set T2.\n                    stateful_strand_step.is_Equality x \\<longrightarrow>\n                    fv (the_rhs x)\n                    \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n                \\<Longrightarrow> f T2\n                                  \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t\n         T1;\n        \\<lbrakk>\\<forall>x\\<in>set T2. is_Assignment x;\n         \\<forall>x\\<in>set T2.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t T2 =\n                          f T2 \\<union>\n                          wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T2;\n        \\<forall>x\\<in>set (a # T2). is_Assignment x;\n        \\<forall>x\\<in>set (a # T2).\n           stateful_strand_step.is_Equality x \\<longrightarrow>\n           fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n       \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t (a # T2) =\n                         f (a # T2) \\<union>\n                         wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t (a # T2)", "case 2"], ["proof (state)\nthis:\n  \\<forall>x\\<in>set (s # T). is_Assignment x\n  \\<forall>x\\<in>set (s # T).\n     stateful_strand_step.is_Equality x \\<longrightarrow>\n     fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\n\ngoal (3 subgoals):\n 1. \\<lbrakk>\\<forall>x\\<in>set []. is_Assignment x;\n     \\<forall>x\\<in>set [].\n        stateful_strand_step.is_Equality x \\<longrightarrow>\n        fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n    \\<Longrightarrow> f [] \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1\n 2. \\<lbrakk>\\<forall>x\\<in>set []. is_Assignment x;\n     \\<forall>x\\<in>set [].\n        stateful_strand_step.is_Equality x \\<longrightarrow>\n        fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n    \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t [] =\n                      f [] \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t []\n 3. \\<And>a T2.\n       \\<lbrakk>\\<lbrakk>\\<forall>x\\<in>set T2. is_Assignment x;\n                 \\<forall>x\\<in>set T2.\n                    stateful_strand_step.is_Equality x \\<longrightarrow>\n                    fv (the_rhs x)\n                    \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n                \\<Longrightarrow> f T2\n                                  \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t\n         T1;\n        \\<lbrakk>\\<forall>x\\<in>set T2. is_Assignment x;\n         \\<forall>x\\<in>set T2.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t T2 =\n                          f T2 \\<union>\n                          wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T2;\n        \\<forall>x\\<in>set (a # T2). is_Assignment x;\n        \\<forall>x\\<in>set (a # T2).\n           stateful_strand_step.is_Equality x \\<longrightarrow>\n           fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n       \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t (a # T2) =\n                         f (a # T2) \\<union>\n                         wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t (a # T2)", "thus ?case"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>set (s # T). is_Assignment x\n  \\<forall>x\\<in>set (s # T).\n     stateful_strand_step.is_Equality x \\<longrightarrow>\n     fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\n\ngoal (1 subgoal):\n 1. fv\\<^sub>s\\<^sub>s\\<^sub>t (s # T) =\n    f (s # T) \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t (s # T)", "using Cons"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>set (s # T). is_Assignment x\n  \\<forall>x\\<in>set (s # T).\n     stateful_strand_step.is_Equality x \\<longrightarrow>\n     fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\n  \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n   \\<forall>x\\<in>set T.\n      stateful_strand_step.is_Equality x \\<longrightarrow>\n      fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n  \\<Longrightarrow> f T \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1\n  \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n   \\<forall>x\\<in>set T.\n      stateful_strand_step.is_Equality x \\<longrightarrow>\n      fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n  \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t T =\n                    f T \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T\n\ngoal (1 subgoal):\n 1. fv\\<^sub>s\\<^sub>s\\<^sub>t (s # T) =\n    f (s # T) \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t (s # T)", "proof (cases s)"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<forall>x\\<in>set (s # T). is_Assignment x;\n        \\<forall>x\\<in>set (s # T).\n           stateful_strand_step.is_Equality x \\<longrightarrow>\n           fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> f T\n                          \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t T =\n                          f T \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T;\n        s = send\\<langle>x1\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t (s # T) =\n                         f (s # T) \\<union>\n                         wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t (s # T)\n 2. \\<And>x2.\n       \\<lbrakk>\\<forall>x\\<in>set (s # T). is_Assignment x;\n        \\<forall>x\\<in>set (s # T).\n           stateful_strand_step.is_Equality x \\<longrightarrow>\n           fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> f T\n                          \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t T =\n                          f T \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T;\n        s = receive\\<langle>x2\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t (s # T) =\n                         f (s # T) \\<union>\n                         wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t (s # T)\n 3. \\<And>x31 x32 x33.\n       \\<lbrakk>\\<forall>x\\<in>set (s # T). is_Assignment x;\n        \\<forall>x\\<in>set (s # T).\n           stateful_strand_step.is_Equality x \\<longrightarrow>\n           fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> f T\n                          \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t T =\n                          f T \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T;\n        s = \\<langle>x31: x32 \\<doteq> x33\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t (s # T) =\n                         f (s # T) \\<union>\n                         wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t (s # T)\n 4. \\<And>x41 x42.\n       \\<lbrakk>\\<forall>x\\<in>set (s # T). is_Assignment x;\n        \\<forall>x\\<in>set (s # T).\n           stateful_strand_step.is_Equality x \\<longrightarrow>\n           fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> f T\n                          \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t T =\n                          f T \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T;\n        s = insert\\<langle>x41,x42\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t (s # T) =\n                         f (s # T) \\<union>\n                         wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t (s # T)\n 5. \\<And>x51 x52.\n       \\<lbrakk>\\<forall>x\\<in>set (s # T). is_Assignment x;\n        \\<forall>x\\<in>set (s # T).\n           stateful_strand_step.is_Equality x \\<longrightarrow>\n           fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> f T\n                          \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t T =\n                          f T \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T;\n        s = delete\\<langle>x51,x52\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t (s # T) =\n                         f (s # T) \\<union>\n                         wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t (s # T)\n 6. \\<And>x61 x62 x63.\n       \\<lbrakk>\\<forall>x\\<in>set (s # T). is_Assignment x;\n        \\<forall>x\\<in>set (s # T).\n           stateful_strand_step.is_Equality x \\<longrightarrow>\n           fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> f T\n                          \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t T =\n                          f T \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T;\n        s = \\<langle>x61: x62 \\<in> x63\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t (s # T) =\n                         f (s # T) \\<union>\n                         wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t (s # T)\n 7. \\<And>x71 x72 x73.\n       \\<lbrakk>\\<forall>x\\<in>set (s # T). is_Assignment x;\n        \\<forall>x\\<in>set (s # T).\n           stateful_strand_step.is_Equality x \\<longrightarrow>\n           fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> f T\n                          \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t T =\n                          f T \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T;\n        s =\n        \\<forall>x71\\<langle>\\<or>\\<noteq>: x72 \\<or>\\<notin>: x73\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t (s # T) =\n                         f (s # T) \\<union>\n                         wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t (s # T)", "case (Equality ac t t')"], ["proof (state)\nthis:\n  s = \\<langle>ac: t \\<doteq> t'\\<rangle>\n\ngoal (7 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<forall>x\\<in>set (s # T). is_Assignment x;\n        \\<forall>x\\<in>set (s # T).\n           stateful_strand_step.is_Equality x \\<longrightarrow>\n           fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> f T\n                          \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t T =\n                          f T \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T;\n        s = send\\<langle>x1\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t (s # T) =\n                         f (s # T) \\<union>\n                         wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t (s # T)\n 2. \\<And>x2.\n       \\<lbrakk>\\<forall>x\\<in>set (s # T). is_Assignment x;\n        \\<forall>x\\<in>set (s # T).\n           stateful_strand_step.is_Equality x \\<longrightarrow>\n           fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> f T\n                          \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t T =\n                          f T \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T;\n        s = receive\\<langle>x2\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t (s # T) =\n                         f (s # T) \\<union>\n                         wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t (s # T)\n 3. \\<And>x31 x32 x33.\n       \\<lbrakk>\\<forall>x\\<in>set (s # T). is_Assignment x;\n        \\<forall>x\\<in>set (s # T).\n           stateful_strand_step.is_Equality x \\<longrightarrow>\n           fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> f T\n                          \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t T =\n                          f T \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T;\n        s = \\<langle>x31: x32 \\<doteq> x33\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t (s # T) =\n                         f (s # T) \\<union>\n                         wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t (s # T)\n 4. \\<And>x41 x42.\n       \\<lbrakk>\\<forall>x\\<in>set (s # T). is_Assignment x;\n        \\<forall>x\\<in>set (s # T).\n           stateful_strand_step.is_Equality x \\<longrightarrow>\n           fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> f T\n                          \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t T =\n                          f T \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T;\n        s = insert\\<langle>x41,x42\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t (s # T) =\n                         f (s # T) \\<union>\n                         wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t (s # T)\n 5. \\<And>x51 x52.\n       \\<lbrakk>\\<forall>x\\<in>set (s # T). is_Assignment x;\n        \\<forall>x\\<in>set (s # T).\n           stateful_strand_step.is_Equality x \\<longrightarrow>\n           fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> f T\n                          \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t T =\n                          f T \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T;\n        s = delete\\<langle>x51,x52\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t (s # T) =\n                         f (s # T) \\<union>\n                         wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t (s # T)\n 6. \\<And>x61 x62 x63.\n       \\<lbrakk>\\<forall>x\\<in>set (s # T). is_Assignment x;\n        \\<forall>x\\<in>set (s # T).\n           stateful_strand_step.is_Equality x \\<longrightarrow>\n           fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> f T\n                          \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t T =\n                          f T \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T;\n        s = \\<langle>x61: x62 \\<in> x63\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t (s # T) =\n                         f (s # T) \\<union>\n                         wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t (s # T)\n 7. \\<And>x71 x72 x73.\n       \\<lbrakk>\\<forall>x\\<in>set (s # T). is_Assignment x;\n        \\<forall>x\\<in>set (s # T).\n           stateful_strand_step.is_Equality x \\<longrightarrow>\n           fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> f T\n                          \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t T =\n                          f T \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T;\n        s =\n        \\<forall>x71\\<langle>\\<or>\\<noteq>: x72 \\<or>\\<notin>: x73\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t (s # T) =\n                         f (s # T) \\<union>\n                         wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t (s # T)", "hence \"ac = Assign\" \"fv\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p s = fv t' \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p s\" \"f (s#T) = fv t' \\<union> f T\""], ["proof (prove)\nusing this:\n  s = \\<langle>ac: t \\<doteq> t'\\<rangle>\n\ngoal (1 subgoal):\n 1. ac = assign &&&\n    fv\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p s =\n    fv t' \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p s &&&\n    f (s # T) = fv t' \\<union> f T", "using 2"], ["proof (prove)\nusing this:\n  s = \\<langle>ac: t \\<doteq> t'\\<rangle>\n  \\<forall>x\\<in>set (s # T). is_Assignment x\n  \\<forall>x\\<in>set (s # T).\n     stateful_strand_step.is_Equality x \\<longrightarrow>\n     fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\n\ngoal (1 subgoal):\n 1. ac = assign &&&\n    fv\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p s =\n    fv t' \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p s &&&\n    f (s # T) = fv t' \\<union> f T", "unfolding defs3"], ["proof (prove)\nusing this:\n  s = \\<langle>ac: t \\<doteq> t'\\<rangle>\n  \\<forall>x\\<in>set (s # T). is_Assignment x\n  \\<forall>x\\<in>set (s # T).\n     stateful_strand_step.is_Equality x \\<longrightarrow>\n     fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\n\ngoal (1 subgoal):\n 1. ac = assign &&&\n    fv\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p s =\n    fv t' \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p s &&&\n    \\<Union>\n     (case_stateful_strand_step (\\<lambda>term. {}) fv\n       (\\<lambda>poscheckvariant x t'.\n           case poscheckvariant of assign \\<Rightarrow> fv t'\n           | check \\<Rightarrow> {})\n       (\\<lambda>t t'. fv t \\<union> fv t') (\\<lambda>term1 term2. {})\n       (\\<lambda>poscheckvariant term1 term2. {})\n       (\\<lambda>list1 list2 list3. {}) `\n      set (s # T)) =\n    fv t' \\<union>\n    \\<Union>\n     (case_stateful_strand_step (\\<lambda>term. {}) fv\n       (\\<lambda>poscheckvariant x t'.\n           case poscheckvariant of assign \\<Rightarrow> fv t'\n           | check \\<Rightarrow> {})\n       (\\<lambda>t t'. fv t \\<union> fv t') (\\<lambda>term1 term2. {})\n       (\\<lambda>poscheckvariant term1 term2. {})\n       (\\<lambda>list1 list2 list3. {}) `\n      set T)", "by auto"], ["proof (state)\nthis:\n  ac = assign\n  fv\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p s =\n  fv t' \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p s\n  f (s # T) = fv t' \\<union> f T\n\ngoal (7 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<forall>x\\<in>set (s # T). is_Assignment x;\n        \\<forall>x\\<in>set (s # T).\n           stateful_strand_step.is_Equality x \\<longrightarrow>\n           fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> f T\n                          \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t T =\n                          f T \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T;\n        s = send\\<langle>x1\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t (s # T) =\n                         f (s # T) \\<union>\n                         wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t (s # T)\n 2. \\<And>x2.\n       \\<lbrakk>\\<forall>x\\<in>set (s # T). is_Assignment x;\n        \\<forall>x\\<in>set (s # T).\n           stateful_strand_step.is_Equality x \\<longrightarrow>\n           fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> f T\n                          \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t T =\n                          f T \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T;\n        s = receive\\<langle>x2\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t (s # T) =\n                         f (s # T) \\<union>\n                         wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t (s # T)\n 3. \\<And>x31 x32 x33.\n       \\<lbrakk>\\<forall>x\\<in>set (s # T). is_Assignment x;\n        \\<forall>x\\<in>set (s # T).\n           stateful_strand_step.is_Equality x \\<longrightarrow>\n           fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> f T\n                          \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t T =\n                          f T \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T;\n        s = \\<langle>x31: x32 \\<doteq> x33\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t (s # T) =\n                         f (s # T) \\<union>\n                         wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t (s # T)\n 4. \\<And>x41 x42.\n       \\<lbrakk>\\<forall>x\\<in>set (s # T). is_Assignment x;\n        \\<forall>x\\<in>set (s # T).\n           stateful_strand_step.is_Equality x \\<longrightarrow>\n           fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> f T\n                          \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t T =\n                          f T \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T;\n        s = insert\\<langle>x41,x42\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t (s # T) =\n                         f (s # T) \\<union>\n                         wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t (s # T)\n 5. \\<And>x51 x52.\n       \\<lbrakk>\\<forall>x\\<in>set (s # T). is_Assignment x;\n        \\<forall>x\\<in>set (s # T).\n           stateful_strand_step.is_Equality x \\<longrightarrow>\n           fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> f T\n                          \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t T =\n                          f T \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T;\n        s = delete\\<langle>x51,x52\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t (s # T) =\n                         f (s # T) \\<union>\n                         wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t (s # T)\n 6. \\<And>x61 x62 x63.\n       \\<lbrakk>\\<forall>x\\<in>set (s # T). is_Assignment x;\n        \\<forall>x\\<in>set (s # T).\n           stateful_strand_step.is_Equality x \\<longrightarrow>\n           fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> f T\n                          \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t T =\n                          f T \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T;\n        s = \\<langle>x61: x62 \\<in> x63\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t (s # T) =\n                         f (s # T) \\<union>\n                         wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t (s # T)\n 7. \\<And>x71 x72 x73.\n       \\<lbrakk>\\<forall>x\\<in>set (s # T). is_Assignment x;\n        \\<forall>x\\<in>set (s # T).\n           stateful_strand_step.is_Equality x \\<longrightarrow>\n           fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> f T\n                          \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t T =\n                          f T \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T;\n        s =\n        \\<forall>x71\\<langle>\\<or>\\<noteq>: x72 \\<or>\\<notin>: x73\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t (s # T) =\n                         f (s # T) \\<union>\n                         wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t (s # T)", "moreover"], ["proof (state)\nthis:\n  ac = assign\n  fv\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p s =\n  fv t' \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p s\n  f (s # T) = fv t' \\<union> f T\n\ngoal (7 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<forall>x\\<in>set (s # T). is_Assignment x;\n        \\<forall>x\\<in>set (s # T).\n           stateful_strand_step.is_Equality x \\<longrightarrow>\n           fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> f T\n                          \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t T =\n                          f T \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T;\n        s = send\\<langle>x1\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t (s # T) =\n                         f (s # T) \\<union>\n                         wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t (s # T)\n 2. \\<And>x2.\n       \\<lbrakk>\\<forall>x\\<in>set (s # T). is_Assignment x;\n        \\<forall>x\\<in>set (s # T).\n           stateful_strand_step.is_Equality x \\<longrightarrow>\n           fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> f T\n                          \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t T =\n                          f T \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T;\n        s = receive\\<langle>x2\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t (s # T) =\n                         f (s # T) \\<union>\n                         wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t (s # T)\n 3. \\<And>x31 x32 x33.\n       \\<lbrakk>\\<forall>x\\<in>set (s # T). is_Assignment x;\n        \\<forall>x\\<in>set (s # T).\n           stateful_strand_step.is_Equality x \\<longrightarrow>\n           fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> f T\n                          \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t T =\n                          f T \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T;\n        s = \\<langle>x31: x32 \\<doteq> x33\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t (s # T) =\n                         f (s # T) \\<union>\n                         wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t (s # T)\n 4. \\<And>x41 x42.\n       \\<lbrakk>\\<forall>x\\<in>set (s # T). is_Assignment x;\n        \\<forall>x\\<in>set (s # T).\n           stateful_strand_step.is_Equality x \\<longrightarrow>\n           fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> f T\n                          \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t T =\n                          f T \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T;\n        s = insert\\<langle>x41,x42\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t (s # T) =\n                         f (s # T) \\<union>\n                         wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t (s # T)\n 5. \\<And>x51 x52.\n       \\<lbrakk>\\<forall>x\\<in>set (s # T). is_Assignment x;\n        \\<forall>x\\<in>set (s # T).\n           stateful_strand_step.is_Equality x \\<longrightarrow>\n           fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> f T\n                          \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t T =\n                          f T \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T;\n        s = delete\\<langle>x51,x52\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t (s # T) =\n                         f (s # T) \\<union>\n                         wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t (s # T)\n 6. \\<And>x61 x62 x63.\n       \\<lbrakk>\\<forall>x\\<in>set (s # T). is_Assignment x;\n        \\<forall>x\\<in>set (s # T).\n           stateful_strand_step.is_Equality x \\<longrightarrow>\n           fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> f T\n                          \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t T =\n                          f T \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T;\n        s = \\<langle>x61: x62 \\<in> x63\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t (s # T) =\n                         f (s # T) \\<union>\n                         wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t (s # T)\n 7. \\<And>x71 x72 x73.\n       \\<lbrakk>\\<forall>x\\<in>set (s # T). is_Assignment x;\n        \\<forall>x\\<in>set (s # T).\n           stateful_strand_step.is_Equality x \\<longrightarrow>\n           fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> f T\n                          \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t T =\n                          f T \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T;\n        s =\n        \\<forall>x71\\<langle>\\<or>\\<noteq>: x72 \\<or>\\<notin>: x73\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t (s # T) =\n                         f (s # T) \\<union>\n                         wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t (s # T)", "have \"fv\\<^sub>s\\<^sub>s\\<^sub>t T = f T \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fv\\<^sub>s\\<^sub>s\\<^sub>t T =\n    f T \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T", "using Cons.IH(2) 2"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n   \\<forall>x\\<in>set T.\n      stateful_strand_step.is_Equality x \\<longrightarrow>\n      fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n  \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t T =\n                    f T \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T\n  \\<forall>x\\<in>set (s # T). is_Assignment x\n  \\<forall>x\\<in>set (s # T).\n     stateful_strand_step.is_Equality x \\<longrightarrow>\n     fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\n\ngoal (1 subgoal):\n 1. fv\\<^sub>s\\<^sub>s\\<^sub>t T =\n    f T \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T", "by auto"], ["proof (state)\nthis:\n  fv\\<^sub>s\\<^sub>s\\<^sub>t T =\n  f T \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T\n\ngoal (7 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<forall>x\\<in>set (s # T). is_Assignment x;\n        \\<forall>x\\<in>set (s # T).\n           stateful_strand_step.is_Equality x \\<longrightarrow>\n           fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> f T\n                          \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t T =\n                          f T \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T;\n        s = send\\<langle>x1\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t (s # T) =\n                         f (s # T) \\<union>\n                         wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t (s # T)\n 2. \\<And>x2.\n       \\<lbrakk>\\<forall>x\\<in>set (s # T). is_Assignment x;\n        \\<forall>x\\<in>set (s # T).\n           stateful_strand_step.is_Equality x \\<longrightarrow>\n           fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> f T\n                          \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t T =\n                          f T \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T;\n        s = receive\\<langle>x2\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t (s # T) =\n                         f (s # T) \\<union>\n                         wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t (s # T)\n 3. \\<And>x31 x32 x33.\n       \\<lbrakk>\\<forall>x\\<in>set (s # T). is_Assignment x;\n        \\<forall>x\\<in>set (s # T).\n           stateful_strand_step.is_Equality x \\<longrightarrow>\n           fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> f T\n                          \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t T =\n                          f T \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T;\n        s = \\<langle>x31: x32 \\<doteq> x33\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t (s # T) =\n                         f (s # T) \\<union>\n                         wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t (s # T)\n 4. \\<And>x41 x42.\n       \\<lbrakk>\\<forall>x\\<in>set (s # T). is_Assignment x;\n        \\<forall>x\\<in>set (s # T).\n           stateful_strand_step.is_Equality x \\<longrightarrow>\n           fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> f T\n                          \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t T =\n                          f T \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T;\n        s = insert\\<langle>x41,x42\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t (s # T) =\n                         f (s # T) \\<union>\n                         wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t (s # T)\n 5. \\<And>x51 x52.\n       \\<lbrakk>\\<forall>x\\<in>set (s # T). is_Assignment x;\n        \\<forall>x\\<in>set (s # T).\n           stateful_strand_step.is_Equality x \\<longrightarrow>\n           fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> f T\n                          \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t T =\n                          f T \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T;\n        s = delete\\<langle>x51,x52\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t (s # T) =\n                         f (s # T) \\<union>\n                         wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t (s # T)\n 6. \\<And>x61 x62 x63.\n       \\<lbrakk>\\<forall>x\\<in>set (s # T). is_Assignment x;\n        \\<forall>x\\<in>set (s # T).\n           stateful_strand_step.is_Equality x \\<longrightarrow>\n           fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> f T\n                          \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t T =\n                          f T \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T;\n        s = \\<langle>x61: x62 \\<in> x63\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t (s # T) =\n                         f (s # T) \\<union>\n                         wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t (s # T)\n 7. \\<And>x71 x72 x73.\n       \\<lbrakk>\\<forall>x\\<in>set (s # T). is_Assignment x;\n        \\<forall>x\\<in>set (s # T).\n           stateful_strand_step.is_Equality x \\<longrightarrow>\n           fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> f T\n                          \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t T =\n                          f T \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T;\n        s =\n        \\<forall>x71\\<langle>\\<or>\\<noteq>: x72 \\<or>\\<notin>: x73\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t (s # T) =\n                         f (s # T) \\<union>\n                         wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t (s # T)", "ultimately"], ["proof (chain)\npicking this:\n  ac = assign\n  fv\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p s =\n  fv t' \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p s\n  f (s # T) = fv t' \\<union> f T\n  fv\\<^sub>s\\<^sub>s\\<^sub>t T =\n  f T \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T", "show ?thesis"], ["proof (prove)\nusing this:\n  ac = assign\n  fv\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p s =\n  fv t' \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p s\n  f (s # T) = fv t' \\<union> f T\n  fv\\<^sub>s\\<^sub>s\\<^sub>t T =\n  f T \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T\n\ngoal (1 subgoal):\n 1. fv\\<^sub>s\\<^sub>s\\<^sub>t (s # T) =\n    f (s # T) \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t (s # T)", "unfolding wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t_def fv\\<^sub>s\\<^sub>s\\<^sub>t_def"], ["proof (prove)\nusing this:\n  ac = assign\n  fv\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p s =\n  fv t' \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p s\n  f (s # T) = fv t' \\<union> f T\n  \\<Union> (set (map fv\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p T)) =\n  f T \\<union>\n  \\<Union> (set (map wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p T))\n\ngoal (1 subgoal):\n 1. \\<Union> (set (map fv\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (s # T))) =\n    f (s # T) \\<union>\n    \\<Union> (set (map wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (s # T)))", "by auto"], ["proof (state)\nthis:\n  fv\\<^sub>s\\<^sub>s\\<^sub>t (s # T) =\n  f (s # T) \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t (s # T)\n\ngoal (6 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<forall>x\\<in>set (s # T). is_Assignment x;\n        \\<forall>x\\<in>set (s # T).\n           stateful_strand_step.is_Equality x \\<longrightarrow>\n           fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> f T\n                          \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t T =\n                          f T \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T;\n        s = send\\<langle>x1\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t (s # T) =\n                         f (s # T) \\<union>\n                         wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t (s # T)\n 2. \\<And>x2.\n       \\<lbrakk>\\<forall>x\\<in>set (s # T). is_Assignment x;\n        \\<forall>x\\<in>set (s # T).\n           stateful_strand_step.is_Equality x \\<longrightarrow>\n           fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> f T\n                          \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t T =\n                          f T \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T;\n        s = receive\\<langle>x2\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t (s # T) =\n                         f (s # T) \\<union>\n                         wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t (s # T)\n 3. \\<And>x41 x42.\n       \\<lbrakk>\\<forall>x\\<in>set (s # T). is_Assignment x;\n        \\<forall>x\\<in>set (s # T).\n           stateful_strand_step.is_Equality x \\<longrightarrow>\n           fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> f T\n                          \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t T =\n                          f T \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T;\n        s = insert\\<langle>x41,x42\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t (s # T) =\n                         f (s # T) \\<union>\n                         wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t (s # T)\n 4. \\<And>x51 x52.\n       \\<lbrakk>\\<forall>x\\<in>set (s # T). is_Assignment x;\n        \\<forall>x\\<in>set (s # T).\n           stateful_strand_step.is_Equality x \\<longrightarrow>\n           fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> f T\n                          \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t T =\n                          f T \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T;\n        s = delete\\<langle>x51,x52\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t (s # T) =\n                         f (s # T) \\<union>\n                         wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t (s # T)\n 5. \\<And>x61 x62 x63.\n       \\<lbrakk>\\<forall>x\\<in>set (s # T). is_Assignment x;\n        \\<forall>x\\<in>set (s # T).\n           stateful_strand_step.is_Equality x \\<longrightarrow>\n           fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> f T\n                          \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t T =\n                          f T \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T;\n        s = \\<langle>x61: x62 \\<in> x63\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t (s # T) =\n                         f (s # T) \\<union>\n                         wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t (s # T)\n 6. \\<And>x71 x72 x73.\n       \\<lbrakk>\\<forall>x\\<in>set (s # T). is_Assignment x;\n        \\<forall>x\\<in>set (s # T).\n           stateful_strand_step.is_Equality x \\<longrightarrow>\n           fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> f T\n                          \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t T =\n                          f T \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T;\n        s =\n        \\<forall>x71\\<langle>\\<or>\\<noteq>: x72 \\<or>\\<notin>: x73\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t (s # T) =\n                         f (s # T) \\<union>\n                         wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t (s # T)", "next"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<forall>x\\<in>set (s # T). is_Assignment x;\n        \\<forall>x\\<in>set (s # T).\n           stateful_strand_step.is_Equality x \\<longrightarrow>\n           fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> f T\n                          \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t T =\n                          f T \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T;\n        s = send\\<langle>x1\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t (s # T) =\n                         f (s # T) \\<union>\n                         wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t (s # T)\n 2. \\<And>x2.\n       \\<lbrakk>\\<forall>x\\<in>set (s # T). is_Assignment x;\n        \\<forall>x\\<in>set (s # T).\n           stateful_strand_step.is_Equality x \\<longrightarrow>\n           fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> f T\n                          \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t T =\n                          f T \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T;\n        s = receive\\<langle>x2\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t (s # T) =\n                         f (s # T) \\<union>\n                         wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t (s # T)\n 3. \\<And>x41 x42.\n       \\<lbrakk>\\<forall>x\\<in>set (s # T). is_Assignment x;\n        \\<forall>x\\<in>set (s # T).\n           stateful_strand_step.is_Equality x \\<longrightarrow>\n           fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> f T\n                          \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t T =\n                          f T \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T;\n        s = insert\\<langle>x41,x42\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t (s # T) =\n                         f (s # T) \\<union>\n                         wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t (s # T)\n 4. \\<And>x51 x52.\n       \\<lbrakk>\\<forall>x\\<in>set (s # T). is_Assignment x;\n        \\<forall>x\\<in>set (s # T).\n           stateful_strand_step.is_Equality x \\<longrightarrow>\n           fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> f T\n                          \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t T =\n                          f T \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T;\n        s = delete\\<langle>x51,x52\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t (s # T) =\n                         f (s # T) \\<union>\n                         wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t (s # T)\n 5. \\<And>x61 x62 x63.\n       \\<lbrakk>\\<forall>x\\<in>set (s # T). is_Assignment x;\n        \\<forall>x\\<in>set (s # T).\n           stateful_strand_step.is_Equality x \\<longrightarrow>\n           fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> f T\n                          \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t T =\n                          f T \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T;\n        s = \\<langle>x61: x62 \\<in> x63\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t (s # T) =\n                         f (s # T) \\<union>\n                         wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t (s # T)\n 6. \\<And>x71 x72 x73.\n       \\<lbrakk>\\<forall>x\\<in>set (s # T). is_Assignment x;\n        \\<forall>x\\<in>set (s # T).\n           stateful_strand_step.is_Equality x \\<longrightarrow>\n           fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> f T\n                          \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t T =\n                          f T \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T;\n        s =\n        \\<forall>x71\\<langle>\\<or>\\<noteq>: x72 \\<or>\\<notin>: x73\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t (s # T) =\n                         f (s # T) \\<union>\n                         wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t (s # T)", "case (InSet ac t t')"], ["proof (state)\nthis:\n  s = \\<langle>ac: t \\<in> t'\\<rangle>\n\ngoal (6 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<forall>x\\<in>set (s # T). is_Assignment x;\n        \\<forall>x\\<in>set (s # T).\n           stateful_strand_step.is_Equality x \\<longrightarrow>\n           fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> f T\n                          \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t T =\n                          f T \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T;\n        s = send\\<langle>x1\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t (s # T) =\n                         f (s # T) \\<union>\n                         wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t (s # T)\n 2. \\<And>x2.\n       \\<lbrakk>\\<forall>x\\<in>set (s # T). is_Assignment x;\n        \\<forall>x\\<in>set (s # T).\n           stateful_strand_step.is_Equality x \\<longrightarrow>\n           fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> f T\n                          \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t T =\n                          f T \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T;\n        s = receive\\<langle>x2\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t (s # T) =\n                         f (s # T) \\<union>\n                         wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t (s # T)\n 3. \\<And>x41 x42.\n       \\<lbrakk>\\<forall>x\\<in>set (s # T). is_Assignment x;\n        \\<forall>x\\<in>set (s # T).\n           stateful_strand_step.is_Equality x \\<longrightarrow>\n           fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> f T\n                          \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t T =\n                          f T \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T;\n        s = insert\\<langle>x41,x42\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t (s # T) =\n                         f (s # T) \\<union>\n                         wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t (s # T)\n 4. \\<And>x51 x52.\n       \\<lbrakk>\\<forall>x\\<in>set (s # T). is_Assignment x;\n        \\<forall>x\\<in>set (s # T).\n           stateful_strand_step.is_Equality x \\<longrightarrow>\n           fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> f T\n                          \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t T =\n                          f T \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T;\n        s = delete\\<langle>x51,x52\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t (s # T) =\n                         f (s # T) \\<union>\n                         wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t (s # T)\n 5. \\<And>x61 x62 x63.\n       \\<lbrakk>\\<forall>x\\<in>set (s # T). is_Assignment x;\n        \\<forall>x\\<in>set (s # T).\n           stateful_strand_step.is_Equality x \\<longrightarrow>\n           fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> f T\n                          \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t T =\n                          f T \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T;\n        s = \\<langle>x61: x62 \\<in> x63\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t (s # T) =\n                         f (s # T) \\<union>\n                         wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t (s # T)\n 6. \\<And>x71 x72 x73.\n       \\<lbrakk>\\<forall>x\\<in>set (s # T). is_Assignment x;\n        \\<forall>x\\<in>set (s # T).\n           stateful_strand_step.is_Equality x \\<longrightarrow>\n           fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> f T\n                          \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t T =\n                          f T \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T;\n        s =\n        \\<forall>x71\\<langle>\\<or>\\<noteq>: x72 \\<or>\\<notin>: x73\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t (s # T) =\n                         f (s # T) \\<union>\n                         wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t (s # T)", "hence \"ac = Assign\" \"fv\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p s = wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p s\" \"f (s#T) = f T\""], ["proof (prove)\nusing this:\n  s = \\<langle>ac: t \\<in> t'\\<rangle>\n\ngoal (1 subgoal):\n 1. ac = assign &&&\n    fv\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p s =\n    wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p s &&&\n    f (s # T) = f T", "using 2"], ["proof (prove)\nusing this:\n  s = \\<langle>ac: t \\<in> t'\\<rangle>\n  \\<forall>x\\<in>set (s # T). is_Assignment x\n  \\<forall>x\\<in>set (s # T).\n     stateful_strand_step.is_Equality x \\<longrightarrow>\n     fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\n\ngoal (1 subgoal):\n 1. ac = assign &&&\n    fv\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p s =\n    wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p s &&&\n    f (s # T) = f T", "unfolding defs3"], ["proof (prove)\nusing this:\n  s = \\<langle>ac: t \\<in> t'\\<rangle>\n  \\<forall>x\\<in>set (s # T). is_Assignment x\n  \\<forall>x\\<in>set (s # T).\n     stateful_strand_step.is_Equality x \\<longrightarrow>\n     fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\n\ngoal (1 subgoal):\n 1. ac = assign &&&\n    fv\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p s =\n    wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p s &&&\n    \\<Union>\n     (case_stateful_strand_step (\\<lambda>term. {}) fv\n       (\\<lambda>poscheckvariant x t'.\n           case poscheckvariant of assign \\<Rightarrow> fv t'\n           | check \\<Rightarrow> {})\n       (\\<lambda>t t'. fv t \\<union> fv t') (\\<lambda>term1 term2. {})\n       (\\<lambda>poscheckvariant term1 term2. {})\n       (\\<lambda>list1 list2 list3. {}) `\n      set (s # T)) =\n    \\<Union>\n     (case_stateful_strand_step (\\<lambda>term. {}) fv\n       (\\<lambda>poscheckvariant x t'.\n           case poscheckvariant of assign \\<Rightarrow> fv t'\n           | check \\<Rightarrow> {})\n       (\\<lambda>t t'. fv t \\<union> fv t') (\\<lambda>term1 term2. {})\n       (\\<lambda>poscheckvariant term1 term2. {})\n       (\\<lambda>list1 list2 list3. {}) `\n      set T)", "by auto"], ["proof (state)\nthis:\n  ac = assign\n  fv\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p s =\n  wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p s\n  f (s # T) = f T\n\ngoal (6 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<forall>x\\<in>set (s # T). is_Assignment x;\n        \\<forall>x\\<in>set (s # T).\n           stateful_strand_step.is_Equality x \\<longrightarrow>\n           fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> f T\n                          \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t T =\n                          f T \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T;\n        s = send\\<langle>x1\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t (s # T) =\n                         f (s # T) \\<union>\n                         wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t (s # T)\n 2. \\<And>x2.\n       \\<lbrakk>\\<forall>x\\<in>set (s # T). is_Assignment x;\n        \\<forall>x\\<in>set (s # T).\n           stateful_strand_step.is_Equality x \\<longrightarrow>\n           fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> f T\n                          \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t T =\n                          f T \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T;\n        s = receive\\<langle>x2\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t (s # T) =\n                         f (s # T) \\<union>\n                         wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t (s # T)\n 3. \\<And>x41 x42.\n       \\<lbrakk>\\<forall>x\\<in>set (s # T). is_Assignment x;\n        \\<forall>x\\<in>set (s # T).\n           stateful_strand_step.is_Equality x \\<longrightarrow>\n           fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> f T\n                          \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t T =\n                          f T \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T;\n        s = insert\\<langle>x41,x42\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t (s # T) =\n                         f (s # T) \\<union>\n                         wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t (s # T)\n 4. \\<And>x51 x52.\n       \\<lbrakk>\\<forall>x\\<in>set (s # T). is_Assignment x;\n        \\<forall>x\\<in>set (s # T).\n           stateful_strand_step.is_Equality x \\<longrightarrow>\n           fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> f T\n                          \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t T =\n                          f T \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T;\n        s = delete\\<langle>x51,x52\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t (s # T) =\n                         f (s # T) \\<union>\n                         wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t (s # T)\n 5. \\<And>x61 x62 x63.\n       \\<lbrakk>\\<forall>x\\<in>set (s # T). is_Assignment x;\n        \\<forall>x\\<in>set (s # T).\n           stateful_strand_step.is_Equality x \\<longrightarrow>\n           fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> f T\n                          \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t T =\n                          f T \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T;\n        s = \\<langle>x61: x62 \\<in> x63\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t (s # T) =\n                         f (s # T) \\<union>\n                         wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t (s # T)\n 6. \\<And>x71 x72 x73.\n       \\<lbrakk>\\<forall>x\\<in>set (s # T). is_Assignment x;\n        \\<forall>x\\<in>set (s # T).\n           stateful_strand_step.is_Equality x \\<longrightarrow>\n           fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> f T\n                          \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t T =\n                          f T \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T;\n        s =\n        \\<forall>x71\\<langle>\\<or>\\<noteq>: x72 \\<or>\\<notin>: x73\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t (s # T) =\n                         f (s # T) \\<union>\n                         wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t (s # T)", "moreover"], ["proof (state)\nthis:\n  ac = assign\n  fv\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p s =\n  wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p s\n  f (s # T) = f T\n\ngoal (6 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<forall>x\\<in>set (s # T). is_Assignment x;\n        \\<forall>x\\<in>set (s # T).\n           stateful_strand_step.is_Equality x \\<longrightarrow>\n           fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> f T\n                          \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t T =\n                          f T \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T;\n        s = send\\<langle>x1\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t (s # T) =\n                         f (s # T) \\<union>\n                         wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t (s # T)\n 2. \\<And>x2.\n       \\<lbrakk>\\<forall>x\\<in>set (s # T). is_Assignment x;\n        \\<forall>x\\<in>set (s # T).\n           stateful_strand_step.is_Equality x \\<longrightarrow>\n           fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> f T\n                          \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t T =\n                          f T \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T;\n        s = receive\\<langle>x2\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t (s # T) =\n                         f (s # T) \\<union>\n                         wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t (s # T)\n 3. \\<And>x41 x42.\n       \\<lbrakk>\\<forall>x\\<in>set (s # T). is_Assignment x;\n        \\<forall>x\\<in>set (s # T).\n           stateful_strand_step.is_Equality x \\<longrightarrow>\n           fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> f T\n                          \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t T =\n                          f T \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T;\n        s = insert\\<langle>x41,x42\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t (s # T) =\n                         f (s # T) \\<union>\n                         wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t (s # T)\n 4. \\<And>x51 x52.\n       \\<lbrakk>\\<forall>x\\<in>set (s # T). is_Assignment x;\n        \\<forall>x\\<in>set (s # T).\n           stateful_strand_step.is_Equality x \\<longrightarrow>\n           fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> f T\n                          \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t T =\n                          f T \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T;\n        s = delete\\<langle>x51,x52\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t (s # T) =\n                         f (s # T) \\<union>\n                         wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t (s # T)\n 5. \\<And>x61 x62 x63.\n       \\<lbrakk>\\<forall>x\\<in>set (s # T). is_Assignment x;\n        \\<forall>x\\<in>set (s # T).\n           stateful_strand_step.is_Equality x \\<longrightarrow>\n           fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> f T\n                          \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t T =\n                          f T \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T;\n        s = \\<langle>x61: x62 \\<in> x63\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t (s # T) =\n                         f (s # T) \\<union>\n                         wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t (s # T)\n 6. \\<And>x71 x72 x73.\n       \\<lbrakk>\\<forall>x\\<in>set (s # T). is_Assignment x;\n        \\<forall>x\\<in>set (s # T).\n           stateful_strand_step.is_Equality x \\<longrightarrow>\n           fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> f T\n                          \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t T =\n                          f T \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T;\n        s =\n        \\<forall>x71\\<langle>\\<or>\\<noteq>: x72 \\<or>\\<notin>: x73\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t (s # T) =\n                         f (s # T) \\<union>\n                         wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t (s # T)", "have \"fv\\<^sub>s\\<^sub>s\\<^sub>t T = f T \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fv\\<^sub>s\\<^sub>s\\<^sub>t T =\n    f T \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T", "using Cons.IH(2) 2"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n   \\<forall>x\\<in>set T.\n      stateful_strand_step.is_Equality x \\<longrightarrow>\n      fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n  \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t T =\n                    f T \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T\n  \\<forall>x\\<in>set (s # T). is_Assignment x\n  \\<forall>x\\<in>set (s # T).\n     stateful_strand_step.is_Equality x \\<longrightarrow>\n     fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\n\ngoal (1 subgoal):\n 1. fv\\<^sub>s\\<^sub>s\\<^sub>t T =\n    f T \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T", "by auto"], ["proof (state)\nthis:\n  fv\\<^sub>s\\<^sub>s\\<^sub>t T =\n  f T \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T\n\ngoal (6 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<forall>x\\<in>set (s # T). is_Assignment x;\n        \\<forall>x\\<in>set (s # T).\n           stateful_strand_step.is_Equality x \\<longrightarrow>\n           fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> f T\n                          \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t T =\n                          f T \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T;\n        s = send\\<langle>x1\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t (s # T) =\n                         f (s # T) \\<union>\n                         wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t (s # T)\n 2. \\<And>x2.\n       \\<lbrakk>\\<forall>x\\<in>set (s # T). is_Assignment x;\n        \\<forall>x\\<in>set (s # T).\n           stateful_strand_step.is_Equality x \\<longrightarrow>\n           fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> f T\n                          \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t T =\n                          f T \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T;\n        s = receive\\<langle>x2\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t (s # T) =\n                         f (s # T) \\<union>\n                         wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t (s # T)\n 3. \\<And>x41 x42.\n       \\<lbrakk>\\<forall>x\\<in>set (s # T). is_Assignment x;\n        \\<forall>x\\<in>set (s # T).\n           stateful_strand_step.is_Equality x \\<longrightarrow>\n           fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> f T\n                          \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t T =\n                          f T \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T;\n        s = insert\\<langle>x41,x42\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t (s # T) =\n                         f (s # T) \\<union>\n                         wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t (s # T)\n 4. \\<And>x51 x52.\n       \\<lbrakk>\\<forall>x\\<in>set (s # T). is_Assignment x;\n        \\<forall>x\\<in>set (s # T).\n           stateful_strand_step.is_Equality x \\<longrightarrow>\n           fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> f T\n                          \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t T =\n                          f T \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T;\n        s = delete\\<langle>x51,x52\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t (s # T) =\n                         f (s # T) \\<union>\n                         wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t (s # T)\n 5. \\<And>x61 x62 x63.\n       \\<lbrakk>\\<forall>x\\<in>set (s # T). is_Assignment x;\n        \\<forall>x\\<in>set (s # T).\n           stateful_strand_step.is_Equality x \\<longrightarrow>\n           fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> f T\n                          \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t T =\n                          f T \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T;\n        s = \\<langle>x61: x62 \\<in> x63\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t (s # T) =\n                         f (s # T) \\<union>\n                         wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t (s # T)\n 6. \\<And>x71 x72 x73.\n       \\<lbrakk>\\<forall>x\\<in>set (s # T). is_Assignment x;\n        \\<forall>x\\<in>set (s # T).\n           stateful_strand_step.is_Equality x \\<longrightarrow>\n           fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> f T\n                          \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t T =\n                          f T \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T;\n        s =\n        \\<forall>x71\\<langle>\\<or>\\<noteq>: x72 \\<or>\\<notin>: x73\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t (s # T) =\n                         f (s # T) \\<union>\n                         wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t (s # T)", "ultimately"], ["proof (chain)\npicking this:\n  ac = assign\n  fv\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p s =\n  wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p s\n  f (s # T) = f T\n  fv\\<^sub>s\\<^sub>s\\<^sub>t T =\n  f T \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T", "show ?thesis"], ["proof (prove)\nusing this:\n  ac = assign\n  fv\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p s =\n  wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p s\n  f (s # T) = f T\n  fv\\<^sub>s\\<^sub>s\\<^sub>t T =\n  f T \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T\n\ngoal (1 subgoal):\n 1. fv\\<^sub>s\\<^sub>s\\<^sub>t (s # T) =\n    f (s # T) \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t (s # T)", "unfolding wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t_def fv\\<^sub>s\\<^sub>s\\<^sub>t_def"], ["proof (prove)\nusing this:\n  ac = assign\n  fv\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p s =\n  wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p s\n  f (s # T) = f T\n  \\<Union> (set (map fv\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p T)) =\n  f T \\<union>\n  \\<Union> (set (map wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p T))\n\ngoal (1 subgoal):\n 1. \\<Union> (set (map fv\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (s # T))) =\n    f (s # T) \\<union>\n    \\<Union> (set (map wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (s # T)))", "by auto"], ["proof (state)\nthis:\n  fv\\<^sub>s\\<^sub>s\\<^sub>t (s # T) =\n  f (s # T) \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t (s # T)\n\ngoal (5 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<forall>x\\<in>set (s # T). is_Assignment x;\n        \\<forall>x\\<in>set (s # T).\n           stateful_strand_step.is_Equality x \\<longrightarrow>\n           fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> f T\n                          \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t T =\n                          f T \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T;\n        s = send\\<langle>x1\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t (s # T) =\n                         f (s # T) \\<union>\n                         wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t (s # T)\n 2. \\<And>x2.\n       \\<lbrakk>\\<forall>x\\<in>set (s # T). is_Assignment x;\n        \\<forall>x\\<in>set (s # T).\n           stateful_strand_step.is_Equality x \\<longrightarrow>\n           fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> f T\n                          \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t T =\n                          f T \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T;\n        s = receive\\<langle>x2\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t (s # T) =\n                         f (s # T) \\<union>\n                         wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t (s # T)\n 3. \\<And>x41 x42.\n       \\<lbrakk>\\<forall>x\\<in>set (s # T). is_Assignment x;\n        \\<forall>x\\<in>set (s # T).\n           stateful_strand_step.is_Equality x \\<longrightarrow>\n           fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> f T\n                          \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t T =\n                          f T \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T;\n        s = insert\\<langle>x41,x42\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t (s # T) =\n                         f (s # T) \\<union>\n                         wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t (s # T)\n 4. \\<And>x51 x52.\n       \\<lbrakk>\\<forall>x\\<in>set (s # T). is_Assignment x;\n        \\<forall>x\\<in>set (s # T).\n           stateful_strand_step.is_Equality x \\<longrightarrow>\n           fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> f T\n                          \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t T =\n                          f T \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T;\n        s = delete\\<langle>x51,x52\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t (s # T) =\n                         f (s # T) \\<union>\n                         wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t (s # T)\n 5. \\<And>x71 x72 x73.\n       \\<lbrakk>\\<forall>x\\<in>set (s # T). is_Assignment x;\n        \\<forall>x\\<in>set (s # T).\n           stateful_strand_step.is_Equality x \\<longrightarrow>\n           fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> f T\n                          \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1;\n        \\<lbrakk>\\<forall>x\\<in>set T. is_Assignment x;\n         \\<forall>x\\<in>set T.\n            stateful_strand_step.is_Equality x \\<longrightarrow>\n            fv (the_rhs x)\n            \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n        \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t T =\n                          f T \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T;\n        s =\n        \\<forall>x71\\<langle>\\<or>\\<noteq>: x72 \\<or>\\<notin>: x73\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t (s # T) =\n                         f (s # T) \\<union>\n                         wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t (s # T)", "qed (simp_all add: defs3)"], ["proof (state)\nthis:\n  fv\\<^sub>s\\<^sub>s\\<^sub>t (s # T) =\n  f (s # T) \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t (s # T)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>x\\<in>set []. is_Assignment x;\n     \\<forall>x\\<in>set [].\n        stateful_strand_step.is_Equality x \\<longrightarrow>\n        fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n    \\<Longrightarrow> f [] \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1\n 2. \\<lbrakk>\\<forall>x\\<in>set []. is_Assignment x;\n     \\<forall>x\\<in>set [].\n        stateful_strand_step.is_Equality x \\<longrightarrow>\n        fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n    \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t [] =\n                      f [] \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t []", "}"], ["proof (state)\nthis:\n  \\<lbrakk>\\<forall>x\\<in>set (s # T). is_Assignment x;\n   \\<forall>x\\<in>set (s # T).\n      stateful_strand_step.is_Equality x \\<longrightarrow>\n      fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n  \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t (s # T) =\n                    f (s # T) \\<union>\n                    wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t (s # T)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>x\\<in>set []. is_Assignment x;\n     \\<forall>x\\<in>set [].\n        stateful_strand_step.is_Equality x \\<longrightarrow>\n        fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n    \\<Longrightarrow> f [] \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1\n 2. \\<lbrakk>\\<forall>x\\<in>set []. is_Assignment x;\n     \\<forall>x\\<in>set [].\n        stateful_strand_step.is_Equality x \\<longrightarrow>\n        fv (the_rhs x) \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1\\<rbrakk>\n    \\<Longrightarrow> fv\\<^sub>s\\<^sub>s\\<^sub>t [] =\n                      f [] \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t []", "qed (simp_all add: defs3 wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t_def fv\\<^sub>s\\<^sub>s\\<^sub>t_def)"], ["proof (state)\nthis:\n  f T2 \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1\n  fv\\<^sub>s\\<^sub>s\\<^sub>t T2 =\n  f T2 \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T2\n\ngoal (3 subgoals):\n 1. wf'\\<^sub>s\\<^sub>s\\<^sub>t (set (transaction_fresh T))\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_strand T)))\n 2. fv_transaction T \\<inter> bvars_transaction T = {}\n 3. set (transaction_fresh T) \\<inter> bvars_transaction T = {}", "have \"f T \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T\" for T"], ["proof (prove)\ngoal (1 subgoal):\n 1. f T \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       (x, y) \\<in> f T \\<Longrightarrow>\n       (x, y) \\<in> fv\\<^sub>s\\<^sub>s\\<^sub>t T", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       (x, y) \\<in> f T \\<Longrightarrow>\n       (x, y) \\<in> fv\\<^sub>s\\<^sub>s\\<^sub>t T", "show \"x \\<in> f T \\<Longrightarrow> x \\<in> fv\\<^sub>s\\<^sub>s\\<^sub>t T\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> f T \\<Longrightarrow> x \\<in> fv\\<^sub>s\\<^sub>s\\<^sub>t T", "proof (induction T)"], ["proof (state)\ngoal (2 subgoals):\n 1. x \\<in> f [] \\<Longrightarrow> x \\<in> fv\\<^sub>s\\<^sub>s\\<^sub>t []\n 2. \\<And>a T.\n       \\<lbrakk>x \\<in> f T \\<Longrightarrow>\n                x \\<in> fv\\<^sub>s\\<^sub>s\\<^sub>t T;\n        x \\<in> f (a # T)\\<rbrakk>\n       \\<Longrightarrow> x \\<in> fv\\<^sub>s\\<^sub>s\\<^sub>t (a # T)", "case (Cons s T)"], ["proof (state)\nthis:\n  x \\<in> f T \\<Longrightarrow> x \\<in> fv\\<^sub>s\\<^sub>s\\<^sub>t T\n  x \\<in> f (s # T)\n\ngoal (2 subgoals):\n 1. x \\<in> f [] \\<Longrightarrow> x \\<in> fv\\<^sub>s\\<^sub>s\\<^sub>t []\n 2. \\<And>a T.\n       \\<lbrakk>x \\<in> f T \\<Longrightarrow>\n                x \\<in> fv\\<^sub>s\\<^sub>s\\<^sub>t T;\n        x \\<in> f (a # T)\\<rbrakk>\n       \\<Longrightarrow> x \\<in> fv\\<^sub>s\\<^sub>s\\<^sub>t (a # T)", "thus ?case"], ["proof (prove)\nusing this:\n  x \\<in> f T \\<Longrightarrow> x \\<in> fv\\<^sub>s\\<^sub>s\\<^sub>t T\n  x \\<in> f (s # T)\n\ngoal (1 subgoal):\n 1. x \\<in> fv\\<^sub>s\\<^sub>s\\<^sub>t (s # T)", "proof (cases \"x \\<in> f T\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>x \\<in> f T \\<Longrightarrow>\n             x \\<in> fv\\<^sub>s\\<^sub>s\\<^sub>t T;\n     x \\<in> f (s # T); x \\<in> f T\\<rbrakk>\n    \\<Longrightarrow> x \\<in> fv\\<^sub>s\\<^sub>s\\<^sub>t (s # T)\n 2. \\<lbrakk>x \\<in> f T \\<Longrightarrow>\n             x \\<in> fv\\<^sub>s\\<^sub>s\\<^sub>t T;\n     x \\<in> f (s # T); x \\<notin> f T\\<rbrakk>\n    \\<Longrightarrow> x \\<in> fv\\<^sub>s\\<^sub>s\\<^sub>t (s # T)", "case False"], ["proof (state)\nthis:\n  x \\<notin> f T\n\ngoal (2 subgoals):\n 1. \\<lbrakk>x \\<in> f T \\<Longrightarrow>\n             x \\<in> fv\\<^sub>s\\<^sub>s\\<^sub>t T;\n     x \\<in> f (s # T); x \\<in> f T\\<rbrakk>\n    \\<Longrightarrow> x \\<in> fv\\<^sub>s\\<^sub>s\\<^sub>t (s # T)\n 2. \\<lbrakk>x \\<in> f T \\<Longrightarrow>\n             x \\<in> fv\\<^sub>s\\<^sub>s\\<^sub>t T;\n     x \\<in> f (s # T); x \\<notin> f T\\<rbrakk>\n    \\<Longrightarrow> x \\<in> fv\\<^sub>s\\<^sub>s\\<^sub>t (s # T)", "thus ?thesis"], ["proof (prove)\nusing this:\n  x \\<notin> f T\n\ngoal (1 subgoal):\n 1. x \\<in> fv\\<^sub>s\\<^sub>s\\<^sub>t (s # T)", "using Cons.prems"], ["proof (prove)\nusing this:\n  x \\<notin> f T\n  x \\<in> f (s # T)\n\ngoal (1 subgoal):\n 1. x \\<in> fv\\<^sub>s\\<^sub>s\\<^sub>t (s # T)", "unfolding defs3 fv\\<^sub>s\\<^sub>s\\<^sub>t_def"], ["proof (prove)\nusing this:\n  x \\<notin> \\<Union>\n              (case_stateful_strand_step (\\<lambda>term. {}) fv\n                (\\<lambda>poscheckvariant x t'.\n                    case poscheckvariant of assign \\<Rightarrow> fv t'\n                    | check \\<Rightarrow> {})\n                (\\<lambda>t t'. fv t \\<union> fv t')\n                (\\<lambda>term1 term2. {})\n                (\\<lambda>poscheckvariant term1 term2. {})\n                (\\<lambda>list1 list2 list3. {}) `\n               set T)\n  x \\<in> \\<Union>\n           (case_stateful_strand_step (\\<lambda>term. {}) fv\n             (\\<lambda>poscheckvariant x t'.\n                 case poscheckvariant of assign \\<Rightarrow> fv t'\n                 | check \\<Rightarrow> {})\n             (\\<lambda>t t'. fv t \\<union> fv t') (\\<lambda>term1 term2. {})\n             (\\<lambda>poscheckvariant term1 term2. {})\n             (\\<lambda>list1 list2 list3. {}) `\n            set (s # T))\n\ngoal (1 subgoal):\n 1. x \\<in> \\<Union> (set (map fv\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p (s # T)))", "by (auto split: stateful_strand_step.splits poscheckvariant.splits)"], ["proof (state)\nthis:\n  x \\<in> fv\\<^sub>s\\<^sub>s\\<^sub>t (s # T)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<in> f T \\<Longrightarrow>\n             x \\<in> fv\\<^sub>s\\<^sub>s\\<^sub>t T;\n     x \\<in> f (s # T); x \\<in> f T\\<rbrakk>\n    \\<Longrightarrow> x \\<in> fv\\<^sub>s\\<^sub>s\\<^sub>t (s # T)", "qed auto"], ["proof (state)\nthis:\n  x \\<in> fv\\<^sub>s\\<^sub>s\\<^sub>t (s # T)\n\ngoal (1 subgoal):\n 1. x \\<in> f [] \\<Longrightarrow> x \\<in> fv\\<^sub>s\\<^sub>s\\<^sub>t []", "qed (simp add: defs3 fv\\<^sub>s\\<^sub>s\\<^sub>t_def)"], ["proof (state)\nthis:\n  x \\<in> f T \\<Longrightarrow> x \\<in> fv\\<^sub>s\\<^sub>s\\<^sub>t T\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  f ?T \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t ?T\n\ngoal (3 subgoals):\n 1. wf'\\<^sub>s\\<^sub>s\\<^sub>t (set (transaction_fresh T))\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_strand T)))\n 2. fv_transaction T \\<inter> bvars_transaction T = {}\n 3. set (transaction_fresh T) \\<inter> bvars_transaction T = {}", "hence 6:\n      \"f T3 \\<subseteq> X \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1 \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T2\"\n      \"f T4 \\<subseteq> X \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1 \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T2\"\n      \"f T5 \\<subseteq> X \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1 \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T2\""], ["proof (prove)\nusing this:\n  f ?T \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t ?T\n\ngoal (1 subgoal):\n 1. f T3\n    \\<subseteq> X \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1 \\<union>\n                wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T2 &&&\n    f T4\n    \\<subseteq> X \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1 \\<union>\n                wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T2 &&&\n    f T5\n    \\<subseteq> X \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1 \\<union>\n                wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T2", "using 2(6,7) 4 5"], ["proof (prove)\nusing this:\n  f ?T \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t ?T\n  fv\\<^sub>s\\<^sub>s\\<^sub>t T3\n  \\<subseteq> fv\\<^sub>s\\<^sub>s\\<^sub>t T1 \\<union>\n              fv\\<^sub>s\\<^sub>s\\<^sub>t T2\n  fv\\<^sub>s\\<^sub>s\\<^sub>t T4 \\<union> fv\\<^sub>s\\<^sub>s\\<^sub>t T5\n  \\<subseteq> X \\<union> fv\\<^sub>s\\<^sub>s\\<^sub>t T1 \\<union>\n              fv\\<^sub>s\\<^sub>s\\<^sub>t T2\n  f T1 = {}\n  fv\\<^sub>s\\<^sub>s\\<^sub>t T1 = wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1\n  f T2 \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1\n  fv\\<^sub>s\\<^sub>s\\<^sub>t T2 =\n  f T2 \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T2\n\ngoal (1 subgoal):\n 1. f T3\n    \\<subseteq> X \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1 \\<union>\n                wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T2 &&&\n    f T4\n    \\<subseteq> X \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1 \\<union>\n                wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T2 &&&\n    f T5\n    \\<subseteq> X \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1 \\<union>\n                wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T2", "by blast+"], ["proof (state)\nthis:\n  f T3\n  \\<subseteq> X \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1 \\<union>\n              wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T2\n  f T4\n  \\<subseteq> X \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1 \\<union>\n              wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T2\n  f T5\n  \\<subseteq> X \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1 \\<union>\n              wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T2\n\ngoal (3 subgoals):\n 1. wf'\\<^sub>s\\<^sub>s\\<^sub>t (set (transaction_fresh T))\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_strand T)))\n 2. fv_transaction T \\<inter> bvars_transaction T = {}\n 3. set (transaction_fresh T) \\<inter> bvars_transaction T = {}", "have 7:\n      \"wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T3 = {}\"\n      \"wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T4 = {}\"\n      \"wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T5 = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T3 = {} &&&\n    wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T4 = {} &&&\n    wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T5 = {}", "using 2(3,4,5)"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>set T3. is_Check x\n  \\<forall>x\\<in>set T4. is_Update x\n  \\<forall>x\\<in>set T5. stateful_strand_step.is_Receive x\n\ngoal (1 subgoal):\n 1. wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T3 = {} &&&\n    wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T4 = {} &&&\n    wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T5 = {}", "unfolding wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t_def"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>set T3. is_Check x\n  \\<forall>x\\<in>set T4. is_Update x\n  \\<forall>x\\<in>set T5. stateful_strand_step.is_Receive x\n\ngoal (1 subgoal):\n 1. \\<Union> (set (map wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p T3)) =\n    {} &&&\n    \\<Union> (set (map wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p T4)) =\n    {} &&&\n    \\<Union> (set (map wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p T5)) = {}", "by (auto split: stateful_strand_step.splits)"], ["proof (state)\nthis:\n  wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T3 = {}\n  wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T4 = {}\n  wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T5 = {}\n\ngoal (3 subgoals):\n 1. wf'\\<^sub>s\\<^sub>s\\<^sub>t (set (transaction_fresh T))\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_strand T)))\n 2. fv_transaction T \\<inter> bvars_transaction T = {}\n 3. set (transaction_fresh T) \\<inter> bvars_transaction T = {}", "have 8:\n      \"f T2 \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1 \\<union> X\"\n      \"f T3 \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t (T1@T2) \\<union> X\"\n      \"f T4 \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t ((T1@T2)@T3) \\<union> X\"\n      \"f T5 \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t (((T1@T2)@T3)@T4) \\<union> X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (f T2 \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1 \\<union> X &&&\n     f T3\n     \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t (T1 @ T2) \\<union>\n                 X) &&&\n    f T4\n    \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t ((T1 @ T2) @ T3) \\<union>\n                X &&&\n    f T5\n    \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t\n                 (((T1 @ T2) @ T3) @ T4) \\<union>\n                X", "using 4(1) 5(1) 6 7 wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t_append[of T1 T2]\n          wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t_append[of \"T1@T2\" T3]\n          wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t_append[of \"(T1@T2)@T3\" T4]"], ["proof (prove)\nusing this:\n  f T1 = {}\n  f T2 \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1\n  f T3\n  \\<subseteq> X \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1 \\<union>\n              wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T2\n  f T4\n  \\<subseteq> X \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1 \\<union>\n              wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T2\n  f T5\n  \\<subseteq> X \\<union> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1 \\<union>\n              wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T2\n  wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T3 = {}\n  wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T4 = {}\n  wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T5 = {}\n  wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t (T1 @ T2) =\n  wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1 \\<union>\n  wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T2\n  wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t ((T1 @ T2) @ T3) =\n  wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t (T1 @ T2) \\<union>\n  wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T3\n  wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t (((T1 @ T2) @ T3) @ T4) =\n  wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t ((T1 @ T2) @ T3) \\<union>\n  wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T4\n\ngoal (1 subgoal):\n 1. (f T2 \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1 \\<union> X &&&\n     f T3\n     \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t (T1 @ T2) \\<union>\n                 X) &&&\n    f T4\n    \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t ((T1 @ T2) @ T3) \\<union>\n                X &&&\n    f T5\n    \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t\n                 (((T1 @ T2) @ T3) @ T4) \\<union>\n                X", "by blast+"], ["proof (state)\nthis:\n  f T2 \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t T1 \\<union> X\n  f T3 \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t (T1 @ T2) \\<union> X\n  f T4\n  \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t ((T1 @ T2) @ T3) \\<union> X\n  f T5\n  \\<subseteq> wfvarsoccs\\<^sub>s\\<^sub>s\\<^sub>t\n               (((T1 @ T2) @ T3) @ T4) \\<union>\n              X\n\ngoal (3 subgoals):\n 1. wf'\\<^sub>s\\<^sub>s\\<^sub>t (set (transaction_fresh T))\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_strand T)))\n 2. fv_transaction T \\<inter> bvars_transaction T = {}\n 3. set (transaction_fresh T) \\<inter> bvars_transaction T = {}", "have \"wf'\\<^sub>s\\<^sub>s\\<^sub>t X (T1@T2@T3@T4@T5)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf'\\<^sub>s\\<^sub>s\\<^sub>t X (T1 @ T2 @ T3 @ T4 @ T5)", "using 0[OF 0[OF 0[OF 0[OF 3 8(1)] 8(2)] 8(3)] 8(4)]"], ["proof (prove)\nusing this:\n  wf'\\<^sub>s\\<^sub>s\\<^sub>t X ((((T1 @ T2) @ T3) @ T4) @ T5)\n\ngoal (1 subgoal):\n 1. wf'\\<^sub>s\\<^sub>s\\<^sub>t X (T1 @ T2 @ T3 @ T4 @ T5)", "unfolding Y_def Z_def"], ["proof (prove)\nusing this:\n  wf'\\<^sub>s\\<^sub>s\\<^sub>t X ((((T1 @ T2) @ T3) @ T4) @ T5)\n\ngoal (1 subgoal):\n 1. wf'\\<^sub>s\\<^sub>s\\<^sub>t X (T1 @ T2 @ T3 @ T4 @ T5)", "by simp"], ["proof (state)\nthis:\n  wf'\\<^sub>s\\<^sub>s\\<^sub>t X (T1 @ T2 @ T3 @ T4 @ T5)\n\ngoal (3 subgoals):\n 1. wf'\\<^sub>s\\<^sub>s\\<^sub>t (set (transaction_fresh T))\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_strand T)))\n 2. fv_transaction T \\<inter> bvars_transaction T = {}\n 3. set (transaction_fresh T) \\<inter> bvars_transaction T = {}", "thus ?A"], ["proof (prove)\nusing this:\n  wf'\\<^sub>s\\<^sub>s\\<^sub>t X (T1 @ T2 @ T3 @ T4 @ T5)\n\ngoal (1 subgoal):\n 1. wf'\\<^sub>s\\<^sub>s\\<^sub>t (set (transaction_fresh T))\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_strand T)))", "using 1"], ["proof (prove)\nusing this:\n  wf'\\<^sub>s\\<^sub>s\\<^sub>t X (T1 @ T2 @ T3 @ T4 @ T5)\n  unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_strand T)) =\n  T1 @ T2 @ T3 @ T4 @ T5\n\ngoal (1 subgoal):\n 1. wf'\\<^sub>s\\<^sub>s\\<^sub>t (set (transaction_fresh T))\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_strand T)))", "unfolding defs1 defs2"], ["proof (prove)\nusing this:\n  wf'\\<^sub>s\\<^sub>s\\<^sub>t (set (transaction_fresh T))\n   (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T)) @\n    unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_selects T)) @\n    unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_checks T)) @\n    unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_updates T)) @\n    unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T)))\n  unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_strand T)) =\n  unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T)) @\n  unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_selects T)) @\n  unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_checks T)) @\n  unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_updates T)) @\n  unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T))\n\ngoal (1 subgoal):\n 1. wf'\\<^sub>s\\<^sub>s\\<^sub>t (set (transaction_fresh T))\n     (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_strand T)))", "by simp"], ["proof (state)\nthis:\n  wf'\\<^sub>s\\<^sub>s\\<^sub>t (set (transaction_fresh T))\n   (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_strand T)))\n\ngoal (2 subgoals):\n 1. fv_transaction T \\<inter> bvars_transaction T = {}\n 2. set (transaction_fresh T) \\<inter> bvars_transaction T = {}", "have \"set (transaction_fresh T) \\<subseteq> fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_updates T) \\<union> fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T)\"\n       \"fv_transaction T \\<inter> bvars_transaction T = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (transaction_fresh T)\n    \\<subseteq> fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                 (transaction_updates T) \\<union>\n                fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T) &&&\n    fv_transaction T \\<inter> bvars_transaction T = {}", "using T"], ["proof (prove)\nusing this:\n  wellformed_transaction T\n\ngoal (1 subgoal):\n 1. set (transaction_fresh T)\n    \\<subseteq> fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                 (transaction_updates T) \\<union>\n                fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T) &&&\n    fv_transaction T \\<inter> bvars_transaction T = {}", "unfolding wellformed_transaction_def"], ["proof (prove)\nusing this:\n  list_all stateful_strand_step.is_Receive\n   (unlabel (transaction_receive T)) \\<and>\n  list_all is_Assignment (unlabel (transaction_selects T)) \\<and>\n  list_all is_Check (unlabel (transaction_checks T)) \\<and>\n  list_all is_Update (unlabel (transaction_updates T)) \\<and>\n  list_all stateful_strand_step.is_Send\n   (unlabel (transaction_send T)) \\<and>\n  set (transaction_fresh T)\n  \\<subseteq> fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n               (transaction_updates T) \\<union>\n              fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T) \\<and>\n  set (transaction_fresh T) \\<inter>\n  fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T) =\n  {} \\<and>\n  set (transaction_fresh T) \\<inter>\n  fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_selects T) =\n  {} \\<and>\n  fv_transaction T \\<inter> bvars_transaction T = {} \\<and>\n  fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_checks T)\n  \\<subseteq> fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n               (transaction_receive T) \\<union>\n              fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n               (transaction_selects T) \\<and>\n  fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_updates T) \\<union>\n  fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T) -\n  set (transaction_fresh T)\n  \\<subseteq> fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n               (transaction_receive T) \\<union>\n              fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n               (transaction_selects T) \\<and>\n  (\\<forall>x\\<in>set (unlabel (transaction_selects T)).\n      stateful_strand_step.is_Equality x \\<longrightarrow>\n      fv (the_rhs x)\n      \\<subseteq> fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                   (transaction_receive T))\n\ngoal (1 subgoal):\n 1. set (transaction_fresh T)\n    \\<subseteq> fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                 (transaction_updates T) \\<union>\n                fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T) &&&\n    fv_transaction T \\<inter> bvars_transaction T = {}", "by fast+"], ["proof (state)\nthis:\n  set (transaction_fresh T)\n  \\<subseteq> fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n               (transaction_updates T) \\<union>\n              fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T)\n  fv_transaction T \\<inter> bvars_transaction T = {}\n\ngoal (2 subgoals):\n 1. fv_transaction T \\<inter> bvars_transaction T = {}\n 2. set (transaction_fresh T) \\<inter> bvars_transaction T = {}", "thus ?B ?C"], ["proof (prove)\nusing this:\n  set (transaction_fresh T)\n  \\<subseteq> fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n               (transaction_updates T) \\<union>\n              fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T)\n  fv_transaction T \\<inter> bvars_transaction T = {}\n\ngoal (1 subgoal):\n 1. fv_transaction T \\<inter> bvars_transaction T = {} &&&\n    set (transaction_fresh T) \\<inter> bvars_transaction T = {}", "using fv_transaction_unfold[of T] bvars_transaction_unfold[of T]"], ["proof (prove)\nusing this:\n  set (transaction_fresh T)\n  \\<subseteq> fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n               (transaction_updates T) \\<union>\n              fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T)\n  fv_transaction T \\<inter> bvars_transaction T = {}\n  fv_transaction T =\n  fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T) \\<union>\n  fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_selects T) \\<union>\n  fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_checks T) \\<union>\n  fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_updates T) \\<union>\n  fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T)\n  bvars_transaction T =\n  bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T) \\<union>\n  bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_selects T) \\<union>\n  bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_checks T) \\<union>\n  bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_updates T) \\<union>\n  bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T)\n\ngoal (1 subgoal):\n 1. fv_transaction T \\<inter> bvars_transaction T = {} &&&\n    set (transaction_fresh T) \\<inter> bvars_transaction T = {}", "by blast+"], ["proof (state)\nthis:\n  fv_transaction T \\<inter> bvars_transaction T = {}\n  set (transaction_fresh T) \\<inter> bvars_transaction T = {}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma dual_wellformed_transaction_ident_cases'[dest]:\n  assumes \"wellformed_transaction T\"\n  shows \"dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_selects T) = transaction_selects T\"\n        \"dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_checks T) = transaction_checks T\"\n        \"dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_updates T) = transaction_updates T\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_selects T) =\n    transaction_selects T &&&\n    dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_checks T) =\n    transaction_checks T &&&\n    dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_updates T) =\n    transaction_updates T", "using assms"], ["proof (prove)\nusing this:\n  wellformed_transaction T\n\ngoal (1 subgoal):\n 1. dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_selects T) =\n    transaction_selects T &&&\n    dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_checks T) =\n    transaction_checks T &&&\n    dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_updates T) =\n    transaction_updates T", "unfolding wellformed_transaction_def"], ["proof (prove)\nusing this:\n  list_all stateful_strand_step.is_Receive\n   (unlabel (transaction_receive T)) \\<and>\n  list_all is_Assignment (unlabel (transaction_selects T)) \\<and>\n  list_all is_Check (unlabel (transaction_checks T)) \\<and>\n  list_all is_Update (unlabel (transaction_updates T)) \\<and>\n  list_all stateful_strand_step.is_Send\n   (unlabel (transaction_send T)) \\<and>\n  set (transaction_fresh T)\n  \\<subseteq> fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n               (transaction_updates T) \\<union>\n              fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T) \\<and>\n  set (transaction_fresh T) \\<inter>\n  fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T) =\n  {} \\<and>\n  set (transaction_fresh T) \\<inter>\n  fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_selects T) =\n  {} \\<and>\n  fv_transaction T \\<inter> bvars_transaction T = {} \\<and>\n  fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_checks T)\n  \\<subseteq> fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n               (transaction_receive T) \\<union>\n              fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n               (transaction_selects T) \\<and>\n  fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_updates T) \\<union>\n  fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T) -\n  set (transaction_fresh T)\n  \\<subseteq> fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n               (transaction_receive T) \\<union>\n              fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n               (transaction_selects T) \\<and>\n  (\\<forall>x\\<in>set (unlabel (transaction_selects T)).\n      stateful_strand_step.is_Equality x \\<longrightarrow>\n      fv (the_rhs x)\n      \\<subseteq> fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                   (transaction_receive T))\n\ngoal (1 subgoal):\n 1. dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_selects T) =\n    transaction_selects T &&&\n    dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_checks T) =\n    transaction_checks T &&&\n    dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_updates T) =\n    transaction_updates T", "by auto"], ["", "lemma dual_transaction_strand:\n  assumes \"wellformed_transaction T\"\n  shows \"dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_strand T) =\n         dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T)@transaction_selects T@transaction_checks T@\n         transaction_updates T@dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_strand T) =\n    dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T) @\n    transaction_selects T @\n    transaction_checks T @\n    transaction_updates T @\n    dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T)", "using dual_wellformed_transaction_ident_cases'[OF assms] dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t_append"], ["proof (prove)\nusing this:\n  dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_selects T) =\n  transaction_selects T\n  dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_checks T) =\n  transaction_checks T\n  dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_updates T) =\n  transaction_updates T\n  dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (?A @ ?B) =\n  dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t ?A @\n  dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t ?B\n\ngoal (1 subgoal):\n 1. dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_strand T) =\n    dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T) @\n    transaction_selects T @\n    transaction_checks T @\n    transaction_updates T @\n    dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T)", "unfolding transaction_strand_def"], ["proof (prove)\nusing this:\n  dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_selects T) =\n  transaction_selects T\n  dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_checks T) =\n  transaction_checks T\n  dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_updates T) =\n  transaction_updates T\n  dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (?A @ ?B) =\n  dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t ?A @\n  dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t ?B\n\ngoal (1 subgoal):\n 1. dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (transaction_receive T @\n      transaction_selects T @\n      transaction_checks T @ transaction_updates T @ transaction_send T) =\n    dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T) @\n    transaction_selects T @\n    transaction_checks T @\n    transaction_updates T @\n    dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T)", "by metis"], ["", "lemma dual_unlabel_transaction_strand:\n  assumes \"wellformed_transaction T\"\n  shows \"unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_strand T)) =\n         (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T)))@(unlabel (transaction_selects T))@\n         (unlabel (transaction_checks T))@(unlabel (transaction_updates T))@\n         (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_strand T)) =\n    unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T)) @\n    unlabel (transaction_selects T) @\n    unlabel (transaction_checks T) @\n    unlabel (transaction_updates T) @\n    unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T))", "using dual_transaction_strand[OF assms]"], ["proof (prove)\nusing this:\n  dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_strand T) =\n  dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T) @\n  transaction_selects T @\n  transaction_checks T @\n  transaction_updates T @\n  dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T)\n\ngoal (1 subgoal):\n 1. unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_strand T)) =\n    unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T)) @\n    unlabel (transaction_selects T) @\n    unlabel (transaction_checks T) @\n    unlabel (transaction_updates T) @\n    unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T))", "by (simp add: unlabel_def)"], ["", "lemma dual_transaction_strand_subst:\n  assumes \"wellformed_transaction T\"\n  shows \"dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_strand T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>) =\n         (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T)@transaction_selects T@transaction_checks T@\n          transaction_updates T@dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T)) \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (transaction_strand T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n      \\<delta>) =\n    dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T) @\n    transaction_selects T @\n    transaction_checks T @\n    transaction_updates T @\n    dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (transaction_send T) \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n    \\<delta>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (transaction_strand T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n      \\<delta>) =\n    dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T) @\n    transaction_selects T @\n    transaction_checks T @\n    transaction_updates T @\n    dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (transaction_send T) \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n    \\<delta>", "have \"dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_strand T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>) = dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_strand T) \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (transaction_strand T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n      \\<delta>) =\n    dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (transaction_strand T) \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n    \\<delta>", "using dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t_subst"], ["proof (prove)\nusing this:\n  dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n   (?S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t ?\\<delta>) =\n  dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n   ?S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n  ?\\<delta>\n\ngoal (1 subgoal):\n 1. dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (transaction_strand T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n      \\<delta>) =\n    dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (transaction_strand T) \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n    \\<delta>", "by metis"], ["proof (state)\nthis:\n  dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n   (transaction_strand T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>) =\n  dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n   (transaction_strand T) \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n  \\<delta>\n\ngoal (1 subgoal):\n 1. dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (transaction_strand T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n      \\<delta>) =\n    dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T) @\n    transaction_selects T @\n    transaction_checks T @\n    transaction_updates T @\n    dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (transaction_send T) \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n    \\<delta>", "thus ?thesis"], ["proof (prove)\nusing this:\n  dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n   (transaction_strand T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>) =\n  dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n   (transaction_strand T) \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n  \\<delta>\n\ngoal (1 subgoal):\n 1. dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (transaction_strand T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n      \\<delta>) =\n    dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T) @\n    transaction_selects T @\n    transaction_checks T @\n    transaction_updates T @\n    dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (transaction_send T) \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n    \\<delta>", "using dual_transaction_strand[OF assms]"], ["proof (prove)\nusing this:\n  dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n   (transaction_strand T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>) =\n  dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n   (transaction_strand T) \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n  \\<delta>\n  dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_strand T) =\n  dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T) @\n  transaction_selects T @\n  transaction_checks T @\n  transaction_updates T @\n  dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T)\n\ngoal (1 subgoal):\n 1. dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (transaction_strand T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n      \\<delta>) =\n    dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T) @\n    transaction_selects T @\n    transaction_checks T @\n    transaction_updates T @\n    dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (transaction_send T) \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n    \\<delta>", "by argo"], ["proof (state)\nthis:\n  dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n   (transaction_strand T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>) =\n  dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T) @\n  transaction_selects T @\n  transaction_checks T @\n  transaction_updates T @\n  dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n   (transaction_send T) \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n  \\<delta>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma dual_transaction_ik_is_transaction_send:\n  assumes \"wellformed_transaction T\"\n  shows \"ik\\<^sub>s\\<^sub>s\\<^sub>t (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_strand T))) = trms\\<^sub>s\\<^sub>s\\<^sub>t (unlabel (transaction_send T))\"\n    (is \"?A = ?B\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. ik\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_strand T)) =\n    trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. ik\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_strand T)) =\n    trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T)", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. ik\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_strand T)) =\n    trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T)", "fix t"], ["proof (state)\ngoal (1 subgoal):\n 1. ik\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_strand T)) =\n    trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T)", "assume \"t \\<in> ?A\""], ["proof (state)\nthis:\n  t \\<in> ik\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n           (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_strand T))\n\ngoal (1 subgoal):\n 1. ik\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_strand T)) =\n    trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T)", "hence \"receive\\<langle>t\\<rangle> \\<in> set (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_strand T)))\""], ["proof (prove)\nusing this:\n  t \\<in> ik\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n           (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_strand T))\n\ngoal (1 subgoal):\n 1. receive\\<langle>t\\<rangle>\n    \\<in> set (unlabel\n                (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                  (transaction_strand T)))", "by (simp add: ik\\<^sub>s\\<^sub>s\\<^sub>t_def)"], ["proof (state)\nthis:\n  receive\\<langle>t\\<rangle>\n  \\<in> set (unlabel\n              (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_strand T)))\n\ngoal (1 subgoal):\n 1. ik\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_strand T)) =\n    trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T)", "hence \"send\\<langle>t\\<rangle> \\<in> set (unlabel (transaction_strand T))\""], ["proof (prove)\nusing this:\n  receive\\<langle>t\\<rangle>\n  \\<in> set (unlabel\n              (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_strand T)))\n\ngoal (1 subgoal):\n 1. send\\<langle>t\\<rangle> \\<in> set (unlabel (transaction_strand T))", "using dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t_unlabel_steps_iff(1)"], ["proof (prove)\nusing this:\n  receive\\<langle>t\\<rangle>\n  \\<in> set (unlabel\n              (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_strand T)))\n  (send\\<langle>?t\\<rangle> \\<in> set (unlabel ?A)) =\n  (receive\\<langle>?t\\<rangle>\n   \\<in> set (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t ?A)))\n\ngoal (1 subgoal):\n 1. send\\<langle>t\\<rangle> \\<in> set (unlabel (transaction_strand T))", "by metis"], ["proof (state)\nthis:\n  send\\<langle>t\\<rangle> \\<in> set (unlabel (transaction_strand T))\n\ngoal (1 subgoal):\n 1. ik\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_strand T)) =\n    trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T)", "hence \"t \\<in> ?B\""], ["proof (prove)\nusing this:\n  send\\<langle>t\\<rangle> \\<in> set (unlabel (transaction_strand T))\n\ngoal (1 subgoal):\n 1. t \\<in> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T)", "using wellformed_transaction_strand_unlabel_memberD(8)[OF assms]"], ["proof (prove)\nusing this:\n  send\\<langle>t\\<rangle> \\<in> set (unlabel (transaction_strand T))\n  \\<lbrakk>?x \\<in> set (unlabel (transaction_strand T));\n   ?x = send\\<langle>?t\\<rangle>\\<rbrakk>\n  \\<Longrightarrow> ?x \\<in> set (unlabel (transaction_send T))\n\ngoal (1 subgoal):\n 1. t \\<in> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T)", "by force"], ["proof (state)\nthis:\n  t \\<in> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T)\n\ngoal (1 subgoal):\n 1. ik\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_strand T)) =\n    trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T)", "}"], ["proof (state)\nthis:\n  ?t2\n  \\<in> ik\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n         (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n           (transaction_strand T)) \\<Longrightarrow>\n  ?t2 \\<in> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T)\n\ngoal (1 subgoal):\n 1. ik\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_strand T)) =\n    trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T)", "moreover"], ["proof (state)\nthis:\n  ?t2\n  \\<in> ik\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n         (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n           (transaction_strand T)) \\<Longrightarrow>\n  ?t2 \\<in> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T)\n\ngoal (1 subgoal):\n 1. ik\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_strand T)) =\n    trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T)", "{"], ["proof (state)\nthis:\n  ?t2\n  \\<in> ik\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n         (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n           (transaction_strand T)) \\<Longrightarrow>\n  ?t2 \\<in> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T)\n\ngoal (1 subgoal):\n 1. ik\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_strand T)) =\n    trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T)", "fix t"], ["proof (state)\ngoal (1 subgoal):\n 1. ik\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_strand T)) =\n    trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T)", "assume \"t \\<in> ?B\""], ["proof (state)\nthis:\n  t \\<in> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T)\n\ngoal (1 subgoal):\n 1. ik\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_strand T)) =\n    trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T)", "hence \"send\\<langle>t\\<rangle> \\<in> set (unlabel (transaction_send T))\""], ["proof (prove)\nusing this:\n  t \\<in> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T)\n\ngoal (1 subgoal):\n 1. send\\<langle>t\\<rangle> \\<in> set (unlabel (transaction_send T))", "using wellformed_transaction_unlabel_cases(5)[OF assms]"], ["proof (prove)\nusing this:\n  t \\<in> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T)\n  ?x \\<in> set (unlabel (transaction_send T)) \\<Longrightarrow>\n  \\<exists>t. ?x = send\\<langle>t\\<rangle>\n\ngoal (1 subgoal):\n 1. send\\<langle>t\\<rangle> \\<in> set (unlabel (transaction_send T))", "by fastforce"], ["proof (state)\nthis:\n  send\\<langle>t\\<rangle> \\<in> set (unlabel (transaction_send T))\n\ngoal (1 subgoal):\n 1. ik\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_strand T)) =\n    trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T)", "hence \"receive\\<langle>t\\<rangle> \\<in> set (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T)))\""], ["proof (prove)\nusing this:\n  send\\<langle>t\\<rangle> \\<in> set (unlabel (transaction_send T))\n\ngoal (1 subgoal):\n 1. receive\\<langle>t\\<rangle>\n    \\<in> set (unlabel\n                (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T)))", "using dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t_unlabel_steps_iff(1)"], ["proof (prove)\nusing this:\n  send\\<langle>t\\<rangle> \\<in> set (unlabel (transaction_send T))\n  (send\\<langle>?t\\<rangle> \\<in> set (unlabel ?A)) =\n  (receive\\<langle>?t\\<rangle>\n   \\<in> set (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t ?A)))\n\ngoal (1 subgoal):\n 1. receive\\<langle>t\\<rangle>\n    \\<in> set (unlabel\n                (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T)))", "by metis"], ["proof (state)\nthis:\n  receive\\<langle>t\\<rangle>\n  \\<in> set (unlabel\n              (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T)))\n\ngoal (1 subgoal):\n 1. ik\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_strand T)) =\n    trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T)", "hence \"receive\\<langle>t\\<rangle> \\<in> set (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_strand T)))\""], ["proof (prove)\nusing this:\n  receive\\<langle>t\\<rangle>\n  \\<in> set (unlabel\n              (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T)))\n\ngoal (1 subgoal):\n 1. receive\\<langle>t\\<rangle>\n    \\<in> set (unlabel\n                (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                  (transaction_strand T)))", "using dual_unlabel_transaction_strand[OF assms]"], ["proof (prove)\nusing this:\n  receive\\<langle>t\\<rangle>\n  \\<in> set (unlabel\n              (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T)))\n  unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_strand T)) =\n  unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T)) @\n  unlabel (transaction_selects T) @\n  unlabel (transaction_checks T) @\n  unlabel (transaction_updates T) @\n  unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T))\n\ngoal (1 subgoal):\n 1. receive\\<langle>t\\<rangle>\n    \\<in> set (unlabel\n                (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                  (transaction_strand T)))", "by simp"], ["proof (state)\nthis:\n  receive\\<langle>t\\<rangle>\n  \\<in> set (unlabel\n              (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_strand T)))\n\ngoal (1 subgoal):\n 1. ik\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_strand T)) =\n    trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T)", "hence \"t \\<in> ?A\""], ["proof (prove)\nusing this:\n  receive\\<langle>t\\<rangle>\n  \\<in> set (unlabel\n              (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_strand T)))\n\ngoal (1 subgoal):\n 1. t \\<in> ik\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n             (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_strand T))", "by (simp add: ik\\<^sub>s\\<^sub>s\\<^sub>t_def)"], ["proof (state)\nthis:\n  t \\<in> ik\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n           (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_strand T))\n\ngoal (1 subgoal):\n 1. ik\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_strand T)) =\n    trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T)", "}"], ["proof (state)\nthis:\n  ?t2\n  \\<in> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n         (transaction_send T) \\<Longrightarrow>\n  ?t2\n  \\<in> ik\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n         (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_strand T))\n\ngoal (1 subgoal):\n 1. ik\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_strand T)) =\n    trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T)", "ultimately"], ["proof (chain)\npicking this:\n  ?t2\n  \\<in> ik\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n         (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n           (transaction_strand T)) \\<Longrightarrow>\n  ?t2 \\<in> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T)\n  ?t2\n  \\<in> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n         (transaction_send T) \\<Longrightarrow>\n  ?t2\n  \\<in> ik\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n         (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_strand T))", "show \"?A = ?B\""], ["proof (prove)\nusing this:\n  ?t2\n  \\<in> ik\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n         (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n           (transaction_strand T)) \\<Longrightarrow>\n  ?t2 \\<in> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T)\n  ?t2\n  \\<in> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n         (transaction_send T) \\<Longrightarrow>\n  ?t2\n  \\<in> ik\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n         (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_strand T))\n\ngoal (1 subgoal):\n 1. ik\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_strand T)) =\n    trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T)", "by auto"], ["proof (state)\nthis:\n  ik\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n   (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_strand T)) =\n  trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma dual_transaction_ik_is_transaction_send':\n  fixes \\<delta>::\"('a,'b,'c) prot_subst\"\n  assumes \"wellformed_transaction T\"\n  shows \"ik\\<^sub>s\\<^sub>s\\<^sub>t (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_strand T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>)))  =\n         trms\\<^sub>s\\<^sub>s\\<^sub>t (unlabel (transaction_send T)) \\<cdot>\\<^sub>s\\<^sub>e\\<^sub>t \\<delta>\" (is \"?A = ?B\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. ik\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n       (transaction_strand T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n        \\<delta>)) =\n    trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (transaction_send T) \\<cdot>\\<^sub>s\\<^sub>e\\<^sub>t\n    \\<delta>", "using dual_transaction_ik_is_transaction_send[OF assms]\n      subst_lsst_unlabel[of \"dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_strand T)\" \\<delta>]\n      ik\\<^sub>s\\<^sub>s\\<^sub>t_subst[of \"unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_strand T))\" \\<delta>]\n      dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t_subst[of \"transaction_strand T\" \\<delta>]"], ["proof (prove)\nusing this:\n  ik\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n   (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_strand T)) =\n  trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T)\n  unlabel\n   (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (transaction_strand T) \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n    \\<delta>) =\n  unlabel\n   (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (transaction_strand T)) \\<cdot>\\<^sub>s\\<^sub>s\\<^sub>t\n  \\<delta>\n  ik\\<^sub>s\\<^sub>s\\<^sub>t\n   (unlabel\n     (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n       (transaction_strand T)) \\<cdot>\\<^sub>s\\<^sub>s\\<^sub>t\n    \\<delta>) =\n  ik\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n   (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (transaction_strand T)) \\<cdot>\\<^sub>s\\<^sub>e\\<^sub>t\n  \\<delta>\n  dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n   (transaction_strand T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>) =\n  dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n   (transaction_strand T) \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n  \\<delta>\n\ngoal (1 subgoal):\n 1. ik\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n       (transaction_strand T \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n        \\<delta>)) =\n    trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (transaction_send T) \\<cdot>\\<^sub>s\\<^sub>e\\<^sub>t\n    \\<delta>", "by auto"], ["", "lemma db\\<^sub>s\\<^sub>s\\<^sub>t_transaction_prefix_eq:\n  assumes T: \"wellformed_transaction T\"\n    and S: \"prefix S (transaction_receive T@transaction_selects T@transaction_checks T)\"\n  shows \"db\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A = db\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (A@dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. db\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A =\n    db\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (A @\n      dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n       (S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. db\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A =\n    db\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (A @\n      dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n       (S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>))", "let ?T1 = \"transaction_receive T\""], ["proof (state)\ngoal (1 subgoal):\n 1. db\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A =\n    db\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (A @\n      dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n       (S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>))", "let ?T2 = \"transaction_selects T\""], ["proof (state)\ngoal (1 subgoal):\n 1. db\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A =\n    db\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (A @\n      dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n       (S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>))", "let ?T3 = \"transaction_checks T\""], ["proof (state)\ngoal (1 subgoal):\n 1. db\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A =\n    db\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (A @\n      dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n       (S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>))", "have *: \"prefix (unlabel S) (unlabel (?T1@?T2@?T3))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prefix (unlabel S)\n     (unlabel\n       (transaction_receive T @\n        transaction_selects T @ transaction_checks T))", "using S prefix_proj(1)"], ["proof (prove)\nusing this:\n  prefix S\n   (transaction_receive T @ transaction_selects T @ transaction_checks T)\n  prefix ?A ?B \\<Longrightarrow> prefix (unlabel ?A) (unlabel ?B)\n\ngoal (1 subgoal):\n 1. prefix (unlabel S)\n     (unlabel\n       (transaction_receive T @\n        transaction_selects T @ transaction_checks T))", "by blast"], ["proof (state)\nthis:\n  prefix (unlabel S)\n   (unlabel\n     (transaction_receive T @ transaction_selects T @ transaction_checks T))\n\ngoal (1 subgoal):\n 1. db\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A =\n    db\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (A @\n      dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n       (S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>))", "have \"list_all is_Receive (unlabel ?T1)\"\n       \"list_all is_Assignment (unlabel ?T2)\"\n       \"list_all is_Check (unlabel ?T3)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_all stateful_strand_step.is_Receive\n     (unlabel (transaction_receive T)) &&&\n    list_all is_Assignment (unlabel (transaction_selects T)) &&&\n    list_all is_Check (unlabel (transaction_checks T))", "using T"], ["proof (prove)\nusing this:\n  wellformed_transaction T\n\ngoal (1 subgoal):\n 1. list_all stateful_strand_step.is_Receive\n     (unlabel (transaction_receive T)) &&&\n    list_all is_Assignment (unlabel (transaction_selects T)) &&&\n    list_all is_Check (unlabel (transaction_checks T))", "by (simp_all add: wellformed_transaction_def)"], ["proof (state)\nthis:\n  list_all stateful_strand_step.is_Receive (unlabel (transaction_receive T))\n  list_all is_Assignment (unlabel (transaction_selects T))\n  list_all is_Check (unlabel (transaction_checks T))\n\ngoal (1 subgoal):\n 1. db\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A =\n    db\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (A @\n      dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n       (S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>))", "hence \"\\<forall>b \\<in> set (unlabel ?T1). \\<not>is_Insert b \\<and> \\<not>is_Delete b\"\n        \"\\<forall>b \\<in> set (unlabel ?T2). \\<not>is_Insert b \\<and> \\<not>is_Delete b\"\n        \"\\<forall>b \\<in> set (unlabel ?T3). \\<not>is_Insert b \\<and> \\<not>is_Delete b\""], ["proof (prove)\nusing this:\n  list_all stateful_strand_step.is_Receive (unlabel (transaction_receive T))\n  list_all is_Assignment (unlabel (transaction_selects T))\n  list_all is_Check (unlabel (transaction_checks T))\n\ngoal (1 subgoal):\n 1. \\<forall>b\\<in>set (unlabel (transaction_receive T)).\n       \\<not> is_Insert b \\<and> \\<not> is_Delete b &&&\n    \\<forall>b\\<in>set (unlabel (transaction_selects T)).\n       \\<not> is_Insert b \\<and> \\<not> is_Delete b &&&\n    \\<forall>b\\<in>set (unlabel (transaction_checks T)).\n       \\<not> is_Insert b \\<and> \\<not> is_Delete b", "by (metis (mono_tags, lifting) Ball_set stateful_strand_step.distinct_disc(16,18),\n        metis (mono_tags, lifting) Ball_set stateful_strand_step.distinct_disc(24,26,33,37),\n        metis (mono_tags, lifting) Ball_set stateful_strand_step.distinct_disc(24,26,33,35,37,39))"], ["proof (state)\nthis:\n  \\<forall>b\\<in>set (unlabel (transaction_receive T)).\n     \\<not> is_Insert b \\<and> \\<not> is_Delete b\n  \\<forall>b\\<in>set (unlabel (transaction_selects T)).\n     \\<not> is_Insert b \\<and> \\<not> is_Delete b\n  \\<forall>b\\<in>set (unlabel (transaction_checks T)).\n     \\<not> is_Insert b \\<and> \\<not> is_Delete b\n\ngoal (1 subgoal):\n 1. db\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A =\n    db\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (A @\n      dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n       (S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>))", "hence \"\\<forall>b \\<in> set (unlabel (?T1@?T2@?T3)). \\<not>is_Insert b \\<and> \\<not>is_Delete b\""], ["proof (prove)\nusing this:\n  \\<forall>b\\<in>set (unlabel (transaction_receive T)).\n     \\<not> is_Insert b \\<and> \\<not> is_Delete b\n  \\<forall>b\\<in>set (unlabel (transaction_selects T)).\n     \\<not> is_Insert b \\<and> \\<not> is_Delete b\n  \\<forall>b\\<in>set (unlabel (transaction_checks T)).\n     \\<not> is_Insert b \\<and> \\<not> is_Delete b\n\ngoal (1 subgoal):\n 1. \\<forall>b\\<in>set (unlabel\n                         (transaction_receive T @\n                          transaction_selects T @ transaction_checks T)).\n       \\<not> is_Insert b \\<and> \\<not> is_Delete b", "by (auto simp add: unlabel_def)"], ["proof (state)\nthis:\n  \\<forall>b\\<in>set (unlabel\n                       (transaction_receive T @\n                        transaction_selects T @ transaction_checks T)).\n     \\<not> is_Insert b \\<and> \\<not> is_Delete b\n\ngoal (1 subgoal):\n 1. db\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A =\n    db\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (A @\n      dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n       (S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>))", "hence \"\\<forall>b \\<in> set (unlabel S). \\<not>is_Insert b \\<and> \\<not>is_Delete b\""], ["proof (prove)\nusing this:\n  \\<forall>b\\<in>set (unlabel\n                       (transaction_receive T @\n                        transaction_selects T @ transaction_checks T)).\n     \\<not> is_Insert b \\<and> \\<not> is_Delete b\n\ngoal (1 subgoal):\n 1. \\<forall>b\\<in>set (unlabel S).\n       \\<not> is_Insert b \\<and> \\<not> is_Delete b", "using *"], ["proof (prove)\nusing this:\n  \\<forall>b\\<in>set (unlabel\n                       (transaction_receive T @\n                        transaction_selects T @ transaction_checks T)).\n     \\<not> is_Insert b \\<and> \\<not> is_Delete b\n  prefix (unlabel S)\n   (unlabel\n     (transaction_receive T @ transaction_selects T @ transaction_checks T))\n\ngoal (1 subgoal):\n 1. \\<forall>b\\<in>set (unlabel S).\n       \\<not> is_Insert b \\<and> \\<not> is_Delete b", "unfolding prefix_def"], ["proof (prove)\nusing this:\n  \\<forall>b\\<in>set (unlabel\n                       (transaction_receive T @\n                        transaction_selects T @ transaction_checks T)).\n     \\<not> is_Insert b \\<and> \\<not> is_Delete b\n  \\<exists>zs.\n     unlabel\n      (transaction_receive T @\n       transaction_selects T @ transaction_checks T) =\n     unlabel S @ zs\n\ngoal (1 subgoal):\n 1. \\<forall>b\\<in>set (unlabel S).\n       \\<not> is_Insert b \\<and> \\<not> is_Delete b", "by fastforce"], ["proof (state)\nthis:\n  \\<forall>b\\<in>set (unlabel S).\n     \\<not> is_Insert b \\<and> \\<not> is_Delete b\n\ngoal (1 subgoal):\n 1. db\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A =\n    db\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (A @\n      dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n       (S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>))", "hence \"\\<forall>b \\<in> set (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t S) \\<cdot>\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>). \\<not>is_Insert b \\<and> \\<not>is_Delete b\""], ["proof (prove)\nusing this:\n  \\<forall>b\\<in>set (unlabel S).\n     \\<not> is_Insert b \\<and> \\<not> is_Delete b\n\ngoal (1 subgoal):\n 1. \\<forall>b\\<in>set (unlabel\n                         (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                           S) \\<cdot>\\<^sub>s\\<^sub>s\\<^sub>t\n                        \\<delta>).\n       \\<not> is_Insert b \\<and> \\<not> is_Delete b", "proof (induction S)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<forall>b\\<in>set (unlabel []).\n       \\<not> is_Insert b \\<and> \\<not> is_Delete b \\<Longrightarrow>\n    \\<forall>b\\<in>set (unlabel\n                         (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                           []) \\<cdot>\\<^sub>s\\<^sub>s\\<^sub>t\n                        \\<delta>).\n       \\<not> is_Insert b \\<and> \\<not> is_Delete b\n 2. \\<And>a S.\n       \\<lbrakk>\\<forall>b\\<in>set (unlabel S).\n                   \\<not> is_Insert b \\<and>\n                   \\<not> is_Delete b \\<Longrightarrow>\n                \\<forall>b\\<in>set (unlabel\n                                     (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n S) \\<cdot>\\<^sub>s\\<^sub>s\\<^sub>t\n                                    \\<delta>).\n                   \\<not> is_Insert b \\<and> \\<not> is_Delete b;\n        \\<forall>b\\<in>set (unlabel (a # S)).\n           \\<not> is_Insert b \\<and> \\<not> is_Delete b\\<rbrakk>\n       \\<Longrightarrow> \\<forall>b\\<in>set\n   (unlabel\n     (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n       (a # S)) \\<cdot>\\<^sub>s\\<^sub>s\\<^sub>t\n    \\<delta>).\n                            \\<not> is_Insert b \\<and> \\<not> is_Delete b", "case (Cons a S)"], ["proof (state)\nthis:\n  \\<forall>b\\<in>set (unlabel S).\n     \\<not> is_Insert b \\<and> \\<not> is_Delete b \\<Longrightarrow>\n  \\<forall>b\\<in>set (unlabel\n                       (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                         S) \\<cdot>\\<^sub>s\\<^sub>s\\<^sub>t\n                      \\<delta>).\n     \\<not> is_Insert b \\<and> \\<not> is_Delete b\n  \\<forall>b\\<in>set (unlabel (a # S)).\n     \\<not> is_Insert b \\<and> \\<not> is_Delete b\n\ngoal (2 subgoals):\n 1. \\<forall>b\\<in>set (unlabel []).\n       \\<not> is_Insert b \\<and> \\<not> is_Delete b \\<Longrightarrow>\n    \\<forall>b\\<in>set (unlabel\n                         (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                           []) \\<cdot>\\<^sub>s\\<^sub>s\\<^sub>t\n                        \\<delta>).\n       \\<not> is_Insert b \\<and> \\<not> is_Delete b\n 2. \\<And>a S.\n       \\<lbrakk>\\<forall>b\\<in>set (unlabel S).\n                   \\<not> is_Insert b \\<and>\n                   \\<not> is_Delete b \\<Longrightarrow>\n                \\<forall>b\\<in>set (unlabel\n                                     (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n S) \\<cdot>\\<^sub>s\\<^sub>s\\<^sub>t\n                                    \\<delta>).\n                   \\<not> is_Insert b \\<and> \\<not> is_Delete b;\n        \\<forall>b\\<in>set (unlabel (a # S)).\n           \\<not> is_Insert b \\<and> \\<not> is_Delete b\\<rbrakk>\n       \\<Longrightarrow> \\<forall>b\\<in>set\n   (unlabel\n     (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n       (a # S)) \\<cdot>\\<^sub>s\\<^sub>s\\<^sub>t\n    \\<delta>).\n                            \\<not> is_Insert b \\<and> \\<not> is_Delete b", "then"], ["proof (chain)\npicking this:\n  \\<forall>b\\<in>set (unlabel S).\n     \\<not> is_Insert b \\<and> \\<not> is_Delete b \\<Longrightarrow>\n  \\<forall>b\\<in>set (unlabel\n                       (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                         S) \\<cdot>\\<^sub>s\\<^sub>s\\<^sub>t\n                      \\<delta>).\n     \\<not> is_Insert b \\<and> \\<not> is_Delete b\n  \\<forall>b\\<in>set (unlabel (a # S)).\n     \\<not> is_Insert b \\<and> \\<not> is_Delete b", "obtain l b where \"a = (l,b)\""], ["proof (prove)\nusing this:\n  \\<forall>b\\<in>set (unlabel S).\n     \\<not> is_Insert b \\<and> \\<not> is_Delete b \\<Longrightarrow>\n  \\<forall>b\\<in>set (unlabel\n                       (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                         S) \\<cdot>\\<^sub>s\\<^sub>s\\<^sub>t\n                      \\<delta>).\n     \\<not> is_Insert b \\<and> \\<not> is_Delete b\n  \\<forall>b\\<in>set (unlabel (a # S)).\n     \\<not> is_Insert b \\<and> \\<not> is_Delete b\n\ngoal (1 subgoal):\n 1. (\\<And>l b. a = (l, b) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis surj_pair)"], ["proof (state)\nthis:\n  a = (l, b)\n\ngoal (2 subgoals):\n 1. \\<forall>b\\<in>set (unlabel []).\n       \\<not> is_Insert b \\<and> \\<not> is_Delete b \\<Longrightarrow>\n    \\<forall>b\\<in>set (unlabel\n                         (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                           []) \\<cdot>\\<^sub>s\\<^sub>s\\<^sub>t\n                        \\<delta>).\n       \\<not> is_Insert b \\<and> \\<not> is_Delete b\n 2. \\<And>a S.\n       \\<lbrakk>\\<forall>b\\<in>set (unlabel S).\n                   \\<not> is_Insert b \\<and>\n                   \\<not> is_Delete b \\<Longrightarrow>\n                \\<forall>b\\<in>set (unlabel\n                                     (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n S) \\<cdot>\\<^sub>s\\<^sub>s\\<^sub>t\n                                    \\<delta>).\n                   \\<not> is_Insert b \\<and> \\<not> is_Delete b;\n        \\<forall>b\\<in>set (unlabel (a # S)).\n           \\<not> is_Insert b \\<and> \\<not> is_Delete b\\<rbrakk>\n       \\<Longrightarrow> \\<forall>b\\<in>set\n   (unlabel\n     (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n       (a # S)) \\<cdot>\\<^sub>s\\<^sub>s\\<^sub>t\n    \\<delta>).\n                            \\<not> is_Insert b \\<and> \\<not> is_Delete b", "thus ?case"], ["proof (prove)\nusing this:\n  a = (l, b)\n\ngoal (1 subgoal):\n 1. \\<forall>b\\<in>set (unlabel\n                         (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                           (a # S)) \\<cdot>\\<^sub>s\\<^sub>s\\<^sub>t\n                        \\<delta>).\n       \\<not> is_Insert b \\<and> \\<not> is_Delete b", "using Cons"], ["proof (prove)\nusing this:\n  a = (l, b)\n  \\<forall>b\\<in>set (unlabel S).\n     \\<not> is_Insert b \\<and> \\<not> is_Delete b \\<Longrightarrow>\n  \\<forall>b\\<in>set (unlabel\n                       (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                         S) \\<cdot>\\<^sub>s\\<^sub>s\\<^sub>t\n                      \\<delta>).\n     \\<not> is_Insert b \\<and> \\<not> is_Delete b\n  \\<forall>b\\<in>set (unlabel (a # S)).\n     \\<not> is_Insert b \\<and> \\<not> is_Delete b\n\ngoal (1 subgoal):\n 1. \\<forall>b\\<in>set (unlabel\n                         (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                           (a # S)) \\<cdot>\\<^sub>s\\<^sub>s\\<^sub>t\n                        \\<delta>).\n       \\<not> is_Insert b \\<and> \\<not> is_Delete b", "unfolding dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t_def unlabel_def subst_apply_stateful_strand_def"], ["proof (prove)\nusing this:\n  a = (l, b)\n  \\<forall>b\\<in>set (map snd S).\n     \\<not> is_Insert b \\<and> \\<not> is_Delete b \\<Longrightarrow>\n  \\<forall>b\\<in>set (map (\\<lambda>x.\n                              x \\<cdot>\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n                              \\<delta>)\n                       (map snd\n                         (map dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n                           S))).\n     \\<not> is_Insert b \\<and> \\<not> is_Delete b\n  \\<forall>b\\<in>set (map snd (a # S)).\n     \\<not> is_Insert b \\<and> \\<not> is_Delete b\n\ngoal (1 subgoal):\n 1. \\<forall>b\\<in>set (map (\\<lambda>x.\n                                x \\<cdot>\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n                                \\<delta>)\n                         (map snd\n                           (map dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p\n                             (a # S)))).\n       \\<not> is_Insert b \\<and> \\<not> is_Delete b", "by (cases b) auto"], ["proof (state)\nthis:\n  \\<forall>b\\<in>set (unlabel\n                       (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                         (a # S)) \\<cdot>\\<^sub>s\\<^sub>s\\<^sub>t\n                      \\<delta>).\n     \\<not> is_Insert b \\<and> \\<not> is_Delete b\n\ngoal (1 subgoal):\n 1. \\<forall>b\\<in>set (unlabel []).\n       \\<not> is_Insert b \\<and> \\<not> is_Delete b \\<Longrightarrow>\n    \\<forall>b\\<in>set (unlabel\n                         (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                           []) \\<cdot>\\<^sub>s\\<^sub>s\\<^sub>t\n                        \\<delta>).\n       \\<not> is_Insert b \\<and> \\<not> is_Delete b", "qed simp"], ["proof (state)\nthis:\n  \\<forall>b\\<in>set (unlabel\n                       (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                         S) \\<cdot>\\<^sub>s\\<^sub>s\\<^sub>t\n                      \\<delta>).\n     \\<not> is_Insert b \\<and> \\<not> is_Delete b\n\ngoal (1 subgoal):\n 1. db\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A =\n    db\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (A @\n      dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n       (S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>))", "hence **: \"\\<forall>b \\<in> set (unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>))). \\<not>is_Insert b \\<and> \\<not>is_Delete b\""], ["proof (prove)\nusing this:\n  \\<forall>b\\<in>set (unlabel\n                       (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                         S) \\<cdot>\\<^sub>s\\<^sub>s\\<^sub>t\n                      \\<delta>).\n     \\<not> is_Insert b \\<and> \\<not> is_Delete b\n\ngoal (1 subgoal):\n 1. \\<forall>b\\<in>set (unlabel\n                         (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                           (S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                            \\<delta>))).\n       \\<not> is_Insert b \\<and> \\<not> is_Delete b", "by (metis dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t_subst_unlabel)"], ["proof (state)\nthis:\n  \\<forall>b\\<in>set (unlabel\n                       (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                         (S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                          \\<delta>))).\n     \\<not> is_Insert b \\<and> \\<not> is_Delete b\n\ngoal (1 subgoal):\n 1. db\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A =\n    db\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (A @\n      dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n       (S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. db\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A =\n    db\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (A @\n      dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n       (S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>))", "using db\\<^sub>s\\<^sub>s\\<^sub>t_no_upd_append[OF **] unlabel_append"], ["proof (prove)\nusing this:\n  db'\\<^sub>s\\<^sub>s\\<^sub>t ?A =\n  db'\\<^sub>s\\<^sub>s\\<^sub>t\n   (?A @\n    unlabel\n     (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n       (S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>)))\n  unlabel (?A @ ?B) = unlabel ?A @ unlabel ?B\n\ngoal (1 subgoal):\n 1. db\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A =\n    db\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (A @\n      dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n       (S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>))", "unfolding db\\<^sub>s\\<^sub>s\\<^sub>t_def"], ["proof (prove)\nusing this:\n  db'\\<^sub>s\\<^sub>s\\<^sub>t ?A =\n  db'\\<^sub>s\\<^sub>s\\<^sub>t\n   (?A @\n    unlabel\n     (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n       (S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>)))\n  unlabel (?A @ ?B) = unlabel ?A @ unlabel ?B\n\ngoal (1 subgoal):\n 1. (\\<lambda>I. db'\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A I []) =\n    (\\<lambda>I.\n        db'\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n         (A @\n          dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n           (S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>))\n         I [])", "by metis"], ["proof (state)\nthis:\n  db\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A =\n  db\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n   (A @\n    dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (S \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<delta>))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma db\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t_dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t_set_ex:\n   assumes \"d \\<in> set (db'\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>) \\<I> D)\"\n    \"\\<forall>t u. insert\\<langle>t,u\\<rangle> \\<in> set (unlabel A) \\<longrightarrow> (\\<exists>s. u = Fun (Set s) [])\"\n    \"\\<forall>t u. delete\\<langle>t,u\\<rangle> \\<in> set (unlabel A) \\<longrightarrow> (\\<exists>s. u = Fun (Set s) [])\"\n    \"\\<forall>d \\<in> set D. \\<exists>s. snd d = Fun (Set s) []\"\n  shows \"\\<exists>s. snd d = Fun (Set s) []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s. snd d = Fun (Set s) []", "using assms"], ["proof (prove)\nusing this:\n  d \\<in> set (db'\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                  A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                 \\<theta>)\n                \\<I> D)\n  \\<forall>t u.\n     insert\\<langle>t,u\\<rangle> \\<in> set (unlabel A) \\<longrightarrow>\n     (\\<exists>s. u = Fun (Set s) [])\n  \\<forall>t u.\n     delete\\<langle>t,u\\<rangle> \\<in> set (unlabel A) \\<longrightarrow>\n     (\\<exists>s. u = Fun (Set s) [])\n  \\<forall>d\\<in>set D. \\<exists>s. snd d = Fun (Set s) []\n\ngoal (1 subgoal):\n 1. \\<exists>s. snd d = Fun (Set s) []", "proof (induction A arbitrary: D)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>D.\n       \\<lbrakk>d \\<in> set (db'\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                              (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                                [] \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                               \\<theta>)\n                              \\<I> D);\n        \\<forall>t u.\n           insert\\<langle>t,u\\<rangle>\n           \\<in> set (unlabel []) \\<longrightarrow>\n           (\\<exists>s. u = Fun (Set s) []);\n        \\<forall>t u.\n           delete\\<langle>t,u\\<rangle>\n           \\<in> set (unlabel []) \\<longrightarrow>\n           (\\<exists>s. u = Fun (Set s) []);\n        \\<forall>d\\<in>set D. \\<exists>s. snd d = Fun (Set s) []\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s. snd d = Fun (Set s) []\n 2. \\<And>a A D.\n       \\<lbrakk>\\<And>D.\n                   \\<lbrakk>d \\<in> set (db'\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n    (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n      A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     \\<theta>)\n    \\<I> D);\n                    \\<forall>t u.\n                       insert\\<langle>t,u\\<rangle>\n                       \\<in> set (unlabel A) \\<longrightarrow>\n                       (\\<exists>s. u = Fun (Set s) []);\n                    \\<forall>t u.\n                       delete\\<langle>t,u\\<rangle>\n                       \\<in> set (unlabel A) \\<longrightarrow>\n                       (\\<exists>s. u = Fun (Set s) []);\n                    \\<forall>d\\<in>set D.\n                       \\<exists>s. snd d = Fun (Set s) []\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>s. snd d = Fun (Set s) [];\n        d \\<in> set (db'\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                      (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                        (a # A) \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                       \\<theta>)\n                      \\<I> D);\n        \\<forall>t u.\n           insert\\<langle>t,u\\<rangle>\n           \\<in> set (unlabel (a # A)) \\<longrightarrow>\n           (\\<exists>s. u = Fun (Set s) []);\n        \\<forall>t u.\n           delete\\<langle>t,u\\<rangle>\n           \\<in> set (unlabel (a # A)) \\<longrightarrow>\n           (\\<exists>s. u = Fun (Set s) []);\n        \\<forall>d\\<in>set D. \\<exists>s. snd d = Fun (Set s) []\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s. snd d = Fun (Set s) []", "case (Cons a A)"], ["proof (state)\nthis:\n  \\<lbrakk>d \\<in> set (db'\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                         (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                           A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                          \\<theta>)\n                         \\<I> ?D);\n   \\<forall>t u.\n      insert\\<langle>t,u\\<rangle> \\<in> set (unlabel A) \\<longrightarrow>\n      (\\<exists>s. u = Fun (Set s) []);\n   \\<forall>t u.\n      delete\\<langle>t,u\\<rangle> \\<in> set (unlabel A) \\<longrightarrow>\n      (\\<exists>s. u = Fun (Set s) []);\n   \\<forall>d\\<in>set ?D. \\<exists>s. snd d = Fun (Set s) []\\<rbrakk>\n  \\<Longrightarrow> \\<exists>s. snd d = Fun (Set s) []\n  d \\<in> set (db'\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                  (a # A) \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                 \\<theta>)\n                \\<I> D)\n  \\<forall>t u.\n     insert\\<langle>t,u\\<rangle>\n     \\<in> set (unlabel (a # A)) \\<longrightarrow>\n     (\\<exists>s. u = Fun (Set s) [])\n  \\<forall>t u.\n     delete\\<langle>t,u\\<rangle>\n     \\<in> set (unlabel (a # A)) \\<longrightarrow>\n     (\\<exists>s. u = Fun (Set s) [])\n  \\<forall>d\\<in>set D. \\<exists>s. snd d = Fun (Set s) []\n\ngoal (2 subgoals):\n 1. \\<And>D.\n       \\<lbrakk>d \\<in> set (db'\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                              (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                                [] \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                               \\<theta>)\n                              \\<I> D);\n        \\<forall>t u.\n           insert\\<langle>t,u\\<rangle>\n           \\<in> set (unlabel []) \\<longrightarrow>\n           (\\<exists>s. u = Fun (Set s) []);\n        \\<forall>t u.\n           delete\\<langle>t,u\\<rangle>\n           \\<in> set (unlabel []) \\<longrightarrow>\n           (\\<exists>s. u = Fun (Set s) []);\n        \\<forall>d\\<in>set D. \\<exists>s. snd d = Fun (Set s) []\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s. snd d = Fun (Set s) []\n 2. \\<And>a A D.\n       \\<lbrakk>\\<And>D.\n                   \\<lbrakk>d \\<in> set (db'\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n    (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n      A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     \\<theta>)\n    \\<I> D);\n                    \\<forall>t u.\n                       insert\\<langle>t,u\\<rangle>\n                       \\<in> set (unlabel A) \\<longrightarrow>\n                       (\\<exists>s. u = Fun (Set s) []);\n                    \\<forall>t u.\n                       delete\\<langle>t,u\\<rangle>\n                       \\<in> set (unlabel A) \\<longrightarrow>\n                       (\\<exists>s. u = Fun (Set s) []);\n                    \\<forall>d\\<in>set D.\n                       \\<exists>s. snd d = Fun (Set s) []\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>s. snd d = Fun (Set s) [];\n        d \\<in> set (db'\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                      (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                        (a # A) \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                       \\<theta>)\n                      \\<I> D);\n        \\<forall>t u.\n           insert\\<langle>t,u\\<rangle>\n           \\<in> set (unlabel (a # A)) \\<longrightarrow>\n           (\\<exists>s. u = Fun (Set s) []);\n        \\<forall>t u.\n           delete\\<langle>t,u\\<rangle>\n           \\<in> set (unlabel (a # A)) \\<longrightarrow>\n           (\\<exists>s. u = Fun (Set s) []);\n        \\<forall>d\\<in>set D. \\<exists>s. snd d = Fun (Set s) []\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s. snd d = Fun (Set s) []", "obtain l b where a: \"a = (l,b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>l b. a = (l, b) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis surj_pair)"], ["proof (state)\nthis:\n  a = (l, b)\n\ngoal (2 subgoals):\n 1. \\<And>D.\n       \\<lbrakk>d \\<in> set (db'\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                              (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                                [] \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                               \\<theta>)\n                              \\<I> D);\n        \\<forall>t u.\n           insert\\<langle>t,u\\<rangle>\n           \\<in> set (unlabel []) \\<longrightarrow>\n           (\\<exists>s. u = Fun (Set s) []);\n        \\<forall>t u.\n           delete\\<langle>t,u\\<rangle>\n           \\<in> set (unlabel []) \\<longrightarrow>\n           (\\<exists>s. u = Fun (Set s) []);\n        \\<forall>d\\<in>set D. \\<exists>s. snd d = Fun (Set s) []\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s. snd d = Fun (Set s) []\n 2. \\<And>a A D.\n       \\<lbrakk>\\<And>D.\n                   \\<lbrakk>d \\<in> set (db'\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n    (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n      A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     \\<theta>)\n    \\<I> D);\n                    \\<forall>t u.\n                       insert\\<langle>t,u\\<rangle>\n                       \\<in> set (unlabel A) \\<longrightarrow>\n                       (\\<exists>s. u = Fun (Set s) []);\n                    \\<forall>t u.\n                       delete\\<langle>t,u\\<rangle>\n                       \\<in> set (unlabel A) \\<longrightarrow>\n                       (\\<exists>s. u = Fun (Set s) []);\n                    \\<forall>d\\<in>set D.\n                       \\<exists>s. snd d = Fun (Set s) []\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>s. snd d = Fun (Set s) [];\n        d \\<in> set (db'\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                      (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                        (a # A) \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                       \\<theta>)\n                      \\<I> D);\n        \\<forall>t u.\n           insert\\<langle>t,u\\<rangle>\n           \\<in> set (unlabel (a # A)) \\<longrightarrow>\n           (\\<exists>s. u = Fun (Set s) []);\n        \\<forall>t u.\n           delete\\<langle>t,u\\<rangle>\n           \\<in> set (unlabel (a # A)) \\<longrightarrow>\n           (\\<exists>s. u = Fun (Set s) []);\n        \\<forall>d\\<in>set D. \\<exists>s. snd d = Fun (Set s) []\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s. snd d = Fun (Set s) []", "have 1: \"unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a#A) \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>) = receive\\<langle>t \\<cdot> \\<theta>\\<rangle>#unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>)\"\n    when \"b = send\\<langle>t\\<rangle>\" for t"], ["proof (prove)\ngoal (1 subgoal):\n 1. unlabel\n     (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n       (a # A) \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n      \\<theta>) =\n    receive\\<langle>t \\<cdot> \\<theta>\\<rangle> #\n    unlabel\n     (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n       A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n      \\<theta>)", "by (simp add: a that subst_lsst_unlabel_cons)"], ["proof (state)\nthis:\n  b = send\\<langle>?t\\<rangle> \\<Longrightarrow>\n  unlabel\n   (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (a # A) \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n    \\<theta>) =\n  receive\\<langle>?t \\<cdot> \\<theta>\\<rangle> #\n  unlabel\n   (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n    \\<theta>)\n\ngoal (2 subgoals):\n 1. \\<And>D.\n       \\<lbrakk>d \\<in> set (db'\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                              (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                                [] \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                               \\<theta>)\n                              \\<I> D);\n        \\<forall>t u.\n           insert\\<langle>t,u\\<rangle>\n           \\<in> set (unlabel []) \\<longrightarrow>\n           (\\<exists>s. u = Fun (Set s) []);\n        \\<forall>t u.\n           delete\\<langle>t,u\\<rangle>\n           \\<in> set (unlabel []) \\<longrightarrow>\n           (\\<exists>s. u = Fun (Set s) []);\n        \\<forall>d\\<in>set D. \\<exists>s. snd d = Fun (Set s) []\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s. snd d = Fun (Set s) []\n 2. \\<And>a A D.\n       \\<lbrakk>\\<And>D.\n                   \\<lbrakk>d \\<in> set (db'\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n    (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n      A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     \\<theta>)\n    \\<I> D);\n                    \\<forall>t u.\n                       insert\\<langle>t,u\\<rangle>\n                       \\<in> set (unlabel A) \\<longrightarrow>\n                       (\\<exists>s. u = Fun (Set s) []);\n                    \\<forall>t u.\n                       delete\\<langle>t,u\\<rangle>\n                       \\<in> set (unlabel A) \\<longrightarrow>\n                       (\\<exists>s. u = Fun (Set s) []);\n                    \\<forall>d\\<in>set D.\n                       \\<exists>s. snd d = Fun (Set s) []\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>s. snd d = Fun (Set s) [];\n        d \\<in> set (db'\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                      (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                        (a # A) \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                       \\<theta>)\n                      \\<I> D);\n        \\<forall>t u.\n           insert\\<langle>t,u\\<rangle>\n           \\<in> set (unlabel (a # A)) \\<longrightarrow>\n           (\\<exists>s. u = Fun (Set s) []);\n        \\<forall>t u.\n           delete\\<langle>t,u\\<rangle>\n           \\<in> set (unlabel (a # A)) \\<longrightarrow>\n           (\\<exists>s. u = Fun (Set s) []);\n        \\<forall>d\\<in>set D. \\<exists>s. snd d = Fun (Set s) []\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s. snd d = Fun (Set s) []", "have 2: \"unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a#A) \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>) = send\\<langle>t \\<cdot> \\<theta>\\<rangle>#unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>)\"\n    when \"b = receive\\<langle>t\\<rangle>\" for t"], ["proof (prove)\ngoal (1 subgoal):\n 1. unlabel\n     (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n       (a # A) \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n      \\<theta>) =\n    send\\<langle>t \\<cdot> \\<theta>\\<rangle> #\n    unlabel\n     (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n       A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n      \\<theta>)", "by (simp add: a that subst_lsst_unlabel_cons)"], ["proof (state)\nthis:\n  b = receive\\<langle>?t\\<rangle> \\<Longrightarrow>\n  unlabel\n   (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (a # A) \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n    \\<theta>) =\n  send\\<langle>?t \\<cdot> \\<theta>\\<rangle> #\n  unlabel\n   (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n    \\<theta>)\n\ngoal (2 subgoals):\n 1. \\<And>D.\n       \\<lbrakk>d \\<in> set (db'\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                              (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                                [] \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                               \\<theta>)\n                              \\<I> D);\n        \\<forall>t u.\n           insert\\<langle>t,u\\<rangle>\n           \\<in> set (unlabel []) \\<longrightarrow>\n           (\\<exists>s. u = Fun (Set s) []);\n        \\<forall>t u.\n           delete\\<langle>t,u\\<rangle>\n           \\<in> set (unlabel []) \\<longrightarrow>\n           (\\<exists>s. u = Fun (Set s) []);\n        \\<forall>d\\<in>set D. \\<exists>s. snd d = Fun (Set s) []\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s. snd d = Fun (Set s) []\n 2. \\<And>a A D.\n       \\<lbrakk>\\<And>D.\n                   \\<lbrakk>d \\<in> set (db'\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n    (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n      A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     \\<theta>)\n    \\<I> D);\n                    \\<forall>t u.\n                       insert\\<langle>t,u\\<rangle>\n                       \\<in> set (unlabel A) \\<longrightarrow>\n                       (\\<exists>s. u = Fun (Set s) []);\n                    \\<forall>t u.\n                       delete\\<langle>t,u\\<rangle>\n                       \\<in> set (unlabel A) \\<longrightarrow>\n                       (\\<exists>s. u = Fun (Set s) []);\n                    \\<forall>d\\<in>set D.\n                       \\<exists>s. snd d = Fun (Set s) []\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>s. snd d = Fun (Set s) [];\n        d \\<in> set (db'\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                      (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                        (a # A) \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                       \\<theta>)\n                      \\<I> D);\n        \\<forall>t u.\n           insert\\<langle>t,u\\<rangle>\n           \\<in> set (unlabel (a # A)) \\<longrightarrow>\n           (\\<exists>s. u = Fun (Set s) []);\n        \\<forall>t u.\n           delete\\<langle>t,u\\<rangle>\n           \\<in> set (unlabel (a # A)) \\<longrightarrow>\n           (\\<exists>s. u = Fun (Set s) []);\n        \\<forall>d\\<in>set D. \\<exists>s. snd d = Fun (Set s) []\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s. snd d = Fun (Set s) []", "have 3: \"unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (a#A) \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>) = (b \\<cdot>\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<theta>)#unlabel (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t \\<theta>)\"\n    when \"\\<nexists>t. b = send\\<langle>t\\<rangle> \\<or> b = receive\\<langle>t\\<rangle>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. unlabel\n     (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n       (a # A) \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n      \\<theta>) =\n    (b \\<cdot>\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<theta>) #\n    unlabel\n     (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n       A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n      \\<theta>)", "using a that dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t_Cons subst_lsst_unlabel_cons[of l b]"], ["proof (prove)\nusing this:\n  a = (l, b)\n  \\<nexists>t.\n     b = send\\<langle>t\\<rangle> \\<or> b = receive\\<langle>t\\<rangle>\n  dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n   ((?l, send\\<langle>?t\\<rangle>) # ?A) =\n  (?l, receive\\<langle>?t\\<rangle>) #\n  dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t ?A\n  dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n   ((?l, receive\\<langle>?t\\<rangle>) # ?A) =\n  (?l, send\\<langle>?t\\<rangle>) # dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t ?A\n  dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n   ((?l, \\<langle>?a: ?t \\<doteq> ?s\\<rangle>) # ?A) =\n  (?l, \\<langle>?a: ?t \\<doteq> ?s\\<rangle>) #\n  dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t ?A\n  dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n   ((?l, insert\\<langle>?t,?s\\<rangle>) # ?A) =\n  (?l, insert\\<langle>?t,?s\\<rangle>) #\n  dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t ?A\n  dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n   ((?l, delete\\<langle>?t,?s\\<rangle>) # ?A) =\n  (?l, delete\\<langle>?t,?s\\<rangle>) #\n  dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t ?A\n  dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n   ((?l, \\<langle>?a: ?t \\<in> ?s\\<rangle>) # ?A) =\n  (?l, \\<langle>?a: ?t \\<in> ?s\\<rangle>) #\n  dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t ?A\n  dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n   ((?l, \\<forall>?X\\<langle>\\<or>\\<noteq>: ?F \\<or>\\<notin>: ?G\\<rangle>) #\n    ?A) =\n  (?l, \\<forall>?X\\<langle>\\<or>\\<noteq>: ?F \\<or>\\<notin>: ?G\\<rangle>) #\n  dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t ?A\n  unlabel ((l, b) # ?A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t ?\\<theta>) =\n  (b \\<cdot>\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p ?\\<theta>) #\n  unlabel (?A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t ?\\<theta>)\n\ngoal (1 subgoal):\n 1. unlabel\n     (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n       (a # A) \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n      \\<theta>) =\n    (b \\<cdot>\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<theta>) #\n    unlabel\n     (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n       A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n      \\<theta>)", "by (cases b) auto"], ["proof (state)\nthis:\n  \\<nexists>t.\n     b = send\\<langle>t\\<rangle> \\<or>\n     b = receive\\<langle>t\\<rangle> \\<Longrightarrow>\n  unlabel\n   (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (a # A) \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n    \\<theta>) =\n  (b \\<cdot>\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<theta>) #\n  unlabel\n   (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n    \\<theta>)\n\ngoal (2 subgoals):\n 1. \\<And>D.\n       \\<lbrakk>d \\<in> set (db'\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                              (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                                [] \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                               \\<theta>)\n                              \\<I> D);\n        \\<forall>t u.\n           insert\\<langle>t,u\\<rangle>\n           \\<in> set (unlabel []) \\<longrightarrow>\n           (\\<exists>s. u = Fun (Set s) []);\n        \\<forall>t u.\n           delete\\<langle>t,u\\<rangle>\n           \\<in> set (unlabel []) \\<longrightarrow>\n           (\\<exists>s. u = Fun (Set s) []);\n        \\<forall>d\\<in>set D. \\<exists>s. snd d = Fun (Set s) []\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s. snd d = Fun (Set s) []\n 2. \\<And>a A D.\n       \\<lbrakk>\\<And>D.\n                   \\<lbrakk>d \\<in> set (db'\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n    (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n      A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     \\<theta>)\n    \\<I> D);\n                    \\<forall>t u.\n                       insert\\<langle>t,u\\<rangle>\n                       \\<in> set (unlabel A) \\<longrightarrow>\n                       (\\<exists>s. u = Fun (Set s) []);\n                    \\<forall>t u.\n                       delete\\<langle>t,u\\<rangle>\n                       \\<in> set (unlabel A) \\<longrightarrow>\n                       (\\<exists>s. u = Fun (Set s) []);\n                    \\<forall>d\\<in>set D.\n                       \\<exists>s. snd d = Fun (Set s) []\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>s. snd d = Fun (Set s) [];\n        d \\<in> set (db'\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                      (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                        (a # A) \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                       \\<theta>)\n                      \\<I> D);\n        \\<forall>t u.\n           insert\\<langle>t,u\\<rangle>\n           \\<in> set (unlabel (a # A)) \\<longrightarrow>\n           (\\<exists>s. u = Fun (Set s) []);\n        \\<forall>t u.\n           delete\\<langle>t,u\\<rangle>\n           \\<in> set (unlabel (a # A)) \\<longrightarrow>\n           (\\<exists>s. u = Fun (Set s) []);\n        \\<forall>d\\<in>set D. \\<exists>s. snd d = Fun (Set s) []\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s. snd d = Fun (Set s) []", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s. snd d = Fun (Set s) []", "using 1 2 3 a Cons"], ["proof (prove)\nusing this:\n  b = send\\<langle>?t\\<rangle> \\<Longrightarrow>\n  unlabel\n   (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (a # A) \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n    \\<theta>) =\n  receive\\<langle>?t \\<cdot> \\<theta>\\<rangle> #\n  unlabel\n   (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n    \\<theta>)\n  b = receive\\<langle>?t\\<rangle> \\<Longrightarrow>\n  unlabel\n   (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (a # A) \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n    \\<theta>) =\n  send\\<langle>?t \\<cdot> \\<theta>\\<rangle> #\n  unlabel\n   (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n    \\<theta>)\n  \\<nexists>t.\n     b = send\\<langle>t\\<rangle> \\<or>\n     b = receive\\<langle>t\\<rangle> \\<Longrightarrow>\n  unlabel\n   (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (a # A) \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n    \\<theta>) =\n  (b \\<cdot>\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p \\<theta>) #\n  unlabel\n   (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n    \\<theta>)\n  a = (l, b)\n  \\<lbrakk>d \\<in> set (db'\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                         (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                           A \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                          \\<theta>)\n                         \\<I> ?D);\n   \\<forall>t u.\n      insert\\<langle>t,u\\<rangle> \\<in> set (unlabel A) \\<longrightarrow>\n      (\\<exists>s. u = Fun (Set s) []);\n   \\<forall>t u.\n      delete\\<langle>t,u\\<rangle> \\<in> set (unlabel A) \\<longrightarrow>\n      (\\<exists>s. u = Fun (Set s) []);\n   \\<forall>d\\<in>set ?D. \\<exists>s. snd d = Fun (Set s) []\\<rbrakk>\n  \\<Longrightarrow> \\<exists>s. snd d = Fun (Set s) []\n  d \\<in> set (db'\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                  (a # A) \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                 \\<theta>)\n                \\<I> D)\n  \\<forall>t u.\n     insert\\<langle>t,u\\<rangle>\n     \\<in> set (unlabel (a # A)) \\<longrightarrow>\n     (\\<exists>s. u = Fun (Set s) [])\n  \\<forall>t u.\n     delete\\<langle>t,u\\<rangle>\n     \\<in> set (unlabel (a # A)) \\<longrightarrow>\n     (\\<exists>s. u = Fun (Set s) [])\n  \\<forall>d\\<in>set D. \\<exists>s. snd d = Fun (Set s) []\n\ngoal (1 subgoal):\n 1. \\<exists>s. snd d = Fun (Set s) []", "by (cases b) fastforce+"], ["proof (state)\nthis:\n  \\<exists>s. snd d = Fun (Set s) []\n\ngoal (1 subgoal):\n 1. \\<And>D.\n       \\<lbrakk>d \\<in> set (db'\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                              (dual\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                                [] \\<cdot>\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                               \\<theta>)\n                              \\<I> D);\n        \\<forall>t u.\n           insert\\<langle>t,u\\<rangle>\n           \\<in> set (unlabel []) \\<longrightarrow>\n           (\\<exists>s. u = Fun (Set s) []);\n        \\<forall>t u.\n           delete\\<langle>t,u\\<rangle>\n           \\<in> set (unlabel []) \\<longrightarrow>\n           (\\<exists>s. u = Fun (Set s) []);\n        \\<forall>d\\<in>set D. \\<exists>s. snd d = Fun (Set s) []\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s. snd d = Fun (Set s) []", "qed simp"], ["", "lemma is_Fun_SetE[elim]:\n  assumes t: \"is_Fun_Set t\"\n  obtains s where \"t = Fun (Set s) []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>s. t = Fun (Set s) [] \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof (cases t)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<And>s. t = Fun (Set s) [] \\<Longrightarrow> thesis;\n        t = Var x1\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>x21 x22.\n       \\<lbrakk>\\<And>s. t = Fun (Set s) [] \\<Longrightarrow> thesis;\n        t = Fun x21 x22\\<rbrakk>\n       \\<Longrightarrow> thesis", "case (Fun f T)"], ["proof (state)\nthis:\n  t = Fun f T\n\ngoal (2 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<And>s. t = Fun (Set s) [] \\<Longrightarrow> thesis;\n        t = Var x1\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>x21 x22.\n       \\<lbrakk>\\<And>s. t = Fun (Set s) [] \\<Longrightarrow> thesis;\n        t = Fun x21 x22\\<rbrakk>\n       \\<Longrightarrow> thesis", "then"], ["proof (chain)\npicking this:\n  t = Fun f T", "obtain s where \"f = Set s\""], ["proof (prove)\nusing this:\n  t = Fun f T\n\ngoal (1 subgoal):\n 1. (\\<And>s. f = Set s \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "using t"], ["proof (prove)\nusing this:\n  t = Fun f T\n  is_Fun_Set t\n\ngoal (1 subgoal):\n 1. (\\<And>s. f = Set s \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "unfolding is_Fun_Set_def"], ["proof (prove)\nusing this:\n  t = Fun f T\n  is_Fun t \\<and> args t = [] \\<and> is_Set (the_Fun t)\n\ngoal (1 subgoal):\n 1. (\\<And>s. f = Set s \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by (cases f) moura+"], ["proof (state)\nthis:\n  f = Set s\n\ngoal (2 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<And>s. t = Fun (Set s) [] \\<Longrightarrow> thesis;\n        t = Var x1\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>x21 x22.\n       \\<lbrakk>\\<And>s. t = Fun (Set s) [] \\<Longrightarrow> thesis;\n        t = Fun x21 x22\\<rbrakk>\n       \\<Longrightarrow> thesis", "moreover"], ["proof (state)\nthis:\n  f = Set s\n\ngoal (2 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<And>s. t = Fun (Set s) [] \\<Longrightarrow> thesis;\n        t = Var x1\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>x21 x22.\n       \\<lbrakk>\\<And>s. t = Fun (Set s) [] \\<Longrightarrow> thesis;\n        t = Fun x21 x22\\<rbrakk>\n       \\<Longrightarrow> thesis", "have \"T = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. T = []", "using Fun t"], ["proof (prove)\nusing this:\n  t = Fun f T\n  is_Fun_Set t\n\ngoal (1 subgoal):\n 1. T = []", "unfolding is_Fun_Set_def"], ["proof (prove)\nusing this:\n  t = Fun f T\n  is_Fun t \\<and> args t = [] \\<and> is_Set (the_Fun t)\n\ngoal (1 subgoal):\n 1. T = []", "by (cases T) auto"], ["proof (state)\nthis:\n  T = []\n\ngoal (2 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<And>s. t = Fun (Set s) [] \\<Longrightarrow> thesis;\n        t = Var x1\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>x21 x22.\n       \\<lbrakk>\\<And>s. t = Fun (Set s) [] \\<Longrightarrow> thesis;\n        t = Fun x21 x22\\<rbrakk>\n       \\<Longrightarrow> thesis", "ultimately"], ["proof (chain)\npicking this:\n  f = Set s\n  T = []", "show ?thesis"], ["proof (prove)\nusing this:\n  f = Set s\n  T = []\n\ngoal (1 subgoal):\n 1. thesis", "using Fun that"], ["proof (prove)\nusing this:\n  f = Set s\n  T = []\n  t = Fun f T\n  t = Fun (Set ?s) [] \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. thesis", "by fast"], ["proof (state)\nthis:\n  thesis\n\ngoal (1 subgoal):\n 1. \\<And>x1.\n       \\<lbrakk>\\<And>s. t = Fun (Set s) [] \\<Longrightarrow> thesis;\n        t = Var x1\\<rbrakk>\n       \\<Longrightarrow> thesis", "qed (use t is_Fun_Set_def in fast)"], ["", "lemma Fun_Set_InSet_iff:\n  \"(u = \\<langle>a: Var x \\<in> Fun (Set s) []\\<rangle>) \\<longleftrightarrow>\n   (is_InSet u \\<and> is_Var (the_elem_term u) \\<and> is_Fun_Set (the_set_term u) \\<and>\n    the_Set (the_Fun (the_set_term u)) = s \\<and> the_Var (the_elem_term u) = x \\<and> the_check u = a)\"\n  (is \"?A \\<longleftrightarrow> ?B\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (u = \\<langle>a: Var x \\<in> Fun (Set s) []\\<rangle>) =\n    (is_InSet u \\<and>\n     is_Var (the_elem_term u) \\<and>\n     is_Fun_Set (the_set_term u) \\<and>\n     the_Set (the_Fun (the_set_term u)) = s \\<and>\n     the_Var (the_elem_term u) = x \\<and> the_check u = a)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. u = \\<langle>a: Var x \\<in> Fun (Set s) []\\<rangle> \\<Longrightarrow>\n    is_InSet u \\<and>\n    is_Var (the_elem_term u) \\<and>\n    is_Fun_Set (the_set_term u) \\<and>\n    the_Set (the_Fun (the_set_term u)) = s \\<and>\n    the_Var (the_elem_term u) = x \\<and> the_check u = a\n 2. is_InSet u \\<and>\n    is_Var (the_elem_term u) \\<and>\n    is_Fun_Set (the_set_term u) \\<and>\n    the_Set (the_Fun (the_set_term u)) = s \\<and>\n    the_Var (the_elem_term u) = x \\<and> the_check u = a \\<Longrightarrow>\n    u = \\<langle>a: Var x \\<in> Fun (Set s) []\\<rangle>", "show \"?A \\<Longrightarrow> ?B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. u = \\<langle>a: Var x \\<in> Fun (Set s) []\\<rangle> \\<Longrightarrow>\n    is_InSet u \\<and>\n    is_Var (the_elem_term u) \\<and>\n    is_Fun_Set (the_set_term u) \\<and>\n    the_Set (the_Fun (the_set_term u)) = s \\<and>\n    the_Var (the_elem_term u) = x \\<and> the_check u = a", "unfolding is_Fun_Set_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. u = \\<langle>a: Var x \\<in> Fun (Set s) []\\<rangle> \\<Longrightarrow>\n    is_InSet u \\<and>\n    is_Var (the_elem_term u) \\<and>\n    (is_Fun (the_set_term u) \\<and>\n     args (the_set_term u) = [] \\<and>\n     is_Set (the_Fun (the_set_term u))) \\<and>\n    the_Set (the_Fun (the_set_term u)) = s \\<and>\n    the_Var (the_elem_term u) = x \\<and> the_check u = a", "by auto"], ["proof (state)\nthis:\n  u = \\<langle>a: Var x \\<in> Fun (Set s) []\\<rangle> \\<Longrightarrow>\n  is_InSet u \\<and>\n  is_Var (the_elem_term u) \\<and>\n  is_Fun_Set (the_set_term u) \\<and>\n  the_Set (the_Fun (the_set_term u)) = s \\<and>\n  the_Var (the_elem_term u) = x \\<and> the_check u = a\n\ngoal (1 subgoal):\n 1. is_InSet u \\<and>\n    is_Var (the_elem_term u) \\<and>\n    is_Fun_Set (the_set_term u) \\<and>\n    the_Set (the_Fun (the_set_term u)) = s \\<and>\n    the_Var (the_elem_term u) = x \\<and> the_check u = a \\<Longrightarrow>\n    u = \\<langle>a: Var x \\<in> Fun (Set s) []\\<rangle>", "assume B: ?B"], ["proof (state)\nthis:\n  is_InSet u \\<and>\n  is_Var (the_elem_term u) \\<and>\n  is_Fun_Set (the_set_term u) \\<and>\n  the_Set (the_Fun (the_set_term u)) = s \\<and>\n  the_Var (the_elem_term u) = x \\<and> the_check u = a\n\ngoal (1 subgoal):\n 1. is_InSet u \\<and>\n    is_Var (the_elem_term u) \\<and>\n    is_Fun_Set (the_set_term u) \\<and>\n    the_Set (the_Fun (the_set_term u)) = s \\<and>\n    the_Var (the_elem_term u) = x \\<and> the_check u = a \\<Longrightarrow>\n    u = \\<langle>a: Var x \\<in> Fun (Set s) []\\<rangle>", "thus ?A"], ["proof (prove)\nusing this:\n  is_InSet u \\<and>\n  is_Var (the_elem_term u) \\<and>\n  is_Fun_Set (the_set_term u) \\<and>\n  the_Set (the_Fun (the_set_term u)) = s \\<and>\n  the_Var (the_elem_term u) = x \\<and> the_check u = a\n\ngoal (1 subgoal):\n 1. u = \\<langle>a: Var x \\<in> Fun (Set s) []\\<rangle>", "proof (cases u)"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>is_InSet u \\<and>\n                is_Var (the_elem_term u) \\<and>\n                is_Fun_Set (the_set_term u) \\<and>\n                the_Set (the_Fun (the_set_term u)) = s \\<and>\n                the_Var (the_elem_term u) = x \\<and> the_check u = a;\n        u = send\\<langle>x1\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> u = \\<langle>a: Var x \\<in> Fun (Set s) []\\<rangle>\n 2. \\<And>x2.\n       \\<lbrakk>is_InSet u \\<and>\n                is_Var (the_elem_term u) \\<and>\n                is_Fun_Set (the_set_term u) \\<and>\n                the_Set (the_Fun (the_set_term u)) = s \\<and>\n                the_Var (the_elem_term u) = x \\<and> the_check u = a;\n        u = receive\\<langle>x2\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> u = \\<langle>a: Var x \\<in> Fun (Set s) []\\<rangle>\n 3. \\<And>x31 x32 x33.\n       \\<lbrakk>is_InSet u \\<and>\n                is_Var (the_elem_term u) \\<and>\n                is_Fun_Set (the_set_term u) \\<and>\n                the_Set (the_Fun (the_set_term u)) = s \\<and>\n                the_Var (the_elem_term u) = x \\<and> the_check u = a;\n        u = \\<langle>x31: x32 \\<doteq> x33\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> u = \\<langle>a: Var x \\<in> Fun (Set s) []\\<rangle>\n 4. \\<And>x41 x42.\n       \\<lbrakk>is_InSet u \\<and>\n                is_Var (the_elem_term u) \\<and>\n                is_Fun_Set (the_set_term u) \\<and>\n                the_Set (the_Fun (the_set_term u)) = s \\<and>\n                the_Var (the_elem_term u) = x \\<and> the_check u = a;\n        u = insert\\<langle>x41,x42\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> u = \\<langle>a: Var x \\<in> Fun (Set s) []\\<rangle>\n 5. \\<And>x51 x52.\n       \\<lbrakk>is_InSet u \\<and>\n                is_Var (the_elem_term u) \\<and>\n                is_Fun_Set (the_set_term u) \\<and>\n                the_Set (the_Fun (the_set_term u)) = s \\<and>\n                the_Var (the_elem_term u) = x \\<and> the_check u = a;\n        u = delete\\<langle>x51,x52\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> u = \\<langle>a: Var x \\<in> Fun (Set s) []\\<rangle>\n 6. \\<And>x61 x62 x63.\n       \\<lbrakk>is_InSet u \\<and>\n                is_Var (the_elem_term u) \\<and>\n                is_Fun_Set (the_set_term u) \\<and>\n                the_Set (the_Fun (the_set_term u)) = s \\<and>\n                the_Var (the_elem_term u) = x \\<and> the_check u = a;\n        u = \\<langle>x61: x62 \\<in> x63\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> u = \\<langle>a: Var x \\<in> Fun (Set s) []\\<rangle>\n 7. \\<And>x71 x72 x73.\n       \\<lbrakk>is_InSet u \\<and>\n                is_Var (the_elem_term u) \\<and>\n                is_Fun_Set (the_set_term u) \\<and>\n                the_Set (the_Fun (the_set_term u)) = s \\<and>\n                the_Var (the_elem_term u) = x \\<and> the_check u = a;\n        u =\n        \\<forall>x71\\<langle>\\<or>\\<noteq>: x72 \\<or>\\<notin>: x73\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> u = \\<langle>a: Var x \\<in> Fun (Set s) []\\<rangle>", "case (InSet b t t')"], ["proof (state)\nthis:\n  u = \\<langle>b: t \\<in> t'\\<rangle>\n\ngoal (7 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>is_InSet u \\<and>\n                is_Var (the_elem_term u) \\<and>\n                is_Fun_Set (the_set_term u) \\<and>\n                the_Set (the_Fun (the_set_term u)) = s \\<and>\n                the_Var (the_elem_term u) = x \\<and> the_check u = a;\n        u = send\\<langle>x1\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> u = \\<langle>a: Var x \\<in> Fun (Set s) []\\<rangle>\n 2. \\<And>x2.\n       \\<lbrakk>is_InSet u \\<and>\n                is_Var (the_elem_term u) \\<and>\n                is_Fun_Set (the_set_term u) \\<and>\n                the_Set (the_Fun (the_set_term u)) = s \\<and>\n                the_Var (the_elem_term u) = x \\<and> the_check u = a;\n        u = receive\\<langle>x2\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> u = \\<langle>a: Var x \\<in> Fun (Set s) []\\<rangle>\n 3. \\<And>x31 x32 x33.\n       \\<lbrakk>is_InSet u \\<and>\n                is_Var (the_elem_term u) \\<and>\n                is_Fun_Set (the_set_term u) \\<and>\n                the_Set (the_Fun (the_set_term u)) = s \\<and>\n                the_Var (the_elem_term u) = x \\<and> the_check u = a;\n        u = \\<langle>x31: x32 \\<doteq> x33\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> u = \\<langle>a: Var x \\<in> Fun (Set s) []\\<rangle>\n 4. \\<And>x41 x42.\n       \\<lbrakk>is_InSet u \\<and>\n                is_Var (the_elem_term u) \\<and>\n                is_Fun_Set (the_set_term u) \\<and>\n                the_Set (the_Fun (the_set_term u)) = s \\<and>\n                the_Var (the_elem_term u) = x \\<and> the_check u = a;\n        u = insert\\<langle>x41,x42\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> u = \\<langle>a: Var x \\<in> Fun (Set s) []\\<rangle>\n 5. \\<And>x51 x52.\n       \\<lbrakk>is_InSet u \\<and>\n                is_Var (the_elem_term u) \\<and>\n                is_Fun_Set (the_set_term u) \\<and>\n                the_Set (the_Fun (the_set_term u)) = s \\<and>\n                the_Var (the_elem_term u) = x \\<and> the_check u = a;\n        u = delete\\<langle>x51,x52\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> u = \\<langle>a: Var x \\<in> Fun (Set s) []\\<rangle>\n 6. \\<And>x61 x62 x63.\n       \\<lbrakk>is_InSet u \\<and>\n                is_Var (the_elem_term u) \\<and>\n                is_Fun_Set (the_set_term u) \\<and>\n                the_Set (the_Fun (the_set_term u)) = s \\<and>\n                the_Var (the_elem_term u) = x \\<and> the_check u = a;\n        u = \\<langle>x61: x62 \\<in> x63\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> u = \\<langle>a: Var x \\<in> Fun (Set s) []\\<rangle>\n 7. \\<And>x71 x72 x73.\n       \\<lbrakk>is_InSet u \\<and>\n                is_Var (the_elem_term u) \\<and>\n                is_Fun_Set (the_set_term u) \\<and>\n                the_Set (the_Fun (the_set_term u)) = s \\<and>\n                the_Var (the_elem_term u) = x \\<and> the_check u = a;\n        u =\n        \\<forall>x71\\<langle>\\<or>\\<noteq>: x72 \\<or>\\<notin>: x73\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> u = \\<langle>a: Var x \\<in> Fun (Set s) []\\<rangle>", "hence \"b = a\" \"t = Var x\" \"t' = Fun (Set s) []\""], ["proof (prove)\nusing this:\n  u = \\<langle>b: t \\<in> t'\\<rangle>\n\ngoal (1 subgoal):\n 1. b = a &&& t = Var x &&& t' = Fun (Set s) []", "using B"], ["proof (prove)\nusing this:\n  u = \\<langle>b: t \\<in> t'\\<rangle>\n  is_InSet u \\<and>\n  is_Var (the_elem_term u) \\<and>\n  is_Fun_Set (the_set_term u) \\<and>\n  the_Set (the_Fun (the_set_term u)) = s \\<and>\n  the_Var (the_elem_term u) = x \\<and> the_check u = a\n\ngoal (1 subgoal):\n 1. b = a &&& t = Var x &&& t' = Fun (Set s) []", "by (simp, fastforce, fastforce)"], ["proof (state)\nthis:\n  b = a\n  t = Var x\n  t' = Fun (Set s) []\n\ngoal (7 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>is_InSet u \\<and>\n                is_Var (the_elem_term u) \\<and>\n                is_Fun_Set (the_set_term u) \\<and>\n                the_Set (the_Fun (the_set_term u)) = s \\<and>\n                the_Var (the_elem_term u) = x \\<and> the_check u = a;\n        u = send\\<langle>x1\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> u = \\<langle>a: Var x \\<in> Fun (Set s) []\\<rangle>\n 2. \\<And>x2.\n       \\<lbrakk>is_InSet u \\<and>\n                is_Var (the_elem_term u) \\<and>\n                is_Fun_Set (the_set_term u) \\<and>\n                the_Set (the_Fun (the_set_term u)) = s \\<and>\n                the_Var (the_elem_term u) = x \\<and> the_check u = a;\n        u = receive\\<langle>x2\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> u = \\<langle>a: Var x \\<in> Fun (Set s) []\\<rangle>\n 3. \\<And>x31 x32 x33.\n       \\<lbrakk>is_InSet u \\<and>\n                is_Var (the_elem_term u) \\<and>\n                is_Fun_Set (the_set_term u) \\<and>\n                the_Set (the_Fun (the_set_term u)) = s \\<and>\n                the_Var (the_elem_term u) = x \\<and> the_check u = a;\n        u = \\<langle>x31: x32 \\<doteq> x33\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> u = \\<langle>a: Var x \\<in> Fun (Set s) []\\<rangle>\n 4. \\<And>x41 x42.\n       \\<lbrakk>is_InSet u \\<and>\n                is_Var (the_elem_term u) \\<and>\n                is_Fun_Set (the_set_term u) \\<and>\n                the_Set (the_Fun (the_set_term u)) = s \\<and>\n                the_Var (the_elem_term u) = x \\<and> the_check u = a;\n        u = insert\\<langle>x41,x42\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> u = \\<langle>a: Var x \\<in> Fun (Set s) []\\<rangle>\n 5. \\<And>x51 x52.\n       \\<lbrakk>is_InSet u \\<and>\n                is_Var (the_elem_term u) \\<and>\n                is_Fun_Set (the_set_term u) \\<and>\n                the_Set (the_Fun (the_set_term u)) = s \\<and>\n                the_Var (the_elem_term u) = x \\<and> the_check u = a;\n        u = delete\\<langle>x51,x52\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> u = \\<langle>a: Var x \\<in> Fun (Set s) []\\<rangle>\n 6. \\<And>x61 x62 x63.\n       \\<lbrakk>is_InSet u \\<and>\n                is_Var (the_elem_term u) \\<and>\n                is_Fun_Set (the_set_term u) \\<and>\n                the_Set (the_Fun (the_set_term u)) = s \\<and>\n                the_Var (the_elem_term u) = x \\<and> the_check u = a;\n        u = \\<langle>x61: x62 \\<in> x63\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> u = \\<langle>a: Var x \\<in> Fun (Set s) []\\<rangle>\n 7. \\<And>x71 x72 x73.\n       \\<lbrakk>is_InSet u \\<and>\n                is_Var (the_elem_term u) \\<and>\n                is_Fun_Set (the_set_term u) \\<and>\n                the_Set (the_Fun (the_set_term u)) = s \\<and>\n                the_Var (the_elem_term u) = x \\<and> the_check u = a;\n        u =\n        \\<forall>x71\\<langle>\\<or>\\<noteq>: x72 \\<or>\\<notin>: x73\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> u = \\<langle>a: Var x \\<in> Fun (Set s) []\\<rangle>", "thus ?thesis"], ["proof (prove)\nusing this:\n  b = a\n  t = Var x\n  t' = Fun (Set s) []\n\ngoal (1 subgoal):\n 1. u = \\<langle>a: Var x \\<in> Fun (Set s) []\\<rangle>", "using InSet"], ["proof (prove)\nusing this:\n  b = a\n  t = Var x\n  t' = Fun (Set s) []\n  u = \\<langle>b: t \\<in> t'\\<rangle>\n\ngoal (1 subgoal):\n 1. u = \\<langle>a: Var x \\<in> Fun (Set s) []\\<rangle>", "by fast"], ["proof (state)\nthis:\n  u = \\<langle>a: Var x \\<in> Fun (Set s) []\\<rangle>\n\ngoal (6 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>is_InSet u \\<and>\n                is_Var (the_elem_term u) \\<and>\n                is_Fun_Set (the_set_term u) \\<and>\n                the_Set (the_Fun (the_set_term u)) = s \\<and>\n                the_Var (the_elem_term u) = x \\<and> the_check u = a;\n        u = send\\<langle>x1\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> u = \\<langle>a: Var x \\<in> Fun (Set s) []\\<rangle>\n 2. \\<And>x2.\n       \\<lbrakk>is_InSet u \\<and>\n                is_Var (the_elem_term u) \\<and>\n                is_Fun_Set (the_set_term u) \\<and>\n                the_Set (the_Fun (the_set_term u)) = s \\<and>\n                the_Var (the_elem_term u) = x \\<and> the_check u = a;\n        u = receive\\<langle>x2\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> u = \\<langle>a: Var x \\<in> Fun (Set s) []\\<rangle>\n 3. \\<And>x31 x32 x33.\n       \\<lbrakk>is_InSet u \\<and>\n                is_Var (the_elem_term u) \\<and>\n                is_Fun_Set (the_set_term u) \\<and>\n                the_Set (the_Fun (the_set_term u)) = s \\<and>\n                the_Var (the_elem_term u) = x \\<and> the_check u = a;\n        u = \\<langle>x31: x32 \\<doteq> x33\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> u = \\<langle>a: Var x \\<in> Fun (Set s) []\\<rangle>\n 4. \\<And>x41 x42.\n       \\<lbrakk>is_InSet u \\<and>\n                is_Var (the_elem_term u) \\<and>\n                is_Fun_Set (the_set_term u) \\<and>\n                the_Set (the_Fun (the_set_term u)) = s \\<and>\n                the_Var (the_elem_term u) = x \\<and> the_check u = a;\n        u = insert\\<langle>x41,x42\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> u = \\<langle>a: Var x \\<in> Fun (Set s) []\\<rangle>\n 5. \\<And>x51 x52.\n       \\<lbrakk>is_InSet u \\<and>\n                is_Var (the_elem_term u) \\<and>\n                is_Fun_Set (the_set_term u) \\<and>\n                the_Set (the_Fun (the_set_term u)) = s \\<and>\n                the_Var (the_elem_term u) = x \\<and> the_check u = a;\n        u = delete\\<langle>x51,x52\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> u = \\<langle>a: Var x \\<in> Fun (Set s) []\\<rangle>\n 6. \\<And>x71 x72 x73.\n       \\<lbrakk>is_InSet u \\<and>\n                is_Var (the_elem_term u) \\<and>\n                is_Fun_Set (the_set_term u) \\<and>\n                the_Set (the_Fun (the_set_term u)) = s \\<and>\n                the_Var (the_elem_term u) = x \\<and> the_check u = a;\n        u =\n        \\<forall>x71\\<langle>\\<or>\\<noteq>: x72 \\<or>\\<notin>: x73\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> u = \\<langle>a: Var x \\<in> Fun (Set s) []\\<rangle>", "qed auto"], ["proof (state)\nthis:\n  u = \\<langle>a: Var x \\<in> Fun (Set s) []\\<rangle>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Fun_Set_NotInSet_iff:\n  \"(u = \\<langle>Var x not in Fun (Set s) []\\<rangle>) \\<longleftrightarrow>\n   (is_NegChecks u \\<and> bvars\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p u = [] \\<and> the_eqs u = [] \\<and> length (the_ins u) = 1 \\<and>\n    is_Var (fst (hd (the_ins u))) \\<and> is_Fun_Set (snd (hd (the_ins u)))) \\<and>\n    the_Set (the_Fun (snd (hd (the_ins u)))) = s \\<and> the_Var (fst (hd (the_ins u))) = x\"\n  (is \"?A \\<longleftrightarrow> ?B\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (u = \\<langle>Var x not in Fun (Set s) []\\<rangle>) =\n    ((is_NegChecks u \\<and>\n      bvars\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p u = [] \\<and>\n      the_eqs u = [] \\<and>\n      length (the_ins u) = 1 \\<and>\n      is_Var (fst (hd (the_ins u))) \\<and>\n      is_Fun_Set (snd (hd (the_ins u)))) \\<and>\n     the_Set (the_Fun (snd (hd (the_ins u)))) = s \\<and>\n     the_Var (fst (hd (the_ins u))) = x)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. u = \\<langle>Var x not in Fun (Set s) []\\<rangle> \\<Longrightarrow>\n    (is_NegChecks u \\<and>\n     bvars\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p u = [] \\<and>\n     the_eqs u = [] \\<and>\n     length (the_ins u) = 1 \\<and>\n     is_Var (fst (hd (the_ins u))) \\<and>\n     is_Fun_Set (snd (hd (the_ins u)))) \\<and>\n    the_Set (the_Fun (snd (hd (the_ins u)))) = s \\<and>\n    the_Var (fst (hd (the_ins u))) = x\n 2. (is_NegChecks u \\<and>\n     bvars\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p u = [] \\<and>\n     the_eqs u = [] \\<and>\n     length (the_ins u) = 1 \\<and>\n     is_Var (fst (hd (the_ins u))) \\<and>\n     is_Fun_Set (snd (hd (the_ins u)))) \\<and>\n    the_Set (the_Fun (snd (hd (the_ins u)))) = s \\<and>\n    the_Var (fst (hd (the_ins u))) = x \\<Longrightarrow>\n    u = \\<langle>Var x not in Fun (Set s) []\\<rangle>", "show \"?A \\<Longrightarrow> ?B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. u = \\<langle>Var x not in Fun (Set s) []\\<rangle> \\<Longrightarrow>\n    (is_NegChecks u \\<and>\n     bvars\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p u = [] \\<and>\n     the_eqs u = [] \\<and>\n     length (the_ins u) = 1 \\<and>\n     is_Var (fst (hd (the_ins u))) \\<and>\n     is_Fun_Set (snd (hd (the_ins u)))) \\<and>\n    the_Set (the_Fun (snd (hd (the_ins u)))) = s \\<and>\n    the_Var (fst (hd (the_ins u))) = x", "unfolding is_Fun_Set_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. u = \\<langle>Var x not in Fun (Set s) []\\<rangle> \\<Longrightarrow>\n    (is_NegChecks u \\<and>\n     bvars\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p u = [] \\<and>\n     the_eqs u = [] \\<and>\n     length (the_ins u) = 1 \\<and>\n     is_Var (fst (hd (the_ins u))) \\<and>\n     is_Fun (snd (hd (the_ins u))) \\<and>\n     args (snd (hd (the_ins u))) = [] \\<and>\n     is_Set (the_Fun (snd (hd (the_ins u))))) \\<and>\n    the_Set (the_Fun (snd (hd (the_ins u)))) = s \\<and>\n    the_Var (fst (hd (the_ins u))) = x", "by auto"], ["proof (state)\nthis:\n  u = \\<langle>Var x not in Fun (Set s) []\\<rangle> \\<Longrightarrow>\n  (is_NegChecks u \\<and>\n   bvars\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p u = [] \\<and>\n   the_eqs u = [] \\<and>\n   length (the_ins u) = 1 \\<and>\n   is_Var (fst (hd (the_ins u))) \\<and>\n   is_Fun_Set (snd (hd (the_ins u)))) \\<and>\n  the_Set (the_Fun (snd (hd (the_ins u)))) = s \\<and>\n  the_Var (fst (hd (the_ins u))) = x\n\ngoal (1 subgoal):\n 1. (is_NegChecks u \\<and>\n     bvars\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p u = [] \\<and>\n     the_eqs u = [] \\<and>\n     length (the_ins u) = 1 \\<and>\n     is_Var (fst (hd (the_ins u))) \\<and>\n     is_Fun_Set (snd (hd (the_ins u)))) \\<and>\n    the_Set (the_Fun (snd (hd (the_ins u)))) = s \\<and>\n    the_Var (fst (hd (the_ins u))) = x \\<Longrightarrow>\n    u = \\<langle>Var x not in Fun (Set s) []\\<rangle>", "assume B: ?B"], ["proof (state)\nthis:\n  (is_NegChecks u \\<and>\n   bvars\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p u = [] \\<and>\n   the_eqs u = [] \\<and>\n   length (the_ins u) = 1 \\<and>\n   is_Var (fst (hd (the_ins u))) \\<and>\n   is_Fun_Set (snd (hd (the_ins u)))) \\<and>\n  the_Set (the_Fun (snd (hd (the_ins u)))) = s \\<and>\n  the_Var (fst (hd (the_ins u))) = x\n\ngoal (1 subgoal):\n 1. (is_NegChecks u \\<and>\n     bvars\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p u = [] \\<and>\n     the_eqs u = [] \\<and>\n     length (the_ins u) = 1 \\<and>\n     is_Var (fst (hd (the_ins u))) \\<and>\n     is_Fun_Set (snd (hd (the_ins u)))) \\<and>\n    the_Set (the_Fun (snd (hd (the_ins u)))) = s \\<and>\n    the_Var (fst (hd (the_ins u))) = x \\<Longrightarrow>\n    u = \\<langle>Var x not in Fun (Set s) []\\<rangle>", "show ?A"], ["proof (prove)\ngoal (1 subgoal):\n 1. u = \\<langle>Var x not in Fun (Set s) []\\<rangle>", "proof (cases u)"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>x1.\n       u = send\\<langle>x1\\<rangle> \\<Longrightarrow>\n       u = \\<langle>Var x not in Fun (Set s) []\\<rangle>\n 2. \\<And>x2.\n       u = receive\\<langle>x2\\<rangle> \\<Longrightarrow>\n       u = \\<langle>Var x not in Fun (Set s) []\\<rangle>\n 3. \\<And>x31 x32 x33.\n       u = \\<langle>x31: x32 \\<doteq> x33\\<rangle> \\<Longrightarrow>\n       u = \\<langle>Var x not in Fun (Set s) []\\<rangle>\n 4. \\<And>x41 x42.\n       u = insert\\<langle>x41,x42\\<rangle> \\<Longrightarrow>\n       u = \\<langle>Var x not in Fun (Set s) []\\<rangle>\n 5. \\<And>x51 x52.\n       u = delete\\<langle>x51,x52\\<rangle> \\<Longrightarrow>\n       u = \\<langle>Var x not in Fun (Set s) []\\<rangle>\n 6. \\<And>x61 x62 x63.\n       u = \\<langle>x61: x62 \\<in> x63\\<rangle> \\<Longrightarrow>\n       u = \\<langle>Var x not in Fun (Set s) []\\<rangle>\n 7. \\<And>x71 x72 x73.\n       u =\n       \\<forall>x71\\<langle>\\<or>\\<noteq>: x72 \\<or>\\<notin>: x73\\<rangle> \\<Longrightarrow>\n       u = \\<langle>Var x not in Fun (Set s) []\\<rangle>", "case (NegChecks X F F')"], ["proof (state)\nthis:\n  u = \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: F'\\<rangle>\n\ngoal (7 subgoals):\n 1. \\<And>x1.\n       u = send\\<langle>x1\\<rangle> \\<Longrightarrow>\n       u = \\<langle>Var x not in Fun (Set s) []\\<rangle>\n 2. \\<And>x2.\n       u = receive\\<langle>x2\\<rangle> \\<Longrightarrow>\n       u = \\<langle>Var x not in Fun (Set s) []\\<rangle>\n 3. \\<And>x31 x32 x33.\n       u = \\<langle>x31: x32 \\<doteq> x33\\<rangle> \\<Longrightarrow>\n       u = \\<langle>Var x not in Fun (Set s) []\\<rangle>\n 4. \\<And>x41 x42.\n       u = insert\\<langle>x41,x42\\<rangle> \\<Longrightarrow>\n       u = \\<langle>Var x not in Fun (Set s) []\\<rangle>\n 5. \\<And>x51 x52.\n       u = delete\\<langle>x51,x52\\<rangle> \\<Longrightarrow>\n       u = \\<langle>Var x not in Fun (Set s) []\\<rangle>\n 6. \\<And>x61 x62 x63.\n       u = \\<langle>x61: x62 \\<in> x63\\<rangle> \\<Longrightarrow>\n       u = \\<langle>Var x not in Fun (Set s) []\\<rangle>\n 7. \\<And>x71 x72 x73.\n       u =\n       \\<forall>x71\\<langle>\\<or>\\<noteq>: x72 \\<or>\\<notin>: x73\\<rangle> \\<Longrightarrow>\n       u = \\<langle>Var x not in Fun (Set s) []\\<rangle>", "hence \"X = []\" \"F = []\""], ["proof (prove)\nusing this:\n  u = \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: F'\\<rangle>\n\ngoal (1 subgoal):\n 1. X = [] &&& F = []", "using B"], ["proof (prove)\nusing this:\n  u = \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: F'\\<rangle>\n  (is_NegChecks u \\<and>\n   bvars\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p u = [] \\<and>\n   the_eqs u = [] \\<and>\n   length (the_ins u) = 1 \\<and>\n   is_Var (fst (hd (the_ins u))) \\<and>\n   is_Fun_Set (snd (hd (the_ins u)))) \\<and>\n  the_Set (the_Fun (snd (hd (the_ins u)))) = s \\<and>\n  the_Var (fst (hd (the_ins u))) = x\n\ngoal (1 subgoal):\n 1. X = [] &&& F = []", "by auto"], ["proof (state)\nthis:\n  X = []\n  F = []\n\ngoal (7 subgoals):\n 1. \\<And>x1.\n       u = send\\<langle>x1\\<rangle> \\<Longrightarrow>\n       u = \\<langle>Var x not in Fun (Set s) []\\<rangle>\n 2. \\<And>x2.\n       u = receive\\<langle>x2\\<rangle> \\<Longrightarrow>\n       u = \\<langle>Var x not in Fun (Set s) []\\<rangle>\n 3. \\<And>x31 x32 x33.\n       u = \\<langle>x31: x32 \\<doteq> x33\\<rangle> \\<Longrightarrow>\n       u = \\<langle>Var x not in Fun (Set s) []\\<rangle>\n 4. \\<And>x41 x42.\n       u = insert\\<langle>x41,x42\\<rangle> \\<Longrightarrow>\n       u = \\<langle>Var x not in Fun (Set s) []\\<rangle>\n 5. \\<And>x51 x52.\n       u = delete\\<langle>x51,x52\\<rangle> \\<Longrightarrow>\n       u = \\<langle>Var x not in Fun (Set s) []\\<rangle>\n 6. \\<And>x61 x62 x63.\n       u = \\<langle>x61: x62 \\<in> x63\\<rangle> \\<Longrightarrow>\n       u = \\<langle>Var x not in Fun (Set s) []\\<rangle>\n 7. \\<And>x71 x72 x73.\n       u =\n       \\<forall>x71\\<langle>\\<or>\\<noteq>: x72 \\<or>\\<notin>: x73\\<rangle> \\<Longrightarrow>\n       u = \\<langle>Var x not in Fun (Set s) []\\<rangle>", "moreover"], ["proof (state)\nthis:\n  X = []\n  F = []\n\ngoal (7 subgoals):\n 1. \\<And>x1.\n       u = send\\<langle>x1\\<rangle> \\<Longrightarrow>\n       u = \\<langle>Var x not in Fun (Set s) []\\<rangle>\n 2. \\<And>x2.\n       u = receive\\<langle>x2\\<rangle> \\<Longrightarrow>\n       u = \\<langle>Var x not in Fun (Set s) []\\<rangle>\n 3. \\<And>x31 x32 x33.\n       u = \\<langle>x31: x32 \\<doteq> x33\\<rangle> \\<Longrightarrow>\n       u = \\<langle>Var x not in Fun (Set s) []\\<rangle>\n 4. \\<And>x41 x42.\n       u = insert\\<langle>x41,x42\\<rangle> \\<Longrightarrow>\n       u = \\<langle>Var x not in Fun (Set s) []\\<rangle>\n 5. \\<And>x51 x52.\n       u = delete\\<langle>x51,x52\\<rangle> \\<Longrightarrow>\n       u = \\<langle>Var x not in Fun (Set s) []\\<rangle>\n 6. \\<And>x61 x62 x63.\n       u = \\<langle>x61: x62 \\<in> x63\\<rangle> \\<Longrightarrow>\n       u = \\<langle>Var x not in Fun (Set s) []\\<rangle>\n 7. \\<And>x71 x72 x73.\n       u =\n       \\<forall>x71\\<langle>\\<or>\\<noteq>: x72 \\<or>\\<notin>: x73\\<rangle> \\<Longrightarrow>\n       u = \\<langle>Var x not in Fun (Set s) []\\<rangle>", "have \"fst (hd (the_ins u)) = Var x\" \"snd (hd (the_ins u)) = Fun (Set s) []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (hd (the_ins u)) = Var x &&& snd (hd (the_ins u)) = Fun (Set s) []", "using B is_Fun_SetE[of \"snd (hd (the_ins u))\"]"], ["proof (prove)\nusing this:\n  (is_NegChecks u \\<and>\n   bvars\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p u = [] \\<and>\n   the_eqs u = [] \\<and>\n   length (the_ins u) = 1 \\<and>\n   is_Var (fst (hd (the_ins u))) \\<and>\n   is_Fun_Set (snd (hd (the_ins u)))) \\<and>\n  the_Set (the_Fun (snd (hd (the_ins u)))) = s \\<and>\n  the_Var (fst (hd (the_ins u))) = x\n  \\<lbrakk>is_Fun_Set (snd (hd (the_ins u)));\n   \\<And>s.\n      snd (hd (the_ins u)) = Fun (Set s) [] \\<Longrightarrow>\n      ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. fst (hd (the_ins u)) = Var x &&& snd (hd (the_ins u)) = Fun (Set s) []", "by (force, fastforce)"], ["proof (state)\nthis:\n  fst (hd (the_ins u)) = Var x\n  snd (hd (the_ins u)) = Fun (Set s) []\n\ngoal (7 subgoals):\n 1. \\<And>x1.\n       u = send\\<langle>x1\\<rangle> \\<Longrightarrow>\n       u = \\<langle>Var x not in Fun (Set s) []\\<rangle>\n 2. \\<And>x2.\n       u = receive\\<langle>x2\\<rangle> \\<Longrightarrow>\n       u = \\<langle>Var x not in Fun (Set s) []\\<rangle>\n 3. \\<And>x31 x32 x33.\n       u = \\<langle>x31: x32 \\<doteq> x33\\<rangle> \\<Longrightarrow>\n       u = \\<langle>Var x not in Fun (Set s) []\\<rangle>\n 4. \\<And>x41 x42.\n       u = insert\\<langle>x41,x42\\<rangle> \\<Longrightarrow>\n       u = \\<langle>Var x not in Fun (Set s) []\\<rangle>\n 5. \\<And>x51 x52.\n       u = delete\\<langle>x51,x52\\<rangle> \\<Longrightarrow>\n       u = \\<langle>Var x not in Fun (Set s) []\\<rangle>\n 6. \\<And>x61 x62 x63.\n       u = \\<langle>x61: x62 \\<in> x63\\<rangle> \\<Longrightarrow>\n       u = \\<langle>Var x not in Fun (Set s) []\\<rangle>\n 7. \\<And>x71 x72 x73.\n       u =\n       \\<forall>x71\\<langle>\\<or>\\<noteq>: x72 \\<or>\\<notin>: x73\\<rangle> \\<Longrightarrow>\n       u = \\<langle>Var x not in Fun (Set s) []\\<rangle>", "hence \"F' = [(Var x, Fun (Set s) [])]\""], ["proof (prove)\nusing this:\n  fst (hd (the_ins u)) = Var x\n  snd (hd (the_ins u)) = Fun (Set s) []\n\ngoal (1 subgoal):\n 1. F' = [(Var x, Fun (Set s) [])]", "using NegChecks B"], ["proof (prove)\nusing this:\n  fst (hd (the_ins u)) = Var x\n  snd (hd (the_ins u)) = Fun (Set s) []\n  u = \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: F'\\<rangle>\n  (is_NegChecks u \\<and>\n   bvars\\<^sub>s\\<^sub>s\\<^sub>t\\<^sub>p u = [] \\<and>\n   the_eqs u = [] \\<and>\n   length (the_ins u) = 1 \\<and>\n   is_Var (fst (hd (the_ins u))) \\<and>\n   is_Fun_Set (snd (hd (the_ins u)))) \\<and>\n  the_Set (the_Fun (snd (hd (the_ins u)))) = s \\<and>\n  the_Var (fst (hd (the_ins u))) = x\n\ngoal (1 subgoal):\n 1. F' = [(Var x, Fun (Set s) [])]", "by (cases \"the_ins u\") auto"], ["proof (state)\nthis:\n  F' = [(Var x, Fun (Set s) [])]\n\ngoal (7 subgoals):\n 1. \\<And>x1.\n       u = send\\<langle>x1\\<rangle> \\<Longrightarrow>\n       u = \\<langle>Var x not in Fun (Set s) []\\<rangle>\n 2. \\<And>x2.\n       u = receive\\<langle>x2\\<rangle> \\<Longrightarrow>\n       u = \\<langle>Var x not in Fun (Set s) []\\<rangle>\n 3. \\<And>x31 x32 x33.\n       u = \\<langle>x31: x32 \\<doteq> x33\\<rangle> \\<Longrightarrow>\n       u = \\<langle>Var x not in Fun (Set s) []\\<rangle>\n 4. \\<And>x41 x42.\n       u = insert\\<langle>x41,x42\\<rangle> \\<Longrightarrow>\n       u = \\<langle>Var x not in Fun (Set s) []\\<rangle>\n 5. \\<And>x51 x52.\n       u = delete\\<langle>x51,x52\\<rangle> \\<Longrightarrow>\n       u = \\<langle>Var x not in Fun (Set s) []\\<rangle>\n 6. \\<And>x61 x62 x63.\n       u = \\<langle>x61: x62 \\<in> x63\\<rangle> \\<Longrightarrow>\n       u = \\<langle>Var x not in Fun (Set s) []\\<rangle>\n 7. \\<And>x71 x72 x73.\n       u =\n       \\<forall>x71\\<langle>\\<or>\\<noteq>: x72 \\<or>\\<notin>: x73\\<rangle> \\<Longrightarrow>\n       u = \\<langle>Var x not in Fun (Set s) []\\<rangle>", "ultimately"], ["proof (chain)\npicking this:\n  X = []\n  F = []\n  F' = [(Var x, Fun (Set s) [])]", "show ?thesis"], ["proof (prove)\nusing this:\n  X = []\n  F = []\n  F' = [(Var x, Fun (Set s) [])]\n\ngoal (1 subgoal):\n 1. u = \\<langle>Var x not in Fun (Set s) []\\<rangle>", "using NegChecks"], ["proof (prove)\nusing this:\n  X = []\n  F = []\n  F' = [(Var x, Fun (Set s) [])]\n  u = \\<forall>X\\<langle>\\<or>\\<noteq>: F \\<or>\\<notin>: F'\\<rangle>\n\ngoal (1 subgoal):\n 1. u = \\<langle>Var x not in Fun (Set s) []\\<rangle>", "by fast"], ["proof (state)\nthis:\n  u = \\<langle>Var x not in Fun (Set s) []\\<rangle>\n\ngoal (6 subgoals):\n 1. \\<And>x1.\n       u = send\\<langle>x1\\<rangle> \\<Longrightarrow>\n       u = \\<langle>Var x not in Fun (Set s) []\\<rangle>\n 2. \\<And>x2.\n       u = receive\\<langle>x2\\<rangle> \\<Longrightarrow>\n       u = \\<langle>Var x not in Fun (Set s) []\\<rangle>\n 3. \\<And>x31 x32 x33.\n       u = \\<langle>x31: x32 \\<doteq> x33\\<rangle> \\<Longrightarrow>\n       u = \\<langle>Var x not in Fun (Set s) []\\<rangle>\n 4. \\<And>x41 x42.\n       u = insert\\<langle>x41,x42\\<rangle> \\<Longrightarrow>\n       u = \\<langle>Var x not in Fun (Set s) []\\<rangle>\n 5. \\<And>x51 x52.\n       u = delete\\<langle>x51,x52\\<rangle> \\<Longrightarrow>\n       u = \\<langle>Var x not in Fun (Set s) []\\<rangle>\n 6. \\<And>x61 x62 x63.\n       u = \\<langle>x61: x62 \\<in> x63\\<rangle> \\<Longrightarrow>\n       u = \\<langle>Var x not in Fun (Set s) []\\<rangle>", "qed (use B in auto)"], ["proof (state)\nthis:\n  u = \\<langle>Var x not in Fun (Set s) []\\<rangle>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma is_Fun_Set_exi: \"is_Fun_Set x \\<longleftrightarrow> (\\<exists>s. x = Fun (Set s) [])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_Fun_Set x = (\\<exists>s. x = Fun (Set s) [])", "by (metis prot_fun.collapse(2) term.collapse(2) prot_fun.disc(15) term.disc(2)\n          term.sel(2,4) is_Fun_Set_def un_Fun1_def)"], ["", "lemma is_Fun_Set_subst:\n  assumes \"is_Fun_Set S'\"\n  shows \"is_Fun_Set (S' \\<cdot> \\<sigma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_Fun_Set (S' \\<cdot> \\<sigma>)", "using assms"], ["proof (prove)\nusing this:\n  is_Fun_Set S'\n\ngoal (1 subgoal):\n 1. is_Fun_Set (S' \\<cdot> \\<sigma>)", "by (fastforce simp add: is_Fun_Set_def)"], ["", "lemma is_Update_in_transaction_updates:\n  assumes tu: \"is_Update t\"\n  assumes t: \"t \\<in> set (unlabel (transaction_strand TT))\"\n  assumes vt: \"wellformed_transaction TT\"\n  shows \"t \\<in> set (unlabel (transaction_updates TT))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t \\<in> set (unlabel (transaction_updates TT))", "using t tu vt"], ["proof (prove)\nusing this:\n  t \\<in> set (unlabel (transaction_strand TT))\n  is_Update t\n  wellformed_transaction TT\n\ngoal (1 subgoal):\n 1. t \\<in> set (unlabel (transaction_updates TT))", "unfolding transaction_strand_def wellformed_transaction_def list_all_iff"], ["proof (prove)\nusing this:\n  t \\<in> set (unlabel\n                (transaction_receive TT @\n                 transaction_selects TT @\n                 transaction_checks TT @\n                 transaction_updates TT @ transaction_send TT))\n  is_Update t\n  Ball (set (unlabel (transaction_receive TT)))\n   stateful_strand_step.is_Receive \\<and>\n  (\\<forall>x\\<in>set (unlabel (transaction_selects TT)).\n      is_Assignment x) \\<and>\n  (\\<forall>x\\<in>set (unlabel (transaction_checks TT)). is_Check x) \\<and>\n  (\\<forall>x\\<in>set (unlabel (transaction_updates TT)).\n      is_Update x) \\<and>\n  Ball (set (unlabel (transaction_send TT)))\n   stateful_strand_step.is_Send \\<and>\n  set (transaction_fresh TT)\n  \\<subseteq> fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n               (transaction_updates TT) \\<union>\n              fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n               (transaction_send TT) \\<and>\n  set (transaction_fresh TT) \\<inter>\n  fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive TT) =\n  {} \\<and>\n  set (transaction_fresh TT) \\<inter>\n  fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_selects TT) =\n  {} \\<and>\n  fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n   (transaction_receive TT @\n    transaction_selects TT @\n    transaction_checks TT @\n    transaction_updates TT @ transaction_send TT) \\<inter>\n  bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n   (transaction_receive TT @\n    transaction_selects TT @\n    transaction_checks TT @ transaction_updates TT @ transaction_send TT) =\n  {} \\<and>\n  fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_checks TT)\n  \\<subseteq> fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n               (transaction_receive TT) \\<union>\n              fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n               (transaction_selects TT) \\<and>\n  fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_updates TT) \\<union>\n  fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send TT) -\n  set (transaction_fresh TT)\n  \\<subseteq> fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n               (transaction_receive TT) \\<union>\n              fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n               (transaction_selects TT) \\<and>\n  (\\<forall>x\\<in>set (unlabel (transaction_selects TT)).\n      stateful_strand_step.is_Equality x \\<longrightarrow>\n      fv (the_rhs x)\n      \\<subseteq> fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                   (transaction_receive TT))\n\ngoal (1 subgoal):\n 1. t \\<in> set (unlabel (transaction_updates TT))", "by (auto simp add: unlabel_append)"], ["", "lemma transaction_fresh_vars_subset:\n  assumes \"wellformed_transaction T\"\n  shows \"set (transaction_fresh T) \\<subseteq> fv_transaction T\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (transaction_fresh T) \\<subseteq> fv_transaction T", "using assms fv_transaction_unfold[of T]"], ["proof (prove)\nusing this:\n  wellformed_transaction T\n  fv_transaction T =\n  fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T) \\<union>\n  fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_selects T) \\<union>\n  fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_checks T) \\<union>\n  fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_updates T) \\<union>\n  fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T)\n\ngoal (1 subgoal):\n 1. set (transaction_fresh T) \\<subseteq> fv_transaction T", "unfolding wellformed_transaction_def"], ["proof (prove)\nusing this:\n  list_all stateful_strand_step.is_Receive\n   (unlabel (transaction_receive T)) \\<and>\n  list_all is_Assignment (unlabel (transaction_selects T)) \\<and>\n  list_all is_Check (unlabel (transaction_checks T)) \\<and>\n  list_all is_Update (unlabel (transaction_updates T)) \\<and>\n  list_all stateful_strand_step.is_Send\n   (unlabel (transaction_send T)) \\<and>\n  set (transaction_fresh T)\n  \\<subseteq> fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n               (transaction_updates T) \\<union>\n              fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T) \\<and>\n  set (transaction_fresh T) \\<inter>\n  fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T) =\n  {} \\<and>\n  set (transaction_fresh T) \\<inter>\n  fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_selects T) =\n  {} \\<and>\n  fv_transaction T \\<inter> bvars_transaction T = {} \\<and>\n  fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_checks T)\n  \\<subseteq> fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n               (transaction_receive T) \\<union>\n              fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n               (transaction_selects T) \\<and>\n  fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_updates T) \\<union>\n  fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T) -\n  set (transaction_fresh T)\n  \\<subseteq> fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n               (transaction_receive T) \\<union>\n              fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n               (transaction_selects T) \\<and>\n  (\\<forall>x\\<in>set (unlabel (transaction_selects T)).\n      stateful_strand_step.is_Equality x \\<longrightarrow>\n      fv (the_rhs x)\n      \\<subseteq> fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                   (transaction_receive T))\n  fv_transaction T =\n  fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T) \\<union>\n  fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_selects T) \\<union>\n  fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_checks T) \\<union>\n  fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_updates T) \\<union>\n  fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T)\n\ngoal (1 subgoal):\n 1. set (transaction_fresh T) \\<subseteq> fv_transaction T", "by auto"], ["", "lemma transaction_fresh_vars_notin:\n  assumes T: \"wellformed_transaction T\"\n    and x: \"x \\<in> set (transaction_fresh T)\"\n  shows \"x \\<notin> fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T)\" (is ?A)\n    and \"x \\<notin> fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_selects T)\" (is ?B)\n    and \"x \\<notin> fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_checks T)\" (is ?C)\n    and \"x \\<notin> vars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T)\" (is ?D)\n    and \"x \\<notin> vars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_selects T)\" (is ?E)\n    and \"x \\<notin> vars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_checks T)\" (is ?F)\n    and \"x \\<notin> bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T)\" (is ?G)\n    and \"x \\<notin> bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_selects T)\" (is ?H)\n    and \"x \\<notin> bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_checks T)\" (is ?I)"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((x \\<notin> fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                  (transaction_receive T) &&&\n      x \\<notin> fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                  (transaction_selects T)) &&&\n     x \\<notin> fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                 (transaction_checks T) &&&\n     x \\<notin> vars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                 (transaction_receive T)) &&&\n    (x \\<notin> vars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                 (transaction_selects T) &&&\n     x \\<notin> vars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                 (transaction_checks T)) &&&\n    x \\<notin> bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                (transaction_receive T) &&&\n    x \\<notin> bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                (transaction_selects T) &&&\n    x \\<notin> bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_checks T)", "proof -"], ["proof (state)\ngoal (9 subgoals):\n 1. x \\<notin> fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T)\n 2. x \\<notin> fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_selects T)\n 3. x \\<notin> fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_checks T)\n 4. x \\<notin> vars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T)\n 5. x \\<notin> vars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_selects T)\n 6. x \\<notin> vars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_checks T)\n 7. x \\<notin> bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T)\n 8. x \\<notin> bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_selects T)\n 9. x \\<notin> bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_checks T)", "have 0:\n      \"set (transaction_fresh T) \\<subseteq> fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_updates T) \\<union> fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T)\"\n      \"set (transaction_fresh T) \\<inter> fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T) = {}\"\n      \"set (transaction_fresh T) \\<inter> fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_selects T) = {}\"\n      \"fv_transaction T \\<inter> bvars_transaction T = {}\"\n      \"fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_checks T) \\<subseteq> fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T) \\<union> fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_selects T)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (set (transaction_fresh T)\n     \\<subseteq> fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                  (transaction_updates T) \\<union>\n                 fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T) &&&\n     set (transaction_fresh T) \\<inter>\n     fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T) =\n     {}) &&&\n    set (transaction_fresh T) \\<inter>\n    fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_selects T) =\n    {} &&&\n    fv_transaction T \\<inter> bvars_transaction T = {} &&&\n    fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_checks T)\n    \\<subseteq> fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                 (transaction_receive T) \\<union>\n                fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_selects T)", "using T"], ["proof (prove)\nusing this:\n  wellformed_transaction T\n\ngoal (1 subgoal):\n 1. (set (transaction_fresh T)\n     \\<subseteq> fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                  (transaction_updates T) \\<union>\n                 fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T) &&&\n     set (transaction_fresh T) \\<inter>\n     fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T) =\n     {}) &&&\n    set (transaction_fresh T) \\<inter>\n    fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_selects T) =\n    {} &&&\n    fv_transaction T \\<inter> bvars_transaction T = {} &&&\n    fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_checks T)\n    \\<subseteq> fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                 (transaction_receive T) \\<union>\n                fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_selects T)", "unfolding wellformed_transaction_def"], ["proof (prove)\nusing this:\n  list_all stateful_strand_step.is_Receive\n   (unlabel (transaction_receive T)) \\<and>\n  list_all is_Assignment (unlabel (transaction_selects T)) \\<and>\n  list_all is_Check (unlabel (transaction_checks T)) \\<and>\n  list_all is_Update (unlabel (transaction_updates T)) \\<and>\n  list_all stateful_strand_step.is_Send\n   (unlabel (transaction_send T)) \\<and>\n  set (transaction_fresh T)\n  \\<subseteq> fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n               (transaction_updates T) \\<union>\n              fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T) \\<and>\n  set (transaction_fresh T) \\<inter>\n  fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T) =\n  {} \\<and>\n  set (transaction_fresh T) \\<inter>\n  fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_selects T) =\n  {} \\<and>\n  fv_transaction T \\<inter> bvars_transaction T = {} \\<and>\n  fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_checks T)\n  \\<subseteq> fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n               (transaction_receive T) \\<union>\n              fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n               (transaction_selects T) \\<and>\n  fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_updates T) \\<union>\n  fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T) -\n  set (transaction_fresh T)\n  \\<subseteq> fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n               (transaction_receive T) \\<union>\n              fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n               (transaction_selects T) \\<and>\n  (\\<forall>x\\<in>set (unlabel (transaction_selects T)).\n      stateful_strand_step.is_Equality x \\<longrightarrow>\n      fv (the_rhs x)\n      \\<subseteq> fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                   (transaction_receive T))\n\ngoal (1 subgoal):\n 1. (set (transaction_fresh T)\n     \\<subseteq> fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                  (transaction_updates T) \\<union>\n                 fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T) &&&\n     set (transaction_fresh T) \\<inter>\n     fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T) =\n     {}) &&&\n    set (transaction_fresh T) \\<inter>\n    fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_selects T) =\n    {} &&&\n    fv_transaction T \\<inter> bvars_transaction T = {} &&&\n    fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_checks T)\n    \\<subseteq> fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                 (transaction_receive T) \\<union>\n                fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_selects T)", "by fast+"], ["proof (state)\nthis:\n  set (transaction_fresh T)\n  \\<subseteq> fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n               (transaction_updates T) \\<union>\n              fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T)\n  set (transaction_fresh T) \\<inter>\n  fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T) =\n  {}\n  set (transaction_fresh T) \\<inter>\n  fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_selects T) =\n  {}\n  fv_transaction T \\<inter> bvars_transaction T = {}\n  fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_checks T)\n  \\<subseteq> fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n               (transaction_receive T) \\<union>\n              fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_selects T)\n\ngoal (9 subgoals):\n 1. x \\<notin> fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T)\n 2. x \\<notin> fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_selects T)\n 3. x \\<notin> fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_checks T)\n 4. x \\<notin> vars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T)\n 5. x \\<notin> vars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_selects T)\n 6. x \\<notin> vars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_checks T)\n 7. x \\<notin> bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T)\n 8. x \\<notin> bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_selects T)\n 9. x \\<notin> bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_checks T)", "have 1: \"set (transaction_fresh T) \\<inter> bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_checks T) = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (transaction_fresh T) \\<inter>\n    bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_checks T) =\n    {}", "using 0(1,4) fv_transaction_unfold[of T] bvars_transaction_unfold[of T]"], ["proof (prove)\nusing this:\n  set (transaction_fresh T)\n  \\<subseteq> fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n               (transaction_updates T) \\<union>\n              fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T)\n  fv_transaction T \\<inter> bvars_transaction T = {}\n  fv_transaction T =\n  fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T) \\<union>\n  fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_selects T) \\<union>\n  fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_checks T) \\<union>\n  fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_updates T) \\<union>\n  fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T)\n  bvars_transaction T =\n  bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T) \\<union>\n  bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_selects T) \\<union>\n  bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_checks T) \\<union>\n  bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_updates T) \\<union>\n  bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T)\n\ngoal (1 subgoal):\n 1. set (transaction_fresh T) \\<inter>\n    bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_checks T) =\n    {}", "by blast"], ["proof (state)\nthis:\n  set (transaction_fresh T) \\<inter>\n  bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_checks T) =\n  {}\n\ngoal (9 subgoals):\n 1. x \\<notin> fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T)\n 2. x \\<notin> fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_selects T)\n 3. x \\<notin> fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_checks T)\n 4. x \\<notin> vars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T)\n 5. x \\<notin> vars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_selects T)\n 6. x \\<notin> vars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_checks T)\n 7. x \\<notin> bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T)\n 8. x \\<notin> bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_selects T)\n 9. x \\<notin> bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_checks T)", "have 2:\n      \"vars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T) = fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T)\"\n      \"vars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_selects T) = fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_selects T)\"\n      \"bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T) = {}\"\n      \"bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_selects T) = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (vars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T) =\n     fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T) &&&\n     vars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_selects T) =\n     fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_selects T)) &&&\n    bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T) = {} &&&\n    bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_selects T) = {}", "using bvars_wellformed_transaction_unfold[OF T] bvars_transaction_unfold[of T]\n          vars\\<^sub>s\\<^sub>s\\<^sub>t_is_fv\\<^sub>s\\<^sub>s\\<^sub>t_bvars\\<^sub>s\\<^sub>s\\<^sub>t[of \"unlabel (transaction_receive T)\"]\n          vars\\<^sub>s\\<^sub>s\\<^sub>t_is_fv\\<^sub>s\\<^sub>s\\<^sub>t_bvars\\<^sub>s\\<^sub>s\\<^sub>t[of \"unlabel (transaction_selects T)\"]"], ["proof (prove)\nusing this:\n  bvars_transaction T =\n  bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_checks T)\n  bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T) = {}\n  bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_selects T) = {}\n  bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_updates T) = {}\n  bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T) = {}\n  bvars_transaction T =\n  bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T) \\<union>\n  bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_selects T) \\<union>\n  bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_checks T) \\<union>\n  bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_updates T) \\<union>\n  bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T)\n  vars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T) =\n  fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T) \\<union>\n  bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T)\n  vars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_selects T) =\n  fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_selects T) \\<union>\n  bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_selects T)\n\ngoal (1 subgoal):\n 1. (vars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T) =\n     fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T) &&&\n     vars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_selects T) =\n     fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_selects T)) &&&\n    bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T) = {} &&&\n    bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_selects T) = {}", "by blast+"], ["proof (state)\nthis:\n  vars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T) =\n  fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T)\n  vars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_selects T) =\n  fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_selects T)\n  bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T) = {}\n  bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_selects T) = {}\n\ngoal (9 subgoals):\n 1. x \\<notin> fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T)\n 2. x \\<notin> fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_selects T)\n 3. x \\<notin> fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_checks T)\n 4. x \\<notin> vars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T)\n 5. x \\<notin> vars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_selects T)\n 6. x \\<notin> vars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_checks T)\n 7. x \\<notin> bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T)\n 8. x \\<notin> bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_selects T)\n 9. x \\<notin> bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_checks T)", "show ?A ?B ?C ?D ?E ?G ?H ?I"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((x \\<notin> fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                  (transaction_receive T) &&&\n      x \\<notin> fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                  (transaction_selects T)) &&&\n     x \\<notin> fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                 (transaction_checks T) &&&\n     x \\<notin> vars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                 (transaction_receive T)) &&&\n    (x \\<notin> vars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                 (transaction_selects T) &&&\n     x \\<notin> bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                 (transaction_receive T)) &&&\n    x \\<notin> bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                (transaction_selects T) &&&\n    x \\<notin> bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_checks T)", "using 0 1 2 x"], ["proof (prove)\nusing this:\n  set (transaction_fresh T)\n  \\<subseteq> fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n               (transaction_updates T) \\<union>\n              fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_send T)\n  set (transaction_fresh T) \\<inter>\n  fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T) =\n  {}\n  set (transaction_fresh T) \\<inter>\n  fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_selects T) =\n  {}\n  fv_transaction T \\<inter> bvars_transaction T = {}\n  fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_checks T)\n  \\<subseteq> fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n               (transaction_receive T) \\<union>\n              fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_selects T)\n  set (transaction_fresh T) \\<inter>\n  bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_checks T) =\n  {}\n  vars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T) =\n  fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T)\n  vars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_selects T) =\n  fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_selects T)\n  bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T) = {}\n  bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_selects T) = {}\n  x \\<in> set (transaction_fresh T)\n\ngoal (1 subgoal):\n 1. ((x \\<notin> fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                  (transaction_receive T) &&&\n      x \\<notin> fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                  (transaction_selects T)) &&&\n     x \\<notin> fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                 (transaction_checks T) &&&\n     x \\<notin> vars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                 (transaction_receive T)) &&&\n    (x \\<notin> vars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                 (transaction_selects T) &&&\n     x \\<notin> bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                 (transaction_receive T)) &&&\n    x \\<notin> bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                (transaction_selects T) &&&\n    x \\<notin> bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_checks T)", "by fast+"], ["proof (state)\nthis:\n  x \\<notin> fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T)\n  x \\<notin> fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_selects T)\n  x \\<notin> fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_checks T)\n  x \\<notin> vars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T)\n  x \\<notin> vars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_selects T)\n  x \\<notin> bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T)\n  x \\<notin> bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_selects T)\n  x \\<notin> bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_checks T)\n\ngoal (1 subgoal):\n 1. x \\<notin> vars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_checks T)", "show ?F"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<notin> vars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_checks T)", "using 0(2,3,5) 1 x vars\\<^sub>s\\<^sub>s\\<^sub>t_is_fv\\<^sub>s\\<^sub>s\\<^sub>t_bvars\\<^sub>s\\<^sub>s\\<^sub>t[of \"unlabel (transaction_checks T)\"]"], ["proof (prove)\nusing this:\n  set (transaction_fresh T) \\<inter>\n  fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_receive T) =\n  {}\n  set (transaction_fresh T) \\<inter>\n  fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_selects T) =\n  {}\n  fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_checks T)\n  \\<subseteq> fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n               (transaction_receive T) \\<union>\n              fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_selects T)\n  set (transaction_fresh T) \\<inter>\n  bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_checks T) =\n  {}\n  x \\<in> set (transaction_fresh T)\n  vars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_checks T) =\n  fv\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_checks T) \\<union>\n  bvars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_checks T)\n\ngoal (1 subgoal):\n 1. x \\<notin> vars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_checks T)", "by fast"], ["proof (state)\nthis:\n  x \\<notin> vars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (transaction_checks T)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma transaction_proj_member:\n  assumes \"T \\<in> set P\"\n  shows \"transaction_proj n T \\<in> set (map (transaction_proj n) P)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. transaction_proj n T \\<in> set (map (transaction_proj n) P)", "using assms"], ["proof (prove)\nusing this:\n  T \\<in> set P\n\ngoal (1 subgoal):\n 1. transaction_proj n T \\<in> set (map (transaction_proj n) P)", "by simp"], ["", "lemma transaction_strand_proj:\n  \"transaction_strand (transaction_proj n T) = proj n (transaction_strand T)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. transaction_strand (transaction_proj n T) =\n    proj n (transaction_strand T)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. transaction_strand (transaction_proj n T) =\n    proj n (transaction_strand T)", "obtain A B C D E F where \"T = Transaction A B C D E F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>A B C D E F.\n        T = Transaction A B C D E F \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (cases T) simp"], ["proof (state)\nthis:\n  T = Transaction A B C D E F\n\ngoal (1 subgoal):\n 1. transaction_strand (transaction_proj n T) =\n    proj n (transaction_strand T)", "thus ?thesis"], ["proof (prove)\nusing this:\n  T = Transaction A B C D E F\n\ngoal (1 subgoal):\n 1. transaction_strand (transaction_proj n T) =\n    proj n (transaction_strand T)", "using transaction_proj.simps[of n A B C D E F]"], ["proof (prove)\nusing this:\n  T = Transaction A B C D E F\n  transaction_proj n (Transaction A B C D E F) =\n  (let f = proj n in Transaction A (f B) (f C) (f D) (f E) (f F))\n\ngoal (1 subgoal):\n 1. transaction_strand (transaction_proj n T) =\n    proj n (transaction_strand T)", "unfolding transaction_strand_def proj_def Let_def"], ["proof (prove)\nusing this:\n  T = Transaction A B C D E F\n  transaction_proj n (Transaction A B C D E F) =\n  Transaction A (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) B)\n   (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) C)\n   (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) D)\n   (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) E)\n   (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) F)\n\ngoal (1 subgoal):\n 1. transaction_receive (transaction_proj n T) @\n    transaction_selects (transaction_proj n T) @\n    transaction_checks (transaction_proj n T) @\n    transaction_updates (transaction_proj n T) @\n    transaction_send (transaction_proj n T) =\n    filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s)\n     (transaction_receive T @\n      transaction_selects T @\n      transaction_checks T @ transaction_updates T @ transaction_send T)", "by auto"], ["proof (state)\nthis:\n  transaction_strand (transaction_proj n T) = proj n (transaction_strand T)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma transaction_proj_fresh_eq:\n  \"transaction_fresh (transaction_proj n T) = transaction_fresh T\""], ["proof (prove)\ngoal (1 subgoal):\n 1. transaction_fresh (transaction_proj n T) = transaction_fresh T", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. transaction_fresh (transaction_proj n T) = transaction_fresh T", "obtain A B C D E F where \"T = Transaction A B C D E F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>A B C D E F.\n        T = Transaction A B C D E F \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (cases T) simp"], ["proof (state)\nthis:\n  T = Transaction A B C D E F\n\ngoal (1 subgoal):\n 1. transaction_fresh (transaction_proj n T) = transaction_fresh T", "thus ?thesis"], ["proof (prove)\nusing this:\n  T = Transaction A B C D E F\n\ngoal (1 subgoal):\n 1. transaction_fresh (transaction_proj n T) = transaction_fresh T", "using transaction_proj.simps[of n A B C D E F]"], ["proof (prove)\nusing this:\n  T = Transaction A B C D E F\n  transaction_proj n (Transaction A B C D E F) =\n  (let f = proj n in Transaction A (f B) (f C) (f D) (f E) (f F))\n\ngoal (1 subgoal):\n 1. transaction_fresh (transaction_proj n T) = transaction_fresh T", "unfolding transaction_fresh_def proj_def Let_def"], ["proof (prove)\nusing this:\n  T = Transaction A B C D E F\n  transaction_proj n (Transaction A B C D E F) =\n  Transaction A (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) B)\n   (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) C)\n   (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) D)\n   (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) E)\n   (filter (\\<lambda>s. is_LabelN n s \\<or> is_LabelS s) F)\n\ngoal (1 subgoal):\n 1. (case transaction_proj n T of\n     Transaction x1 x2 x3 x4 x5 x6 \\<Rightarrow> x1) =\n    (case T of Transaction x1 x2 x3 x4 x5 x6 \\<Rightarrow> x1)", "by auto"], ["proof (state)\nthis:\n  transaction_fresh (transaction_proj n T) = transaction_fresh T\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma transaction_proj_trms_subset:\n  \"trms_transaction (transaction_proj n T) \\<subseteq> trms_transaction T\""], ["proof (prove)\ngoal (1 subgoal):\n 1. trms_transaction (transaction_proj n T) \\<subseteq> trms_transaction T", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. trms_transaction (transaction_proj n T) \\<subseteq> trms_transaction T", "obtain A B C D E F where \"T = Transaction A B C D E F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>A B C D E F.\n        T = Transaction A B C D E F \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (cases T) simp"], ["proof (state)\nthis:\n  T = Transaction A B C D E F\n\ngoal (1 subgoal):\n 1. trms_transaction (transaction_proj n T) \\<subseteq> trms_transaction T", "thus ?thesis"], ["proof (prove)\nusing this:\n  T = Transaction A B C D E F\n\ngoal (1 subgoal):\n 1. trms_transaction (transaction_proj n T) \\<subseteq> trms_transaction T", "using transaction_proj.simps[of n A B C D E F] trms\\<^sub>s\\<^sub>s\\<^sub>t_proj_subset(1)[of n]"], ["proof (prove)\nusing this:\n  T = Transaction A B C D E F\n  transaction_proj n (Transaction A B C D E F) =\n  (let f = proj n in Transaction A (f B) (f C) (f D) (f E) (f F))\n  trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (proj n ?A)\n  \\<subseteq> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t ?A\n\ngoal (1 subgoal):\n 1. trms_transaction (transaction_proj n T) \\<subseteq> trms_transaction T", "unfolding transaction_fresh_def Let_def transaction_strand_def"], ["proof (prove)\nusing this:\n  T = Transaction A B C D E F\n  transaction_proj n (Transaction A B C D E F) =\n  Transaction A (proj n B) (proj n C) (proj n D) (proj n E) (proj n F)\n  trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (proj n ?A)\n  \\<subseteq> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t ?A\n\ngoal (1 subgoal):\n 1. trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (transaction_receive (transaction_proj n T) @\n      transaction_selects (transaction_proj n T) @\n      transaction_checks (transaction_proj n T) @\n      transaction_updates (transaction_proj n T) @\n      transaction_send (transaction_proj n T))\n    \\<subseteq> trms\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                 (transaction_receive T @\n                  transaction_selects T @\n                  transaction_checks T @\n                  transaction_updates T @ transaction_send T)", "by auto"], ["proof (state)\nthis:\n  trms_transaction (transaction_proj n T) \\<subseteq> trms_transaction T\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma transaction_proj_vars_subset:\n  \"vars_transaction (transaction_proj n T) \\<subseteq> vars_transaction T\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vars_transaction (transaction_proj n T) \\<subseteq> vars_transaction T", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. vars_transaction (transaction_proj n T) \\<subseteq> vars_transaction T", "obtain A B C D E F where \"T = Transaction A B C D E F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>A B C D E F.\n        T = Transaction A B C D E F \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (cases T) simp"], ["proof (state)\nthis:\n  T = Transaction A B C D E F\n\ngoal (1 subgoal):\n 1. vars_transaction (transaction_proj n T) \\<subseteq> vars_transaction T", "thus ?thesis"], ["proof (prove)\nusing this:\n  T = Transaction A B C D E F\n\ngoal (1 subgoal):\n 1. vars_transaction (transaction_proj n T) \\<subseteq> vars_transaction T", "using transaction_proj.simps[of n A B C D E F]\n          sst_vars_proj_subset(3)[of n \"transaction_strand T\"]"], ["proof (prove)\nusing this:\n  T = Transaction A B C D E F\n  transaction_proj n (Transaction A B C D E F) =\n  (let f = proj n in Transaction A (f B) (f C) (f D) (f E) (f F))\n  vars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t (proj n (transaction_strand T))\n  \\<subseteq> vars_transaction T\n\ngoal (1 subgoal):\n 1. vars_transaction (transaction_proj n T) \\<subseteq> vars_transaction T", "unfolding transaction_fresh_def Let_def transaction_strand_def"], ["proof (prove)\nusing this:\n  T = Transaction A B C D E F\n  transaction_proj n (Transaction A B C D E F) =\n  Transaction A (proj n B) (proj n C) (proj n D) (proj n E) (proj n F)\n  vars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n   (proj n\n     (transaction_receive T @\n      transaction_selects T @\n      transaction_checks T @ transaction_updates T @ transaction_send T))\n  \\<subseteq> vars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n               (transaction_receive T @\n                transaction_selects T @\n                transaction_checks T @\n                transaction_updates T @ transaction_send T)\n\ngoal (1 subgoal):\n 1. vars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n     (transaction_receive (transaction_proj n T) @\n      transaction_selects (transaction_proj n T) @\n      transaction_checks (transaction_proj n T) @\n      transaction_updates (transaction_proj n T) @\n      transaction_send (transaction_proj n T))\n    \\<subseteq> vars\\<^sub>l\\<^sub>s\\<^sub>s\\<^sub>t\n                 (transaction_receive T @\n                  transaction_selects T @\n                  transaction_checks T @\n                  transaction_updates T @ transaction_send T)", "by simp"], ["proof (state)\nthis:\n  vars_transaction (transaction_proj n T) \\<subseteq> vars_transaction T\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}