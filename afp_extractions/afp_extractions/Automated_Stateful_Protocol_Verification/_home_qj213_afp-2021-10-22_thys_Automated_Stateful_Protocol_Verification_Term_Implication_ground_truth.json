{"file_name": "/home/qj213/afp-2021-10-22/thys/Automated_Stateful_Protocol_Verification/Term_Implication.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Automated_Stateful_Protocol_Verification", "problem_names": ["lemma timpl_apply_Fun:\n  assumes \"\\<And>i. i < length T \\<Longrightarrow> S ! i \\<in> set \\<langle>a --\\<guillemotright> b\\<rangle>\\<langle>T ! i\\<rangle>\"\n    and \"length T = length S\"\n  shows \"Fun f S \\<in> set \\<langle>a --\\<guillemotright> b\\<rangle>\\<langle>Fun f T\\<rangle>\"", "lemma timpl_apply_Abs:\n  assumes \"\\<And>i. i < length T \\<Longrightarrow> S ! i \\<in> set \\<langle>a --\\<guillemotright> b\\<rangle>\\<langle>T ! i\\<rangle>\"\n    and \"length T = length S\"\n  shows \"Fun (Abs b) S \\<in> set \\<langle>a --\\<guillemotright> b\\<rangle>\\<langle>Fun (Abs a) T\\<rangle>\"", "lemma timpl_apply_refl: \"t \\<in> set \\<langle>a --\\<guillemotright> b\\<rangle>\\<langle>t\\<rangle>\"", "lemma timpl_apply_const: \"Fun (Abs b) [] \\<in> set \\<langle>a --\\<guillemotright> b\\<rangle>\\<langle>Fun (Abs a) []\\<rangle>\"", "lemma timpl_apply_const':\n  \"c = a \\<Longrightarrow> set \\<langle>a --\\<guillemotright> b\\<rangle>\\<langle>Fun (Abs c) []\\<rangle> = {Fun (Abs b) [], Fun (Abs c) []}\"\n  \"c \\<noteq> a \\<Longrightarrow> set \\<langle>a --\\<guillemotright> b\\<rangle>\\<langle>Fun (Abs c) []\\<rangle> = {Fun (Abs c) []}\"", "lemma timpl_apply_term_subst:\n  \"s \\<in> set \\<langle>a --\\<guillemotright> b\\<rangle>\\<langle>t\\<rangle> \\<Longrightarrow> s \\<cdot> \\<delta> \\<in> set \\<langle>a --\\<guillemotright> b\\<rangle>\\<langle>t \\<cdot> \\<delta>\\<rangle>\"", "lemma timpl_apply_inv:\n  assumes \"Fun h S \\<in> set \\<langle>a --\\<guillemotright> b\\<rangle>\\<langle>Fun f T\\<rangle>\"\n  shows \"length T = length S\"\n    and \"\\<And>i. i < length T \\<Longrightarrow> S ! i \\<in> set \\<langle>a --\\<guillemotright> b\\<rangle>\\<langle>T ! i\\<rangle>\"\n    and \"f \\<noteq> h \\<Longrightarrow> f = Abs a \\<and> h = Abs b\"", "lemma timpl_apply_inv':\n  assumes \"s \\<in> set \\<langle>a --\\<guillemotright> b\\<rangle>\\<langle>Fun f T\\<rangle>\"\n  shows \"\\<exists>g S. s = Fun g S\"", "lemma timpl_apply_term_Var_iff:\n  \"Var x \\<in> set \\<langle>a --\\<guillemotright> b\\<rangle>\\<langle>t\\<rangle> \\<longleftrightarrow> t = Var x\"", "lemma timpl_closure_setI:\n  \"t \\<in> M \\<Longrightarrow> t \\<in> timpl_closure_set M TI\"", "lemma timpl_closure_set_empty_timpls:\n  \"timpl_closure t {} = {t}\" (is \"?A = ?B\")", "lemmas timpl_closure_set_is_timpl_closure_union = meta_eq_to_obj_eq[OF timpl_closure_set_def]", "lemma term_variants_pred_eq_case_Abs:\n  fixes a b\n  defines \"P \\<equiv> (\\<lambda>_. [])(Abs a := [Abs b])\"\n  assumes \"term_variants_pred P t s\" \"\\<forall>f \\<in> funs_term s. \\<not>is_Abs f\"\n  shows \"t = s\"", "lemma timpl_closure'_step_inv:\n  assumes \"(t,s) \\<in> timpl_closure'_step TI\"\n  obtains a b where \"(a,b) \\<in> TI\" \"term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) t s\"", "lemma timpl_closure_mono:\n  assumes \"TI \\<subseteq> TI'\"\n  shows \"timpl_closure t TI \\<subseteq> timpl_closure t TI'\"", "lemma timpl_closure_set_mono:\n  assumes \"M \\<subseteq> M'\" \"TI \\<subseteq> TI'\"\n  shows \"timpl_closure_set M TI \\<subseteq> timpl_closure_set M' TI'\"", "lemma timpl_closure_idem:\n  \"timpl_closure_set (timpl_closure t TI) TI = timpl_closure t TI\" (is \"?A = ?B\")", "lemma timpl_closure_set_idem:\n  \"timpl_closure_set (timpl_closure_set M TI) TI = timpl_closure_set M TI\"", "lemma timpl_closure_set_mono_timpl_closure_set:\n  assumes N: \"N \\<subseteq> timpl_closure_set M TI\"\n  shows \"timpl_closure_set N TI \\<subseteq> timpl_closure_set M TI\"", "lemma timpl_closure_is_timpl_closure':\n  \"s \\<in> timpl_closure t TI \\<longleftrightarrow> (t,s) \\<in> timpl_closure' TI\"", "lemma timpl_closure'_mono:\n  assumes \"TI \\<subseteq> TI'\"\n  shows \"timpl_closure' TI \\<subseteq> timpl_closure' TI'\"", "lemma timpl_closureton_is_timpl_closure:\n  \"timpl_closure_set {t} TI = timpl_closure t TI\"", "lemma timpl_closure'_timpls_trancl_subset:\n  \"timpl_closure' (c\\<^sup>+) \\<subseteq> timpl_closure' c\"", "lemma timpl_closure'_timpls_trancl_subset':\n  \"timpl_closure' {(a,b) \\<in> c\\<^sup>+. a \\<noteq> b} \\<subseteq> timpl_closure' c\"", "lemma timpl_closure_set_timpls_trancl_subset:\n  \"timpl_closure_set M (c\\<^sup>+) \\<subseteq> timpl_closure_set M c\"", "lemma timpl_closure_set_timpls_trancl_subset':\n  \"timpl_closure_set M {(a,b) \\<in> c\\<^sup>+. a \\<noteq> b} \\<subseteq> timpl_closure_set M c\"", "lemma timpl_closure'_timpls_trancl_supset':\n  \"timpl_closure' c \\<subseteq> timpl_closure' {(a,b) \\<in> c\\<^sup>+. a \\<noteq> b}\"", "lemma timpl_closure'_timpls_trancl_supset:\n  \"timpl_closure' c \\<subseteq> timpl_closure' (c\\<^sup>+)\"", "lemma timpl_closure'_timpls_trancl_eq:\n  \"timpl_closure' (c\\<^sup>+) = timpl_closure' c\"", "lemma timpl_closure'_timpls_trancl_eq':\n  \"timpl_closure' {(a,b) \\<in> c\\<^sup>+. a \\<noteq> b} = timpl_closure' c\"", "lemma timpl_closure'_timpls_rtrancl_subset:\n  \"timpl_closure' (c\\<^sup>*) \\<subseteq> timpl_closure' c\"", "lemma timpl_closure'_timpls_rtrancl_supset:\n  \"timpl_closure' c \\<subseteq> timpl_closure' (c\\<^sup>*)\"", "lemma timpl_closure'_timpls_rtrancl_eq:\n  \"timpl_closure' (c\\<^sup>*) = timpl_closure' c\"", "lemma timpl_closure_timpls_trancl_eq:\n  \"timpl_closure t (c\\<^sup>+) = timpl_closure t c\"", "lemma timpl_closure_set_timpls_trancl_eq:\n  \"timpl_closure_set M (c\\<^sup>+) = timpl_closure_set M c\"", "lemma timpl_closure_set_timpls_trancl_eq':\n  \"timpl_closure_set M {(a,b) \\<in> c\\<^sup>+. a \\<noteq> b} = timpl_closure_set M c\"", "lemma timpl_closure_Var_in_iff:\n  \"Var x \\<in> timpl_closure t TI \\<longleftrightarrow> t = Var x\" (is \"?A \\<longleftrightarrow> ?B\")", "lemma timpl_closure_set_Var_in_iff:\n  \"Var x \\<in> timpl_closure_set M TI \\<longleftrightarrow> Var x \\<in> M\"", "lemma timpl_closure_Var_inv:\n  assumes \"t \\<in> timpl_closure (Var x) TI\"\n  shows \"t = Var x\"", "lemma timpls_Un_mono: \"mono (\\<lambda>X. FP \\<union> (\\<Union>x \\<in> X. \\<Union>(a,b) \\<in> TI. set \\<langle>a --\\<guillemotright> b\\<rangle>\\<langle>x\\<rangle>))\"", "lemma timpl_closure_set_lfp:\n  fixes M TI\n  defines \"f \\<equiv> \\<lambda>X. M \\<union> (\\<Union>x \\<in> X. \\<Union>(a,b) \\<in> TI. set \\<langle>a --\\<guillemotright> b\\<rangle>\\<langle>x\\<rangle>)\"\n  shows \"lfp f = timpl_closure_set M TI\"", "lemma timpl_closure_set_supset:\n  assumes \"\\<forall>t \\<in> FP. t \\<in> closure\"\n  and \"\\<forall>t \\<in> closure. \\<forall>(a,b) \\<in> TI. \\<forall>s \\<in> set \\<langle>a --\\<guillemotright> b\\<rangle>\\<langle>t\\<rangle>. s \\<in> closure\"\n  shows \"timpl_closure_set FP TI \\<subseteq> closure\"", "lemma timpl_closure_set_supset':\n  assumes \"\\<forall>t \\<in> FP. \\<forall>(a,b) \\<in> TI. \\<forall>s \\<in> set \\<langle>a --\\<guillemotright> b\\<rangle>\\<langle>t\\<rangle>. s \\<in> FP\"\n  shows \"timpl_closure_set FP TI \\<subseteq> FP\"", "lemma timpl_closure'_param:\n  assumes \"(t,s) \\<in> timpl_closure' c\"\n    and fg: \"f = g \\<or> (\\<exists>a b. (a,b) \\<in> c \\<and> f = Abs a \\<and> g = Abs b)\"\n  shows \"(Fun f (S@t#T), Fun g (S@s#T)) \\<in> timpl_closure' c\"", "lemma timpl_closure'_param':\n  assumes \"(t,s) \\<in> timpl_closure' c\"\n  shows \"(Fun f (S@t#T), Fun f (S@s#T)) \\<in> timpl_closure' c\"", "lemma timpl_closure_FunI:\n  assumes IH: \"\\<And>i. i < length T \\<Longrightarrow> (T ! i, S ! i) \\<in> timpl_closure' c\"\n    and len: \"length T = length S\"\n    and fg: \"f = g \\<or> (\\<exists>a b. (a,b) \\<in> c\\<^sup>+ \\<and> f = Abs a \\<and> g = Abs b)\"\n  shows \"(Fun f T, Fun g S) \\<in> timpl_closure' c\"", "lemma timpl_closure_FunI':\n  assumes IH: \"\\<And>i. i < length T \\<Longrightarrow> (T ! i, S ! i) \\<in> timpl_closure' c\"\n    and len: \"length T = length S\"\n  shows \"(Fun f T, Fun f S) \\<in> timpl_closure' c\"", "lemma timpl_closure_FunI2:\n  fixes f g::\"('a, 'b, 'c) prot_fun\"\n  assumes IH: \"\\<And>i. i < length T \\<Longrightarrow> \\<exists>u. (T!i, u) \\<in> timpl_closure' c \\<and> (S!i, u) \\<in> timpl_closure' c\"\n    and len: \"length T = length S\"\n    and fg: \"f = g \\<or> (\\<exists>a b d. (a, d) \\<in> c\\<^sup>+ \\<and> (b, d) \\<in> c\\<^sup>+ \\<and> f = Abs a \\<and> g = Abs b)\"\n  shows \"\\<exists>h U. (Fun f T, Fun h U) \\<in> timpl_closure' c \\<and> (Fun g S, Fun h U) \\<in> timpl_closure' c\"", "lemma timpl_closure_FunI3:\n  fixes f g::\"('a, 'b, 'c) prot_fun\"\n  assumes IH: \"\\<And>i. i < length T \\<Longrightarrow> \\<exists>u. (T!i, u) \\<in> timpl_closure' c \\<and> (S!i, u) \\<in> timpl_closure' c\"\n    and len: \"length T = length S\"\n    and fg: \"f = g \\<or> (\\<exists>a b d. (a, d) \\<in> c \\<and> (b, d) \\<in> c \\<and> f = Abs a \\<and> g = Abs b)\"\n  shows \"\\<exists>h U. (Fun f T, Fun h U) \\<in> timpl_closure' c \\<and> (Fun g S, Fun h U) \\<in> timpl_closure' c\"", "lemma timpl_closure_fv_eq:\n  assumes \"s \\<in> timpl_closure t T\"\n  shows \"fv s = fv t\"", "lemma (in stateful_protocol_model) timpl_closure_subst:\n  assumes t: \"wf\\<^sub>t\\<^sub>r\\<^sub>m t\" \"\\<forall>x \\<in> fv t. \\<exists>a. \\<Gamma>\\<^sub>v x = TAtom (Atom a)\"\n    and \\<delta>: \"wt\\<^sub>s\\<^sub>u\\<^sub>b\\<^sub>s\\<^sub>t \\<delta>\" \"wf\\<^sub>t\\<^sub>r\\<^sub>m\\<^sub>s (subst_range \\<delta>)\"\n  shows \"timpl_closure (t \\<cdot> \\<delta>) T = timpl_closure t T \\<cdot>\\<^sub>s\\<^sub>e\\<^sub>t \\<delta>\"", "lemma (in stateful_protocol_model) timpl_closure_subst_subset:\n  assumes t: \"t \\<in> M\"\n    and M: \"wf\\<^sub>t\\<^sub>r\\<^sub>m\\<^sub>s M\" \"\\<forall>x \\<in> fv\\<^sub>s\\<^sub>e\\<^sub>t M. \\<exists>a. \\<Gamma>\\<^sub>v x = TAtom (Atom a)\"\n    and \\<delta>: \"wt\\<^sub>s\\<^sub>u\\<^sub>b\\<^sub>s\\<^sub>t \\<delta>\" \"wf\\<^sub>t\\<^sub>r\\<^sub>m\\<^sub>s (subst_range \\<delta>)\" \"ground (subst_range \\<delta>)\" \"subst_domain \\<delta> \\<subseteq> fv\\<^sub>s\\<^sub>e\\<^sub>t M\"\n    and M_supset: \"timpl_closure t T \\<subseteq> M\"\n  shows \"timpl_closure (t \\<cdot> \\<delta>) T \\<subseteq> M \\<cdot>\\<^sub>s\\<^sub>e\\<^sub>t \\<delta>\"", "lemma (in stateful_protocol_model) timpl_closure_set_subst_subset:\n  assumes M: \"wf\\<^sub>t\\<^sub>r\\<^sub>m\\<^sub>s M\" \"\\<forall>x \\<in> fv\\<^sub>s\\<^sub>e\\<^sub>t M. \\<exists>a. \\<Gamma>\\<^sub>v x = TAtom (Atom a)\"\n    and \\<delta>: \"wt\\<^sub>s\\<^sub>u\\<^sub>b\\<^sub>s\\<^sub>t \\<delta>\" \"wf\\<^sub>t\\<^sub>r\\<^sub>m\\<^sub>s (subst_range \\<delta>)\" \"ground (subst_range \\<delta>)\" \"subst_domain \\<delta> \\<subseteq> fv\\<^sub>s\\<^sub>e\\<^sub>t M\"\n    and M_supset: \"timpl_closure_set M T \\<subseteq> M\"\n  shows \"timpl_closure_set (M \\<cdot>\\<^sub>s\\<^sub>e\\<^sub>t \\<delta>) T \\<subseteq> M \\<cdot>\\<^sub>s\\<^sub>e\\<^sub>t \\<delta>\"", "lemma timpl_closure_set_Union:\n  \"timpl_closure_set (\\<Union>Ms) T = (\\<Union>M \\<in> Ms. timpl_closure_set M T)\"", "lemma timpl_closure_set_Union_subst_set:\n  assumes \"s \\<in> timpl_closure_set (\\<Union>{M \\<cdot>\\<^sub>s\\<^sub>e\\<^sub>t \\<delta> | \\<delta>. P \\<delta>}) T\"\n  shows \"\\<exists>\\<delta>. P \\<delta> \\<and> s \\<in> timpl_closure_set (M \\<cdot>\\<^sub>s\\<^sub>e\\<^sub>t \\<delta>) T\"", "lemma timpl_closure_set_Union_subst_singleton:\n  assumes \"s \\<in> timpl_closure_set {t \\<cdot> \\<delta> | \\<delta>. P \\<delta>} T\"\n  shows \"\\<exists>\\<delta>. P \\<delta> \\<and> s \\<in> timpl_closure_set {t \\<cdot> \\<delta>} T\"", "lemma timpl_closure'_inv:\n  assumes \"(s, t) \\<in> timpl_closure' TI\"\n  shows \"(\\<exists>x. s = Var x \\<and> t = Var x) \\<or> (\\<exists>f g S T. s = Fun f S \\<and> t = Fun g T \\<and> length S = length T)\"", "lemma timpl_closure'_inv':\n  assumes \"(s, t) \\<in> timpl_closure' TI\"\n  shows \"(\\<exists>x. s = Var x \\<and> t = Var x) \\<or>\n         (\\<exists>f g S T. s = Fun f S \\<and> t = Fun g T \\<and> length S = length T \\<and>\n                    (\\<forall>i < length T. (S ! i, T ! i) \\<in> timpl_closure' TI) \\<and>\n                    (f \\<noteq> g \\<longrightarrow> is_Abs f \\<and> is_Abs g \\<and> (the_Abs f, the_Abs g) \\<in> TI\\<^sup>+))\"\n    (is \"?A s t \\<or> ?B s t (timpl_closure' TI)\")", "lemma timpl_closure'_inv'':\n  assumes \"(Fun f S, Fun g T) \\<in> timpl_closure' TI\"\n  shows \"length S = length T\"\n    and \"\\<And>i. i < length T \\<Longrightarrow> (S ! i, T ! i) \\<in> timpl_closure' TI\"\n    and \"f \\<noteq> g \\<Longrightarrow> is_Abs f \\<and> is_Abs g \\<and> (the_Abs f, the_Abs g) \\<in> TI\\<^sup>+\"", "lemma timpl_closure_Fun_inv:\n  assumes \"s \\<in> timpl_closure (Fun f T) TI\"\n  shows \"\\<exists>g S. s = Fun g S\"", "lemma timpl_closure_Fun_inv':\n  assumes \"Fun g S \\<in> timpl_closure (Fun f T) TI\"\n  shows \"length S = length T\"\n    and \"\\<And>i. i < length S \\<Longrightarrow> S ! i \\<in> timpl_closure (T ! i) TI\"\n    and \"f \\<noteq> g \\<Longrightarrow> is_Abs f \\<and> is_Abs g \\<and> (the_Abs f, the_Abs g) \\<in> TI\\<^sup>+\"", "lemma timpl_closure_Fun_not_Var[simp]:\n  \"Fun f T \\<notin> timpl_closure (Var x) TI\"", "lemma timpl_closure_Var_not_Fun[simp]:\n  \"Var x \\<notin> timpl_closure (Fun f T) TI\"", "lemma (in stateful_protocol_model) timpl_closure_wf_trms:\n  assumes m: \"wf\\<^sub>t\\<^sub>r\\<^sub>m m\"\n  shows \"wf\\<^sub>t\\<^sub>r\\<^sub>m\\<^sub>s (timpl_closure m TI)\"", "lemma (in stateful_protocol_model) timpl_closure_set_wf_trms:\n  assumes M: \"wf\\<^sub>t\\<^sub>r\\<^sub>m\\<^sub>s M\"\n  shows \"wf\\<^sub>t\\<^sub>r\\<^sub>m\\<^sub>s (timpl_closure_set M TI)\"", "lemma timpl_closure_Fu_inv:\n  assumes \"t \\<in> timpl_closure (Fun (Fu f) T) TI\"\n  shows \"\\<exists>S. length S = length T \\<and> t = Fun (Fu f) S\"", "lemma timpl_closure_Fu_inv':\n  assumes \"Fun (Fu f) T \\<in> timpl_closure t TI\"\n  shows \"\\<exists>S. length S = length T \\<and> t = Fun (Fu f) S\"", "lemma timpl_closure_no_Abs_eq:\n  assumes \"t \\<in> timpl_closure s TI\"\n    and \"\\<forall>f \\<in> funs_term t. \\<not>is_Abs f\"\n  shows \"t = s\"", "lemma timpl_closure_set_no_Abs_in_set:\n  assumes \"t \\<in> timpl_closure_set FP TI\"\n    and \"\\<forall>f \\<in> funs_term t. \\<not>is_Abs f\"\n  shows \"t \\<in> FP\"", "lemma timpl_closure_funs_term_subset:\n  \"\\<Union>(funs_term ` (timpl_closure t TI)) \\<subseteq> funs_term t \\<union> Abs ` snd ` TI\"\n  (is \"?A \\<subseteq> ?B \\<union> ?C\")", "lemma timpl_closure_set_funs_term_subset:\n  \"\\<Union>(funs_term ` (timpl_closure_set FP TI)) \\<subseteq> \\<Union>(funs_term ` FP) \\<union> Abs ` snd ` TI\"", "lemma funs_term_OCC_TI_subset:\n  defines \"absc \\<equiv> \\<lambda>a. Fun (Abs a) []\"\n  assumes OCC1: \"\\<forall>t \\<in> FP. \\<forall>f \\<in> funs_term t. is_Abs f \\<longrightarrow> f \\<in> Abs ` OCC\"\n    and OCC2: \"snd ` TI \\<subseteq> OCC\"\n  shows \"\\<forall>t \\<in> timpl_closure_set FP TI. \\<forall>f \\<in> funs_term t. is_Abs f \\<longrightarrow> f \\<in> Abs ` OCC\" (is ?A)\n    and \"\\<forall>t \\<in> absc ` OCC. \\<forall>(a,b) \\<in> TI. \\<forall>s \\<in> set \\<langle>a --\\<guillemotright> b\\<rangle>\\<langle>t\\<rangle>. s \\<in> absc ` OCC\" (is ?B)", "lemma (in stateful_protocol_model) intruder_synth_timpl_closure_set:\n  fixes M::\"('fun,'atom,'sets) prot_terms\" and t::\"('fun,'atom,'sets) prot_term\"\n  assumes \"M \\<turnstile>\\<^sub>c t\"\n    and \"s \\<in> timpl_closure t TI\"\n  shows \"timpl_closure_set M TI \\<turnstile>\\<^sub>c s\"", "lemma (in stateful_protocol_model) intruder_synth_timpl_closure':\n  fixes M::\"('fun,'atom,'sets) prot_terms\" and t::\"('fun,'atom,'sets) prot_term\"\n  assumes \"timpl_closure_set M TI \\<turnstile>\\<^sub>c t\"\n    and \"s \\<in> timpl_closure t TI\"\n  shows \"timpl_closure_set M TI \\<turnstile>\\<^sub>c s\"", "lemma timpl_closure_set_absc_subset_in:\n  defines \"absc \\<equiv> \\<lambda>a. Fun (Abs a) []\"\n  assumes A: \"timpl_closure_set (absc ` A) TI \\<subseteq> absc ` A\"\n    and a: \"a \\<in> A\" \"(a,b) \\<in> TI\\<^sup>+\"\n  shows \"b \\<in> A\"", "lemma in_trancl_closure_iff_in_trancl_fun:\n  \"(a,b) \\<in> (set TI)\\<^sup>+ \\<longleftrightarrow> in_trancl TI a b\" (is \"?A TI a b \\<longleftrightarrow> ?B TI a b\")", "lemma in_rtrancl_closure_iff_in_rtrancl_fun:\n  \"(a,b) \\<in> (set TI)\\<^sup>* \\<longleftrightarrow> in_rtrancl TI a b\"", "lemma in_trancl_mono:\n  assumes \"set TI \\<subseteq> set TI'\"\n    and \"in_trancl TI a b\"\n  shows \"in_trancl TI' a b\"", "lemma equal_mod_timpls_refl:\n  \"equal_mod_timpls TI t t\"", "lemma equal_mod_timpls_inv_Var:\n  \"equal_mod_timpls TI (Var x) t \\<Longrightarrow> t = Var x\" (is \"?A \\<Longrightarrow> ?C\")\n  \"equal_mod_timpls TI t (Var x) \\<Longrightarrow> t = Var x\" (is \"?B \\<Longrightarrow> ?C\")", "lemma equal_mod_timpls_inv:\n  assumes \"equal_mod_timpls TI (Fun f T) (Fun g S)\"\n  shows \"length T = length S\"\n    and \"\\<And>i. i < length T \\<Longrightarrow> equal_mod_timpls TI (T ! i) (S ! i)\"\n    and \"f \\<noteq> g \\<Longrightarrow> (is_Abs f \\<and> is_Abs g \\<and> (\n                      (the_Abs f, the_Abs g) \\<in> set TI \\<or> (the_Abs g, the_Abs f) \\<in> set TI \\<or>\n                      (\\<exists>ti \\<in> set TI. (the_Abs f, snd ti) \\<in> set TI \\<and>\n                                     (the_Abs g, snd ti) \\<in> set TI)))\"", "lemma equal_mod_timpls_inv':\n  assumes \"equal_mod_timpls TI (Fun f T) t\"\n  shows \"is_Fun t\"\n    and \"length T = length (args t)\"\n    and \"\\<And>i. i < length T \\<Longrightarrow> equal_mod_timpls TI (T ! i) (args t ! i)\"\n    and \"f \\<noteq> the_Fun t \\<Longrightarrow> (is_Abs f \\<and> is_Abs (the_Fun t) \\<and> (\n                      (the_Abs f, the_Abs (the_Fun t)) \\<in> set TI \\<or>\n                      (the_Abs (the_Fun t), the_Abs f) \\<in> set TI \\<or>\n                      (\\<exists>ti \\<in> set TI. (the_Abs f, snd ti) \\<in> set TI \\<and>\n                                     (the_Abs (the_Fun t), snd ti) \\<in> set TI)))\"\n    and \"\\<not>is_Abs f \\<Longrightarrow> f = the_Fun t\"", "lemma equal_mod_timpls_if_term_variants:\n  fixes s t::\"(('a, 'b, 'c) prot_fun, 'd) term\" and a b::\"'c set\"\n  defines \"P \\<equiv> (\\<lambda>_. [])(Abs a := [Abs b])\"\n  assumes st: \"term_variants_pred P s t\"\n    and ab: \"(a,b) \\<in> set TI\"\n  shows \"equal_mod_timpls TI s t\"", "lemma equal_mod_timpls_mono:\n  assumes \"set TI \\<subseteq> set TI'\"\n    and \"equal_mod_timpls TI s t\"\n  shows \"equal_mod_timpls TI' s t\"", "lemma equal_mod_timpls_refl_minus_eq:\n  \"equal_mod_timpls TI s t \\<longleftrightarrow> equal_mod_timpls (filter (\\<lambda>(a,b). a \\<noteq> b) TI) s t\"\n  (is \"?A \\<longleftrightarrow> ?B\")", "lemma timpls_transformable_to_refl:\n  \"timpls_transformable_to TI t t\" (is ?A)\n  \"timpls_transformable_to' TI t t\" (is ?B)", "lemma timpls_transformable_to_inv_Var:\n  \"timpls_transformable_to TI (Var x) t \\<Longrightarrow> t = Var x\" (is \"?A \\<Longrightarrow> ?C\")\n  \"timpls_transformable_to TI t (Var x) \\<Longrightarrow> t = Var x\" (is \"?B \\<Longrightarrow> ?C\")\n  \"timpls_transformable_to' TI (Var x) t \\<Longrightarrow> t = Var x\" (is \"?A' \\<Longrightarrow> ?C\")\n  \"timpls_transformable_to' TI t (Var x) \\<Longrightarrow> t = Var x\" (is \"?B' \\<Longrightarrow> ?C\")", "lemma timpls_transformable_to_inv:\n  assumes \"timpls_transformable_to TI (Fun f T) (Fun g S)\"\n  shows \"length T = length S\"\n    and \"\\<And>i. i < length T \\<Longrightarrow> timpls_transformable_to TI (T ! i) (S ! i)\"\n    and \"f \\<noteq> g \\<Longrightarrow> (is_Abs f \\<and> is_Abs g \\<and> (the_Abs f, the_Abs g) \\<in> set TI)\"", "lemma timpls_transformable_to'_inv:\n  assumes \"timpls_transformable_to' TI (Fun f T) (Fun g S)\"\n  shows \"length T = length S\"\n    and \"\\<And>i. i < length T \\<Longrightarrow> timpls_transformable_to' TI (T ! i) (S ! i)\"\n    and \"f \\<noteq> g \\<Longrightarrow> (is_Abs f \\<and> is_Abs g \\<and> in_trancl TI (the_Abs f) (the_Abs g))\"", "lemma timpls_transformable_to_inv':\n  assumes \"timpls_transformable_to TI (Fun f T) t\"\n  shows \"is_Fun t\"\n    and \"length T = length (args t)\"\n    and \"\\<And>i. i < length T \\<Longrightarrow> timpls_transformable_to TI (T ! i) (args t ! i)\"\n    and \"f \\<noteq> the_Fun t \\<Longrightarrow> (\n          is_Abs f \\<and> is_Abs (the_Fun t) \\<and> (the_Abs f, the_Abs (the_Fun t)) \\<in> set TI)\"\n    and \"\\<not>is_Abs f \\<Longrightarrow> f = the_Fun t\"", "lemma timpls_transformable_to'_inv':\n  assumes \"timpls_transformable_to' TI (Fun f T) t\"\n  shows \"is_Fun t\"\n    and \"length T = length (args t)\"\n    and \"\\<And>i. i < length T \\<Longrightarrow> timpls_transformable_to' TI (T ! i) (args t ! i)\"\n    and \"f \\<noteq> the_Fun t \\<Longrightarrow> (\n          is_Abs f \\<and> is_Abs (the_Fun t) \\<and> in_trancl TI (the_Abs f) (the_Abs (the_Fun t)))\"\n    and \"\\<not>is_Abs f \\<Longrightarrow> f = the_Fun t\"", "lemma timpls_transformable_to_size_eq:\n  fixes s t::\"(('b, 'c, 'a) prot_fun, 'd) term\"\n  shows \"timpls_transformable_to TI s t \\<Longrightarrow> size s = size t\" (is \"?A \\<Longrightarrow> ?C\")\n    and \"timpls_transformable_to' TI s t \\<Longrightarrow> size s = size t\" (is \"?B \\<Longrightarrow> ?C\")", "lemma timpls_transformable_to_if_term_variants:\n  fixes s t::\"(('a, 'b, 'c) prot_fun, 'd) term\" and a b::\"'c set\"\n  defines \"P \\<equiv> (\\<lambda>_. [])(Abs a := [Abs b])\"\n  assumes st: \"term_variants_pred P s t\"\n    and ab: \"(a,b) \\<in> set TI\"\n  shows \"timpls_transformable_to TI s t\"", "lemma timpls_transformable_to'_if_term_variants:\n  fixes s t::\"(('a, 'b, 'c) prot_fun, 'd) term\" and a b::\"'c set\"\n  defines \"P \\<equiv> (\\<lambda>_. [])(Abs a := [Abs b])\"\n  assumes st: \"term_variants_pred P s t\"\n    and ab: \"(a,b) \\<in> (set TI)\\<^sup>+\"\n  shows \"timpls_transformable_to' TI s t\"", "lemma timpls_transformable_to_trans:\n  assumes TI_trancl: \"\\<forall>(a,b) \\<in> (set TI)\\<^sup>+. a \\<noteq> b \\<longrightarrow> (a,b) \\<in> set TI\"\n    and st: \"timpls_transformable_to TI s t\"\n    and tu: \"timpls_transformable_to TI t u\"\n  shows \"timpls_transformable_to TI s u\"", "lemma timpls_transformable_to'_trans:\n  assumes st: \"timpls_transformable_to' TI s t\"\n    and tu: \"timpls_transformable_to' TI t u\"\n  shows \"timpls_transformable_to' TI s u\"", "lemma timpls_transformable_to_mono:\n  assumes \"set TI \\<subseteq> set TI'\"\n    and \"timpls_transformable_to TI s t\"\n  shows \"timpls_transformable_to TI' s t\"", "lemma timpls_transformable_to'_mono:\n  assumes \"set TI \\<subseteq> set TI'\"\n    and \"timpls_transformable_to' TI s t\"\n  shows \"timpls_transformable_to' TI' s t\"", "lemma timpls_transformable_to_refl_minus_eq:\n  \"timpls_transformable_to TI s t \\<longleftrightarrow> timpls_transformable_to (filter (\\<lambda>(a,b). a \\<noteq> b) TI) s t\"\n  (is \"?A \\<longleftrightarrow> ?B\")", "lemma timpls_transformable_to_iff_in_timpl_closure:\n  assumes \"set TI' = {(a,b) \\<in> (set TI)\\<^sup>+. a \\<noteq> b}\"\n  shows \"timpls_transformable_to TI' s t \\<longleftrightarrow> t \\<in> timpl_closure s (set TI)\" (is \"?A s t \\<longleftrightarrow> ?B s t\")", "lemma timpls_transformable_to'_iff_in_timpl_closure:\n  \"timpls_transformable_to' TI s t \\<longleftrightarrow> t \\<in> timpl_closure s (set TI)\" (is \"?A s t \\<longleftrightarrow> ?B s t\")", "lemma equal_mod_timpls_iff_ex_in_timpl_closure:\n  assumes \"set TI' = {(a,b) \\<in> TI\\<^sup>+. a \\<noteq> b}\"\n  shows \"equal_mod_timpls TI' s t \\<longleftrightarrow> (\\<exists>u. u \\<in> timpl_closure s TI \\<and> u \\<in> timpl_closure t TI)\"\n    (is \"?A s t \\<longleftrightarrow> ?B s t\")", "lemma timpls_transformable_to_pred_inv_Var:\n  assumes \"timpls_transformable_to_pred A (Var x) t\"\n  shows \"t = Var x\"", "lemma timpls_transformable_to_pred_inv:\n  assumes \"timpls_transformable_to_pred A (Fun f T) t\"\n  shows \"is_Fun t\"\n    and \"length T = length (args t)\"\n    and \"\\<And>i. i < length T \\<Longrightarrow> timpls_transformable_to_pred A (T ! i) (args t ! i)\"\n    and \"\\<not>is_Abs f \\<Longrightarrow> f = the_Fun t\"\n    and \"is_Abs f \\<Longrightarrow> (is_Abs (the_Fun t) \\<and> the_Abs (the_Fun t) \\<in> A)\"", "lemma timpls_transformable_to_pred_finite_aux1:\n  assumes f: \"\\<not>is_Abs f\"\n  shows \"{s. timpls_transformable_to_pred A (Fun f T) s} \\<subseteq>\n          (\\<lambda>S. Fun f S) ` {S. length T = length S \\<and>\n                              (\\<forall>s \\<in> set S. \\<exists>t \\<in> set T. timpls_transformable_to_pred A t s)}\"\n    (is \"?B \\<subseteq> ?C\")", "lemma timpls_transformable_to_pred_finite_aux2:\n  \"{s. timpls_transformable_to_pred A (Fun (Abs a) []) s} \\<subseteq> (\\<lambda>b. Fun (Abs b) []) ` A\" (is \"?B \\<subseteq> ?C\")", "lemma timpls_transformable_to_pred_finite:\n  fixes t::\"(('fun,'atom,'sets) prot_fun, 'a) term\"\n  assumes A: \"finite A\"\n    and t: \"wf\\<^sub>t\\<^sub>r\\<^sub>m t\"\n  shows \"finite {s. timpls_transformable_to_pred A t s}\"", "lemma timpls_transformable_to_pred_if_timpls_transformable_to:\n  assumes s: \"timpls_transformable_to TI t s\"\n    and t: \"wf\\<^sub>t\\<^sub>r\\<^sub>m t\" \"\\<forall>f \\<in> funs_term t. is_Abs f \\<longrightarrow> the_Abs f \\<in> A\"\n  shows \"timpls_transformable_to_pred (A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+) t s\"", "lemma timpls_transformable_to_pred_if_timpls_transformable_to':\n  assumes s: \"timpls_transformable_to' TI t s\"\n    and t: \"wf\\<^sub>t\\<^sub>r\\<^sub>m t\" \"\\<forall>f \\<in> funs_term t. is_Abs f \\<longrightarrow> the_Abs f \\<in> A\"\n  shows \"timpls_transformable_to_pred (A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+) t s\"", "lemma timpls_transformable_to_pred_if_equal_mod_timpls:\n  assumes s: \"equal_mod_timpls TI t s\"\n    and t: \"wf\\<^sub>t\\<^sub>r\\<^sub>m t\" \"\\<forall>f \\<in> funs_term t. is_Abs f \\<longrightarrow> the_Abs f \\<in> A\"\n  shows \"timpls_transformable_to_pred (A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+) t s\"", "lemma timpls_transformable_to_finite:\n  assumes t: \"wf\\<^sub>t\\<^sub>r\\<^sub>m t\"\n  shows \"finite {s. timpls_transformable_to TI t s}\" (is ?P)\n    and \"finite {s. timpls_transformable_to' TI t s}\" (is ?Q)", "lemma equal_mod_timpls_finite:\n  assumes t: \"wf\\<^sub>t\\<^sub>r\\<^sub>m t\"\n  shows \"finite {s. equal_mod_timpls TI t s}\"", "lemma intruder_synth_mod_timpls_is_synth_timpl_closure_set:\n  fixes t::\"(('fun, 'atom, 'sets) prot_fun, 'a) term\" and TI TI'\n  assumes \"set TI' = {(a,b) \\<in> (set TI)\\<^sup>+. a \\<noteq> b}\"\n  shows \"intruder_synth_mod_timpls M TI' t \\<longleftrightarrow> timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t\"\n      (is \"?C t \\<longleftrightarrow> ?D t\")", "lemma intruder_synth_mod_timpls'_is_synth_timpl_closure_set:\n  fixes t::\"(('fun, 'atom, 'sets) prot_fun, 'a) term\" and TI\n  shows \"intruder_synth_mod_timpls' M TI t \\<longleftrightarrow> timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t\"\n      (is \"?A t \\<longleftrightarrow> ?B t\")", "lemma intruder_synth_mod_eq_timpls_is_synth_timpl_closure_set:\n  fixes t::\"(('fun, 'atom, 'sets) prot_fun, 'a) term\" and TI\n  defines \"cl \\<equiv> \\<lambda>TI. {(a,b) \\<in> TI\\<^sup>+. a \\<noteq> b}\"\n  shows (* \"set TI' = (set TI)\\<^sup>+ \\<Longrightarrow>\n         intruder_synth_mod_eq_timpls M TI' t \\<longleftrightarrow>\n         (\\<exists>s \\<in> timpl_closure t (set TI). timpl_closure_set M (set TI) \\<turnstile>\\<^sub>c s)\"\n      (is \"?P TI TI' \\<Longrightarrow> ?A t \\<longleftrightarrow> ?B t\")\n    and *) \"set TI' = {(a,b) \\<in> (set TI)\\<^sup>+. a \\<noteq> b} \\<Longrightarrow>\n         intruder_synth_mod_eq_timpls M TI' t \\<longleftrightarrow>\n         (\\<exists>s \\<in> timpl_closure t (set TI). timpl_closure_set M (set TI) \\<turnstile>\\<^sub>c s)\"\n      (is \"?Q TI TI' \\<Longrightarrow> ?C t \\<longleftrightarrow> ?D t\")", "lemma timpl_closure_finite:\n  assumes t: \"wf\\<^sub>t\\<^sub>r\\<^sub>m t\"\n  shows \"finite (timpl_closure t (set TI))\"", "lemma timpl_closure_set_finite:\n  fixes TI::\"('sets set \\<times> 'sets set) list\"\n  assumes M_finite: \"finite M\"\n    and M_wf: \"wf\\<^sub>t\\<^sub>r\\<^sub>m\\<^sub>s M\"\n  shows \"finite (timpl_closure_set M (set TI))\"", "lemma comp_timpl_closure_is_timpl_closure_set:\n  fixes M and TI::\"('sets set \\<times> 'sets set) list\"\n  assumes M_finite: \"finite M\"\n    and M_wf: \"wf\\<^sub>t\\<^sub>r\\<^sub>m\\<^sub>s M\"\n  shows \"comp_timpl_closure M (set TI) = timpl_closure_set M (set TI)\"", "lemma analyzed_closed_mod_timpls_is_analyzed_closed_timpl_closure_set_aux1:\n  fixes M::\"('fun,'atom,'sets) prot_terms\"\n  assumes f: \"arity\\<^sub>f f = length T\" \"arity\\<^sub>f f > 0\" \"Ana\\<^sub>f f = (K, R)\"\n    and i: \"i < length R\"\n    and M: \"timpl_closure_set M TI \\<turnstile>\\<^sub>c T ! (R ! i)\"\n    and m: \"Fun (Fu f) T \\<in> M\"\n    and t: \"Fun (Fu f) S \\<in> timpl_closure (Fun (Fu f) T) TI\"\n  shows \"timpl_closure_set M TI \\<turnstile>\\<^sub>c S ! (R ! i)\"", "lemma analyzed_closed_mod_timpls_is_analyzed_closed_timpl_closure_set_aux2:\n  fixes M::\"('fun,'atom,'sets) prot_terms\"\n  assumes M: \"\\<forall>s \\<in> set (snd (Ana m)). timpl_closure_set M TI \\<turnstile>\\<^sub>c s\"\n    and m: \"m \\<in> M\"\n    and t: \"t \\<in> timpl_closure m TI\"\n    and s: \"s \\<in> set (snd (Ana t))\"\n  shows \"timpl_closure_set M TI \\<turnstile>\\<^sub>c s\"", "lemma analyzed_closed_mod_timpls_is_analyzed_timpl_closure_set:\n  fixes M::\"('fun,'atom,'sets) prot_term list\"\n  assumes TI': \"set TI' = {(a,b) \\<in> (set TI)\\<^sup>+. a \\<noteq> b}\"\n    and M_wf: \"wf\\<^sub>t\\<^sub>r\\<^sub>m\\<^sub>s (set M)\"\n  shows \"analyzed_closed_mod_timpls M TI' \\<longleftrightarrow> analyzed (timpl_closure_set (set M) (set TI))\"\n    (is \"?A \\<longleftrightarrow> ?B\")", "lemma analyzed_closed_mod_timpls'_is_analyzed_timpl_closure_set:\n  fixes M::\"('fun,'atom,'sets) prot_term list\"\n  assumes M_wf: \"wf\\<^sub>t\\<^sub>r\\<^sub>m\\<^sub>s (set M)\"\n  shows \"analyzed_closed_mod_timpls' M TI \\<longleftrightarrow> analyzed (timpl_closure_set (set M) (set TI))\"\n    (is \"?A \\<longleftrightarrow> ?B\")"], "translations": [["", "lemma timpl_apply_Fun:\n  assumes \"\\<And>i. i < length T \\<Longrightarrow> S ! i \\<in> set \\<langle>a --\\<guillemotright> b\\<rangle>\\<langle>T ! i\\<rangle>\"\n    and \"length T = length S\"\n  shows \"Fun f S \\<in> set \\<langle>a --\\<guillemotright> b\\<rangle>\\<langle>Fun f T\\<rangle>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Fun f S\n    \\<in> set \\<langle>a --\\<guillemotright> b\\<rangle>\\<langle>Fun f\n                           T\\<rangle>", "using assms term_variants_Fun term_variants_pred_iff_in_term_variants"], ["proof (prove)\nusing this:\n  ?i < length T \\<Longrightarrow>\n  S ! ?i\n  \\<in> set \\<langle>a --\\<guillemotright> b\\<rangle>\\<langle>T !\n                        ?i\\<rangle>\n  length T = length S\n  \\<lbrakk>length ?T = length ?S;\n   \\<And>i.\n      i < length ?T \\<Longrightarrow>\n      term_variants_pred ?P (?T ! i) (?S ! i)\\<rbrakk>\n  \\<Longrightarrow> term_variants_pred ?P (Fun ?f ?T) (Fun ?f ?S)\n  term_variants_pred ?P ?t ?s = (?s \\<in> set (term_variants ?P ?t))\n\ngoal (1 subgoal):\n 1. Fun f S\n    \\<in> set \\<langle>a --\\<guillemotright> b\\<rangle>\\<langle>Fun f\n                           T\\<rangle>", "by (metis timpl_apply_term_def)"], ["", "lemma timpl_apply_Abs:\n  assumes \"\\<And>i. i < length T \\<Longrightarrow> S ! i \\<in> set \\<langle>a --\\<guillemotright> b\\<rangle>\\<langle>T ! i\\<rangle>\"\n    and \"length T = length S\"\n  shows \"Fun (Abs b) S \\<in> set \\<langle>a --\\<guillemotright> b\\<rangle>\\<langle>Fun (Abs a) T\\<rangle>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Fun (Abs b) S\n    \\<in> set \\<langle>a --\\<guillemotright> b\\<rangle>\\<langle>Fun (Abs a)\n                           T\\<rangle>", "using assms(1) term_variants_P[OF assms(2), of \"(\\<lambda>_. [])(Abs a := [Abs b])\" \"Abs b\" \"Abs a\"]"], ["proof (prove)\nusing this:\n  ?i < length T \\<Longrightarrow>\n  S ! ?i\n  \\<in> set \\<langle>a --\\<guillemotright> b\\<rangle>\\<langle>T !\n                        ?i\\<rangle>\n  \\<lbrakk>\\<And>i.\n              i < length T \\<Longrightarrow>\n              term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b]))\n               (T ! i) (S ! i);\n   Abs b \\<in> set (((\\<lambda>_. [])(Abs a := [Abs b])) (Abs a))\\<rbrakk>\n  \\<Longrightarrow> term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b]))\n                     (Fun (Abs a) T) (Fun (Abs b) S)\n\ngoal (1 subgoal):\n 1. Fun (Abs b) S\n    \\<in> set \\<langle>a --\\<guillemotright> b\\<rangle>\\<langle>Fun (Abs a)\n                           T\\<rangle>", "unfolding timpl_apply_term_def term_variants_pred_iff_in_term_variants[symmetric]"], ["proof (prove)\nusing this:\n  ?i < length T \\<Longrightarrow>\n  term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) (T ! ?i) (S ! ?i)\n  \\<lbrakk>\\<And>i.\n              i < length T \\<Longrightarrow>\n              term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b]))\n               (T ! i) (S ! i);\n   Abs b \\<in> set (((\\<lambda>_. [])(Abs a := [Abs b])) (Abs a))\\<rbrakk>\n  \\<Longrightarrow> term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b]))\n                     (Fun (Abs a) T) (Fun (Abs b) S)\n\ngoal (1 subgoal):\n 1. term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) (Fun (Abs a) T)\n     (Fun (Abs b) S)", "by fastforce"], ["", "lemma timpl_apply_refl: \"t \\<in> set \\<langle>a --\\<guillemotright> b\\<rangle>\\<langle>t\\<rangle>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t \\<in> set \\<langle>a --\\<guillemotright> b\\<rangle>\\<langle>t\\<rangle>", "unfolding timpl_apply_term_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. t \\<in> set (term_variants ((\\<lambda>_. [])(Abs a := [Abs b])) t)", "by (metis term_variants_pred_refl term_variants_pred_iff_in_term_variants)"], ["", "lemma timpl_apply_const: \"Fun (Abs b) [] \\<in> set \\<langle>a --\\<guillemotright> b\\<rangle>\\<langle>Fun (Abs a) []\\<rangle>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Fun (Abs b) []\n    \\<in> set \\<langle>a --\\<guillemotright> b\\<rangle>\\<langle>Fun (Abs a)\n                           []\\<rangle>", "using term_variants_pred_iff_in_term_variants term_variants_pred_const"], ["proof (prove)\nusing this:\n  term_variants_pred ?P ?t ?s = (?s \\<in> set (term_variants ?P ?t))\n  ?b \\<in> set (?P ?a) \\<Longrightarrow>\n  term_variants_pred ?P (Fun ?a []) (Fun ?b [])\n\ngoal (1 subgoal):\n 1. Fun (Abs b) []\n    \\<in> set \\<langle>a --\\<guillemotright> b\\<rangle>\\<langle>Fun (Abs a)\n                           []\\<rangle>", "unfolding timpl_apply_term_def"], ["proof (prove)\nusing this:\n  term_variants_pred ?P ?t ?s = (?s \\<in> set (term_variants ?P ?t))\n  ?b \\<in> set (?P ?a) \\<Longrightarrow>\n  term_variants_pred ?P (Fun ?a []) (Fun ?b [])\n\ngoal (1 subgoal):\n 1. Fun (Abs b) []\n    \\<in> set (term_variants ((\\<lambda>_. [])(Abs a := [Abs b]))\n                (Fun (Abs a) []))", "by auto"], ["", "lemma timpl_apply_const':\n  \"c = a \\<Longrightarrow> set \\<langle>a --\\<guillemotright> b\\<rangle>\\<langle>Fun (Abs c) []\\<rangle> = {Fun (Abs b) [], Fun (Abs c) []}\"\n  \"c \\<noteq> a \\<Longrightarrow> set \\<langle>a --\\<guillemotright> b\\<rangle>\\<langle>Fun (Abs c) []\\<rangle> = {Fun (Abs c) []}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (c = a \\<Longrightarrow>\n     set \\<langle>a --\\<guillemotright> b\\<rangle>\\<langle>Fun (Abs c)\n                      []\\<rangle> =\n     {Fun (Abs b) [], Fun (Abs c) []}) &&&\n    (c \\<noteq> a \\<Longrightarrow>\n     set \\<langle>a --\\<guillemotright> b\\<rangle>\\<langle>Fun (Abs c)\n                      []\\<rangle> =\n     {Fun (Abs c) []})", "using term_variants_pred_const_cases[of \"(\\<lambda>_. [])(Abs a := [Abs b])\" \"Abs c\"]\n      term_variants_pred_iff_in_term_variants[of \"(\\<lambda>_. [])(Abs a := [Abs b])\"]"], ["proof (prove)\nusing this:\n  ((\\<lambda>_. [])(Abs a := [Abs b])) (Abs c) \\<noteq> [] \\<Longrightarrow>\n  term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) (Fun (Abs c) [])\n   ?t =\n  (?t = Fun (Abs c) [] \\<or>\n   (\\<exists>b\\<in>set (((\\<lambda>_. [])(Abs a := [Abs b])) (Abs c)).\n       ?t = Fun b []))\n  ((\\<lambda>_. [])(Abs a := [Abs b])) (Abs c) = [] \\<Longrightarrow>\n  term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) (Fun (Abs c) [])\n   ?t =\n  (?t = Fun (Abs c) [])\n  term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) ?t ?s =\n  (?s \\<in> set (term_variants ((\\<lambda>_. [])(Abs a := [Abs b])) ?t))\n\ngoal (1 subgoal):\n 1. (c = a \\<Longrightarrow>\n     set \\<langle>a --\\<guillemotright> b\\<rangle>\\<langle>Fun (Abs c)\n                      []\\<rangle> =\n     {Fun (Abs b) [], Fun (Abs c) []}) &&&\n    (c \\<noteq> a \\<Longrightarrow>\n     set \\<langle>a --\\<guillemotright> b\\<rangle>\\<langle>Fun (Abs c)\n                      []\\<rangle> =\n     {Fun (Abs c) []})", "unfolding timpl_apply_term_def"], ["proof (prove)\nusing this:\n  ((\\<lambda>_. [])(Abs a := [Abs b])) (Abs c) \\<noteq> [] \\<Longrightarrow>\n  term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) (Fun (Abs c) [])\n   ?t =\n  (?t = Fun (Abs c) [] \\<or>\n   (\\<exists>b\\<in>set (((\\<lambda>_. [])(Abs a := [Abs b])) (Abs c)).\n       ?t = Fun b []))\n  ((\\<lambda>_. [])(Abs a := [Abs b])) (Abs c) = [] \\<Longrightarrow>\n  term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) (Fun (Abs c) [])\n   ?t =\n  (?t = Fun (Abs c) [])\n  term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) ?t ?s =\n  (?s \\<in> set (term_variants ((\\<lambda>_. [])(Abs a := [Abs b])) ?t))\n\ngoal (1 subgoal):\n 1. (c = a \\<Longrightarrow>\n     set (term_variants ((\\<lambda>_. [])(Abs a := [Abs b]))\n           (Fun (Abs c) [])) =\n     {Fun (Abs b) [], Fun (Abs c) []}) &&&\n    (c \\<noteq> a \\<Longrightarrow>\n     set (term_variants ((\\<lambda>_. [])(Abs a := [Abs b]))\n           (Fun (Abs c) [])) =\n     {Fun (Abs c) []})", "by auto"], ["", "lemma timpl_apply_term_subst:\n  \"s \\<in> set \\<langle>a --\\<guillemotright> b\\<rangle>\\<langle>t\\<rangle> \\<Longrightarrow> s \\<cdot> \\<delta> \\<in> set \\<langle>a --\\<guillemotright> b\\<rangle>\\<langle>t \\<cdot> \\<delta>\\<rangle>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<in> set \\<langle>a --\\<guillemotright> b\\<rangle>\\<langle>t\\<rangle> \\<Longrightarrow>\n    s \\<cdot> \\<delta>\n    \\<in> set \\<langle>a --\\<guillemotright> b\\<rangle>\\<langle>t \\<cdot>\n                          \\<delta>\\<rangle>", "by (metis term_variants_pred_iff_in_term_variants term_variants_pred_subst timpl_apply_term_def)"], ["", "lemma timpl_apply_inv:\n  assumes \"Fun h S \\<in> set \\<langle>a --\\<guillemotright> b\\<rangle>\\<langle>Fun f T\\<rangle>\"\n  shows \"length T = length S\"\n    and \"\\<And>i. i < length T \\<Longrightarrow> S ! i \\<in> set \\<langle>a --\\<guillemotright> b\\<rangle>\\<langle>T ! i\\<rangle>\"\n    and \"f \\<noteq> h \\<Longrightarrow> f = Abs a \\<and> h = Abs b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length T = length S &&&\n    (\\<And>i.\n        i < length T \\<Longrightarrow>\n        S ! i\n        \\<in> set \\<langle>a --\\<guillemotright> b\\<rangle>\\<langle>T !\n                              i\\<rangle>) &&&\n    (f \\<noteq> h \\<Longrightarrow> f = Abs a \\<and> h = Abs b)", "using assms term_variants_pred_iff_in_term_variants[of \"(\\<lambda>_. [])(Abs a := [Abs b])\"]"], ["proof (prove)\nusing this:\n  Fun h S\n  \\<in> set \\<langle>a --\\<guillemotright> b\\<rangle>\\<langle>Fun f\n                         T\\<rangle>\n  term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) ?t ?s =\n  (?s \\<in> set (term_variants ((\\<lambda>_. [])(Abs a := [Abs b])) ?t))\n\ngoal (1 subgoal):\n 1. length T = length S &&&\n    (\\<And>i.\n        i < length T \\<Longrightarrow>\n        S ! i\n        \\<in> set \\<langle>a --\\<guillemotright> b\\<rangle>\\<langle>T !\n                              i\\<rangle>) &&&\n    (f \\<noteq> h \\<Longrightarrow> f = Abs a \\<and> h = Abs b)", "unfolding timpl_apply_term_def"], ["proof (prove)\nusing this:\n  Fun h S\n  \\<in> set (term_variants ((\\<lambda>_. [])(Abs a := [Abs b])) (Fun f T))\n  term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) ?t ?s =\n  (?s \\<in> set (term_variants ((\\<lambda>_. [])(Abs a := [Abs b])) ?t))\n\ngoal (1 subgoal):\n 1. length T = length S &&&\n    (\\<And>i.\n        i < length T \\<Longrightarrow>\n        S ! i\n        \\<in> set (term_variants ((\\<lambda>_. [])(Abs a := [Abs b]))\n                    (T ! i))) &&&\n    (f \\<noteq> h \\<Longrightarrow> f = Abs a \\<and> h = Abs b)", "by (metis (full_types) term_variants_pred_inv(1),\n    metis (full_types) term_variants_pred_inv(2),\n    fastforce dest: term_variants_pred_inv(3))"], ["", "lemma timpl_apply_inv':\n  assumes \"s \\<in> set \\<langle>a --\\<guillemotright> b\\<rangle>\\<langle>Fun f T\\<rangle>\"\n  shows \"\\<exists>g S. s = Fun g S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>g S. s = Fun g S", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>g S. s = Fun g S", "have *: \"term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) (Fun f T) s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) (Fun f T) s", "using assms term_variants_pred_iff_in_term_variants[of \"(\\<lambda>_. [])(Abs a := [Abs b])\"]"], ["proof (prove)\nusing this:\n  s \\<in> set \\<langle>a --\\<guillemotright> b\\<rangle>\\<langle>Fun f\n                           T\\<rangle>\n  term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) ?t ?s =\n  (?s \\<in> set (term_variants ((\\<lambda>_. [])(Abs a := [Abs b])) ?t))\n\ngoal (1 subgoal):\n 1. term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) (Fun f T) s", "unfolding timpl_apply_term_def"], ["proof (prove)\nusing this:\n  s \\<in> set (term_variants ((\\<lambda>_. [])(Abs a := [Abs b])) (Fun f T))\n  term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) ?t ?s =\n  (?s \\<in> set (term_variants ((\\<lambda>_. [])(Abs a := [Abs b])) ?t))\n\ngoal (1 subgoal):\n 1. term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) (Fun f T) s", "by force"], ["proof (state)\nthis:\n  term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) (Fun f T) s\n\ngoal (1 subgoal):\n 1. \\<exists>g S. s = Fun g S", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>g S. s = Fun g S", "using term_variants_pred.cases[OF *, of ?thesis]"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>P x.\n              \\<lbrakk>(\\<lambda>_. [])(Abs a := [Abs b]) = P;\n               Fun f T = Var x; s = Var x\\<rbrakk>\n              \\<Longrightarrow> \\<exists>g S. s = Fun g S;\n   \\<And>Ta S P g fa.\n      \\<lbrakk>(\\<lambda>_. [])(Abs a := [Abs b]) = P; Fun f T = Fun fa Ta;\n       s = Fun g S; length Ta = length S;\n       \\<And>i.\n          i < length Ta \\<Longrightarrow>\n          term_variants_pred P (Ta ! i) (S ! i);\n       g \\<in> set (P fa)\\<rbrakk>\n      \\<Longrightarrow> \\<exists>g S. s = Fun g S;\n   \\<And>Ta S P fa.\n      \\<lbrakk>(\\<lambda>_. [])(Abs a := [Abs b]) = P; Fun f T = Fun fa Ta;\n       s = Fun fa S; length Ta = length S;\n       \\<And>i.\n          i < length Ta \\<Longrightarrow>\n          term_variants_pred P (Ta ! i) (S ! i)\\<rbrakk>\n      \\<Longrightarrow> \\<exists>g S. s = Fun g S\\<rbrakk>\n  \\<Longrightarrow> \\<exists>g S. s = Fun g S\n\ngoal (1 subgoal):\n 1. \\<exists>g S. s = Fun g S", "by fastforce"], ["proof (state)\nthis:\n  \\<exists>g S. s = Fun g S\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma timpl_apply_term_Var_iff:\n  \"Var x \\<in> set \\<langle>a --\\<guillemotright> b\\<rangle>\\<langle>t\\<rangle> \\<longleftrightarrow> t = Var x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Var x\n     \\<in> set \\<langle>a --\\<guillemotright> b\\<rangle>\\<langle>t\\<rangle>) =\n    (t = Var x)", "using term_variants_pred_inv_Var term_variants_pred_iff_in_term_variants"], ["proof (prove)\nusing this:\n  term_variants_pred ?P (Var ?x) ?t = (?t = Var ?x)\n  term_variants_pred ?P ?t (Var ?x) = (?t = Var ?x)\n  term_variants_pred ?P ?t ?s = (?s \\<in> set (term_variants ?P ?t))\n\ngoal (1 subgoal):\n 1. (Var x\n     \\<in> set \\<langle>a --\\<guillemotright> b\\<rangle>\\<langle>t\\<rangle>) =\n    (t = Var x)", "unfolding timpl_apply_term_def"], ["proof (prove)\nusing this:\n  term_variants_pred ?P (Var ?x) ?t = (?t = Var ?x)\n  term_variants_pred ?P ?t (Var ?x) = (?t = Var ?x)\n  term_variants_pred ?P ?t ?s = (?s \\<in> set (term_variants ?P ?t))\n\ngoal (1 subgoal):\n 1. (Var x\n     \\<in> set (term_variants ((\\<lambda>_. [])(Abs a := [Abs b])) t)) =\n    (t = Var x)", "by metis"], ["", "subsection \\<open>Term Implication Closure\\<close>"], ["", "inductive_set timpl_closure for t TI where\n  FP: \"t \\<in> timpl_closure t TI\"\n| TI: \"\\<lbrakk>u \\<in> timpl_closure t TI; (a,b) \\<in> TI; term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) u s\\<rbrakk>\n       \\<Longrightarrow> s \\<in> timpl_closure t TI\""], ["", "definition \"timpl_closure_set M TI \\<equiv> (\\<Union>t \\<in> M. timpl_closure t TI)\""], ["", "inductive_set timpl_closure'_step for TI where\n  \"\\<lbrakk>(a,b) \\<in> TI; term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) t s\\<rbrakk>\n    \\<Longrightarrow> (t,s) \\<in> timpl_closure'_step TI\""], ["", "definition \"timpl_closure' TI \\<equiv> (timpl_closure'_step TI)\\<^sup>*\""], ["", "definition comp_timpl_closure where\n  \"comp_timpl_closure FP TI \\<equiv>\n    let f = \\<lambda>X. FP \\<union> (\\<Union>x \\<in> X. \\<Union>(a,b) \\<in> TI. set \\<langle>a --\\<guillemotright> b\\<rangle>\\<langle>x\\<rangle>)\n    in while (\\<lambda>X. f X \\<noteq> X) f {}\""], ["", "definition comp_timpl_closure_list where\n  \"comp_timpl_closure_list FP TI \\<equiv>\n    let f = \\<lambda>X. remdups (concat (map (\\<lambda>x. concat (map (\\<lambda>(a,b). \\<langle>a --\\<guillemotright> b\\<rangle>\\<langle>x\\<rangle>) TI)) X))\n    in while (\\<lambda>X. set (f X) \\<noteq> set X) f FP\""], ["", "lemma timpl_closure_setI:\n  \"t \\<in> M \\<Longrightarrow> t \\<in> timpl_closure_set M TI\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t \\<in> M \\<Longrightarrow> t \\<in> timpl_closure_set M TI", "unfolding timpl_closure_set_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. t \\<in> M \\<Longrightarrow>\n    t \\<in> (\\<Union>t\\<in>M. timpl_closure t TI)", "by (auto intro: timpl_closure.FP)"], ["", "lemma timpl_closure_set_empty_timpls:\n  \"timpl_closure t {} = {t}\" (is \"?A = ?B\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. timpl_closure t {} = {t}", "proof (intro subset_antisym subsetI)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x. x \\<in> timpl_closure t {} \\<Longrightarrow> x \\<in> {t}\n 2. \\<And>x. x \\<in> {t} \\<Longrightarrow> x \\<in> timpl_closure t {}", "fix s"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x. x \\<in> timpl_closure t {} \\<Longrightarrow> x \\<in> {t}\n 2. \\<And>x. x \\<in> {t} \\<Longrightarrow> x \\<in> timpl_closure t {}", "show \"s \\<in> ?A \\<Longrightarrow> s \\<in> ?B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<in> timpl_closure t {} \\<Longrightarrow> s \\<in> {t}", "by (induct s rule: timpl_closure.induct) auto"], ["proof (state)\nthis:\n  s \\<in> timpl_closure t {} \\<Longrightarrow> s \\<in> {t}\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> {t} \\<Longrightarrow> x \\<in> timpl_closure t {}", "qed (simp add: timpl_closure.FP)"], ["", "lemmas timpl_closure_set_is_timpl_closure_union = meta_eq_to_obj_eq[OF timpl_closure_set_def]"], ["", "lemma term_variants_pred_eq_case_Abs:\n  fixes a b\n  defines \"P \\<equiv> (\\<lambda>_. [])(Abs a := [Abs b])\"\n  assumes \"term_variants_pred P t s\" \"\\<forall>f \\<in> funs_term s. \\<not>is_Abs f\"\n  shows \"t = s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t = s", "using assms(2,3) P_def"], ["proof (prove)\nusing this:\n  term_variants_pred P t s\n  \\<forall>f\\<in>funs_term s. \\<not> is_Abs f\n  P \\<equiv> (\\<lambda>_. [])(Abs a := [Abs b])\n\ngoal (1 subgoal):\n 1. t = s", "proof (induction P t s rule: term_variants_pred.induct)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x.\n       \\<forall>f\\<in>funs_term (Var x). \\<not> is_Abs f \\<Longrightarrow>\n       Var x = Var x\n 2. \\<And>T S g f.\n       \\<lbrakk>length T = length S;\n        \\<And>i.\n           i < length T \\<Longrightarrow>\n           term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) (T ! i)\n            (S ! i);\n        \\<And>i.\n           \\<lbrakk>i < length T;\n            \\<forall>f\\<in>funs_term (S ! i). \\<not> is_Abs f\\<rbrakk>\n           \\<Longrightarrow> T ! i = S ! i;\n        g \\<in> set (((\\<lambda>_. [])(Abs a := [Abs b])) f);\n        \\<forall>f\\<in>funs_term (Fun g S). \\<not> is_Abs f\\<rbrakk>\n       \\<Longrightarrow> Fun f T = Fun g S\n 3. \\<And>T S f.\n       \\<lbrakk>length T = length S;\n        \\<And>i.\n           i < length T \\<Longrightarrow>\n           term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) (T ! i)\n            (S ! i);\n        \\<And>i.\n           \\<lbrakk>i < length T;\n            \\<forall>f\\<in>funs_term (S ! i). \\<not> is_Abs f\\<rbrakk>\n           \\<Longrightarrow> T ! i = S ! i;\n        \\<forall>f\\<in>funs_term (Fun f S). \\<not> is_Abs f\\<rbrakk>\n       \\<Longrightarrow> Fun f T = Fun f S", "case (term_variants_Fun T S f)"], ["proof (state)\nthis:\n  length T = length S\n  ?i < length T \\<Longrightarrow>\n  term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) (T ! ?i) (S ! ?i)\n  \\<lbrakk>?i < length T;\n   \\<forall>f\\<in>funs_term (S ! ?i). \\<not> is_Abs f\\<rbrakk>\n  \\<Longrightarrow> T ! ?i = S ! ?i\n  \\<forall>f\\<in>funs_term (Fun f S). \\<not> is_Abs f\n\ngoal (3 subgoals):\n 1. \\<And>x.\n       \\<forall>f\\<in>funs_term (Var x). \\<not> is_Abs f \\<Longrightarrow>\n       Var x = Var x\n 2. \\<And>T S g f.\n       \\<lbrakk>length T = length S;\n        \\<And>i.\n           i < length T \\<Longrightarrow>\n           term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) (T ! i)\n            (S ! i);\n        \\<And>i.\n           \\<lbrakk>i < length T;\n            \\<forall>f\\<in>funs_term (S ! i). \\<not> is_Abs f\\<rbrakk>\n           \\<Longrightarrow> T ! i = S ! i;\n        g \\<in> set (((\\<lambda>_. [])(Abs a := [Abs b])) f);\n        \\<forall>f\\<in>funs_term (Fun g S). \\<not> is_Abs f\\<rbrakk>\n       \\<Longrightarrow> Fun f T = Fun g S\n 3. \\<And>T S f.\n       \\<lbrakk>length T = length S;\n        \\<And>i.\n           i < length T \\<Longrightarrow>\n           term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) (T ! i)\n            (S ! i);\n        \\<And>i.\n           \\<lbrakk>i < length T;\n            \\<forall>f\\<in>funs_term (S ! i). \\<not> is_Abs f\\<rbrakk>\n           \\<Longrightarrow> T ! i = S ! i;\n        \\<forall>f\\<in>funs_term (Fun f S). \\<not> is_Abs f\\<rbrakk>\n       \\<Longrightarrow> Fun f T = Fun f S", "have \"\\<not>is_Abs h\" when i: \"i < length S\" and h: \"h \\<in> funs_term (S ! i)\" for i h"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> is_Abs h", "using i h term_variants_Fun.hyps(4)"], ["proof (prove)\nusing this:\n  i < length S\n  h \\<in> funs_term (S ! i)\n  \\<forall>f\\<in>funs_term (Fun f S). \\<not> is_Abs f\n\ngoal (1 subgoal):\n 1. \\<not> is_Abs h", "by auto"], ["proof (state)\nthis:\n  \\<lbrakk>?i < length S; ?h \\<in> funs_term (S ! ?i)\\<rbrakk>\n  \\<Longrightarrow> \\<not> is_Abs ?h\n\ngoal (3 subgoals):\n 1. \\<And>x.\n       \\<forall>f\\<in>funs_term (Var x). \\<not> is_Abs f \\<Longrightarrow>\n       Var x = Var x\n 2. \\<And>T S g f.\n       \\<lbrakk>length T = length S;\n        \\<And>i.\n           i < length T \\<Longrightarrow>\n           term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) (T ! i)\n            (S ! i);\n        \\<And>i.\n           \\<lbrakk>i < length T;\n            \\<forall>f\\<in>funs_term (S ! i). \\<not> is_Abs f\\<rbrakk>\n           \\<Longrightarrow> T ! i = S ! i;\n        g \\<in> set (((\\<lambda>_. [])(Abs a := [Abs b])) f);\n        \\<forall>f\\<in>funs_term (Fun g S). \\<not> is_Abs f\\<rbrakk>\n       \\<Longrightarrow> Fun f T = Fun g S\n 3. \\<And>T S f.\n       \\<lbrakk>length T = length S;\n        \\<And>i.\n           i < length T \\<Longrightarrow>\n           term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) (T ! i)\n            (S ! i);\n        \\<And>i.\n           \\<lbrakk>i < length T;\n            \\<forall>f\\<in>funs_term (S ! i). \\<not> is_Abs f\\<rbrakk>\n           \\<Longrightarrow> T ! i = S ! i;\n        \\<forall>f\\<in>funs_term (Fun f S). \\<not> is_Abs f\\<rbrakk>\n       \\<Longrightarrow> Fun f T = Fun f S", "hence \"T ! i = S ! i\" when i: \"i < length T\" for i"], ["proof (prove)\nusing this:\n  \\<lbrakk>?i < length S; ?h \\<in> funs_term (S ! ?i)\\<rbrakk>\n  \\<Longrightarrow> \\<not> is_Abs ?h\n\ngoal (1 subgoal):\n 1. T ! i = S ! i", "using i term_variants_Fun.hyps(1,3)"], ["proof (prove)\nusing this:\n  \\<lbrakk>?i < length S; ?h \\<in> funs_term (S ! ?i)\\<rbrakk>\n  \\<Longrightarrow> \\<not> is_Abs ?h\n  i < length T\n  length T = length S\n  \\<lbrakk>?i < length T;\n   \\<forall>f\\<in>funs_term (S ! ?i). \\<not> is_Abs f\\<rbrakk>\n  \\<Longrightarrow> T ! ?i = S ! ?i\n\ngoal (1 subgoal):\n 1. T ! i = S ! i", "by auto"], ["proof (state)\nthis:\n  ?i < length T \\<Longrightarrow> T ! ?i = S ! ?i\n\ngoal (3 subgoals):\n 1. \\<And>x.\n       \\<forall>f\\<in>funs_term (Var x). \\<not> is_Abs f \\<Longrightarrow>\n       Var x = Var x\n 2. \\<And>T S g f.\n       \\<lbrakk>length T = length S;\n        \\<And>i.\n           i < length T \\<Longrightarrow>\n           term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) (T ! i)\n            (S ! i);\n        \\<And>i.\n           \\<lbrakk>i < length T;\n            \\<forall>f\\<in>funs_term (S ! i). \\<not> is_Abs f\\<rbrakk>\n           \\<Longrightarrow> T ! i = S ! i;\n        g \\<in> set (((\\<lambda>_. [])(Abs a := [Abs b])) f);\n        \\<forall>f\\<in>funs_term (Fun g S). \\<not> is_Abs f\\<rbrakk>\n       \\<Longrightarrow> Fun f T = Fun g S\n 3. \\<And>T S f.\n       \\<lbrakk>length T = length S;\n        \\<And>i.\n           i < length T \\<Longrightarrow>\n           term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) (T ! i)\n            (S ! i);\n        \\<And>i.\n           \\<lbrakk>i < length T;\n            \\<forall>f\\<in>funs_term (S ! i). \\<not> is_Abs f\\<rbrakk>\n           \\<Longrightarrow> T ! i = S ! i;\n        \\<forall>f\\<in>funs_term (Fun f S). \\<not> is_Abs f\\<rbrakk>\n       \\<Longrightarrow> Fun f T = Fun f S", "hence \"T = S\""], ["proof (prove)\nusing this:\n  ?i < length T \\<Longrightarrow> T ! ?i = S ! ?i\n\ngoal (1 subgoal):\n 1. T = S", "using term_variants_Fun.hyps(1) nth_equalityI[of T S]"], ["proof (prove)\nusing this:\n  ?i < length T \\<Longrightarrow> T ! ?i = S ! ?i\n  length T = length S\n  \\<lbrakk>length T = length S;\n   \\<And>i. i < length T \\<Longrightarrow> T ! i = S ! i\\<rbrakk>\n  \\<Longrightarrow> T = S\n\ngoal (1 subgoal):\n 1. T = S", "by fast"], ["proof (state)\nthis:\n  T = S\n\ngoal (3 subgoals):\n 1. \\<And>x.\n       \\<forall>f\\<in>funs_term (Var x). \\<not> is_Abs f \\<Longrightarrow>\n       Var x = Var x\n 2. \\<And>T S g f.\n       \\<lbrakk>length T = length S;\n        \\<And>i.\n           i < length T \\<Longrightarrow>\n           term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) (T ! i)\n            (S ! i);\n        \\<And>i.\n           \\<lbrakk>i < length T;\n            \\<forall>f\\<in>funs_term (S ! i). \\<not> is_Abs f\\<rbrakk>\n           \\<Longrightarrow> T ! i = S ! i;\n        g \\<in> set (((\\<lambda>_. [])(Abs a := [Abs b])) f);\n        \\<forall>f\\<in>funs_term (Fun g S). \\<not> is_Abs f\\<rbrakk>\n       \\<Longrightarrow> Fun f T = Fun g S\n 3. \\<And>T S f.\n       \\<lbrakk>length T = length S;\n        \\<And>i.\n           i < length T \\<Longrightarrow>\n           term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) (T ! i)\n            (S ! i);\n        \\<And>i.\n           \\<lbrakk>i < length T;\n            \\<forall>f\\<in>funs_term (S ! i). \\<not> is_Abs f\\<rbrakk>\n           \\<Longrightarrow> T ! i = S ! i;\n        \\<forall>f\\<in>funs_term (Fun f S). \\<not> is_Abs f\\<rbrakk>\n       \\<Longrightarrow> Fun f T = Fun f S", "thus ?case"], ["proof (prove)\nusing this:\n  T = S\n\ngoal (1 subgoal):\n 1. Fun f T = Fun f S", "using term_variants_Fun.hyps(1)"], ["proof (prove)\nusing this:\n  T = S\n  length T = length S\n\ngoal (1 subgoal):\n 1. Fun f T = Fun f S", "by blast"], ["proof (state)\nthis:\n  Fun f T = Fun f S\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<forall>f\\<in>funs_term (Var x). \\<not> is_Abs f \\<Longrightarrow>\n       Var x = Var x\n 2. \\<And>T S g f.\n       \\<lbrakk>length T = length S;\n        \\<And>i.\n           i < length T \\<Longrightarrow>\n           term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) (T ! i)\n            (S ! i);\n        \\<And>i.\n           \\<lbrakk>i < length T;\n            \\<forall>f\\<in>funs_term (S ! i). \\<not> is_Abs f\\<rbrakk>\n           \\<Longrightarrow> T ! i = S ! i;\n        g \\<in> set (((\\<lambda>_. [])(Abs a := [Abs b])) f);\n        \\<forall>f\\<in>funs_term (Fun g S). \\<not> is_Abs f\\<rbrakk>\n       \\<Longrightarrow> Fun f T = Fun g S", "qed (simp_all add: term_variants_pred_refl)"], ["", "lemma timpl_closure'_step_inv:\n  assumes \"(t,s) \\<in> timpl_closure'_step TI\"\n  obtains a b where \"(a,b) \\<in> TI\" \"term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) t s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>a b.\n        \\<lbrakk>(a, b) \\<in> TI;\n         term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) t\n          s\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  (t, s) \\<in> timpl_closure'_step TI\n\ngoal (1 subgoal):\n 1. (\\<And>a b.\n        \\<lbrakk>(a, b) \\<in> TI;\n         term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) t\n          s\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto elim: timpl_closure'_step.cases)"], ["", "lemma timpl_closure_mono:\n  assumes \"TI \\<subseteq> TI'\"\n  shows \"timpl_closure t TI \\<subseteq> timpl_closure t TI'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. timpl_closure t TI \\<subseteq> timpl_closure t TI'", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> timpl_closure t TI \\<Longrightarrow>\n       x \\<in> timpl_closure t TI'", "fix s"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> timpl_closure t TI \\<Longrightarrow>\n       x \\<in> timpl_closure t TI'", "show \"s \\<in> timpl_closure t TI \\<Longrightarrow> s \\<in> timpl_closure t TI'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<in> timpl_closure t TI \\<Longrightarrow> s \\<in> timpl_closure t TI'", "apply (induct rule: timpl_closure.induct)"], ["proof (prove)\ngoal (2 subgoals):\n 1. t \\<in> timpl_closure t TI'\n 2. \\<And>u a b s.\n       \\<lbrakk>u \\<in> timpl_closure t TI; u \\<in> timpl_closure t TI';\n        (a, b) \\<in> TI;\n        term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) u s\\<rbrakk>\n       \\<Longrightarrow> s \\<in> timpl_closure t TI'", "using assms"], ["proof (prove)\nusing this:\n  TI \\<subseteq> TI'\n\ngoal (2 subgoals):\n 1. t \\<in> timpl_closure t TI'\n 2. \\<And>u a b s.\n       \\<lbrakk>u \\<in> timpl_closure t TI; u \\<in> timpl_closure t TI';\n        (a, b) \\<in> TI;\n        term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) u s\\<rbrakk>\n       \\<Longrightarrow> s \\<in> timpl_closure t TI'", "by (auto intro: timpl_closure.intros)"], ["proof (state)\nthis:\n  s \\<in> timpl_closure t TI \\<Longrightarrow> s \\<in> timpl_closure t TI'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma timpl_closure_set_mono:\n  assumes \"M \\<subseteq> M'\" \"TI \\<subseteq> TI'\"\n  shows \"timpl_closure_set M TI \\<subseteq> timpl_closure_set M' TI'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. timpl_closure_set M TI \\<subseteq> timpl_closure_set M' TI'", "using assms(1) timpl_closure_mono[OF assms(2)]"], ["proof (prove)\nusing this:\n  M \\<subseteq> M'\n  timpl_closure ?t TI \\<subseteq> timpl_closure ?t TI'\n\ngoal (1 subgoal):\n 1. timpl_closure_set M TI \\<subseteq> timpl_closure_set M' TI'", "unfolding timpl_closure_set_def"], ["proof (prove)\nusing this:\n  M \\<subseteq> M'\n  timpl_closure ?t TI \\<subseteq> timpl_closure ?t TI'\n\ngoal (1 subgoal):\n 1. (\\<Union>t\\<in>M. timpl_closure t TI)\n    \\<subseteq> (\\<Union>t\\<in>M'. timpl_closure t TI')", "by fast"], ["", "lemma timpl_closure_idem:\n  \"timpl_closure_set (timpl_closure t TI) TI = timpl_closure t TI\" (is \"?A = ?B\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. timpl_closure_set (timpl_closure t TI) TI = timpl_closure t TI", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. timpl_closure_set (timpl_closure t TI) TI \\<subseteq> timpl_closure t TI\n 2. timpl_closure t TI \\<subseteq> timpl_closure_set (timpl_closure t TI) TI", "have \"s \\<in> timpl_closure t TI\"\n    when \"s \\<in> timpl_closure u TI\" \"u \\<in> timpl_closure t TI\"\n    for s u"], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<in> timpl_closure t TI", "using that"], ["proof (prove)\nusing this:\n  s \\<in> timpl_closure u TI\n  u \\<in> timpl_closure t TI\n\ngoal (1 subgoal):\n 1. s \\<in> timpl_closure t TI", "by (induction rule: timpl_closure.induct)\n       (auto intro: timpl_closure.intros)"], ["proof (state)\nthis:\n  \\<lbrakk>?s \\<in> timpl_closure ?u TI;\n   ?u \\<in> timpl_closure t TI\\<rbrakk>\n  \\<Longrightarrow> ?s \\<in> timpl_closure t TI\n\ngoal (2 subgoals):\n 1. timpl_closure_set (timpl_closure t TI) TI \\<subseteq> timpl_closure t TI\n 2. timpl_closure t TI \\<subseteq> timpl_closure_set (timpl_closure t TI) TI", "thus \"?A \\<subseteq> ?B\""], ["proof (prove)\nusing this:\n  \\<lbrakk>?s \\<in> timpl_closure ?u TI;\n   ?u \\<in> timpl_closure t TI\\<rbrakk>\n  \\<Longrightarrow> ?s \\<in> timpl_closure t TI\n\ngoal (1 subgoal):\n 1. timpl_closure_set (timpl_closure t TI) TI \\<subseteq> timpl_closure t TI", "unfolding timpl_closure_set_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>?s \\<in> timpl_closure ?u TI;\n   ?u \\<in> timpl_closure t TI\\<rbrakk>\n  \\<Longrightarrow> ?s \\<in> timpl_closure t TI\n\ngoal (1 subgoal):\n 1. (\\<Union>t\\<in>timpl_closure t TI. timpl_closure t TI)\n    \\<subseteq> timpl_closure t TI", "by blast"], ["proof (state)\nthis:\n  timpl_closure_set (timpl_closure t TI) TI \\<subseteq> timpl_closure t TI\n\ngoal (1 subgoal):\n 1. timpl_closure t TI \\<subseteq> timpl_closure_set (timpl_closure t TI) TI", "show \"?B \\<subseteq> ?A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. timpl_closure t TI \\<subseteq> timpl_closure_set (timpl_closure t TI) TI", "unfolding timpl_closure_set_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. timpl_closure t TI\n    \\<subseteq> (\\<Union>t\\<in>timpl_closure t TI. timpl_closure t TI)", "by (blast intro: timpl_closure.FP)"], ["proof (state)\nthis:\n  timpl_closure t TI \\<subseteq> timpl_closure_set (timpl_closure t TI) TI\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma timpl_closure_set_idem:\n  \"timpl_closure_set (timpl_closure_set M TI) TI = timpl_closure_set M TI\""], ["proof (prove)\ngoal (1 subgoal):\n 1. timpl_closure_set (timpl_closure_set M TI) TI = timpl_closure_set M TI", "using timpl_closure_idem[of _ TI]"], ["proof (prove)\nusing this:\n  timpl_closure_set (timpl_closure ?t TI) TI = timpl_closure ?t TI\n\ngoal (1 subgoal):\n 1. timpl_closure_set (timpl_closure_set M TI) TI = timpl_closure_set M TI", "unfolding timpl_closure_set_def"], ["proof (prove)\nusing this:\n  (\\<Union>t\\<in>timpl_closure ?t TI. timpl_closure t TI) =\n  timpl_closure ?t TI\n\ngoal (1 subgoal):\n 1. (\\<Union>t\\<in>\\<Union>t\\<in>M. timpl_closure t TI.\n        timpl_closure t TI) =\n    (\\<Union>t\\<in>M. timpl_closure t TI)", "by auto"], ["", "lemma timpl_closure_set_mono_timpl_closure_set:\n  assumes N: \"N \\<subseteq> timpl_closure_set M TI\"\n  shows \"timpl_closure_set N TI \\<subseteq> timpl_closure_set M TI\""], ["proof (prove)\ngoal (1 subgoal):\n 1. timpl_closure_set N TI \\<subseteq> timpl_closure_set M TI", "using timpl_closure_set_mono[OF N, of TI TI] timpl_closure_set_idem[of M TI]"], ["proof (prove)\nusing this:\n  TI \\<subseteq> TI \\<Longrightarrow>\n  timpl_closure_set N TI\n  \\<subseteq> timpl_closure_set (timpl_closure_set M TI) TI\n  timpl_closure_set (timpl_closure_set M TI) TI = timpl_closure_set M TI\n\ngoal (1 subgoal):\n 1. timpl_closure_set N TI \\<subseteq> timpl_closure_set M TI", "by simp"], ["", "lemma timpl_closure_is_timpl_closure':\n  \"s \\<in> timpl_closure t TI \\<longleftrightarrow> (t,s) \\<in> timpl_closure' TI\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (s \\<in> timpl_closure t TI) = ((t, s) \\<in> timpl_closure' TI)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. s \\<in> timpl_closure t TI \\<Longrightarrow>\n    (t, s) \\<in> timpl_closure' TI\n 2. (t, s) \\<in> timpl_closure' TI \\<Longrightarrow>\n    s \\<in> timpl_closure t TI", "show \"s \\<in> timpl_closure t TI \\<Longrightarrow> (t,s) \\<in> timpl_closure' TI\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<in> timpl_closure t TI \\<Longrightarrow>\n    (t, s) \\<in> timpl_closure' TI", "unfolding timpl_closure'_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<in> timpl_closure t TI \\<Longrightarrow>\n    (t, s) \\<in> (timpl_closure'_step TI)\\<^sup>*", "by (induct rule: timpl_closure.induct)\n       (auto intro: rtrancl_into_rtrancl timpl_closure'_step.intros)"], ["proof (state)\nthis:\n  s \\<in> timpl_closure t TI \\<Longrightarrow>\n  (t, s) \\<in> timpl_closure' TI\n\ngoal (1 subgoal):\n 1. (t, s) \\<in> timpl_closure' TI \\<Longrightarrow>\n    s \\<in> timpl_closure t TI", "show \"(t,s) \\<in> timpl_closure' TI \\<Longrightarrow> s \\<in> timpl_closure t TI\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (t, s) \\<in> timpl_closure' TI \\<Longrightarrow>\n    s \\<in> timpl_closure t TI", "unfolding timpl_closure'_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (t, s) \\<in> (timpl_closure'_step TI)\\<^sup>* \\<Longrightarrow>\n    s \\<in> timpl_closure t TI", "by (induct rule: rtrancl_induct)\n       (auto dest: timpl_closure'_step_inv\n             intro: timpl_closure.FP timpl_closure.TI)"], ["proof (state)\nthis:\n  (t, s) \\<in> timpl_closure' TI \\<Longrightarrow>\n  s \\<in> timpl_closure t TI\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma timpl_closure'_mono:\n  assumes \"TI \\<subseteq> TI'\"\n  shows \"timpl_closure' TI \\<subseteq> timpl_closure' TI'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. timpl_closure' TI \\<subseteq> timpl_closure' TI'", "using timpl_closure_mono[OF assms]\n      timpl_closure_is_timpl_closure'[of _ _ TI]\n      timpl_closure_is_timpl_closure'[of _ _ TI']"], ["proof (prove)\nusing this:\n  timpl_closure ?t TI \\<subseteq> timpl_closure ?t TI'\n  (?s \\<in> timpl_closure ?t TI) = ((?t, ?s) \\<in> timpl_closure' TI)\n  (?s \\<in> timpl_closure ?t TI') = ((?t, ?s) \\<in> timpl_closure' TI')\n\ngoal (1 subgoal):\n 1. timpl_closure' TI \\<subseteq> timpl_closure' TI'", "by fast"], ["", "lemma timpl_closureton_is_timpl_closure:\n  \"timpl_closure_set {t} TI = timpl_closure t TI\""], ["proof (prove)\ngoal (1 subgoal):\n 1. timpl_closure_set {t} TI = timpl_closure t TI", "by (simp add: timpl_closure_set_is_timpl_closure_union)"], ["", "lemma timpl_closure'_timpls_trancl_subset:\n  \"timpl_closure' (c\\<^sup>+) \\<subseteq> timpl_closure' c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. timpl_closure' (c\\<^sup>+) \\<subseteq> timpl_closure' c", "unfolding timpl_closure'_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (timpl_closure'_step (c\\<^sup>+))\\<^sup>*\n    \\<subseteq> (timpl_closure'_step c)\\<^sup>*", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       (x, y)\n       \\<in> (timpl_closure'_step (c\\<^sup>+))\\<^sup>* \\<Longrightarrow>\n       (x, y) \\<in> (timpl_closure'_step c)\\<^sup>*", "fix s t::\"(('a,'b,'c) prot_fun,'d) term\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       (x, y)\n       \\<in> (timpl_closure'_step (c\\<^sup>+))\\<^sup>* \\<Longrightarrow>\n       (x, y) \\<in> (timpl_closure'_step c)\\<^sup>*", "show \"(s,t) \\<in> (timpl_closure'_step (c\\<^sup>+))\\<^sup>* \\<Longrightarrow> (s,t) \\<in> (timpl_closure'_step c)\\<^sup>*\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (s, t) \\<in> (timpl_closure'_step (c\\<^sup>+))\\<^sup>* \\<Longrightarrow>\n    (s, t) \\<in> (timpl_closure'_step c)\\<^sup>*", "proof (induction rule: rtrancl_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. (s, s) \\<in> (timpl_closure'_step c)\\<^sup>*\n 2. \\<And>y z.\n       \\<lbrakk>(s, y) \\<in> (timpl_closure'_step (c\\<^sup>+))\\<^sup>*;\n        (y, z) \\<in> timpl_closure'_step (c\\<^sup>+);\n        (s, y) \\<in> (timpl_closure'_step c)\\<^sup>*\\<rbrakk>\n       \\<Longrightarrow> (s, z) \\<in> (timpl_closure'_step c)\\<^sup>*", "case (step u t)"], ["proof (state)\nthis:\n  (s, u) \\<in> (timpl_closure'_step (c\\<^sup>+))\\<^sup>*\n  (u, t) \\<in> timpl_closure'_step (c\\<^sup>+)\n  (s, u) \\<in> (timpl_closure'_step c)\\<^sup>*\n\ngoal (2 subgoals):\n 1. (s, s) \\<in> (timpl_closure'_step c)\\<^sup>*\n 2. \\<And>y z.\n       \\<lbrakk>(s, y) \\<in> (timpl_closure'_step (c\\<^sup>+))\\<^sup>*;\n        (y, z) \\<in> timpl_closure'_step (c\\<^sup>+);\n        (s, y) \\<in> (timpl_closure'_step c)\\<^sup>*\\<rbrakk>\n       \\<Longrightarrow> (s, z) \\<in> (timpl_closure'_step c)\\<^sup>*", "obtain a b where ab:\n        \"(a,b) \\<in> c\\<^sup>+\" \"term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) u t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>a b.\n        \\<lbrakk>(a, b) \\<in> c\\<^sup>+;\n         term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) u\n          t\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using step.hyps(2) timpl_closure'_step_inv"], ["proof (prove)\nusing this:\n  (u, t) \\<in> timpl_closure'_step (c\\<^sup>+)\n  \\<lbrakk>(?t, ?s) \\<in> timpl_closure'_step ?TI;\n   \\<And>a b.\n      \\<lbrakk>(a, b) \\<in> ?TI;\n       term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) ?t\n        ?s\\<rbrakk>\n      \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>a b.\n        \\<lbrakk>(a, b) \\<in> c\\<^sup>+;\n         term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) u\n          t\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  (a, b) \\<in> c\\<^sup>+\n  term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) u t\n\ngoal (2 subgoals):\n 1. (s, s) \\<in> (timpl_closure'_step c)\\<^sup>*\n 2. \\<And>y z.\n       \\<lbrakk>(s, y) \\<in> (timpl_closure'_step (c\\<^sup>+))\\<^sup>*;\n        (y, z) \\<in> timpl_closure'_step (c\\<^sup>+);\n        (s, y) \\<in> (timpl_closure'_step c)\\<^sup>*\\<rbrakk>\n       \\<Longrightarrow> (s, z) \\<in> (timpl_closure'_step c)\\<^sup>*", "hence \"(u,t) \\<in> (timpl_closure'_step c)\\<^sup>*\""], ["proof (prove)\nusing this:\n  (a, b) \\<in> c\\<^sup>+\n  term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) u t\n\ngoal (1 subgoal):\n 1. (u, t) \\<in> (timpl_closure'_step c)\\<^sup>*", "proof (induction arbitrary: t rule: trancl_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>y t.\n       \\<lbrakk>(a, y) \\<in> c;\n        term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs y])) u t\\<rbrakk>\n       \\<Longrightarrow> (u, t) \\<in> (timpl_closure'_step c)\\<^sup>*\n 2. \\<And>y z t.\n       \\<lbrakk>(a, y) \\<in> c\\<^sup>+; (y, z) \\<in> c;\n        \\<And>t.\n           term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs y])) u\n            t \\<Longrightarrow>\n           (u, t) \\<in> (timpl_closure'_step c)\\<^sup>*;\n        term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs z])) u t\\<rbrakk>\n       \\<Longrightarrow> (u, t) \\<in> (timpl_closure'_step c)\\<^sup>*", "case (step d e)"], ["proof (state)\nthis:\n  (a, d) \\<in> c\\<^sup>+\n  (d, e) \\<in> c\n  term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs d])) u\n   ?t \\<Longrightarrow>\n  (u, ?t) \\<in> (timpl_closure'_step c)\\<^sup>*\n  term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs e])) u t\n\ngoal (2 subgoals):\n 1. \\<And>y t.\n       \\<lbrakk>(a, y) \\<in> c;\n        term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs y])) u t\\<rbrakk>\n       \\<Longrightarrow> (u, t) \\<in> (timpl_closure'_step c)\\<^sup>*\n 2. \\<And>y z t.\n       \\<lbrakk>(a, y) \\<in> c\\<^sup>+; (y, z) \\<in> c;\n        \\<And>t.\n           term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs y])) u\n            t \\<Longrightarrow>\n           (u, t) \\<in> (timpl_closure'_step c)\\<^sup>*;\n        term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs z])) u t\\<rbrakk>\n       \\<Longrightarrow> (u, t) \\<in> (timpl_closure'_step c)\\<^sup>*", "obtain s where s:\n          \"term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs d])) u s\"\n          \"term_variants_pred ((\\<lambda>_. [])(Abs d := [Abs e])) s t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>s.\n        \\<lbrakk>term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs d])) u\n                  s;\n         term_variants_pred ((\\<lambda>_. [])(Abs d := [Abs e])) s\n          t\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using term_variants_pred_dense'[OF step.prems, of \"Abs d\"]"], ["proof (prove)\nusing this:\n  \\<exists>s.\n     term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs d])) u s \\<and>\n     term_variants_pred ((\\<lambda>_. [])(Abs d := [Abs e])) s t\n\ngoal (1 subgoal):\n 1. (\\<And>s.\n        \\<lbrakk>term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs d])) u\n                  s;\n         term_variants_pred ((\\<lambda>_. [])(Abs d := [Abs e])) s\n          t\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs d])) u s\n  term_variants_pred ((\\<lambda>_. [])(Abs d := [Abs e])) s t\n\ngoal (2 subgoals):\n 1. \\<And>y t.\n       \\<lbrakk>(a, y) \\<in> c;\n        term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs y])) u t\\<rbrakk>\n       \\<Longrightarrow> (u, t) \\<in> (timpl_closure'_step c)\\<^sup>*\n 2. \\<And>y z t.\n       \\<lbrakk>(a, y) \\<in> c\\<^sup>+; (y, z) \\<in> c;\n        \\<And>t.\n           term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs y])) u\n            t \\<Longrightarrow>\n           (u, t) \\<in> (timpl_closure'_step c)\\<^sup>*;\n        term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs z])) u t\\<rbrakk>\n       \\<Longrightarrow> (u, t) \\<in> (timpl_closure'_step c)\\<^sup>*", "have \"(u,s) \\<in> (timpl_closure'_step c)\\<^sup>*\"\n           \"(s,t) \\<in> timpl_closure'_step c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (u, s) \\<in> (timpl_closure'_step c)\\<^sup>* &&&\n    (s, t) \\<in> timpl_closure'_step c", "using step.hyps(2) s(2) step.IH[OF s(1)]"], ["proof (prove)\nusing this:\n  (d, e) \\<in> c\n  term_variants_pred ((\\<lambda>_. [])(Abs d := [Abs e])) s t\n  (u, s) \\<in> (timpl_closure'_step c)\\<^sup>*\n\ngoal (1 subgoal):\n 1. (u, s) \\<in> (timpl_closure'_step c)\\<^sup>* &&&\n    (s, t) \\<in> timpl_closure'_step c", "by (auto intro: timpl_closure'_step.intros)"], ["proof (state)\nthis:\n  (u, s) \\<in> (timpl_closure'_step c)\\<^sup>*\n  (s, t) \\<in> timpl_closure'_step c\n\ngoal (2 subgoals):\n 1. \\<And>y t.\n       \\<lbrakk>(a, y) \\<in> c;\n        term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs y])) u t\\<rbrakk>\n       \\<Longrightarrow> (u, t) \\<in> (timpl_closure'_step c)\\<^sup>*\n 2. \\<And>y z t.\n       \\<lbrakk>(a, y) \\<in> c\\<^sup>+; (y, z) \\<in> c;\n        \\<And>t.\n           term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs y])) u\n            t \\<Longrightarrow>\n           (u, t) \\<in> (timpl_closure'_step c)\\<^sup>*;\n        term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs z])) u t\\<rbrakk>\n       \\<Longrightarrow> (u, t) \\<in> (timpl_closure'_step c)\\<^sup>*", "thus ?case"], ["proof (prove)\nusing this:\n  (u, s) \\<in> (timpl_closure'_step c)\\<^sup>*\n  (s, t) \\<in> timpl_closure'_step c\n\ngoal (1 subgoal):\n 1. (u, t) \\<in> (timpl_closure'_step c)\\<^sup>*", "by simp"], ["proof (state)\nthis:\n  (u, t) \\<in> (timpl_closure'_step c)\\<^sup>*\n\ngoal (1 subgoal):\n 1. \\<And>y t.\n       \\<lbrakk>(a, y) \\<in> c;\n        term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs y])) u t\\<rbrakk>\n       \\<Longrightarrow> (u, t) \\<in> (timpl_closure'_step c)\\<^sup>*", "qed (auto intro: timpl_closure'_step.intros)"], ["proof (state)\nthis:\n  (u, t) \\<in> (timpl_closure'_step c)\\<^sup>*\n\ngoal (2 subgoals):\n 1. (s, s) \\<in> (timpl_closure'_step c)\\<^sup>*\n 2. \\<And>y z.\n       \\<lbrakk>(s, y) \\<in> (timpl_closure'_step (c\\<^sup>+))\\<^sup>*;\n        (y, z) \\<in> timpl_closure'_step (c\\<^sup>+);\n        (s, y) \\<in> (timpl_closure'_step c)\\<^sup>*\\<rbrakk>\n       \\<Longrightarrow> (s, z) \\<in> (timpl_closure'_step c)\\<^sup>*", "thus ?case"], ["proof (prove)\nusing this:\n  (u, t) \\<in> (timpl_closure'_step c)\\<^sup>*\n\ngoal (1 subgoal):\n 1. (s, t) \\<in> (timpl_closure'_step c)\\<^sup>*", "using step.IH"], ["proof (prove)\nusing this:\n  (u, t) \\<in> (timpl_closure'_step c)\\<^sup>*\n  (s, u) \\<in> (timpl_closure'_step c)\\<^sup>*\n\ngoal (1 subgoal):\n 1. (s, t) \\<in> (timpl_closure'_step c)\\<^sup>*", "by simp"], ["proof (state)\nthis:\n  (s, t) \\<in> (timpl_closure'_step c)\\<^sup>*\n\ngoal (1 subgoal):\n 1. (s, s) \\<in> (timpl_closure'_step c)\\<^sup>*", "qed simp"], ["proof (state)\nthis:\n  (s, t) \\<in> (timpl_closure'_step (c\\<^sup>+))\\<^sup>* \\<Longrightarrow>\n  (s, t) \\<in> (timpl_closure'_step c)\\<^sup>*\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma timpl_closure'_timpls_trancl_subset':\n  \"timpl_closure' {(a,b) \\<in> c\\<^sup>+. a \\<noteq> b} \\<subseteq> timpl_closure' c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. timpl_closure' {(a, b). (a, b) \\<in> c\\<^sup>+ \\<and> a \\<noteq> b}\n    \\<subseteq> timpl_closure' c", "using timpl_closure'_timpls_trancl_subset\n      timpl_closure'_mono[of \"{(a,b) \\<in> c\\<^sup>+. a \\<noteq> b}\" \"c\\<^sup>+\"]"], ["proof (prove)\nusing this:\n  timpl_closure' (?c\\<^sup>+) \\<subseteq> timpl_closure' ?c\n  {(a, b). (a, b) \\<in> c\\<^sup>+ \\<and> a \\<noteq> b}\n  \\<subseteq> c\\<^sup>+ \\<Longrightarrow>\n  timpl_closure' {(a, b). (a, b) \\<in> c\\<^sup>+ \\<and> a \\<noteq> b}\n  \\<subseteq> timpl_closure' (c\\<^sup>+)\n\ngoal (1 subgoal):\n 1. timpl_closure' {(a, b). (a, b) \\<in> c\\<^sup>+ \\<and> a \\<noteq> b}\n    \\<subseteq> timpl_closure' c", "by fast"], ["", "lemma timpl_closure_set_timpls_trancl_subset:\n  \"timpl_closure_set M (c\\<^sup>+) \\<subseteq> timpl_closure_set M c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. timpl_closure_set M (c\\<^sup>+) \\<subseteq> timpl_closure_set M c", "using timpl_closure'_timpls_trancl_subset[of c]\n      timpl_closure_is_timpl_closure'[of _ _ c]\n      timpl_closure_is_timpl_closure'[of _ _ \"c\\<^sup>+\"]\n      timpl_closure_set_is_timpl_closure_union[of M c]\n      timpl_closure_set_is_timpl_closure_union[of M \"c\\<^sup>+\"]"], ["proof (prove)\nusing this:\n  timpl_closure' (c\\<^sup>+) \\<subseteq> timpl_closure' c\n  (?s \\<in> timpl_closure ?t c) = ((?t, ?s) \\<in> timpl_closure' c)\n  (?s \\<in> timpl_closure ?t (c\\<^sup>+)) =\n  ((?t, ?s) \\<in> timpl_closure' (c\\<^sup>+))\n  timpl_closure_set M c = (\\<Union>t\\<in>M. timpl_closure t c)\n  timpl_closure_set M (c\\<^sup>+) =\n  (\\<Union>t\\<in>M. timpl_closure t (c\\<^sup>+))\n\ngoal (1 subgoal):\n 1. timpl_closure_set M (c\\<^sup>+) \\<subseteq> timpl_closure_set M c", "by fastforce"], ["", "lemma timpl_closure_set_timpls_trancl_subset':\n  \"timpl_closure_set M {(a,b) \\<in> c\\<^sup>+. a \\<noteq> b} \\<subseteq> timpl_closure_set M c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. timpl_closure_set M {(a, b). (a, b) \\<in> c\\<^sup>+ \\<and> a \\<noteq> b}\n    \\<subseteq> timpl_closure_set M c", "using timpl_closure'_timpls_trancl_subset'[of c]\n      timpl_closure_is_timpl_closure'[of _ _ c]\n      timpl_closure_is_timpl_closure'[of _ _ \"{(a,b) \\<in> c\\<^sup>+. a \\<noteq> b}\"]\n      timpl_closure_set_is_timpl_closure_union[of M c]\n      timpl_closure_set_is_timpl_closure_union[of M \"{(a,b) \\<in> c\\<^sup>+. a \\<noteq> b}\"]"], ["proof (prove)\nusing this:\n  timpl_closure' {(a, b). (a, b) \\<in> c\\<^sup>+ \\<and> a \\<noteq> b}\n  \\<subseteq> timpl_closure' c\n  (?s \\<in> timpl_closure ?t c) = ((?t, ?s) \\<in> timpl_closure' c)\n  (?s \\<in> timpl_closure ?t\n             {(a, b). (a, b) \\<in> c\\<^sup>+ \\<and> a \\<noteq> b}) =\n  ((?t, ?s)\n   \\<in> timpl_closure'\n          {(a, b). (a, b) \\<in> c\\<^sup>+ \\<and> a \\<noteq> b})\n  timpl_closure_set M c = (\\<Union>t\\<in>M. timpl_closure t c)\n  timpl_closure_set M {(a, b). (a, b) \\<in> c\\<^sup>+ \\<and> a \\<noteq> b} =\n  (\\<Union>t\\<in>M.\n      timpl_closure t {(a, b). (a, b) \\<in> c\\<^sup>+ \\<and> a \\<noteq> b})\n\ngoal (1 subgoal):\n 1. timpl_closure_set M {(a, b). (a, b) \\<in> c\\<^sup>+ \\<and> a \\<noteq> b}\n    \\<subseteq> timpl_closure_set M c", "by fastforce"], ["", "lemma timpl_closure'_timpls_trancl_supset':\n  \"timpl_closure' c \\<subseteq> timpl_closure' {(a,b) \\<in> c\\<^sup>+. a \\<noteq> b}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. timpl_closure' c\n    \\<subseteq> timpl_closure'\n                 {(a, b). (a, b) \\<in> c\\<^sup>+ \\<and> a \\<noteq> b}", "unfolding timpl_closure'_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (timpl_closure'_step c)\\<^sup>*\n    \\<subseteq> (timpl_closure'_step\n                  {(a, b).\n                   (a, b) \\<in> c\\<^sup>+ \\<and> a \\<noteq> b})\\<^sup>*", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       (x, y) \\<in> (timpl_closure'_step c)\\<^sup>* \\<Longrightarrow>\n       (x, y)\n       \\<in> (timpl_closure'_step\n               {(a, b). (a, b) \\<in> c\\<^sup>+ \\<and> a \\<noteq> b})\\<^sup>*", "let ?cl = \"{(a,b) \\<in> c\\<^sup>+. a \\<noteq> b}\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       (x, y) \\<in> (timpl_closure'_step c)\\<^sup>* \\<Longrightarrow>\n       (x, y)\n       \\<in> (timpl_closure'_step\n               {(a, b). (a, b) \\<in> c\\<^sup>+ \\<and> a \\<noteq> b})\\<^sup>*", "fix s t::\"(('e,'f,'c) prot_fun,'g) term\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       (x, y) \\<in> (timpl_closure'_step c)\\<^sup>* \\<Longrightarrow>\n       (x, y)\n       \\<in> (timpl_closure'_step\n               {(a, b). (a, b) \\<in> c\\<^sup>+ \\<and> a \\<noteq> b})\\<^sup>*", "show \"(s,t) \\<in> (timpl_closure'_step c)\\<^sup>* \\<Longrightarrow> (s,t) \\<in> (timpl_closure'_step ?cl)\\<^sup>*\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (s, t) \\<in> (timpl_closure'_step c)\\<^sup>* \\<Longrightarrow>\n    (s, t)\n    \\<in> (timpl_closure'_step\n            {(a, b). (a, b) \\<in> c\\<^sup>+ \\<and> a \\<noteq> b})\\<^sup>*", "proof (induction rule: rtrancl_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. (s, s)\n    \\<in> (timpl_closure'_step\n            {a. case a of\n                (a, b) \\<Rightarrow>\n                  (a, b) \\<in> c\\<^sup>+ \\<and> a \\<noteq> b})\\<^sup>*\n 2. \\<And>y z.\n       \\<lbrakk>(s, y) \\<in> (timpl_closure'_step c)\\<^sup>*;\n        (y, z) \\<in> timpl_closure'_step c;\n        (s, y)\n        \\<in> (timpl_closure'_step\n                {a. case a of\n                    (a, b) \\<Rightarrow>\n                      (a, b) \\<in> c\\<^sup>+ \\<and>\n                      a \\<noteq> b})\\<^sup>*\\<rbrakk>\n       \\<Longrightarrow> (s, z)\n                         \\<in> (timpl_closure'_step\n                                 {a. case a of\n                                     (a, b) \\<Rightarrow>\n (a, b) \\<in> c\\<^sup>+ \\<and> a \\<noteq> b})\\<^sup>*", "case (step u t)"], ["proof (state)\nthis:\n  (s, u) \\<in> (timpl_closure'_step c)\\<^sup>*\n  (u, t) \\<in> timpl_closure'_step c\n  (s, u)\n  \\<in> (timpl_closure'_step\n          {a. case a of\n              (a, b) \\<Rightarrow>\n                (a, b) \\<in> c\\<^sup>+ \\<and> a \\<noteq> b})\\<^sup>*\n\ngoal (2 subgoals):\n 1. (s, s)\n    \\<in> (timpl_closure'_step\n            {a. case a of\n                (a, b) \\<Rightarrow>\n                  (a, b) \\<in> c\\<^sup>+ \\<and> a \\<noteq> b})\\<^sup>*\n 2. \\<And>y z.\n       \\<lbrakk>(s, y) \\<in> (timpl_closure'_step c)\\<^sup>*;\n        (y, z) \\<in> timpl_closure'_step c;\n        (s, y)\n        \\<in> (timpl_closure'_step\n                {a. case a of\n                    (a, b) \\<Rightarrow>\n                      (a, b) \\<in> c\\<^sup>+ \\<and>\n                      a \\<noteq> b})\\<^sup>*\\<rbrakk>\n       \\<Longrightarrow> (s, z)\n                         \\<in> (timpl_closure'_step\n                                 {a. case a of\n                                     (a, b) \\<Rightarrow>\n (a, b) \\<in> c\\<^sup>+ \\<and> a \\<noteq> b})\\<^sup>*", "obtain a b where ab:\n        \"(a,b) \\<in> c\" \"term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) u t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>a b.\n        \\<lbrakk>(a, b) \\<in> c;\n         term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) u\n          t\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using step.hyps(2) timpl_closure'_step_inv"], ["proof (prove)\nusing this:\n  (u, t) \\<in> timpl_closure'_step c\n  \\<lbrakk>(?t, ?s) \\<in> timpl_closure'_step ?TI;\n   \\<And>a b.\n      \\<lbrakk>(a, b) \\<in> ?TI;\n       term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) ?t\n        ?s\\<rbrakk>\n      \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>a b.\n        \\<lbrakk>(a, b) \\<in> c;\n         term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) u\n          t\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  (a, b) \\<in> c\n  term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) u t\n\ngoal (2 subgoals):\n 1. (s, s)\n    \\<in> (timpl_closure'_step\n            {a. case a of\n                (a, b) \\<Rightarrow>\n                  (a, b) \\<in> c\\<^sup>+ \\<and> a \\<noteq> b})\\<^sup>*\n 2. \\<And>y z.\n       \\<lbrakk>(s, y) \\<in> (timpl_closure'_step c)\\<^sup>*;\n        (y, z) \\<in> timpl_closure'_step c;\n        (s, y)\n        \\<in> (timpl_closure'_step\n                {a. case a of\n                    (a, b) \\<Rightarrow>\n                      (a, b) \\<in> c\\<^sup>+ \\<and>\n                      a \\<noteq> b})\\<^sup>*\\<rbrakk>\n       \\<Longrightarrow> (s, z)\n                         \\<in> (timpl_closure'_step\n                                 {a. case a of\n                                     (a, b) \\<Rightarrow>\n (a, b) \\<in> c\\<^sup>+ \\<and> a \\<noteq> b})\\<^sup>*", "hence \"(a,b) \\<in> c\\<^sup>+\""], ["proof (prove)\nusing this:\n  (a, b) \\<in> c\n  term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) u t\n\ngoal (1 subgoal):\n 1. (a, b) \\<in> c\\<^sup>+", "by simp"], ["proof (state)\nthis:\n  (a, b) \\<in> c\\<^sup>+\n\ngoal (2 subgoals):\n 1. (s, s)\n    \\<in> (timpl_closure'_step\n            {a. case a of\n                (a, b) \\<Rightarrow>\n                  (a, b) \\<in> c\\<^sup>+ \\<and> a \\<noteq> b})\\<^sup>*\n 2. \\<And>y z.\n       \\<lbrakk>(s, y) \\<in> (timpl_closure'_step c)\\<^sup>*;\n        (y, z) \\<in> timpl_closure'_step c;\n        (s, y)\n        \\<in> (timpl_closure'_step\n                {a. case a of\n                    (a, b) \\<Rightarrow>\n                      (a, b) \\<in> c\\<^sup>+ \\<and>\n                      a \\<noteq> b})\\<^sup>*\\<rbrakk>\n       \\<Longrightarrow> (s, z)\n                         \\<in> (timpl_closure'_step\n                                 {a. case a of\n                                     (a, b) \\<Rightarrow>\n (a, b) \\<in> c\\<^sup>+ \\<and> a \\<noteq> b})\\<^sup>*", "hence \"(u,t) \\<in> (timpl_closure'_step ?cl)\\<^sup>*\""], ["proof (prove)\nusing this:\n  (a, b) \\<in> c\\<^sup>+\n\ngoal (1 subgoal):\n 1. (u, t)\n    \\<in> (timpl_closure'_step\n            {(a, b). (a, b) \\<in> c\\<^sup>+ \\<and> a \\<noteq> b})\\<^sup>*", "using ab(2)"], ["proof (prove)\nusing this:\n  (a, b) \\<in> c\\<^sup>+\n  term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) u t\n\ngoal (1 subgoal):\n 1. (u, t)\n    \\<in> (timpl_closure'_step\n            {(a, b). (a, b) \\<in> c\\<^sup>+ \\<and> a \\<noteq> b})\\<^sup>*", "proof (induction arbitrary: t rule: trancl_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>y t.\n       \\<lbrakk>(a, y) \\<in> c;\n        term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs y])) u t\\<rbrakk>\n       \\<Longrightarrow> (u, t)\n                         \\<in> (timpl_closure'_step\n                                 {(a, b).\n                                  (a, b) \\<in> c\\<^sup>+ \\<and>\n                                  a \\<noteq> b})\\<^sup>*\n 2. \\<And>y z t.\n       \\<lbrakk>(a, y) \\<in> c\\<^sup>+; (y, z) \\<in> c;\n        \\<And>t.\n           term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs y])) u\n            t \\<Longrightarrow>\n           (u, t)\n           \\<in> (timpl_closure'_step\n                   {(a, b).\n                    (a, b) \\<in> c\\<^sup>+ \\<and> a \\<noteq> b})\\<^sup>*;\n        term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs z])) u t\\<rbrakk>\n       \\<Longrightarrow> (u, t)\n                         \\<in> (timpl_closure'_step\n                                 {(a, b).\n                                  (a, b) \\<in> c\\<^sup>+ \\<and>\n                                  a \\<noteq> b})\\<^sup>*", "case (base d)"], ["proof (state)\nthis:\n  (a, d) \\<in> c\n  term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs d])) u t\n\ngoal (2 subgoals):\n 1. \\<And>y t.\n       \\<lbrakk>(a, y) \\<in> c;\n        term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs y])) u t\\<rbrakk>\n       \\<Longrightarrow> (u, t)\n                         \\<in> (timpl_closure'_step\n                                 {(a, b).\n                                  (a, b) \\<in> c\\<^sup>+ \\<and>\n                                  a \\<noteq> b})\\<^sup>*\n 2. \\<And>y z t.\n       \\<lbrakk>(a, y) \\<in> c\\<^sup>+; (y, z) \\<in> c;\n        \\<And>t.\n           term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs y])) u\n            t \\<Longrightarrow>\n           (u, t)\n           \\<in> (timpl_closure'_step\n                   {(a, b).\n                    (a, b) \\<in> c\\<^sup>+ \\<and> a \\<noteq> b})\\<^sup>*;\n        term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs z])) u t\\<rbrakk>\n       \\<Longrightarrow> (u, t)\n                         \\<in> (timpl_closure'_step\n                                 {(a, b).\n                                  (a, b) \\<in> c\\<^sup>+ \\<and>\n                                  a \\<noteq> b})\\<^sup>*", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. (u, t)\n    \\<in> (timpl_closure'_step\n            {a. case a of\n                (a, b) \\<Rightarrow>\n                  (a, b) \\<in> c\\<^sup>+ \\<and> a \\<noteq> b})\\<^sup>*", "proof (cases \"a = d\")"], ["proof (state)\ngoal (2 subgoals):\n 1. a = d \\<Longrightarrow>\n    (u, t)\n    \\<in> (timpl_closure'_step\n            {a. case a of\n                (a, b) \\<Rightarrow>\n                  (a, b) \\<in> c\\<^sup>+ \\<and> a \\<noteq> b})\\<^sup>*\n 2. a \\<noteq> d \\<Longrightarrow>\n    (u, t)\n    \\<in> (timpl_closure'_step\n            {a. case a of\n                (a, b) \\<Rightarrow>\n                  (a, b) \\<in> c\\<^sup>+ \\<and> a \\<noteq> b})\\<^sup>*", "case True"], ["proof (state)\nthis:\n  a = d\n\ngoal (2 subgoals):\n 1. a = d \\<Longrightarrow>\n    (u, t)\n    \\<in> (timpl_closure'_step\n            {a. case a of\n                (a, b) \\<Rightarrow>\n                  (a, b) \\<in> c\\<^sup>+ \\<and> a \\<noteq> b})\\<^sup>*\n 2. a \\<noteq> d \\<Longrightarrow>\n    (u, t)\n    \\<in> (timpl_closure'_step\n            {a. case a of\n                (a, b) \\<Rightarrow>\n                  (a, b) \\<in> c\\<^sup>+ \\<and> a \\<noteq> b})\\<^sup>*", "thus ?thesis"], ["proof (prove)\nusing this:\n  a = d\n\ngoal (1 subgoal):\n 1. (u, t)\n    \\<in> (timpl_closure'_step\n            {a. case a of\n                (a, b) \\<Rightarrow>\n                  (a, b) \\<in> c\\<^sup>+ \\<and> a \\<noteq> b})\\<^sup>*", "using base term_variants_pred_refl_inv[of _ u t]"], ["proof (prove)\nusing this:\n  a = d\n  (a, d) \\<in> c\n  term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs d])) u t\n  \\<lbrakk>term_variants_pred ?P u t;\n   \\<forall>f. \\<forall>g\\<in>set (?P f). f = g\\<rbrakk>\n  \\<Longrightarrow> u = t\n\ngoal (1 subgoal):\n 1. (u, t)\n    \\<in> (timpl_closure'_step\n            {a. case a of\n                (a, b) \\<Rightarrow>\n                  (a, b) \\<in> c\\<^sup>+ \\<and> a \\<noteq> b})\\<^sup>*", "by force"], ["proof (state)\nthis:\n  (u, t)\n  \\<in> (timpl_closure'_step\n          {a. case a of\n              (a, b) \\<Rightarrow>\n                (a, b) \\<in> c\\<^sup>+ \\<and> a \\<noteq> b})\\<^sup>*\n\ngoal (1 subgoal):\n 1. a \\<noteq> d \\<Longrightarrow>\n    (u, t)\n    \\<in> (timpl_closure'_step\n            {a. case a of\n                (a, b) \\<Rightarrow>\n                  (a, b) \\<in> c\\<^sup>+ \\<and> a \\<noteq> b})\\<^sup>*", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. a \\<noteq> d \\<Longrightarrow>\n    (u, t)\n    \\<in> (timpl_closure'_step\n            {a. case a of\n                (a, b) \\<Rightarrow>\n                  (a, b) \\<in> c\\<^sup>+ \\<and> a \\<noteq> b})\\<^sup>*", "case False"], ["proof (state)\nthis:\n  a \\<noteq> d\n\ngoal (1 subgoal):\n 1. a \\<noteq> d \\<Longrightarrow>\n    (u, t)\n    \\<in> (timpl_closure'_step\n            {a. case a of\n                (a, b) \\<Rightarrow>\n                  (a, b) \\<in> c\\<^sup>+ \\<and> a \\<noteq> b})\\<^sup>*", "thus ?thesis"], ["proof (prove)\nusing this:\n  a \\<noteq> d\n\ngoal (1 subgoal):\n 1. (u, t)\n    \\<in> (timpl_closure'_step\n            {a. case a of\n                (a, b) \\<Rightarrow>\n                  (a, b) \\<in> c\\<^sup>+ \\<and> a \\<noteq> b})\\<^sup>*", "using base timpl_closure'_step.intros[of a d ?cl]"], ["proof (prove)\nusing this:\n  a \\<noteq> d\n  (a, d) \\<in> c\n  term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs d])) u t\n  \\<lbrakk>(a, d)\n           \\<in> {(a, b). (a, b) \\<in> c\\<^sup>+ \\<and> a \\<noteq> b};\n   term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs d])) ?t ?s\\<rbrakk>\n  \\<Longrightarrow> (?t, ?s)\n                    \\<in> timpl_closure'_step\n                           {(a, b).\n                            (a, b) \\<in> c\\<^sup>+ \\<and> a \\<noteq> b}\n\ngoal (1 subgoal):\n 1. (u, t)\n    \\<in> (timpl_closure'_step\n            {a. case a of\n                (a, b) \\<Rightarrow>\n                  (a, b) \\<in> c\\<^sup>+ \\<and> a \\<noteq> b})\\<^sup>*", "by fast"], ["proof (state)\nthis:\n  (u, t)\n  \\<in> (timpl_closure'_step\n          {a. case a of\n              (a, b) \\<Rightarrow>\n                (a, b) \\<in> c\\<^sup>+ \\<and> a \\<noteq> b})\\<^sup>*\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (u, t)\n  \\<in> (timpl_closure'_step\n          {a. case a of\n              (a, b) \\<Rightarrow>\n                (a, b) \\<in> c\\<^sup>+ \\<and> a \\<noteq> b})\\<^sup>*\n\ngoal (1 subgoal):\n 1. \\<And>y z t.\n       \\<lbrakk>(a, y) \\<in> c\\<^sup>+; (y, z) \\<in> c;\n        \\<And>t.\n           term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs y])) u\n            t \\<Longrightarrow>\n           (u, t)\n           \\<in> (timpl_closure'_step\n                   {(a, b).\n                    (a, b) \\<in> c\\<^sup>+ \\<and> a \\<noteq> b})\\<^sup>*;\n        term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs z])) u t\\<rbrakk>\n       \\<Longrightarrow> (u, t)\n                         \\<in> (timpl_closure'_step\n                                 {(a, b).\n                                  (a, b) \\<in> c\\<^sup>+ \\<and>\n                                  a \\<noteq> b})\\<^sup>*", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y z t.\n       \\<lbrakk>(a, y) \\<in> c\\<^sup>+; (y, z) \\<in> c;\n        \\<And>t.\n           term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs y])) u\n            t \\<Longrightarrow>\n           (u, t)\n           \\<in> (timpl_closure'_step\n                   {(a, b).\n                    (a, b) \\<in> c\\<^sup>+ \\<and> a \\<noteq> b})\\<^sup>*;\n        term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs z])) u t\\<rbrakk>\n       \\<Longrightarrow> (u, t)\n                         \\<in> (timpl_closure'_step\n                                 {(a, b).\n                                  (a, b) \\<in> c\\<^sup>+ \\<and>\n                                  a \\<noteq> b})\\<^sup>*", "case (step d e)"], ["proof (state)\nthis:\n  (a, d) \\<in> c\\<^sup>+\n  (d, e) \\<in> c\n  term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs d])) u\n   ?t \\<Longrightarrow>\n  (u, ?t)\n  \\<in> (timpl_closure'_step\n          {a. case a of\n              (a, b) \\<Rightarrow>\n                (a, b) \\<in> c\\<^sup>+ \\<and> a \\<noteq> b})\\<^sup>*\n  term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs e])) u t\n\ngoal (1 subgoal):\n 1. \\<And>y z t.\n       \\<lbrakk>(a, y) \\<in> c\\<^sup>+; (y, z) \\<in> c;\n        \\<And>t.\n           term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs y])) u\n            t \\<Longrightarrow>\n           (u, t)\n           \\<in> (timpl_closure'_step\n                   {(a, b).\n                    (a, b) \\<in> c\\<^sup>+ \\<and> a \\<noteq> b})\\<^sup>*;\n        term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs z])) u t\\<rbrakk>\n       \\<Longrightarrow> (u, t)\n                         \\<in> (timpl_closure'_step\n                                 {(a, b).\n                                  (a, b) \\<in> c\\<^sup>+ \\<and>\n                                  a \\<noteq> b})\\<^sup>*", "obtain s where s:\n          \"term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs d])) u s\"\n          \"term_variants_pred ((\\<lambda>_. [])(Abs d := [Abs e])) s t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>s.\n        \\<lbrakk>term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs d])) u\n                  s;\n         term_variants_pred ((\\<lambda>_. [])(Abs d := [Abs e])) s\n          t\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using term_variants_pred_dense'[OF step.prems, of \"Abs d\"]"], ["proof (prove)\nusing this:\n  \\<exists>s.\n     term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs d])) u s \\<and>\n     term_variants_pred ((\\<lambda>_. [])(Abs d := [Abs e])) s t\n\ngoal (1 subgoal):\n 1. (\\<And>s.\n        \\<lbrakk>term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs d])) u\n                  s;\n         term_variants_pred ((\\<lambda>_. [])(Abs d := [Abs e])) s\n          t\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs d])) u s\n  term_variants_pred ((\\<lambda>_. [])(Abs d := [Abs e])) s t\n\ngoal (1 subgoal):\n 1. \\<And>y z t.\n       \\<lbrakk>(a, y) \\<in> c\\<^sup>+; (y, z) \\<in> c;\n        \\<And>t.\n           term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs y])) u\n            t \\<Longrightarrow>\n           (u, t)\n           \\<in> (timpl_closure'_step\n                   {(a, b).\n                    (a, b) \\<in> c\\<^sup>+ \\<and> a \\<noteq> b})\\<^sup>*;\n        term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs z])) u t\\<rbrakk>\n       \\<Longrightarrow> (u, t)\n                         \\<in> (timpl_closure'_step\n                                 {(a, b).\n                                  (a, b) \\<in> c\\<^sup>+ \\<and>\n                                  a \\<noteq> b})\\<^sup>*", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. (u, t)\n    \\<in> (timpl_closure'_step\n            {a. case a of\n                (a, b) \\<Rightarrow>\n                  (a, b) \\<in> c\\<^sup>+ \\<and> a \\<noteq> b})\\<^sup>*", "proof (cases \"d = e\")"], ["proof (state)\ngoal (2 subgoals):\n 1. d = e \\<Longrightarrow>\n    (u, t)\n    \\<in> (timpl_closure'_step\n            {a. case a of\n                (a, b) \\<Rightarrow>\n                  (a, b) \\<in> c\\<^sup>+ \\<and> a \\<noteq> b})\\<^sup>*\n 2. d \\<noteq> e \\<Longrightarrow>\n    (u, t)\n    \\<in> (timpl_closure'_step\n            {a. case a of\n                (a, b) \\<Rightarrow>\n                  (a, b) \\<in> c\\<^sup>+ \\<and> a \\<noteq> b})\\<^sup>*", "case True"], ["proof (state)\nthis:\n  d = e\n\ngoal (2 subgoals):\n 1. d = e \\<Longrightarrow>\n    (u, t)\n    \\<in> (timpl_closure'_step\n            {a. case a of\n                (a, b) \\<Rightarrow>\n                  (a, b) \\<in> c\\<^sup>+ \\<and> a \\<noteq> b})\\<^sup>*\n 2. d \\<noteq> e \\<Longrightarrow>\n    (u, t)\n    \\<in> (timpl_closure'_step\n            {a. case a of\n                (a, b) \\<Rightarrow>\n                  (a, b) \\<in> c\\<^sup>+ \\<and> a \\<noteq> b})\\<^sup>*", "thus ?thesis"], ["proof (prove)\nusing this:\n  d = e\n\ngoal (1 subgoal):\n 1. (u, t)\n    \\<in> (timpl_closure'_step\n            {a. case a of\n                (a, b) \\<Rightarrow>\n                  (a, b) \\<in> c\\<^sup>+ \\<and> a \\<noteq> b})\\<^sup>*", "using step.prems step.IH[of t]"], ["proof (prove)\nusing this:\n  d = e\n  term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs e])) u t\n  term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs d])) u\n   t \\<Longrightarrow>\n  (u, t)\n  \\<in> (timpl_closure'_step\n          {a. case a of\n              (a, b) \\<Rightarrow>\n                (a, b) \\<in> c\\<^sup>+ \\<and> a \\<noteq> b})\\<^sup>*\n\ngoal (1 subgoal):\n 1. (u, t)\n    \\<in> (timpl_closure'_step\n            {a. case a of\n                (a, b) \\<Rightarrow>\n                  (a, b) \\<in> c\\<^sup>+ \\<and> a \\<noteq> b})\\<^sup>*", "by blast"], ["proof (state)\nthis:\n  (u, t)\n  \\<in> (timpl_closure'_step\n          {a. case a of\n              (a, b) \\<Rightarrow>\n                (a, b) \\<in> c\\<^sup>+ \\<and> a \\<noteq> b})\\<^sup>*\n\ngoal (1 subgoal):\n 1. d \\<noteq> e \\<Longrightarrow>\n    (u, t)\n    \\<in> (timpl_closure'_step\n            {a. case a of\n                (a, b) \\<Rightarrow>\n                  (a, b) \\<in> c\\<^sup>+ \\<and> a \\<noteq> b})\\<^sup>*", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. d \\<noteq> e \\<Longrightarrow>\n    (u, t)\n    \\<in> (timpl_closure'_step\n            {a. case a of\n                (a, b) \\<Rightarrow>\n                  (a, b) \\<in> c\\<^sup>+ \\<and> a \\<noteq> b})\\<^sup>*", "case False"], ["proof (state)\nthis:\n  d \\<noteq> e\n\ngoal (1 subgoal):\n 1. d \\<noteq> e \\<Longrightarrow>\n    (u, t)\n    \\<in> (timpl_closure'_step\n            {a. case a of\n                (a, b) \\<Rightarrow>\n                  (a, b) \\<in> c\\<^sup>+ \\<and> a \\<noteq> b})\\<^sup>*", "hence \"(u,s) \\<in> (timpl_closure'_step ?cl)\\<^sup>*\"\n              \"(s,t) \\<in> timpl_closure'_step ?cl\""], ["proof (prove)\nusing this:\n  d \\<noteq> e\n\ngoal (1 subgoal):\n 1. (u, s)\n    \\<in> (timpl_closure'_step\n            {(a, b).\n             (a, b) \\<in> c\\<^sup>+ \\<and> a \\<noteq> b})\\<^sup>* &&&\n    (s, t)\n    \\<in> timpl_closure'_step\n           {(a, b). (a, b) \\<in> c\\<^sup>+ \\<and> a \\<noteq> b}", "using step.hyps(2) s(2) step.IH[OF s(1)]"], ["proof (prove)\nusing this:\n  d \\<noteq> e\n  (d, e) \\<in> c\n  term_variants_pred ((\\<lambda>_. [])(Abs d := [Abs e])) s t\n  (u, s)\n  \\<in> (timpl_closure'_step\n          {a. case a of\n              (a, b) \\<Rightarrow>\n                (a, b) \\<in> c\\<^sup>+ \\<and> a \\<noteq> b})\\<^sup>*\n\ngoal (1 subgoal):\n 1. (u, s)\n    \\<in> (timpl_closure'_step\n            {(a, b).\n             (a, b) \\<in> c\\<^sup>+ \\<and> a \\<noteq> b})\\<^sup>* &&&\n    (s, t)\n    \\<in> timpl_closure'_step\n           {(a, b). (a, b) \\<in> c\\<^sup>+ \\<and> a \\<noteq> b}", "by (auto intro: timpl_closure'_step.intros)"], ["proof (state)\nthis:\n  (u, s)\n  \\<in> (timpl_closure'_step\n          {(a, b). (a, b) \\<in> c\\<^sup>+ \\<and> a \\<noteq> b})\\<^sup>*\n  (s, t)\n  \\<in> timpl_closure'_step\n         {(a, b). (a, b) \\<in> c\\<^sup>+ \\<and> a \\<noteq> b}\n\ngoal (1 subgoal):\n 1. d \\<noteq> e \\<Longrightarrow>\n    (u, t)\n    \\<in> (timpl_closure'_step\n            {a. case a of\n                (a, b) \\<Rightarrow>\n                  (a, b) \\<in> c\\<^sup>+ \\<and> a \\<noteq> b})\\<^sup>*", "thus ?thesis"], ["proof (prove)\nusing this:\n  (u, s)\n  \\<in> (timpl_closure'_step\n          {(a, b). (a, b) \\<in> c\\<^sup>+ \\<and> a \\<noteq> b})\\<^sup>*\n  (s, t)\n  \\<in> timpl_closure'_step\n         {(a, b). (a, b) \\<in> c\\<^sup>+ \\<and> a \\<noteq> b}\n\ngoal (1 subgoal):\n 1. (u, t)\n    \\<in> (timpl_closure'_step\n            {a. case a of\n                (a, b) \\<Rightarrow>\n                  (a, b) \\<in> c\\<^sup>+ \\<and> a \\<noteq> b})\\<^sup>*", "by simp"], ["proof (state)\nthis:\n  (u, t)\n  \\<in> (timpl_closure'_step\n          {a. case a of\n              (a, b) \\<Rightarrow>\n                (a, b) \\<in> c\\<^sup>+ \\<and> a \\<noteq> b})\\<^sup>*\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (u, t)\n  \\<in> (timpl_closure'_step\n          {a. case a of\n              (a, b) \\<Rightarrow>\n                (a, b) \\<in> c\\<^sup>+ \\<and> a \\<noteq> b})\\<^sup>*\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (u, t)\n  \\<in> (timpl_closure'_step\n          {(a, b). (a, b) \\<in> c\\<^sup>+ \\<and> a \\<noteq> b})\\<^sup>*\n\ngoal (2 subgoals):\n 1. (s, s)\n    \\<in> (timpl_closure'_step\n            {a. case a of\n                (a, b) \\<Rightarrow>\n                  (a, b) \\<in> c\\<^sup>+ \\<and> a \\<noteq> b})\\<^sup>*\n 2. \\<And>y z.\n       \\<lbrakk>(s, y) \\<in> (timpl_closure'_step c)\\<^sup>*;\n        (y, z) \\<in> timpl_closure'_step c;\n        (s, y)\n        \\<in> (timpl_closure'_step\n                {a. case a of\n                    (a, b) \\<Rightarrow>\n                      (a, b) \\<in> c\\<^sup>+ \\<and>\n                      a \\<noteq> b})\\<^sup>*\\<rbrakk>\n       \\<Longrightarrow> (s, z)\n                         \\<in> (timpl_closure'_step\n                                 {a. case a of\n                                     (a, b) \\<Rightarrow>\n (a, b) \\<in> c\\<^sup>+ \\<and> a \\<noteq> b})\\<^sup>*", "thus ?case"], ["proof (prove)\nusing this:\n  (u, t)\n  \\<in> (timpl_closure'_step\n          {(a, b). (a, b) \\<in> c\\<^sup>+ \\<and> a \\<noteq> b})\\<^sup>*\n\ngoal (1 subgoal):\n 1. (s, t)\n    \\<in> (timpl_closure'_step\n            {a. case a of\n                (a, b) \\<Rightarrow>\n                  (a, b) \\<in> c\\<^sup>+ \\<and> a \\<noteq> b})\\<^sup>*", "using step.IH"], ["proof (prove)\nusing this:\n  (u, t)\n  \\<in> (timpl_closure'_step\n          {(a, b). (a, b) \\<in> c\\<^sup>+ \\<and> a \\<noteq> b})\\<^sup>*\n  (s, u)\n  \\<in> (timpl_closure'_step\n          {a. case a of\n              (a, b) \\<Rightarrow>\n                (a, b) \\<in> c\\<^sup>+ \\<and> a \\<noteq> b})\\<^sup>*\n\ngoal (1 subgoal):\n 1. (s, t)\n    \\<in> (timpl_closure'_step\n            {a. case a of\n                (a, b) \\<Rightarrow>\n                  (a, b) \\<in> c\\<^sup>+ \\<and> a \\<noteq> b})\\<^sup>*", "by simp"], ["proof (state)\nthis:\n  (s, t)\n  \\<in> (timpl_closure'_step\n          {a. case a of\n              (a, b) \\<Rightarrow>\n                (a, b) \\<in> c\\<^sup>+ \\<and> a \\<noteq> b})\\<^sup>*\n\ngoal (1 subgoal):\n 1. (s, s)\n    \\<in> (timpl_closure'_step\n            {a. case a of\n                (a, b) \\<Rightarrow>\n                  (a, b) \\<in> c\\<^sup>+ \\<and> a \\<noteq> b})\\<^sup>*", "qed simp"], ["proof (state)\nthis:\n  (s, t) \\<in> (timpl_closure'_step c)\\<^sup>* \\<Longrightarrow>\n  (s, t)\n  \\<in> (timpl_closure'_step\n          {(a, b). (a, b) \\<in> c\\<^sup>+ \\<and> a \\<noteq> b})\\<^sup>*\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma timpl_closure'_timpls_trancl_supset:\n  \"timpl_closure' c \\<subseteq> timpl_closure' (c\\<^sup>+)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. timpl_closure' c \\<subseteq> timpl_closure' (c\\<^sup>+)", "using timpl_closure'_timpls_trancl_supset'[of c]\n      timpl_closure'_mono[of \"{(a,b) \\<in> c\\<^sup>+. a \\<noteq> b}\" \"c\\<^sup>+\"]"], ["proof (prove)\nusing this:\n  timpl_closure' c\n  \\<subseteq> timpl_closure'\n               {(a, b). (a, b) \\<in> c\\<^sup>+ \\<and> a \\<noteq> b}\n  {(a, b). (a, b) \\<in> c\\<^sup>+ \\<and> a \\<noteq> b}\n  \\<subseteq> c\\<^sup>+ \\<Longrightarrow>\n  timpl_closure' {(a, b). (a, b) \\<in> c\\<^sup>+ \\<and> a \\<noteq> b}\n  \\<subseteq> timpl_closure' (c\\<^sup>+)\n\ngoal (1 subgoal):\n 1. timpl_closure' c \\<subseteq> timpl_closure' (c\\<^sup>+)", "by fast"], ["", "lemma timpl_closure'_timpls_trancl_eq:\n  \"timpl_closure' (c\\<^sup>+) = timpl_closure' c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. timpl_closure' (c\\<^sup>+) = timpl_closure' c", "using timpl_closure'_timpls_trancl_subset timpl_closure'_timpls_trancl_supset"], ["proof (prove)\nusing this:\n  timpl_closure' (?c\\<^sup>+) \\<subseteq> timpl_closure' ?c\n  timpl_closure' ?c \\<subseteq> timpl_closure' (?c\\<^sup>+)\n\ngoal (1 subgoal):\n 1. timpl_closure' (c\\<^sup>+) = timpl_closure' c", "by blast"], ["", "lemma timpl_closure'_timpls_trancl_eq':\n  \"timpl_closure' {(a,b) \\<in> c\\<^sup>+. a \\<noteq> b} = timpl_closure' c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. timpl_closure' {(a, b). (a, b) \\<in> c\\<^sup>+ \\<and> a \\<noteq> b} =\n    timpl_closure' c", "using timpl_closure'_timpls_trancl_subset' timpl_closure'_timpls_trancl_supset'"], ["proof (prove)\nusing this:\n  timpl_closure' {(a, b). (a, b) \\<in> ?c\\<^sup>+ \\<and> a \\<noteq> b}\n  \\<subseteq> timpl_closure' ?c\n  timpl_closure' ?c\n  \\<subseteq> timpl_closure'\n               {(a, b). (a, b) \\<in> ?c\\<^sup>+ \\<and> a \\<noteq> b}\n\ngoal (1 subgoal):\n 1. timpl_closure' {(a, b). (a, b) \\<in> c\\<^sup>+ \\<and> a \\<noteq> b} =\n    timpl_closure' c", "by blast"], ["", "lemma timpl_closure'_timpls_rtrancl_subset:\n  \"timpl_closure' (c\\<^sup>*) \\<subseteq> timpl_closure' c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. timpl_closure' (c\\<^sup>*) \\<subseteq> timpl_closure' c", "unfolding timpl_closure'_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (timpl_closure'_step (c\\<^sup>*))\\<^sup>*\n    \\<subseteq> (timpl_closure'_step c)\\<^sup>*", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       (x, y)\n       \\<in> (timpl_closure'_step (c\\<^sup>*))\\<^sup>* \\<Longrightarrow>\n       (x, y) \\<in> (timpl_closure'_step c)\\<^sup>*", "fix s t::\"(('a,'b,'c) prot_fun,'d) term\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       (x, y)\n       \\<in> (timpl_closure'_step (c\\<^sup>*))\\<^sup>* \\<Longrightarrow>\n       (x, y) \\<in> (timpl_closure'_step c)\\<^sup>*", "show \"(s,t) \\<in> (timpl_closure'_step (c\\<^sup>*))\\<^sup>* \\<Longrightarrow> (s,t) \\<in> (timpl_closure'_step c)\\<^sup>*\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (s, t) \\<in> (timpl_closure'_step (c\\<^sup>*))\\<^sup>* \\<Longrightarrow>\n    (s, t) \\<in> (timpl_closure'_step c)\\<^sup>*", "proof (induction rule: rtrancl_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. (s, s) \\<in> (timpl_closure'_step c)\\<^sup>*\n 2. \\<And>y z.\n       \\<lbrakk>(s, y) \\<in> (timpl_closure'_step (c\\<^sup>*))\\<^sup>*;\n        (y, z) \\<in> timpl_closure'_step (c\\<^sup>*);\n        (s, y) \\<in> (timpl_closure'_step c)\\<^sup>*\\<rbrakk>\n       \\<Longrightarrow> (s, z) \\<in> (timpl_closure'_step c)\\<^sup>*", "case (step u t)"], ["proof (state)\nthis:\n  (s, u) \\<in> (timpl_closure'_step (c\\<^sup>*))\\<^sup>*\n  (u, t) \\<in> timpl_closure'_step (c\\<^sup>*)\n  (s, u) \\<in> (timpl_closure'_step c)\\<^sup>*\n\ngoal (2 subgoals):\n 1. (s, s) \\<in> (timpl_closure'_step c)\\<^sup>*\n 2. \\<And>y z.\n       \\<lbrakk>(s, y) \\<in> (timpl_closure'_step (c\\<^sup>*))\\<^sup>*;\n        (y, z) \\<in> timpl_closure'_step (c\\<^sup>*);\n        (s, y) \\<in> (timpl_closure'_step c)\\<^sup>*\\<rbrakk>\n       \\<Longrightarrow> (s, z) \\<in> (timpl_closure'_step c)\\<^sup>*", "obtain a b where ab:\n        \"(a,b) \\<in> c\\<^sup>*\" \"term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) u t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>a b.\n        \\<lbrakk>(a, b) \\<in> c\\<^sup>*;\n         term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) u\n          t\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using step.hyps(2) timpl_closure'_step_inv"], ["proof (prove)\nusing this:\n  (u, t) \\<in> timpl_closure'_step (c\\<^sup>*)\n  \\<lbrakk>(?t, ?s) \\<in> timpl_closure'_step ?TI;\n   \\<And>a b.\n      \\<lbrakk>(a, b) \\<in> ?TI;\n       term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) ?t\n        ?s\\<rbrakk>\n      \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>a b.\n        \\<lbrakk>(a, b) \\<in> c\\<^sup>*;\n         term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) u\n          t\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  (a, b) \\<in> c\\<^sup>*\n  term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) u t\n\ngoal (2 subgoals):\n 1. (s, s) \\<in> (timpl_closure'_step c)\\<^sup>*\n 2. \\<And>y z.\n       \\<lbrakk>(s, y) \\<in> (timpl_closure'_step (c\\<^sup>*))\\<^sup>*;\n        (y, z) \\<in> timpl_closure'_step (c\\<^sup>*);\n        (s, y) \\<in> (timpl_closure'_step c)\\<^sup>*\\<rbrakk>\n       \\<Longrightarrow> (s, z) \\<in> (timpl_closure'_step c)\\<^sup>*", "hence \"(u,t) \\<in> (timpl_closure'_step c)\\<^sup>*\""], ["proof (prove)\nusing this:\n  (a, b) \\<in> c\\<^sup>*\n  term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) u t\n\ngoal (1 subgoal):\n 1. (u, t) \\<in> (timpl_closure'_step c)\\<^sup>*", "proof (induction arbitrary: t rule: rtrancl_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>t.\n       term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs a])) u\n        t \\<Longrightarrow>\n       (u, t) \\<in> (timpl_closure'_step c)\\<^sup>*\n 2. \\<And>y z t.\n       \\<lbrakk>(a, y) \\<in> c\\<^sup>*; (y, z) \\<in> c;\n        \\<And>t.\n           term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs y])) u\n            t \\<Longrightarrow>\n           (u, t) \\<in> (timpl_closure'_step c)\\<^sup>*;\n        term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs z])) u t\\<rbrakk>\n       \\<Longrightarrow> (u, t) \\<in> (timpl_closure'_step c)\\<^sup>*", "case base"], ["proof (state)\nthis:\n  term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs a])) u t\n\ngoal (2 subgoals):\n 1. \\<And>t.\n       term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs a])) u\n        t \\<Longrightarrow>\n       (u, t) \\<in> (timpl_closure'_step c)\\<^sup>*\n 2. \\<And>y z t.\n       \\<lbrakk>(a, y) \\<in> c\\<^sup>*; (y, z) \\<in> c;\n        \\<And>t.\n           term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs y])) u\n            t \\<Longrightarrow>\n           (u, t) \\<in> (timpl_closure'_step c)\\<^sup>*;\n        term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs z])) u t\\<rbrakk>\n       \\<Longrightarrow> (u, t) \\<in> (timpl_closure'_step c)\\<^sup>*", "hence \"u = t\""], ["proof (prove)\nusing this:\n  term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs a])) u t\n\ngoal (1 subgoal):\n 1. u = t", "using term_variants_pred_refl_inv"], ["proof (prove)\nusing this:\n  term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs a])) u t\n  \\<lbrakk>term_variants_pred ?P ?s ?t;\n   \\<forall>f. \\<forall>g\\<in>set (?P f). f = g\\<rbrakk>\n  \\<Longrightarrow> ?s = ?t\n\ngoal (1 subgoal):\n 1. u = t", "by fastforce"], ["proof (state)\nthis:\n  u = t\n\ngoal (2 subgoals):\n 1. \\<And>t.\n       term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs a])) u\n        t \\<Longrightarrow>\n       (u, t) \\<in> (timpl_closure'_step c)\\<^sup>*\n 2. \\<And>y z t.\n       \\<lbrakk>(a, y) \\<in> c\\<^sup>*; (y, z) \\<in> c;\n        \\<And>t.\n           term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs y])) u\n            t \\<Longrightarrow>\n           (u, t) \\<in> (timpl_closure'_step c)\\<^sup>*;\n        term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs z])) u t\\<rbrakk>\n       \\<Longrightarrow> (u, t) \\<in> (timpl_closure'_step c)\\<^sup>*", "thus ?case"], ["proof (prove)\nusing this:\n  u = t\n\ngoal (1 subgoal):\n 1. (u, t) \\<in> (timpl_closure'_step c)\\<^sup>*", "by simp"], ["proof (state)\nthis:\n  (u, t) \\<in> (timpl_closure'_step c)\\<^sup>*\n\ngoal (1 subgoal):\n 1. \\<And>y z t.\n       \\<lbrakk>(a, y) \\<in> c\\<^sup>*; (y, z) \\<in> c;\n        \\<And>t.\n           term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs y])) u\n            t \\<Longrightarrow>\n           (u, t) \\<in> (timpl_closure'_step c)\\<^sup>*;\n        term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs z])) u t\\<rbrakk>\n       \\<Longrightarrow> (u, t) \\<in> (timpl_closure'_step c)\\<^sup>*", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y z t.\n       \\<lbrakk>(a, y) \\<in> c\\<^sup>*; (y, z) \\<in> c;\n        \\<And>t.\n           term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs y])) u\n            t \\<Longrightarrow>\n           (u, t) \\<in> (timpl_closure'_step c)\\<^sup>*;\n        term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs z])) u t\\<rbrakk>\n       \\<Longrightarrow> (u, t) \\<in> (timpl_closure'_step c)\\<^sup>*", "case (step d e)"], ["proof (state)\nthis:\n  (a, d) \\<in> c\\<^sup>*\n  (d, e) \\<in> c\n  term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs d])) u\n   ?t \\<Longrightarrow>\n  (u, ?t) \\<in> (timpl_closure'_step c)\\<^sup>*\n  term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs e])) u t\n\ngoal (1 subgoal):\n 1. \\<And>y z t.\n       \\<lbrakk>(a, y) \\<in> c\\<^sup>*; (y, z) \\<in> c;\n        \\<And>t.\n           term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs y])) u\n            t \\<Longrightarrow>\n           (u, t) \\<in> (timpl_closure'_step c)\\<^sup>*;\n        term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs z])) u t\\<rbrakk>\n       \\<Longrightarrow> (u, t) \\<in> (timpl_closure'_step c)\\<^sup>*", "obtain s where s:\n          \"term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs d])) u s\"\n          \"term_variants_pred ((\\<lambda>_. [])(Abs d := [Abs e])) s t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>s.\n        \\<lbrakk>term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs d])) u\n                  s;\n         term_variants_pred ((\\<lambda>_. [])(Abs d := [Abs e])) s\n          t\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using term_variants_pred_dense'[OF step.prems, of \"Abs d\"]"], ["proof (prove)\nusing this:\n  \\<exists>s.\n     term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs d])) u s \\<and>\n     term_variants_pred ((\\<lambda>_. [])(Abs d := [Abs e])) s t\n\ngoal (1 subgoal):\n 1. (\\<And>s.\n        \\<lbrakk>term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs d])) u\n                  s;\n         term_variants_pred ((\\<lambda>_. [])(Abs d := [Abs e])) s\n          t\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs d])) u s\n  term_variants_pred ((\\<lambda>_. [])(Abs d := [Abs e])) s t\n\ngoal (1 subgoal):\n 1. \\<And>y z t.\n       \\<lbrakk>(a, y) \\<in> c\\<^sup>*; (y, z) \\<in> c;\n        \\<And>t.\n           term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs y])) u\n            t \\<Longrightarrow>\n           (u, t) \\<in> (timpl_closure'_step c)\\<^sup>*;\n        term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs z])) u t\\<rbrakk>\n       \\<Longrightarrow> (u, t) \\<in> (timpl_closure'_step c)\\<^sup>*", "have \"(u,s) \\<in> (timpl_closure'_step c)\\<^sup>*\"\n           \"(s,t) \\<in> timpl_closure'_step c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (u, s) \\<in> (timpl_closure'_step c)\\<^sup>* &&&\n    (s, t) \\<in> timpl_closure'_step c", "using step.hyps(2) s(2) step.IH[OF s(1)]"], ["proof (prove)\nusing this:\n  (d, e) \\<in> c\n  term_variants_pred ((\\<lambda>_. [])(Abs d := [Abs e])) s t\n  (u, s) \\<in> (timpl_closure'_step c)\\<^sup>*\n\ngoal (1 subgoal):\n 1. (u, s) \\<in> (timpl_closure'_step c)\\<^sup>* &&&\n    (s, t) \\<in> timpl_closure'_step c", "by (auto intro: timpl_closure'_step.intros)"], ["proof (state)\nthis:\n  (u, s) \\<in> (timpl_closure'_step c)\\<^sup>*\n  (s, t) \\<in> timpl_closure'_step c\n\ngoal (1 subgoal):\n 1. \\<And>y z t.\n       \\<lbrakk>(a, y) \\<in> c\\<^sup>*; (y, z) \\<in> c;\n        \\<And>t.\n           term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs y])) u\n            t \\<Longrightarrow>\n           (u, t) \\<in> (timpl_closure'_step c)\\<^sup>*;\n        term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs z])) u t\\<rbrakk>\n       \\<Longrightarrow> (u, t) \\<in> (timpl_closure'_step c)\\<^sup>*", "thus ?case"], ["proof (prove)\nusing this:\n  (u, s) \\<in> (timpl_closure'_step c)\\<^sup>*\n  (s, t) \\<in> timpl_closure'_step c\n\ngoal (1 subgoal):\n 1. (u, t) \\<in> (timpl_closure'_step c)\\<^sup>*", "by simp"], ["proof (state)\nthis:\n  (u, t) \\<in> (timpl_closure'_step c)\\<^sup>*\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (u, t) \\<in> (timpl_closure'_step c)\\<^sup>*\n\ngoal (2 subgoals):\n 1. (s, s) \\<in> (timpl_closure'_step c)\\<^sup>*\n 2. \\<And>y z.\n       \\<lbrakk>(s, y) \\<in> (timpl_closure'_step (c\\<^sup>*))\\<^sup>*;\n        (y, z) \\<in> timpl_closure'_step (c\\<^sup>*);\n        (s, y) \\<in> (timpl_closure'_step c)\\<^sup>*\\<rbrakk>\n       \\<Longrightarrow> (s, z) \\<in> (timpl_closure'_step c)\\<^sup>*", "thus ?case"], ["proof (prove)\nusing this:\n  (u, t) \\<in> (timpl_closure'_step c)\\<^sup>*\n\ngoal (1 subgoal):\n 1. (s, t) \\<in> (timpl_closure'_step c)\\<^sup>*", "using step.IH"], ["proof (prove)\nusing this:\n  (u, t) \\<in> (timpl_closure'_step c)\\<^sup>*\n  (s, u) \\<in> (timpl_closure'_step c)\\<^sup>*\n\ngoal (1 subgoal):\n 1. (s, t) \\<in> (timpl_closure'_step c)\\<^sup>*", "by simp"], ["proof (state)\nthis:\n  (s, t) \\<in> (timpl_closure'_step c)\\<^sup>*\n\ngoal (1 subgoal):\n 1. (s, s) \\<in> (timpl_closure'_step c)\\<^sup>*", "qed simp"], ["proof (state)\nthis:\n  (s, t) \\<in> (timpl_closure'_step (c\\<^sup>*))\\<^sup>* \\<Longrightarrow>\n  (s, t) \\<in> (timpl_closure'_step c)\\<^sup>*\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma timpl_closure'_timpls_rtrancl_supset:\n  \"timpl_closure' c \\<subseteq> timpl_closure' (c\\<^sup>*)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. timpl_closure' c \\<subseteq> timpl_closure' (c\\<^sup>*)", "unfolding timpl_closure'_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (timpl_closure'_step c)\\<^sup>*\n    \\<subseteq> (timpl_closure'_step (c\\<^sup>*))\\<^sup>*", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       (x, y) \\<in> (timpl_closure'_step c)\\<^sup>* \\<Longrightarrow>\n       (x, y) \\<in> (timpl_closure'_step (c\\<^sup>*))\\<^sup>*", "fix s t::\"(('e,'f,'c) prot_fun,'g) term\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       (x, y) \\<in> (timpl_closure'_step c)\\<^sup>* \\<Longrightarrow>\n       (x, y) \\<in> (timpl_closure'_step (c\\<^sup>*))\\<^sup>*", "show \"(s,t) \\<in> (timpl_closure'_step c)\\<^sup>* \\<Longrightarrow> (s,t) \\<in> (timpl_closure'_step (c\\<^sup>*))\\<^sup>*\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (s, t) \\<in> (timpl_closure'_step c)\\<^sup>* \\<Longrightarrow>\n    (s, t) \\<in> (timpl_closure'_step (c\\<^sup>*))\\<^sup>*", "proof (induction rule: rtrancl_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. (s, s) \\<in> (timpl_closure'_step (c\\<^sup>*))\\<^sup>*\n 2. \\<And>y z.\n       \\<lbrakk>(s, y) \\<in> (timpl_closure'_step c)\\<^sup>*;\n        (y, z) \\<in> timpl_closure'_step c;\n        (s, y) \\<in> (timpl_closure'_step (c\\<^sup>*))\\<^sup>*\\<rbrakk>\n       \\<Longrightarrow> (s, z)\n                         \\<in> (timpl_closure'_step (c\\<^sup>*))\\<^sup>*", "case (step u t)"], ["proof (state)\nthis:\n  (s, u) \\<in> (timpl_closure'_step c)\\<^sup>*\n  (u, t) \\<in> timpl_closure'_step c\n  (s, u) \\<in> (timpl_closure'_step (c\\<^sup>*))\\<^sup>*\n\ngoal (2 subgoals):\n 1. (s, s) \\<in> (timpl_closure'_step (c\\<^sup>*))\\<^sup>*\n 2. \\<And>y z.\n       \\<lbrakk>(s, y) \\<in> (timpl_closure'_step c)\\<^sup>*;\n        (y, z) \\<in> timpl_closure'_step c;\n        (s, y) \\<in> (timpl_closure'_step (c\\<^sup>*))\\<^sup>*\\<rbrakk>\n       \\<Longrightarrow> (s, z)\n                         \\<in> (timpl_closure'_step (c\\<^sup>*))\\<^sup>*", "obtain a b where ab:\n        \"(a,b) \\<in> c\" \"term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) u t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>a b.\n        \\<lbrakk>(a, b) \\<in> c;\n         term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) u\n          t\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using step.hyps(2) timpl_closure'_step_inv"], ["proof (prove)\nusing this:\n  (u, t) \\<in> timpl_closure'_step c\n  \\<lbrakk>(?t, ?s) \\<in> timpl_closure'_step ?TI;\n   \\<And>a b.\n      \\<lbrakk>(a, b) \\<in> ?TI;\n       term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) ?t\n        ?s\\<rbrakk>\n      \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>a b.\n        \\<lbrakk>(a, b) \\<in> c;\n         term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) u\n          t\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  (a, b) \\<in> c\n  term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) u t\n\ngoal (2 subgoals):\n 1. (s, s) \\<in> (timpl_closure'_step (c\\<^sup>*))\\<^sup>*\n 2. \\<And>y z.\n       \\<lbrakk>(s, y) \\<in> (timpl_closure'_step c)\\<^sup>*;\n        (y, z) \\<in> timpl_closure'_step c;\n        (s, y) \\<in> (timpl_closure'_step (c\\<^sup>*))\\<^sup>*\\<rbrakk>\n       \\<Longrightarrow> (s, z)\n                         \\<in> (timpl_closure'_step (c\\<^sup>*))\\<^sup>*", "hence \"(a,b) \\<in> c\\<^sup>*\""], ["proof (prove)\nusing this:\n  (a, b) \\<in> c\n  term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) u t\n\ngoal (1 subgoal):\n 1. (a, b) \\<in> c\\<^sup>*", "by simp"], ["proof (state)\nthis:\n  (a, b) \\<in> c\\<^sup>*\n\ngoal (2 subgoals):\n 1. (s, s) \\<in> (timpl_closure'_step (c\\<^sup>*))\\<^sup>*\n 2. \\<And>y z.\n       \\<lbrakk>(s, y) \\<in> (timpl_closure'_step c)\\<^sup>*;\n        (y, z) \\<in> timpl_closure'_step c;\n        (s, y) \\<in> (timpl_closure'_step (c\\<^sup>*))\\<^sup>*\\<rbrakk>\n       \\<Longrightarrow> (s, z)\n                         \\<in> (timpl_closure'_step (c\\<^sup>*))\\<^sup>*", "hence \"(u,t) \\<in> (timpl_closure'_step (c\\<^sup>*))\\<^sup>*\""], ["proof (prove)\nusing this:\n  (a, b) \\<in> c\\<^sup>*\n\ngoal (1 subgoal):\n 1. (u, t) \\<in> (timpl_closure'_step (c\\<^sup>*))\\<^sup>*", "using ab(2)"], ["proof (prove)\nusing this:\n  (a, b) \\<in> c\\<^sup>*\n  term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) u t\n\ngoal (1 subgoal):\n 1. (u, t) \\<in> (timpl_closure'_step (c\\<^sup>*))\\<^sup>*", "proof (induction arbitrary: t rule: rtrancl_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>t.\n       term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs a])) u\n        t \\<Longrightarrow>\n       (u, t) \\<in> (timpl_closure'_step (c\\<^sup>*))\\<^sup>*\n 2. \\<And>y z t.\n       \\<lbrakk>(a, y) \\<in> c\\<^sup>*; (y, z) \\<in> c;\n        \\<And>t.\n           term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs y])) u\n            t \\<Longrightarrow>\n           (u, t) \\<in> (timpl_closure'_step (c\\<^sup>*))\\<^sup>*;\n        term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs z])) u t\\<rbrakk>\n       \\<Longrightarrow> (u, t)\n                         \\<in> (timpl_closure'_step (c\\<^sup>*))\\<^sup>*", "case (base t)"], ["proof (state)\nthis:\n  term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs a])) u t\n\ngoal (2 subgoals):\n 1. \\<And>t.\n       term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs a])) u\n        t \\<Longrightarrow>\n       (u, t) \\<in> (timpl_closure'_step (c\\<^sup>*))\\<^sup>*\n 2. \\<And>y z t.\n       \\<lbrakk>(a, y) \\<in> c\\<^sup>*; (y, z) \\<in> c;\n        \\<And>t.\n           term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs y])) u\n            t \\<Longrightarrow>\n           (u, t) \\<in> (timpl_closure'_step (c\\<^sup>*))\\<^sup>*;\n        term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs z])) u t\\<rbrakk>\n       \\<Longrightarrow> (u, t)\n                         \\<in> (timpl_closure'_step (c\\<^sup>*))\\<^sup>*", "thus ?case"], ["proof (prove)\nusing this:\n  term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs a])) u t\n\ngoal (1 subgoal):\n 1. (u, t) \\<in> (timpl_closure'_step (c\\<^sup>*))\\<^sup>*", "using term_variants_pred_refl_inv[of _ u t]"], ["proof (prove)\nusing this:\n  term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs a])) u t\n  \\<lbrakk>term_variants_pred ?P u t;\n   \\<forall>f. \\<forall>g\\<in>set (?P f). f = g\\<rbrakk>\n  \\<Longrightarrow> u = t\n\ngoal (1 subgoal):\n 1. (u, t) \\<in> (timpl_closure'_step (c\\<^sup>*))\\<^sup>*", "by fastforce"], ["proof (state)\nthis:\n  (u, t) \\<in> (timpl_closure'_step (c\\<^sup>*))\\<^sup>*\n\ngoal (1 subgoal):\n 1. \\<And>y z t.\n       \\<lbrakk>(a, y) \\<in> c\\<^sup>*; (y, z) \\<in> c;\n        \\<And>t.\n           term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs y])) u\n            t \\<Longrightarrow>\n           (u, t) \\<in> (timpl_closure'_step (c\\<^sup>*))\\<^sup>*;\n        term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs z])) u t\\<rbrakk>\n       \\<Longrightarrow> (u, t)\n                         \\<in> (timpl_closure'_step (c\\<^sup>*))\\<^sup>*", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y z t.\n       \\<lbrakk>(a, y) \\<in> c\\<^sup>*; (y, z) \\<in> c;\n        \\<And>t.\n           term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs y])) u\n            t \\<Longrightarrow>\n           (u, t) \\<in> (timpl_closure'_step (c\\<^sup>*))\\<^sup>*;\n        term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs z])) u t\\<rbrakk>\n       \\<Longrightarrow> (u, t)\n                         \\<in> (timpl_closure'_step (c\\<^sup>*))\\<^sup>*", "case (step d e)"], ["proof (state)\nthis:\n  (a, d) \\<in> c\\<^sup>*\n  (d, e) \\<in> c\n  term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs d])) u\n   ?t \\<Longrightarrow>\n  (u, ?t) \\<in> (timpl_closure'_step (c\\<^sup>*))\\<^sup>*\n  term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs e])) u t\n\ngoal (1 subgoal):\n 1. \\<And>y z t.\n       \\<lbrakk>(a, y) \\<in> c\\<^sup>*; (y, z) \\<in> c;\n        \\<And>t.\n           term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs y])) u\n            t \\<Longrightarrow>\n           (u, t) \\<in> (timpl_closure'_step (c\\<^sup>*))\\<^sup>*;\n        term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs z])) u t\\<rbrakk>\n       \\<Longrightarrow> (u, t)\n                         \\<in> (timpl_closure'_step (c\\<^sup>*))\\<^sup>*", "obtain s where s:\n          \"term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs d])) u s\"\n          \"term_variants_pred ((\\<lambda>_. [])(Abs d := [Abs e])) s t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>s.\n        \\<lbrakk>term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs d])) u\n                  s;\n         term_variants_pred ((\\<lambda>_. [])(Abs d := [Abs e])) s\n          t\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using term_variants_pred_dense'[OF step.prems, of \"Abs d\"]"], ["proof (prove)\nusing this:\n  \\<exists>s.\n     term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs d])) u s \\<and>\n     term_variants_pred ((\\<lambda>_. [])(Abs d := [Abs e])) s t\n\ngoal (1 subgoal):\n 1. (\\<And>s.\n        \\<lbrakk>term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs d])) u\n                  s;\n         term_variants_pred ((\\<lambda>_. [])(Abs d := [Abs e])) s\n          t\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs d])) u s\n  term_variants_pred ((\\<lambda>_. [])(Abs d := [Abs e])) s t\n\ngoal (1 subgoal):\n 1. \\<And>y z t.\n       \\<lbrakk>(a, y) \\<in> c\\<^sup>*; (y, z) \\<in> c;\n        \\<And>t.\n           term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs y])) u\n            t \\<Longrightarrow>\n           (u, t) \\<in> (timpl_closure'_step (c\\<^sup>*))\\<^sup>*;\n        term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs z])) u t\\<rbrakk>\n       \\<Longrightarrow> (u, t)\n                         \\<in> (timpl_closure'_step (c\\<^sup>*))\\<^sup>*", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. (u, t) \\<in> (timpl_closure'_step (c\\<^sup>*))\\<^sup>*", "proof (cases \"d = e\")"], ["proof (state)\ngoal (2 subgoals):\n 1. d = e \\<Longrightarrow>\n    (u, t) \\<in> (timpl_closure'_step (c\\<^sup>*))\\<^sup>*\n 2. d \\<noteq> e \\<Longrightarrow>\n    (u, t) \\<in> (timpl_closure'_step (c\\<^sup>*))\\<^sup>*", "case True"], ["proof (state)\nthis:\n  d = e\n\ngoal (2 subgoals):\n 1. d = e \\<Longrightarrow>\n    (u, t) \\<in> (timpl_closure'_step (c\\<^sup>*))\\<^sup>*\n 2. d \\<noteq> e \\<Longrightarrow>\n    (u, t) \\<in> (timpl_closure'_step (c\\<^sup>*))\\<^sup>*", "thus ?thesis"], ["proof (prove)\nusing this:\n  d = e\n\ngoal (1 subgoal):\n 1. (u, t) \\<in> (timpl_closure'_step (c\\<^sup>*))\\<^sup>*", "using step.prems step.IH[of t]"], ["proof (prove)\nusing this:\n  d = e\n  term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs e])) u t\n  term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs d])) u\n   t \\<Longrightarrow>\n  (u, t) \\<in> (timpl_closure'_step (c\\<^sup>*))\\<^sup>*\n\ngoal (1 subgoal):\n 1. (u, t) \\<in> (timpl_closure'_step (c\\<^sup>*))\\<^sup>*", "by blast"], ["proof (state)\nthis:\n  (u, t) \\<in> (timpl_closure'_step (c\\<^sup>*))\\<^sup>*\n\ngoal (1 subgoal):\n 1. d \\<noteq> e \\<Longrightarrow>\n    (u, t) \\<in> (timpl_closure'_step (c\\<^sup>*))\\<^sup>*", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. d \\<noteq> e \\<Longrightarrow>\n    (u, t) \\<in> (timpl_closure'_step (c\\<^sup>*))\\<^sup>*", "case False"], ["proof (state)\nthis:\n  d \\<noteq> e\n\ngoal (1 subgoal):\n 1. d \\<noteq> e \\<Longrightarrow>\n    (u, t) \\<in> (timpl_closure'_step (c\\<^sup>*))\\<^sup>*", "hence \"(u,s) \\<in> (timpl_closure'_step (c\\<^sup>*))\\<^sup>*\"\n              \"(s,t) \\<in> timpl_closure'_step (c\\<^sup>*)\""], ["proof (prove)\nusing this:\n  d \\<noteq> e\n\ngoal (1 subgoal):\n 1. (u, s) \\<in> (timpl_closure'_step (c\\<^sup>*))\\<^sup>* &&&\n    (s, t) \\<in> timpl_closure'_step (c\\<^sup>*)", "using step.hyps(2) s(2) step.IH[OF s(1)]"], ["proof (prove)\nusing this:\n  d \\<noteq> e\n  (d, e) \\<in> c\n  term_variants_pred ((\\<lambda>_. [])(Abs d := [Abs e])) s t\n  (u, s) \\<in> (timpl_closure'_step (c\\<^sup>*))\\<^sup>*\n\ngoal (1 subgoal):\n 1. (u, s) \\<in> (timpl_closure'_step (c\\<^sup>*))\\<^sup>* &&&\n    (s, t) \\<in> timpl_closure'_step (c\\<^sup>*)", "by (auto intro: timpl_closure'_step.intros)"], ["proof (state)\nthis:\n  (u, s) \\<in> (timpl_closure'_step (c\\<^sup>*))\\<^sup>*\n  (s, t) \\<in> timpl_closure'_step (c\\<^sup>*)\n\ngoal (1 subgoal):\n 1. d \\<noteq> e \\<Longrightarrow>\n    (u, t) \\<in> (timpl_closure'_step (c\\<^sup>*))\\<^sup>*", "thus ?thesis"], ["proof (prove)\nusing this:\n  (u, s) \\<in> (timpl_closure'_step (c\\<^sup>*))\\<^sup>*\n  (s, t) \\<in> timpl_closure'_step (c\\<^sup>*)\n\ngoal (1 subgoal):\n 1. (u, t) \\<in> (timpl_closure'_step (c\\<^sup>*))\\<^sup>*", "by simp"], ["proof (state)\nthis:\n  (u, t) \\<in> (timpl_closure'_step (c\\<^sup>*))\\<^sup>*\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (u, t) \\<in> (timpl_closure'_step (c\\<^sup>*))\\<^sup>*\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (u, t) \\<in> (timpl_closure'_step (c\\<^sup>*))\\<^sup>*\n\ngoal (2 subgoals):\n 1. (s, s) \\<in> (timpl_closure'_step (c\\<^sup>*))\\<^sup>*\n 2. \\<And>y z.\n       \\<lbrakk>(s, y) \\<in> (timpl_closure'_step c)\\<^sup>*;\n        (y, z) \\<in> timpl_closure'_step c;\n        (s, y) \\<in> (timpl_closure'_step (c\\<^sup>*))\\<^sup>*\\<rbrakk>\n       \\<Longrightarrow> (s, z)\n                         \\<in> (timpl_closure'_step (c\\<^sup>*))\\<^sup>*", "thus ?case"], ["proof (prove)\nusing this:\n  (u, t) \\<in> (timpl_closure'_step (c\\<^sup>*))\\<^sup>*\n\ngoal (1 subgoal):\n 1. (s, t) \\<in> (timpl_closure'_step (c\\<^sup>*))\\<^sup>*", "using step.IH"], ["proof (prove)\nusing this:\n  (u, t) \\<in> (timpl_closure'_step (c\\<^sup>*))\\<^sup>*\n  (s, u) \\<in> (timpl_closure'_step (c\\<^sup>*))\\<^sup>*\n\ngoal (1 subgoal):\n 1. (s, t) \\<in> (timpl_closure'_step (c\\<^sup>*))\\<^sup>*", "by simp"], ["proof (state)\nthis:\n  (s, t) \\<in> (timpl_closure'_step (c\\<^sup>*))\\<^sup>*\n\ngoal (1 subgoal):\n 1. (s, s) \\<in> (timpl_closure'_step (c\\<^sup>*))\\<^sup>*", "qed simp"], ["proof (state)\nthis:\n  (s, t) \\<in> (timpl_closure'_step c)\\<^sup>* \\<Longrightarrow>\n  (s, t) \\<in> (timpl_closure'_step (c\\<^sup>*))\\<^sup>*\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma timpl_closure'_timpls_rtrancl_eq:\n  \"timpl_closure' (c\\<^sup>*) = timpl_closure' c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. timpl_closure' (c\\<^sup>*) = timpl_closure' c", "using timpl_closure'_timpls_rtrancl_subset timpl_closure'_timpls_rtrancl_supset"], ["proof (prove)\nusing this:\n  timpl_closure' (?c\\<^sup>*) \\<subseteq> timpl_closure' ?c\n  timpl_closure' ?c \\<subseteq> timpl_closure' (?c\\<^sup>*)\n\ngoal (1 subgoal):\n 1. timpl_closure' (c\\<^sup>*) = timpl_closure' c", "by blast"], ["", "lemma timpl_closure_timpls_trancl_eq:\n  \"timpl_closure t (c\\<^sup>+) = timpl_closure t c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. timpl_closure t (c\\<^sup>+) = timpl_closure t c", "using timpl_closure'_timpls_trancl_eq[of c]\n      timpl_closure_is_timpl_closure'[of _ _ c]\n      timpl_closure_is_timpl_closure'[of _ _ \"c\\<^sup>+\"]"], ["proof (prove)\nusing this:\n  timpl_closure' (c\\<^sup>+) = timpl_closure' c\n  (?s \\<in> timpl_closure ?t c) = ((?t, ?s) \\<in> timpl_closure' c)\n  (?s \\<in> timpl_closure ?t (c\\<^sup>+)) =\n  ((?t, ?s) \\<in> timpl_closure' (c\\<^sup>+))\n\ngoal (1 subgoal):\n 1. timpl_closure t (c\\<^sup>+) = timpl_closure t c", "by fastforce"], ["", "lemma timpl_closure_set_timpls_trancl_eq:\n  \"timpl_closure_set M (c\\<^sup>+) = timpl_closure_set M c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. timpl_closure_set M (c\\<^sup>+) = timpl_closure_set M c", "using timpl_closure_timpls_trancl_eq\n      timpl_closure_set_is_timpl_closure_union[of M c]\n      timpl_closure_set_is_timpl_closure_union[of M \"c\\<^sup>+\"]"], ["proof (prove)\nusing this:\n  timpl_closure ?t (?c\\<^sup>+) = timpl_closure ?t ?c\n  timpl_closure_set M c = (\\<Union>t\\<in>M. timpl_closure t c)\n  timpl_closure_set M (c\\<^sup>+) =\n  (\\<Union>t\\<in>M. timpl_closure t (c\\<^sup>+))\n\ngoal (1 subgoal):\n 1. timpl_closure_set M (c\\<^sup>+) = timpl_closure_set M c", "by fastforce"], ["", "lemma timpl_closure_set_timpls_trancl_eq':\n  \"timpl_closure_set M {(a,b) \\<in> c\\<^sup>+. a \\<noteq> b} = timpl_closure_set M c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. timpl_closure_set M\n     {(a, b). (a, b) \\<in> c\\<^sup>+ \\<and> a \\<noteq> b} =\n    timpl_closure_set M c", "using timpl_closure'_timpls_trancl_eq'[of c]\n      timpl_closure_is_timpl_closure'[of _ _ c]\n      timpl_closure_is_timpl_closure'[of _ _ \"{(a,b) \\<in> c\\<^sup>+. a \\<noteq> b}\"]\n      timpl_closure_set_is_timpl_closure_union[of M c]\n      timpl_closure_set_is_timpl_closure_union[of M \"{(a,b) \\<in> c\\<^sup>+. a \\<noteq> b}\"]"], ["proof (prove)\nusing this:\n  timpl_closure' {(a, b). (a, b) \\<in> c\\<^sup>+ \\<and> a \\<noteq> b} =\n  timpl_closure' c\n  (?s \\<in> timpl_closure ?t c) = ((?t, ?s) \\<in> timpl_closure' c)\n  (?s \\<in> timpl_closure ?t\n             {(a, b). (a, b) \\<in> c\\<^sup>+ \\<and> a \\<noteq> b}) =\n  ((?t, ?s)\n   \\<in> timpl_closure'\n          {(a, b). (a, b) \\<in> c\\<^sup>+ \\<and> a \\<noteq> b})\n  timpl_closure_set M c = (\\<Union>t\\<in>M. timpl_closure t c)\n  timpl_closure_set M {(a, b). (a, b) \\<in> c\\<^sup>+ \\<and> a \\<noteq> b} =\n  (\\<Union>t\\<in>M.\n      timpl_closure t {(a, b). (a, b) \\<in> c\\<^sup>+ \\<and> a \\<noteq> b})\n\ngoal (1 subgoal):\n 1. timpl_closure_set M\n     {(a, b). (a, b) \\<in> c\\<^sup>+ \\<and> a \\<noteq> b} =\n    timpl_closure_set M c", "by fastforce"], ["", "lemma timpl_closure_Var_in_iff:\n  \"Var x \\<in> timpl_closure t TI \\<longleftrightarrow> t = Var x\" (is \"?A \\<longleftrightarrow> ?B\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (Var x \\<in> timpl_closure t TI) = (t = Var x)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. Var x \\<in> timpl_closure t TI \\<Longrightarrow> t = Var x\n 2. t = Var x \\<Longrightarrow> Var x \\<in> timpl_closure t TI", "have \"s \\<in> timpl_closure t TI \\<Longrightarrow> s = Var x \\<Longrightarrow> s = t\" for s"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>s \\<in> timpl_closure t TI; s = Var x\\<rbrakk>\n    \\<Longrightarrow> s = t", "apply (induction rule: timpl_closure.induct)"], ["proof (prove)\ngoal (2 subgoals):\n 1. t = Var x \\<Longrightarrow> t = t\n 2. \\<And>u a b s.\n       \\<lbrakk>u \\<in> timpl_closure t TI;\n        u = Var x \\<Longrightarrow> u = t; (a, b) \\<in> TI;\n        term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) u s;\n        s = Var x\\<rbrakk>\n       \\<Longrightarrow> s = t", "by (simp, metis term_variants_pred_inv_Var(2))"], ["proof (state)\nthis:\n  \\<lbrakk>?s \\<in> timpl_closure t TI; ?s = Var x\\<rbrakk>\n  \\<Longrightarrow> ?s = t\n\ngoal (2 subgoals):\n 1. Var x \\<in> timpl_closure t TI \\<Longrightarrow> t = Var x\n 2. t = Var x \\<Longrightarrow> Var x \\<in> timpl_closure t TI", "thus \"?A \\<Longrightarrow> ?B\""], ["proof (prove)\nusing this:\n  \\<lbrakk>?s \\<in> timpl_closure t TI; ?s = Var x\\<rbrakk>\n  \\<Longrightarrow> ?s = t\n\ngoal (1 subgoal):\n 1. Var x \\<in> timpl_closure t TI \\<Longrightarrow> t = Var x", "by blast"], ["proof (state)\nthis:\n  Var x \\<in> timpl_closure t TI \\<Longrightarrow> t = Var x\n\ngoal (1 subgoal):\n 1. t = Var x \\<Longrightarrow> Var x \\<in> timpl_closure t TI", "qed (blast intro: timpl_closure.FP)"], ["", "lemma timpl_closure_set_Var_in_iff:\n  \"Var x \\<in> timpl_closure_set M TI \\<longleftrightarrow> Var x \\<in> M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Var x \\<in> timpl_closure_set M TI) = (Var x \\<in> M)", "unfolding timpl_closure_set_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (Var x \\<in> (\\<Union>t\\<in>M. timpl_closure t TI)) = (Var x \\<in> M)", "by (simp add: timpl_closure_Var_in_iff[of x _ TI])"], ["", "lemma timpl_closure_Var_inv:\n  assumes \"t \\<in> timpl_closure (Var x) TI\"\n  shows \"t = Var x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t = Var x", "using assms"], ["proof (prove)\nusing this:\n  t \\<in> timpl_closure (Var x) TI\n\ngoal (1 subgoal):\n 1. t = Var x", "proof (induction rule: timpl_closure.induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. Var x = Var x\n 2. \\<And>u a b s.\n       \\<lbrakk>u \\<in> timpl_closure (Var x) TI; u = Var x;\n        (a, b) \\<in> TI;\n        term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) u s\\<rbrakk>\n       \\<Longrightarrow> s = Var x", "case (TI u a b s)"], ["proof (state)\nthis:\n  u \\<in> timpl_closure (Var x) TI\n  (a, b) \\<in> TI\n  term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) u s\n  u = Var x\n\ngoal (2 subgoals):\n 1. Var x = Var x\n 2. \\<And>u a b s.\n       \\<lbrakk>u \\<in> timpl_closure (Var x) TI; u = Var x;\n        (a, b) \\<in> TI;\n        term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) u s\\<rbrakk>\n       \\<Longrightarrow> s = Var x", "thus ?case"], ["proof (prove)\nusing this:\n  u \\<in> timpl_closure (Var x) TI\n  (a, b) \\<in> TI\n  term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) u s\n  u = Var x\n\ngoal (1 subgoal):\n 1. s = Var x", "using term_variants_pred_inv_Var"], ["proof (prove)\nusing this:\n  u \\<in> timpl_closure (Var x) TI\n  (a, b) \\<in> TI\n  term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) u s\n  u = Var x\n  term_variants_pred ?P (Var ?x) ?t = (?t = Var ?x)\n  term_variants_pred ?P ?t (Var ?x) = (?t = Var ?x)\n\ngoal (1 subgoal):\n 1. s = Var x", "by fast"], ["proof (state)\nthis:\n  s = Var x\n\ngoal (1 subgoal):\n 1. Var x = Var x", "qed simp"], ["", "lemma timpls_Un_mono: \"mono (\\<lambda>X. FP \\<union> (\\<Union>x \\<in> X. \\<Union>(a,b) \\<in> TI. set \\<langle>a --\\<guillemotright> b\\<rangle>\\<langle>x\\<rangle>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mono\n     (\\<lambda>X.\n         FP \\<union>\n         (\\<Union>x\\<in>X.\n             \\<Union>(a, b)\\<in>TI.\n                set \\<langle>a --\\<guillemotright> b\\<rangle>\\<langle>x\\<rangle>))", "by (auto intro!: monoI)"], ["", "lemma timpl_closure_set_lfp:\n  fixes M TI\n  defines \"f \\<equiv> \\<lambda>X. M \\<union> (\\<Union>x \\<in> X. \\<Union>(a,b) \\<in> TI. set \\<langle>a --\\<guillemotright> b\\<rangle>\\<langle>x\\<rangle>)\"\n  shows \"lfp f = timpl_closure_set M TI\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lfp f = timpl_closure_set M TI", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. lfp f \\<subseteq> timpl_closure_set M TI\n 2. timpl_closure_set M TI \\<subseteq> lfp f", "note 0 = timpls_Un_mono[of M TI, unfolded f_def[symmetric]]"], ["proof (state)\nthis:\n  mono f\n\ngoal (2 subgoals):\n 1. lfp f \\<subseteq> timpl_closure_set M TI\n 2. timpl_closure_set M TI \\<subseteq> lfp f", "let ?N = \"timpl_closure_set M TI\""], ["proof (state)\ngoal (2 subgoals):\n 1. lfp f \\<subseteq> timpl_closure_set M TI\n 2. timpl_closure_set M TI \\<subseteq> lfp f", "show \"lfp f \\<subseteq> ?N\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lfp f \\<subseteq> timpl_closure_set M TI", "proof (induction rule: lfp_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. mono f\n 2. f (lfp f \\<inter> timpl_closure_set M TI)\n    \\<subseteq> timpl_closure_set M TI", "case 2"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. mono f\n 2. f (lfp f \\<inter> timpl_closure_set M TI)\n    \\<subseteq> timpl_closure_set M TI", "thus ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. f (lfp f \\<inter> timpl_closure_set M TI)\n    \\<subseteq> timpl_closure_set M TI", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> f (lfp f \\<inter> timpl_closure_set M TI) \\<Longrightarrow>\n       x \\<in> timpl_closure_set M TI", "fix t"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> f (lfp f \\<inter> timpl_closure_set M TI) \\<Longrightarrow>\n       x \\<in> timpl_closure_set M TI", "assume \"t \\<in> f (lfp f \\<inter> ?N)\""], ["proof (state)\nthis:\n  t \\<in> f (lfp f \\<inter> timpl_closure_set M TI)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> f (lfp f \\<inter> timpl_closure_set M TI) \\<Longrightarrow>\n       x \\<in> timpl_closure_set M TI", "hence \"t \\<in> M \\<or> t \\<in> (\\<Union>x \\<in> ?N. \\<Union>(a,b) \\<in> TI. set \\<langle>a --\\<guillemotright> b\\<rangle>\\<langle>x\\<rangle>)\" (is \"?A \\<or> ?B\")"], ["proof (prove)\nusing this:\n  t \\<in> f (lfp f \\<inter> timpl_closure_set M TI)\n\ngoal (1 subgoal):\n 1. t \\<in> M \\<or>\n    t \\<in> (\\<Union>x\\<in>timpl_closure_set M TI.\n                \\<Union>(a, b)\\<in>TI.\n                   set \\<langle>a --\\<guillemotright> b\\<rangle>\\<langle>x\\<rangle>)", "unfolding f_def"], ["proof (prove)\nusing this:\n  t \\<in> M \\<union>\n          (\\<Union>x\\<in>lfp (\\<lambda>X.\n                                 M \\<union>\n                                 (\\<Union>x\\<in>X.\n                                     \\<Union>(a, b)\\<in>TI.\n  set \\<langle>a --\\<guillemotright> b\\<rangle>\\<langle>x\\<rangle>)) \\<inter>\n                         timpl_closure_set M TI.\n              \\<Union>(a, b)\\<in>TI.\n                 set \\<langle>a --\\<guillemotright> b\\<rangle>\\<langle>x\\<rangle>)\n\ngoal (1 subgoal):\n 1. t \\<in> M \\<or>\n    t \\<in> (\\<Union>x\\<in>timpl_closure_set M TI.\n                \\<Union>(a, b)\\<in>TI.\n                   set \\<langle>a --\\<guillemotright> b\\<rangle>\\<langle>x\\<rangle>)", "by blast"], ["proof (state)\nthis:\n  t \\<in> M \\<or>\n  t \\<in> (\\<Union>x\\<in>timpl_closure_set M TI.\n              \\<Union>(a, b)\\<in>TI.\n                 set \\<langle>a --\\<guillemotright> b\\<rangle>\\<langle>x\\<rangle>)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> f (lfp f \\<inter> timpl_closure_set M TI) \\<Longrightarrow>\n       x \\<in> timpl_closure_set M TI", "thus \"t \\<in> ?N\""], ["proof (prove)\nusing this:\n  t \\<in> M \\<or>\n  t \\<in> (\\<Union>x\\<in>timpl_closure_set M TI.\n              \\<Union>(a, b)\\<in>TI.\n                 set \\<langle>a --\\<guillemotright> b\\<rangle>\\<langle>x\\<rangle>)\n\ngoal (1 subgoal):\n 1. t \\<in> timpl_closure_set M TI", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. t \\<in> M \\<Longrightarrow> t \\<in> timpl_closure_set M TI\n 2. t \\<in> (\\<Union>x\\<in>timpl_closure_set M TI.\n                \\<Union>(a, b)\\<in>TI.\n                   set \\<langle>a --\\<guillemotright> b\\<rangle>\\<langle>x\\<rangle>) \\<Longrightarrow>\n    t \\<in> timpl_closure_set M TI", "assume ?B"], ["proof (state)\nthis:\n  t \\<in> (\\<Union>x\\<in>timpl_closure_set M TI.\n              \\<Union>(a, b)\\<in>TI.\n                 set \\<langle>a --\\<guillemotright> b\\<rangle>\\<langle>x\\<rangle>)\n\ngoal (2 subgoals):\n 1. t \\<in> M \\<Longrightarrow> t \\<in> timpl_closure_set M TI\n 2. t \\<in> (\\<Union>x\\<in>timpl_closure_set M TI.\n                \\<Union>(a, b)\\<in>TI.\n                   set \\<langle>a --\\<guillemotright> b\\<rangle>\\<langle>x\\<rangle>) \\<Longrightarrow>\n    t \\<in> timpl_closure_set M TI", "then"], ["proof (chain)\npicking this:\n  t \\<in> (\\<Union>x\\<in>timpl_closure_set M TI.\n              \\<Union>(a, b)\\<in>TI.\n                 set \\<langle>a --\\<guillemotright> b\\<rangle>\\<langle>x\\<rangle>)", "obtain s a b where s: \"s \\<in> ?N\" \"(a,b) \\<in> TI\" \"t \\<in> set \\<langle>a --\\<guillemotright> b\\<rangle>\\<langle>s\\<rangle>\""], ["proof (prove)\nusing this:\n  t \\<in> (\\<Union>x\\<in>timpl_closure_set M TI.\n              \\<Union>(a, b)\\<in>TI.\n                 set \\<langle>a --\\<guillemotright> b\\<rangle>\\<langle>x\\<rangle>)\n\ngoal (1 subgoal):\n 1. (\\<And>s a b.\n        \\<lbrakk>s \\<in> timpl_closure_set M TI; (a, b) \\<in> TI;\n         t \\<in> set \\<langle>a --\\<guillemotright> b\\<rangle>\\<langle>s\\<rangle>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by moura"], ["proof (state)\nthis:\n  s \\<in> timpl_closure_set M TI\n  (a, b) \\<in> TI\n  t \\<in> set \\<langle>a --\\<guillemotright> b\\<rangle>\\<langle>s\\<rangle>\n\ngoal (2 subgoals):\n 1. t \\<in> M \\<Longrightarrow> t \\<in> timpl_closure_set M TI\n 2. t \\<in> (\\<Union>x\\<in>timpl_closure_set M TI.\n                \\<Union>(a, b)\\<in>TI.\n                   set \\<langle>a --\\<guillemotright> b\\<rangle>\\<langle>x\\<rangle>) \\<Longrightarrow>\n    t \\<in> timpl_closure_set M TI", "thus ?thesis"], ["proof (prove)\nusing this:\n  s \\<in> timpl_closure_set M TI\n  (a, b) \\<in> TI\n  t \\<in> set \\<langle>a --\\<guillemotright> b\\<rangle>\\<langle>s\\<rangle>\n\ngoal (1 subgoal):\n 1. t \\<in> timpl_closure_set M TI", "using term_variants_pred_iff_in_term_variants[of \"(\\<lambda>_. [])(Abs a := [Abs b])\" s]"], ["proof (prove)\nusing this:\n  s \\<in> timpl_closure_set M TI\n  (a, b) \\<in> TI\n  t \\<in> set \\<langle>a --\\<guillemotright> b\\<rangle>\\<langle>s\\<rangle>\n  term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) s ?s =\n  (?s \\<in> set (term_variants ((\\<lambda>_. [])(Abs a := [Abs b])) s))\n\ngoal (1 subgoal):\n 1. t \\<in> timpl_closure_set M TI", "unfolding timpl_closure_set_def timpl_apply_term_def"], ["proof (prove)\nusing this:\n  s \\<in> (\\<Union>t\\<in>M. timpl_closure t TI)\n  (a, b) \\<in> TI\n  t \\<in> set (term_variants ((\\<lambda>_. [])(Abs a := [Abs b])) s)\n  term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) s ?s =\n  (?s \\<in> set (term_variants ((\\<lambda>_. [])(Abs a := [Abs b])) s))\n\ngoal (1 subgoal):\n 1. t \\<in> (\\<Union>t\\<in>M. timpl_closure t TI)", "by (auto intro: timpl_closure.intros)"], ["proof (state)\nthis:\n  t \\<in> timpl_closure_set M TI\n\ngoal (1 subgoal):\n 1. t \\<in> M \\<Longrightarrow> t \\<in> timpl_closure_set M TI", "qed (auto simp add: timpl_closure_set_def intro: timpl_closure.intros)"], ["proof (state)\nthis:\n  t \\<in> timpl_closure_set M TI\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  f (lfp f \\<inter> timpl_closure_set M TI)\n  \\<subseteq> timpl_closure_set M TI\n\ngoal (1 subgoal):\n 1. mono f", "qed (rule 0)"], ["proof (state)\nthis:\n  lfp f \\<subseteq> timpl_closure_set M TI\n\ngoal (1 subgoal):\n 1. timpl_closure_set M TI \\<subseteq> lfp f", "have \"t \\<in> lfp f\" when t: \"t \\<in> timpl_closure s TI\" and s: \"s \\<in> M\" for t s"], ["proof (prove)\ngoal (1 subgoal):\n 1. t \\<in> lfp f", "using t"], ["proof (prove)\nusing this:\n  t \\<in> timpl_closure s TI\n\ngoal (1 subgoal):\n 1. t \\<in> lfp f", "proof (induction t rule: timpl_closure.induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. s \\<in> lfp f\n 2. \\<And>u a b sa.\n       \\<lbrakk>u \\<in> timpl_closure s TI; u \\<in> lfp f; (a, b) \\<in> TI;\n        term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) u\n         sa\\<rbrakk>\n       \\<Longrightarrow> sa \\<in> lfp f", "case (TI u a b v)"], ["proof (state)\nthis:\n  u \\<in> timpl_closure s TI\n  (a, b) \\<in> TI\n  term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) u v\n  u \\<in> lfp f\n\ngoal (2 subgoals):\n 1. s \\<in> lfp f\n 2. \\<And>u a b sa.\n       \\<lbrakk>u \\<in> timpl_closure s TI; u \\<in> lfp f; (a, b) \\<in> TI;\n        term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) u\n         sa\\<rbrakk>\n       \\<Longrightarrow> sa \\<in> lfp f", "thus ?case"], ["proof (prove)\nusing this:\n  u \\<in> timpl_closure s TI\n  (a, b) \\<in> TI\n  term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) u v\n  u \\<in> lfp f\n\ngoal (1 subgoal):\n 1. v \\<in> lfp f", "using term_variants_pred_iff_in_term_variants[of \"(\\<lambda>_. [])(Abs a := [Abs b])\"]\n            lfp_fixpoint[OF 0]"], ["proof (prove)\nusing this:\n  u \\<in> timpl_closure s TI\n  (a, b) \\<in> TI\n  term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) u v\n  u \\<in> lfp f\n  term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) ?t ?s =\n  (?s \\<in> set (term_variants ((\\<lambda>_. [])(Abs a := [Abs b])) ?t))\n  f (lfp f) = lfp f\n\ngoal (1 subgoal):\n 1. v \\<in> lfp f", "unfolding timpl_apply_term_def f_def"], ["proof (prove)\nusing this:\n  u \\<in> timpl_closure s TI\n  (a, b) \\<in> TI\n  term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) u v\n  u \\<in> lfp (\\<lambda>a.\n                  M \\<union>\n                  (\\<Union>x\\<in>a.\n                      \\<Union>(a, b)\\<in>TI.\n                         set (term_variants\n                               ((\\<lambda>_. [])(Abs a := [Abs b])) x)))\n  term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) ?t ?s =\n  (?s \\<in> set (term_variants ((\\<lambda>_. [])(Abs a := [Abs b])) ?t))\n  M \\<union>\n  (\\<Union>x\\<in>lfp (\\<lambda>X.\n                         M \\<union>\n                         (\\<Union>x\\<in>X.\n                             \\<Union>(a, b)\\<in>TI.\n                                set (term_variants\n((\\<lambda>_. [])(Abs a := [Abs b])) x))).\n      \\<Union>(a, b)\\<in>TI.\n         set (term_variants ((\\<lambda>_. [])(Abs a := [Abs b])) x)) =\n  lfp (\\<lambda>X.\n          M \\<union>\n          (\\<Union>x\\<in>X.\n              \\<Union>(a, b)\\<in>TI.\n                 set (term_variants ((\\<lambda>_. [])(Abs a := [Abs b]))\n                       x)))\n\ngoal (1 subgoal):\n 1. v \\<in> lfp (\\<lambda>a.\n                    M \\<union>\n                    (\\<Union>x\\<in>a.\n                        \\<Union>(a, b)\\<in>TI.\n                           set (term_variants\n                                 ((\\<lambda>_. [])(Abs a := [Abs b])) x)))", "by fastforce"], ["proof (state)\nthis:\n  v \\<in> lfp f\n\ngoal (1 subgoal):\n 1. s \\<in> lfp f", "qed (use s lfp_fixpoint[OF 0] f_def in blast)"], ["proof (state)\nthis:\n  \\<lbrakk>?t \\<in> timpl_closure ?s TI; ?s \\<in> M\\<rbrakk>\n  \\<Longrightarrow> ?t \\<in> lfp f\n\ngoal (1 subgoal):\n 1. timpl_closure_set M TI \\<subseteq> lfp f", "thus \"?N \\<subseteq> lfp f\""], ["proof (prove)\nusing this:\n  \\<lbrakk>?t \\<in> timpl_closure ?s TI; ?s \\<in> M\\<rbrakk>\n  \\<Longrightarrow> ?t \\<in> lfp f\n\ngoal (1 subgoal):\n 1. timpl_closure_set M TI \\<subseteq> lfp f", "unfolding timpl_closure_set_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>?t \\<in> timpl_closure ?s TI; ?s \\<in> M\\<rbrakk>\n  \\<Longrightarrow> ?t \\<in> lfp f\n\ngoal (1 subgoal):\n 1. (\\<Union>t\\<in>M. timpl_closure t TI) \\<subseteq> lfp f", "by blast"], ["proof (state)\nthis:\n  timpl_closure_set M TI \\<subseteq> lfp f\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma timpl_closure_set_supset:\n  assumes \"\\<forall>t \\<in> FP. t \\<in> closure\"\n  and \"\\<forall>t \\<in> closure. \\<forall>(a,b) \\<in> TI. \\<forall>s \\<in> set \\<langle>a --\\<guillemotright> b\\<rangle>\\<langle>t\\<rangle>. s \\<in> closure\"\n  shows \"timpl_closure_set FP TI \\<subseteq> closure\""], ["proof (prove)\ngoal (1 subgoal):\n 1. timpl_closure_set FP TI \\<subseteq> closure", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. timpl_closure_set FP TI \\<subseteq> closure", "have \"t \\<in> closure\" when t: \"t \\<in> timpl_closure s TI\" and s: \"s \\<in> FP\" for t s"], ["proof (prove)\ngoal (1 subgoal):\n 1. t \\<in> closure", "using t"], ["proof (prove)\nusing this:\n  t \\<in> timpl_closure s TI\n\ngoal (1 subgoal):\n 1. t \\<in> closure", "proof (induction rule: timpl_closure.induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. s \\<in> closure\n 2. \\<And>u a b sa.\n       \\<lbrakk>u \\<in> timpl_closure s TI; u \\<in> closure;\n        (a, b) \\<in> TI;\n        term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) u\n         sa\\<rbrakk>\n       \\<Longrightarrow> sa \\<in> closure", "case FP"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. s \\<in> closure\n 2. \\<And>u a b sa.\n       \\<lbrakk>u \\<in> timpl_closure s TI; u \\<in> closure;\n        (a, b) \\<in> TI;\n        term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) u\n         sa\\<rbrakk>\n       \\<Longrightarrow> sa \\<in> closure", "thus ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<in> closure", "using s assms(1)"], ["proof (prove)\nusing this:\n  s \\<in> FP\n  \\<forall>t\\<in>FP. t \\<in> closure\n\ngoal (1 subgoal):\n 1. s \\<in> closure", "by blast"], ["proof (state)\nthis:\n  s \\<in> closure\n\ngoal (1 subgoal):\n 1. \\<And>u a b sa.\n       \\<lbrakk>u \\<in> timpl_closure s TI; u \\<in> closure;\n        (a, b) \\<in> TI;\n        term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) u\n         sa\\<rbrakk>\n       \\<Longrightarrow> sa \\<in> closure", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u a b sa.\n       \\<lbrakk>u \\<in> timpl_closure s TI; u \\<in> closure;\n        (a, b) \\<in> TI;\n        term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) u\n         sa\\<rbrakk>\n       \\<Longrightarrow> sa \\<in> closure", "case (TI u a b s')"], ["proof (state)\nthis:\n  u \\<in> timpl_closure s TI\n  (a, b) \\<in> TI\n  term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) u s'\n  u \\<in> closure\n\ngoal (1 subgoal):\n 1. \\<And>u a b sa.\n       \\<lbrakk>u \\<in> timpl_closure s TI; u \\<in> closure;\n        (a, b) \\<in> TI;\n        term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) u\n         sa\\<rbrakk>\n       \\<Longrightarrow> sa \\<in> closure", "thus ?case"], ["proof (prove)\nusing this:\n  u \\<in> timpl_closure s TI\n  (a, b) \\<in> TI\n  term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) u s'\n  u \\<in> closure\n\ngoal (1 subgoal):\n 1. s' \\<in> closure", "using assms(2) term_variants_pred_iff_in_term_variants[of \"(\\<lambda>_. [])(Abs a := [Abs b])\"]"], ["proof (prove)\nusing this:\n  u \\<in> timpl_closure s TI\n  (a, b) \\<in> TI\n  term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) u s'\n  u \\<in> closure\n  \\<forall>t\\<in>closure.\n     \\<forall>(a, b)\\<in>TI.\n        \\<forall>s\\<in>set \\<langle>a --\\<guillemotright> b\\<rangle>\\<langle>t\\<rangle>.\n           s \\<in> closure\n  term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) ?t ?s =\n  (?s \\<in> set (term_variants ((\\<lambda>_. [])(Abs a := [Abs b])) ?t))\n\ngoal (1 subgoal):\n 1. s' \\<in> closure", "unfolding timpl_apply_term_def"], ["proof (prove)\nusing this:\n  u \\<in> timpl_closure s TI\n  (a, b) \\<in> TI\n  term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) u s'\n  u \\<in> closure\n  \\<forall>t\\<in>closure.\n     \\<forall>(a, b)\\<in>TI.\n        \\<forall>s\\<in>set (term_variants\n                             ((\\<lambda>_. [])(Abs a := [Abs b])) t).\n           s \\<in> closure\n  term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) ?t ?s =\n  (?s \\<in> set (term_variants ((\\<lambda>_. [])(Abs a := [Abs b])) ?t))\n\ngoal (1 subgoal):\n 1. s' \\<in> closure", "by fastforce"], ["proof (state)\nthis:\n  s' \\<in> closure\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<lbrakk>?t \\<in> timpl_closure ?s TI; ?s \\<in> FP\\<rbrakk>\n  \\<Longrightarrow> ?t \\<in> closure\n\ngoal (1 subgoal):\n 1. timpl_closure_set FP TI \\<subseteq> closure", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>?t \\<in> timpl_closure ?s TI; ?s \\<in> FP\\<rbrakk>\n  \\<Longrightarrow> ?t \\<in> closure\n\ngoal (1 subgoal):\n 1. timpl_closure_set FP TI \\<subseteq> closure", "unfolding timpl_closure_set_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>?t \\<in> timpl_closure ?s TI; ?s \\<in> FP\\<rbrakk>\n  \\<Longrightarrow> ?t \\<in> closure\n\ngoal (1 subgoal):\n 1. (\\<Union>t\\<in>FP. timpl_closure t TI) \\<subseteq> closure", "by blast"], ["proof (state)\nthis:\n  timpl_closure_set FP TI \\<subseteq> closure\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma timpl_closure_set_supset':\n  assumes \"\\<forall>t \\<in> FP. \\<forall>(a,b) \\<in> TI. \\<forall>s \\<in> set \\<langle>a --\\<guillemotright> b\\<rangle>\\<langle>t\\<rangle>. s \\<in> FP\"\n  shows \"timpl_closure_set FP TI \\<subseteq> FP\""], ["proof (prove)\ngoal (1 subgoal):\n 1. timpl_closure_set FP TI \\<subseteq> FP", "using timpl_closure_set_supset[OF _ assms]"], ["proof (prove)\nusing this:\n  \\<forall>t\\<in>?FP. t \\<in> FP \\<Longrightarrow>\n  timpl_closure_set ?FP TI \\<subseteq> FP\n\ngoal (1 subgoal):\n 1. timpl_closure_set FP TI \\<subseteq> FP", "by blast"], ["", "lemma timpl_closure'_param:\n  assumes \"(t,s) \\<in> timpl_closure' c\"\n    and fg: \"f = g \\<or> (\\<exists>a b. (a,b) \\<in> c \\<and> f = Abs a \\<and> g = Abs b)\"\n  shows \"(Fun f (S@t#T), Fun g (S@s#T)) \\<in> timpl_closure' c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Fun f (S @ t # T), Fun g (S @ s # T)) \\<in> timpl_closure' c", "using assms(1)"], ["proof (prove)\nusing this:\n  (t, s) \\<in> timpl_closure' c\n\ngoal (1 subgoal):\n 1. (Fun f (S @ t # T), Fun g (S @ s # T)) \\<in> timpl_closure' c", "unfolding timpl_closure'_def"], ["proof (prove)\nusing this:\n  (t, s) \\<in> (timpl_closure'_step c)\\<^sup>*\n\ngoal (1 subgoal):\n 1. (Fun f (S @ t # T), Fun g (S @ s # T))\n    \\<in> (timpl_closure'_step c)\\<^sup>*", "proof (induction rule: rtrancl_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. (Fun f (S @ t # T), Fun g (S @ t # T))\n    \\<in> (timpl_closure'_step c)\\<^sup>*\n 2. \\<And>y z.\n       \\<lbrakk>(t, y) \\<in> (timpl_closure'_step c)\\<^sup>*;\n        (y, z) \\<in> timpl_closure'_step c;\n        (Fun f (S @ t # T), Fun g (S @ y # T))\n        \\<in> (timpl_closure'_step c)\\<^sup>*\\<rbrakk>\n       \\<Longrightarrow> (Fun f (S @ t # T), Fun g (S @ z # T))\n                         \\<in> (timpl_closure'_step c)\\<^sup>*", "case base"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. (Fun f (S @ t # T), Fun g (S @ t # T))\n    \\<in> (timpl_closure'_step c)\\<^sup>*\n 2. \\<And>y z.\n       \\<lbrakk>(t, y) \\<in> (timpl_closure'_step c)\\<^sup>*;\n        (y, z) \\<in> timpl_closure'_step c;\n        (Fun f (S @ t # T), Fun g (S @ y # T))\n        \\<in> (timpl_closure'_step c)\\<^sup>*\\<rbrakk>\n       \\<Longrightarrow> (Fun f (S @ t # T), Fun g (S @ z # T))\n                         \\<in> (timpl_closure'_step c)\\<^sup>*", "thus ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. (Fun f (S @ t # T), Fun g (S @ t # T))\n    \\<in> (timpl_closure'_step c)\\<^sup>*", "proof (cases \"f = g\")"], ["proof (state)\ngoal (2 subgoals):\n 1. f = g \\<Longrightarrow>\n    (Fun f (S @ t # T), Fun g (S @ t # T))\n    \\<in> (timpl_closure'_step c)\\<^sup>*\n 2. f \\<noteq> g \\<Longrightarrow>\n    (Fun f (S @ t # T), Fun g (S @ t # T))\n    \\<in> (timpl_closure'_step c)\\<^sup>*", "case False"], ["proof (state)\nthis:\n  f \\<noteq> g\n\ngoal (2 subgoals):\n 1. f = g \\<Longrightarrow>\n    (Fun f (S @ t # T), Fun g (S @ t # T))\n    \\<in> (timpl_closure'_step c)\\<^sup>*\n 2. f \\<noteq> g \\<Longrightarrow>\n    (Fun f (S @ t # T), Fun g (S @ t # T))\n    \\<in> (timpl_closure'_step c)\\<^sup>*", "then"], ["proof (chain)\npicking this:\n  f \\<noteq> g", "obtain a b where ab: \"(a,b) \\<in> c\" \"f = Abs a\" \"g = Abs b\""], ["proof (prove)\nusing this:\n  f \\<noteq> g\n\ngoal (1 subgoal):\n 1. (\\<And>a b.\n        \\<lbrakk>(a, b) \\<in> c; f = Abs a; g = Abs b\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using fg"], ["proof (prove)\nusing this:\n  f \\<noteq> g\n  f = g \\<or>\n  (\\<exists>a b. (a, b) \\<in> c \\<and> f = Abs a \\<and> g = Abs b)\n\ngoal (1 subgoal):\n 1. (\\<And>a b.\n        \\<lbrakk>(a, b) \\<in> c; f = Abs a; g = Abs b\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by moura"], ["proof (state)\nthis:\n  (a, b) \\<in> c\n  f = Abs a\n  g = Abs b\n\ngoal (2 subgoals):\n 1. f = g \\<Longrightarrow>\n    (Fun f (S @ t # T), Fun g (S @ t # T))\n    \\<in> (timpl_closure'_step c)\\<^sup>*\n 2. f \\<noteq> g \\<Longrightarrow>\n    (Fun f (S @ t # T), Fun g (S @ t # T))\n    \\<in> (timpl_closure'_step c)\\<^sup>*", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (Fun f (S @ t # T), Fun g (S @ t # T))\n    \\<in> (timpl_closure'_step c)\\<^sup>*", "using term_variants_pred_param[OF term_variants_pred_refl[of \"(\\<lambda>_. [])(Abs a := [Abs b])\" t]]\n            timpl_closure'_step.intros[OF ab(1)] ab(2,3)"], ["proof (prove)\nusing this:\n  ?f = ?g \\<or>\n  ?g \\<in> set (((\\<lambda>_. [])(Abs a := [Abs b])) ?f) \\<Longrightarrow>\n  term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b]))\n   (Fun ?f (?S @ t # ?T)) (Fun ?g (?S @ t # ?T))\n  term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) ?t\n   ?s \\<Longrightarrow>\n  (?t, ?s) \\<in> timpl_closure'_step c\n  f = Abs a\n  g = Abs b\n\ngoal (1 subgoal):\n 1. (Fun f (S @ t # T), Fun g (S @ t # T))\n    \\<in> (timpl_closure'_step c)\\<^sup>*", "by fastforce"], ["proof (state)\nthis:\n  (Fun f (S @ t # T), Fun g (S @ t # T))\n  \\<in> (timpl_closure'_step c)\\<^sup>*\n\ngoal (1 subgoal):\n 1. f = g \\<Longrightarrow>\n    (Fun f (S @ t # T), Fun g (S @ t # T))\n    \\<in> (timpl_closure'_step c)\\<^sup>*", "qed simp"], ["proof (state)\nthis:\n  (Fun f (S @ t # T), Fun g (S @ t # T))\n  \\<in> (timpl_closure'_step c)\\<^sup>*\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(t, y) \\<in> (timpl_closure'_step c)\\<^sup>*;\n        (y, z) \\<in> timpl_closure'_step c;\n        (Fun f (S @ t # T), Fun g (S @ y # T))\n        \\<in> (timpl_closure'_step c)\\<^sup>*\\<rbrakk>\n       \\<Longrightarrow> (Fun f (S @ t # T), Fun g (S @ z # T))\n                         \\<in> (timpl_closure'_step c)\\<^sup>*", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(t, y) \\<in> (timpl_closure'_step c)\\<^sup>*;\n        (y, z) \\<in> timpl_closure'_step c;\n        (Fun f (S @ t # T), Fun g (S @ y # T))\n        \\<in> (timpl_closure'_step c)\\<^sup>*\\<rbrakk>\n       \\<Longrightarrow> (Fun f (S @ t # T), Fun g (S @ z # T))\n                         \\<in> (timpl_closure'_step c)\\<^sup>*", "case (step u s)"], ["proof (state)\nthis:\n  (t, u) \\<in> (timpl_closure'_step c)\\<^sup>*\n  (u, s) \\<in> timpl_closure'_step c\n  (Fun f (S @ t # T), Fun g (S @ u # T))\n  \\<in> (timpl_closure'_step c)\\<^sup>*\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(t, y) \\<in> (timpl_closure'_step c)\\<^sup>*;\n        (y, z) \\<in> timpl_closure'_step c;\n        (Fun f (S @ t # T), Fun g (S @ y # T))\n        \\<in> (timpl_closure'_step c)\\<^sup>*\\<rbrakk>\n       \\<Longrightarrow> (Fun f (S @ t # T), Fun g (S @ z # T))\n                         \\<in> (timpl_closure'_step c)\\<^sup>*", "obtain a b where ab: \"(a,b) \\<in> c\" \"term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) u s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>a b.\n        \\<lbrakk>(a, b) \\<in> c;\n         term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) u\n          s\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using timpl_closure'_step_inv[OF step.hyps(2)]"], ["proof (prove)\nusing this:\n  (\\<And>a b.\n      \\<lbrakk>(a, b) \\<in> c;\n       term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) u s\\<rbrakk>\n      \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>a b.\n        \\<lbrakk>(a, b) \\<in> c;\n         term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) u\n          s\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  (a, b) \\<in> c\n  term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) u s\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(t, y) \\<in> (timpl_closure'_step c)\\<^sup>*;\n        (y, z) \\<in> timpl_closure'_step c;\n        (Fun f (S @ t # T), Fun g (S @ y # T))\n        \\<in> (timpl_closure'_step c)\\<^sup>*\\<rbrakk>\n       \\<Longrightarrow> (Fun f (S @ t # T), Fun g (S @ z # T))\n                         \\<in> (timpl_closure'_step c)\\<^sup>*", "have \"(Fun g (S@u#T), Fun g (S@s#T)) \\<in> timpl_closure'_step c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Fun g (S @ u # T), Fun g (S @ s # T)) \\<in> timpl_closure'_step c", "using ab(1) term_variants_pred_param[OF ab(2), of g g S T]"], ["proof (prove)\nusing this:\n  (a, b) \\<in> c\n  g = g \\<or>\n  g \\<in> set (((\\<lambda>_. [])(Abs a := [Abs b])) g) \\<Longrightarrow>\n  term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b]))\n   (Fun g (S @ u # T)) (Fun g (S @ s # T))\n\ngoal (1 subgoal):\n 1. (Fun g (S @ u # T), Fun g (S @ s # T)) \\<in> timpl_closure'_step c", "by (auto simp add: timpl_closure'_def intro: timpl_closure'_step.intros)"], ["proof (state)\nthis:\n  (Fun g (S @ u # T), Fun g (S @ s # T)) \\<in> timpl_closure'_step c\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(t, y) \\<in> (timpl_closure'_step c)\\<^sup>*;\n        (y, z) \\<in> timpl_closure'_step c;\n        (Fun f (S @ t # T), Fun g (S @ y # T))\n        \\<in> (timpl_closure'_step c)\\<^sup>*\\<rbrakk>\n       \\<Longrightarrow> (Fun f (S @ t # T), Fun g (S @ z # T))\n                         \\<in> (timpl_closure'_step c)\\<^sup>*", "thus ?case"], ["proof (prove)\nusing this:\n  (Fun g (S @ u # T), Fun g (S @ s # T)) \\<in> timpl_closure'_step c\n\ngoal (1 subgoal):\n 1. (Fun f (S @ t # T), Fun g (S @ s # T))\n    \\<in> (timpl_closure'_step c)\\<^sup>*", "using rtrancl_into_rtrancl[OF step.IH] fg"], ["proof (prove)\nusing this:\n  (Fun g (S @ u # T), Fun g (S @ s # T)) \\<in> timpl_closure'_step c\n  (Fun g (S @ u # T), ?c) \\<in> timpl_closure'_step c \\<Longrightarrow>\n  (Fun f (S @ t # T), ?c) \\<in> (timpl_closure'_step c)\\<^sup>*\n  f = g \\<or>\n  (\\<exists>a b. (a, b) \\<in> c \\<and> f = Abs a \\<and> g = Abs b)\n\ngoal (1 subgoal):\n 1. (Fun f (S @ t # T), Fun g (S @ s # T))\n    \\<in> (timpl_closure'_step c)\\<^sup>*", "by blast"], ["proof (state)\nthis:\n  (Fun f (S @ t # T), Fun g (S @ s # T))\n  \\<in> (timpl_closure'_step c)\\<^sup>*\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma timpl_closure'_param':\n  assumes \"(t,s) \\<in> timpl_closure' c\"\n  shows \"(Fun f (S@t#T), Fun f (S@s#T)) \\<in> timpl_closure' c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Fun f (S @ t # T), Fun f (S @ s # T)) \\<in> timpl_closure' c", "using timpl_closure'_param[OF assms]"], ["proof (prove)\nusing this:\n  ?f = ?g \\<or>\n  (\\<exists>a b.\n      (a, b) \\<in> c \\<and> ?f = Abs a \\<and> ?g = Abs b) \\<Longrightarrow>\n  (Fun ?f (?S @ t # ?T), Fun ?g (?S @ s # ?T)) \\<in> timpl_closure' c\n\ngoal (1 subgoal):\n 1. (Fun f (S @ t # T), Fun f (S @ s # T)) \\<in> timpl_closure' c", "by simp"], ["", "lemma timpl_closure_FunI:\n  assumes IH: \"\\<And>i. i < length T \\<Longrightarrow> (T ! i, S ! i) \\<in> timpl_closure' c\"\n    and len: \"length T = length S\"\n    and fg: \"f = g \\<or> (\\<exists>a b. (a,b) \\<in> c\\<^sup>+ \\<and> f = Abs a \\<and> g = Abs b)\"\n  shows \"(Fun f T, Fun g S) \\<in> timpl_closure' c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Fun f T, Fun g S) \\<in> timpl_closure' c", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (Fun f T, Fun g S) \\<in> timpl_closure' c", "have aux: \"(Fun f T, Fun g (take n S@drop n T)) \\<in> timpl_closure' c\"\n    when \"n \\<le> length T\" for n"], ["proof (prove)\ngoal (1 subgoal):\n 1. (Fun f T, Fun g (take n S @ drop n T)) \\<in> timpl_closure' c", "using that"], ["proof (prove)\nusing this:\n  n \\<le> length T\n\ngoal (1 subgoal):\n 1. (Fun f T, Fun g (take n S @ drop n T)) \\<in> timpl_closure' c", "proof (induction n)"], ["proof (state)\ngoal (2 subgoals):\n 1. 0 \\<le> length T \\<Longrightarrow>\n    (Fun f T, Fun g (take 0 S @ drop 0 T)) \\<in> timpl_closure' c\n 2. \\<And>n.\n       \\<lbrakk>n \\<le> length T \\<Longrightarrow>\n                (Fun f T, Fun g (take n S @ drop n T))\n                \\<in> timpl_closure' c;\n        Suc n \\<le> length T\\<rbrakk>\n       \\<Longrightarrow> (Fun f T, Fun g (take (Suc n) S @ drop (Suc n) T))\n                         \\<in> timpl_closure' c", "case 0"], ["proof (state)\nthis:\n  0 \\<le> length T\n\ngoal (2 subgoals):\n 1. 0 \\<le> length T \\<Longrightarrow>\n    (Fun f T, Fun g (take 0 S @ drop 0 T)) \\<in> timpl_closure' c\n 2. \\<And>n.\n       \\<lbrakk>n \\<le> length T \\<Longrightarrow>\n                (Fun f T, Fun g (take n S @ drop n T))\n                \\<in> timpl_closure' c;\n        Suc n \\<le> length T\\<rbrakk>\n       \\<Longrightarrow> (Fun f T, Fun g (take (Suc n) S @ drop (Suc n) T))\n                         \\<in> timpl_closure' c", "have \"(T ! n, T ! n) \\<in> timpl_closure' c\" when n: \"n < length T\" for n"], ["proof (prove)\ngoal (1 subgoal):\n 1. (T ! n, T ! n) \\<in> timpl_closure' c", "using n"], ["proof (prove)\nusing this:\n  n < length T\n\ngoal (1 subgoal):\n 1. (T ! n, T ! n) \\<in> timpl_closure' c", "unfolding timpl_closure'_def"], ["proof (prove)\nusing this:\n  n < length T\n\ngoal (1 subgoal):\n 1. (T ! n, T ! n) \\<in> (timpl_closure'_step c)\\<^sup>*", "by simp"], ["proof (state)\nthis:\n  ?n < length T \\<Longrightarrow> (T ! ?n, T ! ?n) \\<in> timpl_closure' c\n\ngoal (2 subgoals):\n 1. 0 \\<le> length T \\<Longrightarrow>\n    (Fun f T, Fun g (take 0 S @ drop 0 T)) \\<in> timpl_closure' c\n 2. \\<And>n.\n       \\<lbrakk>n \\<le> length T \\<Longrightarrow>\n                (Fun f T, Fun g (take n S @ drop n T))\n                \\<in> timpl_closure' c;\n        Suc n \\<le> length T\\<rbrakk>\n       \\<Longrightarrow> (Fun f T, Fun g (take (Suc n) S @ drop (Suc n) T))\n                         \\<in> timpl_closure' c", "hence \"(Fun f T, Fun g T) \\<in> timpl_closure' c\""], ["proof (prove)\nusing this:\n  ?n < length T \\<Longrightarrow> (T ! ?n, T ! ?n) \\<in> timpl_closure' c\n\ngoal (1 subgoal):\n 1. (Fun f T, Fun g T) \\<in> timpl_closure' c", "proof (cases \"f = g\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>n.\n                n < length T \\<Longrightarrow>\n                (T ! n, T ! n) \\<in> timpl_closure' c;\n     f = g\\<rbrakk>\n    \\<Longrightarrow> (Fun f T, Fun g T) \\<in> timpl_closure' c\n 2. \\<lbrakk>\\<And>n.\n                n < length T \\<Longrightarrow>\n                (T ! n, T ! n) \\<in> timpl_closure' c;\n     f \\<noteq> g\\<rbrakk>\n    \\<Longrightarrow> (Fun f T, Fun g T) \\<in> timpl_closure' c", "case False"], ["proof (state)\nthis:\n  f \\<noteq> g\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>n.\n                n < length T \\<Longrightarrow>\n                (T ! n, T ! n) \\<in> timpl_closure' c;\n     f = g\\<rbrakk>\n    \\<Longrightarrow> (Fun f T, Fun g T) \\<in> timpl_closure' c\n 2. \\<lbrakk>\\<And>n.\n                n < length T \\<Longrightarrow>\n                (T ! n, T ! n) \\<in> timpl_closure' c;\n     f \\<noteq> g\\<rbrakk>\n    \\<Longrightarrow> (Fun f T, Fun g T) \\<in> timpl_closure' c", "then"], ["proof (chain)\npicking this:\n  f \\<noteq> g", "obtain a b where ab: \"(a, b) \\<in> c\\<^sup>+\" \"f = Abs a\" \"g = Abs b\""], ["proof (prove)\nusing this:\n  f \\<noteq> g\n\ngoal (1 subgoal):\n 1. (\\<And>a b.\n        \\<lbrakk>(a, b) \\<in> c\\<^sup>+; f = Abs a; g = Abs b\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using fg"], ["proof (prove)\nusing this:\n  f \\<noteq> g\n  f = g \\<or>\n  (\\<exists>a b. (a, b) \\<in> c\\<^sup>+ \\<and> f = Abs a \\<and> g = Abs b)\n\ngoal (1 subgoal):\n 1. (\\<And>a b.\n        \\<lbrakk>(a, b) \\<in> c\\<^sup>+; f = Abs a; g = Abs b\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by moura"], ["proof (state)\nthis:\n  (a, b) \\<in> c\\<^sup>+\n  f = Abs a\n  g = Abs b\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>n.\n                n < length T \\<Longrightarrow>\n                (T ! n, T ! n) \\<in> timpl_closure' c;\n     f = g\\<rbrakk>\n    \\<Longrightarrow> (Fun f T, Fun g T) \\<in> timpl_closure' c\n 2. \\<lbrakk>\\<And>n.\n                n < length T \\<Longrightarrow>\n                (T ! n, T ! n) \\<in> timpl_closure' c;\n     f \\<noteq> g\\<rbrakk>\n    \\<Longrightarrow> (Fun f T, Fun g T) \\<in> timpl_closure' c", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (Fun f T, Fun g T) \\<in> timpl_closure' c", "using timpl_closure'_step.intros[OF ab(1), of \"Fun f T\" \"Fun g T\"] ab(2,3)\n              term_variants_P[OF _ term_variants_pred_refl[of \"(\\<lambda>_. [])(Abs a := [Abs b])\"],\n                              of T g f]\n              timpl_closure'_timpls_trancl_eq"], ["proof (prove)\nusing this:\n  term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) (Fun f T)\n   (Fun g T) \\<Longrightarrow>\n  (Fun f T, Fun g T) \\<in> timpl_closure'_step (c\\<^sup>+)\n  f = Abs a\n  g = Abs b\n  \\<lbrakk>length T = length T;\n   g \\<in> set (((\\<lambda>_. [])(Abs a := [Abs b])) f)\\<rbrakk>\n  \\<Longrightarrow> term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b]))\n                     (Fun f T) (Fun g T)\n  timpl_closure' (?c\\<^sup>+) = timpl_closure' ?c\n\ngoal (1 subgoal):\n 1. (Fun f T, Fun g T) \\<in> timpl_closure' c", "unfolding timpl_closure'_def"], ["proof (prove)\nusing this:\n  term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) (Fun f T)\n   (Fun g T) \\<Longrightarrow>\n  (Fun f T, Fun g T) \\<in> timpl_closure'_step (c\\<^sup>+)\n  f = Abs a\n  g = Abs b\n  \\<lbrakk>length T = length T;\n   g \\<in> set (((\\<lambda>_. [])(Abs a := [Abs b])) f)\\<rbrakk>\n  \\<Longrightarrow> term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b]))\n                     (Fun f T) (Fun g T)\n  (timpl_closure'_step (?c\\<^sup>+))\\<^sup>* =\n  (timpl_closure'_step ?c)\\<^sup>*\n\ngoal (1 subgoal):\n 1. (Fun f T, Fun g T) \\<in> (timpl_closure'_step c)\\<^sup>*", "by (metis fun_upd_same list.set_intros(1) r_into_rtrancl)"], ["proof (state)\nthis:\n  (Fun f T, Fun g T) \\<in> timpl_closure' c\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>n.\n                n < length T \\<Longrightarrow>\n                (T ! n, T ! n) \\<in> timpl_closure' c;\n     f = g\\<rbrakk>\n    \\<Longrightarrow> (Fun f T, Fun g T) \\<in> timpl_closure' c", "qed (simp add: timpl_closure'_def)"], ["proof (state)\nthis:\n  (Fun f T, Fun g T) \\<in> timpl_closure' c\n\ngoal (2 subgoals):\n 1. 0 \\<le> length T \\<Longrightarrow>\n    (Fun f T, Fun g (take 0 S @ drop 0 T)) \\<in> timpl_closure' c\n 2. \\<And>n.\n       \\<lbrakk>n \\<le> length T \\<Longrightarrow>\n                (Fun f T, Fun g (take n S @ drop n T))\n                \\<in> timpl_closure' c;\n        Suc n \\<le> length T\\<rbrakk>\n       \\<Longrightarrow> (Fun f T, Fun g (take (Suc n) S @ drop (Suc n) T))\n                         \\<in> timpl_closure' c", "thus ?case"], ["proof (prove)\nusing this:\n  (Fun f T, Fun g T) \\<in> timpl_closure' c\n\ngoal (1 subgoal):\n 1. (Fun f T, Fun g (take 0 S @ drop 0 T)) \\<in> timpl_closure' c", "by simp"], ["proof (state)\nthis:\n  (Fun f T, Fun g (take 0 S @ drop 0 T)) \\<in> timpl_closure' c\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>n \\<le> length T \\<Longrightarrow>\n                (Fun f T, Fun g (take n S @ drop n T))\n                \\<in> timpl_closure' c;\n        Suc n \\<le> length T\\<rbrakk>\n       \\<Longrightarrow> (Fun f T, Fun g (take (Suc n) S @ drop (Suc n) T))\n                         \\<in> timpl_closure' c", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>n \\<le> length T \\<Longrightarrow>\n                (Fun f T, Fun g (take n S @ drop n T))\n                \\<in> timpl_closure' c;\n        Suc n \\<le> length T\\<rbrakk>\n       \\<Longrightarrow> (Fun f T, Fun g (take (Suc n) S @ drop (Suc n) T))\n                         \\<in> timpl_closure' c", "case (Suc n)"], ["proof (state)\nthis:\n  n \\<le> length T \\<Longrightarrow>\n  (Fun f T, Fun g (take n S @ drop n T)) \\<in> timpl_closure' c\n  Suc n \\<le> length T\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>n \\<le> length T \\<Longrightarrow>\n                (Fun f T, Fun g (take n S @ drop n T))\n                \\<in> timpl_closure' c;\n        Suc n \\<le> length T\\<rbrakk>\n       \\<Longrightarrow> (Fun f T, Fun g (take (Suc n) S @ drop (Suc n) T))\n                         \\<in> timpl_closure' c", "hence IH': \"(Fun f T, Fun g (take n S@drop n T)) \\<in> timpl_closure' c\"\n      and n: \"n < length T\" \"n < length S\""], ["proof (prove)\nusing this:\n  n \\<le> length T \\<Longrightarrow>\n  (Fun f T, Fun g (take n S @ drop n T)) \\<in> timpl_closure' c\n  Suc n \\<le> length T\n\ngoal (1 subgoal):\n 1. (Fun f T, Fun g (take n S @ drop n T)) \\<in> timpl_closure' c &&&\n    n < length T &&& n < length S", "by (simp_all add: len)"], ["proof (state)\nthis:\n  (Fun f T, Fun g (take n S @ drop n T)) \\<in> timpl_closure' c\n  n < length T\n  n < length S\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>n \\<le> length T \\<Longrightarrow>\n                (Fun f T, Fun g (take n S @ drop n T))\n                \\<in> timpl_closure' c;\n        Suc n \\<le> length T\\<rbrakk>\n       \\<Longrightarrow> (Fun f T, Fun g (take (Suc n) S @ drop (Suc n) T))\n                         \\<in> timpl_closure' c", "obtain T1 T2 where T: \"T = T1@T ! n#T2\" \"length T1 = n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>T1 T2.\n        \\<lbrakk>T = T1 @ T ! n # T2; length T1 = n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using length_prefix_ex'[OF n(1)]"], ["proof (prove)\nusing this:\n  \\<exists>ys zs. T = ys @ T ! n # zs \\<and> length ys = n\n\ngoal (1 subgoal):\n 1. (\\<And>T1 T2.\n        \\<lbrakk>T = T1 @ T ! n # T2; length T1 = n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  T = T1 @ T ! n # T2\n  length T1 = n\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>n \\<le> length T \\<Longrightarrow>\n                (Fun f T, Fun g (take n S @ drop n T))\n                \\<in> timpl_closure' c;\n        Suc n \\<le> length T\\<rbrakk>\n       \\<Longrightarrow> (Fun f T, Fun g (take (Suc n) S @ drop (Suc n) T))\n                         \\<in> timpl_closure' c", "obtain S1 S2 where S: \"S = S1@S ! n#S2\" \"length S1 = n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>S1 S2.\n        \\<lbrakk>S = S1 @ S ! n # S2; length S1 = n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using length_prefix_ex'[OF n(2)]"], ["proof (prove)\nusing this:\n  \\<exists>ys zs. S = ys @ S ! n # zs \\<and> length ys = n\n\ngoal (1 subgoal):\n 1. (\\<And>S1 S2.\n        \\<lbrakk>S = S1 @ S ! n # S2; length S1 = n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  S = S1 @ S ! n # S2\n  length S1 = n\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>n \\<le> length T \\<Longrightarrow>\n                (Fun f T, Fun g (take n S @ drop n T))\n                \\<in> timpl_closure' c;\n        Suc n \\<le> length T\\<rbrakk>\n       \\<Longrightarrow> (Fun f T, Fun g (take (Suc n) S @ drop (Suc n) T))\n                         \\<in> timpl_closure' c", "have \"take n S@drop n T = S1@T ! n#T2\" \"take (Suc n) S@drop (Suc n) T = S1@S ! n#T2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. take n S @ drop n T = S1 @ T ! n # T2 &&&\n    take (Suc n) S @ drop (Suc n) T = S1 @ S ! n # T2", "using n T S append_eq_conv_conj"], ["proof (prove)\nusing this:\n  n < length T\n  n < length S\n  T = T1 @ T ! n # T2\n  length T1 = n\n  S = S1 @ S ! n # S2\n  length S1 = n\n  (?xs @ ?ys = ?zs) =\n  (?xs = take (length ?xs) ?zs \\<and> ?ys = drop (length ?xs) ?zs)\n\ngoal (1 subgoal):\n 1. take n S @ drop n T = S1 @ T ! n # T2 &&&\n    take (Suc n) S @ drop (Suc n) T = S1 @ S ! n # T2", "by (metis, metis (no_types, hide_lams) Cons_nth_drop_Suc append.assoc append_Cons\n                                             append_Nil take_Suc_conv_app_nth)"], ["proof (state)\nthis:\n  take n S @ drop n T = S1 @ T ! n # T2\n  take (Suc n) S @ drop (Suc n) T = S1 @ S ! n # T2\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>n \\<le> length T \\<Longrightarrow>\n                (Fun f T, Fun g (take n S @ drop n T))\n                \\<in> timpl_closure' c;\n        Suc n \\<le> length T\\<rbrakk>\n       \\<Longrightarrow> (Fun f T, Fun g (take (Suc n) S @ drop (Suc n) T))\n                         \\<in> timpl_closure' c", "moreover"], ["proof (state)\nthis:\n  take n S @ drop n T = S1 @ T ! n # T2\n  take (Suc n) S @ drop (Suc n) T = S1 @ S ! n # T2\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>n \\<le> length T \\<Longrightarrow>\n                (Fun f T, Fun g (take n S @ drop n T))\n                \\<in> timpl_closure' c;\n        Suc n \\<le> length T\\<rbrakk>\n       \\<Longrightarrow> (Fun f T, Fun g (take (Suc n) S @ drop (Suc n) T))\n                         \\<in> timpl_closure' c", "have \"(T ! n, S ! n) \\<in> timpl_closure' c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (T ! n, S ! n) \\<in> timpl_closure' c", "using IH Suc.prems"], ["proof (prove)\nusing this:\n  ?i < length T \\<Longrightarrow> (T ! ?i, S ! ?i) \\<in> timpl_closure' c\n  Suc n \\<le> length T\n\ngoal (1 subgoal):\n 1. (T ! n, S ! n) \\<in> timpl_closure' c", "by simp"], ["proof (state)\nthis:\n  (T ! n, S ! n) \\<in> timpl_closure' c\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>n \\<le> length T \\<Longrightarrow>\n                (Fun f T, Fun g (take n S @ drop n T))\n                \\<in> timpl_closure' c;\n        Suc n \\<le> length T\\<rbrakk>\n       \\<Longrightarrow> (Fun f T, Fun g (take (Suc n) S @ drop (Suc n) T))\n                         \\<in> timpl_closure' c", "ultimately"], ["proof (chain)\npicking this:\n  take n S @ drop n T = S1 @ T ! n # T2\n  take (Suc n) S @ drop (Suc n) T = S1 @ S ! n # T2\n  (T ! n, S ! n) \\<in> timpl_closure' c", "show ?case"], ["proof (prove)\nusing this:\n  take n S @ drop n T = S1 @ T ! n # T2\n  take (Suc n) S @ drop (Suc n) T = S1 @ S ! n # T2\n  (T ! n, S ! n) \\<in> timpl_closure' c\n\ngoal (1 subgoal):\n 1. (Fun f T, Fun g (take (Suc n) S @ drop (Suc n) T))\n    \\<in> timpl_closure' c", "using timpl_closure'_param IH'(1)"], ["proof (prove)\nusing this:\n  take n S @ drop n T = S1 @ T ! n # T2\n  take (Suc n) S @ drop (Suc n) T = S1 @ S ! n # T2\n  (T ! n, S ! n) \\<in> timpl_closure' c\n  \\<lbrakk>(?t, ?s) \\<in> timpl_closure' ?c;\n   ?f = ?g \\<or>\n   (\\<exists>a b.\n       (a, b) \\<in> ?c \\<and> ?f = Abs a \\<and> ?g = Abs b)\\<rbrakk>\n  \\<Longrightarrow> (Fun ?f (?S @ ?t # ?T), Fun ?g (?S @ ?s # ?T))\n                    \\<in> timpl_closure' ?c\n  (Fun f T, Fun g (take n S @ drop n T)) \\<in> timpl_closure' c\n\ngoal (1 subgoal):\n 1. (Fun f T, Fun g (take (Suc n) S @ drop (Suc n) T))\n    \\<in> timpl_closure' c", "by (metis (no_types, lifting) timpl_closure'_def rtrancl_trans)"], ["proof (state)\nthis:\n  (Fun f T, Fun g (take (Suc n) S @ drop (Suc n) T)) \\<in> timpl_closure' c\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?n \\<le> length T \\<Longrightarrow>\n  (Fun f T, Fun g (take ?n S @ drop ?n T)) \\<in> timpl_closure' c\n\ngoal (1 subgoal):\n 1. (Fun f T, Fun g S) \\<in> timpl_closure' c", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (Fun f T, Fun g S) \\<in> timpl_closure' c", "using aux[of \"length T\"] len"], ["proof (prove)\nusing this:\n  length T \\<le> length T \\<Longrightarrow>\n  (Fun f T, Fun g (take (length T) S @ drop (length T) T))\n  \\<in> timpl_closure' c\n  length T = length S\n\ngoal (1 subgoal):\n 1. (Fun f T, Fun g S) \\<in> timpl_closure' c", "by simp"], ["proof (state)\nthis:\n  (Fun f T, Fun g S) \\<in> timpl_closure' c\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma timpl_closure_FunI':\n  assumes IH: \"\\<And>i. i < length T \\<Longrightarrow> (T ! i, S ! i) \\<in> timpl_closure' c\"\n    and len: \"length T = length S\"\n  shows \"(Fun f T, Fun f S) \\<in> timpl_closure' c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Fun f T, Fun f S) \\<in> timpl_closure' c", "using timpl_closure_FunI[OF IH len]"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>i. i < length T \\<Longrightarrow> i < length T;\n   ?f = ?g \\<or>\n   (\\<exists>a b.\n       (a, b) \\<in> c\\<^sup>+ \\<and> ?f = Abs a \\<and> ?g = Abs b)\\<rbrakk>\n  \\<Longrightarrow> (Fun ?f T, Fun ?g S) \\<in> timpl_closure' c\n\ngoal (1 subgoal):\n 1. (Fun f T, Fun f S) \\<in> timpl_closure' c", "by simp"], ["", "lemma timpl_closure_FunI2:\n  fixes f g::\"('a, 'b, 'c) prot_fun\"\n  assumes IH: \"\\<And>i. i < length T \\<Longrightarrow> \\<exists>u. (T!i, u) \\<in> timpl_closure' c \\<and> (S!i, u) \\<in> timpl_closure' c\"\n    and len: \"length T = length S\"\n    and fg: \"f = g \\<or> (\\<exists>a b d. (a, d) \\<in> c\\<^sup>+ \\<and> (b, d) \\<in> c\\<^sup>+ \\<and> f = Abs a \\<and> g = Abs b)\"\n  shows \"\\<exists>h U. (Fun f T, Fun h U) \\<in> timpl_closure' c \\<and> (Fun g S, Fun h U) \\<in> timpl_closure' c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>h U.\n       (Fun f T, Fun h U) \\<in> timpl_closure' c \\<and>\n       (Fun g S, Fun h U) \\<in> timpl_closure' c", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>h U.\n       (Fun f T, Fun h U) \\<in> timpl_closure' c \\<and>\n       (Fun g S, Fun h U) \\<in> timpl_closure' c", "let ?P = \"\\<lambda>i u. (T ! i, u) \\<in> timpl_closure' c \\<and> (S ! i, u) \\<in> timpl_closure' c\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>h U.\n       (Fun f T, Fun h U) \\<in> timpl_closure' c \\<and>\n       (Fun g S, Fun h U) \\<in> timpl_closure' c", "define U where \"U \\<equiv> map (\\<lambda>i. SOME u. ?P i u) [0..<length T]\""], ["proof (state)\nthis:\n  U \\<equiv>\n  map (\\<lambda>i.\n          SOME u.\n             (T ! i, u) \\<in> timpl_closure' c \\<and>\n             (S ! i, u) \\<in> timpl_closure' c)\n   [0..<length T]\n\ngoal (1 subgoal):\n 1. \\<exists>h U.\n       (Fun f T, Fun h U) \\<in> timpl_closure' c \\<and>\n       (Fun g S, Fun h U) \\<in> timpl_closure' c", "have U1: \"length U = length T\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length U = length T", "unfolding U_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. length\n     (map (\\<lambda>i.\n              SOME u.\n                 (T ! i, u) \\<in> timpl_closure' c \\<and>\n                 (S ! i, u) \\<in> timpl_closure' c)\n       [0..<length T]) =\n    length T", "by auto"], ["proof (state)\nthis:\n  length U = length T\n\ngoal (1 subgoal):\n 1. \\<exists>h U.\n       (Fun f T, Fun h U) \\<in> timpl_closure' c \\<and>\n       (Fun g S, Fun h U) \\<in> timpl_closure' c", "have U2: \"(T ! i, U ! i) \\<in> timpl_closure' c \\<and> (S ! i, U ! i) \\<in> timpl_closure' c\"\n    when i: \"i < length U\" for i"], ["proof (prove)\ngoal (1 subgoal):\n 1. (T ! i, U ! i) \\<in> timpl_closure' c \\<and>\n    (S ! i, U ! i) \\<in> timpl_closure' c", "using i someI_ex[of \"?P i\"] IH[of i] U1 len"], ["proof (prove)\nusing this:\n  i < length U\n  \\<exists>x.\n     (T ! i, x) \\<in> timpl_closure' c \\<and>\n     (S ! i, x) \\<in> timpl_closure' c \\<Longrightarrow>\n  (T ! i,\n   SOME x.\n      (T ! i, x) \\<in> timpl_closure' c \\<and>\n      (S ! i, x) \\<in> timpl_closure' c)\n  \\<in> timpl_closure' c \\<and>\n  (S ! i,\n   SOME x.\n      (T ! i, x) \\<in> timpl_closure' c \\<and>\n      (S ! i, x) \\<in> timpl_closure' c)\n  \\<in> timpl_closure' c\n  i < length T \\<Longrightarrow>\n  \\<exists>u.\n     (T ! i, u) \\<in> timpl_closure' c \\<and>\n     (S ! i, u) \\<in> timpl_closure' c\n  length U = length T\n  length T = length S\n\ngoal (1 subgoal):\n 1. (T ! i, U ! i) \\<in> timpl_closure' c \\<and>\n    (S ! i, U ! i) \\<in> timpl_closure' c", "unfolding U_def"], ["proof (prove)\nusing this:\n  i < length\n       (map (\\<lambda>i.\n                SOME u.\n                   (T ! i, u) \\<in> timpl_closure' c \\<and>\n                   (S ! i, u) \\<in> timpl_closure' c)\n         [0..<length T])\n  \\<exists>x.\n     (T ! i, x) \\<in> timpl_closure' c \\<and>\n     (S ! i, x) \\<in> timpl_closure' c \\<Longrightarrow>\n  (T ! i,\n   SOME x.\n      (T ! i, x) \\<in> timpl_closure' c \\<and>\n      (S ! i, x) \\<in> timpl_closure' c)\n  \\<in> timpl_closure' c \\<and>\n  (S ! i,\n   SOME x.\n      (T ! i, x) \\<in> timpl_closure' c \\<and>\n      (S ! i, x) \\<in> timpl_closure' c)\n  \\<in> timpl_closure' c\n  i < length T \\<Longrightarrow>\n  \\<exists>u.\n     (T ! i, u) \\<in> timpl_closure' c \\<and>\n     (S ! i, u) \\<in> timpl_closure' c\n  length\n   (map (\\<lambda>i.\n            SOME u.\n               (T ! i, u) \\<in> timpl_closure' c \\<and>\n               (S ! i, u) \\<in> timpl_closure' c)\n     [0..<length T]) =\n  length T\n  length T = length S\n\ngoal (1 subgoal):\n 1. (T ! i,\n     map (\\<lambda>i.\n             SOME u.\n                (T ! i, u) \\<in> timpl_closure' c \\<and>\n                (S ! i, u) \\<in> timpl_closure' c)\n      [0..<length T] !\n     i)\n    \\<in> timpl_closure' c \\<and>\n    (S ! i,\n     map (\\<lambda>i.\n             SOME u.\n                (T ! i, u) \\<in> timpl_closure' c \\<and>\n                (S ! i, u) \\<in> timpl_closure' c)\n      [0..<length T] !\n     i)\n    \\<in> timpl_closure' c", "by simp"], ["proof (state)\nthis:\n  ?i < length U \\<Longrightarrow>\n  (T ! ?i, U ! ?i) \\<in> timpl_closure' c \\<and>\n  (S ! ?i, U ! ?i) \\<in> timpl_closure' c\n\ngoal (1 subgoal):\n 1. \\<exists>h U.\n       (Fun f T, Fun h U) \\<in> timpl_closure' c \\<and>\n       (Fun g S, Fun h U) \\<in> timpl_closure' c", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>h U.\n       (Fun f T, Fun h U) \\<in> timpl_closure' c \\<and>\n       (Fun g S, Fun h U) \\<in> timpl_closure' c", "proof (cases \"f = g\")"], ["proof (state)\ngoal (2 subgoals):\n 1. f = g \\<Longrightarrow>\n    \\<exists>h U.\n       (Fun f T, Fun h U) \\<in> timpl_closure' c \\<and>\n       (Fun g S, Fun h U) \\<in> timpl_closure' c\n 2. f \\<noteq> g \\<Longrightarrow>\n    \\<exists>h U.\n       (Fun f T, Fun h U) \\<in> timpl_closure' c \\<and>\n       (Fun g S, Fun h U) \\<in> timpl_closure' c", "case False"], ["proof (state)\nthis:\n  f \\<noteq> g\n\ngoal (2 subgoals):\n 1. f = g \\<Longrightarrow>\n    \\<exists>h U.\n       (Fun f T, Fun h U) \\<in> timpl_closure' c \\<and>\n       (Fun g S, Fun h U) \\<in> timpl_closure' c\n 2. f \\<noteq> g \\<Longrightarrow>\n    \\<exists>h U.\n       (Fun f T, Fun h U) \\<in> timpl_closure' c \\<and>\n       (Fun g S, Fun h U) \\<in> timpl_closure' c", "then"], ["proof (chain)\npicking this:\n  f \\<noteq> g", "obtain a b d where abd: \"(a, d) \\<in> c\\<^sup>+\" \"(b, d) \\<in> c\\<^sup>+\" \"f = Abs a\" \"g = Abs b\""], ["proof (prove)\nusing this:\n  f \\<noteq> g\n\ngoal (1 subgoal):\n 1. (\\<And>a d b.\n        \\<lbrakk>(a, d) \\<in> c\\<^sup>+; (b, d) \\<in> c\\<^sup>+; f = Abs a;\n         g = Abs b\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using fg"], ["proof (prove)\nusing this:\n  f \\<noteq> g\n  f = g \\<or>\n  (\\<exists>a b d.\n      (a, d) \\<in> c\\<^sup>+ \\<and>\n      (b, d) \\<in> c\\<^sup>+ \\<and> f = Abs a \\<and> g = Abs b)\n\ngoal (1 subgoal):\n 1. (\\<And>a d b.\n        \\<lbrakk>(a, d) \\<in> c\\<^sup>+; (b, d) \\<in> c\\<^sup>+; f = Abs a;\n         g = Abs b\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by moura"], ["proof (state)\nthis:\n  (a, d) \\<in> c\\<^sup>+\n  (b, d) \\<in> c\\<^sup>+\n  f = Abs a\n  g = Abs b\n\ngoal (2 subgoals):\n 1. f = g \\<Longrightarrow>\n    \\<exists>h U.\n       (Fun f T, Fun h U) \\<in> timpl_closure' c \\<and>\n       (Fun g S, Fun h U) \\<in> timpl_closure' c\n 2. f \\<noteq> g \\<Longrightarrow>\n    \\<exists>h U.\n       (Fun f T, Fun h U) \\<in> timpl_closure' c \\<and>\n       (Fun g S, Fun h U) \\<in> timpl_closure' c", "define h::\"('a, 'b, 'c) prot_fun\" where \"h = Abs d\""], ["proof (state)\nthis:\n  h = Abs d\n\ngoal (2 subgoals):\n 1. f = g \\<Longrightarrow>\n    \\<exists>h U.\n       (Fun f T, Fun h U) \\<in> timpl_closure' c \\<and>\n       (Fun g S, Fun h U) \\<in> timpl_closure' c\n 2. f \\<noteq> g \\<Longrightarrow>\n    \\<exists>h U.\n       (Fun f T, Fun h U) \\<in> timpl_closure' c \\<and>\n       (Fun g S, Fun h U) \\<in> timpl_closure' c", "have \"f = h \\<or> (\\<exists>a b. (a, b) \\<in> c\\<^sup>+ \\<and> f = Abs a \\<and> h = Abs b)\"\n         \"g = h \\<or> (\\<exists>a b. (a, b) \\<in> c\\<^sup>+ \\<and> g = Abs a \\<and> h = Abs b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f = h \\<or>\n    (\\<exists>a b.\n        (a, b) \\<in> c\\<^sup>+ \\<and> f = Abs a \\<and> h = Abs b) &&&\n    g = h \\<or>\n    (\\<exists>a b. (a, b) \\<in> c\\<^sup>+ \\<and> g = Abs a \\<and> h = Abs b)", "using abd"], ["proof (prove)\nusing this:\n  (a, d) \\<in> c\\<^sup>+\n  (b, d) \\<in> c\\<^sup>+\n  f = Abs a\n  g = Abs b\n\ngoal (1 subgoal):\n 1. f = h \\<or>\n    (\\<exists>a b.\n        (a, b) \\<in> c\\<^sup>+ \\<and> f = Abs a \\<and> h = Abs b) &&&\n    g = h \\<or>\n    (\\<exists>a b. (a, b) \\<in> c\\<^sup>+ \\<and> g = Abs a \\<and> h = Abs b)", "unfolding h_def"], ["proof (prove)\nusing this:\n  (a, d) \\<in> c\\<^sup>+\n  (b, d) \\<in> c\\<^sup>+\n  f = Abs a\n  g = Abs b\n\ngoal (1 subgoal):\n 1. f = Abs d \\<or>\n    (\\<exists>a b.\n        (a, b) \\<in> c\\<^sup>+ \\<and> f = Abs a \\<and> Abs d = Abs b) &&&\n    g = Abs d \\<or>\n    (\\<exists>a b.\n        (a, b) \\<in> c\\<^sup>+ \\<and> g = Abs a \\<and> Abs d = Abs b)", "by blast+"], ["proof (state)\nthis:\n  f = h \\<or>\n  (\\<exists>a b. (a, b) \\<in> c\\<^sup>+ \\<and> f = Abs a \\<and> h = Abs b)\n  g = h \\<or>\n  (\\<exists>a b. (a, b) \\<in> c\\<^sup>+ \\<and> g = Abs a \\<and> h = Abs b)\n\ngoal (2 subgoals):\n 1. f = g \\<Longrightarrow>\n    \\<exists>h U.\n       (Fun f T, Fun h U) \\<in> timpl_closure' c \\<and>\n       (Fun g S, Fun h U) \\<in> timpl_closure' c\n 2. f \\<noteq> g \\<Longrightarrow>\n    \\<exists>h U.\n       (Fun f T, Fun h U) \\<in> timpl_closure' c \\<and>\n       (Fun g S, Fun h U) \\<in> timpl_closure' c", "thus ?thesis"], ["proof (prove)\nusing this:\n  f = h \\<or>\n  (\\<exists>a b. (a, b) \\<in> c\\<^sup>+ \\<and> f = Abs a \\<and> h = Abs b)\n  g = h \\<or>\n  (\\<exists>a b. (a, b) \\<in> c\\<^sup>+ \\<and> g = Abs a \\<and> h = Abs b)\n\ngoal (1 subgoal):\n 1. \\<exists>h U.\n       (Fun f T, Fun h U) \\<in> timpl_closure' c \\<and>\n       (Fun g S, Fun h U) \\<in> timpl_closure' c", "by (metis timpl_closure_FunI len U1 U2)"], ["proof (state)\nthis:\n  \\<exists>h U.\n     (Fun f T, Fun h U) \\<in> timpl_closure' c \\<and>\n     (Fun g S, Fun h U) \\<in> timpl_closure' c\n\ngoal (1 subgoal):\n 1. f = g \\<Longrightarrow>\n    \\<exists>h U.\n       (Fun f T, Fun h U) \\<in> timpl_closure' c \\<and>\n       (Fun g S, Fun h U) \\<in> timpl_closure' c", "qed (metis timpl_closure_FunI' len U1 U2)"], ["proof (state)\nthis:\n  \\<exists>h U.\n     (Fun f T, Fun h U) \\<in> timpl_closure' c \\<and>\n     (Fun g S, Fun h U) \\<in> timpl_closure' c\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma timpl_closure_FunI3:\n  fixes f g::\"('a, 'b, 'c) prot_fun\"\n  assumes IH: \"\\<And>i. i < length T \\<Longrightarrow> \\<exists>u. (T!i, u) \\<in> timpl_closure' c \\<and> (S!i, u) \\<in> timpl_closure' c\"\n    and len: \"length T = length S\"\n    and fg: \"f = g \\<or> (\\<exists>a b d. (a, d) \\<in> c \\<and> (b, d) \\<in> c \\<and> f = Abs a \\<and> g = Abs b)\"\n  shows \"\\<exists>h U. (Fun f T, Fun h U) \\<in> timpl_closure' c \\<and> (Fun g S, Fun h U) \\<in> timpl_closure' c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>h U.\n       (Fun f T, Fun h U) \\<in> timpl_closure' c \\<and>\n       (Fun g S, Fun h U) \\<in> timpl_closure' c", "using timpl_closure_FunI2[OF IH len] fg"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>i. i < length T \\<Longrightarrow> i < length T;\n   ?f = ?g \\<or>\n   (\\<exists>a b d.\n       (a, d) \\<in> c\\<^sup>+ \\<and>\n       (b, d) \\<in> c\\<^sup>+ \\<and> ?f = Abs a \\<and> ?g = Abs b)\\<rbrakk>\n  \\<Longrightarrow> \\<exists>h U.\n                       (Fun ?f T, Fun h U) \\<in> timpl_closure' c \\<and>\n                       (Fun ?g S, Fun h U) \\<in> timpl_closure' c\n  f = g \\<or>\n  (\\<exists>a b d.\n      (a, d) \\<in> c \\<and>\n      (b, d) \\<in> c \\<and> f = Abs a \\<and> g = Abs b)\n\ngoal (1 subgoal):\n 1. \\<exists>h U.\n       (Fun f T, Fun h U) \\<in> timpl_closure' c \\<and>\n       (Fun g S, Fun h U) \\<in> timpl_closure' c", "unfolding timpl_closure'_timpls_trancl_eq"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>i. i < length T \\<Longrightarrow> i < length T;\n   ?f = ?g \\<or>\n   (\\<exists>a b d.\n       (a, d) \\<in> c\\<^sup>+ \\<and>\n       (b, d) \\<in> c\\<^sup>+ \\<and> ?f = Abs a \\<and> ?g = Abs b)\\<rbrakk>\n  \\<Longrightarrow> \\<exists>h U.\n                       (Fun ?f T, Fun h U) \\<in> timpl_closure' c \\<and>\n                       (Fun ?g S, Fun h U) \\<in> timpl_closure' c\n  f = g \\<or>\n  (\\<exists>a b d.\n      (a, d) \\<in> c \\<and>\n      (b, d) \\<in> c \\<and> f = Abs a \\<and> g = Abs b)\n\ngoal (1 subgoal):\n 1. \\<exists>h U.\n       (Fun f T, Fun h U) \\<in> timpl_closure' c \\<and>\n       (Fun g S, Fun h U) \\<in> timpl_closure' c", "by blast"], ["", "lemma timpl_closure_fv_eq:\n  assumes \"s \\<in> timpl_closure t T\"\n  shows \"fv s = fv t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fv s = fv t", "using assms"], ["proof (prove)\nusing this:\n  s \\<in> timpl_closure t T\n\ngoal (1 subgoal):\n 1. fv s = fv t", "by (induct rule: timpl_closure.induct)\n   (metis, metis term_variants_pred_fv_eq)"], ["", "lemma (in stateful_protocol_model) timpl_closure_subst:\n  assumes t: \"wf\\<^sub>t\\<^sub>r\\<^sub>m t\" \"\\<forall>x \\<in> fv t. \\<exists>a. \\<Gamma>\\<^sub>v x = TAtom (Atom a)\"\n    and \\<delta>: \"wt\\<^sub>s\\<^sub>u\\<^sub>b\\<^sub>s\\<^sub>t \\<delta>\" \"wf\\<^sub>t\\<^sub>r\\<^sub>m\\<^sub>s (subst_range \\<delta>)\"\n  shows \"timpl_closure (t \\<cdot> \\<delta>) T = timpl_closure t T \\<cdot>\\<^sub>s\\<^sub>e\\<^sub>t \\<delta>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. timpl_closure (t \\<cdot> \\<delta>) T =\n    timpl_closure t T \\<cdot>\\<^sub>s\\<^sub>e\\<^sub>t \\<delta>", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. timpl_closure (t \\<cdot> \\<delta>) T\n    \\<subseteq> timpl_closure t T \\<cdot>\\<^sub>s\\<^sub>e\\<^sub>t \\<delta>\n 2. timpl_closure t T \\<cdot>\\<^sub>s\\<^sub>e\\<^sub>t \\<delta>\n    \\<subseteq> timpl_closure (t \\<cdot> \\<delta>) T", "have \"s \\<in> timpl_closure t T \\<cdot>\\<^sub>s\\<^sub>e\\<^sub>t \\<delta>\"\n    when \"s \\<in> timpl_closure (t \\<cdot> \\<delta>) T\" for s"], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<in> timpl_closure t T \\<cdot>\\<^sub>s\\<^sub>e\\<^sub>t \\<delta>", "using that"], ["proof (prove)\nusing this:\n  s \\<in> timpl_closure (t \\<cdot> \\<delta>) T\n\ngoal (1 subgoal):\n 1. s \\<in> timpl_closure t T \\<cdot>\\<^sub>s\\<^sub>e\\<^sub>t \\<delta>", "proof (induction s rule: timpl_closure.induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. t \\<cdot> \\<delta>\n    \\<in> timpl_closure t T \\<cdot>\\<^sub>s\\<^sub>e\\<^sub>t \\<delta>\n 2. \\<And>u a b s.\n       \\<lbrakk>u \\<in> timpl_closure (t \\<cdot> \\<delta>) T;\n        u \\<in> timpl_closure t T \\<cdot>\\<^sub>s\\<^sub>e\\<^sub>t \\<delta>;\n        (a, b) \\<in> T;\n        term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) u s\\<rbrakk>\n       \\<Longrightarrow> s \\<in> timpl_closure t\n                                  T \\<cdot>\\<^sub>s\\<^sub>e\\<^sub>t\n                                 \\<delta>", "case FP"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. t \\<cdot> \\<delta>\n    \\<in> timpl_closure t T \\<cdot>\\<^sub>s\\<^sub>e\\<^sub>t \\<delta>\n 2. \\<And>u a b s.\n       \\<lbrakk>u \\<in> timpl_closure (t \\<cdot> \\<delta>) T;\n        u \\<in> timpl_closure t T \\<cdot>\\<^sub>s\\<^sub>e\\<^sub>t \\<delta>;\n        (a, b) \\<in> T;\n        term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) u s\\<rbrakk>\n       \\<Longrightarrow> s \\<in> timpl_closure t\n                                  T \\<cdot>\\<^sub>s\\<^sub>e\\<^sub>t\n                                 \\<delta>", "thus ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. t \\<cdot> \\<delta>\n    \\<in> timpl_closure t T \\<cdot>\\<^sub>s\\<^sub>e\\<^sub>t \\<delta>", "using timpl_closure.FP[of t T]"], ["proof (prove)\nusing this:\n  t \\<in> timpl_closure t T\n\ngoal (1 subgoal):\n 1. t \\<cdot> \\<delta>\n    \\<in> timpl_closure t T \\<cdot>\\<^sub>s\\<^sub>e\\<^sub>t \\<delta>", "by simp"], ["proof (state)\nthis:\n  t \\<cdot> \\<delta>\n  \\<in> timpl_closure t T \\<cdot>\\<^sub>s\\<^sub>e\\<^sub>t \\<delta>\n\ngoal (1 subgoal):\n 1. \\<And>u a b s.\n       \\<lbrakk>u \\<in> timpl_closure (t \\<cdot> \\<delta>) T;\n        u \\<in> timpl_closure t T \\<cdot>\\<^sub>s\\<^sub>e\\<^sub>t \\<delta>;\n        (a, b) \\<in> T;\n        term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) u s\\<rbrakk>\n       \\<Longrightarrow> s \\<in> timpl_closure t\n                                  T \\<cdot>\\<^sub>s\\<^sub>e\\<^sub>t\n                                 \\<delta>", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u a b s.\n       \\<lbrakk>u \\<in> timpl_closure (t \\<cdot> \\<delta>) T;\n        u \\<in> timpl_closure t T \\<cdot>\\<^sub>s\\<^sub>e\\<^sub>t \\<delta>;\n        (a, b) \\<in> T;\n        term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) u s\\<rbrakk>\n       \\<Longrightarrow> s \\<in> timpl_closure t\n                                  T \\<cdot>\\<^sub>s\\<^sub>e\\<^sub>t\n                                 \\<delta>", "case (TI u a b s)"], ["proof (state)\nthis:\n  u \\<in> timpl_closure (t \\<cdot> \\<delta>) T\n  (a, b) \\<in> T\n  term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) u s\n  u \\<in> timpl_closure t T \\<cdot>\\<^sub>s\\<^sub>e\\<^sub>t \\<delta>\n\ngoal (1 subgoal):\n 1. \\<And>u a b s.\n       \\<lbrakk>u \\<in> timpl_closure (t \\<cdot> \\<delta>) T;\n        u \\<in> timpl_closure t T \\<cdot>\\<^sub>s\\<^sub>e\\<^sub>t \\<delta>;\n        (a, b) \\<in> T;\n        term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) u s\\<rbrakk>\n       \\<Longrightarrow> s \\<in> timpl_closure t\n                                  T \\<cdot>\\<^sub>s\\<^sub>e\\<^sub>t\n                                 \\<delta>", "then"], ["proof (chain)\npicking this:\n  u \\<in> timpl_closure (t \\<cdot> \\<delta>) T\n  (a, b) \\<in> T\n  term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) u s\n  u \\<in> timpl_closure t T \\<cdot>\\<^sub>s\\<^sub>e\\<^sub>t \\<delta>", "obtain u' where u': \"u' \\<in> timpl_closure t T\" \"u = u' \\<cdot> \\<delta>\""], ["proof (prove)\nusing this:\n  u \\<in> timpl_closure (t \\<cdot> \\<delta>) T\n  (a, b) \\<in> T\n  term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) u s\n  u \\<in> timpl_closure t T \\<cdot>\\<^sub>s\\<^sub>e\\<^sub>t \\<delta>\n\ngoal (1 subgoal):\n 1. (\\<And>u'.\n        \\<lbrakk>u' \\<in> timpl_closure t T;\n         u = u' \\<cdot> \\<delta>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by moura"], ["proof (state)\nthis:\n  u' \\<in> timpl_closure t T\n  u = u' \\<cdot> \\<delta>\n\ngoal (1 subgoal):\n 1. \\<And>u a b s.\n       \\<lbrakk>u \\<in> timpl_closure (t \\<cdot> \\<delta>) T;\n        u \\<in> timpl_closure t T \\<cdot>\\<^sub>s\\<^sub>e\\<^sub>t \\<delta>;\n        (a, b) \\<in> T;\n        term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) u s\\<rbrakk>\n       \\<Longrightarrow> s \\<in> timpl_closure t\n                                  T \\<cdot>\\<^sub>s\\<^sub>e\\<^sub>t\n                                 \\<delta>", "have u'_fv: \"\\<forall>x \\<in> fv u'. \\<exists>a. \\<Gamma>\\<^sub>v x = TAtom (Atom a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>fv u'.\n       \\<exists>a. \\<Gamma>\\<^sub>v x = Var (prot_atom.Atom a)", "using timpl_closure_fv_eq[OF u'(1)] t(2)"], ["proof (prove)\nusing this:\n  fv u' = fv t\n  \\<forall>x\\<in>fv t.\n     \\<exists>a. \\<Gamma>\\<^sub>v x = Var (prot_atom.Atom a)\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>fv u'.\n       \\<exists>a. \\<Gamma>\\<^sub>v x = Var (prot_atom.Atom a)", "by simp"], ["proof (state)\nthis:\n  \\<forall>x\\<in>fv u'.\n     \\<exists>a. \\<Gamma>\\<^sub>v x = Var (prot_atom.Atom a)\n\ngoal (1 subgoal):\n 1. \\<And>u a b s.\n       \\<lbrakk>u \\<in> timpl_closure (t \\<cdot> \\<delta>) T;\n        u \\<in> timpl_closure t T \\<cdot>\\<^sub>s\\<^sub>e\\<^sub>t \\<delta>;\n        (a, b) \\<in> T;\n        term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) u s\\<rbrakk>\n       \\<Longrightarrow> s \\<in> timpl_closure t\n                                  T \\<cdot>\\<^sub>s\\<^sub>e\\<^sub>t\n                                 \\<delta>", "hence u_fv: \"\\<forall>x \\<in> fv u. \\<exists>a. \\<Gamma>\\<^sub>v x = TAtom (Atom a)\""], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>fv u'.\n     \\<exists>a. \\<Gamma>\\<^sub>v x = Var (prot_atom.Atom a)\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>fv u.\n       \\<exists>a. \\<Gamma>\\<^sub>v x = Var (prot_atom.Atom a)", "using u'(2) wt_subst_trm''[OF \\<delta>(1)] wt_subst_const_fv_type_eq[OF _ \\<delta>(1,2), of u']"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>fv u'.\n     \\<exists>a. \\<Gamma>\\<^sub>v x = Var (prot_atom.Atom a)\n  u = u' \\<cdot> \\<delta>\n  \\<Gamma> ?t = \\<Gamma> (?t \\<cdot> \\<delta>)\n  \\<forall>x\\<in>fv u'.\n     \\<exists>a. \\<Gamma> (Var x) = Var a \\<Longrightarrow>\n  \\<forall>x\\<in>fv (u' \\<cdot> \\<delta>).\n     \\<exists>y\\<in>fv u'. \\<Gamma> (Var x) = \\<Gamma> (Var y)\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>fv u.\n       \\<exists>a. \\<Gamma>\\<^sub>v x = Var (prot_atom.Atom a)", "by fastforce"], ["proof (state)\nthis:\n  \\<forall>x\\<in>fv u.\n     \\<exists>a. \\<Gamma>\\<^sub>v x = Var (prot_atom.Atom a)\n\ngoal (1 subgoal):\n 1. \\<And>u a b s.\n       \\<lbrakk>u \\<in> timpl_closure (t \\<cdot> \\<delta>) T;\n        u \\<in> timpl_closure t T \\<cdot>\\<^sub>s\\<^sub>e\\<^sub>t \\<delta>;\n        (a, b) \\<in> T;\n        term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) u s\\<rbrakk>\n       \\<Longrightarrow> s \\<in> timpl_closure t\n                                  T \\<cdot>\\<^sub>s\\<^sub>e\\<^sub>t\n                                 \\<delta>", "have \"\\<forall>x \\<in> fv u' \\<union> fv s. (\\<exists>y. \\<delta> x = Var y) \\<or> (\\<exists>f. \\<delta> x = Fun f [] \\<and> Abs a \\<noteq> f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>fv u' \\<union> fv s.\n       (\\<exists>y. \\<delta> x = Var y) \\<or>\n       (\\<exists>f. \\<delta> x = Fun f [] \\<and> Abs a \\<noteq> f)", "proof (intro ballI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> fv u' \\<union> fv s \\<Longrightarrow>\n       (\\<exists>y. \\<delta> x = Var y) \\<or>\n       (\\<exists>f. \\<delta> x = Fun f [] \\<and> Abs a \\<noteq> f)", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> fv u' \\<union> fv s \\<Longrightarrow>\n       (\\<exists>y. \\<delta> x = Var y) \\<or>\n       (\\<exists>f. \\<delta> x = Fun f [] \\<and> Abs a \\<noteq> f)", "assume x: \"x \\<in> fv u' \\<union> fv s\""], ["proof (state)\nthis:\n  x \\<in> fv u' \\<union> fv s\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> fv u' \\<union> fv s \\<Longrightarrow>\n       (\\<exists>y. \\<delta> x = Var y) \\<or>\n       (\\<exists>f. \\<delta> x = Fun f [] \\<and> Abs a \\<noteq> f)", "then"], ["proof (chain)\npicking this:\n  x \\<in> fv u' \\<union> fv s", "obtain c where c: \"\\<Gamma>\\<^sub>v x = TAtom (Atom c)\""], ["proof (prove)\nusing this:\n  x \\<in> fv u' \\<union> fv s\n\ngoal (1 subgoal):\n 1. (\\<And>c.\n        \\<Gamma>\\<^sub>v x = Var (prot_atom.Atom c) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using u'_fv u_fv term_variants_pred_fv_eq[OF TI.hyps(3)]"], ["proof (prove)\nusing this:\n  x \\<in> fv u' \\<union> fv s\n  \\<forall>x\\<in>fv u'.\n     \\<exists>a. \\<Gamma>\\<^sub>v x = Var (prot_atom.Atom a)\n  \\<forall>x\\<in>fv u.\n     \\<exists>a. \\<Gamma>\\<^sub>v x = Var (prot_atom.Atom a)\n  fv u = fv s\n\ngoal (1 subgoal):\n 1. (\\<And>c.\n        \\<Gamma>\\<^sub>v x = Var (prot_atom.Atom c) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  \\<Gamma>\\<^sub>v x = Var (prot_atom.Atom c)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> fv u' \\<union> fv s \\<Longrightarrow>\n       (\\<exists>y. \\<delta> x = Var y) \\<or>\n       (\\<exists>f. \\<delta> x = Fun f [] \\<and> Abs a \\<noteq> f)", "show \"(\\<exists>y. \\<delta> x = Var y) \\<or> (\\<exists>f. \\<delta> x = Fun f [] \\<and> Abs a \\<noteq> f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>y. \\<delta> x = Var y) \\<or>\n    (\\<exists>f. \\<delta> x = Fun f [] \\<and> Abs a \\<noteq> f)", "proof (cases \"\\<delta> x\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x1.\n       \\<delta> x = Var x1 \\<Longrightarrow>\n       (\\<exists>y. \\<delta> x = Var y) \\<or>\n       (\\<exists>f. \\<delta> x = Fun f [] \\<and> Abs a \\<noteq> f)\n 2. \\<And>x21 x22.\n       \\<delta> x = Fun x21 x22 \\<Longrightarrow>\n       (\\<exists>y. \\<delta> x = Var y) \\<or>\n       (\\<exists>f. \\<delta> x = Fun f [] \\<and> Abs a \\<noteq> f)", "case (Fun f T)"], ["proof (state)\nthis:\n  \\<delta> x = Fun f T\n\ngoal (2 subgoals):\n 1. \\<And>x1.\n       \\<delta> x = Var x1 \\<Longrightarrow>\n       (\\<exists>y. \\<delta> x = Var y) \\<or>\n       (\\<exists>f. \\<delta> x = Fun f [] \\<and> Abs a \\<noteq> f)\n 2. \\<And>x21 x22.\n       \\<delta> x = Fun x21 x22 \\<Longrightarrow>\n       (\\<exists>y. \\<delta> x = Var y) \\<or>\n       (\\<exists>f. \\<delta> x = Fun f [] \\<and> Abs a \\<noteq> f)", "hence **: \"\\<Gamma> (Fun f T) = TAtom (Atom c)\" and \"wf\\<^sub>t\\<^sub>r\\<^sub>m (Fun f T)\""], ["proof (prove)\nusing this:\n  \\<delta> x = Fun f T\n\ngoal (1 subgoal):\n 1. \\<Gamma> (Fun f T) = Var (prot_atom.Atom c) &&&\n    wf\\<^sub>t\\<^sub>r\\<^sub>m (Fun f T)", "using c wt_subst_trm''[OF \\<delta>(1), of \"Var x\"] \\<delta>(2)"], ["proof (prove)\nusing this:\n  \\<delta> x = Fun f T\n  \\<Gamma>\\<^sub>v x = Var (prot_atom.Atom c)\n  \\<Gamma> (Var x) = \\<Gamma> (Var x \\<cdot> \\<delta>)\n  wf\\<^sub>t\\<^sub>r\\<^sub>m\\<^sub>s (subst_range \\<delta>)\n\ngoal (1 subgoal):\n 1. \\<Gamma> (Fun f T) = Var (prot_atom.Atom c) &&&\n    wf\\<^sub>t\\<^sub>r\\<^sub>m (Fun f T)", "by fastforce+"], ["proof (state)\nthis:\n  \\<Gamma> (Fun f T) = Var (prot_atom.Atom c)\n  wf\\<^sub>t\\<^sub>r\\<^sub>m (Fun f T)\n\ngoal (2 subgoals):\n 1. \\<And>x1.\n       \\<delta> x = Var x1 \\<Longrightarrow>\n       (\\<exists>y. \\<delta> x = Var y) \\<or>\n       (\\<exists>f. \\<delta> x = Fun f [] \\<and> Abs a \\<noteq> f)\n 2. \\<And>x21 x22.\n       \\<delta> x = Fun x21 x22 \\<Longrightarrow>\n       (\\<exists>y. \\<delta> x = Var y) \\<or>\n       (\\<exists>f. \\<delta> x = Fun f [] \\<and> Abs a \\<noteq> f)", "hence \"\\<delta> x = Fun f []\""], ["proof (prove)\nusing this:\n  \\<Gamma> (Fun f T) = Var (prot_atom.Atom c)\n  wf\\<^sub>t\\<^sub>r\\<^sub>m (Fun f T)\n\ngoal (1 subgoal):\n 1. \\<delta> x = Fun f []", "using Fun const_type_inv_wf"], ["proof (prove)\nusing this:\n  \\<Gamma> (Fun f T) = Var (prot_atom.Atom c)\n  wf\\<^sub>t\\<^sub>r\\<^sub>m (Fun f T)\n  \\<delta> x = Fun f T\n  \\<lbrakk>\\<Gamma> (Fun ?c ?X) = Var ?a;\n   wf\\<^sub>t\\<^sub>r\\<^sub>m (Fun ?c ?X)\\<rbrakk>\n  \\<Longrightarrow> ?X = []\n\ngoal (1 subgoal):\n 1. \\<delta> x = Fun f []", "by metis"], ["proof (state)\nthis:\n  \\<delta> x = Fun f []\n\ngoal (2 subgoals):\n 1. \\<And>x1.\n       \\<delta> x = Var x1 \\<Longrightarrow>\n       (\\<exists>y. \\<delta> x = Var y) \\<or>\n       (\\<exists>f. \\<delta> x = Fun f [] \\<and> Abs a \\<noteq> f)\n 2. \\<And>x21 x22.\n       \\<delta> x = Fun x21 x22 \\<Longrightarrow>\n       (\\<exists>y. \\<delta> x = Var y) \\<or>\n       (\\<exists>f. \\<delta> x = Fun f [] \\<and> Abs a \\<noteq> f)", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<delta> x = Fun f []\n\ngoal (1 subgoal):\n 1. (\\<exists>y. \\<delta> x = Var y) \\<or>\n    (\\<exists>f. \\<delta> x = Fun f [] \\<and> Abs a \\<noteq> f)", "using **"], ["proof (prove)\nusing this:\n  \\<delta> x = Fun f []\n  \\<Gamma> (Fun f T) = Var (prot_atom.Atom c)\n\ngoal (1 subgoal):\n 1. (\\<exists>y. \\<delta> x = Var y) \\<or>\n    (\\<exists>f. \\<delta> x = Fun f [] \\<and> Abs a \\<noteq> f)", "by force"], ["proof (state)\nthis:\n  (\\<exists>y. \\<delta> x = Var y) \\<or>\n  (\\<exists>f. \\<delta> x = Fun f [] \\<and> Abs a \\<noteq> f)\n\ngoal (1 subgoal):\n 1. \\<And>x1.\n       \\<delta> x = Var x1 \\<Longrightarrow>\n       (\\<exists>y. \\<delta> x = Var y) \\<or>\n       (\\<exists>f. \\<delta> x = Fun f [] \\<and> Abs a \\<noteq> f)", "qed metis"], ["proof (state)\nthis:\n  (\\<exists>y. \\<delta> x = Var y) \\<or>\n  (\\<exists>f. \\<delta> x = Fun f [] \\<and> Abs a \\<noteq> f)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>x\\<in>fv u' \\<union> fv s.\n     (\\<exists>y. \\<delta> x = Var y) \\<or>\n     (\\<exists>f. \\<delta> x = Fun f [] \\<and> Abs a \\<noteq> f)\n\ngoal (1 subgoal):\n 1. \\<And>u a b s.\n       \\<lbrakk>u \\<in> timpl_closure (t \\<cdot> \\<delta>) T;\n        u \\<in> timpl_closure t T \\<cdot>\\<^sub>s\\<^sub>e\\<^sub>t \\<delta>;\n        (a, b) \\<in> T;\n        term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) u s\\<rbrakk>\n       \\<Longrightarrow> s \\<in> timpl_closure t\n                                  T \\<cdot>\\<^sub>s\\<^sub>e\\<^sub>t\n                                 \\<delta>", "hence *: \"\\<forall>x \\<in> fv u' \\<union> fv s.\n                (\\<exists>y. \\<delta> x = Var y) \\<or> (\\<exists>f. \\<delta> x = Fun f [] \\<and> ((\\<lambda>_. [])(Abs a := [Abs b])) f = [])\""], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>fv u' \\<union> fv s.\n     (\\<exists>y. \\<delta> x = Var y) \\<or>\n     (\\<exists>f. \\<delta> x = Fun f [] \\<and> Abs a \\<noteq> f)\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>fv u' \\<union> fv s.\n       (\\<exists>y. \\<delta> x = Var y) \\<or>\n       (\\<exists>f.\n           \\<delta> x = Fun f [] \\<and>\n           ((\\<lambda>_. [])(Abs a := [Abs b])) f = [])", "by fastforce"], ["proof (state)\nthis:\n  \\<forall>x\\<in>fv u' \\<union> fv s.\n     (\\<exists>y. \\<delta> x = Var y) \\<or>\n     (\\<exists>f.\n         \\<delta> x = Fun f [] \\<and>\n         ((\\<lambda>_. [])(Abs a := [Abs b])) f = [])\n\ngoal (1 subgoal):\n 1. \\<And>u a b s.\n       \\<lbrakk>u \\<in> timpl_closure (t \\<cdot> \\<delta>) T;\n        u \\<in> timpl_closure t T \\<cdot>\\<^sub>s\\<^sub>e\\<^sub>t \\<delta>;\n        (a, b) \\<in> T;\n        term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) u s\\<rbrakk>\n       \\<Longrightarrow> s \\<in> timpl_closure t\n                                  T \\<cdot>\\<^sub>s\\<^sub>e\\<^sub>t\n                                 \\<delta>", "obtain s' where s': \"term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) u' s'\" \"s = s' \\<cdot> \\<delta>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>s'.\n        \\<lbrakk>term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) u'\n                  s';\n         s = s' \\<cdot> \\<delta>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using term_variants_pred_subst'[OF _ *] u'(2) TI.hyps(3)"], ["proof (prove)\nusing this:\n  term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b]))\n   (u' \\<cdot> \\<delta>) s \\<Longrightarrow>\n  \\<exists>u.\n     term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) u' u \\<and>\n     s = u \\<cdot> \\<delta>\n  u = u' \\<cdot> \\<delta>\n  term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) u s\n\ngoal (1 subgoal):\n 1. (\\<And>s'.\n        \\<lbrakk>term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) u'\n                  s';\n         s = s' \\<cdot> \\<delta>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) u' s'\n  s = s' \\<cdot> \\<delta>\n\ngoal (1 subgoal):\n 1. \\<And>u a b s.\n       \\<lbrakk>u \\<in> timpl_closure (t \\<cdot> \\<delta>) T;\n        u \\<in> timpl_closure t T \\<cdot>\\<^sub>s\\<^sub>e\\<^sub>t \\<delta>;\n        (a, b) \\<in> T;\n        term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) u s\\<rbrakk>\n       \\<Longrightarrow> s \\<in> timpl_closure t\n                                  T \\<cdot>\\<^sub>s\\<^sub>e\\<^sub>t\n                                 \\<delta>", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<in> timpl_closure t T \\<cdot>\\<^sub>s\\<^sub>e\\<^sub>t \\<delta>", "using timpl_closure.TI[OF u'(1) TI.hyps(2) s'(1)] s'(2)"], ["proof (prove)\nusing this:\n  s' \\<in> timpl_closure t T\n  s = s' \\<cdot> \\<delta>\n\ngoal (1 subgoal):\n 1. s \\<in> timpl_closure t T \\<cdot>\\<^sub>s\\<^sub>e\\<^sub>t \\<delta>", "by blast"], ["proof (state)\nthis:\n  s \\<in> timpl_closure t T \\<cdot>\\<^sub>s\\<^sub>e\\<^sub>t \\<delta>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?s25 \\<in> timpl_closure (t \\<cdot> \\<delta>) T \\<Longrightarrow>\n  ?s25 \\<in> timpl_closure t T \\<cdot>\\<^sub>s\\<^sub>e\\<^sub>t \\<delta>\n\ngoal (2 subgoals):\n 1. timpl_closure (t \\<cdot> \\<delta>) T\n    \\<subseteq> timpl_closure t T \\<cdot>\\<^sub>s\\<^sub>e\\<^sub>t \\<delta>\n 2. timpl_closure t T \\<cdot>\\<^sub>s\\<^sub>e\\<^sub>t \\<delta>\n    \\<subseteq> timpl_closure (t \\<cdot> \\<delta>) T", "thus \"timpl_closure (t \\<cdot> \\<delta>) T \\<subseteq> timpl_closure t T \\<cdot>\\<^sub>s\\<^sub>e\\<^sub>t \\<delta>\""], ["proof (prove)\nusing this:\n  ?s25 \\<in> timpl_closure (t \\<cdot> \\<delta>) T \\<Longrightarrow>\n  ?s25 \\<in> timpl_closure t T \\<cdot>\\<^sub>s\\<^sub>e\\<^sub>t \\<delta>\n\ngoal (1 subgoal):\n 1. timpl_closure (t \\<cdot> \\<delta>) T\n    \\<subseteq> timpl_closure t T \\<cdot>\\<^sub>s\\<^sub>e\\<^sub>t \\<delta>", "by fast"], ["proof (state)\nthis:\n  timpl_closure (t \\<cdot> \\<delta>) T\n  \\<subseteq> timpl_closure t T \\<cdot>\\<^sub>s\\<^sub>e\\<^sub>t \\<delta>\n\ngoal (1 subgoal):\n 1. timpl_closure t T \\<cdot>\\<^sub>s\\<^sub>e\\<^sub>t \\<delta>\n    \\<subseteq> timpl_closure (t \\<cdot> \\<delta>) T", "have \"s \\<in> timpl_closure (t \\<cdot> \\<delta>) T\"\n    when s: \"s \\<in> timpl_closure t T \\<cdot>\\<^sub>s\\<^sub>e\\<^sub>t \\<delta>\" for s"], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<in> timpl_closure (t \\<cdot> \\<delta>) T", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. s \\<in> timpl_closure (t \\<cdot> \\<delta>) T", "obtain s' where s': \"s' \\<in> timpl_closure t T\" \"s = s' \\<cdot> \\<delta>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>s'.\n        \\<lbrakk>s' \\<in> timpl_closure t T;\n         s = s' \\<cdot> \\<delta>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using s"], ["proof (prove)\nusing this:\n  s \\<in> timpl_closure t T \\<cdot>\\<^sub>s\\<^sub>e\\<^sub>t \\<delta>\n\ngoal (1 subgoal):\n 1. (\\<And>s'.\n        \\<lbrakk>s' \\<in> timpl_closure t T;\n         s = s' \\<cdot> \\<delta>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by moura"], ["proof (state)\nthis:\n  s' \\<in> timpl_closure t T\n  s = s' \\<cdot> \\<delta>\n\ngoal (1 subgoal):\n 1. s \\<in> timpl_closure (t \\<cdot> \\<delta>) T", "have \"s' \\<cdot> \\<delta> \\<in> timpl_closure (t \\<cdot> \\<delta>) T\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s' \\<cdot> \\<delta> \\<in> timpl_closure (t \\<cdot> \\<delta>) T", "using s'(1)"], ["proof (prove)\nusing this:\n  s' \\<in> timpl_closure t T\n\ngoal (1 subgoal):\n 1. s' \\<cdot> \\<delta> \\<in> timpl_closure (t \\<cdot> \\<delta>) T", "proof (induction s' rule: timpl_closure.induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. t \\<cdot> \\<delta> \\<in> timpl_closure (t \\<cdot> \\<delta>) T\n 2. \\<And>u a b s.\n       \\<lbrakk>u \\<in> timpl_closure t T;\n        u \\<cdot> \\<delta> \\<in> timpl_closure (t \\<cdot> \\<delta>) T;\n        (a, b) \\<in> T;\n        term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) u s\\<rbrakk>\n       \\<Longrightarrow> s \\<cdot> \\<delta>\n                         \\<in> timpl_closure (t \\<cdot> \\<delta>) T", "case FP"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. t \\<cdot> \\<delta> \\<in> timpl_closure (t \\<cdot> \\<delta>) T\n 2. \\<And>u a b s.\n       \\<lbrakk>u \\<in> timpl_closure t T;\n        u \\<cdot> \\<delta> \\<in> timpl_closure (t \\<cdot> \\<delta>) T;\n        (a, b) \\<in> T;\n        term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) u s\\<rbrakk>\n       \\<Longrightarrow> s \\<cdot> \\<delta>\n                         \\<in> timpl_closure (t \\<cdot> \\<delta>) T", "thus ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. t \\<cdot> \\<delta> \\<in> timpl_closure (t \\<cdot> \\<delta>) T", "using timpl_closure.FP[of \"t \\<cdot> \\<delta>\" T]"], ["proof (prove)\nusing this:\n  t \\<cdot> \\<delta> \\<in> timpl_closure (t \\<cdot> \\<delta>) T\n\ngoal (1 subgoal):\n 1. t \\<cdot> \\<delta> \\<in> timpl_closure (t \\<cdot> \\<delta>) T", "by simp"], ["proof (state)\nthis:\n  t \\<cdot> \\<delta> \\<in> timpl_closure (t \\<cdot> \\<delta>) T\n\ngoal (1 subgoal):\n 1. \\<And>u a b s.\n       \\<lbrakk>u \\<in> timpl_closure t T;\n        u \\<cdot> \\<delta> \\<in> timpl_closure (t \\<cdot> \\<delta>) T;\n        (a, b) \\<in> T;\n        term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) u s\\<rbrakk>\n       \\<Longrightarrow> s \\<cdot> \\<delta>\n                         \\<in> timpl_closure (t \\<cdot> \\<delta>) T", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u a b s.\n       \\<lbrakk>u \\<in> timpl_closure t T;\n        u \\<cdot> \\<delta> \\<in> timpl_closure (t \\<cdot> \\<delta>) T;\n        (a, b) \\<in> T;\n        term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) u s\\<rbrakk>\n       \\<Longrightarrow> s \\<cdot> \\<delta>\n                         \\<in> timpl_closure (t \\<cdot> \\<delta>) T", "case (TI u' a b s')"], ["proof (state)\nthis:\n  u' \\<in> timpl_closure t T\n  (a, b) \\<in> T\n  term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) u' s'\n  u' \\<cdot> \\<delta> \\<in> timpl_closure (t \\<cdot> \\<delta>) T\n\ngoal (1 subgoal):\n 1. \\<And>u a b s.\n       \\<lbrakk>u \\<in> timpl_closure t T;\n        u \\<cdot> \\<delta> \\<in> timpl_closure (t \\<cdot> \\<delta>) T;\n        (a, b) \\<in> T;\n        term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) u s\\<rbrakk>\n       \\<Longrightarrow> s \\<cdot> \\<delta>\n                         \\<in> timpl_closure (t \\<cdot> \\<delta>) T", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. s' \\<cdot> \\<delta> \\<in> timpl_closure (t \\<cdot> \\<delta>) T", "using timpl_closure.TI[OF TI.IH TI.hyps(2)]\n              term_variants_pred_subst[OF TI.hyps(3)]"], ["proof (prove)\nusing this:\n  term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b]))\n   (u' \\<cdot> \\<delta>) ?s \\<Longrightarrow>\n  ?s \\<in> timpl_closure (t \\<cdot> \\<delta>) T\n  term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b]))\n   (u' \\<cdot> ?\\<delta>) (s' \\<cdot> ?\\<delta>)\n\ngoal (1 subgoal):\n 1. s' \\<cdot> \\<delta> \\<in> timpl_closure (t \\<cdot> \\<delta>) T", "by blast"], ["proof (state)\nthis:\n  s' \\<cdot> \\<delta> \\<in> timpl_closure (t \\<cdot> \\<delta>) T\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  s' \\<cdot> \\<delta> \\<in> timpl_closure (t \\<cdot> \\<delta>) T\n\ngoal (1 subgoal):\n 1. s \\<in> timpl_closure (t \\<cdot> \\<delta>) T", "thus ?thesis"], ["proof (prove)\nusing this:\n  s' \\<cdot> \\<delta> \\<in> timpl_closure (t \\<cdot> \\<delta>) T\n\ngoal (1 subgoal):\n 1. s \\<in> timpl_closure (t \\<cdot> \\<delta>) T", "using s'(2)"], ["proof (prove)\nusing this:\n  s' \\<cdot> \\<delta> \\<in> timpl_closure (t \\<cdot> \\<delta>) T\n  s = s' \\<cdot> \\<delta>\n\ngoal (1 subgoal):\n 1. s \\<in> timpl_closure (t \\<cdot> \\<delta>) T", "by metis"], ["proof (state)\nthis:\n  s \\<in> timpl_closure (t \\<cdot> \\<delta>) T\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?s25\n  \\<in> timpl_closure t T \\<cdot>\\<^sub>s\\<^sub>e\\<^sub>t\n        \\<delta> \\<Longrightarrow>\n  ?s25 \\<in> timpl_closure (t \\<cdot> \\<delta>) T\n\ngoal (1 subgoal):\n 1. timpl_closure t T \\<cdot>\\<^sub>s\\<^sub>e\\<^sub>t \\<delta>\n    \\<subseteq> timpl_closure (t \\<cdot> \\<delta>) T", "thus \"timpl_closure t T \\<cdot>\\<^sub>s\\<^sub>e\\<^sub>t \\<delta> \\<subseteq> timpl_closure (t \\<cdot> \\<delta>) T\""], ["proof (prove)\nusing this:\n  ?s25\n  \\<in> timpl_closure t T \\<cdot>\\<^sub>s\\<^sub>e\\<^sub>t\n        \\<delta> \\<Longrightarrow>\n  ?s25 \\<in> timpl_closure (t \\<cdot> \\<delta>) T\n\ngoal (1 subgoal):\n 1. timpl_closure t T \\<cdot>\\<^sub>s\\<^sub>e\\<^sub>t \\<delta>\n    \\<subseteq> timpl_closure (t \\<cdot> \\<delta>) T", "by fast"], ["proof (state)\nthis:\n  timpl_closure t T \\<cdot>\\<^sub>s\\<^sub>e\\<^sub>t \\<delta>\n  \\<subseteq> timpl_closure (t \\<cdot> \\<delta>) T\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in stateful_protocol_model) timpl_closure_subst_subset:\n  assumes t: \"t \\<in> M\"\n    and M: \"wf\\<^sub>t\\<^sub>r\\<^sub>m\\<^sub>s M\" \"\\<forall>x \\<in> fv\\<^sub>s\\<^sub>e\\<^sub>t M. \\<exists>a. \\<Gamma>\\<^sub>v x = TAtom (Atom a)\"\n    and \\<delta>: \"wt\\<^sub>s\\<^sub>u\\<^sub>b\\<^sub>s\\<^sub>t \\<delta>\" \"wf\\<^sub>t\\<^sub>r\\<^sub>m\\<^sub>s (subst_range \\<delta>)\" \"ground (subst_range \\<delta>)\" \"subst_domain \\<delta> \\<subseteq> fv\\<^sub>s\\<^sub>e\\<^sub>t M\"\n    and M_supset: \"timpl_closure t T \\<subseteq> M\"\n  shows \"timpl_closure (t \\<cdot> \\<delta>) T \\<subseteq> M \\<cdot>\\<^sub>s\\<^sub>e\\<^sub>t \\<delta>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. timpl_closure (t \\<cdot> \\<delta>) T\n    \\<subseteq> M \\<cdot>\\<^sub>s\\<^sub>e\\<^sub>t \\<delta>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. timpl_closure (t \\<cdot> \\<delta>) T\n    \\<subseteq> M \\<cdot>\\<^sub>s\\<^sub>e\\<^sub>t \\<delta>", "have t': \"wf\\<^sub>t\\<^sub>r\\<^sub>m t\" \"\\<forall>x \\<in> fv t. \\<exists>a. \\<Gamma>\\<^sub>v x = TAtom (Atom a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf\\<^sub>t\\<^sub>r\\<^sub>m t &&&\n    \\<forall>x\\<in>fv t.\n       \\<exists>a. \\<Gamma>\\<^sub>v x = Var (prot_atom.Atom a)", "using t M"], ["proof (prove)\nusing this:\n  t \\<in> M\n  wf\\<^sub>t\\<^sub>r\\<^sub>m\\<^sub>s M\n  \\<forall>x\\<in>fv\\<^sub>s\\<^sub>e\\<^sub>t M.\n     \\<exists>a. \\<Gamma>\\<^sub>v x = Var (prot_atom.Atom a)\n\ngoal (1 subgoal):\n 1. wf\\<^sub>t\\<^sub>r\\<^sub>m t &&&\n    \\<forall>x\\<in>fv t.\n       \\<exists>a. \\<Gamma>\\<^sub>v x = Var (prot_atom.Atom a)", "by auto"], ["proof (state)\nthis:\n  wf\\<^sub>t\\<^sub>r\\<^sub>m t\n  \\<forall>x\\<in>fv t.\n     \\<exists>a. \\<Gamma>\\<^sub>v x = Var (prot_atom.Atom a)\n\ngoal (1 subgoal):\n 1. timpl_closure (t \\<cdot> \\<delta>) T\n    \\<subseteq> M \\<cdot>\\<^sub>s\\<^sub>e\\<^sub>t \\<delta>", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. timpl_closure (t \\<cdot> \\<delta>) T\n    \\<subseteq> M \\<cdot>\\<^sub>s\\<^sub>e\\<^sub>t \\<delta>", "using timpl_closure_subst[OF t' \\<delta>(1,2), of T] M_supset"], ["proof (prove)\nusing this:\n  timpl_closure (t \\<cdot> \\<delta>) T =\n  timpl_closure t T \\<cdot>\\<^sub>s\\<^sub>e\\<^sub>t \\<delta>\n  timpl_closure t T \\<subseteq> M\n\ngoal (1 subgoal):\n 1. timpl_closure (t \\<cdot> \\<delta>) T\n    \\<subseteq> M \\<cdot>\\<^sub>s\\<^sub>e\\<^sub>t \\<delta>", "by blast"], ["proof (state)\nthis:\n  timpl_closure (t \\<cdot> \\<delta>) T\n  \\<subseteq> M \\<cdot>\\<^sub>s\\<^sub>e\\<^sub>t \\<delta>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in stateful_protocol_model) timpl_closure_set_subst_subset:\n  assumes M: \"wf\\<^sub>t\\<^sub>r\\<^sub>m\\<^sub>s M\" \"\\<forall>x \\<in> fv\\<^sub>s\\<^sub>e\\<^sub>t M. \\<exists>a. \\<Gamma>\\<^sub>v x = TAtom (Atom a)\"\n    and \\<delta>: \"wt\\<^sub>s\\<^sub>u\\<^sub>b\\<^sub>s\\<^sub>t \\<delta>\" \"wf\\<^sub>t\\<^sub>r\\<^sub>m\\<^sub>s (subst_range \\<delta>)\" \"ground (subst_range \\<delta>)\" \"subst_domain \\<delta> \\<subseteq> fv\\<^sub>s\\<^sub>e\\<^sub>t M\"\n    and M_supset: \"timpl_closure_set M T \\<subseteq> M\"\n  shows \"timpl_closure_set (M \\<cdot>\\<^sub>s\\<^sub>e\\<^sub>t \\<delta>) T \\<subseteq> M \\<cdot>\\<^sub>s\\<^sub>e\\<^sub>t \\<delta>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. timpl_closure_set (M \\<cdot>\\<^sub>s\\<^sub>e\\<^sub>t \\<delta>) T\n    \\<subseteq> M \\<cdot>\\<^sub>s\\<^sub>e\\<^sub>t \\<delta>", "using timpl_closure_subst_subset[OF _ M \\<delta>, of _ T] M_supset\n      timpl_closure_set_is_timpl_closure_union[of \"M \\<cdot>\\<^sub>s\\<^sub>e\\<^sub>t \\<delta>\" T]\n      timpl_closure_set_is_timpl_closure_union[of M T]"], ["proof (prove)\nusing this:\n  \\<lbrakk>?t \\<in> M; timpl_closure ?t T \\<subseteq> M\\<rbrakk>\n  \\<Longrightarrow> timpl_closure (?t \\<cdot> \\<delta>) T\n                    \\<subseteq> M \\<cdot>\\<^sub>s\\<^sub>e\\<^sub>t \\<delta>\n  timpl_closure_set M T \\<subseteq> M\n  timpl_closure_set (M \\<cdot>\\<^sub>s\\<^sub>e\\<^sub>t \\<delta>) T =\n  (\\<Union>t\\<in>M \\<cdot>\\<^sub>s\\<^sub>e\\<^sub>t \\<delta>.\n      timpl_closure t T)\n  timpl_closure_set M T = (\\<Union>t\\<in>M. timpl_closure t T)\n\ngoal (1 subgoal):\n 1. timpl_closure_set (M \\<cdot>\\<^sub>s\\<^sub>e\\<^sub>t \\<delta>) T\n    \\<subseteq> M \\<cdot>\\<^sub>s\\<^sub>e\\<^sub>t \\<delta>", "by auto"], ["", "lemma timpl_closure_set_Union:\n  \"timpl_closure_set (\\<Union>Ms) T = (\\<Union>M \\<in> Ms. timpl_closure_set M T)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. timpl_closure_set (\\<Union> Ms) T =\n    (\\<Union>M\\<in>Ms. timpl_closure_set M T)", "using timpl_closure_set_is_timpl_closure_union[of \"\\<Union>Ms\" T]\n      timpl_closure_set_is_timpl_closure_union[of _ T]"], ["proof (prove)\nusing this:\n  timpl_closure_set (\\<Union> Ms) T =\n  (\\<Union>t\\<in>\\<Union> Ms. timpl_closure t T)\n  timpl_closure_set ?M T = (\\<Union>t\\<in>?M. timpl_closure t T)\n\ngoal (1 subgoal):\n 1. timpl_closure_set (\\<Union> Ms) T =\n    (\\<Union>M\\<in>Ms. timpl_closure_set M T)", "by force"], ["", "lemma timpl_closure_set_Union_subst_set:\n  assumes \"s \\<in> timpl_closure_set (\\<Union>{M \\<cdot>\\<^sub>s\\<^sub>e\\<^sub>t \\<delta> | \\<delta>. P \\<delta>}) T\"\n  shows \"\\<exists>\\<delta>. P \\<delta> \\<and> s \\<in> timpl_closure_set (M \\<cdot>\\<^sub>s\\<^sub>e\\<^sub>t \\<delta>) T\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>\\<delta>.\n       P \\<delta> \\<and>\n       s \\<in> timpl_closure_set\n                (M \\<cdot>\\<^sub>s\\<^sub>e\\<^sub>t \\<delta>) T", "using assms timpl_closure_set_is_timpl_closure_union[of \"(\\<Union>{M \\<cdot>\\<^sub>s\\<^sub>e\\<^sub>t \\<delta> | \\<delta>. P \\<delta>})\" T]\n      timpl_closure_set_is_timpl_closure_union[of _ T]"], ["proof (prove)\nusing this:\n  s \\<in> timpl_closure_set\n           (\\<Union>\n             {M \\<cdot>\\<^sub>s\\<^sub>e\\<^sub>t \\<delta> |\\<delta>.\n              P \\<delta>})\n           T\n  timpl_closure_set\n   (\\<Union>\n     {M \\<cdot>\\<^sub>s\\<^sub>e\\<^sub>t \\<delta> |\\<delta>. P \\<delta>})\n   T =\n  (\\<Union>t\\<in>\\<Union>\n                  {M \\<cdot>\\<^sub>s\\<^sub>e\\<^sub>t \\<delta> |\\<delta>.\n                   P \\<delta>}.\n      timpl_closure t T)\n  timpl_closure_set ?M T = (\\<Union>t\\<in>?M. timpl_closure t T)\n\ngoal (1 subgoal):\n 1. \\<exists>\\<delta>.\n       P \\<delta> \\<and>\n       s \\<in> timpl_closure_set\n                (M \\<cdot>\\<^sub>s\\<^sub>e\\<^sub>t \\<delta>) T", "by blast"], ["", "lemma timpl_closure_set_Union_subst_singleton:\n  assumes \"s \\<in> timpl_closure_set {t \\<cdot> \\<delta> | \\<delta>. P \\<delta>} T\"\n  shows \"\\<exists>\\<delta>. P \\<delta> \\<and> s \\<in> timpl_closure_set {t \\<cdot> \\<delta>} T\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>\\<delta>.\n       P \\<delta> \\<and> s \\<in> timpl_closure_set {t \\<cdot> \\<delta>} T", "using assms timpl_closure_set_is_timpl_closure_union[of \"{t \\<cdot> \\<delta> |\\<delta>. P \\<delta>}\" T]\n      timpl_closureton_is_timpl_closure[of _ T]"], ["proof (prove)\nusing this:\n  s \\<in> timpl_closure_set {t \\<cdot> \\<delta> |\\<delta>. P \\<delta>} T\n  timpl_closure_set {t \\<cdot> \\<delta> |\\<delta>. P \\<delta>} T =\n  (\\<Union>t\\<in>{t \\<cdot> \\<delta> |\\<delta>. P \\<delta>}.\n      timpl_closure t T)\n  timpl_closure_set {?t} T = timpl_closure ?t T\n\ngoal (1 subgoal):\n 1. \\<exists>\\<delta>.\n       P \\<delta> \\<and> s \\<in> timpl_closure_set {t \\<cdot> \\<delta>} T", "by fast"], ["", "lemma timpl_closure'_inv:\n  assumes \"(s, t) \\<in> timpl_closure' TI\"\n  shows \"(\\<exists>x. s = Var x \\<and> t = Var x) \\<or> (\\<exists>f g S T. s = Fun f S \\<and> t = Fun g T \\<and> length S = length T)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>x. s = Var x \\<and> t = Var x) \\<or>\n    (\\<exists>f g S T.\n        s = Fun f S \\<and> t = Fun g T \\<and> length S = length T)", "using assms"], ["proof (prove)\nusing this:\n  (s, t) \\<in> timpl_closure' TI\n\ngoal (1 subgoal):\n 1. (\\<exists>x. s = Var x \\<and> t = Var x) \\<or>\n    (\\<exists>f g S T.\n        s = Fun f S \\<and> t = Fun g T \\<and> length S = length T)", "unfolding timpl_closure'_def"], ["proof (prove)\nusing this:\n  (s, t) \\<in> (timpl_closure'_step TI)\\<^sup>*\n\ngoal (1 subgoal):\n 1. (\\<exists>x. s = Var x \\<and> t = Var x) \\<or>\n    (\\<exists>f g S T.\n        s = Fun f S \\<and> t = Fun g T \\<and> length S = length T)", "proof (induction rule: rtrancl_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. (\\<exists>x. s = Var x \\<and> s = Var x) \\<or>\n    (\\<exists>f g S T.\n        s = Fun f S \\<and> s = Fun g T \\<and> length S = length T)\n 2. \\<And>y z.\n       \\<lbrakk>(s, y) \\<in> (timpl_closure'_step TI)\\<^sup>*;\n        (y, z) \\<in> timpl_closure'_step TI;\n        (\\<exists>x. s = Var x \\<and> y = Var x) \\<or>\n        (\\<exists>f g S T.\n            s = Fun f S \\<and>\n            y = Fun g T \\<and> length S = length T)\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>x. s = Var x \\<and> z = Var x) \\<or>\n                         (\\<exists>f g S T.\n                             s = Fun f S \\<and>\n                             z = Fun g T \\<and> length S = length T)", "case base"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. (\\<exists>x. s = Var x \\<and> s = Var x) \\<or>\n    (\\<exists>f g S T.\n        s = Fun f S \\<and> s = Fun g T \\<and> length S = length T)\n 2. \\<And>y z.\n       \\<lbrakk>(s, y) \\<in> (timpl_closure'_step TI)\\<^sup>*;\n        (y, z) \\<in> timpl_closure'_step TI;\n        (\\<exists>x. s = Var x \\<and> y = Var x) \\<or>\n        (\\<exists>f g S T.\n            s = Fun f S \\<and>\n            y = Fun g T \\<and> length S = length T)\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>x. s = Var x \\<and> z = Var x) \\<or>\n                         (\\<exists>f g S T.\n                             s = Fun f S \\<and>\n                             z = Fun g T \\<and> length S = length T)", "thus ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>x. s = Var x \\<and> s = Var x) \\<or>\n    (\\<exists>f g S T.\n        s = Fun f S \\<and> s = Fun g T \\<and> length S = length T)", "by (cases s) auto"], ["proof (state)\nthis:\n  (\\<exists>x. s = Var x \\<and> s = Var x) \\<or>\n  (\\<exists>f g S T.\n      s = Fun f S \\<and> s = Fun g T \\<and> length S = length T)\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(s, y) \\<in> (timpl_closure'_step TI)\\<^sup>*;\n        (y, z) \\<in> timpl_closure'_step TI;\n        (\\<exists>x. s = Var x \\<and> y = Var x) \\<or>\n        (\\<exists>f g S T.\n            s = Fun f S \\<and>\n            y = Fun g T \\<and> length S = length T)\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>x. s = Var x \\<and> z = Var x) \\<or>\n                         (\\<exists>f g S T.\n                             s = Fun f S \\<and>\n                             z = Fun g T \\<and> length S = length T)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(s, y) \\<in> (timpl_closure'_step TI)\\<^sup>*;\n        (y, z) \\<in> timpl_closure'_step TI;\n        (\\<exists>x. s = Var x \\<and> y = Var x) \\<or>\n        (\\<exists>f g S T.\n            s = Fun f S \\<and>\n            y = Fun g T \\<and> length S = length T)\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>x. s = Var x \\<and> z = Var x) \\<or>\n                         (\\<exists>f g S T.\n                             s = Fun f S \\<and>\n                             z = Fun g T \\<and> length S = length T)", "case (step t u)"], ["proof (state)\nthis:\n  (s, t) \\<in> (timpl_closure'_step TI)\\<^sup>*\n  (t, u) \\<in> timpl_closure'_step TI\n  (\\<exists>x. s = Var x \\<and> t = Var x) \\<or>\n  (\\<exists>f g S T.\n      s = Fun f S \\<and> t = Fun g T \\<and> length S = length T)\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(s, y) \\<in> (timpl_closure'_step TI)\\<^sup>*;\n        (y, z) \\<in> timpl_closure'_step TI;\n        (\\<exists>x. s = Var x \\<and> y = Var x) \\<or>\n        (\\<exists>f g S T.\n            s = Fun f S \\<and>\n            y = Fun g T \\<and> length S = length T)\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>x. s = Var x \\<and> z = Var x) \\<or>\n                         (\\<exists>f g S T.\n                             s = Fun f S \\<and>\n                             z = Fun g T \\<and> length S = length T)", "obtain a b where ab: \"(a, b) \\<in> TI\" \"term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) t u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>a b.\n        \\<lbrakk>(a, b) \\<in> TI;\n         term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) t\n          u\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using timpl_closure'_step_inv[OF step.hyps(2)]"], ["proof (prove)\nusing this:\n  (\\<And>a b.\n      \\<lbrakk>(a, b) \\<in> TI;\n       term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) t u\\<rbrakk>\n      \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>a b.\n        \\<lbrakk>(a, b) \\<in> TI;\n         term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) t\n          u\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  (a, b) \\<in> TI\n  term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) t u\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(s, y) \\<in> (timpl_closure'_step TI)\\<^sup>*;\n        (y, z) \\<in> timpl_closure'_step TI;\n        (\\<exists>x. s = Var x \\<and> y = Var x) \\<or>\n        (\\<exists>f g S T.\n            s = Fun f S \\<and>\n            y = Fun g T \\<and> length S = length T)\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>x. s = Var x \\<and> z = Var x) \\<or>\n                         (\\<exists>f g S T.\n                             s = Fun f S \\<and>\n                             z = Fun g T \\<and> length S = length T)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>x. s = Var x \\<and> u = Var x) \\<or>\n    (\\<exists>f g S T.\n        s = Fun f S \\<and> u = Fun g T \\<and> length S = length T)", "using step.IH"], ["proof (prove)\nusing this:\n  (\\<exists>x. s = Var x \\<and> t = Var x) \\<or>\n  (\\<exists>f g S T.\n      s = Fun f S \\<and> t = Fun g T \\<and> length S = length T)\n\ngoal (1 subgoal):\n 1. (\\<exists>x. s = Var x \\<and> u = Var x) \\<or>\n    (\\<exists>f g S T.\n        s = Fun f S \\<and> u = Fun g T \\<and> length S = length T)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>x. s = Var x \\<and> t = Var x \\<Longrightarrow>\n    (\\<exists>x. s = Var x \\<and> u = Var x) \\<or>\n    (\\<exists>f g S T.\n        s = Fun f S \\<and> u = Fun g T \\<and> length S = length T)\n 2. \\<exists>f g S T.\n       s = Fun f S \\<and>\n       t = Fun g T \\<and> length S = length T \\<Longrightarrow>\n    (\\<exists>x. s = Var x \\<and> u = Var x) \\<or>\n    (\\<exists>f g S T.\n        s = Fun f S \\<and> u = Fun g T \\<and> length S = length T)", "assume \"\\<exists>x. s = Var x \\<and> t = Var x\""], ["proof (state)\nthis:\n  \\<exists>x. s = Var x \\<and> t = Var x\n\ngoal (2 subgoals):\n 1. \\<exists>x. s = Var x \\<and> t = Var x \\<Longrightarrow>\n    (\\<exists>x. s = Var x \\<and> u = Var x) \\<or>\n    (\\<exists>f g S T.\n        s = Fun f S \\<and> u = Fun g T \\<and> length S = length T)\n 2. \\<exists>f g S T.\n       s = Fun f S \\<and>\n       t = Fun g T \\<and> length S = length T \\<Longrightarrow>\n    (\\<exists>x. s = Var x \\<and> u = Var x) \\<or>\n    (\\<exists>f g S T.\n        s = Fun f S \\<and> u = Fun g T \\<and> length S = length T)", "thus ?case"], ["proof (prove)\nusing this:\n  \\<exists>x. s = Var x \\<and> t = Var x\n\ngoal (1 subgoal):\n 1. (\\<exists>x. s = Var x \\<and> u = Var x) \\<or>\n    (\\<exists>f g S T.\n        s = Fun f S \\<and> u = Fun g T \\<and> length S = length T)", "using step.hyps(2) term_variants_pred_inv_Var ab"], ["proof (prove)\nusing this:\n  \\<exists>x. s = Var x \\<and> t = Var x\n  (t, u) \\<in> timpl_closure'_step TI\n  term_variants_pred ?P (Var ?x) ?t = (?t = Var ?x)\n  term_variants_pred ?P ?t (Var ?x) = (?t = Var ?x)\n  (a, b) \\<in> TI\n  term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) t u\n\ngoal (1 subgoal):\n 1. (\\<exists>x. s = Var x \\<and> u = Var x) \\<or>\n    (\\<exists>f g S T.\n        s = Fun f S \\<and> u = Fun g T \\<and> length S = length T)", "by fastforce"], ["proof (state)\nthis:\n  (\\<exists>x. s = Var x \\<and> u = Var x) \\<or>\n  (\\<exists>f g S T.\n      s = Fun f S \\<and> u = Fun g T \\<and> length S = length T)\n\ngoal (1 subgoal):\n 1. \\<exists>f g S T.\n       s = Fun f S \\<and>\n       t = Fun g T \\<and> length S = length T \\<Longrightarrow>\n    (\\<exists>x. s = Var x \\<and> u = Var x) \\<or>\n    (\\<exists>f g S T.\n        s = Fun f S \\<and> u = Fun g T \\<and> length S = length T)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>f g S T.\n       s = Fun f S \\<and>\n       t = Fun g T \\<and> length S = length T \\<Longrightarrow>\n    (\\<exists>x. s = Var x \\<and> u = Var x) \\<or>\n    (\\<exists>f g S T.\n        s = Fun f S \\<and> u = Fun g T \\<and> length S = length T)", "assume \"\\<exists>f g S T. s = Fun f S \\<and> t = Fun g T \\<and> length S = length T\""], ["proof (state)\nthis:\n  \\<exists>f g S T.\n     s = Fun f S \\<and> t = Fun g T \\<and> length S = length T\n\ngoal (1 subgoal):\n 1. \\<exists>f g S T.\n       s = Fun f S \\<and>\n       t = Fun g T \\<and> length S = length T \\<Longrightarrow>\n    (\\<exists>x. s = Var x \\<and> u = Var x) \\<or>\n    (\\<exists>f g S T.\n        s = Fun f S \\<and> u = Fun g T \\<and> length S = length T)", "then"], ["proof (chain)\npicking this:\n  \\<exists>f g S T.\n     s = Fun f S \\<and> t = Fun g T \\<and> length S = length T", "obtain f g S T where st: \"s = Fun f S\" \"t = Fun g T\" \"length S = length T\""], ["proof (prove)\nusing this:\n  \\<exists>f g S T.\n     s = Fun f S \\<and> t = Fun g T \\<and> length S = length T\n\ngoal (1 subgoal):\n 1. (\\<And>f S g T.\n        \\<lbrakk>s = Fun f S; t = Fun g T; length S = length T\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by moura"], ["proof (state)\nthis:\n  s = Fun f S\n  t = Fun g T\n  length S = length T\n\ngoal (1 subgoal):\n 1. \\<exists>f g S T.\n       s = Fun f S \\<and>\n       t = Fun g T \\<and> length S = length T \\<Longrightarrow>\n    (\\<exists>x. s = Var x \\<and> u = Var x) \\<or>\n    (\\<exists>f g S T.\n        s = Fun f S \\<and> u = Fun g T \\<and> length S = length T)", "thus ?case"], ["proof (prove)\nusing this:\n  s = Fun f S\n  t = Fun g T\n  length S = length T\n\ngoal (1 subgoal):\n 1. (\\<exists>x. s = Var x \\<and> u = Var x) \\<or>\n    (\\<exists>f g S T.\n        s = Fun f S \\<and> u = Fun g T \\<and> length S = length T)", "using ab step.hyps(2) term_variants_pred_inv'[of \"(\\<lambda>_. [])(Abs a := [Abs b])\" g T u]"], ["proof (prove)\nusing this:\n  s = Fun f S\n  t = Fun g T\n  length S = length T\n  (a, b) \\<in> TI\n  term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) t u\n  (t, u) \\<in> timpl_closure'_step TI\n  term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) (Fun g T)\n   u \\<Longrightarrow>\n  is_Fun u\n  term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) (Fun g T)\n   u \\<Longrightarrow>\n  length T = length (args u)\n  \\<lbrakk>term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) (Fun g T)\n            u;\n   ?i < length T\\<rbrakk>\n  \\<Longrightarrow> term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b]))\n                     (T ! ?i) (args u ! ?i)\n  \\<lbrakk>term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) (Fun g T)\n            u;\n   g \\<noteq> the_Fun u\\<rbrakk>\n  \\<Longrightarrow> the_Fun u\n                    \\<in> set (((\\<lambda>_. [])(Abs a := [Abs b])) g)\n  \\<lbrakk>term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) (Fun g T)\n            u;\n   (\\<lambda>_. [])(Abs a := [Abs b]) \\<equiv> (\\<lambda>_. [])(?g := [?h]);\n   g \\<noteq> the_Fun u\\<rbrakk>\n  \\<Longrightarrow> g = ?g \\<and> the_Fun u = ?h\n\ngoal (1 subgoal):\n 1. (\\<exists>x. s = Var x \\<and> u = Var x) \\<or>\n    (\\<exists>f g S T.\n        s = Fun f S \\<and> u = Fun g T \\<and> length S = length T)", "by auto"], ["proof (state)\nthis:\n  (\\<exists>x. s = Var x \\<and> u = Var x) \\<or>\n  (\\<exists>f g S T.\n      s = Fun f S \\<and> u = Fun g T \\<and> length S = length T)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<exists>x. s = Var x \\<and> u = Var x) \\<or>\n  (\\<exists>f g S T.\n      s = Fun f S \\<and> u = Fun g T \\<and> length S = length T)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma timpl_closure'_inv':\n  assumes \"(s, t) \\<in> timpl_closure' TI\"\n  shows \"(\\<exists>x. s = Var x \\<and> t = Var x) \\<or>\n         (\\<exists>f g S T. s = Fun f S \\<and> t = Fun g T \\<and> length S = length T \\<and>\n                    (\\<forall>i < length T. (S ! i, T ! i) \\<in> timpl_closure' TI) \\<and>\n                    (f \\<noteq> g \\<longrightarrow> is_Abs f \\<and> is_Abs g \\<and> (the_Abs f, the_Abs g) \\<in> TI\\<^sup>+))\"\n    (is \"?A s t \\<or> ?B s t (timpl_closure' TI)\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>x. s = Var x \\<and> t = Var x) \\<or>\n    (\\<exists>f g S T.\n        s = Fun f S \\<and>\n        t = Fun g T \\<and>\n        length S = length T \\<and>\n        (\\<forall>i<length T. (S ! i, T ! i) \\<in> timpl_closure' TI) \\<and>\n        (f \\<noteq> g \\<longrightarrow>\n         is_Abs f \\<and>\n         is_Abs g \\<and> (the_Abs f, the_Abs g) \\<in> TI\\<^sup>+))", "using assms"], ["proof (prove)\nusing this:\n  (s, t) \\<in> timpl_closure' TI\n\ngoal (1 subgoal):\n 1. (\\<exists>x. s = Var x \\<and> t = Var x) \\<or>\n    (\\<exists>f g S T.\n        s = Fun f S \\<and>\n        t = Fun g T \\<and>\n        length S = length T \\<and>\n        (\\<forall>i<length T. (S ! i, T ! i) \\<in> timpl_closure' TI) \\<and>\n        (f \\<noteq> g \\<longrightarrow>\n         is_Abs f \\<and>\n         is_Abs g \\<and> (the_Abs f, the_Abs g) \\<in> TI\\<^sup>+))", "unfolding timpl_closure'_def"], ["proof (prove)\nusing this:\n  (s, t) \\<in> (timpl_closure'_step TI)\\<^sup>*\n\ngoal (1 subgoal):\n 1. (\\<exists>x. s = Var x \\<and> t = Var x) \\<or>\n    (\\<exists>f g S T.\n        s = Fun f S \\<and>\n        t = Fun g T \\<and>\n        length S = length T \\<and>\n        (\\<forall>i<length T.\n            (S ! i, T ! i) \\<in> (timpl_closure'_step TI)\\<^sup>*) \\<and>\n        (f \\<noteq> g \\<longrightarrow>\n         is_Abs f \\<and>\n         is_Abs g \\<and> (the_Abs f, the_Abs g) \\<in> TI\\<^sup>+))", "proof (induction rule: rtrancl_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. (\\<exists>x. s = Var x \\<and> s = Var x) \\<or>\n    (\\<exists>f g S T.\n        s = Fun f S \\<and>\n        s = Fun g T \\<and>\n        length S = length T \\<and>\n        (\\<forall>i<length T.\n            (S ! i, T ! i) \\<in> (timpl_closure'_step TI)\\<^sup>*) \\<and>\n        (f \\<noteq> g \\<longrightarrow>\n         is_Abs f \\<and>\n         is_Abs g \\<and> (the_Abs f, the_Abs g) \\<in> TI\\<^sup>+))\n 2. \\<And>y z.\n       \\<lbrakk>(s, y) \\<in> (timpl_closure'_step TI)\\<^sup>*;\n        (y, z) \\<in> timpl_closure'_step TI;\n        (\\<exists>x. s = Var x \\<and> y = Var x) \\<or>\n        (\\<exists>f g S T.\n            s = Fun f S \\<and>\n            y = Fun g T \\<and>\n            length S = length T \\<and>\n            (\\<forall>i<length T.\n                (S ! i, T ! i)\n                \\<in> (timpl_closure'_step TI)\\<^sup>*) \\<and>\n            (f \\<noteq> g \\<longrightarrow>\n             is_Abs f \\<and>\n             is_Abs g \\<and>\n             (the_Abs f, the_Abs g) \\<in> TI\\<^sup>+))\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>x. s = Var x \\<and> z = Var x) \\<or>\n                         (\\<exists>f g S T.\n                             s = Fun f S \\<and>\n                             z = Fun g T \\<and>\n                             length S = length T \\<and>\n                             (\\<forall>i<length T.\n                                 (S ! i, T ! i)\n                                 \\<in> (timpl_closure'_step\n   TI)\\<^sup>*) \\<and>\n                             (f \\<noteq> g \\<longrightarrow>\n                              is_Abs f \\<and>\n                              is_Abs g \\<and>\n                              (the_Abs f, the_Abs g) \\<in> TI\\<^sup>+))", "case base"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. (\\<exists>x. s = Var x \\<and> s = Var x) \\<or>\n    (\\<exists>f g S T.\n        s = Fun f S \\<and>\n        s = Fun g T \\<and>\n        length S = length T \\<and>\n        (\\<forall>i<length T.\n            (S ! i, T ! i) \\<in> (timpl_closure'_step TI)\\<^sup>*) \\<and>\n        (f \\<noteq> g \\<longrightarrow>\n         is_Abs f \\<and>\n         is_Abs g \\<and> (the_Abs f, the_Abs g) \\<in> TI\\<^sup>+))\n 2. \\<And>y z.\n       \\<lbrakk>(s, y) \\<in> (timpl_closure'_step TI)\\<^sup>*;\n        (y, z) \\<in> timpl_closure'_step TI;\n        (\\<exists>x. s = Var x \\<and> y = Var x) \\<or>\n        (\\<exists>f g S T.\n            s = Fun f S \\<and>\n            y = Fun g T \\<and>\n            length S = length T \\<and>\n            (\\<forall>i<length T.\n                (S ! i, T ! i)\n                \\<in> (timpl_closure'_step TI)\\<^sup>*) \\<and>\n            (f \\<noteq> g \\<longrightarrow>\n             is_Abs f \\<and>\n             is_Abs g \\<and>\n             (the_Abs f, the_Abs g) \\<in> TI\\<^sup>+))\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>x. s = Var x \\<and> z = Var x) \\<or>\n                         (\\<exists>f g S T.\n                             s = Fun f S \\<and>\n                             z = Fun g T \\<and>\n                             length S = length T \\<and>\n                             (\\<forall>i<length T.\n                                 (S ! i, T ! i)\n                                 \\<in> (timpl_closure'_step\n   TI)\\<^sup>*) \\<and>\n                             (f \\<noteq> g \\<longrightarrow>\n                              is_Abs f \\<and>\n                              is_Abs g \\<and>\n                              (the_Abs f, the_Abs g) \\<in> TI\\<^sup>+))", "thus ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>x. s = Var x \\<and> s = Var x) \\<or>\n    (\\<exists>f g S T.\n        s = Fun f S \\<and>\n        s = Fun g T \\<and>\n        length S = length T \\<and>\n        (\\<forall>i<length T.\n            (S ! i, T ! i) \\<in> (timpl_closure'_step TI)\\<^sup>*) \\<and>\n        (f \\<noteq> g \\<longrightarrow>\n         is_Abs f \\<and>\n         is_Abs g \\<and> (the_Abs f, the_Abs g) \\<in> TI\\<^sup>+))", "by (cases s) auto"], ["proof (state)\nthis:\n  (\\<exists>x. s = Var x \\<and> s = Var x) \\<or>\n  (\\<exists>f g S T.\n      s = Fun f S \\<and>\n      s = Fun g T \\<and>\n      length S = length T \\<and>\n      (\\<forall>i<length T.\n          (S ! i, T ! i) \\<in> (timpl_closure'_step TI)\\<^sup>*) \\<and>\n      (f \\<noteq> g \\<longrightarrow>\n       is_Abs f \\<and>\n       is_Abs g \\<and> (the_Abs f, the_Abs g) \\<in> TI\\<^sup>+))\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(s, y) \\<in> (timpl_closure'_step TI)\\<^sup>*;\n        (y, z) \\<in> timpl_closure'_step TI;\n        (\\<exists>x. s = Var x \\<and> y = Var x) \\<or>\n        (\\<exists>f g S T.\n            s = Fun f S \\<and>\n            y = Fun g T \\<and>\n            length S = length T \\<and>\n            (\\<forall>i<length T.\n                (S ! i, T ! i)\n                \\<in> (timpl_closure'_step TI)\\<^sup>*) \\<and>\n            (f \\<noteq> g \\<longrightarrow>\n             is_Abs f \\<and>\n             is_Abs g \\<and>\n             (the_Abs f, the_Abs g) \\<in> TI\\<^sup>+))\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>x. s = Var x \\<and> z = Var x) \\<or>\n                         (\\<exists>f g S T.\n                             s = Fun f S \\<and>\n                             z = Fun g T \\<and>\n                             length S = length T \\<and>\n                             (\\<forall>i<length T.\n                                 (S ! i, T ! i)\n                                 \\<in> (timpl_closure'_step\n   TI)\\<^sup>*) \\<and>\n                             (f \\<noteq> g \\<longrightarrow>\n                              is_Abs f \\<and>\n                              is_Abs g \\<and>\n                              (the_Abs f, the_Abs g) \\<in> TI\\<^sup>+))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(s, y) \\<in> (timpl_closure'_step TI)\\<^sup>*;\n        (y, z) \\<in> timpl_closure'_step TI;\n        (\\<exists>x. s = Var x \\<and> y = Var x) \\<or>\n        (\\<exists>f g S T.\n            s = Fun f S \\<and>\n            y = Fun g T \\<and>\n            length S = length T \\<and>\n            (\\<forall>i<length T.\n                (S ! i, T ! i)\n                \\<in> (timpl_closure'_step TI)\\<^sup>*) \\<and>\n            (f \\<noteq> g \\<longrightarrow>\n             is_Abs f \\<and>\n             is_Abs g \\<and>\n             (the_Abs f, the_Abs g) \\<in> TI\\<^sup>+))\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>x. s = Var x \\<and> z = Var x) \\<or>\n                         (\\<exists>f g S T.\n                             s = Fun f S \\<and>\n                             z = Fun g T \\<and>\n                             length S = length T \\<and>\n                             (\\<forall>i<length T.\n                                 (S ! i, T ! i)\n                                 \\<in> (timpl_closure'_step\n   TI)\\<^sup>*) \\<and>\n                             (f \\<noteq> g \\<longrightarrow>\n                              is_Abs f \\<and>\n                              is_Abs g \\<and>\n                              (the_Abs f, the_Abs g) \\<in> TI\\<^sup>+))", "case (step t u)"], ["proof (state)\nthis:\n  (s, t) \\<in> (timpl_closure'_step TI)\\<^sup>*\n  (t, u) \\<in> timpl_closure'_step TI\n  (\\<exists>x. s = Var x \\<and> t = Var x) \\<or>\n  (\\<exists>f g S T.\n      s = Fun f S \\<and>\n      t = Fun g T \\<and>\n      length S = length T \\<and>\n      (\\<forall>i<length T.\n          (S ! i, T ! i) \\<in> (timpl_closure'_step TI)\\<^sup>*) \\<and>\n      (f \\<noteq> g \\<longrightarrow>\n       is_Abs f \\<and>\n       is_Abs g \\<and> (the_Abs f, the_Abs g) \\<in> TI\\<^sup>+))\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(s, y) \\<in> (timpl_closure'_step TI)\\<^sup>*;\n        (y, z) \\<in> timpl_closure'_step TI;\n        (\\<exists>x. s = Var x \\<and> y = Var x) \\<or>\n        (\\<exists>f g S T.\n            s = Fun f S \\<and>\n            y = Fun g T \\<and>\n            length S = length T \\<and>\n            (\\<forall>i<length T.\n                (S ! i, T ! i)\n                \\<in> (timpl_closure'_step TI)\\<^sup>*) \\<and>\n            (f \\<noteq> g \\<longrightarrow>\n             is_Abs f \\<and>\n             is_Abs g \\<and>\n             (the_Abs f, the_Abs g) \\<in> TI\\<^sup>+))\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>x. s = Var x \\<and> z = Var x) \\<or>\n                         (\\<exists>f g S T.\n                             s = Fun f S \\<and>\n                             z = Fun g T \\<and>\n                             length S = length T \\<and>\n                             (\\<forall>i<length T.\n                                 (S ! i, T ! i)\n                                 \\<in> (timpl_closure'_step\n   TI)\\<^sup>*) \\<and>\n                             (f \\<noteq> g \\<longrightarrow>\n                              is_Abs f \\<and>\n                              is_Abs g \\<and>\n                              (the_Abs f, the_Abs g) \\<in> TI\\<^sup>+))", "obtain a b where ab: \"(a, b) \\<in> TI\" \"term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) t u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>a b.\n        \\<lbrakk>(a, b) \\<in> TI;\n         term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) t\n          u\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using timpl_closure'_step_inv[OF step.hyps(2)]"], ["proof (prove)\nusing this:\n  (\\<And>a b.\n      \\<lbrakk>(a, b) \\<in> TI;\n       term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) t u\\<rbrakk>\n      \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>a b.\n        \\<lbrakk>(a, b) \\<in> TI;\n         term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) t\n          u\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  (a, b) \\<in> TI\n  term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) t u\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(s, y) \\<in> (timpl_closure'_step TI)\\<^sup>*;\n        (y, z) \\<in> timpl_closure'_step TI;\n        (\\<exists>x. s = Var x \\<and> y = Var x) \\<or>\n        (\\<exists>f g S T.\n            s = Fun f S \\<and>\n            y = Fun g T \\<and>\n            length S = length T \\<and>\n            (\\<forall>i<length T.\n                (S ! i, T ! i)\n                \\<in> (timpl_closure'_step TI)\\<^sup>*) \\<and>\n            (f \\<noteq> g \\<longrightarrow>\n             is_Abs f \\<and>\n             is_Abs g \\<and>\n             (the_Abs f, the_Abs g) \\<in> TI\\<^sup>+))\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>x. s = Var x \\<and> z = Var x) \\<or>\n                         (\\<exists>f g S T.\n                             s = Fun f S \\<and>\n                             z = Fun g T \\<and>\n                             length S = length T \\<and>\n                             (\\<forall>i<length T.\n                                 (S ! i, T ! i)\n                                 \\<in> (timpl_closure'_step\n   TI)\\<^sup>*) \\<and>\n                             (f \\<noteq> g \\<longrightarrow>\n                              is_Abs f \\<and>\n                              is_Abs g \\<and>\n                              (the_Abs f, the_Abs g) \\<in> TI\\<^sup>+))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>x. s = Var x \\<and> u = Var x) \\<or>\n    (\\<exists>f g S T.\n        s = Fun f S \\<and>\n        u = Fun g T \\<and>\n        length S = length T \\<and>\n        (\\<forall>i<length T.\n            (S ! i, T ! i) \\<in> (timpl_closure'_step TI)\\<^sup>*) \\<and>\n        (f \\<noteq> g \\<longrightarrow>\n         is_Abs f \\<and>\n         is_Abs g \\<and> (the_Abs f, the_Abs g) \\<in> TI\\<^sup>+))", "using step.IH"], ["proof (prove)\nusing this:\n  (\\<exists>x. s = Var x \\<and> t = Var x) \\<or>\n  (\\<exists>f g S T.\n      s = Fun f S \\<and>\n      t = Fun g T \\<and>\n      length S = length T \\<and>\n      (\\<forall>i<length T.\n          (S ! i, T ! i) \\<in> (timpl_closure'_step TI)\\<^sup>*) \\<and>\n      (f \\<noteq> g \\<longrightarrow>\n       is_Abs f \\<and>\n       is_Abs g \\<and> (the_Abs f, the_Abs g) \\<in> TI\\<^sup>+))\n\ngoal (1 subgoal):\n 1. (\\<exists>x. s = Var x \\<and> u = Var x) \\<or>\n    (\\<exists>f g S T.\n        s = Fun f S \\<and>\n        u = Fun g T \\<and>\n        length S = length T \\<and>\n        (\\<forall>i<length T.\n            (S ! i, T ! i) \\<in> (timpl_closure'_step TI)\\<^sup>*) \\<and>\n        (f \\<noteq> g \\<longrightarrow>\n         is_Abs f \\<and>\n         is_Abs g \\<and> (the_Abs f, the_Abs g) \\<in> TI\\<^sup>+))", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>x. s = Var x \\<and> t = Var x \\<Longrightarrow>\n    (\\<exists>x. s = Var x \\<and> u = Var x) \\<or>\n    (\\<exists>f g S T.\n        s = Fun f S \\<and>\n        u = Fun g T \\<and>\n        length S = length T \\<and>\n        (\\<forall>i<length T.\n            (S ! i, T ! i) \\<in> (timpl_closure'_step TI)\\<^sup>*) \\<and>\n        (f \\<noteq> g \\<longrightarrow>\n         is_Abs f \\<and>\n         is_Abs g \\<and> (the_Abs f, the_Abs g) \\<in> TI\\<^sup>+))\n 2. \\<exists>f g S T.\n       s = Fun f S \\<and>\n       t = Fun g T \\<and>\n       length S = length T \\<and>\n       (\\<forall>i<length T.\n           (S ! i, T ! i) \\<in> (timpl_closure'_step TI)\\<^sup>*) \\<and>\n       (f \\<noteq> g \\<longrightarrow>\n        is_Abs f \\<and>\n        is_Abs g \\<and>\n        (the_Abs f, the_Abs g) \\<in> TI\\<^sup>+) \\<Longrightarrow>\n    (\\<exists>x. s = Var x \\<and> u = Var x) \\<or>\n    (\\<exists>f g S T.\n        s = Fun f S \\<and>\n        u = Fun g T \\<and>\n        length S = length T \\<and>\n        (\\<forall>i<length T.\n            (S ! i, T ! i) \\<in> (timpl_closure'_step TI)\\<^sup>*) \\<and>\n        (f \\<noteq> g \\<longrightarrow>\n         is_Abs f \\<and>\n         is_Abs g \\<and> (the_Abs f, the_Abs g) \\<in> TI\\<^sup>+))", "assume \"?A s t\""], ["proof (state)\nthis:\n  \\<exists>x. s = Var x \\<and> t = Var x\n\ngoal (2 subgoals):\n 1. \\<exists>x. s = Var x \\<and> t = Var x \\<Longrightarrow>\n    (\\<exists>x. s = Var x \\<and> u = Var x) \\<or>\n    (\\<exists>f g S T.\n        s = Fun f S \\<and>\n        u = Fun g T \\<and>\n        length S = length T \\<and>\n        (\\<forall>i<length T.\n            (S ! i, T ! i) \\<in> (timpl_closure'_step TI)\\<^sup>*) \\<and>\n        (f \\<noteq> g \\<longrightarrow>\n         is_Abs f \\<and>\n         is_Abs g \\<and> (the_Abs f, the_Abs g) \\<in> TI\\<^sup>+))\n 2. \\<exists>f g S T.\n       s = Fun f S \\<and>\n       t = Fun g T \\<and>\n       length S = length T \\<and>\n       (\\<forall>i<length T.\n           (S ! i, T ! i) \\<in> (timpl_closure'_step TI)\\<^sup>*) \\<and>\n       (f \\<noteq> g \\<longrightarrow>\n        is_Abs f \\<and>\n        is_Abs g \\<and>\n        (the_Abs f, the_Abs g) \\<in> TI\\<^sup>+) \\<Longrightarrow>\n    (\\<exists>x. s = Var x \\<and> u = Var x) \\<or>\n    (\\<exists>f g S T.\n        s = Fun f S \\<and>\n        u = Fun g T \\<and>\n        length S = length T \\<and>\n        (\\<forall>i<length T.\n            (S ! i, T ! i) \\<in> (timpl_closure'_step TI)\\<^sup>*) \\<and>\n        (f \\<noteq> g \\<longrightarrow>\n         is_Abs f \\<and>\n         is_Abs g \\<and> (the_Abs f, the_Abs g) \\<in> TI\\<^sup>+))", "thus ?case"], ["proof (prove)\nusing this:\n  \\<exists>x. s = Var x \\<and> t = Var x\n\ngoal (1 subgoal):\n 1. (\\<exists>x. s = Var x \\<and> u = Var x) \\<or>\n    (\\<exists>f g S T.\n        s = Fun f S \\<and>\n        u = Fun g T \\<and>\n        length S = length T \\<and>\n        (\\<forall>i<length T.\n            (S ! i, T ! i) \\<in> (timpl_closure'_step TI)\\<^sup>*) \\<and>\n        (f \\<noteq> g \\<longrightarrow>\n         is_Abs f \\<and>\n         is_Abs g \\<and> (the_Abs f, the_Abs g) \\<in> TI\\<^sup>+))", "using step.hyps(2) term_variants_pred_inv_Var ab"], ["proof (prove)\nusing this:\n  \\<exists>x. s = Var x \\<and> t = Var x\n  (t, u) \\<in> timpl_closure'_step TI\n  term_variants_pred ?P (Var ?x) ?t = (?t = Var ?x)\n  term_variants_pred ?P ?t (Var ?x) = (?t = Var ?x)\n  (a, b) \\<in> TI\n  term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) t u\n\ngoal (1 subgoal):\n 1. (\\<exists>x. s = Var x \\<and> u = Var x) \\<or>\n    (\\<exists>f g S T.\n        s = Fun f S \\<and>\n        u = Fun g T \\<and>\n        length S = length T \\<and>\n        (\\<forall>i<length T.\n            (S ! i, T ! i) \\<in> (timpl_closure'_step TI)\\<^sup>*) \\<and>\n        (f \\<noteq> g \\<longrightarrow>\n         is_Abs f \\<and>\n         is_Abs g \\<and> (the_Abs f, the_Abs g) \\<in> TI\\<^sup>+))", "by fastforce"], ["proof (state)\nthis:\n  (\\<exists>x. s = Var x \\<and> u = Var x) \\<or>\n  (\\<exists>f g S T.\n      s = Fun f S \\<and>\n      u = Fun g T \\<and>\n      length S = length T \\<and>\n      (\\<forall>i<length T.\n          (S ! i, T ! i) \\<in> (timpl_closure'_step TI)\\<^sup>*) \\<and>\n      (f \\<noteq> g \\<longrightarrow>\n       is_Abs f \\<and>\n       is_Abs g \\<and> (the_Abs f, the_Abs g) \\<in> TI\\<^sup>+))\n\ngoal (1 subgoal):\n 1. \\<exists>f g S T.\n       s = Fun f S \\<and>\n       t = Fun g T \\<and>\n       length S = length T \\<and>\n       (\\<forall>i<length T.\n           (S ! i, T ! i) \\<in> (timpl_closure'_step TI)\\<^sup>*) \\<and>\n       (f \\<noteq> g \\<longrightarrow>\n        is_Abs f \\<and>\n        is_Abs g \\<and>\n        (the_Abs f, the_Abs g) \\<in> TI\\<^sup>+) \\<Longrightarrow>\n    (\\<exists>x. s = Var x \\<and> u = Var x) \\<or>\n    (\\<exists>f g S T.\n        s = Fun f S \\<and>\n        u = Fun g T \\<and>\n        length S = length T \\<and>\n        (\\<forall>i<length T.\n            (S ! i, T ! i) \\<in> (timpl_closure'_step TI)\\<^sup>*) \\<and>\n        (f \\<noteq> g \\<longrightarrow>\n         is_Abs f \\<and>\n         is_Abs g \\<and> (the_Abs f, the_Abs g) \\<in> TI\\<^sup>+))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>f g S T.\n       s = Fun f S \\<and>\n       t = Fun g T \\<and>\n       length S = length T \\<and>\n       (\\<forall>i<length T.\n           (S ! i, T ! i) \\<in> (timpl_closure'_step TI)\\<^sup>*) \\<and>\n       (f \\<noteq> g \\<longrightarrow>\n        is_Abs f \\<and>\n        is_Abs g \\<and>\n        (the_Abs f, the_Abs g) \\<in> TI\\<^sup>+) \\<Longrightarrow>\n    (\\<exists>x. s = Var x \\<and> u = Var x) \\<or>\n    (\\<exists>f g S T.\n        s = Fun f S \\<and>\n        u = Fun g T \\<and>\n        length S = length T \\<and>\n        (\\<forall>i<length T.\n            (S ! i, T ! i) \\<in> (timpl_closure'_step TI)\\<^sup>*) \\<and>\n        (f \\<noteq> g \\<longrightarrow>\n         is_Abs f \\<and>\n         is_Abs g \\<and> (the_Abs f, the_Abs g) \\<in> TI\\<^sup>+))", "assume \"?B s t ((timpl_closure'_step TI)\\<^sup>*)\""], ["proof (state)\nthis:\n  \\<exists>f g S T.\n     s = Fun f S \\<and>\n     t = Fun g T \\<and>\n     length S = length T \\<and>\n     (\\<forall>i<length T.\n         (S ! i, T ! i) \\<in> (timpl_closure'_step TI)\\<^sup>*) \\<and>\n     (f \\<noteq> g \\<longrightarrow>\n      is_Abs f \\<and>\n      is_Abs g \\<and> (the_Abs f, the_Abs g) \\<in> TI\\<^sup>+)\n\ngoal (1 subgoal):\n 1. \\<exists>f g S T.\n       s = Fun f S \\<and>\n       t = Fun g T \\<and>\n       length S = length T \\<and>\n       (\\<forall>i<length T.\n           (S ! i, T ! i) \\<in> (timpl_closure'_step TI)\\<^sup>*) \\<and>\n       (f \\<noteq> g \\<longrightarrow>\n        is_Abs f \\<and>\n        is_Abs g \\<and>\n        (the_Abs f, the_Abs g) \\<in> TI\\<^sup>+) \\<Longrightarrow>\n    (\\<exists>x. s = Var x \\<and> u = Var x) \\<or>\n    (\\<exists>f g S T.\n        s = Fun f S \\<and>\n        u = Fun g T \\<and>\n        length S = length T \\<and>\n        (\\<forall>i<length T.\n            (S ! i, T ! i) \\<in> (timpl_closure'_step TI)\\<^sup>*) \\<and>\n        (f \\<noteq> g \\<longrightarrow>\n         is_Abs f \\<and>\n         is_Abs g \\<and> (the_Abs f, the_Abs g) \\<in> TI\\<^sup>+))", "then"], ["proof (chain)\npicking this:\n  \\<exists>f g S T.\n     s = Fun f S \\<and>\n     t = Fun g T \\<and>\n     length S = length T \\<and>\n     (\\<forall>i<length T.\n         (S ! i, T ! i) \\<in> (timpl_closure'_step TI)\\<^sup>*) \\<and>\n     (f \\<noteq> g \\<longrightarrow>\n      is_Abs f \\<and>\n      is_Abs g \\<and> (the_Abs f, the_Abs g) \\<in> TI\\<^sup>+)", "obtain f g S T where st:\n        \"s = Fun f S\" \"t = Fun g T\" \"length S = length T\"\n        \"\\<And>i. i < length T \\<Longrightarrow> (S ! i, T ! i) \\<in> (timpl_closure'_step TI)\\<^sup>*\"\n        \"f \\<noteq> g \\<Longrightarrow> is_Abs f \\<and> is_Abs g \\<and> (the_Abs f, the_Abs g) \\<in> TI\\<^sup>+\""], ["proof (prove)\nusing this:\n  \\<exists>f g S T.\n     s = Fun f S \\<and>\n     t = Fun g T \\<and>\n     length S = length T \\<and>\n     (\\<forall>i<length T.\n         (S ! i, T ! i) \\<in> (timpl_closure'_step TI)\\<^sup>*) \\<and>\n     (f \\<noteq> g \\<longrightarrow>\n      is_Abs f \\<and>\n      is_Abs g \\<and> (the_Abs f, the_Abs g) \\<in> TI\\<^sup>+)\n\ngoal (1 subgoal):\n 1. (\\<And>f S g T.\n        \\<lbrakk>s = Fun f S; t = Fun g T; length S = length T;\n         \\<And>i.\n            i < length T \\<Longrightarrow>\n            (S ! i, T ! i) \\<in> (timpl_closure'_step TI)\\<^sup>*;\n         f \\<noteq> g \\<Longrightarrow>\n         is_Abs f \\<and>\n         is_Abs g \\<and> (the_Abs f, the_Abs g) \\<in> TI\\<^sup>+\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by moura"], ["proof (state)\nthis:\n  s = Fun f S\n  t = Fun g T\n  length S = length T\n  ?i < length T \\<Longrightarrow>\n  (S ! ?i, T ! ?i) \\<in> (timpl_closure'_step TI)\\<^sup>*\n  f \\<noteq> g \\<Longrightarrow>\n  is_Abs f \\<and> is_Abs g \\<and> (the_Abs f, the_Abs g) \\<in> TI\\<^sup>+\n\ngoal (1 subgoal):\n 1. \\<exists>f g S T.\n       s = Fun f S \\<and>\n       t = Fun g T \\<and>\n       length S = length T \\<and>\n       (\\<forall>i<length T.\n           (S ! i, T ! i) \\<in> (timpl_closure'_step TI)\\<^sup>*) \\<and>\n       (f \\<noteq> g \\<longrightarrow>\n        is_Abs f \\<and>\n        is_Abs g \\<and>\n        (the_Abs f, the_Abs g) \\<in> TI\\<^sup>+) \\<Longrightarrow>\n    (\\<exists>x. s = Var x \\<and> u = Var x) \\<or>\n    (\\<exists>f g S T.\n        s = Fun f S \\<and>\n        u = Fun g T \\<and>\n        length S = length T \\<and>\n        (\\<forall>i<length T.\n            (S ! i, T ! i) \\<in> (timpl_closure'_step TI)\\<^sup>*) \\<and>\n        (f \\<noteq> g \\<longrightarrow>\n         is_Abs f \\<and>\n         is_Abs g \\<and> (the_Abs f, the_Abs g) \\<in> TI\\<^sup>+))", "obtain h U where u:\n        \"u = Fun h U\" \"length T = length U\"\n        \"\\<And>i. i < length T \\<Longrightarrow> term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) (T ! i) (U ! i)\"\n        \"g \\<noteq> h \\<Longrightarrow> is_Abs g \\<and> is_Abs h \\<and> (the_Abs g, the_Abs h) \\<in> TI\\<^sup>+\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>h U.\n        \\<lbrakk>u = Fun h U; length T = length U;\n         \\<And>i.\n            i < length T \\<Longrightarrow>\n            term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) (T ! i)\n             (U ! i);\n         g \\<noteq> h \\<Longrightarrow>\n         is_Abs g \\<and>\n         is_Abs h \\<and> (the_Abs g, the_Abs h) \\<in> TI\\<^sup>+\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using ab(2) st(2) r_into_trancl[OF ab(1)]\n            term_variants_pred_inv'(1,2,3,4)[of \"(\\<lambda>_. [])(Abs a := [Abs b])\" g T u]\n            term_variants_pred_inv'(5)[of \"(\\<lambda>_. [])(Abs a := [Abs b])\" g T u \"Abs a\" \"Abs b\"]"], ["proof (prove)\nusing this:\n  term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) t u\n  t = Fun g T\n  (a, b) \\<in> TI\\<^sup>+\n  term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) (Fun g T)\n   u \\<Longrightarrow>\n  is_Fun u\n  term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) (Fun g T)\n   u \\<Longrightarrow>\n  length T = length (args u)\n  \\<lbrakk>term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) (Fun g T)\n            u;\n   ?i < length T\\<rbrakk>\n  \\<Longrightarrow> term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b]))\n                     (T ! ?i) (args u ! ?i)\n  \\<lbrakk>term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) (Fun g T)\n            u;\n   g \\<noteq> the_Fun u\\<rbrakk>\n  \\<Longrightarrow> the_Fun u\n                    \\<in> set (((\\<lambda>_. [])(Abs a := [Abs b])) g)\n  \\<lbrakk>term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) (Fun g T)\n            u;\n   (\\<lambda>_. [])(Abs a := [Abs b]) \\<equiv> (\\<lambda>_. [])\n   (Abs a := [Abs b]);\n   g \\<noteq> the_Fun u\\<rbrakk>\n  \\<Longrightarrow> g = Abs a \\<and> the_Fun u = Abs b\n\ngoal (1 subgoal):\n 1. (\\<And>h U.\n        \\<lbrakk>u = Fun h U; length T = length U;\n         \\<And>i.\n            i < length T \\<Longrightarrow>\n            term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) (T ! i)\n             (U ! i);\n         g \\<noteq> h \\<Longrightarrow>\n         is_Abs g \\<and>\n         is_Abs h \\<and> (the_Abs g, the_Abs h) \\<in> TI\\<^sup>+\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding is_Abs_def the_Abs_def"], ["proof (prove)\nusing this:\n  term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) t u\n  t = Fun g T\n  (a, b) \\<in> TI\\<^sup>+\n  term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) (Fun g T)\n   u \\<Longrightarrow>\n  is_Fun u\n  term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) (Fun g T)\n   u \\<Longrightarrow>\n  length T = length (args u)\n  \\<lbrakk>term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) (Fun g T)\n            u;\n   ?i < length T\\<rbrakk>\n  \\<Longrightarrow> term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b]))\n                     (T ! ?i) (args u ! ?i)\n  \\<lbrakk>term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) (Fun g T)\n            u;\n   g \\<noteq> the_Fun u\\<rbrakk>\n  \\<Longrightarrow> the_Fun u\n                    \\<in> set (((\\<lambda>_. [])(Abs a := [Abs b])) g)\n  \\<lbrakk>term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) (Fun g T)\n            u;\n   (\\<lambda>_. [])(Abs a := [Abs b]) \\<equiv> (\\<lambda>_. [])\n   (Abs a := [Abs b]);\n   g \\<noteq> the_Fun u\\<rbrakk>\n  \\<Longrightarrow> g = Abs a \\<and> the_Fun u = Abs b\n\ngoal (1 subgoal):\n 1. (\\<And>h U.\n        \\<lbrakk>u = Fun h U; length T = length U;\n         \\<And>i.\n            i < length T \\<Longrightarrow>\n            term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) (T ! i)\n             (U ! i);\n         g \\<noteq> h \\<Longrightarrow>\n         (\\<exists>x4. g = Abs x4) \\<and>\n         (\\<exists>x4. h = Abs x4) \\<and>\n         (case g of Abs x4 \\<Rightarrow> x4,\n          case h of Abs x4 \\<Rightarrow> x4)\n         \\<in> TI\\<^sup>+\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  u = Fun h U\n  length T = length U\n  ?i < length T \\<Longrightarrow>\n  term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) (T ! ?i) (U ! ?i)\n  g \\<noteq> h \\<Longrightarrow>\n  is_Abs g \\<and> is_Abs h \\<and> (the_Abs g, the_Abs h) \\<in> TI\\<^sup>+\n\ngoal (1 subgoal):\n 1. \\<exists>f g S T.\n       s = Fun f S \\<and>\n       t = Fun g T \\<and>\n       length S = length T \\<and>\n       (\\<forall>i<length T.\n           (S ! i, T ! i) \\<in> (timpl_closure'_step TI)\\<^sup>*) \\<and>\n       (f \\<noteq> g \\<longrightarrow>\n        is_Abs f \\<and>\n        is_Abs g \\<and>\n        (the_Abs f, the_Abs g) \\<in> TI\\<^sup>+) \\<Longrightarrow>\n    (\\<exists>x. s = Var x \\<and> u = Var x) \\<or>\n    (\\<exists>f g S T.\n        s = Fun f S \\<and>\n        u = Fun g T \\<and>\n        length S = length T \\<and>\n        (\\<forall>i<length T.\n            (S ! i, T ! i) \\<in> (timpl_closure'_step TI)\\<^sup>*) \\<and>\n        (f \\<noteq> g \\<longrightarrow>\n         is_Abs f \\<and>\n         is_Abs g \\<and> (the_Abs f, the_Abs g) \\<in> TI\\<^sup>+))", "have \"(S ! i, U ! i) \\<in> (timpl_closure'_step TI)\\<^sup>*\" when i: \"i < length U\" for i"], ["proof (prove)\ngoal (1 subgoal):\n 1. (S ! i, U ! i) \\<in> (timpl_closure'_step TI)\\<^sup>*", "using u(2) i rtrancl.rtrancl_into_rtrancl[OF\n              st(4)[of i] timpl_closure'_step.intros[OF ab(1) u(3)[of i]]]"], ["proof (prove)\nusing this:\n  length T = length U\n  i < length U\n  \\<lbrakk>i < length T; i < length T\\<rbrakk>\n  \\<Longrightarrow> (S ! i, U ! i) \\<in> (timpl_closure'_step TI)\\<^sup>*\n\ngoal (1 subgoal):\n 1. (S ! i, U ! i) \\<in> (timpl_closure'_step TI)\\<^sup>*", "by argo"], ["proof (state)\nthis:\n  ?i < length U \\<Longrightarrow>\n  (S ! ?i, U ! ?i) \\<in> (timpl_closure'_step TI)\\<^sup>*\n\ngoal (1 subgoal):\n 1. \\<exists>f g S T.\n       s = Fun f S \\<and>\n       t = Fun g T \\<and>\n       length S = length T \\<and>\n       (\\<forall>i<length T.\n           (S ! i, T ! i) \\<in> (timpl_closure'_step TI)\\<^sup>*) \\<and>\n       (f \\<noteq> g \\<longrightarrow>\n        is_Abs f \\<and>\n        is_Abs g \\<and>\n        (the_Abs f, the_Abs g) \\<in> TI\\<^sup>+) \\<Longrightarrow>\n    (\\<exists>x. s = Var x \\<and> u = Var x) \\<or>\n    (\\<exists>f g S T.\n        s = Fun f S \\<and>\n        u = Fun g T \\<and>\n        length S = length T \\<and>\n        (\\<forall>i<length T.\n            (S ! i, T ! i) \\<in> (timpl_closure'_step TI)\\<^sup>*) \\<and>\n        (f \\<noteq> g \\<longrightarrow>\n         is_Abs f \\<and>\n         is_Abs g \\<and> (the_Abs f, the_Abs g) \\<in> TI\\<^sup>+))", "moreover"], ["proof (state)\nthis:\n  ?i < length U \\<Longrightarrow>\n  (S ! ?i, U ! ?i) \\<in> (timpl_closure'_step TI)\\<^sup>*\n\ngoal (1 subgoal):\n 1. \\<exists>f g S T.\n       s = Fun f S \\<and>\n       t = Fun g T \\<and>\n       length S = length T \\<and>\n       (\\<forall>i<length T.\n           (S ! i, T ! i) \\<in> (timpl_closure'_step TI)\\<^sup>*) \\<and>\n       (f \\<noteq> g \\<longrightarrow>\n        is_Abs f \\<and>\n        is_Abs g \\<and>\n        (the_Abs f, the_Abs g) \\<in> TI\\<^sup>+) \\<Longrightarrow>\n    (\\<exists>x. s = Var x \\<and> u = Var x) \\<or>\n    (\\<exists>f g S T.\n        s = Fun f S \\<and>\n        u = Fun g T \\<and>\n        length S = length T \\<and>\n        (\\<forall>i<length T.\n            (S ! i, T ! i) \\<in> (timpl_closure'_step TI)\\<^sup>*) \\<and>\n        (f \\<noteq> g \\<longrightarrow>\n         is_Abs f \\<and>\n         is_Abs g \\<and> (the_Abs f, the_Abs g) \\<in> TI\\<^sup>+))", "have \"length S = length U\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length S = length U", "using st u"], ["proof (prove)\nusing this:\n  s = Fun f S\n  t = Fun g T\n  length S = length T\n  ?i < length T \\<Longrightarrow>\n  (S ! ?i, T ! ?i) \\<in> (timpl_closure'_step TI)\\<^sup>*\n  f \\<noteq> g \\<Longrightarrow>\n  is_Abs f \\<and> is_Abs g \\<and> (the_Abs f, the_Abs g) \\<in> TI\\<^sup>+\n  u = Fun h U\n  length T = length U\n  ?i < length T \\<Longrightarrow>\n  term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) (T ! ?i) (U ! ?i)\n  g \\<noteq> h \\<Longrightarrow>\n  is_Abs g \\<and> is_Abs h \\<and> (the_Abs g, the_Abs h) \\<in> TI\\<^sup>+\n\ngoal (1 subgoal):\n 1. length S = length U", "by argo"], ["proof (state)\nthis:\n  length S = length U\n\ngoal (1 subgoal):\n 1. \\<exists>f g S T.\n       s = Fun f S \\<and>\n       t = Fun g T \\<and>\n       length S = length T \\<and>\n       (\\<forall>i<length T.\n           (S ! i, T ! i) \\<in> (timpl_closure'_step TI)\\<^sup>*) \\<and>\n       (f \\<noteq> g \\<longrightarrow>\n        is_Abs f \\<and>\n        is_Abs g \\<and>\n        (the_Abs f, the_Abs g) \\<in> TI\\<^sup>+) \\<Longrightarrow>\n    (\\<exists>x. s = Var x \\<and> u = Var x) \\<or>\n    (\\<exists>f g S T.\n        s = Fun f S \\<and>\n        u = Fun g T \\<and>\n        length S = length T \\<and>\n        (\\<forall>i<length T.\n            (S ! i, T ! i) \\<in> (timpl_closure'_step TI)\\<^sup>*) \\<and>\n        (f \\<noteq> g \\<longrightarrow>\n         is_Abs f \\<and>\n         is_Abs g \\<and> (the_Abs f, the_Abs g) \\<in> TI\\<^sup>+))", "moreover"], ["proof (state)\nthis:\n  length S = length U\n\ngoal (1 subgoal):\n 1. \\<exists>f g S T.\n       s = Fun f S \\<and>\n       t = Fun g T \\<and>\n       length S = length T \\<and>\n       (\\<forall>i<length T.\n           (S ! i, T ! i) \\<in> (timpl_closure'_step TI)\\<^sup>*) \\<and>\n       (f \\<noteq> g \\<longrightarrow>\n        is_Abs f \\<and>\n        is_Abs g \\<and>\n        (the_Abs f, the_Abs g) \\<in> TI\\<^sup>+) \\<Longrightarrow>\n    (\\<exists>x. s = Var x \\<and> u = Var x) \\<or>\n    (\\<exists>f g S T.\n        s = Fun f S \\<and>\n        u = Fun g T \\<and>\n        length S = length T \\<and>\n        (\\<forall>i<length T.\n            (S ! i, T ! i) \\<in> (timpl_closure'_step TI)\\<^sup>*) \\<and>\n        (f \\<noteq> g \\<longrightarrow>\n         is_Abs f \\<and>\n         is_Abs g \\<and> (the_Abs f, the_Abs g) \\<in> TI\\<^sup>+))", "have \"is_Abs f \\<and> is_Abs h \\<and> (the_Abs f, the_Abs h) \\<in> TI\\<^sup>+\" when fh: \"f \\<noteq> h\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_Abs f \\<and> is_Abs h \\<and> (the_Abs f, the_Abs h) \\<in> TI\\<^sup>+", "using fh st u"], ["proof (prove)\nusing this:\n  f \\<noteq> h\n  s = Fun f S\n  t = Fun g T\n  length S = length T\n  ?i < length T \\<Longrightarrow>\n  (S ! ?i, T ! ?i) \\<in> (timpl_closure'_step TI)\\<^sup>*\n  f \\<noteq> g \\<Longrightarrow>\n  is_Abs f \\<and> is_Abs g \\<and> (the_Abs f, the_Abs g) \\<in> TI\\<^sup>+\n  u = Fun h U\n  length T = length U\n  ?i < length T \\<Longrightarrow>\n  term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) (T ! ?i) (U ! ?i)\n  g \\<noteq> h \\<Longrightarrow>\n  is_Abs g \\<and> is_Abs h \\<and> (the_Abs g, the_Abs h) \\<in> TI\\<^sup>+\n\ngoal (1 subgoal):\n 1. is_Abs f \\<and> is_Abs h \\<and> (the_Abs f, the_Abs h) \\<in> TI\\<^sup>+", "by fastforce"], ["proof (state)\nthis:\n  f \\<noteq> h \\<Longrightarrow>\n  is_Abs f \\<and> is_Abs h \\<and> (the_Abs f, the_Abs h) \\<in> TI\\<^sup>+\n\ngoal (1 subgoal):\n 1. \\<exists>f g S T.\n       s = Fun f S \\<and>\n       t = Fun g T \\<and>\n       length S = length T \\<and>\n       (\\<forall>i<length T.\n           (S ! i, T ! i) \\<in> (timpl_closure'_step TI)\\<^sup>*) \\<and>\n       (f \\<noteq> g \\<longrightarrow>\n        is_Abs f \\<and>\n        is_Abs g \\<and>\n        (the_Abs f, the_Abs g) \\<in> TI\\<^sup>+) \\<Longrightarrow>\n    (\\<exists>x. s = Var x \\<and> u = Var x) \\<or>\n    (\\<exists>f g S T.\n        s = Fun f S \\<and>\n        u = Fun g T \\<and>\n        length S = length T \\<and>\n        (\\<forall>i<length T.\n            (S ! i, T ! i) \\<in> (timpl_closure'_step TI)\\<^sup>*) \\<and>\n        (f \\<noteq> g \\<longrightarrow>\n         is_Abs f \\<and>\n         is_Abs g \\<and> (the_Abs f, the_Abs g) \\<in> TI\\<^sup>+))", "ultimately"], ["proof (chain)\npicking this:\n  ?i < length U \\<Longrightarrow>\n  (S ! ?i, U ! ?i) \\<in> (timpl_closure'_step TI)\\<^sup>*\n  length S = length U\n  f \\<noteq> h \\<Longrightarrow>\n  is_Abs f \\<and> is_Abs h \\<and> (the_Abs f, the_Abs h) \\<in> TI\\<^sup>+", "show ?case"], ["proof (prove)\nusing this:\n  ?i < length U \\<Longrightarrow>\n  (S ! ?i, U ! ?i) \\<in> (timpl_closure'_step TI)\\<^sup>*\n  length S = length U\n  f \\<noteq> h \\<Longrightarrow>\n  is_Abs f \\<and> is_Abs h \\<and> (the_Abs f, the_Abs h) \\<in> TI\\<^sup>+\n\ngoal (1 subgoal):\n 1. (\\<exists>x. s = Var x \\<and> u = Var x) \\<or>\n    (\\<exists>f g S T.\n        s = Fun f S \\<and>\n        u = Fun g T \\<and>\n        length S = length T \\<and>\n        (\\<forall>i<length T.\n            (S ! i, T ! i) \\<in> (timpl_closure'_step TI)\\<^sup>*) \\<and>\n        (f \\<noteq> g \\<longrightarrow>\n         is_Abs f \\<and>\n         is_Abs g \\<and> (the_Abs f, the_Abs g) \\<in> TI\\<^sup>+))", "using st(1) u(1)"], ["proof (prove)\nusing this:\n  ?i < length U \\<Longrightarrow>\n  (S ! ?i, U ! ?i) \\<in> (timpl_closure'_step TI)\\<^sup>*\n  length S = length U\n  f \\<noteq> h \\<Longrightarrow>\n  is_Abs f \\<and> is_Abs h \\<and> (the_Abs f, the_Abs h) \\<in> TI\\<^sup>+\n  s = Fun f S\n  u = Fun h U\n\ngoal (1 subgoal):\n 1. (\\<exists>x. s = Var x \\<and> u = Var x) \\<or>\n    (\\<exists>f g S T.\n        s = Fun f S \\<and>\n        u = Fun g T \\<and>\n        length S = length T \\<and>\n        (\\<forall>i<length T.\n            (S ! i, T ! i) \\<in> (timpl_closure'_step TI)\\<^sup>*) \\<and>\n        (f \\<noteq> g \\<longrightarrow>\n         is_Abs f \\<and>\n         is_Abs g \\<and> (the_Abs f, the_Abs g) \\<in> TI\\<^sup>+))", "by blast"], ["proof (state)\nthis:\n  (\\<exists>x. s = Var x \\<and> u = Var x) \\<or>\n  (\\<exists>f g S T.\n      s = Fun f S \\<and>\n      u = Fun g T \\<and>\n      length S = length T \\<and>\n      (\\<forall>i<length T.\n          (S ! i, T ! i) \\<in> (timpl_closure'_step TI)\\<^sup>*) \\<and>\n      (f \\<noteq> g \\<longrightarrow>\n       is_Abs f \\<and>\n       is_Abs g \\<and> (the_Abs f, the_Abs g) \\<in> TI\\<^sup>+))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<exists>x. s = Var x \\<and> u = Var x) \\<or>\n  (\\<exists>f g S T.\n      s = Fun f S \\<and>\n      u = Fun g T \\<and>\n      length S = length T \\<and>\n      (\\<forall>i<length T.\n          (S ! i, T ! i) \\<in> (timpl_closure'_step TI)\\<^sup>*) \\<and>\n      (f \\<noteq> g \\<longrightarrow>\n       is_Abs f \\<and>\n       is_Abs g \\<and> (the_Abs f, the_Abs g) \\<in> TI\\<^sup>+))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma timpl_closure'_inv'':\n  assumes \"(Fun f S, Fun g T) \\<in> timpl_closure' TI\"\n  shows \"length S = length T\"\n    and \"\\<And>i. i < length T \\<Longrightarrow> (S ! i, T ! i) \\<in> timpl_closure' TI\"\n    and \"f \\<noteq> g \\<Longrightarrow> is_Abs f \\<and> is_Abs g \\<and> (the_Abs f, the_Abs g) \\<in> TI\\<^sup>+\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length S = length T &&&\n    (\\<And>i.\n        i < length T \\<Longrightarrow>\n        (S ! i, T ! i) \\<in> timpl_closure' TI) &&&\n    (f \\<noteq> g \\<Longrightarrow>\n     is_Abs f \\<and>\n     is_Abs g \\<and> (the_Abs f, the_Abs g) \\<in> TI\\<^sup>+)", "using assms timpl_closure'_inv'"], ["proof (prove)\nusing this:\n  (Fun f S, Fun g T) \\<in> timpl_closure' TI\n  (?s, ?t) \\<in> timpl_closure' ?TI \\<Longrightarrow>\n  (\\<exists>x. ?s = Var x \\<and> ?t = Var x) \\<or>\n  (\\<exists>f g S T.\n      ?s = Fun f S \\<and>\n      ?t = Fun g T \\<and>\n      length S = length T \\<and>\n      (\\<forall>i<length T. (S ! i, T ! i) \\<in> timpl_closure' ?TI) \\<and>\n      (f \\<noteq> g \\<longrightarrow>\n       is_Abs f \\<and>\n       is_Abs g \\<and> (the_Abs f, the_Abs g) \\<in> ?TI\\<^sup>+))\n\ngoal (1 subgoal):\n 1. length S = length T &&&\n    (\\<And>i.\n        i < length T \\<Longrightarrow>\n        (S ! i, T ! i) \\<in> timpl_closure' TI) &&&\n    (f \\<noteq> g \\<Longrightarrow>\n     is_Abs f \\<and>\n     is_Abs g \\<and> (the_Abs f, the_Abs g) \\<in> TI\\<^sup>+)", "by auto"], ["", "lemma timpl_closure_Fun_inv:\n  assumes \"s \\<in> timpl_closure (Fun f T) TI\"\n  shows \"\\<exists>g S. s = Fun g S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>g S. s = Fun g S", "using assms timpl_closure_is_timpl_closure' timpl_closure'_inv"], ["proof (prove)\nusing this:\n  s \\<in> timpl_closure (Fun f T) TI\n  (?s \\<in> timpl_closure ?t ?TI) = ((?t, ?s) \\<in> timpl_closure' ?TI)\n  (?s, ?t) \\<in> timpl_closure' ?TI \\<Longrightarrow>\n  (\\<exists>x. ?s = Var x \\<and> ?t = Var x) \\<or>\n  (\\<exists>f g S T.\n      ?s = Fun f S \\<and> ?t = Fun g T \\<and> length S = length T)\n\ngoal (1 subgoal):\n 1. \\<exists>g S. s = Fun g S", "by fastforce"], ["", "lemma timpl_closure_Fun_inv':\n  assumes \"Fun g S \\<in> timpl_closure (Fun f T) TI\"\n  shows \"length S = length T\"\n    and \"\\<And>i. i < length S \\<Longrightarrow> S ! i \\<in> timpl_closure (T ! i) TI\"\n    and \"f \\<noteq> g \\<Longrightarrow> is_Abs f \\<and> is_Abs g \\<and> (the_Abs f, the_Abs g) \\<in> TI\\<^sup>+\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length S = length T &&&\n    (\\<And>i.\n        i < length S \\<Longrightarrow>\n        S ! i \\<in> timpl_closure (T ! i) TI) &&&\n    (f \\<noteq> g \\<Longrightarrow>\n     is_Abs f \\<and>\n     is_Abs g \\<and> (the_Abs f, the_Abs g) \\<in> TI\\<^sup>+)", "using assms timpl_closure_is_timpl_closure'"], ["proof (prove)\nusing this:\n  Fun g S \\<in> timpl_closure (Fun f T) TI\n  (?s \\<in> timpl_closure ?t ?TI) = ((?t, ?s) \\<in> timpl_closure' ?TI)\n\ngoal (1 subgoal):\n 1. length S = length T &&&\n    (\\<And>i.\n        i < length S \\<Longrightarrow>\n        S ! i \\<in> timpl_closure (T ! i) TI) &&&\n    (f \\<noteq> g \\<Longrightarrow>\n     is_Abs f \\<and>\n     is_Abs g \\<and> (the_Abs f, the_Abs g) \\<in> TI\\<^sup>+)", "by (metis timpl_closure'_inv''(1), metis timpl_closure'_inv''(2), metis timpl_closure'_inv''(3))"], ["", "lemma timpl_closure_Fun_not_Var[simp]:\n  \"Fun f T \\<notin> timpl_closure (Var x) TI\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Fun f T \\<notin> timpl_closure (Var x) TI", "using timpl_closure_Var_inv"], ["proof (prove)\nusing this:\n  ?t \\<in> timpl_closure (Var ?x) ?TI \\<Longrightarrow> ?t = Var ?x\n\ngoal (1 subgoal):\n 1. Fun f T \\<notin> timpl_closure (Var x) TI", "by fast"], ["", "lemma timpl_closure_Var_not_Fun[simp]:\n  \"Var x \\<notin> timpl_closure (Fun f T) TI\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Var x \\<notin> timpl_closure (Fun f T) TI", "using timpl_closure_Fun_inv"], ["proof (prove)\nusing this:\n  ?s \\<in> timpl_closure (Fun ?f ?T) ?TI \\<Longrightarrow>\n  \\<exists>g S. ?s = Fun g S\n\ngoal (1 subgoal):\n 1. Var x \\<notin> timpl_closure (Fun f T) TI", "by fast"], ["", "lemma (in stateful_protocol_model) timpl_closure_wf_trms:\n  assumes m: \"wf\\<^sub>t\\<^sub>r\\<^sub>m m\"\n  shows \"wf\\<^sub>t\\<^sub>r\\<^sub>m\\<^sub>s (timpl_closure m TI)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf\\<^sub>t\\<^sub>r\\<^sub>m\\<^sub>s (timpl_closure m TI)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>t.\n       t \\<in> timpl_closure m TI \\<Longrightarrow>\n       wf\\<^sub>t\\<^sub>r\\<^sub>m t", "fix t"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>t.\n       t \\<in> timpl_closure m TI \\<Longrightarrow>\n       wf\\<^sub>t\\<^sub>r\\<^sub>m t", "assume \"t \\<in> timpl_closure m TI\""], ["proof (state)\nthis:\n  t \\<in> timpl_closure m TI\n\ngoal (1 subgoal):\n 1. \\<And>t.\n       t \\<in> timpl_closure m TI \\<Longrightarrow>\n       wf\\<^sub>t\\<^sub>r\\<^sub>m t", "thus \"wf\\<^sub>t\\<^sub>r\\<^sub>m t\""], ["proof (prove)\nusing this:\n  t \\<in> timpl_closure m TI\n\ngoal (1 subgoal):\n 1. wf\\<^sub>t\\<^sub>r\\<^sub>m t", "proof (induction t rule: timpl_closure.induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. wf\\<^sub>t\\<^sub>r\\<^sub>m m\n 2. \\<And>u a b s.\n       \\<lbrakk>u \\<in> timpl_closure m TI; wf\\<^sub>t\\<^sub>r\\<^sub>m u;\n        (a, b) \\<in> TI;\n        term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) u s\\<rbrakk>\n       \\<Longrightarrow> wf\\<^sub>t\\<^sub>r\\<^sub>m s", "case TI"], ["proof (state)\nthis:\n  u_ \\<in> timpl_closure m TI\n  (a_, b_) \\<in> TI\n  term_variants_pred ((\\<lambda>_. [])(Abs a_ := [Abs b_])) u_ s_\n  wf\\<^sub>t\\<^sub>r\\<^sub>m u_\n\ngoal (2 subgoals):\n 1. wf\\<^sub>t\\<^sub>r\\<^sub>m m\n 2. \\<And>u a b s.\n       \\<lbrakk>u \\<in> timpl_closure m TI; wf\\<^sub>t\\<^sub>r\\<^sub>m u;\n        (a, b) \\<in> TI;\n        term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) u s\\<rbrakk>\n       \\<Longrightarrow> wf\\<^sub>t\\<^sub>r\\<^sub>m s", "thus ?case"], ["proof (prove)\nusing this:\n  u_ \\<in> timpl_closure m TI\n  (a_, b_) \\<in> TI\n  term_variants_pred ((\\<lambda>_. [])(Abs a_ := [Abs b_])) u_ s_\n  wf\\<^sub>t\\<^sub>r\\<^sub>m u_\n\ngoal (1 subgoal):\n 1. wf\\<^sub>t\\<^sub>r\\<^sub>m s_", "using term_variants_pred_wf_trms"], ["proof (prove)\nusing this:\n  u_ \\<in> timpl_closure m TI\n  (a_, b_) \\<in> TI\n  term_variants_pred ((\\<lambda>_. [])(Abs a_ := [Abs b_])) u_ s_\n  wf\\<^sub>t\\<^sub>r\\<^sub>m u_\n  \\<lbrakk>term_variants_pred ?P ?s ?t;\n   \\<And>f g. g \\<in> set (?P f) \\<Longrightarrow> arity f = arity g;\n   wf\\<^sub>t\\<^sub>r\\<^sub>m ?s\\<rbrakk>\n  \\<Longrightarrow> wf\\<^sub>t\\<^sub>r\\<^sub>m ?t\n\ngoal (1 subgoal):\n 1. wf\\<^sub>t\\<^sub>r\\<^sub>m s_", "by force"], ["proof (state)\nthis:\n  wf\\<^sub>t\\<^sub>r\\<^sub>m s_\n\ngoal (1 subgoal):\n 1. wf\\<^sub>t\\<^sub>r\\<^sub>m m", "qed (rule m)"], ["proof (state)\nthis:\n  wf\\<^sub>t\\<^sub>r\\<^sub>m t\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in stateful_protocol_model) timpl_closure_set_wf_trms:\n  assumes M: \"wf\\<^sub>t\\<^sub>r\\<^sub>m\\<^sub>s M\"\n  shows \"wf\\<^sub>t\\<^sub>r\\<^sub>m\\<^sub>s (timpl_closure_set M TI)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf\\<^sub>t\\<^sub>r\\<^sub>m\\<^sub>s (timpl_closure_set M TI)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>t.\n       t \\<in> timpl_closure_set M TI \\<Longrightarrow>\n       wf\\<^sub>t\\<^sub>r\\<^sub>m t", "fix t"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>t.\n       t \\<in> timpl_closure_set M TI \\<Longrightarrow>\n       wf\\<^sub>t\\<^sub>r\\<^sub>m t", "assume \"t \\<in> timpl_closure_set M TI\""], ["proof (state)\nthis:\n  t \\<in> timpl_closure_set M TI\n\ngoal (1 subgoal):\n 1. \\<And>t.\n       t \\<in> timpl_closure_set M TI \\<Longrightarrow>\n       wf\\<^sub>t\\<^sub>r\\<^sub>m t", "then"], ["proof (chain)\npicking this:\n  t \\<in> timpl_closure_set M TI", "obtain m where \"t \\<in> timpl_closure m TI\" \"m \\<in> M\" \"wf\\<^sub>t\\<^sub>r\\<^sub>m m\""], ["proof (prove)\nusing this:\n  t \\<in> timpl_closure_set M TI\n\ngoal (1 subgoal):\n 1. (\\<And>m.\n        \\<lbrakk>t \\<in> timpl_closure m TI; m \\<in> M;\n         wf\\<^sub>t\\<^sub>r\\<^sub>m m\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using M timpl_closure_set_is_timpl_closure_union"], ["proof (prove)\nusing this:\n  t \\<in> timpl_closure_set M TI\n  wf\\<^sub>t\\<^sub>r\\<^sub>m\\<^sub>s M\n  timpl_closure_set ?M ?TI = (\\<Union>t\\<in>?M. timpl_closure t ?TI)\n\ngoal (1 subgoal):\n 1. (\\<And>m.\n        \\<lbrakk>t \\<in> timpl_closure m TI; m \\<in> M;\n         wf\\<^sub>t\\<^sub>r\\<^sub>m m\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  t \\<in> timpl_closure m TI\n  m \\<in> M\n  wf\\<^sub>t\\<^sub>r\\<^sub>m m\n\ngoal (1 subgoal):\n 1. \\<And>t.\n       t \\<in> timpl_closure_set M TI \\<Longrightarrow>\n       wf\\<^sub>t\\<^sub>r\\<^sub>m t", "thus \"wf\\<^sub>t\\<^sub>r\\<^sub>m t\""], ["proof (prove)\nusing this:\n  t \\<in> timpl_closure m TI\n  m \\<in> M\n  wf\\<^sub>t\\<^sub>r\\<^sub>m m\n\ngoal (1 subgoal):\n 1. wf\\<^sub>t\\<^sub>r\\<^sub>m t", "using timpl_closure_wf_trms"], ["proof (prove)\nusing this:\n  t \\<in> timpl_closure m TI\n  m \\<in> M\n  wf\\<^sub>t\\<^sub>r\\<^sub>m m\n  wf\\<^sub>t\\<^sub>r\\<^sub>m ?m \\<Longrightarrow>\n  wf\\<^sub>t\\<^sub>r\\<^sub>m\\<^sub>s (timpl_closure ?m ?TI)\n\ngoal (1 subgoal):\n 1. wf\\<^sub>t\\<^sub>r\\<^sub>m t", "by blast"], ["proof (state)\nthis:\n  wf\\<^sub>t\\<^sub>r\\<^sub>m t\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma timpl_closure_Fu_inv:\n  assumes \"t \\<in> timpl_closure (Fun (Fu f) T) TI\"\n  shows \"\\<exists>S. length S = length T \\<and> t = Fun (Fu f) S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>S. length S = length T \\<and> t = Fun (Fu f) S", "using assms"], ["proof (prove)\nusing this:\n  t \\<in> timpl_closure (Fun (Fu f) T) TI\n\ngoal (1 subgoal):\n 1. \\<exists>S. length S = length T \\<and> t = Fun (Fu f) S", "proof (induction t rule: timpl_closure.induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>S. length S = length T \\<and> Fun (Fu f) T = Fun (Fu f) S\n 2. \\<And>u a b s.\n       \\<lbrakk>u \\<in> timpl_closure (Fun (Fu f) T) TI;\n        \\<exists>S. length S = length T \\<and> u = Fun (Fu f) S;\n        (a, b) \\<in> TI;\n        term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) u s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>S.\n                            length S = length T \\<and> s = Fun (Fu f) S", "case (TI u a b s)"], ["proof (state)\nthis:\n  u \\<in> timpl_closure (Fun (Fu f) T) TI\n  (a, b) \\<in> TI\n  term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) u s\n  \\<exists>S. length S = length T \\<and> u = Fun (Fu f) S\n\ngoal (2 subgoals):\n 1. \\<exists>S. length S = length T \\<and> Fun (Fu f) T = Fun (Fu f) S\n 2. \\<And>u a b s.\n       \\<lbrakk>u \\<in> timpl_closure (Fun (Fu f) T) TI;\n        \\<exists>S. length S = length T \\<and> u = Fun (Fu f) S;\n        (a, b) \\<in> TI;\n        term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) u s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>S.\n                            length S = length T \\<and> s = Fun (Fu f) S", "then"], ["proof (chain)\npicking this:\n  u \\<in> timpl_closure (Fun (Fu f) T) TI\n  (a, b) \\<in> TI\n  term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) u s\n  \\<exists>S. length S = length T \\<and> u = Fun (Fu f) S", "obtain U where U: \"length U = length T\" \"u = Fun (Fu f) U\""], ["proof (prove)\nusing this:\n  u \\<in> timpl_closure (Fun (Fu f) T) TI\n  (a, b) \\<in> TI\n  term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) u s\n  \\<exists>S. length S = length T \\<and> u = Fun (Fu f) S\n\ngoal (1 subgoal):\n 1. (\\<And>U.\n        \\<lbrakk>length U = length T; u = Fun (Fu f) U\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by moura"], ["proof (state)\nthis:\n  length U = length T\n  u = Fun (Fu f) U\n\ngoal (2 subgoals):\n 1. \\<exists>S. length S = length T \\<and> Fun (Fu f) T = Fun (Fu f) S\n 2. \\<And>u a b s.\n       \\<lbrakk>u \\<in> timpl_closure (Fun (Fu f) T) TI;\n        \\<exists>S. length S = length T \\<and> u = Fun (Fu f) S;\n        (a, b) \\<in> TI;\n        term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) u s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>S.\n                            length S = length T \\<and> s = Fun (Fu f) S", "hence *: \"term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) (Fun (Fu f) U) s\""], ["proof (prove)\nusing this:\n  length U = length T\n  u = Fun (Fu f) U\n\ngoal (1 subgoal):\n 1. term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) (Fun (Fu f) U) s", "using TI.hyps(3)"], ["proof (prove)\nusing this:\n  length U = length T\n  u = Fun (Fu f) U\n  term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) u s\n\ngoal (1 subgoal):\n 1. term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) (Fun (Fu f) U) s", "by meson"], ["proof (state)\nthis:\n  term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) (Fun (Fu f) U) s\n\ngoal (2 subgoals):\n 1. \\<exists>S. length S = length T \\<and> Fun (Fu f) T = Fun (Fu f) S\n 2. \\<And>u a b s.\n       \\<lbrakk>u \\<in> timpl_closure (Fun (Fu f) T) TI;\n        \\<exists>S. length S = length T \\<and> u = Fun (Fu f) S;\n        (a, b) \\<in> TI;\n        term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) u s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>S.\n                            length S = length T \\<and> s = Fun (Fu f) S", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>S. length S = length T \\<and> s = Fun (Fu f) S", "using term_variants_pred_inv'(1,2,4)[OF *] U"], ["proof (prove)\nusing this:\n  is_Fun s\n  length U = length (args s)\n  Fu f \\<noteq> the_Fun s \\<Longrightarrow>\n  the_Fun s \\<in> set (((\\<lambda>_. [])(Abs a := [Abs b])) (Fu f))\n  length U = length T\n  u = Fun (Fu f) U\n\ngoal (1 subgoal):\n 1. \\<exists>S. length S = length T \\<and> s = Fun (Fu f) S", "by force"], ["proof (state)\nthis:\n  \\<exists>S. length S = length T \\<and> s = Fun (Fu f) S\n\ngoal (1 subgoal):\n 1. \\<exists>S. length S = length T \\<and> Fun (Fu f) T = Fun (Fu f) S", "qed simp"], ["", "lemma timpl_closure_Fu_inv':\n  assumes \"Fun (Fu f) T \\<in> timpl_closure t TI\"\n  shows \"\\<exists>S. length S = length T \\<and> t = Fun (Fu f) S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>S. length S = length T \\<and> t = Fun (Fu f) S", "using assms"], ["proof (prove)\nusing this:\n  Fun (Fu f) T \\<in> timpl_closure t TI\n\ngoal (1 subgoal):\n 1. \\<exists>S. length S = length T \\<and> t = Fun (Fu f) S", "proof (induction \"Fun (Fu f) T\" arbitrary: T rule: timpl_closure.induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>T.\n       t = Fun (Fu f) T \\<Longrightarrow>\n       \\<exists>S. length S = length T \\<and> t = Fun (Fu f) S\n 2. \\<And>u a b T.\n       \\<lbrakk>u \\<in> timpl_closure t TI;\n        \\<And>T.\n           u = Fun (Fu f) T \\<Longrightarrow>\n           \\<exists>S. length S = length T \\<and> t = Fun (Fu f) S;\n        (a, b) \\<in> TI;\n        term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) u\n         (Fun (Fu f) T)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>S.\n                            length S = length T \\<and> t = Fun (Fu f) S", "case (TI u a b)"], ["proof (state)\nthis:\n  u \\<in> timpl_closure t TI\n  u = Fun (Fu f) ?T \\<Longrightarrow>\n  \\<exists>S. length S = length ?T \\<and> t = Fun (Fu f) S\n  (a, b) \\<in> TI\n  term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) u (Fun (Fu f) T)\n\ngoal (2 subgoals):\n 1. \\<And>T.\n       t = Fun (Fu f) T \\<Longrightarrow>\n       \\<exists>S. length S = length T \\<and> t = Fun (Fu f) S\n 2. \\<And>u a b T.\n       \\<lbrakk>u \\<in> timpl_closure t TI;\n        \\<And>T.\n           u = Fun (Fu f) T \\<Longrightarrow>\n           \\<exists>S. length S = length T \\<and> t = Fun (Fu f) S;\n        (a, b) \\<in> TI;\n        term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) u\n         (Fun (Fu f) T)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>S.\n                            length S = length T \\<and> t = Fun (Fu f) S", "obtain g U where U:\n      \"u = Fun g U\" \"length U = length T\"\n      \"Fu f \\<noteq> g \\<Longrightarrow> Abs a = g \\<and> Fu f = Abs b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>g U.\n        \\<lbrakk>u = Fun g U; length U = length T;\n         Fu f \\<noteq> g \\<Longrightarrow>\n         Abs a = g \\<and> Fu f = Abs b\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using term_variants_pred_inv''[OF TI.hyps(4)]"], ["proof (prove)\nusing this:\n  is_Fun u\n  length T = length (args u)\n  ?i < length T \\<Longrightarrow>\n  term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) (args u ! ?i)\n   (T ! ?i)\n  Fu f \\<noteq> the_Fun u \\<Longrightarrow>\n  Fu f \\<in> set (((\\<lambda>_. [])(Abs a := [Abs b])) (the_Fun u))\n  \\<lbrakk>(\\<lambda>_. [])(Abs a := [Abs b]) \\<equiv> (\\<lambda>_. [])\n           (?g := [?h]);\n   Fu f \\<noteq> the_Fun u\\<rbrakk>\n  \\<Longrightarrow> Fu f = ?h \\<and> the_Fun u = ?g\n\ngoal (1 subgoal):\n 1. (\\<And>g U.\n        \\<lbrakk>u = Fun g U; length U = length T;\n         Fu f \\<noteq> g \\<Longrightarrow>\n         Abs a = g \\<and> Fu f = Abs b\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  u = Fun g U\n  length U = length T\n  Fu f \\<noteq> g \\<Longrightarrow> Abs a = g \\<and> Fu f = Abs b\n\ngoal (2 subgoals):\n 1. \\<And>T.\n       t = Fun (Fu f) T \\<Longrightarrow>\n       \\<exists>S. length S = length T \\<and> t = Fun (Fu f) S\n 2. \\<And>u a b T.\n       \\<lbrakk>u \\<in> timpl_closure t TI;\n        \\<And>T.\n           u = Fun (Fu f) T \\<Longrightarrow>\n           \\<exists>S. length S = length T \\<and> t = Fun (Fu f) S;\n        (a, b) \\<in> TI;\n        term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) u\n         (Fun (Fu f) T)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>S.\n                            length S = length T \\<and> t = Fun (Fu f) S", "have g: \"g = Fu f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. g = Fu f", "using U(3)"], ["proof (prove)\nusing this:\n  Fu f \\<noteq> g \\<Longrightarrow> Abs a = g \\<and> Fu f = Abs b\n\ngoal (1 subgoal):\n 1. g = Fu f", "by blast"], ["proof (state)\nthis:\n  g = Fu f\n\ngoal (2 subgoals):\n 1. \\<And>T.\n       t = Fun (Fu f) T \\<Longrightarrow>\n       \\<exists>S. length S = length T \\<and> t = Fun (Fu f) S\n 2. \\<And>u a b T.\n       \\<lbrakk>u \\<in> timpl_closure t TI;\n        \\<And>T.\n           u = Fun (Fu f) T \\<Longrightarrow>\n           \\<exists>S. length S = length T \\<and> t = Fun (Fu f) S;\n        (a, b) \\<in> TI;\n        term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) u\n         (Fun (Fu f) T)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>S.\n                            length S = length T \\<and> t = Fun (Fu f) S", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>S. length S = length T \\<and> t = Fun (Fu f) S", "using TI.hyps(2)[OF U(1)[unfolded g]] U(2)"], ["proof (prove)\nusing this:\n  \\<exists>S. length S = length U \\<and> t = Fun (Fu f) S\n  length U = length T\n\ngoal (1 subgoal):\n 1. \\<exists>S. length S = length T \\<and> t = Fun (Fu f) S", "by auto"], ["proof (state)\nthis:\n  \\<exists>S. length S = length T \\<and> t = Fun (Fu f) S\n\ngoal (1 subgoal):\n 1. \\<And>T.\n       t = Fun (Fu f) T \\<Longrightarrow>\n       \\<exists>S. length S = length T \\<and> t = Fun (Fu f) S", "qed simp"], ["", "lemma timpl_closure_no_Abs_eq:\n  assumes \"t \\<in> timpl_closure s TI\"\n    and \"\\<forall>f \\<in> funs_term t. \\<not>is_Abs f\"\n  shows \"t = s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t = s", "using assms"], ["proof (prove)\nusing this:\n  t \\<in> timpl_closure s TI\n  \\<forall>f\\<in>funs_term t. \\<not> is_Abs f\n\ngoal (1 subgoal):\n 1. t = s", "proof (induction t rule: timpl_closure.induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<forall>f\\<in>funs_term s. \\<not> is_Abs f \\<Longrightarrow> s = s\n 2. \\<And>u a b sa.\n       \\<lbrakk>u \\<in> timpl_closure s TI;\n        \\<forall>f\\<in>funs_term u. \\<not> is_Abs f \\<Longrightarrow> u = s;\n        (a, b) \\<in> TI;\n        term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) u sa;\n        \\<forall>f\\<in>funs_term sa. \\<not> is_Abs f\\<rbrakk>\n       \\<Longrightarrow> sa = s", "case (TI t a b s)"], ["proof (state)\nthis:\n  t \\<in> timpl_closure s TI\n  (a, b) \\<in> TI\n  term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) t s\n  \\<forall>f\\<in>funs_term t. \\<not> is_Abs f \\<Longrightarrow> t = s\n  \\<forall>f\\<in>funs_term s. \\<not> is_Abs f\n\ngoal (2 subgoals):\n 1. \\<forall>f\\<in>funs_term s. \\<not> is_Abs f \\<Longrightarrow> s = s\n 2. \\<And>u a b sa.\n       \\<lbrakk>u \\<in> timpl_closure s TI;\n        \\<forall>f\\<in>funs_term u. \\<not> is_Abs f \\<Longrightarrow> u = s;\n        (a, b) \\<in> TI;\n        term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) u sa;\n        \\<forall>f\\<in>funs_term sa. \\<not> is_Abs f\\<rbrakk>\n       \\<Longrightarrow> sa = s", "thus ?case"], ["proof (prove)\nusing this:\n  t \\<in> timpl_closure s TI\n  (a, b) \\<in> TI\n  term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) t s\n  \\<forall>f\\<in>funs_term t. \\<not> is_Abs f \\<Longrightarrow> t = s\n  \\<forall>f\\<in>funs_term s. \\<not> is_Abs f\n\ngoal (1 subgoal):\n 1. s = s", "using term_variants_pred_eq_case_Abs[of a b t s]"], ["proof (prove)\nusing this:\n  t \\<in> timpl_closure s TI\n  (a, b) \\<in> TI\n  term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) t s\n  \\<forall>f\\<in>funs_term t. \\<not> is_Abs f \\<Longrightarrow> t = s\n  \\<forall>f\\<in>funs_term s. \\<not> is_Abs f\n  \\<lbrakk>term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) t s;\n   \\<forall>f\\<in>funs_term s. \\<not> is_Abs f\\<rbrakk>\n  \\<Longrightarrow> t = s\n\ngoal (1 subgoal):\n 1. s = s", "unfolding timpl_apply_term_def term_variants_pred_iff_in_term_variants[symmetric]"], ["proof (prove)\nusing this:\n  t \\<in> timpl_closure s TI\n  (a, b) \\<in> TI\n  term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) t s\n  \\<forall>f\\<in>funs_term t. \\<not> is_Abs f \\<Longrightarrow> t = s\n  \\<forall>f\\<in>funs_term s. \\<not> is_Abs f\n  \\<lbrakk>term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) t s;\n   \\<forall>f\\<in>funs_term s. \\<not> is_Abs f\\<rbrakk>\n  \\<Longrightarrow> t = s\n\ngoal (1 subgoal):\n 1. s = s", "by metis"], ["proof (state)\nthis:\n  s = s\n\ngoal (1 subgoal):\n 1. \\<forall>f\\<in>funs_term s. \\<not> is_Abs f \\<Longrightarrow> s = s", "qed simp"], ["", "lemma timpl_closure_set_no_Abs_in_set:\n  assumes \"t \\<in> timpl_closure_set FP TI\"\n    and \"\\<forall>f \\<in> funs_term t. \\<not>is_Abs f\"\n  shows \"t \\<in> FP\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t \\<in> FP", "using assms timpl_closure_no_Abs_eq"], ["proof (prove)\nusing this:\n  t \\<in> timpl_closure_set FP TI\n  \\<forall>f\\<in>funs_term t. \\<not> is_Abs f\n  \\<lbrakk>?t \\<in> timpl_closure ?s ?TI;\n   \\<forall>f\\<in>funs_term ?t. \\<not> is_Abs f\\<rbrakk>\n  \\<Longrightarrow> ?t = ?s\n\ngoal (1 subgoal):\n 1. t \\<in> FP", "unfolding timpl_closure_set_def"], ["proof (prove)\nusing this:\n  t \\<in> (\\<Union>t\\<in>FP. timpl_closure t TI)\n  \\<forall>f\\<in>funs_term t. \\<not> is_Abs f\n  \\<lbrakk>?t \\<in> timpl_closure ?s ?TI;\n   \\<forall>f\\<in>funs_term ?t. \\<not> is_Abs f\\<rbrakk>\n  \\<Longrightarrow> ?t = ?s\n\ngoal (1 subgoal):\n 1. t \\<in> FP", "by blast"], ["", "lemma timpl_closure_funs_term_subset:\n  \"\\<Union>(funs_term ` (timpl_closure t TI)) \\<subseteq> funs_term t \\<union> Abs ` snd ` TI\"\n  (is \"?A \\<subseteq> ?B \\<union> ?C\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Union> (funs_term ` timpl_closure t TI)\n    \\<subseteq> funs_term t \\<union> Abs ` snd ` TI", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> \\<Union> (funs_term ` timpl_closure t TI) \\<Longrightarrow>\n       x \\<in> funs_term t \\<union> Abs ` snd ` TI", "fix f"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> \\<Union> (funs_term ` timpl_closure t TI) \\<Longrightarrow>\n       x \\<in> funs_term t \\<union> Abs ` snd ` TI", "assume \"f \\<in> ?A\""], ["proof (state)\nthis:\n  f \\<in> \\<Union> (funs_term ` timpl_closure t TI)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> \\<Union> (funs_term ` timpl_closure t TI) \\<Longrightarrow>\n       x \\<in> funs_term t \\<union> Abs ` snd ` TI", "then"], ["proof (chain)\npicking this:\n  f \\<in> \\<Union> (funs_term ` timpl_closure t TI)", "obtain s where \"s \\<in> timpl_closure t TI\" \"f \\<in> funs_term s\""], ["proof (prove)\nusing this:\n  f \\<in> \\<Union> (funs_term ` timpl_closure t TI)\n\ngoal (1 subgoal):\n 1. (\\<And>s.\n        \\<lbrakk>s \\<in> timpl_closure t TI; f \\<in> funs_term s\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by moura"], ["proof (state)\nthis:\n  s \\<in> timpl_closure t TI\n  f \\<in> funs_term s\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> \\<Union> (funs_term ` timpl_closure t TI) \\<Longrightarrow>\n       x \\<in> funs_term t \\<union> Abs ` snd ` TI", "thus \"f \\<in> ?B \\<union> ?C\""], ["proof (prove)\nusing this:\n  s \\<in> timpl_closure t TI\n  f \\<in> funs_term s\n\ngoal (1 subgoal):\n 1. f \\<in> funs_term t \\<union> Abs ` snd ` TI", "proof (induction s rule: timpl_closure.induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. f \\<in> funs_term t \\<Longrightarrow>\n    f \\<in> funs_term t \\<union> Abs ` snd ` TI\n 2. \\<And>u a b s.\n       \\<lbrakk>u \\<in> timpl_closure t TI;\n        f \\<in> funs_term u \\<Longrightarrow>\n        f \\<in> funs_term t \\<union> Abs ` snd ` TI;\n        (a, b) \\<in> TI;\n        term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) u s;\n        f \\<in> funs_term s\\<rbrakk>\n       \\<Longrightarrow> f \\<in> funs_term t \\<union> Abs ` snd ` TI", "case (TI u a b s)"], ["proof (state)\nthis:\n  u \\<in> timpl_closure t TI\n  (a, b) \\<in> TI\n  term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) u s\n  f \\<in> funs_term u \\<Longrightarrow>\n  f \\<in> funs_term t \\<union> Abs ` snd ` TI\n  f \\<in> funs_term s\n\ngoal (2 subgoals):\n 1. f \\<in> funs_term t \\<Longrightarrow>\n    f \\<in> funs_term t \\<union> Abs ` snd ` TI\n 2. \\<And>u a b s.\n       \\<lbrakk>u \\<in> timpl_closure t TI;\n        f \\<in> funs_term u \\<Longrightarrow>\n        f \\<in> funs_term t \\<union> Abs ` snd ` TI;\n        (a, b) \\<in> TI;\n        term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) u s;\n        f \\<in> funs_term s\\<rbrakk>\n       \\<Longrightarrow> f \\<in> funs_term t \\<union> Abs ` snd ` TI", "have \"Abs b \\<in> Abs ` snd ` TI\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Abs b \\<in> Abs ` snd ` TI", "using TI.hyps(2)"], ["proof (prove)\nusing this:\n  (a, b) \\<in> TI\n\ngoal (1 subgoal):\n 1. Abs b \\<in> Abs ` snd ` TI", "by force"], ["proof (state)\nthis:\n  Abs b \\<in> Abs ` snd ` TI\n\ngoal (2 subgoals):\n 1. f \\<in> funs_term t \\<Longrightarrow>\n    f \\<in> funs_term t \\<union> Abs ` snd ` TI\n 2. \\<And>u a b s.\n       \\<lbrakk>u \\<in> timpl_closure t TI;\n        f \\<in> funs_term u \\<Longrightarrow>\n        f \\<in> funs_term t \\<union> Abs ` snd ` TI;\n        (a, b) \\<in> TI;\n        term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) u s;\n        f \\<in> funs_term s\\<rbrakk>\n       \\<Longrightarrow> f \\<in> funs_term t \\<union> Abs ` snd ` TI", "thus ?case"], ["proof (prove)\nusing this:\n  Abs b \\<in> Abs ` snd ` TI\n\ngoal (1 subgoal):\n 1. f \\<in> funs_term t \\<union> Abs ` snd ` TI", "using term_variants_pred_funs_term[OF TI.hyps(3) TI.prems] TI.IH"], ["proof (prove)\nusing this:\n  Abs b \\<in> Abs ` snd ` TI\n  f \\<in> funs_term u \\<or>\n  (\\<exists>g\\<in>funs_term u.\n      f \\<in> set (((\\<lambda>_. [])(Abs a := [Abs b])) g))\n  f \\<in> funs_term u \\<Longrightarrow>\n  f \\<in> funs_term t \\<union> Abs ` snd ` TI\n\ngoal (1 subgoal):\n 1. f \\<in> funs_term t \\<union> Abs ` snd ` TI", "by force"], ["proof (state)\nthis:\n  f \\<in> funs_term t \\<union> Abs ` snd ` TI\n\ngoal (1 subgoal):\n 1. f \\<in> funs_term t \\<Longrightarrow>\n    f \\<in> funs_term t \\<union> Abs ` snd ` TI", "qed blast"], ["proof (state)\nthis:\n  f \\<in> funs_term t \\<union> Abs ` snd ` TI\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma timpl_closure_set_funs_term_subset:\n  \"\\<Union>(funs_term ` (timpl_closure_set FP TI)) \\<subseteq> \\<Union>(funs_term ` FP) \\<union> Abs ` snd ` TI\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Union> (funs_term ` timpl_closure_set FP TI)\n    \\<subseteq> \\<Union> (funs_term ` FP) \\<union> Abs ` snd ` TI", "using timpl_closure_funs_term_subset[of _ TI]\n      timpl_closure_set_is_timpl_closure_union[of FP TI]"], ["proof (prove)\nusing this:\n  \\<Union> (funs_term ` timpl_closure ?t TI)\n  \\<subseteq> funs_term ?t \\<union> Abs ` snd ` TI\n  timpl_closure_set FP TI = (\\<Union>t\\<in>FP. timpl_closure t TI)\n\ngoal (1 subgoal):\n 1. \\<Union> (funs_term ` timpl_closure_set FP TI)\n    \\<subseteq> \\<Union> (funs_term ` FP) \\<union> Abs ` snd ` TI", "by auto"], ["", "lemma funs_term_OCC_TI_subset:\n  defines \"absc \\<equiv> \\<lambda>a. Fun (Abs a) []\"\n  assumes OCC1: \"\\<forall>t \\<in> FP. \\<forall>f \\<in> funs_term t. is_Abs f \\<longrightarrow> f \\<in> Abs ` OCC\"\n    and OCC2: \"snd ` TI \\<subseteq> OCC\"\n  shows \"\\<forall>t \\<in> timpl_closure_set FP TI. \\<forall>f \\<in> funs_term t. is_Abs f \\<longrightarrow> f \\<in> Abs ` OCC\" (is ?A)\n    and \"\\<forall>t \\<in> absc ` OCC. \\<forall>(a,b) \\<in> TI. \\<forall>s \\<in> set \\<langle>a --\\<guillemotright> b\\<rangle>\\<langle>t\\<rangle>. s \\<in> absc ` OCC\" (is ?B)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>t\\<in>timpl_closure_set FP TI.\n       \\<forall>f\\<in>funs_term t.\n          is_Abs f \\<longrightarrow> f \\<in> Abs ` OCC &&&\n    \\<forall>t\\<in>absc ` OCC.\n       \\<forall>(a, b)\\<in>TI.\n          \\<forall>s\\<in>set \\<langle>a --\\<guillemotright> b\\<rangle>\\<langle>t\\<rangle>.\n             s \\<in> absc ` OCC", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<forall>t\\<in>timpl_closure_set FP TI.\n       \\<forall>f\\<in>funs_term t.\n          is_Abs f \\<longrightarrow> f \\<in> Abs ` OCC\n 2. \\<forall>t\\<in>absc ` OCC.\n       \\<forall>(a, b)\\<in>TI.\n          \\<forall>s\\<in>set \\<langle>a --\\<guillemotright> b\\<rangle>\\<langle>t\\<rangle>.\n             s \\<in> absc ` OCC", "let ?F = \"\\<Union>(funs_term ` FP)\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<forall>t\\<in>timpl_closure_set FP TI.\n       \\<forall>f\\<in>funs_term t.\n          is_Abs f \\<longrightarrow> f \\<in> Abs ` OCC\n 2. \\<forall>t\\<in>absc ` OCC.\n       \\<forall>(a, b)\\<in>TI.\n          \\<forall>s\\<in>set \\<langle>a --\\<guillemotright> b\\<rangle>\\<langle>t\\<rangle>.\n             s \\<in> absc ` OCC", "let ?G = \"Abs ` snd ` TI\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<forall>t\\<in>timpl_closure_set FP TI.\n       \\<forall>f\\<in>funs_term t.\n          is_Abs f \\<longrightarrow> f \\<in> Abs ` OCC\n 2. \\<forall>t\\<in>absc ` OCC.\n       \\<forall>(a, b)\\<in>TI.\n          \\<forall>s\\<in>set \\<langle>a --\\<guillemotright> b\\<rangle>\\<langle>t\\<rangle>.\n             s \\<in> absc ` OCC", "show ?A"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>t\\<in>timpl_closure_set FP TI.\n       \\<forall>f\\<in>funs_term t.\n          is_Abs f \\<longrightarrow> f \\<in> Abs ` OCC", "proof (intro ballI impI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>t f.\n       \\<lbrakk>t \\<in> timpl_closure_set FP TI; f \\<in> funs_term t;\n        is_Abs f\\<rbrakk>\n       \\<Longrightarrow> f \\<in> Abs ` OCC", "fix t f"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>t f.\n       \\<lbrakk>t \\<in> timpl_closure_set FP TI; f \\<in> funs_term t;\n        is_Abs f\\<rbrakk>\n       \\<Longrightarrow> f \\<in> Abs ` OCC", "assume t: \"t \\<in> timpl_closure_set FP TI\" and f: \"f \\<in> funs_term t\" \"is_Abs f\""], ["proof (state)\nthis:\n  t \\<in> timpl_closure_set FP TI\n  f \\<in> funs_term t\n  is_Abs f\n\ngoal (1 subgoal):\n 1. \\<And>t f.\n       \\<lbrakk>t \\<in> timpl_closure_set FP TI; f \\<in> funs_term t;\n        is_Abs f\\<rbrakk>\n       \\<Longrightarrow> f \\<in> Abs ` OCC", "hence \"f \\<in> ?F \\<or> f \\<in> ?G\""], ["proof (prove)\nusing this:\n  t \\<in> timpl_closure_set FP TI\n  f \\<in> funs_term t\n  is_Abs f\n\ngoal (1 subgoal):\n 1. f \\<in> \\<Union> (funs_term ` FP) \\<or> f \\<in> Abs ` snd ` TI", "using timpl_closure_set_funs_term_subset[of FP TI]"], ["proof (prove)\nusing this:\n  t \\<in> timpl_closure_set FP TI\n  f \\<in> funs_term t\n  is_Abs f\n  \\<Union> (funs_term ` timpl_closure_set FP TI)\n  \\<subseteq> \\<Union> (funs_term ` FP) \\<union> Abs ` snd ` TI\n\ngoal (1 subgoal):\n 1. f \\<in> \\<Union> (funs_term ` FP) \\<or> f \\<in> Abs ` snd ` TI", "by auto"], ["proof (state)\nthis:\n  f \\<in> \\<Union> (funs_term ` FP) \\<or> f \\<in> Abs ` snd ` TI\n\ngoal (1 subgoal):\n 1. \\<And>t f.\n       \\<lbrakk>t \\<in> timpl_closure_set FP TI; f \\<in> funs_term t;\n        is_Abs f\\<rbrakk>\n       \\<Longrightarrow> f \\<in> Abs ` OCC", "thus \"f \\<in> Abs ` OCC\""], ["proof (prove)\nusing this:\n  f \\<in> \\<Union> (funs_term ` FP) \\<or> f \\<in> Abs ` snd ` TI\n\ngoal (1 subgoal):\n 1. f \\<in> Abs ` OCC", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. f \\<in> \\<Union> (funs_term ` FP) \\<Longrightarrow> f \\<in> Abs ` OCC\n 2. f \\<in> Abs ` snd ` TI \\<Longrightarrow> f \\<in> Abs ` OCC", "assume \"f \\<in> ?F\""], ["proof (state)\nthis:\n  f \\<in> \\<Union> (funs_term ` FP)\n\ngoal (2 subgoals):\n 1. f \\<in> \\<Union> (funs_term ` FP) \\<Longrightarrow> f \\<in> Abs ` OCC\n 2. f \\<in> Abs ` snd ` TI \\<Longrightarrow> f \\<in> Abs ` OCC", "thus ?thesis"], ["proof (prove)\nusing this:\n  f \\<in> \\<Union> (funs_term ` FP)\n\ngoal (1 subgoal):\n 1. f \\<in> Abs ` OCC", "using OCC1 f(2)"], ["proof (prove)\nusing this:\n  f \\<in> \\<Union> (funs_term ` FP)\n  \\<forall>t\\<in>FP.\n     \\<forall>f\\<in>funs_term t.\n        is_Abs f \\<longrightarrow> f \\<in> Abs ` OCC\n  is_Abs f\n\ngoal (1 subgoal):\n 1. f \\<in> Abs ` OCC", "by fast"], ["proof (state)\nthis:\n  f \\<in> Abs ` OCC\n\ngoal (1 subgoal):\n 1. f \\<in> Abs ` snd ` TI \\<Longrightarrow> f \\<in> Abs ` OCC", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. f \\<in> Abs ` snd ` TI \\<Longrightarrow> f \\<in> Abs ` OCC", "assume \"f \\<in> ?G\""], ["proof (state)\nthis:\n  f \\<in> Abs ` snd ` TI\n\ngoal (1 subgoal):\n 1. f \\<in> Abs ` snd ` TI \\<Longrightarrow> f \\<in> Abs ` OCC", "thus ?thesis"], ["proof (prove)\nusing this:\n  f \\<in> Abs ` snd ` TI\n\ngoal (1 subgoal):\n 1. f \\<in> Abs ` OCC", "using OCC2"], ["proof (prove)\nusing this:\n  f \\<in> Abs ` snd ` TI\n  snd ` TI \\<subseteq> OCC\n\ngoal (1 subgoal):\n 1. f \\<in> Abs ` OCC", "by auto"], ["proof (state)\nthis:\n  f \\<in> Abs ` OCC\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  f \\<in> Abs ` OCC\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>t\\<in>timpl_closure_set FP TI.\n     \\<forall>f\\<in>funs_term t.\n        is_Abs f \\<longrightarrow> f \\<in> Abs ` OCC\n\ngoal (1 subgoal):\n 1. \\<forall>t\\<in>absc ` OCC.\n       \\<forall>(a, b)\\<in>TI.\n          \\<forall>s\\<in>set \\<langle>a --\\<guillemotright> b\\<rangle>\\<langle>t\\<rangle>.\n             s \\<in> absc ` OCC", "{"], ["proof (state)\nthis:\n  \\<forall>t\\<in>timpl_closure_set FP TI.\n     \\<forall>f\\<in>funs_term t.\n        is_Abs f \\<longrightarrow> f \\<in> Abs ` OCC\n\ngoal (1 subgoal):\n 1. \\<forall>t\\<in>absc ` OCC.\n       \\<forall>(a, b)\\<in>TI.\n          \\<forall>s\\<in>set \\<langle>a --\\<guillemotright> b\\<rangle>\\<langle>t\\<rangle>.\n             s \\<in> absc ` OCC", "fix s t a b"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>t\\<in>absc ` OCC.\n       \\<forall>(a, b)\\<in>TI.\n          \\<forall>s\\<in>set \\<langle>a --\\<guillemotright> b\\<rangle>\\<langle>t\\<rangle>.\n             s \\<in> absc ` OCC", "assume t: \"t \\<in> absc ` OCC\"\n      and ab: \"(a, b) \\<in> TI\"\n      and s: \"s \\<in> set \\<langle>a --\\<guillemotright> b\\<rangle>\\<langle>t\\<rangle>\""], ["proof (state)\nthis:\n  t \\<in> absc ` OCC\n  (a, b) \\<in> TI\n  s \\<in> set \\<langle>a --\\<guillemotright> b\\<rangle>\\<langle>t\\<rangle>\n\ngoal (1 subgoal):\n 1. \\<forall>t\\<in>absc ` OCC.\n       \\<forall>(a, b)\\<in>TI.\n          \\<forall>s\\<in>set \\<langle>a --\\<guillemotright> b\\<rangle>\\<langle>t\\<rangle>.\n             s \\<in> absc ` OCC", "obtain c where c: \"t = absc c\" \"c \\<in> OCC\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>c.\n        \\<lbrakk>t = absc c; c \\<in> OCC\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using t"], ["proof (prove)\nusing this:\n  t \\<in> absc ` OCC\n\ngoal (1 subgoal):\n 1. (\\<And>c.\n        \\<lbrakk>t = absc c; c \\<in> OCC\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by moura"], ["proof (state)\nthis:\n  t = absc c\n  c \\<in> OCC\n\ngoal (1 subgoal):\n 1. \\<forall>t\\<in>absc ` OCC.\n       \\<forall>(a, b)\\<in>TI.\n          \\<forall>s\\<in>set \\<langle>a --\\<guillemotright> b\\<rangle>\\<langle>t\\<rangle>.\n             s \\<in> absc ` OCC", "hence \"s = absc b \\<or> s = absc c\""], ["proof (prove)\nusing this:\n  t = absc c\n  c \\<in> OCC\n\ngoal (1 subgoal):\n 1. s = absc b \\<or> s = absc c", "using ab s timpl_apply_const'[of c a b]"], ["proof (prove)\nusing this:\n  t = absc c\n  c \\<in> OCC\n  (a, b) \\<in> TI\n  s \\<in> set \\<langle>a --\\<guillemotright> b\\<rangle>\\<langle>t\\<rangle>\n  c = a \\<Longrightarrow>\n  set \\<langle>a --\\<guillemotright> b\\<rangle>\\<langle>Fun (Abs c)\n                   []\\<rangle> =\n  {Fun (Abs b) [], Fun (Abs c) []}\n  c \\<noteq> a \\<Longrightarrow>\n  set \\<langle>a --\\<guillemotright> b\\<rangle>\\<langle>Fun (Abs c)\n                   []\\<rangle> =\n  {Fun (Abs c) []}\n\ngoal (1 subgoal):\n 1. s = absc b \\<or> s = absc c", "unfolding absc_def"], ["proof (prove)\nusing this:\n  t = Fun (Abs c) []\n  c \\<in> OCC\n  (a, b) \\<in> TI\n  s \\<in> set \\<langle>a --\\<guillemotright> b\\<rangle>\\<langle>t\\<rangle>\n  c = a \\<Longrightarrow>\n  set \\<langle>a --\\<guillemotright> b\\<rangle>\\<langle>Fun (Abs c)\n                   []\\<rangle> =\n  {Fun (Abs b) [], Fun (Abs c) []}\n  c \\<noteq> a \\<Longrightarrow>\n  set \\<langle>a --\\<guillemotright> b\\<rangle>\\<langle>Fun (Abs c)\n                   []\\<rangle> =\n  {Fun (Abs c) []}\n\ngoal (1 subgoal):\n 1. s = Fun (Abs b) [] \\<or> s = Fun (Abs c) []", "by auto"], ["proof (state)\nthis:\n  s = absc b \\<or> s = absc c\n\ngoal (1 subgoal):\n 1. \\<forall>t\\<in>absc ` OCC.\n       \\<forall>(a, b)\\<in>TI.\n          \\<forall>s\\<in>set \\<langle>a --\\<guillemotright> b\\<rangle>\\<langle>t\\<rangle>.\n             s \\<in> absc ` OCC", "moreover"], ["proof (state)\nthis:\n  s = absc b \\<or> s = absc c\n\ngoal (1 subgoal):\n 1. \\<forall>t\\<in>absc ` OCC.\n       \\<forall>(a, b)\\<in>TI.\n          \\<forall>s\\<in>set \\<langle>a --\\<guillemotright> b\\<rangle>\\<langle>t\\<rangle>.\n             s \\<in> absc ` OCC", "have \"b \\<in> OCC\""], ["proof (prove)\ngoal (1 subgoal):\n 1. b \\<in> OCC", "using ab OCC2"], ["proof (prove)\nusing this:\n  (a, b) \\<in> TI\n  snd ` TI \\<subseteq> OCC\n\ngoal (1 subgoal):\n 1. b \\<in> OCC", "by auto"], ["proof (state)\nthis:\n  b \\<in> OCC\n\ngoal (1 subgoal):\n 1. \\<forall>t\\<in>absc ` OCC.\n       \\<forall>(a, b)\\<in>TI.\n          \\<forall>s\\<in>set \\<langle>a --\\<guillemotright> b\\<rangle>\\<langle>t\\<rangle>.\n             s \\<in> absc ` OCC", "ultimately"], ["proof (chain)\npicking this:\n  s = absc b \\<or> s = absc c\n  b \\<in> OCC", "have \"s \\<in> absc ` OCC\""], ["proof (prove)\nusing this:\n  s = absc b \\<or> s = absc c\n  b \\<in> OCC\n\ngoal (1 subgoal):\n 1. s \\<in> absc ` OCC", "using c(2)"], ["proof (prove)\nusing this:\n  s = absc b \\<or> s = absc c\n  b \\<in> OCC\n  c \\<in> OCC\n\ngoal (1 subgoal):\n 1. s \\<in> absc ` OCC", "by blast"], ["proof (state)\nthis:\n  s \\<in> absc ` OCC\n\ngoal (1 subgoal):\n 1. \\<forall>t\\<in>absc ` OCC.\n       \\<forall>(a, b)\\<in>TI.\n          \\<forall>s\\<in>set \\<langle>a --\\<guillemotright> b\\<rangle>\\<langle>t\\<rangle>.\n             s \\<in> absc ` OCC", "}"], ["proof (state)\nthis:\n  \\<lbrakk>?t3 \\<in> absc ` OCC; (?a3, ?b3) \\<in> TI;\n   ?s3\n   \\<in> set \\<langle>?a3 --\\<guillemotright> ?b3\\<rangle>\\<langle>?t3\\<rangle>\\<rbrakk>\n  \\<Longrightarrow> ?s3 \\<in> absc ` OCC\n\ngoal (1 subgoal):\n 1. \\<forall>t\\<in>absc ` OCC.\n       \\<forall>(a, b)\\<in>TI.\n          \\<forall>s\\<in>set \\<langle>a --\\<guillemotright> b\\<rangle>\\<langle>t\\<rangle>.\n             s \\<in> absc ` OCC", "thus ?B"], ["proof (prove)\nusing this:\n  \\<lbrakk>?t3 \\<in> absc ` OCC; (?a3, ?b3) \\<in> TI;\n   ?s3\n   \\<in> set \\<langle>?a3 --\\<guillemotright> ?b3\\<rangle>\\<langle>?t3\\<rangle>\\<rbrakk>\n  \\<Longrightarrow> ?s3 \\<in> absc ` OCC\n\ngoal (1 subgoal):\n 1. \\<forall>t\\<in>absc ` OCC.\n       \\<forall>(a, b)\\<in>TI.\n          \\<forall>s\\<in>set \\<langle>a --\\<guillemotright> b\\<rangle>\\<langle>t\\<rangle>.\n             s \\<in> absc ` OCC", "by blast"], ["proof (state)\nthis:\n  \\<forall>t\\<in>absc ` OCC.\n     \\<forall>(a, b)\\<in>TI.\n        \\<forall>s\\<in>set \\<langle>a --\\<guillemotright> b\\<rangle>\\<langle>t\\<rangle>.\n           s \\<in> absc ` OCC\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in stateful_protocol_model) intruder_synth_timpl_closure_set:\n  fixes M::\"('fun,'atom,'sets) prot_terms\" and t::\"('fun,'atom,'sets) prot_term\"\n  assumes \"M \\<turnstile>\\<^sub>c t\"\n    and \"s \\<in> timpl_closure t TI\"\n  shows \"timpl_closure_set M TI \\<turnstile>\\<^sub>c s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. timpl_closure_set M TI \\<turnstile>\\<^sub>c s", "using assms"], ["proof (prove)\nusing this:\n  M \\<turnstile>\\<^sub>c t\n  s \\<in> timpl_closure t TI\n\ngoal (1 subgoal):\n 1. timpl_closure_set M TI \\<turnstile>\\<^sub>c s", "proof (induction t arbitrary: s rule: intruder_synth_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>t s.\n       \\<lbrakk>t \\<in> M; s \\<in> timpl_closure t TI\\<rbrakk>\n       \\<Longrightarrow> timpl_closure_set M TI \\<turnstile>\\<^sub>c s\n 2. \\<And>T f s.\n       \\<lbrakk>length T = arity f; public f;\n        \\<And>t. t \\<in> set T \\<Longrightarrow> M \\<turnstile>\\<^sub>c t;\n        \\<And>t s.\n           \\<lbrakk>t \\<in> set T; s \\<in> timpl_closure t TI\\<rbrakk>\n           \\<Longrightarrow> timpl_closure_set M TI \\<turnstile>\\<^sub>c s;\n        s \\<in> timpl_closure (Fun f T) TI\\<rbrakk>\n       \\<Longrightarrow> timpl_closure_set M TI \\<turnstile>\\<^sub>c s", "case (AxiomC t)"], ["proof (state)\nthis:\n  t \\<in> M\n  s \\<in> timpl_closure t TI\n\ngoal (2 subgoals):\n 1. \\<And>t s.\n       \\<lbrakk>t \\<in> M; s \\<in> timpl_closure t TI\\<rbrakk>\n       \\<Longrightarrow> timpl_closure_set M TI \\<turnstile>\\<^sub>c s\n 2. \\<And>T f s.\n       \\<lbrakk>length T = arity f; public f;\n        \\<And>t. t \\<in> set T \\<Longrightarrow> M \\<turnstile>\\<^sub>c t;\n        \\<And>t s.\n           \\<lbrakk>t \\<in> set T; s \\<in> timpl_closure t TI\\<rbrakk>\n           \\<Longrightarrow> timpl_closure_set M TI \\<turnstile>\\<^sub>c s;\n        s \\<in> timpl_closure (Fun f T) TI\\<rbrakk>\n       \\<Longrightarrow> timpl_closure_set M TI \\<turnstile>\\<^sub>c s", "hence \"s \\<in> timpl_closure_set M TI\""], ["proof (prove)\nusing this:\n  t \\<in> M\n  s \\<in> timpl_closure t TI\n\ngoal (1 subgoal):\n 1. s \\<in> timpl_closure_set M TI", "using timpl_closure_set_is_timpl_closure_union[of M TI]"], ["proof (prove)\nusing this:\n  t \\<in> M\n  s \\<in> timpl_closure t TI\n  timpl_closure_set M TI = (\\<Union>t\\<in>M. timpl_closure t TI)\n\ngoal (1 subgoal):\n 1. s \\<in> timpl_closure_set M TI", "by blast"], ["proof (state)\nthis:\n  s \\<in> timpl_closure_set M TI\n\ngoal (2 subgoals):\n 1. \\<And>t s.\n       \\<lbrakk>t \\<in> M; s \\<in> timpl_closure t TI\\<rbrakk>\n       \\<Longrightarrow> timpl_closure_set M TI \\<turnstile>\\<^sub>c s\n 2. \\<And>T f s.\n       \\<lbrakk>length T = arity f; public f;\n        \\<And>t. t \\<in> set T \\<Longrightarrow> M \\<turnstile>\\<^sub>c t;\n        \\<And>t s.\n           \\<lbrakk>t \\<in> set T; s \\<in> timpl_closure t TI\\<rbrakk>\n           \\<Longrightarrow> timpl_closure_set M TI \\<turnstile>\\<^sub>c s;\n        s \\<in> timpl_closure (Fun f T) TI\\<rbrakk>\n       \\<Longrightarrow> timpl_closure_set M TI \\<turnstile>\\<^sub>c s", "thus ?case"], ["proof (prove)\nusing this:\n  s \\<in> timpl_closure_set M TI\n\ngoal (1 subgoal):\n 1. intruder_synth (timpl_closure_set M TI) s", "by simp"], ["proof (state)\nthis:\n  intruder_synth (timpl_closure_set M TI) s\n\ngoal (1 subgoal):\n 1. \\<And>T f s.\n       \\<lbrakk>length T = arity f; public f;\n        \\<And>t. t \\<in> set T \\<Longrightarrow> M \\<turnstile>\\<^sub>c t;\n        \\<And>t s.\n           \\<lbrakk>t \\<in> set T; s \\<in> timpl_closure t TI\\<rbrakk>\n           \\<Longrightarrow> timpl_closure_set M TI \\<turnstile>\\<^sub>c s;\n        s \\<in> timpl_closure (Fun f T) TI\\<rbrakk>\n       \\<Longrightarrow> timpl_closure_set M TI \\<turnstile>\\<^sub>c s", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>T f s.\n       \\<lbrakk>length T = arity f; public f;\n        \\<And>t. t \\<in> set T \\<Longrightarrow> M \\<turnstile>\\<^sub>c t;\n        \\<And>t s.\n           \\<lbrakk>t \\<in> set T; s \\<in> timpl_closure t TI\\<rbrakk>\n           \\<Longrightarrow> timpl_closure_set M TI \\<turnstile>\\<^sub>c s;\n        s \\<in> timpl_closure (Fun f T) TI\\<rbrakk>\n       \\<Longrightarrow> timpl_closure_set M TI \\<turnstile>\\<^sub>c s", "case (ComposeC T f)"], ["proof (state)\nthis:\n  length T = arity f\n  public f\n  ?t25 \\<in> set T \\<Longrightarrow> M \\<turnstile>\\<^sub>c ?t25\n  \\<lbrakk>?t25 \\<in> set T; ?s25 \\<in> timpl_closure ?t25 TI\\<rbrakk>\n  \\<Longrightarrow> intruder_synth (timpl_closure_set M TI) ?s25\n  s \\<in> timpl_closure (Fun f T) TI\n\ngoal (1 subgoal):\n 1. \\<And>T f s.\n       \\<lbrakk>length T = arity f; public f;\n        \\<And>t. t \\<in> set T \\<Longrightarrow> M \\<turnstile>\\<^sub>c t;\n        \\<And>t s.\n           \\<lbrakk>t \\<in> set T; s \\<in> timpl_closure t TI\\<rbrakk>\n           \\<Longrightarrow> timpl_closure_set M TI \\<turnstile>\\<^sub>c s;\n        s \\<in> timpl_closure (Fun f T) TI\\<rbrakk>\n       \\<Longrightarrow> timpl_closure_set M TI \\<turnstile>\\<^sub>c s", "obtain g S where s: \"s = Fun g S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>g S. s = Fun g S \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using timpl_closure_Fun_inv[OF ComposeC.prems]"], ["proof (prove)\nusing this:\n  \\<exists>g S. s = Fun g S\n\ngoal (1 subgoal):\n 1. (\\<And>g S. s = Fun g S \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by moura"], ["proof (state)\nthis:\n  s = Fun g S\n\ngoal (1 subgoal):\n 1. \\<And>T f s.\n       \\<lbrakk>length T = arity f; public f;\n        \\<And>t. t \\<in> set T \\<Longrightarrow> M \\<turnstile>\\<^sub>c t;\n        \\<And>t s.\n           \\<lbrakk>t \\<in> set T; s \\<in> timpl_closure t TI\\<rbrakk>\n           \\<Longrightarrow> timpl_closure_set M TI \\<turnstile>\\<^sub>c s;\n        s \\<in> timpl_closure (Fun f T) TI\\<rbrakk>\n       \\<Longrightarrow> timpl_closure_set M TI \\<turnstile>\\<^sub>c s", "hence s':\n      \"f = g\" \"length S = length T\"\n      \"\\<And>i. i < length S \\<Longrightarrow> S ! i \\<in> timpl_closure (T ! i) TI\""], ["proof (prove)\nusing this:\n  s = Fun g S\n\ngoal (1 subgoal):\n 1. f = g &&&\n    length S = length T &&&\n    (\\<And>i.\n        i < length S \\<Longrightarrow> S ! i \\<in> timpl_closure (T ! i) TI)", "using timpl_closure_Fun_inv'[of g S f T TI] ComposeC.prems ComposeC.hyps(2)"], ["proof (prove)\nusing this:\n  s = Fun g S\n  Fun g S \\<in> timpl_closure (Fun f T) TI \\<Longrightarrow>\n  length S = length T\n  \\<lbrakk>Fun g S \\<in> timpl_closure (Fun f T) TI; ?i < length S\\<rbrakk>\n  \\<Longrightarrow> S ! ?i \\<in> timpl_closure (T ! ?i) TI\n  \\<lbrakk>Fun g S \\<in> timpl_closure (Fun f T) TI; f \\<noteq> g\\<rbrakk>\n  \\<Longrightarrow> is_Abs f \\<and>\n                    is_Abs g \\<and> (the_Abs f, the_Abs g) \\<in> TI\\<^sup>+\n  s \\<in> timpl_closure (Fun f T) TI\n  public f\n\ngoal (1 subgoal):\n 1. f = g &&&\n    length S = length T &&&\n    (\\<And>i.\n        i < length S \\<Longrightarrow> S ! i \\<in> timpl_closure (T ! i) TI)", "unfolding is_Abs_def"], ["proof (prove)\nusing this:\n  s = Fun g S\n  Fun g S \\<in> timpl_closure (Fun f T) TI \\<Longrightarrow>\n  length S = length T\n  \\<lbrakk>Fun g S \\<in> timpl_closure (Fun f T) TI; ?i < length S\\<rbrakk>\n  \\<Longrightarrow> S ! ?i \\<in> timpl_closure (T ! ?i) TI\n  \\<lbrakk>Fun g S \\<in> timpl_closure (Fun f T) TI; f \\<noteq> g\\<rbrakk>\n  \\<Longrightarrow> (\\<exists>x4. f = Abs x4) \\<and>\n                    (\\<exists>x4. g = Abs x4) \\<and>\n                    (the_Abs f, the_Abs g) \\<in> TI\\<^sup>+\n  s \\<in> timpl_closure (Fun f T) TI\n  public f\n\ngoal (1 subgoal):\n 1. f = g &&&\n    length S = length T &&&\n    (\\<And>i.\n        i < length S \\<Longrightarrow> S ! i \\<in> timpl_closure (T ! i) TI)", "by fastforce+"], ["proof (state)\nthis:\n  f = g\n  length S = length T\n  ?i25 < length S \\<Longrightarrow>\n  S ! ?i25 \\<in> timpl_closure (T ! ?i25) TI\n\ngoal (1 subgoal):\n 1. \\<And>T f s.\n       \\<lbrakk>length T = arity f; public f;\n        \\<And>t. t \\<in> set T \\<Longrightarrow> M \\<turnstile>\\<^sub>c t;\n        \\<And>t s.\n           \\<lbrakk>t \\<in> set T; s \\<in> timpl_closure t TI\\<rbrakk>\n           \\<Longrightarrow> timpl_closure_set M TI \\<turnstile>\\<^sub>c s;\n        s \\<in> timpl_closure (Fun f T) TI\\<rbrakk>\n       \\<Longrightarrow> timpl_closure_set M TI \\<turnstile>\\<^sub>c s", "have \"timpl_closure_set M TI \\<turnstile>\\<^sub>c u\" when u: \"u \\<in> set S\" for u"], ["proof (prove)\ngoal (1 subgoal):\n 1. timpl_closure_set M TI \\<turnstile>\\<^sub>c u", "using ComposeC.IH u s'(2,3) in_set_conv_nth[of _ T] in_set_conv_nth[of u S]"], ["proof (prove)\nusing this:\n  \\<lbrakk>?t25 \\<in> set T; ?s25 \\<in> timpl_closure ?t25 TI\\<rbrakk>\n  \\<Longrightarrow> intruder_synth (timpl_closure_set M TI) ?s25\n  u \\<in> set S\n  length S = length T\n  ?i25 < length S \\<Longrightarrow>\n  S ! ?i25 \\<in> timpl_closure (T ! ?i25) TI\n  (?x \\<in> set T) = (\\<exists>i<length T. T ! i = ?x)\n  (u \\<in> set S) = (\\<exists>i<length S. S ! i = u)\n\ngoal (1 subgoal):\n 1. timpl_closure_set M TI \\<turnstile>\\<^sub>c u", "by auto"], ["proof (state)\nthis:\n  ?u25 \\<in> set S \\<Longrightarrow>\n  timpl_closure_set M TI \\<turnstile>\\<^sub>c ?u25\n\ngoal (1 subgoal):\n 1. \\<And>T f s.\n       \\<lbrakk>length T = arity f; public f;\n        \\<And>t. t \\<in> set T \\<Longrightarrow> M \\<turnstile>\\<^sub>c t;\n        \\<And>t s.\n           \\<lbrakk>t \\<in> set T; s \\<in> timpl_closure t TI\\<rbrakk>\n           \\<Longrightarrow> timpl_closure_set M TI \\<turnstile>\\<^sub>c s;\n        s \\<in> timpl_closure (Fun f T) TI\\<rbrakk>\n       \\<Longrightarrow> timpl_closure_set M TI \\<turnstile>\\<^sub>c s", "thus ?case"], ["proof (prove)\nusing this:\n  ?u25 \\<in> set S \\<Longrightarrow>\n  timpl_closure_set M TI \\<turnstile>\\<^sub>c ?u25\n\ngoal (1 subgoal):\n 1. intruder_synth (timpl_closure_set M TI) s", "using s s'(1,2) ComposeC.hyps(1,2) intruder_synth.ComposeC[of S g \"timpl_closure_set M TI\"]"], ["proof (prove)\nusing this:\n  ?u25 \\<in> set S \\<Longrightarrow>\n  timpl_closure_set M TI \\<turnstile>\\<^sub>c ?u25\n  s = Fun g S\n  f = g\n  length S = length T\n  length T = arity f\n  public f\n  \\<lbrakk>length S = arity g; public g;\n   \\<And>t.\n      t \\<in> set S \\<Longrightarrow>\n      timpl_closure_set M TI \\<turnstile>\\<^sub>c t\\<rbrakk>\n  \\<Longrightarrow> timpl_closure_set M TI \\<turnstile>\\<^sub>c Fun g S\n\ngoal (1 subgoal):\n 1. intruder_synth (timpl_closure_set M TI) s", "by argo"], ["proof (state)\nthis:\n  intruder_synth (timpl_closure_set M TI) s\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in stateful_protocol_model) intruder_synth_timpl_closure':\n  fixes M::\"('fun,'atom,'sets) prot_terms\" and t::\"('fun,'atom,'sets) prot_term\"\n  assumes \"timpl_closure_set M TI \\<turnstile>\\<^sub>c t\"\n    and \"s \\<in> timpl_closure t TI\"\n  shows \"timpl_closure_set M TI \\<turnstile>\\<^sub>c s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. timpl_closure_set M TI \\<turnstile>\\<^sub>c s", "by (metis intruder_synth_timpl_closure_set[OF assms] timpl_closure_set_idem)"], ["", "lemma timpl_closure_set_absc_subset_in:\n  defines \"absc \\<equiv> \\<lambda>a. Fun (Abs a) []\"\n  assumes A: \"timpl_closure_set (absc ` A) TI \\<subseteq> absc ` A\"\n    and a: \"a \\<in> A\" \"(a,b) \\<in> TI\\<^sup>+\"\n  shows \"b \\<in> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. b \\<in> A", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. b \\<in> A", "have \"timpl_closure (absc a) (TI\\<^sup>+) \\<subseteq> absc ` A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. timpl_closure (absc a) (TI\\<^sup>+) \\<subseteq> absc ` A", "using a(1) A timpl_closure_timpls_trancl_eq"], ["proof (prove)\nusing this:\n  a \\<in> A\n  timpl_closure_set (absc ` A) TI \\<subseteq> absc ` A\n  timpl_closure ?t (?c\\<^sup>+) = timpl_closure ?t ?c\n\ngoal (1 subgoal):\n 1. timpl_closure (absc a) (TI\\<^sup>+) \\<subseteq> absc ` A", "unfolding timpl_closure_set_def"], ["proof (prove)\nusing this:\n  a \\<in> A\n  (\\<Union>t\\<in>absc ` A. timpl_closure t TI) \\<subseteq> absc ` A\n  timpl_closure ?t (?c\\<^sup>+) = timpl_closure ?t ?c\n\ngoal (1 subgoal):\n 1. timpl_closure (absc a) (TI\\<^sup>+) \\<subseteq> absc ` A", "by fast"], ["proof (state)\nthis:\n  timpl_closure (absc a) (TI\\<^sup>+) \\<subseteq> absc ` A\n\ngoal (1 subgoal):\n 1. b \\<in> A", "thus ?thesis"], ["proof (prove)\nusing this:\n  timpl_closure (absc a) (TI\\<^sup>+) \\<subseteq> absc ` A\n\ngoal (1 subgoal):\n 1. b \\<in> A", "using timpl_closure.TI[OF timpl_closure.FP[of \"absc a\"] a(2), of \"absc b\"]\n          term_variants_P[of \"[]\" \"[]\" \"(\\<lambda>_. [])(Abs a := [Abs b])\" \"Abs b\" \"Abs a\"]"], ["proof (prove)\nusing this:\n  timpl_closure (absc a) (TI\\<^sup>+) \\<subseteq> absc ` A\n  term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) (absc a)\n   (absc b) \\<Longrightarrow>\n  absc b \\<in> timpl_closure (absc a) (TI\\<^sup>+)\n  \\<lbrakk>length [] = length [];\n   \\<And>i.\n      i < length [] \\<Longrightarrow>\n      term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) ([] ! i)\n       ([] ! i);\n   Abs b \\<in> set (((\\<lambda>_. [])(Abs a := [Abs b])) (Abs a))\\<rbrakk>\n  \\<Longrightarrow> term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b]))\n                     (Fun (Abs a) []) (Fun (Abs b) [])\n\ngoal (1 subgoal):\n 1. b \\<in> A", "unfolding absc_def"], ["proof (prove)\nusing this:\n  timpl_closure (Fun (Abs a) []) (TI\\<^sup>+)\n  \\<subseteq> (\\<lambda>a. Fun (Abs a) []) ` A\n  term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) (Fun (Abs a) [])\n   (Fun (Abs b) []) \\<Longrightarrow>\n  Fun (Abs b) [] \\<in> timpl_closure (Fun (Abs a) []) (TI\\<^sup>+)\n  \\<lbrakk>length [] = length [];\n   \\<And>i.\n      i < length [] \\<Longrightarrow>\n      term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) ([] ! i)\n       ([] ! i);\n   Abs b \\<in> set (((\\<lambda>_. [])(Abs a := [Abs b])) (Abs a))\\<rbrakk>\n  \\<Longrightarrow> term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b]))\n                     (Fun (Abs a) []) (Fun (Abs b) [])\n\ngoal (1 subgoal):\n 1. b \\<in> A", "by auto"], ["proof (state)\nthis:\n  b \\<in> A\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Composition-only Intruder Deduction Modulo Term Implication Closure of the Intruder Knowledge\\<close>"], ["", "context stateful_protocol_model\nbegin"], ["", "fun in_trancl where\n  \"in_trancl TI a b = (\n    if (a,b) \\<in> set TI then True\n    else list_ex (\\<lambda>(c,d). c = a \\<and> in_trancl (removeAll (c,d) TI) d b) TI)\""], ["", "definition in_rtrancl where\n  \"in_rtrancl TI a b \\<equiv> a = b \\<or> in_trancl TI a b\""], ["", "declare in_trancl.simps[simp del]"], ["", "fun timpls_transformable_to where\n  \"timpls_transformable_to TI (Var x) (Var y) = (x = y)\"\n| \"timpls_transformable_to TI (Fun f T) (Fun g S) = (\n    (f = g \\<or> (is_Abs f \\<and> is_Abs g \\<and> (the_Abs f, the_Abs g) \\<in> set TI)) \\<and>\n    list_all2 (timpls_transformable_to TI) T S)\"\n| \"timpls_transformable_to _ _ _ = False\""], ["", "fun timpls_transformable_to' where\n  \"timpls_transformable_to' TI (Var x) (Var y) = (x = y)\"\n| \"timpls_transformable_to' TI (Fun f T) (Fun g S) = (\n    (f = g \\<or> (is_Abs f \\<and> is_Abs g \\<and> in_trancl TI (the_Abs f) (the_Abs g))) \\<and>\n    list_all2 (timpls_transformable_to' TI) T S)\"\n| \"timpls_transformable_to' _ _ _ = False\""], ["", "fun equal_mod_timpls where\n  \"equal_mod_timpls TI (Var x) (Var y) = (x = y)\"\n| \"equal_mod_timpls TI (Fun f T) (Fun g S) = (\n    (f = g \\<or> (is_Abs f \\<and> is_Abs g \\<and>\n                ((the_Abs f, the_Abs g) \\<in> set TI \\<or>\n                 (the_Abs g, the_Abs f) \\<in> set TI \\<or>\n                 (\\<exists>ti \\<in> set TI. (the_Abs f, snd ti) \\<in> set TI \\<and> (the_Abs g, snd ti) \\<in> set TI)))) \\<and>\n    list_all2 (equal_mod_timpls TI) T S)\"\n| \"equal_mod_timpls _ _ _ = False\""], ["", "fun intruder_synth_mod_timpls where\n  \"intruder_synth_mod_timpls M TI (Var x) = List.member M (Var x)\"\n| \"intruder_synth_mod_timpls M TI (Fun f T) = (\n    (list_ex (\\<lambda>t. timpls_transformable_to TI t (Fun f T)) M) \\<or>\n    (public f \\<and> length T = arity f \\<and> list_all (intruder_synth_mod_timpls M TI) T))\""], ["", "fun intruder_synth_mod_timpls' where\n  \"intruder_synth_mod_timpls' M TI (Var x) = List.member M (Var x)\"\n| \"intruder_synth_mod_timpls' M TI (Fun f T) = (\n    (list_ex (\\<lambda>t. timpls_transformable_to' TI t (Fun f T)) M) \\<or>\n    (public f \\<and> length T = arity f \\<and> list_all (intruder_synth_mod_timpls' M TI) T))\""], ["", "fun intruder_synth_mod_eq_timpls where\n  \"intruder_synth_mod_eq_timpls M TI (Var x) = (Var x \\<in> M)\"\n| \"intruder_synth_mod_eq_timpls M TI (Fun f T) = (\n    (\\<exists>t \\<in> M. equal_mod_timpls TI t (Fun f T)) \\<or>\n    (public f \\<and> length T = arity f \\<and> list_all (intruder_synth_mod_eq_timpls M TI) T))\""], ["", "definition analyzed_closed_mod_timpls where\n  \"analyzed_closed_mod_timpls M TI \\<equiv>\n    let f = list_all (intruder_synth_mod_timpls M TI);\n        g = \\<lambda>t. if f (fst (Ana t)) then f (snd (Ana t))\n                else \\<forall>s \\<in> comp_timpl_closure {t} (set TI). case Ana s of (K,R) \\<Rightarrow> f K \\<longrightarrow> f R\n    in list_all g M\""], ["", "definition analyzed_closed_mod_timpls' where\n  \"analyzed_closed_mod_timpls' M TI \\<equiv>\n    let f = list_all (intruder_synth_mod_timpls' M TI);\n        g = \\<lambda>t. if f (fst (Ana t)) then f (snd (Ana t))\n                else \\<forall>s \\<in> comp_timpl_closure {t} (set TI). case Ana s of (K,R) \\<Rightarrow> f K \\<longrightarrow> f R\n    in list_all g M\""], ["", "(* Alternative definition (allows for computing the closures beforehand which may be useful) *)"], ["", "definition analyzed_closed_mod_timpls_alt where\n  \"analyzed_closed_mod_timpls_alt M TI timpl_cl_witness \\<equiv>\n    let f = \\<lambda>R. \\<forall>r \\<in> set R. intruder_synth_mod_timpls M TI r;\n        N = {t \\<in> set M. f (fst (Ana t))};\n        N' = set M - N\n    in (\\<forall>t \\<in> N. f (snd (Ana t))) \\<and>\n       (N' \\<noteq> {} \\<longrightarrow> (N' \\<union> (\\<Union>x\\<in>timpl_cl_witness. \\<Union>(a,b)\\<in>set TI. set \\<langle>a --\\<guillemotright> b\\<rangle>\\<langle>x\\<rangle>) \\<subseteq> timpl_cl_witness)) \\<and>\n       (\\<forall>s \\<in> timpl_cl_witness. case Ana s of (K,R) \\<Rightarrow> f K \\<longrightarrow> f R)\""], ["", "lemma in_trancl_closure_iff_in_trancl_fun:\n  \"(a,b) \\<in> (set TI)\\<^sup>+ \\<longleftrightarrow> in_trancl TI a b\" (is \"?A TI a b \\<longleftrightarrow> ?B TI a b\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((a, b) \\<in> (set TI)\\<^sup>+) = in_trancl TI a b", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. (a, b) \\<in> (set TI)\\<^sup>+ \\<Longrightarrow> in_trancl TI a b\n 2. in_trancl TI a b \\<Longrightarrow> (a, b) \\<in> (set TI)\\<^sup>+", "show \"?A TI a b \\<Longrightarrow> ?B TI a b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (a, b) \\<in> (set TI)\\<^sup>+ \\<Longrightarrow> in_trancl TI a b", "proof (induction rule: trancl_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>y. (a, y) \\<in> set TI \\<Longrightarrow> in_trancl TI a y\n 2. \\<And>y z.\n       \\<lbrakk>(a, y) \\<in> (set TI)\\<^sup>+; (y, z) \\<in> set TI;\n        in_trancl TI a y\\<rbrakk>\n       \\<Longrightarrow> in_trancl TI a z", "case (step c d)"], ["proof (state)\nthis:\n  (a, c) \\<in> (set TI)\\<^sup>+\n  (c, d) \\<in> set TI\n  in_trancl TI a c\n\ngoal (2 subgoals):\n 1. \\<And>y. (a, y) \\<in> set TI \\<Longrightarrow> in_trancl TI a y\n 2. \\<And>y z.\n       \\<lbrakk>(a, y) \\<in> (set TI)\\<^sup>+; (y, z) \\<in> set TI;\n        in_trancl TI a y\\<rbrakk>\n       \\<Longrightarrow> in_trancl TI a z", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. in_trancl TI a d", "using step.IH step.hyps(2)"], ["proof (prove)\nusing this:\n  in_trancl TI a c\n  (c, d) \\<in> set TI\n\ngoal (1 subgoal):\n 1. in_trancl TI a d", "proof (induction TI a c rule: in_trancl.induct)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>TI a b.\n       \\<lbrakk>\\<And>x xa y.\n                   \\<lbrakk>(a, b) \\<notin> set TI; x \\<in> set TI;\n                    (xa, y) = x; in_trancl (removeAll (xa, y) TI) y b;\n                    (b, d) \\<in> set (removeAll (xa, y) TI)\\<rbrakk>\n                   \\<Longrightarrow> in_trancl (removeAll (xa, y) TI) y d;\n        in_trancl TI a b; (b, d) \\<in> set TI\\<rbrakk>\n       \\<Longrightarrow> in_trancl TI a d", "case (1 TI a b)"], ["proof (state)\nthis:\n  \\<lbrakk>(a, b) \\<notin> set TI; ?x43 \\<in> set TI; (?xa43, ?y43) = ?x43;\n   in_trancl (removeAll (?xa43, ?y43) TI) ?y43 b;\n   (b, d) \\<in> set (removeAll (?xa43, ?y43) TI)\\<rbrakk>\n  \\<Longrightarrow> in_trancl (removeAll (?xa43, ?y43) TI) ?y43 d\n  in_trancl TI a b\n  (b, d) \\<in> set TI\n\ngoal (1 subgoal):\n 1. \\<And>TI a b.\n       \\<lbrakk>\\<And>x xa y.\n                   \\<lbrakk>(a, b) \\<notin> set TI; x \\<in> set TI;\n                    (xa, y) = x; in_trancl (removeAll (xa, y) TI) y b;\n                    (b, d) \\<in> set (removeAll (xa, y) TI)\\<rbrakk>\n                   \\<Longrightarrow> in_trancl (removeAll (xa, y) TI) y d;\n        in_trancl TI a b; (b, d) \\<in> set TI\\<rbrakk>\n       \\<Longrightarrow> in_trancl TI a d", "thus ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>(a, b) \\<notin> set TI; ?x43 \\<in> set TI; (?xa43, ?y43) = ?x43;\n   in_trancl (removeAll (?xa43, ?y43) TI) ?y43 b;\n   (b, d) \\<in> set (removeAll (?xa43, ?y43) TI)\\<rbrakk>\n  \\<Longrightarrow> in_trancl (removeAll (?xa43, ?y43) TI) ?y43 d\n  in_trancl TI a b\n  (b, d) \\<in> set TI\n\ngoal (1 subgoal):\n 1. in_trancl TI a d", "using in_trancl.simps"], ["proof (prove)\nusing this:\n  \\<lbrakk>(a, b) \\<notin> set TI; ?x43 \\<in> set TI; (?xa43, ?y43) = ?x43;\n   in_trancl (removeAll (?xa43, ?y43) TI) ?y43 b;\n   (b, d) \\<in> set (removeAll (?xa43, ?y43) TI)\\<rbrakk>\n  \\<Longrightarrow> in_trancl (removeAll (?xa43, ?y43) TI) ?y43 d\n  in_trancl TI a b\n  (b, d) \\<in> set TI\n  in_trancl ?TI ?a ?b =\n  (if (?a, ?b) \\<in> set ?TI then True\n   else list_ex\n         (\\<lambda>(c, d).\n             c = ?a \\<and> in_trancl (removeAll (c, d) ?TI) d ?b)\n         ?TI)\n\ngoal (1 subgoal):\n 1. in_trancl TI a d", "by (smt Bex_set case_prodE case_prodI member_remove prod.sel(2) remove_code(1))"], ["proof (state)\nthis:\n  in_trancl TI a d\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  in_trancl TI a d\n\ngoal (1 subgoal):\n 1. \\<And>y. (a, y) \\<in> set TI \\<Longrightarrow> in_trancl TI a y", "qed (metis in_trancl.simps)"], ["proof (state)\nthis:\n  (a, b) \\<in> (set TI)\\<^sup>+ \\<Longrightarrow> in_trancl TI a b\n\ngoal (1 subgoal):\n 1. in_trancl TI a b \\<Longrightarrow> (a, b) \\<in> (set TI)\\<^sup>+", "show \"?B TI a b \\<Longrightarrow> ?A TI a b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. in_trancl TI a b \\<Longrightarrow> (a, b) \\<in> (set TI)\\<^sup>+", "proof (induction TI a b rule: in_trancl.induct)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>TI a b.\n       \\<lbrakk>\\<And>x xa y.\n                   \\<lbrakk>(a, b) \\<notin> set TI; x \\<in> set TI;\n                    (xa, y) = x;\n                    in_trancl (removeAll (xa, y) TI) y b\\<rbrakk>\n                   \\<Longrightarrow> (y, b)\n                                     \\<in> (set\n       (removeAll (xa, y) TI))\\<^sup>+;\n        in_trancl TI a b\\<rbrakk>\n       \\<Longrightarrow> (a, b) \\<in> (set TI)\\<^sup>+", "case (1 TI a b)"], ["proof (state)\nthis:\n  \\<lbrakk>(a, b) \\<notin> set TI; ?x43 \\<in> set TI; (?xa43, ?y43) = ?x43;\n   in_trancl (removeAll (?xa43, ?y43) TI) ?y43 b\\<rbrakk>\n  \\<Longrightarrow> (?y43, b)\n                    \\<in> (set (removeAll (?xa43, ?y43) TI))\\<^sup>+\n  in_trancl TI a b\n\ngoal (1 subgoal):\n 1. \\<And>TI a b.\n       \\<lbrakk>\\<And>x xa y.\n                   \\<lbrakk>(a, b) \\<notin> set TI; x \\<in> set TI;\n                    (xa, y) = x;\n                    in_trancl (removeAll (xa, y) TI) y b\\<rbrakk>\n                   \\<Longrightarrow> (y, b)\n                                     \\<in> (set\n       (removeAll (xa, y) TI))\\<^sup>+;\n        in_trancl TI a b\\<rbrakk>\n       \\<Longrightarrow> (a, b) \\<in> (set TI)\\<^sup>+", "let ?P = \"\\<lambda>TI a b c d. in_trancl (List.removeAll (c,d) TI) d b\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>TI a b.\n       \\<lbrakk>\\<And>x xa y.\n                   \\<lbrakk>(a, b) \\<notin> set TI; x \\<in> set TI;\n                    (xa, y) = x;\n                    in_trancl (removeAll (xa, y) TI) y b\\<rbrakk>\n                   \\<Longrightarrow> (y, b)\n                                     \\<in> (set\n       (removeAll (xa, y) TI))\\<^sup>+;\n        in_trancl TI a b\\<rbrakk>\n       \\<Longrightarrow> (a, b) \\<in> (set TI)\\<^sup>+", "have *: \"\\<exists>(c,d) \\<in> set TI. c = a \\<and> ?P TI a b c d\" when \"(a,b) \\<notin> set TI\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>(c, d)\\<in>set TI.\n       c = a \\<and> in_trancl (removeAll (c, d) TI) d b", "using that \"1.prems\" list_ex_iff[of _ TI] in_trancl.simps[of TI a b]"], ["proof (prove)\nusing this:\n  (a, b) \\<notin> set TI\n  in_trancl TI a b\n  list_ex ?P TI = Bex (set TI) ?P\n  in_trancl TI a b =\n  (if (a, b) \\<in> set TI then True\n   else list_ex\n         (\\<lambda>(c, d). c = a \\<and> in_trancl (removeAll (c, d) TI) d b)\n         TI)\n\ngoal (1 subgoal):\n 1. \\<exists>(c, d)\\<in>set TI.\n       c = a \\<and> in_trancl (removeAll (c, d) TI) d b", "by auto"], ["proof (state)\nthis:\n  (a, b) \\<notin> set TI \\<Longrightarrow>\n  \\<exists>(c, d)\\<in>set TI.\n     c = a \\<and> in_trancl (removeAll (c, d) TI) d b\n\ngoal (1 subgoal):\n 1. \\<And>TI a b.\n       \\<lbrakk>\\<And>x xa y.\n                   \\<lbrakk>(a, b) \\<notin> set TI; x \\<in> set TI;\n                    (xa, y) = x;\n                    in_trancl (removeAll (xa, y) TI) y b\\<rbrakk>\n                   \\<Longrightarrow> (y, b)\n                                     \\<in> (set\n       (removeAll (xa, y) TI))\\<^sup>+;\n        in_trancl TI a b\\<rbrakk>\n       \\<Longrightarrow> (a, b) \\<in> (set TI)\\<^sup>+", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. (a, b) \\<in> (set TI)\\<^sup>+", "proof (cases \"(a,b) \\<in> set TI\")"], ["proof (state)\ngoal (2 subgoals):\n 1. (a, b) \\<in> set TI \\<Longrightarrow> (a, b) \\<in> (set TI)\\<^sup>+\n 2. (a, b) \\<notin> set TI \\<Longrightarrow> (a, b) \\<in> (set TI)\\<^sup>+", "case False"], ["proof (state)\nthis:\n  (a, b) \\<notin> set TI\n\ngoal (2 subgoals):\n 1. (a, b) \\<in> set TI \\<Longrightarrow> (a, b) \\<in> (set TI)\\<^sup>+\n 2. (a, b) \\<notin> set TI \\<Longrightarrow> (a, b) \\<in> (set TI)\\<^sup>+", "hence \"\\<exists>(c,d) \\<in> set TI. c = a \\<and> ?P TI a b c d\""], ["proof (prove)\nusing this:\n  (a, b) \\<notin> set TI\n\ngoal (1 subgoal):\n 1. \\<exists>(c, d)\\<in>set TI.\n       c = a \\<and> in_trancl (removeAll (c, d) TI) d b", "using *"], ["proof (prove)\nusing this:\n  (a, b) \\<notin> set TI\n  (a, b) \\<notin> set TI \\<Longrightarrow>\n  \\<exists>(c, d)\\<in>set TI.\n     c = a \\<and> in_trancl (removeAll (c, d) TI) d b\n\ngoal (1 subgoal):\n 1. \\<exists>(c, d)\\<in>set TI.\n       c = a \\<and> in_trancl (removeAll (c, d) TI) d b", "by blast"], ["proof (state)\nthis:\n  \\<exists>(c, d)\\<in>set TI.\n     c = a \\<and> in_trancl (removeAll (c, d) TI) d b\n\ngoal (2 subgoals):\n 1. (a, b) \\<in> set TI \\<Longrightarrow> (a, b) \\<in> (set TI)\\<^sup>+\n 2. (a, b) \\<notin> set TI \\<Longrightarrow> (a, b) \\<in> (set TI)\\<^sup>+", "then"], ["proof (chain)\npicking this:\n  \\<exists>(c, d)\\<in>set TI.\n     c = a \\<and> in_trancl (removeAll (c, d) TI) d b", "obtain d where d: \"(a,d) \\<in> set TI\" \"?P TI a b a d\""], ["proof (prove)\nusing this:\n  \\<exists>(c, d)\\<in>set TI.\n     c = a \\<and> in_trancl (removeAll (c, d) TI) d b\n\ngoal (1 subgoal):\n 1. (\\<And>d.\n        \\<lbrakk>(a, d) \\<in> set TI;\n         in_trancl (removeAll (a, d) TI) d b\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  (a, d) \\<in> set TI\n  in_trancl (removeAll (a, d) TI) d b\n\ngoal (2 subgoals):\n 1. (a, b) \\<in> set TI \\<Longrightarrow> (a, b) \\<in> (set TI)\\<^sup>+\n 2. (a, b) \\<notin> set TI \\<Longrightarrow> (a, b) \\<in> (set TI)\\<^sup>+", "have \"(d,b) \\<in> (set (removeAll (a,d) TI))\\<^sup>+\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (d, b) \\<in> (set (removeAll (a, d) TI))\\<^sup>+", "using \"1.IH\"[OF False d(1)] d(2)"], ["proof (prove)\nusing this:\n  \\<lbrakk>(?xa43, ?y43) = (a, d);\n   in_trancl (removeAll (?xa43, ?y43) TI) ?y43 b\\<rbrakk>\n  \\<Longrightarrow> (?y43, b)\n                    \\<in> (set (removeAll (?xa43, ?y43) TI))\\<^sup>+\n  in_trancl (removeAll (a, d) TI) d b\n\ngoal (1 subgoal):\n 1. (d, b) \\<in> (set (removeAll (a, d) TI))\\<^sup>+", "by blast"], ["proof (state)\nthis:\n  (d, b) \\<in> (set (removeAll (a, d) TI))\\<^sup>+\n\ngoal (2 subgoals):\n 1. (a, b) \\<in> set TI \\<Longrightarrow> (a, b) \\<in> (set TI)\\<^sup>+\n 2. (a, b) \\<notin> set TI \\<Longrightarrow> (a, b) \\<in> (set TI)\\<^sup>+", "moreover"], ["proof (state)\nthis:\n  (d, b) \\<in> (set (removeAll (a, d) TI))\\<^sup>+\n\ngoal (2 subgoals):\n 1. (a, b) \\<in> set TI \\<Longrightarrow> (a, b) \\<in> (set TI)\\<^sup>+\n 2. (a, b) \\<notin> set TI \\<Longrightarrow> (a, b) \\<in> (set TI)\\<^sup>+", "have \"set (removeAll (a,d) TI) \\<subseteq> set TI\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (removeAll (a, d) TI) \\<subseteq> set TI", "by simp"], ["proof (state)\nthis:\n  set (removeAll (a, d) TI) \\<subseteq> set TI\n\ngoal (2 subgoals):\n 1. (a, b) \\<in> set TI \\<Longrightarrow> (a, b) \\<in> (set TI)\\<^sup>+\n 2. (a, b) \\<notin> set TI \\<Longrightarrow> (a, b) \\<in> (set TI)\\<^sup>+", "ultimately"], ["proof (chain)\npicking this:\n  (d, b) \\<in> (set (removeAll (a, d) TI))\\<^sup>+\n  set (removeAll (a, d) TI) \\<subseteq> set TI", "have \"(d,b) \\<in> (set TI)\\<^sup>+\""], ["proof (prove)\nusing this:\n  (d, b) \\<in> (set (removeAll (a, d) TI))\\<^sup>+\n  set (removeAll (a, d) TI) \\<subseteq> set TI\n\ngoal (1 subgoal):\n 1. (d, b) \\<in> (set TI)\\<^sup>+", "using trancl_mono"], ["proof (prove)\nusing this:\n  (d, b) \\<in> (set (removeAll (a, d) TI))\\<^sup>+\n  set (removeAll (a, d) TI) \\<subseteq> set TI\n  \\<lbrakk>?p \\<in> ?r\\<^sup>+; ?r \\<subseteq> ?s\\<rbrakk>\n  \\<Longrightarrow> ?p \\<in> ?s\\<^sup>+\n\ngoal (1 subgoal):\n 1. (d, b) \\<in> (set TI)\\<^sup>+", "by blast"], ["proof (state)\nthis:\n  (d, b) \\<in> (set TI)\\<^sup>+\n\ngoal (2 subgoals):\n 1. (a, b) \\<in> set TI \\<Longrightarrow> (a, b) \\<in> (set TI)\\<^sup>+\n 2. (a, b) \\<notin> set TI \\<Longrightarrow> (a, b) \\<in> (set TI)\\<^sup>+", "thus ?thesis"], ["proof (prove)\nusing this:\n  (d, b) \\<in> (set TI)\\<^sup>+\n\ngoal (1 subgoal):\n 1. (a, b) \\<in> (set TI)\\<^sup>+", "using d(1)"], ["proof (prove)\nusing this:\n  (d, b) \\<in> (set TI)\\<^sup>+\n  (a, d) \\<in> set TI\n\ngoal (1 subgoal):\n 1. (a, b) \\<in> (set TI)\\<^sup>+", "by fastforce"], ["proof (state)\nthis:\n  (a, b) \\<in> (set TI)\\<^sup>+\n\ngoal (1 subgoal):\n 1. (a, b) \\<in> set TI \\<Longrightarrow> (a, b) \\<in> (set TI)\\<^sup>+", "qed simp"], ["proof (state)\nthis:\n  (a, b) \\<in> (set TI)\\<^sup>+\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  in_trancl TI a b \\<Longrightarrow> (a, b) \\<in> (set TI)\\<^sup>+\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma in_rtrancl_closure_iff_in_rtrancl_fun:\n  \"(a,b) \\<in> (set TI)\\<^sup>* \\<longleftrightarrow> in_rtrancl TI a b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((a, b) \\<in> (set TI)\\<^sup>*) = in_rtrancl TI a b", "by (metis rtrancl_eq_or_trancl in_trancl_closure_iff_in_trancl_fun in_rtrancl_def)"], ["", "lemma in_trancl_mono:\n  assumes \"set TI \\<subseteq> set TI'\"\n    and \"in_trancl TI a b\"\n  shows \"in_trancl TI' a b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. in_trancl TI' a b", "by (metis assms in_trancl_closure_iff_in_trancl_fun trancl_mono)"], ["", "lemma equal_mod_timpls_refl:\n  \"equal_mod_timpls TI t t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. equal_mod_timpls TI t t", "proof (induction t)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x. equal_mod_timpls TI (Var x) (Var x)\n 2. \\<And>x1a x2.\n       (\\<And>x2a.\n           x2a \\<in> set x2 \\<Longrightarrow>\n           equal_mod_timpls TI x2a x2a) \\<Longrightarrow>\n       equal_mod_timpls TI (Fun x1a x2) (Fun x1a x2)", "case (Fun f T)"], ["proof (state)\nthis:\n  ?x2a43 \\<in> set T \\<Longrightarrow> equal_mod_timpls TI ?x2a43 ?x2a43\n\ngoal (2 subgoals):\n 1. \\<And>x. equal_mod_timpls TI (Var x) (Var x)\n 2. \\<And>x1a x2.\n       (\\<And>x2a.\n           x2a \\<in> set x2 \\<Longrightarrow>\n           equal_mod_timpls TI x2a x2a) \\<Longrightarrow>\n       equal_mod_timpls TI (Fun x1a x2) (Fun x1a x2)", "thus ?case"], ["proof (prove)\nusing this:\n  ?x2a43 \\<in> set T \\<Longrightarrow> equal_mod_timpls TI ?x2a43 ?x2a43\n\ngoal (1 subgoal):\n 1. equal_mod_timpls TI (Fun f T) (Fun f T)", "using list_all2_conv_all_nth[of \"equal_mod_timpls TI\" T T]"], ["proof (prove)\nusing this:\n  ?x2a43 \\<in> set T \\<Longrightarrow> equal_mod_timpls TI ?x2a43 ?x2a43\n  list_all2 (equal_mod_timpls TI) T T =\n  (length T = length T \\<and>\n   (\\<forall>i<length T. equal_mod_timpls TI (T ! i) (T ! i)))\n\ngoal (1 subgoal):\n 1. equal_mod_timpls TI (Fun f T) (Fun f T)", "by force"], ["proof (state)\nthis:\n  equal_mod_timpls TI (Fun f T) (Fun f T)\n\ngoal (1 subgoal):\n 1. \\<And>x. equal_mod_timpls TI (Var x) (Var x)", "qed simp"], ["", "lemma equal_mod_timpls_inv_Var:\n  \"equal_mod_timpls TI (Var x) t \\<Longrightarrow> t = Var x\" (is \"?A \\<Longrightarrow> ?C\")\n  \"equal_mod_timpls TI t (Var x) \\<Longrightarrow> t = Var x\" (is \"?B \\<Longrightarrow> ?C\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (equal_mod_timpls TI (Var x) t \\<Longrightarrow> t = Var x) &&&\n    (equal_mod_timpls TI t (Var x) \\<Longrightarrow> t = Var x)", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. equal_mod_timpls TI (Var x) t \\<Longrightarrow> t = Var x\n 2. equal_mod_timpls TI t (Var x) \\<Longrightarrow> t = Var x", "show \"?A \\<Longrightarrow> ?C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. equal_mod_timpls TI (Var x) t \\<Longrightarrow> t = Var x", "by (cases t) auto"], ["proof (state)\nthis:\n  equal_mod_timpls TI (Var x) t \\<Longrightarrow> t = Var x\n\ngoal (1 subgoal):\n 1. equal_mod_timpls TI t (Var x) \\<Longrightarrow> t = Var x", "show \"?B \\<Longrightarrow> ?C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. equal_mod_timpls TI t (Var x) \\<Longrightarrow> t = Var x", "by (cases t) auto"], ["proof (state)\nthis:\n  equal_mod_timpls TI t (Var x) \\<Longrightarrow> t = Var x\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma equal_mod_timpls_inv:\n  assumes \"equal_mod_timpls TI (Fun f T) (Fun g S)\"\n  shows \"length T = length S\"\n    and \"\\<And>i. i < length T \\<Longrightarrow> equal_mod_timpls TI (T ! i) (S ! i)\"\n    and \"f \\<noteq> g \\<Longrightarrow> (is_Abs f \\<and> is_Abs g \\<and> (\n                      (the_Abs f, the_Abs g) \\<in> set TI \\<or> (the_Abs g, the_Abs f) \\<in> set TI \\<or>\n                      (\\<exists>ti \\<in> set TI. (the_Abs f, snd ti) \\<in> set TI \\<and>\n                                     (the_Abs g, snd ti) \\<in> set TI)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length T = length S &&&\n    (\\<And>i.\n        i < length T \\<Longrightarrow>\n        equal_mod_timpls TI (T ! i) (S ! i)) &&&\n    (f \\<noteq> g \\<Longrightarrow>\n     is_Abs f \\<and>\n     is_Abs g \\<and>\n     ((the_Abs f, the_Abs g) \\<in> set TI \\<or>\n      (the_Abs g, the_Abs f) \\<in> set TI \\<or>\n      (\\<exists>ti\\<in>set TI.\n          (the_Abs f, snd ti) \\<in> set TI \\<and>\n          (the_Abs g, snd ti) \\<in> set TI)))", "using assms list_all2_conv_all_nth[of \"equal_mod_timpls TI\" T S]"], ["proof (prove)\nusing this:\n  equal_mod_timpls TI (Fun f T) (Fun g S)\n  list_all2 (equal_mod_timpls TI) T S =\n  (length T = length S \\<and>\n   (\\<forall>i<length T. equal_mod_timpls TI (T ! i) (S ! i)))\n\ngoal (1 subgoal):\n 1. length T = length S &&&\n    (\\<And>i.\n        i < length T \\<Longrightarrow>\n        equal_mod_timpls TI (T ! i) (S ! i)) &&&\n    (f \\<noteq> g \\<Longrightarrow>\n     is_Abs f \\<and>\n     is_Abs g \\<and>\n     ((the_Abs f, the_Abs g) \\<in> set TI \\<or>\n      (the_Abs g, the_Abs f) \\<in> set TI \\<or>\n      (\\<exists>ti\\<in>set TI.\n          (the_Abs f, snd ti) \\<in> set TI \\<and>\n          (the_Abs g, snd ti) \\<in> set TI)))", "by (auto elim: equal_mod_timpls.cases)"], ["", "lemma equal_mod_timpls_inv':\n  assumes \"equal_mod_timpls TI (Fun f T) t\"\n  shows \"is_Fun t\"\n    and \"length T = length (args t)\"\n    and \"\\<And>i. i < length T \\<Longrightarrow> equal_mod_timpls TI (T ! i) (args t ! i)\"\n    and \"f \\<noteq> the_Fun t \\<Longrightarrow> (is_Abs f \\<and> is_Abs (the_Fun t) \\<and> (\n                      (the_Abs f, the_Abs (the_Fun t)) \\<in> set TI \\<or>\n                      (the_Abs (the_Fun t), the_Abs f) \\<in> set TI \\<or>\n                      (\\<exists>ti \\<in> set TI. (the_Abs f, snd ti) \\<in> set TI \\<and>\n                                     (the_Abs (the_Fun t), snd ti) \\<in> set TI)))\"\n    and \"\\<not>is_Abs f \\<Longrightarrow> f = the_Fun t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (is_Fun t &&& length T = length (args t)) &&&\n    (\\<And>i.\n        i < length T \\<Longrightarrow>\n        equal_mod_timpls TI (T ! i) (args t ! i)) &&&\n    (f \\<noteq> the_Fun t \\<Longrightarrow>\n     is_Abs f \\<and>\n     is_Abs (the_Fun t) \\<and>\n     ((the_Abs f, the_Abs (the_Fun t)) \\<in> set TI \\<or>\n      (the_Abs (the_Fun t), the_Abs f) \\<in> set TI \\<or>\n      (\\<exists>ti\\<in>set TI.\n          (the_Abs f, snd ti) \\<in> set TI \\<and>\n          (the_Abs (the_Fun t), snd ti) \\<in> set TI))) &&&\n    (\\<not> is_Abs f \\<Longrightarrow> f = the_Fun t)", "using assms list_all2_conv_all_nth[of \"equal_mod_timpls TI\" T]"], ["proof (prove)\nusing this:\n  equal_mod_timpls TI (Fun f T) t\n  list_all2 (equal_mod_timpls TI) T ?ys =\n  (length T = length ?ys \\<and>\n   (\\<forall>i<length T. equal_mod_timpls TI (T ! i) (?ys ! i)))\n\ngoal (1 subgoal):\n 1. (is_Fun t &&& length T = length (args t)) &&&\n    (\\<And>i.\n        i < length T \\<Longrightarrow>\n        equal_mod_timpls TI (T ! i) (args t ! i)) &&&\n    (f \\<noteq> the_Fun t \\<Longrightarrow>\n     is_Abs f \\<and>\n     is_Abs (the_Fun t) \\<and>\n     ((the_Abs f, the_Abs (the_Fun t)) \\<in> set TI \\<or>\n      (the_Abs (the_Fun t), the_Abs f) \\<in> set TI \\<or>\n      (\\<exists>ti\\<in>set TI.\n          (the_Abs f, snd ti) \\<in> set TI \\<and>\n          (the_Abs (the_Fun t), snd ti) \\<in> set TI))) &&&\n    (\\<not> is_Abs f \\<Longrightarrow> f = the_Fun t)", "by (cases t; auto)+"], ["", "lemma equal_mod_timpls_if_term_variants:\n  fixes s t::\"(('a, 'b, 'c) prot_fun, 'd) term\" and a b::\"'c set\"\n  defines \"P \\<equiv> (\\<lambda>_. [])(Abs a := [Abs b])\"\n  assumes st: \"term_variants_pred P s t\"\n    and ab: \"(a,b) \\<in> set TI\"\n  shows \"equal_mod_timpls TI s t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. equal_mod_timpls TI s t", "using st P_def"], ["proof (prove)\nusing this:\n  term_variants_pred P s t\n  P \\<equiv> (\\<lambda>_. [])(Abs a := [Abs b])\n\ngoal (1 subgoal):\n 1. equal_mod_timpls TI s t", "proof (induction rule: term_variants_pred.induct)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x. equal_mod_timpls TI (Var x) (Var x)\n 2. \\<And>T S g f.\n       \\<lbrakk>length T = length S;\n        \\<And>i.\n           i < length T \\<Longrightarrow>\n           term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) (T ! i)\n            (S ! i);\n        \\<And>i.\n           i < length T \\<Longrightarrow>\n           equal_mod_timpls TI (T ! i) (S ! i);\n        g \\<in> set (((\\<lambda>_. [])(Abs a := [Abs b])) f)\\<rbrakk>\n       \\<Longrightarrow> equal_mod_timpls TI (Fun f T) (Fun g S)\n 3. \\<And>T S f.\n       \\<lbrakk>length T = length S;\n        \\<And>i.\n           i < length T \\<Longrightarrow>\n           term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) (T ! i)\n            (S ! i);\n        \\<And>i.\n           i < length T \\<Longrightarrow>\n           equal_mod_timpls TI (T ! i) (S ! i)\\<rbrakk>\n       \\<Longrightarrow> equal_mod_timpls TI (Fun f T) (Fun f S)", "case (term_variants_P T S f)"], ["proof (state)\nthis:\n  length T = length S\n  ?i43 < length T \\<Longrightarrow>\n  term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) (T ! ?i43)\n   (S ! ?i43)\n  ?i43 < length T \\<Longrightarrow>\n  equal_mod_timpls TI (T ! ?i43) (S ! ?i43)\n  f \\<in> set (((\\<lambda>_. [])(Abs a := [Abs b])) f_)\n\ngoal (3 subgoals):\n 1. \\<And>x. equal_mod_timpls TI (Var x) (Var x)\n 2. \\<And>T S g f.\n       \\<lbrakk>length T = length S;\n        \\<And>i.\n           i < length T \\<Longrightarrow>\n           term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) (T ! i)\n            (S ! i);\n        \\<And>i.\n           i < length T \\<Longrightarrow>\n           equal_mod_timpls TI (T ! i) (S ! i);\n        g \\<in> set (((\\<lambda>_. [])(Abs a := [Abs b])) f)\\<rbrakk>\n       \\<Longrightarrow> equal_mod_timpls TI (Fun f T) (Fun g S)\n 3. \\<And>T S f.\n       \\<lbrakk>length T = length S;\n        \\<And>i.\n           i < length T \\<Longrightarrow>\n           term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) (T ! i)\n            (S ! i);\n        \\<And>i.\n           i < length T \\<Longrightarrow>\n           equal_mod_timpls TI (T ! i) (S ! i)\\<rbrakk>\n       \\<Longrightarrow> equal_mod_timpls TI (Fun f T) (Fun f S)", "thus ?case"], ["proof (prove)\nusing this:\n  length T = length S\n  ?i43 < length T \\<Longrightarrow>\n  term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) (T ! ?i43)\n   (S ! ?i43)\n  ?i43 < length T \\<Longrightarrow>\n  equal_mod_timpls TI (T ! ?i43) (S ! ?i43)\n  f \\<in> set (((\\<lambda>_. [])(Abs a := [Abs b])) f_)\n\ngoal (1 subgoal):\n 1. equal_mod_timpls TI (Fun f_ T) (Fun f S)", "using ab list_all2_conv_all_nth[of \"equal_mod_timpls TI\" T S]\n          in_trancl_closure_iff_in_trancl_fun[of _ _ TI]"], ["proof (prove)\nusing this:\n  length T = length S\n  ?i43 < length T \\<Longrightarrow>\n  term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) (T ! ?i43)\n   (S ! ?i43)\n  ?i43 < length T \\<Longrightarrow>\n  equal_mod_timpls TI (T ! ?i43) (S ! ?i43)\n  f \\<in> set (((\\<lambda>_. [])(Abs a := [Abs b])) f_)\n  (a, b) \\<in> set TI\n  list_all2 (equal_mod_timpls TI) T S =\n  (length T = length S \\<and>\n   (\\<forall>i<length T. equal_mod_timpls TI (T ! i) (S ! i)))\n  ((?a, ?b) \\<in> (set TI)\\<^sup>+) = in_trancl TI ?a ?b\n\ngoal (1 subgoal):\n 1. equal_mod_timpls TI (Fun f_ T) (Fun f S)", "by auto"], ["proof (state)\nthis:\n  equal_mod_timpls TI (Fun f_ T) (Fun f S)\n\ngoal (2 subgoals):\n 1. \\<And>x. equal_mod_timpls TI (Var x) (Var x)\n 2. \\<And>T S f.\n       \\<lbrakk>length T = length S;\n        \\<And>i.\n           i < length T \\<Longrightarrow>\n           term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) (T ! i)\n            (S ! i);\n        \\<And>i.\n           i < length T \\<Longrightarrow>\n           equal_mod_timpls TI (T ! i) (S ! i)\\<rbrakk>\n       \\<Longrightarrow> equal_mod_timpls TI (Fun f T) (Fun f S)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x. equal_mod_timpls TI (Var x) (Var x)\n 2. \\<And>T S f.\n       \\<lbrakk>length T = length S;\n        \\<And>i.\n           i < length T \\<Longrightarrow>\n           term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) (T ! i)\n            (S ! i);\n        \\<And>i.\n           i < length T \\<Longrightarrow>\n           equal_mod_timpls TI (T ! i) (S ! i)\\<rbrakk>\n       \\<Longrightarrow> equal_mod_timpls TI (Fun f T) (Fun f S)", "case (term_variants_Fun T S f)"], ["proof (state)\nthis:\n  length T = length S\n  ?i43 < length T \\<Longrightarrow>\n  term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) (T ! ?i43)\n   (S ! ?i43)\n  ?i43 < length T \\<Longrightarrow>\n  equal_mod_timpls TI (T ! ?i43) (S ! ?i43)\n\ngoal (2 subgoals):\n 1. \\<And>x. equal_mod_timpls TI (Var x) (Var x)\n 2. \\<And>T S f.\n       \\<lbrakk>length T = length S;\n        \\<And>i.\n           i < length T \\<Longrightarrow>\n           term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) (T ! i)\n            (S ! i);\n        \\<And>i.\n           i < length T \\<Longrightarrow>\n           equal_mod_timpls TI (T ! i) (S ! i)\\<rbrakk>\n       \\<Longrightarrow> equal_mod_timpls TI (Fun f T) (Fun f S)", "thus ?case"], ["proof (prove)\nusing this:\n  length T = length S\n  ?i43 < length T \\<Longrightarrow>\n  term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) (T ! ?i43)\n   (S ! ?i43)\n  ?i43 < length T \\<Longrightarrow>\n  equal_mod_timpls TI (T ! ?i43) (S ! ?i43)\n\ngoal (1 subgoal):\n 1. equal_mod_timpls TI (Fun f T) (Fun f S)", "using ab list_all2_conv_all_nth[of \"equal_mod_timpls TI\" T S]\n          in_trancl_closure_iff_in_trancl_fun[of _ _ TI]"], ["proof (prove)\nusing this:\n  length T = length S\n  ?i43 < length T \\<Longrightarrow>\n  term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) (T ! ?i43)\n   (S ! ?i43)\n  ?i43 < length T \\<Longrightarrow>\n  equal_mod_timpls TI (T ! ?i43) (S ! ?i43)\n  (a, b) \\<in> set TI\n  list_all2 (equal_mod_timpls TI) T S =\n  (length T = length S \\<and>\n   (\\<forall>i<length T. equal_mod_timpls TI (T ! i) (S ! i)))\n  ((?a, ?b) \\<in> (set TI)\\<^sup>+) = in_trancl TI ?a ?b\n\ngoal (1 subgoal):\n 1. equal_mod_timpls TI (Fun f T) (Fun f S)", "by auto"], ["proof (state)\nthis:\n  equal_mod_timpls TI (Fun f T) (Fun f S)\n\ngoal (1 subgoal):\n 1. \\<And>x. equal_mod_timpls TI (Var x) (Var x)", "qed simp"], ["", "lemma equal_mod_timpls_mono:\n  assumes \"set TI \\<subseteq> set TI'\"\n    and \"equal_mod_timpls TI s t\"\n  shows \"equal_mod_timpls TI' s t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. equal_mod_timpls TI' s t", "using assms"], ["proof (prove)\nusing this:\n  set TI \\<subseteq> set TI'\n  equal_mod_timpls TI s t\n\ngoal (1 subgoal):\n 1. equal_mod_timpls TI' s t", "proof (induction TI s t rule: equal_mod_timpls.induct)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>TI x y.\n       \\<lbrakk>set TI \\<subseteq> set TI';\n        equal_mod_timpls TI (Var x) (Var y)\\<rbrakk>\n       \\<Longrightarrow> equal_mod_timpls TI' (Var x) (Var y)\n 2. \\<And>TI f T g S.\n       \\<lbrakk>\\<And>z yb.\n                   \\<lbrakk>z \\<in> set T; yb \\<in> set S;\n                    set TI \\<subseteq> set TI';\n                    equal_mod_timpls TI z yb\\<rbrakk>\n                   \\<Longrightarrow> equal_mod_timpls TI' z yb;\n        set TI \\<subseteq> set TI';\n        equal_mod_timpls TI (Fun f T) (Fun g S)\\<rbrakk>\n       \\<Longrightarrow> equal_mod_timpls TI' (Fun f T) (Fun g S)\n 3. \\<And>uu_ v va vb.\n       \\<lbrakk>set uu_ \\<subseteq> set TI';\n        equal_mod_timpls uu_ (Fun v va) (Var vb)\\<rbrakk>\n       \\<Longrightarrow> equal_mod_timpls TI' (Fun v va) (Var vb)\n 4. \\<And>uu_ vb v va.\n       \\<lbrakk>set uu_ \\<subseteq> set TI';\n        equal_mod_timpls uu_ (Var vb) (Fun v va)\\<rbrakk>\n       \\<Longrightarrow> equal_mod_timpls TI' (Var vb) (Fun v va)", "case (2 TI f T g S)"], ["proof (state)\nthis:\n  \\<lbrakk>?z43 \\<in> set T; ?yb43 \\<in> set S; set TI \\<subseteq> set TI';\n   equal_mod_timpls TI ?z43 ?yb43\\<rbrakk>\n  \\<Longrightarrow> equal_mod_timpls TI' ?z43 ?yb43\n  set TI \\<subseteq> set TI'\n  equal_mod_timpls TI (Fun f T) (Fun g S)\n\ngoal (4 subgoals):\n 1. \\<And>TI x y.\n       \\<lbrakk>set TI \\<subseteq> set TI';\n        equal_mod_timpls TI (Var x) (Var y)\\<rbrakk>\n       \\<Longrightarrow> equal_mod_timpls TI' (Var x) (Var y)\n 2. \\<And>TI f T g S.\n       \\<lbrakk>\\<And>z yb.\n                   \\<lbrakk>z \\<in> set T; yb \\<in> set S;\n                    set TI \\<subseteq> set TI';\n                    equal_mod_timpls TI z yb\\<rbrakk>\n                   \\<Longrightarrow> equal_mod_timpls TI' z yb;\n        set TI \\<subseteq> set TI';\n        equal_mod_timpls TI (Fun f T) (Fun g S)\\<rbrakk>\n       \\<Longrightarrow> equal_mod_timpls TI' (Fun f T) (Fun g S)\n 3. \\<And>uu_ v va vb.\n       \\<lbrakk>set uu_ \\<subseteq> set TI';\n        equal_mod_timpls uu_ (Fun v va) (Var vb)\\<rbrakk>\n       \\<Longrightarrow> equal_mod_timpls TI' (Fun v va) (Var vb)\n 4. \\<And>uu_ vb v va.\n       \\<lbrakk>set uu_ \\<subseteq> set TI';\n        equal_mod_timpls uu_ (Var vb) (Fun v va)\\<rbrakk>\n       \\<Longrightarrow> equal_mod_timpls TI' (Var vb) (Fun v va)", "have *: \"f = g \\<or> (is_Abs f \\<and> is_Abs g \\<and> ((the_Abs f, the_Abs g) \\<in> set TI \\<or>\n                 (the_Abs g, the_Abs f) \\<in> set TI \\<or>\n                 (\\<exists>ti \\<in> set TI. (the_Abs f, snd ti) \\<in> set TI \\<and>\n                                (the_Abs g, snd ti) \\<in> set TI)))\"\n          \"list_all2 (equal_mod_timpls TI) T S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f = g \\<or>\n    is_Abs f \\<and>\n    is_Abs g \\<and>\n    ((the_Abs f, the_Abs g) \\<in> set TI \\<or>\n     (the_Abs g, the_Abs f) \\<in> set TI \\<or>\n     (\\<exists>ti\\<in>set TI.\n         (the_Abs f, snd ti) \\<in> set TI \\<and>\n         (the_Abs g, snd ti) \\<in> set TI)) &&&\n    list_all2 (equal_mod_timpls TI) T S", "using \"2.prems\""], ["proof (prove)\nusing this:\n  set TI \\<subseteq> set TI'\n  equal_mod_timpls TI (Fun f T) (Fun g S)\n\ngoal (1 subgoal):\n 1. f = g \\<or>\n    is_Abs f \\<and>\n    is_Abs g \\<and>\n    ((the_Abs f, the_Abs g) \\<in> set TI \\<or>\n     (the_Abs g, the_Abs f) \\<in> set TI \\<or>\n     (\\<exists>ti\\<in>set TI.\n         (the_Abs f, snd ti) \\<in> set TI \\<and>\n         (the_Abs g, snd ti) \\<in> set TI)) &&&\n    list_all2 (equal_mod_timpls TI) T S", "by simp_all"], ["proof (state)\nthis:\n  f = g \\<or>\n  is_Abs f \\<and>\n  is_Abs g \\<and>\n  ((the_Abs f, the_Abs g) \\<in> set TI \\<or>\n   (the_Abs g, the_Abs f) \\<in> set TI \\<or>\n   (\\<exists>ti\\<in>set TI.\n       (the_Abs f, snd ti) \\<in> set TI \\<and>\n       (the_Abs g, snd ti) \\<in> set TI))\n  list_all2 (equal_mod_timpls TI) T S\n\ngoal (4 subgoals):\n 1. \\<And>TI x y.\n       \\<lbrakk>set TI \\<subseteq> set TI';\n        equal_mod_timpls TI (Var x) (Var y)\\<rbrakk>\n       \\<Longrightarrow> equal_mod_timpls TI' (Var x) (Var y)\n 2. \\<And>TI f T g S.\n       \\<lbrakk>\\<And>z yb.\n                   \\<lbrakk>z \\<in> set T; yb \\<in> set S;\n                    set TI \\<subseteq> set TI';\n                    equal_mod_timpls TI z yb\\<rbrakk>\n                   \\<Longrightarrow> equal_mod_timpls TI' z yb;\n        set TI \\<subseteq> set TI';\n        equal_mod_timpls TI (Fun f T) (Fun g S)\\<rbrakk>\n       \\<Longrightarrow> equal_mod_timpls TI' (Fun f T) (Fun g S)\n 3. \\<And>uu_ v va vb.\n       \\<lbrakk>set uu_ \\<subseteq> set TI';\n        equal_mod_timpls uu_ (Fun v va) (Var vb)\\<rbrakk>\n       \\<Longrightarrow> equal_mod_timpls TI' (Fun v va) (Var vb)\n 4. \\<And>uu_ vb v va.\n       \\<lbrakk>set uu_ \\<subseteq> set TI';\n        equal_mod_timpls uu_ (Var vb) (Fun v va)\\<rbrakk>\n       \\<Longrightarrow> equal_mod_timpls TI' (Var vb) (Fun v va)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. equal_mod_timpls TI' (Fun f T) (Fun g S)", "using \"2.IH\" \"2.prems\"(1) list.rel_mono_strong[OF *(2)] *(1) in_trancl_mono[of TI TI']"], ["proof (prove)\nusing this:\n  \\<lbrakk>?z43 \\<in> set T; ?yb43 \\<in> set S; set TI \\<subseteq> set TI';\n   equal_mod_timpls TI ?z43 ?yb43\\<rbrakk>\n  \\<Longrightarrow> equal_mod_timpls TI' ?z43 ?yb43\n  set TI \\<subseteq> set TI'\n  (\\<And>z yb.\n      \\<lbrakk>z \\<in> set T; yb \\<in> set S;\n       equal_mod_timpls TI z yb\\<rbrakk>\n      \\<Longrightarrow> ?Ra z yb) \\<Longrightarrow>\n  list_all2 ?Ra T S\n  f = g \\<or>\n  is_Abs f \\<and>\n  is_Abs g \\<and>\n  ((the_Abs f, the_Abs g) \\<in> set TI \\<or>\n   (the_Abs g, the_Abs f) \\<in> set TI \\<or>\n   (\\<exists>ti\\<in>set TI.\n       (the_Abs f, snd ti) \\<in> set TI \\<and>\n       (the_Abs g, snd ti) \\<in> set TI))\n  \\<lbrakk>set TI \\<subseteq> set TI'; in_trancl TI ?a ?b\\<rbrakk>\n  \\<Longrightarrow> in_trancl TI' ?a ?b\n\ngoal (1 subgoal):\n 1. equal_mod_timpls TI' (Fun f T) (Fun g S)", "by (metis (no_types, lifting) equal_mod_timpls.simps(2) set_rev_mp)"], ["proof (state)\nthis:\n  equal_mod_timpls TI' (Fun f T) (Fun g S)\n\ngoal (3 subgoals):\n 1. \\<And>TI x y.\n       \\<lbrakk>set TI \\<subseteq> set TI';\n        equal_mod_timpls TI (Var x) (Var y)\\<rbrakk>\n       \\<Longrightarrow> equal_mod_timpls TI' (Var x) (Var y)\n 2. \\<And>uu_ v va vb.\n       \\<lbrakk>set uu_ \\<subseteq> set TI';\n        equal_mod_timpls uu_ (Fun v va) (Var vb)\\<rbrakk>\n       \\<Longrightarrow> equal_mod_timpls TI' (Fun v va) (Var vb)\n 3. \\<And>uu_ vb v va.\n       \\<lbrakk>set uu_ \\<subseteq> set TI';\n        equal_mod_timpls uu_ (Var vb) (Fun v va)\\<rbrakk>\n       \\<Longrightarrow> equal_mod_timpls TI' (Var vb) (Fun v va)", "qed auto"], ["", "lemma equal_mod_timpls_refl_minus_eq:\n  \"equal_mod_timpls TI s t \\<longleftrightarrow> equal_mod_timpls (filter (\\<lambda>(a,b). a \\<noteq> b) TI) s t\"\n  (is \"?A \\<longleftrightarrow> ?B\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. equal_mod_timpls TI s t =\n    equal_mod_timpls (filter (\\<lambda>(a, b). a \\<noteq> b) TI) s t", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. equal_mod_timpls TI s t \\<Longrightarrow>\n    equal_mod_timpls (filter (\\<lambda>(a, b). a \\<noteq> b) TI) s t\n 2. equal_mod_timpls (filter (\\<lambda>(a, b). a \\<noteq> b) TI) s\n     t \\<Longrightarrow>\n    equal_mod_timpls TI s t", "show ?A when ?B"], ["proof (prove)\ngoal (1 subgoal):\n 1. equal_mod_timpls TI s t", "using that equal_mod_timpls_mono[of \"filter (\\<lambda>(a,b). a \\<noteq> b) TI\" TI]"], ["proof (prove)\nusing this:\n  equal_mod_timpls (filter (\\<lambda>(a, b). a \\<noteq> b) TI) s t\n  \\<lbrakk>set (filter (\\<lambda>(a, b). a \\<noteq> b) TI)\n           \\<subseteq> set TI;\n   equal_mod_timpls (filter (\\<lambda>(a, b). a \\<noteq> b) TI) ?s\n    ?t\\<rbrakk>\n  \\<Longrightarrow> equal_mod_timpls TI ?s ?t\n\ngoal (1 subgoal):\n 1. equal_mod_timpls TI s t", "by auto"], ["proof (state)\nthis:\n  equal_mod_timpls (filter (\\<lambda>(a, b). a \\<noteq> b) TI) s\n   t \\<Longrightarrow>\n  equal_mod_timpls TI s t\n\ngoal (2 subgoals):\n 1. equal_mod_timpls TI s t \\<Longrightarrow>\n    equal_mod_timpls (filter (\\<lambda>(a, b). a \\<noteq> b) TI) s t\n 2. equal_mod_timpls (filter (\\<lambda>(a, b). a \\<noteq> b) TI) s\n     t \\<Longrightarrow>\n    equal_mod_timpls (filter (\\<lambda>(a, b). a \\<noteq> b) TI) s t", "show ?B when ?A"], ["proof (prove)\ngoal (1 subgoal):\n 1. equal_mod_timpls (filter (\\<lambda>(a, b). a \\<noteq> b) TI) s t", "using that"], ["proof (prove)\nusing this:\n  equal_mod_timpls TI s t\n\ngoal (1 subgoal):\n 1. equal_mod_timpls (filter (\\<lambda>(a, b). a \\<noteq> b) TI) s t", "proof (induction TI s t rule: equal_mod_timpls.induct)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>TI x y.\n       equal_mod_timpls TI (Var x) (Var y) \\<Longrightarrow>\n       equal_mod_timpls (filter (\\<lambda>(a, b). a \\<noteq> b) TI) (Var x)\n        (Var y)\n 2. \\<And>TI f T g S.\n       \\<lbrakk>\\<And>z yb.\n                   \\<lbrakk>z \\<in> set T; yb \\<in> set S;\n                    equal_mod_timpls TI z yb\\<rbrakk>\n                   \\<Longrightarrow> equal_mod_timpls\n(filter (\\<lambda>(a, b). a \\<noteq> b) TI) z yb;\n        equal_mod_timpls TI (Fun f T) (Fun g S)\\<rbrakk>\n       \\<Longrightarrow> equal_mod_timpls\n                          (filter (\\<lambda>(a, b). a \\<noteq> b) TI)\n                          (Fun f T) (Fun g S)\n 3. \\<And>uu_ v va vb.\n       equal_mod_timpls uu_ (Fun v va) (Var vb) \\<Longrightarrow>\n       equal_mod_timpls (filter (\\<lambda>(a, b). a \\<noteq> b) uu_)\n        (Fun v va) (Var vb)\n 4. \\<And>uu_ vb v va.\n       equal_mod_timpls uu_ (Var vb) (Fun v va) \\<Longrightarrow>\n       equal_mod_timpls (filter (\\<lambda>(a, b). a \\<noteq> b) uu_)\n        (Var vb) (Fun v va)", "case (2 TI f T g S)"], ["proof (state)\nthis:\n  \\<lbrakk>?z43 \\<in> set T; ?yb43 \\<in> set S;\n   equal_mod_timpls TI ?z43 ?yb43\\<rbrakk>\n  \\<Longrightarrow> equal_mod_timpls\n                     (filter\n                       (\\<lambda>a.\n                           case a of (a, b) \\<Rightarrow> a \\<noteq> b)\n                       TI)\n                     ?z43 ?yb43\n  equal_mod_timpls TI (Fun f T) (Fun g S)\n\ngoal (4 subgoals):\n 1. \\<And>TI x y.\n       equal_mod_timpls TI (Var x) (Var y) \\<Longrightarrow>\n       equal_mod_timpls (filter (\\<lambda>(a, b). a \\<noteq> b) TI) (Var x)\n        (Var y)\n 2. \\<And>TI f T g S.\n       \\<lbrakk>\\<And>z yb.\n                   \\<lbrakk>z \\<in> set T; yb \\<in> set S;\n                    equal_mod_timpls TI z yb\\<rbrakk>\n                   \\<Longrightarrow> equal_mod_timpls\n(filter (\\<lambda>(a, b). a \\<noteq> b) TI) z yb;\n        equal_mod_timpls TI (Fun f T) (Fun g S)\\<rbrakk>\n       \\<Longrightarrow> equal_mod_timpls\n                          (filter (\\<lambda>(a, b). a \\<noteq> b) TI)\n                          (Fun f T) (Fun g S)\n 3. \\<And>uu_ v va vb.\n       equal_mod_timpls uu_ (Fun v va) (Var vb) \\<Longrightarrow>\n       equal_mod_timpls (filter (\\<lambda>(a, b). a \\<noteq> b) uu_)\n        (Fun v va) (Var vb)\n 4. \\<And>uu_ vb v va.\n       equal_mod_timpls uu_ (Var vb) (Fun v va) \\<Longrightarrow>\n       equal_mod_timpls (filter (\\<lambda>(a, b). a \\<noteq> b) uu_)\n        (Var vb) (Fun v va)", "define TI' where \"TI' \\<equiv> filter (\\<lambda>(a,b). a \\<noteq> b) TI\""], ["proof (state)\nthis:\n  TI' \\<equiv> filter (\\<lambda>(a, b). a \\<noteq> b) TI\n\ngoal (4 subgoals):\n 1. \\<And>TI x y.\n       equal_mod_timpls TI (Var x) (Var y) \\<Longrightarrow>\n       equal_mod_timpls (filter (\\<lambda>(a, b). a \\<noteq> b) TI) (Var x)\n        (Var y)\n 2. \\<And>TI f T g S.\n       \\<lbrakk>\\<And>z yb.\n                   \\<lbrakk>z \\<in> set T; yb \\<in> set S;\n                    equal_mod_timpls TI z yb\\<rbrakk>\n                   \\<Longrightarrow> equal_mod_timpls\n(filter (\\<lambda>(a, b). a \\<noteq> b) TI) z yb;\n        equal_mod_timpls TI (Fun f T) (Fun g S)\\<rbrakk>\n       \\<Longrightarrow> equal_mod_timpls\n                          (filter (\\<lambda>(a, b). a \\<noteq> b) TI)\n                          (Fun f T) (Fun g S)\n 3. \\<And>uu_ v va vb.\n       equal_mod_timpls uu_ (Fun v va) (Var vb) \\<Longrightarrow>\n       equal_mod_timpls (filter (\\<lambda>(a, b). a \\<noteq> b) uu_)\n        (Fun v va) (Var vb)\n 4. \\<And>uu_ vb v va.\n       equal_mod_timpls uu_ (Var vb) (Fun v va) \\<Longrightarrow>\n       equal_mod_timpls (filter (\\<lambda>(a, b). a \\<noteq> b) uu_)\n        (Var vb) (Fun v va)", "let ?P = \"\\<lambda>X Y. f = g \\<or> (is_Abs f \\<and> is_Abs g \\<and> ((the_Abs f, the_Abs g) \\<in> set X \\<or>\n                 (the_Abs g, the_Abs f) \\<in> set X \\<or> (\\<exists>ti \\<in> set Y.\n                 (the_Abs f, snd ti) \\<in> set X \\<and> (the_Abs g, snd ti) \\<in> set X)))\""], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>TI x y.\n       equal_mod_timpls TI (Var x) (Var y) \\<Longrightarrow>\n       equal_mod_timpls (filter (\\<lambda>(a, b). a \\<noteq> b) TI) (Var x)\n        (Var y)\n 2. \\<And>TI f T g S.\n       \\<lbrakk>\\<And>z yb.\n                   \\<lbrakk>z \\<in> set T; yb \\<in> set S;\n                    equal_mod_timpls TI z yb\\<rbrakk>\n                   \\<Longrightarrow> equal_mod_timpls\n(filter (\\<lambda>(a, b). a \\<noteq> b) TI) z yb;\n        equal_mod_timpls TI (Fun f T) (Fun g S)\\<rbrakk>\n       \\<Longrightarrow> equal_mod_timpls\n                          (filter (\\<lambda>(a, b). a \\<noteq> b) TI)\n                          (Fun f T) (Fun g S)\n 3. \\<And>uu_ v va vb.\n       equal_mod_timpls uu_ (Fun v va) (Var vb) \\<Longrightarrow>\n       equal_mod_timpls (filter (\\<lambda>(a, b). a \\<noteq> b) uu_)\n        (Fun v va) (Var vb)\n 4. \\<And>uu_ vb v va.\n       equal_mod_timpls uu_ (Var vb) (Fun v va) \\<Longrightarrow>\n       equal_mod_timpls (filter (\\<lambda>(a, b). a \\<noteq> b) uu_)\n        (Var vb) (Fun v va)", "have *: \"?P TI TI\" \"list_all2 (equal_mod_timpls TI) T S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f = g \\<or>\n    is_Abs f \\<and>\n    is_Abs g \\<and>\n    ((the_Abs f, the_Abs g) \\<in> set TI \\<or>\n     (the_Abs g, the_Abs f) \\<in> set TI \\<or>\n     (\\<exists>ti\\<in>set TI.\n         (the_Abs f, snd ti) \\<in> set TI \\<and>\n         (the_Abs g, snd ti) \\<in> set TI)) &&&\n    list_all2 (equal_mod_timpls TI) T S", "using \"2.prems\""], ["proof (prove)\nusing this:\n  equal_mod_timpls TI (Fun f T) (Fun g S)\n\ngoal (1 subgoal):\n 1. f = g \\<or>\n    is_Abs f \\<and>\n    is_Abs g \\<and>\n    ((the_Abs f, the_Abs g) \\<in> set TI \\<or>\n     (the_Abs g, the_Abs f) \\<in> set TI \\<or>\n     (\\<exists>ti\\<in>set TI.\n         (the_Abs f, snd ti) \\<in> set TI \\<and>\n         (the_Abs g, snd ti) \\<in> set TI)) &&&\n    list_all2 (equal_mod_timpls TI) T S", "by simp_all"], ["proof (state)\nthis:\n  f = g \\<or>\n  is_Abs f \\<and>\n  is_Abs g \\<and>\n  ((the_Abs f, the_Abs g) \\<in> set TI \\<or>\n   (the_Abs g, the_Abs f) \\<in> set TI \\<or>\n   (\\<exists>ti\\<in>set TI.\n       (the_Abs f, snd ti) \\<in> set TI \\<and>\n       (the_Abs g, snd ti) \\<in> set TI))\n  list_all2 (equal_mod_timpls TI) T S\n\ngoal (4 subgoals):\n 1. \\<And>TI x y.\n       equal_mod_timpls TI (Var x) (Var y) \\<Longrightarrow>\n       equal_mod_timpls (filter (\\<lambda>(a, b). a \\<noteq> b) TI) (Var x)\n        (Var y)\n 2. \\<And>TI f T g S.\n       \\<lbrakk>\\<And>z yb.\n                   \\<lbrakk>z \\<in> set T; yb \\<in> set S;\n                    equal_mod_timpls TI z yb\\<rbrakk>\n                   \\<Longrightarrow> equal_mod_timpls\n(filter (\\<lambda>(a, b). a \\<noteq> b) TI) z yb;\n        equal_mod_timpls TI (Fun f T) (Fun g S)\\<rbrakk>\n       \\<Longrightarrow> equal_mod_timpls\n                          (filter (\\<lambda>(a, b). a \\<noteq> b) TI)\n                          (Fun f T) (Fun g S)\n 3. \\<And>uu_ v va vb.\n       equal_mod_timpls uu_ (Fun v va) (Var vb) \\<Longrightarrow>\n       equal_mod_timpls (filter (\\<lambda>(a, b). a \\<noteq> b) uu_)\n        (Fun v va) (Var vb)\n 4. \\<And>uu_ vb v va.\n       equal_mod_timpls uu_ (Var vb) (Fun v va) \\<Longrightarrow>\n       equal_mod_timpls (filter (\\<lambda>(a, b). a \\<noteq> b) uu_)\n        (Var vb) (Fun v va)", "have \"?P TI' TI\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f = g \\<or>\n    is_Abs f \\<and>\n    is_Abs g \\<and>\n    ((the_Abs f, the_Abs g) \\<in> set TI' \\<or>\n     (the_Abs g, the_Abs f) \\<in> set TI' \\<or>\n     (\\<exists>ti\\<in>set TI.\n         (the_Abs f, snd ti) \\<in> set TI' \\<and>\n         (the_Abs g, snd ti) \\<in> set TI'))", "using *(1)"], ["proof (prove)\nusing this:\n  f = g \\<or>\n  is_Abs f \\<and>\n  is_Abs g \\<and>\n  ((the_Abs f, the_Abs g) \\<in> set TI \\<or>\n   (the_Abs g, the_Abs f) \\<in> set TI \\<or>\n   (\\<exists>ti\\<in>set TI.\n       (the_Abs f, snd ti) \\<in> set TI \\<and>\n       (the_Abs g, snd ti) \\<in> set TI))\n\ngoal (1 subgoal):\n 1. f = g \\<or>\n    is_Abs f \\<and>\n    is_Abs g \\<and>\n    ((the_Abs f, the_Abs g) \\<in> set TI' \\<or>\n     (the_Abs g, the_Abs f) \\<in> set TI' \\<or>\n     (\\<exists>ti\\<in>set TI.\n         (the_Abs f, snd ti) \\<in> set TI' \\<and>\n         (the_Abs g, snd ti) \\<in> set TI'))", "unfolding TI'_def is_Abs_def"], ["proof (prove)\nusing this:\n  f = g \\<or>\n  (\\<exists>x4. f = Abs x4) \\<and>\n  (\\<exists>x4. g = Abs x4) \\<and>\n  ((the_Abs f, the_Abs g) \\<in> set TI \\<or>\n   (the_Abs g, the_Abs f) \\<in> set TI \\<or>\n   (\\<exists>ti\\<in>set TI.\n       (the_Abs f, snd ti) \\<in> set TI \\<and>\n       (the_Abs g, snd ti) \\<in> set TI))\n\ngoal (1 subgoal):\n 1. f = g \\<or>\n    (\\<exists>x4. f = Abs x4) \\<and>\n    (\\<exists>x4. g = Abs x4) \\<and>\n    ((the_Abs f, the_Abs g)\n     \\<in> set (filter (\\<lambda>(a, b). a \\<noteq> b) TI) \\<or>\n     (the_Abs g, the_Abs f)\n     \\<in> set (filter (\\<lambda>(a, b). a \\<noteq> b) TI) \\<or>\n     (\\<exists>ti\\<in>set TI.\n         (the_Abs f, snd ti)\n         \\<in> set (filter (\\<lambda>(a, b). a \\<noteq> b) TI) \\<and>\n         (the_Abs g, snd ti)\n         \\<in> set (filter (\\<lambda>(a, b). a \\<noteq> b) TI)))", "by auto"], ["proof (state)\nthis:\n  f = g \\<or>\n  is_Abs f \\<and>\n  is_Abs g \\<and>\n  ((the_Abs f, the_Abs g) \\<in> set TI' \\<or>\n   (the_Abs g, the_Abs f) \\<in> set TI' \\<or>\n   (\\<exists>ti\\<in>set TI.\n       (the_Abs f, snd ti) \\<in> set TI' \\<and>\n       (the_Abs g, snd ti) \\<in> set TI'))\n\ngoal (4 subgoals):\n 1. \\<And>TI x y.\n       equal_mod_timpls TI (Var x) (Var y) \\<Longrightarrow>\n       equal_mod_timpls (filter (\\<lambda>(a, b). a \\<noteq> b) TI) (Var x)\n        (Var y)\n 2. \\<And>TI f T g S.\n       \\<lbrakk>\\<And>z yb.\n                   \\<lbrakk>z \\<in> set T; yb \\<in> set S;\n                    equal_mod_timpls TI z yb\\<rbrakk>\n                   \\<Longrightarrow> equal_mod_timpls\n(filter (\\<lambda>(a, b). a \\<noteq> b) TI) z yb;\n        equal_mod_timpls TI (Fun f T) (Fun g S)\\<rbrakk>\n       \\<Longrightarrow> equal_mod_timpls\n                          (filter (\\<lambda>(a, b). a \\<noteq> b) TI)\n                          (Fun f T) (Fun g S)\n 3. \\<And>uu_ v va vb.\n       equal_mod_timpls uu_ (Fun v va) (Var vb) \\<Longrightarrow>\n       equal_mod_timpls (filter (\\<lambda>(a, b). a \\<noteq> b) uu_)\n        (Fun v va) (Var vb)\n 4. \\<And>uu_ vb v va.\n       equal_mod_timpls uu_ (Var vb) (Fun v va) \\<Longrightarrow>\n       equal_mod_timpls (filter (\\<lambda>(a, b). a \\<noteq> b) uu_)\n        (Var vb) (Fun v va)", "hence \"?P TI' TI'\""], ["proof (prove)\nusing this:\n  f = g \\<or>\n  is_Abs f \\<and>\n  is_Abs g \\<and>\n  ((the_Abs f, the_Abs g) \\<in> set TI' \\<or>\n   (the_Abs g, the_Abs f) \\<in> set TI' \\<or>\n   (\\<exists>ti\\<in>set TI.\n       (the_Abs f, snd ti) \\<in> set TI' \\<and>\n       (the_Abs g, snd ti) \\<in> set TI'))\n\ngoal (1 subgoal):\n 1. f = g \\<or>\n    is_Abs f \\<and>\n    is_Abs g \\<and>\n    ((the_Abs f, the_Abs g) \\<in> set TI' \\<or>\n     (the_Abs g, the_Abs f) \\<in> set TI' \\<or>\n     (\\<exists>ti\\<in>set TI'.\n         (the_Abs f, snd ti) \\<in> set TI' \\<and>\n         (the_Abs g, snd ti) \\<in> set TI'))", "by (metis (no_types, lifting) snd_conv)"], ["proof (state)\nthis:\n  f = g \\<or>\n  is_Abs f \\<and>\n  is_Abs g \\<and>\n  ((the_Abs f, the_Abs g) \\<in> set TI' \\<or>\n   (the_Abs g, the_Abs f) \\<in> set TI' \\<or>\n   (\\<exists>ti\\<in>set TI'.\n       (the_Abs f, snd ti) \\<in> set TI' \\<and>\n       (the_Abs g, snd ti) \\<in> set TI'))\n\ngoal (4 subgoals):\n 1. \\<And>TI x y.\n       equal_mod_timpls TI (Var x) (Var y) \\<Longrightarrow>\n       equal_mod_timpls (filter (\\<lambda>(a, b). a \\<noteq> b) TI) (Var x)\n        (Var y)\n 2. \\<And>TI f T g S.\n       \\<lbrakk>\\<And>z yb.\n                   \\<lbrakk>z \\<in> set T; yb \\<in> set S;\n                    equal_mod_timpls TI z yb\\<rbrakk>\n                   \\<Longrightarrow> equal_mod_timpls\n(filter (\\<lambda>(a, b). a \\<noteq> b) TI) z yb;\n        equal_mod_timpls TI (Fun f T) (Fun g S)\\<rbrakk>\n       \\<Longrightarrow> equal_mod_timpls\n                          (filter (\\<lambda>(a, b). a \\<noteq> b) TI)\n                          (Fun f T) (Fun g S)\n 3. \\<And>uu_ v va vb.\n       equal_mod_timpls uu_ (Fun v va) (Var vb) \\<Longrightarrow>\n       equal_mod_timpls (filter (\\<lambda>(a, b). a \\<noteq> b) uu_)\n        (Fun v va) (Var vb)\n 4. \\<And>uu_ vb v va.\n       equal_mod_timpls uu_ (Var vb) (Fun v va) \\<Longrightarrow>\n       equal_mod_timpls (filter (\\<lambda>(a, b). a \\<noteq> b) uu_)\n        (Var vb) (Fun v va)", "moreover"], ["proof (state)\nthis:\n  f = g \\<or>\n  is_Abs f \\<and>\n  is_Abs g \\<and>\n  ((the_Abs f, the_Abs g) \\<in> set TI' \\<or>\n   (the_Abs g, the_Abs f) \\<in> set TI' \\<or>\n   (\\<exists>ti\\<in>set TI'.\n       (the_Abs f, snd ti) \\<in> set TI' \\<and>\n       (the_Abs g, snd ti) \\<in> set TI'))\n\ngoal (4 subgoals):\n 1. \\<And>TI x y.\n       equal_mod_timpls TI (Var x) (Var y) \\<Longrightarrow>\n       equal_mod_timpls (filter (\\<lambda>(a, b). a \\<noteq> b) TI) (Var x)\n        (Var y)\n 2. \\<And>TI f T g S.\n       \\<lbrakk>\\<And>z yb.\n                   \\<lbrakk>z \\<in> set T; yb \\<in> set S;\n                    equal_mod_timpls TI z yb\\<rbrakk>\n                   \\<Longrightarrow> equal_mod_timpls\n(filter (\\<lambda>(a, b). a \\<noteq> b) TI) z yb;\n        equal_mod_timpls TI (Fun f T) (Fun g S)\\<rbrakk>\n       \\<Longrightarrow> equal_mod_timpls\n                          (filter (\\<lambda>(a, b). a \\<noteq> b) TI)\n                          (Fun f T) (Fun g S)\n 3. \\<And>uu_ v va vb.\n       equal_mod_timpls uu_ (Fun v va) (Var vb) \\<Longrightarrow>\n       equal_mod_timpls (filter (\\<lambda>(a, b). a \\<noteq> b) uu_)\n        (Fun v va) (Var vb)\n 4. \\<And>uu_ vb v va.\n       equal_mod_timpls uu_ (Var vb) (Fun v va) \\<Longrightarrow>\n       equal_mod_timpls (filter (\\<lambda>(a, b). a \\<noteq> b) uu_)\n        (Var vb) (Fun v va)", "have \"list_all2 (equal_mod_timpls TI') T S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_all2 (equal_mod_timpls TI') T S", "using *(2) \"2.IH\" list.rel_mono_strong"], ["proof (prove)\nusing this:\n  list_all2 (equal_mod_timpls TI) T S\n  \\<lbrakk>?z43 \\<in> set T; ?yb43 \\<in> set S;\n   equal_mod_timpls TI ?z43 ?yb43\\<rbrakk>\n  \\<Longrightarrow> equal_mod_timpls\n                     (filter\n                       (\\<lambda>a.\n                           case a of (a, b) \\<Rightarrow> a \\<noteq> b)\n                       TI)\n                     ?z43 ?yb43\n  \\<lbrakk>list_all2 ?R ?x ?y;\n   \\<And>z yb.\n      \\<lbrakk>z \\<in> set ?x; yb \\<in> set ?y; ?R z yb\\<rbrakk>\n      \\<Longrightarrow> ?Ra z yb\\<rbrakk>\n  \\<Longrightarrow> list_all2 ?Ra ?x ?y\n\ngoal (1 subgoal):\n 1. list_all2 (equal_mod_timpls TI') T S", "unfolding TI'_def"], ["proof (prove)\nusing this:\n  list_all2 (equal_mod_timpls TI) T S\n  \\<lbrakk>?z43 \\<in> set T; ?yb43 \\<in> set S;\n   equal_mod_timpls TI ?z43 ?yb43\\<rbrakk>\n  \\<Longrightarrow> equal_mod_timpls\n                     (filter\n                       (\\<lambda>a.\n                           case a of (a, b) \\<Rightarrow> a \\<noteq> b)\n                       TI)\n                     ?z43 ?yb43\n  \\<lbrakk>list_all2 ?R ?x ?y;\n   \\<And>z yb.\n      \\<lbrakk>z \\<in> set ?x; yb \\<in> set ?y; ?R z yb\\<rbrakk>\n      \\<Longrightarrow> ?Ra z yb\\<rbrakk>\n  \\<Longrightarrow> list_all2 ?Ra ?x ?y\n\ngoal (1 subgoal):\n 1. list_all2 (equal_mod_timpls (filter (\\<lambda>(a, b). a \\<noteq> b) TI))\n     T S", "by blast"], ["proof (state)\nthis:\n  list_all2 (equal_mod_timpls TI') T S\n\ngoal (4 subgoals):\n 1. \\<And>TI x y.\n       equal_mod_timpls TI (Var x) (Var y) \\<Longrightarrow>\n       equal_mod_timpls (filter (\\<lambda>(a, b). a \\<noteq> b) TI) (Var x)\n        (Var y)\n 2. \\<And>TI f T g S.\n       \\<lbrakk>\\<And>z yb.\n                   \\<lbrakk>z \\<in> set T; yb \\<in> set S;\n                    equal_mod_timpls TI z yb\\<rbrakk>\n                   \\<Longrightarrow> equal_mod_timpls\n(filter (\\<lambda>(a, b). a \\<noteq> b) TI) z yb;\n        equal_mod_timpls TI (Fun f T) (Fun g S)\\<rbrakk>\n       \\<Longrightarrow> equal_mod_timpls\n                          (filter (\\<lambda>(a, b). a \\<noteq> b) TI)\n                          (Fun f T) (Fun g S)\n 3. \\<And>uu_ v va vb.\n       equal_mod_timpls uu_ (Fun v va) (Var vb) \\<Longrightarrow>\n       equal_mod_timpls (filter (\\<lambda>(a, b). a \\<noteq> b) uu_)\n        (Fun v va) (Var vb)\n 4. \\<And>uu_ vb v va.\n       equal_mod_timpls uu_ (Var vb) (Fun v va) \\<Longrightarrow>\n       equal_mod_timpls (filter (\\<lambda>(a, b). a \\<noteq> b) uu_)\n        (Var vb) (Fun v va)", "ultimately"], ["proof (chain)\npicking this:\n  f = g \\<or>\n  is_Abs f \\<and>\n  is_Abs g \\<and>\n  ((the_Abs f, the_Abs g) \\<in> set TI' \\<or>\n   (the_Abs g, the_Abs f) \\<in> set TI' \\<or>\n   (\\<exists>ti\\<in>set TI'.\n       (the_Abs f, snd ti) \\<in> set TI' \\<and>\n       (the_Abs g, snd ti) \\<in> set TI'))\n  list_all2 (equal_mod_timpls TI') T S", "show ?case"], ["proof (prove)\nusing this:\n  f = g \\<or>\n  is_Abs f \\<and>\n  is_Abs g \\<and>\n  ((the_Abs f, the_Abs g) \\<in> set TI' \\<or>\n   (the_Abs g, the_Abs f) \\<in> set TI' \\<or>\n   (\\<exists>ti\\<in>set TI'.\n       (the_Abs f, snd ti) \\<in> set TI' \\<and>\n       (the_Abs g, snd ti) \\<in> set TI'))\n  list_all2 (equal_mod_timpls TI') T S\n\ngoal (1 subgoal):\n 1. equal_mod_timpls\n     (filter (\\<lambda>a. case a of (a, b) \\<Rightarrow> a \\<noteq> b) TI)\n     (Fun f T) (Fun g S)", "unfolding TI'_def"], ["proof (prove)\nusing this:\n  f = g \\<or>\n  is_Abs f \\<and>\n  is_Abs g \\<and>\n  ((the_Abs f, the_Abs g)\n   \\<in> set (filter (\\<lambda>(a, b). a \\<noteq> b) TI) \\<or>\n   (the_Abs g, the_Abs f)\n   \\<in> set (filter (\\<lambda>(a, b). a \\<noteq> b) TI) \\<or>\n   (\\<exists>ti\\<in>set (filter (\\<lambda>(a, b). a \\<noteq> b) TI).\n       (the_Abs f, snd ti)\n       \\<in> set (filter (\\<lambda>(a, b). a \\<noteq> b) TI) \\<and>\n       (the_Abs g, snd ti)\n       \\<in> set (filter (\\<lambda>(a, b). a \\<noteq> b) TI)))\n  list_all2 (equal_mod_timpls (filter (\\<lambda>(a, b). a \\<noteq> b) TI)) T\n   S\n\ngoal (1 subgoal):\n 1. equal_mod_timpls\n     (filter (\\<lambda>a. case a of (a, b) \\<Rightarrow> a \\<noteq> b) TI)\n     (Fun f T) (Fun g S)", "by force"], ["proof (state)\nthis:\n  equal_mod_timpls\n   (filter (\\<lambda>a. case a of (a, b) \\<Rightarrow> a \\<noteq> b) TI)\n   (Fun f T) (Fun g S)\n\ngoal (3 subgoals):\n 1. \\<And>TI x y.\n       equal_mod_timpls TI (Var x) (Var y) \\<Longrightarrow>\n       equal_mod_timpls (filter (\\<lambda>(a, b). a \\<noteq> b) TI) (Var x)\n        (Var y)\n 2. \\<And>uu_ v va vb.\n       equal_mod_timpls uu_ (Fun v va) (Var vb) \\<Longrightarrow>\n       equal_mod_timpls (filter (\\<lambda>(a, b). a \\<noteq> b) uu_)\n        (Fun v va) (Var vb)\n 3. \\<And>uu_ vb v va.\n       equal_mod_timpls uu_ (Var vb) (Fun v va) \\<Longrightarrow>\n       equal_mod_timpls (filter (\\<lambda>(a, b). a \\<noteq> b) uu_)\n        (Var vb) (Fun v va)", "qed auto"], ["proof (state)\nthis:\n  equal_mod_timpls TI s t \\<Longrightarrow>\n  equal_mod_timpls (filter (\\<lambda>(a, b). a \\<noteq> b) TI) s t\n\ngoal (2 subgoals):\n 1. equal_mod_timpls TI s t \\<Longrightarrow> equal_mod_timpls TI s t\n 2. equal_mod_timpls (filter (\\<lambda>(a, b). a \\<noteq> b) TI) s\n     t \\<Longrightarrow>\n    equal_mod_timpls (filter (\\<lambda>(a, b). a \\<noteq> b) TI) s t", "qed"], ["", "lemma timpls_transformable_to_refl:\n  \"timpls_transformable_to TI t t\" (is ?A)\n  \"timpls_transformable_to' TI t t\" (is ?B)"], ["proof (prove)\ngoal (1 subgoal):\n 1. timpls_transformable_to TI t t &&& timpls_transformable_to' TI t t", "by (induct t) (auto simp add: list_all2_conv_all_nth)"], ["", "lemma timpls_transformable_to_inv_Var:\n  \"timpls_transformable_to TI (Var x) t \\<Longrightarrow> t = Var x\" (is \"?A \\<Longrightarrow> ?C\")\n  \"timpls_transformable_to TI t (Var x) \\<Longrightarrow> t = Var x\" (is \"?B \\<Longrightarrow> ?C\")\n  \"timpls_transformable_to' TI (Var x) t \\<Longrightarrow> t = Var x\" (is \"?A' \\<Longrightarrow> ?C\")\n  \"timpls_transformable_to' TI t (Var x) \\<Longrightarrow> t = Var x\" (is \"?B' \\<Longrightarrow> ?C\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((timpls_transformable_to TI (Var x) t \\<Longrightarrow> t = Var x) &&&\n     (timpls_transformable_to TI t (Var x) \\<Longrightarrow> t = Var x)) &&&\n    (timpls_transformable_to' TI (Var x) t \\<Longrightarrow> t = Var x) &&&\n    (timpls_transformable_to' TI t (Var x) \\<Longrightarrow> t = Var x)", "by (cases t; auto)+"], ["", "lemma timpls_transformable_to_inv:\n  assumes \"timpls_transformable_to TI (Fun f T) (Fun g S)\"\n  shows \"length T = length S\"\n    and \"\\<And>i. i < length T \\<Longrightarrow> timpls_transformable_to TI (T ! i) (S ! i)\"\n    and \"f \\<noteq> g \\<Longrightarrow> (is_Abs f \\<and> is_Abs g \\<and> (the_Abs f, the_Abs g) \\<in> set TI)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length T = length S &&&\n    (\\<And>i.\n        i < length T \\<Longrightarrow>\n        timpls_transformable_to TI (T ! i) (S ! i)) &&&\n    (f \\<noteq> g \\<Longrightarrow>\n     is_Abs f \\<and> is_Abs g \\<and> (the_Abs f, the_Abs g) \\<in> set TI)", "using assms list_all2_conv_all_nth[of \"timpls_transformable_to TI\" T S]"], ["proof (prove)\nusing this:\n  timpls_transformable_to TI (Fun f T) (Fun g S)\n  list_all2 (timpls_transformable_to TI) T S =\n  (length T = length S \\<and>\n   (\\<forall>i<length T. timpls_transformable_to TI (T ! i) (S ! i)))\n\ngoal (1 subgoal):\n 1. length T = length S &&&\n    (\\<And>i.\n        i < length T \\<Longrightarrow>\n        timpls_transformable_to TI (T ! i) (S ! i)) &&&\n    (f \\<noteq> g \\<Longrightarrow>\n     is_Abs f \\<and> is_Abs g \\<and> (the_Abs f, the_Abs g) \\<in> set TI)", "by auto"], ["", "lemma timpls_transformable_to'_inv:\n  assumes \"timpls_transformable_to' TI (Fun f T) (Fun g S)\"\n  shows \"length T = length S\"\n    and \"\\<And>i. i < length T \\<Longrightarrow> timpls_transformable_to' TI (T ! i) (S ! i)\"\n    and \"f \\<noteq> g \\<Longrightarrow> (is_Abs f \\<and> is_Abs g \\<and> in_trancl TI (the_Abs f) (the_Abs g))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length T = length S &&&\n    (\\<And>i.\n        i < length T \\<Longrightarrow>\n        timpls_transformable_to' TI (T ! i) (S ! i)) &&&\n    (f \\<noteq> g \\<Longrightarrow>\n     is_Abs f \\<and> is_Abs g \\<and> in_trancl TI (the_Abs f) (the_Abs g))", "using assms list_all2_conv_all_nth[of \"timpls_transformable_to' TI\" T S]"], ["proof (prove)\nusing this:\n  timpls_transformable_to' TI (Fun f T) (Fun g S)\n  list_all2 (timpls_transformable_to' TI) T S =\n  (length T = length S \\<and>\n   (\\<forall>i<length T. timpls_transformable_to' TI (T ! i) (S ! i)))\n\ngoal (1 subgoal):\n 1. length T = length S &&&\n    (\\<And>i.\n        i < length T \\<Longrightarrow>\n        timpls_transformable_to' TI (T ! i) (S ! i)) &&&\n    (f \\<noteq> g \\<Longrightarrow>\n     is_Abs f \\<and> is_Abs g \\<and> in_trancl TI (the_Abs f) (the_Abs g))", "by auto"], ["", "lemma timpls_transformable_to_inv':\n  assumes \"timpls_transformable_to TI (Fun f T) t\"\n  shows \"is_Fun t\"\n    and \"length T = length (args t)\"\n    and \"\\<And>i. i < length T \\<Longrightarrow> timpls_transformable_to TI (T ! i) (args t ! i)\"\n    and \"f \\<noteq> the_Fun t \\<Longrightarrow> (\n          is_Abs f \\<and> is_Abs (the_Fun t) \\<and> (the_Abs f, the_Abs (the_Fun t)) \\<in> set TI)\"\n    and \"\\<not>is_Abs f \\<Longrightarrow> f = the_Fun t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (is_Fun t &&& length T = length (args t)) &&&\n    (\\<And>i.\n        i < length T \\<Longrightarrow>\n        timpls_transformable_to TI (T ! i) (args t ! i)) &&&\n    (f \\<noteq> the_Fun t \\<Longrightarrow>\n     is_Abs f \\<and>\n     is_Abs (the_Fun t) \\<and>\n     (the_Abs f, the_Abs (the_Fun t)) \\<in> set TI) &&&\n    (\\<not> is_Abs f \\<Longrightarrow> f = the_Fun t)", "using assms list_all2_conv_all_nth[of \"timpls_transformable_to TI\" T]"], ["proof (prove)\nusing this:\n  timpls_transformable_to TI (Fun f T) t\n  list_all2 (timpls_transformable_to TI) T ?ys =\n  (length T = length ?ys \\<and>\n   (\\<forall>i<length T. timpls_transformable_to TI (T ! i) (?ys ! i)))\n\ngoal (1 subgoal):\n 1. (is_Fun t &&& length T = length (args t)) &&&\n    (\\<And>i.\n        i < length T \\<Longrightarrow>\n        timpls_transformable_to TI (T ! i) (args t ! i)) &&&\n    (f \\<noteq> the_Fun t \\<Longrightarrow>\n     is_Abs f \\<and>\n     is_Abs (the_Fun t) \\<and>\n     (the_Abs f, the_Abs (the_Fun t)) \\<in> set TI) &&&\n    (\\<not> is_Abs f \\<Longrightarrow> f = the_Fun t)", "by (cases t; auto)+"], ["", "lemma timpls_transformable_to'_inv':\n  assumes \"timpls_transformable_to' TI (Fun f T) t\"\n  shows \"is_Fun t\"\n    and \"length T = length (args t)\"\n    and \"\\<And>i. i < length T \\<Longrightarrow> timpls_transformable_to' TI (T ! i) (args t ! i)\"\n    and \"f \\<noteq> the_Fun t \\<Longrightarrow> (\n          is_Abs f \\<and> is_Abs (the_Fun t) \\<and> in_trancl TI (the_Abs f) (the_Abs (the_Fun t)))\"\n    and \"\\<not>is_Abs f \\<Longrightarrow> f = the_Fun t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (is_Fun t &&& length T = length (args t)) &&&\n    (\\<And>i.\n        i < length T \\<Longrightarrow>\n        timpls_transformable_to' TI (T ! i) (args t ! i)) &&&\n    (f \\<noteq> the_Fun t \\<Longrightarrow>\n     is_Abs f \\<and>\n     is_Abs (the_Fun t) \\<and>\n     in_trancl TI (the_Abs f) (the_Abs (the_Fun t))) &&&\n    (\\<not> is_Abs f \\<Longrightarrow> f = the_Fun t)", "using assms list_all2_conv_all_nth[of \"timpls_transformable_to' TI\" T]"], ["proof (prove)\nusing this:\n  timpls_transformable_to' TI (Fun f T) t\n  list_all2 (timpls_transformable_to' TI) T ?ys =\n  (length T = length ?ys \\<and>\n   (\\<forall>i<length T. timpls_transformable_to' TI (T ! i) (?ys ! i)))\n\ngoal (1 subgoal):\n 1. (is_Fun t &&& length T = length (args t)) &&&\n    (\\<And>i.\n        i < length T \\<Longrightarrow>\n        timpls_transformable_to' TI (T ! i) (args t ! i)) &&&\n    (f \\<noteq> the_Fun t \\<Longrightarrow>\n     is_Abs f \\<and>\n     is_Abs (the_Fun t) \\<and>\n     in_trancl TI (the_Abs f) (the_Abs (the_Fun t))) &&&\n    (\\<not> is_Abs f \\<Longrightarrow> f = the_Fun t)", "by (cases t; auto)+"], ["", "lemma timpls_transformable_to_size_eq:\n  fixes s t::\"(('b, 'c, 'a) prot_fun, 'd) term\"\n  shows \"timpls_transformable_to TI s t \\<Longrightarrow> size s = size t\" (is \"?A \\<Longrightarrow> ?C\")\n    and \"timpls_transformable_to' TI s t \\<Longrightarrow> size s = size t\" (is \"?B \\<Longrightarrow> ?C\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (timpls_transformable_to TI s t \\<Longrightarrow> size s = size t) &&&\n    (timpls_transformable_to' TI s t \\<Longrightarrow> size s = size t)", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. timpls_transformable_to TI s t \\<Longrightarrow> size s = size t\n 2. timpls_transformable_to' TI s t \\<Longrightarrow> size s = size t", "have *: \"size_list size T = size_list size S\"\n    when \"length T = length S\" \"\\<And>i. i < length T \\<Longrightarrow> size (T ! i) = size (S ! i)\"\n    for S T::\"(('b, 'c, 'a) prot_fun, 'd) term list\""], ["proof (prove)\ngoal (1 subgoal):\n 1. size_list size T = size_list size S", "using that"], ["proof (prove)\nusing this:\n  length T = length S\n  ?i43 < length T \\<Longrightarrow> size (T ! ?i43) = size (S ! ?i43)\n\ngoal (1 subgoal):\n 1. size_list size T = size_list size S", "proof (induction T arbitrary: S)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>S.\n       \\<lbrakk>length [] = length S;\n        \\<And>i.\n           i < length [] \\<Longrightarrow>\n           size ([] ! i) = size (S ! i)\\<rbrakk>\n       \\<Longrightarrow> size_list size [] = size_list size S\n 2. \\<And>a T S.\n       \\<lbrakk>\\<And>S.\n                   \\<lbrakk>length T = length S;\n                    \\<And>i.\n                       i < length T \\<Longrightarrow>\n                       size (T ! i) = size (S ! i)\\<rbrakk>\n                   \\<Longrightarrow> size_list size T = size_list size S;\n        length (a # T) = length S;\n        \\<And>i.\n           i < length (a # T) \\<Longrightarrow>\n           size ((a # T) ! i) = size (S ! i)\\<rbrakk>\n       \\<Longrightarrow> size_list size (a # T) = size_list size S", "case (Cons x T')"], ["proof (state)\nthis:\n  \\<lbrakk>length T' = length ?S43;\n   \\<And>i.\n      i < length T' \\<Longrightarrow>\n      size (T' ! i) = size (?S43 ! i)\\<rbrakk>\n  \\<Longrightarrow> size_list size T' = size_list size ?S43\n  length (x # T') = length S\n  ?i43 < length (x # T') \\<Longrightarrow>\n  size ((x # T') ! ?i43) = size (S ! ?i43)\n\ngoal (2 subgoals):\n 1. \\<And>S.\n       \\<lbrakk>length [] = length S;\n        \\<And>i.\n           i < length [] \\<Longrightarrow>\n           size ([] ! i) = size (S ! i)\\<rbrakk>\n       \\<Longrightarrow> size_list size [] = size_list size S\n 2. \\<And>a T S.\n       \\<lbrakk>\\<And>S.\n                   \\<lbrakk>length T = length S;\n                    \\<And>i.\n                       i < length T \\<Longrightarrow>\n                       size (T ! i) = size (S ! i)\\<rbrakk>\n                   \\<Longrightarrow> size_list size T = size_list size S;\n        length (a # T) = length S;\n        \\<And>i.\n           i < length (a # T) \\<Longrightarrow>\n           size ((a # T) ! i) = size (S ! i)\\<rbrakk>\n       \\<Longrightarrow> size_list size (a # T) = size_list size S", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>length T' = length ?S43;\n   \\<And>i.\n      i < length T' \\<Longrightarrow>\n      size (T' ! i) = size (?S43 ! i)\\<rbrakk>\n  \\<Longrightarrow> size_list size T' = size_list size ?S43\n  length (x # T') = length S\n  ?i43 < length (x # T') \\<Longrightarrow>\n  size ((x # T') ! ?i43) = size (S ! ?i43)", "obtain y S' where y: \"S = y#S'\""], ["proof (prove)\nusing this:\n  \\<lbrakk>length T' = length ?S43;\n   \\<And>i.\n      i < length T' \\<Longrightarrow>\n      size (T' ! i) = size (?S43 ! i)\\<rbrakk>\n  \\<Longrightarrow> size_list size T' = size_list size ?S43\n  length (x # T') = length S\n  ?i43 < length (x # T') \\<Longrightarrow>\n  size ((x # T') ! ?i43) = size (S ! ?i43)\n\ngoal (1 subgoal):\n 1. (\\<And>y S'. S = y # S' \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases S) auto"], ["proof (state)\nthis:\n  S = y # S'\n\ngoal (2 subgoals):\n 1. \\<And>S.\n       \\<lbrakk>length [] = length S;\n        \\<And>i.\n           i < length [] \\<Longrightarrow>\n           size ([] ! i) = size (S ! i)\\<rbrakk>\n       \\<Longrightarrow> size_list size [] = size_list size S\n 2. \\<And>a T S.\n       \\<lbrakk>\\<And>S.\n                   \\<lbrakk>length T = length S;\n                    \\<And>i.\n                       i < length T \\<Longrightarrow>\n                       size (T ! i) = size (S ! i)\\<rbrakk>\n                   \\<Longrightarrow> size_list size T = size_list size S;\n        length (a # T) = length S;\n        \\<And>i.\n           i < length (a # T) \\<Longrightarrow>\n           size ((a # T) ! i) = size (S ! i)\\<rbrakk>\n       \\<Longrightarrow> size_list size (a # T) = size_list size S", "hence \"size_list size T' = size_list size S'\" \"size x = size y\""], ["proof (prove)\nusing this:\n  S = y # S'\n\ngoal (1 subgoal):\n 1. size_list size T' = size_list size S' &&& size x = size y", "using Cons.prems Cons.IH[of S']"], ["proof (prove)\nusing this:\n  S = y # S'\n  length (x # T') = length S\n  ?i43 < length (x # T') \\<Longrightarrow>\n  size ((x # T') ! ?i43) = size (S ! ?i43)\n  \\<lbrakk>length T' = length S';\n   \\<And>i.\n      i < length T' \\<Longrightarrow> size (T' ! i) = size (S' ! i)\\<rbrakk>\n  \\<Longrightarrow> size_list size T' = size_list size S'\n\ngoal (1 subgoal):\n 1. size_list size T' = size_list size S' &&& size x = size y", "by force+"], ["proof (state)\nthis:\n  size_list size T' = size_list size S'\n  size x = size y\n\ngoal (2 subgoals):\n 1. \\<And>S.\n       \\<lbrakk>length [] = length S;\n        \\<And>i.\n           i < length [] \\<Longrightarrow>\n           size ([] ! i) = size (S ! i)\\<rbrakk>\n       \\<Longrightarrow> size_list size [] = size_list size S\n 2. \\<And>a T S.\n       \\<lbrakk>\\<And>S.\n                   \\<lbrakk>length T = length S;\n                    \\<And>i.\n                       i < length T \\<Longrightarrow>\n                       size (T ! i) = size (S ! i)\\<rbrakk>\n                   \\<Longrightarrow> size_list size T = size_list size S;\n        length (a # T) = length S;\n        \\<And>i.\n           i < length (a # T) \\<Longrightarrow>\n           size ((a # T) ! i) = size (S ! i)\\<rbrakk>\n       \\<Longrightarrow> size_list size (a # T) = size_list size S", "thus ?case"], ["proof (prove)\nusing this:\n  size_list size T' = size_list size S'\n  size x = size y\n\ngoal (1 subgoal):\n 1. size_list size (x # T') = size_list size S", "using y"], ["proof (prove)\nusing this:\n  size_list size T' = size_list size S'\n  size x = size y\n  S = y # S'\n\ngoal (1 subgoal):\n 1. size_list size (x # T') = size_list size S", "by simp"], ["proof (state)\nthis:\n  size_list size (x # T') = size_list size S\n\ngoal (1 subgoal):\n 1. \\<And>S.\n       \\<lbrakk>length [] = length S;\n        \\<And>i.\n           i < length [] \\<Longrightarrow>\n           size ([] ! i) = size (S ! i)\\<rbrakk>\n       \\<Longrightarrow> size_list size [] = size_list size S", "qed simp"], ["proof (state)\nthis:\n  \\<lbrakk>length ?T43 = length ?S43;\n   \\<And>i.\n      i < length ?T43 \\<Longrightarrow>\n      size (?T43 ! i) = size (?S43 ! i)\\<rbrakk>\n  \\<Longrightarrow> size_list size ?T43 = size_list size ?S43\n\ngoal (2 subgoals):\n 1. timpls_transformable_to TI s t \\<Longrightarrow> size s = size t\n 2. timpls_transformable_to' TI s t \\<Longrightarrow> size s = size t", "show ?C when ?A"], ["proof (prove)\ngoal (1 subgoal):\n 1. size s = size t", "using that"], ["proof (prove)\nusing this:\n  timpls_transformable_to TI s t\n\ngoal (1 subgoal):\n 1. size s = size t", "proof (induction rule: timpls_transformable_to.induct)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>TI x y.\n       timpls_transformable_to TI (Var x) (Var y) \\<Longrightarrow>\n       size (Var x) = size (Var y)\n 2. \\<And>TI f T g S.\n       \\<lbrakk>\\<And>z yb.\n                   \\<lbrakk>z \\<in> set T; yb \\<in> set S;\n                    timpls_transformable_to TI z yb\\<rbrakk>\n                   \\<Longrightarrow> size z = size yb;\n        timpls_transformable_to TI (Fun f T) (Fun g S)\\<rbrakk>\n       \\<Longrightarrow> size (Fun f T) = size (Fun g S)\n 3. \\<And>uu_ v va vb.\n       timpls_transformable_to uu_ (Fun v va) (Var vb) \\<Longrightarrow>\n       size (Fun v va) = size (Var vb)\n 4. \\<And>uu_ vb v va.\n       timpls_transformable_to uu_ (Var vb) (Fun v va) \\<Longrightarrow>\n       size (Var vb) = size (Fun v va)", "case (2 TI f T g S)"], ["proof (state)\nthis:\n  \\<lbrakk>?z43 \\<in> set T; ?yb43 \\<in> set S;\n   timpls_transformable_to TI ?z43 ?yb43\\<rbrakk>\n  \\<Longrightarrow> size ?z43 = size ?yb43\n  timpls_transformable_to TI (Fun f T) (Fun g S)\n\ngoal (4 subgoals):\n 1. \\<And>TI x y.\n       timpls_transformable_to TI (Var x) (Var y) \\<Longrightarrow>\n       size (Var x) = size (Var y)\n 2. \\<And>TI f T g S.\n       \\<lbrakk>\\<And>z yb.\n                   \\<lbrakk>z \\<in> set T; yb \\<in> set S;\n                    timpls_transformable_to TI z yb\\<rbrakk>\n                   \\<Longrightarrow> size z = size yb;\n        timpls_transformable_to TI (Fun f T) (Fun g S)\\<rbrakk>\n       \\<Longrightarrow> size (Fun f T) = size (Fun g S)\n 3. \\<And>uu_ v va vb.\n       timpls_transformable_to uu_ (Fun v va) (Var vb) \\<Longrightarrow>\n       size (Fun v va) = size (Var vb)\n 4. \\<And>uu_ vb v va.\n       timpls_transformable_to uu_ (Var vb) (Fun v va) \\<Longrightarrow>\n       size (Var vb) = size (Fun v va)", "hence \"length T = length S\" \"\\<And>i. i < length T \\<Longrightarrow> size (T ! i) = size (S ! i)\""], ["proof (prove)\nusing this:\n  \\<lbrakk>?z43 \\<in> set T; ?yb43 \\<in> set S;\n   timpls_transformable_to TI ?z43 ?yb43\\<rbrakk>\n  \\<Longrightarrow> size ?z43 = size ?yb43\n  timpls_transformable_to TI (Fun f T) (Fun g S)\n\ngoal (1 subgoal):\n 1. length T = length S &&&\n    (\\<And>i. i < length T \\<Longrightarrow> size (T ! i) = size (S ! i))", "using timpls_transformable_to_inv(1,2)[of TI f T g S]"], ["proof (prove)\nusing this:\n  \\<lbrakk>?z43 \\<in> set T; ?yb43 \\<in> set S;\n   timpls_transformable_to TI ?z43 ?yb43\\<rbrakk>\n  \\<Longrightarrow> size ?z43 = size ?yb43\n  timpls_transformable_to TI (Fun f T) (Fun g S)\n  timpls_transformable_to TI (Fun f T) (Fun g S) \\<Longrightarrow>\n  length T = length S\n  \\<lbrakk>timpls_transformable_to TI (Fun f T) (Fun g S);\n   ?i < length T\\<rbrakk>\n  \\<Longrightarrow> timpls_transformable_to TI (T ! ?i) (S ! ?i)\n\ngoal (1 subgoal):\n 1. length T = length S &&&\n    (\\<And>i. i < length T \\<Longrightarrow> size (T ! i) = size (S ! i))", "by auto"], ["proof (state)\nthis:\n  length T = length S\n  ?i43 < length T \\<Longrightarrow> size (T ! ?i43) = size (S ! ?i43)\n\ngoal (4 subgoals):\n 1. \\<And>TI x y.\n       timpls_transformable_to TI (Var x) (Var y) \\<Longrightarrow>\n       size (Var x) = size (Var y)\n 2. \\<And>TI f T g S.\n       \\<lbrakk>\\<And>z yb.\n                   \\<lbrakk>z \\<in> set T; yb \\<in> set S;\n                    timpls_transformable_to TI z yb\\<rbrakk>\n                   \\<Longrightarrow> size z = size yb;\n        timpls_transformable_to TI (Fun f T) (Fun g S)\\<rbrakk>\n       \\<Longrightarrow> size (Fun f T) = size (Fun g S)\n 3. \\<And>uu_ v va vb.\n       timpls_transformable_to uu_ (Fun v va) (Var vb) \\<Longrightarrow>\n       size (Fun v va) = size (Var vb)\n 4. \\<And>uu_ vb v va.\n       timpls_transformable_to uu_ (Var vb) (Fun v va) \\<Longrightarrow>\n       size (Var vb) = size (Fun v va)", "thus ?case"], ["proof (prove)\nusing this:\n  length T = length S\n  ?i43 < length T \\<Longrightarrow> size (T ! ?i43) = size (S ! ?i43)\n\ngoal (1 subgoal):\n 1. size (Fun f T) = size (Fun g S)", "using *[of S T]"], ["proof (prove)\nusing this:\n  length T = length S\n  ?i43 < length T \\<Longrightarrow> size (T ! ?i43) = size (S ! ?i43)\n  \\<lbrakk>length S = length T;\n   \\<And>i.\n      i < length S \\<Longrightarrow> size (S ! i) = size (T ! i)\\<rbrakk>\n  \\<Longrightarrow> size_list size S = size_list size T\n\ngoal (1 subgoal):\n 1. size (Fun f T) = size (Fun g S)", "by simp"], ["proof (state)\nthis:\n  size (Fun f T) = size (Fun g S)\n\ngoal (3 subgoals):\n 1. \\<And>TI x y.\n       timpls_transformable_to TI (Var x) (Var y) \\<Longrightarrow>\n       size (Var x) = size (Var y)\n 2. \\<And>uu_ v va vb.\n       timpls_transformable_to uu_ (Fun v va) (Var vb) \\<Longrightarrow>\n       size (Fun v va) = size (Var vb)\n 3. \\<And>uu_ vb v va.\n       timpls_transformable_to uu_ (Var vb) (Fun v va) \\<Longrightarrow>\n       size (Var vb) = size (Fun v va)", "qed simp_all"], ["proof (state)\nthis:\n  timpls_transformable_to TI s t \\<Longrightarrow> size s = size t\n\ngoal (2 subgoals):\n 1. timpls_transformable_to TI s t \\<Longrightarrow>\n    timpls_transformable_to TI s t\n 2. timpls_transformable_to' TI s t \\<Longrightarrow> size s = size t", "show ?C when ?B"], ["proof (prove)\ngoal (1 subgoal):\n 1. size s = size t", "using that"], ["proof (prove)\nusing this:\n  timpls_transformable_to' TI s t\n\ngoal (1 subgoal):\n 1. size s = size t", "proof (induction rule: timpls_transformable_to.induct)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>TI x y.\n       timpls_transformable_to' TI (Var x) (Var y) \\<Longrightarrow>\n       size (Var x) = size (Var y)\n 2. \\<And>TI f T g S.\n       \\<lbrakk>\\<And>z yb.\n                   \\<lbrakk>z \\<in> set T; yb \\<in> set S;\n                    timpls_transformable_to' TI z yb\\<rbrakk>\n                   \\<Longrightarrow> size z = size yb;\n        timpls_transformable_to' TI (Fun f T) (Fun g S)\\<rbrakk>\n       \\<Longrightarrow> size (Fun f T) = size (Fun g S)\n 3. \\<And>uu_ v va vb.\n       timpls_transformable_to' uu_ (Fun v va) (Var vb) \\<Longrightarrow>\n       size (Fun v va) = size (Var vb)\n 4. \\<And>uu_ vb v va.\n       timpls_transformable_to' uu_ (Var vb) (Fun v va) \\<Longrightarrow>\n       size (Var vb) = size (Fun v va)", "case (2 TI f T g S)"], ["proof (state)\nthis:\n  \\<lbrakk>?z43 \\<in> set T; ?yb43 \\<in> set S;\n   timpls_transformable_to' TI ?z43 ?yb43\\<rbrakk>\n  \\<Longrightarrow> size ?z43 = size ?yb43\n  timpls_transformable_to' TI (Fun f T) (Fun g S)\n\ngoal (4 subgoals):\n 1. \\<And>TI x y.\n       timpls_transformable_to' TI (Var x) (Var y) \\<Longrightarrow>\n       size (Var x) = size (Var y)\n 2. \\<And>TI f T g S.\n       \\<lbrakk>\\<And>z yb.\n                   \\<lbrakk>z \\<in> set T; yb \\<in> set S;\n                    timpls_transformable_to' TI z yb\\<rbrakk>\n                   \\<Longrightarrow> size z = size yb;\n        timpls_transformable_to' TI (Fun f T) (Fun g S)\\<rbrakk>\n       \\<Longrightarrow> size (Fun f T) = size (Fun g S)\n 3. \\<And>uu_ v va vb.\n       timpls_transformable_to' uu_ (Fun v va) (Var vb) \\<Longrightarrow>\n       size (Fun v va) = size (Var vb)\n 4. \\<And>uu_ vb v va.\n       timpls_transformable_to' uu_ (Var vb) (Fun v va) \\<Longrightarrow>\n       size (Var vb) = size (Fun v va)", "hence \"length T = length S\" \"\\<And>i. i < length T \\<Longrightarrow> size (T ! i) = size (S ! i)\""], ["proof (prove)\nusing this:\n  \\<lbrakk>?z43 \\<in> set T; ?yb43 \\<in> set S;\n   timpls_transformable_to' TI ?z43 ?yb43\\<rbrakk>\n  \\<Longrightarrow> size ?z43 = size ?yb43\n  timpls_transformable_to' TI (Fun f T) (Fun g S)\n\ngoal (1 subgoal):\n 1. length T = length S &&&\n    (\\<And>i. i < length T \\<Longrightarrow> size (T ! i) = size (S ! i))", "using timpls_transformable_to'_inv(1,2)[of TI f T g S]"], ["proof (prove)\nusing this:\n  \\<lbrakk>?z43 \\<in> set T; ?yb43 \\<in> set S;\n   timpls_transformable_to' TI ?z43 ?yb43\\<rbrakk>\n  \\<Longrightarrow> size ?z43 = size ?yb43\n  timpls_transformable_to' TI (Fun f T) (Fun g S)\n  timpls_transformable_to' TI (Fun f T) (Fun g S) \\<Longrightarrow>\n  length T = length S\n  \\<lbrakk>timpls_transformable_to' TI (Fun f T) (Fun g S);\n   ?i < length T\\<rbrakk>\n  \\<Longrightarrow> timpls_transformable_to' TI (T ! ?i) (S ! ?i)\n\ngoal (1 subgoal):\n 1. length T = length S &&&\n    (\\<And>i. i < length T \\<Longrightarrow> size (T ! i) = size (S ! i))", "by auto"], ["proof (state)\nthis:\n  length T = length S\n  ?i43 < length T \\<Longrightarrow> size (T ! ?i43) = size (S ! ?i43)\n\ngoal (4 subgoals):\n 1. \\<And>TI x y.\n       timpls_transformable_to' TI (Var x) (Var y) \\<Longrightarrow>\n       size (Var x) = size (Var y)\n 2. \\<And>TI f T g S.\n       \\<lbrakk>\\<And>z yb.\n                   \\<lbrakk>z \\<in> set T; yb \\<in> set S;\n                    timpls_transformable_to' TI z yb\\<rbrakk>\n                   \\<Longrightarrow> size z = size yb;\n        timpls_transformable_to' TI (Fun f T) (Fun g S)\\<rbrakk>\n       \\<Longrightarrow> size (Fun f T) = size (Fun g S)\n 3. \\<And>uu_ v va vb.\n       timpls_transformable_to' uu_ (Fun v va) (Var vb) \\<Longrightarrow>\n       size (Fun v va) = size (Var vb)\n 4. \\<And>uu_ vb v va.\n       timpls_transformable_to' uu_ (Var vb) (Fun v va) \\<Longrightarrow>\n       size (Var vb) = size (Fun v va)", "thus ?case"], ["proof (prove)\nusing this:\n  length T = length S\n  ?i43 < length T \\<Longrightarrow> size (T ! ?i43) = size (S ! ?i43)\n\ngoal (1 subgoal):\n 1. size (Fun f T) = size (Fun g S)", "using *[of S T]"], ["proof (prove)\nusing this:\n  length T = length S\n  ?i43 < length T \\<Longrightarrow> size (T ! ?i43) = size (S ! ?i43)\n  \\<lbrakk>length S = length T;\n   \\<And>i.\n      i < length S \\<Longrightarrow> size (S ! i) = size (T ! i)\\<rbrakk>\n  \\<Longrightarrow> size_list size S = size_list size T\n\ngoal (1 subgoal):\n 1. size (Fun f T) = size (Fun g S)", "by simp"], ["proof (state)\nthis:\n  size (Fun f T) = size (Fun g S)\n\ngoal (3 subgoals):\n 1. \\<And>TI x y.\n       timpls_transformable_to' TI (Var x) (Var y) \\<Longrightarrow>\n       size (Var x) = size (Var y)\n 2. \\<And>uu_ v va vb.\n       timpls_transformable_to' uu_ (Fun v va) (Var vb) \\<Longrightarrow>\n       size (Fun v va) = size (Var vb)\n 3. \\<And>uu_ vb v va.\n       timpls_transformable_to' uu_ (Var vb) (Fun v va) \\<Longrightarrow>\n       size (Var vb) = size (Fun v va)", "qed simp_all"], ["proof (state)\nthis:\n  timpls_transformable_to' TI s t \\<Longrightarrow> size s = size t\n\ngoal (2 subgoals):\n 1. timpls_transformable_to TI s t \\<Longrightarrow>\n    timpls_transformable_to TI s t\n 2. timpls_transformable_to' TI s t \\<Longrightarrow>\n    timpls_transformable_to' TI s t", "qed"], ["", "lemma timpls_transformable_to_if_term_variants:\n  fixes s t::\"(('a, 'b, 'c) prot_fun, 'd) term\" and a b::\"'c set\"\n  defines \"P \\<equiv> (\\<lambda>_. [])(Abs a := [Abs b])\"\n  assumes st: \"term_variants_pred P s t\"\n    and ab: \"(a,b) \\<in> set TI\"\n  shows \"timpls_transformable_to TI s t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. timpls_transformable_to TI s t", "using st P_def"], ["proof (prove)\nusing this:\n  term_variants_pred P s t\n  P \\<equiv> (\\<lambda>_. [])(Abs a := [Abs b])\n\ngoal (1 subgoal):\n 1. timpls_transformable_to TI s t", "proof (induction rule: term_variants_pred.induct)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x. timpls_transformable_to TI (Var x) (Var x)\n 2. \\<And>T S g f.\n       \\<lbrakk>length T = length S;\n        \\<And>i.\n           i < length T \\<Longrightarrow>\n           term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) (T ! i)\n            (S ! i);\n        \\<And>i.\n           i < length T \\<Longrightarrow>\n           timpls_transformable_to TI (T ! i) (S ! i);\n        g \\<in> set (((\\<lambda>_. [])(Abs a := [Abs b])) f)\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to TI (Fun f T) (Fun g S)\n 3. \\<And>T S f.\n       \\<lbrakk>length T = length S;\n        \\<And>i.\n           i < length T \\<Longrightarrow>\n           term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) (T ! i)\n            (S ! i);\n        \\<And>i.\n           i < length T \\<Longrightarrow>\n           timpls_transformable_to TI (T ! i) (S ! i)\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to TI (Fun f T) (Fun f S)", "case (term_variants_P T S f)"], ["proof (state)\nthis:\n  length T = length S\n  ?i43 < length T \\<Longrightarrow>\n  term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) (T ! ?i43)\n   (S ! ?i43)\n  ?i43 < length T \\<Longrightarrow>\n  timpls_transformable_to TI (T ! ?i43) (S ! ?i43)\n  f \\<in> set (((\\<lambda>_. [])(Abs a := [Abs b])) f_)\n\ngoal (3 subgoals):\n 1. \\<And>x. timpls_transformable_to TI (Var x) (Var x)\n 2. \\<And>T S g f.\n       \\<lbrakk>length T = length S;\n        \\<And>i.\n           i < length T \\<Longrightarrow>\n           term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) (T ! i)\n            (S ! i);\n        \\<And>i.\n           i < length T \\<Longrightarrow>\n           timpls_transformable_to TI (T ! i) (S ! i);\n        g \\<in> set (((\\<lambda>_. [])(Abs a := [Abs b])) f)\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to TI (Fun f T) (Fun g S)\n 3. \\<And>T S f.\n       \\<lbrakk>length T = length S;\n        \\<And>i.\n           i < length T \\<Longrightarrow>\n           term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) (T ! i)\n            (S ! i);\n        \\<And>i.\n           i < length T \\<Longrightarrow>\n           timpls_transformable_to TI (T ! i) (S ! i)\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to TI (Fun f T) (Fun f S)", "thus ?case"], ["proof (prove)\nusing this:\n  length T = length S\n  ?i43 < length T \\<Longrightarrow>\n  term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) (T ! ?i43)\n   (S ! ?i43)\n  ?i43 < length T \\<Longrightarrow>\n  timpls_transformable_to TI (T ! ?i43) (S ! ?i43)\n  f \\<in> set (((\\<lambda>_. [])(Abs a := [Abs b])) f_)\n\ngoal (1 subgoal):\n 1. timpls_transformable_to TI (Fun f_ T) (Fun f S)", "using ab list_all2_conv_all_nth[of \"timpls_transformable_to TI\" T S]"], ["proof (prove)\nusing this:\n  length T = length S\n  ?i43 < length T \\<Longrightarrow>\n  term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) (T ! ?i43)\n   (S ! ?i43)\n  ?i43 < length T \\<Longrightarrow>\n  timpls_transformable_to TI (T ! ?i43) (S ! ?i43)\n  f \\<in> set (((\\<lambda>_. [])(Abs a := [Abs b])) f_)\n  (a, b) \\<in> set TI\n  list_all2 (timpls_transformable_to TI) T S =\n  (length T = length S \\<and>\n   (\\<forall>i<length T. timpls_transformable_to TI (T ! i) (S ! i)))\n\ngoal (1 subgoal):\n 1. timpls_transformable_to TI (Fun f_ T) (Fun f S)", "by auto"], ["proof (state)\nthis:\n  timpls_transformable_to TI (Fun f_ T) (Fun f S)\n\ngoal (2 subgoals):\n 1. \\<And>x. timpls_transformable_to TI (Var x) (Var x)\n 2. \\<And>T S f.\n       \\<lbrakk>length T = length S;\n        \\<And>i.\n           i < length T \\<Longrightarrow>\n           term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) (T ! i)\n            (S ! i);\n        \\<And>i.\n           i < length T \\<Longrightarrow>\n           timpls_transformable_to TI (T ! i) (S ! i)\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to TI (Fun f T) (Fun f S)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x. timpls_transformable_to TI (Var x) (Var x)\n 2. \\<And>T S f.\n       \\<lbrakk>length T = length S;\n        \\<And>i.\n           i < length T \\<Longrightarrow>\n           term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) (T ! i)\n            (S ! i);\n        \\<And>i.\n           i < length T \\<Longrightarrow>\n           timpls_transformable_to TI (T ! i) (S ! i)\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to TI (Fun f T) (Fun f S)", "case (term_variants_Fun T S f)"], ["proof (state)\nthis:\n  length T = length S\n  ?i43 < length T \\<Longrightarrow>\n  term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) (T ! ?i43)\n   (S ! ?i43)\n  ?i43 < length T \\<Longrightarrow>\n  timpls_transformable_to TI (T ! ?i43) (S ! ?i43)\n\ngoal (2 subgoals):\n 1. \\<And>x. timpls_transformable_to TI (Var x) (Var x)\n 2. \\<And>T S f.\n       \\<lbrakk>length T = length S;\n        \\<And>i.\n           i < length T \\<Longrightarrow>\n           term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) (T ! i)\n            (S ! i);\n        \\<And>i.\n           i < length T \\<Longrightarrow>\n           timpls_transformable_to TI (T ! i) (S ! i)\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to TI (Fun f T) (Fun f S)", "thus ?case"], ["proof (prove)\nusing this:\n  length T = length S\n  ?i43 < length T \\<Longrightarrow>\n  term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) (T ! ?i43)\n   (S ! ?i43)\n  ?i43 < length T \\<Longrightarrow>\n  timpls_transformable_to TI (T ! ?i43) (S ! ?i43)\n\ngoal (1 subgoal):\n 1. timpls_transformable_to TI (Fun f T) (Fun f S)", "using ab list_all2_conv_all_nth[of \"timpls_transformable_to TI\" T S]"], ["proof (prove)\nusing this:\n  length T = length S\n  ?i43 < length T \\<Longrightarrow>\n  term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) (T ! ?i43)\n   (S ! ?i43)\n  ?i43 < length T \\<Longrightarrow>\n  timpls_transformable_to TI (T ! ?i43) (S ! ?i43)\n  (a, b) \\<in> set TI\n  list_all2 (timpls_transformable_to TI) T S =\n  (length T = length S \\<and>\n   (\\<forall>i<length T. timpls_transformable_to TI (T ! i) (S ! i)))\n\ngoal (1 subgoal):\n 1. timpls_transformable_to TI (Fun f T) (Fun f S)", "by auto"], ["proof (state)\nthis:\n  timpls_transformable_to TI (Fun f T) (Fun f S)\n\ngoal (1 subgoal):\n 1. \\<And>x. timpls_transformable_to TI (Var x) (Var x)", "qed simp"], ["", "lemma timpls_transformable_to'_if_term_variants:\n  fixes s t::\"(('a, 'b, 'c) prot_fun, 'd) term\" and a b::\"'c set\"\n  defines \"P \\<equiv> (\\<lambda>_. [])(Abs a := [Abs b])\"\n  assumes st: \"term_variants_pred P s t\"\n    and ab: \"(a,b) \\<in> (set TI)\\<^sup>+\"\n  shows \"timpls_transformable_to' TI s t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. timpls_transformable_to' TI s t", "using st P_def"], ["proof (prove)\nusing this:\n  term_variants_pred P s t\n  P \\<equiv> (\\<lambda>_. [])(Abs a := [Abs b])\n\ngoal (1 subgoal):\n 1. timpls_transformable_to' TI s t", "proof (induction rule: term_variants_pred.induct)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x. timpls_transformable_to' TI (Var x) (Var x)\n 2. \\<And>T S g f.\n       \\<lbrakk>length T = length S;\n        \\<And>i.\n           i < length T \\<Longrightarrow>\n           term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) (T ! i)\n            (S ! i);\n        \\<And>i.\n           i < length T \\<Longrightarrow>\n           timpls_transformable_to' TI (T ! i) (S ! i);\n        g \\<in> set (((\\<lambda>_. [])(Abs a := [Abs b])) f)\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to' TI (Fun f T) (Fun g S)\n 3. \\<And>T S f.\n       \\<lbrakk>length T = length S;\n        \\<And>i.\n           i < length T \\<Longrightarrow>\n           term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) (T ! i)\n            (S ! i);\n        \\<And>i.\n           i < length T \\<Longrightarrow>\n           timpls_transformable_to' TI (T ! i) (S ! i)\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to' TI (Fun f T) (Fun f S)", "case (term_variants_P T S f)"], ["proof (state)\nthis:\n  length T = length S\n  ?i43 < length T \\<Longrightarrow>\n  term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) (T ! ?i43)\n   (S ! ?i43)\n  ?i43 < length T \\<Longrightarrow>\n  timpls_transformable_to' TI (T ! ?i43) (S ! ?i43)\n  f \\<in> set (((\\<lambda>_. [])(Abs a := [Abs b])) f_)\n\ngoal (3 subgoals):\n 1. \\<And>x. timpls_transformable_to' TI (Var x) (Var x)\n 2. \\<And>T S g f.\n       \\<lbrakk>length T = length S;\n        \\<And>i.\n           i < length T \\<Longrightarrow>\n           term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) (T ! i)\n            (S ! i);\n        \\<And>i.\n           i < length T \\<Longrightarrow>\n           timpls_transformable_to' TI (T ! i) (S ! i);\n        g \\<in> set (((\\<lambda>_. [])(Abs a := [Abs b])) f)\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to' TI (Fun f T) (Fun g S)\n 3. \\<And>T S f.\n       \\<lbrakk>length T = length S;\n        \\<And>i.\n           i < length T \\<Longrightarrow>\n           term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) (T ! i)\n            (S ! i);\n        \\<And>i.\n           i < length T \\<Longrightarrow>\n           timpls_transformable_to' TI (T ! i) (S ! i)\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to' TI (Fun f T) (Fun f S)", "thus ?case"], ["proof (prove)\nusing this:\n  length T = length S\n  ?i43 < length T \\<Longrightarrow>\n  term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) (T ! ?i43)\n   (S ! ?i43)\n  ?i43 < length T \\<Longrightarrow>\n  timpls_transformable_to' TI (T ! ?i43) (S ! ?i43)\n  f \\<in> set (((\\<lambda>_. [])(Abs a := [Abs b])) f_)\n\ngoal (1 subgoal):\n 1. timpls_transformable_to' TI (Fun f_ T) (Fun f S)", "using ab list_all2_conv_all_nth[of \"timpls_transformable_to' TI\" T S]\n          in_trancl_closure_iff_in_trancl_fun[of _ _ TI]"], ["proof (prove)\nusing this:\n  length T = length S\n  ?i43 < length T \\<Longrightarrow>\n  term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) (T ! ?i43)\n   (S ! ?i43)\n  ?i43 < length T \\<Longrightarrow>\n  timpls_transformable_to' TI (T ! ?i43) (S ! ?i43)\n  f \\<in> set (((\\<lambda>_. [])(Abs a := [Abs b])) f_)\n  (a, b) \\<in> (set TI)\\<^sup>+\n  list_all2 (timpls_transformable_to' TI) T S =\n  (length T = length S \\<and>\n   (\\<forall>i<length T. timpls_transformable_to' TI (T ! i) (S ! i)))\n  ((?a, ?b) \\<in> (set TI)\\<^sup>+) = in_trancl TI ?a ?b\n\ngoal (1 subgoal):\n 1. timpls_transformable_to' TI (Fun f_ T) (Fun f S)", "by auto"], ["proof (state)\nthis:\n  timpls_transformable_to' TI (Fun f_ T) (Fun f S)\n\ngoal (2 subgoals):\n 1. \\<And>x. timpls_transformable_to' TI (Var x) (Var x)\n 2. \\<And>T S f.\n       \\<lbrakk>length T = length S;\n        \\<And>i.\n           i < length T \\<Longrightarrow>\n           term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) (T ! i)\n            (S ! i);\n        \\<And>i.\n           i < length T \\<Longrightarrow>\n           timpls_transformable_to' TI (T ! i) (S ! i)\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to' TI (Fun f T) (Fun f S)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x. timpls_transformable_to' TI (Var x) (Var x)\n 2. \\<And>T S f.\n       \\<lbrakk>length T = length S;\n        \\<And>i.\n           i < length T \\<Longrightarrow>\n           term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) (T ! i)\n            (S ! i);\n        \\<And>i.\n           i < length T \\<Longrightarrow>\n           timpls_transformable_to' TI (T ! i) (S ! i)\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to' TI (Fun f T) (Fun f S)", "case (term_variants_Fun T S f)"], ["proof (state)\nthis:\n  length T = length S\n  ?i43 < length T \\<Longrightarrow>\n  term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) (T ! ?i43)\n   (S ! ?i43)\n  ?i43 < length T \\<Longrightarrow>\n  timpls_transformable_to' TI (T ! ?i43) (S ! ?i43)\n\ngoal (2 subgoals):\n 1. \\<And>x. timpls_transformable_to' TI (Var x) (Var x)\n 2. \\<And>T S f.\n       \\<lbrakk>length T = length S;\n        \\<And>i.\n           i < length T \\<Longrightarrow>\n           term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) (T ! i)\n            (S ! i);\n        \\<And>i.\n           i < length T \\<Longrightarrow>\n           timpls_transformable_to' TI (T ! i) (S ! i)\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to' TI (Fun f T) (Fun f S)", "thus ?case"], ["proof (prove)\nusing this:\n  length T = length S\n  ?i43 < length T \\<Longrightarrow>\n  term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) (T ! ?i43)\n   (S ! ?i43)\n  ?i43 < length T \\<Longrightarrow>\n  timpls_transformable_to' TI (T ! ?i43) (S ! ?i43)\n\ngoal (1 subgoal):\n 1. timpls_transformable_to' TI (Fun f T) (Fun f S)", "using ab list_all2_conv_all_nth[of \"timpls_transformable_to' TI\" T S]\n          in_trancl_closure_iff_in_trancl_fun[of _ _ TI]"], ["proof (prove)\nusing this:\n  length T = length S\n  ?i43 < length T \\<Longrightarrow>\n  term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) (T ! ?i43)\n   (S ! ?i43)\n  ?i43 < length T \\<Longrightarrow>\n  timpls_transformable_to' TI (T ! ?i43) (S ! ?i43)\n  (a, b) \\<in> (set TI)\\<^sup>+\n  list_all2 (timpls_transformable_to' TI) T S =\n  (length T = length S \\<and>\n   (\\<forall>i<length T. timpls_transformable_to' TI (T ! i) (S ! i)))\n  ((?a, ?b) \\<in> (set TI)\\<^sup>+) = in_trancl TI ?a ?b\n\ngoal (1 subgoal):\n 1. timpls_transformable_to' TI (Fun f T) (Fun f S)", "by auto"], ["proof (state)\nthis:\n  timpls_transformable_to' TI (Fun f T) (Fun f S)\n\ngoal (1 subgoal):\n 1. \\<And>x. timpls_transformable_to' TI (Var x) (Var x)", "qed simp"], ["", "lemma timpls_transformable_to_trans:\n  assumes TI_trancl: \"\\<forall>(a,b) \\<in> (set TI)\\<^sup>+. a \\<noteq> b \\<longrightarrow> (a,b) \\<in> set TI\"\n    and st: \"timpls_transformable_to TI s t\"\n    and tu: \"timpls_transformable_to TI t u\"\n  shows \"timpls_transformable_to TI s u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. timpls_transformable_to TI s u", "using st tu"], ["proof (prove)\nusing this:\n  timpls_transformable_to TI s t\n  timpls_transformable_to TI t u\n\ngoal (1 subgoal):\n 1. timpls_transformable_to TI s u", "proof (induction s arbitrary: t u)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x t u.\n       \\<lbrakk>timpls_transformable_to TI (Var x) t;\n        timpls_transformable_to TI t u\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to TI (Var x) u\n 2. \\<And>x1a x2 t u.\n       \\<lbrakk>\\<And>x2a t u.\n                   \\<lbrakk>x2a \\<in> set x2;\n                    timpls_transformable_to TI x2a t;\n                    timpls_transformable_to TI t u\\<rbrakk>\n                   \\<Longrightarrow> timpls_transformable_to TI x2a u;\n        timpls_transformable_to TI (Fun x1a x2) t;\n        timpls_transformable_to TI t u\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to TI (Fun x1a x2) u", "case (Var x)"], ["proof (state)\nthis:\n  timpls_transformable_to TI (Var x) t\n  timpls_transformable_to TI t u\n\ngoal (2 subgoals):\n 1. \\<And>x t u.\n       \\<lbrakk>timpls_transformable_to TI (Var x) t;\n        timpls_transformable_to TI t u\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to TI (Var x) u\n 2. \\<And>x1a x2 t u.\n       \\<lbrakk>\\<And>x2a t u.\n                   \\<lbrakk>x2a \\<in> set x2;\n                    timpls_transformable_to TI x2a t;\n                    timpls_transformable_to TI t u\\<rbrakk>\n                   \\<Longrightarrow> timpls_transformable_to TI x2a u;\n        timpls_transformable_to TI (Fun x1a x2) t;\n        timpls_transformable_to TI t u\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to TI (Fun x1a x2) u", "thus ?case"], ["proof (prove)\nusing this:\n  timpls_transformable_to TI (Var x) t\n  timpls_transformable_to TI t u\n\ngoal (1 subgoal):\n 1. timpls_transformable_to TI (Var x) u", "using tu timpls_transformable_to_inv_Var(1)"], ["proof (prove)\nusing this:\n  timpls_transformable_to TI (Var x) t\n  timpls_transformable_to TI t u\n  timpls_transformable_to TI t u\n  timpls_transformable_to ?TI (Var ?x) ?t \\<Longrightarrow> ?t = Var ?x\n\ngoal (1 subgoal):\n 1. timpls_transformable_to TI (Var x) u", "by fast"], ["proof (state)\nthis:\n  timpls_transformable_to TI (Var x) u\n\ngoal (1 subgoal):\n 1. \\<And>x1a x2 t u.\n       \\<lbrakk>\\<And>x2a t u.\n                   \\<lbrakk>x2a \\<in> set x2;\n                    timpls_transformable_to TI x2a t;\n                    timpls_transformable_to TI t u\\<rbrakk>\n                   \\<Longrightarrow> timpls_transformable_to TI x2a u;\n        timpls_transformable_to TI (Fun x1a x2) t;\n        timpls_transformable_to TI t u\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to TI (Fun x1a x2) u", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x1a x2 t u.\n       \\<lbrakk>\\<And>x2a t u.\n                   \\<lbrakk>x2a \\<in> set x2;\n                    timpls_transformable_to TI x2a t;\n                    timpls_transformable_to TI t u\\<rbrakk>\n                   \\<Longrightarrow> timpls_transformable_to TI x2a u;\n        timpls_transformable_to TI (Fun x1a x2) t;\n        timpls_transformable_to TI t u\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to TI (Fun x1a x2) u", "case (Fun f T)"], ["proof (state)\nthis:\n  \\<lbrakk>?x2a43 \\<in> set T; timpls_transformable_to TI ?x2a43 ?t43;\n   timpls_transformable_to TI ?t43 ?u43\\<rbrakk>\n  \\<Longrightarrow> timpls_transformable_to TI ?x2a43 ?u43\n  timpls_transformable_to TI (Fun f T) t\n  timpls_transformable_to TI t u\n\ngoal (1 subgoal):\n 1. \\<And>x1a x2 t u.\n       \\<lbrakk>\\<And>x2a t u.\n                   \\<lbrakk>x2a \\<in> set x2;\n                    timpls_transformable_to TI x2a t;\n                    timpls_transformable_to TI t u\\<rbrakk>\n                   \\<Longrightarrow> timpls_transformable_to TI x2a u;\n        timpls_transformable_to TI (Fun x1a x2) t;\n        timpls_transformable_to TI t u\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to TI (Fun x1a x2) u", "obtain g S where t:\n      \"t = Fun g S\" \"length T = length S\"\n      \"\\<And>i. i < length T \\<Longrightarrow> timpls_transformable_to TI (T ! i) (S ! i)\"\n      \"f \\<noteq> g \\<Longrightarrow> is_Abs f \\<and> is_Abs g \\<and> (the_Abs f, the_Abs g) \\<in> set TI\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>g S.\n        \\<lbrakk>t = Fun g S; length T = length S;\n         \\<And>i.\n            i < length T \\<Longrightarrow>\n            timpls_transformable_to TI (T ! i) (S ! i);\n         f \\<noteq> g \\<Longrightarrow>\n         is_Abs f \\<and>\n         is_Abs g \\<and> (the_Abs f, the_Abs g) \\<in> set TI\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using timpls_transformable_to_inv'[OF Fun.prems(1)] TI_trancl"], ["proof (prove)\nusing this:\n  is_Fun t\n  length T = length (args t)\n  ?i < length T \\<Longrightarrow>\n  timpls_transformable_to TI (T ! ?i) (args t ! ?i)\n  f \\<noteq> the_Fun t \\<Longrightarrow>\n  is_Abs f \\<and>\n  is_Abs (the_Fun t) \\<and> (the_Abs f, the_Abs (the_Fun t)) \\<in> set TI\n  \\<not> is_Abs f \\<Longrightarrow> f = the_Fun t\n  \\<forall>(a, b)\\<in>(set TI)\\<^sup>+.\n     a \\<noteq> b \\<longrightarrow> (a, b) \\<in> set TI\n\ngoal (1 subgoal):\n 1. (\\<And>g S.\n        \\<lbrakk>t = Fun g S; length T = length S;\n         \\<And>i.\n            i < length T \\<Longrightarrow>\n            timpls_transformable_to TI (T ! i) (S ! i);\n         f \\<noteq> g \\<Longrightarrow>\n         is_Abs f \\<and>\n         is_Abs g \\<and> (the_Abs f, the_Abs g) \\<in> set TI\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by moura"], ["proof (state)\nthis:\n  t = Fun g S\n  length T = length S\n  ?i43 < length T \\<Longrightarrow>\n  timpls_transformable_to TI (T ! ?i43) (S ! ?i43)\n  f \\<noteq> g \\<Longrightarrow>\n  is_Abs f \\<and> is_Abs g \\<and> (the_Abs f, the_Abs g) \\<in> set TI\n\ngoal (1 subgoal):\n 1. \\<And>x1a x2 t u.\n       \\<lbrakk>\\<And>x2a t u.\n                   \\<lbrakk>x2a \\<in> set x2;\n                    timpls_transformable_to TI x2a t;\n                    timpls_transformable_to TI t u\\<rbrakk>\n                   \\<Longrightarrow> timpls_transformable_to TI x2a u;\n        timpls_transformable_to TI (Fun x1a x2) t;\n        timpls_transformable_to TI t u\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to TI (Fun x1a x2) u", "obtain h U where u:\n      \"u = Fun h U\" \"length S = length U\"\n      \"\\<And>i. i < length S \\<Longrightarrow> timpls_transformable_to TI (S ! i) (U ! i)\"\n      \"g \\<noteq> h \\<Longrightarrow> is_Abs g \\<and> is_Abs h \\<and> (the_Abs g, the_Abs h) \\<in> set TI\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>h U.\n        \\<lbrakk>u = Fun h U; length S = length U;\n         \\<And>i.\n            i < length S \\<Longrightarrow>\n            timpls_transformable_to TI (S ! i) (U ! i);\n         g \\<noteq> h \\<Longrightarrow>\n         is_Abs g \\<and>\n         is_Abs h \\<and> (the_Abs g, the_Abs h) \\<in> set TI\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using timpls_transformable_to_inv'[OF Fun.prems(2)[unfolded t(1)]] TI_trancl"], ["proof (prove)\nusing this:\n  is_Fun u\n  length S = length (args u)\n  ?i < length S \\<Longrightarrow>\n  timpls_transformable_to TI (S ! ?i) (args u ! ?i)\n  g \\<noteq> the_Fun u \\<Longrightarrow>\n  is_Abs g \\<and>\n  is_Abs (the_Fun u) \\<and> (the_Abs g, the_Abs (the_Fun u)) \\<in> set TI\n  \\<not> is_Abs g \\<Longrightarrow> g = the_Fun u\n  \\<forall>(a, b)\\<in>(set TI)\\<^sup>+.\n     a \\<noteq> b \\<longrightarrow> (a, b) \\<in> set TI\n\ngoal (1 subgoal):\n 1. (\\<And>h U.\n        \\<lbrakk>u = Fun h U; length S = length U;\n         \\<And>i.\n            i < length S \\<Longrightarrow>\n            timpls_transformable_to TI (S ! i) (U ! i);\n         g \\<noteq> h \\<Longrightarrow>\n         is_Abs g \\<and>\n         is_Abs h \\<and> (the_Abs g, the_Abs h) \\<in> set TI\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by moura"], ["proof (state)\nthis:\n  u = Fun h U\n  length S = length U\n  ?i43 < length S \\<Longrightarrow>\n  timpls_transformable_to TI (S ! ?i43) (U ! ?i43)\n  g \\<noteq> h \\<Longrightarrow>\n  is_Abs g \\<and> is_Abs h \\<and> (the_Abs g, the_Abs h) \\<in> set TI\n\ngoal (1 subgoal):\n 1. \\<And>x1a x2 t u.\n       \\<lbrakk>\\<And>x2a t u.\n                   \\<lbrakk>x2a \\<in> set x2;\n                    timpls_transformable_to TI x2a t;\n                    timpls_transformable_to TI t u\\<rbrakk>\n                   \\<Longrightarrow> timpls_transformable_to TI x2a u;\n        timpls_transformable_to TI (Fun x1a x2) t;\n        timpls_transformable_to TI t u\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to TI (Fun x1a x2) u", "have \"list_all2 (timpls_transformable_to TI) T U\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_all2 (timpls_transformable_to TI) T U", "using t(1,2,3) u(1,2,3) Fun.IH\n          list_all2_conv_all_nth[of \"timpls_transformable_to TI\" T S]\n          list_all2_conv_all_nth[of \"timpls_transformable_to TI\" S U]\n          list_all2_conv_all_nth[of \"timpls_transformable_to TI\" T U]"], ["proof (prove)\nusing this:\n  t = Fun g S\n  length T = length S\n  ?i43 < length T \\<Longrightarrow>\n  timpls_transformable_to TI (T ! ?i43) (S ! ?i43)\n  u = Fun h U\n  length S = length U\n  ?i43 < length S \\<Longrightarrow>\n  timpls_transformable_to TI (S ! ?i43) (U ! ?i43)\n  \\<lbrakk>?x2a43 \\<in> set T; timpls_transformable_to TI ?x2a43 ?t43;\n   timpls_transformable_to TI ?t43 ?u43\\<rbrakk>\n  \\<Longrightarrow> timpls_transformable_to TI ?x2a43 ?u43\n  list_all2 (timpls_transformable_to TI) T S =\n  (length T = length S \\<and>\n   (\\<forall>i<length T. timpls_transformable_to TI (T ! i) (S ! i)))\n  list_all2 (timpls_transformable_to TI) S U =\n  (length S = length U \\<and>\n   (\\<forall>i<length S. timpls_transformable_to TI (S ! i) (U ! i)))\n  list_all2 (timpls_transformable_to TI) T U =\n  (length T = length U \\<and>\n   (\\<forall>i<length T. timpls_transformable_to TI (T ! i) (U ! i)))\n\ngoal (1 subgoal):\n 1. list_all2 (timpls_transformable_to TI) T U", "by force"], ["proof (state)\nthis:\n  list_all2 (timpls_transformable_to TI) T U\n\ngoal (1 subgoal):\n 1. \\<And>x1a x2 t u.\n       \\<lbrakk>\\<And>x2a t u.\n                   \\<lbrakk>x2a \\<in> set x2;\n                    timpls_transformable_to TI x2a t;\n                    timpls_transformable_to TI t u\\<rbrakk>\n                   \\<Longrightarrow> timpls_transformable_to TI x2a u;\n        timpls_transformable_to TI (Fun x1a x2) t;\n        timpls_transformable_to TI t u\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to TI (Fun x1a x2) u", "moreover"], ["proof (state)\nthis:\n  list_all2 (timpls_transformable_to TI) T U\n\ngoal (1 subgoal):\n 1. \\<And>x1a x2 t u.\n       \\<lbrakk>\\<And>x2a t u.\n                   \\<lbrakk>x2a \\<in> set x2;\n                    timpls_transformable_to TI x2a t;\n                    timpls_transformable_to TI t u\\<rbrakk>\n                   \\<Longrightarrow> timpls_transformable_to TI x2a u;\n        timpls_transformable_to TI (Fun x1a x2) t;\n        timpls_transformable_to TI t u\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to TI (Fun x1a x2) u", "have \"(the_Abs f, the_Abs h) \\<in> set TI\"\n    when \"(the_Abs f, the_Abs g) \\<in> set TI\" \"(the_Abs g, the_Abs h) \\<in> set TI\"\n         \"f \\<noteq> h\" \"is_Abs f\" \"is_Abs h\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (the_Abs f, the_Abs h) \\<in> set TI", "using that(3,4,5) TI_trancl trancl_into_trancl[OF r_into_trancl[OF that(1)] that(2)]"], ["proof (prove)\nusing this:\n  f \\<noteq> h\n  is_Abs f\n  is_Abs h\n  \\<forall>(a, b)\\<in>(set TI)\\<^sup>+.\n     a \\<noteq> b \\<longrightarrow> (a, b) \\<in> set TI\n  (the_Abs f, the_Abs h) \\<in> (set TI)\\<^sup>+\n\ngoal (1 subgoal):\n 1. (the_Abs f, the_Abs h) \\<in> set TI", "unfolding is_Abs_def the_Abs_def"], ["proof (prove)\nusing this:\n  f \\<noteq> h\n  \\<exists>x4. f = Abs x4\n  \\<exists>x4. h = Abs x4\n  \\<forall>(a, b)\\<in>(set TI)\\<^sup>+.\n     a \\<noteq> b \\<longrightarrow> (a, b) \\<in> set TI\n  (case f of Abs x4 \\<Rightarrow> x4, case h of Abs x4 \\<Rightarrow> x4)\n  \\<in> (set TI)\\<^sup>+\n\ngoal (1 subgoal):\n 1. (case f of Abs x4 \\<Rightarrow> x4, case h of Abs x4 \\<Rightarrow> x4)\n    \\<in> set TI", "by force"], ["proof (state)\nthis:\n  \\<lbrakk>(the_Abs f, the_Abs g) \\<in> set TI;\n   (the_Abs g, the_Abs h) \\<in> set TI; f \\<noteq> h; is_Abs f;\n   is_Abs h\\<rbrakk>\n  \\<Longrightarrow> (the_Abs f, the_Abs h) \\<in> set TI\n\ngoal (1 subgoal):\n 1. \\<And>x1a x2 t u.\n       \\<lbrakk>\\<And>x2a t u.\n                   \\<lbrakk>x2a \\<in> set x2;\n                    timpls_transformable_to TI x2a t;\n                    timpls_transformable_to TI t u\\<rbrakk>\n                   \\<Longrightarrow> timpls_transformable_to TI x2a u;\n        timpls_transformable_to TI (Fun x1a x2) t;\n        timpls_transformable_to TI t u\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to TI (Fun x1a x2) u", "hence \"is_Abs f \\<and> is_Abs h \\<and> (the_Abs f, the_Abs h) \\<in> set TI\"\n    when \"f \\<noteq> h\""], ["proof (prove)\nusing this:\n  \\<lbrakk>(the_Abs f, the_Abs g) \\<in> set TI;\n   (the_Abs g, the_Abs h) \\<in> set TI; f \\<noteq> h; is_Abs f;\n   is_Abs h\\<rbrakk>\n  \\<Longrightarrow> (the_Abs f, the_Abs h) \\<in> set TI\n\ngoal (1 subgoal):\n 1. is_Abs f \\<and> is_Abs h \\<and> (the_Abs f, the_Abs h) \\<in> set TI", "using that TI_trancl t(4) u(4)"], ["proof (prove)\nusing this:\n  \\<lbrakk>(the_Abs f, the_Abs g) \\<in> set TI;\n   (the_Abs g, the_Abs h) \\<in> set TI; f \\<noteq> h; is_Abs f;\n   is_Abs h\\<rbrakk>\n  \\<Longrightarrow> (the_Abs f, the_Abs h) \\<in> set TI\n  f \\<noteq> h\n  \\<forall>(a, b)\\<in>(set TI)\\<^sup>+.\n     a \\<noteq> b \\<longrightarrow> (a, b) \\<in> set TI\n  f \\<noteq> g \\<Longrightarrow>\n  is_Abs f \\<and> is_Abs g \\<and> (the_Abs f, the_Abs g) \\<in> set TI\n  g \\<noteq> h \\<Longrightarrow>\n  is_Abs g \\<and> is_Abs h \\<and> (the_Abs g, the_Abs h) \\<in> set TI\n\ngoal (1 subgoal):\n 1. is_Abs f \\<and> is_Abs h \\<and> (the_Abs f, the_Abs h) \\<in> set TI", "by fast"], ["proof (state)\nthis:\n  f \\<noteq> h \\<Longrightarrow>\n  is_Abs f \\<and> is_Abs h \\<and> (the_Abs f, the_Abs h) \\<in> set TI\n\ngoal (1 subgoal):\n 1. \\<And>x1a x2 t u.\n       \\<lbrakk>\\<And>x2a t u.\n                   \\<lbrakk>x2a \\<in> set x2;\n                    timpls_transformable_to TI x2a t;\n                    timpls_transformable_to TI t u\\<rbrakk>\n                   \\<Longrightarrow> timpls_transformable_to TI x2a u;\n        timpls_transformable_to TI (Fun x1a x2) t;\n        timpls_transformable_to TI t u\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to TI (Fun x1a x2) u", "ultimately"], ["proof (chain)\npicking this:\n  list_all2 (timpls_transformable_to TI) T U\n  f \\<noteq> h \\<Longrightarrow>\n  is_Abs f \\<and> is_Abs h \\<and> (the_Abs f, the_Abs h) \\<in> set TI", "show ?case"], ["proof (prove)\nusing this:\n  list_all2 (timpls_transformable_to TI) T U\n  f \\<noteq> h \\<Longrightarrow>\n  is_Abs f \\<and> is_Abs h \\<and> (the_Abs f, the_Abs h) \\<in> set TI\n\ngoal (1 subgoal):\n 1. timpls_transformable_to TI (Fun f T) u", "using t(1) u(1)"], ["proof (prove)\nusing this:\n  list_all2 (timpls_transformable_to TI) T U\n  f \\<noteq> h \\<Longrightarrow>\n  is_Abs f \\<and> is_Abs h \\<and> (the_Abs f, the_Abs h) \\<in> set TI\n  t = Fun g S\n  u = Fun h U\n\ngoal (1 subgoal):\n 1. timpls_transformable_to TI (Fun f T) u", "by force"], ["proof (state)\nthis:\n  timpls_transformable_to TI (Fun f T) u\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma timpls_transformable_to'_trans:\n  assumes st: \"timpls_transformable_to' TI s t\"\n    and tu: \"timpls_transformable_to' TI t u\"\n  shows \"timpls_transformable_to' TI s u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. timpls_transformable_to' TI s u", "using st tu"], ["proof (prove)\nusing this:\n  timpls_transformable_to' TI s t\n  timpls_transformable_to' TI t u\n\ngoal (1 subgoal):\n 1. timpls_transformable_to' TI s u", "proof (induction s arbitrary: t u)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x t u.\n       \\<lbrakk>timpls_transformable_to' TI (Var x) t;\n        timpls_transformable_to' TI t u\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to' TI (Var x) u\n 2. \\<And>x1a x2 t u.\n       \\<lbrakk>\\<And>x2a t u.\n                   \\<lbrakk>x2a \\<in> set x2;\n                    timpls_transformable_to' TI x2a t;\n                    timpls_transformable_to' TI t u\\<rbrakk>\n                   \\<Longrightarrow> timpls_transformable_to' TI x2a u;\n        timpls_transformable_to' TI (Fun x1a x2) t;\n        timpls_transformable_to' TI t u\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to' TI (Fun x1a x2) u", "case (Var x)"], ["proof (state)\nthis:\n  timpls_transformable_to' TI (Var x) t\n  timpls_transformable_to' TI t u\n\ngoal (2 subgoals):\n 1. \\<And>x t u.\n       \\<lbrakk>timpls_transformable_to' TI (Var x) t;\n        timpls_transformable_to' TI t u\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to' TI (Var x) u\n 2. \\<And>x1a x2 t u.\n       \\<lbrakk>\\<And>x2a t u.\n                   \\<lbrakk>x2a \\<in> set x2;\n                    timpls_transformable_to' TI x2a t;\n                    timpls_transformable_to' TI t u\\<rbrakk>\n                   \\<Longrightarrow> timpls_transformable_to' TI x2a u;\n        timpls_transformable_to' TI (Fun x1a x2) t;\n        timpls_transformable_to' TI t u\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to' TI (Fun x1a x2) u", "thus ?case"], ["proof (prove)\nusing this:\n  timpls_transformable_to' TI (Var x) t\n  timpls_transformable_to' TI t u\n\ngoal (1 subgoal):\n 1. timpls_transformable_to' TI (Var x) u", "using tu timpls_transformable_to_inv_Var(3)"], ["proof (prove)\nusing this:\n  timpls_transformable_to' TI (Var x) t\n  timpls_transformable_to' TI t u\n  timpls_transformable_to' TI t u\n  timpls_transformable_to' ?TI (Var ?x) ?t \\<Longrightarrow> ?t = Var ?x\n\ngoal (1 subgoal):\n 1. timpls_transformable_to' TI (Var x) u", "by fast"], ["proof (state)\nthis:\n  timpls_transformable_to' TI (Var x) u\n\ngoal (1 subgoal):\n 1. \\<And>x1a x2 t u.\n       \\<lbrakk>\\<And>x2a t u.\n                   \\<lbrakk>x2a \\<in> set x2;\n                    timpls_transformable_to' TI x2a t;\n                    timpls_transformable_to' TI t u\\<rbrakk>\n                   \\<Longrightarrow> timpls_transformable_to' TI x2a u;\n        timpls_transformable_to' TI (Fun x1a x2) t;\n        timpls_transformable_to' TI t u\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to' TI (Fun x1a x2) u", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x1a x2 t u.\n       \\<lbrakk>\\<And>x2a t u.\n                   \\<lbrakk>x2a \\<in> set x2;\n                    timpls_transformable_to' TI x2a t;\n                    timpls_transformable_to' TI t u\\<rbrakk>\n                   \\<Longrightarrow> timpls_transformable_to' TI x2a u;\n        timpls_transformable_to' TI (Fun x1a x2) t;\n        timpls_transformable_to' TI t u\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to' TI (Fun x1a x2) u", "case (Fun f T)"], ["proof (state)\nthis:\n  \\<lbrakk>?x2a43 \\<in> set T; timpls_transformable_to' TI ?x2a43 ?t43;\n   timpls_transformable_to' TI ?t43 ?u43\\<rbrakk>\n  \\<Longrightarrow> timpls_transformable_to' TI ?x2a43 ?u43\n  timpls_transformable_to' TI (Fun f T) t\n  timpls_transformable_to' TI t u\n\ngoal (1 subgoal):\n 1. \\<And>x1a x2 t u.\n       \\<lbrakk>\\<And>x2a t u.\n                   \\<lbrakk>x2a \\<in> set x2;\n                    timpls_transformable_to' TI x2a t;\n                    timpls_transformable_to' TI t u\\<rbrakk>\n                   \\<Longrightarrow> timpls_transformable_to' TI x2a u;\n        timpls_transformable_to' TI (Fun x1a x2) t;\n        timpls_transformable_to' TI t u\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to' TI (Fun x1a x2) u", "note 0 = in_trancl_closure_iff_in_trancl_fun[of _ _ TI]"], ["proof (state)\nthis:\n  ((?a, ?b) \\<in> (set TI)\\<^sup>+) = in_trancl TI ?a ?b\n\ngoal (1 subgoal):\n 1. \\<And>x1a x2 t u.\n       \\<lbrakk>\\<And>x2a t u.\n                   \\<lbrakk>x2a \\<in> set x2;\n                    timpls_transformable_to' TI x2a t;\n                    timpls_transformable_to' TI t u\\<rbrakk>\n                   \\<Longrightarrow> timpls_transformable_to' TI x2a u;\n        timpls_transformable_to' TI (Fun x1a x2) t;\n        timpls_transformable_to' TI t u\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to' TI (Fun x1a x2) u", "obtain g S where t:\n      \"t = Fun g S\" \"length T = length S\"\n      \"\\<And>i. i < length T \\<Longrightarrow> timpls_transformable_to' TI (T ! i) (S ! i)\"\n      \"f \\<noteq> g \\<Longrightarrow> is_Abs f \\<and> is_Abs g \\<and> (the_Abs f, the_Abs g) \\<in> (set TI)\\<^sup>+\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>g S.\n        \\<lbrakk>t = Fun g S; length T = length S;\n         \\<And>i.\n            i < length T \\<Longrightarrow>\n            timpls_transformable_to' TI (T ! i) (S ! i);\n         f \\<noteq> g \\<Longrightarrow>\n         is_Abs f \\<and>\n         is_Abs g \\<and>\n         (the_Abs f, the_Abs g) \\<in> (set TI)\\<^sup>+\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using timpls_transformable_to'_inv'[OF Fun.prems(1)] 0"], ["proof (prove)\nusing this:\n  is_Fun t\n  length T = length (args t)\n  ?i < length T \\<Longrightarrow>\n  timpls_transformable_to' TI (T ! ?i) (args t ! ?i)\n  f \\<noteq> the_Fun t \\<Longrightarrow>\n  is_Abs f \\<and>\n  is_Abs (the_Fun t) \\<and> in_trancl TI (the_Abs f) (the_Abs (the_Fun t))\n  \\<not> is_Abs f \\<Longrightarrow> f = the_Fun t\n  ((?a, ?b) \\<in> (set TI)\\<^sup>+) = in_trancl TI ?a ?b\n\ngoal (1 subgoal):\n 1. (\\<And>g S.\n        \\<lbrakk>t = Fun g S; length T = length S;\n         \\<And>i.\n            i < length T \\<Longrightarrow>\n            timpls_transformable_to' TI (T ! i) (S ! i);\n         f \\<noteq> g \\<Longrightarrow>\n         is_Abs f \\<and>\n         is_Abs g \\<and>\n         (the_Abs f, the_Abs g) \\<in> (set TI)\\<^sup>+\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by moura"], ["proof (state)\nthis:\n  t = Fun g S\n  length T = length S\n  ?i43 < length T \\<Longrightarrow>\n  timpls_transformable_to' TI (T ! ?i43) (S ! ?i43)\n  f \\<noteq> g \\<Longrightarrow>\n  is_Abs f \\<and>\n  is_Abs g \\<and> (the_Abs f, the_Abs g) \\<in> (set TI)\\<^sup>+\n\ngoal (1 subgoal):\n 1. \\<And>x1a x2 t u.\n       \\<lbrakk>\\<And>x2a t u.\n                   \\<lbrakk>x2a \\<in> set x2;\n                    timpls_transformable_to' TI x2a t;\n                    timpls_transformable_to' TI t u\\<rbrakk>\n                   \\<Longrightarrow> timpls_transformable_to' TI x2a u;\n        timpls_transformable_to' TI (Fun x1a x2) t;\n        timpls_transformable_to' TI t u\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to' TI (Fun x1a x2) u", "obtain h U where u:\n      \"u = Fun h U\" \"length S = length U\"\n      \"\\<And>i. i < length S \\<Longrightarrow> timpls_transformable_to' TI (S ! i) (U ! i)\"\n      \"g \\<noteq> h \\<Longrightarrow> is_Abs g \\<and> is_Abs h \\<and> (the_Abs g, the_Abs h) \\<in> (set TI)\\<^sup>+\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>h U.\n        \\<lbrakk>u = Fun h U; length S = length U;\n         \\<And>i.\n            i < length S \\<Longrightarrow>\n            timpls_transformable_to' TI (S ! i) (U ! i);\n         g \\<noteq> h \\<Longrightarrow>\n         is_Abs g \\<and>\n         is_Abs h \\<and>\n         (the_Abs g, the_Abs h) \\<in> (set TI)\\<^sup>+\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using timpls_transformable_to'_inv'[OF Fun.prems(2)[unfolded t(1)]] 0"], ["proof (prove)\nusing this:\n  is_Fun u\n  length S = length (args u)\n  ?i < length S \\<Longrightarrow>\n  timpls_transformable_to' TI (S ! ?i) (args u ! ?i)\n  g \\<noteq> the_Fun u \\<Longrightarrow>\n  is_Abs g \\<and>\n  is_Abs (the_Fun u) \\<and> in_trancl TI (the_Abs g) (the_Abs (the_Fun u))\n  \\<not> is_Abs g \\<Longrightarrow> g = the_Fun u\n  ((?a, ?b) \\<in> (set TI)\\<^sup>+) = in_trancl TI ?a ?b\n\ngoal (1 subgoal):\n 1. (\\<And>h U.\n        \\<lbrakk>u = Fun h U; length S = length U;\n         \\<And>i.\n            i < length S \\<Longrightarrow>\n            timpls_transformable_to' TI (S ! i) (U ! i);\n         g \\<noteq> h \\<Longrightarrow>\n         is_Abs g \\<and>\n         is_Abs h \\<and>\n         (the_Abs g, the_Abs h) \\<in> (set TI)\\<^sup>+\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by moura"], ["proof (state)\nthis:\n  u = Fun h U\n  length S = length U\n  ?i43 < length S \\<Longrightarrow>\n  timpls_transformable_to' TI (S ! ?i43) (U ! ?i43)\n  g \\<noteq> h \\<Longrightarrow>\n  is_Abs g \\<and>\n  is_Abs h \\<and> (the_Abs g, the_Abs h) \\<in> (set TI)\\<^sup>+\n\ngoal (1 subgoal):\n 1. \\<And>x1a x2 t u.\n       \\<lbrakk>\\<And>x2a t u.\n                   \\<lbrakk>x2a \\<in> set x2;\n                    timpls_transformable_to' TI x2a t;\n                    timpls_transformable_to' TI t u\\<rbrakk>\n                   \\<Longrightarrow> timpls_transformable_to' TI x2a u;\n        timpls_transformable_to' TI (Fun x1a x2) t;\n        timpls_transformable_to' TI t u\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to' TI (Fun x1a x2) u", "have \"list_all2 (timpls_transformable_to' TI) T U\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_all2 (timpls_transformable_to' TI) T U", "using t(1,2,3) u(1,2,3) Fun.IH\n          list_all2_conv_all_nth[of \"timpls_transformable_to' TI\" T S]\n          list_all2_conv_all_nth[of \"timpls_transformable_to' TI\" S U]\n          list_all2_conv_all_nth[of \"timpls_transformable_to' TI\" T U]"], ["proof (prove)\nusing this:\n  t = Fun g S\n  length T = length S\n  ?i43 < length T \\<Longrightarrow>\n  timpls_transformable_to' TI (T ! ?i43) (S ! ?i43)\n  u = Fun h U\n  length S = length U\n  ?i43 < length S \\<Longrightarrow>\n  timpls_transformable_to' TI (S ! ?i43) (U ! ?i43)\n  \\<lbrakk>?x2a43 \\<in> set T; timpls_transformable_to' TI ?x2a43 ?t43;\n   timpls_transformable_to' TI ?t43 ?u43\\<rbrakk>\n  \\<Longrightarrow> timpls_transformable_to' TI ?x2a43 ?u43\n  list_all2 (timpls_transformable_to' TI) T S =\n  (length T = length S \\<and>\n   (\\<forall>i<length T. timpls_transformable_to' TI (T ! i) (S ! i)))\n  list_all2 (timpls_transformable_to' TI) S U =\n  (length S = length U \\<and>\n   (\\<forall>i<length S. timpls_transformable_to' TI (S ! i) (U ! i)))\n  list_all2 (timpls_transformable_to' TI) T U =\n  (length T = length U \\<and>\n   (\\<forall>i<length T. timpls_transformable_to' TI (T ! i) (U ! i)))\n\ngoal (1 subgoal):\n 1. list_all2 (timpls_transformable_to' TI) T U", "by force"], ["proof (state)\nthis:\n  list_all2 (timpls_transformable_to' TI) T U\n\ngoal (1 subgoal):\n 1. \\<And>x1a x2 t u.\n       \\<lbrakk>\\<And>x2a t u.\n                   \\<lbrakk>x2a \\<in> set x2;\n                    timpls_transformable_to' TI x2a t;\n                    timpls_transformable_to' TI t u\\<rbrakk>\n                   \\<Longrightarrow> timpls_transformable_to' TI x2a u;\n        timpls_transformable_to' TI (Fun x1a x2) t;\n        timpls_transformable_to' TI t u\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to' TI (Fun x1a x2) u", "moreover"], ["proof (state)\nthis:\n  list_all2 (timpls_transformable_to' TI) T U\n\ngoal (1 subgoal):\n 1. \\<And>x1a x2 t u.\n       \\<lbrakk>\\<And>x2a t u.\n                   \\<lbrakk>x2a \\<in> set x2;\n                    timpls_transformable_to' TI x2a t;\n                    timpls_transformable_to' TI t u\\<rbrakk>\n                   \\<Longrightarrow> timpls_transformable_to' TI x2a u;\n        timpls_transformable_to' TI (Fun x1a x2) t;\n        timpls_transformable_to' TI t u\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to' TI (Fun x1a x2) u", "have \"(the_Abs f, the_Abs h) \\<in> (set TI)\\<^sup>+\"\n    when \"(the_Abs f, the_Abs g) \\<in> (set TI)\\<^sup>+\" \"(the_Abs g, the_Abs h) \\<in> (set TI)\\<^sup>+\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (the_Abs f, the_Abs h) \\<in> (set TI)\\<^sup>+", "using that"], ["proof (prove)\nusing this:\n  (the_Abs f, the_Abs g) \\<in> (set TI)\\<^sup>+\n  (the_Abs g, the_Abs h) \\<in> (set TI)\\<^sup>+\n\ngoal (1 subgoal):\n 1. (the_Abs f, the_Abs h) \\<in> (set TI)\\<^sup>+", "by simp"], ["proof (state)\nthis:\n  \\<lbrakk>(the_Abs f, the_Abs g) \\<in> (set TI)\\<^sup>+;\n   (the_Abs g, the_Abs h) \\<in> (set TI)\\<^sup>+\\<rbrakk>\n  \\<Longrightarrow> (the_Abs f, the_Abs h) \\<in> (set TI)\\<^sup>+\n\ngoal (1 subgoal):\n 1. \\<And>x1a x2 t u.\n       \\<lbrakk>\\<And>x2a t u.\n                   \\<lbrakk>x2a \\<in> set x2;\n                    timpls_transformable_to' TI x2a t;\n                    timpls_transformable_to' TI t u\\<rbrakk>\n                   \\<Longrightarrow> timpls_transformable_to' TI x2a u;\n        timpls_transformable_to' TI (Fun x1a x2) t;\n        timpls_transformable_to' TI t u\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to' TI (Fun x1a x2) u", "hence \"is_Abs f \\<and> is_Abs h \\<and> (the_Abs f, the_Abs h) \\<in> (set TI)\\<^sup>+\"\n    when \"f \\<noteq> h\""], ["proof (prove)\nusing this:\n  \\<lbrakk>(the_Abs f, the_Abs g) \\<in> (set TI)\\<^sup>+;\n   (the_Abs g, the_Abs h) \\<in> (set TI)\\<^sup>+\\<rbrakk>\n  \\<Longrightarrow> (the_Abs f, the_Abs h) \\<in> (set TI)\\<^sup>+\n\ngoal (1 subgoal):\n 1. is_Abs f \\<and>\n    is_Abs h \\<and> (the_Abs f, the_Abs h) \\<in> (set TI)\\<^sup>+", "by (metis that t(4) u(4))"], ["proof (state)\nthis:\n  f \\<noteq> h \\<Longrightarrow>\n  is_Abs f \\<and>\n  is_Abs h \\<and> (the_Abs f, the_Abs h) \\<in> (set TI)\\<^sup>+\n\ngoal (1 subgoal):\n 1. \\<And>x1a x2 t u.\n       \\<lbrakk>\\<And>x2a t u.\n                   \\<lbrakk>x2a \\<in> set x2;\n                    timpls_transformable_to' TI x2a t;\n                    timpls_transformable_to' TI t u\\<rbrakk>\n                   \\<Longrightarrow> timpls_transformable_to' TI x2a u;\n        timpls_transformable_to' TI (Fun x1a x2) t;\n        timpls_transformable_to' TI t u\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to' TI (Fun x1a x2) u", "ultimately"], ["proof (chain)\npicking this:\n  list_all2 (timpls_transformable_to' TI) T U\n  f \\<noteq> h \\<Longrightarrow>\n  is_Abs f \\<and>\n  is_Abs h \\<and> (the_Abs f, the_Abs h) \\<in> (set TI)\\<^sup>+", "show ?case"], ["proof (prove)\nusing this:\n  list_all2 (timpls_transformable_to' TI) T U\n  f \\<noteq> h \\<Longrightarrow>\n  is_Abs f \\<and>\n  is_Abs h \\<and> (the_Abs f, the_Abs h) \\<in> (set TI)\\<^sup>+\n\ngoal (1 subgoal):\n 1. timpls_transformable_to' TI (Fun f T) u", "using t(1) u(1) 0"], ["proof (prove)\nusing this:\n  list_all2 (timpls_transformable_to' TI) T U\n  f \\<noteq> h \\<Longrightarrow>\n  is_Abs f \\<and>\n  is_Abs h \\<and> (the_Abs f, the_Abs h) \\<in> (set TI)\\<^sup>+\n  t = Fun g S\n  u = Fun h U\n  ((?a, ?b) \\<in> (set TI)\\<^sup>+) = in_trancl TI ?a ?b\n\ngoal (1 subgoal):\n 1. timpls_transformable_to' TI (Fun f T) u", "by force"], ["proof (state)\nthis:\n  timpls_transformable_to' TI (Fun f T) u\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma timpls_transformable_to_mono:\n  assumes \"set TI \\<subseteq> set TI'\"\n    and \"timpls_transformable_to TI s t\"\n  shows \"timpls_transformable_to TI' s t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. timpls_transformable_to TI' s t", "using assms"], ["proof (prove)\nusing this:\n  set TI \\<subseteq> set TI'\n  timpls_transformable_to TI s t\n\ngoal (1 subgoal):\n 1. timpls_transformable_to TI' s t", "proof (induction TI s t rule: timpls_transformable_to.induct)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>TI x y.\n       \\<lbrakk>set TI \\<subseteq> set TI';\n        timpls_transformable_to TI (Var x) (Var y)\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to TI' (Var x) (Var y)\n 2. \\<And>TI f T g S.\n       \\<lbrakk>\\<And>z yb.\n                   \\<lbrakk>z \\<in> set T; yb \\<in> set S;\n                    set TI \\<subseteq> set TI';\n                    timpls_transformable_to TI z yb\\<rbrakk>\n                   \\<Longrightarrow> timpls_transformable_to TI' z yb;\n        set TI \\<subseteq> set TI';\n        timpls_transformable_to TI (Fun f T) (Fun g S)\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to TI' (Fun f T) (Fun g S)\n 3. \\<And>uu_ v va vb.\n       \\<lbrakk>set uu_ \\<subseteq> set TI';\n        timpls_transformable_to uu_ (Fun v va) (Var vb)\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to TI' (Fun v va) (Var vb)\n 4. \\<And>uu_ vb v va.\n       \\<lbrakk>set uu_ \\<subseteq> set TI';\n        timpls_transformable_to uu_ (Var vb) (Fun v va)\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to TI' (Var vb) (Fun v va)", "case (2 TI f T g S)"], ["proof (state)\nthis:\n  \\<lbrakk>?z43 \\<in> set T; ?yb43 \\<in> set S; set TI \\<subseteq> set TI';\n   timpls_transformable_to TI ?z43 ?yb43\\<rbrakk>\n  \\<Longrightarrow> timpls_transformable_to TI' ?z43 ?yb43\n  set TI \\<subseteq> set TI'\n  timpls_transformable_to TI (Fun f T) (Fun g S)\n\ngoal (4 subgoals):\n 1. \\<And>TI x y.\n       \\<lbrakk>set TI \\<subseteq> set TI';\n        timpls_transformable_to TI (Var x) (Var y)\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to TI' (Var x) (Var y)\n 2. \\<And>TI f T g S.\n       \\<lbrakk>\\<And>z yb.\n                   \\<lbrakk>z \\<in> set T; yb \\<in> set S;\n                    set TI \\<subseteq> set TI';\n                    timpls_transformable_to TI z yb\\<rbrakk>\n                   \\<Longrightarrow> timpls_transformable_to TI' z yb;\n        set TI \\<subseteq> set TI';\n        timpls_transformable_to TI (Fun f T) (Fun g S)\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to TI' (Fun f T) (Fun g S)\n 3. \\<And>uu_ v va vb.\n       \\<lbrakk>set uu_ \\<subseteq> set TI';\n        timpls_transformable_to uu_ (Fun v va) (Var vb)\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to TI' (Fun v va) (Var vb)\n 4. \\<And>uu_ vb v va.\n       \\<lbrakk>set uu_ \\<subseteq> set TI';\n        timpls_transformable_to uu_ (Var vb) (Fun v va)\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to TI' (Var vb) (Fun v va)", "have *: \"f = g \\<or> (is_Abs f \\<and> is_Abs g \\<and> (the_Abs f, the_Abs g) \\<in> set TI)\"\n          \"list_all2 (timpls_transformable_to TI) T S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f = g \\<or>\n    is_Abs f \\<and> is_Abs g \\<and> (the_Abs f, the_Abs g) \\<in> set TI &&&\n    list_all2 (timpls_transformable_to TI) T S", "using \"2.prems\""], ["proof (prove)\nusing this:\n  set TI \\<subseteq> set TI'\n  timpls_transformable_to TI (Fun f T) (Fun g S)\n\ngoal (1 subgoal):\n 1. f = g \\<or>\n    is_Abs f \\<and> is_Abs g \\<and> (the_Abs f, the_Abs g) \\<in> set TI &&&\n    list_all2 (timpls_transformable_to TI) T S", "by simp_all"], ["proof (state)\nthis:\n  f = g \\<or>\n  is_Abs f \\<and> is_Abs g \\<and> (the_Abs f, the_Abs g) \\<in> set TI\n  list_all2 (timpls_transformable_to TI) T S\n\ngoal (4 subgoals):\n 1. \\<And>TI x y.\n       \\<lbrakk>set TI \\<subseteq> set TI';\n        timpls_transformable_to TI (Var x) (Var y)\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to TI' (Var x) (Var y)\n 2. \\<And>TI f T g S.\n       \\<lbrakk>\\<And>z yb.\n                   \\<lbrakk>z \\<in> set T; yb \\<in> set S;\n                    set TI \\<subseteq> set TI';\n                    timpls_transformable_to TI z yb\\<rbrakk>\n                   \\<Longrightarrow> timpls_transformable_to TI' z yb;\n        set TI \\<subseteq> set TI';\n        timpls_transformable_to TI (Fun f T) (Fun g S)\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to TI' (Fun f T) (Fun g S)\n 3. \\<And>uu_ v va vb.\n       \\<lbrakk>set uu_ \\<subseteq> set TI';\n        timpls_transformable_to uu_ (Fun v va) (Var vb)\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to TI' (Fun v va) (Var vb)\n 4. \\<And>uu_ vb v va.\n       \\<lbrakk>set uu_ \\<subseteq> set TI';\n        timpls_transformable_to uu_ (Var vb) (Fun v va)\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to TI' (Var vb) (Fun v va)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. timpls_transformable_to TI' (Fun f T) (Fun g S)", "using \"2.IH\" \"2.prems\"(1) list.rel_mono_strong[OF *(2)] *(1) in_trancl_mono[of TI TI']"], ["proof (prove)\nusing this:\n  \\<lbrakk>?z43 \\<in> set T; ?yb43 \\<in> set S; set TI \\<subseteq> set TI';\n   timpls_transformable_to TI ?z43 ?yb43\\<rbrakk>\n  \\<Longrightarrow> timpls_transformable_to TI' ?z43 ?yb43\n  set TI \\<subseteq> set TI'\n  (\\<And>z yb.\n      \\<lbrakk>z \\<in> set T; yb \\<in> set S;\n       timpls_transformable_to TI z yb\\<rbrakk>\n      \\<Longrightarrow> ?Ra z yb) \\<Longrightarrow>\n  list_all2 ?Ra T S\n  f = g \\<or>\n  is_Abs f \\<and> is_Abs g \\<and> (the_Abs f, the_Abs g) \\<in> set TI\n  \\<lbrakk>set TI \\<subseteq> set TI'; in_trancl TI ?a ?b\\<rbrakk>\n  \\<Longrightarrow> in_trancl TI' ?a ?b\n\ngoal (1 subgoal):\n 1. timpls_transformable_to TI' (Fun f T) (Fun g S)", "by (metis (no_types, lifting) timpls_transformable_to.simps(2) set_rev_mp)"], ["proof (state)\nthis:\n  timpls_transformable_to TI' (Fun f T) (Fun g S)\n\ngoal (3 subgoals):\n 1. \\<And>TI x y.\n       \\<lbrakk>set TI \\<subseteq> set TI';\n        timpls_transformable_to TI (Var x) (Var y)\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to TI' (Var x) (Var y)\n 2. \\<And>uu_ v va vb.\n       \\<lbrakk>set uu_ \\<subseteq> set TI';\n        timpls_transformable_to uu_ (Fun v va) (Var vb)\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to TI' (Fun v va) (Var vb)\n 3. \\<And>uu_ vb v va.\n       \\<lbrakk>set uu_ \\<subseteq> set TI';\n        timpls_transformable_to uu_ (Var vb) (Fun v va)\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to TI' (Var vb) (Fun v va)", "qed auto"], ["", "lemma timpls_transformable_to'_mono:\n  assumes \"set TI \\<subseteq> set TI'\"\n    and \"timpls_transformable_to' TI s t\"\n  shows \"timpls_transformable_to' TI' s t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. timpls_transformable_to' TI' s t", "using assms"], ["proof (prove)\nusing this:\n  set TI \\<subseteq> set TI'\n  timpls_transformable_to' TI s t\n\ngoal (1 subgoal):\n 1. timpls_transformable_to' TI' s t", "proof (induction TI s t rule: timpls_transformable_to'.induct)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>TI x y.\n       \\<lbrakk>set TI \\<subseteq> set TI';\n        timpls_transformable_to' TI (Var x) (Var y)\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to' TI' (Var x) (Var y)\n 2. \\<And>TI f T g S.\n       \\<lbrakk>\\<And>z yb.\n                   \\<lbrakk>z \\<in> set T; yb \\<in> set S;\n                    set TI \\<subseteq> set TI';\n                    timpls_transformable_to' TI z yb\\<rbrakk>\n                   \\<Longrightarrow> timpls_transformable_to' TI' z yb;\n        set TI \\<subseteq> set TI';\n        timpls_transformable_to' TI (Fun f T) (Fun g S)\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to' TI' (Fun f T) (Fun g S)\n 3. \\<And>uu_ v va vb.\n       \\<lbrakk>set uu_ \\<subseteq> set TI';\n        timpls_transformable_to' uu_ (Fun v va) (Var vb)\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to' TI' (Fun v va) (Var vb)\n 4. \\<And>uu_ vb v va.\n       \\<lbrakk>set uu_ \\<subseteq> set TI';\n        timpls_transformable_to' uu_ (Var vb) (Fun v va)\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to' TI' (Var vb) (Fun v va)", "case (2 TI f T g S)"], ["proof (state)\nthis:\n  \\<lbrakk>?z43 \\<in> set T; ?yb43 \\<in> set S; set TI \\<subseteq> set TI';\n   timpls_transformable_to' TI ?z43 ?yb43\\<rbrakk>\n  \\<Longrightarrow> timpls_transformable_to' TI' ?z43 ?yb43\n  set TI \\<subseteq> set TI'\n  timpls_transformable_to' TI (Fun f T) (Fun g S)\n\ngoal (4 subgoals):\n 1. \\<And>TI x y.\n       \\<lbrakk>set TI \\<subseteq> set TI';\n        timpls_transformable_to' TI (Var x) (Var y)\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to' TI' (Var x) (Var y)\n 2. \\<And>TI f T g S.\n       \\<lbrakk>\\<And>z yb.\n                   \\<lbrakk>z \\<in> set T; yb \\<in> set S;\n                    set TI \\<subseteq> set TI';\n                    timpls_transformable_to' TI z yb\\<rbrakk>\n                   \\<Longrightarrow> timpls_transformable_to' TI' z yb;\n        set TI \\<subseteq> set TI';\n        timpls_transformable_to' TI (Fun f T) (Fun g S)\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to' TI' (Fun f T) (Fun g S)\n 3. \\<And>uu_ v va vb.\n       \\<lbrakk>set uu_ \\<subseteq> set TI';\n        timpls_transformable_to' uu_ (Fun v va) (Var vb)\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to' TI' (Fun v va) (Var vb)\n 4. \\<And>uu_ vb v va.\n       \\<lbrakk>set uu_ \\<subseteq> set TI';\n        timpls_transformable_to' uu_ (Var vb) (Fun v va)\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to' TI' (Var vb) (Fun v va)", "have *: \"f = g \\<or> (is_Abs f \\<and> is_Abs g \\<and> in_trancl TI (the_Abs f) (the_Abs g))\"\n          \"list_all2 (timpls_transformable_to' TI) T S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f = g \\<or>\n    is_Abs f \\<and> is_Abs g \\<and> in_trancl TI (the_Abs f) (the_Abs g) &&&\n    list_all2 (timpls_transformable_to' TI) T S", "using \"2.prems\""], ["proof (prove)\nusing this:\n  set TI \\<subseteq> set TI'\n  timpls_transformable_to' TI (Fun f T) (Fun g S)\n\ngoal (1 subgoal):\n 1. f = g \\<or>\n    is_Abs f \\<and> is_Abs g \\<and> in_trancl TI (the_Abs f) (the_Abs g) &&&\n    list_all2 (timpls_transformable_to' TI) T S", "by simp_all"], ["proof (state)\nthis:\n  f = g \\<or>\n  is_Abs f \\<and> is_Abs g \\<and> in_trancl TI (the_Abs f) (the_Abs g)\n  list_all2 (timpls_transformable_to' TI) T S\n\ngoal (4 subgoals):\n 1. \\<And>TI x y.\n       \\<lbrakk>set TI \\<subseteq> set TI';\n        timpls_transformable_to' TI (Var x) (Var y)\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to' TI' (Var x) (Var y)\n 2. \\<And>TI f T g S.\n       \\<lbrakk>\\<And>z yb.\n                   \\<lbrakk>z \\<in> set T; yb \\<in> set S;\n                    set TI \\<subseteq> set TI';\n                    timpls_transformable_to' TI z yb\\<rbrakk>\n                   \\<Longrightarrow> timpls_transformable_to' TI' z yb;\n        set TI \\<subseteq> set TI';\n        timpls_transformable_to' TI (Fun f T) (Fun g S)\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to' TI' (Fun f T) (Fun g S)\n 3. \\<And>uu_ v va vb.\n       \\<lbrakk>set uu_ \\<subseteq> set TI';\n        timpls_transformable_to' uu_ (Fun v va) (Var vb)\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to' TI' (Fun v va) (Var vb)\n 4. \\<And>uu_ vb v va.\n       \\<lbrakk>set uu_ \\<subseteq> set TI';\n        timpls_transformable_to' uu_ (Var vb) (Fun v va)\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to' TI' (Var vb) (Fun v va)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. timpls_transformable_to' TI' (Fun f T) (Fun g S)", "using \"2.IH\" \"2.prems\"(1) list.rel_mono_strong[OF *(2)] *(1) in_trancl_mono[of TI TI']"], ["proof (prove)\nusing this:\n  \\<lbrakk>?z43 \\<in> set T; ?yb43 \\<in> set S; set TI \\<subseteq> set TI';\n   timpls_transformable_to' TI ?z43 ?yb43\\<rbrakk>\n  \\<Longrightarrow> timpls_transformable_to' TI' ?z43 ?yb43\n  set TI \\<subseteq> set TI'\n  (\\<And>z yb.\n      \\<lbrakk>z \\<in> set T; yb \\<in> set S;\n       timpls_transformable_to' TI z yb\\<rbrakk>\n      \\<Longrightarrow> ?Ra z yb) \\<Longrightarrow>\n  list_all2 ?Ra T S\n  f = g \\<or>\n  is_Abs f \\<and> is_Abs g \\<and> in_trancl TI (the_Abs f) (the_Abs g)\n  \\<lbrakk>set TI \\<subseteq> set TI'; in_trancl TI ?a ?b\\<rbrakk>\n  \\<Longrightarrow> in_trancl TI' ?a ?b\n\ngoal (1 subgoal):\n 1. timpls_transformable_to' TI' (Fun f T) (Fun g S)", "by (metis (no_types, lifting) timpls_transformable_to'.simps(2))"], ["proof (state)\nthis:\n  timpls_transformable_to' TI' (Fun f T) (Fun g S)\n\ngoal (3 subgoals):\n 1. \\<And>TI x y.\n       \\<lbrakk>set TI \\<subseteq> set TI';\n        timpls_transformable_to' TI (Var x) (Var y)\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to' TI' (Var x) (Var y)\n 2. \\<And>uu_ v va vb.\n       \\<lbrakk>set uu_ \\<subseteq> set TI';\n        timpls_transformable_to' uu_ (Fun v va) (Var vb)\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to' TI' (Fun v va) (Var vb)\n 3. \\<And>uu_ vb v va.\n       \\<lbrakk>set uu_ \\<subseteq> set TI';\n        timpls_transformable_to' uu_ (Var vb) (Fun v va)\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to' TI' (Var vb) (Fun v va)", "qed auto"], ["", "lemma timpls_transformable_to_refl_minus_eq:\n  \"timpls_transformable_to TI s t \\<longleftrightarrow> timpls_transformable_to (filter (\\<lambda>(a,b). a \\<noteq> b) TI) s t\"\n  (is \"?A \\<longleftrightarrow> ?B\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. timpls_transformable_to TI s t =\n    timpls_transformable_to (filter (\\<lambda>(a, b). a \\<noteq> b) TI) s t", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. timpls_transformable_to TI s t \\<Longrightarrow>\n    timpls_transformable_to (filter (\\<lambda>(a, b). a \\<noteq> b) TI) s t\n 2. timpls_transformable_to (filter (\\<lambda>(a, b). a \\<noteq> b) TI) s\n     t \\<Longrightarrow>\n    timpls_transformable_to TI s t", "let ?TI' = \"\\<lambda>TI. filter (\\<lambda>(a,b). a \\<noteq> b) TI\""], ["proof (state)\ngoal (2 subgoals):\n 1. timpls_transformable_to TI s t \\<Longrightarrow>\n    timpls_transformable_to (filter (\\<lambda>(a, b). a \\<noteq> b) TI) s t\n 2. timpls_transformable_to (filter (\\<lambda>(a, b). a \\<noteq> b) TI) s\n     t \\<Longrightarrow>\n    timpls_transformable_to TI s t", "show ?A when ?B"], ["proof (prove)\ngoal (1 subgoal):\n 1. timpls_transformable_to TI s t", "using that timpls_transformable_to_mono[of \"?TI' TI\" TI]"], ["proof (prove)\nusing this:\n  timpls_transformable_to (filter (\\<lambda>(a, b). a \\<noteq> b) TI) s t\n  \\<lbrakk>set (filter (\\<lambda>(a, b). a \\<noteq> b) TI)\n           \\<subseteq> set TI;\n   timpls_transformable_to (filter (\\<lambda>(a, b). a \\<noteq> b) TI) ?s\n    ?t\\<rbrakk>\n  \\<Longrightarrow> timpls_transformable_to TI ?s ?t\n\ngoal (1 subgoal):\n 1. timpls_transformable_to TI s t", "by auto"], ["proof (state)\nthis:\n  timpls_transformable_to (filter (\\<lambda>(a, b). a \\<noteq> b) TI) s\n   t \\<Longrightarrow>\n  timpls_transformable_to TI s t\n\ngoal (2 subgoals):\n 1. timpls_transformable_to TI s t \\<Longrightarrow>\n    timpls_transformable_to (filter (\\<lambda>(a, b). a \\<noteq> b) TI) s t\n 2. timpls_transformable_to (filter (\\<lambda>(a, b). a \\<noteq> b) TI) s\n     t \\<Longrightarrow>\n    timpls_transformable_to (filter (\\<lambda>(a, b). a \\<noteq> b) TI) s t", "show ?B when ?A"], ["proof (prove)\ngoal (1 subgoal):\n 1. timpls_transformable_to (filter (\\<lambda>(a, b). a \\<noteq> b) TI) s t", "using that"], ["proof (prove)\nusing this:\n  timpls_transformable_to TI s t\n\ngoal (1 subgoal):\n 1. timpls_transformable_to (filter (\\<lambda>(a, b). a \\<noteq> b) TI) s t", "proof (induction TI s t rule: timpls_transformable_to.induct)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>TI x y.\n       timpls_transformable_to TI (Var x) (Var y) \\<Longrightarrow>\n       timpls_transformable_to (filter (\\<lambda>(a, b). a \\<noteq> b) TI)\n        (Var x) (Var y)\n 2. \\<And>TI f T g S.\n       \\<lbrakk>\\<And>z yb.\n                   \\<lbrakk>z \\<in> set T; yb \\<in> set S;\n                    timpls_transformable_to TI z yb\\<rbrakk>\n                   \\<Longrightarrow> timpls_transformable_to\n(filter (\\<lambda>(a, b). a \\<noteq> b) TI) z yb;\n        timpls_transformable_to TI (Fun f T) (Fun g S)\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to\n                          (filter (\\<lambda>(a, b). a \\<noteq> b) TI)\n                          (Fun f T) (Fun g S)\n 3. \\<And>uu_ v va vb.\n       timpls_transformable_to uu_ (Fun v va) (Var vb) \\<Longrightarrow>\n       timpls_transformable_to (filter (\\<lambda>(a, b). a \\<noteq> b) uu_)\n        (Fun v va) (Var vb)\n 4. \\<And>uu_ vb v va.\n       timpls_transformable_to uu_ (Var vb) (Fun v va) \\<Longrightarrow>\n       timpls_transformable_to (filter (\\<lambda>(a, b). a \\<noteq> b) uu_)\n        (Var vb) (Fun v va)", "case (2 TI f T g S)"], ["proof (state)\nthis:\n  \\<lbrakk>?z44 \\<in> set T; ?yb44 \\<in> set S;\n   timpls_transformable_to TI ?z44 ?yb44\\<rbrakk>\n  \\<Longrightarrow> timpls_transformable_to\n                     (filter\n                       (\\<lambda>a.\n                           case a of (a, b) \\<Rightarrow> a \\<noteq> b)\n                       TI)\n                     ?z44 ?yb44\n  timpls_transformable_to TI (Fun f T) (Fun g S)\n\ngoal (4 subgoals):\n 1. \\<And>TI x y.\n       timpls_transformable_to TI (Var x) (Var y) \\<Longrightarrow>\n       timpls_transformable_to (filter (\\<lambda>(a, b). a \\<noteq> b) TI)\n        (Var x) (Var y)\n 2. \\<And>TI f T g S.\n       \\<lbrakk>\\<And>z yb.\n                   \\<lbrakk>z \\<in> set T; yb \\<in> set S;\n                    timpls_transformable_to TI z yb\\<rbrakk>\n                   \\<Longrightarrow> timpls_transformable_to\n(filter (\\<lambda>(a, b). a \\<noteq> b) TI) z yb;\n        timpls_transformable_to TI (Fun f T) (Fun g S)\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to\n                          (filter (\\<lambda>(a, b). a \\<noteq> b) TI)\n                          (Fun f T) (Fun g S)\n 3. \\<And>uu_ v va vb.\n       timpls_transformable_to uu_ (Fun v va) (Var vb) \\<Longrightarrow>\n       timpls_transformable_to (filter (\\<lambda>(a, b). a \\<noteq> b) uu_)\n        (Fun v va) (Var vb)\n 4. \\<And>uu_ vb v va.\n       timpls_transformable_to uu_ (Var vb) (Fun v va) \\<Longrightarrow>\n       timpls_transformable_to (filter (\\<lambda>(a, b). a \\<noteq> b) uu_)\n        (Var vb) (Fun v va)", "have *: \"f = g \\<or> (is_Abs f \\<and> is_Abs g \\<and> (the_Abs f, the_Abs g) \\<in> set TI)\"\n            \"list_all2 (timpls_transformable_to TI) T S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f = g \\<or>\n    is_Abs f \\<and> is_Abs g \\<and> (the_Abs f, the_Abs g) \\<in> set TI &&&\n    list_all2 (timpls_transformable_to TI) T S", "using \"2.prems\""], ["proof (prove)\nusing this:\n  timpls_transformable_to TI (Fun f T) (Fun g S)\n\ngoal (1 subgoal):\n 1. f = g \\<or>\n    is_Abs f \\<and> is_Abs g \\<and> (the_Abs f, the_Abs g) \\<in> set TI &&&\n    list_all2 (timpls_transformable_to TI) T S", "by simp_all"], ["proof (state)\nthis:\n  f = g \\<or>\n  is_Abs f \\<and> is_Abs g \\<and> (the_Abs f, the_Abs g) \\<in> set TI\n  list_all2 (timpls_transformable_to TI) T S\n\ngoal (4 subgoals):\n 1. \\<And>TI x y.\n       timpls_transformable_to TI (Var x) (Var y) \\<Longrightarrow>\n       timpls_transformable_to (filter (\\<lambda>(a, b). a \\<noteq> b) TI)\n        (Var x) (Var y)\n 2. \\<And>TI f T g S.\n       \\<lbrakk>\\<And>z yb.\n                   \\<lbrakk>z \\<in> set T; yb \\<in> set S;\n                    timpls_transformable_to TI z yb\\<rbrakk>\n                   \\<Longrightarrow> timpls_transformable_to\n(filter (\\<lambda>(a, b). a \\<noteq> b) TI) z yb;\n        timpls_transformable_to TI (Fun f T) (Fun g S)\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to\n                          (filter (\\<lambda>(a, b). a \\<noteq> b) TI)\n                          (Fun f T) (Fun g S)\n 3. \\<And>uu_ v va vb.\n       timpls_transformable_to uu_ (Fun v va) (Var vb) \\<Longrightarrow>\n       timpls_transformable_to (filter (\\<lambda>(a, b). a \\<noteq> b) uu_)\n        (Fun v va) (Var vb)\n 4. \\<And>uu_ vb v va.\n       timpls_transformable_to uu_ (Var vb) (Fun v va) \\<Longrightarrow>\n       timpls_transformable_to (filter (\\<lambda>(a, b). a \\<noteq> b) uu_)\n        (Var vb) (Fun v va)", "have \"f = g \\<or> (is_Abs f \\<and> is_Abs g \\<and> (the_Abs f, the_Abs g) \\<in> set (?TI' TI))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f = g \\<or>\n    is_Abs f \\<and>\n    is_Abs g \\<and>\n    (the_Abs f, the_Abs g)\n    \\<in> set (filter (\\<lambda>(a, b). a \\<noteq> b) TI)", "using *(1)"], ["proof (prove)\nusing this:\n  f = g \\<or>\n  is_Abs f \\<and> is_Abs g \\<and> (the_Abs f, the_Abs g) \\<in> set TI\n\ngoal (1 subgoal):\n 1. f = g \\<or>\n    is_Abs f \\<and>\n    is_Abs g \\<and>\n    (the_Abs f, the_Abs g)\n    \\<in> set (filter (\\<lambda>(a, b). a \\<noteq> b) TI)", "unfolding is_Abs_def"], ["proof (prove)\nusing this:\n  f = g \\<or>\n  (\\<exists>x4. f = Abs x4) \\<and>\n  (\\<exists>x4. g = Abs x4) \\<and> (the_Abs f, the_Abs g) \\<in> set TI\n\ngoal (1 subgoal):\n 1. f = g \\<or>\n    (\\<exists>x4. f = Abs x4) \\<and>\n    (\\<exists>x4. g = Abs x4) \\<and>\n    (the_Abs f, the_Abs g)\n    \\<in> set (filter (\\<lambda>(a, b). a \\<noteq> b) TI)", "by auto"], ["proof (state)\nthis:\n  f = g \\<or>\n  is_Abs f \\<and>\n  is_Abs g \\<and>\n  (the_Abs f, the_Abs g)\n  \\<in> set (filter (\\<lambda>(a, b). a \\<noteq> b) TI)\n\ngoal (4 subgoals):\n 1. \\<And>TI x y.\n       timpls_transformable_to TI (Var x) (Var y) \\<Longrightarrow>\n       timpls_transformable_to (filter (\\<lambda>(a, b). a \\<noteq> b) TI)\n        (Var x) (Var y)\n 2. \\<And>TI f T g S.\n       \\<lbrakk>\\<And>z yb.\n                   \\<lbrakk>z \\<in> set T; yb \\<in> set S;\n                    timpls_transformable_to TI z yb\\<rbrakk>\n                   \\<Longrightarrow> timpls_transformable_to\n(filter (\\<lambda>(a, b). a \\<noteq> b) TI) z yb;\n        timpls_transformable_to TI (Fun f T) (Fun g S)\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to\n                          (filter (\\<lambda>(a, b). a \\<noteq> b) TI)\n                          (Fun f T) (Fun g S)\n 3. \\<And>uu_ v va vb.\n       timpls_transformable_to uu_ (Fun v va) (Var vb) \\<Longrightarrow>\n       timpls_transformable_to (filter (\\<lambda>(a, b). a \\<noteq> b) uu_)\n        (Fun v va) (Var vb)\n 4. \\<And>uu_ vb v va.\n       timpls_transformable_to uu_ (Var vb) (Fun v va) \\<Longrightarrow>\n       timpls_transformable_to (filter (\\<lambda>(a, b). a \\<noteq> b) uu_)\n        (Var vb) (Fun v va)", "moreover"], ["proof (state)\nthis:\n  f = g \\<or>\n  is_Abs f \\<and>\n  is_Abs g \\<and>\n  (the_Abs f, the_Abs g)\n  \\<in> set (filter (\\<lambda>(a, b). a \\<noteq> b) TI)\n\ngoal (4 subgoals):\n 1. \\<And>TI x y.\n       timpls_transformable_to TI (Var x) (Var y) \\<Longrightarrow>\n       timpls_transformable_to (filter (\\<lambda>(a, b). a \\<noteq> b) TI)\n        (Var x) (Var y)\n 2. \\<And>TI f T g S.\n       \\<lbrakk>\\<And>z yb.\n                   \\<lbrakk>z \\<in> set T; yb \\<in> set S;\n                    timpls_transformable_to TI z yb\\<rbrakk>\n                   \\<Longrightarrow> timpls_transformable_to\n(filter (\\<lambda>(a, b). a \\<noteq> b) TI) z yb;\n        timpls_transformable_to TI (Fun f T) (Fun g S)\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to\n                          (filter (\\<lambda>(a, b). a \\<noteq> b) TI)\n                          (Fun f T) (Fun g S)\n 3. \\<And>uu_ v va vb.\n       timpls_transformable_to uu_ (Fun v va) (Var vb) \\<Longrightarrow>\n       timpls_transformable_to (filter (\\<lambda>(a, b). a \\<noteq> b) uu_)\n        (Fun v va) (Var vb)\n 4. \\<And>uu_ vb v va.\n       timpls_transformable_to uu_ (Var vb) (Fun v va) \\<Longrightarrow>\n       timpls_transformable_to (filter (\\<lambda>(a, b). a \\<noteq> b) uu_)\n        (Var vb) (Fun v va)", "have \"list_all2 (timpls_transformable_to (?TI' TI)) T S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_all2\n     (timpls_transformable_to (filter (\\<lambda>(a, b). a \\<noteq> b) TI)) T\n     S", "using *(2) \"2.IH\" list.rel_mono_strong"], ["proof (prove)\nusing this:\n  list_all2 (timpls_transformable_to TI) T S\n  \\<lbrakk>?z44 \\<in> set T; ?yb44 \\<in> set S;\n   timpls_transformable_to TI ?z44 ?yb44\\<rbrakk>\n  \\<Longrightarrow> timpls_transformable_to\n                     (filter\n                       (\\<lambda>a.\n                           case a of (a, b) \\<Rightarrow> a \\<noteq> b)\n                       TI)\n                     ?z44 ?yb44\n  \\<lbrakk>list_all2 ?R ?x ?y;\n   \\<And>z yb.\n      \\<lbrakk>z \\<in> set ?x; yb \\<in> set ?y; ?R z yb\\<rbrakk>\n      \\<Longrightarrow> ?Ra z yb\\<rbrakk>\n  \\<Longrightarrow> list_all2 ?Ra ?x ?y\n\ngoal (1 subgoal):\n 1. list_all2\n     (timpls_transformable_to (filter (\\<lambda>(a, b). a \\<noteq> b) TI)) T\n     S", "by blast"], ["proof (state)\nthis:\n  list_all2\n   (timpls_transformable_to (filter (\\<lambda>(a, b). a \\<noteq> b) TI)) T S\n\ngoal (4 subgoals):\n 1. \\<And>TI x y.\n       timpls_transformable_to TI (Var x) (Var y) \\<Longrightarrow>\n       timpls_transformable_to (filter (\\<lambda>(a, b). a \\<noteq> b) TI)\n        (Var x) (Var y)\n 2. \\<And>TI f T g S.\n       \\<lbrakk>\\<And>z yb.\n                   \\<lbrakk>z \\<in> set T; yb \\<in> set S;\n                    timpls_transformable_to TI z yb\\<rbrakk>\n                   \\<Longrightarrow> timpls_transformable_to\n(filter (\\<lambda>(a, b). a \\<noteq> b) TI) z yb;\n        timpls_transformable_to TI (Fun f T) (Fun g S)\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to\n                          (filter (\\<lambda>(a, b). a \\<noteq> b) TI)\n                          (Fun f T) (Fun g S)\n 3. \\<And>uu_ v va vb.\n       timpls_transformable_to uu_ (Fun v va) (Var vb) \\<Longrightarrow>\n       timpls_transformable_to (filter (\\<lambda>(a, b). a \\<noteq> b) uu_)\n        (Fun v va) (Var vb)\n 4. \\<And>uu_ vb v va.\n       timpls_transformable_to uu_ (Var vb) (Fun v va) \\<Longrightarrow>\n       timpls_transformable_to (filter (\\<lambda>(a, b). a \\<noteq> b) uu_)\n        (Var vb) (Fun v va)", "ultimately"], ["proof (chain)\npicking this:\n  f = g \\<or>\n  is_Abs f \\<and>\n  is_Abs g \\<and>\n  (the_Abs f, the_Abs g)\n  \\<in> set (filter (\\<lambda>(a, b). a \\<noteq> b) TI)\n  list_all2\n   (timpls_transformable_to (filter (\\<lambda>(a, b). a \\<noteq> b) TI)) T S", "show ?case"], ["proof (prove)\nusing this:\n  f = g \\<or>\n  is_Abs f \\<and>\n  is_Abs g \\<and>\n  (the_Abs f, the_Abs g)\n  \\<in> set (filter (\\<lambda>(a, b). a \\<noteq> b) TI)\n  list_all2\n   (timpls_transformable_to (filter (\\<lambda>(a, b). a \\<noteq> b) TI)) T S\n\ngoal (1 subgoal):\n 1. timpls_transformable_to\n     (filter (\\<lambda>a. case a of (a, b) \\<Rightarrow> a \\<noteq> b) TI)\n     (Fun f T) (Fun g S)", "by force"], ["proof (state)\nthis:\n  timpls_transformable_to\n   (filter (\\<lambda>a. case a of (a, b) \\<Rightarrow> a \\<noteq> b) TI)\n   (Fun f T) (Fun g S)\n\ngoal (3 subgoals):\n 1. \\<And>TI x y.\n       timpls_transformable_to TI (Var x) (Var y) \\<Longrightarrow>\n       timpls_transformable_to (filter (\\<lambda>(a, b). a \\<noteq> b) TI)\n        (Var x) (Var y)\n 2. \\<And>uu_ v va vb.\n       timpls_transformable_to uu_ (Fun v va) (Var vb) \\<Longrightarrow>\n       timpls_transformable_to (filter (\\<lambda>(a, b). a \\<noteq> b) uu_)\n        (Fun v va) (Var vb)\n 3. \\<And>uu_ vb v va.\n       timpls_transformable_to uu_ (Var vb) (Fun v va) \\<Longrightarrow>\n       timpls_transformable_to (filter (\\<lambda>(a, b). a \\<noteq> b) uu_)\n        (Var vb) (Fun v va)", "qed auto"], ["proof (state)\nthis:\n  timpls_transformable_to TI s t \\<Longrightarrow>\n  timpls_transformable_to (filter (\\<lambda>(a, b). a \\<noteq> b) TI) s t\n\ngoal (2 subgoals):\n 1. timpls_transformable_to TI s t \\<Longrightarrow>\n    timpls_transformable_to TI s t\n 2. timpls_transformable_to (filter (\\<lambda>(a, b). a \\<noteq> b) TI) s\n     t \\<Longrightarrow>\n    timpls_transformable_to (filter (\\<lambda>(a, b). a \\<noteq> b) TI) s t", "qed"], ["", "lemma timpls_transformable_to_iff_in_timpl_closure:\n  assumes \"set TI' = {(a,b) \\<in> (set TI)\\<^sup>+. a \\<noteq> b}\"\n  shows \"timpls_transformable_to TI' s t \\<longleftrightarrow> t \\<in> timpl_closure s (set TI)\" (is \"?A s t \\<longleftrightarrow> ?B s t\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. timpls_transformable_to TI' s t = (t \\<in> timpl_closure s (set TI))", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. timpls_transformable_to TI' s t \\<Longrightarrow>\n    t \\<in> timpl_closure s (set TI)\n 2. t \\<in> timpl_closure s (set TI) \\<Longrightarrow>\n    timpls_transformable_to TI' s t", "show \"?A s t \\<Longrightarrow> ?B s t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. timpls_transformable_to TI' s t \\<Longrightarrow>\n    t \\<in> timpl_closure s (set TI)", "using assms"], ["proof (prove)\nusing this:\n  set TI' = {(a, b). (a, b) \\<in> (set TI)\\<^sup>+ \\<and> a \\<noteq> b}\n\ngoal (1 subgoal):\n 1. timpls_transformable_to TI' s t \\<Longrightarrow>\n    t \\<in> timpl_closure s (set TI)", "proof (induction s t rule: timpls_transformable_to.induct)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>TI x y.\n       \\<lbrakk>timpls_transformable_to TI' (Var x) (Var y);\n        set TI' =\n        {(a, b). (a, b) \\<in> (set TI)\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n       \\<Longrightarrow> Var y \\<in> timpl_closure (Var x) (set TI)\n 2. \\<And>TI f T g S.\n       \\<lbrakk>\\<And>z yb.\n                   \\<lbrakk>z \\<in> set T; yb \\<in> set S;\n                    timpls_transformable_to TI' z yb;\n                    set TI' =\n                    {(a, b).\n                     (a, b) \\<in> (set TI)\\<^sup>+ \\<and>\n                     a \\<noteq> b}\\<rbrakk>\n                   \\<Longrightarrow> yb \\<in> timpl_closure z (set TI);\n        timpls_transformable_to TI' (Fun f T) (Fun g S);\n        set TI' =\n        {(a, b). (a, b) \\<in> (set TI)\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n       \\<Longrightarrow> Fun g S \\<in> timpl_closure (Fun f T) (set TI)\n 3. \\<And>uu_ v va vb.\n       \\<lbrakk>timpls_transformable_to TI' (Fun v va) (Var vb);\n        set TI' =\n        {(a, b).\n         (a, b) \\<in> (set uu_)\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n       \\<Longrightarrow> Var vb \\<in> timpl_closure (Fun v va) (set uu_)\n 4. \\<And>uu_ vb v va.\n       \\<lbrakk>timpls_transformable_to TI' (Var vb) (Fun v va);\n        set TI' =\n        {(a, b).\n         (a, b) \\<in> (set uu_)\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n       \\<Longrightarrow> Fun v va \\<in> timpl_closure (Var vb) (set uu_)", "case (2 TI f T g S)"], ["proof (state)\nthis:\n  \\<lbrakk>?z43 \\<in> set T; ?yb43 \\<in> set S;\n   timpls_transformable_to TI' ?z43 ?yb43;\n   set TI' =\n   {a. case a of\n       (a, b) \\<Rightarrow>\n         (a, b) \\<in> (set TI)\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n  \\<Longrightarrow> ?yb43 \\<in> timpl_closure ?z43 (set TI)\n  timpls_transformable_to TI' (Fun f T) (Fun g S)\n  set TI' =\n  {a. case a of\n      (a, b) \\<Rightarrow>\n        (a, b) \\<in> (set TI)\\<^sup>+ \\<and> a \\<noteq> b}\n\ngoal (4 subgoals):\n 1. \\<And>TI x y.\n       \\<lbrakk>timpls_transformable_to TI' (Var x) (Var y);\n        set TI' =\n        {(a, b). (a, b) \\<in> (set TI)\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n       \\<Longrightarrow> Var y \\<in> timpl_closure (Var x) (set TI)\n 2. \\<And>TI f T g S.\n       \\<lbrakk>\\<And>z yb.\n                   \\<lbrakk>z \\<in> set T; yb \\<in> set S;\n                    timpls_transformable_to TI' z yb;\n                    set TI' =\n                    {(a, b).\n                     (a, b) \\<in> (set TI)\\<^sup>+ \\<and>\n                     a \\<noteq> b}\\<rbrakk>\n                   \\<Longrightarrow> yb \\<in> timpl_closure z (set TI);\n        timpls_transformable_to TI' (Fun f T) (Fun g S);\n        set TI' =\n        {(a, b). (a, b) \\<in> (set TI)\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n       \\<Longrightarrow> Fun g S \\<in> timpl_closure (Fun f T) (set TI)\n 3. \\<And>uu_ v va vb.\n       \\<lbrakk>timpls_transformable_to TI' (Fun v va) (Var vb);\n        set TI' =\n        {(a, b).\n         (a, b) \\<in> (set uu_)\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n       \\<Longrightarrow> Var vb \\<in> timpl_closure (Fun v va) (set uu_)\n 4. \\<And>uu_ vb v va.\n       \\<lbrakk>timpls_transformable_to TI' (Var vb) (Fun v va);\n        set TI' =\n        {(a, b).\n         (a, b) \\<in> (set uu_)\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n       \\<Longrightarrow> Fun v va \\<in> timpl_closure (Var vb) (set uu_)", "note prems = \"2.prems\""], ["proof (state)\nthis:\n  timpls_transformable_to TI' (Fun f T) (Fun g S)\n  set TI' =\n  {a. case a of\n      (a, b) \\<Rightarrow>\n        (a, b) \\<in> (set TI)\\<^sup>+ \\<and> a \\<noteq> b}\n\ngoal (4 subgoals):\n 1. \\<And>TI x y.\n       \\<lbrakk>timpls_transformable_to TI' (Var x) (Var y);\n        set TI' =\n        {(a, b). (a, b) \\<in> (set TI)\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n       \\<Longrightarrow> Var y \\<in> timpl_closure (Var x) (set TI)\n 2. \\<And>TI f T g S.\n       \\<lbrakk>\\<And>z yb.\n                   \\<lbrakk>z \\<in> set T; yb \\<in> set S;\n                    timpls_transformable_to TI' z yb;\n                    set TI' =\n                    {(a, b).\n                     (a, b) \\<in> (set TI)\\<^sup>+ \\<and>\n                     a \\<noteq> b}\\<rbrakk>\n                   \\<Longrightarrow> yb \\<in> timpl_closure z (set TI);\n        timpls_transformable_to TI' (Fun f T) (Fun g S);\n        set TI' =\n        {(a, b). (a, b) \\<in> (set TI)\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n       \\<Longrightarrow> Fun g S \\<in> timpl_closure (Fun f T) (set TI)\n 3. \\<And>uu_ v va vb.\n       \\<lbrakk>timpls_transformable_to TI' (Fun v va) (Var vb);\n        set TI' =\n        {(a, b).\n         (a, b) \\<in> (set uu_)\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n       \\<Longrightarrow> Var vb \\<in> timpl_closure (Fun v va) (set uu_)\n 4. \\<And>uu_ vb v va.\n       \\<lbrakk>timpls_transformable_to TI' (Var vb) (Fun v va);\n        set TI' =\n        {(a, b).\n         (a, b) \\<in> (set uu_)\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n       \\<Longrightarrow> Fun v va \\<in> timpl_closure (Var vb) (set uu_)", "note IH = \"2.IH\""], ["proof (state)\nthis:\n  \\<lbrakk>?z43 \\<in> set T; ?yb43 \\<in> set S;\n   timpls_transformable_to TI' ?z43 ?yb43;\n   set TI' =\n   {a. case a of\n       (a, b) \\<Rightarrow>\n         (a, b) \\<in> (set TI)\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n  \\<Longrightarrow> ?yb43 \\<in> timpl_closure ?z43 (set TI)\n\ngoal (4 subgoals):\n 1. \\<And>TI x y.\n       \\<lbrakk>timpls_transformable_to TI' (Var x) (Var y);\n        set TI' =\n        {(a, b). (a, b) \\<in> (set TI)\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n       \\<Longrightarrow> Var y \\<in> timpl_closure (Var x) (set TI)\n 2. \\<And>TI f T g S.\n       \\<lbrakk>\\<And>z yb.\n                   \\<lbrakk>z \\<in> set T; yb \\<in> set S;\n                    timpls_transformable_to TI' z yb;\n                    set TI' =\n                    {(a, b).\n                     (a, b) \\<in> (set TI)\\<^sup>+ \\<and>\n                     a \\<noteq> b}\\<rbrakk>\n                   \\<Longrightarrow> yb \\<in> timpl_closure z (set TI);\n        timpls_transformable_to TI' (Fun f T) (Fun g S);\n        set TI' =\n        {(a, b). (a, b) \\<in> (set TI)\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n       \\<Longrightarrow> Fun g S \\<in> timpl_closure (Fun f T) (set TI)\n 3. \\<And>uu_ v va vb.\n       \\<lbrakk>timpls_transformable_to TI' (Fun v va) (Var vb);\n        set TI' =\n        {(a, b).\n         (a, b) \\<in> (set uu_)\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n       \\<Longrightarrow> Var vb \\<in> timpl_closure (Fun v va) (set uu_)\n 4. \\<And>uu_ vb v va.\n       \\<lbrakk>timpls_transformable_to TI' (Var vb) (Fun v va);\n        set TI' =\n        {(a, b).\n         (a, b) \\<in> (set uu_)\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n       \\<Longrightarrow> Fun v va \\<in> timpl_closure (Var vb) (set uu_)", "have 1: \"length T = length S\" \"\\<forall>i<length T. timpls_transformable_to TI' (T ! i) (S ! i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length T = length S &&&\n    \\<forall>i<length T. timpls_transformable_to TI' (T ! i) (S ! i)", "using prems(1) list_all2_conv_all_nth[of \"timpls_transformable_to TI'\" T S]"], ["proof (prove)\nusing this:\n  timpls_transformable_to TI' (Fun f T) (Fun g S)\n  list_all2 (timpls_transformable_to TI') T S =\n  (length T = length S \\<and>\n   (\\<forall>i<length T. timpls_transformable_to TI' (T ! i) (S ! i)))\n\ngoal (1 subgoal):\n 1. length T = length S &&&\n    \\<forall>i<length T. timpls_transformable_to TI' (T ! i) (S ! i)", "by simp_all"], ["proof (state)\nthis:\n  length T = length S\n  \\<forall>i<length T. timpls_transformable_to TI' (T ! i) (S ! i)\n\ngoal (4 subgoals):\n 1. \\<And>TI x y.\n       \\<lbrakk>timpls_transformable_to TI' (Var x) (Var y);\n        set TI' =\n        {(a, b). (a, b) \\<in> (set TI)\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n       \\<Longrightarrow> Var y \\<in> timpl_closure (Var x) (set TI)\n 2. \\<And>TI f T g S.\n       \\<lbrakk>\\<And>z yb.\n                   \\<lbrakk>z \\<in> set T; yb \\<in> set S;\n                    timpls_transformable_to TI' z yb;\n                    set TI' =\n                    {(a, b).\n                     (a, b) \\<in> (set TI)\\<^sup>+ \\<and>\n                     a \\<noteq> b}\\<rbrakk>\n                   \\<Longrightarrow> yb \\<in> timpl_closure z (set TI);\n        timpls_transformable_to TI' (Fun f T) (Fun g S);\n        set TI' =\n        {(a, b). (a, b) \\<in> (set TI)\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n       \\<Longrightarrow> Fun g S \\<in> timpl_closure (Fun f T) (set TI)\n 3. \\<And>uu_ v va vb.\n       \\<lbrakk>timpls_transformable_to TI' (Fun v va) (Var vb);\n        set TI' =\n        {(a, b).\n         (a, b) \\<in> (set uu_)\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n       \\<Longrightarrow> Var vb \\<in> timpl_closure (Fun v va) (set uu_)\n 4. \\<And>uu_ vb v va.\n       \\<lbrakk>timpls_transformable_to TI' (Var vb) (Fun v va);\n        set TI' =\n        {(a, b).\n         (a, b) \\<in> (set uu_)\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n       \\<Longrightarrow> Fun v va \\<in> timpl_closure (Var vb) (set uu_)", "note 2 = timpl_closure_is_timpl_closure'"], ["proof (state)\nthis:\n  (?s \\<in> timpl_closure ?t ?TI) = ((?t, ?s) \\<in> timpl_closure' ?TI)\n\ngoal (4 subgoals):\n 1. \\<And>TI x y.\n       \\<lbrakk>timpls_transformable_to TI' (Var x) (Var y);\n        set TI' =\n        {(a, b). (a, b) \\<in> (set TI)\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n       \\<Longrightarrow> Var y \\<in> timpl_closure (Var x) (set TI)\n 2. \\<And>TI f T g S.\n       \\<lbrakk>\\<And>z yb.\n                   \\<lbrakk>z \\<in> set T; yb \\<in> set S;\n                    timpls_transformable_to TI' z yb;\n                    set TI' =\n                    {(a, b).\n                     (a, b) \\<in> (set TI)\\<^sup>+ \\<and>\n                     a \\<noteq> b}\\<rbrakk>\n                   \\<Longrightarrow> yb \\<in> timpl_closure z (set TI);\n        timpls_transformable_to TI' (Fun f T) (Fun g S);\n        set TI' =\n        {(a, b). (a, b) \\<in> (set TI)\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n       \\<Longrightarrow> Fun g S \\<in> timpl_closure (Fun f T) (set TI)\n 3. \\<And>uu_ v va vb.\n       \\<lbrakk>timpls_transformable_to TI' (Fun v va) (Var vb);\n        set TI' =\n        {(a, b).\n         (a, b) \\<in> (set uu_)\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n       \\<Longrightarrow> Var vb \\<in> timpl_closure (Fun v va) (set uu_)\n 4. \\<And>uu_ vb v va.\n       \\<lbrakk>timpls_transformable_to TI' (Var vb) (Fun v va);\n        set TI' =\n        {(a, b).\n         (a, b) \\<in> (set uu_)\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n       \\<Longrightarrow> Fun v va \\<in> timpl_closure (Var vb) (set uu_)", "note 3 = in_set_conv_nth[of _ T] in_set_conv_nth[of _ S]"], ["proof (state)\nthis:\n  (?x \\<in> set T) = (\\<exists>i<length T. T ! i = ?x)\n  (?x \\<in> set S) = (\\<exists>i<length S. S ! i = ?x)\n\ngoal (4 subgoals):\n 1. \\<And>TI x y.\n       \\<lbrakk>timpls_transformable_to TI' (Var x) (Var y);\n        set TI' =\n        {(a, b). (a, b) \\<in> (set TI)\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n       \\<Longrightarrow> Var y \\<in> timpl_closure (Var x) (set TI)\n 2. \\<And>TI f T g S.\n       \\<lbrakk>\\<And>z yb.\n                   \\<lbrakk>z \\<in> set T; yb \\<in> set S;\n                    timpls_transformable_to TI' z yb;\n                    set TI' =\n                    {(a, b).\n                     (a, b) \\<in> (set TI)\\<^sup>+ \\<and>\n                     a \\<noteq> b}\\<rbrakk>\n                   \\<Longrightarrow> yb \\<in> timpl_closure z (set TI);\n        timpls_transformable_to TI' (Fun f T) (Fun g S);\n        set TI' =\n        {(a, b). (a, b) \\<in> (set TI)\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n       \\<Longrightarrow> Fun g S \\<in> timpl_closure (Fun f T) (set TI)\n 3. \\<And>uu_ v va vb.\n       \\<lbrakk>timpls_transformable_to TI' (Fun v va) (Var vb);\n        set TI' =\n        {(a, b).\n         (a, b) \\<in> (set uu_)\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n       \\<Longrightarrow> Var vb \\<in> timpl_closure (Fun v va) (set uu_)\n 4. \\<And>uu_ vb v va.\n       \\<lbrakk>timpls_transformable_to TI' (Var vb) (Fun v va);\n        set TI' =\n        {(a, b).\n         (a, b) \\<in> (set uu_)\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n       \\<Longrightarrow> Fun v va \\<in> timpl_closure (Var vb) (set uu_)", "have 4: \"timpl_closure' (set TI') = timpl_closure' (set TI)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. timpl_closure' (set TI') = timpl_closure' (set TI)", "using timpl_closure'_timpls_trancl_eq'[of \"set TI\"] prems(2)"], ["proof (prove)\nusing this:\n  timpl_closure'\n   {(a, b). (a, b) \\<in> (set TI)\\<^sup>+ \\<and> a \\<noteq> b} =\n  timpl_closure' (set TI)\n  set TI' =\n  {a. case a of\n      (a, b) \\<Rightarrow>\n        (a, b) \\<in> (set TI)\\<^sup>+ \\<and> a \\<noteq> b}\n\ngoal (1 subgoal):\n 1. timpl_closure' (set TI') = timpl_closure' (set TI)", "by simp"], ["proof (state)\nthis:\n  timpl_closure' (set TI') = timpl_closure' (set TI)\n\ngoal (4 subgoals):\n 1. \\<And>TI x y.\n       \\<lbrakk>timpls_transformable_to TI' (Var x) (Var y);\n        set TI' =\n        {(a, b). (a, b) \\<in> (set TI)\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n       \\<Longrightarrow> Var y \\<in> timpl_closure (Var x) (set TI)\n 2. \\<And>TI f T g S.\n       \\<lbrakk>\\<And>z yb.\n                   \\<lbrakk>z \\<in> set T; yb \\<in> set S;\n                    timpls_transformable_to TI' z yb;\n                    set TI' =\n                    {(a, b).\n                     (a, b) \\<in> (set TI)\\<^sup>+ \\<and>\n                     a \\<noteq> b}\\<rbrakk>\n                   \\<Longrightarrow> yb \\<in> timpl_closure z (set TI);\n        timpls_transformable_to TI' (Fun f T) (Fun g S);\n        set TI' =\n        {(a, b). (a, b) \\<in> (set TI)\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n       \\<Longrightarrow> Fun g S \\<in> timpl_closure (Fun f T) (set TI)\n 3. \\<And>uu_ v va vb.\n       \\<lbrakk>timpls_transformable_to TI' (Fun v va) (Var vb);\n        set TI' =\n        {(a, b).\n         (a, b) \\<in> (set uu_)\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n       \\<Longrightarrow> Var vb \\<in> timpl_closure (Fun v va) (set uu_)\n 4. \\<And>uu_ vb v va.\n       \\<lbrakk>timpls_transformable_to TI' (Var vb) (Fun v va);\n        set TI' =\n        {(a, b).\n         (a, b) \\<in> (set uu_)\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n       \\<Longrightarrow> Fun v va \\<in> timpl_closure (Var vb) (set uu_)", "have IH': \"(T ! i, S ! i) \\<in> timpl_closure' (set TI')\" when i: \"i < length S\" for i"], ["proof (prove)\ngoal (1 subgoal):\n 1. (T ! i, S ! i) \\<in> timpl_closure' (set TI')", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (T ! i, S ! i) \\<in> timpl_closure' (set TI')", "have \"timpls_transformable_to TI' (T ! i) (S ! i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. timpls_transformable_to TI' (T ! i) (S ! i)", "using i 1"], ["proof (prove)\nusing this:\n  i < length S\n  length T = length S\n  \\<forall>i<length T. timpls_transformable_to TI' (T ! i) (S ! i)\n\ngoal (1 subgoal):\n 1. timpls_transformable_to TI' (T ! i) (S ! i)", "by presburger"], ["proof (state)\nthis:\n  timpls_transformable_to TI' (T ! i) (S ! i)\n\ngoal (1 subgoal):\n 1. (T ! i, S ! i) \\<in> timpl_closure' (set TI')", "hence \"S ! i \\<in> timpl_closure (T ! i) (set TI)\""], ["proof (prove)\nusing this:\n  timpls_transformable_to TI' (T ! i) (S ! i)\n\ngoal (1 subgoal):\n 1. S ! i \\<in> timpl_closure (T ! i) (set TI)", "using IH[of \"T ! i\" \"S ! i\"] i 1(1) prems(2)"], ["proof (prove)\nusing this:\n  timpls_transformable_to TI' (T ! i) (S ! i)\n  \\<lbrakk>T ! i \\<in> set T; S ! i \\<in> set S;\n   timpls_transformable_to TI' (T ! i) (S ! i);\n   set TI' =\n   {a. case a of\n       (a, b) \\<Rightarrow>\n         (a, b) \\<in> (set TI)\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n  \\<Longrightarrow> S ! i \\<in> timpl_closure (T ! i) (set TI)\n  i < length S\n  length T = length S\n  set TI' =\n  {a. case a of\n      (a, b) \\<Rightarrow>\n        (a, b) \\<in> (set TI)\\<^sup>+ \\<and> a \\<noteq> b}\n\ngoal (1 subgoal):\n 1. S ! i \\<in> timpl_closure (T ! i) (set TI)", "by force"], ["proof (state)\nthis:\n  S ! i \\<in> timpl_closure (T ! i) (set TI)\n\ngoal (1 subgoal):\n 1. (T ! i, S ! i) \\<in> timpl_closure' (set TI')", "thus ?thesis"], ["proof (prove)\nusing this:\n  S ! i \\<in> timpl_closure (T ! i) (set TI)\n\ngoal (1 subgoal):\n 1. (T ! i, S ! i) \\<in> timpl_closure' (set TI')", "using 2[of \"S ! i\" \"T ! i\" \"set TI\"] 4"], ["proof (prove)\nusing this:\n  S ! i \\<in> timpl_closure (T ! i) (set TI)\n  (S ! i \\<in> timpl_closure (T ! i) (set TI)) =\n  ((T ! i, S ! i) \\<in> timpl_closure' (set TI))\n  timpl_closure' (set TI') = timpl_closure' (set TI)\n\ngoal (1 subgoal):\n 1. (T ! i, S ! i) \\<in> timpl_closure' (set TI')", "by blast"], ["proof (state)\nthis:\n  (T ! i, S ! i) \\<in> timpl_closure' (set TI')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?i44 < length S \\<Longrightarrow>\n  (T ! ?i44, S ! ?i44) \\<in> timpl_closure' (set TI')\n\ngoal (4 subgoals):\n 1. \\<And>TI x y.\n       \\<lbrakk>timpls_transformable_to TI' (Var x) (Var y);\n        set TI' =\n        {(a, b). (a, b) \\<in> (set TI)\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n       \\<Longrightarrow> Var y \\<in> timpl_closure (Var x) (set TI)\n 2. \\<And>TI f T g S.\n       \\<lbrakk>\\<And>z yb.\n                   \\<lbrakk>z \\<in> set T; yb \\<in> set S;\n                    timpls_transformable_to TI' z yb;\n                    set TI' =\n                    {(a, b).\n                     (a, b) \\<in> (set TI)\\<^sup>+ \\<and>\n                     a \\<noteq> b}\\<rbrakk>\n                   \\<Longrightarrow> yb \\<in> timpl_closure z (set TI);\n        timpls_transformable_to TI' (Fun f T) (Fun g S);\n        set TI' =\n        {(a, b). (a, b) \\<in> (set TI)\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n       \\<Longrightarrow> Fun g S \\<in> timpl_closure (Fun f T) (set TI)\n 3. \\<And>uu_ v va vb.\n       \\<lbrakk>timpls_transformable_to TI' (Fun v va) (Var vb);\n        set TI' =\n        {(a, b).\n         (a, b) \\<in> (set uu_)\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n       \\<Longrightarrow> Var vb \\<in> timpl_closure (Fun v va) (set uu_)\n 4. \\<And>uu_ vb v va.\n       \\<lbrakk>timpls_transformable_to TI' (Var vb) (Fun v va);\n        set TI' =\n        {(a, b).\n         (a, b) \\<in> (set uu_)\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n       \\<Longrightarrow> Fun v va \\<in> timpl_closure (Var vb) (set uu_)", "have 5: \"f = g \\<or> (\\<exists>a b. (a, b) \\<in> (set TI')\\<^sup>+ \\<and> f = Abs a \\<and> g = Abs b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f = g \\<or>\n    (\\<exists>a b.\n        (a, b) \\<in> (set TI')\\<^sup>+ \\<and> f = Abs a \\<and> g = Abs b)", "using prems(1) the_Abs_def[of f] the_Abs_def[of g] is_Abs_def[of f] is_Abs_def[of g]"], ["proof (prove)\nusing this:\n  timpls_transformable_to TI' (Fun f T) (Fun g S)\n  the_Abs f = (case f of Abs x4 \\<Rightarrow> x4)\n  the_Abs g = (case g of Abs x4 \\<Rightarrow> x4)\n  is_Abs f = (\\<exists>x4. f = Abs x4)\n  is_Abs g = (\\<exists>x4. g = Abs x4)\n\ngoal (1 subgoal):\n 1. f = g \\<or>\n    (\\<exists>a b.\n        (a, b) \\<in> (set TI')\\<^sup>+ \\<and> f = Abs a \\<and> g = Abs b)", "by fastforce"], ["proof (state)\nthis:\n  f = g \\<or>\n  (\\<exists>a b.\n      (a, b) \\<in> (set TI')\\<^sup>+ \\<and> f = Abs a \\<and> g = Abs b)\n\ngoal (4 subgoals):\n 1. \\<And>TI x y.\n       \\<lbrakk>timpls_transformable_to TI' (Var x) (Var y);\n        set TI' =\n        {(a, b). (a, b) \\<in> (set TI)\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n       \\<Longrightarrow> Var y \\<in> timpl_closure (Var x) (set TI)\n 2. \\<And>TI f T g S.\n       \\<lbrakk>\\<And>z yb.\n                   \\<lbrakk>z \\<in> set T; yb \\<in> set S;\n                    timpls_transformable_to TI' z yb;\n                    set TI' =\n                    {(a, b).\n                     (a, b) \\<in> (set TI)\\<^sup>+ \\<and>\n                     a \\<noteq> b}\\<rbrakk>\n                   \\<Longrightarrow> yb \\<in> timpl_closure z (set TI);\n        timpls_transformable_to TI' (Fun f T) (Fun g S);\n        set TI' =\n        {(a, b). (a, b) \\<in> (set TI)\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n       \\<Longrightarrow> Fun g S \\<in> timpl_closure (Fun f T) (set TI)\n 3. \\<And>uu_ v va vb.\n       \\<lbrakk>timpls_transformable_to TI' (Fun v va) (Var vb);\n        set TI' =\n        {(a, b).\n         (a, b) \\<in> (set uu_)\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n       \\<Longrightarrow> Var vb \\<in> timpl_closure (Fun v va) (set uu_)\n 4. \\<And>uu_ vb v va.\n       \\<lbrakk>timpls_transformable_to TI' (Var vb) (Fun v va);\n        set TI' =\n        {(a, b).\n         (a, b) \\<in> (set uu_)\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n       \\<Longrightarrow> Fun v va \\<in> timpl_closure (Var vb) (set uu_)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. Fun g S \\<in> timpl_closure (Fun f T) (set TI)", "using 2 4 timpl_closure_FunI[OF IH' 1(1) 5] 1(1)"], ["proof (prove)\nusing this:\n  (?s \\<in> timpl_closure ?t ?TI) = ((?t, ?s) \\<in> timpl_closure' ?TI)\n  timpl_closure' (set TI') = timpl_closure' (set TI)\n  (\\<And>i. i < length T \\<Longrightarrow> i < length S) \\<Longrightarrow>\n  (Fun f T, Fun g S) \\<in> timpl_closure' (set TI')\n  length T = length S\n\ngoal (1 subgoal):\n 1. Fun g S \\<in> timpl_closure (Fun f T) (set TI)", "by auto"], ["proof (state)\nthis:\n  Fun g S \\<in> timpl_closure (Fun f T) (set TI)\n\ngoal (3 subgoals):\n 1. \\<And>TI x y.\n       \\<lbrakk>timpls_transformable_to TI' (Var x) (Var y);\n        set TI' =\n        {(a, b). (a, b) \\<in> (set TI)\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n       \\<Longrightarrow> Var y \\<in> timpl_closure (Var x) (set TI)\n 2. \\<And>uu_ v va vb.\n       \\<lbrakk>timpls_transformable_to TI' (Fun v va) (Var vb);\n        set TI' =\n        {(a, b).\n         (a, b) \\<in> (set uu_)\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n       \\<Longrightarrow> Var vb \\<in> timpl_closure (Fun v va) (set uu_)\n 3. \\<And>uu_ vb v va.\n       \\<lbrakk>timpls_transformable_to TI' (Var vb) (Fun v va);\n        set TI' =\n        {(a, b).\n         (a, b) \\<in> (set uu_)\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n       \\<Longrightarrow> Fun v va \\<in> timpl_closure (Var vb) (set uu_)", "qed (simp_all add: timpl_closure.FP)"], ["proof (state)\nthis:\n  timpls_transformable_to TI' s t \\<Longrightarrow>\n  t \\<in> timpl_closure s (set TI)\n\ngoal (1 subgoal):\n 1. t \\<in> timpl_closure s (set TI) \\<Longrightarrow>\n    timpls_transformable_to TI' s t", "show \"?B s t \\<Longrightarrow> ?A s t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t \\<in> timpl_closure s (set TI) \\<Longrightarrow>\n    timpls_transformable_to TI' s t", "proof (induction t rule: timpl_closure.induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. timpls_transformable_to TI' s s\n 2. \\<And>u a b sa.\n       \\<lbrakk>u \\<in> timpl_closure s (set TI);\n        timpls_transformable_to TI' s u; (a, b) \\<in> set TI;\n        term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) u\n         sa\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to TI' s sa", "case (TI u a b v)"], ["proof (state)\nthis:\n  u \\<in> timpl_closure s (set TI)\n  (a, b) \\<in> set TI\n  term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) u v\n  timpls_transformable_to TI' s u\n\ngoal (2 subgoals):\n 1. timpls_transformable_to TI' s s\n 2. \\<And>u a b sa.\n       \\<lbrakk>u \\<in> timpl_closure s (set TI);\n        timpls_transformable_to TI' s u; (a, b) \\<in> set TI;\n        term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) u\n         sa\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to TI' s sa", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. timpls_transformable_to TI' s v", "proof (cases \"a = b\")"], ["proof (state)\ngoal (2 subgoals):\n 1. a = b \\<Longrightarrow> timpls_transformable_to TI' s v\n 2. a \\<noteq> b \\<Longrightarrow> timpls_transformable_to TI' s v", "case True"], ["proof (state)\nthis:\n  a = b\n\ngoal (2 subgoals):\n 1. a = b \\<Longrightarrow> timpls_transformable_to TI' s v\n 2. a \\<noteq> b \\<Longrightarrow> timpls_transformable_to TI' s v", "thus ?thesis"], ["proof (prove)\nusing this:\n  a = b\n\ngoal (1 subgoal):\n 1. timpls_transformable_to TI' s v", "using TI.hyps(3) TI.IH term_variants_pred_refl_inv"], ["proof (prove)\nusing this:\n  a = b\n  term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) u v\n  timpls_transformable_to TI' s u\n  \\<lbrakk>term_variants_pred ?P ?s ?t;\n   \\<forall>f. \\<forall>g\\<in>set (?P f). f = g\\<rbrakk>\n  \\<Longrightarrow> ?s = ?t\n\ngoal (1 subgoal):\n 1. timpls_transformable_to TI' s v", "by fastforce"], ["proof (state)\nthis:\n  timpls_transformable_to TI' s v\n\ngoal (1 subgoal):\n 1. a \\<noteq> b \\<Longrightarrow> timpls_transformable_to TI' s v", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. a \\<noteq> b \\<Longrightarrow> timpls_transformable_to TI' s v", "case False"], ["proof (state)\nthis:\n  a \\<noteq> b\n\ngoal (1 subgoal):\n 1. a \\<noteq> b \\<Longrightarrow> timpls_transformable_to TI' s v", "hence 1: \"timpls_transformable_to TI' u v\""], ["proof (prove)\nusing this:\n  a \\<noteq> b\n\ngoal (1 subgoal):\n 1. timpls_transformable_to TI' u v", "using TI.hyps(2) assms timpls_transformable_to_if_term_variants[OF TI.hyps(3), of TI']"], ["proof (prove)\nusing this:\n  a \\<noteq> b\n  (a, b) \\<in> set TI\n  set TI' = {(a, b). (a, b) \\<in> (set TI)\\<^sup>+ \\<and> a \\<noteq> b}\n  (a, b) \\<in> set TI' \\<Longrightarrow> timpls_transformable_to TI' u v\n\ngoal (1 subgoal):\n 1. timpls_transformable_to TI' u v", "by blast"], ["proof (state)\nthis:\n  timpls_transformable_to TI' u v\n\ngoal (1 subgoal):\n 1. a \\<noteq> b \\<Longrightarrow> timpls_transformable_to TI' s v", "have 2: \"(c,d) \\<in> set TI'\" when cd: \"(c,d) \\<in> (set TI')\\<^sup>+\" \"c \\<noteq> d\" for c d"], ["proof (prove)\ngoal (1 subgoal):\n 1. (c, d) \\<in> set TI'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (c, d) \\<in> set TI'", "let ?cl = \"\\<lambda>X. {(a,b) \\<in> X\\<^sup>+. a \\<noteq> b}\""], ["proof (state)\ngoal (1 subgoal):\n 1. (c, d) \\<in> set TI'", "have \"?cl (set TI') = ?cl (?cl (set TI))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {(a, b). (a, b) \\<in> (set TI')\\<^sup>+ \\<and> a \\<noteq> b} =\n    {(a, b).\n     (a, b)\n     \\<in> {(a, b).\n            (a, b) \\<in> (set TI)\\<^sup>+ \\<and>\n            a \\<noteq> b}\\<^sup>+ \\<and>\n     a \\<noteq> b}", "using assms"], ["proof (prove)\nusing this:\n  set TI' = {(a, b). (a, b) \\<in> (set TI)\\<^sup>+ \\<and> a \\<noteq> b}\n\ngoal (1 subgoal):\n 1. {(a, b). (a, b) \\<in> (set TI')\\<^sup>+ \\<and> a \\<noteq> b} =\n    {(a, b).\n     (a, b)\n     \\<in> {(a, b).\n            (a, b) \\<in> (set TI)\\<^sup>+ \\<and>\n            a \\<noteq> b}\\<^sup>+ \\<and>\n     a \\<noteq> b}", "by presburger"], ["proof (state)\nthis:\n  {(a, b). (a, b) \\<in> (set TI')\\<^sup>+ \\<and> a \\<noteq> b} =\n  {(a, b).\n   (a, b)\n   \\<in> {(a, b).\n          (a, b) \\<in> (set TI)\\<^sup>+ \\<and> a \\<noteq> b}\\<^sup>+ \\<and>\n   a \\<noteq> b}\n\ngoal (1 subgoal):\n 1. (c, d) \\<in> set TI'", "hence \"set TI' = ?cl (set TI')\""], ["proof (prove)\nusing this:\n  {(a, b). (a, b) \\<in> (set TI')\\<^sup>+ \\<and> a \\<noteq> b} =\n  {(a, b).\n   (a, b)\n   \\<in> {(a, b).\n          (a, b) \\<in> (set TI)\\<^sup>+ \\<and> a \\<noteq> b}\\<^sup>+ \\<and>\n   a \\<noteq> b}\n\ngoal (1 subgoal):\n 1. set TI' = {(a, b). (a, b) \\<in> (set TI')\\<^sup>+ \\<and> a \\<noteq> b}", "using assms trancl_minus_refl_idem[of \"set TI\"]"], ["proof (prove)\nusing this:\n  {(a, b). (a, b) \\<in> (set TI')\\<^sup>+ \\<and> a \\<noteq> b} =\n  {(a, b).\n   (a, b)\n   \\<in> {(a, b).\n          (a, b) \\<in> (set TI)\\<^sup>+ \\<and> a \\<noteq> b}\\<^sup>+ \\<and>\n   a \\<noteq> b}\n  set TI' = {(a, b). (a, b) \\<in> (set TI)\\<^sup>+ \\<and> a \\<noteq> b}\n  {(a, b).\n   (a, b)\n   \\<in> {(a, b).\n          (a, b) \\<in> (set TI)\\<^sup>+ \\<and> a \\<noteq> b}\\<^sup>+ \\<and>\n   a \\<noteq> b} =\n  {(a, b). (a, b) \\<in> (set TI)\\<^sup>+ \\<and> a \\<noteq> b}\n\ngoal (1 subgoal):\n 1. set TI' = {(a, b). (a, b) \\<in> (set TI')\\<^sup>+ \\<and> a \\<noteq> b}", "by argo"], ["proof (state)\nthis:\n  set TI' = {(a, b). (a, b) \\<in> (set TI')\\<^sup>+ \\<and> a \\<noteq> b}\n\ngoal (1 subgoal):\n 1. (c, d) \\<in> set TI'", "thus ?thesis"], ["proof (prove)\nusing this:\n  set TI' = {(a, b). (a, b) \\<in> (set TI')\\<^sup>+ \\<and> a \\<noteq> b}\n\ngoal (1 subgoal):\n 1. (c, d) \\<in> set TI'", "using cd"], ["proof (prove)\nusing this:\n  set TI' = {(a, b). (a, b) \\<in> (set TI')\\<^sup>+ \\<and> a \\<noteq> b}\n  (c, d) \\<in> (set TI')\\<^sup>+\n  c \\<noteq> d\n\ngoal (1 subgoal):\n 1. (c, d) \\<in> set TI'", "by blast"], ["proof (state)\nthis:\n  (c, d) \\<in> set TI'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<lbrakk>(?c43, ?d43) \\<in> (set TI')\\<^sup>+; ?c43 \\<noteq> ?d43\\<rbrakk>\n  \\<Longrightarrow> (?c43, ?d43) \\<in> set TI'\n\ngoal (1 subgoal):\n 1. a \\<noteq> b \\<Longrightarrow> timpls_transformable_to TI' s v", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. timpls_transformable_to TI' s v", "using timpls_transformable_to_trans[OF _ TI.IH 1] 2"], ["proof (prove)\nusing this:\n  \\<forall>(a, b)\\<in>(set TI')\\<^sup>+.\n     a \\<noteq> b \\<longrightarrow> (a, b) \\<in> set TI' \\<Longrightarrow>\n  timpls_transformable_to TI' s v\n  \\<lbrakk>(?c43, ?d43) \\<in> (set TI')\\<^sup>+; ?c43 \\<noteq> ?d43\\<rbrakk>\n  \\<Longrightarrow> (?c43, ?d43) \\<in> set TI'\n\ngoal (1 subgoal):\n 1. timpls_transformable_to TI' s v", "by blast"], ["proof (state)\nthis:\n  timpls_transformable_to TI' s v\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  timpls_transformable_to TI' s v\n\ngoal (1 subgoal):\n 1. timpls_transformable_to TI' s s", "qed (use timpls_transformable_to_refl in fast)"], ["proof (state)\nthis:\n  t \\<in> timpl_closure s (set TI) \\<Longrightarrow>\n  timpls_transformable_to TI' s t\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma timpls_transformable_to'_iff_in_timpl_closure:\n  \"timpls_transformable_to' TI s t \\<longleftrightarrow> t \\<in> timpl_closure s (set TI)\" (is \"?A s t \\<longleftrightarrow> ?B s t\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. timpls_transformable_to' TI s t = (t \\<in> timpl_closure s (set TI))", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. timpls_transformable_to' TI s t \\<Longrightarrow>\n    t \\<in> timpl_closure s (set TI)\n 2. t \\<in> timpl_closure s (set TI) \\<Longrightarrow>\n    timpls_transformable_to' TI s t", "show \"?A s t \\<Longrightarrow> ?B s t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. timpls_transformable_to' TI s t \\<Longrightarrow>\n    t \\<in> timpl_closure s (set TI)", "proof (induction s t rule: timpls_transformable_to'.induct)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>TI x y.\n       timpls_transformable_to' TI (Var x) (Var y) \\<Longrightarrow>\n       Var y \\<in> timpl_closure (Var x) (set TI)\n 2. \\<And>TI f T g S.\n       \\<lbrakk>\\<And>z yb.\n                   \\<lbrakk>z \\<in> set T; yb \\<in> set S;\n                    timpls_transformable_to' TI z yb\\<rbrakk>\n                   \\<Longrightarrow> yb \\<in> timpl_closure z (set TI);\n        timpls_transformable_to' TI (Fun f T) (Fun g S)\\<rbrakk>\n       \\<Longrightarrow> Fun g S \\<in> timpl_closure (Fun f T) (set TI)\n 3. \\<And>uu_ v va vb.\n       timpls_transformable_to' uu_ (Fun v va) (Var vb) \\<Longrightarrow>\n       Var vb \\<in> timpl_closure (Fun v va) (set uu_)\n 4. \\<And>uu_ vb v va.\n       timpls_transformable_to' uu_ (Var vb) (Fun v va) \\<Longrightarrow>\n       Fun v va \\<in> timpl_closure (Var vb) (set uu_)", "case (2 TI f T g S)"], ["proof (state)\nthis:\n  \\<lbrakk>?z43 \\<in> set T; ?yb43 \\<in> set S;\n   timpls_transformable_to' TI ?z43 ?yb43\\<rbrakk>\n  \\<Longrightarrow> ?yb43 \\<in> timpl_closure ?z43 (set TI)\n  timpls_transformable_to' TI (Fun f T) (Fun g S)\n\ngoal (4 subgoals):\n 1. \\<And>TI x y.\n       timpls_transformable_to' TI (Var x) (Var y) \\<Longrightarrow>\n       Var y \\<in> timpl_closure (Var x) (set TI)\n 2. \\<And>TI f T g S.\n       \\<lbrakk>\\<And>z yb.\n                   \\<lbrakk>z \\<in> set T; yb \\<in> set S;\n                    timpls_transformable_to' TI z yb\\<rbrakk>\n                   \\<Longrightarrow> yb \\<in> timpl_closure z (set TI);\n        timpls_transformable_to' TI (Fun f T) (Fun g S)\\<rbrakk>\n       \\<Longrightarrow> Fun g S \\<in> timpl_closure (Fun f T) (set TI)\n 3. \\<And>uu_ v va vb.\n       timpls_transformable_to' uu_ (Fun v va) (Var vb) \\<Longrightarrow>\n       Var vb \\<in> timpl_closure (Fun v va) (set uu_)\n 4. \\<And>uu_ vb v va.\n       timpls_transformable_to' uu_ (Var vb) (Fun v va) \\<Longrightarrow>\n       Fun v va \\<in> timpl_closure (Var vb) (set uu_)", "note prems = \"2.prems\""], ["proof (state)\nthis:\n  timpls_transformable_to' TI (Fun f T) (Fun g S)\n\ngoal (4 subgoals):\n 1. \\<And>TI x y.\n       timpls_transformable_to' TI (Var x) (Var y) \\<Longrightarrow>\n       Var y \\<in> timpl_closure (Var x) (set TI)\n 2. \\<And>TI f T g S.\n       \\<lbrakk>\\<And>z yb.\n                   \\<lbrakk>z \\<in> set T; yb \\<in> set S;\n                    timpls_transformable_to' TI z yb\\<rbrakk>\n                   \\<Longrightarrow> yb \\<in> timpl_closure z (set TI);\n        timpls_transformable_to' TI (Fun f T) (Fun g S)\\<rbrakk>\n       \\<Longrightarrow> Fun g S \\<in> timpl_closure (Fun f T) (set TI)\n 3. \\<And>uu_ v va vb.\n       timpls_transformable_to' uu_ (Fun v va) (Var vb) \\<Longrightarrow>\n       Var vb \\<in> timpl_closure (Fun v va) (set uu_)\n 4. \\<And>uu_ vb v va.\n       timpls_transformable_to' uu_ (Var vb) (Fun v va) \\<Longrightarrow>\n       Fun v va \\<in> timpl_closure (Var vb) (set uu_)", "note IH = \"2.IH\""], ["proof (state)\nthis:\n  \\<lbrakk>?z43 \\<in> set T; ?yb43 \\<in> set S;\n   timpls_transformable_to' TI ?z43 ?yb43\\<rbrakk>\n  \\<Longrightarrow> ?yb43 \\<in> timpl_closure ?z43 (set TI)\n\ngoal (4 subgoals):\n 1. \\<And>TI x y.\n       timpls_transformable_to' TI (Var x) (Var y) \\<Longrightarrow>\n       Var y \\<in> timpl_closure (Var x) (set TI)\n 2. \\<And>TI f T g S.\n       \\<lbrakk>\\<And>z yb.\n                   \\<lbrakk>z \\<in> set T; yb \\<in> set S;\n                    timpls_transformable_to' TI z yb\\<rbrakk>\n                   \\<Longrightarrow> yb \\<in> timpl_closure z (set TI);\n        timpls_transformable_to' TI (Fun f T) (Fun g S)\\<rbrakk>\n       \\<Longrightarrow> Fun g S \\<in> timpl_closure (Fun f T) (set TI)\n 3. \\<And>uu_ v va vb.\n       timpls_transformable_to' uu_ (Fun v va) (Var vb) \\<Longrightarrow>\n       Var vb \\<in> timpl_closure (Fun v va) (set uu_)\n 4. \\<And>uu_ vb v va.\n       timpls_transformable_to' uu_ (Var vb) (Fun v va) \\<Longrightarrow>\n       Fun v va \\<in> timpl_closure (Var vb) (set uu_)", "have 1: \"length T = length S\" \"\\<forall>i<length T. timpls_transformable_to' TI (T ! i) (S ! i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length T = length S &&&\n    \\<forall>i<length T. timpls_transformable_to' TI (T ! i) (S ! i)", "using prems list_all2_conv_all_nth[of \"timpls_transformable_to' TI\" T S]"], ["proof (prove)\nusing this:\n  timpls_transformable_to' TI (Fun f T) (Fun g S)\n  list_all2 (timpls_transformable_to' TI) T S =\n  (length T = length S \\<and>\n   (\\<forall>i<length T. timpls_transformable_to' TI (T ! i) (S ! i)))\n\ngoal (1 subgoal):\n 1. length T = length S &&&\n    \\<forall>i<length T. timpls_transformable_to' TI (T ! i) (S ! i)", "by simp_all"], ["proof (state)\nthis:\n  length T = length S\n  \\<forall>i<length T. timpls_transformable_to' TI (T ! i) (S ! i)\n\ngoal (4 subgoals):\n 1. \\<And>TI x y.\n       timpls_transformable_to' TI (Var x) (Var y) \\<Longrightarrow>\n       Var y \\<in> timpl_closure (Var x) (set TI)\n 2. \\<And>TI f T g S.\n       \\<lbrakk>\\<And>z yb.\n                   \\<lbrakk>z \\<in> set T; yb \\<in> set S;\n                    timpls_transformable_to' TI z yb\\<rbrakk>\n                   \\<Longrightarrow> yb \\<in> timpl_closure z (set TI);\n        timpls_transformable_to' TI (Fun f T) (Fun g S)\\<rbrakk>\n       \\<Longrightarrow> Fun g S \\<in> timpl_closure (Fun f T) (set TI)\n 3. \\<And>uu_ v va vb.\n       timpls_transformable_to' uu_ (Fun v va) (Var vb) \\<Longrightarrow>\n       Var vb \\<in> timpl_closure (Fun v va) (set uu_)\n 4. \\<And>uu_ vb v va.\n       timpls_transformable_to' uu_ (Var vb) (Fun v va) \\<Longrightarrow>\n       Fun v va \\<in> timpl_closure (Var vb) (set uu_)", "note 2 = timpl_closure_is_timpl_closure'"], ["proof (state)\nthis:\n  (?s \\<in> timpl_closure ?t ?TI) = ((?t, ?s) \\<in> timpl_closure' ?TI)\n\ngoal (4 subgoals):\n 1. \\<And>TI x y.\n       timpls_transformable_to' TI (Var x) (Var y) \\<Longrightarrow>\n       Var y \\<in> timpl_closure (Var x) (set TI)\n 2. \\<And>TI f T g S.\n       \\<lbrakk>\\<And>z yb.\n                   \\<lbrakk>z \\<in> set T; yb \\<in> set S;\n                    timpls_transformable_to' TI z yb\\<rbrakk>\n                   \\<Longrightarrow> yb \\<in> timpl_closure z (set TI);\n        timpls_transformable_to' TI (Fun f T) (Fun g S)\\<rbrakk>\n       \\<Longrightarrow> Fun g S \\<in> timpl_closure (Fun f T) (set TI)\n 3. \\<And>uu_ v va vb.\n       timpls_transformable_to' uu_ (Fun v va) (Var vb) \\<Longrightarrow>\n       Var vb \\<in> timpl_closure (Fun v va) (set uu_)\n 4. \\<And>uu_ vb v va.\n       timpls_transformable_to' uu_ (Var vb) (Fun v va) \\<Longrightarrow>\n       Fun v va \\<in> timpl_closure (Var vb) (set uu_)", "note 3 = in_set_conv_nth[of _ T] in_set_conv_nth[of _ S]"], ["proof (state)\nthis:\n  (?x \\<in> set T) = (\\<exists>i<length T. T ! i = ?x)\n  (?x \\<in> set S) = (\\<exists>i<length S. S ! i = ?x)\n\ngoal (4 subgoals):\n 1. \\<And>TI x y.\n       timpls_transformable_to' TI (Var x) (Var y) \\<Longrightarrow>\n       Var y \\<in> timpl_closure (Var x) (set TI)\n 2. \\<And>TI f T g S.\n       \\<lbrakk>\\<And>z yb.\n                   \\<lbrakk>z \\<in> set T; yb \\<in> set S;\n                    timpls_transformable_to' TI z yb\\<rbrakk>\n                   \\<Longrightarrow> yb \\<in> timpl_closure z (set TI);\n        timpls_transformable_to' TI (Fun f T) (Fun g S)\\<rbrakk>\n       \\<Longrightarrow> Fun g S \\<in> timpl_closure (Fun f T) (set TI)\n 3. \\<And>uu_ v va vb.\n       timpls_transformable_to' uu_ (Fun v va) (Var vb) \\<Longrightarrow>\n       Var vb \\<in> timpl_closure (Fun v va) (set uu_)\n 4. \\<And>uu_ vb v va.\n       timpls_transformable_to' uu_ (Var vb) (Fun v va) \\<Longrightarrow>\n       Fun v va \\<in> timpl_closure (Var vb) (set uu_)", "have IH': \"(T ! i, S ! i) \\<in> timpl_closure' (set TI)\" when i: \"i < length S\" for i"], ["proof (prove)\ngoal (1 subgoal):\n 1. (T ! i, S ! i) \\<in> timpl_closure' (set TI)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (T ! i, S ! i) \\<in> timpl_closure' (set TI)", "have \"timpls_transformable_to' TI (T ! i) (S ! i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. timpls_transformable_to' TI (T ! i) (S ! i)", "using i 1"], ["proof (prove)\nusing this:\n  i < length S\n  length T = length S\n  \\<forall>i<length T. timpls_transformable_to' TI (T ! i) (S ! i)\n\ngoal (1 subgoal):\n 1. timpls_transformable_to' TI (T ! i) (S ! i)", "by presburger"], ["proof (state)\nthis:\n  timpls_transformable_to' TI (T ! i) (S ! i)\n\ngoal (1 subgoal):\n 1. (T ! i, S ! i) \\<in> timpl_closure' (set TI)", "hence \"S ! i \\<in> timpl_closure (T ! i) (set TI)\""], ["proof (prove)\nusing this:\n  timpls_transformable_to' TI (T ! i) (S ! i)\n\ngoal (1 subgoal):\n 1. S ! i \\<in> timpl_closure (T ! i) (set TI)", "using IH[of \"T ! i\" \"S ! i\"] i 1(1)"], ["proof (prove)\nusing this:\n  timpls_transformable_to' TI (T ! i) (S ! i)\n  \\<lbrakk>T ! i \\<in> set T; S ! i \\<in> set S;\n   timpls_transformable_to' TI (T ! i) (S ! i)\\<rbrakk>\n  \\<Longrightarrow> S ! i \\<in> timpl_closure (T ! i) (set TI)\n  i < length S\n  length T = length S\n\ngoal (1 subgoal):\n 1. S ! i \\<in> timpl_closure (T ! i) (set TI)", "by force"], ["proof (state)\nthis:\n  S ! i \\<in> timpl_closure (T ! i) (set TI)\n\ngoal (1 subgoal):\n 1. (T ! i, S ! i) \\<in> timpl_closure' (set TI)", "thus ?thesis"], ["proof (prove)\nusing this:\n  S ! i \\<in> timpl_closure (T ! i) (set TI)\n\ngoal (1 subgoal):\n 1. (T ! i, S ! i) \\<in> timpl_closure' (set TI)", "using 2[of \"S ! i\" \"T ! i\" \"set TI\"]"], ["proof (prove)\nusing this:\n  S ! i \\<in> timpl_closure (T ! i) (set TI)\n  (S ! i \\<in> timpl_closure (T ! i) (set TI)) =\n  ((T ! i, S ! i) \\<in> timpl_closure' (set TI))\n\ngoal (1 subgoal):\n 1. (T ! i, S ! i) \\<in> timpl_closure' (set TI)", "by blast"], ["proof (state)\nthis:\n  (T ! i, S ! i) \\<in> timpl_closure' (set TI)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?i43 < length S \\<Longrightarrow>\n  (T ! ?i43, S ! ?i43) \\<in> timpl_closure' (set TI)\n\ngoal (4 subgoals):\n 1. \\<And>TI x y.\n       timpls_transformable_to' TI (Var x) (Var y) \\<Longrightarrow>\n       Var y \\<in> timpl_closure (Var x) (set TI)\n 2. \\<And>TI f T g S.\n       \\<lbrakk>\\<And>z yb.\n                   \\<lbrakk>z \\<in> set T; yb \\<in> set S;\n                    timpls_transformable_to' TI z yb\\<rbrakk>\n                   \\<Longrightarrow> yb \\<in> timpl_closure z (set TI);\n        timpls_transformable_to' TI (Fun f T) (Fun g S)\\<rbrakk>\n       \\<Longrightarrow> Fun g S \\<in> timpl_closure (Fun f T) (set TI)\n 3. \\<And>uu_ v va vb.\n       timpls_transformable_to' uu_ (Fun v va) (Var vb) \\<Longrightarrow>\n       Var vb \\<in> timpl_closure (Fun v va) (set uu_)\n 4. \\<And>uu_ vb v va.\n       timpls_transformable_to' uu_ (Var vb) (Fun v va) \\<Longrightarrow>\n       Fun v va \\<in> timpl_closure (Var vb) (set uu_)", "have 4: \"f = g \\<or> (\\<exists>a b. (a, b) \\<in> (set TI)\\<^sup>+ \\<and> f = Abs a \\<and> g = Abs b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f = g \\<or>\n    (\\<exists>a b.\n        (a, b) \\<in> (set TI)\\<^sup>+ \\<and> f = Abs a \\<and> g = Abs b)", "using prems the_Abs_def[of f] the_Abs_def[of g] is_Abs_def[of f] is_Abs_def[of g]\n            in_trancl_closure_iff_in_trancl_fun[of _ _ TI]"], ["proof (prove)\nusing this:\n  timpls_transformable_to' TI (Fun f T) (Fun g S)\n  the_Abs f = (case f of Abs x4 \\<Rightarrow> x4)\n  the_Abs g = (case g of Abs x4 \\<Rightarrow> x4)\n  is_Abs f = (\\<exists>x4. f = Abs x4)\n  is_Abs g = (\\<exists>x4. g = Abs x4)\n  ((?a, ?b) \\<in> (set TI)\\<^sup>+) = in_trancl TI ?a ?b\n\ngoal (1 subgoal):\n 1. f = g \\<or>\n    (\\<exists>a b.\n        (a, b) \\<in> (set TI)\\<^sup>+ \\<and> f = Abs a \\<and> g = Abs b)", "by auto"], ["proof (state)\nthis:\n  f = g \\<or>\n  (\\<exists>a b.\n      (a, b) \\<in> (set TI)\\<^sup>+ \\<and> f = Abs a \\<and> g = Abs b)\n\ngoal (4 subgoals):\n 1. \\<And>TI x y.\n       timpls_transformable_to' TI (Var x) (Var y) \\<Longrightarrow>\n       Var y \\<in> timpl_closure (Var x) (set TI)\n 2. \\<And>TI f T g S.\n       \\<lbrakk>\\<And>z yb.\n                   \\<lbrakk>z \\<in> set T; yb \\<in> set S;\n                    timpls_transformable_to' TI z yb\\<rbrakk>\n                   \\<Longrightarrow> yb \\<in> timpl_closure z (set TI);\n        timpls_transformable_to' TI (Fun f T) (Fun g S)\\<rbrakk>\n       \\<Longrightarrow> Fun g S \\<in> timpl_closure (Fun f T) (set TI)\n 3. \\<And>uu_ v va vb.\n       timpls_transformable_to' uu_ (Fun v va) (Var vb) \\<Longrightarrow>\n       Var vb \\<in> timpl_closure (Fun v va) (set uu_)\n 4. \\<And>uu_ vb v va.\n       timpls_transformable_to' uu_ (Var vb) (Fun v va) \\<Longrightarrow>\n       Fun v va \\<in> timpl_closure (Var vb) (set uu_)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. Fun g S \\<in> timpl_closure (Fun f T) (set TI)", "using 2 timpl_closure_FunI[OF IH' 1(1) 4] 1(1)"], ["proof (prove)\nusing this:\n  (?s \\<in> timpl_closure ?t ?TI) = ((?t, ?s) \\<in> timpl_closure' ?TI)\n  (\\<And>i. i < length T \\<Longrightarrow> i < length S) \\<Longrightarrow>\n  (Fun f T, Fun g S) \\<in> timpl_closure' (set TI)\n  length T = length S\n\ngoal (1 subgoal):\n 1. Fun g S \\<in> timpl_closure (Fun f T) (set TI)", "by auto"], ["proof (state)\nthis:\n  Fun g S \\<in> timpl_closure (Fun f T) (set TI)\n\ngoal (3 subgoals):\n 1. \\<And>TI x y.\n       timpls_transformable_to' TI (Var x) (Var y) \\<Longrightarrow>\n       Var y \\<in> timpl_closure (Var x) (set TI)\n 2. \\<And>uu_ v va vb.\n       timpls_transformable_to' uu_ (Fun v va) (Var vb) \\<Longrightarrow>\n       Var vb \\<in> timpl_closure (Fun v va) (set uu_)\n 3. \\<And>uu_ vb v va.\n       timpls_transformable_to' uu_ (Var vb) (Fun v va) \\<Longrightarrow>\n       Fun v va \\<in> timpl_closure (Var vb) (set uu_)", "qed (simp_all add: timpl_closure.FP)"], ["proof (state)\nthis:\n  timpls_transformable_to' TI s t \\<Longrightarrow>\n  t \\<in> timpl_closure s (set TI)\n\ngoal (1 subgoal):\n 1. t \\<in> timpl_closure s (set TI) \\<Longrightarrow>\n    timpls_transformable_to' TI s t", "show \"?B s t \\<Longrightarrow> ?A s t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t \\<in> timpl_closure s (set TI) \\<Longrightarrow>\n    timpls_transformable_to' TI s t", "proof (induction t rule: timpl_closure.induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. timpls_transformable_to' TI s s\n 2. \\<And>u a b sa.\n       \\<lbrakk>u \\<in> timpl_closure s (set TI);\n        timpls_transformable_to' TI s u; (a, b) \\<in> set TI;\n        term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) u\n         sa\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to' TI s sa", "case (TI u a b v)"], ["proof (state)\nthis:\n  u \\<in> timpl_closure s (set TI)\n  (a, b) \\<in> set TI\n  term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) u v\n  timpls_transformable_to' TI s u\n\ngoal (2 subgoals):\n 1. timpls_transformable_to' TI s s\n 2. \\<And>u a b sa.\n       \\<lbrakk>u \\<in> timpl_closure s (set TI);\n        timpls_transformable_to' TI s u; (a, b) \\<in> set TI;\n        term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) u\n         sa\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to' TI s sa", "thus ?case"], ["proof (prove)\nusing this:\n  u \\<in> timpl_closure s (set TI)\n  (a, b) \\<in> set TI\n  term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) u v\n  timpls_transformable_to' TI s u\n\ngoal (1 subgoal):\n 1. timpls_transformable_to' TI s v", "using timpls_transformable_to'_trans\n            timpls_transformable_to'_if_term_variants"], ["proof (prove)\nusing this:\n  u \\<in> timpl_closure s (set TI)\n  (a, b) \\<in> set TI\n  term_variants_pred ((\\<lambda>_. [])(Abs a := [Abs b])) u v\n  timpls_transformable_to' TI s u\n  \\<lbrakk>timpls_transformable_to' ?TI ?s ?t;\n   timpls_transformable_to' ?TI ?t ?u\\<rbrakk>\n  \\<Longrightarrow> timpls_transformable_to' ?TI ?s ?u\n  \\<lbrakk>term_variants_pred ((\\<lambda>_. [])(Abs ?a := [Abs ?b])) ?s ?t;\n   (?a, ?b) \\<in> (set ?TI)\\<^sup>+\\<rbrakk>\n  \\<Longrightarrow> timpls_transformable_to' ?TI ?s ?t\n\ngoal (1 subgoal):\n 1. timpls_transformable_to' TI s v", "by blast"], ["proof (state)\nthis:\n  timpls_transformable_to' TI s v\n\ngoal (1 subgoal):\n 1. timpls_transformable_to' TI s s", "qed (use timpls_transformable_to_refl(2) in fast)"], ["proof (state)\nthis:\n  t \\<in> timpl_closure s (set TI) \\<Longrightarrow>\n  timpls_transformable_to' TI s t\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma equal_mod_timpls_iff_ex_in_timpl_closure:\n  assumes \"set TI' = {(a,b) \\<in> TI\\<^sup>+. a \\<noteq> b}\"\n  shows \"equal_mod_timpls TI' s t \\<longleftrightarrow> (\\<exists>u. u \\<in> timpl_closure s TI \\<and> u \\<in> timpl_closure t TI)\"\n    (is \"?A s t \\<longleftrightarrow> ?B s t\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. equal_mod_timpls TI' s t =\n    (\\<exists>u.\n        u \\<in> timpl_closure s TI \\<and> u \\<in> timpl_closure t TI)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. equal_mod_timpls TI' s t \\<Longrightarrow>\n    \\<exists>u. u \\<in> timpl_closure s TI \\<and> u \\<in> timpl_closure t TI\n 2. \\<exists>u.\n       u \\<in> timpl_closure s TI \\<and>\n       u \\<in> timpl_closure t TI \\<Longrightarrow>\n    equal_mod_timpls TI' s t", "show \"?A s t \\<Longrightarrow> ?B s t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. equal_mod_timpls TI' s t \\<Longrightarrow>\n    \\<exists>u. u \\<in> timpl_closure s TI \\<and> u \\<in> timpl_closure t TI", "using assms"], ["proof (prove)\nusing this:\n  set TI' = {(a, b). (a, b) \\<in> TI\\<^sup>+ \\<and> a \\<noteq> b}\n\ngoal (1 subgoal):\n 1. equal_mod_timpls TI' s t \\<Longrightarrow>\n    \\<exists>u. u \\<in> timpl_closure s TI \\<and> u \\<in> timpl_closure t TI", "proof (induction s t rule: equal_mod_timpls.induct)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>TIa x y.\n       \\<lbrakk>equal_mod_timpls TIa (Var x) (Var y);\n        set TIa =\n        {(a, b). (a, b) \\<in> TI\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>u.\n                            u \\<in> timpl_closure (Var x) TI \\<and>\n                            u \\<in> timpl_closure (Var y) TI\n 2. \\<And>TIa f T g S.\n       \\<lbrakk>\\<And>z yb.\n                   \\<lbrakk>z \\<in> set T; yb \\<in> set S;\n                    equal_mod_timpls TIa z yb;\n                    set TIa =\n                    {(a, b).\n                     (a, b) \\<in> TI\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>u.\n  u \\<in> timpl_closure z TI \\<and> u \\<in> timpl_closure yb TI;\n        equal_mod_timpls TIa (Fun f T) (Fun g S);\n        set TIa =\n        {(a, b). (a, b) \\<in> TI\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>u.\n                            u \\<in> timpl_closure (Fun f T) TI \\<and>\n                            u \\<in> timpl_closure (Fun g S) TI\n 3. \\<And>uu_ v va vb.\n       \\<lbrakk>equal_mod_timpls uu_ (Fun v va) (Var vb);\n        set uu_ =\n        {(a, b). (a, b) \\<in> TI\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>u.\n                            u \\<in> timpl_closure (Fun v va) TI \\<and>\n                            u \\<in> timpl_closure (Var vb) TI\n 4. \\<And>uu_ vb v va.\n       \\<lbrakk>equal_mod_timpls uu_ (Var vb) (Fun v va);\n        set uu_ =\n        {(a, b). (a, b) \\<in> TI\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>u.\n                            u \\<in> timpl_closure (Var vb) TI \\<and>\n                            u \\<in> timpl_closure (Fun v va) TI", "case (2 TI' f T g S)"], ["proof (state)\nthis:\n  \\<lbrakk>?z43 \\<in> set T; ?yb43 \\<in> set S;\n   equal_mod_timpls TI' ?z43 ?yb43;\n   set TI' =\n   {a. case a of\n       (a, b) \\<Rightarrow>\n         (a, b) \\<in> TI\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n  \\<Longrightarrow> \\<exists>u.\n                       u \\<in> timpl_closure ?z43 TI \\<and>\n                       u \\<in> timpl_closure ?yb43 TI\n  equal_mod_timpls TI' (Fun f T) (Fun g S)\n  set TI' =\n  {a. case a of\n      (a, b) \\<Rightarrow> (a, b) \\<in> TI\\<^sup>+ \\<and> a \\<noteq> b}\n\ngoal (4 subgoals):\n 1. \\<And>TIa x y.\n       \\<lbrakk>equal_mod_timpls TIa (Var x) (Var y);\n        set TIa =\n        {(a, b). (a, b) \\<in> TI\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>u.\n                            u \\<in> timpl_closure (Var x) TI \\<and>\n                            u \\<in> timpl_closure (Var y) TI\n 2. \\<And>TIa f T g S.\n       \\<lbrakk>\\<And>z yb.\n                   \\<lbrakk>z \\<in> set T; yb \\<in> set S;\n                    equal_mod_timpls TIa z yb;\n                    set TIa =\n                    {(a, b).\n                     (a, b) \\<in> TI\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>u.\n  u \\<in> timpl_closure z TI \\<and> u \\<in> timpl_closure yb TI;\n        equal_mod_timpls TIa (Fun f T) (Fun g S);\n        set TIa =\n        {(a, b). (a, b) \\<in> TI\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>u.\n                            u \\<in> timpl_closure (Fun f T) TI \\<and>\n                            u \\<in> timpl_closure (Fun g S) TI\n 3. \\<And>uu_ v va vb.\n       \\<lbrakk>equal_mod_timpls uu_ (Fun v va) (Var vb);\n        set uu_ =\n        {(a, b). (a, b) \\<in> TI\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>u.\n                            u \\<in> timpl_closure (Fun v va) TI \\<and>\n                            u \\<in> timpl_closure (Var vb) TI\n 4. \\<And>uu_ vb v va.\n       \\<lbrakk>equal_mod_timpls uu_ (Var vb) (Fun v va);\n        set uu_ =\n        {(a, b). (a, b) \\<in> TI\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>u.\n                            u \\<in> timpl_closure (Var vb) TI \\<and>\n                            u \\<in> timpl_closure (Fun v va) TI", "note prems = \"2.prems\""], ["proof (state)\nthis:\n  equal_mod_timpls TI' (Fun f T) (Fun g S)\n  set TI' =\n  {a. case a of\n      (a, b) \\<Rightarrow> (a, b) \\<in> TI\\<^sup>+ \\<and> a \\<noteq> b}\n\ngoal (4 subgoals):\n 1. \\<And>TIa x y.\n       \\<lbrakk>equal_mod_timpls TIa (Var x) (Var y);\n        set TIa =\n        {(a, b). (a, b) \\<in> TI\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>u.\n                            u \\<in> timpl_closure (Var x) TI \\<and>\n                            u \\<in> timpl_closure (Var y) TI\n 2. \\<And>TIa f T g S.\n       \\<lbrakk>\\<And>z yb.\n                   \\<lbrakk>z \\<in> set T; yb \\<in> set S;\n                    equal_mod_timpls TIa z yb;\n                    set TIa =\n                    {(a, b).\n                     (a, b) \\<in> TI\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>u.\n  u \\<in> timpl_closure z TI \\<and> u \\<in> timpl_closure yb TI;\n        equal_mod_timpls TIa (Fun f T) (Fun g S);\n        set TIa =\n        {(a, b). (a, b) \\<in> TI\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>u.\n                            u \\<in> timpl_closure (Fun f T) TI \\<and>\n                            u \\<in> timpl_closure (Fun g S) TI\n 3. \\<And>uu_ v va vb.\n       \\<lbrakk>equal_mod_timpls uu_ (Fun v va) (Var vb);\n        set uu_ =\n        {(a, b). (a, b) \\<in> TI\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>u.\n                            u \\<in> timpl_closure (Fun v va) TI \\<and>\n                            u \\<in> timpl_closure (Var vb) TI\n 4. \\<And>uu_ vb v va.\n       \\<lbrakk>equal_mod_timpls uu_ (Var vb) (Fun v va);\n        set uu_ =\n        {(a, b). (a, b) \\<in> TI\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>u.\n                            u \\<in> timpl_closure (Var vb) TI \\<and>\n                            u \\<in> timpl_closure (Fun v va) TI", "note IH = \"2.IH\""], ["proof (state)\nthis:\n  \\<lbrakk>?z43 \\<in> set T; ?yb43 \\<in> set S;\n   equal_mod_timpls TI' ?z43 ?yb43;\n   set TI' =\n   {a. case a of\n       (a, b) \\<Rightarrow>\n         (a, b) \\<in> TI\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n  \\<Longrightarrow> \\<exists>u.\n                       u \\<in> timpl_closure ?z43 TI \\<and>\n                       u \\<in> timpl_closure ?yb43 TI\n\ngoal (4 subgoals):\n 1. \\<And>TIa x y.\n       \\<lbrakk>equal_mod_timpls TIa (Var x) (Var y);\n        set TIa =\n        {(a, b). (a, b) \\<in> TI\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>u.\n                            u \\<in> timpl_closure (Var x) TI \\<and>\n                            u \\<in> timpl_closure (Var y) TI\n 2. \\<And>TIa f T g S.\n       \\<lbrakk>\\<And>z yb.\n                   \\<lbrakk>z \\<in> set T; yb \\<in> set S;\n                    equal_mod_timpls TIa z yb;\n                    set TIa =\n                    {(a, b).\n                     (a, b) \\<in> TI\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>u.\n  u \\<in> timpl_closure z TI \\<and> u \\<in> timpl_closure yb TI;\n        equal_mod_timpls TIa (Fun f T) (Fun g S);\n        set TIa =\n        {(a, b). (a, b) \\<in> TI\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>u.\n                            u \\<in> timpl_closure (Fun f T) TI \\<and>\n                            u \\<in> timpl_closure (Fun g S) TI\n 3. \\<And>uu_ v va vb.\n       \\<lbrakk>equal_mod_timpls uu_ (Fun v va) (Var vb);\n        set uu_ =\n        {(a, b). (a, b) \\<in> TI\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>u.\n                            u \\<in> timpl_closure (Fun v va) TI \\<and>\n                            u \\<in> timpl_closure (Var vb) TI\n 4. \\<And>uu_ vb v va.\n       \\<lbrakk>equal_mod_timpls uu_ (Var vb) (Fun v va);\n        set uu_ =\n        {(a, b). (a, b) \\<in> TI\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>u.\n                            u \\<in> timpl_closure (Var vb) TI \\<and>\n                            u \\<in> timpl_closure (Fun v va) TI", "have 1: \"length T = length S\" \"\\<forall>i<length T. equal_mod_timpls (TI') (T ! i) (S ! i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length T = length S &&&\n    \\<forall>i<length T. equal_mod_timpls TI' (T ! i) (S ! i)", "using prems list_all2_conv_all_nth[of \"equal_mod_timpls TI'\" T S]"], ["proof (prove)\nusing this:\n  equal_mod_timpls TI' (Fun f T) (Fun g S)\n  set TI' =\n  {a. case a of\n      (a, b) \\<Rightarrow> (a, b) \\<in> TI\\<^sup>+ \\<and> a \\<noteq> b}\n  list_all2 (equal_mod_timpls TI') T S =\n  (length T = length S \\<and>\n   (\\<forall>i<length T. equal_mod_timpls TI' (T ! i) (S ! i)))\n\ngoal (1 subgoal):\n 1. length T = length S &&&\n    \\<forall>i<length T. equal_mod_timpls TI' (T ! i) (S ! i)", "by simp_all"], ["proof (state)\nthis:\n  length T = length S\n  \\<forall>i<length T. equal_mod_timpls TI' (T ! i) (S ! i)\n\ngoal (4 subgoals):\n 1. \\<And>TIa x y.\n       \\<lbrakk>equal_mod_timpls TIa (Var x) (Var y);\n        set TIa =\n        {(a, b). (a, b) \\<in> TI\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>u.\n                            u \\<in> timpl_closure (Var x) TI \\<and>\n                            u \\<in> timpl_closure (Var y) TI\n 2. \\<And>TIa f T g S.\n       \\<lbrakk>\\<And>z yb.\n                   \\<lbrakk>z \\<in> set T; yb \\<in> set S;\n                    equal_mod_timpls TIa z yb;\n                    set TIa =\n                    {(a, b).\n                     (a, b) \\<in> TI\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>u.\n  u \\<in> timpl_closure z TI \\<and> u \\<in> timpl_closure yb TI;\n        equal_mod_timpls TIa (Fun f T) (Fun g S);\n        set TIa =\n        {(a, b). (a, b) \\<in> TI\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>u.\n                            u \\<in> timpl_closure (Fun f T) TI \\<and>\n                            u \\<in> timpl_closure (Fun g S) TI\n 3. \\<And>uu_ v va vb.\n       \\<lbrakk>equal_mod_timpls uu_ (Fun v va) (Var vb);\n        set uu_ =\n        {(a, b). (a, b) \\<in> TI\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>u.\n                            u \\<in> timpl_closure (Fun v va) TI \\<and>\n                            u \\<in> timpl_closure (Var vb) TI\n 4. \\<And>uu_ vb v va.\n       \\<lbrakk>equal_mod_timpls uu_ (Var vb) (Fun v va);\n        set uu_ =\n        {(a, b). (a, b) \\<in> TI\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>u.\n                            u \\<in> timpl_closure (Var vb) TI \\<and>\n                            u \\<in> timpl_closure (Fun v va) TI", "note 2 = timpl_closure_is_timpl_closure'"], ["proof (state)\nthis:\n  (?s \\<in> timpl_closure ?t ?TI) = ((?t, ?s) \\<in> timpl_closure' ?TI)\n\ngoal (4 subgoals):\n 1. \\<And>TIa x y.\n       \\<lbrakk>equal_mod_timpls TIa (Var x) (Var y);\n        set TIa =\n        {(a, b). (a, b) \\<in> TI\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>u.\n                            u \\<in> timpl_closure (Var x) TI \\<and>\n                            u \\<in> timpl_closure (Var y) TI\n 2. \\<And>TIa f T g S.\n       \\<lbrakk>\\<And>z yb.\n                   \\<lbrakk>z \\<in> set T; yb \\<in> set S;\n                    equal_mod_timpls TIa z yb;\n                    set TIa =\n                    {(a, b).\n                     (a, b) \\<in> TI\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>u.\n  u \\<in> timpl_closure z TI \\<and> u \\<in> timpl_closure yb TI;\n        equal_mod_timpls TIa (Fun f T) (Fun g S);\n        set TIa =\n        {(a, b). (a, b) \\<in> TI\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>u.\n                            u \\<in> timpl_closure (Fun f T) TI \\<and>\n                            u \\<in> timpl_closure (Fun g S) TI\n 3. \\<And>uu_ v va vb.\n       \\<lbrakk>equal_mod_timpls uu_ (Fun v va) (Var vb);\n        set uu_ =\n        {(a, b). (a, b) \\<in> TI\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>u.\n                            u \\<in> timpl_closure (Fun v va) TI \\<and>\n                            u \\<in> timpl_closure (Var vb) TI\n 4. \\<And>uu_ vb v va.\n       \\<lbrakk>equal_mod_timpls uu_ (Var vb) (Fun v va);\n        set uu_ =\n        {(a, b). (a, b) \\<in> TI\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>u.\n                            u \\<in> timpl_closure (Var vb) TI \\<and>\n                            u \\<in> timpl_closure (Fun v va) TI", "note 3 = in_set_conv_nth[of _ T] in_set_conv_nth[of _ S]"], ["proof (state)\nthis:\n  (?x \\<in> set T) = (\\<exists>i<length T. T ! i = ?x)\n  (?x \\<in> set S) = (\\<exists>i<length S. S ! i = ?x)\n\ngoal (4 subgoals):\n 1. \\<And>TIa x y.\n       \\<lbrakk>equal_mod_timpls TIa (Var x) (Var y);\n        set TIa =\n        {(a, b). (a, b) \\<in> TI\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>u.\n                            u \\<in> timpl_closure (Var x) TI \\<and>\n                            u \\<in> timpl_closure (Var y) TI\n 2. \\<And>TIa f T g S.\n       \\<lbrakk>\\<And>z yb.\n                   \\<lbrakk>z \\<in> set T; yb \\<in> set S;\n                    equal_mod_timpls TIa z yb;\n                    set TIa =\n                    {(a, b).\n                     (a, b) \\<in> TI\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>u.\n  u \\<in> timpl_closure z TI \\<and> u \\<in> timpl_closure yb TI;\n        equal_mod_timpls TIa (Fun f T) (Fun g S);\n        set TIa =\n        {(a, b). (a, b) \\<in> TI\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>u.\n                            u \\<in> timpl_closure (Fun f T) TI \\<and>\n                            u \\<in> timpl_closure (Fun g S) TI\n 3. \\<And>uu_ v va vb.\n       \\<lbrakk>equal_mod_timpls uu_ (Fun v va) (Var vb);\n        set uu_ =\n        {(a, b). (a, b) \\<in> TI\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>u.\n                            u \\<in> timpl_closure (Fun v va) TI \\<and>\n                            u \\<in> timpl_closure (Var vb) TI\n 4. \\<And>uu_ vb v va.\n       \\<lbrakk>equal_mod_timpls uu_ (Var vb) (Fun v va);\n        set uu_ =\n        {(a, b). (a, b) \\<in> TI\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>u.\n                            u \\<in> timpl_closure (Var vb) TI \\<and>\n                            u \\<in> timpl_closure (Fun v va) TI", "have 4: \"timpl_closure' (set TI') = timpl_closure' TI\""], ["proof (prove)\ngoal (1 subgoal):\n 1. timpl_closure' (set TI') = timpl_closure' TI", "using timpl_closure'_timpls_trancl_eq'[of TI] prems"], ["proof (prove)\nusing this:\n  timpl_closure' {(a, b). (a, b) \\<in> TI\\<^sup>+ \\<and> a \\<noteq> b} =\n  timpl_closure' TI\n  equal_mod_timpls TI' (Fun f T) (Fun g S)\n  set TI' =\n  {a. case a of\n      (a, b) \\<Rightarrow> (a, b) \\<in> TI\\<^sup>+ \\<and> a \\<noteq> b}\n\ngoal (1 subgoal):\n 1. timpl_closure' (set TI') = timpl_closure' TI", "by simp"], ["proof (state)\nthis:\n  timpl_closure' (set TI') = timpl_closure' TI\n\ngoal (4 subgoals):\n 1. \\<And>TIa x y.\n       \\<lbrakk>equal_mod_timpls TIa (Var x) (Var y);\n        set TIa =\n        {(a, b). (a, b) \\<in> TI\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>u.\n                            u \\<in> timpl_closure (Var x) TI \\<and>\n                            u \\<in> timpl_closure (Var y) TI\n 2. \\<And>TIa f T g S.\n       \\<lbrakk>\\<And>z yb.\n                   \\<lbrakk>z \\<in> set T; yb \\<in> set S;\n                    equal_mod_timpls TIa z yb;\n                    set TIa =\n                    {(a, b).\n                     (a, b) \\<in> TI\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>u.\n  u \\<in> timpl_closure z TI \\<and> u \\<in> timpl_closure yb TI;\n        equal_mod_timpls TIa (Fun f T) (Fun g S);\n        set TIa =\n        {(a, b). (a, b) \\<in> TI\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>u.\n                            u \\<in> timpl_closure (Fun f T) TI \\<and>\n                            u \\<in> timpl_closure (Fun g S) TI\n 3. \\<And>uu_ v va vb.\n       \\<lbrakk>equal_mod_timpls uu_ (Fun v va) (Var vb);\n        set uu_ =\n        {(a, b). (a, b) \\<in> TI\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>u.\n                            u \\<in> timpl_closure (Fun v va) TI \\<and>\n                            u \\<in> timpl_closure (Var vb) TI\n 4. \\<And>uu_ vb v va.\n       \\<lbrakk>equal_mod_timpls uu_ (Var vb) (Fun v va);\n        set uu_ =\n        {(a, b). (a, b) \\<in> TI\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>u.\n                            u \\<in> timpl_closure (Var vb) TI \\<and>\n                            u \\<in> timpl_closure (Fun v va) TI", "have IH: \"\\<exists>u. (T ! i, u) \\<in> timpl_closure' TI \\<and> (S ! i, u) \\<in> timpl_closure' TI\"\n      when i: \"i < length S\" for i"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>u.\n       (T ! i, u) \\<in> timpl_closure' TI \\<and>\n       (S ! i, u) \\<in> timpl_closure' TI", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>u.\n       (T ! i, u) \\<in> timpl_closure' TI \\<and>\n       (S ! i, u) \\<in> timpl_closure' TI", "have \"equal_mod_timpls TI' (T ! i) (S ! i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. equal_mod_timpls TI' (T ! i) (S ! i)", "using i 1"], ["proof (prove)\nusing this:\n  i < length S\n  length T = length S\n  \\<forall>i<length T. equal_mod_timpls TI' (T ! i) (S ! i)\n\ngoal (1 subgoal):\n 1. equal_mod_timpls TI' (T ! i) (S ! i)", "by presburger"], ["proof (state)\nthis:\n  equal_mod_timpls TI' (T ! i) (S ! i)\n\ngoal (1 subgoal):\n 1. \\<exists>u.\n       (T ! i, u) \\<in> timpl_closure' TI \\<and>\n       (S ! i, u) \\<in> timpl_closure' TI", "hence \"\\<exists>u. u \\<in> timpl_closure (T ! i) TI \\<and> u \\<in> timpl_closure (S ! i) TI\""], ["proof (prove)\nusing this:\n  equal_mod_timpls TI' (T ! i) (S ! i)\n\ngoal (1 subgoal):\n 1. \\<exists>u.\n       u \\<in> timpl_closure (T ! i) TI \\<and>\n       u \\<in> timpl_closure (S ! i) TI", "using IH[of \"T ! i\" \"S ! i\"] i 1(1) prems"], ["proof (prove)\nusing this:\n  equal_mod_timpls TI' (T ! i) (S ! i)\n  \\<lbrakk>T ! i \\<in> set T; S ! i \\<in> set S;\n   equal_mod_timpls TI' (T ! i) (S ! i);\n   set TI' =\n   {a. case a of\n       (a, b) \\<Rightarrow>\n         (a, b) \\<in> TI\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n  \\<Longrightarrow> \\<exists>u.\n                       u \\<in> timpl_closure (T ! i) TI \\<and>\n                       u \\<in> timpl_closure (S ! i) TI\n  i < length S\n  length T = length S\n  equal_mod_timpls TI' (Fun f T) (Fun g S)\n  set TI' =\n  {a. case a of\n      (a, b) \\<Rightarrow> (a, b) \\<in> TI\\<^sup>+ \\<and> a \\<noteq> b}\n\ngoal (1 subgoal):\n 1. \\<exists>u.\n       u \\<in> timpl_closure (T ! i) TI \\<and>\n       u \\<in> timpl_closure (S ! i) TI", "by force"], ["proof (state)\nthis:\n  \\<exists>u.\n     u \\<in> timpl_closure (T ! i) TI \\<and>\n     u \\<in> timpl_closure (S ! i) TI\n\ngoal (1 subgoal):\n 1. \\<exists>u.\n       (T ! i, u) \\<in> timpl_closure' TI \\<and>\n       (S ! i, u) \\<in> timpl_closure' TI", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>u.\n     u \\<in> timpl_closure (T ! i) TI \\<and>\n     u \\<in> timpl_closure (S ! i) TI\n\ngoal (1 subgoal):\n 1. \\<exists>u.\n       (T ! i, u) \\<in> timpl_closure' TI \\<and>\n       (S ! i, u) \\<in> timpl_closure' TI", "using 4"], ["proof (prove)\nusing this:\n  \\<exists>u.\n     u \\<in> timpl_closure (T ! i) TI \\<and>\n     u \\<in> timpl_closure (S ! i) TI\n  timpl_closure' (set TI') = timpl_closure' TI\n\ngoal (1 subgoal):\n 1. \\<exists>u.\n       (T ! i, u) \\<in> timpl_closure' TI \\<and>\n       (S ! i, u) \\<in> timpl_closure' TI", "unfolding 2"], ["proof (prove)\nusing this:\n  \\<exists>u.\n     (T ! i, u) \\<in> timpl_closure' TI \\<and>\n     (S ! i, u) \\<in> timpl_closure' TI\n  timpl_closure' (set TI') = timpl_closure' TI\n\ngoal (1 subgoal):\n 1. \\<exists>u.\n       (T ! i, u) \\<in> timpl_closure' TI \\<and>\n       (S ! i, u) \\<in> timpl_closure' TI", "by blast"], ["proof (state)\nthis:\n  \\<exists>u.\n     (T ! i, u) \\<in> timpl_closure' TI \\<and>\n     (S ! i, u) \\<in> timpl_closure' TI\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?i44 < length S \\<Longrightarrow>\n  \\<exists>u.\n     (T ! ?i44, u) \\<in> timpl_closure' TI \\<and>\n     (S ! ?i44, u) \\<in> timpl_closure' TI\n\ngoal (4 subgoals):\n 1. \\<And>TIa x y.\n       \\<lbrakk>equal_mod_timpls TIa (Var x) (Var y);\n        set TIa =\n        {(a, b). (a, b) \\<in> TI\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>u.\n                            u \\<in> timpl_closure (Var x) TI \\<and>\n                            u \\<in> timpl_closure (Var y) TI\n 2. \\<And>TIa f T g S.\n       \\<lbrakk>\\<And>z yb.\n                   \\<lbrakk>z \\<in> set T; yb \\<in> set S;\n                    equal_mod_timpls TIa z yb;\n                    set TIa =\n                    {(a, b).\n                     (a, b) \\<in> TI\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>u.\n  u \\<in> timpl_closure z TI \\<and> u \\<in> timpl_closure yb TI;\n        equal_mod_timpls TIa (Fun f T) (Fun g S);\n        set TIa =\n        {(a, b). (a, b) \\<in> TI\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>u.\n                            u \\<in> timpl_closure (Fun f T) TI \\<and>\n                            u \\<in> timpl_closure (Fun g S) TI\n 3. \\<And>uu_ v va vb.\n       \\<lbrakk>equal_mod_timpls uu_ (Fun v va) (Var vb);\n        set uu_ =\n        {(a, b). (a, b) \\<in> TI\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>u.\n                            u \\<in> timpl_closure (Fun v va) TI \\<and>\n                            u \\<in> timpl_closure (Var vb) TI\n 4. \\<And>uu_ vb v va.\n       \\<lbrakk>equal_mod_timpls uu_ (Var vb) (Fun v va);\n        set uu_ =\n        {(a, b). (a, b) \\<in> TI\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>u.\n                            u \\<in> timpl_closure (Var vb) TI \\<and>\n                            u \\<in> timpl_closure (Fun v va) TI", "let ?P = \"\\<lambda>G. f = g \\<or> (\\<exists>a b. (a, b) \\<in> G \\<and> f = Abs a \\<and> g = Abs b) \\<or>\n                   (\\<exists>a b. (a, b) \\<in> G \\<and> f = Abs b \\<and> g = Abs a) \\<or>\n                   (\\<exists>a b c. (a, c) \\<in> G \\<and> (b, c) \\<in> G \\<and> f = Abs a \\<and> g = Abs b)\""], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>TIa x y.\n       \\<lbrakk>equal_mod_timpls TIa (Var x) (Var y);\n        set TIa =\n        {(a, b). (a, b) \\<in> TI\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>u.\n                            u \\<in> timpl_closure (Var x) TI \\<and>\n                            u \\<in> timpl_closure (Var y) TI\n 2. \\<And>TIa f T g S.\n       \\<lbrakk>\\<And>z yb.\n                   \\<lbrakk>z \\<in> set T; yb \\<in> set S;\n                    equal_mod_timpls TIa z yb;\n                    set TIa =\n                    {(a, b).\n                     (a, b) \\<in> TI\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>u.\n  u \\<in> timpl_closure z TI \\<and> u \\<in> timpl_closure yb TI;\n        equal_mod_timpls TIa (Fun f T) (Fun g S);\n        set TIa =\n        {(a, b). (a, b) \\<in> TI\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>u.\n                            u \\<in> timpl_closure (Fun f T) TI \\<and>\n                            u \\<in> timpl_closure (Fun g S) TI\n 3. \\<And>uu_ v va vb.\n       \\<lbrakk>equal_mod_timpls uu_ (Fun v va) (Var vb);\n        set uu_ =\n        {(a, b). (a, b) \\<in> TI\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>u.\n                            u \\<in> timpl_closure (Fun v va) TI \\<and>\n                            u \\<in> timpl_closure (Var vb) TI\n 4. \\<And>uu_ vb v va.\n       \\<lbrakk>equal_mod_timpls uu_ (Var vb) (Fun v va);\n        set uu_ =\n        {(a, b). (a, b) \\<in> TI\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>u.\n                            u \\<in> timpl_closure (Var vb) TI \\<and>\n                            u \\<in> timpl_closure (Fun v va) TI", "have \"?P (set TI')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f = g \\<or>\n    (\\<exists>a b.\n        (a, b) \\<in> set TI' \\<and> f = Abs a \\<and> g = Abs b) \\<or>\n    (\\<exists>a b.\n        (a, b) \\<in> set TI' \\<and> f = Abs b \\<and> g = Abs a) \\<or>\n    (\\<exists>a b c.\n        (a, c) \\<in> set TI' \\<and>\n        (b, c) \\<in> set TI' \\<and> f = Abs a \\<and> g = Abs b)", "using prems the_Abs_def[of f] the_Abs_def[of g] is_Abs_def[of f] is_Abs_def[of g]"], ["proof (prove)\nusing this:\n  equal_mod_timpls TI' (Fun f T) (Fun g S)\n  set TI' =\n  {a. case a of\n      (a, b) \\<Rightarrow> (a, b) \\<in> TI\\<^sup>+ \\<and> a \\<noteq> b}\n  the_Abs f = (case f of Abs x4 \\<Rightarrow> x4)\n  the_Abs g = (case g of Abs x4 \\<Rightarrow> x4)\n  is_Abs f = (\\<exists>x4. f = Abs x4)\n  is_Abs g = (\\<exists>x4. g = Abs x4)\n\ngoal (1 subgoal):\n 1. f = g \\<or>\n    (\\<exists>a b.\n        (a, b) \\<in> set TI' \\<and> f = Abs a \\<and> g = Abs b) \\<or>\n    (\\<exists>a b.\n        (a, b) \\<in> set TI' \\<and> f = Abs b \\<and> g = Abs a) \\<or>\n    (\\<exists>a b c.\n        (a, c) \\<in> set TI' \\<and>\n        (b, c) \\<in> set TI' \\<and> f = Abs a \\<and> g = Abs b)", "by fastforce"], ["proof (state)\nthis:\n  f = g \\<or>\n  (\\<exists>a b.\n      (a, b) \\<in> set TI' \\<and> f = Abs a \\<and> g = Abs b) \\<or>\n  (\\<exists>a b.\n      (a, b) \\<in> set TI' \\<and> f = Abs b \\<and> g = Abs a) \\<or>\n  (\\<exists>a b c.\n      (a, c) \\<in> set TI' \\<and>\n      (b, c) \\<in> set TI' \\<and> f = Abs a \\<and> g = Abs b)\n\ngoal (4 subgoals):\n 1. \\<And>TIa x y.\n       \\<lbrakk>equal_mod_timpls TIa (Var x) (Var y);\n        set TIa =\n        {(a, b). (a, b) \\<in> TI\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>u.\n                            u \\<in> timpl_closure (Var x) TI \\<and>\n                            u \\<in> timpl_closure (Var y) TI\n 2. \\<And>TIa f T g S.\n       \\<lbrakk>\\<And>z yb.\n                   \\<lbrakk>z \\<in> set T; yb \\<in> set S;\n                    equal_mod_timpls TIa z yb;\n                    set TIa =\n                    {(a, b).\n                     (a, b) \\<in> TI\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>u.\n  u \\<in> timpl_closure z TI \\<and> u \\<in> timpl_closure yb TI;\n        equal_mod_timpls TIa (Fun f T) (Fun g S);\n        set TIa =\n        {(a, b). (a, b) \\<in> TI\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>u.\n                            u \\<in> timpl_closure (Fun f T) TI \\<and>\n                            u \\<in> timpl_closure (Fun g S) TI\n 3. \\<And>uu_ v va vb.\n       \\<lbrakk>equal_mod_timpls uu_ (Fun v va) (Var vb);\n        set uu_ =\n        {(a, b). (a, b) \\<in> TI\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>u.\n                            u \\<in> timpl_closure (Fun v va) TI \\<and>\n                            u \\<in> timpl_closure (Var vb) TI\n 4. \\<And>uu_ vb v va.\n       \\<lbrakk>equal_mod_timpls uu_ (Var vb) (Fun v va);\n        set uu_ =\n        {(a, b). (a, b) \\<in> TI\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>u.\n                            u \\<in> timpl_closure (Var vb) TI \\<and>\n                            u \\<in> timpl_closure (Fun v va) TI", "hence \"?P (TI\\<^sup>+)\""], ["proof (prove)\nusing this:\n  f = g \\<or>\n  (\\<exists>a b.\n      (a, b) \\<in> set TI' \\<and> f = Abs a \\<and> g = Abs b) \\<or>\n  (\\<exists>a b.\n      (a, b) \\<in> set TI' \\<and> f = Abs b \\<and> g = Abs a) \\<or>\n  (\\<exists>a b c.\n      (a, c) \\<in> set TI' \\<and>\n      (b, c) \\<in> set TI' \\<and> f = Abs a \\<and> g = Abs b)\n\ngoal (1 subgoal):\n 1. f = g \\<or>\n    (\\<exists>a b.\n        (a, b) \\<in> TI\\<^sup>+ \\<and> f = Abs a \\<and> g = Abs b) \\<or>\n    (\\<exists>a b.\n        (a, b) \\<in> TI\\<^sup>+ \\<and> f = Abs b \\<and> g = Abs a) \\<or>\n    (\\<exists>a b c.\n        (a, c) \\<in> TI\\<^sup>+ \\<and>\n        (b, c) \\<in> TI\\<^sup>+ \\<and> f = Abs a \\<and> g = Abs b)", "unfolding prems"], ["proof (prove)\nusing this:\n  f = g \\<or>\n  (\\<exists>a b.\n      (a, b)\n      \\<in> {(a, b). (a, b) \\<in> TI\\<^sup>+ \\<and> a \\<noteq> b} \\<and>\n      f = Abs a \\<and> g = Abs b) \\<or>\n  (\\<exists>a b.\n      (a, b)\n      \\<in> {(a, b). (a, b) \\<in> TI\\<^sup>+ \\<and> a \\<noteq> b} \\<and>\n      f = Abs b \\<and> g = Abs a) \\<or>\n  (\\<exists>a b c.\n      (a, c)\n      \\<in> {(a, b). (a, b) \\<in> TI\\<^sup>+ \\<and> a \\<noteq> b} \\<and>\n      (b, c)\n      \\<in> {(a, b). (a, b) \\<in> TI\\<^sup>+ \\<and> a \\<noteq> b} \\<and>\n      f = Abs a \\<and> g = Abs b)\n\ngoal (1 subgoal):\n 1. f = g \\<or>\n    (\\<exists>a b.\n        (a, b) \\<in> TI\\<^sup>+ \\<and> f = Abs a \\<and> g = Abs b) \\<or>\n    (\\<exists>a b.\n        (a, b) \\<in> TI\\<^sup>+ \\<and> f = Abs b \\<and> g = Abs a) \\<or>\n    (\\<exists>a b c.\n        (a, c) \\<in> TI\\<^sup>+ \\<and>\n        (b, c) \\<in> TI\\<^sup>+ \\<and> f = Abs a \\<and> g = Abs b)", "by blast"], ["proof (state)\nthis:\n  f = g \\<or>\n  (\\<exists>a b.\n      (a, b) \\<in> TI\\<^sup>+ \\<and> f = Abs a \\<and> g = Abs b) \\<or>\n  (\\<exists>a b.\n      (a, b) \\<in> TI\\<^sup>+ \\<and> f = Abs b \\<and> g = Abs a) \\<or>\n  (\\<exists>a b c.\n      (a, c) \\<in> TI\\<^sup>+ \\<and>\n      (b, c) \\<in> TI\\<^sup>+ \\<and> f = Abs a \\<and> g = Abs b)\n\ngoal (4 subgoals):\n 1. \\<And>TIa x y.\n       \\<lbrakk>equal_mod_timpls TIa (Var x) (Var y);\n        set TIa =\n        {(a, b). (a, b) \\<in> TI\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>u.\n                            u \\<in> timpl_closure (Var x) TI \\<and>\n                            u \\<in> timpl_closure (Var y) TI\n 2. \\<And>TIa f T g S.\n       \\<lbrakk>\\<And>z yb.\n                   \\<lbrakk>z \\<in> set T; yb \\<in> set S;\n                    equal_mod_timpls TIa z yb;\n                    set TIa =\n                    {(a, b).\n                     (a, b) \\<in> TI\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>u.\n  u \\<in> timpl_closure z TI \\<and> u \\<in> timpl_closure yb TI;\n        equal_mod_timpls TIa (Fun f T) (Fun g S);\n        set TIa =\n        {(a, b). (a, b) \\<in> TI\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>u.\n                            u \\<in> timpl_closure (Fun f T) TI \\<and>\n                            u \\<in> timpl_closure (Fun g S) TI\n 3. \\<And>uu_ v va vb.\n       \\<lbrakk>equal_mod_timpls uu_ (Fun v va) (Var vb);\n        set uu_ =\n        {(a, b). (a, b) \\<in> TI\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>u.\n                            u \\<in> timpl_closure (Fun v va) TI \\<and>\n                            u \\<in> timpl_closure (Var vb) TI\n 4. \\<And>uu_ vb v va.\n       \\<lbrakk>equal_mod_timpls uu_ (Var vb) (Fun v va);\n        set uu_ =\n        {(a, b). (a, b) \\<in> TI\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>u.\n                            u \\<in> timpl_closure (Var vb) TI \\<and>\n                            u \\<in> timpl_closure (Fun v va) TI", "hence \"?P (rtrancl TI)\""], ["proof (prove)\nusing this:\n  f = g \\<or>\n  (\\<exists>a b.\n      (a, b) \\<in> TI\\<^sup>+ \\<and> f = Abs a \\<and> g = Abs b) \\<or>\n  (\\<exists>a b.\n      (a, b) \\<in> TI\\<^sup>+ \\<and> f = Abs b \\<and> g = Abs a) \\<or>\n  (\\<exists>a b c.\n      (a, c) \\<in> TI\\<^sup>+ \\<and>\n      (b, c) \\<in> TI\\<^sup>+ \\<and> f = Abs a \\<and> g = Abs b)\n\ngoal (1 subgoal):\n 1. f = g \\<or>\n    (\\<exists>a b.\n        (a, b) \\<in> TI\\<^sup>* \\<and> f = Abs a \\<and> g = Abs b) \\<or>\n    (\\<exists>a b.\n        (a, b) \\<in> TI\\<^sup>* \\<and> f = Abs b \\<and> g = Abs a) \\<or>\n    (\\<exists>a b c.\n        (a, c) \\<in> TI\\<^sup>* \\<and>\n        (b, c) \\<in> TI\\<^sup>* \\<and> f = Abs a \\<and> g = Abs b)", "by (metis (no_types, lifting) trancl_into_rtrancl)"], ["proof (state)\nthis:\n  f = g \\<or>\n  (\\<exists>a b.\n      (a, b) \\<in> TI\\<^sup>* \\<and> f = Abs a \\<and> g = Abs b) \\<or>\n  (\\<exists>a b.\n      (a, b) \\<in> TI\\<^sup>* \\<and> f = Abs b \\<and> g = Abs a) \\<or>\n  (\\<exists>a b c.\n      (a, c) \\<in> TI\\<^sup>* \\<and>\n      (b, c) \\<in> TI\\<^sup>* \\<and> f = Abs a \\<and> g = Abs b)\n\ngoal (4 subgoals):\n 1. \\<And>TIa x y.\n       \\<lbrakk>equal_mod_timpls TIa (Var x) (Var y);\n        set TIa =\n        {(a, b). (a, b) \\<in> TI\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>u.\n                            u \\<in> timpl_closure (Var x) TI \\<and>\n                            u \\<in> timpl_closure (Var y) TI\n 2. \\<And>TIa f T g S.\n       \\<lbrakk>\\<And>z yb.\n                   \\<lbrakk>z \\<in> set T; yb \\<in> set S;\n                    equal_mod_timpls TIa z yb;\n                    set TIa =\n                    {(a, b).\n                     (a, b) \\<in> TI\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>u.\n  u \\<in> timpl_closure z TI \\<and> u \\<in> timpl_closure yb TI;\n        equal_mod_timpls TIa (Fun f T) (Fun g S);\n        set TIa =\n        {(a, b). (a, b) \\<in> TI\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>u.\n                            u \\<in> timpl_closure (Fun f T) TI \\<and>\n                            u \\<in> timpl_closure (Fun g S) TI\n 3. \\<And>uu_ v va vb.\n       \\<lbrakk>equal_mod_timpls uu_ (Fun v va) (Var vb);\n        set uu_ =\n        {(a, b). (a, b) \\<in> TI\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>u.\n                            u \\<in> timpl_closure (Fun v va) TI \\<and>\n                            u \\<in> timpl_closure (Var vb) TI\n 4. \\<And>uu_ vb v va.\n       \\<lbrakk>equal_mod_timpls uu_ (Var vb) (Fun v va);\n        set uu_ =\n        {(a, b). (a, b) \\<in> TI\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>u.\n                            u \\<in> timpl_closure (Var vb) TI \\<and>\n                            u \\<in> timpl_closure (Fun v va) TI", "hence 5: \"f = g \\<or> (\\<exists>a b c. (a, c) \\<in> TI\\<^sup>* \\<and> (b, c) \\<in> TI\\<^sup>* \\<and> f = Abs a \\<and> g = Abs b)\""], ["proof (prove)\nusing this:\n  f = g \\<or>\n  (\\<exists>a b.\n      (a, b) \\<in> TI\\<^sup>* \\<and> f = Abs a \\<and> g = Abs b) \\<or>\n  (\\<exists>a b.\n      (a, b) \\<in> TI\\<^sup>* \\<and> f = Abs b \\<and> g = Abs a) \\<or>\n  (\\<exists>a b c.\n      (a, c) \\<in> TI\\<^sup>* \\<and>\n      (b, c) \\<in> TI\\<^sup>* \\<and> f = Abs a \\<and> g = Abs b)\n\ngoal (1 subgoal):\n 1. f = g \\<or>\n    (\\<exists>a b c.\n        (a, c) \\<in> TI\\<^sup>* \\<and>\n        (b, c) \\<in> TI\\<^sup>* \\<and> f = Abs a \\<and> g = Abs b)", "by blast"], ["proof (state)\nthis:\n  f = g \\<or>\n  (\\<exists>a b c.\n      (a, c) \\<in> TI\\<^sup>* \\<and>\n      (b, c) \\<in> TI\\<^sup>* \\<and> f = Abs a \\<and> g = Abs b)\n\ngoal (4 subgoals):\n 1. \\<And>TIa x y.\n       \\<lbrakk>equal_mod_timpls TIa (Var x) (Var y);\n        set TIa =\n        {(a, b). (a, b) \\<in> TI\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>u.\n                            u \\<in> timpl_closure (Var x) TI \\<and>\n                            u \\<in> timpl_closure (Var y) TI\n 2. \\<And>TIa f T g S.\n       \\<lbrakk>\\<And>z yb.\n                   \\<lbrakk>z \\<in> set T; yb \\<in> set S;\n                    equal_mod_timpls TIa z yb;\n                    set TIa =\n                    {(a, b).\n                     (a, b) \\<in> TI\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>u.\n  u \\<in> timpl_closure z TI \\<and> u \\<in> timpl_closure yb TI;\n        equal_mod_timpls TIa (Fun f T) (Fun g S);\n        set TIa =\n        {(a, b). (a, b) \\<in> TI\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>u.\n                            u \\<in> timpl_closure (Fun f T) TI \\<and>\n                            u \\<in> timpl_closure (Fun g S) TI\n 3. \\<And>uu_ v va vb.\n       \\<lbrakk>equal_mod_timpls uu_ (Fun v va) (Var vb);\n        set uu_ =\n        {(a, b). (a, b) \\<in> TI\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>u.\n                            u \\<in> timpl_closure (Fun v va) TI \\<and>\n                            u \\<in> timpl_closure (Var vb) TI\n 4. \\<And>uu_ vb v va.\n       \\<lbrakk>equal_mod_timpls uu_ (Var vb) (Fun v va);\n        set uu_ =\n        {(a, b). (a, b) \\<in> TI\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>u.\n                            u \\<in> timpl_closure (Var vb) TI \\<and>\n                            u \\<in> timpl_closure (Fun v va) TI", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>u.\n       u \\<in> timpl_closure (Fun f T) TI \\<and>\n       u \\<in> timpl_closure (Fun g S) TI", "using timpl_closure_FunI3[OF _ 1(1) 5]  IH 1(1)"], ["proof (prove)\nusing this:\n  (\\<And>i.\n      i < length T \\<Longrightarrow>\n      \\<exists>u.\n         (T ! i, u) \\<in> timpl_closure' (TI\\<^sup>*) \\<and>\n         (S ! i, u) \\<in> timpl_closure' (TI\\<^sup>*)) \\<Longrightarrow>\n  \\<exists>h U.\n     (Fun f T, Fun h U) \\<in> timpl_closure' (TI\\<^sup>*) \\<and>\n     (Fun g S, Fun h U) \\<in> timpl_closure' (TI\\<^sup>*)\n  ?i44 < length S \\<Longrightarrow>\n  \\<exists>u.\n     (T ! ?i44, u) \\<in> timpl_closure' TI \\<and>\n     (S ! ?i44, u) \\<in> timpl_closure' TI\n  length T = length S\n\ngoal (1 subgoal):\n 1. \\<exists>u.\n       u \\<in> timpl_closure (Fun f T) TI \\<and>\n       u \\<in> timpl_closure (Fun g S) TI", "unfolding timpl_closure'_timpls_rtrancl_eq 2"], ["proof (prove)\nusing this:\n  (\\<And>i.\n      i < length T \\<Longrightarrow>\n      \\<exists>u.\n         (T ! i, u) \\<in> timpl_closure' TI \\<and>\n         (S ! i, u) \\<in> timpl_closure' TI) \\<Longrightarrow>\n  \\<exists>h U.\n     (Fun f T, Fun h U) \\<in> timpl_closure' TI \\<and>\n     (Fun g S, Fun h U) \\<in> timpl_closure' TI\n  ?i44 < length S \\<Longrightarrow>\n  \\<exists>u.\n     (T ! ?i44, u) \\<in> timpl_closure' TI \\<and>\n     (S ! ?i44, u) \\<in> timpl_closure' TI\n  length T = length S\n\ngoal (1 subgoal):\n 1. \\<exists>u.\n       (Fun f T, u) \\<in> timpl_closure' TI \\<and>\n       (Fun g S, u) \\<in> timpl_closure' TI", "by auto"], ["proof (state)\nthis:\n  \\<exists>u.\n     u \\<in> timpl_closure (Fun f T) TI \\<and>\n     u \\<in> timpl_closure (Fun g S) TI\n\ngoal (3 subgoals):\n 1. \\<And>TIa x y.\n       \\<lbrakk>equal_mod_timpls TIa (Var x) (Var y);\n        set TIa =\n        {(a, b). (a, b) \\<in> TI\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>u.\n                            u \\<in> timpl_closure (Var x) TI \\<and>\n                            u \\<in> timpl_closure (Var y) TI\n 2. \\<And>uu_ v va vb.\n       \\<lbrakk>equal_mod_timpls uu_ (Fun v va) (Var vb);\n        set uu_ =\n        {(a, b). (a, b) \\<in> TI\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>u.\n                            u \\<in> timpl_closure (Fun v va) TI \\<and>\n                            u \\<in> timpl_closure (Var vb) TI\n 3. \\<And>uu_ vb v va.\n       \\<lbrakk>equal_mod_timpls uu_ (Var vb) (Fun v va);\n        set uu_ =\n        {(a, b). (a, b) \\<in> TI\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>u.\n                            u \\<in> timpl_closure (Var vb) TI \\<and>\n                            u \\<in> timpl_closure (Fun v va) TI", "qed (use timpl_closure.FP in auto)"], ["proof (state)\nthis:\n  equal_mod_timpls TI' s t \\<Longrightarrow>\n  \\<exists>u. u \\<in> timpl_closure s TI \\<and> u \\<in> timpl_closure t TI\n\ngoal (1 subgoal):\n 1. \\<exists>u.\n       u \\<in> timpl_closure s TI \\<and>\n       u \\<in> timpl_closure t TI \\<Longrightarrow>\n    equal_mod_timpls TI' s t", "show \"?A s t\" when B: \"?B s t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. equal_mod_timpls TI' s t", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. equal_mod_timpls TI' s t", "obtain u where u: \"u \\<in> timpl_closure s TI\" \"u \\<in> timpl_closure t TI\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>u.\n        \\<lbrakk>u \\<in> timpl_closure s TI;\n         u \\<in> timpl_closure t TI\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using B"], ["proof (prove)\nusing this:\n  \\<exists>u. u \\<in> timpl_closure s TI \\<and> u \\<in> timpl_closure t TI\n\ngoal (1 subgoal):\n 1. (\\<And>u.\n        \\<lbrakk>u \\<in> timpl_closure s TI;\n         u \\<in> timpl_closure t TI\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by moura"], ["proof (state)\nthis:\n  u \\<in> timpl_closure s TI\n  u \\<in> timpl_closure t TI\n\ngoal (1 subgoal):\n 1. equal_mod_timpls TI' s t", "thus ?thesis"], ["proof (prove)\nusing this:\n  u \\<in> timpl_closure s TI\n  u \\<in> timpl_closure t TI\n\ngoal (1 subgoal):\n 1. equal_mod_timpls TI' s t", "using assms"], ["proof (prove)\nusing this:\n  u \\<in> timpl_closure s TI\n  u \\<in> timpl_closure t TI\n  set TI' = {(a, b). (a, b) \\<in> TI\\<^sup>+ \\<and> a \\<noteq> b}\n\ngoal (1 subgoal):\n 1. equal_mod_timpls TI' s t", "proof (induction u arbitrary: s t rule: term.induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x s t.\n       \\<lbrakk>Var x \\<in> timpl_closure s TI;\n        Var x \\<in> timpl_closure t TI;\n        set TI' =\n        {(a, b). (a, b) \\<in> TI\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n       \\<Longrightarrow> equal_mod_timpls TI' s t\n 2. \\<And>x1a x2 s t.\n       \\<lbrakk>\\<And>x2a s t.\n                   \\<lbrakk>x2a \\<in> set x2; x2a \\<in> timpl_closure s TI;\n                    x2a \\<in> timpl_closure t TI;\n                    set TI' =\n                    {(a, b).\n                     (a, b) \\<in> TI\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n                   \\<Longrightarrow> equal_mod_timpls TI' s t;\n        Fun x1a x2 \\<in> timpl_closure s TI;\n        Fun x1a x2 \\<in> timpl_closure t TI;\n        set TI' =\n        {(a, b). (a, b) \\<in> TI\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n       \\<Longrightarrow> equal_mod_timpls TI' s t", "case (Var x s t)"], ["proof (state)\nthis:\n  Var x \\<in> timpl_closure s TI\n  Var x \\<in> timpl_closure t TI\n  set TI' =\n  {a. case a of\n      (a, b) \\<Rightarrow> (a, b) \\<in> TI\\<^sup>+ \\<and> a \\<noteq> b}\n\ngoal (2 subgoals):\n 1. \\<And>x s t.\n       \\<lbrakk>Var x \\<in> timpl_closure s TI;\n        Var x \\<in> timpl_closure t TI;\n        set TI' =\n        {(a, b). (a, b) \\<in> TI\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n       \\<Longrightarrow> equal_mod_timpls TI' s t\n 2. \\<And>x1a x2 s t.\n       \\<lbrakk>\\<And>x2a s t.\n                   \\<lbrakk>x2a \\<in> set x2; x2a \\<in> timpl_closure s TI;\n                    x2a \\<in> timpl_closure t TI;\n                    set TI' =\n                    {(a, b).\n                     (a, b) \\<in> TI\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n                   \\<Longrightarrow> equal_mod_timpls TI' s t;\n        Fun x1a x2 \\<in> timpl_closure s TI;\n        Fun x1a x2 \\<in> timpl_closure t TI;\n        set TI' =\n        {(a, b). (a, b) \\<in> TI\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n       \\<Longrightarrow> equal_mod_timpls TI' s t", "thus ?case"], ["proof (prove)\nusing this:\n  Var x \\<in> timpl_closure s TI\n  Var x \\<in> timpl_closure t TI\n  set TI' =\n  {a. case a of\n      (a, b) \\<Rightarrow> (a, b) \\<in> TI\\<^sup>+ \\<and> a \\<noteq> b}\n\ngoal (1 subgoal):\n 1. equal_mod_timpls TI' s t", "using timpl_closure_Var_in_iff[of x s TI]\n              timpl_closure_Var_in_iff[of x t TI]\n              equal_mod_timpls.simps(1)[of TI' x x]"], ["proof (prove)\nusing this:\n  Var x \\<in> timpl_closure s TI\n  Var x \\<in> timpl_closure t TI\n  set TI' =\n  {a. case a of\n      (a, b) \\<Rightarrow> (a, b) \\<in> TI\\<^sup>+ \\<and> a \\<noteq> b}\n  (Var x \\<in> timpl_closure s TI) = (s = Var x)\n  (Var x \\<in> timpl_closure t TI) = (t = Var x)\n  equal_mod_timpls TI' (Var x) (Var x) = (x = x)\n\ngoal (1 subgoal):\n 1. equal_mod_timpls TI' s t", "by blast"], ["proof (state)\nthis:\n  equal_mod_timpls TI' s t\n\ngoal (1 subgoal):\n 1. \\<And>x1a x2 s t.\n       \\<lbrakk>\\<And>x2a s t.\n                   \\<lbrakk>x2a \\<in> set x2; x2a \\<in> timpl_closure s TI;\n                    x2a \\<in> timpl_closure t TI;\n                    set TI' =\n                    {(a, b).\n                     (a, b) \\<in> TI\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n                   \\<Longrightarrow> equal_mod_timpls TI' s t;\n        Fun x1a x2 \\<in> timpl_closure s TI;\n        Fun x1a x2 \\<in> timpl_closure t TI;\n        set TI' =\n        {(a, b). (a, b) \\<in> TI\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n       \\<Longrightarrow> equal_mod_timpls TI' s t", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x1a x2 s t.\n       \\<lbrakk>\\<And>x2a s t.\n                   \\<lbrakk>x2a \\<in> set x2; x2a \\<in> timpl_closure s TI;\n                    x2a \\<in> timpl_closure t TI;\n                    set TI' =\n                    {(a, b).\n                     (a, b) \\<in> TI\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n                   \\<Longrightarrow> equal_mod_timpls TI' s t;\n        Fun x1a x2 \\<in> timpl_closure s TI;\n        Fun x1a x2 \\<in> timpl_closure t TI;\n        set TI' =\n        {(a, b). (a, b) \\<in> TI\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n       \\<Longrightarrow> equal_mod_timpls TI' s t", "case (Fun f U s t)"], ["proof (state)\nthis:\n  \\<lbrakk>?x2a43 \\<in> set U; ?x2a43 \\<in> timpl_closure ?s43 TI;\n   ?x2a43 \\<in> timpl_closure ?t43 TI;\n   set TI' =\n   {a. case a of\n       (a, b) \\<Rightarrow>\n         (a, b) \\<in> TI\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n  \\<Longrightarrow> equal_mod_timpls TI' ?s43 ?t43\n  Fun f U \\<in> timpl_closure s TI\n  Fun f U \\<in> timpl_closure t TI\n  set TI' =\n  {a. case a of\n      (a, b) \\<Rightarrow> (a, b) \\<in> TI\\<^sup>+ \\<and> a \\<noteq> b}\n\ngoal (1 subgoal):\n 1. \\<And>x1a x2 s t.\n       \\<lbrakk>\\<And>x2a s t.\n                   \\<lbrakk>x2a \\<in> set x2; x2a \\<in> timpl_closure s TI;\n                    x2a \\<in> timpl_closure t TI;\n                    set TI' =\n                    {(a, b).\n                     (a, b) \\<in> TI\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n                   \\<Longrightarrow> equal_mod_timpls TI' s t;\n        Fun x1a x2 \\<in> timpl_closure s TI;\n        Fun x1a x2 \\<in> timpl_closure t TI;\n        set TI' =\n        {(a, b). (a, b) \\<in> TI\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n       \\<Longrightarrow> equal_mod_timpls TI' s t", "obtain g S where s:\n          \"s = Fun g S\" \"length U = length S\"\n          \"\\<And>i. i < length U \\<Longrightarrow> U ! i \\<in> timpl_closure (S ! i) TI\"\n          \"g \\<noteq> f \\<Longrightarrow> is_Abs g \\<and> is_Abs f \\<and> (the_Abs g, the_Abs f) \\<in> TI\\<^sup>+\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>g S.\n        \\<lbrakk>s = Fun g S; length U = length S;\n         \\<And>i.\n            i < length U \\<Longrightarrow>\n            U ! i \\<in> timpl_closure (S ! i) TI;\n         g \\<noteq> f \\<Longrightarrow>\n         is_Abs g \\<and>\n         is_Abs f \\<and> (the_Abs g, the_Abs f) \\<in> TI\\<^sup>+\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using Fun.prems(1) timpl_closure_Fun_inv'[of f U _ _ TI]"], ["proof (prove)\nusing this:\n  Fun f U \\<in> timpl_closure s TI\n  Fun f U \\<in> timpl_closure (Fun ?f ?T) TI \\<Longrightarrow>\n  length U = length ?T\n  \\<lbrakk>Fun f U \\<in> timpl_closure (Fun ?f ?T) TI;\n   ?i < length U\\<rbrakk>\n  \\<Longrightarrow> U ! ?i \\<in> timpl_closure (?T ! ?i) TI\n  \\<lbrakk>Fun f U \\<in> timpl_closure (Fun ?f ?T) TI;\n   ?f \\<noteq> f\\<rbrakk>\n  \\<Longrightarrow> is_Abs ?f \\<and>\n                    is_Abs f \\<and> (the_Abs ?f, the_Abs f) \\<in> TI\\<^sup>+\n\ngoal (1 subgoal):\n 1. (\\<And>g S.\n        \\<lbrakk>s = Fun g S; length U = length S;\n         \\<And>i.\n            i < length U \\<Longrightarrow>\n            U ! i \\<in> timpl_closure (S ! i) TI;\n         g \\<noteq> f \\<Longrightarrow>\n         is_Abs g \\<and>\n         is_Abs f \\<and> (the_Abs g, the_Abs f) \\<in> TI\\<^sup>+\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases s) auto"], ["proof (state)\nthis:\n  s = Fun g S\n  length U = length S\n  ?i43 < length U \\<Longrightarrow>\n  U ! ?i43 \\<in> timpl_closure (S ! ?i43) TI\n  g \\<noteq> f \\<Longrightarrow>\n  is_Abs g \\<and> is_Abs f \\<and> (the_Abs g, the_Abs f) \\<in> TI\\<^sup>+\n\ngoal (1 subgoal):\n 1. \\<And>x1a x2 s t.\n       \\<lbrakk>\\<And>x2a s t.\n                   \\<lbrakk>x2a \\<in> set x2; x2a \\<in> timpl_closure s TI;\n                    x2a \\<in> timpl_closure t TI;\n                    set TI' =\n                    {(a, b).\n                     (a, b) \\<in> TI\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n                   \\<Longrightarrow> equal_mod_timpls TI' s t;\n        Fun x1a x2 \\<in> timpl_closure s TI;\n        Fun x1a x2 \\<in> timpl_closure t TI;\n        set TI' =\n        {(a, b). (a, b) \\<in> TI\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n       \\<Longrightarrow> equal_mod_timpls TI' s t", "obtain h T where t:\n          \"t = Fun h T\" \"length U = length T\"\n          \"\\<And>i. i < length U \\<Longrightarrow> U ! i \\<in> timpl_closure (T ! i) TI\"\n          \"h \\<noteq> f \\<Longrightarrow> is_Abs h \\<and> is_Abs f \\<and> (the_Abs h, the_Abs f) \\<in> TI\\<^sup>+\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>h T.\n        \\<lbrakk>t = Fun h T; length U = length T;\n         \\<And>i.\n            i < length U \\<Longrightarrow>\n            U ! i \\<in> timpl_closure (T ! i) TI;\n         h \\<noteq> f \\<Longrightarrow>\n         is_Abs h \\<and>\n         is_Abs f \\<and> (the_Abs h, the_Abs f) \\<in> TI\\<^sup>+\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using Fun.prems(2) timpl_closure_Fun_inv'[of f U _ _ TI]"], ["proof (prove)\nusing this:\n  Fun f U \\<in> timpl_closure t TI\n  Fun f U \\<in> timpl_closure (Fun ?f ?T) TI \\<Longrightarrow>\n  length U = length ?T\n  \\<lbrakk>Fun f U \\<in> timpl_closure (Fun ?f ?T) TI;\n   ?i < length U\\<rbrakk>\n  \\<Longrightarrow> U ! ?i \\<in> timpl_closure (?T ! ?i) TI\n  \\<lbrakk>Fun f U \\<in> timpl_closure (Fun ?f ?T) TI;\n   ?f \\<noteq> f\\<rbrakk>\n  \\<Longrightarrow> is_Abs ?f \\<and>\n                    is_Abs f \\<and> (the_Abs ?f, the_Abs f) \\<in> TI\\<^sup>+\n\ngoal (1 subgoal):\n 1. (\\<And>h T.\n        \\<lbrakk>t = Fun h T; length U = length T;\n         \\<And>i.\n            i < length U \\<Longrightarrow>\n            U ! i \\<in> timpl_closure (T ! i) TI;\n         h \\<noteq> f \\<Longrightarrow>\n         is_Abs h \\<and>\n         is_Abs f \\<and> (the_Abs h, the_Abs f) \\<in> TI\\<^sup>+\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases t) auto"], ["proof (state)\nthis:\n  t = Fun h T\n  length U = length T\n  ?i43 < length U \\<Longrightarrow>\n  U ! ?i43 \\<in> timpl_closure (T ! ?i43) TI\n  h \\<noteq> f \\<Longrightarrow>\n  is_Abs h \\<and> is_Abs f \\<and> (the_Abs h, the_Abs f) \\<in> TI\\<^sup>+\n\ngoal (1 subgoal):\n 1. \\<And>x1a x2 s t.\n       \\<lbrakk>\\<And>x2a s t.\n                   \\<lbrakk>x2a \\<in> set x2; x2a \\<in> timpl_closure s TI;\n                    x2a \\<in> timpl_closure t TI;\n                    set TI' =\n                    {(a, b).\n                     (a, b) \\<in> TI\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n                   \\<Longrightarrow> equal_mod_timpls TI' s t;\n        Fun x1a x2 \\<in> timpl_closure s TI;\n        Fun x1a x2 \\<in> timpl_closure t TI;\n        set TI' =\n        {(a, b). (a, b) \\<in> TI\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n       \\<Longrightarrow> equal_mod_timpls TI' s t", "have g: \"(the_Abs g, the_Abs f) \\<in> set TI'\" \"is_Abs f\" \"is_Abs g\" when neq_f: \"g \\<noteq> f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (the_Abs g, the_Abs f) \\<in> set TI' &&& is_Abs f &&& is_Abs g", "proof -"], ["proof (state)\ngoal (3 subgoals):\n 1. (the_Abs g, the_Abs f) \\<in> set TI'\n 2. is_Abs f\n 3. is_Abs g", "obtain ga fa where a: \"g = Abs ga\" \"f = Abs fa\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>ga fa.\n        \\<lbrakk>g = Abs ga; f = Abs fa\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using s(4)[OF neq_f]"], ["proof (prove)\nusing this:\n  is_Abs g \\<and> is_Abs f \\<and> (the_Abs g, the_Abs f) \\<in> TI\\<^sup>+\n\ngoal (1 subgoal):\n 1. (\\<And>ga fa.\n        \\<lbrakk>g = Abs ga; f = Abs fa\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding is_Abs_def"], ["proof (prove)\nusing this:\n  (\\<exists>x4. g = Abs x4) \\<and>\n  (\\<exists>x4. f = Abs x4) \\<and> (the_Abs g, the_Abs f) \\<in> TI\\<^sup>+\n\ngoal (1 subgoal):\n 1. (\\<And>ga fa.\n        \\<lbrakk>g = Abs ga; f = Abs fa\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by presburger"], ["proof (state)\nthis:\n  g = Abs ga\n  f = Abs fa\n\ngoal (3 subgoals):\n 1. (the_Abs g, the_Abs f) \\<in> set TI'\n 2. is_Abs f\n 3. is_Abs g", "hence \"the_Abs g \\<noteq> the_Abs f\""], ["proof (prove)\nusing this:\n  g = Abs ga\n  f = Abs fa\n\ngoal (1 subgoal):\n 1. the_Abs g \\<noteq> the_Abs f", "using neq_f"], ["proof (prove)\nusing this:\n  g = Abs ga\n  f = Abs fa\n  g \\<noteq> f\n\ngoal (1 subgoal):\n 1. the_Abs g \\<noteq> the_Abs f", "by simp"], ["proof (state)\nthis:\n  the_Abs g \\<noteq> the_Abs f\n\ngoal (3 subgoals):\n 1. (the_Abs g, the_Abs f) \\<in> set TI'\n 2. is_Abs f\n 3. is_Abs g", "thus \"(the_Abs g, the_Abs f) \\<in> set TI'\" \"is_Abs f\" \"is_Abs g\""], ["proof (prove)\nusing this:\n  the_Abs g \\<noteq> the_Abs f\n\ngoal (1 subgoal):\n 1. (the_Abs g, the_Abs f) \\<in> set TI' &&& is_Abs f &&& is_Abs g", "using s(4)[OF neq_f] Fun.prems"], ["proof (prove)\nusing this:\n  the_Abs g \\<noteq> the_Abs f\n  is_Abs g \\<and> is_Abs f \\<and> (the_Abs g, the_Abs f) \\<in> TI\\<^sup>+\n  Fun f U \\<in> timpl_closure s TI\n  Fun f U \\<in> timpl_closure t TI\n  set TI' =\n  {a. case a of\n      (a, b) \\<Rightarrow> (a, b) \\<in> TI\\<^sup>+ \\<and> a \\<noteq> b}\n\ngoal (1 subgoal):\n 1. (the_Abs g, the_Abs f) \\<in> set TI' &&& is_Abs f &&& is_Abs g", "by blast+"], ["proof (state)\nthis:\n  (the_Abs g, the_Abs f) \\<in> set TI'\n  is_Abs f\n  is_Abs g\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  g \\<noteq> f \\<Longrightarrow> (the_Abs g, the_Abs f) \\<in> set TI'\n  g \\<noteq> f \\<Longrightarrow> is_Abs f\n  g \\<noteq> f \\<Longrightarrow> is_Abs g\n\ngoal (1 subgoal):\n 1. \\<And>x1a x2 s t.\n       \\<lbrakk>\\<And>x2a s t.\n                   \\<lbrakk>x2a \\<in> set x2; x2a \\<in> timpl_closure s TI;\n                    x2a \\<in> timpl_closure t TI;\n                    set TI' =\n                    {(a, b).\n                     (a, b) \\<in> TI\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n                   \\<Longrightarrow> equal_mod_timpls TI' s t;\n        Fun x1a x2 \\<in> timpl_closure s TI;\n        Fun x1a x2 \\<in> timpl_closure t TI;\n        set TI' =\n        {(a, b). (a, b) \\<in> TI\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n       \\<Longrightarrow> equal_mod_timpls TI' s t", "have h: \"(the_Abs h, the_Abs f) \\<in> set TI'\" \"is_Abs f\" \"is_Abs h\" when neq_f: \"h \\<noteq> f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (the_Abs h, the_Abs f) \\<in> set TI' &&& is_Abs f &&& is_Abs h", "proof -"], ["proof (state)\ngoal (3 subgoals):\n 1. (the_Abs h, the_Abs f) \\<in> set TI'\n 2. is_Abs f\n 3. is_Abs h", "obtain ha fa where a: \"h = Abs ha\" \"f = Abs fa\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>ha fa.\n        \\<lbrakk>h = Abs ha; f = Abs fa\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using t(4)[OF neq_f]"], ["proof (prove)\nusing this:\n  is_Abs h \\<and> is_Abs f \\<and> (the_Abs h, the_Abs f) \\<in> TI\\<^sup>+\n\ngoal (1 subgoal):\n 1. (\\<And>ha fa.\n        \\<lbrakk>h = Abs ha; f = Abs fa\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding is_Abs_def"], ["proof (prove)\nusing this:\n  (\\<exists>x4. h = Abs x4) \\<and>\n  (\\<exists>x4. f = Abs x4) \\<and> (the_Abs h, the_Abs f) \\<in> TI\\<^sup>+\n\ngoal (1 subgoal):\n 1. (\\<And>ha fa.\n        \\<lbrakk>h = Abs ha; f = Abs fa\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by presburger"], ["proof (state)\nthis:\n  h = Abs ha\n  f = Abs fa\n\ngoal (3 subgoals):\n 1. (the_Abs h, the_Abs f) \\<in> set TI'\n 2. is_Abs f\n 3. is_Abs h", "hence \"the_Abs h \\<noteq> the_Abs f\""], ["proof (prove)\nusing this:\n  h = Abs ha\n  f = Abs fa\n\ngoal (1 subgoal):\n 1. the_Abs h \\<noteq> the_Abs f", "using neq_f"], ["proof (prove)\nusing this:\n  h = Abs ha\n  f = Abs fa\n  h \\<noteq> f\n\ngoal (1 subgoal):\n 1. the_Abs h \\<noteq> the_Abs f", "by simp"], ["proof (state)\nthis:\n  the_Abs h \\<noteq> the_Abs f\n\ngoal (3 subgoals):\n 1. (the_Abs h, the_Abs f) \\<in> set TI'\n 2. is_Abs f\n 3. is_Abs h", "thus \"(the_Abs h, the_Abs f) \\<in> set TI'\" \"is_Abs f\" \"is_Abs h\""], ["proof (prove)\nusing this:\n  the_Abs h \\<noteq> the_Abs f\n\ngoal (1 subgoal):\n 1. (the_Abs h, the_Abs f) \\<in> set TI' &&& is_Abs f &&& is_Abs h", "using t(4)[OF neq_f] Fun.prems"], ["proof (prove)\nusing this:\n  the_Abs h \\<noteq> the_Abs f\n  is_Abs h \\<and> is_Abs f \\<and> (the_Abs h, the_Abs f) \\<in> TI\\<^sup>+\n  Fun f U \\<in> timpl_closure s TI\n  Fun f U \\<in> timpl_closure t TI\n  set TI' =\n  {a. case a of\n      (a, b) \\<Rightarrow> (a, b) \\<in> TI\\<^sup>+ \\<and> a \\<noteq> b}\n\ngoal (1 subgoal):\n 1. (the_Abs h, the_Abs f) \\<in> set TI' &&& is_Abs f &&& is_Abs h", "by blast+"], ["proof (state)\nthis:\n  (the_Abs h, the_Abs f) \\<in> set TI'\n  is_Abs f\n  is_Abs h\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  h \\<noteq> f \\<Longrightarrow> (the_Abs h, the_Abs f) \\<in> set TI'\n  h \\<noteq> f \\<Longrightarrow> is_Abs f\n  h \\<noteq> f \\<Longrightarrow> is_Abs h\n\ngoal (1 subgoal):\n 1. \\<And>x1a x2 s t.\n       \\<lbrakk>\\<And>x2a s t.\n                   \\<lbrakk>x2a \\<in> set x2; x2a \\<in> timpl_closure s TI;\n                    x2a \\<in> timpl_closure t TI;\n                    set TI' =\n                    {(a, b).\n                     (a, b) \\<in> TI\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n                   \\<Longrightarrow> equal_mod_timpls TI' s t;\n        Fun x1a x2 \\<in> timpl_closure s TI;\n        Fun x1a x2 \\<in> timpl_closure t TI;\n        set TI' =\n        {(a, b). (a, b) \\<in> TI\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n       \\<Longrightarrow> equal_mod_timpls TI' s t", "have \"equal_mod_timpls TI' (S ! i) (T ! i)\"\n        when i: \"i < length U\" for i"], ["proof (prove)\ngoal (1 subgoal):\n 1. equal_mod_timpls TI' (S ! i) (T ! i)", "using i Fun.IH s(1,2,3) t(1,2,3) nth_mem[OF i] Fun.prems"], ["proof (prove)\nusing this:\n  i < length U\n  \\<lbrakk>?x2a43 \\<in> set U; ?x2a43 \\<in> timpl_closure ?s43 TI;\n   ?x2a43 \\<in> timpl_closure ?t43 TI;\n   set TI' =\n   {a. case a of\n       (a, b) \\<Rightarrow>\n         (a, b) \\<in> TI\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n  \\<Longrightarrow> equal_mod_timpls TI' ?s43 ?t43\n  s = Fun g S\n  length U = length S\n  ?i43 < length U \\<Longrightarrow>\n  U ! ?i43 \\<in> timpl_closure (S ! ?i43) TI\n  t = Fun h T\n  length U = length T\n  ?i43 < length U \\<Longrightarrow>\n  U ! ?i43 \\<in> timpl_closure (T ! ?i43) TI\n  U ! i \\<in> set U\n  Fun f U \\<in> timpl_closure s TI\n  Fun f U \\<in> timpl_closure t TI\n  set TI' =\n  {a. case a of\n      (a, b) \\<Rightarrow> (a, b) \\<in> TI\\<^sup>+ \\<and> a \\<noteq> b}\n\ngoal (1 subgoal):\n 1. equal_mod_timpls TI' (S ! i) (T ! i)", "by meson"], ["proof (state)\nthis:\n  ?i43 < length U \\<Longrightarrow>\n  equal_mod_timpls TI' (S ! ?i43) (T ! ?i43)\n\ngoal (1 subgoal):\n 1. \\<And>x1a x2 s t.\n       \\<lbrakk>\\<And>x2a s t.\n                   \\<lbrakk>x2a \\<in> set x2; x2a \\<in> timpl_closure s TI;\n                    x2a \\<in> timpl_closure t TI;\n                    set TI' =\n                    {(a, b).\n                     (a, b) \\<in> TI\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n                   \\<Longrightarrow> equal_mod_timpls TI' s t;\n        Fun x1a x2 \\<in> timpl_closure s TI;\n        Fun x1a x2 \\<in> timpl_closure t TI;\n        set TI' =\n        {(a, b). (a, b) \\<in> TI\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n       \\<Longrightarrow> equal_mod_timpls TI' s t", "hence \"list_all2 (equal_mod_timpls TI') S T\""], ["proof (prove)\nusing this:\n  ?i43 < length U \\<Longrightarrow>\n  equal_mod_timpls TI' (S ! ?i43) (T ! ?i43)\n\ngoal (1 subgoal):\n 1. list_all2 (equal_mod_timpls TI') S T", "using list_all2_conv_all_nth[of \"equal_mod_timpls TI'\" S T] s(2) t(2)"], ["proof (prove)\nusing this:\n  ?i43 < length U \\<Longrightarrow>\n  equal_mod_timpls TI' (S ! ?i43) (T ! ?i43)\n  list_all2 (equal_mod_timpls TI') S T =\n  (length S = length T \\<and>\n   (\\<forall>i<length S. equal_mod_timpls TI' (S ! i) (T ! i)))\n  length U = length S\n  length U = length T\n\ngoal (1 subgoal):\n 1. list_all2 (equal_mod_timpls TI') S T", "by presburger"], ["proof (state)\nthis:\n  list_all2 (equal_mod_timpls TI') S T\n\ngoal (1 subgoal):\n 1. \\<And>x1a x2 s t.\n       \\<lbrakk>\\<And>x2a s t.\n                   \\<lbrakk>x2a \\<in> set x2; x2a \\<in> timpl_closure s TI;\n                    x2a \\<in> timpl_closure t TI;\n                    set TI' =\n                    {(a, b).\n                     (a, b) \\<in> TI\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n                   \\<Longrightarrow> equal_mod_timpls TI' s t;\n        Fun x1a x2 \\<in> timpl_closure s TI;\n        Fun x1a x2 \\<in> timpl_closure t TI;\n        set TI' =\n        {(a, b). (a, b) \\<in> TI\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n       \\<Longrightarrow> equal_mod_timpls TI' s t", "thus ?case"], ["proof (prove)\nusing this:\n  list_all2 (equal_mod_timpls TI') S T\n\ngoal (1 subgoal):\n 1. equal_mod_timpls TI' s t", "using s(1) t(1) g h"], ["proof (prove)\nusing this:\n  list_all2 (equal_mod_timpls TI') S T\n  s = Fun g S\n  t = Fun h T\n  g \\<noteq> f \\<Longrightarrow> (the_Abs g, the_Abs f) \\<in> set TI'\n  g \\<noteq> f \\<Longrightarrow> is_Abs f\n  g \\<noteq> f \\<Longrightarrow> is_Abs g\n  h \\<noteq> f \\<Longrightarrow> (the_Abs h, the_Abs f) \\<in> set TI'\n  h \\<noteq> f \\<Longrightarrow> is_Abs f\n  h \\<noteq> f \\<Longrightarrow> is_Abs h\n\ngoal (1 subgoal):\n 1. equal_mod_timpls TI' s t", "by fastforce"], ["proof (state)\nthis:\n  equal_mod_timpls TI' s t\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  equal_mod_timpls TI' s t\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>u.\n     u \\<in> timpl_closure s TI \\<and>\n     u \\<in> timpl_closure t TI \\<Longrightarrow>\n  equal_mod_timpls TI' s t\n\ngoal (1 subgoal):\n 1. \\<exists>u.\n       u \\<in> timpl_closure s TI \\<and>\n       u \\<in> timpl_closure t TI \\<Longrightarrow>\n    \\<exists>u. u \\<in> timpl_closure s TI \\<and> u \\<in> timpl_closure t TI", "qed"], ["", "(* lemma equal_mod_timpls_iff_ex_in_timpl_closure':\n  \"equal_mod_timpls (TI\\<^sup>+) s t \\<longleftrightarrow> (\\<exists>u. u \\<in> timpl_closure s TI \\<and> u \\<in> timpl_closure t TI)\"\nusing equal_mod_timpls_iff_ex_in_timpl_closure equal_mod_timpls_refl_minus_eq\nby blast *)"], ["", "context\nbegin"], ["", "private"], ["", "inductive timpls_transformable_to_pred where\n  Var: \"timpls_transformable_to_pred A (Var x) (Var x)\"\n| Fun: \"\\<lbrakk>\\<not>is_Abs f; length T = length S;\n         \\<And>i. i < length T \\<Longrightarrow> timpls_transformable_to_pred A (T ! i) (S ! i)\\<rbrakk>\n        \\<Longrightarrow> timpls_transformable_to_pred A (Fun f T) (Fun f S)\"\n| Abs: \"b \\<in> A \\<Longrightarrow> timpls_transformable_to_pred A (Fun (Abs a) []) (Fun (Abs b) [])\""], ["", "private"], ["", "lemma timpls_transformable_to_pred_inv_Var:\n  assumes \"timpls_transformable_to_pred A (Var x) t\"\n  shows \"t = Var x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t = Var x", "using assms"], ["proof (prove)\nusing this:\n  timpls_transformable_to_pred A (Var x) t\n\ngoal (1 subgoal):\n 1. t = Var x", "by (auto elim: timpls_transformable_to_pred.cases)"], ["", "private"], ["", "lemma timpls_transformable_to_pred_inv:\n  assumes \"timpls_transformable_to_pred A (Fun f T) t\"\n  shows \"is_Fun t\"\n    and \"length T = length (args t)\"\n    and \"\\<And>i. i < length T \\<Longrightarrow> timpls_transformable_to_pred A (T ! i) (args t ! i)\"\n    and \"\\<not>is_Abs f \\<Longrightarrow> f = the_Fun t\"\n    and \"is_Abs f \\<Longrightarrow> (is_Abs (the_Fun t) \\<and> the_Abs (the_Fun t) \\<in> A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (is_Fun t &&& length T = length (args t)) &&&\n    (\\<And>i.\n        i < length T \\<Longrightarrow>\n        timpls_transformable_to_pred A (T ! i) (args t ! i)) &&&\n    (\\<not> is_Abs f \\<Longrightarrow> f = the_Fun t) &&&\n    (is_Abs f \\<Longrightarrow>\n     is_Abs (the_Fun t) \\<and> the_Abs (the_Fun t) \\<in> A)", "using assms"], ["proof (prove)\nusing this:\n  timpls_transformable_to_pred A (Fun f T) t\n\ngoal (1 subgoal):\n 1. (is_Fun t &&& length T = length (args t)) &&&\n    (\\<And>i.\n        i < length T \\<Longrightarrow>\n        timpls_transformable_to_pred A (T ! i) (args t ! i)) &&&\n    (\\<not> is_Abs f \\<Longrightarrow> f = the_Fun t) &&&\n    (is_Abs f \\<Longrightarrow>\n     is_Abs (the_Fun t) \\<and> the_Abs (the_Fun t) \\<in> A)", "by (auto elim!: timpls_transformable_to_pred.cases[of A])"], ["", "private"], ["", "lemma timpls_transformable_to_pred_finite_aux1:\n  assumes f: \"\\<not>is_Abs f\"\n  shows \"{s. timpls_transformable_to_pred A (Fun f T) s} \\<subseteq>\n          (\\<lambda>S. Fun f S) ` {S. length T = length S \\<and>\n                              (\\<forall>s \\<in> set S. \\<exists>t \\<in> set T. timpls_transformable_to_pred A t s)}\"\n    (is \"?B \\<subseteq> ?C\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. {s. timpls_transformable_to_pred A (Fun f T) s}\n    \\<subseteq> Fun f `\n                {S. length T = length S \\<and>\n                    (\\<forall>s\\<in>set S.\n                        \\<exists>t\\<in>set T.\n                           timpls_transformable_to_pred A t s)}", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {s. timpls_transformable_to_pred A (Fun f T)\n                    s} \\<Longrightarrow>\n       x \\<in> Fun f `\n               {S. length T = length S \\<and>\n                   (\\<forall>s\\<in>set S.\n                       \\<exists>t\\<in>set T.\n                          timpls_transformable_to_pred A t s)}", "fix s"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {s. timpls_transformable_to_pred A (Fun f T)\n                    s} \\<Longrightarrow>\n       x \\<in> Fun f `\n               {S. length T = length S \\<and>\n                   (\\<forall>s\\<in>set S.\n                       \\<exists>t\\<in>set T.\n                          timpls_transformable_to_pred A t s)}", "assume s: \"s \\<in> ?B\""], ["proof (state)\nthis:\n  s \\<in> {s. timpls_transformable_to_pred A (Fun f T) s}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {s. timpls_transformable_to_pred A (Fun f T)\n                    s} \\<Longrightarrow>\n       x \\<in> Fun f `\n               {S. length T = length S \\<and>\n                   (\\<forall>s\\<in>set S.\n                       \\<exists>t\\<in>set T.\n                          timpls_transformable_to_pred A t s)}", "hence *: \"timpls_transformable_to_pred A (Fun f T) s\""], ["proof (prove)\nusing this:\n  s \\<in> {s. timpls_transformable_to_pred A (Fun f T) s}\n\ngoal (1 subgoal):\n 1. timpls_transformable_to_pred A (Fun f T) s", "by blast"], ["proof (state)\nthis:\n  timpls_transformable_to_pred A (Fun f T) s\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {s. timpls_transformable_to_pred A (Fun f T)\n                    s} \\<Longrightarrow>\n       x \\<in> Fun f `\n               {S. length T = length S \\<and>\n                   (\\<forall>s\\<in>set S.\n                       \\<exists>t\\<in>set T.\n                          timpls_transformable_to_pred A t s)}", "obtain S where S:\n      \"s = Fun f S\" \"length T = length S\" \"\\<And>i. i < length T \\<Longrightarrow> timpls_transformable_to_pred A (T ! i) (S ! i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>S.\n        \\<lbrakk>s = Fun f S; length T = length S;\n         \\<And>i.\n            i < length T \\<Longrightarrow>\n            timpls_transformable_to_pred A (T ! i) (S ! i)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using f timpls_transformable_to_pred_inv[OF *]"], ["proof (prove)\nusing this:\n  \\<not> is_Abs f\n  is_Fun s\n  length T = length (args s)\n  ?i < length T \\<Longrightarrow>\n  timpls_transformable_to_pred A (T ! ?i) (args s ! ?i)\n  \\<not> is_Abs f \\<Longrightarrow> f = the_Fun s\n  is_Abs f \\<Longrightarrow>\n  is_Abs (the_Fun s) \\<and> the_Abs (the_Fun s) \\<in> A\n\ngoal (1 subgoal):\n 1. (\\<And>S.\n        \\<lbrakk>s = Fun f S; length T = length S;\n         \\<And>i.\n            i < length T \\<Longrightarrow>\n            timpls_transformable_to_pred A (T ! i) (S ! i)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding the_Abs_def is_Abs_def"], ["proof (prove)\nusing this:\n  \\<nexists>x4. f = Abs x4\n  is_Fun s\n  length T = length (args s)\n  ?i < length T \\<Longrightarrow>\n  timpls_transformable_to_pred A (T ! ?i) (args s ! ?i)\n  \\<nexists>x4. f = Abs x4 \\<Longrightarrow> f = the_Fun s\n  \\<exists>x4. f = Abs x4 \\<Longrightarrow>\n  (\\<exists>x4. the_Fun s = Abs x4) \\<and>\n  (case the_Fun s of Abs x4 \\<Rightarrow> x4) \\<in> A\n\ngoal (1 subgoal):\n 1. (\\<And>S.\n        \\<lbrakk>s = Fun f S; length T = length S;\n         \\<And>i.\n            i < length T \\<Longrightarrow>\n            timpls_transformable_to_pred A (T ! i) (S ! i)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  s = Fun f S\n  length T = length S\n  ?i43 < length T \\<Longrightarrow>\n  timpls_transformable_to_pred A (T ! ?i43) (S ! ?i43)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {s. timpls_transformable_to_pred A (Fun f T)\n                    s} \\<Longrightarrow>\n       x \\<in> Fun f `\n               {S. length T = length S \\<and>\n                   (\\<forall>s\\<in>set S.\n                       \\<exists>t\\<in>set T.\n                          timpls_transformable_to_pred A t s)}", "have \"\\<forall>s\\<in>set S. \\<exists>t\\<in>set T. timpls_transformable_to_pred A t s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>s\\<in>set S.\n       \\<exists>t\\<in>set T. timpls_transformable_to_pred A t s", "using S(2,3) in_set_conv_nth"], ["proof (prove)\nusing this:\n  length T = length S\n  ?i43 < length T \\<Longrightarrow>\n  timpls_transformable_to_pred A (T ! ?i43) (S ! ?i43)\n  (?x \\<in> set ?xs) = (\\<exists>i<length ?xs. ?xs ! i = ?x)\n\ngoal (1 subgoal):\n 1. \\<forall>s\\<in>set S.\n       \\<exists>t\\<in>set T. timpls_transformable_to_pred A t s", "by metis"], ["proof (state)\nthis:\n  \\<forall>s\\<in>set S.\n     \\<exists>t\\<in>set T. timpls_transformable_to_pred A t s\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {s. timpls_transformable_to_pred A (Fun f T)\n                    s} \\<Longrightarrow>\n       x \\<in> Fun f `\n               {S. length T = length S \\<and>\n                   (\\<forall>s\\<in>set S.\n                       \\<exists>t\\<in>set T.\n                          timpls_transformable_to_pred A t s)}", "thus \"s \\<in> ?C\""], ["proof (prove)\nusing this:\n  \\<forall>s\\<in>set S.\n     \\<exists>t\\<in>set T. timpls_transformable_to_pred A t s\n\ngoal (1 subgoal):\n 1. s \\<in> Fun f `\n            {S. length T = length S \\<and>\n                (\\<forall>s\\<in>set S.\n                    \\<exists>t\\<in>set T.\n                       timpls_transformable_to_pred A t s)}", "using S(1,2)"], ["proof (prove)\nusing this:\n  \\<forall>s\\<in>set S.\n     \\<exists>t\\<in>set T. timpls_transformable_to_pred A t s\n  s = Fun f S\n  length T = length S\n\ngoal (1 subgoal):\n 1. s \\<in> Fun f `\n            {S. length T = length S \\<and>\n                (\\<forall>s\\<in>set S.\n                    \\<exists>t\\<in>set T.\n                       timpls_transformable_to_pred A t s)}", "by blast"], ["proof (state)\nthis:\n  s \\<in> Fun f `\n          {S. length T = length S \\<and>\n              (\\<forall>s\\<in>set S.\n                  \\<exists>t\\<in>set T. timpls_transformable_to_pred A t s)}\n\ngoal:\nNo subgoals!", "qed"], ["", "private"], ["", "lemma timpls_transformable_to_pred_finite_aux2:\n  \"{s. timpls_transformable_to_pred A (Fun (Abs a) []) s} \\<subseteq> (\\<lambda>b. Fun (Abs b) []) ` A\" (is \"?B \\<subseteq> ?C\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. {s. timpls_transformable_to_pred A (Fun (Abs a) []) s}\n    \\<subseteq> (\\<lambda>b. Fun (Abs b) []) ` A", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {s. timpls_transformable_to_pred A (Fun (Abs a) [])\n                    s} \\<Longrightarrow>\n       x \\<in> (\\<lambda>b. Fun (Abs b) []) ` A", "fix s"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {s. timpls_transformable_to_pred A (Fun (Abs a) [])\n                    s} \\<Longrightarrow>\n       x \\<in> (\\<lambda>b. Fun (Abs b) []) ` A", "assume s: \"s \\<in> ?B\""], ["proof (state)\nthis:\n  s \\<in> {s. timpls_transformable_to_pred A (Fun (Abs a) []) s}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {s. timpls_transformable_to_pred A (Fun (Abs a) [])\n                    s} \\<Longrightarrow>\n       x \\<in> (\\<lambda>b. Fun (Abs b) []) ` A", "hence *: \"timpls_transformable_to_pred A (Fun (Abs a) []) s\""], ["proof (prove)\nusing this:\n  s \\<in> {s. timpls_transformable_to_pred A (Fun (Abs a) []) s}\n\ngoal (1 subgoal):\n 1. timpls_transformable_to_pred A (Fun (Abs a) []) s", "by blast"], ["proof (state)\nthis:\n  timpls_transformable_to_pred A (Fun (Abs a) []) s\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {s. timpls_transformable_to_pred A (Fun (Abs a) [])\n                    s} \\<Longrightarrow>\n       x \\<in> (\\<lambda>b. Fun (Abs b) []) ` A", "obtain b where b: \"s = Fun (Abs b) []\" \"b \\<in> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>b.\n        \\<lbrakk>s = Fun (Abs b) []; b \\<in> A\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using timpls_transformable_to_pred_inv[OF *]"], ["proof (prove)\nusing this:\n  is_Fun s\n  length [] = length (args s)\n  ?i < length [] \\<Longrightarrow>\n  timpls_transformable_to_pred A ([] ! ?i) (args s ! ?i)\n  \\<not> is_Abs (Abs a) \\<Longrightarrow> Abs a = the_Fun s\n  is_Abs (Abs a) \\<Longrightarrow>\n  is_Abs (the_Fun s) \\<and> the_Abs (the_Fun s) \\<in> A\n\ngoal (1 subgoal):\n 1. (\\<And>b.\n        \\<lbrakk>s = Fun (Abs b) []; b \\<in> A\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding the_Abs_def is_Abs_def"], ["proof (prove)\nusing this:\n  is_Fun s\n  length [] = length (args s)\n  ?i < length [] \\<Longrightarrow>\n  timpls_transformable_to_pred A ([] ! ?i) (args s ! ?i)\n  \\<nexists>x4. Abs a = Abs x4 \\<Longrightarrow> Abs a = the_Fun s\n  \\<exists>x4. Abs a = Abs x4 \\<Longrightarrow>\n  (\\<exists>x4. the_Fun s = Abs x4) \\<and>\n  (case the_Fun s of Abs x4 \\<Rightarrow> x4) \\<in> A\n\ngoal (1 subgoal):\n 1. (\\<And>b.\n        \\<lbrakk>s = Fun (Abs b) []; b \\<in> A\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  s = Fun (Abs b) []\n  b \\<in> A\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {s. timpls_transformable_to_pred A (Fun (Abs a) [])\n                    s} \\<Longrightarrow>\n       x \\<in> (\\<lambda>b. Fun (Abs b) []) ` A", "thus \"s \\<in> ?C\""], ["proof (prove)\nusing this:\n  s = Fun (Abs b) []\n  b \\<in> A\n\ngoal (1 subgoal):\n 1. s \\<in> (\\<lambda>b. Fun (Abs b) []) ` A", "by blast"], ["proof (state)\nthis:\n  s \\<in> (\\<lambda>b. Fun (Abs b) []) ` A\n\ngoal:\nNo subgoals!", "qed"], ["", "private"], ["", "lemma timpls_transformable_to_pred_finite:\n  fixes t::\"(('fun,'atom,'sets) prot_fun, 'a) term\"\n  assumes A: \"finite A\"\n    and t: \"wf\\<^sub>t\\<^sub>r\\<^sub>m t\"\n  shows \"finite {s. timpls_transformable_to_pred A t s}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite {s. timpls_transformable_to_pred A t s}", "using t"], ["proof (prove)\nusing this:\n  wf\\<^sub>t\\<^sub>r\\<^sub>m t\n\ngoal (1 subgoal):\n 1. finite {s. timpls_transformable_to_pred A t s}", "proof (induction t)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       wf\\<^sub>t\\<^sub>r\\<^sub>m (Var x) \\<Longrightarrow>\n       finite (Collect (timpls_transformable_to_pred A (Var x)))\n 2. \\<And>x1a x2.\n       \\<lbrakk>\\<And>x2a.\n                   \\<lbrakk>x2a \\<in> set x2;\n                    wf\\<^sub>t\\<^sub>r\\<^sub>m x2a\\<rbrakk>\n                   \\<Longrightarrow> finite\n(Collect (timpls_transformable_to_pred A x2a));\n        wf\\<^sub>t\\<^sub>r\\<^sub>m (Fun x1a x2)\\<rbrakk>\n       \\<Longrightarrow> finite\n                          (Collect\n                            (timpls_transformable_to_pred A (Fun x1a x2)))", "case (Var x)"], ["proof (state)\nthis:\n  wf\\<^sub>t\\<^sub>r\\<^sub>m (Var x)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       wf\\<^sub>t\\<^sub>r\\<^sub>m (Var x) \\<Longrightarrow>\n       finite (Collect (timpls_transformable_to_pred A (Var x)))\n 2. \\<And>x1a x2.\n       \\<lbrakk>\\<And>x2a.\n                   \\<lbrakk>x2a \\<in> set x2;\n                    wf\\<^sub>t\\<^sub>r\\<^sub>m x2a\\<rbrakk>\n                   \\<Longrightarrow> finite\n(Collect (timpls_transformable_to_pred A x2a));\n        wf\\<^sub>t\\<^sub>r\\<^sub>m (Fun x1a x2)\\<rbrakk>\n       \\<Longrightarrow> finite\n                          (Collect\n                            (timpls_transformable_to_pred A (Fun x1a x2)))", "have \"{s::(('fun,'atom,'sets) prot_fun, 'a) term. timpls_transformable_to_pred A (Var x) s} = {Var x}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {s. timpls_transformable_to_pred A (Var x) s} = {Var x}", "by (auto intro: timpls_transformable_to_pred.Var elim: timpls_transformable_to_pred_inv_Var)"], ["proof (state)\nthis:\n  {s. timpls_transformable_to_pred A (Var x) s} = {Var x}\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       wf\\<^sub>t\\<^sub>r\\<^sub>m (Var x) \\<Longrightarrow>\n       finite (Collect (timpls_transformable_to_pred A (Var x)))\n 2. \\<And>x1a x2.\n       \\<lbrakk>\\<And>x2a.\n                   \\<lbrakk>x2a \\<in> set x2;\n                    wf\\<^sub>t\\<^sub>r\\<^sub>m x2a\\<rbrakk>\n                   \\<Longrightarrow> finite\n(Collect (timpls_transformable_to_pred A x2a));\n        wf\\<^sub>t\\<^sub>r\\<^sub>m (Fun x1a x2)\\<rbrakk>\n       \\<Longrightarrow> finite\n                          (Collect\n                            (timpls_transformable_to_pred A (Fun x1a x2)))", "thus ?case"], ["proof (prove)\nusing this:\n  {s. timpls_transformable_to_pred A (Var x) s} = {Var x}\n\ngoal (1 subgoal):\n 1. finite {a. timpls_transformable_to_pred A (Var x) a}", "by simp"], ["proof (state)\nthis:\n  finite {a. timpls_transformable_to_pred A (Var x) a}\n\ngoal (1 subgoal):\n 1. \\<And>x1a x2.\n       \\<lbrakk>\\<And>x2a.\n                   \\<lbrakk>x2a \\<in> set x2;\n                    wf\\<^sub>t\\<^sub>r\\<^sub>m x2a\\<rbrakk>\n                   \\<Longrightarrow> finite\n(Collect (timpls_transformable_to_pred A x2a));\n        wf\\<^sub>t\\<^sub>r\\<^sub>m (Fun x1a x2)\\<rbrakk>\n       \\<Longrightarrow> finite\n                          (Collect\n                            (timpls_transformable_to_pred A (Fun x1a x2)))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x1a x2.\n       \\<lbrakk>\\<And>x2a.\n                   \\<lbrakk>x2a \\<in> set x2;\n                    wf\\<^sub>t\\<^sub>r\\<^sub>m x2a\\<rbrakk>\n                   \\<Longrightarrow> finite\n(Collect (timpls_transformable_to_pred A x2a));\n        wf\\<^sub>t\\<^sub>r\\<^sub>m (Fun x1a x2)\\<rbrakk>\n       \\<Longrightarrow> finite\n                          (Collect\n                            (timpls_transformable_to_pred A (Fun x1a x2)))", "case (Fun f T)"], ["proof (state)\nthis:\n  \\<lbrakk>?x2a43 \\<in> set T; wf\\<^sub>t\\<^sub>r\\<^sub>m ?x2a43\\<rbrakk>\n  \\<Longrightarrow> finite {a. timpls_transformable_to_pred A ?x2a43 a}\n  wf\\<^sub>t\\<^sub>r\\<^sub>m (Fun f T)\n\ngoal (1 subgoal):\n 1. \\<And>x1a x2.\n       \\<lbrakk>\\<And>x2a.\n                   \\<lbrakk>x2a \\<in> set x2;\n                    wf\\<^sub>t\\<^sub>r\\<^sub>m x2a\\<rbrakk>\n                   \\<Longrightarrow> finite\n(Collect (timpls_transformable_to_pred A x2a));\n        wf\\<^sub>t\\<^sub>r\\<^sub>m (Fun x1a x2)\\<rbrakk>\n       \\<Longrightarrow> finite\n                          (Collect\n                            (timpls_transformable_to_pred A (Fun x1a x2)))", "have IH: \"finite {s. timpls_transformable_to_pred A t s}\" when t: \"t \\<in> set T\" for t"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite {s. timpls_transformable_to_pred A t s}", "using Fun.IH[OF t] wf_trm_param[OF Fun.prems t]"], ["proof (prove)\nusing this:\n  wf\\<^sub>t\\<^sub>r\\<^sub>m t \\<Longrightarrow>\n  finite {a. timpls_transformable_to_pred A t a}\n  wf\\<^sub>t\\<^sub>r\\<^sub>m t\n\ngoal (1 subgoal):\n 1. finite {s. timpls_transformable_to_pred A t s}", "by blast"], ["proof (state)\nthis:\n  ?t43 \\<in> set T \\<Longrightarrow>\n  finite {s. timpls_transformable_to_pred A ?t43 s}\n\ngoal (1 subgoal):\n 1. \\<And>x1a x2.\n       \\<lbrakk>\\<And>x2a.\n                   \\<lbrakk>x2a \\<in> set x2;\n                    wf\\<^sub>t\\<^sub>r\\<^sub>m x2a\\<rbrakk>\n                   \\<Longrightarrow> finite\n(Collect (timpls_transformable_to_pred A x2a));\n        wf\\<^sub>t\\<^sub>r\\<^sub>m (Fun x1a x2)\\<rbrakk>\n       \\<Longrightarrow> finite\n                          (Collect\n                            (timpls_transformable_to_pred A (Fun x1a x2)))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite {a. timpls_transformable_to_pred A (Fun f T) a}", "proof (cases \"is_Abs f\")"], ["proof (state)\ngoal (2 subgoals):\n 1. is_Abs f \\<Longrightarrow>\n    finite {a. timpls_transformable_to_pred A (Fun f T) a}\n 2. \\<not> is_Abs f \\<Longrightarrow>\n    finite {a. timpls_transformable_to_pred A (Fun f T) a}", "case True"], ["proof (state)\nthis:\n  is_Abs f\n\ngoal (2 subgoals):\n 1. is_Abs f \\<Longrightarrow>\n    finite {a. timpls_transformable_to_pred A (Fun f T) a}\n 2. \\<not> is_Abs f \\<Longrightarrow>\n    finite {a. timpls_transformable_to_pred A (Fun f T) a}", "then"], ["proof (chain)\npicking this:\n  is_Abs f", "obtain a where a: \"f = Abs a\""], ["proof (prove)\nusing this:\n  is_Abs f\n\ngoal (1 subgoal):\n 1. (\\<And>a. f = Abs a \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "unfolding is_Abs_def"], ["proof (prove)\nusing this:\n  \\<exists>x4. f = Abs x4\n\ngoal (1 subgoal):\n 1. (\\<And>a. f = Abs a \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by presburger"], ["proof (state)\nthis:\n  f = Abs a\n\ngoal (2 subgoals):\n 1. is_Abs f \\<Longrightarrow>\n    finite {a. timpls_transformable_to_pred A (Fun f T) a}\n 2. \\<not> is_Abs f \\<Longrightarrow>\n    finite {a. timpls_transformable_to_pred A (Fun f T) a}", "hence \"T = []\""], ["proof (prove)\nusing this:\n  f = Abs a\n\ngoal (1 subgoal):\n 1. T = []", "using wf_trm_arity[OF Fun.prems]"], ["proof (prove)\nusing this:\n  f = Abs a\n  length T = arity f\n\ngoal (1 subgoal):\n 1. T = []", "by simp_all"], ["proof (state)\nthis:\n  T = []\n\ngoal (2 subgoals):\n 1. is_Abs f \\<Longrightarrow>\n    finite {a. timpls_transformable_to_pred A (Fun f T) a}\n 2. \\<not> is_Abs f \\<Longrightarrow>\n    finite {a. timpls_transformable_to_pred A (Fun f T) a}", "hence \"{a. timpls_transformable_to_pred A (Fun f T) a} \\<subseteq> (\\<lambda>b. Fun (Abs b) []) ` A\""], ["proof (prove)\nusing this:\n  T = []\n\ngoal (1 subgoal):\n 1. {a. timpls_transformable_to_pred A (Fun f T) a}\n    \\<subseteq> (\\<lambda>b. Fun (Abs b) []) ` A", "using timpls_transformable_to_pred_finite_aux2[of A a] a"], ["proof (prove)\nusing this:\n  T = []\n  {s. timpls_transformable_to_pred A (Fun (Abs a) []) s}\n  \\<subseteq> (\\<lambda>b. Fun (Abs b) []) ` A\n  f = Abs a\n\ngoal (1 subgoal):\n 1. {a. timpls_transformable_to_pred A (Fun f T) a}\n    \\<subseteq> (\\<lambda>b. Fun (Abs b) []) ` A", "by auto"], ["proof (state)\nthis:\n  {a. timpls_transformable_to_pred A (Fun f T) a}\n  \\<subseteq> (\\<lambda>b. Fun (Abs b) []) ` A\n\ngoal (2 subgoals):\n 1. is_Abs f \\<Longrightarrow>\n    finite {a. timpls_transformable_to_pred A (Fun f T) a}\n 2. \\<not> is_Abs f \\<Longrightarrow>\n    finite {a. timpls_transformable_to_pred A (Fun f T) a}", "thus ?thesis"], ["proof (prove)\nusing this:\n  {a. timpls_transformable_to_pred A (Fun f T) a}\n  \\<subseteq> (\\<lambda>b. Fun (Abs b) []) ` A\n\ngoal (1 subgoal):\n 1. finite {a. timpls_transformable_to_pred A (Fun f T) a}", "using A finite_subset"], ["proof (prove)\nusing this:\n  {a. timpls_transformable_to_pred A (Fun f T) a}\n  \\<subseteq> (\\<lambda>b. Fun (Abs b) []) ` A\n  finite A\n  \\<lbrakk>?A \\<subseteq> ?B; finite ?B\\<rbrakk> \\<Longrightarrow> finite ?A\n\ngoal (1 subgoal):\n 1. finite {a. timpls_transformable_to_pred A (Fun f T) a}", "by fast"], ["proof (state)\nthis:\n  finite {a. timpls_transformable_to_pred A (Fun f T) a}\n\ngoal (1 subgoal):\n 1. \\<not> is_Abs f \\<Longrightarrow>\n    finite {a. timpls_transformable_to_pred A (Fun f T) a}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> is_Abs f \\<Longrightarrow>\n    finite {a. timpls_transformable_to_pred A (Fun f T) a}", "case False"], ["proof (state)\nthis:\n  \\<not> is_Abs f\n\ngoal (1 subgoal):\n 1. \\<not> is_Abs f \\<Longrightarrow>\n    finite {a. timpls_transformable_to_pred A (Fun f T) a}", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<not> is_Abs f\n\ngoal (1 subgoal):\n 1. finite {a. timpls_transformable_to_pred A (Fun f T) a}", "using IH finite_lists_length_eq' timpls_transformable_to_pred_finite_aux1[of f A T] finite_subset"], ["proof (prove)\nusing this:\n  \\<not> is_Abs f\n  ?t43 \\<in> set T \\<Longrightarrow>\n  finite {s. timpls_transformable_to_pred A ?t43 s}\n  (\\<And>x.\n      x \\<in> set ?xs \\<Longrightarrow>\n      finite {y. ?P x y}) \\<Longrightarrow>\n  finite\n   {ys.\n    length ?xs = length ys \\<and>\n    (\\<forall>y\\<in>set ys. \\<exists>x\\<in>set ?xs. ?P x y)}\n  \\<not> is_Abs f \\<Longrightarrow>\n  {s. timpls_transformable_to_pred A (Fun f T) s}\n  \\<subseteq> Fun f `\n              {S. length T = length S \\<and>\n                  (\\<forall>s\\<in>set S.\n                      \\<exists>t\\<in>set T.\n                         timpls_transformable_to_pred A t s)}\n  \\<lbrakk>?A \\<subseteq> ?B; finite ?B\\<rbrakk> \\<Longrightarrow> finite ?A\n\ngoal (1 subgoal):\n 1. finite {a. timpls_transformable_to_pred A (Fun f T) a}", "by blast"], ["proof (state)\nthis:\n  finite {a. timpls_transformable_to_pred A (Fun f T) a}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  finite {a. timpls_transformable_to_pred A (Fun f T) a}\n\ngoal:\nNo subgoals!", "qed"], ["", "private"], ["", "lemma timpls_transformable_to_pred_if_timpls_transformable_to:\n  assumes s: \"timpls_transformable_to TI t s\"\n    and t: \"wf\\<^sub>t\\<^sub>r\\<^sub>m t\" \"\\<forall>f \\<in> funs_term t. is_Abs f \\<longrightarrow> the_Abs f \\<in> A\"\n  shows \"timpls_transformable_to_pred (A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+) t s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. timpls_transformable_to_pred\n     (A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+) t s", "using s t"], ["proof (prove)\nusing this:\n  timpls_transformable_to TI t s\n  wf\\<^sub>t\\<^sub>r\\<^sub>m t\n  \\<forall>f\\<in>funs_term t. is_Abs f \\<longrightarrow> the_Abs f \\<in> A\n\ngoal (1 subgoal):\n 1. timpls_transformable_to_pred\n     (A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+) t s", "proof (induction rule: timpls_transformable_to.induct)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>TI x y.\n       \\<lbrakk>timpls_transformable_to TI (Var x) (Var y);\n        wf\\<^sub>t\\<^sub>r\\<^sub>m (Var x);\n        \\<forall>f\\<in>funs_term (Var x).\n           is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to_pred\n                          (A \\<union> fst ` (set TI)\\<^sup>+ \\<union>\n                           snd ` (set TI)\\<^sup>+)\n                          (Var x) (Var y)\n 2. \\<And>TI f T g S.\n       \\<lbrakk>\\<And>z yb.\n                   \\<lbrakk>z \\<in> set T; yb \\<in> set S;\n                    timpls_transformable_to TI z yb;\n                    wf\\<^sub>t\\<^sub>r\\<^sub>m z;\n                    \\<forall>f\\<in>funs_term z.\n                       is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n                   \\<Longrightarrow> timpls_transformable_to_pred\n(A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+) z yb;\n        timpls_transformable_to TI (Fun f T) (Fun g S);\n        wf\\<^sub>t\\<^sub>r\\<^sub>m (Fun f T);\n        \\<forall>f\\<in>funs_term (Fun f T).\n           is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to_pred\n                          (A \\<union> fst ` (set TI)\\<^sup>+ \\<union>\n                           snd ` (set TI)\\<^sup>+)\n                          (Fun f T) (Fun g S)\n 3. \\<And>uu_ v va vb.\n       \\<lbrakk>timpls_transformable_to uu_ (Fun v va) (Var vb);\n        wf\\<^sub>t\\<^sub>r\\<^sub>m (Fun v va);\n        \\<forall>f\\<in>funs_term (Fun v va).\n           is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to_pred\n                          (A \\<union> fst ` (set uu_)\\<^sup>+ \\<union>\n                           snd ` (set uu_)\\<^sup>+)\n                          (Fun v va) (Var vb)\n 4. \\<And>uu_ vb v va.\n       \\<lbrakk>timpls_transformable_to uu_ (Var vb) (Fun v va);\n        wf\\<^sub>t\\<^sub>r\\<^sub>m (Var vb);\n        \\<forall>f\\<in>funs_term (Var vb).\n           is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to_pred\n                          (A \\<union> fst ` (set uu_)\\<^sup>+ \\<union>\n                           snd ` (set uu_)\\<^sup>+)\n                          (Var vb) (Fun v va)", "case (2 TI f T g S)"], ["proof (state)\nthis:\n  \\<lbrakk>?z43 \\<in> set T; ?yb43 \\<in> set S;\n   timpls_transformable_to TI ?z43 ?yb43; wf\\<^sub>t\\<^sub>r\\<^sub>m ?z43;\n   \\<forall>f\\<in>funs_term ?z43.\n      is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n  \\<Longrightarrow> timpls_transformable_to_pred\n                     (A \\<union> fst ` (set TI)\\<^sup>+ \\<union>\n                      snd ` (set TI)\\<^sup>+)\n                     ?z43 ?yb43\n  timpls_transformable_to TI (Fun f T) (Fun g S)\n  wf\\<^sub>t\\<^sub>r\\<^sub>m (Fun f T)\n  \\<forall>f\\<in>funs_term (Fun f T).\n     is_Abs f \\<longrightarrow> the_Abs f \\<in> A\n\ngoal (4 subgoals):\n 1. \\<And>TI x y.\n       \\<lbrakk>timpls_transformable_to TI (Var x) (Var y);\n        wf\\<^sub>t\\<^sub>r\\<^sub>m (Var x);\n        \\<forall>f\\<in>funs_term (Var x).\n           is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to_pred\n                          (A \\<union> fst ` (set TI)\\<^sup>+ \\<union>\n                           snd ` (set TI)\\<^sup>+)\n                          (Var x) (Var y)\n 2. \\<And>TI f T g S.\n       \\<lbrakk>\\<And>z yb.\n                   \\<lbrakk>z \\<in> set T; yb \\<in> set S;\n                    timpls_transformable_to TI z yb;\n                    wf\\<^sub>t\\<^sub>r\\<^sub>m z;\n                    \\<forall>f\\<in>funs_term z.\n                       is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n                   \\<Longrightarrow> timpls_transformable_to_pred\n(A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+) z yb;\n        timpls_transformable_to TI (Fun f T) (Fun g S);\n        wf\\<^sub>t\\<^sub>r\\<^sub>m (Fun f T);\n        \\<forall>f\\<in>funs_term (Fun f T).\n           is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to_pred\n                          (A \\<union> fst ` (set TI)\\<^sup>+ \\<union>\n                           snd ` (set TI)\\<^sup>+)\n                          (Fun f T) (Fun g S)\n 3. \\<And>uu_ v va vb.\n       \\<lbrakk>timpls_transformable_to uu_ (Fun v va) (Var vb);\n        wf\\<^sub>t\\<^sub>r\\<^sub>m (Fun v va);\n        \\<forall>f\\<in>funs_term (Fun v va).\n           is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to_pred\n                          (A \\<union> fst ` (set uu_)\\<^sup>+ \\<union>\n                           snd ` (set uu_)\\<^sup>+)\n                          (Fun v va) (Var vb)\n 4. \\<And>uu_ vb v va.\n       \\<lbrakk>timpls_transformable_to uu_ (Var vb) (Fun v va);\n        wf\\<^sub>t\\<^sub>r\\<^sub>m (Var vb);\n        \\<forall>f\\<in>funs_term (Var vb).\n           is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to_pred\n                          (A \\<union> fst ` (set uu_)\\<^sup>+ \\<union>\n                           snd ` (set uu_)\\<^sup>+)\n                          (Var vb) (Fun v va)", "let ?A = \"A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+\""], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>TI x y.\n       \\<lbrakk>timpls_transformable_to TI (Var x) (Var y);\n        wf\\<^sub>t\\<^sub>r\\<^sub>m (Var x);\n        \\<forall>f\\<in>funs_term (Var x).\n           is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to_pred\n                          (A \\<union> fst ` (set TI)\\<^sup>+ \\<union>\n                           snd ` (set TI)\\<^sup>+)\n                          (Var x) (Var y)\n 2. \\<And>TI f T g S.\n       \\<lbrakk>\\<And>z yb.\n                   \\<lbrakk>z \\<in> set T; yb \\<in> set S;\n                    timpls_transformable_to TI z yb;\n                    wf\\<^sub>t\\<^sub>r\\<^sub>m z;\n                    \\<forall>f\\<in>funs_term z.\n                       is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n                   \\<Longrightarrow> timpls_transformable_to_pred\n(A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+) z yb;\n        timpls_transformable_to TI (Fun f T) (Fun g S);\n        wf\\<^sub>t\\<^sub>r\\<^sub>m (Fun f T);\n        \\<forall>f\\<in>funs_term (Fun f T).\n           is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to_pred\n                          (A \\<union> fst ` (set TI)\\<^sup>+ \\<union>\n                           snd ` (set TI)\\<^sup>+)\n                          (Fun f T) (Fun g S)\n 3. \\<And>uu_ v va vb.\n       \\<lbrakk>timpls_transformable_to uu_ (Fun v va) (Var vb);\n        wf\\<^sub>t\\<^sub>r\\<^sub>m (Fun v va);\n        \\<forall>f\\<in>funs_term (Fun v va).\n           is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to_pred\n                          (A \\<union> fst ` (set uu_)\\<^sup>+ \\<union>\n                           snd ` (set uu_)\\<^sup>+)\n                          (Fun v va) (Var vb)\n 4. \\<And>uu_ vb v va.\n       \\<lbrakk>timpls_transformable_to uu_ (Var vb) (Fun v va);\n        wf\\<^sub>t\\<^sub>r\\<^sub>m (Var vb);\n        \\<forall>f\\<in>funs_term (Var vb).\n           is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to_pred\n                          (A \\<union> fst ` (set uu_)\\<^sup>+ \\<union>\n                           snd ` (set uu_)\\<^sup>+)\n                          (Var vb) (Fun v va)", "note prems = \"2.prems\""], ["proof (state)\nthis:\n  timpls_transformable_to TI (Fun f T) (Fun g S)\n  wf\\<^sub>t\\<^sub>r\\<^sub>m (Fun f T)\n  \\<forall>f\\<in>funs_term (Fun f T).\n     is_Abs f \\<longrightarrow> the_Abs f \\<in> A\n\ngoal (4 subgoals):\n 1. \\<And>TI x y.\n       \\<lbrakk>timpls_transformable_to TI (Var x) (Var y);\n        wf\\<^sub>t\\<^sub>r\\<^sub>m (Var x);\n        \\<forall>f\\<in>funs_term (Var x).\n           is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to_pred\n                          (A \\<union> fst ` (set TI)\\<^sup>+ \\<union>\n                           snd ` (set TI)\\<^sup>+)\n                          (Var x) (Var y)\n 2. \\<And>TI f T g S.\n       \\<lbrakk>\\<And>z yb.\n                   \\<lbrakk>z \\<in> set T; yb \\<in> set S;\n                    timpls_transformable_to TI z yb;\n                    wf\\<^sub>t\\<^sub>r\\<^sub>m z;\n                    \\<forall>f\\<in>funs_term z.\n                       is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n                   \\<Longrightarrow> timpls_transformable_to_pred\n(A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+) z yb;\n        timpls_transformable_to TI (Fun f T) (Fun g S);\n        wf\\<^sub>t\\<^sub>r\\<^sub>m (Fun f T);\n        \\<forall>f\\<in>funs_term (Fun f T).\n           is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to_pred\n                          (A \\<union> fst ` (set TI)\\<^sup>+ \\<union>\n                           snd ` (set TI)\\<^sup>+)\n                          (Fun f T) (Fun g S)\n 3. \\<And>uu_ v va vb.\n       \\<lbrakk>timpls_transformable_to uu_ (Fun v va) (Var vb);\n        wf\\<^sub>t\\<^sub>r\\<^sub>m (Fun v va);\n        \\<forall>f\\<in>funs_term (Fun v va).\n           is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to_pred\n                          (A \\<union> fst ` (set uu_)\\<^sup>+ \\<union>\n                           snd ` (set uu_)\\<^sup>+)\n                          (Fun v va) (Var vb)\n 4. \\<And>uu_ vb v va.\n       \\<lbrakk>timpls_transformable_to uu_ (Var vb) (Fun v va);\n        wf\\<^sub>t\\<^sub>r\\<^sub>m (Var vb);\n        \\<forall>f\\<in>funs_term (Var vb).\n           is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to_pred\n                          (A \\<union> fst ` (set uu_)\\<^sup>+ \\<union>\n                           snd ` (set uu_)\\<^sup>+)\n                          (Var vb) (Fun v va)", "note IH = \"2.IH\""], ["proof (state)\nthis:\n  \\<lbrakk>?z43 \\<in> set T; ?yb43 \\<in> set S;\n   timpls_transformable_to TI ?z43 ?yb43; wf\\<^sub>t\\<^sub>r\\<^sub>m ?z43;\n   \\<forall>f\\<in>funs_term ?z43.\n      is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n  \\<Longrightarrow> timpls_transformable_to_pred\n                     (A \\<union> fst ` (set TI)\\<^sup>+ \\<union>\n                      snd ` (set TI)\\<^sup>+)\n                     ?z43 ?yb43\n\ngoal (4 subgoals):\n 1. \\<And>TI x y.\n       \\<lbrakk>timpls_transformable_to TI (Var x) (Var y);\n        wf\\<^sub>t\\<^sub>r\\<^sub>m (Var x);\n        \\<forall>f\\<in>funs_term (Var x).\n           is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to_pred\n                          (A \\<union> fst ` (set TI)\\<^sup>+ \\<union>\n                           snd ` (set TI)\\<^sup>+)\n                          (Var x) (Var y)\n 2. \\<And>TI f T g S.\n       \\<lbrakk>\\<And>z yb.\n                   \\<lbrakk>z \\<in> set T; yb \\<in> set S;\n                    timpls_transformable_to TI z yb;\n                    wf\\<^sub>t\\<^sub>r\\<^sub>m z;\n                    \\<forall>f\\<in>funs_term z.\n                       is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n                   \\<Longrightarrow> timpls_transformable_to_pred\n(A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+) z yb;\n        timpls_transformable_to TI (Fun f T) (Fun g S);\n        wf\\<^sub>t\\<^sub>r\\<^sub>m (Fun f T);\n        \\<forall>f\\<in>funs_term (Fun f T).\n           is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to_pred\n                          (A \\<union> fst ` (set TI)\\<^sup>+ \\<union>\n                           snd ` (set TI)\\<^sup>+)\n                          (Fun f T) (Fun g S)\n 3. \\<And>uu_ v va vb.\n       \\<lbrakk>timpls_transformable_to uu_ (Fun v va) (Var vb);\n        wf\\<^sub>t\\<^sub>r\\<^sub>m (Fun v va);\n        \\<forall>f\\<in>funs_term (Fun v va).\n           is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to_pred\n                          (A \\<union> fst ` (set uu_)\\<^sup>+ \\<union>\n                           snd ` (set uu_)\\<^sup>+)\n                          (Fun v va) (Var vb)\n 4. \\<And>uu_ vb v va.\n       \\<lbrakk>timpls_transformable_to uu_ (Var vb) (Fun v va);\n        wf\\<^sub>t\\<^sub>r\\<^sub>m (Var vb);\n        \\<forall>f\\<in>funs_term (Var vb).\n           is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to_pred\n                          (A \\<union> fst ` (set uu_)\\<^sup>+ \\<union>\n                           snd ` (set uu_)\\<^sup>+)\n                          (Var vb) (Fun v va)", "note 0 = timpls_transformable_to_inv[OF prems(1)]"], ["proof (state)\nthis:\n  length T = length S\n  ?i < length T \\<Longrightarrow>\n  timpls_transformable_to TI (T ! ?i) (S ! ?i)\n  f \\<noteq> g \\<Longrightarrow>\n  is_Abs f \\<and> is_Abs g \\<and> (the_Abs f, the_Abs g) \\<in> set TI\n\ngoal (4 subgoals):\n 1. \\<And>TI x y.\n       \\<lbrakk>timpls_transformable_to TI (Var x) (Var y);\n        wf\\<^sub>t\\<^sub>r\\<^sub>m (Var x);\n        \\<forall>f\\<in>funs_term (Var x).\n           is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to_pred\n                          (A \\<union> fst ` (set TI)\\<^sup>+ \\<union>\n                           snd ` (set TI)\\<^sup>+)\n                          (Var x) (Var y)\n 2. \\<And>TI f T g S.\n       \\<lbrakk>\\<And>z yb.\n                   \\<lbrakk>z \\<in> set T; yb \\<in> set S;\n                    timpls_transformable_to TI z yb;\n                    wf\\<^sub>t\\<^sub>r\\<^sub>m z;\n                    \\<forall>f\\<in>funs_term z.\n                       is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n                   \\<Longrightarrow> timpls_transformable_to_pred\n(A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+) z yb;\n        timpls_transformable_to TI (Fun f T) (Fun g S);\n        wf\\<^sub>t\\<^sub>r\\<^sub>m (Fun f T);\n        \\<forall>f\\<in>funs_term (Fun f T).\n           is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to_pred\n                          (A \\<union> fst ` (set TI)\\<^sup>+ \\<union>\n                           snd ` (set TI)\\<^sup>+)\n                          (Fun f T) (Fun g S)\n 3. \\<And>uu_ v va vb.\n       \\<lbrakk>timpls_transformable_to uu_ (Fun v va) (Var vb);\n        wf\\<^sub>t\\<^sub>r\\<^sub>m (Fun v va);\n        \\<forall>f\\<in>funs_term (Fun v va).\n           is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to_pred\n                          (A \\<union> fst ` (set uu_)\\<^sup>+ \\<union>\n                           snd ` (set uu_)\\<^sup>+)\n                          (Fun v va) (Var vb)\n 4. \\<And>uu_ vb v va.\n       \\<lbrakk>timpls_transformable_to uu_ (Var vb) (Fun v va);\n        wf\\<^sub>t\\<^sub>r\\<^sub>m (Var vb);\n        \\<forall>f\\<in>funs_term (Var vb).\n           is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to_pred\n                          (A \\<union> fst ` (set uu_)\\<^sup>+ \\<union>\n                           snd ` (set uu_)\\<^sup>+)\n                          (Var vb) (Fun v va)", "have 1: \"T = []\" \"S = []\" when f: \"f = Abs a\" for a"], ["proof (prove)\ngoal (1 subgoal):\n 1. T = [] &&& S = []", "using f wf_trm_arity[OF prems(2)] 0(1)"], ["proof (prove)\nusing this:\n  f = Abs a\n  length T = arity f\n  length T = length S\n\ngoal (1 subgoal):\n 1. T = [] &&& S = []", "by simp_all"], ["proof (state)\nthis:\n  f = Abs ?a43 \\<Longrightarrow> T = []\n  f = Abs ?a43 \\<Longrightarrow> S = []\n\ngoal (4 subgoals):\n 1. \\<And>TI x y.\n       \\<lbrakk>timpls_transformable_to TI (Var x) (Var y);\n        wf\\<^sub>t\\<^sub>r\\<^sub>m (Var x);\n        \\<forall>f\\<in>funs_term (Var x).\n           is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to_pred\n                          (A \\<union> fst ` (set TI)\\<^sup>+ \\<union>\n                           snd ` (set TI)\\<^sup>+)\n                          (Var x) (Var y)\n 2. \\<And>TI f T g S.\n       \\<lbrakk>\\<And>z yb.\n                   \\<lbrakk>z \\<in> set T; yb \\<in> set S;\n                    timpls_transformable_to TI z yb;\n                    wf\\<^sub>t\\<^sub>r\\<^sub>m z;\n                    \\<forall>f\\<in>funs_term z.\n                       is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n                   \\<Longrightarrow> timpls_transformable_to_pred\n(A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+) z yb;\n        timpls_transformable_to TI (Fun f T) (Fun g S);\n        wf\\<^sub>t\\<^sub>r\\<^sub>m (Fun f T);\n        \\<forall>f\\<in>funs_term (Fun f T).\n           is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to_pred\n                          (A \\<union> fst ` (set TI)\\<^sup>+ \\<union>\n                           snd ` (set TI)\\<^sup>+)\n                          (Fun f T) (Fun g S)\n 3. \\<And>uu_ v va vb.\n       \\<lbrakk>timpls_transformable_to uu_ (Fun v va) (Var vb);\n        wf\\<^sub>t\\<^sub>r\\<^sub>m (Fun v va);\n        \\<forall>f\\<in>funs_term (Fun v va).\n           is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to_pred\n                          (A \\<union> fst ` (set uu_)\\<^sup>+ \\<union>\n                           snd ` (set uu_)\\<^sup>+)\n                          (Fun v va) (Var vb)\n 4. \\<And>uu_ vb v va.\n       \\<lbrakk>timpls_transformable_to uu_ (Var vb) (Fun v va);\n        wf\\<^sub>t\\<^sub>r\\<^sub>m (Var vb);\n        \\<forall>f\\<in>funs_term (Var vb).\n           is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to_pred\n                          (A \\<union> fst ` (set uu_)\\<^sup>+ \\<union>\n                           snd ` (set uu_)\\<^sup>+)\n                          (Var vb) (Fun v va)", "have \"\\<forall>f \\<in> funs_term t. is_Abs f \\<longrightarrow> the_Abs f \\<in> A\" when t: \"t \\<in> set T\" for t"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>f\\<in>funs_term t. is_Abs f \\<longrightarrow> the_Abs f \\<in> A", "using t prems(3) funs_term_subterms_eq(1)[of \"Fun f T\"]"], ["proof (prove)\nusing this:\n  t \\<in> set T\n  \\<forall>f\\<in>funs_term (Fun f T).\n     is_Abs f \\<longrightarrow> the_Abs f \\<in> A\n  \\<Union> (funs_term ` subterms (Fun f T)) = funs_term (Fun f T)\n\ngoal (1 subgoal):\n 1. \\<forall>f\\<in>funs_term t. is_Abs f \\<longrightarrow> the_Abs f \\<in> A", "by blast"], ["proof (state)\nthis:\n  ?t43 \\<in> set T \\<Longrightarrow>\n  \\<forall>f\\<in>funs_term ?t43.\n     is_Abs f \\<longrightarrow> the_Abs f \\<in> A\n\ngoal (4 subgoals):\n 1. \\<And>TI x y.\n       \\<lbrakk>timpls_transformable_to TI (Var x) (Var y);\n        wf\\<^sub>t\\<^sub>r\\<^sub>m (Var x);\n        \\<forall>f\\<in>funs_term (Var x).\n           is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to_pred\n                          (A \\<union> fst ` (set TI)\\<^sup>+ \\<union>\n                           snd ` (set TI)\\<^sup>+)\n                          (Var x) (Var y)\n 2. \\<And>TI f T g S.\n       \\<lbrakk>\\<And>z yb.\n                   \\<lbrakk>z \\<in> set T; yb \\<in> set S;\n                    timpls_transformable_to TI z yb;\n                    wf\\<^sub>t\\<^sub>r\\<^sub>m z;\n                    \\<forall>f\\<in>funs_term z.\n                       is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n                   \\<Longrightarrow> timpls_transformable_to_pred\n(A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+) z yb;\n        timpls_transformable_to TI (Fun f T) (Fun g S);\n        wf\\<^sub>t\\<^sub>r\\<^sub>m (Fun f T);\n        \\<forall>f\\<in>funs_term (Fun f T).\n           is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to_pred\n                          (A \\<union> fst ` (set TI)\\<^sup>+ \\<union>\n                           snd ` (set TI)\\<^sup>+)\n                          (Fun f T) (Fun g S)\n 3. \\<And>uu_ v va vb.\n       \\<lbrakk>timpls_transformable_to uu_ (Fun v va) (Var vb);\n        wf\\<^sub>t\\<^sub>r\\<^sub>m (Fun v va);\n        \\<forall>f\\<in>funs_term (Fun v va).\n           is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to_pred\n                          (A \\<union> fst ` (set uu_)\\<^sup>+ \\<union>\n                           snd ` (set uu_)\\<^sup>+)\n                          (Fun v va) (Var vb)\n 4. \\<And>uu_ vb v va.\n       \\<lbrakk>timpls_transformable_to uu_ (Var vb) (Fun v va);\n        wf\\<^sub>t\\<^sub>r\\<^sub>m (Var vb);\n        \\<forall>f\\<in>funs_term (Var vb).\n           is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to_pred\n                          (A \\<union> fst ` (set uu_)\\<^sup>+ \\<union>\n                           snd ` (set uu_)\\<^sup>+)\n                          (Var vb) (Fun v va)", "hence 2: \"timpls_transformable_to_pred ?A (T ! i) (S ! i)\"\n    when i: \"i < length T\" for i"], ["proof (prove)\nusing this:\n  ?t43 \\<in> set T \\<Longrightarrow>\n  \\<forall>f\\<in>funs_term ?t43.\n     is_Abs f \\<longrightarrow> the_Abs f \\<in> A\n\ngoal (1 subgoal):\n 1. timpls_transformable_to_pred\n     (A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+)\n     (T ! i) (S ! i)", "using i IH 0(1,2) wf_trm_param[OF prems(2)]"], ["proof (prove)\nusing this:\n  ?t43 \\<in> set T \\<Longrightarrow>\n  \\<forall>f\\<in>funs_term ?t43.\n     is_Abs f \\<longrightarrow> the_Abs f \\<in> A\n  i < length T\n  \\<lbrakk>?z43 \\<in> set T; ?yb43 \\<in> set S;\n   timpls_transformable_to TI ?z43 ?yb43; wf\\<^sub>t\\<^sub>r\\<^sub>m ?z43;\n   \\<forall>f\\<in>funs_term ?z43.\n      is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n  \\<Longrightarrow> timpls_transformable_to_pred\n                     (A \\<union> fst ` (set TI)\\<^sup>+ \\<union>\n                      snd ` (set TI)\\<^sup>+)\n                     ?z43 ?yb43\n  length T = length S\n  ?i < length T \\<Longrightarrow>\n  timpls_transformable_to TI (T ! ?i) (S ! ?i)\n  ?t \\<in> set T \\<Longrightarrow> wf\\<^sub>t\\<^sub>r\\<^sub>m ?t\n\ngoal (1 subgoal):\n 1. timpls_transformable_to_pred\n     (A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+)\n     (T ! i) (S ! i)", "by (metis (no_types) in_set_conv_nth)"], ["proof (state)\nthis:\n  ?i43 < length T \\<Longrightarrow>\n  timpls_transformable_to_pred\n   (A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+)\n   (T ! ?i43) (S ! ?i43)\n\ngoal (4 subgoals):\n 1. \\<And>TI x y.\n       \\<lbrakk>timpls_transformable_to TI (Var x) (Var y);\n        wf\\<^sub>t\\<^sub>r\\<^sub>m (Var x);\n        \\<forall>f\\<in>funs_term (Var x).\n           is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to_pred\n                          (A \\<union> fst ` (set TI)\\<^sup>+ \\<union>\n                           snd ` (set TI)\\<^sup>+)\n                          (Var x) (Var y)\n 2. \\<And>TI f T g S.\n       \\<lbrakk>\\<And>z yb.\n                   \\<lbrakk>z \\<in> set T; yb \\<in> set S;\n                    timpls_transformable_to TI z yb;\n                    wf\\<^sub>t\\<^sub>r\\<^sub>m z;\n                    \\<forall>f\\<in>funs_term z.\n                       is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n                   \\<Longrightarrow> timpls_transformable_to_pred\n(A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+) z yb;\n        timpls_transformable_to TI (Fun f T) (Fun g S);\n        wf\\<^sub>t\\<^sub>r\\<^sub>m (Fun f T);\n        \\<forall>f\\<in>funs_term (Fun f T).\n           is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to_pred\n                          (A \\<union> fst ` (set TI)\\<^sup>+ \\<union>\n                           snd ` (set TI)\\<^sup>+)\n                          (Fun f T) (Fun g S)\n 3. \\<And>uu_ v va vb.\n       \\<lbrakk>timpls_transformable_to uu_ (Fun v va) (Var vb);\n        wf\\<^sub>t\\<^sub>r\\<^sub>m (Fun v va);\n        \\<forall>f\\<in>funs_term (Fun v va).\n           is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to_pred\n                          (A \\<union> fst ` (set uu_)\\<^sup>+ \\<union>\n                           snd ` (set uu_)\\<^sup>+)\n                          (Fun v va) (Var vb)\n 4. \\<And>uu_ vb v va.\n       \\<lbrakk>timpls_transformable_to uu_ (Var vb) (Fun v va);\n        wf\\<^sub>t\\<^sub>r\\<^sub>m (Var vb);\n        \\<forall>f\\<in>funs_term (Var vb).\n           is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to_pred\n                          (A \\<union> fst ` (set uu_)\\<^sup>+ \\<union>\n                           snd ` (set uu_)\\<^sup>+)\n                          (Var vb) (Fun v va)", "have 3: \"the_Abs f \\<in> ?A\" when f: \"is_Abs f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. the_Abs f\n    \\<in> A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+", "using prems(3) f"], ["proof (prove)\nusing this:\n  \\<forall>f\\<in>funs_term (Fun f T).\n     is_Abs f \\<longrightarrow> the_Abs f \\<in> A\n  is_Abs f\n\ngoal (1 subgoal):\n 1. the_Abs f\n    \\<in> A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+", "by force"], ["proof (state)\nthis:\n  is_Abs f \\<Longrightarrow>\n  the_Abs f\n  \\<in> A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+\n\ngoal (4 subgoals):\n 1. \\<And>TI x y.\n       \\<lbrakk>timpls_transformable_to TI (Var x) (Var y);\n        wf\\<^sub>t\\<^sub>r\\<^sub>m (Var x);\n        \\<forall>f\\<in>funs_term (Var x).\n           is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to_pred\n                          (A \\<union> fst ` (set TI)\\<^sup>+ \\<union>\n                           snd ` (set TI)\\<^sup>+)\n                          (Var x) (Var y)\n 2. \\<And>TI f T g S.\n       \\<lbrakk>\\<And>z yb.\n                   \\<lbrakk>z \\<in> set T; yb \\<in> set S;\n                    timpls_transformable_to TI z yb;\n                    wf\\<^sub>t\\<^sub>r\\<^sub>m z;\n                    \\<forall>f\\<in>funs_term z.\n                       is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n                   \\<Longrightarrow> timpls_transformable_to_pred\n(A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+) z yb;\n        timpls_transformable_to TI (Fun f T) (Fun g S);\n        wf\\<^sub>t\\<^sub>r\\<^sub>m (Fun f T);\n        \\<forall>f\\<in>funs_term (Fun f T).\n           is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to_pred\n                          (A \\<union> fst ` (set TI)\\<^sup>+ \\<union>\n                           snd ` (set TI)\\<^sup>+)\n                          (Fun f T) (Fun g S)\n 3. \\<And>uu_ v va vb.\n       \\<lbrakk>timpls_transformable_to uu_ (Fun v va) (Var vb);\n        wf\\<^sub>t\\<^sub>r\\<^sub>m (Fun v va);\n        \\<forall>f\\<in>funs_term (Fun v va).\n           is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to_pred\n                          (A \\<union> fst ` (set uu_)\\<^sup>+ \\<union>\n                           snd ` (set uu_)\\<^sup>+)\n                          (Fun v va) (Var vb)\n 4. \\<And>uu_ vb v va.\n       \\<lbrakk>timpls_transformable_to uu_ (Var vb) (Fun v va);\n        wf\\<^sub>t\\<^sub>r\\<^sub>m (Var vb);\n        \\<forall>f\\<in>funs_term (Var vb).\n           is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to_pred\n                          (A \\<union> fst ` (set uu_)\\<^sup>+ \\<union>\n                           snd ` (set uu_)\\<^sup>+)\n                          (Var vb) (Fun v va)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. timpls_transformable_to_pred\n     (A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+)\n     (Fun f T) (Fun g S)", "proof (cases \"f = g\")"], ["proof (state)\ngoal (2 subgoals):\n 1. f = g \\<Longrightarrow>\n    timpls_transformable_to_pred\n     (A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+)\n     (Fun f T) (Fun g S)\n 2. f \\<noteq> g \\<Longrightarrow>\n    timpls_transformable_to_pred\n     (A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+)\n     (Fun f T) (Fun g S)", "case True"], ["proof (state)\nthis:\n  f = g\n\ngoal (2 subgoals):\n 1. f = g \\<Longrightarrow>\n    timpls_transformable_to_pred\n     (A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+)\n     (Fun f T) (Fun g S)\n 2. f \\<noteq> g \\<Longrightarrow>\n    timpls_transformable_to_pred\n     (A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+)\n     (Fun f T) (Fun g S)", "note fg = True"], ["proof (state)\nthis:\n  f = g\n\ngoal (2 subgoals):\n 1. f = g \\<Longrightarrow>\n    timpls_transformable_to_pred\n     (A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+)\n     (Fun f T) (Fun g S)\n 2. f \\<noteq> g \\<Longrightarrow>\n    timpls_transformable_to_pred\n     (A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+)\n     (Fun f T) (Fun g S)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. timpls_transformable_to_pred\n     (A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+)\n     (Fun f T) (Fun g S)", "proof (cases \"is_Abs f\")"], ["proof (state)\ngoal (2 subgoals):\n 1. is_Abs f \\<Longrightarrow>\n    timpls_transformable_to_pred\n     (A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+)\n     (Fun f T) (Fun g S)\n 2. \\<not> is_Abs f \\<Longrightarrow>\n    timpls_transformable_to_pred\n     (A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+)\n     (Fun f T) (Fun g S)", "case True"], ["proof (state)\nthis:\n  is_Abs f\n\ngoal (2 subgoals):\n 1. is_Abs f \\<Longrightarrow>\n    timpls_transformable_to_pred\n     (A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+)\n     (Fun f T) (Fun g S)\n 2. \\<not> is_Abs f \\<Longrightarrow>\n    timpls_transformable_to_pred\n     (A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+)\n     (Fun f T) (Fun g S)", "then"], ["proof (chain)\npicking this:\n  is_Abs f", "obtain a where a: \"f = Abs a\""], ["proof (prove)\nusing this:\n  is_Abs f\n\ngoal (1 subgoal):\n 1. (\\<And>a. f = Abs a \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "unfolding is_Abs_def"], ["proof (prove)\nusing this:\n  \\<exists>x4. f = Abs x4\n\ngoal (1 subgoal):\n 1. (\\<And>a. f = Abs a \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by moura"], ["proof (state)\nthis:\n  f = Abs a\n\ngoal (2 subgoals):\n 1. is_Abs f \\<Longrightarrow>\n    timpls_transformable_to_pred\n     (A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+)\n     (Fun f T) (Fun g S)\n 2. \\<not> is_Abs f \\<Longrightarrow>\n    timpls_transformable_to_pred\n     (A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+)\n     (Fun f T) (Fun g S)", "thus ?thesis"], ["proof (prove)\nusing this:\n  f = Abs a\n\ngoal (1 subgoal):\n 1. timpls_transformable_to_pred\n     (A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+)\n     (Fun f T) (Fun g S)", "using fg 1[OF a] timpls_transformable_to_pred.Abs[of a ?A a] 3"], ["proof (prove)\nusing this:\n  f = Abs a\n  f = g\n  T = []\n  S = []\n  a \\<in> A \\<union> fst ` (set TI)\\<^sup>+ \\<union>\n          snd ` (set TI)\\<^sup>+ \\<Longrightarrow>\n  timpls_transformable_to_pred\n   (A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+)\n   (Fun (Abs a) []) (Fun (Abs a) [])\n  is_Abs f \\<Longrightarrow>\n  the_Abs f\n  \\<in> A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+\n\ngoal (1 subgoal):\n 1. timpls_transformable_to_pred\n     (A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+)\n     (Fun f T) (Fun g S)", "by simp"], ["proof (state)\nthis:\n  timpls_transformable_to_pred\n   (A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+)\n   (Fun f T) (Fun g S)\n\ngoal (1 subgoal):\n 1. \\<not> is_Abs f \\<Longrightarrow>\n    timpls_transformable_to_pred\n     (A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+)\n     (Fun f T) (Fun g S)", "qed (use fg timpls_transformable_to_pred.Fun[OF _ 0(1) 2, of f] in blast)"], ["proof (state)\nthis:\n  timpls_transformable_to_pred\n   (A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+)\n   (Fun f T) (Fun g S)\n\ngoal (1 subgoal):\n 1. f \\<noteq> g \\<Longrightarrow>\n    timpls_transformable_to_pred\n     (A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+)\n     (Fun f T) (Fun g S)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. f \\<noteq> g \\<Longrightarrow>\n    timpls_transformable_to_pred\n     (A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+)\n     (Fun f T) (Fun g S)", "case False"], ["proof (state)\nthis:\n  f \\<noteq> g\n\ngoal (1 subgoal):\n 1. f \\<noteq> g \\<Longrightarrow>\n    timpls_transformable_to_pred\n     (A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+)\n     (Fun f T) (Fun g S)", "then"], ["proof (chain)\npicking this:\n  f \\<noteq> g", "obtain a b where ab: \"f = Abs a\" \"g = Abs b\" \"(a, b) \\<in> (set TI)\\<^sup>+\""], ["proof (prove)\nusing this:\n  f \\<noteq> g\n\ngoal (1 subgoal):\n 1. (\\<And>a b.\n        \\<lbrakk>f = Abs a; g = Abs b;\n         (a, b) \\<in> (set TI)\\<^sup>+\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using 0(3) in_trancl_closure_iff_in_trancl_fun[of _ _ TI]"], ["proof (prove)\nusing this:\n  f \\<noteq> g\n  f \\<noteq> g \\<Longrightarrow>\n  is_Abs f \\<and> is_Abs g \\<and> (the_Abs f, the_Abs g) \\<in> set TI\n  ((?a, ?b) \\<in> (set TI)\\<^sup>+) = in_trancl TI ?a ?b\n\ngoal (1 subgoal):\n 1. (\\<And>a b.\n        \\<lbrakk>f = Abs a; g = Abs b;\n         (a, b) \\<in> (set TI)\\<^sup>+\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding is_Abs_def the_Abs_def"], ["proof (prove)\nusing this:\n  f \\<noteq> g\n  f \\<noteq> g \\<Longrightarrow>\n  (\\<exists>x4. f = Abs x4) \\<and>\n  (\\<exists>x4. g = Abs x4) \\<and>\n  (case f of Abs x4 \\<Rightarrow> x4, case g of Abs x4 \\<Rightarrow> x4)\n  \\<in> set TI\n  ((?a, ?b) \\<in> (set TI)\\<^sup>+) = in_trancl TI ?a ?b\n\ngoal (1 subgoal):\n 1. (\\<And>a b.\n        \\<lbrakk>f = Abs a; g = Abs b;\n         (a, b) \\<in> (set TI)\\<^sup>+\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  f = Abs a\n  g = Abs b\n  (a, b) \\<in> (set TI)\\<^sup>+\n\ngoal (1 subgoal):\n 1. f \\<noteq> g \\<Longrightarrow>\n    timpls_transformable_to_pred\n     (A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+)\n     (Fun f T) (Fun g S)", "hence \"a \\<in> ?A\" \"b \\<in> ?A\""], ["proof (prove)\nusing this:\n  f = Abs a\n  g = Abs b\n  (a, b) \\<in> (set TI)\\<^sup>+\n\ngoal (1 subgoal):\n 1. a \\<in> A \\<union> fst ` (set TI)\\<^sup>+ \\<union>\n            snd ` (set TI)\\<^sup>+ &&&\n    b \\<in> A \\<union> fst ` (set TI)\\<^sup>+ \\<union>\n            snd ` (set TI)\\<^sup>+", "by force+"], ["proof (state)\nthis:\n  a \\<in> A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+\n  b \\<in> A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+\n\ngoal (1 subgoal):\n 1. f \\<noteq> g \\<Longrightarrow>\n    timpls_transformable_to_pred\n     (A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+)\n     (Fun f T) (Fun g S)", "thus ?thesis"], ["proof (prove)\nusing this:\n  a \\<in> A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+\n  b \\<in> A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+\n\ngoal (1 subgoal):\n 1. timpls_transformable_to_pred\n     (A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+)\n     (Fun f T) (Fun g S)", "using timpls_transformable_to_pred.Abs ab(1,2) 1[OF ab(1)]"], ["proof (prove)\nusing this:\n  a \\<in> A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+\n  b \\<in> A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+\n  ?b \\<in> ?A \\<Longrightarrow>\n  timpls_transformable_to_pred ?A (Fun (Abs ?a) []) (Fun (Abs ?b) [])\n  f = Abs a\n  g = Abs b\n  T = []\n  S = []\n\ngoal (1 subgoal):\n 1. timpls_transformable_to_pred\n     (A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+)\n     (Fun f T) (Fun g S)", "by metis"], ["proof (state)\nthis:\n  timpls_transformable_to_pred\n   (A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+)\n   (Fun f T) (Fun g S)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  timpls_transformable_to_pred\n   (A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+)\n   (Fun f T) (Fun g S)\n\ngoal (3 subgoals):\n 1. \\<And>TI x y.\n       \\<lbrakk>timpls_transformable_to TI (Var x) (Var y);\n        wf\\<^sub>t\\<^sub>r\\<^sub>m (Var x);\n        \\<forall>f\\<in>funs_term (Var x).\n           is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to_pred\n                          (A \\<union> fst ` (set TI)\\<^sup>+ \\<union>\n                           snd ` (set TI)\\<^sup>+)\n                          (Var x) (Var y)\n 2. \\<And>uu_ v va vb.\n       \\<lbrakk>timpls_transformable_to uu_ (Fun v va) (Var vb);\n        wf\\<^sub>t\\<^sub>r\\<^sub>m (Fun v va);\n        \\<forall>f\\<in>funs_term (Fun v va).\n           is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to_pred\n                          (A \\<union> fst ` (set uu_)\\<^sup>+ \\<union>\n                           snd ` (set uu_)\\<^sup>+)\n                          (Fun v va) (Var vb)\n 3. \\<And>uu_ vb v va.\n       \\<lbrakk>timpls_transformable_to uu_ (Var vb) (Fun v va);\n        wf\\<^sub>t\\<^sub>r\\<^sub>m (Var vb);\n        \\<forall>f\\<in>funs_term (Var vb).\n           is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to_pred\n                          (A \\<union> fst ` (set uu_)\\<^sup>+ \\<union>\n                           snd ` (set uu_)\\<^sup>+)\n                          (Var vb) (Fun v va)", "qed (simp_all add: timpls_transformable_to_pred.Var)"], ["", "private"], ["", "lemma timpls_transformable_to_pred_if_timpls_transformable_to':\n  assumes s: \"timpls_transformable_to' TI t s\"\n    and t: \"wf\\<^sub>t\\<^sub>r\\<^sub>m t\" \"\\<forall>f \\<in> funs_term t. is_Abs f \\<longrightarrow> the_Abs f \\<in> A\"\n  shows \"timpls_transformable_to_pred (A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+) t s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. timpls_transformable_to_pred\n     (A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+) t s", "using s t"], ["proof (prove)\nusing this:\n  timpls_transformable_to' TI t s\n  wf\\<^sub>t\\<^sub>r\\<^sub>m t\n  \\<forall>f\\<in>funs_term t. is_Abs f \\<longrightarrow> the_Abs f \\<in> A\n\ngoal (1 subgoal):\n 1. timpls_transformable_to_pred\n     (A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+) t s", "proof (induction rule: timpls_transformable_to.induct)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>TI x y.\n       \\<lbrakk>timpls_transformable_to' TI (Var x) (Var y);\n        wf\\<^sub>t\\<^sub>r\\<^sub>m (Var x);\n        \\<forall>f\\<in>funs_term (Var x).\n           is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to_pred\n                          (A \\<union> fst ` (set TI)\\<^sup>+ \\<union>\n                           snd ` (set TI)\\<^sup>+)\n                          (Var x) (Var y)\n 2. \\<And>TI f T g S.\n       \\<lbrakk>\\<And>z yb.\n                   \\<lbrakk>z \\<in> set T; yb \\<in> set S;\n                    timpls_transformable_to' TI z yb;\n                    wf\\<^sub>t\\<^sub>r\\<^sub>m z;\n                    \\<forall>f\\<in>funs_term z.\n                       is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n                   \\<Longrightarrow> timpls_transformable_to_pred\n(A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+) z yb;\n        timpls_transformable_to' TI (Fun f T) (Fun g S);\n        wf\\<^sub>t\\<^sub>r\\<^sub>m (Fun f T);\n        \\<forall>f\\<in>funs_term (Fun f T).\n           is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to_pred\n                          (A \\<union> fst ` (set TI)\\<^sup>+ \\<union>\n                           snd ` (set TI)\\<^sup>+)\n                          (Fun f T) (Fun g S)\n 3. \\<And>uu_ v va vb.\n       \\<lbrakk>timpls_transformable_to' uu_ (Fun v va) (Var vb);\n        wf\\<^sub>t\\<^sub>r\\<^sub>m (Fun v va);\n        \\<forall>f\\<in>funs_term (Fun v va).\n           is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to_pred\n                          (A \\<union> fst ` (set uu_)\\<^sup>+ \\<union>\n                           snd ` (set uu_)\\<^sup>+)\n                          (Fun v va) (Var vb)\n 4. \\<And>uu_ vb v va.\n       \\<lbrakk>timpls_transformable_to' uu_ (Var vb) (Fun v va);\n        wf\\<^sub>t\\<^sub>r\\<^sub>m (Var vb);\n        \\<forall>f\\<in>funs_term (Var vb).\n           is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to_pred\n                          (A \\<union> fst ` (set uu_)\\<^sup>+ \\<union>\n                           snd ` (set uu_)\\<^sup>+)\n                          (Var vb) (Fun v va)", "case (2 TI f T g S)"], ["proof (state)\nthis:\n  \\<lbrakk>?z43 \\<in> set T; ?yb43 \\<in> set S;\n   timpls_transformable_to' TI ?z43 ?yb43; wf\\<^sub>t\\<^sub>r\\<^sub>m ?z43;\n   \\<forall>f\\<in>funs_term ?z43.\n      is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n  \\<Longrightarrow> timpls_transformable_to_pred\n                     (A \\<union> fst ` (set TI)\\<^sup>+ \\<union>\n                      snd ` (set TI)\\<^sup>+)\n                     ?z43 ?yb43\n  timpls_transformable_to' TI (Fun f T) (Fun g S)\n  wf\\<^sub>t\\<^sub>r\\<^sub>m (Fun f T)\n  \\<forall>f\\<in>funs_term (Fun f T).\n     is_Abs f \\<longrightarrow> the_Abs f \\<in> A\n\ngoal (4 subgoals):\n 1. \\<And>TI x y.\n       \\<lbrakk>timpls_transformable_to' TI (Var x) (Var y);\n        wf\\<^sub>t\\<^sub>r\\<^sub>m (Var x);\n        \\<forall>f\\<in>funs_term (Var x).\n           is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to_pred\n                          (A \\<union> fst ` (set TI)\\<^sup>+ \\<union>\n                           snd ` (set TI)\\<^sup>+)\n                          (Var x) (Var y)\n 2. \\<And>TI f T g S.\n       \\<lbrakk>\\<And>z yb.\n                   \\<lbrakk>z \\<in> set T; yb \\<in> set S;\n                    timpls_transformable_to' TI z yb;\n                    wf\\<^sub>t\\<^sub>r\\<^sub>m z;\n                    \\<forall>f\\<in>funs_term z.\n                       is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n                   \\<Longrightarrow> timpls_transformable_to_pred\n(A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+) z yb;\n        timpls_transformable_to' TI (Fun f T) (Fun g S);\n        wf\\<^sub>t\\<^sub>r\\<^sub>m (Fun f T);\n        \\<forall>f\\<in>funs_term (Fun f T).\n           is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to_pred\n                          (A \\<union> fst ` (set TI)\\<^sup>+ \\<union>\n                           snd ` (set TI)\\<^sup>+)\n                          (Fun f T) (Fun g S)\n 3. \\<And>uu_ v va vb.\n       \\<lbrakk>timpls_transformable_to' uu_ (Fun v va) (Var vb);\n        wf\\<^sub>t\\<^sub>r\\<^sub>m (Fun v va);\n        \\<forall>f\\<in>funs_term (Fun v va).\n           is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to_pred\n                          (A \\<union> fst ` (set uu_)\\<^sup>+ \\<union>\n                           snd ` (set uu_)\\<^sup>+)\n                          (Fun v va) (Var vb)\n 4. \\<And>uu_ vb v va.\n       \\<lbrakk>timpls_transformable_to' uu_ (Var vb) (Fun v va);\n        wf\\<^sub>t\\<^sub>r\\<^sub>m (Var vb);\n        \\<forall>f\\<in>funs_term (Var vb).\n           is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to_pred\n                          (A \\<union> fst ` (set uu_)\\<^sup>+ \\<union>\n                           snd ` (set uu_)\\<^sup>+)\n                          (Var vb) (Fun v va)", "let ?A = \"A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+\""], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>TI x y.\n       \\<lbrakk>timpls_transformable_to' TI (Var x) (Var y);\n        wf\\<^sub>t\\<^sub>r\\<^sub>m (Var x);\n        \\<forall>f\\<in>funs_term (Var x).\n           is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to_pred\n                          (A \\<union> fst ` (set TI)\\<^sup>+ \\<union>\n                           snd ` (set TI)\\<^sup>+)\n                          (Var x) (Var y)\n 2. \\<And>TI f T g S.\n       \\<lbrakk>\\<And>z yb.\n                   \\<lbrakk>z \\<in> set T; yb \\<in> set S;\n                    timpls_transformable_to' TI z yb;\n                    wf\\<^sub>t\\<^sub>r\\<^sub>m z;\n                    \\<forall>f\\<in>funs_term z.\n                       is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n                   \\<Longrightarrow> timpls_transformable_to_pred\n(A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+) z yb;\n        timpls_transformable_to' TI (Fun f T) (Fun g S);\n        wf\\<^sub>t\\<^sub>r\\<^sub>m (Fun f T);\n        \\<forall>f\\<in>funs_term (Fun f T).\n           is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to_pred\n                          (A \\<union> fst ` (set TI)\\<^sup>+ \\<union>\n                           snd ` (set TI)\\<^sup>+)\n                          (Fun f T) (Fun g S)\n 3. \\<And>uu_ v va vb.\n       \\<lbrakk>timpls_transformable_to' uu_ (Fun v va) (Var vb);\n        wf\\<^sub>t\\<^sub>r\\<^sub>m (Fun v va);\n        \\<forall>f\\<in>funs_term (Fun v va).\n           is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to_pred\n                          (A \\<union> fst ` (set uu_)\\<^sup>+ \\<union>\n                           snd ` (set uu_)\\<^sup>+)\n                          (Fun v va) (Var vb)\n 4. \\<And>uu_ vb v va.\n       \\<lbrakk>timpls_transformable_to' uu_ (Var vb) (Fun v va);\n        wf\\<^sub>t\\<^sub>r\\<^sub>m (Var vb);\n        \\<forall>f\\<in>funs_term (Var vb).\n           is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to_pred\n                          (A \\<union> fst ` (set uu_)\\<^sup>+ \\<union>\n                           snd ` (set uu_)\\<^sup>+)\n                          (Var vb) (Fun v va)", "note prems = \"2.prems\""], ["proof (state)\nthis:\n  timpls_transformable_to' TI (Fun f T) (Fun g S)\n  wf\\<^sub>t\\<^sub>r\\<^sub>m (Fun f T)\n  \\<forall>f\\<in>funs_term (Fun f T).\n     is_Abs f \\<longrightarrow> the_Abs f \\<in> A\n\ngoal (4 subgoals):\n 1. \\<And>TI x y.\n       \\<lbrakk>timpls_transformable_to' TI (Var x) (Var y);\n        wf\\<^sub>t\\<^sub>r\\<^sub>m (Var x);\n        \\<forall>f\\<in>funs_term (Var x).\n           is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to_pred\n                          (A \\<union> fst ` (set TI)\\<^sup>+ \\<union>\n                           snd ` (set TI)\\<^sup>+)\n                          (Var x) (Var y)\n 2. \\<And>TI f T g S.\n       \\<lbrakk>\\<And>z yb.\n                   \\<lbrakk>z \\<in> set T; yb \\<in> set S;\n                    timpls_transformable_to' TI z yb;\n                    wf\\<^sub>t\\<^sub>r\\<^sub>m z;\n                    \\<forall>f\\<in>funs_term z.\n                       is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n                   \\<Longrightarrow> timpls_transformable_to_pred\n(A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+) z yb;\n        timpls_transformable_to' TI (Fun f T) (Fun g S);\n        wf\\<^sub>t\\<^sub>r\\<^sub>m (Fun f T);\n        \\<forall>f\\<in>funs_term (Fun f T).\n           is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to_pred\n                          (A \\<union> fst ` (set TI)\\<^sup>+ \\<union>\n                           snd ` (set TI)\\<^sup>+)\n                          (Fun f T) (Fun g S)\n 3. \\<And>uu_ v va vb.\n       \\<lbrakk>timpls_transformable_to' uu_ (Fun v va) (Var vb);\n        wf\\<^sub>t\\<^sub>r\\<^sub>m (Fun v va);\n        \\<forall>f\\<in>funs_term (Fun v va).\n           is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to_pred\n                          (A \\<union> fst ` (set uu_)\\<^sup>+ \\<union>\n                           snd ` (set uu_)\\<^sup>+)\n                          (Fun v va) (Var vb)\n 4. \\<And>uu_ vb v va.\n       \\<lbrakk>timpls_transformable_to' uu_ (Var vb) (Fun v va);\n        wf\\<^sub>t\\<^sub>r\\<^sub>m (Var vb);\n        \\<forall>f\\<in>funs_term (Var vb).\n           is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to_pred\n                          (A \\<union> fst ` (set uu_)\\<^sup>+ \\<union>\n                           snd ` (set uu_)\\<^sup>+)\n                          (Var vb) (Fun v va)", "note IH = \"2.IH\""], ["proof (state)\nthis:\n  \\<lbrakk>?z43 \\<in> set T; ?yb43 \\<in> set S;\n   timpls_transformable_to' TI ?z43 ?yb43; wf\\<^sub>t\\<^sub>r\\<^sub>m ?z43;\n   \\<forall>f\\<in>funs_term ?z43.\n      is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n  \\<Longrightarrow> timpls_transformable_to_pred\n                     (A \\<union> fst ` (set TI)\\<^sup>+ \\<union>\n                      snd ` (set TI)\\<^sup>+)\n                     ?z43 ?yb43\n\ngoal (4 subgoals):\n 1. \\<And>TI x y.\n       \\<lbrakk>timpls_transformable_to' TI (Var x) (Var y);\n        wf\\<^sub>t\\<^sub>r\\<^sub>m (Var x);\n        \\<forall>f\\<in>funs_term (Var x).\n           is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to_pred\n                          (A \\<union> fst ` (set TI)\\<^sup>+ \\<union>\n                           snd ` (set TI)\\<^sup>+)\n                          (Var x) (Var y)\n 2. \\<And>TI f T g S.\n       \\<lbrakk>\\<And>z yb.\n                   \\<lbrakk>z \\<in> set T; yb \\<in> set S;\n                    timpls_transformable_to' TI z yb;\n                    wf\\<^sub>t\\<^sub>r\\<^sub>m z;\n                    \\<forall>f\\<in>funs_term z.\n                       is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n                   \\<Longrightarrow> timpls_transformable_to_pred\n(A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+) z yb;\n        timpls_transformable_to' TI (Fun f T) (Fun g S);\n        wf\\<^sub>t\\<^sub>r\\<^sub>m (Fun f T);\n        \\<forall>f\\<in>funs_term (Fun f T).\n           is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to_pred\n                          (A \\<union> fst ` (set TI)\\<^sup>+ \\<union>\n                           snd ` (set TI)\\<^sup>+)\n                          (Fun f T) (Fun g S)\n 3. \\<And>uu_ v va vb.\n       \\<lbrakk>timpls_transformable_to' uu_ (Fun v va) (Var vb);\n        wf\\<^sub>t\\<^sub>r\\<^sub>m (Fun v va);\n        \\<forall>f\\<in>funs_term (Fun v va).\n           is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to_pred\n                          (A \\<union> fst ` (set uu_)\\<^sup>+ \\<union>\n                           snd ` (set uu_)\\<^sup>+)\n                          (Fun v va) (Var vb)\n 4. \\<And>uu_ vb v va.\n       \\<lbrakk>timpls_transformable_to' uu_ (Var vb) (Fun v va);\n        wf\\<^sub>t\\<^sub>r\\<^sub>m (Var vb);\n        \\<forall>f\\<in>funs_term (Var vb).\n           is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to_pred\n                          (A \\<union> fst ` (set uu_)\\<^sup>+ \\<union>\n                           snd ` (set uu_)\\<^sup>+)\n                          (Var vb) (Fun v va)", "note 0 = timpls_transformable_to'_inv[OF prems(1)]"], ["proof (state)\nthis:\n  length T = length S\n  ?i < length T \\<Longrightarrow>\n  timpls_transformable_to' TI (T ! ?i) (S ! ?i)\n  f \\<noteq> g \\<Longrightarrow>\n  is_Abs f \\<and> is_Abs g \\<and> in_trancl TI (the_Abs f) (the_Abs g)\n\ngoal (4 subgoals):\n 1. \\<And>TI x y.\n       \\<lbrakk>timpls_transformable_to' TI (Var x) (Var y);\n        wf\\<^sub>t\\<^sub>r\\<^sub>m (Var x);\n        \\<forall>f\\<in>funs_term (Var x).\n           is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to_pred\n                          (A \\<union> fst ` (set TI)\\<^sup>+ \\<union>\n                           snd ` (set TI)\\<^sup>+)\n                          (Var x) (Var y)\n 2. \\<And>TI f T g S.\n       \\<lbrakk>\\<And>z yb.\n                   \\<lbrakk>z \\<in> set T; yb \\<in> set S;\n                    timpls_transformable_to' TI z yb;\n                    wf\\<^sub>t\\<^sub>r\\<^sub>m z;\n                    \\<forall>f\\<in>funs_term z.\n                       is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n                   \\<Longrightarrow> timpls_transformable_to_pred\n(A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+) z yb;\n        timpls_transformable_to' TI (Fun f T) (Fun g S);\n        wf\\<^sub>t\\<^sub>r\\<^sub>m (Fun f T);\n        \\<forall>f\\<in>funs_term (Fun f T).\n           is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to_pred\n                          (A \\<union> fst ` (set TI)\\<^sup>+ \\<union>\n                           snd ` (set TI)\\<^sup>+)\n                          (Fun f T) (Fun g S)\n 3. \\<And>uu_ v va vb.\n       \\<lbrakk>timpls_transformable_to' uu_ (Fun v va) (Var vb);\n        wf\\<^sub>t\\<^sub>r\\<^sub>m (Fun v va);\n        \\<forall>f\\<in>funs_term (Fun v va).\n           is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to_pred\n                          (A \\<union> fst ` (set uu_)\\<^sup>+ \\<union>\n                           snd ` (set uu_)\\<^sup>+)\n                          (Fun v va) (Var vb)\n 4. \\<And>uu_ vb v va.\n       \\<lbrakk>timpls_transformable_to' uu_ (Var vb) (Fun v va);\n        wf\\<^sub>t\\<^sub>r\\<^sub>m (Var vb);\n        \\<forall>f\\<in>funs_term (Var vb).\n           is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to_pred\n                          (A \\<union> fst ` (set uu_)\\<^sup>+ \\<union>\n                           snd ` (set uu_)\\<^sup>+)\n                          (Var vb) (Fun v va)", "have 1: \"T = []\" \"S = []\" when f: \"f = Abs a\" for a"], ["proof (prove)\ngoal (1 subgoal):\n 1. T = [] &&& S = []", "using f wf_trm_arity[OF prems(2)] 0(1)"], ["proof (prove)\nusing this:\n  f = Abs a\n  length T = arity f\n  length T = length S\n\ngoal (1 subgoal):\n 1. T = [] &&& S = []", "by simp_all"], ["proof (state)\nthis:\n  f = Abs ?a43 \\<Longrightarrow> T = []\n  f = Abs ?a43 \\<Longrightarrow> S = []\n\ngoal (4 subgoals):\n 1. \\<And>TI x y.\n       \\<lbrakk>timpls_transformable_to' TI (Var x) (Var y);\n        wf\\<^sub>t\\<^sub>r\\<^sub>m (Var x);\n        \\<forall>f\\<in>funs_term (Var x).\n           is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to_pred\n                          (A \\<union> fst ` (set TI)\\<^sup>+ \\<union>\n                           snd ` (set TI)\\<^sup>+)\n                          (Var x) (Var y)\n 2. \\<And>TI f T g S.\n       \\<lbrakk>\\<And>z yb.\n                   \\<lbrakk>z \\<in> set T; yb \\<in> set S;\n                    timpls_transformable_to' TI z yb;\n                    wf\\<^sub>t\\<^sub>r\\<^sub>m z;\n                    \\<forall>f\\<in>funs_term z.\n                       is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n                   \\<Longrightarrow> timpls_transformable_to_pred\n(A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+) z yb;\n        timpls_transformable_to' TI (Fun f T) (Fun g S);\n        wf\\<^sub>t\\<^sub>r\\<^sub>m (Fun f T);\n        \\<forall>f\\<in>funs_term (Fun f T).\n           is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to_pred\n                          (A \\<union> fst ` (set TI)\\<^sup>+ \\<union>\n                           snd ` (set TI)\\<^sup>+)\n                          (Fun f T) (Fun g S)\n 3. \\<And>uu_ v va vb.\n       \\<lbrakk>timpls_transformable_to' uu_ (Fun v va) (Var vb);\n        wf\\<^sub>t\\<^sub>r\\<^sub>m (Fun v va);\n        \\<forall>f\\<in>funs_term (Fun v va).\n           is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to_pred\n                          (A \\<union> fst ` (set uu_)\\<^sup>+ \\<union>\n                           snd ` (set uu_)\\<^sup>+)\n                          (Fun v va) (Var vb)\n 4. \\<And>uu_ vb v va.\n       \\<lbrakk>timpls_transformable_to' uu_ (Var vb) (Fun v va);\n        wf\\<^sub>t\\<^sub>r\\<^sub>m (Var vb);\n        \\<forall>f\\<in>funs_term (Var vb).\n           is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to_pred\n                          (A \\<union> fst ` (set uu_)\\<^sup>+ \\<union>\n                           snd ` (set uu_)\\<^sup>+)\n                          (Var vb) (Fun v va)", "have \"\\<forall>f \\<in> funs_term t. is_Abs f \\<longrightarrow> the_Abs f \\<in> A\" when t: \"t \\<in> set T\" for t"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>f\\<in>funs_term t. is_Abs f \\<longrightarrow> the_Abs f \\<in> A", "using t prems(3) funs_term_subterms_eq(1)[of \"Fun f T\"]"], ["proof (prove)\nusing this:\n  t \\<in> set T\n  \\<forall>f\\<in>funs_term (Fun f T).\n     is_Abs f \\<longrightarrow> the_Abs f \\<in> A\n  \\<Union> (funs_term ` subterms (Fun f T)) = funs_term (Fun f T)\n\ngoal (1 subgoal):\n 1. \\<forall>f\\<in>funs_term t. is_Abs f \\<longrightarrow> the_Abs f \\<in> A", "by blast"], ["proof (state)\nthis:\n  ?t43 \\<in> set T \\<Longrightarrow>\n  \\<forall>f\\<in>funs_term ?t43.\n     is_Abs f \\<longrightarrow> the_Abs f \\<in> A\n\ngoal (4 subgoals):\n 1. \\<And>TI x y.\n       \\<lbrakk>timpls_transformable_to' TI (Var x) (Var y);\n        wf\\<^sub>t\\<^sub>r\\<^sub>m (Var x);\n        \\<forall>f\\<in>funs_term (Var x).\n           is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to_pred\n                          (A \\<union> fst ` (set TI)\\<^sup>+ \\<union>\n                           snd ` (set TI)\\<^sup>+)\n                          (Var x) (Var y)\n 2. \\<And>TI f T g S.\n       \\<lbrakk>\\<And>z yb.\n                   \\<lbrakk>z \\<in> set T; yb \\<in> set S;\n                    timpls_transformable_to' TI z yb;\n                    wf\\<^sub>t\\<^sub>r\\<^sub>m z;\n                    \\<forall>f\\<in>funs_term z.\n                       is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n                   \\<Longrightarrow> timpls_transformable_to_pred\n(A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+) z yb;\n        timpls_transformable_to' TI (Fun f T) (Fun g S);\n        wf\\<^sub>t\\<^sub>r\\<^sub>m (Fun f T);\n        \\<forall>f\\<in>funs_term (Fun f T).\n           is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to_pred\n                          (A \\<union> fst ` (set TI)\\<^sup>+ \\<union>\n                           snd ` (set TI)\\<^sup>+)\n                          (Fun f T) (Fun g S)\n 3. \\<And>uu_ v va vb.\n       \\<lbrakk>timpls_transformable_to' uu_ (Fun v va) (Var vb);\n        wf\\<^sub>t\\<^sub>r\\<^sub>m (Fun v va);\n        \\<forall>f\\<in>funs_term (Fun v va).\n           is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to_pred\n                          (A \\<union> fst ` (set uu_)\\<^sup>+ \\<union>\n                           snd ` (set uu_)\\<^sup>+)\n                          (Fun v va) (Var vb)\n 4. \\<And>uu_ vb v va.\n       \\<lbrakk>timpls_transformable_to' uu_ (Var vb) (Fun v va);\n        wf\\<^sub>t\\<^sub>r\\<^sub>m (Var vb);\n        \\<forall>f\\<in>funs_term (Var vb).\n           is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to_pred\n                          (A \\<union> fst ` (set uu_)\\<^sup>+ \\<union>\n                           snd ` (set uu_)\\<^sup>+)\n                          (Var vb) (Fun v va)", "hence 2: \"timpls_transformable_to_pred ?A (T ! i) (S ! i)\"\n    when i: \"i < length T\" for i"], ["proof (prove)\nusing this:\n  ?t43 \\<in> set T \\<Longrightarrow>\n  \\<forall>f\\<in>funs_term ?t43.\n     is_Abs f \\<longrightarrow> the_Abs f \\<in> A\n\ngoal (1 subgoal):\n 1. timpls_transformable_to_pred\n     (A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+)\n     (T ! i) (S ! i)", "using i IH 0(1,2) wf_trm_param[OF prems(2)]"], ["proof (prove)\nusing this:\n  ?t43 \\<in> set T \\<Longrightarrow>\n  \\<forall>f\\<in>funs_term ?t43.\n     is_Abs f \\<longrightarrow> the_Abs f \\<in> A\n  i < length T\n  \\<lbrakk>?z43 \\<in> set T; ?yb43 \\<in> set S;\n   timpls_transformable_to' TI ?z43 ?yb43; wf\\<^sub>t\\<^sub>r\\<^sub>m ?z43;\n   \\<forall>f\\<in>funs_term ?z43.\n      is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n  \\<Longrightarrow> timpls_transformable_to_pred\n                     (A \\<union> fst ` (set TI)\\<^sup>+ \\<union>\n                      snd ` (set TI)\\<^sup>+)\n                     ?z43 ?yb43\n  length T = length S\n  ?i < length T \\<Longrightarrow>\n  timpls_transformable_to' TI (T ! ?i) (S ! ?i)\n  ?t \\<in> set T \\<Longrightarrow> wf\\<^sub>t\\<^sub>r\\<^sub>m ?t\n\ngoal (1 subgoal):\n 1. timpls_transformable_to_pred\n     (A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+)\n     (T ! i) (S ! i)", "by (metis (no_types) in_set_conv_nth)"], ["proof (state)\nthis:\n  ?i43 < length T \\<Longrightarrow>\n  timpls_transformable_to_pred\n   (A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+)\n   (T ! ?i43) (S ! ?i43)\n\ngoal (4 subgoals):\n 1. \\<And>TI x y.\n       \\<lbrakk>timpls_transformable_to' TI (Var x) (Var y);\n        wf\\<^sub>t\\<^sub>r\\<^sub>m (Var x);\n        \\<forall>f\\<in>funs_term (Var x).\n           is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to_pred\n                          (A \\<union> fst ` (set TI)\\<^sup>+ \\<union>\n                           snd ` (set TI)\\<^sup>+)\n                          (Var x) (Var y)\n 2. \\<And>TI f T g S.\n       \\<lbrakk>\\<And>z yb.\n                   \\<lbrakk>z \\<in> set T; yb \\<in> set S;\n                    timpls_transformable_to' TI z yb;\n                    wf\\<^sub>t\\<^sub>r\\<^sub>m z;\n                    \\<forall>f\\<in>funs_term z.\n                       is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n                   \\<Longrightarrow> timpls_transformable_to_pred\n(A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+) z yb;\n        timpls_transformable_to' TI (Fun f T) (Fun g S);\n        wf\\<^sub>t\\<^sub>r\\<^sub>m (Fun f T);\n        \\<forall>f\\<in>funs_term (Fun f T).\n           is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to_pred\n                          (A \\<union> fst ` (set TI)\\<^sup>+ \\<union>\n                           snd ` (set TI)\\<^sup>+)\n                          (Fun f T) (Fun g S)\n 3. \\<And>uu_ v va vb.\n       \\<lbrakk>timpls_transformable_to' uu_ (Fun v va) (Var vb);\n        wf\\<^sub>t\\<^sub>r\\<^sub>m (Fun v va);\n        \\<forall>f\\<in>funs_term (Fun v va).\n           is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to_pred\n                          (A \\<union> fst ` (set uu_)\\<^sup>+ \\<union>\n                           snd ` (set uu_)\\<^sup>+)\n                          (Fun v va) (Var vb)\n 4. \\<And>uu_ vb v va.\n       \\<lbrakk>timpls_transformable_to' uu_ (Var vb) (Fun v va);\n        wf\\<^sub>t\\<^sub>r\\<^sub>m (Var vb);\n        \\<forall>f\\<in>funs_term (Var vb).\n           is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to_pred\n                          (A \\<union> fst ` (set uu_)\\<^sup>+ \\<union>\n                           snd ` (set uu_)\\<^sup>+)\n                          (Var vb) (Fun v va)", "have 3: \"the_Abs f \\<in> ?A\" when f: \"is_Abs f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. the_Abs f\n    \\<in> A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+", "using prems(3) f"], ["proof (prove)\nusing this:\n  \\<forall>f\\<in>funs_term (Fun f T).\n     is_Abs f \\<longrightarrow> the_Abs f \\<in> A\n  is_Abs f\n\ngoal (1 subgoal):\n 1. the_Abs f\n    \\<in> A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+", "by force"], ["proof (state)\nthis:\n  is_Abs f \\<Longrightarrow>\n  the_Abs f\n  \\<in> A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+\n\ngoal (4 subgoals):\n 1. \\<And>TI x y.\n       \\<lbrakk>timpls_transformable_to' TI (Var x) (Var y);\n        wf\\<^sub>t\\<^sub>r\\<^sub>m (Var x);\n        \\<forall>f\\<in>funs_term (Var x).\n           is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to_pred\n                          (A \\<union> fst ` (set TI)\\<^sup>+ \\<union>\n                           snd ` (set TI)\\<^sup>+)\n                          (Var x) (Var y)\n 2. \\<And>TI f T g S.\n       \\<lbrakk>\\<And>z yb.\n                   \\<lbrakk>z \\<in> set T; yb \\<in> set S;\n                    timpls_transformable_to' TI z yb;\n                    wf\\<^sub>t\\<^sub>r\\<^sub>m z;\n                    \\<forall>f\\<in>funs_term z.\n                       is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n                   \\<Longrightarrow> timpls_transformable_to_pred\n(A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+) z yb;\n        timpls_transformable_to' TI (Fun f T) (Fun g S);\n        wf\\<^sub>t\\<^sub>r\\<^sub>m (Fun f T);\n        \\<forall>f\\<in>funs_term (Fun f T).\n           is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to_pred\n                          (A \\<union> fst ` (set TI)\\<^sup>+ \\<union>\n                           snd ` (set TI)\\<^sup>+)\n                          (Fun f T) (Fun g S)\n 3. \\<And>uu_ v va vb.\n       \\<lbrakk>timpls_transformable_to' uu_ (Fun v va) (Var vb);\n        wf\\<^sub>t\\<^sub>r\\<^sub>m (Fun v va);\n        \\<forall>f\\<in>funs_term (Fun v va).\n           is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to_pred\n                          (A \\<union> fst ` (set uu_)\\<^sup>+ \\<union>\n                           snd ` (set uu_)\\<^sup>+)\n                          (Fun v va) (Var vb)\n 4. \\<And>uu_ vb v va.\n       \\<lbrakk>timpls_transformable_to' uu_ (Var vb) (Fun v va);\n        wf\\<^sub>t\\<^sub>r\\<^sub>m (Var vb);\n        \\<forall>f\\<in>funs_term (Var vb).\n           is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to_pred\n                          (A \\<union> fst ` (set uu_)\\<^sup>+ \\<union>\n                           snd ` (set uu_)\\<^sup>+)\n                          (Var vb) (Fun v va)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. timpls_transformable_to_pred\n     (A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+)\n     (Fun f T) (Fun g S)", "proof (cases \"f = g\")"], ["proof (state)\ngoal (2 subgoals):\n 1. f = g \\<Longrightarrow>\n    timpls_transformable_to_pred\n     (A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+)\n     (Fun f T) (Fun g S)\n 2. f \\<noteq> g \\<Longrightarrow>\n    timpls_transformable_to_pred\n     (A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+)\n     (Fun f T) (Fun g S)", "case True"], ["proof (state)\nthis:\n  f = g\n\ngoal (2 subgoals):\n 1. f = g \\<Longrightarrow>\n    timpls_transformable_to_pred\n     (A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+)\n     (Fun f T) (Fun g S)\n 2. f \\<noteq> g \\<Longrightarrow>\n    timpls_transformable_to_pred\n     (A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+)\n     (Fun f T) (Fun g S)", "note fg = True"], ["proof (state)\nthis:\n  f = g\n\ngoal (2 subgoals):\n 1. f = g \\<Longrightarrow>\n    timpls_transformable_to_pred\n     (A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+)\n     (Fun f T) (Fun g S)\n 2. f \\<noteq> g \\<Longrightarrow>\n    timpls_transformable_to_pred\n     (A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+)\n     (Fun f T) (Fun g S)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. timpls_transformable_to_pred\n     (A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+)\n     (Fun f T) (Fun g S)", "proof (cases \"is_Abs f\")"], ["proof (state)\ngoal (2 subgoals):\n 1. is_Abs f \\<Longrightarrow>\n    timpls_transformable_to_pred\n     (A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+)\n     (Fun f T) (Fun g S)\n 2. \\<not> is_Abs f \\<Longrightarrow>\n    timpls_transformable_to_pred\n     (A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+)\n     (Fun f T) (Fun g S)", "case True"], ["proof (state)\nthis:\n  is_Abs f\n\ngoal (2 subgoals):\n 1. is_Abs f \\<Longrightarrow>\n    timpls_transformable_to_pred\n     (A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+)\n     (Fun f T) (Fun g S)\n 2. \\<not> is_Abs f \\<Longrightarrow>\n    timpls_transformable_to_pred\n     (A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+)\n     (Fun f T) (Fun g S)", "then"], ["proof (chain)\npicking this:\n  is_Abs f", "obtain a where a: \"f = Abs a\""], ["proof (prove)\nusing this:\n  is_Abs f\n\ngoal (1 subgoal):\n 1. (\\<And>a. f = Abs a \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "unfolding is_Abs_def"], ["proof (prove)\nusing this:\n  \\<exists>x4. f = Abs x4\n\ngoal (1 subgoal):\n 1. (\\<And>a. f = Abs a \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by moura"], ["proof (state)\nthis:\n  f = Abs a\n\ngoal (2 subgoals):\n 1. is_Abs f \\<Longrightarrow>\n    timpls_transformable_to_pred\n     (A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+)\n     (Fun f T) (Fun g S)\n 2. \\<not> is_Abs f \\<Longrightarrow>\n    timpls_transformable_to_pred\n     (A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+)\n     (Fun f T) (Fun g S)", "thus ?thesis"], ["proof (prove)\nusing this:\n  f = Abs a\n\ngoal (1 subgoal):\n 1. timpls_transformable_to_pred\n     (A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+)\n     (Fun f T) (Fun g S)", "using fg 1[OF a] timpls_transformable_to_pred.Abs[of a ?A a] 3"], ["proof (prove)\nusing this:\n  f = Abs a\n  f = g\n  T = []\n  S = []\n  a \\<in> A \\<union> fst ` (set TI)\\<^sup>+ \\<union>\n          snd ` (set TI)\\<^sup>+ \\<Longrightarrow>\n  timpls_transformable_to_pred\n   (A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+)\n   (Fun (Abs a) []) (Fun (Abs a) [])\n  is_Abs f \\<Longrightarrow>\n  the_Abs f\n  \\<in> A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+\n\ngoal (1 subgoal):\n 1. timpls_transformable_to_pred\n     (A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+)\n     (Fun f T) (Fun g S)", "by simp"], ["proof (state)\nthis:\n  timpls_transformable_to_pred\n   (A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+)\n   (Fun f T) (Fun g S)\n\ngoal (1 subgoal):\n 1. \\<not> is_Abs f \\<Longrightarrow>\n    timpls_transformable_to_pred\n     (A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+)\n     (Fun f T) (Fun g S)", "qed (use fg timpls_transformable_to_pred.Fun[OF _ 0(1) 2, of f] in blast)"], ["proof (state)\nthis:\n  timpls_transformable_to_pred\n   (A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+)\n   (Fun f T) (Fun g S)\n\ngoal (1 subgoal):\n 1. f \\<noteq> g \\<Longrightarrow>\n    timpls_transformable_to_pred\n     (A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+)\n     (Fun f T) (Fun g S)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. f \\<noteq> g \\<Longrightarrow>\n    timpls_transformable_to_pred\n     (A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+)\n     (Fun f T) (Fun g S)", "case False"], ["proof (state)\nthis:\n  f \\<noteq> g\n\ngoal (1 subgoal):\n 1. f \\<noteq> g \\<Longrightarrow>\n    timpls_transformable_to_pred\n     (A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+)\n     (Fun f T) (Fun g S)", "then"], ["proof (chain)\npicking this:\n  f \\<noteq> g", "obtain a b where ab: \"f = Abs a\" \"g = Abs b\" \"(a, b) \\<in> (set TI)\\<^sup>+\""], ["proof (prove)\nusing this:\n  f \\<noteq> g\n\ngoal (1 subgoal):\n 1. (\\<And>a b.\n        \\<lbrakk>f = Abs a; g = Abs b;\n         (a, b) \\<in> (set TI)\\<^sup>+\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using 0(3) in_trancl_closure_iff_in_trancl_fun[of _ _ TI]"], ["proof (prove)\nusing this:\n  f \\<noteq> g\n  f \\<noteq> g \\<Longrightarrow>\n  is_Abs f \\<and> is_Abs g \\<and> in_trancl TI (the_Abs f) (the_Abs g)\n  ((?a, ?b) \\<in> (set TI)\\<^sup>+) = in_trancl TI ?a ?b\n\ngoal (1 subgoal):\n 1. (\\<And>a b.\n        \\<lbrakk>f = Abs a; g = Abs b;\n         (a, b) \\<in> (set TI)\\<^sup>+\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding is_Abs_def the_Abs_def"], ["proof (prove)\nusing this:\n  f \\<noteq> g\n  f \\<noteq> g \\<Longrightarrow>\n  (\\<exists>x4. f = Abs x4) \\<and>\n  (\\<exists>x4. g = Abs x4) \\<and>\n  in_trancl TI (case f of Abs x4 \\<Rightarrow> x4)\n   (case g of Abs x4 \\<Rightarrow> x4)\n  ((?a, ?b) \\<in> (set TI)\\<^sup>+) = in_trancl TI ?a ?b\n\ngoal (1 subgoal):\n 1. (\\<And>a b.\n        \\<lbrakk>f = Abs a; g = Abs b;\n         (a, b) \\<in> (set TI)\\<^sup>+\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  f = Abs a\n  g = Abs b\n  (a, b) \\<in> (set TI)\\<^sup>+\n\ngoal (1 subgoal):\n 1. f \\<noteq> g \\<Longrightarrow>\n    timpls_transformable_to_pred\n     (A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+)\n     (Fun f T) (Fun g S)", "hence \"a \\<in> ?A\" \"b \\<in> ?A\""], ["proof (prove)\nusing this:\n  f = Abs a\n  g = Abs b\n  (a, b) \\<in> (set TI)\\<^sup>+\n\ngoal (1 subgoal):\n 1. a \\<in> A \\<union> fst ` (set TI)\\<^sup>+ \\<union>\n            snd ` (set TI)\\<^sup>+ &&&\n    b \\<in> A \\<union> fst ` (set TI)\\<^sup>+ \\<union>\n            snd ` (set TI)\\<^sup>+", "by force+"], ["proof (state)\nthis:\n  a \\<in> A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+\n  b \\<in> A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+\n\ngoal (1 subgoal):\n 1. f \\<noteq> g \\<Longrightarrow>\n    timpls_transformable_to_pred\n     (A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+)\n     (Fun f T) (Fun g S)", "thus ?thesis"], ["proof (prove)\nusing this:\n  a \\<in> A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+\n  b \\<in> A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+\n\ngoal (1 subgoal):\n 1. timpls_transformable_to_pred\n     (A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+)\n     (Fun f T) (Fun g S)", "using timpls_transformable_to_pred.Abs ab(1,2) 1[OF ab(1)]"], ["proof (prove)\nusing this:\n  a \\<in> A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+\n  b \\<in> A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+\n  ?b \\<in> ?A \\<Longrightarrow>\n  timpls_transformable_to_pred ?A (Fun (Abs ?a) []) (Fun (Abs ?b) [])\n  f = Abs a\n  g = Abs b\n  T = []\n  S = []\n\ngoal (1 subgoal):\n 1. timpls_transformable_to_pred\n     (A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+)\n     (Fun f T) (Fun g S)", "by metis"], ["proof (state)\nthis:\n  timpls_transformable_to_pred\n   (A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+)\n   (Fun f T) (Fun g S)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  timpls_transformable_to_pred\n   (A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+)\n   (Fun f T) (Fun g S)\n\ngoal (3 subgoals):\n 1. \\<And>TI x y.\n       \\<lbrakk>timpls_transformable_to' TI (Var x) (Var y);\n        wf\\<^sub>t\\<^sub>r\\<^sub>m (Var x);\n        \\<forall>f\\<in>funs_term (Var x).\n           is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to_pred\n                          (A \\<union> fst ` (set TI)\\<^sup>+ \\<union>\n                           snd ` (set TI)\\<^sup>+)\n                          (Var x) (Var y)\n 2. \\<And>uu_ v va vb.\n       \\<lbrakk>timpls_transformable_to' uu_ (Fun v va) (Var vb);\n        wf\\<^sub>t\\<^sub>r\\<^sub>m (Fun v va);\n        \\<forall>f\\<in>funs_term (Fun v va).\n           is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to_pred\n                          (A \\<union> fst ` (set uu_)\\<^sup>+ \\<union>\n                           snd ` (set uu_)\\<^sup>+)\n                          (Fun v va) (Var vb)\n 3. \\<And>uu_ vb v va.\n       \\<lbrakk>timpls_transformable_to' uu_ (Var vb) (Fun v va);\n        wf\\<^sub>t\\<^sub>r\\<^sub>m (Var vb);\n        \\<forall>f\\<in>funs_term (Var vb).\n           is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to_pred\n                          (A \\<union> fst ` (set uu_)\\<^sup>+ \\<union>\n                           snd ` (set uu_)\\<^sup>+)\n                          (Var vb) (Fun v va)", "qed (simp_all add: timpls_transformable_to_pred.Var)"], ["", "private"], ["", "lemma timpls_transformable_to_pred_if_equal_mod_timpls:\n  assumes s: \"equal_mod_timpls TI t s\"\n    and t: \"wf\\<^sub>t\\<^sub>r\\<^sub>m t\" \"\\<forall>f \\<in> funs_term t. is_Abs f \\<longrightarrow> the_Abs f \\<in> A\"\n  shows \"timpls_transformable_to_pred (A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+) t s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. timpls_transformable_to_pred\n     (A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+) t s", "using s t"], ["proof (prove)\nusing this:\n  equal_mod_timpls TI t s\n  wf\\<^sub>t\\<^sub>r\\<^sub>m t\n  \\<forall>f\\<in>funs_term t. is_Abs f \\<longrightarrow> the_Abs f \\<in> A\n\ngoal (1 subgoal):\n 1. timpls_transformable_to_pred\n     (A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+) t s", "proof (induction rule: equal_mod_timpls.induct)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>TI x y.\n       \\<lbrakk>equal_mod_timpls TI (Var x) (Var y);\n        wf\\<^sub>t\\<^sub>r\\<^sub>m (Var x);\n        \\<forall>f\\<in>funs_term (Var x).\n           is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to_pred\n                          (A \\<union> fst ` (set TI)\\<^sup>+ \\<union>\n                           snd ` (set TI)\\<^sup>+)\n                          (Var x) (Var y)\n 2. \\<And>TI f T g S.\n       \\<lbrakk>\\<And>z yb.\n                   \\<lbrakk>z \\<in> set T; yb \\<in> set S;\n                    equal_mod_timpls TI z yb; wf\\<^sub>t\\<^sub>r\\<^sub>m z;\n                    \\<forall>f\\<in>funs_term z.\n                       is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n                   \\<Longrightarrow> timpls_transformable_to_pred\n(A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+) z yb;\n        equal_mod_timpls TI (Fun f T) (Fun g S);\n        wf\\<^sub>t\\<^sub>r\\<^sub>m (Fun f T);\n        \\<forall>f\\<in>funs_term (Fun f T).\n           is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to_pred\n                          (A \\<union> fst ` (set TI)\\<^sup>+ \\<union>\n                           snd ` (set TI)\\<^sup>+)\n                          (Fun f T) (Fun g S)\n 3. \\<And>uu_ v va vb.\n       \\<lbrakk>equal_mod_timpls uu_ (Fun v va) (Var vb);\n        wf\\<^sub>t\\<^sub>r\\<^sub>m (Fun v va);\n        \\<forall>f\\<in>funs_term (Fun v va).\n           is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to_pred\n                          (A \\<union> fst ` (set uu_)\\<^sup>+ \\<union>\n                           snd ` (set uu_)\\<^sup>+)\n                          (Fun v va) (Var vb)\n 4. \\<And>uu_ vb v va.\n       \\<lbrakk>equal_mod_timpls uu_ (Var vb) (Fun v va);\n        wf\\<^sub>t\\<^sub>r\\<^sub>m (Var vb);\n        \\<forall>f\\<in>funs_term (Var vb).\n           is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to_pred\n                          (A \\<union> fst ` (set uu_)\\<^sup>+ \\<union>\n                           snd ` (set uu_)\\<^sup>+)\n                          (Var vb) (Fun v va)", "case (2 TI f T g S)"], ["proof (state)\nthis:\n  \\<lbrakk>?z43 \\<in> set T; ?yb43 \\<in> set S;\n   equal_mod_timpls TI ?z43 ?yb43; wf\\<^sub>t\\<^sub>r\\<^sub>m ?z43;\n   \\<forall>f\\<in>funs_term ?z43.\n      is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n  \\<Longrightarrow> timpls_transformable_to_pred\n                     (A \\<union> fst ` (set TI)\\<^sup>+ \\<union>\n                      snd ` (set TI)\\<^sup>+)\n                     ?z43 ?yb43\n  equal_mod_timpls TI (Fun f T) (Fun g S)\n  wf\\<^sub>t\\<^sub>r\\<^sub>m (Fun f T)\n  \\<forall>f\\<in>funs_term (Fun f T).\n     is_Abs f \\<longrightarrow> the_Abs f \\<in> A\n\ngoal (4 subgoals):\n 1. \\<And>TI x y.\n       \\<lbrakk>equal_mod_timpls TI (Var x) (Var y);\n        wf\\<^sub>t\\<^sub>r\\<^sub>m (Var x);\n        \\<forall>f\\<in>funs_term (Var x).\n           is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to_pred\n                          (A \\<union> fst ` (set TI)\\<^sup>+ \\<union>\n                           snd ` (set TI)\\<^sup>+)\n                          (Var x) (Var y)\n 2. \\<And>TI f T g S.\n       \\<lbrakk>\\<And>z yb.\n                   \\<lbrakk>z \\<in> set T; yb \\<in> set S;\n                    equal_mod_timpls TI z yb; wf\\<^sub>t\\<^sub>r\\<^sub>m z;\n                    \\<forall>f\\<in>funs_term z.\n                       is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n                   \\<Longrightarrow> timpls_transformable_to_pred\n(A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+) z yb;\n        equal_mod_timpls TI (Fun f T) (Fun g S);\n        wf\\<^sub>t\\<^sub>r\\<^sub>m (Fun f T);\n        \\<forall>f\\<in>funs_term (Fun f T).\n           is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to_pred\n                          (A \\<union> fst ` (set TI)\\<^sup>+ \\<union>\n                           snd ` (set TI)\\<^sup>+)\n                          (Fun f T) (Fun g S)\n 3. \\<And>uu_ v va vb.\n       \\<lbrakk>equal_mod_timpls uu_ (Fun v va) (Var vb);\n        wf\\<^sub>t\\<^sub>r\\<^sub>m (Fun v va);\n        \\<forall>f\\<in>funs_term (Fun v va).\n           is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to_pred\n                          (A \\<union> fst ` (set uu_)\\<^sup>+ \\<union>\n                           snd ` (set uu_)\\<^sup>+)\n                          (Fun v va) (Var vb)\n 4. \\<And>uu_ vb v va.\n       \\<lbrakk>equal_mod_timpls uu_ (Var vb) (Fun v va);\n        wf\\<^sub>t\\<^sub>r\\<^sub>m (Var vb);\n        \\<forall>f\\<in>funs_term (Var vb).\n           is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to_pred\n                          (A \\<union> fst ` (set uu_)\\<^sup>+ \\<union>\n                           snd ` (set uu_)\\<^sup>+)\n                          (Var vb) (Fun v va)", "let ?A = \"A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+\""], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>TI x y.\n       \\<lbrakk>equal_mod_timpls TI (Var x) (Var y);\n        wf\\<^sub>t\\<^sub>r\\<^sub>m (Var x);\n        \\<forall>f\\<in>funs_term (Var x).\n           is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to_pred\n                          (A \\<union> fst ` (set TI)\\<^sup>+ \\<union>\n                           snd ` (set TI)\\<^sup>+)\n                          (Var x) (Var y)\n 2. \\<And>TI f T g S.\n       \\<lbrakk>\\<And>z yb.\n                   \\<lbrakk>z \\<in> set T; yb \\<in> set S;\n                    equal_mod_timpls TI z yb; wf\\<^sub>t\\<^sub>r\\<^sub>m z;\n                    \\<forall>f\\<in>funs_term z.\n                       is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n                   \\<Longrightarrow> timpls_transformable_to_pred\n(A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+) z yb;\n        equal_mod_timpls TI (Fun f T) (Fun g S);\n        wf\\<^sub>t\\<^sub>r\\<^sub>m (Fun f T);\n        \\<forall>f\\<in>funs_term (Fun f T).\n           is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to_pred\n                          (A \\<union> fst ` (set TI)\\<^sup>+ \\<union>\n                           snd ` (set TI)\\<^sup>+)\n                          (Fun f T) (Fun g S)\n 3. \\<And>uu_ v va vb.\n       \\<lbrakk>equal_mod_timpls uu_ (Fun v va) (Var vb);\n        wf\\<^sub>t\\<^sub>r\\<^sub>m (Fun v va);\n        \\<forall>f\\<in>funs_term (Fun v va).\n           is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to_pred\n                          (A \\<union> fst ` (set uu_)\\<^sup>+ \\<union>\n                           snd ` (set uu_)\\<^sup>+)\n                          (Fun v va) (Var vb)\n 4. \\<And>uu_ vb v va.\n       \\<lbrakk>equal_mod_timpls uu_ (Var vb) (Fun v va);\n        wf\\<^sub>t\\<^sub>r\\<^sub>m (Var vb);\n        \\<forall>f\\<in>funs_term (Var vb).\n           is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to_pred\n                          (A \\<union> fst ` (set uu_)\\<^sup>+ \\<union>\n                           snd ` (set uu_)\\<^sup>+)\n                          (Var vb) (Fun v va)", "note prems = \"2.prems\""], ["proof (state)\nthis:\n  equal_mod_timpls TI (Fun f T) (Fun g S)\n  wf\\<^sub>t\\<^sub>r\\<^sub>m (Fun f T)\n  \\<forall>f\\<in>funs_term (Fun f T).\n     is_Abs f \\<longrightarrow> the_Abs f \\<in> A\n\ngoal (4 subgoals):\n 1. \\<And>TI x y.\n       \\<lbrakk>equal_mod_timpls TI (Var x) (Var y);\n        wf\\<^sub>t\\<^sub>r\\<^sub>m (Var x);\n        \\<forall>f\\<in>funs_term (Var x).\n           is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to_pred\n                          (A \\<union> fst ` (set TI)\\<^sup>+ \\<union>\n                           snd ` (set TI)\\<^sup>+)\n                          (Var x) (Var y)\n 2. \\<And>TI f T g S.\n       \\<lbrakk>\\<And>z yb.\n                   \\<lbrakk>z \\<in> set T; yb \\<in> set S;\n                    equal_mod_timpls TI z yb; wf\\<^sub>t\\<^sub>r\\<^sub>m z;\n                    \\<forall>f\\<in>funs_term z.\n                       is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n                   \\<Longrightarrow> timpls_transformable_to_pred\n(A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+) z yb;\n        equal_mod_timpls TI (Fun f T) (Fun g S);\n        wf\\<^sub>t\\<^sub>r\\<^sub>m (Fun f T);\n        \\<forall>f\\<in>funs_term (Fun f T).\n           is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to_pred\n                          (A \\<union> fst ` (set TI)\\<^sup>+ \\<union>\n                           snd ` (set TI)\\<^sup>+)\n                          (Fun f T) (Fun g S)\n 3. \\<And>uu_ v va vb.\n       \\<lbrakk>equal_mod_timpls uu_ (Fun v va) (Var vb);\n        wf\\<^sub>t\\<^sub>r\\<^sub>m (Fun v va);\n        \\<forall>f\\<in>funs_term (Fun v va).\n           is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to_pred\n                          (A \\<union> fst ` (set uu_)\\<^sup>+ \\<union>\n                           snd ` (set uu_)\\<^sup>+)\n                          (Fun v va) (Var vb)\n 4. \\<And>uu_ vb v va.\n       \\<lbrakk>equal_mod_timpls uu_ (Var vb) (Fun v va);\n        wf\\<^sub>t\\<^sub>r\\<^sub>m (Var vb);\n        \\<forall>f\\<in>funs_term (Var vb).\n           is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to_pred\n                          (A \\<union> fst ` (set uu_)\\<^sup>+ \\<union>\n                           snd ` (set uu_)\\<^sup>+)\n                          (Var vb) (Fun v va)", "note IH = \"2.IH\""], ["proof (state)\nthis:\n  \\<lbrakk>?z43 \\<in> set T; ?yb43 \\<in> set S;\n   equal_mod_timpls TI ?z43 ?yb43; wf\\<^sub>t\\<^sub>r\\<^sub>m ?z43;\n   \\<forall>f\\<in>funs_term ?z43.\n      is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n  \\<Longrightarrow> timpls_transformable_to_pred\n                     (A \\<union> fst ` (set TI)\\<^sup>+ \\<union>\n                      snd ` (set TI)\\<^sup>+)\n                     ?z43 ?yb43\n\ngoal (4 subgoals):\n 1. \\<And>TI x y.\n       \\<lbrakk>equal_mod_timpls TI (Var x) (Var y);\n        wf\\<^sub>t\\<^sub>r\\<^sub>m (Var x);\n        \\<forall>f\\<in>funs_term (Var x).\n           is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to_pred\n                          (A \\<union> fst ` (set TI)\\<^sup>+ \\<union>\n                           snd ` (set TI)\\<^sup>+)\n                          (Var x) (Var y)\n 2. \\<And>TI f T g S.\n       \\<lbrakk>\\<And>z yb.\n                   \\<lbrakk>z \\<in> set T; yb \\<in> set S;\n                    equal_mod_timpls TI z yb; wf\\<^sub>t\\<^sub>r\\<^sub>m z;\n                    \\<forall>f\\<in>funs_term z.\n                       is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n                   \\<Longrightarrow> timpls_transformable_to_pred\n(A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+) z yb;\n        equal_mod_timpls TI (Fun f T) (Fun g S);\n        wf\\<^sub>t\\<^sub>r\\<^sub>m (Fun f T);\n        \\<forall>f\\<in>funs_term (Fun f T).\n           is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to_pred\n                          (A \\<union> fst ` (set TI)\\<^sup>+ \\<union>\n                           snd ` (set TI)\\<^sup>+)\n                          (Fun f T) (Fun g S)\n 3. \\<And>uu_ v va vb.\n       \\<lbrakk>equal_mod_timpls uu_ (Fun v va) (Var vb);\n        wf\\<^sub>t\\<^sub>r\\<^sub>m (Fun v va);\n        \\<forall>f\\<in>funs_term (Fun v va).\n           is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to_pred\n                          (A \\<union> fst ` (set uu_)\\<^sup>+ \\<union>\n                           snd ` (set uu_)\\<^sup>+)\n                          (Fun v va) (Var vb)\n 4. \\<And>uu_ vb v va.\n       \\<lbrakk>equal_mod_timpls uu_ (Var vb) (Fun v va);\n        wf\\<^sub>t\\<^sub>r\\<^sub>m (Var vb);\n        \\<forall>f\\<in>funs_term (Var vb).\n           is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to_pred\n                          (A \\<union> fst ` (set uu_)\\<^sup>+ \\<union>\n                           snd ` (set uu_)\\<^sup>+)\n                          (Var vb) (Fun v va)", "note 0 = equal_mod_timpls_inv[OF prems(1)]"], ["proof (state)\nthis:\n  length T = length S\n  ?i < length T \\<Longrightarrow> equal_mod_timpls TI (T ! ?i) (S ! ?i)\n  f \\<noteq> g \\<Longrightarrow>\n  is_Abs f \\<and>\n  is_Abs g \\<and>\n  ((the_Abs f, the_Abs g) \\<in> set TI \\<or>\n   (the_Abs g, the_Abs f) \\<in> set TI \\<or>\n   (\\<exists>ti\\<in>set TI.\n       (the_Abs f, snd ti) \\<in> set TI \\<and>\n       (the_Abs g, snd ti) \\<in> set TI))\n\ngoal (4 subgoals):\n 1. \\<And>TI x y.\n       \\<lbrakk>equal_mod_timpls TI (Var x) (Var y);\n        wf\\<^sub>t\\<^sub>r\\<^sub>m (Var x);\n        \\<forall>f\\<in>funs_term (Var x).\n           is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to_pred\n                          (A \\<union> fst ` (set TI)\\<^sup>+ \\<union>\n                           snd ` (set TI)\\<^sup>+)\n                          (Var x) (Var y)\n 2. \\<And>TI f T g S.\n       \\<lbrakk>\\<And>z yb.\n                   \\<lbrakk>z \\<in> set T; yb \\<in> set S;\n                    equal_mod_timpls TI z yb; wf\\<^sub>t\\<^sub>r\\<^sub>m z;\n                    \\<forall>f\\<in>funs_term z.\n                       is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n                   \\<Longrightarrow> timpls_transformable_to_pred\n(A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+) z yb;\n        equal_mod_timpls TI (Fun f T) (Fun g S);\n        wf\\<^sub>t\\<^sub>r\\<^sub>m (Fun f T);\n        \\<forall>f\\<in>funs_term (Fun f T).\n           is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to_pred\n                          (A \\<union> fst ` (set TI)\\<^sup>+ \\<union>\n                           snd ` (set TI)\\<^sup>+)\n                          (Fun f T) (Fun g S)\n 3. \\<And>uu_ v va vb.\n       \\<lbrakk>equal_mod_timpls uu_ (Fun v va) (Var vb);\n        wf\\<^sub>t\\<^sub>r\\<^sub>m (Fun v va);\n        \\<forall>f\\<in>funs_term (Fun v va).\n           is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to_pred\n                          (A \\<union> fst ` (set uu_)\\<^sup>+ \\<union>\n                           snd ` (set uu_)\\<^sup>+)\n                          (Fun v va) (Var vb)\n 4. \\<And>uu_ vb v va.\n       \\<lbrakk>equal_mod_timpls uu_ (Var vb) (Fun v va);\n        wf\\<^sub>t\\<^sub>r\\<^sub>m (Var vb);\n        \\<forall>f\\<in>funs_term (Var vb).\n           is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to_pred\n                          (A \\<union> fst ` (set uu_)\\<^sup>+ \\<union>\n                           snd ` (set uu_)\\<^sup>+)\n                          (Var vb) (Fun v va)", "have 1: \"T = []\" \"S = []\" when f: \"f = Abs a\" for a"], ["proof (prove)\ngoal (1 subgoal):\n 1. T = [] &&& S = []", "using f wf_trm_arity[OF prems(2)] 0(1)"], ["proof (prove)\nusing this:\n  f = Abs a\n  length T = arity f\n  length T = length S\n\ngoal (1 subgoal):\n 1. T = [] &&& S = []", "by simp_all"], ["proof (state)\nthis:\n  f = Abs ?a43 \\<Longrightarrow> T = []\n  f = Abs ?a43 \\<Longrightarrow> S = []\n\ngoal (4 subgoals):\n 1. \\<And>TI x y.\n       \\<lbrakk>equal_mod_timpls TI (Var x) (Var y);\n        wf\\<^sub>t\\<^sub>r\\<^sub>m (Var x);\n        \\<forall>f\\<in>funs_term (Var x).\n           is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to_pred\n                          (A \\<union> fst ` (set TI)\\<^sup>+ \\<union>\n                           snd ` (set TI)\\<^sup>+)\n                          (Var x) (Var y)\n 2. \\<And>TI f T g S.\n       \\<lbrakk>\\<And>z yb.\n                   \\<lbrakk>z \\<in> set T; yb \\<in> set S;\n                    equal_mod_timpls TI z yb; wf\\<^sub>t\\<^sub>r\\<^sub>m z;\n                    \\<forall>f\\<in>funs_term z.\n                       is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n                   \\<Longrightarrow> timpls_transformable_to_pred\n(A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+) z yb;\n        equal_mod_timpls TI (Fun f T) (Fun g S);\n        wf\\<^sub>t\\<^sub>r\\<^sub>m (Fun f T);\n        \\<forall>f\\<in>funs_term (Fun f T).\n           is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to_pred\n                          (A \\<union> fst ` (set TI)\\<^sup>+ \\<union>\n                           snd ` (set TI)\\<^sup>+)\n                          (Fun f T) (Fun g S)\n 3. \\<And>uu_ v va vb.\n       \\<lbrakk>equal_mod_timpls uu_ (Fun v va) (Var vb);\n        wf\\<^sub>t\\<^sub>r\\<^sub>m (Fun v va);\n        \\<forall>f\\<in>funs_term (Fun v va).\n           is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to_pred\n                          (A \\<union> fst ` (set uu_)\\<^sup>+ \\<union>\n                           snd ` (set uu_)\\<^sup>+)\n                          (Fun v va) (Var vb)\n 4. \\<And>uu_ vb v va.\n       \\<lbrakk>equal_mod_timpls uu_ (Var vb) (Fun v va);\n        wf\\<^sub>t\\<^sub>r\\<^sub>m (Var vb);\n        \\<forall>f\\<in>funs_term (Var vb).\n           is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to_pred\n                          (A \\<union> fst ` (set uu_)\\<^sup>+ \\<union>\n                           snd ` (set uu_)\\<^sup>+)\n                          (Var vb) (Fun v va)", "have \"\\<forall>f \\<in> funs_term t. is_Abs f \\<longrightarrow> the_Abs f \\<in> A\" when t: \"t \\<in> set T\" for t"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>f\\<in>funs_term t. is_Abs f \\<longrightarrow> the_Abs f \\<in> A", "using t prems(3) funs_term_subterms_eq(1)[of \"Fun f T\"]"], ["proof (prove)\nusing this:\n  t \\<in> set T\n  \\<forall>f\\<in>funs_term (Fun f T).\n     is_Abs f \\<longrightarrow> the_Abs f \\<in> A\n  \\<Union> (funs_term ` subterms (Fun f T)) = funs_term (Fun f T)\n\ngoal (1 subgoal):\n 1. \\<forall>f\\<in>funs_term t. is_Abs f \\<longrightarrow> the_Abs f \\<in> A", "by blast"], ["proof (state)\nthis:\n  ?t43 \\<in> set T \\<Longrightarrow>\n  \\<forall>f\\<in>funs_term ?t43.\n     is_Abs f \\<longrightarrow> the_Abs f \\<in> A\n\ngoal (4 subgoals):\n 1. \\<And>TI x y.\n       \\<lbrakk>equal_mod_timpls TI (Var x) (Var y);\n        wf\\<^sub>t\\<^sub>r\\<^sub>m (Var x);\n        \\<forall>f\\<in>funs_term (Var x).\n           is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to_pred\n                          (A \\<union> fst ` (set TI)\\<^sup>+ \\<union>\n                           snd ` (set TI)\\<^sup>+)\n                          (Var x) (Var y)\n 2. \\<And>TI f T g S.\n       \\<lbrakk>\\<And>z yb.\n                   \\<lbrakk>z \\<in> set T; yb \\<in> set S;\n                    equal_mod_timpls TI z yb; wf\\<^sub>t\\<^sub>r\\<^sub>m z;\n                    \\<forall>f\\<in>funs_term z.\n                       is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n                   \\<Longrightarrow> timpls_transformable_to_pred\n(A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+) z yb;\n        equal_mod_timpls TI (Fun f T) (Fun g S);\n        wf\\<^sub>t\\<^sub>r\\<^sub>m (Fun f T);\n        \\<forall>f\\<in>funs_term (Fun f T).\n           is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to_pred\n                          (A \\<union> fst ` (set TI)\\<^sup>+ \\<union>\n                           snd ` (set TI)\\<^sup>+)\n                          (Fun f T) (Fun g S)\n 3. \\<And>uu_ v va vb.\n       \\<lbrakk>equal_mod_timpls uu_ (Fun v va) (Var vb);\n        wf\\<^sub>t\\<^sub>r\\<^sub>m (Fun v va);\n        \\<forall>f\\<in>funs_term (Fun v va).\n           is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to_pred\n                          (A \\<union> fst ` (set uu_)\\<^sup>+ \\<union>\n                           snd ` (set uu_)\\<^sup>+)\n                          (Fun v va) (Var vb)\n 4. \\<And>uu_ vb v va.\n       \\<lbrakk>equal_mod_timpls uu_ (Var vb) (Fun v va);\n        wf\\<^sub>t\\<^sub>r\\<^sub>m (Var vb);\n        \\<forall>f\\<in>funs_term (Var vb).\n           is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to_pred\n                          (A \\<union> fst ` (set uu_)\\<^sup>+ \\<union>\n                           snd ` (set uu_)\\<^sup>+)\n                          (Var vb) (Fun v va)", "hence 2: \"timpls_transformable_to_pred ?A (T ! i) (S ! i)\"\n    when i: \"i < length T\" for i"], ["proof (prove)\nusing this:\n  ?t43 \\<in> set T \\<Longrightarrow>\n  \\<forall>f\\<in>funs_term ?t43.\n     is_Abs f \\<longrightarrow> the_Abs f \\<in> A\n\ngoal (1 subgoal):\n 1. timpls_transformable_to_pred\n     (A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+)\n     (T ! i) (S ! i)", "using i IH 0(1,2) wf_trm_param[OF prems(2)]"], ["proof (prove)\nusing this:\n  ?t43 \\<in> set T \\<Longrightarrow>\n  \\<forall>f\\<in>funs_term ?t43.\n     is_Abs f \\<longrightarrow> the_Abs f \\<in> A\n  i < length T\n  \\<lbrakk>?z43 \\<in> set T; ?yb43 \\<in> set S;\n   equal_mod_timpls TI ?z43 ?yb43; wf\\<^sub>t\\<^sub>r\\<^sub>m ?z43;\n   \\<forall>f\\<in>funs_term ?z43.\n      is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n  \\<Longrightarrow> timpls_transformable_to_pred\n                     (A \\<union> fst ` (set TI)\\<^sup>+ \\<union>\n                      snd ` (set TI)\\<^sup>+)\n                     ?z43 ?yb43\n  length T = length S\n  ?i < length T \\<Longrightarrow> equal_mod_timpls TI (T ! ?i) (S ! ?i)\n  ?t \\<in> set T \\<Longrightarrow> wf\\<^sub>t\\<^sub>r\\<^sub>m ?t\n\ngoal (1 subgoal):\n 1. timpls_transformable_to_pred\n     (A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+)\n     (T ! i) (S ! i)", "by (metis (no_types) in_set_conv_nth)"], ["proof (state)\nthis:\n  ?i43 < length T \\<Longrightarrow>\n  timpls_transformable_to_pred\n   (A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+)\n   (T ! ?i43) (S ! ?i43)\n\ngoal (4 subgoals):\n 1. \\<And>TI x y.\n       \\<lbrakk>equal_mod_timpls TI (Var x) (Var y);\n        wf\\<^sub>t\\<^sub>r\\<^sub>m (Var x);\n        \\<forall>f\\<in>funs_term (Var x).\n           is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to_pred\n                          (A \\<union> fst ` (set TI)\\<^sup>+ \\<union>\n                           snd ` (set TI)\\<^sup>+)\n                          (Var x) (Var y)\n 2. \\<And>TI f T g S.\n       \\<lbrakk>\\<And>z yb.\n                   \\<lbrakk>z \\<in> set T; yb \\<in> set S;\n                    equal_mod_timpls TI z yb; wf\\<^sub>t\\<^sub>r\\<^sub>m z;\n                    \\<forall>f\\<in>funs_term z.\n                       is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n                   \\<Longrightarrow> timpls_transformable_to_pred\n(A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+) z yb;\n        equal_mod_timpls TI (Fun f T) (Fun g S);\n        wf\\<^sub>t\\<^sub>r\\<^sub>m (Fun f T);\n        \\<forall>f\\<in>funs_term (Fun f T).\n           is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to_pred\n                          (A \\<union> fst ` (set TI)\\<^sup>+ \\<union>\n                           snd ` (set TI)\\<^sup>+)\n                          (Fun f T) (Fun g S)\n 3. \\<And>uu_ v va vb.\n       \\<lbrakk>equal_mod_timpls uu_ (Fun v va) (Var vb);\n        wf\\<^sub>t\\<^sub>r\\<^sub>m (Fun v va);\n        \\<forall>f\\<in>funs_term (Fun v va).\n           is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to_pred\n                          (A \\<union> fst ` (set uu_)\\<^sup>+ \\<union>\n                           snd ` (set uu_)\\<^sup>+)\n                          (Fun v va) (Var vb)\n 4. \\<And>uu_ vb v va.\n       \\<lbrakk>equal_mod_timpls uu_ (Var vb) (Fun v va);\n        wf\\<^sub>t\\<^sub>r\\<^sub>m (Var vb);\n        \\<forall>f\\<in>funs_term (Var vb).\n           is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to_pred\n                          (A \\<union> fst ` (set uu_)\\<^sup>+ \\<union>\n                           snd ` (set uu_)\\<^sup>+)\n                          (Var vb) (Fun v va)", "have 3: \"the_Abs f \\<in> ?A\" when f: \"is_Abs f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. the_Abs f\n    \\<in> A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+", "using prems(3) f"], ["proof (prove)\nusing this:\n  \\<forall>f\\<in>funs_term (Fun f T).\n     is_Abs f \\<longrightarrow> the_Abs f \\<in> A\n  is_Abs f\n\ngoal (1 subgoal):\n 1. the_Abs f\n    \\<in> A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+", "by force"], ["proof (state)\nthis:\n  is_Abs f \\<Longrightarrow>\n  the_Abs f\n  \\<in> A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+\n\ngoal (4 subgoals):\n 1. \\<And>TI x y.\n       \\<lbrakk>equal_mod_timpls TI (Var x) (Var y);\n        wf\\<^sub>t\\<^sub>r\\<^sub>m (Var x);\n        \\<forall>f\\<in>funs_term (Var x).\n           is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to_pred\n                          (A \\<union> fst ` (set TI)\\<^sup>+ \\<union>\n                           snd ` (set TI)\\<^sup>+)\n                          (Var x) (Var y)\n 2. \\<And>TI f T g S.\n       \\<lbrakk>\\<And>z yb.\n                   \\<lbrakk>z \\<in> set T; yb \\<in> set S;\n                    equal_mod_timpls TI z yb; wf\\<^sub>t\\<^sub>r\\<^sub>m z;\n                    \\<forall>f\\<in>funs_term z.\n                       is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n                   \\<Longrightarrow> timpls_transformable_to_pred\n(A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+) z yb;\n        equal_mod_timpls TI (Fun f T) (Fun g S);\n        wf\\<^sub>t\\<^sub>r\\<^sub>m (Fun f T);\n        \\<forall>f\\<in>funs_term (Fun f T).\n           is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to_pred\n                          (A \\<union> fst ` (set TI)\\<^sup>+ \\<union>\n                           snd ` (set TI)\\<^sup>+)\n                          (Fun f T) (Fun g S)\n 3. \\<And>uu_ v va vb.\n       \\<lbrakk>equal_mod_timpls uu_ (Fun v va) (Var vb);\n        wf\\<^sub>t\\<^sub>r\\<^sub>m (Fun v va);\n        \\<forall>f\\<in>funs_term (Fun v va).\n           is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to_pred\n                          (A \\<union> fst ` (set uu_)\\<^sup>+ \\<union>\n                           snd ` (set uu_)\\<^sup>+)\n                          (Fun v va) (Var vb)\n 4. \\<And>uu_ vb v va.\n       \\<lbrakk>equal_mod_timpls uu_ (Var vb) (Fun v va);\n        wf\\<^sub>t\\<^sub>r\\<^sub>m (Var vb);\n        \\<forall>f\\<in>funs_term (Var vb).\n           is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to_pred\n                          (A \\<union> fst ` (set uu_)\\<^sup>+ \\<union>\n                           snd ` (set uu_)\\<^sup>+)\n                          (Var vb) (Fun v va)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. timpls_transformable_to_pred\n     (A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+)\n     (Fun f T) (Fun g S)", "proof (cases \"f = g\")"], ["proof (state)\ngoal (2 subgoals):\n 1. f = g \\<Longrightarrow>\n    timpls_transformable_to_pred\n     (A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+)\n     (Fun f T) (Fun g S)\n 2. f \\<noteq> g \\<Longrightarrow>\n    timpls_transformable_to_pred\n     (A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+)\n     (Fun f T) (Fun g S)", "case True"], ["proof (state)\nthis:\n  f = g\n\ngoal (2 subgoals):\n 1. f = g \\<Longrightarrow>\n    timpls_transformable_to_pred\n     (A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+)\n     (Fun f T) (Fun g S)\n 2. f \\<noteq> g \\<Longrightarrow>\n    timpls_transformable_to_pred\n     (A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+)\n     (Fun f T) (Fun g S)", "note fg = True"], ["proof (state)\nthis:\n  f = g\n\ngoal (2 subgoals):\n 1. f = g \\<Longrightarrow>\n    timpls_transformable_to_pred\n     (A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+)\n     (Fun f T) (Fun g S)\n 2. f \\<noteq> g \\<Longrightarrow>\n    timpls_transformable_to_pred\n     (A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+)\n     (Fun f T) (Fun g S)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. timpls_transformable_to_pred\n     (A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+)\n     (Fun f T) (Fun g S)", "proof (cases \"is_Abs f\")"], ["proof (state)\ngoal (2 subgoals):\n 1. is_Abs f \\<Longrightarrow>\n    timpls_transformable_to_pred\n     (A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+)\n     (Fun f T) (Fun g S)\n 2. \\<not> is_Abs f \\<Longrightarrow>\n    timpls_transformable_to_pred\n     (A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+)\n     (Fun f T) (Fun g S)", "case True"], ["proof (state)\nthis:\n  is_Abs f\n\ngoal (2 subgoals):\n 1. is_Abs f \\<Longrightarrow>\n    timpls_transformable_to_pred\n     (A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+)\n     (Fun f T) (Fun g S)\n 2. \\<not> is_Abs f \\<Longrightarrow>\n    timpls_transformable_to_pred\n     (A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+)\n     (Fun f T) (Fun g S)", "then"], ["proof (chain)\npicking this:\n  is_Abs f", "obtain a where a: \"f = Abs a\""], ["proof (prove)\nusing this:\n  is_Abs f\n\ngoal (1 subgoal):\n 1. (\\<And>a. f = Abs a \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "unfolding is_Abs_def"], ["proof (prove)\nusing this:\n  \\<exists>x4. f = Abs x4\n\ngoal (1 subgoal):\n 1. (\\<And>a. f = Abs a \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by moura"], ["proof (state)\nthis:\n  f = Abs a\n\ngoal (2 subgoals):\n 1. is_Abs f \\<Longrightarrow>\n    timpls_transformable_to_pred\n     (A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+)\n     (Fun f T) (Fun g S)\n 2. \\<not> is_Abs f \\<Longrightarrow>\n    timpls_transformable_to_pred\n     (A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+)\n     (Fun f T) (Fun g S)", "thus ?thesis"], ["proof (prove)\nusing this:\n  f = Abs a\n\ngoal (1 subgoal):\n 1. timpls_transformable_to_pred\n     (A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+)\n     (Fun f T) (Fun g S)", "using fg 1[OF a] timpls_transformable_to_pred.Abs[of a ?A a] 3"], ["proof (prove)\nusing this:\n  f = Abs a\n  f = g\n  T = []\n  S = []\n  a \\<in> A \\<union> fst ` (set TI)\\<^sup>+ \\<union>\n          snd ` (set TI)\\<^sup>+ \\<Longrightarrow>\n  timpls_transformable_to_pred\n   (A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+)\n   (Fun (Abs a) []) (Fun (Abs a) [])\n  is_Abs f \\<Longrightarrow>\n  the_Abs f\n  \\<in> A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+\n\ngoal (1 subgoal):\n 1. timpls_transformable_to_pred\n     (A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+)\n     (Fun f T) (Fun g S)", "by simp"], ["proof (state)\nthis:\n  timpls_transformable_to_pred\n   (A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+)\n   (Fun f T) (Fun g S)\n\ngoal (1 subgoal):\n 1. \\<not> is_Abs f \\<Longrightarrow>\n    timpls_transformable_to_pred\n     (A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+)\n     (Fun f T) (Fun g S)", "qed (use fg timpls_transformable_to_pred.Fun[OF _ 0(1) 2, of f] in blast)"], ["proof (state)\nthis:\n  timpls_transformable_to_pred\n   (A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+)\n   (Fun f T) (Fun g S)\n\ngoal (1 subgoal):\n 1. f \\<noteq> g \\<Longrightarrow>\n    timpls_transformable_to_pred\n     (A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+)\n     (Fun f T) (Fun g S)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. f \\<noteq> g \\<Longrightarrow>\n    timpls_transformable_to_pred\n     (A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+)\n     (Fun f T) (Fun g S)", "case False"], ["proof (state)\nthis:\n  f \\<noteq> g\n\ngoal (1 subgoal):\n 1. f \\<noteq> g \\<Longrightarrow>\n    timpls_transformable_to_pred\n     (A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+)\n     (Fun f T) (Fun g S)", "then"], ["proof (chain)\npicking this:\n  f \\<noteq> g", "obtain a b where ab: \"f = Abs a\" \"g = Abs b\"\n        \"(a, b) \\<in> (set TI)\\<^sup>+ \\<or> (b, a) \\<in> (set TI)\\<^sup>+ \\<or>\n         (\\<exists>ti \\<in> set TI. (a, snd ti) \\<in> (set TI)\\<^sup>+ \\<and> (b, snd ti) \\<in> (set TI)\\<^sup>+)\""], ["proof (prove)\nusing this:\n  f \\<noteq> g\n\ngoal (1 subgoal):\n 1. (\\<And>a b.\n        \\<lbrakk>f = Abs a; g = Abs b;\n         (a, b) \\<in> (set TI)\\<^sup>+ \\<or>\n         (b, a) \\<in> (set TI)\\<^sup>+ \\<or>\n         (\\<exists>ti\\<in>set TI.\n             (a, snd ti) \\<in> (set TI)\\<^sup>+ \\<and>\n             (b, snd ti) \\<in> (set TI)\\<^sup>+)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using 0(3) in_trancl_closure_iff_in_trancl_fun[of _ _ TI]"], ["proof (prove)\nusing this:\n  f \\<noteq> g\n  f \\<noteq> g \\<Longrightarrow>\n  is_Abs f \\<and>\n  is_Abs g \\<and>\n  ((the_Abs f, the_Abs g) \\<in> set TI \\<or>\n   (the_Abs g, the_Abs f) \\<in> set TI \\<or>\n   (\\<exists>ti\\<in>set TI.\n       (the_Abs f, snd ti) \\<in> set TI \\<and>\n       (the_Abs g, snd ti) \\<in> set TI))\n  ((?a, ?b) \\<in> (set TI)\\<^sup>+) = in_trancl TI ?a ?b\n\ngoal (1 subgoal):\n 1. (\\<And>a b.\n        \\<lbrakk>f = Abs a; g = Abs b;\n         (a, b) \\<in> (set TI)\\<^sup>+ \\<or>\n         (b, a) \\<in> (set TI)\\<^sup>+ \\<or>\n         (\\<exists>ti\\<in>set TI.\n             (a, snd ti) \\<in> (set TI)\\<^sup>+ \\<and>\n             (b, snd ti) \\<in> (set TI)\\<^sup>+)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding is_Abs_def the_Abs_def"], ["proof (prove)\nusing this:\n  f \\<noteq> g\n  f \\<noteq> g \\<Longrightarrow>\n  (\\<exists>x4. f = Abs x4) \\<and>\n  (\\<exists>x4. g = Abs x4) \\<and>\n  ((case f of Abs x4 \\<Rightarrow> x4, case g of Abs x4 \\<Rightarrow> x4)\n   \\<in> set TI \\<or>\n   (case g of Abs x4 \\<Rightarrow> x4, case f of Abs x4 \\<Rightarrow> x4)\n   \\<in> set TI \\<or>\n   (\\<exists>ti\\<in>set TI.\n       (case f of Abs x4 \\<Rightarrow> x4, snd ti) \\<in> set TI \\<and>\n       (case g of Abs x4 \\<Rightarrow> x4, snd ti) \\<in> set TI))\n  ((?a, ?b) \\<in> (set TI)\\<^sup>+) = in_trancl TI ?a ?b\n\ngoal (1 subgoal):\n 1. (\\<And>a b.\n        \\<lbrakk>f = Abs a; g = Abs b;\n         (a, b) \\<in> (set TI)\\<^sup>+ \\<or>\n         (b, a) \\<in> (set TI)\\<^sup>+ \\<or>\n         (\\<exists>ti\\<in>set TI.\n             (a, snd ti) \\<in> (set TI)\\<^sup>+ \\<and>\n             (b, snd ti) \\<in> (set TI)\\<^sup>+)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  f = Abs a\n  g = Abs b\n  (a, b) \\<in> (set TI)\\<^sup>+ \\<or>\n  (b, a) \\<in> (set TI)\\<^sup>+ \\<or>\n  (\\<exists>ti\\<in>set TI.\n      (a, snd ti) \\<in> (set TI)\\<^sup>+ \\<and>\n      (b, snd ti) \\<in> (set TI)\\<^sup>+)\n\ngoal (1 subgoal):\n 1. f \\<noteq> g \\<Longrightarrow>\n    timpls_transformable_to_pred\n     (A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+)\n     (Fun f T) (Fun g S)", "hence \"a \\<in> ?A\" \"b \\<in> ?A\""], ["proof (prove)\nusing this:\n  f = Abs a\n  g = Abs b\n  (a, b) \\<in> (set TI)\\<^sup>+ \\<or>\n  (b, a) \\<in> (set TI)\\<^sup>+ \\<or>\n  (\\<exists>ti\\<in>set TI.\n      (a, snd ti) \\<in> (set TI)\\<^sup>+ \\<and>\n      (b, snd ti) \\<in> (set TI)\\<^sup>+)\n\ngoal (1 subgoal):\n 1. a \\<in> A \\<union> fst ` (set TI)\\<^sup>+ \\<union>\n            snd ` (set TI)\\<^sup>+ &&&\n    b \\<in> A \\<union> fst ` (set TI)\\<^sup>+ \\<union>\n            snd ` (set TI)\\<^sup>+", "by force+"], ["proof (state)\nthis:\n  a \\<in> A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+\n  b \\<in> A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+\n\ngoal (1 subgoal):\n 1. f \\<noteq> g \\<Longrightarrow>\n    timpls_transformable_to_pred\n     (A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+)\n     (Fun f T) (Fun g S)", "thus ?thesis"], ["proof (prove)\nusing this:\n  a \\<in> A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+\n  b \\<in> A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+\n\ngoal (1 subgoal):\n 1. timpls_transformable_to_pred\n     (A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+)\n     (Fun f T) (Fun g S)", "using timpls_transformable_to_pred.Abs ab(1,2) 1[OF ab(1)]"], ["proof (prove)\nusing this:\n  a \\<in> A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+\n  b \\<in> A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+\n  ?b \\<in> ?A \\<Longrightarrow>\n  timpls_transformable_to_pred ?A (Fun (Abs ?a) []) (Fun (Abs ?b) [])\n  f = Abs a\n  g = Abs b\n  T = []\n  S = []\n\ngoal (1 subgoal):\n 1. timpls_transformable_to_pred\n     (A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+)\n     (Fun f T) (Fun g S)", "by metis"], ["proof (state)\nthis:\n  timpls_transformable_to_pred\n   (A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+)\n   (Fun f T) (Fun g S)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  timpls_transformable_to_pred\n   (A \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+)\n   (Fun f T) (Fun g S)\n\ngoal (3 subgoals):\n 1. \\<And>TI x y.\n       \\<lbrakk>equal_mod_timpls TI (Var x) (Var y);\n        wf\\<^sub>t\\<^sub>r\\<^sub>m (Var x);\n        \\<forall>f\\<in>funs_term (Var x).\n           is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to_pred\n                          (A \\<union> fst ` (set TI)\\<^sup>+ \\<union>\n                           snd ` (set TI)\\<^sup>+)\n                          (Var x) (Var y)\n 2. \\<And>uu_ v va vb.\n       \\<lbrakk>equal_mod_timpls uu_ (Fun v va) (Var vb);\n        wf\\<^sub>t\\<^sub>r\\<^sub>m (Fun v va);\n        \\<forall>f\\<in>funs_term (Fun v va).\n           is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to_pred\n                          (A \\<union> fst ` (set uu_)\\<^sup>+ \\<union>\n                           snd ` (set uu_)\\<^sup>+)\n                          (Fun v va) (Var vb)\n 3. \\<And>uu_ vb v va.\n       \\<lbrakk>equal_mod_timpls uu_ (Var vb) (Fun v va);\n        wf\\<^sub>t\\<^sub>r\\<^sub>m (Var vb);\n        \\<forall>f\\<in>funs_term (Var vb).\n           is_Abs f \\<longrightarrow> the_Abs f \\<in> A\\<rbrakk>\n       \\<Longrightarrow> timpls_transformable_to_pred\n                          (A \\<union> fst ` (set uu_)\\<^sup>+ \\<union>\n                           snd ` (set uu_)\\<^sup>+)\n                          (Var vb) (Fun v va)", "qed (simp_all add: timpls_transformable_to_pred.Var)"], ["", "lemma timpls_transformable_to_finite:\n  assumes t: \"wf\\<^sub>t\\<^sub>r\\<^sub>m t\"\n  shows \"finite {s. timpls_transformable_to TI t s}\" (is ?P)\n    and \"finite {s. timpls_transformable_to' TI t s}\" (is ?Q)"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite {s. timpls_transformable_to TI t s} &&&\n    finite {s. timpls_transformable_to' TI t s}", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. finite {s. timpls_transformable_to TI t s}\n 2. finite {s. timpls_transformable_to' TI t s}", "let ?A = \"the_Abs ` {f \\<in> funs_term t. is_Abs f} \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+\""], ["proof (state)\ngoal (2 subgoals):\n 1. finite {s. timpls_transformable_to TI t s}\n 2. finite {s. timpls_transformable_to' TI t s}", "have 0: \"finite ?A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite\n     (the_Abs ` {f \\<in> funs_term t. is_Abs f} \\<union>\n      fst ` (set TI)\\<^sup>+ \\<union>\n      snd ` (set TI)\\<^sup>+)", "by auto"], ["proof (state)\nthis:\n  finite\n   (the_Abs ` {f \\<in> funs_term t. is_Abs f} \\<union>\n    fst ` (set TI)\\<^sup>+ \\<union>\n    snd ` (set TI)\\<^sup>+)\n\ngoal (2 subgoals):\n 1. finite {s. timpls_transformable_to TI t s}\n 2. finite {s. timpls_transformable_to' TI t s}", "have 1: \"{s. timpls_transformable_to TI t s} \\<subseteq> {s. timpls_transformable_to_pred ?A t s}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {s. timpls_transformable_to TI t s}\n    \\<subseteq> {s. timpls_transformable_to_pred\n                     (the_Abs ` {f \\<in> funs_term t. is_Abs f} \\<union>\n                      fst ` (set TI)\\<^sup>+ \\<union>\n                      snd ` (set TI)\\<^sup>+)\n                     t s}", "using timpls_transformable_to_pred_if_timpls_transformable_to[OF _ t]"], ["proof (prove)\nusing this:\n  \\<lbrakk>timpls_transformable_to ?TI t ?s;\n   \\<forall>f\\<in>funs_term t.\n      is_Abs f \\<longrightarrow> the_Abs f \\<in> ?A\\<rbrakk>\n  \\<Longrightarrow> timpls_transformable_to_pred\n                     (?A \\<union> fst ` (set ?TI)\\<^sup>+ \\<union>\n                      snd ` (set ?TI)\\<^sup>+)\n                     t ?s\n\ngoal (1 subgoal):\n 1. {s. timpls_transformable_to TI t s}\n    \\<subseteq> {s. timpls_transformable_to_pred\n                     (the_Abs ` {f \\<in> funs_term t. is_Abs f} \\<union>\n                      fst ` (set TI)\\<^sup>+ \\<union>\n                      snd ` (set TI)\\<^sup>+)\n                     t s}", "by auto"], ["proof (state)\nthis:\n  {s. timpls_transformable_to TI t s}\n  \\<subseteq> {s. timpls_transformable_to_pred\n                   (the_Abs ` {f \\<in> funs_term t. is_Abs f} \\<union>\n                    fst ` (set TI)\\<^sup>+ \\<union>\n                    snd ` (set TI)\\<^sup>+)\n                   t s}\n\ngoal (2 subgoals):\n 1. finite {s. timpls_transformable_to TI t s}\n 2. finite {s. timpls_transformable_to' TI t s}", "have 2: \"{s. timpls_transformable_to' TI t s} \\<subseteq> {s. timpls_transformable_to_pred ?A t s}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {s. timpls_transformable_to' TI t s}\n    \\<subseteq> {s. timpls_transformable_to_pred\n                     (the_Abs ` {f \\<in> funs_term t. is_Abs f} \\<union>\n                      fst ` (set TI)\\<^sup>+ \\<union>\n                      snd ` (set TI)\\<^sup>+)\n                     t s}", "using timpls_transformable_to_pred_if_timpls_transformable_to'[OF _ t]"], ["proof (prove)\nusing this:\n  \\<lbrakk>timpls_transformable_to' ?TI t ?s;\n   \\<forall>f\\<in>funs_term t.\n      is_Abs f \\<longrightarrow> the_Abs f \\<in> ?A\\<rbrakk>\n  \\<Longrightarrow> timpls_transformable_to_pred\n                     (?A \\<union> fst ` (set ?TI)\\<^sup>+ \\<union>\n                      snd ` (set ?TI)\\<^sup>+)\n                     t ?s\n\ngoal (1 subgoal):\n 1. {s. timpls_transformable_to' TI t s}\n    \\<subseteq> {s. timpls_transformable_to_pred\n                     (the_Abs ` {f \\<in> funs_term t. is_Abs f} \\<union>\n                      fst ` (set TI)\\<^sup>+ \\<union>\n                      snd ` (set TI)\\<^sup>+)\n                     t s}", "by auto"], ["proof (state)\nthis:\n  {s. timpls_transformable_to' TI t s}\n  \\<subseteq> {s. timpls_transformable_to_pred\n                   (the_Abs ` {f \\<in> funs_term t. is_Abs f} \\<union>\n                    fst ` (set TI)\\<^sup>+ \\<union>\n                    snd ` (set TI)\\<^sup>+)\n                   t s}\n\ngoal (2 subgoals):\n 1. finite {s. timpls_transformable_to TI t s}\n 2. finite {s. timpls_transformable_to' TI t s}", "show ?P"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite {s. timpls_transformable_to TI t s}", "using timpls_transformable_to_pred_finite[OF 0 t] finite_subset[OF 1]"], ["proof (prove)\nusing this:\n  finite\n   {s. timpls_transformable_to_pred\n        (the_Abs ` {f \\<in> funs_term t. is_Abs f} \\<union>\n         fst ` (set TI)\\<^sup>+ \\<union>\n         snd ` (set TI)\\<^sup>+)\n        t s}\n  finite\n   {s. timpls_transformable_to_pred\n        (the_Abs ` {f \\<in> funs_term t. is_Abs f} \\<union>\n         fst ` (set TI)\\<^sup>+ \\<union>\n         snd ` (set TI)\\<^sup>+)\n        t s} \\<Longrightarrow>\n  finite {s. timpls_transformable_to TI t s}\n\ngoal (1 subgoal):\n 1. finite {s. timpls_transformable_to TI t s}", "by blast"], ["proof (state)\nthis:\n  finite {s. timpls_transformable_to TI t s}\n\ngoal (1 subgoal):\n 1. finite {s. timpls_transformable_to' TI t s}", "show ?Q"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite {s. timpls_transformable_to' TI t s}", "using timpls_transformable_to_pred_finite[OF 0 t] finite_subset[OF 2]"], ["proof (prove)\nusing this:\n  finite\n   {s. timpls_transformable_to_pred\n        (the_Abs ` {f \\<in> funs_term t. is_Abs f} \\<union>\n         fst ` (set TI)\\<^sup>+ \\<union>\n         snd ` (set TI)\\<^sup>+)\n        t s}\n  finite\n   {s. timpls_transformable_to_pred\n        (the_Abs ` {f \\<in> funs_term t. is_Abs f} \\<union>\n         fst ` (set TI)\\<^sup>+ \\<union>\n         snd ` (set TI)\\<^sup>+)\n        t s} \\<Longrightarrow>\n  finite {s. timpls_transformable_to' TI t s}\n\ngoal (1 subgoal):\n 1. finite {s. timpls_transformable_to' TI t s}", "by blast"], ["proof (state)\nthis:\n  finite {s. timpls_transformable_to' TI t s}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma equal_mod_timpls_finite:\n  assumes t: \"wf\\<^sub>t\\<^sub>r\\<^sub>m t\"\n  shows \"finite {s. equal_mod_timpls TI t s}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite {s. equal_mod_timpls TI t s}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. finite {s. equal_mod_timpls TI t s}", "let ?A = \"the_Abs ` {f \\<in> funs_term t. is_Abs f} \\<union> fst ` (set TI)\\<^sup>+ \\<union> snd ` (set TI)\\<^sup>+\""], ["proof (state)\ngoal (1 subgoal):\n 1. finite {s. equal_mod_timpls TI t s}", "have 0: \"finite ?A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite\n     (the_Abs ` {f \\<in> funs_term t. is_Abs f} \\<union>\n      fst ` (set TI)\\<^sup>+ \\<union>\n      snd ` (set TI)\\<^sup>+)", "by auto"], ["proof (state)\nthis:\n  finite\n   (the_Abs ` {f \\<in> funs_term t. is_Abs f} \\<union>\n    fst ` (set TI)\\<^sup>+ \\<union>\n    snd ` (set TI)\\<^sup>+)\n\ngoal (1 subgoal):\n 1. finite {s. equal_mod_timpls TI t s}", "have 1: \"{s. equal_mod_timpls TI t s} \\<subseteq> {s. timpls_transformable_to_pred ?A t s}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {s. equal_mod_timpls TI t s}\n    \\<subseteq> {s. timpls_transformable_to_pred\n                     (the_Abs ` {f \\<in> funs_term t. is_Abs f} \\<union>\n                      fst ` (set TI)\\<^sup>+ \\<union>\n                      snd ` (set TI)\\<^sup>+)\n                     t s}", "using timpls_transformable_to_pred_if_equal_mod_timpls[OF _ t]"], ["proof (prove)\nusing this:\n  \\<lbrakk>equal_mod_timpls ?TI t ?s;\n   \\<forall>f\\<in>funs_term t.\n      is_Abs f \\<longrightarrow> the_Abs f \\<in> ?A\\<rbrakk>\n  \\<Longrightarrow> timpls_transformable_to_pred\n                     (?A \\<union> fst ` (set ?TI)\\<^sup>+ \\<union>\n                      snd ` (set ?TI)\\<^sup>+)\n                     t ?s\n\ngoal (1 subgoal):\n 1. {s. equal_mod_timpls TI t s}\n    \\<subseteq> {s. timpls_transformable_to_pred\n                     (the_Abs ` {f \\<in> funs_term t. is_Abs f} \\<union>\n                      fst ` (set TI)\\<^sup>+ \\<union>\n                      snd ` (set TI)\\<^sup>+)\n                     t s}", "by auto"], ["proof (state)\nthis:\n  {s. equal_mod_timpls TI t s}\n  \\<subseteq> {s. timpls_transformable_to_pred\n                   (the_Abs ` {f \\<in> funs_term t. is_Abs f} \\<union>\n                    fst ` (set TI)\\<^sup>+ \\<union>\n                    snd ` (set TI)\\<^sup>+)\n                   t s}\n\ngoal (1 subgoal):\n 1. finite {s. equal_mod_timpls TI t s}", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite {s. equal_mod_timpls TI t s}", "using timpls_transformable_to_pred_finite[OF 0 t] finite_subset[OF 1]"], ["proof (prove)\nusing this:\n  finite\n   {s. timpls_transformable_to_pred\n        (the_Abs ` {f \\<in> funs_term t. is_Abs f} \\<union>\n         fst ` (set TI)\\<^sup>+ \\<union>\n         snd ` (set TI)\\<^sup>+)\n        t s}\n  finite\n   {s. timpls_transformable_to_pred\n        (the_Abs ` {f \\<in> funs_term t. is_Abs f} \\<union>\n         fst ` (set TI)\\<^sup>+ \\<union>\n         snd ` (set TI)\\<^sup>+)\n        t s} \\<Longrightarrow>\n  finite {s. equal_mod_timpls TI t s}\n\ngoal (1 subgoal):\n 1. finite {s. equal_mod_timpls TI t s}", "by blast"], ["proof (state)\nthis:\n  finite {s. equal_mod_timpls TI t s}\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "lemma intruder_synth_mod_timpls_is_synth_timpl_closure_set:\n  fixes t::\"(('fun, 'atom, 'sets) prot_fun, 'a) term\" and TI TI'\n  assumes \"set TI' = {(a,b) \\<in> (set TI)\\<^sup>+. a \\<noteq> b}\"\n  shows \"intruder_synth_mod_timpls M TI' t \\<longleftrightarrow> timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t\"\n      (is \"?C t \\<longleftrightarrow> ?D t\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. intruder_synth_mod_timpls M TI' t =\n    (timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. intruder_synth_mod_timpls M TI' t =\n    (timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t)", "have *: \"(\\<exists>m \\<in> M. timpls_transformable_to TI' m t) \\<longleftrightarrow> t \\<in> timpl_closure_set M (set TI)\"\n    when \"set TI' = {(a,b) \\<in> (set TI)\\<^sup>+. a \\<noteq> b}\"\n    for M TI TI' and t::\"(('fun, 'atom, 'sets) prot_fun, 'a) term\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>m\\<in>M. timpls_transformable_to TI' m t) =\n    (t \\<in> timpl_closure_set M (set TI))", "using timpls_transformable_to_iff_in_timpl_closure[OF that]\n          timpl_closure_set_is_timpl_closure_union[of M \"set TI\"]\n          timpl_closure_set_timpls_trancl_eq[of M \"set TI\"]\n          timpl_closure_set_timpls_trancl_eq'[of M \"set TI\"]"], ["proof (prove)\nusing this:\n  timpls_transformable_to TI' ?s ?t = (?t \\<in> timpl_closure ?s (set TI))\n  timpl_closure_set M (set TI) = (\\<Union>t\\<in>M. timpl_closure t (set TI))\n  timpl_closure_set M ((set TI)\\<^sup>+) = timpl_closure_set M (set TI)\n  timpl_closure_set M\n   {(a, b). (a, b) \\<in> (set TI)\\<^sup>+ \\<and> a \\<noteq> b} =\n  timpl_closure_set M (set TI)\n\ngoal (1 subgoal):\n 1. (\\<exists>m\\<in>M. timpls_transformable_to TI' m t) =\n    (t \\<in> timpl_closure_set M (set TI))", "by auto"], ["proof (state)\nthis:\n  set ?TI'43 =\n  {(a, b).\n   (a, b) \\<in> (set ?TI43)\\<^sup>+ \\<and> a \\<noteq> b} \\<Longrightarrow>\n  (\\<exists>m\\<in>?M43. timpls_transformable_to ?TI'43 m ?t43) =\n  (?t43 \\<in> timpl_closure_set ?M43 (set ?TI43))\n\ngoal (1 subgoal):\n 1. intruder_synth_mod_timpls M TI' t =\n    (timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t)", "show \"?C t \\<longleftrightarrow> ?D t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. intruder_synth_mod_timpls M TI' t =\n    intruder_synth (timpl_closure_set (set M) (set TI)) t", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. intruder_synth_mod_timpls M TI' t \\<Longrightarrow>\n    intruder_synth (timpl_closure_set (set M) (set TI)) t\n 2. intruder_synth (timpl_closure_set (set M) (set TI)) t \\<Longrightarrow>\n    intruder_synth_mod_timpls M TI' t", "show \"?C t \\<Longrightarrow> ?D t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. intruder_synth_mod_timpls M TI' t \\<Longrightarrow>\n    intruder_synth (timpl_closure_set (set M) (set TI)) t", "using assms"], ["proof (prove)\nusing this:\n  set TI' = {(a, b). (a, b) \\<in> (set TI)\\<^sup>+ \\<and> a \\<noteq> b}\n\ngoal (1 subgoal):\n 1. intruder_synth_mod_timpls M TI' t \\<Longrightarrow>\n    intruder_synth (timpl_closure_set (set M) (set TI)) t", "proof (induction t arbitrary: M TI TI' rule: intruder_synth_mod_timpls.induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>M TI x Ma TIa TI'.\n       \\<lbrakk>intruder_synth_mod_timpls Ma TI' (Var x);\n        set TI' =\n        {(a, b).\n         (a, b) \\<in> (set TIa)\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n       \\<Longrightarrow> timpl_closure_set (set Ma)\n                          (set TIa) \\<turnstile>\\<^sub>c\n                         Var x\n 2. \\<And>M TI f T Ma TIa TI'.\n       \\<lbrakk>\\<And>z M TI TI'.\n                   \\<lbrakk>z \\<in> set T;\n                    intruder_synth_mod_timpls M TI' z;\n                    set TI' =\n                    {(a, b).\n                     (a, b) \\<in> (set TI)\\<^sup>+ \\<and>\n                     a \\<noteq> b}\\<rbrakk>\n                   \\<Longrightarrow> timpl_closure_set (set M)\n(set TI) \\<turnstile>\\<^sub>c\n                                     z;\n        intruder_synth_mod_timpls Ma TI' (Fun f T);\n        set TI' =\n        {(a, b).\n         (a, b) \\<in> (set TIa)\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n       \\<Longrightarrow> timpl_closure_set (set Ma)\n                          (set TIa) \\<turnstile>\\<^sub>c\n                         Fun f T", "case (1 M TI' x)"], ["proof (state)\nthis:\n  intruder_synth_mod_timpls M TI' (Var x)\n  set TI' =\n  {a. case a of\n      (a, b) \\<Rightarrow>\n        (a, b) \\<in> (set TI)\\<^sup>+ \\<and> a \\<noteq> b}\n\ngoal (2 subgoals):\n 1. \\<And>M TI x Ma TIa TI'.\n       \\<lbrakk>intruder_synth_mod_timpls Ma TI' (Var x);\n        set TI' =\n        {(a, b).\n         (a, b) \\<in> (set TIa)\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n       \\<Longrightarrow> timpl_closure_set (set Ma)\n                          (set TIa) \\<turnstile>\\<^sub>c\n                         Var x\n 2. \\<And>M TI f T Ma TIa TI'.\n       \\<lbrakk>\\<And>z M TI TI'.\n                   \\<lbrakk>z \\<in> set T;\n                    intruder_synth_mod_timpls M TI' z;\n                    set TI' =\n                    {(a, b).\n                     (a, b) \\<in> (set TI)\\<^sup>+ \\<and>\n                     a \\<noteq> b}\\<rbrakk>\n                   \\<Longrightarrow> timpl_closure_set (set M)\n(set TI) \\<turnstile>\\<^sub>c\n                                     z;\n        intruder_synth_mod_timpls Ma TI' (Fun f T);\n        set TI' =\n        {(a, b).\n         (a, b) \\<in> (set TIa)\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n       \\<Longrightarrow> timpl_closure_set (set Ma)\n                          (set TIa) \\<turnstile>\\<^sub>c\n                         Fun f T", "hence \"Var x \\<in> timpl_closure_set (set M) (set TI)\""], ["proof (prove)\nusing this:\n  intruder_synth_mod_timpls M TI' (Var x)\n  set TI' =\n  {a. case a of\n      (a, b) \\<Rightarrow>\n        (a, b) \\<in> (set TI)\\<^sup>+ \\<and> a \\<noteq> b}\n\ngoal (1 subgoal):\n 1. Var x \\<in> timpl_closure_set (set M) (set TI)", "using timpl_closure.FP member_def"], ["proof (prove)\nusing this:\n  intruder_synth_mod_timpls M TI' (Var x)\n  set TI' =\n  {a. case a of\n      (a, b) \\<Rightarrow>\n        (a, b) \\<in> (set TI)\\<^sup>+ \\<and> a \\<noteq> b}\n  ?t \\<in> timpl_closure ?t ?TI\n  List.member ?xs ?x = (?x \\<in> set ?xs)\n\ngoal (1 subgoal):\n 1. Var x \\<in> timpl_closure_set (set M) (set TI)", "unfolding timpl_closure_set_def"], ["proof (prove)\nusing this:\n  intruder_synth_mod_timpls M TI' (Var x)\n  set TI' =\n  {a. case a of\n      (a, b) \\<Rightarrow>\n        (a, b) \\<in> (set TI)\\<^sup>+ \\<and> a \\<noteq> b}\n  ?t \\<in> timpl_closure ?t ?TI\n  List.member ?xs ?x = (?x \\<in> set ?xs)\n\ngoal (1 subgoal):\n 1. Var x \\<in> (\\<Union>t\\<in>set M. timpl_closure t (set TI))", "by force"], ["proof (state)\nthis:\n  Var x \\<in> timpl_closure_set (set M) (set TI)\n\ngoal (2 subgoals):\n 1. \\<And>M TI x Ma TIa TI'.\n       \\<lbrakk>intruder_synth_mod_timpls Ma TI' (Var x);\n        set TI' =\n        {(a, b).\n         (a, b) \\<in> (set TIa)\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n       \\<Longrightarrow> timpl_closure_set (set Ma)\n                          (set TIa) \\<turnstile>\\<^sub>c\n                         Var x\n 2. \\<And>M TI f T Ma TIa TI'.\n       \\<lbrakk>\\<And>z M TI TI'.\n                   \\<lbrakk>z \\<in> set T;\n                    intruder_synth_mod_timpls M TI' z;\n                    set TI' =\n                    {(a, b).\n                     (a, b) \\<in> (set TI)\\<^sup>+ \\<and>\n                     a \\<noteq> b}\\<rbrakk>\n                   \\<Longrightarrow> timpl_closure_set (set M)\n(set TI) \\<turnstile>\\<^sub>c\n                                     z;\n        intruder_synth_mod_timpls Ma TI' (Fun f T);\n        set TI' =\n        {(a, b).\n         (a, b) \\<in> (set TIa)\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n       \\<Longrightarrow> timpl_closure_set (set Ma)\n                          (set TIa) \\<turnstile>\\<^sub>c\n                         Fun f T", "thus ?case"], ["proof (prove)\nusing this:\n  Var x \\<in> timpl_closure_set (set M) (set TI)\n\ngoal (1 subgoal):\n 1. intruder_synth (timpl_closure_set (set M) (set TI)) (Var x)", "by simp"], ["proof (state)\nthis:\n  intruder_synth (timpl_closure_set (set M) (set TI)) (Var x)\n\ngoal (1 subgoal):\n 1. \\<And>M TI f T Ma TIa TI'.\n       \\<lbrakk>\\<And>z M TI TI'.\n                   \\<lbrakk>z \\<in> set T;\n                    intruder_synth_mod_timpls M TI' z;\n                    set TI' =\n                    {(a, b).\n                     (a, b) \\<in> (set TI)\\<^sup>+ \\<and>\n                     a \\<noteq> b}\\<rbrakk>\n                   \\<Longrightarrow> timpl_closure_set (set M)\n(set TI) \\<turnstile>\\<^sub>c\n                                     z;\n        intruder_synth_mod_timpls Ma TI' (Fun f T);\n        set TI' =\n        {(a, b).\n         (a, b) \\<in> (set TIa)\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n       \\<Longrightarrow> timpl_closure_set (set Ma)\n                          (set TIa) \\<turnstile>\\<^sub>c\n                         Fun f T", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>M TI f T Ma TIa TI'.\n       \\<lbrakk>\\<And>z M TI TI'.\n                   \\<lbrakk>z \\<in> set T;\n                    intruder_synth_mod_timpls M TI' z;\n                    set TI' =\n                    {(a, b).\n                     (a, b) \\<in> (set TI)\\<^sup>+ \\<and>\n                     a \\<noteq> b}\\<rbrakk>\n                   \\<Longrightarrow> timpl_closure_set (set M)\n(set TI) \\<turnstile>\\<^sub>c\n                                     z;\n        intruder_synth_mod_timpls Ma TI' (Fun f T);\n        set TI' =\n        {(a, b).\n         (a, b) \\<in> (set TIa)\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n       \\<Longrightarrow> timpl_closure_set (set Ma)\n                          (set TIa) \\<turnstile>\\<^sub>c\n                         Fun f T", "case (2 M TI f T)"], ["proof (state)\nthis:\n  \\<lbrakk>?z43 \\<in> set T; intruder_synth_mod_timpls ?M43 ?TI'43 ?z43;\n   set ?TI'43 =\n   {a. case a of\n       (a, b) \\<Rightarrow>\n         (a, b) \\<in> (set ?TI43)\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n  \\<Longrightarrow> intruder_synth\n                     (timpl_closure_set (set ?M43) (set ?TI43)) ?z43\n  intruder_synth_mod_timpls M TI' (Fun f T)\n  set TI' =\n  {a. case a of\n      (a, b) \\<Rightarrow>\n        (a, b) \\<in> (set TI)\\<^sup>+ \\<and> a \\<noteq> b}\n\ngoal (1 subgoal):\n 1. \\<And>M TI f T Ma TIa TI'.\n       \\<lbrakk>\\<And>z M TI TI'.\n                   \\<lbrakk>z \\<in> set T;\n                    intruder_synth_mod_timpls M TI' z;\n                    set TI' =\n                    {(a, b).\n                     (a, b) \\<in> (set TI)\\<^sup>+ \\<and>\n                     a \\<noteq> b}\\<rbrakk>\n                   \\<Longrightarrow> timpl_closure_set (set M)\n(set TI) \\<turnstile>\\<^sub>c\n                                     z;\n        intruder_synth_mod_timpls Ma TI' (Fun f T);\n        set TI' =\n        {(a, b).\n         (a, b) \\<in> (set TIa)\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n       \\<Longrightarrow> timpl_closure_set (set Ma)\n                          (set TIa) \\<turnstile>\\<^sub>c\n                         Fun f T", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. intruder_synth (timpl_closure_set (set M) (set TI)) (Fun f T)", "proof (cases \"\\<exists>m \\<in> set M. timpls_transformable_to TI' m (Fun f T)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>m\\<in>set M.\n       timpls_transformable_to TI' m (Fun f T) \\<Longrightarrow>\n    intruder_synth (timpl_closure_set (set M) (set TI)) (Fun f T)\n 2. \\<not> (\\<exists>m\\<in>set M.\n               timpls_transformable_to TI' m (Fun f T)) \\<Longrightarrow>\n    intruder_synth (timpl_closure_set (set M) (set TI)) (Fun f T)", "case True"], ["proof (state)\nthis:\n  \\<exists>m\\<in>set M. timpls_transformable_to TI' m (Fun f T)\n\ngoal (2 subgoals):\n 1. \\<exists>m\\<in>set M.\n       timpls_transformable_to TI' m (Fun f T) \\<Longrightarrow>\n    intruder_synth (timpl_closure_set (set M) (set TI)) (Fun f T)\n 2. \\<not> (\\<exists>m\\<in>set M.\n               timpls_transformable_to TI' m (Fun f T)) \\<Longrightarrow>\n    intruder_synth (timpl_closure_set (set M) (set TI)) (Fun f T)", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>m\\<in>set M. timpls_transformable_to TI' m (Fun f T)\n\ngoal (1 subgoal):\n 1. intruder_synth (timpl_closure_set (set M) (set TI)) (Fun f T)", "using \"2.prems\" *[of TI' TI \"set M\" \"Fun f T\"]\n                intruder_synth.AxiomC[of \"Fun f T\" \"timpl_closure_set (set M) (set TI)\"]"], ["proof (prove)\nusing this:\n  \\<exists>m\\<in>set M. timpls_transformable_to TI' m (Fun f T)\n  intruder_synth_mod_timpls M TI' (Fun f T)\n  set TI' =\n  {a. case a of\n      (a, b) \\<Rightarrow>\n        (a, b) \\<in> (set TI)\\<^sup>+ \\<and> a \\<noteq> b}\n  set TI' =\n  {(a, b).\n   (a, b) \\<in> (set TI)\\<^sup>+ \\<and> a \\<noteq> b} \\<Longrightarrow>\n  (\\<exists>m\\<in>set M. timpls_transformable_to TI' m (Fun f T)) =\n  (Fun f T \\<in> timpl_closure_set (set M) (set TI))\n  Fun f T \\<in> timpl_closure_set (set M) (set TI) \\<Longrightarrow>\n  timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c Fun f T\n\ngoal (1 subgoal):\n 1. intruder_synth (timpl_closure_set (set M) (set TI)) (Fun f T)", "by blast"], ["proof (state)\nthis:\n  intruder_synth (timpl_closure_set (set M) (set TI)) (Fun f T)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>m\\<in>set M.\n               timpls_transformable_to TI' m (Fun f T)) \\<Longrightarrow>\n    intruder_synth (timpl_closure_set (set M) (set TI)) (Fun f T)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>m\\<in>set M.\n               timpls_transformable_to TI' m (Fun f T)) \\<Longrightarrow>\n    intruder_synth (timpl_closure_set (set M) (set TI)) (Fun f T)", "case False"], ["proof (state)\nthis:\n  \\<not> (\\<exists>m\\<in>set M. timpls_transformable_to TI' m (Fun f T))\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>m\\<in>set M.\n               timpls_transformable_to TI' m (Fun f T)) \\<Longrightarrow>\n    intruder_synth (timpl_closure_set (set M) (set TI)) (Fun f T)", "hence \"\\<not>(list_ex (\\<lambda>t. timpls_transformable_to TI' t (Fun f T)) M)\""], ["proof (prove)\nusing this:\n  \\<not> (\\<exists>m\\<in>set M. timpls_transformable_to TI' m (Fun f T))\n\ngoal (1 subgoal):\n 1. \\<not> list_ex (\\<lambda>t. timpls_transformable_to TI' t (Fun f T)) M", "unfolding list_ex_iff"], ["proof (prove)\nusing this:\n  \\<not> (\\<exists>m\\<in>set M. timpls_transformable_to TI' m (Fun f T))\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>t\\<in>set M. timpls_transformable_to TI' t (Fun f T))", "by blast"], ["proof (state)\nthis:\n  \\<not> list_ex (\\<lambda>t. timpls_transformable_to TI' t (Fun f T)) M\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>m\\<in>set M.\n               timpls_transformable_to TI' m (Fun f T)) \\<Longrightarrow>\n    intruder_synth (timpl_closure_set (set M) (set TI)) (Fun f T)", "hence \"public f\" \"length T = arity f\" \"list_all (intruder_synth_mod_timpls M TI') T\""], ["proof (prove)\nusing this:\n  \\<not> list_ex (\\<lambda>t. timpls_transformable_to TI' t (Fun f T)) M\n\ngoal (1 subgoal):\n 1. public f &&&\n    length T = arity f &&& list_all (intruder_synth_mod_timpls M TI') T", "using \"2.prems\"(1)"], ["proof (prove)\nusing this:\n  \\<not> list_ex (\\<lambda>t. timpls_transformable_to TI' t (Fun f T)) M\n  intruder_synth_mod_timpls M TI' (Fun f T)\n\ngoal (1 subgoal):\n 1. public f &&&\n    length T = arity f &&& list_all (intruder_synth_mod_timpls M TI') T", "by force+"], ["proof (state)\nthis:\n  public f\n  length T = arity f\n  list_all (intruder_synth_mod_timpls M TI') T\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>m\\<in>set M.\n               timpls_transformable_to TI' m (Fun f T)) \\<Longrightarrow>\n    intruder_synth (timpl_closure_set (set M) (set TI)) (Fun f T)", "thus ?thesis"], ["proof (prove)\nusing this:\n  public f\n  length T = arity f\n  list_all (intruder_synth_mod_timpls M TI') T\n\ngoal (1 subgoal):\n 1. intruder_synth (timpl_closure_set (set M) (set TI)) (Fun f T)", "using \"2.IH\"[OF _ _ \"2.prems\"(2)]"], ["proof (prove)\nusing this:\n  public f\n  length T = arity f\n  list_all (intruder_synth_mod_timpls M TI') T\n  \\<lbrakk>?z43 \\<in> set T;\n   intruder_synth_mod_timpls ?M43 TI' ?z43\\<rbrakk>\n  \\<Longrightarrow> intruder_synth (timpl_closure_set (set ?M43) (set TI))\n                     ?z43\n\ngoal (1 subgoal):\n 1. intruder_synth (timpl_closure_set (set M) (set TI)) (Fun f T)", "unfolding list_all_iff"], ["proof (prove)\nusing this:\n  public f\n  length T = arity f\n  Ball (set T) (intruder_synth_mod_timpls M TI')\n  \\<lbrakk>?z43 \\<in> set T;\n   intruder_synth_mod_timpls ?M43 TI' ?z43\\<rbrakk>\n  \\<Longrightarrow> intruder_synth (timpl_closure_set (set ?M43) (set TI))\n                     ?z43\n\ngoal (1 subgoal):\n 1. intruder_synth (timpl_closure_set (set M) (set TI)) (Fun f T)", "by force"], ["proof (state)\nthis:\n  intruder_synth (timpl_closure_set (set M) (set TI)) (Fun f T)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  intruder_synth (timpl_closure_set (set M) (set TI)) (Fun f T)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  intruder_synth_mod_timpls M TI' t \\<Longrightarrow>\n  intruder_synth (timpl_closure_set (set M) (set TI)) t\n\ngoal (1 subgoal):\n 1. intruder_synth (timpl_closure_set (set M) (set TI)) t \\<Longrightarrow>\n    intruder_synth_mod_timpls M TI' t", "show \"?D t \\<Longrightarrow> ?C t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. intruder_synth (timpl_closure_set (set M) (set TI)) t \\<Longrightarrow>\n    intruder_synth_mod_timpls M TI' t", "proof (induction t rule: intruder_synth_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>t.\n       t \\<in> timpl_closure_set (set M) (set TI) \\<Longrightarrow>\n       intruder_synth_mod_timpls M TI' t\n 2. \\<And>T f.\n       \\<lbrakk>length T = arity f; public f;\n        \\<And>t.\n           t \\<in> set T \\<Longrightarrow>\n           timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t;\n        \\<And>t.\n           t \\<in> set T \\<Longrightarrow>\n           intruder_synth_mod_timpls M TI' t\\<rbrakk>\n       \\<Longrightarrow> intruder_synth_mod_timpls M TI' (Fun f T)", "case (AxiomC t)"], ["proof (state)\nthis:\n  t \\<in> timpl_closure_set (set M) (set TI)\n\ngoal (2 subgoals):\n 1. \\<And>t.\n       t \\<in> timpl_closure_set (set M) (set TI) \\<Longrightarrow>\n       intruder_synth_mod_timpls M TI' t\n 2. \\<And>T f.\n       \\<lbrakk>length T = arity f; public f;\n        \\<And>t.\n           t \\<in> set T \\<Longrightarrow>\n           timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t;\n        \\<And>t.\n           t \\<in> set T \\<Longrightarrow>\n           intruder_synth_mod_timpls M TI' t\\<rbrakk>\n       \\<Longrightarrow> intruder_synth_mod_timpls M TI' (Fun f T)", "thus ?case"], ["proof (prove)\nusing this:\n  t \\<in> timpl_closure_set (set M) (set TI)\n\ngoal (1 subgoal):\n 1. intruder_synth_mod_timpls M TI' t", "using timpl_closure_set_Var_in_iff[of _ \"set M\" \"set TI\"] *[OF assms, of \"set M\" t]"], ["proof (prove)\nusing this:\n  t \\<in> timpl_closure_set (set M) (set TI)\n  (Var ?x \\<in> timpl_closure_set (set M) (set TI)) = (Var ?x \\<in> set M)\n  (\\<exists>m\\<in>set M. timpls_transformable_to TI' m t) =\n  (t \\<in> timpl_closure_set (set M) (set TI))\n\ngoal (1 subgoal):\n 1. intruder_synth_mod_timpls M TI' t", "by (cases t rule: term.exhaust) (force simp add: member_def list_ex_iff)+"], ["proof (state)\nthis:\n  intruder_synth_mod_timpls M TI' t\n\ngoal (1 subgoal):\n 1. \\<And>T f.\n       \\<lbrakk>length T = arity f; public f;\n        \\<And>t.\n           t \\<in> set T \\<Longrightarrow>\n           timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t;\n        \\<And>t.\n           t \\<in> set T \\<Longrightarrow>\n           intruder_synth_mod_timpls M TI' t\\<rbrakk>\n       \\<Longrightarrow> intruder_synth_mod_timpls M TI' (Fun f T)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>T f.\n       \\<lbrakk>length T = arity f; public f;\n        \\<And>t.\n           t \\<in> set T \\<Longrightarrow>\n           timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t;\n        \\<And>t.\n           t \\<in> set T \\<Longrightarrow>\n           intruder_synth_mod_timpls M TI' t\\<rbrakk>\n       \\<Longrightarrow> intruder_synth_mod_timpls M TI' (Fun f T)", "case (ComposeC T f)"], ["proof (state)\nthis:\n  length T = arity f\n  public f\n  ?t43 \\<in> set T \\<Longrightarrow>\n  timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c ?t43\n  ?t43 \\<in> set T \\<Longrightarrow> intruder_synth_mod_timpls M TI' ?t43\n\ngoal (1 subgoal):\n 1. \\<And>T f.\n       \\<lbrakk>length T = arity f; public f;\n        \\<And>t.\n           t \\<in> set T \\<Longrightarrow>\n           timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t;\n        \\<And>t.\n           t \\<in> set T \\<Longrightarrow>\n           intruder_synth_mod_timpls M TI' t\\<rbrakk>\n       \\<Longrightarrow> intruder_synth_mod_timpls M TI' (Fun f T)", "thus ?case"], ["proof (prove)\nusing this:\n  length T = arity f\n  public f\n  ?t43 \\<in> set T \\<Longrightarrow>\n  timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c ?t43\n  ?t43 \\<in> set T \\<Longrightarrow> intruder_synth_mod_timpls M TI' ?t43\n\ngoal (1 subgoal):\n 1. intruder_synth_mod_timpls M TI' (Fun f T)", "using list_all_iff[of \"intruder_synth_mod_timpls M TI'\" T]\n              intruder_synth_mod_timpls.simps(2)[of M TI' f T]"], ["proof (prove)\nusing this:\n  length T = arity f\n  public f\n  ?t43 \\<in> set T \\<Longrightarrow>\n  timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c ?t43\n  ?t43 \\<in> set T \\<Longrightarrow> intruder_synth_mod_timpls M TI' ?t43\n  list_all (intruder_synth_mod_timpls M TI') T =\n  Ball (set T) (intruder_synth_mod_timpls M TI')\n  intruder_synth_mod_timpls M TI' (Fun f T) =\n  (list_ex (\\<lambda>t. timpls_transformable_to TI' t (Fun f T)) M \\<or>\n   public f \\<and>\n   length T = arity f \\<and> list_all (intruder_synth_mod_timpls M TI') T)\n\ngoal (1 subgoal):\n 1. intruder_synth_mod_timpls M TI' (Fun f T)", "by blast"], ["proof (state)\nthis:\n  intruder_synth_mod_timpls M TI' (Fun f T)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  intruder_synth (timpl_closure_set (set M) (set TI)) t \\<Longrightarrow>\n  intruder_synth_mod_timpls M TI' t\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  intruder_synth_mod_timpls M TI' t =\n  intruder_synth (timpl_closure_set (set M) (set TI)) t\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma intruder_synth_mod_timpls'_is_synth_timpl_closure_set:\n  fixes t::\"(('fun, 'atom, 'sets) prot_fun, 'a) term\" and TI\n  shows \"intruder_synth_mod_timpls' M TI t \\<longleftrightarrow> timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t\"\n      (is \"?A t \\<longleftrightarrow> ?B t\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. intruder_synth_mod_timpls' M TI t =\n    (timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. intruder_synth_mod_timpls' M TI t =\n    (timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t)", "have *: \"(\\<exists>m \\<in> M. timpls_transformable_to' TI m t) \\<longleftrightarrow> t \\<in> timpl_closure_set M (set TI)\"\n    for M TI and t::\"(('fun, 'atom, 'sets) prot_fun, 'a) term\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>m\\<in>M. timpls_transformable_to' TI m t) =\n    (t \\<in> timpl_closure_set M (set TI))", "using timpls_transformable_to'_iff_in_timpl_closure[of TI _ t]\n          timpl_closure_set_is_timpl_closure_union[of M \"set TI\"]"], ["proof (prove)\nusing this:\n  timpls_transformable_to' TI ?s t = (t \\<in> timpl_closure ?s (set TI))\n  timpl_closure_set M (set TI) = (\\<Union>t\\<in>M. timpl_closure t (set TI))\n\ngoal (1 subgoal):\n 1. (\\<exists>m\\<in>M. timpls_transformable_to' TI m t) =\n    (t \\<in> timpl_closure_set M (set TI))", "by blast+"], ["proof (state)\nthis:\n  (\\<exists>m\\<in>?M43. timpls_transformable_to' ?TI43 m ?t43) =\n  (?t43 \\<in> timpl_closure_set ?M43 (set ?TI43))\n\ngoal (1 subgoal):\n 1. intruder_synth_mod_timpls' M TI t =\n    (timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t)", "show \"?A t \\<longleftrightarrow> ?B t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. intruder_synth_mod_timpls' M TI t =\n    intruder_synth (timpl_closure_set (set M) (set TI)) t", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. intruder_synth_mod_timpls' M TI t \\<Longrightarrow>\n    intruder_synth (timpl_closure_set (set M) (set TI)) t\n 2. intruder_synth (timpl_closure_set (set M) (set TI)) t \\<Longrightarrow>\n    intruder_synth_mod_timpls' M TI t", "show \"?A t \\<Longrightarrow> ?B t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. intruder_synth_mod_timpls' M TI t \\<Longrightarrow>\n    intruder_synth (timpl_closure_set (set M) (set TI)) t", "proof (induction t arbitrary: M TI rule: intruder_synth_mod_timpls'.induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>M TI x Ma TIa.\n       intruder_synth_mod_timpls' Ma TIa (Var x) \\<Longrightarrow>\n       timpl_closure_set (set Ma) (set TIa) \\<turnstile>\\<^sub>c Var x\n 2. \\<And>M TI f T Ma TIa.\n       \\<lbrakk>\\<And>z M TI.\n                   \\<lbrakk>z \\<in> set T;\n                    intruder_synth_mod_timpls' M TI z\\<rbrakk>\n                   \\<Longrightarrow> timpl_closure_set (set M)\n(set TI) \\<turnstile>\\<^sub>c\n                                     z;\n        intruder_synth_mod_timpls' Ma TIa (Fun f T)\\<rbrakk>\n       \\<Longrightarrow> timpl_closure_set (set Ma)\n                          (set TIa) \\<turnstile>\\<^sub>c\n                         Fun f T", "case (1 M TI x)"], ["proof (state)\nthis:\n  intruder_synth_mod_timpls' M TI (Var x)\n\ngoal (2 subgoals):\n 1. \\<And>M TI x Ma TIa.\n       intruder_synth_mod_timpls' Ma TIa (Var x) \\<Longrightarrow>\n       timpl_closure_set (set Ma) (set TIa) \\<turnstile>\\<^sub>c Var x\n 2. \\<And>M TI f T Ma TIa.\n       \\<lbrakk>\\<And>z M TI.\n                   \\<lbrakk>z \\<in> set T;\n                    intruder_synth_mod_timpls' M TI z\\<rbrakk>\n                   \\<Longrightarrow> timpl_closure_set (set M)\n(set TI) \\<turnstile>\\<^sub>c\n                                     z;\n        intruder_synth_mod_timpls' Ma TIa (Fun f T)\\<rbrakk>\n       \\<Longrightarrow> timpl_closure_set (set Ma)\n                          (set TIa) \\<turnstile>\\<^sub>c\n                         Fun f T", "hence \"Var x \\<in> timpl_closure_set (set M) (set TI)\""], ["proof (prove)\nusing this:\n  intruder_synth_mod_timpls' M TI (Var x)\n\ngoal (1 subgoal):\n 1. Var x \\<in> timpl_closure_set (set M) (set TI)", "using timpl_closure.FP List.member_def[of M]"], ["proof (prove)\nusing this:\n  intruder_synth_mod_timpls' M TI (Var x)\n  ?t \\<in> timpl_closure ?t ?TI\n  List.member M ?x = (?x \\<in> set M)\n\ngoal (1 subgoal):\n 1. Var x \\<in> timpl_closure_set (set M) (set TI)", "unfolding timpl_closure_set_def"], ["proof (prove)\nusing this:\n  intruder_synth_mod_timpls' M TI (Var x)\n  ?t \\<in> timpl_closure ?t ?TI\n  List.member M ?x = (?x \\<in> set M)\n\ngoal (1 subgoal):\n 1. Var x \\<in> (\\<Union>t\\<in>set M. timpl_closure t (set TI))", "by auto"], ["proof (state)\nthis:\n  Var x \\<in> timpl_closure_set (set M) (set TI)\n\ngoal (2 subgoals):\n 1. \\<And>M TI x Ma TIa.\n       intruder_synth_mod_timpls' Ma TIa (Var x) \\<Longrightarrow>\n       timpl_closure_set (set Ma) (set TIa) \\<turnstile>\\<^sub>c Var x\n 2. \\<And>M TI f T Ma TIa.\n       \\<lbrakk>\\<And>z M TI.\n                   \\<lbrakk>z \\<in> set T;\n                    intruder_synth_mod_timpls' M TI z\\<rbrakk>\n                   \\<Longrightarrow> timpl_closure_set (set M)\n(set TI) \\<turnstile>\\<^sub>c\n                                     z;\n        intruder_synth_mod_timpls' Ma TIa (Fun f T)\\<rbrakk>\n       \\<Longrightarrow> timpl_closure_set (set Ma)\n                          (set TIa) \\<turnstile>\\<^sub>c\n                         Fun f T", "thus ?case"], ["proof (prove)\nusing this:\n  Var x \\<in> timpl_closure_set (set M) (set TI)\n\ngoal (1 subgoal):\n 1. intruder_synth (timpl_closure_set (set M) (set TI)) (Var x)", "by simp"], ["proof (state)\nthis:\n  intruder_synth (timpl_closure_set (set M) (set TI)) (Var x)\n\ngoal (1 subgoal):\n 1. \\<And>M TI f T Ma TIa.\n       \\<lbrakk>\\<And>z M TI.\n                   \\<lbrakk>z \\<in> set T;\n                    intruder_synth_mod_timpls' M TI z\\<rbrakk>\n                   \\<Longrightarrow> timpl_closure_set (set M)\n(set TI) \\<turnstile>\\<^sub>c\n                                     z;\n        intruder_synth_mod_timpls' Ma TIa (Fun f T)\\<rbrakk>\n       \\<Longrightarrow> timpl_closure_set (set Ma)\n                          (set TIa) \\<turnstile>\\<^sub>c\n                         Fun f T", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>M TI f T Ma TIa.\n       \\<lbrakk>\\<And>z M TI.\n                   \\<lbrakk>z \\<in> set T;\n                    intruder_synth_mod_timpls' M TI z\\<rbrakk>\n                   \\<Longrightarrow> timpl_closure_set (set M)\n(set TI) \\<turnstile>\\<^sub>c\n                                     z;\n        intruder_synth_mod_timpls' Ma TIa (Fun f T)\\<rbrakk>\n       \\<Longrightarrow> timpl_closure_set (set Ma)\n                          (set TIa) \\<turnstile>\\<^sub>c\n                         Fun f T", "case (2 M TI f T)"], ["proof (state)\nthis:\n  \\<lbrakk>?z43 \\<in> set T;\n   intruder_synth_mod_timpls' ?M43 ?TI43 ?z43\\<rbrakk>\n  \\<Longrightarrow> intruder_synth\n                     (timpl_closure_set (set ?M43) (set ?TI43)) ?z43\n  intruder_synth_mod_timpls' M TI (Fun f T)\n\ngoal (1 subgoal):\n 1. \\<And>M TI f T Ma TIa.\n       \\<lbrakk>\\<And>z M TI.\n                   \\<lbrakk>z \\<in> set T;\n                    intruder_synth_mod_timpls' M TI z\\<rbrakk>\n                   \\<Longrightarrow> timpl_closure_set (set M)\n(set TI) \\<turnstile>\\<^sub>c\n                                     z;\n        intruder_synth_mod_timpls' Ma TIa (Fun f T)\\<rbrakk>\n       \\<Longrightarrow> timpl_closure_set (set Ma)\n                          (set TIa) \\<turnstile>\\<^sub>c\n                         Fun f T", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. intruder_synth (timpl_closure_set (set M) (set TI)) (Fun f T)", "proof (cases \"\\<exists>m \\<in> set M. timpls_transformable_to' TI m (Fun f T)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>m\\<in>set M.\n       timpls_transformable_to' TI m (Fun f T) \\<Longrightarrow>\n    intruder_synth (timpl_closure_set (set M) (set TI)) (Fun f T)\n 2. \\<not> (\\<exists>m\\<in>set M.\n               timpls_transformable_to' TI m (Fun f T)) \\<Longrightarrow>\n    intruder_synth (timpl_closure_set (set M) (set TI)) (Fun f T)", "case True"], ["proof (state)\nthis:\n  \\<exists>m\\<in>set M. timpls_transformable_to' TI m (Fun f T)\n\ngoal (2 subgoals):\n 1. \\<exists>m\\<in>set M.\n       timpls_transformable_to' TI m (Fun f T) \\<Longrightarrow>\n    intruder_synth (timpl_closure_set (set M) (set TI)) (Fun f T)\n 2. \\<not> (\\<exists>m\\<in>set M.\n               timpls_transformable_to' TI m (Fun f T)) \\<Longrightarrow>\n    intruder_synth (timpl_closure_set (set M) (set TI)) (Fun f T)", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>m\\<in>set M. timpls_transformable_to' TI m (Fun f T)\n\ngoal (1 subgoal):\n 1. intruder_synth (timpl_closure_set (set M) (set TI)) (Fun f T)", "using \"2.prems\" *[of \"set M\" TI \"Fun f T\"]\n                intruder_synth.AxiomC[of \"Fun f T\" \"timpl_closure_set (set M) (set TI)\"]"], ["proof (prove)\nusing this:\n  \\<exists>m\\<in>set M. timpls_transformable_to' TI m (Fun f T)\n  intruder_synth_mod_timpls' M TI (Fun f T)\n  (\\<exists>m\\<in>set M. timpls_transformable_to' TI m (Fun f T)) =\n  (Fun f T \\<in> timpl_closure_set (set M) (set TI))\n  Fun f T \\<in> timpl_closure_set (set M) (set TI) \\<Longrightarrow>\n  timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c Fun f T\n\ngoal (1 subgoal):\n 1. intruder_synth (timpl_closure_set (set M) (set TI)) (Fun f T)", "by blast"], ["proof (state)\nthis:\n  intruder_synth (timpl_closure_set (set M) (set TI)) (Fun f T)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>m\\<in>set M.\n               timpls_transformable_to' TI m (Fun f T)) \\<Longrightarrow>\n    intruder_synth (timpl_closure_set (set M) (set TI)) (Fun f T)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>m\\<in>set M.\n               timpls_transformable_to' TI m (Fun f T)) \\<Longrightarrow>\n    intruder_synth (timpl_closure_set (set M) (set TI)) (Fun f T)", "case False"], ["proof (state)\nthis:\n  \\<not> (\\<exists>m\\<in>set M. timpls_transformable_to' TI m (Fun f T))\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>m\\<in>set M.\n               timpls_transformable_to' TI m (Fun f T)) \\<Longrightarrow>\n    intruder_synth (timpl_closure_set (set M) (set TI)) (Fun f T)", "hence \"public f\" \"length T = arity f\" \"list_all (intruder_synth_mod_timpls' M TI) T\""], ["proof (prove)\nusing this:\n  \\<not> (\\<exists>m\\<in>set M. timpls_transformable_to' TI m (Fun f T))\n\ngoal (1 subgoal):\n 1. public f &&&\n    length T = arity f &&& list_all (intruder_synth_mod_timpls' M TI) T", "using \"2.prems\" list_ex_iff[of _ M]"], ["proof (prove)\nusing this:\n  \\<not> (\\<exists>m\\<in>set M. timpls_transformable_to' TI m (Fun f T))\n  intruder_synth_mod_timpls' M TI (Fun f T)\n  list_ex ?P M = Bex (set M) ?P\n\ngoal (1 subgoal):\n 1. public f &&&\n    length T = arity f &&& list_all (intruder_synth_mod_timpls' M TI) T", "by force+"], ["proof (state)\nthis:\n  public f\n  length T = arity f\n  list_all (intruder_synth_mod_timpls' M TI) T\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>m\\<in>set M.\n               timpls_transformable_to' TI m (Fun f T)) \\<Longrightarrow>\n    intruder_synth (timpl_closure_set (set M) (set TI)) (Fun f T)", "thus ?thesis"], ["proof (prove)\nusing this:\n  public f\n  length T = arity f\n  list_all (intruder_synth_mod_timpls' M TI) T\n\ngoal (1 subgoal):\n 1. intruder_synth (timpl_closure_set (set M) (set TI)) (Fun f T)", "using \"2.IH\"[of _ M TI] list_all_iff[of \"intruder_synth_mod_timpls' M TI\" T]"], ["proof (prove)\nusing this:\n  public f\n  length T = arity f\n  list_all (intruder_synth_mod_timpls' M TI) T\n  \\<lbrakk>?z43 \\<in> set T; intruder_synth_mod_timpls' M TI ?z43\\<rbrakk>\n  \\<Longrightarrow> intruder_synth (timpl_closure_set (set M) (set TI)) ?z43\n  list_all (intruder_synth_mod_timpls' M TI) T =\n  Ball (set T) (intruder_synth_mod_timpls' M TI)\n\ngoal (1 subgoal):\n 1. intruder_synth (timpl_closure_set (set M) (set TI)) (Fun f T)", "by force"], ["proof (state)\nthis:\n  intruder_synth (timpl_closure_set (set M) (set TI)) (Fun f T)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  intruder_synth (timpl_closure_set (set M) (set TI)) (Fun f T)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  intruder_synth_mod_timpls' M TI t \\<Longrightarrow>\n  intruder_synth (timpl_closure_set (set M) (set TI)) t\n\ngoal (1 subgoal):\n 1. intruder_synth (timpl_closure_set (set M) (set TI)) t \\<Longrightarrow>\n    intruder_synth_mod_timpls' M TI t", "show \"?B t \\<Longrightarrow> ?A t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. intruder_synth (timpl_closure_set (set M) (set TI)) t \\<Longrightarrow>\n    intruder_synth_mod_timpls' M TI t", "proof (induction t rule: intruder_synth_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>t.\n       t \\<in> timpl_closure_set (set M) (set TI) \\<Longrightarrow>\n       intruder_synth_mod_timpls' M TI t\n 2. \\<And>T f.\n       \\<lbrakk>length T = arity f; public f;\n        \\<And>t.\n           t \\<in> set T \\<Longrightarrow>\n           timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t;\n        \\<And>t.\n           t \\<in> set T \\<Longrightarrow>\n           intruder_synth_mod_timpls' M TI t\\<rbrakk>\n       \\<Longrightarrow> intruder_synth_mod_timpls' M TI (Fun f T)", "case (AxiomC t)"], ["proof (state)\nthis:\n  t \\<in> timpl_closure_set (set M) (set TI)\n\ngoal (2 subgoals):\n 1. \\<And>t.\n       t \\<in> timpl_closure_set (set M) (set TI) \\<Longrightarrow>\n       intruder_synth_mod_timpls' M TI t\n 2. \\<And>T f.\n       \\<lbrakk>length T = arity f; public f;\n        \\<And>t.\n           t \\<in> set T \\<Longrightarrow>\n           timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t;\n        \\<And>t.\n           t \\<in> set T \\<Longrightarrow>\n           intruder_synth_mod_timpls' M TI t\\<rbrakk>\n       \\<Longrightarrow> intruder_synth_mod_timpls' M TI (Fun f T)", "thus ?case"], ["proof (prove)\nusing this:\n  t \\<in> timpl_closure_set (set M) (set TI)\n\ngoal (1 subgoal):\n 1. intruder_synth_mod_timpls' M TI t", "using AxiomC timpl_closure_set_Var_in_iff[of _ \"set M\" \"set TI\"] *[of \"set M\" TI t]\n              list_ex_iff[of _ M] List.member_def[of M]"], ["proof (prove)\nusing this:\n  t \\<in> timpl_closure_set (set M) (set TI)\n  t \\<in> timpl_closure_set (set M) (set TI)\n  (Var ?x \\<in> timpl_closure_set (set M) (set TI)) = (Var ?x \\<in> set M)\n  (\\<exists>m\\<in>set M. timpls_transformable_to' TI m t) =\n  (t \\<in> timpl_closure_set (set M) (set TI))\n  list_ex ?P M = Bex (set M) ?P\n  List.member M ?x = (?x \\<in> set M)\n\ngoal (1 subgoal):\n 1. intruder_synth_mod_timpls' M TI t", "by (cases t rule: term.exhaust) force+"], ["proof (state)\nthis:\n  intruder_synth_mod_timpls' M TI t\n\ngoal (1 subgoal):\n 1. \\<And>T f.\n       \\<lbrakk>length T = arity f; public f;\n        \\<And>t.\n           t \\<in> set T \\<Longrightarrow>\n           timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t;\n        \\<And>t.\n           t \\<in> set T \\<Longrightarrow>\n           intruder_synth_mod_timpls' M TI t\\<rbrakk>\n       \\<Longrightarrow> intruder_synth_mod_timpls' M TI (Fun f T)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>T f.\n       \\<lbrakk>length T = arity f; public f;\n        \\<And>t.\n           t \\<in> set T \\<Longrightarrow>\n           timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t;\n        \\<And>t.\n           t \\<in> set T \\<Longrightarrow>\n           intruder_synth_mod_timpls' M TI t\\<rbrakk>\n       \\<Longrightarrow> intruder_synth_mod_timpls' M TI (Fun f T)", "case (ComposeC T f)"], ["proof (state)\nthis:\n  length T = arity f\n  public f\n  ?t43 \\<in> set T \\<Longrightarrow>\n  timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c ?t43\n  ?t43 \\<in> set T \\<Longrightarrow> intruder_synth_mod_timpls' M TI ?t43\n\ngoal (1 subgoal):\n 1. \\<And>T f.\n       \\<lbrakk>length T = arity f; public f;\n        \\<And>t.\n           t \\<in> set T \\<Longrightarrow>\n           timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t;\n        \\<And>t.\n           t \\<in> set T \\<Longrightarrow>\n           intruder_synth_mod_timpls' M TI t\\<rbrakk>\n       \\<Longrightarrow> intruder_synth_mod_timpls' M TI (Fun f T)", "thus ?case"], ["proof (prove)\nusing this:\n  length T = arity f\n  public f\n  ?t43 \\<in> set T \\<Longrightarrow>\n  timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c ?t43\n  ?t43 \\<in> set T \\<Longrightarrow> intruder_synth_mod_timpls' M TI ?t43\n\ngoal (1 subgoal):\n 1. intruder_synth_mod_timpls' M TI (Fun f T)", "using list_all_iff[of \"intruder_synth_mod_timpls' M TI\" T]\n              intruder_synth_mod_timpls'.simps(2)[of M TI f T]"], ["proof (prove)\nusing this:\n  length T = arity f\n  public f\n  ?t43 \\<in> set T \\<Longrightarrow>\n  timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c ?t43\n  ?t43 \\<in> set T \\<Longrightarrow> intruder_synth_mod_timpls' M TI ?t43\n  list_all (intruder_synth_mod_timpls' M TI) T =\n  Ball (set T) (intruder_synth_mod_timpls' M TI)\n  intruder_synth_mod_timpls' M TI (Fun f T) =\n  (list_ex (\\<lambda>t. timpls_transformable_to' TI t (Fun f T)) M \\<or>\n   public f \\<and>\n   length T = arity f \\<and> list_all (intruder_synth_mod_timpls' M TI) T)\n\ngoal (1 subgoal):\n 1. intruder_synth_mod_timpls' M TI (Fun f T)", "by blast"], ["proof (state)\nthis:\n  intruder_synth_mod_timpls' M TI (Fun f T)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  intruder_synth (timpl_closure_set (set M) (set TI)) t \\<Longrightarrow>\n  intruder_synth_mod_timpls' M TI t\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  intruder_synth_mod_timpls' M TI t =\n  intruder_synth (timpl_closure_set (set M) (set TI)) t\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma intruder_synth_mod_eq_timpls_is_synth_timpl_closure_set:\n  fixes t::\"(('fun, 'atom, 'sets) prot_fun, 'a) term\" and TI\n  defines \"cl \\<equiv> \\<lambda>TI. {(a,b) \\<in> TI\\<^sup>+. a \\<noteq> b}\"\n  shows (* \"set TI' = (set TI)\\<^sup>+ \\<Longrightarrow>\n         intruder_synth_mod_eq_timpls M TI' t \\<longleftrightarrow>\n         (\\<exists>s \\<in> timpl_closure t (set TI). timpl_closure_set M (set TI) \\<turnstile>\\<^sub>c s)\"\n      (is \"?P TI TI' \\<Longrightarrow> ?A t \\<longleftrightarrow> ?B t\")\n    and *) \"set TI' = {(a,b) \\<in> (set TI)\\<^sup>+. a \\<noteq> b} \\<Longrightarrow>\n         intruder_synth_mod_eq_timpls M TI' t \\<longleftrightarrow>\n         (\\<exists>s \\<in> timpl_closure t (set TI). timpl_closure_set M (set TI) \\<turnstile>\\<^sub>c s)\"\n      (is \"?Q TI TI' \\<Longrightarrow> ?C t \\<longleftrightarrow> ?D t\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. set TI' =\n    {(a, b).\n     (a, b) \\<in> (set TI)\\<^sup>+ \\<and> a \\<noteq> b} \\<Longrightarrow>\n    intruder_synth_mod_eq_timpls M TI' t =\n    (\\<exists>s\\<in>timpl_closure t (set TI).\n        timpl_closure_set M (set TI) \\<turnstile>\\<^sub>c s)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. set TI' =\n    {(a, b).\n     (a, b) \\<in> (set TI)\\<^sup>+ \\<and> a \\<noteq> b} \\<Longrightarrow>\n    intruder_synth_mod_eq_timpls M TI' t =\n    (\\<exists>s\\<in>timpl_closure t (set TI).\n        timpl_closure_set M (set TI) \\<turnstile>\\<^sub>c s)", "(* have *: \"(\\<exists>m \\<in> M. equal_mod_timpls TI' m t) \\<longleftrightarrow>\n           (\\<exists>s \\<in> timpl_closure t (set TI). s \\<in> timpl_closure_set M (set TI))\"\n    when P: \"?P TI TI'\"\n    for M TI TI' and t::\"(('fun, 'atom, 'sets) prot_fun, 'a) term\"\n    using equal_mod_timpls_iff_ex_in_timpl_closure'[OF P]\n          timpl_closure_set_is_timpl_closure_union[of M \"set TI\"]\n          timpl_closure_set_timpls_trancl_eq[of M \"set TI\"]\n    by blast *)"], ["proof (state)\ngoal (1 subgoal):\n 1. set TI' =\n    {(a, b).\n     (a, b) \\<in> (set TI)\\<^sup>+ \\<and> a \\<noteq> b} \\<Longrightarrow>\n    intruder_synth_mod_eq_timpls M TI' t =\n    (\\<exists>s\\<in>timpl_closure t (set TI).\n        timpl_closure_set M (set TI) \\<turnstile>\\<^sub>c s)", "have **: \"(\\<exists>m \\<in> M. equal_mod_timpls TI' m t) \\<longleftrightarrow>\n            (\\<exists>s \\<in> timpl_closure t (set TI). s \\<in> timpl_closure_set M (set TI))\"\n    when Q: \"?Q TI TI'\"\n    for M TI TI' and t::\"(('fun, 'atom, 'sets) prot_fun, 'a) term\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>m\\<in>M. equal_mod_timpls TI' m t) =\n    (\\<exists>s\\<in>timpl_closure t (set TI).\n        s \\<in> timpl_closure_set M (set TI))", "using equal_mod_timpls_iff_ex_in_timpl_closure[OF Q]\n          timpl_closure_set_is_timpl_closure_union[of M \"set TI\"]\n          timpl_closure_set_timpls_trancl_eq'[of M \"set TI\"]"], ["proof (prove)\nusing this:\n  equal_mod_timpls TI' ?s ?t =\n  (\\<exists>u.\n      u \\<in> timpl_closure ?s (set TI) \\<and>\n      u \\<in> timpl_closure ?t (set TI))\n  timpl_closure_set M (set TI) = (\\<Union>t\\<in>M. timpl_closure t (set TI))\n  timpl_closure_set M\n   {(a, b). (a, b) \\<in> (set TI)\\<^sup>+ \\<and> a \\<noteq> b} =\n  timpl_closure_set M (set TI)\n\ngoal (1 subgoal):\n 1. (\\<exists>m\\<in>M. equal_mod_timpls TI' m t) =\n    (\\<exists>s\\<in>timpl_closure t (set TI).\n        s \\<in> timpl_closure_set M (set TI))", "by fastforce"], ["proof (state)\nthis:\n  set ?TI'43 =\n  {a. case a of\n      (a, b) \\<Rightarrow>\n        (a, b) \\<in> (set ?TI43)\\<^sup>+ \\<and>\n        a \\<noteq> b} \\<Longrightarrow>\n  (\\<exists>m\\<in>?M43. equal_mod_timpls ?TI'43 m ?t43) =\n  (\\<exists>s\\<in>timpl_closure ?t43 (set ?TI43).\n      s \\<in> timpl_closure_set ?M43 (set ?TI43))\n\ngoal (1 subgoal):\n 1. set TI' =\n    {(a, b).\n     (a, b) \\<in> (set TI)\\<^sup>+ \\<and> a \\<noteq> b} \\<Longrightarrow>\n    intruder_synth_mod_eq_timpls M TI' t =\n    (\\<exists>s\\<in>timpl_closure t (set TI).\n        timpl_closure_set M (set TI) \\<turnstile>\\<^sub>c s)", "(*   show \"?A t \\<longleftrightarrow> ?B t\" when P: \"?P TI TI'\"\n  proof\n    show \"?A t \\<Longrightarrow> ?B t\"\n    proof (induction t arbitrary: M TI rule: intruder_synth_mod_eq_timpls.induct)\n      case (1 M TI x)\n      hence \"Var x \\<in> timpl_closure_set M TI\" \"Var x \\<in> timpl_closure (Var x) TI\"\n        using timpl_closure.FP unfolding timpl_closure_set_def by auto\n      thus ?case by force\n    next\n      case (2 M TI f T)\n      show ?case\n      proof (cases \"\\<exists>m \\<in> M. equal_mod_timpls (TI\\<^sup>+) m (Fun f T)\")\n        case True thus ?thesis\n          using \"2.prems\" *[of M TI \"Fun f T\"] intruder_synth.AxiomC[of _ \"timpl_closure_set M TI\"]\n          by blast\n      next\n        case False\n        hence f: \"public f\" \"length T = arity f\" \"list_all (intruder_synth_mod_eq_timpls M (TI\\<^sup>+)) T\"\n          using \"2.prems\" by force+\n  \n        let ?sy = \"intruder_synth (timpl_closure_set M TI)\"\n\n        have IH: \"\\<exists>u \\<in> timpl_closure (T ! i) TI. ?sy u\"\n          when i: \"i < length T\" for i\n          using \"2.IH\"[of _ M TI] f(3) nth_mem[OF i]\n          unfolding list_all_iff by blast\n  \n        define S where \"S \\<equiv> map (\\<lambda>u. SOME v. v \\<in> timpl_closure u TI \\<and> ?sy v) T\"\n  \n        have S1: \"length T = length S\"\n          unfolding S_def by simp\n  \n        have S2: \"S ! i \\<in> timpl_closure (T ! i) TI\"\n                 \"timpl_closure_set M TI \\<turnstile>\\<^sub>c S ! i\"\n          when i: \"i < length S\" for i\n          using i IH someI_ex[of \"\\<lambda>v. v \\<in> timpl_closure (T ! i) TI \\<and> ?sy v\"]\n          unfolding S_def by auto\n  \n        have \"Fun f S \\<in> timpl_closure (Fun f T) TI\"\n          using timpl_closure_FunI[of T S TI f f] S1 S2(1)\n          unfolding timpl_closure_is_timpl_closure' by presburger\n        thus ?thesis\n          by (metis intruder_synth.ComposeC[of S f] f(1,2) S1 S2(2) in_set_conv_nth[of _ S])\n      qed\n    qed\n  \n    show \"?A t\" when B: \"?B t\"\n    proof -\n      obtain s where \"timpl_closure_set M TI \\<turnstile>\\<^sub>c s\" \"s \\<in> timpl_closure t TI\"\n        using B by moura\n      thus ?thesis\n      proof (induction s arbitrary: t rule: intruder_synth_induct)\n        case (AxiomC s t)\n        note 1 = timpl_closure_set_Var_in_iff[of _ M TI] timpl_closure_Var_inv[of s _ TI]\n        note 2 = *[of M TI]\n        show ?case\n        proof (cases t)\n          case Var thus ?thesis using 1 AxiomC by auto\n        next\n          case Fun thus ?thesis using 2 AxiomC by auto\n        qed\n      next\n        case (ComposeC T f t)\n        obtain g S where gS:\n            \"t = Fun g S\" \"length S = length T\"\n            \"\\<forall>i < length T. T ! i \\<in> timpl_closure (S ! i) TI\"\n            \"g \\<noteq> f \\<Longrightarrow> is_Abs g \\<and> is_Abs f \\<and> (the_Abs g, the_Abs f) \\<in> TI\\<^sup>+\"\n          using ComposeC.prems(1) timpl_closure'_inv'[of t \"Fun f T\" TI]\n                timpl_closure_is_timpl_closure'[of _ _ TI]\n          by fastforce\n  \n        have IH: \"intruder_synth_mod_eq_timpls M (TI\\<^sup>+) u\" when u: \"u \\<in> set S\" for u\n          by (metis u gS(2,3) ComposeC.IH in_set_conv_nth)\n  \n        note 0 = list_all_iff[of \"intruder_synth_mod_eq_timpls M (TI\\<^sup>+)\" S]\n                 intruder_synth_mod_eq_timpls.simps(2)[of M \"TI\\<^sup>+\" g S]\n  \n        have \"f = g\" using ComposeC.hyps gS(4) unfolding is_Abs_def by fastforce\n        thus ?case by (metis ComposeC.hyps(1,2) gS(1,2) IH 0)\n      qed\n    qed\n  qed *)"], ["proof (state)\nthis:\n  set ?TI'43 =\n  {a. case a of\n      (a, b) \\<Rightarrow>\n        (a, b) \\<in> (set ?TI43)\\<^sup>+ \\<and>\n        a \\<noteq> b} \\<Longrightarrow>\n  (\\<exists>m\\<in>?M43. equal_mod_timpls ?TI'43 m ?t43) =\n  (\\<exists>s\\<in>timpl_closure ?t43 (set ?TI43).\n      s \\<in> timpl_closure_set ?M43 (set ?TI43))\n\ngoal (1 subgoal):\n 1. set TI' =\n    {(a, b).\n     (a, b) \\<in> (set TI)\\<^sup>+ \\<and> a \\<noteq> b} \\<Longrightarrow>\n    intruder_synth_mod_eq_timpls M TI' t =\n    (\\<exists>s\\<in>timpl_closure t (set TI).\n        timpl_closure_set M (set TI) \\<turnstile>\\<^sub>c s)", "show \"?C t \\<longleftrightarrow> ?D t\" when Q: \"?Q TI TI'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. intruder_synth_mod_eq_timpls M TI' t =\n    (\\<exists>s\\<in>timpl_closure t (set TI).\n        intruder_synth (timpl_closure_set M (set TI)) s)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. intruder_synth_mod_eq_timpls M TI' t \\<Longrightarrow>\n    \\<exists>s\\<in>timpl_closure t (set TI).\n       intruder_synth (timpl_closure_set M (set TI)) s\n 2. \\<exists>s\\<in>timpl_closure t (set TI).\n       intruder_synth (timpl_closure_set M (set TI)) s \\<Longrightarrow>\n    intruder_synth_mod_eq_timpls M TI' t", "show \"?C t \\<Longrightarrow> ?D t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. intruder_synth_mod_eq_timpls M TI' t \\<Longrightarrow>\n    \\<exists>s\\<in>timpl_closure t (set TI).\n       intruder_synth (timpl_closure_set M (set TI)) s", "using Q"], ["proof (prove)\nusing this:\n  set TI' =\n  {a. case a of\n      (a, b) \\<Rightarrow>\n        (a, b) \\<in> (set TI)\\<^sup>+ \\<and> a \\<noteq> b}\n\ngoal (1 subgoal):\n 1. intruder_synth_mod_eq_timpls M TI' t \\<Longrightarrow>\n    \\<exists>s\\<in>timpl_closure t (set TI).\n       intruder_synth (timpl_closure_set M (set TI)) s", "proof (induction t arbitrary: M TI rule: intruder_synth_mod_eq_timpls.induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>M TI x Ma TIa.\n       \\<lbrakk>intruder_synth_mod_eq_timpls Ma TI (Var x);\n        set TI =\n        {(a, b).\n         (a, b) \\<in> (set TIa)\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n       \\<Longrightarrow> Bex (timpl_closure (Var x) (set TIa))\n                          ((\\<turnstile>\\<^sub>c)\n                            (timpl_closure_set Ma (set TIa)))\n 2. \\<And>M TI f T Ma TIa.\n       \\<lbrakk>\\<And>z M TIa.\n                   \\<lbrakk>z \\<in> set T;\n                    intruder_synth_mod_eq_timpls M TI z;\n                    set TI =\n                    {(a, b).\n                     (a, b) \\<in> (set TIa)\\<^sup>+ \\<and>\n                     a \\<noteq> b}\\<rbrakk>\n                   \\<Longrightarrow> Bex (timpl_closure z (set TIa))\n((\\<turnstile>\\<^sub>c) (timpl_closure_set M (set TIa)));\n        intruder_synth_mod_eq_timpls Ma TI (Fun f T);\n        set TI =\n        {(a, b).\n         (a, b) \\<in> (set TIa)\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n       \\<Longrightarrow> Bex (timpl_closure (Fun f T) (set TIa))\n                          ((\\<turnstile>\\<^sub>c)\n                            (timpl_closure_set Ma (set TIa)))", "case (1 M TI' x M TI)"], ["proof (state)\nthis:\n  intruder_synth_mod_eq_timpls M TI' (Var x)\n  set TI' =\n  {a. case a of\n      (a, b) \\<Rightarrow>\n        (a, b) \\<in> (set TI)\\<^sup>+ \\<and> a \\<noteq> b}\n\ngoal (2 subgoals):\n 1. \\<And>M TI x Ma TIa.\n       \\<lbrakk>intruder_synth_mod_eq_timpls Ma TI (Var x);\n        set TI =\n        {(a, b).\n         (a, b) \\<in> (set TIa)\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n       \\<Longrightarrow> Bex (timpl_closure (Var x) (set TIa))\n                          ((\\<turnstile>\\<^sub>c)\n                            (timpl_closure_set Ma (set TIa)))\n 2. \\<And>M TI f T Ma TIa.\n       \\<lbrakk>\\<And>z M TIa.\n                   \\<lbrakk>z \\<in> set T;\n                    intruder_synth_mod_eq_timpls M TI z;\n                    set TI =\n                    {(a, b).\n                     (a, b) \\<in> (set TIa)\\<^sup>+ \\<and>\n                     a \\<noteq> b}\\<rbrakk>\n                   \\<Longrightarrow> Bex (timpl_closure z (set TIa))\n((\\<turnstile>\\<^sub>c) (timpl_closure_set M (set TIa)));\n        intruder_synth_mod_eq_timpls Ma TI (Fun f T);\n        set TI =\n        {(a, b).\n         (a, b) \\<in> (set TIa)\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n       \\<Longrightarrow> Bex (timpl_closure (Fun f T) (set TIa))\n                          ((\\<turnstile>\\<^sub>c)\n                            (timpl_closure_set Ma (set TIa)))", "hence \"Var x \\<in> timpl_closure_set M (set TI)\" \"Var x \\<in> timpl_closure (Var x) (set TI)\""], ["proof (prove)\nusing this:\n  intruder_synth_mod_eq_timpls M TI' (Var x)\n  set TI' =\n  {a. case a of\n      (a, b) \\<Rightarrow>\n        (a, b) \\<in> (set TI)\\<^sup>+ \\<and> a \\<noteq> b}\n\ngoal (1 subgoal):\n 1. Var x \\<in> timpl_closure_set M (set TI) &&&\n    Var x \\<in> timpl_closure (Var x) (set TI)", "using timpl_closure.FP"], ["proof (prove)\nusing this:\n  intruder_synth_mod_eq_timpls M TI' (Var x)\n  set TI' =\n  {a. case a of\n      (a, b) \\<Rightarrow>\n        (a, b) \\<in> (set TI)\\<^sup>+ \\<and> a \\<noteq> b}\n  ?t \\<in> timpl_closure ?t ?TI\n\ngoal (1 subgoal):\n 1. Var x \\<in> timpl_closure_set M (set TI) &&&\n    Var x \\<in> timpl_closure (Var x) (set TI)", "unfolding timpl_closure_set_def"], ["proof (prove)\nusing this:\n  intruder_synth_mod_eq_timpls M TI' (Var x)\n  set TI' =\n  {a. case a of\n      (a, b) \\<Rightarrow>\n        (a, b) \\<in> (set TI)\\<^sup>+ \\<and> a \\<noteq> b}\n  ?t \\<in> timpl_closure ?t ?TI\n\ngoal (1 subgoal):\n 1. Var x \\<in> (\\<Union>t\\<in>M. timpl_closure t (set TI)) &&&\n    Var x \\<in> timpl_closure (Var x) (set TI)", "by auto"], ["proof (state)\nthis:\n  Var x \\<in> timpl_closure_set M (set TI)\n  Var x \\<in> timpl_closure (Var x) (set TI)\n\ngoal (2 subgoals):\n 1. \\<And>M TI x Ma TIa.\n       \\<lbrakk>intruder_synth_mod_eq_timpls Ma TI (Var x);\n        set TI =\n        {(a, b).\n         (a, b) \\<in> (set TIa)\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n       \\<Longrightarrow> Bex (timpl_closure (Var x) (set TIa))\n                          ((\\<turnstile>\\<^sub>c)\n                            (timpl_closure_set Ma (set TIa)))\n 2. \\<And>M TI f T Ma TIa.\n       \\<lbrakk>\\<And>z M TIa.\n                   \\<lbrakk>z \\<in> set T;\n                    intruder_synth_mod_eq_timpls M TI z;\n                    set TI =\n                    {(a, b).\n                     (a, b) \\<in> (set TIa)\\<^sup>+ \\<and>\n                     a \\<noteq> b}\\<rbrakk>\n                   \\<Longrightarrow> Bex (timpl_closure z (set TIa))\n((\\<turnstile>\\<^sub>c) (timpl_closure_set M (set TIa)));\n        intruder_synth_mod_eq_timpls Ma TI (Fun f T);\n        set TI =\n        {(a, b).\n         (a, b) \\<in> (set TIa)\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n       \\<Longrightarrow> Bex (timpl_closure (Fun f T) (set TIa))\n                          ((\\<turnstile>\\<^sub>c)\n                            (timpl_closure_set Ma (set TIa)))", "thus ?case"], ["proof (prove)\nusing this:\n  Var x \\<in> timpl_closure_set M (set TI)\n  Var x \\<in> timpl_closure (Var x) (set TI)\n\ngoal (1 subgoal):\n 1. \\<exists>a\\<in>timpl_closure (Var x) (set TI).\n       intruder_synth (timpl_closure_set M (set TI)) a", "by force"], ["proof (state)\nthis:\n  \\<exists>a\\<in>timpl_closure (Var x) (set TI).\n     intruder_synth (timpl_closure_set M (set TI)) a\n\ngoal (1 subgoal):\n 1. \\<And>M TI f T Ma TIa.\n       \\<lbrakk>\\<And>z M TIa.\n                   \\<lbrakk>z \\<in> set T;\n                    intruder_synth_mod_eq_timpls M TI z;\n                    set TI =\n                    {(a, b).\n                     (a, b) \\<in> (set TIa)\\<^sup>+ \\<and>\n                     a \\<noteq> b}\\<rbrakk>\n                   \\<Longrightarrow> Bex (timpl_closure z (set TIa))\n((\\<turnstile>\\<^sub>c) (timpl_closure_set M (set TIa)));\n        intruder_synth_mod_eq_timpls Ma TI (Fun f T);\n        set TI =\n        {(a, b).\n         (a, b) \\<in> (set TIa)\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n       \\<Longrightarrow> Bex (timpl_closure (Fun f T) (set TIa))\n                          ((\\<turnstile>\\<^sub>c)\n                            (timpl_closure_set Ma (set TIa)))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>M TI f T Ma TIa.\n       \\<lbrakk>\\<And>z M TIa.\n                   \\<lbrakk>z \\<in> set T;\n                    intruder_synth_mod_eq_timpls M TI z;\n                    set TI =\n                    {(a, b).\n                     (a, b) \\<in> (set TIa)\\<^sup>+ \\<and>\n                     a \\<noteq> b}\\<rbrakk>\n                   \\<Longrightarrow> Bex (timpl_closure z (set TIa))\n((\\<turnstile>\\<^sub>c) (timpl_closure_set M (set TIa)));\n        intruder_synth_mod_eq_timpls Ma TI (Fun f T);\n        set TI =\n        {(a, b).\n         (a, b) \\<in> (set TIa)\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n       \\<Longrightarrow> Bex (timpl_closure (Fun f T) (set TIa))\n                          ((\\<turnstile>\\<^sub>c)\n                            (timpl_closure_set Ma (set TIa)))", "case (2 M TI' f T M TI)"], ["proof (state)\nthis:\n  \\<lbrakk>?z43 \\<in> set T; intruder_synth_mod_eq_timpls ?M43 TI' ?z43;\n   set TI' =\n   {a. case a of\n       (a, b) \\<Rightarrow>\n         (a, b) \\<in> (set ?TI43)\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n  \\<Longrightarrow> \\<exists>a\\<in>timpl_closure ?z43 (set ?TI43).\n                       intruder_synth (timpl_closure_set ?M43 (set ?TI43)) a\n  intruder_synth_mod_eq_timpls M TI' (Fun f T)\n  set TI' =\n  {a. case a of\n      (a, b) \\<Rightarrow>\n        (a, b) \\<in> (set TI)\\<^sup>+ \\<and> a \\<noteq> b}\n\ngoal (1 subgoal):\n 1. \\<And>M TI f T Ma TIa.\n       \\<lbrakk>\\<And>z M TIa.\n                   \\<lbrakk>z \\<in> set T;\n                    intruder_synth_mod_eq_timpls M TI z;\n                    set TI =\n                    {(a, b).\n                     (a, b) \\<in> (set TIa)\\<^sup>+ \\<and>\n                     a \\<noteq> b}\\<rbrakk>\n                   \\<Longrightarrow> Bex (timpl_closure z (set TIa))\n((\\<turnstile>\\<^sub>c) (timpl_closure_set M (set TIa)));\n        intruder_synth_mod_eq_timpls Ma TI (Fun f T);\n        set TI =\n        {(a, b).\n         (a, b) \\<in> (set TIa)\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n       \\<Longrightarrow> Bex (timpl_closure (Fun f T) (set TIa))\n                          ((\\<turnstile>\\<^sub>c)\n                            (timpl_closure_set Ma (set TIa)))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>a\\<in>timpl_closure (Fun f T) (set TI).\n       intruder_synth (timpl_closure_set M (set TI)) a", "proof (cases \"\\<exists>m \\<in> M. equal_mod_timpls TI' m (Fun f T)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>m\\<in>M. equal_mod_timpls TI' m (Fun f T) \\<Longrightarrow>\n    \\<exists>a\\<in>timpl_closure (Fun f T) (set TI).\n       intruder_synth (timpl_closure_set M (set TI)) a\n 2. \\<not> (\\<exists>m\\<in>M.\n               equal_mod_timpls TI' m (Fun f T)) \\<Longrightarrow>\n    \\<exists>a\\<in>timpl_closure (Fun f T) (set TI).\n       intruder_synth (timpl_closure_set M (set TI)) a", "case True"], ["proof (state)\nthis:\n  \\<exists>m\\<in>M. equal_mod_timpls TI' m (Fun f T)\n\ngoal (2 subgoals):\n 1. \\<exists>m\\<in>M. equal_mod_timpls TI' m (Fun f T) \\<Longrightarrow>\n    \\<exists>a\\<in>timpl_closure (Fun f T) (set TI).\n       intruder_synth (timpl_closure_set M (set TI)) a\n 2. \\<not> (\\<exists>m\\<in>M.\n               equal_mod_timpls TI' m (Fun f T)) \\<Longrightarrow>\n    \\<exists>a\\<in>timpl_closure (Fun f T) (set TI).\n       intruder_synth (timpl_closure_set M (set TI)) a", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>m\\<in>M. equal_mod_timpls TI' m (Fun f T)\n\ngoal (1 subgoal):\n 1. \\<exists>a\\<in>timpl_closure (Fun f T) (set TI).\n       intruder_synth (timpl_closure_set M (set TI)) a", "using **[OF \"2.prems\"(2), of M \"Fun f T\"]\n                intruder_synth.AxiomC[of _ \"timpl_closure_set M (set TI)\"]"], ["proof (prove)\nusing this:\n  \\<exists>m\\<in>M. equal_mod_timpls TI' m (Fun f T)\n  (\\<exists>m\\<in>M. equal_mod_timpls TI' m (Fun f T)) =\n  (\\<exists>s\\<in>timpl_closure (Fun f T) (set TI).\n      s \\<in> timpl_closure_set M (set TI))\n  ?t \\<in> timpl_closure_set M (set TI) \\<Longrightarrow>\n  timpl_closure_set M (set TI) \\<turnstile>\\<^sub>c ?t\n\ngoal (1 subgoal):\n 1. \\<exists>a\\<in>timpl_closure (Fun f T) (set TI).\n       intruder_synth (timpl_closure_set M (set TI)) a", "by blast"], ["proof (state)\nthis:\n  \\<exists>a\\<in>timpl_closure (Fun f T) (set TI).\n     intruder_synth (timpl_closure_set M (set TI)) a\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>m\\<in>M.\n               equal_mod_timpls TI' m (Fun f T)) \\<Longrightarrow>\n    \\<exists>a\\<in>timpl_closure (Fun f T) (set TI).\n       intruder_synth (timpl_closure_set M (set TI)) a", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>m\\<in>M.\n               equal_mod_timpls TI' m (Fun f T)) \\<Longrightarrow>\n    \\<exists>a\\<in>timpl_closure (Fun f T) (set TI).\n       intruder_synth (timpl_closure_set M (set TI)) a", "case False"], ["proof (state)\nthis:\n  \\<not> (\\<exists>m\\<in>M. equal_mod_timpls TI' m (Fun f T))\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>m\\<in>M.\n               equal_mod_timpls TI' m (Fun f T)) \\<Longrightarrow>\n    \\<exists>a\\<in>timpl_closure (Fun f T) (set TI).\n       intruder_synth (timpl_closure_set M (set TI)) a", "hence f: \"public f\" \"length T = arity f\" \"list_all (intruder_synth_mod_eq_timpls M TI') T\""], ["proof (prove)\nusing this:\n  \\<not> (\\<exists>m\\<in>M. equal_mod_timpls TI' m (Fun f T))\n\ngoal (1 subgoal):\n 1. public f &&&\n    length T = arity f &&& list_all (intruder_synth_mod_eq_timpls M TI') T", "using \"2.prems\""], ["proof (prove)\nusing this:\n  \\<not> (\\<exists>m\\<in>M. equal_mod_timpls TI' m (Fun f T))\n  intruder_synth_mod_eq_timpls M TI' (Fun f T)\n  set TI' =\n  {a. case a of\n      (a, b) \\<Rightarrow>\n        (a, b) \\<in> (set TI)\\<^sup>+ \\<and> a \\<noteq> b}\n\ngoal (1 subgoal):\n 1. public f &&&\n    length T = arity f &&& list_all (intruder_synth_mod_eq_timpls M TI') T", "by force+"], ["proof (state)\nthis:\n  public f\n  length T = arity f\n  list_all (intruder_synth_mod_eq_timpls M TI') T\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>m\\<in>M.\n               equal_mod_timpls TI' m (Fun f T)) \\<Longrightarrow>\n    \\<exists>a\\<in>timpl_closure (Fun f T) (set TI).\n       intruder_synth (timpl_closure_set M (set TI)) a", "let ?sy = \"intruder_synth (timpl_closure_set M (set TI))\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>m\\<in>M.\n               equal_mod_timpls TI' m (Fun f T)) \\<Longrightarrow>\n    \\<exists>a\\<in>timpl_closure (Fun f T) (set TI).\n       intruder_synth (timpl_closure_set M (set TI)) a", "have IH: \"\\<exists>u \\<in> timpl_closure (T ! i) (set TI). ?sy u\"\n          when i: \"i < length T\" for i"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>u\\<in>timpl_closure (T ! i) (set TI).\n       timpl_closure_set M (set TI) \\<turnstile>\\<^sub>c u", "using \"2.IH\"[of _ M TI] f(3) nth_mem[OF i] \"2.prems\"(2)"], ["proof (prove)\nusing this:\n  \\<lbrakk>?z43 \\<in> set T; intruder_synth_mod_eq_timpls M TI' ?z43;\n   set TI' =\n   {a. case a of\n       (a, b) \\<Rightarrow>\n         (a, b) \\<in> (set TI)\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n  \\<Longrightarrow> \\<exists>a\\<in>timpl_closure ?z43 (set TI).\n                       intruder_synth (timpl_closure_set M (set TI)) a\n  list_all (intruder_synth_mod_eq_timpls M TI') T\n  T ! i \\<in> set T\n  set TI' =\n  {a. case a of\n      (a, b) \\<Rightarrow>\n        (a, b) \\<in> (set TI)\\<^sup>+ \\<and> a \\<noteq> b}\n\ngoal (1 subgoal):\n 1. \\<exists>u\\<in>timpl_closure (T ! i) (set TI).\n       timpl_closure_set M (set TI) \\<turnstile>\\<^sub>c u", "unfolding list_all_iff"], ["proof (prove)\nusing this:\n  \\<lbrakk>?z43 \\<in> set T; intruder_synth_mod_eq_timpls M TI' ?z43;\n   set TI' =\n   {a. case a of\n       (a, b) \\<Rightarrow>\n         (a, b) \\<in> (set TI)\\<^sup>+ \\<and> a \\<noteq> b}\\<rbrakk>\n  \\<Longrightarrow> \\<exists>a\\<in>timpl_closure ?z43 (set TI).\n                       intruder_synth (timpl_closure_set M (set TI)) a\n  Ball (set T) (intruder_synth_mod_eq_timpls M TI')\n  T ! i \\<in> set T\n  set TI' =\n  {a. case a of\n      (a, b) \\<Rightarrow>\n        (a, b) \\<in> (set TI)\\<^sup>+ \\<and> a \\<noteq> b}\n\ngoal (1 subgoal):\n 1. \\<exists>u\\<in>timpl_closure (T ! i) (set TI).\n       timpl_closure_set M (set TI) \\<turnstile>\\<^sub>c u", "by blast"], ["proof (state)\nthis:\n  ?i43 < length T \\<Longrightarrow>\n  \\<exists>u\\<in>timpl_closure (T ! ?i43) (set TI).\n     timpl_closure_set M (set TI) \\<turnstile>\\<^sub>c u\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>m\\<in>M.\n               equal_mod_timpls TI' m (Fun f T)) \\<Longrightarrow>\n    \\<exists>a\\<in>timpl_closure (Fun f T) (set TI).\n       intruder_synth (timpl_closure_set M (set TI)) a", "define S where \"S \\<equiv> map (\\<lambda>u. SOME v. v \\<in> timpl_closure u (set TI) \\<and> ?sy v) T\""], ["proof (state)\nthis:\n  S \\<equiv>\n  map (\\<lambda>u.\n          SOME v.\n             v \\<in> timpl_closure u (set TI) \\<and>\n             timpl_closure_set M (set TI) \\<turnstile>\\<^sub>c v)\n   T\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>m\\<in>M.\n               equal_mod_timpls TI' m (Fun f T)) \\<Longrightarrow>\n    \\<exists>a\\<in>timpl_closure (Fun f T) (set TI).\n       intruder_synth (timpl_closure_set M (set TI)) a", "have S1: \"length T = length S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length T = length S", "unfolding S_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. length T =\n    length\n     (map (\\<lambda>u.\n              SOME v.\n                 v \\<in> timpl_closure u (set TI) \\<and>\n                 timpl_closure_set M (set TI) \\<turnstile>\\<^sub>c v)\n       T)", "by simp"], ["proof (state)\nthis:\n  length T = length S\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>m\\<in>M.\n               equal_mod_timpls TI' m (Fun f T)) \\<Longrightarrow>\n    \\<exists>a\\<in>timpl_closure (Fun f T) (set TI).\n       intruder_synth (timpl_closure_set M (set TI)) a", "have S2: \"S ! i \\<in> timpl_closure (T ! i) (set TI)\"\n                  \"timpl_closure_set M (set TI) \\<turnstile>\\<^sub>c S ! i\"\n          when i: \"i < length S\" for i"], ["proof (prove)\ngoal (1 subgoal):\n 1. S ! i \\<in> timpl_closure (T ! i) (set TI) &&&\n    timpl_closure_set M (set TI) \\<turnstile>\\<^sub>c S ! i", "using i IH someI_ex[of \"\\<lambda>v. v \\<in> timpl_closure (T ! i) (set TI) \\<and> ?sy v\"]"], ["proof (prove)\nusing this:\n  i < length S\n  ?i43 < length T \\<Longrightarrow>\n  \\<exists>u\\<in>timpl_closure (T ! ?i43) (set TI).\n     timpl_closure_set M (set TI) \\<turnstile>\\<^sub>c u\n  \\<exists>x.\n     x \\<in> timpl_closure (T ! i) (set TI) \\<and>\n     timpl_closure_set M (set TI) \\<turnstile>\\<^sub>c x \\<Longrightarrow>\n  (SOME x.\n      x \\<in> timpl_closure (T ! i) (set TI) \\<and>\n      timpl_closure_set M (set TI) \\<turnstile>\\<^sub>c x)\n  \\<in> timpl_closure (T ! i) (set TI) \\<and>\n  timpl_closure_set M (set TI) \\<turnstile>\\<^sub>c\n  (SOME x.\n      x \\<in> timpl_closure (T ! i) (set TI) \\<and>\n      timpl_closure_set M (set TI) \\<turnstile>\\<^sub>c x)\n\ngoal (1 subgoal):\n 1. S ! i \\<in> timpl_closure (T ! i) (set TI) &&&\n    timpl_closure_set M (set TI) \\<turnstile>\\<^sub>c S ! i", "unfolding S_def"], ["proof (prove)\nusing this:\n  i < length\n       (map (\\<lambda>u.\n                SOME v.\n                   v \\<in> timpl_closure u (set TI) \\<and>\n                   timpl_closure_set M (set TI) \\<turnstile>\\<^sub>c v)\n         T)\n  ?i43 < length T \\<Longrightarrow>\n  \\<exists>u\\<in>timpl_closure (T ! ?i43) (set TI).\n     timpl_closure_set M (set TI) \\<turnstile>\\<^sub>c u\n  \\<exists>x.\n     x \\<in> timpl_closure (T ! i) (set TI) \\<and>\n     timpl_closure_set M (set TI) \\<turnstile>\\<^sub>c x \\<Longrightarrow>\n  (SOME x.\n      x \\<in> timpl_closure (T ! i) (set TI) \\<and>\n      timpl_closure_set M (set TI) \\<turnstile>\\<^sub>c x)\n  \\<in> timpl_closure (T ! i) (set TI) \\<and>\n  timpl_closure_set M (set TI) \\<turnstile>\\<^sub>c\n  (SOME x.\n      x \\<in> timpl_closure (T ! i) (set TI) \\<and>\n      timpl_closure_set M (set TI) \\<turnstile>\\<^sub>c x)\n\ngoal (1 subgoal):\n 1. map (\\<lambda>u.\n            SOME v.\n               v \\<in> timpl_closure u (set TI) \\<and>\n               timpl_closure_set M (set TI) \\<turnstile>\\<^sub>c v)\n     T !\n    i\n    \\<in> timpl_closure (T ! i) (set TI) &&&\n    timpl_closure_set M (set TI) \\<turnstile>\\<^sub>c\n    map (\\<lambda>u.\n            SOME v.\n               v \\<in> timpl_closure u (set TI) \\<and>\n               timpl_closure_set M (set TI) \\<turnstile>\\<^sub>c v)\n     T !\n    i", "by auto"], ["proof (state)\nthis:\n  ?i43 < length S \\<Longrightarrow>\n  S ! ?i43 \\<in> timpl_closure (T ! ?i43) (set TI)\n  ?i43 < length S \\<Longrightarrow>\n  timpl_closure_set M (set TI) \\<turnstile>\\<^sub>c S ! ?i43\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>m\\<in>M.\n               equal_mod_timpls TI' m (Fun f T)) \\<Longrightarrow>\n    \\<exists>a\\<in>timpl_closure (Fun f T) (set TI).\n       intruder_synth (timpl_closure_set M (set TI)) a", "have \"Fun f S \\<in> timpl_closure (Fun f T) (set TI)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Fun f S \\<in> timpl_closure (Fun f T) (set TI)", "using timpl_closure_FunI[of T S \"set TI\" f f] S1 S2(1)"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>i.\n              i < length T \\<Longrightarrow>\n              (T ! i, S ! i) \\<in> timpl_closure' (set TI);\n   length T = length S;\n   f = f \\<or>\n   (\\<exists>a b.\n       (a, b) \\<in> (set TI)\\<^sup>+ \\<and>\n       f = Abs a \\<and> f = Abs b)\\<rbrakk>\n  \\<Longrightarrow> (Fun f T, Fun f S) \\<in> timpl_closure' (set TI)\n  length T = length S\n  ?i43 < length S \\<Longrightarrow>\n  S ! ?i43 \\<in> timpl_closure (T ! ?i43) (set TI)\n\ngoal (1 subgoal):\n 1. Fun f S \\<in> timpl_closure (Fun f T) (set TI)", "unfolding timpl_closure_is_timpl_closure'"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>i.\n              i < length T \\<Longrightarrow>\n              (T ! i, S ! i) \\<in> timpl_closure' (set TI);\n   length T = length S;\n   f = f \\<or>\n   (\\<exists>a b.\n       (a, b) \\<in> (set TI)\\<^sup>+ \\<and>\n       f = Abs a \\<and> f = Abs b)\\<rbrakk>\n  \\<Longrightarrow> (Fun f T, Fun f S) \\<in> timpl_closure' (set TI)\n  length T = length S\n  ?i43 < length S \\<Longrightarrow>\n  (T ! ?i43, S ! ?i43) \\<in> timpl_closure' (set TI)\n\ngoal (1 subgoal):\n 1. (Fun f T, Fun f S) \\<in> timpl_closure' (set TI)", "by presburger"], ["proof (state)\nthis:\n  Fun f S \\<in> timpl_closure (Fun f T) (set TI)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>m\\<in>M.\n               equal_mod_timpls TI' m (Fun f T)) \\<Longrightarrow>\n    \\<exists>a\\<in>timpl_closure (Fun f T) (set TI).\n       intruder_synth (timpl_closure_set M (set TI)) a", "thus ?thesis"], ["proof (prove)\nusing this:\n  Fun f S \\<in> timpl_closure (Fun f T) (set TI)\n\ngoal (1 subgoal):\n 1. \\<exists>a\\<in>timpl_closure (Fun f T) (set TI).\n       intruder_synth (timpl_closure_set M (set TI)) a", "by (metis intruder_synth.ComposeC[of S f] f(1,2) S1 S2(2) in_set_conv_nth[of _ S])"], ["proof (state)\nthis:\n  \\<exists>a\\<in>timpl_closure (Fun f T) (set TI).\n     intruder_synth (timpl_closure_set M (set TI)) a\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>a\\<in>timpl_closure (Fun f T) (set TI).\n     intruder_synth (timpl_closure_set M (set TI)) a\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  intruder_synth_mod_eq_timpls M TI' t \\<Longrightarrow>\n  \\<exists>s\\<in>timpl_closure t (set TI).\n     intruder_synth (timpl_closure_set M (set TI)) s\n\ngoal (1 subgoal):\n 1. \\<exists>s\\<in>timpl_closure t (set TI).\n       intruder_synth (timpl_closure_set M (set TI)) s \\<Longrightarrow>\n    intruder_synth_mod_eq_timpls M TI' t", "show \"?C t\" when D: \"?D t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. intruder_synth_mod_eq_timpls M TI' t", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. intruder_synth_mod_eq_timpls M TI' t", "obtain s where \"timpl_closure_set M (set TI) \\<turnstile>\\<^sub>c s\" \"s \\<in> timpl_closure t (set TI)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>s.\n        \\<lbrakk>timpl_closure_set M (set TI) \\<turnstile>\\<^sub>c s;\n         s \\<in> timpl_closure t (set TI)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using D"], ["proof (prove)\nusing this:\n  \\<exists>s\\<in>timpl_closure t (set TI).\n     intruder_synth (timpl_closure_set M (set TI)) s\n\ngoal (1 subgoal):\n 1. (\\<And>s.\n        \\<lbrakk>timpl_closure_set M (set TI) \\<turnstile>\\<^sub>c s;\n         s \\<in> timpl_closure t (set TI)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by moura"], ["proof (state)\nthis:\n  timpl_closure_set M (set TI) \\<turnstile>\\<^sub>c s\n  s \\<in> timpl_closure t (set TI)\n\ngoal (1 subgoal):\n 1. intruder_synth_mod_eq_timpls M TI' t", "thus ?thesis"], ["proof (prove)\nusing this:\n  timpl_closure_set M (set TI) \\<turnstile>\\<^sub>c s\n  s \\<in> timpl_closure t (set TI)\n\ngoal (1 subgoal):\n 1. intruder_synth_mod_eq_timpls M TI' t", "proof (induction s arbitrary: t rule: intruder_synth_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>t ta.\n       \\<lbrakk>t \\<in> timpl_closure_set M (set TI);\n        t \\<in> timpl_closure ta (set TI)\\<rbrakk>\n       \\<Longrightarrow> intruder_synth_mod_eq_timpls M TI' ta\n 2. \\<And>T f t.\n       \\<lbrakk>length T = arity f; public f;\n        \\<And>t.\n           t \\<in> set T \\<Longrightarrow>\n           timpl_closure_set M (set TI) \\<turnstile>\\<^sub>c t;\n        \\<And>t ta.\n           \\<lbrakk>t \\<in> set T;\n            t \\<in> timpl_closure ta (set TI)\\<rbrakk>\n           \\<Longrightarrow> intruder_synth_mod_eq_timpls M TI' ta;\n        Fun f T \\<in> timpl_closure t (set TI)\\<rbrakk>\n       \\<Longrightarrow> intruder_synth_mod_eq_timpls M TI' t", "case (AxiomC s t)"], ["proof (state)\nthis:\n  s \\<in> timpl_closure_set M (set TI)\n  s \\<in> timpl_closure t (set TI)\n\ngoal (2 subgoals):\n 1. \\<And>t ta.\n       \\<lbrakk>t \\<in> timpl_closure_set M (set TI);\n        t \\<in> timpl_closure ta (set TI)\\<rbrakk>\n       \\<Longrightarrow> intruder_synth_mod_eq_timpls M TI' ta\n 2. \\<And>T f t.\n       \\<lbrakk>length T = arity f; public f;\n        \\<And>t.\n           t \\<in> set T \\<Longrightarrow>\n           timpl_closure_set M (set TI) \\<turnstile>\\<^sub>c t;\n        \\<And>t ta.\n           \\<lbrakk>t \\<in> set T;\n            t \\<in> timpl_closure ta (set TI)\\<rbrakk>\n           \\<Longrightarrow> intruder_synth_mod_eq_timpls M TI' ta;\n        Fun f T \\<in> timpl_closure t (set TI)\\<rbrakk>\n       \\<Longrightarrow> intruder_synth_mod_eq_timpls M TI' t", "note 1 = timpl_closure_set_Var_in_iff[of _ M \"set TI\"] timpl_closure_Var_inv[of s _ \"set TI\"]"], ["proof (state)\nthis:\n  (Var ?x \\<in> timpl_closure_set M (set TI)) = (Var ?x \\<in> M)\n  s \\<in> timpl_closure (Var ?x) (set TI) \\<Longrightarrow> s = Var ?x\n\ngoal (2 subgoals):\n 1. \\<And>t ta.\n       \\<lbrakk>t \\<in> timpl_closure_set M (set TI);\n        t \\<in> timpl_closure ta (set TI)\\<rbrakk>\n       \\<Longrightarrow> intruder_synth_mod_eq_timpls M TI' ta\n 2. \\<And>T f t.\n       \\<lbrakk>length T = arity f; public f;\n        \\<And>t.\n           t \\<in> set T \\<Longrightarrow>\n           timpl_closure_set M (set TI) \\<turnstile>\\<^sub>c t;\n        \\<And>t ta.\n           \\<lbrakk>t \\<in> set T;\n            t \\<in> timpl_closure ta (set TI)\\<rbrakk>\n           \\<Longrightarrow> intruder_synth_mod_eq_timpls M TI' ta;\n        Fun f T \\<in> timpl_closure t (set TI)\\<rbrakk>\n       \\<Longrightarrow> intruder_synth_mod_eq_timpls M TI' t", "note 2 = **[OF Q, of M]"], ["proof (state)\nthis:\n  (\\<exists>m\\<in>M. equal_mod_timpls TI' m ?t43) =\n  (\\<exists>s\\<in>timpl_closure ?t43 (set TI).\n      s \\<in> timpl_closure_set M (set TI))\n\ngoal (2 subgoals):\n 1. \\<And>t ta.\n       \\<lbrakk>t \\<in> timpl_closure_set M (set TI);\n        t \\<in> timpl_closure ta (set TI)\\<rbrakk>\n       \\<Longrightarrow> intruder_synth_mod_eq_timpls M TI' ta\n 2. \\<And>T f t.\n       \\<lbrakk>length T = arity f; public f;\n        \\<And>t.\n           t \\<in> set T \\<Longrightarrow>\n           timpl_closure_set M (set TI) \\<turnstile>\\<^sub>c t;\n        \\<And>t ta.\n           \\<lbrakk>t \\<in> set T;\n            t \\<in> timpl_closure ta (set TI)\\<rbrakk>\n           \\<Longrightarrow> intruder_synth_mod_eq_timpls M TI' ta;\n        Fun f T \\<in> timpl_closure t (set TI)\\<rbrakk>\n       \\<Longrightarrow> intruder_synth_mod_eq_timpls M TI' t", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. intruder_synth_mod_eq_timpls M TI' t", "proof (cases t)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x1.\n       t = Var x1 \\<Longrightarrow> intruder_synth_mod_eq_timpls M TI' t\n 2. \\<And>x21 x22.\n       t = Fun x21 x22 \\<Longrightarrow>\n       intruder_synth_mod_eq_timpls M TI' t", "case Var"], ["proof (state)\nthis:\n  t = Var x1_\n\ngoal (2 subgoals):\n 1. \\<And>x1.\n       t = Var x1 \\<Longrightarrow> intruder_synth_mod_eq_timpls M TI' t\n 2. \\<And>x21 x22.\n       t = Fun x21 x22 \\<Longrightarrow>\n       intruder_synth_mod_eq_timpls M TI' t", "thus ?thesis"], ["proof (prove)\nusing this:\n  t = Var x1_\n\ngoal (1 subgoal):\n 1. intruder_synth_mod_eq_timpls M TI' t", "using 1 AxiomC"], ["proof (prove)\nusing this:\n  t = Var x1_\n  (Var ?x \\<in> timpl_closure_set M (set TI)) = (Var ?x \\<in> M)\n  s \\<in> timpl_closure (Var ?x) (set TI) \\<Longrightarrow> s = Var ?x\n  s \\<in> timpl_closure_set M (set TI)\n  s \\<in> timpl_closure t (set TI)\n\ngoal (1 subgoal):\n 1. intruder_synth_mod_eq_timpls M TI' t", "by auto"], ["proof (state)\nthis:\n  intruder_synth_mod_eq_timpls M TI' t\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       t = Fun x21 x22 \\<Longrightarrow>\n       intruder_synth_mod_eq_timpls M TI' t", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       t = Fun x21 x22 \\<Longrightarrow>\n       intruder_synth_mod_eq_timpls M TI' t", "case Fun"], ["proof (state)\nthis:\n  t = Fun x21_ x22_\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       t = Fun x21 x22 \\<Longrightarrow>\n       intruder_synth_mod_eq_timpls M TI' t", "thus ?thesis"], ["proof (prove)\nusing this:\n  t = Fun x21_ x22_\n\ngoal (1 subgoal):\n 1. intruder_synth_mod_eq_timpls M TI' t", "using 2 AxiomC"], ["proof (prove)\nusing this:\n  t = Fun x21_ x22_\n  (\\<exists>m\\<in>M. equal_mod_timpls TI' m ?t43) =\n  (\\<exists>s\\<in>timpl_closure ?t43 (set TI).\n      s \\<in> timpl_closure_set M (set TI))\n  s \\<in> timpl_closure_set M (set TI)\n  s \\<in> timpl_closure t (set TI)\n\ngoal (1 subgoal):\n 1. intruder_synth_mod_eq_timpls M TI' t", "by auto"], ["proof (state)\nthis:\n  intruder_synth_mod_eq_timpls M TI' t\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  intruder_synth_mod_eq_timpls M TI' t\n\ngoal (1 subgoal):\n 1. \\<And>T f t.\n       \\<lbrakk>length T = arity f; public f;\n        \\<And>t.\n           t \\<in> set T \\<Longrightarrow>\n           timpl_closure_set M (set TI) \\<turnstile>\\<^sub>c t;\n        \\<And>t ta.\n           \\<lbrakk>t \\<in> set T;\n            t \\<in> timpl_closure ta (set TI)\\<rbrakk>\n           \\<Longrightarrow> intruder_synth_mod_eq_timpls M TI' ta;\n        Fun f T \\<in> timpl_closure t (set TI)\\<rbrakk>\n       \\<Longrightarrow> intruder_synth_mod_eq_timpls M TI' t", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>T f t.\n       \\<lbrakk>length T = arity f; public f;\n        \\<And>t.\n           t \\<in> set T \\<Longrightarrow>\n           timpl_closure_set M (set TI) \\<turnstile>\\<^sub>c t;\n        \\<And>t ta.\n           \\<lbrakk>t \\<in> set T;\n            t \\<in> timpl_closure ta (set TI)\\<rbrakk>\n           \\<Longrightarrow> intruder_synth_mod_eq_timpls M TI' ta;\n        Fun f T \\<in> timpl_closure t (set TI)\\<rbrakk>\n       \\<Longrightarrow> intruder_synth_mod_eq_timpls M TI' t", "case (ComposeC T f t)"], ["proof (state)\nthis:\n  length T = arity f\n  public f\n  ?t43 \\<in> set T \\<Longrightarrow>\n  timpl_closure_set M (set TI) \\<turnstile>\\<^sub>c ?t43\n  \\<lbrakk>?t43 \\<in> set T;\n   ?t43 \\<in> timpl_closure ?ta43 (set TI)\\<rbrakk>\n  \\<Longrightarrow> intruder_synth_mod_eq_timpls M TI' ?ta43\n  Fun f T \\<in> timpl_closure t (set TI)\n\ngoal (1 subgoal):\n 1. \\<And>T f t.\n       \\<lbrakk>length T = arity f; public f;\n        \\<And>t.\n           t \\<in> set T \\<Longrightarrow>\n           timpl_closure_set M (set TI) \\<turnstile>\\<^sub>c t;\n        \\<And>t ta.\n           \\<lbrakk>t \\<in> set T;\n            t \\<in> timpl_closure ta (set TI)\\<rbrakk>\n           \\<Longrightarrow> intruder_synth_mod_eq_timpls M TI' ta;\n        Fun f T \\<in> timpl_closure t (set TI)\\<rbrakk>\n       \\<Longrightarrow> intruder_synth_mod_eq_timpls M TI' t", "obtain g S where gS:\n            \"t = Fun g S\" \"length S = length T\"\n            \"\\<forall>i < length T. T ! i \\<in> timpl_closure (S ! i) (set TI)\"\n            \"g \\<noteq> f \\<Longrightarrow> is_Abs g \\<and> is_Abs f \\<and> (the_Abs g, the_Abs f) \\<in> (set TI)\\<^sup>+\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>g S.\n        \\<lbrakk>t = Fun g S; length S = length T;\n         \\<forall>i<length T. T ! i \\<in> timpl_closure (S ! i) (set TI);\n         g \\<noteq> f \\<Longrightarrow>\n         is_Abs g \\<and>\n         is_Abs f \\<and>\n         (the_Abs g, the_Abs f) \\<in> (set TI)\\<^sup>+\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using ComposeC.prems(1) timpl_closure'_inv'[of t \"Fun f T\" \"set TI\"]\n                timpl_closure_is_timpl_closure'[of _ _ \"set TI\"]"], ["proof (prove)\nusing this:\n  Fun f T \\<in> timpl_closure t (set TI)\n  (t, Fun f T) \\<in> timpl_closure' (set TI) \\<Longrightarrow>\n  (\\<exists>x. t = Var x \\<and> Fun f T = Var x) \\<or>\n  (\\<exists>fa g S Ta.\n      t = Fun fa S \\<and>\n      Fun f T = Fun g Ta \\<and>\n      length S = length Ta \\<and>\n      (\\<forall>i<length Ta.\n          (S ! i, Ta ! i) \\<in> timpl_closure' (set TI)) \\<and>\n      (fa \\<noteq> g \\<longrightarrow>\n       is_Abs fa \\<and>\n       is_Abs g \\<and> (the_Abs fa, the_Abs g) \\<in> (set TI)\\<^sup>+))\n  (?s \\<in> timpl_closure ?t (set TI)) =\n  ((?t, ?s) \\<in> timpl_closure' (set TI))\n\ngoal (1 subgoal):\n 1. (\\<And>g S.\n        \\<lbrakk>t = Fun g S; length S = length T;\n         \\<forall>i<length T. T ! i \\<in> timpl_closure (S ! i) (set TI);\n         g \\<noteq> f \\<Longrightarrow>\n         is_Abs g \\<and>\n         is_Abs f \\<and>\n         (the_Abs g, the_Abs f) \\<in> (set TI)\\<^sup>+\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  t = Fun g S\n  length S = length T\n  \\<forall>i<length T. T ! i \\<in> timpl_closure (S ! i) (set TI)\n  g \\<noteq> f \\<Longrightarrow>\n  is_Abs g \\<and>\n  is_Abs f \\<and> (the_Abs g, the_Abs f) \\<in> (set TI)\\<^sup>+\n\ngoal (1 subgoal):\n 1. \\<And>T f t.\n       \\<lbrakk>length T = arity f; public f;\n        \\<And>t.\n           t \\<in> set T \\<Longrightarrow>\n           timpl_closure_set M (set TI) \\<turnstile>\\<^sub>c t;\n        \\<And>t ta.\n           \\<lbrakk>t \\<in> set T;\n            t \\<in> timpl_closure ta (set TI)\\<rbrakk>\n           \\<Longrightarrow> intruder_synth_mod_eq_timpls M TI' ta;\n        Fun f T \\<in> timpl_closure t (set TI)\\<rbrakk>\n       \\<Longrightarrow> intruder_synth_mod_eq_timpls M TI' t", "have IH: \"intruder_synth_mod_eq_timpls M TI' u\" when u: \"u \\<in> set S\" for u"], ["proof (prove)\ngoal (1 subgoal):\n 1. intruder_synth_mod_eq_timpls M TI' u", "by (metis u gS(2,3) ComposeC.IH in_set_conv_nth)"], ["proof (state)\nthis:\n  ?u43 \\<in> set S \\<Longrightarrow> intruder_synth_mod_eq_timpls M TI' ?u43\n\ngoal (1 subgoal):\n 1. \\<And>T f t.\n       \\<lbrakk>length T = arity f; public f;\n        \\<And>t.\n           t \\<in> set T \\<Longrightarrow>\n           timpl_closure_set M (set TI) \\<turnstile>\\<^sub>c t;\n        \\<And>t ta.\n           \\<lbrakk>t \\<in> set T;\n            t \\<in> timpl_closure ta (set TI)\\<rbrakk>\n           \\<Longrightarrow> intruder_synth_mod_eq_timpls M TI' ta;\n        Fun f T \\<in> timpl_closure t (set TI)\\<rbrakk>\n       \\<Longrightarrow> intruder_synth_mod_eq_timpls M TI' t", "note 0 = list_all_iff[of \"intruder_synth_mod_eq_timpls M TI'\" S]\n                 intruder_synth_mod_eq_timpls.simps(2)[of M TI' g S]"], ["proof (state)\nthis:\n  list_all (intruder_synth_mod_eq_timpls M TI') S =\n  Ball (set S) (intruder_synth_mod_eq_timpls M TI')\n  intruder_synth_mod_eq_timpls M TI' (Fun g S) =\n  ((\\<exists>t\\<in>M. equal_mod_timpls TI' t (Fun g S)) \\<or>\n   public g \\<and>\n   length S = arity g \\<and>\n   list_all (intruder_synth_mod_eq_timpls M TI') S)\n\ngoal (1 subgoal):\n 1. \\<And>T f t.\n       \\<lbrakk>length T = arity f; public f;\n        \\<And>t.\n           t \\<in> set T \\<Longrightarrow>\n           timpl_closure_set M (set TI) \\<turnstile>\\<^sub>c t;\n        \\<And>t ta.\n           \\<lbrakk>t \\<in> set T;\n            t \\<in> timpl_closure ta (set TI)\\<rbrakk>\n           \\<Longrightarrow> intruder_synth_mod_eq_timpls M TI' ta;\n        Fun f T \\<in> timpl_closure t (set TI)\\<rbrakk>\n       \\<Longrightarrow> intruder_synth_mod_eq_timpls M TI' t", "have \"f = g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f = g", "using ComposeC.hyps gS(4)"], ["proof (prove)\nusing this:\n  length T = arity f\n  public f\n  ?t43 \\<in> set T \\<Longrightarrow>\n  timpl_closure_set M (set TI) \\<turnstile>\\<^sub>c ?t43\n  g \\<noteq> f \\<Longrightarrow>\n  is_Abs g \\<and>\n  is_Abs f \\<and> (the_Abs g, the_Abs f) \\<in> (set TI)\\<^sup>+\n\ngoal (1 subgoal):\n 1. f = g", "unfolding is_Abs_def"], ["proof (prove)\nusing this:\n  length T = arity f\n  public f\n  ?t43 \\<in> set T \\<Longrightarrow>\n  timpl_closure_set M (set TI) \\<turnstile>\\<^sub>c ?t43\n  g \\<noteq> f \\<Longrightarrow>\n  (\\<exists>x4. g = Abs x4) \\<and>\n  (\\<exists>x4. f = Abs x4) \\<and>\n  (the_Abs g, the_Abs f) \\<in> (set TI)\\<^sup>+\n\ngoal (1 subgoal):\n 1. f = g", "by fastforce"], ["proof (state)\nthis:\n  f = g\n\ngoal (1 subgoal):\n 1. \\<And>T f t.\n       \\<lbrakk>length T = arity f; public f;\n        \\<And>t.\n           t \\<in> set T \\<Longrightarrow>\n           timpl_closure_set M (set TI) \\<turnstile>\\<^sub>c t;\n        \\<And>t ta.\n           \\<lbrakk>t \\<in> set T;\n            t \\<in> timpl_closure ta (set TI)\\<rbrakk>\n           \\<Longrightarrow> intruder_synth_mod_eq_timpls M TI' ta;\n        Fun f T \\<in> timpl_closure t (set TI)\\<rbrakk>\n       \\<Longrightarrow> intruder_synth_mod_eq_timpls M TI' t", "thus ?case"], ["proof (prove)\nusing this:\n  f = g\n\ngoal (1 subgoal):\n 1. intruder_synth_mod_eq_timpls M TI' t", "by (metis ComposeC.hyps(1,2) gS(1,2) IH 0)"], ["proof (state)\nthis:\n  intruder_synth_mod_eq_timpls M TI' t\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  intruder_synth_mod_eq_timpls M TI' t\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>s\\<in>timpl_closure t (set TI).\n     intruder_synth (timpl_closure_set M (set TI)) s \\<Longrightarrow>\n  intruder_synth_mod_eq_timpls M TI' t\n\ngoal (1 subgoal):\n 1. \\<exists>s\\<in>timpl_closure t (set TI).\n       intruder_synth (timpl_closure_set M (set TI)) s \\<Longrightarrow>\n    \\<exists>s\\<in>timpl_closure t (set TI).\n       intruder_synth (timpl_closure_set M (set TI)) s", "qed"], ["proof (state)\nthis:\n  set TI' =\n  {a. case a of\n      (a, b) \\<Rightarrow>\n        (a, b) \\<in> (set TI)\\<^sup>+ \\<and> a \\<noteq> b} \\<Longrightarrow>\n  intruder_synth_mod_eq_timpls M TI' t =\n  (\\<exists>s\\<in>timpl_closure t (set TI).\n      intruder_synth (timpl_closure_set M (set TI)) s)\n\ngoal (1 subgoal):\n 1. set TI' =\n    {(a, b).\n     (a, b) \\<in> (set TI)\\<^sup>+ \\<and> a \\<noteq> b} \\<Longrightarrow>\n    set TI' =\n    {a. case a of\n        (a, b) \\<Rightarrow>\n          (a, b) \\<in> (set TI)\\<^sup>+ \\<and> a \\<noteq> b}", "qed"], ["", "lemma timpl_closure_finite:\n  assumes t: \"wf\\<^sub>t\\<^sub>r\\<^sub>m t\"\n  shows \"finite (timpl_closure t (set TI))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (timpl_closure t (set TI))", "using timpls_transformable_to'_iff_in_timpl_closure[of TI t]\n      timpls_transformable_to_finite[OF t, of TI]"], ["proof (prove)\nusing this:\n  timpls_transformable_to' TI t ?t = (?t \\<in> timpl_closure t (set TI))\n  finite {s. timpls_transformable_to TI t s}\n  finite {s. timpls_transformable_to' TI t s}\n\ngoal (1 subgoal):\n 1. finite (timpl_closure t (set TI))", "by auto"], ["", "lemma timpl_closure_set_finite:\n  fixes TI::\"('sets set \\<times> 'sets set) list\"\n  assumes M_finite: \"finite M\"\n    and M_wf: \"wf\\<^sub>t\\<^sub>r\\<^sub>m\\<^sub>s M\"\n  shows \"finite (timpl_closure_set M (set TI))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (timpl_closure_set M (set TI))", "using timpl_closure_set_is_timpl_closure_union[of M \"set TI\"]\n      timpl_closure_finite[of _ TI] M_finite M_wf finite"], ["proof (prove)\nusing this:\n  timpl_closure_set M (set TI) = (\\<Union>t\\<in>M. timpl_closure t (set TI))\n  wf\\<^sub>t\\<^sub>r\\<^sub>m ?t \\<Longrightarrow>\n  finite (timpl_closure ?t (set TI))\n  finite M\n  wf\\<^sub>t\\<^sub>r\\<^sub>m\\<^sub>s M\n  finite ?A\n\ngoal (1 subgoal):\n 1. finite (timpl_closure_set M (set TI))", "by auto"], ["", "lemma comp_timpl_closure_is_timpl_closure_set:\n  fixes M and TI::\"('sets set \\<times> 'sets set) list\"\n  assumes M_finite: \"finite M\"\n    and M_wf: \"wf\\<^sub>t\\<^sub>r\\<^sub>m\\<^sub>s M\"\n  shows \"comp_timpl_closure M (set TI) = timpl_closure_set M (set TI)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. comp_timpl_closure M (set TI) = timpl_closure_set M (set TI)", "using lfp_while''[OF timpls_Un_mono[of M \"set TI\"]]\n      timpl_closure_set_finite[OF M_finite M_wf]\n      timpl_closure_set_lfp[of M \"set TI\"]"], ["proof (prove)\nusing this:\n  finite\n   (lfp (\\<lambda>X.\n            M \\<union>\n            (\\<Union>x\\<in>X.\n                \\<Union>(a, b)\\<in>set TI.\n                   set \\<langle>a --\\<guillemotright> b\\<rangle>\\<langle>x\\<rangle>))) \\<Longrightarrow>\n  lfp (\\<lambda>X.\n          M \\<union>\n          (\\<Union>x\\<in>X.\n              \\<Union>(a, b)\\<in>set TI.\n                 set \\<langle>a --\\<guillemotright> b\\<rangle>\\<langle>x\\<rangle>)) =\n  while\n   (\\<lambda>A.\n       M \\<union>\n       (\\<Union>x\\<in>A.\n           \\<Union>(a, b)\\<in>set TI.\n              set \\<langle>a --\\<guillemotright> b\\<rangle>\\<langle>x\\<rangle>) \\<noteq>\n       A)\n   (\\<lambda>X.\n       M \\<union>\n       (\\<Union>x\\<in>X.\n           \\<Union>(a, b)\\<in>set TI.\n              set \\<langle>a --\\<guillemotright> b\\<rangle>\\<langle>x\\<rangle>))\n   {}\n  finite (timpl_closure_set M (set ?TI))\n  lfp (\\<lambda>X.\n          M \\<union>\n          (\\<Union>x\\<in>X.\n              \\<Union>(a, b)\\<in>set TI.\n                 set \\<langle>a --\\<guillemotright> b\\<rangle>\\<langle>x\\<rangle>)) =\n  timpl_closure_set M (set TI)\n\ngoal (1 subgoal):\n 1. comp_timpl_closure M (set TI) = timpl_closure_set M (set TI)", "unfolding comp_timpl_closure_def Let_def"], ["proof (prove)\nusing this:\n  finite\n   (lfp (\\<lambda>X.\n            M \\<union>\n            (\\<Union>x\\<in>X.\n                \\<Union>(a, b)\\<in>set TI.\n                   set \\<langle>a --\\<guillemotright> b\\<rangle>\\<langle>x\\<rangle>))) \\<Longrightarrow>\n  lfp (\\<lambda>X.\n          M \\<union>\n          (\\<Union>x\\<in>X.\n              \\<Union>(a, b)\\<in>set TI.\n                 set \\<langle>a --\\<guillemotright> b\\<rangle>\\<langle>x\\<rangle>)) =\n  while\n   (\\<lambda>A.\n       M \\<union>\n       (\\<Union>x\\<in>A.\n           \\<Union>(a, b)\\<in>set TI.\n              set \\<langle>a --\\<guillemotright> b\\<rangle>\\<langle>x\\<rangle>) \\<noteq>\n       A)\n   (\\<lambda>X.\n       M \\<union>\n       (\\<Union>x\\<in>X.\n           \\<Union>(a, b)\\<in>set TI.\n              set \\<langle>a --\\<guillemotright> b\\<rangle>\\<langle>x\\<rangle>))\n   {}\n  finite (timpl_closure_set M (set ?TI))\n  lfp (\\<lambda>X.\n          M \\<union>\n          (\\<Union>x\\<in>X.\n              \\<Union>(a, b)\\<in>set TI.\n                 set \\<langle>a --\\<guillemotright> b\\<rangle>\\<langle>x\\<rangle>)) =\n  timpl_closure_set M (set TI)\n\ngoal (1 subgoal):\n 1. while\n     (\\<lambda>X.\n         M \\<union>\n         (\\<Union>x\\<in>X.\n             \\<Union>(a, b)\\<in>set TI.\n                set \\<langle>a --\\<guillemotright> b\\<rangle>\\<langle>x\\<rangle>) \\<noteq>\n         X)\n     (\\<lambda>X.\n         M \\<union>\n         (\\<Union>x\\<in>X.\n             \\<Union>(a, b)\\<in>set TI.\n                set \\<langle>a --\\<guillemotright> b\\<rangle>\\<langle>x\\<rangle>))\n     {} =\n    timpl_closure_set M (set TI)", "by presburger"], ["", "context\nbegin"], ["", "private"], ["", "lemma analyzed_closed_mod_timpls_is_analyzed_closed_timpl_closure_set_aux1:\n  fixes M::\"('fun,'atom,'sets) prot_terms\"\n  assumes f: \"arity\\<^sub>f f = length T\" \"arity\\<^sub>f f > 0\" \"Ana\\<^sub>f f = (K, R)\"\n    and i: \"i < length R\"\n    and M: \"timpl_closure_set M TI \\<turnstile>\\<^sub>c T ! (R ! i)\"\n    and m: \"Fun (Fu f) T \\<in> M\"\n    and t: \"Fun (Fu f) S \\<in> timpl_closure (Fun (Fu f) T) TI\"\n  shows \"timpl_closure_set M TI \\<turnstile>\\<^sub>c S ! (R ! i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. timpl_closure_set M TI \\<turnstile>\\<^sub>c S ! (R ! i)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. timpl_closure_set M TI \\<turnstile>\\<^sub>c S ! (R ! i)", "have \"R ! i < length T\""], ["proof (prove)\ngoal (1 subgoal):\n 1. R ! i < length T", "using i Ana\\<^sub>f_assm2_alt[OF f(3)] f(1)"], ["proof (prove)\nusing this:\n  i < length R\n  ?i \\<in> fv\\<^sub>s\\<^sub>e\\<^sub>t (set K) \\<union>\n           set R \\<Longrightarrow>\n  ?i < arity\\<^sub>f f\n  arity\\<^sub>f f = length T\n\ngoal (1 subgoal):\n 1. R ! i < length T", "by simp"], ["proof (state)\nthis:\n  R ! i < length T\n\ngoal (1 subgoal):\n 1. timpl_closure_set M TI \\<turnstile>\\<^sub>c S ! (R ! i)", "thus ?thesis"], ["proof (prove)\nusing this:\n  R ! i < length T\n\ngoal (1 subgoal):\n 1. timpl_closure_set M TI \\<turnstile>\\<^sub>c S ! (R ! i)", "using timpl_closure_Fun_inv'(1,2)[OF t] intruder_synth_timpl_closure'[OF M]"], ["proof (prove)\nusing this:\n  R ! i < length T\n  length S = length T\n  ?i < length S \\<Longrightarrow> S ! ?i \\<in> timpl_closure (T ! ?i) TI\n  ?s \\<in> timpl_closure (T ! (R ! i)) TI \\<Longrightarrow>\n  timpl_closure_set M TI \\<turnstile>\\<^sub>c ?s\n\ngoal (1 subgoal):\n 1. timpl_closure_set M TI \\<turnstile>\\<^sub>c S ! (R ! i)", "by presburger"], ["proof (state)\nthis:\n  timpl_closure_set M TI \\<turnstile>\\<^sub>c S ! (R ! i)\n\ngoal:\nNo subgoals!", "qed"], ["", "private"], ["", "lemma analyzed_closed_mod_timpls_is_analyzed_closed_timpl_closure_set_aux2:\n  fixes M::\"('fun,'atom,'sets) prot_terms\"\n  assumes M: \"\\<forall>s \\<in> set (snd (Ana m)). timpl_closure_set M TI \\<turnstile>\\<^sub>c s\"\n    and m: \"m \\<in> M\"\n    and t: \"t \\<in> timpl_closure m TI\"\n    and s: \"s \\<in> set (snd (Ana t))\"\n  shows \"timpl_closure_set M TI \\<turnstile>\\<^sub>c s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. timpl_closure_set M TI \\<turnstile>\\<^sub>c s", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. timpl_closure_set M TI \\<turnstile>\\<^sub>c s", "obtain f S K N where fS: \"t = Fun (Fu f) S\" \"arity\\<^sub>f f = length S\" \"0 < arity\\<^sub>f f\"\n      and Ana_f: \"Ana\\<^sub>f f = (K, N)\"\n      and Ana_t: \"Ana t = (K \\<cdot>\\<^sub>l\\<^sub>i\\<^sub>s\\<^sub>t (!) S, map ((!) S) N)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>f S K N.\n        \\<lbrakk>t = \\<langle>f S\\<rangle>\\<^sub>t;\n         arity\\<^sub>f f = length S; 0 < arity\\<^sub>f f;\n         Ana\\<^sub>f f = (K, N);\n         Ana t =\n         (K \\<cdot>\\<^sub>l\\<^sub>i\\<^sub>s\\<^sub>t (!) S,\n          map ((!) S) N)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using Ana_nonempty_inv[of t] s"], ["proof (prove)\nusing this:\n  Ana t \\<noteq> ([], []) \\<Longrightarrow>\n  \\<exists>f T.\n     t = \\<langle>f T\\<rangle>\\<^sub>t \\<and>\n     arity\\<^sub>f f = length T \\<and>\n     0 < arity\\<^sub>f f \\<and>\n     (\\<exists>K M.\n         Ana\\<^sub>f f = (K, M) \\<and>\n         Ana t =\n         (K \\<cdot>\\<^sub>l\\<^sub>i\\<^sub>s\\<^sub>t (!) T, map ((!) T) M))\n  s \\<in> set (snd (Ana t))\n\ngoal (1 subgoal):\n 1. (\\<And>f S K N.\n        \\<lbrakk>t = \\<langle>f S\\<rangle>\\<^sub>t;\n         arity\\<^sub>f f = length S; 0 < arity\\<^sub>f f;\n         Ana\\<^sub>f f = (K, N);\n         Ana t =\n         (K \\<cdot>\\<^sub>l\\<^sub>i\\<^sub>s\\<^sub>t (!) S,\n          map ((!) S) N)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  t = \\<langle>f S\\<rangle>\\<^sub>t\n  arity\\<^sub>f f = length S\n  0 < arity\\<^sub>f f\n  Ana\\<^sub>f f = (K, N)\n  Ana t = (K \\<cdot>\\<^sub>l\\<^sub>i\\<^sub>s\\<^sub>t (!) S, map ((!) S) N)\n\ngoal (1 subgoal):\n 1. timpl_closure_set M TI \\<turnstile>\\<^sub>c s", "then"], ["proof (chain)\npicking this:\n  t = \\<langle>f S\\<rangle>\\<^sub>t\n  arity\\<^sub>f f = length S\n  0 < arity\\<^sub>f f\n  Ana\\<^sub>f f = (K, N)\n  Ana t = (K \\<cdot>\\<^sub>l\\<^sub>i\\<^sub>s\\<^sub>t (!) S, map ((!) S) N)", "obtain T where T: \"m = Fun (Fu f) T\" \"length T = length S\""], ["proof (prove)\nusing this:\n  t = \\<langle>f S\\<rangle>\\<^sub>t\n  arity\\<^sub>f f = length S\n  0 < arity\\<^sub>f f\n  Ana\\<^sub>f f = (K, N)\n  Ana t = (K \\<cdot>\\<^sub>l\\<^sub>i\\<^sub>s\\<^sub>t (!) S, map ((!) S) N)\n\ngoal (1 subgoal):\n 1. (\\<And>T.\n        \\<lbrakk>m = \\<langle>f T\\<rangle>\\<^sub>t;\n         length T = length S\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using t timpl_closure_Fu_inv'[of f S m TI]"], ["proof (prove)\nusing this:\n  t = \\<langle>f S\\<rangle>\\<^sub>t\n  arity\\<^sub>f f = length S\n  0 < arity\\<^sub>f f\n  Ana\\<^sub>f f = (K, N)\n  Ana t = (K \\<cdot>\\<^sub>l\\<^sub>i\\<^sub>s\\<^sub>t (!) S, map ((!) S) N)\n  t \\<in> timpl_closure m TI\n  \\<langle>f S\\<rangle>\\<^sub>t \\<in> timpl_closure m TI \\<Longrightarrow>\n  \\<exists>Sa.\n     length Sa = length S \\<and> m = \\<langle>f Sa\\<rangle>\\<^sub>t\n\ngoal (1 subgoal):\n 1. (\\<And>T.\n        \\<lbrakk>m = \\<langle>f T\\<rangle>\\<^sub>t;\n         length T = length S\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by moura"], ["proof (state)\nthis:\n  m = \\<langle>f T\\<rangle>\\<^sub>t\n  length T = length S\n\ngoal (1 subgoal):\n 1. timpl_closure_set M TI \\<turnstile>\\<^sub>c s", "hence Ana_m: \"Ana m = (K \\<cdot>\\<^sub>l\\<^sub>i\\<^sub>s\\<^sub>t (!) T, map ((!) T) N)\""], ["proof (prove)\nusing this:\n  m = \\<langle>f T\\<rangle>\\<^sub>t\n  length T = length S\n\ngoal (1 subgoal):\n 1. Ana m = (K \\<cdot>\\<^sub>l\\<^sub>i\\<^sub>s\\<^sub>t (!) T, map ((!) T) N)", "using fS(2,3) Ana_f"], ["proof (prove)\nusing this:\n  m = \\<langle>f T\\<rangle>\\<^sub>t\n  length T = length S\n  arity\\<^sub>f f = length S\n  0 < arity\\<^sub>f f\n  Ana\\<^sub>f f = (K, N)\n\ngoal (1 subgoal):\n 1. Ana m = (K \\<cdot>\\<^sub>l\\<^sub>i\\<^sub>s\\<^sub>t (!) T, map ((!) T) N)", "by auto"], ["proof (state)\nthis:\n  Ana m = (K \\<cdot>\\<^sub>l\\<^sub>i\\<^sub>s\\<^sub>t (!) T, map ((!) T) N)\n\ngoal (1 subgoal):\n 1. timpl_closure_set M TI \\<turnstile>\\<^sub>c s", "obtain i where i: \"i < length N\" \"s = S ! (N ! i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>i.\n        \\<lbrakk>i < length N; s = S ! (N ! i)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using s[unfolded fS(1)] Ana_t[unfolded fS(1)] T(2)\n          in_set_conv_nth[of s \"map (\\<lambda>i. S ! i) N\"]"], ["proof (prove)\nusing this:\n  s \\<in> set (snd (Ana \\<langle>f S\\<rangle>\\<^sub>t))\n  Ana \\<langle>f S\\<rangle>\\<^sub>t =\n  (K \\<cdot>\\<^sub>l\\<^sub>i\\<^sub>s\\<^sub>t (!) S, map ((!) S) N)\n  length T = length S\n  (s \\<in> set (map ((!) S) N)) =\n  (\\<exists>i<length (map ((!) S) N). map ((!) S) N ! i = s)\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        \\<lbrakk>i < length N; s = S ! (N ! i)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  i < length N\n  s = S ! (N ! i)\n\ngoal (1 subgoal):\n 1. timpl_closure_set M TI \\<turnstile>\\<^sub>c s", "hence \"timpl_closure_set M TI \\<turnstile>\\<^sub>c T ! (N ! i)\""], ["proof (prove)\nusing this:\n  i < length N\n  s = S ! (N ! i)\n\ngoal (1 subgoal):\n 1. timpl_closure_set M TI \\<turnstile>\\<^sub>c T ! (N ! i)", "using M[unfolded T(1)] Ana_m[unfolded T(1)] T(2)"], ["proof (prove)\nusing this:\n  i < length N\n  s = S ! (N ! i)\n  \\<forall>s\\<in>set (snd (Ana \\<langle>f T\\<rangle>\\<^sub>t)).\n     timpl_closure_set M TI \\<turnstile>\\<^sub>c s\n  Ana \\<langle>f T\\<rangle>\\<^sub>t =\n  (K \\<cdot>\\<^sub>l\\<^sub>i\\<^sub>s\\<^sub>t (!) T, map ((!) T) N)\n  length T = length S\n\ngoal (1 subgoal):\n 1. timpl_closure_set M TI \\<turnstile>\\<^sub>c T ! (N ! i)", "by simp"], ["proof (state)\nthis:\n  timpl_closure_set M TI \\<turnstile>\\<^sub>c T ! (N ! i)\n\ngoal (1 subgoal):\n 1. timpl_closure_set M TI \\<turnstile>\\<^sub>c s", "thus ?thesis"], ["proof (prove)\nusing this:\n  timpl_closure_set M TI \\<turnstile>\\<^sub>c T ! (N ! i)\n\ngoal (1 subgoal):\n 1. timpl_closure_set M TI \\<turnstile>\\<^sub>c s", "using analyzed_closed_mod_timpls_is_analyzed_closed_timpl_closure_set_aux1[\n            OF fS(2)[unfolded T(2)[symmetric]] fS(3) Ana_f\n               i(1) _ m[unfolded T(1)] t[unfolded fS(1) T(1)]]\n          i(2)"], ["proof (prove)\nusing this:\n  timpl_closure_set M TI \\<turnstile>\\<^sub>c T ! (N ! i)\n  timpl_closure_set M TI \\<turnstile>\\<^sub>c T ! (N ! i) \\<Longrightarrow>\n  timpl_closure_set M TI \\<turnstile>\\<^sub>c S ! (N ! i)\n  s = S ! (N ! i)\n\ngoal (1 subgoal):\n 1. timpl_closure_set M TI \\<turnstile>\\<^sub>c s", "by argo"], ["proof (state)\nthis:\n  timpl_closure_set M TI \\<turnstile>\\<^sub>c s\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma analyzed_closed_mod_timpls_is_analyzed_timpl_closure_set:\n  fixes M::\"('fun,'atom,'sets) prot_term list\"\n  assumes TI': \"set TI' = {(a,b) \\<in> (set TI)\\<^sup>+. a \\<noteq> b}\"\n    and M_wf: \"wf\\<^sub>t\\<^sub>r\\<^sub>m\\<^sub>s (set M)\"\n  shows \"analyzed_closed_mod_timpls M TI' \\<longleftrightarrow> analyzed (timpl_closure_set (set M) (set TI))\"\n    (is \"?A \\<longleftrightarrow> ?B\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. analyzed_closed_mod_timpls M TI' =\n    analyzed (timpl_closure_set (set M) (set TI))", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. analyzed_closed_mod_timpls M TI' \\<Longrightarrow>\n    analyzed (timpl_closure_set (set M) (set TI))\n 2. analyzed (timpl_closure_set (set M) (set TI)) \\<Longrightarrow>\n    analyzed_closed_mod_timpls M TI'", "let ?C = \"\\<forall>t \\<in> timpl_closure_set (set M) (set TI).\n              analyzed_in t (timpl_closure_set (set M) (set TI))\""], ["proof (state)\ngoal (2 subgoals):\n 1. analyzed_closed_mod_timpls M TI' \\<Longrightarrow>\n    analyzed (timpl_closure_set (set M) (set TI))\n 2. analyzed (timpl_closure_set (set M) (set TI)) \\<Longrightarrow>\n    analyzed_closed_mod_timpls M TI'", "let ?P = \"\\<lambda>T. \\<forall>t \\<in> set T. timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t\""], ["proof (state)\ngoal (2 subgoals):\n 1. analyzed_closed_mod_timpls M TI' \\<Longrightarrow>\n    analyzed (timpl_closure_set (set M) (set TI))\n 2. analyzed (timpl_closure_set (set M) (set TI)) \\<Longrightarrow>\n    analyzed_closed_mod_timpls M TI'", "let ?Q = \"\\<lambda>t. \\<forall>s \\<in> comp_timpl_closure {t} (set TI'). case Ana s of (K, R) \\<Rightarrow> ?P K \\<longrightarrow> ?P R\""], ["proof (state)\ngoal (2 subgoals):\n 1. analyzed_closed_mod_timpls M TI' \\<Longrightarrow>\n    analyzed (timpl_closure_set (set M) (set TI))\n 2. analyzed (timpl_closure_set (set M) (set TI)) \\<Longrightarrow>\n    analyzed_closed_mod_timpls M TI'", "note defs = analyzed_closed_mod_timpls_def analyzed_in_code"], ["proof (state)\nthis:\n  analyzed_closed_mod_timpls ?M ?TI \\<equiv>\n  let f = list_all (intruder_synth_mod_timpls ?M ?TI);\n      g = \\<lambda>t.\n             if f (fst (Ana t)) then f (snd (Ana t))\n             else \\<forall>s\\<in>comp_timpl_closure {t} (set ?TI).\n                     case Ana s of\n                     (K, R) \\<Rightarrow> f K \\<longrightarrow> f R\n  in list_all g ?M\n  analyzed_in ?t ?M = analyzed_in' Ana public arity ?t ?M\n\ngoal (2 subgoals):\n 1. analyzed_closed_mod_timpls M TI' \\<Longrightarrow>\n    analyzed (timpl_closure_set (set M) (set TI))\n 2. analyzed (timpl_closure_set (set M) (set TI)) \\<Longrightarrow>\n    analyzed_closed_mod_timpls M TI'", "note 0 = intruder_synth_mod_timpls_is_synth_timpl_closure_set[OF TI', of M]"], ["proof (state)\nthis:\n  intruder_synth_mod_timpls M TI' ?t =\n  (timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c ?t)\n\ngoal (2 subgoals):\n 1. analyzed_closed_mod_timpls M TI' \\<Longrightarrow>\n    analyzed (timpl_closure_set (set M) (set TI))\n 2. analyzed (timpl_closure_set (set M) (set TI)) \\<Longrightarrow>\n    analyzed_closed_mod_timpls M TI'", "note 1 = timpl_closure_set_is_timpl_closure_union[of _ \"set TI\"]"], ["proof (state)\nthis:\n  timpl_closure_set ?M (set TI) =\n  (\\<Union>t\\<in>?M. timpl_closure t (set TI))\n\ngoal (2 subgoals):\n 1. analyzed_closed_mod_timpls M TI' \\<Longrightarrow>\n    analyzed (timpl_closure_set (set M) (set TI))\n 2. analyzed (timpl_closure_set (set M) (set TI)) \\<Longrightarrow>\n    analyzed_closed_mod_timpls M TI'", "have 2: \"comp_timpl_closure {t} (set TI') = timpl_closure_set {t} (set TI)\"\n    when t: \"t \\<in> set M\" \"wf\\<^sub>t\\<^sub>r\\<^sub>m t\" for t"], ["proof (prove)\ngoal (1 subgoal):\n 1. comp_timpl_closure {t} (set TI') = timpl_closure_set {t} (set TI)", "using t timpl_closure_set_timpls_trancl_eq'[of \"{t}\" \"set TI\"]\n          comp_timpl_closure_is_timpl_closure_set[of \"{t}\" TI']"], ["proof (prove)\nusing this:\n  t \\<in> set M\n  wf\\<^sub>t\\<^sub>r\\<^sub>m t\n  timpl_closure_set {t}\n   {(a, b). (a, b) \\<in> (set TI)\\<^sup>+ \\<and> a \\<noteq> b} =\n  timpl_closure_set {t} (set TI)\n  \\<lbrakk>finite {t}; wf\\<^sub>t\\<^sub>r\\<^sub>m\\<^sub>s {t}\\<rbrakk>\n  \\<Longrightarrow> comp_timpl_closure {t} (set TI') =\n                    timpl_closure_set {t} (set TI')\n\ngoal (1 subgoal):\n 1. comp_timpl_closure {t} (set TI') = timpl_closure_set {t} (set TI)", "unfolding TI'[symmetric]"], ["proof (prove)\nusing this:\n  t \\<in> set M\n  wf\\<^sub>t\\<^sub>r\\<^sub>m t\n  timpl_closure_set {t} (set TI') = timpl_closure_set {t} (set TI)\n  \\<lbrakk>finite {t}; wf\\<^sub>t\\<^sub>r\\<^sub>m\\<^sub>s {t}\\<rbrakk>\n  \\<Longrightarrow> comp_timpl_closure {t} (set TI') =\n                    timpl_closure_set {t} (set TI')\n\ngoal (1 subgoal):\n 1. comp_timpl_closure {t} (set TI') = timpl_closure_set {t} (set TI)", "by blast"], ["proof (state)\nthis:\n  \\<lbrakk>?t43 \\<in> set M; wf\\<^sub>t\\<^sub>r\\<^sub>m ?t43\\<rbrakk>\n  \\<Longrightarrow> comp_timpl_closure {?t43} (set TI') =\n                    timpl_closure_set {?t43} (set TI)\n\ngoal (2 subgoals):\n 1. analyzed_closed_mod_timpls M TI' \\<Longrightarrow>\n    analyzed (timpl_closure_set (set M) (set TI))\n 2. analyzed (timpl_closure_set (set M) (set TI)) \\<Longrightarrow>\n    analyzed_closed_mod_timpls M TI'", "hence 3: \"comp_timpl_closure {t} (set TI') \\<subseteq> timpl_closure_set (set M) (set TI)\"\n    when t: \"t \\<in> set M\" \"wf\\<^sub>t\\<^sub>r\\<^sub>m t\" for t"], ["proof (prove)\nusing this:\n  \\<lbrakk>?t43 \\<in> set M; wf\\<^sub>t\\<^sub>r\\<^sub>m ?t43\\<rbrakk>\n  \\<Longrightarrow> comp_timpl_closure {?t43} (set TI') =\n                    timpl_closure_set {?t43} (set TI)\n\ngoal (1 subgoal):\n 1. comp_timpl_closure {t} (set TI')\n    \\<subseteq> timpl_closure_set (set M) (set TI)", "using t timpl_closure_set_mono[of \"{t}\" \"set M\"]"], ["proof (prove)\nusing this:\n  \\<lbrakk>?t43 \\<in> set M; wf\\<^sub>t\\<^sub>r\\<^sub>m ?t43\\<rbrakk>\n  \\<Longrightarrow> comp_timpl_closure {?t43} (set TI') =\n                    timpl_closure_set {?t43} (set TI)\n  t \\<in> set M\n  wf\\<^sub>t\\<^sub>r\\<^sub>m t\n  \\<lbrakk>{t} \\<subseteq> set M; ?TI \\<subseteq> ?TI'\\<rbrakk>\n  \\<Longrightarrow> timpl_closure_set {t} ?TI\n                    \\<subseteq> timpl_closure_set (set M) ?TI'\n\ngoal (1 subgoal):\n 1. comp_timpl_closure {t} (set TI')\n    \\<subseteq> timpl_closure_set (set M) (set TI)", "by fast"], ["proof (state)\nthis:\n  \\<lbrakk>?t43 \\<in> set M; wf\\<^sub>t\\<^sub>r\\<^sub>m ?t43\\<rbrakk>\n  \\<Longrightarrow> comp_timpl_closure {?t43} (set TI')\n                    \\<subseteq> timpl_closure_set (set M) (set TI)\n\ngoal (2 subgoals):\n 1. analyzed_closed_mod_timpls M TI' \\<Longrightarrow>\n    analyzed (timpl_closure_set (set M) (set TI))\n 2. analyzed (timpl_closure_set (set M) (set TI)) \\<Longrightarrow>\n    analyzed_closed_mod_timpls M TI'", "have ?A when C: ?C"], ["proof (prove)\ngoal (1 subgoal):\n 1. analyzed_closed_mod_timpls M TI'", "unfolding analyzed_closed_mod_timpls_def\n              intruder_synth_mod_timpls_is_synth_timpl_closure_set[OF TI']\n              list_all_iff Let_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>t\\<in>set M.\n       if \\<forall>t\\<in>set (fst (Ana t)).\n             timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t\n       then \\<forall>t\\<in>set (snd (Ana t)).\n               timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t\n       else \\<forall>s\\<in>comp_timpl_closure {t} (set TI').\n               case Ana s of\n               (K, R) \\<Rightarrow>\n                 (\\<forall>t\\<in>set K.\n                     timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c\n                     t) \\<longrightarrow>\n                 (\\<forall>t\\<in>set R.\n                     timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c\n                     t)", "proof (intro ballI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>t.\n       t \\<in> set M \\<Longrightarrow>\n       if \\<forall>t\\<in>set (fst (Ana t)).\n             timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t\n       then \\<forall>t\\<in>set (snd (Ana t)).\n               timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t\n       else \\<forall>s\\<in>comp_timpl_closure {t} (set TI').\n               case Ana s of\n               (K, R) \\<Rightarrow>\n                 (\\<forall>t\\<in>set K.\n                     timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c\n                     t) \\<longrightarrow>\n                 (\\<forall>t\\<in>set R.\n                     timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c\n                     t)", "fix t"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>t.\n       t \\<in> set M \\<Longrightarrow>\n       if \\<forall>t\\<in>set (fst (Ana t)).\n             timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t\n       then \\<forall>t\\<in>set (snd (Ana t)).\n               timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t\n       else \\<forall>s\\<in>comp_timpl_closure {t} (set TI').\n               case Ana s of\n               (K, R) \\<Rightarrow>\n                 (\\<forall>t\\<in>set K.\n                     timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c\n                     t) \\<longrightarrow>\n                 (\\<forall>t\\<in>set R.\n                     timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c\n                     t)", "assume t: \"t \\<in> set M\""], ["proof (state)\nthis:\n  t \\<in> set M\n\ngoal (1 subgoal):\n 1. \\<And>t.\n       t \\<in> set M \\<Longrightarrow>\n       if \\<forall>t\\<in>set (fst (Ana t)).\n             timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t\n       then \\<forall>t\\<in>set (snd (Ana t)).\n               timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t\n       else \\<forall>s\\<in>comp_timpl_closure {t} (set TI').\n               case Ana s of\n               (K, R) \\<Rightarrow>\n                 (\\<forall>t\\<in>set K.\n                     timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c\n                     t) \\<longrightarrow>\n                 (\\<forall>t\\<in>set R.\n                     timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c\n                     t)", "show \"if ?P (fst (Ana t)) then ?P (snd (Ana t)) else ?Q t\" (is ?R)"], ["proof (prove)\ngoal (1 subgoal):\n 1. if \\<forall>t\\<in>set (fst (Ana t)).\n          timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t\n    then \\<forall>t\\<in>set (snd (Ana t)).\n            timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t\n    else \\<forall>s\\<in>comp_timpl_closure {t} (set TI').\n            case Ana s of\n            (K, R) \\<Rightarrow>\n              (\\<forall>t\\<in>set K.\n                  timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c\n                  t) \\<longrightarrow>\n              (\\<forall>t\\<in>set R.\n                  timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t)", "proof (cases \"?P (fst (Ana t))\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<forall>t\\<in>set (fst (Ana t)).\n       timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c\n       t \\<Longrightarrow>\n    if \\<forall>t\\<in>set (fst (Ana t)).\n          timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t\n    then \\<forall>t\\<in>set (snd (Ana t)).\n            timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t\n    else \\<forall>s\\<in>comp_timpl_closure {t} (set TI').\n            case Ana s of\n            (K, R) \\<Rightarrow>\n              (\\<forall>t\\<in>set K.\n                  timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c\n                  t) \\<longrightarrow>\n              (\\<forall>t\\<in>set R.\n                  timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t)\n 2. \\<not> (\\<forall>t\\<in>set (fst (Ana t)).\n               timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c\n               t) \\<Longrightarrow>\n    if \\<forall>t\\<in>set (fst (Ana t)).\n          timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t\n    then \\<forall>t\\<in>set (snd (Ana t)).\n            timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t\n    else \\<forall>s\\<in>comp_timpl_closure {t} (set TI').\n            case Ana s of\n            (K, R) \\<Rightarrow>\n              (\\<forall>t\\<in>set K.\n                  timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c\n                  t) \\<longrightarrow>\n              (\\<forall>t\\<in>set R.\n                  timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t)", "case True"], ["proof (state)\nthis:\n  \\<forall>t\\<in>set (fst (Ana t)).\n     timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t\n\ngoal (2 subgoals):\n 1. \\<forall>t\\<in>set (fst (Ana t)).\n       timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c\n       t \\<Longrightarrow>\n    if \\<forall>t\\<in>set (fst (Ana t)).\n          timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t\n    then \\<forall>t\\<in>set (snd (Ana t)).\n            timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t\n    else \\<forall>s\\<in>comp_timpl_closure {t} (set TI').\n            case Ana s of\n            (K, R) \\<Rightarrow>\n              (\\<forall>t\\<in>set K.\n                  timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c\n                  t) \\<longrightarrow>\n              (\\<forall>t\\<in>set R.\n                  timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t)\n 2. \\<not> (\\<forall>t\\<in>set (fst (Ana t)).\n               timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c\n               t) \\<Longrightarrow>\n    if \\<forall>t\\<in>set (fst (Ana t)).\n          timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t\n    then \\<forall>t\\<in>set (snd (Ana t)).\n            timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t\n    else \\<forall>s\\<in>comp_timpl_closure {t} (set TI').\n            case Ana s of\n            (K, R) \\<Rightarrow>\n              (\\<forall>t\\<in>set K.\n                  timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c\n                  t) \\<longrightarrow>\n              (\\<forall>t\\<in>set R.\n                  timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t)", "hence \"?P (snd (Ana t))\""], ["proof (prove)\nusing this:\n  \\<forall>t\\<in>set (fst (Ana t)).\n     timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t\n\ngoal (1 subgoal):\n 1. \\<forall>t\\<in>set (snd (Ana t)).\n       timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t", "using C timpl_closure_setI[OF t, of \"set TI\"] prod.exhaust_sel"], ["proof (prove)\nusing this:\n  \\<forall>t\\<in>set (fst (Ana t)).\n     timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t\n  \\<forall>t\\<in>timpl_closure_set (set M) (set TI).\n     analyzed_in t (timpl_closure_set (set M) (set TI))\n  t \\<in> timpl_closure_set (set M) (set TI)\n  (?prod = (fst ?prod, snd ?prod) \\<Longrightarrow> ?P) \\<Longrightarrow> ?P\n\ngoal (1 subgoal):\n 1. \\<forall>t\\<in>set (snd (Ana t)).\n       timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t", "unfolding analyzed_in_def"], ["proof (prove)\nusing this:\n  \\<forall>t\\<in>set (fst (Ana t)).\n     timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t\n  \\<forall>t\\<in>timpl_closure_set (set M) (set TI).\n     \\<forall>K R.\n        Ana t = (K, R) \\<and>\n        (\\<forall>k\\<in>set K.\n            timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c\n            k) \\<longrightarrow>\n        (\\<forall>r\\<in>set R.\n            timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c r)\n  t \\<in> timpl_closure_set (set M) (set TI)\n  (?prod = (fst ?prod, snd ?prod) \\<Longrightarrow> ?P) \\<Longrightarrow> ?P\n\ngoal (1 subgoal):\n 1. \\<forall>t\\<in>set (snd (Ana t)).\n       timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t", "by blast"], ["proof (state)\nthis:\n  \\<forall>t\\<in>set (snd (Ana t)).\n     timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t\n\ngoal (2 subgoals):\n 1. \\<forall>t\\<in>set (fst (Ana t)).\n       timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c\n       t \\<Longrightarrow>\n    if \\<forall>t\\<in>set (fst (Ana t)).\n          timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t\n    then \\<forall>t\\<in>set (snd (Ana t)).\n            timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t\n    else \\<forall>s\\<in>comp_timpl_closure {t} (set TI').\n            case Ana s of\n            (K, R) \\<Rightarrow>\n              (\\<forall>t\\<in>set K.\n                  timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c\n                  t) \\<longrightarrow>\n              (\\<forall>t\\<in>set R.\n                  timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t)\n 2. \\<not> (\\<forall>t\\<in>set (fst (Ana t)).\n               timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c\n               t) \\<Longrightarrow>\n    if \\<forall>t\\<in>set (fst (Ana t)).\n          timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t\n    then \\<forall>t\\<in>set (snd (Ana t)).\n            timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t\n    else \\<forall>s\\<in>comp_timpl_closure {t} (set TI').\n            case Ana s of\n            (K, R) \\<Rightarrow>\n              (\\<forall>t\\<in>set K.\n                  timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c\n                  t) \\<longrightarrow>\n              (\\<forall>t\\<in>set R.\n                  timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t)", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>t\\<in>set (snd (Ana t)).\n     timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t\n\ngoal (1 subgoal):\n 1. if \\<forall>t\\<in>set (fst (Ana t)).\n          timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t\n    then \\<forall>t\\<in>set (snd (Ana t)).\n            timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t\n    else \\<forall>s\\<in>comp_timpl_closure {t} (set TI').\n            case Ana s of\n            (K, R) \\<Rightarrow>\n              (\\<forall>t\\<in>set K.\n                  timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c\n                  t) \\<longrightarrow>\n              (\\<forall>t\\<in>set R.\n                  timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t)", "using True"], ["proof (prove)\nusing this:\n  \\<forall>t\\<in>set (snd (Ana t)).\n     timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t\n  \\<forall>t\\<in>set (fst (Ana t)).\n     timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t\n\ngoal (1 subgoal):\n 1. if \\<forall>t\\<in>set (fst (Ana t)).\n          timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t\n    then \\<forall>t\\<in>set (snd (Ana t)).\n            timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t\n    else \\<forall>s\\<in>comp_timpl_closure {t} (set TI').\n            case Ana s of\n            (K, R) \\<Rightarrow>\n              (\\<forall>t\\<in>set K.\n                  timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c\n                  t) \\<longrightarrow>\n              (\\<forall>t\\<in>set R.\n                  timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t)", "by simp"], ["proof (state)\nthis:\n  if \\<forall>t\\<in>set (fst (Ana t)).\n        timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t\n  then \\<forall>t\\<in>set (snd (Ana t)).\n          timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t\n  else \\<forall>s\\<in>comp_timpl_closure {t} (set TI').\n          case Ana s of\n          (K, R) \\<Rightarrow>\n            (\\<forall>t\\<in>set K.\n                timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c\n                t) \\<longrightarrow>\n            (\\<forall>t\\<in>set R.\n                timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>t\\<in>set (fst (Ana t)).\n               timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c\n               t) \\<Longrightarrow>\n    if \\<forall>t\\<in>set (fst (Ana t)).\n          timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t\n    then \\<forall>t\\<in>set (snd (Ana t)).\n            timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t\n    else \\<forall>s\\<in>comp_timpl_closure {t} (set TI').\n            case Ana s of\n            (K, R) \\<Rightarrow>\n              (\\<forall>t\\<in>set K.\n                  timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c\n                  t) \\<longrightarrow>\n              (\\<forall>t\\<in>set R.\n                  timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>t\\<in>set (fst (Ana t)).\n               timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c\n               t) \\<Longrightarrow>\n    if \\<forall>t\\<in>set (fst (Ana t)).\n          timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t\n    then \\<forall>t\\<in>set (snd (Ana t)).\n            timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t\n    else \\<forall>s\\<in>comp_timpl_closure {t} (set TI').\n            case Ana s of\n            (K, R) \\<Rightarrow>\n              (\\<forall>t\\<in>set K.\n                  timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c\n                  t) \\<longrightarrow>\n              (\\<forall>t\\<in>set R.\n                  timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t)", "case False"], ["proof (state)\nthis:\n  \\<not> (\\<forall>t\\<in>set (fst (Ana t)).\n             timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>t\\<in>set (fst (Ana t)).\n               timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c\n               t) \\<Longrightarrow>\n    if \\<forall>t\\<in>set (fst (Ana t)).\n          timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t\n    then \\<forall>t\\<in>set (snd (Ana t)).\n            timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t\n    else \\<forall>s\\<in>comp_timpl_closure {t} (set TI').\n            case Ana s of\n            (K, R) \\<Rightarrow>\n              (\\<forall>t\\<in>set K.\n                  timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c\n                  t) \\<longrightarrow>\n              (\\<forall>t\\<in>set R.\n                  timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t)", "have \"?Q t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>s\\<in>comp_timpl_closure {t} (set TI').\n       case Ana s of\n       (K, R) \\<Rightarrow>\n         (\\<forall>t\\<in>set K.\n             timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c\n             t) \\<longrightarrow>\n         (\\<forall>t\\<in>set R.\n             timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t)", "using 3[OF t] C M_wf t"], ["proof (prove)\nusing this:\n  wf\\<^sub>t\\<^sub>r\\<^sub>m t \\<Longrightarrow>\n  comp_timpl_closure {t} (set TI')\n  \\<subseteq> timpl_closure_set (set M) (set TI)\n  \\<forall>t\\<in>timpl_closure_set (set M) (set TI).\n     analyzed_in t (timpl_closure_set (set M) (set TI))\n  wf\\<^sub>t\\<^sub>r\\<^sub>m\\<^sub>s (set M)\n  t \\<in> set M\n\ngoal (1 subgoal):\n 1. \\<forall>s\\<in>comp_timpl_closure {t} (set TI').\n       case Ana s of\n       (K, R) \\<Rightarrow>\n         (\\<forall>t\\<in>set K.\n             timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c\n             t) \\<longrightarrow>\n         (\\<forall>t\\<in>set R.\n             timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t)", "unfolding analyzed_in_def"], ["proof (prove)\nusing this:\n  wf\\<^sub>t\\<^sub>r\\<^sub>m t \\<Longrightarrow>\n  comp_timpl_closure {t} (set TI')\n  \\<subseteq> timpl_closure_set (set M) (set TI)\n  \\<forall>t\\<in>timpl_closure_set (set M) (set TI).\n     \\<forall>K R.\n        Ana t = (K, R) \\<and>\n        (\\<forall>k\\<in>set K.\n            timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c\n            k) \\<longrightarrow>\n        (\\<forall>r\\<in>set R.\n            timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c r)\n  wf\\<^sub>t\\<^sub>r\\<^sub>m\\<^sub>s (set M)\n  t \\<in> set M\n\ngoal (1 subgoal):\n 1. \\<forall>s\\<in>comp_timpl_closure {t} (set TI').\n       case Ana s of\n       (K, R) \\<Rightarrow>\n         (\\<forall>t\\<in>set K.\n             timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c\n             t) \\<longrightarrow>\n         (\\<forall>t\\<in>set R.\n             timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t)", "by auto"], ["proof (state)\nthis:\n  \\<forall>s\\<in>comp_timpl_closure {t} (set TI').\n     case Ana s of\n     (K, R) \\<Rightarrow>\n       (\\<forall>t\\<in>set K.\n           timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c\n           t) \\<longrightarrow>\n       (\\<forall>t\\<in>set R.\n           timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>t\\<in>set (fst (Ana t)).\n               timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c\n               t) \\<Longrightarrow>\n    if \\<forall>t\\<in>set (fst (Ana t)).\n          timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t\n    then \\<forall>t\\<in>set (snd (Ana t)).\n            timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t\n    else \\<forall>s\\<in>comp_timpl_closure {t} (set TI').\n            case Ana s of\n            (K, R) \\<Rightarrow>\n              (\\<forall>t\\<in>set K.\n                  timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c\n                  t) \\<longrightarrow>\n              (\\<forall>t\\<in>set R.\n                  timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t)", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>s\\<in>comp_timpl_closure {t} (set TI').\n     case Ana s of\n     (K, R) \\<Rightarrow>\n       (\\<forall>t\\<in>set K.\n           timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c\n           t) \\<longrightarrow>\n       (\\<forall>t\\<in>set R.\n           timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t)\n\ngoal (1 subgoal):\n 1. if \\<forall>t\\<in>set (fst (Ana t)).\n          timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t\n    then \\<forall>t\\<in>set (snd (Ana t)).\n            timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t\n    else \\<forall>s\\<in>comp_timpl_closure {t} (set TI').\n            case Ana s of\n            (K, R) \\<Rightarrow>\n              (\\<forall>t\\<in>set K.\n                  timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c\n                  t) \\<longrightarrow>\n              (\\<forall>t\\<in>set R.\n                  timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t)", "using False"], ["proof (prove)\nusing this:\n  \\<forall>s\\<in>comp_timpl_closure {t} (set TI').\n     case Ana s of\n     (K, R) \\<Rightarrow>\n       (\\<forall>t\\<in>set K.\n           timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c\n           t) \\<longrightarrow>\n       (\\<forall>t\\<in>set R.\n           timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t)\n  \\<not> (\\<forall>t\\<in>set (fst (Ana t)).\n             timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t)\n\ngoal (1 subgoal):\n 1. if \\<forall>t\\<in>set (fst (Ana t)).\n          timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t\n    then \\<forall>t\\<in>set (snd (Ana t)).\n            timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t\n    else \\<forall>s\\<in>comp_timpl_closure {t} (set TI').\n            case Ana s of\n            (K, R) \\<Rightarrow>\n              (\\<forall>t\\<in>set K.\n                  timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c\n                  t) \\<longrightarrow>\n              (\\<forall>t\\<in>set R.\n                  timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t)", "by argo"], ["proof (state)\nthis:\n  if \\<forall>t\\<in>set (fst (Ana t)).\n        timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t\n  then \\<forall>t\\<in>set (snd (Ana t)).\n          timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t\n  else \\<forall>s\\<in>comp_timpl_closure {t} (set TI').\n          case Ana s of\n          (K, R) \\<Rightarrow>\n            (\\<forall>t\\<in>set K.\n                timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c\n                t) \\<longrightarrow>\n            (\\<forall>t\\<in>set R.\n                timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  if \\<forall>t\\<in>set (fst (Ana t)).\n        timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t\n  then \\<forall>t\\<in>set (snd (Ana t)).\n          timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t\n  else \\<forall>s\\<in>comp_timpl_closure {t} (set TI').\n          case Ana s of\n          (K, R) \\<Rightarrow>\n            (\\<forall>t\\<in>set K.\n                timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c\n                t) \\<longrightarrow>\n            (\\<forall>t\\<in>set R.\n                timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>t\\<in>timpl_closure_set (set M) (set TI).\n     analyzed_in t (timpl_closure_set (set M) (set TI)) \\<Longrightarrow>\n  analyzed_closed_mod_timpls M TI'\n\ngoal (2 subgoals):\n 1. analyzed_closed_mod_timpls M TI' \\<Longrightarrow>\n    analyzed (timpl_closure_set (set M) (set TI))\n 2. analyzed (timpl_closure_set (set M) (set TI)) \\<Longrightarrow>\n    analyzed_closed_mod_timpls M TI'", "thus ?A when B: ?B"], ["proof (prove)\nusing this:\n  \\<forall>t\\<in>timpl_closure_set (set M) (set TI).\n     analyzed_in t (timpl_closure_set (set M) (set TI)) \\<Longrightarrow>\n  analyzed_closed_mod_timpls M TI'\n\ngoal (1 subgoal):\n 1. analyzed_closed_mod_timpls M TI'", "using B analyzed_is_all_analyzed_in"], ["proof (prove)\nusing this:\n  \\<forall>t\\<in>timpl_closure_set (set M) (set TI).\n     analyzed_in t (timpl_closure_set (set M) (set TI)) \\<Longrightarrow>\n  analyzed_closed_mod_timpls M TI'\n  analyzed (timpl_closure_set (set M) (set TI))\n  (\\<forall>t\\<in>?M. analyzed_in t ?M) = analyzed ?M\n\ngoal (1 subgoal):\n 1. analyzed_closed_mod_timpls M TI'", "by metis"], ["proof (state)\nthis:\n  analyzed (timpl_closure_set (set M) (set TI)) \\<Longrightarrow>\n  analyzed_closed_mod_timpls M TI'\n\ngoal (2 subgoals):\n 1. analyzed_closed_mod_timpls M TI' \\<Longrightarrow>\n    analyzed (timpl_closure_set (set M) (set TI))\n 2. analyzed (timpl_closure_set (set M) (set TI)) \\<Longrightarrow>\n    analyzed (timpl_closure_set (set M) (set TI))", "have ?C when A: ?A"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>t\\<in>timpl_closure_set (set M) (set TI).\n       analyzed_in t (timpl_closure_set (set M) (set TI))", "unfolding analyzed_in_def Let_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>t\\<in>timpl_closure_set (set M) (set TI).\n       \\<forall>K R.\n          Ana t = (K, R) \\<and>\n          (\\<forall>k\\<in>set K.\n              timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c\n              k) \\<longrightarrow>\n          (\\<forall>r\\<in>set R.\n              timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c r)", "proof (intro ballI allI impI; elim conjE)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>t K R r.\n       \\<lbrakk>t \\<in> timpl_closure_set (set M) (set TI); r \\<in> set R;\n        Ana t = (K, R);\n        \\<forall>k\\<in>set K.\n           timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c\n           k\\<rbrakk>\n       \\<Longrightarrow> timpl_closure_set (set M)\n                          (set TI) \\<turnstile>\\<^sub>c\n                         r", "fix t K T s"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>t K R r.\n       \\<lbrakk>t \\<in> timpl_closure_set (set M) (set TI); r \\<in> set R;\n        Ana t = (K, R);\n        \\<forall>k\\<in>set K.\n           timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c\n           k\\<rbrakk>\n       \\<Longrightarrow> timpl_closure_set (set M)\n                          (set TI) \\<turnstile>\\<^sub>c\n                         r", "assume t: \"t \\<in> timpl_closure_set (set M) (set TI)\"\n      and s: \"s \\<in> set T\"\n      and Ana_t: \"Ana t = (K, T)\"\n      and K: \"\\<forall>k \\<in> set K. timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c k\""], ["proof (state)\nthis:\n  t \\<in> timpl_closure_set (set M) (set TI)\n  s \\<in> set T\n  Ana t = (K, T)\n  \\<forall>k\\<in>set K.\n     timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c k\n\ngoal (1 subgoal):\n 1. \\<And>t K R r.\n       \\<lbrakk>t \\<in> timpl_closure_set (set M) (set TI); r \\<in> set R;\n        Ana t = (K, R);\n        \\<forall>k\\<in>set K.\n           timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c\n           k\\<rbrakk>\n       \\<Longrightarrow> timpl_closure_set (set M)\n                          (set TI) \\<turnstile>\\<^sub>c\n                         r", "obtain m where m: \"m \\<in> set M\" \"t \\<in> timpl_closure m (set TI)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>m.\n        \\<lbrakk>m \\<in> set M; t \\<in> timpl_closure m (set TI)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using timpl_closure_set_is_timpl_closure_union t"], ["proof (prove)\nusing this:\n  timpl_closure_set ?M ?TI = (\\<Union>t\\<in>?M. timpl_closure t ?TI)\n  t \\<in> timpl_closure_set (set M) (set TI)\n\ngoal (1 subgoal):\n 1. (\\<And>m.\n        \\<lbrakk>m \\<in> set M; t \\<in> timpl_closure m (set TI)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by moura"], ["proof (state)\nthis:\n  m \\<in> set M\n  t \\<in> timpl_closure m (set TI)\n\ngoal (1 subgoal):\n 1. \\<And>t K R r.\n       \\<lbrakk>t \\<in> timpl_closure_set (set M) (set TI); r \\<in> set R;\n        Ana t = (K, R);\n        \\<forall>k\\<in>set K.\n           timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c\n           k\\<rbrakk>\n       \\<Longrightarrow> timpl_closure_set (set M)\n                          (set TI) \\<turnstile>\\<^sub>c\n                         r", "show \"timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c s", "proof (cases \"\\<forall>k \\<in> set (fst (Ana m)). timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c k\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<forall>k\\<in>set (fst (Ana m)).\n       timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c\n       k \\<Longrightarrow>\n    timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c s\n 2. \\<not> (\\<forall>k\\<in>set (fst (Ana m)).\n               timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c\n               k) \\<Longrightarrow>\n    timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c s", "case True"], ["proof (state)\nthis:\n  \\<forall>k\\<in>set (fst (Ana m)).\n     timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c k\n\ngoal (2 subgoals):\n 1. \\<forall>k\\<in>set (fst (Ana m)).\n       timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c\n       k \\<Longrightarrow>\n    timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c s\n 2. \\<not> (\\<forall>k\\<in>set (fst (Ana m)).\n               timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c\n               k) \\<Longrightarrow>\n    timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c s", "hence *: \"\\<forall>r \\<in> set (snd (Ana m)). timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c r\""], ["proof (prove)\nusing this:\n  \\<forall>k\\<in>set (fst (Ana m)).\n     timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c k\n\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>set (snd (Ana m)).\n       timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c r", "using m(1) A"], ["proof (prove)\nusing this:\n  \\<forall>k\\<in>set (fst (Ana m)).\n     timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c k\n  m \\<in> set M\n  analyzed_closed_mod_timpls M TI'\n\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>set (snd (Ana m)).\n       timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c r", "unfolding analyzed_closed_mod_timpls_def\n                  intruder_synth_mod_timpls_is_synth_timpl_closure_set[OF TI']\n                  list_all_iff"], ["proof (prove)\nusing this:\n  \\<forall>k\\<in>set (fst (Ana m)).\n     timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c k\n  m \\<in> set M\n  let f = \\<lambda>x.\n             Ball (set x)\n              ((\\<turnstile>\\<^sub>c) (timpl_closure_set (set M) (set TI)))\n  in Let (\\<lambda>t.\n             if f (fst (Ana t)) then f (snd (Ana t))\n             else \\<forall>s\\<in>comp_timpl_closure {t} (set TI').\n                     case Ana s of\n                     (K, R) \\<Rightarrow> f K \\<longrightarrow> f R)\n      (Ball (set M))\n\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>set (snd (Ana m)).\n       timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c r", "by simp"], ["proof (state)\nthis:\n  \\<forall>r\\<in>set (snd (Ana m)).\n     timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c r\n\ngoal (2 subgoals):\n 1. \\<forall>k\\<in>set (fst (Ana m)).\n       timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c\n       k \\<Longrightarrow>\n    timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c s\n 2. \\<not> (\\<forall>k\\<in>set (fst (Ana m)).\n               timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c\n               k) \\<Longrightarrow>\n    timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c s", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c s", "using K s Ana_t A\n              analyzed_closed_mod_timpls_is_analyzed_closed_timpl_closure_set_aux2[OF * m]"], ["proof (prove)\nusing this:\n  \\<forall>k\\<in>set K.\n     timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c k\n  s \\<in> set T\n  Ana t = (K, T)\n  analyzed_closed_mod_timpls M TI'\n  ?s \\<in> set (snd (Ana t)) \\<Longrightarrow>\n  timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c ?s\n\ngoal (1 subgoal):\n 1. timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c s", "by simp"], ["proof (state)\nthis:\n  timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c s\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>k\\<in>set (fst (Ana m)).\n               timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c\n               k) \\<Longrightarrow>\n    timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c s", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>k\\<in>set (fst (Ana m)).\n               timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c\n               k) \\<Longrightarrow>\n    timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c s", "case False"], ["proof (state)\nthis:\n  \\<not> (\\<forall>k\\<in>set (fst (Ana m)).\n             timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c k)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>k\\<in>set (fst (Ana m)).\n               timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c\n               k) \\<Longrightarrow>\n    timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c s", "hence \"?Q m\""], ["proof (prove)\nusing this:\n  \\<not> (\\<forall>k\\<in>set (fst (Ana m)).\n             timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c k)\n\ngoal (1 subgoal):\n 1. \\<forall>s\\<in>comp_timpl_closure {m} (set TI').\n       case Ana s of\n       (K, R) \\<Rightarrow>\n         (\\<forall>t\\<in>set K.\n             timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c\n             t) \\<longrightarrow>\n         (\\<forall>t\\<in>set R.\n             timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t)", "using m(1) A"], ["proof (prove)\nusing this:\n  \\<not> (\\<forall>k\\<in>set (fst (Ana m)).\n             timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c k)\n  m \\<in> set M\n  analyzed_closed_mod_timpls M TI'\n\ngoal (1 subgoal):\n 1. \\<forall>s\\<in>comp_timpl_closure {m} (set TI').\n       case Ana s of\n       (K, R) \\<Rightarrow>\n         (\\<forall>t\\<in>set K.\n             timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c\n             t) \\<longrightarrow>\n         (\\<forall>t\\<in>set R.\n             timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t)", "unfolding analyzed_closed_mod_timpls_def\n                  intruder_synth_mod_timpls_is_synth_timpl_closure_set[OF TI']\n                  list_all_iff Let_def"], ["proof (prove)\nusing this:\n  \\<not> (\\<forall>k\\<in>set (fst (Ana m)).\n             timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c k)\n  m \\<in> set M\n  \\<forall>t\\<in>set M.\n     if \\<forall>t\\<in>set (fst (Ana t)).\n           timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t\n     then \\<forall>t\\<in>set (snd (Ana t)).\n             timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t\n     else \\<forall>s\\<in>comp_timpl_closure {t} (set TI').\n             case Ana s of\n             (K, R) \\<Rightarrow>\n               (\\<forall>t\\<in>set K.\n                   timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c\n                   t) \\<longrightarrow>\n               (\\<forall>t\\<in>set R.\n                   timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c\n                   t)\n\ngoal (1 subgoal):\n 1. \\<forall>s\\<in>comp_timpl_closure {m} (set TI').\n       case Ana s of\n       (K, R) \\<Rightarrow>\n         (\\<forall>t\\<in>set K.\n             timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c\n             t) \\<longrightarrow>\n         (\\<forall>t\\<in>set R.\n             timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t)", "by auto"], ["proof (state)\nthis:\n  \\<forall>s\\<in>comp_timpl_closure {m} (set TI').\n     case Ana s of\n     (K, R) \\<Rightarrow>\n       (\\<forall>t\\<in>set K.\n           timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c\n           t) \\<longrightarrow>\n       (\\<forall>t\\<in>set R.\n           timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>k\\<in>set (fst (Ana m)).\n               timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c\n               k) \\<Longrightarrow>\n    timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c s", "moreover"], ["proof (state)\nthis:\n  \\<forall>s\\<in>comp_timpl_closure {m} (set TI').\n     case Ana s of\n     (K, R) \\<Rightarrow>\n       (\\<forall>t\\<in>set K.\n           timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c\n           t) \\<longrightarrow>\n       (\\<forall>t\\<in>set R.\n           timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>k\\<in>set (fst (Ana m)).\n               timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c\n               k) \\<Longrightarrow>\n    timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c s", "have \"comp_timpl_closure {m} (set TI') = timpl_closure m (set TI)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. comp_timpl_closure {m} (set TI') = timpl_closure m (set TI)", "using 2[OF m(1)] timpl_closureton_is_timpl_closure M_wf m(1)"], ["proof (prove)\nusing this:\n  wf\\<^sub>t\\<^sub>r\\<^sub>m m \\<Longrightarrow>\n  comp_timpl_closure {m} (set TI') = timpl_closure_set {m} (set TI)\n  timpl_closure_set {?t} ?TI = timpl_closure ?t ?TI\n  wf\\<^sub>t\\<^sub>r\\<^sub>m\\<^sub>s (set M)\n  m \\<in> set M\n\ngoal (1 subgoal):\n 1. comp_timpl_closure {m} (set TI') = timpl_closure m (set TI)", "by blast"], ["proof (state)\nthis:\n  comp_timpl_closure {m} (set TI') = timpl_closure m (set TI)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>k\\<in>set (fst (Ana m)).\n               timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c\n               k) \\<Longrightarrow>\n    timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c s", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>s\\<in>comp_timpl_closure {m} (set TI').\n     case Ana s of\n     (K, R) \\<Rightarrow>\n       (\\<forall>t\\<in>set K.\n           timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c\n           t) \\<longrightarrow>\n       (\\<forall>t\\<in>set R.\n           timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t)\n  comp_timpl_closure {m} (set TI') = timpl_closure m (set TI)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>s\\<in>comp_timpl_closure {m} (set TI').\n     case Ana s of\n     (K, R) \\<Rightarrow>\n       (\\<forall>t\\<in>set K.\n           timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c\n           t) \\<longrightarrow>\n       (\\<forall>t\\<in>set R.\n           timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t)\n  comp_timpl_closure {m} (set TI') = timpl_closure m (set TI)\n\ngoal (1 subgoal):\n 1. timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c s", "using m(2) K s Ana_t"], ["proof (prove)\nusing this:\n  \\<forall>s\\<in>comp_timpl_closure {m} (set TI').\n     case Ana s of\n     (K, R) \\<Rightarrow>\n       (\\<forall>t\\<in>set K.\n           timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c\n           t) \\<longrightarrow>\n       (\\<forall>t\\<in>set R.\n           timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t)\n  comp_timpl_closure {m} (set TI') = timpl_closure m (set TI)\n  t \\<in> timpl_closure m (set TI)\n  \\<forall>k\\<in>set K.\n     timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c k\n  s \\<in> set T\n  Ana t = (K, T)\n\ngoal (1 subgoal):\n 1. timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c s", "unfolding Let_def"], ["proof (prove)\nusing this:\n  \\<forall>s\\<in>comp_timpl_closure {m} (set TI').\n     case Ana s of\n     (K, R) \\<Rightarrow>\n       (\\<forall>t\\<in>set K.\n           timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c\n           t) \\<longrightarrow>\n       (\\<forall>t\\<in>set R.\n           timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t)\n  comp_timpl_closure {m} (set TI') = timpl_closure m (set TI)\n  t \\<in> timpl_closure m (set TI)\n  \\<forall>k\\<in>set K.\n     timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c k\n  s \\<in> set T\n  Ana t = (K, T)\n\ngoal (1 subgoal):\n 1. timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c s", "by auto"], ["proof (state)\nthis:\n  timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c s\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c s\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  analyzed_closed_mod_timpls M TI' \\<Longrightarrow>\n  \\<forall>t\\<in>timpl_closure_set (set M) (set TI).\n     analyzed_in t (timpl_closure_set (set M) (set TI))\n\ngoal (2 subgoals):\n 1. analyzed_closed_mod_timpls M TI' \\<Longrightarrow>\n    analyzed (timpl_closure_set (set M) (set TI))\n 2. analyzed (timpl_closure_set (set M) (set TI)) \\<Longrightarrow>\n    analyzed (timpl_closure_set (set M) (set TI))", "thus ?B when A: ?A"], ["proof (prove)\nusing this:\n  analyzed_closed_mod_timpls M TI' \\<Longrightarrow>\n  \\<forall>t\\<in>timpl_closure_set (set M) (set TI).\n     analyzed_in t (timpl_closure_set (set M) (set TI))\n\ngoal (1 subgoal):\n 1. analyzed (timpl_closure_set (set M) (set TI))", "using A analyzed_is_all_analyzed_in"], ["proof (prove)\nusing this:\n  analyzed_closed_mod_timpls M TI' \\<Longrightarrow>\n  \\<forall>t\\<in>timpl_closure_set (set M) (set TI).\n     analyzed_in t (timpl_closure_set (set M) (set TI))\n  analyzed_closed_mod_timpls M TI'\n  (\\<forall>t\\<in>?M. analyzed_in t ?M) = analyzed ?M\n\ngoal (1 subgoal):\n 1. analyzed (timpl_closure_set (set M) (set TI))", "by metis"], ["proof (state)\nthis:\n  analyzed_closed_mod_timpls M TI' \\<Longrightarrow>\n  analyzed (timpl_closure_set (set M) (set TI))\n\ngoal (2 subgoals):\n 1. analyzed_closed_mod_timpls M TI' \\<Longrightarrow>\n    analyzed_closed_mod_timpls M TI'\n 2. analyzed (timpl_closure_set (set M) (set TI)) \\<Longrightarrow>\n    analyzed (timpl_closure_set (set M) (set TI))", "qed"], ["", "lemma analyzed_closed_mod_timpls'_is_analyzed_timpl_closure_set:\n  fixes M::\"('fun,'atom,'sets) prot_term list\"\n  assumes M_wf: \"wf\\<^sub>t\\<^sub>r\\<^sub>m\\<^sub>s (set M)\"\n  shows \"analyzed_closed_mod_timpls' M TI \\<longleftrightarrow> analyzed (timpl_closure_set (set M) (set TI))\"\n    (is \"?A \\<longleftrightarrow> ?B\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. analyzed_closed_mod_timpls' M TI =\n    analyzed (timpl_closure_set (set M) (set TI))", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. analyzed_closed_mod_timpls' M TI \\<Longrightarrow>\n    analyzed (timpl_closure_set (set M) (set TI))\n 2. analyzed (timpl_closure_set (set M) (set TI)) \\<Longrightarrow>\n    analyzed_closed_mod_timpls' M TI", "let ?C = \"\\<forall>t \\<in> timpl_closure_set (set M) (set TI). analyzed_in t (timpl_closure_set (set M) (set TI))\""], ["proof (state)\ngoal (2 subgoals):\n 1. analyzed_closed_mod_timpls' M TI \\<Longrightarrow>\n    analyzed (timpl_closure_set (set M) (set TI))\n 2. analyzed (timpl_closure_set (set M) (set TI)) \\<Longrightarrow>\n    analyzed_closed_mod_timpls' M TI", "let ?P = \"\\<lambda>T. \\<forall>t \\<in> set T. timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t\""], ["proof (state)\ngoal (2 subgoals):\n 1. analyzed_closed_mod_timpls' M TI \\<Longrightarrow>\n    analyzed (timpl_closure_set (set M) (set TI))\n 2. analyzed (timpl_closure_set (set M) (set TI)) \\<Longrightarrow>\n    analyzed_closed_mod_timpls' M TI", "let ?Q = \"\\<lambda>t. \\<forall>s \\<in> comp_timpl_closure {t} (set TI). case Ana s of (K, R) \\<Rightarrow> ?P K \\<longrightarrow> ?P R\""], ["proof (state)\ngoal (2 subgoals):\n 1. analyzed_closed_mod_timpls' M TI \\<Longrightarrow>\n    analyzed (timpl_closure_set (set M) (set TI))\n 2. analyzed (timpl_closure_set (set M) (set TI)) \\<Longrightarrow>\n    analyzed_closed_mod_timpls' M TI", "note defs = analyzed_closed_mod_timpls'_def analyzed_in_code"], ["proof (state)\nthis:\n  analyzed_closed_mod_timpls' ?M ?TI \\<equiv>\n  let f = list_all (intruder_synth_mod_timpls' ?M ?TI);\n      g = \\<lambda>t.\n             if f (fst (Ana t)) then f (snd (Ana t))\n             else \\<forall>s\\<in>comp_timpl_closure {t} (set ?TI).\n                     case Ana s of\n                     (K, R) \\<Rightarrow> f K \\<longrightarrow> f R\n  in list_all g ?M\n  analyzed_in ?t ?M = analyzed_in' Ana public arity ?t ?M\n\ngoal (2 subgoals):\n 1. analyzed_closed_mod_timpls' M TI \\<Longrightarrow>\n    analyzed (timpl_closure_set (set M) (set TI))\n 2. analyzed (timpl_closure_set (set M) (set TI)) \\<Longrightarrow>\n    analyzed_closed_mod_timpls' M TI", "note 0 = intruder_synth_mod_timpls'_is_synth_timpl_closure_set[of M TI]"], ["proof (state)\nthis:\n  intruder_synth_mod_timpls' M TI ?t =\n  (timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c ?t)\n\ngoal (2 subgoals):\n 1. analyzed_closed_mod_timpls' M TI \\<Longrightarrow>\n    analyzed (timpl_closure_set (set M) (set TI))\n 2. analyzed (timpl_closure_set (set M) (set TI)) \\<Longrightarrow>\n    analyzed_closed_mod_timpls' M TI", "note 1 = timpl_closure_set_is_timpl_closure_union[of _ \"set TI\"]"], ["proof (state)\nthis:\n  timpl_closure_set ?M (set TI) =\n  (\\<Union>t\\<in>?M. timpl_closure t (set TI))\n\ngoal (2 subgoals):\n 1. analyzed_closed_mod_timpls' M TI \\<Longrightarrow>\n    analyzed (timpl_closure_set (set M) (set TI))\n 2. analyzed (timpl_closure_set (set M) (set TI)) \\<Longrightarrow>\n    analyzed_closed_mod_timpls' M TI", "have 2: \"comp_timpl_closure {t} (set TI) = timpl_closure_set {t} (set TI)\"\n    when t: \"t \\<in> set M\" \"wf\\<^sub>t\\<^sub>r\\<^sub>m t\" for t"], ["proof (prove)\ngoal (1 subgoal):\n 1. comp_timpl_closure {t} (set TI) = timpl_closure_set {t} (set TI)", "using t timpl_closure_set_timpls_trancl_eq[of \"{t}\" \"set TI\"]\n          comp_timpl_closure_is_timpl_closure_set[of \"{t}\"]"], ["proof (prove)\nusing this:\n  t \\<in> set M\n  wf\\<^sub>t\\<^sub>r\\<^sub>m t\n  timpl_closure_set {t} ((set TI)\\<^sup>+) = timpl_closure_set {t} (set TI)\n  \\<lbrakk>finite {t}; wf\\<^sub>t\\<^sub>r\\<^sub>m\\<^sub>s {t}\\<rbrakk>\n  \\<Longrightarrow> comp_timpl_closure {t} (set ?TI) =\n                    timpl_closure_set {t} (set ?TI)\n\ngoal (1 subgoal):\n 1. comp_timpl_closure {t} (set TI) = timpl_closure_set {t} (set TI)", "by blast"], ["proof (state)\nthis:\n  \\<lbrakk>?t43 \\<in> set M; wf\\<^sub>t\\<^sub>r\\<^sub>m ?t43\\<rbrakk>\n  \\<Longrightarrow> comp_timpl_closure {?t43} (set TI) =\n                    timpl_closure_set {?t43} (set TI)\n\ngoal (2 subgoals):\n 1. analyzed_closed_mod_timpls' M TI \\<Longrightarrow>\n    analyzed (timpl_closure_set (set M) (set TI))\n 2. analyzed (timpl_closure_set (set M) (set TI)) \\<Longrightarrow>\n    analyzed_closed_mod_timpls' M TI", "hence 3: \"comp_timpl_closure {t} (set TI) \\<subseteq> timpl_closure_set (set M) (set TI)\"\n    when t: \"t \\<in> set M\" \"wf\\<^sub>t\\<^sub>r\\<^sub>m t\" for t"], ["proof (prove)\nusing this:\n  \\<lbrakk>?t43 \\<in> set M; wf\\<^sub>t\\<^sub>r\\<^sub>m ?t43\\<rbrakk>\n  \\<Longrightarrow> comp_timpl_closure {?t43} (set TI) =\n                    timpl_closure_set {?t43} (set TI)\n\ngoal (1 subgoal):\n 1. comp_timpl_closure {t} (set TI)\n    \\<subseteq> timpl_closure_set (set M) (set TI)", "using t timpl_closure_set_mono[of \"{t}\" \"set M\"]"], ["proof (prove)\nusing this:\n  \\<lbrakk>?t43 \\<in> set M; wf\\<^sub>t\\<^sub>r\\<^sub>m ?t43\\<rbrakk>\n  \\<Longrightarrow> comp_timpl_closure {?t43} (set TI) =\n                    timpl_closure_set {?t43} (set TI)\n  t \\<in> set M\n  wf\\<^sub>t\\<^sub>r\\<^sub>m t\n  \\<lbrakk>{t} \\<subseteq> set M; ?TI \\<subseteq> ?TI'\\<rbrakk>\n  \\<Longrightarrow> timpl_closure_set {t} ?TI\n                    \\<subseteq> timpl_closure_set (set M) ?TI'\n\ngoal (1 subgoal):\n 1. comp_timpl_closure {t} (set TI)\n    \\<subseteq> timpl_closure_set (set M) (set TI)", "by fast"], ["proof (state)\nthis:\n  \\<lbrakk>?t43 \\<in> set M; wf\\<^sub>t\\<^sub>r\\<^sub>m ?t43\\<rbrakk>\n  \\<Longrightarrow> comp_timpl_closure {?t43} (set TI)\n                    \\<subseteq> timpl_closure_set (set M) (set TI)\n\ngoal (2 subgoals):\n 1. analyzed_closed_mod_timpls' M TI \\<Longrightarrow>\n    analyzed (timpl_closure_set (set M) (set TI))\n 2. analyzed (timpl_closure_set (set M) (set TI)) \\<Longrightarrow>\n    analyzed_closed_mod_timpls' M TI", "have ?A when C: ?C"], ["proof (prove)\ngoal (1 subgoal):\n 1. analyzed_closed_mod_timpls' M TI", "unfolding analyzed_closed_mod_timpls'_def\n              intruder_synth_mod_timpls'_is_synth_timpl_closure_set\n              list_all_iff Let_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>t\\<in>set M.\n       if Ball (set (fst (Ana t)))\n           ((\\<turnstile>\\<^sub>c) (timpl_closure_set (set M) (set TI)))\n       then Ball (set (snd (Ana t)))\n             ((\\<turnstile>\\<^sub>c) (timpl_closure_set (set M) (set TI)))\n       else \\<forall>s\\<in>comp_timpl_closure {t} (set TI).\n               case Ana s of\n               (K, R) \\<Rightarrow>\n                 Ball (set K)\n                  ((\\<turnstile>\\<^sub>c)\n                    (timpl_closure_set (set M) (set TI))) \\<longrightarrow>\n                 Ball (set R)\n                  ((\\<turnstile>\\<^sub>c)\n                    (timpl_closure_set (set M) (set TI)))", "proof (intro ballI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>t.\n       t \\<in> set M \\<Longrightarrow>\n       if Ball (set (fst (Ana t)))\n           ((\\<turnstile>\\<^sub>c) (timpl_closure_set (set M) (set TI)))\n       then Ball (set (snd (Ana t)))\n             ((\\<turnstile>\\<^sub>c) (timpl_closure_set (set M) (set TI)))\n       else \\<forall>s\\<in>comp_timpl_closure {t} (set TI).\n               case Ana s of\n               (K, R) \\<Rightarrow>\n                 Ball (set K)\n                  ((\\<turnstile>\\<^sub>c)\n                    (timpl_closure_set (set M) (set TI))) \\<longrightarrow>\n                 Ball (set R)\n                  ((\\<turnstile>\\<^sub>c)\n                    (timpl_closure_set (set M) (set TI)))", "fix t"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>t.\n       t \\<in> set M \\<Longrightarrow>\n       if Ball (set (fst (Ana t)))\n           ((\\<turnstile>\\<^sub>c) (timpl_closure_set (set M) (set TI)))\n       then Ball (set (snd (Ana t)))\n             ((\\<turnstile>\\<^sub>c) (timpl_closure_set (set M) (set TI)))\n       else \\<forall>s\\<in>comp_timpl_closure {t} (set TI).\n               case Ana s of\n               (K, R) \\<Rightarrow>\n                 Ball (set K)\n                  ((\\<turnstile>\\<^sub>c)\n                    (timpl_closure_set (set M) (set TI))) \\<longrightarrow>\n                 Ball (set R)\n                  ((\\<turnstile>\\<^sub>c)\n                    (timpl_closure_set (set M) (set TI)))", "assume t: \"t \\<in> set M\""], ["proof (state)\nthis:\n  t \\<in> set M\n\ngoal (1 subgoal):\n 1. \\<And>t.\n       t \\<in> set M \\<Longrightarrow>\n       if Ball (set (fst (Ana t)))\n           ((\\<turnstile>\\<^sub>c) (timpl_closure_set (set M) (set TI)))\n       then Ball (set (snd (Ana t)))\n             ((\\<turnstile>\\<^sub>c) (timpl_closure_set (set M) (set TI)))\n       else \\<forall>s\\<in>comp_timpl_closure {t} (set TI).\n               case Ana s of\n               (K, R) \\<Rightarrow>\n                 Ball (set K)\n                  ((\\<turnstile>\\<^sub>c)\n                    (timpl_closure_set (set M) (set TI))) \\<longrightarrow>\n                 Ball (set R)\n                  ((\\<turnstile>\\<^sub>c)\n                    (timpl_closure_set (set M) (set TI)))", "show \"if ?P (fst (Ana t)) then ?P (snd (Ana t)) else ?Q t\" (is ?R)"], ["proof (prove)\ngoal (1 subgoal):\n 1. if \\<forall>t\\<in>set (fst (Ana t)).\n          timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t\n    then \\<forall>t\\<in>set (snd (Ana t)).\n            timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t\n    else \\<forall>s\\<in>comp_timpl_closure {t} (set TI).\n            case Ana s of\n            (K, R) \\<Rightarrow>\n              (\\<forall>t\\<in>set K.\n                  timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c\n                  t) \\<longrightarrow>\n              (\\<forall>t\\<in>set R.\n                  timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t)", "proof (cases \"?P (fst (Ana t))\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<forall>t\\<in>set (fst (Ana t)).\n       timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c\n       t \\<Longrightarrow>\n    if \\<forall>t\\<in>set (fst (Ana t)).\n          timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t\n    then \\<forall>t\\<in>set (snd (Ana t)).\n            timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t\n    else \\<forall>s\\<in>comp_timpl_closure {t} (set TI).\n            case Ana s of\n            (K, R) \\<Rightarrow>\n              (\\<forall>t\\<in>set K.\n                  timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c\n                  t) \\<longrightarrow>\n              (\\<forall>t\\<in>set R.\n                  timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t)\n 2. \\<not> (\\<forall>t\\<in>set (fst (Ana t)).\n               timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c\n               t) \\<Longrightarrow>\n    if \\<forall>t\\<in>set (fst (Ana t)).\n          timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t\n    then \\<forall>t\\<in>set (snd (Ana t)).\n            timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t\n    else \\<forall>s\\<in>comp_timpl_closure {t} (set TI).\n            case Ana s of\n            (K, R) \\<Rightarrow>\n              (\\<forall>t\\<in>set K.\n                  timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c\n                  t) \\<longrightarrow>\n              (\\<forall>t\\<in>set R.\n                  timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t)", "case True"], ["proof (state)\nthis:\n  \\<forall>t\\<in>set (fst (Ana t)).\n     timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t\n\ngoal (2 subgoals):\n 1. \\<forall>t\\<in>set (fst (Ana t)).\n       timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c\n       t \\<Longrightarrow>\n    if \\<forall>t\\<in>set (fst (Ana t)).\n          timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t\n    then \\<forall>t\\<in>set (snd (Ana t)).\n            timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t\n    else \\<forall>s\\<in>comp_timpl_closure {t} (set TI).\n            case Ana s of\n            (K, R) \\<Rightarrow>\n              (\\<forall>t\\<in>set K.\n                  timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c\n                  t) \\<longrightarrow>\n              (\\<forall>t\\<in>set R.\n                  timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t)\n 2. \\<not> (\\<forall>t\\<in>set (fst (Ana t)).\n               timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c\n               t) \\<Longrightarrow>\n    if \\<forall>t\\<in>set (fst (Ana t)).\n          timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t\n    then \\<forall>t\\<in>set (snd (Ana t)).\n            timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t\n    else \\<forall>s\\<in>comp_timpl_closure {t} (set TI).\n            case Ana s of\n            (K, R) \\<Rightarrow>\n              (\\<forall>t\\<in>set K.\n                  timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c\n                  t) \\<longrightarrow>\n              (\\<forall>t\\<in>set R.\n                  timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t)", "hence \"?P (snd (Ana t))\""], ["proof (prove)\nusing this:\n  \\<forall>t\\<in>set (fst (Ana t)).\n     timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t\n\ngoal (1 subgoal):\n 1. \\<forall>t\\<in>set (snd (Ana t)).\n       timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t", "using C timpl_closure_setI[OF t, of \"set TI\"] prod.exhaust_sel"], ["proof (prove)\nusing this:\n  \\<forall>t\\<in>set (fst (Ana t)).\n     timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t\n  \\<forall>t\\<in>timpl_closure_set (set M) (set TI).\n     analyzed_in t (timpl_closure_set (set M) (set TI))\n  t \\<in> timpl_closure_set (set M) (set TI)\n  (?prod = (fst ?prod, snd ?prod) \\<Longrightarrow> ?P) \\<Longrightarrow> ?P\n\ngoal (1 subgoal):\n 1. \\<forall>t\\<in>set (snd (Ana t)).\n       timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t", "unfolding analyzed_in_def"], ["proof (prove)\nusing this:\n  \\<forall>t\\<in>set (fst (Ana t)).\n     timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t\n  \\<forall>t\\<in>timpl_closure_set (set M) (set TI).\n     \\<forall>K R.\n        Ana t = (K, R) \\<and>\n        (\\<forall>k\\<in>set K.\n            timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c\n            k) \\<longrightarrow>\n        (\\<forall>r\\<in>set R.\n            timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c r)\n  t \\<in> timpl_closure_set (set M) (set TI)\n  (?prod = (fst ?prod, snd ?prod) \\<Longrightarrow> ?P) \\<Longrightarrow> ?P\n\ngoal (1 subgoal):\n 1. \\<forall>t\\<in>set (snd (Ana t)).\n       timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t", "by blast"], ["proof (state)\nthis:\n  \\<forall>t\\<in>set (snd (Ana t)).\n     timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t\n\ngoal (2 subgoals):\n 1. \\<forall>t\\<in>set (fst (Ana t)).\n       timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c\n       t \\<Longrightarrow>\n    if \\<forall>t\\<in>set (fst (Ana t)).\n          timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t\n    then \\<forall>t\\<in>set (snd (Ana t)).\n            timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t\n    else \\<forall>s\\<in>comp_timpl_closure {t} (set TI).\n            case Ana s of\n            (K, R) \\<Rightarrow>\n              (\\<forall>t\\<in>set K.\n                  timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c\n                  t) \\<longrightarrow>\n              (\\<forall>t\\<in>set R.\n                  timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t)\n 2. \\<not> (\\<forall>t\\<in>set (fst (Ana t)).\n               timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c\n               t) \\<Longrightarrow>\n    if \\<forall>t\\<in>set (fst (Ana t)).\n          timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t\n    then \\<forall>t\\<in>set (snd (Ana t)).\n            timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t\n    else \\<forall>s\\<in>comp_timpl_closure {t} (set TI).\n            case Ana s of\n            (K, R) \\<Rightarrow>\n              (\\<forall>t\\<in>set K.\n                  timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c\n                  t) \\<longrightarrow>\n              (\\<forall>t\\<in>set R.\n                  timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t)", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>t\\<in>set (snd (Ana t)).\n     timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t\n\ngoal (1 subgoal):\n 1. if \\<forall>t\\<in>set (fst (Ana t)).\n          timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t\n    then \\<forall>t\\<in>set (snd (Ana t)).\n            timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t\n    else \\<forall>s\\<in>comp_timpl_closure {t} (set TI).\n            case Ana s of\n            (K, R) \\<Rightarrow>\n              (\\<forall>t\\<in>set K.\n                  timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c\n                  t) \\<longrightarrow>\n              (\\<forall>t\\<in>set R.\n                  timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t)", "using True"], ["proof (prove)\nusing this:\n  \\<forall>t\\<in>set (snd (Ana t)).\n     timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t\n  \\<forall>t\\<in>set (fst (Ana t)).\n     timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t\n\ngoal (1 subgoal):\n 1. if \\<forall>t\\<in>set (fst (Ana t)).\n          timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t\n    then \\<forall>t\\<in>set (snd (Ana t)).\n            timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t\n    else \\<forall>s\\<in>comp_timpl_closure {t} (set TI).\n            case Ana s of\n            (K, R) \\<Rightarrow>\n              (\\<forall>t\\<in>set K.\n                  timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c\n                  t) \\<longrightarrow>\n              (\\<forall>t\\<in>set R.\n                  timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t)", "by simp"], ["proof (state)\nthis:\n  if \\<forall>t\\<in>set (fst (Ana t)).\n        timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t\n  then \\<forall>t\\<in>set (snd (Ana t)).\n          timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t\n  else \\<forall>s\\<in>comp_timpl_closure {t} (set TI).\n          case Ana s of\n          (K, R) \\<Rightarrow>\n            (\\<forall>t\\<in>set K.\n                timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c\n                t) \\<longrightarrow>\n            (\\<forall>t\\<in>set R.\n                timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>t\\<in>set (fst (Ana t)).\n               timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c\n               t) \\<Longrightarrow>\n    if \\<forall>t\\<in>set (fst (Ana t)).\n          timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t\n    then \\<forall>t\\<in>set (snd (Ana t)).\n            timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t\n    else \\<forall>s\\<in>comp_timpl_closure {t} (set TI).\n            case Ana s of\n            (K, R) \\<Rightarrow>\n              (\\<forall>t\\<in>set K.\n                  timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c\n                  t) \\<longrightarrow>\n              (\\<forall>t\\<in>set R.\n                  timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>t\\<in>set (fst (Ana t)).\n               timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c\n               t) \\<Longrightarrow>\n    if \\<forall>t\\<in>set (fst (Ana t)).\n          timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t\n    then \\<forall>t\\<in>set (snd (Ana t)).\n            timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t\n    else \\<forall>s\\<in>comp_timpl_closure {t} (set TI).\n            case Ana s of\n            (K, R) \\<Rightarrow>\n              (\\<forall>t\\<in>set K.\n                  timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c\n                  t) \\<longrightarrow>\n              (\\<forall>t\\<in>set R.\n                  timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t)", "case False"], ["proof (state)\nthis:\n  \\<not> (\\<forall>t\\<in>set (fst (Ana t)).\n             timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>t\\<in>set (fst (Ana t)).\n               timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c\n               t) \\<Longrightarrow>\n    if \\<forall>t\\<in>set (fst (Ana t)).\n          timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t\n    then \\<forall>t\\<in>set (snd (Ana t)).\n            timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t\n    else \\<forall>s\\<in>comp_timpl_closure {t} (set TI).\n            case Ana s of\n            (K, R) \\<Rightarrow>\n              (\\<forall>t\\<in>set K.\n                  timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c\n                  t) \\<longrightarrow>\n              (\\<forall>t\\<in>set R.\n                  timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t)", "have \"?Q t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>s\\<in>comp_timpl_closure {t} (set TI).\n       case Ana s of\n       (K, R) \\<Rightarrow>\n         (\\<forall>t\\<in>set K.\n             timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c\n             t) \\<longrightarrow>\n         (\\<forall>t\\<in>set R.\n             timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t)", "using 3[OF t] C M_wf t"], ["proof (prove)\nusing this:\n  wf\\<^sub>t\\<^sub>r\\<^sub>m t \\<Longrightarrow>\n  comp_timpl_closure {t} (set TI)\n  \\<subseteq> timpl_closure_set (set M) (set TI)\n  \\<forall>t\\<in>timpl_closure_set (set M) (set TI).\n     analyzed_in t (timpl_closure_set (set M) (set TI))\n  wf\\<^sub>t\\<^sub>r\\<^sub>m\\<^sub>s (set M)\n  t \\<in> set M\n\ngoal (1 subgoal):\n 1. \\<forall>s\\<in>comp_timpl_closure {t} (set TI).\n       case Ana s of\n       (K, R) \\<Rightarrow>\n         (\\<forall>t\\<in>set K.\n             timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c\n             t) \\<longrightarrow>\n         (\\<forall>t\\<in>set R.\n             timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t)", "unfolding analyzed_in_def"], ["proof (prove)\nusing this:\n  wf\\<^sub>t\\<^sub>r\\<^sub>m t \\<Longrightarrow>\n  comp_timpl_closure {t} (set TI)\n  \\<subseteq> timpl_closure_set (set M) (set TI)\n  \\<forall>t\\<in>timpl_closure_set (set M) (set TI).\n     \\<forall>K R.\n        Ana t = (K, R) \\<and>\n        (\\<forall>k\\<in>set K.\n            timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c\n            k) \\<longrightarrow>\n        (\\<forall>r\\<in>set R.\n            timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c r)\n  wf\\<^sub>t\\<^sub>r\\<^sub>m\\<^sub>s (set M)\n  t \\<in> set M\n\ngoal (1 subgoal):\n 1. \\<forall>s\\<in>comp_timpl_closure {t} (set TI).\n       case Ana s of\n       (K, R) \\<Rightarrow>\n         (\\<forall>t\\<in>set K.\n             timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c\n             t) \\<longrightarrow>\n         (\\<forall>t\\<in>set R.\n             timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t)", "by auto"], ["proof (state)\nthis:\n  \\<forall>s\\<in>comp_timpl_closure {t} (set TI).\n     case Ana s of\n     (K, R) \\<Rightarrow>\n       (\\<forall>t\\<in>set K.\n           timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c\n           t) \\<longrightarrow>\n       (\\<forall>t\\<in>set R.\n           timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>t\\<in>set (fst (Ana t)).\n               timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c\n               t) \\<Longrightarrow>\n    if \\<forall>t\\<in>set (fst (Ana t)).\n          timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t\n    then \\<forall>t\\<in>set (snd (Ana t)).\n            timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t\n    else \\<forall>s\\<in>comp_timpl_closure {t} (set TI).\n            case Ana s of\n            (K, R) \\<Rightarrow>\n              (\\<forall>t\\<in>set K.\n                  timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c\n                  t) \\<longrightarrow>\n              (\\<forall>t\\<in>set R.\n                  timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t)", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>s\\<in>comp_timpl_closure {t} (set TI).\n     case Ana s of\n     (K, R) \\<Rightarrow>\n       (\\<forall>t\\<in>set K.\n           timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c\n           t) \\<longrightarrow>\n       (\\<forall>t\\<in>set R.\n           timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t)\n\ngoal (1 subgoal):\n 1. if \\<forall>t\\<in>set (fst (Ana t)).\n          timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t\n    then \\<forall>t\\<in>set (snd (Ana t)).\n            timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t\n    else \\<forall>s\\<in>comp_timpl_closure {t} (set TI).\n            case Ana s of\n            (K, R) \\<Rightarrow>\n              (\\<forall>t\\<in>set K.\n                  timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c\n                  t) \\<longrightarrow>\n              (\\<forall>t\\<in>set R.\n                  timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t)", "using False"], ["proof (prove)\nusing this:\n  \\<forall>s\\<in>comp_timpl_closure {t} (set TI).\n     case Ana s of\n     (K, R) \\<Rightarrow>\n       (\\<forall>t\\<in>set K.\n           timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c\n           t) \\<longrightarrow>\n       (\\<forall>t\\<in>set R.\n           timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t)\n  \\<not> (\\<forall>t\\<in>set (fst (Ana t)).\n             timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t)\n\ngoal (1 subgoal):\n 1. if \\<forall>t\\<in>set (fst (Ana t)).\n          timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t\n    then \\<forall>t\\<in>set (snd (Ana t)).\n            timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t\n    else \\<forall>s\\<in>comp_timpl_closure {t} (set TI).\n            case Ana s of\n            (K, R) \\<Rightarrow>\n              (\\<forall>t\\<in>set K.\n                  timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c\n                  t) \\<longrightarrow>\n              (\\<forall>t\\<in>set R.\n                  timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t)", "by argo"], ["proof (state)\nthis:\n  if \\<forall>t\\<in>set (fst (Ana t)).\n        timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t\n  then \\<forall>t\\<in>set (snd (Ana t)).\n          timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t\n  else \\<forall>s\\<in>comp_timpl_closure {t} (set TI).\n          case Ana s of\n          (K, R) \\<Rightarrow>\n            (\\<forall>t\\<in>set K.\n                timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c\n                t) \\<longrightarrow>\n            (\\<forall>t\\<in>set R.\n                timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  if \\<forall>t\\<in>set (fst (Ana t)).\n        timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t\n  then \\<forall>t\\<in>set (snd (Ana t)).\n          timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t\n  else \\<forall>s\\<in>comp_timpl_closure {t} (set TI).\n          case Ana s of\n          (K, R) \\<Rightarrow>\n            (\\<forall>t\\<in>set K.\n                timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c\n                t) \\<longrightarrow>\n            (\\<forall>t\\<in>set R.\n                timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>t\\<in>timpl_closure_set (set M) (set TI).\n     analyzed_in t (timpl_closure_set (set M) (set TI)) \\<Longrightarrow>\n  analyzed_closed_mod_timpls' M TI\n\ngoal (2 subgoals):\n 1. analyzed_closed_mod_timpls' M TI \\<Longrightarrow>\n    analyzed (timpl_closure_set (set M) (set TI))\n 2. analyzed (timpl_closure_set (set M) (set TI)) \\<Longrightarrow>\n    analyzed_closed_mod_timpls' M TI", "thus ?A when B: ?B"], ["proof (prove)\nusing this:\n  \\<forall>t\\<in>timpl_closure_set (set M) (set TI).\n     analyzed_in t (timpl_closure_set (set M) (set TI)) \\<Longrightarrow>\n  analyzed_closed_mod_timpls' M TI\n\ngoal (1 subgoal):\n 1. analyzed_closed_mod_timpls' M TI", "using B analyzed_is_all_analyzed_in"], ["proof (prove)\nusing this:\n  \\<forall>t\\<in>timpl_closure_set (set M) (set TI).\n     analyzed_in t (timpl_closure_set (set M) (set TI)) \\<Longrightarrow>\n  analyzed_closed_mod_timpls' M TI\n  analyzed (timpl_closure_set (set M) (set TI))\n  (\\<forall>t\\<in>?M. analyzed_in t ?M) = analyzed ?M\n\ngoal (1 subgoal):\n 1. analyzed_closed_mod_timpls' M TI", "by metis"], ["proof (state)\nthis:\n  analyzed (timpl_closure_set (set M) (set TI)) \\<Longrightarrow>\n  analyzed_closed_mod_timpls' M TI\n\ngoal (2 subgoals):\n 1. analyzed_closed_mod_timpls' M TI \\<Longrightarrow>\n    analyzed (timpl_closure_set (set M) (set TI))\n 2. analyzed (timpl_closure_set (set M) (set TI)) \\<Longrightarrow>\n    analyzed (timpl_closure_set (set M) (set TI))", "have ?C when A: ?A"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>t\\<in>timpl_closure_set (set M) (set TI).\n       analyzed_in t (timpl_closure_set (set M) (set TI))", "unfolding analyzed_in_def Let_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>t\\<in>timpl_closure_set (set M) (set TI).\n       \\<forall>K R.\n          Ana t = (K, R) \\<and>\n          (\\<forall>k\\<in>set K.\n              timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c\n              k) \\<longrightarrow>\n          (\\<forall>r\\<in>set R.\n              timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c r)", "proof (intro ballI allI impI; elim conjE)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>t K R r.\n       \\<lbrakk>t \\<in> timpl_closure_set (set M) (set TI); r \\<in> set R;\n        Ana t = (K, R);\n        \\<forall>k\\<in>set K.\n           timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c\n           k\\<rbrakk>\n       \\<Longrightarrow> timpl_closure_set (set M)\n                          (set TI) \\<turnstile>\\<^sub>c\n                         r", "fix t K T s"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>t K R r.\n       \\<lbrakk>t \\<in> timpl_closure_set (set M) (set TI); r \\<in> set R;\n        Ana t = (K, R);\n        \\<forall>k\\<in>set K.\n           timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c\n           k\\<rbrakk>\n       \\<Longrightarrow> timpl_closure_set (set M)\n                          (set TI) \\<turnstile>\\<^sub>c\n                         r", "assume t: \"t \\<in> timpl_closure_set (set M) (set TI)\"\n      and s: \"s \\<in> set T\"\n      and Ana_t: \"Ana t = (K, T)\"\n      and K: \"\\<forall>k \\<in> set K. timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c k\""], ["proof (state)\nthis:\n  t \\<in> timpl_closure_set (set M) (set TI)\n  s \\<in> set T\n  Ana t = (K, T)\n  \\<forall>k\\<in>set K.\n     timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c k\n\ngoal (1 subgoal):\n 1. \\<And>t K R r.\n       \\<lbrakk>t \\<in> timpl_closure_set (set M) (set TI); r \\<in> set R;\n        Ana t = (K, R);\n        \\<forall>k\\<in>set K.\n           timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c\n           k\\<rbrakk>\n       \\<Longrightarrow> timpl_closure_set (set M)\n                          (set TI) \\<turnstile>\\<^sub>c\n                         r", "obtain m where m: \"m \\<in> set M\" \"t \\<in> timpl_closure m (set TI)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>m.\n        \\<lbrakk>m \\<in> set M; t \\<in> timpl_closure m (set TI)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using timpl_closure_set_is_timpl_closure_union t"], ["proof (prove)\nusing this:\n  timpl_closure_set ?M ?TI = (\\<Union>t\\<in>?M. timpl_closure t ?TI)\n  t \\<in> timpl_closure_set (set M) (set TI)\n\ngoal (1 subgoal):\n 1. (\\<And>m.\n        \\<lbrakk>m \\<in> set M; t \\<in> timpl_closure m (set TI)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by moura"], ["proof (state)\nthis:\n  m \\<in> set M\n  t \\<in> timpl_closure m (set TI)\n\ngoal (1 subgoal):\n 1. \\<And>t K R r.\n       \\<lbrakk>t \\<in> timpl_closure_set (set M) (set TI); r \\<in> set R;\n        Ana t = (K, R);\n        \\<forall>k\\<in>set K.\n           timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c\n           k\\<rbrakk>\n       \\<Longrightarrow> timpl_closure_set (set M)\n                          (set TI) \\<turnstile>\\<^sub>c\n                         r", "show \"timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c s", "proof (cases \"\\<forall>k \\<in> set (fst (Ana m)). timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c k\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<forall>k\\<in>set (fst (Ana m)).\n       timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c\n       k \\<Longrightarrow>\n    timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c s\n 2. \\<not> (\\<forall>k\\<in>set (fst (Ana m)).\n               timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c\n               k) \\<Longrightarrow>\n    timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c s", "case True"], ["proof (state)\nthis:\n  \\<forall>k\\<in>set (fst (Ana m)).\n     timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c k\n\ngoal (2 subgoals):\n 1. \\<forall>k\\<in>set (fst (Ana m)).\n       timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c\n       k \\<Longrightarrow>\n    timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c s\n 2. \\<not> (\\<forall>k\\<in>set (fst (Ana m)).\n               timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c\n               k) \\<Longrightarrow>\n    timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c s", "hence *: \"\\<forall>r \\<in> set (snd (Ana m)). timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c r\""], ["proof (prove)\nusing this:\n  \\<forall>k\\<in>set (fst (Ana m)).\n     timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c k\n\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>set (snd (Ana m)).\n       timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c r", "using m(1) A"], ["proof (prove)\nusing this:\n  \\<forall>k\\<in>set (fst (Ana m)).\n     timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c k\n  m \\<in> set M\n  analyzed_closed_mod_timpls' M TI\n\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>set (snd (Ana m)).\n       timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c r", "unfolding analyzed_closed_mod_timpls'_def\n                  intruder_synth_mod_timpls'_is_synth_timpl_closure_set\n                  list_all_iff"], ["proof (prove)\nusing this:\n  \\<forall>k\\<in>set (fst (Ana m)).\n     timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c k\n  m \\<in> set M\n  let f = \\<lambda>x.\n             Ball (set x)\n              ((\\<turnstile>\\<^sub>c) (timpl_closure_set (set M) (set TI)))\n  in Let (\\<lambda>t.\n             if f (fst (Ana t)) then f (snd (Ana t))\n             else \\<forall>s\\<in>comp_timpl_closure {t} (set TI).\n                     case Ana s of\n                     (K, R) \\<Rightarrow> f K \\<longrightarrow> f R)\n      (Ball (set M))\n\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>set (snd (Ana m)).\n       timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c r", "by simp"], ["proof (state)\nthis:\n  \\<forall>r\\<in>set (snd (Ana m)).\n     timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c r\n\ngoal (2 subgoals):\n 1. \\<forall>k\\<in>set (fst (Ana m)).\n       timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c\n       k \\<Longrightarrow>\n    timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c s\n 2. \\<not> (\\<forall>k\\<in>set (fst (Ana m)).\n               timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c\n               k) \\<Longrightarrow>\n    timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c s", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c s", "using K s Ana_t A\n              analyzed_closed_mod_timpls_is_analyzed_closed_timpl_closure_set_aux2[OF * m]"], ["proof (prove)\nusing this:\n  \\<forall>k\\<in>set K.\n     timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c k\n  s \\<in> set T\n  Ana t = (K, T)\n  analyzed_closed_mod_timpls' M TI\n  ?s \\<in> set (snd (Ana t)) \\<Longrightarrow>\n  timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c ?s\n\ngoal (1 subgoal):\n 1. timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c s", "by simp"], ["proof (state)\nthis:\n  timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c s\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>k\\<in>set (fst (Ana m)).\n               timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c\n               k) \\<Longrightarrow>\n    timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c s", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>k\\<in>set (fst (Ana m)).\n               timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c\n               k) \\<Longrightarrow>\n    timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c s", "case False"], ["proof (state)\nthis:\n  \\<not> (\\<forall>k\\<in>set (fst (Ana m)).\n             timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c k)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>k\\<in>set (fst (Ana m)).\n               timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c\n               k) \\<Longrightarrow>\n    timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c s", "hence \"?Q m\""], ["proof (prove)\nusing this:\n  \\<not> (\\<forall>k\\<in>set (fst (Ana m)).\n             timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c k)\n\ngoal (1 subgoal):\n 1. \\<forall>s\\<in>comp_timpl_closure {m} (set TI).\n       case Ana s of\n       (K, R) \\<Rightarrow>\n         (\\<forall>t\\<in>set K.\n             timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c\n             t) \\<longrightarrow>\n         (\\<forall>t\\<in>set R.\n             timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t)", "using m(1) A"], ["proof (prove)\nusing this:\n  \\<not> (\\<forall>k\\<in>set (fst (Ana m)).\n             timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c k)\n  m \\<in> set M\n  analyzed_closed_mod_timpls' M TI\n\ngoal (1 subgoal):\n 1. \\<forall>s\\<in>comp_timpl_closure {m} (set TI).\n       case Ana s of\n       (K, R) \\<Rightarrow>\n         (\\<forall>t\\<in>set K.\n             timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c\n             t) \\<longrightarrow>\n         (\\<forall>t\\<in>set R.\n             timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t)", "unfolding analyzed_closed_mod_timpls'_def\n                  intruder_synth_mod_timpls'_is_synth_timpl_closure_set\n                  list_all_iff Let_def"], ["proof (prove)\nusing this:\n  \\<not> (\\<forall>k\\<in>set (fst (Ana m)).\n             timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c k)\n  m \\<in> set M\n  \\<forall>t\\<in>set M.\n     if Ball (set (fst (Ana t)))\n         ((\\<turnstile>\\<^sub>c) (timpl_closure_set (set M) (set TI)))\n     then Ball (set (snd (Ana t)))\n           ((\\<turnstile>\\<^sub>c) (timpl_closure_set (set M) (set TI)))\n     else \\<forall>s\\<in>comp_timpl_closure {t} (set TI).\n             case Ana s of\n             (K, R) \\<Rightarrow>\n               Ball (set K)\n                ((\\<turnstile>\\<^sub>c)\n                  (timpl_closure_set (set M) (set TI))) \\<longrightarrow>\n               Ball (set R)\n                ((\\<turnstile>\\<^sub>c)\n                  (timpl_closure_set (set M) (set TI)))\n\ngoal (1 subgoal):\n 1. \\<forall>s\\<in>comp_timpl_closure {m} (set TI).\n       case Ana s of\n       (K, R) \\<Rightarrow>\n         (\\<forall>t\\<in>set K.\n             timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c\n             t) \\<longrightarrow>\n         (\\<forall>t\\<in>set R.\n             timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t)", "by auto"], ["proof (state)\nthis:\n  \\<forall>s\\<in>comp_timpl_closure {m} (set TI).\n     case Ana s of\n     (K, R) \\<Rightarrow>\n       (\\<forall>t\\<in>set K.\n           timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c\n           t) \\<longrightarrow>\n       (\\<forall>t\\<in>set R.\n           timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>k\\<in>set (fst (Ana m)).\n               timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c\n               k) \\<Longrightarrow>\n    timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c s", "moreover"], ["proof (state)\nthis:\n  \\<forall>s\\<in>comp_timpl_closure {m} (set TI).\n     case Ana s of\n     (K, R) \\<Rightarrow>\n       (\\<forall>t\\<in>set K.\n           timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c\n           t) \\<longrightarrow>\n       (\\<forall>t\\<in>set R.\n           timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>k\\<in>set (fst (Ana m)).\n               timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c\n               k) \\<Longrightarrow>\n    timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c s", "have \"comp_timpl_closure {m} (set TI) = timpl_closure m (set TI)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. comp_timpl_closure {m} (set TI) = timpl_closure m (set TI)", "using 2[OF m(1)] timpl_closureton_is_timpl_closure M_wf m(1)"], ["proof (prove)\nusing this:\n  wf\\<^sub>t\\<^sub>r\\<^sub>m m \\<Longrightarrow>\n  comp_timpl_closure {m} (set TI) = timpl_closure_set {m} (set TI)\n  timpl_closure_set {?t} ?TI = timpl_closure ?t ?TI\n  wf\\<^sub>t\\<^sub>r\\<^sub>m\\<^sub>s (set M)\n  m \\<in> set M\n\ngoal (1 subgoal):\n 1. comp_timpl_closure {m} (set TI) = timpl_closure m (set TI)", "by blast"], ["proof (state)\nthis:\n  comp_timpl_closure {m} (set TI) = timpl_closure m (set TI)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>k\\<in>set (fst (Ana m)).\n               timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c\n               k) \\<Longrightarrow>\n    timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c s", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>s\\<in>comp_timpl_closure {m} (set TI).\n     case Ana s of\n     (K, R) \\<Rightarrow>\n       (\\<forall>t\\<in>set K.\n           timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c\n           t) \\<longrightarrow>\n       (\\<forall>t\\<in>set R.\n           timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t)\n  comp_timpl_closure {m} (set TI) = timpl_closure m (set TI)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>s\\<in>comp_timpl_closure {m} (set TI).\n     case Ana s of\n     (K, R) \\<Rightarrow>\n       (\\<forall>t\\<in>set K.\n           timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c\n           t) \\<longrightarrow>\n       (\\<forall>t\\<in>set R.\n           timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t)\n  comp_timpl_closure {m} (set TI) = timpl_closure m (set TI)\n\ngoal (1 subgoal):\n 1. timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c s", "using m(2) K s Ana_t"], ["proof (prove)\nusing this:\n  \\<forall>s\\<in>comp_timpl_closure {m} (set TI).\n     case Ana s of\n     (K, R) \\<Rightarrow>\n       (\\<forall>t\\<in>set K.\n           timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c\n           t) \\<longrightarrow>\n       (\\<forall>t\\<in>set R.\n           timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t)\n  comp_timpl_closure {m} (set TI) = timpl_closure m (set TI)\n  t \\<in> timpl_closure m (set TI)\n  \\<forall>k\\<in>set K.\n     timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c k\n  s \\<in> set T\n  Ana t = (K, T)\n\ngoal (1 subgoal):\n 1. timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c s", "unfolding Let_def"], ["proof (prove)\nusing this:\n  \\<forall>s\\<in>comp_timpl_closure {m} (set TI).\n     case Ana s of\n     (K, R) \\<Rightarrow>\n       (\\<forall>t\\<in>set K.\n           timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c\n           t) \\<longrightarrow>\n       (\\<forall>t\\<in>set R.\n           timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c t)\n  comp_timpl_closure {m} (set TI) = timpl_closure m (set TI)\n  t \\<in> timpl_closure m (set TI)\n  \\<forall>k\\<in>set K.\n     timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c k\n  s \\<in> set T\n  Ana t = (K, T)\n\ngoal (1 subgoal):\n 1. timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c s", "by auto"], ["proof (state)\nthis:\n  timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c s\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  timpl_closure_set (set M) (set TI) \\<turnstile>\\<^sub>c s\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  analyzed_closed_mod_timpls' M TI \\<Longrightarrow>\n  \\<forall>t\\<in>timpl_closure_set (set M) (set TI).\n     analyzed_in t (timpl_closure_set (set M) (set TI))\n\ngoal (2 subgoals):\n 1. analyzed_closed_mod_timpls' M TI \\<Longrightarrow>\n    analyzed (timpl_closure_set (set M) (set TI))\n 2. analyzed (timpl_closure_set (set M) (set TI)) \\<Longrightarrow>\n    analyzed (timpl_closure_set (set M) (set TI))", "thus ?B when A: ?A"], ["proof (prove)\nusing this:\n  analyzed_closed_mod_timpls' M TI \\<Longrightarrow>\n  \\<forall>t\\<in>timpl_closure_set (set M) (set TI).\n     analyzed_in t (timpl_closure_set (set M) (set TI))\n\ngoal (1 subgoal):\n 1. analyzed (timpl_closure_set (set M) (set TI))", "using A analyzed_is_all_analyzed_in"], ["proof (prove)\nusing this:\n  analyzed_closed_mod_timpls' M TI \\<Longrightarrow>\n  \\<forall>t\\<in>timpl_closure_set (set M) (set TI).\n     analyzed_in t (timpl_closure_set (set M) (set TI))\n  analyzed_closed_mod_timpls' M TI\n  (\\<forall>t\\<in>?M. analyzed_in t ?M) = analyzed ?M\n\ngoal (1 subgoal):\n 1. analyzed (timpl_closure_set (set M) (set TI))", "by metis"], ["proof (state)\nthis:\n  analyzed_closed_mod_timpls' M TI \\<Longrightarrow>\n  analyzed (timpl_closure_set (set M) (set TI))\n\ngoal (2 subgoals):\n 1. analyzed_closed_mod_timpls' M TI \\<Longrightarrow>\n    analyzed_closed_mod_timpls' M TI\n 2. analyzed (timpl_closure_set (set M) (set TI)) \\<Longrightarrow>\n    analyzed (timpl_closure_set (set M) (set TI))", "qed"], ["", "end"], ["", "end"], ["", "end"]]}