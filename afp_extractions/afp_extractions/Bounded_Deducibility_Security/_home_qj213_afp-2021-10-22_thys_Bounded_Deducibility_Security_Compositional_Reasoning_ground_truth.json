{"file_name": "/home/qj213/afp-2021-10-22/thys/Bounded_Deducibility_Security/Compositional_Reasoning.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Bounded_Deducibility_Security", "problem_names": ["lemma disjAll_simps[simp]:\n  \"disjAll {} \\<equiv> \\<lambda>_ _ _ _. False\"\n  \"disjAll (insert \\<Delta> \\<Delta>s) \\<equiv> \\<lambda>s vl s1 vl1. \\<Delta> s vl s1 vl1 \\<or> disjAll \\<Delta>s s vl s1 vl1\"", "lemma iaction_mono:\nassumes 1: \"iaction \\<Delta> s vl s1 vl1\" and 2: \"\\<And> s vl s1 vl1. \\<Delta> s vl s1 vl1 \\<Longrightarrow> \\<Delta>' s vl s1 vl1\"\nshows \"iaction \\<Delta>' s vl s1 vl1\"", "lemma match_mono:\nassumes 1: \"match \\<Delta> s s1 vl1 a ou s' vl'\" and 2: \"\\<And> s vl s1 vl1. \\<Delta> s vl s1 vl1 \\<Longrightarrow> \\<Delta>' s vl s1 vl1\"\nshows \"match \\<Delta>' s s1 vl1 a ou s' vl'\"", "lemma ignore_mono:\nassumes 1: \"ignore \\<Delta> s s1 vl1 a ou s' vl'\" and 2: \"\\<And> s vl s1 vl1. \\<Delta> s vl s1 vl1 \\<Longrightarrow> \\<Delta>' s vl s1 vl1\"\nshows \"ignore \\<Delta>' s s1 vl1 a ou s' vl'\"", "lemma reaction_mono:\nassumes 1: \"reaction \\<Delta> s vl s1 vl1\" and 2: \"\\<And> s vl s1 vl1. \\<Delta> s vl s1 vl1 \\<Longrightarrow> \\<Delta>' s vl s1 vl1\"\nshows \"reaction \\<Delta>' s vl s1 vl1\"", "lemma unwind_toI[intro?]:\nassumes\n\"\\<And> s vl s1 vl1.\n   \\<lbrakk>reachNT s; reach s1; \\<Delta> s vl s1 vl1\\<rbrakk>\n   \\<Longrightarrow>\n   vl \\<noteq> [] \\<and> exit s (hd vl)\n   \\<or>\n   iaction (disjAll \\<Delta>s) s vl s1 vl1\n   \\<or>\n   (vl \\<noteq> [] \\<or> vl1 = []) \\<and> reaction (disjAll \\<Delta>s) s vl s1 vl1\"\nshows \"unwind_to \\<Delta> \\<Delta>s\"", "lemma unwind_dec:\nassumes ne: \"\\<And> \\<Delta>. \\<Delta> \\<in> \\<Delta>s \\<Longrightarrow> next \\<Delta> \\<subseteq> \\<Delta>s \\<and> unwind_to \\<Delta> (next \\<Delta>)\"\nshows \"unwind (disjAll \\<Delta>s)\" (is \"unwind ?\\<Delta>\")", "lemma init_dec:\nassumes \\<Delta>0: \"\\<Delta>0 \\<in> \\<Delta>s\"\nand i: \"\\<And> vl vl1. B vl vl1 \\<Longrightarrow> \\<Delta>0 istate vl istate vl1\"\nshows \"\\<forall> vl vl1. B vl vl1 \\<longrightarrow> disjAll \\<Delta>s istate vl istate vl1\"", "theorem unwind_dec_secure:\nassumes \\<Delta>0: \"\\<Delta>0 \\<in> \\<Delta>s\"\nand i: \"\\<And> vl vl1. B vl vl1 \\<Longrightarrow> \\<Delta>0 istate vl istate vl1\"\nand ne: \"\\<And> \\<Delta>. \\<Delta> \\<in> \\<Delta>s \\<Longrightarrow> next \\<Delta> \\<subseteq> \\<Delta>s \\<and> unwind_to \\<Delta> (next \\<Delta>)\"\nshows secure", "lemma unwind_contI[intro?]:\nassumes\n\"\\<And> s vl s1 vl1.\n   \\<lbrakk>reachNT s; reach s1; \\<Delta> s vl s1 vl1\\<rbrakk>\n   \\<Longrightarrow>\n   iaction (disjAll \\<Delta>s) s vl s1 vl1\n   \\<or>\n   ((vl \\<noteq> [] \\<or> vl1 = []) \\<and> reaction (disjAll \\<Delta>s) s vl s1 vl1)\"\nshows \"unwind_cont \\<Delta> \\<Delta>s\"", "lemma unwind_exitI[intro?]:\nassumes\n\"\\<And> s vl s1 vl1.\n   \\<lbrakk>reachNT s; reach s1; \\<Delta>e s vl s1 vl1\\<rbrakk>\n   \\<Longrightarrow>\n   vl \\<noteq> [] \\<and> exit s (hd vl)\"\nshows \"unwind_exit \\<Delta>e\"", "lemma set_allConsec:\nassumes \"\\<Delta> \\<in> set \\<Delta>s'\" and \"\\<Delta>s = \\<Delta>s' ## \\<Delta>1\"\nshows \"\\<exists> \\<Delta>2. (\\<Delta>,\\<Delta>2) \\<in> allConsec \\<Delta>s\"", "lemma allConsec_set:\nassumes \"(\\<Delta>1,\\<Delta>2) \\<in> allConsec \\<Delta>s\"\nshows \"\\<Delta>1 \\<in> set \\<Delta>s \\<and> \\<Delta>2 \\<in> set \\<Delta>s\"", "theorem unwind_decomp_secure:\nassumes n: \"\\<Delta>s \\<noteq> []\"\nand i: \"\\<And> vl vl1. B vl vl1 \\<Longrightarrow> hd \\<Delta>s istate vl istate vl1\"\nand c: \"\\<And> \\<Delta>1 \\<Delta>2. (\\<Delta>1,\\<Delta>2) \\<in> allConsec \\<Delta>s \\<Longrightarrow> unwind_cont \\<Delta>1 {\\<Delta>1, \\<Delta>2, \\<Delta>e}\"\nand l: \"unwind_cont (last \\<Delta>s) {last \\<Delta>s, \\<Delta>e}\"\nand e: \"unwind_exit \\<Delta>e\"\nshows secure"], "translations": [["", "lemma disjAll_simps[simp]:\n  \"disjAll {} \\<equiv> \\<lambda>_ _ _ _. False\"\n  \"disjAll (insert \\<Delta> \\<Delta>s) \\<equiv> \\<lambda>s vl s1 vl1. \\<Delta> s vl s1 vl1 \\<or> disjAll \\<Delta>s s vl s1 vl1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (disjAll {} \\<equiv> \\<lambda>_ _ _ _. False) &&&\n    disjAll (insert \\<Delta> \\<Delta>s) \\<equiv>\n    \\<lambda>s vl s1 vl1.\n       \\<Delta> s vl s1 vl1 \\<or> disjAll \\<Delta>s s vl s1 vl1", "unfolding disjAll_def[abs_def]"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>s vl s1 vl1.\n        \\<exists>\\<Delta>\\<in>{}. \\<Delta> s vl s1 vl1 \\<equiv>\n     \\<lambda>_ _ _ _. False) &&&\n    \\<lambda>s vl s1 vl1.\n       \\<exists>\\<Delta>\\<in>insert \\<Delta> \\<Delta>s.\n          \\<Delta> s vl s1 vl1 \\<equiv>\n    \\<lambda>s vl s1 vl1.\n       \\<Delta> s vl s1 vl1 \\<or>\n       (\\<exists>\\<Delta>\\<in>\\<Delta>s. \\<Delta> s vl s1 vl1)", "by auto"], ["", "lemma iaction_mono:\nassumes 1: \"iaction \\<Delta> s vl s1 vl1\" and 2: \"\\<And> s vl s1 vl1. \\<Delta> s vl s1 vl1 \\<Longrightarrow> \\<Delta>' s vl s1 vl1\"\nshows \"iaction \\<Delta>' s vl s1 vl1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. iaction \\<Delta>' s vl s1 vl1", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. iaction \\<Delta>' s vl s1 vl1", "obtain a1 ou1 s1' vl1'\n  where \"step s1 a1 = (ou1, s1')\" and \"\\<phi> (Trans s1 a1 ou1 s1')\"\n  and \"consume (Trans s1 a1 ou1 s1') vl1 vl1'\" and \"\\<not> \\<gamma> (Trans s1 a1 ou1 s1')\"\n  and \"\\<Delta> s vl s1' vl1'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>a1 ou1 s1' vl1'.\n        \\<lbrakk>step s1 a1 = (ou1, s1'); \\<phi> (Trans s1 a1 ou1 s1');\n         consume (Trans s1 a1 ou1 s1') vl1 vl1';\n         \\<not> \\<gamma> (Trans s1 a1 ou1 s1');\n         \\<Delta> s vl s1' vl1'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using 1"], ["proof (prove)\nusing this:\n  iaction \\<Delta> s vl s1 vl1\n\ngoal (1 subgoal):\n 1. (\\<And>a1 ou1 s1' vl1'.\n        \\<lbrakk>step s1 a1 = (ou1, s1'); \\<phi> (Trans s1 a1 ou1 s1');\n         consume (Trans s1 a1 ou1 s1') vl1 vl1';\n         \\<not> \\<gamma> (Trans s1 a1 ou1 s1');\n         \\<Delta> s vl s1' vl1'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding iaction_def"], ["proof (prove)\nusing this:\n  \\<exists>a1 ou1 s1' vl1'.\n     let trn1 = Trans s1 a1 ou1 s1'\n     in validTrans trn1 \\<and>\n        \\<phi> trn1 \\<and>\n        consume trn1 vl1 vl1' \\<and>\n        \\<not> \\<gamma> trn1 \\<and> \\<Delta> s vl s1' vl1'\n\ngoal (1 subgoal):\n 1. (\\<And>a1 ou1 s1' vl1'.\n        \\<lbrakk>step s1 a1 = (ou1, s1'); \\<phi> (Trans s1 a1 ou1 s1');\n         consume (Trans s1 a1 ou1 s1') vl1 vl1';\n         \\<not> \\<gamma> (Trans s1 a1 ou1 s1');\n         \\<Delta> s vl s1' vl1'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  step s1 a1 = (ou1, s1')\n  \\<phi> (Trans s1 a1 ou1 s1')\n  consume (Trans s1 a1 ou1 s1') vl1 vl1'\n  \\<not> \\<gamma> (Trans s1 a1 ou1 s1')\n  \\<Delta> s vl s1' vl1'\n\ngoal (1 subgoal):\n 1. iaction \\<Delta>' s vl s1 vl1", "thus ?thesis"], ["proof (prove)\nusing this:\n  step s1 a1 = (ou1, s1')\n  \\<phi> (Trans s1 a1 ou1 s1')\n  consume (Trans s1 a1 ou1 s1') vl1 vl1'\n  \\<not> \\<gamma> (Trans s1 a1 ou1 s1')\n  \\<Delta> s vl s1' vl1'\n\ngoal (1 subgoal):\n 1. iaction \\<Delta>' s vl s1 vl1", "unfolding iaction_def"], ["proof (prove)\nusing this:\n  step s1 a1 = (ou1, s1')\n  \\<phi> (Trans s1 a1 ou1 s1')\n  consume (Trans s1 a1 ou1 s1') vl1 vl1'\n  \\<not> \\<gamma> (Trans s1 a1 ou1 s1')\n  \\<Delta> s vl s1' vl1'\n\ngoal (1 subgoal):\n 1. \\<exists>a1 ou1 s1' vl1'.\n       let trn1 = Trans s1 a1 ou1 s1'\n       in validTrans trn1 \\<and>\n          \\<phi> trn1 \\<and>\n          consume trn1 vl1 vl1' \\<and>\n          \\<not> \\<gamma> trn1 \\<and> \\<Delta>' s vl s1' vl1'", "using 2"], ["proof (prove)\nusing this:\n  step s1 a1 = (ou1, s1')\n  \\<phi> (Trans s1 a1 ou1 s1')\n  consume (Trans s1 a1 ou1 s1') vl1 vl1'\n  \\<not> \\<gamma> (Trans s1 a1 ou1 s1')\n  \\<Delta> s vl s1' vl1'\n  \\<Delta> ?s3 ?vl3 ?s1.3 ?vl1.3 \\<Longrightarrow>\n  \\<Delta>' ?s3 ?vl3 ?s1.3 ?vl1.3\n\ngoal (1 subgoal):\n 1. \\<exists>a1 ou1 s1' vl1'.\n       let trn1 = Trans s1 a1 ou1 s1'\n       in validTrans trn1 \\<and>\n          \\<phi> trn1 \\<and>\n          consume trn1 vl1 vl1' \\<and>\n          \\<not> \\<gamma> trn1 \\<and> \\<Delta>' s vl s1' vl1'", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>step s1 a1 = (ou1, s1'); \\<phi> (Trans s1 a1 ou1 s1');\n     consume (Trans s1 a1 ou1 s1') vl1 vl1';\n     \\<not> \\<gamma> (Trans s1 a1 ou1 s1'); \\<Delta> s vl s1' vl1';\n     \\<And>s vl s1 vl1.\n        \\<Delta> s vl s1 vl1 \\<Longrightarrow>\n        \\<Delta>' s vl s1 vl1\\<rbrakk>\n    \\<Longrightarrow> \\<exists>a1 ou1 s1' vl1'.\n                         let trn1 = Trans s1 a1 ou1 s1'\n                         in validTrans trn1 \\<and>\n                            \\<phi> trn1 \\<and>\n                            consume trn1 vl1 vl1' \\<and>\n                            \\<not> \\<gamma> trn1 \\<and>\n                            \\<Delta>' s vl s1' vl1'", "by (rule exI[of _ a1], rule exI[of _ ou1], rule exI[of _ s1'], rule exI[of _ vl1']) auto"], ["proof (state)\nthis:\n  iaction \\<Delta>' s vl s1 vl1\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma match_mono:\nassumes 1: \"match \\<Delta> s s1 vl1 a ou s' vl'\" and 2: \"\\<And> s vl s1 vl1. \\<Delta> s vl s1 vl1 \\<Longrightarrow> \\<Delta>' s vl s1 vl1\"\nshows \"match \\<Delta>' s s1 vl1 a ou s' vl'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. match \\<Delta>' s s1 vl1 a ou s' vl'", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. match \\<Delta>' s s1 vl1 a ou s' vl'", "obtain a1 ou1 s1' vl1'\n  where \"\\<Delta> s' vl' s1' vl1'\"\n  and \"step s1 a1 = (ou1, s1')\"\n  and \"consume (Trans s1 a1 ou1 s1') vl1 vl1'\"\n  and \"\\<gamma> (Trans s a ou s') = \\<gamma> (Trans s1 a1 ou1 s1')\"\n  and \"(\\<gamma> (Trans s a ou s') \\<longrightarrow> g (Trans s a ou s') = g (Trans s1 a1 ou1 s1'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>s1' vl1' a1 ou1.\n        \\<lbrakk>\\<Delta> s' vl' s1' vl1'; step s1 a1 = (ou1, s1');\n         consume (Trans s1 a1 ou1 s1') vl1 vl1';\n         \\<gamma> (Trans s a ou s') = \\<gamma> (Trans s1 a1 ou1 s1');\n         \\<gamma> (Trans s a ou s') \\<longrightarrow>\n         g (Trans s a ou s') = g (Trans s1 a1 ou1 s1')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using 1"], ["proof (prove)\nusing this:\n  match \\<Delta> s s1 vl1 a ou s' vl'\n\ngoal (1 subgoal):\n 1. (\\<And>s1' vl1' a1 ou1.\n        \\<lbrakk>\\<Delta> s' vl' s1' vl1'; step s1 a1 = (ou1, s1');\n         consume (Trans s1 a1 ou1 s1') vl1 vl1';\n         \\<gamma> (Trans s a ou s') = \\<gamma> (Trans s1 a1 ou1 s1');\n         \\<gamma> (Trans s a ou s') \\<longrightarrow>\n         g (Trans s a ou s') = g (Trans s1 a1 ou1 s1')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding match_def"], ["proof (prove)\nusing this:\n  \\<exists>a1 ou1 s1' vl1'.\n     let trn = Trans s a ou s'; trn1 = Trans s1 a1 ou1 s1'\n     in validTrans trn1 \\<and>\n        consume trn1 vl1 vl1' \\<and>\n        \\<gamma> trn = \\<gamma> trn1 \\<and>\n        (\\<gamma> trn \\<longrightarrow> g trn = g trn1) \\<and>\n        \\<Delta> s' vl' s1' vl1'\n\ngoal (1 subgoal):\n 1. (\\<And>s1' vl1' a1 ou1.\n        \\<lbrakk>\\<Delta> s' vl' s1' vl1'; step s1 a1 = (ou1, s1');\n         consume (Trans s1 a1 ou1 s1') vl1 vl1';\n         \\<gamma> (Trans s a ou s') = \\<gamma> (Trans s1 a1 ou1 s1');\n         \\<gamma> (Trans s a ou s') \\<longrightarrow>\n         g (Trans s a ou s') = g (Trans s1 a1 ou1 s1')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  \\<Delta> s' vl' s1' vl1'\n  step s1 a1 = (ou1, s1')\n  consume (Trans s1 a1 ou1 s1') vl1 vl1'\n  \\<gamma> (Trans s a ou s') = \\<gamma> (Trans s1 a1 ou1 s1')\n  \\<gamma> (Trans s a ou s') \\<longrightarrow>\n  g (Trans s a ou s') = g (Trans s1 a1 ou1 s1')\n\ngoal (1 subgoal):\n 1. match \\<Delta>' s s1 vl1 a ou s' vl'", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<Delta> s' vl' s1' vl1'\n  step s1 a1 = (ou1, s1')\n  consume (Trans s1 a1 ou1 s1') vl1 vl1'\n  \\<gamma> (Trans s a ou s') = \\<gamma> (Trans s1 a1 ou1 s1')\n  \\<gamma> (Trans s a ou s') \\<longrightarrow>\n  g (Trans s a ou s') = g (Trans s1 a1 ou1 s1')\n\ngoal (1 subgoal):\n 1. match \\<Delta>' s s1 vl1 a ou s' vl'", "unfolding match_def"], ["proof (prove)\nusing this:\n  \\<Delta> s' vl' s1' vl1'\n  step s1 a1 = (ou1, s1')\n  consume (Trans s1 a1 ou1 s1') vl1 vl1'\n  \\<gamma> (Trans s a ou s') = \\<gamma> (Trans s1 a1 ou1 s1')\n  \\<gamma> (Trans s a ou s') \\<longrightarrow>\n  g (Trans s a ou s') = g (Trans s1 a1 ou1 s1')\n\ngoal (1 subgoal):\n 1. \\<exists>a1 ou1 s1' vl1'.\n       let trn = Trans s a ou s'; trn1 = Trans s1 a1 ou1 s1'\n       in validTrans trn1 \\<and>\n          consume trn1 vl1 vl1' \\<and>\n          \\<gamma> trn = \\<gamma> trn1 \\<and>\n          (\\<gamma> trn \\<longrightarrow> g trn = g trn1) \\<and>\n          \\<Delta>' s' vl' s1' vl1'", "using 2"], ["proof (prove)\nusing this:\n  \\<Delta> s' vl' s1' vl1'\n  step s1 a1 = (ou1, s1')\n  consume (Trans s1 a1 ou1 s1') vl1 vl1'\n  \\<gamma> (Trans s a ou s') = \\<gamma> (Trans s1 a1 ou1 s1')\n  \\<gamma> (Trans s a ou s') \\<longrightarrow>\n  g (Trans s a ou s') = g (Trans s1 a1 ou1 s1')\n  \\<Delta> ?s3 ?vl3 ?s1.3 ?vl1.3 \\<Longrightarrow>\n  \\<Delta>' ?s3 ?vl3 ?s1.3 ?vl1.3\n\ngoal (1 subgoal):\n 1. \\<exists>a1 ou1 s1' vl1'.\n       let trn = Trans s a ou s'; trn1 = Trans s1 a1 ou1 s1'\n       in validTrans trn1 \\<and>\n          consume trn1 vl1 vl1' \\<and>\n          \\<gamma> trn = \\<gamma> trn1 \\<and>\n          (\\<gamma> trn \\<longrightarrow> g trn = g trn1) \\<and>\n          \\<Delta>' s' vl' s1' vl1'", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<Delta> s' vl' s1' vl1'; step s1 a1 = (ou1, s1');\n     consume (Trans s1 a1 ou1 s1') vl1 vl1';\n     \\<gamma> (Trans s a ou s') = \\<gamma> (Trans s1 a1 ou1 s1');\n     \\<gamma> (Trans s a ou s') \\<longrightarrow>\n     g (Trans s a ou s') = g (Trans s1 a1 ou1 s1');\n     \\<And>s vl s1 vl1.\n        \\<Delta> s vl s1 vl1 \\<Longrightarrow>\n        \\<Delta>' s vl s1 vl1\\<rbrakk>\n    \\<Longrightarrow> \\<exists>a1 ou1 s1' vl1'.\n                         let trn = Trans s a ou s';\n                             trn1 = Trans s1 a1 ou1 s1'\n                         in validTrans trn1 \\<and>\n                            consume trn1 vl1 vl1' \\<and>\n                            \\<gamma> trn = \\<gamma> trn1 \\<and>\n                            (\\<gamma> trn \\<longrightarrow>\n                             g trn = g trn1) \\<and>\n                            \\<Delta>' s' vl' s1' vl1'", "by (rule exI[of _ a1], rule exI[of _ ou1], rule exI[of _ s1'], rule exI[of _ vl1']) auto"], ["proof (state)\nthis:\n  match \\<Delta>' s s1 vl1 a ou s' vl'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ignore_mono:\nassumes 1: \"ignore \\<Delta> s s1 vl1 a ou s' vl'\" and 2: \"\\<And> s vl s1 vl1. \\<Delta> s vl s1 vl1 \\<Longrightarrow> \\<Delta>' s vl s1 vl1\"\nshows \"ignore \\<Delta>' s s1 vl1 a ou s' vl'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ignore \\<Delta>' s s1 vl1 a ou s' vl'", "using assms"], ["proof (prove)\nusing this:\n  ignore \\<Delta> s s1 vl1 a ou s' vl'\n  \\<Delta> ?s3 ?vl3 ?s1.3 ?vl1.3 \\<Longrightarrow>\n  \\<Delta>' ?s3 ?vl3 ?s1.3 ?vl1.3\n\ngoal (1 subgoal):\n 1. ignore \\<Delta>' s s1 vl1 a ou s' vl'", "unfolding ignore_def"], ["proof (prove)\nusing this:\n  \\<not> \\<gamma> (Trans s a ou s') \\<and> \\<Delta> s' vl' s1 vl1\n  \\<Delta> ?s3 ?vl3 ?s1.3 ?vl1.3 \\<Longrightarrow>\n  \\<Delta>' ?s3 ?vl3 ?s1.3 ?vl1.3\n\ngoal (1 subgoal):\n 1. \\<not> \\<gamma> (Trans s a ou s') \\<and> \\<Delta>' s' vl' s1 vl1", "by auto"], ["", "lemma reaction_mono:\nassumes 1: \"reaction \\<Delta> s vl s1 vl1\" and 2: \"\\<And> s vl s1 vl1. \\<Delta> s vl s1 vl1 \\<Longrightarrow> \\<Delta>' s vl s1 vl1\"\nshows \"reaction \\<Delta>' s vl s1 vl1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. reaction \\<Delta>' s vl s1 vl1", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a ou s' vl'.\n       \\<lbrakk>step s a = (ou, s'); \\<not> T (Trans s a ou s');\n        consume (Trans s a ou s') vl vl'\\<rbrakk>\n       \\<Longrightarrow> match \\<Delta>' s s1 vl1 a ou s' vl' \\<or>\n                         ignore \\<Delta>' s s1 vl1 a ou s' vl'", "fix a ou s' vl'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a ou s' vl'.\n       \\<lbrakk>step s a = (ou, s'); \\<not> T (Trans s a ou s');\n        consume (Trans s a ou s') vl vl'\\<rbrakk>\n       \\<Longrightarrow> match \\<Delta>' s s1 vl1 a ou s' vl' \\<or>\n                         ignore \\<Delta>' s s1 vl1 a ou s' vl'", "assume \"step s a = (ou, s')\" and \"\\<not> T (Trans s a ou s')\" and \"consume (Trans s a ou s') vl vl'\""], ["proof (state)\nthis:\n  step s a = (ou, s')\n  \\<not> T (Trans s a ou s')\n  consume (Trans s a ou s') vl vl'\n\ngoal (1 subgoal):\n 1. \\<And>a ou s' vl'.\n       \\<lbrakk>step s a = (ou, s'); \\<not> T (Trans s a ou s');\n        consume (Trans s a ou s') vl vl'\\<rbrakk>\n       \\<Longrightarrow> match \\<Delta>' s s1 vl1 a ou s' vl' \\<or>\n                         ignore \\<Delta>' s s1 vl1 a ou s' vl'", "hence \"match \\<Delta> s s1 vl1 a ou s' vl' \\<or> ignore \\<Delta> s s1 vl1 a ou s' vl'\" (is \"?m \\<or> ?i\")"], ["proof (prove)\nusing this:\n  step s a = (ou, s')\n  \\<not> T (Trans s a ou s')\n  consume (Trans s a ou s') vl vl'\n\ngoal (1 subgoal):\n 1. match \\<Delta> s s1 vl1 a ou s' vl' \\<or>\n    ignore \\<Delta> s s1 vl1 a ou s' vl'", "using 1"], ["proof (prove)\nusing this:\n  step s a = (ou, s')\n  \\<not> T (Trans s a ou s')\n  consume (Trans s a ou s') vl vl'\n  reaction \\<Delta> s vl s1 vl1\n\ngoal (1 subgoal):\n 1. match \\<Delta> s s1 vl1 a ou s' vl' \\<or>\n    ignore \\<Delta> s s1 vl1 a ou s' vl'", "unfolding reaction_def"], ["proof (prove)\nusing this:\n  step s a = (ou, s')\n  \\<not> T (Trans s a ou s')\n  consume (Trans s a ou s') vl vl'\n  \\<forall>a ou s' vl'.\n     let trn = Trans s a ou s'\n     in validTrans trn \\<and>\n        \\<not> T trn \\<and> consume trn vl vl' \\<longrightarrow>\n        match \\<Delta> s s1 vl1 a ou s' vl' \\<or>\n        ignore \\<Delta> s s1 vl1 a ou s' vl'\n\ngoal (1 subgoal):\n 1. match \\<Delta> s s1 vl1 a ou s' vl' \\<or>\n    ignore \\<Delta> s s1 vl1 a ou s' vl'", "by auto"], ["proof (state)\nthis:\n  match \\<Delta> s s1 vl1 a ou s' vl' \\<or>\n  ignore \\<Delta> s s1 vl1 a ou s' vl'\n\ngoal (1 subgoal):\n 1. \\<And>a ou s' vl'.\n       \\<lbrakk>step s a = (ou, s'); \\<not> T (Trans s a ou s');\n        consume (Trans s a ou s') vl vl'\\<rbrakk>\n       \\<Longrightarrow> match \\<Delta>' s s1 vl1 a ou s' vl' \\<or>\n                         ignore \\<Delta>' s s1 vl1 a ou s' vl'", "thus \"match \\<Delta>' s s1 vl1 a ou s' vl' \\<or> ignore \\<Delta>' s s1 vl1 a ou s' vl'\" (is \"?m' \\<or> ?i'\")"], ["proof (prove)\nusing this:\n  match \\<Delta> s s1 vl1 a ou s' vl' \\<or>\n  ignore \\<Delta> s s1 vl1 a ou s' vl'\n\ngoal (1 subgoal):\n 1. match \\<Delta>' s s1 vl1 a ou s' vl' \\<or>\n    ignore \\<Delta>' s s1 vl1 a ou s' vl'", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. match \\<Delta> s s1 vl1 a ou s' vl' \\<Longrightarrow>\n    match \\<Delta>' s s1 vl1 a ou s' vl' \\<or>\n    ignore \\<Delta>' s s1 vl1 a ou s' vl'\n 2. ignore \\<Delta> s s1 vl1 a ou s' vl' \\<Longrightarrow>\n    match \\<Delta>' s s1 vl1 a ou s' vl' \\<or>\n    ignore \\<Delta>' s s1 vl1 a ou s' vl'", "assume ?m"], ["proof (state)\nthis:\n  match \\<Delta> s s1 vl1 a ou s' vl'\n\ngoal (2 subgoals):\n 1. match \\<Delta> s s1 vl1 a ou s' vl' \\<Longrightarrow>\n    match \\<Delta>' s s1 vl1 a ou s' vl' \\<or>\n    ignore \\<Delta>' s s1 vl1 a ou s' vl'\n 2. ignore \\<Delta> s s1 vl1 a ou s' vl' \\<Longrightarrow>\n    match \\<Delta>' s s1 vl1 a ou s' vl' \\<or>\n    ignore \\<Delta>' s s1 vl1 a ou s' vl'", "from match_mono[OF this 2]"], ["proof (chain)\npicking this:\n  (\\<And>s vl s1 vl1.\n      \\<Delta> s vl s1 vl1 \\<Longrightarrow>\n      \\<Delta> (?s4 s vl s1 vl1) (?vl4 s vl s1 vl1) (?s1.4 s vl s1 vl1)\n       (?vl1.4 s vl s1 vl1)) \\<Longrightarrow>\n  match\n   (\\<lambda>s vl s1 vl1.\n       \\<Delta>' (?s4 s vl s1 vl1) (?vl4 s vl s1 vl1) (?s1.4 s vl s1 vl1)\n        (?vl1.4 s vl s1 vl1))\n   s s1 vl1 a ou s' vl'", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<And>s vl s1 vl1.\n      \\<Delta> s vl s1 vl1 \\<Longrightarrow>\n      \\<Delta> (?s4 s vl s1 vl1) (?vl4 s vl s1 vl1) (?s1.4 s vl s1 vl1)\n       (?vl1.4 s vl s1 vl1)) \\<Longrightarrow>\n  match\n   (\\<lambda>s vl s1 vl1.\n       \\<Delta>' (?s4 s vl s1 vl1) (?vl4 s vl s1 vl1) (?s1.4 s vl s1 vl1)\n        (?vl1.4 s vl s1 vl1))\n   s s1 vl1 a ou s' vl'\n\ngoal (1 subgoal):\n 1. match \\<Delta>' s s1 vl1 a ou s' vl' \\<or>\n    ignore \\<Delta>' s s1 vl1 a ou s' vl'", "by simp"], ["proof (state)\nthis:\n  match \\<Delta>' s s1 vl1 a ou s' vl' \\<or>\n  ignore \\<Delta>' s s1 vl1 a ou s' vl'\n\ngoal (1 subgoal):\n 1. ignore \\<Delta> s s1 vl1 a ou s' vl' \\<Longrightarrow>\n    match \\<Delta>' s s1 vl1 a ou s' vl' \\<or>\n    ignore \\<Delta>' s s1 vl1 a ou s' vl'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. ignore \\<Delta> s s1 vl1 a ou s' vl' \\<Longrightarrow>\n    match \\<Delta>' s s1 vl1 a ou s' vl' \\<or>\n    ignore \\<Delta>' s s1 vl1 a ou s' vl'", "assume ?i"], ["proof (state)\nthis:\n  ignore \\<Delta> s s1 vl1 a ou s' vl'\n\ngoal (1 subgoal):\n 1. ignore \\<Delta> s s1 vl1 a ou s' vl' \\<Longrightarrow>\n    match \\<Delta>' s s1 vl1 a ou s' vl' \\<or>\n    ignore \\<Delta>' s s1 vl1 a ou s' vl'", "from ignore_mono[OF this 2]"], ["proof (chain)\npicking this:\n  (\\<And>s vl s1 vl1.\n      \\<Delta> s vl s1 vl1 \\<Longrightarrow>\n      \\<Delta> (?s4 s vl s1 vl1) (?vl4 s vl s1 vl1) (?s1.4 s vl s1 vl1)\n       (?vl1.4 s vl s1 vl1)) \\<Longrightarrow>\n  ignore\n   (\\<lambda>s vl s1 vl1.\n       \\<Delta>' (?s4 s vl s1 vl1) (?vl4 s vl s1 vl1) (?s1.4 s vl s1 vl1)\n        (?vl1.4 s vl s1 vl1))\n   s s1 vl1 a ou s' vl'", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<And>s vl s1 vl1.\n      \\<Delta> s vl s1 vl1 \\<Longrightarrow>\n      \\<Delta> (?s4 s vl s1 vl1) (?vl4 s vl s1 vl1) (?s1.4 s vl s1 vl1)\n       (?vl1.4 s vl s1 vl1)) \\<Longrightarrow>\n  ignore\n   (\\<lambda>s vl s1 vl1.\n       \\<Delta>' (?s4 s vl s1 vl1) (?vl4 s vl s1 vl1) (?s1.4 s vl s1 vl1)\n        (?vl1.4 s vl s1 vl1))\n   s s1 vl1 a ou s' vl'\n\ngoal (1 subgoal):\n 1. match \\<Delta>' s s1 vl1 a ou s' vl' \\<or>\n    ignore \\<Delta>' s s1 vl1 a ou s' vl'", "by simp"], ["proof (state)\nthis:\n  match \\<Delta>' s s1 vl1 a ou s' vl' \\<or>\n  ignore \\<Delta>' s s1 vl1 a ou s' vl'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  match \\<Delta>' s s1 vl1 a ou s' vl' \\<or>\n  ignore \\<Delta>' s s1 vl1 a ou s' vl'\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection\\<open>Decomposition into an arbitrary network of components\\<close>"], ["", "(* Unwind not to itself, but to a disjunction of other relations: *)"], ["", "definition unwind_to where\n\"unwind_to \\<Delta> \\<Delta>s \\<equiv>\n \\<forall> s vl s1 vl1.\n   reachNT s \\<and> reach s1 \\<and> \\<Delta> s vl s1 vl1\n   \\<longrightarrow>\n   vl \\<noteq> [] \\<and> exit s (hd vl)\n   \\<or>\n   iaction (disjAll \\<Delta>s) s vl s1 vl1\n   \\<or>\n   (vl \\<noteq> [] \\<or> vl1 = []) \\<and> reaction (disjAll \\<Delta>s) s vl s1 vl1\""], ["", "lemma unwind_toI[intro?]:\nassumes\n\"\\<And> s vl s1 vl1.\n   \\<lbrakk>reachNT s; reach s1; \\<Delta> s vl s1 vl1\\<rbrakk>\n   \\<Longrightarrow>\n   vl \\<noteq> [] \\<and> exit s (hd vl)\n   \\<or>\n   iaction (disjAll \\<Delta>s) s vl s1 vl1\n   \\<or>\n   (vl \\<noteq> [] \\<or> vl1 = []) \\<and> reaction (disjAll \\<Delta>s) s vl s1 vl1\"\nshows \"unwind_to \\<Delta> \\<Delta>s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. unwind_to \\<Delta> \\<Delta>s", "using assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>reachNT ?s3; reach ?s1.3; \\<Delta> ?s3 ?vl3 ?s1.3 ?vl1.3\\<rbrakk>\n  \\<Longrightarrow> ?vl3 \\<noteq> [] \\<and> exit ?s3 (hd ?vl3) \\<or>\n                    iaction (disjAll \\<Delta>s) ?s3 ?vl3 ?s1.3 ?vl1.3 \\<or>\n                    (?vl3 \\<noteq> [] \\<or> ?vl1.3 = []) \\<and>\n                    reaction (disjAll \\<Delta>s) ?s3 ?vl3 ?s1.3 ?vl1.3\n\ngoal (1 subgoal):\n 1. unwind_to \\<Delta> \\<Delta>s", "unfolding unwind_to_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>reachNT ?s3; reach ?s1.3; \\<Delta> ?s3 ?vl3 ?s1.3 ?vl1.3\\<rbrakk>\n  \\<Longrightarrow> ?vl3 \\<noteq> [] \\<and> exit ?s3 (hd ?vl3) \\<or>\n                    iaction (disjAll \\<Delta>s) ?s3 ?vl3 ?s1.3 ?vl1.3 \\<or>\n                    (?vl3 \\<noteq> [] \\<or> ?vl1.3 = []) \\<and>\n                    reaction (disjAll \\<Delta>s) ?s3 ?vl3 ?s1.3 ?vl1.3\n\ngoal (1 subgoal):\n 1. \\<forall>s vl s1 vl1.\n       reachNT s \\<and>\n       reach s1 \\<and> \\<Delta> s vl s1 vl1 \\<longrightarrow>\n       vl \\<noteq> [] \\<and> exit s (hd vl) \\<or>\n       iaction (disjAll \\<Delta>s) s vl s1 vl1 \\<or>\n       (vl \\<noteq> [] \\<or> vl1 = []) \\<and>\n       reaction (disjAll \\<Delta>s) s vl s1 vl1", "by auto"], ["", "(* Decomposition: *)"], ["", "lemma unwind_dec:\nassumes ne: \"\\<And> \\<Delta>. \\<Delta> \\<in> \\<Delta>s \\<Longrightarrow> next \\<Delta> \\<subseteq> \\<Delta>s \\<and> unwind_to \\<Delta> (next \\<Delta>)\"\nshows \"unwind (disjAll \\<Delta>s)\" (is \"unwind ?\\<Delta>\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. unwind (disjAll \\<Delta>s)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s vl s1 vl1.\n       \\<lbrakk>reachNT s; reach s1; disjAll \\<Delta>s s vl s1 vl1\\<rbrakk>\n       \\<Longrightarrow> vl \\<noteq> [] \\<and> exit s (hd vl) \\<or>\n                         iaction (disjAll \\<Delta>s) s vl s1 vl1 \\<or>\n                         (vl \\<noteq> [] \\<or> vl1 = []) \\<and>\n                         reaction (disjAll \\<Delta>s) s vl s1 vl1", "fix s s1 :: 'state and vl vl1 :: \"'value list\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s vl s1 vl1.\n       \\<lbrakk>reachNT s; reach s1; disjAll \\<Delta>s s vl s1 vl1\\<rbrakk>\n       \\<Longrightarrow> vl \\<noteq> [] \\<and> exit s (hd vl) \\<or>\n                         iaction (disjAll \\<Delta>s) s vl s1 vl1 \\<or>\n                         (vl \\<noteq> [] \\<or> vl1 = []) \\<and>\n                         reaction (disjAll \\<Delta>s) s vl s1 vl1", "assume r: \"reachNT s\" \"reach s1\" and \\<Delta>: \"?\\<Delta> s vl s1 vl1\""], ["proof (state)\nthis:\n  reachNT s\n  reach s1\n  disjAll \\<Delta>s s vl s1 vl1\n\ngoal (1 subgoal):\n 1. \\<And>s vl s1 vl1.\n       \\<lbrakk>reachNT s; reach s1; disjAll \\<Delta>s s vl s1 vl1\\<rbrakk>\n       \\<Longrightarrow> vl \\<noteq> [] \\<and> exit s (hd vl) \\<or>\n                         iaction (disjAll \\<Delta>s) s vl s1 vl1 \\<or>\n                         (vl \\<noteq> [] \\<or> vl1 = []) \\<and>\n                         reaction (disjAll \\<Delta>s) s vl s1 vl1", "then"], ["proof (chain)\npicking this:\n  reachNT s\n  reach s1\n  disjAll \\<Delta>s s vl s1 vl1", "obtain \\<Delta> where \\<Delta>: \"\\<Delta> \\<in> \\<Delta>s\" and 2: \"\\<Delta> s vl s1 vl1\""], ["proof (prove)\nusing this:\n  reachNT s\n  reach s1\n  disjAll \\<Delta>s s vl s1 vl1\n\ngoal (1 subgoal):\n 1. (\\<And>\\<Delta>.\n        \\<lbrakk>\\<Delta> \\<in> \\<Delta>s; \\<Delta> s vl s1 vl1\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding disjAll_def"], ["proof (prove)\nusing this:\n  reachNT s\n  reach s1\n  \\<exists>\\<Delta>\\<in>\\<Delta>s. \\<Delta> s vl s1 vl1\n\ngoal (1 subgoal):\n 1. (\\<And>\\<Delta>.\n        \\<lbrakk>\\<Delta> \\<in> \\<Delta>s; \\<Delta> s vl s1 vl1\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  \\<Delta> \\<in> \\<Delta>s\n  \\<Delta> s vl s1 vl1\n\ngoal (1 subgoal):\n 1. \\<And>s vl s1 vl1.\n       \\<lbrakk>reachNT s; reach s1; disjAll \\<Delta>s s vl s1 vl1\\<rbrakk>\n       \\<Longrightarrow> vl \\<noteq> [] \\<and> exit s (hd vl) \\<or>\n                         iaction (disjAll \\<Delta>s) s vl s1 vl1 \\<or>\n                         (vl \\<noteq> [] \\<or> vl1 = []) \\<and>\n                         reaction (disjAll \\<Delta>s) s vl s1 vl1", "let ?\\<Delta>s' = \"next \\<Delta>\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s vl s1 vl1.\n       \\<lbrakk>reachNT s; reach s1; disjAll \\<Delta>s s vl s1 vl1\\<rbrakk>\n       \\<Longrightarrow> vl \\<noteq> [] \\<and> exit s (hd vl) \\<or>\n                         iaction (disjAll \\<Delta>s) s vl s1 vl1 \\<or>\n                         (vl \\<noteq> [] \\<or> vl1 = []) \\<and>\n                         reaction (disjAll \\<Delta>s) s vl s1 vl1", "let ?\\<Delta>' = \"disjAll ?\\<Delta>s'\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s vl s1 vl1.\n       \\<lbrakk>reachNT s; reach s1; disjAll \\<Delta>s s vl s1 vl1\\<rbrakk>\n       \\<Longrightarrow> vl \\<noteq> [] \\<and> exit s (hd vl) \\<or>\n                         iaction (disjAll \\<Delta>s) s vl s1 vl1 \\<or>\n                         (vl \\<noteq> [] \\<or> vl1 = []) \\<and>\n                         reaction (disjAll \\<Delta>s) s vl s1 vl1", "have \"(vl \\<noteq> [] \\<and> exit s (hd vl)) \\<or>\n        iaction ?\\<Delta>' s vl s1 vl1 \\<or>\n        ((vl \\<noteq> [] \\<or> vl1 = []) \\<and> reaction ?\\<Delta>' s vl s1 vl1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vl \\<noteq> [] \\<and> exit s (hd vl) \\<or>\n    iaction (disjAll (next \\<Delta>)) s vl s1 vl1 \\<or>\n    (vl \\<noteq> [] \\<or> vl1 = []) \\<and>\n    reaction (disjAll (next \\<Delta>)) s vl s1 vl1", "using 2 \\<Delta> ne r"], ["proof (prove)\nusing this:\n  \\<Delta> s vl s1 vl1\n  \\<Delta> \\<in> \\<Delta>s\n  ?\\<Delta>3 \\<in> \\<Delta>s \\<Longrightarrow>\n  next ?\\<Delta>3 \\<subseteq> \\<Delta>s \\<and>\n  unwind_to ?\\<Delta>3 (next ?\\<Delta>3)\n  reachNT s\n  reach s1\n\ngoal (1 subgoal):\n 1. vl \\<noteq> [] \\<and> exit s (hd vl) \\<or>\n    iaction (disjAll (next \\<Delta>)) s vl s1 vl1 \\<or>\n    (vl \\<noteq> [] \\<or> vl1 = []) \\<and>\n    reaction (disjAll (next \\<Delta>)) s vl s1 vl1", "unfolding unwind_to_def"], ["proof (prove)\nusing this:\n  \\<Delta> s vl s1 vl1\n  \\<Delta> \\<in> \\<Delta>s\n  ?\\<Delta>3 \\<in> \\<Delta>s \\<Longrightarrow>\n  next ?\\<Delta>3 \\<subseteq> \\<Delta>s \\<and>\n  (\\<forall>s vl s1 vl1.\n      reachNT s \\<and>\n      reach s1 \\<and> ?\\<Delta>3 s vl s1 vl1 \\<longrightarrow>\n      vl \\<noteq> [] \\<and> exit s (hd vl) \\<or>\n      iaction (disjAll (next ?\\<Delta>3)) s vl s1 vl1 \\<or>\n      (vl \\<noteq> [] \\<or> vl1 = []) \\<and>\n      reaction (disjAll (next ?\\<Delta>3)) s vl s1 vl1)\n  reachNT s\n  reach s1\n\ngoal (1 subgoal):\n 1. vl \\<noteq> [] \\<and> exit s (hd vl) \\<or>\n    iaction (disjAll (next \\<Delta>)) s vl s1 vl1 \\<or>\n    (vl \\<noteq> [] \\<or> vl1 = []) \\<and>\n    reaction (disjAll (next \\<Delta>)) s vl s1 vl1", "by auto"], ["proof (state)\nthis:\n  vl \\<noteq> [] \\<and> exit s (hd vl) \\<or>\n  iaction (disjAll (next \\<Delta>)) s vl s1 vl1 \\<or>\n  (vl \\<noteq> [] \\<or> vl1 = []) \\<and>\n  reaction (disjAll (next \\<Delta>)) s vl s1 vl1\n\ngoal (1 subgoal):\n 1. \\<And>s vl s1 vl1.\n       \\<lbrakk>reachNT s; reach s1; disjAll \\<Delta>s s vl s1 vl1\\<rbrakk>\n       \\<Longrightarrow> vl \\<noteq> [] \\<and> exit s (hd vl) \\<or>\n                         iaction (disjAll \\<Delta>s) s vl s1 vl1 \\<or>\n                         (vl \\<noteq> [] \\<or> vl1 = []) \\<and>\n                         reaction (disjAll \\<Delta>s) s vl s1 vl1", "moreover"], ["proof (state)\nthis:\n  vl \\<noteq> [] \\<and> exit s (hd vl) \\<or>\n  iaction (disjAll (next \\<Delta>)) s vl s1 vl1 \\<or>\n  (vl \\<noteq> [] \\<or> vl1 = []) \\<and>\n  reaction (disjAll (next \\<Delta>)) s vl s1 vl1\n\ngoal (1 subgoal):\n 1. \\<And>s vl s1 vl1.\n       \\<lbrakk>reachNT s; reach s1; disjAll \\<Delta>s s vl s1 vl1\\<rbrakk>\n       \\<Longrightarrow> vl \\<noteq> [] \\<and> exit s (hd vl) \\<or>\n                         iaction (disjAll \\<Delta>s) s vl s1 vl1 \\<or>\n                         (vl \\<noteq> [] \\<or> vl1 = []) \\<and>\n                         reaction (disjAll \\<Delta>s) s vl s1 vl1", "have \"\\<And> s vl s1 vl1. ?\\<Delta>' s vl s1 vl1 \\<Longrightarrow> ?\\<Delta> s vl s1 vl1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s vl s1 vl1.\n       disjAll (next \\<Delta>) s vl s1 vl1 \\<Longrightarrow>\n       disjAll \\<Delta>s s vl s1 vl1", "using ne[OF \\<Delta>]"], ["proof (prove)\nusing this:\n  next \\<Delta> \\<subseteq> \\<Delta>s \\<and>\n  unwind_to \\<Delta> (next \\<Delta>)\n\ngoal (1 subgoal):\n 1. \\<And>s vl s1 vl1.\n       disjAll (next \\<Delta>) s vl s1 vl1 \\<Longrightarrow>\n       disjAll \\<Delta>s s vl s1 vl1", "unfolding disjAll_def"], ["proof (prove)\nusing this:\n  next \\<Delta> \\<subseteq> \\<Delta>s \\<and>\n  unwind_to \\<Delta> (next \\<Delta>)\n\ngoal (1 subgoal):\n 1. \\<And>s vl s1 vl1.\n       \\<exists>\\<Delta>\\<in>next \\<Delta>.\n          \\<Delta> s vl s1 vl1 \\<Longrightarrow>\n       \\<exists>\\<Delta>\\<in>\\<Delta>s. \\<Delta> s vl s1 vl1", "by auto"], ["proof (state)\nthis:\n  disjAll (next \\<Delta>) ?s3 ?vl3 ?s1.3 ?vl1.3 \\<Longrightarrow>\n  disjAll \\<Delta>s ?s3 ?vl3 ?s1.3 ?vl1.3\n\ngoal (1 subgoal):\n 1. \\<And>s vl s1 vl1.\n       \\<lbrakk>reachNT s; reach s1; disjAll \\<Delta>s s vl s1 vl1\\<rbrakk>\n       \\<Longrightarrow> vl \\<noteq> [] \\<and> exit s (hd vl) \\<or>\n                         iaction (disjAll \\<Delta>s) s vl s1 vl1 \\<or>\n                         (vl \\<noteq> [] \\<or> vl1 = []) \\<and>\n                         reaction (disjAll \\<Delta>s) s vl s1 vl1", "ultimately"], ["proof (chain)\npicking this:\n  vl \\<noteq> [] \\<and> exit s (hd vl) \\<or>\n  iaction (disjAll (next \\<Delta>)) s vl s1 vl1 \\<or>\n  (vl \\<noteq> [] \\<or> vl1 = []) \\<and>\n  reaction (disjAll (next \\<Delta>)) s vl s1 vl1\n  disjAll (next \\<Delta>) ?s3 ?vl3 ?s1.3 ?vl1.3 \\<Longrightarrow>\n  disjAll \\<Delta>s ?s3 ?vl3 ?s1.3 ?vl1.3", "show\n       \"(vl \\<noteq> [] \\<and> exit s (hd vl)) \\<or>\n        iaction ?\\<Delta> s vl s1 vl1 \\<or>\n        ((vl \\<noteq> [] \\<or> vl1 = []) \\<and> reaction ?\\<Delta> s vl s1 vl1)\""], ["proof (prove)\nusing this:\n  vl \\<noteq> [] \\<and> exit s (hd vl) \\<or>\n  iaction (disjAll (next \\<Delta>)) s vl s1 vl1 \\<or>\n  (vl \\<noteq> [] \\<or> vl1 = []) \\<and>\n  reaction (disjAll (next \\<Delta>)) s vl s1 vl1\n  disjAll (next \\<Delta>) ?s3 ?vl3 ?s1.3 ?vl1.3 \\<Longrightarrow>\n  disjAll \\<Delta>s ?s3 ?vl3 ?s1.3 ?vl1.3\n\ngoal (1 subgoal):\n 1. vl \\<noteq> [] \\<and> exit s (hd vl) \\<or>\n    iaction (disjAll \\<Delta>s) s vl s1 vl1 \\<or>\n    (vl \\<noteq> [] \\<or> vl1 = []) \\<and>\n    reaction (disjAll \\<Delta>s) s vl s1 vl1", "using iaction_mono[of ?\\<Delta>' _ _ _ _ ?\\<Delta>] reaction_mono[of ?\\<Delta>' _ _ _ _ ?\\<Delta>]"], ["proof (prove)\nusing this:\n  vl \\<noteq> [] \\<and> exit s (hd vl) \\<or>\n  iaction (disjAll (next \\<Delta>)) s vl s1 vl1 \\<or>\n  (vl \\<noteq> [] \\<or> vl1 = []) \\<and>\n  reaction (disjAll (next \\<Delta>)) s vl s1 vl1\n  disjAll (next \\<Delta>) ?s3 ?vl3 ?s1.3 ?vl1.3 \\<Longrightarrow>\n  disjAll \\<Delta>s ?s3 ?vl3 ?s1.3 ?vl1.3\n  \\<lbrakk>iaction (disjAll (next \\<Delta>)) ?s ?vl ?s1.0 ?vl1.0;\n   \\<And>s vl s1 vl1.\n      disjAll (next \\<Delta>) s vl s1 vl1 \\<Longrightarrow>\n      disjAll \\<Delta>s s vl s1 vl1\\<rbrakk>\n  \\<Longrightarrow> iaction (disjAll \\<Delta>s) ?s ?vl ?s1.0 ?vl1.0\n  \\<lbrakk>reaction (disjAll (next \\<Delta>)) ?s ?vl ?s1.0 ?vl1.0;\n   \\<And>s vl s1 vl1.\n      disjAll (next \\<Delta>) s vl s1 vl1 \\<Longrightarrow>\n      disjAll \\<Delta>s s vl s1 vl1\\<rbrakk>\n  \\<Longrightarrow> reaction (disjAll \\<Delta>s) ?s ?vl ?s1.0 ?vl1.0\n\ngoal (1 subgoal):\n 1. vl \\<noteq> [] \\<and> exit s (hd vl) \\<or>\n    iaction (disjAll \\<Delta>s) s vl s1 vl1 \\<or>\n    (vl \\<noteq> [] \\<or> vl1 = []) \\<and>\n    reaction (disjAll \\<Delta>s) s vl s1 vl1", "by blast"], ["proof (state)\nthis:\n  vl \\<noteq> [] \\<and> exit s (hd vl) \\<or>\n  iaction (disjAll \\<Delta>s) s vl s1 vl1 \\<or>\n  (vl \\<noteq> [] \\<or> vl1 = []) \\<and>\n  reaction (disjAll \\<Delta>s) s vl s1 vl1\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma init_dec:\nassumes \\<Delta>0: \"\\<Delta>0 \\<in> \\<Delta>s\"\nand i: \"\\<And> vl vl1. B vl vl1 \\<Longrightarrow> \\<Delta>0 istate vl istate vl1\"\nshows \"\\<forall> vl vl1. B vl vl1 \\<longrightarrow> disjAll \\<Delta>s istate vl istate vl1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>vl vl1.\n       B vl vl1 \\<longrightarrow> disjAll \\<Delta>s istate vl istate vl1", "using assms"], ["proof (prove)\nusing this:\n  \\<Delta>0 \\<in> \\<Delta>s\n  B ?vl3 ?vl1.3 \\<Longrightarrow> \\<Delta>0 istate ?vl3 istate ?vl1.3\n\ngoal (1 subgoal):\n 1. \\<forall>vl vl1.\n       B vl vl1 \\<longrightarrow> disjAll \\<Delta>s istate vl istate vl1", "unfolding disjAll_def"], ["proof (prove)\nusing this:\n  \\<Delta>0 \\<in> \\<Delta>s\n  B ?vl3 ?vl1.3 \\<Longrightarrow> \\<Delta>0 istate ?vl3 istate ?vl1.3\n\ngoal (1 subgoal):\n 1. \\<forall>vl vl1.\n       B vl vl1 \\<longrightarrow>\n       (\\<exists>\\<Delta>\\<in>\\<Delta>s. \\<Delta> istate vl istate vl1)", "by auto"], ["", "theorem unwind_dec_secure:\nassumes \\<Delta>0: \"\\<Delta>0 \\<in> \\<Delta>s\"\nand i: \"\\<And> vl vl1. B vl vl1 \\<Longrightarrow> \\<Delta>0 istate vl istate vl1\"\nand ne: \"\\<And> \\<Delta>. \\<Delta> \\<in> \\<Delta>s \\<Longrightarrow> next \\<Delta> \\<subseteq> \\<Delta>s \\<and> unwind_to \\<Delta> (next \\<Delta>)\"\nshows secure"], ["proof (prove)\ngoal (1 subgoal):\n 1. secure", "using init_dec[OF \\<Delta>0 i] unwind_dec[OF ne] unwind_secure"], ["proof (prove)\nusing this:\n  (\\<And>vl vl1. B vl vl1 \\<Longrightarrow> B vl vl1) \\<Longrightarrow>\n  \\<forall>vl vl1.\n     B vl vl1 \\<longrightarrow> disjAll \\<Delta>s istate vl istate vl1\n  (\\<And>\\<Delta>.\n      \\<Delta> \\<in> \\<Delta>s \\<Longrightarrow>\n      \\<Delta> \\<in> \\<Delta>s) \\<Longrightarrow>\n  unwind (disjAll \\<Delta>s)\n  \\<lbrakk>\\<And>vl vl1.\n              B vl vl1 \\<Longrightarrow> ?\\<Delta> istate vl istate vl1;\n   unwind ?\\<Delta>\\<rbrakk>\n  \\<Longrightarrow> secure\n\ngoal (1 subgoal):\n 1. secure", "by metis"], ["", "subsection\\<open>A customization for linear modular reasoning\\<close>"], ["", "(* The customization assumes that each component unwinds only into itself,\nits successor or an exit component.  *)"], ["", "definition unwind_cont where\n\"unwind_cont \\<Delta> \\<Delta>s \\<equiv>\n \\<forall> s vl s1 vl1.\n   reachNT s \\<and> reach s1 \\<and> \\<Delta> s vl s1 vl1\n   \\<longrightarrow>\n   iaction (disjAll \\<Delta>s) s vl s1 vl1\n   \\<or>\n   ((vl \\<noteq> [] \\<or> vl1 = []) \\<and> reaction (disjAll \\<Delta>s) s vl s1 vl1)\""], ["", "lemma unwind_contI[intro?]:\nassumes\n\"\\<And> s vl s1 vl1.\n   \\<lbrakk>reachNT s; reach s1; \\<Delta> s vl s1 vl1\\<rbrakk>\n   \\<Longrightarrow>\n   iaction (disjAll \\<Delta>s) s vl s1 vl1\n   \\<or>\n   ((vl \\<noteq> [] \\<or> vl1 = []) \\<and> reaction (disjAll \\<Delta>s) s vl s1 vl1)\"\nshows \"unwind_cont \\<Delta> \\<Delta>s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. unwind_cont \\<Delta> \\<Delta>s", "using assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>reachNT ?s3; reach ?s1.3; \\<Delta> ?s3 ?vl3 ?s1.3 ?vl1.3\\<rbrakk>\n  \\<Longrightarrow> iaction (disjAll \\<Delta>s) ?s3 ?vl3 ?s1.3 ?vl1.3 \\<or>\n                    (?vl3 \\<noteq> [] \\<or> ?vl1.3 = []) \\<and>\n                    reaction (disjAll \\<Delta>s) ?s3 ?vl3 ?s1.3 ?vl1.3\n\ngoal (1 subgoal):\n 1. unwind_cont \\<Delta> \\<Delta>s", "unfolding unwind_cont_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>reachNT ?s3; reach ?s1.3; \\<Delta> ?s3 ?vl3 ?s1.3 ?vl1.3\\<rbrakk>\n  \\<Longrightarrow> iaction (disjAll \\<Delta>s) ?s3 ?vl3 ?s1.3 ?vl1.3 \\<or>\n                    (?vl3 \\<noteq> [] \\<or> ?vl1.3 = []) \\<and>\n                    reaction (disjAll \\<Delta>s) ?s3 ?vl3 ?s1.3 ?vl1.3\n\ngoal (1 subgoal):\n 1. \\<forall>s vl s1 vl1.\n       reachNT s \\<and>\n       reach s1 \\<and> \\<Delta> s vl s1 vl1 \\<longrightarrow>\n       iaction (disjAll \\<Delta>s) s vl s1 vl1 \\<or>\n       (vl \\<noteq> [] \\<or> vl1 = []) \\<and>\n       reaction (disjAll \\<Delta>s) s vl s1 vl1", "by auto"], ["", "definition unwind_exit where\n\"unwind_exit \\<Delta>e \\<equiv>\n \\<forall> s vl s1 vl1.\n   reachNT s \\<and> reach s1 \\<and> \\<Delta>e s vl s1 vl1\n   \\<longrightarrow>\n   vl \\<noteq> [] \\<and> exit s (hd vl)\""], ["", "lemma unwind_exitI[intro?]:\nassumes\n\"\\<And> s vl s1 vl1.\n   \\<lbrakk>reachNT s; reach s1; \\<Delta>e s vl s1 vl1\\<rbrakk>\n   \\<Longrightarrow>\n   vl \\<noteq> [] \\<and> exit s (hd vl)\"\nshows \"unwind_exit \\<Delta>e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. unwind_exit \\<Delta>e", "using assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>reachNT ?s4; reach ?s1.4;\n   \\<Delta>e ?s4 ?vl4 ?s1.4 ?vl1.4\\<rbrakk>\n  \\<Longrightarrow> ?vl4 \\<noteq> [] \\<and> exit ?s4 (hd ?vl4)\n\ngoal (1 subgoal):\n 1. unwind_exit \\<Delta>e", "unfolding unwind_exit_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>reachNT ?s4; reach ?s1.4;\n   \\<Delta>e ?s4 ?vl4 ?s1.4 ?vl1.4\\<rbrakk>\n  \\<Longrightarrow> ?vl4 \\<noteq> [] \\<and> exit ?s4 (hd ?vl4)\n\ngoal (1 subgoal):\n 1. \\<forall>s vl s1 vl1.\n       reachNT s \\<and>\n       reach s1 \\<and> \\<Delta>e s vl s1 vl1 \\<longrightarrow>\n       vl \\<noteq> [] \\<and> exit s (hd vl)", "by auto"], ["", "fun allConsec :: \"'a list \\<Rightarrow> ('a * 'a) set\" where\n  \"allConsec [] = {}\"\n| \"allConsec [a] = {}\"\n| \"allConsec (a # b # as) = insert (a,b) (allConsec (b#as))\""], ["", "lemma set_allConsec:\nassumes \"\\<Delta> \\<in> set \\<Delta>s'\" and \"\\<Delta>s = \\<Delta>s' ## \\<Delta>1\"\nshows \"\\<exists> \\<Delta>2. (\\<Delta>,\\<Delta>2) \\<in> allConsec \\<Delta>s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>\\<Delta>2. (\\<Delta>, \\<Delta>2) \\<in> allConsec \\<Delta>s", "using assms"], ["proof (prove)\nusing this:\n  \\<Delta> \\<in> set \\<Delta>s'\n  \\<Delta>s = \\<Delta>s' ## \\<Delta>1\n\ngoal (1 subgoal):\n 1. \\<exists>\\<Delta>2. (\\<Delta>, \\<Delta>2) \\<in> allConsec \\<Delta>s", "proof (induction \\<Delta>s' arbitrary: \\<Delta>s)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>\\<Delta>s.\n       \\<lbrakk>\\<Delta> \\<in> set []; \\<Delta>s = [] ## \\<Delta>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<Delta>2.\n                            (\\<Delta>, \\<Delta>2) \\<in> allConsec \\<Delta>s\n 2. \\<And>a \\<Delta>s' \\<Delta>s.\n       \\<lbrakk>\\<And>\\<Delta>s.\n                   \\<lbrakk>\\<Delta> \\<in> set \\<Delta>s';\n                    \\<Delta>s = \\<Delta>s' ## \\<Delta>1\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<Delta>2.\n  (\\<Delta>, \\<Delta>2) \\<in> allConsec \\<Delta>s;\n        \\<Delta> \\<in> set (a # \\<Delta>s');\n        \\<Delta>s = (a # \\<Delta>s') ## \\<Delta>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<Delta>2.\n                            (\\<Delta>, \\<Delta>2) \\<in> allConsec \\<Delta>s", "case Nil"], ["proof (state)\nthis:\n  \\<Delta> \\<in> set []\n  \\<Delta>s = [] ## \\<Delta>1\n\ngoal (2 subgoals):\n 1. \\<And>\\<Delta>s.\n       \\<lbrakk>\\<Delta> \\<in> set []; \\<Delta>s = [] ## \\<Delta>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<Delta>2.\n                            (\\<Delta>, \\<Delta>2) \\<in> allConsec \\<Delta>s\n 2. \\<And>a \\<Delta>s' \\<Delta>s.\n       \\<lbrakk>\\<And>\\<Delta>s.\n                   \\<lbrakk>\\<Delta> \\<in> set \\<Delta>s';\n                    \\<Delta>s = \\<Delta>s' ## \\<Delta>1\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<Delta>2.\n  (\\<Delta>, \\<Delta>2) \\<in> allConsec \\<Delta>s;\n        \\<Delta> \\<in> set (a # \\<Delta>s');\n        \\<Delta>s = (a # \\<Delta>s') ## \\<Delta>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<Delta>2.\n                            (\\<Delta>, \\<Delta>2) \\<in> allConsec \\<Delta>s", "thus ?case"], ["proof (prove)\nusing this:\n  \\<Delta> \\<in> set []\n  \\<Delta>s = [] ## \\<Delta>1\n\ngoal (1 subgoal):\n 1. \\<exists>\\<Delta>2. (\\<Delta>, \\<Delta>2) \\<in> allConsec \\<Delta>s", "by auto"], ["proof (state)\nthis:\n  \\<exists>\\<Delta>2. (\\<Delta>, \\<Delta>2) \\<in> allConsec \\<Delta>s\n\ngoal (1 subgoal):\n 1. \\<And>a \\<Delta>s' \\<Delta>s.\n       \\<lbrakk>\\<And>\\<Delta>s.\n                   \\<lbrakk>\\<Delta> \\<in> set \\<Delta>s';\n                    \\<Delta>s = \\<Delta>s' ## \\<Delta>1\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<Delta>2.\n  (\\<Delta>, \\<Delta>2) \\<in> allConsec \\<Delta>s;\n        \\<Delta> \\<in> set (a # \\<Delta>s');\n        \\<Delta>s = (a # \\<Delta>s') ## \\<Delta>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<Delta>2.\n                            (\\<Delta>, \\<Delta>2) \\<in> allConsec \\<Delta>s", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a \\<Delta>s' \\<Delta>s.\n       \\<lbrakk>\\<And>\\<Delta>s.\n                   \\<lbrakk>\\<Delta> \\<in> set \\<Delta>s';\n                    \\<Delta>s = \\<Delta>s' ## \\<Delta>1\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<Delta>2.\n  (\\<Delta>, \\<Delta>2) \\<in> allConsec \\<Delta>s;\n        \\<Delta> \\<in> set (a # \\<Delta>s');\n        \\<Delta>s = (a # \\<Delta>s') ## \\<Delta>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<Delta>2.\n                            (\\<Delta>, \\<Delta>2) \\<in> allConsec \\<Delta>s", "case (Cons \\<Delta>3 \\<Delta>s' \\<Delta>s)"], ["proof (state)\nthis:\n  \\<lbrakk>\\<Delta> \\<in> set \\<Delta>s';\n   ?\\<Delta>s4 = \\<Delta>s' ## \\<Delta>1\\<rbrakk>\n  \\<Longrightarrow> \\<exists>\\<Delta>2.\n                       (\\<Delta>, \\<Delta>2) \\<in> allConsec ?\\<Delta>s4\n  \\<Delta> \\<in> set (\\<Delta>3 # \\<Delta>s')\n  \\<Delta>s = (\\<Delta>3 # \\<Delta>s') ## \\<Delta>1\n\ngoal (1 subgoal):\n 1. \\<And>a \\<Delta>s' \\<Delta>s.\n       \\<lbrakk>\\<And>\\<Delta>s.\n                   \\<lbrakk>\\<Delta> \\<in> set \\<Delta>s';\n                    \\<Delta>s = \\<Delta>s' ## \\<Delta>1\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<Delta>2.\n  (\\<Delta>, \\<Delta>2) \\<in> allConsec \\<Delta>s;\n        \\<Delta> \\<in> set (a # \\<Delta>s');\n        \\<Delta>s = (a # \\<Delta>s') ## \\<Delta>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<Delta>2.\n                            (\\<Delta>, \\<Delta>2) \\<in> allConsec \\<Delta>s", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>\\<Delta>2. (\\<Delta>, \\<Delta>2) \\<in> allConsec \\<Delta>s", "proof(cases \"\\<Delta> = \\<Delta>3\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<Delta> = \\<Delta>3 \\<Longrightarrow>\n    \\<exists>\\<Delta>2. (\\<Delta>, \\<Delta>2) \\<in> allConsec \\<Delta>s\n 2. \\<Delta> \\<noteq> \\<Delta>3 \\<Longrightarrow>\n    \\<exists>\\<Delta>2. (\\<Delta>, \\<Delta>2) \\<in> allConsec \\<Delta>s", "case True"], ["proof (state)\nthis:\n  \\<Delta> = \\<Delta>3\n\ngoal (2 subgoals):\n 1. \\<Delta> = \\<Delta>3 \\<Longrightarrow>\n    \\<exists>\\<Delta>2. (\\<Delta>, \\<Delta>2) \\<in> allConsec \\<Delta>s\n 2. \\<Delta> \\<noteq> \\<Delta>3 \\<Longrightarrow>\n    \\<exists>\\<Delta>2. (\\<Delta>, \\<Delta>2) \\<in> allConsec \\<Delta>s", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>\\<Delta>2. (\\<Delta>, \\<Delta>2) \\<in> allConsec \\<Delta>s", "proof(cases \\<Delta>s')"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<Delta>s' = [] \\<Longrightarrow>\n    \\<exists>\\<Delta>2. (\\<Delta>, \\<Delta>2) \\<in> allConsec \\<Delta>s\n 2. \\<And>a list.\n       \\<Delta>s' = a # list \\<Longrightarrow>\n       \\<exists>\\<Delta>2. (\\<Delta>, \\<Delta>2) \\<in> allConsec \\<Delta>s", "case Nil"], ["proof (state)\nthis:\n  \\<Delta>s' = []\n\ngoal (2 subgoals):\n 1. \\<Delta>s' = [] \\<Longrightarrow>\n    \\<exists>\\<Delta>2. (\\<Delta>, \\<Delta>2) \\<in> allConsec \\<Delta>s\n 2. \\<And>a list.\n       \\<Delta>s' = a # list \\<Longrightarrow>\n       \\<exists>\\<Delta>2. (\\<Delta>, \\<Delta>2) \\<in> allConsec \\<Delta>s", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>\\<Delta>2. (\\<Delta>, \\<Delta>2) \\<in> allConsec \\<Delta>s", "unfolding \\<open>\\<Delta>s = (\\<Delta>3 # \\<Delta>s') ## \\<Delta>1\\<close> Nil True"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>\\<Delta>2.\n       (\\<Delta>3, \\<Delta>2) \\<in> allConsec ([\\<Delta>3] ## \\<Delta>1)", "by (rule exI[of _ \\<Delta>1]) simp"], ["proof (state)\nthis:\n  \\<exists>\\<Delta>2. (\\<Delta>, \\<Delta>2) \\<in> allConsec \\<Delta>s\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       \\<Delta>s' = a # list \\<Longrightarrow>\n       \\<exists>\\<Delta>2. (\\<Delta>, \\<Delta>2) \\<in> allConsec \\<Delta>s", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a list.\n       \\<Delta>s' = a # list \\<Longrightarrow>\n       \\<exists>\\<Delta>2. (\\<Delta>, \\<Delta>2) \\<in> allConsec \\<Delta>s", "case (Cons \\<Delta>4 \\<Delta>s'')"], ["proof (state)\nthis:\n  \\<Delta>s' = \\<Delta>4 # \\<Delta>s''\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       \\<Delta>s' = a # list \\<Longrightarrow>\n       \\<exists>\\<Delta>2. (\\<Delta>, \\<Delta>2) \\<in> allConsec \\<Delta>s", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>\\<Delta>2. (\\<Delta>, \\<Delta>2) \\<in> allConsec \\<Delta>s", "unfolding \\<open>\\<Delta>s = (\\<Delta>3 # \\<Delta>s') ## \\<Delta>1\\<close> Cons True"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>\\<Delta>2.\n       (\\<Delta>3, \\<Delta>2)\n       \\<in> allConsec ((\\<Delta>3 # \\<Delta>4 # \\<Delta>s'') ## \\<Delta>1)", "by (rule exI[of _ \\<Delta>4]) simp"], ["proof (state)\nthis:\n  \\<exists>\\<Delta>2. (\\<Delta>, \\<Delta>2) \\<in> allConsec \\<Delta>s\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>\\<Delta>2. (\\<Delta>, \\<Delta>2) \\<in> allConsec \\<Delta>s\n\ngoal (1 subgoal):\n 1. \\<Delta> \\<noteq> \\<Delta>3 \\<Longrightarrow>\n    \\<exists>\\<Delta>2. (\\<Delta>, \\<Delta>2) \\<in> allConsec \\<Delta>s", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Delta> \\<noteq> \\<Delta>3 \\<Longrightarrow>\n    \\<exists>\\<Delta>2. (\\<Delta>, \\<Delta>2) \\<in> allConsec \\<Delta>s", "case False"], ["proof (state)\nthis:\n  \\<Delta> \\<noteq> \\<Delta>3\n\ngoal (1 subgoal):\n 1. \\<Delta> \\<noteq> \\<Delta>3 \\<Longrightarrow>\n    \\<exists>\\<Delta>2. (\\<Delta>, \\<Delta>2) \\<in> allConsec \\<Delta>s", "hence \"\\<Delta> \\<in> set \\<Delta>s'\""], ["proof (prove)\nusing this:\n  \\<Delta> \\<noteq> \\<Delta>3\n\ngoal (1 subgoal):\n 1. \\<Delta> \\<in> set \\<Delta>s'", "using Cons"], ["proof (prove)\nusing this:\n  \\<Delta> \\<noteq> \\<Delta>3\n  \\<lbrakk>\\<Delta> \\<in> set \\<Delta>s';\n   ?\\<Delta>s4 = \\<Delta>s' ## \\<Delta>1\\<rbrakk>\n  \\<Longrightarrow> \\<exists>\\<Delta>2.\n                       (\\<Delta>, \\<Delta>2) \\<in> allConsec ?\\<Delta>s4\n  \\<Delta> \\<in> set (\\<Delta>3 # \\<Delta>s')\n  \\<Delta>s = (\\<Delta>3 # \\<Delta>s') ## \\<Delta>1\n\ngoal (1 subgoal):\n 1. \\<Delta> \\<in> set \\<Delta>s'", "by auto"], ["proof (state)\nthis:\n  \\<Delta> \\<in> set \\<Delta>s'\n\ngoal (1 subgoal):\n 1. \\<Delta> \\<noteq> \\<Delta>3 \\<Longrightarrow>\n    \\<exists>\\<Delta>2. (\\<Delta>, \\<Delta>2) \\<in> allConsec \\<Delta>s", "then"], ["proof (chain)\npicking this:\n  \\<Delta> \\<in> set \\<Delta>s'", "obtain \\<Delta>2 where \"(\\<Delta>, \\<Delta>2) \\<in> allConsec (\\<Delta>s' ## \\<Delta>1)\""], ["proof (prove)\nusing this:\n  \\<Delta> \\<in> set \\<Delta>s'\n\ngoal (1 subgoal):\n 1. (\\<And>\\<Delta>2.\n        (\\<Delta>, \\<Delta>2)\n        \\<in> allConsec (\\<Delta>s' ## \\<Delta>1) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using Cons"], ["proof (prove)\nusing this:\n  \\<Delta> \\<in> set \\<Delta>s'\n  \\<lbrakk>\\<Delta> \\<in> set \\<Delta>s';\n   ?\\<Delta>s4 = \\<Delta>s' ## \\<Delta>1\\<rbrakk>\n  \\<Longrightarrow> \\<exists>\\<Delta>2.\n                       (\\<Delta>, \\<Delta>2) \\<in> allConsec ?\\<Delta>s4\n  \\<Delta> \\<in> set (\\<Delta>3 # \\<Delta>s')\n  \\<Delta>s = (\\<Delta>3 # \\<Delta>s') ## \\<Delta>1\n\ngoal (1 subgoal):\n 1. (\\<And>\\<Delta>2.\n        (\\<Delta>, \\<Delta>2)\n        \\<in> allConsec (\\<Delta>s' ## \\<Delta>1) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  (\\<Delta>, \\<Delta>2) \\<in> allConsec (\\<Delta>s' ## \\<Delta>1)\n\ngoal (1 subgoal):\n 1. \\<Delta> \\<noteq> \\<Delta>3 \\<Longrightarrow>\n    \\<exists>\\<Delta>2. (\\<Delta>, \\<Delta>2) \\<in> allConsec \\<Delta>s", "thus ?thesis"], ["proof (prove)\nusing this:\n  (\\<Delta>, \\<Delta>2) \\<in> allConsec (\\<Delta>s' ## \\<Delta>1)\n\ngoal (1 subgoal):\n 1. \\<exists>\\<Delta>2. (\\<Delta>, \\<Delta>2) \\<in> allConsec \\<Delta>s", "unfolding \\<open>\\<Delta>s = (\\<Delta>3 # \\<Delta>s') ## \\<Delta>1\\<close>"], ["proof (prove)\nusing this:\n  (\\<Delta>, \\<Delta>2) \\<in> allConsec (\\<Delta>s' ## \\<Delta>1)\n\ngoal (1 subgoal):\n 1. \\<exists>\\<Delta>2.\n       (\\<Delta>, \\<Delta>2)\n       \\<in> allConsec ((\\<Delta>3 # \\<Delta>s') ## \\<Delta>1)", "by (intro exI[of _ \\<Delta>2]) (cases \\<Delta>s', auto)"], ["proof (state)\nthis:\n  \\<exists>\\<Delta>2. (\\<Delta>, \\<Delta>2) \\<in> allConsec \\<Delta>s\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>\\<Delta>2. (\\<Delta>, \\<Delta>2) \\<in> allConsec \\<Delta>s\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma allConsec_set:\nassumes \"(\\<Delta>1,\\<Delta>2) \\<in> allConsec \\<Delta>s\"\nshows \"\\<Delta>1 \\<in> set \\<Delta>s \\<and> \\<Delta>2 \\<in> set \\<Delta>s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Delta>1 \\<in> set \\<Delta>s \\<and> \\<Delta>2 \\<in> set \\<Delta>s", "using assms"], ["proof (prove)\nusing this:\n  (\\<Delta>1, \\<Delta>2) \\<in> allConsec \\<Delta>s\n\ngoal (1 subgoal):\n 1. \\<Delta>1 \\<in> set \\<Delta>s \\<and> \\<Delta>2 \\<in> set \\<Delta>s", "by (induct \\<Delta>s rule: allConsec.induct) auto"], ["", "(* Liniar decomposition: *)"], ["", "theorem unwind_decomp_secure:\nassumes n: \"\\<Delta>s \\<noteq> []\"\nand i: \"\\<And> vl vl1. B vl vl1 \\<Longrightarrow> hd \\<Delta>s istate vl istate vl1\"\nand c: \"\\<And> \\<Delta>1 \\<Delta>2. (\\<Delta>1,\\<Delta>2) \\<in> allConsec \\<Delta>s \\<Longrightarrow> unwind_cont \\<Delta>1 {\\<Delta>1, \\<Delta>2, \\<Delta>e}\"\nand l: \"unwind_cont (last \\<Delta>s) {last \\<Delta>s, \\<Delta>e}\"\nand e: \"unwind_exit \\<Delta>e\"\nshows secure"], ["proof (prove)\ngoal (1 subgoal):\n 1. secure", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. secure", "let ?\\<Delta>0 = \"hd \\<Delta>s\""], ["proof (state)\ngoal (1 subgoal):\n 1. secure", "let ?\\<Delta>s = \"insert \\<Delta>e (set \\<Delta>s)\""], ["proof (state)\ngoal (1 subgoal):\n 1. secure", "define \"next\" where \"next \\<Delta>1 =\n    (if \\<Delta>1 = \\<Delta>e then {}\n     else if \\<Delta>1 = last \\<Delta>s then {\\<Delta>1,\\<Delta>e}\n     else {\\<Delta>1,SOME \\<Delta>2. (\\<Delta>1,\\<Delta>2) \\<in> allConsec \\<Delta>s,\\<Delta>e})\" for \\<Delta>1"], ["proof (state)\nthis:\n  next ?\\<Delta>1.0 =\n  (if ?\\<Delta>1.0 = \\<Delta>e then {}\n   else if ?\\<Delta>1.0 = last \\<Delta>s then {?\\<Delta>1.0, \\<Delta>e}\n        else {?\\<Delta>1.0,\n              SOME \\<Delta>2.\n                 (?\\<Delta>1.0, \\<Delta>2) \\<in> allConsec \\<Delta>s,\n              \\<Delta>e})\n\ngoal (1 subgoal):\n 1. secure", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. secure", "proof(rule unwind_dec_secure)"], ["proof (state)\ngoal (3 subgoals):\n 1. ?\\<Delta>0.0 \\<in> ?\\<Delta>s\n 2. \\<And>vl vl1.\n       B vl vl1 \\<Longrightarrow> ?\\<Delta>0.0 istate vl istate vl1\n 3. \\<And>\\<Delta>.\n       \\<Delta> \\<in> ?\\<Delta>s \\<Longrightarrow>\n       ?next \\<Delta> \\<subseteq> ?\\<Delta>s \\<and>\n       unwind_to \\<Delta> (?next \\<Delta>)", "show \"?\\<Delta>0 \\<in> ?\\<Delta>s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. hd \\<Delta>s \\<in> insert \\<Delta>e (set \\<Delta>s)", "using n"], ["proof (prove)\nusing this:\n  \\<Delta>s \\<noteq> []\n\ngoal (1 subgoal):\n 1. hd \\<Delta>s \\<in> insert \\<Delta>e (set \\<Delta>s)", "by auto"], ["proof (state)\nthis:\n  hd \\<Delta>s \\<in> insert \\<Delta>e (set \\<Delta>s)\n\ngoal (2 subgoals):\n 1. \\<And>vl vl1.\n       B vl vl1 \\<Longrightarrow> hd \\<Delta>s istate vl istate vl1\n 2. \\<And>\\<Delta>.\n       \\<Delta> \\<in> insert \\<Delta>e (set \\<Delta>s) \\<Longrightarrow>\n       ?next \\<Delta> \\<subseteq> insert \\<Delta>e (set \\<Delta>s) \\<and>\n       unwind_to \\<Delta> (?next \\<Delta>)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>vl vl1.\n       B vl vl1 \\<Longrightarrow> hd \\<Delta>s istate vl istate vl1\n 2. \\<And>\\<Delta>.\n       \\<Delta> \\<in> insert \\<Delta>e (set \\<Delta>s) \\<Longrightarrow>\n       ?next \\<Delta> \\<subseteq> insert \\<Delta>e (set \\<Delta>s) \\<and>\n       unwind_to \\<Delta> (?next \\<Delta>)", "fix vl vl1"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>vl vl1.\n       B vl vl1 \\<Longrightarrow> hd \\<Delta>s istate vl istate vl1\n 2. \\<And>\\<Delta>.\n       \\<Delta> \\<in> insert \\<Delta>e (set \\<Delta>s) \\<Longrightarrow>\n       ?next \\<Delta> \\<subseteq> insert \\<Delta>e (set \\<Delta>s) \\<and>\n       unwind_to \\<Delta> (?next \\<Delta>)", "assume \"B vl vl1\""], ["proof (state)\nthis:\n  B vl vl1\n\ngoal (2 subgoals):\n 1. \\<And>vl vl1.\n       B vl vl1 \\<Longrightarrow> hd \\<Delta>s istate vl istate vl1\n 2. \\<And>\\<Delta>.\n       \\<Delta> \\<in> insert \\<Delta>e (set \\<Delta>s) \\<Longrightarrow>\n       ?next \\<Delta> \\<subseteq> insert \\<Delta>e (set \\<Delta>s) \\<and>\n       unwind_to \\<Delta> (?next \\<Delta>)", "thus \"?\\<Delta>0 istate vl istate vl1\""], ["proof (prove)\nusing this:\n  B vl vl1\n\ngoal (1 subgoal):\n 1. hd \\<Delta>s istate vl istate vl1", "by fact"], ["proof (state)\nthis:\n  hd \\<Delta>s istate vl istate vl1\n\ngoal (1 subgoal):\n 1. \\<And>\\<Delta>.\n       \\<Delta> \\<in> insert \\<Delta>e (set \\<Delta>s) \\<Longrightarrow>\n       ?next \\<Delta> \\<subseteq> insert \\<Delta>e (set \\<Delta>s) \\<and>\n       unwind_to \\<Delta> (?next \\<Delta>)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<Delta>.\n       \\<Delta> \\<in> insert \\<Delta>e (set \\<Delta>s) \\<Longrightarrow>\n       ?next \\<Delta> \\<subseteq> insert \\<Delta>e (set \\<Delta>s) \\<and>\n       unwind_to \\<Delta> (?next \\<Delta>)", "fix \\<Delta>"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<Delta>.\n       \\<Delta> \\<in> insert \\<Delta>e (set \\<Delta>s) \\<Longrightarrow>\n       ?next \\<Delta> \\<subseteq> insert \\<Delta>e (set \\<Delta>s) \\<and>\n       unwind_to \\<Delta> (?next \\<Delta>)", "assume 1: \"\\<Delta> \\<in> ?\\<Delta>s\""], ["proof (state)\nthis:\n  \\<Delta> \\<in> insert \\<Delta>e (set \\<Delta>s)\n\ngoal (1 subgoal):\n 1. \\<And>\\<Delta>.\n       \\<Delta> \\<in> insert \\<Delta>e (set \\<Delta>s) \\<Longrightarrow>\n       ?next \\<Delta> \\<subseteq> insert \\<Delta>e (set \\<Delta>s) \\<and>\n       unwind_to \\<Delta> (?next \\<Delta>)", "show \"next \\<Delta> \\<subseteq> ?\\<Delta>s \\<and> unwind_to \\<Delta> (next \\<Delta>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. next \\<Delta> \\<subseteq> insert \\<Delta>e (set \\<Delta>s) \\<and>\n    unwind_to \\<Delta> (next \\<Delta>)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. next \\<Delta> \\<subseteq> insert \\<Delta>e (set \\<Delta>s) \\<and>\n    unwind_to \\<Delta> (next \\<Delta>)", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. next \\<Delta> \\<subseteq> insert \\<Delta>e (set \\<Delta>s) \\<and>\n    unwind_to \\<Delta> (next \\<Delta>)", "assume \"\\<Delta> = \\<Delta>e\""], ["proof (state)\nthis:\n  \\<Delta> = \\<Delta>e\n\ngoal (1 subgoal):\n 1. next \\<Delta> \\<subseteq> insert \\<Delta>e (set \\<Delta>s) \\<and>\n    unwind_to \\<Delta> (next \\<Delta>)", "hence ?thesis"], ["proof (prove)\nusing this:\n  \\<Delta> = \\<Delta>e\n\ngoal (1 subgoal):\n 1. next \\<Delta> \\<subseteq> insert \\<Delta>e (set \\<Delta>s) \\<and>\n    unwind_to \\<Delta> (next \\<Delta>)", "using e"], ["proof (prove)\nusing this:\n  \\<Delta> = \\<Delta>e\n  unwind_exit \\<Delta>e\n\ngoal (1 subgoal):\n 1. next \\<Delta> \\<subseteq> insert \\<Delta>e (set \\<Delta>s) \\<and>\n    unwind_to \\<Delta> (next \\<Delta>)", "unfolding next_def unwind_exit_def unwind_to_def"], ["proof (prove)\nusing this:\n  \\<Delta> = \\<Delta>e\n  \\<forall>s vl s1 vl1.\n     reachNT s \\<and>\n     reach s1 \\<and> \\<Delta>e s vl s1 vl1 \\<longrightarrow>\n     vl \\<noteq> [] \\<and> exit s (hd vl)\n\ngoal (1 subgoal):\n 1. (if \\<Delta> = \\<Delta>e then {}\n     else if \\<Delta> = last \\<Delta>s then {\\<Delta>, \\<Delta>e}\n          else {\\<Delta>,\n                SOME \\<Delta>2.\n                   (\\<Delta>, \\<Delta>2) \\<in> allConsec \\<Delta>s,\n                \\<Delta>e})\n    \\<subseteq> insert \\<Delta>e (set \\<Delta>s) \\<and>\n    (\\<forall>s vl s1 vl1.\n        reachNT s \\<and>\n        reach s1 \\<and> \\<Delta> s vl s1 vl1 \\<longrightarrow>\n        vl \\<noteq> [] \\<and> exit s (hd vl) \\<or>\n        iaction\n         (disjAll\n           (if \\<Delta> = \\<Delta>e then {}\n            else if \\<Delta> = last \\<Delta>s then {\\<Delta>, \\<Delta>e}\n                 else {\\<Delta>,\n                       SOME \\<Delta>2.\n                          (\\<Delta>, \\<Delta>2) \\<in> allConsec \\<Delta>s,\n                       \\<Delta>e}))\n         s vl s1 vl1 \\<or>\n        (vl \\<noteq> [] \\<or> vl1 = []) \\<and>\n        reaction\n         (disjAll\n           (if \\<Delta> = \\<Delta>e then {}\n            else if \\<Delta> = last \\<Delta>s then {\\<Delta>, \\<Delta>e}\n                 else {\\<Delta>,\n                       SOME \\<Delta>2.\n                          (\\<Delta>, \\<Delta>2) \\<in> allConsec \\<Delta>s,\n                       \\<Delta>e}))\n         s vl s1 vl1)", "by auto"], ["proof (state)\nthis:\n  next \\<Delta> \\<subseteq> insert \\<Delta>e (set \\<Delta>s) \\<and>\n  unwind_to \\<Delta> (next \\<Delta>)\n\ngoal (1 subgoal):\n 1. next \\<Delta> \\<subseteq> insert \\<Delta>e (set \\<Delta>s) \\<and>\n    unwind_to \\<Delta> (next \\<Delta>)", "}"], ["proof (state)\nthis:\n  \\<Delta> = \\<Delta>e \\<Longrightarrow>\n  next \\<Delta> \\<subseteq> insert \\<Delta>e (set \\<Delta>s) \\<and>\n  unwind_to \\<Delta> (next \\<Delta>)\n\ngoal (1 subgoal):\n 1. next \\<Delta> \\<subseteq> insert \\<Delta>e (set \\<Delta>s) \\<and>\n    unwind_to \\<Delta> (next \\<Delta>)", "moreover"], ["proof (state)\nthis:\n  \\<Delta> = \\<Delta>e \\<Longrightarrow>\n  next \\<Delta> \\<subseteq> insert \\<Delta>e (set \\<Delta>s) \\<and>\n  unwind_to \\<Delta> (next \\<Delta>)\n\ngoal (1 subgoal):\n 1. next \\<Delta> \\<subseteq> insert \\<Delta>e (set \\<Delta>s) \\<and>\n    unwind_to \\<Delta> (next \\<Delta>)", "{"], ["proof (state)\nthis:\n  \\<Delta> = \\<Delta>e \\<Longrightarrow>\n  next \\<Delta> \\<subseteq> insert \\<Delta>e (set \\<Delta>s) \\<and>\n  unwind_to \\<Delta> (next \\<Delta>)\n\ngoal (1 subgoal):\n 1. next \\<Delta> \\<subseteq> insert \\<Delta>e (set \\<Delta>s) \\<and>\n    unwind_to \\<Delta> (next \\<Delta>)", "assume \"\\<Delta> = last \\<Delta>s\" and \"\\<Delta> \\<noteq> \\<Delta>e\""], ["proof (state)\nthis:\n  \\<Delta> = last \\<Delta>s\n  \\<Delta> \\<noteq> \\<Delta>e\n\ngoal (1 subgoal):\n 1. next \\<Delta> \\<subseteq> insert \\<Delta>e (set \\<Delta>s) \\<and>\n    unwind_to \\<Delta> (next \\<Delta>)", "hence ?thesis"], ["proof (prove)\nusing this:\n  \\<Delta> = last \\<Delta>s\n  \\<Delta> \\<noteq> \\<Delta>e\n\ngoal (1 subgoal):\n 1. next \\<Delta> \\<subseteq> insert \\<Delta>e (set \\<Delta>s) \\<and>\n    unwind_to \\<Delta> (next \\<Delta>)", "using n l"], ["proof (prove)\nusing this:\n  \\<Delta> = last \\<Delta>s\n  \\<Delta> \\<noteq> \\<Delta>e\n  \\<Delta>s \\<noteq> []\n  unwind_cont (last \\<Delta>s) {last \\<Delta>s, \\<Delta>e}\n\ngoal (1 subgoal):\n 1. next \\<Delta> \\<subseteq> insert \\<Delta>e (set \\<Delta>s) \\<and>\n    unwind_to \\<Delta> (next \\<Delta>)", "unfolding next_def unwind_cont_def unwind_to_def"], ["proof (prove)\nusing this:\n  \\<Delta> = last \\<Delta>s\n  \\<Delta> \\<noteq> \\<Delta>e\n  \\<Delta>s \\<noteq> []\n  \\<forall>s vl s1 vl1.\n     reachNT s \\<and>\n     reach s1 \\<and> last \\<Delta>s s vl s1 vl1 \\<longrightarrow>\n     iaction (disjAll {last \\<Delta>s, \\<Delta>e}) s vl s1 vl1 \\<or>\n     (vl \\<noteq> [] \\<or> vl1 = []) \\<and>\n     reaction (disjAll {last \\<Delta>s, \\<Delta>e}) s vl s1 vl1\n\ngoal (1 subgoal):\n 1. (if \\<Delta> = \\<Delta>e then {}\n     else if \\<Delta> = last \\<Delta>s then {\\<Delta>, \\<Delta>e}\n          else {\\<Delta>,\n                SOME \\<Delta>2.\n                   (\\<Delta>, \\<Delta>2) \\<in> allConsec \\<Delta>s,\n                \\<Delta>e})\n    \\<subseteq> insert \\<Delta>e (set \\<Delta>s) \\<and>\n    (\\<forall>s vl s1 vl1.\n        reachNT s \\<and>\n        reach s1 \\<and> \\<Delta> s vl s1 vl1 \\<longrightarrow>\n        vl \\<noteq> [] \\<and> exit s (hd vl) \\<or>\n        iaction\n         (disjAll\n           (if \\<Delta> = \\<Delta>e then {}\n            else if \\<Delta> = last \\<Delta>s then {\\<Delta>, \\<Delta>e}\n                 else {\\<Delta>,\n                       SOME \\<Delta>2.\n                          (\\<Delta>, \\<Delta>2) \\<in> allConsec \\<Delta>s,\n                       \\<Delta>e}))\n         s vl s1 vl1 \\<or>\n        (vl \\<noteq> [] \\<or> vl1 = []) \\<and>\n        reaction\n         (disjAll\n           (if \\<Delta> = \\<Delta>e then {}\n            else if \\<Delta> = last \\<Delta>s then {\\<Delta>, \\<Delta>e}\n                 else {\\<Delta>,\n                       SOME \\<Delta>2.\n                          (\\<Delta>, \\<Delta>2) \\<in> allConsec \\<Delta>s,\n                       \\<Delta>e}))\n         s vl s1 vl1)", "by simp"], ["proof (state)\nthis:\n  next \\<Delta> \\<subseteq> insert \\<Delta>e (set \\<Delta>s) \\<and>\n  unwind_to \\<Delta> (next \\<Delta>)\n\ngoal (1 subgoal):\n 1. next \\<Delta> \\<subseteq> insert \\<Delta>e (set \\<Delta>s) \\<and>\n    unwind_to \\<Delta> (next \\<Delta>)", "}"], ["proof (state)\nthis:\n  \\<lbrakk>\\<Delta> = last \\<Delta>s; \\<Delta> \\<noteq> \\<Delta>e\\<rbrakk>\n  \\<Longrightarrow> next \\<Delta>\n                    \\<subseteq> insert \\<Delta>e (set \\<Delta>s) \\<and>\n                    unwind_to \\<Delta> (next \\<Delta>)\n\ngoal (1 subgoal):\n 1. next \\<Delta> \\<subseteq> insert \\<Delta>e (set \\<Delta>s) \\<and>\n    unwind_to \\<Delta> (next \\<Delta>)", "moreover"], ["proof (state)\nthis:\n  \\<lbrakk>\\<Delta> = last \\<Delta>s; \\<Delta> \\<noteq> \\<Delta>e\\<rbrakk>\n  \\<Longrightarrow> next \\<Delta>\n                    \\<subseteq> insert \\<Delta>e (set \\<Delta>s) \\<and>\n                    unwind_to \\<Delta> (next \\<Delta>)\n\ngoal (1 subgoal):\n 1. next \\<Delta> \\<subseteq> insert \\<Delta>e (set \\<Delta>s) \\<and>\n    unwind_to \\<Delta> (next \\<Delta>)", "{"], ["proof (state)\nthis:\n  \\<lbrakk>\\<Delta> = last \\<Delta>s; \\<Delta> \\<noteq> \\<Delta>e\\<rbrakk>\n  \\<Longrightarrow> next \\<Delta>\n                    \\<subseteq> insert \\<Delta>e (set \\<Delta>s) \\<and>\n                    unwind_to \\<Delta> (next \\<Delta>)\n\ngoal (1 subgoal):\n 1. next \\<Delta> \\<subseteq> insert \\<Delta>e (set \\<Delta>s) \\<and>\n    unwind_to \\<Delta> (next \\<Delta>)", "assume 1: \"\\<Delta> \\<in> set \\<Delta>s\" and 2: \"\\<Delta> \\<noteq> last \\<Delta>s\" \"\\<Delta> \\<noteq> \\<Delta>e\""], ["proof (state)\nthis:\n  \\<Delta> \\<in> set \\<Delta>s\n  \\<Delta> \\<noteq> last \\<Delta>s\n  \\<Delta> \\<noteq> \\<Delta>e\n\ngoal (1 subgoal):\n 1. next \\<Delta> \\<subseteq> insert \\<Delta>e (set \\<Delta>s) \\<and>\n    unwind_to \\<Delta> (next \\<Delta>)", "then"], ["proof (chain)\npicking this:\n  \\<Delta> \\<in> set \\<Delta>s\n  \\<Delta> \\<noteq> last \\<Delta>s\n  \\<Delta> \\<noteq> \\<Delta>e", "obtain \\<Delta>' \\<Delta>s' where \\<Delta>s: \"\\<Delta>s = \\<Delta>s' ## \\<Delta>'\" and \\<Delta>: \"\\<Delta> \\<in> set \\<Delta>s'\""], ["proof (prove)\nusing this:\n  \\<Delta> \\<in> set \\<Delta>s\n  \\<Delta> \\<noteq> last \\<Delta>s\n  \\<Delta> \\<noteq> \\<Delta>e\n\ngoal (1 subgoal):\n 1. (\\<And>\\<Delta>s' \\<Delta>'.\n        \\<lbrakk>\\<Delta>s = \\<Delta>s' ## \\<Delta>';\n         \\<Delta> \\<in> set \\<Delta>s'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis (no_types) append_Cons append_assoc in_set_conv_decomp last_snoc rev_exhaust)"], ["proof (state)\nthis:\n  \\<Delta>s = \\<Delta>s' ## \\<Delta>'\n  \\<Delta> \\<in> set \\<Delta>s'\n\ngoal (1 subgoal):\n 1. next \\<Delta> \\<subseteq> insert \\<Delta>e (set \\<Delta>s) \\<and>\n    unwind_to \\<Delta> (next \\<Delta>)", "have \"\\<exists> \\<Delta>2. (\\<Delta>, \\<Delta>2) \\<in> allConsec \\<Delta>s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>\\<Delta>2. (\\<Delta>, \\<Delta>2) \\<in> allConsec \\<Delta>s", "using set_allConsec[OF \\<Delta> \\<Delta>s]"], ["proof (prove)\nusing this:\n  \\<exists>\\<Delta>2. (\\<Delta>, \\<Delta>2) \\<in> allConsec \\<Delta>s\n\ngoal (1 subgoal):\n 1. \\<exists>\\<Delta>2. (\\<Delta>, \\<Delta>2) \\<in> allConsec \\<Delta>s", "."], ["proof (state)\nthis:\n  \\<exists>\\<Delta>2. (\\<Delta>, \\<Delta>2) \\<in> allConsec \\<Delta>s\n\ngoal (1 subgoal):\n 1. next \\<Delta> \\<subseteq> insert \\<Delta>e (set \\<Delta>s) \\<and>\n    unwind_to \\<Delta> (next \\<Delta>)", "hence \"(\\<Delta>, SOME \\<Delta>2. (\\<Delta>, \\<Delta>2) \\<in> allConsec \\<Delta>s) \\<in> allConsec \\<Delta>s\""], ["proof (prove)\nusing this:\n  \\<exists>\\<Delta>2. (\\<Delta>, \\<Delta>2) \\<in> allConsec \\<Delta>s\n\ngoal (1 subgoal):\n 1. (\\<Delta>,\n     SOME \\<Delta>2. (\\<Delta>, \\<Delta>2) \\<in> allConsec \\<Delta>s)\n    \\<in> allConsec \\<Delta>s", "by (metis (lifting) someI_ex)"], ["proof (state)\nthis:\n  (\\<Delta>,\n   SOME \\<Delta>2. (\\<Delta>, \\<Delta>2) \\<in> allConsec \\<Delta>s)\n  \\<in> allConsec \\<Delta>s\n\ngoal (1 subgoal):\n 1. next \\<Delta> \\<subseteq> insert \\<Delta>e (set \\<Delta>s) \\<and>\n    unwind_to \\<Delta> (next \\<Delta>)", "hence ?thesis"], ["proof (prove)\nusing this:\n  (\\<Delta>,\n   SOME \\<Delta>2. (\\<Delta>, \\<Delta>2) \\<in> allConsec \\<Delta>s)\n  \\<in> allConsec \\<Delta>s\n\ngoal (1 subgoal):\n 1. next \\<Delta> \\<subseteq> insert \\<Delta>e (set \\<Delta>s) \\<and>\n    unwind_to \\<Delta> (next \\<Delta>)", "using 1 2 c"], ["proof (prove)\nusing this:\n  (\\<Delta>,\n   SOME \\<Delta>2. (\\<Delta>, \\<Delta>2) \\<in> allConsec \\<Delta>s)\n  \\<in> allConsec \\<Delta>s\n  \\<Delta> \\<in> set \\<Delta>s\n  \\<Delta> \\<noteq> last \\<Delta>s\n  \\<Delta> \\<noteq> \\<Delta>e\n  (?\\<Delta>1.4, ?\\<Delta>2.4) \\<in> allConsec \\<Delta>s \\<Longrightarrow>\n  unwind_cont ?\\<Delta>1.4 {?\\<Delta>1.4, ?\\<Delta>2.4, \\<Delta>e}\n\ngoal (1 subgoal):\n 1. next \\<Delta> \\<subseteq> insert \\<Delta>e (set \\<Delta>s) \\<and>\n    unwind_to \\<Delta> (next \\<Delta>)", "unfolding next_def unwind_cont_def unwind_to_def"], ["proof (prove)\nusing this:\n  (\\<Delta>,\n   SOME \\<Delta>2. (\\<Delta>, \\<Delta>2) \\<in> allConsec \\<Delta>s)\n  \\<in> allConsec \\<Delta>s\n  \\<Delta> \\<in> set \\<Delta>s\n  \\<Delta> \\<noteq> last \\<Delta>s\n  \\<Delta> \\<noteq> \\<Delta>e\n  (?\\<Delta>1.4, ?\\<Delta>2.4) \\<in> allConsec \\<Delta>s \\<Longrightarrow>\n  \\<forall>s vl s1 vl1.\n     reachNT s \\<and>\n     reach s1 \\<and> ?\\<Delta>1.4 s vl s1 vl1 \\<longrightarrow>\n     iaction (disjAll {?\\<Delta>1.4, ?\\<Delta>2.4, \\<Delta>e}) s vl s1\n      vl1 \\<or>\n     (vl \\<noteq> [] \\<or> vl1 = []) \\<and>\n     reaction (disjAll {?\\<Delta>1.4, ?\\<Delta>2.4, \\<Delta>e}) s vl s1 vl1\n\ngoal (1 subgoal):\n 1. (if \\<Delta> = \\<Delta>e then {}\n     else if \\<Delta> = last \\<Delta>s then {\\<Delta>, \\<Delta>e}\n          else {\\<Delta>,\n                SOME \\<Delta>2.\n                   (\\<Delta>, \\<Delta>2) \\<in> allConsec \\<Delta>s,\n                \\<Delta>e})\n    \\<subseteq> insert \\<Delta>e (set \\<Delta>s) \\<and>\n    (\\<forall>s vl s1 vl1.\n        reachNT s \\<and>\n        reach s1 \\<and> \\<Delta> s vl s1 vl1 \\<longrightarrow>\n        vl \\<noteq> [] \\<and> exit s (hd vl) \\<or>\n        iaction\n         (disjAll\n           (if \\<Delta> = \\<Delta>e then {}\n            else if \\<Delta> = last \\<Delta>s then {\\<Delta>, \\<Delta>e}\n                 else {\\<Delta>,\n                       SOME \\<Delta>2.\n                          (\\<Delta>, \\<Delta>2) \\<in> allConsec \\<Delta>s,\n                       \\<Delta>e}))\n         s vl s1 vl1 \\<or>\n        (vl \\<noteq> [] \\<or> vl1 = []) \\<and>\n        reaction\n         (disjAll\n           (if \\<Delta> = \\<Delta>e then {}\n            else if \\<Delta> = last \\<Delta>s then {\\<Delta>, \\<Delta>e}\n                 else {\\<Delta>,\n                       SOME \\<Delta>2.\n                          (\\<Delta>, \\<Delta>2) \\<in> allConsec \\<Delta>s,\n                       \\<Delta>e}))\n         s vl s1 vl1)", "by simp (metis (no_types) allConsec_set)"], ["proof (state)\nthis:\n  next \\<Delta> \\<subseteq> insert \\<Delta>e (set \\<Delta>s) \\<and>\n  unwind_to \\<Delta> (next \\<Delta>)\n\ngoal (1 subgoal):\n 1. next \\<Delta> \\<subseteq> insert \\<Delta>e (set \\<Delta>s) \\<and>\n    unwind_to \\<Delta> (next \\<Delta>)", "}"], ["proof (state)\nthis:\n  \\<lbrakk>\\<Delta> \\<in> set \\<Delta>s; \\<Delta> \\<noteq> last \\<Delta>s;\n   \\<Delta> \\<noteq> \\<Delta>e\\<rbrakk>\n  \\<Longrightarrow> next \\<Delta>\n                    \\<subseteq> insert \\<Delta>e (set \\<Delta>s) \\<and>\n                    unwind_to \\<Delta> (next \\<Delta>)\n\ngoal (1 subgoal):\n 1. next \\<Delta> \\<subseteq> insert \\<Delta>e (set \\<Delta>s) \\<and>\n    unwind_to \\<Delta> (next \\<Delta>)", "ultimately"], ["proof (chain)\npicking this:\n  \\<Delta> = \\<Delta>e \\<Longrightarrow>\n  next \\<Delta> \\<subseteq> insert \\<Delta>e (set \\<Delta>s) \\<and>\n  unwind_to \\<Delta> (next \\<Delta>)\n  \\<lbrakk>\\<Delta> = last \\<Delta>s; \\<Delta> \\<noteq> \\<Delta>e\\<rbrakk>\n  \\<Longrightarrow> next \\<Delta>\n                    \\<subseteq> insert \\<Delta>e (set \\<Delta>s) \\<and>\n                    unwind_to \\<Delta> (next \\<Delta>)\n  \\<lbrakk>\\<Delta> \\<in> set \\<Delta>s; \\<Delta> \\<noteq> last \\<Delta>s;\n   \\<Delta> \\<noteq> \\<Delta>e\\<rbrakk>\n  \\<Longrightarrow> next \\<Delta>\n                    \\<subseteq> insert \\<Delta>e (set \\<Delta>s) \\<and>\n                    unwind_to \\<Delta> (next \\<Delta>)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<Delta> = \\<Delta>e \\<Longrightarrow>\n  next \\<Delta> \\<subseteq> insert \\<Delta>e (set \\<Delta>s) \\<and>\n  unwind_to \\<Delta> (next \\<Delta>)\n  \\<lbrakk>\\<Delta> = last \\<Delta>s; \\<Delta> \\<noteq> \\<Delta>e\\<rbrakk>\n  \\<Longrightarrow> next \\<Delta>\n                    \\<subseteq> insert \\<Delta>e (set \\<Delta>s) \\<and>\n                    unwind_to \\<Delta> (next \\<Delta>)\n  \\<lbrakk>\\<Delta> \\<in> set \\<Delta>s; \\<Delta> \\<noteq> last \\<Delta>s;\n   \\<Delta> \\<noteq> \\<Delta>e\\<rbrakk>\n  \\<Longrightarrow> next \\<Delta>\n                    \\<subseteq> insert \\<Delta>e (set \\<Delta>s) \\<and>\n                    unwind_to \\<Delta> (next \\<Delta>)\n\ngoal (1 subgoal):\n 1. next \\<Delta> \\<subseteq> insert \\<Delta>e (set \\<Delta>s) \\<and>\n    unwind_to \\<Delta> (next \\<Delta>)", "using 1"], ["proof (prove)\nusing this:\n  \\<Delta> = \\<Delta>e \\<Longrightarrow>\n  next \\<Delta> \\<subseteq> insert \\<Delta>e (set \\<Delta>s) \\<and>\n  unwind_to \\<Delta> (next \\<Delta>)\n  \\<lbrakk>\\<Delta> = last \\<Delta>s; \\<Delta> \\<noteq> \\<Delta>e\\<rbrakk>\n  \\<Longrightarrow> next \\<Delta>\n                    \\<subseteq> insert \\<Delta>e (set \\<Delta>s) \\<and>\n                    unwind_to \\<Delta> (next \\<Delta>)\n  \\<lbrakk>\\<Delta> \\<in> set \\<Delta>s; \\<Delta> \\<noteq> last \\<Delta>s;\n   \\<Delta> \\<noteq> \\<Delta>e\\<rbrakk>\n  \\<Longrightarrow> next \\<Delta>\n                    \\<subseteq> insert \\<Delta>e (set \\<Delta>s) \\<and>\n                    unwind_to \\<Delta> (next \\<Delta>)\n  \\<Delta> \\<in> insert \\<Delta>e (set \\<Delta>s)\n\ngoal (1 subgoal):\n 1. next \\<Delta> \\<subseteq> insert \\<Delta>e (set \\<Delta>s) \\<and>\n    unwind_to \\<Delta> (next \\<Delta>)", "by blast"], ["proof (state)\nthis:\n  next \\<Delta> \\<subseteq> insert \\<Delta>e (set \\<Delta>s) \\<and>\n  unwind_to \\<Delta> (next \\<Delta>)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  next \\<Delta> \\<subseteq> insert \\<Delta>e (set \\<Delta>s) \\<and>\n  unwind_to \\<Delta> (next \\<Delta>)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  secure\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection\\<open>Instances\\<close>"], ["", "corollary unwind_decomp3_secure:\nassumes\ni: \"\\<And> vl vl1. B vl vl1 \\<Longrightarrow> \\<Delta>1 istate vl istate vl1\"\nand c1: \"unwind_cont \\<Delta>1 {\\<Delta>1, \\<Delta>2, \\<Delta>e}\"\nand c2: \"unwind_cont \\<Delta>2 {\\<Delta>2, \\<Delta>3, \\<Delta>e}\"\nand l: \"unwind_cont \\<Delta>3 {\\<Delta>3, \\<Delta>e}\"\nand e: \"unwind_exit \\<Delta>e\"\nshows secure"], ["proof (prove)\ngoal (1 subgoal):\n 1. secure", "apply(rule unwind_decomp_secure[of \"[\\<Delta>1, \\<Delta>2, \\<Delta>3]\" \\<Delta>e])"], ["proof (prove)\ngoal (5 subgoals):\n 1. [\\<Delta>1, \\<Delta>2, \\<Delta>3] \\<noteq> []\n 2. \\<And>vl vl1.\n       B vl vl1 \\<Longrightarrow>\n       hd [\\<Delta>1, \\<Delta>2, \\<Delta>3] istate vl istate vl1\n 3. \\<And>\\<Delta>1a \\<Delta>2a.\n       (\\<Delta>1a, \\<Delta>2a)\n       \\<in> allConsec [\\<Delta>1, \\<Delta>2, \\<Delta>3] \\<Longrightarrow>\n       unwind_cont \\<Delta>1a {\\<Delta>1a, \\<Delta>2a, \\<Delta>e}\n 4. unwind_cont (last [\\<Delta>1, \\<Delta>2, \\<Delta>3])\n     {last [\\<Delta>1, \\<Delta>2, \\<Delta>3], \\<Delta>e}\n 5. unwind_exit \\<Delta>e", "using assms"], ["proof (prove)\nusing this:\n  B ?vl4 ?vl1.4 \\<Longrightarrow> \\<Delta>1 istate ?vl4 istate ?vl1.4\n  unwind_cont \\<Delta>1 {\\<Delta>1, \\<Delta>2, \\<Delta>e}\n  unwind_cont \\<Delta>2 {\\<Delta>2, \\<Delta>3, \\<Delta>e}\n  unwind_cont \\<Delta>3 {\\<Delta>3, \\<Delta>e}\n  unwind_exit \\<Delta>e\n\ngoal (5 subgoals):\n 1. [\\<Delta>1, \\<Delta>2, \\<Delta>3] \\<noteq> []\n 2. \\<And>vl vl1.\n       B vl vl1 \\<Longrightarrow>\n       hd [\\<Delta>1, \\<Delta>2, \\<Delta>3] istate vl istate vl1\n 3. \\<And>\\<Delta>1a \\<Delta>2a.\n       (\\<Delta>1a, \\<Delta>2a)\n       \\<in> allConsec [\\<Delta>1, \\<Delta>2, \\<Delta>3] \\<Longrightarrow>\n       unwind_cont \\<Delta>1a {\\<Delta>1a, \\<Delta>2a, \\<Delta>e}\n 4. unwind_cont (last [\\<Delta>1, \\<Delta>2, \\<Delta>3])\n     {last [\\<Delta>1, \\<Delta>2, \\<Delta>3], \\<Delta>e}\n 5. unwind_exit \\<Delta>e", "by auto"], ["", "corollary unwind_decomp4_secure:\nassumes\ni: \"\\<And> vl vl1. B vl vl1 \\<Longrightarrow> \\<Delta>1 istate vl istate vl1\"\nand c1: \"unwind_cont \\<Delta>1 {\\<Delta>1, \\<Delta>2, \\<Delta>e}\"\nand c2: \"unwind_cont \\<Delta>2 {\\<Delta>2, \\<Delta>3, \\<Delta>e}\"\nand c3: \"unwind_cont \\<Delta>3 {\\<Delta>3, \\<Delta>4, \\<Delta>e}\"\nand l: \"unwind_cont \\<Delta>4 {\\<Delta>4, \\<Delta>e}\"\nand e: \"unwind_exit \\<Delta>e\"\nshows secure"], ["proof (prove)\ngoal (1 subgoal):\n 1. secure", "apply(rule unwind_decomp_secure[of \"[\\<Delta>1, \\<Delta>2, \\<Delta>3, \\<Delta>4]\" \\<Delta>e])"], ["proof (prove)\ngoal (5 subgoals):\n 1. [\\<Delta>1, \\<Delta>2, \\<Delta>3, \\<Delta>4] \\<noteq> []\n 2. \\<And>vl vl1.\n       B vl vl1 \\<Longrightarrow>\n       hd [\\<Delta>1, \\<Delta>2, \\<Delta>3, \\<Delta>4] istate vl istate vl1\n 3. \\<And>\\<Delta>1a \\<Delta>2a.\n       (\\<Delta>1a, \\<Delta>2a)\n       \\<in> allConsec\n              [\\<Delta>1, \\<Delta>2, \\<Delta>3, \\<Delta>4] \\<Longrightarrow>\n       unwind_cont \\<Delta>1a {\\<Delta>1a, \\<Delta>2a, \\<Delta>e}\n 4. unwind_cont (last [\\<Delta>1, \\<Delta>2, \\<Delta>3, \\<Delta>4])\n     {last [\\<Delta>1, \\<Delta>2, \\<Delta>3, \\<Delta>4], \\<Delta>e}\n 5. unwind_exit \\<Delta>e", "using assms"], ["proof (prove)\nusing this:\n  B ?vl4 ?vl1.4 \\<Longrightarrow> \\<Delta>1 istate ?vl4 istate ?vl1.4\n  unwind_cont \\<Delta>1 {\\<Delta>1, \\<Delta>2, \\<Delta>e}\n  unwind_cont \\<Delta>2 {\\<Delta>2, \\<Delta>3, \\<Delta>e}\n  unwind_cont \\<Delta>3 {\\<Delta>3, \\<Delta>4, \\<Delta>e}\n  unwind_cont \\<Delta>4 {\\<Delta>4, \\<Delta>e}\n  unwind_exit \\<Delta>e\n\ngoal (5 subgoals):\n 1. [\\<Delta>1, \\<Delta>2, \\<Delta>3, \\<Delta>4] \\<noteq> []\n 2. \\<And>vl vl1.\n       B vl vl1 \\<Longrightarrow>\n       hd [\\<Delta>1, \\<Delta>2, \\<Delta>3, \\<Delta>4] istate vl istate vl1\n 3. \\<And>\\<Delta>1a \\<Delta>2a.\n       (\\<Delta>1a, \\<Delta>2a)\n       \\<in> allConsec\n              [\\<Delta>1, \\<Delta>2, \\<Delta>3, \\<Delta>4] \\<Longrightarrow>\n       unwind_cont \\<Delta>1a {\\<Delta>1a, \\<Delta>2a, \\<Delta>e}\n 4. unwind_cont (last [\\<Delta>1, \\<Delta>2, \\<Delta>3, \\<Delta>4])\n     {last [\\<Delta>1, \\<Delta>2, \\<Delta>3, \\<Delta>4], \\<Delta>e}\n 5. unwind_exit \\<Delta>e", "by auto"], ["", "corollary unwind_decomp5_secure:\nassumes\ni: \"\\<And> vl vl1. B vl vl1 \\<Longrightarrow> \\<Delta>1 istate vl istate vl1\"\nand c1: \"unwind_cont \\<Delta>1 {\\<Delta>1, \\<Delta>2, \\<Delta>e}\"\nand c2: \"unwind_cont \\<Delta>2 {\\<Delta>2, \\<Delta>3, \\<Delta>e}\"\nand c3: \"unwind_cont \\<Delta>3 {\\<Delta>3, \\<Delta>4, \\<Delta>e}\"\nand c4: \"unwind_cont \\<Delta>4 {\\<Delta>4, \\<Delta>5, \\<Delta>e}\"\nand l: \"unwind_cont \\<Delta>5 {\\<Delta>5, \\<Delta>e}\"\nand e: \"unwind_exit \\<Delta>e\"\nshows secure"], ["proof (prove)\ngoal (1 subgoal):\n 1. secure", "apply(rule unwind_decomp_secure[of \"[\\<Delta>1, \\<Delta>2, \\<Delta>3, \\<Delta>4, \\<Delta>5]\" \\<Delta>e])"], ["proof (prove)\ngoal (5 subgoals):\n 1. [\\<Delta>1, \\<Delta>2, \\<Delta>3, \\<Delta>4, \\<Delta>5] \\<noteq> []\n 2. \\<And>vl vl1.\n       B vl vl1 \\<Longrightarrow>\n       hd [\\<Delta>1, \\<Delta>2, \\<Delta>3, \\<Delta>4, \\<Delta>5] istate vl\n        istate vl1\n 3. \\<And>\\<Delta>1a \\<Delta>2a.\n       (\\<Delta>1a, \\<Delta>2a)\n       \\<in> allConsec\n              [\\<Delta>1, \\<Delta>2, \\<Delta>3, \\<Delta>4,\n               \\<Delta>5] \\<Longrightarrow>\n       unwind_cont \\<Delta>1a {\\<Delta>1a, \\<Delta>2a, \\<Delta>e}\n 4. unwind_cont\n     (last [\\<Delta>1, \\<Delta>2, \\<Delta>3, \\<Delta>4, \\<Delta>5])\n     {last [\\<Delta>1, \\<Delta>2, \\<Delta>3, \\<Delta>4, \\<Delta>5],\n      \\<Delta>e}\n 5. unwind_exit \\<Delta>e", "using assms"], ["proof (prove)\nusing this:\n  B ?vl4 ?vl1.4 \\<Longrightarrow> \\<Delta>1 istate ?vl4 istate ?vl1.4\n  unwind_cont \\<Delta>1 {\\<Delta>1, \\<Delta>2, \\<Delta>e}\n  unwind_cont \\<Delta>2 {\\<Delta>2, \\<Delta>3, \\<Delta>e}\n  unwind_cont \\<Delta>3 {\\<Delta>3, \\<Delta>4, \\<Delta>e}\n  unwind_cont \\<Delta>4 {\\<Delta>4, \\<Delta>5, \\<Delta>e}\n  unwind_cont \\<Delta>5 {\\<Delta>5, \\<Delta>e}\n  unwind_exit \\<Delta>e\n\ngoal (5 subgoals):\n 1. [\\<Delta>1, \\<Delta>2, \\<Delta>3, \\<Delta>4, \\<Delta>5] \\<noteq> []\n 2. \\<And>vl vl1.\n       B vl vl1 \\<Longrightarrow>\n       hd [\\<Delta>1, \\<Delta>2, \\<Delta>3, \\<Delta>4, \\<Delta>5] istate vl\n        istate vl1\n 3. \\<And>\\<Delta>1a \\<Delta>2a.\n       (\\<Delta>1a, \\<Delta>2a)\n       \\<in> allConsec\n              [\\<Delta>1, \\<Delta>2, \\<Delta>3, \\<Delta>4,\n               \\<Delta>5] \\<Longrightarrow>\n       unwind_cont \\<Delta>1a {\\<Delta>1a, \\<Delta>2a, \\<Delta>e}\n 4. unwind_cont\n     (last [\\<Delta>1, \\<Delta>2, \\<Delta>3, \\<Delta>4, \\<Delta>5])\n     {last [\\<Delta>1, \\<Delta>2, \\<Delta>3, \\<Delta>4, \\<Delta>5],\n      \\<Delta>e}\n 5. unwind_exit \\<Delta>e", "by auto"], ["", "(*<*)"], ["", "end"], ["", "(* context BD_Security *)"], ["", "end"], ["", "(*>*)"]]}