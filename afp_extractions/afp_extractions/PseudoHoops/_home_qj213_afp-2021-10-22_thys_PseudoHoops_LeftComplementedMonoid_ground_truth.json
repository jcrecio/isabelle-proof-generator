{"file_name": "/home/qj213/afp-2021-10-22/thys/PseudoHoops/LeftComplementedMonoid.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/PseudoHoops", "problem_names": ["lemma lcm_D: \"a l\\<rightarrow> a = 1\"", "lemma left_one_inf [simp]: \"1 \\<sqinter> a = a\"", "lemma left_one_impl [simp]: \"1 l\\<rightarrow> a = a\"", "lemma lcm_A: \"(a l\\<rightarrow> b) * a = (b l\\<rightarrow> a) * b\"", "lemma lcm_B: \"((a * b) l\\<rightarrow> c) = (a l\\<rightarrow> (b l\\<rightarrow> c))\"", "lemma lcm_C: \"(a \\<le> b) = ((a l\\<rightarrow> b) = 1)\"", "lemma A: \"(1 l\\<rightarrow> a) l\\<rightarrow> 1 = 1\"", "lemma B: \"(1 l\\<rightarrow> a) \\<le> 1\"", "lemma C: \"a \\<le> (1 l\\<rightarrow> a)\"", "lemma D: \"a \\<le> 1\"", "lemma less_eq: \"(a \\<le> b) = (\\<exists> c . a = (c * b))\"", "lemma F: \"(a * b) * c l\\<rightarrow> z = a * (b * c) l\\<rightarrow> z\"", "lemma associativity: \"(a * b) * c = a * (b * c)\"", "lemma H: \"a * b \\<le> b\"", "lemma I: \"a * b l\\<rightarrow> b = 1\"", "lemma K: \"a \\<le> b \\<Longrightarrow> a * c \\<le> b * c\"", "lemma L: \"(x * a \\<le> b) = (x \\<le> a l\\<rightarrow> b)\"", "lemma (in left_complemented_monoid) left_complemented_monoid: \n    \"class.left_complemented_monoid_algebra (*) inf (l\\<rightarrow>) (\\<le>) (<) 1\""], "translations": [["", "lemma lcm_D: \"a l\\<rightarrow> a = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a l\\<rightarrow> a = (1::'a)", "apply (rule antisym, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (1::'a) \\<le> a l\\<rightarrow> a", "by (unfold left_residual [THEN sym], simp)"], ["", "subclass semilattice_inf"], ["proof (prove)\ngoal (1 subgoal):\n 1. class.semilattice_inf (\\<sqinter>) (\\<le>) (<)", "apply unfold_locales"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x y. x \\<sqinter> y \\<le> x\n 2. \\<And>x y. x \\<sqinter> y \\<le> y\n 3. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; x \\<le> z\\<rbrakk>\n       \\<Longrightarrow> x \\<le> y \\<sqinter> z", "apply (metis inf_l_def right_divisibility)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x y. x \\<sqinter> y \\<le> y\n 2. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; x \\<le> z\\<rbrakk>\n       \\<Longrightarrow> x \\<le> y \\<sqinter> z", "apply (metis inf_l_def left_residual order_refl)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; x \\<le> z\\<rbrakk>\n       \\<Longrightarrow> x \\<le> y \\<sqinter> z", "by (metis inf_l_def left_residual mult_right_mono right_divisibility)"], ["", "lemma left_one_inf [simp]: \"1 \\<sqinter> a = a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (1::'a) \\<sqinter> a = a", "by (rule antisym, simp_all)"], ["", "lemma left_one_impl [simp]: \"1 l\\<rightarrow> a = a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (1::'a) l\\<rightarrow> a = a", "(*by (metis inf_l_def left_one_inf mult.right_neutral)*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (1::'a) l\\<rightarrow> a = a", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (1::'a) l\\<rightarrow> a = a", "have \"1 l\\<rightarrow> a = 1 \\<sqinter> a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (1::'a) l\\<rightarrow> a = (1::'a) \\<sqinter> a", "by (unfold inf_l_def, simp)"], ["proof (state)\nthis:\n  (1::'a) l\\<rightarrow> a = (1::'a) \\<sqinter> a\n\ngoal (1 subgoal):\n 1. (1::'a) l\\<rightarrow> a = a", "also"], ["proof (state)\nthis:\n  (1::'a) l\\<rightarrow> a = (1::'a) \\<sqinter> a\n\ngoal (1 subgoal):\n 1. (1::'a) l\\<rightarrow> a = a", "have \"1 \\<sqinter> a = a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (1::'a) \\<sqinter> a = a", "by simp"], ["proof (state)\nthis:\n  (1::'a) \\<sqinter> a = a\n\ngoal (1 subgoal):\n 1. (1::'a) l\\<rightarrow> a = a", "finally"], ["proof (chain)\npicking this:\n  (1::'a) l\\<rightarrow> a = a", "show ?thesis"], ["proof (prove)\nusing this:\n  (1::'a) l\\<rightarrow> a = a\n\ngoal (1 subgoal):\n 1. (1::'a) l\\<rightarrow> a = a", "."], ["proof (state)\nthis:\n  (1::'a) l\\<rightarrow> a = a\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lcm_A: \"(a l\\<rightarrow> b) * a = (b l\\<rightarrow> a) * b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (a l\\<rightarrow> b) * a = (b l\\<rightarrow> a) * b", "apply (unfold inf_l_def [THEN sym])"], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<sqinter> b = b \\<sqinter> a", "by (simp add: inf_commute)"], ["", "lemma lcm_B: \"((a * b) l\\<rightarrow> c) = (a l\\<rightarrow> (b l\\<rightarrow> c))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a * b l\\<rightarrow> c = a l\\<rightarrow> b l\\<rightarrow> c", "apply (rule antisym)"], ["proof (prove)\ngoal (2 subgoals):\n 1. a * b l\\<rightarrow> c \\<le> a l\\<rightarrow> b l\\<rightarrow> c\n 2. a l\\<rightarrow> b l\\<rightarrow> c \\<le> a * b l\\<rightarrow> c", "apply (simp add: left_residual [THEN sym] mult.assoc)"], ["proof (prove)\ngoal (2 subgoals):\n 1. (a * b l\\<rightarrow> c) * (a * b) \\<le> c\n 2. a l\\<rightarrow> b l\\<rightarrow> c \\<le> a * b l\\<rightarrow> c", "apply (simp add: left_residual)"], ["proof (prove)\ngoal (1 subgoal):\n 1. a l\\<rightarrow> b l\\<rightarrow> c \\<le> a * b l\\<rightarrow> c", "apply (simp add: left_residual [THEN sym])"], ["proof (prove)\ngoal (1 subgoal):\n 1. (a l\\<rightarrow> b l\\<rightarrow> c) * (a * b) \\<le> c", "apply (rule_tac y=\"(b l\\<rightarrow> c) * b\" in order_trans)"], ["proof (prove)\ngoal (2 subgoals):\n 1. (a l\\<rightarrow> b l\\<rightarrow> c) * (a * b)\n    \\<le> (b l\\<rightarrow> c) * b\n 2. (b l\\<rightarrow> c) * b \\<le> c", "apply (simp add: mult.assoc [THEN sym])"], ["proof (prove)\ngoal (2 subgoals):\n 1. (a l\\<rightarrow> b l\\<rightarrow> c) * a * b\n    \\<le> (b l\\<rightarrow> c) * b\n 2. (b l\\<rightarrow> c) * b \\<le> c", "apply (rule mult_right_mono)"], ["proof (prove)\ngoal (2 subgoals):\n 1. (a l\\<rightarrow> b l\\<rightarrow> c) * a \\<le> b l\\<rightarrow> c\n 2. (b l\\<rightarrow> c) * b \\<le> c", "by (simp_all add: left_residual)"], ["", "lemma lcm_C: \"(a \\<le> b) = ((a l\\<rightarrow> b) = 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (a \\<le> b) = (a l\\<rightarrow> b = (1::'a))", "(*by (metis eq_iff left_residual mult.left_neutral one_greatest)*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (a \\<le> b) = (a l\\<rightarrow> b = (1::'a))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (a \\<le> b) = (a l\\<rightarrow> b = (1::'a))", "have \"(a \\<le> b) = (1 * a \\<le> b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (a \\<le> b) = ((1::'a) * a \\<le> b)", "by simp"], ["proof (state)\nthis:\n  (a \\<le> b) = ((1::'a) * a \\<le> b)\n\ngoal (1 subgoal):\n 1. (a \\<le> b) = (a l\\<rightarrow> b = (1::'a))", "also"], ["proof (state)\nthis:\n  (a \\<le> b) = ((1::'a) * a \\<le> b)\n\ngoal (1 subgoal):\n 1. (a \\<le> b) = (a l\\<rightarrow> b = (1::'a))", "have \"\\<dots> = (1 \\<le> a l\\<rightarrow> b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((1::'a) * a \\<le> b) = ((1::'a) \\<le> a l\\<rightarrow> b)", "by (unfold left_residual, simp)"], ["proof (state)\nthis:\n  ((1::'a) * a \\<le> b) = ((1::'a) \\<le> a l\\<rightarrow> b)\n\ngoal (1 subgoal):\n 1. (a \\<le> b) = (a l\\<rightarrow> b = (1::'a))", "also"], ["proof (state)\nthis:\n  ((1::'a) * a \\<le> b) = ((1::'a) \\<le> a l\\<rightarrow> b)\n\ngoal (1 subgoal):\n 1. (a \\<le> b) = (a l\\<rightarrow> b = (1::'a))", "have \"\\<dots> = (a l\\<rightarrow> b = 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((1::'a) \\<le> a l\\<rightarrow> b) = (a l\\<rightarrow> b = (1::'a))", "apply safe"], ["proof (prove)\ngoal (1 subgoal):\n 1. (1::'a) \\<le> a l\\<rightarrow> b \\<Longrightarrow>\n    a l\\<rightarrow> b = (1::'a)", "by(rule antisym, simp_all)"], ["proof (state)\nthis:\n  ((1::'a) \\<le> a l\\<rightarrow> b) = (a l\\<rightarrow> b = (1::'a))\n\ngoal (1 subgoal):\n 1. (a \\<le> b) = (a l\\<rightarrow> b = (1::'a))", "finally"], ["proof (chain)\npicking this:\n  (a \\<le> b) = (a l\\<rightarrow> b = (1::'a))", "show ?thesis"], ["proof (prove)\nusing this:\n  (a \\<le> b) = (a l\\<rightarrow> b = (1::'a))\n\ngoal (1 subgoal):\n 1. (a \\<le> b) = (a l\\<rightarrow> b = (1::'a))", "."], ["proof (state)\nthis:\n  (a \\<le> b) = (a l\\<rightarrow> b = (1::'a))\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "class less_def = ord +\n  assumes less_def: \"(a < b) = ((a \\<le> b) \\<and> \\<not> (b \\<le> a))\""], ["", "class one_times = one + times +\n  assumes one_left [simp]: \"1 * a = a\" \n  and one_right [simp]: \"a * 1 = a\""], ["", "class left_complemented_monoid_algebra = left_imp + one_times + left_inf + less_def +\n  assumes left_impl_one [simp]: \"a l\\<rightarrow> a = 1\"\n  and left_impl_times: \"(a l\\<rightarrow> b) * a = (b l\\<rightarrow> a) * b\"\n  and left_impl_ded: \"((a * b) l\\<rightarrow> c) = (a l\\<rightarrow> (b l\\<rightarrow> c))\"\n  and left_lesseq: \"(a \\<le> b) = ((a l\\<rightarrow> b) = 1)\"\nbegin"], ["", "lemma A: \"(1 l\\<rightarrow> a) l\\<rightarrow> 1 = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((1::'a) l\\<rightarrow> a) l\\<rightarrow> (1::'a) = (1::'a)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. ((1::'a) l\\<rightarrow> a) l\\<rightarrow> (1::'a) = (1::'a)", "have \"(1 l\\<rightarrow> a) l\\<rightarrow> 1 = (1 l\\<rightarrow> a) * 1 l\\<rightarrow> 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((1::'a) l\\<rightarrow> a) l\\<rightarrow> (1::'a) =\n    ((1::'a) l\\<rightarrow> a) * (1::'a) l\\<rightarrow> (1::'a)", "by simp"], ["proof (state)\nthis:\n  ((1::'a) l\\<rightarrow> a) l\\<rightarrow> (1::'a) =\n  ((1::'a) l\\<rightarrow> a) * (1::'a) l\\<rightarrow> (1::'a)\n\ngoal (1 subgoal):\n 1. ((1::'a) l\\<rightarrow> a) l\\<rightarrow> (1::'a) = (1::'a)", "also"], ["proof (state)\nthis:\n  ((1::'a) l\\<rightarrow> a) l\\<rightarrow> (1::'a) =\n  ((1::'a) l\\<rightarrow> a) * (1::'a) l\\<rightarrow> (1::'a)\n\ngoal (1 subgoal):\n 1. ((1::'a) l\\<rightarrow> a) l\\<rightarrow> (1::'a) = (1::'a)", "have \"... = (a l\\<rightarrow> 1) * a l\\<rightarrow> 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((1::'a) l\\<rightarrow> a) * (1::'a) l\\<rightarrow> (1::'a) =\n    (a l\\<rightarrow> (1::'a)) * a l\\<rightarrow> (1::'a)", "by (subst left_impl_times, simp)"], ["proof (state)\nthis:\n  ((1::'a) l\\<rightarrow> a) * (1::'a) l\\<rightarrow> (1::'a) =\n  (a l\\<rightarrow> (1::'a)) * a l\\<rightarrow> (1::'a)\n\ngoal (1 subgoal):\n 1. ((1::'a) l\\<rightarrow> a) l\\<rightarrow> (1::'a) = (1::'a)", "also"], ["proof (state)\nthis:\n  ((1::'a) l\\<rightarrow> a) * (1::'a) l\\<rightarrow> (1::'a) =\n  (a l\\<rightarrow> (1::'a)) * a l\\<rightarrow> (1::'a)\n\ngoal (1 subgoal):\n 1. ((1::'a) l\\<rightarrow> a) l\\<rightarrow> (1::'a) = (1::'a)", "have \"... = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (a l\\<rightarrow> (1::'a)) * a l\\<rightarrow> (1::'a) = (1::'a)", "by (simp add: left_impl_ded)"], ["proof (state)\nthis:\n  (a l\\<rightarrow> (1::'a)) * a l\\<rightarrow> (1::'a) = (1::'a)\n\ngoal (1 subgoal):\n 1. ((1::'a) l\\<rightarrow> a) l\\<rightarrow> (1::'a) = (1::'a)", "finally"], ["proof (chain)\npicking this:\n  ((1::'a) l\\<rightarrow> a) l\\<rightarrow> (1::'a) = (1::'a)", "show ?thesis"], ["proof (prove)\nusing this:\n  ((1::'a) l\\<rightarrow> a) l\\<rightarrow> (1::'a) = (1::'a)\n\ngoal (1 subgoal):\n 1. ((1::'a) l\\<rightarrow> a) l\\<rightarrow> (1::'a) = (1::'a)", "."], ["proof (state)\nthis:\n  ((1::'a) l\\<rightarrow> a) l\\<rightarrow> (1::'a) = (1::'a)\n\ngoal:\nNo subgoals!", "qed"], ["", "subclass order"], ["proof (prove)\ngoal (1 subgoal):\n 1. class.order (\\<le>) (<)", "proof"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x y. (x < y) = (x \\<le> y \\<and> \\<not> y \\<le> x)\n 2. \\<And>x. x \\<le> x\n 3. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; y \\<le> z\\<rbrakk> \\<Longrightarrow> x \\<le> z\n 4. \\<And>x y.\n       \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y", "fix x y"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x y. (x < y) = (x \\<le> y \\<and> \\<not> y \\<le> x)\n 2. \\<And>x. x \\<le> x\n 3. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; y \\<le> z\\<rbrakk> \\<Longrightarrow> x \\<le> z\n 4. \\<And>x y.\n       \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y", "show \"(x < y) = (x \\<le> y \\<and> \\<not> y \\<le> x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x < y) = (x \\<le> y \\<and> \\<not> y \\<le> x)", "by (unfold less_def, simp)"], ["proof (state)\nthis:\n  (x < y) = (x \\<le> y \\<and> \\<not> y \\<le> x)\n\ngoal (3 subgoals):\n 1. \\<And>x. x \\<le> x\n 2. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; y \\<le> z\\<rbrakk> \\<Longrightarrow> x \\<le> z\n 3. \\<And>x y.\n       \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x. x \\<le> x\n 2. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; y \\<le> z\\<rbrakk> \\<Longrightarrow> x \\<le> z\n 3. \\<And>x y.\n       \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y", "fix x"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x. x \\<le> x\n 2. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; y \\<le> z\\<rbrakk> \\<Longrightarrow> x \\<le> z\n 3. \\<And>x y.\n       \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y", "show \"x \\<le> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<le> x", "by (unfold left_lesseq, simp)"], ["proof (state)\nthis:\n  x \\<le> x\n\ngoal (2 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; y \\<le> z\\<rbrakk> \\<Longrightarrow> x \\<le> z\n 2. \\<And>x y.\n       \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; y \\<le> z\\<rbrakk> \\<Longrightarrow> x \\<le> z\n 2. \\<And>x y.\n       \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y", "fix x y z"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; y \\<le> z\\<rbrakk> \\<Longrightarrow> x \\<le> z\n 2. \\<And>x y.\n       \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y", "assume a: \"x \\<le> y\""], ["proof (state)\nthis:\n  x \\<le> y\n\ngoal (2 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; y \\<le> z\\<rbrakk> \\<Longrightarrow> x \\<le> z\n 2. \\<And>x y.\n       \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y", "assume b: \"y \\<le> z\""], ["proof (state)\nthis:\n  y \\<le> z\n\ngoal (2 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; y \\<le> z\\<rbrakk> \\<Longrightarrow> x \\<le> z\n 2. \\<And>x y.\n       \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y", "have \"x l\\<rightarrow> z = 1 * x l\\<rightarrow> z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x l\\<rightarrow> z = (1::'a) * x l\\<rightarrow> z", "by simp"], ["proof (state)\nthis:\n  x l\\<rightarrow> z = (1::'a) * x l\\<rightarrow> z\n\ngoal (2 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; y \\<le> z\\<rbrakk> \\<Longrightarrow> x \\<le> z\n 2. \\<And>x y.\n       \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y", "also"], ["proof (state)\nthis:\n  x l\\<rightarrow> z = (1::'a) * x l\\<rightarrow> z\n\ngoal (2 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; y \\<le> z\\<rbrakk> \\<Longrightarrow> x \\<le> z\n 2. \\<And>x y.\n       \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y", "have \"... = (x l\\<rightarrow> y) * x l\\<rightarrow> z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (1::'a) * x l\\<rightarrow> z = (x l\\<rightarrow> y) * x l\\<rightarrow> z", "by (cut_tac a, simp add: left_lesseq)"], ["proof (state)\nthis:\n  (1::'a) * x l\\<rightarrow> z = (x l\\<rightarrow> y) * x l\\<rightarrow> z\n\ngoal (2 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; y \\<le> z\\<rbrakk> \\<Longrightarrow> x \\<le> z\n 2. \\<And>x y.\n       \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y", "also"], ["proof (state)\nthis:\n  (1::'a) * x l\\<rightarrow> z = (x l\\<rightarrow> y) * x l\\<rightarrow> z\n\ngoal (2 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; y \\<le> z\\<rbrakk> \\<Longrightarrow> x \\<le> z\n 2. \\<And>x y.\n       \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y", "have \"... = (y l\\<rightarrow> x) * y l\\<rightarrow> z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x l\\<rightarrow> y) * x l\\<rightarrow> z =\n    (y l\\<rightarrow> x) * y l\\<rightarrow> z", "by (simp add: left_impl_times)"], ["proof (state)\nthis:\n  (x l\\<rightarrow> y) * x l\\<rightarrow> z =\n  (y l\\<rightarrow> x) * y l\\<rightarrow> z\n\ngoal (2 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; y \\<le> z\\<rbrakk> \\<Longrightarrow> x \\<le> z\n 2. \\<And>x y.\n       \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y", "also"], ["proof (state)\nthis:\n  (x l\\<rightarrow> y) * x l\\<rightarrow> z =\n  (y l\\<rightarrow> x) * y l\\<rightarrow> z\n\ngoal (2 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; y \\<le> z\\<rbrakk> \\<Longrightarrow> x \\<le> z\n 2. \\<And>x y.\n       \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y", "have \"... = (y l\\<rightarrow> x) l\\<rightarrow> (y l\\<rightarrow> z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (y l\\<rightarrow> x) * y l\\<rightarrow> z =\n    (y l\\<rightarrow> x) l\\<rightarrow> y l\\<rightarrow> z", "by (simp add: left_impl_ded)"], ["proof (state)\nthis:\n  (y l\\<rightarrow> x) * y l\\<rightarrow> z =\n  (y l\\<rightarrow> x) l\\<rightarrow> y l\\<rightarrow> z\n\ngoal (2 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; y \\<le> z\\<rbrakk> \\<Longrightarrow> x \\<le> z\n 2. \\<And>x y.\n       \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y", "also"], ["proof (state)\nthis:\n  (y l\\<rightarrow> x) * y l\\<rightarrow> z =\n  (y l\\<rightarrow> x) l\\<rightarrow> y l\\<rightarrow> z\n\ngoal (2 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; y \\<le> z\\<rbrakk> \\<Longrightarrow> x \\<le> z\n 2. \\<And>x y.\n       \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y", "have \"... = (y l\\<rightarrow> x) l\\<rightarrow> 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (y l\\<rightarrow> x) l\\<rightarrow> y l\\<rightarrow> z =\n    (y l\\<rightarrow> x) l\\<rightarrow> (1::'a)", "by (cut_tac b, simp add: left_lesseq)"], ["proof (state)\nthis:\n  (y l\\<rightarrow> x) l\\<rightarrow> y l\\<rightarrow> z =\n  (y l\\<rightarrow> x) l\\<rightarrow> (1::'a)\n\ngoal (2 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; y \\<le> z\\<rbrakk> \\<Longrightarrow> x \\<le> z\n 2. \\<And>x y.\n       \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y", "also"], ["proof (state)\nthis:\n  (y l\\<rightarrow> x) l\\<rightarrow> y l\\<rightarrow> z =\n  (y l\\<rightarrow> x) l\\<rightarrow> (1::'a)\n\ngoal (2 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; y \\<le> z\\<rbrakk> \\<Longrightarrow> x \\<le> z\n 2. \\<And>x y.\n       \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y", "have \"... = (1 * y l\\<rightarrow> x) l\\<rightarrow> 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (y l\\<rightarrow> x) l\\<rightarrow> (1::'a) =\n    ((1::'a) * y l\\<rightarrow> x) l\\<rightarrow> (1::'a)", "by simp"], ["proof (state)\nthis:\n  (y l\\<rightarrow> x) l\\<rightarrow> (1::'a) =\n  ((1::'a) * y l\\<rightarrow> x) l\\<rightarrow> (1::'a)\n\ngoal (2 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; y \\<le> z\\<rbrakk> \\<Longrightarrow> x \\<le> z\n 2. \\<And>x y.\n       \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y", "also"], ["proof (state)\nthis:\n  (y l\\<rightarrow> x) l\\<rightarrow> (1::'a) =\n  ((1::'a) * y l\\<rightarrow> x) l\\<rightarrow> (1::'a)\n\ngoal (2 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; y \\<le> z\\<rbrakk> \\<Longrightarrow> x \\<le> z\n 2. \\<And>x y.\n       \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y", "have \"... = (1 l\\<rightarrow> (y l\\<rightarrow> x)) l\\<rightarrow> 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((1::'a) * y l\\<rightarrow> x) l\\<rightarrow> (1::'a) =\n    ((1::'a) l\\<rightarrow> y l\\<rightarrow> x) l\\<rightarrow> (1::'a)", "by (subst left_impl_ded, simp)"], ["proof (state)\nthis:\n  ((1::'a) * y l\\<rightarrow> x) l\\<rightarrow> (1::'a) =\n  ((1::'a) l\\<rightarrow> y l\\<rightarrow> x) l\\<rightarrow> (1::'a)\n\ngoal (2 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; y \\<le> z\\<rbrakk> \\<Longrightarrow> x \\<le> z\n 2. \\<And>x y.\n       \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y", "also"], ["proof (state)\nthis:\n  ((1::'a) * y l\\<rightarrow> x) l\\<rightarrow> (1::'a) =\n  ((1::'a) l\\<rightarrow> y l\\<rightarrow> x) l\\<rightarrow> (1::'a)\n\ngoal (2 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; y \\<le> z\\<rbrakk> \\<Longrightarrow> x \\<le> z\n 2. \\<And>x y.\n       \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y", "have \"... = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((1::'a) l\\<rightarrow> y l\\<rightarrow> x) l\\<rightarrow> (1::'a) =\n    (1::'a)", "by (simp add: A)"], ["proof (state)\nthis:\n  ((1::'a) l\\<rightarrow> y l\\<rightarrow> x) l\\<rightarrow> (1::'a) =\n  (1::'a)\n\ngoal (2 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; y \\<le> z\\<rbrakk> \\<Longrightarrow> x \\<le> z\n 2. \\<And>x y.\n       \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y", "finally"], ["proof (chain)\npicking this:\n  x l\\<rightarrow> z = (1::'a)", "show \"x \\<le> z\""], ["proof (prove)\nusing this:\n  x l\\<rightarrow> z = (1::'a)\n\ngoal (1 subgoal):\n 1. x \\<le> z", "by (simp add: left_lesseq)"], ["proof (state)\nthis:\n  x \\<le> z\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y", "fix x y z"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y", "assume a: \"x \\<le> y\""], ["proof (state)\nthis:\n  x \\<le> y\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y", "assume b: \"y \\<le> x\""], ["proof (state)\nthis:\n  y \\<le> x\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y", "have \"x = (x l\\<rightarrow> y) * x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x = (x l\\<rightarrow> y) * x", "by (cut_tac a, simp add: left_lesseq)"], ["proof (state)\nthis:\n  x = (x l\\<rightarrow> y) * x\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y", "also"], ["proof (state)\nthis:\n  x = (x l\\<rightarrow> y) * x\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y", "have \"... = (y l\\<rightarrow> x) * y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x l\\<rightarrow> y) * x = (y l\\<rightarrow> x) * y", "by (simp add: left_impl_times)"], ["proof (state)\nthis:\n  (x l\\<rightarrow> y) * x = (y l\\<rightarrow> x) * y\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y", "also"], ["proof (state)\nthis:\n  (x l\\<rightarrow> y) * x = (y l\\<rightarrow> x) * y\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y", "have \"... = y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (y l\\<rightarrow> x) * y = y", "by (cut_tac b, simp add: left_lesseq)"], ["proof (state)\nthis:\n  (y l\\<rightarrow> x) * y = y\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y", "finally"], ["proof (chain)\npicking this:\n  x = y", "show \"x = y\""], ["proof (prove)\nusing this:\n  x = y\n\ngoal (1 subgoal):\n 1. x = y", "."], ["proof (state)\nthis:\n  x = y\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma B: \"(1 l\\<rightarrow> a) \\<le> 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (1::'a) l\\<rightarrow> a \\<le> (1::'a)", "apply (unfold left_lesseq)"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((1::'a) l\\<rightarrow> a) l\\<rightarrow> (1::'a) = (1::'a)", "by (rule A)"], ["", "lemma C: \"a \\<le> (1 l\\<rightarrow> a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<le> (1::'a) l\\<rightarrow> a", "by (simp add: left_lesseq left_impl_ded [THEN sym])"], ["", "lemma D: \"a \\<le> 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<le> (1::'a)", "apply (rule_tac y = \"1 l\\<rightarrow> a\" in order_trans)"], ["proof (prove)\ngoal (2 subgoals):\n 1. a \\<le> (1::'a) l\\<rightarrow> a\n 2. (1::'a) l\\<rightarrow> a \\<le> (1::'a)", "by (simp_all add: C B)"], ["", "lemma less_eq: \"(a \\<le> b) = (\\<exists> c . a = (c * b))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (a \\<le> b) = (\\<exists>c. a = c * b)", "(*by (metis left_impl_ded left_impl_one left_impl_times left_lesseq one_left)*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (a \\<le> b) = (\\<exists>c. a = c * b)", "apply safe"], ["proof (prove)\ngoal (2 subgoals):\n 1. a \\<le> b \\<Longrightarrow> \\<exists>c. a = c * b\n 2. \\<And>c. a = c * b \\<Longrightarrow> c * b \\<le> b", "apply (unfold left_lesseq)"], ["proof (prove)\ngoal (2 subgoals):\n 1. a l\\<rightarrow> b = (1::'a) \\<Longrightarrow> \\<exists>c. a = c * b\n 2. \\<And>c. a = c * b \\<Longrightarrow> c * b l\\<rightarrow> b = (1::'a)", "apply (rule_tac x = \"b l\\<rightarrow> a\" in exI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. a l\\<rightarrow> b = (1::'a) \\<Longrightarrow>\n    a = (b l\\<rightarrow> a) * b\n 2. \\<And>c. a = c * b \\<Longrightarrow> c * b l\\<rightarrow> b = (1::'a)", "apply (simp add: left_impl_times)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>c. a = c * b \\<Longrightarrow> c * b l\\<rightarrow> b = (1::'a)", "apply (simp add: left_impl_ded)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>c. a = c * b \\<Longrightarrow> c l\\<rightarrow> (1::'a) = (1::'a)", "apply (case_tac \"c \\<le> 1\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>c.\n       \\<lbrakk>a = c * b; c \\<le> (1::'a)\\<rbrakk>\n       \\<Longrightarrow> c l\\<rightarrow> (1::'a) = (1::'a)\n 2. \\<And>c.\n       \\<lbrakk>a = c * b; \\<not> c \\<le> (1::'a)\\<rbrakk>\n       \\<Longrightarrow> c l\\<rightarrow> (1::'a) = (1::'a)", "apply (simp add: left_lesseq)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>c.\n       \\<lbrakk>a = c * b; \\<not> c \\<le> (1::'a)\\<rbrakk>\n       \\<Longrightarrow> c l\\<rightarrow> (1::'a) = (1::'a)", "by (simp add: D)"], ["", "lemma F: \"(a * b) * c l\\<rightarrow> z = a * (b * c) l\\<rightarrow> z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a * b * c l\\<rightarrow> z = a * (b * c) l\\<rightarrow> z", "by (simp add: left_impl_ded)"], ["", "lemma associativity: \"(a * b) * c = a * (b * c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a * b * c = a * (b * c)", "(*by (metis F left_impl_one left_impl_times one_left)*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. a * b * c = a * (b * c)", "apply (rule antisym)"], ["proof (prove)\ngoal (2 subgoals):\n 1. a * b * c \\<le> a * (b * c)\n 2. a * (b * c) \\<le> a * b * c", "apply (unfold left_lesseq)"], ["proof (prove)\ngoal (2 subgoals):\n 1. a * b * c l\\<rightarrow> a * (b * c) = (1::'a)\n 2. a * (b * c) l\\<rightarrow> a * b * c = (1::'a)", "apply (simp add: F)"], ["proof (prove)\ngoal (1 subgoal):\n 1. a * (b * c) l\\<rightarrow> a * b * c = (1::'a)", "by (simp add: F [THEN sym])"], ["", "lemma H: \"a * b \\<le> b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a * b \\<le> b", "apply (simp add: less_eq)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>c. a * b = c * b", "by auto"], ["", "lemma I: \"a * b l\\<rightarrow> b = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a * b l\\<rightarrow> b = (1::'a)", "apply (case_tac \"a * b \\<le> b\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. a * b \\<le> b \\<Longrightarrow> a * b l\\<rightarrow> b = (1::'a)\n 2. \\<not> a * b \\<le> b \\<Longrightarrow> a * b l\\<rightarrow> b = (1::'a)", "apply (simp add: left_lesseq)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> a * b \\<le> b \\<Longrightarrow> a * b l\\<rightarrow> b = (1::'a)", "by (simp add: H)"], ["", "lemma K: \"a \\<le> b \\<Longrightarrow> a * c \\<le> b * c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<le> b \\<Longrightarrow> a * c \\<le> b * c", "apply (unfold less_eq)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>c. a = c * b \\<Longrightarrow>\n    \\<exists>ca. a * c = ca * (b * c)", "apply clarify"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ca.\n       a = ca * b \\<Longrightarrow> \\<exists>cb. ca * b * c = cb * (b * c)", "apply (rule_tac x = \"ca\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ca. a = ca * b \\<Longrightarrow> ca * b * c = ca * (b * c)", "by (simp add: associativity)"], ["", "lemma L: \"(x * a \\<le> b) = (x \\<le> a l\\<rightarrow> b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x * a \\<le> b) = (x \\<le> a l\\<rightarrow> b)", "by (simp add: left_lesseq left_impl_ded)"], ["", "subclass left_complemented_monoid"], ["proof (prove)\ngoal (1 subgoal):\n 1. class.left_complemented_monoid (*) (\\<sqinter>) (l\\<rightarrow>) (1::'a)\n     (\\<le>) (<)", "apply unfold_locales"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>a. a \\<le> (1::'a)\n 2. \\<And>a b c. a * b * c = a * (b * c)\n 3. \\<And>a. (1::'a) * a = a\n 4. \\<And>a. a * (1::'a) = a\n 5. \\<And>a b c. a \\<le> b \\<Longrightarrow> a * c \\<le> b * c\n 6. \\<And>x a b. (x * a \\<le> b) = (x \\<le> a l\\<rightarrow> b)\n 7. \\<And>a b. (a \\<le> b) = (\\<exists>c. a = c * b)", "apply (simp_all add:  less_def D associativity K)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x a b. (x * a \\<le> b) = (x \\<le> a l\\<rightarrow> b)\n 2. \\<And>a b. (a \\<le> b) = (\\<exists>c. a = c * b)", "apply (simp add: L)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b. (a \\<le> b) = (\\<exists>c. a = c * b)", "by (simp add: less_eq)"], ["", "end"], ["", "lemma (in left_complemented_monoid) left_complemented_monoid: \n    \"class.left_complemented_monoid_algebra (*) inf (l\\<rightarrow>) (\\<le>) (<) 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. class.left_complemented_monoid_algebra (*) (\\<sqinter>) (l\\<rightarrow>)\n     (\\<le>) (<) (1::'a)", "by (unfold_locales, simp_all add: less_le_not_le lcm_A lcm_B lcm_C lcm_D)"], ["", "end"]]}