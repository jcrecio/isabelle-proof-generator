{"file_name": "/home/qj213/afp-2021-10-22/thys/Graph_Saturation/GraphRewriting.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Graph_Saturation", "problem_names": ["lemma nextMax_max[intro]:\n  assumes \"finite x\" \"v \\<in> x\"\n  shows \"v < nextMax x\" \"v \\<le> nextMax x\"", "lemma valid_selection_exists:\n  assumes \"worklist G Rs \\<noteq> {}\"\n          \"set_of_graph_rules Rs\"\n  shows \"\\<exists>L R f. valid_selection Rs G R f\"", "lemma valid_selectorD[dest]:\n  assumes \"valid_selector Rs selector\"\n  shows \"worklist G Rs = {} \\<longleftrightarrow> selector G = None\"\n        \"selector G = Some (R,f) \\<Longrightarrow> valid_selection Rs G R f\"", "lemma non_constructive_selector:\n  assumes \"set_of_graph_rules Rs\"\n  shows \"valid_selector Rs (non_constructive_selector Rs)\"", "lemma nextMax_set[simp]:\n  assumes \"sorted xs\"\n  shows \"nextMax (set xs) = (if xs = Nil then 0 else Suc (last xs))\"", "lemma nextMax_Un_eq[simp]:\n\"finite x \\<Longrightarrow> finite y \\<Longrightarrow> nextMax (x \\<union> y) = max (nextMax x) (nextMax y)\"", "lemma extend: (* extensible into the new graph *)\n  assumes \"graph_homomorphism (fst R) (LG E {0..<n}) f\" \"graph_rule R\"\n  defines \"g \\<equiv> extend n R f\"\n  defines \"G' \\<equiv> LG ((on_triple g `` (edges (snd R))) \\<union> E) {0..<max n (nextMax (Range g))}\"\n  shows \"graph_homomorphism (snd R) G' g\" \"agree_on (fst R) f g\" \"f \\<subseteq> g\"\n        \"subgraph (LG E {0..<n}) G'\"\n        \"weak_universal (t:: 'x itself) R (LG E {0..<n}) G' f g\"", "lemma selector_pushout:\n  assumes \"valid_selector Rs selector\" \"selector G'' = Some (R,f)\"\n  defines \"G \\<equiv> graph_of G''\"\n  assumes \"graph G\"\n  defines \"g \\<equiv> extend (fst G'') R f\"\n  defines \"G' \\<equiv> LG (on_triple g `` edges (snd R) \\<union> (snd G'')) {0..<max (fst G'') (nextMax (Range g))}\"\n  shows \"pushout_step (t:: 'x itself) R G G'\"", "lemma WPC_through_make_step:\n  assumes \"set_of_graph_rules Rs\" \"graph (graph_of (X 0))\"\n     and makestep: \"\\<forall> i. X (Suc i) = make_step selector (X i)\"\n     and selector: \"valid_selector Rs selector\"\n  shows \"Simple_WPC t Rs (\\<lambda> i. graph_of (X i))\" \"chain (\\<lambda> i. graph_of (X i))\"", "lemma N_occurs_finitely_often:\n  assumes \"finite Rs\" \"set_of_graph_rules Rs\" \"graph (graph_of (X 0))\"\n      and makestep: \"\\<And> i. X (Suc i) = make_step selector (X i)\"\n      and selector: \"valid_selector Rs selector\"\n    shows \"finite {(R,f). \\<exists> i. R\\<in> Rs \\<and> graph_homomorphism (fst R) (graph_of (X i)) f\n                        \\<and> nextMax (Range f) \\<le> N}\" (is \"finite {(R,f).?P R f}\")", "lemma inj_on_infinite:\n  assumes \"infinite A\" \"inj_on f A\" \"range f \\<subseteq> B\"\n  shows \"infinite B\"", "lemma makestep_makes_selector_inj:\n  assumes \"selector (X y) = Some (R,f)\"\n          \"selector (X x) = Some (R,f)\"\n          \"valid_selector Rs selector\"\n    and step: \"\\<forall> i. X (Suc i) = make_step selector (X i)\"\n    and chain:\"chain (\\<lambda> i. graph_of (X i))\"\n  shows \"x = y\"", "lemma fair_through_make_step:\n  assumes \"finite Rs\" \"set_of_graph_rules Rs\" \"graph (graph_of (X 0))\"\n     (* It should suffice to take infinitely many make_steps, \n        rather than having every step be a make_step,\n        but we focus on the algorithm as in the paper here *)\n     and makestep: \"\\<forall> i. X (Suc i) = make_step selector (X i)\"\n     and selector: \"valid_selector Rs selector\"\n  shows \"fair_chain Rs (\\<lambda> i. graph_of (X i))\"", "lemma mk_chain:\n  \"\\<forall> i. mk_chain sel Rs init (Suc i) = make_step sel (mk_chain sel Rs init i)\"", "lemma mk_chain_edges:\n  assumes \"valid_selector Rules sel\"\n          \"\\<Union> ((edges o snd) ` Rules) \\<subseteq> L \\<times> UNIV\"\n          \"edges (graph_of G) \\<subseteq> L \\<times> UNIV\"\n  shows \"edges (graph_of (mk_chain sel Rules G i)) \\<subseteq> L \\<times> UNIV\"", "lemma the_lcg_edges:\n  assumes \"valid_selector Rules sel\"\n          \"fst ` (\\<Union> ((edges o snd) ` Rules)) \\<subseteq> L\" (is \"fst `?fR \\<subseteq> _\")\n          \"fst ` snd G \\<subseteq> L\"\n  shows \"fst ` edges (the_lcg sel Rules G) \\<subseteq> L\"", "lemma lcg_through_make_step:\nassumes \"finite Rs\" \"set_of_graph_rules Rs\" \"graph (graph_of init)\"\n        \"valid_selector Rs sel\"\n  shows \"least_consequence_graph t Rs (graph_of init) (the_lcg sel Rs init)\""], "translations": [["", "lemma nextMax_max[intro]:\n  assumes \"finite x\" \"v \\<in> x\"\n  shows \"v < nextMax x\" \"v \\<le> nextMax x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v < nextMax x &&& v \\<le> nextMax x", "using Max.coboundedI[OF assms] assms(2)"], ["proof (prove)\nusing this:\n  v \\<le> Max x\n  v \\<in> x\n\ngoal (1 subgoal):\n 1. v < nextMax x &&& v \\<le> nextMax x", "unfolding nextMax_def"], ["proof (prove)\nusing this:\n  v \\<le> Max x\n  v \\<in> x\n\ngoal (1 subgoal):\n 1. v < (if x = {} then 0 else Suc (Max x)) &&&\n    v \\<le> (if x = {} then 0 else Suc (Max x))", "by auto"], ["", "definition worklist :: \"nat \\<times> ('a \\<times> nat \\<times> nat) set\n           \\<Rightarrow> (('a, 'b) labeled_graph \\<times> ('a, 'b) labeled_graph) set\n              \\<Rightarrow> (nat \\<times> ('a, 'b) Graph_PreRule \\<times> ('b \\<times> nat) set) set\" where\n\"worklist G Rs \\<equiv> let G = graph_of G\n  in {(N,R,f). R\\<in> Rs \\<and> graph_homomorphism (fst R) G f \\<and> N = nextMax (Range f)\n                 \\<and> \\<not> extensible R G f }\""], ["", "definition valid_selection where\n\"valid_selection Rs G R f \\<equiv>\n  let wl = worklist G Rs in\n    (nextMax (Range f), R,f) \\<in> wl \\<and>\n    (\\<forall> (N,_) \\<in> wl. N \\<ge> nextMax (Range f)) \\<and>\n    graph_rule R\""], ["", "lemma valid_selection_exists:\n  assumes \"worklist G Rs \\<noteq> {}\"\n          \"set_of_graph_rules Rs\"\n  shows \"\\<exists>L R f. valid_selection Rs G R f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>L R f. valid_selection Rs G R f", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>L R f. valid_selection Rs G R f", "define wl where \"wl = worklist G Rs\""], ["proof (state)\nthis:\n  wl = worklist G Rs\n\ngoal (1 subgoal):\n 1. \\<exists>L R f. valid_selection Rs G R f", "hence wl_ne:\"wl \\<noteq> {}\""], ["proof (prove)\nusing this:\n  wl = worklist G Rs\n\ngoal (1 subgoal):\n 1. wl \\<noteq> {}", "using assms(1)"], ["proof (prove)\nusing this:\n  wl = worklist G Rs\n  worklist G Rs \\<noteq> {}\n\ngoal (1 subgoal):\n 1. wl \\<noteq> {}", "by auto"], ["proof (state)\nthis:\n  wl \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<exists>L R f. valid_selection Rs G R f", "let ?N = \"LEAST N. N \\<in> Domain wl\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>L R f. valid_selection Rs G R f", "from wl_ne"], ["proof (chain)\npicking this:\n  wl \\<noteq> {}", "have \"\\<exists> N. N \\<in> Domain wl\""], ["proof (prove)\nusing this:\n  wl \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<exists>N. N \\<in> Domain wl", "by auto"], ["proof (state)\nthis:\n  \\<exists>N. N \\<in> Domain wl\n\ngoal (1 subgoal):\n 1. \\<exists>L R f. valid_selection Rs G R f", "with LeastI2"], ["proof (chain)\npicking this:\n  \\<lbrakk>?P ?a; \\<And>x. ?P x \\<Longrightarrow> ?Q x\\<rbrakk>\n  \\<Longrightarrow> ?Q (Least ?P)\n  \\<exists>N. N \\<in> Domain wl", "have \"?N \\<in> Domain wl\""], ["proof (prove)\nusing this:\n  \\<lbrakk>?P ?a; \\<And>x. ?P x \\<Longrightarrow> ?Q x\\<rbrakk>\n  \\<Longrightarrow> ?Q (Least ?P)\n  \\<exists>N. N \\<in> Domain wl\n\ngoal (1 subgoal):\n 1. (LEAST N. N \\<in> Domain wl) \\<in> Domain wl", "by metis"], ["proof (state)\nthis:\n  (LEAST N. N \\<in> Domain wl) \\<in> Domain wl\n\ngoal (1 subgoal):\n 1. \\<exists>L R f. valid_selection Rs G R f", "then"], ["proof (chain)\npicking this:\n  (LEAST N. N \\<in> Domain wl) \\<in> Domain wl", "obtain L R f where NLRf:\"(?N,(L,R),f)\\<in>wl\""], ["proof (prove)\nusing this:\n  (LEAST N. N \\<in> Domain wl) \\<in> Domain wl\n\ngoal (1 subgoal):\n 1. (\\<And>L R f.\n        (LEAST N. N \\<in> Domain wl, (L, R), f) \\<in> wl \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  (LEAST N. N \\<in> Domain wl, (L, R), f) \\<in> wl\n\ngoal (1 subgoal):\n 1. \\<exists>L R f. valid_selection Rs G R f", "hence N_def:\"?N = nextMax (Range f)\"\n    and in_Rs: \"(L,R) \\<in> Rs\""], ["proof (prove)\nusing this:\n  (LEAST N. N \\<in> Domain wl, (L, R), f) \\<in> wl\n\ngoal (1 subgoal):\n 1. (LEAST N. N \\<in> Domain wl) = nextMax (Range f) &&& (L, R) \\<in> Rs", "unfolding wl_def worklist_def Let_def"], ["proof (prove)\nusing this:\n  (LEAST N.\n      N \\<in> Domain\n               {(N, R, f).\n                R \\<in> Rs \\<and>\n                graph_homomorphism (fst R) (graph_of G) f \\<and>\n                N = nextMax (Range f) \\<and>\n                \\<not> extensible R (graph_of G) f},\n   (L, R), f)\n  \\<in> {(N, R, f).\n         R \\<in> Rs \\<and>\n         graph_homomorphism (fst R) (graph_of G) f \\<and>\n         N = nextMax (Range f) \\<and> \\<not> extensible R (graph_of G) f}\n\ngoal (1 subgoal):\n 1. (LEAST N.\n        N \\<in> Domain\n                 {(N, R, f).\n                  R \\<in> Rs \\<and>\n                  graph_homomorphism (fst R) (graph_of G) f \\<and>\n                  N = nextMax (Range f) \\<and>\n                  \\<not> extensible R (graph_of G) f}) =\n    nextMax (Range f) &&&\n    (L, R) \\<in> Rs", "by auto"], ["proof (state)\nthis:\n  (LEAST N. N \\<in> Domain wl) = nextMax (Range f)\n  (L, R) \\<in> Rs\n\ngoal (1 subgoal):\n 1. \\<exists>L R f. valid_selection Rs G R f", "from Least_le wl_ne Domain.intros case_prodI2"], ["proof (chain)\npicking this:\n  ?P ?k \\<Longrightarrow> (LEAST x. ?P x) \\<le> ?k\n  wl \\<noteq> {}\n  (?a, ?b) \\<in> ?r \\<Longrightarrow> ?a \\<in> Domain ?r\n  (\\<And>a b. ?p = (a, b) \\<Longrightarrow> ?c a b) \\<Longrightarrow>\n  case ?p of (a, b) \\<Rightarrow> ?c a b", "have min:\"(\\<forall> (N',_) \\<in> wl. N' \\<ge> ?N)\""], ["proof (prove)\nusing this:\n  ?P ?k \\<Longrightarrow> (LEAST x. ?P x) \\<le> ?k\n  wl \\<noteq> {}\n  (?a, ?b) \\<in> ?r \\<Longrightarrow> ?a \\<in> Domain ?r\n  (\\<And>a b. ?p = (a, b) \\<Longrightarrow> ?c a b) \\<Longrightarrow>\n  case ?p of (a, b) \\<Rightarrow> ?c a b\n\ngoal (1 subgoal):\n 1. \\<forall>(N', uu_)\\<in>wl. (LEAST N. N \\<in> Domain wl) \\<le> N'", "by (metis (no_types, lifting))"], ["proof (state)\nthis:\n  \\<forall>(N', uu_)\\<in>wl. (LEAST N. N \\<in> Domain wl) \\<le> N'\n\ngoal (1 subgoal):\n 1. \\<exists>L R f. valid_selection Rs G R f", "from in_Rs"], ["proof (chain)\npicking this:\n  (L, R) \\<in> Rs", "have \"finite_graph R\" \"subgraph L R\""], ["proof (prove)\nusing this:\n  (L, R) \\<in> Rs\n\ngoal (1 subgoal):\n 1. finite_graph R &&& subgraph L R", "using assms(2)[unfolded set_of_graph_rules_def]"], ["proof (prove)\nusing this:\n  (L, R) \\<in> Rs\n  \\<forall>R\\<in>Rs. graph_rule R\n\ngoal (1 subgoal):\n 1. finite_graph R &&& subgraph L R", "by auto"], ["proof (state)\nthis:\n  finite_graph R\n  subgraph L R\n\ngoal (1 subgoal):\n 1. \\<exists>L R f. valid_selection Rs G R f", "with min NLRf N_def"], ["proof (chain)\npicking this:\n  \\<forall>(N', uu_)\\<in>wl. (LEAST N. N \\<in> Domain wl) \\<le> N'\n  (LEAST N. N \\<in> Domain wl, (L, R), f) \\<in> wl\n  (LEAST N. N \\<in> Domain wl) = nextMax (Range f)\n  finite_graph R\n  subgraph L R", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>(N', uu_)\\<in>wl. (LEAST N. N \\<in> Domain wl) \\<le> N'\n  (LEAST N. N \\<in> Domain wl, (L, R), f) \\<in> wl\n  (LEAST N. N \\<in> Domain wl) = nextMax (Range f)\n  finite_graph R\n  subgraph L R\n\ngoal (1 subgoal):\n 1. \\<exists>L R f. valid_selection Rs G R f", "unfolding wl_def[symmetric] valid_selection_def"], ["proof (prove)\nusing this:\n  \\<forall>(N', uu_)\\<in>wl. (LEAST N. N \\<in> Domain wl) \\<le> N'\n  (LEAST N. N \\<in> Domain wl, (L, R), f) \\<in> wl\n  (LEAST N. N \\<in> Domain wl) = nextMax (Range f)\n  finite_graph R\n  subgraph L R\n\ngoal (1 subgoal):\n 1. \\<exists>L R f.\n       let wl = wl\n       in (nextMax (Range f), R, f) \\<in> wl \\<and>\n          (\\<forall>(N, uu_)\\<in>wl. nextMax (Range f) \\<le> N) \\<and>\n          graph_rule R", "by auto"], ["proof (state)\nthis:\n  \\<exists>L R f. valid_selection Rs G R f\n\ngoal:\nNo subgoals!", "qed"], ["", "definition valid_selector where\n\"valid_selector Rs selector \\<equiv> \\<forall> G.\n   (worklist G Rs \\<noteq> {} \\<longrightarrow> (\\<exists> (R,f)\\<in>UNIV. selector G = Some (R,f)\n                               \\<and> valid_selection Rs G R f)) \\<and>\n   (worklist G Rs = {} \\<longrightarrow> selector G = None)\""], ["", "lemma valid_selectorD[dest]:\n  assumes \"valid_selector Rs selector\"\n  shows \"worklist G Rs = {} \\<longleftrightarrow> selector G = None\"\n        \"selector G = Some (R,f) \\<Longrightarrow> valid_selection Rs G R f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (worklist G Rs = {}) = (selector G = None) &&&\n    (selector G = Some (R, f) \\<Longrightarrow> valid_selection Rs G R f)", "using assms[unfolded valid_selector_def,rule_format,of G]"], ["proof (prove)\nusing this:\n  (worklist G Rs \\<noteq> {} \\<longrightarrow>\n   (\\<exists>(R, f)\\<in>UNIV.\n       selector G = Some (R, f) \\<and> valid_selection Rs G R f)) \\<and>\n  (worklist G Rs = {} \\<longrightarrow> selector G = None)\n\ngoal (1 subgoal):\n 1. (worklist G Rs = {}) = (selector G = None) &&&\n    (selector G = Some (R, f) \\<Longrightarrow> valid_selection Rs G R f)", "by (cases \"worklist G Rs = {}\",auto)"], ["", "text \\<open>The following gives a valid selector.\n      This selector is not useful as concrete implementation, because it used the choice operation.\\<close>"], ["", "definition non_constructive_selector where\n\"non_constructive_selector Rs G \\<equiv> let wl = worklist G Rs in\n   if wl = {} then None else Some (SOME (R,f). valid_selection Rs G R f) \""], ["", "lemma non_constructive_selector:\n  assumes \"set_of_graph_rules Rs\"\n  shows \"valid_selector Rs (non_constructive_selector Rs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. valid_selector Rs (non_constructive_selector Rs)", "unfolding valid_selector_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>G.\n       (worklist G Rs \\<noteq> {} \\<longrightarrow>\n        (\\<exists>(R, f)\\<in>UNIV.\n            non_constructive_selector Rs G = Some (R, f) \\<and>\n            valid_selection Rs G R f)) \\<and>\n       (worklist G Rs = {} \\<longrightarrow>\n        non_constructive_selector Rs G = None)", "proof((clarify,standard;clarify),goal_cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       worklist (a, b) Rs \\<noteq> {} \\<Longrightarrow>\n       \\<exists>(R, f)\\<in>UNIV.\n          non_constructive_selector Rs (a, b) = Some (R, f) \\<and>\n          valid_selection Rs (a, b) R f\n 2. \\<And>a b.\n       worklist (a, b) Rs = {} \\<Longrightarrow>\n       non_constructive_selector Rs (a, b) = None", "case (1 n E)"], ["proof (state)\nthis:\n  worklist (n, E) Rs \\<noteq> {}\n\ngoal (2 subgoals):\n 1. \\<And>a b.\n       worklist (a, b) Rs \\<noteq> {} \\<Longrightarrow>\n       \\<exists>(R, f)\\<in>UNIV.\n          non_constructive_selector Rs (a, b) = Some (R, f) \\<and>\n          valid_selection Rs (a, b) R f\n 2. \\<And>a b.\n       worklist (a, b) Rs = {} \\<Longrightarrow>\n       non_constructive_selector Rs (a, b) = None", "let ?x = \"(SOME (R, f). valid_selection Rs (n, E) R f)\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       worklist (a, b) Rs \\<noteq> {} \\<Longrightarrow>\n       \\<exists>(R, f)\\<in>UNIV.\n          non_constructive_selector Rs (a, b) = Some (R, f) \\<and>\n          valid_selection Rs (a, b) R f\n 2. \\<And>a b.\n       worklist (a, b) Rs = {} \\<Longrightarrow>\n       non_constructive_selector Rs (a, b) = None", "from valid_selection_exists[OF 1 assms]"], ["proof (chain)\npicking this:\n  \\<exists>L R f. valid_selection Rs (n, E) R f", "have \"\\<exists> R f. valid_selection Rs (n, E) R f\""], ["proof (prove)\nusing this:\n  \\<exists>L R f. valid_selection Rs (n, E) R f\n\ngoal (1 subgoal):\n 1. \\<exists>R f. valid_selection Rs (n, E) R f", "by auto"], ["proof (state)\nthis:\n  \\<exists>R f. valid_selection Rs (n, E) R f\n\ngoal (2 subgoals):\n 1. \\<And>a b.\n       worklist (a, b) Rs \\<noteq> {} \\<Longrightarrow>\n       \\<exists>(R, f)\\<in>UNIV.\n          non_constructive_selector Rs (a, b) = Some (R, f) \\<and>\n          valid_selection Rs (a, b) R f\n 2. \\<And>a b.\n       worklist (a, b) Rs = {} \\<Longrightarrow>\n       non_constructive_selector Rs (a, b) = None", "hence \"\\<exists> x. valid_selection Rs (n, E) (fst x) (snd x)\""], ["proof (prove)\nusing this:\n  \\<exists>R f. valid_selection Rs (n, E) R f\n\ngoal (1 subgoal):\n 1. \\<exists>x. valid_selection Rs (n, E) (fst x) (snd x)", "by auto"], ["proof (state)\nthis:\n  \\<exists>x. valid_selection Rs (n, E) (fst x) (snd x)\n\ngoal (2 subgoals):\n 1. \\<And>a b.\n       worklist (a, b) Rs \\<noteq> {} \\<Longrightarrow>\n       \\<exists>(R, f)\\<in>UNIV.\n          non_constructive_selector Rs (a, b) = Some (R, f) \\<and>\n          valid_selection Rs (a, b) R f\n 2. \\<And>a b.\n       worklist (a, b) Rs = {} \\<Longrightarrow>\n       non_constructive_selector Rs (a, b) = None", "from this prod.case_eq_if tfl_some"], ["proof (chain)\npicking this:\n  \\<exists>x. valid_selection Rs (n, E) (fst x) (snd x)\n  (case ?prod of (x, xa) \\<Rightarrow> ?f x xa) = ?f (fst ?prod) (snd ?prod)\n  \\<forall>P x. P x \\<longrightarrow> P (Eps P)", "have \"\\<not> valid_selection Rs (n, E) (fst ?x) (snd ?x) \\<Longrightarrow> False\""], ["proof (prove)\nusing this:\n  \\<exists>x. valid_selection Rs (n, E) (fst x) (snd x)\n  (case ?prod of (x, xa) \\<Rightarrow> ?f x xa) = ?f (fst ?prod) (snd ?prod)\n  \\<forall>P x. P x \\<longrightarrow> P (Eps P)\n\ngoal (1 subgoal):\n 1. \\<not> valid_selection Rs (n, E)\n            (fst (SOME (R, f). valid_selection Rs (n, E) R f))\n            (snd (SOME (R, f).\n                     valid_selection Rs (n, E) R f)) \\<Longrightarrow>\n    False", "by (metis (mono_tags, lifting))"], ["proof (state)\nthis:\n  \\<not> valid_selection Rs (n, E)\n          (fst (SOME (R, f). valid_selection Rs (n, E) R f))\n          (snd (SOME (R, f).\n                   valid_selection Rs (n, E) R f)) \\<Longrightarrow>\n  False\n\ngoal (2 subgoals):\n 1. \\<And>a b.\n       worklist (a, b) Rs \\<noteq> {} \\<Longrightarrow>\n       \\<exists>(R, f)\\<in>UNIV.\n          non_constructive_selector Rs (a, b) = Some (R, f) \\<and>\n          valid_selection Rs (a, b) R f\n 2. \\<And>a b.\n       worklist (a, b) Rs = {} \\<Longrightarrow>\n       non_constructive_selector Rs (a, b) = None", "thus ?case"], ["proof (prove)\nusing this:\n  \\<not> valid_selection Rs (n, E)\n          (fst (SOME (R, f). valid_selection Rs (n, E) R f))\n          (snd (SOME (R, f).\n                   valid_selection Rs (n, E) R f)) \\<Longrightarrow>\n  False\n\ngoal (1 subgoal):\n 1. \\<exists>(R, f)\\<in>UNIV.\n       non_constructive_selector Rs (n, E) = Some (R, f) \\<and>\n       valid_selection Rs (n, E) R f", "unfolding non_constructive_selector_def Let_def"], ["proof (prove)\nusing this:\n  \\<not> valid_selection Rs (n, E)\n          (fst (SOME (R, f). valid_selection Rs (n, E) R f))\n          (snd (SOME (R, f).\n                   valid_selection Rs (n, E) R f)) \\<Longrightarrow>\n  False\n\ngoal (1 subgoal):\n 1. \\<exists>(R, f)\\<in>UNIV.\n       (if worklist (n, E) Rs = {} then None\n        else Some (SOME (x, y). valid_selection Rs (n, E) x y)) =\n       Some (R, f) \\<and>\n       valid_selection Rs (n, E) R f", "using 1"], ["proof (prove)\nusing this:\n  \\<not> valid_selection Rs (n, E)\n          (fst (SOME (R, f). valid_selection Rs (n, E) R f))\n          (snd (SOME (R, f).\n                   valid_selection Rs (n, E) R f)) \\<Longrightarrow>\n  False\n  worklist (n, E) Rs \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<exists>(R, f)\\<in>UNIV.\n       (if worklist (n, E) Rs = {} then None\n        else Some (SOME (x, y). valid_selection Rs (n, E) x y)) =\n       Some (R, f) \\<and>\n       valid_selection Rs (n, E) R f", "by (auto simp:prod_eq_iff)"], ["proof (state)\nthis:\n  \\<exists>(R, f)\\<in>UNIV.\n     non_constructive_selector Rs (n, E) = Some (R, f) \\<and>\n     valid_selection Rs (n, E) R f\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       worklist (a, b) Rs = {} \\<Longrightarrow>\n       non_constructive_selector Rs (a, b) = None", "qed (auto simp:non_constructive_selector_def)"], ["", "text \\<open>The following is used to make a weak pushout step.\n      In the paper, we aren't too specific on how this should be done. Here we are.\n      We work on natural numbers in order to be able to pick fresh elements easily. \\<close>"], ["", "definition extend ::\n    \"nat \\<Rightarrow> ('b, 'a::linorder) Graph_PreRule  \\<Rightarrow> ('a \\<times> nat) set \\<Rightarrow> ('a \\<times> nat) set\" where\n\"extend n R f \\<equiv> f \\<union> \n   (let V_new = sorted_list_of_set (vertices (snd R) - vertices (fst R))\n    in set (zip V_new [n..<(n+length V_new)]))\""], ["", "lemma nextMax_set[simp]:\n  assumes \"sorted xs\"\n  shows \"nextMax (set xs) = (if xs = Nil then 0 else Suc (last xs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nextMax (set xs) = (if xs = [] then 0 else Suc (last xs))", "using assms"], ["proof (prove)\nusing this:\n  sorted xs\n\ngoal (1 subgoal):\n 1. nextMax (set xs) = (if xs = [] then 0 else Suc (last xs))", "proof(induct xs)"], ["proof (state)\ngoal (2 subgoals):\n 1. sorted [] \\<Longrightarrow>\n    nextMax (set []) = (if [] = [] then 0 else Suc (last []))\n 2. \\<And>a xs.\n       \\<lbrakk>sorted xs \\<Longrightarrow>\n                nextMax (set xs) = (if xs = [] then 0 else Suc (last xs));\n        sorted (a # xs)\\<rbrakk>\n       \\<Longrightarrow> nextMax (set (a # xs)) =\n                         (if a # xs = [] then 0 else Suc (last (a # xs)))", "case Nil"], ["proof (state)\nthis:\n  sorted []\n\ngoal (2 subgoals):\n 1. sorted [] \\<Longrightarrow>\n    nextMax (set []) = (if [] = [] then 0 else Suc (last []))\n 2. \\<And>a xs.\n       \\<lbrakk>sorted xs \\<Longrightarrow>\n                nextMax (set xs) = (if xs = [] then 0 else Suc (last xs));\n        sorted (a # xs)\\<rbrakk>\n       \\<Longrightarrow> nextMax (set (a # xs)) =\n                         (if a # xs = [] then 0 else Suc (last (a # xs)))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. nextMax (set []) = (if [] = [] then 0 else Suc (last []))", "unfolding nextMax_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (if set [] = {} then 0 else Suc (Max (set []))) =\n    (if [] = [] then 0 else Suc (last []))", "by auto"], ["proof (state)\nthis:\n  nextMax (set []) = (if [] = [] then 0 else Suc (last []))\n\ngoal (1 subgoal):\n 1. \\<And>a xs.\n       \\<lbrakk>sorted xs \\<Longrightarrow>\n                nextMax (set xs) = (if xs = [] then 0 else Suc (last xs));\n        sorted (a # xs)\\<rbrakk>\n       \\<Longrightarrow> nextMax (set (a # xs)) =\n                         (if a # xs = [] then 0 else Suc (last (a # xs)))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a xs.\n       \\<lbrakk>sorted xs \\<Longrightarrow>\n                nextMax (set xs) = (if xs = [] then 0 else Suc (last xs));\n        sorted (a # xs)\\<rbrakk>\n       \\<Longrightarrow> nextMax (set (a # xs)) =\n                         (if a # xs = [] then 0 else Suc (last (a # xs)))", "case (Cons a list)"], ["proof (state)\nthis:\n  sorted list \\<Longrightarrow>\n  nextMax (set list) = (if list = [] then 0 else Suc (last list))\n  sorted (a # list)\n\ngoal (1 subgoal):\n 1. \\<And>a xs.\n       \\<lbrakk>sorted xs \\<Longrightarrow>\n                nextMax (set xs) = (if xs = [] then 0 else Suc (last xs));\n        sorted (a # xs)\\<rbrakk>\n       \\<Longrightarrow> nextMax (set (a # xs)) =\n                         (if a # xs = [] then 0 else Suc (last (a # xs)))", "hence \"list \\<noteq> [] \\<Longrightarrow> fold max list a = last list\""], ["proof (prove)\nusing this:\n  sorted list \\<Longrightarrow>\n  nextMax (set list) = (if list = [] then 0 else Suc (last list))\n  sorted (a # list)\n\ngoal (1 subgoal):\n 1. list \\<noteq> [] \\<Longrightarrow> fold max list a = last list", "using list_sorted_max"], ["proof (prove)\nusing this:\n  sorted list \\<Longrightarrow>\n  nextMax (set list) = (if list = [] then 0 else Suc (last list))\n  sorted (a # list)\n  \\<lbrakk>sorted ?list; ?list = ?x # ?xs\\<rbrakk>\n  \\<Longrightarrow> fold max ?xs ?x = last ?list\n\ngoal (1 subgoal):\n 1. list \\<noteq> [] \\<Longrightarrow> fold max list a = last list", "by (metis last.simps)"], ["proof (state)\nthis:\n  list \\<noteq> [] \\<Longrightarrow> fold max list a = last list\n\ngoal (1 subgoal):\n 1. \\<And>a xs.\n       \\<lbrakk>sorted xs \\<Longrightarrow>\n                nextMax (set xs) = (if xs = [] then 0 else Suc (last xs));\n        sorted (a # xs)\\<rbrakk>\n       \\<Longrightarrow> nextMax (set (a # xs)) =\n                         (if a # xs = [] then 0 else Suc (last (a # xs)))", "thus ?case"], ["proof (prove)\nusing this:\n  list \\<noteq> [] \\<Longrightarrow> fold max list a = last list\n\ngoal (1 subgoal):\n 1. nextMax (set (a # list)) =\n    (if a # list = [] then 0 else Suc (last (a # list)))", "unfolding nextMax_def Max.set_eq_fold"], ["proof (prove)\nusing this:\n  list \\<noteq> [] \\<Longrightarrow> fold max list a = last list\n\ngoal (1 subgoal):\n 1. (if set (a # list) = {} then 0 else Suc (fold max list a)) =\n    (if a # list = [] then 0 else Suc (last (a # list)))", "by auto"], ["proof (state)\nthis:\n  nextMax (set (a # list)) =\n  (if a # list = [] then 0 else Suc (last (a # list)))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma nextMax_Un_eq[simp]:\n\"finite x \\<Longrightarrow> finite y \\<Longrightarrow> nextMax (x \\<union> y) = max (nextMax x) (nextMax y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite x; finite y\\<rbrakk>\n    \\<Longrightarrow> nextMax (x \\<union> y) = max (nextMax x) (nextMax y)", "unfolding nextMax_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite x; finite y\\<rbrakk>\n    \\<Longrightarrow> (if x \\<union> y = {} then 0\n                       else Suc (Max (x \\<union> y))) =\n                      max (if x = {} then 0 else Suc (Max x))\n                       (if y = {} then 0 else Suc (Max y))", "using Max_Un"], ["proof (prove)\nusing this:\n  \\<lbrakk>finite ?A; ?A \\<noteq> {}; finite ?B; ?B \\<noteq> {}\\<rbrakk>\n  \\<Longrightarrow> Max (?A \\<union> ?B) = max (Max ?A) (Max ?B)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>finite x; finite y\\<rbrakk>\n    \\<Longrightarrow> (if x \\<union> y = {} then 0\n                       else Suc (Max (x \\<union> y))) =\n                      max (if x = {} then 0 else Suc (Max x))\n                       (if y = {} then 0 else Suc (Max y))", "by auto"], ["", "lemma extend: (* extensible into the new graph *)\n  assumes \"graph_homomorphism (fst R) (LG E {0..<n}) f\" \"graph_rule R\"\n  defines \"g \\<equiv> extend n R f\"\n  defines \"G' \\<equiv> LG ((on_triple g `` (edges (snd R))) \\<union> E) {0..<max n (nextMax (Range g))}\"\n  shows \"graph_homomorphism (snd R) G' g\" \"agree_on (fst R) f g\" \"f \\<subseteq> g\"\n        \"subgraph (LG E {0..<n}) G'\"\n        \"weak_universal (t:: 'x itself) R (LG E {0..<n}) G' f g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (graph_homomorphism (snd R) G' g &&& agree_on (fst R) f g) &&&\n    f \\<subseteq> g &&&\n    subgraph (LG E {0..<n}) G' &&& weak_universal t R (LG E {0..<n}) G' f g", "proof -"], ["proof (state)\ngoal (5 subgoals):\n 1. graph_homomorphism (snd R) G' g\n 2. agree_on (fst R) f g\n 3. f \\<subseteq> g\n 4. subgraph (LG E {0..<n}) G'\n 5. weak_universal t R (LG E {0..<n}) G' f g", "have ln:\"length x = length [n..<n + length x]\" for x::\"'b list\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length x = length [n..<n + length x]", "by auto"], ["proof (state)\nthis:\n  length ?x = length [n..<n + length ?x]\n\ngoal (5 subgoals):\n 1. graph_homomorphism (snd R) G' g\n 2. agree_on (fst R) f g\n 3. f \\<subseteq> g\n 4. subgraph (LG E {0..<n}) G'\n 5. weak_universal t R (LG E {0..<n}) G' f g", "let ?R_L = \"vertices (snd R) - vertices (fst R)\""], ["proof (state)\ngoal (5 subgoals):\n 1. graph_homomorphism (snd R) G' g\n 2. agree_on (fst R) f g\n 3. f \\<subseteq> g\n 4. subgraph (LG E {0..<n}) G'\n 5. weak_universal t R (LG E {0..<n}) G' f g", "from assms"], ["proof (chain)\npicking this:\n  graph_homomorphism (fst R) (LG E {0..<n}) f\n  graph_rule R\n  g \\<equiv> extend n R f\n  G' \\<equiv>\n  LG (on_triple g `` edges (snd R) \\<union> E)\n   {0..<max n (nextMax (Range g))}", "have \"graph_rule (fst R,snd R)\" and fin_R:\"finite (vertices (snd R))\"\n    and subsLR:\"vertices (fst R) \\<subseteq> vertices (snd R)\" and gr_R:\"graph (snd R)\""], ["proof (prove)\nusing this:\n  graph_homomorphism (fst R) (LG E {0..<n}) f\n  graph_rule R\n  g \\<equiv> extend n R f\n  G' \\<equiv>\n  LG (on_triple g `` edges (snd R) \\<union> E)\n   {0..<max n (nextMax (Range g))}\n\ngoal (1 subgoal):\n 1. (graph_rule (fst R, snd R) &&& finite (vertices (snd R))) &&&\n    vertices (fst R) \\<subseteq> vertices (snd R) &&& graph (snd R)", "unfolding subgraph_def graph_union_iff"], ["proof (prove)\nusing this:\n  graph_homomorphism (fst R) (LG E {0..<n}) f\n  (graph (fst R) \\<and>\n   graph (snd R) \\<and>\n   edges (fst R) \\<subseteq> edges (snd R) \\<and>\n   vertices (fst R) \\<subseteq> vertices (snd R)) \\<and>\n  finite_graph (snd R)\n  g \\<equiv> extend n R f\n  G' \\<equiv>\n  LG (on_triple g `` edges (snd R) \\<union> E)\n   {0..<max n (nextMax (Range g))}\n\ngoal (1 subgoal):\n 1. ((graph (fst (fst R, snd R)) \\<and>\n      graph (snd (fst R, snd R)) \\<and>\n      edges (fst (fst R, snd R))\n      \\<subseteq> edges (snd (fst R, snd R)) \\<and>\n      vertices (fst (fst R, snd R))\n      \\<subseteq> vertices (snd (fst R, snd R))) \\<and>\n     finite_graph (snd (fst R, snd R)) &&&\n     finite (vertices (snd R))) &&&\n    vertices (fst R) \\<subseteq> vertices (snd R) &&& graph (snd R)", "by auto"], ["proof (state)\nthis:\n  graph_rule (fst R, snd R)\n  finite (vertices (snd R))\n  vertices (fst R) \\<subseteq> vertices (snd R)\n  graph (snd R)\n\ngoal (5 subgoals):\n 1. graph_homomorphism (snd R) G' g\n 2. agree_on (fst R) f g\n 3. f \\<subseteq> g\n 4. subgraph (LG E {0..<n}) G'\n 5. weak_universal t R (LG E {0..<n}) G' f g", "hence fin_R_L[simp]:\"finite ?R_L\"\n     and fin_L:\"finite (vertices (fst R))\""], ["proof (prove)\nusing this:\n  graph_rule (fst R, snd R)\n  finite (vertices (snd R))\n  vertices (fst R) \\<subseteq> vertices (snd R)\n  graph (snd R)\n\ngoal (1 subgoal):\n 1. finite (vertices (snd R) - vertices (fst R)) &&&\n    finite (vertices (fst R))", "using finite_subset"], ["proof (prove)\nusing this:\n  graph_rule (fst R, snd R)\n  finite (vertices (snd R))\n  vertices (fst R) \\<subseteq> vertices (snd R)\n  graph (snd R)\n  \\<lbrakk>?A \\<subseteq> ?B; finite ?B\\<rbrakk> \\<Longrightarrow> finite ?A\n\ngoal (1 subgoal):\n 1. finite (vertices (snd R) - vertices (fst R)) &&&\n    finite (vertices (fst R))", "by auto"], ["proof (state)\nthis:\n  finite (vertices (snd R) - vertices (fst R))\n  finite (vertices (fst R))\n\ngoal (5 subgoals):\n 1. graph_homomorphism (snd R) G' g\n 2. agree_on (fst R) f g\n 3. f \\<subseteq> g\n 4. subgraph (LG E {0..<n}) G'\n 5. weak_universal t R (LG E {0..<n}) G' f g", "from assms"], ["proof (chain)\npicking this:\n  graph_homomorphism (fst R) (LG E {0..<n}) f\n  graph_rule R\n  g \\<equiv> extend n R f\n  G' \\<equiv>\n  LG (on_triple g `` edges (snd R) \\<union> E)\n   {0..<max n (nextMax (Range g))}", "have f_dom:\"Domain f = vertices (fst R)\"\n    and f_uni:\"univalent f\""], ["proof (prove)\nusing this:\n  graph_homomorphism (fst R) (LG E {0..<n}) f\n  graph_rule R\n  g \\<equiv> extend n R f\n  G' \\<equiv>\n  LG (on_triple g `` edges (snd R) \\<union> E)\n   {0..<max n (nextMax (Range g))}\n\ngoal (1 subgoal):\n 1. Domain f = vertices (fst R) &&& univalent f", "unfolding graph_homomorphism_def"], ["proof (prove)\nusing this:\n  vertices (fst R) = Domain f \\<and>\n  graph (fst R) \\<and>\n  graph (LG E {0..<n}) \\<and>\n  f `` vertices (fst R) \\<subseteq> vertices (LG E {0..<n}) \\<and>\n  univalent f \\<and>\n  edge_preserving f (edges (fst R)) (edges (LG E {0..<n}))\n  (vertices (fst R) = Domain (Id_on (vertices (fst R))) \\<and>\n   graph (fst R) \\<and>\n   graph (snd R) \\<and>\n   Id_on (vertices (fst R)) `` vertices (fst R)\n   \\<subseteq> vertices (snd R) \\<and>\n   univalent (Id_on (vertices (fst R))) \\<and>\n   edge_preserving (Id_on (vertices (fst R))) (edges (fst R))\n    (edges (snd R))) \\<and>\n  finite_graph (snd R)\n  g \\<equiv> extend n R f\n  G' \\<equiv>\n  LG (on_triple g `` edges (snd R) \\<union> E)\n   {0..<max n (nextMax (Range g))}\n\ngoal (1 subgoal):\n 1. Domain f = vertices (fst R) &&& univalent f", "by auto"], ["proof (state)\nthis:\n  Domain f = vertices (fst R)\n  univalent f\n\ngoal (5 subgoals):\n 1. graph_homomorphism (snd R) G' g\n 2. agree_on (fst R) f g\n 3. f \\<subseteq> g\n 4. subgraph (LG E {0..<n}) G'\n 5. weak_universal t R (LG E {0..<n}) G' f g", "from assms[unfolded graph_homomorphism_def]"], ["proof (chain)\npicking this:\n  vertices (fst R) = Domain f \\<and>\n  graph (fst R) \\<and>\n  graph (LG E {0..<n}) \\<and>\n  f `` vertices (fst R) \\<subseteq> vertices (LG E {0..<n}) \\<and>\n  univalent f \\<and>\n  edge_preserving f (edges (fst R)) (edges (LG E {0..<n}))\n  (vertices (fst R) = Domain (Id_on (vertices (fst R))) \\<and>\n   graph (fst R) \\<and>\n   graph (snd R) \\<and>\n   Id_on (vertices (fst R)) `` vertices (fst R)\n   \\<subseteq> vertices (snd R) \\<and>\n   univalent (Id_on (vertices (fst R))) \\<and>\n   edge_preserving (Id_on (vertices (fst R))) (edges (fst R))\n    (edges (snd R))) \\<and>\n  finite_graph (snd R)\n  g \\<equiv> extend n R f\n  G' \\<equiv>\n  LG (on_triple g `` edges (snd R) \\<union> E)\n   {0..<max n (nextMax (Range g))}", "have \"f `` vertices (fst R) \\<subseteq> vertices (LG E {0..<n})\""], ["proof (prove)\nusing this:\n  vertices (fst R) = Domain f \\<and>\n  graph (fst R) \\<and>\n  graph (LG E {0..<n}) \\<and>\n  f `` vertices (fst R) \\<subseteq> vertices (LG E {0..<n}) \\<and>\n  univalent f \\<and>\n  edge_preserving f (edges (fst R)) (edges (LG E {0..<n}))\n  (vertices (fst R) = Domain (Id_on (vertices (fst R))) \\<and>\n   graph (fst R) \\<and>\n   graph (snd R) \\<and>\n   Id_on (vertices (fst R)) `` vertices (fst R)\n   \\<subseteq> vertices (snd R) \\<and>\n   univalent (Id_on (vertices (fst R))) \\<and>\n   edge_preserving (Id_on (vertices (fst R))) (edges (fst R))\n    (edges (snd R))) \\<and>\n  finite_graph (snd R)\n  g \\<equiv> extend n R f\n  G' \\<equiv>\n  LG (on_triple g `` edges (snd R) \\<union> E)\n   {0..<max n (nextMax (Range g))}\n\ngoal (1 subgoal):\n 1. f `` vertices (fst R) \\<subseteq> vertices (LG E {0..<n})", "by blast"], ["proof (state)\nthis:\n  f `` vertices (fst R) \\<subseteq> vertices (LG E {0..<n})\n\ngoal (5 subgoals):\n 1. graph_homomorphism (snd R) G' g\n 2. agree_on (fst R) f g\n 3. f \\<subseteq> g\n 4. subgraph (LG E {0..<n}) G'\n 5. weak_universal t R (LG E {0..<n}) G' f g", "hence f_ran:\"Range f \\<subseteq> {0..<n}\""], ["proof (prove)\nusing this:\n  f `` vertices (fst R) \\<subseteq> vertices (LG E {0..<n})\n\ngoal (1 subgoal):\n 1. Range f \\<subseteq> {0..<n}", "using f_dom"], ["proof (prove)\nusing this:\n  f `` vertices (fst R) \\<subseteq> vertices (LG E {0..<n})\n  Domain f = vertices (fst R)\n\ngoal (1 subgoal):\n 1. Range f \\<subseteq> {0..<n}", "by auto"], ["proof (state)\nthis:\n  Range f \\<subseteq> {0..<n}\n\ngoal (5 subgoals):\n 1. graph_homomorphism (snd R) G' g\n 2. agree_on (fst R) f g\n 3. f \\<subseteq> g\n 4. subgraph (LG E {0..<n}) G'\n 5. weak_universal t R (LG E {0..<n}) G' f g", "let ?g = \"(let V_new = sorted_list_of_set ?R_L\n              in set (zip V_new [n..<n + length V_new]))\""], ["proof (state)\ngoal (5 subgoals):\n 1. graph_homomorphism (snd R) G' g\n 2. agree_on (fst R) f g\n 3. f \\<subseteq> g\n 4. subgraph (LG E {0..<n}) G'\n 5. weak_universal t R (LG E {0..<n}) G' f g", "(* new part of g *)"], ["proof (state)\ngoal (5 subgoals):\n 1. graph_homomorphism (snd R) G' g\n 2. agree_on (fst R) f g\n 3. f \\<subseteq> g\n 4. subgraph (LG E {0..<n}) G'\n 5. weak_universal t R (LG E {0..<n}) G' f g", "have fin_g':\"finite ?g\" \"finite (Range ?g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite\n     (let V_new = sorted_list_of_set (vertices (snd R) - vertices (fst R))\n      in set (zip V_new [n..<n + length V_new])) &&&\n    finite\n     (Range\n       (let V_new = sorted_list_of_set (vertices (snd R) - vertices (fst R))\n        in set (zip V_new [n..<n + length V_new])))", "unfolding Let_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite\n     (set (zip (sorted_list_of_set (vertices (snd R) - vertices (fst R)))\n            [n..<\n             n +\n             length\n              (sorted_list_of_set\n                (vertices (snd R) - vertices (fst R)))])) &&&\n    finite\n     (Range\n       (set (zip (sorted_list_of_set (vertices (snd R) - vertices (fst R)))\n              [n..<\n               n +\n               length\n                (sorted_list_of_set\n                  (vertices (snd R) - vertices (fst R)))])))", "by auto"], ["proof (state)\nthis:\n  finite\n   (let V_new = sorted_list_of_set (vertices (snd R) - vertices (fst R))\n    in set (zip V_new [n..<n + length V_new]))\n  finite\n   (Range\n     (let V_new = sorted_list_of_set (vertices (snd R) - vertices (fst R))\n      in set (zip V_new [n..<n + length V_new])))\n\ngoal (5 subgoals):\n 1. graph_homomorphism (snd R) G' g\n 2. agree_on (fst R) f g\n 3. f \\<subseteq> g\n 4. subgraph (LG E {0..<n}) G'\n 5. weak_universal t R (LG E {0..<n}) G' f g", "have \"finite (Domain f)\" \"univalent f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (Domain f) &&& univalent f", "using assms(1) fin_L"], ["proof (prove)\nusing this:\n  graph_homomorphism (fst R) (LG E {0..<n}) f\n  finite (vertices (fst R))\n\ngoal (1 subgoal):\n 1. finite (Domain f) &&& univalent f", "unfolding graph_homomorphism_def"], ["proof (prove)\nusing this:\n  vertices (fst R) = Domain f \\<and>\n  graph (fst R) \\<and>\n  graph (LG E {0..<n}) \\<and>\n  f `` vertices (fst R) \\<subseteq> vertices (LG E {0..<n}) \\<and>\n  univalent f \\<and>\n  edge_preserving f (edges (fst R)) (edges (LG E {0..<n}))\n  finite (vertices (fst R))\n\ngoal (1 subgoal):\n 1. finite (Domain f) &&& univalent f", "by auto"], ["proof (state)\nthis:\n  finite (Domain f)\n  univalent f\n\ngoal (5 subgoals):\n 1. graph_homomorphism (snd R) G' g\n 2. agree_on (fst R) f g\n 3. f \\<subseteq> g\n 4. subgraph (LG E {0..<n}) G'\n 5. weak_universal t R (LG E {0..<n}) G' f g", "hence fin_f:\"finite (Range f)\""], ["proof (prove)\nusing this:\n  finite (Domain f)\n  univalent f\n\ngoal (1 subgoal):\n 1. finite (Range f)", "unfolding Range_snd"], ["proof (prove)\nusing this:\n  finite (Domain f)\n  univalent f\n\ngoal (1 subgoal):\n 1. finite (snd ` f)", "by auto"], ["proof (state)\nthis:\n  finite (Range f)\n\ngoal (5 subgoals):\n 1. graph_homomorphism (snd R) G' g\n 2. agree_on (fst R) f g\n 3. f \\<subseteq> g\n 4. subgraph (LG E {0..<n}) G'\n 5. weak_universal t R (LG E {0..<n}) G' f g", "hence fin_g:\"finite (Range g)\""], ["proof (prove)\nusing this:\n  finite (Range f)\n\ngoal (1 subgoal):\n 1. finite (Range g)", "unfolding extend_def g_def Let_def Range_Un_eq"], ["proof (prove)\nusing this:\n  finite (Range f)\n\ngoal (1 subgoal):\n 1. finite\n     (Range f \\<union>\n      Range\n       (set (zip (sorted_list_of_set (vertices (snd R) - vertices (fst R)))\n              [n..<\n               n +\n               length\n                (sorted_list_of_set\n                  (vertices (snd R) - vertices (fst R)))])))", "by auto"], ["proof (state)\nthis:\n  finite (Range g)\n\ngoal (5 subgoals):\n 1. graph_homomorphism (snd R) G' g\n 2. agree_on (fst R) f g\n 3. f \\<subseteq> g\n 4. subgraph (LG E {0..<n}) G'\n 5. weak_universal t R (LG E {0..<n}) G' f g", "have nextMax_f:\"nextMax (Range f) \\<le> n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nextMax (Range f) \\<le> n", "using f_ran Max_in[OF fin_f]"], ["proof (prove)\nusing this:\n  Range f \\<subseteq> {0..<n}\n  Range f \\<noteq> {} \\<Longrightarrow> Max (Range f) \\<in> Range f\n\ngoal (1 subgoal):\n 1. nextMax (Range f) \\<le> n", "by (simp add:nextMax_def Suc_leI subset_eq)"], ["proof (state)\nthis:\n  nextMax (Range f) \\<le> n\n\ngoal (5 subgoals):\n 1. graph_homomorphism (snd R) G' g\n 2. agree_on (fst R) f g\n 3. f \\<subseteq> g\n 4. subgraph (LG E {0..<n}) G'\n 5. weak_universal t R (LG E {0..<n}) G' f g", "have \"x \\<in> Domain ?g \\<Longrightarrow> x \\<notin> Domain f\" for x"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> Domain\n             (let V_new =\n                    sorted_list_of_set (vertices (snd R) - vertices (fst R))\n              in set (zip V_new [n..<n + length V_new])) \\<Longrightarrow>\n    x \\<notin> Domain f", "unfolding f_dom Let_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> Domain\n             (set (zip (sorted_list_of_set\n                         (vertices (snd R) - vertices (fst R)))\n                    [n..<\n                     n +\n                     length\n                      (sorted_list_of_set\n                        (vertices (snd R) -\n                         vertices (fst R)))])) \\<Longrightarrow>\n    x \\<notin> vertices (fst R)", "by auto"], ["proof (state)\nthis:\n  ?x \\<in> Domain\n            (let V_new =\n                   sorted_list_of_set (vertices (snd R) - vertices (fst R))\n             in set (zip V_new [n..<n + length V_new])) \\<Longrightarrow>\n  ?x \\<notin> Domain f\n\ngoal (5 subgoals):\n 1. graph_homomorphism (snd R) G' g\n 2. agree_on (fst R) f g\n 3. f \\<subseteq> g\n 4. subgraph (LG E {0..<n}) G'\n 5. weak_universal t R (LG E {0..<n}) G' f g", "hence g_not_f:\"(x,y) \\<in> ?g \\<Longrightarrow> (x,z) \\<notin> f\" for x y z"], ["proof (prove)\nusing this:\n  ?x \\<in> Domain\n            (let V_new =\n                   sorted_list_of_set (vertices (snd R) - vertices (fst R))\n             in set (zip V_new [n..<n + length V_new])) \\<Longrightarrow>\n  ?x \\<notin> Domain f\n\ngoal (1 subgoal):\n 1. (x, y)\n    \\<in> (let V_new =\n                 sorted_list_of_set (vertices (snd R) - vertices (fst R))\n           in set (zip V_new [n..<n + length V_new])) \\<Longrightarrow>\n    (x, z) \\<notin> f", "by blast"], ["proof (state)\nthis:\n  (?x, ?y)\n  \\<in> (let V_new =\n               sorted_list_of_set (vertices (snd R) - vertices (fst R))\n         in set (zip V_new [n..<n + length V_new])) \\<Longrightarrow>\n  (?x, ?z) \\<notin> f\n\ngoal (5 subgoals):\n 1. graph_homomorphism (snd R) G' g\n 2. agree_on (fst R) f g\n 3. f \\<subseteq> g\n 4. subgraph (LG E {0..<n}) G'\n 5. weak_universal t R (LG E {0..<n}) G' f g", "have uni_g':\"univalent ?g\" \"univalent (converse ?g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. univalent\n     (let V_new = sorted_list_of_set (vertices (snd R) - vertices (fst R))\n      in set (zip V_new [n..<n + length V_new])) &&&\n    univalent\n     ((let V_new = sorted_list_of_set (vertices (snd R) - vertices (fst R))\n       in set (zip V_new [n..<n + length V_new]))\\<inverse>)", "unfolding Let_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. univalent\n     (set (zip (sorted_list_of_set (vertices (snd R) - vertices (fst R)))\n            [n..<\n             n +\n             length\n              (sorted_list_of_set\n                (vertices (snd R) - vertices (fst R)))])) &&&\n    univalent\n     ((set (zip (sorted_list_of_set (vertices (snd R) - vertices (fst R)))\n             [n..<\n              n +\n              length\n               (sorted_list_of_set\n                 (vertices (snd R) - vertices (fst R)))]))\\<inverse>)", "by auto"], ["proof (state)\nthis:\n  univalent\n   (let V_new = sorted_list_of_set (vertices (snd R) - vertices (fst R))\n    in set (zip V_new [n..<n + length V_new]))\n  univalent\n   ((let V_new = sorted_list_of_set (vertices (snd R) - vertices (fst R))\n     in set (zip V_new [n..<n + length V_new]))\\<inverse>)\n\ngoal (5 subgoals):\n 1. graph_homomorphism (snd R) G' g\n 2. agree_on (fst R) f g\n 3. f \\<subseteq> g\n 4. subgraph (LG E {0..<n}) G'\n 5. weak_universal t R (LG E {0..<n}) G' f g", "with f_uni"], ["proof (chain)\npicking this:\n  univalent f\n  univalent\n   (let V_new = sorted_list_of_set (vertices (snd R) - vertices (fst R))\n    in set (zip V_new [n..<n + length V_new]))\n  univalent\n   ((let V_new = sorted_list_of_set (vertices (snd R) - vertices (fst R))\n     in set (zip V_new [n..<n + length V_new]))\\<inverse>)", "have uni_g:\"univalent g\""], ["proof (prove)\nusing this:\n  univalent f\n  univalent\n   (let V_new = sorted_list_of_set (vertices (snd R) - vertices (fst R))\n    in set (zip V_new [n..<n + length V_new]))\n  univalent\n   ((let V_new = sorted_list_of_set (vertices (snd R) - vertices (fst R))\n     in set (zip V_new [n..<n + length V_new]))\\<inverse>)\n\ngoal (1 subgoal):\n 1. univalent g", "by (auto simp:g_def extend_def g_not_f)"], ["proof (state)\nthis:\n  univalent g\n\ngoal (5 subgoals):\n 1. graph_homomorphism (snd R) G' g\n 2. agree_on (fst R) f g\n 3. f \\<subseteq> g\n 4. subgraph (LG E {0..<n}) G'\n 5. weak_universal t R (LG E {0..<n}) G' f g", "from fin_g"], ["proof (chain)\npicking this:\n  finite (Range g)", "have \"(a,b) \\<in> g \\<Longrightarrow> b < Suc (Max (Range g))\" for a b"], ["proof (prove)\nusing this:\n  finite (Range g)\n\ngoal (1 subgoal):\n 1. (a, b) \\<in> g \\<Longrightarrow> b < Suc (Max (Range g))", "unfolding less_Suc_eq_le"], ["proof (prove)\nusing this:\n  finite (Range g)\n\ngoal (1 subgoal):\n 1. (a, b) \\<in> g \\<Longrightarrow> b \\<le> Max (Range g)", "by (rule Max.coboundedI) force"], ["proof (state)\nthis:\n  (?a, ?b) \\<in> g \\<Longrightarrow> ?b < Suc (Max (Range g))\n\ngoal (5 subgoals):\n 1. graph_homomorphism (snd R) G' g\n 2. agree_on (fst R) f g\n 3. f \\<subseteq> g\n 4. subgraph (LG E {0..<n}) G'\n 5. weak_universal t R (LG E {0..<n}) G' f g", "hence \"(a,b) \\<in> g \\<Longrightarrow> b < nextMax (Range g)\" for a b"], ["proof (prove)\nusing this:\n  (?a, ?b) \\<in> g \\<Longrightarrow> ?b < Suc (Max (Range g))\n\ngoal (1 subgoal):\n 1. (a, b) \\<in> g \\<Longrightarrow> b < nextMax (Range g)", "unfolding nextMax_def"], ["proof (prove)\nusing this:\n  (?a, ?b) \\<in> g \\<Longrightarrow> ?b < Suc (Max (Range g))\n\ngoal (1 subgoal):\n 1. (a, b) \\<in> g \\<Longrightarrow>\n    b < (if Range g = {} then 0 else Suc (Max (Range g)))", "by (cases \"Range g = {}\",auto)"], ["proof (state)\nthis:\n  (?a, ?b) \\<in> g \\<Longrightarrow> ?b < nextMax (Range g)\n\ngoal (5 subgoals):\n 1. graph_homomorphism (snd R) G' g\n 2. agree_on (fst R) f g\n 3. f \\<subseteq> g\n 4. subgraph (LG E {0..<n}) G'\n 5. weak_universal t R (LG E {0..<n}) G' f g", "hence in_g:\"(a,b) \\<in> g \\<Longrightarrow> b < max n (nextMax (Range g))\" for a b"], ["proof (prove)\nusing this:\n  (?a, ?b) \\<in> g \\<Longrightarrow> ?b < nextMax (Range g)\n\ngoal (1 subgoal):\n 1. (a, b) \\<in> g \\<Longrightarrow> b < max n (nextMax (Range g))", "by fastforce"], ["proof (state)\nthis:\n  (?a, ?b) \\<in> g \\<Longrightarrow> ?b < max n (nextMax (Range g))\n\ngoal (5 subgoals):\n 1. graph_homomorphism (snd R) G' g\n 2. agree_on (fst R) f g\n 3. f \\<subseteq> g\n 4. subgraph (LG E {0..<n}) G'\n 5. weak_universal t R (LG E {0..<n}) G' f g", "let ?G = \"LG E {0..<n}\""], ["proof (state)\ngoal (5 subgoals):\n 1. graph_homomorphism (snd R) G' g\n 2. agree_on (fst R) f g\n 3. f \\<subseteq> g\n 4. subgraph (LG E {0..<n}) G'\n 5. weak_universal t R (LG E {0..<n}) G' f g", "have gr_G:\"graph ?G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. graph (LG E {0..<n})", "using assms(1)"], ["proof (prove)\nusing this:\n  graph_homomorphism (fst R) (LG E {0..<n}) f\n\ngoal (1 subgoal):\n 1. graph (LG E {0..<n})", "unfolding graph_homomorphism_def"], ["proof (prove)\nusing this:\n  vertices (fst R) = Domain f \\<and>\n  graph (fst R) \\<and>\n  graph (LG E {0..<n}) \\<and>\n  f `` vertices (fst R) \\<subseteq> vertices (LG E {0..<n}) \\<and>\n  univalent f \\<and>\n  edge_preserving f (edges (fst R)) (edges (LG E {0..<n}))\n\ngoal (1 subgoal):\n 1. graph (LG E {0..<n})", "by blast"], ["proof (state)\nthis:\n  graph (LG E {0..<n})\n\ngoal (5 subgoals):\n 1. graph_homomorphism (snd R) G' g\n 2. agree_on (fst R) f g\n 3. f \\<subseteq> g\n 4. subgraph (LG E {0..<n}) G'\n 5. weak_universal t R (LG E {0..<n}) G' f g", "hence \"(a, aa, b) \\<in> E \\<Longrightarrow> b < max n c\" \"(a, aa, b) \\<in> E \\<Longrightarrow> aa < max n c\"\n    for a aa b c"], ["proof (prove)\nusing this:\n  graph (LG E {0..<n})\n\ngoal (1 subgoal):\n 1. ((a, aa, b) \\<in> E \\<Longrightarrow> b < max n c) &&&\n    ((a, aa, b) \\<in> E \\<Longrightarrow> aa < max n c)", "by fastforce+"], ["proof (state)\nthis:\n  (?a, ?aa, ?b) \\<in> E \\<Longrightarrow> ?b < max n ?c\n  (?a, ?aa, ?b) \\<in> E \\<Longrightarrow> ?aa < max n ?c\n\ngoal (5 subgoals):\n 1. graph_homomorphism (snd R) G' g\n 2. agree_on (fst R) f g\n 3. f \\<subseteq> g\n 4. subgraph (LG E {0..<n}) G'\n 5. weak_universal t R (LG E {0..<n}) G' f g", "hence gr_G':\"graph G'\""], ["proof (prove)\nusing this:\n  (?a, ?aa, ?b) \\<in> E \\<Longrightarrow> ?b < max n ?c\n  (?a, ?aa, ?b) \\<in> E \\<Longrightarrow> ?aa < max n ?c\n\ngoal (1 subgoal):\n 1. graph G'", "unfolding G'_def restrict_def"], ["proof (prove)\nusing this:\n  (?a, ?aa, ?b) \\<in> E \\<Longrightarrow> ?b < max n ?c\n  (?a, ?aa, ?b) \\<in> E \\<Longrightarrow> ?aa < max n ?c\n\ngoal (1 subgoal):\n 1. LG (on_triple g `` edges (snd R) \\<union> E)\n     {0..<max n (nextMax (Range g))} =\n    LG {(l, v1, v2).\n        (l, v1, v2)\n        \\<in> edges\n               (LG (on_triple g `` edges (snd R) \\<union> E)\n                 {0..<max n (nextMax (Range g))}) \\<and>\n        v1 \\<in> vertices\n                  (LG (on_triple g `` edges (snd R) \\<union> E)\n                    {0..<max n (nextMax (Range g))}) \\<and>\n        v2 \\<in> vertices\n                  (LG (on_triple g `` edges (snd R) \\<union> E)\n                    {0..<max n (nextMax (Range g))})}\n     (vertices\n       (LG (on_triple g `` edges (snd R) \\<union> E)\n         {0..<max n (nextMax (Range g))}))", "using in_g"], ["proof (prove)\nusing this:\n  (?a, ?aa, ?b) \\<in> E \\<Longrightarrow> ?b < max n ?c\n  (?a, ?aa, ?b) \\<in> E \\<Longrightarrow> ?aa < max n ?c\n  (?a, ?b) \\<in> g \\<Longrightarrow> ?b < max n (nextMax (Range g))\n\ngoal (1 subgoal):\n 1. LG (on_triple g `` edges (snd R) \\<union> E)\n     {0..<max n (nextMax (Range g))} =\n    LG {(l, v1, v2).\n        (l, v1, v2)\n        \\<in> edges\n               (LG (on_triple g `` edges (snd R) \\<union> E)\n                 {0..<max n (nextMax (Range g))}) \\<and>\n        v1 \\<in> vertices\n                  (LG (on_triple g `` edges (snd R) \\<union> E)\n                    {0..<max n (nextMax (Range g))}) \\<and>\n        v2 \\<in> vertices\n                  (LG (on_triple g `` edges (snd R) \\<union> E)\n                    {0..<max n (nextMax (Range g))})}\n     (vertices\n       (LG (on_triple g `` edges (snd R) \\<union> E)\n         {0..<max n (nextMax (Range g))}))", "by auto"], ["proof (state)\nthis:\n  graph G'\n\ngoal (5 subgoals):\n 1. graph_homomorphism (snd R) G' g\n 2. agree_on (fst R) f g\n 3. f \\<subseteq> g\n 4. subgraph (LG E {0..<n}) G'\n 5. weak_universal t R (LG E {0..<n}) G' f g", "show \"subgraph (LG E {0..<n}) G'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subgraph (LG E {0..<n}) G'", "unfolding subgraph_def2[OF gr_G gr_G']"], ["proof (prove)\ngoal (1 subgoal):\n 1. vertices (LG E {0..<n}) \\<subseteq> vertices G' \\<and>\n    edges (LG E {0..<n}) \\<subseteq> edges G'", "unfolding G'_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. vertices (LG E {0..<n})\n    \\<subseteq> vertices\n                 (LG (on_triple g `` edges (snd R) \\<union> E)\n                   {0..<max n (nextMax (Range g))}) \\<and>\n    edges (LG E {0..<n})\n    \\<subseteq> edges\n                 (LG (on_triple g `` edges (snd R) \\<union> E)\n                   {0..<max n (nextMax (Range g))})", "by auto"], ["proof (state)\nthis:\n  subgraph (LG E {0..<n}) G'\n\ngoal (4 subgoals):\n 1. graph_homomorphism (snd R) G' g\n 2. agree_on (fst R) f g\n 3. f \\<subseteq> g\n 4. weak_universal t R (LG E {0..<n}) G' f g", "have g_dom:\"vertices (snd R) = Domain g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vertices (snd R) = Domain g", "using subsLR"], ["proof (prove)\nusing this:\n  vertices (fst R) \\<subseteq> vertices (snd R)\n\ngoal (1 subgoal):\n 1. vertices (snd R) = Domain g", "unfolding g_def extend_def Domain_Un_eq f_dom"], ["proof (prove)\nusing this:\n  vertices (fst R) \\<subseteq> vertices (snd R)\n\ngoal (1 subgoal):\n 1. vertices (snd R) =\n    vertices (fst R) \\<union>\n    Domain\n     (let V_new = sorted_list_of_set (vertices (snd R) - vertices (fst R))\n      in set (zip V_new [n..<n + length V_new]))", "by (auto simp:Let_def)"], ["proof (state)\nthis:\n  vertices (snd R) = Domain g\n\ngoal (4 subgoals):\n 1. graph_homomorphism (snd R) G' g\n 2. agree_on (fst R) f g\n 3. f \\<subseteq> g\n 4. weak_universal t R (LG E {0..<n}) G' f g", "show \"graph_homomorphism (snd R) G' g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. graph_homomorphism (snd R) G' g", "by (intro graph_homomorphismI[OF g_dom _ uni_g _ gr_R gr_G'])\n       (auto simp:G'_def intro:in_g)"], ["proof (state)\nthis:\n  graph_homomorphism (snd R) G' g\n\ngoal (3 subgoals):\n 1. agree_on (fst R) f g\n 2. f \\<subseteq> g\n 3. weak_universal t R (LG E {0..<n}) G' f g", "show \"f \\<subseteq> g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<subseteq> g", "by (auto simp:g_def extend_def)"], ["proof (state)\nthis:\n  f \\<subseteq> g\n\ngoal (2 subgoals):\n 1. agree_on (fst R) f g\n 2. weak_universal t R (LG E {0..<n}) G' f g", "thus \"agree_on (fst R) f g\""], ["proof (prove)\nusing this:\n  f \\<subseteq> g\n\ngoal (1 subgoal):\n 1. agree_on (fst R) f g", "using f_dom uni_g agree_on_subset equalityE"], ["proof (prove)\nusing this:\n  f \\<subseteq> g\n  Domain f = vertices (fst R)\n  univalent g\n  \\<lbrakk>?f \\<subseteq> ?g; vertices ?G \\<subseteq> Domain ?f;\n   univalent ?g\\<rbrakk>\n  \\<Longrightarrow> agree_on ?G ?f ?g\n  \\<lbrakk>?A = ?B;\n   \\<lbrakk>?A \\<subseteq> ?B; ?B \\<subseteq> ?A\\<rbrakk>\n   \\<Longrightarrow> ?P\\<rbrakk>\n  \\<Longrightarrow> ?P\n\ngoal (1 subgoal):\n 1. agree_on (fst R) f g", "by metis"], ["proof (state)\nthis:\n  agree_on (fst R) f g\n\ngoal (1 subgoal):\n 1. weak_universal t R (LG E {0..<n}) G' f g", "show \"weak_universal t R ?G G' f g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. weak_universal t R (LG E {0..<n}) G' f g", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>h\\<^sub>1 h\\<^sub>2 G.\n       \\<lbrakk>graph_homomorphism (snd R) G h\\<^sub>1;\n        graph_homomorphism (LG E {0..<n}) G h\\<^sub>2;\n        f O h\\<^sub>2 \\<subseteq> h\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>h.\n                            graph_homomorphism G' G h \\<and>\n                            h\\<^sub>2 \\<subseteq> h", "fix a:: \"('b \\<times> 'x) set\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>h\\<^sub>1 h\\<^sub>2 G.\n       \\<lbrakk>graph_homomorphism (snd R) G h\\<^sub>1;\n        graph_homomorphism (LG E {0..<n}) G h\\<^sub>2;\n        f O h\\<^sub>2 \\<subseteq> h\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>h.\n                            graph_homomorphism G' G h \\<and>\n                            h\\<^sub>2 \\<subseteq> h", "fix b G"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>h\\<^sub>1 h\\<^sub>2 G.\n       \\<lbrakk>graph_homomorphism (snd R) G h\\<^sub>1;\n        graph_homomorphism (LG E {0..<n}) G h\\<^sub>2;\n        f O h\\<^sub>2 \\<subseteq> h\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>h.\n                            graph_homomorphism G' G h \\<and>\n                            h\\<^sub>2 \\<subseteq> h", "assume a:\"graph_homomorphism (snd R) G a\"\n             \"graph_homomorphism ?G G b\" \"f O b \\<subseteq> a\""], ["proof (state)\nthis:\n  graph_homomorphism (snd R) G a\n  graph_homomorphism (LG E {0..<n}) G b\n  f O b \\<subseteq> a\n\ngoal (1 subgoal):\n 1. \\<And>h\\<^sub>1 h\\<^sub>2 G.\n       \\<lbrakk>graph_homomorphism (snd R) G h\\<^sub>1;\n        graph_homomorphism (LG E {0..<n}) G h\\<^sub>2;\n        f O h\\<^sub>2 \\<subseteq> h\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>h.\n                            graph_homomorphism G' G h \\<and>\n                            h\\<^sub>2 \\<subseteq> h", "hence univ_b:\"univalent b\" and univ_a:\"univalent a\"\n      and rng_b:\"Range b \\<subseteq> vertices G\" and rng_a:\"Range a \\<subseteq> vertices G\"\n      and ep_b:\"edge_preserving b (edges (LG E {0..<n})) (edges G)\"\n      and ep_a:\"edge_preserving a (edges (snd R)) (edges G)\""], ["proof (prove)\nusing this:\n  graph_homomorphism (snd R) G a\n  graph_homomorphism (LG E {0..<n}) G b\n  f O b \\<subseteq> a\n\ngoal (1 subgoal):\n 1. (univalent b &&& univalent a &&& Range b \\<subseteq> vertices G) &&&\n    Range a \\<subseteq> vertices G &&&\n    edge_preserving b (edges (LG E {0..<n})) (edges G) &&&\n    edge_preserving a (edges (snd R)) (edges G)", "unfolding graph_homomorphism_def prod.sel labeled_graph.sel"], ["proof (prove)\nusing this:\n  vertices (snd R) = Domain a \\<and>\n  graph (snd R) \\<and>\n  graph G \\<and>\n  a `` vertices (snd R) \\<subseteq> vertices G \\<and>\n  univalent a \\<and> edge_preserving a (edges (snd R)) (edges G)\n  {0..<n} = Domain b \\<and>\n  graph (LG E {0..<n}) \\<and>\n  graph G \\<and>\n  b `` {0..<n} \\<subseteq> vertices G \\<and>\n  univalent b \\<and> edge_preserving b E (edges G)\n  f O b \\<subseteq> a\n\ngoal (1 subgoal):\n 1. (univalent b &&& univalent a &&& Range b \\<subseteq> vertices G) &&&\n    Range a \\<subseteq> vertices G &&&\n    edge_preserving b E (edges G) &&&\n    edge_preserving a (edges (snd R)) (edges G)", "by blast+"], ["proof (state)\nthis:\n  univalent b\n  univalent a\n  Range b \\<subseteq> vertices G\n  Range a \\<subseteq> vertices G\n  edge_preserving b (edges (LG E {0..<n})) (edges G)\n  edge_preserving a (edges (snd R)) (edges G)\n\ngoal (1 subgoal):\n 1. \\<And>h\\<^sub>1 h\\<^sub>2 G.\n       \\<lbrakk>graph_homomorphism (snd R) G h\\<^sub>1;\n        graph_homomorphism (LG E {0..<n}) G h\\<^sub>2;\n        f O h\\<^sub>2 \\<subseteq> h\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>h.\n                            graph_homomorphism G' G h \\<and>\n                            h\\<^sub>2 \\<subseteq> h", "from a"], ["proof (chain)\npicking this:\n  graph_homomorphism (snd R) G a\n  graph_homomorphism (LG E {0..<n}) G b\n  f O b \\<subseteq> a", "have dom_b:\"Domain b = {0..<n}\"\n      and dom_a:\"Domain a = vertices (snd R)\" and v6: \"graph G\""], ["proof (prove)\nusing this:\n  graph_homomorphism (snd R) G a\n  graph_homomorphism (LG E {0..<n}) G b\n  f O b \\<subseteq> a\n\ngoal (1 subgoal):\n 1. Domain b = {0..<n} &&& Domain a = vertices (snd R) &&& graph G", "unfolding graph_homomorphism_def prod.sel labeled_graph.sel"], ["proof (prove)\nusing this:\n  vertices (snd R) = Domain a \\<and>\n  graph (snd R) \\<and>\n  graph G \\<and>\n  a `` vertices (snd R) \\<subseteq> vertices G \\<and>\n  univalent a \\<and> edge_preserving a (edges (snd R)) (edges G)\n  {0..<n} = Domain b \\<and>\n  graph (LG E {0..<n}) \\<and>\n  graph G \\<and>\n  b `` {0..<n} \\<subseteq> vertices G \\<and>\n  univalent b \\<and> edge_preserving b E (edges G)\n  f O b \\<subseteq> a\n\ngoal (1 subgoal):\n 1. Domain b = {0..<n} &&& Domain a = vertices (snd R) &&& graph G", "by auto"], ["proof (state)\nthis:\n  Domain b = {0..<n}\n  Domain a = vertices (snd R)\n  graph G\n\ngoal (1 subgoal):\n 1. \\<And>h\\<^sub>1 h\\<^sub>2 G.\n       \\<lbrakk>graph_homomorphism (snd R) G h\\<^sub>1;\n        graph_homomorphism (LG E {0..<n}) G h\\<^sub>2;\n        f O h\\<^sub>2 \\<subseteq> h\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>h.\n                            graph_homomorphism G' G h \\<and>\n                            h\\<^sub>2 \\<subseteq> h", "have help_dom_b:\"(y, z) \\<in> b \\<Longrightarrow> n \\<le> y \\<Longrightarrow> False\" for y z"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(y, z) \\<in> b; n \\<le> y\\<rbrakk> \\<Longrightarrow> False", "using dom_b"], ["proof (prove)\nusing this:\n  Domain b = {0..<n}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(y, z) \\<in> b; n \\<le> y\\<rbrakk> \\<Longrightarrow> False", "by (metis Domain.DomainI atLeastLessThan_iff not_less)"], ["proof (state)\nthis:\n  \\<lbrakk>(?y, ?z) \\<in> b; n \\<le> ?y\\<rbrakk> \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. \\<And>h\\<^sub>1 h\\<^sub>2 G.\n       \\<lbrakk>graph_homomorphism (snd R) G h\\<^sub>1;\n        graph_homomorphism (LG E {0..<n}) G h\\<^sub>2;\n        f O h\\<^sub>2 \\<subseteq> h\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>h.\n                            graph_homomorphism G' G h \\<and>\n                            h\\<^sub>2 \\<subseteq> h", "have disj_doms:\"Domain b \\<inter> Domain (?g\\<inverse> O a) = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Domain b \\<inter>\n    Domain\n     ((let V_new = sorted_list_of_set (vertices (snd R) - vertices (fst R))\n       in set (zip V_new [n..<n + length V_new]))\\<inverse> O\n      a) =\n    {}", "using help_dom_b"], ["proof (prove)\nusing this:\n  \\<lbrakk>(?y, ?z) \\<in> b; n \\<le> ?y\\<rbrakk> \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. Domain b \\<inter>\n    Domain\n     ((let V_new = sorted_list_of_set (vertices (snd R) - vertices (fst R))\n       in set (zip V_new [n..<n + length V_new]))\\<inverse> O\n      a) =\n    {}", "unfolding Let_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>(?y, ?z) \\<in> b; n \\<le> ?y\\<rbrakk> \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. Domain b \\<inter>\n    Domain\n     ((set (zip (sorted_list_of_set (vertices (snd R) - vertices (fst R)))\n             [n..<\n              n +\n              length\n               (sorted_list_of_set\n                 (vertices (snd R) - vertices (fst R)))]))\\<inverse> O\n      a) =\n    {}", "by (auto dest!:set_zip_leftD)"], ["proof (state)\nthis:\n  Domain b \\<inter>\n  Domain\n   ((let V_new = sorted_list_of_set (vertices (snd R) - vertices (fst R))\n     in set (zip V_new [n..<n + length V_new]))\\<inverse> O\n    a) =\n  {}\n\ngoal (1 subgoal):\n 1. \\<And>h\\<^sub>1 h\\<^sub>2 G.\n       \\<lbrakk>graph_homomorphism (snd R) G h\\<^sub>1;\n        graph_homomorphism (LG E {0..<n}) G h\\<^sub>2;\n        f O h\\<^sub>2 \\<subseteq> h\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>h.\n                            graph_homomorphism G' G h \\<and>\n                            h\\<^sub>2 \\<subseteq> h", "have \"max n (nextMax (Range ?g)) = n + length (sorted_list_of_set ?R_L)\" (is \"_ = ?len\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. max n\n     (nextMax\n       (Range\n         (let V_new =\n                sorted_list_of_set (vertices (snd R) - vertices (fst R))\n          in set (zip V_new [n..<n + length V_new])))) =\n    n + length (sorted_list_of_set (vertices (snd R) - vertices (fst R)))", "unfolding Let_def Range_snd set_map[symmetric] map_snd_zip[OF ln] nextMax_set[OF sorted_upt]"], ["proof (prove)\ngoal (1 subgoal):\n 1. max n\n     (if [n..<\n          n +\n          length\n           (sorted_list_of_set (vertices (snd R) - vertices (fst R)))] =\n         []\n      then 0\n      else Suc (last\n                 [n..<\n                  n +\n                  length\n                   (sorted_list_of_set\n                     (vertices (snd R) - vertices (fst R)))])) =\n    n + length (sorted_list_of_set (vertices (snd R) - vertices (fst R)))", "by (fastforce simp del: length_sorted_list_of_set)"], ["proof (state)\nthis:\n  max n\n   (nextMax\n     (Range\n       (let V_new = sorted_list_of_set (vertices (snd R) - vertices (fst R))\n        in set (zip V_new [n..<n + length V_new])))) =\n  n + length (sorted_list_of_set (vertices (snd R) - vertices (fst R)))\n\ngoal (1 subgoal):\n 1. \\<And>h\\<^sub>1 h\\<^sub>2 G.\n       \\<lbrakk>graph_homomorphism (snd R) G h\\<^sub>1;\n        graph_homomorphism (LG E {0..<n}) G h\\<^sub>2;\n        f O h\\<^sub>2 \\<subseteq> h\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>h.\n                            graph_homomorphism G' G h \\<and>\n                            h\\<^sub>2 \\<subseteq> h", "hence n_eq:\"?len = max n (nextMax (Range g))\""], ["proof (prove)\nusing this:\n  max n\n   (nextMax\n     (Range\n       (let V_new = sorted_list_of_set (vertices (snd R) - vertices (fst R))\n        in set (zip V_new [n..<n + length V_new])))) =\n  n + length (sorted_list_of_set (vertices (snd R) - vertices (fst R)))\n\ngoal (1 subgoal):\n 1. n + length (sorted_list_of_set (vertices (snd R) - vertices (fst R))) =\n    max n (nextMax (Range g))", "unfolding Range_snd[symmetric] g_def extend_def Range_Un_eq\n                nextMax_Un_eq[OF fin_f fin_g'(2)] max.assoc[symmetric] max_absorb1[OF nextMax_f]"], ["proof (prove)\nusing this:\n  max n\n   (nextMax\n     (Range\n       (let V_new = sorted_list_of_set (vertices (snd R) - vertices (fst R))\n        in set (zip V_new [n..<n + length V_new])))) =\n  n + length (sorted_list_of_set (vertices (snd R) - vertices (fst R)))\n\ngoal (1 subgoal):\n 1. n + length (sorted_list_of_set (vertices (snd R) - vertices (fst R))) =\n    max n\n     (nextMax\n       (Range\n         (let V_new =\n                sorted_list_of_set (vertices (snd R) - vertices (fst R))\n          in set (zip V_new [n..<n + length V_new]))))", "by auto"], ["proof (state)\nthis:\n  n + length (sorted_list_of_set (vertices (snd R) - vertices (fst R))) =\n  max n (nextMax (Range g))\n\ngoal (1 subgoal):\n 1. \\<And>h\\<^sub>1 h\\<^sub>2 G.\n       \\<lbrakk>graph_homomorphism (snd R) G h\\<^sub>1;\n        graph_homomorphism (LG E {0..<n}) G h\\<^sub>2;\n        f O h\\<^sub>2 \\<subseteq> h\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>h.\n                            graph_homomorphism G' G h \\<and>\n                            h\\<^sub>2 \\<subseteq> h", "let ?h = \"b \\<union> ?g\\<inverse> O a\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>h\\<^sub>1 h\\<^sub>2 G.\n       \\<lbrakk>graph_homomorphism (snd R) G h\\<^sub>1;\n        graph_homomorphism (LG E {0..<n}) G h\\<^sub>2;\n        f O h\\<^sub>2 \\<subseteq> h\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>h.\n                            graph_homomorphism G' G h \\<and>\n                            h\\<^sub>2 \\<subseteq> h", "have dg:\"Domain (?g\\<inverse>) = {n..<max n (nextMax (Range g))}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Domain\n     ((let V_new = sorted_list_of_set (vertices (snd R) - vertices (fst R))\n       in set (zip V_new [n..<n + length V_new]))\\<inverse>) =\n    {n..<max n (nextMax (Range g))}", "unfolding Let_def Domain_converse Range_set_zip[OF ln] atLeastLessThan_upt"], ["proof (prove)\ngoal (1 subgoal):\n 1. set [n..<\n         n +\n         length\n          (sorted_list_of_set (vertices (snd R) - vertices (fst R)))] =\n    set [n..<max n (nextMax (Range g))]", "unfolding Range_snd n_eq"], ["proof (prove)\ngoal (1 subgoal):\n 1. set [n..<max n (nextMax (snd ` g))] =\n    set [n..<max n (nextMax (snd ` g))]", ".."], ["proof (state)\nthis:\n  Domain\n   ((let V_new = sorted_list_of_set (vertices (snd R) - vertices (fst R))\n     in set (zip V_new [n..<n + length V_new]))\\<inverse>) =\n  {n..<max n (nextMax (Range g))}\n\ngoal (1 subgoal):\n 1. \\<And>h\\<^sub>1 h\\<^sub>2 G.\n       \\<lbrakk>graph_homomorphism (snd R) G h\\<^sub>1;\n        graph_homomorphism (LG E {0..<n}) G h\\<^sub>2;\n        f O h\\<^sub>2 \\<subseteq> h\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>h.\n                            graph_homomorphism G' G h \\<and>\n                            h\\<^sub>2 \\<subseteq> h", "have \"?g `` Domain a = ?g `` (?R_L \\<union> vertices (fst R))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (let V_new = sorted_list_of_set (vertices (snd R) - vertices (fst R))\n     in set (zip V_new [n..<n + length V_new])) ``\n    Domain a =\n    (let V_new = sorted_list_of_set (vertices (snd R) - vertices (fst R))\n     in set (zip V_new [n..<n + length V_new])) ``\n    (vertices (snd R) - vertices (fst R) \\<union> vertices (fst R))", "using dom_a subsLR"], ["proof (prove)\nusing this:\n  Domain a = vertices (snd R)\n  vertices (fst R) \\<subseteq> vertices (snd R)\n\ngoal (1 subgoal):\n 1. (let V_new = sorted_list_of_set (vertices (snd R) - vertices (fst R))\n     in set (zip V_new [n..<n + length V_new])) ``\n    Domain a =\n    (let V_new = sorted_list_of_set (vertices (snd R) - vertices (fst R))\n     in set (zip V_new [n..<n + length V_new])) ``\n    (vertices (snd R) - vertices (fst R) \\<union> vertices (fst R))", "by auto"], ["proof (state)\nthis:\n  (let V_new = sorted_list_of_set (vertices (snd R) - vertices (fst R))\n   in set (zip V_new [n..<n + length V_new])) ``\n  Domain a =\n  (let V_new = sorted_list_of_set (vertices (snd R) - vertices (fst R))\n   in set (zip V_new [n..<n + length V_new])) ``\n  (vertices (snd R) - vertices (fst R) \\<union> vertices (fst R))\n\ngoal (1 subgoal):\n 1. \\<And>h\\<^sub>1 h\\<^sub>2 G.\n       \\<lbrakk>graph_homomorphism (snd R) G h\\<^sub>1;\n        graph_homomorphism (LG E {0..<n}) G h\\<^sub>2;\n        f O h\\<^sub>2 \\<subseteq> h\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>h.\n                            graph_homomorphism G' G h \\<and>\n                            h\\<^sub>2 \\<subseteq> h", "also"], ["proof (state)\nthis:\n  (let V_new = sorted_list_of_set (vertices (snd R) - vertices (fst R))\n   in set (zip V_new [n..<n + length V_new])) ``\n  Domain a =\n  (let V_new = sorted_list_of_set (vertices (snd R) - vertices (fst R))\n   in set (zip V_new [n..<n + length V_new])) ``\n  (vertices (snd R) - vertices (fst R) \\<union> vertices (fst R))\n\ngoal (1 subgoal):\n 1. \\<And>h\\<^sub>1 h\\<^sub>2 G.\n       \\<lbrakk>graph_homomorphism (snd R) G h\\<^sub>1;\n        graph_homomorphism (LG E {0..<n}) G h\\<^sub>2;\n        f O h\\<^sub>2 \\<subseteq> h\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>h.\n                            graph_homomorphism G' G h \\<and>\n                            h\\<^sub>2 \\<subseteq> h", "have \"\\<dots> = ?g `` ?R_L \\<union> ?g `` vertices (fst R)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (let V_new = sorted_list_of_set (vertices (snd R) - vertices (fst R))\n     in set (zip V_new [n..<n + length V_new])) ``\n    (vertices (snd R) - vertices (fst R) \\<union> vertices (fst R)) =\n    (let V_new = sorted_list_of_set (vertices (snd R) - vertices (fst R))\n     in set (zip V_new [n..<n + length V_new])) ``\n    (vertices (snd R) - vertices (fst R)) \\<union>\n    (let V_new = sorted_list_of_set (vertices (snd R) - vertices (fst R))\n     in set (zip V_new [n..<n + length V_new])) ``\n    vertices (fst R)", "by blast"], ["proof (state)\nthis:\n  (let V_new = sorted_list_of_set (vertices (snd R) - vertices (fst R))\n   in set (zip V_new [n..<n + length V_new])) ``\n  (vertices (snd R) - vertices (fst R) \\<union> vertices (fst R)) =\n  (let V_new = sorted_list_of_set (vertices (snd R) - vertices (fst R))\n   in set (zip V_new [n..<n + length V_new])) ``\n  (vertices (snd R) - vertices (fst R)) \\<union>\n  (let V_new = sorted_list_of_set (vertices (snd R) - vertices (fst R))\n   in set (zip V_new [n..<n + length V_new])) ``\n  vertices (fst R)\n\ngoal (1 subgoal):\n 1. \\<And>h\\<^sub>1 h\\<^sub>2 G.\n       \\<lbrakk>graph_homomorphism (snd R) G h\\<^sub>1;\n        graph_homomorphism (LG E {0..<n}) G h\\<^sub>2;\n        f O h\\<^sub>2 \\<subseteq> h\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>h.\n                            graph_homomorphism G' G h \\<and>\n                            h\\<^sub>2 \\<subseteq> h", "also"], ["proof (state)\nthis:\n  (let V_new = sorted_list_of_set (vertices (snd R) - vertices (fst R))\n   in set (zip V_new [n..<n + length V_new])) ``\n  (vertices (snd R) - vertices (fst R) \\<union> vertices (fst R)) =\n  (let V_new = sorted_list_of_set (vertices (snd R) - vertices (fst R))\n   in set (zip V_new [n..<n + length V_new])) ``\n  (vertices (snd R) - vertices (fst R)) \\<union>\n  (let V_new = sorted_list_of_set (vertices (snd R) - vertices (fst R))\n   in set (zip V_new [n..<n + length V_new])) ``\n  vertices (fst R)\n\ngoal (1 subgoal):\n 1. \\<And>h\\<^sub>1 h\\<^sub>2 G.\n       \\<lbrakk>graph_homomorphism (snd R) G h\\<^sub>1;\n        graph_homomorphism (LG E {0..<n}) G h\\<^sub>2;\n        f O h\\<^sub>2 \\<subseteq> h\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>h.\n                            graph_homomorphism G' G h \\<and>\n                            h\\<^sub>2 \\<subseteq> h", "have \"?g `` vertices (fst R) = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (let V_new = sorted_list_of_set (vertices (snd R) - vertices (fst R))\n     in set (zip V_new [n..<n + length V_new])) ``\n    vertices (fst R) =\n    {}", "apply(rule Image_outside_Domain)"], ["proof (prove)\ngoal (1 subgoal):\n 1. Domain\n     (let V_new = sorted_list_of_set (vertices (snd R) - vertices (fst R))\n      in set (zip V_new [n..<n + length V_new])) \\<inter>\n    vertices (fst R) =\n    {}", "unfolding Let_def Domain_set_zip[OF ln]"], ["proof (prove)\ngoal (1 subgoal):\n 1. set (sorted_list_of_set (vertices (snd R) - vertices (fst R))) \\<inter>\n    vertices (fst R) =\n    {}", "by auto"], ["proof (state)\nthis:\n  (let V_new = sorted_list_of_set (vertices (snd R) - vertices (fst R))\n   in set (zip V_new [n..<n + length V_new])) ``\n  vertices (fst R) =\n  {}\n\ngoal (1 subgoal):\n 1. \\<And>h\\<^sub>1 h\\<^sub>2 G.\n       \\<lbrakk>graph_homomorphism (snd R) G h\\<^sub>1;\n        graph_homomorphism (LG E {0..<n}) G h\\<^sub>2;\n        f O h\\<^sub>2 \\<subseteq> h\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>h.\n                            graph_homomorphism G' G h \\<and>\n                            h\\<^sub>2 \\<subseteq> h", "also"], ["proof (state)\nthis:\n  (let V_new = sorted_list_of_set (vertices (snd R) - vertices (fst R))\n   in set (zip V_new [n..<n + length V_new])) ``\n  vertices (fst R) =\n  {}\n\ngoal (1 subgoal):\n 1. \\<And>h\\<^sub>1 h\\<^sub>2 G.\n       \\<lbrakk>graph_homomorphism (snd R) G h\\<^sub>1;\n        graph_homomorphism (LG E {0..<n}) G h\\<^sub>2;\n        f O h\\<^sub>2 \\<subseteq> h\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>h.\n                            graph_homomorphism G' G h \\<and>\n                            h\\<^sub>2 \\<subseteq> h", "have \"?g `` ?R_L = Range ?g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (let V_new = sorted_list_of_set (vertices (snd R) - vertices (fst R))\n     in set (zip V_new [n..<n + length V_new])) ``\n    (vertices (snd R) - vertices (fst R)) =\n    Range\n     (let V_new = sorted_list_of_set (vertices (snd R) - vertices (fst R))\n      in set (zip V_new [n..<n + length V_new]))", "apply(rule Image_Domain)"], ["proof (prove)\ngoal (1 subgoal):\n 1. Domain\n     (let V_new = sorted_list_of_set (vertices (snd R) - vertices (fst R))\n      in set (zip V_new [n..<n + length V_new])) =\n    vertices (snd R) - vertices (fst R)", "unfolding Let_def Domain_set_zip[OF ln]"], ["proof (prove)\ngoal (1 subgoal):\n 1. set (sorted_list_of_set (vertices (snd R) - vertices (fst R))) =\n    vertices (snd R) - vertices (fst R)", "by auto"], ["proof (state)\nthis:\n  (let V_new = sorted_list_of_set (vertices (snd R) - vertices (fst R))\n   in set (zip V_new [n..<n + length V_new])) ``\n  (vertices (snd R) - vertices (fst R)) =\n  Range\n   (let V_new = sorted_list_of_set (vertices (snd R) - vertices (fst R))\n    in set (zip V_new [n..<n + length V_new]))\n\ngoal (1 subgoal):\n 1. \\<And>h\\<^sub>1 h\\<^sub>2 G.\n       \\<lbrakk>graph_homomorphism (snd R) G h\\<^sub>1;\n        graph_homomorphism (LG E {0..<n}) G h\\<^sub>2;\n        f O h\\<^sub>2 \\<subseteq> h\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>h.\n                            graph_homomorphism G' G h \\<and>\n                            h\\<^sub>2 \\<subseteq> h", "finally"], ["proof (chain)\npicking this:\n  (let V_new = sorted_list_of_set (vertices (snd R) - vertices (fst R))\n   in set (zip V_new [n..<n + length V_new])) ``\n  Domain a =\n  Range\n   (let V_new = sorted_list_of_set (vertices (snd R) - vertices (fst R))\n    in set (zip V_new [n..<n + length V_new])) \\<union>\n  {}", "have dg2:\"?g `` Domain a = {n..<max n (nextMax (Range g))}\""], ["proof (prove)\nusing this:\n  (let V_new = sorted_list_of_set (vertices (snd R) - vertices (fst R))\n   in set (zip V_new [n..<n + length V_new])) ``\n  Domain a =\n  Range\n   (let V_new = sorted_list_of_set (vertices (snd R) - vertices (fst R))\n    in set (zip V_new [n..<n + length V_new])) \\<union>\n  {}\n\ngoal (1 subgoal):\n 1. (let V_new = sorted_list_of_set (vertices (snd R) - vertices (fst R))\n     in set (zip V_new [n..<n + length V_new])) ``\n    Domain a =\n    {n..<max n (nextMax (Range g))}", "unfolding Let_def Range_set_zip[OF ln] set_sorted_list_of_set[OF fin_R_L]"], ["proof (prove)\nusing this:\n  set (zip (sorted_list_of_set (vertices (snd R) - vertices (fst R)))\n        [n..<\n         n +\n         length\n          (sorted_list_of_set (vertices (snd R) - vertices (fst R)))]) ``\n  Domain a =\n  set [n..<\n       n +\n       length\n        (sorted_list_of_set (vertices (snd R) - vertices (fst R)))] \\<union>\n  {}\n\ngoal (1 subgoal):\n 1. set (zip (sorted_list_of_set (vertices (snd R) - vertices (fst R)))\n          [n..<\n           n +\n           length\n            (sorted_list_of_set (vertices (snd R) - vertices (fst R)))]) ``\n    Domain a =\n    {n..<max n (nextMax (Range g))}", "unfolding n_eq set_upt"], ["proof (prove)\nusing this:\n  set (zip (sorted_list_of_set (vertices (snd R) - vertices (fst R)))\n        [n..<max n (nextMax (Range g))]) ``\n  Domain a =\n  {n..<max n (nextMax (Range g))} \\<union> {}\n\ngoal (1 subgoal):\n 1. set (zip (sorted_list_of_set (vertices (snd R) - vertices (fst R)))\n          [n..<max n (nextMax (Range g))]) ``\n    Domain a =\n    {n..<max n (nextMax (Range g))}", "by auto"], ["proof (state)\nthis:\n  (let V_new = sorted_list_of_set (vertices (snd R) - vertices (fst R))\n   in set (zip V_new [n..<n + length V_new])) ``\n  Domain a =\n  {n..<max n (nextMax (Range g))}\n\ngoal (1 subgoal):\n 1. \\<And>h\\<^sub>1 h\\<^sub>2 G.\n       \\<lbrakk>graph_homomorphism (snd R) G h\\<^sub>1;\n        graph_homomorphism (LG E {0..<n}) G h\\<^sub>2;\n        f O h\\<^sub>2 \\<subseteq> h\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>h.\n                            graph_homomorphism G' G h \\<and>\n                            h\\<^sub>2 \\<subseteq> h", "have \"Domain (?g\\<inverse> O a) = {n..<max n (nextMax (Range g))}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Domain\n     ((let V_new = sorted_list_of_set (vertices (snd R) - vertices (fst R))\n       in set (zip V_new [n..<n + length V_new]))\\<inverse> O\n      a) =\n    {n..<max n (nextMax (Range g))}", "unfolding Domain_id_on converse_converse dg dg2"], ["proof (prove)\ngoal (1 subgoal):\n 1. {n..<max n (nextMax (Range g))} \\<inter>\n    {n..<max n (nextMax (Range g))} =\n    {n..<max n (nextMax (Range g))}", "by auto"], ["proof (state)\nthis:\n  Domain\n   ((let V_new = sorted_list_of_set (vertices (snd R) - vertices (fst R))\n     in set (zip V_new [n..<n + length V_new]))\\<inverse> O\n    a) =\n  {n..<max n (nextMax (Range g))}\n\ngoal (1 subgoal):\n 1. \\<And>h\\<^sub>1 h\\<^sub>2 G.\n       \\<lbrakk>graph_homomorphism (snd R) G h\\<^sub>1;\n        graph_homomorphism (LG E {0..<n}) G h\\<^sub>2;\n        f O h\\<^sub>2 \\<subseteq> h\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>h.\n                            graph_homomorphism G' G h \\<and>\n                            h\\<^sub>2 \\<subseteq> h", "hence v1: \"vertices G' = Domain ?h\""], ["proof (prove)\nusing this:\n  Domain\n   ((let V_new = sorted_list_of_set (vertices (snd R) - vertices (fst R))\n     in set (zip V_new [n..<n + length V_new]))\\<inverse> O\n    a) =\n  {n..<max n (nextMax (Range g))}\n\ngoal (1 subgoal):\n 1. vertices G' =\n    Domain\n     (b \\<union>\n      (let V_new = sorted_list_of_set (vertices (snd R) - vertices (fst R))\n       in set (zip V_new [n..<n + length V_new]))\\<inverse> O\n      a)", "unfolding G'_def Domain_Un_eq dom_b"], ["proof (prove)\nusing this:\n  Domain\n   ((let V_new = sorted_list_of_set (vertices (snd R) - vertices (fst R))\n     in set (zip V_new [n..<n + length V_new]))\\<inverse> O\n    a) =\n  {n..<max n (nextMax (Range g))}\n\ngoal (1 subgoal):\n 1. vertices\n     (LG (on_triple g `` edges (snd R) \\<union> E)\n       {0..<max n (nextMax (Range g))}) =\n    {0..<n} \\<union>\n    Domain\n     ((let V_new = sorted_list_of_set (vertices (snd R) - vertices (fst R))\n       in set (zip V_new [n..<n + length V_new]))\\<inverse> O\n      a)", "by auto"], ["proof (state)\nthis:\n  vertices G' =\n  Domain\n   (b \\<union>\n    (let V_new = sorted_list_of_set (vertices (snd R) - vertices (fst R))\n     in set (zip V_new [n..<n + length V_new]))\\<inverse> O\n    a)\n\ngoal (1 subgoal):\n 1. \\<And>h\\<^sub>1 h\\<^sub>2 G.\n       \\<lbrakk>graph_homomorphism (snd R) G h\\<^sub>1;\n        graph_homomorphism (LG E {0..<n}) G h\\<^sub>2;\n        f O h\\<^sub>2 \\<subseteq> h\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>h.\n                            graph_homomorphism G' G h \\<and>\n                            h\\<^sub>2 \\<subseteq> h", "have \"b `` vertices G' \\<subseteq> vertices G\" \"(?g\\<inverse> O a) `` vertices G' \\<subseteq> vertices G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. b `` vertices G' \\<subseteq> vertices G &&&\n    ((let V_new = sorted_list_of_set (vertices (snd R) - vertices (fst R))\n      in set (zip V_new [n..<n + length V_new]))\\<inverse> O\n     a) ``\n    vertices G'\n    \\<subseteq> vertices G", "using rng_a rng_b"], ["proof (prove)\nusing this:\n  Range a \\<subseteq> vertices G\n  Range b \\<subseteq> vertices G\n\ngoal (1 subgoal):\n 1. b `` vertices G' \\<subseteq> vertices G &&&\n    ((let V_new = sorted_list_of_set (vertices (snd R) - vertices (fst R))\n      in set (zip V_new [n..<n + length V_new]))\\<inverse> O\n     a) ``\n    vertices G'\n    \\<subseteq> vertices G", "by auto"], ["proof (state)\nthis:\n  b `` vertices G' \\<subseteq> vertices G\n  ((let V_new = sorted_list_of_set (vertices (snd R) - vertices (fst R))\n    in set (zip V_new [n..<n + length V_new]))\\<inverse> O\n   a) ``\n  vertices G'\n  \\<subseteq> vertices G\n\ngoal (1 subgoal):\n 1. \\<And>h\\<^sub>1 h\\<^sub>2 G.\n       \\<lbrakk>graph_homomorphism (snd R) G h\\<^sub>1;\n        graph_homomorphism (LG E {0..<n}) G h\\<^sub>2;\n        f O h\\<^sub>2 \\<subseteq> h\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>h.\n                            graph_homomorphism G' G h \\<and>\n                            h\\<^sub>2 \\<subseteq> h", "hence v2: \"?h `` vertices G' \\<subseteq> vertices G\""], ["proof (prove)\nusing this:\n  b `` vertices G' \\<subseteq> vertices G\n  ((let V_new = sorted_list_of_set (vertices (snd R) - vertices (fst R))\n    in set (zip V_new [n..<n + length V_new]))\\<inverse> O\n   a) ``\n  vertices G'\n  \\<subseteq> vertices G\n\ngoal (1 subgoal):\n 1. (b \\<union>\n     (let V_new = sorted_list_of_set (vertices (snd R) - vertices (fst R))\n      in set (zip V_new [n..<n + length V_new]))\\<inverse> O\n     a) ``\n    vertices G'\n    \\<subseteq> vertices G", "by blast"], ["proof (state)\nthis:\n  (b \\<union>\n   (let V_new = sorted_list_of_set (vertices (snd R) - vertices (fst R))\n    in set (zip V_new [n..<n + length V_new]))\\<inverse> O\n   a) ``\n  vertices G'\n  \\<subseteq> vertices G\n\ngoal (1 subgoal):\n 1. \\<And>h\\<^sub>1 h\\<^sub>2 G.\n       \\<lbrakk>graph_homomorphism (snd R) G h\\<^sub>1;\n        graph_homomorphism (LG E {0..<n}) G h\\<^sub>2;\n        f O h\\<^sub>2 \\<subseteq> h\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>h.\n                            graph_homomorphism G' G h \\<and>\n                            h\\<^sub>2 \\<subseteq> h", "have v3: \"univalent ?h\""], ["proof (prove)\ngoal (1 subgoal):\n 1. univalent\n     (b \\<union>\n      (let V_new = sorted_list_of_set (vertices (snd R) - vertices (fst R))\n       in set (zip V_new [n..<n + length V_new]))\\<inverse> O\n      a)", "using disj_doms univalent_union[OF univ_b univalent_composes[OF uni_g'(2) univ_a]]"], ["proof (prove)\nusing this:\n  Domain b \\<inter>\n  Domain\n   ((let V_new = sorted_list_of_set (vertices (snd R) - vertices (fst R))\n     in set (zip V_new [n..<n + length V_new]))\\<inverse> O\n    a) =\n  {}\n  Domain b \\<inter>\n  Domain\n   ((let V_new = sorted_list_of_set (vertices (snd R) - vertices (fst R))\n     in set (zip V_new [n..<n + length V_new]))\\<inverse> O\n    a) =\n  Domain\n   (b \\<inter>\n    (let V_new = sorted_list_of_set (vertices (snd R) - vertices (fst R))\n     in set (zip V_new [n..<n + length V_new]))\\<inverse> O\n    a) \\<Longrightarrow>\n  univalent\n   (b \\<union>\n    (let V_new = sorted_list_of_set (vertices (snd R) - vertices (fst R))\n     in set (zip V_new [n..<n + length V_new]))\\<inverse> O\n    a)\n\ngoal (1 subgoal):\n 1. univalent\n     (b \\<union>\n      (let V_new = sorted_list_of_set (vertices (snd R) - vertices (fst R))\n       in set (zip V_new [n..<n + length V_new]))\\<inverse> O\n      a)", "by blast"], ["proof (state)\nthis:\n  univalent\n   (b \\<union>\n    (let V_new = sorted_list_of_set (vertices (snd R) - vertices (fst R))\n     in set (zip V_new [n..<n + length V_new]))\\<inverse> O\n    a)\n\ngoal (1 subgoal):\n 1. \\<And>h\\<^sub>1 h\\<^sub>2 G.\n       \\<lbrakk>graph_homomorphism (snd R) G h\\<^sub>1;\n        graph_homomorphism (LG E {0..<n}) G h\\<^sub>2;\n        f O h\\<^sub>2 \\<subseteq> h\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>h.\n                            graph_homomorphism G' G h \\<and>\n                            h\\<^sub>2 \\<subseteq> h", "(* showing edge preservation *)"], ["proof (state)\nthis:\n  univalent\n   (b \\<union>\n    (let V_new = sorted_list_of_set (vertices (snd R) - vertices (fst R))\n     in set (zip V_new [n..<n + length V_new]))\\<inverse> O\n    a)\n\ngoal (1 subgoal):\n 1. \\<And>h\\<^sub>1 h\\<^sub>2 G.\n       \\<lbrakk>graph_homomorphism (snd R) G h\\<^sub>1;\n        graph_homomorphism (LG E {0..<n}) G h\\<^sub>2;\n        f O h\\<^sub>2 \\<subseteq> h\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>h.\n                            graph_homomorphism G' G h \\<and>\n                            h\\<^sub>2 \\<subseteq> h", "{"], ["proof (state)\nthis:\n  univalent\n   (b \\<union>\n    (let V_new = sorted_list_of_set (vertices (snd R) - vertices (fst R))\n     in set (zip V_new [n..<n + length V_new]))\\<inverse> O\n    a)\n\ngoal (1 subgoal):\n 1. \\<And>h\\<^sub>1 h\\<^sub>2 G.\n       \\<lbrakk>graph_homomorphism (snd R) G h\\<^sub>1;\n        graph_homomorphism (LG E {0..<n}) G h\\<^sub>2;\n        f O h\\<^sub>2 \\<subseteq> h\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>h.\n                            graph_homomorphism G' G h \\<and>\n                            h\\<^sub>2 \\<subseteq> h", "fix l x y x' y'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>h\\<^sub>1 h\\<^sub>2 G.\n       \\<lbrakk>graph_homomorphism (snd R) G h\\<^sub>1;\n        graph_homomorphism (LG E {0..<n}) G h\\<^sub>2;\n        f O h\\<^sub>2 \\<subseteq> h\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>h.\n                            graph_homomorphism G' G h \\<and>\n                            h\\<^sub>2 \\<subseteq> h", "assume a2:\"(l,x,y) \\<in> edges G'\" \"(x,x') \\<in> ?h\" \"(y,y') \\<in> ?h\""], ["proof (state)\nthis:\n  (l, x, y) \\<in> edges G'\n  (x, x')\n  \\<in> b \\<union>\n        (let V_new =\n               sorted_list_of_set (vertices (snd R) - vertices (fst R))\n         in set (zip V_new [n..<n + length V_new]))\\<inverse> O\n        a\n  (y, y')\n  \\<in> b \\<union>\n        (let V_new =\n               sorted_list_of_set (vertices (snd R) - vertices (fst R))\n         in set (zip V_new [n..<n + length V_new]))\\<inverse> O\n        a\n\ngoal (1 subgoal):\n 1. \\<And>h\\<^sub>1 h\\<^sub>2 G.\n       \\<lbrakk>graph_homomorphism (snd R) G h\\<^sub>1;\n        graph_homomorphism (LG E {0..<n}) G h\\<^sub>2;\n        f O h\\<^sub>2 \\<subseteq> h\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>h.\n                            graph_homomorphism G' G h \\<and>\n                            h\\<^sub>2 \\<subseteq> h", "have \"(l,x',y') \\<in> edges G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (l, x', y') \\<in> edges G", "proof(cases \"(l,x,y) \\<in> edges ?G\")"], ["proof (state)\ngoal (2 subgoals):\n 1. (l, x, y) \\<in> edges (LG E {0..<n}) \\<Longrightarrow>\n    (l, x', y') \\<in> edges G\n 2. (l, x, y) \\<notin> edges (LG E {0..<n}) \\<Longrightarrow>\n    (l, x', y') \\<in> edges G", "case True"], ["proof (state)\nthis:\n  (l, x, y) \\<in> edges (LG E {0..<n})\n\ngoal (2 subgoals):\n 1. (l, x, y) \\<in> edges (LG E {0..<n}) \\<Longrightarrow>\n    (l, x', y') \\<in> edges G\n 2. (l, x, y) \\<notin> edges (LG E {0..<n}) \\<Longrightarrow>\n    (l, x', y') \\<in> edges G", "with gr_G[THEN restrictD]"], ["proof (chain)\npicking this:\n  edges (LG E {0..<n})\n  \\<subseteq> {(l, v1, v2).\n               v1 \\<in> vertices (LG E {0..<n}) \\<and>\n               v2 \\<in> vertices (LG E {0..<n})}\n  (l, x, y) \\<in> edges (LG E {0..<n})", "have \"x \\<in> Domain b\" \"y \\<in> Domain b\""], ["proof (prove)\nusing this:\n  edges (LG E {0..<n})\n  \\<subseteq> {(l, v1, v2).\n               v1 \\<in> vertices (LG E {0..<n}) \\<and>\n               v2 \\<in> vertices (LG E {0..<n})}\n  (l, x, y) \\<in> edges (LG E {0..<n})\n\ngoal (1 subgoal):\n 1. x \\<in> Domain b &&& y \\<in> Domain b", "unfolding dom_b"], ["proof (prove)\nusing this:\n  edges (LG E {0..<n})\n  \\<subseteq> {(l, v1, v2).\n               v1 \\<in> vertices (LG E {0..<n}) \\<and>\n               v2 \\<in> vertices (LG E {0..<n})}\n  (l, x, y) \\<in> edges (LG E {0..<n})\n\ngoal (1 subgoal):\n 1. x \\<in> {0..<n} &&& y \\<in> {0..<n}", "by auto"], ["proof (state)\nthis:\n  x \\<in> Domain b\n  y \\<in> Domain b\n\ngoal (2 subgoals):\n 1. (l, x, y) \\<in> edges (LG E {0..<n}) \\<Longrightarrow>\n    (l, x', y') \\<in> edges G\n 2. (l, x, y) \\<notin> edges (LG E {0..<n}) \\<Longrightarrow>\n    (l, x', y') \\<in> edges G", "hence \"x \\<notin> Domain (converse ?g O a)\" \"y \\<notin> Domain (converse ?g O a)\""], ["proof (prove)\nusing this:\n  x \\<in> Domain b\n  y \\<in> Domain b\n\ngoal (1 subgoal):\n 1. x \\<notin> Domain\n                ((let V_new =\n                        sorted_list_of_set\n                         (vertices (snd R) - vertices (fst R))\n                  in set (zip V_new [n..<n + length V_new]))\\<inverse> O\n                 a) &&&\n    y \\<notin> Domain\n                ((let V_new =\n                        sorted_list_of_set\n                         (vertices (snd R) - vertices (fst R))\n                  in set (zip V_new [n..<n + length V_new]))\\<inverse> O\n                 a)", "using disj_doms"], ["proof (prove)\nusing this:\n  x \\<in> Domain b\n  y \\<in> Domain b\n  Domain b \\<inter>\n  Domain\n   ((let V_new = sorted_list_of_set (vertices (snd R) - vertices (fst R))\n     in set (zip V_new [n..<n + length V_new]))\\<inverse> O\n    a) =\n  {}\n\ngoal (1 subgoal):\n 1. x \\<notin> Domain\n                ((let V_new =\n                        sorted_list_of_set\n                         (vertices (snd R) - vertices (fst R))\n                  in set (zip V_new [n..<n + length V_new]))\\<inverse> O\n                 a) &&&\n    y \\<notin> Domain\n                ((let V_new =\n                        sorted_list_of_set\n                         (vertices (snd R) - vertices (fst R))\n                  in set (zip V_new [n..<n + length V_new]))\\<inverse> O\n                 a)", "by blast+"], ["proof (state)\nthis:\n  x \\<notin> Domain\n              ((let V_new =\n                      sorted_list_of_set\n                       (vertices (snd R) - vertices (fst R))\n                in set (zip V_new [n..<n + length V_new]))\\<inverse> O\n               a)\n  y \\<notin> Domain\n              ((let V_new =\n                      sorted_list_of_set\n                       (vertices (snd R) - vertices (fst R))\n                in set (zip V_new [n..<n + length V_new]))\\<inverse> O\n               a)\n\ngoal (2 subgoals):\n 1. (l, x, y) \\<in> edges (LG E {0..<n}) \\<Longrightarrow>\n    (l, x', y') \\<in> edges G\n 2. (l, x, y) \\<notin> edges (LG E {0..<n}) \\<Longrightarrow>\n    (l, x', y') \\<in> edges G", "hence \"(x,x') \\<in> b\" \"(y,y') \\<in> b\""], ["proof (prove)\nusing this:\n  x \\<notin> Domain\n              ((let V_new =\n                      sorted_list_of_set\n                       (vertices (snd R) - vertices (fst R))\n                in set (zip V_new [n..<n + length V_new]))\\<inverse> O\n               a)\n  y \\<notin> Domain\n              ((let V_new =\n                      sorted_list_of_set\n                       (vertices (snd R) - vertices (fst R))\n                in set (zip V_new [n..<n + length V_new]))\\<inverse> O\n               a)\n\ngoal (1 subgoal):\n 1. (x, x') \\<in> b &&& (y, y') \\<in> b", "using a2"], ["proof (prove)\nusing this:\n  x \\<notin> Domain\n              ((let V_new =\n                      sorted_list_of_set\n                       (vertices (snd R) - vertices (fst R))\n                in set (zip V_new [n..<n + length V_new]))\\<inverse> O\n               a)\n  y \\<notin> Domain\n              ((let V_new =\n                      sorted_list_of_set\n                       (vertices (snd R) - vertices (fst R))\n                in set (zip V_new [n..<n + length V_new]))\\<inverse> O\n               a)\n  (l, x, y) \\<in> edges G'\n  (x, x')\n  \\<in> b \\<union>\n        (let V_new =\n               sorted_list_of_set (vertices (snd R) - vertices (fst R))\n         in set (zip V_new [n..<n + length V_new]))\\<inverse> O\n        a\n  (y, y')\n  \\<in> b \\<union>\n        (let V_new =\n               sorted_list_of_set (vertices (snd R) - vertices (fst R))\n         in set (zip V_new [n..<n + length V_new]))\\<inverse> O\n        a\n\ngoal (1 subgoal):\n 1. (x, x') \\<in> b &&& (y, y') \\<in> b", "by auto"], ["proof (state)\nthis:\n  (x, x') \\<in> b\n  (y, y') \\<in> b\n\ngoal (2 subgoals):\n 1. (l, x, y) \\<in> edges (LG E {0..<n}) \\<Longrightarrow>\n    (l, x', y') \\<in> edges G\n 2. (l, x, y) \\<notin> edges (LG E {0..<n}) \\<Longrightarrow>\n    (l, x', y') \\<in> edges G", "with ep_b True"], ["proof (chain)\npicking this:\n  edge_preserving b (edges (LG E {0..<n})) (edges G)\n  (l, x, y) \\<in> edges (LG E {0..<n})\n  (x, x') \\<in> b\n  (y, y') \\<in> b", "show ?thesis"], ["proof (prove)\nusing this:\n  edge_preserving b (edges (LG E {0..<n})) (edges G)\n  (l, x, y) \\<in> edges (LG E {0..<n})\n  (x, x') \\<in> b\n  (y, y') \\<in> b\n\ngoal (1 subgoal):\n 1. (l, x', y') \\<in> edges G", "unfolding edge_preserving"], ["proof (prove)\nusing this:\n  on_triple b `` edges (LG E {0..<n}) \\<subseteq> edges G\n  (l, x, y) \\<in> edges (LG E {0..<n})\n  (x, x') \\<in> b\n  (y, y') \\<in> b\n\ngoal (1 subgoal):\n 1. (l, x', y') \\<in> edges G", "by auto"], ["proof (state)\nthis:\n  (l, x', y') \\<in> edges G\n\ngoal (1 subgoal):\n 1. (l, x, y) \\<notin> edges (LG E {0..<n}) \\<Longrightarrow>\n    (l, x', y') \\<in> edges G", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. (l, x, y) \\<notin> edges (LG E {0..<n}) \\<Longrightarrow>\n    (l, x', y') \\<in> edges G", "have \"g O ?h = f O b \\<union> ?g O b \\<union> ((f O ?g\\<inverse>) O a \\<union> (?g O ?g\\<inverse>) O a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. g O\n    (b \\<union>\n     (let V_new = sorted_list_of_set (vertices (snd R) - vertices (fst R))\n      in set (zip V_new [n..<n + length V_new]))\\<inverse> O\n     a) =\n    f O b \\<union>\n    (let V_new = sorted_list_of_set (vertices (snd R) - vertices (fst R))\n     in set (zip V_new [n..<n + length V_new])) O\n    b \\<union>\n    ((f O\n      (let V_new = sorted_list_of_set (vertices (snd R) - vertices (fst R))\n       in set (zip V_new [n..<n + length V_new]))\\<inverse>) O\n     a \\<union>\n     ((let V_new = sorted_list_of_set (vertices (snd R) - vertices (fst R))\n       in set (zip V_new [n..<n + length V_new])) O\n      (let V_new = sorted_list_of_set (vertices (snd R) - vertices (fst R))\n       in set (zip V_new [n..<n + length V_new]))\\<inverse>) O\n     a)", "unfolding g_def extend_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (f \\<union>\n     (let V_new = sorted_list_of_set (vertices (snd R) - vertices (fst R))\n      in set (zip V_new [n..<n + length V_new]))) O\n    (b \\<union>\n     (let V_new = sorted_list_of_set (vertices (snd R) - vertices (fst R))\n      in set (zip V_new [n..<n + length V_new]))\\<inverse> O\n     a) =\n    f O b \\<union>\n    (let V_new = sorted_list_of_set (vertices (snd R) - vertices (fst R))\n     in set (zip V_new [n..<n + length V_new])) O\n    b \\<union>\n    ((f O\n      (let V_new = sorted_list_of_set (vertices (snd R) - vertices (fst R))\n       in set (zip V_new [n..<n + length V_new]))\\<inverse>) O\n     a \\<union>\n     ((let V_new = sorted_list_of_set (vertices (snd R) - vertices (fst R))\n       in set (zip V_new [n..<n + length V_new])) O\n      (let V_new = sorted_list_of_set (vertices (snd R) - vertices (fst R))\n       in set (zip V_new [n..<n + length V_new]))\\<inverse>) O\n     a)", "by blast"], ["proof (state)\nthis:\n  g O\n  (b \\<union>\n   (let V_new = sorted_list_of_set (vertices (snd R) - vertices (fst R))\n    in set (zip V_new [n..<n + length V_new]))\\<inverse> O\n   a) =\n  f O b \\<union>\n  (let V_new = sorted_list_of_set (vertices (snd R) - vertices (fst R))\n   in set (zip V_new [n..<n + length V_new])) O\n  b \\<union>\n  ((f O\n    (let V_new = sorted_list_of_set (vertices (snd R) - vertices (fst R))\n     in set (zip V_new [n..<n + length V_new]))\\<inverse>) O\n   a \\<union>\n   ((let V_new = sorted_list_of_set (vertices (snd R) - vertices (fst R))\n     in set (zip V_new [n..<n + length V_new])) O\n    (let V_new = sorted_list_of_set (vertices (snd R) - vertices (fst R))\n     in set (zip V_new [n..<n + length V_new]))\\<inverse>) O\n   a)\n\ngoal (1 subgoal):\n 1. (l, x, y) \\<notin> edges (LG E {0..<n}) \\<Longrightarrow>\n    (l, x', y') \\<in> edges G", "also"], ["proof (state)\nthis:\n  g O\n  (b \\<union>\n   (let V_new = sorted_list_of_set (vertices (snd R) - vertices (fst R))\n    in set (zip V_new [n..<n + length V_new]))\\<inverse> O\n   a) =\n  f O b \\<union>\n  (let V_new = sorted_list_of_set (vertices (snd R) - vertices (fst R))\n   in set (zip V_new [n..<n + length V_new])) O\n  b \\<union>\n  ((f O\n    (let V_new = sorted_list_of_set (vertices (snd R) - vertices (fst R))\n     in set (zip V_new [n..<n + length V_new]))\\<inverse>) O\n   a \\<union>\n   ((let V_new = sorted_list_of_set (vertices (snd R) - vertices (fst R))\n     in set (zip V_new [n..<n + length V_new])) O\n    (let V_new = sorted_list_of_set (vertices (snd R) - vertices (fst R))\n     in set (zip V_new [n..<n + length V_new]))\\<inverse>) O\n   a)\n\ngoal (1 subgoal):\n 1. (l, x, y) \\<notin> edges (LG E {0..<n}) \\<Longrightarrow>\n    (l, x', y') \\<in> edges G", "have \"(?g O ?g\\<inverse>) = Id_on ?R_L\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (let V_new = sorted_list_of_set (vertices (snd R) - vertices (fst R))\n     in set (zip V_new [n..<n + length V_new])) O\n    (let V_new = sorted_list_of_set (vertices (snd R) - vertices (fst R))\n     in set (zip V_new [n..<n + length V_new]))\\<inverse> =\n    Id_on (vertices (snd R) - vertices (fst R))", "unfolding univalent_O_converse[OF uni_g'(2)]"], ["proof (prove)\ngoal (1 subgoal):\n 1. Id_on\n     (Domain\n       (let V_new = sorted_list_of_set (vertices (snd R) - vertices (fst R))\n        in set (zip V_new [n..<n + length V_new]))) =\n    Id_on (vertices (snd R) - vertices (fst R))", "unfolding Let_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. Id_on\n     (Domain\n       (set (zip (sorted_list_of_set (vertices (snd R) - vertices (fst R)))\n              [n..<\n               n +\n               length\n                (sorted_list_of_set\n                  (vertices (snd R) - vertices (fst R)))]))) =\n    Id_on (vertices (snd R) - vertices (fst R))", "by auto"], ["proof (state)\nthis:\n  (let V_new = sorted_list_of_set (vertices (snd R) - vertices (fst R))\n   in set (zip V_new [n..<n + length V_new])) O\n  (let V_new = sorted_list_of_set (vertices (snd R) - vertices (fst R))\n   in set (zip V_new [n..<n + length V_new]))\\<inverse> =\n  Id_on (vertices (snd R) - vertices (fst R))\n\ngoal (1 subgoal):\n 1. (l, x, y) \\<notin> edges (LG E {0..<n}) \\<Longrightarrow>\n    (l, x', y') \\<in> edges G", "also"], ["proof (state)\nthis:\n  (let V_new = sorted_list_of_set (vertices (snd R) - vertices (fst R))\n   in set (zip V_new [n..<n + length V_new])) O\n  (let V_new = sorted_list_of_set (vertices (snd R) - vertices (fst R))\n   in set (zip V_new [n..<n + length V_new]))\\<inverse> =\n  Id_on (vertices (snd R) - vertices (fst R))\n\ngoal (1 subgoal):\n 1. (l, x, y) \\<notin> edges (LG E {0..<n}) \\<Longrightarrow>\n    (l, x', y') \\<in> edges G", "have \"(f O ?g\\<inverse>) = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f O\n    (let V_new = sorted_list_of_set (vertices (snd R) - vertices (fst R))\n     in set (zip V_new [n..<n + length V_new]))\\<inverse> =\n    {}", "using f_ran"], ["proof (prove)\nusing this:\n  Range f \\<subseteq> {0..<n}\n\ngoal (1 subgoal):\n 1. f O\n    (let V_new = sorted_list_of_set (vertices (snd R) - vertices (fst R))\n     in set (zip V_new [n..<n + length V_new]))\\<inverse> =\n    {}", "unfolding Let_def"], ["proof (prove)\nusing this:\n  Range f \\<subseteq> {0..<n}\n\ngoal (1 subgoal):\n 1. f O\n    (set (zip (sorted_list_of_set (vertices (snd R) - vertices (fst R)))\n           [n..<\n            n +\n            length\n             (sorted_list_of_set\n               (vertices (snd R) - vertices (fst R)))]))\\<inverse> =\n    {}", "by (auto dest!:set_zip_leftD)"], ["proof (state)\nthis:\n  f O\n  (let V_new = sorted_list_of_set (vertices (snd R) - vertices (fst R))\n   in set (zip V_new [n..<n + length V_new]))\\<inverse> =\n  {}\n\ngoal (1 subgoal):\n 1. (l, x, y) \\<notin> edges (LG E {0..<n}) \\<Longrightarrow>\n    (l, x', y') \\<in> edges G", "also"], ["proof (state)\nthis:\n  f O\n  (let V_new = sorted_list_of_set (vertices (snd R) - vertices (fst R))\n   in set (zip V_new [n..<n + length V_new]))\\<inverse> =\n  {}\n\ngoal (1 subgoal):\n 1. (l, x, y) \\<notin> edges (LG E {0..<n}) \\<Longrightarrow>\n    (l, x', y') \\<in> edges G", "have \"?g O b = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (let V_new = sorted_list_of_set (vertices (snd R) - vertices (fst R))\n     in set (zip V_new [n..<n + length V_new])) O\n    b =\n    {}", "using help_dom_b"], ["proof (prove)\nusing this:\n  \\<lbrakk>(?y, ?z) \\<in> b; n \\<le> ?y\\<rbrakk> \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. (let V_new = sorted_list_of_set (vertices (snd R) - vertices (fst R))\n     in set (zip V_new [n..<n + length V_new])) O\n    b =\n    {}", "unfolding Let_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>(?y, ?z) \\<in> b; n \\<le> ?y\\<rbrakk> \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. set (zip (sorted_list_of_set (vertices (snd R) - vertices (fst R)))\n          [n..<\n           n +\n           length\n            (sorted_list_of_set (vertices (snd R) - vertices (fst R)))]) O\n    b =\n    {}", "by (auto dest!:set_zip_rightD)"], ["proof (state)\nthis:\n  (let V_new = sorted_list_of_set (vertices (snd R) - vertices (fst R))\n   in set (zip V_new [n..<n + length V_new])) O\n  b =\n  {}\n\ngoal (1 subgoal):\n 1. (l, x, y) \\<notin> edges (LG E {0..<n}) \\<Longrightarrow>\n    (l, x', y') \\<in> edges G", "finally"], ["proof (chain)\npicking this:\n  g O\n  (b \\<union>\n   (let V_new = sorted_list_of_set (vertices (snd R) - vertices (fst R))\n    in set (zip V_new [n..<n + length V_new]))\\<inverse> O\n   a) =\n  f O b \\<union> {} \\<union>\n  ({} O a \\<union> Id_on (vertices (snd R) - vertices (fst R)) O a)", "have gOh:\"g O ?h \\<subseteq> a\""], ["proof (prove)\nusing this:\n  g O\n  (b \\<union>\n   (let V_new = sorted_list_of_set (vertices (snd R) - vertices (fst R))\n    in set (zip V_new [n..<n + length V_new]))\\<inverse> O\n   a) =\n  f O b \\<union> {} \\<union>\n  ({} O a \\<union> Id_on (vertices (snd R) - vertices (fst R)) O a)\n\ngoal (1 subgoal):\n 1. g O\n    (b \\<union>\n     (let V_new = sorted_list_of_set (vertices (snd R) - vertices (fst R))\n      in set (zip V_new [n..<n + length V_new]))\\<inverse> O\n     a)\n    \\<subseteq> a", "using a(3)"], ["proof (prove)\nusing this:\n  g O\n  (b \\<union>\n   (let V_new = sorted_list_of_set (vertices (snd R) - vertices (fst R))\n    in set (zip V_new [n..<n + length V_new]))\\<inverse> O\n   a) =\n  f O b \\<union> {} \\<union>\n  ({} O a \\<union> Id_on (vertices (snd R) - vertices (fst R)) O a)\n  f O b \\<subseteq> a\n\ngoal (1 subgoal):\n 1. g O\n    (b \\<union>\n     (let V_new = sorted_list_of_set (vertices (snd R) - vertices (fst R))\n      in set (zip V_new [n..<n + length V_new]))\\<inverse> O\n     a)\n    \\<subseteq> a", "by blast"], ["proof (state)\nthis:\n  g O\n  (b \\<union>\n   (let V_new = sorted_list_of_set (vertices (snd R) - vertices (fst R))\n    in set (zip V_new [n..<n + length V_new]))\\<inverse> O\n   a)\n  \\<subseteq> a\n\ngoal (1 subgoal):\n 1. (l, x, y) \\<notin> edges (LG E {0..<n}) \\<Longrightarrow>\n    (l, x', y') \\<in> edges G", "case False"], ["proof (state)\nthis:\n  (l, x, y) \\<notin> edges (LG E {0..<n})\n\ngoal (1 subgoal):\n 1. (l, x, y) \\<notin> edges (LG E {0..<n}) \\<Longrightarrow>\n    (l, x', y') \\<in> edges G", "hence \"(l,x,y) \\<in> on_triple g `` edges (snd R)\""], ["proof (prove)\nusing this:\n  (l, x, y) \\<notin> edges (LG E {0..<n})\n\ngoal (1 subgoal):\n 1. (l, x, y) \\<in> on_triple g `` edges (snd R)", "using a2(1)"], ["proof (prove)\nusing this:\n  (l, x, y) \\<notin> edges (LG E {0..<n})\n  (l, x, y) \\<in> edges G'\n\ngoal (1 subgoal):\n 1. (l, x, y) \\<in> on_triple g `` edges (snd R)", "unfolding G'_def"], ["proof (prove)\nusing this:\n  (l, x, y) \\<notin> edges (LG E {0..<n})\n  (l, x, y)\n  \\<in> edges\n         (LG (on_triple g `` edges (snd R) \\<union> E)\n           {0..<max n (nextMax (Range g))})\n\ngoal (1 subgoal):\n 1. (l, x, y) \\<in> on_triple g `` edges (snd R)", "by auto"], ["proof (state)\nthis:\n  (l, x, y) \\<in> on_triple g `` edges (snd R)\n\ngoal (1 subgoal):\n 1. (l, x, y) \\<notin> edges (LG E {0..<n}) \\<Longrightarrow>\n    (l, x', y') \\<in> edges G", "then"], ["proof (chain)\npicking this:\n  (l, x, y) \\<in> on_triple g `` edges (snd R)", "obtain r_x r_y\n          where r:\"(l,r_x,r_y) \\<in> edges (snd R)\" \"(r_x,x) \\<in> g\" \"(r_y,y) \\<in> g\""], ["proof (prove)\nusing this:\n  (l, x, y) \\<in> on_triple g `` edges (snd R)\n\ngoal (1 subgoal):\n 1. (\\<And>r_x r_y.\n        \\<lbrakk>(l, r_x, r_y) \\<in> edges (snd R); (r_x, x) \\<in> g;\n         (r_y, y) \\<in> g\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  (l, r_x, r_y) \\<in> edges (snd R)\n  (r_x, x) \\<in> g\n  (r_y, y) \\<in> g\n\ngoal (1 subgoal):\n 1. (l, x, y) \\<notin> edges (LG E {0..<n}) \\<Longrightarrow>\n    (l, x', y') \\<in> edges G", "hence \"(r_x,x') \\<in> a\" \"(r_y,y') \\<in> a\""], ["proof (prove)\nusing this:\n  (l, r_x, r_y) \\<in> edges (snd R)\n  (r_x, x) \\<in> g\n  (r_y, y) \\<in> g\n\ngoal (1 subgoal):\n 1. (r_x, x') \\<in> a &&& (r_y, y') \\<in> a", "using gOh a2(2,3)"], ["proof (prove)\nusing this:\n  (l, r_x, r_y) \\<in> edges (snd R)\n  (r_x, x) \\<in> g\n  (r_y, y) \\<in> g\n  g O\n  (b \\<union>\n   (let V_new = sorted_list_of_set (vertices (snd R) - vertices (fst R))\n    in set (zip V_new [n..<n + length V_new]))\\<inverse> O\n   a)\n  \\<subseteq> a\n  (x, x')\n  \\<in> b \\<union>\n        (let V_new =\n               sorted_list_of_set (vertices (snd R) - vertices (fst R))\n         in set (zip V_new [n..<n + length V_new]))\\<inverse> O\n        a\n  (y, y')\n  \\<in> b \\<union>\n        (let V_new =\n               sorted_list_of_set (vertices (snd R) - vertices (fst R))\n         in set (zip V_new [n..<n + length V_new]))\\<inverse> O\n        a\n\ngoal (1 subgoal):\n 1. (r_x, x') \\<in> a &&& (r_y, y') \\<in> a", "by auto"], ["proof (state)\nthis:\n  (r_x, x') \\<in> a\n  (r_y, y') \\<in> a\n\ngoal (1 subgoal):\n 1. (l, x, y) \\<notin> edges (LG E {0..<n}) \\<Longrightarrow>\n    (l, x', y') \\<in> edges G", "hence \"(l,x',y') \\<in> on_triple a `` edges (snd R)\""], ["proof (prove)\nusing this:\n  (r_x, x') \\<in> a\n  (r_y, y') \\<in> a\n\ngoal (1 subgoal):\n 1. (l, x', y') \\<in> on_triple a `` edges (snd R)", "using r(1)"], ["proof (prove)\nusing this:\n  (r_x, x') \\<in> a\n  (r_y, y') \\<in> a\n  (l, r_x, r_y) \\<in> edges (snd R)\n\ngoal (1 subgoal):\n 1. (l, x', y') \\<in> on_triple a `` edges (snd R)", "unfolding on_triple_def"], ["proof (prove)\nusing this:\n  (r_x, x') \\<in> a\n  (r_y, y') \\<in> a\n  (l, r_x, r_y) \\<in> edges (snd R)\n\ngoal (1 subgoal):\n 1. (l, x', y')\n    \\<in> {((l, s, t), l', s', t').\n           l = l' \\<and> (s, s') \\<in> a \\<and> (t, t') \\<in> a} ``\n          edges (snd R)", "by auto"], ["proof (state)\nthis:\n  (l, x', y') \\<in> on_triple a `` edges (snd R)\n\ngoal (1 subgoal):\n 1. (l, x, y) \\<notin> edges (LG E {0..<n}) \\<Longrightarrow>\n    (l, x', y') \\<in> edges G", "thus ?thesis"], ["proof (prove)\nusing this:\n  (l, x', y') \\<in> on_triple a `` edges (snd R)\n\ngoal (1 subgoal):\n 1. (l, x', y') \\<in> edges G", "using ep_a"], ["proof (prove)\nusing this:\n  (l, x', y') \\<in> on_triple a `` edges (snd R)\n  edge_preserving a (edges (snd R)) (edges G)\n\ngoal (1 subgoal):\n 1. (l, x', y') \\<in> edges G", "unfolding edge_preserving"], ["proof (prove)\nusing this:\n  (l, x', y') \\<in> on_triple a `` edges (snd R)\n  on_triple a `` edges (snd R) \\<subseteq> edges G\n\ngoal (1 subgoal):\n 1. (l, x', y') \\<in> edges G", "by auto"], ["proof (state)\nthis:\n  (l, x', y') \\<in> edges G\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (l, x', y') \\<in> edges G\n\ngoal (1 subgoal):\n 1. \\<And>h\\<^sub>1 h\\<^sub>2 G.\n       \\<lbrakk>graph_homomorphism (snd R) G h\\<^sub>1;\n        graph_homomorphism (LG E {0..<n}) G h\\<^sub>2;\n        f O h\\<^sub>2 \\<subseteq> h\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>h.\n                            graph_homomorphism G' G h \\<and>\n                            h\\<^sub>2 \\<subseteq> h", "}"], ["proof (state)\nthis:\n  \\<lbrakk>(?l2, ?x2, ?y2) \\<in> edges G';\n   (?x2, ?x'2)\n   \\<in> b \\<union>\n         (let V_new =\n                sorted_list_of_set (vertices (snd R) - vertices (fst R))\n          in set (zip V_new [n..<n + length V_new]))\\<inverse> O\n         a;\n   (?y2, ?y'2)\n   \\<in> b \\<union>\n         (let V_new =\n                sorted_list_of_set (vertices (snd R) - vertices (fst R))\n          in set (zip V_new [n..<n + length V_new]))\\<inverse> O\n         a\\<rbrakk>\n  \\<Longrightarrow> (?l2, ?x'2, ?y'2) \\<in> edges G\n\ngoal (1 subgoal):\n 1. \\<And>h\\<^sub>1 h\\<^sub>2 G.\n       \\<lbrakk>graph_homomorphism (snd R) G h\\<^sub>1;\n        graph_homomorphism (LG E {0..<n}) G h\\<^sub>2;\n        f O h\\<^sub>2 \\<subseteq> h\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>h.\n                            graph_homomorphism G' G h \\<and>\n                            h\\<^sub>2 \\<subseteq> h", "hence v4: \"edge_preserving ?h (edges G') (edges G)\""], ["proof (prove)\nusing this:\n  \\<lbrakk>(?l2, ?x2, ?y2) \\<in> edges G';\n   (?x2, ?x'2)\n   \\<in> b \\<union>\n         (let V_new =\n                sorted_list_of_set (vertices (snd R) - vertices (fst R))\n          in set (zip V_new [n..<n + length V_new]))\\<inverse> O\n         a;\n   (?y2, ?y'2)\n   \\<in> b \\<union>\n         (let V_new =\n                sorted_list_of_set (vertices (snd R) - vertices (fst R))\n          in set (zip V_new [n..<n + length V_new]))\\<inverse> O\n         a\\<rbrakk>\n  \\<Longrightarrow> (?l2, ?x'2, ?y'2) \\<in> edges G\n\ngoal (1 subgoal):\n 1. edge_preserving\n     (b \\<union>\n      (let V_new = sorted_list_of_set (vertices (snd R) - vertices (fst R))\n       in set (zip V_new [n..<n + length V_new]))\\<inverse> O\n      a)\n     (edges G') (edges G)", "by auto"], ["proof (state)\nthis:\n  edge_preserving\n   (b \\<union>\n    (let V_new = sorted_list_of_set (vertices (snd R) - vertices (fst R))\n     in set (zip V_new [n..<n + length V_new]))\\<inverse> O\n    a)\n   (edges G') (edges G)\n\ngoal (1 subgoal):\n 1. \\<And>h\\<^sub>1 h\\<^sub>2 G.\n       \\<lbrakk>graph_homomorphism (snd R) G h\\<^sub>1;\n        graph_homomorphism (LG E {0..<n}) G h\\<^sub>2;\n        f O h\\<^sub>2 \\<subseteq> h\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>h.\n                            graph_homomorphism G' G h \\<and>\n                            h\\<^sub>2 \\<subseteq> h", "have \"graph_homomorphism G' G ?h\""], ["proof (prove)\ngoal (1 subgoal):\n 1. graph_homomorphism G' G\n     (b \\<union>\n      (let V_new = sorted_list_of_set (vertices (snd R) - vertices (fst R))\n       in set (zip V_new [n..<n + length V_new]))\\<inverse> O\n      a)", "by(fact graph_homomorphismI[OF v1 v2 v3 v4 gr_G' v6])"], ["proof (state)\nthis:\n  graph_homomorphism G' G\n   (b \\<union>\n    (let V_new = sorted_list_of_set (vertices (snd R) - vertices (fst R))\n     in set (zip V_new [n..<n + length V_new]))\\<inverse> O\n    a)\n\ngoal (1 subgoal):\n 1. \\<And>h\\<^sub>1 h\\<^sub>2 G.\n       \\<lbrakk>graph_homomorphism (snd R) G h\\<^sub>1;\n        graph_homomorphism (LG E {0..<n}) G h\\<^sub>2;\n        f O h\\<^sub>2 \\<subseteq> h\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>h.\n                            graph_homomorphism G' G h \\<and>\n                            h\\<^sub>2 \\<subseteq> h", "thus \"\\<exists>h. graph_homomorphism G' G h \\<and> b \\<subseteq> h\""], ["proof (prove)\nusing this:\n  graph_homomorphism G' G\n   (b \\<union>\n    (let V_new = sorted_list_of_set (vertices (snd R) - vertices (fst R))\n     in set (zip V_new [n..<n + length V_new]))\\<inverse> O\n    a)\n\ngoal (1 subgoal):\n 1. \\<exists>h. graph_homomorphism G' G h \\<and> b \\<subseteq> h", "by auto"], ["proof (state)\nthis:\n  \\<exists>h. graph_homomorphism G' G h \\<and> b \\<subseteq> h\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  weak_universal t R (LG E {0..<n}) G' f g\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>Showing that the extend function indeed creates a valid pushout.\\<close>"], ["", "lemma selector_pushout:\n  assumes \"valid_selector Rs selector\" \"selector G'' = Some (R,f)\"\n  defines \"G \\<equiv> graph_of G''\"\n  assumes \"graph G\"\n  defines \"g \\<equiv> extend (fst G'') R f\"\n  defines \"G' \\<equiv> LG (on_triple g `` edges (snd R) \\<union> (snd G'')) {0..<max (fst G'') (nextMax (Range g))}\"\n  shows \"pushout_step (t:: 'x itself) R G G'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pushout_step t R G G'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. pushout_step t R G G'", "have \"valid_selection Rs G'' R f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. valid_selection Rs G'' R f", "using assms"], ["proof (prove)\nusing this:\n  valid_selector Rs selector\n  selector G'' = Some (R, f)\n  G \\<equiv> graph_of G''\n  graph G\n  g \\<equiv> extend (fst G'') R f\n  G' \\<equiv>\n  LG (on_triple g `` edges (snd R) \\<union> snd G'')\n   {0..<max (fst G'') (nextMax (Range g))}\n\ngoal (1 subgoal):\n 1. valid_selection Rs G'' R f", "by(cases \"selector G''\",auto)"], ["proof (state)\nthis:\n  valid_selection Rs G'' R f\n\ngoal (1 subgoal):\n 1. pushout_step t R G G'", "hence igh:\"graph_homomorphism (fst R) G f\" \"graph_rule R\""], ["proof (prove)\nusing this:\n  valid_selection Rs G'' R f\n\ngoal (1 subgoal):\n 1. graph_homomorphism (fst R) G f &&& graph_rule R", "unfolding valid_selection_def worklist_def G_def Let_def"], ["proof (prove)\nusing this:\n  (nextMax (Range f), R, f)\n  \\<in> {(N, R, f).\n         R \\<in> Rs \\<and>\n         graph_homomorphism (fst R) (graph_of G'') f \\<and>\n         N = nextMax (Range f) \\<and>\n         \\<not> extensible R (graph_of G'') f} \\<and>\n  (\\<forall>(N, uu_)\n            \\<in>{(N, R, f).\n                  R \\<in> Rs \\<and>\n                  graph_homomorphism (fst R) (graph_of G'') f \\<and>\n                  N = nextMax (Range f) \\<and>\n                  \\<not> extensible R (graph_of G'') f}.\n      nextMax (Range f) \\<le> N) \\<and>\n  graph_rule R\n\ngoal (1 subgoal):\n 1. graph_homomorphism (fst R) (graph_of G'') f &&& graph_rule R", "by auto"], ["proof (state)\nthis:\n  graph_homomorphism (fst R) G f\n  graph_rule R\n\ngoal (1 subgoal):\n 1. pushout_step t R G G'", "have \"subgraph G G'\"\n       \"graph_homomorphism (fst R) G f\"\n       \"graph_homomorphism (snd R) G' g\"\n       \"f \\<subseteq> g\"\n       \"weak_universal t R G G' f g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (subgraph G G' &&& graph_homomorphism (fst R) G f) &&&\n    graph_homomorphism (snd R) G' g &&&\n    f \\<subseteq> g &&& weak_universal t R G G' f g", "using extend[OF igh[unfolded G_def],folded g_def,folded G'_def,folded G_def] igh(1)"], ["proof (prove)\nusing this:\n  graph_homomorphism (snd R) G' g\n  agree_on (fst R) f g\n  f \\<subseteq> g\n  subgraph G G'\n  weak_universal ?t R G G' f g\n  graph_homomorphism (fst R) G f\n\ngoal (1 subgoal):\n 1. (subgraph G G' &&& graph_homomorphism (fst R) G f) &&&\n    graph_homomorphism (snd R) G' g &&&\n    f \\<subseteq> g &&& weak_universal t R G G' f g", "by auto"], ["proof (state)\nthis:\n  subgraph G G'\n  graph_homomorphism (fst R) G f\n  graph_homomorphism (snd R) G' g\n  f \\<subseteq> g\n  weak_universal t R G G' f g\n\ngoal (1 subgoal):\n 1. pushout_step t R G G'", "thus ?thesis"], ["proof (prove)\nusing this:\n  subgraph G G'\n  graph_homomorphism (fst R) G f\n  graph_homomorphism (snd R) G' g\n  f \\<subseteq> g\n  weak_universal t R G G' f g\n\ngoal (1 subgoal):\n 1. pushout_step t R G G'", "unfolding pushout_step_def"], ["proof (prove)\nusing this:\n  subgraph G G'\n  graph_homomorphism (fst R) G f\n  graph_homomorphism (snd R) G' g\n  f \\<subseteq> g\n  weak_universal t R G G' f g\n\ngoal (1 subgoal):\n 1. subgraph G G' \\<and>\n    (\\<exists>f\\<^sub>1 f\\<^sub>2.\n        graph_homomorphism (fst R) G f\\<^sub>1 \\<and>\n        graph_homomorphism (snd R) G' f\\<^sub>2 \\<and>\n        f\\<^sub>1 \\<subseteq> f\\<^sub>2 \\<and>\n        weak_universal t R G G' f\\<^sub>1 f\\<^sub>2)", "by auto"], ["proof (state)\nthis:\n  pushout_step t R G G'\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>Making a single step in Algorithm 1.\n  A prerequisite is that its first argument is a @{term valid_selector}.\\<close>"], ["", "definition make_step where\n\"make_step selector S \\<equiv>\n   case selector S of\n     None \\<Rightarrow> S |\n     Some (R,f) \\<Rightarrow> (let g = extend (fst S) R f in\n         (max (fst S) (nextMax (Range g)), (on_triple g `` (edges (snd R))) \\<union> (snd S)))\""], ["", "lemma WPC_through_make_step:\n  assumes \"set_of_graph_rules Rs\" \"graph (graph_of (X 0))\"\n     and makestep: \"\\<forall> i. X (Suc i) = make_step selector (X i)\"\n     and selector: \"valid_selector Rs selector\"\n  shows \"Simple_WPC t Rs (\\<lambda> i. graph_of (X i))\" \"chain (\\<lambda> i. graph_of (X i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Simple_WPC t Rs (\\<lambda>i. graph_of (X i)) &&&\n    chain (\\<lambda>i. graph_of (X i))", "proof"], ["proof (state)\ngoal (4 subgoals):\n 1. set_of_graph_rules Rs\n 2. graph (graph_of (X 0))\n 3. \\<And>i.\n       graph_of (X i) = graph_of (X (Suc i)) \\<or>\n       (\\<exists>R\\<in>Rs.\n           pushout_step t R (graph_of (X i)) (graph_of (X (Suc i))))\n 4. chain (\\<lambda>i. graph_of (X i))", "note ms = makestep[unfolded make_step_def,rule_format]"], ["proof (state)\nthis:\n  X (Suc ?i) =\n  (case selector (X ?i) of None \\<Rightarrow> X ?i\n   | Some (R, f) \\<Rightarrow>\n       let g = extend (fst (X ?i)) R f\n       in (max (fst (X ?i)) (nextMax (Range g)),\n           on_triple g `` edges (snd R) \\<union> snd (X ?i)))\n\ngoal (4 subgoals):\n 1. set_of_graph_rules Rs\n 2. graph (graph_of (X 0))\n 3. \\<And>i.\n       graph_of (X i) = graph_of (X (Suc i)) \\<or>\n       (\\<exists>R\\<in>Rs.\n           pushout_step t R (graph_of (X i)) (graph_of (X (Suc i))))\n 4. chain (\\<lambda>i. graph_of (X i))", "have gr:\"graph (graph_of (X i))\" for i"], ["proof (prove)\ngoal (1 subgoal):\n 1. graph (graph_of (X i))", "proof(induct i)"], ["proof (state)\ngoal (2 subgoals):\n 1. graph (graph_of (X 0))\n 2. \\<And>i.\n       graph (graph_of (X i)) \\<Longrightarrow> graph (graph_of (X (Suc i)))", "case (Suc i)"], ["proof (state)\nthis:\n  graph (graph_of (X i))\n\ngoal (2 subgoals):\n 1. graph (graph_of (X 0))\n 2. \\<And>i.\n       graph (graph_of (X i)) \\<Longrightarrow> graph (graph_of (X (Suc i)))", "then"], ["proof (chain)\npicking this:\n  graph (graph_of (X i))", "show ?case"], ["proof (prove)\nusing this:\n  graph (graph_of (X i))\n\ngoal (1 subgoal):\n 1. graph (graph_of (X (Suc i)))", "proof(cases \"selector (X i)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>graph (graph_of (X i)); selector (X i) = None\\<rbrakk>\n    \\<Longrightarrow> graph (graph_of (X (Suc i)))\n 2. \\<And>a.\n       \\<lbrakk>graph (graph_of (X i)); selector (X i) = Some a\\<rbrakk>\n       \\<Longrightarrow> graph (graph_of (X (Suc i)))", "case None"], ["proof (state)\nthis:\n  selector (X i) = None\n\ngoal (2 subgoals):\n 1. \\<lbrakk>graph (graph_of (X i)); selector (X i) = None\\<rbrakk>\n    \\<Longrightarrow> graph (graph_of (X (Suc i)))\n 2. \\<And>a.\n       \\<lbrakk>graph (graph_of (X i)); selector (X i) = Some a\\<rbrakk>\n       \\<Longrightarrow> graph (graph_of (X (Suc i)))", "then"], ["proof (chain)\npicking this:\n  selector (X i) = None", "show ?thesis"], ["proof (prove)\nusing this:\n  selector (X i) = None\n\ngoal (1 subgoal):\n 1. graph (graph_of (X (Suc i)))", "using ms Suc"], ["proof (prove)\nusing this:\n  selector (X i) = None\n  X (Suc ?i) =\n  (case selector (X ?i) of None \\<Rightarrow> X ?i\n   | Some (R, f) \\<Rightarrow>\n       let g = extend (fst (X ?i)) R f\n       in (max (fst (X ?i)) (nextMax (Range g)),\n           on_triple g `` edges (snd R) \\<union> snd (X ?i)))\n  graph (graph_of (X i))\n\ngoal (1 subgoal):\n 1. graph (graph_of (X (Suc i)))", "by auto"], ["proof (state)\nthis:\n  graph (graph_of (X (Suc i)))\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>graph (graph_of (X i)); selector (X i) = Some a\\<rbrakk>\n       \\<Longrightarrow> graph (graph_of (X (Suc i)))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>graph (graph_of (X i)); selector (X i) = Some a\\<rbrakk>\n       \\<Longrightarrow> graph (graph_of (X (Suc i)))", "case (Some a)"], ["proof (state)\nthis:\n  selector (X i) = Some a\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>graph (graph_of (X i)); selector (X i) = Some a\\<rbrakk>\n       \\<Longrightarrow> graph (graph_of (X (Suc i)))", "then"], ["proof (chain)\npicking this:\n  selector (X i) = Some a", "obtain R f where Some:\"selector (X i) = Some (R,f)\""], ["proof (prove)\nusing this:\n  selector (X i) = Some a\n\ngoal (1 subgoal):\n 1. (\\<And>R f.\n        selector (X i) = Some (R, f) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  selector (X i) = Some (R, f)\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>graph (graph_of (X i)); selector (X i) = Some a\\<rbrakk>\n       \\<Longrightarrow> graph (graph_of (X (Suc i)))", "then"], ["proof (chain)\npicking this:\n  selector (X i) = Some (R, f)", "show ?thesis"], ["proof (prove)\nusing this:\n  selector (X i) = Some (R, f)\n\ngoal (1 subgoal):\n 1. graph (graph_of (X (Suc i)))", "using ms[of i,unfolded Some Let_def]\n        selector_pushout[OF selector Some Suc,of t\n                        ,unfolded pushout_step_def subgraph_def]"], ["proof (prove)\nusing this:\n  selector (X i) = Some (R, f)\n  X (Suc i) =\n  (case Some (R, f) of None \\<Rightarrow> X i\n   | Some (R, f) \\<Rightarrow>\n       (max (fst (X i)) (nextMax (Range (extend (fst (X i)) R f))),\n        on_triple (extend (fst (X i)) R f) `` edges (snd R) \\<union>\n        snd (X i)))\n  (graph (graph_of (X i)) \\<and>\n   graph\n    (LG (on_triple (extend (fst (X i)) R f) `` edges (snd R) \\<union>\n         snd (X i))\n      {0..<max (fst (X i))\n            (nextMax (Range (extend (fst (X i)) R f)))}) \\<and>\n   graph_union (graph_of (X i))\n    (LG (on_triple (extend (fst (X i)) R f) `` edges (snd R) \\<union>\n         snd (X i))\n      {0..<max (fst (X i)) (nextMax (Range (extend (fst (X i)) R f)))}) =\n   LG (on_triple (extend (fst (X i)) R f) `` edges (snd R) \\<union>\n       snd (X i))\n    {0..<max (fst (X i)) (nextMax (Range (extend (fst (X i)) R f)))}) \\<and>\n  (\\<exists>f\\<^sub>1 f\\<^sub>2.\n      graph_homomorphism (fst R) (graph_of (X i)) f\\<^sub>1 \\<and>\n      graph_homomorphism (snd R)\n       (LG (on_triple (extend (fst (X i)) R f) `` edges (snd R) \\<union>\n            snd (X i))\n         {0..<max (fst (X i)) (nextMax (Range (extend (fst (X i)) R f)))})\n       f\\<^sub>2 \\<and>\n      f\\<^sub>1 \\<subseteq> f\\<^sub>2 \\<and>\n      weak_universal t R (graph_of (X i))\n       (LG (on_triple (extend (fst (X i)) R f) `` edges (snd R) \\<union>\n            snd (X i))\n         {0..<max (fst (X i)) (nextMax (Range (extend (fst (X i)) R f)))})\n       f\\<^sub>1 f\\<^sub>2)\n\ngoal (1 subgoal):\n 1. graph (graph_of (X (Suc i)))", "by auto"], ["proof (state)\nthis:\n  graph (graph_of (X (Suc i)))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  graph (graph_of (X (Suc i)))\n\ngoal (1 subgoal):\n 1. graph (graph_of (X 0))", "qed (fact assms)"], ["proof (state)\nthis:\n  graph (graph_of (X ?i))\n\ngoal (4 subgoals):\n 1. set_of_graph_rules Rs\n 2. graph (graph_of (X 0))\n 3. \\<And>i.\n       graph_of (X i) = graph_of (X (Suc i)) \\<or>\n       (\\<exists>R\\<in>Rs.\n           pushout_step t R (graph_of (X i)) (graph_of (X (Suc i))))\n 4. chain (\\<lambda>i. graph_of (X i))", "show \"chain (\\<lambda> i. graph_of (X i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. chain (\\<lambda>i. graph_of (X i))", "unfolding chain_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i. subgraph (graph_of (X i)) (graph_of (X (i + 1)))", "proof(clarify)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i. subgraph (graph_of (X i)) (graph_of (X (i + 1)))", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i. subgraph (graph_of (X i)) (graph_of (X (i + 1)))", "show \"subgraph (graph_of (X i)) (graph_of (X (i + 1)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subgraph (graph_of (X i)) (graph_of (X (i + 1)))", "proof(cases \"selector (X i)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. selector (X i) = None \\<Longrightarrow>\n    subgraph (graph_of (X i)) (graph_of (X (i + 1)))\n 2. \\<And>a.\n       selector (X i) = Some a \\<Longrightarrow>\n       subgraph (graph_of (X i)) (graph_of (X (i + 1)))", "case None"], ["proof (state)\nthis:\n  selector (X i) = None\n\ngoal (2 subgoals):\n 1. selector (X i) = None \\<Longrightarrow>\n    subgraph (graph_of (X i)) (graph_of (X (i + 1)))\n 2. \\<And>a.\n       selector (X i) = Some a \\<Longrightarrow>\n       subgraph (graph_of (X i)) (graph_of (X (i + 1)))", "then"], ["proof (chain)\npicking this:\n  selector (X i) = None", "show ?thesis"], ["proof (prove)\nusing this:\n  selector (X i) = None\n\ngoal (1 subgoal):\n 1. subgraph (graph_of (X i)) (graph_of (X (i + 1)))", "using ms gr"], ["proof (prove)\nusing this:\n  selector (X i) = None\n  X (Suc ?i) =\n  (case selector (X ?i) of None \\<Rightarrow> X ?i\n   | Some (R, f) \\<Rightarrow>\n       let g = extend (fst (X ?i)) R f\n       in (max (fst (X ?i)) (nextMax (Range g)),\n           on_triple g `` edges (snd R) \\<union> snd (X ?i)))\n  graph (graph_of (X ?i))\n\ngoal (1 subgoal):\n 1. subgraph (graph_of (X i)) (graph_of (X (i + 1)))", "by (auto intro!:graph_homomorphismI)"], ["proof (state)\nthis:\n  subgraph (graph_of (X i)) (graph_of (X (i + 1)))\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       selector (X i) = Some a \\<Longrightarrow>\n       subgraph (graph_of (X i)) (graph_of (X (i + 1)))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a.\n       selector (X i) = Some a \\<Longrightarrow>\n       subgraph (graph_of (X i)) (graph_of (X (i + 1)))", "case Some"], ["proof (state)\nthis:\n  selector (X i) = Some a_\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       selector (X i) = Some a \\<Longrightarrow>\n       subgraph (graph_of (X i)) (graph_of (X (i + 1)))", "then"], ["proof (chain)\npicking this:\n  selector (X i) = Some a_", "obtain R f where Some:\"selector (X i) = Some (R,f)\""], ["proof (prove)\nusing this:\n  selector (X i) = Some a_\n\ngoal (1 subgoal):\n 1. (\\<And>R f.\n        selector (X i) = Some (R, f) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  selector (X i) = Some (R, f)\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       selector (X i) = Some a \\<Longrightarrow>\n       subgraph (graph_of (X i)) (graph_of (X (i + 1)))", "then"], ["proof (chain)\npicking this:\n  selector (X i) = Some (R, f)", "show ?thesis"], ["proof (prove)\nusing this:\n  selector (X i) = Some (R, f)\n\ngoal (1 subgoal):\n 1. subgraph (graph_of (X i)) (graph_of (X (i + 1)))", "using ms selector_pushout[OF selector Some gr,of t]"], ["proof (prove)\nusing this:\n  selector (X i) = Some (R, f)\n  X (Suc ?i) =\n  (case selector (X ?i) of None \\<Rightarrow> X ?i\n   | Some (R, f) \\<Rightarrow>\n       let g = extend (fst (X ?i)) R f\n       in (max (fst (X ?i)) (nextMax (Range g)),\n           on_triple g `` edges (snd R) \\<union> snd (X ?i)))\n  pushout_step t R (graph_of (X i))\n   (LG (on_triple (extend (fst (X i)) R f) `` edges (snd R) \\<union>\n        snd (X i))\n     {0..<max (fst (X i)) (nextMax (Range (extend (fst (X i)) R f)))})\n\ngoal (1 subgoal):\n 1. subgraph (graph_of (X i)) (graph_of (X (i + 1)))", "unfolding pushout_step_def Let_def"], ["proof (prove)\nusing this:\n  selector (X i) = Some (R, f)\n  X (Suc ?i) =\n  (case selector (X ?i) of None \\<Rightarrow> X ?i\n   | Some (R, f) \\<Rightarrow>\n       (max (fst (X ?i)) (nextMax (Range (extend (fst (X ?i)) R f))),\n        on_triple (extend (fst (X ?i)) R f) `` edges (snd R) \\<union>\n        snd (X ?i)))\n  subgraph (graph_of (X i))\n   (LG (on_triple (extend (fst (X i)) R f) `` edges (snd R) \\<union>\n        snd (X i))\n     {0..<max (fst (X i))\n           (nextMax (Range (extend (fst (X i)) R f)))}) \\<and>\n  (\\<exists>f\\<^sub>1 f\\<^sub>2.\n      graph_homomorphism (fst R) (graph_of (X i)) f\\<^sub>1 \\<and>\n      graph_homomorphism (snd R)\n       (LG (on_triple (extend (fst (X i)) R f) `` edges (snd R) \\<union>\n            snd (X i))\n         {0..<max (fst (X i)) (nextMax (Range (extend (fst (X i)) R f)))})\n       f\\<^sub>2 \\<and>\n      f\\<^sub>1 \\<subseteq> f\\<^sub>2 \\<and>\n      weak_universal t R (graph_of (X i))\n       (LG (on_triple (extend (fst (X i)) R f) `` edges (snd R) \\<union>\n            snd (X i))\n         {0..<max (fst (X i)) (nextMax (Range (extend (fst (X i)) R f)))})\n       f\\<^sub>1 f\\<^sub>2)\n\ngoal (1 subgoal):\n 1. subgraph (graph_of (X i)) (graph_of (X (i + 1)))", "by simp"], ["proof (state)\nthis:\n  subgraph (graph_of (X i)) (graph_of (X (i + 1)))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  subgraph (graph_of (X i)) (graph_of (X (i + 1)))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  chain (\\<lambda>i. graph_of (X i))\n\ngoal (3 subgoals):\n 1. set_of_graph_rules Rs\n 2. graph (graph_of (X 0))\n 3. \\<And>i.\n       graph_of (X i) = graph_of (X (Suc i)) \\<or>\n       (\\<exists>R\\<in>Rs.\n           pushout_step t R (graph_of (X i)) (graph_of (X (Suc i))))", "show \"graph_of (X i) = graph_of (X (Suc i)) \\<or>\n         (\\<exists>R\\<in>Rs. pushout_step t R (graph_of (X i)) (graph_of (X (Suc i))))\" for i"], ["proof (prove)\ngoal (1 subgoal):\n 1. graph_of (X i) = graph_of (X (Suc i)) \\<or>\n    (\\<exists>R\\<in>Rs.\n        pushout_step t R (graph_of (X i)) (graph_of (X (Suc i))))", "proof(cases \"selector (X i)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. selector (X i) = None \\<Longrightarrow>\n    graph_of (X i) = graph_of (X (Suc i)) \\<or>\n    (\\<exists>R\\<in>Rs.\n        pushout_step t R (graph_of (X i)) (graph_of (X (Suc i))))\n 2. \\<And>a.\n       selector (X i) = Some a \\<Longrightarrow>\n       graph_of (X i) = graph_of (X (Suc i)) \\<or>\n       (\\<exists>R\\<in>Rs.\n           pushout_step t R (graph_of (X i)) (graph_of (X (Suc i))))", "case None"], ["proof (state)\nthis:\n  selector (X i) = None\n\ngoal (2 subgoals):\n 1. selector (X i) = None \\<Longrightarrow>\n    graph_of (X i) = graph_of (X (Suc i)) \\<or>\n    (\\<exists>R\\<in>Rs.\n        pushout_step t R (graph_of (X i)) (graph_of (X (Suc i))))\n 2. \\<And>a.\n       selector (X i) = Some a \\<Longrightarrow>\n       graph_of (X i) = graph_of (X (Suc i)) \\<or>\n       (\\<exists>R\\<in>Rs.\n           pushout_step t R (graph_of (X i)) (graph_of (X (Suc i))))", "thus ?thesis"], ["proof (prove)\nusing this:\n  selector (X i) = None\n\ngoal (1 subgoal):\n 1. graph_of (X i) = graph_of (X (Suc i)) \\<or>\n    (\\<exists>R\\<in>Rs.\n        pushout_step t R (graph_of (X i)) (graph_of (X (Suc i))))", "using ms"], ["proof (prove)\nusing this:\n  selector (X i) = None\n  X (Suc ?i) =\n  (case selector (X ?i) of None \\<Rightarrow> X ?i\n   | Some (R, f) \\<Rightarrow>\n       let g = extend (fst (X ?i)) R f\n       in (max (fst (X ?i)) (nextMax (Range g)),\n           on_triple g `` edges (snd R) \\<union> snd (X ?i)))\n\ngoal (1 subgoal):\n 1. graph_of (X i) = graph_of (X (Suc i)) \\<or>\n    (\\<exists>R\\<in>Rs.\n        pushout_step t R (graph_of (X i)) (graph_of (X (Suc i))))", "by auto"], ["proof (state)\nthis:\n  graph_of (X i) = graph_of (X (Suc i)) \\<or>\n  (\\<exists>R\\<in>Rs.\n      pushout_step t R (graph_of (X i)) (graph_of (X (Suc i))))\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       selector (X i) = Some a \\<Longrightarrow>\n       graph_of (X i) = graph_of (X (Suc i)) \\<or>\n       (\\<exists>R\\<in>Rs.\n           pushout_step t R (graph_of (X i)) (graph_of (X (Suc i))))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a.\n       selector (X i) = Some a \\<Longrightarrow>\n       graph_of (X i) = graph_of (X (Suc i)) \\<or>\n       (\\<exists>R\\<in>Rs.\n           pushout_step t R (graph_of (X i)) (graph_of (X (Suc i))))", "case Some"], ["proof (state)\nthis:\n  selector (X i) = Some a_\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       selector (X i) = Some a \\<Longrightarrow>\n       graph_of (X i) = graph_of (X (Suc i)) \\<or>\n       (\\<exists>R\\<in>Rs.\n           pushout_step t R (graph_of (X i)) (graph_of (X (Suc i))))", "then"], ["proof (chain)\npicking this:\n  selector (X i) = Some a_", "obtain R f where Some:\"selector (X i) = Some (R,f)\""], ["proof (prove)\nusing this:\n  selector (X i) = Some a_\n\ngoal (1 subgoal):\n 1. (\\<And>R f.\n        selector (X i) = Some (R, f) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  selector (X i) = Some (R, f)\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       selector (X i) = Some a \\<Longrightarrow>\n       graph_of (X i) = graph_of (X (Suc i)) \\<or>\n       (\\<exists>R\\<in>Rs.\n           pushout_step t R (graph_of (X i)) (graph_of (X (Suc i))))", "hence \"R \\<in> Rs\""], ["proof (prove)\nusing this:\n  selector (X i) = Some (R, f)\n\ngoal (1 subgoal):\n 1. R \\<in> Rs", "using valid_selectorD(2)[OF selector,unfolded valid_selection_def worklist_def Let_def]"], ["proof (prove)\nusing this:\n  selector (X i) = Some (R, f)\n  selector ?G = Some (?R, ?f) \\<Longrightarrow>\n  (nextMax (Range ?f), ?R, ?f)\n  \\<in> {(N, R, f).\n         R \\<in> Rs \\<and>\n         graph_homomorphism (fst R) (graph_of ?G) f \\<and>\n         N = nextMax (Range f) \\<and>\n         \\<not> extensible R (graph_of ?G) f} \\<and>\n  (\\<forall>(N, uu_)\n            \\<in>{(N, R, f).\n                  R \\<in> Rs \\<and>\n                  graph_homomorphism (fst R) (graph_of ?G) f \\<and>\n                  N = nextMax (Range f) \\<and>\n                  \\<not> extensible R (graph_of ?G) f}.\n      nextMax (Range ?f) \\<le> N) \\<and>\n  graph_rule ?R\n\ngoal (1 subgoal):\n 1. R \\<in> Rs", "by(cases R,blast)"], ["proof (state)\nthis:\n  R \\<in> Rs\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       selector (X i) = Some a \\<Longrightarrow>\n       graph_of (X i) = graph_of (X (Suc i)) \\<or>\n       (\\<exists>R\\<in>Rs.\n           pushout_step t R (graph_of (X i)) (graph_of (X (Suc i))))", "then"], ["proof (chain)\npicking this:\n  R \\<in> Rs", "show ?thesis"], ["proof (prove)\nusing this:\n  R \\<in> Rs\n\ngoal (1 subgoal):\n 1. graph_of (X i) = graph_of (X (Suc i)) \\<or>\n    (\\<exists>R\\<in>Rs.\n        pushout_step t R (graph_of (X i)) (graph_of (X (Suc i))))", "using ms[of i,unfolded Some Let_def] selector_pushout[OF selector Some gr]"], ["proof (prove)\nusing this:\n  R \\<in> Rs\n  X (Suc i) =\n  (case Some (R, f) of None \\<Rightarrow> X i\n   | Some (R, f) \\<Rightarrow>\n       (max (fst (X i)) (nextMax (Range (extend (fst (X i)) R f))),\n        on_triple (extend (fst (X i)) R f) `` edges (snd R) \\<union>\n        snd (X i)))\n  pushout_step ?t R (graph_of (X i))\n   (LG (on_triple (extend (fst (X i)) R f) `` edges (snd R) \\<union>\n        snd (X i))\n     {0..<max (fst (X i)) (nextMax (Range (extend (fst (X i)) R f)))})\n\ngoal (1 subgoal):\n 1. graph_of (X i) = graph_of (X (Suc i)) \\<or>\n    (\\<exists>R\\<in>Rs.\n        pushout_step t R (graph_of (X i)) (graph_of (X (Suc i))))", "unfolding make_step_def"], ["proof (prove)\nusing this:\n  R \\<in> Rs\n  X (Suc i) =\n  (case Some (R, f) of None \\<Rightarrow> X i\n   | Some (R, f) \\<Rightarrow>\n       (max (fst (X i)) (nextMax (Range (extend (fst (X i)) R f))),\n        on_triple (extend (fst (X i)) R f) `` edges (snd R) \\<union>\n        snd (X i)))\n  pushout_step ?t R (graph_of (X i))\n   (LG (on_triple (extend (fst (X i)) R f) `` edges (snd R) \\<union>\n        snd (X i))\n     {0..<max (fst (X i)) (nextMax (Range (extend (fst (X i)) R f)))})\n\ngoal (1 subgoal):\n 1. graph_of (X i) = graph_of (X (Suc i)) \\<or>\n    (\\<exists>R\\<in>Rs.\n        pushout_step t R (graph_of (X i)) (graph_of (X (Suc i))))", "by auto"], ["proof (state)\nthis:\n  graph_of (X i) = graph_of (X (Suc i)) \\<or>\n  (\\<exists>R\\<in>Rs.\n      pushout_step t R (graph_of (X i)) (graph_of (X (Suc i))))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  graph_of (X ?i) = graph_of (X (Suc ?i)) \\<or>\n  (\\<exists>R\\<in>Rs.\n      pushout_step t R (graph_of (X ?i)) (graph_of (X (Suc ?i))))\n\ngoal (2 subgoals):\n 1. set_of_graph_rules Rs\n 2. graph (graph_of (X 0))", "qed (fact assms)+"], ["", "lemma N_occurs_finitely_often:\n  assumes \"finite Rs\" \"set_of_graph_rules Rs\" \"graph (graph_of (X 0))\"\n      and makestep: \"\\<And> i. X (Suc i) = make_step selector (X i)\"\n      and selector: \"valid_selector Rs selector\"\n    shows \"finite {(R,f). \\<exists> i. R\\<in> Rs \\<and> graph_homomorphism (fst R) (graph_of (X i)) f\n                        \\<and> nextMax (Range f) \\<le> N}\" (is \"finite {(R,f).?P R f}\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite\n     {(R, f).\n      \\<exists>i.\n         R \\<in> Rs \\<and>\n         graph_homomorphism (fst R) (graph_of (X i)) f \\<and>\n         nextMax (Range f) \\<le> N}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. finite\n     {(R, f).\n      \\<exists>i.\n         R \\<in> Rs \\<and>\n         graph_homomorphism (fst R) (graph_of (X i)) f \\<and>\n         nextMax (Range f) \\<le> N}", "have prod_eq : \"(\\<forall> x \\<in> {(x, y). A x y}. B x) \\<longleftrightarrow> (\\<forall> x. A (fst x) (snd x) \\<longrightarrow> B x)\"\n     \"(x \\<in> {(x, y). A x y}) \\<longleftrightarrow> (A (fst x) (snd x))\"\n    for A B x"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>x\\<in>{(x, y). A x y}. B x) =\n    (\\<forall>x. A (fst x) (snd x) \\<longrightarrow> B x) &&&\n    (x \\<in> {(x, y). A x y}) = A (fst x) (snd x)", "by auto"], ["proof (state)\nthis:\n  (\\<forall>x\\<in>{(x, y). ?A1 x y}. ?B1 x) =\n  (\\<forall>x. ?A1 (fst x) (snd x) \\<longrightarrow> ?B1 x)\n  (?x1 \\<in> {(x, y). ?A1 x y}) = ?A1 (fst ?x1) (snd ?x1)\n\ngoal (1 subgoal):\n 1. finite\n     {(R, f).\n      \\<exists>i.\n         R \\<in> Rs \\<and>\n         graph_homomorphism (fst R) (graph_of (X i)) f \\<and>\n         nextMax (Range f) \\<le> N}", "let ?S = \"{(R,f).?P R f}\""], ["proof (state)\ngoal (1 subgoal):\n 1. finite\n     {(R, f).\n      \\<exists>i.\n         R \\<in> Rs \\<and>\n         graph_homomorphism (fst R) (graph_of (X i)) f \\<and>\n         nextMax (Range f) \\<le> N}", "let \"?Q R f\" = \"Domain f = vertices (fst (R::('a, 'b) Graph_PreRule)) \\<and> univalent f \\<and> nextMax (Range f) \\<le> N\""], ["proof (state)\ngoal (1 subgoal):\n 1. finite\n     {(R, f).\n      \\<exists>i.\n         R \\<in> Rs \\<and>\n         graph_homomorphism (fst R) (graph_of (X i)) f \\<and>\n         nextMax (Range f) \\<le> N}", "have seteq:\"(\\<Union>R\\<in>Rs. {(R', f). R' = R \\<and> ?Q R f}) = {(R,f). R \\<in> Rs \\<and> ?Q R f}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Union>R\\<in>Rs.\n        {(R', f).\n         R' = R \\<and>\n         Domain f = vertices (fst R) \\<and>\n         univalent f \\<and> nextMax (Range f) \\<le> N}) =\n    {(R, f).\n     R \\<in> Rs \\<and>\n     Domain f = vertices (fst R) \\<and>\n     univalent f \\<and> nextMax (Range f) \\<le> N}", "by auto"], ["proof (state)\nthis:\n  (\\<Union>R\\<in>Rs.\n      {(R', f).\n       R' = R \\<and>\n       Domain f = vertices (fst R) \\<and>\n       univalent f \\<and> nextMax (Range f) \\<le> N}) =\n  {(R, f).\n   R \\<in> Rs \\<and>\n   Domain f = vertices (fst R) \\<and>\n   univalent f \\<and> nextMax (Range f) \\<le> N}\n\ngoal (1 subgoal):\n 1. finite\n     {(R, f).\n      \\<exists>i.\n         R \\<in> Rs \\<and>\n         graph_homomorphism (fst R) (graph_of (X i)) f \\<and>\n         nextMax (Range f) \\<le> N}", "have \"\\<forall> R \\<in> Rs. finite {(R',f). R' = R \\<and> ?Q R f}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>R\\<in>Rs.\n       finite\n        {(R', f).\n         R' = R \\<and>\n         Domain f = vertices (fst R) \\<and>\n         univalent f \\<and> nextMax (Range f) \\<le> N}", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>R.\n       R \\<in> Rs \\<Longrightarrow>\n       finite\n        {(R', f).\n         R' = R \\<and>\n         Domain f = vertices (fst R) \\<and>\n         univalent f \\<and> nextMax (Range f) \\<le> N}", "fix R"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>R.\n       R \\<in> Rs \\<Longrightarrow>\n       finite\n        {(R', f).\n         R' = R \\<and>\n         Domain f = vertices (fst R) \\<and>\n         univalent f \\<and> nextMax (Range f) \\<le> N}", "assume \"R \\<in> Rs\""], ["proof (state)\nthis:\n  R \\<in> Rs\n\ngoal (1 subgoal):\n 1. \\<And>R.\n       R \\<in> Rs \\<Longrightarrow>\n       finite\n        {(R', f).\n         R' = R \\<and>\n         Domain f = vertices (fst R) \\<and>\n         univalent f \\<and> nextMax (Range f) \\<le> N}", "hence fin:\"finite (vertices (fst R))\""], ["proof (prove)\nusing this:\n  R \\<in> Rs\n\ngoal (1 subgoal):\n 1. finite (vertices (fst R))", "using assms"], ["proof (prove)\nusing this:\n  R \\<in> Rs\n  finite Rs\n  set_of_graph_rules Rs\n  graph (graph_of (X 0))\n  X (Suc ?i) = make_step selector (X ?i)\n  valid_selector Rs selector\n\ngoal (1 subgoal):\n 1. finite (vertices (fst R))", "by auto"], ["proof (state)\nthis:\n  finite (vertices (fst R))\n\ngoal (1 subgoal):\n 1. \\<And>R.\n       R \\<in> Rs \\<Longrightarrow>\n       finite\n        {(R', f).\n         R' = R \\<and>\n         Domain f = vertices (fst R) \\<and>\n         univalent f \\<and> nextMax (Range f) \\<le> N}", "hence fin2:\"finite (Pow (vertices (fst R) \\<times> {0..N}))\""], ["proof (prove)\nusing this:\n  finite (vertices (fst R))\n\ngoal (1 subgoal):\n 1. finite (Pow (vertices (fst R) \\<times> {0..N}))", "by auto"], ["proof (state)\nthis:\n  finite (Pow (vertices (fst R) \\<times> {0..N}))\n\ngoal (1 subgoal):\n 1. \\<And>R.\n       R \\<in> Rs \\<Longrightarrow>\n       finite\n        {(R', f).\n         R' = R \\<and>\n         Domain f = vertices (fst R) \\<and>\n         univalent f \\<and> nextMax (Range f) \\<le> N}", "have fin:\"Domain x = vertices (fst R) \\<Longrightarrow> univalent x \\<Longrightarrow> finite (snd ` x)\"\n      for x:: \"('b \\<times> nat) set\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Domain x = vertices (fst R); univalent x\\<rbrakk>\n    \\<Longrightarrow> finite (snd ` x)", "using fin univalent_finite[of x]"], ["proof (prove)\nusing this:\n  finite (vertices (fst R))\n  univalent x \\<Longrightarrow> card (Domain x) = card x\n  univalent x \\<Longrightarrow> finite (Domain x) = finite x\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Domain x = vertices (fst R); univalent x\\<rbrakk>\n    \\<Longrightarrow> finite (snd ` x)", "by simp"], ["proof (state)\nthis:\n  \\<lbrakk>Domain ?x1 = vertices (fst R); univalent ?x1\\<rbrakk>\n  \\<Longrightarrow> finite (snd ` ?x1)\n\ngoal (1 subgoal):\n 1. \\<And>R.\n       R \\<in> Rs \\<Longrightarrow>\n       finite\n        {(R', f).\n         R' = R \\<and>\n         Domain f = vertices (fst R) \\<and>\n         univalent f \\<and> nextMax (Range f) \\<le> N}", "hence \"Domain f = vertices (fst R) \\<Longrightarrow>\n      univalent f \\<Longrightarrow> (a,b) \\<in> f \\<Longrightarrow> nextMax (Range f) \\<le> N \\<Longrightarrow> b \\<le> N\" for f a b"], ["proof (prove)\nusing this:\n  \\<lbrakk>Domain ?x1 = vertices (fst R); univalent ?x1\\<rbrakk>\n  \\<Longrightarrow> finite (snd ` ?x1)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Domain f = vertices (fst R); univalent f; (a, b) \\<in> f;\n     nextMax (Range f) \\<le> N\\<rbrakk>\n    \\<Longrightarrow> b \\<le> N", "unfolding Range_snd"], ["proof (prove)\nusing this:\n  \\<lbrakk>Domain ?x1 = vertices (fst R); univalent ?x1\\<rbrakk>\n  \\<Longrightarrow> finite (snd ` ?x1)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Domain f = vertices (fst R); univalent f; (a, b) \\<in> f;\n     nextMax (snd ` f) \\<le> N\\<rbrakk>\n    \\<Longrightarrow> b \\<le> N", "using image_eqI nextMax_max(2) snd_conv order.trans"], ["proof (prove)\nusing this:\n  \\<lbrakk>Domain ?x1 = vertices (fst R); univalent ?x1\\<rbrakk>\n  \\<Longrightarrow> finite (snd ` ?x1)\n  \\<lbrakk>?b = ?f ?x; ?x \\<in> ?A\\<rbrakk>\n  \\<Longrightarrow> ?b \\<in> ?f ` ?A\n  \\<lbrakk>finite ?x; ?v \\<in> ?x\\<rbrakk>\n  \\<Longrightarrow> ?v \\<le> nextMax ?x\n  snd (?x1.0, ?x2.0) = ?x2.0\n  \\<lbrakk>?a \\<le> ?b; ?b \\<le> ?c\\<rbrakk> \\<Longrightarrow> ?a \\<le> ?c\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Domain f = vertices (fst R); univalent f; (a, b) \\<in> f;\n     nextMax (snd ` f) \\<le> N\\<rbrakk>\n    \\<Longrightarrow> b \\<le> N", "by metis"], ["proof (state)\nthis:\n  \\<lbrakk>Domain ?f1 = vertices (fst R); univalent ?f1;\n   (?a1, ?b1) \\<in> ?f1; nextMax (Range ?f1) \\<le> N\\<rbrakk>\n  \\<Longrightarrow> ?b1 \\<le> N\n\ngoal (1 subgoal):\n 1. \\<And>R.\n       R \\<in> Rs \\<Longrightarrow>\n       finite\n        {(R', f).\n         R' = R \\<and>\n         Domain f = vertices (fst R) \\<and>\n         univalent f \\<and> nextMax (Range f) \\<le> N}", "hence sub:\"{f. ?Q R f} \\<subseteq> Pow (vertices (fst R) \\<times> {0..N})\""], ["proof (prove)\nusing this:\n  \\<lbrakk>Domain ?f1 = vertices (fst R); univalent ?f1;\n   (?a1, ?b1) \\<in> ?f1; nextMax (Range ?f1) \\<le> N\\<rbrakk>\n  \\<Longrightarrow> ?b1 \\<le> N\n\ngoal (1 subgoal):\n 1. {f. Domain f = vertices (fst R) \\<and>\n        univalent f \\<and> nextMax (Range f) \\<le> N}\n    \\<subseteq> Pow (vertices (fst R) \\<times> {0..N})", "using nextMax_max[OF fin]"], ["proof (prove)\nusing this:\n  \\<lbrakk>Domain ?f1 = vertices (fst R); univalent ?f1;\n   (?a1, ?b1) \\<in> ?f1; nextMax (Range ?f1) \\<le> N\\<rbrakk>\n  \\<Longrightarrow> ?b1 \\<le> N\n  \\<lbrakk>Domain ?x2 = vertices (fst R); univalent ?x2;\n   ?v \\<in> snd ` ?x2\\<rbrakk>\n  \\<Longrightarrow> ?v < nextMax (snd ` ?x2)\n  \\<lbrakk>Domain ?x2 = vertices (fst R); univalent ?x2;\n   ?v \\<in> snd ` ?x2\\<rbrakk>\n  \\<Longrightarrow> ?v \\<le> nextMax (snd ` ?x2)\n\ngoal (1 subgoal):\n 1. {f. Domain f = vertices (fst R) \\<and>\n        univalent f \\<and> nextMax (Range f) \\<le> N}\n    \\<subseteq> Pow (vertices (fst R) \\<times> {0..N})", "by (auto simp:Range_snd image_def)"], ["proof (state)\nthis:\n  {f. Domain f = vertices (fst R) \\<and>\n      univalent f \\<and> nextMax (Range f) \\<le> N}\n  \\<subseteq> Pow (vertices (fst R) \\<times> {0..N})\n\ngoal (1 subgoal):\n 1. \\<And>R.\n       R \\<in> Rs \\<Longrightarrow>\n       finite\n        {(R', f).\n         R' = R \\<and>\n         Domain f = vertices (fst R) \\<and>\n         univalent f \\<and> nextMax (Range f) \\<le> N}", "from finite_subset[OF sub fin2]"], ["proof (chain)\npicking this:\n  finite\n   {f. Domain f = vertices (fst R) \\<and>\n       univalent f \\<and> nextMax (Range f) \\<le> N}", "show \"finite {(R',f). R' = R \\<and> ?Q R f}\""], ["proof (prove)\nusing this:\n  finite\n   {f. Domain f = vertices (fst R) \\<and>\n       univalent f \\<and> nextMax (Range f) \\<le> N}\n\ngoal (1 subgoal):\n 1. finite\n     {(R', f).\n      R' = R \\<and>\n      Domain f = vertices (fst R) \\<and>\n      univalent f \\<and> nextMax (Range f) \\<le> N}", "by auto"], ["proof (state)\nthis:\n  finite\n   {(R', f).\n    R' = R \\<and>\n    Domain f = vertices (fst R) \\<and>\n    univalent f \\<and> nextMax (Range f) \\<le> N}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>R\\<in>Rs.\n     finite\n      {(R', f).\n       R' = R \\<and>\n       Domain f = vertices (fst R) \\<and>\n       univalent f \\<and> nextMax (Range f) \\<le> N}\n\ngoal (1 subgoal):\n 1. finite\n     {(R, f).\n      \\<exists>i.\n         R \\<in> Rs \\<and>\n         graph_homomorphism (fst R) (graph_of (X i)) f \\<and>\n         nextMax (Range f) \\<le> N}", "from this[folded finite_UN[OF assms(1)],unfolded seteq]"], ["proof (chain)\npicking this:\n  finite\n   {(R, f).\n    R \\<in> Rs \\<and>\n    Domain f = vertices (fst R) \\<and>\n    univalent f \\<and> nextMax (Range f) \\<le> N}", "have fin:\"finite {(R,f). R \\<in> Rs \\<and> ?Q R f}\""], ["proof (prove)\nusing this:\n  finite\n   {(R, f).\n    R \\<in> Rs \\<and>\n    Domain f = vertices (fst R) \\<and>\n    univalent f \\<and> nextMax (Range f) \\<le> N}\n\ngoal (1 subgoal):\n 1. finite\n     {(R, f).\n      R \\<in> Rs \\<and>\n      Domain f = vertices (fst R) \\<and>\n      univalent f \\<and> nextMax (Range f) \\<le> N}", "."], ["proof (state)\nthis:\n  finite\n   {(R, f).\n    R \\<in> Rs \\<and>\n    Domain f = vertices (fst R) \\<and>\n    univalent f \\<and> nextMax (Range f) \\<le> N}\n\ngoal (1 subgoal):\n 1. finite\n     {(R, f).\n      \\<exists>i.\n         R \\<in> Rs \\<and>\n         graph_homomorphism (fst R) (graph_of (X i)) f \\<and>\n         nextMax (Range f) \\<le> N}", "have \"?P R f \\<Longrightarrow> R \\<in> Rs \\<and> ?Q R f\" for R f"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>i.\n       R \\<in> Rs \\<and>\n       graph_homomorphism (fst R) (graph_of (X i)) f \\<and>\n       nextMax (Range f) \\<le> N \\<Longrightarrow>\n    R \\<in> Rs \\<and>\n    Domain f = vertices (fst R) \\<and>\n    univalent f \\<and> nextMax (Range f) \\<le> N", "unfolding graph_homomorphism_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>i.\n       R \\<in> Rs \\<and>\n       (vertices (fst R) = Domain f \\<and>\n        graph (fst R) \\<and>\n        graph (graph_of (X i)) \\<and>\n        f `` vertices (fst R) \\<subseteq> vertices (graph_of (X i)) \\<and>\n        univalent f \\<and>\n        edge_preserving f (edges (fst R)) (edges (graph_of (X i)))) \\<and>\n       nextMax (Range f) \\<le> N \\<Longrightarrow>\n    R \\<in> Rs \\<and>\n    Domain f = vertices (fst R) \\<and>\n    univalent f \\<and> nextMax (Range f) \\<le> N", "by auto"], ["proof (state)\nthis:\n  \\<exists>i.\n     ?R1 \\<in> Rs \\<and>\n     graph_homomorphism (fst ?R1) (graph_of (X i)) ?f1 \\<and>\n     nextMax (Range ?f1) \\<le> N \\<Longrightarrow>\n  ?R1 \\<in> Rs \\<and>\n  Domain ?f1 = vertices (fst ?R1) \\<and>\n  univalent ?f1 \\<and> nextMax (Range ?f1) \\<le> N\n\ngoal (1 subgoal):\n 1. finite\n     {(R, f).\n      \\<exists>i.\n         R \\<in> Rs \\<and>\n         graph_homomorphism (fst R) (graph_of (X i)) f \\<and>\n         nextMax (Range f) \\<le> N}", "hence \"?S \\<subseteq> {(R,f). R \\<in> Rs \\<and> ?Q R f}\""], ["proof (prove)\nusing this:\n  \\<exists>i.\n     ?R1 \\<in> Rs \\<and>\n     graph_homomorphism (fst ?R1) (graph_of (X i)) ?f1 \\<and>\n     nextMax (Range ?f1) \\<le> N \\<Longrightarrow>\n  ?R1 \\<in> Rs \\<and>\n  Domain ?f1 = vertices (fst ?R1) \\<and>\n  univalent ?f1 \\<and> nextMax (Range ?f1) \\<le> N\n\ngoal (1 subgoal):\n 1. {(R, f).\n     \\<exists>i.\n        R \\<in> Rs \\<and>\n        graph_homomorphism (fst R) (graph_of (X i)) f \\<and>\n        nextMax (Range f) \\<le> N}\n    \\<subseteq> {(R, f).\n                 R \\<in> Rs \\<and>\n                 Domain f = vertices (fst R) \\<and>\n                 univalent f \\<and> nextMax (Range f) \\<le> N}", "unfolding subset_eq prod_eq"], ["proof (prove)\nusing this:\n  \\<exists>i.\n     ?R1 \\<in> Rs \\<and>\n     graph_homomorphism (fst ?R1) (graph_of (X i)) ?f1 \\<and>\n     nextMax (Range ?f1) \\<le> N \\<Longrightarrow>\n  ?R1 \\<in> Rs \\<and>\n  Domain ?f1 = vertices (fst ?R1) \\<and>\n  univalent ?f1 \\<and> nextMax (Range ?f1) \\<le> N\n\ngoal (1 subgoal):\n 1. \\<forall>x.\n       (\\<exists>i.\n           fst x \\<in> Rs \\<and>\n           graph_homomorphism (fst (fst x)) (graph_of (X i)) (snd x) \\<and>\n           nextMax (Range (snd x)) \\<le> N) \\<longrightarrow>\n       fst x \\<in> Rs \\<and>\n       Domain (snd x) = vertices (fst (fst x)) \\<and>\n       univalent (snd x) \\<and> nextMax (Range (snd x)) \\<le> N", "by blast"], ["proof (state)\nthis:\n  {(R, f).\n   \\<exists>i.\n      R \\<in> Rs \\<and>\n      graph_homomorphism (fst R) (graph_of (X i)) f \\<and>\n      nextMax (Range f) \\<le> N}\n  \\<subseteq> {(R, f).\n               R \\<in> Rs \\<and>\n               Domain f = vertices (fst R) \\<and>\n               univalent f \\<and> nextMax (Range f) \\<le> N}\n\ngoal (1 subgoal):\n 1. finite\n     {(R, f).\n      \\<exists>i.\n         R \\<in> Rs \\<and>\n         graph_homomorphism (fst R) (graph_of (X i)) f \\<and>\n         nextMax (Range f) \\<le> N}", "from finite_subset[OF this fin]"], ["proof (chain)\npicking this:\n  finite\n   {(R, f).\n    \\<exists>i.\n       R \\<in> Rs \\<and>\n       graph_homomorphism (fst R) (graph_of (X i)) f \\<and>\n       nextMax (Range f) \\<le> N}", "show ?thesis"], ["proof (prove)\nusing this:\n  finite\n   {(R, f).\n    \\<exists>i.\n       R \\<in> Rs \\<and>\n       graph_homomorphism (fst R) (graph_of (X i)) f \\<and>\n       nextMax (Range f) \\<le> N}\n\ngoal (1 subgoal):\n 1. finite\n     {(R, f).\n      \\<exists>i.\n         R \\<in> Rs \\<and>\n         graph_homomorphism (fst R) (graph_of (X i)) f \\<and>\n         nextMax (Range f) \\<le> N}", "by auto"], ["proof (state)\nthis:\n  finite\n   {(R, f).\n    \\<exists>i.\n       R \\<in> Rs \\<and>\n       graph_homomorphism (fst R) (graph_of (X i)) f \\<and>\n       nextMax (Range f) \\<le> N}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma inj_on_infinite:\n  assumes \"infinite A\" \"inj_on f A\" \"range f \\<subseteq> B\"\n  shows \"infinite B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. infinite B", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. infinite B", "from assms[unfolded infinite_iff_countable_subset]"], ["proof (chain)\npicking this:\n  \\<exists>f. inj f \\<and> range f \\<subseteq> A\n  inj_on f A\n  range f \\<subseteq> B", "obtain g::\"nat \\<Rightarrow> 'a\" where\n    g:\"inj g \\<and> range g \\<subseteq> A\""], ["proof (prove)\nusing this:\n  \\<exists>f. inj f \\<and> range f \\<subseteq> A\n  inj_on f A\n  range f \\<subseteq> B\n\ngoal (1 subgoal):\n 1. (\\<And>g.\n        inj g \\<and> range g \\<subseteq> A \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  inj g \\<and> range g \\<subseteq> A\n\ngoal (1 subgoal):\n 1. infinite B", "hence i:\"inj (f o g)\""], ["proof (prove)\nusing this:\n  inj g \\<and> range g \\<subseteq> A\n\ngoal (1 subgoal):\n 1. inj (f \\<circ> g)", "using assms(2)"], ["proof (prove)\nusing this:\n  inj g \\<and> range g \\<subseteq> A\n  inj_on f A\n\ngoal (1 subgoal):\n 1. inj (f \\<circ> g)", "using comp_inj_on inj_on_subset"], ["proof (prove)\nusing this:\n  inj g \\<and> range g \\<subseteq> A\n  inj_on f A\n  \\<lbrakk>inj_on ?f ?A; inj_on ?g (?f ` ?A)\\<rbrakk>\n  \\<Longrightarrow> inj_on (?g \\<circ> ?f) ?A\n  \\<lbrakk>inj_on ?f ?A; ?B \\<subseteq> ?A\\<rbrakk>\n  \\<Longrightarrow> inj_on ?f ?B\n\ngoal (1 subgoal):\n 1. inj (f \\<circ> g)", "by blast"], ["proof (state)\nthis:\n  inj (f \\<circ> g)\n\ngoal (1 subgoal):\n 1. infinite B", "have \"range (f o g) \\<subseteq> B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. range (f \\<circ> g) \\<subseteq> B", "using assms(3)"], ["proof (prove)\nusing this:\n  range f \\<subseteq> B\n\ngoal (1 subgoal):\n 1. range (f \\<circ> g) \\<subseteq> B", "by auto"], ["proof (state)\nthis:\n  range (f \\<circ> g) \\<subseteq> B\n\ngoal (1 subgoal):\n 1. infinite B", "with i"], ["proof (chain)\npicking this:\n  inj (f \\<circ> g)\n  range (f \\<circ> g) \\<subseteq> B", "show ?thesis"], ["proof (prove)\nusing this:\n  inj (f \\<circ> g)\n  range (f \\<circ> g) \\<subseteq> B\n\ngoal (1 subgoal):\n 1. infinite B", "unfolding infinite_iff_countable_subset"], ["proof (prove)\nusing this:\n  inj (f \\<circ> g)\n  range (f \\<circ> g) \\<subseteq> B\n\ngoal (1 subgoal):\n 1. \\<exists>f. inj f \\<and> range f \\<subseteq> B", "by blast"], ["proof (state)\nthis:\n  infinite B\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma makestep_makes_selector_inj:\n  assumes \"selector (X y) = Some (R,f)\"\n          \"selector (X x) = Some (R,f)\"\n          \"valid_selector Rs selector\"\n    and step: \"\\<forall> i. X (Suc i) = make_step selector (X i)\"\n    and chain:\"chain (\\<lambda> i. graph_of (X i))\"\n  shows \"x = y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x = y", "proof(rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<noteq> y \\<Longrightarrow> False", "assume a:\"x \\<noteq> y\""], ["proof (state)\nthis:\n  x \\<noteq> y\n\ngoal (1 subgoal):\n 1. x \\<noteq> y \\<Longrightarrow> False", "define x' y' where \"x' \\<equiv> min x y\" \"y' \\<equiv> max x y\""], ["proof (state)\nthis:\n  x' \\<equiv> min x y\n  y' \\<equiv> max x y\n\ngoal (1 subgoal):\n 1. x \\<noteq> y \\<Longrightarrow> False", "hence xy:\"selector (X x') = Some (R, f)\" \"selector (X y') = Some (R, f)\" \"x' < y'\""], ["proof (prove)\nusing this:\n  x' \\<equiv> min x y\n  y' \\<equiv> max x y\n\ngoal (1 subgoal):\n 1. selector (X x') = Some (R, f) &&&\n    selector (X y') = Some (R, f) &&& x' < y'", "using assms(1,2) a"], ["proof (prove)\nusing this:\n  x' \\<equiv> min x y\n  y' \\<equiv> max x y\n  selector (X y) = Some (R, f)\n  selector (X x) = Some (R, f)\n  x \\<noteq> y\n\ngoal (1 subgoal):\n 1. selector (X x') = Some (R, f) &&&\n    selector (X y') = Some (R, f) &&& x' < y'", "unfolding min_def max_def"], ["proof (prove)\nusing this:\n  x' \\<equiv> if x \\<le> y then x else y\n  y' \\<equiv> if x \\<le> y then y else x\n  selector (X y) = Some (R, f)\n  selector (X x) = Some (R, f)\n  x \\<noteq> y\n\ngoal (1 subgoal):\n 1. selector (X x') = Some (R, f) &&&\n    selector (X y') = Some (R, f) &&& x' < y'", "by auto"], ["proof (state)\nthis:\n  selector (X x') = Some (R, f)\n  selector (X y') = Some (R, f)\n  x' < y'\n\ngoal (1 subgoal):\n 1. x \\<noteq> y \\<Longrightarrow> False", "with valid_selectorD assms"], ["proof (chain)\npicking this:\n  valid_selector ?Rs ?selector \\<Longrightarrow>\n  (worklist ?G ?Rs = {}) = (?selector ?G = None)\n  \\<lbrakk>valid_selector ?Rs ?selector;\n   ?selector ?G = Some (?R, ?f)\\<rbrakk>\n  \\<Longrightarrow> valid_selection ?Rs ?G ?R ?f\n  selector (X y) = Some (R, f)\n  selector (X x) = Some (R, f)\n  valid_selector Rs selector\n  \\<forall>i. X (Suc i) = make_step selector (X i)\n  chain (\\<lambda>i. graph_of (X i))\n  selector (X x') = Some (R, f)\n  selector (X y') = Some (R, f)\n  x' < y'", "have \"valid_selection Rs (X x') R f\" \"valid_selection Rs (X y') R f\""], ["proof (prove)\nusing this:\n  valid_selector ?Rs ?selector \\<Longrightarrow>\n  (worklist ?G ?Rs = {}) = (?selector ?G = None)\n  \\<lbrakk>valid_selector ?Rs ?selector;\n   ?selector ?G = Some (?R, ?f)\\<rbrakk>\n  \\<Longrightarrow> valid_selection ?Rs ?G ?R ?f\n  selector (X y) = Some (R, f)\n  selector (X x) = Some (R, f)\n  valid_selector Rs selector\n  \\<forall>i. X (Suc i) = make_step selector (X i)\n  chain (\\<lambda>i. graph_of (X i))\n  selector (X x') = Some (R, f)\n  selector (X y') = Some (R, f)\n  x' < y'\n\ngoal (1 subgoal):\n 1. valid_selection Rs (X x') R f &&& valid_selection Rs (X y') R f", "by auto"], ["proof (state)\nthis:\n  valid_selection Rs (X x') R f\n  valid_selection Rs (X y') R f\n\ngoal (1 subgoal):\n 1. x \\<noteq> y \\<Longrightarrow> False", "hence not_ex:\"\\<not> extensible R (graph_of (X y')) f\"\n    and hom:\"graph_homomorphism (fst R) (graph_of (X x')) f\" \"graph_rule R\""], ["proof (prove)\nusing this:\n  valid_selection Rs (X x') R f\n  valid_selection Rs (X y') R f\n\ngoal (1 subgoal):\n 1. \\<not> extensible R (graph_of (X y')) f &&&\n    graph_homomorphism (fst R) (graph_of (X x')) f &&& graph_rule R", "unfolding valid_selection_def Let_def worklist_def"], ["proof (prove)\nusing this:\n  (nextMax (Range f), R, f)\n  \\<in> {(N, R, f).\n         R \\<in> Rs \\<and>\n         graph_homomorphism (fst R) (graph_of (X x')) f \\<and>\n         N = nextMax (Range f) \\<and>\n         \\<not> extensible R (graph_of (X x')) f} \\<and>\n  (\\<forall>(N, uu_)\n            \\<in>{(N, R, f).\n                  R \\<in> Rs \\<and>\n                  graph_homomorphism (fst R) (graph_of (X x')) f \\<and>\n                  N = nextMax (Range f) \\<and>\n                  \\<not> extensible R (graph_of (X x')) f}.\n      nextMax (Range f) \\<le> N) \\<and>\n  graph_rule R\n  (nextMax (Range f), R, f)\n  \\<in> {(N, R, f).\n         R \\<in> Rs \\<and>\n         graph_homomorphism (fst R) (graph_of (X y')) f \\<and>\n         N = nextMax (Range f) \\<and>\n         \\<not> extensible R (graph_of (X y')) f} \\<and>\n  (\\<forall>(N, uu_)\n            \\<in>{(N, R, f).\n                  R \\<in> Rs \\<and>\n                  graph_homomorphism (fst R) (graph_of (X y')) f \\<and>\n                  N = nextMax (Range f) \\<and>\n                  \\<not> extensible R (graph_of (X y')) f}.\n      nextMax (Range f) \\<le> N) \\<and>\n  graph_rule R\n\ngoal (1 subgoal):\n 1. \\<not> extensible R (graph_of (X y')) f &&&\n    graph_homomorphism (fst R) (graph_of (X x')) f &&& graph_rule R", "by auto"], ["proof (state)\nthis:\n  \\<not> extensible R (graph_of (X y')) f\n  graph_homomorphism (fst R) (graph_of (X x')) f\n  graph_rule R\n\ngoal (1 subgoal):\n 1. x \\<noteq> y \\<Longrightarrow> False", "have X:\"X (Suc x') = (max (fst (X x')) (nextMax (Range (extend (fst (X x')) R f))),\n          on_triple (extend (fst (X x')) R f) `` edges (snd R) \\<union> snd (X x'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X (Suc x') =\n    (max (fst (X x')) (nextMax (Range (extend (fst (X x')) R f))),\n     on_triple (extend (fst (X x')) R f) `` edges (snd R) \\<union>\n     snd (X x'))", "unfolding step[unfolded make_step_def Let_def,rule_format] xy"], ["proof (prove)\ngoal (1 subgoal):\n 1. (case Some (R, f) of None \\<Rightarrow> X x'\n     | Some (R, f) \\<Rightarrow>\n         (max (fst (X x')) (nextMax (Range (extend (fst (X x')) R f))),\n          on_triple (extend (fst (X x')) R f) `` edges (snd R) \\<union>\n          snd (X x'))) =\n    (max (fst (X x')) (nextMax (Range (extend (fst (X x')) R f))),\n     on_triple (extend (fst (X x')) R f) `` edges (snd R) \\<union>\n     snd (X x'))", "by auto"], ["proof (state)\nthis:\n  X (Suc x') =\n  (max (fst (X x')) (nextMax (Range (extend (fst (X x')) R f))),\n   on_triple (extend (fst (X x')) R f) `` edges (snd R) \\<union> snd (X x'))\n\ngoal (1 subgoal):\n 1. x \\<noteq> y \\<Longrightarrow> False", "let ?ex = \"extend (fst (X x')) R f\""], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<noteq> y \\<Longrightarrow> False", "have hom:\"graph_homomorphism (snd R) (graph_of (X (Suc x'))) ?ex\"\n       and agr:\"agree_on (fst R) f ?ex\""], ["proof (prove)\ngoal (1 subgoal):\n 1. graph_homomorphism (snd R) (graph_of (X (Suc x')))\n     (extend (fst (X x')) R f) &&&\n    agree_on (fst R) f (extend (fst (X x')) R f)", "using extend(1,2)[OF hom]"], ["proof (prove)\nusing this:\n  graph_homomorphism (snd R)\n   (LG (on_triple (extend (fst (X x')) R f) `` edges (snd R) \\<union>\n        snd (X x'))\n     {0..<max (fst (X x')) (nextMax (Range (extend (fst (X x')) R f)))})\n   (extend (fst (X x')) R f)\n  agree_on (fst R) f (extend (fst (X x')) R f)\n\ngoal (1 subgoal):\n 1. graph_homomorphism (snd R) (graph_of (X (Suc x')))\n     (extend (fst (X x')) R f) &&&\n    agree_on (fst R) f (extend (fst (X x')) R f)", "unfolding X"], ["proof (prove)\nusing this:\n  graph_homomorphism (snd R)\n   (LG (on_triple (extend (fst (X x')) R f) `` edges (snd R) \\<union>\n        snd (X x'))\n     {0..<max (fst (X x')) (nextMax (Range (extend (fst (X x')) R f)))})\n   (extend (fst (X x')) R f)\n  agree_on (fst R) f (extend (fst (X x')) R f)\n\ngoal (1 subgoal):\n 1. graph_homomorphism (snd R)\n     (graph_of\n       (max (fst (X x')) (nextMax (Range (extend (fst (X x')) R f))),\n        on_triple (extend (fst (X x')) R f) `` edges (snd R) \\<union>\n        snd (X x')))\n     (extend (fst (X x')) R f) &&&\n    agree_on (fst R) f (extend (fst (X x')) R f)", "by auto"], ["proof (state)\nthis:\n  graph_homomorphism (snd R) (graph_of (X (Suc x')))\n   (extend (fst (X x')) R f)\n  agree_on (fst R) f (extend (fst (X x')) R f)\n\ngoal (1 subgoal):\n 1. x \\<noteq> y \\<Longrightarrow> False", "from xy"], ["proof (chain)\npicking this:\n  selector (X x') = Some (R, f)\n  selector (X y') = Some (R, f)\n  x' < y'", "have \"Suc x' \\<le> y'\""], ["proof (prove)\nusing this:\n  selector (X x') = Some (R, f)\n  selector (X y') = Some (R, f)\n  x' < y'\n\ngoal (1 subgoal):\n 1. Suc x' \\<le> y'", "by auto"], ["proof (state)\nthis:\n  Suc x' \\<le> y'\n\ngoal (1 subgoal):\n 1. x \\<noteq> y \\<Longrightarrow> False", "with chain[unfolded chain_def2]"], ["proof (chain)\npicking this:\n  \\<forall>i j.\n     i \\<le> j \\<longrightarrow> subgraph (graph_of (X i)) (graph_of (X j))\n  Suc x' \\<le> y'", "have \"subgraph (graph_of (X (Suc x'))) (graph_of (X y'))\""], ["proof (prove)\nusing this:\n  \\<forall>i j.\n     i \\<le> j \\<longrightarrow> subgraph (graph_of (X i)) (graph_of (X j))\n  Suc x' \\<le> y'\n\ngoal (1 subgoal):\n 1. subgraph (graph_of (X (Suc x'))) (graph_of (X y'))", "by auto"], ["proof (state)\nthis:\n  subgraph (graph_of (X (Suc x'))) (graph_of (X y'))\n\ngoal (1 subgoal):\n 1. x \\<noteq> y \\<Longrightarrow> False", "from subgraph_preserves_hom[OF this hom]"], ["proof (chain)\npicking this:\n  graph_homomorphism (snd R) (graph_of (X y')) (extend (fst (X x')) R f)", "have hom:\"graph_homomorphism (snd R) (graph_of (X y')) ?ex\""], ["proof (prove)\nusing this:\n  graph_homomorphism (snd R) (graph_of (X y')) (extend (fst (X x')) R f)\n\ngoal (1 subgoal):\n 1. graph_homomorphism (snd R) (graph_of (X y')) (extend (fst (X x')) R f)", "."], ["proof (state)\nthis:\n  graph_homomorphism (snd R) (graph_of (X y')) (extend (fst (X x')) R f)\n\ngoal (1 subgoal):\n 1. x \\<noteq> y \\<Longrightarrow> False", "with agr"], ["proof (chain)\npicking this:\n  agree_on (fst R) f (extend (fst (X x')) R f)\n  graph_homomorphism (snd R) (graph_of (X y')) (extend (fst (X x')) R f)", "have \"extensible R (graph_of (X y')) f\""], ["proof (prove)\nusing this:\n  agree_on (fst R) f (extend (fst (X x')) R f)\n  graph_homomorphism (snd R) (graph_of (X y')) (extend (fst (X x')) R f)\n\ngoal (1 subgoal):\n 1. extensible R (graph_of (X y')) f", "unfolding extensible_def"], ["proof (prove)\nusing this:\n  agree_on (fst R) f (extend (fst (X x')) R f)\n  graph_homomorphism (snd R) (graph_of (X y')) (extend (fst (X x')) R f)\n\ngoal (1 subgoal):\n 1. \\<exists>g.\n       graph_homomorphism (snd R) (graph_of (X y')) g \\<and>\n       agree_on (fst R) f g", "by auto"], ["proof (state)\nthis:\n  extensible R (graph_of (X y')) f\n\ngoal (1 subgoal):\n 1. x \\<noteq> y \\<Longrightarrow> False", "thus False"], ["proof (prove)\nusing this:\n  extensible R (graph_of (X y')) f\n\ngoal (1 subgoal):\n 1. False", "using not_ex"], ["proof (prove)\nusing this:\n  extensible R (graph_of (X y')) f\n  \\<not> extensible R (graph_of (X y')) f\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma fair_through_make_step:\n  assumes \"finite Rs\" \"set_of_graph_rules Rs\" \"graph (graph_of (X 0))\"\n     (* It should suffice to take infinitely many make_steps, \n        rather than having every step be a make_step,\n        but we focus on the algorithm as in the paper here *)\n     and makestep: \"\\<forall> i. X (Suc i) = make_step selector (X i)\"\n     and selector: \"valid_selector Rs selector\"\n  shows \"fair_chain Rs (\\<lambda> i. graph_of (X i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fair_chain Rs (\\<lambda>i. graph_of (X i))", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. chain (\\<lambda>i. graph_of (X i))\n 2. \\<And>R f i.\n       \\<lbrakk>R \\<in> Rs;\n        graph_homomorphism (fst R) (graph_of (X i)) f\\<rbrakk>\n       \\<Longrightarrow> \\<exists>j. extensible R (graph_of (X j)) f", "show chn:\"chain (\\<lambda>i. graph_of (X i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. chain (\\<lambda>i. graph_of (X i))", "using WPC_through_make_step assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>set_of_graph_rules ?Rs; graph (graph_of (?X 0));\n   \\<forall>i. ?X (Suc i) = make_step ?selector (?X i);\n   valid_selector ?Rs ?selector\\<rbrakk>\n  \\<Longrightarrow> Simple_WPC ?t ?Rs (\\<lambda>i. graph_of (?X i))\n  \\<lbrakk>set_of_graph_rules ?Rs; graph (graph_of (?X 0));\n   \\<forall>i. ?X (Suc i) = make_step ?selector (?X i);\n   valid_selector ?Rs ?selector\\<rbrakk>\n  \\<Longrightarrow> chain (\\<lambda>i. graph_of (?X i))\n  finite Rs\n  set_of_graph_rules Rs\n  graph (graph_of (X 0))\n  \\<forall>i. X (Suc i) = make_step selector (X i)\n  valid_selector Rs selector\n\ngoal (1 subgoal):\n 1. chain (\\<lambda>i. graph_of (X i))", "by blast"], ["proof (state)\nthis:\n  chain (\\<lambda>i. graph_of (X i))\n\ngoal (1 subgoal):\n 1. \\<And>R f i.\n       \\<lbrakk>R \\<in> Rs;\n        graph_homomorphism (fst R) (graph_of (X i)) f\\<rbrakk>\n       \\<Longrightarrow> \\<exists>j. extensible R (graph_of (X j)) f", "fix R f i"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>R f i.\n       \\<lbrakk>R \\<in> Rs;\n        graph_homomorphism (fst R) (graph_of (X i)) f\\<rbrakk>\n       \\<Longrightarrow> \\<exists>j. extensible R (graph_of (X j)) f", "assume Rs:\"R \\<in> Rs\" and h:\"graph_homomorphism (fst R) (graph_of (X i)) f\""], ["proof (state)\nthis:\n  R \\<in> Rs\n  graph_homomorphism (fst R) (graph_of (X i)) f\n\ngoal (1 subgoal):\n 1. \\<And>R f i.\n       \\<lbrakk>R \\<in> Rs;\n        graph_homomorphism (fst R) (graph_of (X i)) f\\<rbrakk>\n       \\<Longrightarrow> \\<exists>j. extensible R (graph_of (X j)) f", "hence R:\"finite (vertices (snd R))\" \"subgraph (fst R) (snd R)\"  \"finite (vertices (fst R))\""], ["proof (prove)\nusing this:\n  R \\<in> Rs\n  graph_homomorphism (fst R) (graph_of (X i)) f\n\ngoal (1 subgoal):\n 1. finite (vertices (snd R)) &&&\n    subgraph (fst R) (snd R) &&& finite (vertices (fst R))", "using assms"], ["proof (prove)\nusing this:\n  R \\<in> Rs\n  graph_homomorphism (fst R) (graph_of (X i)) f\n  finite Rs\n  set_of_graph_rules Rs\n  graph (graph_of (X 0))\n  \\<forall>i. X (Suc i) = make_step selector (X i)\n  valid_selector Rs selector\n\ngoal (1 subgoal):\n 1. finite (vertices (snd R)) &&&\n    subgraph (fst R) (snd R) &&& finite (vertices (fst R))", "by auto"], ["proof (state)\nthis:\n  finite (vertices (snd R))\n  subgraph (fst R) (snd R)\n  finite (vertices (fst R))\n\ngoal (1 subgoal):\n 1. \\<And>R f i.\n       \\<lbrakk>R \\<in> Rs;\n        graph_homomorphism (fst R) (graph_of (X i)) f\\<rbrakk>\n       \\<Longrightarrow> \\<exists>j. extensible R (graph_of (X j)) f", "hence f:\"finite f\" \"finite (Range f)\" \"finite (Domain f)\" \"univalent f\""], ["proof (prove)\nusing this:\n  finite (vertices (snd R))\n  subgraph (fst R) (snd R)\n  finite (vertices (fst R))\n\ngoal (1 subgoal):\n 1. (finite f &&& finite (Range f)) &&& finite (Domain f) &&& univalent f", "using h"], ["proof (prove)\nusing this:\n  finite (vertices (snd R))\n  subgraph (fst R) (snd R)\n  finite (vertices (fst R))\n  graph_homomorphism (fst R) (graph_of (X i)) f\n\ngoal (1 subgoal):\n 1. (finite f &&& finite (Range f)) &&& finite (Domain f) &&& univalent f", "unfolding graph_homomorphism_def Range_snd"], ["proof (prove)\nusing this:\n  finite (vertices (snd R))\n  vertices (fst R) = Domain (Id_on (vertices (fst R))) \\<and>\n  graph (fst R) \\<and>\n  graph (snd R) \\<and>\n  Id_on (vertices (fst R)) `` vertices (fst R)\n  \\<subseteq> vertices (snd R) \\<and>\n  univalent (Id_on (vertices (fst R))) \\<and>\n  edge_preserving (Id_on (vertices (fst R))) (edges (fst R)) (edges (snd R))\n  finite (vertices (fst R))\n  vertices (fst R) = Domain f \\<and>\n  graph (fst R) \\<and>\n  graph (graph_of (X i)) \\<and>\n  f `` vertices (fst R) \\<subseteq> vertices (graph_of (X i)) \\<and>\n  univalent f \\<and>\n  edge_preserving f (edges (fst R)) (edges (graph_of (X i)))\n\ngoal (1 subgoal):\n 1. (finite f &&& finite (snd ` f)) &&& finite (Domain f) &&& univalent f", "by auto"], ["proof (state)\nthis:\n  finite f\n  finite (Range f)\n  finite (Domain f)\n  univalent f\n\ngoal (1 subgoal):\n 1. \\<And>R f i.\n       \\<lbrakk>R \\<in> Rs;\n        graph_homomorphism (fst R) (graph_of (X i)) f\\<rbrakk>\n       \\<Longrightarrow> \\<exists>j. extensible R (graph_of (X j)) f", "define N where \"N \\<equiv> nextMax (Range f)\""], ["proof (state)\nthis:\n  N \\<equiv> nextMax (Range f)\n\ngoal (1 subgoal):\n 1. \\<And>R f i.\n       \\<lbrakk>R \\<in> Rs;\n        graph_homomorphism (fst R) (graph_of (X i)) f\\<rbrakk>\n       \\<Longrightarrow> \\<exists>j. extensible R (graph_of (X j)) f", "fix S"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>R f i.\n       \\<lbrakk>R \\<in> Rs;\n        graph_homomorphism (fst R) (graph_of (X i)) f\\<rbrakk>\n       \\<Longrightarrow> \\<exists>j. extensible R (graph_of (X j)) f", "let \"?Q X' j\" = \" fst X' \\<in> Rs\n                  \\<and> graph_homomorphism (fst (fst X')) (graph_of (X (j+i))) (snd X')\n                  \\<and> nextMax (Range (snd X')) \\<le> N\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>R f i.\n       \\<lbrakk>R \\<in> Rs;\n        graph_homomorphism (fst R) (graph_of (X i)) f\\<rbrakk>\n       \\<Longrightarrow> \\<exists>j. extensible R (graph_of (X j)) f", "let ?S = \"{(R,f). \\<exists>j. ?Q (R,f) j}\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>R f i.\n       \\<lbrakk>R \\<in> Rs;\n        graph_homomorphism (fst R) (graph_of (X i)) f\\<rbrakk>\n       \\<Longrightarrow> \\<exists>j. extensible R (graph_of (X j)) f", "from assms(4)"], ["proof (chain)\npicking this:\n  \\<forall>i. X (Suc i) = make_step selector (X i)", "have \"\\<And>ia. X (Suc ia + i) = make_step selector (X (ia + i))\""], ["proof (prove)\nusing this:\n  \\<forall>i. X (Suc i) = make_step selector (X i)\n\ngoal (1 subgoal):\n 1. \\<And>ia. X (Suc ia + i) = make_step selector (X (ia + i))", "by auto"], ["proof (state)\nthis:\n  X (Suc ?ia + i) = make_step selector (X (?ia + i))\n\ngoal (1 subgoal):\n 1. \\<And>R f i.\n       \\<lbrakk>R \\<in> Rs;\n        graph_homomorphism (fst R) (graph_of (X i)) f\\<rbrakk>\n       \\<Longrightarrow> \\<exists>j. extensible R (graph_of (X j)) f", "note r = assms(1,2) chain_then_restrict[OF chn] this assms(5)"], ["proof (state)\nthis:\n  finite Rs\n  set_of_graph_rules Rs\n  graph (graph_of (X ?i))\n  X (Suc ?ia + i) = make_step selector (X (?ia + i))\n  valid_selector Rs selector\n\ngoal (1 subgoal):\n 1. \\<And>R f i.\n       \\<lbrakk>R \\<in> Rs;\n        graph_homomorphism (fst R) (graph_of (X i)) f\\<rbrakk>\n       \\<Longrightarrow> \\<exists>j. extensible R (graph_of (X j)) f", "from N_occurs_finitely_often[of Rs \"\\<lambda> j. X (j + i)\",OF r]"], ["proof (chain)\npicking this:\n  finite\n   {(R, f).\n    \\<exists>ia.\n       R \\<in> Rs \\<and>\n       graph_homomorphism (fst R) (graph_of (X (ia + i))) f \\<and>\n       nextMax (Range f) \\<le> ?N}", "have fin_S:\"finite ?S\""], ["proof (prove)\nusing this:\n  finite\n   {(R, f).\n    \\<exists>ia.\n       R \\<in> Rs \\<and>\n       graph_homomorphism (fst R) (graph_of (X (ia + i))) f \\<and>\n       nextMax (Range f) \\<le> ?N}\n\ngoal (1 subgoal):\n 1. finite\n     {(R, f).\n      \\<exists>j.\n         fst (R, f) \\<in> Rs \\<and>\n         graph_homomorphism (fst (fst (R, f))) (graph_of (X (j + i)))\n          (snd (R, f)) \\<and>\n         nextMax (Range (snd (R, f))) \\<le> N}", "by auto"], ["proof (state)\nthis:\n  finite\n   {(R, f).\n    \\<exists>j.\n       fst (R, f) \\<in> Rs \\<and>\n       graph_homomorphism (fst (fst (R, f))) (graph_of (X (j + i)))\n        (snd (R, f)) \\<and>\n       nextMax (Range (snd (R, f))) \\<le> N}\n\ngoal (1 subgoal):\n 1. \\<And>R f i.\n       \\<lbrakk>R \\<in> Rs;\n        graph_homomorphism (fst R) (graph_of (X i)) f\\<rbrakk>\n       \\<Longrightarrow> \\<exists>j. extensible R (graph_of (X j)) f", "{"], ["proof (state)\nthis:\n  finite\n   {(R, f).\n    \\<exists>j.\n       fst (R, f) \\<in> Rs \\<and>\n       graph_homomorphism (fst (fst (R, f))) (graph_of (X (j + i)))\n        (snd (R, f)) \\<and>\n       nextMax (Range (snd (R, f))) \\<le> N}\n\ngoal (1 subgoal):\n 1. \\<And>R f i.\n       \\<lbrakk>R \\<in> Rs;\n        graph_homomorphism (fst R) (graph_of (X i)) f\\<rbrakk>\n       \\<Longrightarrow> \\<exists>j. extensible R (graph_of (X j)) f", "assume a:\"\\<forall>j. \\<not> extensible R (graph_of (X j)) f\""], ["proof (state)\nthis:\n  \\<forall>j. \\<not> extensible R (graph_of (X j)) f\n\ngoal (1 subgoal):\n 1. \\<And>R f i.\n       \\<lbrakk>R \\<in> Rs;\n        graph_homomorphism (fst R) (graph_of (X i)) f\\<rbrakk>\n       \\<Longrightarrow> \\<exists>j. extensible R (graph_of (X j)) f", "let \"?P X' j\" = \"?Q X' j \\<and> Some X' = selector (X (j+i))\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>R f i.\n       \\<lbrakk>R \\<in> Rs;\n        graph_homomorphism (fst R) (graph_of (X i)) f\\<rbrakk>\n       \\<Longrightarrow> \\<exists>j. extensible R (graph_of (X j)) f", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>R f i.\n       \\<lbrakk>R \\<in> Rs;\n        graph_homomorphism (fst R) (graph_of (X i)) f\\<rbrakk>\n       \\<Longrightarrow> \\<exists>j. extensible R (graph_of (X j)) f", "fix j"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>R f i.\n       \\<lbrakk>R \\<in> Rs;\n        graph_homomorphism (fst R) (graph_of (X i)) f\\<rbrakk>\n       \\<Longrightarrow> \\<exists>j. extensible R (graph_of (X j)) f", "let ?j = \"j+i\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>R f i.\n       \\<lbrakk>R \\<in> Rs;\n        graph_homomorphism (fst R) (graph_of (X i)) f\\<rbrakk>\n       \\<Longrightarrow> \\<exists>j. extensible R (graph_of (X j)) f", "have \"?j \\<ge> i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i \\<le> j + i", "by auto"], ["proof (state)\nthis:\n  i \\<le> j + i\n\ngoal (1 subgoal):\n 1. \\<And>R f i.\n       \\<lbrakk>R \\<in> Rs;\n        graph_homomorphism (fst R) (graph_of (X i)) f\\<rbrakk>\n       \\<Longrightarrow> \\<exists>j. extensible R (graph_of (X j)) f", "from subgraph_preserves_hom[OF chain[OF chn this] h]"], ["proof (chain)\npicking this:\n  graph_homomorphism (fst R) (graph_of (X (j + i))) f", "have h:\"graph_homomorphism (fst R) (graph_of (X ?j)) f\""], ["proof (prove)\nusing this:\n  graph_homomorphism (fst R) (graph_of (X (j + i))) f\n\ngoal (1 subgoal):\n 1. graph_homomorphism (fst R) (graph_of (X (j + i))) f", "."], ["proof (state)\nthis:\n  graph_homomorphism (fst R) (graph_of (X (j + i))) f\n\ngoal (1 subgoal):\n 1. \\<And>R f i.\n       \\<lbrakk>R \\<in> Rs;\n        graph_homomorphism (fst R) (graph_of (X i)) f\\<rbrakk>\n       \\<Longrightarrow> \\<exists>j. extensible R (graph_of (X j)) f", "have \"\\<not> extensible R (graph_of (X ?j)) f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> extensible R (graph_of (X (j + i))) f", "using a"], ["proof (prove)\nusing this:\n  \\<forall>j. \\<not> extensible R (graph_of (X j)) f\n\ngoal (1 subgoal):\n 1. \\<not> extensible R (graph_of (X (j + i))) f", "by blast"], ["proof (state)\nthis:\n  \\<not> extensible R (graph_of (X (j + i))) f\n\ngoal (1 subgoal):\n 1. \\<And>R f i.\n       \\<lbrakk>R \\<in> Rs;\n        graph_homomorphism (fst R) (graph_of (X i)) f\\<rbrakk>\n       \\<Longrightarrow> \\<exists>j. extensible R (graph_of (X j)) f", "with h Rs"], ["proof (chain)\npicking this:\n  graph_homomorphism (fst R) (graph_of (X (j + i))) f\n  R \\<in> Rs\n  \\<not> extensible R (graph_of (X (j + i))) f", "have wl:\"(nextMax (Range f),R,f) \\<in> worklist (X ?j) Rs\""], ["proof (prove)\nusing this:\n  graph_homomorphism (fst R) (graph_of (X (j + i))) f\n  R \\<in> Rs\n  \\<not> extensible R (graph_of (X (j + i))) f\n\ngoal (1 subgoal):\n 1. (nextMax (Range f), R, f) \\<in> worklist (X (j + i)) Rs", "unfolding worklist_def Let_def set_eq_iff"], ["proof (prove)\nusing this:\n  graph_homomorphism (fst R) (graph_of (X (j + i))) f\n  R \\<in> Rs\n  \\<not> extensible R (graph_of (X (j + i))) f\n\ngoal (1 subgoal):\n 1. (nextMax (Range f), R, f)\n    \\<in> {(N, R, f).\n           R \\<in> Rs \\<and>\n           graph_homomorphism (fst R) (graph_of (X (j + i))) f \\<and>\n           N = nextMax (Range f) \\<and>\n           \\<not> extensible R (graph_of (X (j + i))) f}", "by auto"], ["proof (state)\nthis:\n  (nextMax (Range f), R, f) \\<in> worklist (X (j + i)) Rs\n\ngoal (1 subgoal):\n 1. \\<And>R f i.\n       \\<lbrakk>R \\<in> Rs;\n        graph_homomorphism (fst R) (graph_of (X i)) f\\<rbrakk>\n       \\<Longrightarrow> \\<exists>j. extensible R (graph_of (X j)) f", "hence \"worklist (X ?j) Rs \\<noteq> {}\""], ["proof (prove)\nusing this:\n  (nextMax (Range f), R, f) \\<in> worklist (X (j + i)) Rs\n\ngoal (1 subgoal):\n 1. worklist (X (j + i)) Rs \\<noteq> {}", "by auto"], ["proof (state)\nthis:\n  worklist (X (j + i)) Rs \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<And>R f i.\n       \\<lbrakk>R \\<in> Rs;\n        graph_homomorphism (fst R) (graph_of (X i)) f\\<rbrakk>\n       \\<Longrightarrow> \\<exists>j. extensible R (graph_of (X j)) f", "with valid_selectorD[OF selector]"], ["proof (chain)\npicking this:\n  (worklist ?G Rs = {}) = (selector ?G = None)\n  selector ?G = Some (?R, ?f) \\<Longrightarrow> valid_selection Rs ?G ?R ?f\n  worklist (X (j + i)) Rs \\<noteq> {}", "obtain R' f'\n        where sel:\"Some (R',f') = selector (X ?j)\"\n                  \"valid_selection Rs (X ?j) R' f'\""], ["proof (prove)\nusing this:\n  (worklist ?G Rs = {}) = (selector ?G = None)\n  selector ?G = Some (?R, ?f) \\<Longrightarrow> valid_selection Rs ?G ?R ?f\n  worklist (X (j + i)) Rs \\<noteq> {}\n\ngoal (1 subgoal):\n 1. (\\<And>R' f'.\n        \\<lbrakk>Some (R', f') = selector (X (j + i));\n         valid_selection Rs (X (j + i)) R' f'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  Some (R', f') = selector (X (j + i))\n  valid_selection Rs (X (j + i)) R' f'\n\ngoal (1 subgoal):\n 1. \\<And>R f i.\n       \\<lbrakk>R \\<in> Rs;\n        graph_homomorphism (fst R) (graph_of (X i)) f\\<rbrakk>\n       \\<Longrightarrow> \\<exists>j. extensible R (graph_of (X j)) f", "hence max:\"(nextMax (Range f'), R', f') \\<in> worklist (X ?j) Rs\"\n                \"(\\<forall>(N, _)\\<in>worklist (X ?j) Rs. nextMax (Range f') \\<le> N)\""], ["proof (prove)\nusing this:\n  Some (R', f') = selector (X (j + i))\n  valid_selection Rs (X (j + i)) R' f'\n\ngoal (1 subgoal):\n 1. (nextMax (Range f'), R', f') \\<in> worklist (X (j + i)) Rs &&&\n    \\<forall>(N, uu_)\\<in>worklist (X (j + i)) Rs.\n       nextMax (Range f') \\<le> N", "unfolding valid_selection_def Let_def"], ["proof (prove)\nusing this:\n  Some (R', f') = selector (X (j + i))\n  (nextMax (Range f'), R', f') \\<in> worklist (X (j + i)) Rs \\<and>\n  (\\<forall>(N, uu_)\\<in>worklist (X (j + i)) Rs.\n      nextMax (Range f') \\<le> N) \\<and>\n  graph_rule R'\n\ngoal (1 subgoal):\n 1. (nextMax (Range f'), R', f') \\<in> worklist (X (j + i)) Rs &&&\n    \\<forall>(N, uu_)\\<in>worklist (X (j + i)) Rs.\n       nextMax (Range f') \\<le> N", "by auto"], ["proof (state)\nthis:\n  (nextMax (Range f'), R', f') \\<in> worklist (X (j + i)) Rs\n  \\<forall>(N, uu_)\\<in>worklist (X (j + i)) Rs. nextMax (Range f') \\<le> N\n\ngoal (1 subgoal):\n 1. \\<And>R f i.\n       \\<lbrakk>R \\<in> Rs;\n        graph_homomorphism (fst R) (graph_of (X i)) f\\<rbrakk>\n       \\<Longrightarrow> \\<exists>j. extensible R (graph_of (X j)) f", "with wl"], ["proof (chain)\npicking this:\n  (nextMax (Range f), R, f) \\<in> worklist (X (j + i)) Rs\n  (nextMax (Range f'), R', f') \\<in> worklist (X (j + i)) Rs\n  \\<forall>(N, uu_)\\<in>worklist (X (j + i)) Rs. nextMax (Range f') \\<le> N", "have \"nextMax (Range f') \\<le> N\""], ["proof (prove)\nusing this:\n  (nextMax (Range f), R, f) \\<in> worklist (X (j + i)) Rs\n  (nextMax (Range f'), R', f') \\<in> worklist (X (j + i)) Rs\n  \\<forall>(N, uu_)\\<in>worklist (X (j + i)) Rs. nextMax (Range f') \\<le> N\n\ngoal (1 subgoal):\n 1. nextMax (Range f') \\<le> N", "unfolding N_def"], ["proof (prove)\nusing this:\n  (nextMax (Range f), R, f) \\<in> worklist (X (j + i)) Rs\n  (nextMax (Range f'), R', f') \\<in> worklist (X (j + i)) Rs\n  \\<forall>(N, uu_)\\<in>worklist (X (j + i)) Rs. nextMax (Range f') \\<le> N\n\ngoal (1 subgoal):\n 1. nextMax (Range f') \\<le> nextMax (Range f)", "by auto"], ["proof (state)\nthis:\n  nextMax (Range f') \\<le> N\n\ngoal (1 subgoal):\n 1. \\<And>R f i.\n       \\<lbrakk>R \\<in> Rs;\n        graph_homomorphism (fst R) (graph_of (X i)) f\\<rbrakk>\n       \\<Longrightarrow> \\<exists>j. extensible R (graph_of (X j)) f", "with max(1)[unfolded worklist_def Let_def mem_Collect_eq prod.case] sel(1)"], ["proof (chain)\npicking this:\n  R' \\<in> Rs \\<and>\n  graph_homomorphism (fst R') (graph_of (X (j + i))) f' \\<and>\n  nextMax (Range f') = nextMax (Range f') \\<and>\n  \\<not> extensible R' (graph_of (X (j + i))) f'\n  Some (R', f') = selector (X (j + i))\n  nextMax (Range f') \\<le> N", "have \"\\<exists> X'. ?P X' j\""], ["proof (prove)\nusing this:\n  R' \\<in> Rs \\<and>\n  graph_homomorphism (fst R') (graph_of (X (j + i))) f' \\<and>\n  nextMax (Range f') = nextMax (Range f') \\<and>\n  \\<not> extensible R' (graph_of (X (j + i))) f'\n  Some (R', f') = selector (X (j + i))\n  nextMax (Range f') \\<le> N\n\ngoal (1 subgoal):\n 1. \\<exists>X'.\n       (fst X' \\<in> Rs \\<and>\n        graph_homomorphism (fst (fst X')) (graph_of (X (j + i)))\n         (snd X') \\<and>\n        nextMax (Range (snd X')) \\<le> N) \\<and>\n       Some X' = selector (X (j + i))", "by (metis fst_conv snd_conv)"], ["proof (state)\nthis:\n  \\<exists>X'.\n     (fst X' \\<in> Rs \\<and>\n      graph_homomorphism (fst (fst X')) (graph_of (X (j + i)))\n       (snd X') \\<and>\n      nextMax (Range (snd X')) \\<le> N) \\<and>\n     Some X' = selector (X (j + i))\n\ngoal (1 subgoal):\n 1. \\<And>R f i.\n       \\<lbrakk>R \\<in> Rs;\n        graph_homomorphism (fst R) (graph_of (X i)) f\\<rbrakk>\n       \\<Longrightarrow> \\<exists>j. extensible R (graph_of (X j)) f", "}"], ["proof (state)\nthis:\n  \\<exists>X'.\n     (fst X' \\<in> Rs \\<and>\n      graph_homomorphism (fst (fst X')) (graph_of (X (?j2 + i)))\n       (snd X') \\<and>\n      nextMax (Range (snd X')) \\<le> N) \\<and>\n     Some X' = selector (X (?j2 + i))\n\ngoal (1 subgoal):\n 1. \\<And>R f i.\n       \\<lbrakk>R \\<in> Rs;\n        graph_homomorphism (fst R) (graph_of (X i)) f\\<rbrakk>\n       \\<Longrightarrow> \\<exists>j. extensible R (graph_of (X j)) f", "then"], ["proof (chain)\npicking this:\n  \\<exists>X'.\n     (fst X' \\<in> Rs \\<and>\n      graph_homomorphism (fst (fst X')) (graph_of (X (?j2 + i)))\n       (snd X') \\<and>\n      nextMax (Range (snd X')) \\<le> N) \\<and>\n     Some X' = selector (X (?j2 + i))", "obtain ch where ch:\"\\<And> j. ?P (ch j) j\""], ["proof (prove)\nusing this:\n  \\<exists>X'.\n     (fst X' \\<in> Rs \\<and>\n      graph_homomorphism (fst (fst X')) (graph_of (X (?j2 + i)))\n       (snd X') \\<and>\n      nextMax (Range (snd X')) \\<le> N) \\<and>\n     Some X' = selector (X (?j2 + i))\n\ngoal (1 subgoal):\n 1. (\\<And>ch.\n        (\\<And>j.\n            (fst (ch j) \\<in> Rs \\<and>\n             graph_homomorphism (fst (fst (ch j))) (graph_of (X (j + i)))\n              (snd (ch j)) \\<and>\n             nextMax (Range (snd (ch j))) \\<le> N) \\<and>\n            Some (ch j) = selector (X (j + i))) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  (fst (ch ?j) \\<in> Rs \\<and>\n   graph_homomorphism (fst (fst (ch ?j))) (graph_of (X (?j + i)))\n    (snd (ch ?j)) \\<and>\n   nextMax (Range (snd (ch ?j))) \\<le> N) \\<and>\n  Some (ch ?j) = selector (X (?j + i))\n\ngoal (1 subgoal):\n 1. \\<And>R f i.\n       \\<lbrakk>R \\<in> Rs;\n        graph_homomorphism (fst R) (graph_of (X i)) f\\<rbrakk>\n       \\<Longrightarrow> \\<exists>j. extensible R (graph_of (X j)) f", "(* uses 'choice' internally *)"], ["proof (state)\nthis:\n  (fst (ch ?j) \\<in> Rs \\<and>\n   graph_homomorphism (fst (fst (ch ?j))) (graph_of (X (?j + i)))\n    (snd (ch ?j)) \\<and>\n   nextMax (Range (snd (ch ?j))) \\<le> N) \\<and>\n  Some (ch ?j) = selector (X (?j + i))\n\ngoal (1 subgoal):\n 1. \\<And>R f i.\n       \\<lbrakk>R \\<in> Rs;\n        graph_homomorphism (fst R) (graph_of (X i)) f\\<rbrakk>\n       \\<Longrightarrow> \\<exists>j. extensible R (graph_of (X j)) f", "have inj:\"inj ch\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj ch", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> UNIV; y \\<in> UNIV; ch x = ch y\\<rbrakk>\n       \\<Longrightarrow> x = y", "fix x y"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> UNIV; y \\<in> UNIV; ch x = ch y\\<rbrakk>\n       \\<Longrightarrow> x = y", "assume \"ch x = ch y\""], ["proof (state)\nthis:\n  ch x = ch y\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> UNIV; y \\<in> UNIV; ch x = ch y\\<rbrakk>\n       \\<Longrightarrow> x = y", "with ch[of x] ch[of y]"], ["proof (chain)\npicking this:\n  (fst (ch x) \\<in> Rs \\<and>\n   graph_homomorphism (fst (fst (ch x))) (graph_of (X (x + i)))\n    (snd (ch x)) \\<and>\n   nextMax (Range (snd (ch x))) \\<le> N) \\<and>\n  Some (ch x) = selector (X (x + i))\n  (fst (ch y) \\<in> Rs \\<and>\n   graph_homomorphism (fst (fst (ch y))) (graph_of (X (y + i)))\n    (snd (ch y)) \\<and>\n   nextMax (Range (snd (ch y))) \\<le> N) \\<and>\n  Some (ch y) = selector (X (y + i))\n  ch x = ch y", "have \"selector (X (x + i)) = Some (ch x)\" \"selector (X (y + i)) = Some (ch x)\""], ["proof (prove)\nusing this:\n  (fst (ch x) \\<in> Rs \\<and>\n   graph_homomorphism (fst (fst (ch x))) (graph_of (X (x + i)))\n    (snd (ch x)) \\<and>\n   nextMax (Range (snd (ch x))) \\<le> N) \\<and>\n  Some (ch x) = selector (X (x + i))\n  (fst (ch y) \\<in> Rs \\<and>\n   graph_homomorphism (fst (fst (ch y))) (graph_of (X (y + i)))\n    (snd (ch y)) \\<and>\n   nextMax (Range (snd (ch y))) \\<le> N) \\<and>\n  Some (ch y) = selector (X (y + i))\n  ch x = ch y\n\ngoal (1 subgoal):\n 1. selector (X (x + i)) = Some (ch x) &&&\n    selector (X (y + i)) = Some (ch x)", "by auto"], ["proof (state)\nthis:\n  selector (X (x + i)) = Some (ch x)\n  selector (X (y + i)) = Some (ch x)\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> UNIV; y \\<in> UNIV; ch x = ch y\\<rbrakk>\n       \\<Longrightarrow> x = y", "with makestep_makes_selector_inj[OF _ _ selector makestep chn]"], ["proof (chain)\npicking this:\n  \\<lbrakk>selector (X ?y) = Some (?R, ?f);\n   selector (X ?x) = Some (?R, ?f)\\<rbrakk>\n  \\<Longrightarrow> ?x = ?y\n  selector (X (x + i)) = Some (ch x)\n  selector (X (y + i)) = Some (ch x)", "have \"x + i = y + i\""], ["proof (prove)\nusing this:\n  \\<lbrakk>selector (X ?y) = Some (?R, ?f);\n   selector (X ?x) = Some (?R, ?f)\\<rbrakk>\n  \\<Longrightarrow> ?x = ?y\n  selector (X (x + i)) = Some (ch x)\n  selector (X (y + i)) = Some (ch x)\n\ngoal (1 subgoal):\n 1. x + i = y + i", "by (cases \"ch x\",metis (full_types))"], ["proof (state)\nthis:\n  x + i = y + i\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> UNIV; y \\<in> UNIV; ch x = ch y\\<rbrakk>\n       \\<Longrightarrow> x = y", "thus \"x = y\""], ["proof (prove)\nusing this:\n  x + i = y + i\n\ngoal (1 subgoal):\n 1. x = y", "by auto"], ["proof (state)\nthis:\n  x = y\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  inj ch\n\ngoal (1 subgoal):\n 1. \\<And>R f i.\n       \\<lbrakk>R \\<in> Rs;\n        graph_homomorphism (fst R) (graph_of (X i)) f\\<rbrakk>\n       \\<Longrightarrow> \\<exists>j. extensible R (graph_of (X j)) f", "have \"ch x \\<in> ?S\" for x"], ["proof (prove)\ngoal (1 subgoal):\n 1. ch x\n    \\<in> {(R, f).\n           \\<exists>j.\n              fst (R, f) \\<in> Rs \\<and>\n              graph_homomorphism (fst (fst (R, f))) (graph_of (X (j + i)))\n               (snd (R, f)) \\<and>\n              nextMax (Range (snd (R, f))) \\<le> N}", "using ch[of x]"], ["proof (prove)\nusing this:\n  (fst (ch x) \\<in> Rs \\<and>\n   graph_homomorphism (fst (fst (ch x))) (graph_of (X (x + i)))\n    (snd (ch x)) \\<and>\n   nextMax (Range (snd (ch x))) \\<le> N) \\<and>\n  Some (ch x) = selector (X (x + i))\n\ngoal (1 subgoal):\n 1. ch x\n    \\<in> {(R, f).\n           \\<exists>j.\n              fst (R, f) \\<in> Rs \\<and>\n              graph_homomorphism (fst (fst (R, f))) (graph_of (X (j + i)))\n               (snd (R, f)) \\<and>\n              nextMax (Range (snd (R, f))) \\<le> N}", "unfolding mem_Collect_eq"], ["proof (prove)\nusing this:\n  (fst (ch x) \\<in> Rs \\<and>\n   graph_homomorphism (fst (fst (ch x))) (graph_of (X (x + i)))\n    (snd (ch x)) \\<and>\n   nextMax (Range (snd (ch x))) \\<le> N) \\<and>\n  Some (ch x) = selector (X (x + i))\n\ngoal (1 subgoal):\n 1. case ch x of\n    (R, f) \\<Rightarrow>\n      \\<exists>j.\n         fst (R, f) \\<in> Rs \\<and>\n         graph_homomorphism (fst (fst (R, f))) (graph_of (X (j + i)))\n          (snd (R, f)) \\<and>\n         nextMax (Range (snd (R, f))) \\<le> N", "by(intro case_prodI2) metis"], ["proof (state)\nthis:\n  ch ?x\n  \\<in> {(R, f).\n         \\<exists>j.\n            fst (R, f) \\<in> Rs \\<and>\n            graph_homomorphism (fst (fst (R, f))) (graph_of (X (j + i)))\n             (snd (R, f)) \\<and>\n            nextMax (Range (snd (R, f))) \\<le> N}\n\ngoal (1 subgoal):\n 1. \\<And>R f i.\n       \\<lbrakk>R \\<in> Rs;\n        graph_homomorphism (fst R) (graph_of (X i)) f\\<rbrakk>\n       \\<Longrightarrow> \\<exists>j. extensible R (graph_of (X j)) f", "hence \"range ch \\<subseteq> ?S\""], ["proof (prove)\nusing this:\n  ch ?x\n  \\<in> {(R, f).\n         \\<exists>j.\n            fst (R, f) \\<in> Rs \\<and>\n            graph_homomorphism (fst (fst (R, f))) (graph_of (X (j + i)))\n             (snd (R, f)) \\<and>\n            nextMax (Range (snd (R, f))) \\<le> N}\n\ngoal (1 subgoal):\n 1. range ch\n    \\<subseteq> {(R, f).\n                 \\<exists>j.\n                    fst (R, f) \\<in> Rs \\<and>\n                    graph_homomorphism (fst (fst (R, f)))\n                     (graph_of (X (j + i))) (snd (R, f)) \\<and>\n                    nextMax (Range (snd (R, f))) \\<le> N}", "unfolding UNIV_def"], ["proof (prove)\nusing this:\n  ch ?x\n  \\<in> {(R, f).\n         \\<exists>j.\n            fst (R, f) \\<in> Rs \\<and>\n            graph_homomorphism (fst (fst (R, f))) (graph_of (X (j + i)))\n             (snd (R, f)) \\<and>\n            nextMax (Range (snd (R, f))) \\<le> N}\n\ngoal (1 subgoal):\n 1. ch ` {x. True}\n    \\<subseteq> {(R, f).\n                 \\<exists>j.\n                    fst (R, f) \\<in> Rs \\<and>\n                    graph_homomorphism (fst (fst (R, f)))\n                     (graph_of (X (j + i))) (snd (R, f)) \\<and>\n                    nextMax (Range (snd (R, f))) \\<le> N}", "by(rule image_Collect_subsetI)"], ["proof (state)\nthis:\n  range ch\n  \\<subseteq> {(R, f).\n               \\<exists>j.\n                  fst (R, f) \\<in> Rs \\<and>\n                  graph_homomorphism (fst (fst (R, f)))\n                   (graph_of (X (j + i))) (snd (R, f)) \\<and>\n                  nextMax (Range (snd (R, f))) \\<le> N}\n\ngoal (1 subgoal):\n 1. \\<And>R f i.\n       \\<lbrakk>R \\<in> Rs;\n        graph_homomorphism (fst R) (graph_of (X i)) f\\<rbrakk>\n       \\<Longrightarrow> \\<exists>j. extensible R (graph_of (X j)) f", "with infinite_iff_countable_subset inj"], ["proof (chain)\npicking this:\n  infinite ?S = (\\<exists>f. inj f \\<and> range f \\<subseteq> ?S)\n  inj ch\n  range ch\n  \\<subseteq> {(R, f).\n               \\<exists>j.\n                  fst (R, f) \\<in> Rs \\<and>\n                  graph_homomorphism (fst (fst (R, f)))\n                   (graph_of (X (j + i))) (snd (R, f)) \\<and>\n                  nextMax (Range (snd (R, f))) \\<le> N}", "have \"infinite ?S\""], ["proof (prove)\nusing this:\n  infinite ?S = (\\<exists>f. inj f \\<and> range f \\<subseteq> ?S)\n  inj ch\n  range ch\n  \\<subseteq> {(R, f).\n               \\<exists>j.\n                  fst (R, f) \\<in> Rs \\<and>\n                  graph_homomorphism (fst (fst (R, f)))\n                   (graph_of (X (j + i))) (snd (R, f)) \\<and>\n                  nextMax (Range (snd (R, f))) \\<le> N}\n\ngoal (1 subgoal):\n 1. infinite\n     {(R, f).\n      \\<exists>j.\n         fst (R, f) \\<in> Rs \\<and>\n         graph_homomorphism (fst (fst (R, f))) (graph_of (X (j + i)))\n          (snd (R, f)) \\<and>\n         nextMax (Range (snd (R, f))) \\<le> N}", "by blast"], ["proof (state)\nthis:\n  infinite\n   {(R, f).\n    \\<exists>j.\n       fst (R, f) \\<in> Rs \\<and>\n       graph_homomorphism (fst (fst (R, f))) (graph_of (X (j + i)))\n        (snd (R, f)) \\<and>\n       nextMax (Range (snd (R, f))) \\<le> N}\n\ngoal (1 subgoal):\n 1. \\<And>R f i.\n       \\<lbrakk>R \\<in> Rs;\n        graph_homomorphism (fst R) (graph_of (X i)) f\\<rbrakk>\n       \\<Longrightarrow> \\<exists>j. extensible R (graph_of (X j)) f", "with fin_S"], ["proof (chain)\npicking this:\n  finite\n   {(R, f).\n    \\<exists>j.\n       fst (R, f) \\<in> Rs \\<and>\n       graph_homomorphism (fst (fst (R, f))) (graph_of (X (j + i)))\n        (snd (R, f)) \\<and>\n       nextMax (Range (snd (R, f))) \\<le> N}\n  infinite\n   {(R, f).\n    \\<exists>j.\n       fst (R, f) \\<in> Rs \\<and>\n       graph_homomorphism (fst (fst (R, f))) (graph_of (X (j + i)))\n        (snd (R, f)) \\<and>\n       nextMax (Range (snd (R, f))) \\<le> N}", "have \"False\""], ["proof (prove)\nusing this:\n  finite\n   {(R, f).\n    \\<exists>j.\n       fst (R, f) \\<in> Rs \\<and>\n       graph_homomorphism (fst (fst (R, f))) (graph_of (X (j + i)))\n        (snd (R, f)) \\<and>\n       nextMax (Range (snd (R, f))) \\<le> N}\n  infinite\n   {(R, f).\n    \\<exists>j.\n       fst (R, f) \\<in> Rs \\<and>\n       graph_homomorphism (fst (fst (R, f))) (graph_of (X (j + i)))\n        (snd (R, f)) \\<and>\n       nextMax (Range (snd (R, f))) \\<le> N}\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<And>R f i.\n       \\<lbrakk>R \\<in> Rs;\n        graph_homomorphism (fst R) (graph_of (X i)) f\\<rbrakk>\n       \\<Longrightarrow> \\<exists>j. extensible R (graph_of (X j)) f", "}"], ["proof (state)\nthis:\n  \\<forall>j. \\<not> extensible R (graph_of (X j)) f \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. \\<And>R f i.\n       \\<lbrakk>R \\<in> Rs;\n        graph_homomorphism (fst R) (graph_of (X i)) f\\<rbrakk>\n       \\<Longrightarrow> \\<exists>j. extensible R (graph_of (X j)) f", "thus \"\\<exists>j. extensible R (graph_of (X j)) f\""], ["proof (prove)\nusing this:\n  \\<forall>j. \\<not> extensible R (graph_of (X j)) f \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. \\<exists>j. extensible R (graph_of (X j)) f", "by auto"], ["proof (state)\nthis:\n  \\<exists>j. extensible R (graph_of (X j)) f\n\ngoal:\nNo subgoals!", "qed"], ["", "fun mk_chain where\n  \"mk_chain sel Rs init 0 = init\" |\n  \"mk_chain sel Rs init (Suc n) = mk_chain sel Rs (make_step sel init) n\""], ["", "lemma mk_chain:\n  \"\\<forall> i. mk_chain sel Rs init (Suc i) = make_step sel (mk_chain sel Rs init i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i.\n       mk_chain sel Rs init (Suc i) = make_step sel (mk_chain sel Rs init i)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i.\n       mk_chain sel Rs init (Suc i) = make_step sel (mk_chain sel Rs init i)", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i.\n       mk_chain sel Rs init (Suc i) = make_step sel (mk_chain sel Rs init i)", "show \"mk_chain sel Rs init (Suc i) = make_step sel (mk_chain sel Rs init i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mk_chain sel Rs init (Suc i) = make_step sel (mk_chain sel Rs init i)", "by (induct i arbitrary:init,auto)"], ["proof (state)\nthis:\n  mk_chain sel Rs init (Suc i) = make_step sel (mk_chain sel Rs init i)\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>Algorithm 1, abstractly.\\<close>"], ["", "abbreviation the_lcg where\n\"the_lcg sel Rs init \\<equiv> chain_sup (\\<lambda>i. graph_of (mk_chain sel Rs init i))\""], ["", "lemma mk_chain_edges:\n  assumes \"valid_selector Rules sel\"\n          \"\\<Union> ((edges o snd) ` Rules) \\<subseteq> L \\<times> UNIV\"\n          \"edges (graph_of G) \\<subseteq> L \\<times> UNIV\"\n  shows \"edges (graph_of (mk_chain sel Rules G i)) \\<subseteq> L \\<times> UNIV\""], ["proof (prove)\ngoal (1 subgoal):\n 1. edges (graph_of (mk_chain sel Rules G i)) \\<subseteq> L \\<times> UNIV", "using assms(3)"], ["proof (prove)\nusing this:\n  edges (graph_of G) \\<subseteq> L \\<times> UNIV\n\ngoal (1 subgoal):\n 1. edges (graph_of (mk_chain sel Rules G i)) \\<subseteq> L \\<times> UNIV", "proof(induct i arbitrary:G)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>G.\n       edges (graph_of G) \\<subseteq> L \\<times> UNIV \\<Longrightarrow>\n       edges (graph_of (mk_chain sel Rules G 0)) \\<subseteq> L \\<times> UNIV\n 2. \\<And>i G.\n       \\<lbrakk>\\<And>G.\n                   edges (graph_of G)\n                   \\<subseteq> L \\<times> UNIV \\<Longrightarrow>\n                   edges (graph_of (mk_chain sel Rules G i))\n                   \\<subseteq> L \\<times> UNIV;\n        edges (graph_of G) \\<subseteq> L \\<times> UNIV\\<rbrakk>\n       \\<Longrightarrow> edges (graph_of (mk_chain sel Rules G (Suc i)))\n                         \\<subseteq> L \\<times> UNIV", "case 0"], ["proof (state)\nthis:\n  edges (graph_of G) \\<subseteq> L \\<times> UNIV\n\ngoal (2 subgoals):\n 1. \\<And>G.\n       edges (graph_of G) \\<subseteq> L \\<times> UNIV \\<Longrightarrow>\n       edges (graph_of (mk_chain sel Rules G 0)) \\<subseteq> L \\<times> UNIV\n 2. \\<And>i G.\n       \\<lbrakk>\\<And>G.\n                   edges (graph_of G)\n                   \\<subseteq> L \\<times> UNIV \\<Longrightarrow>\n                   edges (graph_of (mk_chain sel Rules G i))\n                   \\<subseteq> L \\<times> UNIV;\n        edges (graph_of G) \\<subseteq> L \\<times> UNIV\\<rbrakk>\n       \\<Longrightarrow> edges (graph_of (mk_chain sel Rules G (Suc i)))\n                         \\<subseteq> L \\<times> UNIV", "then"], ["proof (chain)\npicking this:\n  edges (graph_of G) \\<subseteq> L \\<times> UNIV", "show ?case"], ["proof (prove)\nusing this:\n  edges (graph_of G) \\<subseteq> L \\<times> UNIV\n\ngoal (1 subgoal):\n 1. edges (graph_of (mk_chain sel Rules G 0)) \\<subseteq> L \\<times> UNIV", "using assms(2)"], ["proof (prove)\nusing this:\n  edges (graph_of G) \\<subseteq> L \\<times> UNIV\n  \\<Union> ((edges \\<circ> snd) ` Rules) \\<subseteq> L \\<times> UNIV\n\ngoal (1 subgoal):\n 1. edges (graph_of (mk_chain sel Rules G 0)) \\<subseteq> L \\<times> UNIV", "by auto"], ["proof (state)\nthis:\n  edges (graph_of (mk_chain sel Rules G 0)) \\<subseteq> L \\<times> UNIV\n\ngoal (1 subgoal):\n 1. \\<And>i G.\n       \\<lbrakk>\\<And>G.\n                   edges (graph_of G)\n                   \\<subseteq> L \\<times> UNIV \\<Longrightarrow>\n                   edges (graph_of (mk_chain sel Rules G i))\n                   \\<subseteq> L \\<times> UNIV;\n        edges (graph_of G) \\<subseteq> L \\<times> UNIV\\<rbrakk>\n       \\<Longrightarrow> edges (graph_of (mk_chain sel Rules G (Suc i)))\n                         \\<subseteq> L \\<times> UNIV", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i G.\n       \\<lbrakk>\\<And>G.\n                   edges (graph_of G)\n                   \\<subseteq> L \\<times> UNIV \\<Longrightarrow>\n                   edges (graph_of (mk_chain sel Rules G i))\n                   \\<subseteq> L \\<times> UNIV;\n        edges (graph_of G) \\<subseteq> L \\<times> UNIV\\<rbrakk>\n       \\<Longrightarrow> edges (graph_of (mk_chain sel Rules G (Suc i)))\n                         \\<subseteq> L \\<times> UNIV", "case (Suc i G)"], ["proof (state)\nthis:\n  edges (graph_of ?G) \\<subseteq> L \\<times> UNIV \\<Longrightarrow>\n  edges (graph_of (mk_chain sel Rules ?G i)) \\<subseteq> L \\<times> UNIV\n  edges (graph_of G) \\<subseteq> L \\<times> UNIV\n\ngoal (1 subgoal):\n 1. \\<And>i G.\n       \\<lbrakk>\\<And>G.\n                   edges (graph_of G)\n                   \\<subseteq> L \\<times> UNIV \\<Longrightarrow>\n                   edges (graph_of (mk_chain sel Rules G i))\n                   \\<subseteq> L \\<times> UNIV;\n        edges (graph_of G) \\<subseteq> L \\<times> UNIV\\<rbrakk>\n       \\<Longrightarrow> edges (graph_of (mk_chain sel Rules G (Suc i)))\n                         \\<subseteq> L \\<times> UNIV", "hence \"edges (graph_of (make_step sel G)) \\<subseteq> L \\<times> UNIV\""], ["proof (prove)\nusing this:\n  edges (graph_of ?G) \\<subseteq> L \\<times> UNIV \\<Longrightarrow>\n  edges (graph_of (mk_chain sel Rules ?G i)) \\<subseteq> L \\<times> UNIV\n  edges (graph_of G) \\<subseteq> L \\<times> UNIV\n\ngoal (1 subgoal):\n 1. edges (graph_of (make_step sel G)) \\<subseteq> L \\<times> UNIV", "proof(cases \"sel G\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>G.\n                edges (graph_of G)\n                \\<subseteq> L \\<times> UNIV \\<Longrightarrow>\n                edges (graph_of (mk_chain sel Rules G i))\n                \\<subseteq> L \\<times> UNIV;\n     edges (graph_of G) \\<subseteq> L \\<times> UNIV; sel G = None\\<rbrakk>\n    \\<Longrightarrow> edges (graph_of (make_step sel G))\n                      \\<subseteq> L \\<times> UNIV\n 2. \\<And>a.\n       \\<lbrakk>\\<And>G.\n                   edges (graph_of G)\n                   \\<subseteq> L \\<times> UNIV \\<Longrightarrow>\n                   edges (graph_of (mk_chain sel Rules G i))\n                   \\<subseteq> L \\<times> UNIV;\n        edges (graph_of G) \\<subseteq> L \\<times> UNIV;\n        sel G = Some a\\<rbrakk>\n       \\<Longrightarrow> edges (graph_of (make_step sel G))\n                         \\<subseteq> L \\<times> UNIV", "case None"], ["proof (state)\nthis:\n  sel G = None\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>G.\n                edges (graph_of G)\n                \\<subseteq> L \\<times> UNIV \\<Longrightarrow>\n                edges (graph_of (mk_chain sel Rules G i))\n                \\<subseteq> L \\<times> UNIV;\n     edges (graph_of G) \\<subseteq> L \\<times> UNIV; sel G = None\\<rbrakk>\n    \\<Longrightarrow> edges (graph_of (make_step sel G))\n                      \\<subseteq> L \\<times> UNIV\n 2. \\<And>a.\n       \\<lbrakk>\\<And>G.\n                   edges (graph_of G)\n                   \\<subseteq> L \\<times> UNIV \\<Longrightarrow>\n                   edges (graph_of (mk_chain sel Rules G i))\n                   \\<subseteq> L \\<times> UNIV;\n        edges (graph_of G) \\<subseteq> L \\<times> UNIV;\n        sel G = Some a\\<rbrakk>\n       \\<Longrightarrow> edges (graph_of (make_step sel G))\n                         \\<subseteq> L \\<times> UNIV", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. edges (graph_of (make_step sel G)) \\<subseteq> L \\<times> UNIV", "unfolding None make_step_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. edges\n     (graph_of\n       (case None of None \\<Rightarrow> G\n        | Some (R, f) \\<Rightarrow>\n            let g = extend (fst G) R f\n            in (max (fst G) (nextMax (Range g)),\n                on_triple g `` edges (snd R) \\<union> snd G)))\n    \\<subseteq> L \\<times> UNIV", "using Suc"], ["proof (prove)\nusing this:\n  edges (graph_of ?G) \\<subseteq> L \\<times> UNIV \\<Longrightarrow>\n  edges (graph_of (mk_chain sel Rules ?G i)) \\<subseteq> L \\<times> UNIV\n  edges (graph_of G) \\<subseteq> L \\<times> UNIV\n\ngoal (1 subgoal):\n 1. edges\n     (graph_of\n       (case None of None \\<Rightarrow> G\n        | Some (R, f) \\<Rightarrow>\n            let g = extend (fst G) R f\n            in (max (fst G) (nextMax (Range g)),\n                on_triple g `` edges (snd R) \\<union> snd G)))\n    \\<subseteq> L \\<times> UNIV", "by auto"], ["proof (state)\nthis:\n  edges (graph_of (make_step sel G)) \\<subseteq> L \\<times> UNIV\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>\\<And>G.\n                   edges (graph_of G)\n                   \\<subseteq> L \\<times> UNIV \\<Longrightarrow>\n                   edges (graph_of (mk_chain sel Rules G i))\n                   \\<subseteq> L \\<times> UNIV;\n        edges (graph_of G) \\<subseteq> L \\<times> UNIV;\n        sel G = Some a\\<rbrakk>\n       \\<Longrightarrow> edges (graph_of (make_step sel G))\n                         \\<subseteq> L \\<times> UNIV", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>\\<And>G.\n                   edges (graph_of G)\n                   \\<subseteq> L \\<times> UNIV \\<Longrightarrow>\n                   edges (graph_of (mk_chain sel Rules G i))\n                   \\<subseteq> L \\<times> UNIV;\n        edges (graph_of G) \\<subseteq> L \\<times> UNIV;\n        sel G = Some a\\<rbrakk>\n       \\<Longrightarrow> edges (graph_of (make_step sel G))\n                         \\<subseteq> L \\<times> UNIV", "case (Some a)"], ["proof (state)\nthis:\n  sel G = Some a\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>\\<And>G.\n                   edges (graph_of G)\n                   \\<subseteq> L \\<times> UNIV \\<Longrightarrow>\n                   edges (graph_of (mk_chain sel Rules G i))\n                   \\<subseteq> L \\<times> UNIV;\n        edges (graph_of G) \\<subseteq> L \\<times> UNIV;\n        sel G = Some a\\<rbrakk>\n       \\<Longrightarrow> edges (graph_of (make_step sel G))\n                         \\<subseteq> L \\<times> UNIV", "then"], ["proof (chain)\npicking this:\n  sel G = Some a", "obtain R f where Some:\"sel G = Some (R, f)\""], ["proof (prove)\nusing this:\n  sel G = Some a\n\ngoal (1 subgoal):\n 1. (\\<And>R f.\n        sel G = Some (R, f) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  sel G = Some (R, f)\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>\\<And>G.\n                   edges (graph_of G)\n                   \\<subseteq> L \\<times> UNIV \\<Longrightarrow>\n                   edges (graph_of (mk_chain sel Rules G i))\n                   \\<subseteq> L \\<times> UNIV;\n        edges (graph_of G) \\<subseteq> L \\<times> UNIV;\n        sel G = Some a\\<rbrakk>\n       \\<Longrightarrow> edges (graph_of (make_step sel G))\n                         \\<subseteq> L \\<times> UNIV", "hence \"(a, x, y) \\<in> edges (snd R) \\<Longrightarrow> a \\<in> L\" for a x y"], ["proof (prove)\nusing this:\n  sel G = Some (R, f)\n\ngoal (1 subgoal):\n 1. (a, x, y) \\<in> edges (snd R) \\<Longrightarrow> a \\<in> L", "using assms(2) valid_selectorD(2)[OF assms(1) Some]"], ["proof (prove)\nusing this:\n  sel G = Some (R, f)\n  \\<Union> ((edges \\<circ> snd) ` Rules) \\<subseteq> L \\<times> UNIV\n  valid_selection Rules G R f\n\ngoal (1 subgoal):\n 1. (a, x, y) \\<in> edges (snd R) \\<Longrightarrow> a \\<in> L", "unfolding valid_selection_def Let_def worklist_def"], ["proof (prove)\nusing this:\n  sel G = Some (R, f)\n  \\<Union> ((edges \\<circ> snd) ` Rules) \\<subseteq> L \\<times> UNIV\n  (nextMax (Range f), R, f)\n  \\<in> {(N, R, f).\n         R \\<in> Rules \\<and>\n         graph_homomorphism (fst R) (graph_of G) f \\<and>\n         N = nextMax (Range f) \\<and>\n         \\<not> extensible R (graph_of G) f} \\<and>\n  (\\<forall>(N, uu_)\n            \\<in>{(N, R, f).\n                  R \\<in> Rules \\<and>\n                  graph_homomorphism (fst R) (graph_of G) f \\<and>\n                  N = nextMax (Range f) \\<and>\n                  \\<not> extensible R (graph_of G) f}.\n      nextMax (Range f) \\<le> N) \\<and>\n  graph_rule R\n\ngoal (1 subgoal):\n 1. (a, x, y) \\<in> edges (snd R) \\<Longrightarrow> a \\<in> L", "by auto"], ["proof (state)\nthis:\n  (?a, ?x, ?y) \\<in> edges (snd R) \\<Longrightarrow> ?a \\<in> L\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>\\<And>G.\n                   edges (graph_of G)\n                   \\<subseteq> L \\<times> UNIV \\<Longrightarrow>\n                   edges (graph_of (mk_chain sel Rules G i))\n                   \\<subseteq> L \\<times> UNIV;\n        edges (graph_of G) \\<subseteq> L \\<times> UNIV;\n        sel G = Some a\\<rbrakk>\n       \\<Longrightarrow> edges (graph_of (make_step sel G))\n                         \\<subseteq> L \\<times> UNIV", "then"], ["proof (chain)\npicking this:\n  (?a, ?x, ?y) \\<in> edges (snd R) \\<Longrightarrow> ?a \\<in> L", "show ?thesis"], ["proof (prove)\nusing this:\n  (?a, ?x, ?y) \\<in> edges (snd R) \\<Longrightarrow> ?a \\<in> L\n\ngoal (1 subgoal):\n 1. edges (graph_of (make_step sel G)) \\<subseteq> L \\<times> UNIV", "unfolding Some make_step_def Let_def"], ["proof (prove)\nusing this:\n  (?a, ?x, ?y) \\<in> edges (snd R) \\<Longrightarrow> ?a \\<in> L\n\ngoal (1 subgoal):\n 1. edges\n     (graph_of\n       (case Some (R, f) of None \\<Rightarrow> G\n        | Some (R, f) \\<Rightarrow>\n            (max (fst G) (nextMax (Range (extend (fst G) R f))),\n             on_triple (extend (fst G) R f) `` edges (snd R) \\<union>\n             snd G)))\n    \\<subseteq> L \\<times> UNIV", "using Suc"], ["proof (prove)\nusing this:\n  (?a, ?x, ?y) \\<in> edges (snd R) \\<Longrightarrow> ?a \\<in> L\n  edges (graph_of ?G) \\<subseteq> L \\<times> UNIV \\<Longrightarrow>\n  edges (graph_of (mk_chain sel Rules ?G i)) \\<subseteq> L \\<times> UNIV\n  edges (graph_of G) \\<subseteq> L \\<times> UNIV\n\ngoal (1 subgoal):\n 1. edges\n     (graph_of\n       (case Some (R, f) of None \\<Rightarrow> G\n        | Some (R, f) \\<Rightarrow>\n            (max (fst G) (nextMax (Range (extend (fst G) R f))),\n             on_triple (extend (fst G) R f) `` edges (snd R) \\<union>\n             snd G)))\n    \\<subseteq> L \\<times> UNIV", "by auto"], ["proof (state)\nthis:\n  edges (graph_of (make_step sel G)) \\<subseteq> L \\<times> UNIV\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  edges (graph_of (make_step sel G)) \\<subseteq> L \\<times> UNIV\n\ngoal (1 subgoal):\n 1. \\<And>i G.\n       \\<lbrakk>\\<And>G.\n                   edges (graph_of G)\n                   \\<subseteq> L \\<times> UNIV \\<Longrightarrow>\n                   edges (graph_of (mk_chain sel Rules G i))\n                   \\<subseteq> L \\<times> UNIV;\n        edges (graph_of G) \\<subseteq> L \\<times> UNIV\\<rbrakk>\n       \\<Longrightarrow> edges (graph_of (mk_chain sel Rules G (Suc i)))\n                         \\<subseteq> L \\<times> UNIV", "thus ?case"], ["proof (prove)\nusing this:\n  edges (graph_of (make_step sel G)) \\<subseteq> L \\<times> UNIV\n\ngoal (1 subgoal):\n 1. edges (graph_of (mk_chain sel Rules G (Suc i)))\n    \\<subseteq> L \\<times> UNIV", "unfolding mk_chain.simps"], ["proof (prove)\nusing this:\n  edges (graph_of (make_step sel G)) \\<subseteq> L \\<times> UNIV\n\ngoal (1 subgoal):\n 1. edges (graph_of (mk_chain sel Rules (make_step sel G) i))\n    \\<subseteq> L \\<times> UNIV", "by(rule Suc)"], ["proof (state)\nthis:\n  edges (graph_of (mk_chain sel Rules G (Suc i)))\n  \\<subseteq> L \\<times> UNIV\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma the_lcg_edges:\n  assumes \"valid_selector Rules sel\"\n          \"fst ` (\\<Union> ((edges o snd) ` Rules)) \\<subseteq> L\" (is \"fst `?fR \\<subseteq> _\")\n          \"fst ` snd G \\<subseteq> L\"\n  shows \"fst ` edges (the_lcg sel Rules G) \\<subseteq> L\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst ` edges (the_lcg sel Rules G) \\<subseteq> L", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. fst ` edges (the_lcg sel Rules G) \\<subseteq> L", "from assms"], ["proof (chain)\npicking this:\n  valid_selector Rules sel\n  fst ` \\<Union> ((edges \\<circ> snd) ` Rules) \\<subseteq> L\n  fst ` snd G \\<subseteq> L", "have \"fst `?fR \\<times> UNIV \\<subseteq> L \\<times> UNIV\" \"fst `(edges (graph_of G)) \\<times> UNIV \\<subseteq> L \\<times> UNIV\""], ["proof (prove)\nusing this:\n  valid_selector Rules sel\n  fst ` \\<Union> ((edges \\<circ> snd) ` Rules) \\<subseteq> L\n  fst ` snd G \\<subseteq> L\n\ngoal (1 subgoal):\n 1. fst ` \\<Union> ((edges \\<circ> snd) ` Rules) \\<times> UNIV\n    \\<subseteq> L \\<times> UNIV &&&\n    fst ` edges (graph_of G) \\<times> UNIV \\<subseteq> L \\<times> UNIV", "by auto"], ["proof (state)\nthis:\n  fst ` \\<Union> ((edges \\<circ> snd) ` Rules) \\<times> UNIV\n  \\<subseteq> L \\<times> UNIV\n  fst ` edges (graph_of G) \\<times> UNIV \\<subseteq> L \\<times> UNIV\n\ngoal (1 subgoal):\n 1. fst ` edges (the_lcg sel Rules G) \\<subseteq> L", "hence \"(\\<Union> ((edges o snd) ` Rules)) \\<subseteq> L \\<times> UNIV\" \"edges (graph_of G) \\<subseteq> L \\<times> UNIV\""], ["proof (prove)\nusing this:\n  fst ` \\<Union> ((edges \\<circ> snd) ` Rules) \\<times> UNIV\n  \\<subseteq> L \\<times> UNIV\n  fst ` edges (graph_of G) \\<times> UNIV \\<subseteq> L \\<times> UNIV\n\ngoal (1 subgoal):\n 1. \\<Union> ((edges \\<circ> snd) ` Rules) \\<subseteq> L \\<times> UNIV &&&\n    edges (graph_of G) \\<subseteq> L \\<times> UNIV", "using fst_UNIV[of ?fR] fst_UNIV[of \"(edges (graph_of G))\"]"], ["proof (prove)\nusing this:\n  fst ` \\<Union> ((edges \\<circ> snd) ` Rules) \\<times> UNIV\n  \\<subseteq> L \\<times> UNIV\n  fst ` edges (graph_of G) \\<times> UNIV \\<subseteq> L \\<times> UNIV\n  \\<Union> ((edges \\<circ> snd) ` Rules)\n  \\<subseteq> fst ` \\<Union> ((edges \\<circ> snd) ` Rules) \\<times> UNIV\n  edges (graph_of G) \\<subseteq> fst ` edges (graph_of G) \\<times> UNIV\n\ngoal (1 subgoal):\n 1. \\<Union> ((edges \\<circ> snd) ` Rules) \\<subseteq> L \\<times> UNIV &&&\n    edges (graph_of G) \\<subseteq> L \\<times> UNIV", "by blast+"], ["proof (state)\nthis:\n  \\<Union> ((edges \\<circ> snd) ` Rules) \\<subseteq> L \\<times> UNIV\n  edges (graph_of G) \\<subseteq> L \\<times> UNIV\n\ngoal (1 subgoal):\n 1. fst ` edges (the_lcg sel Rules G) \\<subseteq> L", "note assms = assms(1) this"], ["proof (state)\nthis:\n  valid_selector Rules sel\n  \\<Union> ((edges \\<circ> snd) ` Rules) \\<subseteq> L \\<times> UNIV\n  edges (graph_of G) \\<subseteq> L \\<times> UNIV\n\ngoal (1 subgoal):\n 1. fst ` edges (the_lcg sel Rules G) \\<subseteq> L", "have \"edges (graph_of (mk_chain sel Rules G i)) \\<subseteq> L \\<times> UNIV\" for i"], ["proof (prove)\ngoal (1 subgoal):\n 1. edges (graph_of (mk_chain sel Rules G i)) \\<subseteq> L \\<times> UNIV", "using mk_chain_edges[OF assms,unfolded Times_subset_cancel2[OF UNIV_I]]"], ["proof (prove)\nusing this:\n  edges (graph_of (mk_chain sel Rules G ?i)) \\<subseteq> L \\<times> UNIV\n\ngoal (1 subgoal):\n 1. edges (graph_of (mk_chain sel Rules G i)) \\<subseteq> L \\<times> UNIV", "."], ["proof (state)\nthis:\n  edges (graph_of (mk_chain sel Rules G ?i1)) \\<subseteq> L \\<times> UNIV\n\ngoal (1 subgoal):\n 1. fst ` edges (the_lcg sel Rules G) \\<subseteq> L", "hence \"edges (the_lcg sel Rules G) \\<subseteq> L \\<times> UNIV\""], ["proof (prove)\nusing this:\n  edges (graph_of (mk_chain sel Rules G ?i1)) \\<subseteq> L \\<times> UNIV\n\ngoal (1 subgoal):\n 1. edges (the_lcg sel Rules G) \\<subseteq> L \\<times> UNIV", "unfolding chain_sup_def"], ["proof (prove)\nusing this:\n  edges (graph_of (mk_chain sel Rules G ?i1)) \\<subseteq> L \\<times> UNIV\n\ngoal (1 subgoal):\n 1. edges\n     (LG (\\<Union>i. edges (graph_of (mk_chain sel Rules G i)))\n       (\\<Union>i. vertices (graph_of (mk_chain sel Rules G i))))\n    \\<subseteq> L \\<times> UNIV", "by auto"], ["proof (state)\nthis:\n  edges (the_lcg sel Rules G) \\<subseteq> L \\<times> UNIV\n\ngoal (1 subgoal):\n 1. fst ` edges (the_lcg sel Rules G) \\<subseteq> L", "thus ?thesis"], ["proof (prove)\nusing this:\n  edges (the_lcg sel Rules G) \\<subseteq> L \\<times> UNIV\n\ngoal (1 subgoal):\n 1. fst ` edges (the_lcg sel Rules G) \\<subseteq> L", "by auto"], ["proof (state)\nthis:\n  fst ` edges (the_lcg sel Rules G) \\<subseteq> L\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>Lemma 9.\\<close>"], ["", "lemma lcg_through_make_step:\nassumes \"finite Rs\" \"set_of_graph_rules Rs\" \"graph (graph_of init)\"\n        \"valid_selector Rs sel\"\n  shows \"least_consequence_graph t Rs (graph_of init) (the_lcg sel Rs init)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. least_consequence_graph t Rs (graph_of init) (the_lcg sel Rs init)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. least_consequence_graph t Rs (graph_of init) (the_lcg sel Rs init)", "from assms"], ["proof (chain)\npicking this:\n  finite Rs\n  set_of_graph_rules Rs\n  graph (graph_of init)\n  valid_selector Rs sel", "have gr:\"graph (graph_of (mk_chain sel Rs init 0))\""], ["proof (prove)\nusing this:\n  finite Rs\n  set_of_graph_rules Rs\n  graph (graph_of init)\n  valid_selector Rs sel\n\ngoal (1 subgoal):\n 1. graph (graph_of (mk_chain sel Rs init 0))", "by auto"], ["proof (state)\nthis:\n  graph (graph_of (mk_chain sel Rs init 0))\n\ngoal (1 subgoal):\n 1. least_consequence_graph t Rs (graph_of init) (the_lcg sel Rs init)", "note assms = assms(1,2) this mk_chain assms(4)"], ["proof (state)\nthis:\n  finite Rs\n  set_of_graph_rules Rs\n  graph (graph_of (mk_chain sel Rs init 0))\n  \\<forall>i.\n     mk_chain ?sel ?Rs ?init (Suc i) =\n     make_step ?sel (mk_chain ?sel ?Rs ?init i)\n  valid_selector Rs sel\n\ngoal (1 subgoal):\n 1. least_consequence_graph t Rs (graph_of init) (the_lcg sel Rs init)", "from set_of_graph_rulesD[OF assms(2)]"], ["proof (chain)\npicking this:\n  ?R \\<in> Rs \\<Longrightarrow> finite_graph (fst ?R)\n  ?R \\<in> Rs \\<Longrightarrow> finite_graph (snd ?R)\n  ?R \\<in> Rs \\<Longrightarrow> subgraph (fst ?R) (snd ?R)", "have \"(\\<And>R. R \\<in> Rs \\<Longrightarrow> subgraph (fst R) (snd R) \\<and> finite_graph (fst R))\""], ["proof (prove)\nusing this:\n  ?R \\<in> Rs \\<Longrightarrow> finite_graph (fst ?R)\n  ?R \\<in> Rs \\<Longrightarrow> finite_graph (snd ?R)\n  ?R \\<in> Rs \\<Longrightarrow> subgraph (fst ?R) (snd ?R)\n\ngoal (1 subgoal):\n 1. \\<And>R.\n       R \\<in> Rs \\<Longrightarrow>\n       subgraph (fst R) (snd R) \\<and> finite_graph (fst R)", "by auto"], ["proof (state)\nthis:\n  ?R \\<in> Rs \\<Longrightarrow>\n  subgraph (fst ?R) (snd ?R) \\<and> finite_graph (fst ?R)\n\ngoal (1 subgoal):\n 1. least_consequence_graph t Rs (graph_of init) (the_lcg sel Rs init)", "from fair_chain_impl_consequence_graph[OF fair_through_make_step[OF assms] this]\n       wpc_simpl[OF WPC_through_make_step(1)[OF assms(2-)],THEN wpc_least]"], ["proof (chain)\npicking this:\n  (\\<And>R. R \\<in> Rs \\<Longrightarrow> R \\<in> Rs) \\<Longrightarrow>\n  consequence_graph Rs (the_lcg sel Rs init)\n  least ?t Rs (graph_of (mk_chain sel Rs init 0)) (the_lcg sel Rs init)", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<And>R. R \\<in> Rs \\<Longrightarrow> R \\<in> Rs) \\<Longrightarrow>\n  consequence_graph Rs (the_lcg sel Rs init)\n  least ?t Rs (graph_of (mk_chain sel Rs init 0)) (the_lcg sel Rs init)\n\ngoal (1 subgoal):\n 1. least_consequence_graph t Rs (graph_of init) (the_lcg sel Rs init)", "unfolding least_consequence_graph_def"], ["proof (prove)\nusing this:\n  (\\<And>R. R \\<in> Rs \\<Longrightarrow> R \\<in> Rs) \\<Longrightarrow>\n  consequence_graph Rs (the_lcg sel Rs init)\n  least ?t Rs (graph_of (mk_chain sel Rs init 0)) (the_lcg sel Rs init)\n\ngoal (1 subgoal):\n 1. consequence_graph Rs (the_lcg sel Rs init) \\<and>\n    least t Rs (graph_of init) (the_lcg sel Rs init)", "by auto"], ["proof (state)\nthis:\n  least_consequence_graph t Rs (graph_of init) (the_lcg sel Rs init)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}