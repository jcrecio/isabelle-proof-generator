{"file_name": "/home/qj213/afp-2021-10-22/thys/Graph_Saturation/RuleSemanticsConnection.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Graph_Saturation", "problem_names": ["lemma inv_translationI4[intro]:\n  assumes \"finite r\" \"\\<And> x. x < card r \\<Longrightarrow> x \\<in> r\"\n  shows \"r={0..<card r}\"", "lemma inv_translationI[intro!]:\nassumes \"finite r\" \"\\<And> x. x < card r \\<Longrightarrow> x \\<in> r\" \"0 \\<in> r\" \"Suc 0 \\<in> r\"\nshows \"inv_translation r\"", "lemma verts_in_translation_finite[intro]:\n\"finite (vertices (translation X))\"\n\"finite (edges (translation X))\"\n\"0 \\<in> vertices (translation X)\"\n\"Suc 0 \\<in> vertices (translation X)\"", "lemma inv_tr_card_min:\n  assumes \"inv_translation r\"\n  shows \"card r \\<ge> 2\"", "lemma verts_in_translation[intro]:\n\"inv_translation (vertices (translation X))\"", "lemma translation_graph[intro]:\n\"graph (translation X)\"", "lemma graph_rule_translation[intro]: (* remark at the end of Def 15 *)\n\"graph_rule (translation X, translation (A_Int X Y))\"", "lemma graph_hom_translation[intro]:\n  \"graph_homomorphism (LG {} {0,1}) (translation X) (Id_on {0,1})\"", "lemma translation_right_to_left:\n  assumes f:\"graph_homomorphism (translation e) G f\" \"(0, x) \\<in> f\" \"(1, y) \\<in> f\"\n  shows \"(x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk>\"", "lemma translation_homomorphism:\n  assumes \"graph_homomorphism (translation e) G f\"\n  shows \"f `` {0} \\<times> f `` {1} \\<subseteq> :G:\\<lbrakk>e\\<rbrakk>\" \":G:\\<lbrakk>e\\<rbrakk> \\<noteq> {}\"", "lemma translation:\n  assumes \"graph G\"\n  shows \"(x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk> \\<longleftrightarrow> (\\<exists> f. graph_homomorphism (translation e) G f \\<and> (0,x) \\<in> f \\<and> (1,y) \\<in> f)\"\n(is \"?lhs = ?rhs\")", "lemma maintained_holds_iff:\n  assumes \"graph G\"\n  shows \"maintained (translation e\\<^sub>L,translation (A_Int e\\<^sub>L e\\<^sub>R)) G \\<longleftrightarrow> G \\<Turnstile> e\\<^sub>L \\<sqsubseteq> e\\<^sub>R\" (is \"?rhs = ?lhs\")", "lemma translation_self[intro]:\n\"(0, 1) \\<in> :translation e:\\<lbrakk>e\\<rbrakk>\"", "lemma maintained_holds[intro]:\n  assumes \":G:\\<lbrakk>e\\<^sub>L\\<rbrakk> \\<subseteq> :G:\\<lbrakk>e\\<^sub>R\\<rbrakk>\" \n  shows \"maintained (transl_rule (e\\<^sub>L \\<sqsubseteq> e\\<^sub>R)) G\"", "lemma maintained_holds_subset_iff[simp]:\n  assumes \"graph G\"\n  shows \"maintained (transl_rule (e\\<^sub>L \\<sqsubseteq> e\\<^sub>R)) G \\<longleftrightarrow> (:G:\\<lbrakk>e\\<^sub>L\\<rbrakk> \\<subseteq> :G:\\<lbrakk>e\\<^sub>R\\<rbrakk>)\""], "translations": [["", "lemma inv_translationI4[intro]:\n  assumes \"finite r\" \"\\<And> x. x < card r \\<Longrightarrow> x \\<in> r\"\n  shows \"r={0..<card r}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r = {0..<card r}", "proof(insert assms,induct \"card r\" arbitrary:r)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>r.\n       \\<lbrakk>0 = card r; finite r;\n        \\<And>x. x < card r \\<Longrightarrow> x \\<in> r\\<rbrakk>\n       \\<Longrightarrow> r = {0..<card r}\n 2. \\<And>x r.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>x = card r; finite r;\n                    \\<And>x. x < card r \\<Longrightarrow> x \\<in> r\\<rbrakk>\n                   \\<Longrightarrow> r = {0..<card r};\n        Suc x = card r; finite r;\n        \\<And>x. x < card r \\<Longrightarrow> x \\<in> r\\<rbrakk>\n       \\<Longrightarrow> r = {0..<card r}", "case (Suc x r)"], ["proof (state)\nthis:\n  \\<lbrakk>x = card ?r; finite ?r;\n   \\<And>x. x < card ?r \\<Longrightarrow> x \\<in> ?r\\<rbrakk>\n  \\<Longrightarrow> ?r = {0..<card ?r}\n  Suc x = card r\n  finite r\n  ?x < card r \\<Longrightarrow> ?x \\<in> r\n\ngoal (2 subgoals):\n 1. \\<And>r.\n       \\<lbrakk>0 = card r; finite r;\n        \\<And>x. x < card r \\<Longrightarrow> x \\<in> r\\<rbrakk>\n       \\<Longrightarrow> r = {0..<card r}\n 2. \\<And>x r.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>x = card r; finite r;\n                    \\<And>x. x < card r \\<Longrightarrow> x \\<in> r\\<rbrakk>\n                   \\<Longrightarrow> r = {0..<card r};\n        Suc x = card r; finite r;\n        \\<And>x. x < card r \\<Longrightarrow> x \\<in> r\\<rbrakk>\n       \\<Longrightarrow> r = {0..<card r}", "let ?r = \"r - {x}\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>r.\n       \\<lbrakk>0 = card r; finite r;\n        \\<And>x. x < card r \\<Longrightarrow> x \\<in> r\\<rbrakk>\n       \\<Longrightarrow> r = {0..<card r}\n 2. \\<And>x r.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>x = card r; finite r;\n                    \\<And>x. x < card r \\<Longrightarrow> x \\<in> r\\<rbrakk>\n                   \\<Longrightarrow> r = {0..<card r};\n        Suc x = card r; finite r;\n        \\<And>x. x < card r \\<Longrightarrow> x \\<in> r\\<rbrakk>\n       \\<Longrightarrow> r = {0..<card r}", "from Suc"], ["proof (chain)\npicking this:\n  \\<lbrakk>x = card ?r; finite ?r;\n   \\<And>x. x < card ?r \\<Longrightarrow> x \\<in> ?r\\<rbrakk>\n  \\<Longrightarrow> ?r = {0..<card ?r}\n  Suc x = card r\n  finite r\n  ?x < card r \\<Longrightarrow> ?x \\<in> r", "have p:\"x = card ?r\" \"finite ?r\""], ["proof (prove)\nusing this:\n  \\<lbrakk>x = card ?r; finite ?r;\n   \\<And>x. x < card ?r \\<Longrightarrow> x \\<in> ?r\\<rbrakk>\n  \\<Longrightarrow> ?r = {0..<card ?r}\n  Suc x = card r\n  finite r\n  ?x < card r \\<Longrightarrow> ?x \\<in> r\n\ngoal (1 subgoal):\n 1. x = card (r - {x}) &&& finite (r - {x})", "by auto"], ["proof (state)\nthis:\n  x = card (r - {x})\n  finite (r - {x})\n\ngoal (2 subgoals):\n 1. \\<And>r.\n       \\<lbrakk>0 = card r; finite r;\n        \\<And>x. x < card r \\<Longrightarrow> x \\<in> r\\<rbrakk>\n       \\<Longrightarrow> r = {0..<card r}\n 2. \\<And>x r.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>x = card r; finite r;\n                    \\<And>x. x < card r \\<Longrightarrow> x \\<in> r\\<rbrakk>\n                   \\<Longrightarrow> r = {0..<card r};\n        Suc x = card r; finite r;\n        \\<And>x. x < card r \\<Longrightarrow> x \\<in> r\\<rbrakk>\n       \\<Longrightarrow> r = {0..<card r}", "have p2:\"xa < card ?r \\<Longrightarrow> xa \\<in> ?r\" for xa"], ["proof (prove)\ngoal (1 subgoal):\n 1. xa < card (r - {x}) \\<Longrightarrow> xa \\<in> r - {x}", "using Suc.prems(2)[of xa] Suc.hyps(2)"], ["proof (prove)\nusing this:\n  xa < card r \\<Longrightarrow> xa \\<in> r\n  Suc x = card r\n\ngoal (1 subgoal):\n 1. xa < card (r - {x}) \\<Longrightarrow> xa \\<in> r - {x}", "unfolding p(1)[symmetric]"], ["proof (prove)\nusing this:\n  xa < card r \\<Longrightarrow> xa \\<in> r\n  Suc x = card r\n\ngoal (1 subgoal):\n 1. xa < x \\<Longrightarrow> xa \\<in> r - {x}", "by auto"], ["proof (state)\nthis:\n  ?xa < card (r - {x}) \\<Longrightarrow> ?xa \\<in> r - {x}\n\ngoal (2 subgoals):\n 1. \\<And>r.\n       \\<lbrakk>0 = card r; finite r;\n        \\<And>x. x < card r \\<Longrightarrow> x \\<in> r\\<rbrakk>\n       \\<Longrightarrow> r = {0..<card r}\n 2. \\<And>x r.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>x = card r; finite r;\n                    \\<And>x. x < card r \\<Longrightarrow> x \\<in> r\\<rbrakk>\n                   \\<Longrightarrow> r = {0..<card r};\n        Suc x = card r; finite r;\n        \\<And>x. x < card r \\<Longrightarrow> x \\<in> r\\<rbrakk>\n       \\<Longrightarrow> r = {0..<card r}", "from Suc.hyps(1)[OF p p2]"], ["proof (chain)\npicking this:\n  (\\<And>xa.\n      xa < card (r - {x}) \\<Longrightarrow>\n      xa < card (r - {x})) \\<Longrightarrow>\n  r - {x} = {0..<card (r - {x})}", "have \"?r={0..<card ?r}\""], ["proof (prove)\nusing this:\n  (\\<And>xa.\n      xa < card (r - {x}) \\<Longrightarrow>\n      xa < card (r - {x})) \\<Longrightarrow>\n  r - {x} = {0..<card (r - {x})}\n\ngoal (1 subgoal):\n 1. r - {x} = {0..<card (r - {x})}", "."], ["proof (state)\nthis:\n  r - {x} = {0..<card (r - {x})}\n\ngoal (2 subgoals):\n 1. \\<And>r.\n       \\<lbrakk>0 = card r; finite r;\n        \\<And>x. x < card r \\<Longrightarrow> x \\<in> r\\<rbrakk>\n       \\<Longrightarrow> r = {0..<card r}\n 2. \\<And>x r.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>x = card r; finite r;\n                    \\<And>x. x < card r \\<Longrightarrow> x \\<in> r\\<rbrakk>\n                   \\<Longrightarrow> r = {0..<card r};\n        Suc x = card r; finite r;\n        \\<And>x. x < card r \\<Longrightarrow> x \\<in> r\\<rbrakk>\n       \\<Longrightarrow> r = {0..<card r}", "with Suc.hyps(2) Suc.prems(1)"], ["proof (chain)\npicking this:\n  Suc x = card r\n  finite r\n  r - {x} = {0..<card (r - {x})}", "show ?case"], ["proof (prove)\nusing this:\n  Suc x = card r\n  finite r\n  r - {x} = {0..<card (r - {x})}\n\ngoal (1 subgoal):\n 1. r = {0..<card r}", "by (metis atLeast0_lessThan_Suc card_Diff_singleton_if insert_Diff n_not_Suc_n p(1))"], ["proof (state)\nthis:\n  r = {0..<card r}\n\ngoal (1 subgoal):\n 1. \\<And>r.\n       \\<lbrakk>0 = card r; finite r;\n        \\<And>x. x < card r \\<Longrightarrow> x \\<in> r\\<rbrakk>\n       \\<Longrightarrow> r = {0..<card r}", "qed auto"], ["", "lemma inv_translationI[intro!]:\nassumes \"finite r\" \"\\<And> x. x < card r \\<Longrightarrow> x \\<in> r\" \"0 \\<in> r\" \"Suc 0 \\<in> r\"\nshows \"inv_translation r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inv_translation r", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. inv_translation r", "from inv_translationI4[OF assms(1,2),symmetric]"], ["proof (chain)\npicking this:\n  (\\<And>x. x < card r \\<Longrightarrow> x < card r) \\<Longrightarrow>\n  {0..<card r} = r", "have c:\" {0..<card r} = r \""], ["proof (prove)\nusing this:\n  (\\<And>x. x < card r \\<Longrightarrow> x < card r) \\<Longrightarrow>\n  {0..<card r} = r\n\ngoal (1 subgoal):\n 1. {0..<card r} = r", "by auto"], ["proof (state)\nthis:\n  {0..<card r} = r\n\ngoal (1 subgoal):\n 1. inv_translation r", "from assms(3,4)"], ["proof (chain)\npicking this:\n  0 \\<in> r\n  Suc 0 \\<in> r", "have \"{0,1} \\<subseteq> r\""], ["proof (prove)\nusing this:\n  0 \\<in> r\n  Suc 0 \\<in> r\n\ngoal (1 subgoal):\n 1. {0, 1} \\<subseteq> r", "by auto"], ["proof (state)\nthis:\n  {0, 1} \\<subseteq> r\n\ngoal (1 subgoal):\n 1. inv_translation r", "with c inv_translation_def"], ["proof (chain)\npicking this:\n  {0..<card r} = r\n  inv_translation ?r \\<equiv>\n  {0..<card ?r} = ?r \\<and> {0, 1} \\<subseteq> ?r\n  {0, 1} \\<subseteq> r", "show ?thesis"], ["proof (prove)\nusing this:\n  {0..<card r} = r\n  inv_translation ?r \\<equiv>\n  {0..<card ?r} = ?r \\<and> {0, 1} \\<subseteq> ?r\n  {0, 1} \\<subseteq> r\n\ngoal (1 subgoal):\n 1. inv_translation r", "by auto"], ["proof (state)\nthis:\n  inv_translation r\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma verts_in_translation_finite[intro]:\n\"finite (vertices (translation X))\"\n\"finite (edges (translation X))\"\n\"0 \\<in> vertices (translation X)\"\n\"Suc 0 \\<in> vertices (translation X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (finite (vertices (translation X)) &&&\n     finite (edges (translation X))) &&&\n    0 \\<in> vertices (translation X) &&&\n    Suc 0 \\<in> vertices (translation X)", "proof(atomize(full),induction X)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>X1 X2.\n       \\<lbrakk>(finite (vertices (translation X1)) \\<and>\n                 finite (edges (translation X1))) \\<and>\n                0 \\<in> vertices (translation X1) \\<and>\n                Suc 0 \\<in> vertices (translation X1);\n        (finite (vertices (translation X2)) \\<and>\n         finite (edges (translation X2))) \\<and>\n        0 \\<in> vertices (translation X2) \\<and>\n        Suc 0 \\<in> vertices (translation X2)\\<rbrakk>\n       \\<Longrightarrow> (finite\n                           (vertices (translation (A_Int X1 X2))) \\<and>\n                          finite (edges (translation (A_Int X1 X2)))) \\<and>\n                         0 \\<in> vertices (translation (A_Int X1 X2)) \\<and>\n                         Suc 0 \\<in> vertices (translation (A_Int X1 X2))\n 2. \\<And>X1 X2.\n       \\<lbrakk>(finite (vertices (translation X1)) \\<and>\n                 finite (edges (translation X1))) \\<and>\n                0 \\<in> vertices (translation X1) \\<and>\n                Suc 0 \\<in> vertices (translation X1);\n        (finite (vertices (translation X2)) \\<and>\n         finite (edges (translation X2))) \\<and>\n        0 \\<in> vertices (translation X2) \\<and>\n        Suc 0 \\<in> vertices (translation X2)\\<rbrakk>\n       \\<Longrightarrow> (finite\n                           (vertices (translation (A_Cmp X1 X2))) \\<and>\n                          finite (edges (translation (A_Cmp X1 X2)))) \\<and>\n                         0 \\<in> vertices (translation (A_Cmp X1 X2)) \\<and>\n                         Suc 0 \\<in> vertices (translation (A_Cmp X1 X2))\n 3. \\<And>X.\n       (finite (vertices (translation X)) \\<and>\n        finite (edges (translation X))) \\<and>\n       0 \\<in> vertices (translation X) \\<and>\n       Suc 0 \\<in> vertices (translation X) \\<Longrightarrow>\n       (finite (vertices (translation (A_Cnv X))) \\<and>\n        finite (edges (translation (A_Cnv X)))) \\<and>\n       0 \\<in> vertices (translation (A_Cnv X)) \\<and>\n       Suc 0 \\<in> vertices (translation (A_Cnv X))\n 4. \\<And>x.\n       (finite (vertices (translation (A_Lbl x))) \\<and>\n        finite (edges (translation (A_Lbl x)))) \\<and>\n       0 \\<in> vertices (translation (A_Lbl x)) \\<and>\n       Suc 0 \\<in> vertices (translation (A_Lbl x))", "case (A_Int X1 X2)"], ["proof (state)\nthis:\n  (finite (vertices (translation X1)) \\<and>\n   finite (edges (translation X1))) \\<and>\n  0 \\<in> vertices (translation X1) \\<and>\n  Suc 0 \\<in> vertices (translation X1)\n  (finite (vertices (translation X2)) \\<and>\n   finite (edges (translation X2))) \\<and>\n  0 \\<in> vertices (translation X2) \\<and>\n  Suc 0 \\<in> vertices (translation X2)\n\ngoal (4 subgoals):\n 1. \\<And>X1 X2.\n       \\<lbrakk>(finite (vertices (translation X1)) \\<and>\n                 finite (edges (translation X1))) \\<and>\n                0 \\<in> vertices (translation X1) \\<and>\n                Suc 0 \\<in> vertices (translation X1);\n        (finite (vertices (translation X2)) \\<and>\n         finite (edges (translation X2))) \\<and>\n        0 \\<in> vertices (translation X2) \\<and>\n        Suc 0 \\<in> vertices (translation X2)\\<rbrakk>\n       \\<Longrightarrow> (finite\n                           (vertices (translation (A_Int X1 X2))) \\<and>\n                          finite (edges (translation (A_Int X1 X2)))) \\<and>\n                         0 \\<in> vertices (translation (A_Int X1 X2)) \\<and>\n                         Suc 0 \\<in> vertices (translation (A_Int X1 X2))\n 2. \\<And>X1 X2.\n       \\<lbrakk>(finite (vertices (translation X1)) \\<and>\n                 finite (edges (translation X1))) \\<and>\n                0 \\<in> vertices (translation X1) \\<and>\n                Suc 0 \\<in> vertices (translation X1);\n        (finite (vertices (translation X2)) \\<and>\n         finite (edges (translation X2))) \\<and>\n        0 \\<in> vertices (translation X2) \\<and>\n        Suc 0 \\<in> vertices (translation X2)\\<rbrakk>\n       \\<Longrightarrow> (finite\n                           (vertices (translation (A_Cmp X1 X2))) \\<and>\n                          finite (edges (translation (A_Cmp X1 X2)))) \\<and>\n                         0 \\<in> vertices (translation (A_Cmp X1 X2)) \\<and>\n                         Suc 0 \\<in> vertices (translation (A_Cmp X1 X2))\n 3. \\<And>X.\n       (finite (vertices (translation X)) \\<and>\n        finite (edges (translation X))) \\<and>\n       0 \\<in> vertices (translation X) \\<and>\n       Suc 0 \\<in> vertices (translation X) \\<Longrightarrow>\n       (finite (vertices (translation (A_Cnv X))) \\<and>\n        finite (edges (translation (A_Cnv X)))) \\<and>\n       0 \\<in> vertices (translation (A_Cnv X)) \\<and>\n       Suc 0 \\<in> vertices (translation (A_Cnv X))\n 4. \\<And>x.\n       (finite (vertices (translation (A_Lbl x))) \\<and>\n        finite (edges (translation (A_Lbl x)))) \\<and>\n       0 \\<in> vertices (translation (A_Lbl x)) \\<and>\n       Suc 0 \\<in> vertices (translation (A_Lbl x))", "then"], ["proof (chain)\npicking this:\n  (finite (vertices (translation X1)) \\<and>\n   finite (edges (translation X1))) \\<and>\n  0 \\<in> vertices (translation X1) \\<and>\n  Suc 0 \\<in> vertices (translation X1)\n  (finite (vertices (translation X2)) \\<and>\n   finite (edges (translation X2))) \\<and>\n  0 \\<in> vertices (translation X2) \\<and>\n  Suc 0 \\<in> vertices (translation X2)", "show ?case"], ["proof (prove)\nusing this:\n  (finite (vertices (translation X1)) \\<and>\n   finite (edges (translation X1))) \\<and>\n  0 \\<in> vertices (translation X1) \\<and>\n  Suc 0 \\<in> vertices (translation X1)\n  (finite (vertices (translation X2)) \\<and>\n   finite (edges (translation X2))) \\<and>\n  0 \\<in> vertices (translation X2) \\<and>\n  Suc 0 \\<in> vertices (translation X2)\n\ngoal (1 subgoal):\n 1. (finite (vertices (translation (A_Int X1 X2))) \\<and>\n     finite (edges (translation (A_Int X1 X2)))) \\<and>\n    0 \\<in> vertices (translation (A_Int X1 X2)) \\<and>\n    Suc 0 \\<in> vertices (translation (A_Int X1 X2))", "by (auto simp:Let_def)"], ["proof (state)\nthis:\n  (finite (vertices (translation (A_Int X1 X2))) \\<and>\n   finite (edges (translation (A_Int X1 X2)))) \\<and>\n  0 \\<in> vertices (translation (A_Int X1 X2)) \\<and>\n  Suc 0 \\<in> vertices (translation (A_Int X1 X2))\n\ngoal (3 subgoals):\n 1. \\<And>X1 X2.\n       \\<lbrakk>(finite (vertices (translation X1)) \\<and>\n                 finite (edges (translation X1))) \\<and>\n                0 \\<in> vertices (translation X1) \\<and>\n                Suc 0 \\<in> vertices (translation X1);\n        (finite (vertices (translation X2)) \\<and>\n         finite (edges (translation X2))) \\<and>\n        0 \\<in> vertices (translation X2) \\<and>\n        Suc 0 \\<in> vertices (translation X2)\\<rbrakk>\n       \\<Longrightarrow> (finite\n                           (vertices (translation (A_Cmp X1 X2))) \\<and>\n                          finite (edges (translation (A_Cmp X1 X2)))) \\<and>\n                         0 \\<in> vertices (translation (A_Cmp X1 X2)) \\<and>\n                         Suc 0 \\<in> vertices (translation (A_Cmp X1 X2))\n 2. \\<And>X.\n       (finite (vertices (translation X)) \\<and>\n        finite (edges (translation X))) \\<and>\n       0 \\<in> vertices (translation X) \\<and>\n       Suc 0 \\<in> vertices (translation X) \\<Longrightarrow>\n       (finite (vertices (translation (A_Cnv X))) \\<and>\n        finite (edges (translation (A_Cnv X)))) \\<and>\n       0 \\<in> vertices (translation (A_Cnv X)) \\<and>\n       Suc 0 \\<in> vertices (translation (A_Cnv X))\n 3. \\<And>x.\n       (finite (vertices (translation (A_Lbl x))) \\<and>\n        finite (edges (translation (A_Lbl x)))) \\<and>\n       0 \\<in> vertices (translation (A_Lbl x)) \\<and>\n       Suc 0 \\<in> vertices (translation (A_Lbl x))", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>X1 X2.\n       \\<lbrakk>(finite (vertices (translation X1)) \\<and>\n                 finite (edges (translation X1))) \\<and>\n                0 \\<in> vertices (translation X1) \\<and>\n                Suc 0 \\<in> vertices (translation X1);\n        (finite (vertices (translation X2)) \\<and>\n         finite (edges (translation X2))) \\<and>\n        0 \\<in> vertices (translation X2) \\<and>\n        Suc 0 \\<in> vertices (translation X2)\\<rbrakk>\n       \\<Longrightarrow> (finite\n                           (vertices (translation (A_Cmp X1 X2))) \\<and>\n                          finite (edges (translation (A_Cmp X1 X2)))) \\<and>\n                         0 \\<in> vertices (translation (A_Cmp X1 X2)) \\<and>\n                         Suc 0 \\<in> vertices (translation (A_Cmp X1 X2))\n 2. \\<And>X.\n       (finite (vertices (translation X)) \\<and>\n        finite (edges (translation X))) \\<and>\n       0 \\<in> vertices (translation X) \\<and>\n       Suc 0 \\<in> vertices (translation X) \\<Longrightarrow>\n       (finite (vertices (translation (A_Cnv X))) \\<and>\n        finite (edges (translation (A_Cnv X)))) \\<and>\n       0 \\<in> vertices (translation (A_Cnv X)) \\<and>\n       Suc 0 \\<in> vertices (translation (A_Cnv X))\n 3. \\<And>x.\n       (finite (vertices (translation (A_Lbl x))) \\<and>\n        finite (edges (translation (A_Lbl x)))) \\<and>\n       0 \\<in> vertices (translation (A_Lbl x)) \\<and>\n       Suc 0 \\<in> vertices (translation (A_Lbl x))", "case (A_Cmp X1 X2)"], ["proof (state)\nthis:\n  (finite (vertices (translation X1)) \\<and>\n   finite (edges (translation X1))) \\<and>\n  0 \\<in> vertices (translation X1) \\<and>\n  Suc 0 \\<in> vertices (translation X1)\n  (finite (vertices (translation X2)) \\<and>\n   finite (edges (translation X2))) \\<and>\n  0 \\<in> vertices (translation X2) \\<and>\n  Suc 0 \\<in> vertices (translation X2)\n\ngoal (3 subgoals):\n 1. \\<And>X1 X2.\n       \\<lbrakk>(finite (vertices (translation X1)) \\<and>\n                 finite (edges (translation X1))) \\<and>\n                0 \\<in> vertices (translation X1) \\<and>\n                Suc 0 \\<in> vertices (translation X1);\n        (finite (vertices (translation X2)) \\<and>\n         finite (edges (translation X2))) \\<and>\n        0 \\<in> vertices (translation X2) \\<and>\n        Suc 0 \\<in> vertices (translation X2)\\<rbrakk>\n       \\<Longrightarrow> (finite\n                           (vertices (translation (A_Cmp X1 X2))) \\<and>\n                          finite (edges (translation (A_Cmp X1 X2)))) \\<and>\n                         0 \\<in> vertices (translation (A_Cmp X1 X2)) \\<and>\n                         Suc 0 \\<in> vertices (translation (A_Cmp X1 X2))\n 2. \\<And>X.\n       (finite (vertices (translation X)) \\<and>\n        finite (edges (translation X))) \\<and>\n       0 \\<in> vertices (translation X) \\<and>\n       Suc 0 \\<in> vertices (translation X) \\<Longrightarrow>\n       (finite (vertices (translation (A_Cnv X))) \\<and>\n        finite (edges (translation (A_Cnv X)))) \\<and>\n       0 \\<in> vertices (translation (A_Cnv X)) \\<and>\n       Suc 0 \\<in> vertices (translation (A_Cnv X))\n 3. \\<And>x.\n       (finite (vertices (translation (A_Lbl x))) \\<and>\n        finite (edges (translation (A_Lbl x)))) \\<and>\n       0 \\<in> vertices (translation (A_Lbl x)) \\<and>\n       Suc 0 \\<in> vertices (translation (A_Lbl x))", "then"], ["proof (chain)\npicking this:\n  (finite (vertices (translation X1)) \\<and>\n   finite (edges (translation X1))) \\<and>\n  0 \\<in> vertices (translation X1) \\<and>\n  Suc 0 \\<in> vertices (translation X1)\n  (finite (vertices (translation X2)) \\<and>\n   finite (edges (translation X2))) \\<and>\n  0 \\<in> vertices (translation X2) \\<and>\n  Suc 0 \\<in> vertices (translation X2)", "show ?case"], ["proof (prove)\nusing this:\n  (finite (vertices (translation X1)) \\<and>\n   finite (edges (translation X1))) \\<and>\n  0 \\<in> vertices (translation X1) \\<and>\n  Suc 0 \\<in> vertices (translation X1)\n  (finite (vertices (translation X2)) \\<and>\n   finite (edges (translation X2))) \\<and>\n  0 \\<in> vertices (translation X2) \\<and>\n  Suc 0 \\<in> vertices (translation X2)\n\ngoal (1 subgoal):\n 1. (finite (vertices (translation (A_Cmp X1 X2))) \\<and>\n     finite (edges (translation (A_Cmp X1 X2)))) \\<and>\n    0 \\<in> vertices (translation (A_Cmp X1 X2)) \\<and>\n    Suc 0 \\<in> vertices (translation (A_Cmp X1 X2))", "by (auto simp:Let_def)"], ["proof (state)\nthis:\n  (finite (vertices (translation (A_Cmp X1 X2))) \\<and>\n   finite (edges (translation (A_Cmp X1 X2)))) \\<and>\n  0 \\<in> vertices (translation (A_Cmp X1 X2)) \\<and>\n  Suc 0 \\<in> vertices (translation (A_Cmp X1 X2))\n\ngoal (2 subgoals):\n 1. \\<And>X.\n       (finite (vertices (translation X)) \\<and>\n        finite (edges (translation X))) \\<and>\n       0 \\<in> vertices (translation X) \\<and>\n       Suc 0 \\<in> vertices (translation X) \\<Longrightarrow>\n       (finite (vertices (translation (A_Cnv X))) \\<and>\n        finite (edges (translation (A_Cnv X)))) \\<and>\n       0 \\<in> vertices (translation (A_Cnv X)) \\<and>\n       Suc 0 \\<in> vertices (translation (A_Cnv X))\n 2. \\<And>x.\n       (finite (vertices (translation (A_Lbl x))) \\<and>\n        finite (edges (translation (A_Lbl x)))) \\<and>\n       0 \\<in> vertices (translation (A_Lbl x)) \\<and>\n       Suc 0 \\<in> vertices (translation (A_Lbl x))", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>X.\n       (finite (vertices (translation X)) \\<and>\n        finite (edges (translation X))) \\<and>\n       0 \\<in> vertices (translation X) \\<and>\n       Suc 0 \\<in> vertices (translation X) \\<Longrightarrow>\n       (finite (vertices (translation (A_Cnv X))) \\<and>\n        finite (edges (translation (A_Cnv X)))) \\<and>\n       0 \\<in> vertices (translation (A_Cnv X)) \\<and>\n       Suc 0 \\<in> vertices (translation (A_Cnv X))\n 2. \\<And>x.\n       (finite (vertices (translation (A_Lbl x))) \\<and>\n        finite (edges (translation (A_Lbl x)))) \\<and>\n       0 \\<in> vertices (translation (A_Lbl x)) \\<and>\n       Suc 0 \\<in> vertices (translation (A_Lbl x))", "have [simp]:\"{x::nat. x < 2} = {0,1}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {x. x < 2} = {0, 1}", "by auto"], ["proof (state)\nthis:\n  {x. x < 2} = {0, 1}\n\ngoal (2 subgoals):\n 1. \\<And>X.\n       (finite (vertices (translation X)) \\<and>\n        finite (edges (translation X))) \\<and>\n       0 \\<in> vertices (translation X) \\<and>\n       Suc 0 \\<in> vertices (translation X) \\<Longrightarrow>\n       (finite (vertices (translation (A_Cnv X))) \\<and>\n        finite (edges (translation (A_Cnv X)))) \\<and>\n       0 \\<in> vertices (translation (A_Cnv X)) \\<and>\n       Suc 0 \\<in> vertices (translation (A_Cnv X))\n 2. \\<And>x.\n       (finite (vertices (translation (A_Lbl x))) \\<and>\n        finite (edges (translation (A_Lbl x)))) \\<and>\n       0 \\<in> vertices (translation (A_Lbl x)) \\<and>\n       Suc 0 \\<in> vertices (translation (A_Lbl x))", "case (A_Cnv X)"], ["proof (state)\nthis:\n  (finite (vertices (translation X)) \\<and>\n   finite (edges (translation X))) \\<and>\n  0 \\<in> vertices (translation X) \\<and>\n  Suc 0 \\<in> vertices (translation X)\n\ngoal (2 subgoals):\n 1. \\<And>X.\n       (finite (vertices (translation X)) \\<and>\n        finite (edges (translation X))) \\<and>\n       0 \\<in> vertices (translation X) \\<and>\n       Suc 0 \\<in> vertices (translation X) \\<Longrightarrow>\n       (finite (vertices (translation (A_Cnv X))) \\<and>\n        finite (edges (translation (A_Cnv X)))) \\<and>\n       0 \\<in> vertices (translation (A_Cnv X)) \\<and>\n       Suc 0 \\<in> vertices (translation (A_Cnv X))\n 2. \\<And>x.\n       (finite (vertices (translation (A_Lbl x))) \\<and>\n        finite (edges (translation (A_Lbl x)))) \\<and>\n       0 \\<in> vertices (translation (A_Lbl x)) \\<and>\n       Suc 0 \\<in> vertices (translation (A_Lbl x))", "then"], ["proof (chain)\npicking this:\n  (finite (vertices (translation X)) \\<and>\n   finite (edges (translation X))) \\<and>\n  0 \\<in> vertices (translation X) \\<and>\n  Suc 0 \\<in> vertices (translation X)", "show ?case"], ["proof (prove)\nusing this:\n  (finite (vertices (translation X)) \\<and>\n   finite (edges (translation X))) \\<and>\n  0 \\<in> vertices (translation X) \\<and>\n  Suc 0 \\<in> vertices (translation X)\n\ngoal (1 subgoal):\n 1. (finite (vertices (translation (A_Cnv X))) \\<and>\n     finite (edges (translation (A_Cnv X)))) \\<and>\n    0 \\<in> vertices (translation (A_Cnv X)) \\<and>\n    Suc 0 \\<in> vertices (translation (A_Cnv X))", "by auto"], ["proof (state)\nthis:\n  (finite (vertices (translation (A_Cnv X))) \\<and>\n   finite (edges (translation (A_Cnv X)))) \\<and>\n  0 \\<in> vertices (translation (A_Cnv X)) \\<and>\n  Suc 0 \\<in> vertices (translation (A_Cnv X))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       (finite (vertices (translation (A_Lbl x))) \\<and>\n        finite (edges (translation (A_Lbl x)))) \\<and>\n       0 \\<in> vertices (translation (A_Lbl x)) \\<and>\n       Suc 0 \\<in> vertices (translation (A_Lbl x))", "qed auto"], ["", "lemma inv_tr_card_min:\n  assumes \"inv_translation r\"\n  shows \"card r \\<ge> 2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 2 \\<le> card r", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. 2 \\<le> card r", "note [simp] = inv_translation_def"], ["proof (state)\nthis:\n  inv_translation ?r \\<equiv>\n  {0..<card ?r} = ?r \\<and> {0, 1} \\<subseteq> ?r\n\ngoal (1 subgoal):\n 1. 2 \\<le> card r", "have \"{0..<x} = r \\<Longrightarrow> 2 \\<le> x \\<longleftrightarrow> 0 \\<in> r \\<and> 1 \\<in> r\" for x"], ["proof (prove)\ngoal (1 subgoal):\n 1. {0..<x} = r \\<Longrightarrow> (2 \\<le> x) = (0 \\<in> r \\<and> 1 \\<in> r)", "by auto"], ["proof (state)\nthis:\n  {0..<?x} = r \\<Longrightarrow> (2 \\<le> ?x) = (0 \\<in> r \\<and> 1 \\<in> r)\n\ngoal (1 subgoal):\n 1. 2 \\<le> card r", "thus ge2:\"card r\\<ge>2\""], ["proof (prove)\nusing this:\n  {0..<?x} = r \\<Longrightarrow> (2 \\<le> ?x) = (0 \\<in> r \\<and> 1 \\<in> r)\n\ngoal (1 subgoal):\n 1. 2 \\<le> card r", "using assms"], ["proof (prove)\nusing this:\n  {0..<?x} = r \\<Longrightarrow> (2 \\<le> ?x) = (0 \\<in> r \\<and> 1 \\<in> r)\n  inv_translation r\n\ngoal (1 subgoal):\n 1. 2 \\<le> card r", "by auto"], ["proof (state)\nthis:\n  2 \\<le> card r\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma verts_in_translation[intro]:\n\"inv_translation (vertices (translation X))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inv_translation (vertices (translation X))", "proof(induct X)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>X1 X2.\n       \\<lbrakk>inv_translation (vertices (translation X1));\n        inv_translation (vertices (translation X2))\\<rbrakk>\n       \\<Longrightarrow> inv_translation\n                          (vertices (translation (A_Int X1 X2)))\n 2. \\<And>X1 X2.\n       \\<lbrakk>inv_translation (vertices (translation X1));\n        inv_translation (vertices (translation X2))\\<rbrakk>\n       \\<Longrightarrow> inv_translation\n                          (vertices (translation (A_Cmp X1 X2)))\n 3. \\<And>X.\n       inv_translation (vertices (translation X)) \\<Longrightarrow>\n       inv_translation (vertices (translation (A_Cnv X)))\n 4. \\<And>x. inv_translation (vertices (translation (A_Lbl x)))", "{"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>X1 X2.\n       \\<lbrakk>inv_translation (vertices (translation X1));\n        inv_translation (vertices (translation X2))\\<rbrakk>\n       \\<Longrightarrow> inv_translation\n                          (vertices (translation (A_Int X1 X2)))\n 2. \\<And>X1 X2.\n       \\<lbrakk>inv_translation (vertices (translation X1));\n        inv_translation (vertices (translation X2))\\<rbrakk>\n       \\<Longrightarrow> inv_translation\n                          (vertices (translation (A_Cmp X1 X2)))\n 3. \\<And>X.\n       inv_translation (vertices (translation X)) \\<Longrightarrow>\n       inv_translation (vertices (translation (A_Cnv X)))\n 4. \\<And>x. inv_translation (vertices (translation (A_Lbl x)))", "fix r"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>X1 X2.\n       \\<lbrakk>inv_translation (vertices (translation X1));\n        inv_translation (vertices (translation X2))\\<rbrakk>\n       \\<Longrightarrow> inv_translation\n                          (vertices (translation (A_Int X1 X2)))\n 2. \\<And>X1 X2.\n       \\<lbrakk>inv_translation (vertices (translation X1));\n        inv_translation (vertices (translation X2))\\<rbrakk>\n       \\<Longrightarrow> inv_translation\n                          (vertices (translation (A_Cmp X1 X2)))\n 3. \\<And>X.\n       inv_translation (vertices (translation X)) \\<Longrightarrow>\n       inv_translation (vertices (translation (A_Cnv X)))\n 4. \\<And>x. inv_translation (vertices (translation (A_Lbl x)))", "assume assms:\"inv_translation r\""], ["proof (state)\nthis:\n  inv_translation r\n\ngoal (4 subgoals):\n 1. \\<And>X1 X2.\n       \\<lbrakk>inv_translation (vertices (translation X1));\n        inv_translation (vertices (translation X2))\\<rbrakk>\n       \\<Longrightarrow> inv_translation\n                          (vertices (translation (A_Int X1 X2)))\n 2. \\<And>X1 X2.\n       \\<lbrakk>inv_translation (vertices (translation X1));\n        inv_translation (vertices (translation X2))\\<rbrakk>\n       \\<Longrightarrow> inv_translation\n                          (vertices (translation (A_Cmp X1 X2)))\n 3. \\<And>X.\n       inv_translation (vertices (translation X)) \\<Longrightarrow>\n       inv_translation (vertices (translation (A_Cnv X)))\n 4. \\<And>x. inv_translation (vertices (translation (A_Lbl x)))", "note [simp] = inv_translation_def"], ["proof (state)\nthis:\n  inv_translation ?r \\<equiv>\n  {0..<card ?r} = ?r \\<and> {0, 1} \\<subseteq> ?r\n\ngoal (4 subgoals):\n 1. \\<And>X1 X2.\n       \\<lbrakk>inv_translation (vertices (translation X1));\n        inv_translation (vertices (translation X2))\\<rbrakk>\n       \\<Longrightarrow> inv_translation\n                          (vertices (translation (A_Int X1 X2)))\n 2. \\<And>X1 X2.\n       \\<lbrakk>inv_translation (vertices (translation X1));\n        inv_translation (vertices (translation X2))\\<rbrakk>\n       \\<Longrightarrow> inv_translation\n                          (vertices (translation (A_Cmp X1 X2)))\n 3. \\<And>X.\n       inv_translation (vertices (translation X)) \\<Longrightarrow>\n       inv_translation (vertices (translation (A_Cnv X)))\n 4. \\<And>x. inv_translation (vertices (translation (A_Lbl x)))", "from assms"], ["proof (chain)\npicking this:\n  inv_translation r", "have a1:\"finite r\""], ["proof (prove)\nusing this:\n  inv_translation r\n\ngoal (1 subgoal):\n 1. finite r", "by (intro card_ge_0_finite) auto"], ["proof (state)\nthis:\n  finite r\n\ngoal (4 subgoals):\n 1. \\<And>X1 X2.\n       \\<lbrakk>inv_translation (vertices (translation X1));\n        inv_translation (vertices (translation X2))\\<rbrakk>\n       \\<Longrightarrow> inv_translation\n                          (vertices (translation (A_Int X1 X2)))\n 2. \\<And>X1 X2.\n       \\<lbrakk>inv_translation (vertices (translation X1));\n        inv_translation (vertices (translation X2))\\<rbrakk>\n       \\<Longrightarrow> inv_translation\n                          (vertices (translation (A_Cmp X1 X2)))\n 3. \\<And>X.\n       inv_translation (vertices (translation X)) \\<Longrightarrow>\n       inv_translation (vertices (translation (A_Cnv X)))\n 4. \\<And>x. inv_translation (vertices (translation (A_Lbl x)))", "have [simp]:\"{0..<Suc x} = {0..<x} \\<union> {x}\" for x"], ["proof (prove)\ngoal (1 subgoal):\n 1. {0..<Suc x} = {0..<x} \\<union> {x}", "by auto"], ["proof (state)\nthis:\n  {0..<Suc ?x} = {0..<?x} \\<union> {?x}\n\ngoal (4 subgoals):\n 1. \\<And>X1 X2.\n       \\<lbrakk>inv_translation (vertices (translation X1));\n        inv_translation (vertices (translation X2))\\<rbrakk>\n       \\<Longrightarrow> inv_translation\n                          (vertices (translation (A_Int X1 X2)))\n 2. \\<And>X1 X2.\n       \\<lbrakk>inv_translation (vertices (translation X1));\n        inv_translation (vertices (translation X2))\\<rbrakk>\n       \\<Longrightarrow> inv_translation\n                          (vertices (translation (A_Cmp X1 X2)))\n 3. \\<And>X.\n       inv_translation (vertices (translation X)) \\<Longrightarrow>\n       inv_translation (vertices (translation (A_Cnv X)))\n 4. \\<And>x. inv_translation (vertices (translation (A_Lbl x)))", "note ge2 = inv_tr_card_min[OF assms]"], ["proof (state)\nthis:\n  2 \\<le> card r\n\ngoal (4 subgoals):\n 1. \\<And>X1 X2.\n       \\<lbrakk>inv_translation (vertices (translation X1));\n        inv_translation (vertices (translation X2))\\<rbrakk>\n       \\<Longrightarrow> inv_translation\n                          (vertices (translation (A_Int X1 X2)))\n 2. \\<And>X1 X2.\n       \\<lbrakk>inv_translation (vertices (translation X1));\n        inv_translation (vertices (translation X2))\\<rbrakk>\n       \\<Longrightarrow> inv_translation\n                          (vertices (translation (A_Cmp X1 X2)))\n 3. \\<And>X.\n       inv_translation (vertices (translation X)) \\<Longrightarrow>\n       inv_translation (vertices (translation (A_Cnv X)))\n 4. \\<And>x. inv_translation (vertices (translation (A_Lbl x)))", "from ge2 assms"], ["proof (chain)\npicking this:\n  2 \\<le> card r\n  inv_translation r", "have r0:\"r \\<inter> {0} = {0}\" \"r \\<inter> {x. x < 2} = {0,1}\""], ["proof (prove)\nusing this:\n  2 \\<le> card r\n  inv_translation r\n\ngoal (1 subgoal):\n 1. r \\<inter> {0} = {0} &&& r \\<inter> {x. x < 2} = {0, 1}", "by auto"], ["proof (state)\nthis:\n  r \\<inter> {0} = {0}\n  r \\<inter> {x. x < 2} = {0, 1}\n\ngoal (4 subgoals):\n 1. \\<And>X1 X2.\n       \\<lbrakk>inv_translation (vertices (translation X1));\n        inv_translation (vertices (translation X2))\\<rbrakk>\n       \\<Longrightarrow> inv_translation\n                          (vertices (translation (A_Int X1 X2)))\n 2. \\<And>X1 X2.\n       \\<lbrakk>inv_translation (vertices (translation X1));\n        inv_translation (vertices (translation X2))\\<rbrakk>\n       \\<Longrightarrow> inv_translation\n                          (vertices (translation (A_Cmp X1 X2)))\n 3. \\<And>X.\n       inv_translation (vertices (translation X)) \\<Longrightarrow>\n       inv_translation (vertices (translation (A_Cnv X)))\n 4. \\<And>x. inv_translation (vertices (translation (A_Lbl x)))", "have [intro!]:\"\\<And>x. x \\<in> r \\<Longrightarrow> x < card r\"\n     and g6:\"\\<And>x. x < card r \\<longleftrightarrow> x \\<in> r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>x. x \\<in> r \\<Longrightarrow> x < card r) &&&\n    (\\<And>x. (x < card r) = (x \\<in> r))", "using assms[unfolded inv_translation_def] atLeastLessThan_iff"], ["proof (prove)\nusing this:\n  {0..<card r} = r \\<and> {0, 1} \\<subseteq> r\n  (?i \\<in> {?l..<?u}) = (?l \\<le> ?i \\<and> ?i < ?u)\n\ngoal (1 subgoal):\n 1. (\\<And>x. x \\<in> r \\<Longrightarrow> x < card r) &&&\n    (\\<And>x. (x < card r) = (x \\<in> r))", "by blast+"], ["proof (state)\nthis:\n  ?x \\<in> r \\<Longrightarrow> ?x < card r\n  (?x < card r) = (?x \\<in> r)\n\ngoal (4 subgoals):\n 1. \\<And>X1 X2.\n       \\<lbrakk>inv_translation (vertices (translation X1));\n        inv_translation (vertices (translation X2))\\<rbrakk>\n       \\<Longrightarrow> inv_translation\n                          (vertices (translation (A_Int X1 X2)))\n 2. \\<And>X1 X2.\n       \\<lbrakk>inv_translation (vertices (translation X1));\n        inv_translation (vertices (translation X2))\\<rbrakk>\n       \\<Longrightarrow> inv_translation\n                          (vertices (translation (A_Cmp X1 X2)))\n 3. \\<And>X.\n       inv_translation (vertices (translation X)) \\<Longrightarrow>\n       inv_translation (vertices (translation (A_Cnv X)))\n 4. \\<And>x. inv_translation (vertices (translation (A_Lbl x)))", "have g4:\"r \\<inter> {x. \\<not> x < 2} = {2..<card r}\"\n            \"r \\<inter> (Collect ((<) 0)) = {1..<card r}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r \\<inter> {x. \\<not> x < 2} = {2..<card r} &&&\n    r \\<inter> Collect ((<) 0) = {1..<card r}", "using assms"], ["proof (prove)\nusing this:\n  inv_translation r\n\ngoal (1 subgoal):\n 1. r \\<inter> {x. \\<not> x < 2} = {2..<card r} &&&\n    r \\<inter> Collect ((<) 0) = {1..<card r}", "by fastforce+"], ["proof (state)\nthis:\n  r \\<inter> {x. \\<not> x < 2} = {2..<card r}\n  r \\<inter> Collect ((<) 0) = {1..<card r}\n\ngoal (4 subgoals):\n 1. \\<And>X1 X2.\n       \\<lbrakk>inv_translation (vertices (translation X1));\n        inv_translation (vertices (translation X2))\\<rbrakk>\n       \\<Longrightarrow> inv_translation\n                          (vertices (translation (A_Int X1 X2)))\n 2. \\<And>X1 X2.\n       \\<lbrakk>inv_translation (vertices (translation X1));\n        inv_translation (vertices (translation X2))\\<rbrakk>\n       \\<Longrightarrow> inv_translation\n                          (vertices (translation (A_Cmp X1 X2)))\n 3. \\<And>X.\n       inv_translation (vertices (translation X)) \\<Longrightarrow>\n       inv_translation (vertices (translation (A_Cnv X)))\n 4. \\<And>x. inv_translation (vertices (translation (A_Lbl x)))", "have ins:\"1 \\<in> r\" \"0 \\<in> r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 \\<in> r &&& 0 \\<in> r", "using assms"], ["proof (prove)\nusing this:\n  inv_translation r\n\ngoal (1 subgoal):\n 1. 1 \\<in> r &&& 0 \\<in> r", "by auto"], ["proof (state)\nthis:\n  1 \\<in> r\n  0 \\<in> r\n\ngoal (4 subgoals):\n 1. \\<And>X1 X2.\n       \\<lbrakk>inv_translation (vertices (translation X1));\n        inv_translation (vertices (translation X2))\\<rbrakk>\n       \\<Longrightarrow> inv_translation\n                          (vertices (translation (A_Int X1 X2)))\n 2. \\<And>X1 X2.\n       \\<lbrakk>inv_translation (vertices (translation X1));\n        inv_translation (vertices (translation X2))\\<rbrakk>\n       \\<Longrightarrow> inv_translation\n                          (vertices (translation (A_Cmp X1 X2)))\n 3. \\<And>X.\n       inv_translation (vertices (translation X)) \\<Longrightarrow>\n       inv_translation (vertices (translation (A_Cnv X)))\n 4. \\<And>x. inv_translation (vertices (translation (A_Lbl x)))", "have d:\"Suc (Suc (card r - 2)) = card r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Suc (Suc (card r - 2)) = card r", "using ge2 One_nat_def Suc_diff_Suc Suc_pred \n            numeral_2_eq_2"], ["proof (prove)\nusing this:\n  2 \\<le> card r\n  1 = Suc 0\n  ?n < ?m \\<Longrightarrow> Suc (?m - Suc ?n) = ?m - ?n\n  0 < ?n \\<Longrightarrow> Suc (?n - Suc 0) = ?n\n  2 = Suc (Suc 0)\n\ngoal (1 subgoal):\n 1. Suc (Suc (card r - 2)) = card r", "by presburger"], ["proof (state)\nthis:\n  Suc (Suc (card r - 2)) = card r\n\ngoal (4 subgoals):\n 1. \\<And>X1 X2.\n       \\<lbrakk>inv_translation (vertices (translation X1));\n        inv_translation (vertices (translation X2))\\<rbrakk>\n       \\<Longrightarrow> inv_translation\n                          (vertices (translation (A_Int X1 X2)))\n 2. \\<And>X1 X2.\n       \\<lbrakk>inv_translation (vertices (translation X1));\n        inv_translation (vertices (translation X2))\\<rbrakk>\n       \\<Longrightarrow> inv_translation\n                          (vertices (translation (A_Cmp X1 X2)))\n 3. \\<And>X.\n       inv_translation (vertices (translation X)) \\<Longrightarrow>\n       inv_translation (vertices (translation (A_Cnv X)))\n 4. \\<And>x. inv_translation (vertices (translation (A_Lbl x)))", "note ge2 ins g4 g6 r0 d"], ["proof (state)\nthis:\n  2 \\<le> card r\n  1 \\<in> r\n  0 \\<in> r\n  r \\<inter> {x. \\<not> x < 2} = {2..<card r}\n  r \\<inter> Collect ((<) 0) = {1..<card r}\n  (?x < card r) = (?x \\<in> r)\n  r \\<inter> {0} = {0}\n  r \\<inter> {x. x < 2} = {0, 1}\n  Suc (Suc (card r - 2)) = card r\n\ngoal (4 subgoals):\n 1. \\<And>X1 X2.\n       \\<lbrakk>inv_translation (vertices (translation X1));\n        inv_translation (vertices (translation X2))\\<rbrakk>\n       \\<Longrightarrow> inv_translation\n                          (vertices (translation (A_Int X1 X2)))\n 2. \\<And>X1 X2.\n       \\<lbrakk>inv_translation (vertices (translation X1));\n        inv_translation (vertices (translation X2))\\<rbrakk>\n       \\<Longrightarrow> inv_translation\n                          (vertices (translation (A_Cmp X1 X2)))\n 3. \\<And>X.\n       inv_translation (vertices (translation X)) \\<Longrightarrow>\n       inv_translation (vertices (translation (A_Cnv X)))\n 4. \\<And>x. inv_translation (vertices (translation (A_Lbl x)))", "}"], ["proof (state)\nthis:\n  inv_translation ?r3 \\<Longrightarrow> 2 \\<le> card ?r3\n  inv_translation ?r3 \\<Longrightarrow> 1 \\<in> ?r3\n  inv_translation ?r3 \\<Longrightarrow> 0 \\<in> ?r3\n  inv_translation ?r3 \\<Longrightarrow>\n  ?r3 \\<inter> {x. \\<not> x < 2} = {2..<card ?r3}\n  inv_translation ?r3 \\<Longrightarrow>\n  ?r3 \\<inter> Collect ((<) 0) = {1..<card ?r3}\n  inv_translation ?r3 \\<Longrightarrow> (?x < card ?r3) = (?x \\<in> ?r3)\n  inv_translation ?r3 \\<Longrightarrow> ?r3 \\<inter> {0} = {0}\n  inv_translation ?r3 \\<Longrightarrow> ?r3 \\<inter> {x. x < 2} = {0, 1}\n  inv_translation ?r3 \\<Longrightarrow> Suc (Suc (card ?r3 - 2)) = card ?r3\n\ngoal (4 subgoals):\n 1. \\<And>X1 X2.\n       \\<lbrakk>inv_translation (vertices (translation X1));\n        inv_translation (vertices (translation X2))\\<rbrakk>\n       \\<Longrightarrow> inv_translation\n                          (vertices (translation (A_Int X1 X2)))\n 2. \\<And>X1 X2.\n       \\<lbrakk>inv_translation (vertices (translation X1));\n        inv_translation (vertices (translation X2))\\<rbrakk>\n       \\<Longrightarrow> inv_translation\n                          (vertices (translation (A_Cmp X1 X2)))\n 3. \\<And>X.\n       inv_translation (vertices (translation X)) \\<Longrightarrow>\n       inv_translation (vertices (translation (A_Cnv X)))\n 4. \\<And>x. inv_translation (vertices (translation (A_Lbl x)))", "note inv_translationD[simp] = this"], ["proof (state)\nthis:\n  inv_translation ?r3 \\<Longrightarrow> 2 \\<le> card ?r3\n  inv_translation ?r3 \\<Longrightarrow> 1 \\<in> ?r3\n  inv_translation ?r3 \\<Longrightarrow> 0 \\<in> ?r3\n  inv_translation ?r3 \\<Longrightarrow>\n  ?r3 \\<inter> {x. \\<not> x < 2} = {2..<card ?r3}\n  inv_translation ?r3 \\<Longrightarrow>\n  ?r3 \\<inter> Collect ((<) 0) = {1..<card ?r3}\n  inv_translation ?r3 \\<Longrightarrow> (?x < card ?r3) = (?x \\<in> ?r3)\n  inv_translation ?r3 \\<Longrightarrow> ?r3 \\<inter> {0} = {0}\n  inv_translation ?r3 \\<Longrightarrow> ?r3 \\<inter> {x. x < 2} = {0, 1}\n  inv_translation ?r3 \\<Longrightarrow> Suc (Suc (card ?r3 - 2)) = card ?r3\n\ngoal (4 subgoals):\n 1. \\<And>X1 X2.\n       \\<lbrakk>inv_translation (vertices (translation X1));\n        inv_translation (vertices (translation X2))\\<rbrakk>\n       \\<Longrightarrow> inv_translation\n                          (vertices (translation (A_Int X1 X2)))\n 2. \\<And>X1 X2.\n       \\<lbrakk>inv_translation (vertices (translation X1));\n        inv_translation (vertices (translation X2))\\<rbrakk>\n       \\<Longrightarrow> inv_translation\n                          (vertices (translation (A_Cmp X1 X2)))\n 3. \\<And>X.\n       inv_translation (vertices (translation X)) \\<Longrightarrow>\n       inv_translation (vertices (translation (A_Cnv X)))\n 4. \\<And>x. inv_translation (vertices (translation (A_Lbl x)))", "{"], ["proof (state)\nthis:\n  inv_translation ?r3 \\<Longrightarrow> 2 \\<le> card ?r3\n  inv_translation ?r3 \\<Longrightarrow> 1 \\<in> ?r3\n  inv_translation ?r3 \\<Longrightarrow> 0 \\<in> ?r3\n  inv_translation ?r3 \\<Longrightarrow>\n  ?r3 \\<inter> {x. \\<not> x < 2} = {2..<card ?r3}\n  inv_translation ?r3 \\<Longrightarrow>\n  ?r3 \\<inter> Collect ((<) 0) = {1..<card ?r3}\n  inv_translation ?r3 \\<Longrightarrow> (?x < card ?r3) = (?x \\<in> ?r3)\n  inv_translation ?r3 \\<Longrightarrow> ?r3 \\<inter> {0} = {0}\n  inv_translation ?r3 \\<Longrightarrow> ?r3 \\<inter> {x. x < 2} = {0, 1}\n  inv_translation ?r3 \\<Longrightarrow> Suc (Suc (card ?r3 - 2)) = card ?r3\n\ngoal (4 subgoals):\n 1. \\<And>X1 X2.\n       \\<lbrakk>inv_translation (vertices (translation X1));\n        inv_translation (vertices (translation X2))\\<rbrakk>\n       \\<Longrightarrow> inv_translation\n                          (vertices (translation (A_Int X1 X2)))\n 2. \\<And>X1 X2.\n       \\<lbrakk>inv_translation (vertices (translation X1));\n        inv_translation (vertices (translation X2))\\<rbrakk>\n       \\<Longrightarrow> inv_translation\n                          (vertices (translation (A_Cmp X1 X2)))\n 3. \\<And>X.\n       inv_translation (vertices (translation X)) \\<Longrightarrow>\n       inv_translation (vertices (translation (A_Cnv X)))\n 4. \\<And>x. inv_translation (vertices (translation (A_Lbl x)))", "fix a b c"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>X1 X2.\n       \\<lbrakk>inv_translation (vertices (translation X1));\n        inv_translation (vertices (translation X2))\\<rbrakk>\n       \\<Longrightarrow> inv_translation\n                          (vertices (translation (A_Int X1 X2)))\n 2. \\<And>X1 X2.\n       \\<lbrakk>inv_translation (vertices (translation X1));\n        inv_translation (vertices (translation X2))\\<rbrakk>\n       \\<Longrightarrow> inv_translation\n                          (vertices (translation (A_Cmp X1 X2)))\n 3. \\<And>X.\n       inv_translation (vertices (translation X)) \\<Longrightarrow>\n       inv_translation (vertices (translation (A_Cnv X)))\n 4. \\<And>x. inv_translation (vertices (translation (A_Lbl x)))", "assume assm:\"b \\<le> (a::nat)\""], ["proof (state)\nthis:\n  b \\<le> a\n\ngoal (4 subgoals):\n 1. \\<And>X1 X2.\n       \\<lbrakk>inv_translation (vertices (translation X1));\n        inv_translation (vertices (translation X2))\\<rbrakk>\n       \\<Longrightarrow> inv_translation\n                          (vertices (translation (A_Int X1 X2)))\n 2. \\<And>X1 X2.\n       \\<lbrakk>inv_translation (vertices (translation X1));\n        inv_translation (vertices (translation X2))\\<rbrakk>\n       \\<Longrightarrow> inv_translation\n                          (vertices (translation (A_Cmp X1 X2)))\n 3. \\<And>X.\n       inv_translation (vertices (translation X)) \\<Longrightarrow>\n       inv_translation (vertices (translation (A_Cnv X)))\n 4. \\<And>x. inv_translation (vertices (translation (A_Lbl x)))", "have \"(\\<lambda>x. x + a - b) ` {b..<c} = {a..<c+a-b}\" (is \"?lhs = ?rhs\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. x + a - b) ` {b..<c} = {a..<c + a - b}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<lambda>x. x + a - b) ` {b..<c} = {a..<c + a - b}", "from assm"], ["proof (chain)\npicking this:\n  b \\<le> a", "have \"?lhs = (\\<lambda>x. x + (a - b)) ` {b..<c}\""], ["proof (prove)\nusing this:\n  b \\<le> a\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. x + a - b) ` {b..<c} = (\\<lambda>x. x + (a - b)) ` {b..<c}", "by auto"], ["proof (state)\nthis:\n  (\\<lambda>x. x + a - b) ` {b..<c} = (\\<lambda>x. x + (a - b)) ` {b..<c}\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. x + a - b) ` {b..<c} = {a..<c + a - b}", "also"], ["proof (state)\nthis:\n  (\\<lambda>x. x + a - b) ` {b..<c} = (\\<lambda>x. x + (a - b)) ` {b..<c}\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. x + a - b) ` {b..<c} = {a..<c + a - b}", "have \"\\<dots> = ?rhs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. x + (a - b)) ` {b..<c} = {a..<c + a - b}", "unfolding linordered_semidom_class.image_add_atLeastLessThan'"], ["proof (prove)\ngoal (1 subgoal):\n 1. {b + (a - b)..<c + (a - b)} = {a..<c + a - b}", "using assm"], ["proof (prove)\nusing this:\n  b \\<le> a\n\ngoal (1 subgoal):\n 1. {b + (a - b)..<c + (a - b)} = {a..<c + a - b}", "by auto"], ["proof (state)\nthis:\n  (\\<lambda>x. x + (a - b)) ` {b..<c} = {a..<c + a - b}\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. x + a - b) ` {b..<c} = {a..<c + a - b}", "finally"], ["proof (chain)\npicking this:\n  (\\<lambda>x. x + a - b) ` {b..<c} = {a..<c + a - b}", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<lambda>x. x + a - b) ` {b..<c} = {a..<c + a - b}\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. x + a - b) ` {b..<c} = {a..<c + a - b}", "by auto"], ["proof (state)\nthis:\n  (\\<lambda>x. x + a - b) ` {b..<c} = {a..<c + a - b}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<lambda>x. x + a - b) ` {b..<c} = {a..<c + a - b}\n\ngoal (4 subgoals):\n 1. \\<And>X1 X2.\n       \\<lbrakk>inv_translation (vertices (translation X1));\n        inv_translation (vertices (translation X2))\\<rbrakk>\n       \\<Longrightarrow> inv_translation\n                          (vertices (translation (A_Int X1 X2)))\n 2. \\<And>X1 X2.\n       \\<lbrakk>inv_translation (vertices (translation X1));\n        inv_translation (vertices (translation X2))\\<rbrakk>\n       \\<Longrightarrow> inv_translation\n                          (vertices (translation (A_Cmp X1 X2)))\n 3. \\<And>X.\n       inv_translation (vertices (translation X)) \\<Longrightarrow>\n       inv_translation (vertices (translation (A_Cnv X)))\n 4. \\<And>x. inv_translation (vertices (translation (A_Lbl x)))", "}"], ["proof (state)\nthis:\n  ?b2 \\<le> ?a2 \\<Longrightarrow>\n  (\\<lambda>x. x + ?a2 - ?b2) ` {?b2..<?c2} = {?a2..<?c2 + ?a2 - ?b2}\n\ngoal (4 subgoals):\n 1. \\<And>X1 X2.\n       \\<lbrakk>inv_translation (vertices (translation X1));\n        inv_translation (vertices (translation X2))\\<rbrakk>\n       \\<Longrightarrow> inv_translation\n                          (vertices (translation (A_Int X1 X2)))\n 2. \\<And>X1 X2.\n       \\<lbrakk>inv_translation (vertices (translation X1));\n        inv_translation (vertices (translation X2))\\<rbrakk>\n       \\<Longrightarrow> inv_translation\n                          (vertices (translation (A_Cmp X1 X2)))\n 3. \\<And>X.\n       inv_translation (vertices (translation X)) \\<Longrightarrow>\n       inv_translation (vertices (translation (A_Cnv X)))\n 4. \\<And>x. inv_translation (vertices (translation (A_Lbl x)))", "note e[simp] = this"], ["proof (state)\nthis:\n  ?b2 \\<le> ?a2 \\<Longrightarrow>\n  (\\<lambda>x. x + ?a2 - ?b2) ` {?b2..<?c2} = {?a2..<?c2 + ?a2 - ?b2}\n\ngoal (4 subgoals):\n 1. \\<And>X1 X2.\n       \\<lbrakk>inv_translation (vertices (translation X1));\n        inv_translation (vertices (translation X2))\\<rbrakk>\n       \\<Longrightarrow> inv_translation\n                          (vertices (translation (A_Int X1 X2)))\n 2. \\<And>X1 X2.\n       \\<lbrakk>inv_translation (vertices (translation X1));\n        inv_translation (vertices (translation X2))\\<rbrakk>\n       \\<Longrightarrow> inv_translation\n                          (vertices (translation (A_Cmp X1 X2)))\n 3. \\<And>X.\n       inv_translation (vertices (translation X)) \\<Longrightarrow>\n       inv_translation (vertices (translation (A_Cnv X)))\n 4. \\<And>x. inv_translation (vertices (translation (A_Lbl x)))", "{"], ["proof (state)\nthis:\n  ?b2 \\<le> ?a2 \\<Longrightarrow>\n  (\\<lambda>x. x + ?a2 - ?b2) ` {?b2..<?c2} = {?a2..<?c2 + ?a2 - ?b2}\n\ngoal (4 subgoals):\n 1. \\<And>X1 X2.\n       \\<lbrakk>inv_translation (vertices (translation X1));\n        inv_translation (vertices (translation X2))\\<rbrakk>\n       \\<Longrightarrow> inv_translation\n                          (vertices (translation (A_Int X1 X2)))\n 2. \\<And>X1 X2.\n       \\<lbrakk>inv_translation (vertices (translation X1));\n        inv_translation (vertices (translation X2))\\<rbrakk>\n       \\<Longrightarrow> inv_translation\n                          (vertices (translation (A_Cmp X1 X2)))\n 3. \\<And>X.\n       inv_translation (vertices (translation X)) \\<Longrightarrow>\n       inv_translation (vertices (translation (A_Cnv X)))\n 4. \\<And>x. inv_translation (vertices (translation (A_Lbl x)))", "fix r z"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>X1 X2.\n       \\<lbrakk>inv_translation (vertices (translation X1));\n        inv_translation (vertices (translation X2))\\<rbrakk>\n       \\<Longrightarrow> inv_translation\n                          (vertices (translation (A_Int X1 X2)))\n 2. \\<And>X1 X2.\n       \\<lbrakk>inv_translation (vertices (translation X1));\n        inv_translation (vertices (translation X2))\\<rbrakk>\n       \\<Longrightarrow> inv_translation\n                          (vertices (translation (A_Cmp X1 X2)))\n 3. \\<And>X.\n       inv_translation (vertices (translation X)) \\<Longrightarrow>\n       inv_translation (vertices (translation (A_Cnv X)))\n 4. \\<And>x. inv_translation (vertices (translation (A_Lbl x)))", "assume a1: \"inv_translation z\" and a2: \"inv_translation r\""], ["proof (state)\nthis:\n  inv_translation z\n  inv_translation r\n\ngoal (4 subgoals):\n 1. \\<And>X1 X2.\n       \\<lbrakk>inv_translation (vertices (translation X1));\n        inv_translation (vertices (translation X2))\\<rbrakk>\n       \\<Longrightarrow> inv_translation\n                          (vertices (translation (A_Int X1 X2)))\n 2. \\<And>X1 X2.\n       \\<lbrakk>inv_translation (vertices (translation X1));\n        inv_translation (vertices (translation X2))\\<rbrakk>\n       \\<Longrightarrow> inv_translation\n                          (vertices (translation (A_Cmp X1 X2)))\n 3. \\<And>X.\n       inv_translation (vertices (translation X)) \\<Longrightarrow>\n       inv_translation (vertices (translation (A_Cnv X)))\n 4. \\<And>x. inv_translation (vertices (translation (A_Lbl x)))", "let ?z2 = \"card z + card r - 2\""], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>X1 X2.\n       \\<lbrakk>inv_translation (vertices (translation X1));\n        inv_translation (vertices (translation X2))\\<rbrakk>\n       \\<Longrightarrow> inv_translation\n                          (vertices (translation (A_Int X1 X2)))\n 2. \\<And>X1 X2.\n       \\<lbrakk>inv_translation (vertices (translation X1));\n        inv_translation (vertices (translation X2))\\<rbrakk>\n       \\<Longrightarrow> inv_translation\n                          (vertices (translation (A_Cmp X1 X2)))\n 3. \\<And>X.\n       inv_translation (vertices (translation X)) \\<Longrightarrow>\n       inv_translation (vertices (translation (A_Cnv X)))\n 4. \\<And>x. inv_translation (vertices (translation (A_Lbl x)))", "let ?z1 = \"card z + card r - Suc 0\""], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>X1 X2.\n       \\<lbrakk>inv_translation (vertices (translation X1));\n        inv_translation (vertices (translation X2))\\<rbrakk>\n       \\<Longrightarrow> inv_translation\n                          (vertices (translation (A_Int X1 X2)))\n 2. \\<And>X1 X2.\n       \\<lbrakk>inv_translation (vertices (translation X1));\n        inv_translation (vertices (translation X2))\\<rbrakk>\n       \\<Longrightarrow> inv_translation\n                          (vertices (translation (A_Cmp X1 X2)))\n 3. \\<And>X.\n       inv_translation (vertices (translation X)) \\<Longrightarrow>\n       inv_translation (vertices (translation (A_Cnv X)))\n 4. \\<And>x. inv_translation (vertices (translation (A_Lbl x)))", "from a1 a2"], ["proof (chain)\npicking this:\n  inv_translation z\n  inv_translation r", "have le1:\"Suc 0 \\<le> card r\""], ["proof (prove)\nusing this:\n  inv_translation z\n  inv_translation r\n\ngoal (1 subgoal):\n 1. Suc 0 \\<le> card r", "by (metis Suc_leD inv_translationD(1) numerals(2))"], ["proof (state)\nthis:\n  Suc 0 \\<le> card r\n\ngoal (4 subgoals):\n 1. \\<And>X1 X2.\n       \\<lbrakk>inv_translation (vertices (translation X1));\n        inv_translation (vertices (translation X2))\\<rbrakk>\n       \\<Longrightarrow> inv_translation\n                          (vertices (translation (A_Int X1 X2)))\n 2. \\<And>X1 X2.\n       \\<lbrakk>inv_translation (vertices (translation X1));\n        inv_translation (vertices (translation X2))\\<rbrakk>\n       \\<Longrightarrow> inv_translation\n                          (vertices (translation (A_Cmp X1 X2)))\n 3. \\<And>X.\n       inv_translation (vertices (translation X)) \\<Longrightarrow>\n       inv_translation (vertices (translation (A_Cnv X)))\n 4. \\<And>x. inv_translation (vertices (translation (A_Lbl x)))", "hence le2: \"card r \\<le> ?z1\""], ["proof (prove)\nusing this:\n  Suc 0 \\<le> card r\n\ngoal (1 subgoal):\n 1. card r \\<le> card z + card r - Suc 0", "by (metis Suc_leD a1 inv_translationD(1) numerals(2) ordered_cancel_comm_monoid_diff_class.le_add_diff)"], ["proof (state)\nthis:\n  card r \\<le> card z + card r - Suc 0\n\ngoal (4 subgoals):\n 1. \\<And>X1 X2.\n       \\<lbrakk>inv_translation (vertices (translation X1));\n        inv_translation (vertices (translation X2))\\<rbrakk>\n       \\<Longrightarrow> inv_translation\n                          (vertices (translation (A_Int X1 X2)))\n 2. \\<And>X1 X2.\n       \\<lbrakk>inv_translation (vertices (translation X1));\n        inv_translation (vertices (translation X2))\\<rbrakk>\n       \\<Longrightarrow> inv_translation\n                          (vertices (translation (A_Cmp X1 X2)))\n 3. \\<And>X.\n       inv_translation (vertices (translation X)) \\<Longrightarrow>\n       inv_translation (vertices (translation (A_Cnv X)))\n 4. \\<And>x. inv_translation (vertices (translation (A_Lbl x)))", "with le1"], ["proof (chain)\npicking this:\n  Suc 0 \\<le> card r\n  card r \\<le> card z + card r - Suc 0", "have b:\"{card r ..< ?z1} \\<union> {Suc 0 ..< card r} = {Suc 0 ..< ?z1}\""], ["proof (prove)\nusing this:\n  Suc 0 \\<le> card r\n  card r \\<le> card z + card r - Suc 0\n\ngoal (1 subgoal):\n 1. {card r..<card z + card r - Suc 0} \\<union> {Suc 0..<card r} =\n    {Suc 0..<card z + card r - Suc 0}", "by auto"], ["proof (state)\nthis:\n  {card r..<card z + card r - Suc 0} \\<union> {Suc 0..<card r} =\n  {Suc 0..<card z + card r - Suc 0}\n\ngoal (4 subgoals):\n 1. \\<And>X1 X2.\n       \\<lbrakk>inv_translation (vertices (translation X1));\n        inv_translation (vertices (translation X2))\\<rbrakk>\n       \\<Longrightarrow> inv_translation\n                          (vertices (translation (A_Int X1 X2)))\n 2. \\<And>X1 X2.\n       \\<lbrakk>inv_translation (vertices (translation X1));\n        inv_translation (vertices (translation X2))\\<rbrakk>\n       \\<Longrightarrow> inv_translation\n                          (vertices (translation (A_Cmp X1 X2)))\n 3. \\<And>X.\n       inv_translation (vertices (translation X)) \\<Longrightarrow>\n       inv_translation (vertices (translation (A_Cnv X)))\n 4. \\<And>x. inv_translation (vertices (translation (A_Lbl x)))", "have a:\"(insert (card r) {0..<card z + card r - Suc 0}) = {0..<card z + card r - Suc 0}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. insert (card r) {0..<card z + card r - Suc 0} =\n    {0..<card z + card r - Suc 0}", "using le1 le2 a1 a2"], ["proof (prove)\nusing this:\n  Suc 0 \\<le> card r\n  card r \\<le> card z + card r - Suc 0\n  inv_translation z\n  inv_translation r\n\ngoal (1 subgoal):\n 1. insert (card r) {0..<card z + card r - Suc 0} =\n    {0..<card z + card r - Suc 0}", "by (metis Suc_leD add_Suc_right atLeastLessThan_iff diff_Suc_Suc insert_absorb inv_translationD(1) linorder_not_less not_less_eq_eq numerals(2) ordered_cancel_comm_monoid_diff_class.le_add_diff)"], ["proof (state)\nthis:\n  insert (card r) {0..<card z + card r - Suc 0} =\n  {0..<card z + card r - Suc 0}\n\ngoal (4 subgoals):\n 1. \\<And>X1 X2.\n       \\<lbrakk>inv_translation (vertices (translation X1));\n        inv_translation (vertices (translation X2))\\<rbrakk>\n       \\<Longrightarrow> inv_translation\n                          (vertices (translation (A_Int X1 X2)))\n 2. \\<And>X1 X2.\n       \\<lbrakk>inv_translation (vertices (translation X1));\n        inv_translation (vertices (translation X2))\\<rbrakk>\n       \\<Longrightarrow> inv_translation\n                          (vertices (translation (A_Cmp X1 X2)))\n 3. \\<And>X.\n       inv_translation (vertices (translation X)) \\<Longrightarrow>\n       inv_translation (vertices (translation (A_Cnv X)))\n 4. \\<And>x. inv_translation (vertices (translation (A_Lbl x)))", "from a1 a2"], ["proof (chain)\npicking this:\n  inv_translation z\n  inv_translation r", "have \"card z + card r - 2 \\<ge> card (r::nat set)\""], ["proof (prove)\nusing this:\n  inv_translation z\n  inv_translation r\n\ngoal (1 subgoal):\n 1. card r \\<le> card z + card r - 2", "by (simp add: ordered_cancel_comm_monoid_diff_class.le_add_diff)"], ["proof (state)\nthis:\n  card r \\<le> card z + card r - 2\n\ngoal (4 subgoals):\n 1. \\<And>X1 X2.\n       \\<lbrakk>inv_translation (vertices (translation X1));\n        inv_translation (vertices (translation X2))\\<rbrakk>\n       \\<Longrightarrow> inv_translation\n                          (vertices (translation (A_Int X1 X2)))\n 2. \\<And>X1 X2.\n       \\<lbrakk>inv_translation (vertices (translation X1));\n        inv_translation (vertices (translation X2))\\<rbrakk>\n       \\<Longrightarrow> inv_translation\n                          (vertices (translation (A_Cmp X1 X2)))\n 3. \\<And>X.\n       inv_translation (vertices (translation X)) \\<Longrightarrow>\n       inv_translation (vertices (translation (A_Cnv X)))\n 4. \\<And>x. inv_translation (vertices (translation (A_Lbl x)))", "with a2"], ["proof (chain)\npicking this:\n  inv_translation r\n  card r \\<le> card z + card r - 2", "have c:\"card (r \\<union> {card r..<?z2}) = ?z2\""], ["proof (prove)\nusing this:\n  inv_translation r\n  card r \\<le> card z + card r - 2\n\ngoal (1 subgoal):\n 1. card (r \\<union> {card r..<card z + card r - 2}) = card z + card r - 2", "by (metis atLeast0LessThan card_atLeastLessThan diff_zero inv_translation_def ivl_disj_un_one(2))+"], ["proof (state)\nthis:\n  card (r \\<union> {card r..<card z + card r - 2}) = card z + card r - 2\n\ngoal (4 subgoals):\n 1. \\<And>X1 X2.\n       \\<lbrakk>inv_translation (vertices (translation X1));\n        inv_translation (vertices (translation X2))\\<rbrakk>\n       \\<Longrightarrow> inv_translation\n                          (vertices (translation (A_Int X1 X2)))\n 2. \\<And>X1 X2.\n       \\<lbrakk>inv_translation (vertices (translation X1));\n        inv_translation (vertices (translation X2))\\<rbrakk>\n       \\<Longrightarrow> inv_translation\n                          (vertices (translation (A_Cmp X1 X2)))\n 3. \\<And>X.\n       inv_translation (vertices (translation X)) \\<Longrightarrow>\n       inv_translation (vertices (translation (A_Cnv X)))\n 4. \\<And>x. inv_translation (vertices (translation (A_Lbl x)))", "note a b c"], ["proof (state)\nthis:\n  insert (card r) {0..<card z + card r - Suc 0} =\n  {0..<card z + card r - Suc 0}\n  {card r..<card z + card r - Suc 0} \\<union> {Suc 0..<card r} =\n  {Suc 0..<card z + card r - Suc 0}\n  card (r \\<union> {card r..<card z + card r - 2}) = card z + card r - 2\n\ngoal (4 subgoals):\n 1. \\<And>X1 X2.\n       \\<lbrakk>inv_translation (vertices (translation X1));\n        inv_translation (vertices (translation X2))\\<rbrakk>\n       \\<Longrightarrow> inv_translation\n                          (vertices (translation (A_Int X1 X2)))\n 2. \\<And>X1 X2.\n       \\<lbrakk>inv_translation (vertices (translation X1));\n        inv_translation (vertices (translation X2))\\<rbrakk>\n       \\<Longrightarrow> inv_translation\n                          (vertices (translation (A_Cmp X1 X2)))\n 3. \\<And>X.\n       inv_translation (vertices (translation X)) \\<Longrightarrow>\n       inv_translation (vertices (translation (A_Cnv X)))\n 4. \\<And>x. inv_translation (vertices (translation (A_Lbl x)))", "}"], ["proof (state)\nthis:\n  \\<lbrakk>inv_translation ?z2; inv_translation ?r2\\<rbrakk>\n  \\<Longrightarrow> insert (card ?r2) {0..<card ?z2 + card ?r2 - Suc 0} =\n                    {0..<card ?z2 + card ?r2 - Suc 0}\n  \\<lbrakk>inv_translation ?z2; inv_translation ?r2\\<rbrakk>\n  \\<Longrightarrow> {card ?r2..<card ?z2 + card ?r2 - Suc 0} \\<union>\n                    {Suc 0..<card ?r2} =\n                    {Suc 0..<card ?z2 + card ?r2 - Suc 0}\n  \\<lbrakk>inv_translation ?z2; inv_translation ?r2\\<rbrakk>\n  \\<Longrightarrow> card\n                     (?r2 \\<union> {card ?r2..<card ?z2 + card ?r2 - 2}) =\n                    card ?z2 + card ?r2 - 2\n\ngoal (4 subgoals):\n 1. \\<And>X1 X2.\n       \\<lbrakk>inv_translation (vertices (translation X1));\n        inv_translation (vertices (translation X2))\\<rbrakk>\n       \\<Longrightarrow> inv_translation\n                          (vertices (translation (A_Int X1 X2)))\n 2. \\<And>X1 X2.\n       \\<lbrakk>inv_translation (vertices (translation X1));\n        inv_translation (vertices (translation X2))\\<rbrakk>\n       \\<Longrightarrow> inv_translation\n                          (vertices (translation (A_Cmp X1 X2)))\n 3. \\<And>X.\n       inv_translation (vertices (translation X)) \\<Longrightarrow>\n       inv_translation (vertices (translation (A_Cnv X)))\n 4. \\<And>x. inv_translation (vertices (translation (A_Lbl x)))", "note [simp] = this"], ["proof (state)\nthis:\n  \\<lbrakk>inv_translation ?z2; inv_translation ?r2\\<rbrakk>\n  \\<Longrightarrow> insert (card ?r2) {0..<card ?z2 + card ?r2 - Suc 0} =\n                    {0..<card ?z2 + card ?r2 - Suc 0}\n  \\<lbrakk>inv_translation ?z2; inv_translation ?r2\\<rbrakk>\n  \\<Longrightarrow> {card ?r2..<card ?z2 + card ?r2 - Suc 0} \\<union>\n                    {Suc 0..<card ?r2} =\n                    {Suc 0..<card ?z2 + card ?r2 - Suc 0}\n  \\<lbrakk>inv_translation ?z2; inv_translation ?r2\\<rbrakk>\n  \\<Longrightarrow> card\n                     (?r2 \\<union> {card ?r2..<card ?z2 + card ?r2 - 2}) =\n                    card ?z2 + card ?r2 - 2\n\ngoal (4 subgoals):\n 1. \\<And>X1 X2.\n       \\<lbrakk>inv_translation (vertices (translation X1));\n        inv_translation (vertices (translation X2))\\<rbrakk>\n       \\<Longrightarrow> inv_translation\n                          (vertices (translation (A_Int X1 X2)))\n 2. \\<And>X1 X2.\n       \\<lbrakk>inv_translation (vertices (translation X1));\n        inv_translation (vertices (translation X2))\\<rbrakk>\n       \\<Longrightarrow> inv_translation\n                          (vertices (translation (A_Cmp X1 X2)))\n 3. \\<And>X.\n       inv_translation (vertices (translation X)) \\<Longrightarrow>\n       inv_translation (vertices (translation (A_Cnv X)))\n 4. \\<And>x. inv_translation (vertices (translation (A_Lbl x)))", "have [simp]:\"a < x \\<Longrightarrow> insert a {Suc a..<x} = {a..<x}\" for a x"], ["proof (prove)\ngoal (1 subgoal):\n 1. a < x \\<Longrightarrow> insert a {Suc a..<x} = {a..<x}", "by auto"], ["proof (state)\nthis:\n  ?a < ?x \\<Longrightarrow> insert ?a {Suc ?a..<?x} = {?a..<?x}\n\ngoal (4 subgoals):\n 1. \\<And>X1 X2.\n       \\<lbrakk>inv_translation (vertices (translation X1));\n        inv_translation (vertices (translation X2))\\<rbrakk>\n       \\<Longrightarrow> inv_translation\n                          (vertices (translation (A_Int X1 X2)))\n 2. \\<And>X1 X2.\n       \\<lbrakk>inv_translation (vertices (translation X1));\n        inv_translation (vertices (translation X2))\\<rbrakk>\n       \\<Longrightarrow> inv_translation\n                          (vertices (translation (A_Cmp X1 X2)))\n 3. \\<And>X.\n       inv_translation (vertices (translation X)) \\<Longrightarrow>\n       inv_translation (vertices (translation (A_Cnv X)))\n 4. \\<And>x. inv_translation (vertices (translation (A_Lbl x)))", "{"], ["proof (state)\nthis:\n  ?a < ?x \\<Longrightarrow> insert ?a {Suc ?a..<?x} = {?a..<?x}\n\ngoal (4 subgoals):\n 1. \\<And>X1 X2.\n       \\<lbrakk>inv_translation (vertices (translation X1));\n        inv_translation (vertices (translation X2))\\<rbrakk>\n       \\<Longrightarrow> inv_translation\n                          (vertices (translation (A_Int X1 X2)))\n 2. \\<And>X1 X2.\n       \\<lbrakk>inv_translation (vertices (translation X1));\n        inv_translation (vertices (translation X2))\\<rbrakk>\n       \\<Longrightarrow> inv_translation\n                          (vertices (translation (A_Cmp X1 X2)))\n 3. \\<And>X.\n       inv_translation (vertices (translation X)) \\<Longrightarrow>\n       inv_translation (vertices (translation (A_Cnv X)))\n 4. \\<And>x. inv_translation (vertices (translation (A_Lbl x)))", "case (A_Int X1 X2)"], ["proof (state)\nthis:\n  inv_translation (vertices (translation X1))\n  inv_translation (vertices (translation X2))\n\ngoal (4 subgoals):\n 1. \\<And>X1 X2.\n       \\<lbrakk>inv_translation (vertices (translation X1));\n        inv_translation (vertices (translation X2))\\<rbrakk>\n       \\<Longrightarrow> inv_translation\n                          (vertices (translation (A_Int X1 X2)))\n 2. \\<And>X1 X2.\n       \\<lbrakk>inv_translation (vertices (translation X1));\n        inv_translation (vertices (translation X2))\\<rbrakk>\n       \\<Longrightarrow> inv_translation\n                          (vertices (translation (A_Cmp X1 X2)))\n 3. \\<And>X.\n       inv_translation (vertices (translation X)) \\<Longrightarrow>\n       inv_translation (vertices (translation (A_Cnv X)))\n 4. \\<And>x. inv_translation (vertices (translation (A_Lbl x)))", "let ?v1 = \"vertices (translation X1)\""], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>X1 X2.\n       \\<lbrakk>inv_translation (vertices (translation X1));\n        inv_translation (vertices (translation X2))\\<rbrakk>\n       \\<Longrightarrow> inv_translation\n                          (vertices (translation (A_Int X1 X2)))\n 2. \\<And>X1 X2.\n       \\<lbrakk>inv_translation (vertices (translation X1));\n        inv_translation (vertices (translation X2))\\<rbrakk>\n       \\<Longrightarrow> inv_translation\n                          (vertices (translation (A_Cmp X1 X2)))\n 3. \\<And>X.\n       inv_translation (vertices (translation X)) \\<Longrightarrow>\n       inv_translation (vertices (translation (A_Cnv X)))\n 4. \\<And>x. inv_translation (vertices (translation (A_Lbl x)))", "from A_Int"], ["proof (chain)\npicking this:\n  inv_translation (vertices (translation X1))\n  inv_translation (vertices (translation X2))", "have [simp]:\"(insert 0 (insert (Suc 0) (?v1 \\<union> x))) = ?v1 \\<union> x\"\n      for x"], ["proof (prove)\nusing this:\n  inv_translation (vertices (translation X1))\n  inv_translation (vertices (translation X2))\n\ngoal (1 subgoal):\n 1. insert 0 (insert (Suc 0) (vertices (translation X1) \\<union> x)) =\n    vertices (translation X1) \\<union> x", "unfolding inv_translation_def"], ["proof (prove)\nusing this:\n  {0..<card (vertices (translation X1))} = vertices (translation X1) \\<and>\n  {0, 1} \\<subseteq> vertices (translation X1)\n  {0..<card (vertices (translation X2))} = vertices (translation X2) \\<and>\n  {0, 1} \\<subseteq> vertices (translation X2)\n\ngoal (1 subgoal):\n 1. insert 0 (insert (Suc 0) (vertices (translation X1) \\<union> x)) =\n    vertices (translation X1) \\<union> x", "by auto"], ["proof (state)\nthis:\n  insert 0 (insert (Suc 0) (vertices (translation X1) \\<union> ?x)) =\n  vertices (translation X1) \\<union> ?x\n\ngoal (4 subgoals):\n 1. \\<And>X1 X2.\n       \\<lbrakk>inv_translation (vertices (translation X1));\n        inv_translation (vertices (translation X2))\\<rbrakk>\n       \\<Longrightarrow> inv_translation\n                          (vertices (translation (A_Int X1 X2)))\n 2. \\<And>X1 X2.\n       \\<lbrakk>inv_translation (vertices (translation X1));\n        inv_translation (vertices (translation X2))\\<rbrakk>\n       \\<Longrightarrow> inv_translation\n                          (vertices (translation (A_Cmp X1 X2)))\n 3. \\<And>X.\n       inv_translation (vertices (translation X)) \\<Longrightarrow>\n       inv_translation (vertices (translation (A_Cnv X)))\n 4. \\<And>x. inv_translation (vertices (translation (A_Lbl x)))", "from A_Int"], ["proof (chain)\npicking this:\n  inv_translation (vertices (translation X1))\n  inv_translation (vertices (translation X2))", "show ?case"], ["proof (prove)\nusing this:\n  inv_translation (vertices (translation X1))\n  inv_translation (vertices (translation X2))\n\ngoal (1 subgoal):\n 1. inv_translation (vertices (translation (A_Int X1 X2)))", "by (auto simp:Let_def linorder_not_le)"], ["proof (state)\nthis:\n  inv_translation (vertices (translation (A_Int X1 X2)))\n\ngoal (3 subgoals):\n 1. \\<And>X1 X2.\n       \\<lbrakk>inv_translation (vertices (translation X1));\n        inv_translation (vertices (translation X2))\\<rbrakk>\n       \\<Longrightarrow> inv_translation\n                          (vertices (translation (A_Cmp X1 X2)))\n 2. \\<And>X.\n       inv_translation (vertices (translation X)) \\<Longrightarrow>\n       inv_translation (vertices (translation (A_Cnv X)))\n 3. \\<And>x. inv_translation (vertices (translation (A_Lbl x)))", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>X1 X2.\n       \\<lbrakk>inv_translation (vertices (translation X1));\n        inv_translation (vertices (translation X2))\\<rbrakk>\n       \\<Longrightarrow> inv_translation\n                          (vertices (translation (A_Cmp X1 X2)))\n 2. \\<And>X.\n       inv_translation (vertices (translation X)) \\<Longrightarrow>\n       inv_translation (vertices (translation (A_Cnv X)))\n 3. \\<And>x. inv_translation (vertices (translation (A_Lbl x)))", "case (A_Cmp X1 X2)"], ["proof (state)\nthis:\n  inv_translation (vertices (translation X1))\n  inv_translation (vertices (translation X2))\n\ngoal (3 subgoals):\n 1. \\<And>X1 X2.\n       \\<lbrakk>inv_translation (vertices (translation X1));\n        inv_translation (vertices (translation X2))\\<rbrakk>\n       \\<Longrightarrow> inv_translation\n                          (vertices (translation (A_Cmp X1 X2)))\n 2. \\<And>X.\n       inv_translation (vertices (translation X)) \\<Longrightarrow>\n       inv_translation (vertices (translation (A_Cnv X)))\n 3. \\<And>x. inv_translation (vertices (translation (A_Lbl x)))", "hence \"2\\<le>card (vertices (translation X1))\" \"2\\<le>card (vertices (translation X2))\""], ["proof (prove)\nusing this:\n  inv_translation (vertices (translation X1))\n  inv_translation (vertices (translation X2))\n\ngoal (1 subgoal):\n 1. 2 \\<le> card (vertices (translation X1)) &&&\n    2 \\<le> card (vertices (translation X2))", "by auto"], ["proof (state)\nthis:\n  2 \\<le> card (vertices (translation X1))\n  2 \\<le> card (vertices (translation X2))\n\ngoal (3 subgoals):\n 1. \\<And>X1 X2.\n       \\<lbrakk>inv_translation (vertices (translation X1));\n        inv_translation (vertices (translation X2))\\<rbrakk>\n       \\<Longrightarrow> inv_translation\n                          (vertices (translation (A_Cmp X1 X2)))\n 2. \\<And>X.\n       inv_translation (vertices (translation X)) \\<Longrightarrow>\n       inv_translation (vertices (translation (A_Cnv X)))\n 3. \\<And>x. inv_translation (vertices (translation (A_Lbl x)))", "hence \"1 \\<le>card (vertices (translation X1))\" \"1\\<le>card (vertices (translation X2))\"\n          \"1 < card (vertices (translation X1)) + card (vertices (translation X2)) - 1\""], ["proof (prove)\nusing this:\n  2 \\<le> card (vertices (translation X1))\n  2 \\<le> card (vertices (translation X2))\n\ngoal (1 subgoal):\n 1. 1 \\<le> card (vertices (translation X1)) &&&\n    1 \\<le> card (vertices (translation X2)) &&&\n    1 < card (vertices (translation X1)) +\n        card (vertices (translation X2)) -\n        1", "by auto"], ["proof (state)\nthis:\n  1 \\<le> card (vertices (translation X1))\n  1 \\<le> card (vertices (translation X2))\n  1 < card (vertices (translation X1)) + card (vertices (translation X2)) -\n      1\n\ngoal (3 subgoals):\n 1. \\<And>X1 X2.\n       \\<lbrakk>inv_translation (vertices (translation X1));\n        inv_translation (vertices (translation X2))\\<rbrakk>\n       \\<Longrightarrow> inv_translation\n                          (vertices (translation (A_Cmp X1 X2)))\n 2. \\<And>X.\n       inv_translation (vertices (translation X)) \\<Longrightarrow>\n       inv_translation (vertices (translation (A_Cnv X)))\n 3. \\<And>x. inv_translation (vertices (translation (A_Lbl x)))", "from this A_Cmp"], ["proof (chain)\npicking this:\n  1 \\<le> card (vertices (translation X1))\n  1 \\<le> card (vertices (translation X2))\n  1 < card (vertices (translation X1)) + card (vertices (translation X2)) -\n      1\n  inv_translation (vertices (translation X1))\n  inv_translation (vertices (translation X2))", "show ?case"], ["proof (prove)\nusing this:\n  1 \\<le> card (vertices (translation X1))\n  1 \\<le> card (vertices (translation X2))\n  1 < card (vertices (translation X1)) + card (vertices (translation X2)) -\n      1\n  inv_translation (vertices (translation X1))\n  inv_translation (vertices (translation X2))\n\ngoal (1 subgoal):\n 1. inv_translation (vertices (translation (A_Cmp X1 X2)))", "by (auto simp:Let_def)"], ["proof (state)\nthis:\n  inv_translation (vertices (translation (A_Cmp X1 X2)))\n\ngoal (2 subgoals):\n 1. \\<And>X.\n       inv_translation (vertices (translation X)) \\<Longrightarrow>\n       inv_translation (vertices (translation (A_Cnv X)))\n 2. \\<And>x. inv_translation (vertices (translation (A_Lbl x)))", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>X.\n       inv_translation (vertices (translation X)) \\<Longrightarrow>\n       inv_translation (vertices (translation (A_Cnv X)))\n 2. \\<And>x. inv_translation (vertices (translation (A_Lbl x)))", "case (A_Cnv X)"], ["proof (state)\nthis:\n  inv_translation (vertices (translation X))\n\ngoal (2 subgoals):\n 1. \\<And>X.\n       inv_translation (vertices (translation X)) \\<Longrightarrow>\n       inv_translation (vertices (translation (A_Cnv X)))\n 2. \\<And>x. inv_translation (vertices (translation (A_Lbl x)))", "thus ?case"], ["proof (prove)\nusing this:\n  inv_translation (vertices (translation X))\n\ngoal (1 subgoal):\n 1. inv_translation (vertices (translation (A_Cnv X)))", "by (auto simp:Let_def)"], ["proof (state)\nthis:\n  inv_translation (vertices (translation (A_Cnv X)))\n\ngoal (1 subgoal):\n 1. \\<And>x. inv_translation (vertices (translation (A_Lbl x)))", "}"], ["proof (state)\nthis:\n  inv_translation (vertices (translation ?Xa2)) \\<Longrightarrow>\n  inv_translation (vertices (translation (A_Cnv ?Xa2)))\n\ngoal (1 subgoal):\n 1. \\<And>x. inv_translation (vertices (translation (A_Lbl x)))", "qed auto"], ["", "lemma translation_graph[intro]:\n\"graph (translation X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. graph (translation X)", "by (induct X, auto simp:Let_def)"], ["", "lemma graph_rule_translation[intro]: (* remark at the end of Def 15 *)\n\"graph_rule (translation X, translation (A_Int X Y))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. graph_rule (translation X, translation (A_Int X Y))", "using verts_in_translation_finite[of X] verts_in_translation_finite[of \"A_Int X Y\"]\n        translation_graph[of X] translation_graph[of \"A_Int X Y\"]"], ["proof (prove)\nusing this:\n  finite (vertices (translation X))\n  finite (edges (translation X))\n  0 \\<in> vertices (translation X)\n  Suc 0 \\<in> vertices (translation X)\n  finite (vertices (translation (A_Int X Y)))\n  finite (edges (translation (A_Int X Y)))\n  0 \\<in> vertices (translation (A_Int X Y))\n  Suc 0 \\<in> vertices (translation (A_Int X Y))\n  graph (translation X)\n  graph (translation (A_Int X Y))\n\ngoal (1 subgoal):\n 1. graph_rule (translation X, translation (A_Int X Y))", "by (auto simp:Let_def subgraph_def2)"], ["", "lemma graph_hom_translation[intro]:\n  \"graph_homomorphism (LG {} {0,1}) (translation X) (Id_on {0,1})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. graph_homomorphism (LG {} {0, 1}) (translation X) (Id_on {0, 1})", "using verts_in_translation[of X]"], ["proof (prove)\nusing this:\n  inv_translation (vertices (translation X))\n\ngoal (1 subgoal):\n 1. graph_homomorphism (LG {} {0, 1}) (translation X) (Id_on {0, 1})", "unfolding inv_translation_def graph_homomorphism_def2"], ["proof (prove)\nusing this:\n  {0..<card (vertices (translation X))} = vertices (translation X) \\<and>\n  {0, 1} \\<subseteq> vertices (translation X)\n\ngoal (1 subgoal):\n 1. vertices (LG {} {0, 1}) = Domain (Id_on {0, 1}) \\<and>\n    univalent (Id_on {0, 1}) \\<and>\n    graph (LG {} {0, 1}) \\<and>\n    graph (translation X) \\<and>\n    graph_union (map_graph (Id_on {0, 1}) (LG {} {0, 1})) (translation X) =\n    translation X", "by auto"], ["", "lemma translation_right_to_left:\n  assumes f:\"graph_homomorphism (translation e) G f\" \"(0, x) \\<in> f\" \"(1, y) \\<in> f\"\n  shows \"(x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk>", "using f"], ["proof (prove)\nusing this:\n  graph_homomorphism (translation e) G f\n  (0, x) \\<in> f\n  (1, y) \\<in> f\n\ngoal (1 subgoal):\n 1. (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk>", "proof(induct e arbitrary:f x y)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>e1 e2 f x y.\n       \\<lbrakk>\\<And>f x y.\n                   \\<lbrakk>graph_homomorphism (translation e1) G f;\n                    (0, x) \\<in> f; (1, y) \\<in> f\\<rbrakk>\n                   \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>e1\\<rbrakk>;\n        \\<And>f x y.\n           \\<lbrakk>graph_homomorphism (translation e2) G f; (0, x) \\<in> f;\n            (1, y) \\<in> f\\<rbrakk>\n           \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>e2\\<rbrakk>;\n        graph_homomorphism (translation (A_Int e1 e2)) G f; (0, x) \\<in> f;\n        (1, y) \\<in> f\\<rbrakk>\n       \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>A_Int e1 e2\\<rbrakk>\n 2. \\<And>e1 e2 f x y.\n       \\<lbrakk>\\<And>f x y.\n                   \\<lbrakk>graph_homomorphism (translation e1) G f;\n                    (0, x) \\<in> f; (1, y) \\<in> f\\<rbrakk>\n                   \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>e1\\<rbrakk>;\n        \\<And>f x y.\n           \\<lbrakk>graph_homomorphism (translation e2) G f; (0, x) \\<in> f;\n            (1, y) \\<in> f\\<rbrakk>\n           \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>e2\\<rbrakk>;\n        graph_homomorphism (translation (A_Cmp e1 e2)) G f; (0, x) \\<in> f;\n        (1, y) \\<in> f\\<rbrakk>\n       \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>A_Cmp e1 e2\\<rbrakk>\n 3. \\<And>e f x y.\n       \\<lbrakk>\\<And>f x y.\n                   \\<lbrakk>graph_homomorphism (translation e) G f;\n                    (0, x) \\<in> f; (1, y) \\<in> f\\<rbrakk>\n                   \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk>;\n        graph_homomorphism (translation (A_Cnv e)) G f; (0, x) \\<in> f;\n        (1, y) \\<in> f\\<rbrakk>\n       \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>A_Cnv e\\<rbrakk>\n 4. \\<And>x f xa y.\n       \\<lbrakk>graph_homomorphism (translation (A_Lbl x)) G f;\n        (0, xa) \\<in> f; (1, y) \\<in> f\\<rbrakk>\n       \\<Longrightarrow> (xa, y) \\<in> :G:\\<lbrakk>A_Lbl x\\<rbrakk>", "case (A_Int e\\<^sub>1 e\\<^sub>2 f x y)"], ["proof (state)\nthis:\n  \\<lbrakk>graph_homomorphism (translation e\\<^sub>1) G ?f;\n   (0, ?x) \\<in> ?f; (1, ?y) \\<in> ?f\\<rbrakk>\n  \\<Longrightarrow> (?x, ?y) \\<in> :G:\\<lbrakk>e\\<^sub>1\\<rbrakk>\n  \\<lbrakk>graph_homomorphism (translation e\\<^sub>2) G ?f;\n   (0, ?x) \\<in> ?f; (1, ?y) \\<in> ?f\\<rbrakk>\n  \\<Longrightarrow> (?x, ?y) \\<in> :G:\\<lbrakk>e\\<^sub>2\\<rbrakk>\n  graph_homomorphism (translation (A_Int e\\<^sub>1 e\\<^sub>2)) G f\n  (0, x) \\<in> f\n  (1, y) \\<in> f\n\ngoal (4 subgoals):\n 1. \\<And>e1 e2 f x y.\n       \\<lbrakk>\\<And>f x y.\n                   \\<lbrakk>graph_homomorphism (translation e1) G f;\n                    (0, x) \\<in> f; (1, y) \\<in> f\\<rbrakk>\n                   \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>e1\\<rbrakk>;\n        \\<And>f x y.\n           \\<lbrakk>graph_homomorphism (translation e2) G f; (0, x) \\<in> f;\n            (1, y) \\<in> f\\<rbrakk>\n           \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>e2\\<rbrakk>;\n        graph_homomorphism (translation (A_Int e1 e2)) G f; (0, x) \\<in> f;\n        (1, y) \\<in> f\\<rbrakk>\n       \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>A_Int e1 e2\\<rbrakk>\n 2. \\<And>e1 e2 f x y.\n       \\<lbrakk>\\<And>f x y.\n                   \\<lbrakk>graph_homomorphism (translation e1) G f;\n                    (0, x) \\<in> f; (1, y) \\<in> f\\<rbrakk>\n                   \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>e1\\<rbrakk>;\n        \\<And>f x y.\n           \\<lbrakk>graph_homomorphism (translation e2) G f; (0, x) \\<in> f;\n            (1, y) \\<in> f\\<rbrakk>\n           \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>e2\\<rbrakk>;\n        graph_homomorphism (translation (A_Cmp e1 e2)) G f; (0, x) \\<in> f;\n        (1, y) \\<in> f\\<rbrakk>\n       \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>A_Cmp e1 e2\\<rbrakk>\n 3. \\<And>e f x y.\n       \\<lbrakk>\\<And>f x y.\n                   \\<lbrakk>graph_homomorphism (translation e) G f;\n                    (0, x) \\<in> f; (1, y) \\<in> f\\<rbrakk>\n                   \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk>;\n        graph_homomorphism (translation (A_Cnv e)) G f; (0, x) \\<in> f;\n        (1, y) \\<in> f\\<rbrakk>\n       \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>A_Cnv e\\<rbrakk>\n 4. \\<And>x f xa y.\n       \\<lbrakk>graph_homomorphism (translation (A_Lbl x)) G f;\n        (0, xa) \\<in> f; (1, y) \\<in> f\\<rbrakk>\n       \\<Longrightarrow> (xa, y) \\<in> :G:\\<lbrakk>A_Lbl x\\<rbrakk>", "let ?f\\<^sub>1 = \"id\""], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>e1 e2 f x y.\n       \\<lbrakk>\\<And>f x y.\n                   \\<lbrakk>graph_homomorphism (translation e1) G f;\n                    (0, x) \\<in> f; (1, y) \\<in> f\\<rbrakk>\n                   \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>e1\\<rbrakk>;\n        \\<And>f x y.\n           \\<lbrakk>graph_homomorphism (translation e2) G f; (0, x) \\<in> f;\n            (1, y) \\<in> f\\<rbrakk>\n           \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>e2\\<rbrakk>;\n        graph_homomorphism (translation (A_Int e1 e2)) G f; (0, x) \\<in> f;\n        (1, y) \\<in> f\\<rbrakk>\n       \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>A_Int e1 e2\\<rbrakk>\n 2. \\<And>e1 e2 f x y.\n       \\<lbrakk>\\<And>f x y.\n                   \\<lbrakk>graph_homomorphism (translation e1) G f;\n                    (0, x) \\<in> f; (1, y) \\<in> f\\<rbrakk>\n                   \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>e1\\<rbrakk>;\n        \\<And>f x y.\n           \\<lbrakk>graph_homomorphism (translation e2) G f; (0, x) \\<in> f;\n            (1, y) \\<in> f\\<rbrakk>\n           \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>e2\\<rbrakk>;\n        graph_homomorphism (translation (A_Cmp e1 e2)) G f; (0, x) \\<in> f;\n        (1, y) \\<in> f\\<rbrakk>\n       \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>A_Cmp e1 e2\\<rbrakk>\n 3. \\<And>e f x y.\n       \\<lbrakk>\\<And>f x y.\n                   \\<lbrakk>graph_homomorphism (translation e) G f;\n                    (0, x) \\<in> f; (1, y) \\<in> f\\<rbrakk>\n                   \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk>;\n        graph_homomorphism (translation (A_Cnv e)) G f; (0, x) \\<in> f;\n        (1, y) \\<in> f\\<rbrakk>\n       \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>A_Cnv e\\<rbrakk>\n 4. \\<And>x f xa y.\n       \\<lbrakk>graph_homomorphism (translation (A_Lbl x)) G f;\n        (0, xa) \\<in> f; (1, y) \\<in> f\\<rbrakk>\n       \\<Longrightarrow> (xa, y) \\<in> :G:\\<lbrakk>A_Lbl x\\<rbrakk>", "let ?f\\<^sub>2 = \"(\\<lambda> x. if x < 2 then x else x + card (vertices (translation e\\<^sub>1)) - 2)\""], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>e1 e2 f x y.\n       \\<lbrakk>\\<And>f x y.\n                   \\<lbrakk>graph_homomorphism (translation e1) G f;\n                    (0, x) \\<in> f; (1, y) \\<in> f\\<rbrakk>\n                   \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>e1\\<rbrakk>;\n        \\<And>f x y.\n           \\<lbrakk>graph_homomorphism (translation e2) G f; (0, x) \\<in> f;\n            (1, y) \\<in> f\\<rbrakk>\n           \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>e2\\<rbrakk>;\n        graph_homomorphism (translation (A_Int e1 e2)) G f; (0, x) \\<in> f;\n        (1, y) \\<in> f\\<rbrakk>\n       \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>A_Int e1 e2\\<rbrakk>\n 2. \\<And>e1 e2 f x y.\n       \\<lbrakk>\\<And>f x y.\n                   \\<lbrakk>graph_homomorphism (translation e1) G f;\n                    (0, x) \\<in> f; (1, y) \\<in> f\\<rbrakk>\n                   \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>e1\\<rbrakk>;\n        \\<And>f x y.\n           \\<lbrakk>graph_homomorphism (translation e2) G f; (0, x) \\<in> f;\n            (1, y) \\<in> f\\<rbrakk>\n           \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>e2\\<rbrakk>;\n        graph_homomorphism (translation (A_Cmp e1 e2)) G f; (0, x) \\<in> f;\n        (1, y) \\<in> f\\<rbrakk>\n       \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>A_Cmp e1 e2\\<rbrakk>\n 3. \\<And>e f x y.\n       \\<lbrakk>\\<And>f x y.\n                   \\<lbrakk>graph_homomorphism (translation e) G f;\n                    (0, x) \\<in> f; (1, y) \\<in> f\\<rbrakk>\n                   \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk>;\n        graph_homomorphism (translation (A_Cnv e)) G f; (0, x) \\<in> f;\n        (1, y) \\<in> f\\<rbrakk>\n       \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>A_Cnv e\\<rbrakk>\n 4. \\<And>x f xa y.\n       \\<lbrakk>graph_homomorphism (translation (A_Lbl x)) G f;\n        (0, xa) \\<in> f; (1, y) \\<in> f\\<rbrakk>\n       \\<Longrightarrow> (xa, y) \\<in> :G:\\<lbrakk>A_Lbl x\\<rbrakk>", "let ?G\\<^sub>1 = \"translation e\\<^sub>1\""], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>e1 e2 f x y.\n       \\<lbrakk>\\<And>f x y.\n                   \\<lbrakk>graph_homomorphism (translation e1) G f;\n                    (0, x) \\<in> f; (1, y) \\<in> f\\<rbrakk>\n                   \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>e1\\<rbrakk>;\n        \\<And>f x y.\n           \\<lbrakk>graph_homomorphism (translation e2) G f; (0, x) \\<in> f;\n            (1, y) \\<in> f\\<rbrakk>\n           \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>e2\\<rbrakk>;\n        graph_homomorphism (translation (A_Int e1 e2)) G f; (0, x) \\<in> f;\n        (1, y) \\<in> f\\<rbrakk>\n       \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>A_Int e1 e2\\<rbrakk>\n 2. \\<And>e1 e2 f x y.\n       \\<lbrakk>\\<And>f x y.\n                   \\<lbrakk>graph_homomorphism (translation e1) G f;\n                    (0, x) \\<in> f; (1, y) \\<in> f\\<rbrakk>\n                   \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>e1\\<rbrakk>;\n        \\<And>f x y.\n           \\<lbrakk>graph_homomorphism (translation e2) G f; (0, x) \\<in> f;\n            (1, y) \\<in> f\\<rbrakk>\n           \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>e2\\<rbrakk>;\n        graph_homomorphism (translation (A_Cmp e1 e2)) G f; (0, x) \\<in> f;\n        (1, y) \\<in> f\\<rbrakk>\n       \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>A_Cmp e1 e2\\<rbrakk>\n 3. \\<And>e f x y.\n       \\<lbrakk>\\<And>f x y.\n                   \\<lbrakk>graph_homomorphism (translation e) G f;\n                    (0, x) \\<in> f; (1, y) \\<in> f\\<rbrakk>\n                   \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk>;\n        graph_homomorphism (translation (A_Cnv e)) G f; (0, x) \\<in> f;\n        (1, y) \\<in> f\\<rbrakk>\n       \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>A_Cnv e\\<rbrakk>\n 4. \\<And>x f xa y.\n       \\<lbrakk>graph_homomorphism (translation (A_Lbl x)) G f;\n        (0, xa) \\<in> f; (1, y) \\<in> f\\<rbrakk>\n       \\<Longrightarrow> (xa, y) \\<in> :G:\\<lbrakk>A_Lbl x\\<rbrakk>", "let ?G\\<^sub>2 = \"translation e\\<^sub>2\""], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>e1 e2 f x y.\n       \\<lbrakk>\\<And>f x y.\n                   \\<lbrakk>graph_homomorphism (translation e1) G f;\n                    (0, x) \\<in> f; (1, y) \\<in> f\\<rbrakk>\n                   \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>e1\\<rbrakk>;\n        \\<And>f x y.\n           \\<lbrakk>graph_homomorphism (translation e2) G f; (0, x) \\<in> f;\n            (1, y) \\<in> f\\<rbrakk>\n           \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>e2\\<rbrakk>;\n        graph_homomorphism (translation (A_Int e1 e2)) G f; (0, x) \\<in> f;\n        (1, y) \\<in> f\\<rbrakk>\n       \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>A_Int e1 e2\\<rbrakk>\n 2. \\<And>e1 e2 f x y.\n       \\<lbrakk>\\<And>f x y.\n                   \\<lbrakk>graph_homomorphism (translation e1) G f;\n                    (0, x) \\<in> f; (1, y) \\<in> f\\<rbrakk>\n                   \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>e1\\<rbrakk>;\n        \\<And>f x y.\n           \\<lbrakk>graph_homomorphism (translation e2) G f; (0, x) \\<in> f;\n            (1, y) \\<in> f\\<rbrakk>\n           \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>e2\\<rbrakk>;\n        graph_homomorphism (translation (A_Cmp e1 e2)) G f; (0, x) \\<in> f;\n        (1, y) \\<in> f\\<rbrakk>\n       \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>A_Cmp e1 e2\\<rbrakk>\n 3. \\<And>e f x y.\n       \\<lbrakk>\\<And>f x y.\n                   \\<lbrakk>graph_homomorphism (translation e) G f;\n                    (0, x) \\<in> f; (1, y) \\<in> f\\<rbrakk>\n                   \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk>;\n        graph_homomorphism (translation (A_Cnv e)) G f; (0, x) \\<in> f;\n        (1, y) \\<in> f\\<rbrakk>\n       \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>A_Cnv e\\<rbrakk>\n 4. \\<And>x f xa y.\n       \\<lbrakk>graph_homomorphism (translation (A_Lbl x)) G f;\n        (0, xa) \\<in> f; (1, y) \\<in> f\\<rbrakk>\n       \\<Longrightarrow> (xa, y) \\<in> :G:\\<lbrakk>A_Lbl x\\<rbrakk>", "have f1:\"(0, x) \\<in> on_graph ?G\\<^sub>1 ?f\\<^sub>1 O f\" \"(1, y) \\<in> on_graph ?G\\<^sub>1 ?f\\<^sub>1 O f\"\n   and f2:\"(0, x) \\<in> on_graph ?G\\<^sub>2 ?f\\<^sub>2 O f\" \"(1, y) \\<in> on_graph ?G\\<^sub>2 ?f\\<^sub>2 O f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((0, x) \\<in> on_graph (translation e\\<^sub>1) id O f &&&\n     (1, y) \\<in> on_graph (translation e\\<^sub>1) id O f) &&&\n    (0, x)\n    \\<in> on_graph (translation e\\<^sub>2)\n           (\\<lambda>x.\n               if x < 2 then x\n               else x + card (vertices (translation e\\<^sub>1)) - 2) O\n          f &&&\n    (1, y)\n    \\<in> on_graph (translation e\\<^sub>2)\n           (\\<lambda>x.\n               if x < 2 then x\n               else x + card (vertices (translation e\\<^sub>1)) - 2) O\n          f", "using A_Int.prems(2,3)"], ["proof (prove)\nusing this:\n  (0, x) \\<in> f\n  (1, y) \\<in> f\n\ngoal (1 subgoal):\n 1. ((0, x) \\<in> on_graph (translation e\\<^sub>1) id O f &&&\n     (1, y) \\<in> on_graph (translation e\\<^sub>1) id O f) &&&\n    (0, x)\n    \\<in> on_graph (translation e\\<^sub>2)\n           (\\<lambda>x.\n               if x < 2 then x\n               else x + card (vertices (translation e\\<^sub>1)) - 2) O\n          f &&&\n    (1, y)\n    \\<in> on_graph (translation e\\<^sub>2)\n           (\\<lambda>x.\n               if x < 2 then x\n               else x + card (vertices (translation e\\<^sub>1)) - 2) O\n          f", "by (auto simp:BNF_Def.Gr_def relcomp_def)"], ["proof (state)\nthis:\n  (0, x) \\<in> on_graph (translation e\\<^sub>1) id O f\n  (1, y) \\<in> on_graph (translation e\\<^sub>1) id O f\n  (0, x)\n  \\<in> on_graph (translation e\\<^sub>2)\n         (\\<lambda>x.\n             if x < 2 then x\n             else x + card (vertices (translation e\\<^sub>1)) - 2) O\n        f\n  (1, y)\n  \\<in> on_graph (translation e\\<^sub>2)\n         (\\<lambda>x.\n             if x < 2 then x\n             else x + card (vertices (translation e\\<^sub>1)) - 2) O\n        f\n\ngoal (4 subgoals):\n 1. \\<And>e1 e2 f x y.\n       \\<lbrakk>\\<And>f x y.\n                   \\<lbrakk>graph_homomorphism (translation e1) G f;\n                    (0, x) \\<in> f; (1, y) \\<in> f\\<rbrakk>\n                   \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>e1\\<rbrakk>;\n        \\<And>f x y.\n           \\<lbrakk>graph_homomorphism (translation e2) G f; (0, x) \\<in> f;\n            (1, y) \\<in> f\\<rbrakk>\n           \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>e2\\<rbrakk>;\n        graph_homomorphism (translation (A_Int e1 e2)) G f; (0, x) \\<in> f;\n        (1, y) \\<in> f\\<rbrakk>\n       \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>A_Int e1 e2\\<rbrakk>\n 2. \\<And>e1 e2 f x y.\n       \\<lbrakk>\\<And>f x y.\n                   \\<lbrakk>graph_homomorphism (translation e1) G f;\n                    (0, x) \\<in> f; (1, y) \\<in> f\\<rbrakk>\n                   \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>e1\\<rbrakk>;\n        \\<And>f x y.\n           \\<lbrakk>graph_homomorphism (translation e2) G f; (0, x) \\<in> f;\n            (1, y) \\<in> f\\<rbrakk>\n           \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>e2\\<rbrakk>;\n        graph_homomorphism (translation (A_Cmp e1 e2)) G f; (0, x) \\<in> f;\n        (1, y) \\<in> f\\<rbrakk>\n       \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>A_Cmp e1 e2\\<rbrakk>\n 3. \\<And>e f x y.\n       \\<lbrakk>\\<And>f x y.\n                   \\<lbrakk>graph_homomorphism (translation e) G f;\n                    (0, x) \\<in> f; (1, y) \\<in> f\\<rbrakk>\n                   \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk>;\n        graph_homomorphism (translation (A_Cnv e)) G f; (0, x) \\<in> f;\n        (1, y) \\<in> f\\<rbrakk>\n       \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>A_Cnv e\\<rbrakk>\n 4. \\<And>x f xa y.\n       \\<lbrakk>graph_homomorphism (translation (A_Lbl x)) G f;\n        (0, xa) \\<in> f; (1, y) \\<in> f\\<rbrakk>\n       \\<Longrightarrow> (xa, y) \\<in> :G:\\<lbrakk>A_Lbl x\\<rbrakk>", "from A_Int.prems(1)"], ["proof (chain)\npicking this:\n  graph_homomorphism (translation (A_Int e\\<^sub>1 e\\<^sub>2)) G f", "have uni:\"graph_homomorphism (graph_union ?G\\<^sub>1 (map_graph_fn ?G\\<^sub>2 ?f\\<^sub>2)) G f\""], ["proof (prove)\nusing this:\n  graph_homomorphism (translation (A_Int e\\<^sub>1 e\\<^sub>2)) G f\n\ngoal (1 subgoal):\n 1. graph_homomorphism\n     (graph_union (translation e\\<^sub>1)\n       (map_graph_fn (translation e\\<^sub>2)\n         (\\<lambda>x.\n             if x < 2 then x\n             else x + card (vertices (translation e\\<^sub>1)) - 2)))\n     G f", "by (auto simp:Let_def)"], ["proof (state)\nthis:\n  graph_homomorphism\n   (graph_union (translation e\\<^sub>1)\n     (map_graph_fn (translation e\\<^sub>2)\n       (\\<lambda>x.\n           if x < 2 then x\n           else x + card (vertices (translation e\\<^sub>1)) - 2)))\n   G f\n\ngoal (4 subgoals):\n 1. \\<And>e1 e2 f x y.\n       \\<lbrakk>\\<And>f x y.\n                   \\<lbrakk>graph_homomorphism (translation e1) G f;\n                    (0, x) \\<in> f; (1, y) \\<in> f\\<rbrakk>\n                   \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>e1\\<rbrakk>;\n        \\<And>f x y.\n           \\<lbrakk>graph_homomorphism (translation e2) G f; (0, x) \\<in> f;\n            (1, y) \\<in> f\\<rbrakk>\n           \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>e2\\<rbrakk>;\n        graph_homomorphism (translation (A_Int e1 e2)) G f; (0, x) \\<in> f;\n        (1, y) \\<in> f\\<rbrakk>\n       \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>A_Int e1 e2\\<rbrakk>\n 2. \\<And>e1 e2 f x y.\n       \\<lbrakk>\\<And>f x y.\n                   \\<lbrakk>graph_homomorphism (translation e1) G f;\n                    (0, x) \\<in> f; (1, y) \\<in> f\\<rbrakk>\n                   \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>e1\\<rbrakk>;\n        \\<And>f x y.\n           \\<lbrakk>graph_homomorphism (translation e2) G f; (0, x) \\<in> f;\n            (1, y) \\<in> f\\<rbrakk>\n           \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>e2\\<rbrakk>;\n        graph_homomorphism (translation (A_Cmp e1 e2)) G f; (0, x) \\<in> f;\n        (1, y) \\<in> f\\<rbrakk>\n       \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>A_Cmp e1 e2\\<rbrakk>\n 3. \\<And>e f x y.\n       \\<lbrakk>\\<And>f x y.\n                   \\<lbrakk>graph_homomorphism (translation e) G f;\n                    (0, x) \\<in> f; (1, y) \\<in> f\\<rbrakk>\n                   \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk>;\n        graph_homomorphism (translation (A_Cnv e)) G f; (0, x) \\<in> f;\n        (1, y) \\<in> f\\<rbrakk>\n       \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>A_Cnv e\\<rbrakk>\n 4. \\<And>x f xa y.\n       \\<lbrakk>graph_homomorphism (translation (A_Lbl x)) G f;\n        (0, xa) \\<in> f; (1, y) \\<in> f\\<rbrakk>\n       \\<Longrightarrow> (xa, y) \\<in> :G:\\<lbrakk>A_Lbl x\\<rbrakk>", "from graph_homo_union_id(1)[OF uni translation_graph]"], ["proof (chain)\npicking this:\n  graph_homomorphism (translation e\\<^sub>1) G\n   (Id_on (vertices (translation e\\<^sub>1)) O f)", "have h1:\"graph_homomorphism ?G\\<^sub>1 (translation (A_Int e\\<^sub>1 e\\<^sub>2)) (on_graph ?G\\<^sub>1 id)\""], ["proof (prove)\nusing this:\n  graph_homomorphism (translation e\\<^sub>1) G\n   (Id_on (vertices (translation e\\<^sub>1)) O f)\n\ngoal (1 subgoal):\n 1. graph_homomorphism (translation e\\<^sub>1)\n     (translation (A_Int e\\<^sub>1 e\\<^sub>2))\n     (on_graph (translation e\\<^sub>1) id)", "by (auto simp:Let_def graph_homomorphism_def)"], ["proof (state)\nthis:\n  graph_homomorphism (translation e\\<^sub>1)\n   (translation (A_Int e\\<^sub>1 e\\<^sub>2))\n   (on_graph (translation e\\<^sub>1) id)\n\ngoal (4 subgoals):\n 1. \\<And>e1 e2 f x y.\n       \\<lbrakk>\\<And>f x y.\n                   \\<lbrakk>graph_homomorphism (translation e1) G f;\n                    (0, x) \\<in> f; (1, y) \\<in> f\\<rbrakk>\n                   \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>e1\\<rbrakk>;\n        \\<And>f x y.\n           \\<lbrakk>graph_homomorphism (translation e2) G f; (0, x) \\<in> f;\n            (1, y) \\<in> f\\<rbrakk>\n           \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>e2\\<rbrakk>;\n        graph_homomorphism (translation (A_Int e1 e2)) G f; (0, x) \\<in> f;\n        (1, y) \\<in> f\\<rbrakk>\n       \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>A_Int e1 e2\\<rbrakk>\n 2. \\<And>e1 e2 f x y.\n       \\<lbrakk>\\<And>f x y.\n                   \\<lbrakk>graph_homomorphism (translation e1) G f;\n                    (0, x) \\<in> f; (1, y) \\<in> f\\<rbrakk>\n                   \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>e1\\<rbrakk>;\n        \\<And>f x y.\n           \\<lbrakk>graph_homomorphism (translation e2) G f; (0, x) \\<in> f;\n            (1, y) \\<in> f\\<rbrakk>\n           \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>e2\\<rbrakk>;\n        graph_homomorphism (translation (A_Cmp e1 e2)) G f; (0, x) \\<in> f;\n        (1, y) \\<in> f\\<rbrakk>\n       \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>A_Cmp e1 e2\\<rbrakk>\n 3. \\<And>e f x y.\n       \\<lbrakk>\\<And>f x y.\n                   \\<lbrakk>graph_homomorphism (translation e) G f;\n                    (0, x) \\<in> f; (1, y) \\<in> f\\<rbrakk>\n                   \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk>;\n        graph_homomorphism (translation (A_Cnv e)) G f; (0, x) \\<in> f;\n        (1, y) \\<in> f\\<rbrakk>\n       \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>A_Cnv e\\<rbrakk>\n 4. \\<And>x f xa y.\n       \\<lbrakk>graph_homomorphism (translation (A_Lbl x)) G f;\n        (0, xa) \\<in> f; (1, y) \\<in> f\\<rbrakk>\n       \\<Longrightarrow> (xa, y) \\<in> :G:\\<lbrakk>A_Lbl x\\<rbrakk>", "have \"graph (map_graph_fn ?G\\<^sub>2 ?f\\<^sub>2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. graph\n     (map_graph_fn (translation e\\<^sub>2)\n       (\\<lambda>x.\n           if x < 2 then x\n           else x + card (vertices (translation e\\<^sub>1)) - 2))", "by auto"], ["proof (state)\nthis:\n  graph\n   (map_graph_fn (translation e\\<^sub>2)\n     (\\<lambda>x.\n         if x < 2 then x\n         else x + card (vertices (translation e\\<^sub>1)) - 2))\n\ngoal (4 subgoals):\n 1. \\<And>e1 e2 f x y.\n       \\<lbrakk>\\<And>f x y.\n                   \\<lbrakk>graph_homomorphism (translation e1) G f;\n                    (0, x) \\<in> f; (1, y) \\<in> f\\<rbrakk>\n                   \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>e1\\<rbrakk>;\n        \\<And>f x y.\n           \\<lbrakk>graph_homomorphism (translation e2) G f; (0, x) \\<in> f;\n            (1, y) \\<in> f\\<rbrakk>\n           \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>e2\\<rbrakk>;\n        graph_homomorphism (translation (A_Int e1 e2)) G f; (0, x) \\<in> f;\n        (1, y) \\<in> f\\<rbrakk>\n       \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>A_Int e1 e2\\<rbrakk>\n 2. \\<And>e1 e2 f x y.\n       \\<lbrakk>\\<And>f x y.\n                   \\<lbrakk>graph_homomorphism (translation e1) G f;\n                    (0, x) \\<in> f; (1, y) \\<in> f\\<rbrakk>\n                   \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>e1\\<rbrakk>;\n        \\<And>f x y.\n           \\<lbrakk>graph_homomorphism (translation e2) G f; (0, x) \\<in> f;\n            (1, y) \\<in> f\\<rbrakk>\n           \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>e2\\<rbrakk>;\n        graph_homomorphism (translation (A_Cmp e1 e2)) G f; (0, x) \\<in> f;\n        (1, y) \\<in> f\\<rbrakk>\n       \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>A_Cmp e1 e2\\<rbrakk>\n 3. \\<And>e f x y.\n       \\<lbrakk>\\<And>f x y.\n                   \\<lbrakk>graph_homomorphism (translation e) G f;\n                    (0, x) \\<in> f; (1, y) \\<in> f\\<rbrakk>\n                   \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk>;\n        graph_homomorphism (translation (A_Cnv e)) G f; (0, x) \\<in> f;\n        (1, y) \\<in> f\\<rbrakk>\n       \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>A_Cnv e\\<rbrakk>\n 4. \\<And>x f xa y.\n       \\<lbrakk>graph_homomorphism (translation (A_Lbl x)) G f;\n        (0, xa) \\<in> f; (1, y) \\<in> f\\<rbrakk>\n       \\<Longrightarrow> (xa, y) \\<in> :G:\\<lbrakk>A_Lbl x\\<rbrakk>", "from graph_homo_union_id(2)[OF uni this]"], ["proof (chain)\npicking this:\n  graph_homomorphism\n   (map_graph_fn (translation e\\<^sub>2)\n     (\\<lambda>x.\n         if x < 2 then x\n         else x + card (vertices (translation e\\<^sub>1)) - 2))\n   G (Id_on\n       (vertices\n         (map_graph_fn (translation e\\<^sub>2)\n           (\\<lambda>x.\n               if x < 2 then x\n               else x + card (vertices (translation e\\<^sub>1)) - 2))) O\n      f)", "have h2:\"graph_homomorphism ?G\\<^sub>2 (translation (A_Int e\\<^sub>1 e\\<^sub>2)) (on_graph ?G\\<^sub>2 ?f\\<^sub>2)\""], ["proof (prove)\nusing this:\n  graph_homomorphism\n   (map_graph_fn (translation e\\<^sub>2)\n     (\\<lambda>x.\n         if x < 2 then x\n         else x + card (vertices (translation e\\<^sub>1)) - 2))\n   G (Id_on\n       (vertices\n         (map_graph_fn (translation e\\<^sub>2)\n           (\\<lambda>x.\n               if x < 2 then x\n               else x + card (vertices (translation e\\<^sub>1)) - 2))) O\n      f)\n\ngoal (1 subgoal):\n 1. graph_homomorphism (translation e\\<^sub>2)\n     (translation (A_Int e\\<^sub>1 e\\<^sub>2))\n     (on_graph (translation e\\<^sub>2)\n       (\\<lambda>x.\n           if x < 2 then x\n           else x + card (vertices (translation e\\<^sub>1)) - 2))", "by (auto simp:Let_def graph_homomorphism_def)"], ["proof (state)\nthis:\n  graph_homomorphism (translation e\\<^sub>2)\n   (translation (A_Int e\\<^sub>1 e\\<^sub>2))\n   (on_graph (translation e\\<^sub>2)\n     (\\<lambda>x.\n         if x < 2 then x\n         else x + card (vertices (translation e\\<^sub>1)) - 2))\n\ngoal (4 subgoals):\n 1. \\<And>e1 e2 f x y.\n       \\<lbrakk>\\<And>f x y.\n                   \\<lbrakk>graph_homomorphism (translation e1) G f;\n                    (0, x) \\<in> f; (1, y) \\<in> f\\<rbrakk>\n                   \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>e1\\<rbrakk>;\n        \\<And>f x y.\n           \\<lbrakk>graph_homomorphism (translation e2) G f; (0, x) \\<in> f;\n            (1, y) \\<in> f\\<rbrakk>\n           \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>e2\\<rbrakk>;\n        graph_homomorphism (translation (A_Int e1 e2)) G f; (0, x) \\<in> f;\n        (1, y) \\<in> f\\<rbrakk>\n       \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>A_Int e1 e2\\<rbrakk>\n 2. \\<And>e1 e2 f x y.\n       \\<lbrakk>\\<And>f x y.\n                   \\<lbrakk>graph_homomorphism (translation e1) G f;\n                    (0, x) \\<in> f; (1, y) \\<in> f\\<rbrakk>\n                   \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>e1\\<rbrakk>;\n        \\<And>f x y.\n           \\<lbrakk>graph_homomorphism (translation e2) G f; (0, x) \\<in> f;\n            (1, y) \\<in> f\\<rbrakk>\n           \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>e2\\<rbrakk>;\n        graph_homomorphism (translation (A_Cmp e1 e2)) G f; (0, x) \\<in> f;\n        (1, y) \\<in> f\\<rbrakk>\n       \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>A_Cmp e1 e2\\<rbrakk>\n 3. \\<And>e f x y.\n       \\<lbrakk>\\<And>f x y.\n                   \\<lbrakk>graph_homomorphism (translation e) G f;\n                    (0, x) \\<in> f; (1, y) \\<in> f\\<rbrakk>\n                   \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk>;\n        graph_homomorphism (translation (A_Cnv e)) G f; (0, x) \\<in> f;\n        (1, y) \\<in> f\\<rbrakk>\n       \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>A_Cnv e\\<rbrakk>\n 4. \\<And>x f xa y.\n       \\<lbrakk>graph_homomorphism (translation (A_Lbl x)) G f;\n        (0, xa) \\<in> f; (1, y) \\<in> f\\<rbrakk>\n       \\<Longrightarrow> (xa, y) \\<in> :G:\\<lbrakk>A_Lbl x\\<rbrakk>", "from A_Int.hyps(1)[OF graph_homomorphism_composes[OF h1 A_Int.prems(1)] f1]\n       A_Int.hyps(2)[OF graph_homomorphism_composes[OF h2 A_Int.prems(1)] f2]"], ["proof (chain)\npicking this:\n  (x, y) \\<in> :G:\\<lbrakk>e\\<^sub>1\\<rbrakk>\n  (x, y) \\<in> :G:\\<lbrakk>e\\<^sub>2\\<rbrakk>", "show ?case"], ["proof (prove)\nusing this:\n  (x, y) \\<in> :G:\\<lbrakk>e\\<^sub>1\\<rbrakk>\n  (x, y) \\<in> :G:\\<lbrakk>e\\<^sub>2\\<rbrakk>\n\ngoal (1 subgoal):\n 1. (x, y) \\<in> :G:\\<lbrakk>A_Int e\\<^sub>1 e\\<^sub>2\\<rbrakk>", "by auto"], ["proof (state)\nthis:\n  (x, y) \\<in> :G:\\<lbrakk>A_Int e\\<^sub>1 e\\<^sub>2\\<rbrakk>\n\ngoal (3 subgoals):\n 1. \\<And>e1 e2 f x y.\n       \\<lbrakk>\\<And>f x y.\n                   \\<lbrakk>graph_homomorphism (translation e1) G f;\n                    (0, x) \\<in> f; (1, y) \\<in> f\\<rbrakk>\n                   \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>e1\\<rbrakk>;\n        \\<And>f x y.\n           \\<lbrakk>graph_homomorphism (translation e2) G f; (0, x) \\<in> f;\n            (1, y) \\<in> f\\<rbrakk>\n           \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>e2\\<rbrakk>;\n        graph_homomorphism (translation (A_Cmp e1 e2)) G f; (0, x) \\<in> f;\n        (1, y) \\<in> f\\<rbrakk>\n       \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>A_Cmp e1 e2\\<rbrakk>\n 2. \\<And>e f x y.\n       \\<lbrakk>\\<And>f x y.\n                   \\<lbrakk>graph_homomorphism (translation e) G f;\n                    (0, x) \\<in> f; (1, y) \\<in> f\\<rbrakk>\n                   \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk>;\n        graph_homomorphism (translation (A_Cnv e)) G f; (0, x) \\<in> f;\n        (1, y) \\<in> f\\<rbrakk>\n       \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>A_Cnv e\\<rbrakk>\n 3. \\<And>x f xa y.\n       \\<lbrakk>graph_homomorphism (translation (A_Lbl x)) G f;\n        (0, xa) \\<in> f; (1, y) \\<in> f\\<rbrakk>\n       \\<Longrightarrow> (xa, y) \\<in> :G:\\<lbrakk>A_Lbl x\\<rbrakk>", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>e1 e2 f x y.\n       \\<lbrakk>\\<And>f x y.\n                   \\<lbrakk>graph_homomorphism (translation e1) G f;\n                    (0, x) \\<in> f; (1, y) \\<in> f\\<rbrakk>\n                   \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>e1\\<rbrakk>;\n        \\<And>f x y.\n           \\<lbrakk>graph_homomorphism (translation e2) G f; (0, x) \\<in> f;\n            (1, y) \\<in> f\\<rbrakk>\n           \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>e2\\<rbrakk>;\n        graph_homomorphism (translation (A_Cmp e1 e2)) G f; (0, x) \\<in> f;\n        (1, y) \\<in> f\\<rbrakk>\n       \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>A_Cmp e1 e2\\<rbrakk>\n 2. \\<And>e f x y.\n       \\<lbrakk>\\<And>f x y.\n                   \\<lbrakk>graph_homomorphism (translation e) G f;\n                    (0, x) \\<in> f; (1, y) \\<in> f\\<rbrakk>\n                   \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk>;\n        graph_homomorphism (translation (A_Cnv e)) G f; (0, x) \\<in> f;\n        (1, y) \\<in> f\\<rbrakk>\n       \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>A_Cnv e\\<rbrakk>\n 3. \\<And>x f xa y.\n       \\<lbrakk>graph_homomorphism (translation (A_Lbl x)) G f;\n        (0, xa) \\<in> f; (1, y) \\<in> f\\<rbrakk>\n       \\<Longrightarrow> (xa, y) \\<in> :G:\\<lbrakk>A_Lbl x\\<rbrakk>", "case (A_Cmp e\\<^sub>1 e\\<^sub>2 f x y)"], ["proof (state)\nthis:\n  \\<lbrakk>graph_homomorphism (translation e\\<^sub>1) G ?f;\n   (0, ?x) \\<in> ?f; (1, ?y) \\<in> ?f\\<rbrakk>\n  \\<Longrightarrow> (?x, ?y) \\<in> :G:\\<lbrakk>e\\<^sub>1\\<rbrakk>\n  \\<lbrakk>graph_homomorphism (translation e\\<^sub>2) G ?f;\n   (0, ?x) \\<in> ?f; (1, ?y) \\<in> ?f\\<rbrakk>\n  \\<Longrightarrow> (?x, ?y) \\<in> :G:\\<lbrakk>e\\<^sub>2\\<rbrakk>\n  graph_homomorphism (translation (A_Cmp e\\<^sub>1 e\\<^sub>2)) G f\n  (0, x) \\<in> f\n  (1, y) \\<in> f\n\ngoal (3 subgoals):\n 1. \\<And>e1 e2 f x y.\n       \\<lbrakk>\\<And>f x y.\n                   \\<lbrakk>graph_homomorphism (translation e1) G f;\n                    (0, x) \\<in> f; (1, y) \\<in> f\\<rbrakk>\n                   \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>e1\\<rbrakk>;\n        \\<And>f x y.\n           \\<lbrakk>graph_homomorphism (translation e2) G f; (0, x) \\<in> f;\n            (1, y) \\<in> f\\<rbrakk>\n           \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>e2\\<rbrakk>;\n        graph_homomorphism (translation (A_Cmp e1 e2)) G f; (0, x) \\<in> f;\n        (1, y) \\<in> f\\<rbrakk>\n       \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>A_Cmp e1 e2\\<rbrakk>\n 2. \\<And>e f x y.\n       \\<lbrakk>\\<And>f x y.\n                   \\<lbrakk>graph_homomorphism (translation e) G f;\n                    (0, x) \\<in> f; (1, y) \\<in> f\\<rbrakk>\n                   \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk>;\n        graph_homomorphism (translation (A_Cnv e)) G f; (0, x) \\<in> f;\n        (1, y) \\<in> f\\<rbrakk>\n       \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>A_Cnv e\\<rbrakk>\n 3. \\<And>x f xa y.\n       \\<lbrakk>graph_homomorphism (translation (A_Lbl x)) G f;\n        (0, xa) \\<in> f; (1, y) \\<in> f\\<rbrakk>\n       \\<Longrightarrow> (xa, y) \\<in> :G:\\<lbrakk>A_Lbl x\\<rbrakk>", "let ?f\\<^sub>1 =  \"(\\<lambda> x. if x=0 then 0 else x+card(vertices (translation e\\<^sub>2))-1)\""], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>e1 e2 f x y.\n       \\<lbrakk>\\<And>f x y.\n                   \\<lbrakk>graph_homomorphism (translation e1) G f;\n                    (0, x) \\<in> f; (1, y) \\<in> f\\<rbrakk>\n                   \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>e1\\<rbrakk>;\n        \\<And>f x y.\n           \\<lbrakk>graph_homomorphism (translation e2) G f; (0, x) \\<in> f;\n            (1, y) \\<in> f\\<rbrakk>\n           \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>e2\\<rbrakk>;\n        graph_homomorphism (translation (A_Cmp e1 e2)) G f; (0, x) \\<in> f;\n        (1, y) \\<in> f\\<rbrakk>\n       \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>A_Cmp e1 e2\\<rbrakk>\n 2. \\<And>e f x y.\n       \\<lbrakk>\\<And>f x y.\n                   \\<lbrakk>graph_homomorphism (translation e) G f;\n                    (0, x) \\<in> f; (1, y) \\<in> f\\<rbrakk>\n                   \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk>;\n        graph_homomorphism (translation (A_Cnv e)) G f; (0, x) \\<in> f;\n        (1, y) \\<in> f\\<rbrakk>\n       \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>A_Cnv e\\<rbrakk>\n 3. \\<And>x f xa y.\n       \\<lbrakk>graph_homomorphism (translation (A_Lbl x)) G f;\n        (0, xa) \\<in> f; (1, y) \\<in> f\\<rbrakk>\n       \\<Longrightarrow> (xa, y) \\<in> :G:\\<lbrakk>A_Lbl x\\<rbrakk>", "let ?f\\<^sub>2 =  \"(\\<lambda> x. if x=0 then card (vertices (translation e\\<^sub>2)) else x)\""], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>e1 e2 f x y.\n       \\<lbrakk>\\<And>f x y.\n                   \\<lbrakk>graph_homomorphism (translation e1) G f;\n                    (0, x) \\<in> f; (1, y) \\<in> f\\<rbrakk>\n                   \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>e1\\<rbrakk>;\n        \\<And>f x y.\n           \\<lbrakk>graph_homomorphism (translation e2) G f; (0, x) \\<in> f;\n            (1, y) \\<in> f\\<rbrakk>\n           \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>e2\\<rbrakk>;\n        graph_homomorphism (translation (A_Cmp e1 e2)) G f; (0, x) \\<in> f;\n        (1, y) \\<in> f\\<rbrakk>\n       \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>A_Cmp e1 e2\\<rbrakk>\n 2. \\<And>e f x y.\n       \\<lbrakk>\\<And>f x y.\n                   \\<lbrakk>graph_homomorphism (translation e) G f;\n                    (0, x) \\<in> f; (1, y) \\<in> f\\<rbrakk>\n                   \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk>;\n        graph_homomorphism (translation (A_Cnv e)) G f; (0, x) \\<in> f;\n        (1, y) \\<in> f\\<rbrakk>\n       \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>A_Cnv e\\<rbrakk>\n 3. \\<And>x f xa y.\n       \\<lbrakk>graph_homomorphism (translation (A_Lbl x)) G f;\n        (0, xa) \\<in> f; (1, y) \\<in> f\\<rbrakk>\n       \\<Longrightarrow> (xa, y) \\<in> :G:\\<lbrakk>A_Lbl x\\<rbrakk>", "let ?G\\<^sub>1 = \"translation e\\<^sub>1\""], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>e1 e2 f x y.\n       \\<lbrakk>\\<And>f x y.\n                   \\<lbrakk>graph_homomorphism (translation e1) G f;\n                    (0, x) \\<in> f; (1, y) \\<in> f\\<rbrakk>\n                   \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>e1\\<rbrakk>;\n        \\<And>f x y.\n           \\<lbrakk>graph_homomorphism (translation e2) G f; (0, x) \\<in> f;\n            (1, y) \\<in> f\\<rbrakk>\n           \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>e2\\<rbrakk>;\n        graph_homomorphism (translation (A_Cmp e1 e2)) G f; (0, x) \\<in> f;\n        (1, y) \\<in> f\\<rbrakk>\n       \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>A_Cmp e1 e2\\<rbrakk>\n 2. \\<And>e f x y.\n       \\<lbrakk>\\<And>f x y.\n                   \\<lbrakk>graph_homomorphism (translation e) G f;\n                    (0, x) \\<in> f; (1, y) \\<in> f\\<rbrakk>\n                   \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk>;\n        graph_homomorphism (translation (A_Cnv e)) G f; (0, x) \\<in> f;\n        (1, y) \\<in> f\\<rbrakk>\n       \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>A_Cnv e\\<rbrakk>\n 3. \\<And>x f xa y.\n       \\<lbrakk>graph_homomorphism (translation (A_Lbl x)) G f;\n        (0, xa) \\<in> f; (1, y) \\<in> f\\<rbrakk>\n       \\<Longrightarrow> (xa, y) \\<in> :G:\\<lbrakk>A_Lbl x\\<rbrakk>", "let ?G\\<^sub>2 = \"translation e\\<^sub>2\""], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>e1 e2 f x y.\n       \\<lbrakk>\\<And>f x y.\n                   \\<lbrakk>graph_homomorphism (translation e1) G f;\n                    (0, x) \\<in> f; (1, y) \\<in> f\\<rbrakk>\n                   \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>e1\\<rbrakk>;\n        \\<And>f x y.\n           \\<lbrakk>graph_homomorphism (translation e2) G f; (0, x) \\<in> f;\n            (1, y) \\<in> f\\<rbrakk>\n           \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>e2\\<rbrakk>;\n        graph_homomorphism (translation (A_Cmp e1 e2)) G f; (0, x) \\<in> f;\n        (1, y) \\<in> f\\<rbrakk>\n       \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>A_Cmp e1 e2\\<rbrakk>\n 2. \\<And>e f x y.\n       \\<lbrakk>\\<And>f x y.\n                   \\<lbrakk>graph_homomorphism (translation e) G f;\n                    (0, x) \\<in> f; (1, y) \\<in> f\\<rbrakk>\n                   \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk>;\n        graph_homomorphism (translation (A_Cnv e)) G f; (0, x) \\<in> f;\n        (1, y) \\<in> f\\<rbrakk>\n       \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>A_Cnv e\\<rbrakk>\n 3. \\<And>x f xa y.\n       \\<lbrakk>graph_homomorphism (translation (A_Lbl x)) G f;\n        (0, xa) \\<in> f; (1, y) \\<in> f\\<rbrakk>\n       \\<Longrightarrow> (xa, y) \\<in> :G:\\<lbrakk>A_Lbl x\\<rbrakk>", "let ?v = \"card (vertices (translation e\\<^sub>2))\""], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>e1 e2 f x y.\n       \\<lbrakk>\\<And>f x y.\n                   \\<lbrakk>graph_homomorphism (translation e1) G f;\n                    (0, x) \\<in> f; (1, y) \\<in> f\\<rbrakk>\n                   \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>e1\\<rbrakk>;\n        \\<And>f x y.\n           \\<lbrakk>graph_homomorphism (translation e2) G f; (0, x) \\<in> f;\n            (1, y) \\<in> f\\<rbrakk>\n           \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>e2\\<rbrakk>;\n        graph_homomorphism (translation (A_Cmp e1 e2)) G f; (0, x) \\<in> f;\n        (1, y) \\<in> f\\<rbrakk>\n       \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>A_Cmp e1 e2\\<rbrakk>\n 2. \\<And>e f x y.\n       \\<lbrakk>\\<And>f x y.\n                   \\<lbrakk>graph_homomorphism (translation e) G f;\n                    (0, x) \\<in> f; (1, y) \\<in> f\\<rbrakk>\n                   \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk>;\n        graph_homomorphism (translation (A_Cnv e)) G f; (0, x) \\<in> f;\n        (1, y) \\<in> f\\<rbrakk>\n       \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>A_Cnv e\\<rbrakk>\n 3. \\<And>x f xa y.\n       \\<lbrakk>graph_homomorphism (translation (A_Lbl x)) G f;\n        (0, xa) \\<in> f; (1, y) \\<in> f\\<rbrakk>\n       \\<Longrightarrow> (xa, y) \\<in> :G:\\<lbrakk>A_Lbl x\\<rbrakk>", "from A_Cmp.prems(1)"], ["proof (chain)\npicking this:\n  graph_homomorphism (translation (A_Cmp e\\<^sub>1 e\\<^sub>2)) G f", "have \"?v \\<in> Domain f\""], ["proof (prove)\nusing this:\n  graph_homomorphism (translation (A_Cmp e\\<^sub>1 e\\<^sub>2)) G f\n\ngoal (1 subgoal):\n 1. card (vertices (translation e\\<^sub>2)) \\<in> Domain f", "by (auto simp:Let_def graph_homomorphism_def)"], ["proof (state)\nthis:\n  card (vertices (translation e\\<^sub>2)) \\<in> Domain f\n\ngoal (3 subgoals):\n 1. \\<And>e1 e2 f x y.\n       \\<lbrakk>\\<And>f x y.\n                   \\<lbrakk>graph_homomorphism (translation e1) G f;\n                    (0, x) \\<in> f; (1, y) \\<in> f\\<rbrakk>\n                   \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>e1\\<rbrakk>;\n        \\<And>f x y.\n           \\<lbrakk>graph_homomorphism (translation e2) G f; (0, x) \\<in> f;\n            (1, y) \\<in> f\\<rbrakk>\n           \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>e2\\<rbrakk>;\n        graph_homomorphism (translation (A_Cmp e1 e2)) G f; (0, x) \\<in> f;\n        (1, y) \\<in> f\\<rbrakk>\n       \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>A_Cmp e1 e2\\<rbrakk>\n 2. \\<And>e f x y.\n       \\<lbrakk>\\<And>f x y.\n                   \\<lbrakk>graph_homomorphism (translation e) G f;\n                    (0, x) \\<in> f; (1, y) \\<in> f\\<rbrakk>\n                   \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk>;\n        graph_homomorphism (translation (A_Cnv e)) G f; (0, x) \\<in> f;\n        (1, y) \\<in> f\\<rbrakk>\n       \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>A_Cnv e\\<rbrakk>\n 3. \\<And>x f xa y.\n       \\<lbrakk>graph_homomorphism (translation (A_Lbl x)) G f;\n        (0, xa) \\<in> f; (1, y) \\<in> f\\<rbrakk>\n       \\<Longrightarrow> (xa, y) \\<in> :G:\\<lbrakk>A_Lbl x\\<rbrakk>", "then"], ["proof (chain)\npicking this:\n  card (vertices (translation e\\<^sub>2)) \\<in> Domain f", "obtain v where v:\"(?v,v) \\<in> f\""], ["proof (prove)\nusing this:\n  card (vertices (translation e\\<^sub>2)) \\<in> Domain f\n\ngoal (1 subgoal):\n 1. (\\<And>v.\n        (card (vertices (translation e\\<^sub>2)), v)\n        \\<in> f \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  (card (vertices (translation e\\<^sub>2)), v) \\<in> f\n\ngoal (3 subgoals):\n 1. \\<And>e1 e2 f x y.\n       \\<lbrakk>\\<And>f x y.\n                   \\<lbrakk>graph_homomorphism (translation e1) G f;\n                    (0, x) \\<in> f; (1, y) \\<in> f\\<rbrakk>\n                   \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>e1\\<rbrakk>;\n        \\<And>f x y.\n           \\<lbrakk>graph_homomorphism (translation e2) G f; (0, x) \\<in> f;\n            (1, y) \\<in> f\\<rbrakk>\n           \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>e2\\<rbrakk>;\n        graph_homomorphism (translation (A_Cmp e1 e2)) G f; (0, x) \\<in> f;\n        (1, y) \\<in> f\\<rbrakk>\n       \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>A_Cmp e1 e2\\<rbrakk>\n 2. \\<And>e f x y.\n       \\<lbrakk>\\<And>f x y.\n                   \\<lbrakk>graph_homomorphism (translation e) G f;\n                    (0, x) \\<in> f; (1, y) \\<in> f\\<rbrakk>\n                   \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk>;\n        graph_homomorphism (translation (A_Cnv e)) G f; (0, x) \\<in> f;\n        (1, y) \\<in> f\\<rbrakk>\n       \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>A_Cnv e\\<rbrakk>\n 3. \\<And>x f xa y.\n       \\<lbrakk>graph_homomorphism (translation (A_Lbl x)) G f;\n        (0, xa) \\<in> f; (1, y) \\<in> f\\<rbrakk>\n       \\<Longrightarrow> (xa, y) \\<in> :G:\\<lbrakk>A_Lbl x\\<rbrakk>", "have f1:\"(0, x) \\<in> on_graph ?G\\<^sub>1 ?f\\<^sub>1 O f\" \"(1, v) \\<in> on_graph ?G\\<^sub>1 ?f\\<^sub>1 O f\"\n   and f2:\"(0, v) \\<in> on_graph ?G\\<^sub>2 ?f\\<^sub>2 O f\" \"(1, y) \\<in> on_graph ?G\\<^sub>2 ?f\\<^sub>2 O f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((0, x)\n     \\<in> on_graph (translation e\\<^sub>1)\n            (\\<lambda>x.\n                if x = 0 then 0\n                else x + card (vertices (translation e\\<^sub>2)) - 1) O\n           f &&&\n     (1, v)\n     \\<in> on_graph (translation e\\<^sub>1)\n            (\\<lambda>x.\n                if x = 0 then 0\n                else x + card (vertices (translation e\\<^sub>2)) - 1) O\n           f) &&&\n    (0, v)\n    \\<in> on_graph (translation e\\<^sub>2)\n           (\\<lambda>x.\n               if x = 0 then card (vertices (translation e\\<^sub>2))\n               else x) O\n          f &&&\n    (1, y)\n    \\<in> on_graph (translation e\\<^sub>2)\n           (\\<lambda>x.\n               if x = 0 then card (vertices (translation e\\<^sub>2))\n               else x) O\n          f", "using A_Cmp.prems(2,3) v"], ["proof (prove)\nusing this:\n  (0, x) \\<in> f\n  (1, y) \\<in> f\n  (card (vertices (translation e\\<^sub>2)), v) \\<in> f\n\ngoal (1 subgoal):\n 1. ((0, x)\n     \\<in> on_graph (translation e\\<^sub>1)\n            (\\<lambda>x.\n                if x = 0 then 0\n                else x + card (vertices (translation e\\<^sub>2)) - 1) O\n           f &&&\n     (1, v)\n     \\<in> on_graph (translation e\\<^sub>1)\n            (\\<lambda>x.\n                if x = 0 then 0\n                else x + card (vertices (translation e\\<^sub>2)) - 1) O\n           f) &&&\n    (0, v)\n    \\<in> on_graph (translation e\\<^sub>2)\n           (\\<lambda>x.\n               if x = 0 then card (vertices (translation e\\<^sub>2))\n               else x) O\n          f &&&\n    (1, y)\n    \\<in> on_graph (translation e\\<^sub>2)\n           (\\<lambda>x.\n               if x = 0 then card (vertices (translation e\\<^sub>2))\n               else x) O\n          f", "by auto"], ["proof (state)\nthis:\n  (0, x)\n  \\<in> on_graph (translation e\\<^sub>1)\n         (\\<lambda>x.\n             if x = 0 then 0\n             else x + card (vertices (translation e\\<^sub>2)) - 1) O\n        f\n  (1, v)\n  \\<in> on_graph (translation e\\<^sub>1)\n         (\\<lambda>x.\n             if x = 0 then 0\n             else x + card (vertices (translation e\\<^sub>2)) - 1) O\n        f\n  (0, v)\n  \\<in> on_graph (translation e\\<^sub>2)\n         (\\<lambda>x.\n             if x = 0 then card (vertices (translation e\\<^sub>2)) else x) O\n        f\n  (1, y)\n  \\<in> on_graph (translation e\\<^sub>2)\n         (\\<lambda>x.\n             if x = 0 then card (vertices (translation e\\<^sub>2)) else x) O\n        f\n\ngoal (3 subgoals):\n 1. \\<And>e1 e2 f x y.\n       \\<lbrakk>\\<And>f x y.\n                   \\<lbrakk>graph_homomorphism (translation e1) G f;\n                    (0, x) \\<in> f; (1, y) \\<in> f\\<rbrakk>\n                   \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>e1\\<rbrakk>;\n        \\<And>f x y.\n           \\<lbrakk>graph_homomorphism (translation e2) G f; (0, x) \\<in> f;\n            (1, y) \\<in> f\\<rbrakk>\n           \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>e2\\<rbrakk>;\n        graph_homomorphism (translation (A_Cmp e1 e2)) G f; (0, x) \\<in> f;\n        (1, y) \\<in> f\\<rbrakk>\n       \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>A_Cmp e1 e2\\<rbrakk>\n 2. \\<And>e f x y.\n       \\<lbrakk>\\<And>f x y.\n                   \\<lbrakk>graph_homomorphism (translation e) G f;\n                    (0, x) \\<in> f; (1, y) \\<in> f\\<rbrakk>\n                   \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk>;\n        graph_homomorphism (translation (A_Cnv e)) G f; (0, x) \\<in> f;\n        (1, y) \\<in> f\\<rbrakk>\n       \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>A_Cnv e\\<rbrakk>\n 3. \\<And>x f xa y.\n       \\<lbrakk>graph_homomorphism (translation (A_Lbl x)) G f;\n        (0, xa) \\<in> f; (1, y) \\<in> f\\<rbrakk>\n       \\<Longrightarrow> (xa, y) \\<in> :G:\\<lbrakk>A_Lbl x\\<rbrakk>", "from A_Cmp.prems(1)"], ["proof (chain)\npicking this:\n  graph_homomorphism (translation (A_Cmp e\\<^sub>1 e\\<^sub>2)) G f", "have uni:\"graph_homomorphism (graph_union (map_graph_fn ?G\\<^sub>1 ?f\\<^sub>1) (map_graph_fn ?G\\<^sub>2 ?f\\<^sub>2)) G f\""], ["proof (prove)\nusing this:\n  graph_homomorphism (translation (A_Cmp e\\<^sub>1 e\\<^sub>2)) G f\n\ngoal (1 subgoal):\n 1. graph_homomorphism\n     (graph_union\n       (map_graph_fn (translation e\\<^sub>1)\n         (\\<lambda>x.\n             if x = 0 then 0\n             else x + card (vertices (translation e\\<^sub>2)) - 1))\n       (map_graph_fn (translation e\\<^sub>2)\n         (\\<lambda>x.\n             if x = 0 then card (vertices (translation e\\<^sub>2)) else x)))\n     G f", "by (auto simp:Let_def)"], ["proof (state)\nthis:\n  graph_homomorphism\n   (graph_union\n     (map_graph_fn (translation e\\<^sub>1)\n       (\\<lambda>x.\n           if x = 0 then 0\n           else x + card (vertices (translation e\\<^sub>2)) - 1))\n     (map_graph_fn (translation e\\<^sub>2)\n       (\\<lambda>x.\n           if x = 0 then card (vertices (translation e\\<^sub>2)) else x)))\n   G f\n\ngoal (3 subgoals):\n 1. \\<And>e1 e2 f x y.\n       \\<lbrakk>\\<And>f x y.\n                   \\<lbrakk>graph_homomorphism (translation e1) G f;\n                    (0, x) \\<in> f; (1, y) \\<in> f\\<rbrakk>\n                   \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>e1\\<rbrakk>;\n        \\<And>f x y.\n           \\<lbrakk>graph_homomorphism (translation e2) G f; (0, x) \\<in> f;\n            (1, y) \\<in> f\\<rbrakk>\n           \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>e2\\<rbrakk>;\n        graph_homomorphism (translation (A_Cmp e1 e2)) G f; (0, x) \\<in> f;\n        (1, y) \\<in> f\\<rbrakk>\n       \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>A_Cmp e1 e2\\<rbrakk>\n 2. \\<And>e f x y.\n       \\<lbrakk>\\<And>f x y.\n                   \\<lbrakk>graph_homomorphism (translation e) G f;\n                    (0, x) \\<in> f; (1, y) \\<in> f\\<rbrakk>\n                   \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk>;\n        graph_homomorphism (translation (A_Cnv e)) G f; (0, x) \\<in> f;\n        (1, y) \\<in> f\\<rbrakk>\n       \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>A_Cnv e\\<rbrakk>\n 3. \\<And>x f xa y.\n       \\<lbrakk>graph_homomorphism (translation (A_Lbl x)) G f;\n        (0, xa) \\<in> f; (1, y) \\<in> f\\<rbrakk>\n       \\<Longrightarrow> (xa, y) \\<in> :G:\\<lbrakk>A_Lbl x\\<rbrakk>", "have \"graph (map_graph_fn ?G\\<^sub>1 ?f\\<^sub>1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. graph\n     (map_graph_fn (translation e\\<^sub>1)\n       (\\<lambda>x.\n           if x = 0 then 0\n           else x + card (vertices (translation e\\<^sub>2)) - 1))", "by auto"], ["proof (state)\nthis:\n  graph\n   (map_graph_fn (translation e\\<^sub>1)\n     (\\<lambda>x.\n         if x = 0 then 0\n         else x + card (vertices (translation e\\<^sub>2)) - 1))\n\ngoal (3 subgoals):\n 1. \\<And>e1 e2 f x y.\n       \\<lbrakk>\\<And>f x y.\n                   \\<lbrakk>graph_homomorphism (translation e1) G f;\n                    (0, x) \\<in> f; (1, y) \\<in> f\\<rbrakk>\n                   \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>e1\\<rbrakk>;\n        \\<And>f x y.\n           \\<lbrakk>graph_homomorphism (translation e2) G f; (0, x) \\<in> f;\n            (1, y) \\<in> f\\<rbrakk>\n           \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>e2\\<rbrakk>;\n        graph_homomorphism (translation (A_Cmp e1 e2)) G f; (0, x) \\<in> f;\n        (1, y) \\<in> f\\<rbrakk>\n       \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>A_Cmp e1 e2\\<rbrakk>\n 2. \\<And>e f x y.\n       \\<lbrakk>\\<And>f x y.\n                   \\<lbrakk>graph_homomorphism (translation e) G f;\n                    (0, x) \\<in> f; (1, y) \\<in> f\\<rbrakk>\n                   \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk>;\n        graph_homomorphism (translation (A_Cnv e)) G f; (0, x) \\<in> f;\n        (1, y) \\<in> f\\<rbrakk>\n       \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>A_Cnv e\\<rbrakk>\n 3. \\<And>x f xa y.\n       \\<lbrakk>graph_homomorphism (translation (A_Lbl x)) G f;\n        (0, xa) \\<in> f; (1, y) \\<in> f\\<rbrakk>\n       \\<Longrightarrow> (xa, y) \\<in> :G:\\<lbrakk>A_Lbl x\\<rbrakk>", "from graph_homo_union_id(1)[OF uni this]"], ["proof (chain)\npicking this:\n  graph_homomorphism\n   (map_graph_fn (translation e\\<^sub>1)\n     (\\<lambda>x.\n         if x = 0 then 0\n         else x + card (vertices (translation e\\<^sub>2)) - 1))\n   G (Id_on\n       (vertices\n         (map_graph_fn (translation e\\<^sub>1)\n           (\\<lambda>x.\n               if x = 0 then 0\n               else x + card (vertices (translation e\\<^sub>2)) - 1))) O\n      f)", "have h1:\"graph_homomorphism ?G\\<^sub>1 (translation (A_Cmp e\\<^sub>1 e\\<^sub>2)) (on_graph ?G\\<^sub>1 ?f\\<^sub>1)\""], ["proof (prove)\nusing this:\n  graph_homomorphism\n   (map_graph_fn (translation e\\<^sub>1)\n     (\\<lambda>x.\n         if x = 0 then 0\n         else x + card (vertices (translation e\\<^sub>2)) - 1))\n   G (Id_on\n       (vertices\n         (map_graph_fn (translation e\\<^sub>1)\n           (\\<lambda>x.\n               if x = 0 then 0\n               else x + card (vertices (translation e\\<^sub>2)) - 1))) O\n      f)\n\ngoal (1 subgoal):\n 1. graph_homomorphism (translation e\\<^sub>1)\n     (translation (A_Cmp e\\<^sub>1 e\\<^sub>2))\n     (on_graph (translation e\\<^sub>1)\n       (\\<lambda>x.\n           if x = 0 then 0\n           else x + card (vertices (translation e\\<^sub>2)) - 1))", "by (auto simp:Let_def graph_homomorphism_def2)"], ["proof (state)\nthis:\n  graph_homomorphism (translation e\\<^sub>1)\n   (translation (A_Cmp e\\<^sub>1 e\\<^sub>2))\n   (on_graph (translation e\\<^sub>1)\n     (\\<lambda>x.\n         if x = 0 then 0\n         else x + card (vertices (translation e\\<^sub>2)) - 1))\n\ngoal (3 subgoals):\n 1. \\<And>e1 e2 f x y.\n       \\<lbrakk>\\<And>f x y.\n                   \\<lbrakk>graph_homomorphism (translation e1) G f;\n                    (0, x) \\<in> f; (1, y) \\<in> f\\<rbrakk>\n                   \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>e1\\<rbrakk>;\n        \\<And>f x y.\n           \\<lbrakk>graph_homomorphism (translation e2) G f; (0, x) \\<in> f;\n            (1, y) \\<in> f\\<rbrakk>\n           \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>e2\\<rbrakk>;\n        graph_homomorphism (translation (A_Cmp e1 e2)) G f; (0, x) \\<in> f;\n        (1, y) \\<in> f\\<rbrakk>\n       \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>A_Cmp e1 e2\\<rbrakk>\n 2. \\<And>e f x y.\n       \\<lbrakk>\\<And>f x y.\n                   \\<lbrakk>graph_homomorphism (translation e) G f;\n                    (0, x) \\<in> f; (1, y) \\<in> f\\<rbrakk>\n                   \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk>;\n        graph_homomorphism (translation (A_Cnv e)) G f; (0, x) \\<in> f;\n        (1, y) \\<in> f\\<rbrakk>\n       \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>A_Cnv e\\<rbrakk>\n 3. \\<And>x f xa y.\n       \\<lbrakk>graph_homomorphism (translation (A_Lbl x)) G f;\n        (0, xa) \\<in> f; (1, y) \\<in> f\\<rbrakk>\n       \\<Longrightarrow> (xa, y) \\<in> :G:\\<lbrakk>A_Lbl x\\<rbrakk>", "have \"graph (map_graph_fn ?G\\<^sub>2 ?f\\<^sub>2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. graph\n     (map_graph_fn (translation e\\<^sub>2)\n       (\\<lambda>x.\n           if x = 0 then card (vertices (translation e\\<^sub>2)) else x))", "by auto"], ["proof (state)\nthis:\n  graph\n   (map_graph_fn (translation e\\<^sub>2)\n     (\\<lambda>x.\n         if x = 0 then card (vertices (translation e\\<^sub>2)) else x))\n\ngoal (3 subgoals):\n 1. \\<And>e1 e2 f x y.\n       \\<lbrakk>\\<And>f x y.\n                   \\<lbrakk>graph_homomorphism (translation e1) G f;\n                    (0, x) \\<in> f; (1, y) \\<in> f\\<rbrakk>\n                   \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>e1\\<rbrakk>;\n        \\<And>f x y.\n           \\<lbrakk>graph_homomorphism (translation e2) G f; (0, x) \\<in> f;\n            (1, y) \\<in> f\\<rbrakk>\n           \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>e2\\<rbrakk>;\n        graph_homomorphism (translation (A_Cmp e1 e2)) G f; (0, x) \\<in> f;\n        (1, y) \\<in> f\\<rbrakk>\n       \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>A_Cmp e1 e2\\<rbrakk>\n 2. \\<And>e f x y.\n       \\<lbrakk>\\<And>f x y.\n                   \\<lbrakk>graph_homomorphism (translation e) G f;\n                    (0, x) \\<in> f; (1, y) \\<in> f\\<rbrakk>\n                   \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk>;\n        graph_homomorphism (translation (A_Cnv e)) G f; (0, x) \\<in> f;\n        (1, y) \\<in> f\\<rbrakk>\n       \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>A_Cnv e\\<rbrakk>\n 3. \\<And>x f xa y.\n       \\<lbrakk>graph_homomorphism (translation (A_Lbl x)) G f;\n        (0, xa) \\<in> f; (1, y) \\<in> f\\<rbrakk>\n       \\<Longrightarrow> (xa, y) \\<in> :G:\\<lbrakk>A_Lbl x\\<rbrakk>", "from graph_homo_union_id(2)[OF uni this]"], ["proof (chain)\npicking this:\n  graph_homomorphism\n   (map_graph_fn (translation e\\<^sub>2)\n     (\\<lambda>x.\n         if x = 0 then card (vertices (translation e\\<^sub>2)) else x))\n   G (Id_on\n       (vertices\n         (map_graph_fn (translation e\\<^sub>2)\n           (\\<lambda>x.\n               if x = 0 then card (vertices (translation e\\<^sub>2))\n               else x))) O\n      f)", "have h2:\"graph_homomorphism ?G\\<^sub>2 (translation (A_Cmp e\\<^sub>1 e\\<^sub>2)) (on_graph ?G\\<^sub>2 ?f\\<^sub>2)\""], ["proof (prove)\nusing this:\n  graph_homomorphism\n   (map_graph_fn (translation e\\<^sub>2)\n     (\\<lambda>x.\n         if x = 0 then card (vertices (translation e\\<^sub>2)) else x))\n   G (Id_on\n       (vertices\n         (map_graph_fn (translation e\\<^sub>2)\n           (\\<lambda>x.\n               if x = 0 then card (vertices (translation e\\<^sub>2))\n               else x))) O\n      f)\n\ngoal (1 subgoal):\n 1. graph_homomorphism (translation e\\<^sub>2)\n     (translation (A_Cmp e\\<^sub>1 e\\<^sub>2))\n     (on_graph (translation e\\<^sub>2)\n       (\\<lambda>x.\n           if x = 0 then card (vertices (translation e\\<^sub>2)) else x))", "by (auto simp:Let_def graph_homomorphism_def2)"], ["proof (state)\nthis:\n  graph_homomorphism (translation e\\<^sub>2)\n   (translation (A_Cmp e\\<^sub>1 e\\<^sub>2))\n   (on_graph (translation e\\<^sub>2)\n     (\\<lambda>x.\n         if x = 0 then card (vertices (translation e\\<^sub>2)) else x))\n\ngoal (3 subgoals):\n 1. \\<And>e1 e2 f x y.\n       \\<lbrakk>\\<And>f x y.\n                   \\<lbrakk>graph_homomorphism (translation e1) G f;\n                    (0, x) \\<in> f; (1, y) \\<in> f\\<rbrakk>\n                   \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>e1\\<rbrakk>;\n        \\<And>f x y.\n           \\<lbrakk>graph_homomorphism (translation e2) G f; (0, x) \\<in> f;\n            (1, y) \\<in> f\\<rbrakk>\n           \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>e2\\<rbrakk>;\n        graph_homomorphism (translation (A_Cmp e1 e2)) G f; (0, x) \\<in> f;\n        (1, y) \\<in> f\\<rbrakk>\n       \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>A_Cmp e1 e2\\<rbrakk>\n 2. \\<And>e f x y.\n       \\<lbrakk>\\<And>f x y.\n                   \\<lbrakk>graph_homomorphism (translation e) G f;\n                    (0, x) \\<in> f; (1, y) \\<in> f\\<rbrakk>\n                   \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk>;\n        graph_homomorphism (translation (A_Cnv e)) G f; (0, x) \\<in> f;\n        (1, y) \\<in> f\\<rbrakk>\n       \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>A_Cnv e\\<rbrakk>\n 3. \\<And>x f xa y.\n       \\<lbrakk>graph_homomorphism (translation (A_Lbl x)) G f;\n        (0, xa) \\<in> f; (1, y) \\<in> f\\<rbrakk>\n       \\<Longrightarrow> (xa, y) \\<in> :G:\\<lbrakk>A_Lbl x\\<rbrakk>", "from A_Cmp.hyps(1)[OF graph_homomorphism_composes[OF h1 A_Cmp.prems(1)] f1]\n       A_Cmp.hyps(2)[OF graph_homomorphism_composes[OF h2 A_Cmp.prems(1)] f2]"], ["proof (chain)\npicking this:\n  (x, v) \\<in> :G:\\<lbrakk>e\\<^sub>1\\<rbrakk>\n  (v, y) \\<in> :G:\\<lbrakk>e\\<^sub>2\\<rbrakk>", "show ?case"], ["proof (prove)\nusing this:\n  (x, v) \\<in> :G:\\<lbrakk>e\\<^sub>1\\<rbrakk>\n  (v, y) \\<in> :G:\\<lbrakk>e\\<^sub>2\\<rbrakk>\n\ngoal (1 subgoal):\n 1. (x, y) \\<in> :G:\\<lbrakk>A_Cmp e\\<^sub>1 e\\<^sub>2\\<rbrakk>", "by auto"], ["proof (state)\nthis:\n  (x, y) \\<in> :G:\\<lbrakk>A_Cmp e\\<^sub>1 e\\<^sub>2\\<rbrakk>\n\ngoal (2 subgoals):\n 1. \\<And>e f x y.\n       \\<lbrakk>\\<And>f x y.\n                   \\<lbrakk>graph_homomorphism (translation e) G f;\n                    (0, x) \\<in> f; (1, y) \\<in> f\\<rbrakk>\n                   \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk>;\n        graph_homomorphism (translation (A_Cnv e)) G f; (0, x) \\<in> f;\n        (1, y) \\<in> f\\<rbrakk>\n       \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>A_Cnv e\\<rbrakk>\n 2. \\<And>x f xa y.\n       \\<lbrakk>graph_homomorphism (translation (A_Lbl x)) G f;\n        (0, xa) \\<in> f; (1, y) \\<in> f\\<rbrakk>\n       \\<Longrightarrow> (xa, y) \\<in> :G:\\<lbrakk>A_Lbl x\\<rbrakk>", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>e f x y.\n       \\<lbrakk>\\<And>f x y.\n                   \\<lbrakk>graph_homomorphism (translation e) G f;\n                    (0, x) \\<in> f; (1, y) \\<in> f\\<rbrakk>\n                   \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk>;\n        graph_homomorphism (translation (A_Cnv e)) G f; (0, x) \\<in> f;\n        (1, y) \\<in> f\\<rbrakk>\n       \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>A_Cnv e\\<rbrakk>\n 2. \\<And>x f xa y.\n       \\<lbrakk>graph_homomorphism (translation (A_Lbl x)) G f;\n        (0, xa) \\<in> f; (1, y) \\<in> f\\<rbrakk>\n       \\<Longrightarrow> (xa, y) \\<in> :G:\\<lbrakk>A_Lbl x\\<rbrakk>", "case (A_Cnv e f x y)"], ["proof (state)\nthis:\n  \\<lbrakk>graph_homomorphism (translation e) G ?f; (0, ?x) \\<in> ?f;\n   (1, ?y) \\<in> ?f\\<rbrakk>\n  \\<Longrightarrow> (?x, ?y) \\<in> :G:\\<lbrakk>e\\<rbrakk>\n  graph_homomorphism (translation (A_Cnv e)) G f\n  (0, x) \\<in> f\n  (1, y) \\<in> f\n\ngoal (2 subgoals):\n 1. \\<And>e f x y.\n       \\<lbrakk>\\<And>f x y.\n                   \\<lbrakk>graph_homomorphism (translation e) G f;\n                    (0, x) \\<in> f; (1, y) \\<in> f\\<rbrakk>\n                   \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk>;\n        graph_homomorphism (translation (A_Cnv e)) G f; (0, x) \\<in> f;\n        (1, y) \\<in> f\\<rbrakk>\n       \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>A_Cnv e\\<rbrakk>\n 2. \\<And>x f xa y.\n       \\<lbrakk>graph_homomorphism (translation (A_Lbl x)) G f;\n        (0, xa) \\<in> f; (1, y) \\<in> f\\<rbrakk>\n       \\<Longrightarrow> (xa, y) \\<in> :G:\\<lbrakk>A_Lbl x\\<rbrakk>", "let ?f = \"(\\<lambda> x. if x < 2 then 1 - x else x)\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>e f x y.\n       \\<lbrakk>\\<And>f x y.\n                   \\<lbrakk>graph_homomorphism (translation e) G f;\n                    (0, x) \\<in> f; (1, y) \\<in> f\\<rbrakk>\n                   \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk>;\n        graph_homomorphism (translation (A_Cnv e)) G f; (0, x) \\<in> f;\n        (1, y) \\<in> f\\<rbrakk>\n       \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>A_Cnv e\\<rbrakk>\n 2. \\<And>x f xa y.\n       \\<lbrakk>graph_homomorphism (translation (A_Lbl x)) G f;\n        (0, xa) \\<in> f; (1, y) \\<in> f\\<rbrakk>\n       \\<Longrightarrow> (xa, y) \\<in> :G:\\<lbrakk>A_Lbl x\\<rbrakk>", "let ?G = \"translation e\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>e f x y.\n       \\<lbrakk>\\<And>f x y.\n                   \\<lbrakk>graph_homomorphism (translation e) G f;\n                    (0, x) \\<in> f; (1, y) \\<in> f\\<rbrakk>\n                   \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk>;\n        graph_homomorphism (translation (A_Cnv e)) G f; (0, x) \\<in> f;\n        (1, y) \\<in> f\\<rbrakk>\n       \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>A_Cnv e\\<rbrakk>\n 2. \\<And>x f xa y.\n       \\<lbrakk>graph_homomorphism (translation (A_Lbl x)) G f;\n        (0, xa) \\<in> f; (1, y) \\<in> f\\<rbrakk>\n       \\<Longrightarrow> (xa, y) \\<in> :G:\\<lbrakk>A_Lbl x\\<rbrakk>", "have i:\"graph_homomorphism ?G (map_graph_fn ?G ?f) (on_graph ?G ?f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. graph_homomorphism (translation e)\n     (map_graph_fn (translation e) (\\<lambda>x. if x < 2 then 1 - x else x))\n     (on_graph (translation e) (\\<lambda>x. if x < 2 then 1 - x else x))", "using A_Cnv"], ["proof (prove)\nusing this:\n  \\<lbrakk>graph_homomorphism (translation e) G ?f; (0, ?x) \\<in> ?f;\n   (1, ?y) \\<in> ?f\\<rbrakk>\n  \\<Longrightarrow> (?x, ?y) \\<in> :G:\\<lbrakk>e\\<rbrakk>\n  graph_homomorphism (translation (A_Cnv e)) G f\n  (0, x) \\<in> f\n  (1, y) \\<in> f\n\ngoal (1 subgoal):\n 1. graph_homomorphism (translation e)\n     (map_graph_fn (translation e) (\\<lambda>x. if x < 2 then 1 - x else x))\n     (on_graph (translation e) (\\<lambda>x. if x < 2 then 1 - x else x))", "by auto"], ["proof (state)\nthis:\n  graph_homomorphism (translation e)\n   (map_graph_fn (translation e) (\\<lambda>x. if x < 2 then 1 - x else x))\n   (on_graph (translation e) (\\<lambda>x. if x < 2 then 1 - x else x))\n\ngoal (2 subgoals):\n 1. \\<And>e f x y.\n       \\<lbrakk>\\<And>f x y.\n                   \\<lbrakk>graph_homomorphism (translation e) G f;\n                    (0, x) \\<in> f; (1, y) \\<in> f\\<rbrakk>\n                   \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk>;\n        graph_homomorphism (translation (A_Cnv e)) G f; (0, x) \\<in> f;\n        (1, y) \\<in> f\\<rbrakk>\n       \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>A_Cnv e\\<rbrakk>\n 2. \\<And>x f xa y.\n       \\<lbrakk>graph_homomorphism (translation (A_Lbl x)) G f;\n        (0, xa) \\<in> f; (1, y) \\<in> f\\<rbrakk>\n       \\<Longrightarrow> (xa, y) \\<in> :G:\\<lbrakk>A_Lbl x\\<rbrakk>", "have \"(0, y) \\<in> on_graph ?G ?f O f\" \"(1, x) \\<in> on_graph ?G ?f O f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (0, y)\n    \\<in> on_graph (translation e)\n           (\\<lambda>x. if x < 2 then 1 - x else x) O\n          f &&&\n    (1, x)\n    \\<in> on_graph (translation e)\n           (\\<lambda>x. if x < 2 then 1 - x else x) O\n          f", "using A_Cnv.prems(3,2)"], ["proof (prove)\nusing this:\n  (1, y) \\<in> f\n  (0, x) \\<in> f\n\ngoal (1 subgoal):\n 1. (0, y)\n    \\<in> on_graph (translation e)\n           (\\<lambda>x. if x < 2 then 1 - x else x) O\n          f &&&\n    (1, x)\n    \\<in> on_graph (translation e)\n           (\\<lambda>x. if x < 2 then 1 - x else x) O\n          f", "by (auto simp:BNF_Def.Gr_def relcomp_def)"], ["proof (state)\nthis:\n  (0, y)\n  \\<in> on_graph (translation e) (\\<lambda>x. if x < 2 then 1 - x else x) O\n        f\n  (1, x)\n  \\<in> on_graph (translation e) (\\<lambda>x. if x < 2 then 1 - x else x) O\n        f\n\ngoal (2 subgoals):\n 1. \\<And>e f x y.\n       \\<lbrakk>\\<And>f x y.\n                   \\<lbrakk>graph_homomorphism (translation e) G f;\n                    (0, x) \\<in> f; (1, y) \\<in> f\\<rbrakk>\n                   \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk>;\n        graph_homomorphism (translation (A_Cnv e)) G f; (0, x) \\<in> f;\n        (1, y) \\<in> f\\<rbrakk>\n       \\<Longrightarrow> (x, y) \\<in> :G:\\<lbrakk>A_Cnv e\\<rbrakk>\n 2. \\<And>x f xa y.\n       \\<lbrakk>graph_homomorphism (translation (A_Lbl x)) G f;\n        (0, xa) \\<in> f; (1, y) \\<in> f\\<rbrakk>\n       \\<Longrightarrow> (xa, y) \\<in> :G:\\<lbrakk>A_Lbl x\\<rbrakk>", "from A_Cnv.hyps(1)[OF graph_homomorphism_composes[OF i] this] A_Cnv.prems(1)"], ["proof (chain)\npicking this:\n  graph_homomorphism\n   (map_graph_fn (translation e) (\\<lambda>x. if x < 2 then 1 - x else x)) G\n   f \\<Longrightarrow>\n  (y, x) \\<in> :G:\\<lbrakk>e\\<rbrakk>\n  graph_homomorphism (translation (A_Cnv e)) G f", "show ?case"], ["proof (prove)\nusing this:\n  graph_homomorphism\n   (map_graph_fn (translation e) (\\<lambda>x. if x < 2 then 1 - x else x)) G\n   f \\<Longrightarrow>\n  (y, x) \\<in> :G:\\<lbrakk>e\\<rbrakk>\n  graph_homomorphism (translation (A_Cnv e)) G f\n\ngoal (1 subgoal):\n 1. (x, y) \\<in> :G:\\<lbrakk>A_Cnv e\\<rbrakk>", "by auto"], ["proof (state)\nthis:\n  (x, y) \\<in> :G:\\<lbrakk>A_Cnv e\\<rbrakk>\n\ngoal (1 subgoal):\n 1. \\<And>x f xa y.\n       \\<lbrakk>graph_homomorphism (translation (A_Lbl x)) G f;\n        (0, xa) \\<in> f; (1, y) \\<in> f\\<rbrakk>\n       \\<Longrightarrow> (xa, y) \\<in> :G:\\<lbrakk>A_Lbl x\\<rbrakk>", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x f xa y.\n       \\<lbrakk>graph_homomorphism (translation (A_Lbl x)) G f;\n        (0, xa) \\<in> f; (1, y) \\<in> f\\<rbrakk>\n       \\<Longrightarrow> (xa, y) \\<in> :G:\\<lbrakk>A_Lbl x\\<rbrakk>", "case (A_Lbl l f x y)"], ["proof (state)\nthis:\n  graph_homomorphism (translation (A_Lbl l)) G f\n  (0, x) \\<in> f\n  (1, y) \\<in> f\n\ngoal (1 subgoal):\n 1. \\<And>x f xa y.\n       \\<lbrakk>graph_homomorphism (translation (A_Lbl x)) G f;\n        (0, xa) \\<in> f; (1, y) \\<in> f\\<rbrakk>\n       \\<Longrightarrow> (xa, y) \\<in> :G:\\<lbrakk>A_Lbl x\\<rbrakk>", "hence \"edge_preserving f {(l,0,1)} (edges G)\""], ["proof (prove)\nusing this:\n  graph_homomorphism (translation (A_Lbl l)) G f\n  (0, x) \\<in> f\n  (1, y) \\<in> f\n\ngoal (1 subgoal):\n 1. edge_preserving f {(l, 0, 1)} (edges G)", "unfolding graph_homomorphism_def"], ["proof (prove)\nusing this:\n  vertices (translation (A_Lbl l)) = Domain f \\<and>\n  graph (translation (A_Lbl l)) \\<and>\n  graph G \\<and>\n  f `` vertices (translation (A_Lbl l)) \\<subseteq> vertices G \\<and>\n  univalent f \\<and>\n  edge_preserving f (edges (translation (A_Lbl l))) (edges G)\n  (0, x) \\<in> f\n  (1, y) \\<in> f\n\ngoal (1 subgoal):\n 1. edge_preserving f {(l, 0, 1)} (edges G)", "by auto"], ["proof (state)\nthis:\n  edge_preserving f {(l, 0, 1)} (edges G)\n\ngoal (1 subgoal):\n 1. \\<And>x f xa y.\n       \\<lbrakk>graph_homomorphism (translation (A_Lbl x)) G f;\n        (0, xa) \\<in> f; (1, y) \\<in> f\\<rbrakk>\n       \\<Longrightarrow> (xa, y) \\<in> :G:\\<lbrakk>A_Lbl x\\<rbrakk>", "with A_Lbl(2,3)"], ["proof (chain)\npicking this:\n  (0, x) \\<in> f\n  (1, y) \\<in> f\n  edge_preserving f {(l, 0, 1)} (edges G)", "show ?case"], ["proof (prove)\nusing this:\n  (0, x) \\<in> f\n  (1, y) \\<in> f\n  edge_preserving f {(l, 0, 1)} (edges G)\n\ngoal (1 subgoal):\n 1. (x, y) \\<in> :G:\\<lbrakk>A_Lbl l\\<rbrakk>", "by (auto simp:getRel_def edge_preserving_def)"], ["proof (state)\nthis:\n  (x, y) \\<in> :G:\\<lbrakk>A_Lbl l\\<rbrakk>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma translation_homomorphism:\n  assumes \"graph_homomorphism (translation e) G f\"\n  shows \"f `` {0} \\<times> f `` {1} \\<subseteq> :G:\\<lbrakk>e\\<rbrakk>\" \":G:\\<lbrakk>e\\<rbrakk> \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f `` {0} \\<times> f `` {1} \\<subseteq> :G:\\<lbrakk>e\\<rbrakk> &&&\n    :G:\\<lbrakk>e\\<rbrakk> \\<noteq> {}", "using translation_right_to_left[OF assms] assms[unfolded graph_homomorphism_def2]\n        verts_in_translation_finite[of e]"], ["proof (prove)\nusing this:\n  \\<lbrakk>(0, ?x) \\<in> f; (1, ?y) \\<in> f\\<rbrakk>\n  \\<Longrightarrow> (?x, ?y) \\<in> :G:\\<lbrakk>e\\<rbrakk>\n  vertices (translation e) = Domain f \\<and>\n  univalent f \\<and>\n  graph (translation e) \\<and>\n  graph G \\<and> graph_union (map_graph f (translation e)) G = G\n  finite (vertices (translation e))\n  finite (edges (translation e))\n  0 \\<in> vertices (translation e)\n  Suc 0 \\<in> vertices (translation e)\n\ngoal (1 subgoal):\n 1. f `` {0} \\<times> f `` {1} \\<subseteq> :G:\\<lbrakk>e\\<rbrakk> &&&\n    :G:\\<lbrakk>e\\<rbrakk> \\<noteq> {}", "by auto"], ["", "text \\<open>Lemma 5.\\<close>"], ["", "lemma translation:\n  assumes \"graph G\"\n  shows \"(x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk> \\<longleftrightarrow> (\\<exists> f. graph_homomorphism (translation e) G f \\<and> (0,x) \\<in> f \\<and> (1,y) \\<in> f)\"\n(is \"?lhs = ?rhs\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk>) =\n    (\\<exists>f.\n        graph_homomorphism (translation e) G f \\<and>\n        (0, x) \\<in> f \\<and> (1, y) \\<in> f)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk> \\<Longrightarrow>\n    \\<exists>f.\n       graph_homomorphism (translation e) G f \\<and>\n       (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 2. \\<exists>f.\n       graph_homomorphism (translation e) G f \\<and>\n       (0, x) \\<in> f \\<and> (1, y) \\<in> f \\<Longrightarrow>\n    (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk>", "have [dest]:\"y + card (vertices (translation (e::'a allegorical_term))) - 2 < 2 \\<Longrightarrow> (y::nat) < 2\"\n    for y e"], ["proof (prove)\ngoal (1 subgoal):\n 1. y + card (vertices (translation e)) - 2 < 2 \\<Longrightarrow> y < 2", "using inv_tr_card_min[OF verts_in_translation,of e]"], ["proof (prove)\nusing this:\n  2 \\<le> card (vertices (translation e))\n\ngoal (1 subgoal):\n 1. y + card (vertices (translation e)) - 2 < 2 \\<Longrightarrow> y < 2", "by linarith"], ["proof (state)\nthis:\n  ?y + card (vertices (translation ?e)) - 2 < 2 \\<Longrightarrow> ?y < 2\n\ngoal (2 subgoals):\n 1. (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk> \\<Longrightarrow>\n    \\<exists>f.\n       graph_homomorphism (translation e) G f \\<and>\n       (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 2. \\<exists>f.\n       graph_homomorphism (translation e) G f \\<and>\n       (0, x) \\<in> f \\<and> (1, y) \\<in> f \\<Longrightarrow>\n    (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk>", "{"], ["proof (state)\nthis:\n  ?y + card (vertices (translation ?e)) - 2 < 2 \\<Longrightarrow> ?y < 2\n\ngoal (2 subgoals):\n 1. (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk> \\<Longrightarrow>\n    \\<exists>f.\n       graph_homomorphism (translation e) G f \\<and>\n       (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 2. \\<exists>f.\n       graph_homomorphism (translation e) G f \\<and>\n       (0, x) \\<in> f \\<and> (1, y) \\<in> f \\<Longrightarrow>\n    (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk>", "fix y"], ["proof (state)\ngoal (2 subgoals):\n 1. (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk> \\<Longrightarrow>\n    \\<exists>f.\n       graph_homomorphism (translation e) G f \\<and>\n       (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 2. \\<exists>f.\n       graph_homomorphism (translation e) G f \\<and>\n       (0, x) \\<in> f \\<and> (1, y) \\<in> f \\<Longrightarrow>\n    (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk>", "fix e::\"'a allegorical_term\""], ["proof (state)\ngoal (2 subgoals):\n 1. (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk> \\<Longrightarrow>\n    \\<exists>f.\n       graph_homomorphism (translation e) G f \\<and>\n       (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 2. \\<exists>f.\n       graph_homomorphism (translation e) G f \\<and>\n       (0, x) \\<in> f \\<and> (1, y) \\<in> f \\<Longrightarrow>\n    (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk>", "assume \"y + card (vertices (translation e)) - 2 \\<in> vertices (translation e)\""], ["proof (state)\nthis:\n  y + card (vertices (translation e)) - 2 \\<in> vertices (translation e)\n\ngoal (2 subgoals):\n 1. (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk> \\<Longrightarrow>\n    \\<exists>f.\n       graph_homomorphism (translation e) G f \\<and>\n       (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 2. \\<exists>f.\n       graph_homomorphism (translation e) G f \\<and>\n       (0, x) \\<in> f \\<and> (1, y) \\<in> f \\<Longrightarrow>\n    (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk>", "hence \"y + card (vertices (translation e)) - 2 < card (vertices (translation e))\""], ["proof (prove)\nusing this:\n  y + card (vertices (translation e)) - 2 \\<in> vertices (translation e)\n\ngoal (1 subgoal):\n 1. y + card (vertices (translation e)) - 2\n    < card (vertices (translation e))", "using verts_in_translation[of e,unfolded inv_translation_def]"], ["proof (prove)\nusing this:\n  y + card (vertices (translation e)) - 2 \\<in> vertices (translation e)\n  {0..<card (vertices (translation e))} = vertices (translation e) \\<and>\n  {0, 1} \\<subseteq> vertices (translation e)\n\ngoal (1 subgoal):\n 1. y + card (vertices (translation e)) - 2\n    < card (vertices (translation e))", "by auto"], ["proof (state)\nthis:\n  y + card (vertices (translation e)) - 2 < card (vertices (translation e))\n\ngoal (2 subgoals):\n 1. (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk> \\<Longrightarrow>\n    \\<exists>f.\n       graph_homomorphism (translation e) G f \\<and>\n       (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 2. \\<exists>f.\n       graph_homomorphism (translation e) G f \\<and>\n       (0, x) \\<in> f \\<and> (1, y) \\<in> f \\<Longrightarrow>\n    (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk>", "hence \"y < 2\""], ["proof (prove)\nusing this:\n  y + card (vertices (translation e)) - 2 < card (vertices (translation e))\n\ngoal (1 subgoal):\n 1. y < 2", "using inv_tr_card_min[OF verts_in_translation,of e]"], ["proof (prove)\nusing this:\n  y + card (vertices (translation e)) - 2 < card (vertices (translation e))\n  2 \\<le> card (vertices (translation e))\n\ngoal (1 subgoal):\n 1. y < 2", "by auto"], ["proof (state)\nthis:\n  y < 2\n\ngoal (2 subgoals):\n 1. (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk> \\<Longrightarrow>\n    \\<exists>f.\n       graph_homomorphism (translation e) G f \\<and>\n       (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 2. \\<exists>f.\n       graph_homomorphism (translation e) G f \\<and>\n       (0, x) \\<in> f \\<and> (1, y) \\<in> f \\<Longrightarrow>\n    (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk>", "}"], ["proof (state)\nthis:\n  ?ya2 + card (vertices (translation ?ea2)) - 2\n  \\<in> vertices (translation ?ea2) \\<Longrightarrow>\n  ?ya2 < 2\n\ngoal (2 subgoals):\n 1. (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk> \\<Longrightarrow>\n    \\<exists>f.\n       graph_homomorphism (translation e) G f \\<and>\n       (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 2. \\<exists>f.\n       graph_homomorphism (translation e) G f \\<and>\n       (0, x) \\<in> f \\<and> (1, y) \\<in> f \\<Longrightarrow>\n    (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk>", "note [dest!] = this"], ["proof (state)\nthis:\n  ?ya2 + card (vertices (translation ?ea2)) - 2\n  \\<in> vertices (translation ?ea2) \\<Longrightarrow>\n  ?ya2 < 2\n\ngoal (2 subgoals):\n 1. (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk> \\<Longrightarrow>\n    \\<exists>f.\n       graph_homomorphism (translation e) G f \\<and>\n       (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 2. \\<exists>f.\n       graph_homomorphism (translation e) G f \\<and>\n       (0, x) \\<in> f \\<and> (1, y) \\<in> f \\<Longrightarrow>\n    (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk>", "{"], ["proof (state)\nthis:\n  ?ya2 + card (vertices (translation ?ea2)) - 2\n  \\<in> vertices (translation ?ea2) \\<Longrightarrow>\n  ?ya2 < 2\n\ngoal (2 subgoals):\n 1. (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk> \\<Longrightarrow>\n    \\<exists>f.\n       graph_homomorphism (translation e) G f \\<and>\n       (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 2. \\<exists>f.\n       graph_homomorphism (translation e) G f \\<and>\n       (0, x) \\<in> f \\<and> (1, y) \\<in> f \\<Longrightarrow>\n    (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk>", "fix y"], ["proof (state)\ngoal (2 subgoals):\n 1. (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk> \\<Longrightarrow>\n    \\<exists>f.\n       graph_homomorphism (translation e) G f \\<and>\n       (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 2. \\<exists>f.\n       graph_homomorphism (translation e) G f \\<and>\n       (0, x) \\<in> f \\<and> (1, y) \\<in> f \\<Longrightarrow>\n    (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk>", "fix e::\"'a allegorical_term\""], ["proof (state)\ngoal (2 subgoals):\n 1. (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk> \\<Longrightarrow>\n    \\<exists>f.\n       graph_homomorphism (translation e) G f \\<and>\n       (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 2. \\<exists>f.\n       graph_homomorphism (translation e) G f \\<and>\n       (0, x) \\<in> f \\<and> (1, y) \\<in> f \\<Longrightarrow>\n    (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk>", "assume \"y + card (vertices (translation e)) - Suc 0 \\<in> vertices (translation e)\""], ["proof (state)\nthis:\n  y + card (vertices (translation e)) - Suc 0 \\<in> vertices (translation e)\n\ngoal (2 subgoals):\n 1. (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk> \\<Longrightarrow>\n    \\<exists>f.\n       graph_homomorphism (translation e) G f \\<and>\n       (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 2. \\<exists>f.\n       graph_homomorphism (translation e) G f \\<and>\n       (0, x) \\<in> f \\<and> (1, y) \\<in> f \\<Longrightarrow>\n    (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk>", "hence \"y + card (vertices (translation e)) - Suc 0 \\<in> {0..<card (vertices (translation e))}\""], ["proof (prove)\nusing this:\n  y + card (vertices (translation e)) - Suc 0 \\<in> vertices (translation e)\n\ngoal (1 subgoal):\n 1. y + card (vertices (translation e)) - Suc 0\n    \\<in> {0..<card (vertices (translation e))}", "using verts_in_translation[of e,unfolded inv_translation_def]"], ["proof (prove)\nusing this:\n  y + card (vertices (translation e)) - Suc 0 \\<in> vertices (translation e)\n  {0..<card (vertices (translation e))} = vertices (translation e) \\<and>\n  {0, 1} \\<subseteq> vertices (translation e)\n\ngoal (1 subgoal):\n 1. y + card (vertices (translation e)) - Suc 0\n    \\<in> {0..<card (vertices (translation e))}", "by simp"], ["proof (state)\nthis:\n  y + card (vertices (translation e)) - Suc 0\n  \\<in> {0..<card (vertices (translation e))}\n\ngoal (2 subgoals):\n 1. (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk> \\<Longrightarrow>\n    \\<exists>f.\n       graph_homomorphism (translation e) G f \\<and>\n       (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 2. \\<exists>f.\n       graph_homomorphism (translation e) G f \\<and>\n       (0, x) \\<in> f \\<and> (1, y) \\<in> f \\<Longrightarrow>\n    (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk>", "hence \"y = 0\""], ["proof (prove)\nusing this:\n  y + card (vertices (translation e)) - Suc 0\n  \\<in> {0..<card (vertices (translation e))}\n\ngoal (1 subgoal):\n 1. y = 0", "using inv_tr_card_min[OF verts_in_translation,of e]"], ["proof (prove)\nusing this:\n  y + card (vertices (translation e)) - Suc 0\n  \\<in> {0..<card (vertices (translation e))}\n  2 \\<le> card (vertices (translation e))\n\ngoal (1 subgoal):\n 1. y = 0", "by auto"], ["proof (state)\nthis:\n  y = 0\n\ngoal (2 subgoals):\n 1. (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk> \\<Longrightarrow>\n    \\<exists>f.\n       graph_homomorphism (translation e) G f \\<and>\n       (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 2. \\<exists>f.\n       graph_homomorphism (translation e) G f \\<and>\n       (0, x) \\<in> f \\<and> (1, y) \\<in> f \\<Longrightarrow>\n    (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk>", "}"], ["proof (state)\nthis:\n  ?ya2 + card (vertices (translation ?ea2)) - Suc 0\n  \\<in> vertices (translation ?ea2) \\<Longrightarrow>\n  ?ya2 = 0\n\ngoal (2 subgoals):\n 1. (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk> \\<Longrightarrow>\n    \\<exists>f.\n       graph_homomorphism (translation e) G f \\<and>\n       (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 2. \\<exists>f.\n       graph_homomorphism (translation e) G f \\<and>\n       (0, x) \\<in> f \\<and> (1, y) \\<in> f \\<Longrightarrow>\n    (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk>", "note [dest!] = this"], ["proof (state)\nthis:\n  ?ya2 + card (vertices (translation ?ea2)) - Suc 0\n  \\<in> vertices (translation ?ea2) \\<Longrightarrow>\n  ?ya2 = 0\n\ngoal (2 subgoals):\n 1. (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk> \\<Longrightarrow>\n    \\<exists>f.\n       graph_homomorphism (translation e) G f \\<and>\n       (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 2. \\<exists>f.\n       graph_homomorphism (translation e) G f \\<and>\n       (0, x) \\<in> f \\<and> (1, y) \\<in> f \\<Longrightarrow>\n    (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk>", "{"], ["proof (state)\nthis:\n  ?ya2 + card (vertices (translation ?ea2)) - Suc 0\n  \\<in> vertices (translation ?ea2) \\<Longrightarrow>\n  ?ya2 = 0\n\ngoal (2 subgoals):\n 1. (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk> \\<Longrightarrow>\n    \\<exists>f.\n       graph_homomorphism (translation e) G f \\<and>\n       (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 2. \\<exists>f.\n       graph_homomorphism (translation e) G f \\<and>\n       (0, x) \\<in> f \\<and> (1, y) \\<in> f \\<Longrightarrow>\n    (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk>", "fix y"], ["proof (state)\ngoal (2 subgoals):\n 1. (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk> \\<Longrightarrow>\n    \\<exists>f.\n       graph_homomorphism (translation e) G f \\<and>\n       (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 2. \\<exists>f.\n       graph_homomorphism (translation e) G f \\<and>\n       (0, x) \\<in> f \\<and> (1, y) \\<in> f \\<Longrightarrow>\n    (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk>", "fix e::\"'a allegorical_term\""], ["proof (state)\ngoal (2 subgoals):\n 1. (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk> \\<Longrightarrow>\n    \\<exists>f.\n       graph_homomorphism (translation e) G f \\<and>\n       (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 2. \\<exists>f.\n       graph_homomorphism (translation e) G f \\<and>\n       (0, x) \\<in> f \\<and> (1, y) \\<in> f \\<Longrightarrow>\n    (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk>", "assume \"card (vertices (translation e)) \\<in> vertices (translation e)\""], ["proof (state)\nthis:\n  card (vertices (translation e)) \\<in> vertices (translation e)\n\ngoal (2 subgoals):\n 1. (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk> \\<Longrightarrow>\n    \\<exists>f.\n       graph_homomorphism (translation e) G f \\<and>\n       (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 2. \\<exists>f.\n       graph_homomorphism (translation e) G f \\<and>\n       (0, x) \\<in> f \\<and> (1, y) \\<in> f \\<Longrightarrow>\n    (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk>", "hence \"card (vertices (translation e)) \\<in> {0..<card (vertices (translation e))}\""], ["proof (prove)\nusing this:\n  card (vertices (translation e)) \\<in> vertices (translation e)\n\ngoal (1 subgoal):\n 1. card (vertices (translation e))\n    \\<in> {0..<card (vertices (translation e))}", "using verts_in_translation[of e,unfolded inv_translation_def]"], ["proof (prove)\nusing this:\n  card (vertices (translation e)) \\<in> vertices (translation e)\n  {0..<card (vertices (translation e))} = vertices (translation e) \\<and>\n  {0, 1} \\<subseteq> vertices (translation e)\n\ngoal (1 subgoal):\n 1. card (vertices (translation e))\n    \\<in> {0..<card (vertices (translation e))}", "by auto"], ["proof (state)\nthis:\n  card (vertices (translation e))\n  \\<in> {0..<card (vertices (translation e))}\n\ngoal (2 subgoals):\n 1. (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk> \\<Longrightarrow>\n    \\<exists>f.\n       graph_homomorphism (translation e) G f \\<and>\n       (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 2. \\<exists>f.\n       graph_homomorphism (translation e) G f \\<and>\n       (0, x) \\<in> f \\<and> (1, y) \\<in> f \\<Longrightarrow>\n    (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk>", "hence \"False\""], ["proof (prove)\nusing this:\n  card (vertices (translation e))\n  \\<in> {0..<card (vertices (translation e))}\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal (2 subgoals):\n 1. (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk> \\<Longrightarrow>\n    \\<exists>f.\n       graph_homomorphism (translation e) G f \\<and>\n       (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 2. \\<exists>f.\n       graph_homomorphism (translation e) G f \\<and>\n       (0, x) \\<in> f \\<and> (1, y) \\<in> f \\<Longrightarrow>\n    (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk>", "}"], ["proof (state)\nthis:\n  card (vertices (translation ?ea2))\n  \\<in> vertices (translation ?ea2) \\<Longrightarrow>\n  False\n\ngoal (2 subgoals):\n 1. (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk> \\<Longrightarrow>\n    \\<exists>f.\n       graph_homomorphism (translation e) G f \\<and>\n       (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 2. \\<exists>f.\n       graph_homomorphism (translation e) G f \\<and>\n       (0, x) \\<in> f \\<and> (1, y) \\<in> f \\<Longrightarrow>\n    (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk>", "note [dest!] = this"], ["proof (state)\nthis:\n  card (vertices (translation ?ea2))\n  \\<in> vertices (translation ?ea2) \\<Longrightarrow>\n  False\n\ngoal (2 subgoals):\n 1. (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk> \\<Longrightarrow>\n    \\<exists>f.\n       graph_homomorphism (translation e) G f \\<and>\n       (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 2. \\<exists>f.\n       graph_homomorphism (translation e) G f \\<and>\n       (0, x) \\<in> f \\<and> (1, y) \\<in> f \\<Longrightarrow>\n    (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk>", "{"], ["proof (state)\nthis:\n  card (vertices (translation ?ea2))\n  \\<in> vertices (translation ?ea2) \\<Longrightarrow>\n  False\n\ngoal (2 subgoals):\n 1. (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk> \\<Longrightarrow>\n    \\<exists>f.\n       graph_homomorphism (translation e) G f \\<and>\n       (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 2. \\<exists>f.\n       graph_homomorphism (translation e) G f \\<and>\n       (0, x) \\<in> f \\<and> (1, y) \\<in> f \\<Longrightarrow>\n    (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk>", "fix y"], ["proof (state)\ngoal (2 subgoals):\n 1. (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk> \\<Longrightarrow>\n    \\<exists>f.\n       graph_homomorphism (translation e) G f \\<and>\n       (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 2. \\<exists>f.\n       graph_homomorphism (translation e) G f \\<and>\n       (0, x) \\<in> f \\<and> (1, y) \\<in> f \\<Longrightarrow>\n    (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk>", "fix e::\"'a allegorical_term\""], ["proof (state)\ngoal (2 subgoals):\n 1. (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk> \\<Longrightarrow>\n    \\<exists>f.\n       graph_homomorphism (translation e) G f \\<and>\n       (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 2. \\<exists>f.\n       graph_homomorphism (translation e) G f \\<and>\n       (0, x) \\<in> f \\<and> (1, y) \\<in> f \\<Longrightarrow>\n    (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk>", "assume \"y + card (vertices (translation e)) \\<le> Suc 0\""], ["proof (state)\nthis:\n  y + card (vertices (translation e)) \\<le> Suc 0\n\ngoal (2 subgoals):\n 1. (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk> \\<Longrightarrow>\n    \\<exists>f.\n       graph_homomorphism (translation e) G f \\<and>\n       (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 2. \\<exists>f.\n       graph_homomorphism (translation e) G f \\<and>\n       (0, x) \\<in> f \\<and> (1, y) \\<in> f \\<Longrightarrow>\n    (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk>", "hence \" card (vertices (translation e)) \\<le> Suc 0\""], ["proof (prove)\nusing this:\n  y + card (vertices (translation e)) \\<le> Suc 0\n\ngoal (1 subgoal):\n 1. card (vertices (translation e)) \\<le> Suc 0", "by auto"], ["proof (state)\nthis:\n  card (vertices (translation e)) \\<le> Suc 0\n\ngoal (2 subgoals):\n 1. (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk> \\<Longrightarrow>\n    \\<exists>f.\n       graph_homomorphism (translation e) G f \\<and>\n       (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 2. \\<exists>f.\n       graph_homomorphism (translation e) G f \\<and>\n       (0, x) \\<in> f \\<and> (1, y) \\<in> f \\<Longrightarrow>\n    (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk>", "hence \"False\""], ["proof (prove)\nusing this:\n  card (vertices (translation e)) \\<le> Suc 0\n\ngoal (1 subgoal):\n 1. False", "using inv_tr_card_min[OF verts_in_translation[of e]]"], ["proof (prove)\nusing this:\n  card (vertices (translation e)) \\<le> Suc 0\n  2 \\<le> card (vertices (translation e))\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal (2 subgoals):\n 1. (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk> \\<Longrightarrow>\n    \\<exists>f.\n       graph_homomorphism (translation e) G f \\<and>\n       (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 2. \\<exists>f.\n       graph_homomorphism (translation e) G f \\<and>\n       (0, x) \\<in> f \\<and> (1, y) \\<in> f \\<Longrightarrow>\n    (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk>", "}"], ["proof (state)\nthis:\n  ?ya2 + card (vertices (translation ?ea2)) \\<le> Suc 0 \\<Longrightarrow>\n  False\n\ngoal (2 subgoals):\n 1. (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk> \\<Longrightarrow>\n    \\<exists>f.\n       graph_homomorphism (translation e) G f \\<and>\n       (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 2. \\<exists>f.\n       graph_homomorphism (translation e) G f \\<and>\n       (0, x) \\<in> f \\<and> (1, y) \\<in> f \\<Longrightarrow>\n    (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk>", "note [dest!] = this"], ["proof (state)\nthis:\n  ?ya2 + card (vertices (translation ?ea2)) \\<le> Suc 0 \\<Longrightarrow>\n  False\n\ngoal (2 subgoals):\n 1. (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk> \\<Longrightarrow>\n    \\<exists>f.\n       graph_homomorphism (translation e) G f \\<and>\n       (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 2. \\<exists>f.\n       graph_homomorphism (translation e) G f \\<and>\n       (0, x) \\<in> f \\<and> (1, y) \\<in> f \\<Longrightarrow>\n    (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk>", "assume ?lhs"], ["proof (state)\nthis:\n  (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk>\n\ngoal (2 subgoals):\n 1. (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk> \\<Longrightarrow>\n    \\<exists>f.\n       graph_homomorphism (translation e) G f \\<and>\n       (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 2. \\<exists>f.\n       graph_homomorphism (translation e) G f \\<and>\n       (0, x) \\<in> f \\<and> (1, y) \\<in> f \\<Longrightarrow>\n    (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk>", "then"], ["proof (chain)\npicking this:\n  (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk>", "show ?rhs"], ["proof (prove)\nusing this:\n  (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk>\n\ngoal (1 subgoal):\n 1. \\<exists>f.\n       graph_homomorphism (translation e) G f \\<and>\n       (0, x) \\<in> f \\<and> (1, y) \\<in> f", "proof(induct e arbitrary:x y)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>e1 e2 x y.\n       \\<lbrakk>\\<And>x y.\n                   (x, y) \\<in> :G:\\<lbrakk>e1\\<rbrakk> \\<Longrightarrow>\n                   \\<exists>f.\n                      graph_homomorphism (translation e1) G f \\<and>\n                      (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        \\<And>x y.\n           (x, y) \\<in> :G:\\<lbrakk>e2\\<rbrakk> \\<Longrightarrow>\n           \\<exists>f.\n              graph_homomorphism (translation e2) G f \\<and>\n              (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        (x, y) \\<in> :G:\\<lbrakk>A_Int e1 e2\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            graph_homomorphism (translation (A_Int e1 e2)) G\n                             f \\<and>\n                            (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 2. \\<And>e1 e2 x y.\n       \\<lbrakk>\\<And>x y.\n                   (x, y) \\<in> :G:\\<lbrakk>e1\\<rbrakk> \\<Longrightarrow>\n                   \\<exists>f.\n                      graph_homomorphism (translation e1) G f \\<and>\n                      (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        \\<And>x y.\n           (x, y) \\<in> :G:\\<lbrakk>e2\\<rbrakk> \\<Longrightarrow>\n           \\<exists>f.\n              graph_homomorphism (translation e2) G f \\<and>\n              (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        (x, y) \\<in> :G:\\<lbrakk>A_Cmp e1 e2\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            graph_homomorphism (translation (A_Cmp e1 e2)) G\n                             f \\<and>\n                            (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 3. \\<And>e x y.\n       \\<lbrakk>\\<And>x y.\n                   (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk> \\<Longrightarrow>\n                   \\<exists>f.\n                      graph_homomorphism (translation e) G f \\<and>\n                      (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        (x, y) \\<in> :G:\\<lbrakk>A_Cnv e\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            graph_homomorphism (translation (A_Cnv e)) G\n                             f \\<and>\n                            (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 4. \\<And>x xa y.\n       (xa, y) \\<in> :G:\\<lbrakk>A_Lbl x\\<rbrakk> \\<Longrightarrow>\n       \\<exists>f.\n          graph_homomorphism (translation (A_Lbl x)) G f \\<and>\n          (0, xa) \\<in> f \\<and> (1, y) \\<in> f", "case (A_Int e\\<^sub>1 e\\<^sub>2)"], ["proof (state)\nthis:\n  (?x, ?y) \\<in> :G:\\<lbrakk>e\\<^sub>1\\<rbrakk> \\<Longrightarrow>\n  \\<exists>f.\n     graph_homomorphism (translation e\\<^sub>1) G f \\<and>\n     (0, ?x) \\<in> f \\<and> (1, ?y) \\<in> f\n  (?x, ?y) \\<in> :G:\\<lbrakk>e\\<^sub>2\\<rbrakk> \\<Longrightarrow>\n  \\<exists>f.\n     graph_homomorphism (translation e\\<^sub>2) G f \\<and>\n     (0, ?x) \\<in> f \\<and> (1, ?y) \\<in> f\n  (x, y) \\<in> :G:\\<lbrakk>A_Int e\\<^sub>1 e\\<^sub>2\\<rbrakk>\n\ngoal (4 subgoals):\n 1. \\<And>e1 e2 x y.\n       \\<lbrakk>\\<And>x y.\n                   (x, y) \\<in> :G:\\<lbrakk>e1\\<rbrakk> \\<Longrightarrow>\n                   \\<exists>f.\n                      graph_homomorphism (translation e1) G f \\<and>\n                      (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        \\<And>x y.\n           (x, y) \\<in> :G:\\<lbrakk>e2\\<rbrakk> \\<Longrightarrow>\n           \\<exists>f.\n              graph_homomorphism (translation e2) G f \\<and>\n              (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        (x, y) \\<in> :G:\\<lbrakk>A_Int e1 e2\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            graph_homomorphism (translation (A_Int e1 e2)) G\n                             f \\<and>\n                            (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 2. \\<And>e1 e2 x y.\n       \\<lbrakk>\\<And>x y.\n                   (x, y) \\<in> :G:\\<lbrakk>e1\\<rbrakk> \\<Longrightarrow>\n                   \\<exists>f.\n                      graph_homomorphism (translation e1) G f \\<and>\n                      (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        \\<And>x y.\n           (x, y) \\<in> :G:\\<lbrakk>e2\\<rbrakk> \\<Longrightarrow>\n           \\<exists>f.\n              graph_homomorphism (translation e2) G f \\<and>\n              (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        (x, y) \\<in> :G:\\<lbrakk>A_Cmp e1 e2\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            graph_homomorphism (translation (A_Cmp e1 e2)) G\n                             f \\<and>\n                            (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 3. \\<And>e x y.\n       \\<lbrakk>\\<And>x y.\n                   (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk> \\<Longrightarrow>\n                   \\<exists>f.\n                      graph_homomorphism (translation e) G f \\<and>\n                      (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        (x, y) \\<in> :G:\\<lbrakk>A_Cnv e\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            graph_homomorphism (translation (A_Cnv e)) G\n                             f \\<and>\n                            (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 4. \\<And>x xa y.\n       (xa, y) \\<in> :G:\\<lbrakk>A_Lbl x\\<rbrakk> \\<Longrightarrow>\n       \\<exists>f.\n          graph_homomorphism (translation (A_Lbl x)) G f \\<and>\n          (0, xa) \\<in> f \\<and> (1, y) \\<in> f", "from A_Int"], ["proof (chain)\npicking this:\n  (?x, ?y) \\<in> :G:\\<lbrakk>e\\<^sub>1\\<rbrakk> \\<Longrightarrow>\n  \\<exists>f.\n     graph_homomorphism (translation e\\<^sub>1) G f \\<and>\n     (0, ?x) \\<in> f \\<and> (1, ?y) \\<in> f\n  (?x, ?y) \\<in> :G:\\<lbrakk>e\\<^sub>2\\<rbrakk> \\<Longrightarrow>\n  \\<exists>f.\n     graph_homomorphism (translation e\\<^sub>2) G f \\<and>\n     (0, ?x) \\<in> f \\<and> (1, ?y) \\<in> f\n  (x, y) \\<in> :G:\\<lbrakk>A_Int e\\<^sub>1 e\\<^sub>2\\<rbrakk>", "have assm:\"(x, y) \\<in> :G:\\<lbrakk>e\\<^sub>1\\<rbrakk>\" \"(x, y) \\<in> :G:\\<lbrakk>e\\<^sub>2\\<rbrakk>\""], ["proof (prove)\nusing this:\n  (?x, ?y) \\<in> :G:\\<lbrakk>e\\<^sub>1\\<rbrakk> \\<Longrightarrow>\n  \\<exists>f.\n     graph_homomorphism (translation e\\<^sub>1) G f \\<and>\n     (0, ?x) \\<in> f \\<and> (1, ?y) \\<in> f\n  (?x, ?y) \\<in> :G:\\<lbrakk>e\\<^sub>2\\<rbrakk> \\<Longrightarrow>\n  \\<exists>f.\n     graph_homomorphism (translation e\\<^sub>2) G f \\<and>\n     (0, ?x) \\<in> f \\<and> (1, ?y) \\<in> f\n  (x, y) \\<in> :G:\\<lbrakk>A_Int e\\<^sub>1 e\\<^sub>2\\<rbrakk>\n\ngoal (1 subgoal):\n 1. (x, y) \\<in> :G:\\<lbrakk>e\\<^sub>1\\<rbrakk> &&&\n    (x, y) \\<in> :G:\\<lbrakk>e\\<^sub>2\\<rbrakk>", "by auto"], ["proof (state)\nthis:\n  (x, y) \\<in> :G:\\<lbrakk>e\\<^sub>1\\<rbrakk>\n  (x, y) \\<in> :G:\\<lbrakk>e\\<^sub>2\\<rbrakk>\n\ngoal (4 subgoals):\n 1. \\<And>e1 e2 x y.\n       \\<lbrakk>\\<And>x y.\n                   (x, y) \\<in> :G:\\<lbrakk>e1\\<rbrakk> \\<Longrightarrow>\n                   \\<exists>f.\n                      graph_homomorphism (translation e1) G f \\<and>\n                      (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        \\<And>x y.\n           (x, y) \\<in> :G:\\<lbrakk>e2\\<rbrakk> \\<Longrightarrow>\n           \\<exists>f.\n              graph_homomorphism (translation e2) G f \\<and>\n              (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        (x, y) \\<in> :G:\\<lbrakk>A_Int e1 e2\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            graph_homomorphism (translation (A_Int e1 e2)) G\n                             f \\<and>\n                            (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 2. \\<And>e1 e2 x y.\n       \\<lbrakk>\\<And>x y.\n                   (x, y) \\<in> :G:\\<lbrakk>e1\\<rbrakk> \\<Longrightarrow>\n                   \\<exists>f.\n                      graph_homomorphism (translation e1) G f \\<and>\n                      (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        \\<And>x y.\n           (x, y) \\<in> :G:\\<lbrakk>e2\\<rbrakk> \\<Longrightarrow>\n           \\<exists>f.\n              graph_homomorphism (translation e2) G f \\<and>\n              (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        (x, y) \\<in> :G:\\<lbrakk>A_Cmp e1 e2\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            graph_homomorphism (translation (A_Cmp e1 e2)) G\n                             f \\<and>\n                            (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 3. \\<And>e x y.\n       \\<lbrakk>\\<And>x y.\n                   (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk> \\<Longrightarrow>\n                   \\<exists>f.\n                      graph_homomorphism (translation e) G f \\<and>\n                      (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        (x, y) \\<in> :G:\\<lbrakk>A_Cnv e\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            graph_homomorphism (translation (A_Cnv e)) G\n                             f \\<and>\n                            (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 4. \\<And>x xa y.\n       (xa, y) \\<in> :G:\\<lbrakk>A_Lbl x\\<rbrakk> \\<Longrightarrow>\n       \\<exists>f.\n          graph_homomorphism (translation (A_Lbl x)) G f \\<and>\n          (0, xa) \\<in> f \\<and> (1, y) \\<in> f", "from A_Int(1)[OF assm(1)]"], ["proof (chain)\npicking this:\n  \\<exists>f.\n     graph_homomorphism (translation e\\<^sub>1) G f \\<and>\n     (0, x) \\<in> f \\<and> (1, y) \\<in> f", "obtain f\\<^sub>1 where\n      f\\<^sub>1:\"graph_homomorphism (translation e\\<^sub>1) G f\\<^sub>1\" \"(0, x) \\<in> f\\<^sub>1\" \"(1, y) \\<in> f\\<^sub>1\""], ["proof (prove)\nusing this:\n  \\<exists>f.\n     graph_homomorphism (translation e\\<^sub>1) G f \\<and>\n     (0, x) \\<in> f \\<and> (1, y) \\<in> f\n\ngoal (1 subgoal):\n 1. (\\<And>f\\<^sub>1.\n        \\<lbrakk>graph_homomorphism (translation e\\<^sub>1) G f\\<^sub>1;\n         (0, x) \\<in> f\\<^sub>1; (1, y) \\<in> f\\<^sub>1\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  graph_homomorphism (translation e\\<^sub>1) G f\\<^sub>1\n  (0, x) \\<in> f\\<^sub>1\n  (1, y) \\<in> f\\<^sub>1\n\ngoal (4 subgoals):\n 1. \\<And>e1 e2 x y.\n       \\<lbrakk>\\<And>x y.\n                   (x, y) \\<in> :G:\\<lbrakk>e1\\<rbrakk> \\<Longrightarrow>\n                   \\<exists>f.\n                      graph_homomorphism (translation e1) G f \\<and>\n                      (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        \\<And>x y.\n           (x, y) \\<in> :G:\\<lbrakk>e2\\<rbrakk> \\<Longrightarrow>\n           \\<exists>f.\n              graph_homomorphism (translation e2) G f \\<and>\n              (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        (x, y) \\<in> :G:\\<lbrakk>A_Int e1 e2\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            graph_homomorphism (translation (A_Int e1 e2)) G\n                             f \\<and>\n                            (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 2. \\<And>e1 e2 x y.\n       \\<lbrakk>\\<And>x y.\n                   (x, y) \\<in> :G:\\<lbrakk>e1\\<rbrakk> \\<Longrightarrow>\n                   \\<exists>f.\n                      graph_homomorphism (translation e1) G f \\<and>\n                      (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        \\<And>x y.\n           (x, y) \\<in> :G:\\<lbrakk>e2\\<rbrakk> \\<Longrightarrow>\n           \\<exists>f.\n              graph_homomorphism (translation e2) G f \\<and>\n              (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        (x, y) \\<in> :G:\\<lbrakk>A_Cmp e1 e2\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            graph_homomorphism (translation (A_Cmp e1 e2)) G\n                             f \\<and>\n                            (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 3. \\<And>e x y.\n       \\<lbrakk>\\<And>x y.\n                   (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk> \\<Longrightarrow>\n                   \\<exists>f.\n                      graph_homomorphism (translation e) G f \\<and>\n                      (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        (x, y) \\<in> :G:\\<lbrakk>A_Cnv e\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            graph_homomorphism (translation (A_Cnv e)) G\n                             f \\<and>\n                            (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 4. \\<And>x xa y.\n       (xa, y) \\<in> :G:\\<lbrakk>A_Lbl x\\<rbrakk> \\<Longrightarrow>\n       \\<exists>f.\n          graph_homomorphism (translation (A_Lbl x)) G f \\<and>\n          (0, xa) \\<in> f \\<and> (1, y) \\<in> f", "from A_Int(2)[OF assm(2)]"], ["proof (chain)\npicking this:\n  \\<exists>f.\n     graph_homomorphism (translation e\\<^sub>2) G f \\<and>\n     (0, x) \\<in> f \\<and> (1, y) \\<in> f", "obtain f\\<^sub>2 where\n      f\\<^sub>2:\"graph_homomorphism (translation e\\<^sub>2) G f\\<^sub>2\" \"(0, x) \\<in> f\\<^sub>2\" \"(1, y) \\<in> f\\<^sub>2\""], ["proof (prove)\nusing this:\n  \\<exists>f.\n     graph_homomorphism (translation e\\<^sub>2) G f \\<and>\n     (0, x) \\<in> f \\<and> (1, y) \\<in> f\n\ngoal (1 subgoal):\n 1. (\\<And>f\\<^sub>2.\n        \\<lbrakk>graph_homomorphism (translation e\\<^sub>2) G f\\<^sub>2;\n         (0, x) \\<in> f\\<^sub>2; (1, y) \\<in> f\\<^sub>2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  graph_homomorphism (translation e\\<^sub>2) G f\\<^sub>2\n  (0, x) \\<in> f\\<^sub>2\n  (1, y) \\<in> f\\<^sub>2\n\ngoal (4 subgoals):\n 1. \\<And>e1 e2 x y.\n       \\<lbrakk>\\<And>x y.\n                   (x, y) \\<in> :G:\\<lbrakk>e1\\<rbrakk> \\<Longrightarrow>\n                   \\<exists>f.\n                      graph_homomorphism (translation e1) G f \\<and>\n                      (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        \\<And>x y.\n           (x, y) \\<in> :G:\\<lbrakk>e2\\<rbrakk> \\<Longrightarrow>\n           \\<exists>f.\n              graph_homomorphism (translation e2) G f \\<and>\n              (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        (x, y) \\<in> :G:\\<lbrakk>A_Int e1 e2\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            graph_homomorphism (translation (A_Int e1 e2)) G\n                             f \\<and>\n                            (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 2. \\<And>e1 e2 x y.\n       \\<lbrakk>\\<And>x y.\n                   (x, y) \\<in> :G:\\<lbrakk>e1\\<rbrakk> \\<Longrightarrow>\n                   \\<exists>f.\n                      graph_homomorphism (translation e1) G f \\<and>\n                      (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        \\<And>x y.\n           (x, y) \\<in> :G:\\<lbrakk>e2\\<rbrakk> \\<Longrightarrow>\n           \\<exists>f.\n              graph_homomorphism (translation e2) G f \\<and>\n              (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        (x, y) \\<in> :G:\\<lbrakk>A_Cmp e1 e2\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            graph_homomorphism (translation (A_Cmp e1 e2)) G\n                             f \\<and>\n                            (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 3. \\<And>e x y.\n       \\<lbrakk>\\<And>x y.\n                   (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk> \\<Longrightarrow>\n                   \\<exists>f.\n                      graph_homomorphism (translation e) G f \\<and>\n                      (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        (x, y) \\<in> :G:\\<lbrakk>A_Cnv e\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            graph_homomorphism (translation (A_Cnv e)) G\n                             f \\<and>\n                            (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 4. \\<And>x xa y.\n       (xa, y) \\<in> :G:\\<lbrakk>A_Lbl x\\<rbrakk> \\<Longrightarrow>\n       \\<exists>f.\n          graph_homomorphism (translation (A_Lbl x)) G f \\<and>\n          (0, xa) \\<in> f \\<and> (1, y) \\<in> f", "from f\\<^sub>1 f\\<^sub>2"], ["proof (chain)\npicking this:\n  graph_homomorphism (translation e\\<^sub>1) G f\\<^sub>1\n  (0, x) \\<in> f\\<^sub>1\n  (1, y) \\<in> f\\<^sub>1\n  graph_homomorphism (translation e\\<^sub>2) G f\\<^sub>2\n  (0, x) \\<in> f\\<^sub>2\n  (1, y) \\<in> f\\<^sub>2", "have v:\"Domain f\\<^sub>1 = vertices (translation e\\<^sub>1)\" \"Domain f\\<^sub>2 = vertices (translation e\\<^sub>2)\""], ["proof (prove)\nusing this:\n  graph_homomorphism (translation e\\<^sub>1) G f\\<^sub>1\n  (0, x) \\<in> f\\<^sub>1\n  (1, y) \\<in> f\\<^sub>1\n  graph_homomorphism (translation e\\<^sub>2) G f\\<^sub>2\n  (0, x) \\<in> f\\<^sub>2\n  (1, y) \\<in> f\\<^sub>2\n\ngoal (1 subgoal):\n 1. Domain f\\<^sub>1 = vertices (translation e\\<^sub>1) &&&\n    Domain f\\<^sub>2 = vertices (translation e\\<^sub>2)", "unfolding graph_homomorphism_def"], ["proof (prove)\nusing this:\n  vertices (translation e\\<^sub>1) = Domain f\\<^sub>1 \\<and>\n  graph (translation e\\<^sub>1) \\<and>\n  graph G \\<and>\n  f\\<^sub>1 `` vertices (translation e\\<^sub>1)\n  \\<subseteq> vertices G \\<and>\n  univalent f\\<^sub>1 \\<and>\n  edge_preserving f\\<^sub>1 (edges (translation e\\<^sub>1)) (edges G)\n  (0, x) \\<in> f\\<^sub>1\n  (1, y) \\<in> f\\<^sub>1\n  vertices (translation e\\<^sub>2) = Domain f\\<^sub>2 \\<and>\n  graph (translation e\\<^sub>2) \\<and>\n  graph G \\<and>\n  f\\<^sub>2 `` vertices (translation e\\<^sub>2)\n  \\<subseteq> vertices G \\<and>\n  univalent f\\<^sub>2 \\<and>\n  edge_preserving f\\<^sub>2 (edges (translation e\\<^sub>2)) (edges G)\n  (0, x) \\<in> f\\<^sub>2\n  (1, y) \\<in> f\\<^sub>2\n\ngoal (1 subgoal):\n 1. Domain f\\<^sub>1 = vertices (translation e\\<^sub>1) &&&\n    Domain f\\<^sub>2 = vertices (translation e\\<^sub>2)", "by auto"], ["proof (state)\nthis:\n  Domain f\\<^sub>1 = vertices (translation e\\<^sub>1)\n  Domain f\\<^sub>2 = vertices (translation e\\<^sub>2)\n\ngoal (4 subgoals):\n 1. \\<And>e1 e2 x y.\n       \\<lbrakk>\\<And>x y.\n                   (x, y) \\<in> :G:\\<lbrakk>e1\\<rbrakk> \\<Longrightarrow>\n                   \\<exists>f.\n                      graph_homomorphism (translation e1) G f \\<and>\n                      (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        \\<And>x y.\n           (x, y) \\<in> :G:\\<lbrakk>e2\\<rbrakk> \\<Longrightarrow>\n           \\<exists>f.\n              graph_homomorphism (translation e2) G f \\<and>\n              (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        (x, y) \\<in> :G:\\<lbrakk>A_Int e1 e2\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            graph_homomorphism (translation (A_Int e1 e2)) G\n                             f \\<and>\n                            (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 2. \\<And>e1 e2 x y.\n       \\<lbrakk>\\<And>x y.\n                   (x, y) \\<in> :G:\\<lbrakk>e1\\<rbrakk> \\<Longrightarrow>\n                   \\<exists>f.\n                      graph_homomorphism (translation e1) G f \\<and>\n                      (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        \\<And>x y.\n           (x, y) \\<in> :G:\\<lbrakk>e2\\<rbrakk> \\<Longrightarrow>\n           \\<exists>f.\n              graph_homomorphism (translation e2) G f \\<and>\n              (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        (x, y) \\<in> :G:\\<lbrakk>A_Cmp e1 e2\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            graph_homomorphism (translation (A_Cmp e1 e2)) G\n                             f \\<and>\n                            (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 3. \\<And>e x y.\n       \\<lbrakk>\\<And>x y.\n                   (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk> \\<Longrightarrow>\n                   \\<exists>f.\n                      graph_homomorphism (translation e) G f \\<and>\n                      (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        (x, y) \\<in> :G:\\<lbrakk>A_Cnv e\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            graph_homomorphism (translation (A_Cnv e)) G\n                             f \\<and>\n                            (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 4. \\<And>x xa y.\n       (xa, y) \\<in> :G:\\<lbrakk>A_Lbl x\\<rbrakk> \\<Longrightarrow>\n       \\<exists>f.\n          graph_homomorphism (translation (A_Lbl x)) G f \\<and>\n          (0, xa) \\<in> f \\<and> (1, y) \\<in> f", "let ?f\\<^sub>2 = \"(\\<lambda> x. if x < 2 then x else x + card (vertices (translation e\\<^sub>1)) - 2)\""], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>e1 e2 x y.\n       \\<lbrakk>\\<And>x y.\n                   (x, y) \\<in> :G:\\<lbrakk>e1\\<rbrakk> \\<Longrightarrow>\n                   \\<exists>f.\n                      graph_homomorphism (translation e1) G f \\<and>\n                      (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        \\<And>x y.\n           (x, y) \\<in> :G:\\<lbrakk>e2\\<rbrakk> \\<Longrightarrow>\n           \\<exists>f.\n              graph_homomorphism (translation e2) G f \\<and>\n              (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        (x, y) \\<in> :G:\\<lbrakk>A_Int e1 e2\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            graph_homomorphism (translation (A_Int e1 e2)) G\n                             f \\<and>\n                            (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 2. \\<And>e1 e2 x y.\n       \\<lbrakk>\\<And>x y.\n                   (x, y) \\<in> :G:\\<lbrakk>e1\\<rbrakk> \\<Longrightarrow>\n                   \\<exists>f.\n                      graph_homomorphism (translation e1) G f \\<and>\n                      (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        \\<And>x y.\n           (x, y) \\<in> :G:\\<lbrakk>e2\\<rbrakk> \\<Longrightarrow>\n           \\<exists>f.\n              graph_homomorphism (translation e2) G f \\<and>\n              (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        (x, y) \\<in> :G:\\<lbrakk>A_Cmp e1 e2\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            graph_homomorphism (translation (A_Cmp e1 e2)) G\n                             f \\<and>\n                            (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 3. \\<And>e x y.\n       \\<lbrakk>\\<And>x y.\n                   (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk> \\<Longrightarrow>\n                   \\<exists>f.\n                      graph_homomorphism (translation e) G f \\<and>\n                      (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        (x, y) \\<in> :G:\\<lbrakk>A_Cnv e\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            graph_homomorphism (translation (A_Cnv e)) G\n                             f \\<and>\n                            (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 4. \\<And>x xa y.\n       (xa, y) \\<in> :G:\\<lbrakk>A_Lbl x\\<rbrakk> \\<Longrightarrow>\n       \\<exists>f.\n          graph_homomorphism (translation (A_Lbl x)) G f \\<and>\n          (0, xa) \\<in> f \\<and> (1, y) \\<in> f", "let ?tr\\<^sub>2 = \"on_graph (translation e\\<^sub>2) ?f\\<^sub>2\""], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>e1 e2 x y.\n       \\<lbrakk>\\<And>x y.\n                   (x, y) \\<in> :G:\\<lbrakk>e1\\<rbrakk> \\<Longrightarrow>\n                   \\<exists>f.\n                      graph_homomorphism (translation e1) G f \\<and>\n                      (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        \\<And>x y.\n           (x, y) \\<in> :G:\\<lbrakk>e2\\<rbrakk> \\<Longrightarrow>\n           \\<exists>f.\n              graph_homomorphism (translation e2) G f \\<and>\n              (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        (x, y) \\<in> :G:\\<lbrakk>A_Int e1 e2\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            graph_homomorphism (translation (A_Int e1 e2)) G\n                             f \\<and>\n                            (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 2. \\<And>e1 e2 x y.\n       \\<lbrakk>\\<And>x y.\n                   (x, y) \\<in> :G:\\<lbrakk>e1\\<rbrakk> \\<Longrightarrow>\n                   \\<exists>f.\n                      graph_homomorphism (translation e1) G f \\<and>\n                      (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        \\<And>x y.\n           (x, y) \\<in> :G:\\<lbrakk>e2\\<rbrakk> \\<Longrightarrow>\n           \\<exists>f.\n              graph_homomorphism (translation e2) G f \\<and>\n              (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        (x, y) \\<in> :G:\\<lbrakk>A_Cmp e1 e2\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            graph_homomorphism (translation (A_Cmp e1 e2)) G\n                             f \\<and>\n                            (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 3. \\<And>e x y.\n       \\<lbrakk>\\<And>x y.\n                   (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk> \\<Longrightarrow>\n                   \\<exists>f.\n                      graph_homomorphism (translation e) G f \\<and>\n                      (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        (x, y) \\<in> :G:\\<lbrakk>A_Cnv e\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            graph_homomorphism (translation (A_Cnv e)) G\n                             f \\<and>\n                            (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 4. \\<And>x xa y.\n       (xa, y) \\<in> :G:\\<lbrakk>A_Lbl x\\<rbrakk> \\<Longrightarrow>\n       \\<exists>f.\n          graph_homomorphism (translation (A_Lbl x)) G f \\<and>\n          (0, xa) \\<in> f \\<and> (1, y) \\<in> f", "have inj2:\"inj_on ?f\\<^sub>2 (vertices (translation e\\<^sub>2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_on\n     (\\<lambda>x.\n         if x < 2 then x\n         else x + card (vertices (translation e\\<^sub>1)) - 2)\n     (vertices (translation e\\<^sub>2))", "unfolding inj_on_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>vertices (translation e\\<^sub>2).\n       \\<forall>y\\<in>vertices (translation e\\<^sub>2).\n          (if x < 2 then x\n           else x + card (vertices (translation e\\<^sub>1)) - 2) =\n          (if y < 2 then y\n           else y + card (vertices (translation e\\<^sub>1)) -\n                2) \\<longrightarrow>\n          x = y", "by auto"], ["proof (state)\nthis:\n  inj_on\n   (\\<lambda>x.\n       if x < 2 then x else x + card (vertices (translation e\\<^sub>1)) - 2)\n   (vertices (translation e\\<^sub>2))\n\ngoal (4 subgoals):\n 1. \\<And>e1 e2 x y.\n       \\<lbrakk>\\<And>x y.\n                   (x, y) \\<in> :G:\\<lbrakk>e1\\<rbrakk> \\<Longrightarrow>\n                   \\<exists>f.\n                      graph_homomorphism (translation e1) G f \\<and>\n                      (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        \\<And>x y.\n           (x, y) \\<in> :G:\\<lbrakk>e2\\<rbrakk> \\<Longrightarrow>\n           \\<exists>f.\n              graph_homomorphism (translation e2) G f \\<and>\n              (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        (x, y) \\<in> :G:\\<lbrakk>A_Int e1 e2\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            graph_homomorphism (translation (A_Int e1 e2)) G\n                             f \\<and>\n                            (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 2. \\<And>e1 e2 x y.\n       \\<lbrakk>\\<And>x y.\n                   (x, y) \\<in> :G:\\<lbrakk>e1\\<rbrakk> \\<Longrightarrow>\n                   \\<exists>f.\n                      graph_homomorphism (translation e1) G f \\<and>\n                      (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        \\<And>x y.\n           (x, y) \\<in> :G:\\<lbrakk>e2\\<rbrakk> \\<Longrightarrow>\n           \\<exists>f.\n              graph_homomorphism (translation e2) G f \\<and>\n              (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        (x, y) \\<in> :G:\\<lbrakk>A_Cmp e1 e2\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            graph_homomorphism (translation (A_Cmp e1 e2)) G\n                             f \\<and>\n                            (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 3. \\<And>e x y.\n       \\<lbrakk>\\<And>x y.\n                   (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk> \\<Longrightarrow>\n                   \\<exists>f.\n                      graph_homomorphism (translation e) G f \\<and>\n                      (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        (x, y) \\<in> :G:\\<lbrakk>A_Cnv e\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            graph_homomorphism (translation (A_Cnv e)) G\n                             f \\<and>\n                            (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 4. \\<And>x xa y.\n       (xa, y) \\<in> :G:\\<lbrakk>A_Lbl x\\<rbrakk> \\<Longrightarrow>\n       \\<exists>f.\n          graph_homomorphism (translation (A_Lbl x)) G f \\<and>\n          (0, xa) \\<in> f \\<and> (1, y) \\<in> f", "have \"(0,0) \\<in> ?tr\\<^sub>2\\<inverse>\" \"(1,1) \\<in> ?tr\\<^sub>2\\<inverse>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (0, 0)\n    \\<in> (on_graph (translation e\\<^sub>2)\n            (\\<lambda>x.\n                if x < 2 then x\n                else x + card (vertices (translation e\\<^sub>1)) -\n                     2))\\<inverse> &&&\n    (1, 1)\n    \\<in> (on_graph (translation e\\<^sub>2)\n            (\\<lambda>x.\n                if x < 2 then x\n                else x + card (vertices (translation e\\<^sub>1)) -\n                     2))\\<inverse>", "by auto"], ["proof (state)\nthis:\n  (0, 0)\n  \\<in> (on_graph (translation e\\<^sub>2)\n          (\\<lambda>x.\n              if x < 2 then x\n              else x + card (vertices (translation e\\<^sub>1)) -\n                   2))\\<inverse>\n  (1, 1)\n  \\<in> (on_graph (translation e\\<^sub>2)\n          (\\<lambda>x.\n              if x < 2 then x\n              else x + card (vertices (translation e\\<^sub>1)) -\n                   2))\\<inverse>\n\ngoal (4 subgoals):\n 1. \\<And>e1 e2 x y.\n       \\<lbrakk>\\<And>x y.\n                   (x, y) \\<in> :G:\\<lbrakk>e1\\<rbrakk> \\<Longrightarrow>\n                   \\<exists>f.\n                      graph_homomorphism (translation e1) G f \\<and>\n                      (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        \\<And>x y.\n           (x, y) \\<in> :G:\\<lbrakk>e2\\<rbrakk> \\<Longrightarrow>\n           \\<exists>f.\n              graph_homomorphism (translation e2) G f \\<and>\n              (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        (x, y) \\<in> :G:\\<lbrakk>A_Int e1 e2\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            graph_homomorphism (translation (A_Int e1 e2)) G\n                             f \\<and>\n                            (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 2. \\<And>e1 e2 x y.\n       \\<lbrakk>\\<And>x y.\n                   (x, y) \\<in> :G:\\<lbrakk>e1\\<rbrakk> \\<Longrightarrow>\n                   \\<exists>f.\n                      graph_homomorphism (translation e1) G f \\<and>\n                      (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        \\<And>x y.\n           (x, y) \\<in> :G:\\<lbrakk>e2\\<rbrakk> \\<Longrightarrow>\n           \\<exists>f.\n              graph_homomorphism (translation e2) G f \\<and>\n              (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        (x, y) \\<in> :G:\\<lbrakk>A_Cmp e1 e2\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            graph_homomorphism (translation (A_Cmp e1 e2)) G\n                             f \\<and>\n                            (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 3. \\<And>e x y.\n       \\<lbrakk>\\<And>x y.\n                   (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk> \\<Longrightarrow>\n                   \\<exists>f.\n                      graph_homomorphism (translation e) G f \\<and>\n                      (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        (x, y) \\<in> :G:\\<lbrakk>A_Cnv e\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            graph_homomorphism (translation (A_Cnv e)) G\n                             f \\<and>\n                            (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 4. \\<And>x xa y.\n       (xa, y) \\<in> :G:\\<lbrakk>A_Lbl x\\<rbrakk> \\<Longrightarrow>\n       \\<exists>f.\n          graph_homomorphism (translation (A_Lbl x)) G f \\<and>\n          (0, xa) \\<in> f \\<and> (1, y) \\<in> f", "from this[THEN relcompI] f\\<^sub>2(2,3)"], ["proof (chain)\npicking this:\n  (0, ?c) \\<in> ?s \\<Longrightarrow>\n  (0, ?c)\n  \\<in> (on_graph (translation e\\<^sub>2)\n          (\\<lambda>x.\n              if x < 2 then x\n              else x + card (vertices (translation e\\<^sub>1)) -\n                   2))\\<inverse> O\n        ?s\n  (1, ?c) \\<in> ?s \\<Longrightarrow>\n  (1, ?c)\n  \\<in> (on_graph (translation e\\<^sub>2)\n          (\\<lambda>x.\n              if x < 2 then x\n              else x + card (vertices (translation e\\<^sub>1)) -\n                   2))\\<inverse> O\n        ?s\n  (0, x) \\<in> f\\<^sub>2\n  (1, y) \\<in> f\\<^sub>2", "have zero_one:\"(0,x) \\<in> ?tr\\<^sub>2\\<inverse> O f\\<^sub>2\"\n                  \"(1,y) \\<in> ?tr\\<^sub>2\\<inverse> O f\\<^sub>2\""], ["proof (prove)\nusing this:\n  (0, ?c) \\<in> ?s \\<Longrightarrow>\n  (0, ?c)\n  \\<in> (on_graph (translation e\\<^sub>2)\n          (\\<lambda>x.\n              if x < 2 then x\n              else x + card (vertices (translation e\\<^sub>1)) -\n                   2))\\<inverse> O\n        ?s\n  (1, ?c) \\<in> ?s \\<Longrightarrow>\n  (1, ?c)\n  \\<in> (on_graph (translation e\\<^sub>2)\n          (\\<lambda>x.\n              if x < 2 then x\n              else x + card (vertices (translation e\\<^sub>1)) -\n                   2))\\<inverse> O\n        ?s\n  (0, x) \\<in> f\\<^sub>2\n  (1, y) \\<in> f\\<^sub>2\n\ngoal (1 subgoal):\n 1. (0, x)\n    \\<in> (on_graph (translation e\\<^sub>2)\n            (\\<lambda>x.\n                if x < 2 then x\n                else x + card (vertices (translation e\\<^sub>1)) -\n                     2))\\<inverse> O\n          f\\<^sub>2 &&&\n    (1, y)\n    \\<in> (on_graph (translation e\\<^sub>2)\n            (\\<lambda>x.\n                if x < 2 then x\n                else x + card (vertices (translation e\\<^sub>1)) -\n                     2))\\<inverse> O\n          f\\<^sub>2", "by auto"], ["proof (state)\nthis:\n  (0, x)\n  \\<in> (on_graph (translation e\\<^sub>2)\n          (\\<lambda>x.\n              if x < 2 then x\n              else x + card (vertices (translation e\\<^sub>1)) -\n                   2))\\<inverse> O\n        f\\<^sub>2\n  (1, y)\n  \\<in> (on_graph (translation e\\<^sub>2)\n          (\\<lambda>x.\n              if x < 2 then x\n              else x + card (vertices (translation e\\<^sub>1)) -\n                   2))\\<inverse> O\n        f\\<^sub>2\n\ngoal (4 subgoals):\n 1. \\<And>e1 e2 x y.\n       \\<lbrakk>\\<And>x y.\n                   (x, y) \\<in> :G:\\<lbrakk>e1\\<rbrakk> \\<Longrightarrow>\n                   \\<exists>f.\n                      graph_homomorphism (translation e1) G f \\<and>\n                      (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        \\<And>x y.\n           (x, y) \\<in> :G:\\<lbrakk>e2\\<rbrakk> \\<Longrightarrow>\n           \\<exists>f.\n              graph_homomorphism (translation e2) G f \\<and>\n              (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        (x, y) \\<in> :G:\\<lbrakk>A_Int e1 e2\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            graph_homomorphism (translation (A_Int e1 e2)) G\n                             f \\<and>\n                            (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 2. \\<And>e1 e2 x y.\n       \\<lbrakk>\\<And>x y.\n                   (x, y) \\<in> :G:\\<lbrakk>e1\\<rbrakk> \\<Longrightarrow>\n                   \\<exists>f.\n                      graph_homomorphism (translation e1) G f \\<and>\n                      (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        \\<And>x y.\n           (x, y) \\<in> :G:\\<lbrakk>e2\\<rbrakk> \\<Longrightarrow>\n           \\<exists>f.\n              graph_homomorphism (translation e2) G f \\<and>\n              (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        (x, y) \\<in> :G:\\<lbrakk>A_Cmp e1 e2\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            graph_homomorphism (translation (A_Cmp e1 e2)) G\n                             f \\<and>\n                            (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 3. \\<And>e x y.\n       \\<lbrakk>\\<And>x y.\n                   (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk> \\<Longrightarrow>\n                   \\<exists>f.\n                      graph_homomorphism (translation e) G f \\<and>\n                      (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        (x, y) \\<in> :G:\\<lbrakk>A_Cnv e\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            graph_homomorphism (translation (A_Cnv e)) G\n                             f \\<and>\n                            (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 4. \\<And>x xa y.\n       (xa, y) \\<in> :G:\\<lbrakk>A_Lbl x\\<rbrakk> \\<Longrightarrow>\n       \\<exists>f.\n          graph_homomorphism (translation (A_Lbl x)) G f \\<and>\n          (0, xa) \\<in> f \\<and> (1, y) \\<in> f", "{"], ["proof (state)\nthis:\n  (0, x)\n  \\<in> (on_graph (translation e\\<^sub>2)\n          (\\<lambda>x.\n              if x < 2 then x\n              else x + card (vertices (translation e\\<^sub>1)) -\n                   2))\\<inverse> O\n        f\\<^sub>2\n  (1, y)\n  \\<in> (on_graph (translation e\\<^sub>2)\n          (\\<lambda>x.\n              if x < 2 then x\n              else x + card (vertices (translation e\\<^sub>1)) -\n                   2))\\<inverse> O\n        f\\<^sub>2\n\ngoal (4 subgoals):\n 1. \\<And>e1 e2 x y.\n       \\<lbrakk>\\<And>x y.\n                   (x, y) \\<in> :G:\\<lbrakk>e1\\<rbrakk> \\<Longrightarrow>\n                   \\<exists>f.\n                      graph_homomorphism (translation e1) G f \\<and>\n                      (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        \\<And>x y.\n           (x, y) \\<in> :G:\\<lbrakk>e2\\<rbrakk> \\<Longrightarrow>\n           \\<exists>f.\n              graph_homomorphism (translation e2) G f \\<and>\n              (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        (x, y) \\<in> :G:\\<lbrakk>A_Int e1 e2\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            graph_homomorphism (translation (A_Int e1 e2)) G\n                             f \\<and>\n                            (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 2. \\<And>e1 e2 x y.\n       \\<lbrakk>\\<And>x y.\n                   (x, y) \\<in> :G:\\<lbrakk>e1\\<rbrakk> \\<Longrightarrow>\n                   \\<exists>f.\n                      graph_homomorphism (translation e1) G f \\<and>\n                      (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        \\<And>x y.\n           (x, y) \\<in> :G:\\<lbrakk>e2\\<rbrakk> \\<Longrightarrow>\n           \\<exists>f.\n              graph_homomorphism (translation e2) G f \\<and>\n              (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        (x, y) \\<in> :G:\\<lbrakk>A_Cmp e1 e2\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            graph_homomorphism (translation (A_Cmp e1 e2)) G\n                             f \\<and>\n                            (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 3. \\<And>e x y.\n       \\<lbrakk>\\<And>x y.\n                   (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk> \\<Longrightarrow>\n                   \\<exists>f.\n                      graph_homomorphism (translation e) G f \\<and>\n                      (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        (x, y) \\<in> :G:\\<lbrakk>A_Cnv e\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            graph_homomorphism (translation (A_Cnv e)) G\n                             f \\<and>\n                            (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 4. \\<And>x xa y.\n       (xa, y) \\<in> :G:\\<lbrakk>A_Lbl x\\<rbrakk> \\<Longrightarrow>\n       \\<exists>f.\n          graph_homomorphism (translation (A_Lbl x)) G f \\<and>\n          (0, xa) \\<in> f \\<and> (1, y) \\<in> f", "fix yb zb"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>e1 e2 x y.\n       \\<lbrakk>\\<And>x y.\n                   (x, y) \\<in> :G:\\<lbrakk>e1\\<rbrakk> \\<Longrightarrow>\n                   \\<exists>f.\n                      graph_homomorphism (translation e1) G f \\<and>\n                      (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        \\<And>x y.\n           (x, y) \\<in> :G:\\<lbrakk>e2\\<rbrakk> \\<Longrightarrow>\n           \\<exists>f.\n              graph_homomorphism (translation e2) G f \\<and>\n              (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        (x, y) \\<in> :G:\\<lbrakk>A_Int e1 e2\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            graph_homomorphism (translation (A_Int e1 e2)) G\n                             f \\<and>\n                            (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 2. \\<And>e1 e2 x y.\n       \\<lbrakk>\\<And>x y.\n                   (x, y) \\<in> :G:\\<lbrakk>e1\\<rbrakk> \\<Longrightarrow>\n                   \\<exists>f.\n                      graph_homomorphism (translation e1) G f \\<and>\n                      (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        \\<And>x y.\n           (x, y) \\<in> :G:\\<lbrakk>e2\\<rbrakk> \\<Longrightarrow>\n           \\<exists>f.\n              graph_homomorphism (translation e2) G f \\<and>\n              (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        (x, y) \\<in> :G:\\<lbrakk>A_Cmp e1 e2\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            graph_homomorphism (translation (A_Cmp e1 e2)) G\n                             f \\<and>\n                            (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 3. \\<And>e x y.\n       \\<lbrakk>\\<And>x y.\n                   (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk> \\<Longrightarrow>\n                   \\<exists>f.\n                      graph_homomorphism (translation e) G f \\<and>\n                      (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        (x, y) \\<in> :G:\\<lbrakk>A_Cnv e\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            graph_homomorphism (translation (A_Cnv e)) G\n                             f \\<and>\n                            (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 4. \\<And>x xa y.\n       (xa, y) \\<in> :G:\\<lbrakk>A_Lbl x\\<rbrakk> \\<Longrightarrow>\n       \\<exists>f.\n          graph_homomorphism (translation (A_Lbl x)) G f \\<and>\n          (0, xa) \\<in> f \\<and> (1, y) \\<in> f", "assume \"(yb + card (vertices (translation e\\<^sub>1)) - 2, zb) \\<in> f\\<^sub>1\""], ["proof (state)\nthis:\n  (yb + card (vertices (translation e\\<^sub>1)) - 2, zb) \\<in> f\\<^sub>1\n\ngoal (4 subgoals):\n 1. \\<And>e1 e2 x y.\n       \\<lbrakk>\\<And>x y.\n                   (x, y) \\<in> :G:\\<lbrakk>e1\\<rbrakk> \\<Longrightarrow>\n                   \\<exists>f.\n                      graph_homomorphism (translation e1) G f \\<and>\n                      (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        \\<And>x y.\n           (x, y) \\<in> :G:\\<lbrakk>e2\\<rbrakk> \\<Longrightarrow>\n           \\<exists>f.\n              graph_homomorphism (translation e2) G f \\<and>\n              (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        (x, y) \\<in> :G:\\<lbrakk>A_Int e1 e2\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            graph_homomorphism (translation (A_Int e1 e2)) G\n                             f \\<and>\n                            (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 2. \\<And>e1 e2 x y.\n       \\<lbrakk>\\<And>x y.\n                   (x, y) \\<in> :G:\\<lbrakk>e1\\<rbrakk> \\<Longrightarrow>\n                   \\<exists>f.\n                      graph_homomorphism (translation e1) G f \\<and>\n                      (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        \\<And>x y.\n           (x, y) \\<in> :G:\\<lbrakk>e2\\<rbrakk> \\<Longrightarrow>\n           \\<exists>f.\n              graph_homomorphism (translation e2) G f \\<and>\n              (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        (x, y) \\<in> :G:\\<lbrakk>A_Cmp e1 e2\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            graph_homomorphism (translation (A_Cmp e1 e2)) G\n                             f \\<and>\n                            (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 3. \\<And>e x y.\n       \\<lbrakk>\\<And>x y.\n                   (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk> \\<Longrightarrow>\n                   \\<exists>f.\n                      graph_homomorphism (translation e) G f \\<and>\n                      (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        (x, y) \\<in> :G:\\<lbrakk>A_Cnv e\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            graph_homomorphism (translation (A_Cnv e)) G\n                             f \\<and>\n                            (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 4. \\<And>x xa y.\n       (xa, y) \\<in> :G:\\<lbrakk>A_Lbl x\\<rbrakk> \\<Longrightarrow>\n       \\<exists>f.\n          graph_homomorphism (translation (A_Lbl x)) G f \\<and>\n          (0, xa) \\<in> f \\<and> (1, y) \\<in> f", "hence \"yb + card (vertices (translation e\\<^sub>1)) - 2 \\<in> vertices (translation e\\<^sub>1)\""], ["proof (prove)\nusing this:\n  (yb + card (vertices (translation e\\<^sub>1)) - 2, zb) \\<in> f\\<^sub>1\n\ngoal (1 subgoal):\n 1. yb + card (vertices (translation e\\<^sub>1)) - 2\n    \\<in> vertices (translation e\\<^sub>1)", "using v"], ["proof (prove)\nusing this:\n  (yb + card (vertices (translation e\\<^sub>1)) - 2, zb) \\<in> f\\<^sub>1\n  Domain f\\<^sub>1 = vertices (translation e\\<^sub>1)\n  Domain f\\<^sub>2 = vertices (translation e\\<^sub>2)\n\ngoal (1 subgoal):\n 1. yb + card (vertices (translation e\\<^sub>1)) - 2\n    \\<in> vertices (translation e\\<^sub>1)", "by auto"], ["proof (state)\nthis:\n  yb + card (vertices (translation e\\<^sub>1)) - 2\n  \\<in> vertices (translation e\\<^sub>1)\n\ngoal (4 subgoals):\n 1. \\<And>e1 e2 x y.\n       \\<lbrakk>\\<And>x y.\n                   (x, y) \\<in> :G:\\<lbrakk>e1\\<rbrakk> \\<Longrightarrow>\n                   \\<exists>f.\n                      graph_homomorphism (translation e1) G f \\<and>\n                      (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        \\<And>x y.\n           (x, y) \\<in> :G:\\<lbrakk>e2\\<rbrakk> \\<Longrightarrow>\n           \\<exists>f.\n              graph_homomorphism (translation e2) G f \\<and>\n              (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        (x, y) \\<in> :G:\\<lbrakk>A_Int e1 e2\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            graph_homomorphism (translation (A_Int e1 e2)) G\n                             f \\<and>\n                            (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 2. \\<And>e1 e2 x y.\n       \\<lbrakk>\\<And>x y.\n                   (x, y) \\<in> :G:\\<lbrakk>e1\\<rbrakk> \\<Longrightarrow>\n                   \\<exists>f.\n                      graph_homomorphism (translation e1) G f \\<and>\n                      (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        \\<And>x y.\n           (x, y) \\<in> :G:\\<lbrakk>e2\\<rbrakk> \\<Longrightarrow>\n           \\<exists>f.\n              graph_homomorphism (translation e2) G f \\<and>\n              (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        (x, y) \\<in> :G:\\<lbrakk>A_Cmp e1 e2\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            graph_homomorphism (translation (A_Cmp e1 e2)) G\n                             f \\<and>\n                            (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 3. \\<And>e x y.\n       \\<lbrakk>\\<And>x y.\n                   (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk> \\<Longrightarrow>\n                   \\<exists>f.\n                      graph_homomorphism (translation e) G f \\<and>\n                      (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        (x, y) \\<in> :G:\\<lbrakk>A_Cnv e\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            graph_homomorphism (translation (A_Cnv e)) G\n                             f \\<and>\n                            (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 4. \\<And>x xa y.\n       (xa, y) \\<in> :G:\\<lbrakk>A_Lbl x\\<rbrakk> \\<Longrightarrow>\n       \\<exists>f.\n          graph_homomorphism (translation (A_Lbl x)) G f \\<and>\n          (0, xa) \\<in> f \\<and> (1, y) \\<in> f", "}"], ["proof (state)\nthis:\n  (?yb2 + card (vertices (translation e\\<^sub>1)) - 2, ?zb2)\n  \\<in> f\\<^sub>1 \\<Longrightarrow>\n  ?yb2 + card (vertices (translation e\\<^sub>1)) - 2\n  \\<in> vertices (translation e\\<^sub>1)\n\ngoal (4 subgoals):\n 1. \\<And>e1 e2 x y.\n       \\<lbrakk>\\<And>x y.\n                   (x, y) \\<in> :G:\\<lbrakk>e1\\<rbrakk> \\<Longrightarrow>\n                   \\<exists>f.\n                      graph_homomorphism (translation e1) G f \\<and>\n                      (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        \\<And>x y.\n           (x, y) \\<in> :G:\\<lbrakk>e2\\<rbrakk> \\<Longrightarrow>\n           \\<exists>f.\n              graph_homomorphism (translation e2) G f \\<and>\n              (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        (x, y) \\<in> :G:\\<lbrakk>A_Int e1 e2\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            graph_homomorphism (translation (A_Int e1 e2)) G\n                             f \\<and>\n                            (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 2. \\<And>e1 e2 x y.\n       \\<lbrakk>\\<And>x y.\n                   (x, y) \\<in> :G:\\<lbrakk>e1\\<rbrakk> \\<Longrightarrow>\n                   \\<exists>f.\n                      graph_homomorphism (translation e1) G f \\<and>\n                      (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        \\<And>x y.\n           (x, y) \\<in> :G:\\<lbrakk>e2\\<rbrakk> \\<Longrightarrow>\n           \\<exists>f.\n              graph_homomorphism (translation e2) G f \\<and>\n              (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        (x, y) \\<in> :G:\\<lbrakk>A_Cmp e1 e2\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            graph_homomorphism (translation (A_Cmp e1 e2)) G\n                             f \\<and>\n                            (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 3. \\<And>e x y.\n       \\<lbrakk>\\<And>x y.\n                   (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk> \\<Longrightarrow>\n                   \\<exists>f.\n                      graph_homomorphism (translation e) G f \\<and>\n                      (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        (x, y) \\<in> :G:\\<lbrakk>A_Cnv e\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            graph_homomorphism (translation (A_Cnv e)) G\n                             f \\<and>\n                            (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 4. \\<And>x xa y.\n       (xa, y) \\<in> :G:\\<lbrakk>A_Lbl x\\<rbrakk> \\<Longrightarrow>\n       \\<exists>f.\n          graph_homomorphism (translation (A_Lbl x)) G f \\<and>\n          (0, xa) \\<in> f \\<and> (1, y) \\<in> f", "note in_f[dest!] = this"], ["proof (state)\nthis:\n  (?yb2 + card (vertices (translation e\\<^sub>1)) - 2, ?zb2)\n  \\<in> f\\<^sub>1 \\<Longrightarrow>\n  ?yb2 + card (vertices (translation e\\<^sub>1)) - 2\n  \\<in> vertices (translation e\\<^sub>1)\n\ngoal (4 subgoals):\n 1. \\<And>e1 e2 x y.\n       \\<lbrakk>\\<And>x y.\n                   (x, y) \\<in> :G:\\<lbrakk>e1\\<rbrakk> \\<Longrightarrow>\n                   \\<exists>f.\n                      graph_homomorphism (translation e1) G f \\<and>\n                      (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        \\<And>x y.\n           (x, y) \\<in> :G:\\<lbrakk>e2\\<rbrakk> \\<Longrightarrow>\n           \\<exists>f.\n              graph_homomorphism (translation e2) G f \\<and>\n              (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        (x, y) \\<in> :G:\\<lbrakk>A_Int e1 e2\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            graph_homomorphism (translation (A_Int e1 e2)) G\n                             f \\<and>\n                            (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 2. \\<And>e1 e2 x y.\n       \\<lbrakk>\\<And>x y.\n                   (x, y) \\<in> :G:\\<lbrakk>e1\\<rbrakk> \\<Longrightarrow>\n                   \\<exists>f.\n                      graph_homomorphism (translation e1) G f \\<and>\n                      (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        \\<And>x y.\n           (x, y) \\<in> :G:\\<lbrakk>e2\\<rbrakk> \\<Longrightarrow>\n           \\<exists>f.\n              graph_homomorphism (translation e2) G f \\<and>\n              (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        (x, y) \\<in> :G:\\<lbrakk>A_Cmp e1 e2\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            graph_homomorphism (translation (A_Cmp e1 e2)) G\n                             f \\<and>\n                            (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 3. \\<And>e x y.\n       \\<lbrakk>\\<And>x y.\n                   (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk> \\<Longrightarrow>\n                   \\<exists>f.\n                      graph_homomorphism (translation e) G f \\<and>\n                      (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        (x, y) \\<in> :G:\\<lbrakk>A_Cnv e\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            graph_homomorphism (translation (A_Cnv e)) G\n                             f \\<and>\n                            (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 4. \\<And>x xa y.\n       (xa, y) \\<in> :G:\\<lbrakk>A_Lbl x\\<rbrakk> \\<Longrightarrow>\n       \\<exists>f.\n          graph_homomorphism (translation (A_Lbl x)) G f \\<and>\n          (0, xa) \\<in> f \\<and> (1, y) \\<in> f", "have d_a:\"Domain f\\<^sub>1 \\<inter>  Domain (?tr\\<^sub>2\\<inverse> O f\\<^sub>2) = {0,1}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Domain f\\<^sub>1 \\<inter>\n    Domain\n     ((on_graph (translation e\\<^sub>2)\n        (\\<lambda>x.\n            if x < 2 then x\n            else x + card (vertices (translation e\\<^sub>1)) -\n                 2))\\<inverse> O\n      f\\<^sub>2) =\n    {0, 1}", "using zero_one"], ["proof (prove)\nusing this:\n  (0, x)\n  \\<in> (on_graph (translation e\\<^sub>2)\n          (\\<lambda>x.\n              if x < 2 then x\n              else x + card (vertices (translation e\\<^sub>1)) -\n                   2))\\<inverse> O\n        f\\<^sub>2\n  (1, y)\n  \\<in> (on_graph (translation e\\<^sub>2)\n          (\\<lambda>x.\n              if x < 2 then x\n              else x + card (vertices (translation e\\<^sub>1)) -\n                   2))\\<inverse> O\n        f\\<^sub>2\n\ngoal (1 subgoal):\n 1. Domain f\\<^sub>1 \\<inter>\n    Domain\n     ((on_graph (translation e\\<^sub>2)\n        (\\<lambda>x.\n            if x < 2 then x\n            else x + card (vertices (translation e\\<^sub>1)) -\n                 2))\\<inverse> O\n      f\\<^sub>2) =\n    {0, 1}", "by (auto simp:v)"], ["proof (state)\nthis:\n  Domain f\\<^sub>1 \\<inter>\n  Domain\n   ((on_graph (translation e\\<^sub>2)\n      (\\<lambda>x.\n          if x < 2 then x\n          else x + card (vertices (translation e\\<^sub>1)) - 2))\\<inverse> O\n    f\\<^sub>2) =\n  {0, 1}\n\ngoal (4 subgoals):\n 1. \\<And>e1 e2 x y.\n       \\<lbrakk>\\<And>x y.\n                   (x, y) \\<in> :G:\\<lbrakk>e1\\<rbrakk> \\<Longrightarrow>\n                   \\<exists>f.\n                      graph_homomorphism (translation e1) G f \\<and>\n                      (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        \\<And>x y.\n           (x, y) \\<in> :G:\\<lbrakk>e2\\<rbrakk> \\<Longrightarrow>\n           \\<exists>f.\n              graph_homomorphism (translation e2) G f \\<and>\n              (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        (x, y) \\<in> :G:\\<lbrakk>A_Int e1 e2\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            graph_homomorphism (translation (A_Int e1 e2)) G\n                             f \\<and>\n                            (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 2. \\<And>e1 e2 x y.\n       \\<lbrakk>\\<And>x y.\n                   (x, y) \\<in> :G:\\<lbrakk>e1\\<rbrakk> \\<Longrightarrow>\n                   \\<exists>f.\n                      graph_homomorphism (translation e1) G f \\<and>\n                      (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        \\<And>x y.\n           (x, y) \\<in> :G:\\<lbrakk>e2\\<rbrakk> \\<Longrightarrow>\n           \\<exists>f.\n              graph_homomorphism (translation e2) G f \\<and>\n              (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        (x, y) \\<in> :G:\\<lbrakk>A_Cmp e1 e2\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            graph_homomorphism (translation (A_Cmp e1 e2)) G\n                             f \\<and>\n                            (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 3. \\<And>e x y.\n       \\<lbrakk>\\<And>x y.\n                   (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk> \\<Longrightarrow>\n                   \\<exists>f.\n                      graph_homomorphism (translation e) G f \\<and>\n                      (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        (x, y) \\<in> :G:\\<lbrakk>A_Cnv e\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            graph_homomorphism (translation (A_Cnv e)) G\n                             f \\<and>\n                            (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 4. \\<And>x xa y.\n       (xa, y) \\<in> :G:\\<lbrakk>A_Lbl x\\<rbrakk> \\<Longrightarrow>\n       \\<exists>f.\n          graph_homomorphism (translation (A_Lbl x)) G f \\<and>\n          (0, xa) \\<in> f \\<and> (1, y) \\<in> f", "have d_b:\"Domain (f\\<^sub>1 \\<inter> ?tr\\<^sub>2\\<inverse> O f\\<^sub>2) = {0,1}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Domain\n     (f\\<^sub>1 \\<inter>\n      (on_graph (translation e\\<^sub>2)\n        (\\<lambda>x.\n            if x < 2 then x\n            else x + card (vertices (translation e\\<^sub>1)) -\n                 2))\\<inverse> O\n      f\\<^sub>2) =\n    {0, 1}", "using zero_one f\\<^sub>1(2,3)"], ["proof (prove)\nusing this:\n  (0, x)\n  \\<in> (on_graph (translation e\\<^sub>2)\n          (\\<lambda>x.\n              if x < 2 then x\n              else x + card (vertices (translation e\\<^sub>1)) -\n                   2))\\<inverse> O\n        f\\<^sub>2\n  (1, y)\n  \\<in> (on_graph (translation e\\<^sub>2)\n          (\\<lambda>x.\n              if x < 2 then x\n              else x + card (vertices (translation e\\<^sub>1)) -\n                   2))\\<inverse> O\n        f\\<^sub>2\n  (0, x) \\<in> f\\<^sub>1\n  (1, y) \\<in> f\\<^sub>1\n\ngoal (1 subgoal):\n 1. Domain\n     (f\\<^sub>1 \\<inter>\n      (on_graph (translation e\\<^sub>2)\n        (\\<lambda>x.\n            if x < 2 then x\n            else x + card (vertices (translation e\\<^sub>1)) -\n                 2))\\<inverse> O\n      f\\<^sub>2) =\n    {0, 1}", "by auto"], ["proof (state)\nthis:\n  Domain\n   (f\\<^sub>1 \\<inter>\n    (on_graph (translation e\\<^sub>2)\n      (\\<lambda>x.\n          if x < 2 then x\n          else x + card (vertices (translation e\\<^sub>1)) - 2))\\<inverse> O\n    f\\<^sub>2) =\n  {0, 1}\n\ngoal (4 subgoals):\n 1. \\<And>e1 e2 x y.\n       \\<lbrakk>\\<And>x y.\n                   (x, y) \\<in> :G:\\<lbrakk>e1\\<rbrakk> \\<Longrightarrow>\n                   \\<exists>f.\n                      graph_homomorphism (translation e1) G f \\<and>\n                      (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        \\<And>x y.\n           (x, y) \\<in> :G:\\<lbrakk>e2\\<rbrakk> \\<Longrightarrow>\n           \\<exists>f.\n              graph_homomorphism (translation e2) G f \\<and>\n              (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        (x, y) \\<in> :G:\\<lbrakk>A_Int e1 e2\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            graph_homomorphism (translation (A_Int e1 e2)) G\n                             f \\<and>\n                            (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 2. \\<And>e1 e2 x y.\n       \\<lbrakk>\\<And>x y.\n                   (x, y) \\<in> :G:\\<lbrakk>e1\\<rbrakk> \\<Longrightarrow>\n                   \\<exists>f.\n                      graph_homomorphism (translation e1) G f \\<and>\n                      (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        \\<And>x y.\n           (x, y) \\<in> :G:\\<lbrakk>e2\\<rbrakk> \\<Longrightarrow>\n           \\<exists>f.\n              graph_homomorphism (translation e2) G f \\<and>\n              (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        (x, y) \\<in> :G:\\<lbrakk>A_Cmp e1 e2\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            graph_homomorphism (translation (A_Cmp e1 e2)) G\n                             f \\<and>\n                            (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 3. \\<And>e x y.\n       \\<lbrakk>\\<And>x y.\n                   (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk> \\<Longrightarrow>\n                   \\<exists>f.\n                      graph_homomorphism (translation e) G f \\<and>\n                      (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        (x, y) \\<in> :G:\\<lbrakk>A_Cnv e\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            graph_homomorphism (translation (A_Cnv e)) G\n                             f \\<and>\n                            (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 4. \\<And>x xa y.\n       (xa, y) \\<in> :G:\\<lbrakk>A_Lbl x\\<rbrakk> \\<Longrightarrow>\n       \\<exists>f.\n          graph_homomorphism (translation (A_Lbl x)) G f \\<and>\n          (0, xa) \\<in> f \\<and> (1, y) \\<in> f", "note cmp2 = graph_homomorphism_composes[OF graph_homo_inv[OF translation_graph inj2] f\\<^sub>2(1)]"], ["proof (state)\nthis:\n  graph_homomorphism\n   (map_graph_fn (translation e\\<^sub>2)\n     (\\<lambda>x.\n         if x < 2 then x\n         else x + card (vertices (translation e\\<^sub>1)) - 2))\n   G ((on_graph (translation e\\<^sub>2)\n        (\\<lambda>x.\n            if x < 2 then x\n            else x + card (vertices (translation e\\<^sub>1)) -\n                 2))\\<inverse> O\n      f\\<^sub>2)\n\ngoal (4 subgoals):\n 1. \\<And>e1 e2 x y.\n       \\<lbrakk>\\<And>x y.\n                   (x, y) \\<in> :G:\\<lbrakk>e1\\<rbrakk> \\<Longrightarrow>\n                   \\<exists>f.\n                      graph_homomorphism (translation e1) G f \\<and>\n                      (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        \\<And>x y.\n           (x, y) \\<in> :G:\\<lbrakk>e2\\<rbrakk> \\<Longrightarrow>\n           \\<exists>f.\n              graph_homomorphism (translation e2) G f \\<and>\n              (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        (x, y) \\<in> :G:\\<lbrakk>A_Int e1 e2\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            graph_homomorphism (translation (A_Int e1 e2)) G\n                             f \\<and>\n                            (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 2. \\<And>e1 e2 x y.\n       \\<lbrakk>\\<And>x y.\n                   (x, y) \\<in> :G:\\<lbrakk>e1\\<rbrakk> \\<Longrightarrow>\n                   \\<exists>f.\n                      graph_homomorphism (translation e1) G f \\<and>\n                      (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        \\<And>x y.\n           (x, y) \\<in> :G:\\<lbrakk>e2\\<rbrakk> \\<Longrightarrow>\n           \\<exists>f.\n              graph_homomorphism (translation e2) G f \\<and>\n              (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        (x, y) \\<in> :G:\\<lbrakk>A_Cmp e1 e2\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            graph_homomorphism (translation (A_Cmp e1 e2)) G\n                             f \\<and>\n                            (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 3. \\<And>e x y.\n       \\<lbrakk>\\<And>x y.\n                   (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk> \\<Longrightarrow>\n                   \\<exists>f.\n                      graph_homomorphism (translation e) G f \\<and>\n                      (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        (x, y) \\<in> :G:\\<lbrakk>A_Cnv e\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            graph_homomorphism (translation (A_Cnv e)) G\n                             f \\<and>\n                            (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 4. \\<And>x xa y.\n       (xa, y) \\<in> :G:\\<lbrakk>A_Lbl x\\<rbrakk> \\<Longrightarrow>\n       \\<exists>f.\n          graph_homomorphism (translation (A_Lbl x)) G f \\<and>\n          (0, xa) \\<in> f \\<and> (1, y) \\<in> f", "have \"graph_homomorphism (translation (A_Int e\\<^sub>1 e\\<^sub>2)) G (f\\<^sub>1 \\<union> ?tr\\<^sub>2\\<inverse> O f\\<^sub>2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. graph_homomorphism (translation (A_Int e\\<^sub>1 e\\<^sub>2)) G\n     (f\\<^sub>1 \\<union>\n      (on_graph (translation e\\<^sub>2)\n        (\\<lambda>x.\n            if x < 2 then x\n            else x + card (vertices (translation e\\<^sub>1)) -\n                 2))\\<inverse> O\n      f\\<^sub>2)", "using graph_homo_union[OF f\\<^sub>1(1) cmp2 d_a[folded d_b]]"], ["proof (prove)\nusing this:\n  graph_homomorphism\n   (graph_union (translation e\\<^sub>1)\n     (map_graph_fn (translation e\\<^sub>2)\n       (\\<lambda>x.\n           if x < 2 then x\n           else x + card (vertices (translation e\\<^sub>1)) - 2)))\n   G (f\\<^sub>1 \\<union>\n      (on_graph (translation e\\<^sub>2)\n        (\\<lambda>x.\n            if x < 2 then x\n            else x + card (vertices (translation e\\<^sub>1)) -\n                 2))\\<inverse> O\n      f\\<^sub>2)\n\ngoal (1 subgoal):\n 1. graph_homomorphism (translation (A_Int e\\<^sub>1 e\\<^sub>2)) G\n     (f\\<^sub>1 \\<union>\n      (on_graph (translation e\\<^sub>2)\n        (\\<lambda>x.\n            if x < 2 then x\n            else x + card (vertices (translation e\\<^sub>1)) -\n                 2))\\<inverse> O\n      f\\<^sub>2)", "by (auto simp:Let_def)"], ["proof (state)\nthis:\n  graph_homomorphism (translation (A_Int e\\<^sub>1 e\\<^sub>2)) G\n   (f\\<^sub>1 \\<union>\n    (on_graph (translation e\\<^sub>2)\n      (\\<lambda>x.\n          if x < 2 then x\n          else x + card (vertices (translation e\\<^sub>1)) - 2))\\<inverse> O\n    f\\<^sub>2)\n\ngoal (4 subgoals):\n 1. \\<And>e1 e2 x y.\n       \\<lbrakk>\\<And>x y.\n                   (x, y) \\<in> :G:\\<lbrakk>e1\\<rbrakk> \\<Longrightarrow>\n                   \\<exists>f.\n                      graph_homomorphism (translation e1) G f \\<and>\n                      (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        \\<And>x y.\n           (x, y) \\<in> :G:\\<lbrakk>e2\\<rbrakk> \\<Longrightarrow>\n           \\<exists>f.\n              graph_homomorphism (translation e2) G f \\<and>\n              (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        (x, y) \\<in> :G:\\<lbrakk>A_Int e1 e2\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            graph_homomorphism (translation (A_Int e1 e2)) G\n                             f \\<and>\n                            (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 2. \\<And>e1 e2 x y.\n       \\<lbrakk>\\<And>x y.\n                   (x, y) \\<in> :G:\\<lbrakk>e1\\<rbrakk> \\<Longrightarrow>\n                   \\<exists>f.\n                      graph_homomorphism (translation e1) G f \\<and>\n                      (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        \\<And>x y.\n           (x, y) \\<in> :G:\\<lbrakk>e2\\<rbrakk> \\<Longrightarrow>\n           \\<exists>f.\n              graph_homomorphism (translation e2) G f \\<and>\n              (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        (x, y) \\<in> :G:\\<lbrakk>A_Cmp e1 e2\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            graph_homomorphism (translation (A_Cmp e1 e2)) G\n                             f \\<and>\n                            (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 3. \\<And>e x y.\n       \\<lbrakk>\\<And>x y.\n                   (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk> \\<Longrightarrow>\n                   \\<exists>f.\n                      graph_homomorphism (translation e) G f \\<and>\n                      (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        (x, y) \\<in> :G:\\<lbrakk>A_Cnv e\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            graph_homomorphism (translation (A_Cnv e)) G\n                             f \\<and>\n                            (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 4. \\<And>x xa y.\n       (xa, y) \\<in> :G:\\<lbrakk>A_Lbl x\\<rbrakk> \\<Longrightarrow>\n       \\<exists>f.\n          graph_homomorphism (translation (A_Lbl x)) G f \\<and>\n          (0, xa) \\<in> f \\<and> (1, y) \\<in> f", "thus ?case"], ["proof (prove)\nusing this:\n  graph_homomorphism (translation (A_Int e\\<^sub>1 e\\<^sub>2)) G\n   (f\\<^sub>1 \\<union>\n    (on_graph (translation e\\<^sub>2)\n      (\\<lambda>x.\n          if x < 2 then x\n          else x + card (vertices (translation e\\<^sub>1)) - 2))\\<inverse> O\n    f\\<^sub>2)\n\ngoal (1 subgoal):\n 1. \\<exists>f.\n       graph_homomorphism (translation (A_Int e\\<^sub>1 e\\<^sub>2)) G\n        f \\<and>\n       (0, x) \\<in> f \\<and> (1, y) \\<in> f", "using zero_one[THEN UnI2[of _ _ \"f\\<^sub>1\"]]"], ["proof (prove)\nusing this:\n  graph_homomorphism (translation (A_Int e\\<^sub>1 e\\<^sub>2)) G\n   (f\\<^sub>1 \\<union>\n    (on_graph (translation e\\<^sub>2)\n      (\\<lambda>x.\n          if x < 2 then x\n          else x + card (vertices (translation e\\<^sub>1)) - 2))\\<inverse> O\n    f\\<^sub>2)\n  (0, x)\n  \\<in> f\\<^sub>1 \\<union>\n        (on_graph (translation e\\<^sub>2)\n          (\\<lambda>x.\n              if x < 2 then x\n              else x + card (vertices (translation e\\<^sub>1)) -\n                   2))\\<inverse> O\n        f\\<^sub>2\n  (1, y)\n  \\<in> f\\<^sub>1 \\<union>\n        (on_graph (translation e\\<^sub>2)\n          (\\<lambda>x.\n              if x < 2 then x\n              else x + card (vertices (translation e\\<^sub>1)) -\n                   2))\\<inverse> O\n        f\\<^sub>2\n\ngoal (1 subgoal):\n 1. \\<exists>f.\n       graph_homomorphism (translation (A_Int e\\<^sub>1 e\\<^sub>2)) G\n        f \\<and>\n       (0, x) \\<in> f \\<and> (1, y) \\<in> f", "by blast"], ["proof (state)\nthis:\n  \\<exists>f.\n     graph_homomorphism (translation (A_Int e\\<^sub>1 e\\<^sub>2)) G f \\<and>\n     (0, x) \\<in> f \\<and> (1, y) \\<in> f\n\ngoal (3 subgoals):\n 1. \\<And>e1 e2 x y.\n       \\<lbrakk>\\<And>x y.\n                   (x, y) \\<in> :G:\\<lbrakk>e1\\<rbrakk> \\<Longrightarrow>\n                   \\<exists>f.\n                      graph_homomorphism (translation e1) G f \\<and>\n                      (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        \\<And>x y.\n           (x, y) \\<in> :G:\\<lbrakk>e2\\<rbrakk> \\<Longrightarrow>\n           \\<exists>f.\n              graph_homomorphism (translation e2) G f \\<and>\n              (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        (x, y) \\<in> :G:\\<lbrakk>A_Cmp e1 e2\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            graph_homomorphism (translation (A_Cmp e1 e2)) G\n                             f \\<and>\n                            (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 2. \\<And>e x y.\n       \\<lbrakk>\\<And>x y.\n                   (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk> \\<Longrightarrow>\n                   \\<exists>f.\n                      graph_homomorphism (translation e) G f \\<and>\n                      (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        (x, y) \\<in> :G:\\<lbrakk>A_Cnv e\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            graph_homomorphism (translation (A_Cnv e)) G\n                             f \\<and>\n                            (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 3. \\<And>x xa y.\n       (xa, y) \\<in> :G:\\<lbrakk>A_Lbl x\\<rbrakk> \\<Longrightarrow>\n       \\<exists>f.\n          graph_homomorphism (translation (A_Lbl x)) G f \\<and>\n          (0, xa) \\<in> f \\<and> (1, y) \\<in> f", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>e1 e2 x y.\n       \\<lbrakk>\\<And>x y.\n                   (x, y) \\<in> :G:\\<lbrakk>e1\\<rbrakk> \\<Longrightarrow>\n                   \\<exists>f.\n                      graph_homomorphism (translation e1) G f \\<and>\n                      (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        \\<And>x y.\n           (x, y) \\<in> :G:\\<lbrakk>e2\\<rbrakk> \\<Longrightarrow>\n           \\<exists>f.\n              graph_homomorphism (translation e2) G f \\<and>\n              (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        (x, y) \\<in> :G:\\<lbrakk>A_Cmp e1 e2\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            graph_homomorphism (translation (A_Cmp e1 e2)) G\n                             f \\<and>\n                            (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 2. \\<And>e x y.\n       \\<lbrakk>\\<And>x y.\n                   (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk> \\<Longrightarrow>\n                   \\<exists>f.\n                      graph_homomorphism (translation e) G f \\<and>\n                      (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        (x, y) \\<in> :G:\\<lbrakk>A_Cnv e\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            graph_homomorphism (translation (A_Cnv e)) G\n                             f \\<and>\n                            (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 3. \\<And>x xa y.\n       (xa, y) \\<in> :G:\\<lbrakk>A_Lbl x\\<rbrakk> \\<Longrightarrow>\n       \\<exists>f.\n          graph_homomorphism (translation (A_Lbl x)) G f \\<and>\n          (0, xa) \\<in> f \\<and> (1, y) \\<in> f", "case (A_Cmp e\\<^sub>1 e\\<^sub>2)"], ["proof (state)\nthis:\n  (?x, ?y) \\<in> :G:\\<lbrakk>e\\<^sub>1\\<rbrakk> \\<Longrightarrow>\n  \\<exists>f.\n     graph_homomorphism (translation e\\<^sub>1) G f \\<and>\n     (0, ?x) \\<in> f \\<and> (1, ?y) \\<in> f\n  (?x, ?y) \\<in> :G:\\<lbrakk>e\\<^sub>2\\<rbrakk> \\<Longrightarrow>\n  \\<exists>f.\n     graph_homomorphism (translation e\\<^sub>2) G f \\<and>\n     (0, ?x) \\<in> f \\<and> (1, ?y) \\<in> f\n  (x, y) \\<in> :G:\\<lbrakk>A_Cmp e\\<^sub>1 e\\<^sub>2\\<rbrakk>\n\ngoal (3 subgoals):\n 1. \\<And>e1 e2 x y.\n       \\<lbrakk>\\<And>x y.\n                   (x, y) \\<in> :G:\\<lbrakk>e1\\<rbrakk> \\<Longrightarrow>\n                   \\<exists>f.\n                      graph_homomorphism (translation e1) G f \\<and>\n                      (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        \\<And>x y.\n           (x, y) \\<in> :G:\\<lbrakk>e2\\<rbrakk> \\<Longrightarrow>\n           \\<exists>f.\n              graph_homomorphism (translation e2) G f \\<and>\n              (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        (x, y) \\<in> :G:\\<lbrakk>A_Cmp e1 e2\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            graph_homomorphism (translation (A_Cmp e1 e2)) G\n                             f \\<and>\n                            (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 2. \\<And>e x y.\n       \\<lbrakk>\\<And>x y.\n                   (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk> \\<Longrightarrow>\n                   \\<exists>f.\n                      graph_homomorphism (translation e) G f \\<and>\n                      (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        (x, y) \\<in> :G:\\<lbrakk>A_Cnv e\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            graph_homomorphism (translation (A_Cnv e)) G\n                             f \\<and>\n                            (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 3. \\<And>x xa y.\n       (xa, y) \\<in> :G:\\<lbrakk>A_Lbl x\\<rbrakk> \\<Longrightarrow>\n       \\<exists>f.\n          graph_homomorphism (translation (A_Lbl x)) G f \\<and>\n          (0, xa) \\<in> f \\<and> (1, y) \\<in> f", "from A_Cmp"], ["proof (chain)\npicking this:\n  (?x, ?y) \\<in> :G:\\<lbrakk>e\\<^sub>1\\<rbrakk> \\<Longrightarrow>\n  \\<exists>f.\n     graph_homomorphism (translation e\\<^sub>1) G f \\<and>\n     (0, ?x) \\<in> f \\<and> (1, ?y) \\<in> f\n  (?x, ?y) \\<in> :G:\\<lbrakk>e\\<^sub>2\\<rbrakk> \\<Longrightarrow>\n  \\<exists>f.\n     graph_homomorphism (translation e\\<^sub>2) G f \\<and>\n     (0, ?x) \\<in> f \\<and> (1, ?y) \\<in> f\n  (x, y) \\<in> :G:\\<lbrakk>A_Cmp e\\<^sub>1 e\\<^sub>2\\<rbrakk>", "obtain z where assm:\"(x, z) \\<in> :G:\\<lbrakk>e\\<^sub>1\\<rbrakk>\" \"(z, y) \\<in> :G:\\<lbrakk>e\\<^sub>2\\<rbrakk>\""], ["proof (prove)\nusing this:\n  (?x, ?y) \\<in> :G:\\<lbrakk>e\\<^sub>1\\<rbrakk> \\<Longrightarrow>\n  \\<exists>f.\n     graph_homomorphism (translation e\\<^sub>1) G f \\<and>\n     (0, ?x) \\<in> f \\<and> (1, ?y) \\<in> f\n  (?x, ?y) \\<in> :G:\\<lbrakk>e\\<^sub>2\\<rbrakk> \\<Longrightarrow>\n  \\<exists>f.\n     graph_homomorphism (translation e\\<^sub>2) G f \\<and>\n     (0, ?x) \\<in> f \\<and> (1, ?y) \\<in> f\n  (x, y) \\<in> :G:\\<lbrakk>A_Cmp e\\<^sub>1 e\\<^sub>2\\<rbrakk>\n\ngoal (1 subgoal):\n 1. (\\<And>z.\n        \\<lbrakk>(x, z) \\<in> :G:\\<lbrakk>e\\<^sub>1\\<rbrakk>;\n         (z, y) \\<in> :G:\\<lbrakk>e\\<^sub>2\\<rbrakk>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  (x, z) \\<in> :G:\\<lbrakk>e\\<^sub>1\\<rbrakk>\n  (z, y) \\<in> :G:\\<lbrakk>e\\<^sub>2\\<rbrakk>\n\ngoal (3 subgoals):\n 1. \\<And>e1 e2 x y.\n       \\<lbrakk>\\<And>x y.\n                   (x, y) \\<in> :G:\\<lbrakk>e1\\<rbrakk> \\<Longrightarrow>\n                   \\<exists>f.\n                      graph_homomorphism (translation e1) G f \\<and>\n                      (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        \\<And>x y.\n           (x, y) \\<in> :G:\\<lbrakk>e2\\<rbrakk> \\<Longrightarrow>\n           \\<exists>f.\n              graph_homomorphism (translation e2) G f \\<and>\n              (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        (x, y) \\<in> :G:\\<lbrakk>A_Cmp e1 e2\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            graph_homomorphism (translation (A_Cmp e1 e2)) G\n                             f \\<and>\n                            (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 2. \\<And>e x y.\n       \\<lbrakk>\\<And>x y.\n                   (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk> \\<Longrightarrow>\n                   \\<exists>f.\n                      graph_homomorphism (translation e) G f \\<and>\n                      (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        (x, y) \\<in> :G:\\<lbrakk>A_Cnv e\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            graph_homomorphism (translation (A_Cnv e)) G\n                             f \\<and>\n                            (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 3. \\<And>x xa y.\n       (xa, y) \\<in> :G:\\<lbrakk>A_Lbl x\\<rbrakk> \\<Longrightarrow>\n       \\<exists>f.\n          graph_homomorphism (translation (A_Lbl x)) G f \\<and>\n          (0, xa) \\<in> f \\<and> (1, y) \\<in> f", "from A_Cmp(1)[OF assm(1)]"], ["proof (chain)\npicking this:\n  \\<exists>f.\n     graph_homomorphism (translation e\\<^sub>1) G f \\<and>\n     (0, x) \\<in> f \\<and> (1, z) \\<in> f", "obtain f\\<^sub>1 where\n      f\\<^sub>1:\"graph_homomorphism (translation e\\<^sub>1) G f\\<^sub>1\" \"(0, x) \\<in> f\\<^sub>1\" \"(1, z) \\<in> f\\<^sub>1\""], ["proof (prove)\nusing this:\n  \\<exists>f.\n     graph_homomorphism (translation e\\<^sub>1) G f \\<and>\n     (0, x) \\<in> f \\<and> (1, z) \\<in> f\n\ngoal (1 subgoal):\n 1. (\\<And>f\\<^sub>1.\n        \\<lbrakk>graph_homomorphism (translation e\\<^sub>1) G f\\<^sub>1;\n         (0, x) \\<in> f\\<^sub>1; (1, z) \\<in> f\\<^sub>1\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  graph_homomorphism (translation e\\<^sub>1) G f\\<^sub>1\n  (0, x) \\<in> f\\<^sub>1\n  (1, z) \\<in> f\\<^sub>1\n\ngoal (3 subgoals):\n 1. \\<And>e1 e2 x y.\n       \\<lbrakk>\\<And>x y.\n                   (x, y) \\<in> :G:\\<lbrakk>e1\\<rbrakk> \\<Longrightarrow>\n                   \\<exists>f.\n                      graph_homomorphism (translation e1) G f \\<and>\n                      (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        \\<And>x y.\n           (x, y) \\<in> :G:\\<lbrakk>e2\\<rbrakk> \\<Longrightarrow>\n           \\<exists>f.\n              graph_homomorphism (translation e2) G f \\<and>\n              (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        (x, y) \\<in> :G:\\<lbrakk>A_Cmp e1 e2\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            graph_homomorphism (translation (A_Cmp e1 e2)) G\n                             f \\<and>\n                            (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 2. \\<And>e x y.\n       \\<lbrakk>\\<And>x y.\n                   (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk> \\<Longrightarrow>\n                   \\<exists>f.\n                      graph_homomorphism (translation e) G f \\<and>\n                      (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        (x, y) \\<in> :G:\\<lbrakk>A_Cnv e\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            graph_homomorphism (translation (A_Cnv e)) G\n                             f \\<and>\n                            (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 3. \\<And>x xa y.\n       (xa, y) \\<in> :G:\\<lbrakk>A_Lbl x\\<rbrakk> \\<Longrightarrow>\n       \\<exists>f.\n          graph_homomorphism (translation (A_Lbl x)) G f \\<and>\n          (0, xa) \\<in> f \\<and> (1, y) \\<in> f", "from A_Cmp(2)[OF assm(2)]"], ["proof (chain)\npicking this:\n  \\<exists>f.\n     graph_homomorphism (translation e\\<^sub>2) G f \\<and>\n     (0, z) \\<in> f \\<and> (1, y) \\<in> f", "obtain f\\<^sub>2 where\n      f\\<^sub>2:\"graph_homomorphism (translation e\\<^sub>2) G f\\<^sub>2\" \"(0, z) \\<in> f\\<^sub>2\" \"(1, y) \\<in> f\\<^sub>2\""], ["proof (prove)\nusing this:\n  \\<exists>f.\n     graph_homomorphism (translation e\\<^sub>2) G f \\<and>\n     (0, z) \\<in> f \\<and> (1, y) \\<in> f\n\ngoal (1 subgoal):\n 1. (\\<And>f\\<^sub>2.\n        \\<lbrakk>graph_homomorphism (translation e\\<^sub>2) G f\\<^sub>2;\n         (0, z) \\<in> f\\<^sub>2; (1, y) \\<in> f\\<^sub>2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  graph_homomorphism (translation e\\<^sub>2) G f\\<^sub>2\n  (0, z) \\<in> f\\<^sub>2\n  (1, y) \\<in> f\\<^sub>2\n\ngoal (3 subgoals):\n 1. \\<And>e1 e2 x y.\n       \\<lbrakk>\\<And>x y.\n                   (x, y) \\<in> :G:\\<lbrakk>e1\\<rbrakk> \\<Longrightarrow>\n                   \\<exists>f.\n                      graph_homomorphism (translation e1) G f \\<and>\n                      (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        \\<And>x y.\n           (x, y) \\<in> :G:\\<lbrakk>e2\\<rbrakk> \\<Longrightarrow>\n           \\<exists>f.\n              graph_homomorphism (translation e2) G f \\<and>\n              (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        (x, y) \\<in> :G:\\<lbrakk>A_Cmp e1 e2\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            graph_homomorphism (translation (A_Cmp e1 e2)) G\n                             f \\<and>\n                            (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 2. \\<And>e x y.\n       \\<lbrakk>\\<And>x y.\n                   (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk> \\<Longrightarrow>\n                   \\<exists>f.\n                      graph_homomorphism (translation e) G f \\<and>\n                      (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        (x, y) \\<in> :G:\\<lbrakk>A_Cnv e\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            graph_homomorphism (translation (A_Cnv e)) G\n                             f \\<and>\n                            (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 3. \\<And>x xa y.\n       (xa, y) \\<in> :G:\\<lbrakk>A_Lbl x\\<rbrakk> \\<Longrightarrow>\n       \\<exists>f.\n          graph_homomorphism (translation (A_Lbl x)) G f \\<and>\n          (0, xa) \\<in> f \\<and> (1, y) \\<in> f", "from f\\<^sub>1 f\\<^sub>2"], ["proof (chain)\npicking this:\n  graph_homomorphism (translation e\\<^sub>1) G f\\<^sub>1\n  (0, x) \\<in> f\\<^sub>1\n  (1, z) \\<in> f\\<^sub>1\n  graph_homomorphism (translation e\\<^sub>2) G f\\<^sub>2\n  (0, z) \\<in> f\\<^sub>2\n  (1, y) \\<in> f\\<^sub>2", "have v:\"Domain f\\<^sub>1 = vertices (translation e\\<^sub>1)\" \"Domain f\\<^sub>2 = vertices (translation e\\<^sub>2)\""], ["proof (prove)\nusing this:\n  graph_homomorphism (translation e\\<^sub>1) G f\\<^sub>1\n  (0, x) \\<in> f\\<^sub>1\n  (1, z) \\<in> f\\<^sub>1\n  graph_homomorphism (translation e\\<^sub>2) G f\\<^sub>2\n  (0, z) \\<in> f\\<^sub>2\n  (1, y) \\<in> f\\<^sub>2\n\ngoal (1 subgoal):\n 1. Domain f\\<^sub>1 = vertices (translation e\\<^sub>1) &&&\n    Domain f\\<^sub>2 = vertices (translation e\\<^sub>2)", "unfolding graph_homomorphism_def"], ["proof (prove)\nusing this:\n  vertices (translation e\\<^sub>1) = Domain f\\<^sub>1 \\<and>\n  graph (translation e\\<^sub>1) \\<and>\n  graph G \\<and>\n  f\\<^sub>1 `` vertices (translation e\\<^sub>1)\n  \\<subseteq> vertices G \\<and>\n  univalent f\\<^sub>1 \\<and>\n  edge_preserving f\\<^sub>1 (edges (translation e\\<^sub>1)) (edges G)\n  (0, x) \\<in> f\\<^sub>1\n  (1, z) \\<in> f\\<^sub>1\n  vertices (translation e\\<^sub>2) = Domain f\\<^sub>2 \\<and>\n  graph (translation e\\<^sub>2) \\<and>\n  graph G \\<and>\n  f\\<^sub>2 `` vertices (translation e\\<^sub>2)\n  \\<subseteq> vertices G \\<and>\n  univalent f\\<^sub>2 \\<and>\n  edge_preserving f\\<^sub>2 (edges (translation e\\<^sub>2)) (edges G)\n  (0, z) \\<in> f\\<^sub>2\n  (1, y) \\<in> f\\<^sub>2\n\ngoal (1 subgoal):\n 1. Domain f\\<^sub>1 = vertices (translation e\\<^sub>1) &&&\n    Domain f\\<^sub>2 = vertices (translation e\\<^sub>2)", "by auto"], ["proof (state)\nthis:\n  Domain f\\<^sub>1 = vertices (translation e\\<^sub>1)\n  Domain f\\<^sub>2 = vertices (translation e\\<^sub>2)\n\ngoal (3 subgoals):\n 1. \\<And>e1 e2 x y.\n       \\<lbrakk>\\<And>x y.\n                   (x, y) \\<in> :G:\\<lbrakk>e1\\<rbrakk> \\<Longrightarrow>\n                   \\<exists>f.\n                      graph_homomorphism (translation e1) G f \\<and>\n                      (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        \\<And>x y.\n           (x, y) \\<in> :G:\\<lbrakk>e2\\<rbrakk> \\<Longrightarrow>\n           \\<exists>f.\n              graph_homomorphism (translation e2) G f \\<and>\n              (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        (x, y) \\<in> :G:\\<lbrakk>A_Cmp e1 e2\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            graph_homomorphism (translation (A_Cmp e1 e2)) G\n                             f \\<and>\n                            (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 2. \\<And>e x y.\n       \\<lbrakk>\\<And>x y.\n                   (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk> \\<Longrightarrow>\n                   \\<exists>f.\n                      graph_homomorphism (translation e) G f \\<and>\n                      (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        (x, y) \\<in> :G:\\<lbrakk>A_Cnv e\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            graph_homomorphism (translation (A_Cnv e)) G\n                             f \\<and>\n                            (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 3. \\<And>x xa y.\n       (xa, y) \\<in> :G:\\<lbrakk>A_Lbl x\\<rbrakk> \\<Longrightarrow>\n       \\<exists>f.\n          graph_homomorphism (translation (A_Lbl x)) G f \\<and>\n          (0, xa) \\<in> f \\<and> (1, y) \\<in> f", "let ?f\\<^sub>1 = \"(\\<lambda> x. if x=0 then 0 else x+card(vertices (translation e\\<^sub>2))-1)\""], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>e1 e2 x y.\n       \\<lbrakk>\\<And>x y.\n                   (x, y) \\<in> :G:\\<lbrakk>e1\\<rbrakk> \\<Longrightarrow>\n                   \\<exists>f.\n                      graph_homomorphism (translation e1) G f \\<and>\n                      (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        \\<And>x y.\n           (x, y) \\<in> :G:\\<lbrakk>e2\\<rbrakk> \\<Longrightarrow>\n           \\<exists>f.\n              graph_homomorphism (translation e2) G f \\<and>\n              (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        (x, y) \\<in> :G:\\<lbrakk>A_Cmp e1 e2\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            graph_homomorphism (translation (A_Cmp e1 e2)) G\n                             f \\<and>\n                            (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 2. \\<And>e x y.\n       \\<lbrakk>\\<And>x y.\n                   (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk> \\<Longrightarrow>\n                   \\<exists>f.\n                      graph_homomorphism (translation e) G f \\<and>\n                      (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        (x, y) \\<in> :G:\\<lbrakk>A_Cnv e\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            graph_homomorphism (translation (A_Cnv e)) G\n                             f \\<and>\n                            (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 3. \\<And>x xa y.\n       (xa, y) \\<in> :G:\\<lbrakk>A_Lbl x\\<rbrakk> \\<Longrightarrow>\n       \\<exists>f.\n          graph_homomorphism (translation (A_Lbl x)) G f \\<and>\n          (0, xa) \\<in> f \\<and> (1, y) \\<in> f", "let ?f\\<^sub>2 = \"(\\<lambda> x. if x=0 then card (vertices (translation e\\<^sub>2)) else x)\""], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>e1 e2 x y.\n       \\<lbrakk>\\<And>x y.\n                   (x, y) \\<in> :G:\\<lbrakk>e1\\<rbrakk> \\<Longrightarrow>\n                   \\<exists>f.\n                      graph_homomorphism (translation e1) G f \\<and>\n                      (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        \\<And>x y.\n           (x, y) \\<in> :G:\\<lbrakk>e2\\<rbrakk> \\<Longrightarrow>\n           \\<exists>f.\n              graph_homomorphism (translation e2) G f \\<and>\n              (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        (x, y) \\<in> :G:\\<lbrakk>A_Cmp e1 e2\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            graph_homomorphism (translation (A_Cmp e1 e2)) G\n                             f \\<and>\n                            (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 2. \\<And>e x y.\n       \\<lbrakk>\\<And>x y.\n                   (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk> \\<Longrightarrow>\n                   \\<exists>f.\n                      graph_homomorphism (translation e) G f \\<and>\n                      (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        (x, y) \\<in> :G:\\<lbrakk>A_Cnv e\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            graph_homomorphism (translation (A_Cnv e)) G\n                             f \\<and>\n                            (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 3. \\<And>x xa y.\n       (xa, y) \\<in> :G:\\<lbrakk>A_Lbl x\\<rbrakk> \\<Longrightarrow>\n       \\<exists>f.\n          graph_homomorphism (translation (A_Lbl x)) G f \\<and>\n          (0, xa) \\<in> f \\<and> (1, y) \\<in> f", "let ?tr\\<^sub>1 = \"on_graph (translation e\\<^sub>1) ?f\\<^sub>1\""], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>e1 e2 x y.\n       \\<lbrakk>\\<And>x y.\n                   (x, y) \\<in> :G:\\<lbrakk>e1\\<rbrakk> \\<Longrightarrow>\n                   \\<exists>f.\n                      graph_homomorphism (translation e1) G f \\<and>\n                      (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        \\<And>x y.\n           (x, y) \\<in> :G:\\<lbrakk>e2\\<rbrakk> \\<Longrightarrow>\n           \\<exists>f.\n              graph_homomorphism (translation e2) G f \\<and>\n              (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        (x, y) \\<in> :G:\\<lbrakk>A_Cmp e1 e2\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            graph_homomorphism (translation (A_Cmp e1 e2)) G\n                             f \\<and>\n                            (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 2. \\<And>e x y.\n       \\<lbrakk>\\<And>x y.\n                   (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk> \\<Longrightarrow>\n                   \\<exists>f.\n                      graph_homomorphism (translation e) G f \\<and>\n                      (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        (x, y) \\<in> :G:\\<lbrakk>A_Cnv e\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            graph_homomorphism (translation (A_Cnv e)) G\n                             f \\<and>\n                            (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 3. \\<And>x xa y.\n       (xa, y) \\<in> :G:\\<lbrakk>A_Lbl x\\<rbrakk> \\<Longrightarrow>\n       \\<exists>f.\n          graph_homomorphism (translation (A_Lbl x)) G f \\<and>\n          (0, xa) \\<in> f \\<and> (1, y) \\<in> f", "let ?tr\\<^sub>2 = \"on_graph (translation e\\<^sub>2) ?f\\<^sub>2\""], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>e1 e2 x y.\n       \\<lbrakk>\\<And>x y.\n                   (x, y) \\<in> :G:\\<lbrakk>e1\\<rbrakk> \\<Longrightarrow>\n                   \\<exists>f.\n                      graph_homomorphism (translation e1) G f \\<and>\n                      (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        \\<And>x y.\n           (x, y) \\<in> :G:\\<lbrakk>e2\\<rbrakk> \\<Longrightarrow>\n           \\<exists>f.\n              graph_homomorphism (translation e2) G f \\<and>\n              (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        (x, y) \\<in> :G:\\<lbrakk>A_Cmp e1 e2\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            graph_homomorphism (translation (A_Cmp e1 e2)) G\n                             f \\<and>\n                            (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 2. \\<And>e x y.\n       \\<lbrakk>\\<And>x y.\n                   (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk> \\<Longrightarrow>\n                   \\<exists>f.\n                      graph_homomorphism (translation e) G f \\<and>\n                      (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        (x, y) \\<in> :G:\\<lbrakk>A_Cnv e\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            graph_homomorphism (translation (A_Cnv e)) G\n                             f \\<and>\n                            (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 3. \\<And>x xa y.\n       (xa, y) \\<in> :G:\\<lbrakk>A_Lbl x\\<rbrakk> \\<Longrightarrow>\n       \\<exists>f.\n          graph_homomorphism (translation (A_Lbl x)) G f \\<and>\n          (0, xa) \\<in> f \\<and> (1, y) \\<in> f", "have inj1:\"inj_on ?f\\<^sub>1 (vertices (translation e\\<^sub>1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_on\n     (\\<lambda>x.\n         if x = 0 then 0\n         else x + card (vertices (translation e\\<^sub>2)) - 1)\n     (vertices (translation e\\<^sub>1))", "unfolding inj_on_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>vertices (translation e\\<^sub>1).\n       \\<forall>y\\<in>vertices (translation e\\<^sub>1).\n          (if x = 0 then 0\n           else x + card (vertices (translation e\\<^sub>2)) - 1) =\n          (if y = 0 then 0\n           else y + card (vertices (translation e\\<^sub>2)) -\n                1) \\<longrightarrow>\n          x = y", "by auto"], ["proof (state)\nthis:\n  inj_on\n   (\\<lambda>x.\n       if x = 0 then 0 else x + card (vertices (translation e\\<^sub>2)) - 1)\n   (vertices (translation e\\<^sub>1))\n\ngoal (3 subgoals):\n 1. \\<And>e1 e2 x y.\n       \\<lbrakk>\\<And>x y.\n                   (x, y) \\<in> :G:\\<lbrakk>e1\\<rbrakk> \\<Longrightarrow>\n                   \\<exists>f.\n                      graph_homomorphism (translation e1) G f \\<and>\n                      (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        \\<And>x y.\n           (x, y) \\<in> :G:\\<lbrakk>e2\\<rbrakk> \\<Longrightarrow>\n           \\<exists>f.\n              graph_homomorphism (translation e2) G f \\<and>\n              (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        (x, y) \\<in> :G:\\<lbrakk>A_Cmp e1 e2\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            graph_homomorphism (translation (A_Cmp e1 e2)) G\n                             f \\<and>\n                            (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 2. \\<And>e x y.\n       \\<lbrakk>\\<And>x y.\n                   (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk> \\<Longrightarrow>\n                   \\<exists>f.\n                      graph_homomorphism (translation e) G f \\<and>\n                      (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        (x, y) \\<in> :G:\\<lbrakk>A_Cnv e\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            graph_homomorphism (translation (A_Cnv e)) G\n                             f \\<and>\n                            (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 3. \\<And>x xa y.\n       (xa, y) \\<in> :G:\\<lbrakk>A_Lbl x\\<rbrakk> \\<Longrightarrow>\n       \\<exists>f.\n          graph_homomorphism (translation (A_Lbl x)) G f \\<and>\n          (0, xa) \\<in> f \\<and> (1, y) \\<in> f", "have inj2:\"inj_on ?f\\<^sub>2 (vertices (translation e\\<^sub>2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_on\n     (\\<lambda>x.\n         if x = 0 then card (vertices (translation e\\<^sub>2)) else x)\n     (vertices (translation e\\<^sub>2))", "unfolding inj_on_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>vertices (translation e\\<^sub>2).\n       \\<forall>y\\<in>vertices (translation e\\<^sub>2).\n          (if x = 0 then card (vertices (translation e\\<^sub>2)) else x) =\n          (if y = 0 then card (vertices (translation e\\<^sub>2))\n           else y) \\<longrightarrow>\n          x = y", "by auto"], ["proof (state)\nthis:\n  inj_on\n   (\\<lambda>x.\n       if x = 0 then card (vertices (translation e\\<^sub>2)) else x)\n   (vertices (translation e\\<^sub>2))\n\ngoal (3 subgoals):\n 1. \\<And>e1 e2 x y.\n       \\<lbrakk>\\<And>x y.\n                   (x, y) \\<in> :G:\\<lbrakk>e1\\<rbrakk> \\<Longrightarrow>\n                   \\<exists>f.\n                      graph_homomorphism (translation e1) G f \\<and>\n                      (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        \\<And>x y.\n           (x, y) \\<in> :G:\\<lbrakk>e2\\<rbrakk> \\<Longrightarrow>\n           \\<exists>f.\n              graph_homomorphism (translation e2) G f \\<and>\n              (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        (x, y) \\<in> :G:\\<lbrakk>A_Cmp e1 e2\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            graph_homomorphism (translation (A_Cmp e1 e2)) G\n                             f \\<and>\n                            (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 2. \\<And>e x y.\n       \\<lbrakk>\\<And>x y.\n                   (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk> \\<Longrightarrow>\n                   \\<exists>f.\n                      graph_homomorphism (translation e) G f \\<and>\n                      (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        (x, y) \\<in> :G:\\<lbrakk>A_Cnv e\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            graph_homomorphism (translation (A_Cnv e)) G\n                             f \\<and>\n                            (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 3. \\<And>x xa y.\n       (xa, y) \\<in> :G:\\<lbrakk>A_Lbl x\\<rbrakk> \\<Longrightarrow>\n       \\<exists>f.\n          graph_homomorphism (translation (A_Lbl x)) G f \\<and>\n          (0, xa) \\<in> f \\<and> (1, y) \\<in> f", "have \"(card (vertices (translation e\\<^sub>2)),0) \\<in> ?tr\\<^sub>2\\<inverse>\" \"(1,1) \\<in> ?tr\\<^sub>2\\<inverse>\"\n         \"(0,0) \\<in> ?tr\\<^sub>1\\<inverse>\" \"(card (vertices (translation e\\<^sub>2)),1) \\<in> ?tr\\<^sub>1\\<inverse>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((card (vertices (translation e\\<^sub>2)), 0)\n     \\<in> (on_graph (translation e\\<^sub>2)\n             (\\<lambda>x.\n                 if x = 0 then card (vertices (translation e\\<^sub>2))\n                 else x))\\<inverse> &&&\n     (1, 1)\n     \\<in> (on_graph (translation e\\<^sub>2)\n             (\\<lambda>x.\n                 if x = 0 then card (vertices (translation e\\<^sub>2))\n                 else x))\\<inverse>) &&&\n    (0, 0)\n    \\<in> (on_graph (translation e\\<^sub>1)\n            (\\<lambda>x.\n                if x = 0 then 0\n                else x + card (vertices (translation e\\<^sub>2)) -\n                     1))\\<inverse> &&&\n    (card (vertices (translation e\\<^sub>2)), 1)\n    \\<in> (on_graph (translation e\\<^sub>1)\n            (\\<lambda>x.\n                if x = 0 then 0\n                else x + card (vertices (translation e\\<^sub>2)) -\n                     1))\\<inverse>", "by auto"], ["proof (state)\nthis:\n  (card (vertices (translation e\\<^sub>2)), 0)\n  \\<in> (on_graph (translation e\\<^sub>2)\n          (\\<lambda>x.\n              if x = 0 then card (vertices (translation e\\<^sub>2))\n              else x))\\<inverse>\n  (1, 1)\n  \\<in> (on_graph (translation e\\<^sub>2)\n          (\\<lambda>x.\n              if x = 0 then card (vertices (translation e\\<^sub>2))\n              else x))\\<inverse>\n  (0, 0)\n  \\<in> (on_graph (translation e\\<^sub>1)\n          (\\<lambda>x.\n              if x = 0 then 0\n              else x + card (vertices (translation e\\<^sub>2)) -\n                   1))\\<inverse>\n  (card (vertices (translation e\\<^sub>2)), 1)\n  \\<in> (on_graph (translation e\\<^sub>1)\n          (\\<lambda>x.\n              if x = 0 then 0\n              else x + card (vertices (translation e\\<^sub>2)) -\n                   1))\\<inverse>\n\ngoal (3 subgoals):\n 1. \\<And>e1 e2 x y.\n       \\<lbrakk>\\<And>x y.\n                   (x, y) \\<in> :G:\\<lbrakk>e1\\<rbrakk> \\<Longrightarrow>\n                   \\<exists>f.\n                      graph_homomorphism (translation e1) G f \\<and>\n                      (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        \\<And>x y.\n           (x, y) \\<in> :G:\\<lbrakk>e2\\<rbrakk> \\<Longrightarrow>\n           \\<exists>f.\n              graph_homomorphism (translation e2) G f \\<and>\n              (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        (x, y) \\<in> :G:\\<lbrakk>A_Cmp e1 e2\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            graph_homomorphism (translation (A_Cmp e1 e2)) G\n                             f \\<and>\n                            (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 2. \\<And>e x y.\n       \\<lbrakk>\\<And>x y.\n                   (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk> \\<Longrightarrow>\n                   \\<exists>f.\n                      graph_homomorphism (translation e) G f \\<and>\n                      (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        (x, y) \\<in> :G:\\<lbrakk>A_Cnv e\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            graph_homomorphism (translation (A_Cnv e)) G\n                             f \\<and>\n                            (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 3. \\<And>x xa y.\n       (xa, y) \\<in> :G:\\<lbrakk>A_Lbl x\\<rbrakk> \\<Longrightarrow>\n       \\<exists>f.\n          graph_homomorphism (translation (A_Lbl x)) G f \\<and>\n          (0, xa) \\<in> f \\<and> (1, y) \\<in> f", "from this[THEN relcompI] f\\<^sub>2(2,3) f\\<^sub>1(2,3)"], ["proof (chain)\npicking this:\n  (0, ?c) \\<in> ?s \\<Longrightarrow>\n  (card (vertices (translation e\\<^sub>2)), ?c)\n  \\<in> (on_graph (translation e\\<^sub>2)\n          (\\<lambda>x.\n              if x = 0 then card (vertices (translation e\\<^sub>2))\n              else x))\\<inverse> O\n        ?s\n  (1, ?c) \\<in> ?s \\<Longrightarrow>\n  (1, ?c)\n  \\<in> (on_graph (translation e\\<^sub>2)\n          (\\<lambda>x.\n              if x = 0 then card (vertices (translation e\\<^sub>2))\n              else x))\\<inverse> O\n        ?s\n  (0, ?c) \\<in> ?s \\<Longrightarrow>\n  (0, ?c)\n  \\<in> (on_graph (translation e\\<^sub>1)\n          (\\<lambda>x.\n              if x = 0 then 0\n              else x + card (vertices (translation e\\<^sub>2)) -\n                   1))\\<inverse> O\n        ?s\n  (1, ?c) \\<in> ?s \\<Longrightarrow>\n  (card (vertices (translation e\\<^sub>2)), ?c)\n  \\<in> (on_graph (translation e\\<^sub>1)\n          (\\<lambda>x.\n              if x = 0 then 0\n              else x + card (vertices (translation e\\<^sub>2)) -\n                   1))\\<inverse> O\n        ?s\n  (0, z) \\<in> f\\<^sub>2\n  (1, y) \\<in> f\\<^sub>2\n  (0, x) \\<in> f\\<^sub>1\n  (1, z) \\<in> f\\<^sub>1", "have zero_one:\"(card (vertices (translation e\\<^sub>2)),z) \\<in> ?tr\\<^sub>1\\<inverse> O f\\<^sub>1\"\n                  \"(0,x) \\<in> ?tr\\<^sub>1\\<inverse> O f\\<^sub>1\"\n                  \"(card (vertices (translation e\\<^sub>2)),z) \\<in> ?tr\\<^sub>2\\<inverse> O f\\<^sub>2\"\n                  \"(1,y) \\<in> ?tr\\<^sub>2\\<inverse> O f\\<^sub>2\""], ["proof (prove)\nusing this:\n  (0, ?c) \\<in> ?s \\<Longrightarrow>\n  (card (vertices (translation e\\<^sub>2)), ?c)\n  \\<in> (on_graph (translation e\\<^sub>2)\n          (\\<lambda>x.\n              if x = 0 then card (vertices (translation e\\<^sub>2))\n              else x))\\<inverse> O\n        ?s\n  (1, ?c) \\<in> ?s \\<Longrightarrow>\n  (1, ?c)\n  \\<in> (on_graph (translation e\\<^sub>2)\n          (\\<lambda>x.\n              if x = 0 then card (vertices (translation e\\<^sub>2))\n              else x))\\<inverse> O\n        ?s\n  (0, ?c) \\<in> ?s \\<Longrightarrow>\n  (0, ?c)\n  \\<in> (on_graph (translation e\\<^sub>1)\n          (\\<lambda>x.\n              if x = 0 then 0\n              else x + card (vertices (translation e\\<^sub>2)) -\n                   1))\\<inverse> O\n        ?s\n  (1, ?c) \\<in> ?s \\<Longrightarrow>\n  (card (vertices (translation e\\<^sub>2)), ?c)\n  \\<in> (on_graph (translation e\\<^sub>1)\n          (\\<lambda>x.\n              if x = 0 then 0\n              else x + card (vertices (translation e\\<^sub>2)) -\n                   1))\\<inverse> O\n        ?s\n  (0, z) \\<in> f\\<^sub>2\n  (1, y) \\<in> f\\<^sub>2\n  (0, x) \\<in> f\\<^sub>1\n  (1, z) \\<in> f\\<^sub>1\n\ngoal (1 subgoal):\n 1. ((card (vertices (translation e\\<^sub>2)), z)\n     \\<in> (on_graph (translation e\\<^sub>1)\n             (\\<lambda>x.\n                 if x = 0 then 0\n                 else x + card (vertices (translation e\\<^sub>2)) -\n                      1))\\<inverse> O\n           f\\<^sub>1 &&&\n     (0, x)\n     \\<in> (on_graph (translation e\\<^sub>1)\n             (\\<lambda>x.\n                 if x = 0 then 0\n                 else x + card (vertices (translation e\\<^sub>2)) -\n                      1))\\<inverse> O\n           f\\<^sub>1) &&&\n    (card (vertices (translation e\\<^sub>2)), z)\n    \\<in> (on_graph (translation e\\<^sub>2)\n            (\\<lambda>x.\n                if x = 0 then card (vertices (translation e\\<^sub>2))\n                else x))\\<inverse> O\n          f\\<^sub>2 &&&\n    (1, y)\n    \\<in> (on_graph (translation e\\<^sub>2)\n            (\\<lambda>x.\n                if x = 0 then card (vertices (translation e\\<^sub>2))\n                else x))\\<inverse> O\n          f\\<^sub>2", "by auto"], ["proof (state)\nthis:\n  (card (vertices (translation e\\<^sub>2)), z)\n  \\<in> (on_graph (translation e\\<^sub>1)\n          (\\<lambda>x.\n              if x = 0 then 0\n              else x + card (vertices (translation e\\<^sub>2)) -\n                   1))\\<inverse> O\n        f\\<^sub>1\n  (0, x)\n  \\<in> (on_graph (translation e\\<^sub>1)\n          (\\<lambda>x.\n              if x = 0 then 0\n              else x + card (vertices (translation e\\<^sub>2)) -\n                   1))\\<inverse> O\n        f\\<^sub>1\n  (card (vertices (translation e\\<^sub>2)), z)\n  \\<in> (on_graph (translation e\\<^sub>2)\n          (\\<lambda>x.\n              if x = 0 then card (vertices (translation e\\<^sub>2))\n              else x))\\<inverse> O\n        f\\<^sub>2\n  (1, y)\n  \\<in> (on_graph (translation e\\<^sub>2)\n          (\\<lambda>x.\n              if x = 0 then card (vertices (translation e\\<^sub>2))\n              else x))\\<inverse> O\n        f\\<^sub>2\n\ngoal (3 subgoals):\n 1. \\<And>e1 e2 x y.\n       \\<lbrakk>\\<And>x y.\n                   (x, y) \\<in> :G:\\<lbrakk>e1\\<rbrakk> \\<Longrightarrow>\n                   \\<exists>f.\n                      graph_homomorphism (translation e1) G f \\<and>\n                      (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        \\<And>x y.\n           (x, y) \\<in> :G:\\<lbrakk>e2\\<rbrakk> \\<Longrightarrow>\n           \\<exists>f.\n              graph_homomorphism (translation e2) G f \\<and>\n              (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        (x, y) \\<in> :G:\\<lbrakk>A_Cmp e1 e2\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            graph_homomorphism (translation (A_Cmp e1 e2)) G\n                             f \\<and>\n                            (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 2. \\<And>e x y.\n       \\<lbrakk>\\<And>x y.\n                   (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk> \\<Longrightarrow>\n                   \\<exists>f.\n                      graph_homomorphism (translation e) G f \\<and>\n                      (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        (x, y) \\<in> :G:\\<lbrakk>A_Cnv e\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            graph_homomorphism (translation (A_Cnv e)) G\n                             f \\<and>\n                            (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 3. \\<And>x xa y.\n       (xa, y) \\<in> :G:\\<lbrakk>A_Lbl x\\<rbrakk> \\<Longrightarrow>\n       \\<exists>f.\n          graph_homomorphism (translation (A_Lbl x)) G f \\<and>\n          (0, xa) \\<in> f \\<and> (1, y) \\<in> f", "have [simp]:\n        \"ye \\<in> vertices (translation e\\<^sub>2) \\<Longrightarrow>\n       (if ye = 0 then card (vertices (translation e\\<^sub>2)) else ye) =\n       (if yd = 0 then 0 else yd + card (vertices (translation e\\<^sub>2)) - 1) \\<longleftrightarrow> ye = 0 \\<and> yd = 1\"\n        for ye yd"], ["proof (prove)\ngoal (1 subgoal):\n 1. ye \\<in> vertices (translation e\\<^sub>2) \\<Longrightarrow>\n    ((if ye = 0 then card (vertices (translation e\\<^sub>2)) else ye) =\n     (if yd = 0 then 0\n      else yd + card (vertices (translation e\\<^sub>2)) - 1)) =\n    (ye = 0 \\<and> yd = 1)", "using v inv_tr_card_min[OF verts_in_translation,of \"e\\<^sub>2\"]"], ["proof (prove)\nusing this:\n  Domain f\\<^sub>1 = vertices (translation e\\<^sub>1)\n  Domain f\\<^sub>2 = vertices (translation e\\<^sub>2)\n  2 \\<le> card (vertices (translation e\\<^sub>2))\n\ngoal (1 subgoal):\n 1. ye \\<in> vertices (translation e\\<^sub>2) \\<Longrightarrow>\n    ((if ye = 0 then card (vertices (translation e\\<^sub>2)) else ye) =\n     (if yd = 0 then 0\n      else yd + card (vertices (translation e\\<^sub>2)) - 1)) =\n    (ye = 0 \\<and> yd = 1)", "by(cases \"ye=0\";cases \"yd=0\";auto)"], ["proof (state)\nthis:\n  ?ye \\<in> vertices (translation e\\<^sub>2) \\<Longrightarrow>\n  ((if ?ye = 0 then card (vertices (translation e\\<^sub>2)) else ?ye) =\n   (if ?yd = 0 then 0\n    else ?yd + card (vertices (translation e\\<^sub>2)) - 1)) =\n  (?ye = 0 \\<and> ?yd = 1)\n\ngoal (3 subgoals):\n 1. \\<And>e1 e2 x y.\n       \\<lbrakk>\\<And>x y.\n                   (x, y) \\<in> :G:\\<lbrakk>e1\\<rbrakk> \\<Longrightarrow>\n                   \\<exists>f.\n                      graph_homomorphism (translation e1) G f \\<and>\n                      (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        \\<And>x y.\n           (x, y) \\<in> :G:\\<lbrakk>e2\\<rbrakk> \\<Longrightarrow>\n           \\<exists>f.\n              graph_homomorphism (translation e2) G f \\<and>\n              (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        (x, y) \\<in> :G:\\<lbrakk>A_Cmp e1 e2\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            graph_homomorphism (translation (A_Cmp e1 e2)) G\n                             f \\<and>\n                            (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 2. \\<And>e x y.\n       \\<lbrakk>\\<And>x y.\n                   (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk> \\<Longrightarrow>\n                   \\<exists>f.\n                      graph_homomorphism (translation e) G f \\<and>\n                      (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        (x, y) \\<in> :G:\\<lbrakk>A_Cnv e\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            graph_homomorphism (translation (A_Cnv e)) G\n                             f \\<and>\n                            (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 3. \\<And>x xa y.\n       (xa, y) \\<in> :G:\\<lbrakk>A_Lbl x\\<rbrakk> \\<Longrightarrow>\n       \\<exists>f.\n          graph_homomorphism (translation (A_Lbl x)) G f \\<and>\n          (0, xa) \\<in> f \\<and> (1, y) \\<in> f", "have d_a:\"Domain (?tr\\<^sub>1\\<inverse> O f\\<^sub>1) \\<inter>  Domain (?tr\\<^sub>2\\<inverse> O f\\<^sub>2) = {card (vertices (translation e\\<^sub>2))}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Domain\n     ((on_graph (translation e\\<^sub>1)\n        (\\<lambda>x.\n            if x = 0 then 0\n            else x + card (vertices (translation e\\<^sub>2)) -\n                 1))\\<inverse> O\n      f\\<^sub>1) \\<inter>\n    Domain\n     ((on_graph (translation e\\<^sub>2)\n        (\\<lambda>x.\n            if x = 0 then card (vertices (translation e\\<^sub>2))\n            else x))\\<inverse> O\n      f\\<^sub>2) =\n    {card (vertices (translation e\\<^sub>2))}", "using zero_one"], ["proof (prove)\nusing this:\n  (card (vertices (translation e\\<^sub>2)), z)\n  \\<in> (on_graph (translation e\\<^sub>1)\n          (\\<lambda>x.\n              if x = 0 then 0\n              else x + card (vertices (translation e\\<^sub>2)) -\n                   1))\\<inverse> O\n        f\\<^sub>1\n  (0, x)\n  \\<in> (on_graph (translation e\\<^sub>1)\n          (\\<lambda>x.\n              if x = 0 then 0\n              else x + card (vertices (translation e\\<^sub>2)) -\n                   1))\\<inverse> O\n        f\\<^sub>1\n  (card (vertices (translation e\\<^sub>2)), z)\n  \\<in> (on_graph (translation e\\<^sub>2)\n          (\\<lambda>x.\n              if x = 0 then card (vertices (translation e\\<^sub>2))\n              else x))\\<inverse> O\n        f\\<^sub>2\n  (1, y)\n  \\<in> (on_graph (translation e\\<^sub>2)\n          (\\<lambda>x.\n              if x = 0 then card (vertices (translation e\\<^sub>2))\n              else x))\\<inverse> O\n        f\\<^sub>2\n\ngoal (1 subgoal):\n 1. Domain\n     ((on_graph (translation e\\<^sub>1)\n        (\\<lambda>x.\n            if x = 0 then 0\n            else x + card (vertices (translation e\\<^sub>2)) -\n                 1))\\<inverse> O\n      f\\<^sub>1) \\<inter>\n    Domain\n     ((on_graph (translation e\\<^sub>2)\n        (\\<lambda>x.\n            if x = 0 then card (vertices (translation e\\<^sub>2))\n            else x))\\<inverse> O\n      f\\<^sub>2) =\n    {card (vertices (translation e\\<^sub>2))}", "using [[simproc del: defined_all]]"], ["proof (prove)\nusing this:\n  (card (vertices (translation e\\<^sub>2)), z)\n  \\<in> (on_graph (translation e\\<^sub>1)\n          (\\<lambda>x.\n              if x = 0 then 0\n              else x + card (vertices (translation e\\<^sub>2)) -\n                   1))\\<inverse> O\n        f\\<^sub>1\n  (0, x)\n  \\<in> (on_graph (translation e\\<^sub>1)\n          (\\<lambda>x.\n              if x = 0 then 0\n              else x + card (vertices (translation e\\<^sub>2)) -\n                   1))\\<inverse> O\n        f\\<^sub>1\n  (card (vertices (translation e\\<^sub>2)), z)\n  \\<in> (on_graph (translation e\\<^sub>2)\n          (\\<lambda>x.\n              if x = 0 then card (vertices (translation e\\<^sub>2))\n              else x))\\<inverse> O\n        f\\<^sub>2\n  (1, y)\n  \\<in> (on_graph (translation e\\<^sub>2)\n          (\\<lambda>x.\n              if x = 0 then card (vertices (translation e\\<^sub>2))\n              else x))\\<inverse> O\n        f\\<^sub>2\n\ngoal (1 subgoal):\n 1. Domain\n     ((on_graph (translation e\\<^sub>1)\n        (\\<lambda>x.\n            if x = 0 then 0\n            else x + card (vertices (translation e\\<^sub>2)) -\n                 1))\\<inverse> O\n      f\\<^sub>1) \\<inter>\n    Domain\n     ((on_graph (translation e\\<^sub>2)\n        (\\<lambda>x.\n            if x = 0 then card (vertices (translation e\\<^sub>2))\n            else x))\\<inverse> O\n      f\\<^sub>2) =\n    {card (vertices (translation e\\<^sub>2))}", "by (auto simp: v)"], ["proof (state)\nthis:\n  Domain\n   ((on_graph (translation e\\<^sub>1)\n      (\\<lambda>x.\n          if x = 0 then 0\n          else x + card (vertices (translation e\\<^sub>2)) - 1))\\<inverse> O\n    f\\<^sub>1) \\<inter>\n  Domain\n   ((on_graph (translation e\\<^sub>2)\n      (\\<lambda>x.\n          if x = 0 then card (vertices (translation e\\<^sub>2))\n          else x))\\<inverse> O\n    f\\<^sub>2) =\n  {card (vertices (translation e\\<^sub>2))}\n\ngoal (3 subgoals):\n 1. \\<And>e1 e2 x y.\n       \\<lbrakk>\\<And>x y.\n                   (x, y) \\<in> :G:\\<lbrakk>e1\\<rbrakk> \\<Longrightarrow>\n                   \\<exists>f.\n                      graph_homomorphism (translation e1) G f \\<and>\n                      (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        \\<And>x y.\n           (x, y) \\<in> :G:\\<lbrakk>e2\\<rbrakk> \\<Longrightarrow>\n           \\<exists>f.\n              graph_homomorphism (translation e2) G f \\<and>\n              (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        (x, y) \\<in> :G:\\<lbrakk>A_Cmp e1 e2\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            graph_homomorphism (translation (A_Cmp e1 e2)) G\n                             f \\<and>\n                            (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 2. \\<And>e x y.\n       \\<lbrakk>\\<And>x y.\n                   (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk> \\<Longrightarrow>\n                   \\<exists>f.\n                      graph_homomorphism (translation e) G f \\<and>\n                      (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        (x, y) \\<in> :G:\\<lbrakk>A_Cnv e\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            graph_homomorphism (translation (A_Cnv e)) G\n                             f \\<and>\n                            (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 3. \\<And>x xa y.\n       (xa, y) \\<in> :G:\\<lbrakk>A_Lbl x\\<rbrakk> \\<Longrightarrow>\n       \\<exists>f.\n          graph_homomorphism (translation (A_Lbl x)) G f \\<and>\n          (0, xa) \\<in> f \\<and> (1, y) \\<in> f", "have d_b:\"Domain (?tr\\<^sub>1\\<inverse> O f\\<^sub>1 \\<inter> ?tr\\<^sub>2\\<inverse> O f\\<^sub>2) = {card (vertices (translation e\\<^sub>2))}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Domain\n     ((on_graph (translation e\\<^sub>1)\n        (\\<lambda>x.\n            if x = 0 then 0\n            else x + card (vertices (translation e\\<^sub>2)) -\n                 1))\\<inverse> O\n      f\\<^sub>1 \\<inter>\n      (on_graph (translation e\\<^sub>2)\n        (\\<lambda>x.\n            if x = 0 then card (vertices (translation e\\<^sub>2))\n            else x))\\<inverse> O\n      f\\<^sub>2) =\n    {card (vertices (translation e\\<^sub>2))}", "using zero_one f\\<^sub>1(2,3)"], ["proof (prove)\nusing this:\n  (card (vertices (translation e\\<^sub>2)), z)\n  \\<in> (on_graph (translation e\\<^sub>1)\n          (\\<lambda>x.\n              if x = 0 then 0\n              else x + card (vertices (translation e\\<^sub>2)) -\n                   1))\\<inverse> O\n        f\\<^sub>1\n  (0, x)\n  \\<in> (on_graph (translation e\\<^sub>1)\n          (\\<lambda>x.\n              if x = 0 then 0\n              else x + card (vertices (translation e\\<^sub>2)) -\n                   1))\\<inverse> O\n        f\\<^sub>1\n  (card (vertices (translation e\\<^sub>2)), z)\n  \\<in> (on_graph (translation e\\<^sub>2)\n          (\\<lambda>x.\n              if x = 0 then card (vertices (translation e\\<^sub>2))\n              else x))\\<inverse> O\n        f\\<^sub>2\n  (1, y)\n  \\<in> (on_graph (translation e\\<^sub>2)\n          (\\<lambda>x.\n              if x = 0 then card (vertices (translation e\\<^sub>2))\n              else x))\\<inverse> O\n        f\\<^sub>2\n  (0, x) \\<in> f\\<^sub>1\n  (1, z) \\<in> f\\<^sub>1\n\ngoal (1 subgoal):\n 1. Domain\n     ((on_graph (translation e\\<^sub>1)\n        (\\<lambda>x.\n            if x = 0 then 0\n            else x + card (vertices (translation e\\<^sub>2)) -\n                 1))\\<inverse> O\n      f\\<^sub>1 \\<inter>\n      (on_graph (translation e\\<^sub>2)\n        (\\<lambda>x.\n            if x = 0 then card (vertices (translation e\\<^sub>2))\n            else x))\\<inverse> O\n      f\\<^sub>2) =\n    {card (vertices (translation e\\<^sub>2))}", "using [[simproc del: defined_all]]"], ["proof (prove)\nusing this:\n  (card (vertices (translation e\\<^sub>2)), z)\n  \\<in> (on_graph (translation e\\<^sub>1)\n          (\\<lambda>x.\n              if x = 0 then 0\n              else x + card (vertices (translation e\\<^sub>2)) -\n                   1))\\<inverse> O\n        f\\<^sub>1\n  (0, x)\n  \\<in> (on_graph (translation e\\<^sub>1)\n          (\\<lambda>x.\n              if x = 0 then 0\n              else x + card (vertices (translation e\\<^sub>2)) -\n                   1))\\<inverse> O\n        f\\<^sub>1\n  (card (vertices (translation e\\<^sub>2)), z)\n  \\<in> (on_graph (translation e\\<^sub>2)\n          (\\<lambda>x.\n              if x = 0 then card (vertices (translation e\\<^sub>2))\n              else x))\\<inverse> O\n        f\\<^sub>2\n  (1, y)\n  \\<in> (on_graph (translation e\\<^sub>2)\n          (\\<lambda>x.\n              if x = 0 then card (vertices (translation e\\<^sub>2))\n              else x))\\<inverse> O\n        f\\<^sub>2\n  (0, x) \\<in> f\\<^sub>1\n  (1, z) \\<in> f\\<^sub>1\n\ngoal (1 subgoal):\n 1. Domain\n     ((on_graph (translation e\\<^sub>1)\n        (\\<lambda>x.\n            if x = 0 then 0\n            else x + card (vertices (translation e\\<^sub>2)) -\n                 1))\\<inverse> O\n      f\\<^sub>1 \\<inter>\n      (on_graph (translation e\\<^sub>2)\n        (\\<lambda>x.\n            if x = 0 then card (vertices (translation e\\<^sub>2))\n            else x))\\<inverse> O\n      f\\<^sub>2) =\n    {card (vertices (translation e\\<^sub>2))}", "by auto"], ["proof (state)\nthis:\n  Domain\n   ((on_graph (translation e\\<^sub>1)\n      (\\<lambda>x.\n          if x = 0 then 0\n          else x + card (vertices (translation e\\<^sub>2)) - 1))\\<inverse> O\n    f\\<^sub>1 \\<inter>\n    (on_graph (translation e\\<^sub>2)\n      (\\<lambda>x.\n          if x = 0 then card (vertices (translation e\\<^sub>2))\n          else x))\\<inverse> O\n    f\\<^sub>2) =\n  {card (vertices (translation e\\<^sub>2))}\n\ngoal (3 subgoals):\n 1. \\<And>e1 e2 x y.\n       \\<lbrakk>\\<And>x y.\n                   (x, y) \\<in> :G:\\<lbrakk>e1\\<rbrakk> \\<Longrightarrow>\n                   \\<exists>f.\n                      graph_homomorphism (translation e1) G f \\<and>\n                      (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        \\<And>x y.\n           (x, y) \\<in> :G:\\<lbrakk>e2\\<rbrakk> \\<Longrightarrow>\n           \\<exists>f.\n              graph_homomorphism (translation e2) G f \\<and>\n              (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        (x, y) \\<in> :G:\\<lbrakk>A_Cmp e1 e2\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            graph_homomorphism (translation (A_Cmp e1 e2)) G\n                             f \\<and>\n                            (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 2. \\<And>e x y.\n       \\<lbrakk>\\<And>x y.\n                   (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk> \\<Longrightarrow>\n                   \\<exists>f.\n                      graph_homomorphism (translation e) G f \\<and>\n                      (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        (x, y) \\<in> :G:\\<lbrakk>A_Cnv e\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            graph_homomorphism (translation (A_Cnv e)) G\n                             f \\<and>\n                            (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 3. \\<And>x xa y.\n       (xa, y) \\<in> :G:\\<lbrakk>A_Lbl x\\<rbrakk> \\<Longrightarrow>\n       \\<exists>f.\n          graph_homomorphism (translation (A_Lbl x)) G f \\<and>\n          (0, xa) \\<in> f \\<and> (1, y) \\<in> f", "note cmp1 = graph_homomorphism_composes[OF graph_homo_inv[OF translation_graph inj1] f\\<^sub>1(1)]"], ["proof (state)\nthis:\n  graph_homomorphism\n   (map_graph_fn (translation e\\<^sub>1)\n     (\\<lambda>x.\n         if x = 0 then 0\n         else x + card (vertices (translation e\\<^sub>2)) - 1))\n   G ((on_graph (translation e\\<^sub>1)\n        (\\<lambda>x.\n            if x = 0 then 0\n            else x + card (vertices (translation e\\<^sub>2)) -\n                 1))\\<inverse> O\n      f\\<^sub>1)\n\ngoal (3 subgoals):\n 1. \\<And>e1 e2 x y.\n       \\<lbrakk>\\<And>x y.\n                   (x, y) \\<in> :G:\\<lbrakk>e1\\<rbrakk> \\<Longrightarrow>\n                   \\<exists>f.\n                      graph_homomorphism (translation e1) G f \\<and>\n                      (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        \\<And>x y.\n           (x, y) \\<in> :G:\\<lbrakk>e2\\<rbrakk> \\<Longrightarrow>\n           \\<exists>f.\n              graph_homomorphism (translation e2) G f \\<and>\n              (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        (x, y) \\<in> :G:\\<lbrakk>A_Cmp e1 e2\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            graph_homomorphism (translation (A_Cmp e1 e2)) G\n                             f \\<and>\n                            (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 2. \\<And>e x y.\n       \\<lbrakk>\\<And>x y.\n                   (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk> \\<Longrightarrow>\n                   \\<exists>f.\n                      graph_homomorphism (translation e) G f \\<and>\n                      (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        (x, y) \\<in> :G:\\<lbrakk>A_Cnv e\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            graph_homomorphism (translation (A_Cnv e)) G\n                             f \\<and>\n                            (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 3. \\<And>x xa y.\n       (xa, y) \\<in> :G:\\<lbrakk>A_Lbl x\\<rbrakk> \\<Longrightarrow>\n       \\<exists>f.\n          graph_homomorphism (translation (A_Lbl x)) G f \\<and>\n          (0, xa) \\<in> f \\<and> (1, y) \\<in> f", "note cmp2 = graph_homomorphism_composes[OF graph_homo_inv[OF translation_graph inj2] f\\<^sub>2(1)]"], ["proof (state)\nthis:\n  graph_homomorphism\n   (map_graph_fn (translation e\\<^sub>2)\n     (\\<lambda>x.\n         if x = 0 then card (vertices (translation e\\<^sub>2)) else x))\n   G ((on_graph (translation e\\<^sub>2)\n        (\\<lambda>x.\n            if x = 0 then card (vertices (translation e\\<^sub>2))\n            else x))\\<inverse> O\n      f\\<^sub>2)\n\ngoal (3 subgoals):\n 1. \\<And>e1 e2 x y.\n       \\<lbrakk>\\<And>x y.\n                   (x, y) \\<in> :G:\\<lbrakk>e1\\<rbrakk> \\<Longrightarrow>\n                   \\<exists>f.\n                      graph_homomorphism (translation e1) G f \\<and>\n                      (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        \\<And>x y.\n           (x, y) \\<in> :G:\\<lbrakk>e2\\<rbrakk> \\<Longrightarrow>\n           \\<exists>f.\n              graph_homomorphism (translation e2) G f \\<and>\n              (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        (x, y) \\<in> :G:\\<lbrakk>A_Cmp e1 e2\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            graph_homomorphism (translation (A_Cmp e1 e2)) G\n                             f \\<and>\n                            (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 2. \\<And>e x y.\n       \\<lbrakk>\\<And>x y.\n                   (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk> \\<Longrightarrow>\n                   \\<exists>f.\n                      graph_homomorphism (translation e) G f \\<and>\n                      (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        (x, y) \\<in> :G:\\<lbrakk>A_Cnv e\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            graph_homomorphism (translation (A_Cnv e)) G\n                             f \\<and>\n                            (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 3. \\<And>x xa y.\n       (xa, y) \\<in> :G:\\<lbrakk>A_Lbl x\\<rbrakk> \\<Longrightarrow>\n       \\<exists>f.\n          graph_homomorphism (translation (A_Lbl x)) G f \\<and>\n          (0, xa) \\<in> f \\<and> (1, y) \\<in> f", "have \"graph_homomorphism (translation (A_Cmp e\\<^sub>1 e\\<^sub>2)) G (?tr\\<^sub>1\\<inverse> O f\\<^sub>1 \\<union> ?tr\\<^sub>2\\<inverse> O f\\<^sub>2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. graph_homomorphism (translation (A_Cmp e\\<^sub>1 e\\<^sub>2)) G\n     ((on_graph (translation e\\<^sub>1)\n        (\\<lambda>x.\n            if x = 0 then 0\n            else x + card (vertices (translation e\\<^sub>2)) -\n                 1))\\<inverse> O\n      f\\<^sub>1 \\<union>\n      (on_graph (translation e\\<^sub>2)\n        (\\<lambda>x.\n            if x = 0 then card (vertices (translation e\\<^sub>2))\n            else x))\\<inverse> O\n      f\\<^sub>2)", "unfolding Let_def translation.simps"], ["proof (prove)\ngoal (1 subgoal):\n 1. graph_homomorphism\n     (graph_union\n       (map_graph_fn (translation e\\<^sub>1)\n         (\\<lambda>x.\n             if x = 0 then 0\n             else x + card (vertices (translation e\\<^sub>2)) - 1))\n       (map_graph_fn (translation e\\<^sub>2)\n         (\\<lambda>x.\n             if x = 0 then card (vertices (translation e\\<^sub>2)) else x)))\n     G ((on_graph (translation e\\<^sub>1)\n          (\\<lambda>x.\n              if x = 0 then 0\n              else x + card (vertices (translation e\\<^sub>2)) -\n                   1))\\<inverse> O\n        f\\<^sub>1 \\<union>\n        (on_graph (translation e\\<^sub>2)\n          (\\<lambda>x.\n              if x = 0 then card (vertices (translation e\\<^sub>2))\n              else x))\\<inverse> O\n        f\\<^sub>2)", "by (rule graph_homo_union[OF cmp1 cmp2 d_a[folded d_b]])"], ["proof (state)\nthis:\n  graph_homomorphism (translation (A_Cmp e\\<^sub>1 e\\<^sub>2)) G\n   ((on_graph (translation e\\<^sub>1)\n      (\\<lambda>x.\n          if x = 0 then 0\n          else x + card (vertices (translation e\\<^sub>2)) - 1))\\<inverse> O\n    f\\<^sub>1 \\<union>\n    (on_graph (translation e\\<^sub>2)\n      (\\<lambda>x.\n          if x = 0 then card (vertices (translation e\\<^sub>2))\n          else x))\\<inverse> O\n    f\\<^sub>2)\n\ngoal (3 subgoals):\n 1. \\<And>e1 e2 x y.\n       \\<lbrakk>\\<And>x y.\n                   (x, y) \\<in> :G:\\<lbrakk>e1\\<rbrakk> \\<Longrightarrow>\n                   \\<exists>f.\n                      graph_homomorphism (translation e1) G f \\<and>\n                      (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        \\<And>x y.\n           (x, y) \\<in> :G:\\<lbrakk>e2\\<rbrakk> \\<Longrightarrow>\n           \\<exists>f.\n              graph_homomorphism (translation e2) G f \\<and>\n              (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        (x, y) \\<in> :G:\\<lbrakk>A_Cmp e1 e2\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            graph_homomorphism (translation (A_Cmp e1 e2)) G\n                             f \\<and>\n                            (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 2. \\<And>e x y.\n       \\<lbrakk>\\<And>x y.\n                   (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk> \\<Longrightarrow>\n                   \\<exists>f.\n                      graph_homomorphism (translation e) G f \\<and>\n                      (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        (x, y) \\<in> :G:\\<lbrakk>A_Cnv e\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            graph_homomorphism (translation (A_Cnv e)) G\n                             f \\<and>\n                            (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 3. \\<And>x xa y.\n       (xa, y) \\<in> :G:\\<lbrakk>A_Lbl x\\<rbrakk> \\<Longrightarrow>\n       \\<exists>f.\n          graph_homomorphism (translation (A_Lbl x)) G f \\<and>\n          (0, xa) \\<in> f \\<and> (1, y) \\<in> f", "thus ?case"], ["proof (prove)\nusing this:\n  graph_homomorphism (translation (A_Cmp e\\<^sub>1 e\\<^sub>2)) G\n   ((on_graph (translation e\\<^sub>1)\n      (\\<lambda>x.\n          if x = 0 then 0\n          else x + card (vertices (translation e\\<^sub>2)) - 1))\\<inverse> O\n    f\\<^sub>1 \\<union>\n    (on_graph (translation e\\<^sub>2)\n      (\\<lambda>x.\n          if x = 0 then card (vertices (translation e\\<^sub>2))\n          else x))\\<inverse> O\n    f\\<^sub>2)\n\ngoal (1 subgoal):\n 1. \\<exists>f.\n       graph_homomorphism (translation (A_Cmp e\\<^sub>1 e\\<^sub>2)) G\n        f \\<and>\n       (0, x) \\<in> f \\<and> (1, y) \\<in> f", "using zero_one"], ["proof (prove)\nusing this:\n  graph_homomorphism (translation (A_Cmp e\\<^sub>1 e\\<^sub>2)) G\n   ((on_graph (translation e\\<^sub>1)\n      (\\<lambda>x.\n          if x = 0 then 0\n          else x + card (vertices (translation e\\<^sub>2)) - 1))\\<inverse> O\n    f\\<^sub>1 \\<union>\n    (on_graph (translation e\\<^sub>2)\n      (\\<lambda>x.\n          if x = 0 then card (vertices (translation e\\<^sub>2))\n          else x))\\<inverse> O\n    f\\<^sub>2)\n  (card (vertices (translation e\\<^sub>2)), z)\n  \\<in> (on_graph (translation e\\<^sub>1)\n          (\\<lambda>x.\n              if x = 0 then 0\n              else x + card (vertices (translation e\\<^sub>2)) -\n                   1))\\<inverse> O\n        f\\<^sub>1\n  (0, x)\n  \\<in> (on_graph (translation e\\<^sub>1)\n          (\\<lambda>x.\n              if x = 0 then 0\n              else x + card (vertices (translation e\\<^sub>2)) -\n                   1))\\<inverse> O\n        f\\<^sub>1\n  (card (vertices (translation e\\<^sub>2)), z)\n  \\<in> (on_graph (translation e\\<^sub>2)\n          (\\<lambda>x.\n              if x = 0 then card (vertices (translation e\\<^sub>2))\n              else x))\\<inverse> O\n        f\\<^sub>2\n  (1, y)\n  \\<in> (on_graph (translation e\\<^sub>2)\n          (\\<lambda>x.\n              if x = 0 then card (vertices (translation e\\<^sub>2))\n              else x))\\<inverse> O\n        f\\<^sub>2\n\ngoal (1 subgoal):\n 1. \\<exists>f.\n       graph_homomorphism (translation (A_Cmp e\\<^sub>1 e\\<^sub>2)) G\n        f \\<and>\n       (0, x) \\<in> f \\<and> (1, y) \\<in> f", "by blast"], ["proof (state)\nthis:\n  \\<exists>f.\n     graph_homomorphism (translation (A_Cmp e\\<^sub>1 e\\<^sub>2)) G f \\<and>\n     (0, x) \\<in> f \\<and> (1, y) \\<in> f\n\ngoal (2 subgoals):\n 1. \\<And>e x y.\n       \\<lbrakk>\\<And>x y.\n                   (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk> \\<Longrightarrow>\n                   \\<exists>f.\n                      graph_homomorphism (translation e) G f \\<and>\n                      (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        (x, y) \\<in> :G:\\<lbrakk>A_Cnv e\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            graph_homomorphism (translation (A_Cnv e)) G\n                             f \\<and>\n                            (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 2. \\<And>x xa y.\n       (xa, y) \\<in> :G:\\<lbrakk>A_Lbl x\\<rbrakk> \\<Longrightarrow>\n       \\<exists>f.\n          graph_homomorphism (translation (A_Lbl x)) G f \\<and>\n          (0, xa) \\<in> f \\<and> (1, y) \\<in> f", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>e x y.\n       \\<lbrakk>\\<And>x y.\n                   (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk> \\<Longrightarrow>\n                   \\<exists>f.\n                      graph_homomorphism (translation e) G f \\<and>\n                      (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        (x, y) \\<in> :G:\\<lbrakk>A_Cnv e\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            graph_homomorphism (translation (A_Cnv e)) G\n                             f \\<and>\n                            (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 2. \\<And>x xa y.\n       (xa, y) \\<in> :G:\\<lbrakk>A_Lbl x\\<rbrakk> \\<Longrightarrow>\n       \\<exists>f.\n          graph_homomorphism (translation (A_Lbl x)) G f \\<and>\n          (0, xa) \\<in> f \\<and> (1, y) \\<in> f", "case (A_Cnv e)"], ["proof (state)\nthis:\n  (?x, ?y) \\<in> :G:\\<lbrakk>e\\<rbrakk> \\<Longrightarrow>\n  \\<exists>f.\n     graph_homomorphism (translation e) G f \\<and>\n     (0, ?x) \\<in> f \\<and> (1, ?y) \\<in> f\n  (x, y) \\<in> :G:\\<lbrakk>A_Cnv e\\<rbrakk>\n\ngoal (2 subgoals):\n 1. \\<And>e x y.\n       \\<lbrakk>\\<And>x y.\n                   (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk> \\<Longrightarrow>\n                   \\<exists>f.\n                      graph_homomorphism (translation e) G f \\<and>\n                      (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        (x, y) \\<in> :G:\\<lbrakk>A_Cnv e\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            graph_homomorphism (translation (A_Cnv e)) G\n                             f \\<and>\n                            (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 2. \\<And>x xa y.\n       (xa, y) \\<in> :G:\\<lbrakk>A_Lbl x\\<rbrakk> \\<Longrightarrow>\n       \\<exists>f.\n          graph_homomorphism (translation (A_Lbl x)) G f \\<and>\n          (0, xa) \\<in> f \\<and> (1, y) \\<in> f", "let ?G = \"translation (A_Cnv e)\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>e x y.\n       \\<lbrakk>\\<And>x y.\n                   (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk> \\<Longrightarrow>\n                   \\<exists>f.\n                      graph_homomorphism (translation e) G f \\<and>\n                      (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        (x, y) \\<in> :G:\\<lbrakk>A_Cnv e\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            graph_homomorphism (translation (A_Cnv e)) G\n                             f \\<and>\n                            (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 2. \\<And>x xa y.\n       (xa, y) \\<in> :G:\\<lbrakk>A_Lbl x\\<rbrakk> \\<Longrightarrow>\n       \\<exists>f.\n          graph_homomorphism (translation (A_Lbl x)) G f \\<and>\n          (0, xa) \\<in> f \\<and> (1, y) \\<in> f", "from A_Cnv"], ["proof (chain)\npicking this:\n  (?x, ?y) \\<in> :G:\\<lbrakk>e\\<rbrakk> \\<Longrightarrow>\n  \\<exists>f.\n     graph_homomorphism (translation e) G f \\<and>\n     (0, ?x) \\<in> f \\<and> (1, ?y) \\<in> f\n  (x, y) \\<in> :G:\\<lbrakk>A_Cnv e\\<rbrakk>", "obtain f where\n      f:\"graph_homomorphism (translation e) G f\" \"(0, y) \\<in> f\" \"(1, x) \\<in> f\""], ["proof (prove)\nusing this:\n  (?x, ?y) \\<in> :G:\\<lbrakk>e\\<rbrakk> \\<Longrightarrow>\n  \\<exists>f.\n     graph_homomorphism (translation e) G f \\<and>\n     (0, ?x) \\<in> f \\<and> (1, ?y) \\<in> f\n  (x, y) \\<in> :G:\\<lbrakk>A_Cnv e\\<rbrakk>\n\ngoal (1 subgoal):\n 1. (\\<And>f.\n        \\<lbrakk>graph_homomorphism (translation e) G f; (0, y) \\<in> f;\n         (1, x) \\<in> f\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  graph_homomorphism (translation e) G f\n  (0, y) \\<in> f\n  (1, x) \\<in> f\n\ngoal (2 subgoals):\n 1. \\<And>e x y.\n       \\<lbrakk>\\<And>x y.\n                   (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk> \\<Longrightarrow>\n                   \\<exists>f.\n                      graph_homomorphism (translation e) G f \\<and>\n                      (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        (x, y) \\<in> :G:\\<lbrakk>A_Cnv e\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            graph_homomorphism (translation (A_Cnv e)) G\n                             f \\<and>\n                            (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 2. \\<And>x xa y.\n       (xa, y) \\<in> :G:\\<lbrakk>A_Lbl x\\<rbrakk> \\<Longrightarrow>\n       \\<exists>f.\n          graph_homomorphism (translation (A_Lbl x)) G f \\<and>\n          (0, xa) \\<in> f \\<and> (1, y) \\<in> f", "hence v:\"Domain f = vertices (translation e)\""], ["proof (prove)\nusing this:\n  graph_homomorphism (translation e) G f\n  (0, y) \\<in> f\n  (1, x) \\<in> f\n\ngoal (1 subgoal):\n 1. Domain f = vertices (translation e)", "unfolding graph_homomorphism_def"], ["proof (prove)\nusing this:\n  vertices (translation e) = Domain f \\<and>\n  graph (translation e) \\<and>\n  graph G \\<and>\n  f `` vertices (translation e) \\<subseteq> vertices G \\<and>\n  univalent f \\<and> edge_preserving f (edges (translation e)) (edges G)\n  (0, y) \\<in> f\n  (1, x) \\<in> f\n\ngoal (1 subgoal):\n 1. Domain f = vertices (translation e)", "by auto"], ["proof (state)\nthis:\n  Domain f = vertices (translation e)\n\ngoal (2 subgoals):\n 1. \\<And>e x y.\n       \\<lbrakk>\\<And>x y.\n                   (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk> \\<Longrightarrow>\n                   \\<exists>f.\n                      graph_homomorphism (translation e) G f \\<and>\n                      (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        (x, y) \\<in> :G:\\<lbrakk>A_Cnv e\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            graph_homomorphism (translation (A_Cnv e)) G\n                             f \\<and>\n                            (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 2. \\<And>x xa y.\n       (xa, y) \\<in> :G:\\<lbrakk>A_Lbl x\\<rbrakk> \\<Longrightarrow>\n       \\<exists>f.\n          graph_homomorphism (translation (A_Lbl x)) G f \\<and>\n          (0, xa) \\<in> f \\<and> (1, y) \\<in> f", "define n where \"n \\<equiv> card (vertices (translation e))\""], ["proof (state)\nthis:\n  n \\<equiv> card (vertices (translation e))\n\ngoal (2 subgoals):\n 1. \\<And>e x y.\n       \\<lbrakk>\\<And>x y.\n                   (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk> \\<Longrightarrow>\n                   \\<exists>f.\n                      graph_homomorphism (translation e) G f \\<and>\n                      (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        (x, y) \\<in> :G:\\<lbrakk>A_Cnv e\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            graph_homomorphism (translation (A_Cnv e)) G\n                             f \\<and>\n                            (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 2. \\<And>x xa y.\n       (xa, y) \\<in> :G:\\<lbrakk>A_Lbl x\\<rbrakk> \\<Longrightarrow>\n       \\<exists>f.\n          graph_homomorphism (translation (A_Lbl x)) G f \\<and>\n          (0, xa) \\<in> f \\<and> (1, y) \\<in> f", "from verts_in_translation f inv_tr_card_min[OF verts_in_translation] v(1)"], ["proof (chain)\npicking this:\n  inv_translation (vertices (translation ?X))\n  graph_homomorphism (translation e) G f\n  (0, y) \\<in> f\n  (1, x) \\<in> f\n  2 \\<le> card (vertices (translation ?X1))\n  Domain f = vertices (translation e)", "have n:\"vertices (translation e) = {0..<n}\" \"{0..<n} \\<inter> {x. x < 2} = {1,0}\"\n      \"Domain f = {0..<n}\" \"{0..<n} \\<inter> {x. \\<not> x < 2} = {2..<n}\"\n      and n2: \"n \\<ge> 2\""], ["proof (prove)\nusing this:\n  inv_translation (vertices (translation ?X))\n  graph_homomorphism (translation e) G f\n  (0, y) \\<in> f\n  (1, x) \\<in> f\n  2 \\<le> card (vertices (translation ?X1))\n  Domain f = vertices (translation e)\n\ngoal (1 subgoal):\n 1. ((vertices (translation e) = {0..<n} &&&\n      {0..<n} \\<inter> {x. x < 2} = {1, 0}) &&&\n     Domain f = {0..<n} &&&\n     {0..<n} \\<inter> {x. \\<not> x < 2} = {2..<n}) &&&\n    2 \\<le> n", "by (auto simp:n_def inv_translation_def)"], ["proof (state)\nthis:\n  vertices (translation e) = {0..<n}\n  {0..<n} \\<inter> {x. x < 2} = {1, 0}\n  Domain f = {0..<n}\n  {0..<n} \\<inter> {x. \\<not> x < 2} = {2..<n}\n  2 \\<le> n\n\ngoal (2 subgoals):\n 1. \\<And>e x y.\n       \\<lbrakk>\\<And>x y.\n                   (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk> \\<Longrightarrow>\n                   \\<exists>f.\n                      graph_homomorphism (translation e) G f \\<and>\n                      (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        (x, y) \\<in> :G:\\<lbrakk>A_Cnv e\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            graph_homomorphism (translation (A_Cnv e)) G\n                             f \\<and>\n                            (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 2. \\<And>x xa y.\n       (xa, y) \\<in> :G:\\<lbrakk>A_Lbl x\\<rbrakk> \\<Longrightarrow>\n       \\<exists>f.\n          graph_homomorphism (translation (A_Lbl x)) G f \\<and>\n          (0, xa) \\<in> f \\<and> (1, y) \\<in> f", "then"], ["proof (chain)\npicking this:\n  vertices (translation e) = {0..<n}\n  {0..<n} \\<inter> {x. x < 2} = {1, 0}\n  Domain f = {0..<n}\n  {0..<n} \\<inter> {x. \\<not> x < 2} = {2..<n}\n  2 \\<le> n", "have [simp]:\"insert (Suc 0) {2..<n} = {1..<n}\"\n      \"insert 0 {Suc 0..<n} = {0..<n}\""], ["proof (prove)\nusing this:\n  vertices (translation e) = {0..<n}\n  {0..<n} \\<inter> {x. x < 2} = {1, 0}\n  Domain f = {0..<n}\n  {0..<n} \\<inter> {x. \\<not> x < 2} = {2..<n}\n  2 \\<le> n\n\ngoal (1 subgoal):\n 1. insert (Suc 0) {2..<n} = {1..<n} &&& insert 0 {Suc 0..<n} = {0..<n}", "using [[simproc del: defined_all]]"], ["proof (prove)\nusing this:\n  vertices (translation e) = {0..<n}\n  {0..<n} \\<inter> {x. x < 2} = {1, 0}\n  Domain f = {0..<n}\n  {0..<n} \\<inter> {x. \\<not> x < 2} = {2..<n}\n  2 \\<le> n\n\ngoal (1 subgoal):\n 1. insert (Suc 0) {2..<n} = {1..<n} &&& insert 0 {Suc 0..<n} = {0..<n}", "by auto"], ["proof (state)\nthis:\n  insert (Suc 0) {2..<n} = {1..<n}\n  insert 0 {Suc 0..<n} = {0..<n}\n\ngoal (2 subgoals):\n 1. \\<And>e x y.\n       \\<lbrakk>\\<And>x y.\n                   (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk> \\<Longrightarrow>\n                   \\<exists>f.\n                      graph_homomorphism (translation e) G f \\<and>\n                      (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        (x, y) \\<in> :G:\\<lbrakk>A_Cnv e\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            graph_homomorphism (translation (A_Cnv e)) G\n                             f \\<and>\n                            (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 2. \\<And>x xa y.\n       (xa, y) \\<in> :G:\\<lbrakk>A_Lbl x\\<rbrakk> \\<Longrightarrow>\n       \\<exists>f.\n          graph_homomorphism (translation (A_Lbl x)) G f \\<and>\n          (0, xa) \\<in> f \\<and> (1, y) \\<in> f", "let ?f = \"on_graph ?G (\\<lambda> x. if x < 2 then 1 - x else x)\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>e x y.\n       \\<lbrakk>\\<And>x y.\n                   (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk> \\<Longrightarrow>\n                   \\<exists>f.\n                      graph_homomorphism (translation e) G f \\<and>\n                      (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        (x, y) \\<in> :G:\\<lbrakk>A_Cnv e\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            graph_homomorphism (translation (A_Cnv e)) G\n                             f \\<and>\n                            (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 2. \\<And>x xa y.\n       (xa, y) \\<in> :G:\\<lbrakk>A_Lbl x\\<rbrakk> \\<Longrightarrow>\n       \\<exists>f.\n          graph_homomorphism (translation (A_Lbl x)) G f \\<and>\n          (0, xa) \\<in> f \\<and> (1, y) \\<in> f", "have h:\"graph_homomorphism ?G G (?f O f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. graph_homomorphism (translation (A_Cnv e)) G\n     (on_graph (translation (A_Cnv e))\n       (\\<lambda>x. if x < 2 then 1 - x else x) O\n      f)", "proof(rule graph_homomorphism_composes[OF _ f(1)],rule graph_homomorphismI)"], ["proof (state)\ngoal (6 subgoals):\n 1. vertices (translation (A_Cnv e)) =\n    Domain\n     (on_graph (translation (A_Cnv e))\n       (\\<lambda>x. if x < 2 then 1 - x else x))\n 2. on_graph (translation (A_Cnv e))\n     (\\<lambda>x. if x < 2 then 1 - x else x) ``\n    vertices (translation (A_Cnv e))\n    \\<subseteq> vertices (translation e)\n 3. univalent\n     (on_graph (translation (A_Cnv e))\n       (\\<lambda>x. if x < 2 then 1 - x else x))\n 4. edge_preserving\n     (on_graph (translation (A_Cnv e))\n       (\\<lambda>x. if x < 2 then 1 - x else x))\n     (edges (translation (A_Cnv e))) (edges (translation e))\n 5. graph (translation (A_Cnv e))\n 6. graph (translation e)", "show \"vertices ?G = Domain ?f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vertices (translation (A_Cnv e)) =\n    Domain\n     (on_graph (translation (A_Cnv e))\n       (\\<lambda>x. if x < 2 then 1 - x else x))", "by (auto simp:Domain_int_univ)"], ["proof (state)\nthis:\n  vertices (translation (A_Cnv e)) =\n  Domain\n   (on_graph (translation (A_Cnv e))\n     (\\<lambda>x. if x < 2 then 1 - x else x))\n\ngoal (5 subgoals):\n 1. on_graph (translation (A_Cnv e))\n     (\\<lambda>x. if x < 2 then 1 - x else x) ``\n    vertices (translation (A_Cnv e))\n    \\<subseteq> vertices (translation e)\n 2. univalent\n     (on_graph (translation (A_Cnv e))\n       (\\<lambda>x. if x < 2 then 1 - x else x))\n 3. edge_preserving\n     (on_graph (translation (A_Cnv e))\n       (\\<lambda>x. if x < 2 then 1 - x else x))\n     (edges (translation (A_Cnv e))) (edges (translation e))\n 4. graph (translation (A_Cnv e))\n 5. graph (translation e)", "show \"?f `` vertices ?G \\<subseteq> vertices (translation e)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. on_graph (translation (A_Cnv e))\n     (\\<lambda>x. if x < 2 then 1 - x else x) ``\n    vertices (translation (A_Cnv e))\n    \\<subseteq> vertices (translation e)", "using n2"], ["proof (prove)\nusing this:\n  2 \\<le> n\n\ngoal (1 subgoal):\n 1. on_graph (translation (A_Cnv e))\n     (\\<lambda>x. if x < 2 then 1 - x else x) ``\n    vertices (translation (A_Cnv e))\n    \\<subseteq> vertices (translation e)", "by auto"], ["proof (state)\nthis:\n  on_graph (translation (A_Cnv e))\n   (\\<lambda>x. if x < 2 then 1 - x else x) ``\n  vertices (translation (A_Cnv e))\n  \\<subseteq> vertices (translation e)\n\ngoal (4 subgoals):\n 1. univalent\n     (on_graph (translation (A_Cnv e))\n       (\\<lambda>x. if x < 2 then 1 - x else x))\n 2. edge_preserving\n     (on_graph (translation (A_Cnv e))\n       (\\<lambda>x. if x < 2 then 1 - x else x))\n     (edges (translation (A_Cnv e))) (edges (translation e))\n 3. graph (translation (A_Cnv e))\n 4. graph (translation e)", "show \"univalent ?f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. univalent\n     (on_graph (translation (A_Cnv e))\n       (\\<lambda>x. if x < 2 then 1 - x else x))", "by auto"], ["proof (state)\nthis:\n  univalent\n   (on_graph (translation (A_Cnv e))\n     (\\<lambda>x. if x < 2 then 1 - x else x))\n\ngoal (3 subgoals):\n 1. edge_preserving\n     (on_graph (translation (A_Cnv e))\n       (\\<lambda>x. if x < 2 then 1 - x else x))\n     (edges (translation (A_Cnv e))) (edges (translation e))\n 2. graph (translation (A_Cnv e))\n 3. graph (translation e)", "show \"edge_preserving ?f (edges (translation (A_Cnv e))) (edges (translation e))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. edge_preserving\n     (on_graph (translation (A_Cnv e))\n       (\\<lambda>x. if x < 2 then 1 - x else x))\n     (edges (translation (A_Cnv e))) (edges (translation e))", "by (rule edge_preserving_on_graphI,auto simp: BNF_Def.Gr_def)"], ["proof (state)\nthis:\n  edge_preserving\n   (on_graph (translation (A_Cnv e))\n     (\\<lambda>x. if x < 2 then 1 - x else x))\n   (edges (translation (A_Cnv e))) (edges (translation e))\n\ngoal (2 subgoals):\n 1. graph (translation (A_Cnv e))\n 2. graph (translation e)", "qed (auto intro:assms)"], ["proof (state)\nthis:\n  graph_homomorphism (translation (A_Cnv e)) G\n   (on_graph (translation (A_Cnv e))\n     (\\<lambda>x. if x < 2 then 1 - x else x) O\n    f)\n\ngoal (2 subgoals):\n 1. \\<And>e x y.\n       \\<lbrakk>\\<And>x y.\n                   (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk> \\<Longrightarrow>\n                   \\<exists>f.\n                      graph_homomorphism (translation e) G f \\<and>\n                      (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        (x, y) \\<in> :G:\\<lbrakk>A_Cnv e\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            graph_homomorphism (translation (A_Cnv e)) G\n                             f \\<and>\n                            (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 2. \\<And>x xa y.\n       (xa, y) \\<in> :G:\\<lbrakk>A_Lbl x\\<rbrakk> \\<Longrightarrow>\n       \\<exists>f.\n          graph_homomorphism (translation (A_Lbl x)) G f \\<and>\n          (0, xa) \\<in> f \\<and> (1, y) \\<in> f", "have xy:\"(0, x) \\<in> ?f O f\" \"(1, y) \\<in> ?f O f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (0, x)\n    \\<in> on_graph (translation (A_Cnv e))\n           (\\<lambda>x. if x < 2 then 1 - x else x) O\n          f &&&\n    (1, y)\n    \\<in> on_graph (translation (A_Cnv e))\n           (\\<lambda>x. if x < 2 then 1 - x else x) O\n          f", "using n2 f(2,3) n(1,2)"], ["proof (prove)\nusing this:\n  2 \\<le> n\n  (0, y) \\<in> f\n  (1, x) \\<in> f\n  vertices (translation e) = {0..<n}\n  {0..<n} \\<inter> {x. x < 2} = {1, 0}\n\ngoal (1 subgoal):\n 1. (0, x)\n    \\<in> on_graph (translation (A_Cnv e))\n           (\\<lambda>x. if x < 2 then 1 - x else x) O\n          f &&&\n    (1, y)\n    \\<in> on_graph (translation (A_Cnv e))\n           (\\<lambda>x. if x < 2 then 1 - x else x) O\n          f", "by auto"], ["proof (state)\nthis:\n  (0, x)\n  \\<in> on_graph (translation (A_Cnv e))\n         (\\<lambda>x. if x < 2 then 1 - x else x) O\n        f\n  (1, y)\n  \\<in> on_graph (translation (A_Cnv e))\n         (\\<lambda>x. if x < 2 then 1 - x else x) O\n        f\n\ngoal (2 subgoals):\n 1. \\<And>e x y.\n       \\<lbrakk>\\<And>x y.\n                   (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk> \\<Longrightarrow>\n                   \\<exists>f.\n                      graph_homomorphism (translation e) G f \\<and>\n                      (0, x) \\<in> f \\<and> (1, y) \\<in> f;\n        (x, y) \\<in> :G:\\<lbrakk>A_Cnv e\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            graph_homomorphism (translation (A_Cnv e)) G\n                             f \\<and>\n                            (0, x) \\<in> f \\<and> (1, y) \\<in> f\n 2. \\<And>x xa y.\n       (xa, y) \\<in> :G:\\<lbrakk>A_Lbl x\\<rbrakk> \\<Longrightarrow>\n       \\<exists>f.\n          graph_homomorphism (translation (A_Lbl x)) G f \\<and>\n          (0, xa) \\<in> f \\<and> (1, y) \\<in> f", "with h"], ["proof (chain)\npicking this:\n  graph_homomorphism (translation (A_Cnv e)) G\n   (on_graph (translation (A_Cnv e))\n     (\\<lambda>x. if x < 2 then 1 - x else x) O\n    f)\n  (0, x)\n  \\<in> on_graph (translation (A_Cnv e))\n         (\\<lambda>x. if x < 2 then 1 - x else x) O\n        f\n  (1, y)\n  \\<in> on_graph (translation (A_Cnv e))\n         (\\<lambda>x. if x < 2 then 1 - x else x) O\n        f", "show ?case"], ["proof (prove)\nusing this:\n  graph_homomorphism (translation (A_Cnv e)) G\n   (on_graph (translation (A_Cnv e))\n     (\\<lambda>x. if x < 2 then 1 - x else x) O\n    f)\n  (0, x)\n  \\<in> on_graph (translation (A_Cnv e))\n         (\\<lambda>x. if x < 2 then 1 - x else x) O\n        f\n  (1, y)\n  \\<in> on_graph (translation (A_Cnv e))\n         (\\<lambda>x. if x < 2 then 1 - x else x) O\n        f\n\ngoal (1 subgoal):\n 1. \\<exists>f.\n       graph_homomorphism (translation (A_Cnv e)) G f \\<and>\n       (0, x) \\<in> f \\<and> (1, y) \\<in> f", "by auto"], ["proof (state)\nthis:\n  \\<exists>f.\n     graph_homomorphism (translation (A_Cnv e)) G f \\<and>\n     (0, x) \\<in> f \\<and> (1, y) \\<in> f\n\ngoal (1 subgoal):\n 1. \\<And>x xa y.\n       (xa, y) \\<in> :G:\\<lbrakk>A_Lbl x\\<rbrakk> \\<Longrightarrow>\n       \\<exists>f.\n          graph_homomorphism (translation (A_Lbl x)) G f \\<and>\n          (0, xa) \\<in> f \\<and> (1, y) \\<in> f", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xa y.\n       (xa, y) \\<in> :G:\\<lbrakk>A_Lbl x\\<rbrakk> \\<Longrightarrow>\n       \\<exists>f.\n          graph_homomorphism (translation (A_Lbl x)) G f \\<and>\n          (0, xa) \\<in> f \\<and> (1, y) \\<in> f", "case (A_Lbl l)"], ["proof (state)\nthis:\n  (x, y) \\<in> :G:\\<lbrakk>A_Lbl l\\<rbrakk>\n\ngoal (1 subgoal):\n 1. \\<And>x xa y.\n       (xa, y) \\<in> :G:\\<lbrakk>A_Lbl x\\<rbrakk> \\<Longrightarrow>\n       \\<exists>f.\n          graph_homomorphism (translation (A_Lbl x)) G f \\<and>\n          (0, xa) \\<in> f \\<and> (1, y) \\<in> f", "let ?f = \"{(0,x),(1,y)}\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xa y.\n       (xa, y) \\<in> :G:\\<lbrakk>A_Lbl x\\<rbrakk> \\<Longrightarrow>\n       \\<exists>f.\n          graph_homomorphism (translation (A_Lbl x)) G f \\<and>\n          (0, xa) \\<in> f \\<and> (1, y) \\<in> f", "have xy:\"x \\<in> vertices G\" \"y \\<in> vertices G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> vertices G &&& y \\<in> vertices G", "using assms A_Lbl"], ["proof (prove)\nusing this:\n  graph G\n  (x, y) \\<in> :G:\\<lbrakk>A_Lbl l\\<rbrakk>\n\ngoal (1 subgoal):\n 1. x \\<in> vertices G &&& y \\<in> vertices G", "by (auto simp:getRel_def)"], ["proof (state)\nthis:\n  x \\<in> vertices G\n  y \\<in> vertices G\n\ngoal (1 subgoal):\n 1. \\<And>x xa y.\n       (xa, y) \\<in> :G:\\<lbrakk>A_Lbl x\\<rbrakk> \\<Longrightarrow>\n       \\<exists>f.\n          graph_homomorphism (translation (A_Lbl x)) G f \\<and>\n          (0, xa) \\<in> f \\<and> (1, y) \\<in> f", "have \"graph_homomorphism (translation (A_Lbl l)) G ?f \\<and> (0, x) \\<in> ?f \\<and> (1, y) \\<in> ?f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. graph_homomorphism (translation (A_Lbl l)) G {(0, x), (1, y)} \\<and>\n    (0::'c, x) \\<in> {(0::'c, x), (1::'c, y)} \\<and>\n    (1::'d, y) \\<in> {(0::'d, x), (1::'d, y)}", "using assms A_Lbl xy"], ["proof (prove)\nusing this:\n  graph G\n  (x, y) \\<in> :G:\\<lbrakk>A_Lbl l\\<rbrakk>\n  x \\<in> vertices G\n  y \\<in> vertices G\n\ngoal (1 subgoal):\n 1. graph_homomorphism (translation (A_Lbl l)) G {(0, x), (1, y)} \\<and>\n    (0::'c, x) \\<in> {(0::'c, x), (1::'c, y)} \\<and>\n    (1::'d, y) \\<in> {(0::'d, x), (1::'d, y)}", "unfolding graph_homomorphism_def2"], ["proof (prove)\nusing this:\n  graph G\n  (x, y) \\<in> :G:\\<lbrakk>A_Lbl l\\<rbrakk>\n  x \\<in> vertices G\n  y \\<in> vertices G\n\ngoal (1 subgoal):\n 1. (vertices (translation (A_Lbl l)) = Domain {(0, x), (1, y)} \\<and>\n     univalent {(0, x), (1, y)} \\<and>\n     graph (translation (A_Lbl l)) \\<and>\n     graph G \\<and>\n     graph_union (map_graph {(0, x), (1, y)} (translation (A_Lbl l))) G =\n     G) \\<and>\n    (0::'c, x) \\<in> {(0::'c, x), (1::'c, y)} \\<and>\n    (1::'d, y) \\<in> {(0::'d, x), (1::'d, y)}", "by (auto simp:univalent_def getRel_def on_triple_def Image_def graph_union_def insert_absorb)"], ["proof (state)\nthis:\n  graph_homomorphism (translation (A_Lbl l)) G {(0, x), (1, y)} \\<and>\n  (0::?'c2, x) \\<in> {(0::?'c2, x), (1::?'c2, y)} \\<and>\n  (1::?'d2, y) \\<in> {(0::?'d2, x), (1::?'d2, y)}\n\ngoal (1 subgoal):\n 1. \\<And>x xa y.\n       (xa, y) \\<in> :G:\\<lbrakk>A_Lbl x\\<rbrakk> \\<Longrightarrow>\n       \\<exists>f.\n          graph_homomorphism (translation (A_Lbl x)) G f \\<and>\n          (0, xa) \\<in> f \\<and> (1, y) \\<in> f", "then"], ["proof (chain)\npicking this:\n  graph_homomorphism (translation (A_Lbl l)) G {(0, x), (1, y)} \\<and>\n  (0::?'c2, x) \\<in> {(0::?'c2, x), (1::?'c2, y)} \\<and>\n  (1::?'d2, y) \\<in> {(0::?'d2, x), (1::?'d2, y)}", "show ?case"], ["proof (prove)\nusing this:\n  graph_homomorphism (translation (A_Lbl l)) G {(0, x), (1, y)} \\<and>\n  (0::?'c2, x) \\<in> {(0::?'c2, x), (1::?'c2, y)} \\<and>\n  (1::?'d2, y) \\<in> {(0::?'d2, x), (1::?'d2, y)}\n\ngoal (1 subgoal):\n 1. \\<exists>f.\n       graph_homomorphism (translation (A_Lbl l)) G f \\<and>\n       (0, x) \\<in> f \\<and> (1, y) \\<in> f", "by auto"], ["proof (state)\nthis:\n  \\<exists>f.\n     graph_homomorphism (translation (A_Lbl l)) G f \\<and>\n     (0, x) \\<in> f \\<and> (1, y) \\<in> f\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>f.\n     graph_homomorphism (translation e) G f \\<and>\n     (0, x) \\<in> f \\<and> (1, y) \\<in> f\n\ngoal (1 subgoal):\n 1. \\<exists>f.\n       graph_homomorphism (translation e) G f \\<and>\n       (0, x) \\<in> f \\<and> (1, y) \\<in> f \\<Longrightarrow>\n    (x, y) \\<in> :G:\\<lbrakk>e\\<rbrakk>", "qed (insert translation_right_to_left,auto)"], ["", "abbreviation transl_rule ::\n    \"'a sentence \\<Rightarrow> ('a, nat) labeled_graph \\<times> ('a, nat) labeled_graph\" where\n\"transl_rule R \\<equiv> (translation (fst R),translation (snd R))\""], ["", "text \\<open>Lemma 6.\\<close>"], ["", "lemma maintained_holds_iff:\n  assumes \"graph G\"\n  shows \"maintained (translation e\\<^sub>L,translation (A_Int e\\<^sub>L e\\<^sub>R)) G \\<longleftrightarrow> G \\<Turnstile> e\\<^sub>L \\<sqsubseteq> e\\<^sub>R\" (is \"?rhs = ?lhs\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. maintained\n     (translation e\\<^sub>L, translation (A_Int e\\<^sub>L e\\<^sub>R)) G =\n    G \\<Turnstile> e\\<^sub>L \\<sqsubseteq> e\\<^sub>R", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. maintained\n     (translation e\\<^sub>L, translation (A_Int e\\<^sub>L e\\<^sub>R))\n     G \\<Longrightarrow>\n    G \\<Turnstile> e\\<^sub>L \\<sqsubseteq> e\\<^sub>R\n 2. G \\<Turnstile> e\\<^sub>L \\<sqsubseteq> e\\<^sub>R \\<Longrightarrow>\n    maintained\n     (translation e\\<^sub>L, translation (A_Int e\\<^sub>L e\\<^sub>R)) G", "assume lhs:?lhs"], ["proof (state)\nthis:\n  G \\<Turnstile> e\\<^sub>L \\<sqsubseteq> e\\<^sub>R\n\ngoal (2 subgoals):\n 1. maintained\n     (translation e\\<^sub>L, translation (A_Int e\\<^sub>L e\\<^sub>R))\n     G \\<Longrightarrow>\n    G \\<Turnstile> e\\<^sub>L \\<sqsubseteq> e\\<^sub>R\n 2. G \\<Turnstile> e\\<^sub>L \\<sqsubseteq> e\\<^sub>R \\<Longrightarrow>\n    maintained\n     (translation e\\<^sub>L, translation (A_Int e\\<^sub>L e\\<^sub>R)) G", "show ?rhs"], ["proof (prove)\ngoal (1 subgoal):\n 1. maintained\n     (translation e\\<^sub>L, translation (A_Int e\\<^sub>L e\\<^sub>R)) G", "unfolding maintained_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>f.\n       graph_homomorphism\n        (fst (translation e\\<^sub>L,\n              translation (A_Int e\\<^sub>L e\\<^sub>R)))\n        G f \\<longrightarrow>\n       extensible\n        (translation e\\<^sub>L, translation (A_Int e\\<^sub>L e\\<^sub>R)) G f", "proof(clarify)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       graph_homomorphism\n        (fst (translation e\\<^sub>L,\n              translation (A_Int e\\<^sub>L e\\<^sub>R)))\n        G f \\<Longrightarrow>\n       extensible\n        (translation e\\<^sub>L, translation (A_Int e\\<^sub>L e\\<^sub>R)) G f", "fix f"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       graph_homomorphism\n        (fst (translation e\\<^sub>L,\n              translation (A_Int e\\<^sub>L e\\<^sub>R)))\n        G f \\<Longrightarrow>\n       extensible\n        (translation e\\<^sub>L, translation (A_Int e\\<^sub>L e\\<^sub>R)) G f", "assume f:\"graph_homomorphism (fst (translation e\\<^sub>L, translation (A_Int e\\<^sub>L e\\<^sub>R))) G f\""], ["proof (state)\nthis:\n  graph_homomorphism\n   (fst (translation e\\<^sub>L, translation (A_Int e\\<^sub>L e\\<^sub>R))) G\n   f\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       graph_homomorphism\n        (fst (translation e\\<^sub>L,\n              translation (A_Int e\\<^sub>L e\\<^sub>R)))\n        G f \\<Longrightarrow>\n       extensible\n        (translation e\\<^sub>L, translation (A_Int e\\<^sub>L e\\<^sub>R)) G f", "then"], ["proof (chain)\npicking this:\n  graph_homomorphism\n   (fst (translation e\\<^sub>L, translation (A_Int e\\<^sub>L e\\<^sub>R))) G\n   f", "obtain x y where f2:\"(0,x) \\<in> f\" \"(1,y) \\<in> f\""], ["proof (prove)\nusing this:\n  graph_homomorphism\n   (fst (translation e\\<^sub>L, translation (A_Int e\\<^sub>L e\\<^sub>R))) G\n   f\n\ngoal (1 subgoal):\n 1. (\\<And>x y.\n        \\<lbrakk>(0, x) \\<in> f; (1, y) \\<in> f\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding graph_homomorphism_def"], ["proof (prove)\nusing this:\n  vertices\n   (fst (translation e\\<^sub>L, translation (A_Int e\\<^sub>L e\\<^sub>R))) =\n  Domain f \\<and>\n  graph\n   (fst (translation e\\<^sub>L,\n         translation (A_Int e\\<^sub>L e\\<^sub>R))) \\<and>\n  graph G \\<and>\n  f ``\n  vertices\n   (fst (translation e\\<^sub>L, translation (A_Int e\\<^sub>L e\\<^sub>R)))\n  \\<subseteq> vertices G \\<and>\n  univalent f \\<and>\n  edge_preserving f\n   (edges\n     (fst (translation e\\<^sub>L, translation (A_Int e\\<^sub>L e\\<^sub>R))))\n   (edges G)\n\ngoal (1 subgoal):\n 1. (\\<And>x y.\n        \\<lbrakk>(0, x) \\<in> f; (1, y) \\<in> f\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis DomainE One_nat_def prod.sel(1) verts_in_translation_finite(3,4))"], ["proof (state)\nthis:\n  (0, x) \\<in> f\n  (1, y) \\<in> f\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       graph_homomorphism\n        (fst (translation e\\<^sub>L,\n              translation (A_Int e\\<^sub>L e\\<^sub>R)))\n        G f \\<Longrightarrow>\n       extensible\n        (translation e\\<^sub>L, translation (A_Int e\\<^sub>L e\\<^sub>R)) G f", "with f"], ["proof (chain)\npicking this:\n  graph_homomorphism\n   (fst (translation e\\<^sub>L, translation (A_Int e\\<^sub>L e\\<^sub>R))) G\n   f\n  (0, x) \\<in> f\n  (1, y) \\<in> f", "have \"(x,y) \\<in> :G:\\<lbrakk>fst (e\\<^sub>L \\<sqsubseteq> e\\<^sub>R)\\<rbrakk>\""], ["proof (prove)\nusing this:\n  graph_homomorphism\n   (fst (translation e\\<^sub>L, translation (A_Int e\\<^sub>L e\\<^sub>R))) G\n   f\n  (0, x) \\<in> f\n  (1, y) \\<in> f\n\ngoal (1 subgoal):\n 1. (x, y)\n    \\<in> :G:\\<lbrakk>fst (e\\<^sub>L \\<sqsubseteq> e\\<^sub>R)\\<rbrakk>", "unfolding translation[OF assms]"], ["proof (prove)\nusing this:\n  graph_homomorphism\n   (fst (translation e\\<^sub>L, translation (A_Int e\\<^sub>L e\\<^sub>R))) G\n   f\n  (0, x) \\<in> f\n  (1, y) \\<in> f\n\ngoal (1 subgoal):\n 1. \\<exists>f.\n       graph_homomorphism\n        (translation (fst (e\\<^sub>L \\<sqsubseteq> e\\<^sub>R))) G f \\<and>\n       (0, x) \\<in> f \\<and> (1, y) \\<in> f", "by auto"], ["proof (state)\nthis:\n  (x, y) \\<in> :G:\\<lbrakk>fst (e\\<^sub>L \\<sqsubseteq> e\\<^sub>R)\\<rbrakk>\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       graph_homomorphism\n        (fst (translation e\\<^sub>L,\n              translation (A_Int e\\<^sub>L e\\<^sub>R)))\n        G f \\<Longrightarrow>\n       extensible\n        (translation e\\<^sub>L, translation (A_Int e\\<^sub>L e\\<^sub>R)) G f", "with lhs"], ["proof (chain)\npicking this:\n  G \\<Turnstile> e\\<^sub>L \\<sqsubseteq> e\\<^sub>R\n  (x, y) \\<in> :G:\\<lbrakk>fst (e\\<^sub>L \\<sqsubseteq> e\\<^sub>R)\\<rbrakk>", "have \"(x,y) \\<in> :G:\\<lbrakk>snd (e\\<^sub>L \\<sqsubseteq> e\\<^sub>R)\\<rbrakk>\""], ["proof (prove)\nusing this:\n  G \\<Turnstile> e\\<^sub>L \\<sqsubseteq> e\\<^sub>R\n  (x, y) \\<in> :G:\\<lbrakk>fst (e\\<^sub>L \\<sqsubseteq> e\\<^sub>R)\\<rbrakk>\n\ngoal (1 subgoal):\n 1. (x, y)\n    \\<in> :G:\\<lbrakk>snd (e\\<^sub>L \\<sqsubseteq> e\\<^sub>R)\\<rbrakk>", "by auto"], ["proof (state)\nthis:\n  (x, y) \\<in> :G:\\<lbrakk>snd (e\\<^sub>L \\<sqsubseteq> e\\<^sub>R)\\<rbrakk>\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       graph_homomorphism\n        (fst (translation e\\<^sub>L,\n              translation (A_Int e\\<^sub>L e\\<^sub>R)))\n        G f \\<Longrightarrow>\n       extensible\n        (translation e\\<^sub>L, translation (A_Int e\\<^sub>L e\\<^sub>R)) G f", "then"], ["proof (chain)\npicking this:\n  (x, y) \\<in> :G:\\<lbrakk>snd (e\\<^sub>L \\<sqsubseteq> e\\<^sub>R)\\<rbrakk>", "obtain g where g: \"graph_homomorphism (translation (A_Int e\\<^sub>L e\\<^sub>R)) G g\"\n                   and g2: \"(0, x) \\<in> g\" \"(1, y) \\<in> g\""], ["proof (prove)\nusing this:\n  (x, y) \\<in> :G:\\<lbrakk>snd (e\\<^sub>L \\<sqsubseteq> e\\<^sub>R)\\<rbrakk>\n\ngoal (1 subgoal):\n 1. (\\<And>g.\n        \\<lbrakk>graph_homomorphism\n                  (translation (A_Int e\\<^sub>L e\\<^sub>R)) G g;\n         (0, x) \\<in> g; (1, y) \\<in> g\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding translation[OF assms]"], ["proof (prove)\nusing this:\n  \\<exists>f.\n     graph_homomorphism\n      (translation (snd (e\\<^sub>L \\<sqsubseteq> e\\<^sub>R))) G f \\<and>\n     (0, x) \\<in> f \\<and> (1, y) \\<in> f\n\ngoal (1 subgoal):\n 1. (\\<And>g.\n        \\<lbrakk>graph_homomorphism\n                  (translation (A_Int e\\<^sub>L e\\<^sub>R)) G g;\n         (0, x) \\<in> g; (1, y) \\<in> g\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  graph_homomorphism (translation (A_Int e\\<^sub>L e\\<^sub>R)) G g\n  (0, x) \\<in> g\n  (1, y) \\<in> g\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       graph_homomorphism\n        (fst (translation e\\<^sub>L,\n              translation (A_Int e\\<^sub>L e\\<^sub>R)))\n        G f \\<Longrightarrow>\n       extensible\n        (translation e\\<^sub>L, translation (A_Int e\\<^sub>L e\\<^sub>R)) G f", "have v:\"vertices (translation (A_Int e\\<^sub>L e\\<^sub>R)) = Domain g\"\n           \"vertices (translation e\\<^sub>L) = Domain f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vertices (translation (A_Int e\\<^sub>L e\\<^sub>R)) = Domain g &&&\n    vertices (translation e\\<^sub>L) = Domain f", "using f g"], ["proof (prove)\nusing this:\n  graph_homomorphism\n   (fst (translation e\\<^sub>L, translation (A_Int e\\<^sub>L e\\<^sub>R))) G\n   f\n  graph_homomorphism (translation (A_Int e\\<^sub>L e\\<^sub>R)) G g\n\ngoal (1 subgoal):\n 1. vertices (translation (A_Int e\\<^sub>L e\\<^sub>R)) = Domain g &&&\n    vertices (translation e\\<^sub>L) = Domain f", "unfolding graph_homomorphism_def"], ["proof (prove)\nusing this:\n  vertices\n   (fst (translation e\\<^sub>L, translation (A_Int e\\<^sub>L e\\<^sub>R))) =\n  Domain f \\<and>\n  graph\n   (fst (translation e\\<^sub>L,\n         translation (A_Int e\\<^sub>L e\\<^sub>R))) \\<and>\n  graph G \\<and>\n  f ``\n  vertices\n   (fst (translation e\\<^sub>L, translation (A_Int e\\<^sub>L e\\<^sub>R)))\n  \\<subseteq> vertices G \\<and>\n  univalent f \\<and>\n  edge_preserving f\n   (edges\n     (fst (translation e\\<^sub>L, translation (A_Int e\\<^sub>L e\\<^sub>R))))\n   (edges G)\n  vertices (translation (A_Int e\\<^sub>L e\\<^sub>R)) = Domain g \\<and>\n  graph (translation (A_Int e\\<^sub>L e\\<^sub>R)) \\<and>\n  graph G \\<and>\n  g `` vertices (translation (A_Int e\\<^sub>L e\\<^sub>R))\n  \\<subseteq> vertices G \\<and>\n  univalent g \\<and>\n  edge_preserving g (edges (translation (A_Int e\\<^sub>L e\\<^sub>R)))\n   (edges G)\n\ngoal (1 subgoal):\n 1. vertices (translation (A_Int e\\<^sub>L e\\<^sub>R)) = Domain g &&&\n    vertices (translation e\\<^sub>L) = Domain f", "by auto"], ["proof (state)\nthis:\n  vertices (translation (A_Int e\\<^sub>L e\\<^sub>R)) = Domain g\n  vertices (translation e\\<^sub>L) = Domain f\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       graph_homomorphism\n        (fst (translation e\\<^sub>L,\n              translation (A_Int e\\<^sub>L e\\<^sub>R)))\n        G f \\<Longrightarrow>\n       extensible\n        (translation e\\<^sub>L, translation (A_Int e\\<^sub>L e\\<^sub>R)) G f", "from subgraph_subset[of \"translation e\\<^sub>L\" \"translation (A_Int e\\<^sub>L e\\<^sub>R)\"]\n         graph_rule_translation[of e\\<^sub>L e\\<^sub>R]"], ["proof (chain)\npicking this:\n  subgraph (translation e\\<^sub>L)\n   (translation (A_Int e\\<^sub>L e\\<^sub>R)) \\<Longrightarrow>\n  vertices (translation e\\<^sub>L)\n  \\<subseteq> vertices (translation (A_Int e\\<^sub>L e\\<^sub>R))\n  subgraph (translation e\\<^sub>L)\n   (translation (A_Int e\\<^sub>L e\\<^sub>R)) \\<Longrightarrow>\n  edges (restrict (translation e\\<^sub>L))\n  \\<subseteq> edges (translation (A_Int e\\<^sub>L e\\<^sub>R))\n  graph_rule\n   (translation e\\<^sub>L, translation (A_Int e\\<^sub>L e\\<^sub>R))", "have dom_sub: \"Domain f \\<subseteq> Domain g\""], ["proof (prove)\nusing this:\n  subgraph (translation e\\<^sub>L)\n   (translation (A_Int e\\<^sub>L e\\<^sub>R)) \\<Longrightarrow>\n  vertices (translation e\\<^sub>L)\n  \\<subseteq> vertices (translation (A_Int e\\<^sub>L e\\<^sub>R))\n  subgraph (translation e\\<^sub>L)\n   (translation (A_Int e\\<^sub>L e\\<^sub>R)) \\<Longrightarrow>\n  edges (restrict (translation e\\<^sub>L))\n  \\<subseteq> edges (translation (A_Int e\\<^sub>L e\\<^sub>R))\n  graph_rule\n   (translation e\\<^sub>L, translation (A_Int e\\<^sub>L e\\<^sub>R))\n\ngoal (1 subgoal):\n 1. Domain f \\<subseteq> Domain g", "using v"], ["proof (prove)\nusing this:\n  subgraph (translation e\\<^sub>L)\n   (translation (A_Int e\\<^sub>L e\\<^sub>R)) \\<Longrightarrow>\n  vertices (translation e\\<^sub>L)\n  \\<subseteq> vertices (translation (A_Int e\\<^sub>L e\\<^sub>R))\n  subgraph (translation e\\<^sub>L)\n   (translation (A_Int e\\<^sub>L e\\<^sub>R)) \\<Longrightarrow>\n  edges (restrict (translation e\\<^sub>L))\n  \\<subseteq> edges (translation (A_Int e\\<^sub>L e\\<^sub>R))\n  graph_rule\n   (translation e\\<^sub>L, translation (A_Int e\\<^sub>L e\\<^sub>R))\n  vertices (translation (A_Int e\\<^sub>L e\\<^sub>R)) = Domain g\n  vertices (translation e\\<^sub>L) = Domain f\n\ngoal (1 subgoal):\n 1. Domain f \\<subseteq> Domain g", "unfolding prod.sel"], ["proof (prove)\nusing this:\n  subgraph (translation e\\<^sub>L)\n   (translation (A_Int e\\<^sub>L e\\<^sub>R)) \\<Longrightarrow>\n  vertices (translation e\\<^sub>L)\n  \\<subseteq> vertices (translation (A_Int e\\<^sub>L e\\<^sub>R))\n  subgraph (translation e\\<^sub>L)\n   (translation (A_Int e\\<^sub>L e\\<^sub>R)) \\<Longrightarrow>\n  edges (restrict (translation e\\<^sub>L))\n  \\<subseteq> edges (translation (A_Int e\\<^sub>L e\\<^sub>R))\n  subgraph (translation e\\<^sub>L)\n   (translation (A_Int e\\<^sub>L e\\<^sub>R)) \\<and>\n  finite_graph (translation (A_Int e\\<^sub>L e\\<^sub>R))\n  vertices (translation (A_Int e\\<^sub>L e\\<^sub>R)) = Domain g\n  vertices (translation e\\<^sub>L) = Domain f\n\ngoal (1 subgoal):\n 1. Domain f \\<subseteq> Domain g", "by argo"], ["proof (state)\nthis:\n  Domain f \\<subseteq> Domain g\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       graph_homomorphism\n        (fst (translation e\\<^sub>L,\n              translation (A_Int e\\<^sub>L e\\<^sub>R)))\n        G f \\<Longrightarrow>\n       extensible\n        (translation e\\<^sub>L, translation (A_Int e\\<^sub>L e\\<^sub>R)) G f", "hence dom_le:\"card (Domain f) \\<le> card (Domain g)\""], ["proof (prove)\nusing this:\n  Domain f \\<subseteq> Domain g\n\ngoal (1 subgoal):\n 1. card (Domain f) \\<le> card (Domain g)", "by (metis card.infinite card_mono inv_tr_card_min not_less rel_simps(51) v(1) verts_in_translation)"], ["proof (state)\nthis:\n  card (Domain f) \\<le> card (Domain g)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       graph_homomorphism\n        (fst (translation e\\<^sub>L,\n              translation (A_Int e\\<^sub>L e\\<^sub>R)))\n        G f \\<Longrightarrow>\n       extensible\n        (translation e\\<^sub>L, translation (A_Int e\\<^sub>L e\\<^sub>R)) G f", "have c_f:\"card (Domain f) \\<ge> 2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 2 \\<le> card (Domain f)", "using inv_tr_card_min[OF verts_in_translation] v"], ["proof (prove)\nusing this:\n  2 \\<le> card (vertices (translation ?X1))\n  vertices (translation (A_Int e\\<^sub>L e\\<^sub>R)) = Domain g\n  vertices (translation e\\<^sub>L) = Domain f\n\ngoal (1 subgoal):\n 1. 2 \\<le> card (Domain f)", "by metis"], ["proof (state)\nthis:\n  2 \\<le> card (Domain f)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       graph_homomorphism\n        (fst (translation e\\<^sub>L,\n              translation (A_Int e\\<^sub>L e\\<^sub>R)))\n        G f \\<Longrightarrow>\n       extensible\n        (translation e\\<^sub>L, translation (A_Int e\\<^sub>L e\\<^sub>R)) G f", "from f[unfolded graph_homomorphism_def]"], ["proof (chain)\npicking this:\n  vertices\n   (fst (translation e\\<^sub>L, translation (A_Int e\\<^sub>L e\\<^sub>R))) =\n  Domain f \\<and>\n  graph\n   (fst (translation e\\<^sub>L,\n         translation (A_Int e\\<^sub>L e\\<^sub>R))) \\<and>\n  graph G \\<and>\n  f ``\n  vertices\n   (fst (translation e\\<^sub>L, translation (A_Int e\\<^sub>L e\\<^sub>R)))\n  \\<subseteq> vertices G \\<and>\n  univalent f \\<and>\n  edge_preserving f\n   (edges\n     (fst (translation e\\<^sub>L, translation (A_Int e\\<^sub>L e\\<^sub>R))))\n   (edges G)", "have ep_f:\"edge_preserving f (edges (translation e\\<^sub>L)) (edges G)\"\n     and uni_f:\"univalent f\""], ["proof (prove)\nusing this:\n  vertices\n   (fst (translation e\\<^sub>L, translation (A_Int e\\<^sub>L e\\<^sub>R))) =\n  Domain f \\<and>\n  graph\n   (fst (translation e\\<^sub>L,\n         translation (A_Int e\\<^sub>L e\\<^sub>R))) \\<and>\n  graph G \\<and>\n  f ``\n  vertices\n   (fst (translation e\\<^sub>L, translation (A_Int e\\<^sub>L e\\<^sub>R)))\n  \\<subseteq> vertices G \\<and>\n  univalent f \\<and>\n  edge_preserving f\n   (edges\n     (fst (translation e\\<^sub>L, translation (A_Int e\\<^sub>L e\\<^sub>R))))\n   (edges G)\n\ngoal (1 subgoal):\n 1. edge_preserving f (edges (translation e\\<^sub>L)) (edges G) &&&\n    univalent f", "by auto"], ["proof (state)\nthis:\n  edge_preserving f (edges (translation e\\<^sub>L)) (edges G)\n  univalent f\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       graph_homomorphism\n        (fst (translation e\\<^sub>L,\n              translation (A_Int e\\<^sub>L e\\<^sub>R)))\n        G f \\<Longrightarrow>\n       extensible\n        (translation e\\<^sub>L, translation (A_Int e\\<^sub>L e\\<^sub>R)) G f", "let ?f = \"(\\<lambda>x. if x < 2 then x else x + card (vertices (translation e\\<^sub>L)) - 2)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       graph_homomorphism\n        (fst (translation e\\<^sub>L,\n              translation (A_Int e\\<^sub>L e\\<^sub>R)))\n        G f \\<Longrightarrow>\n       extensible\n        (translation e\\<^sub>L, translation (A_Int e\\<^sub>L e\\<^sub>R)) G f", "define GR where \"GR = map_graph_fn (translation e\\<^sub>R) ?f\""], ["proof (state)\nthis:\n  GR =\n  map_graph_fn (translation e\\<^sub>R)\n   (\\<lambda>x.\n       if x < 2 then x else x + card (vertices (translation e\\<^sub>L)) - 2)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       graph_homomorphism\n        (fst (translation e\\<^sub>L,\n              translation (A_Int e\\<^sub>L e\\<^sub>R)))\n        G f \\<Longrightarrow>\n       extensible\n        (translation e\\<^sub>L, translation (A_Int e\\<^sub>L e\\<^sub>R)) G f", "from g[unfolded graph_homomorphism_def]"], ["proof (chain)\npicking this:\n  vertices (translation (A_Int e\\<^sub>L e\\<^sub>R)) = Domain g \\<and>\n  graph (translation (A_Int e\\<^sub>L e\\<^sub>R)) \\<and>\n  graph G \\<and>\n  g `` vertices (translation (A_Int e\\<^sub>L e\\<^sub>R))\n  \\<subseteq> vertices G \\<and>\n  univalent g \\<and>\n  edge_preserving g (edges (translation (A_Int e\\<^sub>L e\\<^sub>R)))\n   (edges G)", "have \"edge_preserving g (edges (translation (A_Int e\\<^sub>L e\\<^sub>R))) (edges G)\"\n     and uni_g:\"univalent g\""], ["proof (prove)\nusing this:\n  vertices (translation (A_Int e\\<^sub>L e\\<^sub>R)) = Domain g \\<and>\n  graph (translation (A_Int e\\<^sub>L e\\<^sub>R)) \\<and>\n  graph G \\<and>\n  g `` vertices (translation (A_Int e\\<^sub>L e\\<^sub>R))\n  \\<subseteq> vertices G \\<and>\n  univalent g \\<and>\n  edge_preserving g (edges (translation (A_Int e\\<^sub>L e\\<^sub>R)))\n   (edges G)\n\ngoal (1 subgoal):\n 1. edge_preserving g (edges (translation (A_Int e\\<^sub>L e\\<^sub>R)))\n     (edges G) &&&\n    univalent g", "by auto"], ["proof (state)\nthis:\n  edge_preserving g (edges (translation (A_Int e\\<^sub>L e\\<^sub>R)))\n   (edges G)\n  univalent g\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       graph_homomorphism\n        (fst (translation e\\<^sub>L,\n              translation (A_Int e\\<^sub>L e\\<^sub>R)))\n        G f \\<Longrightarrow>\n       extensible\n        (translation e\\<^sub>L, translation (A_Int e\\<^sub>L e\\<^sub>R)) G f", "from edge_preserving_subset[OF subset_refl _ this(1)]"], ["proof (chain)\npicking this:\n  ?E\\<^sub>1\n  \\<subseteq> edges\n               (translation (A_Int e\\<^sub>L e\\<^sub>R)) \\<Longrightarrow>\n  edge_preserving g ?E\\<^sub>1 (edges G)", "have ep_g:\"edge_preserving g (edges GR) (edges G)\""], ["proof (prove)\nusing this:\n  ?E\\<^sub>1\n  \\<subseteq> edges\n               (translation (A_Int e\\<^sub>L e\\<^sub>R)) \\<Longrightarrow>\n  edge_preserving g ?E\\<^sub>1 (edges G)\n\ngoal (1 subgoal):\n 1. edge_preserving g (edges GR) (edges G)", "by (auto simp:Let_def GR_def)"], ["proof (state)\nthis:\n  edge_preserving g (edges GR) (edges G)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       graph_homomorphism\n        (fst (translation e\\<^sub>L,\n              translation (A_Int e\\<^sub>L e\\<^sub>R)))\n        G f \\<Longrightarrow>\n       extensible\n        (translation e\\<^sub>L, translation (A_Int e\\<^sub>L e\\<^sub>R)) G f", "{"], ["proof (state)\nthis:\n  edge_preserving g (edges GR) (edges G)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       graph_homomorphism\n        (fst (translation e\\<^sub>L,\n              translation (A_Int e\\<^sub>L e\\<^sub>R)))\n        G f \\<Longrightarrow>\n       extensible\n        (translation e\\<^sub>L, translation (A_Int e\\<^sub>L e\\<^sub>R)) G f", "fix a"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       graph_homomorphism\n        (fst (translation e\\<^sub>L,\n              translation (A_Int e\\<^sub>L e\\<^sub>R)))\n        G f \\<Longrightarrow>\n       extensible\n        (translation e\\<^sub>L, translation (A_Int e\\<^sub>L e\\<^sub>R)) G f", "assume a:\"a \\<in> vertices (translation e\\<^sub>R)\""], ["proof (state)\nthis:\n  a \\<in> vertices (translation e\\<^sub>R)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       graph_homomorphism\n        (fst (translation e\\<^sub>L,\n              translation (A_Int e\\<^sub>L e\\<^sub>R)))\n        G f \\<Longrightarrow>\n       extensible\n        (translation e\\<^sub>L, translation (A_Int e\\<^sub>L e\\<^sub>R)) G f", "hence \"?f a \\<in> vertices (translation (A_Int e\\<^sub>L e\\<^sub>R))\""], ["proof (prove)\nusing this:\n  a \\<in> vertices (translation e\\<^sub>R)\n\ngoal (1 subgoal):\n 1. (if a < 2 then a else a + card (vertices (translation e\\<^sub>L)) - 2)\n    \\<in> vertices (translation (A_Int e\\<^sub>L e\\<^sub>R))", "by (auto simp:Let_def)"], ["proof (state)\nthis:\n  (if a < 2 then a else a + card (vertices (translation e\\<^sub>L)) - 2)\n  \\<in> vertices (translation (A_Int e\\<^sub>L e\\<^sub>R))\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       graph_homomorphism\n        (fst (translation e\\<^sub>L,\n              translation (A_Int e\\<^sub>L e\\<^sub>R)))\n        G f \\<Longrightarrow>\n       extensible\n        (translation e\\<^sub>L, translation (A_Int e\\<^sub>L e\\<^sub>R)) G f", "from this[unfolded v] verts_in_translation[of \"A_Int e\\<^sub>L e\\<^sub>R\",unfolded inv_translation_def v]"], ["proof (chain)\npicking this:\n  (if a < 2 then a else a + card (Domain f) - 2) \\<in> Domain g\n  {0..<card (Domain g)} = Domain g \\<and> {0, 1} \\<subseteq> Domain g", "have \"\\<not> a < 2 \\<Longrightarrow> a + card (Domain f) - 2 < card (Domain g)\""], ["proof (prove)\nusing this:\n  (if a < 2 then a else a + card (Domain f) - 2) \\<in> Domain g\n  {0..<card (Domain g)} = Domain g \\<and> {0, 1} \\<subseteq> Domain g\n\ngoal (1 subgoal):\n 1. \\<not> a < 2 \\<Longrightarrow> a + card (Domain f) - 2 < card (Domain g)", "by auto"], ["proof (state)\nthis:\n  \\<not> a < 2 \\<Longrightarrow> a + card (Domain f) - 2 < card (Domain g)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       graph_homomorphism\n        (fst (translation e\\<^sub>L,\n              translation (A_Int e\\<^sub>L e\\<^sub>R)))\n        G f \\<Longrightarrow>\n       extensible\n        (translation e\\<^sub>L, translation (A_Int e\\<^sub>L e\\<^sub>R)) G f", "}"], ["proof (state)\nthis:\n  \\<lbrakk>?a2 \\<in> vertices (translation e\\<^sub>R);\n   \\<not> ?a2 < 2\\<rbrakk>\n  \\<Longrightarrow> ?a2 + card (Domain f) - 2 < card (Domain g)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       graph_homomorphism\n        (fst (translation e\\<^sub>L,\n              translation (A_Int e\\<^sub>L e\\<^sub>R)))\n        G f \\<Longrightarrow>\n       extensible\n        (translation e\\<^sub>L, translation (A_Int e\\<^sub>L e\\<^sub>R)) G f", "note[intro!] = this"], ["proof (state)\nthis:\n  \\<lbrakk>?a2 \\<in> vertices (translation e\\<^sub>R);\n   \\<not> ?a2 < 2\\<rbrakk>\n  \\<Longrightarrow> ?a2 + card (Domain f) - 2 < card (Domain g)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       graph_homomorphism\n        (fst (translation e\\<^sub>L,\n              translation (A_Int e\\<^sub>L e\\<^sub>R)))\n        G f \\<Longrightarrow>\n       extensible\n        (translation e\\<^sub>L, translation (A_Int e\\<^sub>L e\\<^sub>R)) G f", "have [intro!]: \" \\<not> aa < 2 \\<Longrightarrow> card (Domain f) \\<le> aa + card (Domain f) - 2\" for aa"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> aa < 2 \\<Longrightarrow>\n    card (Domain f) \\<le> aa + card (Domain f) - 2", "by simp"], ["proof (state)\nthis:\n  \\<not> ?aa < 2 \\<Longrightarrow>\n  card (Domain f) \\<le> ?aa + card (Domain f) - 2\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       graph_homomorphism\n        (fst (translation e\\<^sub>L,\n              translation (A_Int e\\<^sub>L e\\<^sub>R)))\n        G f \\<Longrightarrow>\n       extensible\n        (translation e\\<^sub>L, translation (A_Int e\\<^sub>L e\\<^sub>R)) G f", "from v(2) restrictD[OF translation_graph[of e\\<^sub>L]]"], ["proof (chain)\npicking this:\n  vertices (translation e\\<^sub>L) = Domain f\n  edges (translation e\\<^sub>L)\n  \\<subseteq> {(l, v1, v2).\n               v1 \\<in> vertices (translation e\\<^sub>L) \\<and>\n               v2 \\<in> vertices (translation e\\<^sub>L)}", "have df[dest]:\"xa \\<notin> Domain f \\<Longrightarrow> (l,xa,xb) \\<in> edges (translation e\\<^sub>L) \\<Longrightarrow> False\"\n                  \"xa \\<notin> Domain f \\<Longrightarrow> (l,xb,xa) \\<in> edges (translation e\\<^sub>L) \\<Longrightarrow> False\"\n                  for xa l xb"], ["proof (prove)\nusing this:\n  vertices (translation e\\<^sub>L) = Domain f\n  edges (translation e\\<^sub>L)\n  \\<subseteq> {(l, v1, v2).\n               v1 \\<in> vertices (translation e\\<^sub>L) \\<and>\n               v2 \\<in> vertices (translation e\\<^sub>L)}\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>xa \\<notin> Domain f;\n      (l, xa, xb) \\<in> edges (translation e\\<^sub>L)\\<rbrakk>\n     \\<Longrightarrow> False) &&&\n    (\\<lbrakk>xa \\<notin> Domain f;\n      (l, xb, xa) \\<in> edges (translation e\\<^sub>L)\\<rbrakk>\n     \\<Longrightarrow> False)", "unfolding edge_preserving"], ["proof (prove)\nusing this:\n  vertices (translation e\\<^sub>L) = Domain f\n  edges (translation e\\<^sub>L)\n  \\<subseteq> {(l, v1, v2).\n               v1 \\<in> vertices (translation e\\<^sub>L) \\<and>\n               v2 \\<in> vertices (translation e\\<^sub>L)}\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>xa \\<notin> Domain f;\n      (l, xa, xb) \\<in> edges (translation e\\<^sub>L)\\<rbrakk>\n     \\<Longrightarrow> False) &&&\n    (\\<lbrakk>xa \\<notin> Domain f;\n      (l, xb, xa) \\<in> edges (translation e\\<^sub>L)\\<rbrakk>\n     \\<Longrightarrow> False)", "by auto"], ["proof (state)\nthis:\n  \\<lbrakk>?xa \\<notin> Domain f;\n   (?l, ?xa, ?xb) \\<in> edges (translation e\\<^sub>L)\\<rbrakk>\n  \\<Longrightarrow> False\n  \\<lbrakk>?xa \\<notin> Domain f;\n   (?l, ?xb, ?xa) \\<in> edges (translation e\\<^sub>L)\\<rbrakk>\n  \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       graph_homomorphism\n        (fst (translation e\\<^sub>L,\n              translation (A_Int e\\<^sub>L e\\<^sub>R)))\n        G f \\<Longrightarrow>\n       extensible\n        (translation e\\<^sub>L, translation (A_Int e\\<^sub>L e\\<^sub>R)) G f", "{"], ["proof (state)\nthis:\n  \\<lbrakk>?xa \\<notin> Domain f;\n   (?l, ?xa, ?xb) \\<in> edges (translation e\\<^sub>L)\\<rbrakk>\n  \\<Longrightarrow> False\n  \\<lbrakk>?xa \\<notin> Domain f;\n   (?l, ?xb, ?xa) \\<in> edges (translation e\\<^sub>L)\\<rbrakk>\n  \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       graph_homomorphism\n        (fst (translation e\\<^sub>L,\n              translation (A_Int e\\<^sub>L e\\<^sub>R)))\n        G f \\<Longrightarrow>\n       extensible\n        (translation e\\<^sub>L, translation (A_Int e\\<^sub>L e\\<^sub>R)) G f", "fix l xa xb ya"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       graph_homomorphism\n        (fst (translation e\\<^sub>L,\n              translation (A_Int e\\<^sub>L e\\<^sub>R)))\n        G f \\<Longrightarrow>\n       extensible\n        (translation e\\<^sub>L, translation (A_Int e\\<^sub>L e\\<^sub>R)) G f", "assume assm: \"(l,xa,xb) \\<in> edges GR\""], ["proof (state)\nthis:\n  (l, xa, xb) \\<in> edges GR\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       graph_homomorphism\n        (fst (translation e\\<^sub>L,\n              translation (A_Int e\\<^sub>L e\\<^sub>R)))\n        G f \\<Longrightarrow>\n       extensible\n        (translation e\\<^sub>L, translation (A_Int e\\<^sub>L e\\<^sub>R)) G f", "with c_f dom_le"], ["proof (chain)\npicking this:\n  2 \\<le> card (Domain f)\n  card (Domain f) \\<le> card (Domain g)\n  (l, xa, xb) \\<in> edges GR", "have \"xa \\<in> {0,1} \\<union> {card (Domain f)..<card (Domain g)}\"\n           \"xb \\<in> {0,1} \\<union> {card (Domain f)..<card (Domain g)}\""], ["proof (prove)\nusing this:\n  2 \\<le> card (Domain f)\n  card (Domain f) \\<le> card (Domain g)\n  (l, xa, xb) \\<in> edges GR\n\ngoal (1 subgoal):\n 1. xa \\<in> {0, 1} \\<union> {card (Domain f)..<card (Domain g)} &&&\n    xb \\<in> {0, 1} \\<union> {card (Domain f)..<card (Domain g)}", "unfolding GR_def v"], ["proof (prove)\nusing this:\n  2 \\<le> card (Domain f)\n  card (Domain f) \\<le> card (Domain g)\n  (l, xa, xb)\n  \\<in> edges\n         (map_graph_fn (translation e\\<^sub>R)\n           (\\<lambda>x. if x < 2 then x else x + card (Domain f) - 2))\n\ngoal (1 subgoal):\n 1. xa \\<in> {0, 1} \\<union> {card (Domain f)..<card (Domain g)} &&&\n    xb \\<in> {0, 1} \\<union> {card (Domain f)..<card (Domain g)}", "by auto"], ["proof (state)\nthis:\n  xa \\<in> {0, 1} \\<union> {card (Domain f)..<card (Domain g)}\n  xb \\<in> {0, 1} \\<union> {card (Domain f)..<card (Domain g)}\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       graph_homomorphism\n        (fst (translation e\\<^sub>L,\n              translation (A_Int e\\<^sub>L e\\<^sub>R)))\n        G f \\<Longrightarrow>\n       extensible\n        (translation e\\<^sub>L, translation (A_Int e\\<^sub>L e\\<^sub>R)) G f", "hence minb:\"xa \\<in> {0,1} \\<or> xa \\<ge> card (Domain f)\" \"xb \\<in> {0,1} \\<or> xb \\<ge> card (Domain f)\""], ["proof (prove)\nusing this:\n  xa \\<in> {0, 1} \\<union> {card (Domain f)..<card (Domain g)}\n  xb \\<in> {0, 1} \\<union> {card (Domain f)..<card (Domain g)}\n\ngoal (1 subgoal):\n 1. xa \\<in> {0, 1} \\<or> card (Domain f) \\<le> xa &&&\n    xb \\<in> {0, 1} \\<or> card (Domain f) \\<le> xb", "by auto"], ["proof (state)\nthis:\n  xa \\<in> {0, 1} \\<or> card (Domain f) \\<le> xa\n  xb \\<in> {0, 1} \\<or> card (Domain f) \\<le> xb\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       graph_homomorphism\n        (fst (translation e\\<^sub>L,\n              translation (A_Int e\\<^sub>L e\\<^sub>R)))\n        G f \\<Longrightarrow>\n       extensible\n        (translation e\\<^sub>L, translation (A_Int e\\<^sub>L e\\<^sub>R)) G f", "{"], ["proof (state)\nthis:\n  xa \\<in> {0, 1} \\<or> card (Domain f) \\<le> xa\n  xb \\<in> {0, 1} \\<or> card (Domain f) \\<le> xb\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       graph_homomorphism\n        (fst (translation e\\<^sub>L,\n              translation (A_Int e\\<^sub>L e\\<^sub>R)))\n        G f \\<Longrightarrow>\n       extensible\n        (translation e\\<^sub>L, translation (A_Int e\\<^sub>L e\\<^sub>R)) G f", "fix z xa"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       graph_homomorphism\n        (fst (translation e\\<^sub>L,\n              translation (A_Int e\\<^sub>L e\\<^sub>R)))\n        G f \\<Longrightarrow>\n       extensible\n        (translation e\\<^sub>L, translation (A_Int e\\<^sub>L e\\<^sub>R)) G f", "assume minb:\"xa \\<in> {0,1} \\<or> xa \\<ge> card (Domain f)\" and z:\"(xa,z) \\<in> f\""], ["proof (state)\nthis:\n  xa \\<in> {0, 1} \\<or> card (Domain f) \\<le> xa\n  (xa, z) \\<in> f\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       graph_homomorphism\n        (fst (translation e\\<^sub>L,\n              translation (A_Int e\\<^sub>L e\\<^sub>R)))\n        G f \\<Longrightarrow>\n       extensible\n        (translation e\\<^sub>L, translation (A_Int e\\<^sub>L e\\<^sub>R)) G f", "from z verts_in_translation[of e\\<^sub>L,unfolded inv_translation_def v]"], ["proof (chain)\npicking this:\n  (xa, z) \\<in> f\n  {0..<card (Domain f)} = Domain f \\<and> {0, 1} \\<subseteq> Domain f", "have \"xa < card(Domain f)\""], ["proof (prove)\nusing this:\n  (xa, z) \\<in> f\n  {0..<card (Domain f)} = Domain f \\<and> {0, 1} \\<subseteq> Domain f\n\ngoal (1 subgoal):\n 1. xa < card (Domain f)", "by auto"], ["proof (state)\nthis:\n  xa < card (Domain f)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       graph_homomorphism\n        (fst (translation e\\<^sub>L,\n              translation (A_Int e\\<^sub>L e\\<^sub>R)))\n        G f \\<Longrightarrow>\n       extensible\n        (translation e\\<^sub>L, translation (A_Int e\\<^sub>L e\\<^sub>R)) G f", "with minb verts_in_translation[of \"A_Int e\\<^sub>L e\\<^sub>R\",unfolded inv_translation_def v]"], ["proof (chain)\npicking this:\n  xa \\<in> {0, 1} \\<or> card (Domain f) \\<le> xa\n  {0..<card (Domain g)} = Domain g \\<and> {0, 1} \\<subseteq> Domain g\n  xa < card (Domain f)", "have x:\"xa \\<in> {0,1} \\<and> xa \\<in> Domain g\""], ["proof (prove)\nusing this:\n  xa \\<in> {0, 1} \\<or> card (Domain f) \\<le> xa\n  {0..<card (Domain g)} = Domain g \\<and> {0, 1} \\<subseteq> Domain g\n  xa < card (Domain f)\n\ngoal (1 subgoal):\n 1. xa \\<in> {0, 1} \\<and> xa \\<in> Domain g", "by auto"], ["proof (state)\nthis:\n  xa \\<in> {0, 1} \\<and> xa \\<in> Domain g\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       graph_homomorphism\n        (fst (translation e\\<^sub>L,\n              translation (A_Int e\\<^sub>L e\\<^sub>R)))\n        G f \\<Longrightarrow>\n       extensible\n        (translation e\\<^sub>L, translation (A_Int e\\<^sub>L e\\<^sub>R)) G f", "then"], ["proof (chain)\npicking this:\n  xa \\<in> {0, 1} \\<and> xa \\<in> Domain g", "obtain v where g:\"(xa,v) \\<in> g\""], ["proof (prove)\nusing this:\n  xa \\<in> {0, 1} \\<and> xa \\<in> Domain g\n\ngoal (1 subgoal):\n 1. (\\<And>v. (xa, v) \\<in> g \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  (xa, v) \\<in> g\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       graph_homomorphism\n        (fst (translation e\\<^sub>L,\n              translation (A_Int e\\<^sub>L e\\<^sub>R)))\n        G f \\<Longrightarrow>\n       extensible\n        (translation e\\<^sub>L, translation (A_Int e\\<^sub>L e\\<^sub>R)) G f", "consider \"xa = 0 \\<and> z = x\" | \"xa = 1 \\<and> z = y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>xa = 0 \\<and> z = x \\<Longrightarrow> thesis;\n     xa = 1 \\<and> z = y \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "using x f2[THEN univalentD[OF uni_f]] z"], ["proof (prove)\nusing this:\n  xa \\<in> {0, 1} \\<and> xa \\<in> Domain g\n  (0, ?z) \\<in> f \\<Longrightarrow> ?z = x\n  (1, ?z) \\<in> f \\<Longrightarrow> ?z = y\n  (xa, z) \\<in> f\n\ngoal (1 subgoal):\n 1. \\<lbrakk>xa = 0 \\<and> z = x \\<Longrightarrow> thesis;\n     xa = 1 \\<and> z = y \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "by auto"], ["proof (state)\nthis:\n  \\<lbrakk>xa = 0 \\<and> z = x \\<Longrightarrow> ?thesis;\n   xa = 1 \\<and> z = y \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       graph_homomorphism\n        (fst (translation e\\<^sub>L,\n              translation (A_Int e\\<^sub>L e\\<^sub>R)))\n        G f \\<Longrightarrow>\n       extensible\n        (translation e\\<^sub>L, translation (A_Int e\\<^sub>L e\\<^sub>R)) G f", "hence \"v = z\""], ["proof (prove)\nusing this:\n  \\<lbrakk>xa = 0 \\<and> z = x \\<Longrightarrow> ?thesis;\n   xa = 1 \\<and> z = y \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. v = z", "using g g2[THEN univalentD[OF uni_g]]"], ["proof (prove)\nusing this:\n  \\<lbrakk>xa = 0 \\<and> z = x \\<Longrightarrow> ?thesis;\n   xa = 1 \\<and> z = y \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n  (xa, v) \\<in> g\n  (0, ?z) \\<in> g \\<Longrightarrow> ?z = x\n  (1, ?z) \\<in> g \\<Longrightarrow> ?z = y\n\ngoal (1 subgoal):\n 1. v = z", "by metis"], ["proof (state)\nthis:\n  v = z\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       graph_homomorphism\n        (fst (translation e\\<^sub>L,\n              translation (A_Int e\\<^sub>L e\\<^sub>R)))\n        G f \\<Longrightarrow>\n       extensible\n        (translation e\\<^sub>L, translation (A_Int e\\<^sub>L e\\<^sub>R)) G f", "hence \"(xa,z) \\<in> g\""], ["proof (prove)\nusing this:\n  v = z\n\ngoal (1 subgoal):\n 1. (xa, z) \\<in> g", "using g"], ["proof (prove)\nusing this:\n  v = z\n  (xa, v) \\<in> g\n\ngoal (1 subgoal):\n 1. (xa, z) \\<in> g", "by auto"], ["proof (state)\nthis:\n  (xa, z) \\<in> g\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       graph_homomorphism\n        (fst (translation e\\<^sub>L,\n              translation (A_Int e\\<^sub>L e\\<^sub>R)))\n        G f \\<Longrightarrow>\n       extensible\n        (translation e\\<^sub>L, translation (A_Int e\\<^sub>L e\\<^sub>R)) G f", "}"], ["proof (state)\nthis:\n  \\<lbrakk>?xaa2 \\<in> {0, 1} \\<or> card (Domain f) \\<le> ?xaa2;\n   (?xaa2, ?z2) \\<in> f\\<rbrakk>\n  \\<Longrightarrow> (?xaa2, ?z2) \\<in> g\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       graph_homomorphism\n        (fst (translation e\\<^sub>L,\n              translation (A_Int e\\<^sub>L e\\<^sub>R)))\n        G f \\<Longrightarrow>\n       extensible\n        (translation e\\<^sub>L, translation (A_Int e\\<^sub>L e\\<^sub>R)) G f", "note minb[THEN this]"], ["proof (state)\nthis:\n  (xa, ?z2) \\<in> f \\<Longrightarrow> (xa, ?z2) \\<in> g\n  (xb, ?z2) \\<in> f \\<Longrightarrow> (xb, ?z2) \\<in> g\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       graph_homomorphism\n        (fst (translation e\\<^sub>L,\n              translation (A_Int e\\<^sub>L e\\<^sub>R)))\n        G f \\<Longrightarrow>\n       extensible\n        (translation e\\<^sub>L, translation (A_Int e\\<^sub>L e\\<^sub>R)) G f", "}"], ["proof (state)\nthis:\n  \\<lbrakk>(?l5, ?xa5, ?xb5) \\<in> edges GR; (?xa5, ?z2) \\<in> f\\<rbrakk>\n  \\<Longrightarrow> (?xa5, ?z2) \\<in> g\n  \\<lbrakk>(?l5, ?xa5, ?xb5) \\<in> edges GR; (?xb5, ?z2) \\<in> f\\<rbrakk>\n  \\<Longrightarrow> (?xb5, ?z2) \\<in> g\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       graph_homomorphism\n        (fst (translation e\\<^sub>L,\n              translation (A_Int e\\<^sub>L e\\<^sub>R)))\n        G f \\<Longrightarrow>\n       extensible\n        (translation e\\<^sub>L, translation (A_Int e\\<^sub>L e\\<^sub>R)) G f", "with f2 g2[THEN univalentD[OF uni_g]]"], ["proof (chain)\npicking this:\n  (0, x) \\<in> f\n  (1, y) \\<in> f\n  (0, ?z) \\<in> g \\<Longrightarrow> ?z = x\n  (1, ?z) \\<in> g \\<Longrightarrow> ?z = y\n  \\<lbrakk>(?l5, ?xa5, ?xb5) \\<in> edges GR; (?xa5, ?z2) \\<in> f\\<rbrakk>\n  \\<Longrightarrow> (?xa5, ?z2) \\<in> g\n  \\<lbrakk>(?l5, ?xa5, ?xb5) \\<in> edges GR; (?xb5, ?z2) \\<in> f\\<rbrakk>\n  \\<Longrightarrow> (?xb5, ?z2) \\<in> g", "have dg:\"(l,xa,xb) \\<in> edges GR \\<Longrightarrow> (xa,ya) \\<in> f \\<Longrightarrow> (xa,ya) \\<in> g\"\n            \"(l,xb,xa) \\<in> edges GR \\<Longrightarrow> (xa,ya) \\<in> f \\<Longrightarrow> (xa,ya) \\<in> g\"\n            for xa l xb ya"], ["proof (prove)\nusing this:\n  (0, x) \\<in> f\n  (1, y) \\<in> f\n  (0, ?z) \\<in> g \\<Longrightarrow> ?z = x\n  (1, ?z) \\<in> g \\<Longrightarrow> ?z = y\n  \\<lbrakk>(?l5, ?xa5, ?xb5) \\<in> edges GR; (?xa5, ?z2) \\<in> f\\<rbrakk>\n  \\<Longrightarrow> (?xa5, ?z2) \\<in> g\n  \\<lbrakk>(?l5, ?xa5, ?xb5) \\<in> edges GR; (?xb5, ?z2) \\<in> f\\<rbrakk>\n  \\<Longrightarrow> (?xb5, ?z2) \\<in> g\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>(l, xa, xb) \\<in> edges GR; (xa, ya) \\<in> f\\<rbrakk>\n     \\<Longrightarrow> (xa, ya) \\<in> g) &&&\n    (\\<lbrakk>(l, xb, xa) \\<in> edges GR; (xa, ya) \\<in> f\\<rbrakk>\n     \\<Longrightarrow> (xa, ya) \\<in> g)", "unfolding edge_preserving"], ["proof (prove)\nusing this:\n  (0, x) \\<in> f\n  (1, y) \\<in> f\n  (0, ?z) \\<in> g \\<Longrightarrow> ?z = x\n  (1, ?z) \\<in> g \\<Longrightarrow> ?z = y\n  \\<lbrakk>(?l5, ?xa5, ?xb5) \\<in> edges GR; (?xa5, ?z2) \\<in> f\\<rbrakk>\n  \\<Longrightarrow> (?xa5, ?z2) \\<in> g\n  \\<lbrakk>(?l5, ?xa5, ?xb5) \\<in> edges GR; (?xb5, ?z2) \\<in> f\\<rbrakk>\n  \\<Longrightarrow> (?xb5, ?z2) \\<in> g\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>(l, xa, xb) \\<in> edges GR; (xa, ya) \\<in> f\\<rbrakk>\n     \\<Longrightarrow> (xa, ya) \\<in> g) &&&\n    (\\<lbrakk>(l, xb, xa) \\<in> edges GR; (xa, ya) \\<in> f\\<rbrakk>\n     \\<Longrightarrow> (xa, ya) \\<in> g)", "by (auto)"], ["proof (state)\nthis:\n  \\<lbrakk>(?l, ?xa, ?xb) \\<in> edges GR; (?xa, ?ya) \\<in> f\\<rbrakk>\n  \\<Longrightarrow> (?xa, ?ya) \\<in> g\n  \\<lbrakk>(?l, ?xb, ?xa) \\<in> edges GR; (?xa, ?ya) \\<in> f\\<rbrakk>\n  \\<Longrightarrow> (?xa, ?ya) \\<in> g\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       graph_homomorphism\n        (fst (translation e\\<^sub>L,\n              translation (A_Int e\\<^sub>L e\\<^sub>R)))\n        G f \\<Longrightarrow>\n       extensible\n        (translation e\\<^sub>L, translation (A_Int e\\<^sub>L e\\<^sub>R)) G f", "have \"vertices (translation e\\<^sub>L) \\<subseteq> vertices (translation (A_Int e\\<^sub>L e\\<^sub>R))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vertices (translation e\\<^sub>L)\n    \\<subseteq> vertices (translation (A_Int e\\<^sub>L e\\<^sub>R))", "by(rule subgraph_subset,insert graph_rule_translation,auto)"], ["proof (state)\nthis:\n  vertices (translation e\\<^sub>L)\n  \\<subseteq> vertices (translation (A_Int e\\<^sub>L e\\<^sub>R))\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       graph_homomorphism\n        (fst (translation e\\<^sub>L,\n              translation (A_Int e\\<^sub>L e\\<^sub>R)))\n        G f \\<Longrightarrow>\n       extensible\n        (translation e\\<^sub>L, translation (A_Int e\\<^sub>L e\\<^sub>R)) G f", "hence subdom:\"Domain f \\<subseteq> Domain g\""], ["proof (prove)\nusing this:\n  vertices (translation e\\<^sub>L)\n  \\<subseteq> vertices (translation (A_Int e\\<^sub>L e\\<^sub>R))\n\ngoal (1 subgoal):\n 1. Domain f \\<subseteq> Domain g", "unfolding v"], ["proof (prove)\nusing this:\n  Domain f \\<subseteq> Domain g\n\ngoal (1 subgoal):\n 1. Domain f \\<subseteq> Domain g", "."], ["proof (state)\nthis:\n  Domain f \\<subseteq> Domain g\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       graph_homomorphism\n        (fst (translation e\\<^sub>L,\n              translation (A_Int e\\<^sub>L e\\<^sub>R)))\n        G f \\<Longrightarrow>\n       extensible\n        (translation e\\<^sub>L, translation (A_Int e\\<^sub>L e\\<^sub>R)) G f", "let ?g = \"f \\<union> (Id_on (UNIV - Domain f) O g)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       graph_homomorphism\n        (fst (translation e\\<^sub>L,\n              translation (A_Int e\\<^sub>L e\\<^sub>R)))\n        G f \\<Longrightarrow>\n       extensible\n        (translation e\\<^sub>L, translation (A_Int e\\<^sub>L e\\<^sub>R)) G f", "have [simp]:\"Domain ?g = Domain g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Domain (f \\<union> Id_on (UNIV - Domain f) O g) = Domain g", "using subdom"], ["proof (prove)\nusing this:\n  Domain f \\<subseteq> Domain g\n\ngoal (1 subgoal):\n 1. Domain (f \\<union> Id_on (UNIV - Domain f) O g) = Domain g", "unfolding Domain_Un_eq"], ["proof (prove)\nusing this:\n  Domain f \\<subseteq> Domain g\n\ngoal (1 subgoal):\n 1. Domain f \\<union> Domain (Id_on (UNIV - Domain f) O g) = Domain g", "by auto"], ["proof (state)\nthis:\n  Domain (f \\<union> Id_on (UNIV - Domain f) O g) = Domain g\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       graph_homomorphism\n        (fst (translation e\\<^sub>L,\n              translation (A_Int e\\<^sub>L e\\<^sub>R)))\n        G f \\<Longrightarrow>\n       extensible\n        (translation e\\<^sub>L, translation (A_Int e\\<^sub>L e\\<^sub>R)) G f", "have ih:\"graph_homomorphism (translation (A_Int e\\<^sub>L e\\<^sub>R)) G ?g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. graph_homomorphism (translation (A_Int e\\<^sub>L e\\<^sub>R)) G\n     (f \\<union> Id_on (UNIV - Domain f) O g)", "proof(rule graph_homomorphismI)"], ["proof (state)\ngoal (6 subgoals):\n 1. vertices (translation (A_Int e\\<^sub>L e\\<^sub>R)) =\n    Domain (f \\<union> Id_on (UNIV - Domain f) O g)\n 2. (f \\<union> Id_on (UNIV - Domain f) O g) ``\n    vertices (translation (A_Int e\\<^sub>L e\\<^sub>R))\n    \\<subseteq> vertices G\n 3. univalent (f \\<union> Id_on (UNIV - Domain f) O g)\n 4. edge_preserving (f \\<union> Id_on (UNIV - Domain f) O g)\n     (edges (translation (A_Int e\\<^sub>L e\\<^sub>R))) (edges G)\n 5. graph (translation (A_Int e\\<^sub>L e\\<^sub>R))\n 6. graph G", "show \"?g `` vertices (translation (A_Int e\\<^sub>L e\\<^sub>R)) \\<subseteq> vertices G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (f \\<union> Id_on (UNIV - Domain f) O g) ``\n    vertices (translation (A_Int e\\<^sub>L e\\<^sub>R))\n    \\<subseteq> vertices G", "using g[unfolded graph_homomorphism_def] f[unfolded graph_homomorphism_def]"], ["proof (prove)\nusing this:\n  vertices (translation (A_Int e\\<^sub>L e\\<^sub>R)) = Domain g \\<and>\n  graph (translation (A_Int e\\<^sub>L e\\<^sub>R)) \\<and>\n  graph G \\<and>\n  g `` vertices (translation (A_Int e\\<^sub>L e\\<^sub>R))\n  \\<subseteq> vertices G \\<and>\n  univalent g \\<and>\n  edge_preserving g (edges (translation (A_Int e\\<^sub>L e\\<^sub>R)))\n   (edges G)\n  vertices\n   (fst (translation e\\<^sub>L, translation (A_Int e\\<^sub>L e\\<^sub>R))) =\n  Domain f \\<and>\n  graph\n   (fst (translation e\\<^sub>L,\n         translation (A_Int e\\<^sub>L e\\<^sub>R))) \\<and>\n  graph G \\<and>\n  f ``\n  vertices\n   (fst (translation e\\<^sub>L, translation (A_Int e\\<^sub>L e\\<^sub>R)))\n  \\<subseteq> vertices G \\<and>\n  univalent f \\<and>\n  edge_preserving f\n   (edges\n     (fst (translation e\\<^sub>L, translation (A_Int e\\<^sub>L e\\<^sub>R))))\n   (edges G)\n\ngoal (1 subgoal):\n 1. (f \\<union> Id_on (UNIV - Domain f) O g) ``\n    vertices (translation (A_Int e\\<^sub>L e\\<^sub>R))\n    \\<subseteq> vertices G", "by (auto simp: v simp del:translation.simps)"], ["proof (state)\nthis:\n  (f \\<union> Id_on (UNIV - Domain f) O g) ``\n  vertices (translation (A_Int e\\<^sub>L e\\<^sub>R))\n  \\<subseteq> vertices G\n\ngoal (5 subgoals):\n 1. vertices (translation (A_Int e\\<^sub>L e\\<^sub>R)) =\n    Domain (f \\<union> Id_on (UNIV - Domain f) O g)\n 2. univalent (f \\<union> Id_on (UNIV - Domain f) O g)\n 3. edge_preserving (f \\<union> Id_on (UNIV - Domain f) O g)\n     (edges (translation (A_Int e\\<^sub>L e\\<^sub>R))) (edges G)\n 4. graph (translation (A_Int e\\<^sub>L e\\<^sub>R))\n 5. graph G", "show \"edge_preserving ?g (edges (translation (A_Int e\\<^sub>L e\\<^sub>R))) (edges G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. edge_preserving (f \\<union> Id_on (UNIV - Domain f) O g)\n     (edges (translation (A_Int e\\<^sub>L e\\<^sub>R))) (edges G)", "unfolding Let_def translation.simps graph_union_edges"], ["proof (prove)\ngoal (1 subgoal):\n 1. edge_preserving (f \\<union> Id_on (UNIV - Domain f) O g)\n     (edges (translation e\\<^sub>L) \\<union>\n      edges\n       (map_graph_fn (translation e\\<^sub>R)\n         (\\<lambda>x.\n             if x < 2 then x\n             else x + card (vertices (translation e\\<^sub>L)) - 2)))\n     (edges G)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. edge_preserving (f \\<union> Id_on (UNIV - Domain f) O g)\n     (edges (translation e\\<^sub>L)) (edges G)\n 2. edge_preserving (f \\<union> Id_on (UNIV - Domain f) O g)\n     (edges\n       (map_graph_fn (translation e\\<^sub>R)\n         (\\<lambda>x.\n             if x < 2 then x\n             else x + card (vertices (translation e\\<^sub>L)) - 2)))\n     (edges G)", "show \"edge_preserving ?g (edges (translation e\\<^sub>L)) (edges G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. edge_preserving (f \\<union> Id_on (UNIV - Domain f) O g)\n     (edges (translation e\\<^sub>L)) (edges G)", "using edge_preserving_atomic[OF ep_f]"], ["proof (prove)\nusing this:\n  \\<lbrakk>(?v1.0, ?v1') \\<in> f; (?v2.0, ?v2') \\<in> f;\n   (?k, ?v1.0, ?v2.0) \\<in> edges (translation e\\<^sub>L)\\<rbrakk>\n  \\<Longrightarrow> (?k, ?v1', ?v2') \\<in> edges G\n\ngoal (1 subgoal):\n 1. edge_preserving (f \\<union> Id_on (UNIV - Domain f) O g)\n     (edges (translation e\\<^sub>L)) (edges G)", "unfolding edge_preserving"], ["proof (prove)\nusing this:\n  \\<lbrakk>(?v1.0, ?v1') \\<in> f; (?v2.0, ?v2') \\<in> f;\n   (?k, ?v1.0, ?v2.0) \\<in> edges (translation e\\<^sub>L)\\<rbrakk>\n  \\<Longrightarrow> (?k, ?v1', ?v2') \\<in> edges G\n\ngoal (1 subgoal):\n 1. on_triple (f \\<union> Id_on (UNIV - Domain f) O g) ``\n    edges (translation e\\<^sub>L)\n    \\<subseteq> edges G", "by auto"], ["proof (state)\nthis:\n  edge_preserving (f \\<union> Id_on (UNIV - Domain f) O g)\n   (edges (translation e\\<^sub>L)) (edges G)\n\ngoal (1 subgoal):\n 1. edge_preserving (f \\<union> Id_on (UNIV - Domain f) O g)\n     (edges\n       (map_graph_fn (translation e\\<^sub>R)\n         (\\<lambda>x.\n             if x < 2 then x\n             else x + card (vertices (translation e\\<^sub>L)) - 2)))\n     (edges G)", "have \"edge_preserving ?g (edges GR) (edges G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. edge_preserving (f \\<union> Id_on (UNIV - Domain f) O g) (edges GR)\n     (edges G)", "using edge_preserving_atomic[OF ep_g] dg"], ["proof (prove)\nusing this:\n  \\<lbrakk>(?v1.0, ?v1') \\<in> g; (?v2.0, ?v2') \\<in> g;\n   (?k, ?v1.0, ?v2.0) \\<in> edges GR\\<rbrakk>\n  \\<Longrightarrow> (?k, ?v1', ?v2') \\<in> edges G\n  \\<lbrakk>(?l, ?xa, ?xb) \\<in> edges GR; (?xa, ?ya) \\<in> f\\<rbrakk>\n  \\<Longrightarrow> (?xa, ?ya) \\<in> g\n  \\<lbrakk>(?l, ?xb, ?xa) \\<in> edges GR; (?xa, ?ya) \\<in> f\\<rbrakk>\n  \\<Longrightarrow> (?xa, ?ya) \\<in> g\n\ngoal (1 subgoal):\n 1. edge_preserving (f \\<union> Id_on (UNIV - Domain f) O g) (edges GR)\n     (edges G)", "unfolding edge_preserving"], ["proof (prove)\nusing this:\n  \\<lbrakk>(?v1.0, ?v1') \\<in> g; (?v2.0, ?v2') \\<in> g;\n   (?k, ?v1.0, ?v2.0) \\<in> edges GR\\<rbrakk>\n  \\<Longrightarrow> (?k, ?v1', ?v2') \\<in> edges G\n  \\<lbrakk>(?l, ?xa, ?xb) \\<in> edges GR; (?xa, ?ya) \\<in> f\\<rbrakk>\n  \\<Longrightarrow> (?xa, ?ya) \\<in> g\n  \\<lbrakk>(?l, ?xb, ?xa) \\<in> edges GR; (?xa, ?ya) \\<in> f\\<rbrakk>\n  \\<Longrightarrow> (?xa, ?ya) \\<in> g\n\ngoal (1 subgoal):\n 1. on_triple (f \\<union> Id_on (UNIV - Domain f) O g) `` edges GR\n    \\<subseteq> edges G", "by (auto;blast)"], ["proof (state)\nthis:\n  edge_preserving (f \\<union> Id_on (UNIV - Domain f) O g) (edges GR)\n   (edges G)\n\ngoal (1 subgoal):\n 1. edge_preserving (f \\<union> Id_on (UNIV - Domain f) O g)\n     (edges\n       (map_graph_fn (translation e\\<^sub>R)\n         (\\<lambda>x.\n             if x < 2 then x\n             else x + card (vertices (translation e\\<^sub>L)) - 2)))\n     (edges G)", "thus \"edge_preserving ?g (edges (map_graph_fn (translation e\\<^sub>R) ?f)) (edges G)\""], ["proof (prove)\nusing this:\n  edge_preserving (f \\<union> Id_on (UNIV - Domain f) O g) (edges GR)\n   (edges G)\n\ngoal (1 subgoal):\n 1. edge_preserving (f \\<union> Id_on (UNIV - Domain f) O g)\n     (edges\n       (map_graph_fn (translation e\\<^sub>R)\n         (\\<lambda>x.\n             if x < 2 then x\n             else x + card (vertices (translation e\\<^sub>L)) - 2)))\n     (edges G)", "by (auto simp:GR_def)"], ["proof (state)\nthis:\n  edge_preserving (f \\<union> Id_on (UNIV - Domain f) O g)\n   (edges\n     (map_graph_fn (translation e\\<^sub>R)\n       (\\<lambda>x.\n           if x < 2 then x\n           else x + card (vertices (translation e\\<^sub>L)) - 2)))\n   (edges G)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  edge_preserving (f \\<union> Id_on (UNIV - Domain f) O g)\n   (edges (translation (A_Int e\\<^sub>L e\\<^sub>R))) (edges G)\n\ngoal (4 subgoals):\n 1. vertices (translation (A_Int e\\<^sub>L e\\<^sub>R)) =\n    Domain (f \\<union> Id_on (UNIV - Domain f) O g)\n 2. univalent (f \\<union> Id_on (UNIV - Domain f) O g)\n 3. graph (translation (A_Int e\\<^sub>L e\\<^sub>R))\n 4. graph G", "qed (insert f[unfolded graph_homomorphism_def] g[unfolded graph_homomorphism_def],auto simp:Let_def)"], ["proof (state)\nthis:\n  graph_homomorphism (translation (A_Int e\\<^sub>L e\\<^sub>R)) G\n   (f \\<union> Id_on (UNIV - Domain f) O g)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       graph_homomorphism\n        (fst (translation e\\<^sub>L,\n              translation (A_Int e\\<^sub>L e\\<^sub>R)))\n        G f \\<Longrightarrow>\n       extensible\n        (translation e\\<^sub>L, translation (A_Int e\\<^sub>L e\\<^sub>R)) G f", "have ie:\"agree_on (translation e\\<^sub>L) f ?g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. agree_on (translation e\\<^sub>L) f\n     (f \\<union> Id_on (UNIV - Domain f) O g)", "unfolding agree_on_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>v\\<in>vertices (translation e\\<^sub>L).\n       f `` {v} = (f \\<union> Id_on (UNIV - Domain f) O g) `` {v}", "by (auto simp:v)"], ["proof (state)\nthis:\n  agree_on (translation e\\<^sub>L) f\n   (f \\<union> Id_on (UNIV - Domain f) O g)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       graph_homomorphism\n        (fst (translation e\\<^sub>L,\n              translation (A_Int e\\<^sub>L e\\<^sub>R)))\n        G f \\<Longrightarrow>\n       extensible\n        (translation e\\<^sub>L, translation (A_Int e\\<^sub>L e\\<^sub>R)) G f", "from ie ih"], ["proof (chain)\npicking this:\n  agree_on (translation e\\<^sub>L) f\n   (f \\<union> Id_on (UNIV - Domain f) O g)\n  graph_homomorphism (translation (A_Int e\\<^sub>L e\\<^sub>R)) G\n   (f \\<union> Id_on (UNIV - Domain f) O g)", "show \"extensible (translation e\\<^sub>L, translation (A_Int e\\<^sub>L e\\<^sub>R)) G f\""], ["proof (prove)\nusing this:\n  agree_on (translation e\\<^sub>L) f\n   (f \\<union> Id_on (UNIV - Domain f) O g)\n  graph_homomorphism (translation (A_Int e\\<^sub>L e\\<^sub>R)) G\n   (f \\<union> Id_on (UNIV - Domain f) O g)\n\ngoal (1 subgoal):\n 1. extensible\n     (translation e\\<^sub>L, translation (A_Int e\\<^sub>L e\\<^sub>R)) G f", "unfolding extensible_def prod.sel"], ["proof (prove)\nusing this:\n  agree_on (translation e\\<^sub>L) f\n   (f \\<union> Id_on (UNIV - Domain f) O g)\n  graph_homomorphism (translation (A_Int e\\<^sub>L e\\<^sub>R)) G\n   (f \\<union> Id_on (UNIV - Domain f) O g)\n\ngoal (1 subgoal):\n 1. \\<exists>g.\n       graph_homomorphism (translation (A_Int e\\<^sub>L e\\<^sub>R)) G\n        g \\<and>\n       agree_on (translation e\\<^sub>L) f g", "by auto"], ["proof (state)\nthis:\n  extensible\n   (translation e\\<^sub>L, translation (A_Int e\\<^sub>L e\\<^sub>R)) G f\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  maintained\n   (translation e\\<^sub>L, translation (A_Int e\\<^sub>L e\\<^sub>R)) G\n\ngoal (1 subgoal):\n 1. maintained\n     (translation e\\<^sub>L, translation (A_Int e\\<^sub>L e\\<^sub>R))\n     G \\<Longrightarrow>\n    G \\<Turnstile> e\\<^sub>L \\<sqsubseteq> e\\<^sub>R", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. maintained\n     (translation e\\<^sub>L, translation (A_Int e\\<^sub>L e\\<^sub>R))\n     G \\<Longrightarrow>\n    G \\<Turnstile> e\\<^sub>L \\<sqsubseteq> e\\<^sub>R", "assume rhs:?rhs"], ["proof (state)\nthis:\n  maintained\n   (translation e\\<^sub>L, translation (A_Int e\\<^sub>L e\\<^sub>R)) G\n\ngoal (1 subgoal):\n 1. maintained\n     (translation e\\<^sub>L, translation (A_Int e\\<^sub>L e\\<^sub>R))\n     G \\<Longrightarrow>\n    G \\<Turnstile> e\\<^sub>L \\<sqsubseteq> e\\<^sub>R", "{"], ["proof (state)\nthis:\n  maintained\n   (translation e\\<^sub>L, translation (A_Int e\\<^sub>L e\\<^sub>R)) G\n\ngoal (1 subgoal):\n 1. maintained\n     (translation e\\<^sub>L, translation (A_Int e\\<^sub>L e\\<^sub>R))\n     G \\<Longrightarrow>\n    G \\<Turnstile> e\\<^sub>L \\<sqsubseteq> e\\<^sub>R", "fix x y"], ["proof (state)\ngoal (1 subgoal):\n 1. maintained\n     (translation e\\<^sub>L, translation (A_Int e\\<^sub>L e\\<^sub>R))\n     G \\<Longrightarrow>\n    G \\<Turnstile> e\\<^sub>L \\<sqsubseteq> e\\<^sub>R", "assume \"(x,y) \\<in> :G:\\<lbrakk>e\\<^sub>L\\<rbrakk>\""], ["proof (state)\nthis:\n  (x, y) \\<in> :G:\\<lbrakk>e\\<^sub>L\\<rbrakk>\n\ngoal (1 subgoal):\n 1. maintained\n     (translation e\\<^sub>L, translation (A_Int e\\<^sub>L e\\<^sub>R))\n     G \\<Longrightarrow>\n    G \\<Turnstile> e\\<^sub>L \\<sqsubseteq> e\\<^sub>R", "with translation[OF assms]"], ["proof (chain)\npicking this:\n  ((?x, ?y) \\<in> :G:\\<lbrakk>?e\\<rbrakk>) =\n  (\\<exists>f.\n      graph_homomorphism (translation ?e) G f \\<and>\n      (0, ?x) \\<in> f \\<and> (1, ?y) \\<in> f)\n  (x, y) \\<in> :G:\\<lbrakk>e\\<^sub>L\\<rbrakk>", "obtain f\n      where f:\"graph_homomorphism (fst (translation e\\<^sub>L, translation (A_Int e\\<^sub>L e\\<^sub>R))) G f\"\n              \"(0, x) \\<in> f\" \"(1, y) \\<in> f\""], ["proof (prove)\nusing this:\n  ((?x, ?y) \\<in> :G:\\<lbrakk>?e\\<rbrakk>) =\n  (\\<exists>f.\n      graph_homomorphism (translation ?e) G f \\<and>\n      (0, ?x) \\<in> f \\<and> (1, ?y) \\<in> f)\n  (x, y) \\<in> :G:\\<lbrakk>e\\<^sub>L\\<rbrakk>\n\ngoal (1 subgoal):\n 1. (\\<And>f.\n        \\<lbrakk>graph_homomorphism\n                  (fst (translation e\\<^sub>L,\n                        translation (A_Int e\\<^sub>L e\\<^sub>R)))\n                  G f;\n         (0, x) \\<in> f; (1, y) \\<in> f\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  graph_homomorphism\n   (fst (translation e\\<^sub>L, translation (A_Int e\\<^sub>L e\\<^sub>R))) G\n   f\n  (0, x) \\<in> f\n  (1, y) \\<in> f\n\ngoal (1 subgoal):\n 1. maintained\n     (translation e\\<^sub>L, translation (A_Int e\\<^sub>L e\\<^sub>R))\n     G \\<Longrightarrow>\n    G \\<Turnstile> e\\<^sub>L \\<sqsubseteq> e\\<^sub>R", "with rhs[unfolded maintained_def,rule_format,OF f(1),unfolded extensible_def]"], ["proof (chain)\npicking this:\n  \\<exists>g.\n     graph_homomorphism\n      (snd (translation e\\<^sub>L, translation (A_Int e\\<^sub>L e\\<^sub>R)))\n      G g \\<and>\n     agree_on\n      (fst (translation e\\<^sub>L, translation (A_Int e\\<^sub>L e\\<^sub>R)))\n      f g\n  graph_homomorphism\n   (fst (translation e\\<^sub>L, translation (A_Int e\\<^sub>L e\\<^sub>R))) G\n   f\n  (0, x) \\<in> f\n  (1, y) \\<in> f", "obtain g where g:\"graph_homomorphism (translation (A_Int e\\<^sub>L e\\<^sub>R)) G g\"\n                     \"agree_on (translation e\\<^sub>L) f g\""], ["proof (prove)\nusing this:\n  \\<exists>g.\n     graph_homomorphism\n      (snd (translation e\\<^sub>L, translation (A_Int e\\<^sub>L e\\<^sub>R)))\n      G g \\<and>\n     agree_on\n      (fst (translation e\\<^sub>L, translation (A_Int e\\<^sub>L e\\<^sub>R)))\n      f g\n  graph_homomorphism\n   (fst (translation e\\<^sub>L, translation (A_Int e\\<^sub>L e\\<^sub>R))) G\n   f\n  (0, x) \\<in> f\n  (1, y) \\<in> f\n\ngoal (1 subgoal):\n 1. (\\<And>g.\n        \\<lbrakk>graph_homomorphism\n                  (translation (A_Int e\\<^sub>L e\\<^sub>R)) G g;\n         agree_on (translation e\\<^sub>L) f g\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  graph_homomorphism (translation (A_Int e\\<^sub>L e\\<^sub>R)) G g\n  agree_on (translation e\\<^sub>L) f g\n\ngoal (1 subgoal):\n 1. maintained\n     (translation e\\<^sub>L, translation (A_Int e\\<^sub>L e\\<^sub>R))\n     G \\<Longrightarrow>\n    G \\<Turnstile> e\\<^sub>L \\<sqsubseteq> e\\<^sub>R", "hence \"(x,y) \\<in> :G:\\<lbrakk>A_Int e\\<^sub>L e\\<^sub>R\\<rbrakk>\""], ["proof (prove)\nusing this:\n  graph_homomorphism (translation (A_Int e\\<^sub>L e\\<^sub>R)) G g\n  agree_on (translation e\\<^sub>L) f g\n\ngoal (1 subgoal):\n 1. (x, y) \\<in> :G:\\<lbrakk>A_Int e\\<^sub>L e\\<^sub>R\\<rbrakk>", "using f"], ["proof (prove)\nusing this:\n  graph_homomorphism (translation (A_Int e\\<^sub>L e\\<^sub>R)) G g\n  agree_on (translation e\\<^sub>L) f g\n  graph_homomorphism\n   (fst (translation e\\<^sub>L, translation (A_Int e\\<^sub>L e\\<^sub>R))) G\n   f\n  (0, x) \\<in> f\n  (1, y) \\<in> f\n\ngoal (1 subgoal):\n 1. (x, y) \\<in> :G:\\<lbrakk>A_Int e\\<^sub>L e\\<^sub>R\\<rbrakk>", "unfolding agree_on_def translation[OF assms]"], ["proof (prove)\nusing this:\n  graph_homomorphism (translation (A_Int e\\<^sub>L e\\<^sub>R)) G g\n  \\<forall>v\\<in>vertices (translation e\\<^sub>L). f `` {v} = g `` {v}\n  graph_homomorphism\n   (fst (translation e\\<^sub>L, translation (A_Int e\\<^sub>L e\\<^sub>R))) G\n   f\n  (0, x) \\<in> f\n  (1, y) \\<in> f\n\ngoal (1 subgoal):\n 1. \\<exists>f.\n       graph_homomorphism (translation (A_Int e\\<^sub>L e\\<^sub>R)) G\n        f \\<and>\n       (0, x) \\<in> f \\<and> (1, y) \\<in> f", "by auto"], ["proof (state)\nthis:\n  (x, y) \\<in> :G:\\<lbrakk>A_Int e\\<^sub>L e\\<^sub>R\\<rbrakk>\n\ngoal (1 subgoal):\n 1. maintained\n     (translation e\\<^sub>L, translation (A_Int e\\<^sub>L e\\<^sub>R))\n     G \\<Longrightarrow>\n    G \\<Turnstile> e\\<^sub>L \\<sqsubseteq> e\\<^sub>R", "}"], ["proof (state)\nthis:\n  (?x2, ?y2) \\<in> :G:\\<lbrakk>e\\<^sub>L\\<rbrakk> \\<Longrightarrow>\n  (?x2, ?y2) \\<in> :G:\\<lbrakk>A_Int e\\<^sub>L e\\<^sub>R\\<rbrakk>\n\ngoal (1 subgoal):\n 1. maintained\n     (translation e\\<^sub>L, translation (A_Int e\\<^sub>L e\\<^sub>R))\n     G \\<Longrightarrow>\n    G \\<Turnstile> e\\<^sub>L \\<sqsubseteq> e\\<^sub>R", "thus ?lhs"], ["proof (prove)\nusing this:\n  (?x2, ?y2) \\<in> :G:\\<lbrakk>e\\<^sub>L\\<rbrakk> \\<Longrightarrow>\n  (?x2, ?y2) \\<in> :G:\\<lbrakk>A_Int e\\<^sub>L e\\<^sub>R\\<rbrakk>\n\ngoal (1 subgoal):\n 1. G \\<Turnstile> e\\<^sub>L \\<sqsubseteq> e\\<^sub>R", "by auto"], ["proof (state)\nthis:\n  G \\<Turnstile> e\\<^sub>L \\<sqsubseteq> e\\<^sub>R\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma translation_self[intro]:\n\"(0, 1) \\<in> :translation e:\\<lbrakk>e\\<rbrakk>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (0, 1) \\<in> :translation e:\\<lbrakk>e\\<rbrakk>", "proof(induct e)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>e1 e2.\n       \\<lbrakk>(0, 1) \\<in> :translation e1:\\<lbrakk>e1\\<rbrakk>;\n        (0, 1) \\<in> :translation e2:\\<lbrakk>e2\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> (0, 1)\n                         \\<in> :translation\n                                 (A_Int e1 e2):\\<lbrakk>A_Int e1 e2\\<rbrakk>\n 2. \\<And>e1 e2.\n       \\<lbrakk>(0, 1) \\<in> :translation e1:\\<lbrakk>e1\\<rbrakk>;\n        (0, 1) \\<in> :translation e2:\\<lbrakk>e2\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> (0, 1)\n                         \\<in> :translation\n                                 (A_Cmp e1 e2):\\<lbrakk>A_Cmp e1 e2\\<rbrakk>\n 3. \\<And>e.\n       (0, 1) \\<in> :translation e:\\<lbrakk>e\\<rbrakk> \\<Longrightarrow>\n       (0, 1) \\<in> :translation (A_Cnv e):\\<lbrakk>A_Cnv e\\<rbrakk>\n 4. \\<And>x. (0, 1) \\<in> :translation (A_Lbl x):\\<lbrakk>A_Lbl x\\<rbrakk>", "case (A_Int e1 e2)"], ["proof (state)\nthis:\n  (0, 1) \\<in> :translation e1:\\<lbrakk>e1\\<rbrakk>\n  (0, 1) \\<in> :translation e2:\\<lbrakk>e2\\<rbrakk>\n\ngoal (4 subgoals):\n 1. \\<And>e1 e2.\n       \\<lbrakk>(0, 1) \\<in> :translation e1:\\<lbrakk>e1\\<rbrakk>;\n        (0, 1) \\<in> :translation e2:\\<lbrakk>e2\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> (0, 1)\n                         \\<in> :translation\n                                 (A_Int e1 e2):\\<lbrakk>A_Int e1 e2\\<rbrakk>\n 2. \\<And>e1 e2.\n       \\<lbrakk>(0, 1) \\<in> :translation e1:\\<lbrakk>e1\\<rbrakk>;\n        (0, 1) \\<in> :translation e2:\\<lbrakk>e2\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> (0, 1)\n                         \\<in> :translation\n                                 (A_Cmp e1 e2):\\<lbrakk>A_Cmp e1 e2\\<rbrakk>\n 3. \\<And>e.\n       (0, 1) \\<in> :translation e:\\<lbrakk>e\\<rbrakk> \\<Longrightarrow>\n       (0, 1) \\<in> :translation (A_Cnv e):\\<lbrakk>A_Cnv e\\<rbrakk>\n 4. \\<And>x. (0, 1) \\<in> :translation (A_Lbl x):\\<lbrakk>A_Lbl x\\<rbrakk>", "let ?f = \"(\\<lambda>x. if x < 2 then x else x + card (vertices (translation e1)) - 2)\""], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>e1 e2.\n       \\<lbrakk>(0, 1) \\<in> :translation e1:\\<lbrakk>e1\\<rbrakk>;\n        (0, 1) \\<in> :translation e2:\\<lbrakk>e2\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> (0, 1)\n                         \\<in> :translation\n                                 (A_Int e1 e2):\\<lbrakk>A_Int e1 e2\\<rbrakk>\n 2. \\<And>e1 e2.\n       \\<lbrakk>(0, 1) \\<in> :translation e1:\\<lbrakk>e1\\<rbrakk>;\n        (0, 1) \\<in> :translation e2:\\<lbrakk>e2\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> (0, 1)\n                         \\<in> :translation\n                                 (A_Cmp e1 e2):\\<lbrakk>A_Cmp e1 e2\\<rbrakk>\n 3. \\<And>e.\n       (0, 1) \\<in> :translation e:\\<lbrakk>e\\<rbrakk> \\<Longrightarrow>\n       (0, 1) \\<in> :translation (A_Cnv e):\\<lbrakk>A_Cnv e\\<rbrakk>\n 4. \\<And>x. (0, 1) \\<in> :translation (A_Lbl x):\\<lbrakk>A_Lbl x\\<rbrakk>", "have f: \"(?f 0,?f 1) \\<in>:map_graph_fn (translation e2) ?f:\\<lbrakk>e2\\<rbrakk>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (if 0 < 2 then 0 else 0 + card (vertices (translation e1)) - 2,\n     if 1 < 2 then 1 else 1 + card (vertices (translation e1)) - 2)\n    \\<in> :map_graph_fn (translation e2)\n            (\\<lambda>x.\n                if x < 2 then x\n                else x + card (vertices (translation e1)) -\n                     2):\\<lbrakk>e2\\<rbrakk>", "using map_graph_in[OF translation_graph A_Int(2),of ?f]"], ["proof (prove)\nusing this:\n  (if 0 < 2 then 0 else 0 + card (vertices (translation e1)) - 2,\n   if 1 < 2 then 1 else 1 + card (vertices (translation e1)) - 2)\n  \\<in> :map_graph_fn (translation e2)\n          (\\<lambda>x.\n              if x < 2 then x\n              else x + card (vertices (translation e1)) -\n                   2):\\<lbrakk>e2\\<rbrakk>\n\ngoal (1 subgoal):\n 1. (if 0 < 2 then 0 else 0 + card (vertices (translation e1)) - 2,\n     if 1 < 2 then 1 else 1 + card (vertices (translation e1)) - 2)\n    \\<in> :map_graph_fn (translation e2)\n            (\\<lambda>x.\n                if x < 2 then x\n                else x + card (vertices (translation e1)) -\n                     2):\\<lbrakk>e2\\<rbrakk>", "by auto"], ["proof (state)\nthis:\n  (if 0 < 2 then 0 else 0 + card (vertices (translation e1)) - 2,\n   if 1 < 2 then 1 else 1 + card (vertices (translation e1)) - 2)\n  \\<in> :map_graph_fn (translation e2)\n          (\\<lambda>x.\n              if x < 2 then x\n              else x + card (vertices (translation e1)) -\n                   2):\\<lbrakk>e2\\<rbrakk>\n\ngoal (4 subgoals):\n 1. \\<And>e1 e2.\n       \\<lbrakk>(0, 1) \\<in> :translation e1:\\<lbrakk>e1\\<rbrakk>;\n        (0, 1) \\<in> :translation e2:\\<lbrakk>e2\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> (0, 1)\n                         \\<in> :translation\n                                 (A_Int e1 e2):\\<lbrakk>A_Int e1 e2\\<rbrakk>\n 2. \\<And>e1 e2.\n       \\<lbrakk>(0, 1) \\<in> :translation e1:\\<lbrakk>e1\\<rbrakk>;\n        (0, 1) \\<in> :translation e2:\\<lbrakk>e2\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> (0, 1)\n                         \\<in> :translation\n                                 (A_Cmp e1 e2):\\<lbrakk>A_Cmp e1 e2\\<rbrakk>\n 3. \\<And>e.\n       (0, 1) \\<in> :translation e:\\<lbrakk>e\\<rbrakk> \\<Longrightarrow>\n       (0, 1) \\<in> :translation (A_Cnv e):\\<lbrakk>A_Cnv e\\<rbrakk>\n 4. \\<And>x. (0, 1) \\<in> :translation (A_Lbl x):\\<lbrakk>A_Lbl x\\<rbrakk>", "let ?G = \"graph_union (translation e1) (map_graph_fn (translation e2) ?f)\""], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>e1 e2.\n       \\<lbrakk>(0, 1) \\<in> :translation e1:\\<lbrakk>e1\\<rbrakk>;\n        (0, 1) \\<in> :translation e2:\\<lbrakk>e2\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> (0, 1)\n                         \\<in> :translation\n                                 (A_Int e1 e2):\\<lbrakk>A_Int e1 e2\\<rbrakk>\n 2. \\<And>e1 e2.\n       \\<lbrakk>(0, 1) \\<in> :translation e1:\\<lbrakk>e1\\<rbrakk>;\n        (0, 1) \\<in> :translation e2:\\<lbrakk>e2\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> (0, 1)\n                         \\<in> :translation\n                                 (A_Cmp e1 e2):\\<lbrakk>A_Cmp e1 e2\\<rbrakk>\n 3. \\<And>e.\n       (0, 1) \\<in> :translation e:\\<lbrakk>e\\<rbrakk> \\<Longrightarrow>\n       (0, 1) \\<in> :translation (A_Cnv e):\\<lbrakk>A_Cnv e\\<rbrakk>\n 4. \\<And>x. (0, 1) \\<in> :translation (A_Lbl x):\\<lbrakk>A_Lbl x\\<rbrakk>", "have \"{(0,1)} \\<subseteq> :(translation e1):\\<lbrakk>e1\\<rbrakk>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {(0, 1)} \\<subseteq> :translation e1:\\<lbrakk>e1\\<rbrakk>", "using A_Int"], ["proof (prove)\nusing this:\n  (0, 1) \\<in> :translation e1:\\<lbrakk>e1\\<rbrakk>\n  (0, 1) \\<in> :translation e2:\\<lbrakk>e2\\<rbrakk>\n\ngoal (1 subgoal):\n 1. {(0, 1)} \\<subseteq> :translation e1:\\<lbrakk>e1\\<rbrakk>", "by auto"], ["proof (state)\nthis:\n  {(0, 1)} \\<subseteq> :translation e1:\\<lbrakk>e1\\<rbrakk>\n\ngoal (4 subgoals):\n 1. \\<And>e1 e2.\n       \\<lbrakk>(0, 1) \\<in> :translation e1:\\<lbrakk>e1\\<rbrakk>;\n        (0, 1) \\<in> :translation e2:\\<lbrakk>e2\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> (0, 1)\n                         \\<in> :translation\n                                 (A_Int e1 e2):\\<lbrakk>A_Int e1 e2\\<rbrakk>\n 2. \\<And>e1 e2.\n       \\<lbrakk>(0, 1) \\<in> :translation e1:\\<lbrakk>e1\\<rbrakk>;\n        (0, 1) \\<in> :translation e2:\\<lbrakk>e2\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> (0, 1)\n                         \\<in> :translation\n                                 (A_Cmp e1 e2):\\<lbrakk>A_Cmp e1 e2\\<rbrakk>\n 3. \\<And>e.\n       (0, 1) \\<in> :translation e:\\<lbrakk>e\\<rbrakk> \\<Longrightarrow>\n       (0, 1) \\<in> :translation (A_Cnv e):\\<lbrakk>A_Cnv e\\<rbrakk>\n 4. \\<And>x. (0, 1) \\<in> :translation (A_Lbl x):\\<lbrakk>A_Lbl x\\<rbrakk>", "moreover"], ["proof (state)\nthis:\n  {(0, 1)} \\<subseteq> :translation e1:\\<lbrakk>e1\\<rbrakk>\n\ngoal (4 subgoals):\n 1. \\<And>e1 e2.\n       \\<lbrakk>(0, 1) \\<in> :translation e1:\\<lbrakk>e1\\<rbrakk>;\n        (0, 1) \\<in> :translation e2:\\<lbrakk>e2\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> (0, 1)\n                         \\<in> :translation\n                                 (A_Int e1 e2):\\<lbrakk>A_Int e1 e2\\<rbrakk>\n 2. \\<And>e1 e2.\n       \\<lbrakk>(0, 1) \\<in> :translation e1:\\<lbrakk>e1\\<rbrakk>;\n        (0, 1) \\<in> :translation e2:\\<lbrakk>e2\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> (0, 1)\n                         \\<in> :translation\n                                 (A_Cmp e1 e2):\\<lbrakk>A_Cmp e1 e2\\<rbrakk>\n 3. \\<And>e.\n       (0, 1) \\<in> :translation e:\\<lbrakk>e\\<rbrakk> \\<Longrightarrow>\n       (0, 1) \\<in> :translation (A_Cnv e):\\<lbrakk>A_Cnv e\\<rbrakk>\n 4. \\<And>x. (0, 1) \\<in> :translation (A_Lbl x):\\<lbrakk>A_Lbl x\\<rbrakk>", "have \"{(0,1)} \\<subseteq> :map_graph_fn (translation e2) ?f:\\<lbrakk>e2\\<rbrakk>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {(0, 1)}\n    \\<subseteq> :map_graph_fn (translation e2)\n                  (\\<lambda>x.\n                      if x < 2 then x\n                      else x + card (vertices (translation e1)) -\n                           2):\\<lbrakk>e2\\<rbrakk>", "using f"], ["proof (prove)\nusing this:\n  (if 0 < 2 then 0 else 0 + card (vertices (translation e1)) - 2,\n   if 1 < 2 then 1 else 1 + card (vertices (translation e1)) - 2)\n  \\<in> :map_graph_fn (translation e2)\n          (\\<lambda>x.\n              if x < 2 then x\n              else x + card (vertices (translation e1)) -\n                   2):\\<lbrakk>e2\\<rbrakk>\n\ngoal (1 subgoal):\n 1. {(0, 1)}\n    \\<subseteq> :map_graph_fn (translation e2)\n                  (\\<lambda>x.\n                      if x < 2 then x\n                      else x + card (vertices (translation e1)) -\n                           2):\\<lbrakk>e2\\<rbrakk>", "by auto"], ["proof (state)\nthis:\n  {(0, 1)}\n  \\<subseteq> :map_graph_fn (translation e2)\n                (\\<lambda>x.\n                    if x < 2 then x\n                    else x + card (vertices (translation e1)) -\n                         2):\\<lbrakk>e2\\<rbrakk>\n\ngoal (4 subgoals):\n 1. \\<And>e1 e2.\n       \\<lbrakk>(0, 1) \\<in> :translation e1:\\<lbrakk>e1\\<rbrakk>;\n        (0, 1) \\<in> :translation e2:\\<lbrakk>e2\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> (0, 1)\n                         \\<in> :translation\n                                 (A_Int e1 e2):\\<lbrakk>A_Int e1 e2\\<rbrakk>\n 2. \\<And>e1 e2.\n       \\<lbrakk>(0, 1) \\<in> :translation e1:\\<lbrakk>e1\\<rbrakk>;\n        (0, 1) \\<in> :translation e2:\\<lbrakk>e2\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> (0, 1)\n                         \\<in> :translation\n                                 (A_Cmp e1 e2):\\<lbrakk>A_Cmp e1 e2\\<rbrakk>\n 3. \\<And>e.\n       (0, 1) \\<in> :translation e:\\<lbrakk>e\\<rbrakk> \\<Longrightarrow>\n       (0, 1) \\<in> :translation (A_Cnv e):\\<lbrakk>A_Cnv e\\<rbrakk>\n 4. \\<And>x. (0, 1) \\<in> :translation (A_Lbl x):\\<lbrakk>A_Lbl x\\<rbrakk>", "moreover"], ["proof (state)\nthis:\n  {(0, 1)}\n  \\<subseteq> :map_graph_fn (translation e2)\n                (\\<lambda>x.\n                    if x < 2 then x\n                    else x + card (vertices (translation e1)) -\n                         2):\\<lbrakk>e2\\<rbrakk>\n\ngoal (4 subgoals):\n 1. \\<And>e1 e2.\n       \\<lbrakk>(0, 1) \\<in> :translation e1:\\<lbrakk>e1\\<rbrakk>;\n        (0, 1) \\<in> :translation e2:\\<lbrakk>e2\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> (0, 1)\n                         \\<in> :translation\n                                 (A_Int e1 e2):\\<lbrakk>A_Int e1 e2\\<rbrakk>\n 2. \\<And>e1 e2.\n       \\<lbrakk>(0, 1) \\<in> :translation e1:\\<lbrakk>e1\\<rbrakk>;\n        (0, 1) \\<in> :translation e2:\\<lbrakk>e2\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> (0, 1)\n                         \\<in> :translation\n                                 (A_Cmp e1 e2):\\<lbrakk>A_Cmp e1 e2\\<rbrakk>\n 3. \\<And>e.\n       (0, 1) \\<in> :translation e:\\<lbrakk>e\\<rbrakk> \\<Longrightarrow>\n       (0, 1) \\<in> :translation (A_Cnv e):\\<lbrakk>A_Cnv e\\<rbrakk>\n 4. \\<And>x. (0, 1) \\<in> :translation (A_Lbl x):\\<lbrakk>A_Lbl x\\<rbrakk>", "have \":map_graph_fn (translation e2) ?f:\\<lbrakk>e2\\<rbrakk> \\<subseteq> :?G:\\<lbrakk>e2\\<rbrakk>\" \":translation e1:\\<lbrakk>e1\\<rbrakk> \\<subseteq> :?G:\\<lbrakk>e1\\<rbrakk>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. :map_graph_fn (translation e2)\n      (\\<lambda>x.\n          if x < 2 then x\n          else x + card (vertices (translation e1)) -\n               2):\\<lbrakk>e2\\<rbrakk>\n    \\<subseteq> :graph_union (translation e1)\n                  (map_graph_fn (translation e2)\n                    (\\<lambda>x.\n                        if x < 2 then x\n                        else x + card (vertices (translation e1)) -\n                             2)):\\<lbrakk>e2\\<rbrakk> &&&\n    :translation e1:\\<lbrakk>e1\\<rbrakk>\n    \\<subseteq> :graph_union (translation e1)\n                  (map_graph_fn (translation e2)\n                    (\\<lambda>x.\n                        if x < 2 then x\n                        else x + card (vertices (translation e1)) -\n                             2)):\\<lbrakk>e1\\<rbrakk>", "using graph_union_semantics"], ["proof (prove)\nusing this:\n  (:?A:\\<lbrakk>?e\\<rbrakk>) \\<union> (:?B:\\<lbrakk>?e\\<rbrakk>)\n  \\<subseteq> :graph_union ?A ?B:\\<lbrakk>?e\\<rbrakk>\n\ngoal (1 subgoal):\n 1. :map_graph_fn (translation e2)\n      (\\<lambda>x.\n          if x < 2 then x\n          else x + card (vertices (translation e1)) -\n               2):\\<lbrakk>e2\\<rbrakk>\n    \\<subseteq> :graph_union (translation e1)\n                  (map_graph_fn (translation e2)\n                    (\\<lambda>x.\n                        if x < 2 then x\n                        else x + card (vertices (translation e1)) -\n                             2)):\\<lbrakk>e2\\<rbrakk> &&&\n    :translation e1:\\<lbrakk>e1\\<rbrakk>\n    \\<subseteq> :graph_union (translation e1)\n                  (map_graph_fn (translation e2)\n                    (\\<lambda>x.\n                        if x < 2 then x\n                        else x + card (vertices (translation e1)) -\n                             2)):\\<lbrakk>e1\\<rbrakk>", "by blast+"], ["proof (state)\nthis:\n  :map_graph_fn (translation e2)\n    (\\<lambda>x.\n        if x < 2 then x\n        else x + card (vertices (translation e1)) - 2):\\<lbrakk>e2\\<rbrakk>\n  \\<subseteq> :graph_union (translation e1)\n                (map_graph_fn (translation e2)\n                  (\\<lambda>x.\n                      if x < 2 then x\n                      else x + card (vertices (translation e1)) -\n                           2)):\\<lbrakk>e2\\<rbrakk>\n  :translation e1:\\<lbrakk>e1\\<rbrakk>\n  \\<subseteq> :graph_union (translation e1)\n                (map_graph_fn (translation e2)\n                  (\\<lambda>x.\n                      if x < 2 then x\n                      else x + card (vertices (translation e1)) -\n                           2)):\\<lbrakk>e1\\<rbrakk>\n\ngoal (4 subgoals):\n 1. \\<And>e1 e2.\n       \\<lbrakk>(0, 1) \\<in> :translation e1:\\<lbrakk>e1\\<rbrakk>;\n        (0, 1) \\<in> :translation e2:\\<lbrakk>e2\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> (0, 1)\n                         \\<in> :translation\n                                 (A_Int e1 e2):\\<lbrakk>A_Int e1 e2\\<rbrakk>\n 2. \\<And>e1 e2.\n       \\<lbrakk>(0, 1) \\<in> :translation e1:\\<lbrakk>e1\\<rbrakk>;\n        (0, 1) \\<in> :translation e2:\\<lbrakk>e2\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> (0, 1)\n                         \\<in> :translation\n                                 (A_Cmp e1 e2):\\<lbrakk>A_Cmp e1 e2\\<rbrakk>\n 3. \\<And>e.\n       (0, 1) \\<in> :translation e:\\<lbrakk>e\\<rbrakk> \\<Longrightarrow>\n       (0, 1) \\<in> :translation (A_Cnv e):\\<lbrakk>A_Cnv e\\<rbrakk>\n 4. \\<And>x. (0, 1) \\<in> :translation (A_Lbl x):\\<lbrakk>A_Lbl x\\<rbrakk>", "ultimately"], ["proof (chain)\npicking this:\n  {(0, 1)} \\<subseteq> :translation e1:\\<lbrakk>e1\\<rbrakk>\n  {(0, 1)}\n  \\<subseteq> :map_graph_fn (translation e2)\n                (\\<lambda>x.\n                    if x < 2 then x\n                    else x + card (vertices (translation e1)) -\n                         2):\\<lbrakk>e2\\<rbrakk>\n  :map_graph_fn (translation e2)\n    (\\<lambda>x.\n        if x < 2 then x\n        else x + card (vertices (translation e1)) - 2):\\<lbrakk>e2\\<rbrakk>\n  \\<subseteq> :graph_union (translation e1)\n                (map_graph_fn (translation e2)\n                  (\\<lambda>x.\n                      if x < 2 then x\n                      else x + card (vertices (translation e1)) -\n                           2)):\\<lbrakk>e2\\<rbrakk>\n  :translation e1:\\<lbrakk>e1\\<rbrakk>\n  \\<subseteq> :graph_union (translation e1)\n                (map_graph_fn (translation e2)\n                  (\\<lambda>x.\n                      if x < 2 then x\n                      else x + card (vertices (translation e1)) -\n                           2)):\\<lbrakk>e1\\<rbrakk>", "show ?case"], ["proof (prove)\nusing this:\n  {(0, 1)} \\<subseteq> :translation e1:\\<lbrakk>e1\\<rbrakk>\n  {(0, 1)}\n  \\<subseteq> :map_graph_fn (translation e2)\n                (\\<lambda>x.\n                    if x < 2 then x\n                    else x + card (vertices (translation e1)) -\n                         2):\\<lbrakk>e2\\<rbrakk>\n  :map_graph_fn (translation e2)\n    (\\<lambda>x.\n        if x < 2 then x\n        else x + card (vertices (translation e1)) - 2):\\<lbrakk>e2\\<rbrakk>\n  \\<subseteq> :graph_union (translation e1)\n                (map_graph_fn (translation e2)\n                  (\\<lambda>x.\n                      if x < 2 then x\n                      else x + card (vertices (translation e1)) -\n                           2)):\\<lbrakk>e2\\<rbrakk>\n  :translation e1:\\<lbrakk>e1\\<rbrakk>\n  \\<subseteq> :graph_union (translation e1)\n                (map_graph_fn (translation e2)\n                  (\\<lambda>x.\n                      if x < 2 then x\n                      else x + card (vertices (translation e1)) -\n                           2)):\\<lbrakk>e1\\<rbrakk>\n\ngoal (1 subgoal):\n 1. (0, 1) \\<in> :translation (A_Int e1 e2):\\<lbrakk>A_Int e1 e2\\<rbrakk>", "by (auto simp:Let_def)"], ["proof (state)\nthis:\n  (0, 1) \\<in> :translation (A_Int e1 e2):\\<lbrakk>A_Int e1 e2\\<rbrakk>\n\ngoal (3 subgoals):\n 1. \\<And>e1 e2.\n       \\<lbrakk>(0, 1) \\<in> :translation e1:\\<lbrakk>e1\\<rbrakk>;\n        (0, 1) \\<in> :translation e2:\\<lbrakk>e2\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> (0, 1)\n                         \\<in> :translation\n                                 (A_Cmp e1 e2):\\<lbrakk>A_Cmp e1 e2\\<rbrakk>\n 2. \\<And>e.\n       (0, 1) \\<in> :translation e:\\<lbrakk>e\\<rbrakk> \\<Longrightarrow>\n       (0, 1) \\<in> :translation (A_Cnv e):\\<lbrakk>A_Cnv e\\<rbrakk>\n 3. \\<And>x. (0, 1) \\<in> :translation (A_Lbl x):\\<lbrakk>A_Lbl x\\<rbrakk>", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>e1 e2.\n       \\<lbrakk>(0, 1) \\<in> :translation e1:\\<lbrakk>e1\\<rbrakk>;\n        (0, 1) \\<in> :translation e2:\\<lbrakk>e2\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> (0, 1)\n                         \\<in> :translation\n                                 (A_Cmp e1 e2):\\<lbrakk>A_Cmp e1 e2\\<rbrakk>\n 2. \\<And>e.\n       (0, 1) \\<in> :translation e:\\<lbrakk>e\\<rbrakk> \\<Longrightarrow>\n       (0, 1) \\<in> :translation (A_Cnv e):\\<lbrakk>A_Cnv e\\<rbrakk>\n 3. \\<And>x. (0, 1) \\<in> :translation (A_Lbl x):\\<lbrakk>A_Lbl x\\<rbrakk>", "case (A_Cmp e1 e2)"], ["proof (state)\nthis:\n  (0, 1) \\<in> :translation e1:\\<lbrakk>e1\\<rbrakk>\n  (0, 1) \\<in> :translation e2:\\<lbrakk>e2\\<rbrakk>\n\ngoal (3 subgoals):\n 1. \\<And>e1 e2.\n       \\<lbrakk>(0, 1) \\<in> :translation e1:\\<lbrakk>e1\\<rbrakk>;\n        (0, 1) \\<in> :translation e2:\\<lbrakk>e2\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> (0, 1)\n                         \\<in> :translation\n                                 (A_Cmp e1 e2):\\<lbrakk>A_Cmp e1 e2\\<rbrakk>\n 2. \\<And>e.\n       (0, 1) \\<in> :translation e:\\<lbrakk>e\\<rbrakk> \\<Longrightarrow>\n       (0, 1) \\<in> :translation (A_Cnv e):\\<lbrakk>A_Cnv e\\<rbrakk>\n 3. \\<And>x. (0, 1) \\<in> :translation (A_Lbl x):\\<lbrakk>A_Lbl x\\<rbrakk>", "let ?f1 = \"\\<lambda>x. if x = 0 then 0 else x + card (vertices (translation e2)) - 1\""], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>e1 e2.\n       \\<lbrakk>(0, 1) \\<in> :translation e1:\\<lbrakk>e1\\<rbrakk>;\n        (0, 1) \\<in> :translation e2:\\<lbrakk>e2\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> (0, 1)\n                         \\<in> :translation\n                                 (A_Cmp e1 e2):\\<lbrakk>A_Cmp e1 e2\\<rbrakk>\n 2. \\<And>e.\n       (0, 1) \\<in> :translation e:\\<lbrakk>e\\<rbrakk> \\<Longrightarrow>\n       (0, 1) \\<in> :translation (A_Cnv e):\\<lbrakk>A_Cnv e\\<rbrakk>\n 3. \\<And>x. (0, 1) \\<in> :translation (A_Lbl x):\\<lbrakk>A_Lbl x\\<rbrakk>", "have f1: \"(?f1 0,?f1 1) \\<in>:map_graph_fn (translation e1) ?f1:\\<lbrakk>e1\\<rbrakk>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (if 0 = 0 then 0 else 0 + card (vertices (translation e2)) - 1,\n     if 1 = 0 then 0 else 1 + card (vertices (translation e2)) - 1)\n    \\<in> :map_graph_fn (translation e1)\n            (\\<lambda>x.\n                if x = 0 then 0\n                else x + card (vertices (translation e2)) -\n                     1):\\<lbrakk>e1\\<rbrakk>", "using map_graph_in[OF translation_graph A_Cmp(1),of ?f1]"], ["proof (prove)\nusing this:\n  (if 0 = 0 then 0 else 0 + card (vertices (translation e2)) - 1,\n   if 1 = 0 then 0 else 1 + card (vertices (translation e2)) - 1)\n  \\<in> :map_graph_fn (translation e1)\n          (\\<lambda>x.\n              if x = 0 then 0\n              else x + card (vertices (translation e2)) -\n                   1):\\<lbrakk>e1\\<rbrakk>\n\ngoal (1 subgoal):\n 1. (if 0 = 0 then 0 else 0 + card (vertices (translation e2)) - 1,\n     if 1 = 0 then 0 else 1 + card (vertices (translation e2)) - 1)\n    \\<in> :map_graph_fn (translation e1)\n            (\\<lambda>x.\n                if x = 0 then 0\n                else x + card (vertices (translation e2)) -\n                     1):\\<lbrakk>e1\\<rbrakk>", "by auto"], ["proof (state)\nthis:\n  (if 0 = 0 then 0 else 0 + card (vertices (translation e2)) - 1,\n   if 1 = 0 then 0 else 1 + card (vertices (translation e2)) - 1)\n  \\<in> :map_graph_fn (translation e1)\n          (\\<lambda>x.\n              if x = 0 then 0\n              else x + card (vertices (translation e2)) -\n                   1):\\<lbrakk>e1\\<rbrakk>\n\ngoal (3 subgoals):\n 1. \\<And>e1 e2.\n       \\<lbrakk>(0, 1) \\<in> :translation e1:\\<lbrakk>e1\\<rbrakk>;\n        (0, 1) \\<in> :translation e2:\\<lbrakk>e2\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> (0, 1)\n                         \\<in> :translation\n                                 (A_Cmp e1 e2):\\<lbrakk>A_Cmp e1 e2\\<rbrakk>\n 2. \\<And>e.\n       (0, 1) \\<in> :translation e:\\<lbrakk>e\\<rbrakk> \\<Longrightarrow>\n       (0, 1) \\<in> :translation (A_Cnv e):\\<lbrakk>A_Cnv e\\<rbrakk>\n 3. \\<And>x. (0, 1) \\<in> :translation (A_Lbl x):\\<lbrakk>A_Lbl x\\<rbrakk>", "let ?f2 = \"\\<lambda>x. if x = 0 then card (vertices (translation e2)) else x\""], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>e1 e2.\n       \\<lbrakk>(0, 1) \\<in> :translation e1:\\<lbrakk>e1\\<rbrakk>;\n        (0, 1) \\<in> :translation e2:\\<lbrakk>e2\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> (0, 1)\n                         \\<in> :translation\n                                 (A_Cmp e1 e2):\\<lbrakk>A_Cmp e1 e2\\<rbrakk>\n 2. \\<And>e.\n       (0, 1) \\<in> :translation e:\\<lbrakk>e\\<rbrakk> \\<Longrightarrow>\n       (0, 1) \\<in> :translation (A_Cnv e):\\<lbrakk>A_Cnv e\\<rbrakk>\n 3. \\<And>x. (0, 1) \\<in> :translation (A_Lbl x):\\<lbrakk>A_Lbl x\\<rbrakk>", "have f2: \"(?f2 0,?f2 1) \\<in>:map_graph_fn (translation e2) ?f2:\\<lbrakk>e2\\<rbrakk>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (if 0 = 0 then card (vertices (translation e2)) else 0,\n     if 1 = 0 then card (vertices (translation e2)) else 1)\n    \\<in> :map_graph_fn (translation e2)\n            (\\<lambda>x.\n                if x = 0 then card (vertices (translation e2))\n                else x):\\<lbrakk>e2\\<rbrakk>", "using map_graph_in[OF translation_graph A_Cmp(2),of ?f2]"], ["proof (prove)\nusing this:\n  (if 0 = 0 then card (vertices (translation e2)) else 0,\n   if 1 = 0 then card (vertices (translation e2)) else 1)\n  \\<in> :map_graph_fn (translation e2)\n          (\\<lambda>x.\n              if x = 0 then card (vertices (translation e2))\n              else x):\\<lbrakk>e2\\<rbrakk>\n\ngoal (1 subgoal):\n 1. (if 0 = 0 then card (vertices (translation e2)) else 0,\n     if 1 = 0 then card (vertices (translation e2)) else 1)\n    \\<in> :map_graph_fn (translation e2)\n            (\\<lambda>x.\n                if x = 0 then card (vertices (translation e2))\n                else x):\\<lbrakk>e2\\<rbrakk>", "by auto"], ["proof (state)\nthis:\n  (if 0 = 0 then card (vertices (translation e2)) else 0,\n   if 1 = 0 then card (vertices (translation e2)) else 1)\n  \\<in> :map_graph_fn (translation e2)\n          (\\<lambda>x.\n              if x = 0 then card (vertices (translation e2))\n              else x):\\<lbrakk>e2\\<rbrakk>\n\ngoal (3 subgoals):\n 1. \\<And>e1 e2.\n       \\<lbrakk>(0, 1) \\<in> :translation e1:\\<lbrakk>e1\\<rbrakk>;\n        (0, 1) \\<in> :translation e2:\\<lbrakk>e2\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> (0, 1)\n                         \\<in> :translation\n                                 (A_Cmp e1 e2):\\<lbrakk>A_Cmp e1 e2\\<rbrakk>\n 2. \\<And>e.\n       (0, 1) \\<in> :translation e:\\<lbrakk>e\\<rbrakk> \\<Longrightarrow>\n       (0, 1) \\<in> :translation (A_Cnv e):\\<lbrakk>A_Cnv e\\<rbrakk>\n 3. \\<And>x. (0, 1) \\<in> :translation (A_Lbl x):\\<lbrakk>A_Lbl x\\<rbrakk>", "let ?G = \"graph_union (map_graph_fn (translation e1) ?f1) (map_graph_fn (translation e2) ?f2)\""], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>e1 e2.\n       \\<lbrakk>(0, 1) \\<in> :translation e1:\\<lbrakk>e1\\<rbrakk>;\n        (0, 1) \\<in> :translation e2:\\<lbrakk>e2\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> (0, 1)\n                         \\<in> :translation\n                                 (A_Cmp e1 e2):\\<lbrakk>A_Cmp e1 e2\\<rbrakk>\n 2. \\<And>e.\n       (0, 1) \\<in> :translation e:\\<lbrakk>e\\<rbrakk> \\<Longrightarrow>\n       (0, 1) \\<in> :translation (A_Cnv e):\\<lbrakk>A_Cnv e\\<rbrakk>\n 3. \\<And>x. (0, 1) \\<in> :translation (A_Lbl x):\\<lbrakk>A_Lbl x\\<rbrakk>", "have \"{(0,1)} = {(0,card (vertices (translation e2)))} O {(card (vertices (translation e2)),1)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {(0::'b, 1::'c)} =\n    {(0::'b, card (vertices (translation e2)))} O\n    {(card (vertices (translation e2)), 1::'c)}", "by auto"], ["proof (state)\nthis:\n  {(0::?'b1, 1::?'c1)} =\n  {(0::?'b1, card (vertices (translation e2)))} O\n  {(card (vertices (translation e2)), 1::?'c1)}\n\ngoal (3 subgoals):\n 1. \\<And>e1 e2.\n       \\<lbrakk>(0, 1) \\<in> :translation e1:\\<lbrakk>e1\\<rbrakk>;\n        (0, 1) \\<in> :translation e2:\\<lbrakk>e2\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> (0, 1)\n                         \\<in> :translation\n                                 (A_Cmp e1 e2):\\<lbrakk>A_Cmp e1 e2\\<rbrakk>\n 2. \\<And>e.\n       (0, 1) \\<in> :translation e:\\<lbrakk>e\\<rbrakk> \\<Longrightarrow>\n       (0, 1) \\<in> :translation (A_Cnv e):\\<lbrakk>A_Cnv e\\<rbrakk>\n 3. \\<And>x. (0, 1) \\<in> :translation (A_Lbl x):\\<lbrakk>A_Lbl x\\<rbrakk>", "also"], ["proof (state)\nthis:\n  {(0::?'b1, 1::?'c1)} =\n  {(0::?'b1, card (vertices (translation e2)))} O\n  {(card (vertices (translation e2)), 1::?'c1)}\n\ngoal (3 subgoals):\n 1. \\<And>e1 e2.\n       \\<lbrakk>(0, 1) \\<in> :translation e1:\\<lbrakk>e1\\<rbrakk>;\n        (0, 1) \\<in> :translation e2:\\<lbrakk>e2\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> (0, 1)\n                         \\<in> :translation\n                                 (A_Cmp e1 e2):\\<lbrakk>A_Cmp e1 e2\\<rbrakk>\n 2. \\<And>e.\n       (0, 1) \\<in> :translation e:\\<lbrakk>e\\<rbrakk> \\<Longrightarrow>\n       (0, 1) \\<in> :translation (A_Cnv e):\\<lbrakk>A_Cnv e\\<rbrakk>\n 3. \\<And>x. (0, 1) \\<in> :translation (A_Lbl x):\\<lbrakk>A_Lbl x\\<rbrakk>", "have \"{(0,card (vertices (translation e2)))} \\<subseteq> :map_graph_fn (translation e1) ?f1:\\<lbrakk>e1\\<rbrakk>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {(0, card (vertices (translation e2)))}\n    \\<subseteq> :map_graph_fn (translation e1)\n                  (\\<lambda>x.\n                      if x = 0 then 0\n                      else x + card (vertices (translation e2)) -\n                           1):\\<lbrakk>e1\\<rbrakk>", "using f1"], ["proof (prove)\nusing this:\n  (if 0 = 0 then 0 else 0 + card (vertices (translation e2)) - 1,\n   if 1 = 0 then 0 else 1 + card (vertices (translation e2)) - 1)\n  \\<in> :map_graph_fn (translation e1)\n          (\\<lambda>x.\n              if x = 0 then 0\n              else x + card (vertices (translation e2)) -\n                   1):\\<lbrakk>e1\\<rbrakk>\n\ngoal (1 subgoal):\n 1. {(0, card (vertices (translation e2)))}\n    \\<subseteq> :map_graph_fn (translation e1)\n                  (\\<lambda>x.\n                      if x = 0 then 0\n                      else x + card (vertices (translation e2)) -\n                           1):\\<lbrakk>e1\\<rbrakk>", "by auto"], ["proof (state)\nthis:\n  {(0, card (vertices (translation e2)))}\n  \\<subseteq> :map_graph_fn (translation e1)\n                (\\<lambda>x.\n                    if x = 0 then 0\n                    else x + card (vertices (translation e2)) -\n                         1):\\<lbrakk>e1\\<rbrakk>\n\ngoal (3 subgoals):\n 1. \\<And>e1 e2.\n       \\<lbrakk>(0, 1) \\<in> :translation e1:\\<lbrakk>e1\\<rbrakk>;\n        (0, 1) \\<in> :translation e2:\\<lbrakk>e2\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> (0, 1)\n                         \\<in> :translation\n                                 (A_Cmp e1 e2):\\<lbrakk>A_Cmp e1 e2\\<rbrakk>\n 2. \\<And>e.\n       (0, 1) \\<in> :translation e:\\<lbrakk>e\\<rbrakk> \\<Longrightarrow>\n       (0, 1) \\<in> :translation (A_Cnv e):\\<lbrakk>A_Cnv e\\<rbrakk>\n 3. \\<And>x. (0, 1) \\<in> :translation (A_Lbl x):\\<lbrakk>A_Lbl x\\<rbrakk>", "also"], ["proof (state)\nthis:\n  {(0, card (vertices (translation e2)))}\n  \\<subseteq> :map_graph_fn (translation e1)\n                (\\<lambda>x.\n                    if x = 0 then 0\n                    else x + card (vertices (translation e2)) -\n                         1):\\<lbrakk>e1\\<rbrakk>\n\ngoal (3 subgoals):\n 1. \\<And>e1 e2.\n       \\<lbrakk>(0, 1) \\<in> :translation e1:\\<lbrakk>e1\\<rbrakk>;\n        (0, 1) \\<in> :translation e2:\\<lbrakk>e2\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> (0, 1)\n                         \\<in> :translation\n                                 (A_Cmp e1 e2):\\<lbrakk>A_Cmp e1 e2\\<rbrakk>\n 2. \\<And>e.\n       (0, 1) \\<in> :translation e:\\<lbrakk>e\\<rbrakk> \\<Longrightarrow>\n       (0, 1) \\<in> :translation (A_Cnv e):\\<lbrakk>A_Cnv e\\<rbrakk>\n 3. \\<And>x. (0, 1) \\<in> :translation (A_Lbl x):\\<lbrakk>A_Lbl x\\<rbrakk>", "have \":map_graph_fn (translation e1) ?f1:\\<lbrakk>e1\\<rbrakk> \\<subseteq> :?G:\\<lbrakk>e1\\<rbrakk>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. :map_graph_fn (translation e1)\n      (\\<lambda>x.\n          if x = 0 then 0\n          else x + card (vertices (translation e2)) -\n               1):\\<lbrakk>e1\\<rbrakk>\n    \\<subseteq> :graph_union\n                  (map_graph_fn (translation e1)\n                    (\\<lambda>x.\n                        if x = 0 then 0\n                        else x + card (vertices (translation e2)) - 1))\n                  (map_graph_fn (translation e2)\n                    (\\<lambda>x.\n                        if x = 0 then card (vertices (translation e2))\n                        else x)):\\<lbrakk>e1\\<rbrakk>", "using graph_union_semantics"], ["proof (prove)\nusing this:\n  (:?A:\\<lbrakk>?e\\<rbrakk>) \\<union> (:?B:\\<lbrakk>?e\\<rbrakk>)\n  \\<subseteq> :graph_union ?A ?B:\\<lbrakk>?e\\<rbrakk>\n\ngoal (1 subgoal):\n 1. :map_graph_fn (translation e1)\n      (\\<lambda>x.\n          if x = 0 then 0\n          else x + card (vertices (translation e2)) -\n               1):\\<lbrakk>e1\\<rbrakk>\n    \\<subseteq> :graph_union\n                  (map_graph_fn (translation e1)\n                    (\\<lambda>x.\n                        if x = 0 then 0\n                        else x + card (vertices (translation e2)) - 1))\n                  (map_graph_fn (translation e2)\n                    (\\<lambda>x.\n                        if x = 0 then card (vertices (translation e2))\n                        else x)):\\<lbrakk>e1\\<rbrakk>", "by auto"], ["proof (state)\nthis:\n  :map_graph_fn (translation e1)\n    (\\<lambda>x.\n        if x = 0 then 0\n        else x + card (vertices (translation e2)) - 1):\\<lbrakk>e1\\<rbrakk>\n  \\<subseteq> :graph_union\n                (map_graph_fn (translation e1)\n                  (\\<lambda>x.\n                      if x = 0 then 0\n                      else x + card (vertices (translation e2)) - 1))\n                (map_graph_fn (translation e2)\n                  (\\<lambda>x.\n                      if x = 0 then card (vertices (translation e2))\n                      else x)):\\<lbrakk>e1\\<rbrakk>\n\ngoal (3 subgoals):\n 1. \\<And>e1 e2.\n       \\<lbrakk>(0, 1) \\<in> :translation e1:\\<lbrakk>e1\\<rbrakk>;\n        (0, 1) \\<in> :translation e2:\\<lbrakk>e2\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> (0, 1)\n                         \\<in> :translation\n                                 (A_Cmp e1 e2):\\<lbrakk>A_Cmp e1 e2\\<rbrakk>\n 2. \\<And>e.\n       (0, 1) \\<in> :translation e:\\<lbrakk>e\\<rbrakk> \\<Longrightarrow>\n       (0, 1) \\<in> :translation (A_Cnv e):\\<lbrakk>A_Cnv e\\<rbrakk>\n 3. \\<And>x. (0, 1) \\<in> :translation (A_Lbl x):\\<lbrakk>A_Lbl x\\<rbrakk>", "also"], ["proof (state)\nthis:\n  :map_graph_fn (translation e1)\n    (\\<lambda>x.\n        if x = 0 then 0\n        else x + card (vertices (translation e2)) - 1):\\<lbrakk>e1\\<rbrakk>\n  \\<subseteq> :graph_union\n                (map_graph_fn (translation e1)\n                  (\\<lambda>x.\n                      if x = 0 then 0\n                      else x + card (vertices (translation e2)) - 1))\n                (map_graph_fn (translation e2)\n                  (\\<lambda>x.\n                      if x = 0 then card (vertices (translation e2))\n                      else x)):\\<lbrakk>e1\\<rbrakk>\n\ngoal (3 subgoals):\n 1. \\<And>e1 e2.\n       \\<lbrakk>(0, 1) \\<in> :translation e1:\\<lbrakk>e1\\<rbrakk>;\n        (0, 1) \\<in> :translation e2:\\<lbrakk>e2\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> (0, 1)\n                         \\<in> :translation\n                                 (A_Cmp e1 e2):\\<lbrakk>A_Cmp e1 e2\\<rbrakk>\n 2. \\<And>e.\n       (0, 1) \\<in> :translation e:\\<lbrakk>e\\<rbrakk> \\<Longrightarrow>\n       (0, 1) \\<in> :translation (A_Cnv e):\\<lbrakk>A_Cnv e\\<rbrakk>\n 3. \\<And>x. (0, 1) \\<in> :translation (A_Lbl x):\\<lbrakk>A_Lbl x\\<rbrakk>", "have \"{(card (vertices (translation e2)),1)} \\<subseteq> :map_graph_fn (translation e2) ?f2:\\<lbrakk>e2\\<rbrakk>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {(card (vertices (translation e2)), 1)}\n    \\<subseteq> :map_graph_fn (translation e2)\n                  (\\<lambda>x.\n                      if x = 0 then card (vertices (translation e2))\n                      else x):\\<lbrakk>e2\\<rbrakk>", "using f2"], ["proof (prove)\nusing this:\n  (if 0 = 0 then card (vertices (translation e2)) else 0,\n   if 1 = 0 then card (vertices (translation e2)) else 1)\n  \\<in> :map_graph_fn (translation e2)\n          (\\<lambda>x.\n              if x = 0 then card (vertices (translation e2))\n              else x):\\<lbrakk>e2\\<rbrakk>\n\ngoal (1 subgoal):\n 1. {(card (vertices (translation e2)), 1)}\n    \\<subseteq> :map_graph_fn (translation e2)\n                  (\\<lambda>x.\n                      if x = 0 then card (vertices (translation e2))\n                      else x):\\<lbrakk>e2\\<rbrakk>", "by auto"], ["proof (state)\nthis:\n  {(card (vertices (translation e2)), 1)}\n  \\<subseteq> :map_graph_fn (translation e2)\n                (\\<lambda>x.\n                    if x = 0 then card (vertices (translation e2))\n                    else x):\\<lbrakk>e2\\<rbrakk>\n\ngoal (3 subgoals):\n 1. \\<And>e1 e2.\n       \\<lbrakk>(0, 1) \\<in> :translation e1:\\<lbrakk>e1\\<rbrakk>;\n        (0, 1) \\<in> :translation e2:\\<lbrakk>e2\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> (0, 1)\n                         \\<in> :translation\n                                 (A_Cmp e1 e2):\\<lbrakk>A_Cmp e1 e2\\<rbrakk>\n 2. \\<And>e.\n       (0, 1) \\<in> :translation e:\\<lbrakk>e\\<rbrakk> \\<Longrightarrow>\n       (0, 1) \\<in> :translation (A_Cnv e):\\<lbrakk>A_Cnv e\\<rbrakk>\n 3. \\<And>x. (0, 1) \\<in> :translation (A_Lbl x):\\<lbrakk>A_Lbl x\\<rbrakk>", "also"], ["proof (state)\nthis:\n  {(card (vertices (translation e2)), 1)}\n  \\<subseteq> :map_graph_fn (translation e2)\n                (\\<lambda>x.\n                    if x = 0 then card (vertices (translation e2))\n                    else x):\\<lbrakk>e2\\<rbrakk>\n\ngoal (3 subgoals):\n 1. \\<And>e1 e2.\n       \\<lbrakk>(0, 1) \\<in> :translation e1:\\<lbrakk>e1\\<rbrakk>;\n        (0, 1) \\<in> :translation e2:\\<lbrakk>e2\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> (0, 1)\n                         \\<in> :translation\n                                 (A_Cmp e1 e2):\\<lbrakk>A_Cmp e1 e2\\<rbrakk>\n 2. \\<And>e.\n       (0, 1) \\<in> :translation e:\\<lbrakk>e\\<rbrakk> \\<Longrightarrow>\n       (0, 1) \\<in> :translation (A_Cnv e):\\<lbrakk>A_Cnv e\\<rbrakk>\n 3. \\<And>x. (0, 1) \\<in> :translation (A_Lbl x):\\<lbrakk>A_Lbl x\\<rbrakk>", "have \":map_graph_fn (translation e2) ?f2:\\<lbrakk>e2\\<rbrakk> \\<subseteq> :?G:\\<lbrakk>e2\\<rbrakk>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. :map_graph_fn (translation e2)\n      (\\<lambda>x.\n          if x = 0 then card (vertices (translation e2))\n          else x):\\<lbrakk>e2\\<rbrakk>\n    \\<subseteq> :graph_union\n                  (map_graph_fn (translation e1)\n                    (\\<lambda>x.\n                        if x = 0 then 0\n                        else x + card (vertices (translation e2)) - 1))\n                  (map_graph_fn (translation e2)\n                    (\\<lambda>x.\n                        if x = 0 then card (vertices (translation e2))\n                        else x)):\\<lbrakk>e2\\<rbrakk>", "using graph_union_semantics"], ["proof (prove)\nusing this:\n  (:?A:\\<lbrakk>?e\\<rbrakk>) \\<union> (:?B:\\<lbrakk>?e\\<rbrakk>)\n  \\<subseteq> :graph_union ?A ?B:\\<lbrakk>?e\\<rbrakk>\n\ngoal (1 subgoal):\n 1. :map_graph_fn (translation e2)\n      (\\<lambda>x.\n          if x = 0 then card (vertices (translation e2))\n          else x):\\<lbrakk>e2\\<rbrakk>\n    \\<subseteq> :graph_union\n                  (map_graph_fn (translation e1)\n                    (\\<lambda>x.\n                        if x = 0 then 0\n                        else x + card (vertices (translation e2)) - 1))\n                  (map_graph_fn (translation e2)\n                    (\\<lambda>x.\n                        if x = 0 then card (vertices (translation e2))\n                        else x)):\\<lbrakk>e2\\<rbrakk>", "by blast"], ["proof (state)\nthis:\n  :map_graph_fn (translation e2)\n    (\\<lambda>x.\n        if x = 0 then card (vertices (translation e2))\n        else x):\\<lbrakk>e2\\<rbrakk>\n  \\<subseteq> :graph_union\n                (map_graph_fn (translation e1)\n                  (\\<lambda>x.\n                      if x = 0 then 0\n                      else x + card (vertices (translation e2)) - 1))\n                (map_graph_fn (translation e2)\n                  (\\<lambda>x.\n                      if x = 0 then card (vertices (translation e2))\n                      else x)):\\<lbrakk>e2\\<rbrakk>\n\ngoal (3 subgoals):\n 1. \\<And>e1 e2.\n       \\<lbrakk>(0, 1) \\<in> :translation e1:\\<lbrakk>e1\\<rbrakk>;\n        (0, 1) \\<in> :translation e2:\\<lbrakk>e2\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> (0, 1)\n                         \\<in> :translation\n                                 (A_Cmp e1 e2):\\<lbrakk>A_Cmp e1 e2\\<rbrakk>\n 2. \\<And>e.\n       (0, 1) \\<in> :translation e:\\<lbrakk>e\\<rbrakk> \\<Longrightarrow>\n       (0, 1) \\<in> :translation (A_Cnv e):\\<lbrakk>A_Cnv e\\<rbrakk>\n 3. \\<And>x. (0, 1) \\<in> :translation (A_Lbl x):\\<lbrakk>A_Lbl x\\<rbrakk>", "also"], ["proof (state)\nthis:\n  :map_graph_fn (translation e2)\n    (\\<lambda>x.\n        if x = 0 then card (vertices (translation e2))\n        else x):\\<lbrakk>e2\\<rbrakk>\n  \\<subseteq> :graph_union\n                (map_graph_fn (translation e1)\n                  (\\<lambda>x.\n                      if x = 0 then 0\n                      else x + card (vertices (translation e2)) - 1))\n                (map_graph_fn (translation e2)\n                  (\\<lambda>x.\n                      if x = 0 then card (vertices (translation e2))\n                      else x)):\\<lbrakk>e2\\<rbrakk>\n\ngoal (3 subgoals):\n 1. \\<And>e1 e2.\n       \\<lbrakk>(0, 1) \\<in> :translation e1:\\<lbrakk>e1\\<rbrakk>;\n        (0, 1) \\<in> :translation e2:\\<lbrakk>e2\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> (0, 1)\n                         \\<in> :translation\n                                 (A_Cmp e1 e2):\\<lbrakk>A_Cmp e1 e2\\<rbrakk>\n 2. \\<And>e.\n       (0, 1) \\<in> :translation e:\\<lbrakk>e\\<rbrakk> \\<Longrightarrow>\n       (0, 1) \\<in> :translation (A_Cnv e):\\<lbrakk>A_Cnv e\\<rbrakk>\n 3. \\<And>x. (0, 1) \\<in> :translation (A_Lbl x):\\<lbrakk>A_Lbl x\\<rbrakk>", "have \"(:?G:\\<lbrakk>e1\\<rbrakk>) O (:?G:\\<lbrakk>e2\\<rbrakk>) = :translation (A_Cmp e1 e2):\\<lbrakk>A_Cmp e1 e2\\<rbrakk>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (:graph_union\n       (map_graph_fn (translation e1)\n         (\\<lambda>x.\n             if x = 0 then 0 else x + card (vertices (translation e2)) - 1))\n       (map_graph_fn (translation e2)\n         (\\<lambda>x.\n             if x = 0 then card (vertices (translation e2))\n             else x)):\\<lbrakk>e1\\<rbrakk>) O\n    (:graph_union\n       (map_graph_fn (translation e1)\n         (\\<lambda>x.\n             if x = 0 then 0 else x + card (vertices (translation e2)) - 1))\n       (map_graph_fn (translation e2)\n         (\\<lambda>x.\n             if x = 0 then card (vertices (translation e2))\n             else x)):\\<lbrakk>e2\\<rbrakk>) =\n    :translation (A_Cmp e1 e2):\\<lbrakk>A_Cmp e1 e2\\<rbrakk>", "by (auto simp:Let_def)"], ["proof (state)\nthis:\n  (:graph_union\n     (map_graph_fn (translation e1)\n       (\\<lambda>x.\n           if x = 0 then 0 else x + card (vertices (translation e2)) - 1))\n     (map_graph_fn (translation e2)\n       (\\<lambda>x.\n           if x = 0 then card (vertices (translation e2))\n           else x)):\\<lbrakk>e1\\<rbrakk>) O\n  (:graph_union\n     (map_graph_fn (translation e1)\n       (\\<lambda>x.\n           if x = 0 then 0 else x + card (vertices (translation e2)) - 1))\n     (map_graph_fn (translation e2)\n       (\\<lambda>x.\n           if x = 0 then card (vertices (translation e2))\n           else x)):\\<lbrakk>e2\\<rbrakk>) =\n  :translation (A_Cmp e1 e2):\\<lbrakk>A_Cmp e1 e2\\<rbrakk>\n\ngoal (3 subgoals):\n 1. \\<And>e1 e2.\n       \\<lbrakk>(0, 1) \\<in> :translation e1:\\<lbrakk>e1\\<rbrakk>;\n        (0, 1) \\<in> :translation e2:\\<lbrakk>e2\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> (0, 1)\n                         \\<in> :translation\n                                 (A_Cmp e1 e2):\\<lbrakk>A_Cmp e1 e2\\<rbrakk>\n 2. \\<And>e.\n       (0, 1) \\<in> :translation e:\\<lbrakk>e\\<rbrakk> \\<Longrightarrow>\n       (0, 1) \\<in> :translation (A_Cnv e):\\<lbrakk>A_Cnv e\\<rbrakk>\n 3. \\<And>x. (0, 1) \\<in> :translation (A_Lbl x):\\<lbrakk>A_Lbl x\\<rbrakk>", "finally"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<And>x y.\n              x \\<subseteq> y \\<Longrightarrow>\n              x O {(card (vertices (translation e2)), 1)}\n              \\<subseteq> y O {(card (vertices (translation e2)), 1)};\n   \\<And>x y.\n      x \\<subseteq> y \\<Longrightarrow>\n      x O {(card (vertices (translation e2)), 1)}\n      \\<subseteq> y O {(card (vertices (translation e2)), 1)};\n   \\<And>x y.\n      x \\<subseteq> y \\<Longrightarrow>\n      (:graph_union\n         (map_graph_fn (translation e1)\n           (\\<lambda>x.\n               if x = 0 then 0\n               else x + card (vertices (translation e2)) - 1))\n         (map_graph_fn (translation e2)\n           (\\<lambda>x.\n               if x = 0 then card (vertices (translation e2))\n               else x)):\\<lbrakk>e1\\<rbrakk>) O\n      x\n      \\<subseteq> (:graph_union\n                     (map_graph_fn (translation e1)\n                       (\\<lambda>x.\n                           if x = 0 then 0\n                           else x + card (vertices (translation e2)) - 1))\n                     (map_graph_fn (translation e2)\n                       (\\<lambda>x.\n                           if x = 0 then card (vertices (translation e2))\n                           else x)):\\<lbrakk>e1\\<rbrakk>) O\n                  y;\n   \\<And>x y.\n      x \\<subseteq> y \\<Longrightarrow>\n      (:graph_union\n         (map_graph_fn (translation e1)\n           (\\<lambda>x.\n               if x = 0 then 0\n               else x + card (vertices (translation e2)) - 1))\n         (map_graph_fn (translation e2)\n           (\\<lambda>x.\n               if x = 0 then card (vertices (translation e2))\n               else x)):\\<lbrakk>e1\\<rbrakk>) O\n      x\n      \\<subseteq> (:graph_union\n                     (map_graph_fn (translation e1)\n                       (\\<lambda>x.\n                           if x = 0 then 0\n                           else x + card (vertices (translation e2)) - 1))\n                     (map_graph_fn (translation e2)\n                       (\\<lambda>x.\n                           if x = 0 then card (vertices (translation e2))\n                           else x)):\\<lbrakk>e1\\<rbrakk>) O\n                  y\\<rbrakk>\n  \\<Longrightarrow> {(0, 1)}\n                    \\<subseteq> :translation\n                                  (A_Cmp e1\n                                    e2):\\<lbrakk>A_Cmp e1 e2\\<rbrakk>", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>x y.\n              x \\<subseteq> y \\<Longrightarrow>\n              x O {(card (vertices (translation e2)), 1)}\n              \\<subseteq> y O {(card (vertices (translation e2)), 1)};\n   \\<And>x y.\n      x \\<subseteq> y \\<Longrightarrow>\n      x O {(card (vertices (translation e2)), 1)}\n      \\<subseteq> y O {(card (vertices (translation e2)), 1)};\n   \\<And>x y.\n      x \\<subseteq> y \\<Longrightarrow>\n      (:graph_union\n         (map_graph_fn (translation e1)\n           (\\<lambda>x.\n               if x = 0 then 0\n               else x + card (vertices (translation e2)) - 1))\n         (map_graph_fn (translation e2)\n           (\\<lambda>x.\n               if x = 0 then card (vertices (translation e2))\n               else x)):\\<lbrakk>e1\\<rbrakk>) O\n      x\n      \\<subseteq> (:graph_union\n                     (map_graph_fn (translation e1)\n                       (\\<lambda>x.\n                           if x = 0 then 0\n                           else x + card (vertices (translation e2)) - 1))\n                     (map_graph_fn (translation e2)\n                       (\\<lambda>x.\n                           if x = 0 then card (vertices (translation e2))\n                           else x)):\\<lbrakk>e1\\<rbrakk>) O\n                  y;\n   \\<And>x y.\n      x \\<subseteq> y \\<Longrightarrow>\n      (:graph_union\n         (map_graph_fn (translation e1)\n           (\\<lambda>x.\n               if x = 0 then 0\n               else x + card (vertices (translation e2)) - 1))\n         (map_graph_fn (translation e2)\n           (\\<lambda>x.\n               if x = 0 then card (vertices (translation e2))\n               else x)):\\<lbrakk>e1\\<rbrakk>) O\n      x\n      \\<subseteq> (:graph_union\n                     (map_graph_fn (translation e1)\n                       (\\<lambda>x.\n                           if x = 0 then 0\n                           else x + card (vertices (translation e2)) - 1))\n                     (map_graph_fn (translation e2)\n                       (\\<lambda>x.\n                           if x = 0 then card (vertices (translation e2))\n                           else x)):\\<lbrakk>e1\\<rbrakk>) O\n                  y\\<rbrakk>\n  \\<Longrightarrow> {(0, 1)}\n                    \\<subseteq> :translation\n                                  (A_Cmp e1\n                                    e2):\\<lbrakk>A_Cmp e1 e2\\<rbrakk>\n\ngoal (1 subgoal):\n 1. (0, 1) \\<in> :translation (A_Cmp e1 e2):\\<lbrakk>A_Cmp e1 e2\\<rbrakk>", "by auto"], ["proof (state)\nthis:\n  (0, 1) \\<in> :translation (A_Cmp e1 e2):\\<lbrakk>A_Cmp e1 e2\\<rbrakk>\n\ngoal (2 subgoals):\n 1. \\<And>e.\n       (0, 1) \\<in> :translation e:\\<lbrakk>e\\<rbrakk> \\<Longrightarrow>\n       (0, 1) \\<in> :translation (A_Cnv e):\\<lbrakk>A_Cnv e\\<rbrakk>\n 2. \\<And>x. (0, 1) \\<in> :translation (A_Lbl x):\\<lbrakk>A_Lbl x\\<rbrakk>", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>e.\n       (0, 1) \\<in> :translation e:\\<lbrakk>e\\<rbrakk> \\<Longrightarrow>\n       (0, 1) \\<in> :translation (A_Cnv e):\\<lbrakk>A_Cnv e\\<rbrakk>\n 2. \\<And>x. (0, 1) \\<in> :translation (A_Lbl x):\\<lbrakk>A_Lbl x\\<rbrakk>", "case (A_Cnv e)"], ["proof (state)\nthis:\n  (0, 1) \\<in> :translation e:\\<lbrakk>e\\<rbrakk>\n\ngoal (2 subgoals):\n 1. \\<And>e.\n       (0, 1) \\<in> :translation e:\\<lbrakk>e\\<rbrakk> \\<Longrightarrow>\n       (0, 1) \\<in> :translation (A_Cnv e):\\<lbrakk>A_Cnv e\\<rbrakk>\n 2. \\<And>x. (0, 1) \\<in> :translation (A_Lbl x):\\<lbrakk>A_Lbl x\\<rbrakk>", "from map_graph_in[OF translation_graph this,of \"(\\<lambda>x. if x < (2::nat) then 1 - x else x)\"]"], ["proof (chain)\npicking this:\n  (if 0 < 2 then 1 - 0 else 0, if 1 < 2 then 1 - 1 else 1)\n  \\<in> :map_graph_fn (translation e)\n          (\\<lambda>x. if x < 2 then 1 - x else x):\\<lbrakk>e\\<rbrakk>", "show ?case"], ["proof (prove)\nusing this:\n  (if 0 < 2 then 1 - 0 else 0, if 1 < 2 then 1 - 1 else 1)\n  \\<in> :map_graph_fn (translation e)\n          (\\<lambda>x. if x < 2 then 1 - x else x):\\<lbrakk>e\\<rbrakk>\n\ngoal (1 subgoal):\n 1. (0, 1) \\<in> :translation (A_Cnv e):\\<lbrakk>A_Cnv e\\<rbrakk>", "using map_graph_in[OF translation_graph]"], ["proof (prove)\nusing this:\n  (if 0 < 2 then 1 - 0 else 0, if 1 < 2 then 1 - 1 else 1)\n  \\<in> :map_graph_fn (translation e)\n          (\\<lambda>x. if x < 2 then 1 - x else x):\\<lbrakk>e\\<rbrakk>\n  (?a, ?b) \\<in> :translation ?X1:\\<lbrakk>?e\\<rbrakk> \\<Longrightarrow>\n  (?f ?a, ?f ?b)\n  \\<in> :map_graph_fn (translation ?X1) ?f:\\<lbrakk>?e\\<rbrakk>\n\ngoal (1 subgoal):\n 1. (0, 1) \\<in> :translation (A_Cnv e):\\<lbrakk>A_Cnv e\\<rbrakk>", "by auto"], ["proof (state)\nthis:\n  (0, 1) \\<in> :translation (A_Cnv e):\\<lbrakk>A_Cnv e\\<rbrakk>\n\ngoal (1 subgoal):\n 1. \\<And>x. (0, 1) \\<in> :translation (A_Lbl x):\\<lbrakk>A_Lbl x\\<rbrakk>", "qed (simp add:getRel_def)"], ["", "text \\<open>Lemma 6 is only used on rules of the form @{term \"e\\<^sub>L \\<sqsubseteq> e\\<^sub>R\"}.\n      The requirement of G being a graph can be dropped for one direction.\\<close>"], ["", "lemma maintained_holds[intro]:\n  assumes \":G:\\<lbrakk>e\\<^sub>L\\<rbrakk> \\<subseteq> :G:\\<lbrakk>e\\<^sub>R\\<rbrakk>\" \n  shows \"maintained (transl_rule (e\\<^sub>L \\<sqsubseteq> e\\<^sub>R)) G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. maintained (transl_rule (e\\<^sub>L \\<sqsubseteq> e\\<^sub>R)) G", "proof (cases \"graph G\")"], ["proof (state)\ngoal (2 subgoals):\n 1. graph G \\<Longrightarrow>\n    maintained (transl_rule (e\\<^sub>L \\<sqsubseteq> e\\<^sub>R)) G\n 2. G \\<noteq> restrict G \\<Longrightarrow>\n    maintained (transl_rule (e\\<^sub>L \\<sqsubseteq> e\\<^sub>R)) G", "case True"], ["proof (state)\nthis:\n  graph G\n\ngoal (2 subgoals):\n 1. graph G \\<Longrightarrow>\n    maintained (transl_rule (e\\<^sub>L \\<sqsubseteq> e\\<^sub>R)) G\n 2. G \\<noteq> restrict G \\<Longrightarrow>\n    maintained (transl_rule (e\\<^sub>L \\<sqsubseteq> e\\<^sub>R)) G", "thus ?thesis"], ["proof (prove)\nusing this:\n  graph G\n\ngoal (1 subgoal):\n 1. maintained (transl_rule (e\\<^sub>L \\<sqsubseteq> e\\<^sub>R)) G", "using assms sentence_iff maintained_holds_iff prod.sel"], ["proof (prove)\nusing this:\n  graph G\n  :G:\\<lbrakk>e\\<^sub>L\\<rbrakk> \\<subseteq> :G:\\<lbrakk>e\\<^sub>R\\<rbrakk>\n  ?G \\<Turnstile> ?e\\<^sub>1 \\<sqsubseteq> ?e\\<^sub>2 =\n  (:?G:\\<lbrakk>?e\\<^sub>1\\<rbrakk>\n   \\<subseteq> :?G:\\<lbrakk>?e\\<^sub>2\\<rbrakk>)\n  graph ?G \\<Longrightarrow>\n  maintained\n   (translation ?e\\<^sub>L, translation (A_Int ?e\\<^sub>L ?e\\<^sub>R)) ?G =\n  ?G \\<Turnstile> ?e\\<^sub>L \\<sqsubseteq> ?e\\<^sub>R\n  fst (?x1.0, ?x2.0) = ?x1.0\n  snd (?x1.0, ?x2.0) = ?x2.0\n\ngoal (1 subgoal):\n 1. maintained (transl_rule (e\\<^sub>L \\<sqsubseteq> e\\<^sub>R)) G", "by metis"], ["proof (state)\nthis:\n  maintained (transl_rule (e\\<^sub>L \\<sqsubseteq> e\\<^sub>R)) G\n\ngoal (1 subgoal):\n 1. G \\<noteq> restrict G \\<Longrightarrow>\n    maintained (transl_rule (e\\<^sub>L \\<sqsubseteq> e\\<^sub>R)) G", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. G \\<noteq> restrict G \\<Longrightarrow>\n    maintained (transl_rule (e\\<^sub>L \\<sqsubseteq> e\\<^sub>R)) G", "case False"], ["proof (state)\nthis:\n  G \\<noteq> restrict G\n\ngoal (1 subgoal):\n 1. G \\<noteq> restrict G \\<Longrightarrow>\n    maintained (transl_rule (e\\<^sub>L \\<sqsubseteq> e\\<^sub>R)) G", "thus ?thesis"], ["proof (prove)\nusing this:\n  G \\<noteq> restrict G\n\ngoal (1 subgoal):\n 1. maintained (transl_rule (e\\<^sub>L \\<sqsubseteq> e\\<^sub>R)) G", "by (auto simp:maintained_def graph_homomorphism_def)"], ["proof (state)\nthis:\n  maintained (transl_rule (e\\<^sub>L \\<sqsubseteq> e\\<^sub>R)) G\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma maintained_holds_subset_iff[simp]:\n  assumes \"graph G\"\n  shows \"maintained (transl_rule (e\\<^sub>L \\<sqsubseteq> e\\<^sub>R)) G \\<longleftrightarrow> (:G:\\<lbrakk>e\\<^sub>L\\<rbrakk> \\<subseteq> :G:\\<lbrakk>e\\<^sub>R\\<rbrakk>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. maintained (transl_rule (e\\<^sub>L \\<sqsubseteq> e\\<^sub>R)) G =\n    (:G:\\<lbrakk>e\\<^sub>L\\<rbrakk>\n     \\<subseteq> :G:\\<lbrakk>e\\<^sub>R\\<rbrakk>)", "using assms maintained_holds_iff sentence_iff prod.sel"], ["proof (prove)\nusing this:\n  graph G\n  graph ?G \\<Longrightarrow>\n  maintained\n   (translation ?e\\<^sub>L, translation (A_Int ?e\\<^sub>L ?e\\<^sub>R)) ?G =\n  ?G \\<Turnstile> ?e\\<^sub>L \\<sqsubseteq> ?e\\<^sub>R\n  ?G \\<Turnstile> ?e\\<^sub>1 \\<sqsubseteq> ?e\\<^sub>2 =\n  (:?G:\\<lbrakk>?e\\<^sub>1\\<rbrakk>\n   \\<subseteq> :?G:\\<lbrakk>?e\\<^sub>2\\<rbrakk>)\n  fst (?x1.0, ?x2.0) = ?x1.0\n  snd (?x1.0, ?x2.0) = ?x2.0\n\ngoal (1 subgoal):\n 1. maintained (transl_rule (e\\<^sub>L \\<sqsubseteq> e\\<^sub>R)) G =\n    (:G:\\<lbrakk>e\\<^sub>L\\<rbrakk>\n     \\<subseteq> :G:\\<lbrakk>e\\<^sub>R\\<rbrakk>)", "by metis"], ["", "end"]]}