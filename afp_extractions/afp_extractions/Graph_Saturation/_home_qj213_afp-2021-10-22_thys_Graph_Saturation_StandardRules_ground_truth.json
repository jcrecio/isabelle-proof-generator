{"file_name": "/home/qj213/afp-2021-10-22/thys/Graph_Saturation/StandardRules.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Graph_Saturation", "problem_names": ["lemma conflict_free:\n\":G:\\<lbrakk>A_Lbl l\\<rbrakk> = {} \\<longleftrightarrow> (\\<forall> (l',x,y)\\<in>edges G. l' \\<noteq> l)\"", "lemma top_rule[simp]:\n  assumes \"graph G\"\n  shows \"maintained (top_rule r) G \\<longleftrightarrow> vertices G \\<times> vertices G = getRel r G\"", "lemma nonempty_rule[simp]:\n  assumes \"graph G\"\n  shows \"maintained nonempty_rule G \\<longleftrightarrow> vertices G \\<noteq> {}\"", "lemma are_rules[intro]:\n\"graph_rule nonempty_rule\"\t\n\"graph_rule (top_rule t)\"\t\n\"graph_rule (reflexivity_rule i)\"", "lemma ident_rel_refl:\n  assumes \"graph G\" \"ident_rel idt G\"\n  shows \"maintained (reflexivity_rule idt) G\"", "lemma\n  assumes \"ident_rel idt G\"\n  shows ident_rel_trans:\"maintained (transitive_rule idt) G\"\n    and ident_rel_symm :\"maintained (symmetry_rule idt) G\"\n    and ident_rel_cong :\"maintained (congruence_rule idt l) G\"", "lemma identity_rules_graph_rule:\n  assumes \"x \\<in> identity_rules L\"\n  shows \"graph_rule x\"", "lemma\n  assumes g[intro]:\"graph (G :: ('a, 'b) labeled_graph)\"\n  shows reflexivity_rule: \"maintained (reflexivity_rule l) G \\<Longrightarrow> refl_on (vertices G) (getRel l G)\"\n    and transitive_rule: \"maintained (transitive_rule l) G \\<Longrightarrow> trans (getRel l G)\"\n    and symmetry_rule: \"maintained (symmetry_rule l) G \\<Longrightarrow> sym (getRel l G)\"", "lemma finite_identity_rules[intro]:\n  assumes \"finite L\"\n  shows \"finite (identity_rules L)\"", "lemma equivalence:\n  assumes gr:\"graph G\" and m:\"maintainedA {reflexivity_rule I,transitive_rule I,symmetry_rule I} G\"\n  shows \"equiv (vertices G) (getRel I G)\"", "lemma congruence_rule:\n (* Transitivity is not needed for this proof, but it's more convenient to reuse in this form *)\n  assumes g:\"graph G\"\n      and mA:\"maintainedA {reflexivity_rule I,transitive_rule I,symmetry_rule I} G\"\n      and m:\"maintained (congruence_rule I l) G\"\n    shows \"(\\<lambda> v. getRel l G `` {v}) respects (getRel I G)\" (is \"?g1\")\n      and \"(\\<lambda> v. (getRel l G)\\<inverse> `` {v}) respects (getRel I G)\" (is \"?g2\")", "lemma identity_rules:\n  assumes \"graph G\"\n          \"maintainedA (identity_rules L) G\"\n          \"fst ` edges G \\<subseteq> L\"\n  shows \"\\<exists> f. f o f = f\n         \\<and> ident_rel S_Idt (map_graph_fn G f)\n         \\<and> subgraph (map_graph_fn G f) G\n         \\<and> (\\<forall> l x y. (l,x,y) \\<in> edges G \\<longleftrightarrow> (l,f x,f y) \\<in> edges G)\"", "lemma idemp_embedding_maintained_preserved:\n  assumes subg:\"subgraph (map_graph_fn G f) G\" and f:\"\\<And> x. x\\<in>vertices G \\<Longrightarrow> (f o f) x = f x\"\n      and maint:\"maintained r G\"\n    shows \"maintained r (map_graph_fn G f)\"", "lemma constant_rules:\n  assumes \"standard' C G\" \"c \\<in> C\"\n  shows \"maintained (const_exists c) G\"\n        \"maintained (const_exists_rev c) G\"\n        \"maintained (const_prop c) G\"\n        \"c' \\<in> C \\<Longrightarrow> c \\<noteq> c' \\<Longrightarrow> maintained (const_disj c c') G\"", "lemma constant_rules_graph_rule:\n  assumes \"x \\<in> constant_rules C\"\n  shows \"graph_rule x\"", "lemma finite_constant[intro]:\n  assumes \"finite C\"\n  shows \"finite (constant_rules C)\"", "lemma standard_maintains_constant_rules:\n  assumes \"standard' C G\" \"R\\<in>constant_rules C\"\n  shows \"maintained R G\"", "lemma constant_rules_empty[simp]:\n  \"constant_rules {} = {}\"", "lemma constant_rules_mono:\n  assumes \"C\\<^sub>1 \\<subseteq> C\\<^sub>2\"\n  shows \"constant_rules C\\<^sub>1 \\<subseteq> constant_rules C\\<^sub>2\"", "lemma identity_rules_mono:\n  assumes \"C\\<^sub>1 \\<subseteq> C\\<^sub>2\"\n  shows \"identity_rules C\\<^sub>1 \\<subseteq> identity_rules C\\<^sub>2\"", "lemma standard_rules_mono:\n  assumes \"C\\<^sub>1 \\<subseteq> C\\<^sub>2\" \"L\\<^sub>1 \\<subseteq> L\\<^sub>2\"\n  shows \"standard_rules C\\<^sub>1 L\\<^sub>1 \\<subseteq> standard_rules C\\<^sub>2 L\\<^sub>2\"", "lemma maintainedA_invmono:\n  assumes \"C\\<^sub>1 \\<subseteq> C\\<^sub>2\" \"L\\<^sub>1 \\<subseteq> L\\<^sub>2\"\n  shows \"maintainedA (standard_rules C\\<^sub>2 L\\<^sub>2) G \\<Longrightarrow> maintainedA (standard_rules C\\<^sub>1 L\\<^sub>1) G\"", "lemma maintained_preserved_by_isomorphism:\n  assumes \"\\<And> x. x \\<in> vertices G \\<Longrightarrow> (f \\<circ> g) x = x\" \"graph G\"\n      and \"maintained r (map_graph_fn G g)\"\n  shows \"maintained r G\"", "lemma standard_identity_rules:\n  assumes \"standard' C G\"\n  shows \"maintained (reflexivity_rule S_Idt) G\"\n        \"maintained (transitive_rule S_Idt) G\"\n        \"maintained (symmetry_rule S_Idt) G\"\n        \"maintained (congruence_rule S_Idt l) G\"", "lemma standard_maintains_identity_rules:\n  assumes \"standard' C G\" \"x\\<in>identity_rules L\"\n  shows \"maintained x G\"", "lemma standard_maintains_rules:\n  assumes \"standard' C G\"\n  shows \"maintainedA (standard_rules C L) G\"", "lemma standard_rules_edges:\n  assumes \"(lhs, rhs) \\<in> standard_rules C L\" \"(l, x, y) \\<in> edges rhs\"\n  shows \"(l = S_Bot \\<Longrightarrow> thesis) \\<Longrightarrow>\n         (l = S_Top \\<Longrightarrow> thesis) \\<Longrightarrow>\n         (l = S_Idt \\<Longrightarrow> thesis) \\<Longrightarrow>\n         (l \\<in> S_Const ` C \\<Longrightarrow> thesis) \\<Longrightarrow>\n         (l \\<in> L \\<Longrightarrow> thesis) \\<Longrightarrow> thesis\"", "lemma maintained_standard_noconstants:\n  assumes mnt:\"maintainedA (standard_rules C L) G'\"\n  and gr:\"graph (G'::('V Standard_Constant, 'V') labeled_graph)\"\n         \"fst ` edges G' \\<subseteq> L\" (* Graph on labels L *)\n  and cf:\"getRel S_Bot G' = {}\" (* Conflict free *)\nshows \"\\<exists> f g (G::('V, 'V') std_graph). G = map_graph_fn G (f o g) \\<and> G = map_graph_fn G' f\n              \\<and> subgraph (map_graph_fn G g) G'\n              \\<and> standard' C G\n              \\<and> (\\<forall> r. maintained r G' \\<longrightarrow> maintained r G)\n              \\<and> (\\<forall> x y e. x \\<in> vertices G' \\<longrightarrow> y \\<in> vertices G' \\<longrightarrow> \n                          (g (f x), g (f y)) \\<in> :map_graph_fn G g:\\<lbrakk>e\\<rbrakk> \\<longrightarrow> (x,y) \\<in> :G':\\<lbrakk>e\\<rbrakk>)\""], "translations": [["", "lemma conflict_free:\n\":G:\\<lbrakk>A_Lbl l\\<rbrakk> = {} \\<longleftrightarrow> (\\<forall> (l',x,y)\\<in>edges G. l' \\<noteq> l)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (:G:\\<lbrakk>A_Lbl l\\<rbrakk> = {}) =\n    (\\<forall>(l', x, y)\\<in>edges G. l' \\<noteq> l)", "by (auto simp:getRel_def)"], ["", "text \\<open>Definition 17, abstractly.\n      It's unlikely that we wish to use the top rule for any symbol except top,\n      but stating it abstractly makes it consistent with the other rules.\\<close>"], ["", "(* Definition 17 *)"], ["", "definition top_rule :: \"'l \\<Rightarrow> ('l,nat) Graph_PreRule\" where\t\n\"top_rule t = (LG {} {0,1},LG {(t,0,1)} {0,1})\""], ["", "text \\<open>Proof that definition 17 does what it says it does.\\<close>"], ["", "lemma top_rule[simp]:\n  assumes \"graph G\"\n  shows \"maintained (top_rule r) G \\<longleftrightarrow> vertices G \\<times> vertices G = getRel r G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. maintained (top_rule r) G =\n    (vertices G \\<times> vertices G = getRel r G)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. maintained (top_rule r) G \\<Longrightarrow>\n    vertices G \\<times> vertices G = getRel r G\n 2. vertices G \\<times> vertices G = getRel r G \\<Longrightarrow>\n    maintained (top_rule r) G", "assume a:\"maintained (top_rule r) G\""], ["proof (state)\nthis:\n  maintained (top_rule r) G\n\ngoal (2 subgoals):\n 1. maintained (top_rule r) G \\<Longrightarrow>\n    vertices G \\<times> vertices G = getRel r G\n 2. vertices G \\<times> vertices G = getRel r G \\<Longrightarrow>\n    maintained (top_rule r) G", "{"], ["proof (state)\nthis:\n  maintained (top_rule r) G\n\ngoal (2 subgoals):\n 1. maintained (top_rule r) G \\<Longrightarrow>\n    vertices G \\<times> vertices G = getRel r G\n 2. vertices G \\<times> vertices G = getRel r G \\<Longrightarrow>\n    maintained (top_rule r) G", "fix a b"], ["proof (state)\ngoal (2 subgoals):\n 1. maintained (top_rule r) G \\<Longrightarrow>\n    vertices G \\<times> vertices G = getRel r G\n 2. vertices G \\<times> vertices G = getRel r G \\<Longrightarrow>\n    maintained (top_rule r) G", "assume \"a \\<in> vertices G\" \"b \\<in> vertices G\""], ["proof (state)\nthis:\n  a \\<in> vertices G\n  b \\<in> vertices G\n\ngoal (2 subgoals):\n 1. maintained (top_rule r) G \\<Longrightarrow>\n    vertices G \\<times> vertices G = getRel r G\n 2. vertices G \\<times> vertices G = getRel r G \\<Longrightarrow>\n    maintained (top_rule r) G", "hence \"graph_homomorphism (LG {} {0, 1}) G {(0::nat,a),(1,b)}\""], ["proof (prove)\nusing this:\n  a \\<in> vertices G\n  b \\<in> vertices G\n\ngoal (1 subgoal):\n 1. graph_homomorphism (LG {} {0, 1}) G {(0, a), (1, b)}", "using assms"], ["proof (prove)\nusing this:\n  a \\<in> vertices G\n  b \\<in> vertices G\n  graph G\n\ngoal (1 subgoal):\n 1. graph_homomorphism (LG {} {0, 1}) G {(0, a), (1, b)}", "unfolding graph_homomorphism_def univalent_def"], ["proof (prove)\nusing this:\n  a \\<in> vertices G\n  b \\<in> vertices G\n  graph G\n\ngoal (1 subgoal):\n 1. vertices (LG {} {0, 1}) = Domain {(0, a), (1, b)} \\<and>\n    graph (LG {} {0, 1}) \\<and>\n    graph G \\<and>\n    {(0, a), (1, b)} `` vertices (LG {} {0, 1})\n    \\<subseteq> vertices G \\<and>\n    (\\<forall>x y z.\n        (x, y) \\<in> {(0, a), (1, b)} \\<and>\n        (x, z) \\<in> {(0, a), (1, b)} \\<longrightarrow>\n        z = y) \\<and>\n    edge_preserving {(0, a), (1, b)} (edges (LG {} {0, 1})) (edges G)", "by auto"], ["proof (state)\nthis:\n  graph_homomorphism (LG {} {0, 1}) G {(0, a), (1, b)}\n\ngoal (2 subgoals):\n 1. maintained (top_rule r) G \\<Longrightarrow>\n    vertices G \\<times> vertices G = getRel r G\n 2. vertices G \\<times> vertices G = getRel r G \\<Longrightarrow>\n    maintained (top_rule r) G", "with a[unfolded maintained_def top_rule_def] extensible_refl_concr"], ["proof (chain)\npicking this:\n  \\<forall>f.\n     graph_homomorphism (fst (LG {} {0, 1}, LG {(r, 0, 1)} {0, 1})) G\n      f \\<longrightarrow>\n     extensible (LG {} {0, 1}, LG {(r, 0, 1)} {0, 1}) G f\n  graph_homomorphism (LG ?e\\<^sub>1 ?v) ?G ?f \\<Longrightarrow>\n  extensible (LG ?e\\<^sub>1 ?v, LG ?e\\<^sub>2 ?v) ?G ?f =\n  graph_homomorphism (LG ?e\\<^sub>2 ?v) ?G ?f\n  graph_homomorphism (LG {} {0, 1}) G {(0, a), (1, b)}", "have \"graph_homomorphism (LG {(r, 0, 1)} {0::nat, 1}) G {(0::nat, a), (1, b)}\""], ["proof (prove)\nusing this:\n  \\<forall>f.\n     graph_homomorphism (fst (LG {} {0, 1}, LG {(r, 0, 1)} {0, 1})) G\n      f \\<longrightarrow>\n     extensible (LG {} {0, 1}, LG {(r, 0, 1)} {0, 1}) G f\n  graph_homomorphism (LG ?e\\<^sub>1 ?v) ?G ?f \\<Longrightarrow>\n  extensible (LG ?e\\<^sub>1 ?v, LG ?e\\<^sub>2 ?v) ?G ?f =\n  graph_homomorphism (LG ?e\\<^sub>2 ?v) ?G ?f\n  graph_homomorphism (LG {} {0, 1}) G {(0, a), (1, b)}\n\ngoal (1 subgoal):\n 1. graph_homomorphism (LG {(r, 0, 1)} {0, 1}) G {(0, a), (1, b)}", "by simp"], ["proof (state)\nthis:\n  graph_homomorphism (LG {(r, 0, 1)} {0, 1}) G {(0, a), (1, b)}\n\ngoal (2 subgoals):\n 1. maintained (top_rule r) G \\<Longrightarrow>\n    vertices G \\<times> vertices G = getRel r G\n 2. vertices G \\<times> vertices G = getRel r G \\<Longrightarrow>\n    maintained (top_rule r) G", "hence \"(a, b) \\<in> getRel r G\""], ["proof (prove)\nusing this:\n  graph_homomorphism (LG {(r, 0, 1)} {0, 1}) G {(0, a), (1, b)}\n\ngoal (1 subgoal):\n 1. (a, b) \\<in> getRel r G", "unfolding graph_homomorphism_def2 graph_union_iff getRel_def"], ["proof (prove)\nusing this:\n  vertices (LG {(r, 0, 1)} {0, 1}) = Domain {(0, a), (1, b)} \\<and>\n  univalent {(0, a), (1, b)} \\<and>\n  graph (LG {(r, 0, 1)} {0, 1}) \\<and>\n  graph G \\<and>\n  edges (map_graph {(0, a), (1, b)} (LG {(r, 0, 1)} {0, 1}))\n  \\<subseteq> edges G \\<and>\n  vertices (map_graph {(0, a), (1, b)} (LG {(r, 0, 1)} {0, 1}))\n  \\<subseteq> vertices G\n\ngoal (1 subgoal):\n 1. (a, b) \\<in> {(x, y). (r, x, y) \\<in> edges G}", "by auto"], ["proof (state)\nthis:\n  (a, b) \\<in> getRel r G\n\ngoal (2 subgoals):\n 1. maintained (top_rule r) G \\<Longrightarrow>\n    vertices G \\<times> vertices G = getRel r G\n 2. vertices G \\<times> vertices G = getRel r G \\<Longrightarrow>\n    maintained (top_rule r) G", "}"], ["proof (state)\nthis:\n  \\<lbrakk>?a2 \\<in> vertices G; ?b2 \\<in> vertices G\\<rbrakk>\n  \\<Longrightarrow> (?a2, ?b2) \\<in> getRel r G\n\ngoal (2 subgoals):\n 1. maintained (top_rule r) G \\<Longrightarrow>\n    vertices G \\<times> vertices G = getRel r G\n 2. vertices G \\<times> vertices G = getRel r G \\<Longrightarrow>\n    maintained (top_rule r) G", "thus \"vertices G \\<times> vertices G = getRel r G\""], ["proof (prove)\nusing this:\n  \\<lbrakk>?a2 \\<in> vertices G; ?b2 \\<in> vertices G\\<rbrakk>\n  \\<Longrightarrow> (?a2, ?b2) \\<in> getRel r G\n\ngoal (1 subgoal):\n 1. vertices G \\<times> vertices G = getRel r G", "using getRel_dom[OF assms]"], ["proof (prove)\nusing this:\n  \\<lbrakk>?a2 \\<in> vertices G; ?b2 \\<in> vertices G\\<rbrakk>\n  \\<Longrightarrow> (?a2, ?b2) \\<in> getRel r G\n  (?a, ?b) \\<in> getRel ?l G \\<Longrightarrow> ?a \\<in> vertices G\n  (?a, ?b) \\<in> getRel ?l G \\<Longrightarrow> ?b \\<in> vertices G\n\ngoal (1 subgoal):\n 1. vertices G \\<times> vertices G = getRel r G", "by auto"], ["proof (state)\nthis:\n  vertices G \\<times> vertices G = getRel r G\n\ngoal (1 subgoal):\n 1. vertices G \\<times> vertices G = getRel r G \\<Longrightarrow>\n    maintained (top_rule r) G", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. vertices G \\<times> vertices G = getRel r G \\<Longrightarrow>\n    maintained (top_rule r) G", "assume a:\"vertices G \\<times> vertices G = getRel r G\""], ["proof (state)\nthis:\n  vertices G \\<times> vertices G = getRel r G\n\ngoal (1 subgoal):\n 1. vertices G \\<times> vertices G = getRel r G \\<Longrightarrow>\n    maintained (top_rule r) G", "{"], ["proof (state)\nthis:\n  vertices G \\<times> vertices G = getRel r G\n\ngoal (1 subgoal):\n 1. vertices G \\<times> vertices G = getRel r G \\<Longrightarrow>\n    maintained (top_rule r) G", "fix f"], ["proof (state)\ngoal (1 subgoal):\n 1. vertices G \\<times> vertices G = getRel r G \\<Longrightarrow>\n    maintained (top_rule r) G", "assume a2:\"graph_homomorphism (fst (top_rule r)) G f\""], ["proof (state)\nthis:\n  graph_homomorphism (fst (top_rule r)) G f\n\ngoal (1 subgoal):\n 1. vertices G \\<times> vertices G = getRel r G \\<Longrightarrow>\n    maintained (top_rule r) G", "hence f:\"f `` {0, 1} \\<subseteq> vertices G\" \"on_triple f `` {} \\<subseteq> edges G\"\n          \"univalent f\" \"Domain f = {0, 1}\""], ["proof (prove)\nusing this:\n  graph_homomorphism (fst (top_rule r)) G f\n\ngoal (1 subgoal):\n 1. (f `` {0, 1} \\<subseteq> vertices G &&&\n     on_triple f `` {} \\<subseteq> edges G) &&&\n    univalent f &&& Domain f = {0, 1}", "unfolding top_rule_def prod.sel graph_homomorphism_concr_graph[OF assms graph_empty_e]"], ["proof (prove)\nusing this:\n  f `` {0, 1} \\<subseteq> vertices G \\<and>\n  on_triple f `` {} \\<subseteq> edges G \\<and>\n  univalent f \\<and> Domain f = {0, 1}\n\ngoal (1 subgoal):\n 1. (f `` {0, 1} \\<subseteq> vertices G &&&\n     on_triple f `` {} \\<subseteq> edges G) &&&\n    univalent f &&& Domain f = {0, 1}", "by argo+"], ["proof (state)\nthis:\n  f `` {0, 1} \\<subseteq> vertices G\n  on_triple f `` {} \\<subseteq> edges G\n  univalent f\n  Domain f = {0, 1}\n\ngoal (1 subgoal):\n 1. vertices G \\<times> vertices G = getRel r G \\<Longrightarrow>\n    maintained (top_rule r) G", "from a2"], ["proof (chain)\npicking this:\n  graph_homomorphism (fst (top_rule r)) G f", "have ih:\"graph_homomorphism (LG {} {0, 1}) G f\""], ["proof (prove)\nusing this:\n  graph_homomorphism (fst (top_rule r)) G f\n\ngoal (1 subgoal):\n 1. graph_homomorphism (LG {} {0, 1}) G f", "unfolding top_rule_def"], ["proof (prove)\nusing this:\n  graph_homomorphism (fst (LG {} {0, 1}, LG {(r, 0, 1)} {0, 1})) G f\n\ngoal (1 subgoal):\n 1. graph_homomorphism (LG {} {0, 1}) G f", "by auto"], ["proof (state)\nthis:\n  graph_homomorphism (LG {} {0, 1}) G f\n\ngoal (1 subgoal):\n 1. vertices G \\<times> vertices G = getRel r G \\<Longrightarrow>\n    maintained (top_rule r) G", "have \"extensible (top_rule r) G f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. extensible (top_rule r) G f", "unfolding top_rule_def extensible_refl_concr[OF ih]\n      graph_homomorphism_concr_graph[OF assms graph_single]"], ["proof (prove)\ngoal (1 subgoal):\n 1. f `` {0, 1} \\<subseteq> vertices G \\<and>\n    on_triple f `` {(r, 0, 1)} \\<subseteq> edges G \\<and>\n    univalent f \\<and> Domain f = {0, 1}", "using f a[unfolded getRel_def]"], ["proof (prove)\nusing this:\n  f `` {0, 1} \\<subseteq> vertices G\n  on_triple f `` {} \\<subseteq> edges G\n  univalent f\n  Domain f = {0, 1}\n  vertices G \\<times> vertices G = {(x, y). (r, x, y) \\<in> edges G}\n\ngoal (1 subgoal):\n 1. f `` {0, 1} \\<subseteq> vertices G \\<and>\n    on_triple f `` {(r, 0, 1)} \\<subseteq> edges G \\<and>\n    univalent f \\<and> Domain f = {0, 1}", "by fastforce"], ["proof (state)\nthis:\n  extensible (top_rule r) G f\n\ngoal (1 subgoal):\n 1. vertices G \\<times> vertices G = getRel r G \\<Longrightarrow>\n    maintained (top_rule r) G", "}"], ["proof (state)\nthis:\n  graph_homomorphism (fst (top_rule r)) G ?f2 \\<Longrightarrow>\n  extensible (top_rule r) G ?f2\n\ngoal (1 subgoal):\n 1. vertices G \\<times> vertices G = getRel r G \\<Longrightarrow>\n    maintained (top_rule r) G", "thus \"maintained (top_rule r) G\""], ["proof (prove)\nusing this:\n  graph_homomorphism (fst (top_rule r)) G ?f2 \\<Longrightarrow>\n  extensible (top_rule r) G ?f2\n\ngoal (1 subgoal):\n 1. maintained (top_rule r) G", "unfolding maintained_def"], ["proof (prove)\nusing this:\n  graph_homomorphism (fst (top_rule r)) G ?f2 \\<Longrightarrow>\n  extensible (top_rule r) G ?f2\n\ngoal (1 subgoal):\n 1. \\<forall>f.\n       graph_homomorphism (fst (top_rule r)) G f \\<longrightarrow>\n       extensible (top_rule r) G f", "by auto"], ["proof (state)\nthis:\n  maintained (top_rule r) G\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>Definition 18.\\<close>"], ["", "(* Definition 18 *)"], ["", "definition nonempty_rule :: \"('l,nat) Graph_PreRule\" where\n\"nonempty_rule = (LG {} {},LG {} {0})\""], ["", "text \\<open>Proof that definition 18 does what it says it does.\\<close>"], ["", "lemma nonempty_rule[simp]:\n  assumes \"graph G\"\n  shows \"maintained nonempty_rule G \\<longleftrightarrow> vertices G \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. maintained nonempty_rule G = (vertices G \\<noteq> {})", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. maintained nonempty_rule G = (vertices G \\<noteq> {})", "have \"vertices G = {} \\<Longrightarrow> graph_homomorphism (LG {} {0}) G x \\<Longrightarrow> False\"\n       \"v \\<in> vertices G \\<Longrightarrow> graph_homomorphism (LG {} {0}) G {(0,v)}\"\n       for v::\"'b\" and x::\"(nat \\<times> 'b) set\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lbrakk>vertices G = {}; graph_homomorphism (LG {} {0}) G x\\<rbrakk>\n     \\<Longrightarrow> False) &&&\n    (v \\<in> vertices G \\<Longrightarrow>\n     graph_homomorphism (LG {} {0::'c}) G {(0::'c, v)})", "unfolding graph_homomorphism_concr_graph[OF assms graph_empty_e] univalent_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lbrakk>vertices G = {};\n      x `` {0} \\<subseteq> vertices G \\<and>\n      on_triple x `` {} \\<subseteq> edges G \\<and>\n      (\\<forall>xa y z.\n          (xa, y) \\<in> x \\<and> (xa, z) \\<in> x \\<longrightarrow>\n          z = y) \\<and>\n      Domain x = {0}\\<rbrakk>\n     \\<Longrightarrow> False) &&&\n    (v \\<in> vertices G \\<Longrightarrow>\n     {(0::'c, v)} `` {0::'c} \\<subseteq> vertices G \\<and>\n     on_triple {(0::'c, v)} `` {} \\<subseteq> edges G \\<and>\n     (\\<forall>x y z.\n         (x, y) \\<in> {(0::'c, v)} \\<and>\n         (x, z) \\<in> {(0::'c, v)} \\<longrightarrow>\n         z = y) \\<and>\n     Domain {(0::'c, v)} = {0::'c})", "by blast+"], ["proof (state)\nthis:\n  \\<lbrakk>vertices G = {}; graph_homomorphism (LG {} {0}) G ?x1\\<rbrakk>\n  \\<Longrightarrow> False\n  ?v1 \\<in> vertices G \\<Longrightarrow>\n  graph_homomorphism (LG {} {0::?'c2}) G {(0::?'c2, ?v1)}\n\ngoal (1 subgoal):\n 1. maintained nonempty_rule G = (vertices G \\<noteq> {})", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>vertices G = {}; graph_homomorphism (LG {} {0}) G ?x1\\<rbrakk>\n  \\<Longrightarrow> False\n  ?v1 \\<in> vertices G \\<Longrightarrow>\n  graph_homomorphism (LG {} {0::?'c2}) G {(0::?'c2, ?v1)}\n\ngoal (1 subgoal):\n 1. maintained nonempty_rule G = (vertices G \\<noteq> {})", "unfolding nonempty_rule_def maintained_def extensible_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>vertices G = {}; graph_homomorphism (LG {} {0}) G ?x1\\<rbrakk>\n  \\<Longrightarrow> False\n  ?v1 \\<in> vertices G \\<Longrightarrow>\n  graph_homomorphism (LG {} {0::?'c2}) G {(0::?'c2, ?v1)}\n\ngoal (1 subgoal):\n 1. (\\<forall>f.\n        graph_homomorphism (fst (LG {} {}, LG {} {0})) G f \\<longrightarrow>\n        (\\<exists>g.\n            graph_homomorphism (snd (LG {} {}, LG {} {0})) G g \\<and>\n            agree_on (fst (LG {} {}, LG {} {0})) f g)) =\n    (vertices G \\<noteq> {})", "by (auto intro:assms)"], ["proof (state)\nthis:\n  maintained nonempty_rule G = (vertices G \\<noteq> {})\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>Definition 19.\\<close>"], ["", "definition reflexivity_rule :: \"'l \\<Rightarrow> ('l,nat) Graph_PreRule\" where\n  \"reflexivity_rule t = (LG {} {0},LG {(t,0,0)} {0})\""], ["", "definition symmetry_rule :: \"'l \\<Rightarrow> ('l,nat) Graph_PreRule\" where\n\"symmetry_rule t = (transl_rule (A_Cnv (A_Lbl t) \\<sqsubseteq> A_Lbl t))\""], ["", "definition transitive_rule :: \"'l \\<Rightarrow> ('l,nat) Graph_PreRule\" where\n\"transitive_rule t = (transl_rule (A_Cmp (A_Lbl t) (A_Lbl t) \\<sqsubseteq> A_Lbl t))\""], ["", "definition congruence_rule :: \"'l \\<Rightarrow> 'l \\<Rightarrow> ('l,nat) Graph_PreRule\" where\n\"congruence_rule t l = (transl_rule (A_Cmp (A_Cmp (A_Lbl t) (A_Lbl l)) (A_Lbl t) \\<sqsubseteq> A_Lbl l))\""], ["", "abbreviation congruence_rules :: \"'l \\<Rightarrow> 'l set \\<Rightarrow> ('l,nat) Graph_PreRule set\"\n    where\n\"congruence_rules t L \\<equiv> congruence_rule t ` L\""], ["", "lemma are_rules[intro]:\n\"graph_rule nonempty_rule\"\t\n\"graph_rule (top_rule t)\"\t\n\"graph_rule (reflexivity_rule i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. graph_rule nonempty_rule &&&\n    graph_rule (top_rule t) &&& graph_rule (reflexivity_rule i)", "unfolding reflexivity_rule_def top_rule_def nonempty_rule_def graph_homomorphism_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (vertices (fst (LG {} {}, LG {} {0})) =\n     Domain (Id_on (vertices (fst (LG {} {}, LG {} {0})))) \\<and>\n     graph (fst (LG {} {}, LG {} {0})) \\<and>\n     graph (snd (LG {} {}, LG {} {0})) \\<and>\n     Id_on (vertices (fst (LG {} {}, LG {} {0}))) ``\n     vertices (fst (LG {} {}, LG {} {0}))\n     \\<subseteq> vertices (snd (LG {} {}, LG {} {0})) \\<and>\n     univalent (Id_on (vertices (fst (LG {} {}, LG {} {0})))) \\<and>\n     edge_preserving (Id_on (vertices (fst (LG {} {}, LG {} {0}))))\n      (edges (fst (LG {} {}, LG {} {0})))\n      (edges (snd (LG {} {}, LG {} {0})))) \\<and>\n    finite_graph (snd (LG {} {}, LG {} {0})) &&&\n    (vertices (fst (LG {} {0, 1}, LG {(t, 0, 1)} {0, 1})) =\n     Domain\n      (Id_on (vertices (fst (LG {} {0, 1}, LG {(t, 0, 1)} {0, 1})))) \\<and>\n     graph (fst (LG {} {0, 1}, LG {(t, 0, 1)} {0, 1})) \\<and>\n     graph (snd (LG {} {0, 1}, LG {(t, 0, 1)} {0, 1})) \\<and>\n     Id_on (vertices (fst (LG {} {0, 1}, LG {(t, 0, 1)} {0, 1}))) ``\n     vertices (fst (LG {} {0, 1}, LG {(t, 0, 1)} {0, 1}))\n     \\<subseteq> vertices (snd (LG {} {0, 1}, LG {(t, 0, 1)} {0, 1})) \\<and>\n     univalent\n      (Id_on (vertices (fst (LG {} {0, 1}, LG {(t, 0, 1)} {0, 1})))) \\<and>\n     edge_preserving\n      (Id_on (vertices (fst (LG {} {0, 1}, LG {(t, 0, 1)} {0, 1}))))\n      (edges (fst (LG {} {0, 1}, LG {(t, 0, 1)} {0, 1})))\n      (edges (snd (LG {} {0, 1}, LG {(t, 0, 1)} {0, 1})))) \\<and>\n    finite_graph (snd (LG {} {0, 1}, LG {(t, 0, 1)} {0, 1})) &&&\n    (vertices (fst (LG {} {0}, LG {(i, 0, 0)} {0})) =\n     Domain (Id_on (vertices (fst (LG {} {0}, LG {(i, 0, 0)} {0})))) \\<and>\n     graph (fst (LG {} {0}, LG {(i, 0, 0)} {0})) \\<and>\n     graph (snd (LG {} {0}, LG {(i, 0, 0)} {0})) \\<and>\n     Id_on (vertices (fst (LG {} {0}, LG {(i, 0, 0)} {0}))) ``\n     vertices (fst (LG {} {0}, LG {(i, 0, 0)} {0}))\n     \\<subseteq> vertices (snd (LG {} {0}, LG {(i, 0, 0)} {0})) \\<and>\n     univalent\n      (Id_on (vertices (fst (LG {} {0}, LG {(i, 0, 0)} {0})))) \\<and>\n     edge_preserving\n      (Id_on (vertices (fst (LG {} {0}, LG {(i, 0, 0)} {0}))))\n      (edges (fst (LG {} {0}, LG {(i, 0, 0)} {0})))\n      (edges (snd (LG {} {0}, LG {(i, 0, 0)} {0})))) \\<and>\n    finite_graph (snd (LG {} {0}, LG {(i, 0, 0)} {0}))", "by auto"], ["", "text \\<open>Just before Lemma 7, we remark that if I is an identity, it maintains the identity rules.\\<close>"], ["", "lemma ident_rel_refl:\n  assumes \"graph G\" \"ident_rel idt G\"\n  shows \"maintained (reflexivity_rule idt) G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. maintained (reflexivity_rule idt) G", "unfolding reflexivity_rule_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. maintained (LG {} {0}, LG {(idt, 0, 0)} {0}) G", "proof(rule maintainedI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       graph_homomorphism (LG {} {0}) G f \\<Longrightarrow>\n       extensible (LG {} {0}, LG {(idt, 0, 0)} {0}) G f", "fix f"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       graph_homomorphism (LG {} {0}) G f \\<Longrightarrow>\n       extensible (LG {} {0}, LG {(idt, 0, 0)} {0}) G f", "assume \"graph_homomorphism (LG {} {0::nat}) G f\""], ["proof (state)\nthis:\n  graph_homomorphism (LG {} {0}) G f\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       graph_homomorphism (LG {} {0}) G f \\<Longrightarrow>\n       extensible (LG {} {0}, LG {(idt, 0, 0)} {0}) G f", "hence f:\"Domain f = {0}\" \"graph G\" \"f `` {0} \\<subseteq> vertices G\" \"univalent f\""], ["proof (prove)\nusing this:\n  graph_homomorphism (LG {} {0}) G f\n\ngoal (1 subgoal):\n 1. (Domain f = {0} &&& graph G) &&&\n    f `` {0} \\<subseteq> vertices G &&& univalent f", "unfolding graph_homomorphism_def"], ["proof (prove)\nusing this:\n  vertices (LG {} {0}) = Domain f \\<and>\n  graph (LG {} {0}) \\<and>\n  graph G \\<and>\n  f `` vertices (LG {} {0}) \\<subseteq> vertices G \\<and>\n  univalent f \\<and> edge_preserving f (edges (LG {} {0})) (edges G)\n\ngoal (1 subgoal):\n 1. (Domain f = {0} &&& graph G) &&&\n    f `` {0} \\<subseteq> vertices G &&& univalent f", "by force+"], ["proof (state)\nthis:\n  Domain f = {0}\n  graph G\n  f `` {0} \\<subseteq> vertices G\n  univalent f\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       graph_homomorphism (LG {} {0}) G f \\<Longrightarrow>\n       extensible (LG {} {0}, LG {(idt, 0, 0)} {0}) G f", "from assms(2) univalentD[OF f(4)] f(3)"], ["proof (chain)\npicking this:\n  ident_rel idt G\n  \\<lbrakk>(?x, ?y) \\<in> f; (?x, ?z) \\<in> f\\<rbrakk>\n  \\<Longrightarrow> ?z = ?y\n  f `` {0} \\<subseteq> vertices G", "have \"edge_preserving f {(idt, 0, 0)} (edges G)\""], ["proof (prove)\nusing this:\n  ident_rel idt G\n  \\<lbrakk>(?x, ?y) \\<in> f; (?x, ?z) \\<in> f\\<rbrakk>\n  \\<Longrightarrow> ?z = ?y\n  f `` {0} \\<subseteq> vertices G\n\ngoal (1 subgoal):\n 1. edge_preserving f {(idt, 0, 0)} (edges G)", "unfolding edge_preserving"], ["proof (prove)\nusing this:\n  ident_rel idt G\n  \\<lbrakk>(?x, ?y) \\<in> f; (?x, ?z) \\<in> f\\<rbrakk>\n  \\<Longrightarrow> ?z = ?y\n  f `` {0} \\<subseteq> vertices G\n\ngoal (1 subgoal):\n 1. on_triple f `` {(idt, 0, 0)} \\<subseteq> edges G", "by (auto simp:getRel_def set_eq_iff image_def)"], ["proof (state)\nthis:\n  edge_preserving f {(idt, 0, 0)} (edges G)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       graph_homomorphism (LG {} {0}) G f \\<Longrightarrow>\n       extensible (LG {} {0}, LG {(idt, 0, 0)} {0}) G f", "with f"], ["proof (chain)\npicking this:\n  Domain f = {0}\n  graph G\n  f `` {0} \\<subseteq> vertices G\n  univalent f\n  edge_preserving f {(idt, 0, 0)} (edges G)", "have \"graph_homomorphism (LG {(idt, 0, 0)} {0}) G f\"\n              \"agree_on (LG {} {0}) f f\""], ["proof (prove)\nusing this:\n  Domain f = {0}\n  graph G\n  f `` {0} \\<subseteq> vertices G\n  univalent f\n  edge_preserving f {(idt, 0, 0)} (edges G)\n\ngoal (1 subgoal):\n 1. graph_homomorphism (LG {(idt, 0, 0)} {0}) G f &&&\n    agree_on (LG {} {0}) f f", "using assms"], ["proof (prove)\nusing this:\n  Domain f = {0}\n  graph G\n  f `` {0} \\<subseteq> vertices G\n  univalent f\n  edge_preserving f {(idt, 0, 0)} (edges G)\n  graph G\n  ident_rel idt G\n\ngoal (1 subgoal):\n 1. graph_homomorphism (LG {(idt, 0, 0)} {0}) G f &&&\n    agree_on (LG {} {0}) f f", "unfolding graph_homomorphism_def labeled_graph.sel agree_on_def univalent_def"], ["proof (prove)\nusing this:\n  Domain f = {0}\n  graph G\n  f `` {0} \\<subseteq> vertices G\n  \\<forall>x y z.\n     (x, y) \\<in> f \\<and> (x, z) \\<in> f \\<longrightarrow> z = y\n  edge_preserving f {(idt, 0, 0)} (edges G)\n  graph G\n  ident_rel idt G\n\ngoal (1 subgoal):\n 1. {0} = Domain f \\<and>\n    graph (LG {(idt, 0, 0)} {0}) \\<and>\n    graph G \\<and>\n    f `` {0} \\<subseteq> vertices G \\<and>\n    (\\<forall>x y z.\n        (x, y) \\<in> f \\<and> (x, z) \\<in> f \\<longrightarrow> z = y) \\<and>\n    edge_preserving f {(idt, 0, 0)} (edges G) &&&\n    \\<forall>v\\<in>{0}. f `` {v} = f `` {v}", "by auto"], ["proof (state)\nthis:\n  graph_homomorphism (LG {(idt, 0, 0)} {0}) G f\n  agree_on (LG {} {0}) f f\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       graph_homomorphism (LG {} {0}) G f \\<Longrightarrow>\n       extensible (LG {} {0}, LG {(idt, 0, 0)} {0}) G f", "then"], ["proof (chain)\npicking this:\n  graph_homomorphism (LG {(idt, 0, 0)} {0}) G f\n  agree_on (LG {} {0}) f f", "show \"extensible (LG {} {0}, LG {(idt, 0, 0)} {0}) G f\""], ["proof (prove)\nusing this:\n  graph_homomorphism (LG {(idt, 0, 0)} {0}) G f\n  agree_on (LG {} {0}) f f\n\ngoal (1 subgoal):\n 1. extensible (LG {} {0}, LG {(idt, 0, 0)} {0}) G f", "unfolding extensible_def prod.sel"], ["proof (prove)\nusing this:\n  graph_homomorphism (LG {(idt, 0, 0)} {0}) G f\n  agree_on (LG {} {0}) f f\n\ngoal (1 subgoal):\n 1. \\<exists>g.\n       graph_homomorphism (LG {(idt, 0, 0)} {0}) G g \\<and>\n       agree_on (LG {} {0}) f g", "by auto"], ["proof (state)\nthis:\n  extensible (LG {} {0}, LG {(idt, 0, 0)} {0}) G f\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma\n  assumes \"ident_rel idt G\"\n  shows ident_rel_trans:\"maintained (transitive_rule idt) G\"\n    and ident_rel_symm :\"maintained (symmetry_rule idt) G\"\n    and ident_rel_cong :\"maintained (congruence_rule idt l) G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. maintained (transitive_rule idt) G &&&\n    maintained (symmetry_rule idt) G &&&\n    maintained (congruence_rule idt l) G", "unfolding transitive_rule_def symmetry_rule_def congruence_rule_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. maintained\n     (transl_rule (A_Cmp (A_Lbl idt) (A_Lbl idt) \\<sqsubseteq> A_Lbl idt))\n     G &&&\n    maintained (transl_rule (A_Cnv (A_Lbl idt) \\<sqsubseteq> A_Lbl idt))\n     G &&&\n    maintained\n     (transl_rule\n       (A_Cmp (A_Cmp (A_Lbl idt) (A_Lbl l)) (A_Lbl idt) \\<sqsubseteq>\n        A_Lbl l))\n     G", "by(intro maintained_holds,insert assms,force)+"], ["", "text \\<open>Definition 19.\\<close>"], ["", "definition identity_rules ::\n  \"'a Standard_Constant set \\<Rightarrow> (('a Standard_Constant, nat) Graph_PreRule) set\" where\n  \"identity_rules L \\<equiv> {reflexivity_rule S_Idt,transitive_rule S_Idt,symmetry_rule S_Idt}\n                       \\<union> congruence_rules S_Idt L\""], ["", "lemma identity_rules_graph_rule:\n  assumes \"x \\<in> identity_rules L\"\n  shows \"graph_rule x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. graph_rule x", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. graph_rule x", "from graph_rule_translation"], ["proof (chain)\npicking this:\n  graph_rule (translation ?X, translation (A_Int ?X ?Y))", "have gr:\"\\<And> u v . graph_rule (transl_rule (u \\<sqsubseteq> v))\""], ["proof (prove)\nusing this:\n  graph_rule (translation ?X, translation (A_Int ?X ?Y))\n\ngoal (1 subgoal):\n 1. \\<And>u v. graph_rule (transl_rule (u \\<sqsubseteq> v))", "by auto"], ["proof (state)\nthis:\n  graph_rule (transl_rule (?u \\<sqsubseteq> ?v))\n\ngoal (1 subgoal):\n 1. graph_rule x", "consider \"x = reflexivity_rule S_Idt\" | \"x = transitive_rule S_Idt\" | \"x = symmetry_rule S_Idt\"\n    |  \"\\<exists> v w. x = congruence_rule v w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x = reflexivity_rule S_Idt \\<Longrightarrow> thesis;\n     x = transitive_rule S_Idt \\<Longrightarrow> thesis;\n     x = symmetry_rule S_Idt \\<Longrightarrow> thesis;\n     \\<exists>v w. x = congruence_rule v w \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "using assms"], ["proof (prove)\nusing this:\n  x \\<in> identity_rules L\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x = reflexivity_rule S_Idt \\<Longrightarrow> thesis;\n     x = transitive_rule S_Idt \\<Longrightarrow> thesis;\n     x = symmetry_rule S_Idt \\<Longrightarrow> thesis;\n     \\<exists>v w. x = congruence_rule v w \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "unfolding identity_rules_def Un_iff"], ["proof (prove)\nusing this:\n  x \\<in> {reflexivity_rule S_Idt, transitive_rule S_Idt,\n           symmetry_rule S_Idt} \\<or>\n  x \\<in> congruence_rules S_Idt L\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x = reflexivity_rule S_Idt \\<Longrightarrow> thesis;\n     x = transitive_rule S_Idt \\<Longrightarrow> thesis;\n     x = symmetry_rule S_Idt \\<Longrightarrow> thesis;\n     \\<exists>v w. x = congruence_rule v w \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "by blast"], ["proof (state)\nthis:\n  \\<lbrakk>x = reflexivity_rule S_Idt \\<Longrightarrow> ?thesis1;\n   x = transitive_rule S_Idt \\<Longrightarrow> ?thesis1;\n   x = symmetry_rule S_Idt \\<Longrightarrow> ?thesis1;\n   \\<exists>v w. x = congruence_rule v w \\<Longrightarrow> ?thesis1\\<rbrakk>\n  \\<Longrightarrow> ?thesis1\n\ngoal (1 subgoal):\n 1. graph_rule x", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>x = reflexivity_rule S_Idt \\<Longrightarrow> ?thesis1;\n   x = transitive_rule S_Idt \\<Longrightarrow> ?thesis1;\n   x = symmetry_rule S_Idt \\<Longrightarrow> ?thesis1;\n   \\<exists>v w. x = congruence_rule v w \\<Longrightarrow> ?thesis1\\<rbrakk>\n  \\<Longrightarrow> ?thesis1\n\ngoal (1 subgoal):\n 1. graph_rule x", "using gr are_rules(3)"], ["proof (prove)\nusing this:\n  \\<lbrakk>x = reflexivity_rule S_Idt \\<Longrightarrow> ?thesis1;\n   x = transitive_rule S_Idt \\<Longrightarrow> ?thesis1;\n   x = symmetry_rule S_Idt \\<Longrightarrow> ?thesis1;\n   \\<exists>v w. x = congruence_rule v w \\<Longrightarrow> ?thesis1\\<rbrakk>\n  \\<Longrightarrow> ?thesis1\n  graph_rule (transl_rule (?u \\<sqsubseteq> ?v))\n  graph_rule (reflexivity_rule ?i)\n\ngoal (1 subgoal):\n 1. graph_rule x", "unfolding congruence_rule_def transitive_rule_def symmetry_rule_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>x = reflexivity_rule S_Idt \\<Longrightarrow> ?thesis1;\n   x =\n   transl_rule (A_Cmp \\<one> \\<one> \\<sqsubseteq> \\<one>) \\<Longrightarrow>\n   ?thesis1;\n   x = transl_rule (A_Cnv \\<one> \\<sqsubseteq> \\<one>) \\<Longrightarrow>\n   ?thesis1;\n   \\<exists>v w.\n      x =\n      transl_rule\n       (A_Cmp (A_Cmp (A_Lbl v) (A_Lbl w)) (A_Lbl v) \\<sqsubseteq>\n        A_Lbl w) \\<Longrightarrow>\n   ?thesis1\\<rbrakk>\n  \\<Longrightarrow> ?thesis1\n  graph_rule (transl_rule (?u \\<sqsubseteq> ?v))\n  graph_rule (reflexivity_rule ?i)\n\ngoal (1 subgoal):\n 1. graph_rule x", "by cases fast+"], ["proof (state)\nthis:\n  graph_rule x\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>Definition 19, showing that the properties indeed do what they claim to do.\\<close>"], ["", "lemma\n  assumes g[intro]:\"graph (G :: ('a, 'b) labeled_graph)\"\n  shows reflexivity_rule: \"maintained (reflexivity_rule l) G \\<Longrightarrow> refl_on (vertices G) (getRel l G)\"\n    and transitive_rule: \"maintained (transitive_rule l) G \\<Longrightarrow> trans (getRel l G)\"\n    and symmetry_rule: \"maintained (symmetry_rule l) G \\<Longrightarrow> sym (getRel l G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (maintained (reflexivity_rule l) G \\<Longrightarrow>\n     refl_on (vertices G) (getRel l G)) &&&\n    (maintained (transitive_rule l) G \\<Longrightarrow>\n     trans (getRel l G)) &&&\n    (maintained (symmetry_rule l) G \\<Longrightarrow> sym (getRel l G))", "proof -"], ["proof (state)\ngoal (3 subgoals):\n 1. maintained (reflexivity_rule l) G \\<Longrightarrow>\n    refl_on (vertices G) (getRel l G)\n 2. maintained (transitive_rule l) G \\<Longrightarrow> trans (getRel l G)\n 3. maintained (symmetry_rule l) G \\<Longrightarrow> sym (getRel l G)", "{"], ["proof (state)\ngoal (3 subgoals):\n 1. maintained (reflexivity_rule l) G \\<Longrightarrow>\n    refl_on (vertices G) (getRel l G)\n 2. maintained (transitive_rule l) G \\<Longrightarrow> trans (getRel l G)\n 3. maintained (symmetry_rule l) G \\<Longrightarrow> sym (getRel l G)", "from assms"], ["proof (chain)\npicking this:\n  graph G", "have gr:\"getRel l G \\<subseteq> vertices G \\<times> vertices G\""], ["proof (prove)\nusing this:\n  graph G\n\ngoal (1 subgoal):\n 1. getRel l G \\<subseteq> vertices G \\<times> vertices G", "by (auto simp:getRel_def)"], ["proof (state)\nthis:\n  getRel l G \\<subseteq> vertices G \\<times> vertices G\n\ngoal (3 subgoals):\n 1. maintained (reflexivity_rule l) G \\<Longrightarrow>\n    refl_on (vertices G) (getRel l G)\n 2. maintained (transitive_rule l) G \\<Longrightarrow> trans (getRel l G)\n 3. maintained (symmetry_rule l) G \\<Longrightarrow> sym (getRel l G)", "assume m:\"maintained (reflexivity_rule l) G\" (is \"maintained ?r G\")"], ["proof (state)\nthis:\n  maintained (reflexivity_rule l) G\n\ngoal (3 subgoals):\n 1. maintained (reflexivity_rule l) G \\<Longrightarrow>\n    refl_on (vertices G) (getRel l G)\n 2. maintained (transitive_rule l) G \\<Longrightarrow> trans (getRel l G)\n 3. maintained (symmetry_rule l) G \\<Longrightarrow> sym (getRel l G)", "note [simp] = reflexivity_rule_def"], ["proof (state)\nthis:\n  reflexivity_rule ?t = (LG {} {0}, LG {(?t, 0, 0)} {0})\n\ngoal (3 subgoals):\n 1. maintained (reflexivity_rule l) G \\<Longrightarrow>\n    refl_on (vertices G) (getRel l G)\n 2. maintained (transitive_rule l) G \\<Longrightarrow> trans (getRel l G)\n 3. maintained (symmetry_rule l) G \\<Longrightarrow> sym (getRel l G)", "show r:\"refl_on (vertices G) (getRel l G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. refl_on (vertices G) (getRel l G)", "proof(rule refl_onI[OF gr])"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> vertices G \\<Longrightarrow> (x, x) \\<in> getRel l G", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> vertices G \\<Longrightarrow> (x, x) \\<in> getRel l G", "assume assm:\"x \\<in> vertices G\""], ["proof (state)\nthis:\n  x \\<in> vertices G\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> vertices G \\<Longrightarrow> (x, x) \\<in> getRel l G", "define f where \"f = {(0::nat,x)}\""], ["proof (state)\nthis:\n  f = {(0, x)}\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> vertices G \\<Longrightarrow> (x, x) \\<in> getRel l G", "have \"graph_homomorphism (fst ?r) G f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. graph_homomorphism (fst (reflexivity_rule l)) G f", "using assm"], ["proof (prove)\nusing this:\n  x \\<in> vertices G\n\ngoal (1 subgoal):\n 1. graph_homomorphism (fst (reflexivity_rule l)) G f", "by (auto simp:graph_homomorphism_def univalent_def f_def)"], ["proof (state)\nthis:\n  graph_homomorphism (fst (reflexivity_rule l)) G f\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> vertices G \\<Longrightarrow> (x, x) \\<in> getRel l G", "from m[unfolded maintained_def] this"], ["proof (chain)\npicking this:\n  \\<forall>f.\n     graph_homomorphism (fst (reflexivity_rule l)) G f \\<longrightarrow>\n     extensible (reflexivity_rule l) G f\n  graph_homomorphism (fst (reflexivity_rule l)) G f", "obtain g::\"(nat\\<times>'b) set\"\n        where g:\"graph_homomorphism (snd ?r) G g\"\n                \"agree_on (fst ?r) f g\""], ["proof (prove)\nusing this:\n  \\<forall>f.\n     graph_homomorphism (fst (reflexivity_rule l)) G f \\<longrightarrow>\n     extensible (reflexivity_rule l) G f\n  graph_homomorphism (fst (reflexivity_rule l)) G f\n\ngoal (1 subgoal):\n 1. (\\<And>g.\n        \\<lbrakk>graph_homomorphism (snd (reflexivity_rule l)) G g;\n         agree_on (fst (reflexivity_rule l)) f g\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding extensible_def"], ["proof (prove)\nusing this:\n  \\<forall>f.\n     graph_homomorphism (fst (reflexivity_rule l)) G f \\<longrightarrow>\n     (\\<exists>g.\n         graph_homomorphism (snd (reflexivity_rule l)) G g \\<and>\n         agree_on (fst (reflexivity_rule l)) f g)\n  graph_homomorphism (fst (reflexivity_rule l)) G f\n\ngoal (1 subgoal):\n 1. (\\<And>g.\n        \\<lbrakk>graph_homomorphism (snd (reflexivity_rule l)) G g;\n         agree_on (fst (reflexivity_rule l)) f g\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  graph_homomorphism (snd (reflexivity_rule l)) G g\n  agree_on (fst (reflexivity_rule l)) f g\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> vertices G \\<Longrightarrow> (x, x) \\<in> getRel l G", "have \"\\<And> n v. (n,v) \\<in> g \\<Longrightarrow> (n = 0) \\<and> (v = x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n v. (n, v) \\<in> g \\<Longrightarrow> n = 0 \\<and> v = x", "using g"], ["proof (prove)\nusing this:\n  graph_homomorphism (snd (reflexivity_rule l)) G g\n  agree_on (fst (reflexivity_rule l)) f g\n\ngoal (1 subgoal):\n 1. \\<And>n v. (n, v) \\<in> g \\<Longrightarrow> n = 0 \\<and> v = x", "unfolding\n        agree_on_def graph_homomorphism_def f_def"], ["proof (prove)\nusing this:\n  vertices (snd (reflexivity_rule l)) = Domain g \\<and>\n  graph (snd (reflexivity_rule l)) \\<and>\n  graph G \\<and>\n  g `` vertices (snd (reflexivity_rule l)) \\<subseteq> vertices G \\<and>\n  univalent g \\<and>\n  edge_preserving g (edges (snd (reflexivity_rule l))) (edges G)\n  \\<forall>v\\<in>vertices (fst (reflexivity_rule l)).\n     {(0, x)} `` {v} = g `` {v}\n\ngoal (1 subgoal):\n 1. \\<And>n v. (n, v) \\<in> g \\<Longrightarrow> n = 0 \\<and> v = x", "by auto"], ["proof (state)\nthis:\n  (?n, ?v) \\<in> g \\<Longrightarrow> ?n = 0 \\<and> ?v = x\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> vertices G \\<Longrightarrow> (x, x) \\<in> getRel l G", "with g(2)"], ["proof (chain)\npicking this:\n  agree_on (fst (reflexivity_rule l)) f g\n  (?n, ?v) \\<in> g \\<Longrightarrow> ?n = 0 \\<and> ?v = x", "have \"g = {(0,x)}\""], ["proof (prove)\nusing this:\n  agree_on (fst (reflexivity_rule l)) f g\n  (?n, ?v) \\<in> g \\<Longrightarrow> ?n = 0 \\<and> ?v = x\n\ngoal (1 subgoal):\n 1. g = {(0, x)}", "unfolding agree_on_def f_def"], ["proof (prove)\nusing this:\n  \\<forall>v\\<in>vertices (fst (reflexivity_rule l)).\n     {(0, x)} `` {v} = g `` {v}\n  (?n, ?v) \\<in> g \\<Longrightarrow> ?n = 0 \\<and> ?v = x\n\ngoal (1 subgoal):\n 1. g = {(0, x)}", "by auto"], ["proof (state)\nthis:\n  g = {(0, x)}\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> vertices G \\<Longrightarrow> (x, x) \\<in> getRel l G", "with g(1)"], ["proof (chain)\npicking this:\n  graph_homomorphism (snd (reflexivity_rule l)) G g\n  g = {(0, x)}", "show \"(x,x)\\<in> getRel l G\""], ["proof (prove)\nusing this:\n  graph_homomorphism (snd (reflexivity_rule l)) G g\n  g = {(0, x)}\n\ngoal (1 subgoal):\n 1. (x, x) \\<in> getRel l G", "unfolding graph_homomorphism_def edge_preserving getRel_def"], ["proof (prove)\nusing this:\n  vertices (snd (reflexivity_rule l)) = Domain g \\<and>\n  graph (snd (reflexivity_rule l)) \\<and>\n  graph G \\<and>\n  g `` vertices (snd (reflexivity_rule l)) \\<subseteq> vertices G \\<and>\n  univalent g \\<and>\n  on_triple g `` edges (snd (reflexivity_rule l)) \\<subseteq> edges G\n  g = {(0, x)}\n\ngoal (1 subgoal):\n 1. (x, x) \\<in> {(x, y). (l, x, y) \\<in> edges G}", "by auto"], ["proof (state)\nthis:\n  (x, x) \\<in> getRel l G\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  refl_on (vertices G) (getRel l G)\n\ngoal (2 subgoals):\n 1. maintained (transitive_rule l) G \\<Longrightarrow> trans (getRel l G)\n 2. maintained (symmetry_rule l) G \\<Longrightarrow> sym (getRel l G)", "}"], ["proof (state)\nthis:\n  maintained (reflexivity_rule l) G \\<Longrightarrow>\n  refl_on (vertices G) (getRel l G)\n\ngoal (2 subgoals):\n 1. maintained (transitive_rule l) G \\<Longrightarrow> trans (getRel l G)\n 2. maintained (symmetry_rule l) G \\<Longrightarrow> sym (getRel l G)", "{"], ["proof (state)\nthis:\n  maintained (reflexivity_rule l) G \\<Longrightarrow>\n  refl_on (vertices G) (getRel l G)\n\ngoal (2 subgoals):\n 1. maintained (transitive_rule l) G \\<Longrightarrow> trans (getRel l G)\n 2. maintained (symmetry_rule l) G \\<Longrightarrow> sym (getRel l G)", "assume m:\"maintained (transitive_rule l) G\""], ["proof (state)\nthis:\n  maintained (transitive_rule l) G\n\ngoal (2 subgoals):\n 1. maintained (transitive_rule l) G \\<Longrightarrow> trans (getRel l G)\n 2. maintained (symmetry_rule l) G \\<Longrightarrow> sym (getRel l G)", "from m[unfolded maintained_holds_subset_iff[OF g] transitive_rule_def]"], ["proof (chain)\npicking this:\n  :G:\\<lbrakk>A_Cmp (A_Lbl l) (A_Lbl l)\\<rbrakk>\n  \\<subseteq> :G:\\<lbrakk>A_Lbl l\\<rbrakk>", "show \"trans (getRel l G)\""], ["proof (prove)\nusing this:\n  :G:\\<lbrakk>A_Cmp (A_Lbl l) (A_Lbl l)\\<rbrakk>\n  \\<subseteq> :G:\\<lbrakk>A_Lbl l\\<rbrakk>\n\ngoal (1 subgoal):\n 1. trans (getRel l G)", "unfolding trans_def"], ["proof (prove)\nusing this:\n  :G:\\<lbrakk>A_Cmp (A_Lbl l) (A_Lbl l)\\<rbrakk>\n  \\<subseteq> :G:\\<lbrakk>A_Lbl l\\<rbrakk>\n\ngoal (1 subgoal):\n 1. (Id \\<union> getRel l G) O getRel l G = getRel l G", "by auto"], ["proof (state)\nthis:\n  trans (getRel l G)\n\ngoal (1 subgoal):\n 1. maintained (symmetry_rule l) G \\<Longrightarrow> sym (getRel l G)", "}"], ["proof (state)\nthis:\n  maintained (transitive_rule l) G \\<Longrightarrow> trans (getRel l G)\n\ngoal (1 subgoal):\n 1. maintained (symmetry_rule l) G \\<Longrightarrow> sym (getRel l G)", "{"], ["proof (state)\nthis:\n  maintained (transitive_rule l) G \\<Longrightarrow> trans (getRel l G)\n\ngoal (1 subgoal):\n 1. maintained (symmetry_rule l) G \\<Longrightarrow> sym (getRel l G)", "assume m:\"maintained (symmetry_rule l) G\""], ["proof (state)\nthis:\n  maintained (symmetry_rule l) G\n\ngoal (1 subgoal):\n 1. maintained (symmetry_rule l) G \\<Longrightarrow> sym (getRel l G)", "from m[unfolded maintained_holds_subset_iff[OF g] symmetry_rule_def]"], ["proof (chain)\npicking this:\n  :G:\\<lbrakk>A_Cnv (A_Lbl l)\\<rbrakk>\n  \\<subseteq> :G:\\<lbrakk>A_Lbl l\\<rbrakk>", "show \"sym (getRel l G)\""], ["proof (prove)\nusing this:\n  :G:\\<lbrakk>A_Cnv (A_Lbl l)\\<rbrakk>\n  \\<subseteq> :G:\\<lbrakk>A_Lbl l\\<rbrakk>\n\ngoal (1 subgoal):\n 1. sym (getRel l G)", "unfolding sym_def"], ["proof (prove)\nusing this:\n  :G:\\<lbrakk>A_Cnv (A_Lbl l)\\<rbrakk>\n  \\<subseteq> :G:\\<lbrakk>A_Lbl l\\<rbrakk>\n\ngoal (1 subgoal):\n 1. \\<forall>x y.\n       (x, y) \\<in> getRel l G \\<longrightarrow> (y, x) \\<in> getRel l G", "by auto"], ["proof (state)\nthis:\n  sym (getRel l G)\n\ngoal:\nNo subgoals!", "}"], ["proof (state)\nthis:\n  maintained (symmetry_rule l) G \\<Longrightarrow> sym (getRel l G)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma finite_identity_rules[intro]:\n  assumes \"finite L\"\n  shows \"finite (identity_rules L)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (identity_rules L)", "using assms"], ["proof (prove)\nusing this:\n  finite L\n\ngoal (1 subgoal):\n 1. finite (identity_rules L)", "unfolding identity_rules_def"], ["proof (prove)\nusing this:\n  finite L\n\ngoal (1 subgoal):\n 1. finite\n     ({reflexivity_rule S_Idt, transitive_rule S_Idt,\n       symmetry_rule S_Idt} \\<union>\n      congruence_rules S_Idt L)", "by auto"], ["", "lemma equivalence:\n  assumes gr:\"graph G\" and m:\"maintainedA {reflexivity_rule I,transitive_rule I,symmetry_rule I} G\"\n  shows \"equiv (vertices G) (getRel I G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. equiv (vertices G) (getRel I G)", "proof(rule equivI)"], ["proof (state)\ngoal (3 subgoals):\n 1. refl_on (vertices G) (getRel I G)\n 2. sym (getRel I G)\n 3. trans (getRel I G)", "show \"refl_on (vertices G) (getRel I G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. refl_on (vertices G) (getRel I G)", "using m"], ["proof (prove)\nusing this:\n  maintainedA {reflexivity_rule I, transitive_rule I, symmetry_rule I} G\n\ngoal (1 subgoal):\n 1. refl_on (vertices G) (getRel I G)", "by(intro reflexivity_rule[OF gr],auto)"], ["proof (state)\nthis:\n  refl_on (vertices G) (getRel I G)\n\ngoal (2 subgoals):\n 1. sym (getRel I G)\n 2. trans (getRel I G)", "show \"sym (getRel I G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sym (getRel I G)", "using m"], ["proof (prove)\nusing this:\n  maintainedA {reflexivity_rule I, transitive_rule I, symmetry_rule I} G\n\ngoal (1 subgoal):\n 1. sym (getRel I G)", "by(intro symmetry_rule[OF gr],auto)"], ["proof (state)\nthis:\n  sym (getRel I G)\n\ngoal (1 subgoal):\n 1. trans (getRel I G)", "show \"trans (getRel I G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. trans (getRel I G)", "using m"], ["proof (prove)\nusing this:\n  maintainedA {reflexivity_rule I, transitive_rule I, symmetry_rule I} G\n\ngoal (1 subgoal):\n 1. trans (getRel I G)", "by(intro transitive_rule[OF gr],auto)"], ["proof (state)\nthis:\n  trans (getRel I G)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma congruence_rule:\n (* Transitivity is not needed for this proof, but it's more convenient to reuse in this form *)\n  assumes g:\"graph G\"\n      and mA:\"maintainedA {reflexivity_rule I,transitive_rule I,symmetry_rule I} G\"\n      and m:\"maintained (congruence_rule I l) G\"\n    shows \"(\\<lambda> v. getRel l G `` {v}) respects (getRel I G)\" (is \"?g1\")\n      and \"(\\<lambda> v. (getRel l G)\\<inverse> `` {v}) respects (getRel I G)\" (is \"?g2\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>v. getRel l G `` {v}) respects getRel I G &&&\n    (\\<lambda>v. (getRel l G)\\<inverse> `` {v}) respects getRel I G", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. (\\<lambda>v. getRel l G `` {v}) respects getRel I G\n 2. (\\<lambda>v. (getRel l G)\\<inverse> `` {v}) respects getRel I G", "(* Both parts of this lemma are proved using roughly the same proof. *)"], ["proof (state)\ngoal (2 subgoals):\n 1. (\\<lambda>v. getRel l G `` {v}) respects getRel I G\n 2. (\\<lambda>v. (getRel l G)\\<inverse> `` {v}) respects getRel I G", "note eq = equivalence[OF g mA]"], ["proof (state)\nthis:\n  equiv (vertices G) (getRel I G)\n\ngoal (2 subgoals):\n 1. (\\<lambda>v. getRel l G `` {v}) respects getRel I G\n 2. (\\<lambda>v. (getRel l G)\\<inverse> `` {v}) respects getRel I G", "{"], ["proof (state)\nthis:\n  equiv (vertices G) (getRel I G)\n\ngoal (2 subgoals):\n 1. (\\<lambda>v. getRel l G `` {v}) respects getRel I G\n 2. (\\<lambda>v. (getRel l G)\\<inverse> `` {v}) respects getRel I G", "fix y z"], ["proof (state)\ngoal (2 subgoals):\n 1. (\\<lambda>v. getRel l G `` {v}) respects getRel I G\n 2. (\\<lambda>v. (getRel l G)\\<inverse> `` {v}) respects getRel I G", "assume aI:\"(y, z)\\<in>getRel I G\""], ["proof (state)\nthis:\n  (y, z) \\<in> getRel I G\n\ngoal (2 subgoals):\n 1. (\\<lambda>v. getRel l G `` {v}) respects getRel I G\n 2. (\\<lambda>v. (getRel l G)\\<inverse> `` {v}) respects getRel I G", "hence a2:\"(z, y)\\<in>getRel I G\""], ["proof (prove)\nusing this:\n  (y, z) \\<in> getRel I G\n\ngoal (1 subgoal):\n 1. (z, y) \\<in> getRel I G", "using eq[unfolded equiv_def sym_def]"], ["proof (prove)\nusing this:\n  (y, z) \\<in> getRel I G\n  refl_on (vertices G) (getRel I G) \\<and>\n  (\\<forall>x y.\n      (x, y) \\<in> getRel I G \\<longrightarrow>\n      (y, x) \\<in> getRel I G) \\<and>\n  trans (getRel I G)\n\ngoal (1 subgoal):\n 1. (z, y) \\<in> getRel I G", "by auto"], ["proof (state)\nthis:\n  (z, y) \\<in> getRel I G\n\ngoal (2 subgoals):\n 1. (\\<lambda>v. getRel l G `` {v}) respects getRel I G\n 2. (\\<lambda>v. (getRel l G)\\<inverse> `` {v}) respects getRel I G", "hence a3:\"(z, z)\\<in>getRel I G\" \"(y, y)\\<in>getRel I G\""], ["proof (prove)\nusing this:\n  (z, y) \\<in> getRel I G\n\ngoal (1 subgoal):\n 1. (z, z) \\<in> getRel I G &&& (y, y) \\<in> getRel I G", "using eq[unfolded equiv_def refl_on_def]"], ["proof (prove)\nusing this:\n  (z, y) \\<in> getRel I G\n  (getRel I G \\<subseteq> vertices G \\<times> vertices G \\<and>\n   (\\<forall>x\\<in>vertices G. (x, x) \\<in> getRel I G)) \\<and>\n  sym (getRel I G) \\<and> trans (getRel I G)\n\ngoal (1 subgoal):\n 1. (z, z) \\<in> getRel I G &&& (y, y) \\<in> getRel I G", "by auto"], ["proof (state)\nthis:\n  (z, z) \\<in> getRel I G\n  (y, y) \\<in> getRel I G\n\ngoal (2 subgoals):\n 1. (\\<lambda>v. getRel l G `` {v}) respects getRel I G\n 2. (\\<lambda>v. (getRel l G)\\<inverse> `` {v}) respects getRel I G", "{"], ["proof (state)\nthis:\n  (z, z) \\<in> getRel I G\n  (y, y) \\<in> getRel I G\n\ngoal (2 subgoals):\n 1. (\\<lambda>v. getRel l G `` {v}) respects getRel I G\n 2. (\\<lambda>v. (getRel l G)\\<inverse> `` {v}) respects getRel I G", "fix x"], ["proof (state)\ngoal (2 subgoals):\n 1. (\\<lambda>v. getRel l G `` {v}) respects getRel I G\n 2. (\\<lambda>v. (getRel l G)\\<inverse> `` {v}) respects getRel I G", "{"], ["proof (state)\ngoal (2 subgoals):\n 1. (\\<lambda>v. getRel l G `` {v}) respects getRel I G\n 2. (\\<lambda>v. (getRel l G)\\<inverse> `` {v}) respects getRel I G", "assume al:\"(y,x) \\<in> getRel l G\""], ["proof (state)\nthis:\n  (y, x) \\<in> getRel l G\n\ngoal (2 subgoals):\n 1. (\\<lambda>v. getRel l G `` {v}) respects getRel I G\n 2. (\\<lambda>v. (getRel l G)\\<inverse> `` {v}) respects getRel I G", "hence \"x \\<in> vertices G\""], ["proof (prove)\nusing this:\n  (y, x) \\<in> getRel l G\n\ngoal (1 subgoal):\n 1. x \\<in> vertices G", "using g"], ["proof (prove)\nusing this:\n  (y, x) \\<in> getRel l G\n  graph G\n\ngoal (1 subgoal):\n 1. x \\<in> vertices G", "unfolding getRel_def"], ["proof (prove)\nusing this:\n  (y, x) \\<in> {(x, y). (l, x, y) \\<in> edges G}\n  graph G\n\ngoal (1 subgoal):\n 1. x \\<in> vertices G", "by auto"], ["proof (state)\nthis:\n  x \\<in> vertices G\n\ngoal (2 subgoals):\n 1. (\\<lambda>v. getRel l G `` {v}) respects getRel I G\n 2. (\\<lambda>v. (getRel l G)\\<inverse> `` {v}) respects getRel I G", "hence r:\"(x,x) \\<in> getRel I G\""], ["proof (prove)\nusing this:\n  x \\<in> vertices G\n\ngoal (1 subgoal):\n 1. (x, x) \\<in> getRel I G", "using eq[unfolded equiv_def refl_on_def]"], ["proof (prove)\nusing this:\n  x \\<in> vertices G\n  (getRel I G \\<subseteq> vertices G \\<times> vertices G \\<and>\n   (\\<forall>x\\<in>vertices G. (x, x) \\<in> getRel I G)) \\<and>\n  sym (getRel I G) \\<and> trans (getRel I G)\n\ngoal (1 subgoal):\n 1. (x, x) \\<in> getRel I G", "by auto"], ["proof (state)\nthis:\n  (x, x) \\<in> getRel I G\n\ngoal (2 subgoals):\n 1. (\\<lambda>v. getRel l G `` {v}) respects getRel I G\n 2. (\\<lambda>v. (getRel l G)\\<inverse> `` {v}) respects getRel I G", "note relcompI[OF relcompI[OF a2 al] r]"], ["proof (state)\nthis:\n  (z, x) \\<in> (getRel I G O getRel l G) O getRel I G\n\ngoal (2 subgoals):\n 1. (\\<lambda>v. getRel l G `` {v}) respects getRel I G\n 2. (\\<lambda>v. (getRel l G)\\<inverse> `` {v}) respects getRel I G", "}"], ["proof (state)\nthis:\n  (y, x) \\<in> getRel l G \\<Longrightarrow>\n  (z, x) \\<in> (getRel I G O getRel l G) O getRel I G\n\ngoal (2 subgoals):\n 1. (\\<lambda>v. getRel l G `` {v}) respects getRel I G\n 2. (\\<lambda>v. (getRel l G)\\<inverse> `` {v}) respects getRel I G", "note yx = this"], ["proof (state)\nthis:\n  (y, x) \\<in> getRel l G \\<Longrightarrow>\n  (z, x) \\<in> (getRel I G O getRel l G) O getRel I G\n\ngoal (2 subgoals):\n 1. (\\<lambda>v. getRel l G `` {v}) respects getRel I G\n 2. (\\<lambda>v. (getRel l G)\\<inverse> `` {v}) respects getRel I G", "{"], ["proof (state)\nthis:\n  (y, x) \\<in> getRel l G \\<Longrightarrow>\n  (z, x) \\<in> (getRel I G O getRel l G) O getRel I G\n\ngoal (2 subgoals):\n 1. (\\<lambda>v. getRel l G `` {v}) respects getRel I G\n 2. (\\<lambda>v. (getRel l G)\\<inverse> `` {v}) respects getRel I G", "assume al:\"(z,x) \\<in> getRel l G\""], ["proof (state)\nthis:\n  (z, x) \\<in> getRel l G\n\ngoal (2 subgoals):\n 1. (\\<lambda>v. getRel l G `` {v}) respects getRel I G\n 2. (\\<lambda>v. (getRel l G)\\<inverse> `` {v}) respects getRel I G", "hence \"x \\<in> vertices G\""], ["proof (prove)\nusing this:\n  (z, x) \\<in> getRel l G\n\ngoal (1 subgoal):\n 1. x \\<in> vertices G", "using g"], ["proof (prove)\nusing this:\n  (z, x) \\<in> getRel l G\n  graph G\n\ngoal (1 subgoal):\n 1. x \\<in> vertices G", "unfolding getRel_def"], ["proof (prove)\nusing this:\n  (z, x) \\<in> {(x, y). (l, x, y) \\<in> edges G}\n  graph G\n\ngoal (1 subgoal):\n 1. x \\<in> vertices G", "by auto"], ["proof (state)\nthis:\n  x \\<in> vertices G\n\ngoal (2 subgoals):\n 1. (\\<lambda>v. getRel l G `` {v}) respects getRel I G\n 2. (\\<lambda>v. (getRel l G)\\<inverse> `` {v}) respects getRel I G", "hence r:\"(x,x) \\<in> getRel I G\""], ["proof (prove)\nusing this:\n  x \\<in> vertices G\n\ngoal (1 subgoal):\n 1. (x, x) \\<in> getRel I G", "using eq[unfolded equiv_def refl_on_def]"], ["proof (prove)\nusing this:\n  x \\<in> vertices G\n  (getRel I G \\<subseteq> vertices G \\<times> vertices G \\<and>\n   (\\<forall>x\\<in>vertices G. (x, x) \\<in> getRel I G)) \\<and>\n  sym (getRel I G) \\<and> trans (getRel I G)\n\ngoal (1 subgoal):\n 1. (x, x) \\<in> getRel I G", "by auto"], ["proof (state)\nthis:\n  (x, x) \\<in> getRel I G\n\ngoal (2 subgoals):\n 1. (\\<lambda>v. getRel l G `` {v}) respects getRel I G\n 2. (\\<lambda>v. (getRel l G)\\<inverse> `` {v}) respects getRel I G", "note relcompI[OF relcompI[OF aI al] r]"], ["proof (state)\nthis:\n  (y, x) \\<in> (getRel I G O getRel l G) O getRel I G\n\ngoal (2 subgoals):\n 1. (\\<lambda>v. getRel l G `` {v}) respects getRel I G\n 2. (\\<lambda>v. (getRel l G)\\<inverse> `` {v}) respects getRel I G", "}"], ["proof (state)\nthis:\n  (z, x) \\<in> getRel l G \\<Longrightarrow>\n  (y, x) \\<in> (getRel I G O getRel l G) O getRel I G\n\ngoal (2 subgoals):\n 1. (\\<lambda>v. getRel l G `` {v}) respects getRel I G\n 2. (\\<lambda>v. (getRel l G)\\<inverse> `` {v}) respects getRel I G", "note zx = this"], ["proof (state)\nthis:\n  (z, x) \\<in> getRel l G \\<Longrightarrow>\n  (y, x) \\<in> (getRel I G O getRel l G) O getRel I G\n\ngoal (2 subgoals):\n 1. (\\<lambda>v. getRel l G `` {v}) respects getRel I G\n 2. (\\<lambda>v. (getRel l G)\\<inverse> `` {v}) respects getRel I G", "from zx yx m[unfolded maintained_holds_subset_iff[OF g] congruence_rule_def]"], ["proof (chain)\npicking this:\n  (z, x) \\<in> getRel l G \\<Longrightarrow>\n  (y, x) \\<in> (getRel I G O getRel l G) O getRel I G\n  (y, x) \\<in> getRel l G \\<Longrightarrow>\n  (z, x) \\<in> (getRel I G O getRel l G) O getRel I G\n  :G:\\<lbrakk>A_Cmp (A_Cmp (A_Lbl I) (A_Lbl l)) (A_Lbl I)\\<rbrakk>\n  \\<subseteq> :G:\\<lbrakk>A_Lbl l\\<rbrakk>", "have \"(y,x) \\<in> getRel l G \\<longleftrightarrow> (z,x) \\<in> getRel l G\""], ["proof (prove)\nusing this:\n  (z, x) \\<in> getRel l G \\<Longrightarrow>\n  (y, x) \\<in> (getRel I G O getRel l G) O getRel I G\n  (y, x) \\<in> getRel l G \\<Longrightarrow>\n  (z, x) \\<in> (getRel I G O getRel l G) O getRel I G\n  :G:\\<lbrakk>A_Cmp (A_Cmp (A_Lbl I) (A_Lbl l)) (A_Lbl I)\\<rbrakk>\n  \\<subseteq> :G:\\<lbrakk>A_Lbl l\\<rbrakk>\n\ngoal (1 subgoal):\n 1. ((y, x) \\<in> getRel l G) = ((z, x) \\<in> getRel l G)", "by auto"], ["proof (state)\nthis:\n  ((y, x) \\<in> getRel l G) = ((z, x) \\<in> getRel l G)\n\ngoal (2 subgoals):\n 1. (\\<lambda>v. getRel l G `` {v}) respects getRel I G\n 2. (\\<lambda>v. (getRel l G)\\<inverse> `` {v}) respects getRel I G", "}"], ["proof (state)\nthis:\n  ((y, ?x2) \\<in> getRel l G) = ((z, ?x2) \\<in> getRel l G)\n\ngoal (2 subgoals):\n 1. (\\<lambda>v. getRel l G `` {v}) respects getRel I G\n 2. (\\<lambda>v. (getRel l G)\\<inverse> `` {v}) respects getRel I G", "note v1 = this"], ["proof (state)\nthis:\n  ((y, ?x2) \\<in> getRel l G) = ((z, ?x2) \\<in> getRel l G)\n\ngoal (2 subgoals):\n 1. (\\<lambda>v. getRel l G `` {v}) respects getRel I G\n 2. (\\<lambda>v. (getRel l G)\\<inverse> `` {v}) respects getRel I G", "{"], ["proof (state)\nthis:\n  ((y, ?x2) \\<in> getRel l G) = ((z, ?x2) \\<in> getRel l G)\n\ngoal (2 subgoals):\n 1. (\\<lambda>v. getRel l G `` {v}) respects getRel I G\n 2. (\\<lambda>v. (getRel l G)\\<inverse> `` {v}) respects getRel I G", "fix x"], ["proof (state)\ngoal (2 subgoals):\n 1. (\\<lambda>v. getRel l G `` {v}) respects getRel I G\n 2. (\\<lambda>v. (getRel l G)\\<inverse> `` {v}) respects getRel I G", "{"], ["proof (state)\ngoal (2 subgoals):\n 1. (\\<lambda>v. getRel l G `` {v}) respects getRel I G\n 2. (\\<lambda>v. (getRel l G)\\<inverse> `` {v}) respects getRel I G", "assume al:\"(x,y) \\<in> getRel l G\""], ["proof (state)\nthis:\n  (x, y) \\<in> getRel l G\n\ngoal (2 subgoals):\n 1. (\\<lambda>v. getRel l G `` {v}) respects getRel I G\n 2. (\\<lambda>v. (getRel l G)\\<inverse> `` {v}) respects getRel I G", "hence \"x \\<in> vertices G\""], ["proof (prove)\nusing this:\n  (x, y) \\<in> getRel l G\n\ngoal (1 subgoal):\n 1. x \\<in> vertices G", "using g"], ["proof (prove)\nusing this:\n  (x, y) \\<in> getRel l G\n  graph G\n\ngoal (1 subgoal):\n 1. x \\<in> vertices G", "unfolding getRel_def"], ["proof (prove)\nusing this:\n  (x, y) \\<in> {(x, y). (l, x, y) \\<in> edges G}\n  graph G\n\ngoal (1 subgoal):\n 1. x \\<in> vertices G", "by auto"], ["proof (state)\nthis:\n  x \\<in> vertices G\n\ngoal (2 subgoals):\n 1. (\\<lambda>v. getRel l G `` {v}) respects getRel I G\n 2. (\\<lambda>v. (getRel l G)\\<inverse> `` {v}) respects getRel I G", "hence r:\"(x,x) \\<in> getRel I G\""], ["proof (prove)\nusing this:\n  x \\<in> vertices G\n\ngoal (1 subgoal):\n 1. (x, x) \\<in> getRel I G", "using eq[unfolded equiv_def refl_on_def]"], ["proof (prove)\nusing this:\n  x \\<in> vertices G\n  (getRel I G \\<subseteq> vertices G \\<times> vertices G \\<and>\n   (\\<forall>x\\<in>vertices G. (x, x) \\<in> getRel I G)) \\<and>\n  sym (getRel I G) \\<and> trans (getRel I G)\n\ngoal (1 subgoal):\n 1. (x, x) \\<in> getRel I G", "by auto"], ["proof (state)\nthis:\n  (x, x) \\<in> getRel I G\n\ngoal (2 subgoals):\n 1. (\\<lambda>v. getRel l G `` {v}) respects getRel I G\n 2. (\\<lambda>v. (getRel l G)\\<inverse> `` {v}) respects getRel I G", "note relcompI[OF relcompI[OF r al] aI]"], ["proof (state)\nthis:\n  (x, z) \\<in> (getRel I G O getRel l G) O getRel I G\n\ngoal (2 subgoals):\n 1. (\\<lambda>v. getRel l G `` {v}) respects getRel I G\n 2. (\\<lambda>v. (getRel l G)\\<inverse> `` {v}) respects getRel I G", "}"], ["proof (state)\nthis:\n  (x, y) \\<in> getRel l G \\<Longrightarrow>\n  (x, z) \\<in> (getRel I G O getRel l G) O getRel I G\n\ngoal (2 subgoals):\n 1. (\\<lambda>v. getRel l G `` {v}) respects getRel I G\n 2. (\\<lambda>v. (getRel l G)\\<inverse> `` {v}) respects getRel I G", "note yx = this"], ["proof (state)\nthis:\n  (x, y) \\<in> getRel l G \\<Longrightarrow>\n  (x, z) \\<in> (getRel I G O getRel l G) O getRel I G\n\ngoal (2 subgoals):\n 1. (\\<lambda>v. getRel l G `` {v}) respects getRel I G\n 2. (\\<lambda>v. (getRel l G)\\<inverse> `` {v}) respects getRel I G", "{"], ["proof (state)\nthis:\n  (x, y) \\<in> getRel l G \\<Longrightarrow>\n  (x, z) \\<in> (getRel I G O getRel l G) O getRel I G\n\ngoal (2 subgoals):\n 1. (\\<lambda>v. getRel l G `` {v}) respects getRel I G\n 2. (\\<lambda>v. (getRel l G)\\<inverse> `` {v}) respects getRel I G", "assume al:\"(x,z) \\<in> getRel l G\""], ["proof (state)\nthis:\n  (x, z) \\<in> getRel l G\n\ngoal (2 subgoals):\n 1. (\\<lambda>v. getRel l G `` {v}) respects getRel I G\n 2. (\\<lambda>v. (getRel l G)\\<inverse> `` {v}) respects getRel I G", "hence \"x \\<in> vertices G\""], ["proof (prove)\nusing this:\n  (x, z) \\<in> getRel l G\n\ngoal (1 subgoal):\n 1. x \\<in> vertices G", "using g"], ["proof (prove)\nusing this:\n  (x, z) \\<in> getRel l G\n  graph G\n\ngoal (1 subgoal):\n 1. x \\<in> vertices G", "unfolding getRel_def"], ["proof (prove)\nusing this:\n  (x, z) \\<in> {(x, y). (l, x, y) \\<in> edges G}\n  graph G\n\ngoal (1 subgoal):\n 1. x \\<in> vertices G", "by auto"], ["proof (state)\nthis:\n  x \\<in> vertices G\n\ngoal (2 subgoals):\n 1. (\\<lambda>v. getRel l G `` {v}) respects getRel I G\n 2. (\\<lambda>v. (getRel l G)\\<inverse> `` {v}) respects getRel I G", "hence r:\"(x,x) \\<in> getRel I G\""], ["proof (prove)\nusing this:\n  x \\<in> vertices G\n\ngoal (1 subgoal):\n 1. (x, x) \\<in> getRel I G", "using eq[unfolded equiv_def refl_on_def]"], ["proof (prove)\nusing this:\n  x \\<in> vertices G\n  (getRel I G \\<subseteq> vertices G \\<times> vertices G \\<and>\n   (\\<forall>x\\<in>vertices G. (x, x) \\<in> getRel I G)) \\<and>\n  sym (getRel I G) \\<and> trans (getRel I G)\n\ngoal (1 subgoal):\n 1. (x, x) \\<in> getRel I G", "by auto"], ["proof (state)\nthis:\n  (x, x) \\<in> getRel I G\n\ngoal (2 subgoals):\n 1. (\\<lambda>v. getRel l G `` {v}) respects getRel I G\n 2. (\\<lambda>v. (getRel l G)\\<inverse> `` {v}) respects getRel I G", "note relcompI[OF relcompI[OF r al] a2]"], ["proof (state)\nthis:\n  (x, y) \\<in> (getRel I G O getRel l G) O getRel I G\n\ngoal (2 subgoals):\n 1. (\\<lambda>v. getRel l G `` {v}) respects getRel I G\n 2. (\\<lambda>v. (getRel l G)\\<inverse> `` {v}) respects getRel I G", "}"], ["proof (state)\nthis:\n  (x, z) \\<in> getRel l G \\<Longrightarrow>\n  (x, y) \\<in> (getRel I G O getRel l G) O getRel I G\n\ngoal (2 subgoals):\n 1. (\\<lambda>v. getRel l G `` {v}) respects getRel I G\n 2. (\\<lambda>v. (getRel l G)\\<inverse> `` {v}) respects getRel I G", "note zx = this"], ["proof (state)\nthis:\n  (x, z) \\<in> getRel l G \\<Longrightarrow>\n  (x, y) \\<in> (getRel I G O getRel l G) O getRel I G\n\ngoal (2 subgoals):\n 1. (\\<lambda>v. getRel l G `` {v}) respects getRel I G\n 2. (\\<lambda>v. (getRel l G)\\<inverse> `` {v}) respects getRel I G", "from zx yx m[unfolded maintained_holds_subset_iff[OF g] congruence_rule_def]"], ["proof (chain)\npicking this:\n  (x, z) \\<in> getRel l G \\<Longrightarrow>\n  (x, y) \\<in> (getRel I G O getRel l G) O getRel I G\n  (x, y) \\<in> getRel l G \\<Longrightarrow>\n  (x, z) \\<in> (getRel I G O getRel l G) O getRel I G\n  :G:\\<lbrakk>A_Cmp (A_Cmp (A_Lbl I) (A_Lbl l)) (A_Lbl I)\\<rbrakk>\n  \\<subseteq> :G:\\<lbrakk>A_Lbl l\\<rbrakk>", "have \"(x,y) \\<in> getRel l G \\<longleftrightarrow> (x,z) \\<in> getRel l G\""], ["proof (prove)\nusing this:\n  (x, z) \\<in> getRel l G \\<Longrightarrow>\n  (x, y) \\<in> (getRel I G O getRel l G) O getRel I G\n  (x, y) \\<in> getRel l G \\<Longrightarrow>\n  (x, z) \\<in> (getRel I G O getRel l G) O getRel I G\n  :G:\\<lbrakk>A_Cmp (A_Cmp (A_Lbl I) (A_Lbl l)) (A_Lbl I)\\<rbrakk>\n  \\<subseteq> :G:\\<lbrakk>A_Lbl l\\<rbrakk>\n\ngoal (1 subgoal):\n 1. ((x, y) \\<in> getRel l G) = ((x, z) \\<in> getRel l G)", "by auto"], ["proof (state)\nthis:\n  ((x, y) \\<in> getRel l G) = ((x, z) \\<in> getRel l G)\n\ngoal (2 subgoals):\n 1. (\\<lambda>v. getRel l G `` {v}) respects getRel I G\n 2. (\\<lambda>v. (getRel l G)\\<inverse> `` {v}) respects getRel I G", "}"], ["proof (state)\nthis:\n  ((?x2, y) \\<in> getRel l G) = ((?x2, z) \\<in> getRel l G)\n\ngoal (2 subgoals):\n 1. (\\<lambda>v. getRel l G `` {v}) respects getRel I G\n 2. (\\<lambda>v. (getRel l G)\\<inverse> `` {v}) respects getRel I G", "note v2 = this"], ["proof (state)\nthis:\n  ((?x2, y) \\<in> getRel l G) = ((?x2, z) \\<in> getRel l G)\n\ngoal (2 subgoals):\n 1. (\\<lambda>v. getRel l G `` {v}) respects getRel I G\n 2. (\\<lambda>v. (getRel l G)\\<inverse> `` {v}) respects getRel I G", "from v1 v2"], ["proof (chain)\npicking this:\n  ((y, ?x2) \\<in> getRel l G) = ((z, ?x2) \\<in> getRel l G)\n  ((?x2, y) \\<in> getRel l G) = ((?x2, z) \\<in> getRel l G)", "have \"getRel l G `` {y} = getRel l G `` {z}\"\n         \"(getRel l G)\\<inverse> `` {y} = (getRel l G)\\<inverse> `` {z}\""], ["proof (prove)\nusing this:\n  ((y, ?x2) \\<in> getRel l G) = ((z, ?x2) \\<in> getRel l G)\n  ((?x2, y) \\<in> getRel l G) = ((?x2, z) \\<in> getRel l G)\n\ngoal (1 subgoal):\n 1. getRel l G `` {y} = getRel l G `` {z} &&&\n    (getRel l G)\\<inverse> `` {y} = (getRel l G)\\<inverse> `` {z}", "by auto"], ["proof (state)\nthis:\n  getRel l G `` {y} = getRel l G `` {z}\n  (getRel l G)\\<inverse> `` {y} = (getRel l G)\\<inverse> `` {z}\n\ngoal (2 subgoals):\n 1. (\\<lambda>v. getRel l G `` {v}) respects getRel I G\n 2. (\\<lambda>v. (getRel l G)\\<inverse> `` {v}) respects getRel I G", "}"], ["proof (state)\nthis:\n  (?y2, ?z2) \\<in> getRel I G \\<Longrightarrow>\n  getRel l G `` {?y2} = getRel l G `` {?z2}\n  (?y2, ?z2) \\<in> getRel I G \\<Longrightarrow>\n  (getRel l G)\\<inverse> `` {?y2} = (getRel l G)\\<inverse> `` {?z2}\n\ngoal (2 subgoals):\n 1. (\\<lambda>v. getRel l G `` {v}) respects getRel I G\n 2. (\\<lambda>v. (getRel l G)\\<inverse> `` {v}) respects getRel I G", "thus ?g1 ?g2"], ["proof (prove)\nusing this:\n  (?y2, ?z2) \\<in> getRel I G \\<Longrightarrow>\n  getRel l G `` {?y2} = getRel l G `` {?z2}\n  (?y2, ?z2) \\<in> getRel I G \\<Longrightarrow>\n  (getRel l G)\\<inverse> `` {?y2} = (getRel l G)\\<inverse> `` {?z2}\n\ngoal (1 subgoal):\n 1. (\\<lambda>v. getRel l G `` {v}) respects getRel I G &&&\n    (\\<lambda>v. (getRel l G)\\<inverse> `` {v}) respects getRel I G", "unfolding congruent_def"], ["proof (prove)\nusing this:\n  (?y2, ?z2) \\<in> getRel I G \\<Longrightarrow>\n  getRel l G `` {?y2} = getRel l G `` {?z2}\n  (?y2, ?z2) \\<in> getRel I G \\<Longrightarrow>\n  (getRel l G)\\<inverse> `` {?y2} = (getRel l G)\\<inverse> `` {?z2}\n\ngoal (1 subgoal):\n 1. \\<forall>(y, z)\\<in>getRel I G.\n       getRel l G `` {y} = getRel l G `` {z} &&&\n    \\<forall>(y, z)\\<in>getRel I G.\n       (getRel l G)\\<inverse> `` {y} = (getRel l G)\\<inverse> `` {z}", "by force+"], ["proof (state)\nthis:\n  (\\<lambda>v. getRel l G `` {v}) respects getRel I G\n  (\\<lambda>v. (getRel l G)\\<inverse> `` {v}) respects getRel I G\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>Lemma 7, strengthened with an extra property to make subsequent proofs easier to carry out.\\<close>"], ["", "lemma identity_rules:\n  assumes \"graph G\"\n          \"maintainedA (identity_rules L) G\"\n          \"fst ` edges G \\<subseteq> L\"\n  shows \"\\<exists> f. f o f = f\n         \\<and> ident_rel S_Idt (map_graph_fn G f)\n         \\<and> subgraph (map_graph_fn G f) G\n         \\<and> (\\<forall> l x y. (l,x,y) \\<in> edges G \\<longleftrightarrow> (l,f x,f y) \\<in> edges G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>f.\n       f \\<circ> f = f \\<and>\n       ident_rel S_Idt (map_graph_fn G f) \\<and>\n       subgraph (map_graph_fn G f) G \\<and>\n       (\\<forall>l x y.\n           ((l, x, y) \\<in> edges G) = ((l, f x, f y) \\<in> edges G))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>f.\n       f \\<circ> f = f \\<and>\n       ident_rel S_Idt (map_graph_fn G f) \\<and>\n       subgraph (map_graph_fn G f) G \\<and>\n       (\\<forall>l x y.\n           ((l, x, y) \\<in> edges G) = ((l, f x, f y) \\<in> edges G))", "(* While this proof defines a concrete f, we only expose it using an existential quantifier.\n     The reason is that the f of our choice is non-constructive,\n     and its definition relies on the axiom of choice.\n     In fact, this theorem applies to the infinite case too,\n     which means that it's probably equivalent to the axiom of choice.\n     We therefore have no hopes of giving an executable concrete f here.\n     In the implementation, we will be able to use finiteness of G (which is not required here),\n     and therefore we can construct an f with these properties again.\n     Unfortunately, this does mean doing roughly the same proof twice. *)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>f.\n       f \\<circ> f = f \\<and>\n       ident_rel S_Idt (map_graph_fn G f) \\<and>\n       subgraph (map_graph_fn G f) G \\<and>\n       (\\<forall>l x y.\n           ((l, x, y) \\<in> edges G) = ((l, f x, f y) \\<in> edges G))", "have ma:\"maintainedA {reflexivity_rule S_Idt, transitive_rule S_Idt, symmetry_rule S_Idt} G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. maintainedA\n     {reflexivity_rule S_Idt, transitive_rule S_Idt, symmetry_rule S_Idt} G", "using assms(2)"], ["proof (prove)\nusing this:\n  maintainedA (identity_rules L) G\n\ngoal (1 subgoal):\n 1. maintainedA\n     {reflexivity_rule S_Idt, transitive_rule S_Idt, symmetry_rule S_Idt} G", "by (auto simp:identity_rules_def)"], ["proof (state)\nthis:\n  maintainedA\n   {reflexivity_rule S_Idt, transitive_rule S_Idt, symmetry_rule S_Idt} G\n\ngoal (1 subgoal):\n 1. \\<exists>f.\n       f \\<circ> f = f \\<and>\n       ident_rel S_Idt (map_graph_fn G f) \\<and>\n       subgraph (map_graph_fn G f) G \\<and>\n       (\\<forall>l x y.\n           ((l, x, y) \\<in> edges G) = ((l, f x, f y) \\<in> edges G))", "note equiv = equivalence[OF assms(1) this]"], ["proof (state)\nthis:\n  equiv (vertices G) (getRel S_Idt G)\n\ngoal (1 subgoal):\n 1. \\<exists>f.\n       f \\<circ> f = f \\<and>\n       ident_rel S_Idt (map_graph_fn G f) \\<and>\n       subgraph (map_graph_fn G f) G \\<and>\n       (\\<forall>l x y.\n           ((l, x, y) \\<in> edges G) = ((l, f x, f y) \\<in> edges G))", "{"], ["proof (state)\nthis:\n  equiv (vertices G) (getRel S_Idt G)\n\ngoal (1 subgoal):\n 1. \\<exists>f.\n       f \\<circ> f = f \\<and>\n       ident_rel S_Idt (map_graph_fn G f) \\<and>\n       subgraph (map_graph_fn G f) G \\<and>\n       (\\<forall>l x y.\n           ((l, x, y) \\<in> edges G) = ((l, f x, f y) \\<in> edges G))", "fix l x y"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>f.\n       f \\<circ> f = f \\<and>\n       ident_rel S_Idt (map_graph_fn G f) \\<and>\n       subgraph (map_graph_fn G f) G \\<and>\n       (\\<forall>l x y.\n           ((l, x, y) \\<in> edges G) = ((l, f x, f y) \\<in> edges G))", "assume \"(x, y) \\<in> getRel l G\""], ["proof (state)\nthis:\n  (x, y) \\<in> getRel l G\n\ngoal (1 subgoal):\n 1. \\<exists>f.\n       f \\<circ> f = f \\<and>\n       ident_rel S_Idt (map_graph_fn G f) \\<and>\n       subgraph (map_graph_fn G f) G \\<and>\n       (\\<forall>l x y.\n           ((l, x, y) \\<in> edges G) = ((l, f x, f y) \\<in> edges G))", "hence l:\"l \\<in> L\""], ["proof (prove)\nusing this:\n  (x, y) \\<in> getRel l G\n\ngoal (1 subgoal):\n 1. l \\<in> L", "using assms(3)"], ["proof (prove)\nusing this:\n  (x, y) \\<in> getRel l G\n  fst ` edges G \\<subseteq> L\n\ngoal (1 subgoal):\n 1. l \\<in> L", "unfolding getRel_def"], ["proof (prove)\nusing this:\n  (x, y) \\<in> {(x, y). (l, x, y) \\<in> edges G}\n  fst ` edges G \\<subseteq> L\n\ngoal (1 subgoal):\n 1. l \\<in> L", "by auto"], ["proof (state)\nthis:\n  l \\<in> L\n\ngoal (1 subgoal):\n 1. \\<exists>f.\n       f \\<circ> f = f \\<and>\n       ident_rel S_Idt (map_graph_fn G f) \\<and>\n       subgraph (map_graph_fn G f) G \\<and>\n       (\\<forall>l x y.\n           ((l, x, y) \\<in> edges G) = ((l, f x, f y) \\<in> edges G))", "have r1:\"(\\<lambda>v. getRel l G `` {v}) respects getRel S_Idt G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>v. getRel l G `` {v}) respects getRel S_Idt G", "apply(intro congruence_rule[OF assms(1) ma])"], ["proof (prove)\ngoal (1 subgoal):\n 1. maintained (congruence_rule S_Idt l) G", "using assms(2) l"], ["proof (prove)\nusing this:\n  maintainedA (identity_rules L) G\n  l \\<in> L\n\ngoal (1 subgoal):\n 1. maintained (congruence_rule S_Idt l) G", "unfolding identity_rules_def"], ["proof (prove)\nusing this:\n  maintainedA\n   ({reflexivity_rule S_Idt, transitive_rule S_Idt,\n     symmetry_rule S_Idt} \\<union>\n    congruence_rules S_Idt L)\n   G\n  l \\<in> L\n\ngoal (1 subgoal):\n 1. maintained (congruence_rule S_Idt l) G", "by auto"], ["proof (state)\nthis:\n  (\\<lambda>v. getRel l G `` {v}) respects getRel S_Idt G\n\ngoal (1 subgoal):\n 1. \\<exists>f.\n       f \\<circ> f = f \\<and>\n       ident_rel S_Idt (map_graph_fn G f) \\<and>\n       subgraph (map_graph_fn G f) G \\<and>\n       (\\<forall>l x y.\n           ((l, x, y) \\<in> edges G) = ((l, f x, f y) \\<in> edges G))", "have r2:\"(\\<lambda>v. (getRel l G)\\<inverse> `` {v}) respects getRel S_Idt G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>v. (getRel l G)\\<inverse> `` {v}) respects getRel S_Idt G", "apply(intro congruence_rule[OF assms(1) ma])"], ["proof (prove)\ngoal (1 subgoal):\n 1. maintained (congruence_rule S_Idt l) G", "using assms(2) l"], ["proof (prove)\nusing this:\n  maintainedA (identity_rules L) G\n  l \\<in> L\n\ngoal (1 subgoal):\n 1. maintained (congruence_rule S_Idt l) G", "unfolding identity_rules_def"], ["proof (prove)\nusing this:\n  maintainedA\n   ({reflexivity_rule S_Idt, transitive_rule S_Idt,\n     symmetry_rule S_Idt} \\<union>\n    congruence_rules S_Idt L)\n   G\n  l \\<in> L\n\ngoal (1 subgoal):\n 1. maintained (congruence_rule S_Idt l) G", "by auto"], ["proof (state)\nthis:\n  (\\<lambda>v. (getRel l G)\\<inverse> `` {v}) respects getRel S_Idt G\n\ngoal (1 subgoal):\n 1. \\<exists>f.\n       f \\<circ> f = f \\<and>\n       ident_rel S_Idt (map_graph_fn G f) \\<and>\n       subgraph (map_graph_fn G f) G \\<and>\n       (\\<forall>l x y.\n           ((l, x, y) \\<in> edges G) = ((l, f x, f y) \\<in> edges G))", "note congr = r1 r2"], ["proof (state)\nthis:\n  (\\<lambda>v. getRel l G `` {v}) respects getRel S_Idt G\n  (\\<lambda>v. (getRel l G)\\<inverse> `` {v}) respects getRel S_Idt G\n\ngoal (1 subgoal):\n 1. \\<exists>f.\n       f \\<circ> f = f \\<and>\n       ident_rel S_Idt (map_graph_fn G f) \\<and>\n       subgraph (map_graph_fn G f) G \\<and>\n       (\\<forall>l x y.\n           ((l, x, y) \\<in> edges G) = ((l, f x, f y) \\<in> edges G))", "}"], ["proof (state)\nthis:\n  (?x2, ?y2) \\<in> getRel ?l2 G \\<Longrightarrow>\n  (\\<lambda>v. getRel ?l2 G `` {v}) respects getRel S_Idt G\n  (?x2, ?y2) \\<in> getRel ?l2 G \\<Longrightarrow>\n  (\\<lambda>v. (getRel ?l2 G)\\<inverse> `` {v}) respects getRel S_Idt G\n\ngoal (1 subgoal):\n 1. \\<exists>f.\n       f \\<circ> f = f \\<and>\n       ident_rel S_Idt (map_graph_fn G f) \\<and>\n       subgraph (map_graph_fn G f) G \\<and>\n       (\\<forall>l x y.\n           ((l, x, y) \\<in> edges G) = ((l, f x, f y) \\<in> edges G))", "note congr = this"], ["proof (state)\nthis:\n  (?x2, ?y2) \\<in> getRel ?l2 G \\<Longrightarrow>\n  (\\<lambda>v. getRel ?l2 G `` {v}) respects getRel S_Idt G\n  (?x2, ?y2) \\<in> getRel ?l2 G \\<Longrightarrow>\n  (\\<lambda>v. (getRel ?l2 G)\\<inverse> `` {v}) respects getRel S_Idt G\n\ngoal (1 subgoal):\n 1. \\<exists>f.\n       f \\<circ> f = f \\<and>\n       ident_rel S_Idt (map_graph_fn G f) \\<and>\n       subgraph (map_graph_fn G f) G \\<and>\n       (\\<forall>l x y.\n           ((l, x, y) \\<in> edges G) = ((l, f x, f y) \\<in> edges G))", "define P where P:\"P = (\\<lambda> x y. y \\<in> getRel S_Idt G `` {x})\""], ["proof (state)\nthis:\n  P = (\\<lambda>x y. y \\<in> getRel S_Idt G `` {x})\n\ngoal (1 subgoal):\n 1. \\<exists>f.\n       f \\<circ> f = f \\<and>\n       ident_rel S_Idt (map_graph_fn G f) \\<and>\n       subgraph (map_graph_fn G f) G \\<and>\n       (\\<forall>l x y.\n           ((l, x, y) \\<in> edges G) = ((l, f x, f y) \\<in> edges G))", "{"], ["proof (state)\nthis:\n  P = (\\<lambda>x y. y \\<in> getRel S_Idt G `` {x})\n\ngoal (1 subgoal):\n 1. \\<exists>f.\n       f \\<circ> f = f \\<and>\n       ident_rel S_Idt (map_graph_fn G f) \\<and>\n       subgraph (map_graph_fn G f) G \\<and>\n       (\\<forall>l x y.\n           ((l, x, y) \\<in> edges G) = ((l, f x, f y) \\<in> edges G))", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>f.\n       f \\<circ> f = f \\<and>\n       ident_rel S_Idt (map_graph_fn G f) \\<and>\n       subgraph (map_graph_fn G f) G \\<and>\n       (\\<forall>l x y.\n           ((l, x, y) \\<in> edges G) = ((l, f x, f y) \\<in> edges G))", "assume a:\"getRel S_Idt G `` {x} \\<noteq> {}\""], ["proof (state)\nthis:\n  getRel S_Idt G `` {x} \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<exists>f.\n       f \\<circ> f = f \\<and>\n       ident_rel S_Idt (map_graph_fn G f) \\<and>\n       subgraph (map_graph_fn G f) G \\<and>\n       (\\<forall>l x y.\n           ((l, x, y) \\<in> edges G) = ((l, f x, f y) \\<in> edges G))", "hence \"\\<exists> y. P x y\""], ["proof (prove)\nusing this:\n  getRel S_Idt G `` {x} \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<exists>y. P x y", "unfolding P"], ["proof (prove)\nusing this:\n  getRel S_Idt G `` {x} \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<exists>y. y \\<in> getRel S_Idt G `` {x}", "by auto"], ["proof (state)\nthis:\n  \\<exists>y. P x y\n\ngoal (1 subgoal):\n 1. \\<exists>f.\n       f \\<circ> f = f \\<and>\n       ident_rel S_Idt (map_graph_fn G f) \\<and>\n       subgraph (map_graph_fn G f) G \\<and>\n       (\\<forall>l x y.\n           ((l, x, y) \\<in> edges G) = ((l, f x, f y) \\<in> edges G))", "hence p:\"P x (Eps (P x))\""], ["proof (prove)\nusing this:\n  \\<exists>y. P x y\n\ngoal (1 subgoal):\n 1. P x (Eps (P x))", "unfolding some_eq_ex"], ["proof (prove)\nusing this:\n  \\<exists>y. P x y\n\ngoal (1 subgoal):\n 1. Ex (P x)", "by auto"], ["proof (state)\nthis:\n  P x (Eps (P x))\n\ngoal (1 subgoal):\n 1. \\<exists>f.\n       f \\<circ> f = f \\<and>\n       ident_rel S_Idt (map_graph_fn G f) \\<and>\n       subgraph (map_graph_fn G f) G \\<and>\n       (\\<forall>l x y.\n           ((l, x, y) \\<in> edges G) = ((l, f x, f y) \\<in> edges G))", "{"], ["proof (state)\nthis:\n  P x (Eps (P x))\n\ngoal (1 subgoal):\n 1. \\<exists>f.\n       f \\<circ> f = f \\<and>\n       ident_rel S_Idt (map_graph_fn G f) \\<and>\n       subgraph (map_graph_fn G f) G \\<and>\n       (\\<forall>l x y.\n           ((l, x, y) \\<in> edges G) = ((l, f x, f y) \\<in> edges G))", "fix y"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>f.\n       f \\<circ> f = f \\<and>\n       ident_rel S_Idt (map_graph_fn G f) \\<and>\n       subgraph (map_graph_fn G f) G \\<and>\n       (\\<forall>l x y.\n           ((l, x, y) \\<in> edges G) = ((l, f x, f y) \\<in> edges G))", "assume b:\"P x y\""], ["proof (state)\nthis:\n  P x y\n\ngoal (1 subgoal):\n 1. \\<exists>f.\n       f \\<circ> f = f \\<and>\n       ident_rel S_Idt (map_graph_fn G f) \\<and>\n       subgraph (map_graph_fn G f) G \\<and>\n       (\\<forall>l x y.\n           ((l, x, y) \\<in> edges G) = ((l, f x, f y) \\<in> edges G))", "hence \"(x,y) \\<in> getRel S_Idt G\""], ["proof (prove)\nusing this:\n  P x y\n\ngoal (1 subgoal):\n 1. (x, y) \\<in> getRel S_Idt G", "unfolding P"], ["proof (prove)\nusing this:\n  y \\<in> getRel S_Idt G `` {x}\n\ngoal (1 subgoal):\n 1. (x, y) \\<in> getRel S_Idt G", "by auto"], ["proof (state)\nthis:\n  (x, y) \\<in> getRel S_Idt G\n\ngoal (1 subgoal):\n 1. \\<exists>f.\n       f \\<circ> f = f \\<and>\n       ident_rel S_Idt (map_graph_fn G f) \\<and>\n       subgraph (map_graph_fn G f) G \\<and>\n       (\\<forall>l x y.\n           ((l, x, y) \\<in> edges G) = ((l, f x, f y) \\<in> edges G))", "from equiv_class_eq[OF equiv this]"], ["proof (chain)\npicking this:\n  getRel S_Idt G `` {x} = getRel S_Idt G `` {y}", "have \"getRel S_Idt G `` {x} = getRel S_Idt G `` {y}\""], ["proof (prove)\nusing this:\n  getRel S_Idt G `` {x} = getRel S_Idt G `` {y}\n\ngoal (1 subgoal):\n 1. getRel S_Idt G `` {x} = getRel S_Idt G `` {y}", "."], ["proof (state)\nthis:\n  getRel S_Idt G `` {x} = getRel S_Idt G `` {y}\n\ngoal (1 subgoal):\n 1. \\<exists>f.\n       f \\<circ> f = f \\<and>\n       ident_rel S_Idt (map_graph_fn G f) \\<and>\n       subgraph (map_graph_fn G f) G \\<and>\n       (\\<forall>l x y.\n           ((l, x, y) \\<in> edges G) = ((l, f x, f y) \\<in> edges G))", "}"], ["proof (state)\nthis:\n  P x ?y2 \\<Longrightarrow> getRel S_Idt G `` {x} = getRel S_Idt G `` {?y2}\n\ngoal (1 subgoal):\n 1. \\<exists>f.\n       f \\<circ> f = f \\<and>\n       ident_rel S_Idt (map_graph_fn G f) \\<and>\n       subgraph (map_graph_fn G f) G \\<and>\n       (\\<forall>l x y.\n           ((l, x, y) \\<in> edges G) = ((l, f x, f y) \\<in> edges G))", "note u = this[OF p]"], ["proof (state)\nthis:\n  getRel S_Idt G `` {x} = getRel S_Idt G `` {Eps (P x)}\n\ngoal (1 subgoal):\n 1. \\<exists>f.\n       f \\<circ> f = f \\<and>\n       ident_rel S_Idt (map_graph_fn G f) \\<and>\n       subgraph (map_graph_fn G f) G \\<and>\n       (\\<forall>l x y.\n           ((l, x, y) \\<in> edges G) = ((l, f x, f y) \\<in> edges G))", "have \"getRel S_Idt G `` {Eps (P x)} = getRel S_Idt G `` {x}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. getRel S_Idt G `` {Eps (P x)} = getRel S_Idt G `` {x}", "unfolding u"], ["proof (prove)\ngoal (1 subgoal):\n 1. getRel S_Idt G `` {Eps (P x)} = getRel S_Idt G `` {Eps (P x)}", "by (fact refl)"], ["proof (state)\nthis:\n  getRel S_Idt G `` {Eps (P x)} = getRel S_Idt G `` {x}\n\ngoal (1 subgoal):\n 1. \\<exists>f.\n       f \\<circ> f = f \\<and>\n       ident_rel S_Idt (map_graph_fn G f) \\<and>\n       subgraph (map_graph_fn G f) G \\<and>\n       (\\<forall>l x y.\n           ((l, x, y) \\<in> edges G) = ((l, f x, f y) \\<in> edges G))", "hence \"Eps (P (Eps (P x))) = Eps (P x)\""], ["proof (prove)\nusing this:\n  getRel S_Idt G `` {Eps (P x)} = getRel S_Idt G `` {x}\n\ngoal (1 subgoal):\n 1. Eps (P (Eps (P x))) = Eps (P x)", "unfolding P"], ["proof (prove)\nusing this:\n  getRel S_Idt G `` {SOME y. y \\<in> getRel S_Idt G `` {x}} =\n  getRel S_Idt G `` {x}\n\ngoal (1 subgoal):\n 1. (SOME y.\n        y \\<in> getRel S_Idt G `` {SOME y. y \\<in> getRel S_Idt G `` {x}}) =\n    (SOME y. y \\<in> getRel S_Idt G `` {x})", "by auto"], ["proof (state)\nthis:\n  Eps (P (Eps (P x))) = Eps (P x)\n\ngoal (1 subgoal):\n 1. \\<exists>f.\n       f \\<circ> f = f \\<and>\n       ident_rel S_Idt (map_graph_fn G f) \\<and>\n       subgraph (map_graph_fn G f) G \\<and>\n       (\\<forall>l x y.\n           ((l, x, y) \\<in> edges G) = ((l, f x, f y) \\<in> edges G))", "}"], ["proof (state)\nthis:\n  getRel S_Idt G `` {?x2} \\<noteq> {} \\<Longrightarrow>\n  Eps (P (Eps (P ?x2))) = Eps (P ?x2)\n\ngoal (1 subgoal):\n 1. \\<exists>f.\n       f \\<circ> f = f \\<and>\n       ident_rel S_Idt (map_graph_fn G f) \\<and>\n       subgraph (map_graph_fn G f) G \\<and>\n       (\\<forall>l x y.\n           ((l, x, y) \\<in> edges G) = ((l, f x, f y) \\<in> edges G))", "note P_eq = this"], ["proof (state)\nthis:\n  getRel S_Idt G `` {?x2} \\<noteq> {} \\<Longrightarrow>\n  Eps (P (Eps (P ?x2))) = Eps (P ?x2)\n\ngoal (1 subgoal):\n 1. \\<exists>f.\n       f \\<circ> f = f \\<and>\n       ident_rel S_Idt (map_graph_fn G f) \\<and>\n       subgraph (map_graph_fn G f) G \\<and>\n       (\\<forall>l x y.\n           ((l, x, y) \\<in> edges G) = ((l, f x, f y) \\<in> edges G))", "define f where f:\"f = (\\<lambda> x. (if getRel S_Idt G `` {x} = {} then x else (SOME y. P x y)))\""], ["proof (state)\nthis:\n  f = (\\<lambda>x. if getRel S_Idt G `` {x} = {} then x else SOME y. P x y)\n\ngoal (1 subgoal):\n 1. \\<exists>f.\n       f \\<circ> f = f \\<and>\n       ident_rel S_Idt (map_graph_fn G f) \\<and>\n       subgraph (map_graph_fn G f) G \\<and>\n       (\\<forall>l x y.\n           ((l, x, y) \\<in> edges G) = ((l, f x, f y) \\<in> edges G))", "have \"(f \\<circ> f) x = f x\" for x"], ["proof (prove)\ngoal (1 subgoal):\n 1. (f \\<circ> f) x = f x", "proof(cases \"getRel S_Idt G `` {x} = {}\")"], ["proof (state)\ngoal (2 subgoals):\n 1. getRel S_Idt G `` {x} = {} \\<Longrightarrow> (f \\<circ> f) x = f x\n 2. getRel S_Idt G `` {x} \\<noteq> {} \\<Longrightarrow>\n    (f \\<circ> f) x = f x", "case False"], ["proof (state)\nthis:\n  getRel S_Idt G `` {x} \\<noteq> {}\n\ngoal (2 subgoals):\n 1. getRel S_Idt G `` {x} = {} \\<Longrightarrow> (f \\<circ> f) x = f x\n 2. getRel S_Idt G `` {x} \\<noteq> {} \\<Longrightarrow>\n    (f \\<circ> f) x = f x", "then"], ["proof (chain)\npicking this:\n  getRel S_Idt G `` {x} \\<noteq> {}", "show ?thesis"], ["proof (prove)\nusing this:\n  getRel S_Idt G `` {x} \\<noteq> {}\n\ngoal (1 subgoal):\n 1. (f \\<circ> f) x = f x", "using P_eq"], ["proof (prove)\nusing this:\n  getRel S_Idt G `` {x} \\<noteq> {}\n  getRel S_Idt G `` {?x2} \\<noteq> {} \\<Longrightarrow>\n  Eps (P (Eps (P ?x2))) = Eps (P ?x2)\n\ngoal (1 subgoal):\n 1. (f \\<circ> f) x = f x", "by (simp add:o_def f)"], ["proof (state)\nthis:\n  (f \\<circ> f) x = f x\n\ngoal (1 subgoal):\n 1. getRel S_Idt G `` {x} = {} \\<Longrightarrow> (f \\<circ> f) x = f x", "qed (auto simp:o_def f)"], ["proof (state)\nthis:\n  (f \\<circ> f) ?x = f ?x\n\ngoal (1 subgoal):\n 1. \\<exists>f.\n       f \\<circ> f = f \\<and>\n       ident_rel S_Idt (map_graph_fn G f) \\<and>\n       subgraph (map_graph_fn G f) G \\<and>\n       (\\<forall>l x y.\n           ((l, x, y) \\<in> edges G) = ((l, f x, f y) \\<in> edges G))", "hence idemp: \"f o f = f\""], ["proof (prove)\nusing this:\n  (f \\<circ> f) ?x = f ?x\n\ngoal (1 subgoal):\n 1. f \\<circ> f = f", "by auto"], ["proof (state)\nthis:\n  f \\<circ> f = f\n\ngoal (1 subgoal):\n 1. \\<exists>f.\n       f \\<circ> f = f \\<and>\n       ident_rel S_Idt (map_graph_fn G f) \\<and>\n       subgraph (map_graph_fn G f) G \\<and>\n       (\\<forall>l x y.\n           ((l, x, y) \\<in> edges G) = ((l, f x, f y) \\<in> edges G))", "from equivE equiv"], ["proof (chain)\npicking this:\n  \\<lbrakk>equiv ?A ?r;\n   \\<lbrakk>refl_on ?A ?r; sym ?r; trans ?r\\<rbrakk>\n   \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n  equiv (vertices G) (getRel S_Idt G)", "have refl:\"refl_on (vertices G) (getRel S_Idt G)\""], ["proof (prove)\nusing this:\n  \\<lbrakk>equiv ?A ?r;\n   \\<lbrakk>refl_on ?A ?r; sym ?r; trans ?r\\<rbrakk>\n   \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n  equiv (vertices G) (getRel S_Idt G)\n\ngoal (1 subgoal):\n 1. refl_on (vertices G) (getRel S_Idt G)", "by auto"], ["proof (state)\nthis:\n  refl_on (vertices G) (getRel S_Idt G)\n\ngoal (1 subgoal):\n 1. \\<exists>f.\n       f \\<circ> f = f \\<and>\n       ident_rel S_Idt (map_graph_fn G f) \\<and>\n       subgraph (map_graph_fn G f) G \\<and>\n       (\\<forall>l x y.\n           ((l, x, y) \\<in> edges G) = ((l, f x, f y) \\<in> edges G))", "hence [intro]:\"x \\<in> vertices G \\<Longrightarrow> (x, x) \\<in> getRel S_Idt G\" for x"], ["proof (prove)\nusing this:\n  refl_on (vertices G) (getRel S_Idt G)\n\ngoal (1 subgoal):\n 1. x \\<in> vertices G \\<Longrightarrow> (x, x) \\<in> getRel S_Idt G", "unfolding refl_on_def"], ["proof (prove)\nusing this:\n  getRel S_Idt G \\<subseteq> vertices G \\<times> vertices G \\<and>\n  (\\<forall>x\\<in>vertices G. (x, x) \\<in> getRel S_Idt G)\n\ngoal (1 subgoal):\n 1. x \\<in> vertices G \\<Longrightarrow> (x, x) \\<in> getRel S_Idt G", "by auto"], ["proof (state)\nthis:\n  ?x \\<in> vertices G \\<Longrightarrow> (?x, ?x) \\<in> getRel S_Idt G\n\ngoal (1 subgoal):\n 1. \\<exists>f.\n       f \\<circ> f = f \\<and>\n       ident_rel S_Idt (map_graph_fn G f) \\<and>\n       subgraph (map_graph_fn G f) G \\<and>\n       (\\<forall>l x y.\n           ((l, x, y) \\<in> edges G) = ((l, f x, f y) \\<in> edges G))", "hence vert_P:\"x \\<in> vertices G \\<Longrightarrow> (x, Eps (P x)) \\<in> getRel S_Idt G\" for x"], ["proof (prove)\nusing this:\n  ?x \\<in> vertices G \\<Longrightarrow> (?x, ?x) \\<in> getRel S_Idt G\n\ngoal (1 subgoal):\n 1. x \\<in> vertices G \\<Longrightarrow> (x, Eps (P x)) \\<in> getRel S_Idt G", "unfolding P getRel_def"], ["proof (prove)\nusing this:\n  ?x \\<in> vertices G \\<Longrightarrow>\n  (?x, ?x) \\<in> {(x, y). (S_Idt, x, y) \\<in> edges G}\n\ngoal (1 subgoal):\n 1. x \\<in> vertices G \\<Longrightarrow>\n    (x, SOME y. y \\<in> {(x, y). (S_Idt, x, y) \\<in> edges G} `` {x})\n    \\<in> {(x, y). (S_Idt, x, y) \\<in> edges G}", "by (metis tfl_some Image_singleton_iff getRel_def)"], ["proof (state)\nthis:\n  ?x \\<in> vertices G \\<Longrightarrow>\n  (?x, Eps (P ?x)) \\<in> getRel S_Idt G\n\ngoal (1 subgoal):\n 1. \\<exists>f.\n       f \\<circ> f = f \\<and>\n       ident_rel S_Idt (map_graph_fn G f) \\<and>\n       subgraph (map_graph_fn G f) G \\<and>\n       (\\<forall>l x y.\n           ((l, x, y) \\<in> edges G) = ((l, f x, f y) \\<in> edges G))", "have r1:\"x \\<in> vertices G \\<longleftrightarrow> P x x\" for x"], ["proof (prove)\ngoal (1 subgoal):\n 1. (x \\<in> vertices G) = P x x", "using refl"], ["proof (prove)\nusing this:\n  refl_on (vertices G) (getRel S_Idt G)\n\ngoal (1 subgoal):\n 1. (x \\<in> vertices G) = P x x", "unfolding refl_on_def P"], ["proof (prove)\nusing this:\n  getRel S_Idt G \\<subseteq> vertices G \\<times> vertices G \\<and>\n  (\\<forall>x\\<in>vertices G. (x, x) \\<in> getRel S_Idt G)\n\ngoal (1 subgoal):\n 1. (x \\<in> vertices G) = (x \\<in> getRel S_Idt G `` {x})", "by auto"], ["proof (state)\nthis:\n  (?x \\<in> vertices G) = P ?x ?x\n\ngoal (1 subgoal):\n 1. \\<exists>f.\n       f \\<circ> f = f \\<and>\n       ident_rel S_Idt (map_graph_fn G f) \\<and>\n       subgraph (map_graph_fn G f) G \\<and>\n       (\\<forall>l x y.\n           ((l, x, y) \\<in> edges G) = ((l, f x, f y) \\<in> edges G))", "have r2[simp]:\"getRel S_Idt G `` {x} = {} \\<longleftrightarrow> x \\<notin> vertices G\" for x"], ["proof (prove)\ngoal (1 subgoal):\n 1. (getRel S_Idt G `` {x} = {}) = (x \\<notin> vertices G)", "using refl assms(1)"], ["proof (prove)\nusing this:\n  refl_on (vertices G) (getRel S_Idt G)\n  graph G\n\ngoal (1 subgoal):\n 1. (getRel S_Idt G `` {x} = {}) = (x \\<notin> vertices G)", "unfolding refl_on_def"], ["proof (prove)\nusing this:\n  getRel S_Idt G \\<subseteq> vertices G \\<times> vertices G \\<and>\n  (\\<forall>x\\<in>vertices G. (x, x) \\<in> getRel S_Idt G)\n  graph G\n\ngoal (1 subgoal):\n 1. (getRel S_Idt G `` {x} = {}) = (x \\<notin> vertices G)", "by auto"], ["proof (state)\nthis:\n  (getRel S_Idt G `` {?x} = {}) = (?x \\<notin> vertices G)\n\ngoal (1 subgoal):\n 1. \\<exists>f.\n       f \\<circ> f = f \\<and>\n       ident_rel S_Idt (map_graph_fn G f) \\<and>\n       subgraph (map_graph_fn G f) G \\<and>\n       (\\<forall>l x y.\n           ((l, x, y) \\<in> edges G) = ((l, f x, f y) \\<in> edges G))", "{"], ["proof (state)\nthis:\n  (getRel S_Idt G `` {?x} = {}) = (?x \\<notin> vertices G)\n\ngoal (1 subgoal):\n 1. \\<exists>f.\n       f \\<circ> f = f \\<and>\n       ident_rel S_Idt (map_graph_fn G f) \\<and>\n       subgraph (map_graph_fn G f) G \\<and>\n       (\\<forall>l x y.\n           ((l, x, y) \\<in> edges G) = ((l, f x, f y) \\<in> edges G))", "fix x y"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>f.\n       f \\<circ> f = f \\<and>\n       ident_rel S_Idt (map_graph_fn G f) \\<and>\n       subgraph (map_graph_fn G f) G \\<and>\n       (\\<forall>l x y.\n           ((l, x, y) \\<in> edges G) = ((l, f x, f y) \\<in> edges G))", "assume \"(S_Idt,x,y)\\<in> edges G\""], ["proof (state)\nthis:\n  (S_Idt, x, y) \\<in> edges G\n\ngoal (1 subgoal):\n 1. \\<exists>f.\n       f \\<circ> f = f \\<and>\n       ident_rel S_Idt (map_graph_fn G f) \\<and>\n       subgraph (map_graph_fn G f) G \\<and>\n       (\\<forall>l x y.\n           ((l, x, y) \\<in> edges G) = ((l, f x, f y) \\<in> edges G))", "hence \"(x,y) \\<in> getRel S_Idt G\""], ["proof (prove)\nusing this:\n  (S_Idt, x, y) \\<in> edges G\n\ngoal (1 subgoal):\n 1. (x, y) \\<in> getRel S_Idt G", "unfolding getRel_def"], ["proof (prove)\nusing this:\n  (S_Idt, x, y) \\<in> edges G\n\ngoal (1 subgoal):\n 1. (x, y) \\<in> {(x, y). (S_Idt, x, y) \\<in> edges G}", "by auto"], ["proof (state)\nthis:\n  (x, y) \\<in> getRel S_Idt G\n\ngoal (1 subgoal):\n 1. \\<exists>f.\n       f \\<circ> f = f \\<and>\n       ident_rel S_Idt (map_graph_fn G f) \\<and>\n       subgraph (map_graph_fn G f) G \\<and>\n       (\\<forall>l x y.\n           ((l, x, y) \\<in> edges G) = ((l, f x, f y) \\<in> edges G))", "hence \"getRel S_Idt G `` {x} = getRel S_Idt G `` {y}\""], ["proof (prove)\nusing this:\n  (x, y) \\<in> getRel S_Idt G\n\ngoal (1 subgoal):\n 1. getRel S_Idt G `` {x} = getRel S_Idt G `` {y}", "using equiv_class_eq[OF equiv]"], ["proof (prove)\nusing this:\n  (x, y) \\<in> getRel S_Idt G\n  (?a, ?b) \\<in> getRel S_Idt G \\<Longrightarrow>\n  getRel S_Idt G `` {?a} = getRel S_Idt G `` {?b}\n\ngoal (1 subgoal):\n 1. getRel S_Idt G `` {x} = getRel S_Idt G `` {y}", "by metis"], ["proof (state)\nthis:\n  getRel S_Idt G `` {x} = getRel S_Idt G `` {y}\n\ngoal (1 subgoal):\n 1. \\<exists>f.\n       f \\<circ> f = f \\<and>\n       ident_rel S_Idt (map_graph_fn G f) \\<and>\n       subgraph (map_graph_fn G f) G \\<and>\n       (\\<forall>l x y.\n           ((l, x, y) \\<in> edges G) = ((l, f x, f y) \\<in> edges G))", "hence \"Eps (P x) = Eps (P y)\""], ["proof (prove)\nusing this:\n  getRel S_Idt G `` {x} = getRel S_Idt G `` {y}\n\ngoal (1 subgoal):\n 1. Eps (P x) = Eps (P y)", "unfolding P"], ["proof (prove)\nusing this:\n  getRel S_Idt G `` {x} = getRel S_Idt G `` {y}\n\ngoal (1 subgoal):\n 1. (SOME y. y \\<in> getRel S_Idt G `` {x}) =\n    (SOME ya. ya \\<in> getRel S_Idt G `` {y})", "by auto"], ["proof (state)\nthis:\n  Eps (P x) = Eps (P y)\n\ngoal (1 subgoal):\n 1. \\<exists>f.\n       f \\<circ> f = f \\<and>\n       ident_rel S_Idt (map_graph_fn G f) \\<and>\n       subgraph (map_graph_fn G f) G \\<and>\n       (\\<forall>l x y.\n           ((l, x, y) \\<in> edges G) = ((l, f x, f y) \\<in> edges G))", "}"], ["proof (state)\nthis:\n  (S_Idt, ?x2, ?y2) \\<in> edges G \\<Longrightarrow>\n  Eps (P ?x2) = Eps (P ?y2)\n\ngoal (1 subgoal):\n 1. \\<exists>f.\n       f \\<circ> f = f \\<and>\n       ident_rel S_Idt (map_graph_fn G f) \\<and>\n       subgraph (map_graph_fn G f) G \\<and>\n       (\\<forall>l x y.\n           ((l, x, y) \\<in> edges G) = ((l, f x, f y) \\<in> edges G))", "note idt_eq = this"], ["proof (state)\nthis:\n  (S_Idt, ?x2, ?y2) \\<in> edges G \\<Longrightarrow>\n  Eps (P ?x2) = Eps (P ?y2)\n\ngoal (1 subgoal):\n 1. \\<exists>f.\n       f \\<circ> f = f \\<and>\n       ident_rel S_Idt (map_graph_fn G f) \\<and>\n       subgraph (map_graph_fn G f) G \\<and>\n       (\\<forall>l x y.\n           ((l, x, y) \\<in> edges G) = ((l, f x, f y) \\<in> edges G))", "have ident:\"ident_rel S_Idt (map_graph_fn G f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ident_rel S_Idt (map_graph_fn G f)", "proof(rule ident_relI,goal_cases)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x.\n       x \\<in> vertices (map_graph_fn G f) \\<Longrightarrow>\n       (x, x) \\<in> getRel S_Idt (map_graph_fn G f)\n 2. \\<And>x y.\n       (x, y) \\<in> getRel S_Idt (map_graph_fn G f) \\<Longrightarrow> x = y\n 3. \\<And>x y.\n       (x, y) \\<in> getRel S_Idt (map_graph_fn G f) \\<Longrightarrow>\n       x \\<in> vertices (map_graph_fn G f)", "case (1 x)"], ["proof (state)\nthis:\n  x \\<in> vertices (map_graph_fn G f)\n\ngoal (3 subgoals):\n 1. \\<And>x.\n       x \\<in> vertices (map_graph_fn G f) \\<Longrightarrow>\n       (x, x) \\<in> getRel S_Idt (map_graph_fn G f)\n 2. \\<And>x y.\n       (x, y) \\<in> getRel S_Idt (map_graph_fn G f) \\<Longrightarrow> x = y\n 3. \\<And>x y.\n       (x, y) \\<in> getRel S_Idt (map_graph_fn G f) \\<Longrightarrow>\n       x \\<in> vertices (map_graph_fn G f)", "thus ?case"], ["proof (prove)\nusing this:\n  x \\<in> vertices (map_graph_fn G f)\n\ngoal (1 subgoal):\n 1. (x, x) \\<in> getRel S_Idt (map_graph_fn G f)", "unfolding f"], ["proof (prove)\nusing this:\n  x \\<in> vertices\n           (map_graph_fn G\n             (\\<lambda>x.\n                 if getRel S_Idt G `` {x} = {} then x else Eps (P x)))\n\ngoal (1 subgoal):\n 1. (x, x)\n    \\<in> getRel S_Idt\n           (map_graph_fn G\n             (\\<lambda>x.\n                 if getRel S_Idt G `` {x} = {} then x else Eps (P x)))", "by auto"], ["proof (state)\nthis:\n  (x, x) \\<in> getRel S_Idt (map_graph_fn G f)\n\ngoal (2 subgoals):\n 1. \\<And>x y.\n       (x, y) \\<in> getRel S_Idt (map_graph_fn G f) \\<Longrightarrow> x = y\n 2. \\<And>x y.\n       (x, y) \\<in> getRel S_Idt (map_graph_fn G f) \\<Longrightarrow>\n       x \\<in> vertices (map_graph_fn G f)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x y.\n       (x, y) \\<in> getRel S_Idt (map_graph_fn G f) \\<Longrightarrow> x = y\n 2. \\<And>x y.\n       (x, y) \\<in> getRel S_Idt (map_graph_fn G f) \\<Longrightarrow>\n       x \\<in> vertices (map_graph_fn G f)", "case (2 x y)"], ["proof (state)\nthis:\n  (x, y) \\<in> getRel S_Idt (map_graph_fn G f)\n\ngoal (2 subgoals):\n 1. \\<And>x y.\n       (x, y) \\<in> getRel S_Idt (map_graph_fn G f) \\<Longrightarrow> x = y\n 2. \\<And>x y.\n       (x, y) \\<in> getRel S_Idt (map_graph_fn G f) \\<Longrightarrow>\n       x \\<in> vertices (map_graph_fn G f)", "thus ?case"], ["proof (prove)\nusing this:\n  (x, y) \\<in> getRel S_Idt (map_graph_fn G f)\n\ngoal (1 subgoal):\n 1. x = y", "unfolding getRel_def"], ["proof (prove)\nusing this:\n  (x, y) \\<in> {(x, y). (S_Idt, x, y) \\<in> edges (map_graph_fn G f)}\n\ngoal (1 subgoal):\n 1. x = y", "by (auto simp:f intro!:idt_eq)"], ["proof (state)\nthis:\n  x = y\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       (x, y) \\<in> getRel S_Idt (map_graph_fn G f) \\<Longrightarrow>\n       x \\<in> vertices (map_graph_fn G f)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       (x, y) \\<in> getRel S_Idt (map_graph_fn G f) \\<Longrightarrow>\n       x \\<in> vertices (map_graph_fn G f)", "case (3 x y)"], ["proof (state)\nthis:\n  (x, y) \\<in> getRel S_Idt (map_graph_fn G f)\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       (x, y) \\<in> getRel S_Idt (map_graph_fn G f) \\<Longrightarrow>\n       x \\<in> vertices (map_graph_fn G f)", "thus ?case"], ["proof (prove)\nusing this:\n  (x, y) \\<in> getRel S_Idt (map_graph_fn G f)\n\ngoal (1 subgoal):\n 1. x \\<in> vertices (map_graph_fn G f)", "unfolding getRel_def"], ["proof (prove)\nusing this:\n  (x, y) \\<in> {(x, y). (S_Idt, x, y) \\<in> edges (map_graph_fn G f)}\n\ngoal (1 subgoal):\n 1. x \\<in> vertices (map_graph_fn G f)", "by auto"], ["proof (state)\nthis:\n  x \\<in> vertices (map_graph_fn G f)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ident_rel S_Idt (map_graph_fn G f)\n\ngoal (1 subgoal):\n 1. \\<exists>f.\n       f \\<circ> f = f \\<and>\n       ident_rel S_Idt (map_graph_fn G f) \\<and>\n       subgraph (map_graph_fn G f) G \\<and>\n       (\\<forall>l x y.\n           ((l, x, y) \\<in> edges G) = ((l, f x, f y) \\<in> edges G))", "{"], ["proof (state)\nthis:\n  ident_rel S_Idt (map_graph_fn G f)\n\ngoal (1 subgoal):\n 1. \\<exists>f.\n       f \\<circ> f = f \\<and>\n       ident_rel S_Idt (map_graph_fn G f) \\<and>\n       subgraph (map_graph_fn G f) G \\<and>\n       (\\<forall>l x y.\n           ((l, x, y) \\<in> edges G) = ((l, f x, f y) \\<in> edges G))", "fix l x y"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>f.\n       f \\<circ> f = f \\<and>\n       ident_rel S_Idt (map_graph_fn G f) \\<and>\n       subgraph (map_graph_fn G f) G \\<and>\n       (\\<forall>l x y.\n           ((l, x, y) \\<in> edges G) = ((l, f x, f y) \\<in> edges G))", "assume a:\"(l,x,y) \\<in> edges G\" \"x \\<in> vertices G\" \"y \\<in> vertices G\""], ["proof (state)\nthis:\n  (l, x, y) \\<in> edges G\n  x \\<in> vertices G\n  y \\<in> vertices G\n\ngoal (1 subgoal):\n 1. \\<exists>f.\n       f \\<circ> f = f \\<and>\n       ident_rel S_Idt (map_graph_fn G f) \\<and>\n       subgraph (map_graph_fn G f) G \\<and>\n       (\\<forall>l x y.\n           ((l, x, y) \\<in> edges G) = ((l, f x, f y) \\<in> edges G))", "hence f:\"(f x, x) \\<in> getRel S_Idt G\" \"(f y, y) \\<in> getRel S_Idt G\""], ["proof (prove)\nusing this:\n  (l, x, y) \\<in> edges G\n  x \\<in> vertices G\n  y \\<in> vertices G\n\ngoal (1 subgoal):\n 1. (f x, x) \\<in> getRel S_Idt G &&& (f y, y) \\<in> getRel S_Idt G", "using vert_P equivE[OF equiv] sym_def"], ["proof (prove)\nusing this:\n  (l, x, y) \\<in> edges G\n  x \\<in> vertices G\n  y \\<in> vertices G\n  ?x \\<in> vertices G \\<Longrightarrow>\n  (?x, Eps (P ?x)) \\<in> getRel S_Idt G\n  (\\<lbrakk>refl_on (vertices G) (getRel S_Idt G); sym (getRel S_Idt G);\n    trans (getRel S_Idt G)\\<rbrakk>\n   \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis\n  sym ?r = (\\<forall>x y. (x, y) \\<in> ?r \\<longrightarrow> (y, x) \\<in> ?r)\n\ngoal (1 subgoal):\n 1. (f x, x) \\<in> getRel S_Idt G &&& (f y, y) \\<in> getRel S_Idt G", "unfolding f"], ["proof (prove)\nusing this:\n  (l, x, y) \\<in> edges G\n  x \\<in> vertices G\n  y \\<in> vertices G\n  ?x \\<in> vertices G \\<Longrightarrow>\n  (?x, Eps (P ?x)) \\<in> getRel S_Idt G\n  (\\<lbrakk>refl_on (vertices G) (getRel S_Idt G); sym (getRel S_Idt G);\n    trans (getRel S_Idt G)\\<rbrakk>\n   \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis\n  sym ?r = (\\<forall>x y. (x, y) \\<in> ?r \\<longrightarrow> (y, x) \\<in> ?r)\n\ngoal (1 subgoal):\n 1. (if getRel S_Idt G `` {x} = {} then x else Eps (P x), x)\n    \\<in> getRel S_Idt G &&&\n    (if getRel S_Idt G `` {y} = {} then y else Eps (P y), y)\n    \\<in> getRel S_Idt G", "by auto"], ["proof (state)\nthis:\n  (f x, x) \\<in> getRel S_Idt G\n  (f y, y) \\<in> getRel S_Idt G\n\ngoal (1 subgoal):\n 1. \\<exists>f.\n       f \\<circ> f = f \\<and>\n       ident_rel S_Idt (map_graph_fn G f) \\<and>\n       subgraph (map_graph_fn G f) G \\<and>\n       (\\<forall>l x y.\n           ((l, x, y) \\<in> edges G) = ((l, f x, f y) \\<in> edges G))", "from a"], ["proof (chain)\npicking this:\n  (l, x, y) \\<in> edges G\n  x \\<in> vertices G\n  y \\<in> vertices G", "have gr:\"(x, y) \\<in> getRel l G\""], ["proof (prove)\nusing this:\n  (l, x, y) \\<in> edges G\n  x \\<in> vertices G\n  y \\<in> vertices G\n\ngoal (1 subgoal):\n 1. (x, y) \\<in> getRel l G", "unfolding getRel_def"], ["proof (prove)\nusing this:\n  (l, x, y) \\<in> edges G\n  x \\<in> vertices G\n  y \\<in> vertices G\n\ngoal (1 subgoal):\n 1. (x, y) \\<in> {(x, y). (l, x, y) \\<in> edges G}", "by auto"], ["proof (state)\nthis:\n  (x, y) \\<in> getRel l G\n\ngoal (1 subgoal):\n 1. \\<exists>f.\n       f \\<circ> f = f \\<and>\n       ident_rel S_Idt (map_graph_fn G f) \\<and>\n       subgraph (map_graph_fn G f) G \\<and>\n       (\\<forall>l x y.\n           ((l, x, y) \\<in> edges G) = ((l, f x, f y) \\<in> edges G))", "from congruentD[OF congr(1)[OF gr] f(1)] congruentD[OF congr(2)[OF gr] f(2)] a(1)"], ["proof (chain)\npicking this:\n  getRel l G `` {f x} = getRel l G `` {x}\n  (getRel l G)\\<inverse> `` {f y} = (getRel l G)\\<inverse> `` {y}\n  (l, x, y) \\<in> edges G", "have \"(l,f x, f y) \\<in> edges G\""], ["proof (prove)\nusing this:\n  getRel l G `` {f x} = getRel l G `` {x}\n  (getRel l G)\\<inverse> `` {f y} = (getRel l G)\\<inverse> `` {y}\n  (l, x, y) \\<in> edges G\n\ngoal (1 subgoal):\n 1. (l, f x, f y) \\<in> edges G", "unfolding set_eq_iff getRel_def"], ["proof (prove)\nusing this:\n  \\<forall>xa.\n     (xa \\<in> {(x, y). (l, x, y) \\<in> edges G} `` {f x}) =\n     (xa \\<in> {(x, y). (l, x, y) \\<in> edges G} `` {x})\n  \\<forall>x.\n     (x \\<in> {(x, y). (l, x, y) \\<in> edges G}\\<inverse> `` {f y}) =\n     (x \\<in> {(x, y). (l, x, y) \\<in> edges G}\\<inverse> `` {y})\n  (l, x, y) \\<in> edges G\n\ngoal (1 subgoal):\n 1. (l, f x, f y) \\<in> edges G", "by auto"], ["proof (state)\nthis:\n  (l, f x, f y) \\<in> edges G\n\ngoal (1 subgoal):\n 1. \\<exists>f.\n       f \\<circ> f = f \\<and>\n       ident_rel S_Idt (map_graph_fn G f) \\<and>\n       subgraph (map_graph_fn G f) G \\<and>\n       (\\<forall>l x y.\n           ((l, x, y) \\<in> edges G) = ((l, f x, f y) \\<in> edges G))", "}"], ["proof (state)\nthis:\n  \\<lbrakk>(?l2, ?x2, ?y2) \\<in> edges G; ?x2 \\<in> vertices G;\n   ?y2 \\<in> vertices G\\<rbrakk>\n  \\<Longrightarrow> (?l2, f ?x2, f ?y2) \\<in> edges G\n\ngoal (1 subgoal):\n 1. \\<exists>f.\n       f \\<circ> f = f \\<and>\n       ident_rel S_Idt (map_graph_fn G f) \\<and>\n       subgraph (map_graph_fn G f) G \\<and>\n       (\\<forall>l x y.\n           ((l, x, y) \\<in> edges G) = ((l, f x, f y) \\<in> edges G))", "note gu1 = this"], ["proof (state)\nthis:\n  \\<lbrakk>(?l2, ?x2, ?y2) \\<in> edges G; ?x2 \\<in> vertices G;\n   ?y2 \\<in> vertices G\\<rbrakk>\n  \\<Longrightarrow> (?l2, f ?x2, f ?y2) \\<in> edges G\n\ngoal (1 subgoal):\n 1. \\<exists>f.\n       f \\<circ> f = f \\<and>\n       ident_rel S_Idt (map_graph_fn G f) \\<and>\n       subgraph (map_graph_fn G f) G \\<and>\n       (\\<forall>l x y.\n           ((l, x, y) \\<in> edges G) = ((l, f x, f y) \\<in> edges G))", "{"], ["proof (state)\nthis:\n  \\<lbrakk>(?l2, ?x2, ?y2) \\<in> edges G; ?x2 \\<in> vertices G;\n   ?y2 \\<in> vertices G\\<rbrakk>\n  \\<Longrightarrow> (?l2, f ?x2, f ?y2) \\<in> edges G\n\ngoal (1 subgoal):\n 1. \\<exists>f.\n       f \\<circ> f = f \\<and>\n       ident_rel S_Idt (map_graph_fn G f) \\<and>\n       subgraph (map_graph_fn G f) G \\<and>\n       (\\<forall>l x y.\n           ((l, x, y) \\<in> edges G) = ((l, f x, f y) \\<in> edges G))", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>f.\n       f \\<circ> f = f \\<and>\n       ident_rel S_Idt (map_graph_fn G f) \\<and>\n       subgraph (map_graph_fn G f) G \\<and>\n       (\\<forall>l x y.\n           ((l, x, y) \\<in> edges G) = ((l, f x, f y) \\<in> edges G))", "assume a: \"x \\<in> vertices G\""], ["proof (state)\nthis:\n  x \\<in> vertices G\n\ngoal (1 subgoal):\n 1. \\<exists>f.\n       f \\<circ> f = f \\<and>\n       ident_rel S_Idt (map_graph_fn G f) \\<and>\n       subgraph (map_graph_fn G f) G \\<and>\n       (\\<forall>l x y.\n           ((l, x, y) \\<in> edges G) = ((l, f x, f y) \\<in> edges G))", "with vert_P"], ["proof (chain)\npicking this:\n  ?x \\<in> vertices G \\<Longrightarrow>\n  (?x, Eps (P ?x)) \\<in> getRel S_Idt G\n  x \\<in> vertices G", "have \"(x,Eps (P x)) \\<in> getRel S_Idt G\""], ["proof (prove)\nusing this:\n  ?x \\<in> vertices G \\<Longrightarrow>\n  (?x, Eps (P ?x)) \\<in> getRel S_Idt G\n  x \\<in> vertices G\n\ngoal (1 subgoal):\n 1. (x, Eps (P x)) \\<in> getRel S_Idt G", "by auto"], ["proof (state)\nthis:\n  (x, Eps (P x)) \\<in> getRel S_Idt G\n\ngoal (1 subgoal):\n 1. \\<exists>f.\n       f \\<circ> f = f \\<and>\n       ident_rel S_Idt (map_graph_fn G f) \\<and>\n       subgraph (map_graph_fn G f) G \\<and>\n       (\\<forall>l x y.\n           ((l, x, y) \\<in> edges G) = ((l, f x, f y) \\<in> edges G))", "hence \"Eps (P x) \\<in> vertices G\""], ["proof (prove)\nusing this:\n  (x, Eps (P x)) \\<in> getRel S_Idt G\n\ngoal (1 subgoal):\n 1. Eps (P x) \\<in> vertices G", "using assms(1)"], ["proof (prove)\nusing this:\n  (x, Eps (P x)) \\<in> getRel S_Idt G\n  graph G\n\ngoal (1 subgoal):\n 1. Eps (P x) \\<in> vertices G", "unfolding getRel_def"], ["proof (prove)\nusing this:\n  (x, Eps (P x)) \\<in> {(x, y). (S_Idt, x, y) \\<in> edges G}\n  graph G\n\ngoal (1 subgoal):\n 1. Eps (P x) \\<in> vertices G", "by auto"], ["proof (state)\nthis:\n  Eps (P x) \\<in> vertices G\n\ngoal (1 subgoal):\n 1. \\<exists>f.\n       f \\<circ> f = f \\<and>\n       ident_rel S_Idt (map_graph_fn G f) \\<and>\n       subgraph (map_graph_fn G f) G \\<and>\n       (\\<forall>l x y.\n           ((l, x, y) \\<in> edges G) = ((l, f x, f y) \\<in> edges G))", "hence \"f x \\<in> vertices G\""], ["proof (prove)\nusing this:\n  Eps (P x) \\<in> vertices G\n\ngoal (1 subgoal):\n 1. f x \\<in> vertices G", "using a"], ["proof (prove)\nusing this:\n  Eps (P x) \\<in> vertices G\n  x \\<in> vertices G\n\ngoal (1 subgoal):\n 1. f x \\<in> vertices G", "unfolding f"], ["proof (prove)\nusing this:\n  Eps (P x) \\<in> vertices G\n  x \\<in> vertices G\n\ngoal (1 subgoal):\n 1. (if getRel S_Idt G `` {x} = {} then x else Eps (P x)) \\<in> vertices G", "by auto"], ["proof (state)\nthis:\n  f x \\<in> vertices G\n\ngoal (1 subgoal):\n 1. \\<exists>f.\n       f \\<circ> f = f \\<and>\n       ident_rel S_Idt (map_graph_fn G f) \\<and>\n       subgraph (map_graph_fn G f) G \\<and>\n       (\\<forall>l x y.\n           ((l, x, y) \\<in> edges G) = ((l, f x, f y) \\<in> edges G))", "}"], ["proof (state)\nthis:\n  ?x2 \\<in> vertices G \\<Longrightarrow> f ?x2 \\<in> vertices G\n\ngoal (1 subgoal):\n 1. \\<exists>f.\n       f \\<circ> f = f \\<and>\n       ident_rel S_Idt (map_graph_fn G f) \\<and>\n       subgraph (map_graph_fn G f) G \\<and>\n       (\\<forall>l x y.\n           ((l, x, y) \\<in> edges G) = ((l, f x, f y) \\<in> edges G))", "note gu2 = this"], ["proof (state)\nthis:\n  ?x2 \\<in> vertices G \\<Longrightarrow> f ?x2 \\<in> vertices G\n\ngoal (1 subgoal):\n 1. \\<exists>f.\n       f \\<circ> f = f \\<and>\n       ident_rel S_Idt (map_graph_fn G f) \\<and>\n       subgraph (map_graph_fn G f) G \\<and>\n       (\\<forall>l x y.\n           ((l, x, y) \\<in> edges G) = ((l, f x, f y) \\<in> edges G))", "have \"graph_union (map_graph_fn G f) G = G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. graph_union (map_graph_fn G f) G = G", "using gu1 gu2 assms(1)"], ["proof (prove)\nusing this:\n  \\<lbrakk>(?l2, ?x2, ?y2) \\<in> edges G; ?x2 \\<in> vertices G;\n   ?y2 \\<in> vertices G\\<rbrakk>\n  \\<Longrightarrow> (?l2, f ?x2, f ?y2) \\<in> edges G\n  ?x2 \\<in> vertices G \\<Longrightarrow> f ?x2 \\<in> vertices G\n  graph G\n\ngoal (1 subgoal):\n 1. graph_union (map_graph_fn G f) G = G", "unfolding graph_union_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>(?l2, ?x2, ?y2) \\<in> edges G; ?x2 \\<in> vertices G;\n   ?y2 \\<in> vertices G\\<rbrakk>\n  \\<Longrightarrow> (?l2, f ?x2, f ?y2) \\<in> edges G\n  ?x2 \\<in> vertices G \\<Longrightarrow> f ?x2 \\<in> vertices G\n  graph G\n\ngoal (1 subgoal):\n 1. LG (edges (map_graph_fn G f) \\<union> edges G)\n     (vertices (map_graph_fn G f) \\<union> vertices G) =\n    G", "by(cases G,auto)"], ["proof (state)\nthis:\n  graph_union (map_graph_fn G f) G = G\n\ngoal (1 subgoal):\n 1. \\<exists>f.\n       f \\<circ> f = f \\<and>\n       ident_rel S_Idt (map_graph_fn G f) \\<and>\n       subgraph (map_graph_fn G f) G \\<and>\n       (\\<forall>l x y.\n           ((l, x, y) \\<in> edges G) = ((l, f x, f y) \\<in> edges G))", "hence subg: \"subgraph (map_graph_fn G f) G\""], ["proof (prove)\nusing this:\n  graph_union (map_graph_fn G f) G = G\n\ngoal (1 subgoal):\n 1. subgraph (map_graph_fn G f) G", "unfolding subgraph_def"], ["proof (prove)\nusing this:\n  graph_union (map_graph_fn G f) G = G\n\ngoal (1 subgoal):\n 1. graph (map_graph_fn G f) \\<and>\n    graph G \\<and> graph_union (map_graph_fn G f) G = G", "using assms(1)"], ["proof (prove)\nusing this:\n  graph_union (map_graph_fn G f) G = G\n  graph G\n\ngoal (1 subgoal):\n 1. graph (map_graph_fn G f) \\<and>\n    graph G \\<and> graph_union (map_graph_fn G f) G = G", "by auto"], ["proof (state)\nthis:\n  subgraph (map_graph_fn G f) G\n\ngoal (1 subgoal):\n 1. \\<exists>f.\n       f \\<circ> f = f \\<and>\n       ident_rel S_Idt (map_graph_fn G f) \\<and>\n       subgraph (map_graph_fn G f) G \\<and>\n       (\\<forall>l x y.\n           ((l, x, y) \\<in> edges G) = ((l, f x, f y) \\<in> edges G))", "have congr:\"((l, x, y) \\<in> edges G) = ((l, f x, f y) \\<in> edges G)\" for l x y"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((l, x, y) \\<in> edges G) = ((l, f x, f y) \\<in> edges G)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. (l, x, y) \\<in> edges G \\<Longrightarrow> (l, f x, f y) \\<in> edges G\n 2. (l, f x, f y) \\<in> edges G \\<Longrightarrow> (l, x, y) \\<in> edges G", "assume a:\"((l, f x, f y) \\<in> edges G)\""], ["proof (state)\nthis:\n  (l, f x, f y) \\<in> edges G\n\ngoal (2 subgoals):\n 1. (l, x, y) \\<in> edges G \\<Longrightarrow> (l, f x, f y) \\<in> edges G\n 2. (l, f x, f y) \\<in> edges G \\<Longrightarrow> (l, x, y) \\<in> edges G", "hence gr:\"(f x, f y) \\<in> getRel l G\""], ["proof (prove)\nusing this:\n  (l, f x, f y) \\<in> edges G\n\ngoal (1 subgoal):\n 1. (f x, f y) \\<in> getRel l G", "unfolding getRel_def"], ["proof (prove)\nusing this:\n  (l, f x, f y) \\<in> edges G\n\ngoal (1 subgoal):\n 1. (f x, f y) \\<in> {(x, y). (l, x, y) \\<in> edges G}", "by auto"], ["proof (state)\nthis:\n  (f x, f y) \\<in> getRel l G\n\ngoal (2 subgoals):\n 1. (l, x, y) \\<in> edges G \\<Longrightarrow> (l, f x, f y) \\<in> edges G\n 2. (l, f x, f y) \\<in> edges G \\<Longrightarrow> (l, x, y) \\<in> edges G", "from a"], ["proof (chain)\npicking this:\n  (l, f x, f y) \\<in> edges G", "have fv:\"f x \\<in> vertices G\" \"f y \\<in> vertices G\""], ["proof (prove)\nusing this:\n  (l, f x, f y) \\<in> edges G\n\ngoal (1 subgoal):\n 1. f x \\<in> vertices G &&& f y \\<in> vertices G", "using assms(1)"], ["proof (prove)\nusing this:\n  (l, f x, f y) \\<in> edges G\n  graph G\n\ngoal (1 subgoal):\n 1. f x \\<in> vertices G &&& f y \\<in> vertices G", "by auto"], ["proof (state)\nthis:\n  f x \\<in> vertices G\n  f y \\<in> vertices G\n\ngoal (2 subgoals):\n 1. (l, x, y) \\<in> edges G \\<Longrightarrow> (l, f x, f y) \\<in> edges G\n 2. (l, f x, f y) \\<in> edges G \\<Longrightarrow> (l, x, y) \\<in> edges G", "{"], ["proof (state)\nthis:\n  f x \\<in> vertices G\n  f y \\<in> vertices G\n\ngoal (2 subgoals):\n 1. (l, x, y) \\<in> edges G \\<Longrightarrow> (l, f x, f y) \\<in> edges G\n 2. (l, f x, f y) \\<in> edges G \\<Longrightarrow> (l, x, y) \\<in> edges G", "fix x"], ["proof (state)\ngoal (2 subgoals):\n 1. (l, x__, y) \\<in> edges G \\<Longrightarrow>\n    (l, f x__, f y) \\<in> edges G\n 2. (l, f x__, f y) \\<in> edges G \\<Longrightarrow>\n    (l, x__, y) \\<in> edges G", "assume a:\"f x \\<in> vertices G\" \"x \\<notin> vertices G\""], ["proof (state)\nthis:\n  f x \\<in> vertices G\n  x \\<notin> vertices G\n\ngoal (2 subgoals):\n 1. (l, x__, y) \\<in> edges G \\<Longrightarrow>\n    (l, f x__, f y) \\<in> edges G\n 2. (l, f x__, f y) \\<in> edges G \\<Longrightarrow>\n    (l, x__, y) \\<in> edges G", "with assms(1)"], ["proof (chain)\npicking this:\n  graph G\n  f x \\<in> vertices G\n  x \\<notin> vertices G", "have \"getRel S_Idt G `` {x} = {}\""], ["proof (prove)\nusing this:\n  graph G\n  f x \\<in> vertices G\n  x \\<notin> vertices G\n\ngoal (1 subgoal):\n 1. getRel S_Idt G `` {x} = {}", "by auto"], ["proof (state)\nthis:\n  getRel S_Idt G `` {x} = {}\n\ngoal (2 subgoals):\n 1. (l, x__, y) \\<in> edges G \\<Longrightarrow>\n    (l, f x__, f y) \\<in> edges G\n 2. (l, f x__, f y) \\<in> edges G \\<Longrightarrow>\n    (l, x__, y) \\<in> edges G", "with a f"], ["proof (chain)\npicking this:\n  f x \\<in> vertices G\n  x \\<notin> vertices G\n  f = (\\<lambda>x. if getRel S_Idt G `` {x} = {} then x else SOME y. P x y)\n  getRel S_Idt G `` {x} = {}", "have False"], ["proof (prove)\nusing this:\n  f x \\<in> vertices G\n  x \\<notin> vertices G\n  f = (\\<lambda>x. if getRel S_Idt G `` {x} = {} then x else SOME y. P x y)\n  getRel S_Idt G `` {x} = {}\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal (2 subgoals):\n 1. (l, x__, y) \\<in> edges G \\<Longrightarrow>\n    (l, f x__, f y) \\<in> edges G\n 2. (l, f x__, f y) \\<in> edges G \\<Longrightarrow>\n    (l, x__, y) \\<in> edges G", "}"], ["proof (state)\nthis:\n  \\<lbrakk>f ?xa2 \\<in> vertices G; ?xa2 \\<notin> vertices G\\<rbrakk>\n  \\<Longrightarrow> False\n\ngoal (2 subgoals):\n 1. (l, x, y) \\<in> edges G \\<Longrightarrow> (l, f x, f y) \\<in> edges G\n 2. (l, f x, f y) \\<in> edges G \\<Longrightarrow> (l, x, y) \\<in> edges G", "with fv"], ["proof (chain)\npicking this:\n  f x \\<in> vertices G\n  f y \\<in> vertices G\n  \\<lbrakk>f ?xa2 \\<in> vertices G; ?xa2 \\<notin> vertices G\\<rbrakk>\n  \\<Longrightarrow> False", "have v:\"x \\<in> vertices G\" \"y \\<in> vertices G\""], ["proof (prove)\nusing this:\n  f x \\<in> vertices G\n  f y \\<in> vertices G\n  \\<lbrakk>f ?xa2 \\<in> vertices G; ?xa2 \\<notin> vertices G\\<rbrakk>\n  \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. x \\<in> vertices G &&& y \\<in> vertices G", "by auto"], ["proof (state)\nthis:\n  x \\<in> vertices G\n  y \\<in> vertices G\n\ngoal (2 subgoals):\n 1. (l, x, y) \\<in> edges G \\<Longrightarrow> (l, f x, f y) \\<in> edges G\n 2. (l, f x, f y) \\<in> edges G \\<Longrightarrow> (l, x, y) \\<in> edges G", "have gx:\"(x, f x) \\<in> getRel S_Idt G\" and gy:\"(y, f y) \\<in> getRel S_Idt G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x, f x) \\<in> getRel S_Idt G &&& (y, f y) \\<in> getRel S_Idt G", "by (auto simp: f v vert_P)"], ["proof (state)\nthis:\n  (x, f x) \\<in> getRel S_Idt G\n  (y, f y) \\<in> getRel S_Idt G\n\ngoal (2 subgoals):\n 1. (l, x, y) \\<in> edges G \\<Longrightarrow> (l, f x, f y) \\<in> edges G\n 2. (l, f x, f y) \\<in> edges G \\<Longrightarrow> (l, x, y) \\<in> edges G", "from congruentD[OF congr(1)[OF gr] gx] gr"], ["proof (chain)\npicking this:\n  getRel l G `` {x} = getRel l G `` {f x}\n  (f x, f y) \\<in> getRel l G", "have \"(x, f y) \\<in> getRel l G\""], ["proof (prove)\nusing this:\n  getRel l G `` {x} = getRel l G `` {f x}\n  (f x, f y) \\<in> getRel l G\n\ngoal (1 subgoal):\n 1. (x, f y) \\<in> getRel l G", "by auto"], ["proof (state)\nthis:\n  (x, f y) \\<in> getRel l G\n\ngoal (2 subgoals):\n 1. (l, x, y) \\<in> edges G \\<Longrightarrow> (l, f x, f y) \\<in> edges G\n 2. (l, f x, f y) \\<in> edges G \\<Longrightarrow> (l, x, y) \\<in> edges G", "with congruentD[OF congr(2)[OF gr] gy]"], ["proof (chain)\npicking this:\n  (getRel l G)\\<inverse> `` {y} = (getRel l G)\\<inverse> `` {f y}\n  (x, f y) \\<in> getRel l G", "have \"(x, y) \\<in> getRel l G\""], ["proof (prove)\nusing this:\n  (getRel l G)\\<inverse> `` {y} = (getRel l G)\\<inverse> `` {f y}\n  (x, f y) \\<in> getRel l G\n\ngoal (1 subgoal):\n 1. (x, y) \\<in> getRel l G", "by auto"], ["proof (state)\nthis:\n  (x, y) \\<in> getRel l G\n\ngoal (2 subgoals):\n 1. (l, x, y) \\<in> edges G \\<Longrightarrow> (l, f x, f y) \\<in> edges G\n 2. (l, f x, f y) \\<in> edges G \\<Longrightarrow> (l, x, y) \\<in> edges G", "thus \"((l, x, y) \\<in> edges G)\""], ["proof (prove)\nusing this:\n  (x, y) \\<in> getRel l G\n\ngoal (1 subgoal):\n 1. (l, x, y) \\<in> edges G", "unfolding getRel_def"], ["proof (prove)\nusing this:\n  (x, y) \\<in> {(x, y). (l, x, y) \\<in> edges G}\n\ngoal (1 subgoal):\n 1. (l, x, y) \\<in> edges G", "by auto"], ["proof (state)\nthis:\n  (l, x, y) \\<in> edges G\n\ngoal (1 subgoal):\n 1. (l, x, y) \\<in> edges G \\<Longrightarrow> (l, f x, f y) \\<in> edges G", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. (l, x, y) \\<in> edges G \\<Longrightarrow> (l, f x, f y) \\<in> edges G", "assume e:\"((l, x, y) \\<in> edges G)\""], ["proof (state)\nthis:\n  (l, x, y) \\<in> edges G\n\ngoal (1 subgoal):\n 1. (l, x, y) \\<in> edges G \\<Longrightarrow> (l, f x, f y) \\<in> edges G", "hence \"x \\<in> vertices G\" \"y \\<in> vertices G\""], ["proof (prove)\nusing this:\n  (l, x, y) \\<in> edges G\n\ngoal (1 subgoal):\n 1. x \\<in> vertices G &&& y \\<in> vertices G", "using assms(1)"], ["proof (prove)\nusing this:\n  (l, x, y) \\<in> edges G\n  graph G\n\ngoal (1 subgoal):\n 1. x \\<in> vertices G &&& y \\<in> vertices G", "by auto"], ["proof (state)\nthis:\n  x \\<in> vertices G\n  y \\<in> vertices G\n\ngoal (1 subgoal):\n 1. (l, x, y) \\<in> edges G \\<Longrightarrow> (l, f x, f y) \\<in> edges G", "from gu1[OF e this]"], ["proof (chain)\npicking this:\n  (l, f x, f y) \\<in> edges G", "show \"((l, f x, f y) \\<in> edges G)\""], ["proof (prove)\nusing this:\n  (l, f x, f y) \\<in> edges G\n\ngoal (1 subgoal):\n 1. (l, f x, f y) \\<in> edges G", "."], ["proof (state)\nthis:\n  (l, f x, f y) \\<in> edges G\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ((?l, ?x, ?y) \\<in> edges G) = ((?l, f ?x, f ?y) \\<in> edges G)\n\ngoal (1 subgoal):\n 1. \\<exists>f.\n       f \\<circ> f = f \\<and>\n       ident_rel S_Idt (map_graph_fn G f) \\<and>\n       subgraph (map_graph_fn G f) G \\<and>\n       (\\<forall>l x y.\n           ((l, x, y) \\<in> edges G) = ((l, f x, f y) \\<in> edges G))", "from idemp ident subg congr"], ["proof (chain)\npicking this:\n  f \\<circ> f = f\n  ident_rel S_Idt (map_graph_fn G f)\n  subgraph (map_graph_fn G f) G\n  ((?l, ?x, ?y) \\<in> edges G) = ((?l, f ?x, f ?y) \\<in> edges G)", "show ?thesis"], ["proof (prove)\nusing this:\n  f \\<circ> f = f\n  ident_rel S_Idt (map_graph_fn G f)\n  subgraph (map_graph_fn G f) G\n  ((?l, ?x, ?y) \\<in> edges G) = ((?l, f ?x, f ?y) \\<in> edges G)\n\ngoal (1 subgoal):\n 1. \\<exists>f.\n       f \\<circ> f = f \\<and>\n       ident_rel S_Idt (map_graph_fn G f) \\<and>\n       subgraph (map_graph_fn G f) G \\<and>\n       (\\<forall>l x y.\n           ((l, x, y) \\<in> edges G) = ((l, f x, f y) \\<in> edges G))", "by auto"], ["proof (state)\nthis:\n  \\<exists>f.\n     f \\<circ> f = f \\<and>\n     ident_rel S_Idt (map_graph_fn G f) \\<and>\n     subgraph (map_graph_fn G f) G \\<and>\n     (\\<forall>l x y.\n         ((l, x, y) \\<in> edges G) = ((l, f x, f y) \\<in> edges G))\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>The idempotency property of Lemma 7 suffices to show that 'maintained' is preserved.\\<close>"], ["", "lemma idemp_embedding_maintained_preserved:\n  assumes subg:\"subgraph (map_graph_fn G f) G\" and f:\"\\<And> x. x\\<in>vertices G \\<Longrightarrow> (f o f) x = f x\"\n      and maint:\"maintained r G\"\n    shows \"maintained r (map_graph_fn G f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. maintained r (map_graph_fn G f)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. maintained r (map_graph_fn G f)", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. maintained r (map_graph_fn G f)", "fix h"], ["proof (state)\ngoal (1 subgoal):\n 1. maintained r (map_graph_fn G f)", "assume hom_h:\"graph_homomorphism (fst r) (map_graph_fn G f) h\""], ["proof (state)\nthis:\n  graph_homomorphism (fst r) (map_graph_fn G f) h\n\ngoal (1 subgoal):\n 1. maintained r (map_graph_fn G f)", "from subgraph_preserves_hom[OF subg this] maint[unfolded maintained_def extensible_def]"], ["proof (chain)\npicking this:\n  graph_homomorphism (fst r) G h\n  \\<forall>f.\n     graph_homomorphism (fst r) G f \\<longrightarrow>\n     (\\<exists>g.\n         graph_homomorphism (snd r) G g \\<and> agree_on (fst r) f g)", "obtain g where g:\"graph_homomorphism (snd r) G g\"\n                     \"agree_on (fst r) h g\""], ["proof (prove)\nusing this:\n  graph_homomorphism (fst r) G h\n  \\<forall>f.\n     graph_homomorphism (fst r) G f \\<longrightarrow>\n     (\\<exists>g.\n         graph_homomorphism (snd r) G g \\<and> agree_on (fst r) f g)\n\ngoal (1 subgoal):\n 1. (\\<And>g.\n        \\<lbrakk>graph_homomorphism (snd r) G g;\n         agree_on (fst r) h g\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  graph_homomorphism (snd r) G g\n  agree_on (fst r) h g\n\ngoal (1 subgoal):\n 1. maintained r (map_graph_fn G f)", "{"], ["proof (state)\nthis:\n  graph_homomorphism (snd r) G g\n  agree_on (fst r) h g\n\ngoal (1 subgoal):\n 1. maintained r (map_graph_fn G f)", "fix v x"], ["proof (state)\ngoal (1 subgoal):\n 1. maintained r (map_graph_fn G f)", "have subs:\"h `` {v} \\<subseteq> vertices (map_graph_fn G f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. h `` {v} \\<subseteq> vertices (map_graph_fn G f)", "using hom_h[unfolded graph_homomorphism_def]"], ["proof (prove)\nusing this:\n  vertices (fst r) = Domain h \\<and>\n  graph (fst r) \\<and>\n  graph (map_graph_fn G f) \\<and>\n  h `` vertices (fst r) \\<subseteq> vertices (map_graph_fn G f) \\<and>\n  univalent h \\<and>\n  edge_preserving h (edges (fst r)) (edges (map_graph_fn G f))\n\ngoal (1 subgoal):\n 1. h `` {v} \\<subseteq> vertices (map_graph_fn G f)", "by auto"], ["proof (state)\nthis:\n  h `` {v} \\<subseteq> vertices (map_graph_fn G f)\n\ngoal (1 subgoal):\n 1. maintained r (map_graph_fn G f)", "assume \"v\\<in>vertices (fst r)\" and x:\"(v, x) \\<in> g\""], ["proof (state)\nthis:\n  v \\<in> vertices (fst r)\n  (v, x) \\<in> g\n\ngoal (1 subgoal):\n 1. maintained r (map_graph_fn G f)", "hence \"g `` {v} = h `` {v}\""], ["proof (prove)\nusing this:\n  v \\<in> vertices (fst r)\n  (v, x) \\<in> g\n\ngoal (1 subgoal):\n 1. g `` {v} = h `` {v}", "using g(2)[unfolded agree_on_def,rule_format,of v]"], ["proof (prove)\nusing this:\n  v \\<in> vertices (fst r)\n  (v, x) \\<in> g\n  v \\<in> vertices (fst r) \\<Longrightarrow> h `` {v} = g `` {v}\n\ngoal (1 subgoal):\n 1. g `` {v} = h `` {v}", "by auto"], ["proof (state)\nthis:\n  g `` {v} = h `` {v}\n\ngoal (1 subgoal):\n 1. maintained r (map_graph_fn G f)", "hence \"g `` {v} \\<subseteq> vertices (map_graph_fn G f)\""], ["proof (prove)\nusing this:\n  g `` {v} = h `` {v}\n\ngoal (1 subgoal):\n 1. g `` {v} \\<subseteq> vertices (map_graph_fn G f)", "using subs"], ["proof (prove)\nusing this:\n  g `` {v} = h `` {v}\n  h `` {v} \\<subseteq> vertices (map_graph_fn G f)\n\ngoal (1 subgoal):\n 1. g `` {v} \\<subseteq> vertices (map_graph_fn G f)", "by auto"], ["proof (state)\nthis:\n  g `` {v} \\<subseteq> vertices (map_graph_fn G f)\n\ngoal (1 subgoal):\n 1. maintained r (map_graph_fn G f)", "hence x2:\"x \\<in> vertices (map_graph_fn G f)\""], ["proof (prove)\nusing this:\n  g `` {v} \\<subseteq> vertices (map_graph_fn G f)\n\ngoal (1 subgoal):\n 1. x \\<in> vertices (map_graph_fn G f)", "using x"], ["proof (prove)\nusing this:\n  g `` {v} \\<subseteq> vertices (map_graph_fn G f)\n  (v, x) \\<in> g\n\ngoal (1 subgoal):\n 1. x \\<in> vertices (map_graph_fn G f)", "by auto"], ["proof (state)\nthis:\n  x \\<in> vertices (map_graph_fn G f)\n\ngoal (1 subgoal):\n 1. maintained r (map_graph_fn G f)", "then"], ["proof (chain)\npicking this:\n  x \\<in> vertices (map_graph_fn G f)", "obtain y where \"x = f y\" \"y \\<in> vertices G\""], ["proof (prove)\nusing this:\n  x \\<in> vertices (map_graph_fn G f)\n\ngoal (1 subgoal):\n 1. (\\<And>y.\n        \\<lbrakk>x = f y; y \\<in> vertices G\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  x = f y\n  y \\<in> vertices G\n\ngoal (1 subgoal):\n 1. maintained r (map_graph_fn G f)", "hence f:\"f x = x\""], ["proof (prove)\nusing this:\n  x = f y\n  y \\<in> vertices G\n\ngoal (1 subgoal):\n 1. f x = x", "using f x2"], ["proof (prove)\nusing this:\n  x = f y\n  y \\<in> vertices G\n  ?x \\<in> vertices G \\<Longrightarrow> (f \\<circ> f) ?x = f ?x\n  x \\<in> vertices (map_graph_fn G f)\n\ngoal (1 subgoal):\n 1. f x = x", "unfolding o_def"], ["proof (prove)\nusing this:\n  x = f y\n  y \\<in> vertices G\n  ?x \\<in> vertices G \\<Longrightarrow> f (f ?x) = f ?x\n  x \\<in> vertices (map_graph_fn G f)\n\ngoal (1 subgoal):\n 1. f x = x", "by metis"], ["proof (state)\nthis:\n  f x = x\n\ngoal (1 subgoal):\n 1. maintained r (map_graph_fn G f)", "from x2 subgraph_subset[OF subg]"], ["proof (chain)\npicking this:\n  x \\<in> vertices (map_graph_fn G f)\n  vertices (map_graph_fn G f) \\<subseteq> vertices G\n  edges (restrict (map_graph_fn G f)) \\<subseteq> edges G", "have \"(x, f x) \\<in> on_graph G f\""], ["proof (prove)\nusing this:\n  x \\<in> vertices (map_graph_fn G f)\n  vertices (map_graph_fn G f) \\<subseteq> vertices G\n  edges (restrict (map_graph_fn G f)) \\<subseteq> edges G\n\ngoal (1 subgoal):\n 1. (x, f x) \\<in> on_graph G f", "by auto"], ["proof (state)\nthis:\n  (x, f x) \\<in> on_graph G f\n\ngoal (1 subgoal):\n 1. maintained r (map_graph_fn G f)", "with x"], ["proof (chain)\npicking this:\n  (v, x) \\<in> g\n  (x, f x) \\<in> on_graph G f", "have \"(v, x) \\<in> g O on_graph G f\" \"f x = x\""], ["proof (prove)\nusing this:\n  (v, x) \\<in> g\n  (x, f x) \\<in> on_graph G f\n\ngoal (1 subgoal):\n 1. (v, x) \\<in> g O on_graph G f &&& f x = x", "unfolding f"], ["proof (prove)\nusing this:\n  (v, x) \\<in> g\n  (x, x) \\<in> on_graph G f\n\ngoal (1 subgoal):\n 1. (v, x) \\<in> g O on_graph G f &&& x = x", "by auto"], ["proof (state)\nthis:\n  (v, x) \\<in> g O on_graph G f\n  f x = x\n\ngoal (1 subgoal):\n 1. maintained r (map_graph_fn G f)", "}"], ["proof (state)\nthis:\n  \\<lbrakk>?v2 \\<in> vertices (fst r); (?v2, ?x2) \\<in> g\\<rbrakk>\n  \\<Longrightarrow> (?v2, ?x2) \\<in> g O on_graph G f\n  \\<lbrakk>?v2 \\<in> vertices (fst r); (?v2, ?x2) \\<in> g\\<rbrakk>\n  \\<Longrightarrow> f ?x2 = ?x2\n\ngoal (1 subgoal):\n 1. maintained r (map_graph_fn G f)", "hence agr:\"agree_on (fst r) h (g O on_graph G f)\""], ["proof (prove)\nusing this:\n  \\<lbrakk>?v2 \\<in> vertices (fst r); (?v2, ?x2) \\<in> g\\<rbrakk>\n  \\<Longrightarrow> (?v2, ?x2) \\<in> g O on_graph G f\n  \\<lbrakk>?v2 \\<in> vertices (fst r); (?v2, ?x2) \\<in> g\\<rbrakk>\n  \\<Longrightarrow> f ?x2 = ?x2\n\ngoal (1 subgoal):\n 1. agree_on (fst r) h (g O on_graph G f)", "using g(2)"], ["proof (prove)\nusing this:\n  \\<lbrakk>?v2 \\<in> vertices (fst r); (?v2, ?x2) \\<in> g\\<rbrakk>\n  \\<Longrightarrow> (?v2, ?x2) \\<in> g O on_graph G f\n  \\<lbrakk>?v2 \\<in> vertices (fst r); (?v2, ?x2) \\<in> g\\<rbrakk>\n  \\<Longrightarrow> f ?x2 = ?x2\n  agree_on (fst r) h g\n\ngoal (1 subgoal):\n 1. agree_on (fst r) h (g O on_graph G f)", "unfolding agree_on_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>?v2 \\<in> vertices (fst r); (?v2, ?x2) \\<in> g\\<rbrakk>\n  \\<Longrightarrow> (?v2, ?x2) \\<in> g O on_graph G f\n  \\<lbrakk>?v2 \\<in> vertices (fst r); (?v2, ?x2) \\<in> g\\<rbrakk>\n  \\<Longrightarrow> f ?x2 = ?x2\n  \\<forall>v\\<in>vertices (fst r). h `` {v} = g `` {v}\n\ngoal (1 subgoal):\n 1. \\<forall>v\\<in>vertices (fst r). h `` {v} = (g O on_graph G f) `` {v}", "by auto"], ["proof (state)\nthis:\n  agree_on (fst r) h (g O on_graph G f)\n\ngoal (1 subgoal):\n 1. maintained r (map_graph_fn G f)", "have \"extensible r (map_graph_fn G f) h\""], ["proof (prove)\ngoal (1 subgoal):\n 1. extensible r (map_graph_fn G f) h", "unfolding extensible_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>g.\n       graph_homomorphism (snd r) (map_graph_fn G f) g \\<and>\n       agree_on (fst r) h g", "using graph_homomorphism_on_graph[OF g(1)] agr"], ["proof (prove)\nusing this:\n  graph_homomorphism (snd r) (map_graph_fn G ?f) (g O on_graph G ?f)\n  agree_on (fst r) h (g O on_graph G f)\n\ngoal (1 subgoal):\n 1. \\<exists>g.\n       graph_homomorphism (snd r) (map_graph_fn G f) g \\<and>\n       agree_on (fst r) h g", "by blast"], ["proof (state)\nthis:\n  extensible r (map_graph_fn G f) h\n\ngoal (1 subgoal):\n 1. maintained r (map_graph_fn G f)", "}"], ["proof (state)\nthis:\n  graph_homomorphism (fst r) (map_graph_fn G f) ?h2 \\<Longrightarrow>\n  extensible r (map_graph_fn G f) ?h2\n\ngoal (1 subgoal):\n 1. maintained r (map_graph_fn G f)", "thus ?thesis"], ["proof (prove)\nusing this:\n  graph_homomorphism (fst r) (map_graph_fn G f) ?h2 \\<Longrightarrow>\n  extensible r (map_graph_fn G f) ?h2\n\ngoal (1 subgoal):\n 1. maintained r (map_graph_fn G f)", "unfolding maintained_def"], ["proof (prove)\nusing this:\n  graph_homomorphism (fst r) (map_graph_fn G f) ?h2 \\<Longrightarrow>\n  extensible r (map_graph_fn G f) ?h2\n\ngoal (1 subgoal):\n 1. \\<forall>fa.\n       graph_homomorphism (fst r) (map_graph_fn G f) fa \\<longrightarrow>\n       extensible r (map_graph_fn G f) fa", "by blast"], ["proof (state)\nthis:\n  maintained r (map_graph_fn G f)\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>Definition 20.\\<close>"], ["", "definition const_exists where\n\"const_exists c \\<equiv> transl_rule (\\<top> \\<sqsubseteq> A_Cmp (A_Cmp \\<top> (A_Lbl (S_Const c))) \\<top>)\""], ["", "definition const_exists_rev where\n\"const_exists_rev c \\<equiv> transl_rule (A_Cmp (A_Cmp (A_Lbl (S_Const c)) \\<top>) (A_Lbl (S_Const c)) \\<sqsubseteq> A_Lbl (S_Const c))\""], ["", "definition const_prop where\n\"const_prop c \\<equiv> transl_rule (A_Lbl (S_Const c) \\<sqsubseteq> \\<one>)\""], ["", "definition const_disj where\n\"const_disj c\\<^sub>1 c\\<^sub>2 \\<equiv> transl_rule (A_Cmp (A_Lbl (S_Const c\\<^sub>1)) (A_Lbl (S_Const c\\<^sub>2)) \\<sqsubseteq> \\<bottom>)\""], ["", "lemma constant_rules:\n  assumes \"standard' C G\" \"c \\<in> C\"\n  shows \"maintained (const_exists c) G\"\n        \"maintained (const_exists_rev c) G\"\n        \"maintained (const_prop c) G\"\n        \"c' \\<in> C \\<Longrightarrow> c \\<noteq> c' \\<Longrightarrow> maintained (const_disj c c') G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (maintained (const_exists c) G &&&\n     maintained (const_exists_rev c) G) &&&\n    maintained (const_prop c) G &&&\n    (\\<lbrakk>c' \\<in> C; c \\<noteq> c'\\<rbrakk>\n     \\<Longrightarrow> maintained (const_disj c c') G)", "proof -"], ["proof (state)\ngoal (4 subgoals):\n 1. maintained (const_exists c) G\n 2. maintained (const_exists_rev c) G\n 3. maintained (const_prop c) G\n 4. \\<lbrakk>c' \\<in> C; c \\<noteq> c'\\<rbrakk>\n    \\<Longrightarrow> maintained (const_disj c c') G", "note a = assms[unfolded standard_def]"], ["proof (state)\nthis:\n  graph G \\<and>\n  vertices G \\<noteq> {} \\<and>\n  ident_rel S_Idt G \\<and>\n  getRel S_Bot G = {} \\<and>\n  getRel S_Top G =\n  {(x, y). x \\<in> vertices G \\<and> y \\<in> vertices G} \\<and>\n  (\\<forall>(l, v)\\<in>(\\<lambda>c. (S_Const c, Inl c)) ` C.\n      getRel l G = {(v, v)})\n  c \\<in> C\n\ngoal (4 subgoals):\n 1. maintained (const_exists c) G\n 2. maintained (const_exists_rev c) G\n 3. maintained (const_prop c) G\n 4. \\<lbrakk>c' \\<in> C; c \\<noteq> c'\\<rbrakk>\n    \\<Longrightarrow> maintained (const_disj c c') G", "from a"], ["proof (chain)\npicking this:\n  graph G \\<and>\n  vertices G \\<noteq> {} \\<and>\n  ident_rel S_Idt G \\<and>\n  getRel S_Bot G = {} \\<and>\n  getRel S_Top G =\n  {(x, y). x \\<in> vertices G \\<and> y \\<in> vertices G} \\<and>\n  (\\<forall>(l, v)\\<in>(\\<lambda>c. (S_Const c, Inl c)) ` C.\n      getRel l G = {(v, v)})\n  c \\<in> C", "have g:\"graph G\""], ["proof (prove)\nusing this:\n  graph G \\<and>\n  vertices G \\<noteq> {} \\<and>\n  ident_rel S_Idt G \\<and>\n  getRel S_Bot G = {} \\<and>\n  getRel S_Top G =\n  {(x, y). x \\<in> vertices G \\<and> y \\<in> vertices G} \\<and>\n  (\\<forall>(l, v)\\<in>(\\<lambda>c. (S_Const c, Inl c)) ` C.\n      getRel l G = {(v, v)})\n  c \\<in> C\n\ngoal (1 subgoal):\n 1. graph G", "by auto"], ["proof (state)\nthis:\n  graph G\n\ngoal (4 subgoals):\n 1. maintained (const_exists c) G\n 2. maintained (const_exists_rev c) G\n 3. maintained (const_prop c) G\n 4. \\<lbrakk>c' \\<in> C; c \\<noteq> c'\\<rbrakk>\n    \\<Longrightarrow> maintained (const_disj c c') G", "from a"], ["proof (chain)\npicking this:\n  graph G \\<and>\n  vertices G \\<noteq> {} \\<and>\n  ident_rel S_Idt G \\<and>\n  getRel S_Bot G = {} \\<and>\n  getRel S_Top G =\n  {(x, y). x \\<in> vertices G \\<and> y \\<in> vertices G} \\<and>\n  (\\<forall>(l, v)\\<in>(\\<lambda>c. (S_Const c, Inl c)) ` C.\n      getRel l G = {(v, v)})\n  c \\<in> C", "have gr_c:\"getRel (S_Const c) G = {(Inl c, Inl c)}\"\n       \"getRel S_Idt G = Id_on (vertices G)\" \"getRel S_Bot G = {}\"\n       \"getRel S_Top G = vertices G \\<times> vertices G\""], ["proof (prove)\nusing this:\n  graph G \\<and>\n  vertices G \\<noteq> {} \\<and>\n  ident_rel S_Idt G \\<and>\n  getRel S_Bot G = {} \\<and>\n  getRel S_Top G =\n  {(x, y). x \\<in> vertices G \\<and> y \\<in> vertices G} \\<and>\n  (\\<forall>(l, v)\\<in>(\\<lambda>c. (S_Const c, Inl c)) ` C.\n      getRel l G = {(v, v)})\n  c \\<in> C\n\ngoal (1 subgoal):\n 1. (getRel (S_Const c) G = {(Inl c, Inl c)} &&&\n     getRel S_Idt G = Id_on (vertices G)) &&&\n    getRel S_Bot G = {} &&& getRel S_Top G = vertices G \\<times> vertices G", "by auto"], ["proof (state)\nthis:\n  getRel (S_Const c) G = {(Inl c, Inl c)}\n  getRel S_Idt G = Id_on (vertices G)\n  getRel S_Bot G = {}\n  getRel S_Top G = vertices G \\<times> vertices G\n\ngoal (4 subgoals):\n 1. maintained (const_exists c) G\n 2. maintained (const_exists_rev c) G\n 3. maintained (const_prop c) G\n 4. \\<lbrakk>c' \\<in> C; c \\<noteq> c'\\<rbrakk>\n    \\<Longrightarrow> maintained (const_disj c c') G", "with g"], ["proof (chain)\npicking this:\n  graph G\n  getRel (S_Const c) G = {(Inl c, Inl c)}\n  getRel S_Idt G = Id_on (vertices G)\n  getRel S_Bot G = {}\n  getRel S_Top G = vertices G \\<times> vertices G", "have inlc:\"Inl c \\<in> vertices G\""], ["proof (prove)\nusing this:\n  graph G\n  getRel (S_Const c) G = {(Inl c, Inl c)}\n  getRel S_Idt G = Id_on (vertices G)\n  getRel S_Bot G = {}\n  getRel S_Top G = vertices G \\<times> vertices G\n\ngoal (1 subgoal):\n 1. Inl c \\<in> vertices G", "by (metis getRel_dom(1) singletonI)"], ["proof (state)\nthis:\n  Inl c \\<in> vertices G\n\ngoal (4 subgoals):\n 1. maintained (const_exists c) G\n 2. maintained (const_exists_rev c) G\n 3. maintained (const_prop c) G\n 4. \\<lbrakk>c' \\<in> C; c \\<noteq> c'\\<rbrakk>\n    \\<Longrightarrow> maintained (const_disj c c') G", "thus \"maintained (const_exists c) G\" \"maintained (const_exists_rev c) G\"\n       \"maintained (const_prop c) G\""], ["proof (prove)\nusing this:\n  Inl c \\<in> vertices G\n\ngoal (1 subgoal):\n 1. maintained (const_exists c) G &&&\n    maintained (const_exists_rev c) G &&& maintained (const_prop c) G", "unfolding const_prop_def const_exists_rev_def const_exists_def maintained_holds_subset_iff[OF g]"], ["proof (prove)\nusing this:\n  Inl c \\<in> vertices G\n\ngoal (1 subgoal):\n 1. :G:\\<lbrakk>\\<top>\\<rbrakk>\n    \\<subseteq> :G:\\<lbrakk>A_Cmp (A_Cmp \\<top> (A_Lbl (S_Const c)))\n                             \\<top>\\<rbrakk> &&&\n    :G:\\<lbrakk>A_Cmp (A_Cmp (A_Lbl (S_Const c)) \\<top>)\n                 (A_Lbl (S_Const c))\\<rbrakk>\n    \\<subseteq> :G:\\<lbrakk>A_Lbl (S_Const c)\\<rbrakk> &&&\n    :G:\\<lbrakk>A_Lbl (S_Const c)\\<rbrakk>\n    \\<subseteq> :G:\\<lbrakk>\\<one>\\<rbrakk>", "by (auto simp:gr_c relcomp_unfold)"], ["proof (state)\nthis:\n  maintained (const_exists c) G\n  maintained (const_exists_rev c) G\n  maintained (const_prop c) G\n\ngoal (1 subgoal):\n 1. \\<lbrakk>c' \\<in> C; c \\<noteq> c'\\<rbrakk>\n    \\<Longrightarrow> maintained (const_disj c c') G", "assume \"c' \\<in> C\""], ["proof (state)\nthis:\n  c' \\<in> C\n\ngoal (1 subgoal):\n 1. \\<lbrakk>c' \\<in> C; c \\<noteq> c'\\<rbrakk>\n    \\<Longrightarrow> maintained (const_disj c c') G", "with a"], ["proof (chain)\npicking this:\n  graph G \\<and>\n  vertices G \\<noteq> {} \\<and>\n  ident_rel S_Idt G \\<and>\n  getRel S_Bot G = {} \\<and>\n  getRel S_Top G =\n  {(x, y). x \\<in> vertices G \\<and> y \\<in> vertices G} \\<and>\n  (\\<forall>(l, v)\\<in>(\\<lambda>c. (S_Const c, Inl c)) ` C.\n      getRel l G = {(v, v)})\n  c \\<in> C\n  c' \\<in> C", "have gr_c':\"getRel (S_Const c') G = {(Inl c', Inl c')}\""], ["proof (prove)\nusing this:\n  graph G \\<and>\n  vertices G \\<noteq> {} \\<and>\n  ident_rel S_Idt G \\<and>\n  getRel S_Bot G = {} \\<and>\n  getRel S_Top G =\n  {(x, y). x \\<in> vertices G \\<and> y \\<in> vertices G} \\<and>\n  (\\<forall>(l, v)\\<in>(\\<lambda>c. (S_Const c, Inl c)) ` C.\n      getRel l G = {(v, v)})\n  c \\<in> C\n  c' \\<in> C\n\ngoal (1 subgoal):\n 1. getRel (S_Const c') G = {(Inl c', Inl c')}", "by auto"], ["proof (state)\nthis:\n  getRel (S_Const c') G = {(Inl c', Inl c')}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>c' \\<in> C; c \\<noteq> c'\\<rbrakk>\n    \\<Longrightarrow> maintained (const_disj c c') G", "thus \"c \\<noteq> c' \\<Longrightarrow>  maintained (const_disj c c') G\""], ["proof (prove)\nusing this:\n  getRel (S_Const c') G = {(Inl c', Inl c')}\n\ngoal (1 subgoal):\n 1. c \\<noteq> c' \\<Longrightarrow> maintained (const_disj c c') G", "unfolding const_disj_def maintained_holds_subset_iff[OF g]"], ["proof (prove)\nusing this:\n  getRel (S_Const c') G = {(Inl c', Inl c')}\n\ngoal (1 subgoal):\n 1. c \\<noteq> c' \\<Longrightarrow>\n    :G:\\<lbrakk>A_Cmp (A_Lbl (S_Const c)) (A_Lbl (S_Const c'))\\<rbrakk>\n    \\<subseteq> :G:\\<lbrakk>\\<bottom>\\<rbrakk>", "using gr_c"], ["proof (prove)\nusing this:\n  getRel (S_Const c') G = {(Inl c', Inl c')}\n  getRel (S_Const c) G = {(Inl c, Inl c)}\n  getRel S_Idt G = Id_on (vertices G)\n  getRel S_Bot G = {}\n  getRel S_Top G = vertices G \\<times> vertices G\n\ngoal (1 subgoal):\n 1. c \\<noteq> c' \\<Longrightarrow>\n    :G:\\<lbrakk>A_Cmp (A_Lbl (S_Const c)) (A_Lbl (S_Const c'))\\<rbrakk>\n    \\<subseteq> :G:\\<lbrakk>\\<bottom>\\<rbrakk>", "by auto"], ["proof (state)\nthis:\n  c \\<noteq> c' \\<Longrightarrow> maintained (const_disj c c') G\n\ngoal:\nNo subgoals!", "qed"], ["", "definition constant_rules where\n\"constant_rules C \\<equiv> const_exists ` C \\<union> const_exists_rev ` C \\<union> const_prop ` C\n                  \\<union> {const_disj c\\<^sub>1 c\\<^sub>2 | c\\<^sub>1 c\\<^sub>2. c\\<^sub>1 \\<in> C \\<and> c\\<^sub>2 \\<in> C \\<and> c\\<^sub>1 \\<noteq> c\\<^sub>2}\""], ["", "lemma constant_rules_graph_rule:\n  assumes \"x \\<in> constant_rules C\"\n  shows \"graph_rule x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. graph_rule x", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. graph_rule x", "from graph_rule_translation"], ["proof (chain)\npicking this:\n  graph_rule (translation ?X, translation (A_Int ?X ?Y))", "have gr:\"\\<And> u v . graph_rule (transl_rule (u \\<sqsubseteq> v))\""], ["proof (prove)\nusing this:\n  graph_rule (translation ?X, translation (A_Int ?X ?Y))\n\ngoal (1 subgoal):\n 1. \\<And>u v. graph_rule (transl_rule (u \\<sqsubseteq> v))", "by auto"], ["proof (state)\nthis:\n  graph_rule (transl_rule (?u \\<sqsubseteq> ?v))\n\ngoal (1 subgoal):\n 1. graph_rule x", "consider \"\\<exists> v. x = const_exists v\" | \"\\<exists> v. x = const_exists_rev v\" |  \"\\<exists> v. x = const_prop v\"\n    |  \"\\<exists> v w. x = const_disj v w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<exists>v. x = const_exists v \\<Longrightarrow> thesis;\n     \\<exists>v. x = const_exists_rev v \\<Longrightarrow> thesis;\n     \\<exists>v. x = const_prop v \\<Longrightarrow> thesis;\n     \\<exists>v w. x = const_disj v w \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "using assms"], ["proof (prove)\nusing this:\n  x \\<in> constant_rules C\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<exists>v. x = const_exists v \\<Longrightarrow> thesis;\n     \\<exists>v. x = const_exists_rev v \\<Longrightarrow> thesis;\n     \\<exists>v. x = const_prop v \\<Longrightarrow> thesis;\n     \\<exists>v w. x = const_disj v w \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "unfolding constant_rules_def Un_iff"], ["proof (prove)\nusing this:\n  ((x \\<in> const_exists ` C \\<or> x \\<in> const_exists_rev ` C) \\<or>\n   x \\<in> const_prop ` C) \\<or>\n  x \\<in> {const_disj c\\<^sub>1 c\\<^sub>2 |c\\<^sub>1 c\\<^sub>2.\n           c\\<^sub>1 \\<in> C \\<and>\n           c\\<^sub>2 \\<in> C \\<and> c\\<^sub>1 \\<noteq> c\\<^sub>2}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<exists>v. x = const_exists v \\<Longrightarrow> thesis;\n     \\<exists>v. x = const_exists_rev v \\<Longrightarrow> thesis;\n     \\<exists>v. x = const_prop v \\<Longrightarrow> thesis;\n     \\<exists>v w. x = const_disj v w \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "by blast"], ["proof (state)\nthis:\n  \\<lbrakk>\\<exists>v. x = const_exists v \\<Longrightarrow> ?thesis1;\n   \\<exists>v. x = const_exists_rev v \\<Longrightarrow> ?thesis1;\n   \\<exists>v. x = const_prop v \\<Longrightarrow> ?thesis1;\n   \\<exists>v w. x = const_disj v w \\<Longrightarrow> ?thesis1\\<rbrakk>\n  \\<Longrightarrow> ?thesis1\n\ngoal (1 subgoal):\n 1. graph_rule x", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<exists>v. x = const_exists v \\<Longrightarrow> ?thesis1;\n   \\<exists>v. x = const_exists_rev v \\<Longrightarrow> ?thesis1;\n   \\<exists>v. x = const_prop v \\<Longrightarrow> ?thesis1;\n   \\<exists>v w. x = const_disj v w \\<Longrightarrow> ?thesis1\\<rbrakk>\n  \\<Longrightarrow> ?thesis1\n\ngoal (1 subgoal):\n 1. graph_rule x", "using gr"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<exists>v. x = const_exists v \\<Longrightarrow> ?thesis1;\n   \\<exists>v. x = const_exists_rev v \\<Longrightarrow> ?thesis1;\n   \\<exists>v. x = const_prop v \\<Longrightarrow> ?thesis1;\n   \\<exists>v w. x = const_disj v w \\<Longrightarrow> ?thesis1\\<rbrakk>\n  \\<Longrightarrow> ?thesis1\n  graph_rule (transl_rule (?u \\<sqsubseteq> ?v))\n\ngoal (1 subgoal):\n 1. graph_rule x", "unfolding const_exists_def const_exists_rev_def const_prop_def const_disj_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<exists>v.\n              x =\n              transl_rule\n               (\\<top> \\<sqsubseteq>\n                A_Cmp (A_Cmp \\<top> (A_Lbl (S_Const v)))\n                 \\<top>) \\<Longrightarrow>\n           ?thesis1;\n   \\<exists>v.\n      x =\n      transl_rule\n       (A_Cmp (A_Cmp (A_Lbl (S_Const v)) \\<top>)\n         (A_Lbl (S_Const v)) \\<sqsubseteq>\n        A_Lbl (S_Const v)) \\<Longrightarrow>\n   ?thesis1;\n   \\<exists>v.\n      x =\n      transl_rule (A_Lbl (S_Const v) \\<sqsubseteq> \\<one>) \\<Longrightarrow>\n   ?thesis1;\n   \\<exists>v w.\n      x =\n      transl_rule\n       (A_Cmp (A_Lbl (S_Const v)) (A_Lbl (S_Const w)) \\<sqsubseteq>\n        \\<bottom>) \\<Longrightarrow>\n   ?thesis1\\<rbrakk>\n  \\<Longrightarrow> ?thesis1\n  graph_rule (transl_rule (?u \\<sqsubseteq> ?v))\n\ngoal (1 subgoal):\n 1. graph_rule x", "by cases fast+"], ["proof (state)\nthis:\n  graph_rule x\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma finite_constant[intro]:\n  assumes \"finite C\"\n  shows \"finite (constant_rules C)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (constant_rules C)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. finite (constant_rules C)", "have \"{const_disj c\\<^sub>1 c\\<^sub>2 | c\\<^sub>1 c\\<^sub>2. c\\<^sub>1 \\<in> C \\<and> c\\<^sub>2 \\<in> C \\<and> c\\<^sub>1 \\<noteq> c\\<^sub>2} \\<subseteq> case_prod const_disj ` (C \\<times> C)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {const_disj c\\<^sub>1 c\\<^sub>2 |c\\<^sub>1 c\\<^sub>2.\n     c\\<^sub>1 \\<in> C \\<and>\n     c\\<^sub>2 \\<in> C \\<and> c\\<^sub>1 \\<noteq> c\\<^sub>2}\n    \\<subseteq> (\\<lambda>(x, y). const_disj x y) ` (C \\<times> C)", "by auto"], ["proof (state)\nthis:\n  {const_disj c\\<^sub>1 c\\<^sub>2 |c\\<^sub>1 c\\<^sub>2.\n   c\\<^sub>1 \\<in> C \\<and>\n   c\\<^sub>2 \\<in> C \\<and> c\\<^sub>1 \\<noteq> c\\<^sub>2}\n  \\<subseteq> (\\<lambda>(x, y). const_disj x y) ` (C \\<times> C)\n\ngoal (1 subgoal):\n 1. finite (constant_rules C)", "moreover"], ["proof (state)\nthis:\n  {const_disj c\\<^sub>1 c\\<^sub>2 |c\\<^sub>1 c\\<^sub>2.\n   c\\<^sub>1 \\<in> C \\<and>\n   c\\<^sub>2 \\<in> C \\<and> c\\<^sub>1 \\<noteq> c\\<^sub>2}\n  \\<subseteq> (\\<lambda>(x, y). const_disj x y) ` (C \\<times> C)\n\ngoal (1 subgoal):\n 1. finite (constant_rules C)", "have \"finite \\<dots>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite ((\\<lambda>(x, y). const_disj x y) ` (C \\<times> C))", "using assms"], ["proof (prove)\nusing this:\n  finite C\n\ngoal (1 subgoal):\n 1. finite ((\\<lambda>(x, y). const_disj x y) ` (C \\<times> C))", "by auto"], ["proof (state)\nthis:\n  finite ((\\<lambda>(x, y). const_disj x y) ` (C \\<times> C))\n\ngoal (1 subgoal):\n 1. finite (constant_rules C)", "ultimately"], ["proof (chain)\npicking this:\n  {const_disj c\\<^sub>1 c\\<^sub>2 |c\\<^sub>1 c\\<^sub>2.\n   c\\<^sub>1 \\<in> C \\<and>\n   c\\<^sub>2 \\<in> C \\<and> c\\<^sub>1 \\<noteq> c\\<^sub>2}\n  \\<subseteq> (\\<lambda>(x, y). const_disj x y) ` (C \\<times> C)\n  finite ((\\<lambda>(x, y). const_disj x y) ` (C \\<times> C))", "have \"finite {const_disj c\\<^sub>1 c\\<^sub>2 | c\\<^sub>1 c\\<^sub>2. c\\<^sub>1 \\<in> C \\<and> c\\<^sub>2 \\<in> C \\<and> c\\<^sub>1 \\<noteq> c\\<^sub>2}\""], ["proof (prove)\nusing this:\n  {const_disj c\\<^sub>1 c\\<^sub>2 |c\\<^sub>1 c\\<^sub>2.\n   c\\<^sub>1 \\<in> C \\<and>\n   c\\<^sub>2 \\<in> C \\<and> c\\<^sub>1 \\<noteq> c\\<^sub>2}\n  \\<subseteq> (\\<lambda>(x, y). const_disj x y) ` (C \\<times> C)\n  finite ((\\<lambda>(x, y). const_disj x y) ` (C \\<times> C))\n\ngoal (1 subgoal):\n 1. finite\n     {const_disj c\\<^sub>1 c\\<^sub>2 |c\\<^sub>1 c\\<^sub>2.\n      c\\<^sub>1 \\<in> C \\<and>\n      c\\<^sub>2 \\<in> C \\<and> c\\<^sub>1 \\<noteq> c\\<^sub>2}", "by(rule finite_subset)"], ["proof (state)\nthis:\n  finite\n   {const_disj c\\<^sub>1 c\\<^sub>2 |c\\<^sub>1 c\\<^sub>2.\n    c\\<^sub>1 \\<in> C \\<and>\n    c\\<^sub>2 \\<in> C \\<and> c\\<^sub>1 \\<noteq> c\\<^sub>2}\n\ngoal (1 subgoal):\n 1. finite (constant_rules C)", "thus ?thesis"], ["proof (prove)\nusing this:\n  finite\n   {const_disj c\\<^sub>1 c\\<^sub>2 |c\\<^sub>1 c\\<^sub>2.\n    c\\<^sub>1 \\<in> C \\<and>\n    c\\<^sub>2 \\<in> C \\<and> c\\<^sub>1 \\<noteq> c\\<^sub>2}\n\ngoal (1 subgoal):\n 1. finite (constant_rules C)", "unfolding constant_rules_def"], ["proof (prove)\nusing this:\n  finite\n   {const_disj c\\<^sub>1 c\\<^sub>2 |c\\<^sub>1 c\\<^sub>2.\n    c\\<^sub>1 \\<in> C \\<and>\n    c\\<^sub>2 \\<in> C \\<and> c\\<^sub>1 \\<noteq> c\\<^sub>2}\n\ngoal (1 subgoal):\n 1. finite\n     (const_exists ` C \\<union> const_exists_rev ` C \\<union>\n      const_prop ` C \\<union>\n      {const_disj c\\<^sub>1 c\\<^sub>2 |c\\<^sub>1 c\\<^sub>2.\n       c\\<^sub>1 \\<in> C \\<and>\n       c\\<^sub>2 \\<in> C \\<and> c\\<^sub>1 \\<noteq> c\\<^sub>2})", "using assms"], ["proof (prove)\nusing this:\n  finite\n   {const_disj c\\<^sub>1 c\\<^sub>2 |c\\<^sub>1 c\\<^sub>2.\n    c\\<^sub>1 \\<in> C \\<and>\n    c\\<^sub>2 \\<in> C \\<and> c\\<^sub>1 \\<noteq> c\\<^sub>2}\n  finite C\n\ngoal (1 subgoal):\n 1. finite\n     (const_exists ` C \\<union> const_exists_rev ` C \\<union>\n      const_prop ` C \\<union>\n      {const_disj c\\<^sub>1 c\\<^sub>2 |c\\<^sub>1 c\\<^sub>2.\n       c\\<^sub>1 \\<in> C \\<and>\n       c\\<^sub>2 \\<in> C \\<and> c\\<^sub>1 \\<noteq> c\\<^sub>2})", "by blast"], ["proof (state)\nthis:\n  finite (constant_rules C)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma standard_maintains_constant_rules:\n  assumes \"standard' C G\" \"R\\<in>constant_rules C\"\n  shows \"maintained R G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. maintained R G", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. maintained R G", "from assms(2)[unfolded constant_rules_def]"], ["proof (chain)\npicking this:\n  R \\<in> const_exists ` C \\<union> const_exists_rev ` C \\<union>\n          const_prop ` C \\<union>\n          {const_disj c\\<^sub>1 c\\<^sub>2 |c\\<^sub>1 c\\<^sub>2.\n           c\\<^sub>1 \\<in> C \\<and>\n           c\\<^sub>2 \\<in> C \\<and> c\\<^sub>1 \\<noteq> c\\<^sub>2}", "consider \"\\<exists> c \\<in> C. R = const_exists c\"\n         | \"\\<exists> c \\<in> C. R = const_exists_rev c\"\n         | \"\\<exists> c \\<in> C. R = const_prop c\"\n         | \"\\<exists> c\\<^sub>1 c\\<^sub>2. c\\<^sub>1 \\<in> C \\<and> c\\<^sub>2 \\<in> C \\<and> c\\<^sub>1 \\<noteq> c\\<^sub>2 \\<and> R = const_disj c\\<^sub>1 c\\<^sub>2\""], ["proof (prove)\nusing this:\n  R \\<in> const_exists ` C \\<union> const_exists_rev ` C \\<union>\n          const_prop ` C \\<union>\n          {const_disj c\\<^sub>1 c\\<^sub>2 |c\\<^sub>1 c\\<^sub>2.\n           c\\<^sub>1 \\<in> C \\<and>\n           c\\<^sub>2 \\<in> C \\<and> c\\<^sub>1 \\<noteq> c\\<^sub>2}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<exists>c\\<in>C. R = const_exists c \\<Longrightarrow> thesis;\n     \\<exists>c\\<in>C. R = const_exists_rev c \\<Longrightarrow> thesis;\n     \\<exists>c\\<in>C. R = const_prop c \\<Longrightarrow> thesis;\n     \\<exists>c\\<^sub>1 c\\<^sub>2.\n        c\\<^sub>1 \\<in> C \\<and>\n        c\\<^sub>2 \\<in> C \\<and>\n        c\\<^sub>1 \\<noteq> c\\<^sub>2 \\<and>\n        R = const_disj c\\<^sub>1 c\\<^sub>2 \\<Longrightarrow>\n     thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "by blast"], ["proof (state)\nthis:\n  \\<lbrakk>\\<exists>c\\<in>C. R = const_exists c \\<Longrightarrow> ?thesis;\n   \\<exists>c\\<in>C. R = const_exists_rev c \\<Longrightarrow> ?thesis;\n   \\<exists>c\\<in>C. R = const_prop c \\<Longrightarrow> ?thesis;\n   \\<exists>c\\<^sub>1 c\\<^sub>2.\n      c\\<^sub>1 \\<in> C \\<and>\n      c\\<^sub>2 \\<in> C \\<and>\n      c\\<^sub>1 \\<noteq> c\\<^sub>2 \\<and>\n      R = const_disj c\\<^sub>1 c\\<^sub>2 \\<Longrightarrow>\n   ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. maintained R G", "from this assms(1)"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<exists>c\\<in>C. R = const_exists c \\<Longrightarrow> ?thesis;\n   \\<exists>c\\<in>C. R = const_exists_rev c \\<Longrightarrow> ?thesis;\n   \\<exists>c\\<in>C. R = const_prop c \\<Longrightarrow> ?thesis;\n   \\<exists>c\\<^sub>1 c\\<^sub>2.\n      c\\<^sub>1 \\<in> C \\<and>\n      c\\<^sub>2 \\<in> C \\<and>\n      c\\<^sub>1 \\<noteq> c\\<^sub>2 \\<and>\n      R = const_disj c\\<^sub>1 c\\<^sub>2 \\<Longrightarrow>\n   ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n  standard' C G", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<exists>c\\<in>C. R = const_exists c \\<Longrightarrow> ?thesis;\n   \\<exists>c\\<in>C. R = const_exists_rev c \\<Longrightarrow> ?thesis;\n   \\<exists>c\\<in>C. R = const_prop c \\<Longrightarrow> ?thesis;\n   \\<exists>c\\<^sub>1 c\\<^sub>2.\n      c\\<^sub>1 \\<in> C \\<and>\n      c\\<^sub>2 \\<in> C \\<and>\n      c\\<^sub>1 \\<noteq> c\\<^sub>2 \\<and>\n      R = const_disj c\\<^sub>1 c\\<^sub>2 \\<Longrightarrow>\n   ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n  standard' C G\n\ngoal (1 subgoal):\n 1. maintained R G", "by(cases,auto simp:constant_rules)"], ["proof (state)\nthis:\n  maintained R G\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma constant_rules_empty[simp]:\n  \"constant_rules {} = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. constant_rules {} = {}", "by (auto simp:constant_rules_def)"], ["", "text \\<open>Definition 20, continued.\\<close>"], ["", "definition standard_rules :: \"'a set \\<Rightarrow> 'a Standard_Constant set \\<Rightarrow> (('a Standard_Constant, nat) labeled_graph \\<times> ('a Standard_Constant, nat) labeled_graph) set\"\n  where\n\"standard_rules C L \\<equiv> constant_rules C \\<union> identity_rules L \\<union> {top_rule S_Top,nonempty_rule}\""], ["", "lemma constant_rules_mono:\n  assumes \"C\\<^sub>1 \\<subseteq> C\\<^sub>2\"\n  shows \"constant_rules C\\<^sub>1 \\<subseteq> constant_rules C\\<^sub>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. constant_rules C\\<^sub>1 \\<subseteq> constant_rules C\\<^sub>2", "using assms"], ["proof (prove)\nusing this:\n  C\\<^sub>1 \\<subseteq> C\\<^sub>2\n\ngoal (1 subgoal):\n 1. constant_rules C\\<^sub>1 \\<subseteq> constant_rules C\\<^sub>2", "unfolding constant_rules_def"], ["proof (prove)\nusing this:\n  C\\<^sub>1 \\<subseteq> C\\<^sub>2\n\ngoal (1 subgoal):\n 1. const_exists ` C\\<^sub>1 \\<union> const_exists_rev ` C\\<^sub>1 \\<union>\n    const_prop ` C\\<^sub>1 \\<union>\n    {const_disj c\\<^sub>1 c\\<^sub>2 |c\\<^sub>1 c\\<^sub>2.\n     c\\<^sub>1 \\<in> C\\<^sub>1 \\<and>\n     c\\<^sub>2 \\<in> C\\<^sub>1 \\<and> c\\<^sub>1 \\<noteq> c\\<^sub>2}\n    \\<subseteq> const_exists ` C\\<^sub>2 \\<union>\n                const_exists_rev ` C\\<^sub>2 \\<union>\n                const_prop ` C\\<^sub>2 \\<union>\n                {const_disj c\\<^sub>1 c\\<^sub>2 |c\\<^sub>1 c\\<^sub>2.\n                 c\\<^sub>1 \\<in> C\\<^sub>2 \\<and>\n                 c\\<^sub>2 \\<in> C\\<^sub>2 \\<and>\n                 c\\<^sub>1 \\<noteq> c\\<^sub>2}", "by(intro Un_mono,auto)"], ["", "(* also works with just auto, this is faster *)"], ["", "lemma identity_rules_mono:\n  assumes \"C\\<^sub>1 \\<subseteq> C\\<^sub>2\"\n  shows \"identity_rules C\\<^sub>1 \\<subseteq> identity_rules C\\<^sub>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. identity_rules C\\<^sub>1 \\<subseteq> identity_rules C\\<^sub>2", "using assms"], ["proof (prove)\nusing this:\n  C\\<^sub>1 \\<subseteq> C\\<^sub>2\n\ngoal (1 subgoal):\n 1. identity_rules C\\<^sub>1 \\<subseteq> identity_rules C\\<^sub>2", "unfolding identity_rules_def"], ["proof (prove)\nusing this:\n  C\\<^sub>1 \\<subseteq> C\\<^sub>2\n\ngoal (1 subgoal):\n 1. {reflexivity_rule S_Idt, transitive_rule S_Idt,\n     symmetry_rule S_Idt} \\<union>\n    congruence_rules S_Idt C\\<^sub>1\n    \\<subseteq> {reflexivity_rule S_Idt, transitive_rule S_Idt,\n                 symmetry_rule S_Idt} \\<union>\n                congruence_rules S_Idt C\\<^sub>2", "by auto"], ["", "lemma standard_rules_mono:\n  assumes \"C\\<^sub>1 \\<subseteq> C\\<^sub>2\" \"L\\<^sub>1 \\<subseteq> L\\<^sub>2\"\n  shows \"standard_rules C\\<^sub>1 L\\<^sub>1 \\<subseteq> standard_rules C\\<^sub>2 L\\<^sub>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. standard_rules C\\<^sub>1 L\\<^sub>1\n    \\<subseteq> standard_rules C\\<^sub>2 L\\<^sub>2", "using constant_rules_mono[OF assms(1)] identity_rules_mono[OF assms(2)]"], ["proof (prove)\nusing this:\n  constant_rules C\\<^sub>1 \\<subseteq> constant_rules C\\<^sub>2\n  identity_rules L\\<^sub>1 \\<subseteq> identity_rules L\\<^sub>2\n\ngoal (1 subgoal):\n 1. standard_rules C\\<^sub>1 L\\<^sub>1\n    \\<subseteq> standard_rules C\\<^sub>2 L\\<^sub>2", "unfolding standard_rules_def"], ["proof (prove)\nusing this:\n  constant_rules C\\<^sub>1 \\<subseteq> constant_rules C\\<^sub>2\n  identity_rules L\\<^sub>1 \\<subseteq> identity_rules L\\<^sub>2\n\ngoal (1 subgoal):\n 1. constant_rules C\\<^sub>1 \\<union> identity_rules L\\<^sub>1 \\<union>\n    {top_rule S_Top, nonempty_rule}\n    \\<subseteq> constant_rules C\\<^sub>2 \\<union>\n                identity_rules L\\<^sub>2 \\<union>\n                {top_rule S_Top, nonempty_rule}", "by auto"], ["", "lemma maintainedA_invmono:\n  assumes \"C\\<^sub>1 \\<subseteq> C\\<^sub>2\" \"L\\<^sub>1 \\<subseteq> L\\<^sub>2\"\n  shows \"maintainedA (standard_rules C\\<^sub>2 L\\<^sub>2) G \\<Longrightarrow> maintainedA (standard_rules C\\<^sub>1 L\\<^sub>1) G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. maintainedA (standard_rules C\\<^sub>2 L\\<^sub>2) G \\<Longrightarrow>\n    maintainedA (standard_rules C\\<^sub>1 L\\<^sub>1) G", "using standard_rules_mono[OF assms]"], ["proof (prove)\nusing this:\n  standard_rules C\\<^sub>1 L\\<^sub>1\n  \\<subseteq> standard_rules C\\<^sub>2 L\\<^sub>2\n\ngoal (1 subgoal):\n 1. maintainedA (standard_rules C\\<^sub>2 L\\<^sub>2) G \\<Longrightarrow>\n    maintainedA (standard_rules C\\<^sub>1 L\\<^sub>1) G", "by auto"], ["", "lemma maintained_preserved_by_isomorphism:\n  assumes \"\\<And> x. x \\<in> vertices G \\<Longrightarrow> (f \\<circ> g) x = x\" \"graph G\"\n      and \"maintained r (map_graph_fn G g)\"\n  shows \"maintained r G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. maintained r G", "proof(cases r)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b. r = (a, b) \\<Longrightarrow> maintained r G", "case (Pair L R)"], ["proof (state)\nthis:\n  r = (L, R)\n\ngoal (1 subgoal):\n 1. \\<And>a b. r = (a, b) \\<Longrightarrow> maintained r G", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. maintained r G", "unfolding Pair"], ["proof (prove)\ngoal (1 subgoal):\n 1. maintained (L, R) G", "proof(standard,goal_cases)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       graph_homomorphism L G f \\<Longrightarrow> extensible (L, R) G f", "case (1 h)"], ["proof (state)\nthis:\n  graph_homomorphism L G h\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       graph_homomorphism L G f \\<Longrightarrow> extensible (L, R) G f", "from assms(3)[unfolded maintained_def Pair] graph_homomorphism_on_graph[OF this, of g]"], ["proof (chain)\npicking this:\n  \\<forall>f.\n     graph_homomorphism (fst (L, R)) (map_graph_fn G g) f \\<longrightarrow>\n     extensible (L, R) (map_graph_fn G g) f\n  graph_homomorphism L (map_graph_fn G g) (h O on_graph G g)", "have \"extensible (L, R) (map_graph_fn G g) (h O on_graph G g)\""], ["proof (prove)\nusing this:\n  \\<forall>f.\n     graph_homomorphism (fst (L, R)) (map_graph_fn G g) f \\<longrightarrow>\n     extensible (L, R) (map_graph_fn G g) f\n  graph_homomorphism L (map_graph_fn G g) (h O on_graph G g)\n\ngoal (1 subgoal):\n 1. extensible (L, R) (map_graph_fn G g) (h O on_graph G g)", "by auto"], ["proof (state)\nthis:\n  extensible (L, R) (map_graph_fn G g) (h O on_graph G g)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       graph_homomorphism L G f \\<Longrightarrow> extensible (L, R) G f", "then"], ["proof (chain)\npicking this:\n  extensible (L, R) (map_graph_fn G g) (h O on_graph G g)", "obtain h2\n      where h2:\"graph_homomorphism R (map_graph_fn G g) h2\" \"agree_on L (h O on_graph G g) h2\""], ["proof (prove)\nusing this:\n  extensible (L, R) (map_graph_fn G g) (h O on_graph G g)\n\ngoal (1 subgoal):\n 1. (\\<And>h2.\n        \\<lbrakk>graph_homomorphism R (map_graph_fn G g) h2;\n         agree_on L (h O on_graph G g) h2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding extensible_def"], ["proof (prove)\nusing this:\n  \\<exists>ga.\n     graph_homomorphism (snd (L, R)) (map_graph_fn G g) ga \\<and>\n     agree_on (fst (L, R)) (h O on_graph G g) ga\n\ngoal (1 subgoal):\n 1. (\\<And>h2.\n        \\<lbrakk>graph_homomorphism R (map_graph_fn G g) h2;\n         agree_on L (h O on_graph G g) h2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  graph_homomorphism R (map_graph_fn G g) h2\n  agree_on L (h O on_graph G g) h2\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       graph_homomorphism L G f \\<Longrightarrow> extensible (L, R) G f", "from 1"], ["proof (chain)\npicking this:\n  graph_homomorphism L G h", "have h_id:\"h O Id_on (vertices G) = h\""], ["proof (prove)\nusing this:\n  graph_homomorphism L G h\n\ngoal (1 subgoal):\n 1. h O Id_on (vertices G) = h", "unfolding graph_homomorphism_def"], ["proof (prove)\nusing this:\n  vertices L = Domain h \\<and>\n  graph L \\<and>\n  graph G \\<and>\n  h `` vertices L \\<subseteq> vertices G \\<and>\n  univalent h \\<and> edge_preserving h (edges L) (edges G)\n\ngoal (1 subgoal):\n 1. h O Id_on (vertices G) = h", "by auto"], ["proof (state)\nthis:\n  h O Id_on (vertices G) = h\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       graph_homomorphism L G f \\<Longrightarrow> extensible (L, R) G f", "let ?h = \"h2 O on_graph (map_graph_fn G g) f\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       graph_homomorphism L G f \\<Longrightarrow> extensible (L, R) G f", "from assms(1)"], ["proof (chain)\npicking this:\n  ?x \\<in> vertices G \\<Longrightarrow> (f \\<circ> g) ?x = ?x", "have \"on_graph G (f \\<circ> g) = Id_on (vertices G)\""], ["proof (prove)\nusing this:\n  ?x \\<in> vertices G \\<Longrightarrow> (f \\<circ> g) ?x = ?x\n\ngoal (1 subgoal):\n 1. on_graph G (f \\<circ> g) = Id_on (vertices G)", "by auto"], ["proof (state)\nthis:\n  on_graph G (f \\<circ> g) = Id_on (vertices G)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       graph_homomorphism L G f \\<Longrightarrow> extensible (L, R) G f", "hence \"map_graph_fn G (f \\<circ> g) = G\""], ["proof (prove)\nusing this:\n  on_graph G (f \\<circ> g) = Id_on (vertices G)\n\ngoal (1 subgoal):\n 1. map_graph_fn G (f \\<circ> g) = G", "using assms(2) map_graph_fn_id"], ["proof (prove)\nusing this:\n  on_graph G (f \\<circ> g) = Id_on (vertices G)\n  graph G\n  map_graph_fn ?X id = restrict ?X\n  map_graph (Id_on (vertices ?X)) ?X = restrict ?X\n\ngoal (1 subgoal):\n 1. map_graph_fn G (f \\<circ> g) = G", "by auto"], ["proof (state)\nthis:\n  map_graph_fn G (f \\<circ> g) = G\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       graph_homomorphism L G f \\<Longrightarrow> extensible (L, R) G f", "with graph_homomorphism_on_graph[OF h2(1),of f]"], ["proof (chain)\npicking this:\n  graph_homomorphism R (map_graph_fn (map_graph_fn G g) f)\n   (h2 O on_graph (map_graph_fn G g) f)\n  map_graph_fn G (f \\<circ> g) = G", "have igh:\"graph_homomorphism R G ?h\""], ["proof (prove)\nusing this:\n  graph_homomorphism R (map_graph_fn (map_graph_fn G g) f)\n   (h2 O on_graph (map_graph_fn G g) f)\n  map_graph_fn G (f \\<circ> g) = G\n\ngoal (1 subgoal):\n 1. graph_homomorphism R G (h2 O on_graph (map_graph_fn G g) f)", "by auto"], ["proof (state)\nthis:\n  graph_homomorphism R G (h2 O on_graph (map_graph_fn G g) f)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       graph_homomorphism L G f \\<Longrightarrow> extensible (L, R) G f", "have \"g x = g xa \\<Longrightarrow> x \\<in> (vertices G) \\<Longrightarrow> xa \\<in> (vertices G) \\<Longrightarrow> x = xa\" \n      for x xa"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>g x = g xa; x \\<in> vertices G; xa \\<in> vertices G\\<rbrakk>\n    \\<Longrightarrow> x = xa", "using assms(1) o_def"], ["proof (prove)\nusing this:\n  ?x \\<in> vertices G \\<Longrightarrow> (f \\<circ> g) ?x = ?x\n  ?f \\<circ> ?g = (\\<lambda>x. ?f (?g x))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>g x = g xa; x \\<in> vertices G; xa \\<in> vertices G\\<rbrakk>\n    \\<Longrightarrow> x = xa", "by metis"], ["proof (state)\nthis:\n  \\<lbrakk>g ?x = g ?xa; ?x \\<in> vertices G; ?xa \\<in> vertices G\\<rbrakk>\n  \\<Longrightarrow> ?x = ?xa\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       graph_homomorphism L G f \\<Longrightarrow> extensible (L, R) G f", "hence \"g x = g xa \\<Longrightarrow> x \\<in> (vertices G) \\<Longrightarrow> xa \\<in> (vertices G) \\<Longrightarrow> (x, xa) \\<in> Id_on (vertices G)\"\n      for x xa"], ["proof (prove)\nusing this:\n  \\<lbrakk>g ?x = g ?xa; ?x \\<in> vertices G; ?xa \\<in> vertices G\\<rbrakk>\n  \\<Longrightarrow> ?x = ?xa\n\ngoal (1 subgoal):\n 1. \\<lbrakk>g x = g xa; x \\<in> vertices G; xa \\<in> vertices G\\<rbrakk>\n    \\<Longrightarrow> (x, xa) \\<in> Id_on (vertices G)", "by auto"], ["proof (state)\nthis:\n  \\<lbrakk>g ?x = g ?xa; ?x \\<in> vertices G; ?xa \\<in> vertices G\\<rbrakk>\n  \\<Longrightarrow> (?x, ?xa) \\<in> Id_on (vertices G)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       graph_homomorphism L G f \\<Longrightarrow> extensible (L, R) G f", "hence id:\"(on_graph G g) O on_graph (map_graph_fn G g) f = Id_on (vertices G)\""], ["proof (prove)\nusing this:\n  \\<lbrakk>g ?x = g ?xa; ?x \\<in> vertices G; ?xa \\<in> vertices G\\<rbrakk>\n  \\<Longrightarrow> (?x, ?xa) \\<in> Id_on (vertices G)\n\ngoal (1 subgoal):\n 1. on_graph G g O on_graph (map_graph_fn G g) f = Id_on (vertices G)", "using assms(1)"], ["proof (prove)\nusing this:\n  \\<lbrakk>g ?x = g ?xa; ?x \\<in> vertices G; ?xa \\<in> vertices G\\<rbrakk>\n  \\<Longrightarrow> (?x, ?xa) \\<in> Id_on (vertices G)\n  ?x \\<in> vertices G \\<Longrightarrow> (f \\<circ> g) ?x = ?x\n\ngoal (1 subgoal):\n 1. on_graph G g O on_graph (map_graph_fn G g) f = Id_on (vertices G)", "by auto"], ["proof (state)\nthis:\n  on_graph G g O on_graph (map_graph_fn G g) f = Id_on (vertices G)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       graph_homomorphism L G f \\<Longrightarrow> extensible (L, R) G f", "from agree_on_ext[OF h2(2),of \"on_graph (map_graph_fn G g) f\",unfolded O_assoc]"], ["proof (chain)\npicking this:\n  agree_on L (h O on_graph G g O on_graph (map_graph_fn G g) f)\n   (h2 O on_graph (map_graph_fn G g) f)", "have agh:\"agree_on L h ?h\""], ["proof (prove)\nusing this:\n  agree_on L (h O on_graph G g O on_graph (map_graph_fn G g) f)\n   (h2 O on_graph (map_graph_fn G g) f)\n\ngoal (1 subgoal):\n 1. agree_on L h (h2 O on_graph (map_graph_fn G g) f)", "unfolding agree_on_def id h_id"], ["proof (prove)\nusing this:\n  \\<forall>v\\<in>vertices L.\n     h `` {v} = (h2 O on_graph (map_graph_fn G g) f) `` {v}\n\ngoal (1 subgoal):\n 1. \\<forall>v\\<in>vertices L.\n       h `` {v} = (h2 O on_graph (map_graph_fn G g) f) `` {v}", "."], ["proof (state)\nthis:\n  agree_on L h (h2 O on_graph (map_graph_fn G g) f)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       graph_homomorphism L G f \\<Longrightarrow> extensible (L, R) G f", "from igh agh"], ["proof (chain)\npicking this:\n  graph_homomorphism R G (h2 O on_graph (map_graph_fn G g) f)\n  agree_on L h (h2 O on_graph (map_graph_fn G g) f)", "show ?case"], ["proof (prove)\nusing this:\n  graph_homomorphism R G (h2 O on_graph (map_graph_fn G g) f)\n  agree_on L h (h2 O on_graph (map_graph_fn G g) f)\n\ngoal (1 subgoal):\n 1. extensible (L, R) G h", "unfolding extensible_def"], ["proof (prove)\nusing this:\n  graph_homomorphism R G (h2 O on_graph (map_graph_fn G g) f)\n  agree_on L h (h2 O on_graph (map_graph_fn G g) f)\n\ngoal (1 subgoal):\n 1. \\<exists>g.\n       graph_homomorphism (snd (L, R)) G g \\<and> agree_on (fst (L, R)) h g", "by auto"], ["proof (state)\nthis:\n  extensible (L, R) G h\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  maintained r G\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma standard_identity_rules:\n  assumes \"standard' C G\"\n  shows \"maintained (reflexivity_rule S_Idt) G\"\n        \"maintained (transitive_rule S_Idt) G\"\n        \"maintained (symmetry_rule S_Idt) G\"\n        \"maintained (congruence_rule S_Idt l) G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (maintained (reflexivity_rule S_Idt) G &&&\n     maintained (transitive_rule S_Idt) G) &&&\n    maintained (symmetry_rule S_Idt) G &&&\n    maintained (congruence_rule S_Idt l) G", "proof -"], ["proof (state)\ngoal (4 subgoals):\n 1. maintained (reflexivity_rule S_Idt) G\n 2. maintained (transitive_rule S_Idt) G\n 3. maintained (symmetry_rule S_Idt) G\n 4. maintained (congruence_rule S_Idt l) G", "note a = assms[unfolded standard_def]"], ["proof (state)\nthis:\n  graph G \\<and>\n  vertices G \\<noteq> {} \\<and>\n  ident_rel S_Idt G \\<and>\n  getRel S_Bot G = {} \\<and>\n  getRel S_Top G =\n  {(x, y). x \\<in> vertices G \\<and> y \\<in> vertices G} \\<and>\n  (\\<forall>(l, v)\\<in>(\\<lambda>c. (S_Const c, Inl c)) ` C.\n      getRel l G = {(v, v)})\n\ngoal (4 subgoals):\n 1. maintained (reflexivity_rule S_Idt) G\n 2. maintained (transitive_rule S_Idt) G\n 3. maintained (symmetry_rule S_Idt) G\n 4. maintained (congruence_rule S_Idt l) G", "from a"], ["proof (chain)\npicking this:\n  graph G \\<and>\n  vertices G \\<noteq> {} \\<and>\n  ident_rel S_Idt G \\<and>\n  getRel S_Bot G = {} \\<and>\n  getRel S_Top G =\n  {(x, y). x \\<in> vertices G \\<and> y \\<in> vertices G} \\<and>\n  (\\<forall>(l, v)\\<in>(\\<lambda>c. (S_Const c, Inl c)) ` C.\n      getRel l G = {(v, v)})", "have g:\"graph G\""], ["proof (prove)\nusing this:\n  graph G \\<and>\n  vertices G \\<noteq> {} \\<and>\n  ident_rel S_Idt G \\<and>\n  getRel S_Bot G = {} \\<and>\n  getRel S_Top G =\n  {(x, y). x \\<in> vertices G \\<and> y \\<in> vertices G} \\<and>\n  (\\<forall>(l, v)\\<in>(\\<lambda>c. (S_Const c, Inl c)) ` C.\n      getRel l G = {(v, v)})\n\ngoal (1 subgoal):\n 1. graph G", "by auto"], ["proof (state)\nthis:\n  graph G\n\ngoal (4 subgoals):\n 1. maintained (reflexivity_rule S_Idt) G\n 2. maintained (transitive_rule S_Idt) G\n 3. maintained (symmetry_rule S_Idt) G\n 4. maintained (congruence_rule S_Idt l) G", "from a"], ["proof (chain)\npicking this:\n  graph G \\<and>\n  vertices G \\<noteq> {} \\<and>\n  ident_rel S_Idt G \\<and>\n  getRel S_Bot G = {} \\<and>\n  getRel S_Top G =\n  {(x, y). x \\<in> vertices G \\<and> y \\<in> vertices G} \\<and>\n  (\\<forall>(l, v)\\<in>(\\<lambda>c. (S_Const c, Inl c)) ` C.\n      getRel l G = {(v, v)})", "have gr:\"getRel S_Idt G = Id_on (vertices G)\" \"getRel S_Bot G = {}\"\n       \"getRel S_Top G = vertices G \\<times> vertices G\"\n    and v_gr:\"\\<forall>a b. ((S_Idt, a, b) \\<in> edges G) = (a \\<in> vertices G \\<and> b = a)\""], ["proof (prove)\nusing this:\n  graph G \\<and>\n  vertices G \\<noteq> {} \\<and>\n  ident_rel S_Idt G \\<and>\n  getRel S_Bot G = {} \\<and>\n  getRel S_Top G =\n  {(x, y). x \\<in> vertices G \\<and> y \\<in> vertices G} \\<and>\n  (\\<forall>(l, v)\\<in>(\\<lambda>c. (S_Const c, Inl c)) ` C.\n      getRel l G = {(v, v)})\n\ngoal (1 subgoal):\n 1. (getRel S_Idt G = Id_on (vertices G) &&&\n     getRel S_Bot G = {} &&&\n     getRel S_Top G = vertices G \\<times> vertices G) &&&\n    \\<forall>a b.\n       ((S_Idt, a, b) \\<in> edges G) = (a \\<in> vertices G \\<and> b = a)", "unfolding getRel_def"], ["proof (prove)\nusing this:\n  graph G \\<and>\n  vertices G \\<noteq> {} \\<and>\n  {(x, y). (S_Idt, x, y) \\<in> edges G} =\n  (\\<lambda>x. (x, x)) ` vertices G \\<and>\n  {(x, y). (S_Bot, x, y) \\<in> edges G} = {} \\<and>\n  {(x, y). (S_Top, x, y) \\<in> edges G} =\n  {(x, y). x \\<in> vertices G \\<and> y \\<in> vertices G} \\<and>\n  (\\<forall>(l, v)\\<in>(\\<lambda>c. (S_Const c, Inl c)) ` C.\n      {(x, y). (l, x, y) \\<in> edges G} = {(v, v)})\n\ngoal (1 subgoal):\n 1. ({(x, y). (S_Idt, x, y) \\<in> edges G} = Id_on (vertices G) &&&\n     {(x, y). (S_Bot, x, y) \\<in> edges G} = {} &&&\n     {(x, y). (S_Top, x, y) \\<in> edges G} =\n     vertices G \\<times> vertices G) &&&\n    \\<forall>a b.\n       ((S_Idt, a, b) \\<in> edges G) = (a \\<in> vertices G \\<and> b = a)", "by auto"], ["proof (state)\nthis:\n  getRel S_Idt G = Id_on (vertices G)\n  getRel S_Bot G = {}\n  getRel S_Top G = vertices G \\<times> vertices G\n  \\<forall>a b.\n     ((S_Idt, a, b) \\<in> edges G) = (a \\<in> vertices G \\<and> b = a)\n\ngoal (4 subgoals):\n 1. maintained (reflexivity_rule S_Idt) G\n 2. maintained (transitive_rule S_Idt) G\n 3. maintained (symmetry_rule S_Idt) G\n 4. maintained (congruence_rule S_Idt l) G", "thus \"maintained (transitive_rule S_Idt) G\" \"maintained (symmetry_rule S_Idt) G\"\n       \"maintained (congruence_rule S_Idt l) G\""], ["proof (prove)\nusing this:\n  getRel S_Idt G = Id_on (vertices G)\n  getRel S_Bot G = {}\n  getRel S_Top G = vertices G \\<times> vertices G\n  \\<forall>a b.\n     ((S_Idt, a, b) \\<in> edges G) = (a \\<in> vertices G \\<and> b = a)\n\ngoal (1 subgoal):\n 1. maintained (transitive_rule S_Idt) G &&&\n    maintained (symmetry_rule S_Idt) G &&&\n    maintained (congruence_rule S_Idt l) G", "unfolding transitive_rule_def symmetry_rule_def congruence_rule_def\n              maintained_holds_subset_iff[OF g]"], ["proof (prove)\nusing this:\n  getRel S_Idt G = Id_on (vertices G)\n  getRel S_Bot G = {}\n  getRel S_Top G = vertices G \\<times> vertices G\n  \\<forall>a b.\n     ((S_Idt, a, b) \\<in> edges G) = (a \\<in> vertices G \\<and> b = a)\n\ngoal (1 subgoal):\n 1. :G:\\<lbrakk>A_Cmp \\<one> \\<one>\\<rbrakk>\n    \\<subseteq> :G:\\<lbrakk>\\<one>\\<rbrakk> &&&\n    :G:\\<lbrakk>A_Cnv \\<one>\\<rbrakk>\n    \\<subseteq> :G:\\<lbrakk>\\<one>\\<rbrakk> &&&\n    :G:\\<lbrakk>A_Cmp (A_Cmp \\<one> (A_Lbl l)) \\<one>\\<rbrakk>\n    \\<subseteq> :G:\\<lbrakk>A_Lbl l\\<rbrakk>", "by (auto simp:gr relcomp_unfold)"], ["proof (state)\nthis:\n  maintained (transitive_rule S_Idt) G\n  maintained (symmetry_rule S_Idt) G\n  maintained (congruence_rule S_Idt l) G\n\ngoal (1 subgoal):\n 1. maintained (reflexivity_rule S_Idt) G", "{"], ["proof (state)\nthis:\n  maintained (transitive_rule S_Idt) G\n  maintained (symmetry_rule S_Idt) G\n  maintained (congruence_rule S_Idt l) G\n\ngoal (1 subgoal):\n 1. maintained (reflexivity_rule S_Idt) G", "fix f :: \"(nat \\<times> ('a + 'b)) set\""], ["proof (state)\ngoal (1 subgoal):\n 1. maintained (reflexivity_rule S_Idt) G", "assume \"graph_homomorphism (LG {} {0}) G f\""], ["proof (state)\nthis:\n  graph_homomorphism (LG {} {0}) G f\n\ngoal (1 subgoal):\n 1. maintained (reflexivity_rule S_Idt) G", "hence u:\"univalent f\" and d:\"Domain f = {0}\"\n       and r:\"f `` {0} \\<subseteq> vertices G\""], ["proof (prove)\nusing this:\n  graph_homomorphism (LG {} {0}) G f\n\ngoal (1 subgoal):\n 1. univalent f &&& Domain f = {0} &&& f `` {0} \\<subseteq> vertices G", "unfolding graph_homomorphism_def"], ["proof (prove)\nusing this:\n  vertices (LG {} {0}) = Domain f \\<and>\n  graph (LG {} {0}) \\<and>\n  graph G \\<and>\n  f `` vertices (LG {} {0}) \\<subseteq> vertices G \\<and>\n  univalent f \\<and> edge_preserving f (edges (LG {} {0})) (edges G)\n\ngoal (1 subgoal):\n 1. univalent f &&& Domain f = {0} &&& f `` {0} \\<subseteq> vertices G", "by simp+"], ["proof (state)\nthis:\n  univalent f\n  Domain f = {0}\n  f `` {0} \\<subseteq> vertices G\n\ngoal (1 subgoal):\n 1. maintained (reflexivity_rule S_Idt) G", "from d"], ["proof (chain)\npicking this:\n  Domain f = {0}", "obtain v where v:\"(0,v) \\<in> f\""], ["proof (prove)\nusing this:\n  Domain f = {0}\n\ngoal (1 subgoal):\n 1. (\\<And>v. (0, v) \\<in> f \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  (0, v) \\<in> f\n\ngoal (1 subgoal):\n 1. maintained (reflexivity_rule S_Idt) G", "hence f:\"f = {(0,v)}\""], ["proof (prove)\nusing this:\n  (0, v) \\<in> f\n\ngoal (1 subgoal):\n 1. f = {(0, v)}", "using d insert_iff mk_disjoint_insert all_not_in_conv old.prod.exhaust\n            u[unfolded univalent_def] Domain.intros[of _ _ f,unfolded d,THEN singletonD]"], ["proof (prove)\nusing this:\n  (0, v) \\<in> f\n  Domain f = {0}\n  (?a \\<in> insert ?b ?A) = (?a = ?b \\<or> ?a \\<in> ?A)\n  ?a \\<in> ?A \\<Longrightarrow>\n  \\<exists>B. ?A = insert ?a B \\<and> ?a \\<notin> B\n  (\\<forall>x. x \\<notin> ?A) = (?A = {})\n  (\\<And>a b. ?y = (a, b) \\<Longrightarrow> ?P) \\<Longrightarrow> ?P\n  \\<forall>x y z.\n     (x, y) \\<in> f \\<and> (x, z) \\<in> f \\<longrightarrow> z = y\n  (?b, ?b1) \\<in> f \\<Longrightarrow> ?b = 0\n\ngoal (1 subgoal):\n 1. f = {(0, v)}", "by (metis (no_types))"], ["proof (state)\nthis:\n  f = {(0, v)}\n\ngoal (1 subgoal):\n 1. maintained (reflexivity_rule S_Idt) G", "from v r"], ["proof (chain)\npicking this:\n  (0, v) \\<in> f\n  f `` {0} \\<subseteq> vertices G", "have v:\"v \\<in> vertices G\""], ["proof (prove)\nusing this:\n  (0, v) \\<in> f\n  f `` {0} \\<subseteq> vertices G\n\ngoal (1 subgoal):\n 1. v \\<in> vertices G", "by auto"], ["proof (state)\nthis:\n  v \\<in> vertices G\n\ngoal (1 subgoal):\n 1. maintained (reflexivity_rule S_Idt) G", "with v_gr"], ["proof (chain)\npicking this:\n  \\<forall>a b.\n     ((S_Idt, a, b) \\<in> edges G) = (a \\<in> vertices G \\<and> b = a)\n  v \\<in> vertices G", "have \"(S_Idt, v, v) \\<in> edges G\""], ["proof (prove)\nusing this:\n  \\<forall>a b.\n     ((S_Idt, a, b) \\<in> edges G) = (a \\<in> vertices G \\<and> b = a)\n  v \\<in> vertices G\n\ngoal (1 subgoal):\n 1. (S_Idt, v, v) \\<in> edges G", "by auto"], ["proof (state)\nthis:\n  (S_Idt, v, v) \\<in> edges G\n\ngoal (1 subgoal):\n 1. maintained (reflexivity_rule S_Idt) G", "hence \"edge_preserving {(0, v)} {(S_Idt, 0, 0)} (edges G)\""], ["proof (prove)\nusing this:\n  (S_Idt, v, v) \\<in> edges G\n\ngoal (1 subgoal):\n 1. edge_preserving {(0::'c, v)} {(S_Idt, 0::'c, 0::'c)} (edges G)", "unfolding edge_preserving"], ["proof (prove)\nusing this:\n  (S_Idt, v, v) \\<in> edges G\n\ngoal (1 subgoal):\n 1. on_triple {(0::'c, v)} `` {(S_Idt, 0::'c, 0::'c)} \\<subseteq> edges G", "by auto"], ["proof (state)\nthis:\n  edge_preserving {(0::?'c1, v)} {(S_Idt, 0::?'c1, 0::?'c1)} (edges G)\n\ngoal (1 subgoal):\n 1. maintained (reflexivity_rule S_Idt) G", "hence \"graph_homomorphism (LG {(S_Idt, 0, 0)} {0}) G f\""], ["proof (prove)\nusing this:\n  edge_preserving {(0::?'c1, v)} {(S_Idt, 0::?'c1, 0::?'c1)} (edges G)\n\ngoal (1 subgoal):\n 1. graph_homomorphism (LG {(S_Idt, 0, 0)} {0}) G f", "unfolding f\n      graph_homomorphism_def"], ["proof (prove)\nusing this:\n  edge_preserving {(0::?'c1, v)} {(S_Idt, 0::?'c1, 0::?'c1)} (edges G)\n\ngoal (1 subgoal):\n 1. vertices (LG {(S_Idt, 0, 0)} {0}) = Domain {(0, v)} \\<and>\n    graph (LG {(S_Idt, 0, 0)} {0}) \\<and>\n    graph G \\<and>\n    {(0, v)} `` vertices (LG {(S_Idt, 0, 0)} {0})\n    \\<subseteq> vertices G \\<and>\n    univalent {(0, v)} \\<and>\n    edge_preserving {(0, v)} (edges (LG {(S_Idt, 0, 0)} {0})) (edges G)", "using g v"], ["proof (prove)\nusing this:\n  edge_preserving {(0::?'c1, v)} {(S_Idt, 0::?'c1, 0::?'c1)} (edges G)\n  graph G\n  v \\<in> vertices G\n\ngoal (1 subgoal):\n 1. vertices (LG {(S_Idt, 0, 0)} {0}) = Domain {(0, v)} \\<and>\n    graph (LG {(S_Idt, 0, 0)} {0}) \\<and>\n    graph G \\<and>\n    {(0, v)} `` vertices (LG {(S_Idt, 0, 0)} {0})\n    \\<subseteq> vertices G \\<and>\n    univalent {(0, v)} \\<and>\n    edge_preserving {(0, v)} (edges (LG {(S_Idt, 0, 0)} {0})) (edges G)", "by (auto simp:univalent_def)"], ["proof (state)\nthis:\n  graph_homomorphism (LG {(S_Idt, 0, 0)} {0}) G f\n\ngoal (1 subgoal):\n 1. maintained (reflexivity_rule S_Idt) G", "}"], ["proof (state)\nthis:\n  graph_homomorphism (LG {} {0}) G ?f2 \\<Longrightarrow>\n  graph_homomorphism (LG {(S_Idt, 0, 0)} {0}) G ?f2\n\ngoal (1 subgoal):\n 1. maintained (reflexivity_rule S_Idt) G", "thus \"maintained (reflexivity_rule S_Idt) G\""], ["proof (prove)\nusing this:\n  graph_homomorphism (LG {} {0}) G ?f2 \\<Longrightarrow>\n  graph_homomorphism (LG {(S_Idt, 0, 0)} {0}) G ?f2\n\ngoal (1 subgoal):\n 1. maintained (reflexivity_rule S_Idt) G", "unfolding reflexivity_rule_def maintained_def"], ["proof (prove)\nusing this:\n  graph_homomorphism (LG {} {0}) G ?f2 \\<Longrightarrow>\n  graph_homomorphism (LG {(S_Idt, 0, 0)} {0}) G ?f2\n\ngoal (1 subgoal):\n 1. \\<forall>f.\n       graph_homomorphism (fst (LG {} {0}, LG {(S_Idt, 0, 0)} {0})) G\n        f \\<longrightarrow>\n       extensible (LG {} {0}, LG {(S_Idt, 0, 0)} {0}) G f", "by auto"], ["proof (state)\nthis:\n  maintained (reflexivity_rule S_Idt) G\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma standard_maintains_identity_rules:\n  assumes \"standard' C G\" \"x\\<in>identity_rules L\"\n  shows \"maintained x G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. maintained x G", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. maintained x G", "consider \"x = reflexivity_rule S_Idt\" | \"x = transitive_rule S_Idt\" | \"x = symmetry_rule S_Idt\"\n    |  \"\\<exists> l. x = congruence_rule S_Idt l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x = reflexivity_rule S_Idt \\<Longrightarrow> thesis;\n     x = transitive_rule S_Idt \\<Longrightarrow> thesis;\n     x = symmetry_rule S_Idt \\<Longrightarrow> thesis;\n     \\<exists>l. x = congruence_rule S_Idt l \\<Longrightarrow>\n     thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "using assms"], ["proof (prove)\nusing this:\n  standard' C G\n  x \\<in> identity_rules L\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x = reflexivity_rule S_Idt \\<Longrightarrow> thesis;\n     x = transitive_rule S_Idt \\<Longrightarrow> thesis;\n     x = symmetry_rule S_Idt \\<Longrightarrow> thesis;\n     \\<exists>l. x = congruence_rule S_Idt l \\<Longrightarrow>\n     thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "unfolding identity_rules_def Un_iff"], ["proof (prove)\nusing this:\n  standard' C G\n  x \\<in> {reflexivity_rule S_Idt, transitive_rule S_Idt,\n           symmetry_rule S_Idt} \\<or>\n  x \\<in> congruence_rules S_Idt L\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x = reflexivity_rule S_Idt \\<Longrightarrow> thesis;\n     x = transitive_rule S_Idt \\<Longrightarrow> thesis;\n     x = symmetry_rule S_Idt \\<Longrightarrow> thesis;\n     \\<exists>l. x = congruence_rule S_Idt l \\<Longrightarrow>\n     thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "by blast"], ["proof (state)\nthis:\n  \\<lbrakk>x = reflexivity_rule S_Idt \\<Longrightarrow> ?thesis;\n   x = transitive_rule S_Idt \\<Longrightarrow> ?thesis;\n   x = symmetry_rule S_Idt \\<Longrightarrow> ?thesis;\n   \\<exists>l. x = congruence_rule S_Idt l \\<Longrightarrow>\n   ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. maintained x G", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>x = reflexivity_rule S_Idt \\<Longrightarrow> ?thesis;\n   x = transitive_rule S_Idt \\<Longrightarrow> ?thesis;\n   x = symmetry_rule S_Idt \\<Longrightarrow> ?thesis;\n   \\<exists>l. x = congruence_rule S_Idt l \\<Longrightarrow>\n   ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. maintained x G", "using standard_identity_rules[OF assms(1)]"], ["proof (prove)\nusing this:\n  \\<lbrakk>x = reflexivity_rule S_Idt \\<Longrightarrow> ?thesis;\n   x = transitive_rule S_Idt \\<Longrightarrow> ?thesis;\n   x = symmetry_rule S_Idt \\<Longrightarrow> ?thesis;\n   \\<exists>l. x = congruence_rule S_Idt l \\<Longrightarrow>\n   ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n  maintained (reflexivity_rule S_Idt) G\n  maintained (transitive_rule S_Idt) G\n  maintained (symmetry_rule S_Idt) G\n  maintained (congruence_rule S_Idt ?l) G\n\ngoal (1 subgoal):\n 1. maintained x G", "by(cases,auto)"], ["proof (state)\nthis:\n  maintained x G\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma standard_maintains_rules:\n  assumes \"standard' C G\"\n  shows \"maintainedA (standard_rules C L) G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. maintainedA (standard_rules C L) G", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>R. R \\<in> standard_rules C L \\<Longrightarrow> maintained R G", "fix R"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>R. R \\<in> standard_rules C L \\<Longrightarrow> maintained R G", "assume \"R \\<in> standard_rules C L\""], ["proof (state)\nthis:\n  R \\<in> standard_rules C L\n\ngoal (1 subgoal):\n 1. \\<And>R. R \\<in> standard_rules C L \\<Longrightarrow> maintained R G", "then"], ["proof (chain)\npicking this:\n  R \\<in> standard_rules C L", "consider \"R \\<in> constant_rules C\" | \"R \\<in> identity_rules L\"\n    | \"R = top_rule S_Top\" | \"R = nonempty_rule\""], ["proof (prove)\nusing this:\n  R \\<in> standard_rules C L\n\ngoal (1 subgoal):\n 1. \\<lbrakk>R \\<in> constant_rules C \\<Longrightarrow> thesis;\n     R \\<in> identity_rules L \\<Longrightarrow> thesis;\n     R = top_rule S_Top \\<Longrightarrow> thesis;\n     R = nonempty_rule \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "by (auto simp:standard_rules_def)"], ["proof (state)\nthis:\n  \\<lbrakk>R \\<in> constant_rules C \\<Longrightarrow> ?thesis;\n   R \\<in> identity_rules L \\<Longrightarrow> ?thesis;\n   R = top_rule S_Top \\<Longrightarrow> ?thesis;\n   R = nonempty_rule \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. \\<And>R. R \\<in> standard_rules C L \\<Longrightarrow> maintained R G", "thus \"maintained R G\""], ["proof (prove)\nusing this:\n  \\<lbrakk>R \\<in> constant_rules C \\<Longrightarrow> ?thesis;\n   R \\<in> identity_rules L \\<Longrightarrow> ?thesis;\n   R = top_rule S_Top \\<Longrightarrow> ?thesis;\n   R = nonempty_rule \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. maintained R G", "using assms standard_maintains_constant_rules[OF assms]\n          standard_maintains_identity_rules[OF assms]"], ["proof (prove)\nusing this:\n  \\<lbrakk>R \\<in> constant_rules C \\<Longrightarrow> ?thesis;\n   R \\<in> identity_rules L \\<Longrightarrow> ?thesis;\n   R = top_rule S_Top \\<Longrightarrow> ?thesis;\n   R = nonempty_rule \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n  standard' C G\n  ?R \\<in> constant_rules C \\<Longrightarrow> maintained ?R G\n  ?x \\<in> identity_rules ?L \\<Longrightarrow> maintained ?x G\n\ngoal (1 subgoal):\n 1. maintained R G", "by (cases,auto simp:standard_def)"], ["proof (state)\nthis:\n  maintained R G\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>A case-split rule.\\<close>"], ["", "lemma standard_rules_edges:\n  assumes \"(lhs, rhs) \\<in> standard_rules C L\" \"(l, x, y) \\<in> edges rhs\"\n  shows \"(l = S_Bot \\<Longrightarrow> thesis) \\<Longrightarrow>\n         (l = S_Top \\<Longrightarrow> thesis) \\<Longrightarrow>\n         (l = S_Idt \\<Longrightarrow> thesis) \\<Longrightarrow>\n         (l \\<in> S_Const ` C \\<Longrightarrow> thesis) \\<Longrightarrow>\n         (l \\<in> L \\<Longrightarrow> thesis) \\<Longrightarrow> thesis\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>l = S_Bot \\<Longrightarrow> thesis;\n     l = S_Top \\<Longrightarrow> thesis; l = S_Idt \\<Longrightarrow> thesis;\n     l \\<in> S_Const ` C \\<Longrightarrow> thesis;\n     l \\<in> L \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "using assms [[simproc del: defined_all]]"], ["proof (prove)\nusing this:\n  (lhs, rhs) \\<in> standard_rules C L\n  (l, x, y) \\<in> edges rhs\n\ngoal (1 subgoal):\n 1. \\<lbrakk>l = S_Bot \\<Longrightarrow> thesis;\n     l = S_Top \\<Longrightarrow> thesis; l = S_Idt \\<Longrightarrow> thesis;\n     l \\<in> S_Const ` C \\<Longrightarrow> thesis;\n     l \\<in> L \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "by (auto simp: Let_def standard_rules_def constant_rules_def identity_rules_def\n   const_exists_def const_exists_rev_def const_prop_def const_disj_def\n   reflexivity_rule_def transitive_rule_def symmetry_rule_def congruence_rule_def\n   top_rule_def nonempty_rule_def)"], ["", "text \\<open>Lemma 8.\n\n   This is a slightly stronger version of Lemma 8:\n   we reason about maintained rather than holds,\n   and the quantification for maintained happens within the existential quantifier, rather than outside.\n\n   Due to the type system of Isabelle, we construct the concrete type @{term std_graph} for G.\n   This in contrast to arguing that 'there exists a type large enough', as in the paper.\\<close>"], ["", "lemma maintained_standard_noconstants:\n  assumes mnt:\"maintainedA (standard_rules C L) G'\"\n  and gr:\"graph (G'::('V Standard_Constant, 'V') labeled_graph)\"\n         \"fst ` edges G' \\<subseteq> L\" (* Graph on labels L *)\n  and cf:\"getRel S_Bot G' = {}\" (* Conflict free *)\nshows \"\\<exists> f g (G::('V, 'V') std_graph). G = map_graph_fn G (f o g) \\<and> G = map_graph_fn G' f\n              \\<and> subgraph (map_graph_fn G g) G'\n              \\<and> standard' C G\n              \\<and> (\\<forall> r. maintained r G' \\<longrightarrow> maintained r G)\n              \\<and> (\\<forall> x y e. x \\<in> vertices G' \\<longrightarrow> y \\<in> vertices G' \\<longrightarrow> \n                          (g (f x), g (f y)) \\<in> :map_graph_fn G g:\\<lbrakk>e\\<rbrakk> \\<longrightarrow> (x,y) \\<in> :G':\\<lbrakk>e\\<rbrakk>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>f g G.\n       G = map_graph_fn G (f \\<circ> g) \\<and>\n       G = map_graph_fn G' f \\<and>\n       subgraph (map_graph_fn G g) G' \\<and>\n       standard' C G \\<and>\n       (\\<forall>r. maintained r G' \\<longrightarrow> maintained r G) \\<and>\n       (\\<forall>x y e.\n           x \\<in> vertices G' \\<longrightarrow>\n           y \\<in> vertices G' \\<longrightarrow>\n           (g (f x), g (f y))\n           \\<in> :map_graph_fn G g:\\<lbrakk>e\\<rbrakk> \\<longrightarrow>\n           (x, y) \\<in> :G':\\<lbrakk>e\\<rbrakk>)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>f g G.\n       G = map_graph_fn G (f \\<circ> g) \\<and>\n       G = map_graph_fn G' f \\<and>\n       subgraph (map_graph_fn G g) G' \\<and>\n       standard' C G \\<and>\n       (\\<forall>r. maintained r G' \\<longrightarrow> maintained r G) \\<and>\n       (\\<forall>x y e.\n           x \\<in> vertices G' \\<longrightarrow>\n           y \\<in> vertices G' \\<longrightarrow>\n           (g (f x), g (f y))\n           \\<in> :map_graph_fn G g:\\<lbrakk>e\\<rbrakk> \\<longrightarrow>\n           (x, y) \\<in> :G':\\<lbrakk>e\\<rbrakk>)", "note mnt = mnt[unfolded standard_rules_def]"], ["proof (state)\nthis:\n  maintainedA\n   (constant_rules C \\<union> identity_rules L \\<union>\n    {top_rule S_Top, nonempty_rule})\n   G'\n\ngoal (1 subgoal):\n 1. \\<exists>f g G.\n       G = map_graph_fn G (f \\<circ> g) \\<and>\n       G = map_graph_fn G' f \\<and>\n       subgraph (map_graph_fn G g) G' \\<and>\n       standard' C G \\<and>\n       (\\<forall>r. maintained r G' \\<longrightarrow> maintained r G) \\<and>\n       (\\<forall>x y e.\n           x \\<in> vertices G' \\<longrightarrow>\n           y \\<in> vertices G' \\<longrightarrow>\n           (g (f x), g (f y))\n           \\<in> :map_graph_fn G g:\\<lbrakk>e\\<rbrakk> \\<longrightarrow>\n           (x, y) \\<in> :G':\\<lbrakk>e\\<rbrakk>)", "from mnt"], ["proof (chain)\npicking this:\n  maintainedA\n   (constant_rules C \\<union> identity_rules L \\<union>\n    {top_rule S_Top, nonempty_rule})\n   G'", "have \"maintainedA (identity_rules L) G'\""], ["proof (prove)\nusing this:\n  maintainedA\n   (constant_rules C \\<union> identity_rules L \\<union>\n    {top_rule S_Top, nonempty_rule})\n   G'\n\ngoal (1 subgoal):\n 1. maintainedA (identity_rules L) G'", "by auto"], ["proof (state)\nthis:\n  maintainedA (identity_rules L) G'\n\ngoal (1 subgoal):\n 1. \\<exists>f g G.\n       G = map_graph_fn G (f \\<circ> g) \\<and>\n       G = map_graph_fn G' f \\<and>\n       subgraph (map_graph_fn G g) G' \\<and>\n       standard' C G \\<and>\n       (\\<forall>r. maintained r G' \\<longrightarrow> maintained r G) \\<and>\n       (\\<forall>x y e.\n           x \\<in> vertices G' \\<longrightarrow>\n           y \\<in> vertices G' \\<longrightarrow>\n           (g (f x), g (f y))\n           \\<in> :map_graph_fn G g:\\<lbrakk>e\\<rbrakk> \\<longrightarrow>\n           (x, y) \\<in> :G':\\<lbrakk>e\\<rbrakk>)", "from identity_rules[OF gr(1) this gr(2)]"], ["proof (chain)\npicking this:\n  \\<exists>f.\n     f \\<circ> f = f \\<and>\n     ident_rel S_Idt (map_graph_fn G' f) \\<and>\n     subgraph (map_graph_fn G' f) G' \\<and>\n     (\\<forall>l x y.\n         ((l, x, y) \\<in> edges G') = ((l, f x, f y) \\<in> edges G'))", "obtain h where\n    h:\"h \\<circ> h = h\" \"ident_rel S_Idt (map_graph_fn G' h)\" \"subgraph (map_graph_fn G' h) G'\"\n      \"((l, x, y) \\<in> edges G') = ((l, h x, h y) \\<in> edges G')\" for l x y"], ["proof (prove)\nusing this:\n  \\<exists>f.\n     f \\<circ> f = f \\<and>\n     ident_rel S_Idt (map_graph_fn G' f) \\<and>\n     subgraph (map_graph_fn G' f) G' \\<and>\n     (\\<forall>l x y.\n         ((l, x, y) \\<in> edges G') = ((l, f x, f y) \\<in> edges G'))\n\ngoal (1 subgoal):\n 1. (\\<And>h.\n        \\<lbrakk>h \\<circ> h = h; ident_rel S_Idt (map_graph_fn G' h);\n         subgraph (map_graph_fn G' h) G';\n         \\<And>l x y.\n            ((l, x, y) \\<in> edges G') =\n            ((l, h x, h y) \\<in> edges G')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  h \\<circ> h = h\n  ident_rel S_Idt (map_graph_fn G' h)\n  subgraph (map_graph_fn G' h) G'\n  ((?l, ?x, ?y) \\<in> edges G') = ((?l, h ?x, h ?y) \\<in> edges G')\n\ngoal (1 subgoal):\n 1. \\<exists>f g G.\n       G = map_graph_fn G (f \\<circ> g) \\<and>\n       G = map_graph_fn G' f \\<and>\n       subgraph (map_graph_fn G g) G' \\<and>\n       standard' C G \\<and>\n       (\\<forall>r. maintained r G' \\<longrightarrow> maintained r G) \\<and>\n       (\\<forall>x y e.\n           x \\<in> vertices G' \\<longrightarrow>\n           y \\<in> vertices G' \\<longrightarrow>\n           (g (f x), g (f y))\n           \\<in> :map_graph_fn G g:\\<lbrakk>e\\<rbrakk> \\<longrightarrow>\n           (x, y) \\<in> :G':\\<lbrakk>e\\<rbrakk>)", "have mg:\"\\<And> r. maintained r G' \\<Longrightarrow> maintained r (map_graph_fn G' h)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>r.\n       maintained r G' \\<Longrightarrow> maintained r (map_graph_fn G' h)", "using idemp_embedding_maintained_preserved[OF h(3)] h(1)"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>x.\n              x \\<in> vertices G' \\<Longrightarrow> (h \\<circ> h) x = h x;\n   maintained ?r G'\\<rbrakk>\n  \\<Longrightarrow> maintained ?r (map_graph_fn G' h)\n  h \\<circ> h = h\n\ngoal (1 subgoal):\n 1. \\<And>r.\n       maintained r G' \\<Longrightarrow> maintained r (map_graph_fn G' h)", "by auto"], ["proof (state)\nthis:\n  maintained ?r G' \\<Longrightarrow> maintained ?r (map_graph_fn G' h)\n\ngoal (1 subgoal):\n 1. \\<exists>f g G.\n       G = map_graph_fn G (f \\<circ> g) \\<and>\n       G = map_graph_fn G' f \\<and>\n       subgraph (map_graph_fn G g) G' \\<and>\n       standard' C G \\<and>\n       (\\<forall>r. maintained r G' \\<longrightarrow> maintained r G) \\<and>\n       (\\<forall>x y e.\n           x \\<in> vertices G' \\<longrightarrow>\n           y \\<in> vertices G' \\<longrightarrow>\n           (g (f x), g (f y))\n           \\<in> :map_graph_fn G g:\\<lbrakk>e\\<rbrakk> \\<longrightarrow>\n           (x, y) \\<in> :G':\\<lbrakk>e\\<rbrakk>)", "from mnt"], ["proof (chain)\npicking this:\n  maintainedA\n   (constant_rules C \\<union> identity_rules L \\<union>\n    {top_rule S_Top, nonempty_rule})\n   G'", "have tr:\"maintained (top_rule S_Top) G'\" and ne:\"maintained nonempty_rule G'\""], ["proof (prove)\nusing this:\n  maintainedA\n   (constant_rules C \\<union> identity_rules L \\<union>\n    {top_rule S_Top, nonempty_rule})\n   G'\n\ngoal (1 subgoal):\n 1. maintained (top_rule S_Top) G' &&& maintained nonempty_rule G'", "by auto"], ["proof (state)\nthis:\n  maintained (top_rule S_Top) G'\n  maintained nonempty_rule G'\n\ngoal (1 subgoal):\n 1. \\<exists>f g G.\n       G = map_graph_fn G (f \\<circ> g) \\<and>\n       G = map_graph_fn G' f \\<and>\n       subgraph (map_graph_fn G g) G' \\<and>\n       standard' C G \\<and>\n       (\\<forall>r. maintained r G' \\<longrightarrow> maintained r G) \\<and>\n       (\\<forall>x y e.\n           x \\<in> vertices G' \\<longrightarrow>\n           y \\<in> vertices G' \\<longrightarrow>\n           (g (f x), g (f y))\n           \\<in> :map_graph_fn G g:\\<lbrakk>e\\<rbrakk> \\<longrightarrow>\n           (x, y) \\<in> :G':\\<lbrakk>e\\<rbrakk>)", "from nonempty_rule[OF gr(1)] ne"], ["proof (chain)\npicking this:\n  maintained nonempty_rule G' = (vertices G' \\<noteq> {})\n  maintained nonempty_rule G'", "obtain x where x:\"x \\<in> vertices G'\""], ["proof (prove)\nusing this:\n  maintained nonempty_rule G' = (vertices G' \\<noteq> {})\n  maintained nonempty_rule G'\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        x \\<in> vertices G' \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  x \\<in> vertices G'\n\ngoal (1 subgoal):\n 1. \\<exists>f g G.\n       G = map_graph_fn G (f \\<circ> g) \\<and>\n       G = map_graph_fn G' f \\<and>\n       subgraph (map_graph_fn G g) G' \\<and>\n       standard' C G \\<and>\n       (\\<forall>r. maintained r G' \\<longrightarrow> maintained r G) \\<and>\n       (\\<forall>x y e.\n           x \\<in> vertices G' \\<longrightarrow>\n           y \\<in> vertices G' \\<longrightarrow>\n           (g (f x), g (f y))\n           \\<in> :map_graph_fn G g:\\<lbrakk>e\\<rbrakk> \\<longrightarrow>\n           (x, y) \\<in> :G':\\<lbrakk>e\\<rbrakk>)", "from tr[unfolded top_rule[OF gr(1)]] x"], ["proof (chain)\npicking this:\n  vertices G' \\<times> vertices G' = getRel S_Top G'\n  x \\<in> vertices G'", "have top_nonempty:\"(x, x) \\<in> getRel S_Top G'\""], ["proof (prove)\nusing this:\n  vertices G' \\<times> vertices G' = getRel S_Top G'\n  x \\<in> vertices G'\n\ngoal (1 subgoal):\n 1. (x, x) \\<in> getRel S_Top G'", "by auto"], ["proof (state)\nthis:\n  (x, x) \\<in> getRel S_Top G'\n\ngoal (1 subgoal):\n 1. \\<exists>f g G.\n       G = map_graph_fn G (f \\<circ> g) \\<and>\n       G = map_graph_fn G' f \\<and>\n       subgraph (map_graph_fn G g) G' \\<and>\n       standard' C G \\<and>\n       (\\<forall>r. maintained r G' \\<longrightarrow> maintained r G) \\<and>\n       (\\<forall>x y e.\n           x \\<in> vertices G' \\<longrightarrow>\n           y \\<in> vertices G' \\<longrightarrow>\n           (g (f x), g (f y))\n           \\<in> :map_graph_fn G g:\\<lbrakk>e\\<rbrakk> \\<longrightarrow>\n           (x, y) \\<in> :G':\\<lbrakk>e\\<rbrakk>)", "have \"\\<And> c. c \\<in> C \\<Longrightarrow> \\<exists>v. (v, v) \\<in> getRel (S_Const c) (map_graph_fn G' h)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>c.\n       c \\<in> C \\<Longrightarrow>\n       \\<exists>v. (v, v) \\<in> getRel (S_Const c) (map_graph_fn G' h)", "proof(goal_cases)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>c.\n       c \\<in> C \\<Longrightarrow>\n       \\<exists>v. (v, v) \\<in> getRel (S_Const c) (map_graph_fn G' h)", "case (1 c)"], ["proof (state)\nthis:\n  c \\<in> C\n\ngoal (1 subgoal):\n 1. \\<And>c.\n       c \\<in> C \\<Longrightarrow>\n       \\<exists>v. (v, v) \\<in> getRel (S_Const c) (map_graph_fn G' h)", "with mnt"], ["proof (chain)\npicking this:\n  maintainedA\n   (constant_rules C \\<union> identity_rules L \\<union>\n    {top_rule S_Top, nonempty_rule})\n   G'\n  c \\<in> C", "have cr5: \"maintained (const_exists c) G'\"\n              and cr7: \"maintained (const_prop c) G'\""], ["proof (prove)\nusing this:\n  maintainedA\n   (constant_rules C \\<union> identity_rules L \\<union>\n    {top_rule S_Top, nonempty_rule})\n   G'\n  c \\<in> C\n\ngoal (1 subgoal):\n 1. maintained (const_exists c) G' &&& maintained (const_prop c) G'", "unfolding constant_rules_def"], ["proof (prove)\nusing this:\n  maintainedA\n   (const_exists ` C \\<union> const_exists_rev ` C \\<union>\n    const_prop ` C \\<union>\n    {const_disj c\\<^sub>1 c\\<^sub>2 |c\\<^sub>1 c\\<^sub>2.\n     c\\<^sub>1 \\<in> C \\<and>\n     c\\<^sub>2 \\<in> C \\<and> c\\<^sub>1 \\<noteq> c\\<^sub>2} \\<union>\n    identity_rules L \\<union>\n    {top_rule S_Top, nonempty_rule})\n   G'\n  c \\<in> C\n\ngoal (1 subgoal):\n 1. maintained (const_exists c) G' &&& maintained (const_prop c) G'", "by blast+"], ["proof (state)\nthis:\n  maintained (const_exists c) G'\n  maintained (const_prop c) G'\n\ngoal (1 subgoal):\n 1. \\<And>c.\n       c \\<in> C \\<Longrightarrow>\n       \\<exists>v. (v, v) \\<in> getRel (S_Const c) (map_graph_fn G' h)", "from top_nonempty cr5[unfolded maintained_holds_subset_iff[OF gr(1)] const_exists_def]"], ["proof (chain)\npicking this:\n  (x, x) \\<in> getRel S_Top G'\n  :G':\\<lbrakk>\\<top>\\<rbrakk>\n  \\<subseteq> :G':\\<lbrakk>A_Cmp (A_Cmp \\<top> (A_Lbl (S_Const c)))\n                            \\<top>\\<rbrakk>", "obtain y z where yz:\"(y,z) \\<in> getRel (S_Const c) G'\""], ["proof (prove)\nusing this:\n  (x, x) \\<in> getRel S_Top G'\n  :G':\\<lbrakk>\\<top>\\<rbrakk>\n  \\<subseteq> :G':\\<lbrakk>A_Cmp (A_Cmp \\<top> (A_Lbl (S_Const c)))\n                            \\<top>\\<rbrakk>\n\ngoal (1 subgoal):\n 1. (\\<And>y z.\n        (y, z) \\<in> getRel (S_Const c) G' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  (y, z) \\<in> getRel (S_Const c) G'\n\ngoal (1 subgoal):\n 1. \\<And>c.\n       c \\<in> C \\<Longrightarrow>\n       \\<exists>v. (v, v) \\<in> getRel (S_Const c) (map_graph_fn G' h)", "from this gr(1)"], ["proof (chain)\npicking this:\n  (y, z) \\<in> getRel (S_Const c) G'\n  graph G'", "have yzv:\"y \\<in> vertices G'\" \"z \\<in> vertices G'\""], ["proof (prove)\nusing this:\n  (y, z) \\<in> getRel (S_Const c) G'\n  graph G'\n\ngoal (1 subgoal):\n 1. y \\<in> vertices G' &&& z \\<in> vertices G'", "by (auto simp:getRel_def)"], ["proof (state)\nthis:\n  y \\<in> vertices G'\n  z \\<in> vertices G'\n\ngoal (1 subgoal):\n 1. \\<And>c.\n       c \\<in> C \\<Longrightarrow>\n       \\<exists>v. (v, v) \\<in> getRel (S_Const c) (map_graph_fn G' h)", "from getRel_hom[OF yz yzv]"], ["proof (chain)\npicking this:\n  (?f y, ?f z) \\<in> getRel (S_Const c) (map_graph_fn G' ?f)", "have hi:\"(h y,h z) \\<in> getRel (S_Const c) (map_graph_fn G' h)\""], ["proof (prove)\nusing this:\n  (?f y, ?f z) \\<in> getRel (S_Const c) (map_graph_fn G' ?f)\n\ngoal (1 subgoal):\n 1. (h y, h z) \\<in> getRel (S_Const c) (map_graph_fn G' h)", "."], ["proof (state)\nthis:\n  (h y, h z) \\<in> getRel (S_Const c) (map_graph_fn G' h)\n\ngoal (1 subgoal):\n 1. \\<And>c.\n       c \\<in> C \\<Longrightarrow>\n       \\<exists>v. (v, v) \\<in> getRel (S_Const c) (map_graph_fn G' h)", "with h(2) cr7[THEN mg,unfolded maintained_holds_subset_iff[OF map_graph_fn_graphI] const_prop_def]"], ["proof (chain)\npicking this:\n  ident_rel S_Idt (map_graph_fn G' h)\n  :map_graph_fn G' h:\\<lbrakk>A_Lbl (S_Const c)\\<rbrakk>\n  \\<subseteq> :map_graph_fn G' h:\\<lbrakk>\\<one>\\<rbrakk>\n  (h y, h z) \\<in> getRel (S_Const c) (map_graph_fn G' h)", "have \"h y = h z\""], ["proof (prove)\nusing this:\n  ident_rel S_Idt (map_graph_fn G' h)\n  :map_graph_fn G' h:\\<lbrakk>A_Lbl (S_Const c)\\<rbrakk>\n  \\<subseteq> :map_graph_fn G' h:\\<lbrakk>\\<one>\\<rbrakk>\n  (h y, h z) \\<in> getRel (S_Const c) (map_graph_fn G' h)\n\ngoal (1 subgoal):\n 1. h y = h z", "by force"], ["proof (state)\nthis:\n  h y = h z\n\ngoal (1 subgoal):\n 1. \\<And>c.\n       c \\<in> C \\<Longrightarrow>\n       \\<exists>v. (v, v) \\<in> getRel (S_Const c) (map_graph_fn G' h)", "thus \"\\<exists> v. (v,v) \\<in> getRel (S_Const c) (map_graph_fn G' h)\""], ["proof (prove)\nusing this:\n  h y = h z\n\ngoal (1 subgoal):\n 1. \\<exists>v. (v, v) \\<in> getRel (S_Const c) (map_graph_fn G' h)", "using hi"], ["proof (prove)\nusing this:\n  h y = h z\n  (h y, h z) \\<in> getRel (S_Const c) (map_graph_fn G' h)\n\ngoal (1 subgoal):\n 1. \\<exists>v. (v, v) \\<in> getRel (S_Const c) (map_graph_fn G' h)", "by auto"], ["proof (state)\nthis:\n  \\<exists>v. (v, v) \\<in> getRel (S_Const c) (map_graph_fn G' h)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?c1 \\<in> C \\<Longrightarrow>\n  \\<exists>v. (v, v) \\<in> getRel (S_Const ?c1) (map_graph_fn G' h)\n\ngoal (1 subgoal):\n 1. \\<exists>f g G.\n       G = map_graph_fn G (f \\<circ> g) \\<and>\n       G = map_graph_fn G' f \\<and>\n       subgraph (map_graph_fn G g) G' \\<and>\n       standard' C G \\<and>\n       (\\<forall>r. maintained r G' \\<longrightarrow> maintained r G) \\<and>\n       (\\<forall>x y e.\n           x \\<in> vertices G' \\<longrightarrow>\n           y \\<in> vertices G' \\<longrightarrow>\n           (g (f x), g (f y))\n           \\<in> :map_graph_fn G g:\\<lbrakk>e\\<rbrakk> \\<longrightarrow>\n           (x, y) \\<in> :G':\\<lbrakk>e\\<rbrakk>)", "hence \"\\<forall> c. \\<exists> v. c \\<in> C \\<longrightarrow> (v, v) \\<in> getRel (S_Const c) (map_graph_fn G' h)\""], ["proof (prove)\nusing this:\n  ?c1 \\<in> C \\<Longrightarrow>\n  \\<exists>v. (v, v) \\<in> getRel (S_Const ?c1) (map_graph_fn G' h)\n\ngoal (1 subgoal):\n 1. \\<forall>c.\n       \\<exists>v.\n          c \\<in> C \\<longrightarrow>\n          (v, v) \\<in> getRel (S_Const c) (map_graph_fn G' h)", "by blast"], ["proof (state)\nthis:\n  \\<forall>c.\n     \\<exists>v.\n        c \\<in> C \\<longrightarrow>\n        (v, v) \\<in> getRel (S_Const c) (map_graph_fn G' h)\n\ngoal (1 subgoal):\n 1. \\<exists>f g G.\n       G = map_graph_fn G (f \\<circ> g) \\<and>\n       G = map_graph_fn G' f \\<and>\n       subgraph (map_graph_fn G g) G' \\<and>\n       standard' C G \\<and>\n       (\\<forall>r. maintained r G' \\<longrightarrow> maintained r G) \\<and>\n       (\\<forall>x y e.\n           x \\<in> vertices G' \\<longrightarrow>\n           y \\<in> vertices G' \\<longrightarrow>\n           (g (f x), g (f y))\n           \\<in> :map_graph_fn G g:\\<lbrakk>e\\<rbrakk> \\<longrightarrow>\n           (x, y) \\<in> :G':\\<lbrakk>e\\<rbrakk>)", "from choice[OF this]"], ["proof (chain)\npicking this:\n  \\<exists>f.\n     \\<forall>x.\n        x \\<in> C \\<longrightarrow>\n        (f x, f x) \\<in> getRel (S_Const x) (map_graph_fn G' h)", "obtain m\n    where m:\"\\<And> x. x \\<in> C \\<Longrightarrow> (m x, m x) \\<in> getRel (S_Const x) (map_graph_fn G' h)\""], ["proof (prove)\nusing this:\n  \\<exists>f.\n     \\<forall>x.\n        x \\<in> C \\<longrightarrow>\n        (f x, f x) \\<in> getRel (S_Const x) (map_graph_fn G' h)\n\ngoal (1 subgoal):\n 1. (\\<And>m.\n        (\\<And>x.\n            x \\<in> C \\<Longrightarrow>\n            (m x, m x)\n            \\<in> getRel (S_Const x) (map_graph_fn G' h)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  ?x1 \\<in> C \\<Longrightarrow>\n  (m ?x1, m ?x1) \\<in> getRel (S_Const ?x1) (map_graph_fn G' h)\n\ngoal (1 subgoal):\n 1. \\<exists>f g G.\n       G = map_graph_fn G (f \\<circ> g) \\<and>\n       G = map_graph_fn G' f \\<and>\n       subgraph (map_graph_fn G g) G' \\<and>\n       standard' C G \\<and>\n       (\\<forall>r. maintained r G' \\<longrightarrow> maintained r G) \\<and>\n       (\\<forall>x y e.\n           x \\<in> vertices G' \\<longrightarrow>\n           y \\<in> vertices G' \\<longrightarrow>\n           (g (f x), g (f y))\n           \\<in> :map_graph_fn G g:\\<lbrakk>e\\<rbrakk> \\<longrightarrow>\n           (x, y) \\<in> :G':\\<lbrakk>e\\<rbrakk>)", "let ?m' = \"\\<lambda> x. if x \\<in> m ` C then Inl (the_inv_into C m x) else Inr x\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>f g G.\n       G = map_graph_fn G (f \\<circ> g) \\<and>\n       G = map_graph_fn G' f \\<and>\n       subgraph (map_graph_fn G g) G' \\<and>\n       standard' C G \\<and>\n       (\\<forall>r. maintained r G' \\<longrightarrow> maintained r G) \\<and>\n       (\\<forall>x y e.\n           x \\<in> vertices G' \\<longrightarrow>\n           y \\<in> vertices G' \\<longrightarrow>\n           (g (f x), g (f y))\n           \\<in> :map_graph_fn G g:\\<lbrakk>e\\<rbrakk> \\<longrightarrow>\n           (x, y) \\<in> :G':\\<lbrakk>e\\<rbrakk>)", "define f where \"f \\<equiv> ?m' o h\""], ["proof (state)\nthis:\n  f \\<equiv>\n  (\\<lambda>x.\n      if x \\<in> m ` C then Inl (the_inv_into C m x) else Inr x) \\<circ>\n  h\n\ngoal (1 subgoal):\n 1. \\<exists>f g G.\n       G = map_graph_fn G (f \\<circ> g) \\<and>\n       G = map_graph_fn G' f \\<and>\n       subgraph (map_graph_fn G g) G' \\<and>\n       standard' C G \\<and>\n       (\\<forall>r. maintained r G' \\<longrightarrow> maintained r G) \\<and>\n       (\\<forall>x y e.\n           x \\<in> vertices G' \\<longrightarrow>\n           y \\<in> vertices G' \\<longrightarrow>\n           (g (f x), g (f y))\n           \\<in> :map_graph_fn G g:\\<lbrakk>e\\<rbrakk> \\<longrightarrow>\n           (x, y) \\<in> :G':\\<lbrakk>e\\<rbrakk>)", "have \"\\<And> x y. x \\<in> C \\<Longrightarrow> y \\<in> C \\<Longrightarrow> m x = m y \\<Longrightarrow> x = y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> C; y \\<in> C; m x = m y\\<rbrakk>\n       \\<Longrightarrow> x = y", "proof(goal_cases)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> C; y \\<in> C; m x = m y\\<rbrakk>\n       \\<Longrightarrow> x = y", "case (1 x y)"], ["proof (state)\nthis:\n  x \\<in> C\n  y \\<in> C\n  m x = m y\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> C; y \\<in> C; m x = m y\\<rbrakk>\n       \\<Longrightarrow> x = y", "with m"], ["proof (chain)\npicking this:\n  ?x1 \\<in> C \\<Longrightarrow>\n  (m ?x1, m ?x1) \\<in> getRel (S_Const ?x1) (map_graph_fn G' h)\n  x \\<in> C\n  y \\<in> C\n  m x = m y", "have \"(m x,m x) \\<in> getRel (S_Const y) (map_graph_fn G' h)\"\n                \"(m x,m x) \\<in> getRel (S_Const x) (map_graph_fn G' h)\""], ["proof (prove)\nusing this:\n  ?x1 \\<in> C \\<Longrightarrow>\n  (m ?x1, m ?x1) \\<in> getRel (S_Const ?x1) (map_graph_fn G' h)\n  x \\<in> C\n  y \\<in> C\n  m x = m y\n\ngoal (1 subgoal):\n 1. (m x, m x) \\<in> getRel (S_Const y) (map_graph_fn G' h) &&&\n    (m x, m x) \\<in> getRel (S_Const x) (map_graph_fn G' h)", "by metis+"], ["proof (state)\nthis:\n  (m x, m x) \\<in> getRel (S_Const y) (map_graph_fn G' h)\n  (m x, m x) \\<in> getRel (S_Const x) (map_graph_fn G' h)\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> C; y \\<in> C; m x = m y\\<rbrakk>\n       \\<Longrightarrow> x = y", "hence mx: \"(m x,m x) \\<in> getRel (S_Const y) G'\"\n              \"(m x,m x) \\<in> getRel (S_Const x) G'\""], ["proof (prove)\nusing this:\n  (m x, m x) \\<in> getRel (S_Const y) (map_graph_fn G' h)\n  (m x, m x) \\<in> getRel (S_Const x) (map_graph_fn G' h)\n\ngoal (1 subgoal):\n 1. (m x, m x) \\<in> getRel (S_Const y) G' &&&\n    (m x, m x) \\<in> getRel (S_Const x) G'", "using h(3)"], ["proof (prove)\nusing this:\n  (m x, m x) \\<in> getRel (S_Const y) (map_graph_fn G' h)\n  (m x, m x) \\<in> getRel (S_Const x) (map_graph_fn G' h)\n  subgraph (map_graph_fn G' h) G'\n\ngoal (1 subgoal):\n 1. (m x, m x) \\<in> getRel (S_Const y) G' &&&\n    (m x, m x) \\<in> getRel (S_Const x) G'", "by force+"], ["proof (state)\nthis:\n  (m x, m x) \\<in> getRel (S_Const y) G'\n  (m x, m x) \\<in> getRel (S_Const x) G'\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> C; y \\<in> C; m x = m y\\<rbrakk>\n       \\<Longrightarrow> x = y", "from 1(1,2) mnt"], ["proof (chain)\npicking this:\n  x \\<in> C\n  y \\<in> C\n  maintainedA\n   (constant_rules C \\<union> identity_rules L \\<union>\n    {top_rule S_Top, nonempty_rule})\n   G'", "have cr8:\"x \\<noteq> y \\<Longrightarrow> maintained (const_disj x y) G'\""], ["proof (prove)\nusing this:\n  x \\<in> C\n  y \\<in> C\n  maintainedA\n   (constant_rules C \\<union> identity_rules L \\<union>\n    {top_rule S_Top, nonempty_rule})\n   G'\n\ngoal (1 subgoal):\n 1. x \\<noteq> y \\<Longrightarrow> maintained (const_disj x y) G'", "unfolding constant_rules_def"], ["proof (prove)\nusing this:\n  x \\<in> C\n  y \\<in> C\n  maintainedA\n   (const_exists ` C \\<union> const_exists_rev ` C \\<union>\n    const_prop ` C \\<union>\n    {const_disj c\\<^sub>1 c\\<^sub>2 |c\\<^sub>1 c\\<^sub>2.\n     c\\<^sub>1 \\<in> C \\<and>\n     c\\<^sub>2 \\<in> C \\<and> c\\<^sub>1 \\<noteq> c\\<^sub>2} \\<union>\n    identity_rules L \\<union>\n    {top_rule S_Top, nonempty_rule})\n   G'\n\ngoal (1 subgoal):\n 1. x \\<noteq> y \\<Longrightarrow> maintained (const_disj x y) G'", "by blast"], ["proof (state)\nthis:\n  x \\<noteq> y \\<Longrightarrow> maintained (const_disj x y) G'\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> C; y \\<in> C; m x = m y\\<rbrakk>\n       \\<Longrightarrow> x = y", "from cr8[unfolded maintained_holds_subset_iff[OF gr(1)] const_disj_def] mx"], ["proof (chain)\npicking this:\n  x \\<noteq> y \\<Longrightarrow>\n  :G':\\<lbrakk>A_Cmp (A_Lbl (S_Const x)) (A_Lbl (S_Const y))\\<rbrakk>\n  \\<subseteq> :G':\\<lbrakk>\\<bottom>\\<rbrakk>\n  (m x, m x) \\<in> getRel (S_Const y) G'\n  (m x, m x) \\<in> getRel (S_Const x) G'", "have \"x\\<noteq>y\\<Longrightarrow>(m x,m x) \\<in> :G':\\<lbrakk>\\<bottom>\\<rbrakk>\""], ["proof (prove)\nusing this:\n  x \\<noteq> y \\<Longrightarrow>\n  :G':\\<lbrakk>A_Cmp (A_Lbl (S_Const x)) (A_Lbl (S_Const y))\\<rbrakk>\n  \\<subseteq> :G':\\<lbrakk>\\<bottom>\\<rbrakk>\n  (m x, m x) \\<in> getRel (S_Const y) G'\n  (m x, m x) \\<in> getRel (S_Const x) G'\n\ngoal (1 subgoal):\n 1. x \\<noteq> y \\<Longrightarrow>\n    (m x, m x) \\<in> :G':\\<lbrakk>\\<bottom>\\<rbrakk>", "by auto"], ["proof (state)\nthis:\n  x \\<noteq> y \\<Longrightarrow>\n  (m x, m x) \\<in> :G':\\<lbrakk>\\<bottom>\\<rbrakk>\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> C; y \\<in> C; m x = m y\\<rbrakk>\n       \\<Longrightarrow> x = y", "thus \"x = y\""], ["proof (prove)\nusing this:\n  x \\<noteq> y \\<Longrightarrow>\n  (m x, m x) \\<in> :G':\\<lbrakk>\\<bottom>\\<rbrakk>\n\ngoal (1 subgoal):\n 1. x = y", "using cf"], ["proof (prove)\nusing this:\n  x \\<noteq> y \\<Longrightarrow>\n  (m x, m x) \\<in> :G':\\<lbrakk>\\<bottom>\\<rbrakk>\n  getRel S_Bot G' = {}\n\ngoal (1 subgoal):\n 1. x = y", "by auto"], ["proof (state)\nthis:\n  x = y\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<lbrakk>?x1 \\<in> C; ?y1 \\<in> C; m ?x1 = m ?y1\\<rbrakk>\n  \\<Longrightarrow> ?x1 = ?y1\n\ngoal (1 subgoal):\n 1. \\<exists>f g G.\n       G = map_graph_fn G (f \\<circ> g) \\<and>\n       G = map_graph_fn G' f \\<and>\n       subgraph (map_graph_fn G g) G' \\<and>\n       standard' C G \\<and>\n       (\\<forall>r. maintained r G' \\<longrightarrow> maintained r G) \\<and>\n       (\\<forall>x y e.\n           x \\<in> vertices G' \\<longrightarrow>\n           y \\<in> vertices G' \\<longrightarrow>\n           (g (f x), g (f y))\n           \\<in> :map_graph_fn G g:\\<lbrakk>e\\<rbrakk> \\<longrightarrow>\n           (x, y) \\<in> :G':\\<lbrakk>e\\<rbrakk>)", "hence \"univalent (converse (BNF_Def.Gr C m))\""], ["proof (prove)\nusing this:\n  \\<lbrakk>?x1 \\<in> C; ?y1 \\<in> C; m ?x1 = m ?y1\\<rbrakk>\n  \\<Longrightarrow> ?x1 = ?y1\n\ngoal (1 subgoal):\n 1. univalent ((BNF_Def.Gr C m)\\<inverse>)", "unfolding univalent_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>?x1 \\<in> C; ?y1 \\<in> C; m ?x1 = m ?y1\\<rbrakk>\n  \\<Longrightarrow> ?x1 = ?y1\n\ngoal (1 subgoal):\n 1. \\<forall>x y z.\n       (x, y) \\<in> (BNF_Def.Gr C m)\\<inverse> \\<and>\n       (x, z) \\<in> (BNF_Def.Gr C m)\\<inverse> \\<longrightarrow>\n       z = y", "by auto"], ["proof (state)\nthis:\n  univalent ((BNF_Def.Gr C m)\\<inverse>)\n\ngoal (1 subgoal):\n 1. \\<exists>f g G.\n       G = map_graph_fn G (f \\<circ> g) \\<and>\n       G = map_graph_fn G' f \\<and>\n       subgraph (map_graph_fn G g) G' \\<and>\n       standard' C G \\<and>\n       (\\<forall>r. maintained r G' \\<longrightarrow> maintained r G) \\<and>\n       (\\<forall>x y e.\n           x \\<in> vertices G' \\<longrightarrow>\n           y \\<in> vertices G' \\<longrightarrow>\n           (g (f x), g (f y))\n           \\<in> :map_graph_fn G g:\\<lbrakk>e\\<rbrakk> \\<longrightarrow>\n           (x, y) \\<in> :G':\\<lbrakk>e\\<rbrakk>)", "hence inj_m:\"inj_on m C\""], ["proof (prove)\nusing this:\n  univalent ((BNF_Def.Gr C m)\\<inverse>)\n\ngoal (1 subgoal):\n 1. inj_on m C", "unfolding inj_on_def"], ["proof (prove)\nusing this:\n  univalent ((BNF_Def.Gr C m)\\<inverse>)\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>C. \\<forall>y\\<in>C. m x = m y \\<longrightarrow> x = y", "by auto"], ["proof (state)\nthis:\n  inj_on m C\n\ngoal (1 subgoal):\n 1. \\<exists>f g G.\n       G = map_graph_fn G (f \\<circ> g) \\<and>\n       G = map_graph_fn G' f \\<and>\n       subgraph (map_graph_fn G g) G' \\<and>\n       standard' C G \\<and>\n       (\\<forall>r. maintained r G' \\<longrightarrow> maintained r G) \\<and>\n       (\\<forall>x y e.\n           x \\<in> vertices G' \\<longrightarrow>\n           y \\<in> vertices G' \\<longrightarrow>\n           (g (f x), g (f y))\n           \\<in> :map_graph_fn G g:\\<lbrakk>e\\<rbrakk> \\<longrightarrow>\n           (x, y) \\<in> :G':\\<lbrakk>e\\<rbrakk>)", "from inj_on_the_inv_into[OF inj_m]"], ["proof (chain)\npicking this:\n  inj_on (the_inv_into C m) (m ` C)", "have inj_m':\"inj ?m'\""], ["proof (prove)\nusing this:\n  inj_on (the_inv_into C m) (m ` C)\n\ngoal (1 subgoal):\n 1. inj (\\<lambda>x.\n            if x \\<in> m ` C then Inl (the_inv_into C m x) else Inr x)", "unfolding inj_on_def"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>m ` C.\n     \\<forall>y\\<in>m ` C.\n        the_inv_into C m x = the_inv_into C m y \\<longrightarrow> x = y\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>UNIV.\n       \\<forall>y\\<in>UNIV.\n          (if x \\<in> m ` C then Inl (the_inv_into C m x) else Inr x) =\n          (if y \\<in> m ` C then Inl (the_inv_into C m y)\n           else Inr y) \\<longrightarrow>\n          x = y", "by auto"], ["proof (state)\nthis:\n  inj (\\<lambda>x.\n          if x \\<in> m ` C then Inl (the_inv_into C m x) else Inr x)\n\ngoal (1 subgoal):\n 1. \\<exists>f g G.\n       G = map_graph_fn G (f \\<circ> g) \\<and>\n       G = map_graph_fn G' f \\<and>\n       subgraph (map_graph_fn G g) G' \\<and>\n       standard' C G \\<and>\n       (\\<forall>r. maintained r G' \\<longrightarrow> maintained r G) \\<and>\n       (\\<forall>x y e.\n           x \\<in> vertices G' \\<longrightarrow>\n           y \\<in> vertices G' \\<longrightarrow>\n           (g (f x), g (f y))\n           \\<in> :map_graph_fn G g:\\<lbrakk>e\\<rbrakk> \\<longrightarrow>\n           (x, y) \\<in> :G':\\<lbrakk>e\\<rbrakk>)", "define G where \"G = map_graph_fn G' f\""], ["proof (state)\nthis:\n  G = map_graph_fn G' f\n\ngoal (1 subgoal):\n 1. \\<exists>f g G.\n       G = map_graph_fn G (f \\<circ> g) \\<and>\n       G = map_graph_fn G' f \\<and>\n       subgraph (map_graph_fn G g) G' \\<and>\n       standard' C G \\<and>\n       (\\<forall>r. maintained r G' \\<longrightarrow> maintained r G) \\<and>\n       (\\<forall>x y e.\n           x \\<in> vertices G' \\<longrightarrow>\n           y \\<in> vertices G' \\<longrightarrow>\n           (g (f x), g (f y))\n           \\<in> :map_graph_fn G g:\\<lbrakk>e\\<rbrakk> \\<longrightarrow>\n           (x, y) \\<in> :G':\\<lbrakk>e\\<rbrakk>)", "hence G:\"graph G\" \"f x \\<in> vertices G\" \"getRel S_Bot G = {}\""], ["proof (prove)\nusing this:\n  G = map_graph_fn G' f\n\ngoal (1 subgoal):\n 1. graph G &&& f x \\<in> vertices G &&& getRel S_Bot G = {}", "using x cf"], ["proof (prove)\nusing this:\n  G = map_graph_fn G' f\n  x \\<in> vertices G'\n  getRel S_Bot G' = {}\n\ngoal (1 subgoal):\n 1. graph G &&& f x \\<in> vertices G &&& getRel S_Bot G = {}", "unfolding getRel_def"], ["proof (prove)\nusing this:\n  G = map_graph_fn G' f\n  x \\<in> vertices G'\n  {(x, y). (S_Bot, x, y) \\<in> edges G'} = {}\n\ngoal (1 subgoal):\n 1. graph G &&&\n    f x \\<in> vertices G &&& {(x, y). (S_Bot, x, y) \\<in> edges G} = {}", "by force+"], ["proof (state)\nthis:\n  graph G\n  f x \\<in> vertices G\n  getRel S_Bot G = {}\n\ngoal (1 subgoal):\n 1. \\<exists>f g G.\n       G = map_graph_fn G (f \\<circ> g) \\<and>\n       G = map_graph_fn G' f \\<and>\n       subgraph (map_graph_fn G g) G' \\<and>\n       standard' C G \\<and>\n       (\\<forall>r. maintained r G' \\<longrightarrow> maintained r G) \\<and>\n       (\\<forall>x y e.\n           x \\<in> vertices G' \\<longrightarrow>\n           y \\<in> vertices G' \\<longrightarrow>\n           (g (f x), g (f y))\n           \\<in> :map_graph_fn G g:\\<lbrakk>e\\<rbrakk> \\<longrightarrow>\n           (x, y) \\<in> :G':\\<lbrakk>e\\<rbrakk>)", "from comp_inj_on[OF inj_on_the_inv_into[OF inj_m] inj_Inl, unfolded o_def] inj_Inr"], ["proof (chain)\npicking this:\n  inj_on (\\<lambda>x. Inl (the_inv_into C m x)) (m ` C)\n  inj_on Inr ?A", "have inj_m':\"inj_on ?m' (vertices G')\""], ["proof (prove)\nusing this:\n  inj_on (\\<lambda>x. Inl (the_inv_into C m x)) (m ` C)\n  inj_on Inr ?A\n\ngoal (1 subgoal):\n 1. inj_on\n     (\\<lambda>x. if x \\<in> m ` C then Inl (the_inv_into C m x) else Inr x)\n     (vertices G')", "unfolding inj_on_def"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>m ` C.\n     \\<forall>y\\<in>m ` C.\n        Inl (the_inv_into C m x) =\n        Inl (the_inv_into C m y) \\<longrightarrow>\n        x = y\n  \\<forall>x\\<in>?A.\n     \\<forall>y\\<in>?A. Inr x = Inr y \\<longrightarrow> x = y\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>vertices G'.\n       \\<forall>y\\<in>vertices G'.\n          (if x \\<in> m ` C then Inl (the_inv_into C m x) else Inr x) =\n          (if y \\<in> m ` C then Inl (the_inv_into C m y)\n           else Inr y) \\<longrightarrow>\n          x = y", "by auto"], ["proof (state)\nthis:\n  inj_on\n   (\\<lambda>x. if x \\<in> m ` C then Inl (the_inv_into C m x) else Inr x)\n   (vertices G')\n\ngoal (1 subgoal):\n 1. \\<exists>f g G.\n       G = map_graph_fn G (f \\<circ> g) \\<and>\n       G = map_graph_fn G' f \\<and>\n       subgraph (map_graph_fn G g) G' \\<and>\n       standard' C G \\<and>\n       (\\<forall>r. maintained r G' \\<longrightarrow> maintained r G) \\<and>\n       (\\<forall>x y e.\n           x \\<in> vertices G' \\<longrightarrow>\n           y \\<in> vertices G' \\<longrightarrow>\n           (g (f x), g (f y))\n           \\<in> :map_graph_fn G g:\\<lbrakk>e\\<rbrakk> \\<longrightarrow>\n           (x, y) \\<in> :G':\\<lbrakk>e\\<rbrakk>)", "define g where \"g = the_inv_into (vertices G') ?m'\""], ["proof (state)\nthis:\n  g =\n  the_inv_into (vertices G')\n   (\\<lambda>x. if x \\<in> m ` C then Inl (the_inv_into C m x) else Inr x)\n\ngoal (1 subgoal):\n 1. \\<exists>f g G.\n       G = map_graph_fn G (f \\<circ> g) \\<and>\n       G = map_graph_fn G' f \\<and>\n       subgraph (map_graph_fn G g) G' \\<and>\n       standard' C G \\<and>\n       (\\<forall>r. maintained r G' \\<longrightarrow> maintained r G) \\<and>\n       (\\<forall>x y e.\n           x \\<in> vertices G' \\<longrightarrow>\n           y \\<in> vertices G' \\<longrightarrow>\n           (g (f x), g (f y))\n           \\<in> :map_graph_fn G g:\\<lbrakk>e\\<rbrakk> \\<longrightarrow>\n           (x, y) \\<in> :G':\\<lbrakk>e\\<rbrakk>)", "have gf_h:\"\\<And> x. x \\<in> vertices G' \\<Longrightarrow> (g o f) x = h x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> vertices G' \\<Longrightarrow> (g \\<circ> f) x = h x", "unfolding g_def f_def o_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> vertices G' \\<Longrightarrow>\n       the_inv_into (vertices G')\n        (\\<lambda>x.\n            if x \\<in> m ` C then Inl (the_inv_into C m x) else Inr x)\n        (if h x \\<in> m ` C then Inl (the_inv_into C m (h x))\n         else Inr (h x)) =\n       h x", "apply(rule the_inv_into_f_f[OF inj_m'])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> vertices G' \\<Longrightarrow> h x \\<in> vertices G'", "using h"], ["proof (prove)\nusing this:\n  h \\<circ> h = h\n  ident_rel S_Idt (map_graph_fn G' h)\n  subgraph (map_graph_fn G' h) G'\n  ((?l, ?x, ?y) \\<in> edges G') = ((?l, h ?x, h ?y) \\<in> edges G')\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> vertices G' \\<Longrightarrow> h x \\<in> vertices G'", "unfolding subgraph_def graph_union_iff"], ["proof (prove)\nusing this:\n  h \\<circ> h = h\n  ident_rel S_Idt (map_graph_fn G' h)\n  graph (map_graph_fn G' h) \\<and>\n  graph G' \\<and>\n  edges (map_graph_fn G' h) \\<subseteq> edges G' \\<and>\n  vertices (map_graph_fn G' h) \\<subseteq> vertices G'\n  ((?l, ?x, ?y) \\<in> edges G') = ((?l, h ?x, h ?y) \\<in> edges G')\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> vertices G' \\<Longrightarrow> h x \\<in> vertices G'", "by auto"], ["proof (state)\nthis:\n  ?x1 \\<in> vertices G' \\<Longrightarrow> (g \\<circ> f) ?x1 = h ?x1\n\ngoal (1 subgoal):\n 1. \\<exists>f g G.\n       G = map_graph_fn G (f \\<circ> g) \\<and>\n       G = map_graph_fn G' f \\<and>\n       subgraph (map_graph_fn G g) G' \\<and>\n       standard' C G \\<and>\n       (\\<forall>r. maintained r G' \\<longrightarrow> maintained r G) \\<and>\n       (\\<forall>x y e.\n           x \\<in> vertices G' \\<longrightarrow>\n           y \\<in> vertices G' \\<longrightarrow>\n           (g (f x), g (f y))\n           \\<in> :map_graph_fn G g:\\<lbrakk>e\\<rbrakk> \\<longrightarrow>\n           (x, y) \\<in> :G':\\<lbrakk>e\\<rbrakk>)", "have mg_eq:\"map_graph_fn G' (g \\<circ> f) = map_graph_fn G' h\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map_graph_fn G' (g \\<circ> f) = map_graph_fn G' h", "by (rule map_graph_fn_eqI[OF gf_h])"], ["proof (state)\nthis:\n  map_graph_fn G' (g \\<circ> f) = map_graph_fn G' h\n\ngoal (1 subgoal):\n 1. \\<exists>f g G.\n       G = map_graph_fn G (f \\<circ> g) \\<and>\n       G = map_graph_fn G' f \\<and>\n       subgraph (map_graph_fn G g) G' \\<and>\n       standard' C G \\<and>\n       (\\<forall>r. maintained r G' \\<longrightarrow> maintained r G) \\<and>\n       (\\<forall>x y e.\n           x \\<in> vertices G' \\<longrightarrow>\n           y \\<in> vertices G' \\<longrightarrow>\n           (g (f x), g (f y))\n           \\<in> :map_graph_fn G g:\\<lbrakk>e\\<rbrakk> \\<longrightarrow>\n           (x, y) \\<in> :G':\\<lbrakk>e\\<rbrakk>)", "have \"\\<And> x. x \\<in> vertices G' \\<Longrightarrow> h x \\<in> vertices G'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> vertices G' \\<Longrightarrow> h x \\<in> vertices G'", "using h(3)"], ["proof (prove)\nusing this:\n  subgraph (map_graph_fn G' h) G'\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> vertices G' \\<Longrightarrow> h x \\<in> vertices G'", "unfolding subgraph_def graph_union_iff"], ["proof (prove)\nusing this:\n  graph (map_graph_fn G' h) \\<and>\n  graph G' \\<and>\n  edges (map_graph_fn G' h) \\<subseteq> edges G' \\<and>\n  vertices (map_graph_fn G' h) \\<subseteq> vertices G'\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> vertices G' \\<Longrightarrow> h x \\<in> vertices G'", "by(cases G',auto)"], ["proof (state)\nthis:\n  ?x1 \\<in> vertices G' \\<Longrightarrow> h ?x1 \\<in> vertices G'\n\ngoal (1 subgoal):\n 1. \\<exists>f g G.\n       G = map_graph_fn G (f \\<circ> g) \\<and>\n       G = map_graph_fn G' f \\<and>\n       subgraph (map_graph_fn G g) G' \\<and>\n       standard' C G \\<and>\n       (\\<forall>r. maintained r G' \\<longrightarrow> maintained r G) \\<and>\n       (\\<forall>x y e.\n           x \\<in> vertices G' \\<longrightarrow>\n           y \\<in> vertices G' \\<longrightarrow>\n           (g (f x), g (f y))\n           \\<in> :map_graph_fn G g:\\<lbrakk>e\\<rbrakk> \\<longrightarrow>\n           (x, y) \\<in> :G':\\<lbrakk>e\\<rbrakk>)", "hence gf_id:\"\\<And> x. x \\<in> vertices G' \\<Longrightarrow> (g o f) (h x) = (h x)\""], ["proof (prove)\nusing this:\n  ?x1 \\<in> vertices G' \\<Longrightarrow> h ?x1 \\<in> vertices G'\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> vertices G' \\<Longrightarrow> (g \\<circ> f) (h x) = h x", "using h(1) gf_h"], ["proof (prove)\nusing this:\n  ?x1 \\<in> vertices G' \\<Longrightarrow> h ?x1 \\<in> vertices G'\n  h \\<circ> h = h\n  ?x1 \\<in> vertices G' \\<Longrightarrow> (g \\<circ> f) ?x1 = h ?x1\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> vertices G' \\<Longrightarrow> (g \\<circ> f) (h x) = h x", "unfolding o_def"], ["proof (prove)\nusing this:\n  ?x1 \\<in> vertices G' \\<Longrightarrow> h ?x1 \\<in> vertices G'\n  (\\<lambda>x. h (h x)) = h\n  ?x1 \\<in> vertices G' \\<Longrightarrow> g (f ?x1) = h ?x1\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> vertices G' \\<Longrightarrow> g (f (h x)) = h x", "by metis"], ["proof (state)\nthis:\n  ?x1 \\<in> vertices G' \\<Longrightarrow> (g \\<circ> f) (h ?x1) = h ?x1\n\ngoal (1 subgoal):\n 1. \\<exists>f g G.\n       G = map_graph_fn G (f \\<circ> g) \\<and>\n       G = map_graph_fn G' f \\<and>\n       subgraph (map_graph_fn G g) G' \\<and>\n       standard' C G \\<and>\n       (\\<forall>r. maintained r G' \\<longrightarrow> maintained r G) \\<and>\n       (\\<forall>x y e.\n           x \\<in> vertices G' \\<longrightarrow>\n           y \\<in> vertices G' \\<longrightarrow>\n           (g (f x), g (f y))\n           \\<in> :map_graph_fn G g:\\<lbrakk>e\\<rbrakk> \\<longrightarrow>\n           (x, y) \\<in> :G':\\<lbrakk>e\\<rbrakk>)", "{"], ["proof (state)\nthis:\n  ?x1 \\<in> vertices G' \\<Longrightarrow> (g \\<circ> f) (h ?x1) = h ?x1\n\ngoal (1 subgoal):\n 1. \\<exists>f g G.\n       G = map_graph_fn G (f \\<circ> g) \\<and>\n       G = map_graph_fn G' f \\<and>\n       subgraph (map_graph_fn G g) G' \\<and>\n       standard' C G \\<and>\n       (\\<forall>r. maintained r G' \\<longrightarrow> maintained r G) \\<and>\n       (\\<forall>x y e.\n           x \\<in> vertices G' \\<longrightarrow>\n           y \\<in> vertices G' \\<longrightarrow>\n           (g (f x), g (f y))\n           \\<in> :map_graph_fn G g:\\<lbrakk>e\\<rbrakk> \\<longrightarrow>\n           (x, y) \\<in> :G':\\<lbrakk>e\\<rbrakk>)", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>f g G.\n       G = map_graph_fn G (f \\<circ> g) \\<and>\n       G = map_graph_fn G' f \\<and>\n       subgraph (map_graph_fn G g) G' \\<and>\n       standard' C G \\<and>\n       (\\<forall>r. maintained r G' \\<longrightarrow> maintained r G) \\<and>\n       (\\<forall>x y e.\n           x \\<in> vertices G' \\<longrightarrow>\n           y \\<in> vertices G' \\<longrightarrow>\n           (g (f x), g (f y))\n           \\<in> :map_graph_fn G g:\\<lbrakk>e\\<rbrakk> \\<longrightarrow>\n           (x, y) \\<in> :G':\\<lbrakk>e\\<rbrakk>)", "assume \"x \\<in> vertices G\""], ["proof (state)\nthis:\n  x \\<in> vertices G\n\ngoal (1 subgoal):\n 1. \\<exists>f g G.\n       G = map_graph_fn G (f \\<circ> g) \\<and>\n       G = map_graph_fn G' f \\<and>\n       subgraph (map_graph_fn G g) G' \\<and>\n       standard' C G \\<and>\n       (\\<forall>r. maintained r G' \\<longrightarrow> maintained r G) \\<and>\n       (\\<forall>x y e.\n           x \\<in> vertices G' \\<longrightarrow>\n           y \\<in> vertices G' \\<longrightarrow>\n           (g (f x), g (f y))\n           \\<in> :map_graph_fn G g:\\<lbrakk>e\\<rbrakk> \\<longrightarrow>\n           (x, y) \\<in> :G':\\<lbrakk>e\\<rbrakk>)", "then"], ["proof (chain)\npicking this:\n  x \\<in> vertices G", "obtain y where y:\"f y = x\" \"y \\<in> vertices G'\""], ["proof (prove)\nusing this:\n  x \\<in> vertices G\n\ngoal (1 subgoal):\n 1. (\\<And>y.\n        \\<lbrakk>f y = x; y \\<in> vertices G'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding G_def"], ["proof (prove)\nusing this:\n  x \\<in> vertices (map_graph_fn G' f)\n\ngoal (1 subgoal):\n 1. (\\<And>y.\n        \\<lbrakk>f y = x; y \\<in> vertices G'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  f y = x\n  y \\<in> vertices G'\n\ngoal (1 subgoal):\n 1. \\<exists>f g G.\n       G = map_graph_fn G (f \\<circ> g) \\<and>\n       G = map_graph_fn G' f \\<and>\n       subgraph (map_graph_fn G g) G' \\<and>\n       standard' C G \\<and>\n       (\\<forall>r. maintained r G' \\<longrightarrow> maintained r G) \\<and>\n       (\\<forall>x y e.\n           x \\<in> vertices G' \\<longrightarrow>\n           y \\<in> vertices G' \\<longrightarrow>\n           (g (f x), g (f y))\n           \\<in> :map_graph_fn G g:\\<lbrakk>e\\<rbrakk> \\<longrightarrow>\n           (x, y) \\<in> :G':\\<lbrakk>e\\<rbrakk>)", "from gf_h[OF y(2)]"], ["proof (chain)\npicking this:\n  (g \\<circ> f) y = h y", "have \"(f o g) (f y) = f (h y)\""], ["proof (prove)\nusing this:\n  (g \\<circ> f) y = h y\n\ngoal (1 subgoal):\n 1. (f \\<circ> g) (f y) = f (h y)", "unfolding o_def"], ["proof (prove)\nusing this:\n  g (f y) = h y\n\ngoal (1 subgoal):\n 1. f (g (f y)) = f (h y)", "by auto"], ["proof (state)\nthis:\n  (f \\<circ> g) (f y) = f (h y)\n\ngoal (1 subgoal):\n 1. \\<exists>f g G.\n       G = map_graph_fn G (f \\<circ> g) \\<and>\n       G = map_graph_fn G' f \\<and>\n       subgraph (map_graph_fn G g) G' \\<and>\n       standard' C G \\<and>\n       (\\<forall>r. maintained r G' \\<longrightarrow> maintained r G) \\<and>\n       (\\<forall>x y e.\n           x \\<in> vertices G' \\<longrightarrow>\n           y \\<in> vertices G' \\<longrightarrow>\n           (g (f x), g (f y))\n           \\<in> :map_graph_fn G g:\\<lbrakk>e\\<rbrakk> \\<longrightarrow>\n           (x, y) \\<in> :G':\\<lbrakk>e\\<rbrakk>)", "also"], ["proof (state)\nthis:\n  (f \\<circ> g) (f y) = f (h y)\n\ngoal (1 subgoal):\n 1. \\<exists>f g G.\n       G = map_graph_fn G (f \\<circ> g) \\<and>\n       G = map_graph_fn G' f \\<and>\n       subgraph (map_graph_fn G g) G' \\<and>\n       standard' C G \\<and>\n       (\\<forall>r. maintained r G' \\<longrightarrow> maintained r G) \\<and>\n       (\\<forall>x y e.\n           x \\<in> vertices G' \\<longrightarrow>\n           y \\<in> vertices G' \\<longrightarrow>\n           (g (f x), g (f y))\n           \\<in> :map_graph_fn G g:\\<lbrakk>e\\<rbrakk> \\<longrightarrow>\n           (x, y) \\<in> :G':\\<lbrakk>e\\<rbrakk>)", "have \"\\<dots> = f y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f (h y) = f y", "using h(1)"], ["proof (prove)\nusing this:\n  h \\<circ> h = h\n\ngoal (1 subgoal):\n 1. f (h y) = f y", "unfolding f_def o_def"], ["proof (prove)\nusing this:\n  (\\<lambda>x. h (h x)) = h\n\ngoal (1 subgoal):\n 1. (if h (h y) \\<in> m ` C then Inl (the_inv_into C m (h (h y)))\n     else Inr (h (h y))) =\n    (if h y \\<in> m ` C then Inl (the_inv_into C m (h y)) else Inr (h y))", "by metis"], ["proof (state)\nthis:\n  f (h y) = f y\n\ngoal (1 subgoal):\n 1. \\<exists>f g G.\n       G = map_graph_fn G (f \\<circ> g) \\<and>\n       G = map_graph_fn G' f \\<and>\n       subgraph (map_graph_fn G g) G' \\<and>\n       standard' C G \\<and>\n       (\\<forall>r. maintained r G' \\<longrightarrow> maintained r G) \\<and>\n       (\\<forall>x y e.\n           x \\<in> vertices G' \\<longrightarrow>\n           y \\<in> vertices G' \\<longrightarrow>\n           (g (f x), g (f y))\n           \\<in> :map_graph_fn G g:\\<lbrakk>e\\<rbrakk> \\<longrightarrow>\n           (x, y) \\<in> :G':\\<lbrakk>e\\<rbrakk>)", "finally"], ["proof (chain)\npicking this:\n  (f \\<circ> g) (f y) = f y", "have \"(f o g) x = x\""], ["proof (prove)\nusing this:\n  (f \\<circ> g) (f y) = f y\n\ngoal (1 subgoal):\n 1. (f \\<circ> g) x = x", "unfolding y"], ["proof (prove)\nusing this:\n  (f \\<circ> g) x = x\n\ngoal (1 subgoal):\n 1. (f \\<circ> g) x = x", "."], ["proof (state)\nthis:\n  (f \\<circ> g) x = x\n\ngoal (1 subgoal):\n 1. \\<exists>f g G.\n       G = map_graph_fn G (f \\<circ> g) \\<and>\n       G = map_graph_fn G' f \\<and>\n       subgraph (map_graph_fn G g) G' \\<and>\n       standard' C G \\<and>\n       (\\<forall>r. maintained r G' \\<longrightarrow> maintained r G) \\<and>\n       (\\<forall>x y e.\n           x \\<in> vertices G' \\<longrightarrow>\n           y \\<in> vertices G' \\<longrightarrow>\n           (g (f x), g (f y))\n           \\<in> :map_graph_fn G g:\\<lbrakk>e\\<rbrakk> \\<longrightarrow>\n           (x, y) \\<in> :G':\\<lbrakk>e\\<rbrakk>)", "}"], ["proof (state)\nthis:\n  ?xa3 \\<in> vertices G \\<Longrightarrow> (f \\<circ> g) ?xa3 = ?xa3\n\ngoal (1 subgoal):\n 1. \\<exists>f g G.\n       G = map_graph_fn G (f \\<circ> g) \\<and>\n       G = map_graph_fn G' f \\<and>\n       subgraph (map_graph_fn G g) G' \\<and>\n       standard' C G \\<and>\n       (\\<forall>r. maintained r G' \\<longrightarrow> maintained r G) \\<and>\n       (\\<forall>x y e.\n           x \\<in> vertices G' \\<longrightarrow>\n           y \\<in> vertices G' \\<longrightarrow>\n           (g (f x), g (f y))\n           \\<in> :map_graph_fn G g:\\<lbrakk>e\\<rbrakk> \\<longrightarrow>\n           (x, y) \\<in> :G':\\<lbrakk>e\\<rbrakk>)", "note fg_id = this"], ["proof (state)\nthis:\n  ?xa3 \\<in> vertices G \\<Longrightarrow> (f \\<circ> g) ?xa3 = ?xa3\n\ngoal (1 subgoal):\n 1. \\<exists>f g G.\n       G = map_graph_fn G (f \\<circ> g) \\<and>\n       G = map_graph_fn G' f \\<and>\n       subgraph (map_graph_fn G g) G' \\<and>\n       standard' C G \\<and>\n       (\\<forall>r. maintained r G' \\<longrightarrow> maintained r G) \\<and>\n       (\\<forall>x y e.\n           x \\<in> vertices G' \\<longrightarrow>\n           y \\<in> vertices G' \\<longrightarrow>\n           (g (f x), g (f y))\n           \\<in> :map_graph_fn G g:\\<lbrakk>e\\<rbrakk> \\<longrightarrow>\n           (x, y) \\<in> :G':\\<lbrakk>e\\<rbrakk>)", "have fg_inv:\"map_graph_fn G (f o g) = G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map_graph_fn G (f \\<circ> g) = G", "using h(1) G_def f_def mg_eq map_graph_fn_comp"], ["proof (prove)\nusing this:\n  h \\<circ> h = h\n  G = map_graph_fn G' f\n  f \\<equiv>\n  (\\<lambda>x.\n      if x \\<in> m ` C then Inl (the_inv_into C m x) else Inr x) \\<circ>\n  h\n  map_graph_fn G' (g \\<circ> f) = map_graph_fn G' h\n  map_graph_fn ?G (?f \\<circ> ?g) = map_graph_fn (map_graph_fn ?G ?g) ?f\n\ngoal (1 subgoal):\n 1. map_graph_fn G (f \\<circ> g) = G", "by (metis (no_types, lifting))"], ["proof (state)\nthis:\n  map_graph_fn G (f \\<circ> g) = G\n\ngoal (1 subgoal):\n 1. \\<exists>f g G.\n       G = map_graph_fn G (f \\<circ> g) \\<and>\n       G = map_graph_fn G' f \\<and>\n       subgraph (map_graph_fn G g) G' \\<and>\n       standard' C G \\<and>\n       (\\<forall>r. maintained r G' \\<longrightarrow> maintained r G) \\<and>\n       (\\<forall>x y e.\n           x \\<in> vertices G' \\<longrightarrow>\n           y \\<in> vertices G' \\<longrightarrow>\n           (g (f x), g (f y))\n           \\<in> :map_graph_fn G g:\\<lbrakk>e\\<rbrakk> \\<longrightarrow>\n           (x, y) \\<in> :G':\\<lbrakk>e\\<rbrakk>)", "have ir:\"ident_rel S_Idt G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ident_rel S_Idt G", "unfolding set_eq_iff"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x.\n       (x \\<in> getRel S_Idt G) =\n       (x \\<in> (\\<lambda>x. (x, x)) ` vertices G)", "proof(standard,standard,goal_cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> getRel S_Idt G \\<Longrightarrow>\n       x \\<in> (\\<lambda>x. (x, x)) ` vertices G\n 2. \\<And>x.\n       x \\<in> (\\<lambda>x. (x, x)) ` vertices G \\<Longrightarrow>\n       x \\<in> getRel S_Idt G", "case (1 x)"], ["proof (state)\nthis:\n  x \\<in> getRel S_Idt G\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> getRel S_Idt G \\<Longrightarrow>\n       x \\<in> (\\<lambda>x. (x, x)) ` vertices G\n 2. \\<And>x.\n       x \\<in> (\\<lambda>x. (x, x)) ` vertices G \\<Longrightarrow>\n       x \\<in> getRel S_Idt G", "from this[unfolded G_def]"], ["proof (chain)\npicking this:\n  x \\<in> getRel S_Idt (map_graph_fn G' f)", "obtain v1 v2 where v:\"(v1,v2) \\<in> getRel S_Idt G'\" \"x = (f v1,f v2)\""], ["proof (prove)\nusing this:\n  x \\<in> getRel S_Idt (map_graph_fn G' f)\n\ngoal (1 subgoal):\n 1. (\\<And>v1 v2.\n        \\<lbrakk>(v1, v2) \\<in> getRel S_Idt G'; x = (f v1, f v2)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding getRel_def map_graph_def on_triple_def"], ["proof (prove)\nusing this:\n  x \\<in> {(x, y).\n           (S_Idt, x, y)\n           \\<in> edges\n                  (LG ({((l, s, t), l', s', t').\n                        l = l' \\<and>\n                        (s, s') \\<in> on_graph G' f \\<and>\n                        (t, t') \\<in> on_graph G' f} ``\n                       edges G')\n                    (on_graph G' f `` vertices G'))}\n\ngoal (1 subgoal):\n 1. (\\<And>v1 v2.\n        \\<lbrakk>(v1, v2) \\<in> {(x, y). (S_Idt, x, y) \\<in> edges G'};\n         x = (f v1, f v2)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  (v1, v2) \\<in> getRel S_Idt G'\n  x = (f v1, f v2)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> getRel S_Idt G \\<Longrightarrow>\n       x \\<in> (\\<lambda>x. (x, x)) ` vertices G\n 2. \\<And>x.\n       x \\<in> (\\<lambda>x. (x, x)) ` vertices G \\<Longrightarrow>\n       x \\<in> getRel S_Idt G", "hence vv:\"v1 \\<in> vertices G'\" \"v2 \\<in> vertices G'\""], ["proof (prove)\nusing this:\n  (v1, v2) \\<in> getRel S_Idt G'\n  x = (f v1, f v2)\n\ngoal (1 subgoal):\n 1. v1 \\<in> vertices G' &&& v2 \\<in> vertices G'", "using gr"], ["proof (prove)\nusing this:\n  (v1, v2) \\<in> getRel S_Idt G'\n  x = (f v1, f v2)\n  graph G'\n  fst ` edges G' \\<subseteq> L\n\ngoal (1 subgoal):\n 1. v1 \\<in> vertices G' &&& v2 \\<in> vertices G'", "unfolding getRel_def"], ["proof (prove)\nusing this:\n  (v1, v2) \\<in> {(x, y). (S_Idt, x, y) \\<in> edges G'}\n  x = (f v1, f v2)\n  graph G'\n  fst ` edges G' \\<subseteq> L\n\ngoal (1 subgoal):\n 1. v1 \\<in> vertices G' &&& v2 \\<in> vertices G'", "by auto"], ["proof (state)\nthis:\n  v1 \\<in> vertices G'\n  v2 \\<in> vertices G'\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> getRel S_Idt G \\<Longrightarrow>\n       x \\<in> (\\<lambda>x. (x, x)) ` vertices G\n 2. \\<And>x.\n       x \\<in> (\\<lambda>x. (x, x)) ` vertices G \\<Longrightarrow>\n       x \\<in> getRel S_Idt G", "with h(2) v(1)"], ["proof (chain)\npicking this:\n  ident_rel S_Idt (map_graph_fn G' h)\n  (v1, v2) \\<in> getRel S_Idt G'\n  v1 \\<in> vertices G'\n  v2 \\<in> vertices G'", "have \"h v1 = h v2\""], ["proof (prove)\nusing this:\n  ident_rel S_Idt (map_graph_fn G' h)\n  (v1, v2) \\<in> getRel S_Idt G'\n  v1 \\<in> vertices G'\n  v2 \\<in> vertices G'\n\ngoal (1 subgoal):\n 1. h v1 = h v2", "unfolding image_def"], ["proof (prove)\nusing this:\n  getRel S_Idt (map_graph_fn G' h) =\n  {y. \\<exists>x\\<in>vertices (map_graph_fn G' h). y = (x, x)}\n  (v1, v2) \\<in> getRel S_Idt G'\n  v1 \\<in> vertices G'\n  v2 \\<in> vertices G'\n\ngoal (1 subgoal):\n 1. h v1 = h v2", "by blast"], ["proof (state)\nthis:\n  h v1 = h v2\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> getRel S_Idt G \\<Longrightarrow>\n       x \\<in> (\\<lambda>x. (x, x)) ` vertices G\n 2. \\<And>x.\n       x \\<in> (\\<lambda>x. (x, x)) ` vertices G \\<Longrightarrow>\n       x \\<in> getRel S_Idt G", "hence x:\"x = (f v1,f v1)\""], ["proof (prove)\nusing this:\n  h v1 = h v2\n\ngoal (1 subgoal):\n 1. x = (f v1, f v1)", "unfolding f_def v"], ["proof (prove)\nusing this:\n  h v1 = h v2\n\ngoal (1 subgoal):\n 1. (((\\<lambda>x.\n          if x \\<in> m ` C then Inl (the_inv_into C m x) else Inr x) \\<circ>\n      h)\n      v1,\n     ((\\<lambda>x.\n          if x \\<in> m ` C then Inl (the_inv_into C m x) else Inr x) \\<circ>\n      h)\n      v2) =\n    (((\\<lambda>x.\n          if x \\<in> m ` C then Inl (the_inv_into C m x) else Inr x) \\<circ>\n      h)\n      v1,\n     ((\\<lambda>x.\n          if x \\<in> m ` C then Inl (the_inv_into C m x) else Inr x) \\<circ>\n      h)\n      v1)", "by auto"], ["proof (state)\nthis:\n  x = (f v1, f v1)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> getRel S_Idt G \\<Longrightarrow>\n       x \\<in> (\\<lambda>x. (x, x)) ` vertices G\n 2. \\<And>x.\n       x \\<in> (\\<lambda>x. (x, x)) ` vertices G \\<Longrightarrow>\n       x \\<in> getRel S_Idt G", "from vv(1)"], ["proof (chain)\npicking this:\n  v1 \\<in> vertices G'", "show ?case"], ["proof (prove)\nusing this:\n  v1 \\<in> vertices G'\n\ngoal (1 subgoal):\n 1. x \\<in> (\\<lambda>x. (x, x)) ` vertices G", "unfolding x G_def"], ["proof (prove)\nusing this:\n  v1 \\<in> vertices G'\n\ngoal (1 subgoal):\n 1. (f v1, f v1) \\<in> (\\<lambda>x. (x, x)) ` vertices (map_graph_fn G' f)", "by auto"], ["proof (state)\nthis:\n  x \\<in> (\\<lambda>x. (x, x)) ` vertices G\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> (\\<lambda>x. (x, x)) ` vertices G \\<Longrightarrow>\n       x \\<in> getRel S_Idt G", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> (\\<lambda>x. (x, x)) ` vertices G \\<Longrightarrow>\n       x \\<in> getRel S_Idt G", "case (2 x)"], ["proof (state)\nthis:\n  x \\<in> (\\<lambda>x. (x, x)) ` vertices G\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> (\\<lambda>x. (x, x)) ` vertices G \\<Longrightarrow>\n       x \\<in> getRel S_Idt G", "hence x:\"fst x = snd x\" \"fst x \\<in> vertices G\""], ["proof (prove)\nusing this:\n  x \\<in> (\\<lambda>x. (x, x)) ` vertices G\n\ngoal (1 subgoal):\n 1. fst x = snd x &&& fst x \\<in> vertices G", "by auto"], ["proof (state)\nthis:\n  fst x = snd x\n  fst x \\<in> vertices G\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> (\\<lambda>x. (x, x)) ` vertices G \\<Longrightarrow>\n       x \\<in> getRel S_Idt G", "hence \"(fst x) \\<in> f ` vertices G'\""], ["proof (prove)\nusing this:\n  fst x = snd x\n  fst x \\<in> vertices G\n\ngoal (1 subgoal):\n 1. fst x \\<in> f ` vertices G'", "unfolding G_def o_def"], ["proof (prove)\nusing this:\n  fst x = snd x\n  fst x \\<in> vertices (map_graph_fn G' f)\n\ngoal (1 subgoal):\n 1. fst x \\<in> f ` vertices G'", "by auto"], ["proof (state)\nthis:\n  fst x \\<in> f ` vertices G'\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> (\\<lambda>x. (x, x)) ` vertices G \\<Longrightarrow>\n       x \\<in> getRel S_Idt G", "then"], ["proof (chain)\npicking this:\n  fst x \\<in> f ` vertices G'", "obtain v where v:\"v \\<in> vertices G'\" \"f v = fst x\""], ["proof (prove)\nusing this:\n  fst x \\<in> f ` vertices G'\n\ngoal (1 subgoal):\n 1. (\\<And>v.\n        \\<lbrakk>v \\<in> vertices G'; f v = fst x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  v \\<in> vertices G'\n  f v = fst x\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> (\\<lambda>x. (x, x)) ` vertices G \\<Longrightarrow>\n       x \\<in> getRel S_Idt G", "hence hv:\"h v \\<in> vertices (map_graph_fn G' h)\""], ["proof (prove)\nusing this:\n  v \\<in> vertices G'\n  f v = fst x\n\ngoal (1 subgoal):\n 1. h v \\<in> vertices (map_graph_fn G' h)", "by simp"], ["proof (state)\nthis:\n  h v \\<in> vertices (map_graph_fn G' h)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> (\\<lambda>x. (x, x)) ` vertices G \\<Longrightarrow>\n       x \\<in> getRel S_Idt G", "hence \"(h v,h v) \\<in> getRel S_Idt (map_graph_fn G' h)\""], ["proof (prove)\nusing this:\n  h v \\<in> vertices (map_graph_fn G' h)\n\ngoal (1 subgoal):\n 1. (h v, h v) \\<in> getRel S_Idt (map_graph_fn G' h)", "unfolding h(2)"], ["proof (prove)\nusing this:\n  h v \\<in> vertices (map_graph_fn G' h)\n\ngoal (1 subgoal):\n 1. (h v, h v) \\<in> (\\<lambda>x. (x, x)) ` vertices (map_graph_fn G' h)", "by auto"], ["proof (state)\nthis:\n  (h v, h v) \\<in> getRel S_Idt (map_graph_fn G' h)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> (\\<lambda>x. (x, x)) ` vertices G \\<Longrightarrow>\n       x \\<in> getRel S_Idt G", "from getRel_hom[OF this hv hv]"], ["proof (chain)\npicking this:\n  (?f (h v), ?f (h v))\n  \\<in> getRel S_Idt (map_graph_fn (map_graph_fn G' h) ?f)", "have \"(?m' (h v),?m' (h v)) \\<in> getRel S_Idt (map_graph_fn G' (?m' o h))\""], ["proof (prove)\nusing this:\n  (?f (h v), ?f (h v))\n  \\<in> getRel S_Idt (map_graph_fn (map_graph_fn G' h) ?f)\n\ngoal (1 subgoal):\n 1. (if h v \\<in> m ` C then Inl (the_inv_into C m (h v)) else Inr (h v),\n     if h v \\<in> m ` C then Inl (the_inv_into C m (h v)) else Inr (h v))\n    \\<in> getRel S_Idt\n           (map_graph_fn G'\n             ((\\<lambda>x.\n                  if x \\<in> m ` C then Inl (the_inv_into C m x)\n                  else Inr x) \\<circ>\n              h))", "unfolding map_graph_fn_comp"], ["proof (prove)\nusing this:\n  (?f (h v), ?f (h v))\n  \\<in> getRel S_Idt (map_graph_fn (map_graph_fn G' h) ?f)\n\ngoal (1 subgoal):\n 1. (if h v \\<in> m ` C then Inl (the_inv_into C m (h v)) else Inr (h v),\n     if h v \\<in> m ` C then Inl (the_inv_into C m (h v)) else Inr (h v))\n    \\<in> getRel S_Idt\n           (map_graph_fn (map_graph_fn G' h)\n             (\\<lambda>x.\n                 if x \\<in> m ` C then Inl (the_inv_into C m x) else Inr x))", "by fast"], ["proof (state)\nthis:\n  (if h v \\<in> m ` C then Inl (the_inv_into C m (h v)) else Inr (h v),\n   if h v \\<in> m ` C then Inl (the_inv_into C m (h v)) else Inr (h v))\n  \\<in> getRel S_Idt\n         (map_graph_fn G'\n           ((\\<lambda>x.\n                if x \\<in> m ` C then Inl (the_inv_into C m x)\n                else Inr x) \\<circ>\n            h))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> (\\<lambda>x. (x, x)) ` vertices G \\<Longrightarrow>\n       x \\<in> getRel S_Idt G", "hence \"(f v,f v) \\<in> getRel S_Idt (map_graph_fn G' f)\""], ["proof (prove)\nusing this:\n  (if h v \\<in> m ` C then Inl (the_inv_into C m (h v)) else Inr (h v),\n   if h v \\<in> m ` C then Inl (the_inv_into C m (h v)) else Inr (h v))\n  \\<in> getRel S_Idt\n         (map_graph_fn G'\n           ((\\<lambda>x.\n                if x \\<in> m ` C then Inl (the_inv_into C m x)\n                else Inr x) \\<circ>\n            h))\n\ngoal (1 subgoal):\n 1. (f v, f v) \\<in> getRel S_Idt (map_graph_fn G' f)", "unfolding f_def"], ["proof (prove)\nusing this:\n  (if h v \\<in> m ` C then Inl (the_inv_into C m (h v)) else Inr (h v),\n   if h v \\<in> m ` C then Inl (the_inv_into C m (h v)) else Inr (h v))\n  \\<in> getRel S_Idt\n         (map_graph_fn G'\n           ((\\<lambda>x.\n                if x \\<in> m ` C then Inl (the_inv_into C m x)\n                else Inr x) \\<circ>\n            h))\n\ngoal (1 subgoal):\n 1. (((\\<lambda>x.\n          if x \\<in> m ` C then Inl (the_inv_into C m x) else Inr x) \\<circ>\n      h)\n      v,\n     ((\\<lambda>x.\n          if x \\<in> m ` C then Inl (the_inv_into C m x) else Inr x) \\<circ>\n      h)\n      v)\n    \\<in> getRel S_Idt\n           (map_graph_fn G'\n             ((\\<lambda>x.\n                  if x \\<in> m ` C then Inl (the_inv_into C m x)\n                  else Inr x) \\<circ>\n              h))", "by auto"], ["proof (state)\nthis:\n  (f v, f v) \\<in> getRel S_Idt (map_graph_fn G' f)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> (\\<lambda>x. (x, x)) ` vertices G \\<Longrightarrow>\n       x \\<in> getRel S_Idt G", "hence \"(fst x,snd x) \\<in> getRel S_Idt G\""], ["proof (prove)\nusing this:\n  (f v, f v) \\<in> getRel S_Idt (map_graph_fn G' f)\n\ngoal (1 subgoal):\n 1. (fst x, snd x) \\<in> getRel S_Idt G", "unfolding x v G_def"], ["proof (prove)\nusing this:\n  (snd x, snd x) \\<in> getRel S_Idt (map_graph_fn G' f)\n\ngoal (1 subgoal):\n 1. (snd x, snd x) \\<in> getRel S_Idt (map_graph_fn G' f)", "by auto"], ["proof (state)\nthis:\n  (fst x, snd x) \\<in> getRel S_Idt G\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> (\\<lambda>x. (x, x)) ` vertices G \\<Longrightarrow>\n       x \\<in> getRel S_Idt G", "thus ?case"], ["proof (prove)\nusing this:\n  (fst x, snd x) \\<in> getRel S_Idt G\n\ngoal (1 subgoal):\n 1. x \\<in> getRel S_Idt G", "unfolding G_def"], ["proof (prove)\nusing this:\n  (fst x, snd x) \\<in> getRel S_Idt (map_graph_fn G' f)\n\ngoal (1 subgoal):\n 1. x \\<in> getRel S_Idt (map_graph_fn G' f)", "by auto"], ["proof (state)\nthis:\n  x \\<in> getRel S_Idt G\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ident_rel S_Idt G\n\ngoal (1 subgoal):\n 1. \\<exists>f g G.\n       G = map_graph_fn G (f \\<circ> g) \\<and>\n       G = map_graph_fn G' f \\<and>\n       subgraph (map_graph_fn G g) G' \\<and>\n       standard' C G \\<and>\n       (\\<forall>r. maintained r G' \\<longrightarrow> maintained r G) \\<and>\n       (\\<forall>x y e.\n           x \\<in> vertices G' \\<longrightarrow>\n           y \\<in> vertices G' \\<longrightarrow>\n           (g (f x), g (f y))\n           \\<in> :map_graph_fn G g:\\<lbrakk>e\\<rbrakk> \\<longrightarrow>\n           (x, y) \\<in> :G':\\<lbrakk>e\\<rbrakk>)", "from tr[unfolded top_rule[OF gr(1)]]"], ["proof (chain)\npicking this:\n  vertices G' \\<times> vertices G' = getRel S_Top G'", "have tr0:\"getRel S_Top (map_graph_fn G' h)\n          = {(x,y). x \\<in> vertices (map_graph_fn G' h) \\<and> y \\<in> vertices (map_graph_fn G' h)}\"\n    and tr:\"getRel S_Top G = {(x, y). x \\<in> vertices G \\<and> y \\<in> vertices G}\""], ["proof (prove)\nusing this:\n  vertices G' \\<times> vertices G' = getRel S_Top G'\n\ngoal (1 subgoal):\n 1. getRel S_Top (map_graph_fn G' h) =\n    {(x, y).\n     x \\<in> vertices (map_graph_fn G' h) \\<and>\n     y \\<in> vertices (map_graph_fn G' h)} &&&\n    getRel S_Top G = {(x, y). x \\<in> vertices G \\<and> y \\<in> vertices G}", "unfolding G_def getRel_def on_triple_def map_graph_def"], ["proof (prove)\nusing this:\n  vertices G' \\<times> vertices G' = {(x, y). (S_Top, x, y) \\<in> edges G'}\n\ngoal (1 subgoal):\n 1. {(x, y).\n     (S_Top, x, y)\n     \\<in> edges\n            (LG ({((l, s, t), l', s', t').\n                  l = l' \\<and>\n                  (s, s') \\<in> on_graph G' h \\<and>\n                  (t, t') \\<in> on_graph G' h} ``\n                 edges G')\n              (on_graph G' h `` vertices G'))} =\n    {(x, y).\n     x \\<in> vertices\n              (LG ({((l, s, t), l', s', t').\n                    l = l' \\<and>\n                    (s, s') \\<in> on_graph G' h \\<and>\n                    (t, t') \\<in> on_graph G' h} ``\n                   edges G')\n                (on_graph G' h `` vertices G')) \\<and>\n     y \\<in> vertices\n              (LG ({((l, s, t), l', s', t').\n                    l = l' \\<and>\n                    (s, s') \\<in> on_graph G' h \\<and>\n                    (t, t') \\<in> on_graph G' h} ``\n                   edges G')\n                (on_graph G' h `` vertices G'))} &&&\n    {(x, y).\n     (S_Top, x, y)\n     \\<in> edges\n            (LG ({((l, s, t), l', s', t').\n                  l = l' \\<and>\n                  (s, s') \\<in> on_graph G' f \\<and>\n                  (t, t') \\<in> on_graph G' f} ``\n                 edges G')\n              (on_graph G' f `` vertices G'))} =\n    {(x, y).\n     x \\<in> vertices\n              (LG ({((l, s, t), l', s', t').\n                    l = l' \\<and>\n                    (s, s') \\<in> on_graph G' f \\<and>\n                    (t, t') \\<in> on_graph G' f} ``\n                   edges G')\n                (on_graph G' f `` vertices G')) \\<and>\n     y \\<in> vertices\n              (LG ({((l, s, t), l', s', t').\n                    l = l' \\<and>\n                    (s, s') \\<in> on_graph G' f \\<and>\n                    (t, t') \\<in> on_graph G' f} ``\n                   edges G')\n                (on_graph G' f `` vertices G'))}", "by auto"], ["proof (state)\nthis:\n  getRel S_Top (map_graph_fn G' h) =\n  {(x, y).\n   x \\<in> vertices (map_graph_fn G' h) \\<and>\n   y \\<in> vertices (map_graph_fn G' h)}\n  getRel S_Top G = {(x, y). x \\<in> vertices G \\<and> y \\<in> vertices G}\n\ngoal (1 subgoal):\n 1. \\<exists>f g G.\n       G = map_graph_fn G (f \\<circ> g) \\<and>\n       G = map_graph_fn G' f \\<and>\n       subgraph (map_graph_fn G g) G' \\<and>\n       standard' C G \\<and>\n       (\\<forall>r. maintained r G' \\<longrightarrow> maintained r G) \\<and>\n       (\\<forall>x y e.\n           x \\<in> vertices G' \\<longrightarrow>\n           y \\<in> vertices G' \\<longrightarrow>\n           (g (f x), g (f y))\n           \\<in> :map_graph_fn G g:\\<lbrakk>e\\<rbrakk> \\<longrightarrow>\n           (x, y) \\<in> :G':\\<lbrakk>e\\<rbrakk>)", "have m:\"\\<And> x. x \\<in> C \\<Longrightarrow> {(m x, m x)} = getRel (S_Const x) (map_graph_fn G' h)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> C \\<Longrightarrow>\n       {(m x, m x)} = getRel (S_Const x) (map_graph_fn G' h)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> C \\<Longrightarrow>\n       {(m x, m x)} \\<subseteq> getRel (S_Const x) (map_graph_fn G' h)\n 2. \\<And>x.\n       x \\<in> C \\<Longrightarrow>\n       getRel (S_Const x) (map_graph_fn G' h) \\<subseteq> {(m x, m x)}", "fix x"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> C \\<Longrightarrow>\n       {(m x, m x)} \\<subseteq> getRel (S_Const x) (map_graph_fn G' h)\n 2. \\<And>x.\n       x \\<in> C \\<Longrightarrow>\n       getRel (S_Const x) (map_graph_fn G' h) \\<subseteq> {(m x, m x)}", "assume x:\"x \\<in> C\""], ["proof (state)\nthis:\n  x \\<in> C\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> C \\<Longrightarrow>\n       {(m x, m x)} \\<subseteq> getRel (S_Const x) (map_graph_fn G' h)\n 2. \\<And>x.\n       x \\<in> C \\<Longrightarrow>\n       getRel (S_Const x) (map_graph_fn G' h) \\<subseteq> {(m x, m x)}", "{"], ["proof (state)\nthis:\n  x \\<in> C\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> C \\<Longrightarrow>\n       {(m x, m x)} \\<subseteq> getRel (S_Const x) (map_graph_fn G' h)\n 2. \\<And>x.\n       x \\<in> C \\<Longrightarrow>\n       getRel (S_Const x) (map_graph_fn G' h) \\<subseteq> {(m x, m x)}", "fix y z"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> C \\<Longrightarrow>\n       {(m x, m x)} \\<subseteq> getRel (S_Const x) (map_graph_fn G' h)\n 2. \\<And>x.\n       x \\<in> C \\<Longrightarrow>\n       getRel (S_Const x) (map_graph_fn G' h) \\<subseteq> {(m x, m x)}", "assume a:\"(y,z) \\<in> getRel (S_Const x) (map_graph_fn G' h)\""], ["proof (state)\nthis:\n  (y, z) \\<in> getRel (S_Const x) (map_graph_fn G' h)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> C \\<Longrightarrow>\n       {(m x, m x)} \\<subseteq> getRel (S_Const x) (map_graph_fn G' h)\n 2. \\<And>x.\n       x \\<in> C \\<Longrightarrow>\n       getRel (S_Const x) (map_graph_fn G' h) \\<subseteq> {(m x, m x)}", "let ?t = \"getRel S_Top (map_graph_fn G' h)\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> C \\<Longrightarrow>\n       {(m x, m x)} \\<subseteq> getRel (S_Const x) (map_graph_fn G' h)\n 2. \\<And>x.\n       x \\<in> C \\<Longrightarrow>\n       getRel (S_Const x) (map_graph_fn G' h) \\<subseteq> {(m x, m x)}", "let ?r = \"getRel (S_Const x) (map_graph_fn G' h)\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> C \\<Longrightarrow>\n       {(m x, m x)} \\<subseteq> getRel (S_Const x) (map_graph_fn G' h)\n 2. \\<And>x.\n       x \\<in> C \\<Longrightarrow>\n       getRel (S_Const x) (map_graph_fn G' h) \\<subseteq> {(m x, m x)}", "have mx:\"(m x,m x) \\<in> getRel (S_Const x) (map_graph_fn G' h)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (m x, m x) \\<in> getRel (S_Const x) (map_graph_fn G' h)", "using m x"], ["proof (prove)\nusing this:\n  ?x1 \\<in> C \\<Longrightarrow>\n  (m ?x1, m ?x1) \\<in> getRel (S_Const ?x1) (map_graph_fn G' h)\n  x \\<in> C\n\ngoal (1 subgoal):\n 1. (m x, m x) \\<in> getRel (S_Const x) (map_graph_fn G' h)", "by auto"], ["proof (state)\nthis:\n  (m x, m x) \\<in> getRel (S_Const x) (map_graph_fn G' h)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> C \\<Longrightarrow>\n       {(m x, m x)} \\<subseteq> getRel (S_Const x) (map_graph_fn G' h)\n 2. \\<And>x.\n       x \\<in> C \\<Longrightarrow>\n       getRel (S_Const x) (map_graph_fn G' h) \\<subseteq> {(m x, m x)}", "with a"], ["proof (chain)\npicking this:\n  (y, z) \\<in> getRel (S_Const x) (map_graph_fn G' h)\n  (m x, m x) \\<in> getRel (S_Const x) (map_graph_fn G' h)", "have v:\"y \\<in> vertices (map_graph_fn G' h)\"\n                    \"z \\<in> vertices (map_graph_fn G' h)\"\n                    \"m x \\<in> vertices (map_graph_fn G' h)\""], ["proof (prove)\nusing this:\n  (y, z) \\<in> getRel (S_Const x) (map_graph_fn G' h)\n  (m x, m x) \\<in> getRel (S_Const x) (map_graph_fn G' h)\n\ngoal (1 subgoal):\n 1. y \\<in> vertices (map_graph_fn G' h) &&&\n    z \\<in> vertices (map_graph_fn G' h) &&&\n    m x \\<in> vertices (map_graph_fn G' h)", "unfolding getRel_def"], ["proof (prove)\nusing this:\n  (y, z) \\<in> {(x, y). (S_Const x, x, y) \\<in> edges (map_graph_fn G' h)}\n  (m x, m x)\n  \\<in> {(x, y). (S_Const x, x, y) \\<in> edges (map_graph_fn G' h)}\n\ngoal (1 subgoal):\n 1. y \\<in> vertices (map_graph_fn G' h) &&&\n    z \\<in> vertices (map_graph_fn G' h) &&&\n    m x \\<in> vertices (map_graph_fn G' h)", "by force+"], ["proof (state)\nthis:\n  y \\<in> vertices (map_graph_fn G' h)\n  z \\<in> vertices (map_graph_fn G' h)\n  m x \\<in> vertices (map_graph_fn G' h)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> C \\<Longrightarrow>\n       {(m x, m x)} \\<subseteq> getRel (S_Const x) (map_graph_fn G' h)\n 2. \\<And>x.\n       x \\<in> C \\<Longrightarrow>\n       getRel (S_Const x) (map_graph_fn G' h) \\<subseteq> {(m x, m x)}", "with tr0"], ["proof (chain)\npicking this:\n  getRel S_Top (map_graph_fn G' h) =\n  {(x, y).\n   x \\<in> vertices (map_graph_fn G' h) \\<and>\n   y \\<in> vertices (map_graph_fn G' h)}\n  y \\<in> vertices (map_graph_fn G' h)\n  z \\<in> vertices (map_graph_fn G' h)\n  m x \\<in> vertices (map_graph_fn G' h)", "have \"(m x,y) \\<in> ?t\" \"(z,m x) \\<in> ?t\""], ["proof (prove)\nusing this:\n  getRel S_Top (map_graph_fn G' h) =\n  {(x, y).\n   x \\<in> vertices (map_graph_fn G' h) \\<and>\n   y \\<in> vertices (map_graph_fn G' h)}\n  y \\<in> vertices (map_graph_fn G' h)\n  z \\<in> vertices (map_graph_fn G' h)\n  m x \\<in> vertices (map_graph_fn G' h)\n\ngoal (1 subgoal):\n 1. (m x, y) \\<in> getRel S_Top (map_graph_fn G' h) &&&\n    (z, m x) \\<in> getRel S_Top (map_graph_fn G' h)", "by auto"], ["proof (state)\nthis:\n  (m x, y) \\<in> getRel S_Top (map_graph_fn G' h)\n  (z, m x) \\<in> getRel S_Top (map_graph_fn G' h)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> C \\<Longrightarrow>\n       {(m x, m x)} \\<subseteq> getRel (S_Const x) (map_graph_fn G' h)\n 2. \\<And>x.\n       x \\<in> C \\<Longrightarrow>\n       getRel (S_Const x) (map_graph_fn G' h) \\<subseteq> {(m x, m x)}", "with a mx"], ["proof (chain)\npicking this:\n  (y, z) \\<in> getRel (S_Const x) (map_graph_fn G' h)\n  (m x, m x) \\<in> getRel (S_Const x) (map_graph_fn G' h)\n  (m x, y) \\<in> getRel S_Top (map_graph_fn G' h)\n  (z, m x) \\<in> getRel S_Top (map_graph_fn G' h)", "have lhs:\"(m x,z) \\<in> ?r O ?t O ?r\" \"(y,m x) \\<in> ?r O ?t O ?r\""], ["proof (prove)\nusing this:\n  (y, z) \\<in> getRel (S_Const x) (map_graph_fn G' h)\n  (m x, m x) \\<in> getRel (S_Const x) (map_graph_fn G' h)\n  (m x, y) \\<in> getRel S_Top (map_graph_fn G' h)\n  (z, m x) \\<in> getRel S_Top (map_graph_fn G' h)\n\ngoal (1 subgoal):\n 1. (m x, z)\n    \\<in> getRel (S_Const x) (map_graph_fn G' h) O\n          getRel S_Top (map_graph_fn G' h) O\n          getRel (S_Const x) (map_graph_fn G' h) &&&\n    (y, m x)\n    \\<in> getRel (S_Const x) (map_graph_fn G' h) O\n          getRel S_Top (map_graph_fn G' h) O\n          getRel (S_Const x) (map_graph_fn G' h)", "by auto"], ["proof (state)\nthis:\n  (m x, z)\n  \\<in> getRel (S_Const x) (map_graph_fn G' h) O\n        getRel S_Top (map_graph_fn G' h) O\n        getRel (S_Const x) (map_graph_fn G' h)\n  (y, m x)\n  \\<in> getRel (S_Const x) (map_graph_fn G' h) O\n        getRel S_Top (map_graph_fn G' h) O\n        getRel (S_Const x) (map_graph_fn G' h)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> C \\<Longrightarrow>\n       {(m x, m x)} \\<subseteq> getRel (S_Const x) (map_graph_fn G' h)\n 2. \\<And>x.\n       x \\<in> C \\<Longrightarrow>\n       getRel (S_Const x) (map_graph_fn G' h) \\<subseteq> {(m x, m x)}", "from x mnt"], ["proof (chain)\npicking this:\n  x \\<in> C\n  maintainedA\n   (constant_rules C \\<union> identity_rules L \\<union>\n    {top_rule S_Top, nonempty_rule})\n   G'", "have \"maintained (const_exists_rev x) G'\"\n                  and \"maintained (const_prop x) G'\""], ["proof (prove)\nusing this:\n  x \\<in> C\n  maintainedA\n   (constant_rules C \\<union> identity_rules L \\<union>\n    {top_rule S_Top, nonempty_rule})\n   G'\n\ngoal (1 subgoal):\n 1. maintained (const_exists_rev x) G' &&& maintained (const_prop x) G'", "unfolding constant_rules_def"], ["proof (prove)\nusing this:\n  x \\<in> C\n  maintainedA\n   (const_exists ` C \\<union> const_exists_rev ` C \\<union>\n    const_prop ` C \\<union>\n    {const_disj c\\<^sub>1 c\\<^sub>2 |c\\<^sub>1 c\\<^sub>2.\n     c\\<^sub>1 \\<in> C \\<and>\n     c\\<^sub>2 \\<in> C \\<and> c\\<^sub>1 \\<noteq> c\\<^sub>2} \\<union>\n    identity_rules L \\<union>\n    {top_rule S_Top, nonempty_rule})\n   G'\n\ngoal (1 subgoal):\n 1. maintained (const_exists_rev x) G' &&& maintained (const_prop x) G'", "by blast+"], ["proof (state)\nthis:\n  maintained (const_exists_rev x) G'\n  maintained (const_prop x) G'\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> C \\<Longrightarrow>\n       {(m x, m x)} \\<subseteq> getRel (S_Const x) (map_graph_fn G' h)\n 2. \\<And>x.\n       x \\<in> C \\<Longrightarrow>\n       getRel (S_Const x) (map_graph_fn G' h) \\<subseteq> {(m x, m x)}", "hence cr6:\"maintained (const_exists_rev x) (map_graph_fn G' h)\"\n        and cr7:\"maintained (const_prop x) (map_graph_fn G' h)\""], ["proof (prove)\nusing this:\n  maintained (const_exists_rev x) G'\n  maintained (const_prop x) G'\n\ngoal (1 subgoal):\n 1. maintained (const_exists_rev x) (map_graph_fn G' h) &&&\n    maintained (const_prop x) (map_graph_fn G' h)", "by (intro mg, force)+"], ["proof (state)\nthis:\n  maintained (const_exists_rev x) (map_graph_fn G' h)\n  maintained (const_prop x) (map_graph_fn G' h)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> C \\<Longrightarrow>\n       {(m x, m x)} \\<subseteq> getRel (S_Const x) (map_graph_fn G' h)\n 2. \\<And>x.\n       x \\<in> C \\<Longrightarrow>\n       getRel (S_Const x) (map_graph_fn G' h) \\<subseteq> {(m x, m x)}", "hence \"(m x,z) \\<in> getRel S_Idt (map_graph_fn G' h)\"\n            \"(y,m x) \\<in> getRel S_Idt (map_graph_fn G' h)\""], ["proof (prove)\nusing this:\n  maintained (const_exists_rev x) (map_graph_fn G' h)\n  maintained (const_prop x) (map_graph_fn G' h)\n\ngoal (1 subgoal):\n 1. (m x, z) \\<in> getRel S_Idt (map_graph_fn G' h) &&&\n    (y, m x) \\<in> getRel S_Idt (map_graph_fn G' h)", "using lhs"], ["proof (prove)\nusing this:\n  maintained (const_exists_rev x) (map_graph_fn G' h)\n  maintained (const_prop x) (map_graph_fn G' h)\n  (m x, z)\n  \\<in> getRel (S_Const x) (map_graph_fn G' h) O\n        getRel S_Top (map_graph_fn G' h) O\n        getRel (S_Const x) (map_graph_fn G' h)\n  (y, m x)\n  \\<in> getRel (S_Const x) (map_graph_fn G' h) O\n        getRel S_Top (map_graph_fn G' h) O\n        getRel (S_Const x) (map_graph_fn G' h)\n\ngoal (1 subgoal):\n 1. (m x, z) \\<in> getRel S_Idt (map_graph_fn G' h) &&&\n    (y, m x) \\<in> getRel S_Idt (map_graph_fn G' h)", "unfolding maintained_holds_subset_iff[OF map_graph_fn_graphI]\n                  const_exists_rev_def const_prop_def"], ["proof (prove)\nusing this:\n  :map_graph_fn G'\n    h:\\<lbrakk>A_Cmp (A_Cmp (A_Lbl (S_Const x)) \\<top>)\n                (A_Lbl (S_Const x))\\<rbrakk>\n  \\<subseteq> :map_graph_fn G' h:\\<lbrakk>A_Lbl (S_Const x)\\<rbrakk>\n  :map_graph_fn G' h:\\<lbrakk>A_Lbl (S_Const x)\\<rbrakk>\n  \\<subseteq> :map_graph_fn G' h:\\<lbrakk>\\<one>\\<rbrakk>\n  (m x, z)\n  \\<in> getRel (S_Const x) (map_graph_fn G' h) O\n        getRel S_Top (map_graph_fn G' h) O\n        getRel (S_Const x) (map_graph_fn G' h)\n  (y, m x)\n  \\<in> getRel (S_Const x) (map_graph_fn G' h) O\n        getRel S_Top (map_graph_fn G' h) O\n        getRel (S_Const x) (map_graph_fn G' h)\n\ngoal (1 subgoal):\n 1. (m x, z) \\<in> getRel S_Idt (map_graph_fn G' h) &&&\n    (y, m x) \\<in> getRel S_Idt (map_graph_fn G' h)", "by auto"], ["proof (state)\nthis:\n  (m x, z) \\<in> getRel S_Idt (map_graph_fn G' h)\n  (y, m x) \\<in> getRel S_Idt (map_graph_fn G' h)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> C \\<Longrightarrow>\n       {(m x, m x)} \\<subseteq> getRel (S_Const x) (map_graph_fn G' h)\n 2. \\<And>x.\n       x \\<in> C \\<Longrightarrow>\n       getRel (S_Const x) (map_graph_fn G' h) \\<subseteq> {(m x, m x)}", "hence \"y = m x\" \"z = m x\""], ["proof (prove)\nusing this:\n  (m x, z) \\<in> getRel S_Idt (map_graph_fn G' h)\n  (y, m x) \\<in> getRel S_Idt (map_graph_fn G' h)\n\ngoal (1 subgoal):\n 1. y = m x &&& z = m x", "using h(2)"], ["proof (prove)\nusing this:\n  (m x, z) \\<in> getRel S_Idt (map_graph_fn G' h)\n  (y, m x) \\<in> getRel S_Idt (map_graph_fn G' h)\n  ident_rel S_Idt (map_graph_fn G' h)\n\ngoal (1 subgoal):\n 1. y = m x &&& z = m x", "by auto"], ["proof (state)\nthis:\n  y = m x\n  z = m x\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> C \\<Longrightarrow>\n       {(m x, m x)} \\<subseteq> getRel (S_Const x) (map_graph_fn G' h)\n 2. \\<And>x.\n       x \\<in> C \\<Longrightarrow>\n       getRel (S_Const x) (map_graph_fn G' h) \\<subseteq> {(m x, m x)}", "}"], ["proof (state)\nthis:\n  (?y3, ?z3) \\<in> getRel (S_Const x) (map_graph_fn G' h) \\<Longrightarrow>\n  ?y3 = m x\n  (?y3, ?z3) \\<in> getRel (S_Const x) (map_graph_fn G' h) \\<Longrightarrow>\n  ?z3 = m x\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> C \\<Longrightarrow>\n       {(m x, m x)} \\<subseteq> getRel (S_Const x) (map_graph_fn G' h)\n 2. \\<And>x.\n       x \\<in> C \\<Longrightarrow>\n       getRel (S_Const x) (map_graph_fn G' h) \\<subseteq> {(m x, m x)}", "thus \"getRel (S_Const x) (map_graph_fn G' h) \\<subseteq> {(m x, m x)}\""], ["proof (prove)\nusing this:\n  (?y3, ?z3) \\<in> getRel (S_Const x) (map_graph_fn G' h) \\<Longrightarrow>\n  ?y3 = m x\n  (?y3, ?z3) \\<in> getRel (S_Const x) (map_graph_fn G' h) \\<Longrightarrow>\n  ?z3 = m x\n\ngoal (1 subgoal):\n 1. getRel (S_Const x) (map_graph_fn G' h) \\<subseteq> {(m x, m x)}", "by auto"], ["proof (state)\nthis:\n  getRel (S_Const x) (map_graph_fn G' h) \\<subseteq> {(m x, m x)}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> C \\<Longrightarrow>\n       {(m x, m x)} \\<subseteq> getRel (S_Const x) (map_graph_fn G' h)", "qed (insert m,auto)"], ["proof (state)\nthis:\n  ?x1 \\<in> C \\<Longrightarrow>\n  {(m ?x1, m ?x1)} = getRel (S_Const ?x1) (map_graph_fn G' h)\n\ngoal (1 subgoal):\n 1. \\<exists>f g G.\n       G = map_graph_fn G (f \\<circ> g) \\<and>\n       G = map_graph_fn G' f \\<and>\n       subgraph (map_graph_fn G g) G' \\<and>\n       standard' C G \\<and>\n       (\\<forall>r. maintained r G' \\<longrightarrow> maintained r G) \\<and>\n       (\\<forall>x y e.\n           x \\<in> vertices G' \\<longrightarrow>\n           y \\<in> vertices G' \\<longrightarrow>\n           (g (f x), g (f y))\n           \\<in> :map_graph_fn G g:\\<lbrakk>e\\<rbrakk> \\<longrightarrow>\n           (x, y) \\<in> :G':\\<lbrakk>e\\<rbrakk>)", "from mg_eq"], ["proof (chain)\npicking this:\n  map_graph_fn G' (g \\<circ> f) = map_graph_fn G' h", "have mg_eq:\"map_graph_fn G g = map_graph_fn G' h\""], ["proof (prove)\nusing this:\n  map_graph_fn G' (g \\<circ> f) = map_graph_fn G' h\n\ngoal (1 subgoal):\n 1. map_graph_fn G g = map_graph_fn G' h", "unfolding G_def map_graph_fn_comp"], ["proof (prove)\nusing this:\n  map_graph_fn (map_graph_fn G' f) g = map_graph_fn G' h\n\ngoal (1 subgoal):\n 1. map_graph_fn (map_graph_fn G' f) g = map_graph_fn G' h", "."], ["proof (state)\nthis:\n  map_graph_fn G g = map_graph_fn G' h\n\ngoal (1 subgoal):\n 1. \\<exists>f g G.\n       G = map_graph_fn G (f \\<circ> g) \\<and>\n       G = map_graph_fn G' f \\<and>\n       subgraph (map_graph_fn G g) G' \\<and>\n       standard' C G \\<and>\n       (\\<forall>r. maintained r G' \\<longrightarrow> maintained r G) \\<and>\n       (\\<forall>x y e.\n           x \\<in> vertices G' \\<longrightarrow>\n           y \\<in> vertices G' \\<longrightarrow>\n           (g (f x), g (f y))\n           \\<in> :map_graph_fn G g:\\<lbrakk>e\\<rbrakk> \\<longrightarrow>\n           (x, y) \\<in> :G':\\<lbrakk>e\\<rbrakk>)", "{"], ["proof (state)\nthis:\n  map_graph_fn G g = map_graph_fn G' h\n\ngoal (1 subgoal):\n 1. \\<exists>f g G.\n       G = map_graph_fn G (f \\<circ> g) \\<and>\n       G = map_graph_fn G' f \\<and>\n       subgraph (map_graph_fn G g) G' \\<and>\n       standard' C G \\<and>\n       (\\<forall>r. maintained r G' \\<longrightarrow> maintained r G) \\<and>\n       (\\<forall>x y e.\n           x \\<in> vertices G' \\<longrightarrow>\n           y \\<in> vertices G' \\<longrightarrow>\n           (g (f x), g (f y))\n           \\<in> :map_graph_fn G g:\\<lbrakk>e\\<rbrakk> \\<longrightarrow>\n           (x, y) \\<in> :G':\\<lbrakk>e\\<rbrakk>)", "fix l"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>f g G.\n       G = map_graph_fn G (f \\<circ> g) \\<and>\n       G = map_graph_fn G' f \\<and>\n       subgraph (map_graph_fn G g) G' \\<and>\n       standard' C G \\<and>\n       (\\<forall>r. maintained r G' \\<longrightarrow> maintained r G) \\<and>\n       (\\<forall>x y e.\n           x \\<in> vertices G' \\<longrightarrow>\n           y \\<in> vertices G' \\<longrightarrow>\n           (g (f x), g (f y))\n           \\<in> :map_graph_fn G g:\\<lbrakk>e\\<rbrakk> \\<longrightarrow>\n           (x, y) \\<in> :G':\\<lbrakk>e\\<rbrakk>)", "fix v::\"'V + 'V'\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>f g G.\n       G = map_graph_fn G (f \\<circ> g) \\<and>\n       G = map_graph_fn G' f \\<and>\n       subgraph (map_graph_fn G g) G' \\<and>\n       standard' C G \\<and>\n       (\\<forall>r. maintained r G' \\<longrightarrow> maintained r G) \\<and>\n       (\\<forall>x y e.\n           x \\<in> vertices G' \\<longrightarrow>\n           y \\<in> vertices G' \\<longrightarrow>\n           (g (f x), g (f y))\n           \\<in> :map_graph_fn G g:\\<lbrakk>e\\<rbrakk> \\<longrightarrow>\n           (x, y) \\<in> :G':\\<lbrakk>e\\<rbrakk>)", "assume a:\"(l, v)\\<in>(\\<lambda>c. (S_Const c, Inl c)) ` C\""], ["proof (state)\nthis:\n  (l, v) \\<in> (\\<lambda>c. (S_Const c, Inl c)) ` C\n\ngoal (1 subgoal):\n 1. \\<exists>f g G.\n       G = map_graph_fn G (f \\<circ> g) \\<and>\n       G = map_graph_fn G' f \\<and>\n       subgraph (map_graph_fn G g) G' \\<and>\n       standard' C G \\<and>\n       (\\<forall>r. maintained r G' \\<longrightarrow> maintained r G) \\<and>\n       (\\<forall>x y e.\n           x \\<in> vertices G' \\<longrightarrow>\n           y \\<in> vertices G' \\<longrightarrow>\n           (g (f x), g (f y))\n           \\<in> :map_graph_fn G g:\\<lbrakk>e\\<rbrakk> \\<longrightarrow>\n           (x, y) \\<in> :G':\\<lbrakk>e\\<rbrakk>)", "hence \"getRel l G = {(v, v)}\""], ["proof (prove)\nusing this:\n  (l, v) \\<in> (\\<lambda>c. (S_Const c, Inl c)) ` C\n\ngoal (1 subgoal):\n 1. getRel l G = {(v, v)}", "using m"], ["proof (prove)\nusing this:\n  (l, v) \\<in> (\\<lambda>c. (S_Const c, Inl c)) ` C\n  ?x1 \\<in> C \\<Longrightarrow>\n  {(m ?x1, m ?x1)} = getRel (S_Const ?x1) (map_graph_fn G' h)\n\ngoal (1 subgoal):\n 1. getRel l G = {(v, v)}", "proof(cases l)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<lbrakk>(l, v) \\<in> (\\<lambda>c. (S_Const c, Inl c)) ` C;\n     \\<And>x.\n        x \\<in> C \\<Longrightarrow>\n        {(m x, m x)} = getRel (S_Const x) (map_graph_fn G' h);\n     l = S_Top\\<rbrakk>\n    \\<Longrightarrow> getRel l G = {(v, v)}\n 2. \\<lbrakk>(l, v) \\<in> (\\<lambda>c. (S_Const c, Inl c)) ` C;\n     \\<And>x.\n        x \\<in> C \\<Longrightarrow>\n        {(m x, m x)} = getRel (S_Const x) (map_graph_fn G' h);\n     l = S_Bot\\<rbrakk>\n    \\<Longrightarrow> getRel l G = {(v, v)}\n 3. \\<lbrakk>(l, v) \\<in> (\\<lambda>c. (S_Const c, Inl c)) ` C;\n     \\<And>x.\n        x \\<in> C \\<Longrightarrow>\n        {(m x, m x)} = getRel (S_Const x) (map_graph_fn G' h);\n     l = S_Idt\\<rbrakk>\n    \\<Longrightarrow> getRel l G = {(v, v)}\n 4. \\<And>x4.\n       \\<lbrakk>(l, v) \\<in> (\\<lambda>c. (S_Const c, Inl c)) ` C;\n        \\<And>x.\n           x \\<in> C \\<Longrightarrow>\n           {(m x, m x)} = getRel (S_Const x) (map_graph_fn G' h);\n        l = S_Const x4\\<rbrakk>\n       \\<Longrightarrow> getRel l G = {(v, v)}", "case (S_Const x)"], ["proof (state)\nthis:\n  l = S_Const x\n\ngoal (4 subgoals):\n 1. \\<lbrakk>(l, v) \\<in> (\\<lambda>c. (S_Const c, Inl c)) ` C;\n     \\<And>x.\n        x \\<in> C \\<Longrightarrow>\n        {(m x, m x)} = getRel (S_Const x) (map_graph_fn G' h);\n     l = S_Top\\<rbrakk>\n    \\<Longrightarrow> getRel l G = {(v, v)}\n 2. \\<lbrakk>(l, v) \\<in> (\\<lambda>c. (S_Const c, Inl c)) ` C;\n     \\<And>x.\n        x \\<in> C \\<Longrightarrow>\n        {(m x, m x)} = getRel (S_Const x) (map_graph_fn G' h);\n     l = S_Bot\\<rbrakk>\n    \\<Longrightarrow> getRel l G = {(v, v)}\n 3. \\<lbrakk>(l, v) \\<in> (\\<lambda>c. (S_Const c, Inl c)) ` C;\n     \\<And>x.\n        x \\<in> C \\<Longrightarrow>\n        {(m x, m x)} = getRel (S_Const x) (map_graph_fn G' h);\n     l = S_Idt\\<rbrakk>\n    \\<Longrightarrow> getRel l G = {(v, v)}\n 4. \\<And>x4.\n       \\<lbrakk>(l, v) \\<in> (\\<lambda>c. (S_Const c, Inl c)) ` C;\n        \\<And>x.\n           x \\<in> C \\<Longrightarrow>\n           {(m x, m x)} = getRel (S_Const x) (map_graph_fn G' h);\n        l = S_Const x4\\<rbrakk>\n       \\<Longrightarrow> getRel l G = {(v, v)}", "hence x:\"l = S_Const x\" \"v = Inl x\" \"x \\<in> C\""], ["proof (prove)\nusing this:\n  l = S_Const x\n\ngoal (1 subgoal):\n 1. l = S_Const x &&& v = Inl x &&& x \\<in> C", "using a"], ["proof (prove)\nusing this:\n  l = S_Const x\n  (l, v) \\<in> (\\<lambda>c. (S_Const c, Inl c)) ` C\n\ngoal (1 subgoal):\n 1. l = S_Const x &&& v = Inl x &&& x \\<in> C", "by auto"], ["proof (state)\nthis:\n  l = S_Const x\n  v = Inl x\n  x \\<in> C\n\ngoal (4 subgoals):\n 1. \\<lbrakk>(l, v) \\<in> (\\<lambda>c. (S_Const c, Inl c)) ` C;\n     \\<And>x.\n        x \\<in> C \\<Longrightarrow>\n        {(m x, m x)} = getRel (S_Const x) (map_graph_fn G' h);\n     l = S_Top\\<rbrakk>\n    \\<Longrightarrow> getRel l G = {(v, v)}\n 2. \\<lbrakk>(l, v) \\<in> (\\<lambda>c. (S_Const c, Inl c)) ` C;\n     \\<And>x.\n        x \\<in> C \\<Longrightarrow>\n        {(m x, m x)} = getRel (S_Const x) (map_graph_fn G' h);\n     l = S_Bot\\<rbrakk>\n    \\<Longrightarrow> getRel l G = {(v, v)}\n 3. \\<lbrakk>(l, v) \\<in> (\\<lambda>c. (S_Const c, Inl c)) ` C;\n     \\<And>x.\n        x \\<in> C \\<Longrightarrow>\n        {(m x, m x)} = getRel (S_Const x) (map_graph_fn G' h);\n     l = S_Idt\\<rbrakk>\n    \\<Longrightarrow> getRel l G = {(v, v)}\n 4. \\<And>x4.\n       \\<lbrakk>(l, v) \\<in> (\\<lambda>c. (S_Const c, Inl c)) ` C;\n        \\<And>x.\n           x \\<in> C \\<Longrightarrow>\n           {(m x, m x)} = getRel (S_Const x) (map_graph_fn G' h);\n        l = S_Const x4\\<rbrakk>\n       \\<Longrightarrow> getRel l G = {(v, v)}", "hence mx:\"m x \\<in> m ` C\""], ["proof (prove)\nusing this:\n  l = S_Const x\n  v = Inl x\n  x \\<in> C\n\ngoal (1 subgoal):\n 1. m x \\<in> m ` C", "by auto"], ["proof (state)\nthis:\n  m x \\<in> m ` C\n\ngoal (4 subgoals):\n 1. \\<lbrakk>(l, v) \\<in> (\\<lambda>c. (S_Const c, Inl c)) ` C;\n     \\<And>x.\n        x \\<in> C \\<Longrightarrow>\n        {(m x, m x)} = getRel (S_Const x) (map_graph_fn G' h);\n     l = S_Top\\<rbrakk>\n    \\<Longrightarrow> getRel l G = {(v, v)}\n 2. \\<lbrakk>(l, v) \\<in> (\\<lambda>c. (S_Const c, Inl c)) ` C;\n     \\<And>x.\n        x \\<in> C \\<Longrightarrow>\n        {(m x, m x)} = getRel (S_Const x) (map_graph_fn G' h);\n     l = S_Bot\\<rbrakk>\n    \\<Longrightarrow> getRel l G = {(v, v)}\n 3. \\<lbrakk>(l, v) \\<in> (\\<lambda>c. (S_Const c, Inl c)) ` C;\n     \\<And>x.\n        x \\<in> C \\<Longrightarrow>\n        {(m x, m x)} = getRel (S_Const x) (map_graph_fn G' h);\n     l = S_Idt\\<rbrakk>\n    \\<Longrightarrow> getRel l G = {(v, v)}\n 4. \\<And>x4.\n       \\<lbrakk>(l, v) \\<in> (\\<lambda>c. (S_Const c, Inl c)) ` C;\n        \\<And>x.\n           x \\<in> C \\<Longrightarrow>\n           {(m x, m x)} = getRel (S_Const x) (map_graph_fn G' h);\n        l = S_Const x4\\<rbrakk>\n       \\<Longrightarrow> getRel l G = {(v, v)}", "from m[OF x(3)]"], ["proof (chain)\npicking this:\n  {(m x, m x)} = getRel (S_Const x) (map_graph_fn G' h)", "have \"(m x,m x) \\<in> getRel (S_Const x) (map_graph_fn G' h)\""], ["proof (prove)\nusing this:\n  {(m x, m x)} = getRel (S_Const x) (map_graph_fn G' h)\n\ngoal (1 subgoal):\n 1. (m x, m x) \\<in> getRel (S_Const x) (map_graph_fn G' h)", "by auto"], ["proof (state)\nthis:\n  (m x, m x) \\<in> getRel (S_Const x) (map_graph_fn G' h)\n\ngoal (4 subgoals):\n 1. \\<lbrakk>(l, v) \\<in> (\\<lambda>c. (S_Const c, Inl c)) ` C;\n     \\<And>x.\n        x \\<in> C \\<Longrightarrow>\n        {(m x, m x)} = getRel (S_Const x) (map_graph_fn G' h);\n     l = S_Top\\<rbrakk>\n    \\<Longrightarrow> getRel l G = {(v, v)}\n 2. \\<lbrakk>(l, v) \\<in> (\\<lambda>c. (S_Const c, Inl c)) ` C;\n     \\<And>x.\n        x \\<in> C \\<Longrightarrow>\n        {(m x, m x)} = getRel (S_Const x) (map_graph_fn G' h);\n     l = S_Bot\\<rbrakk>\n    \\<Longrightarrow> getRel l G = {(v, v)}\n 3. \\<lbrakk>(l, v) \\<in> (\\<lambda>c. (S_Const c, Inl c)) ` C;\n     \\<And>x.\n        x \\<in> C \\<Longrightarrow>\n        {(m x, m x)} = getRel (S_Const x) (map_graph_fn G' h);\n     l = S_Idt\\<rbrakk>\n    \\<Longrightarrow> getRel l G = {(v, v)}\n 4. \\<And>x4.\n       \\<lbrakk>(l, v) \\<in> (\\<lambda>c. (S_Const c, Inl c)) ` C;\n        \\<And>x.\n           x \\<in> C \\<Longrightarrow>\n           {(m x, m x)} = getRel (S_Const x) (map_graph_fn G' h);\n        l = S_Const x4\\<rbrakk>\n       \\<Longrightarrow> getRel l G = {(v, v)}", "hence \"(S_Const x,m x,m x) \\<in> edges (map_graph_fn G' h)\""], ["proof (prove)\nusing this:\n  (m x, m x) \\<in> getRel (S_Const x) (map_graph_fn G' h)\n\ngoal (1 subgoal):\n 1. (S_Const x, m x, m x) \\<in> edges (map_graph_fn G' h)", "unfolding getRel_def"], ["proof (prove)\nusing this:\n  (m x, m x)\n  \\<in> {(x, y). (S_Const x, x, y) \\<in> edges (map_graph_fn G' h)}\n\ngoal (1 subgoal):\n 1. (S_Const x, m x, m x) \\<in> edges (map_graph_fn G' h)", "by auto"], ["proof (state)\nthis:\n  (S_Const x, m x, m x) \\<in> edges (map_graph_fn G' h)\n\ngoal (4 subgoals):\n 1. \\<lbrakk>(l, v) \\<in> (\\<lambda>c. (S_Const c, Inl c)) ` C;\n     \\<And>x.\n        x \\<in> C \\<Longrightarrow>\n        {(m x, m x)} = getRel (S_Const x) (map_graph_fn G' h);\n     l = S_Top\\<rbrakk>\n    \\<Longrightarrow> getRel l G = {(v, v)}\n 2. \\<lbrakk>(l, v) \\<in> (\\<lambda>c. (S_Const c, Inl c)) ` C;\n     \\<And>x.\n        x \\<in> C \\<Longrightarrow>\n        {(m x, m x)} = getRel (S_Const x) (map_graph_fn G' h);\n     l = S_Bot\\<rbrakk>\n    \\<Longrightarrow> getRel l G = {(v, v)}\n 3. \\<lbrakk>(l, v) \\<in> (\\<lambda>c. (S_Const c, Inl c)) ` C;\n     \\<And>x.\n        x \\<in> C \\<Longrightarrow>\n        {(m x, m x)} = getRel (S_Const x) (map_graph_fn G' h);\n     l = S_Idt\\<rbrakk>\n    \\<Longrightarrow> getRel l G = {(v, v)}\n 4. \\<And>x4.\n       \\<lbrakk>(l, v) \\<in> (\\<lambda>c. (S_Const c, Inl c)) ` C;\n        \\<And>x.\n           x \\<in> C \\<Longrightarrow>\n           {(m x, m x)} = getRel (S_Const x) (map_graph_fn G' h);\n        l = S_Const x4\\<rbrakk>\n       \\<Longrightarrow> getRel l G = {(v, v)}", "hence \"m x \\<in> vertices (map_graph_fn G' h)\""], ["proof (prove)\nusing this:\n  (S_Const x, m x, m x) \\<in> edges (map_graph_fn G' h)\n\ngoal (1 subgoal):\n 1. m x \\<in> vertices (map_graph_fn G' h)", "unfolding map_graph_def Image_def"], ["proof (prove)\nusing this:\n  (S_Const x, m x, m x)\n  \\<in> edges\n         (LG {y. \\<exists>x\\<in>edges G'.\n                    (x, y) \\<in> on_triple (on_graph G' h)}\n           {y. \\<exists>x\\<in>vertices G'. (x, y) \\<in> on_graph G' h})\n\ngoal (1 subgoal):\n 1. m x\n    \\<in> vertices\n           (LG {y. \\<exists>x\\<in>edges G'.\n                      (x, y) \\<in> on_triple (on_graph G' h)}\n             {y. \\<exists>x\\<in>vertices G'. (x, y) \\<in> on_graph G' h})", "by auto"], ["proof (state)\nthis:\n  m x \\<in> vertices (map_graph_fn G' h)\n\ngoal (4 subgoals):\n 1. \\<lbrakk>(l, v) \\<in> (\\<lambda>c. (S_Const c, Inl c)) ` C;\n     \\<And>x.\n        x \\<in> C \\<Longrightarrow>\n        {(m x, m x)} = getRel (S_Const x) (map_graph_fn G' h);\n     l = S_Top\\<rbrakk>\n    \\<Longrightarrow> getRel l G = {(v, v)}\n 2. \\<lbrakk>(l, v) \\<in> (\\<lambda>c. (S_Const c, Inl c)) ` C;\n     \\<And>x.\n        x \\<in> C \\<Longrightarrow>\n        {(m x, m x)} = getRel (S_Const x) (map_graph_fn G' h);\n     l = S_Bot\\<rbrakk>\n    \\<Longrightarrow> getRel l G = {(v, v)}\n 3. \\<lbrakk>(l, v) \\<in> (\\<lambda>c. (S_Const c, Inl c)) ` C;\n     \\<And>x.\n        x \\<in> C \\<Longrightarrow>\n        {(m x, m x)} = getRel (S_Const x) (map_graph_fn G' h);\n     l = S_Idt\\<rbrakk>\n    \\<Longrightarrow> getRel l G = {(v, v)}\n 4. \\<And>x4.\n       \\<lbrakk>(l, v) \\<in> (\\<lambda>c. (S_Const c, Inl c)) ` C;\n        \\<And>x.\n           x \\<in> C \\<Longrightarrow>\n           {(m x, m x)} = getRel (S_Const x) (map_graph_fn G' h);\n        l = S_Const x4\\<rbrakk>\n       \\<Longrightarrow> getRel l G = {(v, v)}", "then"], ["proof (chain)\npicking this:\n  m x \\<in> vertices (map_graph_fn G' h)", "obtain x' where x':\"m x = h x'\" \"x' \\<in> vertices G'\""], ["proof (prove)\nusing this:\n  m x \\<in> vertices (map_graph_fn G' h)\n\ngoal (1 subgoal):\n 1. (\\<And>x'.\n        \\<lbrakk>m x = h x'; x' \\<in> vertices G'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  m x = h x'\n  x' \\<in> vertices G'\n\ngoal (4 subgoals):\n 1. \\<lbrakk>(l, v) \\<in> (\\<lambda>c. (S_Const c, Inl c)) ` C;\n     \\<And>x.\n        x \\<in> C \\<Longrightarrow>\n        {(m x, m x)} = getRel (S_Const x) (map_graph_fn G' h);\n     l = S_Top\\<rbrakk>\n    \\<Longrightarrow> getRel l G = {(v, v)}\n 2. \\<lbrakk>(l, v) \\<in> (\\<lambda>c. (S_Const c, Inl c)) ` C;\n     \\<And>x.\n        x \\<in> C \\<Longrightarrow>\n        {(m x, m x)} = getRel (S_Const x) (map_graph_fn G' h);\n     l = S_Bot\\<rbrakk>\n    \\<Longrightarrow> getRel l G = {(v, v)}\n 3. \\<lbrakk>(l, v) \\<in> (\\<lambda>c. (S_Const c, Inl c)) ` C;\n     \\<And>x.\n        x \\<in> C \\<Longrightarrow>\n        {(m x, m x)} = getRel (S_Const x) (map_graph_fn G' h);\n     l = S_Idt\\<rbrakk>\n    \\<Longrightarrow> getRel l G = {(v, v)}\n 4. \\<And>x4.\n       \\<lbrakk>(l, v) \\<in> (\\<lambda>c. (S_Const c, Inl c)) ` C;\n        \\<And>x.\n           x \\<in> C \\<Longrightarrow>\n           {(m x, m x)} = getRel (S_Const x) (map_graph_fn G' h);\n        l = S_Const x4\\<rbrakk>\n       \\<Longrightarrow> getRel l G = {(v, v)}", "from h(1)"], ["proof (chain)\npicking this:\n  h \\<circ> h = h", "have hmx[simp]:\"h (m x) = m x\""], ["proof (prove)\nusing this:\n  h \\<circ> h = h\n\ngoal (1 subgoal):\n 1. h (m x) = m x", "unfolding x' o_def"], ["proof (prove)\nusing this:\n  (\\<lambda>x. h (h x)) = h\n\ngoal (1 subgoal):\n 1. h (h x') = h x'", "by metis"], ["proof (state)\nthis:\n  h (m x) = m x\n\ngoal (4 subgoals):\n 1. \\<lbrakk>(l, v) \\<in> (\\<lambda>c. (S_Const c, Inl c)) ` C;\n     \\<And>x.\n        x \\<in> C \\<Longrightarrow>\n        {(m x, m x)} = getRel (S_Const x) (map_graph_fn G' h);\n     l = S_Top\\<rbrakk>\n    \\<Longrightarrow> getRel l G = {(v, v)}\n 2. \\<lbrakk>(l, v) \\<in> (\\<lambda>c. (S_Const c, Inl c)) ` C;\n     \\<And>x.\n        x \\<in> C \\<Longrightarrow>\n        {(m x, m x)} = getRel (S_Const x) (map_graph_fn G' h);\n     l = S_Bot\\<rbrakk>\n    \\<Longrightarrow> getRel l G = {(v, v)}\n 3. \\<lbrakk>(l, v) \\<in> (\\<lambda>c. (S_Const c, Inl c)) ` C;\n     \\<And>x.\n        x \\<in> C \\<Longrightarrow>\n        {(m x, m x)} = getRel (S_Const x) (map_graph_fn G' h);\n     l = S_Idt\\<rbrakk>\n    \\<Longrightarrow> getRel l G = {(v, v)}\n 4. \\<And>x4.\n       \\<lbrakk>(l, v) \\<in> (\\<lambda>c. (S_Const c, Inl c)) ` C;\n        \\<And>x.\n           x \\<in> C \\<Longrightarrow>\n           {(m x, m x)} = getRel (S_Const x) (map_graph_fn G' h);\n        l = S_Const x4\\<rbrakk>\n       \\<Longrightarrow> getRel l G = {(v, v)}", "hence fmx:\"f (m x) = v\""], ["proof (prove)\nusing this:\n  h (m x) = m x\n\ngoal (1 subgoal):\n 1. f (m x) = v", "unfolding x f_def"], ["proof (prove)\nusing this:\n  h (m x) = m x\n\ngoal (1 subgoal):\n 1. ((\\<lambda>x.\n         if x \\<in> m ` C then Inl (the_inv_into C m x) else Inr x) \\<circ>\n     h)\n     (m x) =\n    Inl x", "using the_inv_into_f_f[OF inj_m] inj_m[unfolded inj_on_def,rule_format,OF x(3)] mx"], ["proof (prove)\nusing this:\n  h (m x) = m x\n  ?x \\<in> C \\<Longrightarrow> the_inv_into C m (m ?x) = ?x\n  \\<lbrakk>?y \\<in> C; m x = m ?y\\<rbrakk> \\<Longrightarrow> x = ?y\n  m x \\<in> m ` C\n\ngoal (1 subgoal):\n 1. ((\\<lambda>x.\n         if x \\<in> m ` C then Inl (the_inv_into C m x) else Inr x) \\<circ>\n     h)\n     (m x) =\n    Inl x", "by auto"], ["proof (state)\nthis:\n  f (m x) = v\n\ngoal (4 subgoals):\n 1. \\<lbrakk>(l, v) \\<in> (\\<lambda>c. (S_Const c, Inl c)) ` C;\n     \\<And>x.\n        x \\<in> C \\<Longrightarrow>\n        {(m x, m x)} = getRel (S_Const x) (map_graph_fn G' h);\n     l = S_Top\\<rbrakk>\n    \\<Longrightarrow> getRel l G = {(v, v)}\n 2. \\<lbrakk>(l, v) \\<in> (\\<lambda>c. (S_Const c, Inl c)) ` C;\n     \\<And>x.\n        x \\<in> C \\<Longrightarrow>\n        {(m x, m x)} = getRel (S_Const x) (map_graph_fn G' h);\n     l = S_Bot\\<rbrakk>\n    \\<Longrightarrow> getRel l G = {(v, v)}\n 3. \\<lbrakk>(l, v) \\<in> (\\<lambda>c. (S_Const c, Inl c)) ` C;\n     \\<And>x.\n        x \\<in> C \\<Longrightarrow>\n        {(m x, m x)} = getRel (S_Const x) (map_graph_fn G' h);\n     l = S_Idt\\<rbrakk>\n    \\<Longrightarrow> getRel l G = {(v, v)}\n 4. \\<And>x4.\n       \\<lbrakk>(l, v) \\<in> (\\<lambda>c. (S_Const c, Inl c)) ` C;\n        \\<And>x.\n           x \\<in> C \\<Longrightarrow>\n           {(m x, m x)} = getRel (S_Const x) (map_graph_fn G' h);\n        l = S_Const x4\\<rbrakk>\n       \\<Longrightarrow> getRel l G = {(v, v)}", "have \"{(f (m x), f (m x))} = getRel l (map_graph_fn G (f \\<circ> g))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {(f (m x), f (m x))} = getRel l (map_graph_fn G (f \\<circ> g))", "unfolding map_graph_fn_comp getRel_hom_map[OF map_graph_fn_graphI]\n                  m[OF x(3),folded mg_eq x(1),symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. {(f (m x), f (m x))} = map_prod f f ` {(m x, m x)}", "by auto"], ["proof (state)\nthis:\n  {(f (m x), f (m x))} = getRel l (map_graph_fn G (f \\<circ> g))\n\ngoal (4 subgoals):\n 1. \\<lbrakk>(l, v) \\<in> (\\<lambda>c. (S_Const c, Inl c)) ` C;\n     \\<And>x.\n        x \\<in> C \\<Longrightarrow>\n        {(m x, m x)} = getRel (S_Const x) (map_graph_fn G' h);\n     l = S_Top\\<rbrakk>\n    \\<Longrightarrow> getRel l G = {(v, v)}\n 2. \\<lbrakk>(l, v) \\<in> (\\<lambda>c. (S_Const c, Inl c)) ` C;\n     \\<And>x.\n        x \\<in> C \\<Longrightarrow>\n        {(m x, m x)} = getRel (S_Const x) (map_graph_fn G' h);\n     l = S_Bot\\<rbrakk>\n    \\<Longrightarrow> getRel l G = {(v, v)}\n 3. \\<lbrakk>(l, v) \\<in> (\\<lambda>c. (S_Const c, Inl c)) ` C;\n     \\<And>x.\n        x \\<in> C \\<Longrightarrow>\n        {(m x, m x)} = getRel (S_Const x) (map_graph_fn G' h);\n     l = S_Idt\\<rbrakk>\n    \\<Longrightarrow> getRel l G = {(v, v)}\n 4. \\<And>x4.\n       \\<lbrakk>(l, v) \\<in> (\\<lambda>c. (S_Const c, Inl c)) ` C;\n        \\<And>x.\n           x \\<in> C \\<Longrightarrow>\n           {(m x, m x)} = getRel (S_Const x) (map_graph_fn G' h);\n        l = S_Const x4\\<rbrakk>\n       \\<Longrightarrow> getRel l G = {(v, v)}", "hence gr:\"getRel l G = {(f (m x), f (m x))}\""], ["proof (prove)\nusing this:\n  {(f (m x), f (m x))} = getRel l (map_graph_fn G (f \\<circ> g))\n\ngoal (1 subgoal):\n 1. getRel l G = {(f (m x), f (m x))}", "unfolding fg_inv"], ["proof (prove)\nusing this:\n  {(f (m x), f (m x))} = getRel l G\n\ngoal (1 subgoal):\n 1. getRel l G = {(f (m x), f (m x))}", "by blast"], ["proof (state)\nthis:\n  getRel l G = {(f (m x), f (m x))}\n\ngoal (4 subgoals):\n 1. \\<lbrakk>(l, v) \\<in> (\\<lambda>c. (S_Const c, Inl c)) ` C;\n     \\<And>x.\n        x \\<in> C \\<Longrightarrow>\n        {(m x, m x)} = getRel (S_Const x) (map_graph_fn G' h);\n     l = S_Top\\<rbrakk>\n    \\<Longrightarrow> getRel l G = {(v, v)}\n 2. \\<lbrakk>(l, v) \\<in> (\\<lambda>c. (S_Const c, Inl c)) ` C;\n     \\<And>x.\n        x \\<in> C \\<Longrightarrow>\n        {(m x, m x)} = getRel (S_Const x) (map_graph_fn G' h);\n     l = S_Bot\\<rbrakk>\n    \\<Longrightarrow> getRel l G = {(v, v)}\n 3. \\<lbrakk>(l, v) \\<in> (\\<lambda>c. (S_Const c, Inl c)) ` C;\n     \\<And>x.\n        x \\<in> C \\<Longrightarrow>\n        {(m x, m x)} = getRel (S_Const x) (map_graph_fn G' h);\n     l = S_Idt\\<rbrakk>\n    \\<Longrightarrow> getRel l G = {(v, v)}\n 4. \\<And>x4.\n       \\<lbrakk>(l, v) \\<in> (\\<lambda>c. (S_Const c, Inl c)) ` C;\n        \\<And>x.\n           x \\<in> C \\<Longrightarrow>\n           {(m x, m x)} = getRel (S_Const x) (map_graph_fn G' h);\n        l = S_Const x4\\<rbrakk>\n       \\<Longrightarrow> getRel l G = {(v, v)}", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. getRel l G = {(v, v)}", "unfolding gr fmx"], ["proof (prove)\ngoal (1 subgoal):\n 1. {(v, v)} = {(v, v)}", "by (fact refl)"], ["proof (state)\nthis:\n  getRel l G = {(v, v)}\n\ngoal (3 subgoals):\n 1. \\<lbrakk>(l, v) \\<in> (\\<lambda>c. (S_Const c, Inl c)) ` C;\n     \\<And>x.\n        x \\<in> C \\<Longrightarrow>\n        {(m x, m x)} = getRel (S_Const x) (map_graph_fn G' h);\n     l = S_Top\\<rbrakk>\n    \\<Longrightarrow> getRel l G = {(v, v)}\n 2. \\<lbrakk>(l, v) \\<in> (\\<lambda>c. (S_Const c, Inl c)) ` C;\n     \\<And>x.\n        x \\<in> C \\<Longrightarrow>\n        {(m x, m x)} = getRel (S_Const x) (map_graph_fn G' h);\n     l = S_Bot\\<rbrakk>\n    \\<Longrightarrow> getRel l G = {(v, v)}\n 3. \\<lbrakk>(l, v) \\<in> (\\<lambda>c. (S_Const c, Inl c)) ` C;\n     \\<And>x.\n        x \\<in> C \\<Longrightarrow>\n        {(m x, m x)} = getRel (S_Const x) (map_graph_fn G' h);\n     l = S_Idt\\<rbrakk>\n    \\<Longrightarrow> getRel l G = {(v, v)}", "qed auto"], ["proof (state)\nthis:\n  getRel l G = {(v, v)}\n\ngoal (1 subgoal):\n 1. \\<exists>f g G.\n       G = map_graph_fn G (f \\<circ> g) \\<and>\n       G = map_graph_fn G' f \\<and>\n       subgraph (map_graph_fn G g) G' \\<and>\n       standard' C G \\<and>\n       (\\<forall>r. maintained r G' \\<longrightarrow> maintained r G) \\<and>\n       (\\<forall>x y e.\n           x \\<in> vertices G' \\<longrightarrow>\n           y \\<in> vertices G' \\<longrightarrow>\n           (g (f x), g (f y))\n           \\<in> :map_graph_fn G g:\\<lbrakk>e\\<rbrakk> \\<longrightarrow>\n           (x, y) \\<in> :G':\\<lbrakk>e\\<rbrakk>)", "}"], ["proof (state)\nthis:\n  (?l3, ?v3) \\<in> (\\<lambda>c. (S_Const c, Inl c)) ` C \\<Longrightarrow>\n  getRel ?l3 G = {(?v3, ?v3)}\n\ngoal (1 subgoal):\n 1. \\<exists>f g G.\n       G = map_graph_fn G (f \\<circ> g) \\<and>\n       G = map_graph_fn G' f \\<and>\n       subgraph (map_graph_fn G g) G' \\<and>\n       standard' C G \\<and>\n       (\\<forall>r. maintained r G' \\<longrightarrow> maintained r G) \\<and>\n       (\\<forall>x y e.\n           x \\<in> vertices G' \\<longrightarrow>\n           y \\<in> vertices G' \\<longrightarrow>\n           (g (f x), g (f y))\n           \\<in> :map_graph_fn G g:\\<lbrakk>e\\<rbrakk> \\<longrightarrow>\n           (x, y) \\<in> :G':\\<lbrakk>e\\<rbrakk>)", "note cr = this"], ["proof (state)\nthis:\n  (?l3, ?v3) \\<in> (\\<lambda>c. (S_Const c, Inl c)) ` C \\<Longrightarrow>\n  getRel ?l3 G = {(?v3, ?v3)}\n\ngoal (1 subgoal):\n 1. \\<exists>f g G.\n       G = map_graph_fn G (f \\<circ> g) \\<and>\n       G = map_graph_fn G' f \\<and>\n       subgraph (map_graph_fn G g) G' \\<and>\n       standard' C G \\<and>\n       (\\<forall>r. maintained r G' \\<longrightarrow> maintained r G) \\<and>\n       (\\<forall>x y e.\n           x \\<in> vertices G' \\<longrightarrow>\n           y \\<in> vertices G' \\<longrightarrow>\n           (g (f x), g (f y))\n           \\<in> :map_graph_fn G g:\\<lbrakk>e\\<rbrakk> \\<longrightarrow>\n           (x, y) \\<in> :G':\\<lbrakk>e\\<rbrakk>)", "have sg:\"subgraph (map_graph_fn G g) G'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subgraph (map_graph_fn G g) G'", "unfolding mg_eq"], ["proof (prove)\ngoal (1 subgoal):\n 1. subgraph (map_graph_fn G' h) G'", "using h(3)"], ["proof (prove)\nusing this:\n  subgraph (map_graph_fn G' h) G'\n\ngoal (1 subgoal):\n 1. subgraph (map_graph_fn G' h) G'", "."], ["proof (state)\nthis:\n  subgraph (map_graph_fn G g) G'\n\ngoal (1 subgoal):\n 1. \\<exists>f g G.\n       G = map_graph_fn G (f \\<circ> g) \\<and>\n       G = map_graph_fn G' f \\<and>\n       subgraph (map_graph_fn G g) G' \\<and>\n       standard' C G \\<and>\n       (\\<forall>r. maintained r G' \\<longrightarrow> maintained r G) \\<and>\n       (\\<forall>x y e.\n           x \\<in> vertices G' \\<longrightarrow>\n           y \\<in> vertices G' \\<longrightarrow>\n           (g (f x), g (f y))\n           \\<in> :map_graph_fn G g:\\<lbrakk>e\\<rbrakk> \\<longrightarrow>\n           (x, y) \\<in> :G':\\<lbrakk>e\\<rbrakk>)", "have std:\"standard' C G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. standard' C G", "unfolding standard_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. graph G \\<and>\n    vertices G \\<noteq> {} \\<and>\n    ident_rel S_Idt G \\<and>\n    getRel S_Bot G = {} \\<and>\n    getRel S_Top G =\n    {(x, y). x \\<in> vertices G \\<and> y \\<in> vertices G} \\<and>\n    (\\<forall>(l, v)\\<in>(\\<lambda>c. (S_Const c, Inl c)) ` C.\n        getRel l G = {(v, v)})", "using G ir tr cr"], ["proof (prove)\nusing this:\n  graph G\n  f x \\<in> vertices G\n  getRel S_Bot G = {}\n  ident_rel S_Idt G\n  getRel S_Top G = {(x, y). x \\<in> vertices G \\<and> y \\<in> vertices G}\n  (?l3, ?v3) \\<in> (\\<lambda>c. (S_Const c, Inl c)) ` C \\<Longrightarrow>\n  getRel ?l3 G = {(?v3, ?v3)}\n\ngoal (1 subgoal):\n 1. graph G \\<and>\n    vertices G \\<noteq> {} \\<and>\n    ident_rel S_Idt G \\<and>\n    getRel S_Bot G = {} \\<and>\n    getRel S_Top G =\n    {(x, y). x \\<in> vertices G \\<and> y \\<in> vertices G} \\<and>\n    (\\<forall>(l, v)\\<in>(\\<lambda>c. (S_Const c, Inl c)) ` C.\n        getRel l G = {(v, v)})", "by blast"], ["proof (state)\nthis:\n  standard' C G\n\ngoal (1 subgoal):\n 1. \\<exists>f g G.\n       G = map_graph_fn G (f \\<circ> g) \\<and>\n       G = map_graph_fn G' f \\<and>\n       subgraph (map_graph_fn G g) G' \\<and>\n       standard' C G \\<and>\n       (\\<forall>r. maintained r G' \\<longrightarrow> maintained r G) \\<and>\n       (\\<forall>x y e.\n           x \\<in> vertices G' \\<longrightarrow>\n           y \\<in> vertices G' \\<longrightarrow>\n           (g (f x), g (f y))\n           \\<in> :map_graph_fn G g:\\<lbrakk>e\\<rbrakk> \\<longrightarrow>\n           (x, y) \\<in> :G':\\<lbrakk>e\\<rbrakk>)", "have mtd:\"\\<And>r. maintained r G' \\<Longrightarrow> maintained r G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>r. maintained r G' \\<Longrightarrow> maintained r G", "proof(goal_cases)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>r. maintained r G' \\<Longrightarrow> maintained r G", "case (1 r)"], ["proof (state)\nthis:\n  maintained r G'\n\ngoal (1 subgoal):\n 1. \\<And>r. maintained r G' \\<Longrightarrow> maintained r G", "from mg[OF 1,folded mg_eq] maintained_preserved_by_isomorphism[OF fg_id G(1)]"], ["proof (chain)\npicking this:\n  maintained r (map_graph_fn G g)\n  \\<lbrakk>\\<And>x. x \\<in> vertices G \\<Longrightarrow> x \\<in> vertices G;\n   maintained ?r (map_graph_fn G g)\\<rbrakk>\n  \\<Longrightarrow> maintained ?r G", "show ?case"], ["proof (prove)\nusing this:\n  maintained r (map_graph_fn G g)\n  \\<lbrakk>\\<And>x. x \\<in> vertices G \\<Longrightarrow> x \\<in> vertices G;\n   maintained ?r (map_graph_fn G g)\\<rbrakk>\n  \\<Longrightarrow> maintained ?r G\n\ngoal (1 subgoal):\n 1. maintained r G", "by metis"], ["proof (state)\nthis:\n  maintained r G\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  maintained ?r1 G' \\<Longrightarrow> maintained ?r1 G\n\ngoal (1 subgoal):\n 1. \\<exists>f g G.\n       G = map_graph_fn G (f \\<circ> g) \\<and>\n       G = map_graph_fn G' f \\<and>\n       subgraph (map_graph_fn G g) G' \\<and>\n       standard' C G \\<and>\n       (\\<forall>r. maintained r G' \\<longrightarrow> maintained r G) \\<and>\n       (\\<forall>x y e.\n           x \\<in> vertices G' \\<longrightarrow>\n           y \\<in> vertices G' \\<longrightarrow>\n           (g (f x), g (f y))\n           \\<in> :map_graph_fn G g:\\<lbrakk>e\\<rbrakk> \\<longrightarrow>\n           (x, y) \\<in> :G':\\<lbrakk>e\\<rbrakk>)", "{"], ["proof (state)\nthis:\n  maintained ?r1 G' \\<Longrightarrow> maintained ?r1 G\n\ngoal (1 subgoal):\n 1. \\<exists>f g G.\n       G = map_graph_fn G (f \\<circ> g) \\<and>\n       G = map_graph_fn G' f \\<and>\n       subgraph (map_graph_fn G g) G' \\<and>\n       standard' C G \\<and>\n       (\\<forall>r. maintained r G' \\<longrightarrow> maintained r G) \\<and>\n       (\\<forall>x y e.\n           x \\<in> vertices G' \\<longrightarrow>\n           y \\<in> vertices G' \\<longrightarrow>\n           (g (f x), g (f y))\n           \\<in> :map_graph_fn G g:\\<lbrakk>e\\<rbrakk> \\<longrightarrow>\n           (x, y) \\<in> :G':\\<lbrakk>e\\<rbrakk>)", "fix x y e"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>f g G.\n       G = map_graph_fn G (f \\<circ> g) \\<and>\n       G = map_graph_fn G' f \\<and>\n       subgraph (map_graph_fn G g) G' \\<and>\n       standard' C G \\<and>\n       (\\<forall>r. maintained r G' \\<longrightarrow> maintained r G) \\<and>\n       (\\<forall>x y e.\n           x \\<in> vertices G' \\<longrightarrow>\n           y \\<in> vertices G' \\<longrightarrow>\n           (g (f x), g (f y))\n           \\<in> :map_graph_fn G g:\\<lbrakk>e\\<rbrakk> \\<longrightarrow>\n           (x, y) \\<in> :G':\\<lbrakk>e\\<rbrakk>)", "assume \"x \\<in> vertices G'\" \"y \\<in> vertices G'\"\n           \"(g (f x), g (f y)) \\<in> :map_graph_fn (map_graph_fn G' f) g:\\<lbrakk>e\\<rbrakk>\""], ["proof (state)\nthis:\n  x \\<in> vertices G'\n  y \\<in> vertices G'\n  (g (f x), g (f y))\n  \\<in> :map_graph_fn (map_graph_fn G' f) g:\\<lbrakk>e\\<rbrakk>\n\ngoal (1 subgoal):\n 1. \\<exists>f g G.\n       G = map_graph_fn G (f \\<circ> g) \\<and>\n       G = map_graph_fn G' f \\<and>\n       subgraph (map_graph_fn G g) G' \\<and>\n       standard' C G \\<and>\n       (\\<forall>r. maintained r G' \\<longrightarrow> maintained r G) \\<and>\n       (\\<forall>x y e.\n           x \\<in> vertices G' \\<longrightarrow>\n           y \\<in> vertices G' \\<longrightarrow>\n           (g (f x), g (f y))\n           \\<in> :map_graph_fn G g:\\<lbrakk>e\\<rbrakk> \\<longrightarrow>\n           (x, y) \\<in> :G':\\<lbrakk>e\\<rbrakk>)", "hence \"(x,y) \\<in> :G':\\<lbrakk>e\\<rbrakk>\""], ["proof (prove)\nusing this:\n  x \\<in> vertices G'\n  y \\<in> vertices G'\n  (g (f x), g (f y))\n  \\<in> :map_graph_fn (map_graph_fn G' f) g:\\<lbrakk>e\\<rbrakk>\n\ngoal (1 subgoal):\n 1. (x, y) \\<in> :G':\\<lbrakk>e\\<rbrakk>", "proof(induct e arbitrary: x y)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>e1 e2 x y.\n       \\<lbrakk>\\<And>x y.\n                   \\<lbrakk>x \\<in> vertices G'; y \\<in> vertices G';\n                    (g (f x), g (f y))\n                    \\<in> :map_graph_fn (map_graph_fn G' f)\n                            g:\\<lbrakk>e1\\<rbrakk>\\<rbrakk>\n                   \\<Longrightarrow> (x, y) \\<in> :G':\\<lbrakk>e1\\<rbrakk>;\n        \\<And>x y.\n           \\<lbrakk>x \\<in> vertices G'; y \\<in> vertices G';\n            (g (f x), g (f y))\n            \\<in> :map_graph_fn (map_graph_fn G' f)\n                    g:\\<lbrakk>e2\\<rbrakk>\\<rbrakk>\n           \\<Longrightarrow> (x, y) \\<in> :G':\\<lbrakk>e2\\<rbrakk>;\n        x \\<in> vertices G'; y \\<in> vertices G';\n        (g (f x), g (f y))\n        \\<in> :map_graph_fn (map_graph_fn G' f)\n                g:\\<lbrakk>A_Int e1 e2\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> (x, y) \\<in> :G':\\<lbrakk>A_Int e1 e2\\<rbrakk>\n 2. \\<And>e1 e2 x y.\n       \\<lbrakk>\\<And>x y.\n                   \\<lbrakk>x \\<in> vertices G'; y \\<in> vertices G';\n                    (g (f x), g (f y))\n                    \\<in> :map_graph_fn (map_graph_fn G' f)\n                            g:\\<lbrakk>e1\\<rbrakk>\\<rbrakk>\n                   \\<Longrightarrow> (x, y) \\<in> :G':\\<lbrakk>e1\\<rbrakk>;\n        \\<And>x y.\n           \\<lbrakk>x \\<in> vertices G'; y \\<in> vertices G';\n            (g (f x), g (f y))\n            \\<in> :map_graph_fn (map_graph_fn G' f)\n                    g:\\<lbrakk>e2\\<rbrakk>\\<rbrakk>\n           \\<Longrightarrow> (x, y) \\<in> :G':\\<lbrakk>e2\\<rbrakk>;\n        x \\<in> vertices G'; y \\<in> vertices G';\n        (g (f x), g (f y))\n        \\<in> :map_graph_fn (map_graph_fn G' f)\n                g:\\<lbrakk>A_Cmp e1 e2\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> (x, y) \\<in> :G':\\<lbrakk>A_Cmp e1 e2\\<rbrakk>\n 3. \\<And>e x y.\n       \\<lbrakk>\\<And>x y.\n                   \\<lbrakk>x \\<in> vertices G'; y \\<in> vertices G';\n                    (g (f x), g (f y))\n                    \\<in> :map_graph_fn (map_graph_fn G' f)\n                            g:\\<lbrakk>e\\<rbrakk>\\<rbrakk>\n                   \\<Longrightarrow> (x, y) \\<in> :G':\\<lbrakk>e\\<rbrakk>;\n        x \\<in> vertices G'; y \\<in> vertices G';\n        (g (f x), g (f y))\n        \\<in> :map_graph_fn (map_graph_fn G' f)\n                g:\\<lbrakk>A_Cnv e\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> (x, y) \\<in> :G':\\<lbrakk>A_Cnv e\\<rbrakk>\n 4. \\<And>x xa y.\n       \\<lbrakk>xa \\<in> vertices G'; y \\<in> vertices G';\n        (g (f xa), g (f y))\n        \\<in> :map_graph_fn (map_graph_fn G' f)\n                g:\\<lbrakk>A_Lbl x\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> (xa, y) \\<in> :G':\\<lbrakk>A_Lbl x\\<rbrakk>", "case (A_Cmp e1 e2)"], ["proof (state)\nthis:\n  \\<lbrakk>?x2 \\<in> vertices G'; ?y2 \\<in> vertices G';\n   (g (f ?x2), g (f ?y2))\n   \\<in> :map_graph_fn (map_graph_fn G' f) g:\\<lbrakk>e1\\<rbrakk>\\<rbrakk>\n  \\<Longrightarrow> (?x2, ?y2) \\<in> :G':\\<lbrakk>e1\\<rbrakk>\n  \\<lbrakk>?x2 \\<in> vertices G'; ?y2 \\<in> vertices G';\n   (g (f ?x2), g (f ?y2))\n   \\<in> :map_graph_fn (map_graph_fn G' f) g:\\<lbrakk>e2\\<rbrakk>\\<rbrakk>\n  \\<Longrightarrow> (?x2, ?y2) \\<in> :G':\\<lbrakk>e2\\<rbrakk>\n  x \\<in> vertices G'\n  y \\<in> vertices G'\n  (g (f x), g (f y))\n  \\<in> :map_graph_fn (map_graph_fn G' f) g:\\<lbrakk>A_Cmp e1 e2\\<rbrakk>\n\ngoal (4 subgoals):\n 1. \\<And>e1 e2 x y.\n       \\<lbrakk>\\<And>x y.\n                   \\<lbrakk>x \\<in> vertices G'; y \\<in> vertices G';\n                    (g (f x), g (f y))\n                    \\<in> :map_graph_fn (map_graph_fn G' f)\n                            g:\\<lbrakk>e1\\<rbrakk>\\<rbrakk>\n                   \\<Longrightarrow> (x, y) \\<in> :G':\\<lbrakk>e1\\<rbrakk>;\n        \\<And>x y.\n           \\<lbrakk>x \\<in> vertices G'; y \\<in> vertices G';\n            (g (f x), g (f y))\n            \\<in> :map_graph_fn (map_graph_fn G' f)\n                    g:\\<lbrakk>e2\\<rbrakk>\\<rbrakk>\n           \\<Longrightarrow> (x, y) \\<in> :G':\\<lbrakk>e2\\<rbrakk>;\n        x \\<in> vertices G'; y \\<in> vertices G';\n        (g (f x), g (f y))\n        \\<in> :map_graph_fn (map_graph_fn G' f)\n                g:\\<lbrakk>A_Int e1 e2\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> (x, y) \\<in> :G':\\<lbrakk>A_Int e1 e2\\<rbrakk>\n 2. \\<And>e1 e2 x y.\n       \\<lbrakk>\\<And>x y.\n                   \\<lbrakk>x \\<in> vertices G'; y \\<in> vertices G';\n                    (g (f x), g (f y))\n                    \\<in> :map_graph_fn (map_graph_fn G' f)\n                            g:\\<lbrakk>e1\\<rbrakk>\\<rbrakk>\n                   \\<Longrightarrow> (x, y) \\<in> :G':\\<lbrakk>e1\\<rbrakk>;\n        \\<And>x y.\n           \\<lbrakk>x \\<in> vertices G'; y \\<in> vertices G';\n            (g (f x), g (f y))\n            \\<in> :map_graph_fn (map_graph_fn G' f)\n                    g:\\<lbrakk>e2\\<rbrakk>\\<rbrakk>\n           \\<Longrightarrow> (x, y) \\<in> :G':\\<lbrakk>e2\\<rbrakk>;\n        x \\<in> vertices G'; y \\<in> vertices G';\n        (g (f x), g (f y))\n        \\<in> :map_graph_fn (map_graph_fn G' f)\n                g:\\<lbrakk>A_Cmp e1 e2\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> (x, y) \\<in> :G':\\<lbrakk>A_Cmp e1 e2\\<rbrakk>\n 3. \\<And>e x y.\n       \\<lbrakk>\\<And>x y.\n                   \\<lbrakk>x \\<in> vertices G'; y \\<in> vertices G';\n                    (g (f x), g (f y))\n                    \\<in> :map_graph_fn (map_graph_fn G' f)\n                            g:\\<lbrakk>e\\<rbrakk>\\<rbrakk>\n                   \\<Longrightarrow> (x, y) \\<in> :G':\\<lbrakk>e\\<rbrakk>;\n        x \\<in> vertices G'; y \\<in> vertices G';\n        (g (f x), g (f y))\n        \\<in> :map_graph_fn (map_graph_fn G' f)\n                g:\\<lbrakk>A_Cnv e\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> (x, y) \\<in> :G':\\<lbrakk>A_Cnv e\\<rbrakk>\n 4. \\<And>x xa y.\n       \\<lbrakk>xa \\<in> vertices G'; y \\<in> vertices G';\n        (g (f xa), g (f y))\n        \\<in> :map_graph_fn (map_graph_fn G' f)\n                g:\\<lbrakk>A_Lbl x\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> (xa, y) \\<in> :G':\\<lbrakk>A_Lbl x\\<rbrakk>", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>?x2 \\<in> vertices G'; ?y2 \\<in> vertices G';\n   (g (f ?x2), g (f ?y2))\n   \\<in> :map_graph_fn (map_graph_fn G' f) g:\\<lbrakk>e1\\<rbrakk>\\<rbrakk>\n  \\<Longrightarrow> (?x2, ?y2) \\<in> :G':\\<lbrakk>e1\\<rbrakk>\n  \\<lbrakk>?x2 \\<in> vertices G'; ?y2 \\<in> vertices G';\n   (g (f ?x2), g (f ?y2))\n   \\<in> :map_graph_fn (map_graph_fn G' f) g:\\<lbrakk>e2\\<rbrakk>\\<rbrakk>\n  \\<Longrightarrow> (?x2, ?y2) \\<in> :G':\\<lbrakk>e2\\<rbrakk>\n  x \\<in> vertices G'\n  y \\<in> vertices G'\n  (g (f x), g (f y))\n  \\<in> :map_graph_fn (map_graph_fn G' f) g:\\<lbrakk>A_Cmp e1 e2\\<rbrakk>", "obtain z where z:\"(g (f x), z) \\<in> :map_graph_fn (map_graph_fn G' f) g:\\<lbrakk>e1\\<rbrakk>\"\n                              \"(z, g (f y)) \\<in> :map_graph_fn (map_graph_fn G' f) g:\\<lbrakk>e2\\<rbrakk>\""], ["proof (prove)\nusing this:\n  \\<lbrakk>?x2 \\<in> vertices G'; ?y2 \\<in> vertices G';\n   (g (f ?x2), g (f ?y2))\n   \\<in> :map_graph_fn (map_graph_fn G' f) g:\\<lbrakk>e1\\<rbrakk>\\<rbrakk>\n  \\<Longrightarrow> (?x2, ?y2) \\<in> :G':\\<lbrakk>e1\\<rbrakk>\n  \\<lbrakk>?x2 \\<in> vertices G'; ?y2 \\<in> vertices G';\n   (g (f ?x2), g (f ?y2))\n   \\<in> :map_graph_fn (map_graph_fn G' f) g:\\<lbrakk>e2\\<rbrakk>\\<rbrakk>\n  \\<Longrightarrow> (?x2, ?y2) \\<in> :G':\\<lbrakk>e2\\<rbrakk>\n  x \\<in> vertices G'\n  y \\<in> vertices G'\n  (g (f x), g (f y))\n  \\<in> :map_graph_fn (map_graph_fn G' f) g:\\<lbrakk>A_Cmp e1 e2\\<rbrakk>\n\ngoal (1 subgoal):\n 1. (\\<And>z.\n        \\<lbrakk>(g (f x), z)\n                 \\<in> :map_graph_fn (map_graph_fn G' f)\n                         g:\\<lbrakk>e1\\<rbrakk>;\n         (z, g (f y))\n         \\<in> :map_graph_fn (map_graph_fn G' f)\n                 g:\\<lbrakk>e2\\<rbrakk>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  (g (f x), z)\n  \\<in> :map_graph_fn (map_graph_fn G' f) g:\\<lbrakk>e1\\<rbrakk>\n  (z, g (f y))\n  \\<in> :map_graph_fn (map_graph_fn G' f) g:\\<lbrakk>e2\\<rbrakk>\n\ngoal (4 subgoals):\n 1. \\<And>e1 e2 x y.\n       \\<lbrakk>\\<And>x y.\n                   \\<lbrakk>x \\<in> vertices G'; y \\<in> vertices G';\n                    (g (f x), g (f y))\n                    \\<in> :map_graph_fn (map_graph_fn G' f)\n                            g:\\<lbrakk>e1\\<rbrakk>\\<rbrakk>\n                   \\<Longrightarrow> (x, y) \\<in> :G':\\<lbrakk>e1\\<rbrakk>;\n        \\<And>x y.\n           \\<lbrakk>x \\<in> vertices G'; y \\<in> vertices G';\n            (g (f x), g (f y))\n            \\<in> :map_graph_fn (map_graph_fn G' f)\n                    g:\\<lbrakk>e2\\<rbrakk>\\<rbrakk>\n           \\<Longrightarrow> (x, y) \\<in> :G':\\<lbrakk>e2\\<rbrakk>;\n        x \\<in> vertices G'; y \\<in> vertices G';\n        (g (f x), g (f y))\n        \\<in> :map_graph_fn (map_graph_fn G' f)\n                g:\\<lbrakk>A_Int e1 e2\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> (x, y) \\<in> :G':\\<lbrakk>A_Int e1 e2\\<rbrakk>\n 2. \\<And>e1 e2 x y.\n       \\<lbrakk>\\<And>x y.\n                   \\<lbrakk>x \\<in> vertices G'; y \\<in> vertices G';\n                    (g (f x), g (f y))\n                    \\<in> :map_graph_fn (map_graph_fn G' f)\n                            g:\\<lbrakk>e1\\<rbrakk>\\<rbrakk>\n                   \\<Longrightarrow> (x, y) \\<in> :G':\\<lbrakk>e1\\<rbrakk>;\n        \\<And>x y.\n           \\<lbrakk>x \\<in> vertices G'; y \\<in> vertices G';\n            (g (f x), g (f y))\n            \\<in> :map_graph_fn (map_graph_fn G' f)\n                    g:\\<lbrakk>e2\\<rbrakk>\\<rbrakk>\n           \\<Longrightarrow> (x, y) \\<in> :G':\\<lbrakk>e2\\<rbrakk>;\n        x \\<in> vertices G'; y \\<in> vertices G';\n        (g (f x), g (f y))\n        \\<in> :map_graph_fn (map_graph_fn G' f)\n                g:\\<lbrakk>A_Cmp e1 e2\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> (x, y) \\<in> :G':\\<lbrakk>A_Cmp e1 e2\\<rbrakk>\n 3. \\<And>e x y.\n       \\<lbrakk>\\<And>x y.\n                   \\<lbrakk>x \\<in> vertices G'; y \\<in> vertices G';\n                    (g (f x), g (f y))\n                    \\<in> :map_graph_fn (map_graph_fn G' f)\n                            g:\\<lbrakk>e\\<rbrakk>\\<rbrakk>\n                   \\<Longrightarrow> (x, y) \\<in> :G':\\<lbrakk>e\\<rbrakk>;\n        x \\<in> vertices G'; y \\<in> vertices G';\n        (g (f x), g (f y))\n        \\<in> :map_graph_fn (map_graph_fn G' f)\n                g:\\<lbrakk>A_Cnv e\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> (x, y) \\<in> :G':\\<lbrakk>A_Cnv e\\<rbrakk>\n 4. \\<And>x xa y.\n       \\<lbrakk>xa \\<in> vertices G'; y \\<in> vertices G';\n        (g (f xa), g (f y))\n        \\<in> :map_graph_fn (map_graph_fn G' f)\n                g:\\<lbrakk>A_Lbl x\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> (xa, y) \\<in> :G':\\<lbrakk>A_Lbl x\\<rbrakk>", "hence \"z \\<in> vertices (map_graph_fn (map_graph_fn G' f) g)\""], ["proof (prove)\nusing this:\n  (g (f x), z)\n  \\<in> :map_graph_fn (map_graph_fn G' f) g:\\<lbrakk>e1\\<rbrakk>\n  (z, g (f y))\n  \\<in> :map_graph_fn (map_graph_fn G' f) g:\\<lbrakk>e2\\<rbrakk>\n\ngoal (1 subgoal):\n 1. z \\<in> vertices (map_graph_fn (map_graph_fn G' f) g)", "using semantics_in_vertices(1)[OF map_graph_fn_graphI]"], ["proof (prove)\nusing this:\n  (g (f x), z)\n  \\<in> :map_graph_fn (map_graph_fn G' f) g:\\<lbrakk>e1\\<rbrakk>\n  (z, g (f y))\n  \\<in> :map_graph_fn (map_graph_fn G' f) g:\\<lbrakk>e2\\<rbrakk>\n  (?a, ?b)\n  \\<in> :map_graph_fn ?G1 ?f1:\\<lbrakk>?e\\<rbrakk> \\<Longrightarrow>\n  ?a \\<in> vertices (map_graph_fn ?G1 ?f1)\n\ngoal (1 subgoal):\n 1. z \\<in> vertices (map_graph_fn (map_graph_fn G' f) g)", "by metis"], ["proof (state)\nthis:\n  z \\<in> vertices (map_graph_fn (map_graph_fn G' f) g)\n\ngoal (4 subgoals):\n 1. \\<And>e1 e2 x y.\n       \\<lbrakk>\\<And>x y.\n                   \\<lbrakk>x \\<in> vertices G'; y \\<in> vertices G';\n                    (g (f x), g (f y))\n                    \\<in> :map_graph_fn (map_graph_fn G' f)\n                            g:\\<lbrakk>e1\\<rbrakk>\\<rbrakk>\n                   \\<Longrightarrow> (x, y) \\<in> :G':\\<lbrakk>e1\\<rbrakk>;\n        \\<And>x y.\n           \\<lbrakk>x \\<in> vertices G'; y \\<in> vertices G';\n            (g (f x), g (f y))\n            \\<in> :map_graph_fn (map_graph_fn G' f)\n                    g:\\<lbrakk>e2\\<rbrakk>\\<rbrakk>\n           \\<Longrightarrow> (x, y) \\<in> :G':\\<lbrakk>e2\\<rbrakk>;\n        x \\<in> vertices G'; y \\<in> vertices G';\n        (g (f x), g (f y))\n        \\<in> :map_graph_fn (map_graph_fn G' f)\n                g:\\<lbrakk>A_Int e1 e2\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> (x, y) \\<in> :G':\\<lbrakk>A_Int e1 e2\\<rbrakk>\n 2. \\<And>e1 e2 x y.\n       \\<lbrakk>\\<And>x y.\n                   \\<lbrakk>x \\<in> vertices G'; y \\<in> vertices G';\n                    (g (f x), g (f y))\n                    \\<in> :map_graph_fn (map_graph_fn G' f)\n                            g:\\<lbrakk>e1\\<rbrakk>\\<rbrakk>\n                   \\<Longrightarrow> (x, y) \\<in> :G':\\<lbrakk>e1\\<rbrakk>;\n        \\<And>x y.\n           \\<lbrakk>x \\<in> vertices G'; y \\<in> vertices G';\n            (g (f x), g (f y))\n            \\<in> :map_graph_fn (map_graph_fn G' f)\n                    g:\\<lbrakk>e2\\<rbrakk>\\<rbrakk>\n           \\<Longrightarrow> (x, y) \\<in> :G':\\<lbrakk>e2\\<rbrakk>;\n        x \\<in> vertices G'; y \\<in> vertices G';\n        (g (f x), g (f y))\n        \\<in> :map_graph_fn (map_graph_fn G' f)\n                g:\\<lbrakk>A_Cmp e1 e2\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> (x, y) \\<in> :G':\\<lbrakk>A_Cmp e1 e2\\<rbrakk>\n 3. \\<And>e x y.\n       \\<lbrakk>\\<And>x y.\n                   \\<lbrakk>x \\<in> vertices G'; y \\<in> vertices G';\n                    (g (f x), g (f y))\n                    \\<in> :map_graph_fn (map_graph_fn G' f)\n                            g:\\<lbrakk>e\\<rbrakk>\\<rbrakk>\n                   \\<Longrightarrow> (x, y) \\<in> :G':\\<lbrakk>e\\<rbrakk>;\n        x \\<in> vertices G'; y \\<in> vertices G';\n        (g (f x), g (f y))\n        \\<in> :map_graph_fn (map_graph_fn G' f)\n                g:\\<lbrakk>A_Cnv e\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> (x, y) \\<in> :G':\\<lbrakk>A_Cnv e\\<rbrakk>\n 4. \\<And>x xa y.\n       \\<lbrakk>xa \\<in> vertices G'; y \\<in> vertices G';\n        (g (f xa), g (f y))\n        \\<in> :map_graph_fn (map_graph_fn G' f)\n                g:\\<lbrakk>A_Lbl x\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> (xa, y) \\<in> :G':\\<lbrakk>A_Lbl x\\<rbrakk>", "then"], ["proof (chain)\npicking this:\n  z \\<in> vertices (map_graph_fn (map_graph_fn G' f) g)", "obtain z' where z':\"z = g (f z')\" \"z' \\<in> vertices G'\""], ["proof (prove)\nusing this:\n  z \\<in> vertices (map_graph_fn (map_graph_fn G' f) g)\n\ngoal (1 subgoal):\n 1. (\\<And>z'.\n        \\<lbrakk>z = g (f z'); z' \\<in> vertices G'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  z = g (f z')\n  z' \\<in> vertices G'\n\ngoal (4 subgoals):\n 1. \\<And>e1 e2 x y.\n       \\<lbrakk>\\<And>x y.\n                   \\<lbrakk>x \\<in> vertices G'; y \\<in> vertices G';\n                    (g (f x), g (f y))\n                    \\<in> :map_graph_fn (map_graph_fn G' f)\n                            g:\\<lbrakk>e1\\<rbrakk>\\<rbrakk>\n                   \\<Longrightarrow> (x, y) \\<in> :G':\\<lbrakk>e1\\<rbrakk>;\n        \\<And>x y.\n           \\<lbrakk>x \\<in> vertices G'; y \\<in> vertices G';\n            (g (f x), g (f y))\n            \\<in> :map_graph_fn (map_graph_fn G' f)\n                    g:\\<lbrakk>e2\\<rbrakk>\\<rbrakk>\n           \\<Longrightarrow> (x, y) \\<in> :G':\\<lbrakk>e2\\<rbrakk>;\n        x \\<in> vertices G'; y \\<in> vertices G';\n        (g (f x), g (f y))\n        \\<in> :map_graph_fn (map_graph_fn G' f)\n                g:\\<lbrakk>A_Int e1 e2\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> (x, y) \\<in> :G':\\<lbrakk>A_Int e1 e2\\<rbrakk>\n 2. \\<And>e1 e2 x y.\n       \\<lbrakk>\\<And>x y.\n                   \\<lbrakk>x \\<in> vertices G'; y \\<in> vertices G';\n                    (g (f x), g (f y))\n                    \\<in> :map_graph_fn (map_graph_fn G' f)\n                            g:\\<lbrakk>e1\\<rbrakk>\\<rbrakk>\n                   \\<Longrightarrow> (x, y) \\<in> :G':\\<lbrakk>e1\\<rbrakk>;\n        \\<And>x y.\n           \\<lbrakk>x \\<in> vertices G'; y \\<in> vertices G';\n            (g (f x), g (f y))\n            \\<in> :map_graph_fn (map_graph_fn G' f)\n                    g:\\<lbrakk>e2\\<rbrakk>\\<rbrakk>\n           \\<Longrightarrow> (x, y) \\<in> :G':\\<lbrakk>e2\\<rbrakk>;\n        x \\<in> vertices G'; y \\<in> vertices G';\n        (g (f x), g (f y))\n        \\<in> :map_graph_fn (map_graph_fn G' f)\n                g:\\<lbrakk>A_Cmp e1 e2\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> (x, y) \\<in> :G':\\<lbrakk>A_Cmp e1 e2\\<rbrakk>\n 3. \\<And>e x y.\n       \\<lbrakk>\\<And>x y.\n                   \\<lbrakk>x \\<in> vertices G'; y \\<in> vertices G';\n                    (g (f x), g (f y))\n                    \\<in> :map_graph_fn (map_graph_fn G' f)\n                            g:\\<lbrakk>e\\<rbrakk>\\<rbrakk>\n                   \\<Longrightarrow> (x, y) \\<in> :G':\\<lbrakk>e\\<rbrakk>;\n        x \\<in> vertices G'; y \\<in> vertices G';\n        (g (f x), g (f y))\n        \\<in> :map_graph_fn (map_graph_fn G' f)\n                g:\\<lbrakk>A_Cnv e\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> (x, y) \\<in> :G':\\<lbrakk>A_Cnv e\\<rbrakk>\n 4. \\<And>x xa y.\n       \\<lbrakk>xa \\<in> vertices G'; y \\<in> vertices G';\n        (g (f xa), g (f y))\n        \\<in> :map_graph_fn (map_graph_fn G' f)\n                g:\\<lbrakk>A_Lbl x\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> (xa, y) \\<in> :G':\\<lbrakk>A_Lbl x\\<rbrakk>", "with A_Cmp(1)[OF A_Cmp(3) z'(2) z(1)[unfolded z']]\n             A_Cmp(2)[OF z'(2) A_Cmp(4) z(2)[unfolded z']]"], ["proof (chain)\npicking this:\n  (x, z') \\<in> :G':\\<lbrakk>e1\\<rbrakk>\n  (z', y) \\<in> :G':\\<lbrakk>e2\\<rbrakk>\n  z = g (f z')\n  z' \\<in> vertices G'", "have \"(x, y) \\<in> (:G':\\<lbrakk>e1\\<rbrakk>) O (:G':\\<lbrakk>e2\\<rbrakk>)\""], ["proof (prove)\nusing this:\n  (x, z') \\<in> :G':\\<lbrakk>e1\\<rbrakk>\n  (z', y) \\<in> :G':\\<lbrakk>e2\\<rbrakk>\n  z = g (f z')\n  z' \\<in> vertices G'\n\ngoal (1 subgoal):\n 1. (x, y) \\<in> (:G':\\<lbrakk>e1\\<rbrakk>) O (:G':\\<lbrakk>e2\\<rbrakk>)", "by auto"], ["proof (state)\nthis:\n  (x, y) \\<in> (:G':\\<lbrakk>e1\\<rbrakk>) O (:G':\\<lbrakk>e2\\<rbrakk>)\n\ngoal (4 subgoals):\n 1. \\<And>e1 e2 x y.\n       \\<lbrakk>\\<And>x y.\n                   \\<lbrakk>x \\<in> vertices G'; y \\<in> vertices G';\n                    (g (f x), g (f y))\n                    \\<in> :map_graph_fn (map_graph_fn G' f)\n                            g:\\<lbrakk>e1\\<rbrakk>\\<rbrakk>\n                   \\<Longrightarrow> (x, y) \\<in> :G':\\<lbrakk>e1\\<rbrakk>;\n        \\<And>x y.\n           \\<lbrakk>x \\<in> vertices G'; y \\<in> vertices G';\n            (g (f x), g (f y))\n            \\<in> :map_graph_fn (map_graph_fn G' f)\n                    g:\\<lbrakk>e2\\<rbrakk>\\<rbrakk>\n           \\<Longrightarrow> (x, y) \\<in> :G':\\<lbrakk>e2\\<rbrakk>;\n        x \\<in> vertices G'; y \\<in> vertices G';\n        (g (f x), g (f y))\n        \\<in> :map_graph_fn (map_graph_fn G' f)\n                g:\\<lbrakk>A_Int e1 e2\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> (x, y) \\<in> :G':\\<lbrakk>A_Int e1 e2\\<rbrakk>\n 2. \\<And>e1 e2 x y.\n       \\<lbrakk>\\<And>x y.\n                   \\<lbrakk>x \\<in> vertices G'; y \\<in> vertices G';\n                    (g (f x), g (f y))\n                    \\<in> :map_graph_fn (map_graph_fn G' f)\n                            g:\\<lbrakk>e1\\<rbrakk>\\<rbrakk>\n                   \\<Longrightarrow> (x, y) \\<in> :G':\\<lbrakk>e1\\<rbrakk>;\n        \\<And>x y.\n           \\<lbrakk>x \\<in> vertices G'; y \\<in> vertices G';\n            (g (f x), g (f y))\n            \\<in> :map_graph_fn (map_graph_fn G' f)\n                    g:\\<lbrakk>e2\\<rbrakk>\\<rbrakk>\n           \\<Longrightarrow> (x, y) \\<in> :G':\\<lbrakk>e2\\<rbrakk>;\n        x \\<in> vertices G'; y \\<in> vertices G';\n        (g (f x), g (f y))\n        \\<in> :map_graph_fn (map_graph_fn G' f)\n                g:\\<lbrakk>A_Cmp e1 e2\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> (x, y) \\<in> :G':\\<lbrakk>A_Cmp e1 e2\\<rbrakk>\n 3. \\<And>e x y.\n       \\<lbrakk>\\<And>x y.\n                   \\<lbrakk>x \\<in> vertices G'; y \\<in> vertices G';\n                    (g (f x), g (f y))\n                    \\<in> :map_graph_fn (map_graph_fn G' f)\n                            g:\\<lbrakk>e\\<rbrakk>\\<rbrakk>\n                   \\<Longrightarrow> (x, y) \\<in> :G':\\<lbrakk>e\\<rbrakk>;\n        x \\<in> vertices G'; y \\<in> vertices G';\n        (g (f x), g (f y))\n        \\<in> :map_graph_fn (map_graph_fn G' f)\n                g:\\<lbrakk>A_Cnv e\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> (x, y) \\<in> :G':\\<lbrakk>A_Cnv e\\<rbrakk>\n 4. \\<And>x xa y.\n       \\<lbrakk>xa \\<in> vertices G'; y \\<in> vertices G';\n        (g (f xa), g (f y))\n        \\<in> :map_graph_fn (map_graph_fn G' f)\n                g:\\<lbrakk>A_Lbl x\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> (xa, y) \\<in> :G':\\<lbrakk>A_Lbl x\\<rbrakk>", "then"], ["proof (chain)\npicking this:\n  (x, y) \\<in> (:G':\\<lbrakk>e1\\<rbrakk>) O (:G':\\<lbrakk>e2\\<rbrakk>)", "show ?case"], ["proof (prove)\nusing this:\n  (x, y) \\<in> (:G':\\<lbrakk>e1\\<rbrakk>) O (:G':\\<lbrakk>e2\\<rbrakk>)\n\ngoal (1 subgoal):\n 1. (x, y) \\<in> :G':\\<lbrakk>A_Cmp e1 e2\\<rbrakk>", "by auto"], ["proof (state)\nthis:\n  (x, y) \\<in> :G':\\<lbrakk>A_Cmp e1 e2\\<rbrakk>\n\ngoal (3 subgoals):\n 1. \\<And>e1 e2 x y.\n       \\<lbrakk>\\<And>x y.\n                   \\<lbrakk>x \\<in> vertices G'; y \\<in> vertices G';\n                    (g (f x), g (f y))\n                    \\<in> :map_graph_fn (map_graph_fn G' f)\n                            g:\\<lbrakk>e1\\<rbrakk>\\<rbrakk>\n                   \\<Longrightarrow> (x, y) \\<in> :G':\\<lbrakk>e1\\<rbrakk>;\n        \\<And>x y.\n           \\<lbrakk>x \\<in> vertices G'; y \\<in> vertices G';\n            (g (f x), g (f y))\n            \\<in> :map_graph_fn (map_graph_fn G' f)\n                    g:\\<lbrakk>e2\\<rbrakk>\\<rbrakk>\n           \\<Longrightarrow> (x, y) \\<in> :G':\\<lbrakk>e2\\<rbrakk>;\n        x \\<in> vertices G'; y \\<in> vertices G';\n        (g (f x), g (f y))\n        \\<in> :map_graph_fn (map_graph_fn G' f)\n                g:\\<lbrakk>A_Int e1 e2\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> (x, y) \\<in> :G':\\<lbrakk>A_Int e1 e2\\<rbrakk>\n 2. \\<And>e x y.\n       \\<lbrakk>\\<And>x y.\n                   \\<lbrakk>x \\<in> vertices G'; y \\<in> vertices G';\n                    (g (f x), g (f y))\n                    \\<in> :map_graph_fn (map_graph_fn G' f)\n                            g:\\<lbrakk>e\\<rbrakk>\\<rbrakk>\n                   \\<Longrightarrow> (x, y) \\<in> :G':\\<lbrakk>e\\<rbrakk>;\n        x \\<in> vertices G'; y \\<in> vertices G';\n        (g (f x), g (f y))\n        \\<in> :map_graph_fn (map_graph_fn G' f)\n                g:\\<lbrakk>A_Cnv e\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> (x, y) \\<in> :G':\\<lbrakk>A_Cnv e\\<rbrakk>\n 3. \\<And>x xa y.\n       \\<lbrakk>xa \\<in> vertices G'; y \\<in> vertices G';\n        (g (f xa), g (f y))\n        \\<in> :map_graph_fn (map_graph_fn G' f)\n                g:\\<lbrakk>A_Lbl x\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> (xa, y) \\<in> :G':\\<lbrakk>A_Lbl x\\<rbrakk>", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>e1 e2 x y.\n       \\<lbrakk>\\<And>x y.\n                   \\<lbrakk>x \\<in> vertices G'; y \\<in> vertices G';\n                    (g (f x), g (f y))\n                    \\<in> :map_graph_fn (map_graph_fn G' f)\n                            g:\\<lbrakk>e1\\<rbrakk>\\<rbrakk>\n                   \\<Longrightarrow> (x, y) \\<in> :G':\\<lbrakk>e1\\<rbrakk>;\n        \\<And>x y.\n           \\<lbrakk>x \\<in> vertices G'; y \\<in> vertices G';\n            (g (f x), g (f y))\n            \\<in> :map_graph_fn (map_graph_fn G' f)\n                    g:\\<lbrakk>e2\\<rbrakk>\\<rbrakk>\n           \\<Longrightarrow> (x, y) \\<in> :G':\\<lbrakk>e2\\<rbrakk>;\n        x \\<in> vertices G'; y \\<in> vertices G';\n        (g (f x), g (f y))\n        \\<in> :map_graph_fn (map_graph_fn G' f)\n                g:\\<lbrakk>A_Int e1 e2\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> (x, y) \\<in> :G':\\<lbrakk>A_Int e1 e2\\<rbrakk>\n 2. \\<And>e x y.\n       \\<lbrakk>\\<And>x y.\n                   \\<lbrakk>x \\<in> vertices G'; y \\<in> vertices G';\n                    (g (f x), g (f y))\n                    \\<in> :map_graph_fn (map_graph_fn G' f)\n                            g:\\<lbrakk>e\\<rbrakk>\\<rbrakk>\n                   \\<Longrightarrow> (x, y) \\<in> :G':\\<lbrakk>e\\<rbrakk>;\n        x \\<in> vertices G'; y \\<in> vertices G';\n        (g (f x), g (f y))\n        \\<in> :map_graph_fn (map_graph_fn G' f)\n                g:\\<lbrakk>A_Cnv e\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> (x, y) \\<in> :G':\\<lbrakk>A_Cnv e\\<rbrakk>\n 3. \\<And>x xa y.\n       \\<lbrakk>xa \\<in> vertices G'; y \\<in> vertices G';\n        (g (f xa), g (f y))\n        \\<in> :map_graph_fn (map_graph_fn G' f)\n                g:\\<lbrakk>A_Lbl x\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> (xa, y) \\<in> :G':\\<lbrakk>A_Lbl x\\<rbrakk>", "case (A_Lbl l)"], ["proof (state)\nthis:\n  x \\<in> vertices G'\n  y \\<in> vertices G'\n  (g (f x), g (f y))\n  \\<in> :map_graph_fn (map_graph_fn G' f) g:\\<lbrakk>A_Lbl l\\<rbrakk>\n\ngoal (3 subgoals):\n 1. \\<And>e1 e2 x y.\n       \\<lbrakk>\\<And>x y.\n                   \\<lbrakk>x \\<in> vertices G'; y \\<in> vertices G';\n                    (g (f x), g (f y))\n                    \\<in> :map_graph_fn (map_graph_fn G' f)\n                            g:\\<lbrakk>e1\\<rbrakk>\\<rbrakk>\n                   \\<Longrightarrow> (x, y) \\<in> :G':\\<lbrakk>e1\\<rbrakk>;\n        \\<And>x y.\n           \\<lbrakk>x \\<in> vertices G'; y \\<in> vertices G';\n            (g (f x), g (f y))\n            \\<in> :map_graph_fn (map_graph_fn G' f)\n                    g:\\<lbrakk>e2\\<rbrakk>\\<rbrakk>\n           \\<Longrightarrow> (x, y) \\<in> :G':\\<lbrakk>e2\\<rbrakk>;\n        x \\<in> vertices G'; y \\<in> vertices G';\n        (g (f x), g (f y))\n        \\<in> :map_graph_fn (map_graph_fn G' f)\n                g:\\<lbrakk>A_Int e1 e2\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> (x, y) \\<in> :G':\\<lbrakk>A_Int e1 e2\\<rbrakk>\n 2. \\<And>e x y.\n       \\<lbrakk>\\<And>x y.\n                   \\<lbrakk>x \\<in> vertices G'; y \\<in> vertices G';\n                    (g (f x), g (f y))\n                    \\<in> :map_graph_fn (map_graph_fn G' f)\n                            g:\\<lbrakk>e\\<rbrakk>\\<rbrakk>\n                   \\<Longrightarrow> (x, y) \\<in> :G':\\<lbrakk>e\\<rbrakk>;\n        x \\<in> vertices G'; y \\<in> vertices G';\n        (g (f x), g (f y))\n        \\<in> :map_graph_fn (map_graph_fn G' f)\n                g:\\<lbrakk>A_Cnv e\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> (x, y) \\<in> :G':\\<lbrakk>A_Cnv e\\<rbrakk>\n 3. \\<And>x xa y.\n       \\<lbrakk>xa \\<in> vertices G'; y \\<in> vertices G';\n        (g (f xa), g (f y))\n        \\<in> :map_graph_fn (map_graph_fn G' f)\n                g:\\<lbrakk>A_Lbl x\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> (xa, y) \\<in> :G':\\<lbrakk>A_Lbl x\\<rbrakk>", "hence \"(l, g (f x), g (f y)) \\<in> edges (map_graph_fn G g)\""], ["proof (prove)\nusing this:\n  x \\<in> vertices G'\n  y \\<in> vertices G'\n  (g (f x), g (f y))\n  \\<in> :map_graph_fn (map_graph_fn G' f) g:\\<lbrakk>A_Lbl l\\<rbrakk>\n\ngoal (1 subgoal):\n 1. (l, g (f x), g (f y)) \\<in> edges (map_graph_fn G g)", "by (auto simp:getRel_def G_def)"], ["proof (state)\nthis:\n  (l, g (f x), g (f y)) \\<in> edges (map_graph_fn G g)\n\ngoal (3 subgoals):\n 1. \\<And>e1 e2 x y.\n       \\<lbrakk>\\<And>x y.\n                   \\<lbrakk>x \\<in> vertices G'; y \\<in> vertices G';\n                    (g (f x), g (f y))\n                    \\<in> :map_graph_fn (map_graph_fn G' f)\n                            g:\\<lbrakk>e1\\<rbrakk>\\<rbrakk>\n                   \\<Longrightarrow> (x, y) \\<in> :G':\\<lbrakk>e1\\<rbrakk>;\n        \\<And>x y.\n           \\<lbrakk>x \\<in> vertices G'; y \\<in> vertices G';\n            (g (f x), g (f y))\n            \\<in> :map_graph_fn (map_graph_fn G' f)\n                    g:\\<lbrakk>e2\\<rbrakk>\\<rbrakk>\n           \\<Longrightarrow> (x, y) \\<in> :G':\\<lbrakk>e2\\<rbrakk>;\n        x \\<in> vertices G'; y \\<in> vertices G';\n        (g (f x), g (f y))\n        \\<in> :map_graph_fn (map_graph_fn G' f)\n                g:\\<lbrakk>A_Int e1 e2\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> (x, y) \\<in> :G':\\<lbrakk>A_Int e1 e2\\<rbrakk>\n 2. \\<And>e x y.\n       \\<lbrakk>\\<And>x y.\n                   \\<lbrakk>x \\<in> vertices G'; y \\<in> vertices G';\n                    (g (f x), g (f y))\n                    \\<in> :map_graph_fn (map_graph_fn G' f)\n                            g:\\<lbrakk>e\\<rbrakk>\\<rbrakk>\n                   \\<Longrightarrow> (x, y) \\<in> :G':\\<lbrakk>e\\<rbrakk>;\n        x \\<in> vertices G'; y \\<in> vertices G';\n        (g (f x), g (f y))\n        \\<in> :map_graph_fn (map_graph_fn G' f)\n                g:\\<lbrakk>A_Cnv e\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> (x, y) \\<in> :G':\\<lbrakk>A_Cnv e\\<rbrakk>\n 3. \\<And>x xa y.\n       \\<lbrakk>xa \\<in> vertices G'; y \\<in> vertices G';\n        (g (f xa), g (f y))\n        \\<in> :map_graph_fn (map_graph_fn G' f)\n                g:\\<lbrakk>A_Lbl x\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> (xa, y) \\<in> :G':\\<lbrakk>A_Lbl x\\<rbrakk>", "then"], ["proof (chain)\npicking this:\n  (l, g (f x), g (f y)) \\<in> edges (map_graph_fn G g)", "obtain x' y'\n          where \"(l, x', y') \\<in> edges G\" \"g (f x) = g x'\" \"g (f y) = g y'\""], ["proof (prove)\nusing this:\n  (l, g (f x), g (f y)) \\<in> edges (map_graph_fn G g)\n\ngoal (1 subgoal):\n 1. (\\<And>x' y'.\n        \\<lbrakk>(l, x', y') \\<in> edges G; g (f x) = g x';\n         g (f y) = g y'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  (l, x', y') \\<in> edges G\n  g (f x) = g x'\n  g (f y) = g y'\n\ngoal (3 subgoals):\n 1. \\<And>e1 e2 x y.\n       \\<lbrakk>\\<And>x y.\n                   \\<lbrakk>x \\<in> vertices G'; y \\<in> vertices G';\n                    (g (f x), g (f y))\n                    \\<in> :map_graph_fn (map_graph_fn G' f)\n                            g:\\<lbrakk>e1\\<rbrakk>\\<rbrakk>\n                   \\<Longrightarrow> (x, y) \\<in> :G':\\<lbrakk>e1\\<rbrakk>;\n        \\<And>x y.\n           \\<lbrakk>x \\<in> vertices G'; y \\<in> vertices G';\n            (g (f x), g (f y))\n            \\<in> :map_graph_fn (map_graph_fn G' f)\n                    g:\\<lbrakk>e2\\<rbrakk>\\<rbrakk>\n           \\<Longrightarrow> (x, y) \\<in> :G':\\<lbrakk>e2\\<rbrakk>;\n        x \\<in> vertices G'; y \\<in> vertices G';\n        (g (f x), g (f y))\n        \\<in> :map_graph_fn (map_graph_fn G' f)\n                g:\\<lbrakk>A_Int e1 e2\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> (x, y) \\<in> :G':\\<lbrakk>A_Int e1 e2\\<rbrakk>\n 2. \\<And>e x y.\n       \\<lbrakk>\\<And>x y.\n                   \\<lbrakk>x \\<in> vertices G'; y \\<in> vertices G';\n                    (g (f x), g (f y))\n                    \\<in> :map_graph_fn (map_graph_fn G' f)\n                            g:\\<lbrakk>e\\<rbrakk>\\<rbrakk>\n                   \\<Longrightarrow> (x, y) \\<in> :G':\\<lbrakk>e\\<rbrakk>;\n        x \\<in> vertices G'; y \\<in> vertices G';\n        (g (f x), g (f y))\n        \\<in> :map_graph_fn (map_graph_fn G' f)\n                g:\\<lbrakk>A_Cnv e\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> (x, y) \\<in> :G':\\<lbrakk>A_Cnv e\\<rbrakk>\n 3. \\<And>x xa y.\n       \\<lbrakk>xa \\<in> vertices G'; y \\<in> vertices G';\n        (g (f xa), g (f y))\n        \\<in> :map_graph_fn (map_graph_fn G' f)\n                g:\\<lbrakk>A_Lbl x\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> (xa, y) \\<in> :G':\\<lbrakk>A_Lbl x\\<rbrakk>", "then"], ["proof (chain)\npicking this:\n  (l, x', y') \\<in> edges G\n  g (f x) = g x'\n  g (f y) = g y'", "obtain x' y'\n          where xy:\"(l, x', y') \\<in> edges G'\" \"g (f x) = g (f x')\" \"g (f y) = g (f y')\""], ["proof (prove)\nusing this:\n  (l, x', y') \\<in> edges G\n  g (f x) = g x'\n  g (f y) = g y'\n\ngoal (1 subgoal):\n 1. (\\<And>x' y'.\n        \\<lbrakk>(l, x', y') \\<in> edges G'; g (f x) = g (f x');\n         g (f y) = g (f y')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding G_def"], ["proof (prove)\nusing this:\n  (l, x', y') \\<in> edges (map_graph_fn G' f)\n  g (f x) = g x'\n  g (f y) = g y'\n\ngoal (1 subgoal):\n 1. (\\<And>x' y'.\n        \\<lbrakk>(l, x', y') \\<in> edges G'; g (f x) = g (f x');\n         g (f y) = g (f y')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  (l, x', y') \\<in> edges G'\n  g (f x) = g (f x')\n  g (f y) = g (f y')\n\ngoal (3 subgoals):\n 1. \\<And>e1 e2 x y.\n       \\<lbrakk>\\<And>x y.\n                   \\<lbrakk>x \\<in> vertices G'; y \\<in> vertices G';\n                    (g (f x), g (f y))\n                    \\<in> :map_graph_fn (map_graph_fn G' f)\n                            g:\\<lbrakk>e1\\<rbrakk>\\<rbrakk>\n                   \\<Longrightarrow> (x, y) \\<in> :G':\\<lbrakk>e1\\<rbrakk>;\n        \\<And>x y.\n           \\<lbrakk>x \\<in> vertices G'; y \\<in> vertices G';\n            (g (f x), g (f y))\n            \\<in> :map_graph_fn (map_graph_fn G' f)\n                    g:\\<lbrakk>e2\\<rbrakk>\\<rbrakk>\n           \\<Longrightarrow> (x, y) \\<in> :G':\\<lbrakk>e2\\<rbrakk>;\n        x \\<in> vertices G'; y \\<in> vertices G';\n        (g (f x), g (f y))\n        \\<in> :map_graph_fn (map_graph_fn G' f)\n                g:\\<lbrakk>A_Int e1 e2\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> (x, y) \\<in> :G':\\<lbrakk>A_Int e1 e2\\<rbrakk>\n 2. \\<And>e x y.\n       \\<lbrakk>\\<And>x y.\n                   \\<lbrakk>x \\<in> vertices G'; y \\<in> vertices G';\n                    (g (f x), g (f y))\n                    \\<in> :map_graph_fn (map_graph_fn G' f)\n                            g:\\<lbrakk>e\\<rbrakk>\\<rbrakk>\n                   \\<Longrightarrow> (x, y) \\<in> :G':\\<lbrakk>e\\<rbrakk>;\n        x \\<in> vertices G'; y \\<in> vertices G';\n        (g (f x), g (f y))\n        \\<in> :map_graph_fn (map_graph_fn G' f)\n                g:\\<lbrakk>A_Cnv e\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> (x, y) \\<in> :G':\\<lbrakk>A_Cnv e\\<rbrakk>\n 3. \\<And>x xa y.\n       \\<lbrakk>xa \\<in> vertices G'; y \\<in> vertices G';\n        (g (f xa), g (f y))\n        \\<in> :map_graph_fn (map_graph_fn G' f)\n                g:\\<lbrakk>A_Lbl x\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> (xa, y) \\<in> :G':\\<lbrakk>A_Lbl x\\<rbrakk>", "hence \"x' \\<in> vertices G'\" \"y' \\<in> vertices G'\""], ["proof (prove)\nusing this:\n  (l, x', y') \\<in> edges G'\n  g (f x) = g (f x')\n  g (f y) = g (f y')\n\ngoal (1 subgoal):\n 1. x' \\<in> vertices G' &&& y' \\<in> vertices G'", "using gr(1)"], ["proof (prove)\nusing this:\n  (l, x', y') \\<in> edges G'\n  g (f x) = g (f x')\n  g (f y) = g (f y')\n  graph G'\n\ngoal (1 subgoal):\n 1. x' \\<in> vertices G' &&& y' \\<in> vertices G'", "by auto"], ["proof (state)\nthis:\n  x' \\<in> vertices G'\n  y' \\<in> vertices G'\n\ngoal (3 subgoals):\n 1. \\<And>e1 e2 x y.\n       \\<lbrakk>\\<And>x y.\n                   \\<lbrakk>x \\<in> vertices G'; y \\<in> vertices G';\n                    (g (f x), g (f y))\n                    \\<in> :map_graph_fn (map_graph_fn G' f)\n                            g:\\<lbrakk>e1\\<rbrakk>\\<rbrakk>\n                   \\<Longrightarrow> (x, y) \\<in> :G':\\<lbrakk>e1\\<rbrakk>;\n        \\<And>x y.\n           \\<lbrakk>x \\<in> vertices G'; y \\<in> vertices G';\n            (g (f x), g (f y))\n            \\<in> :map_graph_fn (map_graph_fn G' f)\n                    g:\\<lbrakk>e2\\<rbrakk>\\<rbrakk>\n           \\<Longrightarrow> (x, y) \\<in> :G':\\<lbrakk>e2\\<rbrakk>;\n        x \\<in> vertices G'; y \\<in> vertices G';\n        (g (f x), g (f y))\n        \\<in> :map_graph_fn (map_graph_fn G' f)\n                g:\\<lbrakk>A_Int e1 e2\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> (x, y) \\<in> :G':\\<lbrakk>A_Int e1 e2\\<rbrakk>\n 2. \\<And>e x y.\n       \\<lbrakk>\\<And>x y.\n                   \\<lbrakk>x \\<in> vertices G'; y \\<in> vertices G';\n                    (g (f x), g (f y))\n                    \\<in> :map_graph_fn (map_graph_fn G' f)\n                            g:\\<lbrakk>e\\<rbrakk>\\<rbrakk>\n                   \\<Longrightarrow> (x, y) \\<in> :G':\\<lbrakk>e\\<rbrakk>;\n        x \\<in> vertices G'; y \\<in> vertices G';\n        (g (f x), g (f y))\n        \\<in> :map_graph_fn (map_graph_fn G' f)\n                g:\\<lbrakk>A_Cnv e\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> (x, y) \\<in> :G':\\<lbrakk>A_Cnv e\\<rbrakk>\n 3. \\<And>x xa y.\n       \\<lbrakk>xa \\<in> vertices G'; y \\<in> vertices G';\n        (g (f xa), g (f y))\n        \\<in> :map_graph_fn (map_graph_fn G' f)\n                g:\\<lbrakk>A_Lbl x\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> (xa, y) \\<in> :G':\\<lbrakk>A_Lbl x\\<rbrakk>", "from this[THEN gf_h,unfolded o_def] A_Lbl(1,2)[THEN gf_h,unfolded o_def]"], ["proof (chain)\npicking this:\n  g (f x') = h x'\n  g (f y') = h y'\n  g (f x) = h x\n  g (f y) = h y", "have \"h x = h x'\" \"h y = h y'\""], ["proof (prove)\nusing this:\n  g (f x') = h x'\n  g (f y') = h y'\n  g (f x) = h x\n  g (f y) = h y\n\ngoal (1 subgoal):\n 1. h x = h x' &&& h y = h y'", "using xy(2,3)"], ["proof (prove)\nusing this:\n  g (f x') = h x'\n  g (f y') = h y'\n  g (f x) = h x\n  g (f y) = h y\n  g (f x) = g (f x')\n  g (f y) = g (f y')\n\ngoal (1 subgoal):\n 1. h x = h x' &&& h y = h y'", "by auto"], ["proof (state)\nthis:\n  h x = h x'\n  h y = h y'\n\ngoal (3 subgoals):\n 1. \\<And>e1 e2 x y.\n       \\<lbrakk>\\<And>x y.\n                   \\<lbrakk>x \\<in> vertices G'; y \\<in> vertices G';\n                    (g (f x), g (f y))\n                    \\<in> :map_graph_fn (map_graph_fn G' f)\n                            g:\\<lbrakk>e1\\<rbrakk>\\<rbrakk>\n                   \\<Longrightarrow> (x, y) \\<in> :G':\\<lbrakk>e1\\<rbrakk>;\n        \\<And>x y.\n           \\<lbrakk>x \\<in> vertices G'; y \\<in> vertices G';\n            (g (f x), g (f y))\n            \\<in> :map_graph_fn (map_graph_fn G' f)\n                    g:\\<lbrakk>e2\\<rbrakk>\\<rbrakk>\n           \\<Longrightarrow> (x, y) \\<in> :G':\\<lbrakk>e2\\<rbrakk>;\n        x \\<in> vertices G'; y \\<in> vertices G';\n        (g (f x), g (f y))\n        \\<in> :map_graph_fn (map_graph_fn G' f)\n                g:\\<lbrakk>A_Int e1 e2\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> (x, y) \\<in> :G':\\<lbrakk>A_Int e1 e2\\<rbrakk>\n 2. \\<And>e x y.\n       \\<lbrakk>\\<And>x y.\n                   \\<lbrakk>x \\<in> vertices G'; y \\<in> vertices G';\n                    (g (f x), g (f y))\n                    \\<in> :map_graph_fn (map_graph_fn G' f)\n                            g:\\<lbrakk>e\\<rbrakk>\\<rbrakk>\n                   \\<Longrightarrow> (x, y) \\<in> :G':\\<lbrakk>e\\<rbrakk>;\n        x \\<in> vertices G'; y \\<in> vertices G';\n        (g (f x), g (f y))\n        \\<in> :map_graph_fn (map_graph_fn G' f)\n                g:\\<lbrakk>A_Cnv e\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> (x, y) \\<in> :G':\\<lbrakk>A_Cnv e\\<rbrakk>\n 3. \\<And>x xa y.\n       \\<lbrakk>xa \\<in> vertices G'; y \\<in> vertices G';\n        (g (f xa), g (f y))\n        \\<in> :map_graph_fn (map_graph_fn G' f)\n                g:\\<lbrakk>A_Lbl x\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> (xa, y) \\<in> :G':\\<lbrakk>A_Lbl x\\<rbrakk>", "hence \"(l, x, y) \\<in> edges G'\""], ["proof (prove)\nusing this:\n  h x = h x'\n  h y = h y'\n\ngoal (1 subgoal):\n 1. (l, x, y) \\<in> edges G'", "using h(4)[of l x y] h(4)[of l x' y'] xy(1)"], ["proof (prove)\nusing this:\n  h x = h x'\n  h y = h y'\n  ((l, x, y) \\<in> edges G') = ((l, h x, h y) \\<in> edges G')\n  ((l, x', y') \\<in> edges G') = ((l, h x', h y') \\<in> edges G')\n  (l, x', y') \\<in> edges G'\n\ngoal (1 subgoal):\n 1. (l, x, y) \\<in> edges G'", "by auto"], ["proof (state)\nthis:\n  (l, x, y) \\<in> edges G'\n\ngoal (3 subgoals):\n 1. \\<And>e1 e2 x y.\n       \\<lbrakk>\\<And>x y.\n                   \\<lbrakk>x \\<in> vertices G'; y \\<in> vertices G';\n                    (g (f x), g (f y))\n                    \\<in> :map_graph_fn (map_graph_fn G' f)\n                            g:\\<lbrakk>e1\\<rbrakk>\\<rbrakk>\n                   \\<Longrightarrow> (x, y) \\<in> :G':\\<lbrakk>e1\\<rbrakk>;\n        \\<And>x y.\n           \\<lbrakk>x \\<in> vertices G'; y \\<in> vertices G';\n            (g (f x), g (f y))\n            \\<in> :map_graph_fn (map_graph_fn G' f)\n                    g:\\<lbrakk>e2\\<rbrakk>\\<rbrakk>\n           \\<Longrightarrow> (x, y) \\<in> :G':\\<lbrakk>e2\\<rbrakk>;\n        x \\<in> vertices G'; y \\<in> vertices G';\n        (g (f x), g (f y))\n        \\<in> :map_graph_fn (map_graph_fn G' f)\n                g:\\<lbrakk>A_Int e1 e2\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> (x, y) \\<in> :G':\\<lbrakk>A_Int e1 e2\\<rbrakk>\n 2. \\<And>e x y.\n       \\<lbrakk>\\<And>x y.\n                   \\<lbrakk>x \\<in> vertices G'; y \\<in> vertices G';\n                    (g (f x), g (f y))\n                    \\<in> :map_graph_fn (map_graph_fn G' f)\n                            g:\\<lbrakk>e\\<rbrakk>\\<rbrakk>\n                   \\<Longrightarrow> (x, y) \\<in> :G':\\<lbrakk>e\\<rbrakk>;\n        x \\<in> vertices G'; y \\<in> vertices G';\n        (g (f x), g (f y))\n        \\<in> :map_graph_fn (map_graph_fn G' f)\n                g:\\<lbrakk>A_Cnv e\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> (x, y) \\<in> :G':\\<lbrakk>A_Cnv e\\<rbrakk>\n 3. \\<And>x xa y.\n       \\<lbrakk>xa \\<in> vertices G'; y \\<in> vertices G';\n        (g (f xa), g (f y))\n        \\<in> :map_graph_fn (map_graph_fn G' f)\n                g:\\<lbrakk>A_Lbl x\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> (xa, y) \\<in> :G':\\<lbrakk>A_Lbl x\\<rbrakk>", "then"], ["proof (chain)\npicking this:\n  (l, x, y) \\<in> edges G'", "show ?case"], ["proof (prove)\nusing this:\n  (l, x, y) \\<in> edges G'\n\ngoal (1 subgoal):\n 1. (x, y) \\<in> :G':\\<lbrakk>A_Lbl l\\<rbrakk>", "by (simp add:getRel_def)"], ["proof (state)\nthis:\n  (x, y) \\<in> :G':\\<lbrakk>A_Lbl l\\<rbrakk>\n\ngoal (2 subgoals):\n 1. \\<And>e1 e2 x y.\n       \\<lbrakk>\\<And>x y.\n                   \\<lbrakk>x \\<in> vertices G'; y \\<in> vertices G';\n                    (g (f x), g (f y))\n                    \\<in> :map_graph_fn (map_graph_fn G' f)\n                            g:\\<lbrakk>e1\\<rbrakk>\\<rbrakk>\n                   \\<Longrightarrow> (x, y) \\<in> :G':\\<lbrakk>e1\\<rbrakk>;\n        \\<And>x y.\n           \\<lbrakk>x \\<in> vertices G'; y \\<in> vertices G';\n            (g (f x), g (f y))\n            \\<in> :map_graph_fn (map_graph_fn G' f)\n                    g:\\<lbrakk>e2\\<rbrakk>\\<rbrakk>\n           \\<Longrightarrow> (x, y) \\<in> :G':\\<lbrakk>e2\\<rbrakk>;\n        x \\<in> vertices G'; y \\<in> vertices G';\n        (g (f x), g (f y))\n        \\<in> :map_graph_fn (map_graph_fn G' f)\n                g:\\<lbrakk>A_Int e1 e2\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> (x, y) \\<in> :G':\\<lbrakk>A_Int e1 e2\\<rbrakk>\n 2. \\<And>e x y.\n       \\<lbrakk>\\<And>x y.\n                   \\<lbrakk>x \\<in> vertices G'; y \\<in> vertices G';\n                    (g (f x), g (f y))\n                    \\<in> :map_graph_fn (map_graph_fn G' f)\n                            g:\\<lbrakk>e\\<rbrakk>\\<rbrakk>\n                   \\<Longrightarrow> (x, y) \\<in> :G':\\<lbrakk>e\\<rbrakk>;\n        x \\<in> vertices G'; y \\<in> vertices G';\n        (g (f x), g (f y))\n        \\<in> :map_graph_fn (map_graph_fn G' f)\n                g:\\<lbrakk>A_Cnv e\\<rbrakk>\\<rbrakk>\n       \\<Longrightarrow> (x, y) \\<in> :G':\\<lbrakk>A_Cnv e\\<rbrakk>", "qed auto"], ["proof (state)\nthis:\n  (x, y) \\<in> :G':\\<lbrakk>e\\<rbrakk>\n\ngoal (1 subgoal):\n 1. \\<exists>f g G.\n       G = map_graph_fn G (f \\<circ> g) \\<and>\n       G = map_graph_fn G' f \\<and>\n       subgraph (map_graph_fn G g) G' \\<and>\n       standard' C G \\<and>\n       (\\<forall>r. maintained r G' \\<longrightarrow> maintained r G) \\<and>\n       (\\<forall>x y e.\n           x \\<in> vertices G' \\<longrightarrow>\n           y \\<in> vertices G' \\<longrightarrow>\n           (g (f x), g (f y))\n           \\<in> :map_graph_fn G g:\\<lbrakk>e\\<rbrakk> \\<longrightarrow>\n           (x, y) \\<in> :G':\\<lbrakk>e\\<rbrakk>)", "}"], ["proof (state)\nthis:\n  \\<lbrakk>?xa4 \\<in> vertices G'; ?y4 \\<in> vertices G';\n   (g (f ?xa4), g (f ?y4))\n   \\<in> :map_graph_fn (map_graph_fn G' f) g:\\<lbrakk>?e4\\<rbrakk>\\<rbrakk>\n  \\<Longrightarrow> (?xa4, ?y4) \\<in> :G':\\<lbrakk>?e4\\<rbrakk>\n\ngoal (1 subgoal):\n 1. \\<exists>f g G.\n       G = map_graph_fn G (f \\<circ> g) \\<and>\n       G = map_graph_fn G' f \\<and>\n       subgraph (map_graph_fn G g) G' \\<and>\n       standard' C G \\<and>\n       (\\<forall>r. maintained r G' \\<longrightarrow> maintained r G) \\<and>\n       (\\<forall>x y e.\n           x \\<in> vertices G' \\<longrightarrow>\n           y \\<in> vertices G' \\<longrightarrow>\n           (g (f x), g (f y))\n           \\<in> :map_graph_fn G g:\\<lbrakk>e\\<rbrakk> \\<longrightarrow>\n           (x, y) \\<in> :G':\\<lbrakk>e\\<rbrakk>)", "hence cons:\"(\\<forall> x y e. x \\<in> vertices G' \\<longrightarrow> y \\<in> vertices G' \\<longrightarrow> (g (f x), g (f y)) \\<in> :map_graph_fn G g:\\<lbrakk>e\\<rbrakk> \\<longrightarrow> (x,y) \\<in> :G':\\<lbrakk>e\\<rbrakk>)\""], ["proof (prove)\nusing this:\n  \\<lbrakk>?xa4 \\<in> vertices G'; ?y4 \\<in> vertices G';\n   (g (f ?xa4), g (f ?y4))\n   \\<in> :map_graph_fn (map_graph_fn G' f) g:\\<lbrakk>?e4\\<rbrakk>\\<rbrakk>\n  \\<Longrightarrow> (?xa4, ?y4) \\<in> :G':\\<lbrakk>?e4\\<rbrakk>\n\ngoal (1 subgoal):\n 1. \\<forall>x y e.\n       x \\<in> vertices G' \\<longrightarrow>\n       y \\<in> vertices G' \\<longrightarrow>\n       (g (f x), g (f y))\n       \\<in> :map_graph_fn G g:\\<lbrakk>e\\<rbrakk> \\<longrightarrow>\n       (x, y) \\<in> :G':\\<lbrakk>e\\<rbrakk>", "unfolding G_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>?xa4 \\<in> vertices G'; ?y4 \\<in> vertices G';\n   (g (f ?xa4), g (f ?y4))\n   \\<in> :map_graph_fn (map_graph_fn G' f) g:\\<lbrakk>?e4\\<rbrakk>\\<rbrakk>\n  \\<Longrightarrow> (?xa4, ?y4) \\<in> :G':\\<lbrakk>?e4\\<rbrakk>\n\ngoal (1 subgoal):\n 1. \\<forall>x y e.\n       x \\<in> vertices G' \\<longrightarrow>\n       y \\<in> vertices G' \\<longrightarrow>\n       (g (f x), g (f y))\n       \\<in> :map_graph_fn (map_graph_fn G' f)\n               g:\\<lbrakk>e\\<rbrakk> \\<longrightarrow>\n       (x, y) \\<in> :G':\\<lbrakk>e\\<rbrakk>", "by auto"], ["proof (state)\nthis:\n  \\<forall>x y e.\n     x \\<in> vertices G' \\<longrightarrow>\n     y \\<in> vertices G' \\<longrightarrow>\n     (g (f x), g (f y))\n     \\<in> :map_graph_fn G g:\\<lbrakk>e\\<rbrakk> \\<longrightarrow>\n     (x, y) \\<in> :G':\\<lbrakk>e\\<rbrakk>\n\ngoal (1 subgoal):\n 1. \\<exists>f g G.\n       G = map_graph_fn G (f \\<circ> g) \\<and>\n       G = map_graph_fn G' f \\<and>\n       subgraph (map_graph_fn G g) G' \\<and>\n       standard' C G \\<and>\n       (\\<forall>r. maintained r G' \\<longrightarrow> maintained r G) \\<and>\n       (\\<forall>x y e.\n           x \\<in> vertices G' \\<longrightarrow>\n           y \\<in> vertices G' \\<longrightarrow>\n           (g (f x), g (f y))\n           \\<in> :map_graph_fn G g:\\<lbrakk>e\\<rbrakk> \\<longrightarrow>\n           (x, y) \\<in> :G':\\<lbrakk>e\\<rbrakk>)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>f g G.\n       G = map_graph_fn G (f \\<circ> g) \\<and>\n       G = map_graph_fn G' f \\<and>\n       subgraph (map_graph_fn G g) G' \\<and>\n       standard' C G \\<and>\n       (\\<forall>r. maintained r G' \\<longrightarrow> maintained r G) \\<and>\n       (\\<forall>x y e.\n           x \\<in> vertices G' \\<longrightarrow>\n           y \\<in> vertices G' \\<longrightarrow>\n           (g (f x), g (f y))\n           \\<in> :map_graph_fn G g:\\<lbrakk>e\\<rbrakk> \\<longrightarrow>\n           (x, y) \\<in> :G':\\<lbrakk>e\\<rbrakk>)", "using cons G_def fg_inv[symmetric] sg std mtd"], ["proof (prove)\nusing this:\n  \\<forall>x y e.\n     x \\<in> vertices G' \\<longrightarrow>\n     y \\<in> vertices G' \\<longrightarrow>\n     (g (f x), g (f y))\n     \\<in> :map_graph_fn G g:\\<lbrakk>e\\<rbrakk> \\<longrightarrow>\n     (x, y) \\<in> :G':\\<lbrakk>e\\<rbrakk>\n  G = map_graph_fn G' f\n  G = map_graph_fn G (f \\<circ> g)\n  subgraph (map_graph_fn G g) G'\n  standard' C G\n  maintained ?r1 G' \\<Longrightarrow> maintained ?r1 G\n\ngoal (1 subgoal):\n 1. \\<exists>f g G.\n       G = map_graph_fn G (f \\<circ> g) \\<and>\n       G = map_graph_fn G' f \\<and>\n       subgraph (map_graph_fn G g) G' \\<and>\n       standard' C G \\<and>\n       (\\<forall>r. maintained r G' \\<longrightarrow> maintained r G) \\<and>\n       (\\<forall>x y e.\n           x \\<in> vertices G' \\<longrightarrow>\n           y \\<in> vertices G' \\<longrightarrow>\n           (g (f x), g (f y))\n           \\<in> :map_graph_fn G g:\\<lbrakk>e\\<rbrakk> \\<longrightarrow>\n           (x, y) \\<in> :G':\\<lbrakk>e\\<rbrakk>)", "by blast"], ["proof (state)\nthis:\n  \\<exists>f g G.\n     G = map_graph_fn G (f \\<circ> g) \\<and>\n     G = map_graph_fn G' f \\<and>\n     subgraph (map_graph_fn G g) G' \\<and>\n     standard' C G \\<and>\n     (\\<forall>r. maintained r G' \\<longrightarrow> maintained r G) \\<and>\n     (\\<forall>x y e.\n         x \\<in> vertices G' \\<longrightarrow>\n         y \\<in> vertices G' \\<longrightarrow>\n         (g (f x), g (f y))\n         \\<in> :map_graph_fn G g:\\<lbrakk>e\\<rbrakk> \\<longrightarrow>\n         (x, y) \\<in> :G':\\<lbrakk>e\\<rbrakk>)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}