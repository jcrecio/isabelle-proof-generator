{"file_name": "/home/qj213/afp-2021-10-22/thys/Graph_Saturation/StandardModels.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Graph_Saturation", "problem_names": ["lemma ident_relI[intro]:\n  assumes min:\"\\<And> x. x \\<in> vertices G \\<Longrightarrow> (x,x) \\<in> getRel idt G\"\n  and max1:\"\\<And> x y. (x,y) \\<in> getRel idt G \\<Longrightarrow> x = y\"\n  and max2:\"\\<And> x y. (x,y) \\<in> getRel idt G \\<Longrightarrow> x \\<in> vertices G\"\nshows \"ident_rel idt G\"", "lemma standard_top_not_bot[intro]:\n\"standard' C G \\<Longrightarrow> :G:\\<lbrakk>\\<bottom>\\<rbrakk> \\<noteq> :G:\\<lbrakk>\\<top>\\<rbrakk>\"", "lemma consistent_iff_entails_nonsense:\n\"consistent t C T = (\\<not> entails t C T (\\<bottom>,\\<top>))\""], "translations": [["", "lemma ident_relI[intro]:\n  assumes min:\"\\<And> x. x \\<in> vertices G \\<Longrightarrow> (x,x) \\<in> getRel idt G\"\n  and max1:\"\\<And> x y. (x,y) \\<in> getRel idt G \\<Longrightarrow> x = y\"\n  and max2:\"\\<And> x y. (x,y) \\<in> getRel idt G \\<Longrightarrow> x \\<in> vertices G\"\nshows \"ident_rel idt G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ident_rel idt G", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. getRel idt G \\<subseteq> (\\<lambda>x. (x, x)) ` vertices G\n 2. (\\<lambda>x. (x, x)) ` vertices G \\<subseteq> getRel idt G", "from max1 max2"], ["proof (chain)\npicking this:\n  (?x, ?y) \\<in> getRel idt G \\<Longrightarrow> ?x = ?y\n  (?x, ?y) \\<in> getRel idt G \\<Longrightarrow> ?x \\<in> vertices G", "have \"\\<And> x y. (x,y) \\<in> getRel idt G \\<Longrightarrow> (x = y \\<and> x \\<in> vertices G)\""], ["proof (prove)\nusing this:\n  (?x, ?y) \\<in> getRel idt G \\<Longrightarrow> ?x = ?y\n  (?x, ?y) \\<in> getRel idt G \\<Longrightarrow> ?x \\<in> vertices G\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       (x, y) \\<in> getRel idt G \\<Longrightarrow>\n       x = y \\<and> x \\<in> vertices G", "by simp"], ["proof (state)\nthis:\n  (?x, ?y) \\<in> getRel idt G \\<Longrightarrow>\n  ?x = ?y \\<and> ?x \\<in> vertices G\n\ngoal (2 subgoals):\n 1. getRel idt G \\<subseteq> (\\<lambda>x. (x, x)) ` vertices G\n 2. (\\<lambda>x. (x, x)) ` vertices G \\<subseteq> getRel idt G", "thus \"getRel idt G \\<subseteq> (\\<lambda>x. (x, x)) ` vertices G\""], ["proof (prove)\nusing this:\n  (?x, ?y) \\<in> getRel idt G \\<Longrightarrow>\n  ?x = ?y \\<and> ?x \\<in> vertices G\n\ngoal (1 subgoal):\n 1. getRel idt G \\<subseteq> (\\<lambda>x. (x, x)) ` vertices G", "by auto"], ["proof (state)\nthis:\n  getRel idt G \\<subseteq> (\\<lambda>x. (x, x)) ` vertices G\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. (x, x)) ` vertices G \\<subseteq> getRel idt G", "show \"(\\<lambda>x. (x, x)) ` vertices G \\<subseteq> getRel idt G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. (x, x)) ` vertices G \\<subseteq> getRel idt G", "using min"], ["proof (prove)\nusing this:\n  ?x \\<in> vertices G \\<Longrightarrow> (?x, ?x) \\<in> getRel idt G\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. (x, x)) ` vertices G \\<subseteq> getRel idt G", "by auto"], ["proof (state)\nthis:\n  (\\<lambda>x. (x, x)) ` vertices G \\<subseteq> getRel idt G\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>Definition 4, generically.\\<close>"], ["", "definition standard :: \"('l \\<times> 'v) set \\<Rightarrow> 'l \\<Rightarrow> 'l \\<Rightarrow> 'l \\<Rightarrow> ('l, 'v) labeled_graph \\<Rightarrow> bool\" where\n\"standard C b t idt G\n   \\<equiv> G = restrict G\n   \\<and> vertices G \\<noteq> {}\n   \\<and> ident_rel idt G\n   \\<and> getRel b G = {}\n   \\<and> getRel t G = {(x,y). x\\<in>vertices G \\<and> y\\<in>vertices G}\n   \\<and> (\\<forall> (l,v) \\<in> C. getRel l G = {(v,v)})\""], ["", "text \\<open>Definition 4.\\<close>"], ["", "abbreviation standard' :: \"'v set \\<Rightarrow> ('v,'a) std_graph \\<Rightarrow> bool\" where\n\"standard' C \\<equiv> standard ((\\<lambda> c. (S_Const c,Inl c)) ` C) S_Bot S_Top S_Idt\""], ["", "text \\<open>Definition 5.\\<close>"], ["", "definition model :: \"'v set \\<Rightarrow> ('v,'a) std_graph \\<Rightarrow> ('v std_sentence) set \\<Rightarrow> bool\" where\n\"model C G T \\<equiv> standard' C G \\<and> (\\<forall> S \\<in> T. G \\<Turnstile> S)\""], ["", "text \\<open>Definition 5.\\<close>"], ["", "abbreviation consistent :: \"'b itself \\<Rightarrow> 'v set \\<Rightarrow> ('v std_sentence) set \\<Rightarrow> bool\" where\n\"consistent _ C T \\<equiv> \\<exists> (G::('v,'b) std_graph). model C G T\""], ["", "text \\<open>Definition 6.\\<close>"], ["", "definition entails :: \"'b itself \\<Rightarrow> 'v set \\<Rightarrow> ('v std_sentence) set \\<Rightarrow> 'v std_sentence \\<Rightarrow> bool\"  where\n\"entails _ C T S \\<equiv> \\<forall> (G::('v,'b) std_graph). model C G T \\<longrightarrow> G \\<Turnstile> S\""], ["", "lemma standard_top_not_bot[intro]:\n\"standard' C G \\<Longrightarrow> :G:\\<lbrakk>\\<bottom>\\<rbrakk> \\<noteq> :G:\\<lbrakk>\\<top>\\<rbrakk>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. standard' C G \\<Longrightarrow>\n    :G:\\<lbrakk>\\<bottom>\\<rbrakk> \\<noteq> :G:\\<lbrakk>\\<top>\\<rbrakk>", "unfolding standard_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. graph G \\<and>\n    vertices G \\<noteq> {} \\<and>\n    ident_rel S_Idt G \\<and>\n    getRel S_Bot G = {} \\<and>\n    getRel S_Top G =\n    {(x, y). x \\<in> vertices G \\<and> y \\<in> vertices G} \\<and>\n    (\\<forall>(l, v)\\<in>(\\<lambda>c. (S_Const c, Inl c)) ` C.\n        getRel l G = {(v, v)}) \\<Longrightarrow>\n    :G:\\<lbrakk>\\<bottom>\\<rbrakk> \\<noteq> :G:\\<lbrakk>\\<top>\\<rbrakk>", "by auto"], ["", "text \\<open>Lemma 2.\\<close>"], ["", "lemma consistent_iff_entails_nonsense:\n\"consistent t C T = (\\<not> entails t C T (\\<bottom>,\\<top>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>G. model C G T) = (\\<not> entails t C T (\\<bottom>, \\<top>))", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>G. model C G T \\<Longrightarrow>\n    \\<not> entails t C T (\\<bottom>, \\<top>)\n 2. \\<not> entails t C T (\\<bottom>, \\<top>) \\<Longrightarrow>\n    \\<exists>G. model C G T", "show \"consistent t C T \\<Longrightarrow> \\<not> entails t C T (\\<bottom>, \\<top>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>G. model C G T \\<Longrightarrow>\n    \\<not> entails t C T (\\<bottom>, \\<top>)", "using standard_top_not_bot"], ["proof (prove)\nusing this:\n  standard' ?C ?G \\<Longrightarrow>\n  :?G:\\<lbrakk>\\<bottom>\\<rbrakk> \\<noteq> :?G:\\<lbrakk>\\<top>\\<rbrakk>\n\ngoal (1 subgoal):\n 1. \\<exists>G. model C G T \\<Longrightarrow>\n    \\<not> entails t C T (\\<bottom>, \\<top>)", "unfolding entails_def model_def"], ["proof (prove)\nusing this:\n  standard' ?C ?G \\<Longrightarrow>\n  :?G:\\<lbrakk>\\<bottom>\\<rbrakk> \\<noteq> :?G:\\<lbrakk>\\<top>\\<rbrakk>\n\ngoal (1 subgoal):\n 1. \\<exists>G.\n       standard' C G \\<and>\n       (\\<forall>S\\<in>T. G \\<Turnstile> S) \\<Longrightarrow>\n    \\<not> (\\<forall>G.\n               standard' C G \\<and>\n               (\\<forall>S\\<in>T. G \\<Turnstile> S) \\<longrightarrow>\n               G \\<Turnstile> (\\<bottom>, \\<top>))", "by fastforce"], ["proof (state)\nthis:\n  \\<exists>G. model C G T \\<Longrightarrow>\n  \\<not> entails t C T (\\<bottom>, \\<top>)\n\ngoal (1 subgoal):\n 1. \\<not> entails t C T (\\<bottom>, \\<top>) \\<Longrightarrow>\n    \\<exists>G. model C G T", "qed (auto simp:entails_def model_def)"], ["", "end"]]}