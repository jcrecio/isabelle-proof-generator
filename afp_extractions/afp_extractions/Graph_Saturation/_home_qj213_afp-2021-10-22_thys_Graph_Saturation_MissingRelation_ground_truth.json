{"file_name": "/home/qj213/afp-2021-10-22/thys/Graph_Saturation/MissingRelation.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Graph_Saturation", "problem_names": ["lemma range_dom[simp]:\n  \"f `` Domain f = Range f\"\n  \"converse f `` Range f = Domain f\"", "lemma Gr_Image_image[simp]:\n  shows \"BNF_Def.Gr A f `` B = f ` (A \\<inter> B)\"", "lemma univalent_right_unique[simp]:\n  shows \"right_unique (\\<lambda> x y. (x,y) \\<in> R) = univalent R\"\n        \"univalent {(x,y).r x y} = right_unique r\"", "lemma univalent_inter[intro]:\n  assumes \"univalent f_a \\<or> univalent f_b\"\n  shows \"univalent (f_a \\<inter> f_b)\"", "lemma univalent_union[intro]:\n  assumes \"univalent f_a\" \"univalent f_b\" \"Domain f_a \\<inter> Domain f_b = Domain (f_a \\<inter> f_b)\"\n  shows \"univalent (f_a \\<union> f_b)\"", "lemma Gr_domain[simp]:\n  shows \"Domain (BNF_Def.Gr A f) = A\"\n    and \"Domain (BNF_Def.Gr A id O R) = A \\<inter> Domain R\"", "lemma in_Gr[simp]:\n  shows \"(x,y) \\<in> BNF_Def.Gr A f \\<longleftrightarrow> x \\<in> A \\<and> f x = y\"", "lemma Id_on_domain[simp]:\n  \"Domain (Id_on A O f) = A \\<inter> Domain f\"", "lemma Domain_id_on:\n  shows \"Domain (R O S) = Domain R \\<inter> R\\<inverse> `` Domain S\"", "lemma Id_on_int:\n  \"Id_on A O f = (A \\<times> UNIV) \\<inter> f\"", "lemma Domain_int_univ:\n  \"Domain (A \\<times> UNIV \\<inter> f) = A \\<inter> Domain f\"", "lemma Domain_O:\n  assumes \"a \\<subseteq> Domain x\" \"x `` a \\<subseteq> Domain y\"\n  shows \"a \\<subseteq> Domain (x O y)\"", "lemma fst_UNIV[intro]:\n  \"A \\<subseteq> fst ` A \\<times> UNIV\"", "lemma Gr_range[simp]:\n  shows \"Range (BNF_Def.Gr A f) = f ` A\"", "lemma tuple_disj[simp]:\n  shows \"{y. y = x \\<or> y = z} = {x,z}\"", "lemma univalent_empty [intro]: \"univalent {}\"", "lemma univalent_char : \"univalent R \\<longleftrightarrow> converse R O R \\<subseteq> Id\"", "lemma univalentD [dest]: \"univalent R \\<Longrightarrow> (x,y)\\<in> R \\<Longrightarrow> (x,z)\\<in> R \\<Longrightarrow> z = y\"", "lemma univalentI: \"converse R O R \\<subseteq> Id \\<Longrightarrow> univalent R\"", "lemma univalent_composes[intro]:assumes \"univalent R\" \"univalent S\"\n shows \"univalent (R O S)\"", "lemma id_univalent[intro]:\"univalent (Id_on x)\"", "lemma univalent_insert:\n  assumes \"\\<And> c. (a,c) \\<notin> R\"\n  shows \"univalent (insert (a,b) R) \\<longleftrightarrow> univalent R\"", "lemma univalent_set_distinctI[intro]: (* not an iff: duplicates of A and B might align *)\n  assumes \"distinct A\"\n  shows \"univalent (set (zip A B))\"", "lemma set_zip_conv[simp]:\n\"(set (zip A B))\\<inverse> = set (zip B A)\"", "lemma univalent_O_converse[simp]:\n  assumes \"univalent (converse R)\"\n  shows \"R O converse R = Id_on (Domain R)\"", "lemma Image_outside_Domain[simp]:\n  assumes \"Domain R \\<inter> A = {}\"\n  shows \"R `` A = {}\"", "lemma Image_Domain[simp]:\n  assumes \"Domain R = A\"\n  shows \"R `` A = Range R\"", "lemma Domain_set_zip[simp]:\n  assumes \"length A = length B\"\n  shows \"Domain (set (zip A B)) = set A\"", "lemma Range_set_zip[simp]:\n  assumes \"length A = length B\"\n  shows \"Range (set (zip A B)) = set B\"", "lemma Gr_univalent[intro]:\n  shows \"univalent (BNF_Def.Gr A f)\"", "lemma univalent_fn[simp]:\n  assumes \"univalent R\"\n  shows \"BNF_Def.Gr (Domain R) (\\<lambda> x. SOME y. (x,y) \\<in> R) = R\" (is \"?lhs = _\")", "lemma Gr_not_in[intro]:\n  shows \"x \\<notin> F \\<or> f x \\<noteq> y \\<Longrightarrow> (x,y) \\<notin> BNF_Def.Gr F f\"", "lemma Gr_insert[simp]:\n  shows \"BNF_Def.Gr (insert x F) f = insert (x,f x) (BNF_Def.Gr F f)\"", "lemma Gr_empty[simp]:\n  shows \"BNF_Def.Gr {} f = {}\"", "lemma Gr_card[simp]:\n  shows \"card (BNF_Def.Gr A f) = card A\"", "lemma univalent_finite[simp]:\n  assumes \"univalent R\"\n  shows \"card (Domain R) = card R\"\n        \"finite (Domain R) \\<longleftrightarrow> finite R\"", "lemma trancl_power_least:\n  \"p \\<in> R\\<^sup>+ \\<longleftrightarrow> (\\<exists>n. p \\<in> R ^^ Suc n \\<and> (p \\<in> R ^^ n \\<longrightarrow> n = 0))\"", "lemma refl_on_tranclI :\n  assumes \"refl_on A r\"\n  shows \"refl_on A (trancl r)\"", "lemma trans_def: \"trans r = ((Id \\<union> r) O r = r)\" \"trans r = (r O (Id \\<union> r) = r)\"", "lemma idempotent_impl_trans: \"idempotent r \\<Longrightarrow> trans r\"", "lemma refl_trans_impl_idempotent[intro]: \"refl_on A r \\<Longrightarrow> trans r \\<Longrightarrow> idempotent r\"", "lemma idempotent_subset:\n  assumes \"idempotent R\" \"S \\<subseteq> R\"\n  shows \"S O R \\<subseteq> R\" \"R O S \\<subseteq> R\" \"S O R O S \\<subseteq> R\"", "lemma list_sorted_max[simp]:\n  shows \"sorted list \\<Longrightarrow> list = (x#xs) \\<Longrightarrow> fold max xs x = (last list)\""], "translations": [["", "lemma range_dom[simp]:\n  \"f `` Domain f = Range f\"\n  \"converse f `` Range f = Domain f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f `` Domain f = Range f &&& f\\<inverse> `` Range f = Domain f", "by auto"], ["", "lemma Gr_Image_image[simp]:\n  shows \"BNF_Def.Gr A f `` B = f ` (A \\<inter> B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. BNF_Def.Gr A f `` B = f ` (A \\<inter> B)", "unfolding BNF_Def.Gr_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {(a, f a) |a. a \\<in> A} `` B = f ` (A \\<inter> B)", "by auto"], ["", "definition univalent where \"univalent R = (\\<forall> x y z. (x,y)\\<in> R \\<and> (x,z)\\<in> R \\<longrightarrow> z = y)\""], ["", "lemma univalent_right_unique[simp]:\n  shows \"right_unique (\\<lambda> x y. (x,y) \\<in> R) = univalent R\"\n        \"univalent {(x,y).r x y} = right_unique r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. right_unique (\\<lambda>x y. (x, y) \\<in> R) = univalent R &&&\n    univalent {(x, y). r x y} = right_unique r", "unfolding univalent_def right_unique_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>x y z.\n        (x, y) \\<in> R \\<longrightarrow>\n        (x, z) \\<in> R \\<longrightarrow> y = z) =\n    (\\<forall>x y z.\n        (x, y) \\<in> R \\<and> (x, z) \\<in> R \\<longrightarrow> z = y) &&&\n    (\\<forall>x y z.\n        (x, y) \\<in> {(x, y). r x y} \\<and>\n        (x, z) \\<in> {(x, y). r x y} \\<longrightarrow>\n        z = y) =\n    (\\<forall>x y z. r x y \\<longrightarrow> r x z \\<longrightarrow> y = z)", "by auto"], ["", "declare univalent_right_unique(1)[pred_set_conv]"], ["", "lemma univalent_inter[intro]:\n  assumes \"univalent f_a \\<or> univalent f_b\"\n  shows \"univalent (f_a \\<inter> f_b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. univalent (f_a \\<inter> f_b)", "using assms"], ["proof (prove)\nusing this:\n  univalent f_a \\<or> univalent f_b\n\ngoal (1 subgoal):\n 1. univalent (f_a \\<inter> f_b)", "unfolding univalent_def"], ["proof (prove)\nusing this:\n  (\\<forall>x y z.\n      (x, y) \\<in> f_a \\<and> (x, z) \\<in> f_a \\<longrightarrow>\n      z = y) \\<or>\n  (\\<forall>x y z.\n      (x, y) \\<in> f_b \\<and> (x, z) \\<in> f_b \\<longrightarrow> z = y)\n\ngoal (1 subgoal):\n 1. \\<forall>x y z.\n       (x, y) \\<in> f_a \\<inter> f_b \\<and>\n       (x, z) \\<in> f_a \\<inter> f_b \\<longrightarrow>\n       z = y", "by auto"], ["", "lemma univalent_union[intro]:\n  assumes \"univalent f_a\" \"univalent f_b\" \"Domain f_a \\<inter> Domain f_b = Domain (f_a \\<inter> f_b)\"\n  shows \"univalent (f_a \\<union> f_b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. univalent (f_a \\<union> f_b)", "unfolding univalent_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x y z.\n       (x, y) \\<in> f_a \\<union> f_b \\<and>\n       (x, z) \\<in> f_a \\<union> f_b \\<longrightarrow>\n       z = y", "proof(clarify,rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y z.\n       \\<lbrakk>(x, y) \\<in> f_a \\<union> f_b;\n        (x, z) \\<in> f_a \\<union> f_b; z \\<noteq> y\\<rbrakk>\n       \\<Longrightarrow> False", "from assms"], ["proof (chain)\npicking this:\n  univalent f_a\n  univalent f_b\n  Domain f_a \\<inter> Domain f_b = Domain (f_a \\<inter> f_b)", "have uni:\"univalent (f_a \\<inter> f_b)\""], ["proof (prove)\nusing this:\n  univalent f_a\n  univalent f_b\n  Domain f_a \\<inter> Domain f_b = Domain (f_a \\<inter> f_b)\n\ngoal (1 subgoal):\n 1. univalent (f_a \\<inter> f_b)", "by auto"], ["proof (state)\nthis:\n  univalent (f_a \\<inter> f_b)\n\ngoal (1 subgoal):\n 1. \\<And>x y z.\n       \\<lbrakk>(x, y) \\<in> f_a \\<union> f_b;\n        (x, z) \\<in> f_a \\<union> f_b; z \\<noteq> y\\<rbrakk>\n       \\<Longrightarrow> False", "fix x y z"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y z.\n       \\<lbrakk>(x, y) \\<in> f_a \\<union> f_b;\n        (x, z) \\<in> f_a \\<union> f_b; z \\<noteq> y\\<rbrakk>\n       \\<Longrightarrow> False", "assume a:\"(x, y) \\<in> f_a \\<union> f_b\" \"(x, z) \\<in> f_a \\<union> f_b\" \"z \\<noteq> y\""], ["proof (state)\nthis:\n  (x, y) \\<in> f_a \\<union> f_b\n  (x, z) \\<in> f_a \\<union> f_b\n  z \\<noteq> y\n\ngoal (1 subgoal):\n 1. \\<And>x y z.\n       \\<lbrakk>(x, y) \\<in> f_a \\<union> f_b;\n        (x, z) \\<in> f_a \\<union> f_b; z \\<noteq> y\\<rbrakk>\n       \\<Longrightarrow> False", "show False"], ["proof (prove)\ngoal (1 subgoal):\n 1. False", "proof(cases \"(x,y) \\<in> f_a\")"], ["proof (state)\ngoal (2 subgoals):\n 1. (x, y) \\<in> f_a \\<Longrightarrow> False\n 2. (x, y) \\<notin> f_a \\<Longrightarrow> False", "case True"], ["proof (state)\nthis:\n  (x, y) \\<in> f_a\n\ngoal (2 subgoals):\n 1. (x, y) \\<in> f_a \\<Longrightarrow> False\n 2. (x, y) \\<notin> f_a \\<Longrightarrow> False", "hence fb:\"(x,z)\\<in>f_b\""], ["proof (prove)\nusing this:\n  (x, y) \\<in> f_a\n\ngoal (1 subgoal):\n 1. (x, z) \\<in> f_b", "using a assms[unfolded univalent_def]"], ["proof (prove)\nusing this:\n  (x, y) \\<in> f_a\n  (x, y) \\<in> f_a \\<union> f_b\n  (x, z) \\<in> f_a \\<union> f_b\n  z \\<noteq> y\n  \\<forall>x y z.\n     (x, y) \\<in> f_a \\<and> (x, z) \\<in> f_a \\<longrightarrow> z = y\n  \\<forall>x y z.\n     (x, y) \\<in> f_b \\<and> (x, z) \\<in> f_b \\<longrightarrow> z = y\n  Domain f_a \\<inter> Domain f_b = Domain (f_a \\<inter> f_b)\n\ngoal (1 subgoal):\n 1. (x, z) \\<in> f_b", "by auto"], ["proof (state)\nthis:\n  (x, z) \\<in> f_b\n\ngoal (2 subgoals):\n 1. (x, y) \\<in> f_a \\<Longrightarrow> False\n 2. (x, y) \\<notin> f_a \\<Longrightarrow> False", "hence \"x \\<in> (Domain f_a \\<inter> Domain f_b)\""], ["proof (prove)\nusing this:\n  (x, z) \\<in> f_b\n\ngoal (1 subgoal):\n 1. x \\<in> Domain f_a \\<inter> Domain f_b", "using True"], ["proof (prove)\nusing this:\n  (x, z) \\<in> f_b\n  (x, y) \\<in> f_a\n\ngoal (1 subgoal):\n 1. x \\<in> Domain f_a \\<inter> Domain f_b", "by auto"], ["proof (state)\nthis:\n  x \\<in> Domain f_a \\<inter> Domain f_b\n\ngoal (2 subgoals):\n 1. (x, y) \\<in> f_a \\<Longrightarrow> False\n 2. (x, y) \\<notin> f_a \\<Longrightarrow> False", "with assms uni fb True"], ["proof (chain)\npicking this:\n  univalent f_a\n  univalent f_b\n  Domain f_a \\<inter> Domain f_b = Domain (f_a \\<inter> f_b)\n  univalent (f_a \\<inter> f_b)\n  (x, z) \\<in> f_b\n  (x, y) \\<in> f_a\n  x \\<in> Domain f_a \\<inter> Domain f_b", "have \"z = y\""], ["proof (prove)\nusing this:\n  univalent f_a\n  univalent f_b\n  Domain f_a \\<inter> Domain f_b = Domain (f_a \\<inter> f_b)\n  univalent (f_a \\<inter> f_b)\n  (x, z) \\<in> f_b\n  (x, y) \\<in> f_a\n  x \\<in> Domain f_a \\<inter> Domain f_b\n\ngoal (1 subgoal):\n 1. z = y", "by (metis DomainE IntD1 IntD2 univalent_def)"], ["proof (state)\nthis:\n  z = y\n\ngoal (2 subgoals):\n 1. (x, y) \\<in> f_a \\<Longrightarrow> False\n 2. (x, y) \\<notin> f_a \\<Longrightarrow> False", "with a"], ["proof (chain)\npicking this:\n  (x, y) \\<in> f_a \\<union> f_b\n  (x, z) \\<in> f_a \\<union> f_b\n  z \\<noteq> y\n  z = y", "show False"], ["proof (prove)\nusing this:\n  (x, y) \\<in> f_a \\<union> f_b\n  (x, z) \\<in> f_a \\<union> f_b\n  z \\<noteq> y\n  z = y\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. (x, y) \\<notin> f_a \\<Longrightarrow> False", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. (x, y) \\<notin> f_a \\<Longrightarrow> False", "case False"], ["proof (state)\nthis:\n  (x, y) \\<notin> f_a\n\ngoal (1 subgoal):\n 1. (x, y) \\<notin> f_a \\<Longrightarrow> False", "hence fb:\"(x,z)\\<in>f_a\" \"(x,y) \\<in> f_b\""], ["proof (prove)\nusing this:\n  (x, y) \\<notin> f_a\n\ngoal (1 subgoal):\n 1. (x, z) \\<in> f_a &&& (x, y) \\<in> f_b", "using a assms[unfolded univalent_def]"], ["proof (prove)\nusing this:\n  (x, y) \\<notin> f_a\n  (x, y) \\<in> f_a \\<union> f_b\n  (x, z) \\<in> f_a \\<union> f_b\n  z \\<noteq> y\n  \\<forall>x y z.\n     (x, y) \\<in> f_a \\<and> (x, z) \\<in> f_a \\<longrightarrow> z = y\n  \\<forall>x y z.\n     (x, y) \\<in> f_b \\<and> (x, z) \\<in> f_b \\<longrightarrow> z = y\n  Domain f_a \\<inter> Domain f_b = Domain (f_a \\<inter> f_b)\n\ngoal (1 subgoal):\n 1. (x, z) \\<in> f_a &&& (x, y) \\<in> f_b", "by auto"], ["proof (state)\nthis:\n  (x, z) \\<in> f_a\n  (x, y) \\<in> f_b\n\ngoal (1 subgoal):\n 1. (x, y) \\<notin> f_a \\<Longrightarrow> False", "hence \"x \\<in> (Domain f_a \\<inter> Domain f_b)\""], ["proof (prove)\nusing this:\n  (x, z) \\<in> f_a\n  (x, y) \\<in> f_b\n\ngoal (1 subgoal):\n 1. x \\<in> Domain f_a \\<inter> Domain f_b", "by auto"], ["proof (state)\nthis:\n  x \\<in> Domain f_a \\<inter> Domain f_b\n\ngoal (1 subgoal):\n 1. (x, y) \\<notin> f_a \\<Longrightarrow> False", "with assms uni fb"], ["proof (chain)\npicking this:\n  univalent f_a\n  univalent f_b\n  Domain f_a \\<inter> Domain f_b = Domain (f_a \\<inter> f_b)\n  univalent (f_a \\<inter> f_b)\n  (x, z) \\<in> f_a\n  (x, y) \\<in> f_b\n  x \\<in> Domain f_a \\<inter> Domain f_b", "have \"z = y\""], ["proof (prove)\nusing this:\n  univalent f_a\n  univalent f_b\n  Domain f_a \\<inter> Domain f_b = Domain (f_a \\<inter> f_b)\n  univalent (f_a \\<inter> f_b)\n  (x, z) \\<in> f_a\n  (x, y) \\<in> f_b\n  x \\<in> Domain f_a \\<inter> Domain f_b\n\ngoal (1 subgoal):\n 1. z = y", "by (metis DomainE IntD1 IntD2 univalent_def)"], ["proof (state)\nthis:\n  z = y\n\ngoal (1 subgoal):\n 1. (x, y) \\<notin> f_a \\<Longrightarrow> False", "with a"], ["proof (chain)\npicking this:\n  (x, y) \\<in> f_a \\<union> f_b\n  (x, z) \\<in> f_a \\<union> f_b\n  z \\<noteq> y\n  z = y", "show False"], ["proof (prove)\nusing this:\n  (x, y) \\<in> f_a \\<union> f_b\n  (x, z) \\<in> f_a \\<union> f_b\n  z \\<noteq> y\n  z = y\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Gr_domain[simp]:\n  shows \"Domain (BNF_Def.Gr A f) = A\"\n    and \"Domain (BNF_Def.Gr A id O R) = A \\<inter> Domain R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Domain (BNF_Def.Gr A f) = A &&&\n    Domain (BNF_Def.Gr A id O R) = A \\<inter> Domain R", "unfolding BNF_Def.Gr_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. Domain {(a, f a) |a. a \\<in> A} = A &&&\n    Domain ({(a, id a) |a. a \\<in> A} O R) = A \\<inter> Domain R", "by auto"], ["", "lemma in_Gr[simp]:\n  shows \"(x,y) \\<in> BNF_Def.Gr A f \\<longleftrightarrow> x \\<in> A \\<and> f x = y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((x, y) \\<in> BNF_Def.Gr A f) = (x \\<in> A \\<and> f x = y)", "unfolding BNF_Def.Gr_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((x, y) \\<in> {(a, f a) |a. a \\<in> A}) = (x \\<in> A \\<and> f x = y)", "by auto"], ["", "lemma Id_on_domain[simp]:\n  \"Domain (Id_on A O f) = A \\<inter> Domain f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Domain (Id_on A O f) = A \\<inter> Domain f", "by auto"], ["", "lemma Domain_id_on:\n  shows \"Domain (R O S) = Domain R \\<inter> R\\<inverse> `` Domain S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Domain (R O S) = Domain R \\<inter> R\\<inverse> `` Domain S", "by auto"], ["", "lemma Id_on_int:\n  \"Id_on A O f = (A \\<times> UNIV) \\<inter> f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Id_on A O f = A \\<times> UNIV \\<inter> f", "by auto"], ["", "lemma Domain_int_univ:\n  \"Domain (A \\<times> UNIV \\<inter> f) = A \\<inter> Domain f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Domain (A \\<times> UNIV \\<inter> f) = A \\<inter> Domain f", "by auto"], ["", "lemma Domain_O:\n  assumes \"a \\<subseteq> Domain x\" \"x `` a \\<subseteq> Domain y\"\n  shows \"a \\<subseteq> Domain (x O y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<subseteq> Domain (x O y)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa. xa \\<in> a \\<Longrightarrow> xa \\<in> Domain (x O y)", "fix xa"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa. xa \\<in> a \\<Longrightarrow> xa \\<in> Domain (x O y)", "assume xa:\"xa \\<in> a\""], ["proof (state)\nthis:\n  xa \\<in> a\n\ngoal (1 subgoal):\n 1. \\<And>xa. xa \\<in> a \\<Longrightarrow> xa \\<in> Domain (x O y)", "hence \"xa \\<in> Domain x\""], ["proof (prove)\nusing this:\n  xa \\<in> a\n\ngoal (1 subgoal):\n 1. xa \\<in> Domain x", "using assms"], ["proof (prove)\nusing this:\n  xa \\<in> a\n  a \\<subseteq> Domain x\n  x `` a \\<subseteq> Domain y\n\ngoal (1 subgoal):\n 1. xa \\<in> Domain x", "by auto"], ["proof (state)\nthis:\n  xa \\<in> Domain x\n\ngoal (1 subgoal):\n 1. \\<And>xa. xa \\<in> a \\<Longrightarrow> xa \\<in> Domain (x O y)", "then"], ["proof (chain)\npicking this:\n  xa \\<in> Domain x", "obtain w where xaw:\"(xa,w) \\<in> x\""], ["proof (prove)\nusing this:\n  xa \\<in> Domain x\n\ngoal (1 subgoal):\n 1. (\\<And>w. (xa, w) \\<in> x \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  (xa, w) \\<in> x\n\ngoal (1 subgoal):\n 1. \\<And>xa. xa \\<in> a \\<Longrightarrow> xa \\<in> Domain (x O y)", "with xa"], ["proof (chain)\npicking this:\n  xa \\<in> a\n  (xa, w) \\<in> x", "have \"w \\<in> Domain y\""], ["proof (prove)\nusing this:\n  xa \\<in> a\n  (xa, w) \\<in> x\n\ngoal (1 subgoal):\n 1. w \\<in> Domain y", "using assms"], ["proof (prove)\nusing this:\n  xa \\<in> a\n  (xa, w) \\<in> x\n  a \\<subseteq> Domain x\n  x `` a \\<subseteq> Domain y\n\ngoal (1 subgoal):\n 1. w \\<in> Domain y", "by auto"], ["proof (state)\nthis:\n  w \\<in> Domain y\n\ngoal (1 subgoal):\n 1. \\<And>xa. xa \\<in> a \\<Longrightarrow> xa \\<in> Domain (x O y)", "then"], ["proof (chain)\npicking this:\n  w \\<in> Domain y", "obtain v where \"(w,v) \\<in> y\""], ["proof (prove)\nusing this:\n  w \\<in> Domain y\n\ngoal (1 subgoal):\n 1. (\\<And>v. (w, v) \\<in> y \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  (w, v) \\<in> y\n\ngoal (1 subgoal):\n 1. \\<And>xa. xa \\<in> a \\<Longrightarrow> xa \\<in> Domain (x O y)", "with xaw"], ["proof (chain)\npicking this:\n  (xa, w) \\<in> x\n  (w, v) \\<in> y", "have \"(xa,v) \\<in> x O y\""], ["proof (prove)\nusing this:\n  (xa, w) \\<in> x\n  (w, v) \\<in> y\n\ngoal (1 subgoal):\n 1. (xa, v) \\<in> x O y", "by auto"], ["proof (state)\nthis:\n  (xa, v) \\<in> x O y\n\ngoal (1 subgoal):\n 1. \\<And>xa. xa \\<in> a \\<Longrightarrow> xa \\<in> Domain (x O y)", "thus \"xa \\<in> Domain (x O y)\""], ["proof (prove)\nusing this:\n  (xa, v) \\<in> x O y\n\ngoal (1 subgoal):\n 1. xa \\<in> Domain (x O y)", "by auto"], ["proof (state)\nthis:\n  xa \\<in> Domain (x O y)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma fst_UNIV[intro]:\n  \"A \\<subseteq> fst ` A \\<times> UNIV\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<subseteq> fst ` A \\<times> UNIV", "by force"], ["", "lemma Gr_range[simp]:\n  shows \"Range (BNF_Def.Gr A f) = f ` A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Range (BNF_Def.Gr A f) = f ` A", "unfolding BNF_Def.Gr_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. Range {(a, f a) |a. a \\<in> A} = f ` A", "by auto"], ["", "lemma tuple_disj[simp]:\n  shows \"{y. y = x \\<or> y = z} = {x,z}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {y. y = x \\<or> y = z} = {x, z}", "by auto"], ["", "lemma univalent_empty [intro]: \"univalent {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. univalent {}", "unfolding univalent_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x y z.\n       (x, y) \\<in> {} \\<and> (x, z) \\<in> {} \\<longrightarrow> z = y", "by auto"], ["", "lemma univalent_char : \"univalent R \\<longleftrightarrow> converse R O R \\<subseteq> Id\""], ["proof (prove)\ngoal (1 subgoal):\n 1. univalent R = (R\\<inverse> O R \\<subseteq> Id)", "unfolding univalent_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>x y z.\n        (x, y) \\<in> R \\<and> (x, z) \\<in> R \\<longrightarrow> z = y) =\n    (R\\<inverse> O R \\<subseteq> Id)", "by auto"], ["", "lemma univalentD [dest]: \"univalent R \\<Longrightarrow> (x,y)\\<in> R \\<Longrightarrow> (x,z)\\<in> R \\<Longrightarrow> z = y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>univalent R; (x, y) \\<in> R; (x, z) \\<in> R\\<rbrakk>\n    \\<Longrightarrow> z = y", "unfolding univalent_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>x y z.\n                (x, y) \\<in> R \\<and> (x, z) \\<in> R \\<longrightarrow>\n                z = y;\n     (x, y) \\<in> R; (x, z) \\<in> R\\<rbrakk>\n    \\<Longrightarrow> z = y", "by auto"], ["", "lemma univalentI: \"converse R O R \\<subseteq> Id \\<Longrightarrow> univalent R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. R\\<inverse> O R \\<subseteq> Id \\<Longrightarrow> univalent R", "unfolding univalent_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. R\\<inverse> O R \\<subseteq> Id \\<Longrightarrow>\n    \\<forall>x y z.\n       (x, y) \\<in> R \\<and> (x, z) \\<in> R \\<longrightarrow> z = y", "by auto"], ["", "lemma univalent_composes[intro]:assumes \"univalent R\" \"univalent S\"\n shows \"univalent (R O S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. univalent (R O S)", "using assms"], ["proof (prove)\nusing this:\n  univalent R\n  univalent S\n\ngoal (1 subgoal):\n 1. univalent (R O S)", "unfolding univalent_char"], ["proof (prove)\nusing this:\n  R\\<inverse> O R \\<subseteq> Id\n  S\\<inverse> O S \\<subseteq> Id\n\ngoal (1 subgoal):\n 1. (R O S)\\<inverse> O R O S \\<subseteq> Id", "by auto"], ["", "lemma id_univalent[intro]:\"univalent (Id_on x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. univalent (Id_on x)", "unfolding univalent_char"], ["proof (prove)\ngoal (1 subgoal):\n 1. (Id_on x)\\<inverse> O Id_on x \\<subseteq> Id", "by auto"], ["", "lemma univalent_insert:\n  assumes \"\\<And> c. (a,c) \\<notin> R\"\n  shows \"univalent (insert (a,b) R) \\<longleftrightarrow> univalent R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. univalent (insert (a, b) R) = univalent R", "using assms"], ["proof (prove)\nusing this:\n  (a, ?c) \\<notin> R\n\ngoal (1 subgoal):\n 1. univalent (insert (a, b) R) = univalent R", "unfolding univalent_def"], ["proof (prove)\nusing this:\n  (a, ?c) \\<notin> R\n\ngoal (1 subgoal):\n 1. (\\<forall>x y z.\n        (x, y) \\<in> insert (a, b) R \\<and>\n        (x, z) \\<in> insert (a, b) R \\<longrightarrow>\n        z = y) =\n    (\\<forall>x y z.\n        (x, y) \\<in> R \\<and> (x, z) \\<in> R \\<longrightarrow> z = y)", "by auto"], ["", "lemma univalent_set_distinctI[intro]: (* not an iff: duplicates of A and B might align *)\n  assumes \"distinct A\"\n  shows \"univalent (set (zip A B))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. univalent (set (zip A B))", "using assms"], ["proof (prove)\nusing this:\n  distinct A\n\ngoal (1 subgoal):\n 1. univalent (set (zip A B))", "proof(induct A arbitrary:B)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>B. distinct [] \\<Longrightarrow> univalent (set (zip [] B))\n 2. \\<And>a A B.\n       \\<lbrakk>\\<And>B.\n                   distinct A \\<Longrightarrow> univalent (set (zip A B));\n        distinct (a # A)\\<rbrakk>\n       \\<Longrightarrow> univalent (set (zip (a # A) B))", "case (Cons a A)"], ["proof (state)\nthis:\n  distinct A \\<Longrightarrow> univalent (set (zip A ?B))\n  distinct (a # A)\n\ngoal (2 subgoals):\n 1. \\<And>B. distinct [] \\<Longrightarrow> univalent (set (zip [] B))\n 2. \\<And>a A B.\n       \\<lbrakk>\\<And>B.\n                   distinct A \\<Longrightarrow> univalent (set (zip A B));\n        distinct (a # A)\\<rbrakk>\n       \\<Longrightarrow> univalent (set (zip (a # A) B))", "hence univ:\"univalent (set (zip A (tl B)))\""], ["proof (prove)\nusing this:\n  distinct A \\<Longrightarrow> univalent (set (zip A ?B))\n  distinct (a # A)\n\ngoal (1 subgoal):\n 1. univalent (set (zip A (tl B)))", "by auto"], ["proof (state)\nthis:\n  univalent (set (zip A (tl B)))\n\ngoal (2 subgoals):\n 1. \\<And>B. distinct [] \\<Longrightarrow> univalent (set (zip [] B))\n 2. \\<And>a A B.\n       \\<lbrakk>\\<And>B.\n                   distinct A \\<Longrightarrow> univalent (set (zip A B));\n        distinct (a # A)\\<rbrakk>\n       \\<Longrightarrow> univalent (set (zip (a # A) B))", "from Cons(2)"], ["proof (chain)\npicking this:\n  distinct (a # A)", "have \"a \\<notin> set (take x A)\" for x"], ["proof (prove)\nusing this:\n  distinct (a # A)\n\ngoal (1 subgoal):\n 1. a \\<notin> set (take x A)", "using in_set_takeD"], ["proof (prove)\nusing this:\n  distinct (a # A)\n  ?x \\<in> set (take ?n ?xs) \\<Longrightarrow> ?x \\<in> set ?xs\n\ngoal (1 subgoal):\n 1. a \\<notin> set (take x A)", "by fastforce"], ["proof (state)\nthis:\n  a \\<notin> set (take ?x A)\n\ngoal (2 subgoals):\n 1. \\<And>B. distinct [] \\<Longrightarrow> univalent (set (zip [] B))\n 2. \\<And>a A B.\n       \\<lbrakk>\\<And>B.\n                   distinct A \\<Longrightarrow> univalent (set (zip A B));\n        distinct (a # A)\\<rbrakk>\n       \\<Longrightarrow> univalent (set (zip (a # A) B))", "hence \"a \\<notin> Domain (set (zip A (tl B)))\""], ["proof (prove)\nusing this:\n  a \\<notin> set (take ?x A)\n\ngoal (1 subgoal):\n 1. a \\<notin> Domain (set (zip A (tl B)))", "unfolding Domain_fst set_map[symmetric] map_fst_zip_take"], ["proof (prove)\nusing this:\n  a \\<notin> set (take ?x A)\n\ngoal (1 subgoal):\n 1. a \\<notin> set (take (min (length A) (length (tl B))) A)", "by auto"], ["proof (state)\nthis:\n  a \\<notin> Domain (set (zip A (tl B)))\n\ngoal (2 subgoals):\n 1. \\<And>B. distinct [] \\<Longrightarrow> univalent (set (zip [] B))\n 2. \\<And>a A B.\n       \\<lbrakk>\\<And>B.\n                   distinct A \\<Longrightarrow> univalent (set (zip A B));\n        distinct (a # A)\\<rbrakk>\n       \\<Longrightarrow> univalent (set (zip (a # A) B))", "hence \"\\<And> c. (a,c) \\<notin> set (zip A (tl B))\""], ["proof (prove)\nusing this:\n  a \\<notin> Domain (set (zip A (tl B)))\n\ngoal (1 subgoal):\n 1. \\<And>c. (a, c) \\<notin> set (zip A (tl B))", "by auto"], ["proof (state)\nthis:\n  (a, ?c) \\<notin> set (zip A (tl B))\n\ngoal (2 subgoals):\n 1. \\<And>B. distinct [] \\<Longrightarrow> univalent (set (zip [] B))\n 2. \\<And>a A B.\n       \\<lbrakk>\\<And>B.\n                   distinct A \\<Longrightarrow> univalent (set (zip A B));\n        distinct (a # A)\\<rbrakk>\n       \\<Longrightarrow> univalent (set (zip (a # A) B))", "from univ univalent_insert[OF this]"], ["proof (chain)\npicking this:\n  univalent (set (zip A (tl B)))\n  univalent (insert (a, ?b) (set (zip A (tl B)))) =\n  univalent (set (zip A (tl B)))", "show ?case"], ["proof (prove)\nusing this:\n  univalent (set (zip A (tl B)))\n  univalent (insert (a, ?b) (set (zip A (tl B)))) =\n  univalent (set (zip A (tl B)))\n\ngoal (1 subgoal):\n 1. univalent (set (zip (a # A) B))", "by(cases B,auto)"], ["proof (state)\nthis:\n  univalent (set (zip (a # A) B))\n\ngoal (1 subgoal):\n 1. \\<And>B. distinct [] \\<Longrightarrow> univalent (set (zip [] B))", "qed auto"], ["", "lemma set_zip_conv[simp]:\n\"(set (zip A B))\\<inverse> = set (zip B A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (set (zip A B))\\<inverse> = set (zip B A)", "unfolding set_zip"], ["proof (prove)\ngoal (1 subgoal):\n 1. {(A ! i, B ! i) |i. i < min (length A) (length B)}\\<inverse> =\n    {(B ! i, A ! i) |i. i < min (length B) (length A)}", "by auto"], ["", "lemma univalent_O_converse[simp]:\n  assumes \"univalent (converse R)\"\n  shows \"R O converse R = Id_on (Domain R)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. R O R\\<inverse> = Id_on (Domain R)", "using assms[unfolded univalent_char]"], ["proof (prove)\nusing this:\n  (R\\<inverse>)\\<inverse> O R\\<inverse> \\<subseteq> Id\n\ngoal (1 subgoal):\n 1. R O R\\<inverse> = Id_on (Domain R)", "by auto"], ["", "lemma Image_outside_Domain[simp]:\n  assumes \"Domain R \\<inter> A = {}\"\n  shows \"R `` A = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. R `` A = {}", "using assms"], ["proof (prove)\nusing this:\n  Domain R \\<inter> A = {}\n\ngoal (1 subgoal):\n 1. R `` A = {}", "by auto"], ["", "lemma Image_Domain[simp]:\n  assumes \"Domain R = A\"\n  shows \"R `` A = Range R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. R `` A = Range R", "using assms"], ["proof (prove)\nusing this:\n  Domain R = A\n\ngoal (1 subgoal):\n 1. R `` A = Range R", "by auto"], ["", "lemma Domain_set_zip[simp]:\n  assumes \"length A = length B\"\n  shows \"Domain (set (zip A B)) = set A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Domain (set (zip A B)) = set A", "unfolding Domain_fst set_map[symmetric] map_fst_zip[OF assms]"], ["proof (prove)\ngoal (1 subgoal):\n 1. set A = set A", ".."], ["", "lemma Range_set_zip[simp]:\n  assumes \"length A = length B\"\n  shows \"Range (set (zip A B)) = set B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Range (set (zip A B)) = set B", "unfolding Range_snd set_map[symmetric] map_snd_zip[OF assms]"], ["proof (prove)\ngoal (1 subgoal):\n 1. set B = set B", ".."], ["", "lemma Gr_univalent[intro]:\n  shows \"univalent (BNF_Def.Gr A f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. univalent (BNF_Def.Gr A f)", "unfolding BNF_Def.Gr_def univalent_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x y z.\n       (x, y) \\<in> {(a, f a) |a. a \\<in> A} \\<and>\n       (x, z) \\<in> {(a, f a) |a. a \\<in> A} \\<longrightarrow>\n       z = y", "by auto"], ["", "lemma univalent_fn[simp]:\n  assumes \"univalent R\"\n  shows \"BNF_Def.Gr (Domain R) (\\<lambda> x. SOME y. (x,y) \\<in> R) = R\" (is \"?lhs = _\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. BNF_Def.Gr (Domain R) (\\<lambda>x. SOME y. (x, y) \\<in> R) = R", "unfolding set_eq_iff"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x.\n       (x \\<in> BNF_Def.Gr (Domain R)\n                 (\\<lambda>x. SOME y. (x, y) \\<in> R)) =\n       (x \\<in> R)", "proof(clarify,standard)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       (a, b)\n       \\<in> BNF_Def.Gr (Domain R)\n              (\\<lambda>x. SOME y. (x, y) \\<in> R) \\<Longrightarrow>\n       (a, b) \\<in> R\n 2. \\<And>a b.\n       (a, b) \\<in> R \\<Longrightarrow>\n       (a, b)\n       \\<in> BNF_Def.Gr (Domain R) (\\<lambda>x. SOME y. (x, y) \\<in> R)", "fix a b"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       (a, b)\n       \\<in> BNF_Def.Gr (Domain R)\n              (\\<lambda>x. SOME y. (x, y) \\<in> R) \\<Longrightarrow>\n       (a, b) \\<in> R\n 2. \\<And>a b.\n       (a, b) \\<in> R \\<Longrightarrow>\n       (a, b)\n       \\<in> BNF_Def.Gr (Domain R) (\\<lambda>x. SOME y. (x, y) \\<in> R)", "assume a:\"(a, b) \\<in> R\""], ["proof (state)\nthis:\n  (a, b) \\<in> R\n\ngoal (2 subgoals):\n 1. \\<And>a b.\n       (a, b)\n       \\<in> BNF_Def.Gr (Domain R)\n              (\\<lambda>x. SOME y. (x, y) \\<in> R) \\<Longrightarrow>\n       (a, b) \\<in> R\n 2. \\<And>a b.\n       (a, b) \\<in> R \\<Longrightarrow>\n       (a, b)\n       \\<in> BNF_Def.Gr (Domain R) (\\<lambda>x. SOME y. (x, y) \\<in> R)", "hence \"(a,SOME y. (a, y) \\<in> R) \\<in> R\""], ["proof (prove)\nusing this:\n  (a, b) \\<in> R\n\ngoal (1 subgoal):\n 1. (a, SOME y. (a, y) \\<in> R) \\<in> R", "using someI"], ["proof (prove)\nusing this:\n  (a, b) \\<in> R\n  ?P ?x \\<Longrightarrow> ?P (Eps ?P)\n\ngoal (1 subgoal):\n 1. (a, SOME y. (a, y) \\<in> R) \\<in> R", "by metis"], ["proof (state)\nthis:\n  (a, SOME y. (a, y) \\<in> R) \\<in> R\n\ngoal (2 subgoals):\n 1. \\<And>a b.\n       (a, b)\n       \\<in> BNF_Def.Gr (Domain R)\n              (\\<lambda>x. SOME y. (x, y) \\<in> R) \\<Longrightarrow>\n       (a, b) \\<in> R\n 2. \\<And>a b.\n       (a, b) \\<in> R \\<Longrightarrow>\n       (a, b)\n       \\<in> BNF_Def.Gr (Domain R) (\\<lambda>x. SOME y. (x, y) \\<in> R)", "with assms a"], ["proof (chain)\npicking this:\n  univalent R\n  (a, b) \\<in> R\n  (a, SOME y. (a, y) \\<in> R) \\<in> R", "have [simp]:\"(SOME y. (a, y) \\<in> R) = b\""], ["proof (prove)\nusing this:\n  univalent R\n  (a, b) \\<in> R\n  (a, SOME y. (a, y) \\<in> R) \\<in> R\n\ngoal (1 subgoal):\n 1. (SOME y. (a, y) \\<in> R) = b", "by auto"], ["proof (state)\nthis:\n  (SOME y. (a, y) \\<in> R) = b\n\ngoal (2 subgoals):\n 1. \\<And>a b.\n       (a, b)\n       \\<in> BNF_Def.Gr (Domain R)\n              (\\<lambda>x. SOME y. (x, y) \\<in> R) \\<Longrightarrow>\n       (a, b) \\<in> R\n 2. \\<And>a b.\n       (a, b) \\<in> R \\<Longrightarrow>\n       (a, b)\n       \\<in> BNF_Def.Gr (Domain R) (\\<lambda>x. SOME y. (x, y) \\<in> R)", "show \"(a, b) \\<in> ?lhs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (a, b) \\<in> BNF_Def.Gr (Domain R) (\\<lambda>x. SOME y. (x, y) \\<in> R)", "using a"], ["proof (prove)\nusing this:\n  (a, b) \\<in> R\n\ngoal (1 subgoal):\n 1. (a, b) \\<in> BNF_Def.Gr (Domain R) (\\<lambda>x. SOME y. (x, y) \\<in> R)", "by auto"], ["proof (state)\nthis:\n  (a, b) \\<in> BNF_Def.Gr (Domain R) (\\<lambda>x. SOME y. (x, y) \\<in> R)\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       (a, b)\n       \\<in> BNF_Def.Gr (Domain R)\n              (\\<lambda>x. SOME y. (x, y) \\<in> R) \\<Longrightarrow>\n       (a, b) \\<in> R", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       (a, b)\n       \\<in> BNF_Def.Gr (Domain R)\n              (\\<lambda>x. SOME y. (x, y) \\<in> R) \\<Longrightarrow>\n       (a, b) \\<in> R", "fix a b"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       (a, b)\n       \\<in> BNF_Def.Gr (Domain R)\n              (\\<lambda>x. SOME y. (x, y) \\<in> R) \\<Longrightarrow>\n       (a, b) \\<in> R", "assume a:\"(a,b) \\<in> ?lhs\""], ["proof (state)\nthis:\n  (a, b) \\<in> BNF_Def.Gr (Domain R) (\\<lambda>x. SOME y. (x, y) \\<in> R)\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       (a, b)\n       \\<in> BNF_Def.Gr (Domain R)\n              (\\<lambda>x. SOME y. (x, y) \\<in> R) \\<Longrightarrow>\n       (a, b) \\<in> R", "hence \"a \\<in> Domain R\" \"(SOME y. (a, y) \\<in> R) = b\""], ["proof (prove)\nusing this:\n  (a, b) \\<in> BNF_Def.Gr (Domain R) (\\<lambda>x. SOME y. (x, y) \\<in> R)\n\ngoal (1 subgoal):\n 1. a \\<in> Domain R &&& (SOME y. (a, y) \\<in> R) = b", "by auto"], ["proof (state)\nthis:\n  a \\<in> Domain R\n  (SOME y. (a, y) \\<in> R) = b\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       (a, b)\n       \\<in> BNF_Def.Gr (Domain R)\n              (\\<lambda>x. SOME y. (x, y) \\<in> R) \\<Longrightarrow>\n       (a, b) \\<in> R", "thus \"(a,b) \\<in> R\""], ["proof (prove)\nusing this:\n  a \\<in> Domain R\n  (SOME y. (a, y) \\<in> R) = b\n\ngoal (1 subgoal):\n 1. (a, b) \\<in> R", "using someI"], ["proof (prove)\nusing this:\n  a \\<in> Domain R\n  (SOME y. (a, y) \\<in> R) = b\n  ?P ?x \\<Longrightarrow> ?P (Eps ?P)\n\ngoal (1 subgoal):\n 1. (a, b) \\<in> R", "by auto"], ["proof (state)\nthis:\n  (a, b) \\<in> R\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Gr_not_in[intro]:\n  shows \"x \\<notin> F \\<or> f x \\<noteq> y \\<Longrightarrow> (x,y) \\<notin> BNF_Def.Gr F f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<notin> F \\<or> f x \\<noteq> y \\<Longrightarrow>\n    (x, y) \\<notin> BNF_Def.Gr F f", "by auto"], ["", "lemma Gr_insert[simp]:\n  shows \"BNF_Def.Gr (insert x F) f = insert (x,f x) (BNF_Def.Gr F f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. BNF_Def.Gr (insert x F) f = insert (x, f x) (BNF_Def.Gr F f)", "unfolding BNF_Def.Gr_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {(a, f a) |a. a \\<in> insert x F} =\n    insert (x, f x) {(a, f a) |a. a \\<in> F}", "by auto"], ["", "lemma Gr_empty[simp]:\n  shows \"BNF_Def.Gr {} f = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. BNF_Def.Gr {} f = {}", "by auto"], ["", "lemma Gr_card[simp]:\n  shows \"card (BNF_Def.Gr A f) = card A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card (BNF_Def.Gr A f) = card A", "proof(cases \"finite A\")"], ["proof (state)\ngoal (2 subgoals):\n 1. finite A \\<Longrightarrow> card (BNF_Def.Gr A f) = card A\n 2. infinite A \\<Longrightarrow> card (BNF_Def.Gr A f) = card A", "case True"], ["proof (state)\nthis:\n  finite A\n\ngoal (2 subgoals):\n 1. finite A \\<Longrightarrow> card (BNF_Def.Gr A f) = card A\n 2. infinite A \\<Longrightarrow> card (BNF_Def.Gr A f) = card A", "hence \"finite (BNF_Def.Gr A f)\""], ["proof (prove)\nusing this:\n  finite A\n\ngoal (1 subgoal):\n 1. finite (BNF_Def.Gr A f)", "by (induct A,auto)"], ["proof (state)\nthis:\n  finite (BNF_Def.Gr A f)\n\ngoal (2 subgoals):\n 1. finite A \\<Longrightarrow> card (BNF_Def.Gr A f) = card A\n 2. infinite A \\<Longrightarrow> card (BNF_Def.Gr A f) = card A", "with True"], ["proof (chain)\npicking this:\n  finite A\n  finite (BNF_Def.Gr A f)", "show ?thesis"], ["proof (prove)\nusing this:\n  finite A\n  finite (BNF_Def.Gr A f)\n\ngoal (1 subgoal):\n 1. card (BNF_Def.Gr A f) = card A", "by (induct A,auto)"], ["proof (state)\nthis:\n  card (BNF_Def.Gr A f) = card A\n\ngoal (1 subgoal):\n 1. infinite A \\<Longrightarrow> card (BNF_Def.Gr A f) = card A", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. infinite A \\<Longrightarrow> card (BNF_Def.Gr A f) = card A", "have [simp]: \"infinite (Domain (A - {x})) = infinite (Domain (A::('a \\<times> 'b) set))\"\n    for A x"], ["proof (prove)\ngoal (1 subgoal):\n 1. infinite (Domain (A - {x})) = infinite (Domain A)", "using Diff_infinite_finite Domain_Diff_subset finite.emptyI\n              finite.insertI finite_Domain finite_subset Diff_subset Domain_mono"], ["proof (prove)\nusing this:\n  \\<lbrakk>finite ?T; infinite ?S\\<rbrakk>\n  \\<Longrightarrow> infinite (?S - ?T)\n  Domain ?A - Domain ?B \\<subseteq> Domain (?A - ?B)\n  finite {}\n  finite ?A \\<Longrightarrow> finite (insert ?a ?A)\n  finite ?r \\<Longrightarrow> finite (Domain ?r)\n  \\<lbrakk>?A \\<subseteq> ?B; finite ?B\\<rbrakk> \\<Longrightarrow> finite ?A\n  ?A - ?B \\<subseteq> ?A\n  ?r \\<subseteq> ?s \\<Longrightarrow> Domain ?r \\<subseteq> Domain ?s\n\ngoal (1 subgoal):\n 1. infinite (Domain (A - {x})) = infinite (Domain A)", "by metis"], ["proof (state)\nthis:\n  infinite (Domain (?A - {?x})) = infinite (Domain ?A)\n\ngoal (1 subgoal):\n 1. infinite A \\<Longrightarrow> card (BNF_Def.Gr A f) = card A", "have \"infinite (Domain A) \\<Longrightarrow> \\<exists> a. a \\<in> fst ` A\" for A::\"('a \\<times> 'b) set\""], ["proof (prove)\ngoal (1 subgoal):\n 1. infinite (Domain A) \\<Longrightarrow> \\<exists>a. a \\<in> fst ` A", "using finite.simps"], ["proof (prove)\nusing this:\n  finite ?a =\n  (?a = {} \\<or> (\\<exists>A a. ?a = insert a A \\<and> finite A))\n\ngoal (1 subgoal):\n 1. infinite (Domain A) \\<Longrightarrow> \\<exists>a. a \\<in> fst ` A", "unfolding Domain_fst"], ["proof (prove)\nusing this:\n  finite ?a =\n  (?a = {} \\<or> (\\<exists>A a. ?a = insert a A \\<and> finite A))\n\ngoal (1 subgoal):\n 1. infinite (fst ` A) \\<Longrightarrow> \\<exists>a. a \\<in> fst ` A", "by fastforce"], ["proof (state)\nthis:\n  infinite (Domain ?A) \\<Longrightarrow> \\<exists>a. a \\<in> fst ` ?A\n\ngoal (1 subgoal):\n 1. infinite A \\<Longrightarrow> card (BNF_Def.Gr A f) = card A", "hence [intro]:\"infinite (Domain A) \\<Longrightarrow> \\<exists> a b. (a,b) \\<in> A\" for A::\"('a \\<times> 'b) set\""], ["proof (prove)\nusing this:\n  infinite (Domain ?A) \\<Longrightarrow> \\<exists>a. a \\<in> fst ` ?A\n\ngoal (1 subgoal):\n 1. infinite (Domain A) \\<Longrightarrow> \\<exists>a b. (a, b) \\<in> A", "by fast"], ["proof (state)\nthis:\n  infinite (Domain ?A) \\<Longrightarrow> \\<exists>a b. (a, b) \\<in> ?A\n\ngoal (1 subgoal):\n 1. infinite A \\<Longrightarrow> card (BNF_Def.Gr A f) = card A", "let ?Gr = \"BNF_Def.Gr A f\""], ["proof (state)\ngoal (1 subgoal):\n 1. infinite A \\<Longrightarrow> card (BNF_Def.Gr A f) = card A", "case False"], ["proof (state)\nthis:\n  infinite A\n\ngoal (1 subgoal):\n 1. infinite A \\<Longrightarrow> card (BNF_Def.Gr A f) = card A", "hence \"infinite ?Gr\""], ["proof (prove)\nusing this:\n  infinite A\n\ngoal (1 subgoal):\n 1. infinite (BNF_Def.Gr A f)", "by(intro infinite_coinduct[of \"infinite o Domain\"],auto)"], ["proof (state)\nthis:\n  infinite (BNF_Def.Gr A f)\n\ngoal (1 subgoal):\n 1. infinite A \\<Longrightarrow> card (BNF_Def.Gr A f) = card A", "with False"], ["proof (chain)\npicking this:\n  infinite A\n  infinite (BNF_Def.Gr A f)", "show ?thesis"], ["proof (prove)\nusing this:\n  infinite A\n  infinite (BNF_Def.Gr A f)\n\ngoal (1 subgoal):\n 1. card (BNF_Def.Gr A f) = card A", "by (auto simp:BNF_Def.Gr_def)"], ["proof (state)\nthis:\n  card (BNF_Def.Gr A f) = card A\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma univalent_finite[simp]:\n  assumes \"univalent R\"\n  shows \"card (Domain R) = card R\"\n        \"finite (Domain R) \\<longleftrightarrow> finite R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card (Domain R) = card R &&& finite (Domain R) = finite R", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. card (Domain R) = card R\n 2. finite (Domain R) = finite R", "let ?R = \"BNF_Def.Gr (Domain R) (\\<lambda> x. SOME y. (x,y) \\<in> R)\""], ["proof (state)\ngoal (2 subgoals):\n 1. card (Domain R) = card R\n 2. finite (Domain R) = finite R", "have \"card (Domain ?R) = card ?R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card\n     (Domain (BNF_Def.Gr (Domain R) (\\<lambda>x. SOME y. (x, y) \\<in> R))) =\n    card (BNF_Def.Gr (Domain R) (\\<lambda>x. SOME y. (x, y) \\<in> R))", "by auto"], ["proof (state)\nthis:\n  card\n   (Domain (BNF_Def.Gr (Domain R) (\\<lambda>x. SOME y. (x, y) \\<in> R))) =\n  card (BNF_Def.Gr (Domain R) (\\<lambda>x. SOME y. (x, y) \\<in> R))\n\ngoal (2 subgoals):\n 1. card (Domain R) = card R\n 2. finite (Domain R) = finite R", "thus \"card (Domain  R) = card  R\""], ["proof (prove)\nusing this:\n  card\n   (Domain (BNF_Def.Gr (Domain R) (\\<lambda>x. SOME y. (x, y) \\<in> R))) =\n  card (BNF_Def.Gr (Domain R) (\\<lambda>x. SOME y. (x, y) \\<in> R))\n\ngoal (1 subgoal):\n 1. card (Domain R) = card R", "unfolding univalent_fn[OF assms]"], ["proof (prove)\nusing this:\n  card (Domain R) = card R\n\ngoal (1 subgoal):\n 1. card (Domain R) = card R", "."], ["proof (state)\nthis:\n  card (Domain R) = card R\n\ngoal (1 subgoal):\n 1. finite (Domain R) = finite R", "thus \"finite (Domain R) \\<longleftrightarrow> finite R\""], ["proof (prove)\nusing this:\n  card (Domain R) = card R\n\ngoal (1 subgoal):\n 1. finite (Domain R) = finite R", "by (metis Domain_empty_iff card_0_eq card.infinite finite.emptyI)"], ["proof (state)\nthis:\n  finite (Domain R) = finite R\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma trancl_power_least:\n  \"p \\<in> R\\<^sup>+ \\<longleftrightarrow> (\\<exists>n. p \\<in> R ^^ Suc n \\<and> (p \\<in> R ^^ n \\<longrightarrow> n = 0))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (p \\<in> R\\<^sup>+) =\n    (\\<exists>n.\n        p \\<in> R ^^ Suc n \\<and> (p \\<in> R ^^ n \\<longrightarrow> n = 0))", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. p \\<in> R\\<^sup>+ \\<Longrightarrow>\n    \\<exists>n.\n       p \\<in> R ^^ Suc n \\<and> (p \\<in> R ^^ n \\<longrightarrow> n = 0)\n 2. \\<exists>n.\n       p \\<in> R ^^ Suc n \\<and>\n       (p \\<in> R ^^ n \\<longrightarrow> n = 0) \\<Longrightarrow>\n    p \\<in> R\\<^sup>+", "assume \"p \\<in> R\\<^sup>+\""], ["proof (state)\nthis:\n  p \\<in> R\\<^sup>+\n\ngoal (2 subgoals):\n 1. p \\<in> R\\<^sup>+ \\<Longrightarrow>\n    \\<exists>n.\n       p \\<in> R ^^ Suc n \\<and> (p \\<in> R ^^ n \\<longrightarrow> n = 0)\n 2. \\<exists>n.\n       p \\<in> R ^^ Suc n \\<and>\n       (p \\<in> R ^^ n \\<longrightarrow> n = 0) \\<Longrightarrow>\n    p \\<in> R\\<^sup>+", "from this[unfolded trancl_power]"], ["proof (chain)\npicking this:\n  \\<exists>n>0. p \\<in> R ^^ n", "obtain n where p:\"n>0\" \"p \\<in> R ^^ n\""], ["proof (prove)\nusing this:\n  \\<exists>n>0. p \\<in> R ^^ n\n\ngoal (1 subgoal):\n 1. (\\<And>n.\n        \\<lbrakk>0 < n; p \\<in> R ^^ n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  0 < n\n  p \\<in> R ^^ n\n\ngoal (2 subgoals):\n 1. p \\<in> R\\<^sup>+ \\<Longrightarrow>\n    \\<exists>n.\n       p \\<in> R ^^ Suc n \\<and> (p \\<in> R ^^ n \\<longrightarrow> n = 0)\n 2. \\<exists>n.\n       p \\<in> R ^^ Suc n \\<and>\n       (p \\<in> R ^^ n \\<longrightarrow> n = 0) \\<Longrightarrow>\n    p \\<in> R\\<^sup>+", "define n' where \"n' = n - 1\""], ["proof (state)\nthis:\n  n' = n - 1\n\ngoal (2 subgoals):\n 1. p \\<in> R\\<^sup>+ \\<Longrightarrow>\n    \\<exists>n.\n       p \\<in> R ^^ Suc n \\<and> (p \\<in> R ^^ n \\<longrightarrow> n = 0)\n 2. \\<exists>n.\n       p \\<in> R ^^ Suc n \\<and>\n       (p \\<in> R ^^ n \\<longrightarrow> n = 0) \\<Longrightarrow>\n    p \\<in> R\\<^sup>+", "with p"], ["proof (chain)\npicking this:\n  0 < n\n  p \\<in> R ^^ n\n  n' = n - 1", "have \"Suc n' = n\""], ["proof (prove)\nusing this:\n  0 < n\n  p \\<in> R ^^ n\n  n' = n - 1\n\ngoal (1 subgoal):\n 1. Suc n' = n", "by auto"], ["proof (state)\nthis:\n  Suc n' = n\n\ngoal (2 subgoals):\n 1. p \\<in> R\\<^sup>+ \\<Longrightarrow>\n    \\<exists>n.\n       p \\<in> R ^^ Suc n \\<and> (p \\<in> R ^^ n \\<longrightarrow> n = 0)\n 2. \\<exists>n.\n       p \\<in> R ^^ Suc n \\<and>\n       (p \\<in> R ^^ n \\<longrightarrow> n = 0) \\<Longrightarrow>\n    p \\<in> R\\<^sup>+", "with p"], ["proof (chain)\npicking this:\n  0 < n\n  p \\<in> R ^^ n\n  Suc n' = n", "have \"p \\<in> R ^^ Suc n'\""], ["proof (prove)\nusing this:\n  0 < n\n  p \\<in> R ^^ n\n  Suc n' = n\n\ngoal (1 subgoal):\n 1. p \\<in> R ^^ Suc n'", "by auto"], ["proof (state)\nthis:\n  p \\<in> R ^^ Suc n'\n\ngoal (2 subgoals):\n 1. p \\<in> R\\<^sup>+ \\<Longrightarrow>\n    \\<exists>n.\n       p \\<in> R ^^ Suc n \\<and> (p \\<in> R ^^ n \\<longrightarrow> n = 0)\n 2. \\<exists>n.\n       p \\<in> R ^^ Suc n \\<and>\n       (p \\<in> R ^^ n \\<longrightarrow> n = 0) \\<Longrightarrow>\n    p \\<in> R\\<^sup>+", "thus \"\\<exists>n. p \\<in> R ^^ Suc n \\<and> (p \\<in> R ^^ n \\<longrightarrow> n = 0)\""], ["proof (prove)\nusing this:\n  p \\<in> R ^^ Suc n'\n\ngoal (1 subgoal):\n 1. \\<exists>n.\n       p \\<in> R ^^ Suc n \\<and> (p \\<in> R ^^ n \\<longrightarrow> n = 0)", "proof (induct n')"], ["proof (state)\ngoal (2 subgoals):\n 1. p \\<in> R ^^ Suc 0 \\<Longrightarrow>\n    \\<exists>n.\n       p \\<in> R ^^ Suc n \\<and> (p \\<in> R ^^ n \\<longrightarrow> n = 0)\n 2. \\<And>n'.\n       \\<lbrakk>p \\<in> R ^^ Suc n' \\<Longrightarrow>\n                \\<exists>n.\n                   p \\<in> R ^^ Suc n \\<and>\n                   (p \\<in> R ^^ n \\<longrightarrow> n = 0);\n        p \\<in> R ^^ Suc (Suc n')\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n.\n                            p \\<in> R ^^ Suc n \\<and>\n                            (p \\<in> R ^^ n \\<longrightarrow> n = 0)", "case 0"], ["proof (state)\nthis:\n  p \\<in> R ^^ Suc 0\n\ngoal (2 subgoals):\n 1. p \\<in> R ^^ Suc 0 \\<Longrightarrow>\n    \\<exists>n.\n       p \\<in> R ^^ Suc n \\<and> (p \\<in> R ^^ n \\<longrightarrow> n = 0)\n 2. \\<And>n'.\n       \\<lbrakk>p \\<in> R ^^ Suc n' \\<Longrightarrow>\n                \\<exists>n.\n                   p \\<in> R ^^ Suc n \\<and>\n                   (p \\<in> R ^^ n \\<longrightarrow> n = 0);\n        p \\<in> R ^^ Suc (Suc n')\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n.\n                            p \\<in> R ^^ Suc n \\<and>\n                            (p \\<in> R ^^ n \\<longrightarrow> n = 0)", "hence \"p \\<in> R ^^ 0 O R \\<and> (p \\<in> R ^^ 0 \\<longrightarrow> 0 = 0)\""], ["proof (prove)\nusing this:\n  p \\<in> R ^^ Suc 0\n\ngoal (1 subgoal):\n 1. p \\<in> R ^^ 0 O R \\<and>\n    (p \\<in> R ^^ 0 \\<longrightarrow> (0::'b) = (0::'b))", "by auto"], ["proof (state)\nthis:\n  p \\<in> R ^^ 0 O R \\<and>\n  (p \\<in> R ^^ 0 \\<longrightarrow> (0::?'b1) = (0::?'b1))\n\ngoal (2 subgoals):\n 1. p \\<in> R ^^ Suc 0 \\<Longrightarrow>\n    \\<exists>n.\n       p \\<in> R ^^ Suc n \\<and> (p \\<in> R ^^ n \\<longrightarrow> n = 0)\n 2. \\<And>n'.\n       \\<lbrakk>p \\<in> R ^^ Suc n' \\<Longrightarrow>\n                \\<exists>n.\n                   p \\<in> R ^^ Suc n \\<and>\n                   (p \\<in> R ^^ n \\<longrightarrow> n = 0);\n        p \\<in> R ^^ Suc (Suc n')\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n.\n                            p \\<in> R ^^ Suc n \\<and>\n                            (p \\<in> R ^^ n \\<longrightarrow> n = 0)", "then"], ["proof (chain)\npicking this:\n  p \\<in> R ^^ 0 O R \\<and>\n  (p \\<in> R ^^ 0 \\<longrightarrow> (0::?'b1) = (0::?'b1))", "show ?case"], ["proof (prove)\nusing this:\n  p \\<in> R ^^ 0 O R \\<and>\n  (p \\<in> R ^^ 0 \\<longrightarrow> (0::?'b1) = (0::?'b1))\n\ngoal (1 subgoal):\n 1. \\<exists>n.\n       p \\<in> R ^^ Suc n \\<and> (p \\<in> R ^^ n \\<longrightarrow> n = 0)", "by force"], ["proof (state)\nthis:\n  \\<exists>n.\n     p \\<in> R ^^ Suc n \\<and> (p \\<in> R ^^ n \\<longrightarrow> n = 0)\n\ngoal (1 subgoal):\n 1. \\<And>n'.\n       \\<lbrakk>p \\<in> R ^^ Suc n' \\<Longrightarrow>\n                \\<exists>n.\n                   p \\<in> R ^^ Suc n \\<and>\n                   (p \\<in> R ^^ n \\<longrightarrow> n = 0);\n        p \\<in> R ^^ Suc (Suc n')\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n.\n                            p \\<in> R ^^ Suc n \\<and>\n                            (p \\<in> R ^^ n \\<longrightarrow> n = 0)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n'.\n       \\<lbrakk>p \\<in> R ^^ Suc n' \\<Longrightarrow>\n                \\<exists>n.\n                   p \\<in> R ^^ Suc n \\<and>\n                   (p \\<in> R ^^ n \\<longrightarrow> n = 0);\n        p \\<in> R ^^ Suc (Suc n')\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n.\n                            p \\<in> R ^^ Suc n \\<and>\n                            (p \\<in> R ^^ n \\<longrightarrow> n = 0)", "case (Suc n)"], ["proof (state)\nthis:\n  p \\<in> R ^^ Suc n \\<Longrightarrow>\n  \\<exists>n.\n     p \\<in> R ^^ Suc n \\<and> (p \\<in> R ^^ n \\<longrightarrow> n = 0)\n  p \\<in> R ^^ Suc (Suc n)\n\ngoal (1 subgoal):\n 1. \\<And>n'.\n       \\<lbrakk>p \\<in> R ^^ Suc n' \\<Longrightarrow>\n                \\<exists>n.\n                   p \\<in> R ^^ Suc n \\<and>\n                   (p \\<in> R ^^ n \\<longrightarrow> n = 0);\n        p \\<in> R ^^ Suc (Suc n')\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n.\n                            p \\<in> R ^^ Suc n \\<and>\n                            (p \\<in> R ^^ n \\<longrightarrow> n = 0)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>n.\n       p \\<in> R ^^ Suc n \\<and> (p \\<in> R ^^ n \\<longrightarrow> n = 0)", "proof(cases \"p \\<in> R ^^ Suc n\")"], ["proof (state)\ngoal (2 subgoals):\n 1. p \\<in> R ^^ Suc n \\<Longrightarrow>\n    \\<exists>n.\n       p \\<in> R ^^ Suc n \\<and> (p \\<in> R ^^ n \\<longrightarrow> n = 0)\n 2. p \\<notin> R ^^ Suc n \\<Longrightarrow>\n    \\<exists>n.\n       p \\<in> R ^^ Suc n \\<and> (p \\<in> R ^^ n \\<longrightarrow> n = 0)", "case False"], ["proof (state)\nthis:\n  p \\<notin> R ^^ Suc n\n\ngoal (2 subgoals):\n 1. p \\<in> R ^^ Suc n \\<Longrightarrow>\n    \\<exists>n.\n       p \\<in> R ^^ Suc n \\<and> (p \\<in> R ^^ n \\<longrightarrow> n = 0)\n 2. p \\<notin> R ^^ Suc n \\<Longrightarrow>\n    \\<exists>n.\n       p \\<in> R ^^ Suc n \\<and> (p \\<in> R ^^ n \\<longrightarrow> n = 0)", "with Suc"], ["proof (chain)\npicking this:\n  p \\<in> R ^^ Suc n \\<Longrightarrow>\n  \\<exists>n.\n     p \\<in> R ^^ Suc n \\<and> (p \\<in> R ^^ n \\<longrightarrow> n = 0)\n  p \\<in> R ^^ Suc (Suc n)\n  p \\<notin> R ^^ Suc n", "show ?thesis"], ["proof (prove)\nusing this:\n  p \\<in> R ^^ Suc n \\<Longrightarrow>\n  \\<exists>n.\n     p \\<in> R ^^ Suc n \\<and> (p \\<in> R ^^ n \\<longrightarrow> n = 0)\n  p \\<in> R ^^ Suc (Suc n)\n  p \\<notin> R ^^ Suc n\n\ngoal (1 subgoal):\n 1. \\<exists>n.\n       p \\<in> R ^^ Suc n \\<and> (p \\<in> R ^^ n \\<longrightarrow> n = 0)", "by blast"], ["proof (state)\nthis:\n  \\<exists>n.\n     p \\<in> R ^^ Suc n \\<and> (p \\<in> R ^^ n \\<longrightarrow> n = 0)\n\ngoal (1 subgoal):\n 1. p \\<in> R ^^ Suc n \\<Longrightarrow>\n    \\<exists>n.\n       p \\<in> R ^^ Suc n \\<and> (p \\<in> R ^^ n \\<longrightarrow> n = 0)", "qed (rule Suc)"], ["proof (state)\nthis:\n  \\<exists>n.\n     p \\<in> R ^^ Suc n \\<and> (p \\<in> R ^^ n \\<longrightarrow> n = 0)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>n.\n     p \\<in> R ^^ Suc n \\<and> (p \\<in> R ^^ n \\<longrightarrow> n = 0)\n\ngoal (1 subgoal):\n 1. \\<exists>n.\n       p \\<in> R ^^ Suc n \\<and>\n       (p \\<in> R ^^ n \\<longrightarrow> n = 0) \\<Longrightarrow>\n    p \\<in> R\\<^sup>+", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>n.\n       p \\<in> R ^^ Suc n \\<and>\n       (p \\<in> R ^^ n \\<longrightarrow> n = 0) \\<Longrightarrow>\n    p \\<in> R\\<^sup>+", "assume \"\\<exists>n. p \\<in> R ^^ Suc n \\<and> (p \\<in> R ^^ n \\<longrightarrow> n = 0)\""], ["proof (state)\nthis:\n  \\<exists>n.\n     p \\<in> R ^^ Suc n \\<and> (p \\<in> R ^^ n \\<longrightarrow> n = 0)\n\ngoal (1 subgoal):\n 1. \\<exists>n.\n       p \\<in> R ^^ Suc n \\<and>\n       (p \\<in> R ^^ n \\<longrightarrow> n = 0) \\<Longrightarrow>\n    p \\<in> R\\<^sup>+", "with zero_less_Suc"], ["proof (chain)\npicking this:\n  0 < Suc ?n\n  \\<exists>n.\n     p \\<in> R ^^ Suc n \\<and> (p \\<in> R ^^ n \\<longrightarrow> n = 0)", "have \"\\<exists>n>0. p \\<in> R ^^ n\""], ["proof (prove)\nusing this:\n  0 < Suc ?n\n  \\<exists>n.\n     p \\<in> R ^^ Suc n \\<and> (p \\<in> R ^^ n \\<longrightarrow> n = 0)\n\ngoal (1 subgoal):\n 1. \\<exists>n>0. p \\<in> R ^^ n", "by blast"], ["proof (state)\nthis:\n  \\<exists>n>0. p \\<in> R ^^ n\n\ngoal (1 subgoal):\n 1. \\<exists>n.\n       p \\<in> R ^^ Suc n \\<and>\n       (p \\<in> R ^^ n \\<longrightarrow> n = 0) \\<Longrightarrow>\n    p \\<in> R\\<^sup>+", "thus \"p \\<in> R\\<^sup>+\""], ["proof (prove)\nusing this:\n  \\<exists>n>0. p \\<in> R ^^ n\n\ngoal (1 subgoal):\n 1. p \\<in> R\\<^sup>+", "unfolding trancl_power"], ["proof (prove)\nusing this:\n  \\<exists>n>0. p \\<in> R ^^ n\n\ngoal (1 subgoal):\n 1. \\<exists>n>0. p \\<in> R ^^ n", "."], ["proof (state)\nthis:\n  p \\<in> R\\<^sup>+\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma refl_on_tranclI :\n  assumes \"refl_on A r\"\n  shows \"refl_on A (trancl r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. refl_on A (r\\<^sup>+)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. r\\<^sup>+ \\<subseteq> A \\<times> A\n 2. \\<And>x. x \\<in> A \\<Longrightarrow> (x, x) \\<in> r\\<^sup>+", "show \"r\\<^sup>+ \\<subseteq> A \\<times> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r\\<^sup>+ \\<subseteq> A \\<times> A", "by( rule trancl_subset_Sigma\n        , auto simp: assms[THEN refl_onD1] assms[THEN refl_onD2])"], ["proof (state)\nthis:\n  r\\<^sup>+ \\<subseteq> A \\<times> A\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> A \\<Longrightarrow> (x, x) \\<in> r\\<^sup>+", "show \"x \\<in> A \\<Longrightarrow> (x, x) \\<in> r\\<^sup>+\" for x"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> A \\<Longrightarrow> (x, x) \\<in> r\\<^sup>+", "using assms[THEN refl_onD]"], ["proof (prove)\nusing this:\n  ?a \\<in> A \\<Longrightarrow> (?a, ?a) \\<in> r\n\ngoal (1 subgoal):\n 1. x \\<in> A \\<Longrightarrow> (x, x) \\<in> r\\<^sup>+", "by auto"], ["proof (state)\nthis:\n  ?x \\<in> A \\<Longrightarrow> (?x, ?x) \\<in> r\\<^sup>+\n\ngoal:\nNo subgoals!", "qed"], ["", "definition idempotent where\n  \"idempotent r \\<equiv> r O r = r\""], ["", "lemma trans_def: \"trans r = ((Id \\<union> r) O r = r)\" \"trans r = (r O (Id \\<union> r) = r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. trans r = ((Id \\<union> r) O r = r) &&&\n    trans r = (r O (Id \\<union> r) = r)", "by(auto simp:trans_def)"], ["", "lemma idempotent_impl_trans: \"idempotent r \\<Longrightarrow> trans r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. idempotent r \\<Longrightarrow> trans r", "by(auto simp:trans_def idempotent_def)"], ["", "lemma refl_trans_impl_idempotent[intro]: \"refl_on A r \\<Longrightarrow> trans r \\<Longrightarrow> idempotent r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>refl_on A r; trans r\\<rbrakk> \\<Longrightarrow> idempotent r", "by(auto simp:refl_on_def trans_def idempotent_def)"], ["", "lemma idempotent_subset:\n  assumes \"idempotent R\" \"S \\<subseteq> R\"\n  shows \"S O R \\<subseteq> R\" \"R O S \\<subseteq> R\" \"S O R O S \\<subseteq> R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S O R \\<subseteq> R &&& R O S \\<subseteq> R &&& S O R O S \\<subseteq> R", "using assms"], ["proof (prove)\nusing this:\n  idempotent R\n  S \\<subseteq> R\n\ngoal (1 subgoal):\n 1. S O R \\<subseteq> R &&& R O S \\<subseteq> R &&& S O R O S \\<subseteq> R", "by (auto simp:idempotent_def)"], ["", "(* not really about relations, but I need it in GraphRewriting.thy.\n   Renaming the entire file to 'preliminaries' just because this is here would be too much. *)"], ["", "lemma list_sorted_max[simp]:\n  shows \"sorted list \\<Longrightarrow> list = (x#xs) \\<Longrightarrow> fold max xs x = (last list)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>sorted list; list = x # xs\\<rbrakk>\n    \\<Longrightarrow> fold max xs x = last list", "proof (induct list arbitrary:x xs)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x xs.\n       \\<lbrakk>sorted []; [] = x # xs\\<rbrakk>\n       \\<Longrightarrow> fold max xs x = last []\n 2. \\<And>a list x xs.\n       \\<lbrakk>\\<And>x xs.\n                   \\<lbrakk>sorted list; list = x # xs\\<rbrakk>\n                   \\<Longrightarrow> fold max xs x = last list;\n        sorted (a # list); a # list = x # xs\\<rbrakk>\n       \\<Longrightarrow> fold max xs x = last (a # list)", "case (Cons a list)"], ["proof (state)\nthis:\n  \\<lbrakk>sorted list; list = ?x # ?xs\\<rbrakk>\n  \\<Longrightarrow> fold max ?xs ?x = last list\n  sorted (a # list)\n  a # list = x # xs\n\ngoal (2 subgoals):\n 1. \\<And>x xs.\n       \\<lbrakk>sorted []; [] = x # xs\\<rbrakk>\n       \\<Longrightarrow> fold max xs x = last []\n 2. \\<And>a list x xs.\n       \\<lbrakk>\\<And>x xs.\n                   \\<lbrakk>sorted list; list = x # xs\\<rbrakk>\n                   \\<Longrightarrow> fold max xs x = last list;\n        sorted (a # list); a # list = x # xs\\<rbrakk>\n       \\<Longrightarrow> fold max xs x = last (a # list)", "hence \"xs = y # ys \\<Longrightarrow> fold max ys y = last xs\" \"sorted (x # xs)\" \"sorted xs\" for y ys"], ["proof (prove)\nusing this:\n  \\<lbrakk>sorted list; list = ?x # ?xs\\<rbrakk>\n  \\<Longrightarrow> fold max ?xs ?x = last list\n  sorted (a # list)\n  a # list = x # xs\n\ngoal (1 subgoal):\n 1. (xs = y # ys \\<Longrightarrow> fold max ys y = last xs) &&&\n    sorted (x # xs) &&& sorted xs", "using Cons.prems(1,2)"], ["proof (prove)\nusing this:\n  \\<lbrakk>sorted list; list = ?x # ?xs\\<rbrakk>\n  \\<Longrightarrow> fold max ?xs ?x = last list\n  sorted (a # list)\n  a # list = x # xs\n  sorted (a # list)\n  a # list = x # xs\n\ngoal (1 subgoal):\n 1. (xs = y # ys \\<Longrightarrow> fold max ys y = last xs) &&&\n    sorted (x # xs) &&& sorted xs", "by auto"], ["proof (state)\nthis:\n  xs = ?y # ?ys \\<Longrightarrow> fold max ?ys ?y = last xs\n  sorted (x # xs)\n  sorted xs\n\ngoal (2 subgoals):\n 1. \\<And>x xs.\n       \\<lbrakk>sorted []; [] = x # xs\\<rbrakk>\n       \\<Longrightarrow> fold max xs x = last []\n 2. \\<And>a list x xs.\n       \\<lbrakk>\\<And>x xs.\n                   \\<lbrakk>sorted list; list = x # xs\\<rbrakk>\n                   \\<Longrightarrow> fold max xs x = last list;\n        sorted (a # list); a # list = x # xs\\<rbrakk>\n       \\<Longrightarrow> fold max xs x = last (a # list)", "hence \"xs \\<noteq> [] \\<Longrightarrow> fold max xs x = last xs\""], ["proof (prove)\nusing this:\n  xs = ?y # ?ys \\<Longrightarrow> fold max ?ys ?y = last xs\n  sorted (x # xs)\n  sorted xs\n\ngoal (1 subgoal):\n 1. xs \\<noteq> [] \\<Longrightarrow> fold max xs x = last xs", "by (metis (full_types) fold_simps(2) max.orderE sorted.elims(2) sorted2)"], ["proof (state)\nthis:\n  xs \\<noteq> [] \\<Longrightarrow> fold max xs x = last xs\n\ngoal (2 subgoals):\n 1. \\<And>x xs.\n       \\<lbrakk>sorted []; [] = x # xs\\<rbrakk>\n       \\<Longrightarrow> fold max xs x = last []\n 2. \\<And>a list x xs.\n       \\<lbrakk>\\<And>x xs.\n                   \\<lbrakk>sorted list; list = x # xs\\<rbrakk>\n                   \\<Longrightarrow> fold max xs x = last list;\n        sorted (a # list); a # list = x # xs\\<rbrakk>\n       \\<Longrightarrow> fold max xs x = last (a # list)", "thus ?case"], ["proof (prove)\nusing this:\n  xs \\<noteq> [] \\<Longrightarrow> fold max xs x = last xs\n\ngoal (1 subgoal):\n 1. fold max xs x = last (a # list)", "unfolding Cons"], ["proof (prove)\nusing this:\n  xs \\<noteq> [] \\<Longrightarrow> fold max xs x = last xs\n\ngoal (1 subgoal):\n 1. fold max xs x = last (x # xs)", "by auto"], ["proof (state)\nthis:\n  fold max xs x = last (a # list)\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>sorted []; [] = x # xs\\<rbrakk>\n       \\<Longrightarrow> fold max xs x = last []", "qed auto"], ["", "end"]]}