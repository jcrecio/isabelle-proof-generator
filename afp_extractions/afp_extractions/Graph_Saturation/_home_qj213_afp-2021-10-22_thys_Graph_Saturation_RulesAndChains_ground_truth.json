{"file_name": "/home/qj213/afp-2021-10-22/thys/Graph_Saturation/RulesAndChains.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Graph_Saturation", "problem_names": ["lemma chain_then_restrict:\n  assumes \"chain S\" shows \"S i = restrict (S i)\"", "lemma chain:\n  assumes \"chain S\"\n  shows \"j \\<ge> i \\<Longrightarrow> subgraph (S i) (S j)\"", "lemma chain_def2:\n  \"chain S = (\\<forall> i j. j \\<ge> i \\<longrightarrow> subgraph (S i) (S j))\"", "lemma chain_sup_const[simp]:\n  \"chain_sup (\\<lambda> x. S) = S\"", "lemma chain_sup_subgraph[intro]:\n  assumes \"chain S\"\n  shows \"subgraph (S j) (chain_sup S)\"", "lemma chain_sup_graph[intro]:\n  assumes \"chain S\"\n  shows \"graph (chain_sup S)\"", "lemma map_graph_chain_sup:\n\"map_graph g (chain_sup S) = chain_sup (map_graph g o S)\"", "lemma graph_union_chain_sup[intro]:\n  assumes \"\\<And> i. graph_union (S i) C = C\"\n  shows \"graph_union (chain_sup S) C = C\"", "lemma set_of_graph_rulesD[dest]:\n  assumes \"set_of_graph_rules Rs\" \"R \\<in> Rs\"\n  shows \"finite_graph (fst R)\" \"finite_graph (snd R)\" \"subgraph (fst R) (snd R)\"", "lemma agree_on_empty[intro,simp]: \"agree_on (LG {} {}) f g\"", "lemma agree_on_comm[intro]: \"agree_on X f g = agree_on X g f\"", "lemma agree_on_refl[intro]:\n  \"agree_on R f f\"", "lemma agree_on_trans:\n  assumes \"agree_on X f g\" \"agree_on X g h\"\n  shows \"agree_on X f h\"", "lemma agree_on_equivp:\n  shows \"equivp (agree_on G)\"", "lemma agree_on_subset:\n  assumes \"f \\<subseteq> g\" \"vertices G \\<subseteq> Domain f\" \"univalent g\"\n  shows \"agree_on G f g\"", "lemma agree_iff_subset[simp]:\n  assumes \"graph_homomorphism G X f\" \"univalent g\"\n  shows \"agree_on G f g \\<longleftrightarrow> f \\<subseteq> g\"", "lemma agree_on_ext:\n  assumes \"agree_on G f\\<^sub>1 f\\<^sub>2\"\n  shows \"agree_on G (f\\<^sub>1 O g) (f\\<^sub>2 O g)\"", "lemma agree_on_then_eq:\n  assumes \"agree_on G f\\<^sub>1 f\\<^sub>2\" \"Domain f\\<^sub>1 = vertices G\" \"Domain f\\<^sub>2 = vertices G\"\n  shows \"f\\<^sub>1 = f\\<^sub>2\"", "lemma agree_on_subg_compose:\n  assumes \"agree_on R g h\" \"agree_on F f g\" \"subgraph F R\"\n  shows \"agree_on F f h\"", "lemma extensibleI[intro]: (* not nice as a standard rule, since obtained variables cannot be used *)\n  assumes \"graph_homomorphism R2 G g\" \"agree_on R1 f g\"\n  shows \"extensible (R1,R2) G f\"", "lemma extensibleD[elim]:\n  assumes \"extensible R G f\"\n          \"\\<And> g. graph_homomorphism (snd R) G g \\<Longrightarrow> agree_on (fst R) f g \\<Longrightarrow> thesis\"\n  shows thesis", "lemma extensible_refl_concr[simp]:\n  assumes \"graph_homomorphism (LG e\\<^sub>1 v) G f\"\n  shows \"extensible (LG e\\<^sub>1 v, LG e\\<^sub>2 v) G f \\<longleftrightarrow> graph_homomorphism (LG e\\<^sub>2 v) G f\"", "lemma   extensible_chain_sup[intro]:\nassumes \"chain S\" \"extensible R (S j) f\"\nshows \"extensible R (chain_sup S) f\"", "lemma maintainedI[intro]:\n  assumes \"\\<And> f. graph_homomorphism A G f \\<Longrightarrow> extensible (A,B) G f\"\n  shows \"maintained (A,B) G\"", "lemma maintainedD[dest]:\n  assumes \"maintained (A,B) G\" \"graph_homomorphism A G f\"\n  shows \"extensible (A,B) G f\"", "lemma maintainedD2[dest]:\n  assumes \"maintained (A,B) G\" \"graph_homomorphism A G f\"\n          \"\\<And> g. graph_homomorphism B G g \\<Longrightarrow> f \\<subseteq> g \\<Longrightarrow> thesis\"\n        shows thesis", "lemma extensible_refl[intro]:\n  \"graph_homomorphism R G f \\<Longrightarrow> extensible (R,R) G f\"", "lemma maintained_refl[intro]:\n  \"maintained (R,R) G\"", "lemma fin_maintainedI [intro]:\n  assumes \"\\<And> F f. finite_graph F\n           \\<Longrightarrow> subgraph F (fst R)\n           \\<Longrightarrow> extensible (F,fst R) G f\n           \\<Longrightarrow> graph_homomorphism F G f\n           \\<Longrightarrow> extensible (F,snd R) G f\"\n  shows \"fin_maintained R G\"", "lemma maintained_then_fin_maintained[simp]:\n  assumes maintained:\"maintained R G\"\n  shows \"fin_maintained R G\"", "lemma fin_maintained_maintained:\n  assumes \"finite_graph (fst R)\"\n  shows \"fin_maintained R G \\<longleftrightarrow> maintained R G\" (is \"?lhs = ?rhs\")", "lemma extend_for_chain:\nassumes \"g 0 = f\"\n    and \"\\<And> i. graph_homomorphism (S i) C (g i)\"\n    and \"\\<And> i. agree_on (S i) (g i) (g (i + 1))\"\n    and \"chain S\"\n  shows \"extensible (S 0, chain_sup S) C f\"", "lemma consequence_graphI[intro]:\n  assumes \"\\<And> R. R\\<in> Rs \\<Longrightarrow> maintained R G\"\n          \"\\<And> R. R\\<in> Rs \\<Longrightarrow> subgraph (fst R) (snd R)\"\n          \"graph G\"\n  shows \"consequence_graph Rs G\"", "lemma consequence_graphD[dest]:\n  assumes \"consequence_graph Rs G\"\n  shows \"\\<And> R. R\\<in> Rs \\<Longrightarrow> maintained R G\"\n        \"\\<And> R. R\\<in> Rs \\<Longrightarrow> subgraph (fst R) (snd R)\"\n        \"graph G\"", "lemma leastI[intro]:\nassumes \"subgraph S (G:: ('l, 'c) labeled_graph)\"\n        \"\\<And> C :: ('l, 'x) labeled_graph. consequence_graph Rs C \\<Longrightarrow> maintained (S,G) C\"\n      shows \"least (t:: 'x itself) Rs S G\"", "lemma least_consequence_graphI[intro]:\nassumes \"consequence_graph Rs (G:: ('l, 'c) labeled_graph)\"\n        \"subgraph S G\"\n        \"\\<And> C :: ('l, 'x) labeled_graph. consequence_graph Rs C \\<Longrightarrow> maintained (S,G) C\"\n      shows \"least_consequence_graph (t:: 'x itself) Rs S G\"", "lemma fair_chainI[intro]:\n  assumes \"chain S\"\n    \"\\<And> R f i. R \\<in> Rs \\<Longrightarrow> graph_homomorphism (fst R) (S i) f \\<Longrightarrow> \\<exists> j. extensible R (S j) f\"\n  shows \"fair_chain Rs S\"", "lemma fair_chainD:\n  assumes \"fair_chain Rs S\"\n  shows \"chain S\"\n        \"R \\<in> Rs \\<Longrightarrow> graph_homomorphism (fst R) (S i) f \\<Longrightarrow> \\<exists> j. extensible R (S j) f\"", "lemma find_graph_occurence_vertices:\n  assumes \"chain S\" \"finite V\" \"univalent f\" \"f `` V \\<subseteq> vertices (chain_sup S)\"\n  shows \"\\<exists> i. f `` V \\<subseteq> vertices (S i)\"", "lemma find_graph_occurence_edges:\n  assumes \"chain S\" \"finite E\" \"univalent f\"\n        \"on_triple f `` E \\<subseteq> edges (chain_sup S)\"\n      shows \"\\<exists> i. on_triple f `` E \\<subseteq> edges (S i)\"", "lemma find_graph_occurence:\n  assumes \"chain S\" \"finite E\" \"finite V\" \"graph_homomorphism (LG E V) (chain_sup S) f\"\n  shows \"\\<exists> i. graph_homomorphism (LG E V) (S i) f\"", "lemma fair_chain_impl_consequence_graph:\n  assumes \"fair_chain Rs S\" \"\\<And> R. R \\<in> Rs \\<Longrightarrow> subgraph (fst R) (snd R) \\<and> finite_graph (fst R)\"\n  shows \"consequence_graph Rs (chain_sup S)\"", "lemma weak_universalD[dest]:\n  assumes \"weak_universal (t:: 'x itself) R (G\\<^sub>1::('a, 'b) labeled_graph) G\\<^sub>2 f\\<^sub>1 f\\<^sub>2\"\n  shows \"\\<And>  h\\<^sub>1 h\\<^sub>2 G::('a, 'x) labeled_graph.\n         graph_homomorphism (snd R) G h\\<^sub>1 \\<Longrightarrow> graph_homomorphism G\\<^sub>1 G h\\<^sub>2 \\<Longrightarrow> f\\<^sub>1 O h\\<^sub>2 \\<subseteq> h\\<^sub>1\n         \\<Longrightarrow> (\\<exists> h. graph_homomorphism G\\<^sub>2 G h \\<and> h\\<^sub>2 \\<subseteq> h)\"", "lemma weak_universalI[intro]:\n  assumes \"\\<And> h\\<^sub>1 h\\<^sub>2 G::('a, 'x) labeled_graph.\n         graph_homomorphism (snd R) G h\\<^sub>1 \\<Longrightarrow> graph_homomorphism G\\<^sub>1 G h\\<^sub>2 \\<Longrightarrow> f\\<^sub>1 O h\\<^sub>2 \\<subseteq> h\\<^sub>1\n         \\<Longrightarrow> (\\<exists> h. graph_homomorphism G\\<^sub>2 G h \\<and> h\\<^sub>2 \\<subseteq> h)\"\n  shows \"weak_universal (t:: 'x itself) R (G\\<^sub>1::('a, 'b) labeled_graph) G\\<^sub>2 f\\<^sub>1 f\\<^sub>2\"", "lemma Simple_WPCI [intro]:\n  assumes \"set_of_graph_rules Rs\" \"graph (S 0)\"\n          \"\\<And> i. (S i = S (Suc i)) \\<or> (\\<exists> R \\<in> Rs. pushout_step t R (S i) (S (Suc i)))\"\n        shows \"Simple_WPC t Rs S\"", "lemma Simple_WPC_Chain[simp]:\n  assumes \"Simple_WPC t Rs S\"\n  shows \"chain S\"", "lemma extensible_from_chainI:\n  assumes ch:\"chain S\"\n  and igh:\"graph_homomorphism (S 0) C f\"\n  and ind:\"\\<And> f i. graph_homomorphism (S i) C f \\<Longrightarrow>\n                \\<exists>h. (graph_homomorphism (S (Suc i)) C h) \\<and> agree_on (S i) f h\"\n  shows \"extensible (S 0,chain_sup S) C f\"", "lemma wpc_least:\n  assumes \"WPC (t:: 'x itself) Rs S\"\n  shows \"least t Rs (S 0) (chain_sup S)\"", "lemma wpc_least_consequence_graph:\n  assumes \"WPC t Rs S\" \"consequence_graph Rs (chain_sup S)\"\n  shows \"least_consequence_graph t Rs (S 0) (chain_sup S)\""], "translations": [["", "lemma chain_then_restrict:\n  assumes \"chain S\" shows \"S i = restrict (S i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. graph (S i)", "using assms[unfolded chain_def graph_homomorphism_def]"], ["proof (prove)\nusing this:\n  \\<forall>i.\n     vertices (S i) = Domain (Id_on (vertices (S i))) \\<and>\n     graph (S i) \\<and>\n     graph (S (i + 1)) \\<and>\n     Id_on (vertices (S i)) `` vertices (S i)\n     \\<subseteq> vertices (S (i + 1)) \\<and>\n     univalent (Id_on (vertices (S i))) \\<and>\n     edge_preserving (Id_on (vertices (S i))) (edges (S i))\n      (edges (S (i + 1)))\n\ngoal (1 subgoal):\n 1. graph (S i)", "by auto"], ["", "lemma chain:\n  assumes \"chain S\"\n  shows \"j \\<ge> i \\<Longrightarrow> subgraph (S i) (S j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i \\<le> j \\<Longrightarrow> subgraph (S i) (S j)", "proof(induct \"j-i\" arbitrary:i j)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>i j.\n       \\<lbrakk>0 = j - i; i \\<le> j\\<rbrakk>\n       \\<Longrightarrow> subgraph (S i) (S j)\n 2. \\<And>x i j.\n       \\<lbrakk>\\<And>i j.\n                   \\<lbrakk>x = j - i; i \\<le> j\\<rbrakk>\n                   \\<Longrightarrow> subgraph (S i) (S j);\n        Suc x = j - i; i \\<le> j\\<rbrakk>\n       \\<Longrightarrow> subgraph (S i) (S j)", "case 0"], ["proof (state)\nthis:\n  0 = j - i\n  i \\<le> j\n\ngoal (2 subgoals):\n 1. \\<And>i j.\n       \\<lbrakk>0 = j - i; i \\<le> j\\<rbrakk>\n       \\<Longrightarrow> subgraph (S i) (S j)\n 2. \\<And>x i j.\n       \\<lbrakk>\\<And>i j.\n                   \\<lbrakk>x = j - i; i \\<le> j\\<rbrakk>\n                   \\<Longrightarrow> subgraph (S i) (S j);\n        Suc x = j - i; i \\<le> j\\<rbrakk>\n       \\<Longrightarrow> subgraph (S i) (S j)", "then"], ["proof (chain)\npicking this:\n  0 = j - i\n  i \\<le> j", "show ?case"], ["proof (prove)\nusing this:\n  0 = j - i\n  i \\<le> j\n\ngoal (1 subgoal):\n 1. subgraph (S i) (S j)", "using chain_then_restrict[OF assms] assms[unfolded chain_def]"], ["proof (prove)\nusing this:\n  0 = j - i\n  i \\<le> j\n  graph (S ?i)\n  \\<forall>i. subgraph (S i) (S (i + 1))\n\ngoal (1 subgoal):\n 1. subgraph (S i) (S j)", "by auto"], ["proof (state)\nthis:\n  subgraph (S i) (S j)\n\ngoal (1 subgoal):\n 1. \\<And>x i j.\n       \\<lbrakk>\\<And>i j.\n                   \\<lbrakk>x = j - i; i \\<le> j\\<rbrakk>\n                   \\<Longrightarrow> subgraph (S i) (S j);\n        Suc x = j - i; i \\<le> j\\<rbrakk>\n       \\<Longrightarrow> subgraph (S i) (S j)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x i j.\n       \\<lbrakk>\\<And>i j.\n                   \\<lbrakk>x = j - i; i \\<le> j\\<rbrakk>\n                   \\<Longrightarrow> subgraph (S i) (S j);\n        Suc x = j - i; i \\<le> j\\<rbrakk>\n       \\<Longrightarrow> subgraph (S i) (S j)", "case (Suc x)"], ["proof (state)\nthis:\n  \\<lbrakk>x = ?j - ?i; ?i \\<le> ?j\\<rbrakk>\n  \\<Longrightarrow> subgraph (S ?i) (S ?j)\n  Suc x = j - i\n  i \\<le> j\n\ngoal (1 subgoal):\n 1. \\<And>x i j.\n       \\<lbrakk>\\<And>i j.\n                   \\<lbrakk>x = j - i; i \\<le> j\\<rbrakk>\n                   \\<Longrightarrow> subgraph (S i) (S j);\n        Suc x = j - i; i \\<le> j\\<rbrakk>\n       \\<Longrightarrow> subgraph (S i) (S j)", "hence j:\"i + x + 1 = j\""], ["proof (prove)\nusing this:\n  \\<lbrakk>x = ?j - ?i; ?i \\<le> ?j\\<rbrakk>\n  \\<Longrightarrow> subgraph (S ?i) (S ?j)\n  Suc x = j - i\n  i \\<le> j\n\ngoal (1 subgoal):\n 1. i + x + 1 = j", "by auto"], ["proof (state)\nthis:\n  i + x + 1 = j\n\ngoal (1 subgoal):\n 1. \\<And>x i j.\n       \\<lbrakk>\\<And>i j.\n                   \\<lbrakk>x = j - i; i \\<le> j\\<rbrakk>\n                   \\<Longrightarrow> subgraph (S i) (S j);\n        Suc x = j - i; i \\<le> j\\<rbrakk>\n       \\<Longrightarrow> subgraph (S i) (S j)", "thus ?case"], ["proof (prove)\nusing this:\n  i + x + 1 = j\n\ngoal (1 subgoal):\n 1. subgraph (S i) (S j)", "using subgraph_trans[OF Suc(1) assms[unfolded chain_def,rule_format,of \"i+x\"],of i,unfolded j]"], ["proof (prove)\nusing this:\n  i + x + 1 = j\n  \\<lbrakk>x = i + x - i; i \\<le> i + x\\<rbrakk>\n  \\<Longrightarrow> subgraph (S i) (S j)\n\ngoal (1 subgoal):\n 1. subgraph (S i) (S j)", "using Suc"], ["proof (prove)\nusing this:\n  i + x + 1 = j\n  \\<lbrakk>x = i + x - i; i \\<le> i + x\\<rbrakk>\n  \\<Longrightarrow> subgraph (S i) (S j)\n  \\<lbrakk>x = ?j - ?i; ?i \\<le> ?j\\<rbrakk>\n  \\<Longrightarrow> subgraph (S ?i) (S ?j)\n  Suc x = j - i\n  i \\<le> j\n\ngoal (1 subgoal):\n 1. subgraph (S i) (S j)", "by auto"], ["proof (state)\nthis:\n  subgraph (S i) (S j)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma chain_def2:\n  \"chain S = (\\<forall> i j. j \\<ge> i \\<longrightarrow> subgraph (S i) (S j))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. chain S =\n    (\\<forall>i j. i \\<le> j \\<longrightarrow> subgraph (S i) (S j))", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. chain S \\<Longrightarrow>\n    \\<forall>i j. i \\<le> j \\<longrightarrow> subgraph (S i) (S j)\n 2. \\<forall>i j.\n       i \\<le> j \\<longrightarrow> subgraph (S i) (S j) \\<Longrightarrow>\n    chain S", "show \"chain S \\<Longrightarrow> \\<forall>i j. i \\<le> j \\<longrightarrow> subgraph (S i) (S j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. chain S \\<Longrightarrow>\n    \\<forall>i j. i \\<le> j \\<longrightarrow> subgraph (S i) (S j)", "using chain"], ["proof (prove)\nusing this:\n  \\<lbrakk>chain ?S; ?i \\<le> ?j\\<rbrakk>\n  \\<Longrightarrow> subgraph (?S ?i) (?S ?j)\n\ngoal (1 subgoal):\n 1. chain S \\<Longrightarrow>\n    \\<forall>i j. i \\<le> j \\<longrightarrow> subgraph (S i) (S j)", "by auto"], ["proof (state)\nthis:\n  chain S \\<Longrightarrow>\n  \\<forall>i j. i \\<le> j \\<longrightarrow> subgraph (S i) (S j)\n\ngoal (1 subgoal):\n 1. \\<forall>i j.\n       i \\<le> j \\<longrightarrow> subgraph (S i) (S j) \\<Longrightarrow>\n    chain S", "show \"\\<forall>i j. i \\<le> j \\<longrightarrow> subgraph (S i) (S j) \\<Longrightarrow> chain S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i j.\n       i \\<le> j \\<longrightarrow> subgraph (S i) (S j) \\<Longrightarrow>\n    chain S", "unfolding chain_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i j.\n       i \\<le> j \\<longrightarrow> subgraph (S i) (S j) \\<Longrightarrow>\n    \\<forall>i. subgraph (S i) (S (i + 1))", "by simp"], ["proof (state)\nthis:\n  \\<forall>i j.\n     i \\<le> j \\<longrightarrow> subgraph (S i) (S j) \\<Longrightarrow>\n  chain S\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>Second part of definition 8.\\<close>"], ["", "definition chain_sup :: \"('l, 'v) graph_seq \\<Rightarrow> ('l, 'v) labeled_graph\" where\n  \"chain_sup S \\<equiv> LG (\\<Union> i. edges (S i)) (\\<Union> i. vertices (S i))\""], ["", "lemma chain_sup_const[simp]:\n  \"chain_sup (\\<lambda> x. S) = S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. chain_sup (\\<lambda>x. S) = S", "unfolding chain_sup_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. LG (\\<Union>i. edges S) (\\<Union>i. vertices S) = S", "by auto"], ["", "lemma chain_sup_subgraph[intro]:\n  assumes \"chain S\"\n  shows \"subgraph (S j) (chain_sup S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subgraph (S j) (chain_sup S)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. subgraph (S j) (chain_sup S)", "have c1: \"S j = restrict (S j)\" for j"], ["proof (prove)\ngoal (1 subgoal):\n 1. graph (S j)", "using assms[unfolded chain_def,rule_format,of j] graph_homomorphism_def"], ["proof (prove)\nusing this:\n  subgraph (S j) (S (j + 1))\n  graph_homomorphism ?G\\<^sub>1 ?G\\<^sub>2 ?f =\n  (vertices ?G\\<^sub>1 = Domain ?f \\<and>\n   graph ?G\\<^sub>1 \\<and>\n   graph ?G\\<^sub>2 \\<and>\n   ?f `` vertices ?G\\<^sub>1 \\<subseteq> vertices ?G\\<^sub>2 \\<and>\n   univalent ?f \\<and>\n   edge_preserving ?f (edges ?G\\<^sub>1) (edges ?G\\<^sub>2))\n\ngoal (1 subgoal):\n 1. graph (S j)", "by auto"], ["proof (state)\nthis:\n  graph (S ?j)\n\ngoal (1 subgoal):\n 1. subgraph (S j) (chain_sup S)", "hence c2: \"chain_sup S = restrict (chain_sup S)\""], ["proof (prove)\nusing this:\n  graph (S ?j)\n\ngoal (1 subgoal):\n 1. graph (chain_sup S)", "unfolding chain_sup_def"], ["proof (prove)\nusing this:\n  graph (S ?j)\n\ngoal (1 subgoal):\n 1. graph (LG (\\<Union>i. edges (S i)) (\\<Union>i. vertices (S i)))", "by fastforce"], ["proof (state)\nthis:\n  graph (chain_sup S)\n\ngoal (1 subgoal):\n 1. subgraph (S j) (chain_sup S)", "have c3: \"graph_union (S j) (chain_sup S) = chain_sup S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. graph_union (S j) (chain_sup S) = chain_sup S", "unfolding chain_sup_def graph_union_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. LG (edges (S j) \\<union>\n        edges (LG (\\<Union>i. edges (S i)) (\\<Union>i. vertices (S i))))\n     (vertices (S j) \\<union>\n      vertices (LG (\\<Union>i. edges (S i)) (\\<Union>i. vertices (S i)))) =\n    LG (\\<Union>i. edges (S i)) (\\<Union>i. vertices (S i))", "by auto"], ["proof (state)\nthis:\n  graph_union (S j) (chain_sup S) = chain_sup S\n\ngoal (1 subgoal):\n 1. subgraph (S j) (chain_sup S)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. subgraph (S j) (chain_sup S)", "unfolding subgraph_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. graph (S j) \\<and>\n    graph (chain_sup S) \\<and> graph_union (S j) (chain_sup S) = chain_sup S", "using c1 c2 c3"], ["proof (prove)\nusing this:\n  graph (S ?j)\n  graph (chain_sup S)\n  graph_union (S j) (chain_sup S) = chain_sup S\n\ngoal (1 subgoal):\n 1. graph (S j) \\<and>\n    graph (chain_sup S) \\<and> graph_union (S j) (chain_sup S) = chain_sup S", "by auto"], ["proof (state)\nthis:\n  subgraph (S j) (chain_sup S)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma chain_sup_graph[intro]:\n  assumes \"chain S\"\n  shows \"graph (chain_sup S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. graph (chain_sup S)", "using chain_sup_subgraph[OF assms]"], ["proof (prove)\nusing this:\n  subgraph (S ?j) (chain_sup S)\n\ngoal (1 subgoal):\n 1. graph (chain_sup S)", "unfolding subgraph_def"], ["proof (prove)\nusing this:\n  graph (S ?j) \\<and>\n  graph (chain_sup S) \\<and> graph_union (S ?j) (chain_sup S) = chain_sup S\n\ngoal (1 subgoal):\n 1. graph (chain_sup S)", "by auto"], ["", "lemma map_graph_chain_sup:\n\"map_graph g (chain_sup S) = chain_sup (map_graph g o S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map_graph g (chain_sup S) = chain_sup (map_graph g \\<circ> S)", "unfolding map_graph_def chain_sup_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. LG (on_triple g ``\n        edges (LG (\\<Union>i. edges (S i)) (\\<Union>i. vertices (S i))))\n     (g ``\n      vertices (LG (\\<Union>i. edges (S i)) (\\<Union>i. vertices (S i)))) =\n    LG (\\<Union>i.\n           edges\n            (((\\<lambda>G.\n                  LG (on_triple g `` edges G) (g `` vertices G)) \\<circ>\n              S)\n              i))\n     (\\<Union>i.\n         vertices\n          (((\\<lambda>G.\n                LG (on_triple g `` edges G) (g `` vertices G)) \\<circ>\n            S)\n            i))", "by auto"], ["", "lemma graph_union_chain_sup[intro]:\n  assumes \"\\<And> i. graph_union (S i) C = C\"\n  shows \"graph_union (chain_sup S) C = C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. graph_union (chain_sup S) C = C", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. edges (chain_sup S) \\<subseteq> edges C\n 2. vertices (chain_sup S) \\<subseteq> vertices C", "from assms"], ["proof (chain)\npicking this:\n  graph_union (S ?i) C = C", "have e:\"edges (S i) \\<subseteq> edges C\" and v:\"vertices (S i) \\<subseteq> vertices C\" for i"], ["proof (prove)\nusing this:\n  graph_union (S ?i) C = C\n\ngoal (1 subgoal):\n 1. edges (S i) \\<subseteq> edges C &&&\n    vertices (S i) \\<subseteq> vertices C", "by (auto simp:graph_union_iff)"], ["proof (state)\nthis:\n  edges (S ?i) \\<subseteq> edges C\n  vertices (S ?i) \\<subseteq> vertices C\n\ngoal (2 subgoals):\n 1. edges (chain_sup S) \\<subseteq> edges C\n 2. vertices (chain_sup S) \\<subseteq> vertices C", "show \"edges (chain_sup S) \\<subseteq> edges C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. edges (chain_sup S) \\<subseteq> edges C", "using e"], ["proof (prove)\nusing this:\n  edges (S ?i) \\<subseteq> edges C\n\ngoal (1 subgoal):\n 1. edges (chain_sup S) \\<subseteq> edges C", "unfolding chain_sup_def"], ["proof (prove)\nusing this:\n  edges (S ?i) \\<subseteq> edges C\n\ngoal (1 subgoal):\n 1. edges (LG (\\<Union>i. edges (S i)) (\\<Union>i. vertices (S i)))\n    \\<subseteq> edges C", "by auto"], ["proof (state)\nthis:\n  edges (chain_sup S) \\<subseteq> edges C\n\ngoal (1 subgoal):\n 1. vertices (chain_sup S) \\<subseteq> vertices C", "show \"vertices (chain_sup S) \\<subseteq> vertices C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vertices (chain_sup S) \\<subseteq> vertices C", "using v"], ["proof (prove)\nusing this:\n  vertices (S ?i) \\<subseteq> vertices C\n\ngoal (1 subgoal):\n 1. vertices (chain_sup S) \\<subseteq> vertices C", "unfolding chain_sup_def"], ["proof (prove)\nusing this:\n  vertices (S ?i) \\<subseteq> vertices C\n\ngoal (1 subgoal):\n 1. vertices (LG (\\<Union>i. edges (S i)) (\\<Union>i. vertices (S i)))\n    \\<subseteq> vertices C", "by auto"], ["proof (state)\nthis:\n  vertices (chain_sup S) \\<subseteq> vertices C\n\ngoal:\nNo subgoals!", "qed"], ["", "type_synonym ('l,'v) Graph_PreRule = \"('l, 'v) labeled_graph \\<times> ('l, 'v) labeled_graph\""], ["", "text \\<open>Definition 9.\\<close>"], ["", "abbreviation graph_rule :: \"('l,'v) Graph_PreRule \\<Rightarrow> bool\" where\n\"graph_rule R \\<equiv> subgraph (fst R) (snd R) \\<and> finite_graph (snd R)\""], ["", "definition set_of_graph_rules :: \"('l,'v) Graph_PreRule set \\<Rightarrow> bool\" where\n\"set_of_graph_rules Rs \\<equiv> \\<forall> R\\<in>Rs. graph_rule R\""], ["", "lemma set_of_graph_rulesD[dest]:\n  assumes \"set_of_graph_rules Rs\" \"R \\<in> Rs\"\n  shows \"finite_graph (fst R)\" \"finite_graph (snd R)\" \"subgraph (fst R) (snd R)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite_graph (fst R) &&&\n    finite_graph (snd R) &&& subgraph (fst R) (snd R)", "using assms(1)[unfolded set_of_graph_rules_def] assms(2)\n        rev_finite_subset[of \"vertices (snd R)\"]\n        rev_finite_subset[of \"edges (snd R)\"]"], ["proof (prove)\nusing this:\n  \\<forall>R\\<in>Rs. graph_rule R\n  R \\<in> Rs\n  \\<lbrakk>finite (vertices (snd R));\n   ?A \\<subseteq> vertices (snd R)\\<rbrakk>\n  \\<Longrightarrow> finite ?A\n  \\<lbrakk>finite (edges (snd R)); ?A \\<subseteq> edges (snd R)\\<rbrakk>\n  \\<Longrightarrow> finite ?A\n\ngoal (1 subgoal):\n 1. finite_graph (fst R) &&&\n    finite_graph (snd R) &&& subgraph (fst R) (snd R)", "unfolding subgraph_def graph_union_iff"], ["proof (prove)\nusing this:\n  \\<forall>R\\<in>Rs.\n     (graph (fst R) \\<and>\n      graph (snd R) \\<and>\n      edges (fst R) \\<subseteq> edges (snd R) \\<and>\n      vertices (fst R) \\<subseteq> vertices (snd R)) \\<and>\n     finite_graph (snd R)\n  R \\<in> Rs\n  \\<lbrakk>finite (vertices (snd R));\n   ?A \\<subseteq> vertices (snd R)\\<rbrakk>\n  \\<Longrightarrow> finite ?A\n  \\<lbrakk>finite (edges (snd R)); ?A \\<subseteq> edges (snd R)\\<rbrakk>\n  \\<Longrightarrow> finite ?A\n\ngoal (1 subgoal):\n 1. finite_graph (fst R) &&&\n    finite_graph (snd R) &&&\n    graph (fst R) \\<and>\n    graph (snd R) \\<and>\n    edges (fst R) \\<subseteq> edges (snd R) \\<and>\n    vertices (fst R) \\<subseteq> vertices (snd R)", "by auto"], ["", "text \\<open>We define @{term agree_on} as an equivalence.\\<close>"], ["", "definition agree_on where\n\"agree_on G f\\<^sub>1 f\\<^sub>2 \\<equiv> (\\<forall> v \\<in> vertices G. f\\<^sub>1 `` {v} = f\\<^sub>2 `` {v})\""], ["", "lemma agree_on_empty[intro,simp]: \"agree_on (LG {} {}) f g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. agree_on (LG {} {}) f g", "unfolding agree_on_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>v\\<in>vertices (LG {} {}). f `` {v} = g `` {v}", "by auto"], ["", "lemma agree_on_comm[intro]: \"agree_on X f g = agree_on X g f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. agree_on X f g = agree_on X g f", "unfolding agree_on_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>v\\<in>vertices X. f `` {v} = g `` {v}) =\n    (\\<forall>v\\<in>vertices X. g `` {v} = f `` {v})", "by auto"], ["", "lemma agree_on_refl[intro]:\n  \"agree_on R f f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. agree_on R f f", "unfolding agree_on_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>v\\<in>vertices R. f `` {v} = f `` {v}", "by auto"], ["", "lemma agree_on_trans:\n  assumes \"agree_on X f g\" \"agree_on X g h\"\n  shows \"agree_on X f h\""], ["proof (prove)\ngoal (1 subgoal):\n 1. agree_on X f h", "using assms"], ["proof (prove)\nusing this:\n  agree_on X f g\n  agree_on X g h\n\ngoal (1 subgoal):\n 1. agree_on X f h", "unfolding agree_on_def"], ["proof (prove)\nusing this:\n  \\<forall>v\\<in>vertices X. f `` {v} = g `` {v}\n  \\<forall>v\\<in>vertices X. g `` {v} = h `` {v}\n\ngoal (1 subgoal):\n 1. \\<forall>v\\<in>vertices X. f `` {v} = h `` {v}", "by auto"], ["", "lemma agree_on_equivp:\n  shows \"equivp (agree_on G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. equivp (agree_on G)", "by (auto intro:agree_on_trans intro!:equivpI simp:reflp_def symp_def transp_def agree_on_comm)"], ["", "lemma agree_on_subset:\n  assumes \"f \\<subseteq> g\" \"vertices G \\<subseteq> Domain f\" \"univalent g\"\n  shows \"agree_on G f g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. agree_on G f g", "using assms"], ["proof (prove)\nusing this:\n  f \\<subseteq> g\n  vertices G \\<subseteq> Domain f\n  univalent g\n\ngoal (1 subgoal):\n 1. agree_on G f g", "unfolding agree_on_def"], ["proof (prove)\nusing this:\n  f \\<subseteq> g\n  vertices G \\<subseteq> Domain f\n  univalent g\n\ngoal (1 subgoal):\n 1. \\<forall>v\\<in>vertices G. f `` {v} = g `` {v}", "by auto"], ["", "lemma agree_iff_subset[simp]:\n  assumes \"graph_homomorphism G X f\" \"univalent g\"\n  shows \"agree_on G f g \\<longleftrightarrow> f \\<subseteq> g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. agree_on G f g = (f \\<subseteq> g)", "using assms"], ["proof (prove)\nusing this:\n  graph_homomorphism G X f\n  univalent g\n\ngoal (1 subgoal):\n 1. agree_on G f g = (f \\<subseteq> g)", "unfolding agree_on_def graph_homomorphism_def"], ["proof (prove)\nusing this:\n  vertices G = Domain f \\<and>\n  graph G \\<and>\n  graph X \\<and>\n  f `` vertices G \\<subseteq> vertices X \\<and>\n  univalent f \\<and> edge_preserving f (edges G) (edges X)\n  univalent g\n\ngoal (1 subgoal):\n 1. (\\<forall>v\\<in>vertices G. f `` {v} = g `` {v}) = (f \\<subseteq> g)", "by auto"], ["", "lemma agree_on_ext:\n  assumes \"agree_on G f\\<^sub>1 f\\<^sub>2\"\n  shows \"agree_on G (f\\<^sub>1 O g) (f\\<^sub>2 O g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. agree_on G (f\\<^sub>1 O g) (f\\<^sub>2 O g)", "using assms"], ["proof (prove)\nusing this:\n  agree_on G f\\<^sub>1 f\\<^sub>2\n\ngoal (1 subgoal):\n 1. agree_on G (f\\<^sub>1 O g) (f\\<^sub>2 O g)", "unfolding agree_on_def"], ["proof (prove)\nusing this:\n  \\<forall>v\\<in>vertices G. f\\<^sub>1 `` {v} = f\\<^sub>2 `` {v}\n\ngoal (1 subgoal):\n 1. \\<forall>v\\<in>vertices G.\n       (f\\<^sub>1 O g) `` {v} = (f\\<^sub>2 O g) `` {v}", "by auto"], ["", "lemma agree_on_then_eq:\n  assumes \"agree_on G f\\<^sub>1 f\\<^sub>2\" \"Domain f\\<^sub>1 = vertices G\" \"Domain f\\<^sub>2 = vertices G\"\n  shows \"f\\<^sub>1 = f\\<^sub>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f\\<^sub>1 = f\\<^sub>2", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. f\\<^sub>1 = f\\<^sub>2", "from assms"], ["proof (chain)\npicking this:\n  agree_on G f\\<^sub>1 f\\<^sub>2\n  Domain f\\<^sub>1 = vertices G\n  Domain f\\<^sub>2 = vertices G", "have agr:\"\\<And> v. v\\<in>Domain f\\<^sub>1 \\<Longrightarrow> f\\<^sub>1 `` {v} = f\\<^sub>2 `` {v}\""], ["proof (prove)\nusing this:\n  agree_on G f\\<^sub>1 f\\<^sub>2\n  Domain f\\<^sub>1 = vertices G\n  Domain f\\<^sub>2 = vertices G\n\ngoal (1 subgoal):\n 1. \\<And>v.\n       v \\<in> Domain f\\<^sub>1 \\<Longrightarrow>\n       f\\<^sub>1 `` {v} = f\\<^sub>2 `` {v}", "unfolding agree_on_def"], ["proof (prove)\nusing this:\n  \\<forall>v\\<in>vertices G. f\\<^sub>1 `` {v} = f\\<^sub>2 `` {v}\n  Domain f\\<^sub>1 = vertices G\n  Domain f\\<^sub>2 = vertices G\n\ngoal (1 subgoal):\n 1. \\<And>v.\n       v \\<in> Domain f\\<^sub>1 \\<Longrightarrow>\n       f\\<^sub>1 `` {v} = f\\<^sub>2 `` {v}", "by auto"], ["proof (state)\nthis:\n  ?v \\<in> Domain f\\<^sub>1 \\<Longrightarrow>\n  f\\<^sub>1 `` {?v} = f\\<^sub>2 `` {?v}\n\ngoal (1 subgoal):\n 1. f\\<^sub>1 = f\\<^sub>2", "have agr2:\"\\<And> v. v\\<notin>Domain f\\<^sub>1 \\<Longrightarrow> f\\<^sub>1 `` {v} = {}\"\n            \"\\<And> v. v\\<notin>Domain f\\<^sub>2 \\<Longrightarrow> f\\<^sub>2 `` {v} = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>v.\n        v \\<notin> Domain f\\<^sub>1 \\<Longrightarrow>\n        f\\<^sub>1 `` {v} = {}) &&&\n    (\\<And>v.\n        v \\<notin> Domain f\\<^sub>2 \\<Longrightarrow> f\\<^sub>2 `` {v} = {})", "by auto"], ["proof (state)\nthis:\n  ?v \\<notin> Domain f\\<^sub>1 \\<Longrightarrow> f\\<^sub>1 `` {?v} = {}\n  ?v \\<notin> Domain f\\<^sub>2 \\<Longrightarrow> f\\<^sub>2 `` {?v} = {}\n\ngoal (1 subgoal):\n 1. f\\<^sub>1 = f\\<^sub>2", "with agr agr2 assms"], ["proof (chain)\npicking this:\n  ?v \\<in> Domain f\\<^sub>1 \\<Longrightarrow>\n  f\\<^sub>1 `` {?v} = f\\<^sub>2 `` {?v}\n  ?v \\<notin> Domain f\\<^sub>1 \\<Longrightarrow> f\\<^sub>1 `` {?v} = {}\n  ?v \\<notin> Domain f\\<^sub>2 \\<Longrightarrow> f\\<^sub>2 `` {?v} = {}\n  agree_on G f\\<^sub>1 f\\<^sub>2\n  Domain f\\<^sub>1 = vertices G\n  Domain f\\<^sub>2 = vertices G\n  ?v \\<notin> Domain f\\<^sub>1 \\<Longrightarrow> f\\<^sub>1 `` {?v} = {}\n  ?v \\<notin> Domain f\\<^sub>2 \\<Longrightarrow> f\\<^sub>2 `` {?v} = {}", "have \"\\<And> v. f\\<^sub>1 `` {v} = f\\<^sub>2 `` {v}\""], ["proof (prove)\nusing this:\n  ?v \\<in> Domain f\\<^sub>1 \\<Longrightarrow>\n  f\\<^sub>1 `` {?v} = f\\<^sub>2 `` {?v}\n  ?v \\<notin> Domain f\\<^sub>1 \\<Longrightarrow> f\\<^sub>1 `` {?v} = {}\n  ?v \\<notin> Domain f\\<^sub>2 \\<Longrightarrow> f\\<^sub>2 `` {?v} = {}\n  agree_on G f\\<^sub>1 f\\<^sub>2\n  Domain f\\<^sub>1 = vertices G\n  Domain f\\<^sub>2 = vertices G\n  ?v \\<notin> Domain f\\<^sub>1 \\<Longrightarrow> f\\<^sub>1 `` {?v} = {}\n  ?v \\<notin> Domain f\\<^sub>2 \\<Longrightarrow> f\\<^sub>2 `` {?v} = {}\n\ngoal (1 subgoal):\n 1. \\<And>v. f\\<^sub>1 `` {v} = f\\<^sub>2 `` {v}", "by blast"], ["proof (state)\nthis:\n  f\\<^sub>1 `` {?v} = f\\<^sub>2 `` {?v}\n\ngoal (1 subgoal):\n 1. f\\<^sub>1 = f\\<^sub>2", "thus ?thesis"], ["proof (prove)\nusing this:\n  f\\<^sub>1 `` {?v} = f\\<^sub>2 `` {?v}\n\ngoal (1 subgoal):\n 1. f\\<^sub>1 = f\\<^sub>2", "by auto"], ["proof (state)\nthis:\n  f\\<^sub>1 = f\\<^sub>2\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma agree_on_subg_compose:\n  assumes \"agree_on R g h\" \"agree_on F f g\" \"subgraph F R\"\n  shows \"agree_on F f h\""], ["proof (prove)\ngoal (1 subgoal):\n 1. agree_on F f h", "using assms"], ["proof (prove)\nusing this:\n  agree_on R g h\n  agree_on F f g\n  subgraph F R\n\ngoal (1 subgoal):\n 1. agree_on F f h", "unfolding agree_on_def subgraph_def graph_union_iff"], ["proof (prove)\nusing this:\n  \\<forall>v\\<in>vertices R. g `` {v} = h `` {v}\n  \\<forall>v\\<in>vertices F. f `` {v} = g `` {v}\n  graph F \\<and>\n  graph R \\<and>\n  edges F \\<subseteq> edges R \\<and> vertices F \\<subseteq> vertices R\n\ngoal (1 subgoal):\n 1. \\<forall>v\\<in>vertices F. f `` {v} = h `` {v}", "by auto"], ["", "definition extensible :: \"('l,'x) Graph_PreRule \\<Rightarrow> ('l,'v) labeled_graph \\<Rightarrow> ('x \\<times> 'v) set \\<Rightarrow> bool\"\n  where\n\"extensible R G f \\<equiv> (\\<exists> g. graph_homomorphism (snd R) G g \\<and> agree_on (fst R) f g)\""], ["", "lemma extensibleI[intro]: (* not nice as a standard rule, since obtained variables cannot be used *)\n  assumes \"graph_homomorphism R2 G g\" \"agree_on R1 f g\"\n  shows \"extensible (R1,R2) G f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. extensible (R1, R2) G f", "using assms"], ["proof (prove)\nusing this:\n  graph_homomorphism R2 G g\n  agree_on R1 f g\n\ngoal (1 subgoal):\n 1. extensible (R1, R2) G f", "unfolding extensible_def"], ["proof (prove)\nusing this:\n  graph_homomorphism R2 G g\n  agree_on R1 f g\n\ngoal (1 subgoal):\n 1. \\<exists>g.\n       graph_homomorphism (snd (R1, R2)) G g \\<and>\n       agree_on (fst (R1, R2)) f g", "by auto"], ["", "lemma extensibleD[elim]:\n  assumes \"extensible R G f\"\n          \"\\<And> g. graph_homomorphism (snd R) G g \\<Longrightarrow> agree_on (fst R) f g \\<Longrightarrow> thesis\"\n  shows thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. thesis", "using assms extensible_def"], ["proof (prove)\nusing this:\n  extensible R G f\n  \\<lbrakk>graph_homomorphism (snd R) G ?g; agree_on (fst R) f ?g\\<rbrakk>\n  \\<Longrightarrow> thesis\n  extensible ?R ?G ?f \\<equiv>\n  \\<exists>g. graph_homomorphism (snd ?R) ?G g \\<and> agree_on (fst ?R) ?f g\n\ngoal (1 subgoal):\n 1. thesis", "by blast"], ["", "lemma extensible_refl_concr[simp]:\n  assumes \"graph_homomorphism (LG e\\<^sub>1 v) G f\"\n  shows \"extensible (LG e\\<^sub>1 v, LG e\\<^sub>2 v) G f \\<longleftrightarrow> graph_homomorphism (LG e\\<^sub>2 v) G f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. extensible (LG e\\<^sub>1 v, LG e\\<^sub>2 v) G f =\n    graph_homomorphism (LG e\\<^sub>2 v) G f", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. extensible (LG e\\<^sub>1 v, LG e\\<^sub>2 v) G f \\<Longrightarrow>\n    graph_homomorphism (LG e\\<^sub>2 v) G f\n 2. graph_homomorphism (LG e\\<^sub>2 v) G f \\<Longrightarrow>\n    extensible (LG e\\<^sub>1 v, LG e\\<^sub>2 v) G f", "assume \"extensible (LG e\\<^sub>1 v, LG e\\<^sub>2 v) G f\""], ["proof (state)\nthis:\n  extensible (LG e\\<^sub>1 v, LG e\\<^sub>2 v) G f\n\ngoal (2 subgoals):\n 1. extensible (LG e\\<^sub>1 v, LG e\\<^sub>2 v) G f \\<Longrightarrow>\n    graph_homomorphism (LG e\\<^sub>2 v) G f\n 2. graph_homomorphism (LG e\\<^sub>2 v) G f \\<Longrightarrow>\n    extensible (LG e\\<^sub>1 v, LG e\\<^sub>2 v) G f", "then"], ["proof (chain)\npicking this:\n  extensible (LG e\\<^sub>1 v, LG e\\<^sub>2 v) G f", "obtain g where g: \"graph_homomorphism (LG e\\<^sub>2 v) G g\" \"agree_on (LG e\\<^sub>1 v) f g\""], ["proof (prove)\nusing this:\n  extensible (LG e\\<^sub>1 v, LG e\\<^sub>2 v) G f\n\ngoal (1 subgoal):\n 1. (\\<And>g.\n        \\<lbrakk>graph_homomorphism (LG e\\<^sub>2 v) G g;\n         agree_on (LG e\\<^sub>1 v) f g\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding extensible_def"], ["proof (prove)\nusing this:\n  \\<exists>g.\n     graph_homomorphism (snd (LG e\\<^sub>1 v, LG e\\<^sub>2 v)) G g \\<and>\n     agree_on (fst (LG e\\<^sub>1 v, LG e\\<^sub>2 v)) f g\n\ngoal (1 subgoal):\n 1. (\\<And>g.\n        \\<lbrakk>graph_homomorphism (LG e\\<^sub>2 v) G g;\n         agree_on (LG e\\<^sub>1 v) f g\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  graph_homomorphism (LG e\\<^sub>2 v) G g\n  agree_on (LG e\\<^sub>1 v) f g\n\ngoal (2 subgoals):\n 1. extensible (LG e\\<^sub>1 v, LG e\\<^sub>2 v) G f \\<Longrightarrow>\n    graph_homomorphism (LG e\\<^sub>2 v) G f\n 2. graph_homomorphism (LG e\\<^sub>2 v) G f \\<Longrightarrow>\n    extensible (LG e\\<^sub>1 v, LG e\\<^sub>2 v) G f", "hence d:\"Domain f = Domain g\" \"univalent f\" \"univalent g\""], ["proof (prove)\nusing this:\n  graph_homomorphism (LG e\\<^sub>2 v) G g\n  agree_on (LG e\\<^sub>1 v) f g\n\ngoal (1 subgoal):\n 1. Domain f = Domain g &&& univalent f &&& univalent g", "using assms"], ["proof (prove)\nusing this:\n  graph_homomorphism (LG e\\<^sub>2 v) G g\n  agree_on (LG e\\<^sub>1 v) f g\n  graph_homomorphism (LG e\\<^sub>1 v) G f\n\ngoal (1 subgoal):\n 1. Domain f = Domain g &&& univalent f &&& univalent g", "unfolding graph_homomorphism_def"], ["proof (prove)\nusing this:\n  vertices (LG e\\<^sub>2 v) = Domain g \\<and>\n  graph (LG e\\<^sub>2 v) \\<and>\n  graph G \\<and>\n  g `` vertices (LG e\\<^sub>2 v) \\<subseteq> vertices G \\<and>\n  univalent g \\<and> edge_preserving g (edges (LG e\\<^sub>2 v)) (edges G)\n  agree_on (LG e\\<^sub>1 v) f g\n  vertices (LG e\\<^sub>1 v) = Domain f \\<and>\n  graph (LG e\\<^sub>1 v) \\<and>\n  graph G \\<and>\n  f `` vertices (LG e\\<^sub>1 v) \\<subseteq> vertices G \\<and>\n  univalent f \\<and> edge_preserving f (edges (LG e\\<^sub>1 v)) (edges G)\n\ngoal (1 subgoal):\n 1. Domain f = Domain g &&& univalent f &&& univalent g", "by auto"], ["proof (state)\nthis:\n  Domain f = Domain g\n  univalent f\n  univalent g\n\ngoal (2 subgoals):\n 1. extensible (LG e\\<^sub>1 v, LG e\\<^sub>2 v) G f \\<Longrightarrow>\n    graph_homomorphism (LG e\\<^sub>2 v) G f\n 2. graph_homomorphism (LG e\\<^sub>2 v) G f \\<Longrightarrow>\n    extensible (LG e\\<^sub>1 v, LG e\\<^sub>2 v) G f", "from g"], ["proof (chain)\npicking this:\n  graph_homomorphism (LG e\\<^sub>2 v) G g\n  agree_on (LG e\\<^sub>1 v) f g", "have subs:\"f \\<subseteq> g\""], ["proof (prove)\nusing this:\n  graph_homomorphism (LG e\\<^sub>2 v) G g\n  agree_on (LG e\\<^sub>1 v) f g\n\ngoal (1 subgoal):\n 1. f \\<subseteq> g", "by(subst agree_iff_subset[symmetric,OF assms],auto simp:graph_homomorphism_def)"], ["proof (state)\nthis:\n  f \\<subseteq> g\n\ngoal (2 subgoals):\n 1. extensible (LG e\\<^sub>1 v, LG e\\<^sub>2 v) G f \\<Longrightarrow>\n    graph_homomorphism (LG e\\<^sub>2 v) G f\n 2. graph_homomorphism (LG e\\<^sub>2 v) G f \\<Longrightarrow>\n    extensible (LG e\\<^sub>1 v, LG e\\<^sub>2 v) G f", "with d"], ["proof (chain)\npicking this:\n  Domain f = Domain g\n  univalent f\n  univalent g\n  f \\<subseteq> g", "have \"f = g\""], ["proof (prove)\nusing this:\n  Domain f = Domain g\n  univalent f\n  univalent g\n  f \\<subseteq> g\n\ngoal (1 subgoal):\n 1. f = g", "by auto"], ["proof (state)\nthis:\n  f = g\n\ngoal (2 subgoals):\n 1. extensible (LG e\\<^sub>1 v, LG e\\<^sub>2 v) G f \\<Longrightarrow>\n    graph_homomorphism (LG e\\<^sub>2 v) G f\n 2. graph_homomorphism (LG e\\<^sub>2 v) G f \\<Longrightarrow>\n    extensible (LG e\\<^sub>1 v, LG e\\<^sub>2 v) G f", "thus \"graph_homomorphism (LG e\\<^sub>2 v) G f\""], ["proof (prove)\nusing this:\n  f = g\n\ngoal (1 subgoal):\n 1. graph_homomorphism (LG e\\<^sub>2 v) G f", "using g"], ["proof (prove)\nusing this:\n  f = g\n  graph_homomorphism (LG e\\<^sub>2 v) G g\n  agree_on (LG e\\<^sub>1 v) f g\n\ngoal (1 subgoal):\n 1. graph_homomorphism (LG e\\<^sub>2 v) G f", "by auto"], ["proof (state)\nthis:\n  graph_homomorphism (LG e\\<^sub>2 v) G f\n\ngoal (1 subgoal):\n 1. graph_homomorphism (LG e\\<^sub>2 v) G f \\<Longrightarrow>\n    extensible (LG e\\<^sub>1 v, LG e\\<^sub>2 v) G f", "qed (auto simp: assms extensible_def)"], ["", "lemma   extensible_chain_sup[intro]:\nassumes \"chain S\" \"extensible R (S j) f\"\nshows \"extensible R (chain_sup S) f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. extensible R (chain_sup S) f", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. extensible R (chain_sup S) f", "from assms"], ["proof (chain)\npicking this:\n  chain S\n  extensible R (S j) f", "obtain g where g:\"graph_homomorphism (snd R) (S j) g \\<and> agree_on (fst R) f g\""], ["proof (prove)\nusing this:\n  chain S\n  extensible R (S j) f\n\ngoal (1 subgoal):\n 1. (\\<And>g.\n        graph_homomorphism (snd R) (S j) g \\<and>\n        agree_on (fst R) f g \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "unfolding extensible_def"], ["proof (prove)\nusing this:\n  chain S\n  \\<exists>g. graph_homomorphism (snd R) (S j) g \\<and> agree_on (fst R) f g\n\ngoal (1 subgoal):\n 1. (\\<And>g.\n        graph_homomorphism (snd R) (S j) g \\<and>\n        agree_on (fst R) f g \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  graph_homomorphism (snd R) (S j) g \\<and> agree_on (fst R) f g\n\ngoal (1 subgoal):\n 1. extensible R (chain_sup S) f", "have [simp]:\"g O Id_on (vertices (S j)) = g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. g O Id_on (vertices (S j)) = g", "using g[unfolded graph_homomorphism_def]"], ["proof (prove)\nusing this:\n  (vertices (snd R) = Domain g \\<and>\n   graph (snd R) \\<and>\n   graph (S j) \\<and>\n   g `` vertices (snd R) \\<subseteq> vertices (S j) \\<and>\n   univalent g \\<and>\n   edge_preserving g (edges (snd R)) (edges (S j))) \\<and>\n  agree_on (fst R) f g\n\ngoal (1 subgoal):\n 1. g O Id_on (vertices (S j)) = g", "by auto"], ["proof (state)\nthis:\n  g O Id_on (vertices (S j)) = g\n\ngoal (1 subgoal):\n 1. extensible R (chain_sup S) f", "from g assms(1)"], ["proof (chain)\npicking this:\n  graph_homomorphism (snd R) (S j) g \\<and> agree_on (fst R) f g\n  chain S", "have \"graph_homomorphism (snd R) (S j) g\" \"subgraph (S j) (chain_sup S)\""], ["proof (prove)\nusing this:\n  graph_homomorphism (snd R) (S j) g \\<and> agree_on (fst R) f g\n  chain S\n\ngoal (1 subgoal):\n 1. graph_homomorphism (snd R) (S j) g &&& subgraph (S j) (chain_sup S)", "by auto"], ["proof (state)\nthis:\n  graph_homomorphism (snd R) (S j) g\n  subgraph (S j) (chain_sup S)\n\ngoal (1 subgoal):\n 1. extensible R (chain_sup S) f", "from graph_homomorphism_composes[OF this]"], ["proof (chain)\npicking this:\n  graph_homomorphism (snd R) (chain_sup S) (g O Id_on (vertices (S j)))", "have \"graph_homomorphism (snd R) (chain_sup S) g\""], ["proof (prove)\nusing this:\n  graph_homomorphism (snd R) (chain_sup S) (g O Id_on (vertices (S j)))\n\ngoal (1 subgoal):\n 1. graph_homomorphism (snd R) (chain_sup S) g", "by auto"], ["proof (state)\nthis:\n  graph_homomorphism (snd R) (chain_sup S) g\n\ngoal (1 subgoal):\n 1. extensible R (chain_sup S) f", "thus ?thesis"], ["proof (prove)\nusing this:\n  graph_homomorphism (snd R) (chain_sup S) g\n\ngoal (1 subgoal):\n 1. extensible R (chain_sup S) f", "using g"], ["proof (prove)\nusing this:\n  graph_homomorphism (snd R) (chain_sup S) g\n  graph_homomorphism (snd R) (S j) g \\<and> agree_on (fst R) f g\n\ngoal (1 subgoal):\n 1. extensible R (chain_sup S) f", "unfolding extensible_def"], ["proof (prove)\nusing this:\n  graph_homomorphism (snd R) (chain_sup S) g\n  graph_homomorphism (snd R) (S j) g \\<and> agree_on (fst R) f g\n\ngoal (1 subgoal):\n 1. \\<exists>g.\n       graph_homomorphism (snd R) (chain_sup S) g \\<and>\n       agree_on (fst R) f g", "by blast"], ["proof (state)\nthis:\n  extensible R (chain_sup S) f\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>Definition 11.\\<close>"], ["", "definition maintained :: \"('l,'x) Graph_PreRule \\<Rightarrow> ('l,'v) labeled_graph \\<Rightarrow> bool\"\n  where \"maintained R G \\<equiv> \\<forall> f. graph_homomorphism (fst R) G f \\<longrightarrow> extensible R G f\""], ["", "abbreviation maintainedA\n  :: \"('l,'x) Graph_PreRule set \\<Rightarrow> ('l, 'v) labeled_graph \\<Rightarrow> bool\"\n  where \"maintainedA Rs G \\<equiv> \\<forall> R\\<in>Rs. maintained R G\""], ["", "lemma maintainedI[intro]:\n  assumes \"\\<And> f. graph_homomorphism A G f \\<Longrightarrow> extensible (A,B) G f\"\n  shows \"maintained (A,B) G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. maintained (A, B) G", "using assms"], ["proof (prove)\nusing this:\n  graph_homomorphism A G ?f \\<Longrightarrow> extensible (A, B) G ?f\n\ngoal (1 subgoal):\n 1. maintained (A, B) G", "unfolding maintained_def"], ["proof (prove)\nusing this:\n  graph_homomorphism A G ?f \\<Longrightarrow> extensible (A, B) G ?f\n\ngoal (1 subgoal):\n 1. \\<forall>f.\n       graph_homomorphism (fst (A, B)) G f \\<longrightarrow>\n       extensible (A, B) G f", "by auto"], ["", "lemma maintainedD[dest]:\n  assumes \"maintained (A,B) G\" \"graph_homomorphism A G f\"\n  shows \"extensible (A,B) G f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. extensible (A, B) G f", "using assms"], ["proof (prove)\nusing this:\n  maintained (A, B) G\n  graph_homomorphism A G f\n\ngoal (1 subgoal):\n 1. extensible (A, B) G f", "unfolding maintained_def"], ["proof (prove)\nusing this:\n  \\<forall>f.\n     graph_homomorphism (fst (A, B)) G f \\<longrightarrow>\n     extensible (A, B) G f\n  graph_homomorphism A G f\n\ngoal (1 subgoal):\n 1. extensible (A, B) G f", "by auto"], ["", "lemma maintainedD2[dest]:\n  assumes \"maintained (A,B) G\" \"graph_homomorphism A G f\"\n          \"\\<And> g. graph_homomorphism B G g \\<Longrightarrow> f \\<subseteq> g \\<Longrightarrow> thesis\"\n        shows thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. thesis", "using maintainedD[OF assms(1,2),unfolded extensible_def]"], ["proof (prove)\nusing this:\n  \\<exists>g.\n     graph_homomorphism (snd (A, B)) G g \\<and> agree_on (fst (A, B)) f g\n\ngoal (1 subgoal):\n 1. thesis", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       graph_homomorphism (snd (A, B)) G x \\<and>\n       agree_on (fst (A, B)) f x \\<Longrightarrow>\n       thesis", "fix g"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       graph_homomorphism (snd (A, B)) G x \\<and>\n       agree_on (fst (A, B)) f x \\<Longrightarrow>\n       thesis", "assume \"graph_homomorphism (snd (A, B)) G g \\<and> agree_on (fst (A, B)) f g\""], ["proof (state)\nthis:\n  graph_homomorphism (snd (A, B)) G g \\<and> agree_on (fst (A, B)) f g\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       graph_homomorphism (snd (A, B)) G x \\<and>\n       agree_on (fst (A, B)) f x \\<Longrightarrow>\n       thesis", "hence \"graph_homomorphism B G g\" \"f \\<subseteq> g\""], ["proof (prove)\nusing this:\n  graph_homomorphism (snd (A, B)) G g \\<and> agree_on (fst (A, B)) f g\n\ngoal (1 subgoal):\n 1. graph_homomorphism B G g &&& f \\<subseteq> g", "using assms(2)"], ["proof (prove)\nusing this:\n  graph_homomorphism (snd (A, B)) G g \\<and> agree_on (fst (A, B)) f g\n  graph_homomorphism A G f\n\ngoal (1 subgoal):\n 1. graph_homomorphism B G g &&& f \\<subseteq> g", "unfolding graph_homomorphism_def2 agree_on_def"], ["proof (prove)\nusing this:\n  (vertices (snd (A, B)) = Domain g \\<and>\n   univalent g \\<and>\n   graph (snd (A, B)) \\<and>\n   graph G \\<and> graph_union (map_graph g (snd (A, B))) G = G) \\<and>\n  (\\<forall>v\\<in>vertices (fst (A, B)). f `` {v} = g `` {v})\n  vertices A = Domain f \\<and>\n  univalent f \\<and>\n  graph A \\<and> graph G \\<and> graph_union (map_graph f A) G = G\n\ngoal (1 subgoal):\n 1. vertices B = Domain g \\<and>\n    univalent g \\<and>\n    graph B \\<and> graph G \\<and> graph_union (map_graph g B) G = G &&&\n    f \\<subseteq> g", "by auto"], ["proof (state)\nthis:\n  graph_homomorphism B G g\n  f \\<subseteq> g\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       graph_homomorphism (snd (A, B)) G x \\<and>\n       agree_on (fst (A, B)) f x \\<Longrightarrow>\n       thesis", "from assms(3)[OF this]"], ["proof (chain)\npicking this:\n  thesis", "show thesis"], ["proof (prove)\nusing this:\n  thesis\n\ngoal (1 subgoal):\n 1. thesis", "."], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma extensible_refl[intro]:\n  \"graph_homomorphism R G f \\<Longrightarrow> extensible (R,R) G f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. graph_homomorphism R G f \\<Longrightarrow> extensible (R, R) G f", "unfolding extensible_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. graph_homomorphism R G f \\<Longrightarrow>\n    \\<exists>g.\n       graph_homomorphism (snd (R, R)) G g \\<and> agree_on (fst (R, R)) f g", "by auto"], ["", "lemma maintained_refl[intro]:\n  \"maintained (R,R) G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. maintained (R, R) G", "by auto"], ["", "text \\<open>Alternate version of definition 8.\\<close>"], ["", "definition fin_maintained :: \"('l,'x) Graph_PreRule \\<Rightarrow> ('l,'v) labeled_graph \\<Rightarrow> bool\"\n  where\n\"fin_maintained R G \\<equiv> \\<forall> F f. finite_graph F\n                         \\<longrightarrow> subgraph F (fst R)\n                         \\<longrightarrow> extensible (F,fst R) G f\n                         \\<longrightarrow> graph_homomorphism F G f\n                         \\<longrightarrow> extensible (F,snd R) G f\""], ["", "lemma fin_maintainedI [intro]:\n  assumes \"\\<And> F f. finite_graph F\n           \\<Longrightarrow> subgraph F (fst R)\n           \\<Longrightarrow> extensible (F,fst R) G f\n           \\<Longrightarrow> graph_homomorphism F G f\n           \\<Longrightarrow> extensible (F,snd R) G f\"\n  shows \"fin_maintained R G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fin_maintained R G", "using assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>finite_graph ?F; subgraph ?F (fst R);\n   extensible (?F, fst R) G ?f; graph_homomorphism ?F G ?f\\<rbrakk>\n  \\<Longrightarrow> extensible (?F, snd R) G ?f\n\ngoal (1 subgoal):\n 1. fin_maintained R G", "unfolding fin_maintained_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>finite_graph ?F; subgraph ?F (fst R);\n   extensible (?F, fst R) G ?f; graph_homomorphism ?F G ?f\\<rbrakk>\n  \\<Longrightarrow> extensible (?F, snd R) G ?f\n\ngoal (1 subgoal):\n 1. \\<forall>F f.\n       finite_graph F \\<longrightarrow>\n       subgraph F (fst R) \\<longrightarrow>\n       extensible (F, fst R) G f \\<longrightarrow>\n       graph_homomorphism F G f \\<longrightarrow> extensible (F, snd R) G f", "by auto"], ["", "lemma maintained_then_fin_maintained[simp]:\n  assumes maintained:\"maintained R G\"\n  shows \"fin_maintained R G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fin_maintained R G", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>F f.\n       \\<lbrakk>finite_graph F; subgraph F (fst R);\n        extensible (F, fst R) G f; graph_homomorphism F G f\\<rbrakk>\n       \\<Longrightarrow> extensible (F, snd R) G f", "fix F f"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>F f.\n       \\<lbrakk>finite_graph F; subgraph F (fst R);\n        extensible (F, fst R) G f; graph_homomorphism F G f\\<rbrakk>\n       \\<Longrightarrow> extensible (F, snd R) G f", "assume subg:\"subgraph F (fst R)\"\n     and ext:\"extensible (F, fst R) G f\" and igh:\"graph_homomorphism F G f\""], ["proof (state)\nthis:\n  subgraph F (fst R)\n  extensible (F, fst R) G f\n  graph_homomorphism F G f\n\ngoal (1 subgoal):\n 1. \\<And>F f.\n       \\<lbrakk>finite_graph F; subgraph F (fst R);\n        extensible (F, fst R) G f; graph_homomorphism F G f\\<rbrakk>\n       \\<Longrightarrow> extensible (F, snd R) G f", "from ext[unfolded extensible_def prod.sel]"], ["proof (chain)\npicking this:\n  \\<exists>g. graph_homomorphism (fst R) G g \\<and> agree_on F f g", "obtain g where\n     g:\"graph_homomorphism (fst R) G g\" \"agree_on F f g\""], ["proof (prove)\nusing this:\n  \\<exists>g. graph_homomorphism (fst R) G g \\<and> agree_on F f g\n\ngoal (1 subgoal):\n 1. (\\<And>g.\n        \\<lbrakk>graph_homomorphism (fst R) G g; agree_on F f g\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  graph_homomorphism (fst R) G g\n  agree_on F f g\n\ngoal (1 subgoal):\n 1. \\<And>F f.\n       \\<lbrakk>finite_graph F; subgraph F (fst R);\n        extensible (F, fst R) G f; graph_homomorphism F G f\\<rbrakk>\n       \\<Longrightarrow> extensible (F, snd R) G f", "from maintained[unfolded maintained_def,rule_format,OF g(1)] g(2) subg\n       agree_on_subg_compose"], ["proof (chain)\npicking this:\n  extensible R G g\n  agree_on F f g\n  subgraph F (fst R)\n  \\<lbrakk>agree_on ?R ?g ?h; agree_on ?F ?f ?g; subgraph ?F ?R\\<rbrakk>\n  \\<Longrightarrow> agree_on ?F ?f ?h", "show \"extensible (F, snd R) G f\""], ["proof (prove)\nusing this:\n  extensible R G g\n  agree_on F f g\n  subgraph F (fst R)\n  \\<lbrakk>agree_on ?R ?g ?h; agree_on ?F ?f ?g; subgraph ?F ?R\\<rbrakk>\n  \\<Longrightarrow> agree_on ?F ?f ?h\n\ngoal (1 subgoal):\n 1. extensible (F, snd R) G f", "unfolding extensible_def prod.sel"], ["proof (prove)\nusing this:\n  \\<exists>ga. graph_homomorphism (snd R) G ga \\<and> agree_on (fst R) g ga\n  agree_on F f g\n  subgraph F (fst R)\n  \\<lbrakk>agree_on ?R ?g ?h; agree_on ?F ?f ?g; subgraph ?F ?R\\<rbrakk>\n  \\<Longrightarrow> agree_on ?F ?f ?h\n\ngoal (1 subgoal):\n 1. \\<exists>g. graph_homomorphism (snd R) G g \\<and> agree_on F f g", "by blast"], ["proof (state)\nthis:\n  extensible (F, snd R) G f\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma fin_maintained_maintained:\n  assumes \"finite_graph (fst R)\"\n  shows \"fin_maintained R G \\<longleftrightarrow> maintained R G\" (is \"?lhs = ?rhs\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. fin_maintained R G = maintained R G", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. fin_maintained R G \\<Longrightarrow> maintained R G\n 2. maintained R G \\<Longrightarrow> fin_maintained R G", "from assms rev_finite_subset"], ["proof (chain)\npicking this:\n  finite_graph (fst R)\n  \\<lbrakk>finite ?B; ?A \\<subseteq> ?B\\<rbrakk> \\<Longrightarrow> finite ?A", "have fin:\"finite (vertices (fst R))\"\n           \"finite (edges (fst R))\"\n           \"subgraph (fst R) (fst R)\""], ["proof (prove)\nusing this:\n  finite_graph (fst R)\n  \\<lbrakk>finite ?B; ?A \\<subseteq> ?B\\<rbrakk> \\<Longrightarrow> finite ?A\n\ngoal (1 subgoal):\n 1. finite (vertices (fst R)) &&&\n    finite (edges (fst R)) &&& subgraph (fst R) (fst R)", "unfolding subgraph_def graph_union_iff"], ["proof (prove)\nusing this:\n  finite_graph (fst R)\n  \\<lbrakk>finite ?B; ?A \\<subseteq> ?B\\<rbrakk> \\<Longrightarrow> finite ?A\n\ngoal (1 subgoal):\n 1. finite (vertices (fst R)) &&&\n    finite (edges (fst R)) &&&\n    graph (fst R) \\<and>\n    graph (fst R) \\<and>\n    edges (fst R) \\<subseteq> edges (fst R) \\<and>\n    vertices (fst R) \\<subseteq> vertices (fst R)", "by auto"], ["proof (state)\nthis:\n  finite (vertices (fst R))\n  finite (edges (fst R))\n  subgraph (fst R) (fst R)\n\ngoal (2 subgoals):\n 1. fin_maintained R G \\<Longrightarrow> maintained R G\n 2. maintained R G \\<Longrightarrow> fin_maintained R G", "assume ?lhs"], ["proof (state)\nthis:\n  fin_maintained R G\n\ngoal (2 subgoals):\n 1. fin_maintained R G \\<Longrightarrow> maintained R G\n 2. maintained R G \\<Longrightarrow> fin_maintained R G", "with fin"], ["proof (chain)\npicking this:\n  finite (vertices (fst R))\n  finite (edges (fst R))\n  subgraph (fst R) (fst R)\n  fin_maintained R G", "have \"extensible (fst R, fst R) G f \\<Longrightarrow> graph_homomorphism (fst R) G f\n         \\<Longrightarrow> extensible R G f\" for f"], ["proof (prove)\nusing this:\n  finite (vertices (fst R))\n  finite (edges (fst R))\n  subgraph (fst R) (fst R)\n  fin_maintained R G\n\ngoal (1 subgoal):\n 1. \\<lbrakk>extensible (fst R, fst R) G f;\n     graph_homomorphism (fst R) G f\\<rbrakk>\n    \\<Longrightarrow> extensible R G f", "unfolding fin_maintained_def"], ["proof (prove)\nusing this:\n  finite (vertices (fst R))\n  finite (edges (fst R))\n  subgraph (fst R) (fst R)\n  \\<forall>F f.\n     finite_graph F \\<longrightarrow>\n     subgraph F (fst R) \\<longrightarrow>\n     extensible (F, fst R) G f \\<longrightarrow>\n     graph_homomorphism F G f \\<longrightarrow> extensible (F, snd R) G f\n\ngoal (1 subgoal):\n 1. \\<lbrakk>extensible (fst R, fst R) G f;\n     graph_homomorphism (fst R) G f\\<rbrakk>\n    \\<Longrightarrow> extensible R G f", "by auto"], ["proof (state)\nthis:\n  \\<lbrakk>extensible (fst R, fst R) G ?f;\n   graph_homomorphism (fst R) G ?f\\<rbrakk>\n  \\<Longrightarrow> extensible R G ?f\n\ngoal (2 subgoals):\n 1. fin_maintained R G \\<Longrightarrow> maintained R G\n 2. maintained R G \\<Longrightarrow> fin_maintained R G", "thus ?rhs"], ["proof (prove)\nusing this:\n  \\<lbrakk>extensible (fst R, fst R) G ?f;\n   graph_homomorphism (fst R) G ?f\\<rbrakk>\n  \\<Longrightarrow> extensible R G ?f\n\ngoal (1 subgoal):\n 1. maintained R G", "by (simp add: extensible_refl maintained_def)"], ["proof (state)\nthis:\n  maintained R G\n\ngoal (1 subgoal):\n 1. maintained R G \\<Longrightarrow> fin_maintained R G", "qed simp"], ["", "lemma extend_for_chain:\nassumes \"g 0 = f\"\n    and \"\\<And> i. graph_homomorphism (S i) C (g i)\"\n    and \"\\<And> i. agree_on (S i) (g i) (g (i + 1))\"\n    and \"chain S\"\n  shows \"extensible (S 0, chain_sup S) C f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. extensible (S 0, chain_sup S) C f", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. graph_homomorphism (chain_sup S) C ?g\n 2. agree_on (S 0) f ?g", "let ?g = \"\\<Union>i. g i\""], ["proof (state)\ngoal (2 subgoals):\n 1. graph_homomorphism (chain_sup S) C ?g\n 2. agree_on (S 0) f ?g", "from assms(4)[unfolded chain_def subgraph_def graph_union_iff]"], ["proof (chain)\npicking this:\n  \\<forall>i.\n     graph (S i) \\<and>\n     graph (S (i + 1)) \\<and>\n     edges (S i) \\<subseteq> edges (S (i + 1)) \\<and>\n     vertices (S i) \\<subseteq> vertices (S (i + 1))", "have v:\"vertices (S i) \\<subseteq> vertices (S (i + 1))\"\n    and e:\"edges (S i) \\<subseteq> edges (S (i + 1))\" for i"], ["proof (prove)\nusing this:\n  \\<forall>i.\n     graph (S i) \\<and>\n     graph (S (i + 1)) \\<and>\n     edges (S i) \\<subseteq> edges (S (i + 1)) \\<and>\n     vertices (S i) \\<subseteq> vertices (S (i + 1))\n\ngoal (1 subgoal):\n 1. vertices (S i) \\<subseteq> vertices (S (i + 1)) &&&\n    edges (S i) \\<subseteq> edges (S (i + 1))", "by auto"], ["proof (state)\nthis:\n  vertices (S ?i) \\<subseteq> vertices (S (?i + 1))\n  edges (S ?i) \\<subseteq> edges (S (?i + 1))\n\ngoal (2 subgoals):\n 1. graph_homomorphism (chain_sup S) C ?g\n 2. agree_on (S 0) f ?g", "{"], ["proof (state)\nthis:\n  vertices (S ?i) \\<subseteq> vertices (S (?i + 1))\n  edges (S ?i) \\<subseteq> edges (S (?i + 1))\n\ngoal (2 subgoals):\n 1. graph_homomorphism (chain_sup S) C ?g\n 2. agree_on (S 0) f ?g", "fix a b i"], ["proof (state)\ngoal (2 subgoals):\n 1. graph_homomorphism (chain_sup S) C ?g\n 2. agree_on (S 0) f ?g", "assume a:\"(a, b) \\<in> g i\""], ["proof (state)\nthis:\n  (a, b) \\<in> g i\n\ngoal (2 subgoals):\n 1. graph_homomorphism (chain_sup S) C ?g\n 2. agree_on (S 0) f ?g", "hence \"a \\<in> vertices (S i)\""], ["proof (prove)\nusing this:\n  (a, b) \\<in> g i\n\ngoal (1 subgoal):\n 1. a \\<in> vertices (S i)", "using assms(2)[of i]"], ["proof (prove)\nusing this:\n  (a, b) \\<in> g i\n  graph_homomorphism (S i) C (g i)\n\ngoal (1 subgoal):\n 1. a \\<in> vertices (S i)", "unfolding graph_homomorphism_def2"], ["proof (prove)\nusing this:\n  (a, b) \\<in> g i\n  vertices (S i) = Domain (g i) \\<and>\n  univalent (g i) \\<and>\n  graph (S i) \\<and>\n  graph C \\<and> graph_union (map_graph (g i) (S i)) C = C\n\ngoal (1 subgoal):\n 1. a \\<in> vertices (S i)", "by auto"], ["proof (state)\nthis:\n  a \\<in> vertices (S i)\n\ngoal (2 subgoals):\n 1. graph_homomorphism (chain_sup S) C ?g\n 2. agree_on (S 0) f ?g", "from assms(3)[unfolded agree_on_def,rule_format,OF this] a"], ["proof (chain)\npicking this:\n  g i `` {a} = g (i + 1) `` {a}\n  (a, b) \\<in> g i", "have \"(a, b) \\<in> g (Suc i)\""], ["proof (prove)\nusing this:\n  g i `` {a} = g (i + 1) `` {a}\n  (a, b) \\<in> g i\n\ngoal (1 subgoal):\n 1. (a, b) \\<in> g (Suc i)", "by auto"], ["proof (state)\nthis:\n  (a, b) \\<in> g (Suc i)\n\ngoal (2 subgoals):\n 1. graph_homomorphism (chain_sup S) C ?g\n 2. agree_on (S 0) f ?g", "}"], ["proof (state)\nthis:\n  (?a2, ?b2) \\<in> g ?i2 \\<Longrightarrow> (?a2, ?b2) \\<in> g (Suc ?i2)\n\ngoal (2 subgoals):\n 1. graph_homomorphism (chain_sup S) C ?g\n 2. agree_on (S 0) f ?g", "hence gi:\"g i \\<subseteq> g (Suc i)\" for i"], ["proof (prove)\nusing this:\n  (?a2, ?b2) \\<in> g ?i2 \\<Longrightarrow> (?a2, ?b2) \\<in> g (Suc ?i2)\n\ngoal (1 subgoal):\n 1. g i \\<subseteq> g (Suc i)", "by auto"], ["proof (state)\nthis:\n  g ?i \\<subseteq> g (Suc ?i)\n\ngoal (2 subgoals):\n 1. graph_homomorphism (chain_sup S) C ?g\n 2. agree_on (S 0) f ?g", "have gij:\"i \\<le> j \\<Longrightarrow> g i \\<subseteq> g j\" for i j"], ["proof (prove)\ngoal (1 subgoal):\n 1. i \\<le> j \\<Longrightarrow> g i \\<subseteq> g j", "proof(induct j)"], ["proof (state)\ngoal (2 subgoals):\n 1. i \\<le> 0 \\<Longrightarrow> g i \\<subseteq> g 0\n 2. \\<And>j.\n       \\<lbrakk>i \\<le> j \\<Longrightarrow> g i \\<subseteq> g j;\n        i \\<le> Suc j\\<rbrakk>\n       \\<Longrightarrow> g i \\<subseteq> g (Suc j)", "case (Suc j)"], ["proof (state)\nthis:\n  i \\<le> j \\<Longrightarrow> g i \\<subseteq> g j\n  i \\<le> Suc j\n\ngoal (2 subgoals):\n 1. i \\<le> 0 \\<Longrightarrow> g i \\<subseteq> g 0\n 2. \\<And>j.\n       \\<lbrakk>i \\<le> j \\<Longrightarrow> g i \\<subseteq> g j;\n        i \\<le> Suc j\\<rbrakk>\n       \\<Longrightarrow> g i \\<subseteq> g (Suc j)", "with gi[of j]"], ["proof (chain)\npicking this:\n  g j \\<subseteq> g (Suc j)\n  i \\<le> j \\<Longrightarrow> g i \\<subseteq> g j\n  i \\<le> Suc j", "show ?case"], ["proof (prove)\nusing this:\n  g j \\<subseteq> g (Suc j)\n  i \\<le> j \\<Longrightarrow> g i \\<subseteq> g j\n  i \\<le> Suc j\n\ngoal (1 subgoal):\n 1. g i \\<subseteq> g (Suc j)", "by (cases \"i = Suc j\",auto)"], ["proof (state)\nthis:\n  g i \\<subseteq> g (Suc j)\n\ngoal (1 subgoal):\n 1. i \\<le> 0 \\<Longrightarrow> g i \\<subseteq> g 0", "qed auto"], ["proof (state)\nthis:\n  ?i \\<le> ?j \\<Longrightarrow> g ?i \\<subseteq> g ?j\n\ngoal (2 subgoals):\n 1. graph_homomorphism (chain_sup S) C ?g\n 2. agree_on (S 0) f ?g", "from assms(1)"], ["proof (chain)\npicking this:\n  g 0 = f", "have f_subset:\"f \\<subseteq> ?g\""], ["proof (prove)\nusing this:\n  g 0 = f\n\ngoal (1 subgoal):\n 1. f \\<subseteq> \\<Union> (range g)", "by auto"], ["proof (state)\nthis:\n  f \\<subseteq> \\<Union> (range g)\n\ngoal (2 subgoals):\n 1. graph_homomorphism (chain_sup S) C ?g\n 2. agree_on (S 0) f ?g", "from assms(2)[of 0,unfolded assms(1)]"], ["proof (chain)\npicking this:\n  graph_homomorphism (S 0) C f", "have domf:\"Domain f = vertices (S 0)\"\n    and grC:\"graph C\" and v_dom:\"vertices (S i) = Domain (g i)\" for i"], ["proof (prove)\nusing this:\n  graph_homomorphism (S 0) C f\n\ngoal (1 subgoal):\n 1. Domain f = vertices (S 0) &&& graph C &&& vertices (S i) = Domain (g i)", "using assms(2)"], ["proof (prove)\nusing this:\n  graph_homomorphism (S 0) C f\n  graph_homomorphism (S ?i) C (g ?i)\n\ngoal (1 subgoal):\n 1. Domain f = vertices (S 0) &&& graph C &&& vertices (S i) = Domain (g i)", "unfolding graph_homomorphism_def"], ["proof (prove)\nusing this:\n  vertices (S 0) = Domain f \\<and>\n  graph (S 0) \\<and>\n  graph C \\<and>\n  f `` vertices (S 0) \\<subseteq> vertices C \\<and>\n  univalent f \\<and> edge_preserving f (edges (S 0)) (edges C)\n  vertices (S ?i) = Domain (g ?i) \\<and>\n  graph (S ?i) \\<and>\n  graph C \\<and>\n  g ?i `` vertices (S ?i) \\<subseteq> vertices C \\<and>\n  univalent (g ?i) \\<and> edge_preserving (g ?i) (edges (S ?i)) (edges C)\n\ngoal (1 subgoal):\n 1. Domain f = vertices (S 0) &&& graph C &&& vertices (S i) = Domain (g i)", "by auto"], ["proof (state)\nthis:\n  Domain f = vertices (S 0)\n  graph C\n  vertices (S ?i) = Domain (g ?i)\n\ngoal (2 subgoals):\n 1. graph_homomorphism (chain_sup S) C ?g\n 2. agree_on (S 0) f ?g", "{"], ["proof (state)\nthis:\n  Domain f = vertices (S 0)\n  graph C\n  vertices (S ?i) = Domain (g ?i)\n\ngoal (2 subgoals):\n 1. graph_homomorphism (chain_sup S) C ?g\n 2. agree_on (S 0) f ?g", "fix x y z i j"], ["proof (state)\ngoal (2 subgoals):\n 1. graph_homomorphism (chain_sup S) C ?g\n 2. agree_on (S 0) f ?g", "assume \"(x, y) \\<in> g i\" \"(x, z) \\<in> g j\""], ["proof (state)\nthis:\n  (x, y) \\<in> g i\n  (x, z) \\<in> g j\n\ngoal (2 subgoals):\n 1. graph_homomorphism (chain_sup S) C ?g\n 2. agree_on (S 0) f ?g", "with gij[of i \"max i j\"] gij[of j \"max i j\"]"], ["proof (chain)\npicking this:\n  i \\<le> max i j \\<Longrightarrow> g i \\<subseteq> g (max i j)\n  j \\<le> max i j \\<Longrightarrow> g j \\<subseteq> g (max i j)\n  (x, y) \\<in> g i\n  (x, z) \\<in> g j", "have \"(x,y) \\<in> g (max i j)\" \"(x,z) \\<in> g (max i j)\""], ["proof (prove)\nusing this:\n  i \\<le> max i j \\<Longrightarrow> g i \\<subseteq> g (max i j)\n  j \\<le> max i j \\<Longrightarrow> g j \\<subseteq> g (max i j)\n  (x, y) \\<in> g i\n  (x, z) \\<in> g j\n\ngoal (1 subgoal):\n 1. (x, y) \\<in> g (max i j) &&& (x, z) \\<in> g (max i j)", "by auto"], ["proof (state)\nthis:\n  (x, y) \\<in> g (max i j)\n  (x, z) \\<in> g (max i j)\n\ngoal (2 subgoals):\n 1. graph_homomorphism (chain_sup S) C ?g\n 2. agree_on (S 0) f ?g", "with assms(2)[unfolded graph_homomorphism_def]"], ["proof (chain)\npicking this:\n  vertices (S ?i) = Domain (g ?i) \\<and>\n  graph (S ?i) \\<and>\n  graph C \\<and>\n  g ?i `` vertices (S ?i) \\<subseteq> vertices C \\<and>\n  univalent (g ?i) \\<and> edge_preserving (g ?i) (edges (S ?i)) (edges C)\n  (x, y) \\<in> g (max i j)\n  (x, z) \\<in> g (max i j)", "have \"y = z\""], ["proof (prove)\nusing this:\n  vertices (S ?i) = Domain (g ?i) \\<and>\n  graph (S ?i) \\<and>\n  graph C \\<and>\n  g ?i `` vertices (S ?i) \\<subseteq> vertices C \\<and>\n  univalent (g ?i) \\<and> edge_preserving (g ?i) (edges (S ?i)) (edges C)\n  (x, y) \\<in> g (max i j)\n  (x, z) \\<in> g (max i j)\n\ngoal (1 subgoal):\n 1. y = z", "by auto"], ["proof (state)\nthis:\n  y = z\n\ngoal (2 subgoals):\n 1. graph_homomorphism (chain_sup S) C ?g\n 2. agree_on (S 0) f ?g", "}"], ["proof (state)\nthis:\n  \\<lbrakk>(?x2, ?y2) \\<in> g ?i2; (?x2, ?z2) \\<in> g ?j2\\<rbrakk>\n  \\<Longrightarrow> ?y2 = ?z2\n\ngoal (2 subgoals):\n 1. graph_homomorphism (chain_sup S) C ?g\n 2. agree_on (S 0) f ?g", "note univ_strong = this"], ["proof (state)\nthis:\n  \\<lbrakk>(?x2, ?y2) \\<in> g ?i2; (?x2, ?z2) \\<in> g ?j2\\<rbrakk>\n  \\<Longrightarrow> ?y2 = ?z2\n\ngoal (2 subgoals):\n 1. graph_homomorphism (chain_sup S) C ?g\n 2. agree_on (S 0) f ?g", "hence univ:\"univalent ?g\""], ["proof (prove)\nusing this:\n  \\<lbrakk>(?x2, ?y2) \\<in> g ?i2; (?x2, ?z2) \\<in> g ?j2\\<rbrakk>\n  \\<Longrightarrow> ?y2 = ?z2\n\ngoal (1 subgoal):\n 1. univalent (\\<Union> (range g))", "unfolding univalent_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>(?x2, ?y2) \\<in> g ?i2; (?x2, ?z2) \\<in> g ?j2\\<rbrakk>\n  \\<Longrightarrow> ?y2 = ?z2\n\ngoal (1 subgoal):\n 1. \\<forall>x y z.\n       (x, y) \\<in> \\<Union> (range g) \\<and>\n       (x, z) \\<in> \\<Union> (range g) \\<longrightarrow>\n       z = y", "by auto"], ["proof (state)\nthis:\n  univalent (\\<Union> (range g))\n\ngoal (2 subgoals):\n 1. graph_homomorphism (chain_sup S) C ?g\n 2. agree_on (S 0) f ?g", "{"], ["proof (state)\nthis:\n  univalent (\\<Union> (range g))\n\ngoal (2 subgoals):\n 1. graph_homomorphism (chain_sup S) C ?g\n 2. agree_on (S 0) f ?g", "fix xa x i"], ["proof (state)\ngoal (2 subgoals):\n 1. graph_homomorphism (chain_sup S) C ?g\n 2. agree_on (S 0) f ?g", "assume \"(xa, x) \\<in> g i\""], ["proof (state)\nthis:\n  (xa, x) \\<in> g i\n\ngoal (2 subgoals):\n 1. graph_homomorphism (chain_sup S) C ?g\n 2. agree_on (S 0) f ?g", "hence \"x \\<in> vertices (map_graph (g i) (S i))\""], ["proof (prove)\nusing this:\n  (xa, x) \\<in> g i\n\ngoal (1 subgoal):\n 1. x \\<in> vertices (map_graph (g i) (S i))", "using assms(2)"], ["proof (prove)\nusing this:\n  (xa, x) \\<in> g i\n  graph_homomorphism (S ?i) C (g ?i)\n\ngoal (1 subgoal):\n 1. x \\<in> vertices (map_graph (g i) (S i))", "unfolding graph_homomorphism_def"], ["proof (prove)\nusing this:\n  (xa, x) \\<in> g i\n  vertices (S ?i) = Domain (g ?i) \\<and>\n  graph (S ?i) \\<and>\n  graph C \\<and>\n  g ?i `` vertices (S ?i) \\<subseteq> vertices C \\<and>\n  univalent (g ?i) \\<and> edge_preserving (g ?i) (edges (S ?i)) (edges C)\n\ngoal (1 subgoal):\n 1. x \\<in> vertices (map_graph (g i) (S i))", "by auto"], ["proof (state)\nthis:\n  x \\<in> vertices (map_graph (g i) (S i))\n\ngoal (2 subgoals):\n 1. graph_homomorphism (chain_sup S) C ?g\n 2. agree_on (S 0) f ?g", "hence \"x \\<in> vertices C\""], ["proof (prove)\nusing this:\n  x \\<in> vertices (map_graph (g i) (S i))\n\ngoal (1 subgoal):\n 1. x \\<in> vertices C", "using assms(2)"], ["proof (prove)\nusing this:\n  x \\<in> vertices (map_graph (g i) (S i))\n  graph_homomorphism (S ?i) C (g ?i)\n\ngoal (1 subgoal):\n 1. x \\<in> vertices C", "unfolding graph_homomorphism_def2 graph_union_iff"], ["proof (prove)\nusing this:\n  x \\<in> vertices (map_graph (g i) (S i))\n  vertices (S ?i) = Domain (g ?i) \\<and>\n  univalent (g ?i) \\<and>\n  graph (S ?i) \\<and>\n  graph C \\<and>\n  edges (map_graph (g ?i) (S ?i)) \\<subseteq> edges C \\<and>\n  vertices (map_graph (g ?i) (S ?i)) \\<subseteq> vertices C\n\ngoal (1 subgoal):\n 1. x \\<in> vertices C", "by blast"], ["proof (state)\nthis:\n  x \\<in> vertices C\n\ngoal (2 subgoals):\n 1. graph_homomorphism (chain_sup S) C ?g\n 2. agree_on (S 0) f ?g", "}"], ["proof (state)\nthis:\n  (?xa2, ?x2) \\<in> g ?i2 \\<Longrightarrow> ?x2 \\<in> vertices C\n\ngoal (2 subgoals):\n 1. graph_homomorphism (chain_sup S) C ?g\n 2. agree_on (S 0) f ?g", "note eq_v = this"], ["proof (state)\nthis:\n  (?xa2, ?x2) \\<in> g ?i2 \\<Longrightarrow> ?x2 \\<in> vertices C\n\ngoal (2 subgoals):\n 1. graph_homomorphism (chain_sup S) C ?g\n 2. agree_on (S 0) f ?g", "{"], ["proof (state)\nthis:\n  (?xa2, ?x2) \\<in> g ?i2 \\<Longrightarrow> ?x2 \\<in> vertices C\n\ngoal (2 subgoals):\n 1. graph_homomorphism (chain_sup S) C ?g\n 2. agree_on (S 0) f ?g", "fix l x y x' y' j i"], ["proof (state)\ngoal (2 subgoals):\n 1. graph_homomorphism (chain_sup S) C ?g\n 2. agree_on (S 0) f ?g", "assume \"(l,x,y) \\<in> edges (S j)\" \"(x, x') \\<in> g i\" \"(y, y') \\<in> g i\""], ["proof (state)\nthis:\n  (l, x, y) \\<in> edges (S j)\n  (x, x') \\<in> g i\n  (y, y') \\<in> g i\n\ngoal (2 subgoals):\n 1. graph_homomorphism (chain_sup S) C ?g\n 2. agree_on (S 0) f ?g", "with gij[of i \"max i j\"] gij[of j \"max i j\"]\n         chain[OF assms(4),unfolded subgraph_def graph_union_iff, of i \"max i j\"]\n         chain[OF assms(4),unfolded subgraph_def graph_union_iff, of j \"max i j\"]"], ["proof (chain)\npicking this:\n  i \\<le> max i j \\<Longrightarrow> g i \\<subseteq> g (max i j)\n  j \\<le> max i j \\<Longrightarrow> g j \\<subseteq> g (max i j)\n  i \\<le> max i j \\<Longrightarrow>\n  graph (S i) \\<and>\n  graph (S (max i j)) \\<and>\n  edges (S i) \\<subseteq> edges (S (max i j)) \\<and>\n  vertices (S i) \\<subseteq> vertices (S (max i j))\n  j \\<le> max i j \\<Longrightarrow>\n  graph (S j) \\<and>\n  graph (S (max i j)) \\<and>\n  edges (S j) \\<subseteq> edges (S (max i j)) \\<and>\n  vertices (S j) \\<subseteq> vertices (S (max i j))\n  (l, x, y) \\<in> edges (S j)\n  (x, x') \\<in> g i\n  (y, y') \\<in> g i", "have \"(x,x') \\<in> g (max i j)\" \"(y,y') \\<in> g (max i j)\"\n         \"(l,x,y) \\<in> edges (S (max i j))\""], ["proof (prove)\nusing this:\n  i \\<le> max i j \\<Longrightarrow> g i \\<subseteq> g (max i j)\n  j \\<le> max i j \\<Longrightarrow> g j \\<subseteq> g (max i j)\n  i \\<le> max i j \\<Longrightarrow>\n  graph (S i) \\<and>\n  graph (S (max i j)) \\<and>\n  edges (S i) \\<subseteq> edges (S (max i j)) \\<and>\n  vertices (S i) \\<subseteq> vertices (S (max i j))\n  j \\<le> max i j \\<Longrightarrow>\n  graph (S j) \\<and>\n  graph (S (max i j)) \\<and>\n  edges (S j) \\<subseteq> edges (S (max i j)) \\<and>\n  vertices (S j) \\<subseteq> vertices (S (max i j))\n  (l, x, y) \\<in> edges (S j)\n  (x, x') \\<in> g i\n  (y, y') \\<in> g i\n\ngoal (1 subgoal):\n 1. (x, x') \\<in> g (max i j) &&&\n    (y, y') \\<in> g (max i j) &&& (l, x, y) \\<in> edges (S (max i j))", "by auto"], ["proof (state)\nthis:\n  (x, x') \\<in> g (max i j)\n  (y, y') \\<in> g (max i j)\n  (l, x, y) \\<in> edges (S (max i j))\n\ngoal (2 subgoals):\n 1. graph_homomorphism (chain_sup S) C ?g\n 2. agree_on (S 0) f ?g", "hence \"(l, x', y') \\<in> edges C\""], ["proof (prove)\nusing this:\n  (x, x') \\<in> g (max i j)\n  (y, y') \\<in> g (max i j)\n  (l, x, y) \\<in> edges (S (max i j))\n\ngoal (1 subgoal):\n 1. (l, x', y') \\<in> edges C", "using assms(2)[unfolded graph_homomorphism_def2 graph_union_iff]"], ["proof (prove)\nusing this:\n  (x, x') \\<in> g (max i j)\n  (y, y') \\<in> g (max i j)\n  (l, x, y) \\<in> edges (S (max i j))\n  vertices (S ?i) = Domain (g ?i) \\<and>\n  univalent (g ?i) \\<and>\n  graph (S ?i) \\<and>\n  graph C \\<and>\n  edges (map_graph (g ?i) (S ?i)) \\<subseteq> edges C \\<and>\n  vertices (map_graph (g ?i) (S ?i)) \\<subseteq> vertices C\n\ngoal (1 subgoal):\n 1. (l, x', y') \\<in> edges C", "by auto"], ["proof (state)\nthis:\n  (l, x', y') \\<in> edges C\n\ngoal (2 subgoals):\n 1. graph_homomorphism (chain_sup S) C ?g\n 2. agree_on (S 0) f ?g", "}"], ["proof (state)\nthis:\n  \\<lbrakk>(?l2, ?x2, ?y2) \\<in> edges (S ?j2); (?x2, ?x'2) \\<in> g ?i2;\n   (?y2, ?y'2) \\<in> g ?i2\\<rbrakk>\n  \\<Longrightarrow> (?l2, ?x'2, ?y'2) \\<in> edges C\n\ngoal (2 subgoals):\n 1. graph_homomorphism (chain_sup S) C ?g\n 2. agree_on (S 0) f ?g", "note eq_e = this"], ["proof (state)\nthis:\n  \\<lbrakk>(?l2, ?x2, ?y2) \\<in> edges (S ?j2); (?x2, ?x'2) \\<in> g ?i2;\n   (?y2, ?y'2) \\<in> g ?i2\\<rbrakk>\n  \\<Longrightarrow> (?l2, ?x'2, ?y'2) \\<in> edges C\n\ngoal (2 subgoals):\n 1. graph_homomorphism (chain_sup S) C ?g\n 2. agree_on (S 0) f ?g", "have \"graph_union (map_graph (g i) (chain_sup S)) C = C\" for i"], ["proof (prove)\ngoal (1 subgoal):\n 1. graph_union (map_graph (g i) (chain_sup S)) C = C", "unfolding graph_union_iff"], ["proof (prove)\ngoal (1 subgoal):\n 1. edges (map_graph (g i) (chain_sup S)) \\<subseteq> edges C \\<and>\n    vertices (map_graph (g i) (chain_sup S)) \\<subseteq> vertices C", "using eq_e eq_v"], ["proof (prove)\nusing this:\n  \\<lbrakk>(?l2, ?x2, ?y2) \\<in> edges (S ?j2); (?x2, ?x'2) \\<in> g ?i2;\n   (?y2, ?y'2) \\<in> g ?i2\\<rbrakk>\n  \\<Longrightarrow> (?l2, ?x'2, ?y'2) \\<in> edges C\n  (?xa2, ?x2) \\<in> g ?i2 \\<Longrightarrow> ?x2 \\<in> vertices C\n\ngoal (1 subgoal):\n 1. edges (map_graph (g i) (chain_sup S)) \\<subseteq> edges C \\<and>\n    vertices (map_graph (g i) (chain_sup S)) \\<subseteq> vertices C", "unfolding graph_homomorphism_def2 chain_sup_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>(?l2, ?x2, ?y2) \\<in> edges (S ?j2); (?x2, ?x'2) \\<in> g ?i2;\n   (?y2, ?y'2) \\<in> g ?i2\\<rbrakk>\n  \\<Longrightarrow> (?l2, ?x'2, ?y'2) \\<in> edges C\n  (?xa2, ?x2) \\<in> g ?i2 \\<Longrightarrow> ?x2 \\<in> vertices C\n\ngoal (1 subgoal):\n 1. edges\n     (map_graph (g i)\n       (LG (\\<Union>i. edges (S i)) (\\<Union>i. vertices (S i))))\n    \\<subseteq> edges C \\<and>\n    vertices\n     (map_graph (g i)\n       (LG (\\<Union>i. edges (S i)) (\\<Union>i. vertices (S i))))\n    \\<subseteq> vertices C", "by auto"], ["proof (state)\nthis:\n  graph_union (map_graph (g ?i) (chain_sup S)) C = C\n\ngoal (2 subgoals):\n 1. graph_homomorphism (chain_sup S) C ?g\n 2. agree_on (S 0) f ?g", "hence subg:\"graph_union (map_graph ?g (chain_sup S)) C = C\""], ["proof (prove)\nusing this:\n  graph_union (map_graph (g ?i) (chain_sup S)) C = C\n\ngoal (1 subgoal):\n 1. graph_union (map_graph (\\<Union> (range g)) (chain_sup S)) C = C", "apply (rule graph_map_union)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i j. i \\<le> j \\<Longrightarrow> g i \\<subseteq> g j", "using gij"], ["proof (prove)\nusing this:\n  ?i \\<le> ?j \\<Longrightarrow> g ?i \\<subseteq> g ?j\n\ngoal (1 subgoal):\n 1. \\<And>i j. i \\<le> j \\<Longrightarrow> g i \\<subseteq> g j", "by auto"], ["proof (state)\nthis:\n  graph_union (map_graph (\\<Union> (range g)) (chain_sup S)) C = C\n\ngoal (2 subgoals):\n 1. graph_homomorphism (chain_sup S) C ?g\n 2. agree_on (S 0) f ?g", "have \"(\\<Union>i. vertices (S i)) = (\\<Union>i. Domain (g i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Union>i. vertices (S i)) = (\\<Union>i. Domain (g i))", "using v_dom"], ["proof (prove)\nusing this:\n  vertices (S ?i) = Domain (g ?i)\n\ngoal (1 subgoal):\n 1. (\\<Union>i. vertices (S i)) = (\\<Union>i. Domain (g i))", "by auto"], ["proof (state)\nthis:\n  (\\<Union>i. vertices (S i)) = (\\<Union>i. Domain (g i))\n\ngoal (2 subgoals):\n 1. graph_homomorphism (chain_sup S) C ?g\n 2. agree_on (S 0) f ?g", "hence vd:\"vertices (chain_sup S) = Domain ?g\""], ["proof (prove)\nusing this:\n  (\\<Union>i. vertices (S i)) = (\\<Union>i. Domain (g i))\n\ngoal (1 subgoal):\n 1. vertices (chain_sup S) = Domain (\\<Union> (range g))", "unfolding chain_sup_def"], ["proof (prove)\nusing this:\n  (\\<Union>i. vertices (S i)) = (\\<Union>i. Domain (g i))\n\ngoal (1 subgoal):\n 1. vertices (LG (\\<Union>i. edges (S i)) (\\<Union>i. vertices (S i))) =\n    Domain (\\<Union> (range g))", "by auto"], ["proof (state)\nthis:\n  vertices (chain_sup S) = Domain (\\<Union> (range g))\n\ngoal (2 subgoals):\n 1. graph_homomorphism (chain_sup S) C ?g\n 2. agree_on (S 0) f ?g", "show \"graph_homomorphism (chain_sup S) C ?g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. graph_homomorphism (chain_sup S) C (\\<Union> (range g))", "unfolding graph_homomorphism_def2"], ["proof (prove)\ngoal (1 subgoal):\n 1. vertices (chain_sup S) = Domain (\\<Union> (range g)) \\<and>\n    univalent (\\<Union> (range g)) \\<and>\n    graph (chain_sup S) \\<and>\n    graph C \\<and>\n    graph_union (map_graph (\\<Union> (range g)) (chain_sup S)) C = C", "using univ chain_sup_graph[OF assms(4)] grC vd subg"], ["proof (prove)\nusing this:\n  univalent (\\<Union> (range g))\n  graph (chain_sup S)\n  graph C\n  vertices (chain_sup S) = Domain (\\<Union> (range g))\n  graph_union (map_graph (\\<Union> (range g)) (chain_sup S)) C = C\n\ngoal (1 subgoal):\n 1. vertices (chain_sup S) = Domain (\\<Union> (range g)) \\<and>\n    univalent (\\<Union> (range g)) \\<and>\n    graph (chain_sup S) \\<and>\n    graph C \\<and>\n    graph_union (map_graph (\\<Union> (range g)) (chain_sup S)) C = C", "by auto"], ["proof (state)\nthis:\n  graph_homomorphism (chain_sup S) C (\\<Union> (range g))\n\ngoal (1 subgoal):\n 1. agree_on (S 0) f (\\<Union> (range g))", "show \"agree_on (S 0) f ?g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. agree_on (S 0) f (\\<Union> (range g))", "using agree_on_subset[OF f_subset _ univ] domf"], ["proof (prove)\nusing this:\n  vertices ?G \\<subseteq> Domain f \\<Longrightarrow>\n  agree_on ?G f (\\<Union> (range g))\n  Domain f = vertices (S 0)\n\ngoal (1 subgoal):\n 1. agree_on (S 0) f (\\<Union> (range g))", "by auto"], ["proof (state)\nthis:\n  agree_on (S 0) f (\\<Union> (range g))\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>Definition 8, second part.\\<close>"], ["", "definition consequence_graph\n  where \"consequence_graph Rs G \\<equiv> graph G \\<and> (\\<forall> R \\<in> Rs. subgraph (fst R) (snd R) \\<and> maintained R G)\""], ["", "lemma consequence_graphI[intro]:\n  assumes \"\\<And> R. R\\<in> Rs \\<Longrightarrow> maintained R G\"\n          \"\\<And> R. R\\<in> Rs \\<Longrightarrow> subgraph (fst R) (snd R)\"\n          \"graph G\"\n  shows \"consequence_graph Rs G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. consequence_graph Rs G", "unfolding consequence_graph_def fin_maintained_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. graph G \\<and>\n    (\\<forall>R\\<in>Rs. subgraph (fst R) (snd R) \\<and> maintained R G)", "using assms"], ["proof (prove)\nusing this:\n  ?R \\<in> Rs \\<Longrightarrow> maintained ?R G\n  ?R \\<in> Rs \\<Longrightarrow> subgraph (fst ?R) (snd ?R)\n  graph G\n\ngoal (1 subgoal):\n 1. graph G \\<and>\n    (\\<forall>R\\<in>Rs. subgraph (fst R) (snd R) \\<and> maintained R G)", "by auto"], ["", "lemma consequence_graphD[dest]:\n  assumes \"consequence_graph Rs G\"\n  shows \"\\<And> R. R\\<in> Rs \\<Longrightarrow> maintained R G\"\n        \"\\<And> R. R\\<in> Rs \\<Longrightarrow> subgraph (fst R) (snd R)\"\n        \"graph G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>R. R \\<in> Rs \\<Longrightarrow> maintained R G) &&&\n    (\\<And>R. R \\<in> Rs \\<Longrightarrow> subgraph (fst R) (snd R)) &&&\n    graph G", "using assms"], ["proof (prove)\nusing this:\n  consequence_graph Rs G\n\ngoal (1 subgoal):\n 1. (\\<And>R. R \\<in> Rs \\<Longrightarrow> maintained R G) &&&\n    (\\<And>R. R \\<in> Rs \\<Longrightarrow> subgraph (fst R) (snd R)) &&&\n    graph G", "unfolding consequence_graph_def fin_maintained_def"], ["proof (prove)\nusing this:\n  graph G \\<and>\n  (\\<forall>R\\<in>Rs. subgraph (fst R) (snd R) \\<and> maintained R G)\n\ngoal (1 subgoal):\n 1. (\\<And>R. R \\<in> Rs \\<Longrightarrow> maintained R G) &&&\n    (\\<And>R. R \\<in> Rs \\<Longrightarrow> subgraph (fst R) (snd R)) &&&\n    graph G", "by auto"], ["", "text \\<open>Definition 8 states: If furthermore S is a subgraph of G,\n    and (S, G) is maintained in each consequence graph maintaining Rs,\n    then G is a least consequence graph of S maintaining Rs.\n    Note that the type of 'each consequence graph' isn't given here.\n   Taken literally, this should mean 'for every possible type'.\n   We avoid quantifying on types by making the type an argument.\n   Consequently, when proving 'least', the first argument should be free.\\<close>"], ["", "definition least\n  :: \"'x itself \\<Rightarrow> (('l, 'v) Graph_PreRule) set \\<Rightarrow> ('l, 'c) labeled_graph \\<Rightarrow> ('l, 'c) labeled_graph \\<Rightarrow> bool\"\n  where \"least _ Rs S G \\<equiv> subgraph S G \\<and> \n            (\\<forall> C :: ('l, 'x) labeled_graph. consequence_graph Rs C \\<longrightarrow> maintained (S,G) C)\""], ["", "lemma leastI[intro]:\nassumes \"subgraph S (G:: ('l, 'c) labeled_graph)\"\n        \"\\<And> C :: ('l, 'x) labeled_graph. consequence_graph Rs C \\<Longrightarrow> maintained (S,G) C\"\n      shows \"least (t:: 'x itself) Rs S G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. least t Rs S G", "using assms"], ["proof (prove)\nusing this:\n  subgraph S G\n  consequence_graph Rs ?C \\<Longrightarrow> maintained (S, G) ?C\n\ngoal (1 subgoal):\n 1. least t Rs S G", "unfolding least_def"], ["proof (prove)\nusing this:\n  subgraph S G\n  consequence_graph Rs ?C \\<Longrightarrow> maintained (S, G) ?C\n\ngoal (1 subgoal):\n 1. subgraph S G \\<and>\n    (\\<forall>C.\n        consequence_graph Rs C \\<longrightarrow> maintained (S, G) C)", "by auto"], ["", "definition least_consequence_graph\n  :: \"'x itself \\<Rightarrow> (('l, 'v) Graph_PreRule) set\n     \\<Rightarrow> ('l, 'c) labeled_graph \\<Rightarrow> ('l, 'c) labeled_graph \\<Rightarrow> bool\"\n  where \"least_consequence_graph t Rs S G \\<equiv> consequence_graph Rs G \\<and> least t Rs S G\""], ["", "lemma least_consequence_graphI[intro]:\nassumes \"consequence_graph Rs (G:: ('l, 'c) labeled_graph)\"\n        \"subgraph S G\"\n        \"\\<And> C :: ('l, 'x) labeled_graph. consequence_graph Rs C \\<Longrightarrow> maintained (S,G) C\"\n      shows \"least_consequence_graph (t:: 'x itself) Rs S G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. least_consequence_graph t Rs S G", "using assms"], ["proof (prove)\nusing this:\n  consequence_graph Rs G\n  subgraph S G\n  consequence_graph Rs ?C \\<Longrightarrow> maintained (S, G) ?C\n\ngoal (1 subgoal):\n 1. least_consequence_graph t Rs S G", "unfolding least_consequence_graph_def least_def"], ["proof (prove)\nusing this:\n  consequence_graph Rs G\n  subgraph S G\n  consequence_graph Rs ?C \\<Longrightarrow> maintained (S, G) ?C\n\ngoal (1 subgoal):\n 1. consequence_graph Rs G \\<and>\n    subgraph S G \\<and>\n    (\\<forall>C.\n        consequence_graph Rs C \\<longrightarrow> maintained (S, G) C)", "by auto"], ["", "text \\<open>Definition 12.\\<close>"], ["", "definition fair_chain where\n  \"fair_chain Rs S \\<equiv> chain S \\<and> \n    (\\<forall> R f i. (R \\<in> Rs \\<and> graph_homomorphism (fst R) (S i) f) \\<longrightarrow> (\\<exists> j. extensible R (S j) f))\""], ["", "lemma fair_chainI[intro]:\n  assumes \"chain S\"\n    \"\\<And> R f i. R \\<in> Rs \\<Longrightarrow> graph_homomorphism (fst R) (S i) f \\<Longrightarrow> \\<exists> j. extensible R (S j) f\"\n  shows \"fair_chain Rs S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fair_chain Rs S", "using assms"], ["proof (prove)\nusing this:\n  chain S\n  \\<lbrakk>?R \\<in> Rs; graph_homomorphism (fst ?R) (S ?i) ?f\\<rbrakk>\n  \\<Longrightarrow> \\<exists>j. extensible ?R (S j) ?f\n\ngoal (1 subgoal):\n 1. fair_chain Rs S", "unfolding fair_chain_def"], ["proof (prove)\nusing this:\n  chain S\n  \\<lbrakk>?R \\<in> Rs; graph_homomorphism (fst ?R) (S ?i) ?f\\<rbrakk>\n  \\<Longrightarrow> \\<exists>j. extensible ?R (S j) ?f\n\ngoal (1 subgoal):\n 1. chain S \\<and>\n    (\\<forall>R f i.\n        R \\<in> Rs \\<and>\n        graph_homomorphism (fst R) (S i) f \\<longrightarrow>\n        (\\<exists>j. extensible R (S j) f))", "by blast"], ["", "lemma fair_chainD:\n  assumes \"fair_chain Rs S\"\n  shows \"chain S\"\n        \"R \\<in> Rs \\<Longrightarrow> graph_homomorphism (fst R) (S i) f \\<Longrightarrow> \\<exists> j. extensible R (S j) f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. chain S &&&\n    (\\<lbrakk>R \\<in> Rs; graph_homomorphism (fst R) (S i) f\\<rbrakk>\n     \\<Longrightarrow> \\<exists>j. extensible R (S j) f)", "using assms"], ["proof (prove)\nusing this:\n  fair_chain Rs S\n\ngoal (1 subgoal):\n 1. chain S &&&\n    (\\<lbrakk>R \\<in> Rs; graph_homomorphism (fst R) (S i) f\\<rbrakk>\n     \\<Longrightarrow> \\<exists>j. extensible R (S j) f)", "unfolding fair_chain_def"], ["proof (prove)\nusing this:\n  chain S \\<and>\n  (\\<forall>R f i.\n      R \\<in> Rs \\<and> graph_homomorphism (fst R) (S i) f \\<longrightarrow>\n      (\\<exists>j. extensible R (S j) f))\n\ngoal (1 subgoal):\n 1. chain S &&&\n    (\\<lbrakk>R \\<in> Rs; graph_homomorphism (fst R) (S i) f\\<rbrakk>\n     \\<Longrightarrow> \\<exists>j. extensible R (S j) f)", "by blast+"], ["", "lemma find_graph_occurence_vertices:\n  assumes \"chain S\" \"finite V\" \"univalent f\" \"f `` V \\<subseteq> vertices (chain_sup S)\"\n  shows \"\\<exists> i. f `` V \\<subseteq> vertices (S i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>i. f `` V \\<subseteq> vertices (S i)", "using assms(2,4)"], ["proof (prove)\nusing this:\n  finite V\n  f `` V \\<subseteq> vertices (chain_sup S)\n\ngoal (1 subgoal):\n 1. \\<exists>i. f `` V \\<subseteq> vertices (S i)", "proof(induct V)"], ["proof (state)\ngoal (2 subgoals):\n 1. f `` {} \\<subseteq> vertices (chain_sup S) \\<Longrightarrow>\n    \\<exists>i. f `` {} \\<subseteq> vertices (S i)\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        f `` F \\<subseteq> vertices (chain_sup S) \\<Longrightarrow>\n        \\<exists>i. f `` F \\<subseteq> vertices (S i);\n        f `` insert x F \\<subseteq> vertices (chain_sup S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i.\n                            f `` insert x F \\<subseteq> vertices (S i)", "case empty"], ["proof (state)\nthis:\n  f `` {} \\<subseteq> vertices (chain_sup S)\n\ngoal (2 subgoals):\n 1. f `` {} \\<subseteq> vertices (chain_sup S) \\<Longrightarrow>\n    \\<exists>i. f `` {} \\<subseteq> vertices (S i)\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        f `` F \\<subseteq> vertices (chain_sup S) \\<Longrightarrow>\n        \\<exists>i. f `` F \\<subseteq> vertices (S i);\n        f `` insert x F \\<subseteq> vertices (chain_sup S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i.\n                            f `` insert x F \\<subseteq> vertices (S i)", "thus ?case"], ["proof (prove)\nusing this:\n  f `` {} \\<subseteq> vertices (chain_sup S)\n\ngoal (1 subgoal):\n 1. \\<exists>i. f `` {} \\<subseteq> vertices (S i)", "by auto"], ["proof (state)\nthis:\n  \\<exists>i. f `` {} \\<subseteq> vertices (S i)\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        f `` F \\<subseteq> vertices (chain_sup S) \\<Longrightarrow>\n        \\<exists>i. f `` F \\<subseteq> vertices (S i);\n        f `` insert x F \\<subseteq> vertices (chain_sup S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i.\n                            f `` insert x F \\<subseteq> vertices (S i)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        f `` F \\<subseteq> vertices (chain_sup S) \\<Longrightarrow>\n        \\<exists>i. f `` F \\<subseteq> vertices (S i);\n        f `` insert x F \\<subseteq> vertices (chain_sup S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i.\n                            f `` insert x F \\<subseteq> vertices (S i)", "case (insert v V)"], ["proof (state)\nthis:\n  finite V\n  v \\<notin> V\n  f `` V \\<subseteq> vertices (chain_sup S) \\<Longrightarrow>\n  \\<exists>i. f `` V \\<subseteq> vertices (S i)\n  f `` insert v V \\<subseteq> vertices (chain_sup S)\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        f `` F \\<subseteq> vertices (chain_sup S) \\<Longrightarrow>\n        \\<exists>i. f `` F \\<subseteq> vertices (S i);\n        f `` insert x F \\<subseteq> vertices (chain_sup S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i.\n                            f `` insert x F \\<subseteq> vertices (S i)", "from insert.prems"], ["proof (chain)\npicking this:\n  f `` insert v V \\<subseteq> vertices (chain_sup S)", "have V:\"f `` V \\<subseteq> vertices (chain_sup S)\"\n    and v:\"f `` {v} \\<subseteq> vertices (chain_sup S)\""], ["proof (prove)\nusing this:\n  f `` insert v V \\<subseteq> vertices (chain_sup S)\n\ngoal (1 subgoal):\n 1. f `` V \\<subseteq> vertices (chain_sup S) &&&\n    f `` {v} \\<subseteq> vertices (chain_sup S)", "by auto"], ["proof (state)\nthis:\n  f `` V \\<subseteq> vertices (chain_sup S)\n  f `` {v} \\<subseteq> vertices (chain_sup S)\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        f `` F \\<subseteq> vertices (chain_sup S) \\<Longrightarrow>\n        \\<exists>i. f `` F \\<subseteq> vertices (S i);\n        f `` insert x F \\<subseteq> vertices (chain_sup S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i.\n                            f `` insert x F \\<subseteq> vertices (S i)", "from insert.hyps(3)[OF V]"], ["proof (chain)\npicking this:\n  \\<exists>i. f `` V \\<subseteq> vertices (S i)", "obtain i where i:\"f `` V \\<subseteq> vertices (S i)\""], ["proof (prove)\nusing this:\n  \\<exists>i. f `` V \\<subseteq> vertices (S i)\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        f `` V \\<subseteq> vertices (S i) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  f `` V \\<subseteq> vertices (S i)\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        f `` F \\<subseteq> vertices (chain_sup S) \\<Longrightarrow>\n        \\<exists>i. f `` F \\<subseteq> vertices (S i);\n        f `` insert x F \\<subseteq> vertices (chain_sup S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i.\n                            f `` insert x F \\<subseteq> vertices (S i)", "have \"\\<exists> j. f `` {v} \\<subseteq> vertices (S j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>j. f `` {v} \\<subseteq> vertices (S j)", "proof(cases \"(f `` {v}) = {}\")"], ["proof (state)\ngoal (2 subgoals):\n 1. f `` {v} = {} \\<Longrightarrow>\n    \\<exists>j. f `` {v} \\<subseteq> vertices (S j)\n 2. f `` {v} \\<noteq> {} \\<Longrightarrow>\n    \\<exists>j. f `` {v} \\<subseteq> vertices (S j)", "case False"], ["proof (state)\nthis:\n  f `` {v} \\<noteq> {}\n\ngoal (2 subgoals):\n 1. f `` {v} = {} \\<Longrightarrow>\n    \\<exists>j. f `` {v} \\<subseteq> vertices (S j)\n 2. f `` {v} \\<noteq> {} \\<Longrightarrow>\n    \\<exists>j. f `` {v} \\<subseteq> vertices (S j)", "then"], ["proof (chain)\npicking this:\n  f `` {v} \\<noteq> {}", "obtain v' where f:\"(v,v') \\<in> f\""], ["proof (prove)\nusing this:\n  f `` {v} \\<noteq> {}\n\ngoal (1 subgoal):\n 1. (\\<And>v'. (v, v') \\<in> f \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  (v, v') \\<in> f\n\ngoal (2 subgoals):\n 1. f `` {v} = {} \\<Longrightarrow>\n    \\<exists>j. f `` {v} \\<subseteq> vertices (S j)\n 2. f `` {v} \\<noteq> {} \\<Longrightarrow>\n    \\<exists>j. f `` {v} \\<subseteq> vertices (S j)", "hence \"v' \\<in> vertices (chain_sup S)\""], ["proof (prove)\nusing this:\n  (v, v') \\<in> f\n\ngoal (1 subgoal):\n 1. v' \\<in> vertices (chain_sup S)", "using v"], ["proof (prove)\nusing this:\n  (v, v') \\<in> f\n  f `` {v} \\<subseteq> vertices (chain_sup S)\n\ngoal (1 subgoal):\n 1. v' \\<in> vertices (chain_sup S)", "by auto"], ["proof (state)\nthis:\n  v' \\<in> vertices (chain_sup S)\n\ngoal (2 subgoals):\n 1. f `` {v} = {} \\<Longrightarrow>\n    \\<exists>j. f `` {v} \\<subseteq> vertices (S j)\n 2. f `` {v} \\<noteq> {} \\<Longrightarrow>\n    \\<exists>j. f `` {v} \\<subseteq> vertices (S j)", "then"], ["proof (chain)\npicking this:\n  v' \\<in> vertices (chain_sup S)", "show ?thesis"], ["proof (prove)\nusing this:\n  v' \\<in> vertices (chain_sup S)\n\ngoal (1 subgoal):\n 1. \\<exists>j. f `` {v} \\<subseteq> vertices (S j)", "using assms(3) f"], ["proof (prove)\nusing this:\n  v' \\<in> vertices (chain_sup S)\n  univalent f\n  (v, v') \\<in> f\n\ngoal (1 subgoal):\n 1. \\<exists>j. f `` {v} \\<subseteq> vertices (S j)", "unfolding chain_sup_def"], ["proof (prove)\nusing this:\n  v' \\<in> vertices\n            (LG (\\<Union>i. edges (S i)) (\\<Union>i. vertices (S i)))\n  univalent f\n  (v, v') \\<in> f\n\ngoal (1 subgoal):\n 1. \\<exists>j. f `` {v} \\<subseteq> vertices (S j)", "by auto"], ["proof (state)\nthis:\n  \\<exists>j. f `` {v} \\<subseteq> vertices (S j)\n\ngoal (1 subgoal):\n 1. f `` {v} = {} \\<Longrightarrow>\n    \\<exists>j. f `` {v} \\<subseteq> vertices (S j)", "qed auto"], ["proof (state)\nthis:\n  \\<exists>j. f `` {v} \\<subseteq> vertices (S j)\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        f `` F \\<subseteq> vertices (chain_sup S) \\<Longrightarrow>\n        \\<exists>i. f `` F \\<subseteq> vertices (S i);\n        f `` insert x F \\<subseteq> vertices (chain_sup S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i.\n                            f `` insert x F \\<subseteq> vertices (S i)", "then"], ["proof (chain)\npicking this:\n  \\<exists>j. f `` {v} \\<subseteq> vertices (S j)", "obtain j where j:\"f `` {v} \\<subseteq> vertices (S j)\""], ["proof (prove)\nusing this:\n  \\<exists>j. f `` {v} \\<subseteq> vertices (S j)\n\ngoal (1 subgoal):\n 1. (\\<And>j.\n        f `` {v} \\<subseteq> vertices (S j) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  f `` {v} \\<subseteq> vertices (S j)\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        f `` F \\<subseteq> vertices (chain_sup S) \\<Longrightarrow>\n        \\<exists>i. f `` F \\<subseteq> vertices (S i);\n        f `` insert x F \\<subseteq> vertices (chain_sup S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i.\n                            f `` insert x F \\<subseteq> vertices (S i)", "have sg:\"subgraph (S i) (S (max i j))\" \"subgraph (S j) (S (max i j))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subgraph (S i) (S (max i j)) &&& subgraph (S j) (S (max i j))", "by(rule chain[OF assms(1)],force)+"], ["proof (state)\nthis:\n  subgraph (S i) (S (max i j))\n  subgraph (S j) (S (max i j))\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        f `` F \\<subseteq> vertices (chain_sup S) \\<Longrightarrow>\n        \\<exists>i. f `` F \\<subseteq> vertices (S i);\n        f `` insert x F \\<subseteq> vertices (chain_sup S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i.\n                            f `` insert x F \\<subseteq> vertices (S i)", "have V:\"(f \\<inter> V \\<times> UNIV) `` V \\<subseteq> vertices (S (max i j))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (f \\<inter> V \\<times> UNIV) `` V \\<subseteq> vertices (S (max i j))", "using i subgraph_subset[OF sg(1)]"], ["proof (prove)\nusing this:\n  f `` V \\<subseteq> vertices (S i)\n  vertices (S i) \\<subseteq> vertices (S (max i j))\n  edges (restrict (S i)) \\<subseteq> edges (S (max i j))\n\ngoal (1 subgoal):\n 1. (f \\<inter> V \\<times> UNIV) `` V \\<subseteq> vertices (S (max i j))", "by auto"], ["proof (state)\nthis:\n  (f \\<inter> V \\<times> UNIV) `` V \\<subseteq> vertices (S (max i j))\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        f `` F \\<subseteq> vertices (chain_sup S) \\<Longrightarrow>\n        \\<exists>i. f `` F \\<subseteq> vertices (S i);\n        f `` insert x F \\<subseteq> vertices (chain_sup S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i.\n                            f `` insert x F \\<subseteq> vertices (S i)", "have v:\"f `` {v} \\<subseteq> vertices (S (max i j))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f `` {v} \\<subseteq> vertices (S (max i j))", "using j subgraph_subset[OF sg(2)]"], ["proof (prove)\nusing this:\n  f `` {v} \\<subseteq> vertices (S j)\n  vertices (S j) \\<subseteq> vertices (S (max i j))\n  edges (restrict (S j)) \\<subseteq> edges (S (max i j))\n\ngoal (1 subgoal):\n 1. f `` {v} \\<subseteq> vertices (S (max i j))", "by auto"], ["proof (state)\nthis:\n  f `` {v} \\<subseteq> vertices (S (max i j))\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        f `` F \\<subseteq> vertices (chain_sup S) \\<Longrightarrow>\n        \\<exists>i. f `` F \\<subseteq> vertices (S i);\n        f `` insert x F \\<subseteq> vertices (chain_sup S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i.\n                            f `` insert x F \\<subseteq> vertices (S i)", "have \"f `` insert v V \\<subseteq> vertices (S (max i j))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f `` insert v V \\<subseteq> vertices (S (max i j))", "using v V"], ["proof (prove)\nusing this:\n  f `` {v} \\<subseteq> vertices (S (max i j))\n  (f \\<inter> V \\<times> UNIV) `` V \\<subseteq> vertices (S (max i j))\n\ngoal (1 subgoal):\n 1. f `` insert v V \\<subseteq> vertices (S (max i j))", "by auto"], ["proof (state)\nthis:\n  f `` insert v V \\<subseteq> vertices (S (max i j))\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        f `` F \\<subseteq> vertices (chain_sup S) \\<Longrightarrow>\n        \\<exists>i. f `` F \\<subseteq> vertices (S i);\n        f `` insert x F \\<subseteq> vertices (chain_sup S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i.\n                            f `` insert x F \\<subseteq> vertices (S i)", "thus ?case"], ["proof (prove)\nusing this:\n  f `` insert v V \\<subseteq> vertices (S (max i j))\n\ngoal (1 subgoal):\n 1. \\<exists>i. f `` insert v V \\<subseteq> vertices (S i)", "by blast"], ["proof (state)\nthis:\n  \\<exists>i. f `` insert v V \\<subseteq> vertices (S i)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma find_graph_occurence_edges:\n  assumes \"chain S\" \"finite E\" \"univalent f\"\n        \"on_triple f `` E \\<subseteq> edges (chain_sup S)\"\n      shows \"\\<exists> i. on_triple f `` E \\<subseteq> edges (S i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>i. on_triple f `` E \\<subseteq> edges (S i)", "using assms(2,4)"], ["proof (prove)\nusing this:\n  finite E\n  on_triple f `` E \\<subseteq> edges (chain_sup S)\n\ngoal (1 subgoal):\n 1. \\<exists>i. on_triple f `` E \\<subseteq> edges (S i)", "proof(induct E)"], ["proof (state)\ngoal (2 subgoals):\n 1. on_triple f `` {} \\<subseteq> edges (chain_sup S) \\<Longrightarrow>\n    \\<exists>i. on_triple f `` {} \\<subseteq> edges (S i)\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        on_triple f `` F \\<subseteq> edges (chain_sup S) \\<Longrightarrow>\n        \\<exists>i. on_triple f `` F \\<subseteq> edges (S i);\n        on_triple f `` insert x F \\<subseteq> edges (chain_sup S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i.\n                            on_triple f `` insert x F\n                            \\<subseteq> edges (S i)", "case empty"], ["proof (state)\nthis:\n  on_triple f `` {} \\<subseteq> edges (chain_sup S)\n\ngoal (2 subgoals):\n 1. on_triple f `` {} \\<subseteq> edges (chain_sup S) \\<Longrightarrow>\n    \\<exists>i. on_triple f `` {} \\<subseteq> edges (S i)\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        on_triple f `` F \\<subseteq> edges (chain_sup S) \\<Longrightarrow>\n        \\<exists>i. on_triple f `` F \\<subseteq> edges (S i);\n        on_triple f `` insert x F \\<subseteq> edges (chain_sup S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i.\n                            on_triple f `` insert x F\n                            \\<subseteq> edges (S i)", "thus ?case"], ["proof (prove)\nusing this:\n  on_triple f `` {} \\<subseteq> edges (chain_sup S)\n\ngoal (1 subgoal):\n 1. \\<exists>i. on_triple f `` {} \\<subseteq> edges (S i)", "unfolding graph_homomorphism_def"], ["proof (prove)\nusing this:\n  on_triple f `` {} \\<subseteq> edges (chain_sup S)\n\ngoal (1 subgoal):\n 1. \\<exists>i. on_triple f `` {} \\<subseteq> edges (S i)", "by auto"], ["proof (state)\nthis:\n  \\<exists>i. on_triple f `` {} \\<subseteq> edges (S i)\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        on_triple f `` F \\<subseteq> edges (chain_sup S) \\<Longrightarrow>\n        \\<exists>i. on_triple f `` F \\<subseteq> edges (S i);\n        on_triple f `` insert x F \\<subseteq> edges (chain_sup S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i.\n                            on_triple f `` insert x F\n                            \\<subseteq> edges (S i)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        on_triple f `` F \\<subseteq> edges (chain_sup S) \\<Longrightarrow>\n        \\<exists>i. on_triple f `` F \\<subseteq> edges (S i);\n        on_triple f `` insert x F \\<subseteq> edges (chain_sup S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i.\n                            on_triple f `` insert x F\n                            \\<subseteq> edges (S i)", "case (insert e E)"], ["proof (state)\nthis:\n  finite E\n  e \\<notin> E\n  on_triple f `` E \\<subseteq> edges (chain_sup S) \\<Longrightarrow>\n  \\<exists>i. on_triple f `` E \\<subseteq> edges (S i)\n  on_triple f `` insert e E \\<subseteq> edges (chain_sup S)\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        on_triple f `` F \\<subseteq> edges (chain_sup S) \\<Longrightarrow>\n        \\<exists>i. on_triple f `` F \\<subseteq> edges (S i);\n        on_triple f `` insert x F \\<subseteq> edges (chain_sup S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i.\n                            on_triple f `` insert x F\n                            \\<subseteq> edges (S i)", "have univ:\"univalent (on_triple f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. univalent (on_triple f)", "using assms(3)"], ["proof (prove)\nusing this:\n  univalent f\n\ngoal (1 subgoal):\n 1. univalent (on_triple f)", "by auto"], ["proof (state)\nthis:\n  univalent (on_triple f)\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        on_triple f `` F \\<subseteq> edges (chain_sup S) \\<Longrightarrow>\n        \\<exists>i. on_triple f `` F \\<subseteq> edges (S i);\n        on_triple f `` insert x F \\<subseteq> edges (chain_sup S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i.\n                            on_triple f `` insert x F\n                            \\<subseteq> edges (S i)", "have [simp]:\"restrict (S i) = S i\" for i"], ["proof (prove)\ngoal (1 subgoal):\n 1. restrict (S i) = S i", "using chain[OF assms(1),unfolded subgraph_def,of i i]"], ["proof (prove)\nusing this:\n  i \\<le> i \\<Longrightarrow>\n  graph (S i) \\<and> graph (S i) \\<and> graph_union (S i) (S i) = S i\n\ngoal (1 subgoal):\n 1. restrict (S i) = S i", "by auto"], ["proof (state)\nthis:\n  restrict (S ?i1) = S ?i1\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        on_triple f `` F \\<subseteq> edges (chain_sup S) \\<Longrightarrow>\n        \\<exists>i. on_triple f `` F \\<subseteq> edges (S i);\n        on_triple f `` insert x F \\<subseteq> edges (chain_sup S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i.\n                            on_triple f `` insert x F\n                            \\<subseteq> edges (S i)", "from insert.prems"], ["proof (chain)\npicking this:\n  on_triple f `` insert e E \\<subseteq> edges (chain_sup S)", "have E:\"on_triple f `` E \\<subseteq> edges (chain_sup S)\"\n    and e:\"on_triple f `` {e} \\<subseteq> edges (chain_sup S)\""], ["proof (prove)\nusing this:\n  on_triple f `` insert e E \\<subseteq> edges (chain_sup S)\n\ngoal (1 subgoal):\n 1. on_triple f `` E \\<subseteq> edges (chain_sup S) &&&\n    on_triple f `` {e} \\<subseteq> edges (chain_sup S)", "by auto"], ["proof (state)\nthis:\n  on_triple f `` E \\<subseteq> edges (chain_sup S)\n  on_triple f `` {e} \\<subseteq> edges (chain_sup S)\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        on_triple f `` F \\<subseteq> edges (chain_sup S) \\<Longrightarrow>\n        \\<exists>i. on_triple f `` F \\<subseteq> edges (S i);\n        on_triple f `` insert x F \\<subseteq> edges (chain_sup S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i.\n                            on_triple f `` insert x F\n                            \\<subseteq> edges (S i)", "with insert.hyps"], ["proof (chain)\npicking this:\n  finite E\n  e \\<notin> E\n  on_triple f `` E \\<subseteq> edges (chain_sup S) \\<Longrightarrow>\n  \\<exists>i. on_triple f `` E \\<subseteq> edges (S i)\n  on_triple f `` E \\<subseteq> edges (chain_sup S)\n  on_triple f `` {e} \\<subseteq> edges (chain_sup S)", "obtain i where i:\"on_triple f `` E \\<subseteq> edges (S i)\""], ["proof (prove)\nusing this:\n  finite E\n  e \\<notin> E\n  on_triple f `` E \\<subseteq> edges (chain_sup S) \\<Longrightarrow>\n  \\<exists>i. on_triple f `` E \\<subseteq> edges (S i)\n  on_triple f `` E \\<subseteq> edges (chain_sup S)\n  on_triple f `` {e} \\<subseteq> edges (chain_sup S)\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        on_triple f `` E \\<subseteq> edges (S i) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  on_triple f `` E \\<subseteq> edges (S i)\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        on_triple f `` F \\<subseteq> edges (chain_sup S) \\<Longrightarrow>\n        \\<exists>i. on_triple f `` F \\<subseteq> edges (S i);\n        on_triple f `` insert x F \\<subseteq> edges (chain_sup S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i.\n                            on_triple f `` insert x F\n                            \\<subseteq> edges (S i)", "have \"\\<exists> j. on_triple f `` {e} \\<subseteq> edges (S j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>j. on_triple f `` {e} \\<subseteq> edges (S j)", "proof(cases \"on_triple f `` {e} = {}\")"], ["proof (state)\ngoal (2 subgoals):\n 1. on_triple f `` {e} = {} \\<Longrightarrow>\n    \\<exists>j. on_triple f `` {e} \\<subseteq> edges (S j)\n 2. on_triple f `` {e} \\<noteq> {} \\<Longrightarrow>\n    \\<exists>j. on_triple f `` {e} \\<subseteq> edges (S j)", "case False"], ["proof (state)\nthis:\n  on_triple f `` {e} \\<noteq> {}\n\ngoal (2 subgoals):\n 1. on_triple f `` {e} = {} \\<Longrightarrow>\n    \\<exists>j. on_triple f `` {e} \\<subseteq> edges (S j)\n 2. on_triple f `` {e} \\<noteq> {} \\<Longrightarrow>\n    \\<exists>j. on_triple f `` {e} \\<subseteq> edges (S j)", "then"], ["proof (chain)\npicking this:\n  on_triple f `` {e} \\<noteq> {}", "obtain e' where f:\"(e,e') \\<in> on_triple f\""], ["proof (prove)\nusing this:\n  on_triple f `` {e} \\<noteq> {}\n\ngoal (1 subgoal):\n 1. (\\<And>e'.\n        (e, e') \\<in> on_triple f \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  (e, e') \\<in> on_triple f\n\ngoal (2 subgoals):\n 1. on_triple f `` {e} = {} \\<Longrightarrow>\n    \\<exists>j. on_triple f `` {e} \\<subseteq> edges (S j)\n 2. on_triple f `` {e} \\<noteq> {} \\<Longrightarrow>\n    \\<exists>j. on_triple f `` {e} \\<subseteq> edges (S j)", "hence \"e' \\<in> edges (chain_sup S)\""], ["proof (prove)\nusing this:\n  (e, e') \\<in> on_triple f\n\ngoal (1 subgoal):\n 1. e' \\<in> edges (chain_sup S)", "using e"], ["proof (prove)\nusing this:\n  (e, e') \\<in> on_triple f\n  on_triple f `` {e} \\<subseteq> edges (chain_sup S)\n\ngoal (1 subgoal):\n 1. e' \\<in> edges (chain_sup S)", "by auto"], ["proof (state)\nthis:\n  e' \\<in> edges (chain_sup S)\n\ngoal (2 subgoals):\n 1. on_triple f `` {e} = {} \\<Longrightarrow>\n    \\<exists>j. on_triple f `` {e} \\<subseteq> edges (S j)\n 2. on_triple f `` {e} \\<noteq> {} \\<Longrightarrow>\n    \\<exists>j. on_triple f `` {e} \\<subseteq> edges (S j)", "then"], ["proof (chain)\npicking this:\n  e' \\<in> edges (chain_sup S)", "show ?thesis"], ["proof (prove)\nusing this:\n  e' \\<in> edges (chain_sup S)\n\ngoal (1 subgoal):\n 1. \\<exists>j. on_triple f `` {e} \\<subseteq> edges (S j)", "using univ f"], ["proof (prove)\nusing this:\n  e' \\<in> edges (chain_sup S)\n  univalent (on_triple f)\n  (e, e') \\<in> on_triple f\n\ngoal (1 subgoal):\n 1. \\<exists>j. on_triple f `` {e} \\<subseteq> edges (S j)", "unfolding chain_sup_def"], ["proof (prove)\nusing this:\n  e' \\<in> edges (LG (\\<Union>i. edges (S i)) (\\<Union>i. vertices (S i)))\n  univalent (on_triple f)\n  (e, e') \\<in> on_triple f\n\ngoal (1 subgoal):\n 1. \\<exists>j. on_triple f `` {e} \\<subseteq> edges (S j)", "by auto"], ["proof (state)\nthis:\n  \\<exists>j. on_triple f `` {e} \\<subseteq> edges (S j)\n\ngoal (1 subgoal):\n 1. on_triple f `` {e} = {} \\<Longrightarrow>\n    \\<exists>j. on_triple f `` {e} \\<subseteq> edges (S j)", "qed auto"], ["proof (state)\nthis:\n  \\<exists>j. on_triple f `` {e} \\<subseteq> edges (S j)\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        on_triple f `` F \\<subseteq> edges (chain_sup S) \\<Longrightarrow>\n        \\<exists>i. on_triple f `` F \\<subseteq> edges (S i);\n        on_triple f `` insert x F \\<subseteq> edges (chain_sup S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i.\n                            on_triple f `` insert x F\n                            \\<subseteq> edges (S i)", "then"], ["proof (chain)\npicking this:\n  \\<exists>j. on_triple f `` {e} \\<subseteq> edges (S j)", "obtain j where j:\"on_triple f `` {e} \\<subseteq> edges (S j)\""], ["proof (prove)\nusing this:\n  \\<exists>j. on_triple f `` {e} \\<subseteq> edges (S j)\n\ngoal (1 subgoal):\n 1. (\\<And>j.\n        on_triple f `` {e} \\<subseteq> edges (S j) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  on_triple f `` {e} \\<subseteq> edges (S j)\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        on_triple f `` F \\<subseteq> edges (chain_sup S) \\<Longrightarrow>\n        \\<exists>i. on_triple f `` F \\<subseteq> edges (S i);\n        on_triple f `` insert x F \\<subseteq> edges (chain_sup S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i.\n                            on_triple f `` insert x F\n                            \\<subseteq> edges (S i)", "have sg:\"subgraph (S i) (S (max i j))\" \"subgraph (S j) (S (max i j))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subgraph (S i) (S (max i j)) &&& subgraph (S j) (S (max i j))", "by(rule chain[OF assms(1)],force)+"], ["proof (state)\nthis:\n  subgraph (S i) (S (max i j))\n  subgraph (S j) (S (max i j))\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        on_triple f `` F \\<subseteq> edges (chain_sup S) \\<Longrightarrow>\n        \\<exists>i. on_triple f `` F \\<subseteq> edges (S i);\n        on_triple f `` insert x F \\<subseteq> edges (chain_sup S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i.\n                            on_triple f `` insert x F\n                            \\<subseteq> edges (S i)", "have E:\"on_triple f `` E \\<subseteq> edges (S (max i j))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. on_triple f `` E \\<subseteq> edges (S (max i j))", "using i subgraph_subset[OF sg(1)]"], ["proof (prove)\nusing this:\n  on_triple f `` E \\<subseteq> edges (S i)\n  vertices (S i) \\<subseteq> vertices (S (max i j))\n  edges (restrict (S i)) \\<subseteq> edges (S (max i j))\n\ngoal (1 subgoal):\n 1. on_triple f `` E \\<subseteq> edges (S (max i j))", "by auto"], ["proof (state)\nthis:\n  on_triple f `` E \\<subseteq> edges (S (max i j))\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        on_triple f `` F \\<subseteq> edges (chain_sup S) \\<Longrightarrow>\n        \\<exists>i. on_triple f `` F \\<subseteq> edges (S i);\n        on_triple f `` insert x F \\<subseteq> edges (chain_sup S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i.\n                            on_triple f `` insert x F\n                            \\<subseteq> edges (S i)", "have e:\"on_triple f `` {e} \\<subseteq> edges (S (max i j))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. on_triple f `` {e} \\<subseteq> edges (S (max i j))", "using j subgraph_subset[OF sg(2)]"], ["proof (prove)\nusing this:\n  on_triple f `` {e} \\<subseteq> edges (S j)\n  vertices (S j) \\<subseteq> vertices (S (max i j))\n  edges (restrict (S j)) \\<subseteq> edges (S (max i j))\n\ngoal (1 subgoal):\n 1. on_triple f `` {e} \\<subseteq> edges (S (max i j))", "by auto"], ["proof (state)\nthis:\n  on_triple f `` {e} \\<subseteq> edges (S (max i j))\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        on_triple f `` F \\<subseteq> edges (chain_sup S) \\<Longrightarrow>\n        \\<exists>i. on_triple f `` F \\<subseteq> edges (S i);\n        on_triple f `` insert x F \\<subseteq> edges (chain_sup S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i.\n                            on_triple f `` insert x F\n                            \\<subseteq> edges (S i)", "have \"on_triple f `` insert e E \\<subseteq> edges (S (max i j))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. on_triple f `` insert e E \\<subseteq> edges (S (max i j))", "using e E"], ["proof (prove)\nusing this:\n  on_triple f `` {e} \\<subseteq> edges (S (max i j))\n  on_triple f `` E \\<subseteq> edges (S (max i j))\n\ngoal (1 subgoal):\n 1. on_triple f `` insert e E \\<subseteq> edges (S (max i j))", "by auto"], ["proof (state)\nthis:\n  on_triple f `` insert e E \\<subseteq> edges (S (max i j))\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        on_triple f `` F \\<subseteq> edges (chain_sup S) \\<Longrightarrow>\n        \\<exists>i. on_triple f `` F \\<subseteq> edges (S i);\n        on_triple f `` insert x F \\<subseteq> edges (chain_sup S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i.\n                            on_triple f `` insert x F\n                            \\<subseteq> edges (S i)", "thus ?case"], ["proof (prove)\nusing this:\n  on_triple f `` insert e E \\<subseteq> edges (S (max i j))\n\ngoal (1 subgoal):\n 1. \\<exists>i. on_triple f `` insert e E \\<subseteq> edges (S i)", "by blast"], ["proof (state)\nthis:\n  \\<exists>i. on_triple f `` insert e E \\<subseteq> edges (S i)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma find_graph_occurence:\n  assumes \"chain S\" \"finite E\" \"finite V\" \"graph_homomorphism (LG E V) (chain_sup S) f\"\n  shows \"\\<exists> i. graph_homomorphism (LG E V) (S i) f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>i. graph_homomorphism (LG E V) (S i) f", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>i. graph_homomorphism (LG E V) (S i) f", "have [simp]:\"restrict (S i) = S i\" for i"], ["proof (prove)\ngoal (1 subgoal):\n 1. restrict (S i) = S i", "using chain[OF assms(1),unfolded subgraph_def,of i i]"], ["proof (prove)\nusing this:\n  i \\<le> i \\<Longrightarrow>\n  graph (S i) \\<and> graph (S i) \\<and> graph_union (S i) (S i) = S i\n\ngoal (1 subgoal):\n 1. restrict (S i) = S i", "by auto"], ["proof (state)\nthis:\n  restrict (S ?i) = S ?i\n\ngoal (1 subgoal):\n 1. \\<exists>i. graph_homomorphism (LG E V) (S i) f", "from assms[unfolded graph_homomorphism_def edge_preserving labeled_graph.sel]"], ["proof (chain)\npicking this:\n  chain S\n  finite E\n  finite V\n  V = Domain f \\<and>\n  graph (LG E V) \\<and>\n  graph (chain_sup S) \\<and>\n  f `` V \\<subseteq> vertices (chain_sup S) \\<and>\n  univalent f \\<and> on_triple f `` E \\<subseteq> edges (chain_sup S)", "have u:\"univalent f\" \n   and e:\"on_triple f `` E \\<subseteq> edges (chain_sup S)\"\n   and v:\"f `` V \\<subseteq> vertices (chain_sup S)\""], ["proof (prove)\nusing this:\n  chain S\n  finite E\n  finite V\n  V = Domain f \\<and>\n  graph (LG E V) \\<and>\n  graph (chain_sup S) \\<and>\n  f `` V \\<subseteq> vertices (chain_sup S) \\<and>\n  univalent f \\<and> on_triple f `` E \\<subseteq> edges (chain_sup S)\n\ngoal (1 subgoal):\n 1. univalent f &&&\n    on_triple f `` E \\<subseteq> edges (chain_sup S) &&&\n    f `` V \\<subseteq> vertices (chain_sup S)", "by blast+"], ["proof (state)\nthis:\n  univalent f\n  on_triple f `` E \\<subseteq> edges (chain_sup S)\n  f `` V \\<subseteq> vertices (chain_sup S)\n\ngoal (1 subgoal):\n 1. \\<exists>i. graph_homomorphism (LG E V) (S i) f", "from find_graph_occurence_edges[OF assms(1,2) u e]"], ["proof (chain)\npicking this:\n  \\<exists>i. on_triple f `` E \\<subseteq> edges (S i)", "obtain i where i:\"on_triple f `` E \\<subseteq> edges (S i)\""], ["proof (prove)\nusing this:\n  \\<exists>i. on_triple f `` E \\<subseteq> edges (S i)\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        on_triple f `` E \\<subseteq> edges (S i) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  on_triple f `` E \\<subseteq> edges (S i)\n\ngoal (1 subgoal):\n 1. \\<exists>i. graph_homomorphism (LG E V) (S i) f", "from find_graph_occurence_vertices[OF assms(1,3) u v]"], ["proof (chain)\npicking this:\n  \\<exists>i. f `` V \\<subseteq> vertices (S i)", "obtain j where j:\"f `` V \\<subseteq> vertices (S j)\""], ["proof (prove)\nusing this:\n  \\<exists>i. f `` V \\<subseteq> vertices (S i)\n\ngoal (1 subgoal):\n 1. (\\<And>j.\n        f `` V \\<subseteq> vertices (S j) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  f `` V \\<subseteq> vertices (S j)\n\ngoal (1 subgoal):\n 1. \\<exists>i. graph_homomorphism (LG E V) (S i) f", "have sg:\"subgraph (S i) (S (max i j))\" \"subgraph (S j) (S (max i j))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subgraph (S i) (S (max i j)) &&& subgraph (S j) (S (max i j))", "by(rule chain[OF assms(1)],force)+"], ["proof (state)\nthis:\n  subgraph (S i) (S (max i j))\n  subgraph (S j) (S (max i j))\n\ngoal (1 subgoal):\n 1. \\<exists>i. graph_homomorphism (LG E V) (S i) f", "have e:\"on_triple f `` E \\<subseteq> edges (S (max i j))\"\n   and v:\"f `` V \\<subseteq> vertices (S (max i j))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. on_triple f `` E \\<subseteq> edges (S (max i j)) &&&\n    f `` V \\<subseteq> vertices (S (max i j))", "using i j subgraph_subset(2)[OF sg(1)] subgraph_subset(1)[OF sg(2)]"], ["proof (prove)\nusing this:\n  on_triple f `` E \\<subseteq> edges (S i)\n  f `` V \\<subseteq> vertices (S j)\n  edges (restrict (S i)) \\<subseteq> edges (S (max i j))\n  vertices (S j) \\<subseteq> vertices (S (max i j))\n\ngoal (1 subgoal):\n 1. on_triple f `` E \\<subseteq> edges (S (max i j)) &&&\n    f `` V \\<subseteq> vertices (S (max i j))", "by auto"], ["proof (state)\nthis:\n  on_triple f `` E \\<subseteq> edges (S (max i j))\n  f `` V \\<subseteq> vertices (S (max i j))\n\ngoal (1 subgoal):\n 1. \\<exists>i. graph_homomorphism (LG E V) (S i) f", "have \"graph_homomorphism (LG E V) (S (max i j)) f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. graph_homomorphism (LG E V) (S (max i j)) f", "proof(rule graph_homomorphismI)"], ["proof (state)\ngoal (6 subgoals):\n 1. vertices (LG E V) = Domain f\n 2. f `` vertices (LG E V) \\<subseteq> vertices (S (max i j))\n 3. univalent f\n 4. edge_preserving f (edges (LG E V)) (edges (S (max i j)))\n 5. graph (LG E V)\n 6. graph (S (max i j))", "from assms[unfolded graph_homomorphism_def edge_preserving labeled_graph.sel] e v"], ["proof (chain)\npicking this:\n  chain S\n  finite E\n  finite V\n  V = Domain f \\<and>\n  graph (LG E V) \\<and>\n  graph (chain_sup S) \\<and>\n  f `` V \\<subseteq> vertices (chain_sup S) \\<and>\n  univalent f \\<and> on_triple f `` E \\<subseteq> edges (chain_sup S)\n  on_triple f `` E \\<subseteq> edges (S (max i j))\n  f `` V \\<subseteq> vertices (S (max i j))", "show \"vertices (LG E V) = Domain f\"\n     and \"univalent f\"\n     and \"LG E V = restrict (LG E V)\"\n     and \"f `` vertices (LG E V) \\<subseteq> vertices (S (max i j))\" \n     and \"edge_preserving f (edges (LG E V)) (edges (S (max i j)))\"\n     and \"S (max i j) = restrict (S (max i j))\""], ["proof (prove)\nusing this:\n  chain S\n  finite E\n  finite V\n  V = Domain f \\<and>\n  graph (LG E V) \\<and>\n  graph (chain_sup S) \\<and>\n  f `` V \\<subseteq> vertices (chain_sup S) \\<and>\n  univalent f \\<and> on_triple f `` E \\<subseteq> edges (chain_sup S)\n  on_triple f `` E \\<subseteq> edges (S (max i j))\n  f `` V \\<subseteq> vertices (S (max i j))\n\ngoal (1 subgoal):\n 1. (vertices (LG E V) = Domain f &&& univalent f &&& graph (LG E V)) &&&\n    f `` vertices (LG E V) \\<subseteq> vertices (S (max i j)) &&&\n    edge_preserving f (edges (LG E V)) (edges (S (max i j))) &&&\n    graph (S (max i j))", "by auto"], ["proof (state)\nthis:\n  vertices (LG E V) = Domain f\n  univalent f\n  graph (LG E V)\n  f `` vertices (LG E V) \\<subseteq> vertices (S (max i j))\n  edge_preserving f (edges (LG E V)) (edges (S (max i j)))\n  graph (S (max i j))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  graph_homomorphism (LG E V) (S (max i j)) f\n\ngoal (1 subgoal):\n 1. \\<exists>i. graph_homomorphism (LG E V) (S i) f", "thus ?thesis"], ["proof (prove)\nusing this:\n  graph_homomorphism (LG E V) (S (max i j)) f\n\ngoal (1 subgoal):\n 1. \\<exists>i. graph_homomorphism (LG E V) (S i) f", "by auto"], ["proof (state)\nthis:\n  \\<exists>i. graph_homomorphism (LG E V) (S i) f\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>Lemma 3.\n      Recall that in the paper, graph rules use finite graphs, i.e. both sides should be finite.\n      We strengthen lemma 3 by requiring only the left hand side to be a finite graph.\\<close>"], ["", "lemma fair_chain_impl_consequence_graph:\n  assumes \"fair_chain Rs S\" \"\\<And> R. R \\<in> Rs \\<Longrightarrow> subgraph (fst R) (snd R) \\<and> finite_graph (fst R)\"\n  shows \"consequence_graph Rs (chain_sup S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. consequence_graph Rs (chain_sup S)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. consequence_graph Rs (chain_sup S)", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. consequence_graph Rs (chain_sup S)", "fix R"], ["proof (state)\ngoal (1 subgoal):\n 1. consequence_graph Rs (chain_sup S)", "assume a:\"R \\<in> Rs\""], ["proof (state)\nthis:\n  R \\<in> Rs\n\ngoal (1 subgoal):\n 1. consequence_graph Rs (chain_sup S)", "have fin_v:\"finite (vertices (fst R))\" and fin_e: \"finite (edges (fst R))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (vertices (fst R)) &&& finite (edges (fst R))", "using assms(2)[OF a]"], ["proof (prove)\nusing this:\n  subgraph (fst R) (snd R) \\<and> finite_graph (fst R)\n\ngoal (1 subgoal):\n 1. finite (vertices (fst R)) &&& finite (edges (fst R))", "by auto"], ["proof (state)\nthis:\n  finite (vertices (fst R))\n  finite (edges (fst R))\n\ngoal (1 subgoal):\n 1. consequence_graph Rs (chain_sup S)", "{"], ["proof (state)\nthis:\n  finite (vertices (fst R))\n  finite (edges (fst R))\n\ngoal (1 subgoal):\n 1. consequence_graph Rs (chain_sup S)", "fix f"], ["proof (state)\ngoal (1 subgoal):\n 1. consequence_graph Rs (chain_sup S)", "assume \"graph_homomorphism (LG (edges (fst R)) (vertices (fst R))) (chain_sup S) f\""], ["proof (state)\nthis:\n  graph_homomorphism (LG (edges (fst R)) (vertices (fst R))) (chain_sup S) f\n\ngoal (1 subgoal):\n 1. consequence_graph Rs (chain_sup S)", "with find_graph_occurence[OF fair_chainD(1)[OF assms(1)] fin_e fin_v]"], ["proof (chain)\npicking this:\n  graph_homomorphism (LG (edges (fst R)) (vertices (fst R))) (chain_sup S)\n   ?f \\<Longrightarrow>\n  \\<exists>i.\n     graph_homomorphism (LG (edges (fst R)) (vertices (fst R))) (S i) ?f\n  graph_homomorphism (LG (edges (fst R)) (vertices (fst R))) (chain_sup S) f", "obtain i where \"graph_homomorphism (fst R) (S i) f\""], ["proof (prove)\nusing this:\n  graph_homomorphism (LG (edges (fst R)) (vertices (fst R))) (chain_sup S)\n   ?f \\<Longrightarrow>\n  \\<exists>i.\n     graph_homomorphism (LG (edges (fst R)) (vertices (fst R))) (S i) ?f\n  graph_homomorphism (LG (edges (fst R)) (vertices (fst R))) (chain_sup S) f\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        graph_homomorphism (fst R) (S i) f \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  graph_homomorphism (fst R) (S i) f\n\ngoal (1 subgoal):\n 1. consequence_graph Rs (chain_sup S)", "from fair_chainD(2)[OF assms(1) a this]"], ["proof (chain)\npicking this:\n  \\<exists>j. extensible R (S j) f", "obtain j\n         where \"extensible R (S j) f\""], ["proof (prove)\nusing this:\n  \\<exists>j. extensible R (S j) f\n\ngoal (1 subgoal):\n 1. (\\<And>j.\n        extensible R (S j) f \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  extensible R (S j) f\n\ngoal (1 subgoal):\n 1. consequence_graph Rs (chain_sup S)", "hence \"extensible R (chain_sup S) f\""], ["proof (prove)\nusing this:\n  extensible R (S j) f\n\ngoal (1 subgoal):\n 1. extensible R (chain_sup S) f", "using fair_chainD(1)[OF assms(1)]"], ["proof (prove)\nusing this:\n  extensible R (S j) f\n  chain S\n\ngoal (1 subgoal):\n 1. extensible R (chain_sup S) f", "by auto"], ["proof (state)\nthis:\n  extensible R (chain_sup S) f\n\ngoal (1 subgoal):\n 1. consequence_graph Rs (chain_sup S)", "}"], ["proof (state)\nthis:\n  graph_homomorphism (LG (edges (fst R)) (vertices (fst R))) (chain_sup S)\n   ?f2 \\<Longrightarrow>\n  extensible R (chain_sup S) ?f2\n\ngoal (1 subgoal):\n 1. consequence_graph Rs (chain_sup S)", "hence \"maintained R (chain_sup S)\""], ["proof (prove)\nusing this:\n  graph_homomorphism (LG (edges (fst R)) (vertices (fst R))) (chain_sup S)\n   ?f2 \\<Longrightarrow>\n  extensible R (chain_sup S) ?f2\n\ngoal (1 subgoal):\n 1. maintained R (chain_sup S)", "unfolding maintained_def"], ["proof (prove)\nusing this:\n  graph_homomorphism (LG (edges (fst R)) (vertices (fst R))) (chain_sup S)\n   ?f2 \\<Longrightarrow>\n  extensible R (chain_sup S) ?f2\n\ngoal (1 subgoal):\n 1. \\<forall>f.\n       graph_homomorphism (fst R) (chain_sup S) f \\<longrightarrow>\n       extensible R (chain_sup S) f", "by auto"], ["proof (state)\nthis:\n  maintained R (chain_sup S)\n\ngoal (1 subgoal):\n 1. consequence_graph Rs (chain_sup S)", "}"], ["proof (state)\nthis:\n  ?R2 \\<in> Rs \\<Longrightarrow> maintained ?R2 (chain_sup S)\n\ngoal (1 subgoal):\n 1. consequence_graph Rs (chain_sup S)", "note mnt = this"], ["proof (state)\nthis:\n  ?R2 \\<in> Rs \\<Longrightarrow> maintained ?R2 (chain_sup S)\n\ngoal (1 subgoal):\n 1. consequence_graph Rs (chain_sup S)", "from assms"], ["proof (chain)\npicking this:\n  fair_chain Rs S\n  ?R \\<in> Rs \\<Longrightarrow>\n  subgraph (fst ?R) (snd ?R) \\<and> finite_graph (fst ?R)", "have \"chain S\""], ["proof (prove)\nusing this:\n  fair_chain Rs S\n  ?R \\<in> Rs \\<Longrightarrow>\n  subgraph (fst ?R) (snd ?R) \\<and> finite_graph (fst ?R)\n\ngoal (1 subgoal):\n 1. chain S", "unfolding fair_chain_def"], ["proof (prove)\nusing this:\n  chain S \\<and>\n  (\\<forall>R f i.\n      R \\<in> Rs \\<and> graph_homomorphism (fst R) (S i) f \\<longrightarrow>\n      (\\<exists>j. extensible R (S j) f))\n  ?R \\<in> Rs \\<Longrightarrow>\n  subgraph (fst ?R) (snd ?R) \\<and> finite_graph (fst ?R)\n\ngoal (1 subgoal):\n 1. chain S", "by auto"], ["proof (state)\nthis:\n  chain S\n\ngoal (1 subgoal):\n 1. consequence_graph Rs (chain_sup S)", "thus ?thesis"], ["proof (prove)\nusing this:\n  chain S\n\ngoal (1 subgoal):\n 1. consequence_graph Rs (chain_sup S)", "unfolding consequence_graph_def"], ["proof (prove)\nusing this:\n  chain S\n\ngoal (1 subgoal):\n 1. graph (chain_sup S) \\<and>\n    (\\<forall>R\\<in>Rs.\n        subgraph (fst R) (snd R) \\<and> maintained R (chain_sup S))", "using mnt assms(2)"], ["proof (prove)\nusing this:\n  chain S\n  ?R2 \\<in> Rs \\<Longrightarrow> maintained ?R2 (chain_sup S)\n  ?R \\<in> Rs \\<Longrightarrow>\n  subgraph (fst ?R) (snd ?R) \\<and> finite_graph (fst ?R)\n\ngoal (1 subgoal):\n 1. graph (chain_sup S) \\<and>\n    (\\<forall>R\\<in>Rs.\n        subgraph (fst R) (snd R) \\<and> maintained R (chain_sup S))", "by blast"], ["proof (state)\nthis:\n  consequence_graph Rs (chain_sup S)\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>We extract the weak universal property from the definition of weak pushout step.\n      Again, the paper allows for arbitrary types in the quantifier,\n          but we fix the type here in the definition that will be used in @{term pushout_step}.\n          The type used here should suffice (and we cannot quantify over types anyways)\\<close>"], ["", "definition weak_universal ::\n    \"'x itself \\<Rightarrow> ('a, 'c) Graph_PreRule \\<Rightarrow> ('a, 'b) labeled_graph \\<Rightarrow> ('a, 'b) labeled_graph \\<Rightarrow>\n     ('c \\<times> 'b) set \\<Rightarrow> ('c \\<times> 'b) set \\<Rightarrow> bool\" where\n\"weak_universal _ R G\\<^sub>1 G\\<^sub>2 f\\<^sub>1 f\\<^sub>2 \\<equiv> (\\<forall> h\\<^sub>1 h\\<^sub>2 G::('a, 'x) labeled_graph.\n             (graph_homomorphism (snd R) G h\\<^sub>1 \\<and> graph_homomorphism G\\<^sub>1 G h\\<^sub>2 \\<and> f\\<^sub>1 O h\\<^sub>2 \\<subseteq> h\\<^sub>1)\n         \\<longrightarrow> (\\<exists> h. graph_homomorphism G\\<^sub>2 G h \\<and> h\\<^sub>2 \\<subseteq> h))\""], ["", "lemma weak_universalD[dest]:\n  assumes \"weak_universal (t:: 'x itself) R (G\\<^sub>1::('a, 'b) labeled_graph) G\\<^sub>2 f\\<^sub>1 f\\<^sub>2\"\n  shows \"\\<And>  h\\<^sub>1 h\\<^sub>2 G::('a, 'x) labeled_graph.\n         graph_homomorphism (snd R) G h\\<^sub>1 \\<Longrightarrow> graph_homomorphism G\\<^sub>1 G h\\<^sub>2 \\<Longrightarrow> f\\<^sub>1 O h\\<^sub>2 \\<subseteq> h\\<^sub>1\n         \\<Longrightarrow> (\\<exists> h. graph_homomorphism G\\<^sub>2 G h \\<and> h\\<^sub>2 \\<subseteq> h)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>h\\<^sub>1 h\\<^sub>2 G.\n       \\<lbrakk>graph_homomorphism (snd R) G h\\<^sub>1;\n        graph_homomorphism G\\<^sub>1 G h\\<^sub>2;\n        f\\<^sub>1 O h\\<^sub>2 \\<subseteq> h\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>h.\n                            graph_homomorphism G\\<^sub>2 G h \\<and>\n                            h\\<^sub>2 \\<subseteq> h", "using assms"], ["proof (prove)\nusing this:\n  weak_universal t R G\\<^sub>1 G\\<^sub>2 f\\<^sub>1 f\\<^sub>2\n\ngoal (1 subgoal):\n 1. \\<And>h\\<^sub>1 h\\<^sub>2 G.\n       \\<lbrakk>graph_homomorphism (snd R) G h\\<^sub>1;\n        graph_homomorphism G\\<^sub>1 G h\\<^sub>2;\n        f\\<^sub>1 O h\\<^sub>2 \\<subseteq> h\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>h.\n                            graph_homomorphism G\\<^sub>2 G h \\<and>\n                            h\\<^sub>2 \\<subseteq> h", "unfolding weak_universal_def"], ["proof (prove)\nusing this:\n  \\<forall>h\\<^sub>1 h\\<^sub>2 G.\n     graph_homomorphism (snd R) G h\\<^sub>1 \\<and>\n     graph_homomorphism G\\<^sub>1 G h\\<^sub>2 \\<and>\n     f\\<^sub>1 O h\\<^sub>2 \\<subseteq> h\\<^sub>1 \\<longrightarrow>\n     (\\<exists>h.\n         graph_homomorphism G\\<^sub>2 G h \\<and> h\\<^sub>2 \\<subseteq> h)\n\ngoal (1 subgoal):\n 1. \\<And>h\\<^sub>1 h\\<^sub>2 G.\n       \\<lbrakk>graph_homomorphism (snd R) G h\\<^sub>1;\n        graph_homomorphism G\\<^sub>1 G h\\<^sub>2;\n        f\\<^sub>1 O h\\<^sub>2 \\<subseteq> h\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>h.\n                            graph_homomorphism G\\<^sub>2 G h \\<and>\n                            h\\<^sub>2 \\<subseteq> h", "by metis"], ["", "lemma weak_universalI[intro]:\n  assumes \"\\<And> h\\<^sub>1 h\\<^sub>2 G::('a, 'x) labeled_graph.\n         graph_homomorphism (snd R) G h\\<^sub>1 \\<Longrightarrow> graph_homomorphism G\\<^sub>1 G h\\<^sub>2 \\<Longrightarrow> f\\<^sub>1 O h\\<^sub>2 \\<subseteq> h\\<^sub>1\n         \\<Longrightarrow> (\\<exists> h. graph_homomorphism G\\<^sub>2 G h \\<and> h\\<^sub>2 \\<subseteq> h)\"\n  shows \"weak_universal (t:: 'x itself) R (G\\<^sub>1::('a, 'b) labeled_graph) G\\<^sub>2 f\\<^sub>1 f\\<^sub>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. weak_universal t R G\\<^sub>1 G\\<^sub>2 f\\<^sub>1 f\\<^sub>2", "using assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>graph_homomorphism (snd R) ?G ?h\\<^sub>1;\n   graph_homomorphism G\\<^sub>1 ?G ?h\\<^sub>2;\n   f\\<^sub>1 O ?h\\<^sub>2 \\<subseteq> ?h\\<^sub>1\\<rbrakk>\n  \\<Longrightarrow> \\<exists>h.\n                       graph_homomorphism G\\<^sub>2 ?G h \\<and>\n                       ?h\\<^sub>2 \\<subseteq> h\n\ngoal (1 subgoal):\n 1. weak_universal t R G\\<^sub>1 G\\<^sub>2 f\\<^sub>1 f\\<^sub>2", "unfolding weak_universal_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>graph_homomorphism (snd R) ?G ?h\\<^sub>1;\n   graph_homomorphism G\\<^sub>1 ?G ?h\\<^sub>2;\n   f\\<^sub>1 O ?h\\<^sub>2 \\<subseteq> ?h\\<^sub>1\\<rbrakk>\n  \\<Longrightarrow> \\<exists>h.\n                       graph_homomorphism G\\<^sub>2 ?G h \\<and>\n                       ?h\\<^sub>2 \\<subseteq> h\n\ngoal (1 subgoal):\n 1. \\<forall>h\\<^sub>1 h\\<^sub>2 G.\n       graph_homomorphism (snd R) G h\\<^sub>1 \\<and>\n       graph_homomorphism G\\<^sub>1 G h\\<^sub>2 \\<and>\n       f\\<^sub>1 O h\\<^sub>2 \\<subseteq> h\\<^sub>1 \\<longrightarrow>\n       (\\<exists>h.\n           graph_homomorphism G\\<^sub>2 G h \\<and> h\\<^sub>2 \\<subseteq> h)", "by force"], ["", "text \\<open>Definition 13\\<close>"], ["", "definition pushout_step ::\n    \"'x itself \\<Rightarrow> ('a, 'c) Graph_PreRule \\<Rightarrow> ('a, 'b) labeled_graph \\<Rightarrow> ('a, 'b) labeled_graph \\<Rightarrow> bool\" where\n\"pushout_step t R G\\<^sub>1 G\\<^sub>2 \\<equiv> subgraph G\\<^sub>1 G\\<^sub>2 \\<and> \n  (\\<exists> f\\<^sub>1 f\\<^sub>2. graph_homomorphism (fst R) G\\<^sub>1 f\\<^sub>1 \\<and>\n           graph_homomorphism (snd R) G\\<^sub>2 f\\<^sub>2 \\<and>\n           f\\<^sub>1 \\<subseteq> f\\<^sub>2 \\<and>\n           weak_universal t R G\\<^sub>1 G\\<^sub>2 f\\<^sub>1 f\\<^sub>2\n  )\""], ["", "text \\<open>Definition 14\\<close>"], ["", "definition Simple_WPC ::\n    \"'x itself \\<Rightarrow> (('a, 'b) Graph_PreRule) set \\<Rightarrow> (('a, 'd) graph_seq) \\<Rightarrow> bool\" where\n\"Simple_WPC t Rs S \\<equiv> set_of_graph_rules Rs\n   \\<and> (\\<forall> i. (graph (S i) \\<and> S i = S (Suc i)) \\<or> (\\<exists> R \\<in> Rs. pushout_step t R (S i) (S (Suc i))))\""], ["", "lemma Simple_WPCI [intro]:\n  assumes \"set_of_graph_rules Rs\" \"graph (S 0)\"\n          \"\\<And> i. (S i = S (Suc i)) \\<or> (\\<exists> R \\<in> Rs. pushout_step t R (S i) (S (Suc i)))\"\n        shows \"Simple_WPC t Rs S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Simple_WPC t Rs S", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Simple_WPC t Rs S", "have \"graph (S i)\" for i"], ["proof (prove)\ngoal (1 subgoal):\n 1. graph (S i)", "proof(induct i)"], ["proof (state)\ngoal (2 subgoals):\n 1. graph (S 0)\n 2. \\<And>i. graph (S i) \\<Longrightarrow> graph (S (Suc i))", "case (Suc i)"], ["proof (state)\nthis:\n  graph (S i)\n\ngoal (2 subgoals):\n 1. graph (S 0)\n 2. \\<And>i. graph (S i) \\<Longrightarrow> graph (S (Suc i))", "then"], ["proof (chain)\npicking this:\n  graph (S i)", "show ?case"], ["proof (prove)\nusing this:\n  graph (S i)\n\ngoal (1 subgoal):\n 1. graph (S (Suc i))", "using assms(3)"], ["proof (prove)\nusing this:\n  graph (S i)\n  S ?i = S (Suc ?i) \\<or>\n  (\\<exists>R\\<in>Rs. pushout_step t R (S ?i) (S (Suc ?i)))\n\ngoal (1 subgoal):\n 1. graph (S (Suc i))", "unfolding pushout_step_def subgraph_def"], ["proof (prove)\nusing this:\n  graph (S i)\n  S ?i = S (Suc ?i) \\<or>\n  (\\<exists>R\\<in>Rs.\n      (graph (S ?i) \\<and>\n       graph (S (Suc ?i)) \\<and>\n       graph_union (S ?i) (S (Suc ?i)) = S (Suc ?i)) \\<and>\n      (\\<exists>f\\<^sub>1 f\\<^sub>2.\n          graph_homomorphism (fst R) (S ?i) f\\<^sub>1 \\<and>\n          graph_homomorphism (snd R) (S (Suc ?i)) f\\<^sub>2 \\<and>\n          f\\<^sub>1 \\<subseteq> f\\<^sub>2 \\<and>\n          weak_universal t R (S ?i) (S (Suc ?i)) f\\<^sub>1 f\\<^sub>2))\n\ngoal (1 subgoal):\n 1. graph (S (Suc i))", "by metis"], ["proof (state)\nthis:\n  graph (S (Suc i))\n\ngoal (1 subgoal):\n 1. graph (S 0)", "qed (fact assms)"], ["proof (state)\nthis:\n  graph (S ?i)\n\ngoal (1 subgoal):\n 1. Simple_WPC t Rs S", "thus ?thesis"], ["proof (prove)\nusing this:\n  graph (S ?i)\n\ngoal (1 subgoal):\n 1. Simple_WPC t Rs S", "using assms"], ["proof (prove)\nusing this:\n  graph (S ?i)\n  set_of_graph_rules Rs\n  graph (S 0)\n  S ?i = S (Suc ?i) \\<or>\n  (\\<exists>R\\<in>Rs. pushout_step t R (S ?i) (S (Suc ?i)))\n\ngoal (1 subgoal):\n 1. Simple_WPC t Rs S", "unfolding Simple_WPC_def"], ["proof (prove)\nusing this:\n  graph (S ?i)\n  set_of_graph_rules Rs\n  graph (S 0)\n  S ?i = S (Suc ?i) \\<or>\n  (\\<exists>R\\<in>Rs. pushout_step t R (S ?i) (S (Suc ?i)))\n\ngoal (1 subgoal):\n 1. set_of_graph_rules Rs \\<and>\n    (\\<forall>i.\n        graph (S i) \\<and> S i = S (Suc i) \\<or>\n        (\\<exists>R\\<in>Rs. pushout_step t R (S i) (S (Suc i))))", "by auto"], ["proof (state)\nthis:\n  Simple_WPC t Rs S\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Simple_WPC_Chain[simp]:\n  assumes \"Simple_WPC t Rs S\"\n  shows \"chain S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. chain S", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. chain S", "have \"subgraph (S i) (S (Suc i))\" for i"], ["proof (prove)\ngoal (1 subgoal):\n 1. subgraph (S i) (S (Suc i))", "using assms"], ["proof (prove)\nusing this:\n  Simple_WPC t Rs S\n\ngoal (1 subgoal):\n 1. subgraph (S i) (S (Suc i))", "unfolding Simple_WPC_def pushout_step_def"], ["proof (prove)\nusing this:\n  set_of_graph_rules Rs \\<and>\n  (\\<forall>i.\n      graph (S i) \\<and> S i = S (Suc i) \\<or>\n      (\\<exists>R\\<in>Rs.\n          subgraph (S i) (S (Suc i)) \\<and>\n          (\\<exists>f\\<^sub>1 f\\<^sub>2.\n              graph_homomorphism (fst R) (S i) f\\<^sub>1 \\<and>\n              graph_homomorphism (snd R) (S (Suc i)) f\\<^sub>2 \\<and>\n              f\\<^sub>1 \\<subseteq> f\\<^sub>2 \\<and>\n              weak_universal t R (S i) (S (Suc i)) f\\<^sub>1 f\\<^sub>2)))\n\ngoal (1 subgoal):\n 1. subgraph (S i) (S (Suc i))", "by (cases \"graph (S i) \\<and> S i = S (Suc i)\",auto)"], ["proof (state)\nthis:\n  subgraph (S ?i) (S (Suc ?i))\n\ngoal (1 subgoal):\n 1. chain S", "thus ?thesis"], ["proof (prove)\nusing this:\n  subgraph (S ?i) (S (Suc ?i))\n\ngoal (1 subgoal):\n 1. chain S", "unfolding chain_def"], ["proof (prove)\nusing this:\n  subgraph (S ?i) (S (Suc ?i))\n\ngoal (1 subgoal):\n 1. \\<forall>i. subgraph (S i) (S (i + 1))", "by auto"], ["proof (state)\nthis:\n  chain S\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>Definition 14, second part. \\<close>"], ["", "inductive WPC ::\n    \"'x itself \\<Rightarrow> (('a, 'b) Graph_PreRule) set \\<Rightarrow> (('a, 'd) graph_seq) \\<Rightarrow> bool\"\n  where\n    wpc_simpl [simp, intro]: \"Simple_WPC t Rs S \\<Longrightarrow> WPC t Rs S\"\n  | wpc_combo [simp, intro]: \"chain S \\<Longrightarrow> (\\<And> i. \\<exists> S'. S' 0 = S i \\<and> chain_sup S' = S (Suc i) \\<and> WPC t Rs S') \\<Longrightarrow> WPC t Rs S\""], ["", "lemma extensible_from_chainI:\n  assumes ch:\"chain S\"\n  and igh:\"graph_homomorphism (S 0) C f\"\n  and ind:\"\\<And> f i. graph_homomorphism (S i) C f \\<Longrightarrow>\n                \\<exists>h. (graph_homomorphism (S (Suc i)) C h) \\<and> agree_on (S i) f h\"\n  shows \"extensible (S 0,chain_sup S) C f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. extensible (S 0, chain_sup S) C f", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. extensible (S 0, chain_sup S) C f", "have ch:\"chain S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. chain S", "using assms"], ["proof (prove)\nusing this:\n  chain S\n  graph_homomorphism (S 0) C f\n  graph_homomorphism (S ?i) C ?f \\<Longrightarrow>\n  \\<exists>h.\n     graph_homomorphism (S (Suc ?i)) C h \\<and> agree_on (S ?i) ?f h\n\ngoal (1 subgoal):\n 1. chain S", "by auto"], ["proof (state)\nthis:\n  chain S\n\ngoal (1 subgoal):\n 1. extensible (S 0, chain_sup S) C f", "hence r0:\"\\<exists>x. graph_homomorphism (S 0) C x \\<and> (0 = 0 \\<longrightarrow> x = f)\""], ["proof (prove)\nusing this:\n  chain S\n\ngoal (1 subgoal):\n 1. \\<exists>x.\n       graph_homomorphism (S 0) C x \\<and>\n       ((0::'d) = (0::'d) \\<longrightarrow> x = f)", "using igh"], ["proof (prove)\nusing this:\n  chain S\n  graph_homomorphism (S 0) C f\n\ngoal (1 subgoal):\n 1. \\<exists>x.\n       graph_homomorphism (S 0) C x \\<and>\n       ((0::'d) = (0::'d) \\<longrightarrow> x = f)", "by auto"], ["proof (state)\nthis:\n  \\<exists>x.\n     graph_homomorphism (S 0) C x \\<and>\n     ((0::?'d1) = (0::?'d1) \\<longrightarrow> x = f)\n\ngoal (1 subgoal):\n 1. extensible (S 0, chain_sup S) C f", "{"], ["proof (state)\nthis:\n  \\<exists>x.\n     graph_homomorphism (S 0) C x \\<and>\n     ((0::?'d1) = (0::?'d1) \\<longrightarrow> x = f)\n\ngoal (1 subgoal):\n 1. extensible (S 0, chain_sup S) C f", "fix i x"], ["proof (state)\ngoal (1 subgoal):\n 1. extensible (S 0, chain_sup S) C f", "assume \"graph_homomorphism (S i) C x \\<and> (i = 0 \\<longrightarrow> x = f)\""], ["proof (state)\nthis:\n  graph_homomorphism (S i) C x \\<and> (i = 0 \\<longrightarrow> x = f)\n\ngoal (1 subgoal):\n 1. extensible (S 0, chain_sup S) C f", "hence \"graph_homomorphism (S i) C x\""], ["proof (prove)\nusing this:\n  graph_homomorphism (S i) C x \\<and> (i = 0 \\<longrightarrow> x = f)\n\ngoal (1 subgoal):\n 1. graph_homomorphism (S i) C x", "by auto"], ["proof (state)\nthis:\n  graph_homomorphism (S i) C x\n\ngoal (1 subgoal):\n 1. extensible (S 0, chain_sup S) C f", "from ind[OF this]"], ["proof (chain)\npicking this:\n  \\<exists>h. graph_homomorphism (S (Suc i)) C h \\<and> agree_on (S i) x h", "have \"\\<exists>y. (graph_homomorphism (S (Suc i)) C y \\<and> (Suc i = 0 \\<longrightarrow> y = f)) \\<and> agree_on (S i) x y\""], ["proof (prove)\nusing this:\n  \\<exists>h. graph_homomorphism (S (Suc i)) C h \\<and> agree_on (S i) x h\n\ngoal (1 subgoal):\n 1. \\<exists>y.\n       (graph_homomorphism (S (Suc i)) C y \\<and>\n        (Suc i = 0 \\<longrightarrow> y = f)) \\<and>\n       agree_on (S i) x y", "by auto"], ["proof (state)\nthis:\n  \\<exists>y.\n     (graph_homomorphism (S (Suc i)) C y \\<and>\n      (Suc i = 0 \\<longrightarrow> y = f)) \\<and>\n     agree_on (S i) x y\n\ngoal (1 subgoal):\n 1. extensible (S 0, chain_sup S) C f", "}"], ["proof (state)\nthis:\n  graph_homomorphism (S ?i3) C ?x3 \\<and>\n  (?i3 = 0 \\<longrightarrow> ?x3 = f) \\<Longrightarrow>\n  \\<exists>y.\n     (graph_homomorphism (S (Suc ?i3)) C y \\<and>\n      (Suc ?i3 = 0 \\<longrightarrow> y = f)) \\<and>\n     agree_on (S ?i3) ?x3 y\n\ngoal (1 subgoal):\n 1. extensible (S 0, chain_sup S) C f", "with r0"], ["proof (chain)\npicking this:\n  \\<exists>x.\n     graph_homomorphism (S 0) C x \\<and>\n     ((0::?'d1) = (0::?'d1) \\<longrightarrow> x = f)\n  graph_homomorphism (S ?i3) C ?x3 \\<and>\n  (?i3 = 0 \\<longrightarrow> ?x3 = f) \\<Longrightarrow>\n  \\<exists>y.\n     (graph_homomorphism (S (Suc ?i3)) C y \\<and>\n      (Suc ?i3 = 0 \\<longrightarrow> y = f)) \\<and>\n     agree_on (S ?i3) ?x3 y", "have \"\\<exists> g. (\\<forall> i. (graph_homomorphism (S i) C (g i) \\<and> (i = 0 \\<longrightarrow> g i = f))\n                \\<and> agree_on (S i) (g i) (g (Suc i)) )\""], ["proof (prove)\nusing this:\n  \\<exists>x.\n     graph_homomorphism (S 0) C x \\<and>\n     ((0::?'d1) = (0::?'d1) \\<longrightarrow> x = f)\n  graph_homomorphism (S ?i3) C ?x3 \\<and>\n  (?i3 = 0 \\<longrightarrow> ?x3 = f) \\<Longrightarrow>\n  \\<exists>y.\n     (graph_homomorphism (S (Suc ?i3)) C y \\<and>\n      (Suc ?i3 = 0 \\<longrightarrow> y = f)) \\<and>\n     agree_on (S ?i3) ?x3 y\n\ngoal (1 subgoal):\n 1. \\<exists>g.\n       \\<forall>i.\n          (graph_homomorphism (S i) C (g i) \\<and>\n           (i = 0 \\<longrightarrow> g i = f)) \\<and>\n          agree_on (S i) (g i) (g (Suc i))", "by (rule dependent_nat_choice)"], ["proof (state)\nthis:\n  \\<exists>g.\n     \\<forall>i.\n        (graph_homomorphism (S i) C (g i) \\<and>\n         (i = 0 \\<longrightarrow> g i = f)) \\<and>\n        agree_on (S i) (g i) (g (Suc i))\n\ngoal (1 subgoal):\n 1. extensible (S 0, chain_sup S) C f", "then"], ["proof (chain)\npicking this:\n  \\<exists>g.\n     \\<forall>i.\n        (graph_homomorphism (S i) C (g i) \\<and>\n         (i = 0 \\<longrightarrow> g i = f)) \\<and>\n        agree_on (S i) (g i) (g (Suc i))", "obtain g where\n       mtn:\"g 0 = f\"\n           \"graph_homomorphism (S i) C (g i)\"\n           \"agree_on (S i) (g i) (g (i + 1))\" for i"], ["proof (prove)\nusing this:\n  \\<exists>g.\n     \\<forall>i.\n        (graph_homomorphism (S i) C (g i) \\<and>\n         (i = 0 \\<longrightarrow> g i = f)) \\<and>\n        agree_on (S i) (g i) (g (Suc i))\n\ngoal (1 subgoal):\n 1. (\\<And>g.\n        \\<lbrakk>g 0 = f; \\<And>i. graph_homomorphism (S i) C (g i);\n         \\<And>i. agree_on (S i) (g i) (g (i + 1))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  g 0 = f\n  graph_homomorphism (S ?i1) C (g ?i1)\n  agree_on (S ?i1) (g ?i1) (g (?i1 + 1))\n\ngoal (1 subgoal):\n 1. extensible (S 0, chain_sup S) C f", "from extend_for_chain[OF mtn ch]"], ["proof (chain)\npicking this:\n  extensible (S 0, chain_sup S) C f", "show ?thesis"], ["proof (prove)\nusing this:\n  extensible (S 0, chain_sup S) C f\n\ngoal (1 subgoal):\n 1. extensible (S 0, chain_sup S) C f", "."], ["proof (state)\nthis:\n  extensible (S 0, chain_sup S) C f\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>Towards Lemma 4, this is the key inductive property.\\<close>"], ["", "lemma wpc_least:\n  assumes \"WPC (t:: 'x itself) Rs S\"\n  shows \"least t Rs (S 0) (chain_sup S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. least t Rs (S 0) (chain_sup S)", "using assms"], ["proof (prove)\nusing this:\n  WPC t Rs S\n\ngoal (1 subgoal):\n 1. least t Rs (S 0) (chain_sup S)", "proof(induction S)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>t Rs S.\n       Simple_WPC t Rs S \\<Longrightarrow> least t Rs (S 0) (chain_sup S)\n 2. \\<And>S t Rs.\n       \\<lbrakk>chain S;\n        \\<And>i.\n           \\<exists>S'.\n              S' 0 = S i \\<and>\n              chain_sup S' = S (Suc i) \\<and>\n              WPC t Rs S' \\<and> least t Rs (S' 0) (chain_sup S')\\<rbrakk>\n       \\<Longrightarrow> least t Rs (S 0) (chain_sup S)", "case (wpc_simpl t Rs S)"], ["proof (state)\nthis:\n  Simple_WPC t Rs S\n\ngoal (2 subgoals):\n 1. \\<And>t Rs S.\n       Simple_WPC t Rs S \\<Longrightarrow> least t Rs (S 0) (chain_sup S)\n 2. \\<And>S t Rs.\n       \\<lbrakk>chain S;\n        \\<And>i.\n           \\<exists>S'.\n              S' 0 = S i \\<and>\n              chain_sup S' = S (Suc i) \\<and>\n              WPC t Rs S' \\<and> least t Rs (S' 0) (chain_sup S')\\<rbrakk>\n       \\<Longrightarrow> least t Rs (S 0) (chain_sup S)", "hence gr:\"set_of_graph_rules Rs\"\n    and ps:\"\\<And> i. S i = S (Suc i) \\<or> (\\<exists>R\\<in>Rs. pushout_step t R (S i) (S (i + 1)))\""], ["proof (prove)\nusing this:\n  Simple_WPC t Rs S\n\ngoal (1 subgoal):\n 1. set_of_graph_rules Rs &&&\n    (\\<And>i.\n        S i = S (Suc i) \\<or>\n        (\\<exists>R\\<in>Rs. pushout_step t R (S i) (S (i + 1))))", "unfolding Simple_WPC_def"], ["proof (prove)\nusing this:\n  set_of_graph_rules Rs \\<and>\n  (\\<forall>i.\n      graph (S i) \\<and> S i = S (Suc i) \\<or>\n      (\\<exists>R\\<in>Rs. pushout_step t R (S i) (S (Suc i))))\n\ngoal (1 subgoal):\n 1. set_of_graph_rules Rs &&&\n    (\\<And>i.\n        S i = S (Suc i) \\<or>\n        (\\<exists>R\\<in>Rs. pushout_step t R (S i) (S (i + 1))))", "by auto"], ["proof (state)\nthis:\n  set_of_graph_rules Rs\n  S ?i = S (Suc ?i) \\<or>\n  (\\<exists>R\\<in>Rs. pushout_step t R (S ?i) (S (?i + 1)))\n\ngoal (2 subgoals):\n 1. \\<And>t Rs S.\n       Simple_WPC t Rs S \\<Longrightarrow> least t Rs (S 0) (chain_sup S)\n 2. \\<And>S t Rs.\n       \\<lbrakk>chain S;\n        \\<And>i.\n           \\<exists>S'.\n              S' 0 = S i \\<and>\n              chain_sup S' = S (Suc i) \\<and>\n              WPC t Rs S' \\<and> least t Rs (S' 0) (chain_sup S')\\<rbrakk>\n       \\<Longrightarrow> least t Rs (S 0) (chain_sup S)", "have ch[intro]:\"chain S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. chain S", "using wpc_simpl"], ["proof (prove)\nusing this:\n  Simple_WPC t Rs S\n\ngoal (1 subgoal):\n 1. chain S", "by auto"], ["proof (state)\nthis:\n  chain S\n\ngoal (2 subgoals):\n 1. \\<And>t Rs S.\n       Simple_WPC t Rs S \\<Longrightarrow> least t Rs (S 0) (chain_sup S)\n 2. \\<And>S t Rs.\n       \\<lbrakk>chain S;\n        \\<And>i.\n           \\<exists>S'.\n              S' 0 = S i \\<and>\n              chain_sup S' = S (Suc i) \\<and>\n              WPC t Rs S' \\<and> least t Rs (S' 0) (chain_sup S')\\<rbrakk>\n       \\<Longrightarrow> least t Rs (S 0) (chain_sup S)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. least t Rs (S 0) (chain_sup S)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. subgraph (S 0) (chain_sup S)\n 2. \\<And>C.\n       consequence_graph Rs C \\<Longrightarrow>\n       maintained (S 0, chain_sup S) C", "fix C::\"('a,'x) labeled_graph\""], ["proof (state)\ngoal (2 subgoals):\n 1. subgraph (S 0) (chain_sup S)\n 2. \\<And>C.\n       consequence_graph Rs C \\<Longrightarrow>\n       maintained (S 0, chain_sup S) C", "assume cgC:\"consequence_graph Rs C\""], ["proof (state)\nthis:\n  consequence_graph Rs C\n\ngoal (2 subgoals):\n 1. subgraph (S 0) (chain_sup S)\n 2. \\<And>C.\n       consequence_graph Rs C \\<Longrightarrow>\n       maintained (S 0, chain_sup S) C", "show \"maintained (S 0, chain_sup S) C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. maintained (S 0, chain_sup S) C", "proof(standard,rule extensible_from_chainI,goal_cases)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>f. graph_homomorphism (S 0) C f \\<Longrightarrow> chain S\n 2. \\<And>f.\n       graph_homomorphism (S 0) C f \\<Longrightarrow>\n       graph_homomorphism (S 0) C f\n 3. \\<And>f fa i.\n       \\<lbrakk>graph_homomorphism (S 0) C f;\n        graph_homomorphism (S i) C fa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>h.\n                            graph_homomorphism (S (Suc i)) C h \\<and>\n                            agree_on (S i) fa h", "case (3 f x i)"], ["proof (state)\nthis:\n  graph_homomorphism (S 0) C f\n  graph_homomorphism (S i) C x\n\ngoal (3 subgoals):\n 1. \\<And>f. graph_homomorphism (S 0) C f \\<Longrightarrow> chain S\n 2. \\<And>f.\n       graph_homomorphism (S 0) C f \\<Longrightarrow>\n       graph_homomorphism (S 0) C f\n 3. \\<And>f fa i.\n       \\<lbrakk>graph_homomorphism (S 0) C f;\n        graph_homomorphism (S i) C fa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>h.\n                            graph_homomorphism (S (Suc i)) C h \\<and>\n                            agree_on (S i) fa h", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>h. graph_homomorphism (S (Suc i)) C h \\<and> agree_on (S i) x h", "proof(cases \"S i = S (Suc i)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. S i = S (Suc i) \\<Longrightarrow>\n    \\<exists>h. graph_homomorphism (S (Suc i)) C h \\<and> agree_on (S i) x h\n 2. S i \\<noteq> S (Suc i) \\<Longrightarrow>\n    \\<exists>h. graph_homomorphism (S (Suc i)) C h \\<and> agree_on (S i) x h", "case True"], ["proof (state)\nthis:\n  S i = S (Suc i)\n\ngoal (2 subgoals):\n 1. S i = S (Suc i) \\<Longrightarrow>\n    \\<exists>h. graph_homomorphism (S (Suc i)) C h \\<and> agree_on (S i) x h\n 2. S i \\<noteq> S (Suc i) \\<Longrightarrow>\n    \\<exists>h. graph_homomorphism (S (Suc i)) C h \\<and> agree_on (S i) x h", "with 3"], ["proof (chain)\npicking this:\n  graph_homomorphism (S 0) C f\n  graph_homomorphism (S i) C x\n  S i = S (Suc i)", "show ?thesis"], ["proof (prove)\nusing this:\n  graph_homomorphism (S 0) C f\n  graph_homomorphism (S i) C x\n  S i = S (Suc i)\n\ngoal (1 subgoal):\n 1. \\<exists>h. graph_homomorphism (S (Suc i)) C h \\<and> agree_on (S i) x h", "by auto"], ["proof (state)\nthis:\n  \\<exists>h. graph_homomorphism (S (Suc i)) C h \\<and> agree_on (S i) x h\n\ngoal (1 subgoal):\n 1. S i \\<noteq> S (Suc i) \\<Longrightarrow>\n    \\<exists>h. graph_homomorphism (S (Suc i)) C h \\<and> agree_on (S i) x h", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. S i \\<noteq> S (Suc i) \\<Longrightarrow>\n    \\<exists>h. graph_homomorphism (S (Suc i)) C h \\<and> agree_on (S i) x h", "case False"], ["proof (state)\nthis:\n  S i \\<noteq> S (Suc i)\n\ngoal (1 subgoal):\n 1. S i \\<noteq> S (Suc i) \\<Longrightarrow>\n    \\<exists>h. graph_homomorphism (S (Suc i)) C h \\<and> agree_on (S i) x h", "with ps[of i,unfolded pushout_step_def]"], ["proof (chain)\npicking this:\n  S i = S (Suc i) \\<or>\n  (\\<exists>R\\<in>Rs.\n      subgraph (S i) (S (i + 1)) \\<and>\n      (\\<exists>f\\<^sub>1 f\\<^sub>2.\n          graph_homomorphism (fst R) (S i) f\\<^sub>1 \\<and>\n          graph_homomorphism (snd R) (S (i + 1)) f\\<^sub>2 \\<and>\n          f\\<^sub>1 \\<subseteq> f\\<^sub>2 \\<and>\n          weak_universal t R (S i) (S (i + 1)) f\\<^sub>1 f\\<^sub>2))\n  S i \\<noteq> S (Suc i)", "obtain R f\\<^sub>1 f\\<^sub>2 where\n        R:\"(fst R,snd R) \\<in> Rs\" and f\\<^sub>1:\"graph_homomorphism (fst R) (S i) f\\<^sub>1\"\n        and wu:\"weak_universal t R (S i) (S (i + 1)) f\\<^sub>1 f\\<^sub>2\""], ["proof (prove)\nusing this:\n  S i = S (Suc i) \\<or>\n  (\\<exists>R\\<in>Rs.\n      subgraph (S i) (S (i + 1)) \\<and>\n      (\\<exists>f\\<^sub>1 f\\<^sub>2.\n          graph_homomorphism (fst R) (S i) f\\<^sub>1 \\<and>\n          graph_homomorphism (snd R) (S (i + 1)) f\\<^sub>2 \\<and>\n          f\\<^sub>1 \\<subseteq> f\\<^sub>2 \\<and>\n          weak_universal t R (S i) (S (i + 1)) f\\<^sub>1 f\\<^sub>2))\n  S i \\<noteq> S (Suc i)\n\ngoal (1 subgoal):\n 1. (\\<And>R f\\<^sub>1 f\\<^sub>2.\n        \\<lbrakk>(fst R, snd R) \\<in> Rs;\n         graph_homomorphism (fst R) (S i) f\\<^sub>1;\n         weak_universal t R (S i) (S (i + 1)) f\\<^sub>1 f\\<^sub>2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  (fst R, snd R) \\<in> Rs\n  graph_homomorphism (fst R) (S i) f\\<^sub>1\n  weak_universal t R (S i) (S (i + 1)) f\\<^sub>1 f\\<^sub>2\n\ngoal (1 subgoal):\n 1. S i \\<noteq> S (Suc i) \\<Longrightarrow>\n    \\<exists>h. graph_homomorphism (S (Suc i)) C h \\<and> agree_on (S i) x h", "from graph_homomorphism_composes[OF f\\<^sub>1 3(2)]"], ["proof (chain)\npicking this:\n  graph_homomorphism (fst R) C (f\\<^sub>1 O x)", "have ih_comp:\"graph_homomorphism (fst R) C (f\\<^sub>1 O x)\""], ["proof (prove)\nusing this:\n  graph_homomorphism (fst R) C (f\\<^sub>1 O x)\n\ngoal (1 subgoal):\n 1. graph_homomorphism (fst R) C (f\\<^sub>1 O x)", "."], ["proof (state)\nthis:\n  graph_homomorphism (fst R) C (f\\<^sub>1 O x)\n\ngoal (1 subgoal):\n 1. S i \\<noteq> S (Suc i) \\<Longrightarrow>\n    \\<exists>h. graph_homomorphism (S (Suc i)) C h \\<and> agree_on (S i) x h", "with maintainedD[OF consequence_graphD(1)[OF cgC R]]"], ["proof (chain)\npicking this:\n  graph_homomorphism (fst R) C ?f \\<Longrightarrow>\n  extensible (fst R, snd R) C ?f\n  graph_homomorphism (fst R) C (f\\<^sub>1 O x)", "have \"extensible (fst R, snd R) C (f\\<^sub>1 O x)\""], ["proof (prove)\nusing this:\n  graph_homomorphism (fst R) C ?f \\<Longrightarrow>\n  extensible (fst R, snd R) C ?f\n  graph_homomorphism (fst R) C (f\\<^sub>1 O x)\n\ngoal (1 subgoal):\n 1. extensible (fst R, snd R) C (f\\<^sub>1 O x)", "by auto"], ["proof (state)\nthis:\n  extensible (fst R, snd R) C (f\\<^sub>1 O x)\n\ngoal (1 subgoal):\n 1. S i \\<noteq> S (Suc i) \\<Longrightarrow>\n    \\<exists>h. graph_homomorphism (S (Suc i)) C h \\<and> agree_on (S i) x h", "from this[unfolded extensible_def prod.sel]"], ["proof (chain)\npicking this:\n  \\<exists>g.\n     graph_homomorphism (snd R) C g \\<and>\n     agree_on (fst R) (f\\<^sub>1 O x) g", "obtain g where g:\"graph_homomorphism (snd R) C g\" \"f\\<^sub>1 O x \\<subseteq> g\""], ["proof (prove)\nusing this:\n  \\<exists>g.\n     graph_homomorphism (snd R) C g \\<and>\n     agree_on (fst R) (f\\<^sub>1 O x) g\n\ngoal (1 subgoal):\n 1. (\\<And>g.\n        \\<lbrakk>graph_homomorphism (snd R) C g;\n         f\\<^sub>1 O x \\<subseteq> g\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using agree_iff_subset[OF ih_comp]"], ["proof (prove)\nusing this:\n  \\<exists>g.\n     graph_homomorphism (snd R) C g \\<and>\n     agree_on (fst R) (f\\<^sub>1 O x) g\n  univalent ?g \\<Longrightarrow>\n  agree_on (fst R) (f\\<^sub>1 O x) ?g = (f\\<^sub>1 O x \\<subseteq> ?g)\n\ngoal (1 subgoal):\n 1. (\\<And>g.\n        \\<lbrakk>graph_homomorphism (snd R) C g;\n         f\\<^sub>1 O x \\<subseteq> g\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding graph_homomorphism_def"], ["proof (prove)\nusing this:\n  \\<exists>g.\n     (vertices (snd R) = Domain g \\<and>\n      graph (snd R) \\<and>\n      graph C \\<and>\n      g `` vertices (snd R) \\<subseteq> vertices C \\<and>\n      univalent g \\<and> edge_preserving g (edges (snd R)) (edges C)) \\<and>\n     agree_on (fst R) (f\\<^sub>1 O x) g\n  univalent ?g \\<Longrightarrow>\n  agree_on (fst R) (f\\<^sub>1 O x) ?g = (f\\<^sub>1 O x \\<subseteq> ?g)\n\ngoal (1 subgoal):\n 1. (\\<And>g.\n        \\<lbrakk>vertices (snd R) = Domain g \\<and>\n                 graph (snd R) \\<and>\n                 graph C \\<and>\n                 g `` vertices (snd R) \\<subseteq> vertices C \\<and>\n                 univalent g \\<and>\n                 edge_preserving g (edges (snd R)) (edges C);\n         f\\<^sub>1 O x \\<subseteq> g\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  graph_homomorphism (snd R) C g\n  f\\<^sub>1 O x \\<subseteq> g\n\ngoal (1 subgoal):\n 1. S i \\<noteq> S (Suc i) \\<Longrightarrow>\n    \\<exists>h. graph_homomorphism (S (Suc i)) C h \\<and> agree_on (S i) x h", "from weak_universalD[OF wu g(1) 3(2) g(2)]"], ["proof (chain)\npicking this:\n  \\<exists>h. graph_homomorphism (S (i + 1)) C h \\<and> x \\<subseteq> h", "obtain h where\n          h:\"graph_homomorphism (S (i + 1)) C h\" \"x \\<subseteq> h\""], ["proof (prove)\nusing this:\n  \\<exists>h. graph_homomorphism (S (i + 1)) C h \\<and> x \\<subseteq> h\n\ngoal (1 subgoal):\n 1. (\\<And>h.\n        \\<lbrakk>graph_homomorphism (S (i + 1)) C h;\n         x \\<subseteq> h\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  graph_homomorphism (S (i + 1)) C h\n  x \\<subseteq> h\n\ngoal (1 subgoal):\n 1. S i \\<noteq> S (Suc i) \\<Longrightarrow>\n    \\<exists>h. graph_homomorphism (S (Suc i)) C h \\<and> agree_on (S i) x h", "hence \"agree_on (S i) x h\""], ["proof (prove)\nusing this:\n  graph_homomorphism (S (i + 1)) C h\n  x \\<subseteq> h\n\ngoal (1 subgoal):\n 1. agree_on (S i) x h", "by(subst agree_iff_subset[OF 3(2)], auto simp:graph_homomorphism_def)"], ["proof (state)\nthis:\n  agree_on (S i) x h\n\ngoal (1 subgoal):\n 1. S i \\<noteq> S (Suc i) \\<Longrightarrow>\n    \\<exists>h. graph_homomorphism (S (Suc i)) C h \\<and> agree_on (S i) x h", "then"], ["proof (chain)\npicking this:\n  agree_on (S i) x h", "show ?thesis"], ["proof (prove)\nusing this:\n  agree_on (S i) x h\n\ngoal (1 subgoal):\n 1. \\<exists>h. graph_homomorphism (S (Suc i)) C h \\<and> agree_on (S i) x h", "using h(1)"], ["proof (prove)\nusing this:\n  agree_on (S i) x h\n  graph_homomorphism (S (i + 1)) C h\n\ngoal (1 subgoal):\n 1. \\<exists>h. graph_homomorphism (S (Suc i)) C h \\<and> agree_on (S i) x h", "by auto"], ["proof (state)\nthis:\n  \\<exists>h. graph_homomorphism (S (Suc i)) C h \\<and> agree_on (S i) x h\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>h. graph_homomorphism (S (Suc i)) C h \\<and> agree_on (S i) x h\n\ngoal (2 subgoals):\n 1. \\<And>f. graph_homomorphism (S 0) C f \\<Longrightarrow> chain S\n 2. \\<And>f.\n       graph_homomorphism (S 0) C f \\<Longrightarrow>\n       graph_homomorphism (S 0) C f", "qed auto"], ["proof (state)\nthis:\n  maintained (S 0, chain_sup S) C\n\ngoal (1 subgoal):\n 1. subgraph (S 0) (chain_sup S)", "qed auto"], ["proof (state)\nthis:\n  least t Rs (S 0) (chain_sup S)\n\ngoal (1 subgoal):\n 1. \\<And>S t Rs.\n       \\<lbrakk>chain S;\n        \\<And>i.\n           \\<exists>S'.\n              S' 0 = S i \\<and>\n              chain_sup S' = S (Suc i) \\<and>\n              WPC t Rs S' \\<and> least t Rs (S' 0) (chain_sup S')\\<rbrakk>\n       \\<Longrightarrow> least t Rs (S 0) (chain_sup S)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>S t Rs.\n       \\<lbrakk>chain S;\n        \\<And>i.\n           \\<exists>S'.\n              S' 0 = S i \\<and>\n              chain_sup S' = S (Suc i) \\<and>\n              WPC t Rs S' \\<and> least t Rs (S' 0) (chain_sup S')\\<rbrakk>\n       \\<Longrightarrow> least t Rs (S 0) (chain_sup S)", "case (wpc_combo S t Rs)"], ["proof (state)\nthis:\n  chain S\n  \\<exists>S'.\n     S' 0 = S ?i \\<and>\n     chain_sup S' = S (Suc ?i) \\<and>\n     WPC t Rs S' \\<and> least t Rs (S' 0) (chain_sup S')\n\ngoal (1 subgoal):\n 1. \\<And>S t Rs.\n       \\<lbrakk>chain S;\n        \\<And>i.\n           \\<exists>S'.\n              S' 0 = S i \\<and>\n              chain_sup S' = S (Suc i) \\<and>\n              WPC t Rs S' \\<and> least t Rs (S' 0) (chain_sup S')\\<rbrakk>\n       \\<Longrightarrow> least t Rs (S 0) (chain_sup S)", "hence ps:\"\\<And> i. \\<exists>S'. S' 0 = S i \\<and>\n         chain_sup S' = S (Suc i) \\<and>\n         WPC t Rs S' \\<and>\n         least t Rs (S' 0) (chain_sup S')\"\n    and ch[intro]:\"chain S\""], ["proof (prove)\nusing this:\n  chain S\n  \\<exists>S'.\n     S' 0 = S ?i \\<and>\n     chain_sup S' = S (Suc ?i) \\<and>\n     WPC t Rs S' \\<and> least t Rs (S' 0) (chain_sup S')\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        \\<exists>S'.\n           S' 0 = S i \\<and>\n           chain_sup S' = S (Suc i) \\<and>\n           WPC t Rs S' \\<and> least t Rs (S' 0) (chain_sup S')) &&&\n    chain S", "unfolding Simple_WPC_def"], ["proof (prove)\nusing this:\n  chain S\n  \\<exists>S'.\n     S' 0 = S ?i \\<and>\n     chain_sup S' = S (Suc ?i) \\<and>\n     WPC t Rs S' \\<and> least t Rs (S' 0) (chain_sup S')\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        \\<exists>S'.\n           S' 0 = S i \\<and>\n           chain_sup S' = S (Suc i) \\<and>\n           WPC t Rs S' \\<and> least t Rs (S' 0) (chain_sup S')) &&&\n    chain S", "by auto"], ["proof (state)\nthis:\n  \\<exists>S'.\n     S' 0 = S ?i \\<and>\n     chain_sup S' = S (Suc ?i) \\<and>\n     WPC t Rs S' \\<and> least t Rs (S' 0) (chain_sup S')\n  chain S\n\ngoal (1 subgoal):\n 1. \\<And>S t Rs.\n       \\<lbrakk>chain S;\n        \\<And>i.\n           \\<exists>S'.\n              S' 0 = S i \\<and>\n              chain_sup S' = S (Suc i) \\<and>\n              WPC t Rs S' \\<and> least t Rs (S' 0) (chain_sup S')\\<rbrakk>\n       \\<Longrightarrow> least t Rs (S 0) (chain_sup S)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. least t Rs (S 0) (chain_sup S)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. subgraph (S 0) (chain_sup S)\n 2. \\<And>C.\n       consequence_graph Rs C \\<Longrightarrow>\n       maintained (S 0, chain_sup S) C", "fix C :: \"('a, 'x) labeled_graph\""], ["proof (state)\ngoal (2 subgoals):\n 1. subgraph (S 0) (chain_sup S)\n 2. \\<And>C.\n       consequence_graph Rs C \\<Longrightarrow>\n       maintained (S 0, chain_sup S) C", "assume cgC:\"consequence_graph Rs C\""], ["proof (state)\nthis:\n  consequence_graph Rs C\n\ngoal (2 subgoals):\n 1. subgraph (S 0) (chain_sup S)\n 2. \\<And>C.\n       consequence_graph Rs C \\<Longrightarrow>\n       maintained (S 0, chain_sup S) C", "show \"maintained (S 0, chain_sup S) C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. maintained (S 0, chain_sup S) C", "proof(standard,rule extensible_from_chainI,goal_cases)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>f. graph_homomorphism (S 0) C f \\<Longrightarrow> chain S\n 2. \\<And>f.\n       graph_homomorphism (S 0) C f \\<Longrightarrow>\n       graph_homomorphism (S 0) C f\n 3. \\<And>f fa i.\n       \\<lbrakk>graph_homomorphism (S 0) C f;\n        graph_homomorphism (S i) C fa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>h.\n                            graph_homomorphism (S (Suc i)) C h \\<and>\n                            agree_on (S i) fa h", "case (3 f g i)"], ["proof (state)\nthis:\n  graph_homomorphism (S 0) C f\n  graph_homomorphism (S i) C g\n\ngoal (3 subgoals):\n 1. \\<And>f. graph_homomorphism (S 0) C f \\<Longrightarrow> chain S\n 2. \\<And>f.\n       graph_homomorphism (S 0) C f \\<Longrightarrow>\n       graph_homomorphism (S 0) C f\n 3. \\<And>f fa i.\n       \\<lbrakk>graph_homomorphism (S 0) C f;\n        graph_homomorphism (S i) C fa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>h.\n                            graph_homomorphism (S (Suc i)) C h \\<and>\n                            agree_on (S i) fa h", "from ps[of i]"], ["proof (chain)\npicking this:\n  \\<exists>S'.\n     S' 0 = S i \\<and>\n     chain_sup S' = S (Suc i) \\<and>\n     WPC t Rs S' \\<and> least t Rs (S' 0) (chain_sup S')", "have \"least t Rs (S i) (S (Suc i))\""], ["proof (prove)\nusing this:\n  \\<exists>S'.\n     S' 0 = S i \\<and>\n     chain_sup S' = S (Suc i) \\<and>\n     WPC t Rs S' \\<and> least t Rs (S' 0) (chain_sup S')\n\ngoal (1 subgoal):\n 1. least t Rs (S i) (S (Suc i))", "by auto"], ["proof (state)\nthis:\n  least t Rs (S i) (S (Suc i))\n\ngoal (3 subgoals):\n 1. \\<And>f. graph_homomorphism (S 0) C f \\<Longrightarrow> chain S\n 2. \\<And>f.\n       graph_homomorphism (S 0) C f \\<Longrightarrow>\n       graph_homomorphism (S 0) C f\n 3. \\<And>f fa i.\n       \\<lbrakk>graph_homomorphism (S 0) C f;\n        graph_homomorphism (S i) C fa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>h.\n                            graph_homomorphism (S (Suc i)) C h \\<and>\n                            agree_on (S i) fa h", "with cgC"], ["proof (chain)\npicking this:\n  consequence_graph Rs C\n  least t Rs (S i) (S (Suc i))", "have ss:\"subgraph (S i) (S (Suc i))\" \"maintained (S i, S (Suc i)) C\""], ["proof (prove)\nusing this:\n  consequence_graph Rs C\n  least t Rs (S i) (S (Suc i))\n\ngoal (1 subgoal):\n 1. subgraph (S i) (S (Suc i)) &&& maintained (S i, S (Suc i)) C", "unfolding least_def"], ["proof (prove)\nusing this:\n  consequence_graph Rs C\n  subgraph (S i) (S (Suc i)) \\<and>\n  (\\<forall>C.\n      consequence_graph Rs C \\<longrightarrow>\n      maintained (S i, S (Suc i)) C)\n\ngoal (1 subgoal):\n 1. subgraph (S i) (S (Suc i)) &&& maintained (S i, S (Suc i)) C", "by auto"], ["proof (state)\nthis:\n  subgraph (S i) (S (Suc i))\n  maintained (S i, S (Suc i)) C\n\ngoal (3 subgoals):\n 1. \\<And>f. graph_homomorphism (S 0) C f \\<Longrightarrow> chain S\n 2. \\<And>f.\n       graph_homomorphism (S 0) C f \\<Longrightarrow>\n       graph_homomorphism (S 0) C f\n 3. \\<And>f fa i.\n       \\<lbrakk>graph_homomorphism (S 0) C f;\n        graph_homomorphism (S i) C fa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>h.\n                            graph_homomorphism (S (Suc i)) C h \\<and>\n                            agree_on (S i) fa h", "from ss(2) 3(2)"], ["proof (chain)\npicking this:\n  maintained (S i, S (Suc i)) C\n  graph_homomorphism (S i) C g", "have \"extensible (S i, S (Suc i)) C g\""], ["proof (prove)\nusing this:\n  maintained (S i, S (Suc i)) C\n  graph_homomorphism (S i) C g\n\ngoal (1 subgoal):\n 1. extensible (S i, S (Suc i)) C g", "by auto"], ["proof (state)\nthis:\n  extensible (S i, S (Suc i)) C g\n\ngoal (3 subgoals):\n 1. \\<And>f. graph_homomorphism (S 0) C f \\<Longrightarrow> chain S\n 2. \\<And>f.\n       graph_homomorphism (S 0) C f \\<Longrightarrow>\n       graph_homomorphism (S 0) C f\n 3. \\<And>f fa i.\n       \\<lbrakk>graph_homomorphism (S 0) C f;\n        graph_homomorphism (S i) C fa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>h.\n                            graph_homomorphism (S (Suc i)) C h \\<and>\n                            agree_on (S i) fa h", "thus ?case"], ["proof (prove)\nusing this:\n  extensible (S i, S (Suc i)) C g\n\ngoal (1 subgoal):\n 1. \\<exists>h. graph_homomorphism (S (Suc i)) C h \\<and> agree_on (S i) g h", "unfolding extensible_def prod.sel"], ["proof (prove)\nusing this:\n  \\<exists>ga.\n     graph_homomorphism (S (Suc i)) C ga \\<and> agree_on (S i) g ga\n\ngoal (1 subgoal):\n 1. \\<exists>h. graph_homomorphism (S (Suc i)) C h \\<and> agree_on (S i) g h", "."], ["proof (state)\nthis:\n  \\<exists>h. graph_homomorphism (S (Suc i)) C h \\<and> agree_on (S i) g h\n\ngoal (2 subgoals):\n 1. \\<And>f. graph_homomorphism (S 0) C f \\<Longrightarrow> chain S\n 2. \\<And>f.\n       graph_homomorphism (S 0) C f \\<Longrightarrow>\n       graph_homomorphism (S 0) C f", "qed auto"], ["proof (state)\nthis:\n  maintained (S 0, chain_sup S) C\n\ngoal (1 subgoal):\n 1. subgraph (S 0) (chain_sup S)", "qed auto"], ["proof (state)\nthis:\n  least t Rs (S 0) (chain_sup S)\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>Lemma 4.\\<close>"], ["", "lemma wpc_least_consequence_graph:\n  assumes \"WPC t Rs S\" \"consequence_graph Rs (chain_sup S)\"\n  shows \"least_consequence_graph t Rs (S 0) (chain_sup S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. least_consequence_graph t Rs (S 0) (chain_sup S)", "using wpc_least assms"], ["proof (prove)\nusing this:\n  WPC ?t ?Rs ?S \\<Longrightarrow> least ?t ?Rs (?S 0) (chain_sup ?S)\n  WPC t Rs S\n  consequence_graph Rs (chain_sup S)\n\ngoal (1 subgoal):\n 1. least_consequence_graph t Rs (S 0) (chain_sup S)", "unfolding least_consequence_graph_def"], ["proof (prove)\nusing this:\n  WPC ?t ?Rs ?S \\<Longrightarrow> least ?t ?Rs (?S 0) (chain_sup ?S)\n  WPC t Rs S\n  consequence_graph Rs (chain_sup S)\n\ngoal (1 subgoal):\n 1. consequence_graph Rs (chain_sup S) \\<and> least t Rs (S 0) (chain_sup S)", "by auto"], ["", "end"]]}