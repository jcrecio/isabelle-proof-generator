{"file_name": "/home/qj213/afp-2021-10-22/thys/Graph_Saturation/LabeledGraphSemantics.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Graph_Saturation", "problem_names": ["lemma getRel_dom:\n  assumes \"graph G\"\n  shows \"(a,b) \\<in> getRel l G \\<Longrightarrow> a \\<in> vertices G\"\n        \"(a,b) \\<in> getRel l G \\<Longrightarrow> b \\<in> vertices G\"", "lemma getRel_subgraph[simp]:\n  assumes \"(y, z) \\<in> getRel l G\" \"subgraph G G'\"\n  shows \"(y,z) \\<in> getRel l G'\"", "lemma getRel_homR: (* slows down proofs in the common case *)\n  assumes \"(y, z) \\<in> getRel l G\" \"(y,u) \\<in> f\" \"(z,v) \\<in> f\"\n  shows \"(u, v) \\<in> getRel l (map_graph f G)\"", "lemma getRel_hom[intro]: (* faster proofs in the common case *)\n  assumes \"(y, z) \\<in> getRel l G\" \"y \\<in> vertices G\" \"z \\<in> vertices G\"\n  shows \"(f y, f z) \\<in> getRel l (map_graph_fn G f)\"", "lemma getRel_hom_map[simp]:\n  assumes \"graph G\"\n  shows \"getRel l (map_graph_fn G f) = map_prod f f ` (getRel l G)\"", "lemma sentence_iff[simp]:\n  \"G \\<Turnstile> e\\<^sub>1 \\<sqsubseteq> e\\<^sub>2 = (:G:\\<lbrakk>e\\<^sub>1\\<rbrakk> \\<subseteq> :G:\\<lbrakk>e\\<^sub>2\\<rbrakk>)\" and\n  eq_as_subsets:\n  \"G \\<Turnstile> (e\\<^sub>1, e\\<^sub>2) = (G \\<Turnstile> e\\<^sub>1 \\<sqsubseteq> e\\<^sub>2 \\<and> G \\<Turnstile> e\\<^sub>2 \\<sqsubseteq> e\\<^sub>1)\"", "lemma map_graph_in[intro]:\n  assumes \"graph G\" \"(a,b) \\<in> :G:\\<lbrakk>e\\<rbrakk>\"\n  shows \"(f a,f b) \\<in> :map_graph_fn G f:\\<lbrakk>e\\<rbrakk>\"", "lemma semantics_subset_vertices:\n  assumes \"graph A\" shows \":A:\\<lbrakk>e\\<rbrakk> \\<subseteq> vertices A \\<times> vertices A\"", "lemma semantics_in_vertices:\n  assumes \"graph A\" \"(a,b) \\<in> :A:\\<lbrakk>e\\<rbrakk>\"\n  shows \"a \\<in> vertices A\" \"b \\<in> vertices A\"", "lemma map_graph_semantics[simp]:\n  assumes \"graph A\" and i:\"inj_on f (vertices A)\"\n  shows \":map_graph_fn A f:\\<lbrakk>e\\<rbrakk> = map_prod f f ` (:A:\\<lbrakk>e\\<rbrakk>)\"", "lemma graph_union_semantics:\n  shows \"(:A:\\<lbrakk>e\\<rbrakk>) \\<union> (:B:\\<lbrakk>e\\<rbrakk>) \\<subseteq> :graph_union A B:\\<lbrakk>e\\<rbrakk>\"", "lemma subgraph_semantics:\n  assumes \"subgraph A B\" \"(a,b) \\<in> :A:\\<lbrakk>e\\<rbrakk>\"\n  shows \"(a,b) \\<in> :B:\\<lbrakk>e\\<rbrakk>\"", "lemma graph_homomorphism_semantics:\n  assumes \"graph_homomorphism A B f\" \"(a,b) \\<in> :A:\\<lbrakk>e\\<rbrakk>\" \"(a,a') \\<in> f\" \"(b,b') \\<in> f\"\n  shows \"(a',b') \\<in> :B:\\<lbrakk>e\\<rbrakk>\"", "lemma graph_homomorphism_nonempty:\n  assumes \"graph_homomorphism A B f\" \":A:\\<lbrakk>e\\<rbrakk> \\<noteq> {}\"\n  shows \":B:\\<lbrakk>e\\<rbrakk> \\<noteq> {}\"", "lemma getRel_map_fn[intro]:\n  assumes \"a2 \\<in> vertices G\" \"b2 \\<in> vertices G\" \"(a2,b2) \\<in> getRel l G\"\n          \"f a2 = a\" \"f b2 = b\"\n        shows \"(a,b) \\<in> getRel l (map_graph_fn G f)\""], "translations": [["", "lemma getRel_dom:\n  assumes \"graph G\"\n  shows \"(a,b) \\<in> getRel l G \\<Longrightarrow> a \\<in> vertices G\"\n        \"(a,b) \\<in> getRel l G \\<Longrightarrow> b \\<in> vertices G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((a, b) \\<in> getRel l G \\<Longrightarrow> a \\<in> vertices G) &&&\n    ((a, b) \\<in> getRel l G \\<Longrightarrow> b \\<in> vertices G)", "using assms"], ["proof (prove)\nusing this:\n  graph G\n\ngoal (1 subgoal):\n 1. ((a, b) \\<in> getRel l G \\<Longrightarrow> a \\<in> vertices G) &&&\n    ((a, b) \\<in> getRel l G \\<Longrightarrow> b \\<in> vertices G)", "unfolding getRel_def"], ["proof (prove)\nusing this:\n  graph G\n\ngoal (1 subgoal):\n 1. ((a, b) \\<in> {(x, y). (l, x, y) \\<in> edges G} \\<Longrightarrow>\n     a \\<in> vertices G) &&&\n    ((a, b) \\<in> {(x, y). (l, x, y) \\<in> edges G} \\<Longrightarrow>\n     b \\<in> vertices G)", "by auto"], ["", "lemma getRel_subgraph[simp]:\n  assumes \"(y, z) \\<in> getRel l G\" \"subgraph G G'\"\n  shows \"(y,z) \\<in> getRel l G'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (y, z) \\<in> getRel l G'", "using assms"], ["proof (prove)\nusing this:\n  (y, z) \\<in> getRel l G\n  subgraph G G'\n\ngoal (1 subgoal):\n 1. (y, z) \\<in> getRel l G'", "by (auto simp:getRel_def subgraph_def graph_union_iff)"], ["", "lemma getRel_homR: (* slows down proofs in the common case *)\n  assumes \"(y, z) \\<in> getRel l G\" \"(y,u) \\<in> f\" \"(z,v) \\<in> f\"\n  shows \"(u, v) \\<in> getRel l (map_graph f G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (u, v) \\<in> getRel l (map_graph f G)", "using assms"], ["proof (prove)\nusing this:\n  (y, z) \\<in> getRel l G\n  (y, u) \\<in> f\n  (z, v) \\<in> f\n\ngoal (1 subgoal):\n 1. (u, v) \\<in> getRel l (map_graph f G)", "by (auto simp:getRel_def on_triple_def)"], ["", "lemma getRel_hom[intro]: (* faster proofs in the common case *)\n  assumes \"(y, z) \\<in> getRel l G\" \"y \\<in> vertices G\" \"z \\<in> vertices G\"\n  shows \"(f y, f z) \\<in> getRel l (map_graph_fn G f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (f y, f z) \\<in> getRel l (map_graph_fn G f)", "using assms"], ["proof (prove)\nusing this:\n  (y, z) \\<in> getRel l G\n  y \\<in> vertices G\n  z \\<in> vertices G\n\ngoal (1 subgoal):\n 1. (f y, f z) \\<in> getRel l (map_graph_fn G f)", "by (auto intro!:getRel_homR)"], ["", "lemma getRel_hom_map[simp]:\n  assumes \"graph G\"\n  shows \"getRel l (map_graph_fn G f) = map_prod f f ` (getRel l G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. getRel l (map_graph_fn G f) = map_prod f f ` getRel l G", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. getRel l (map_graph_fn G f) \\<subseteq> map_prod f f ` getRel l G\n 2. map_prod f f ` getRel l G \\<subseteq> getRel l (map_graph_fn G f)", "{"], ["proof (state)\ngoal (2 subgoals):\n 1. getRel l (map_graph_fn G f) \\<subseteq> map_prod f f ` getRel l G\n 2. map_prod f f ` getRel l G \\<subseteq> getRel l (map_graph_fn G f)", "fix x y"], ["proof (state)\ngoal (2 subgoals):\n 1. getRel l (map_graph_fn G f) \\<subseteq> map_prod f f ` getRel l G\n 2. map_prod f f ` getRel l G \\<subseteq> getRel l (map_graph_fn G f)", "assume a:\"(x, y) \\<in> getRel l G\""], ["proof (state)\nthis:\n  (x, y) \\<in> getRel l G\n\ngoal (2 subgoals):\n 1. getRel l (map_graph_fn G f) \\<subseteq> map_prod f f ` getRel l G\n 2. map_prod f f ` getRel l G \\<subseteq> getRel l (map_graph_fn G f)", "hence \"x \\<in> vertices G\" \"y\\<in> vertices G\""], ["proof (prove)\nusing this:\n  (x, y) \\<in> getRel l G\n\ngoal (1 subgoal):\n 1. x \\<in> vertices G &&& y \\<in> vertices G", "using assms"], ["proof (prove)\nusing this:\n  (x, y) \\<in> getRel l G\n  graph G\n\ngoal (1 subgoal):\n 1. x \\<in> vertices G &&& y \\<in> vertices G", "unfolding getRel_def"], ["proof (prove)\nusing this:\n  (x, y) \\<in> {(x, y). (l, x, y) \\<in> edges G}\n  graph G\n\ngoal (1 subgoal):\n 1. x \\<in> vertices G &&& y \\<in> vertices G", "by auto"], ["proof (state)\nthis:\n  x \\<in> vertices G\n  y \\<in> vertices G\n\ngoal (2 subgoals):\n 1. getRel l (map_graph_fn G f) \\<subseteq> map_prod f f ` getRel l G\n 2. map_prod f f ` getRel l G \\<subseteq> getRel l (map_graph_fn G f)", "hence \"(f x, f y) \\<in> getRel l (map_graph_fn G f)\""], ["proof (prove)\nusing this:\n  x \\<in> vertices G\n  y \\<in> vertices G\n\ngoal (1 subgoal):\n 1. (f x, f y) \\<in> getRel l (map_graph_fn G f)", "using a"], ["proof (prove)\nusing this:\n  x \\<in> vertices G\n  y \\<in> vertices G\n  (x, y) \\<in> getRel l G\n\ngoal (1 subgoal):\n 1. (f x, f y) \\<in> getRel l (map_graph_fn G f)", "by auto"], ["proof (state)\nthis:\n  (f x, f y) \\<in> getRel l (map_graph_fn G f)\n\ngoal (2 subgoals):\n 1. getRel l (map_graph_fn G f) \\<subseteq> map_prod f f ` getRel l G\n 2. map_prod f f ` getRel l G \\<subseteq> getRel l (map_graph_fn G f)", "}"], ["proof (state)\nthis:\n  (?x2, ?y2) \\<in> getRel l G \\<Longrightarrow>\n  (f ?x2, f ?y2) \\<in> getRel l (map_graph_fn G f)\n\ngoal (2 subgoals):\n 1. getRel l (map_graph_fn G f) \\<subseteq> map_prod f f ` getRel l G\n 2. map_prod f f ` getRel l G \\<subseteq> getRel l (map_graph_fn G f)", "then"], ["proof (chain)\npicking this:\n  (?x2, ?y2) \\<in> getRel l G \\<Longrightarrow>\n  (f ?x2, f ?y2) \\<in> getRel l (map_graph_fn G f)", "show \"map_prod f f ` getRel l G \\<subseteq> getRel l (map_graph_fn G f)\""], ["proof (prove)\nusing this:\n  (?x2, ?y2) \\<in> getRel l G \\<Longrightarrow>\n  (f ?x2, f ?y2) \\<in> getRel l (map_graph_fn G f)\n\ngoal (1 subgoal):\n 1. map_prod f f ` getRel l G \\<subseteq> getRel l (map_graph_fn G f)", "by auto"], ["proof (state)\nthis:\n  map_prod f f ` getRel l G \\<subseteq> getRel l (map_graph_fn G f)\n\ngoal (1 subgoal):\n 1. getRel l (map_graph_fn G f) \\<subseteq> map_prod f f ` getRel l G", "qed (cases G,auto simp:getRel_def)"], ["", "text \\<open>The thing called term in the paper is called @{term alligorical_term} here.\n      This naming is chosen because an allegory has precisely these operations, plus identity. \\<close>"], ["", "(* Deviating from the paper in having a constant constructor.\n   We'll use that constructor for top, bottom, etc.. *)"], ["", "datatype 'v allegorical_term\n = A_Int \"'v allegorical_term\" \"'v allegorical_term\"\n | A_Cmp \"'v allegorical_term\" \"'v allegorical_term\"\n | A_Cnv \"'v allegorical_term\"\n | A_Lbl (a_lbl : 'v)"], ["", "text \\<open>The interpretation of terms, Definition 2.\\<close>"], ["", "fun semantics where\n\"semantics G (A_Int a b) = semantics G a \\<inter> semantics G b\" |\n\"semantics G (A_Cmp a b) = semantics G a O semantics G b\" |\n\"semantics G (A_Cnv a) = converse (semantics G a)\" |\n\"semantics G (A_Lbl l) = getRel l G\""], ["", "notation semantics (\":_:\\<lbrakk>_\\<rbrakk>\" 55)"], ["", "type_synonym 'v sentence = \"'v allegorical_term \\<times> 'v allegorical_term\""], ["", "datatype 'v Standard_Constant = S_Top | S_Bot | S_Idt | S_Const 'v"], ["", "text \\<open>Definition 3. We don't define sentences but instead simply work with pairs of terms.\\<close>"], ["", "abbreviation holds where\n\"holds G S \\<equiv> :G:\\<lbrakk>fst S\\<rbrakk> = :G:\\<lbrakk>snd S\\<rbrakk>\""], ["", "notation holds (infix \"\\<Turnstile>\" 55)"], ["", "abbreviation subset_sentence where\n\"subset_sentence A B \\<equiv> (A,A_Int A B)\""], ["", "notation subset_sentence (infix \"\\<sqsubseteq>\" 60)"], ["", "text \\<open>Lemma 1.\\<close>"], ["", "lemma sentence_iff[simp]:\n  \"G \\<Turnstile> e\\<^sub>1 \\<sqsubseteq> e\\<^sub>2 = (:G:\\<lbrakk>e\\<^sub>1\\<rbrakk> \\<subseteq> :G:\\<lbrakk>e\\<^sub>2\\<rbrakk>)\" and\n  eq_as_subsets:\n  \"G \\<Turnstile> (e\\<^sub>1, e\\<^sub>2) = (G \\<Turnstile> e\\<^sub>1 \\<sqsubseteq> e\\<^sub>2 \\<and> G \\<Turnstile> e\\<^sub>2 \\<sqsubseteq> e\\<^sub>1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G \\<Turnstile> e\\<^sub>1 \\<sqsubseteq> e\\<^sub>2 =\n    (:G:\\<lbrakk>e\\<^sub>1\\<rbrakk>\n     \\<subseteq> :G:\\<lbrakk>e\\<^sub>2\\<rbrakk>) &&&\n    G \\<Turnstile> (e\\<^sub>1, e\\<^sub>2) =\n    (G \\<Turnstile> e\\<^sub>1 \\<sqsubseteq> e\\<^sub>2 \\<and>\n     G \\<Turnstile> e\\<^sub>2 \\<sqsubseteq> e\\<^sub>1)", "by auto"], ["", "lemma map_graph_in[intro]:\n  assumes \"graph G\" \"(a,b) \\<in> :G:\\<lbrakk>e\\<rbrakk>\"\n  shows \"(f a,f b) \\<in> :map_graph_fn G f:\\<lbrakk>e\\<rbrakk>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (f a, f b) \\<in> :map_graph_fn G f:\\<lbrakk>e\\<rbrakk>", "using assms"], ["proof (prove)\nusing this:\n  graph G\n  (a, b) \\<in> :G:\\<lbrakk>e\\<rbrakk>\n\ngoal (1 subgoal):\n 1. (f a, f b) \\<in> :map_graph_fn G f:\\<lbrakk>e\\<rbrakk>", "by(induct e arbitrary: a b,auto intro!:relcompI)"], ["", "lemma semantics_subset_vertices:\n  assumes \"graph A\" shows \":A:\\<lbrakk>e\\<rbrakk> \\<subseteq> vertices A \\<times> vertices A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. :A:\\<lbrakk>e\\<rbrakk> \\<subseteq> vertices A \\<times> vertices A", "using assms"], ["proof (prove)\nusing this:\n  graph A\n\ngoal (1 subgoal):\n 1. :A:\\<lbrakk>e\\<rbrakk> \\<subseteq> vertices A \\<times> vertices A", "by(induct e,auto simp:getRel_def)"], ["", "lemma semantics_in_vertices:\n  assumes \"graph A\" \"(a,b) \\<in> :A:\\<lbrakk>e\\<rbrakk>\"\n  shows \"a \\<in> vertices A\" \"b \\<in> vertices A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<in> vertices A &&& b \\<in> vertices A", "using assms"], ["proof (prove)\nusing this:\n  graph A\n  (a, b) \\<in> :A:\\<lbrakk>e\\<rbrakk>\n\ngoal (1 subgoal):\n 1. a \\<in> vertices A &&& b \\<in> vertices A", "by(induct e arbitrary:a b,auto simp:getRel_def)"], ["", "lemma map_graph_semantics[simp]:\n  assumes \"graph A\" and i:\"inj_on f (vertices A)\"\n  shows \":map_graph_fn A f:\\<lbrakk>e\\<rbrakk> = map_prod f f ` (:A:\\<lbrakk>e\\<rbrakk>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. :map_graph_fn A f:\\<lbrakk>e\\<rbrakk> =\n    map_prod f f ` (:A:\\<lbrakk>e\\<rbrakk>)", "proof(induct e)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>e1 e2.\n       \\<lbrakk>:map_graph_fn A f:\\<lbrakk>e1\\<rbrakk> =\n                map_prod f f ` (:A:\\<lbrakk>e1\\<rbrakk>);\n        :map_graph_fn A f:\\<lbrakk>e2\\<rbrakk> =\n        map_prod f f ` (:A:\\<lbrakk>e2\\<rbrakk>)\\<rbrakk>\n       \\<Longrightarrow> :map_graph_fn A f:\\<lbrakk>A_Int e1 e2\\<rbrakk> =\n                         map_prod f f ` (:A:\\<lbrakk>A_Int e1 e2\\<rbrakk>)\n 2. \\<And>e1 e2.\n       \\<lbrakk>:map_graph_fn A f:\\<lbrakk>e1\\<rbrakk> =\n                map_prod f f ` (:A:\\<lbrakk>e1\\<rbrakk>);\n        :map_graph_fn A f:\\<lbrakk>e2\\<rbrakk> =\n        map_prod f f ` (:A:\\<lbrakk>e2\\<rbrakk>)\\<rbrakk>\n       \\<Longrightarrow> :map_graph_fn A f:\\<lbrakk>A_Cmp e1 e2\\<rbrakk> =\n                         map_prod f f ` (:A:\\<lbrakk>A_Cmp e1 e2\\<rbrakk>)\n 3. \\<And>e.\n       :map_graph_fn A f:\\<lbrakk>e\\<rbrakk> =\n       map_prod f f ` (:A:\\<lbrakk>e\\<rbrakk>) \\<Longrightarrow>\n       :map_graph_fn A f:\\<lbrakk>A_Cnv e\\<rbrakk> =\n       map_prod f f ` (:A:\\<lbrakk>A_Cnv e\\<rbrakk>)\n 4. \\<And>x.\n       :map_graph_fn A f:\\<lbrakk>A_Lbl x\\<rbrakk> =\n       map_prod f f ` (:A:\\<lbrakk>A_Lbl x\\<rbrakk>)", "have io:\"inj_on (map_prod f f) (vertices A \\<times> vertices A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_on (map_prod f f) (vertices A \\<times> vertices A)", "using i"], ["proof (prove)\nusing this:\n  inj_on f (vertices A)\n\ngoal (1 subgoal):\n 1. inj_on (map_prod f f) (vertices A \\<times> vertices A)", "unfolding inj_on_def"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>vertices A.\n     \\<forall>y\\<in>vertices A. f x = f y \\<longrightarrow> x = y\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>vertices A \\<times> vertices A.\n       \\<forall>y\\<in>vertices A \\<times> vertices A.\n          map_prod f f x = map_prod f f y \\<longrightarrow> x = y", "by simp"], ["proof (state)\nthis:\n  inj_on (map_prod f f) (vertices A \\<times> vertices A)\n\ngoal (4 subgoals):\n 1. \\<And>e1 e2.\n       \\<lbrakk>:map_graph_fn A f:\\<lbrakk>e1\\<rbrakk> =\n                map_prod f f ` (:A:\\<lbrakk>e1\\<rbrakk>);\n        :map_graph_fn A f:\\<lbrakk>e2\\<rbrakk> =\n        map_prod f f ` (:A:\\<lbrakk>e2\\<rbrakk>)\\<rbrakk>\n       \\<Longrightarrow> :map_graph_fn A f:\\<lbrakk>A_Int e1 e2\\<rbrakk> =\n                         map_prod f f ` (:A:\\<lbrakk>A_Int e1 e2\\<rbrakk>)\n 2. \\<And>e1 e2.\n       \\<lbrakk>:map_graph_fn A f:\\<lbrakk>e1\\<rbrakk> =\n                map_prod f f ` (:A:\\<lbrakk>e1\\<rbrakk>);\n        :map_graph_fn A f:\\<lbrakk>e2\\<rbrakk> =\n        map_prod f f ` (:A:\\<lbrakk>e2\\<rbrakk>)\\<rbrakk>\n       \\<Longrightarrow> :map_graph_fn A f:\\<lbrakk>A_Cmp e1 e2\\<rbrakk> =\n                         map_prod f f ` (:A:\\<lbrakk>A_Cmp e1 e2\\<rbrakk>)\n 3. \\<And>e.\n       :map_graph_fn A f:\\<lbrakk>e\\<rbrakk> =\n       map_prod f f ` (:A:\\<lbrakk>e\\<rbrakk>) \\<Longrightarrow>\n       :map_graph_fn A f:\\<lbrakk>A_Cnv e\\<rbrakk> =\n       map_prod f f ` (:A:\\<lbrakk>A_Cnv e\\<rbrakk>)\n 4. \\<And>x.\n       :map_graph_fn A f:\\<lbrakk>A_Lbl x\\<rbrakk> =\n       map_prod f f ` (:A:\\<lbrakk>A_Lbl x\\<rbrakk>)", "note s = semantics_subset_vertices[OF assms(1)]"], ["proof (state)\nthis:\n  :A:\\<lbrakk>?e\\<rbrakk> \\<subseteq> vertices A \\<times> vertices A\n\ngoal (4 subgoals):\n 1. \\<And>e1 e2.\n       \\<lbrakk>:map_graph_fn A f:\\<lbrakk>e1\\<rbrakk> =\n                map_prod f f ` (:A:\\<lbrakk>e1\\<rbrakk>);\n        :map_graph_fn A f:\\<lbrakk>e2\\<rbrakk> =\n        map_prod f f ` (:A:\\<lbrakk>e2\\<rbrakk>)\\<rbrakk>\n       \\<Longrightarrow> :map_graph_fn A f:\\<lbrakk>A_Int e1 e2\\<rbrakk> =\n                         map_prod f f ` (:A:\\<lbrakk>A_Int e1 e2\\<rbrakk>)\n 2. \\<And>e1 e2.\n       \\<lbrakk>:map_graph_fn A f:\\<lbrakk>e1\\<rbrakk> =\n                map_prod f f ` (:A:\\<lbrakk>e1\\<rbrakk>);\n        :map_graph_fn A f:\\<lbrakk>e2\\<rbrakk> =\n        map_prod f f ` (:A:\\<lbrakk>e2\\<rbrakk>)\\<rbrakk>\n       \\<Longrightarrow> :map_graph_fn A f:\\<lbrakk>A_Cmp e1 e2\\<rbrakk> =\n                         map_prod f f ` (:A:\\<lbrakk>A_Cmp e1 e2\\<rbrakk>)\n 3. \\<And>e.\n       :map_graph_fn A f:\\<lbrakk>e\\<rbrakk> =\n       map_prod f f ` (:A:\\<lbrakk>e\\<rbrakk>) \\<Longrightarrow>\n       :map_graph_fn A f:\\<lbrakk>A_Cnv e\\<rbrakk> =\n       map_prod f f ` (:A:\\<lbrakk>A_Cnv e\\<rbrakk>)\n 4. \\<And>x.\n       :map_graph_fn A f:\\<lbrakk>A_Lbl x\\<rbrakk> =\n       map_prod f f ` (:A:\\<lbrakk>A_Lbl x\\<rbrakk>)", "case (A_Int e1 e2)"], ["proof (state)\nthis:\n  :map_graph_fn A f:\\<lbrakk>e1\\<rbrakk> =\n  map_prod f f ` (:A:\\<lbrakk>e1\\<rbrakk>)\n  :map_graph_fn A f:\\<lbrakk>e2\\<rbrakk> =\n  map_prod f f ` (:A:\\<lbrakk>e2\\<rbrakk>)\n\ngoal (4 subgoals):\n 1. \\<And>e1 e2.\n       \\<lbrakk>:map_graph_fn A f:\\<lbrakk>e1\\<rbrakk> =\n                map_prod f f ` (:A:\\<lbrakk>e1\\<rbrakk>);\n        :map_graph_fn A f:\\<lbrakk>e2\\<rbrakk> =\n        map_prod f f ` (:A:\\<lbrakk>e2\\<rbrakk>)\\<rbrakk>\n       \\<Longrightarrow> :map_graph_fn A f:\\<lbrakk>A_Int e1 e2\\<rbrakk> =\n                         map_prod f f ` (:A:\\<lbrakk>A_Int e1 e2\\<rbrakk>)\n 2. \\<And>e1 e2.\n       \\<lbrakk>:map_graph_fn A f:\\<lbrakk>e1\\<rbrakk> =\n                map_prod f f ` (:A:\\<lbrakk>e1\\<rbrakk>);\n        :map_graph_fn A f:\\<lbrakk>e2\\<rbrakk> =\n        map_prod f f ` (:A:\\<lbrakk>e2\\<rbrakk>)\\<rbrakk>\n       \\<Longrightarrow> :map_graph_fn A f:\\<lbrakk>A_Cmp e1 e2\\<rbrakk> =\n                         map_prod f f ` (:A:\\<lbrakk>A_Cmp e1 e2\\<rbrakk>)\n 3. \\<And>e.\n       :map_graph_fn A f:\\<lbrakk>e\\<rbrakk> =\n       map_prod f f ` (:A:\\<lbrakk>e\\<rbrakk>) \\<Longrightarrow>\n       :map_graph_fn A f:\\<lbrakk>A_Cnv e\\<rbrakk> =\n       map_prod f f ` (:A:\\<lbrakk>A_Cnv e\\<rbrakk>)\n 4. \\<And>x.\n       :map_graph_fn A f:\\<lbrakk>A_Lbl x\\<rbrakk> =\n       map_prod f f ` (:A:\\<lbrakk>A_Lbl x\\<rbrakk>)", "thus ?case"], ["proof (prove)\nusing this:\n  :map_graph_fn A f:\\<lbrakk>e1\\<rbrakk> =\n  map_prod f f ` (:A:\\<lbrakk>e1\\<rbrakk>)\n  :map_graph_fn A f:\\<lbrakk>e2\\<rbrakk> =\n  map_prod f f ` (:A:\\<lbrakk>e2\\<rbrakk>)\n\ngoal (1 subgoal):\n 1. :map_graph_fn A f:\\<lbrakk>A_Int e1 e2\\<rbrakk> =\n    map_prod f f ` (:A:\\<lbrakk>A_Int e1 e2\\<rbrakk>)", "by (auto simp:inj_on_image_Int[OF io s s])"], ["proof (state)\nthis:\n  :map_graph_fn A f:\\<lbrakk>A_Int e1 e2\\<rbrakk> =\n  map_prod f f ` (:A:\\<lbrakk>A_Int e1 e2\\<rbrakk>)\n\ngoal (3 subgoals):\n 1. \\<And>e1 e2.\n       \\<lbrakk>:map_graph_fn A f:\\<lbrakk>e1\\<rbrakk> =\n                map_prod f f ` (:A:\\<lbrakk>e1\\<rbrakk>);\n        :map_graph_fn A f:\\<lbrakk>e2\\<rbrakk> =\n        map_prod f f ` (:A:\\<lbrakk>e2\\<rbrakk>)\\<rbrakk>\n       \\<Longrightarrow> :map_graph_fn A f:\\<lbrakk>A_Cmp e1 e2\\<rbrakk> =\n                         map_prod f f ` (:A:\\<lbrakk>A_Cmp e1 e2\\<rbrakk>)\n 2. \\<And>e.\n       :map_graph_fn A f:\\<lbrakk>e\\<rbrakk> =\n       map_prod f f ` (:A:\\<lbrakk>e\\<rbrakk>) \\<Longrightarrow>\n       :map_graph_fn A f:\\<lbrakk>A_Cnv e\\<rbrakk> =\n       map_prod f f ` (:A:\\<lbrakk>A_Cnv e\\<rbrakk>)\n 3. \\<And>x.\n       :map_graph_fn A f:\\<lbrakk>A_Lbl x\\<rbrakk> =\n       map_prod f f ` (:A:\\<lbrakk>A_Lbl x\\<rbrakk>)", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>e1 e2.\n       \\<lbrakk>:map_graph_fn A f:\\<lbrakk>e1\\<rbrakk> =\n                map_prod f f ` (:A:\\<lbrakk>e1\\<rbrakk>);\n        :map_graph_fn A f:\\<lbrakk>e2\\<rbrakk> =\n        map_prod f f ` (:A:\\<lbrakk>e2\\<rbrakk>)\\<rbrakk>\n       \\<Longrightarrow> :map_graph_fn A f:\\<lbrakk>A_Cmp e1 e2\\<rbrakk> =\n                         map_prod f f ` (:A:\\<lbrakk>A_Cmp e1 e2\\<rbrakk>)\n 2. \\<And>e.\n       :map_graph_fn A f:\\<lbrakk>e\\<rbrakk> =\n       map_prod f f ` (:A:\\<lbrakk>e\\<rbrakk>) \\<Longrightarrow>\n       :map_graph_fn A f:\\<lbrakk>A_Cnv e\\<rbrakk> =\n       map_prod f f ` (:A:\\<lbrakk>A_Cnv e\\<rbrakk>)\n 3. \\<And>x.\n       :map_graph_fn A f:\\<lbrakk>A_Lbl x\\<rbrakk> =\n       map_prod f f ` (:A:\\<lbrakk>A_Lbl x\\<rbrakk>)", "case (A_Cmp e1 e2)"], ["proof (state)\nthis:\n  :map_graph_fn A f:\\<lbrakk>e1\\<rbrakk> =\n  map_prod f f ` (:A:\\<lbrakk>e1\\<rbrakk>)\n  :map_graph_fn A f:\\<lbrakk>e2\\<rbrakk> =\n  map_prod f f ` (:A:\\<lbrakk>e2\\<rbrakk>)\n\ngoal (3 subgoals):\n 1. \\<And>e1 e2.\n       \\<lbrakk>:map_graph_fn A f:\\<lbrakk>e1\\<rbrakk> =\n                map_prod f f ` (:A:\\<lbrakk>e1\\<rbrakk>);\n        :map_graph_fn A f:\\<lbrakk>e2\\<rbrakk> =\n        map_prod f f ` (:A:\\<lbrakk>e2\\<rbrakk>)\\<rbrakk>\n       \\<Longrightarrow> :map_graph_fn A f:\\<lbrakk>A_Cmp e1 e2\\<rbrakk> =\n                         map_prod f f ` (:A:\\<lbrakk>A_Cmp e1 e2\\<rbrakk>)\n 2. \\<And>e.\n       :map_graph_fn A f:\\<lbrakk>e\\<rbrakk> =\n       map_prod f f ` (:A:\\<lbrakk>e\\<rbrakk>) \\<Longrightarrow>\n       :map_graph_fn A f:\\<lbrakk>A_Cnv e\\<rbrakk> =\n       map_prod f f ` (:A:\\<lbrakk>A_Cnv e\\<rbrakk>)\n 3. \\<And>x.\n       :map_graph_fn A f:\\<lbrakk>A_Lbl x\\<rbrakk> =\n       map_prod f f ` (:A:\\<lbrakk>A_Lbl x\\<rbrakk>)", "{"], ["proof (state)\nthis:\n  :map_graph_fn A f:\\<lbrakk>e1\\<rbrakk> =\n  map_prod f f ` (:A:\\<lbrakk>e1\\<rbrakk>)\n  :map_graph_fn A f:\\<lbrakk>e2\\<rbrakk> =\n  map_prod f f ` (:A:\\<lbrakk>e2\\<rbrakk>)\n\ngoal (3 subgoals):\n 1. \\<And>e1 e2.\n       \\<lbrakk>:map_graph_fn A f:\\<lbrakk>e1\\<rbrakk> =\n                map_prod f f ` (:A:\\<lbrakk>e1\\<rbrakk>);\n        :map_graph_fn A f:\\<lbrakk>e2\\<rbrakk> =\n        map_prod f f ` (:A:\\<lbrakk>e2\\<rbrakk>)\\<rbrakk>\n       \\<Longrightarrow> :map_graph_fn A f:\\<lbrakk>A_Cmp e1 e2\\<rbrakk> =\n                         map_prod f f ` (:A:\\<lbrakk>A_Cmp e1 e2\\<rbrakk>)\n 2. \\<And>e.\n       :map_graph_fn A f:\\<lbrakk>e\\<rbrakk> =\n       map_prod f f ` (:A:\\<lbrakk>e\\<rbrakk>) \\<Longrightarrow>\n       :map_graph_fn A f:\\<lbrakk>A_Cnv e\\<rbrakk> =\n       map_prod f f ` (:A:\\<lbrakk>A_Cnv e\\<rbrakk>)\n 3. \\<And>x.\n       :map_graph_fn A f:\\<lbrakk>A_Lbl x\\<rbrakk> =\n       map_prod f f ` (:A:\\<lbrakk>A_Lbl x\\<rbrakk>)", "fix xa ya xb yb"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>e1 e2.\n       \\<lbrakk>:map_graph_fn A f:\\<lbrakk>e1\\<rbrakk> =\n                map_prod f f ` (:A:\\<lbrakk>e1\\<rbrakk>);\n        :map_graph_fn A f:\\<lbrakk>e2\\<rbrakk> =\n        map_prod f f ` (:A:\\<lbrakk>e2\\<rbrakk>)\\<rbrakk>\n       \\<Longrightarrow> :map_graph_fn A f:\\<lbrakk>A_Cmp e1 e2\\<rbrakk> =\n                         map_prod f f ` (:A:\\<lbrakk>A_Cmp e1 e2\\<rbrakk>)\n 2. \\<And>e.\n       :map_graph_fn A f:\\<lbrakk>e\\<rbrakk> =\n       map_prod f f ` (:A:\\<lbrakk>e\\<rbrakk>) \\<Longrightarrow>\n       :map_graph_fn A f:\\<lbrakk>A_Cnv e\\<rbrakk> =\n       map_prod f f ` (:A:\\<lbrakk>A_Cnv e\\<rbrakk>)\n 3. \\<And>x.\n       :map_graph_fn A f:\\<lbrakk>A_Lbl x\\<rbrakk> =\n       map_prod f f ` (:A:\\<lbrakk>A_Lbl x\\<rbrakk>)", "assume \"(xa, ya) \\<in> :A:\\<lbrakk>e1\\<rbrakk>\" \"(xb, yb) \\<in> :A:\\<lbrakk>e2\\<rbrakk>\" \"f ya = f xb\""], ["proof (state)\nthis:\n  (xa, ya) \\<in> :A:\\<lbrakk>e1\\<rbrakk>\n  (xb, yb) \\<in> :A:\\<lbrakk>e2\\<rbrakk>\n  f ya = f xb\n\ngoal (3 subgoals):\n 1. \\<And>e1 e2.\n       \\<lbrakk>:map_graph_fn A f:\\<lbrakk>e1\\<rbrakk> =\n                map_prod f f ` (:A:\\<lbrakk>e1\\<rbrakk>);\n        :map_graph_fn A f:\\<lbrakk>e2\\<rbrakk> =\n        map_prod f f ` (:A:\\<lbrakk>e2\\<rbrakk>)\\<rbrakk>\n       \\<Longrightarrow> :map_graph_fn A f:\\<lbrakk>A_Cmp e1 e2\\<rbrakk> =\n                         map_prod f f ` (:A:\\<lbrakk>A_Cmp e1 e2\\<rbrakk>)\n 2. \\<And>e.\n       :map_graph_fn A f:\\<lbrakk>e\\<rbrakk> =\n       map_prod f f ` (:A:\\<lbrakk>e\\<rbrakk>) \\<Longrightarrow>\n       :map_graph_fn A f:\\<lbrakk>A_Cnv e\\<rbrakk> =\n       map_prod f f ` (:A:\\<lbrakk>A_Cnv e\\<rbrakk>)\n 3. \\<And>x.\n       :map_graph_fn A f:\\<lbrakk>A_Lbl x\\<rbrakk> =\n       map_prod f f ` (:A:\\<lbrakk>A_Lbl x\\<rbrakk>)", "moreover"], ["proof (state)\nthis:\n  (xa, ya) \\<in> :A:\\<lbrakk>e1\\<rbrakk>\n  (xb, yb) \\<in> :A:\\<lbrakk>e2\\<rbrakk>\n  f ya = f xb\n\ngoal (3 subgoals):\n 1. \\<And>e1 e2.\n       \\<lbrakk>:map_graph_fn A f:\\<lbrakk>e1\\<rbrakk> =\n                map_prod f f ` (:A:\\<lbrakk>e1\\<rbrakk>);\n        :map_graph_fn A f:\\<lbrakk>e2\\<rbrakk> =\n        map_prod f f ` (:A:\\<lbrakk>e2\\<rbrakk>)\\<rbrakk>\n       \\<Longrightarrow> :map_graph_fn A f:\\<lbrakk>A_Cmp e1 e2\\<rbrakk> =\n                         map_prod f f ` (:A:\\<lbrakk>A_Cmp e1 e2\\<rbrakk>)\n 2. \\<And>e.\n       :map_graph_fn A f:\\<lbrakk>e\\<rbrakk> =\n       map_prod f f ` (:A:\\<lbrakk>e\\<rbrakk>) \\<Longrightarrow>\n       :map_graph_fn A f:\\<lbrakk>A_Cnv e\\<rbrakk> =\n       map_prod f f ` (:A:\\<lbrakk>A_Cnv e\\<rbrakk>)\n 3. \\<And>x.\n       :map_graph_fn A f:\\<lbrakk>A_Lbl x\\<rbrakk> =\n       map_prod f f ` (:A:\\<lbrakk>A_Lbl x\\<rbrakk>)", "hence \"ya = xb\""], ["proof (prove)\nusing this:\n  (xa, ya) \\<in> :A:\\<lbrakk>e1\\<rbrakk>\n  (xb, yb) \\<in> :A:\\<lbrakk>e2\\<rbrakk>\n  f ya = f xb\n\ngoal (1 subgoal):\n 1. ya = xb", "using i[unfolded inj_on_def] semantics_in_vertices[OF assms(1)]"], ["proof (prove)\nusing this:\n  (xa, ya) \\<in> :A:\\<lbrakk>e1\\<rbrakk>\n  (xb, yb) \\<in> :A:\\<lbrakk>e2\\<rbrakk>\n  f ya = f xb\n  \\<forall>x\\<in>vertices A.\n     \\<forall>y\\<in>vertices A. f x = f y \\<longrightarrow> x = y\n  (?a, ?b) \\<in> :A:\\<lbrakk>?e\\<rbrakk> \\<Longrightarrow>\n  ?a \\<in> vertices A\n  (?a, ?b) \\<in> :A:\\<lbrakk>?e\\<rbrakk> \\<Longrightarrow>\n  ?b \\<in> vertices A\n\ngoal (1 subgoal):\n 1. ya = xb", "by auto"], ["proof (state)\nthis:\n  ya = xb\n\ngoal (3 subgoals):\n 1. \\<And>e1 e2.\n       \\<lbrakk>:map_graph_fn A f:\\<lbrakk>e1\\<rbrakk> =\n                map_prod f f ` (:A:\\<lbrakk>e1\\<rbrakk>);\n        :map_graph_fn A f:\\<lbrakk>e2\\<rbrakk> =\n        map_prod f f ` (:A:\\<lbrakk>e2\\<rbrakk>)\\<rbrakk>\n       \\<Longrightarrow> :map_graph_fn A f:\\<lbrakk>A_Cmp e1 e2\\<rbrakk> =\n                         map_prod f f ` (:A:\\<lbrakk>A_Cmp e1 e2\\<rbrakk>)\n 2. \\<And>e.\n       :map_graph_fn A f:\\<lbrakk>e\\<rbrakk> =\n       map_prod f f ` (:A:\\<lbrakk>e\\<rbrakk>) \\<Longrightarrow>\n       :map_graph_fn A f:\\<lbrakk>A_Cnv e\\<rbrakk> =\n       map_prod f f ` (:A:\\<lbrakk>A_Cnv e\\<rbrakk>)\n 3. \\<And>x.\n       :map_graph_fn A f:\\<lbrakk>A_Lbl x\\<rbrakk> =\n       map_prod f f ` (:A:\\<lbrakk>A_Lbl x\\<rbrakk>)", "ultimately"], ["proof (chain)\npicking this:\n  (xa, ya) \\<in> :A:\\<lbrakk>e1\\<rbrakk>\n  (xb, yb) \\<in> :A:\\<lbrakk>e2\\<rbrakk>\n  f ya = f xb\n  ya = xb", "have \"(f xa, f yb) \\<in> map_prod f f ` ((:A:\\<lbrakk>e1\\<rbrakk>) O (:A:\\<lbrakk>e2\\<rbrakk>))\""], ["proof (prove)\nusing this:\n  (xa, ya) \\<in> :A:\\<lbrakk>e1\\<rbrakk>\n  (xb, yb) \\<in> :A:\\<lbrakk>e2\\<rbrakk>\n  f ya = f xb\n  ya = xb\n\ngoal (1 subgoal):\n 1. (f xa, f yb)\n    \\<in> map_prod f f `\n          ((:A:\\<lbrakk>e1\\<rbrakk>) O (:A:\\<lbrakk>e2\\<rbrakk>))", "by auto"], ["proof (state)\nthis:\n  (f xa, f yb)\n  \\<in> map_prod f f `\n        ((:A:\\<lbrakk>e1\\<rbrakk>) O (:A:\\<lbrakk>e2\\<rbrakk>))\n\ngoal (3 subgoals):\n 1. \\<And>e1 e2.\n       \\<lbrakk>:map_graph_fn A f:\\<lbrakk>e1\\<rbrakk> =\n                map_prod f f ` (:A:\\<lbrakk>e1\\<rbrakk>);\n        :map_graph_fn A f:\\<lbrakk>e2\\<rbrakk> =\n        map_prod f f ` (:A:\\<lbrakk>e2\\<rbrakk>)\\<rbrakk>\n       \\<Longrightarrow> :map_graph_fn A f:\\<lbrakk>A_Cmp e1 e2\\<rbrakk> =\n                         map_prod f f ` (:A:\\<lbrakk>A_Cmp e1 e2\\<rbrakk>)\n 2. \\<And>e.\n       :map_graph_fn A f:\\<lbrakk>e\\<rbrakk> =\n       map_prod f f ` (:A:\\<lbrakk>e\\<rbrakk>) \\<Longrightarrow>\n       :map_graph_fn A f:\\<lbrakk>A_Cnv e\\<rbrakk> =\n       map_prod f f ` (:A:\\<lbrakk>A_Cnv e\\<rbrakk>)\n 3. \\<And>x.\n       :map_graph_fn A f:\\<lbrakk>A_Lbl x\\<rbrakk> =\n       map_prod f f ` (:A:\\<lbrakk>A_Lbl x\\<rbrakk>)", "}"], ["proof (state)\nthis:\n  \\<lbrakk>(?xa2, ?ya2) \\<in> :A:\\<lbrakk>e1\\<rbrakk>;\n   (?xb2, ?yb2) \\<in> :A:\\<lbrakk>e2\\<rbrakk>; f ?ya2 = f ?xb2\\<rbrakk>\n  \\<Longrightarrow> (f ?xa2, f ?yb2)\n                    \\<in> map_prod f f `\n                          ((:A:\\<lbrakk>e1\\<rbrakk>) O\n                           (:A:\\<lbrakk>e2\\<rbrakk>))\n\ngoal (3 subgoals):\n 1. \\<And>e1 e2.\n       \\<lbrakk>:map_graph_fn A f:\\<lbrakk>e1\\<rbrakk> =\n                map_prod f f ` (:A:\\<lbrakk>e1\\<rbrakk>);\n        :map_graph_fn A f:\\<lbrakk>e2\\<rbrakk> =\n        map_prod f f ` (:A:\\<lbrakk>e2\\<rbrakk>)\\<rbrakk>\n       \\<Longrightarrow> :map_graph_fn A f:\\<lbrakk>A_Cmp e1 e2\\<rbrakk> =\n                         map_prod f f ` (:A:\\<lbrakk>A_Cmp e1 e2\\<rbrakk>)\n 2. \\<And>e.\n       :map_graph_fn A f:\\<lbrakk>e\\<rbrakk> =\n       map_prod f f ` (:A:\\<lbrakk>e\\<rbrakk>) \\<Longrightarrow>\n       :map_graph_fn A f:\\<lbrakk>A_Cnv e\\<rbrakk> =\n       map_prod f f ` (:A:\\<lbrakk>A_Cnv e\\<rbrakk>)\n 3. \\<And>x.\n       :map_graph_fn A f:\\<lbrakk>A_Lbl x\\<rbrakk> =\n       map_prod f f ` (:A:\\<lbrakk>A_Lbl x\\<rbrakk>)", "with A_Cmp"], ["proof (chain)\npicking this:\n  :map_graph_fn A f:\\<lbrakk>e1\\<rbrakk> =\n  map_prod f f ` (:A:\\<lbrakk>e1\\<rbrakk>)\n  :map_graph_fn A f:\\<lbrakk>e2\\<rbrakk> =\n  map_prod f f ` (:A:\\<lbrakk>e2\\<rbrakk>)\n  \\<lbrakk>(?xa2, ?ya2) \\<in> :A:\\<lbrakk>e1\\<rbrakk>;\n   (?xb2, ?yb2) \\<in> :A:\\<lbrakk>e2\\<rbrakk>; f ?ya2 = f ?xb2\\<rbrakk>\n  \\<Longrightarrow> (f ?xa2, f ?yb2)\n                    \\<in> map_prod f f `\n                          ((:A:\\<lbrakk>e1\\<rbrakk>) O\n                           (:A:\\<lbrakk>e2\\<rbrakk>))", "show ?case"], ["proof (prove)\nusing this:\n  :map_graph_fn A f:\\<lbrakk>e1\\<rbrakk> =\n  map_prod f f ` (:A:\\<lbrakk>e1\\<rbrakk>)\n  :map_graph_fn A f:\\<lbrakk>e2\\<rbrakk> =\n  map_prod f f ` (:A:\\<lbrakk>e2\\<rbrakk>)\n  \\<lbrakk>(?xa2, ?ya2) \\<in> :A:\\<lbrakk>e1\\<rbrakk>;\n   (?xb2, ?yb2) \\<in> :A:\\<lbrakk>e2\\<rbrakk>; f ?ya2 = f ?xb2\\<rbrakk>\n  \\<Longrightarrow> (f ?xa2, f ?yb2)\n                    \\<in> map_prod f f `\n                          ((:A:\\<lbrakk>e1\\<rbrakk>) O\n                           (:A:\\<lbrakk>e2\\<rbrakk>))\n\ngoal (1 subgoal):\n 1. :map_graph_fn A f:\\<lbrakk>A_Cmp e1 e2\\<rbrakk> =\n    map_prod f f ` (:A:\\<lbrakk>A_Cmp e1 e2\\<rbrakk>)", "by auto"], ["proof (state)\nthis:\n  :map_graph_fn A f:\\<lbrakk>A_Cmp e1 e2\\<rbrakk> =\n  map_prod f f ` (:A:\\<lbrakk>A_Cmp e1 e2\\<rbrakk>)\n\ngoal (2 subgoals):\n 1. \\<And>e.\n       :map_graph_fn A f:\\<lbrakk>e\\<rbrakk> =\n       map_prod f f ` (:A:\\<lbrakk>e\\<rbrakk>) \\<Longrightarrow>\n       :map_graph_fn A f:\\<lbrakk>A_Cnv e\\<rbrakk> =\n       map_prod f f ` (:A:\\<lbrakk>A_Cnv e\\<rbrakk>)\n 2. \\<And>x.\n       :map_graph_fn A f:\\<lbrakk>A_Lbl x\\<rbrakk> =\n       map_prod f f ` (:A:\\<lbrakk>A_Lbl x\\<rbrakk>)", "qed (insert assms,auto)"], ["", "lemma graph_union_semantics:\n  shows \"(:A:\\<lbrakk>e\\<rbrakk>) \\<union> (:B:\\<lbrakk>e\\<rbrakk>) \\<subseteq> :graph_union A B:\\<lbrakk>e\\<rbrakk>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (:A:\\<lbrakk>e\\<rbrakk>) \\<union> (:B:\\<lbrakk>e\\<rbrakk>)\n    \\<subseteq> :graph_union A B:\\<lbrakk>e\\<rbrakk>", "by(induct e,auto simp:getRel_def)"], ["", "lemma subgraph_semantics:\n  assumes \"subgraph A B\" \"(a,b) \\<in> :A:\\<lbrakk>e\\<rbrakk>\"\n  shows \"(a,b) \\<in> :B:\\<lbrakk>e\\<rbrakk>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (a, b) \\<in> :B:\\<lbrakk>e\\<rbrakk>", "using assms"], ["proof (prove)\nusing this:\n  subgraph A B\n  (a, b) \\<in> :A:\\<lbrakk>e\\<rbrakk>\n\ngoal (1 subgoal):\n 1. (a, b) \\<in> :B:\\<lbrakk>e\\<rbrakk>", "by(induct e arbitrary: a b,auto intro!:relcompI)"], ["", "lemma graph_homomorphism_semantics:\n  assumes \"graph_homomorphism A B f\" \"(a,b) \\<in> :A:\\<lbrakk>e\\<rbrakk>\" \"(a,a') \\<in> f\" \"(b,b') \\<in> f\"\n  shows \"(a',b') \\<in> :B:\\<lbrakk>e\\<rbrakk>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (a', b') \\<in> :B:\\<lbrakk>e\\<rbrakk>", "using assms"], ["proof (prove)\nusing this:\n  graph_homomorphism A B f\n  (a, b) \\<in> :A:\\<lbrakk>e\\<rbrakk>\n  (a, a') \\<in> f\n  (b, b') \\<in> f\n\ngoal (1 subgoal):\n 1. (a', b') \\<in> :B:\\<lbrakk>e\\<rbrakk>", "proof(induct e arbitrary: a b a' b')"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>e1 e2 a b a' b'.\n       \\<lbrakk>\\<And>a b a' b'.\n                   \\<lbrakk>graph_homomorphism A B f;\n                    (a, b) \\<in> :A:\\<lbrakk>e1\\<rbrakk>; (a, a') \\<in> f;\n                    (b, b') \\<in> f\\<rbrakk>\n                   \\<Longrightarrow> (a', b') \\<in> :B:\\<lbrakk>e1\\<rbrakk>;\n        \\<And>a b a' b'.\n           \\<lbrakk>graph_homomorphism A B f;\n            (a, b) \\<in> :A:\\<lbrakk>e2\\<rbrakk>; (a, a') \\<in> f;\n            (b, b') \\<in> f\\<rbrakk>\n           \\<Longrightarrow> (a', b') \\<in> :B:\\<lbrakk>e2\\<rbrakk>;\n        graph_homomorphism A B f;\n        (a, b) \\<in> :A:\\<lbrakk>A_Int e1 e2\\<rbrakk>; (a, a') \\<in> f;\n        (b, b') \\<in> f\\<rbrakk>\n       \\<Longrightarrow> (a', b') \\<in> :B:\\<lbrakk>A_Int e1 e2\\<rbrakk>\n 2. \\<And>e1 e2 a b a' b'.\n       \\<lbrakk>\\<And>a b a' b'.\n                   \\<lbrakk>graph_homomorphism A B f;\n                    (a, b) \\<in> :A:\\<lbrakk>e1\\<rbrakk>; (a, a') \\<in> f;\n                    (b, b') \\<in> f\\<rbrakk>\n                   \\<Longrightarrow> (a', b') \\<in> :B:\\<lbrakk>e1\\<rbrakk>;\n        \\<And>a b a' b'.\n           \\<lbrakk>graph_homomorphism A B f;\n            (a, b) \\<in> :A:\\<lbrakk>e2\\<rbrakk>; (a, a') \\<in> f;\n            (b, b') \\<in> f\\<rbrakk>\n           \\<Longrightarrow> (a', b') \\<in> :B:\\<lbrakk>e2\\<rbrakk>;\n        graph_homomorphism A B f;\n        (a, b) \\<in> :A:\\<lbrakk>A_Cmp e1 e2\\<rbrakk>; (a, a') \\<in> f;\n        (b, b') \\<in> f\\<rbrakk>\n       \\<Longrightarrow> (a', b') \\<in> :B:\\<lbrakk>A_Cmp e1 e2\\<rbrakk>\n 3. \\<And>e a b a' b'.\n       \\<lbrakk>\\<And>a b a' b'.\n                   \\<lbrakk>graph_homomorphism A B f;\n                    (a, b) \\<in> :A:\\<lbrakk>e\\<rbrakk>; (a, a') \\<in> f;\n                    (b, b') \\<in> f\\<rbrakk>\n                   \\<Longrightarrow> (a', b') \\<in> :B:\\<lbrakk>e\\<rbrakk>;\n        graph_homomorphism A B f; (a, b) \\<in> :A:\\<lbrakk>A_Cnv e\\<rbrakk>;\n        (a, a') \\<in> f; (b, b') \\<in> f\\<rbrakk>\n       \\<Longrightarrow> (a', b') \\<in> :B:\\<lbrakk>A_Cnv e\\<rbrakk>\n 4. \\<And>x a b a' b'.\n       \\<lbrakk>graph_homomorphism A B f;\n        (a, b) \\<in> :A:\\<lbrakk>A_Lbl x\\<rbrakk>; (a, a') \\<in> f;\n        (b, b') \\<in> f\\<rbrakk>\n       \\<Longrightarrow> (a', b') \\<in> :B:\\<lbrakk>A_Lbl x\\<rbrakk>", "have g:\"graph A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. graph A", "using assms"], ["proof (prove)\nusing this:\n  graph_homomorphism A B f\n  (a, b) \\<in> :A:\\<lbrakk>e\\<rbrakk>\n  (a, a') \\<in> f\n  (b, b') \\<in> f\n\ngoal (1 subgoal):\n 1. graph A", "unfolding graph_homomorphism_def2"], ["proof (prove)\nusing this:\n  vertices A = Domain f \\<and>\n  univalent f \\<and>\n  graph A \\<and> graph B \\<and> graph_union (map_graph f A) B = B\n  (a, b) \\<in> :A:\\<lbrakk>e\\<rbrakk>\n  (a, a') \\<in> f\n  (b, b') \\<in> f\n\ngoal (1 subgoal):\n 1. graph A", "by auto"], ["proof (state)\nthis:\n  graph A\n\ngoal (4 subgoals):\n 1. \\<And>e1 e2 a b a' b'.\n       \\<lbrakk>\\<And>a b a' b'.\n                   \\<lbrakk>graph_homomorphism A B f;\n                    (a, b) \\<in> :A:\\<lbrakk>e1\\<rbrakk>; (a, a') \\<in> f;\n                    (b, b') \\<in> f\\<rbrakk>\n                   \\<Longrightarrow> (a', b') \\<in> :B:\\<lbrakk>e1\\<rbrakk>;\n        \\<And>a b a' b'.\n           \\<lbrakk>graph_homomorphism A B f;\n            (a, b) \\<in> :A:\\<lbrakk>e2\\<rbrakk>; (a, a') \\<in> f;\n            (b, b') \\<in> f\\<rbrakk>\n           \\<Longrightarrow> (a', b') \\<in> :B:\\<lbrakk>e2\\<rbrakk>;\n        graph_homomorphism A B f;\n        (a, b) \\<in> :A:\\<lbrakk>A_Int e1 e2\\<rbrakk>; (a, a') \\<in> f;\n        (b, b') \\<in> f\\<rbrakk>\n       \\<Longrightarrow> (a', b') \\<in> :B:\\<lbrakk>A_Int e1 e2\\<rbrakk>\n 2. \\<And>e1 e2 a b a' b'.\n       \\<lbrakk>\\<And>a b a' b'.\n                   \\<lbrakk>graph_homomorphism A B f;\n                    (a, b) \\<in> :A:\\<lbrakk>e1\\<rbrakk>; (a, a') \\<in> f;\n                    (b, b') \\<in> f\\<rbrakk>\n                   \\<Longrightarrow> (a', b') \\<in> :B:\\<lbrakk>e1\\<rbrakk>;\n        \\<And>a b a' b'.\n           \\<lbrakk>graph_homomorphism A B f;\n            (a, b) \\<in> :A:\\<lbrakk>e2\\<rbrakk>; (a, a') \\<in> f;\n            (b, b') \\<in> f\\<rbrakk>\n           \\<Longrightarrow> (a', b') \\<in> :B:\\<lbrakk>e2\\<rbrakk>;\n        graph_homomorphism A B f;\n        (a, b) \\<in> :A:\\<lbrakk>A_Cmp e1 e2\\<rbrakk>; (a, a') \\<in> f;\n        (b, b') \\<in> f\\<rbrakk>\n       \\<Longrightarrow> (a', b') \\<in> :B:\\<lbrakk>A_Cmp e1 e2\\<rbrakk>\n 3. \\<And>e a b a' b'.\n       \\<lbrakk>\\<And>a b a' b'.\n                   \\<lbrakk>graph_homomorphism A B f;\n                    (a, b) \\<in> :A:\\<lbrakk>e\\<rbrakk>; (a, a') \\<in> f;\n                    (b, b') \\<in> f\\<rbrakk>\n                   \\<Longrightarrow> (a', b') \\<in> :B:\\<lbrakk>e\\<rbrakk>;\n        graph_homomorphism A B f; (a, b) \\<in> :A:\\<lbrakk>A_Cnv e\\<rbrakk>;\n        (a, a') \\<in> f; (b, b') \\<in> f\\<rbrakk>\n       \\<Longrightarrow> (a', b') \\<in> :B:\\<lbrakk>A_Cnv e\\<rbrakk>\n 4. \\<And>x a b a' b'.\n       \\<lbrakk>graph_homomorphism A B f;\n        (a, b) \\<in> :A:\\<lbrakk>A_Lbl x\\<rbrakk>; (a, a') \\<in> f;\n        (b, b') \\<in> f\\<rbrakk>\n       \\<Longrightarrow> (a', b') \\<in> :B:\\<lbrakk>A_Lbl x\\<rbrakk>", "case (A_Cmp e1 e2)"], ["proof (state)\nthis:\n  \\<lbrakk>graph_homomorphism A B f; (?a, ?b) \\<in> :A:\\<lbrakk>e1\\<rbrakk>;\n   (?a, ?a') \\<in> f; (?b, ?b') \\<in> f\\<rbrakk>\n  \\<Longrightarrow> (?a', ?b') \\<in> :B:\\<lbrakk>e1\\<rbrakk>\n  \\<lbrakk>graph_homomorphism A B f; (?a, ?b) \\<in> :A:\\<lbrakk>e2\\<rbrakk>;\n   (?a, ?a') \\<in> f; (?b, ?b') \\<in> f\\<rbrakk>\n  \\<Longrightarrow> (?a', ?b') \\<in> :B:\\<lbrakk>e2\\<rbrakk>\n  graph_homomorphism A B f\n  (a, b) \\<in> :A:\\<lbrakk>A_Cmp e1 e2\\<rbrakk>\n  (a, a') \\<in> f\n  (b, b') \\<in> f\n\ngoal (4 subgoals):\n 1. \\<And>e1 e2 a b a' b'.\n       \\<lbrakk>\\<And>a b a' b'.\n                   \\<lbrakk>graph_homomorphism A B f;\n                    (a, b) \\<in> :A:\\<lbrakk>e1\\<rbrakk>; (a, a') \\<in> f;\n                    (b, b') \\<in> f\\<rbrakk>\n                   \\<Longrightarrow> (a', b') \\<in> :B:\\<lbrakk>e1\\<rbrakk>;\n        \\<And>a b a' b'.\n           \\<lbrakk>graph_homomorphism A B f;\n            (a, b) \\<in> :A:\\<lbrakk>e2\\<rbrakk>; (a, a') \\<in> f;\n            (b, b') \\<in> f\\<rbrakk>\n           \\<Longrightarrow> (a', b') \\<in> :B:\\<lbrakk>e2\\<rbrakk>;\n        graph_homomorphism A B f;\n        (a, b) \\<in> :A:\\<lbrakk>A_Int e1 e2\\<rbrakk>; (a, a') \\<in> f;\n        (b, b') \\<in> f\\<rbrakk>\n       \\<Longrightarrow> (a', b') \\<in> :B:\\<lbrakk>A_Int e1 e2\\<rbrakk>\n 2. \\<And>e1 e2 a b a' b'.\n       \\<lbrakk>\\<And>a b a' b'.\n                   \\<lbrakk>graph_homomorphism A B f;\n                    (a, b) \\<in> :A:\\<lbrakk>e1\\<rbrakk>; (a, a') \\<in> f;\n                    (b, b') \\<in> f\\<rbrakk>\n                   \\<Longrightarrow> (a', b') \\<in> :B:\\<lbrakk>e1\\<rbrakk>;\n        \\<And>a b a' b'.\n           \\<lbrakk>graph_homomorphism A B f;\n            (a, b) \\<in> :A:\\<lbrakk>e2\\<rbrakk>; (a, a') \\<in> f;\n            (b, b') \\<in> f\\<rbrakk>\n           \\<Longrightarrow> (a', b') \\<in> :B:\\<lbrakk>e2\\<rbrakk>;\n        graph_homomorphism A B f;\n        (a, b) \\<in> :A:\\<lbrakk>A_Cmp e1 e2\\<rbrakk>; (a, a') \\<in> f;\n        (b, b') \\<in> f\\<rbrakk>\n       \\<Longrightarrow> (a', b') \\<in> :B:\\<lbrakk>A_Cmp e1 e2\\<rbrakk>\n 3. \\<And>e a b a' b'.\n       \\<lbrakk>\\<And>a b a' b'.\n                   \\<lbrakk>graph_homomorphism A B f;\n                    (a, b) \\<in> :A:\\<lbrakk>e\\<rbrakk>; (a, a') \\<in> f;\n                    (b, b') \\<in> f\\<rbrakk>\n                   \\<Longrightarrow> (a', b') \\<in> :B:\\<lbrakk>e\\<rbrakk>;\n        graph_homomorphism A B f; (a, b) \\<in> :A:\\<lbrakk>A_Cnv e\\<rbrakk>;\n        (a, a') \\<in> f; (b, b') \\<in> f\\<rbrakk>\n       \\<Longrightarrow> (a', b') \\<in> :B:\\<lbrakk>A_Cnv e\\<rbrakk>\n 4. \\<And>x a b a' b'.\n       \\<lbrakk>graph_homomorphism A B f;\n        (a, b) \\<in> :A:\\<lbrakk>A_Lbl x\\<rbrakk>; (a, a') \\<in> f;\n        (b, b') \\<in> f\\<rbrakk>\n       \\<Longrightarrow> (a', b') \\<in> :B:\\<lbrakk>A_Lbl x\\<rbrakk>", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>graph_homomorphism A B f; (?a, ?b) \\<in> :A:\\<lbrakk>e1\\<rbrakk>;\n   (?a, ?a') \\<in> f; (?b, ?b') \\<in> f\\<rbrakk>\n  \\<Longrightarrow> (?a', ?b') \\<in> :B:\\<lbrakk>e1\\<rbrakk>\n  \\<lbrakk>graph_homomorphism A B f; (?a, ?b) \\<in> :A:\\<lbrakk>e2\\<rbrakk>;\n   (?a, ?a') \\<in> f; (?b, ?b') \\<in> f\\<rbrakk>\n  \\<Longrightarrow> (?a', ?b') \\<in> :B:\\<lbrakk>e2\\<rbrakk>\n  graph_homomorphism A B f\n  (a, b) \\<in> :A:\\<lbrakk>A_Cmp e1 e2\\<rbrakk>\n  (a, a') \\<in> f\n  (b, b') \\<in> f", "obtain y where y:\"(a, y) \\<in> :A:\\<lbrakk>e1\\<rbrakk>\" \"(y, b) \\<in> :A:\\<lbrakk>e2\\<rbrakk>\""], ["proof (prove)\nusing this:\n  \\<lbrakk>graph_homomorphism A B f; (?a, ?b) \\<in> :A:\\<lbrakk>e1\\<rbrakk>;\n   (?a, ?a') \\<in> f; (?b, ?b') \\<in> f\\<rbrakk>\n  \\<Longrightarrow> (?a', ?b') \\<in> :B:\\<lbrakk>e1\\<rbrakk>\n  \\<lbrakk>graph_homomorphism A B f; (?a, ?b) \\<in> :A:\\<lbrakk>e2\\<rbrakk>;\n   (?a, ?a') \\<in> f; (?b, ?b') \\<in> f\\<rbrakk>\n  \\<Longrightarrow> (?a', ?b') \\<in> :B:\\<lbrakk>e2\\<rbrakk>\n  graph_homomorphism A B f\n  (a, b) \\<in> :A:\\<lbrakk>A_Cmp e1 e2\\<rbrakk>\n  (a, a') \\<in> f\n  (b, b') \\<in> f\n\ngoal (1 subgoal):\n 1. (\\<And>y.\n        \\<lbrakk>(a, y) \\<in> :A:\\<lbrakk>e1\\<rbrakk>;\n         (y, b) \\<in> :A:\\<lbrakk>e2\\<rbrakk>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  (a, y) \\<in> :A:\\<lbrakk>e1\\<rbrakk>\n  (y, b) \\<in> :A:\\<lbrakk>e2\\<rbrakk>\n\ngoal (4 subgoals):\n 1. \\<And>e1 e2 a b a' b'.\n       \\<lbrakk>\\<And>a b a' b'.\n                   \\<lbrakk>graph_homomorphism A B f;\n                    (a, b) \\<in> :A:\\<lbrakk>e1\\<rbrakk>; (a, a') \\<in> f;\n                    (b, b') \\<in> f\\<rbrakk>\n                   \\<Longrightarrow> (a', b') \\<in> :B:\\<lbrakk>e1\\<rbrakk>;\n        \\<And>a b a' b'.\n           \\<lbrakk>graph_homomorphism A B f;\n            (a, b) \\<in> :A:\\<lbrakk>e2\\<rbrakk>; (a, a') \\<in> f;\n            (b, b') \\<in> f\\<rbrakk>\n           \\<Longrightarrow> (a', b') \\<in> :B:\\<lbrakk>e2\\<rbrakk>;\n        graph_homomorphism A B f;\n        (a, b) \\<in> :A:\\<lbrakk>A_Int e1 e2\\<rbrakk>; (a, a') \\<in> f;\n        (b, b') \\<in> f\\<rbrakk>\n       \\<Longrightarrow> (a', b') \\<in> :B:\\<lbrakk>A_Int e1 e2\\<rbrakk>\n 2. \\<And>e1 e2 a b a' b'.\n       \\<lbrakk>\\<And>a b a' b'.\n                   \\<lbrakk>graph_homomorphism A B f;\n                    (a, b) \\<in> :A:\\<lbrakk>e1\\<rbrakk>; (a, a') \\<in> f;\n                    (b, b') \\<in> f\\<rbrakk>\n                   \\<Longrightarrow> (a', b') \\<in> :B:\\<lbrakk>e1\\<rbrakk>;\n        \\<And>a b a' b'.\n           \\<lbrakk>graph_homomorphism A B f;\n            (a, b) \\<in> :A:\\<lbrakk>e2\\<rbrakk>; (a, a') \\<in> f;\n            (b, b') \\<in> f\\<rbrakk>\n           \\<Longrightarrow> (a', b') \\<in> :B:\\<lbrakk>e2\\<rbrakk>;\n        graph_homomorphism A B f;\n        (a, b) \\<in> :A:\\<lbrakk>A_Cmp e1 e2\\<rbrakk>; (a, a') \\<in> f;\n        (b, b') \\<in> f\\<rbrakk>\n       \\<Longrightarrow> (a', b') \\<in> :B:\\<lbrakk>A_Cmp e1 e2\\<rbrakk>\n 3. \\<And>e a b a' b'.\n       \\<lbrakk>\\<And>a b a' b'.\n                   \\<lbrakk>graph_homomorphism A B f;\n                    (a, b) \\<in> :A:\\<lbrakk>e\\<rbrakk>; (a, a') \\<in> f;\n                    (b, b') \\<in> f\\<rbrakk>\n                   \\<Longrightarrow> (a', b') \\<in> :B:\\<lbrakk>e\\<rbrakk>;\n        graph_homomorphism A B f; (a, b) \\<in> :A:\\<lbrakk>A_Cnv e\\<rbrakk>;\n        (a, a') \\<in> f; (b, b') \\<in> f\\<rbrakk>\n       \\<Longrightarrow> (a', b') \\<in> :B:\\<lbrakk>A_Cnv e\\<rbrakk>\n 4. \\<And>x a b a' b'.\n       \\<lbrakk>graph_homomorphism A B f;\n        (a, b) \\<in> :A:\\<lbrakk>A_Lbl x\\<rbrakk>; (a, a') \\<in> f;\n        (b, b') \\<in> f\\<rbrakk>\n       \\<Longrightarrow> (a', b') \\<in> :B:\\<lbrakk>A_Lbl x\\<rbrakk>", "hence \"y\\<in>vertices A\""], ["proof (prove)\nusing this:\n  (a, y) \\<in> :A:\\<lbrakk>e1\\<rbrakk>\n  (y, b) \\<in> :A:\\<lbrakk>e2\\<rbrakk>\n\ngoal (1 subgoal):\n 1. y \\<in> vertices A", "using semantics_in_vertices[OF g]"], ["proof (prove)\nusing this:\n  (a, y) \\<in> :A:\\<lbrakk>e1\\<rbrakk>\n  (y, b) \\<in> :A:\\<lbrakk>e2\\<rbrakk>\n  (?a, ?b) \\<in> :A:\\<lbrakk>?e\\<rbrakk> \\<Longrightarrow>\n  ?a \\<in> vertices A\n  (?a, ?b) \\<in> :A:\\<lbrakk>?e\\<rbrakk> \\<Longrightarrow>\n  ?b \\<in> vertices A\n\ngoal (1 subgoal):\n 1. y \\<in> vertices A", "by auto"], ["proof (state)\nthis:\n  y \\<in> vertices A\n\ngoal (4 subgoals):\n 1. \\<And>e1 e2 a b a' b'.\n       \\<lbrakk>\\<And>a b a' b'.\n                   \\<lbrakk>graph_homomorphism A B f;\n                    (a, b) \\<in> :A:\\<lbrakk>e1\\<rbrakk>; (a, a') \\<in> f;\n                    (b, b') \\<in> f\\<rbrakk>\n                   \\<Longrightarrow> (a', b') \\<in> :B:\\<lbrakk>e1\\<rbrakk>;\n        \\<And>a b a' b'.\n           \\<lbrakk>graph_homomorphism A B f;\n            (a, b) \\<in> :A:\\<lbrakk>e2\\<rbrakk>; (a, a') \\<in> f;\n            (b, b') \\<in> f\\<rbrakk>\n           \\<Longrightarrow> (a', b') \\<in> :B:\\<lbrakk>e2\\<rbrakk>;\n        graph_homomorphism A B f;\n        (a, b) \\<in> :A:\\<lbrakk>A_Int e1 e2\\<rbrakk>; (a, a') \\<in> f;\n        (b, b') \\<in> f\\<rbrakk>\n       \\<Longrightarrow> (a', b') \\<in> :B:\\<lbrakk>A_Int e1 e2\\<rbrakk>\n 2. \\<And>e1 e2 a b a' b'.\n       \\<lbrakk>\\<And>a b a' b'.\n                   \\<lbrakk>graph_homomorphism A B f;\n                    (a, b) \\<in> :A:\\<lbrakk>e1\\<rbrakk>; (a, a') \\<in> f;\n                    (b, b') \\<in> f\\<rbrakk>\n                   \\<Longrightarrow> (a', b') \\<in> :B:\\<lbrakk>e1\\<rbrakk>;\n        \\<And>a b a' b'.\n           \\<lbrakk>graph_homomorphism A B f;\n            (a, b) \\<in> :A:\\<lbrakk>e2\\<rbrakk>; (a, a') \\<in> f;\n            (b, b') \\<in> f\\<rbrakk>\n           \\<Longrightarrow> (a', b') \\<in> :B:\\<lbrakk>e2\\<rbrakk>;\n        graph_homomorphism A B f;\n        (a, b) \\<in> :A:\\<lbrakk>A_Cmp e1 e2\\<rbrakk>; (a, a') \\<in> f;\n        (b, b') \\<in> f\\<rbrakk>\n       \\<Longrightarrow> (a', b') \\<in> :B:\\<lbrakk>A_Cmp e1 e2\\<rbrakk>\n 3. \\<And>e a b a' b'.\n       \\<lbrakk>\\<And>a b a' b'.\n                   \\<lbrakk>graph_homomorphism A B f;\n                    (a, b) \\<in> :A:\\<lbrakk>e\\<rbrakk>; (a, a') \\<in> f;\n                    (b, b') \\<in> f\\<rbrakk>\n                   \\<Longrightarrow> (a', b') \\<in> :B:\\<lbrakk>e\\<rbrakk>;\n        graph_homomorphism A B f; (a, b) \\<in> :A:\\<lbrakk>A_Cnv e\\<rbrakk>;\n        (a, a') \\<in> f; (b, b') \\<in> f\\<rbrakk>\n       \\<Longrightarrow> (a', b') \\<in> :B:\\<lbrakk>A_Cnv e\\<rbrakk>\n 4. \\<And>x a b a' b'.\n       \\<lbrakk>graph_homomorphism A B f;\n        (a, b) \\<in> :A:\\<lbrakk>A_Lbl x\\<rbrakk>; (a, a') \\<in> f;\n        (b, b') \\<in> f\\<rbrakk>\n       \\<Longrightarrow> (a', b') \\<in> :B:\\<lbrakk>A_Lbl x\\<rbrakk>", "with A_Cmp"], ["proof (chain)\npicking this:\n  \\<lbrakk>graph_homomorphism A B f; (?a, ?b) \\<in> :A:\\<lbrakk>e1\\<rbrakk>;\n   (?a, ?a') \\<in> f; (?b, ?b') \\<in> f\\<rbrakk>\n  \\<Longrightarrow> (?a', ?b') \\<in> :B:\\<lbrakk>e1\\<rbrakk>\n  \\<lbrakk>graph_homomorphism A B f; (?a, ?b) \\<in> :A:\\<lbrakk>e2\\<rbrakk>;\n   (?a, ?a') \\<in> f; (?b, ?b') \\<in> f\\<rbrakk>\n  \\<Longrightarrow> (?a', ?b') \\<in> :B:\\<lbrakk>e2\\<rbrakk>\n  graph_homomorphism A B f\n  (a, b) \\<in> :A:\\<lbrakk>A_Cmp e1 e2\\<rbrakk>\n  (a, a') \\<in> f\n  (b, b') \\<in> f\n  y \\<in> vertices A", "obtain y' where \"(y,y') \\<in> f\""], ["proof (prove)\nusing this:\n  \\<lbrakk>graph_homomorphism A B f; (?a, ?b) \\<in> :A:\\<lbrakk>e1\\<rbrakk>;\n   (?a, ?a') \\<in> f; (?b, ?b') \\<in> f\\<rbrakk>\n  \\<Longrightarrow> (?a', ?b') \\<in> :B:\\<lbrakk>e1\\<rbrakk>\n  \\<lbrakk>graph_homomorphism A B f; (?a, ?b) \\<in> :A:\\<lbrakk>e2\\<rbrakk>;\n   (?a, ?a') \\<in> f; (?b, ?b') \\<in> f\\<rbrakk>\n  \\<Longrightarrow> (?a', ?b') \\<in> :B:\\<lbrakk>e2\\<rbrakk>\n  graph_homomorphism A B f\n  (a, b) \\<in> :A:\\<lbrakk>A_Cmp e1 e2\\<rbrakk>\n  (a, a') \\<in> f\n  (b, b') \\<in> f\n  y \\<in> vertices A\n\ngoal (1 subgoal):\n 1. (\\<And>y'. (y, y') \\<in> f \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding graph_homomorphism_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>vertices A = Domain f \\<and>\n           graph A \\<and>\n           graph B \\<and>\n           f `` vertices A \\<subseteq> vertices B \\<and>\n           univalent f \\<and> edge_preserving f (edges A) (edges B);\n   (?a, ?b) \\<in> :A:\\<lbrakk>e1\\<rbrakk>; (?a, ?a') \\<in> f;\n   (?b, ?b') \\<in> f\\<rbrakk>\n  \\<Longrightarrow> (?a', ?b') \\<in> :B:\\<lbrakk>e1\\<rbrakk>\n  \\<lbrakk>vertices A = Domain f \\<and>\n           graph A \\<and>\n           graph B \\<and>\n           f `` vertices A \\<subseteq> vertices B \\<and>\n           univalent f \\<and> edge_preserving f (edges A) (edges B);\n   (?a, ?b) \\<in> :A:\\<lbrakk>e2\\<rbrakk>; (?a, ?a') \\<in> f;\n   (?b, ?b') \\<in> f\\<rbrakk>\n  \\<Longrightarrow> (?a', ?b') \\<in> :B:\\<lbrakk>e2\\<rbrakk>\n  vertices A = Domain f \\<and>\n  graph A \\<and>\n  graph B \\<and>\n  f `` vertices A \\<subseteq> vertices B \\<and>\n  univalent f \\<and> edge_preserving f (edges A) (edges B)\n  (a, b) \\<in> :A:\\<lbrakk>A_Cmp e1 e2\\<rbrakk>\n  (a, a') \\<in> f\n  (b, b') \\<in> f\n  y \\<in> vertices A\n\ngoal (1 subgoal):\n 1. (\\<And>y'. (y, y') \\<in> f \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  (y, y') \\<in> f\n\ngoal (4 subgoals):\n 1. \\<And>e1 e2 a b a' b'.\n       \\<lbrakk>\\<And>a b a' b'.\n                   \\<lbrakk>graph_homomorphism A B f;\n                    (a, b) \\<in> :A:\\<lbrakk>e1\\<rbrakk>; (a, a') \\<in> f;\n                    (b, b') \\<in> f\\<rbrakk>\n                   \\<Longrightarrow> (a', b') \\<in> :B:\\<lbrakk>e1\\<rbrakk>;\n        \\<And>a b a' b'.\n           \\<lbrakk>graph_homomorphism A B f;\n            (a, b) \\<in> :A:\\<lbrakk>e2\\<rbrakk>; (a, a') \\<in> f;\n            (b, b') \\<in> f\\<rbrakk>\n           \\<Longrightarrow> (a', b') \\<in> :B:\\<lbrakk>e2\\<rbrakk>;\n        graph_homomorphism A B f;\n        (a, b) \\<in> :A:\\<lbrakk>A_Int e1 e2\\<rbrakk>; (a, a') \\<in> f;\n        (b, b') \\<in> f\\<rbrakk>\n       \\<Longrightarrow> (a', b') \\<in> :B:\\<lbrakk>A_Int e1 e2\\<rbrakk>\n 2. \\<And>e1 e2 a b a' b'.\n       \\<lbrakk>\\<And>a b a' b'.\n                   \\<lbrakk>graph_homomorphism A B f;\n                    (a, b) \\<in> :A:\\<lbrakk>e1\\<rbrakk>; (a, a') \\<in> f;\n                    (b, b') \\<in> f\\<rbrakk>\n                   \\<Longrightarrow> (a', b') \\<in> :B:\\<lbrakk>e1\\<rbrakk>;\n        \\<And>a b a' b'.\n           \\<lbrakk>graph_homomorphism A B f;\n            (a, b) \\<in> :A:\\<lbrakk>e2\\<rbrakk>; (a, a') \\<in> f;\n            (b, b') \\<in> f\\<rbrakk>\n           \\<Longrightarrow> (a', b') \\<in> :B:\\<lbrakk>e2\\<rbrakk>;\n        graph_homomorphism A B f;\n        (a, b) \\<in> :A:\\<lbrakk>A_Cmp e1 e2\\<rbrakk>; (a, a') \\<in> f;\n        (b, b') \\<in> f\\<rbrakk>\n       \\<Longrightarrow> (a', b') \\<in> :B:\\<lbrakk>A_Cmp e1 e2\\<rbrakk>\n 3. \\<And>e a b a' b'.\n       \\<lbrakk>\\<And>a b a' b'.\n                   \\<lbrakk>graph_homomorphism A B f;\n                    (a, b) \\<in> :A:\\<lbrakk>e\\<rbrakk>; (a, a') \\<in> f;\n                    (b, b') \\<in> f\\<rbrakk>\n                   \\<Longrightarrow> (a', b') \\<in> :B:\\<lbrakk>e\\<rbrakk>;\n        graph_homomorphism A B f; (a, b) \\<in> :A:\\<lbrakk>A_Cnv e\\<rbrakk>;\n        (a, a') \\<in> f; (b, b') \\<in> f\\<rbrakk>\n       \\<Longrightarrow> (a', b') \\<in> :B:\\<lbrakk>A_Cnv e\\<rbrakk>\n 4. \\<And>x a b a' b'.\n       \\<lbrakk>graph_homomorphism A B f;\n        (a, b) \\<in> :A:\\<lbrakk>A_Lbl x\\<rbrakk>; (a, a') \\<in> f;\n        (b, b') \\<in> f\\<rbrakk>\n       \\<Longrightarrow> (a', b') \\<in> :B:\\<lbrakk>A_Lbl x\\<rbrakk>", "from A_Cmp(1)[OF assms(1) y(1) A_Cmp(5) this] A_Cmp(2)[OF assms(1) y(2) this A_Cmp(6)]"], ["proof (chain)\npicking this:\n  (a', y') \\<in> :B:\\<lbrakk>e1\\<rbrakk>\n  (y', b') \\<in> :B:\\<lbrakk>e2\\<rbrakk>", "show ?case"], ["proof (prove)\nusing this:\n  (a', y') \\<in> :B:\\<lbrakk>e1\\<rbrakk>\n  (y', b') \\<in> :B:\\<lbrakk>e2\\<rbrakk>\n\ngoal (1 subgoal):\n 1. (a', b') \\<in> :B:\\<lbrakk>A_Cmp e1 e2\\<rbrakk>", "by auto"], ["proof (state)\nthis:\n  (a', b') \\<in> :B:\\<lbrakk>A_Cmp e1 e2\\<rbrakk>\n\ngoal (3 subgoals):\n 1. \\<And>e1 e2 a b a' b'.\n       \\<lbrakk>\\<And>a b a' b'.\n                   \\<lbrakk>graph_homomorphism A B f;\n                    (a, b) \\<in> :A:\\<lbrakk>e1\\<rbrakk>; (a, a') \\<in> f;\n                    (b, b') \\<in> f\\<rbrakk>\n                   \\<Longrightarrow> (a', b') \\<in> :B:\\<lbrakk>e1\\<rbrakk>;\n        \\<And>a b a' b'.\n           \\<lbrakk>graph_homomorphism A B f;\n            (a, b) \\<in> :A:\\<lbrakk>e2\\<rbrakk>; (a, a') \\<in> f;\n            (b, b') \\<in> f\\<rbrakk>\n           \\<Longrightarrow> (a', b') \\<in> :B:\\<lbrakk>e2\\<rbrakk>;\n        graph_homomorphism A B f;\n        (a, b) \\<in> :A:\\<lbrakk>A_Int e1 e2\\<rbrakk>; (a, a') \\<in> f;\n        (b, b') \\<in> f\\<rbrakk>\n       \\<Longrightarrow> (a', b') \\<in> :B:\\<lbrakk>A_Int e1 e2\\<rbrakk>\n 2. \\<And>e a b a' b'.\n       \\<lbrakk>\\<And>a b a' b'.\n                   \\<lbrakk>graph_homomorphism A B f;\n                    (a, b) \\<in> :A:\\<lbrakk>e\\<rbrakk>; (a, a') \\<in> f;\n                    (b, b') \\<in> f\\<rbrakk>\n                   \\<Longrightarrow> (a', b') \\<in> :B:\\<lbrakk>e\\<rbrakk>;\n        graph_homomorphism A B f; (a, b) \\<in> :A:\\<lbrakk>A_Cnv e\\<rbrakk>;\n        (a, a') \\<in> f; (b, b') \\<in> f\\<rbrakk>\n       \\<Longrightarrow> (a', b') \\<in> :B:\\<lbrakk>A_Cnv e\\<rbrakk>\n 3. \\<And>x a b a' b'.\n       \\<lbrakk>graph_homomorphism A B f;\n        (a, b) \\<in> :A:\\<lbrakk>A_Lbl x\\<rbrakk>; (a, a') \\<in> f;\n        (b, b') \\<in> f\\<rbrakk>\n       \\<Longrightarrow> (a', b') \\<in> :B:\\<lbrakk>A_Lbl x\\<rbrakk>", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>e1 e2 a b a' b'.\n       \\<lbrakk>\\<And>a b a' b'.\n                   \\<lbrakk>graph_homomorphism A B f;\n                    (a, b) \\<in> :A:\\<lbrakk>e1\\<rbrakk>; (a, a') \\<in> f;\n                    (b, b') \\<in> f\\<rbrakk>\n                   \\<Longrightarrow> (a', b') \\<in> :B:\\<lbrakk>e1\\<rbrakk>;\n        \\<And>a b a' b'.\n           \\<lbrakk>graph_homomorphism A B f;\n            (a, b) \\<in> :A:\\<lbrakk>e2\\<rbrakk>; (a, a') \\<in> f;\n            (b, b') \\<in> f\\<rbrakk>\n           \\<Longrightarrow> (a', b') \\<in> :B:\\<lbrakk>e2\\<rbrakk>;\n        graph_homomorphism A B f;\n        (a, b) \\<in> :A:\\<lbrakk>A_Int e1 e2\\<rbrakk>; (a, a') \\<in> f;\n        (b, b') \\<in> f\\<rbrakk>\n       \\<Longrightarrow> (a', b') \\<in> :B:\\<lbrakk>A_Int e1 e2\\<rbrakk>\n 2. \\<And>e a b a' b'.\n       \\<lbrakk>\\<And>a b a' b'.\n                   \\<lbrakk>graph_homomorphism A B f;\n                    (a, b) \\<in> :A:\\<lbrakk>e\\<rbrakk>; (a, a') \\<in> f;\n                    (b, b') \\<in> f\\<rbrakk>\n                   \\<Longrightarrow> (a', b') \\<in> :B:\\<lbrakk>e\\<rbrakk>;\n        graph_homomorphism A B f; (a, b) \\<in> :A:\\<lbrakk>A_Cnv e\\<rbrakk>;\n        (a, a') \\<in> f; (b, b') \\<in> f\\<rbrakk>\n       \\<Longrightarrow> (a', b') \\<in> :B:\\<lbrakk>A_Cnv e\\<rbrakk>\n 3. \\<And>x a b a' b'.\n       \\<lbrakk>graph_homomorphism A B f;\n        (a, b) \\<in> :A:\\<lbrakk>A_Lbl x\\<rbrakk>; (a, a') \\<in> f;\n        (b, b') \\<in> f\\<rbrakk>\n       \\<Longrightarrow> (a', b') \\<in> :B:\\<lbrakk>A_Lbl x\\<rbrakk>", "case (A_Lbl x)"], ["proof (state)\nthis:\n  graph_homomorphism A B f\n  (a, b) \\<in> :A:\\<lbrakk>A_Lbl x\\<rbrakk>\n  (a, a') \\<in> f\n  (b, b') \\<in> f\n\ngoal (3 subgoals):\n 1. \\<And>e1 e2 a b a' b'.\n       \\<lbrakk>\\<And>a b a' b'.\n                   \\<lbrakk>graph_homomorphism A B f;\n                    (a, b) \\<in> :A:\\<lbrakk>e1\\<rbrakk>; (a, a') \\<in> f;\n                    (b, b') \\<in> f\\<rbrakk>\n                   \\<Longrightarrow> (a', b') \\<in> :B:\\<lbrakk>e1\\<rbrakk>;\n        \\<And>a b a' b'.\n           \\<lbrakk>graph_homomorphism A B f;\n            (a, b) \\<in> :A:\\<lbrakk>e2\\<rbrakk>; (a, a') \\<in> f;\n            (b, b') \\<in> f\\<rbrakk>\n           \\<Longrightarrow> (a', b') \\<in> :B:\\<lbrakk>e2\\<rbrakk>;\n        graph_homomorphism A B f;\n        (a, b) \\<in> :A:\\<lbrakk>A_Int e1 e2\\<rbrakk>; (a, a') \\<in> f;\n        (b, b') \\<in> f\\<rbrakk>\n       \\<Longrightarrow> (a', b') \\<in> :B:\\<lbrakk>A_Int e1 e2\\<rbrakk>\n 2. \\<And>e a b a' b'.\n       \\<lbrakk>\\<And>a b a' b'.\n                   \\<lbrakk>graph_homomorphism A B f;\n                    (a, b) \\<in> :A:\\<lbrakk>e\\<rbrakk>; (a, a') \\<in> f;\n                    (b, b') \\<in> f\\<rbrakk>\n                   \\<Longrightarrow> (a', b') \\<in> :B:\\<lbrakk>e\\<rbrakk>;\n        graph_homomorphism A B f; (a, b) \\<in> :A:\\<lbrakk>A_Cnv e\\<rbrakk>;\n        (a, a') \\<in> f; (b, b') \\<in> f\\<rbrakk>\n       \\<Longrightarrow> (a', b') \\<in> :B:\\<lbrakk>A_Cnv e\\<rbrakk>\n 3. \\<And>x a b a' b'.\n       \\<lbrakk>graph_homomorphism A B f;\n        (a, b) \\<in> :A:\\<lbrakk>A_Lbl x\\<rbrakk>; (a, a') \\<in> f;\n        (b, b') \\<in> f\\<rbrakk>\n       \\<Longrightarrow> (a', b') \\<in> :B:\\<lbrakk>A_Lbl x\\<rbrakk>", "thus ?case"], ["proof (prove)\nusing this:\n  graph_homomorphism A B f\n  (a, b) \\<in> :A:\\<lbrakk>A_Lbl x\\<rbrakk>\n  (a, a') \\<in> f\n  (b, b') \\<in> f\n\ngoal (1 subgoal):\n 1. (a', b') \\<in> :B:\\<lbrakk>A_Lbl x\\<rbrakk>", "by (auto simp:getRel_def graph_homomorphism_def2 graph_union_iff)"], ["proof (state)\nthis:\n  (a', b') \\<in> :B:\\<lbrakk>A_Lbl x\\<rbrakk>\n\ngoal (2 subgoals):\n 1. \\<And>e1 e2 a b a' b'.\n       \\<lbrakk>\\<And>a b a' b'.\n                   \\<lbrakk>graph_homomorphism A B f;\n                    (a, b) \\<in> :A:\\<lbrakk>e1\\<rbrakk>; (a, a') \\<in> f;\n                    (b, b') \\<in> f\\<rbrakk>\n                   \\<Longrightarrow> (a', b') \\<in> :B:\\<lbrakk>e1\\<rbrakk>;\n        \\<And>a b a' b'.\n           \\<lbrakk>graph_homomorphism A B f;\n            (a, b) \\<in> :A:\\<lbrakk>e2\\<rbrakk>; (a, a') \\<in> f;\n            (b, b') \\<in> f\\<rbrakk>\n           \\<Longrightarrow> (a', b') \\<in> :B:\\<lbrakk>e2\\<rbrakk>;\n        graph_homomorphism A B f;\n        (a, b) \\<in> :A:\\<lbrakk>A_Int e1 e2\\<rbrakk>; (a, a') \\<in> f;\n        (b, b') \\<in> f\\<rbrakk>\n       \\<Longrightarrow> (a', b') \\<in> :B:\\<lbrakk>A_Int e1 e2\\<rbrakk>\n 2. \\<And>e a b a' b'.\n       \\<lbrakk>\\<And>a b a' b'.\n                   \\<lbrakk>graph_homomorphism A B f;\n                    (a, b) \\<in> :A:\\<lbrakk>e\\<rbrakk>; (a, a') \\<in> f;\n                    (b, b') \\<in> f\\<rbrakk>\n                   \\<Longrightarrow> (a', b') \\<in> :B:\\<lbrakk>e\\<rbrakk>;\n        graph_homomorphism A B f; (a, b) \\<in> :A:\\<lbrakk>A_Cnv e\\<rbrakk>;\n        (a, a') \\<in> f; (b, b') \\<in> f\\<rbrakk>\n       \\<Longrightarrow> (a', b') \\<in> :B:\\<lbrakk>A_Cnv e\\<rbrakk>", "qed auto"], ["", "lemma graph_homomorphism_nonempty:\n  assumes \"graph_homomorphism A B f\" \":A:\\<lbrakk>e\\<rbrakk> \\<noteq> {}\"\n  shows \":B:\\<lbrakk>e\\<rbrakk> \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. :B:\\<lbrakk>e\\<rbrakk> \\<noteq> {}", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. :B:\\<lbrakk>e\\<rbrakk> \\<noteq> {}", "from assms"], ["proof (chain)\npicking this:\n  graph_homomorphism A B f\n  :A:\\<lbrakk>e\\<rbrakk> \\<noteq> {}", "have g:\"graph A\""], ["proof (prove)\nusing this:\n  graph_homomorphism A B f\n  :A:\\<lbrakk>e\\<rbrakk> \\<noteq> {}\n\ngoal (1 subgoal):\n 1. graph A", "unfolding graph_homomorphism_def"], ["proof (prove)\nusing this:\n  vertices A = Domain f \\<and>\n  graph A \\<and>\n  graph B \\<and>\n  f `` vertices A \\<subseteq> vertices B \\<and>\n  univalent f \\<and> edge_preserving f (edges A) (edges B)\n  :A:\\<lbrakk>e\\<rbrakk> \\<noteq> {}\n\ngoal (1 subgoal):\n 1. graph A", "by auto"], ["proof (state)\nthis:\n  graph A\n\ngoal (1 subgoal):\n 1. :B:\\<lbrakk>e\\<rbrakk> \\<noteq> {}", "from assms"], ["proof (chain)\npicking this:\n  graph_homomorphism A B f\n  :A:\\<lbrakk>e\\<rbrakk> \\<noteq> {}", "obtain a b where ab:\"(a,b) \\<in> :A:\\<lbrakk>e\\<rbrakk>\""], ["proof (prove)\nusing this:\n  graph_homomorphism A B f\n  :A:\\<lbrakk>e\\<rbrakk> \\<noteq> {}\n\ngoal (1 subgoal):\n 1. (\\<And>a b.\n        (a, b) \\<in> :A:\\<lbrakk>e\\<rbrakk> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  (a, b) \\<in> :A:\\<lbrakk>e\\<rbrakk>\n\ngoal (1 subgoal):\n 1. :B:\\<lbrakk>e\\<rbrakk> \\<noteq> {}", "from semantics_in_vertices[OF g ab]"], ["proof (chain)\npicking this:\n  a \\<in> vertices A\n  b \\<in> vertices A", "obtain a' b' where\n    \"(a,a') \\<in> f\" \"(b,b') \\<in> f\""], ["proof (prove)\nusing this:\n  a \\<in> vertices A\n  b \\<in> vertices A\n\ngoal (1 subgoal):\n 1. (\\<And>a' b'.\n        \\<lbrakk>(a, a') \\<in> f; (b, b') \\<in> f\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms(1)"], ["proof (prove)\nusing this:\n  a \\<in> vertices A\n  b \\<in> vertices A\n  graph_homomorphism A B f\n\ngoal (1 subgoal):\n 1. (\\<And>a' b'.\n        \\<lbrakk>(a, a') \\<in> f; (b, b') \\<in> f\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding graph_homomorphism_def"], ["proof (prove)\nusing this:\n  a \\<in> vertices A\n  b \\<in> vertices A\n  vertices A = Domain f \\<and>\n  graph A \\<and>\n  graph B \\<and>\n  f `` vertices A \\<subseteq> vertices B \\<and>\n  univalent f \\<and> edge_preserving f (edges A) (edges B)\n\ngoal (1 subgoal):\n 1. (\\<And>a' b'.\n        \\<lbrakk>(a, a') \\<in> f; (b, b') \\<in> f\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  (a, a') \\<in> f\n  (b, b') \\<in> f\n\ngoal (1 subgoal):\n 1. :B:\\<lbrakk>e\\<rbrakk> \\<noteq> {}", "from graph_homomorphism_semantics[OF assms(1) ab this]"], ["proof (chain)\npicking this:\n  (a', b') \\<in> :B:\\<lbrakk>e\\<rbrakk>", "show ?thesis"], ["proof (prove)\nusing this:\n  (a', b') \\<in> :B:\\<lbrakk>e\\<rbrakk>\n\ngoal (1 subgoal):\n 1. :B:\\<lbrakk>e\\<rbrakk> \\<noteq> {}", "by auto"], ["proof (state)\nthis:\n  :B:\\<lbrakk>e\\<rbrakk> \\<noteq> {}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma getRel_map_fn[intro]:\n  assumes \"a2 \\<in> vertices G\" \"b2 \\<in> vertices G\" \"(a2,b2) \\<in> getRel l G\"\n          \"f a2 = a\" \"f b2 = b\"\n        shows \"(a,b) \\<in> getRel l (map_graph_fn G f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (a, b) \\<in> getRel l (map_graph_fn G f)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (a, b) \\<in> getRel l (map_graph_fn G f)", "from assms(1,2)"], ["proof (chain)\npicking this:\n  a2 \\<in> vertices G\n  b2 \\<in> vertices G", "have \"((l, a2, b2), (l, f a2, f b2)) \\<in> on_triple {(a, f a) |a. a \\<in> vertices G}\""], ["proof (prove)\nusing this:\n  a2 \\<in> vertices G\n  b2 \\<in> vertices G\n\ngoal (1 subgoal):\n 1. ((l, a2, b2), l, f a2, f b2)\n    \\<in> on_triple {(a, f a) |a. a \\<in> vertices G}", "by auto"], ["proof (state)\nthis:\n  ((l, a2, b2), l, f a2, f b2)\n  \\<in> on_triple {(a, f a) |a. a \\<in> vertices G}\n\ngoal (1 subgoal):\n 1. (a, b) \\<in> getRel l (map_graph_fn G f)", "thus ?thesis"], ["proof (prove)\nusing this:\n  ((l, a2, b2), l, f a2, f b2)\n  \\<in> on_triple {(a, f a) |a. a \\<in> vertices G}\n\ngoal (1 subgoal):\n 1. (a, b) \\<in> getRel l (map_graph_fn G f)", "using assms(3-)"], ["proof (prove)\nusing this:\n  ((l, a2, b2), l, f a2, f b2)\n  \\<in> on_triple {(a, f a) |a. a \\<in> vertices G}\n  (a2, b2) \\<in> getRel l G\n  f a2 = a\n  f b2 = b\n\ngoal (1 subgoal):\n 1. (a, b) \\<in> getRel l (map_graph_fn G f)", "by (simp add:getRel_def BNF_Def.Gr_def Image_def,blast)"], ["proof (state)\nthis:\n  (a, b) \\<in> getRel l (map_graph_fn G f)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}