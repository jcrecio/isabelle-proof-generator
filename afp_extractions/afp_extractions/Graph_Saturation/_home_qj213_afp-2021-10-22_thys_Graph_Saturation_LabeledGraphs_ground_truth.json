{"file_name": "/home/qj213/afp-2021-10-22/thys/Graph_Saturation/LabeledGraphs.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Graph_Saturation", "problem_names": ["lemma graph_empty_e[intro]: \"graph (LG {} v)\"", "lemma graph_single[intro]: \"graph (LG {(a,b,c)} {b,c})\"", "lemma restrict_idemp[simp]:\n  \"restrict (restrict x) = restrict x\"", "lemma vertices_restrict[simp]:\n  \"vertices (restrict G) = vertices G\"", "lemma restrictI[intro]:\n  assumes \"edges G \\<subseteq> {(l,v1,v2). v1 \\<in> vertices G \\<and> v2 \\<in> vertices G }\"\n  shows \"G = restrict G\"", "lemma restrict_subsD[dest]:\n  assumes \"edges G \\<subseteq> edges (restrict G)\"\n  shows \"G = restrict G\"", "lemma restrictD[dest]:\n  assumes \"G = restrict G\"\n  shows \"edges G \\<subseteq> {(l,v1,v2). v1 \\<in> vertices G \\<and> v2 \\<in> vertices G }\"", "lemma on_triple[simp]:\n  \"((l1,v1,v2),(l2,v3,v4)) \\<in> on_triple R \\<longleftrightarrow> (v1,v3)\\<in> R \\<and> (v2,v4) \\<in> R \\<and> l1 = l2\"", "lemma on_triple_univ[intro!]:\n  \"univalent f \\<Longrightarrow> univalent (on_triple f)\"", "lemma on_tripleD[dest]:\n  assumes \"((l1,v1,v2),(l2,v3,v4)) \\<in> on_triple R\"\n  shows \"l2 = l1\" \"(v1,v3)\\<in> R\" \"(v2,v4) \\<in> R\"", "lemma on_triple_ID_restrict[simp]:\n  shows \"on_triple (Id_on (vertices G)) `` edges G = edges (restrict G)\"", "lemma relcomp_on_triple[simp]:\n  shows \"on_triple (R O S) = on_triple R O on_triple S\"", "lemma on_triple_preserves_finite[intro]:\n\"finite E  \\<Longrightarrow> finite (on_triple (BNF_Def.Gr A f) `` E)\"", "lemma on_triple_fst[simp]:\n  assumes \"vertices G = Domain g\" \"graph G\"\n  shows \"x \\<in> fst ` on_triple g `` (edges G) \\<longleftrightarrow> x \\<in> fst ` edges G\"", "lemma edge_preserving_atomic:\n  assumes \"edge_preserving h1 e1 e2\" \"(v1, v1') \\<in> h1\" \"(v2, v2') \\<in> h1\" \"(k, v1, v2) \\<in> e1\"\n  shows \"(k, v1', v2') \\<in> e2\"", "lemma edge_preservingI[intro]:\n  assumes \"on_triple R `` E \\<subseteq> G\"\n  shows \"edge_preserving R E G\"", "lemma on_triple_dest[dest]:\n  assumes \"on_triple R `` E \\<subseteq> G\"\n          \"(l,x,y) \\<in> E\" \"(x,xx) \\<in> R\" \"(y,yy) \\<in> R\"\n        shows \"(l,xx,yy) \\<in> G\"", "lemma edge_preserving:\n  shows \"edge_preserving R E G \\<longleftrightarrow> on_triple R `` E \\<subseteq> G\"", "lemma edge_preserving_subset:\n  assumes \"R\\<^sub>1 \\<subseteq> R\\<^sub>2\" \"E\\<^sub>1 \\<subseteq> E\\<^sub>2\" \"edge_preserving R\\<^sub>2 E\\<^sub>2 G\"\n  shows \"edge_preserving R\\<^sub>1 E\\<^sub>1 G\"", "lemma edge_preserving_unionI[intro]:\n  assumes \"edge_preserving f A G\" \"edge_preserving f B G\"\n  shows \"edge_preserving f (A \\<union> B) G\"", "lemma compose_preserves_edge_preserving:\n  assumes \"edge_preserving h1 e1 e2\" \"edge_preserving h2 e2 e3\"\n  shows \"edge_preserving (h1 O h2) e1 e3\"", "lemma edge_preserving_Id[intro]: \"edge_preserving (Id_on y) x x\"", "lemma graph_homomorphismI:\n  assumes \"vertices s = Domain h\"\n          \"h `` vertices s \\<subseteq> vertices t\"\n          \"univalent h\"\n          \"edge_preserving h (edges s) (edges t)\"\n          \"s = restrict s\" \"t = restrict t\"\n  shows \"graph_homomorphism s t h\"", "lemma graph_homomorphism_composes[intro]:\n  assumes \"graph_homomorphism a b x\"\n          \"graph_homomorphism b c y\"\n  shows \"graph_homomorphism a c (x O y)\"", "lemma graph_homomorphism_empty[simp]:\n  \"graph_homomorphism (LG {} {}) G f \\<longleftrightarrow> f = {} \\<and> graph G\"", "lemma graph_homomorphism_Id[intro]:\n  shows \"graph_homomorphism (restrict a) (restrict a) (Id_on (vertices a))\"", "lemma Id_on_vertices_identity:\n  assumes \"graph_homomorphism a b f\"\n          \"(aa, ba) \\<in> f\"\n  shows \"(aa, ba) \\<in> Id_on (vertices a) O f\"\n        \"(aa, ba) \\<in> f O Id_on (vertices b)\"", "lemma subgraph_trans:\n  assumes \"subgraph G\\<^sub>1 G\\<^sub>2\" \"subgraph G\\<^sub>2 G\\<^sub>3\"\n  shows \"subgraph G\\<^sub>1 G\\<^sub>3\"", "lemma map_graph_selectors[simp]:\n  \"vertices (map_graph f G) = f `` (vertices G)\"\n  \"edges (map_graph f G) = on_triple f `` (edges G)\"", "lemma map_graph_comp[simp]:\n  assumes \"Range g \\<subseteq> Domain f\"\n  shows \"map_graph (g O f) = map_graph f o map_graph g\"", "lemma map_graph_returns_restricted:\n  assumes \"vertices G = Domain f\"\n  shows \"map_graph f G = restrict (map_graph f G)\"", "lemma map_graph_preserves_restricted[intro]:\n  assumes \"graph G\"\n  shows \"graph (map_graph f G)\"", "lemma map_graph_edge_preserving[intro]:\n  shows \"edge_preserving f (edges G) (edges (map_graph f G))\"", "lemma map_graph_homo[intro]:\n  assumes \"univalent f\" \"vertices G = Domain f\" \"G = restrict G\"\n  shows \"graph_homomorphism G (map_graph f G) f\"", "lemma map_graph_homo_simp:\n  \"graph_homomorphism G (map_graph f G) f\n   \\<longleftrightarrow> univalent f \\<and> vertices G = Domain f \\<and> graph G\"", "lemma map_graph_fn_graphI[intro]:\n\"graph (map_graph_fn G f)\"", "lemma on_graph_id[simp]:\n  shows \"on_graph B id = Id_on (vertices B)\"", "lemma in_on_graph[intro]:\n  assumes \"x \\<in> vertices G\" \"(a x,y) \\<in> b\"\n  shows \"(x, y) \\<in> on_graph G a O b\"", "lemma on_graph_comp:\n  \"on_graph G (f o g) = on_graph G g O on_graph (map_graph_fn G g) f\"", "lemma map_graph_fn_eqI:\n  assumes \"\\<And> x. x \\<in> vertices G \\<Longrightarrow> f x = g x\"\n  shows \"map_graph_fn G f = map_graph_fn G g\" (is \"?l = ?r\")", "lemma map_graph_fn_comp[simp]:\n\"map_graph_fn G (f o g) = map_graph_fn (map_graph_fn G g) f\"", "lemma map_graph_fn_id[simp]:\n\"map_graph_fn X id = restrict X\"\n\"map_graph (Id_on (vertices X)) X = restrict X\"", "lemma graph_homo[intro!]:\n  assumes \"graph G\"\n  shows \"graph_homomorphism G (map_graph_fn G f) (on_graph G f)\"", "lemma graph_homo_inv[intro!]:\n  assumes \"graph G\" \"inj_on f (vertices G)\"\n  shows \"graph_homomorphism (map_graph_fn G f) G (converse (on_graph G f))\"", "lemma edge_preserving_on_graphI[intro]:\n  assumes \"\\<And> l x y. (l,x,y)\\<in>edges X \\<Longrightarrow> x\\<in>vertices X \\<Longrightarrow> y \\<in> vertices X \\<Longrightarrow> (l,f x,f y) \\<in> Y\"\n  shows \"edge_preserving (on_graph X f) (edges X) Y\"", "lemma subgraph_subset:\n  assumes \"subgraph G\\<^sub>1 G\\<^sub>2\"\n  shows \"vertices G\\<^sub>1 \\<subseteq> vertices G\\<^sub>2\" \"edges (restrict G\\<^sub>1) \\<subseteq> edges G\\<^sub>2\"", "lemma subgraph_def2:\n  assumes \"graph G\\<^sub>1\" \"graph G\\<^sub>2\"\n  shows \"subgraph G\\<^sub>1 G\\<^sub>2 \\<longleftrightarrow> vertices G\\<^sub>1 \\<subseteq> vertices G\\<^sub>2 \\<and> edges G\\<^sub>1 \\<subseteq> edges G\\<^sub>2\"", "lemma graph_unionI[intro]:\n  assumes \"edges G\\<^sub>1 \\<subseteq> edges G\\<^sub>2\"\n          \"vertices G\\<^sub>1 \\<subseteq> vertices G\\<^sub>2\"\n  shows \"graph_union G\\<^sub>1 G\\<^sub>2 = G\\<^sub>2\"", "lemma graph_union_iff:\n  shows \"graph_union G\\<^sub>1 G\\<^sub>2 = G\\<^sub>2 \\<longleftrightarrow> (edges G\\<^sub>1 \\<subseteq> edges G\\<^sub>2 \\<and> vertices G\\<^sub>1 \\<subseteq> vertices G\\<^sub>2)\"", "lemma graph_union_idemp[simp]:\n\"graph_union A A = A\"\n\"graph_union A (graph_union A B) = (graph_union A B)\"\n\"graph_union A (graph_union B A) = (graph_union B A)\"", "lemma graph_union_vertices[simp]:\n\"vertices (graph_union G\\<^sub>1 G\\<^sub>2) = vertices G\\<^sub>1 \\<union> vertices G\\<^sub>2\"", "lemma graph_union_edges[simp]:\n\"edges (graph_union G\\<^sub>1 G\\<^sub>2) = edges G\\<^sub>1 \\<union> edges G\\<^sub>2\"", "lemma graph_union_preserves_restrict[intro]:\n  assumes \"G\\<^sub>1 = restrict G\\<^sub>1\" \"G\\<^sub>2 = restrict G\\<^sub>2\"\n  shows \"graph_union G\\<^sub>1 G\\<^sub>2 = restrict (graph_union G\\<^sub>1 G\\<^sub>2)\"", "lemma graph_map_union[intro]:\n  assumes \"\\<And> i::nat. graph_union (map_graph (g i) X) Y = Y\" \"\\<And> i j. i \\<le> j \\<Longrightarrow> g i \\<subseteq> g j\"\n  shows \"graph_union (map_graph (\\<Union>i. g i) X) Y = Y\"", "lemma subgraph_def:\n\"subgraph G\\<^sub>1 G\\<^sub>2 = (G\\<^sub>1 = restrict G\\<^sub>1 \\<and> G\\<^sub>2 = restrict G\\<^sub>2 \\<and> graph_union G\\<^sub>1 G\\<^sub>2 = G\\<^sub>2)\"", "lemma subgraph_refl[simp]: \n\"subgraph G G = (G = restrict G)\"", "lemma subgraph_restrict[simp]:\n  \"subgraph G (restrict G) = graph G\"", "lemma graph_homomorphism_def2: (* Shows a graph homomorphism is an embedding as in the paper *)\n  shows \"graph_homomorphism G\\<^sub>1 G\\<^sub>2 f =\n   (vertices G\\<^sub>1 = Domain f \\<and> univalent f \\<and> G\\<^sub>1 = restrict G\\<^sub>1 \\<and> G\\<^sub>2 = restrict G\\<^sub>2 \\<and> graph_union (map_graph f G\\<^sub>1) G\\<^sub>2 = G\\<^sub>2)\"\n   (is \"?lhs = ?rhs\")", "lemma map_graph_preserves_subgraph[intro]:\n  assumes \"subgraph A B\"\n  shows \"subgraph (map_graph f A) (map_graph f B)\"", "lemma graph_homomorphism_concr_graph:\n  assumes \"graph G\" \"graph (LG e v)\"\n  shows \"graph_homomorphism (LG e v) G x \\<longleftrightarrow>\n         x `` v \\<subseteq> vertices G \\<and> on_triple x `` e \\<subseteq> edges G \\<and> univalent x \\<and> Domain x = v\"", "lemma subgraph_preserves_hom:\n  assumes \"subgraph A B\"\n          \"graph_homomorphism X A h\"\n  shows \"graph_homomorphism X B h\"", "lemma graph_homo_union_id:\nassumes \"graph_homomorphism (graph_union A B) G f\"\nshows \"graph A \\<Longrightarrow> graph_homomorphism A G (Id_on (vertices A) O f)\"\n      \"graph B \\<Longrightarrow> graph_homomorphism B G (Id_on (vertices B) O f)\"", "lemma graph_homo_union[intro]:\n  assumes\n   \"graph_homomorphism A G f_a\"\n   \"graph_homomorphism B G f_b\"\n   \"Domain f_a \\<inter> Domain f_b = Domain (f_a \\<inter> f_b)\"\n  shows \"graph_homomorphism (graph_union A B) G (f_a \\<union> f_b)\"", "lemma graph_homomorphism_on_graph:\n  assumes \"graph_homomorphism A B R\"\n  shows \"graph_homomorphism A (map_graph_fn B f) (R O on_graph B f)\""], "translations": [["", "lemma graph_empty_e[intro]: \"graph (LG {} v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. graph (LG {} v)", "unfolding restrict_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. LG {} v =\n    LG {(l, v1, v2).\n        (l, v1, v2) \\<in> edges (LG {} v) \\<and>\n        v1 \\<in> vertices (LG {} v) \\<and> v2 \\<in> vertices (LG {} v)}\n     (vertices (LG {} v))", "by auto"], ["", "lemma graph_single[intro]: \"graph (LG {(a,b,c)} {b,c})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. graph (LG {(a, b, c)} {b, c})", "unfolding restrict_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. LG {(a, b, c)} {b, c} =\n    LG {(l, v1, v2).\n        (l, v1, v2) \\<in> edges (LG {(a, b, c)} {b, c}) \\<and>\n        v1 \\<in> vertices (LG {(a, b, c)} {b, c}) \\<and>\n        v2 \\<in> vertices (LG {(a, b, c)} {b, c})}\n     (vertices (LG {(a, b, c)} {b, c}))", "by auto"], ["", "abbreviation finite_graph where\n  \"finite_graph X \\<equiv> graph X \\<and> finite (vertices X) \\<and> finite (edges X)\""], ["", "lemma restrict_idemp[simp]:\n  \"restrict (restrict x) = restrict x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. restrict (restrict x) = restrict x", "by(cases x,auto simp:restrict_def)"], ["", "lemma vertices_restrict[simp]:\n  \"vertices (restrict G) = vertices G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vertices (restrict G) = vertices G", "by(cases G,auto simp:restrict_def)"], ["", "lemma restrictI[intro]:\n  assumes \"edges G \\<subseteq> {(l,v1,v2). v1 \\<in> vertices G \\<and> v2 \\<in> vertices G }\"\n  shows \"G = restrict G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. graph G", "using assms"], ["proof (prove)\nusing this:\n  edges G\n  \\<subseteq> {(l, v1, v2). v1 \\<in> vertices G \\<and> v2 \\<in> vertices G}\n\ngoal (1 subgoal):\n 1. graph G", "by(cases G,auto simp:restrict_def)"], ["", "lemma restrict_subsD[dest]:\n  assumes \"edges G \\<subseteq> edges (restrict G)\"\n  shows \"G = restrict G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. graph G", "using assms"], ["proof (prove)\nusing this:\n  edges G \\<subseteq> edges (restrict G)\n\ngoal (1 subgoal):\n 1. graph G", "by(cases G,auto simp:restrict_def)"], ["", "lemma restrictD[dest]:\n  assumes \"G = restrict G\"\n  shows \"edges G \\<subseteq> {(l,v1,v2). v1 \\<in> vertices G \\<and> v2 \\<in> vertices G }\""], ["proof (prove)\ngoal (1 subgoal):\n 1. edges G\n    \\<subseteq> {(l, v1, v2).\n                 v1 \\<in> vertices G \\<and> v2 \\<in> vertices G}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. edges G\n    \\<subseteq> {(l, v1, v2).\n                 v1 \\<in> vertices G \\<and> v2 \\<in> vertices G}", "have \"edges (restrict G) \\<subseteq> {(l,v1,v2). v1 \\<in> vertices G \\<and> v2 \\<in> vertices G }\""], ["proof (prove)\ngoal (1 subgoal):\n 1. edges (restrict G)\n    \\<subseteq> {(l, v1, v2).\n                 v1 \\<in> vertices G \\<and> v2 \\<in> vertices G}", "by (cases G,auto simp:restrict_def)"], ["proof (state)\nthis:\n  edges (restrict G)\n  \\<subseteq> {(l, v1, v2). v1 \\<in> vertices G \\<and> v2 \\<in> vertices G}\n\ngoal (1 subgoal):\n 1. edges G\n    \\<subseteq> {(l, v1, v2).\n                 v1 \\<in> vertices G \\<and> v2 \\<in> vertices G}", "thus ?thesis"], ["proof (prove)\nusing this:\n  edges (restrict G)\n  \\<subseteq> {(l, v1, v2). v1 \\<in> vertices G \\<and> v2 \\<in> vertices G}\n\ngoal (1 subgoal):\n 1. edges G\n    \\<subseteq> {(l, v1, v2).\n                 v1 \\<in> vertices G \\<and> v2 \\<in> vertices G}", "using assms"], ["proof (prove)\nusing this:\n  edges (restrict G)\n  \\<subseteq> {(l, v1, v2). v1 \\<in> vertices G \\<and> v2 \\<in> vertices G}\n  graph G\n\ngoal (1 subgoal):\n 1. edges G\n    \\<subseteq> {(l, v1, v2).\n                 v1 \\<in> vertices G \\<and> v2 \\<in> vertices G}", "by auto"], ["proof (state)\nthis:\n  edges G\n  \\<subseteq> {(l, v1, v2). v1 \\<in> vertices G \\<and> v2 \\<in> vertices G}\n\ngoal:\nNo subgoals!", "qed"], ["", "(* Given a relation on vertices, make one on edges *)"], ["", "definition on_triple where \"on_triple R \\<equiv> {((l,s,t),(l',s',t')) . l=l' \\<and> (s,s') \\<in> R \\<and> (t,t') \\<in> R}\""], ["", "lemma on_triple[simp]:\n  \"((l1,v1,v2),(l2,v3,v4)) \\<in> on_triple R \\<longleftrightarrow> (v1,v3)\\<in> R \\<and> (v2,v4) \\<in> R \\<and> l1 = l2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (((l1, v1, v2), l2, v3, v4) \\<in> on_triple R) =\n    ((v1, v3) \\<in> R \\<and> (v2, v4) \\<in> R \\<and> l1 = l2)", "unfolding on_triple_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (((l1, v1, v2), l2, v3, v4)\n     \\<in> {((l, s, t), l', s', t').\n            l = l' \\<and> (s, s') \\<in> R \\<and> (t, t') \\<in> R}) =\n    ((v1, v3) \\<in> R \\<and> (v2, v4) \\<in> R \\<and> l1 = l2)", "by auto"], ["", "lemma on_triple_univ[intro!]:\n  \"univalent f \\<Longrightarrow> univalent (on_triple f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. univalent f \\<Longrightarrow> univalent (on_triple f)", "unfolding on_triple_def univalent_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x y z.\n       (x, y) \\<in> f \\<and> (x, z) \\<in> f \\<longrightarrow>\n       z = y \\<Longrightarrow>\n    \\<forall>x y z.\n       (x, y)\n       \\<in> {((l, s, t), l', s', t').\n              l = l' \\<and> (s, s') \\<in> f \\<and> (t, t') \\<in> f} \\<and>\n       (x, z)\n       \\<in> {((l, s, t), l', s', t').\n              l = l' \\<and>\n              (s, s') \\<in> f \\<and> (t, t') \\<in> f} \\<longrightarrow>\n       z = y", "by auto"], ["", "lemma on_tripleD[dest]:\n  assumes \"((l1,v1,v2),(l2,v3,v4)) \\<in> on_triple R\"\n  shows \"l2 = l1\" \"(v1,v3)\\<in> R\" \"(v2,v4) \\<in> R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. l2 = l1 &&& (v1, v3) \\<in> R &&& (v2, v4) \\<in> R", "using assms"], ["proof (prove)\nusing this:\n  ((l1, v1, v2), l2, v3, v4) \\<in> on_triple R\n\ngoal (1 subgoal):\n 1. l2 = l1 &&& (v1, v3) \\<in> R &&& (v2, v4) \\<in> R", "unfolding on_triple_def"], ["proof (prove)\nusing this:\n  ((l1, v1, v2), l2, v3, v4)\n  \\<in> {((l, s, t), l', s', t').\n         l = l' \\<and> (s, s') \\<in> R \\<and> (t, t') \\<in> R}\n\ngoal (1 subgoal):\n 1. l2 = l1 &&& (v1, v3) \\<in> R &&& (v2, v4) \\<in> R", "by auto"], ["", "lemma on_triple_ID_restrict[simp]:\n  shows \"on_triple (Id_on (vertices G)) `` edges G = edges (restrict G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. on_triple (Id_on (vertices G)) `` edges G = edges (restrict G)", "unfolding on_triple_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {((l, s, t), l', s', t').\n     l = l' \\<and>\n     (s, s') \\<in> Id_on (vertices G) \\<and>\n     (t, t') \\<in> Id_on (vertices G)} ``\n    edges G =\n    edges (restrict G)", "by(cases G,auto simp:restrict_def)"], ["", "lemma relcomp_on_triple[simp]:\n  shows \"on_triple (R O S) = on_triple R O on_triple S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. on_triple (R O S) = on_triple R O on_triple S", "unfolding on_triple_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {((l, s, t), l', s', t').\n     l = l' \\<and> (s, s') \\<in> R O S \\<and> (t, t') \\<in> R O S} =\n    {((l, s, t), l', s', t').\n     l = l' \\<and> (s, s') \\<in> R \\<and> (t, t') \\<in> R} O\n    {((l, s, t), l', s', t').\n     l = l' \\<and> (s, s') \\<in> S \\<and> (t, t') \\<in> S}", "by fast"], ["", "lemma on_triple_preserves_finite[intro]:\n\"finite E  \\<Longrightarrow> finite (on_triple (BNF_Def.Gr A f) `` E)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite E \\<Longrightarrow> finite (on_triple (BNF_Def.Gr A f) `` E)", "by (auto simp:on_triple_def BNF_Def.Gr_def)"], ["", "lemma on_triple_fst[simp]:\n  assumes \"vertices G = Domain g\" \"graph G\"\n  shows \"x \\<in> fst ` on_triple g `` (edges G) \\<longleftrightarrow> x \\<in> fst ` edges G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x \\<in> fst ` on_triple g `` edges G) = (x \\<in> fst ` edges G)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. x \\<in> fst ` on_triple g `` edges G \\<Longrightarrow>\n    x \\<in> fst ` edges G\n 2. x \\<in> fst ` edges G \\<Longrightarrow>\n    x \\<in> fst ` on_triple g `` edges G", "assume \"x \\<in> fst ` on_triple g `` edges G\""], ["proof (state)\nthis:\n  x \\<in> fst ` on_triple g `` edges G\n\ngoal (2 subgoals):\n 1. x \\<in> fst ` on_triple g `` edges G \\<Longrightarrow>\n    x \\<in> fst ` edges G\n 2. x \\<in> fst ` edges G \\<Longrightarrow>\n    x \\<in> fst ` on_triple g `` edges G", "then"], ["proof (chain)\npicking this:\n  x \\<in> fst ` on_triple g `` edges G", "obtain a b where \"(x,a,b) \\<in> on_triple g `` edges G\""], ["proof (prove)\nusing this:\n  x \\<in> fst ` on_triple g `` edges G\n\ngoal (1 subgoal):\n 1. (\\<And>a b.\n        (x, a, b) \\<in> on_triple g `` edges G \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  (x, a, b) \\<in> on_triple g `` edges G\n\ngoal (2 subgoals):\n 1. x \\<in> fst ` on_triple g `` edges G \\<Longrightarrow>\n    x \\<in> fst ` edges G\n 2. x \\<in> fst ` edges G \\<Longrightarrow>\n    x \\<in> fst ` on_triple g `` edges G", "then"], ["proof (chain)\npicking this:\n  (x, a, b) \\<in> on_triple g `` edges G", "obtain c d where \"(x,c,d) \\<in> edges G\""], ["proof (prove)\nusing this:\n  (x, a, b) \\<in> on_triple g `` edges G\n\ngoal (1 subgoal):\n 1. (\\<And>c d.\n        (x, c, d) \\<in> edges G \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding on_triple_def"], ["proof (prove)\nusing this:\n  (x, a, b)\n  \\<in> {((l, s, t), l', s', t').\n         l = l' \\<and> (s, s') \\<in> g \\<and> (t, t') \\<in> g} ``\n        edges G\n\ngoal (1 subgoal):\n 1. (\\<And>c d.\n        (x, c, d) \\<in> edges G \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  (x, c, d) \\<in> edges G\n\ngoal (2 subgoals):\n 1. x \\<in> fst ` on_triple g `` edges G \\<Longrightarrow>\n    x \\<in> fst ` edges G\n 2. x \\<in> fst ` edges G \\<Longrightarrow>\n    x \\<in> fst ` on_triple g `` edges G", "thus \"x \\<in> fst ` edges G\""], ["proof (prove)\nusing this:\n  (x, c, d) \\<in> edges G\n\ngoal (1 subgoal):\n 1. x \\<in> fst ` edges G", "by force"], ["proof (state)\nthis:\n  x \\<in> fst ` edges G\n\ngoal (1 subgoal):\n 1. x \\<in> fst ` edges G \\<Longrightarrow>\n    x \\<in> fst ` on_triple g `` edges G", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<in> fst ` edges G \\<Longrightarrow>\n    x \\<in> fst ` on_triple g `` edges G", "assume \"x \\<in> fst ` edges G\""], ["proof (state)\nthis:\n  x \\<in> fst ` edges G\n\ngoal (1 subgoal):\n 1. x \\<in> fst ` edges G \\<Longrightarrow>\n    x \\<in> fst ` on_triple g `` edges G", "then"], ["proof (chain)\npicking this:\n  x \\<in> fst ` edges G", "obtain a b where ab:\"(x,a,b) \\<in> edges G\""], ["proof (prove)\nusing this:\n  x \\<in> fst ` edges G\n\ngoal (1 subgoal):\n 1. (\\<And>a b.\n        (x, a, b) \\<in> edges G \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  (x, a, b) \\<in> edges G\n\ngoal (1 subgoal):\n 1. x \\<in> fst ` edges G \\<Longrightarrow>\n    x \\<in> fst ` on_triple g `` edges G", "then"], ["proof (chain)\npicking this:\n  (x, a, b) \\<in> edges G", "obtain c d where \"(a,c) \\<in> g\" \"(b,d) \\<in> g\""], ["proof (prove)\nusing this:\n  (x, a, b) \\<in> edges G\n\ngoal (1 subgoal):\n 1. (\\<And>c d.\n        \\<lbrakk>(a, c) \\<in> g; (b, d) \\<in> g\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  (x, a, b) \\<in> edges G\n  vertices G = Domain g\n  graph G\n\ngoal (1 subgoal):\n 1. (\\<And>c d.\n        \\<lbrakk>(a, c) \\<in> g; (b, d) \\<in> g\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  (a, c) \\<in> g\n  (b, d) \\<in> g\n\ngoal (1 subgoal):\n 1. x \\<in> fst ` edges G \\<Longrightarrow>\n    x \\<in> fst ` on_triple g `` edges G", "hence \"(x,c,d) \\<in> on_triple g `` edges G\""], ["proof (prove)\nusing this:\n  (a, c) \\<in> g\n  (b, d) \\<in> g\n\ngoal (1 subgoal):\n 1. (x, c, d) \\<in> on_triple g `` edges G", "using ab"], ["proof (prove)\nusing this:\n  (a, c) \\<in> g\n  (b, d) \\<in> g\n  (x, a, b) \\<in> edges G\n\ngoal (1 subgoal):\n 1. (x, c, d) \\<in> on_triple g `` edges G", "unfolding on_triple_def"], ["proof (prove)\nusing this:\n  (a, c) \\<in> g\n  (b, d) \\<in> g\n  (x, a, b) \\<in> edges G\n\ngoal (1 subgoal):\n 1. (x, c, d)\n    \\<in> {((l, s, t), l', s', t').\n           l = l' \\<and> (s, s') \\<in> g \\<and> (t, t') \\<in> g} ``\n          edges G", "by auto"], ["proof (state)\nthis:\n  (x, c, d) \\<in> on_triple g `` edges G\n\ngoal (1 subgoal):\n 1. x \\<in> fst ` edges G \\<Longrightarrow>\n    x \\<in> fst ` on_triple g `` edges G", "thus \"x \\<in> fst ` on_triple g `` edges G\""], ["proof (prove)\nusing this:\n  (x, c, d) \\<in> on_triple g `` edges G\n\ngoal (1 subgoal):\n 1. x \\<in> fst ` on_triple g `` edges G", "by (metis fst_conv image_iff)"], ["proof (state)\nthis:\n  x \\<in> fst ` on_triple g `` edges G\n\ngoal:\nNo subgoals!", "qed"], ["", "definition edge_preserving where\n  \"edge_preserving h e1 e2 \\<equiv> \n     (\\<forall> (k,v1,v2) \\<in> e1. \\<forall> v1' v2'. ((v1, v1') \\<in> h \\<and> (v2,v2') \\<in> h)\n                                    \\<longrightarrow> (k,v1',v2') \\<in> e2)\""], ["", "lemma edge_preserving_atomic:\n  assumes \"edge_preserving h1 e1 e2\" \"(v1, v1') \\<in> h1\" \"(v2, v2') \\<in> h1\" \"(k, v1, v2) \\<in> e1\"\n  shows \"(k, v1', v2') \\<in> e2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (k, v1', v2') \\<in> e2", "using assms"], ["proof (prove)\nusing this:\n  edge_preserving h1 e1 e2\n  (v1, v1') \\<in> h1\n  (v2, v2') \\<in> h1\n  (k, v1, v2) \\<in> e1\n\ngoal (1 subgoal):\n 1. (k, v1', v2') \\<in> e2", "unfolding edge_preserving_def"], ["proof (prove)\nusing this:\n  \\<forall>(k, v1, v2)\\<in>e1.\n     \\<forall>v1' v2'.\n        (v1, v1') \\<in> h1 \\<and> (v2, v2') \\<in> h1 \\<longrightarrow>\n        (k, v1', v2') \\<in> e2\n  (v1, v1') \\<in> h1\n  (v2, v2') \\<in> h1\n  (k, v1, v2) \\<in> e1\n\ngoal (1 subgoal):\n 1. (k, v1', v2') \\<in> e2", "by auto"], ["", "lemma edge_preservingI[intro]:\n  assumes \"on_triple R `` E \\<subseteq> G\"\n  shows \"edge_preserving R E G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. edge_preserving R E G", "unfolding edge_preserving_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>(k, v1, v2)\\<in>E.\n       \\<forall>v1' v2'.\n          (v1, v1') \\<in> R \\<and> (v2, v2') \\<in> R \\<longrightarrow>\n          (k, v1', v2') \\<in> G", "proof(clarify,goal_cases)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a aa b v1' v2'.\n       \\<lbrakk>(a, aa, b) \\<in> E; (aa, v1') \\<in> R;\n        (b, v2') \\<in> R\\<rbrakk>\n       \\<Longrightarrow> (a, v1', v2') \\<in> G", "case (1 a s t v1' v2')"], ["proof (state)\nthis:\n  (a, s, t) \\<in> E\n  (s, v1') \\<in> R\n  (t, v2') \\<in> R\n\ngoal (1 subgoal):\n 1. \\<And>a aa b v1' v2'.\n       \\<lbrakk>(a, aa, b) \\<in> E; (aa, v1') \\<in> R;\n        (b, v2') \\<in> R\\<rbrakk>\n       \\<Longrightarrow> (a, v1', v2') \\<in> G", "thus ?case"], ["proof (prove)\nusing this:\n  (a, s, t) \\<in> E\n  (s, v1') \\<in> R\n  (t, v2') \\<in> R\n\ngoal (1 subgoal):\n 1. (a, v1', v2') \\<in> G", "by (intro assms[THEN subsetD]) (auto simp:on_triple_def)"], ["proof (state)\nthis:\n  (a, v1', v2') \\<in> G\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma on_triple_dest[dest]:\n  assumes \"on_triple R `` E \\<subseteq> G\"\n          \"(l,x,y) \\<in> E\" \"(x,xx) \\<in> R\" \"(y,yy) \\<in> R\"\n        shows \"(l,xx,yy) \\<in> G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (l, xx, yy) \\<in> G", "using assms"], ["proof (prove)\nusing this:\n  on_triple R `` E \\<subseteq> G\n  (l, x, y) \\<in> E\n  (x, xx) \\<in> R\n  (y, yy) \\<in> R\n\ngoal (1 subgoal):\n 1. (l, xx, yy) \\<in> G", "unfolding Image_def on_triple_def"], ["proof (prove)\nusing this:\n  {y. \\<exists>x\\<in>E.\n         (x, y)\n         \\<in> {((l, s, t), l', s', t').\n                l = l' \\<and> (s, s') \\<in> R \\<and> (t, t') \\<in> R}}\n  \\<subseteq> G\n  (l, x, y) \\<in> E\n  (x, xx) \\<in> R\n  (y, yy) \\<in> R\n\ngoal (1 subgoal):\n 1. (l, xx, yy) \\<in> G", "by blast"], ["", "lemma edge_preserving:\n  shows \"edge_preserving R E G \\<longleftrightarrow> on_triple R `` E \\<subseteq> G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. edge_preserving R E G = (on_triple R `` E \\<subseteq> G)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. edge_preserving R E G \\<Longrightarrow> on_triple R `` E \\<subseteq> G\n 2. on_triple R `` E \\<subseteq> G \\<Longrightarrow> edge_preserving R E G", "assume \"edge_preserving R E G\""], ["proof (state)\nthis:\n  edge_preserving R E G\n\ngoal (2 subgoals):\n 1. edge_preserving R E G \\<Longrightarrow> on_triple R `` E \\<subseteq> G\n 2. on_triple R `` E \\<subseteq> G \\<Longrightarrow> edge_preserving R E G", "hence \"\\<And> k v1 v2 v1' v2'. (k, v1, v2)\\<in>E \\<Longrightarrow>\n            (v1, v1') \\<in> R \\<Longrightarrow> (v2, v2') \\<in> R \\<Longrightarrow> (k, v1', v2') \\<in> G\""], ["proof (prove)\nusing this:\n  edge_preserving R E G\n\ngoal (1 subgoal):\n 1. \\<And>k v1 v2 v1' v2'.\n       \\<lbrakk>(k, v1, v2) \\<in> E; (v1, v1') \\<in> R;\n        (v2, v2') \\<in> R\\<rbrakk>\n       \\<Longrightarrow> (k, v1', v2') \\<in> G", "unfolding edge_preserving_def"], ["proof (prove)\nusing this:\n  \\<forall>(k, v1, v2)\\<in>E.\n     \\<forall>v1' v2'.\n        (v1, v1') \\<in> R \\<and> (v2, v2') \\<in> R \\<longrightarrow>\n        (k, v1', v2') \\<in> G\n\ngoal (1 subgoal):\n 1. \\<And>k v1 v2 v1' v2'.\n       \\<lbrakk>(k, v1, v2) \\<in> E; (v1, v1') \\<in> R;\n        (v2, v2') \\<in> R\\<rbrakk>\n       \\<Longrightarrow> (k, v1', v2') \\<in> G", "by auto"], ["proof (state)\nthis:\n  \\<lbrakk>(?k, ?v1.0, ?v2.0) \\<in> E; (?v1.0, ?v1') \\<in> R;\n   (?v2.0, ?v2') \\<in> R\\<rbrakk>\n  \\<Longrightarrow> (?k, ?v1', ?v2') \\<in> G\n\ngoal (2 subgoals):\n 1. edge_preserving R E G \\<Longrightarrow> on_triple R `` E \\<subseteq> G\n 2. on_triple R `` E \\<subseteq> G \\<Longrightarrow> edge_preserving R E G", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>(?k, ?v1.0, ?v2.0) \\<in> E; (?v1.0, ?v1') \\<in> R;\n   (?v2.0, ?v2') \\<in> R\\<rbrakk>\n  \\<Longrightarrow> (?k, ?v1', ?v2') \\<in> G", "show \"on_triple R `` E \\<subseteq> G\""], ["proof (prove)\nusing this:\n  \\<lbrakk>(?k, ?v1.0, ?v2.0) \\<in> E; (?v1.0, ?v1') \\<in> R;\n   (?v2.0, ?v2') \\<in> R\\<rbrakk>\n  \\<Longrightarrow> (?k, ?v1', ?v2') \\<in> G\n\ngoal (1 subgoal):\n 1. on_triple R `` E \\<subseteq> G", "unfolding Image_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>(?k, ?v1.0, ?v2.0) \\<in> E; (?v1.0, ?v1') \\<in> R;\n   (?v2.0, ?v2') \\<in> R\\<rbrakk>\n  \\<Longrightarrow> (?k, ?v1', ?v2') \\<in> G\n\ngoal (1 subgoal):\n 1. {y. \\<exists>x\\<in>E. (x, y) \\<in> on_triple R} \\<subseteq> G", "by auto"], ["proof (state)\nthis:\n  on_triple R `` E \\<subseteq> G\n\ngoal (1 subgoal):\n 1. on_triple R `` E \\<subseteq> G \\<Longrightarrow> edge_preserving R E G", "qed auto"], ["", "lemma edge_preserving_subset:\n  assumes \"R\\<^sub>1 \\<subseteq> R\\<^sub>2\" \"E\\<^sub>1 \\<subseteq> E\\<^sub>2\" \"edge_preserving R\\<^sub>2 E\\<^sub>2 G\"\n  shows \"edge_preserving R\\<^sub>1 E\\<^sub>1 G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. edge_preserving R\\<^sub>1 E\\<^sub>1 G", "using assms"], ["proof (prove)\nusing this:\n  R\\<^sub>1 \\<subseteq> R\\<^sub>2\n  E\\<^sub>1 \\<subseteq> E\\<^sub>2\n  edge_preserving R\\<^sub>2 E\\<^sub>2 G\n\ngoal (1 subgoal):\n 1. edge_preserving R\\<^sub>1 E\\<^sub>1 G", "unfolding edge_preserving_def"], ["proof (prove)\nusing this:\n  R\\<^sub>1 \\<subseteq> R\\<^sub>2\n  E\\<^sub>1 \\<subseteq> E\\<^sub>2\n  \\<forall>(k, v1, v2)\\<in>E\\<^sub>2.\n     \\<forall>v1' v2'.\n        (v1, v1') \\<in> R\\<^sub>2 \\<and>\n        (v2, v2') \\<in> R\\<^sub>2 \\<longrightarrow>\n        (k, v1', v2') \\<in> G\n\ngoal (1 subgoal):\n 1. \\<forall>(k, v1, v2)\\<in>E\\<^sub>1.\n       \\<forall>v1' v2'.\n          (v1, v1') \\<in> R\\<^sub>1 \\<and>\n          (v2, v2') \\<in> R\\<^sub>1 \\<longrightarrow>\n          (k, v1', v2') \\<in> G", "by blast"], ["", "lemma edge_preserving_unionI[intro]:\n  assumes \"edge_preserving f A G\" \"edge_preserving f B G\"\n  shows \"edge_preserving f (A \\<union> B) G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. edge_preserving f (A \\<union> B) G", "using assms"], ["proof (prove)\nusing this:\n  edge_preserving f A G\n  edge_preserving f B G\n\ngoal (1 subgoal):\n 1. edge_preserving f (A \\<union> B) G", "unfolding edge_preserving_def"], ["proof (prove)\nusing this:\n  \\<forall>(k, v1, v2)\\<in>A.\n     \\<forall>v1' v2'.\n        (v1, v1') \\<in> f \\<and> (v2, v2') \\<in> f \\<longrightarrow>\n        (k, v1', v2') \\<in> G\n  \\<forall>(k, v1, v2)\\<in>B.\n     \\<forall>v1' v2'.\n        (v1, v1') \\<in> f \\<and> (v2, v2') \\<in> f \\<longrightarrow>\n        (k, v1', v2') \\<in> G\n\ngoal (1 subgoal):\n 1. \\<forall>(k, v1, v2)\\<in>A \\<union> B.\n       \\<forall>v1' v2'.\n          (v1, v1') \\<in> f \\<and> (v2, v2') \\<in> f \\<longrightarrow>\n          (k, v1', v2') \\<in> G", "by blast"], ["", "lemma compose_preserves_edge_preserving:\n  assumes \"edge_preserving h1 e1 e2\" \"edge_preserving h2 e2 e3\"\n  shows \"edge_preserving (h1 O h2) e1 e3\""], ["proof (prove)\ngoal (1 subgoal):\n 1. edge_preserving (h1 O h2) e1 e3", "unfolding edge_preserving_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>(k, v1, v2)\\<in>e1.\n       \\<forall>v1' v2'.\n          (v1, v1') \\<in> h1 O h2 \\<and>\n          (v2, v2') \\<in> h1 O h2 \\<longrightarrow>\n          (k, v1', v2') \\<in> e3", "proof(standard,standard,standard,standard,standard,standard,goal_cases)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x k b v1 v2 v1' v2'.\n       \\<lbrakk>x \\<in> e1; x = (k, b); b = (v1, v2);\n        (v1, v1') \\<in> h1 O h2 \\<and> (v2, v2') \\<in> h1 O h2\\<rbrakk>\n       \\<Longrightarrow> (k, v1', v2') \\<in> e3", "case (1 _ k _ v1 v2 v1'' v2'')"], ["proof (state)\nthis:\n  x_ \\<in> e1\n  x_ = (k, b_)\n  b_ = (v1, v2)\n  (v1, v1'') \\<in> h1 O h2 \\<and> (v2, v2'') \\<in> h1 O h2\n\ngoal (1 subgoal):\n 1. \\<And>x k b v1 v2 v1' v2'.\n       \\<lbrakk>x \\<in> e1; x = (k, b); b = (v1, v2);\n        (v1, v1') \\<in> h1 O h2 \\<and> (v2, v2') \\<in> h1 O h2\\<rbrakk>\n       \\<Longrightarrow> (k, v1', v2') \\<in> e3", "hence 1:\"(k, v1, v2) \\<in> e1\" \"(v1, v1'') \\<in> h1 O h2\" \"(v2, v2'') \\<in> h1 O h2\""], ["proof (prove)\nusing this:\n  x_ \\<in> e1\n  x_ = (k, b_)\n  b_ = (v1, v2)\n  (v1, v1'') \\<in> h1 O h2 \\<and> (v2, v2'') \\<in> h1 O h2\n\ngoal (1 subgoal):\n 1. (k, v1, v2) \\<in> e1 &&&\n    (v1, v1'') \\<in> h1 O h2 &&& (v2, v2'') \\<in> h1 O h2", "by auto"], ["proof (state)\nthis:\n  (k, v1, v2) \\<in> e1\n  (v1, v1'') \\<in> h1 O h2\n  (v2, v2'') \\<in> h1 O h2\n\ngoal (1 subgoal):\n 1. \\<And>x k b v1 v2 v1' v2'.\n       \\<lbrakk>x \\<in> e1; x = (k, b); b = (v1, v2);\n        (v1, v1') \\<in> h1 O h2 \\<and> (v2, v2') \\<in> h1 O h2\\<rbrakk>\n       \\<Longrightarrow> (k, v1', v2') \\<in> e3", "then"], ["proof (chain)\npicking this:\n  (k, v1, v2) \\<in> e1\n  (v1, v1'') \\<in> h1 O h2\n  (v2, v2'') \\<in> h1 O h2", "obtain v1' v2' where\n    v:\"(v1,v1') \\<in> h1\" \"(v1',v1'') \\<in> h2\" \"(v2,v2') \\<in> h1\" \"(v2',v2'') \\<in> h2\""], ["proof (prove)\nusing this:\n  (k, v1, v2) \\<in> e1\n  (v1, v1'') \\<in> h1 O h2\n  (v2, v2'') \\<in> h1 O h2\n\ngoal (1 subgoal):\n 1. (\\<And>v1' v2'.\n        \\<lbrakk>(v1, v1') \\<in> h1; (v1', v1'') \\<in> h2;\n         (v2, v2') \\<in> h1; (v2', v2'') \\<in> h2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  (v1, v1') \\<in> h1\n  (v1', v1'') \\<in> h2\n  (v2, v2') \\<in> h1\n  (v2', v2'') \\<in> h2\n\ngoal (1 subgoal):\n 1. \\<And>x k b v1 v2 v1' v2'.\n       \\<lbrakk>x \\<in> e1; x = (k, b); b = (v1, v2);\n        (v1, v1') \\<in> h1 O h2 \\<and> (v2, v2') \\<in> h1 O h2\\<rbrakk>\n       \\<Longrightarrow> (k, v1', v2') \\<in> e3", "from edge_preserving_atomic[OF assms(1) v(1,3) 1(1)]\n       edge_preserving_atomic[OF assms(2) v(2,4)]"], ["proof (chain)\npicking this:\n  (k, v1', v2') \\<in> e2\n  (?k, v1', v2') \\<in> e2 \\<Longrightarrow> (?k, v1'', v2'') \\<in> e3", "show ?case"], ["proof (prove)\nusing this:\n  (k, v1', v2') \\<in> e2\n  (?k, v1', v2') \\<in> e2 \\<Longrightarrow> (?k, v1'', v2'') \\<in> e3\n\ngoal (1 subgoal):\n 1. (k, v1'', v2'') \\<in> e3", "by metis"], ["proof (state)\nthis:\n  (k, v1'', v2'') \\<in> e3\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma edge_preserving_Id[intro]: \"edge_preserving (Id_on y) x x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. edge_preserving (Id_on y) x x", "unfolding edge_preserving_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>(k, v1, v2)\\<in>x.\n       \\<forall>v1' v2'.\n          (v1, v1') \\<in> Id_on y \\<and>\n          (v2, v2') \\<in> Id_on y \\<longrightarrow>\n          (k, v1', v2') \\<in> x", "by auto"], ["", "text \\<open>This is an alternate version of definition 10. We require @term{vertices s = Domain h}\n   to ensure that graph homomorphisms are sufficiently unique:\n   The partiality follows the definition in the paper, per the remark before Def. 7.\n   but it means that we cannot use Isabelle's total functions for the homomorphisms.\n   We show that graph homomorphisms and embeddings coincide in a separate lemma.\\<close>"], ["", "definition graph_homomorphism where\n  \"graph_homomorphism G\\<^sub>1 G\\<^sub>2 f \n    = ( vertices G\\<^sub>1 = Domain f\n      \\<and> graph G\\<^sub>1 \\<and> graph G\\<^sub>2\n      \\<and> f `` vertices G\\<^sub>1 \\<subseteq> vertices G\\<^sub>2\n      \\<and> univalent f\n      \\<and> edge_preserving f (edges G\\<^sub>1) (edges G\\<^sub>2)\n      )\""], ["", "lemma graph_homomorphismI:\n  assumes \"vertices s = Domain h\"\n          \"h `` vertices s \\<subseteq> vertices t\"\n          \"univalent h\"\n          \"edge_preserving h (edges s) (edges t)\"\n          \"s = restrict s\" \"t = restrict t\"\n  shows \"graph_homomorphism s t h\""], ["proof (prove)\ngoal (1 subgoal):\n 1. graph_homomorphism s t h", "using assms"], ["proof (prove)\nusing this:\n  vertices s = Domain h\n  h `` vertices s \\<subseteq> vertices t\n  univalent h\n  edge_preserving h (edges s) (edges t)\n  graph s\n  graph t\n\ngoal (1 subgoal):\n 1. graph_homomorphism s t h", "unfolding graph_homomorphism_def"], ["proof (prove)\nusing this:\n  vertices s = Domain h\n  h `` vertices s \\<subseteq> vertices t\n  univalent h\n  edge_preserving h (edges s) (edges t)\n  graph s\n  graph t\n\ngoal (1 subgoal):\n 1. vertices s = Domain h \\<and>\n    graph s \\<and>\n    graph t \\<and>\n    h `` vertices s \\<subseteq> vertices t \\<and>\n    univalent h \\<and> edge_preserving h (edges s) (edges t)", "by auto"], ["", "lemma graph_homomorphism_composes[intro]:\n  assumes \"graph_homomorphism a b x\"\n          \"graph_homomorphism b c y\"\n  shows \"graph_homomorphism a c (x O y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. graph_homomorphism a c (x O y)", "proof(rule graph_homomorphismI,goal_cases)"], ["proof (state)\ngoal (6 subgoals):\n 1. vertices a = Domain (x O y)\n 2. (x O y) `` vertices a \\<subseteq> vertices c\n 3. univalent (x O y)\n 4. edge_preserving (x O y) (edges a) (edges c)\n 5. graph a\n 6. graph c", "case 1"], ["proof (state)\nthis:\n  \n\ngoal (6 subgoals):\n 1. vertices a = Domain (x O y)\n 2. (x O y) `` vertices a \\<subseteq> vertices c\n 3. univalent (x O y)\n 4. edge_preserving (x O y) (edges a) (edges c)\n 5. graph a\n 6. graph c", "have \"vertices a \\<subseteq> Domain x\" \"x `` vertices a \\<subseteq> Domain y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vertices a \\<subseteq> Domain x &&& x `` vertices a \\<subseteq> Domain y", "using assms(1,2)[unfolded graph_homomorphism_def]"], ["proof (prove)\nusing this:\n  vertices a = Domain x \\<and>\n  graph a \\<and>\n  graph b \\<and>\n  x `` vertices a \\<subseteq> vertices b \\<and>\n  univalent x \\<and> edge_preserving x (edges a) (edges b)\n  vertices b = Domain y \\<and>\n  graph b \\<and>\n  graph c \\<and>\n  y `` vertices b \\<subseteq> vertices c \\<and>\n  univalent y \\<and> edge_preserving y (edges b) (edges c)\n\ngoal (1 subgoal):\n 1. vertices a \\<subseteq> Domain x &&& x `` vertices a \\<subseteq> Domain y", "by blast+"], ["proof (state)\nthis:\n  vertices a \\<subseteq> Domain x\n  x `` vertices a \\<subseteq> Domain y\n\ngoal (6 subgoals):\n 1. vertices a = Domain (x O y)\n 2. (x O y) `` vertices a \\<subseteq> vertices c\n 3. univalent (x O y)\n 4. edge_preserving (x O y) (edges a) (edges c)\n 5. graph a\n 6. graph c", "from this Domain_O[OF this]"], ["proof (chain)\npicking this:\n  vertices a \\<subseteq> Domain x\n  x `` vertices a \\<subseteq> Domain y\n  vertices a \\<subseteq> Domain (x O y)", "show ?case"], ["proof (prove)\nusing this:\n  vertices a \\<subseteq> Domain x\n  x `` vertices a \\<subseteq> Domain y\n  vertices a \\<subseteq> Domain (x O y)\n\ngoal (1 subgoal):\n 1. vertices a = Domain (x O y)", "using assms[unfolded graph_homomorphism_def]"], ["proof (prove)\nusing this:\n  vertices a \\<subseteq> Domain x\n  x `` vertices a \\<subseteq> Domain y\n  vertices a \\<subseteq> Domain (x O y)\n  vertices a = Domain x \\<and>\n  graph a \\<and>\n  graph b \\<and>\n  x `` vertices a \\<subseteq> vertices b \\<and>\n  univalent x \\<and> edge_preserving x (edges a) (edges b)\n  vertices b = Domain y \\<and>\n  graph b \\<and>\n  graph c \\<and>\n  y `` vertices b \\<subseteq> vertices c \\<and>\n  univalent y \\<and> edge_preserving y (edges b) (edges c)\n\ngoal (1 subgoal):\n 1. vertices a = Domain (x O y)", "by auto"], ["proof (state)\nthis:\n  vertices a = Domain (x O y)\n\ngoal (5 subgoals):\n 1. (x O y) `` vertices a \\<subseteq> vertices c\n 2. univalent (x O y)\n 3. edge_preserving (x O y) (edges a) (edges c)\n 4. graph a\n 5. graph c", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. (x O y) `` vertices a \\<subseteq> vertices c\n 2. univalent (x O y)\n 3. edge_preserving (x O y) (edges a) (edges c)\n 4. graph a\n 5. graph c", "case 2"], ["proof (state)\nthis:\n  \n\ngoal (5 subgoals):\n 1. (x O y) `` vertices a \\<subseteq> vertices c\n 2. univalent (x O y)\n 3. edge_preserving (x O y) (edges a) (edges c)\n 4. graph a\n 5. graph c", "from assms"], ["proof (chain)\npicking this:\n  graph_homomorphism a b x\n  graph_homomorphism b c y", "show ?case"], ["proof (prove)\nusing this:\n  graph_homomorphism a b x\n  graph_homomorphism b c y\n\ngoal (1 subgoal):\n 1. (x O y) `` vertices a \\<subseteq> vertices c", "unfolding graph_homomorphism_def"], ["proof (prove)\nusing this:\n  vertices a = Domain x \\<and>\n  graph a \\<and>\n  graph b \\<and>\n  x `` vertices a \\<subseteq> vertices b \\<and>\n  univalent x \\<and> edge_preserving x (edges a) (edges b)\n  vertices b = Domain y \\<and>\n  graph b \\<and>\n  graph c \\<and>\n  y `` vertices b \\<subseteq> vertices c \\<and>\n  univalent y \\<and> edge_preserving y (edges b) (edges c)\n\ngoal (1 subgoal):\n 1. (x O y) `` vertices a \\<subseteq> vertices c", "by blast"], ["proof (state)\nthis:\n  (x O y) `` vertices a \\<subseteq> vertices c\n\ngoal (4 subgoals):\n 1. univalent (x O y)\n 2. edge_preserving (x O y) (edges a) (edges c)\n 3. graph a\n 4. graph c", "qed (insert assms,auto simp:graph_homomorphism_def intro:compose_preserves_edge_preserving)"], ["", "lemma graph_homomorphism_empty[simp]:\n  \"graph_homomorphism (LG {} {}) G f \\<longleftrightarrow> f = {} \\<and> graph G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. graph_homomorphism (LG {} {}) G f = (f = {} \\<and> graph G)", "unfolding graph_homomorphism_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (vertices (LG {} {}) = Domain f \\<and>\n     graph (LG {} {}) \\<and>\n     graph G \\<and>\n     f `` vertices (LG {} {}) \\<subseteq> vertices G \\<and>\n     univalent f \\<and> edge_preserving f (edges (LG {} {})) (edges G)) =\n    (f = {} \\<and> graph G)", "by auto"], ["", "lemma graph_homomorphism_Id[intro]:\n  shows \"graph_homomorphism (restrict a) (restrict a) (Id_on (vertices a))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. graph_homomorphism (restrict a) (restrict a) (Id_on (vertices a))", "by (rule graph_homomorphismI;auto simp:edge_preserving_def)"], ["", "lemma Id_on_vertices_identity:\n  assumes \"graph_homomorphism a b f\"\n          \"(aa, ba) \\<in> f\"\n  shows \"(aa, ba) \\<in> Id_on (vertices a) O f\"\n        \"(aa, ba) \\<in> f O Id_on (vertices b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (aa, ba) \\<in> Id_on (vertices a) O f &&&\n    (aa, ba) \\<in> f O Id_on (vertices b)", "using assms"], ["proof (prove)\nusing this:\n  graph_homomorphism a b f\n  (aa, ba) \\<in> f\n\ngoal (1 subgoal):\n 1. (aa, ba) \\<in> Id_on (vertices a) O f &&&\n    (aa, ba) \\<in> f O Id_on (vertices b)", "unfolding graph_homomorphism_def"], ["proof (prove)\nusing this:\n  vertices a = Domain f \\<and>\n  graph a \\<and>\n  graph b \\<and>\n  f `` vertices a \\<subseteq> vertices b \\<and>\n  univalent f \\<and> edge_preserving f (edges a) (edges b)\n  (aa, ba) \\<in> f\n\ngoal (1 subgoal):\n 1. (aa, ba) \\<in> Id_on (vertices a) O f &&&\n    (aa, ba) \\<in> f O Id_on (vertices b)", "by auto"], ["", "text \\<open>Alternate version of definition 7.\\<close>"], ["", "abbreviation subgraph\n  where \"subgraph G\\<^sub>1 G\\<^sub>2 \n  \\<equiv> graph_homomorphism G\\<^sub>1 G\\<^sub>2 (Id_on (vertices G\\<^sub>1))\""], ["", "lemma subgraph_trans:\n  assumes \"subgraph G\\<^sub>1 G\\<^sub>2\" \"subgraph G\\<^sub>2 G\\<^sub>3\"\n  shows \"subgraph G\\<^sub>1 G\\<^sub>3\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subgraph G\\<^sub>1 G\\<^sub>3", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. subgraph G\\<^sub>1 G\\<^sub>3", "from assms[unfolded graph_homomorphism_def]"], ["proof (chain)\npicking this:\n  vertices G\\<^sub>1 = Domain (Id_on (vertices G\\<^sub>1)) \\<and>\n  graph G\\<^sub>1 \\<and>\n  graph G\\<^sub>2 \\<and>\n  Id_on (vertices G\\<^sub>1) `` vertices G\\<^sub>1\n  \\<subseteq> vertices G\\<^sub>2 \\<and>\n  univalent (Id_on (vertices G\\<^sub>1)) \\<and>\n  edge_preserving (Id_on (vertices G\\<^sub>1)) (edges G\\<^sub>1)\n   (edges G\\<^sub>2)\n  vertices G\\<^sub>2 = Domain (Id_on (vertices G\\<^sub>2)) \\<and>\n  graph G\\<^sub>2 \\<and>\n  graph G\\<^sub>3 \\<and>\n  Id_on (vertices G\\<^sub>2) `` vertices G\\<^sub>2\n  \\<subseteq> vertices G\\<^sub>3 \\<and>\n  univalent (Id_on (vertices G\\<^sub>2)) \\<and>\n  edge_preserving (Id_on (vertices G\\<^sub>2)) (edges G\\<^sub>2)\n   (edges G\\<^sub>3)", "have \"Id_on (vertices G\\<^sub>1) O Id_on (vertices G\\<^sub>2) = Id_on (vertices G\\<^sub>1)\""], ["proof (prove)\nusing this:\n  vertices G\\<^sub>1 = Domain (Id_on (vertices G\\<^sub>1)) \\<and>\n  graph G\\<^sub>1 \\<and>\n  graph G\\<^sub>2 \\<and>\n  Id_on (vertices G\\<^sub>1) `` vertices G\\<^sub>1\n  \\<subseteq> vertices G\\<^sub>2 \\<and>\n  univalent (Id_on (vertices G\\<^sub>1)) \\<and>\n  edge_preserving (Id_on (vertices G\\<^sub>1)) (edges G\\<^sub>1)\n   (edges G\\<^sub>2)\n  vertices G\\<^sub>2 = Domain (Id_on (vertices G\\<^sub>2)) \\<and>\n  graph G\\<^sub>2 \\<and>\n  graph G\\<^sub>3 \\<and>\n  Id_on (vertices G\\<^sub>2) `` vertices G\\<^sub>2\n  \\<subseteq> vertices G\\<^sub>3 \\<and>\n  univalent (Id_on (vertices G\\<^sub>2)) \\<and>\n  edge_preserving (Id_on (vertices G\\<^sub>2)) (edges G\\<^sub>2)\n   (edges G\\<^sub>3)\n\ngoal (1 subgoal):\n 1. Id_on (vertices G\\<^sub>1) O Id_on (vertices G\\<^sub>2) =\n    Id_on (vertices G\\<^sub>1)", "by auto"], ["proof (state)\nthis:\n  Id_on (vertices G\\<^sub>1) O Id_on (vertices G\\<^sub>2) =\n  Id_on (vertices G\\<^sub>1)\n\ngoal (1 subgoal):\n 1. subgraph G\\<^sub>1 G\\<^sub>3", "with graph_homomorphism_composes[OF assms]"], ["proof (chain)\npicking this:\n  graph_homomorphism G\\<^sub>1 G\\<^sub>3\n   (Id_on (vertices G\\<^sub>1) O Id_on (vertices G\\<^sub>2))\n  Id_on (vertices G\\<^sub>1) O Id_on (vertices G\\<^sub>2) =\n  Id_on (vertices G\\<^sub>1)", "show ?thesis"], ["proof (prove)\nusing this:\n  graph_homomorphism G\\<^sub>1 G\\<^sub>3\n   (Id_on (vertices G\\<^sub>1) O Id_on (vertices G\\<^sub>2))\n  Id_on (vertices G\\<^sub>1) O Id_on (vertices G\\<^sub>2) =\n  Id_on (vertices G\\<^sub>1)\n\ngoal (1 subgoal):\n 1. subgraph G\\<^sub>1 G\\<^sub>3", "by auto"], ["proof (state)\nthis:\n  subgraph G\\<^sub>1 G\\<^sub>3\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open> Just before Definition 7 in the paper, a notation is introduced for applying a function to\n       a graph. We use @{term map_graph} for this, and the version @{term map_graph_fn} in\n       case that its first argument is a total function rather than a partial one. \\<close>"], ["", "(* Introducing the map notation just above Def 7 in the paper *)"], ["", "definition map_graph :: \"('c \\<times> 'b) set \\<Rightarrow> ('a, 'c) labeled_graph \\<Rightarrow> ('a, 'b) labeled_graph\" where\n  \"map_graph f G = LG (on_triple f `` (edges G)) (f `` (vertices G))\""], ["", "lemma map_graph_selectors[simp]:\n  \"vertices (map_graph f G) = f `` (vertices G)\"\n  \"edges (map_graph f G) = on_triple f `` (edges G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vertices (map_graph f G) = f `` vertices G &&&\n    edges (map_graph f G) = on_triple f `` edges G", "unfolding map_graph_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. vertices (LG (on_triple f `` edges G) (f `` vertices G)) =\n    f `` vertices G &&&\n    edges (LG (on_triple f `` edges G) (f `` vertices G)) =\n    on_triple f `` edges G", "by auto"], ["", "lemma map_graph_comp[simp]:\n  assumes \"Range g \\<subseteq> Domain f\"\n  shows \"map_graph (g O f) = map_graph f o map_graph g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map_graph (g O f) = map_graph f \\<circ> map_graph g", "proof(standard,goal_cases)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. map_graph (g O f) x = (map_graph f \\<circ> map_graph g) x", "(* need goal_cases to get the type of x right *)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. map_graph (g O f) x = (map_graph f \\<circ> map_graph g) x", "case (1 x)"], ["proof (state)\nthis:\n  \n\ngoal (1 subgoal):\n 1. \\<And>x. map_graph (g O f) x = (map_graph f \\<circ> map_graph g) x", "from assms"], ["proof (chain)\npicking this:\n  Range g \\<subseteq> Domain f", "have \"map_graph (g O f) x = (map_graph f o map_graph g) x\""], ["proof (prove)\nusing this:\n  Range g \\<subseteq> Domain f\n\ngoal (1 subgoal):\n 1. map_graph (g O f) x = (map_graph f \\<circ> map_graph g) x", "unfolding map_graph_def"], ["proof (prove)\nusing this:\n  Range g \\<subseteq> Domain f\n\ngoal (1 subgoal):\n 1. LG (on_triple (g O f) `` edges x) ((g O f) `` vertices x) =\n    ((\\<lambda>G. LG (on_triple f `` edges G) (f `` vertices G)) \\<circ>\n     (\\<lambda>G. LG (on_triple g `` edges G) (g `` vertices G)))\n     x", "by auto"], ["proof (state)\nthis:\n  map_graph (g O f) x = (map_graph f \\<circ> map_graph g) x\n\ngoal (1 subgoal):\n 1. \\<And>x. map_graph (g O f) x = (map_graph f \\<circ> map_graph g) x", "thus ?case"], ["proof (prove)\nusing this:\n  map_graph (g O f) x = (map_graph f \\<circ> map_graph g) x\n\ngoal (1 subgoal):\n 1. map_graph (g O f) x = (map_graph f \\<circ> map_graph g) x", "by auto"], ["proof (state)\nthis:\n  map_graph (g O f) x = (map_graph f \\<circ> map_graph g) x\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma map_graph_returns_restricted:\n  assumes \"vertices G = Domain f\"\n  shows \"map_graph f G = restrict (map_graph f G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. graph (map_graph f G)", "using assms"], ["proof (prove)\nusing this:\n  vertices G = Domain f\n\ngoal (1 subgoal):\n 1. graph (map_graph f G)", "by(cases G,auto simp:map_graph_def restrict_def)"], ["", "lemma map_graph_preserves_restricted[intro]:\n  assumes \"graph G\"\n  shows \"graph (map_graph f G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. graph (map_graph f G)", "proof(rule restrictI,standard)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> edges (map_graph f G) \\<Longrightarrow>\n       x \\<in> {(l, v1, v2).\n                v1 \\<in> vertices (map_graph f G) \\<and>\n                v2 \\<in> vertices (map_graph f G)}", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> edges (map_graph f G) \\<Longrightarrow>\n       x \\<in> {(l, v1, v2).\n                v1 \\<in> vertices (map_graph f G) \\<and>\n                v2 \\<in> vertices (map_graph f G)}", "assume \"x \\<in> edges (map_graph f G)\""], ["proof (state)\nthis:\n  x \\<in> edges (map_graph f G)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> edges (map_graph f G) \\<Longrightarrow>\n       x \\<in> {(l, v1, v2).\n                v1 \\<in> vertices (map_graph f G) \\<and>\n                v2 \\<in> vertices (map_graph f G)}", "with assms"], ["proof (chain)\npicking this:\n  graph G\n  x \\<in> edges (map_graph f G)", "show \"x \\<in> {(l, v1, v2). v1\\<in>vertices (map_graph f G) \\<and> v2\\<in>vertices (map_graph f G)}\""], ["proof (prove)\nusing this:\n  graph G\n  x \\<in> edges (map_graph f G)\n\ngoal (1 subgoal):\n 1. x \\<in> {(l, v1, v2).\n             v1 \\<in> vertices (map_graph f G) \\<and>\n             v2 \\<in> vertices (map_graph f G)}", "by(cases x,auto simp:map_graph_def)"], ["proof (state)\nthis:\n  x \\<in> {(l, v1, v2).\n           v1 \\<in> vertices (map_graph f G) \\<and>\n           v2 \\<in> vertices (map_graph f G)}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma map_graph_edge_preserving[intro]:\n  shows \"edge_preserving f (edges G) (edges (map_graph f G))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. edge_preserving f (edges G) (edges (map_graph f G))", "unfolding map_graph_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. edge_preserving f (edges G)\n     (edges (LG (on_triple f `` edges G) (f `` vertices G)))", "by auto"], ["", "lemma map_graph_homo[intro]:\n  assumes \"univalent f\" \"vertices G = Domain f\" \"G = restrict G\"\n  shows \"graph_homomorphism G (map_graph f G) f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. graph_homomorphism G (map_graph f G) f", "proof(rule graph_homomorphismI)"], ["proof (state)\ngoal (6 subgoals):\n 1. vertices G = Domain f\n 2. f `` vertices G \\<subseteq> vertices (map_graph f G)\n 3. univalent f\n 4. edge_preserving f (edges G) (edges (map_graph f G))\n 5. graph G\n 6. graph (map_graph f G)", "show \"f `` vertices G \\<subseteq> vertices (map_graph f G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f `` vertices G \\<subseteq> vertices (map_graph f G)", "unfolding map_graph_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. f `` vertices G\n    \\<subseteq> vertices (LG (on_triple f `` edges G) (f `` vertices G))", "by auto"], ["proof (state)\nthis:\n  f `` vertices G \\<subseteq> vertices (map_graph f G)\n\ngoal (5 subgoals):\n 1. vertices G = Domain f\n 2. univalent f\n 3. edge_preserving f (edges G) (edges (map_graph f G))\n 4. graph G\n 5. graph (map_graph f G)", "show \"edge_preserving f (edges G) (edges (map_graph f G))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. edge_preserving f (edges G) (edges (map_graph f G))", "by auto"], ["proof (state)\nthis:\n  edge_preserving f (edges G) (edges (map_graph f G))\n\ngoal (4 subgoals):\n 1. vertices G = Domain f\n 2. univalent f\n 3. graph G\n 4. graph (map_graph f G)", "show \"map_graph f G = restrict (map_graph f G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. graph (map_graph f G)", "using assms"], ["proof (prove)\nusing this:\n  univalent f\n  vertices G = Domain f\n  graph G\n\ngoal (1 subgoal):\n 1. graph (map_graph f G)", "by auto"], ["proof (state)\nthis:\n  graph (map_graph f G)\n\ngoal (3 subgoals):\n 1. vertices G = Domain f\n 2. univalent f\n 3. graph G", "qed fact+"], ["", "lemma map_graph_homo_simp:\n  \"graph_homomorphism G (map_graph f G) f\n   \\<longleftrightarrow> univalent f \\<and> vertices G = Domain f \\<and> graph G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. graph_homomorphism G (map_graph f G) f =\n    (univalent f \\<and> vertices G = Domain f \\<and> graph G)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. graph_homomorphism G (map_graph f G) f \\<Longrightarrow>\n    univalent f \\<and> vertices G = Domain f \\<and> graph G\n 2. univalent f \\<and>\n    vertices G = Domain f \\<and> graph G \\<Longrightarrow>\n    graph_homomorphism G (map_graph f G) f", "show \"graph_homomorphism G (map_graph f G) f \\<Longrightarrow>\n    univalent f \\<and> vertices G = Domain f \\<and> G = restrict G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. graph_homomorphism G (map_graph f G) f \\<Longrightarrow>\n    univalent f \\<and> vertices G = Domain f \\<and> graph G", "unfolding graph_homomorphism_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. vertices G = Domain f \\<and>\n    graph G \\<and>\n    graph (map_graph f G) \\<and>\n    f `` vertices G \\<subseteq> vertices (map_graph f G) \\<and>\n    univalent f \\<and>\n    edge_preserving f (edges G) (edges (map_graph f G)) \\<Longrightarrow>\n    univalent f \\<and> vertices G = Domain f \\<and> graph G", "by blast"], ["proof (state)\nthis:\n  graph_homomorphism G (map_graph f G) f \\<Longrightarrow>\n  univalent f \\<and> vertices G = Domain f \\<and> graph G\n\ngoal (1 subgoal):\n 1. univalent f \\<and>\n    vertices G = Domain f \\<and> graph G \\<Longrightarrow>\n    graph_homomorphism G (map_graph f G) f", "qed auto"], ["", "abbreviation on_graph where\n\"on_graph G f \\<equiv> BNF_Def.Gr (vertices G) f\""], ["", "abbreviation map_graph_fn where\n\"map_graph_fn G f \\<equiv> map_graph (on_graph G f) G\""], ["", "lemma map_graph_fn_graphI[intro]:\n\"graph (map_graph_fn G f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. graph (map_graph_fn G f)", "unfolding map_graph_def restrict_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. LG (on_triple (on_graph G f) `` edges G) (on_graph G f `` vertices G) =\n    LG {(l, v1, v2).\n        (l, v1, v2)\n        \\<in> edges\n               (LG (on_triple (on_graph G f) `` edges G)\n                 (on_graph G f `` vertices G)) \\<and>\n        v1 \\<in> vertices\n                  (LG (on_triple (on_graph G f) `` edges G)\n                    (on_graph G f `` vertices G)) \\<and>\n        v2 \\<in> vertices\n                  (LG (on_triple (on_graph G f) `` edges G)\n                    (on_graph G f `` vertices G))}\n     (vertices\n       (LG (on_triple (on_graph G f) `` edges G)\n         (on_graph G f `` vertices G)))", "by auto"], ["", "lemma on_graph_id[simp]:\n  shows \"on_graph B id = Id_on (vertices B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. on_graph B id = Id_on (vertices B)", "unfolding BNF_Def.Gr_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {(a, id a) |a. a \\<in> vertices B} = Id_on (vertices B)", "by auto"], ["", "lemma in_on_graph[intro]:\n  assumes \"x \\<in> vertices G\" \"(a x,y) \\<in> b\"\n  shows \"(x, y) \\<in> on_graph G a O b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x, y) \\<in> on_graph G a O b", "using assms"], ["proof (prove)\nusing this:\n  x \\<in> vertices G\n  (a x, y) \\<in> b\n\ngoal (1 subgoal):\n 1. (x, y) \\<in> on_graph G a O b", "unfolding BNF_Def.Gr_def"], ["proof (prove)\nusing this:\n  x \\<in> vertices G\n  (a x, y) \\<in> b\n\ngoal (1 subgoal):\n 1. (x, y) \\<in> {(aa, a aa) |aa. aa \\<in> vertices G} O b", "by auto"], ["", "lemma on_graph_comp:\n  \"on_graph G (f o g) = on_graph G g O on_graph (map_graph_fn G g) f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. on_graph G (f \\<circ> g) = on_graph G g O on_graph (map_graph_fn G g) f", "unfolding BNF_Def.Gr_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {(a, (f \\<circ> g) a) |a. a \\<in> vertices G} =\n    {(a, g a) |a. a \\<in> vertices G} O\n    {(a, f a) |a.\n     a \\<in> vertices (map_graph {(a, g a) |a. a \\<in> vertices G} G)}", "by auto"], ["", "lemma map_graph_fn_eqI:\n  assumes \"\\<And> x. x \\<in> vertices G \\<Longrightarrow> f x = g x\"\n  shows \"map_graph_fn G f = map_graph_fn G g\" (is \"?l = ?r\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. map_graph_fn G f = map_graph_fn G g", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. map_graph_fn G f = map_graph_fn G g", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. map_graph_fn G f = map_graph_fn G g", "fix a ac ba"], ["proof (state)\ngoal (1 subgoal):\n 1. map_graph_fn G f = map_graph_fn G g", "assume \"(a, ac, ba) \\<in> edges G\" \"ac \\<in> vertices G\" \"ba \\<in> vertices G\""], ["proof (state)\nthis:\n  (a, ac, ba) \\<in> edges G\n  ac \\<in> vertices G\n  ba \\<in> vertices G\n\ngoal (1 subgoal):\n 1. map_graph_fn G f = map_graph_fn G g", "hence \"\\<exists>x\\<in>edges G. (x, a, g ac, g ba) \\<in> on_triple (on_graph G f)\"\n          \"\\<exists>x\\<in>edges G. (x, a, g ac, g ba) \\<in> on_triple (on_graph G g)\""], ["proof (prove)\nusing this:\n  (a, ac, ba) \\<in> edges G\n  ac \\<in> vertices G\n  ba \\<in> vertices G\n\ngoal (1 subgoal):\n 1. \\<exists>x\\<in>edges G.\n       (x, a, g ac, g ba) \\<in> on_triple (on_graph G f) &&&\n    \\<exists>x\\<in>edges G.\n       (x, a, g ac, g ba) \\<in> on_triple (on_graph G g)", "using assms"], ["proof (prove)\nusing this:\n  (a, ac, ba) \\<in> edges G\n  ac \\<in> vertices G\n  ba \\<in> vertices G\n  ?x \\<in> vertices G \\<Longrightarrow> f ?x = g ?x\n\ngoal (1 subgoal):\n 1. \\<exists>x\\<in>edges G.\n       (x, a, g ac, g ba) \\<in> on_triple (on_graph G f) &&&\n    \\<exists>x\\<in>edges G.\n       (x, a, g ac, g ba) \\<in> on_triple (on_graph G g)", "by (metis in_Gr on_triple)+"], ["proof (state)\nthis:\n  \\<exists>x\\<in>edges G. (x, a, g ac, g ba) \\<in> on_triple (on_graph G f)\n  \\<exists>x\\<in>edges G. (x, a, g ac, g ba) \\<in> on_triple (on_graph G g)\n\ngoal (1 subgoal):\n 1. map_graph_fn G f = map_graph_fn G g", "}"], ["proof (state)\nthis:\n  \\<lbrakk>(?a2, ?ac2, ?ba2) \\<in> edges G; ?ac2 \\<in> vertices G;\n   ?ba2 \\<in> vertices G\\<rbrakk>\n  \\<Longrightarrow> \\<exists>x\\<in>edges G.\n                       (x, ?a2, g ?ac2, g ?ba2)\n                       \\<in> on_triple (on_graph G f)\n  \\<lbrakk>(?a2, ?ac2, ?ba2) \\<in> edges G; ?ac2 \\<in> vertices G;\n   ?ba2 \\<in> vertices G\\<rbrakk>\n  \\<Longrightarrow> \\<exists>x\\<in>edges G.\n                       (x, ?a2, g ?ac2, g ?ba2)\n                       \\<in> on_triple (on_graph G g)\n\ngoal (1 subgoal):\n 1. map_graph_fn G f = map_graph_fn G g", "hence e:\"edges ?l = edges ?r\""], ["proof (prove)\nusing this:\n  \\<lbrakk>(?a2, ?ac2, ?ba2) \\<in> edges G; ?ac2 \\<in> vertices G;\n   ?ba2 \\<in> vertices G\\<rbrakk>\n  \\<Longrightarrow> \\<exists>x\\<in>edges G.\n                       (x, ?a2, g ?ac2, g ?ba2)\n                       \\<in> on_triple (on_graph G f)\n  \\<lbrakk>(?a2, ?ac2, ?ba2) \\<in> edges G; ?ac2 \\<in> vertices G;\n   ?ba2 \\<in> vertices G\\<rbrakk>\n  \\<Longrightarrow> \\<exists>x\\<in>edges G.\n                       (x, ?a2, g ?ac2, g ?ba2)\n                       \\<in> on_triple (on_graph G g)\n\ngoal (1 subgoal):\n 1. edges (map_graph_fn G f) = edges (map_graph_fn G g)", "using assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>(?a2, ?ac2, ?ba2) \\<in> edges G; ?ac2 \\<in> vertices G;\n   ?ba2 \\<in> vertices G\\<rbrakk>\n  \\<Longrightarrow> \\<exists>x\\<in>edges G.\n                       (x, ?a2, g ?ac2, g ?ba2)\n                       \\<in> on_triple (on_graph G f)\n  \\<lbrakk>(?a2, ?ac2, ?ba2) \\<in> edges G; ?ac2 \\<in> vertices G;\n   ?ba2 \\<in> vertices G\\<rbrakk>\n  \\<Longrightarrow> \\<exists>x\\<in>edges G.\n                       (x, ?a2, g ?ac2, g ?ba2)\n                       \\<in> on_triple (on_graph G g)\n  ?x \\<in> vertices G \\<Longrightarrow> f ?x = g ?x\n\ngoal (1 subgoal):\n 1. edges (map_graph_fn G f) = edges (map_graph_fn G g)", "by (auto simp:Image_def)"], ["proof (state)\nthis:\n  edges (map_graph_fn G f) = edges (map_graph_fn G g)\n\ngoal (1 subgoal):\n 1. map_graph_fn G f = map_graph_fn G g", "have v:\"vertices ?l = vertices ?r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vertices (map_graph_fn G f) = vertices (map_graph_fn G g)", "using assms"], ["proof (prove)\nusing this:\n  ?x \\<in> vertices G \\<Longrightarrow> f ?x = g ?x\n\ngoal (1 subgoal):\n 1. vertices (map_graph_fn G f) = vertices (map_graph_fn G g)", "by (auto simp:image_def)"], ["proof (state)\nthis:\n  vertices (map_graph_fn G f) = vertices (map_graph_fn G g)\n\ngoal (1 subgoal):\n 1. map_graph_fn G f = map_graph_fn G g", "from e v"], ["proof (chain)\npicking this:\n  edges (map_graph_fn G f) = edges (map_graph_fn G g)\n  vertices (map_graph_fn G f) = vertices (map_graph_fn G g)", "show ?thesis"], ["proof (prove)\nusing this:\n  edges (map_graph_fn G f) = edges (map_graph_fn G g)\n  vertices (map_graph_fn G f) = vertices (map_graph_fn G g)\n\ngoal (1 subgoal):\n 1. map_graph_fn G f = map_graph_fn G g", "by(cases ?l,cases ?r,auto)"], ["proof (state)\nthis:\n  map_graph_fn G f = map_graph_fn G g\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma map_graph_fn_comp[simp]:\n\"map_graph_fn G (f o g) = map_graph_fn (map_graph_fn G g) f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map_graph_fn G (f \\<circ> g) = map_graph_fn (map_graph_fn G g) f", "unfolding on_graph_comp"], ["proof (prove)\ngoal (1 subgoal):\n 1. map_graph (on_graph G g O on_graph (map_graph_fn G g) f) G =\n    map_graph_fn (map_graph_fn G g) f", "by auto"], ["", "lemma map_graph_fn_id[simp]:\n\"map_graph_fn X id = restrict X\"\n\"map_graph (Id_on (vertices X)) X = restrict X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map_graph_fn X id = restrict X &&&\n    map_graph (Id_on (vertices X)) X = restrict X", "unfolding BNF_Def.Gr_def map_graph_def on_triple_def restrict_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. LG ({((l, s, t), l', s', t').\n         l = l' \\<and>\n         (s, s') \\<in> {(a, id a) |a. a \\<in> vertices X} \\<and>\n         (t, t') \\<in> {(a, id a) |a. a \\<in> vertices X}} ``\n        edges X)\n     ({(a, id a) |a. a \\<in> vertices X} `` vertices X) =\n    LG {(l, v1, v2).\n        (l, v1, v2) \\<in> edges X \\<and>\n        v1 \\<in> vertices X \\<and> v2 \\<in> vertices X}\n     (vertices X) &&&\n    LG ({((l, s, t), l', s', t').\n         l = l' \\<and>\n         (s, s') \\<in> Id_on (vertices X) \\<and>\n         (t, t') \\<in> Id_on (vertices X)} ``\n        edges X)\n     (Id_on (vertices X) `` vertices X) =\n    LG {(l, v1, v2).\n        (l, v1, v2) \\<in> edges X \\<and>\n        v1 \\<in> vertices X \\<and> v2 \\<in> vertices X}\n     (vertices X)", "by (cases X,force)+"], ["", "lemma graph_homo[intro!]:\n  assumes \"graph G\"\n  shows \"graph_homomorphism G (map_graph_fn G f) (on_graph G f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. graph_homomorphism G (map_graph_fn G f) (on_graph G f)", "using assms"], ["proof (prove)\nusing this:\n  graph G\n\ngoal (1 subgoal):\n 1. graph_homomorphism G (map_graph_fn G f) (on_graph G f)", "unfolding map_graph_homo_simp BNF_Def.Gr_def univalent_def"], ["proof (prove)\nusing this:\n  graph G\n\ngoal (1 subgoal):\n 1. (\\<forall>x y z.\n        (x, y) \\<in> {(a, f a) |a. a \\<in> vertices G} \\<and>\n        (x, z) \\<in> {(a, f a) |a. a \\<in> vertices G} \\<longrightarrow>\n        z = y) \\<and>\n    vertices G = Domain {(a, f a) |a. a \\<in> vertices G} \\<and> graph G", "by auto"], ["", "lemma graph_homo_inv[intro!]:\n  assumes \"graph G\" \"inj_on f (vertices G)\"\n  shows \"graph_homomorphism (map_graph_fn G f) G (converse (on_graph G f))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. graph_homomorphism (map_graph_fn G f) G ((on_graph G f)\\<inverse>)", "proof(rule graph_homomorphismI)"], ["proof (state)\ngoal (6 subgoals):\n 1. vertices (map_graph_fn G f) = Domain ((on_graph G f)\\<inverse>)\n 2. (on_graph G f)\\<inverse> `` vertices (map_graph_fn G f)\n    \\<subseteq> vertices G\n 3. univalent ((on_graph G f)\\<inverse>)\n 4. edge_preserving ((on_graph G f)\\<inverse>) (edges (map_graph_fn G f))\n     (edges G)\n 5. graph (map_graph_fn G f)\n 6. graph G", "show \"univalent ((on_graph G f)\\<inverse>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. univalent ((on_graph G f)\\<inverse>)", "using assms(2)"], ["proof (prove)\nusing this:\n  inj_on f (vertices G)\n\ngoal (1 subgoal):\n 1. univalent ((on_graph G f)\\<inverse>)", "unfolding univalent_def BNF_Def.Gr_def inj_on_def"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>vertices G.\n     \\<forall>y\\<in>vertices G. f x = f y \\<longrightarrow> x = y\n\ngoal (1 subgoal):\n 1. \\<forall>x y z.\n       (x, y) \\<in> {(a, f a) |a. a \\<in> vertices G}\\<inverse> \\<and>\n       (x, z)\n       \\<in> {(a, f a) |a. a \\<in> vertices G}\\<inverse> \\<longrightarrow>\n       z = y", "by auto"], ["proof (state)\nthis:\n  univalent ((on_graph G f)\\<inverse>)\n\ngoal (5 subgoals):\n 1. vertices (map_graph_fn G f) = Domain ((on_graph G f)\\<inverse>)\n 2. (on_graph G f)\\<inverse> `` vertices (map_graph_fn G f)\n    \\<subseteq> vertices G\n 3. edge_preserving ((on_graph G f)\\<inverse>) (edges (map_graph_fn G f))\n     (edges G)\n 4. graph (map_graph_fn G f)\n 5. graph G", "show \"edge_preserving ((on_graph G f)\\<inverse>) (edges (map_graph_fn G f)) (edges G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. edge_preserving ((on_graph G f)\\<inverse>) (edges (map_graph_fn G f))\n     (edges G)", "using assms"], ["proof (prove)\nusing this:\n  graph G\n  inj_on f (vertices G)\n\ngoal (1 subgoal):\n 1. edge_preserving ((on_graph G f)\\<inverse>) (edges (map_graph_fn G f))\n     (edges G)", "unfolding edge_preserving inj_on_def"], ["proof (prove)\nusing this:\n  graph G\n  \\<forall>x\\<in>vertices G.\n     \\<forall>y\\<in>vertices G. f x = f y \\<longrightarrow> x = y\n\ngoal (1 subgoal):\n 1. on_triple ((on_graph G f)\\<inverse>) `` edges (map_graph_fn G f)\n    \\<subseteq> edges G", "by auto auto"], ["proof (state)\nthis:\n  edge_preserving ((on_graph G f)\\<inverse>) (edges (map_graph_fn G f))\n   (edges G)\n\ngoal (4 subgoals):\n 1. vertices (map_graph_fn G f) = Domain ((on_graph G f)\\<inverse>)\n 2. (on_graph G f)\\<inverse> `` vertices (map_graph_fn G f)\n    \\<subseteq> vertices G\n 3. graph (map_graph_fn G f)\n 4. graph G", "qed (insert assms(1),auto)"], ["", "lemma edge_preserving_on_graphI[intro]:\n  assumes \"\\<And> l x y. (l,x,y)\\<in>edges X \\<Longrightarrow> x\\<in>vertices X \\<Longrightarrow> y \\<in> vertices X \\<Longrightarrow> (l,f x,f y) \\<in> Y\"\n  shows \"edge_preserving (on_graph X f) (edges X) Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. edge_preserving (on_graph X f) (edges X) Y", "using assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>(?l, ?x, ?y) \\<in> edges X; ?x \\<in> vertices X;\n   ?y \\<in> vertices X\\<rbrakk>\n  \\<Longrightarrow> (?l, f ?x, f ?y) \\<in> Y\n\ngoal (1 subgoal):\n 1. edge_preserving (on_graph X f) (edges X) Y", "unfolding edge_preserving_def BNF_Def.Gr_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>(?l, ?x, ?y) \\<in> edges X; ?x \\<in> vertices X;\n   ?y \\<in> vertices X\\<rbrakk>\n  \\<Longrightarrow> (?l, f ?x, f ?y) \\<in> Y\n\ngoal (1 subgoal):\n 1. \\<forall>(k, v1, v2)\\<in>edges X.\n       \\<forall>v1' v2'.\n          (v1, v1') \\<in> {(a, f a) |a. a \\<in> vertices X} \\<and>\n          (v2, v2')\n          \\<in> {(a, f a) |a. a \\<in> vertices X} \\<longrightarrow>\n          (k, v1', v2') \\<in> Y", "by auto"], ["", "lemma subgraph_subset:\n  assumes \"subgraph G\\<^sub>1 G\\<^sub>2\"\n  shows \"vertices G\\<^sub>1 \\<subseteq> vertices G\\<^sub>2\" \"edges (restrict G\\<^sub>1) \\<subseteq> edges G\\<^sub>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vertices G\\<^sub>1 \\<subseteq> vertices G\\<^sub>2 &&&\n    edges (restrict G\\<^sub>1) \\<subseteq> edges G\\<^sub>2", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. vertices G\\<^sub>1 \\<subseteq> vertices G\\<^sub>2\n 2. edges (restrict G\\<^sub>1) \\<subseteq> edges G\\<^sub>2", "have vrt:\"Id_on (vertices G\\<^sub>1) `` vertices G\\<^sub>1 \\<subseteq> vertices G\\<^sub>2\"\n    and ep:\"edge_preserving (Id_on (vertices G\\<^sub>1)) (edges G\\<^sub>1) (edges G\\<^sub>2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Id_on (vertices G\\<^sub>1) `` vertices G\\<^sub>1\n    \\<subseteq> vertices G\\<^sub>2 &&&\n    edge_preserving (Id_on (vertices G\\<^sub>1)) (edges G\\<^sub>1)\n     (edges G\\<^sub>2)", "using assms"], ["proof (prove)\nusing this:\n  subgraph G\\<^sub>1 G\\<^sub>2\n\ngoal (1 subgoal):\n 1. Id_on (vertices G\\<^sub>1) `` vertices G\\<^sub>1\n    \\<subseteq> vertices G\\<^sub>2 &&&\n    edge_preserving (Id_on (vertices G\\<^sub>1)) (edges G\\<^sub>1)\n     (edges G\\<^sub>2)", "unfolding graph_homomorphism_def"], ["proof (prove)\nusing this:\n  vertices G\\<^sub>1 = Domain (Id_on (vertices G\\<^sub>1)) \\<and>\n  graph G\\<^sub>1 \\<and>\n  graph G\\<^sub>2 \\<and>\n  Id_on (vertices G\\<^sub>1) `` vertices G\\<^sub>1\n  \\<subseteq> vertices G\\<^sub>2 \\<and>\n  univalent (Id_on (vertices G\\<^sub>1)) \\<and>\n  edge_preserving (Id_on (vertices G\\<^sub>1)) (edges G\\<^sub>1)\n   (edges G\\<^sub>2)\n\ngoal (1 subgoal):\n 1. Id_on (vertices G\\<^sub>1) `` vertices G\\<^sub>1\n    \\<subseteq> vertices G\\<^sub>2 &&&\n    edge_preserving (Id_on (vertices G\\<^sub>1)) (edges G\\<^sub>1)\n     (edges G\\<^sub>2)", "by auto"], ["proof (state)\nthis:\n  Id_on (vertices G\\<^sub>1) `` vertices G\\<^sub>1\n  \\<subseteq> vertices G\\<^sub>2\n  edge_preserving (Id_on (vertices G\\<^sub>1)) (edges G\\<^sub>1)\n   (edges G\\<^sub>2)\n\ngoal (2 subgoals):\n 1. vertices G\\<^sub>1 \\<subseteq> vertices G\\<^sub>2\n 2. edges (restrict G\\<^sub>1) \\<subseteq> edges G\\<^sub>2", "hence \"edges (restrict G\\<^sub>1) \\<subseteq> edges G\\<^sub>2\""], ["proof (prove)\nusing this:\n  Id_on (vertices G\\<^sub>1) `` vertices G\\<^sub>1\n  \\<subseteq> vertices G\\<^sub>2\n  edge_preserving (Id_on (vertices G\\<^sub>1)) (edges G\\<^sub>1)\n   (edges G\\<^sub>2)\n\ngoal (1 subgoal):\n 1. edges (restrict G\\<^sub>1) \\<subseteq> edges G\\<^sub>2", "using assms"], ["proof (prove)\nusing this:\n  Id_on (vertices G\\<^sub>1) `` vertices G\\<^sub>1\n  \\<subseteq> vertices G\\<^sub>2\n  edge_preserving (Id_on (vertices G\\<^sub>1)) (edges G\\<^sub>1)\n   (edges G\\<^sub>2)\n  subgraph G\\<^sub>1 G\\<^sub>2\n\ngoal (1 subgoal):\n 1. edges (restrict G\\<^sub>1) \\<subseteq> edges G\\<^sub>2", "unfolding edge_preserving"], ["proof (prove)\nusing this:\n  Id_on (vertices G\\<^sub>1) `` vertices G\\<^sub>1\n  \\<subseteq> vertices G\\<^sub>2\n  on_triple (Id_on (vertices G\\<^sub>1)) `` edges G\\<^sub>1\n  \\<subseteq> edges G\\<^sub>2\n  subgraph G\\<^sub>1 G\\<^sub>2\n\ngoal (1 subgoal):\n 1. edges (restrict G\\<^sub>1) \\<subseteq> edges G\\<^sub>2", "by auto"], ["proof (state)\nthis:\n  edges (restrict G\\<^sub>1) \\<subseteq> edges G\\<^sub>2\n\ngoal (2 subgoals):\n 1. vertices G\\<^sub>1 \\<subseteq> vertices G\\<^sub>2\n 2. edges (restrict G\\<^sub>1) \\<subseteq> edges G\\<^sub>2", "thus \"vertices G\\<^sub>1 \\<subseteq> vertices G\\<^sub>2\" \"edges (restrict G\\<^sub>1) \\<subseteq> edges G\\<^sub>2\""], ["proof (prove)\nusing this:\n  edges (restrict G\\<^sub>1) \\<subseteq> edges G\\<^sub>2\n\ngoal (1 subgoal):\n 1. vertices G\\<^sub>1 \\<subseteq> vertices G\\<^sub>2 &&&\n    edges (restrict G\\<^sub>1) \\<subseteq> edges G\\<^sub>2", "using vrt"], ["proof (prove)\nusing this:\n  edges (restrict G\\<^sub>1) \\<subseteq> edges G\\<^sub>2\n  Id_on (vertices G\\<^sub>1) `` vertices G\\<^sub>1\n  \\<subseteq> vertices G\\<^sub>2\n\ngoal (1 subgoal):\n 1. vertices G\\<^sub>1 \\<subseteq> vertices G\\<^sub>2 &&&\n    edges (restrict G\\<^sub>1) \\<subseteq> edges G\\<^sub>2", "by auto"], ["proof (state)\nthis:\n  vertices G\\<^sub>1 \\<subseteq> vertices G\\<^sub>2\n  edges (restrict G\\<^sub>1) \\<subseteq> edges G\\<^sub>2\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>Our definition of subgraph is equivalent to definition 7.\\<close>"], ["", "lemma subgraph_def2:\n  assumes \"graph G\\<^sub>1\" \"graph G\\<^sub>2\"\n  shows \"subgraph G\\<^sub>1 G\\<^sub>2 \\<longleftrightarrow> vertices G\\<^sub>1 \\<subseteq> vertices G\\<^sub>2 \\<and> edges G\\<^sub>1 \\<subseteq> edges G\\<^sub>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subgraph G\\<^sub>1 G\\<^sub>2 =\n    (vertices G\\<^sub>1 \\<subseteq> vertices G\\<^sub>2 \\<and>\n     edges G\\<^sub>1 \\<subseteq> edges G\\<^sub>2)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. subgraph G\\<^sub>1 G\\<^sub>2 \\<Longrightarrow>\n    vertices G\\<^sub>1 \\<subseteq> vertices G\\<^sub>2 \\<and>\n    edges G\\<^sub>1 \\<subseteq> edges G\\<^sub>2\n 2. vertices G\\<^sub>1 \\<subseteq> vertices G\\<^sub>2 \\<and>\n    edges G\\<^sub>1 \\<subseteq> edges G\\<^sub>2 \\<Longrightarrow>\n    subgraph G\\<^sub>1 G\\<^sub>2", "assume \"vertices G\\<^sub>1 \\<subseteq> vertices G\\<^sub>2 \\<and> edges G\\<^sub>1 \\<subseteq> edges G\\<^sub>2\""], ["proof (state)\nthis:\n  vertices G\\<^sub>1 \\<subseteq> vertices G\\<^sub>2 \\<and>\n  edges G\\<^sub>1 \\<subseteq> edges G\\<^sub>2\n\ngoal (2 subgoals):\n 1. subgraph G\\<^sub>1 G\\<^sub>2 \\<Longrightarrow>\n    vertices G\\<^sub>1 \\<subseteq> vertices G\\<^sub>2 \\<and>\n    edges G\\<^sub>1 \\<subseteq> edges G\\<^sub>2\n 2. vertices G\\<^sub>1 \\<subseteq> vertices G\\<^sub>2 \\<and>\n    edges G\\<^sub>1 \\<subseteq> edges G\\<^sub>2 \\<Longrightarrow>\n    subgraph G\\<^sub>1 G\\<^sub>2", "hence v:\"vertices G\\<^sub>1 \\<subseteq> vertices G\\<^sub>2\" and \"edges G\\<^sub>1 \\<subseteq> edges G\\<^sub>2\""], ["proof (prove)\nusing this:\n  vertices G\\<^sub>1 \\<subseteq> vertices G\\<^sub>2 \\<and>\n  edges G\\<^sub>1 \\<subseteq> edges G\\<^sub>2\n\ngoal (1 subgoal):\n 1. vertices G\\<^sub>1 \\<subseteq> vertices G\\<^sub>2 &&&\n    edges G\\<^sub>1 \\<subseteq> edges G\\<^sub>2", "by auto"], ["proof (state)\nthis:\n  vertices G\\<^sub>1 \\<subseteq> vertices G\\<^sub>2\n  edges G\\<^sub>1 \\<subseteq> edges G\\<^sub>2\n\ngoal (2 subgoals):\n 1. subgraph G\\<^sub>1 G\\<^sub>2 \\<Longrightarrow>\n    vertices G\\<^sub>1 \\<subseteq> vertices G\\<^sub>2 \\<and>\n    edges G\\<^sub>1 \\<subseteq> edges G\\<^sub>2\n 2. vertices G\\<^sub>1 \\<subseteq> vertices G\\<^sub>2 \\<and>\n    edges G\\<^sub>1 \\<subseteq> edges G\\<^sub>2 \\<Longrightarrow>\n    subgraph G\\<^sub>1 G\\<^sub>2", "hence ep:\"edge_preserving (Id_on (vertices G\\<^sub>1)) (edges G\\<^sub>1) (edges G\\<^sub>2)\""], ["proof (prove)\nusing this:\n  vertices G\\<^sub>1 \\<subseteq> vertices G\\<^sub>2\n  edges G\\<^sub>1 \\<subseteq> edges G\\<^sub>2\n\ngoal (1 subgoal):\n 1. edge_preserving (Id_on (vertices G\\<^sub>1)) (edges G\\<^sub>1)\n     (edges G\\<^sub>2)", "unfolding edge_preserving_def"], ["proof (prove)\nusing this:\n  vertices G\\<^sub>1 \\<subseteq> vertices G\\<^sub>2\n  edges G\\<^sub>1 \\<subseteq> edges G\\<^sub>2\n\ngoal (1 subgoal):\n 1. \\<forall>(k, v1, v2)\\<in>edges G\\<^sub>1.\n       \\<forall>v1' v2'.\n          (v1, v1') \\<in> Id_on (vertices G\\<^sub>1) \\<and>\n          (v2, v2') \\<in> Id_on (vertices G\\<^sub>1) \\<longrightarrow>\n          (k, v1', v2') \\<in> edges G\\<^sub>2", "by auto"], ["proof (state)\nthis:\n  edge_preserving (Id_on (vertices G\\<^sub>1)) (edges G\\<^sub>1)\n   (edges G\\<^sub>2)\n\ngoal (2 subgoals):\n 1. subgraph G\\<^sub>1 G\\<^sub>2 \\<Longrightarrow>\n    vertices G\\<^sub>1 \\<subseteq> vertices G\\<^sub>2 \\<and>\n    edges G\\<^sub>1 \\<subseteq> edges G\\<^sub>2\n 2. vertices G\\<^sub>1 \\<subseteq> vertices G\\<^sub>2 \\<and>\n    edges G\\<^sub>1 \\<subseteq> edges G\\<^sub>2 \\<Longrightarrow>\n    subgraph G\\<^sub>1 G\\<^sub>2", "show \"subgraph G\\<^sub>1 G\\<^sub>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subgraph G\\<^sub>1 G\\<^sub>2", "using assms(2) v ep graph_homomorphism_Id[of \"G\\<^sub>1\",folded assms]"], ["proof (prove)\nusing this:\n  graph G\\<^sub>2\n  vertices G\\<^sub>1 \\<subseteq> vertices G\\<^sub>2\n  edge_preserving (Id_on (vertices G\\<^sub>1)) (edges G\\<^sub>1)\n   (edges G\\<^sub>2)\n  subgraph G\\<^sub>1 G\\<^sub>1\n\ngoal (1 subgoal):\n 1. subgraph G\\<^sub>1 G\\<^sub>2", "unfolding graph_homomorphism_def"], ["proof (prove)\nusing this:\n  graph G\\<^sub>2\n  vertices G\\<^sub>1 \\<subseteq> vertices G\\<^sub>2\n  edge_preserving (Id_on (vertices G\\<^sub>1)) (edges G\\<^sub>1)\n   (edges G\\<^sub>2)\n  vertices G\\<^sub>1 = Domain (Id_on (vertices G\\<^sub>1)) \\<and>\n  graph G\\<^sub>1 \\<and>\n  graph G\\<^sub>1 \\<and>\n  Id_on (vertices G\\<^sub>1) `` vertices G\\<^sub>1\n  \\<subseteq> vertices G\\<^sub>1 \\<and>\n  univalent (Id_on (vertices G\\<^sub>1)) \\<and>\n  edge_preserving (Id_on (vertices G\\<^sub>1)) (edges G\\<^sub>1)\n   (edges G\\<^sub>1)\n\ngoal (1 subgoal):\n 1. vertices G\\<^sub>1 = Domain (Id_on (vertices G\\<^sub>1)) \\<and>\n    graph G\\<^sub>1 \\<and>\n    graph G\\<^sub>2 \\<and>\n    Id_on (vertices G\\<^sub>1) `` vertices G\\<^sub>1\n    \\<subseteq> vertices G\\<^sub>2 \\<and>\n    univalent (Id_on (vertices G\\<^sub>1)) \\<and>\n    edge_preserving (Id_on (vertices G\\<^sub>1)) (edges G\\<^sub>1)\n     (edges G\\<^sub>2)", "by auto"], ["proof (state)\nthis:\n  subgraph G\\<^sub>1 G\\<^sub>2\n\ngoal (1 subgoal):\n 1. subgraph G\\<^sub>1 G\\<^sub>2 \\<Longrightarrow>\n    vertices G\\<^sub>1 \\<subseteq> vertices G\\<^sub>2 \\<and>\n    edges G\\<^sub>1 \\<subseteq> edges G\\<^sub>2", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. subgraph G\\<^sub>1 G\\<^sub>2 \\<Longrightarrow>\n    vertices G\\<^sub>1 \\<subseteq> vertices G\\<^sub>2 \\<and>\n    edges G\\<^sub>1 \\<subseteq> edges G\\<^sub>2", "assume sg:\"subgraph G\\<^sub>1 G\\<^sub>2\""], ["proof (state)\nthis:\n  subgraph G\\<^sub>1 G\\<^sub>2\n\ngoal (1 subgoal):\n 1. subgraph G\\<^sub>1 G\\<^sub>2 \\<Longrightarrow>\n    vertices G\\<^sub>1 \\<subseteq> vertices G\\<^sub>2 \\<and>\n    edges G\\<^sub>1 \\<subseteq> edges G\\<^sub>2", "hence vrt:\"Id_on (vertices G\\<^sub>1) `` vertices G\\<^sub>1 \\<subseteq> vertices G\\<^sub>2\"\n    and ep:\"edge_preserving (Id_on (vertices G\\<^sub>1)) (edges G\\<^sub>1) (edges G\\<^sub>2)\""], ["proof (prove)\nusing this:\n  subgraph G\\<^sub>1 G\\<^sub>2\n\ngoal (1 subgoal):\n 1. Id_on (vertices G\\<^sub>1) `` vertices G\\<^sub>1\n    \\<subseteq> vertices G\\<^sub>2 &&&\n    edge_preserving (Id_on (vertices G\\<^sub>1)) (edges G\\<^sub>1)\n     (edges G\\<^sub>2)", "unfolding graph_homomorphism_def"], ["proof (prove)\nusing this:\n  vertices G\\<^sub>1 = Domain (Id_on (vertices G\\<^sub>1)) \\<and>\n  graph G\\<^sub>1 \\<and>\n  graph G\\<^sub>2 \\<and>\n  Id_on (vertices G\\<^sub>1) `` vertices G\\<^sub>1\n  \\<subseteq> vertices G\\<^sub>2 \\<and>\n  univalent (Id_on (vertices G\\<^sub>1)) \\<and>\n  edge_preserving (Id_on (vertices G\\<^sub>1)) (edges G\\<^sub>1)\n   (edges G\\<^sub>2)\n\ngoal (1 subgoal):\n 1. Id_on (vertices G\\<^sub>1) `` vertices G\\<^sub>1\n    \\<subseteq> vertices G\\<^sub>2 &&&\n    edge_preserving (Id_on (vertices G\\<^sub>1)) (edges G\\<^sub>1)\n     (edges G\\<^sub>2)", "by auto"], ["proof (state)\nthis:\n  Id_on (vertices G\\<^sub>1) `` vertices G\\<^sub>1\n  \\<subseteq> vertices G\\<^sub>2\n  edge_preserving (Id_on (vertices G\\<^sub>1)) (edges G\\<^sub>1)\n   (edges G\\<^sub>2)\n\ngoal (1 subgoal):\n 1. subgraph G\\<^sub>1 G\\<^sub>2 \\<Longrightarrow>\n    vertices G\\<^sub>1 \\<subseteq> vertices G\\<^sub>2 \\<and>\n    edges G\\<^sub>1 \\<subseteq> edges G\\<^sub>2", "hence \"edges G\\<^sub>1 \\<subseteq> edges G\\<^sub>2\""], ["proof (prove)\nusing this:\n  Id_on (vertices G\\<^sub>1) `` vertices G\\<^sub>1\n  \\<subseteq> vertices G\\<^sub>2\n  edge_preserving (Id_on (vertices G\\<^sub>1)) (edges G\\<^sub>1)\n   (edges G\\<^sub>2)\n\ngoal (1 subgoal):\n 1. edges G\\<^sub>1 \\<subseteq> edges G\\<^sub>2", "using assms"], ["proof (prove)\nusing this:\n  Id_on (vertices G\\<^sub>1) `` vertices G\\<^sub>1\n  \\<subseteq> vertices G\\<^sub>2\n  edge_preserving (Id_on (vertices G\\<^sub>1)) (edges G\\<^sub>1)\n   (edges G\\<^sub>2)\n  graph G\\<^sub>1\n  graph G\\<^sub>2\n\ngoal (1 subgoal):\n 1. edges G\\<^sub>1 \\<subseteq> edges G\\<^sub>2", "unfolding edge_preserving"], ["proof (prove)\nusing this:\n  Id_on (vertices G\\<^sub>1) `` vertices G\\<^sub>1\n  \\<subseteq> vertices G\\<^sub>2\n  on_triple (Id_on (vertices G\\<^sub>1)) `` edges G\\<^sub>1\n  \\<subseteq> edges G\\<^sub>2\n  graph G\\<^sub>1\n  graph G\\<^sub>2\n\ngoal (1 subgoal):\n 1. edges G\\<^sub>1 \\<subseteq> edges G\\<^sub>2", "by auto"], ["proof (state)\nthis:\n  edges G\\<^sub>1 \\<subseteq> edges G\\<^sub>2\n\ngoal (1 subgoal):\n 1. subgraph G\\<^sub>1 G\\<^sub>2 \\<Longrightarrow>\n    vertices G\\<^sub>1 \\<subseteq> vertices G\\<^sub>2 \\<and>\n    edges G\\<^sub>1 \\<subseteq> edges G\\<^sub>2", "thus \"vertices G\\<^sub>1 \\<subseteq> vertices G\\<^sub>2 \\<and> edges G\\<^sub>1 \\<subseteq> edges G\\<^sub>2\""], ["proof (prove)\nusing this:\n  edges G\\<^sub>1 \\<subseteq> edges G\\<^sub>2\n\ngoal (1 subgoal):\n 1. vertices G\\<^sub>1 \\<subseteq> vertices G\\<^sub>2 \\<and>\n    edges G\\<^sub>1 \\<subseteq> edges G\\<^sub>2", "using vrt"], ["proof (prove)\nusing this:\n  edges G\\<^sub>1 \\<subseteq> edges G\\<^sub>2\n  Id_on (vertices G\\<^sub>1) `` vertices G\\<^sub>1\n  \\<subseteq> vertices G\\<^sub>2\n\ngoal (1 subgoal):\n 1. vertices G\\<^sub>1 \\<subseteq> vertices G\\<^sub>2 \\<and>\n    edges G\\<^sub>1 \\<subseteq> edges G\\<^sub>2", "by auto"], ["proof (state)\nthis:\n  vertices G\\<^sub>1 \\<subseteq> vertices G\\<^sub>2 \\<and>\n  edges G\\<^sub>1 \\<subseteq> edges G\\<^sub>2\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>We also define @{term graph_union}. In contrast to the paper, our definition ignores the labels.\n      The corresponding definition in the paper is written just above Definition 7.\n      Adding labels to graphs would require a lot of unnecessary additional bookkeeping.\n      Nowhere in the paper is the union actually used on different sets of labels,\n      in which case these definitions coincide.\\<close>"], ["", "(* Since the set of labels is an implicit type, the notion of graph_union does not completely correspond to the one in the paper *)"], ["", "definition graph_union where\n\"graph_union G\\<^sub>1 G\\<^sub>2 = LG (edges G\\<^sub>1 \\<union> edges G\\<^sub>2) (vertices G\\<^sub>1 \\<union> vertices G\\<^sub>2)\""], ["", "lemma graph_unionI[intro]:\n  assumes \"edges G\\<^sub>1 \\<subseteq> edges G\\<^sub>2\"\n          \"vertices G\\<^sub>1 \\<subseteq> vertices G\\<^sub>2\"\n  shows \"graph_union G\\<^sub>1 G\\<^sub>2 = G\\<^sub>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. graph_union G\\<^sub>1 G\\<^sub>2 = G\\<^sub>2", "using assms"], ["proof (prove)\nusing this:\n  edges G\\<^sub>1 \\<subseteq> edges G\\<^sub>2\n  vertices G\\<^sub>1 \\<subseteq> vertices G\\<^sub>2\n\ngoal (1 subgoal):\n 1. graph_union G\\<^sub>1 G\\<^sub>2 = G\\<^sub>2", "unfolding graph_union_def"], ["proof (prove)\nusing this:\n  edges G\\<^sub>1 \\<subseteq> edges G\\<^sub>2\n  vertices G\\<^sub>1 \\<subseteq> vertices G\\<^sub>2\n\ngoal (1 subgoal):\n 1. LG (edges G\\<^sub>1 \\<union> edges G\\<^sub>2)\n     (vertices G\\<^sub>1 \\<union> vertices G\\<^sub>2) =\n    G\\<^sub>2", "by (cases \"G\\<^sub>2\",auto)"], ["", "lemma graph_union_iff:\n  shows \"graph_union G\\<^sub>1 G\\<^sub>2 = G\\<^sub>2 \\<longleftrightarrow> (edges G\\<^sub>1 \\<subseteq> edges G\\<^sub>2 \\<and> vertices G\\<^sub>1 \\<subseteq> vertices G\\<^sub>2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (graph_union G\\<^sub>1 G\\<^sub>2 = G\\<^sub>2) =\n    (edges G\\<^sub>1 \\<subseteq> edges G\\<^sub>2 \\<and>\n     vertices G\\<^sub>1 \\<subseteq> vertices G\\<^sub>2)", "unfolding graph_union_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (LG (edges G\\<^sub>1 \\<union> edges G\\<^sub>2)\n      (vertices G\\<^sub>1 \\<union> vertices G\\<^sub>2) =\n     G\\<^sub>2) =\n    (edges G\\<^sub>1 \\<subseteq> edges G\\<^sub>2 \\<and>\n     vertices G\\<^sub>1 \\<subseteq> vertices G\\<^sub>2)", "by (cases \"G\\<^sub>2\",auto)"], ["", "lemma graph_union_idemp[simp]:\n\"graph_union A A = A\"\n\"graph_union A (graph_union A B) = (graph_union A B)\"\n\"graph_union A (graph_union B A) = (graph_union B A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. graph_union A A = A &&&\n    graph_union A (graph_union A B) = graph_union A B &&&\n    graph_union A (graph_union B A) = graph_union B A", "unfolding graph_union_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. LG (edges A \\<union> edges A) (vertices A \\<union> vertices A) = A &&&\n    LG (edges A \\<union>\n        edges\n         (LG (edges A \\<union> edges B) (vertices A \\<union> vertices B)))\n     (vertices A \\<union>\n      vertices\n       (LG (edges A \\<union> edges B) (vertices A \\<union> vertices B))) =\n    LG (edges A \\<union> edges B) (vertices A \\<union> vertices B) &&&\n    LG (edges A \\<union>\n        edges\n         (LG (edges B \\<union> edges A) (vertices B \\<union> vertices A)))\n     (vertices A \\<union>\n      vertices\n       (LG (edges B \\<union> edges A) (vertices B \\<union> vertices A))) =\n    LG (edges B \\<union> edges A) (vertices B \\<union> vertices A)", "by auto"], ["", "lemma graph_union_vertices[simp]:\n\"vertices (graph_union G\\<^sub>1 G\\<^sub>2) = vertices G\\<^sub>1 \\<union> vertices G\\<^sub>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vertices (graph_union G\\<^sub>1 G\\<^sub>2) =\n    vertices G\\<^sub>1 \\<union> vertices G\\<^sub>2", "unfolding graph_union_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. vertices\n     (LG (edges G\\<^sub>1 \\<union> edges G\\<^sub>2)\n       (vertices G\\<^sub>1 \\<union> vertices G\\<^sub>2)) =\n    vertices G\\<^sub>1 \\<union> vertices G\\<^sub>2", "by auto"], ["", "lemma graph_union_edges[simp]:\n\"edges (graph_union G\\<^sub>1 G\\<^sub>2) = edges G\\<^sub>1 \\<union> edges G\\<^sub>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. edges (graph_union G\\<^sub>1 G\\<^sub>2) =\n    edges G\\<^sub>1 \\<union> edges G\\<^sub>2", "unfolding graph_union_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. edges\n     (LG (edges G\\<^sub>1 \\<union> edges G\\<^sub>2)\n       (vertices G\\<^sub>1 \\<union> vertices G\\<^sub>2)) =\n    edges G\\<^sub>1 \\<union> edges G\\<^sub>2", "by auto"], ["", "lemma graph_union_preserves_restrict[intro]:\n  assumes \"G\\<^sub>1 = restrict G\\<^sub>1\" \"G\\<^sub>2 = restrict G\\<^sub>2\"\n  shows \"graph_union G\\<^sub>1 G\\<^sub>2 = restrict (graph_union G\\<^sub>1 G\\<^sub>2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. graph (graph_union G\\<^sub>1 G\\<^sub>2)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. graph (graph_union G\\<^sub>1 G\\<^sub>2)", "let ?e = \"edges G\\<^sub>1 \\<union> edges G\\<^sub>2\""], ["proof (state)\ngoal (1 subgoal):\n 1. graph (graph_union G\\<^sub>1 G\\<^sub>2)", "let ?v = \"vertices G\\<^sub>1 \\<union> vertices G\\<^sub>2\""], ["proof (state)\ngoal (1 subgoal):\n 1. graph (graph_union G\\<^sub>1 G\\<^sub>2)", "let ?r = \"{(l, v1, v2). (l, v1, v2) \\<in> ?e \\<and> v1 \\<in> ?v \\<and> v2 \\<in> ?v}\""], ["proof (state)\ngoal (1 subgoal):\n 1. graph (graph_union G\\<^sub>1 G\\<^sub>2)", "(* restricted edges *)"], ["proof (state)\ngoal (1 subgoal):\n 1. graph (graph_union G\\<^sub>1 G\\<^sub>2)", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. graph (graph_union G\\<^sub>1 G\\<^sub>2)", "fix l v1 v2"], ["proof (state)\ngoal (1 subgoal):\n 1. graph (graph_union G\\<^sub>1 G\\<^sub>2)", "assume a:\"(l,v1,v2) \\<in> ?e\""], ["proof (state)\nthis:\n  (l, v1, v2) \\<in> edges G\\<^sub>1 \\<union> edges G\\<^sub>2\n\ngoal (1 subgoal):\n 1. graph (graph_union G\\<^sub>1 G\\<^sub>2)", "have \"(l,v1,v2) \\<in> ?r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (l, v1, v2)\n    \\<in> {(l, v1, v2).\n           (l, v1, v2) \\<in> edges G\\<^sub>1 \\<union> edges G\\<^sub>2 \\<and>\n           v1 \\<in> vertices G\\<^sub>1 \\<union> vertices G\\<^sub>2 \\<and>\n           v2 \\<in> vertices G\\<^sub>1 \\<union> vertices G\\<^sub>2}", "proof(cases \"(l,v1,v2) \\<in> edges (restrict G\\<^sub>1)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. (l, v1, v2) \\<in> edges (restrict G\\<^sub>1) \\<Longrightarrow>\n    (l, v1, v2)\n    \\<in> {(l, v1, v2).\n           (l, v1, v2) \\<in> edges G\\<^sub>1 \\<union> edges G\\<^sub>2 \\<and>\n           v1 \\<in> vertices G\\<^sub>1 \\<union> vertices G\\<^sub>2 \\<and>\n           v2 \\<in> vertices G\\<^sub>1 \\<union> vertices G\\<^sub>2}\n 2. (l, v1, v2) \\<notin> edges (restrict G\\<^sub>1) \\<Longrightarrow>\n    (l, v1, v2)\n    \\<in> {(l, v1, v2).\n           (l, v1, v2) \\<in> edges G\\<^sub>1 \\<union> edges G\\<^sub>2 \\<and>\n           v1 \\<in> vertices G\\<^sub>1 \\<union> vertices G\\<^sub>2 \\<and>\n           v2 \\<in> vertices G\\<^sub>1 \\<union> vertices G\\<^sub>2}", "case True"], ["proof (state)\nthis:\n  (l, v1, v2) \\<in> edges (restrict G\\<^sub>1)\n\ngoal (2 subgoals):\n 1. (l, v1, v2) \\<in> edges (restrict G\\<^sub>1) \\<Longrightarrow>\n    (l, v1, v2)\n    \\<in> {(l, v1, v2).\n           (l, v1, v2) \\<in> edges G\\<^sub>1 \\<union> edges G\\<^sub>2 \\<and>\n           v1 \\<in> vertices G\\<^sub>1 \\<union> vertices G\\<^sub>2 \\<and>\n           v2 \\<in> vertices G\\<^sub>1 \\<union> vertices G\\<^sub>2}\n 2. (l, v1, v2) \\<notin> edges (restrict G\\<^sub>1) \\<Longrightarrow>\n    (l, v1, v2)\n    \\<in> {(l, v1, v2).\n           (l, v1, v2) \\<in> edges G\\<^sub>1 \\<union> edges G\\<^sub>2 \\<and>\n           v1 \\<in> vertices G\\<^sub>1 \\<union> vertices G\\<^sub>2 \\<and>\n           v2 \\<in> vertices G\\<^sub>1 \\<union> vertices G\\<^sub>2}", "hence \"(l,v1,v2) \\<in> edges G\\<^sub>1\" \"v1 \\<in> vertices G\\<^sub>1\" \"v2 \\<in> vertices G\\<^sub>1\""], ["proof (prove)\nusing this:\n  (l, v1, v2) \\<in> edges (restrict G\\<^sub>1)\n\ngoal (1 subgoal):\n 1. (l, v1, v2) \\<in> edges G\\<^sub>1 &&&\n    v1 \\<in> vertices G\\<^sub>1 &&& v2 \\<in> vertices G\\<^sub>1", "by (auto simp:restrict_def)+"], ["proof (state)\nthis:\n  (l, v1, v2) \\<in> edges G\\<^sub>1\n  v1 \\<in> vertices G\\<^sub>1\n  v2 \\<in> vertices G\\<^sub>1\n\ngoal (2 subgoals):\n 1. (l, v1, v2) \\<in> edges (restrict G\\<^sub>1) \\<Longrightarrow>\n    (l, v1, v2)\n    \\<in> {(l, v1, v2).\n           (l, v1, v2) \\<in> edges G\\<^sub>1 \\<union> edges G\\<^sub>2 \\<and>\n           v1 \\<in> vertices G\\<^sub>1 \\<union> vertices G\\<^sub>2 \\<and>\n           v2 \\<in> vertices G\\<^sub>1 \\<union> vertices G\\<^sub>2}\n 2. (l, v1, v2) \\<notin> edges (restrict G\\<^sub>1) \\<Longrightarrow>\n    (l, v1, v2)\n    \\<in> {(l, v1, v2).\n           (l, v1, v2) \\<in> edges G\\<^sub>1 \\<union> edges G\\<^sub>2 \\<and>\n           v1 \\<in> vertices G\\<^sub>1 \\<union> vertices G\\<^sub>2 \\<and>\n           v2 \\<in> vertices G\\<^sub>1 \\<union> vertices G\\<^sub>2}", "thus ?thesis"], ["proof (prove)\nusing this:\n  (l, v1, v2) \\<in> edges G\\<^sub>1\n  v1 \\<in> vertices G\\<^sub>1\n  v2 \\<in> vertices G\\<^sub>1\n\ngoal (1 subgoal):\n 1. (l, v1, v2)\n    \\<in> {(l, v1, v2).\n           (l, v1, v2) \\<in> edges G\\<^sub>1 \\<union> edges G\\<^sub>2 \\<and>\n           v1 \\<in> vertices G\\<^sub>1 \\<union> vertices G\\<^sub>2 \\<and>\n           v2 \\<in> vertices G\\<^sub>1 \\<union> vertices G\\<^sub>2}", "by auto"], ["proof (state)\nthis:\n  (l, v1, v2)\n  \\<in> {(l, v1, v2).\n         (l, v1, v2) \\<in> edges G\\<^sub>1 \\<union> edges G\\<^sub>2 \\<and>\n         v1 \\<in> vertices G\\<^sub>1 \\<union> vertices G\\<^sub>2 \\<and>\n         v2 \\<in> vertices G\\<^sub>1 \\<union> vertices G\\<^sub>2}\n\ngoal (1 subgoal):\n 1. (l, v1, v2) \\<notin> edges (restrict G\\<^sub>1) \\<Longrightarrow>\n    (l, v1, v2)\n    \\<in> {(l, v1, v2).\n           (l, v1, v2) \\<in> edges G\\<^sub>1 \\<union> edges G\\<^sub>2 \\<and>\n           v1 \\<in> vertices G\\<^sub>1 \\<union> vertices G\\<^sub>2 \\<and>\n           v2 \\<in> vertices G\\<^sub>1 \\<union> vertices G\\<^sub>2}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. (l, v1, v2) \\<notin> edges (restrict G\\<^sub>1) \\<Longrightarrow>\n    (l, v1, v2)\n    \\<in> {(l, v1, v2).\n           (l, v1, v2) \\<in> edges G\\<^sub>1 \\<union> edges G\\<^sub>2 \\<and>\n           v1 \\<in> vertices G\\<^sub>1 \\<union> vertices G\\<^sub>2 \\<and>\n           v2 \\<in> vertices G\\<^sub>1 \\<union> vertices G\\<^sub>2}", "case False"], ["proof (state)\nthis:\n  (l, v1, v2) \\<notin> edges (restrict G\\<^sub>1)\n\ngoal (1 subgoal):\n 1. (l, v1, v2) \\<notin> edges (restrict G\\<^sub>1) \\<Longrightarrow>\n    (l, v1, v2)\n    \\<in> {(l, v1, v2).\n           (l, v1, v2) \\<in> edges G\\<^sub>1 \\<union> edges G\\<^sub>2 \\<and>\n           v1 \\<in> vertices G\\<^sub>1 \\<union> vertices G\\<^sub>2 \\<and>\n           v2 \\<in> vertices G\\<^sub>1 \\<union> vertices G\\<^sub>2}", "hence \"(l,v1,v2) \\<in> edges (restrict G\\<^sub>2)\""], ["proof (prove)\nusing this:\n  (l, v1, v2) \\<notin> edges (restrict G\\<^sub>1)\n\ngoal (1 subgoal):\n 1. (l, v1, v2) \\<in> edges (restrict G\\<^sub>2)", "using a assms"], ["proof (prove)\nusing this:\n  (l, v1, v2) \\<notin> edges (restrict G\\<^sub>1)\n  (l, v1, v2) \\<in> edges G\\<^sub>1 \\<union> edges G\\<^sub>2\n  graph G\\<^sub>1\n  graph G\\<^sub>2\n\ngoal (1 subgoal):\n 1. (l, v1, v2) \\<in> edges (restrict G\\<^sub>2)", "by auto"], ["proof (state)\nthis:\n  (l, v1, v2) \\<in> edges (restrict G\\<^sub>2)\n\ngoal (1 subgoal):\n 1. (l, v1, v2) \\<notin> edges (restrict G\\<^sub>1) \\<Longrightarrow>\n    (l, v1, v2)\n    \\<in> {(l, v1, v2).\n           (l, v1, v2) \\<in> edges G\\<^sub>1 \\<union> edges G\\<^sub>2 \\<and>\n           v1 \\<in> vertices G\\<^sub>1 \\<union> vertices G\\<^sub>2 \\<and>\n           v2 \\<in> vertices G\\<^sub>1 \\<union> vertices G\\<^sub>2}", "hence \"(l,v1,v2) \\<in> edges G\\<^sub>2\" \"v1 \\<in> vertices G\\<^sub>2\" \"v2 \\<in> vertices G\\<^sub>2\""], ["proof (prove)\nusing this:\n  (l, v1, v2) \\<in> edges (restrict G\\<^sub>2)\n\ngoal (1 subgoal):\n 1. (l, v1, v2) \\<in> edges G\\<^sub>2 &&&\n    v1 \\<in> vertices G\\<^sub>2 &&& v2 \\<in> vertices G\\<^sub>2", "by (auto simp:restrict_def)+"], ["proof (state)\nthis:\n  (l, v1, v2) \\<in> edges G\\<^sub>2\n  v1 \\<in> vertices G\\<^sub>2\n  v2 \\<in> vertices G\\<^sub>2\n\ngoal (1 subgoal):\n 1. (l, v1, v2) \\<notin> edges (restrict G\\<^sub>1) \\<Longrightarrow>\n    (l, v1, v2)\n    \\<in> {(l, v1, v2).\n           (l, v1, v2) \\<in> edges G\\<^sub>1 \\<union> edges G\\<^sub>2 \\<and>\n           v1 \\<in> vertices G\\<^sub>1 \\<union> vertices G\\<^sub>2 \\<and>\n           v2 \\<in> vertices G\\<^sub>1 \\<union> vertices G\\<^sub>2}", "then"], ["proof (chain)\npicking this:\n  (l, v1, v2) \\<in> edges G\\<^sub>2\n  v1 \\<in> vertices G\\<^sub>2\n  v2 \\<in> vertices G\\<^sub>2", "show ?thesis"], ["proof (prove)\nusing this:\n  (l, v1, v2) \\<in> edges G\\<^sub>2\n  v1 \\<in> vertices G\\<^sub>2\n  v2 \\<in> vertices G\\<^sub>2\n\ngoal (1 subgoal):\n 1. (l, v1, v2)\n    \\<in> {(l, v1, v2).\n           (l, v1, v2) \\<in> edges G\\<^sub>1 \\<union> edges G\\<^sub>2 \\<and>\n           v1 \\<in> vertices G\\<^sub>1 \\<union> vertices G\\<^sub>2 \\<and>\n           v2 \\<in> vertices G\\<^sub>1 \\<union> vertices G\\<^sub>2}", "by auto"], ["proof (state)\nthis:\n  (l, v1, v2)\n  \\<in> {(l, v1, v2).\n         (l, v1, v2) \\<in> edges G\\<^sub>1 \\<union> edges G\\<^sub>2 \\<and>\n         v1 \\<in> vertices G\\<^sub>1 \\<union> vertices G\\<^sub>2 \\<and>\n         v2 \\<in> vertices G\\<^sub>1 \\<union> vertices G\\<^sub>2}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (l, v1, v2)\n  \\<in> {(l, v1, v2).\n         (l, v1, v2) \\<in> edges G\\<^sub>1 \\<union> edges G\\<^sub>2 \\<and>\n         v1 \\<in> vertices G\\<^sub>1 \\<union> vertices G\\<^sub>2 \\<and>\n         v2 \\<in> vertices G\\<^sub>1 \\<union> vertices G\\<^sub>2}\n\ngoal (1 subgoal):\n 1. graph (graph_union G\\<^sub>1 G\\<^sub>2)", "}"], ["proof (state)\nthis:\n  (?l2, ?v1.2, ?v2.2)\n  \\<in> edges G\\<^sub>1 \\<union> edges G\\<^sub>2 \\<Longrightarrow>\n  (?l2, ?v1.2, ?v2.2)\n  \\<in> {(l, v1, v2).\n         (l, v1, v2) \\<in> edges G\\<^sub>1 \\<union> edges G\\<^sub>2 \\<and>\n         v1 \\<in> vertices G\\<^sub>1 \\<union> vertices G\\<^sub>2 \\<and>\n         v2 \\<in> vertices G\\<^sub>1 \\<union> vertices G\\<^sub>2}\n\ngoal (1 subgoal):\n 1. graph (graph_union G\\<^sub>1 G\\<^sub>2)", "hence \"?e = ?r\""], ["proof (prove)\nusing this:\n  (?l2, ?v1.2, ?v2.2)\n  \\<in> edges G\\<^sub>1 \\<union> edges G\\<^sub>2 \\<Longrightarrow>\n  (?l2, ?v1.2, ?v2.2)\n  \\<in> {(l, v1, v2).\n         (l, v1, v2) \\<in> edges G\\<^sub>1 \\<union> edges G\\<^sub>2 \\<and>\n         v1 \\<in> vertices G\\<^sub>1 \\<union> vertices G\\<^sub>2 \\<and>\n         v2 \\<in> vertices G\\<^sub>1 \\<union> vertices G\\<^sub>2}\n\ngoal (1 subgoal):\n 1. edges G\\<^sub>1 \\<union> edges G\\<^sub>2 =\n    {(l, v1, v2).\n     (l, v1, v2) \\<in> edges G\\<^sub>1 \\<union> edges G\\<^sub>2 \\<and>\n     v1 \\<in> vertices G\\<^sub>1 \\<union> vertices G\\<^sub>2 \\<and>\n     v2 \\<in> vertices G\\<^sub>1 \\<union> vertices G\\<^sub>2}", "by auto"], ["proof (state)\nthis:\n  edges G\\<^sub>1 \\<union> edges G\\<^sub>2 =\n  {(l, v1, v2).\n   (l, v1, v2) \\<in> edges G\\<^sub>1 \\<union> edges G\\<^sub>2 \\<and>\n   v1 \\<in> vertices G\\<^sub>1 \\<union> vertices G\\<^sub>2 \\<and>\n   v2 \\<in> vertices G\\<^sub>1 \\<union> vertices G\\<^sub>2}\n\ngoal (1 subgoal):\n 1. graph (graph_union G\\<^sub>1 G\\<^sub>2)", "thus ?thesis"], ["proof (prove)\nusing this:\n  edges G\\<^sub>1 \\<union> edges G\\<^sub>2 =\n  {(l, v1, v2).\n   (l, v1, v2) \\<in> edges G\\<^sub>1 \\<union> edges G\\<^sub>2 \\<and>\n   v1 \\<in> vertices G\\<^sub>1 \\<union> vertices G\\<^sub>2 \\<and>\n   v2 \\<in> vertices G\\<^sub>1 \\<union> vertices G\\<^sub>2}\n\ngoal (1 subgoal):\n 1. graph (graph_union G\\<^sub>1 G\\<^sub>2)", "unfolding graph_union_def"], ["proof (prove)\nusing this:\n  edges G\\<^sub>1 \\<union> edges G\\<^sub>2 =\n  {(l, v1, v2).\n   (l, v1, v2) \\<in> edges G\\<^sub>1 \\<union> edges G\\<^sub>2 \\<and>\n   v1 \\<in> vertices G\\<^sub>1 \\<union> vertices G\\<^sub>2 \\<and>\n   v2 \\<in> vertices G\\<^sub>1 \\<union> vertices G\\<^sub>2}\n\ngoal (1 subgoal):\n 1. graph\n     (LG (edges G\\<^sub>1 \\<union> edges G\\<^sub>2)\n       (vertices G\\<^sub>1 \\<union> vertices G\\<^sub>2))", "by auto"], ["proof (state)\nthis:\n  graph (graph_union G\\<^sub>1 G\\<^sub>2)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma graph_map_union[intro]:\n  assumes \"\\<And> i::nat. graph_union (map_graph (g i) X) Y = Y\" \"\\<And> i j. i \\<le> j \\<Longrightarrow> g i \\<subseteq> g j\"\n  shows \"graph_union (map_graph (\\<Union>i. g i) X) Y = Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. graph_union (map_graph (\\<Union> (range g)) X) Y = Y", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. edges (map_graph (\\<Union> (range g)) X) \\<subseteq> edges Y\n 2. vertices (map_graph (\\<Union> (range g)) X) \\<subseteq> vertices Y", "from assms"], ["proof (chain)\npicking this:\n  graph_union (map_graph (g ?i) X) Y = Y\n  ?i \\<le> ?j \\<Longrightarrow> g ?i \\<subseteq> g ?j", "have e:\"edges (map_graph (g i) X) \\<subseteq> edges Y\"\n              and v:\"vertices (map_graph (g i) X) \\<subseteq> vertices Y\" for i"], ["proof (prove)\nusing this:\n  graph_union (map_graph (g ?i) X) Y = Y\n  ?i \\<le> ?j \\<Longrightarrow> g ?i \\<subseteq> g ?j\n\ngoal (1 subgoal):\n 1. edges (map_graph (g i) X) \\<subseteq> edges Y &&&\n    vertices (map_graph (g i) X) \\<subseteq> vertices Y", "by (auto simp:graph_union_iff)"], ["proof (state)\nthis:\n  edges (map_graph (g ?i) X) \\<subseteq> edges Y\n  vertices (map_graph (g ?i) X) \\<subseteq> vertices Y\n\ngoal (2 subgoals):\n 1. edges (map_graph (\\<Union> (range g)) X) \\<subseteq> edges Y\n 2. vertices (map_graph (\\<Union> (range g)) X) \\<subseteq> vertices Y", "{"], ["proof (state)\nthis:\n  edges (map_graph (g ?i) X) \\<subseteq> edges Y\n  vertices (map_graph (g ?i) X) \\<subseteq> vertices Y\n\ngoal (2 subgoals):\n 1. edges (map_graph (\\<Union> (range g)) X) \\<subseteq> edges Y\n 2. vertices (map_graph (\\<Union> (range g)) X) \\<subseteq> vertices Y", "fix a ac ba aa b x xa"], ["proof (state)\ngoal (2 subgoals):\n 1. edges (map_graph (\\<Union> (range g)) X) \\<subseteq> edges Y\n 2. vertices (map_graph (\\<Union> (range g)) X) \\<subseteq> vertices Y", "assume a:\"(a, ac, ba) \\<in> edges X\" \"(ac, aa) \\<in> g x\" \"(ba, b) \\<in> g xa\""], ["proof (state)\nthis:\n  (a, ac, ba) \\<in> edges X\n  (ac, aa) \\<in> g x\n  (ba, b) \\<in> g xa\n\ngoal (2 subgoals):\n 1. edges (map_graph (\\<Union> (range g)) X) \\<subseteq> edges Y\n 2. vertices (map_graph (\\<Union> (range g)) X) \\<subseteq> vertices Y", "have \"(a, aa, b) \\<in> edges Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (a, aa, b) \\<in> edges Y", "proof(cases \"x < xa\")"], ["proof (state)\ngoal (2 subgoals):\n 1. x < xa \\<Longrightarrow> (a, aa, b) \\<in> edges Y\n 2. \\<not> x < xa \\<Longrightarrow> (a, aa, b) \\<in> edges Y", "case True"], ["proof (state)\nthis:\n  x < xa\n\ngoal (2 subgoals):\n 1. x < xa \\<Longrightarrow> (a, aa, b) \\<in> edges Y\n 2. \\<not> x < xa \\<Longrightarrow> (a, aa, b) \\<in> edges Y", "hence \"(a, ac, ba) \\<in> edges X\" \"(ac, aa) \\<in> g xa\" \"(ba, b) \\<in> g xa\""], ["proof (prove)\nusing this:\n  x < xa\n\ngoal (1 subgoal):\n 1. (a, ac, ba) \\<in> edges X &&& (ac, aa) \\<in> g xa &&& (ba, b) \\<in> g xa", "using a assms(2)[of x xa]"], ["proof (prove)\nusing this:\n  x < xa\n  (a, ac, ba) \\<in> edges X\n  (ac, aa) \\<in> g x\n  (ba, b) \\<in> g xa\n  x \\<le> xa \\<Longrightarrow> g x \\<subseteq> g xa\n\ngoal (1 subgoal):\n 1. (a, ac, ba) \\<in> edges X &&& (ac, aa) \\<in> g xa &&& (ba, b) \\<in> g xa", "by auto"], ["proof (state)\nthis:\n  (a, ac, ba) \\<in> edges X\n  (ac, aa) \\<in> g xa\n  (ba, b) \\<in> g xa\n\ngoal (2 subgoals):\n 1. x < xa \\<Longrightarrow> (a, aa, b) \\<in> edges Y\n 2. \\<not> x < xa \\<Longrightarrow> (a, aa, b) \\<in> edges Y", "then"], ["proof (chain)\npicking this:\n  (a, ac, ba) \\<in> edges X\n  (ac, aa) \\<in> g xa\n  (ba, b) \\<in> g xa", "show ?thesis"], ["proof (prove)\nusing this:\n  (a, ac, ba) \\<in> edges X\n  (ac, aa) \\<in> g xa\n  (ba, b) \\<in> g xa\n\ngoal (1 subgoal):\n 1. (a, aa, b) \\<in> edges Y", "using e[of xa]"], ["proof (prove)\nusing this:\n  (a, ac, ba) \\<in> edges X\n  (ac, aa) \\<in> g xa\n  (ba, b) \\<in> g xa\n  edges (map_graph (g xa) X) \\<subseteq> edges Y\n\ngoal (1 subgoal):\n 1. (a, aa, b) \\<in> edges Y", "by auto"], ["proof (state)\nthis:\n  (a, aa, b) \\<in> edges Y\n\ngoal (1 subgoal):\n 1. \\<not> x < xa \\<Longrightarrow> (a, aa, b) \\<in> edges Y", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> x < xa \\<Longrightarrow> (a, aa, b) \\<in> edges Y", "case False"], ["proof (state)\nthis:\n  \\<not> x < xa\n\ngoal (1 subgoal):\n 1. \\<not> x < xa \\<Longrightarrow> (a, aa, b) \\<in> edges Y", "hence \"(a, ac, ba) \\<in> edges X\" \"(ac, aa) \\<in> g x\" \"(ba, b) \\<in> g x\""], ["proof (prove)\nusing this:\n  \\<not> x < xa\n\ngoal (1 subgoal):\n 1. (a, ac, ba) \\<in> edges X &&& (ac, aa) \\<in> g x &&& (ba, b) \\<in> g x", "using a assms(2)[of xa x]"], ["proof (prove)\nusing this:\n  \\<not> x < xa\n  (a, ac, ba) \\<in> edges X\n  (ac, aa) \\<in> g x\n  (ba, b) \\<in> g xa\n  xa \\<le> x \\<Longrightarrow> g xa \\<subseteq> g x\n\ngoal (1 subgoal):\n 1. (a, ac, ba) \\<in> edges X &&& (ac, aa) \\<in> g x &&& (ba, b) \\<in> g x", "by auto"], ["proof (state)\nthis:\n  (a, ac, ba) \\<in> edges X\n  (ac, aa) \\<in> g x\n  (ba, b) \\<in> g x\n\ngoal (1 subgoal):\n 1. \\<not> x < xa \\<Longrightarrow> (a, aa, b) \\<in> edges Y", "then"], ["proof (chain)\npicking this:\n  (a, ac, ba) \\<in> edges X\n  (ac, aa) \\<in> g x\n  (ba, b) \\<in> g x", "show ?thesis"], ["proof (prove)\nusing this:\n  (a, ac, ba) \\<in> edges X\n  (ac, aa) \\<in> g x\n  (ba, b) \\<in> g x\n\ngoal (1 subgoal):\n 1. (a, aa, b) \\<in> edges Y", "using e[of x]"], ["proof (prove)\nusing this:\n  (a, ac, ba) \\<in> edges X\n  (ac, aa) \\<in> g x\n  (ba, b) \\<in> g x\n  edges (map_graph (g x) X) \\<subseteq> edges Y\n\ngoal (1 subgoal):\n 1. (a, aa, b) \\<in> edges Y", "by auto"], ["proof (state)\nthis:\n  (a, aa, b) \\<in> edges Y\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (a, aa, b) \\<in> edges Y\n\ngoal (2 subgoals):\n 1. edges (map_graph (\\<Union> (range g)) X) \\<subseteq> edges Y\n 2. vertices (map_graph (\\<Union> (range g)) X) \\<subseteq> vertices Y", "}"], ["proof (state)\nthis:\n  \\<lbrakk>(?a2, ?ac2, ?ba2) \\<in> edges X; (?ac2, ?aa2) \\<in> g ?x2;\n   (?ba2, ?b2) \\<in> g ?xa2\\<rbrakk>\n  \\<Longrightarrow> (?a2, ?aa2, ?b2) \\<in> edges Y\n\ngoal (2 subgoals):\n 1. edges (map_graph (\\<Union> (range g)) X) \\<subseteq> edges Y\n 2. vertices (map_graph (\\<Union> (range g)) X) \\<subseteq> vertices Y", "thus \"edges (map_graph (\\<Union>i. g i) X) \\<subseteq> edges Y\""], ["proof (prove)\nusing this:\n  \\<lbrakk>(?a2, ?ac2, ?ba2) \\<in> edges X; (?ac2, ?aa2) \\<in> g ?x2;\n   (?ba2, ?b2) \\<in> g ?xa2\\<rbrakk>\n  \\<Longrightarrow> (?a2, ?aa2, ?b2) \\<in> edges Y\n\ngoal (1 subgoal):\n 1. edges (map_graph (\\<Union> (range g)) X) \\<subseteq> edges Y", "by auto"], ["proof (state)\nthis:\n  edges (map_graph (\\<Union> (range g)) X) \\<subseteq> edges Y\n\ngoal (1 subgoal):\n 1. vertices (map_graph (\\<Union> (range g)) X) \\<subseteq> vertices Y", "show \"vertices (map_graph (\\<Union>i. g i) X) \\<subseteq> vertices Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vertices (map_graph (\\<Union> (range g)) X) \\<subseteq> vertices Y", "using v"], ["proof (prove)\nusing this:\n  vertices (map_graph (g ?i) X) \\<subseteq> vertices Y\n\ngoal (1 subgoal):\n 1. vertices (map_graph (\\<Union> (range g)) X) \\<subseteq> vertices Y", "by auto"], ["proof (state)\nthis:\n  vertices (map_graph (\\<Union> (range g)) X) \\<subseteq> vertices Y\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>We show that @{term subgraph} indeed matches the definition in the paper (Definition 7).\\<close>"], ["", "lemma subgraph_def:\n\"subgraph G\\<^sub>1 G\\<^sub>2 = (G\\<^sub>1 = restrict G\\<^sub>1 \\<and> G\\<^sub>2 = restrict G\\<^sub>2 \\<and> graph_union G\\<^sub>1 G\\<^sub>2 = G\\<^sub>2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subgraph G\\<^sub>1 G\\<^sub>2 =\n    (graph G\\<^sub>1 \\<and>\n     graph G\\<^sub>2 \\<and> graph_union G\\<^sub>1 G\\<^sub>2 = G\\<^sub>2)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. subgraph G\\<^sub>1 G\\<^sub>2 \\<Longrightarrow>\n    graph G\\<^sub>1 \\<and>\n    graph G\\<^sub>2 \\<and> graph_union G\\<^sub>1 G\\<^sub>2 = G\\<^sub>2\n 2. graph G\\<^sub>1 \\<and>\n    graph G\\<^sub>2 \\<and>\n    graph_union G\\<^sub>1 G\\<^sub>2 = G\\<^sub>2 \\<Longrightarrow>\n    subgraph G\\<^sub>1 G\\<^sub>2", "assume assms:\"subgraph G\\<^sub>1 G\\<^sub>2\""], ["proof (state)\nthis:\n  subgraph G\\<^sub>1 G\\<^sub>2\n\ngoal (2 subgoals):\n 1. subgraph G\\<^sub>1 G\\<^sub>2 \\<Longrightarrow>\n    graph G\\<^sub>1 \\<and>\n    graph G\\<^sub>2 \\<and> graph_union G\\<^sub>1 G\\<^sub>2 = G\\<^sub>2\n 2. graph G\\<^sub>1 \\<and>\n    graph G\\<^sub>2 \\<and>\n    graph_union G\\<^sub>1 G\\<^sub>2 = G\\<^sub>2 \\<Longrightarrow>\n    subgraph G\\<^sub>1 G\\<^sub>2", "hence r:\"G\\<^sub>2 = restrict G\\<^sub>2\" \"G\\<^sub>1 = restrict G\\<^sub>1\""], ["proof (prove)\nusing this:\n  subgraph G\\<^sub>1 G\\<^sub>2\n\ngoal (1 subgoal):\n 1. graph G\\<^sub>2 &&& graph G\\<^sub>1", "unfolding graph_homomorphism_def"], ["proof (prove)\nusing this:\n  vertices G\\<^sub>1 = Domain (Id_on (vertices G\\<^sub>1)) \\<and>\n  graph G\\<^sub>1 \\<and>\n  graph G\\<^sub>2 \\<and>\n  Id_on (vertices G\\<^sub>1) `` vertices G\\<^sub>1\n  \\<subseteq> vertices G\\<^sub>2 \\<and>\n  univalent (Id_on (vertices G\\<^sub>1)) \\<and>\n  edge_preserving (Id_on (vertices G\\<^sub>1)) (edges G\\<^sub>1)\n   (edges G\\<^sub>2)\n\ngoal (1 subgoal):\n 1. graph G\\<^sub>2 &&& graph G\\<^sub>1", "by auto"], ["proof (state)\nthis:\n  graph G\\<^sub>2\n  graph G\\<^sub>1\n\ngoal (2 subgoals):\n 1. subgraph G\\<^sub>1 G\\<^sub>2 \\<Longrightarrow>\n    graph G\\<^sub>1 \\<and>\n    graph G\\<^sub>2 \\<and> graph_union G\\<^sub>1 G\\<^sub>2 = G\\<^sub>2\n 2. graph G\\<^sub>1 \\<and>\n    graph G\\<^sub>2 \\<and>\n    graph_union G\\<^sub>1 G\\<^sub>2 = G\\<^sub>2 \\<Longrightarrow>\n    subgraph G\\<^sub>1 G\\<^sub>2", "from subgraph_subset[OF assms]"], ["proof (chain)\npicking this:\n  vertices G\\<^sub>1 \\<subseteq> vertices G\\<^sub>2\n  edges (restrict G\\<^sub>1) \\<subseteq> edges G\\<^sub>2", "have ss:\"vertices (restrict G\\<^sub>1) \\<subseteq> vertices G\\<^sub>2\" \"edges (restrict G\\<^sub>1) \\<subseteq> edges G\\<^sub>2\""], ["proof (prove)\nusing this:\n  vertices G\\<^sub>1 \\<subseteq> vertices G\\<^sub>2\n  edges (restrict G\\<^sub>1) \\<subseteq> edges G\\<^sub>2\n\ngoal (1 subgoal):\n 1. vertices (restrict G\\<^sub>1) \\<subseteq> vertices G\\<^sub>2 &&&\n    edges (restrict G\\<^sub>1) \\<subseteq> edges G\\<^sub>2", "by auto"], ["proof (state)\nthis:\n  vertices (restrict G\\<^sub>1) \\<subseteq> vertices G\\<^sub>2\n  edges (restrict G\\<^sub>1) \\<subseteq> edges G\\<^sub>2\n\ngoal (2 subgoals):\n 1. subgraph G\\<^sub>1 G\\<^sub>2 \\<Longrightarrow>\n    graph G\\<^sub>1 \\<and>\n    graph G\\<^sub>2 \\<and> graph_union G\\<^sub>1 G\\<^sub>2 = G\\<^sub>2\n 2. graph G\\<^sub>1 \\<and>\n    graph G\\<^sub>2 \\<and>\n    graph_union G\\<^sub>1 G\\<^sub>2 = G\\<^sub>2 \\<Longrightarrow>\n    subgraph G\\<^sub>1 G\\<^sub>2", "show \"G\\<^sub>1 = restrict G\\<^sub>1 \\<and> G\\<^sub>2 = restrict G\\<^sub>2 \\<and> graph_union G\\<^sub>1 G\\<^sub>2 = G\\<^sub>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. graph G\\<^sub>1 \\<and>\n    graph G\\<^sub>2 \\<and> graph_union G\\<^sub>1 G\\<^sub>2 = G\\<^sub>2", "proof(cases G\\<^sub>2)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x1 x2.\n       G\\<^sub>2 = LG x1 x2 \\<Longrightarrow>\n       graph G\\<^sub>1 \\<and>\n       graph G\\<^sub>2 \\<and> graph_union G\\<^sub>1 G\\<^sub>2 = G\\<^sub>2", "case (LG x1 x2)"], ["proof (state)\nthis:\n  G\\<^sub>2 = LG x1 x2\n\ngoal (1 subgoal):\n 1. \\<And>x1 x2.\n       G\\<^sub>2 = LG x1 x2 \\<Longrightarrow>\n       graph G\\<^sub>1 \\<and>\n       graph G\\<^sub>2 \\<and> graph_union G\\<^sub>1 G\\<^sub>2 = G\\<^sub>2", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. graph G\\<^sub>1 \\<and>\n    graph G\\<^sub>2 \\<and> graph_union G\\<^sub>1 G\\<^sub>2 = G\\<^sub>2", "using ss r"], ["proof (prove)\nusing this:\n  vertices (restrict G\\<^sub>1) \\<subseteq> vertices G\\<^sub>2\n  edges (restrict G\\<^sub>1) \\<subseteq> edges G\\<^sub>2\n  graph G\\<^sub>2\n  graph G\\<^sub>1\n\ngoal (1 subgoal):\n 1. graph G\\<^sub>1 \\<and>\n    graph G\\<^sub>2 \\<and> graph_union G\\<^sub>1 G\\<^sub>2 = G\\<^sub>2", "unfolding graph_union_def LG"], ["proof (prove)\nusing this:\n  vertices (restrict G\\<^sub>1) \\<subseteq> vertices (LG x1 x2)\n  edges (restrict G\\<^sub>1) \\<subseteq> edges (LG x1 x2)\n  graph (LG x1 x2)\n  graph G\\<^sub>1\n\ngoal (1 subgoal):\n 1. graph G\\<^sub>1 \\<and>\n    graph (LG x1 x2) \\<and>\n    LG (edges G\\<^sub>1 \\<union> edges (LG x1 x2))\n     (vertices G\\<^sub>1 \\<union> vertices (LG x1 x2)) =\n    LG x1 x2", "by auto"], ["proof (state)\nthis:\n  graph G\\<^sub>1 \\<and>\n  graph G\\<^sub>2 \\<and> graph_union G\\<^sub>1 G\\<^sub>2 = G\\<^sub>2\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  graph G\\<^sub>1 \\<and>\n  graph G\\<^sub>2 \\<and> graph_union G\\<^sub>1 G\\<^sub>2 = G\\<^sub>2\n\ngoal (1 subgoal):\n 1. graph G\\<^sub>1 \\<and>\n    graph G\\<^sub>2 \\<and>\n    graph_union G\\<^sub>1 G\\<^sub>2 = G\\<^sub>2 \\<Longrightarrow>\n    subgraph G\\<^sub>1 G\\<^sub>2", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. graph G\\<^sub>1 \\<and>\n    graph G\\<^sub>2 \\<and>\n    graph_union G\\<^sub>1 G\\<^sub>2 = G\\<^sub>2 \\<Longrightarrow>\n    subgraph G\\<^sub>1 G\\<^sub>2", "assume gu: \"G\\<^sub>1 = restrict G\\<^sub>1 \\<and> G\\<^sub>2 = restrict G\\<^sub>2 \\<and> graph_union G\\<^sub>1 G\\<^sub>2 = G\\<^sub>2\""], ["proof (state)\nthis:\n  graph G\\<^sub>1 \\<and>\n  graph G\\<^sub>2 \\<and> graph_union G\\<^sub>1 G\\<^sub>2 = G\\<^sub>2\n\ngoal (1 subgoal):\n 1. graph G\\<^sub>1 \\<and>\n    graph G\\<^sub>2 \\<and>\n    graph_union G\\<^sub>1 G\\<^sub>2 = G\\<^sub>2 \\<Longrightarrow>\n    subgraph G\\<^sub>1 G\\<^sub>2", "hence sub:\"(edges G\\<^sub>1 \\<union> edges G\\<^sub>2) \\<subseteq> edges G\\<^sub>2\"\n    \"vertices G\\<^sub>1 \\<subseteq> vertices G\\<^sub>2\""], ["proof (prove)\nusing this:\n  graph G\\<^sub>1 \\<and>\n  graph G\\<^sub>2 \\<and> graph_union G\\<^sub>1 G\\<^sub>2 = G\\<^sub>2\n\ngoal (1 subgoal):\n 1. edges G\\<^sub>1 \\<union> edges G\\<^sub>2 \\<subseteq> edges G\\<^sub>2 &&&\n    vertices G\\<^sub>1 \\<subseteq> vertices G\\<^sub>2", "unfolding graph_union_def"], ["proof (prove)\nusing this:\n  graph G\\<^sub>1 \\<and>\n  graph G\\<^sub>2 \\<and>\n  LG (edges G\\<^sub>1 \\<union> edges G\\<^sub>2)\n   (vertices G\\<^sub>1 \\<union> vertices G\\<^sub>2) =\n  G\\<^sub>2\n\ngoal (1 subgoal):\n 1. edges G\\<^sub>1 \\<union> edges G\\<^sub>2 \\<subseteq> edges G\\<^sub>2 &&&\n    vertices G\\<^sub>1 \\<subseteq> vertices G\\<^sub>2", "by (cases G\\<^sub>2;auto)+"], ["proof (state)\nthis:\n  edges G\\<^sub>1 \\<union> edges G\\<^sub>2 \\<subseteq> edges G\\<^sub>2\n  vertices G\\<^sub>1 \\<subseteq> vertices G\\<^sub>2\n\ngoal (1 subgoal):\n 1. graph G\\<^sub>1 \\<and>\n    graph G\\<^sub>2 \\<and>\n    graph_union G\\<^sub>1 G\\<^sub>2 = G\\<^sub>2 \\<Longrightarrow>\n    subgraph G\\<^sub>1 G\\<^sub>2", "have r:\"G\\<^sub>1 = restrict G\\<^sub>1\" \"G\\<^sub>2 = restrict G\\<^sub>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. graph G\\<^sub>1 &&& graph G\\<^sub>2", "using gu"], ["proof (prove)\nusing this:\n  graph G\\<^sub>1 \\<and>\n  graph G\\<^sub>2 \\<and> graph_union G\\<^sub>1 G\\<^sub>2 = G\\<^sub>2\n\ngoal (1 subgoal):\n 1. graph G\\<^sub>1 &&& graph G\\<^sub>2", "by auto"], ["proof (state)\nthis:\n  graph G\\<^sub>1\n  graph G\\<^sub>2\n\ngoal (1 subgoal):\n 1. graph G\\<^sub>1 \\<and>\n    graph G\\<^sub>2 \\<and>\n    graph_union G\\<^sub>1 G\\<^sub>2 = G\\<^sub>2 \\<Longrightarrow>\n    subgraph G\\<^sub>1 G\\<^sub>2", "show \"subgraph G\\<^sub>1 G\\<^sub>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subgraph G\\<^sub>1 G\\<^sub>2", "unfolding subgraph_def2[OF r]"], ["proof (prove)\ngoal (1 subgoal):\n 1. vertices G\\<^sub>1 \\<subseteq> vertices G\\<^sub>2 \\<and>\n    edges G\\<^sub>1 \\<subseteq> edges G\\<^sub>2", "using sub"], ["proof (prove)\nusing this:\n  edges G\\<^sub>1 \\<union> edges G\\<^sub>2 \\<subseteq> edges G\\<^sub>2\n  vertices G\\<^sub>1 \\<subseteq> vertices G\\<^sub>2\n\ngoal (1 subgoal):\n 1. vertices G\\<^sub>1 \\<subseteq> vertices G\\<^sub>2 \\<and>\n    edges G\\<^sub>1 \\<subseteq> edges G\\<^sub>2", "by auto"], ["proof (state)\nthis:\n  subgraph G\\<^sub>1 G\\<^sub>2\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma subgraph_refl[simp]: \n\"subgraph G G = (G = restrict G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subgraph G G = graph G", "unfolding subgraph_def graph_union_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (graph G \\<and>\n     graph G \\<and>\n     LG (edges G \\<union> edges G) (vertices G \\<union> vertices G) = G) =\n    graph G", "by(cases G,auto)"], ["", "lemma subgraph_restrict[simp]:\n  \"subgraph G (restrict G) = graph G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subgraph G (restrict G) = graph G", "using subgraph_refl subgraph_def"], ["proof (prove)\nusing this:\n  subgraph ?G ?G = graph ?G\n  subgraph ?G\\<^sub>1 ?G\\<^sub>2 =\n  (graph ?G\\<^sub>1 \\<and>\n   graph ?G\\<^sub>2 \\<and> graph_union ?G\\<^sub>1 ?G\\<^sub>2 = ?G\\<^sub>2)\n\ngoal (1 subgoal):\n 1. subgraph G (restrict G) = graph G", "by auto"], ["", "text \\<open>Definition 10. We write @{term graph_homomorphism} instead of embedding.\\<close>"], ["", "lemma graph_homomorphism_def2: (* Shows a graph homomorphism is an embedding as in the paper *)\n  shows \"graph_homomorphism G\\<^sub>1 G\\<^sub>2 f =\n   (vertices G\\<^sub>1 = Domain f \\<and> univalent f \\<and> G\\<^sub>1 = restrict G\\<^sub>1 \\<and> G\\<^sub>2 = restrict G\\<^sub>2 \\<and> graph_union (map_graph f G\\<^sub>1) G\\<^sub>2 = G\\<^sub>2)\"\n   (is \"?lhs = ?rhs\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. graph_homomorphism G\\<^sub>1 G\\<^sub>2 f =\n    (vertices G\\<^sub>1 = Domain f \\<and>\n     univalent f \\<and>\n     graph G\\<^sub>1 \\<and>\n     graph G\\<^sub>2 \\<and>\n     graph_union (map_graph f G\\<^sub>1) G\\<^sub>2 = G\\<^sub>2)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. graph_homomorphism G\\<^sub>1 G\\<^sub>2 f \\<Longrightarrow>\n    vertices G\\<^sub>1 = Domain f \\<and>\n    univalent f \\<and>\n    graph G\\<^sub>1 \\<and>\n    graph G\\<^sub>2 \\<and>\n    graph_union (map_graph f G\\<^sub>1) G\\<^sub>2 = G\\<^sub>2\n 2. vertices G\\<^sub>1 = Domain f \\<and>\n    univalent f \\<and>\n    graph G\\<^sub>1 \\<and>\n    graph G\\<^sub>2 \\<and>\n    graph_union (map_graph f G\\<^sub>1) G\\<^sub>2 =\n    G\\<^sub>2 \\<Longrightarrow>\n    graph_homomorphism G\\<^sub>1 G\\<^sub>2 f", "let ?m = \"map_graph f G\\<^sub>1\""], ["proof (state)\ngoal (2 subgoals):\n 1. graph_homomorphism G\\<^sub>1 G\\<^sub>2 f \\<Longrightarrow>\n    vertices G\\<^sub>1 = Domain f \\<and>\n    univalent f \\<and>\n    graph G\\<^sub>1 \\<and>\n    graph G\\<^sub>2 \\<and>\n    graph_union (map_graph f G\\<^sub>1) G\\<^sub>2 = G\\<^sub>2\n 2. vertices G\\<^sub>1 = Domain f \\<and>\n    univalent f \\<and>\n    graph G\\<^sub>1 \\<and>\n    graph G\\<^sub>2 \\<and>\n    graph_union (map_graph f G\\<^sub>1) G\\<^sub>2 =\n    G\\<^sub>2 \\<Longrightarrow>\n    graph_homomorphism G\\<^sub>1 G\\<^sub>2 f", "assume ?rhs"], ["proof (state)\nthis:\n  vertices G\\<^sub>1 = Domain f \\<and>\n  univalent f \\<and>\n  graph G\\<^sub>1 \\<and>\n  graph G\\<^sub>2 \\<and>\n  graph_union (map_graph f G\\<^sub>1) G\\<^sub>2 = G\\<^sub>2\n\ngoal (2 subgoals):\n 1. graph_homomorphism G\\<^sub>1 G\\<^sub>2 f \\<Longrightarrow>\n    vertices G\\<^sub>1 = Domain f \\<and>\n    univalent f \\<and>\n    graph G\\<^sub>1 \\<and>\n    graph G\\<^sub>2 \\<and>\n    graph_union (map_graph f G\\<^sub>1) G\\<^sub>2 = G\\<^sub>2\n 2. vertices G\\<^sub>1 = Domain f \\<and>\n    univalent f \\<and>\n    graph G\\<^sub>1 \\<and>\n    graph G\\<^sub>2 \\<and>\n    graph_union (map_graph f G\\<^sub>1) G\\<^sub>2 =\n    G\\<^sub>2 \\<Longrightarrow>\n    graph_homomorphism G\\<^sub>1 G\\<^sub>2 f", "hence assms : \"vertices G\\<^sub>1 = Domain f\" \"univalent f\" \"G\\<^sub>1 = restrict G\\<^sub>1\"\n    and sg: \"subgraph ?m G\\<^sub>2\"\n    and f_id:\"f O Id_on (f `` vertices G\\<^sub>1) = f\""], ["proof (prove)\nusing this:\n  vertices G\\<^sub>1 = Domain f \\<and>\n  univalent f \\<and>\n  graph G\\<^sub>1 \\<and>\n  graph G\\<^sub>2 \\<and>\n  graph_union (map_graph f G\\<^sub>1) G\\<^sub>2 = G\\<^sub>2\n\ngoal (1 subgoal):\n 1. (vertices G\\<^sub>1 = Domain f &&& univalent f &&& graph G\\<^sub>1) &&&\n    subgraph (map_graph f G\\<^sub>1) G\\<^sub>2 &&&\n    f O Id_on (f `` vertices G\\<^sub>1) = f", "unfolding subgraph_def"], ["proof (prove)\nusing this:\n  vertices G\\<^sub>1 = Domain f \\<and>\n  univalent f \\<and>\n  graph G\\<^sub>1 \\<and>\n  graph G\\<^sub>2 \\<and>\n  graph_union (map_graph f G\\<^sub>1) G\\<^sub>2 = G\\<^sub>2\n\ngoal (1 subgoal):\n 1. (vertices G\\<^sub>1 = Domain f &&& univalent f &&& graph G\\<^sub>1) &&&\n    graph (map_graph f G\\<^sub>1) \\<and>\n    graph G\\<^sub>2 \\<and>\n    graph_union (map_graph f G\\<^sub>1) G\\<^sub>2 = G\\<^sub>2 &&&\n    f O Id_on (f `` vertices G\\<^sub>1) = f", "by auto"], ["proof (state)\nthis:\n  vertices G\\<^sub>1 = Domain f\n  univalent f\n  graph G\\<^sub>1\n  subgraph (map_graph f G\\<^sub>1) G\\<^sub>2\n  f O Id_on (f `` vertices G\\<^sub>1) = f\n\ngoal (2 subgoals):\n 1. graph_homomorphism G\\<^sub>1 G\\<^sub>2 f \\<Longrightarrow>\n    vertices G\\<^sub>1 = Domain f \\<and>\n    univalent f \\<and>\n    graph G\\<^sub>1 \\<and>\n    graph G\\<^sub>2 \\<and>\n    graph_union (map_graph f G\\<^sub>1) G\\<^sub>2 = G\\<^sub>2\n 2. vertices G\\<^sub>1 = Domain f \\<and>\n    univalent f \\<and>\n    graph G\\<^sub>1 \\<and>\n    graph G\\<^sub>2 \\<and>\n    graph_union (map_graph f G\\<^sub>1) G\\<^sub>2 =\n    G\\<^sub>2 \\<Longrightarrow>\n    graph_homomorphism G\\<^sub>1 G\\<^sub>2 f", "hence \"edge_preserving (Id_on (vertices ?m)) (edges ?m) (edges G\\<^sub>2)\""], ["proof (prove)\nusing this:\n  vertices G\\<^sub>1 = Domain f\n  univalent f\n  graph G\\<^sub>1\n  subgraph (map_graph f G\\<^sub>1) G\\<^sub>2\n  f O Id_on (f `` vertices G\\<^sub>1) = f\n\ngoal (1 subgoal):\n 1. edge_preserving (Id_on (vertices (map_graph f G\\<^sub>1)))\n     (edges (map_graph f G\\<^sub>1)) (edges G\\<^sub>2)", "unfolding graph_homomorphism_def"], ["proof (prove)\nusing this:\n  vertices G\\<^sub>1 = Domain f\n  univalent f\n  graph G\\<^sub>1\n  vertices (map_graph f G\\<^sub>1) =\n  Domain (Id_on (vertices (map_graph f G\\<^sub>1))) \\<and>\n  graph (map_graph f G\\<^sub>1) \\<and>\n  graph G\\<^sub>2 \\<and>\n  Id_on (vertices (map_graph f G\\<^sub>1)) ``\n  vertices (map_graph f G\\<^sub>1)\n  \\<subseteq> vertices G\\<^sub>2 \\<and>\n  univalent (Id_on (vertices (map_graph f G\\<^sub>1))) \\<and>\n  edge_preserving (Id_on (vertices (map_graph f G\\<^sub>1)))\n   (edges (map_graph f G\\<^sub>1)) (edges G\\<^sub>2)\n  f O Id_on (f `` vertices G\\<^sub>1) = f\n\ngoal (1 subgoal):\n 1. edge_preserving (Id_on (vertices (map_graph f G\\<^sub>1)))\n     (edges (map_graph f G\\<^sub>1)) (edges G\\<^sub>2)", "by auto"], ["proof (state)\nthis:\n  edge_preserving (Id_on (vertices (map_graph f G\\<^sub>1)))\n   (edges (map_graph f G\\<^sub>1)) (edges G\\<^sub>2)\n\ngoal (2 subgoals):\n 1. graph_homomorphism G\\<^sub>1 G\\<^sub>2 f \\<Longrightarrow>\n    vertices G\\<^sub>1 = Domain f \\<and>\n    univalent f \\<and>\n    graph G\\<^sub>1 \\<and>\n    graph G\\<^sub>2 \\<and>\n    graph_union (map_graph f G\\<^sub>1) G\\<^sub>2 = G\\<^sub>2\n 2. vertices G\\<^sub>1 = Domain f \\<and>\n    univalent f \\<and>\n    graph G\\<^sub>1 \\<and>\n    graph G\\<^sub>2 \\<and>\n    graph_union (map_graph f G\\<^sub>1) G\\<^sub>2 =\n    G\\<^sub>2 \\<Longrightarrow>\n    graph_homomorphism G\\<^sub>1 G\\<^sub>2 f", "hence \"on_triple (f O Id_on (f `` vertices G\\<^sub>1)) `` edges G\\<^sub>1 \\<subseteq> edges G\\<^sub>2\""], ["proof (prove)\nusing this:\n  edge_preserving (Id_on (vertices (map_graph f G\\<^sub>1)))\n   (edges (map_graph f G\\<^sub>1)) (edges G\\<^sub>2)\n\ngoal (1 subgoal):\n 1. on_triple (f O Id_on (f `` vertices G\\<^sub>1)) `` edges G\\<^sub>1\n    \\<subseteq> edges G\\<^sub>2", "(* rewriting peak *)"], ["proof (prove)\nusing this:\n  edge_preserving (Id_on (vertices (map_graph f G\\<^sub>1)))\n   (edges (map_graph f G\\<^sub>1)) (edges G\\<^sub>2)\n\ngoal (1 subgoal):\n 1. on_triple (f O Id_on (f `` vertices G\\<^sub>1)) `` edges G\\<^sub>1\n    \\<subseteq> edges G\\<^sub>2", "unfolding relcomp_Image edge_preserving map_graph_selectors relcomp_on_triple"], ["proof (prove)\nusing this:\n  on_triple (Id_on (f `` vertices G\\<^sub>1)) ``\n  on_triple f `` edges G\\<^sub>1\n  \\<subseteq> edges G\\<^sub>2\n\ngoal (1 subgoal):\n 1. on_triple (Id_on (f `` vertices G\\<^sub>1)) ``\n    on_triple f `` edges G\\<^sub>1\n    \\<subseteq> edges G\\<^sub>2", "."], ["proof (state)\nthis:\n  on_triple (f O Id_on (f `` vertices G\\<^sub>1)) `` edges G\\<^sub>1\n  \\<subseteq> edges G\\<^sub>2\n\ngoal (2 subgoals):\n 1. graph_homomorphism G\\<^sub>1 G\\<^sub>2 f \\<Longrightarrow>\n    vertices G\\<^sub>1 = Domain f \\<and>\n    univalent f \\<and>\n    graph G\\<^sub>1 \\<and>\n    graph G\\<^sub>2 \\<and>\n    graph_union (map_graph f G\\<^sub>1) G\\<^sub>2 = G\\<^sub>2\n 2. vertices G\\<^sub>1 = Domain f \\<and>\n    univalent f \\<and>\n    graph G\\<^sub>1 \\<and>\n    graph G\\<^sub>2 \\<and>\n    graph_union (map_graph f G\\<^sub>1) G\\<^sub>2 =\n    G\\<^sub>2 \\<Longrightarrow>\n    graph_homomorphism G\\<^sub>1 G\\<^sub>2 f", "hence \"edge_preserving f (edges G\\<^sub>1) (edges G\\<^sub>2)\""], ["proof (prove)\nusing this:\n  on_triple (f O Id_on (f `` vertices G\\<^sub>1)) `` edges G\\<^sub>1\n  \\<subseteq> edges G\\<^sub>2\n\ngoal (1 subgoal):\n 1. edge_preserving f (edges G\\<^sub>1) (edges G\\<^sub>2)", "unfolding edge_preserving f_id"], ["proof (prove)\nusing this:\n  on_triple f `` edges G\\<^sub>1 \\<subseteq> edges G\\<^sub>2\n\ngoal (1 subgoal):\n 1. on_triple f `` edges G\\<^sub>1 \\<subseteq> edges G\\<^sub>2", "."], ["proof (state)\nthis:\n  edge_preserving f (edges G\\<^sub>1) (edges G\\<^sub>2)\n\ngoal (2 subgoals):\n 1. graph_homomorphism G\\<^sub>1 G\\<^sub>2 f \\<Longrightarrow>\n    vertices G\\<^sub>1 = Domain f \\<and>\n    univalent f \\<and>\n    graph G\\<^sub>1 \\<and>\n    graph G\\<^sub>2 \\<and>\n    graph_union (map_graph f G\\<^sub>1) G\\<^sub>2 = G\\<^sub>2\n 2. vertices G\\<^sub>1 = Domain f \\<and>\n    univalent f \\<and>\n    graph G\\<^sub>1 \\<and>\n    graph G\\<^sub>2 \\<and>\n    graph_union (map_graph f G\\<^sub>1) G\\<^sub>2 =\n    G\\<^sub>2 \\<Longrightarrow>\n    graph_homomorphism G\\<^sub>1 G\\<^sub>2 f", "thus ?lhs"], ["proof (prove)\nusing this:\n  edge_preserving f (edges G\\<^sub>1) (edges G\\<^sub>2)\n\ngoal (1 subgoal):\n 1. graph_homomorphism G\\<^sub>1 G\\<^sub>2 f", "using sg assms"], ["proof (prove)\nusing this:\n  edge_preserving f (edges G\\<^sub>1) (edges G\\<^sub>2)\n  subgraph (map_graph f G\\<^sub>1) G\\<^sub>2\n  vertices G\\<^sub>1 = Domain f\n  univalent f\n  graph G\\<^sub>1\n\ngoal (1 subgoal):\n 1. graph_homomorphism G\\<^sub>1 G\\<^sub>2 f", "unfolding graph_homomorphism_def"], ["proof (prove)\nusing this:\n  edge_preserving f (edges G\\<^sub>1) (edges G\\<^sub>2)\n  vertices (map_graph f G\\<^sub>1) =\n  Domain (Id_on (vertices (map_graph f G\\<^sub>1))) \\<and>\n  graph (map_graph f G\\<^sub>1) \\<and>\n  graph G\\<^sub>2 \\<and>\n  Id_on (vertices (map_graph f G\\<^sub>1)) ``\n  vertices (map_graph f G\\<^sub>1)\n  \\<subseteq> vertices G\\<^sub>2 \\<and>\n  univalent (Id_on (vertices (map_graph f G\\<^sub>1))) \\<and>\n  edge_preserving (Id_on (vertices (map_graph f G\\<^sub>1)))\n   (edges (map_graph f G\\<^sub>1)) (edges G\\<^sub>2)\n  vertices G\\<^sub>1 = Domain f\n  univalent f\n  graph G\\<^sub>1\n\ngoal (1 subgoal):\n 1. vertices G\\<^sub>1 = Domain f \\<and>\n    graph G\\<^sub>1 \\<and>\n    graph G\\<^sub>2 \\<and>\n    f `` vertices G\\<^sub>1 \\<subseteq> vertices G\\<^sub>2 \\<and>\n    univalent f \\<and> edge_preserving f (edges G\\<^sub>1) (edges G\\<^sub>2)", "by auto"], ["proof (state)\nthis:\n  graph_homomorphism G\\<^sub>1 G\\<^sub>2 f\n\ngoal (1 subgoal):\n 1. graph_homomorphism G\\<^sub>1 G\\<^sub>2 f \\<Longrightarrow>\n    vertices G\\<^sub>1 = Domain f \\<and>\n    univalent f \\<and>\n    graph G\\<^sub>1 \\<and>\n    graph G\\<^sub>2 \\<and>\n    graph_union (map_graph f G\\<^sub>1) G\\<^sub>2 = G\\<^sub>2", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. graph_homomorphism G\\<^sub>1 G\\<^sub>2 f \\<Longrightarrow>\n    vertices G\\<^sub>1 = Domain f \\<and>\n    univalent f \\<and>\n    graph G\\<^sub>1 \\<and>\n    graph G\\<^sub>2 \\<and>\n    graph_union (map_graph f G\\<^sub>1) G\\<^sub>2 = G\\<^sub>2", "assume ih:?lhs"], ["proof (state)\nthis:\n  graph_homomorphism G\\<^sub>1 G\\<^sub>2 f\n\ngoal (1 subgoal):\n 1. graph_homomorphism G\\<^sub>1 G\\<^sub>2 f \\<Longrightarrow>\n    vertices G\\<^sub>1 = Domain f \\<and>\n    univalent f \\<and>\n    graph G\\<^sub>1 \\<and>\n    graph G\\<^sub>2 \\<and>\n    graph_union (map_graph f G\\<^sub>1) G\\<^sub>2 = G\\<^sub>2", "hence \"vertices G\\<^sub>1 = Domain f \\<and> univalent f \\<and> G\\<^sub>1 = restrict G\\<^sub>1 \\<and> subgraph (map_graph f G\\<^sub>1) G\\<^sub>2\""], ["proof (prove)\nusing this:\n  graph_homomorphism G\\<^sub>1 G\\<^sub>2 f\n\ngoal (1 subgoal):\n 1. vertices G\\<^sub>1 = Domain f \\<and>\n    univalent f \\<and>\n    graph G\\<^sub>1 \\<and> subgraph (map_graph f G\\<^sub>1) G\\<^sub>2", "unfolding graph_homomorphism_def edge_preserving"], ["proof (prove)\nusing this:\n  vertices G\\<^sub>1 = Domain f \\<and>\n  graph G\\<^sub>1 \\<and>\n  graph G\\<^sub>2 \\<and>\n  f `` vertices G\\<^sub>1 \\<subseteq> vertices G\\<^sub>2 \\<and>\n  univalent f \\<and>\n  on_triple f `` edges G\\<^sub>1 \\<subseteq> edges G\\<^sub>2\n\ngoal (1 subgoal):\n 1. vertices G\\<^sub>1 = Domain f \\<and>\n    univalent f \\<and>\n    graph G\\<^sub>1 \\<and>\n    vertices (map_graph f G\\<^sub>1) =\n    Domain (Id_on (vertices (map_graph f G\\<^sub>1))) \\<and>\n    graph (map_graph f G\\<^sub>1) \\<and>\n    graph G\\<^sub>2 \\<and>\n    Id_on (vertices (map_graph f G\\<^sub>1)) ``\n    vertices (map_graph f G\\<^sub>1)\n    \\<subseteq> vertices G\\<^sub>2 \\<and>\n    univalent (Id_on (vertices (map_graph f G\\<^sub>1))) \\<and>\n    on_triple (Id_on (vertices (map_graph f G\\<^sub>1))) ``\n    edges (map_graph f G\\<^sub>1)\n    \\<subseteq> edges G\\<^sub>2", "by auto"], ["proof (state)\nthis:\n  vertices G\\<^sub>1 = Domain f \\<and>\n  univalent f \\<and>\n  graph G\\<^sub>1 \\<and> subgraph (map_graph f G\\<^sub>1) G\\<^sub>2\n\ngoal (1 subgoal):\n 1. graph_homomorphism G\\<^sub>1 G\\<^sub>2 f \\<Longrightarrow>\n    vertices G\\<^sub>1 = Domain f \\<and>\n    univalent f \\<and>\n    graph G\\<^sub>1 \\<and>\n    graph G\\<^sub>2 \\<and>\n    graph_union (map_graph f G\\<^sub>1) G\\<^sub>2 = G\\<^sub>2", "thus ?rhs"], ["proof (prove)\nusing this:\n  vertices G\\<^sub>1 = Domain f \\<and>\n  univalent f \\<and>\n  graph G\\<^sub>1 \\<and> subgraph (map_graph f G\\<^sub>1) G\\<^sub>2\n\ngoal (1 subgoal):\n 1. vertices G\\<^sub>1 = Domain f \\<and>\n    univalent f \\<and>\n    graph G\\<^sub>1 \\<and>\n    graph G\\<^sub>2 \\<and>\n    graph_union (map_graph f G\\<^sub>1) G\\<^sub>2 = G\\<^sub>2", "unfolding subgraph_def"], ["proof (prove)\nusing this:\n  vertices G\\<^sub>1 = Domain f \\<and>\n  univalent f \\<and>\n  graph G\\<^sub>1 \\<and>\n  graph (map_graph f G\\<^sub>1) \\<and>\n  graph G\\<^sub>2 \\<and>\n  graph_union (map_graph f G\\<^sub>1) G\\<^sub>2 = G\\<^sub>2\n\ngoal (1 subgoal):\n 1. vertices G\\<^sub>1 = Domain f \\<and>\n    univalent f \\<and>\n    graph G\\<^sub>1 \\<and>\n    graph G\\<^sub>2 \\<and>\n    graph_union (map_graph f G\\<^sub>1) G\\<^sub>2 = G\\<^sub>2", "by auto"], ["proof (state)\nthis:\n  vertices G\\<^sub>1 = Domain f \\<and>\n  univalent f \\<and>\n  graph G\\<^sub>1 \\<and>\n  graph G\\<^sub>2 \\<and>\n  graph_union (map_graph f G\\<^sub>1) G\\<^sub>2 = G\\<^sub>2\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma map_graph_preserves_subgraph[intro]:\n  assumes \"subgraph A B\"\n  shows \"subgraph (map_graph f A) (map_graph f B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subgraph (map_graph f A) (map_graph f B)", "using assms"], ["proof (prove)\nusing this:\n  subgraph A B\n\ngoal (1 subgoal):\n 1. subgraph (map_graph f A) (map_graph f B)", "unfolding subgraph_def"], ["proof (prove)\nusing this:\n  graph A \\<and> graph B \\<and> graph_union A B = B\n\ngoal (1 subgoal):\n 1. graph (map_graph f A) \\<and>\n    graph (map_graph f B) \\<and>\n    graph_union (map_graph f A) (map_graph f B) = map_graph f B", "by (auto simp:graph_union_iff)"], ["", "lemma graph_homomorphism_concr_graph:\n  assumes \"graph G\" \"graph (LG e v)\"\n  shows \"graph_homomorphism (LG e v) G x \\<longleftrightarrow>\n         x `` v \\<subseteq> vertices G \\<and> on_triple x `` e \\<subseteq> edges G \\<and> univalent x \\<and> Domain x = v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. graph_homomorphism (LG e v) G x =\n    (x `` v \\<subseteq> vertices G \\<and>\n     on_triple x `` e \\<subseteq> edges G \\<and>\n     univalent x \\<and> Domain x = v)", "using assms"], ["proof (prove)\nusing this:\n  graph G\n  graph (LG e v)\n\ngoal (1 subgoal):\n 1. graph_homomorphism (LG e v) G x =\n    (x `` v \\<subseteq> vertices G \\<and>\n     on_triple x `` e \\<subseteq> edges G \\<and>\n     univalent x \\<and> Domain x = v)", "unfolding graph_homomorphism_def2 graph_union_iff"], ["proof (prove)\nusing this:\n  graph G\n  graph (LG e v)\n\ngoal (1 subgoal):\n 1. (vertices (LG e v) = Domain x \\<and>\n     univalent x \\<and>\n     graph (LG e v) \\<and>\n     graph G \\<and>\n     edges (map_graph x (LG e v)) \\<subseteq> edges G \\<and>\n     vertices (map_graph x (LG e v)) \\<subseteq> vertices G) =\n    (x `` v \\<subseteq> vertices G \\<and>\n     on_triple x `` e \\<subseteq> edges G \\<and>\n     univalent x \\<and> Domain x = v)", "by auto"], ["", "lemma subgraph_preserves_hom:\n  assumes \"subgraph A B\"\n          \"graph_homomorphism X A h\"\n  shows \"graph_homomorphism X B h\""], ["proof (prove)\ngoal (1 subgoal):\n 1. graph_homomorphism X B h", "using assms"], ["proof (prove)\nusing this:\n  subgraph A B\n  graph_homomorphism X A h\n\ngoal (1 subgoal):\n 1. graph_homomorphism X B h", "by (meson graph_homomorphism_def2 map_graph_preserves_restricted subgraph_def subgraph_trans)"], ["", "lemma graph_homo_union_id:\nassumes \"graph_homomorphism (graph_union A B) G f\"\nshows \"graph A \\<Longrightarrow> graph_homomorphism A G (Id_on (vertices A) O f)\"\n      \"graph B \\<Longrightarrow> graph_homomorphism B G (Id_on (vertices B) O f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (graph A \\<Longrightarrow>\n     graph_homomorphism A G (Id_on (vertices A) O f)) &&&\n    (graph B \\<Longrightarrow>\n     graph_homomorphism B G (Id_on (vertices B) O f))", "using assms"], ["proof (prove)\nusing this:\n  graph_homomorphism (graph_union A B) G f\n\ngoal (1 subgoal):\n 1. (graph A \\<Longrightarrow>\n     graph_homomorphism A G (Id_on (vertices A) O f)) &&&\n    (graph B \\<Longrightarrow>\n     graph_homomorphism B G (Id_on (vertices B) O f))", "unfolding graph_homomorphism_def edge_preserving"], ["proof (prove)\nusing this:\n  vertices (graph_union A B) = Domain f \\<and>\n  graph (graph_union A B) \\<and>\n  graph G \\<and>\n  f `` vertices (graph_union A B) \\<subseteq> vertices G \\<and>\n  univalent f \\<and>\n  on_triple f `` edges (graph_union A B) \\<subseteq> edges G\n\ngoal (1 subgoal):\n 1. (graph A \\<Longrightarrow>\n     vertices A = Domain (Id_on (vertices A) O f) \\<and>\n     graph A \\<and>\n     graph G \\<and>\n     (Id_on (vertices A) O f) `` vertices A \\<subseteq> vertices G \\<and>\n     univalent (Id_on (vertices A) O f) \\<and>\n     on_triple (Id_on (vertices A) O f) `` edges A \\<subseteq> edges G) &&&\n    (graph B \\<Longrightarrow>\n     vertices B = Domain (Id_on (vertices B) O f) \\<and>\n     graph B \\<and>\n     graph G \\<and>\n     (Id_on (vertices B) O f) `` vertices B \\<subseteq> vertices G \\<and>\n     univalent (Id_on (vertices B) O f) \\<and>\n     on_triple (Id_on (vertices B) O f) `` edges B \\<subseteq> edges G)", "by (auto dest:edge_preserving_atomic)"], ["", "lemma graph_homo_union[intro]:\n  assumes\n   \"graph_homomorphism A G f_a\"\n   \"graph_homomorphism B G f_b\"\n   \"Domain f_a \\<inter> Domain f_b = Domain (f_a \\<inter> f_b)\"\n  shows \"graph_homomorphism (graph_union A B) G (f_a \\<union> f_b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. graph_homomorphism (graph_union A B) G (f_a \\<union> f_b)", "proof(rule graph_homomorphismI)"], ["proof (state)\ngoal (6 subgoals):\n 1. vertices (graph_union A B) = Domain (f_a \\<union> f_b)\n 2. (f_a \\<union> f_b) `` vertices (graph_union A B) \\<subseteq> vertices G\n 3. univalent (f_a \\<union> f_b)\n 4. edge_preserving (f_a \\<union> f_b) (edges (graph_union A B)) (edges G)\n 5. graph (graph_union A B)\n 6. graph G", "have v0:\"f_a `` vertices A \\<subseteq> vertices G\" \"f_b `` vertices B \\<subseteq> vertices G\"\n          \"vertices A = Domain f_a\" \"vertices B = Domain f_b\"\n          \"graph A\" \"graph B\"\n          \"univalent f_a\" \"univalent f_b\"\n          \"edge_preserving f_a (edges A) (edges G)\"\n          \"edge_preserving f_b (edges B) (edges G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((f_a `` vertices A \\<subseteq> vertices G &&&\n      f_b `` vertices B \\<subseteq> vertices G) &&&\n     vertices A = Domain f_a &&& vertices B = Domain f_b &&& graph A) &&&\n    (graph B &&& univalent f_a) &&&\n    univalent f_b &&&\n    edge_preserving f_a (edges A) (edges G) &&&\n    edge_preserving f_b (edges B) (edges G)", "using assms(1,2)"], ["proof (prove)\nusing this:\n  graph_homomorphism A G f_a\n  graph_homomorphism B G f_b\n\ngoal (1 subgoal):\n 1. ((f_a `` vertices A \\<subseteq> vertices G &&&\n      f_b `` vertices B \\<subseteq> vertices G) &&&\n     vertices A = Domain f_a &&& vertices B = Domain f_b &&& graph A) &&&\n    (graph B &&& univalent f_a) &&&\n    univalent f_b &&&\n    edge_preserving f_a (edges A) (edges G) &&&\n    edge_preserving f_b (edges B) (edges G)", "unfolding graph_homomorphism_def"], ["proof (prove)\nusing this:\n  vertices A = Domain f_a \\<and>\n  graph A \\<and>\n  graph G \\<and>\n  f_a `` vertices A \\<subseteq> vertices G \\<and>\n  univalent f_a \\<and> edge_preserving f_a (edges A) (edges G)\n  vertices B = Domain f_b \\<and>\n  graph B \\<and>\n  graph G \\<and>\n  f_b `` vertices B \\<subseteq> vertices G \\<and>\n  univalent f_b \\<and> edge_preserving f_b (edges B) (edges G)\n\ngoal (1 subgoal):\n 1. ((f_a `` vertices A \\<subseteq> vertices G &&&\n      f_b `` vertices B \\<subseteq> vertices G) &&&\n     vertices A = Domain f_a &&& vertices B = Domain f_b &&& graph A) &&&\n    (graph B &&& univalent f_a) &&&\n    univalent f_b &&&\n    edge_preserving f_a (edges A) (edges G) &&&\n    edge_preserving f_b (edges B) (edges G)", "by blast+"], ["proof (state)\nthis:\n  f_a `` vertices A \\<subseteq> vertices G\n  f_b `` vertices B \\<subseteq> vertices G\n  vertices A = Domain f_a\n  vertices B = Domain f_b\n  graph A\n  graph B\n  univalent f_a\n  univalent f_b\n  edge_preserving f_a (edges A) (edges G)\n  edge_preserving f_b (edges B) (edges G)\n\ngoal (6 subgoals):\n 1. vertices (graph_union A B) = Domain (f_a \\<union> f_b)\n 2. (f_a \\<union> f_b) `` vertices (graph_union A B) \\<subseteq> vertices G\n 3. univalent (f_a \\<union> f_b)\n 4. edge_preserving (f_a \\<union> f_b) (edges (graph_union A B)) (edges G)\n 5. graph (graph_union A B)\n 6. graph G", "hence v: \"f_a `` vertices (graph_union A B) \\<subseteq> vertices G\"\n           \"f_b `` vertices (graph_union A B) \\<subseteq> vertices G\""], ["proof (prove)\nusing this:\n  f_a `` vertices A \\<subseteq> vertices G\n  f_b `` vertices B \\<subseteq> vertices G\n  vertices A = Domain f_a\n  vertices B = Domain f_b\n  graph A\n  graph B\n  univalent f_a\n  univalent f_b\n  edge_preserving f_a (edges A) (edges G)\n  edge_preserving f_b (edges B) (edges G)\n\ngoal (1 subgoal):\n 1. f_a `` vertices (graph_union A B) \\<subseteq> vertices G &&&\n    f_b `` vertices (graph_union A B) \\<subseteq> vertices G", "by auto"], ["proof (state)\nthis:\n  f_a `` vertices (graph_union A B) \\<subseteq> vertices G\n  f_b `` vertices (graph_union A B) \\<subseteq> vertices G\n\ngoal (6 subgoals):\n 1. vertices (graph_union A B) = Domain (f_a \\<union> f_b)\n 2. (f_a \\<union> f_b) `` vertices (graph_union A B) \\<subseteq> vertices G\n 3. univalent (f_a \\<union> f_b)\n 4. edge_preserving (f_a \\<union> f_b) (edges (graph_union A B)) (edges G)\n 5. graph (graph_union A B)\n 6. graph G", "show uni:\"univalent (f_a \\<union> f_b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. univalent (f_a \\<union> f_b)", "using assms(3) v0"], ["proof (prove)\nusing this:\n  Domain f_a \\<inter> Domain f_b = Domain (f_a \\<inter> f_b)\n  f_a `` vertices A \\<subseteq> vertices G\n  f_b `` vertices B \\<subseteq> vertices G\n  vertices A = Domain f_a\n  vertices B = Domain f_b\n  graph A\n  graph B\n  univalent f_a\n  univalent f_b\n  edge_preserving f_a (edges A) (edges G)\n  edge_preserving f_b (edges B) (edges G)\n\ngoal (1 subgoal):\n 1. univalent (f_a \\<union> f_b)", "by auto"], ["proof (state)\nthis:\n  univalent (f_a \\<union> f_b)\n\ngoal (5 subgoals):\n 1. vertices (graph_union A B) = Domain (f_a \\<union> f_b)\n 2. (f_a \\<union> f_b) `` vertices (graph_union A B) \\<subseteq> vertices G\n 3. edge_preserving (f_a \\<union> f_b) (edges (graph_union A B)) (edges G)\n 4. graph (graph_union A B)\n 5. graph G", "show \"(f_a \\<union> f_b) `` vertices (graph_union A B) \\<subseteq> vertices G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (f_a \\<union> f_b) `` vertices (graph_union A B) \\<subseteq> vertices G", "using v"], ["proof (prove)\nusing this:\n  f_a `` vertices (graph_union A B) \\<subseteq> vertices G\n  f_b `` vertices (graph_union A B) \\<subseteq> vertices G\n\ngoal (1 subgoal):\n 1. (f_a \\<union> f_b) `` vertices (graph_union A B) \\<subseteq> vertices G", "by auto"], ["proof (state)\nthis:\n  (f_a \\<union> f_b) `` vertices (graph_union A B) \\<subseteq> vertices G\n\ngoal (4 subgoals):\n 1. vertices (graph_union A B) = Domain (f_a \\<union> f_b)\n 2. edge_preserving (f_a \\<union> f_b) (edges (graph_union A B)) (edges G)\n 3. graph (graph_union A B)\n 4. graph G", "have f_a:\"Id_on (vertices A) O (f_a \\<union> f_b) = f_a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Id_on (vertices A) O (f_a \\<union> f_b) = f_a", "using uni v0(3)"], ["proof (prove)\nusing this:\n  univalent (f_a \\<union> f_b)\n  vertices A = Domain f_a\n\ngoal (1 subgoal):\n 1. Id_on (vertices A) O (f_a \\<union> f_b) = f_a", "by (cases A,auto simp:univalent_def on_triple_def Image_def)"], ["proof (state)\nthis:\n  Id_on (vertices A) O (f_a \\<union> f_b) = f_a\n\ngoal (4 subgoals):\n 1. vertices (graph_union A B) = Domain (f_a \\<union> f_b)\n 2. edge_preserving (f_a \\<union> f_b) (edges (graph_union A B)) (edges G)\n 3. graph (graph_union A B)\n 4. graph G", "have onA:\"on_triple (f_a \\<union> f_b) `` edges A = on_triple (Id_on (vertices A) O (f_a \\<union> f_b)) `` edges A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. on_triple (f_a \\<union> f_b) `` edges A =\n    on_triple (Id_on (vertices A) O (f_a \\<union> f_b)) `` edges A", "unfolding relcomp_on_triple relcomp_Image on_triple_ID_restrict v0(5)[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. on_triple (f_a \\<union> f_b) `` edges A =\n    on_triple (f_a \\<union> f_b) `` edges A", ".."], ["proof (state)\nthis:\n  on_triple (f_a \\<union> f_b) `` edges A =\n  on_triple (Id_on (vertices A) O (f_a \\<union> f_b)) `` edges A\n\ngoal (4 subgoals):\n 1. vertices (graph_union A B) = Domain (f_a \\<union> f_b)\n 2. edge_preserving (f_a \\<union> f_b) (edges (graph_union A B)) (edges G)\n 3. graph (graph_union A B)\n 4. graph G", "have f_b:\"Id_on (vertices B) O (f_a \\<union> f_b) = f_b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Id_on (vertices B) O (f_a \\<union> f_b) = f_b", "using uni v0(4)"], ["proof (prove)\nusing this:\n  univalent (f_a \\<union> f_b)\n  vertices B = Domain f_b\n\ngoal (1 subgoal):\n 1. Id_on (vertices B) O (f_a \\<union> f_b) = f_b", "unfolding Un_commute[of f_a _]"], ["proof (prove)\nusing this:\n  univalent (f_b \\<union> f_a)\n  vertices B = Domain f_b\n\ngoal (1 subgoal):\n 1. Id_on (vertices B) O (f_b \\<union> f_a) = f_b", "by (cases B,auto simp:univalent_def on_triple_def Image_def)"], ["proof (state)\nthis:\n  Id_on (vertices B) O (f_a \\<union> f_b) = f_b\n\ngoal (4 subgoals):\n 1. vertices (graph_union A B) = Domain (f_a \\<union> f_b)\n 2. edge_preserving (f_a \\<union> f_b) (edges (graph_union A B)) (edges G)\n 3. graph (graph_union A B)\n 4. graph G", "have onB:\"on_triple (f_a \\<union> f_b) `` edges B = on_triple (Id_on (vertices B) O (f_a \\<union> f_b)) `` edges B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. on_triple (f_a \\<union> f_b) `` edges B =\n    on_triple (Id_on (vertices B) O (f_a \\<union> f_b)) `` edges B", "unfolding relcomp_on_triple relcomp_Image on_triple_ID_restrict v0(6)[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. on_triple (f_a \\<union> f_b) `` edges B =\n    on_triple (f_a \\<union> f_b) `` edges B", ".."], ["proof (state)\nthis:\n  on_triple (f_a \\<union> f_b) `` edges B =\n  on_triple (Id_on (vertices B) O (f_a \\<union> f_b)) `` edges B\n\ngoal (4 subgoals):\n 1. vertices (graph_union A B) = Domain (f_a \\<union> f_b)\n 2. edge_preserving (f_a \\<union> f_b) (edges (graph_union A B)) (edges G)\n 3. graph (graph_union A B)\n 4. graph G", "have \"edge_preserving (f_a \\<union> f_b) (edges A) (edges G)\"\n       \"edge_preserving (f_a \\<union> f_b) (edges B) (edges G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. edge_preserving (f_a \\<union> f_b) (edges A) (edges G) &&&\n    edge_preserving (f_a \\<union> f_b) (edges B) (edges G)", "using v0(9,10)"], ["proof (prove)\nusing this:\n  edge_preserving f_a (edges A) (edges G)\n  edge_preserving f_b (edges B) (edges G)\n\ngoal (1 subgoal):\n 1. edge_preserving (f_a \\<union> f_b) (edges A) (edges G) &&&\n    edge_preserving (f_a \\<union> f_b) (edges B) (edges G)", "unfolding edge_preserving onA[unfolded f_a] onB[unfolded f_b]"], ["proof (prove)\nusing this:\n  on_triple f_a `` edges A \\<subseteq> edges G\n  on_triple f_b `` edges B \\<subseteq> edges G\n\ngoal (1 subgoal):\n 1. on_triple f_a `` edges A \\<subseteq> edges G &&&\n    on_triple f_b `` edges B \\<subseteq> edges G", "by auto"], ["proof (state)\nthis:\n  edge_preserving (f_a \\<union> f_b) (edges A) (edges G)\n  edge_preserving (f_a \\<union> f_b) (edges B) (edges G)\n\ngoal (4 subgoals):\n 1. vertices (graph_union A B) = Domain (f_a \\<union> f_b)\n 2. edge_preserving (f_a \\<union> f_b) (edges (graph_union A B)) (edges G)\n 3. graph (graph_union A B)\n 4. graph G", "thus \"edge_preserving (f_a \\<union> f_b) (edges (graph_union A B)) (edges G)\""], ["proof (prove)\nusing this:\n  edge_preserving (f_a \\<union> f_b) (edges A) (edges G)\n  edge_preserving (f_a \\<union> f_b) (edges B) (edges G)\n\ngoal (1 subgoal):\n 1. edge_preserving (f_a \\<union> f_b) (edges (graph_union A B)) (edges G)", "by auto"], ["proof (state)\nthis:\n  edge_preserving (f_a \\<union> f_b) (edges (graph_union A B)) (edges G)\n\ngoal (3 subgoals):\n 1. vertices (graph_union A B) = Domain (f_a \\<union> f_b)\n 2. graph (graph_union A B)\n 3. graph G", "qed (insert assms[unfolded graph_homomorphism_def],auto)"], ["", "lemma graph_homomorphism_on_graph:\n  assumes \"graph_homomorphism A B R\"\n  shows \"graph_homomorphism A (map_graph_fn B f) (R O on_graph B f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. graph_homomorphism A (map_graph_fn B f) (R O on_graph B f)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. graph_homomorphism A (map_graph_fn B f) (R O on_graph B f)", "from assms"], ["proof (chain)\npicking this:\n  graph_homomorphism A B R", "have \"Range R \\<subseteq> vertices B\"\n    and ep: \"edge_preserving R (edges A) (edges B)\""], ["proof (prove)\nusing this:\n  graph_homomorphism A B R\n\ngoal (1 subgoal):\n 1. Range R \\<subseteq> vertices B &&& edge_preserving R (edges A) (edges B)", "unfolding graph_homomorphism_def"], ["proof (prove)\nusing this:\n  vertices A = Domain R \\<and>\n  graph A \\<and>\n  graph B \\<and>\n  R `` vertices A \\<subseteq> vertices B \\<and>\n  univalent R \\<and> edge_preserving R (edges A) (edges B)\n\ngoal (1 subgoal):\n 1. Range R \\<subseteq> vertices B &&& edge_preserving R (edges A) (edges B)", "by auto"], ["proof (state)\nthis:\n  Range R \\<subseteq> vertices B\n  edge_preserving R (edges A) (edges B)\n\ngoal (1 subgoal):\n 1. graph_homomorphism A (map_graph_fn B f) (R O on_graph B f)", "hence d:\"Domain R \\<subseteq> Domain (R O on_graph B f)\""], ["proof (prove)\nusing this:\n  Range R \\<subseteq> vertices B\n  edge_preserving R (edges A) (edges B)\n\ngoal (1 subgoal):\n 1. Domain R \\<subseteq> Domain (R O on_graph B f)", "unfolding Domain_id_on"], ["proof (prove)\nusing this:\n  Range R \\<subseteq> vertices B\n  edge_preserving R (edges A) (edges B)\n\ngoal (1 subgoal):\n 1. Domain R\n    \\<subseteq> Domain R \\<inter> R\\<inverse> `` Domain (on_graph B f)", "by auto"], ["proof (state)\nthis:\n  Domain R \\<subseteq> Domain (R O on_graph B f)\n\ngoal (1 subgoal):\n 1. graph_homomorphism A (map_graph_fn B f) (R O on_graph B f)", "have v:\"vertices (map_graph (R O on_graph B f) A) \\<subseteq> vertices (map_graph_fn B f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vertices (map_graph (R O on_graph B f) A)\n    \\<subseteq> vertices (map_graph_fn B f)", "unfolding BNF_Def.Gr_def map_graph_selectors"], ["proof (prove)\ngoal (1 subgoal):\n 1. (R O {(a, f a) |a. a \\<in> vertices B}) `` vertices A\n    \\<subseteq> {(a, f a) |a. a \\<in> vertices B} `` vertices B", "by auto"], ["proof (state)\nthis:\n  vertices (map_graph (R O on_graph B f) A)\n  \\<subseteq> vertices (map_graph_fn B f)\n\ngoal (1 subgoal):\n 1. graph_homomorphism A (map_graph_fn B f) (R O on_graph B f)", "have e:\"edges (map_graph (R O on_graph B f) A) \\<subseteq> edges (map_graph_fn B f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. edges (map_graph (R O on_graph B f) A)\n    \\<subseteq> edges (map_graph_fn B f)", "using ep"], ["proof (prove)\nusing this:\n  edge_preserving R (edges A) (edges B)\n\ngoal (1 subgoal):\n 1. edges (map_graph (R O on_graph B f) A)\n    \\<subseteq> edges (map_graph_fn B f)", "unfolding BNF_Def.Gr_def map_graph_selectors edge_preserving"], ["proof (prove)\nusing this:\n  on_triple R `` edges A \\<subseteq> edges B\n\ngoal (1 subgoal):\n 1. on_triple (R O {(a, f a) |a. a \\<in> vertices B}) `` edges A\n    \\<subseteq> on_triple {(a, f a) |a. a \\<in> vertices B} `` edges B", "by auto"], ["proof (state)\nthis:\n  edges (map_graph (R O on_graph B f) A)\n  \\<subseteq> edges (map_graph_fn B f)\n\ngoal (1 subgoal):\n 1. graph_homomorphism A (map_graph_fn B f) (R O on_graph B f)", "have u:\"graph_union (map_graph (R O on_graph B f) A) (map_graph_fn B f) = map_graph_fn B f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. graph_union (map_graph (R O on_graph B f) A) (map_graph_fn B f) =\n    map_graph_fn B f", "using e v graph_unionI"], ["proof (prove)\nusing this:\n  edges (map_graph (R O on_graph B f) A)\n  \\<subseteq> edges (map_graph_fn B f)\n  vertices (map_graph (R O on_graph B f) A)\n  \\<subseteq> vertices (map_graph_fn B f)\n  \\<lbrakk>edges ?G\\<^sub>1 \\<subseteq> edges ?G\\<^sub>2;\n   vertices ?G\\<^sub>1 \\<subseteq> vertices ?G\\<^sub>2\\<rbrakk>\n  \\<Longrightarrow> graph_union ?G\\<^sub>1 ?G\\<^sub>2 = ?G\\<^sub>2\n\ngoal (1 subgoal):\n 1. graph_union (map_graph (R O on_graph B f) A) (map_graph_fn B f) =\n    map_graph_fn B f", "by metis"], ["proof (state)\nthis:\n  graph_union (map_graph (R O on_graph B f) A) (map_graph_fn B f) =\n  map_graph_fn B f\n\ngoal (1 subgoal):\n 1. graph_homomorphism A (map_graph_fn B f) (R O on_graph B f)", "from d assms u"], ["proof (chain)\npicking this:\n  Domain R \\<subseteq> Domain (R O on_graph B f)\n  graph_homomorphism A B R\n  graph_union (map_graph (R O on_graph B f) A) (map_graph_fn B f) =\n  map_graph_fn B f", "show \"graph_homomorphism A (map_graph_fn B f) (R O on_graph B f)\""], ["proof (prove)\nusing this:\n  Domain R \\<subseteq> Domain (R O on_graph B f)\n  graph_homomorphism A B R\n  graph_union (map_graph (R O on_graph B f) A) (map_graph_fn B f) =\n  map_graph_fn B f\n\ngoal (1 subgoal):\n 1. graph_homomorphism A (map_graph_fn B f) (R O on_graph B f)", "unfolding graph_homomorphism_def2"], ["proof (prove)\nusing this:\n  Domain R \\<subseteq> Domain (R O on_graph B f)\n  vertices A = Domain R \\<and>\n  univalent R \\<and>\n  graph A \\<and> graph B \\<and> graph_union (map_graph R A) B = B\n  graph_union (map_graph (R O on_graph B f) A) (map_graph_fn B f) =\n  map_graph_fn B f\n\ngoal (1 subgoal):\n 1. vertices A = Domain (R O on_graph B f) \\<and>\n    univalent (R O on_graph B f) \\<and>\n    graph A \\<and>\n    graph (map_graph_fn B f) \\<and>\n    graph_union (map_graph (R O on_graph B f) A) (map_graph_fn B f) =\n    map_graph_fn B f", "by auto"], ["proof (state)\nthis:\n  graph_homomorphism A (map_graph_fn B f) (R O on_graph B f)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}