{"file_name": "/home/qj213/afp-2021-10-22/thys/Incredible_Proof_Machine/Propositional_Formulas.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Incredible_Proof_Machine", "problem_names": ["lemma countable_infinite_ex_bij: \"\\<exists>f::('a::{countable,infinite}\\<Rightarrow>'b::{countable,infinite}). bij f\""], "translations": [["", "lemma countable_infinite_ex_bij: \"\\<exists>f::('a::{countable,infinite}\\<Rightarrow>'b::{countable,infinite}). bij f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>f. bij f", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>f. bij f", "have \"infinite (range (to_nat::'a \\<Rightarrow> nat))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. infinite (range to_nat)", "using finite_imageD infinite_UNIV"], ["proof (prove)\nusing this:\n  \\<lbrakk>finite (?f ` ?A); inj_on ?f ?A\\<rbrakk>\n  \\<Longrightarrow> finite ?A\n  infinite UNIV\n\ngoal (1 subgoal):\n 1. infinite (range to_nat)", "by blast"], ["proof (state)\nthis:\n  infinite (range to_nat)\n\ngoal (1 subgoal):\n 1. \\<exists>f. bij f", "moreover"], ["proof (state)\nthis:\n  infinite (range to_nat)\n\ngoal (1 subgoal):\n 1. \\<exists>f. bij f", "have \"infinite (range (to_nat::'b \\<Rightarrow> nat))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. infinite (range to_nat)", "using finite_imageD infinite_UNIV"], ["proof (prove)\nusing this:\n  \\<lbrakk>finite (?f ` ?A); inj_on ?f ?A\\<rbrakk>\n  \\<Longrightarrow> finite ?A\n  infinite UNIV\n\ngoal (1 subgoal):\n 1. infinite (range to_nat)", "by blast"], ["proof (state)\nthis:\n  infinite (range to_nat)\n\ngoal (1 subgoal):\n 1. \\<exists>f. bij f", "ultimately"], ["proof (chain)\npicking this:\n  infinite (range to_nat)\n  infinite (range to_nat)", "have \"\\<exists>f. bij_betw f (range (to_nat::'a \\<Rightarrow> nat)) (range (to_nat::'b \\<Rightarrow> nat))\""], ["proof (prove)\nusing this:\n  infinite (range to_nat)\n  infinite (range to_nat)\n\ngoal (1 subgoal):\n 1. \\<exists>f. bij_betw f (range to_nat) (range to_nat)", "by (meson bij_betw_inv bij_betw_trans bij_enumerate)"], ["proof (state)\nthis:\n  \\<exists>f. bij_betw f (range to_nat) (range to_nat)\n\ngoal (1 subgoal):\n 1. \\<exists>f. bij f", "then"], ["proof (chain)\npicking this:\n  \\<exists>f. bij_betw f (range to_nat) (range to_nat)", "obtain f where f_def: \"bij_betw f (range (to_nat::'a \\<Rightarrow> nat)) (range (to_nat::'b \\<Rightarrow> nat))\""], ["proof (prove)\nusing this:\n  \\<exists>f. bij_betw f (range to_nat) (range to_nat)\n\ngoal (1 subgoal):\n 1. (\\<And>f.\n        bij_betw f (range to_nat) (range to_nat) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  bij_betw f (range to_nat) (range to_nat)\n\ngoal (1 subgoal):\n 1. \\<exists>f. bij f", "then"], ["proof (chain)\npicking this:\n  bij_betw f (range to_nat) (range to_nat)", "have f_range_trans: \"f ` (range (to_nat::'a \\<Rightarrow> nat)) = range (to_nat::'b \\<Rightarrow> nat)\""], ["proof (prove)\nusing this:\n  bij_betw f (range to_nat) (range to_nat)\n\ngoal (1 subgoal):\n 1. f ` range to_nat = range to_nat", "unfolding bij_betw_def"], ["proof (prove)\nusing this:\n  inj_on f (range to_nat) \\<and> f ` range to_nat = range to_nat\n\ngoal (1 subgoal):\n 1. f ` range to_nat = range to_nat", "by simp"], ["proof (state)\nthis:\n  f ` range to_nat = range to_nat\n\ngoal (1 subgoal):\n 1. \\<exists>f. bij f", "have \"surj ((from_nat::nat \\<Rightarrow> 'b) \\<circ> f \\<circ> (to_nat::'a \\<Rightarrow> nat))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. surj (from_nat \\<circ> f \\<circ> to_nat)", "proof (rule surjI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. (from_nat \\<circ> f \\<circ> to_nat) (?f x) = x", "fix a"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. (from_nat \\<circ> f \\<circ> to_nat) (?f x) = x", "obtain b where [simp]: \"to_nat (a::'b) = b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>b. to_nat a = b \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  to_nat a = b\n\ngoal (1 subgoal):\n 1. \\<And>x. (from_nat \\<circ> f \\<circ> to_nat) (?f x) = x", "hence \"b \\<in> range (to_nat::'b \\<Rightarrow> nat)\""], ["proof (prove)\nusing this:\n  to_nat a = b\n\ngoal (1 subgoal):\n 1. b \\<in> range to_nat", "by blast"], ["proof (state)\nthis:\n  b \\<in> range to_nat\n\ngoal (1 subgoal):\n 1. \\<And>x. (from_nat \\<circ> f \\<circ> to_nat) (?f x) = x", "with f_range_trans"], ["proof (chain)\npicking this:\n  f ` range to_nat = range to_nat\n  b \\<in> range to_nat", "have \"b \\<in> f ` (range (to_nat::'a \\<Rightarrow> nat))\""], ["proof (prove)\nusing this:\n  f ` range to_nat = range to_nat\n  b \\<in> range to_nat\n\ngoal (1 subgoal):\n 1. b \\<in> f ` range to_nat", "by simp"], ["proof (state)\nthis:\n  b \\<in> f ` range to_nat\n\ngoal (1 subgoal):\n 1. \\<And>x. (from_nat \\<circ> f \\<circ> to_nat) (?f x) = x", "from imageE [OF this]"], ["proof (chain)\npicking this:\n  (\\<And>x.\n      \\<lbrakk>b = f x; x \\<in> range to_nat\\<rbrakk>\n      \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis", "obtain c where [simp]:\"f c = b\" and \"c \\<in> range (to_nat::'a \\<Rightarrow> nat)\""], ["proof (prove)\nusing this:\n  (\\<And>x.\n      \\<lbrakk>b = f x; x \\<in> range to_nat\\<rbrakk>\n      \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>c.\n        \\<lbrakk>f c = b; c \\<in> range to_nat\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  f c = b\n  c \\<in> range to_nat\n\ngoal (1 subgoal):\n 1. \\<And>x. (from_nat \\<circ> f \\<circ> to_nat) (?f x) = x", "with f_def"], ["proof (chain)\npicking this:\n  bij_betw f (range to_nat) (range to_nat)\n  f c = b\n  c \\<in> range to_nat", "have [simp]: \"inv_into (range (to_nat::'a \\<Rightarrow> nat)) f b = c\""], ["proof (prove)\nusing this:\n  bij_betw f (range to_nat) (range to_nat)\n  f c = b\n  c \\<in> range to_nat\n\ngoal (1 subgoal):\n 1. inv_into (range to_nat) f b = c", "by (meson bij_betw_def inv_into_f_f)"], ["proof (state)\nthis:\n  inv_into (range to_nat) f b = c\n\ngoal (1 subgoal):\n 1. \\<And>x. (from_nat \\<circ> f \\<circ> to_nat) (?f x) = x", "then"], ["proof (chain)\npicking this:\n  inv_into (range to_nat) f b = c", "obtain d where cd: \"from_nat c = (d::'a)\""], ["proof (prove)\nusing this:\n  inv_into (range to_nat) f b = c\n\ngoal (1 subgoal):\n 1. (\\<And>d. from_nat c = d \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  from_nat c = d\n\ngoal (1 subgoal):\n 1. \\<And>x. (from_nat \\<circ> f \\<circ> to_nat) (?f x) = x", "with \\<open>c \\<in> range to_nat\\<close>"], ["proof (chain)\npicking this:\n  c \\<in> range to_nat\n  from_nat c = d", "have [simp]:\"to_nat d = c\""], ["proof (prove)\nusing this:\n  c \\<in> range to_nat\n  from_nat c = d\n\ngoal (1 subgoal):\n 1. to_nat d = c", "by auto"], ["proof (state)\nthis:\n  to_nat d = c\n\ngoal (1 subgoal):\n 1. \\<And>x. (from_nat \\<circ> f \\<circ> to_nat) (?f x) = x", "from \\<open>to_nat a = b\\<close>"], ["proof (chain)\npicking this:\n  to_nat a = b", "have [simp]: \"from_nat b = a\""], ["proof (prove)\nusing this:\n  to_nat a = b\n\ngoal (1 subgoal):\n 1. from_nat b = a", "using from_nat_to_nat"], ["proof (prove)\nusing this:\n  to_nat a = b\n  from_nat (to_nat ?x) = ?x\n\ngoal (1 subgoal):\n 1. from_nat b = a", "by blast"], ["proof (state)\nthis:\n  from_nat b = a\n\ngoal (1 subgoal):\n 1. \\<And>x. (from_nat \\<circ> f \\<circ> to_nat) (?f x) = x", "show \"(from_nat \\<circ> f \\<circ> to_nat) (((from_nat::nat \\<Rightarrow> 'a) \\<circ> inv_into (range (to_nat::'a \\<Rightarrow> nat)) f \\<circ> (to_nat::'b \\<Rightarrow> nat)) a) = a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (from_nat \\<circ> f \\<circ> to_nat)\n     ((from_nat \\<circ> inv_into (range to_nat) f \\<circ> to_nat) a) =\n    a", "by (clarsimp simp: cd)"], ["proof (state)\nthis:\n  (from_nat \\<circ> f \\<circ> to_nat)\n   ((from_nat \\<circ> inv_into (range to_nat) f \\<circ> to_nat) a) =\n  a\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  surj (from_nat \\<circ> f \\<circ> to_nat)\n\ngoal (1 subgoal):\n 1. \\<exists>f. bij f", "moreover"], ["proof (state)\nthis:\n  surj (from_nat \\<circ> f \\<circ> to_nat)\n\ngoal (1 subgoal):\n 1. \\<exists>f. bij f", "have \"inj ((from_nat::nat \\<Rightarrow> 'b) \\<circ> f \\<circ> (to_nat::'a \\<Rightarrow> nat))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj (from_nat \\<circ> f \\<circ> to_nat)", "apply (rule injI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       (from_nat \\<circ> f \\<circ> to_nat) x =\n       (from_nat \\<circ> f \\<circ> to_nat) y \\<Longrightarrow>\n       x = y", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       from_nat (f (to_nat x)) = from_nat (f (to_nat y)) \\<Longrightarrow>\n       x = y", "apply (metis bij_betw_inv_into_left f_def f_inv_into_f f_range_trans from_nat_def image_eqI rangeI to_nat_split)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  inj (from_nat \\<circ> f \\<circ> to_nat)\n\ngoal (1 subgoal):\n 1. \\<exists>f. bij f", "ultimately"], ["proof (chain)\npicking this:\n  surj (from_nat \\<circ> f \\<circ> to_nat)\n  inj (from_nat \\<circ> f \\<circ> to_nat)", "show ?thesis"], ["proof (prove)\nusing this:\n  surj (from_nat \\<circ> f \\<circ> to_nat)\n  inj (from_nat \\<circ> f \\<circ> to_nat)\n\ngoal (1 subgoal):\n 1. \\<exists>f. bij f", "by (blast intro: bijI)"], ["proof (state)\nthis:\n  \\<exists>f. bij f\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>Propositional formulas are either a variable from an infinite but countable set,\n  or a function given by a name and the arguments.\\<close>"], ["", "datatype ('var,'cname) pform =\n    Var \"'var::{countable,infinite}\"\n  | Fun (name:'cname) (params: \"('var,'cname) pform list\")"], ["", "text \\<open>Substitution on and closedness of propositional formulas is straight forward.\\<close>"], ["", "fun subst :: \"('var::{countable,infinite} \\<Rightarrow> ('var,'cname) pform) \\<Rightarrow> ('var,'cname) pform \\<Rightarrow> ('var,'cname) pform\"\n  where \"subst s (Var v) = s v\"\n  | \"subst s (Fun n ps) = Fun n (map (subst s) ps)\""], ["", "fun closed :: \"('var::{countable,infinite},'cname) pform \\<Rightarrow> bool\"\n  where \"closed (Var v) \\<longleftrightarrow> False\"\n  | \"closed (Fun n ps) \\<longleftrightarrow> list_all closed ps\""], ["", "text \\<open>Now we can interpret @{term Abstract_Formulas}.\n  As there are no locally fixed constants in propositional formulas, most of the locale parameters \n  are dummy values\\<close>"], ["", "interpretation propositional: Abstract_Formulas\n  \\<comment> \\<open>No need to freshen locally fixed constants\\<close>\n  \"curry (SOME f. bij f):: nat \\<Rightarrow> 'var \\<Rightarrow> 'var\"\n  \\<comment> \\<open>also no renaming needed as there are no locally fixed constants\\<close>\n  \"\\<lambda>_. id\" \"\\<lambda>_. {}\"\n  \\<comment> \\<open>closedness and substitution as defined above\\<close>\n  \"closed :: ('var::{countable,infinite},'cname) pform \\<Rightarrow> bool\" subst\n  \\<comment> \\<open>no substitution and renaming of locally fixed constants\\<close>\n  \"\\<lambda>_. {}\" \"\\<lambda>_. id\"\n  \\<comment> \\<open>most generic formula\\<close>\n  \"Var undefined\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Abstract_Formulas (curry (SOME f. bij f)) (\\<lambda>_. id)\n     (\\<lambda>_. {}) closed subst (\\<lambda>_. {}) (\\<lambda>_. id)\n     (Var undefined)", "proof"], ["proof (state)\ngoal (14 subgoals):\n 1. \\<And>a v a' v'.\n       (curry (SOME f. bij f) a v = curry (SOME f. bij f) a' v') =\n       (a = a' \\<and> v = v')\n 2. \\<And>p f. {} = p ` {}\n 3. \\<And>f p. {} = {} \\<Longrightarrow> id f = f\n 4. \\<And>f s. closed f \\<Longrightarrow> subst s f = f\n 5. \\<And>f. closed f \\<Longrightarrow> {} = {}\n 6. \\<And>s f. {} \\<subseteq> {} \\<union> {}\n 7. \\<And>p1 p2 f. id (id f) = id f\n 8. \\<And>p s f. id (subst s f) = subst (id s) (id f)\n 9. \\<And>f f1 f2.\n       (\\<And>x. x \\<in> {} \\<Longrightarrow> f1 x = f2 x) \\<Longrightarrow>\n       id f = id f\n 10. \\<And>s f1 f2.\n        (\\<And>x.\n            x \\<in> {} \\<Longrightarrow> f1 x = f2 x) \\<Longrightarrow>\n        id s = id s\nA total of 14 subgoals...", "fix a v a' v'"], ["proof (state)\ngoal (14 subgoals):\n 1. \\<And>a v a' v'.\n       (curry (SOME f. bij f) a v = curry (SOME f. bij f) a' v') =\n       (a = a' \\<and> v = v')\n 2. \\<And>p f. {} = p ` {}\n 3. \\<And>f p. {} = {} \\<Longrightarrow> id f = f\n 4. \\<And>f s. closed f \\<Longrightarrow> subst s f = f\n 5. \\<And>f. closed f \\<Longrightarrow> {} = {}\n 6. \\<And>s f. {} \\<subseteq> {} \\<union> {}\n 7. \\<And>p1 p2 f. id (id f) = id f\n 8. \\<And>p s f. id (subst s f) = subst (id s) (id f)\n 9. \\<And>f f1 f2.\n       (\\<And>x. x \\<in> {} \\<Longrightarrow> f1 x = f2 x) \\<Longrightarrow>\n       id f = id f\n 10. \\<And>s f1 f2.\n        (\\<And>x.\n            x \\<in> {} \\<Longrightarrow> f1 x = f2 x) \\<Longrightarrow>\n        id s = id s\nA total of 14 subgoals...", "from countable_infinite_ex_bij"], ["proof (chain)\npicking this:\n  \\<exists>f. bij f", "obtain f where \"bij (f::nat \\<times> 'var \\<Rightarrow> 'var)\""], ["proof (prove)\nusing this:\n  \\<exists>f. bij f\n\ngoal (1 subgoal):\n 1. (\\<And>f. bij f \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by blast"], ["proof (state)\nthis:\n  bij f\n\ngoal (14 subgoals):\n 1. \\<And>a v a' v'.\n       (curry (SOME f. bij f) a v = curry (SOME f. bij f) a' v') =\n       (a = a' \\<and> v = v')\n 2. \\<And>p f. {} = p ` {}\n 3. \\<And>f p. {} = {} \\<Longrightarrow> id f = f\n 4. \\<And>f s. closed f \\<Longrightarrow> subst s f = f\n 5. \\<And>f. closed f \\<Longrightarrow> {} = {}\n 6. \\<And>s f. {} \\<subseteq> {} \\<union> {}\n 7. \\<And>p1 p2 f. id (id f) = id f\n 8. \\<And>p s f. id (subst s f) = subst (id s) (id f)\n 9. \\<And>f f1 f2.\n       (\\<And>x. x \\<in> {} \\<Longrightarrow> f1 x = f2 x) \\<Longrightarrow>\n       id f = id f\n 10. \\<And>s f1 f2.\n        (\\<And>x.\n            x \\<in> {} \\<Longrightarrow> f1 x = f2 x) \\<Longrightarrow>\n        id s = id s\nA total of 14 subgoals...", "then"], ["proof (chain)\npicking this:\n  bij f", "show \"(curry (SOME f. bij (f::nat \\<times> 'var \\<Rightarrow> 'var)) (a::nat) (v::'var) = curry (SOME f. bij f) (a'::nat) (v'::'var)) =\n       (a = a' \\<and> v = v')\""], ["proof (prove)\nusing this:\n  bij f\n\ngoal (1 subgoal):\n 1. (curry (SOME f. bij f) a v = curry (SOME f. bij f) a' v') =\n    (a = a' \\<and> v = v')", "apply (rule someI2 [where Q=\"\\<lambda>f. curry f a v = curry f a' v' \\<longleftrightarrow> a = a' \\<and> v = v'\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f.\n       bij f \\<Longrightarrow>\n       (curry f a v = curry f a' v') = (a = a' \\<and> v = v')", "by auto (metis bij_pointE prod.inject)+"], ["proof (state)\nthis:\n  (curry (SOME f. bij f) a v = curry (SOME f. bij f) a' v') =\n  (a = a' \\<and> v = v')\n\ngoal (13 subgoals):\n 1. \\<And>p f. {} = p ` {}\n 2. \\<And>f p. {} = {} \\<Longrightarrow> id f = f\n 3. \\<And>f s. closed f \\<Longrightarrow> subst s f = f\n 4. \\<And>f. closed f \\<Longrightarrow> {} = {}\n 5. \\<And>s f. {} \\<subseteq> {} \\<union> {}\n 6. \\<And>p1 p2 f. id (id f) = id f\n 7. \\<And>p s f. id (subst s f) = subst (id s) (id f)\n 8. \\<And>f f1 f2.\n       (\\<And>x. x \\<in> {} \\<Longrightarrow> f1 x = f2 x) \\<Longrightarrow>\n       id f = id f\n 9. \\<And>s f1 f2.\n       (\\<And>x. x \\<in> {} \\<Longrightarrow> f1 x = f2 x) \\<Longrightarrow>\n       id s = id s\n 10. \\<And>p s. {} = p ` {}\nA total of 13 subgoals...", "next"], ["proof (state)\ngoal (13 subgoals):\n 1. \\<And>p f. {} = p ` {}\n 2. \\<And>f p. {} = {} \\<Longrightarrow> id f = f\n 3. \\<And>f s. closed f \\<Longrightarrow> subst s f = f\n 4. \\<And>f. closed f \\<Longrightarrow> {} = {}\n 5. \\<And>s f. {} \\<subseteq> {} \\<union> {}\n 6. \\<And>p1 p2 f. id (id f) = id f\n 7. \\<And>p s f. id (subst s f) = subst (id s) (id f)\n 8. \\<And>f f1 f2.\n       (\\<And>x. x \\<in> {} \\<Longrightarrow> f1 x = f2 x) \\<Longrightarrow>\n       id f = id f\n 9. \\<And>s f1 f2.\n       (\\<And>x. x \\<in> {} \\<Longrightarrow> f1 x = f2 x) \\<Longrightarrow>\n       id s = id s\n 10. \\<And>p s. {} = p ` {}\nA total of 13 subgoals...", "fix f s"], ["proof (state)\ngoal (13 subgoals):\n 1. \\<And>p f. {} = p ` {}\n 2. \\<And>f p. {} = {} \\<Longrightarrow> id f = f\n 3. \\<And>f s. closed f \\<Longrightarrow> subst s f = f\n 4. \\<And>f. closed f \\<Longrightarrow> {} = {}\n 5. \\<And>s f. {} \\<subseteq> {} \\<union> {}\n 6. \\<And>p1 p2 f. id (id f) = id f\n 7. \\<And>p s f. id (subst s f) = subst (id s) (id f)\n 8. \\<And>f f1 f2.\n       (\\<And>x. x \\<in> {} \\<Longrightarrow> f1 x = f2 x) \\<Longrightarrow>\n       id f = id f\n 9. \\<And>s f1 f2.\n       (\\<And>x. x \\<in> {} \\<Longrightarrow> f1 x = f2 x) \\<Longrightarrow>\n       id s = id s\n 10. \\<And>p s. {} = p ` {}\nA total of 13 subgoals...", "assume \"closed (f::('var, 'cname) pform)\""], ["proof (state)\nthis:\n  closed f\n\ngoal (13 subgoals):\n 1. \\<And>p f. {} = p ` {}\n 2. \\<And>f p. {} = {} \\<Longrightarrow> id f = f\n 3. \\<And>f s. closed f \\<Longrightarrow> subst s f = f\n 4. \\<And>f. closed f \\<Longrightarrow> {} = {}\n 5. \\<And>s f. {} \\<subseteq> {} \\<union> {}\n 6. \\<And>p1 p2 f. id (id f) = id f\n 7. \\<And>p s f. id (subst s f) = subst (id s) (id f)\n 8. \\<And>f f1 f2.\n       (\\<And>x. x \\<in> {} \\<Longrightarrow> f1 x = f2 x) \\<Longrightarrow>\n       id f = id f\n 9. \\<And>s f1 f2.\n       (\\<And>x. x \\<in> {} \\<Longrightarrow> f1 x = f2 x) \\<Longrightarrow>\n       id s = id s\n 10. \\<And>p s. {} = p ` {}\nA total of 13 subgoals...", "then"], ["proof (chain)\npicking this:\n  closed f", "show \"subst s f = f\""], ["proof (prove)\nusing this:\n  closed f\n\ngoal (1 subgoal):\n 1. subst s f = f", "proof (induction s f rule: subst.induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s v. closed (Var v) \\<Longrightarrow> subst s (Var v) = Var v\n 2. \\<And>s n ps.\n       \\<lbrakk>\\<And>x.\n                   \\<lbrakk>x \\<in> set ps; closed x\\<rbrakk>\n                   \\<Longrightarrow> subst s x = x;\n        closed (Fun n ps)\\<rbrakk>\n       \\<Longrightarrow> subst s (Fun n ps) = Fun n ps", "case (2 s n ps)"], ["proof (state)\nthis:\n  \\<lbrakk>?x \\<in> set ps; closed ?x\\<rbrakk>\n  \\<Longrightarrow> subst s ?x = ?x\n  closed (Fun n ps)\n\ngoal (2 subgoals):\n 1. \\<And>s v. closed (Var v) \\<Longrightarrow> subst s (Var v) = Var v\n 2. \\<And>s n ps.\n       \\<lbrakk>\\<And>x.\n                   \\<lbrakk>x \\<in> set ps; closed x\\<rbrakk>\n                   \\<Longrightarrow> subst s x = x;\n        closed (Fun n ps)\\<rbrakk>\n       \\<Longrightarrow> subst s (Fun n ps) = Fun n ps", "thus ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>?x \\<in> set ps; closed ?x\\<rbrakk>\n  \\<Longrightarrow> subst s ?x = ?x\n  closed (Fun n ps)\n\ngoal (1 subgoal):\n 1. subst s (Fun n ps) = Fun n ps", "by (induction ps) auto"], ["proof (state)\nthis:\n  subst s (Fun n ps) = Fun n ps\n\ngoal (1 subgoal):\n 1. \\<And>s v. closed (Var v) \\<Longrightarrow> subst s (Var v) = Var v", "qed auto"], ["proof (state)\nthis:\n  subst s f = f\n\ngoal (12 subgoals):\n 1. \\<And>p f. {} = p ` {}\n 2. \\<And>f p. {} = {} \\<Longrightarrow> id f = f\n 3. \\<And>f. closed f \\<Longrightarrow> {} = {}\n 4. \\<And>s f. {} \\<subseteq> {} \\<union> {}\n 5. \\<And>p1 p2 f. id (id f) = id f\n 6. \\<And>p s f. id (subst s f) = subst (id s) (id f)\n 7. \\<And>f f1 f2.\n       (\\<And>x. x \\<in> {} \\<Longrightarrow> f1 x = f2 x) \\<Longrightarrow>\n       id f = id f\n 8. \\<And>s f1 f2.\n       (\\<And>x. x \\<in> {} \\<Longrightarrow> f1 x = f2 x) \\<Longrightarrow>\n       id s = id s\n 9. \\<And>p s. {} = p ` {}\n 10. {} = {}\nA total of 12 subgoals...", "next"], ["proof (state)\ngoal (12 subgoals):\n 1. \\<And>p f. {} = p ` {}\n 2. \\<And>f p. {} = {} \\<Longrightarrow> id f = f\n 3. \\<And>f. closed f \\<Longrightarrow> {} = {}\n 4. \\<And>s f. {} \\<subseteq> {} \\<union> {}\n 5. \\<And>p1 p2 f. id (id f) = id f\n 6. \\<And>p s f. id (subst s f) = subst (id s) (id f)\n 7. \\<And>f f1 f2.\n       (\\<And>x. x \\<in> {} \\<Longrightarrow> f1 x = f2 x) \\<Longrightarrow>\n       id f = id f\n 8. \\<And>s f1 f2.\n       (\\<And>x. x \\<in> {} \\<Longrightarrow> f1 x = f2 x) \\<Longrightarrow>\n       id s = id s\n 9. \\<And>p s. {} = p ` {}\n 10. {} = {}\nA total of 12 subgoals...", "have \"subst Var f = f\" for f :: \"('var,'cname) pform\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subst Var f = f", "by (induction f) (auto intro: map_idI)"], ["proof (state)\nthis:\n  subst Var ?f = ?f\n\ngoal (12 subgoals):\n 1. \\<And>p f. {} = p ` {}\n 2. \\<And>f p. {} = {} \\<Longrightarrow> id f = f\n 3. \\<And>f. closed f \\<Longrightarrow> {} = {}\n 4. \\<And>s f. {} \\<subseteq> {} \\<union> {}\n 5. \\<And>p1 p2 f. id (id f) = id f\n 6. \\<And>p s f. id (subst s f) = subst (id s) (id f)\n 7. \\<And>f f1 f2.\n       (\\<And>x. x \\<in> {} \\<Longrightarrow> f1 x = f2 x) \\<Longrightarrow>\n       id f = id f\n 8. \\<And>s f1 f2.\n       (\\<And>x. x \\<in> {} \\<Longrightarrow> f1 x = f2 x) \\<Longrightarrow>\n       id s = id s\n 9. \\<And>p s. {} = p ` {}\n 10. {} = {}\nA total of 12 subgoals...", "then"], ["proof (chain)\npicking this:\n  subst Var ?f = ?f", "show \"\\<exists>s. (\\<forall>f. subst s (f::('var,'cname) pform) = f) \\<and> {} = {}\""], ["proof (prove)\nusing this:\n  subst Var ?f = ?f\n\ngoal (1 subgoal):\n 1. \\<exists>s. (\\<forall>f. subst s f = f) \\<and> {} = {}", "by (rule_tac x=Var in exI; clarsimp)"], ["proof (state)\nthis:\n  \\<exists>s. (\\<forall>f. subst s f = f) \\<and> {} = {}\n\ngoal (11 subgoals):\n 1. \\<And>p f. {} = p ` {}\n 2. \\<And>f p. {} = {} \\<Longrightarrow> id f = f\n 3. \\<And>f. closed f \\<Longrightarrow> {} = {}\n 4. \\<And>s f. {} \\<subseteq> {} \\<union> {}\n 5. \\<And>p1 p2 f. id (id f) = id f\n 6. \\<And>p s f. id (subst s f) = subst (id s) (id f)\n 7. \\<And>f f1 f2.\n       (\\<And>x. x \\<in> {} \\<Longrightarrow> f1 x = f2 x) \\<Longrightarrow>\n       id f = id f\n 8. \\<And>s f1 f2.\n       (\\<And>x. x \\<in> {} \\<Longrightarrow> f1 x = f2 x) \\<Longrightarrow>\n       id s = id s\n 9. \\<And>p s. {} = p ` {}\n 10. {} = {}\nA total of 11 subgoals...", "qed auto"], ["", "declare propositional.subst_lconsts_empty_subst [simp del]"], ["", "end"]]}