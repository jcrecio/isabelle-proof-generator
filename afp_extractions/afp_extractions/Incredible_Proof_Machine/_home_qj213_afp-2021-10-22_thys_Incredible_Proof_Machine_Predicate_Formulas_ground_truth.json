{"file_name": "/home/qj213/afp-2021-10-22/thys/Incredible_Proof_Machine/Predicate_Formulas.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Incredible_Proof_Machine", "problem_names": ["lemma fresh_for_fresh: \"finite V \\<Longrightarrow> fresh_for V \\<notin> V\"", "lemma fv_subst_Nil[simp]: \"fv_subst1 [] = {}\"", "lemma fv_map_lc[simp]: \"fv (map_lc p f) = fv f\"", "lemma lc_map_lc[simp]: \"lc (map_lc p f) = p ` lc f\"", "lemma map_lc_map_lc[simp]: \"map_lc p1 (map_lc p2 f) = map_lc (p1 \\<circ> p2) f\"", "lemma map_lc_noop[simp]: \"lc f = {} \\<Longrightarrow> map_lc p f = f\"", "lemma map_lc_cong[cong]: \"(\\<And>x. x \\<in> lc f \\<Longrightarrow> f1 x = f2 x) \\<Longrightarrow> map_lc f1 f = map_lc f2 f\"", "lemma [simp]: \"fv_subst1 (map (apsnd (map_lc p)) s) = fv_subst1 s\"", "lemma map_lc_subst_cong[cong]:\n  assumes \"(\\<And>x. x \\<in> lc_subst s \\<Longrightarrow> f1 x = f2 x)\"\n  shows \"map_lc_subst f1 s = map_lc_subst f2 s\"", "lemma subst1_Nil[simp]: \"subst1 [] f = f\"", "lemma lc_subst1: \"lc (subst1 s f) \\<subseteq> lc f \\<union> \\<Union>(lc ` snd ` set s)\"", "lemma apsnd_def': \"apsnd f = (\\<lambda>(k, v). (k, f v))\"", "lemma map_of_map_apsnd:\n  \"map_of (map (apsnd f) xs) = map_option f \\<circ> map_of xs\"", "lemma map_lc_subst1[simp]: \"map_lc p (subst1 s f) = subst1 (map_lc_subst1 p s) (map_lc p f)\"", "lemma subst'_Nil[simp]: \"subst' [] f = f\"", "lemma lc_subst': \"lc (subst' s f) \\<subseteq> lc f \\<union> lc_subst s\"", "lemma ran_map_option_comp[simp]:\n  \"ran (map_option f \\<circ> m) = f ` ran m\"", "lemma fv_schema_apsnd_map_lc[simp]:\n  \"fv_schema (apsnd (map_lc p) a) = fv_schema a\"", "lemma fv_subst_map_apsnd_map_lc[simp]:\n  \"fv_subst (map (apsnd (apsnd (map_lc p))) s) = fv_subst s\"", "lemma map_apsnd_zip[simp]: \"map (apsnd f) (zip a b) = zip a (map f b)\"", "lemma map_lc_subst'[simp]: \"map_lc p (subst' s f) = subst' (map_lc_subst p s) (map_lc p f)\"", "lemma subst_Nil[simp]: \"subst [] f = f\"", "lemma subst_noop[simp]: \"fv f = {} \\<Longrightarrow> subst s f = f\"", "lemma lc_subst: \"lc (subst s f) \\<subseteq> lc f \\<union> lc_subst s\"", "lemma lc_subst_map_lc_subst[simp]: \"lc_subst (map_lc_subst p s) = p ` lc_subst s\"", "lemma map_lc_subst[simp]: \"map_lc p (subst s f) = subst (map_lc_subst p s) (map_lc p f)\""], "translations": [["", "lemma fresh_for_fresh: \"finite V \\<Longrightarrow> fresh_for V \\<notin> V\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite V \\<Longrightarrow> fresh_for V \\<notin> V", "unfolding fresh_for_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite V \\<Longrightarrow> (SOME n. n \\<notin> V) \\<notin> V", "apply (rule someI2_ex)"], ["proof (prove)\ngoal (2 subgoals):\n 1. finite V \\<Longrightarrow> \\<exists>a. a \\<notin> V\n 2. \\<And>x.\n       \\<lbrakk>finite V; x \\<notin> V\\<rbrakk>\n       \\<Longrightarrow> x \\<notin> V", "using infinite_nat_iff_unbounded_le"], ["proof (prove)\nusing this:\n  infinite ?S = (\\<forall>m. \\<exists>n\\<ge>m. n \\<in> ?S)\n\ngoal (2 subgoals):\n 1. finite V \\<Longrightarrow> \\<exists>a. a \\<notin> V\n 2. \\<And>x.\n       \\<lbrakk>finite V; x \\<notin> V\\<rbrakk>\n       \\<Longrightarrow> x \\<notin> V", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "text \\<open>Free variables\\<close>"], ["", "fun fv_schema :: \"schema \\<Rightarrow> var set\" where\n  \"fv_schema (ps,f) = fv f - set ps\""], ["", "definition fv_subst :: \"subst \\<Rightarrow> var set\" where\n  \"fv_subst s = \\<Union>(fv_schema ` ran (map_of s))\""], ["", "definition fv_subst1 where\n  \"fv_subst1 s = \\<Union>(fv ` snd ` set s)\""], ["", "lemma fv_subst_Nil[simp]: \"fv_subst1 [] = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fv_subst1 [] = {}", "unfolding fv_subst1_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Union> (fv ` snd ` set []) = {}", "by auto"], ["", "text \\<open>Local constants, separate from free variables.\\<close>"], ["", "fun lc :: \"form \\<Rightarrow> lconst set\" where\n   \"lc (Var v xs) = Union (lc ` set xs)\"\n | \"lc (LC c) = {c}\"\n | \"lc (Op n xs) = Union (lc ` set xs)\"\n | \"lc (Quant n v f) = lc f\""], ["", "fun lc_schema :: \"schema \\<Rightarrow> lconst set\" where\n  \"lc_schema (ps,f) = lc f\""], ["", "definition lc_subst1 where\n  \"lc_subst1 s = \\<Union>(lc ` snd ` set s)\""], ["", "fun lc_subst :: \"subst \\<Rightarrow> lconst set\" where\n  \"lc_subst s = \\<Union>(lc_schema ` snd ` set s)\""], ["", "fun map_lc :: \"(lconst \\<Rightarrow> lconst) \\<Rightarrow> form \\<Rightarrow> form\" where\n  \"map_lc f (Var v xs) = Var v (map (map_lc f) xs)\"\n| \"map_lc f (LC n) = LC (f n)\"\n| \"map_lc f (Op n xs) = Op n (map (map_lc f) xs)\"\n| \"map_lc f (Quant n v f') = Quant n v (map_lc f f')\""], ["", "lemma fv_map_lc[simp]: \"fv (map_lc p f) = fv f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fv (map_lc p f) = fv f", "by (induction f) auto"], ["", "lemma lc_map_lc[simp]: \"lc (map_lc p f) = p ` lc f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lc (map_lc p f) = p ` lc f", "by (induction f) auto"], ["", "lemma map_lc_map_lc[simp]: \"map_lc p1 (map_lc p2 f) = map_lc (p1 \\<circ> p2) f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map_lc p1 (map_lc p2 f) = map_lc (p1 \\<circ> p2) f", "by (induction f) auto"], ["", "fun map_lc_subst1 :: \"(lconst \\<Rightarrow> lconst) \\<Rightarrow> (var \\<times> form) list \\<Rightarrow> (var \\<times> form) list\" where\n  \"map_lc_subst1 f s = map (apsnd (map_lc f)) s\""], ["", "fun map_lc_subst :: \"(lconst \\<Rightarrow> lconst) \\<Rightarrow> subst \\<Rightarrow> subst\" where\n  \"map_lc_subst f s = map (apsnd (apsnd (map_lc f))) s\""], ["", "lemma map_lc_noop[simp]: \"lc f = {} \\<Longrightarrow> map_lc p f = f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lc f = {} \\<Longrightarrow> map_lc p f = f", "by (induction f) (auto simp add: map_idI)"], ["", "lemma map_lc_cong[cong]: \"(\\<And>x. x \\<in> lc f \\<Longrightarrow> f1 x = f2 x) \\<Longrightarrow> map_lc f1 f = map_lc f2 f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>x. x \\<in> lc f \\<Longrightarrow> f1 x = f2 x) \\<Longrightarrow>\n    map_lc f1 f = map_lc f2 f", "by (induction f) auto"], ["", "lemma [simp]: \"fv_subst1 (map (apsnd (map_lc p)) s) = fv_subst1 s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fv_subst1 (map (apsnd (map_lc p)) s) = fv_subst1 s", "unfolding fv_subst1_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Union> (fv ` snd ` set (map (apsnd (map_lc p)) s)) =\n    \\<Union> (fv ` snd ` set s)", "by auto"], ["", "lemma map_lc_subst_cong[cong]:\n  assumes \"(\\<And>x. x \\<in> lc_subst s \\<Longrightarrow> f1 x = f2 x)\"\n  shows \"map_lc_subst f1 s = map_lc_subst f2 s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map_lc_subst f1 s = map_lc_subst f2 s", "by (force intro!: map_lc_cong assms)"], ["", "text \\<open>In order to make the termination checker happy, we define substitution in two stages: One\nthat substitutes only ground terms for variables, and the real one that can substitute schematic\nterms (or lambda expression, if you want).\\<close>"], ["", "fun subst1 :: \"(var \\<times> form) list \\<Rightarrow> form \\<Rightarrow> form\" where\n    \"subst1 s (Var v []) = (case map_of s v of Some f \\<Rightarrow> f | None \\<Rightarrow> Var v [])\"\n  | \"subst1 s (Var v xs) = Var v xs\"\n  | \"subst1 s (LC n) = LC n\"\n  | \"subst1 s (Op n xs) = Op n (map (subst1 s) xs)\"\n  | \"subst1 s (Quant n v f) =\n      (if v \\<in> fv_subst1 s then\n      (let v' = fresh_for (fv_subst1 s)\n      in Quant n v' (subst1 ((v, Var v' [])#s) f))\n      else Quant n v (subst1 s f))\""], ["", "lemma subst1_Nil[simp]: \"subst1 [] f = f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subst1 [] f = f", "by (induction \"[]::(var \\<times> form) list\" f  rule:subst1.induct) \n     (auto simp add: map_idI split: option.splits)"], ["", "lemma lc_subst1: \"lc (subst1 s f) \\<subseteq> lc f \\<union> \\<Union>(lc ` snd ` set s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lc (subst1 s f) \\<subseteq> lc f \\<union> \\<Union> (lc ` snd ` set s)", "by (induction s f rule: subst1.induct)\n     (auto split: option.split dest: map_of_SomeD simp add: Let_def)"], ["", "lemma apsnd_def': \"apsnd f = (\\<lambda>(k, v). (k, f v))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. apsnd f = (\\<lambda>(k, v). (k, f v))", "by auto"], ["", "lemma map_of_map_apsnd:\n  \"map_of (map (apsnd f) xs) = map_option f \\<circ> map_of xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map_of (map (apsnd f) xs) = map_option f \\<circ> map_of xs", "unfolding apsnd_def'"], ["proof (prove)\ngoal (1 subgoal):\n 1. map_of (map (\\<lambda>(k, v). (k, f v)) xs) =\n    map_option f \\<circ> map_of xs", "by (rule map_of_map)"], ["", "lemma map_lc_subst1[simp]: \"map_lc p (subst1 s f) = subst1 (map_lc_subst1 p s) (map_lc p f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map_lc p (subst1 s f) = subst1 (map_lc_subst1 p s) (map_lc p f)", "apply (induction s f rule: subst1.induct)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>s v.\n       map_lc p (subst1 s (Var v [])) =\n       subst1 (map_lc_subst1 p s) (map_lc p (Var v []))\n 2. \\<And>s v va vb.\n       map_lc p (subst1 s (Var v (va # vb))) =\n       subst1 (map_lc_subst1 p s) (map_lc p (Var v (va # vb)))\n 3. \\<And>s n.\n       map_lc p (subst1 s (LC n)) =\n       subst1 (map_lc_subst1 p s) (map_lc p (LC n))\n 4. \\<And>s n xs.\n       (\\<And>x.\n           x \\<in> set xs \\<Longrightarrow>\n           map_lc p (subst1 s x) =\n           subst1 (map_lc_subst1 p s) (map_lc p x)) \\<Longrightarrow>\n       map_lc p (subst1 s (Op n xs)) =\n       subst1 (map_lc_subst1 p s) (map_lc p (Op n xs))\n 5. \\<And>s n v f.\n       \\<lbrakk>\\<And>x.\n                   \\<lbrakk>v \\<in> fv_subst1 s;\n                    x = fresh_for (fv_subst1 s)\\<rbrakk>\n                   \\<Longrightarrow> map_lc p\n(subst1 ((v, Var x []) # s) f) =\n                                     subst1\n(map_lc_subst1 p ((v, Var x []) # s)) (map_lc p f);\n        v \\<notin> fv_subst1 s \\<Longrightarrow>\n        map_lc p (subst1 s f) =\n        subst1 (map_lc_subst1 p s) (map_lc p f)\\<rbrakk>\n       \\<Longrightarrow> map_lc p (subst1 s (Quant n v f)) =\n                         subst1 (map_lc_subst1 p s) (map_lc p (Quant n v f))", "apply (auto split: option.splits simp add: map_of_map_apsnd Let_def)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>s v x2.\n       map_of s v = Some x2 \\<Longrightarrow>\n       map_lc p (subst1 s (Var v [])) = map_lc p x2\n 2. \\<And>s v va vb.\n       map_lc p (subst1 s (Var v (va # vb))) =\n       Var v (map_lc p va # map (map_lc p) vb)\n 3. \\<And>s n. map_lc p (subst1 s (LC n)) = LC (p n)\n 4. \\<And>s n xs.\n       (\\<And>x.\n           x \\<in> set xs \\<Longrightarrow>\n           map_lc p (subst1 s x) =\n           subst1 (map (apsnd (map_lc p)) s) (map_lc p x)) \\<Longrightarrow>\n       map_lc p (subst1 s (Op n xs)) =\n       Op n (map (subst1 (map (apsnd (map_lc p)) s) \\<circ> map_lc p) xs)\n 5. \\<And>s n v f.\n       \\<lbrakk>map_lc p\n                 (subst1 ((v, Var (fresh_for (fv_subst1 s)) []) # s) f) =\n                subst1\n                 ((v, Var (fresh_for (fv_subst1 s)) []) #\n                  map (apsnd (map_lc p)) s)\n                 (map_lc p f);\n        v \\<in> fv_subst1 s\\<rbrakk>\n       \\<Longrightarrow> map_lc p (subst1 s (Quant n v f)) =\n                         Quant n (fresh_for (fv_subst1 s))\n                          (subst1\n                            ((v, Var (fresh_for (fv_subst1 s)) []) #\n                             map (apsnd (map_lc p)) s)\n                            (map_lc p f))\n 6. \\<And>s n v f.\n       \\<lbrakk>map_lc p (subst1 s f) =\n                subst1 (map (apsnd (map_lc p)) s) (map_lc p f);\n        v \\<notin> fv_subst1 s\\<rbrakk>\n       \\<Longrightarrow> map_lc p (subst1 s (Quant n v f)) =\n                         Quant n v\n                          (subst1 (map (apsnd (map_lc p)) s) (map_lc p f))", "apply (subst subst1.simps, auto split: option.splits)[1]"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>s v va vb.\n       map_lc p (subst1 s (Var v (va # vb))) =\n       Var v (map_lc p va # map (map_lc p) vb)\n 2. \\<And>s n. map_lc p (subst1 s (LC n)) = LC (p n)\n 3. \\<And>s n xs.\n       (\\<And>x.\n           x \\<in> set xs \\<Longrightarrow>\n           map_lc p (subst1 s x) =\n           subst1 (map (apsnd (map_lc p)) s) (map_lc p x)) \\<Longrightarrow>\n       map_lc p (subst1 s (Op n xs)) =\n       Op n (map (subst1 (map (apsnd (map_lc p)) s) \\<circ> map_lc p) xs)\n 4. \\<And>s n v f.\n       \\<lbrakk>map_lc p\n                 (subst1 ((v, Var (fresh_for (fv_subst1 s)) []) # s) f) =\n                subst1\n                 ((v, Var (fresh_for (fv_subst1 s)) []) #\n                  map (apsnd (map_lc p)) s)\n                 (map_lc p f);\n        v \\<in> fv_subst1 s\\<rbrakk>\n       \\<Longrightarrow> map_lc p (subst1 s (Quant n v f)) =\n                         Quant n (fresh_for (fv_subst1 s))\n                          (subst1\n                            ((v, Var (fresh_for (fv_subst1 s)) []) #\n                             map (apsnd (map_lc p)) s)\n                            (map_lc p f))\n 5. \\<And>s n v f.\n       \\<lbrakk>map_lc p (subst1 s f) =\n                subst1 (map (apsnd (map_lc p)) s) (map_lc p f);\n        v \\<notin> fv_subst1 s\\<rbrakk>\n       \\<Longrightarrow> map_lc p (subst1 s (Quant n v f)) =\n                         Quant n v\n                          (subst1 (map (apsnd (map_lc p)) s) (map_lc p f))", "apply (subst subst1.simps, auto split: option.splits)[1]"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>s n. map_lc p (subst1 s (LC n)) = LC (p n)\n 2. \\<And>s n xs.\n       (\\<And>x.\n           x \\<in> set xs \\<Longrightarrow>\n           map_lc p (subst1 s x) =\n           subst1 (map (apsnd (map_lc p)) s) (map_lc p x)) \\<Longrightarrow>\n       map_lc p (subst1 s (Op n xs)) =\n       Op n (map (subst1 (map (apsnd (map_lc p)) s) \\<circ> map_lc p) xs)\n 3. \\<And>s n v f.\n       \\<lbrakk>map_lc p\n                 (subst1 ((v, Var (fresh_for (fv_subst1 s)) []) # s) f) =\n                subst1\n                 ((v, Var (fresh_for (fv_subst1 s)) []) #\n                  map (apsnd (map_lc p)) s)\n                 (map_lc p f);\n        v \\<in> fv_subst1 s\\<rbrakk>\n       \\<Longrightarrow> map_lc p (subst1 s (Quant n v f)) =\n                         Quant n (fresh_for (fv_subst1 s))\n                          (subst1\n                            ((v, Var (fresh_for (fv_subst1 s)) []) #\n                             map (apsnd (map_lc p)) s)\n                            (map_lc p f))\n 4. \\<And>s n v f.\n       \\<lbrakk>map_lc p (subst1 s f) =\n                subst1 (map (apsnd (map_lc p)) s) (map_lc p f);\n        v \\<notin> fv_subst1 s\\<rbrakk>\n       \\<Longrightarrow> map_lc p (subst1 s (Quant n v f)) =\n                         Quant n v\n                          (subst1 (map (apsnd (map_lc p)) s) (map_lc p f))", "apply (subst subst1.simps, auto split: option.splits)[1]"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>s n xs.\n       (\\<And>x.\n           x \\<in> set xs \\<Longrightarrow>\n           map_lc p (subst1 s x) =\n           subst1 (map (apsnd (map_lc p)) s) (map_lc p x)) \\<Longrightarrow>\n       map_lc p (subst1 s (Op n xs)) =\n       Op n (map (subst1 (map (apsnd (map_lc p)) s) \\<circ> map_lc p) xs)\n 2. \\<And>s n v f.\n       \\<lbrakk>map_lc p\n                 (subst1 ((v, Var (fresh_for (fv_subst1 s)) []) # s) f) =\n                subst1\n                 ((v, Var (fresh_for (fv_subst1 s)) []) #\n                  map (apsnd (map_lc p)) s)\n                 (map_lc p f);\n        v \\<in> fv_subst1 s\\<rbrakk>\n       \\<Longrightarrow> map_lc p (subst1 s (Quant n v f)) =\n                         Quant n (fresh_for (fv_subst1 s))\n                          (subst1\n                            ((v, Var (fresh_for (fv_subst1 s)) []) #\n                             map (apsnd (map_lc p)) s)\n                            (map_lc p f))\n 3. \\<And>s n v f.\n       \\<lbrakk>map_lc p (subst1 s f) =\n                subst1 (map (apsnd (map_lc p)) s) (map_lc p f);\n        v \\<notin> fv_subst1 s\\<rbrakk>\n       \\<Longrightarrow> map_lc p (subst1 s (Quant n v f)) =\n                         Quant n v\n                          (subst1 (map (apsnd (map_lc p)) s) (map_lc p f))", "apply (subst subst1.simps, auto split: option.splits)[1]"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>s n v f.\n       \\<lbrakk>map_lc p\n                 (subst1 ((v, Var (fresh_for (fv_subst1 s)) []) # s) f) =\n                subst1\n                 ((v, Var (fresh_for (fv_subst1 s)) []) #\n                  map (apsnd (map_lc p)) s)\n                 (map_lc p f);\n        v \\<in> fv_subst1 s\\<rbrakk>\n       \\<Longrightarrow> map_lc p (subst1 s (Quant n v f)) =\n                         Quant n (fresh_for (fv_subst1 s))\n                          (subst1\n                            ((v, Var (fresh_for (fv_subst1 s)) []) #\n                             map (apsnd (map_lc p)) s)\n                            (map_lc p f))\n 2. \\<And>s n v f.\n       \\<lbrakk>map_lc p (subst1 s f) =\n                subst1 (map (apsnd (map_lc p)) s) (map_lc p f);\n        v \\<notin> fv_subst1 s\\<rbrakk>\n       \\<Longrightarrow> map_lc p (subst1 s (Quant n v f)) =\n                         Quant n v\n                          (subst1 (map (apsnd (map_lc p)) s) (map_lc p f))", "apply (subst subst1.simps, auto split: option.splits, simp only: Let_def map_lc.simps)[1]"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s n v f.\n       \\<lbrakk>map_lc p (subst1 s f) =\n                subst1 (map (apsnd (map_lc p)) s) (map_lc p f);\n        v \\<notin> fv_subst1 s\\<rbrakk>\n       \\<Longrightarrow> map_lc p (subst1 s (Quant n v f)) =\n                         Quant n v\n                          (subst1 (map (apsnd (map_lc p)) s) (map_lc p f))", "apply (subst subst1.simps, auto split: option.splits)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "fun subst' :: \"subst \\<Rightarrow> form \\<Rightarrow> form\" where\n    \"subst' s (Var v xs) =\n      (case map_of s v of None \\<Rightarrow> (Var v (map (subst' s) xs))\n                 | Some (ps,rhs) \\<Rightarrow>\n                     if length ps = length xs\n                     then subst1 (zip ps (map (subst' s) xs)) rhs\n                     else (Var v (map (subst' s) xs)))\"\n  | \"subst' s (LC n) = LC n\"\n  | \"subst' s (Op n xs) = Op n (map (subst' s) xs)\"\n  | \"subst' s (Quant n v f) =\n      (if v \\<in> fv_subst s then\n      (let v' = fresh_for (fv_subst s)\n       in Quant n v' (subst' ((v,([], Var v' []))#s) f))\n      else Quant n v (subst' s f))\""], ["", "lemma subst'_Nil[simp]: \"subst' [] f = f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subst' [] f = f", "by (induction f) (auto simp add: map_idI fv_subst_def)"], ["", "lemma lc_subst': \"lc (subst' s f) \\<subseteq> lc f \\<union> lc_subst s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lc (subst' s f) \\<subseteq> lc f \\<union> lc_subst s", "apply (induction s f rule: subst'.induct)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>s v xs.\n       \\<lbrakk>\\<And>x.\n                   \\<lbrakk>map_of s v = None; x \\<in> set xs\\<rbrakk>\n                   \\<Longrightarrow> lc (subst' s x)\n                                     \\<subseteq> lc x \\<union> lc_subst s;\n        \\<And>x2 x y xa.\n           \\<lbrakk>map_of s v = Some x2; (x, y) = x2; length x = length xs;\n            xa \\<in> set xs\\<rbrakk>\n           \\<Longrightarrow> lc (subst' s xa)\n                             \\<subseteq> lc xa \\<union> lc_subst s;\n        \\<And>x2 x y xa.\n           \\<lbrakk>map_of s v = Some x2; (x, y) = x2;\n            length x \\<noteq> length xs; xa \\<in> set xs\\<rbrakk>\n           \\<Longrightarrow> lc (subst' s xa)\n                             \\<subseteq> lc xa \\<union> lc_subst s\\<rbrakk>\n       \\<Longrightarrow> lc (subst' s (Var v xs))\n                         \\<subseteq> lc (Var v xs) \\<union> lc_subst s\n 2. \\<And>s n.\n       lc (subst' s (LC n)) \\<subseteq> lc (LC n) \\<union> lc_subst s\n 3. \\<And>s n xs.\n       (\\<And>x.\n           x \\<in> set xs \\<Longrightarrow>\n           lc (subst' s x)\n           \\<subseteq> lc x \\<union> lc_subst s) \\<Longrightarrow>\n       lc (subst' s (Op n xs)) \\<subseteq> lc (Op n xs) \\<union> lc_subst s\n 4. \\<And>s n v f.\n       \\<lbrakk>\\<And>x.\n                   \\<lbrakk>v \\<in> fv_subst s;\n                    x = fresh_for (fv_subst s)\\<rbrakk>\n                   \\<Longrightarrow> lc (subst' ((v, [], Var x []) # s) f)\n                                     \\<subseteq> lc f \\<union>\n           lc_subst ((v, [], Var x []) # s);\n        v \\<notin> fv_subst s \\<Longrightarrow>\n        lc (subst' s f) \\<subseteq> lc f \\<union> lc_subst s\\<rbrakk>\n       \\<Longrightarrow> lc (subst' s (Quant n v f))\n                         \\<subseteq> lc (Quant n v f) \\<union> lc_subst s", "apply (auto split: option.splits dest: map_of_SomeD  dest!: subsetD[OF lc_subst1] simp add: fv_subst_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>s v xs a b x aa ba.\n       \\<lbrakk>\\<And>aa x xa.\n                   \\<lbrakk>a = aa; x = aa; length aa = length xs;\n                    xa \\<in> set xs\\<rbrakk>\n                   \\<Longrightarrow> lc (subst' s xa)\n                                     \\<subseteq> lc xa \\<union>\n           (\\<Union>a\\<in>set s. lc_schema (snd a));\n        \\<And>aa x xa.\n           \\<lbrakk>a = aa; x = aa; length aa \\<noteq> length xs;\n            xa \\<in> set xs\\<rbrakk>\n           \\<Longrightarrow> lc (subst' s xa)\n                             \\<subseteq> lc xa \\<union>\n   (\\<Union>a\\<in>set s. lc_schema (snd a));\n        length a = length xs; map_of s v = Some (a, b);\n        \\<forall>xa\\<in>set s. x \\<notin> lc_schema (snd xa); x \\<in> lc ba;\n        (aa, ba) \\<in> set (zip a (map (subst' s) xs))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa\\<in>set xs. x \\<in> lc xa\n 2. \\<And>s v xs a b x aa.\n       \\<lbrakk>\\<And>aa x xa.\n                   \\<lbrakk>a = aa; x = aa; length aa = length xs;\n                    xa \\<in> set xs\\<rbrakk>\n                   \\<Longrightarrow> lc (subst' s xa)\n                                     \\<subseteq> lc xa \\<union>\n           (\\<Union>a\\<in>set s. lc_schema (snd a));\n        \\<And>aa x xa.\n           \\<lbrakk>a = aa; x = aa; length aa \\<noteq> length xs;\n            xa \\<in> set xs\\<rbrakk>\n           \\<Longrightarrow> lc (subst' s xa)\n                             \\<subseteq> lc xa \\<union>\n   (\\<Union>a\\<in>set s. lc_schema (snd a));\n        length a \\<noteq> length xs; map_of s v = Some (a, b);\n        aa \\<in> set xs; x \\<in> lc (subst' s aa);\n        \\<forall>xa\\<in>set s. x \\<notin> lc_schema (snd xa)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa\\<in>set xs. x \\<in> lc xa", "apply (fastforce dest!: set_zip_rightD)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma ran_map_option_comp[simp]:\n  \"ran (map_option f \\<circ> m) = f ` ran m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ran (map_option f \\<circ> m) = f ` ran m", "unfolding comp_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ran (\\<lambda>x. map_option f (m x)) = f ` ran m", "by (rule ran_map_option)"], ["", "lemma fv_schema_apsnd_map_lc[simp]:\n  \"fv_schema (apsnd (map_lc p) a) = fv_schema a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fv_schema (apsnd (map_lc p) a) = fv_schema a", "by (cases a) auto"], ["", "lemma fv_subst_map_apsnd_map_lc[simp]:\n  \"fv_subst (map (apsnd (apsnd (map_lc p))) s) = fv_subst s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fv_subst (map (apsnd (apsnd (map_lc p))) s) = fv_subst s", "unfolding fv_subst_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Union> (fv_schema ` ran (map_of (map (apsnd (apsnd (map_lc p))) s))) =\n    \\<Union> (fv_schema ` ran (map_of s))", "by (auto simp add: map_of_map_apsnd)"], ["", "lemma map_apsnd_zip[simp]: \"map (apsnd f) (zip a b) = zip a (map f b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map (apsnd f) (zip a b) = zip a (map f b)", "by (simp add: apsnd_def' zip_map2)"], ["", "lemma map_lc_subst'[simp]: \"map_lc p (subst' s f) = subst' (map_lc_subst p s) (map_lc p f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map_lc p (subst' s f) = subst' (map_lc_subst p s) (map_lc p f)", "apply (induction s f rule: subst'.induct)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>s v xs.\n       \\<lbrakk>\\<And>x.\n                   \\<lbrakk>map_of s v = None; x \\<in> set xs\\<rbrakk>\n                   \\<Longrightarrow> map_lc p (subst' s x) =\n                                     subst' (map_lc_subst p s) (map_lc p x);\n        \\<And>x2 x y xa.\n           \\<lbrakk>map_of s v = Some x2; (x, y) = x2; length x = length xs;\n            xa \\<in> set xs\\<rbrakk>\n           \\<Longrightarrow> map_lc p (subst' s xa) =\n                             subst' (map_lc_subst p s) (map_lc p xa);\n        \\<And>x2 x y xa.\n           \\<lbrakk>map_of s v = Some x2; (x, y) = x2;\n            length x \\<noteq> length xs; xa \\<in> set xs\\<rbrakk>\n           \\<Longrightarrow> map_lc p (subst' s xa) =\n                             subst' (map_lc_subst p s)\n                              (map_lc p xa)\\<rbrakk>\n       \\<Longrightarrow> map_lc p (subst' s (Var v xs)) =\n                         subst' (map_lc_subst p s) (map_lc p (Var v xs))\n 2. \\<And>s n.\n       map_lc p (subst' s (LC n)) =\n       subst' (map_lc_subst p s) (map_lc p (LC n))\n 3. \\<And>s n xs.\n       (\\<And>x.\n           x \\<in> set xs \\<Longrightarrow>\n           map_lc p (subst' s x) =\n           subst' (map_lc_subst p s) (map_lc p x)) \\<Longrightarrow>\n       map_lc p (subst' s (Op n xs)) =\n       subst' (map_lc_subst p s) (map_lc p (Op n xs))\n 4. \\<And>s n v f.\n       \\<lbrakk>\\<And>x.\n                   \\<lbrakk>v \\<in> fv_subst s;\n                    x = fresh_for (fv_subst s)\\<rbrakk>\n                   \\<Longrightarrow> map_lc p\n(subst' ((v, [], Var x []) # s) f) =\n                                     subst'\n(map_lc_subst p ((v, [], Var x []) # s)) (map_lc p f);\n        v \\<notin> fv_subst s \\<Longrightarrow>\n        map_lc p (subst' s f) =\n        subst' (map_lc_subst p s) (map_lc p f)\\<rbrakk>\n       \\<Longrightarrow> map_lc p (subst' s (Quant n v f)) =\n                         subst' (map_lc_subst p s) (map_lc p (Quant n v f))", "apply (auto split: option.splits dest: map_of_SomeD simp add: map_of_map_apsnd Let_def)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>s v xs.\n       \\<lbrakk>\\<And>x.\n                   x \\<in> set xs \\<Longrightarrow>\n                   map_lc p (subst' s x) =\n                   subst' (map (apsnd (apsnd (map_lc p))) s) (map_lc p x);\n        map_of s v = None\\<rbrakk>\n       \\<Longrightarrow> map_lc p (subst' s (Var v xs)) =\n                         Var v\n                          (map (subst'\n                                 (map (apsnd (apsnd (map_lc p))) s) \\<circ>\n                                map_lc p)\n                            xs)\n 2. \\<And>s v xs a b.\n       \\<lbrakk>\\<And>aa x xa.\n                   \\<lbrakk>a = aa; x = aa; length aa = length xs;\n                    xa \\<in> set xs\\<rbrakk>\n                   \\<Longrightarrow> map_lc p (subst' s xa) =\n                                     subst'\n(map (apsnd (apsnd (map_lc p))) s) (map_lc p xa);\n        \\<And>aa x xa.\n           \\<lbrakk>a = aa; x = aa; length aa \\<noteq> length xs;\n            xa \\<in> set xs\\<rbrakk>\n           \\<Longrightarrow> map_lc p (subst' s xa) =\n                             subst' (map (apsnd (apsnd (map_lc p))) s)\n                              (map_lc p xa);\n        length a = length xs; map_of s v = Some (a, b)\\<rbrakk>\n       \\<Longrightarrow> map_lc p (subst' s (Var v xs)) =\n                         subst1\n                          (zip a\n                            (map (subst'\n                                   (map (apsnd (apsnd (map_lc p)))\n                                     s) \\<circ>\n                                  map_lc p)\n                              xs))\n                          (map_lc p b)\n 3. \\<And>s v xs a b.\n       \\<lbrakk>\\<And>aa x xa.\n                   \\<lbrakk>a = aa; x = aa; length aa = length xs;\n                    xa \\<in> set xs\\<rbrakk>\n                   \\<Longrightarrow> map_lc p (subst' s xa) =\n                                     subst'\n(map (apsnd (apsnd (map_lc p))) s) (map_lc p xa);\n        \\<And>aa x xa.\n           \\<lbrakk>a = aa; x = aa; length aa \\<noteq> length xs;\n            xa \\<in> set xs\\<rbrakk>\n           \\<Longrightarrow> map_lc p (subst' s xa) =\n                             subst' (map (apsnd (apsnd (map_lc p))) s)\n                              (map_lc p xa);\n        length a \\<noteq> length xs; map_of s v = Some (a, b)\\<rbrakk>\n       \\<Longrightarrow> map_lc p (subst' s (Var v xs)) =\n                         Var v\n                          (map (subst'\n                                 (map (apsnd (apsnd (map_lc p))) s) \\<circ>\n                                map_lc p)\n                            xs)\n 4. \\<And>s n. map_lc p (subst' s (LC n)) = LC (p n)\n 5. \\<And>s n xs.\n       (\\<And>x.\n           x \\<in> set xs \\<Longrightarrow>\n           map_lc p (subst' s x) =\n           subst' (map (apsnd (apsnd (map_lc p))) s)\n            (map_lc p x)) \\<Longrightarrow>\n       map_lc p (subst' s (Op n xs)) =\n       Op n\n        (map (subst' (map (apsnd (apsnd (map_lc p))) s) \\<circ> map_lc p)\n          xs)\n 6. \\<And>s n v f.\n       \\<lbrakk>map_lc p\n                 (subst' ((v, [], Var (fresh_for (fv_subst s)) []) # s) f) =\n                subst'\n                 ((v, [], Var (fresh_for (fv_subst s)) []) #\n                  map (apsnd (apsnd (map_lc p))) s)\n                 (map_lc p f);\n        v \\<in> fv_subst s\\<rbrakk>\n       \\<Longrightarrow> map_lc p (subst' s (Quant n v f)) =\n                         Quant n (fresh_for (fv_subst s))\n                          (subst'\n                            ((v, [], Var (fresh_for (fv_subst s)) []) #\n                             map (apsnd (apsnd (map_lc p))) s)\n                            (map_lc p f))\n 7. \\<And>s n v f.\n       \\<lbrakk>map_lc p (subst' s f) =\n                subst' (map (apsnd (apsnd (map_lc p))) s) (map_lc p f);\n        v \\<notin> fv_subst s\\<rbrakk>\n       \\<Longrightarrow> map_lc p (subst' s (Quant n v f)) =\n                         Quant n v\n                          (subst' (map (apsnd (apsnd (map_lc p))) s)\n                            (map_lc p f))", "apply (solves \\<open>(subst subst'.simps, auto split: option.splits)[1]\\<close>)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>s v xs a b.\n       \\<lbrakk>\\<And>aa x xa.\n                   \\<lbrakk>a = aa; x = aa; length aa = length xs;\n                    xa \\<in> set xs\\<rbrakk>\n                   \\<Longrightarrow> map_lc p (subst' s xa) =\n                                     subst'\n(map (apsnd (apsnd (map_lc p))) s) (map_lc p xa);\n        \\<And>aa x xa.\n           \\<lbrakk>a = aa; x = aa; length aa \\<noteq> length xs;\n            xa \\<in> set xs\\<rbrakk>\n           \\<Longrightarrow> map_lc p (subst' s xa) =\n                             subst' (map (apsnd (apsnd (map_lc p))) s)\n                              (map_lc p xa);\n        length a = length xs; map_of s v = Some (a, b)\\<rbrakk>\n       \\<Longrightarrow> map_lc p (subst' s (Var v xs)) =\n                         subst1\n                          (zip a\n                            (map (subst'\n                                   (map (apsnd (apsnd (map_lc p)))\n                                     s) \\<circ>\n                                  map_lc p)\n                              xs))\n                          (map_lc p b)\n 2. \\<And>s v xs a b.\n       \\<lbrakk>\\<And>aa x xa.\n                   \\<lbrakk>a = aa; x = aa; length aa = length xs;\n                    xa \\<in> set xs\\<rbrakk>\n                   \\<Longrightarrow> map_lc p (subst' s xa) =\n                                     subst'\n(map (apsnd (apsnd (map_lc p))) s) (map_lc p xa);\n        \\<And>aa x xa.\n           \\<lbrakk>a = aa; x = aa; length aa \\<noteq> length xs;\n            xa \\<in> set xs\\<rbrakk>\n           \\<Longrightarrow> map_lc p (subst' s xa) =\n                             subst' (map (apsnd (apsnd (map_lc p))) s)\n                              (map_lc p xa);\n        length a \\<noteq> length xs; map_of s v = Some (a, b)\\<rbrakk>\n       \\<Longrightarrow> map_lc p (subst' s (Var v xs)) =\n                         Var v\n                          (map (subst'\n                                 (map (apsnd (apsnd (map_lc p))) s) \\<circ>\n                                map_lc p)\n                            xs)\n 3. \\<And>s n. map_lc p (subst' s (LC n)) = LC (p n)\n 4. \\<And>s n xs.\n       (\\<And>x.\n           x \\<in> set xs \\<Longrightarrow>\n           map_lc p (subst' s x) =\n           subst' (map (apsnd (apsnd (map_lc p))) s)\n            (map_lc p x)) \\<Longrightarrow>\n       map_lc p (subst' s (Op n xs)) =\n       Op n\n        (map (subst' (map (apsnd (apsnd (map_lc p))) s) \\<circ> map_lc p)\n          xs)\n 5. \\<And>s n v f.\n       \\<lbrakk>map_lc p\n                 (subst' ((v, [], Var (fresh_for (fv_subst s)) []) # s) f) =\n                subst'\n                 ((v, [], Var (fresh_for (fv_subst s)) []) #\n                  map (apsnd (apsnd (map_lc p))) s)\n                 (map_lc p f);\n        v \\<in> fv_subst s\\<rbrakk>\n       \\<Longrightarrow> map_lc p (subst' s (Quant n v f)) =\n                         Quant n (fresh_for (fv_subst s))\n                          (subst'\n                            ((v, [], Var (fresh_for (fv_subst s)) []) #\n                             map (apsnd (apsnd (map_lc p))) s)\n                            (map_lc p f))\n 6. \\<And>s n v f.\n       \\<lbrakk>map_lc p (subst' s f) =\n                subst' (map (apsnd (apsnd (map_lc p))) s) (map_lc p f);\n        v \\<notin> fv_subst s\\<rbrakk>\n       \\<Longrightarrow> map_lc p (subst' s (Quant n v f)) =\n                         Quant n v\n                          (subst' (map (apsnd (apsnd (map_lc p))) s)\n                            (map_lc p f))", "apply (solves \\<open>(subst subst'.simps, auto split: option.splits cong: map_cong)[1]\\<close>)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>s v xs a b.\n       \\<lbrakk>\\<And>aa x xa.\n                   \\<lbrakk>a = aa; x = aa; length aa = length xs;\n                    xa \\<in> set xs\\<rbrakk>\n                   \\<Longrightarrow> map_lc p (subst' s xa) =\n                                     subst'\n(map (apsnd (apsnd (map_lc p))) s) (map_lc p xa);\n        \\<And>aa x xa.\n           \\<lbrakk>a = aa; x = aa; length aa \\<noteq> length xs;\n            xa \\<in> set xs\\<rbrakk>\n           \\<Longrightarrow> map_lc p (subst' s xa) =\n                             subst' (map (apsnd (apsnd (map_lc p))) s)\n                              (map_lc p xa);\n        length a \\<noteq> length xs; map_of s v = Some (a, b)\\<rbrakk>\n       \\<Longrightarrow> map_lc p (subst' s (Var v xs)) =\n                         Var v\n                          (map (subst'\n                                 (map (apsnd (apsnd (map_lc p))) s) \\<circ>\n                                map_lc p)\n                            xs)\n 2. \\<And>s n. map_lc p (subst' s (LC n)) = LC (p n)\n 3. \\<And>s n xs.\n       (\\<And>x.\n           x \\<in> set xs \\<Longrightarrow>\n           map_lc p (subst' s x) =\n           subst' (map (apsnd (apsnd (map_lc p))) s)\n            (map_lc p x)) \\<Longrightarrow>\n       map_lc p (subst' s (Op n xs)) =\n       Op n\n        (map (subst' (map (apsnd (apsnd (map_lc p))) s) \\<circ> map_lc p)\n          xs)\n 4. \\<And>s n v f.\n       \\<lbrakk>map_lc p\n                 (subst' ((v, [], Var (fresh_for (fv_subst s)) []) # s) f) =\n                subst'\n                 ((v, [], Var (fresh_for (fv_subst s)) []) #\n                  map (apsnd (apsnd (map_lc p))) s)\n                 (map_lc p f);\n        v \\<in> fv_subst s\\<rbrakk>\n       \\<Longrightarrow> map_lc p (subst' s (Quant n v f)) =\n                         Quant n (fresh_for (fv_subst s))\n                          (subst'\n                            ((v, [], Var (fresh_for (fv_subst s)) []) #\n                             map (apsnd (apsnd (map_lc p))) s)\n                            (map_lc p f))\n 5. \\<And>s n v f.\n       \\<lbrakk>map_lc p (subst' s f) =\n                subst' (map (apsnd (apsnd (map_lc p))) s) (map_lc p f);\n        v \\<notin> fv_subst s\\<rbrakk>\n       \\<Longrightarrow> map_lc p (subst' s (Quant n v f)) =\n                         Quant n v\n                          (subst' (map (apsnd (apsnd (map_lc p))) s)\n                            (map_lc p f))", "apply (solves \\<open>(subst subst'.simps, auto split: option.splits)[1]\\<close>)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>s n. map_lc p (subst' s (LC n)) = LC (p n)\n 2. \\<And>s n xs.\n       (\\<And>x.\n           x \\<in> set xs \\<Longrightarrow>\n           map_lc p (subst' s x) =\n           subst' (map (apsnd (apsnd (map_lc p))) s)\n            (map_lc p x)) \\<Longrightarrow>\n       map_lc p (subst' s (Op n xs)) =\n       Op n\n        (map (subst' (map (apsnd (apsnd (map_lc p))) s) \\<circ> map_lc p)\n          xs)\n 3. \\<And>s n v f.\n       \\<lbrakk>map_lc p\n                 (subst' ((v, [], Var (fresh_for (fv_subst s)) []) # s) f) =\n                subst'\n                 ((v, [], Var (fresh_for (fv_subst s)) []) #\n                  map (apsnd (apsnd (map_lc p))) s)\n                 (map_lc p f);\n        v \\<in> fv_subst s\\<rbrakk>\n       \\<Longrightarrow> map_lc p (subst' s (Quant n v f)) =\n                         Quant n (fresh_for (fv_subst s))\n                          (subst'\n                            ((v, [], Var (fresh_for (fv_subst s)) []) #\n                             map (apsnd (apsnd (map_lc p))) s)\n                            (map_lc p f))\n 4. \\<And>s n v f.\n       \\<lbrakk>map_lc p (subst' s f) =\n                subst' (map (apsnd (apsnd (map_lc p))) s) (map_lc p f);\n        v \\<notin> fv_subst s\\<rbrakk>\n       \\<Longrightarrow> map_lc p (subst' s (Quant n v f)) =\n                         Quant n v\n                          (subst' (map (apsnd (apsnd (map_lc p))) s)\n                            (map_lc p f))", "apply (solves \\<open>(subst subst'.simps, auto split: option.splits)[1]\\<close>)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>s n xs.\n       (\\<And>x.\n           x \\<in> set xs \\<Longrightarrow>\n           map_lc p (subst' s x) =\n           subst' (map (apsnd (apsnd (map_lc p))) s)\n            (map_lc p x)) \\<Longrightarrow>\n       map_lc p (subst' s (Op n xs)) =\n       Op n\n        (map (subst' (map (apsnd (apsnd (map_lc p))) s) \\<circ> map_lc p)\n          xs)\n 2. \\<And>s n v f.\n       \\<lbrakk>map_lc p\n                 (subst' ((v, [], Var (fresh_for (fv_subst s)) []) # s) f) =\n                subst'\n                 ((v, [], Var (fresh_for (fv_subst s)) []) #\n                  map (apsnd (apsnd (map_lc p))) s)\n                 (map_lc p f);\n        v \\<in> fv_subst s\\<rbrakk>\n       \\<Longrightarrow> map_lc p (subst' s (Quant n v f)) =\n                         Quant n (fresh_for (fv_subst s))\n                          (subst'\n                            ((v, [], Var (fresh_for (fv_subst s)) []) #\n                             map (apsnd (apsnd (map_lc p))) s)\n                            (map_lc p f))\n 3. \\<And>s n v f.\n       \\<lbrakk>map_lc p (subst' s f) =\n                subst' (map (apsnd (apsnd (map_lc p))) s) (map_lc p f);\n        v \\<notin> fv_subst s\\<rbrakk>\n       \\<Longrightarrow> map_lc p (subst' s (Quant n v f)) =\n                         Quant n v\n                          (subst' (map (apsnd (apsnd (map_lc p))) s)\n                            (map_lc p f))", "apply (solves \\<open>(subst subst'.simps, auto split: option.splits)[1]\\<close>)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>s n v f.\n       \\<lbrakk>map_lc p\n                 (subst' ((v, [], Var (fresh_for (fv_subst s)) []) # s) f) =\n                subst'\n                 ((v, [], Var (fresh_for (fv_subst s)) []) #\n                  map (apsnd (apsnd (map_lc p))) s)\n                 (map_lc p f);\n        v \\<in> fv_subst s\\<rbrakk>\n       \\<Longrightarrow> map_lc p (subst' s (Quant n v f)) =\n                         Quant n (fresh_for (fv_subst s))\n                          (subst'\n                            ((v, [], Var (fresh_for (fv_subst s)) []) #\n                             map (apsnd (apsnd (map_lc p))) s)\n                            (map_lc p f))\n 2. \\<And>s n v f.\n       \\<lbrakk>map_lc p (subst' s f) =\n                subst' (map (apsnd (apsnd (map_lc p))) s) (map_lc p f);\n        v \\<notin> fv_subst s\\<rbrakk>\n       \\<Longrightarrow> map_lc p (subst' s (Quant n v f)) =\n                         Quant n v\n                          (subst' (map (apsnd (apsnd (map_lc p))) s)\n                            (map_lc p f))", "apply (solves \\<open>(subst subst'.simps, auto split: option.splits, simp only: Let_def map_lc.simps)[1]\\<close>)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s n v f.\n       \\<lbrakk>map_lc p (subst' s f) =\n                subst' (map (apsnd (apsnd (map_lc p))) s) (map_lc p f);\n        v \\<notin> fv_subst s\\<rbrakk>\n       \\<Longrightarrow> map_lc p (subst' s (Quant n v f)) =\n                         Quant n v\n                          (subst' (map (apsnd (apsnd (map_lc p))) s)\n                            (map_lc p f))", "apply (solves \\<open>(subst subst'.simps, auto split: option.splits)[1]\\<close>)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "text \\<open>Since subst' happily renames quantified variables, we have a simple wrapper that\nensures that the substitution is minimal, and is empty if \\<open>f\\<close> is closed. This is \na hack to support lemma  \\<open>subst_noop\\<close>. \\<close>"], ["", "fun subst :: \"subst \\<Rightarrow> form \\<Rightarrow> form\" where\n  \"subst s f = subst' (filter (\\<lambda> (v,s). v \\<in> fv f) s) f\""], ["", "lemma subst_Nil[simp]: \"subst [] f = f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subst [] f = f", "by auto"], ["", "lemma subst_noop[simp]: \"fv f = {} \\<Longrightarrow> subst s f = f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fv f = {} \\<Longrightarrow> subst s f = f", "by simp"], ["", "lemma lc_subst: \"lc (subst s f) \\<subseteq> lc f \\<union> lc_subst s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lc (subst s f) \\<subseteq> lc f \\<union> lc_subst s", "by (auto dest: subsetD[OF lc_subst'])"], ["", "lemma lc_subst_map_lc_subst[simp]: \"lc_subst (map_lc_subst p s) = p ` lc_subst s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lc_subst (map_lc_subst p s) = p ` lc_subst s", "by force"], ["", "lemma map_lc_subst[simp]: \"map_lc p (subst s f) = subst (map_lc_subst p s) (map_lc p f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map_lc p (subst s f) = subst (map_lc_subst p s) (map_lc p f)", "unfolding subst.simps"], ["proof (prove)\ngoal (1 subgoal):\n 1. map_lc p (subst' (filter (\\<lambda>(v, s). v \\<in> fv f) s) f) =\n    subst'\n     (filter (\\<lambda>(v, s). v \\<in> fv (map_lc p f)) (map_lc_subst p s))\n     (map_lc p f)", "by (auto simp add: filter_map intro!: arg_cong[OF filter_cong] )"], ["", "fun closed :: \"form \\<Rightarrow> bool\" where\n  \"closed f \\<longleftrightarrow> fv f = {} \\<and> lc f = {}\""], ["", "interpretation predicate: Abstract_Formulas\n  \"curry to_nat :: nat \\<Rightarrow> var \\<Rightarrow> var\"\n  map_lc\n  lc\n  \"closed\"\n  subst\n  lc_subst\n  map_lc_subst\n  \"Var 0 []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Abstract_Formulas (curry to_nat) map_lc lc closed subst lc_subst\n     map_lc_subst (Var 0 [])", "apply unfold_locales"], ["proof (prove)\ngoal (14 subgoals):\n 1. \\<And>a v a' v'.\n       (curry to_nat a v = curry to_nat a' v') = (a = a' \\<and> v = v')\n 2. \\<And>p f. lc (map_lc p f) = p ` lc f\n 3. \\<And>f p. lc f = {} \\<Longrightarrow> map_lc p f = f\n 4. \\<And>f s. closed f \\<Longrightarrow> subst s f = f\n 5. \\<And>f. closed f \\<Longrightarrow> lc f = {}\n 6. \\<And>s f. lc (subst s f) \\<subseteq> lc f \\<union> lc_subst s\n 7. \\<And>p1 p2 f. map_lc p1 (map_lc p2 f) = map_lc (p1 \\<circ> p2) f\n 8. \\<And>p s f.\n       map_lc p (subst s f) = subst (map_lc_subst p s) (map_lc p f)\n 9. \\<And>f f1 f2.\n       (\\<And>x.\n           x \\<in> lc f \\<Longrightarrow> f1 x = f2 x) \\<Longrightarrow>\n       map_lc f1 f = map_lc f2 f\n 10. \\<And>s f1 f2.\n        (\\<And>x.\n            x \\<in> lc_subst s \\<Longrightarrow>\n            f1 x = f2 x) \\<Longrightarrow>\n        map_lc_subst f1 s = map_lc_subst f2 s\nA total of 14 subgoals...", "apply (solves fastforce)"], ["proof (prove)\ngoal (13 subgoals):\n 1. \\<And>p f. lc (map_lc p f) = p ` lc f\n 2. \\<And>f p. lc f = {} \\<Longrightarrow> map_lc p f = f\n 3. \\<And>f s. closed f \\<Longrightarrow> subst s f = f\n 4. \\<And>f. closed f \\<Longrightarrow> lc f = {}\n 5. \\<And>s f. lc (subst s f) \\<subseteq> lc f \\<union> lc_subst s\n 6. \\<And>p1 p2 f. map_lc p1 (map_lc p2 f) = map_lc (p1 \\<circ> p2) f\n 7. \\<And>p s f.\n       map_lc p (subst s f) = subst (map_lc_subst p s) (map_lc p f)\n 8. \\<And>f f1 f2.\n       (\\<And>x.\n           x \\<in> lc f \\<Longrightarrow> f1 x = f2 x) \\<Longrightarrow>\n       map_lc f1 f = map_lc f2 f\n 9. \\<And>s f1 f2.\n       (\\<And>x.\n           x \\<in> lc_subst s \\<Longrightarrow>\n           f1 x = f2 x) \\<Longrightarrow>\n       map_lc_subst f1 s = map_lc_subst f2 s\n 10. \\<And>p s. lc_subst (map_lc_subst p s) = p ` lc_subst s\nA total of 13 subgoals...", "apply (solves fastforce)"], ["proof (prove)\ngoal (12 subgoals):\n 1. \\<And>f p. lc f = {} \\<Longrightarrow> map_lc p f = f\n 2. \\<And>f s. closed f \\<Longrightarrow> subst s f = f\n 3. \\<And>f. closed f \\<Longrightarrow> lc f = {}\n 4. \\<And>s f. lc (subst s f) \\<subseteq> lc f \\<union> lc_subst s\n 5. \\<And>p1 p2 f. map_lc p1 (map_lc p2 f) = map_lc (p1 \\<circ> p2) f\n 6. \\<And>p s f.\n       map_lc p (subst s f) = subst (map_lc_subst p s) (map_lc p f)\n 7. \\<And>f f1 f2.\n       (\\<And>x.\n           x \\<in> lc f \\<Longrightarrow> f1 x = f2 x) \\<Longrightarrow>\n       map_lc f1 f = map_lc f2 f\n 8. \\<And>s f1 f2.\n       (\\<And>x.\n           x \\<in> lc_subst s \\<Longrightarrow>\n           f1 x = f2 x) \\<Longrightarrow>\n       map_lc_subst f1 s = map_lc_subst f2 s\n 9. \\<And>p s. lc_subst (map_lc_subst p s) = p ` lc_subst s\n 10. lc (Var 0 []) = {}\nA total of 12 subgoals...", "apply (solves fastforce)"], ["proof (prove)\ngoal (11 subgoals):\n 1. \\<And>f s. closed f \\<Longrightarrow> subst s f = f\n 2. \\<And>f. closed f \\<Longrightarrow> lc f = {}\n 3. \\<And>s f. lc (subst s f) \\<subseteq> lc f \\<union> lc_subst s\n 4. \\<And>p1 p2 f. map_lc p1 (map_lc p2 f) = map_lc (p1 \\<circ> p2) f\n 5. \\<And>p s f.\n       map_lc p (subst s f) = subst (map_lc_subst p s) (map_lc p f)\n 6. \\<And>f f1 f2.\n       (\\<And>x.\n           x \\<in> lc f \\<Longrightarrow> f1 x = f2 x) \\<Longrightarrow>\n       map_lc f1 f = map_lc f2 f\n 7. \\<And>s f1 f2.\n       (\\<And>x.\n           x \\<in> lc_subst s \\<Longrightarrow>\n           f1 x = f2 x) \\<Longrightarrow>\n       map_lc_subst f1 s = map_lc_subst f2 s\n 8. \\<And>p s. lc_subst (map_lc_subst p s) = p ` lc_subst s\n 9. lc (Var 0 []) = {}\n 10. \\<exists>s. (\\<forall>f. subst s f = f) \\<and> lc_subst s = {}\nA total of 11 subgoals...", "apply (solves fastforce)"], ["proof (prove)\ngoal (10 subgoals):\n 1. \\<And>f. closed f \\<Longrightarrow> lc f = {}\n 2. \\<And>s f. lc (subst s f) \\<subseteq> lc f \\<union> lc_subst s\n 3. \\<And>p1 p2 f. map_lc p1 (map_lc p2 f) = map_lc (p1 \\<circ> p2) f\n 4. \\<And>p s f.\n       map_lc p (subst s f) = subst (map_lc_subst p s) (map_lc p f)\n 5. \\<And>f f1 f2.\n       (\\<And>x.\n           x \\<in> lc f \\<Longrightarrow> f1 x = f2 x) \\<Longrightarrow>\n       map_lc f1 f = map_lc f2 f\n 6. \\<And>s f1 f2.\n       (\\<And>x.\n           x \\<in> lc_subst s \\<Longrightarrow>\n           f1 x = f2 x) \\<Longrightarrow>\n       map_lc_subst f1 s = map_lc_subst f2 s\n 7. \\<And>p s. lc_subst (map_lc_subst p s) = p ` lc_subst s\n 8. lc (Var 0 []) = {}\n 9. \\<exists>s. (\\<forall>f. subst s f = f) \\<and> lc_subst s = {}\n 10. \\<And>f. \\<exists>s. subst s (Var 0 []) = f", "apply (solves fastforce)"], ["proof (prove)\ngoal (9 subgoals):\n 1. \\<And>s f. lc (subst s f) \\<subseteq> lc f \\<union> lc_subst s\n 2. \\<And>p1 p2 f. map_lc p1 (map_lc p2 f) = map_lc (p1 \\<circ> p2) f\n 3. \\<And>p s f.\n       map_lc p (subst s f) = subst (map_lc_subst p s) (map_lc p f)\n 4. \\<And>f f1 f2.\n       (\\<And>x.\n           x \\<in> lc f \\<Longrightarrow> f1 x = f2 x) \\<Longrightarrow>\n       map_lc f1 f = map_lc f2 f\n 5. \\<And>s f1 f2.\n       (\\<And>x.\n           x \\<in> lc_subst s \\<Longrightarrow>\n           f1 x = f2 x) \\<Longrightarrow>\n       map_lc_subst f1 s = map_lc_subst f2 s\n 6. \\<And>p s. lc_subst (map_lc_subst p s) = p ` lc_subst s\n 7. lc (Var 0 []) = {}\n 8. \\<exists>s. (\\<forall>f. subst s f = f) \\<and> lc_subst s = {}\n 9. \\<And>f. \\<exists>s. subst s (Var 0 []) = f", "apply (solves \\<open>rule lc_subst\\<close>)"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<And>p1 p2 f. map_lc p1 (map_lc p2 f) = map_lc (p1 \\<circ> p2) f\n 2. \\<And>p s f.\n       map_lc p (subst s f) = subst (map_lc_subst p s) (map_lc p f)\n 3. \\<And>f f1 f2.\n       (\\<And>x.\n           x \\<in> lc f \\<Longrightarrow> f1 x = f2 x) \\<Longrightarrow>\n       map_lc f1 f = map_lc f2 f\n 4. \\<And>s f1 f2.\n       (\\<And>x.\n           x \\<in> lc_subst s \\<Longrightarrow>\n           f1 x = f2 x) \\<Longrightarrow>\n       map_lc_subst f1 s = map_lc_subst f2 s\n 5. \\<And>p s. lc_subst (map_lc_subst p s) = p ` lc_subst s\n 6. lc (Var 0 []) = {}\n 7. \\<exists>s. (\\<forall>f. subst s f = f) \\<and> lc_subst s = {}\n 8. \\<And>f. \\<exists>s. subst s (Var 0 []) = f", "apply (solves fastforce)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>p s f.\n       map_lc p (subst s f) = subst (map_lc_subst p s) (map_lc p f)\n 2. \\<And>f f1 f2.\n       (\\<And>x.\n           x \\<in> lc f \\<Longrightarrow> f1 x = f2 x) \\<Longrightarrow>\n       map_lc f1 f = map_lc f2 f\n 3. \\<And>s f1 f2.\n       (\\<And>x.\n           x \\<in> lc_subst s \\<Longrightarrow>\n           f1 x = f2 x) \\<Longrightarrow>\n       map_lc_subst f1 s = map_lc_subst f2 s\n 4. \\<And>p s. lc_subst (map_lc_subst p s) = p ` lc_subst s\n 5. lc (Var 0 []) = {}\n 6. \\<exists>s. (\\<forall>f. subst s f = f) \\<and> lc_subst s = {}\n 7. \\<And>f. \\<exists>s. subst s (Var 0 []) = f", "apply (solves fastforce)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>f f1 f2.\n       (\\<And>x.\n           x \\<in> lc f \\<Longrightarrow> f1 x = f2 x) \\<Longrightarrow>\n       map_lc f1 f = map_lc f2 f\n 2. \\<And>s f1 f2.\n       (\\<And>x.\n           x \\<in> lc_subst s \\<Longrightarrow>\n           f1 x = f2 x) \\<Longrightarrow>\n       map_lc_subst f1 s = map_lc_subst f2 s\n 3. \\<And>p s. lc_subst (map_lc_subst p s) = p ` lc_subst s\n 4. lc (Var 0 []) = {}\n 5. \\<exists>s. (\\<forall>f. subst s f = f) \\<and> lc_subst s = {}\n 6. \\<And>f. \\<exists>s. subst s (Var 0 []) = f", "apply (solves fastforce)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>s f1 f2.\n       (\\<And>x.\n           x \\<in> lc_subst s \\<Longrightarrow>\n           f1 x = f2 x) \\<Longrightarrow>\n       map_lc_subst f1 s = map_lc_subst f2 s\n 2. \\<And>p s. lc_subst (map_lc_subst p s) = p ` lc_subst s\n 3. lc (Var 0 []) = {}\n 4. \\<exists>s. (\\<forall>f. subst s f = f) \\<and> lc_subst s = {}\n 5. \\<And>f. \\<exists>s. subst s (Var 0 []) = f", "apply (solves \\<open>metis map_lc_subst_cong\\<close>)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>p s. lc_subst (map_lc_subst p s) = p ` lc_subst s\n 2. lc (Var 0 []) = {}\n 3. \\<exists>s. (\\<forall>f. subst s f = f) \\<and> lc_subst s = {}\n 4. \\<And>f. \\<exists>s. subst s (Var 0 []) = f", "apply (solves \\<open>rule lc_subst_map_lc_subst\\<close>)"], ["proof (prove)\ngoal (3 subgoals):\n 1. lc (Var 0 []) = {}\n 2. \\<exists>s. (\\<forall>f. subst s f = f) \\<and> lc_subst s = {}\n 3. \\<And>f. \\<exists>s. subst s (Var 0 []) = f", "apply (solves simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<exists>s. (\\<forall>f. subst s f = f) \\<and> lc_subst s = {}\n 2. \\<And>f. \\<exists>s. subst s (Var 0 []) = f", "apply (solves \\<open>rule exI[where x = \"[]\"], simp\\<close>)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f. \\<exists>s. subst s (Var 0 []) = f", "apply (solves \\<open>rename_tac f, rule_tac x = \"[(0, ([],f))]\" in exI, simp\\<close>)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "declare predicate.subst_lconsts_empty_subst [simp del]"], ["", "end"]]}