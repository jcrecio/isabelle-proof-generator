{"file_name": "/home/qj213/afp-2021-10-22/thys/Incredible_Proof_Machine/Abstract_Formula.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Incredible_Proof_Machine", "problem_names": ["lemma empty_subst_spec:\n    \"(\\<forall> f. subst empty_subst f = f) \\<and> subst_lconsts empty_subst = {}\"", "lemma subst_empty_subst[simp]: \"subst empty_subst f = f\"", "lemma subst_lconsts_empty_subst[simp]: \"subst_lconsts empty_subst = {}\"", "lemma lconsts_freshen: \"lconsts (freshen a f) = freshenLC a ` lconsts f\"", "lemma freshen_closed: \"lconsts f = {} \\<Longrightarrow> freshen a f = f\"", "lemma closed_eq:\n    assumes \"closed f1\"\n    assumes \"closed f2\"\n    shows \"subst s1 (freshen a1 f1) = subst s2 (freshen a2 f2) \\<longleftrightarrow> f1 = f2\"", "lemma freshenLC_range_eq_iff[simp]: \"freshenLC a v \\<in> range (freshenLC a') \\<longleftrightarrow> a = a'\"", "lemma inj_freshenLC[simp]: \"inj (freshenLC i)\"", "lemma rerename_freshen[simp]: \"x \\<in> V \\<Longrightarrow> rerename  V i (isidx is) f (freshenLC i x) = freshenLC (isidx is) x\"", "lemma range_rerename: \"range (rerename V  from to f) \\<subseteq> freshenLC to ` V \\<union> range f\"", "lemma rerename_noop:\n      \"x \\<notin> freshenLC from ` V  \\<Longrightarrow> rerename V from to f x = f x\"", "lemma rerename_rename_noop:\n      \"freshenLC from ` V \\<inter> lconsts form  = {}  \\<Longrightarrow> renameLCs (rerename V from to f) form = renameLCs f form\"", "lemma rerename_subst_noop:\n      \"freshenLC from ` V \\<inter> subst_lconsts s  = {}  \\<Longrightarrow> subst_renameLCs (rerename V from to f) s = subst_renameLCs f s\""], "translations": [["", "lemma empty_subst_spec:\n    \"(\\<forall> f. subst empty_subst f = f) \\<and> subst_lconsts empty_subst = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>f. subst empty_subst f = f) \\<and>\n    subst_lconsts empty_subst = {}", "unfolding empty_subst_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>f.\n        subst\n         (SOME s. (\\<forall>f. subst s f = f) \\<and> subst_lconsts s = {})\n         f =\n        f) \\<and>\n    subst_lconsts\n     (SOME s. (\\<forall>f. subst s f = f) \\<and> subst_lconsts s = {}) =\n    {}", "using empty_subst"], ["proof (prove)\nusing this:\n  \\<exists>s. (\\<forall>f. subst s f = f) \\<and> subst_lconsts s = {}\n\ngoal (1 subgoal):\n 1. (\\<forall>f.\n        subst\n         (SOME s. (\\<forall>f. subst s f = f) \\<and> subst_lconsts s = {})\n         f =\n        f) \\<and>\n    subst_lconsts\n     (SOME s. (\\<forall>f. subst s f = f) \\<and> subst_lconsts s = {}) =\n    {}", "by (rule someI_ex)"], ["", "lemma subst_empty_subst[simp]: \"subst empty_subst f = f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subst empty_subst f = f", "by (metis empty_subst_spec)"], ["", "lemma subst_lconsts_empty_subst[simp]: \"subst_lconsts empty_subst = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subst_lconsts empty_subst = {}", "by (metis empty_subst_spec)"], ["", "lemma lconsts_freshen: \"lconsts (freshen a f) = freshenLC a ` lconsts f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lconsts (freshen a f) = freshenLC a ` lconsts f", "unfolding freshen_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. lconsts (renameLCs (freshenLC a) f) = freshenLC a ` lconsts f", "by (rule lconsts_renameLCs)"], ["", "lemma freshen_closed: \"lconsts f = {} \\<Longrightarrow> freshen a f = f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lconsts f = {} \\<Longrightarrow> freshen a f = f", "unfolding freshen_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. lconsts f = {} \\<Longrightarrow> renameLCs (freshenLC a) f = f", "by (rule rename_closed)"], ["", "lemma closed_eq:\n    assumes \"closed f1\"\n    assumes \"closed f2\"\n    shows \"subst s1 (freshen a1 f1) = subst s2 (freshen a2 f2) \\<longleftrightarrow> f1 = f2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (subst s1 (freshen a1 f1) = subst s2 (freshen a2 f2)) = (f1 = f2)", "using assms"], ["proof (prove)\nusing this:\n  closed f1\n  closed f2\n\ngoal (1 subgoal):\n 1. (subst s1 (freshen a1 f1) = subst s2 (freshen a2 f2)) = (f1 = f2)", "by (auto simp add: closed_no_lconsts freshen_def lconsts_freshen subst_closed rename_closed)"], ["", "lemma freshenLC_range_eq_iff[simp]: \"freshenLC a v \\<in> range (freshenLC a') \\<longleftrightarrow> a = a'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (freshenLC a v \\<in> range (freshenLC a')) = (a = a')", "by auto"], ["", "definition rerename :: \"'var set \\<Rightarrow> nat \\<Rightarrow> nat \\<Rightarrow> ('var \\<Rightarrow> 'var) \\<Rightarrow> ('var \\<Rightarrow> 'var)\" where\n    \"rerename V from to f x = (if x \\<in> freshenLC from ` V then freshenLC to (inv (freshenLC from) x) else f x)\""], ["", "lemma inj_freshenLC[simp]: \"inj (freshenLC i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj (freshenLC i)", "by (rule injI) simp"], ["", "lemma rerename_freshen[simp]: \"x \\<in> V \\<Longrightarrow> rerename  V i (isidx is) f (freshenLC i x) = freshenLC (isidx is) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> V \\<Longrightarrow>\n    rerename V i (isidx is) f (freshenLC i x) = freshenLC (isidx is) x", "unfolding rerename_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> V \\<Longrightarrow>\n    (if freshenLC i x \\<in> freshenLC i ` V\n     then freshenLC (isidx is) (inv (freshenLC i) (freshenLC i x))\n     else f (freshenLC i x)) =\n    freshenLC (isidx is) x", "by simp"], ["", "lemma range_rerename: \"range (rerename V  from to f) \\<subseteq> freshenLC to ` V \\<union> range f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. range (rerename V from to f)\n    \\<subseteq> freshenLC to ` V \\<union> range f", "by (auto simp add: rerename_def split: if_splits)"], ["", "lemma rerename_noop:\n      \"x \\<notin> freshenLC from ` V  \\<Longrightarrow> rerename V from to f x = f x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<notin> freshenLC from ` V \\<Longrightarrow>\n    rerename V from to f x = f x", "by (auto simp add: rerename_def split: if_splits)"], ["", "lemma rerename_rename_noop:\n      \"freshenLC from ` V \\<inter> lconsts form  = {}  \\<Longrightarrow> renameLCs (rerename V from to f) form = renameLCs f form\""], ["proof (prove)\ngoal (1 subgoal):\n 1. freshenLC from ` V \\<inter> lconsts form = {} \\<Longrightarrow>\n    renameLCs (rerename V from to f) form = renameLCs f form", "by (intro renameLCs_cong rerename_noop) auto"], ["", "lemma rerename_subst_noop:\n      \"freshenLC from ` V \\<inter> subst_lconsts s  = {}  \\<Longrightarrow> subst_renameLCs (rerename V from to f) s = subst_renameLCs f s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. freshenLC from ` V \\<inter> subst_lconsts s = {} \\<Longrightarrow>\n    subst_renameLCs (rerename V from to f) s = subst_renameLCs f s", "by (intro subst_renameLCs_cong rerename_noop) auto"], ["", "end"], ["", "end"]]}