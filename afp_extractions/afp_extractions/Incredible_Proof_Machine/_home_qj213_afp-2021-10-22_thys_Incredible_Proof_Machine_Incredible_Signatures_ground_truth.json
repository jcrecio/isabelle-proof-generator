{"file_name": "/home/qj213/afp-2021-10-22/thys/Incredible_Proof_Machine/Incredible_Signatures.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Incredible_Proof_Machine", "problem_names": ["lemma hyps_for'_subset: \"hyps_for' n p \\<subseteq> fset (outPorts n)\"", "lemma hyps_for_simp[simp]: \"h |\\<in>| hyps_for n p \\<longleftrightarrow> hyps n h = Some p\"", "lemma hyps_for_simp'[simp]: \"h \\<in> fset (hyps_for n p) \\<longleftrightarrow> hyps n h = Some p\"", "lemma hyps_for_collect: \"fset (hyps_for n p) = {h . hyps n h = Some p}\"", "lemma hyps_for_subset: \"hyps_for n p |\\<subseteq>| outPorts n\""], "translations": [["", "lemma hyps_for'_subset: \"hyps_for' n p \\<subseteq> fset (outPorts n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. hyps_for' n p \\<subseteq> fset (outPorts n)", "using hyps_correct"], ["proof (prove)\nusing this:\n  hyps ?n ?p1.0 = Some ?p2.0 \\<Longrightarrow>\n  ?p1.0 |\\<in>| outPorts ?n \\<and> ?p2.0 |\\<in>| inPorts ?n\n\ngoal (1 subgoal):\n 1. hyps_for' n p \\<subseteq> fset (outPorts n)", "by (meson hyps_for'.cases notin_fset subsetI)"], ["", "context includes fset.lifting\n  begin"], ["", "lift_definition hyps_for  :: \"'node \\<Rightarrow> 'inPort \\<Rightarrow> 'outPort fset\" is hyps_for'"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>node inPort. finite (hyps_for' node inPort)", "by (meson finite_fset hyps_for'_subset rev_finite_subset)"], ["", "lemma hyps_for_simp[simp]: \"h |\\<in>| hyps_for n p \\<longleftrightarrow> hyps n h = Some p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (h |\\<in>| hyps_for n p) = (hyps n h = Some p)", "by transfer (simp add: hyps_for'.simps)"], ["", "lemma hyps_for_simp'[simp]: \"h \\<in> fset (hyps_for n p) \\<longleftrightarrow> hyps n h = Some p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (h \\<in> fset (hyps_for n p)) = (hyps n h = Some p)", "by transfer (simp add: hyps_for'.simps)"], ["", "lemma hyps_for_collect: \"fset (hyps_for n p) = {h . hyps n h = Some p}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fset (hyps_for n p) = {h. hyps n h = Some p}", "by auto"], ["", "end"], ["", "lemma hyps_for_subset: \"hyps_for n p |\\<subseteq>| outPorts n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. hyps_for n p |\\<subseteq>| outPorts n", "using hyps_for'_subset"], ["proof (prove)\nusing this:\n  hyps_for' ?n ?p \\<subseteq> fset (outPorts ?n)\n\ngoal (1 subgoal):\n 1. hyps_for n p |\\<subseteq>| outPorts n", "by (fastforce simp add: fmember.rep_eq hyps_for.rep_eq simp del: hyps_for_simp hyps_for_simp')"], ["", "end"], ["", "locale Labeled_Signature = \n  Port_Graph_Signature_Scoped +\n  fixes labelsIn :: \"'node \\<Rightarrow> 'inPort \\<Rightarrow> 'form\" \n  fixes labelsOut :: \"'node \\<Rightarrow> 'outPort \\<Rightarrow> 'form\""], ["", "locale Port_Graph_Signature_Scoped_Vars =\n  Port_Graph_Signature nodes inPorts outPorts +\n  Abstract_Formulas freshenLC renameLCs lconsts closed subst subst_lconsts subst_renameLCs anyP\n  for nodes :: \"'node stream\" and inPorts :: \"'node \\<Rightarrow> 'inPort fset\"  and outPorts :: \"'node \\<Rightarrow> 'outPort fset\"\n  and  freshenLC :: \"nat \\<Rightarrow> 'var \\<Rightarrow> 'var\" \n    and renameLCs :: \"('var \\<Rightarrow> 'var) \\<Rightarrow> 'form \\<Rightarrow> 'form\" \n    and lconsts :: \"'form \\<Rightarrow> 'var set\" \n    and closed :: \"'form \\<Rightarrow> bool\"\n    and subst :: \"'subst \\<Rightarrow> 'form \\<Rightarrow> 'form\" \n    and subst_lconsts :: \"'subst \\<Rightarrow> 'var set\" \n    and subst_renameLCs :: \"('var \\<Rightarrow> 'var) \\<Rightarrow> ('subst \\<Rightarrow> 'subst)\"\n    and anyP :: \"'form\" +\n\n  fixes local_vars :: \"'node \\<Rightarrow> 'inPort \\<Rightarrow> 'var set\""], ["", "end"]]}