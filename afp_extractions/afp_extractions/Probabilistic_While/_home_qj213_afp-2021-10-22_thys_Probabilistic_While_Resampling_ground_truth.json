{"file_name": "/home/qj213/afp-2021-10-22/thys/Probabilistic_While/Resampling.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Probabilistic_While", "problem_names": ["lemma ord_spmf_lossless:\n  assumes \"ord_spmf (=) p q\" \"lossless_spmf p\"\n  shows \"p = q\"", "lemmas resample_fixp_induct[case_names adm bottom step] = resample.fixp_induct", "lemma resample_conv_while: \"resample A B = bind_spmf (spmf_of_set A) while\"", "lemma A_nonempty: \"A \\<noteq> {}\"", "lemma B_finite: \"finite B\"", "lemma lossless_resample: \"lossless_spmf (resample A B)\"", "lemma resample_le_sample:\n  \"ord_spmf (=) (resample A B) (spmf_of_set B)\"", "lemma resample_eq_sample: \"resample A B = spmf_of_set B\""], "translations": [["", "lemma ord_spmf_lossless:\n  assumes \"ord_spmf (=) p q\" \"lossless_spmf p\"\n  shows \"p = q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p = q", "unfolding pmf.rel_eq[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_pmf (=) p q", "using assms(1)"], ["proof (prove)\nusing this:\n  ord_spmf (=) p q\n\ngoal (1 subgoal):\n 1. rel_pmf (=) p q", "by(rule pmf.rel_mono_strong)(use assms(2) in \\<open>auto elim!: ord_option.cases simp add: lossless_iff_set_pmf_None\\<close>)"], ["", "context notes [[function_internals]] begin"], ["", "partial_function (spmf) resample :: \"'a set \\<Rightarrow> 'a set \\<Rightarrow> 'a spmf\" where\n  \"resample A B = bind_spmf (spmf_of_set A) (\\<lambda>x. if x \\<in> B then return_spmf x else resample A B)\""], ["", "end"], ["", "lemmas resample_fixp_induct[case_names adm bottom step] = resample.fixp_induct"], ["", "context\n  fixes A :: \"'a set\"\n  and B :: \"'a set\"\nbegin"], ["", "interpretation loop_spmf \"\\<lambda>x. x \\<notin> B\" \"\\<lambda>_. spmf_of_set A\""], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "lemma resample_conv_while: \"resample A B = bind_spmf (spmf_of_set A) while\""], ["proof (prove)\ngoal (1 subgoal):\n 1. resample A B = spmf_of_set A \\<bind> local.while", "proof(induction rule: parallel_fixp_induct_2_1[OF partial_function_definitions_spmf partial_function_definitions_spmf resample.mono while.mono resample_def while_def, case_names adm bottom step])"], ["proof (state)\ngoal (3 subgoals):\n 1. ccpo.admissible (prod_lub spmf.lub_fun spmf.lub_fun)\n     (rel_prod spmf.le_fun spmf.le_fun)\n     (\\<lambda>x. curry (fst x) A B = spmf_of_set A \\<bind> snd x)\n 2. lub_spmf {} = spmf_of_set A \\<bind> (\\<lambda>a. lub_spmf {})\n 3. \\<And>f g.\n       f A B = spmf_of_set A \\<bind> g \\<Longrightarrow>\n       spmf_of_set A \\<bind>\n       (\\<lambda>x. if x \\<in> B then return_spmf x else f A B) =\n       spmf_of_set A \\<bind>\n       (\\<lambda>a.\n           if a \\<notin> B then spmf_of_set A \\<bind> g else return_spmf a)", "case adm"], ["proof (state)\nthis:\n  \n\ngoal (3 subgoals):\n 1. ccpo.admissible (prod_lub spmf.lub_fun spmf.lub_fun)\n     (rel_prod spmf.le_fun spmf.le_fun)\n     (\\<lambda>x. curry (fst x) A B = spmf_of_set A \\<bind> snd x)\n 2. lub_spmf {} = spmf_of_set A \\<bind> (\\<lambda>a. lub_spmf {})\n 3. \\<And>f g.\n       f A B = spmf_of_set A \\<bind> g \\<Longrightarrow>\n       spmf_of_set A \\<bind>\n       (\\<lambda>x. if x \\<in> B then return_spmf x else f A B) =\n       spmf_of_set A \\<bind>\n       (\\<lambda>a.\n           if a \\<notin> B then spmf_of_set A \\<bind> g else return_spmf a)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. ccpo.admissible (prod_lub spmf.lub_fun spmf.lub_fun)\n     (rel_prod spmf.le_fun spmf.le_fun)\n     (\\<lambda>x. curry (fst x) A B = spmf_of_set A \\<bind> snd x)", "by simp"], ["proof (state)\nthis:\n  ccpo.admissible (prod_lub spmf.lub_fun spmf.lub_fun)\n   (rel_prod spmf.le_fun spmf.le_fun)\n   (\\<lambda>x. curry (fst x) A B = spmf_of_set A \\<bind> snd x)\n\ngoal (2 subgoals):\n 1. lub_spmf {} = spmf_of_set A \\<bind> (\\<lambda>a. lub_spmf {})\n 2. \\<And>f g.\n       f A B = spmf_of_set A \\<bind> g \\<Longrightarrow>\n       spmf_of_set A \\<bind>\n       (\\<lambda>x. if x \\<in> B then return_spmf x else f A B) =\n       spmf_of_set A \\<bind>\n       (\\<lambda>a.\n           if a \\<notin> B then spmf_of_set A \\<bind> g else return_spmf a)", "case bottom"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. lub_spmf {} = spmf_of_set A \\<bind> (\\<lambda>a. lub_spmf {})\n 2. \\<And>f g.\n       f A B = spmf_of_set A \\<bind> g \\<Longrightarrow>\n       spmf_of_set A \\<bind>\n       (\\<lambda>x. if x \\<in> B then return_spmf x else f A B) =\n       spmf_of_set A \\<bind>\n       (\\<lambda>a.\n           if a \\<notin> B then spmf_of_set A \\<bind> g else return_spmf a)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. lub_spmf {} = spmf_of_set A \\<bind> (\\<lambda>a. lub_spmf {})", "by simp"], ["proof (state)\nthis:\n  lub_spmf {} = spmf_of_set A \\<bind> (\\<lambda>a. lub_spmf {})\n\ngoal (1 subgoal):\n 1. \\<And>f g.\n       f A B = spmf_of_set A \\<bind> g \\<Longrightarrow>\n       spmf_of_set A \\<bind>\n       (\\<lambda>x. if x \\<in> B then return_spmf x else f A B) =\n       spmf_of_set A \\<bind>\n       (\\<lambda>a.\n           if a \\<notin> B then spmf_of_set A \\<bind> g else return_spmf a)", "case (step resample' while')"], ["proof (state)\nthis:\n  resample' A B = spmf_of_set A \\<bind> while'\n\ngoal (1 subgoal):\n 1. \\<And>f g.\n       f A B = spmf_of_set A \\<bind> g \\<Longrightarrow>\n       spmf_of_set A \\<bind>\n       (\\<lambda>x. if x \\<in> B then return_spmf x else f A B) =\n       spmf_of_set A \\<bind>\n       (\\<lambda>a.\n           if a \\<notin> B then spmf_of_set A \\<bind> g else return_spmf a)", "then"], ["proof (chain)\npicking this:\n  resample' A B = spmf_of_set A \\<bind> while'", "show ?case"], ["proof (prove)\nusing this:\n  resample' A B = spmf_of_set A \\<bind> while'\n\ngoal (1 subgoal):\n 1. spmf_of_set A \\<bind>\n    (\\<lambda>x. if x \\<in> B then return_spmf x else resample' A B) =\n    spmf_of_set A \\<bind>\n    (\\<lambda>a.\n        if a \\<notin> B then spmf_of_set A \\<bind> while'\n        else return_spmf a)", "by(simp add: z3_rule(33) cong del: if_cong)"], ["proof (state)\nthis:\n  spmf_of_set A \\<bind>\n  (\\<lambda>x. if x \\<in> B then return_spmf x else resample' A B) =\n  spmf_of_set A \\<bind>\n  (\\<lambda>a.\n      if a \\<notin> B then spmf_of_set A \\<bind> while' else return_spmf a)\n\ngoal:\nNo subgoals!", "qed"], ["", "context\n  assumes A: \"finite A\"\n    and B: \"B \\<subseteq> A\" \"B \\<noteq> {}\"\nbegin"], ["", "private"], ["", "lemma A_nonempty: \"A \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<noteq> {}", "using B"], ["proof (prove)\nusing this:\n  B \\<subseteq> A\n  B \\<noteq> {}\n\ngoal (1 subgoal):\n 1. A \\<noteq> {}", "by blast"], ["", "private"], ["", "lemma B_finite: \"finite B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite B", "using A B"], ["proof (prove)\nusing this:\n  finite A\n  B \\<subseteq> A\n  B \\<noteq> {}\n\ngoal (1 subgoal):\n 1. finite B", "by(blast intro: finite_subset)"], ["", "lemma lossless_resample: \"lossless_spmf (resample A B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lossless_spmf (resample A B)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. lossless_spmf (resample A B)", "from B"], ["proof (chain)\npicking this:\n  B \\<subseteq> A\n  B \\<noteq> {}", "have [simp]: \"A \\<inter> B \\<noteq> {}\""], ["proof (prove)\nusing this:\n  B \\<subseteq> A\n  B \\<noteq> {}\n\ngoal (1 subgoal):\n 1. A \\<inter> B \\<noteq> {}", "by auto"], ["proof (state)\nthis:\n  A \\<inter> B \\<noteq> {}\n\ngoal (1 subgoal):\n 1. lossless_spmf (resample A B)", "have \"lossless_spmf (while x)\" for x"], ["proof (prove)\ngoal (1 subgoal):\n 1. lossless_spmf (local.while x)", "by(rule termination_0_1_immediate[where p=\"card (A \\<inter> B) / card A\"])\n      (simp_all add: spmf_map vimage_def measure_spmf_of_set field_simps A_nonempty A not_le card_gt_0_iff B)"], ["proof (state)\nthis:\n  lossless_spmf (local.while ?x)\n\ngoal (1 subgoal):\n 1. lossless_spmf (resample A B)", "then"], ["proof (chain)\npicking this:\n  lossless_spmf (local.while ?x)", "show ?thesis"], ["proof (prove)\nusing this:\n  lossless_spmf (local.while ?x)\n\ngoal (1 subgoal):\n 1. lossless_spmf (resample A B)", "by(clarsimp simp add: resample_conv_while A A_nonempty)"], ["proof (state)\nthis:\n  lossless_spmf (resample A B)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma resample_le_sample:\n  \"ord_spmf (=) (resample A B) (spmf_of_set B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ord_spmf (=) (resample A B) (spmf_of_set B)", "proof(induction rule: resample_fixp_induct)"], ["proof (state)\ngoal (3 subgoals):\n 1. spmf.admissible\n     (\\<lambda>resample. ord_spmf (=) (curry resample A B) (spmf_of_set B))\n 2. ord_spmf (=) (return_pmf None) (spmf_of_set B)\n 3. \\<And>Ba.\n       ord_spmf (=) (Ba A B) (spmf_of_set B) \\<Longrightarrow>\n       ord_spmf (=)\n        (spmf_of_set A \\<bind>\n         (\\<lambda>x. if x \\<in> B then return_spmf x else Ba A B))\n        (spmf_of_set B)", "case adm"], ["proof (state)\nthis:\n  \n\ngoal (3 subgoals):\n 1. spmf.admissible\n     (\\<lambda>resample. ord_spmf (=) (curry resample A B) (spmf_of_set B))\n 2. ord_spmf (=) (return_pmf None) (spmf_of_set B)\n 3. \\<And>Ba.\n       ord_spmf (=) (Ba A B) (spmf_of_set B) \\<Longrightarrow>\n       ord_spmf (=)\n        (spmf_of_set A \\<bind>\n         (\\<lambda>x. if x \\<in> B then return_spmf x else Ba A B))\n        (spmf_of_set B)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. spmf.admissible\n     (\\<lambda>resample. ord_spmf (=) (curry resample A B) (spmf_of_set B))", "by simp"], ["proof (state)\nthis:\n  spmf.admissible\n   (\\<lambda>resample. ord_spmf (=) (curry resample A B) (spmf_of_set B))\n\ngoal (2 subgoals):\n 1. ord_spmf (=) (return_pmf None) (spmf_of_set B)\n 2. \\<And>Ba.\n       ord_spmf (=) (Ba A B) (spmf_of_set B) \\<Longrightarrow>\n       ord_spmf (=)\n        (spmf_of_set A \\<bind>\n         (\\<lambda>x. if x \\<in> B then return_spmf x else Ba A B))\n        (spmf_of_set B)", "case bottom"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. ord_spmf (=) (return_pmf None) (spmf_of_set B)\n 2. \\<And>Ba.\n       ord_spmf (=) (Ba A B) (spmf_of_set B) \\<Longrightarrow>\n       ord_spmf (=)\n        (spmf_of_set A \\<bind>\n         (\\<lambda>x. if x \\<in> B then return_spmf x else Ba A B))\n        (spmf_of_set B)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. ord_spmf (=) (return_pmf None) (spmf_of_set B)", "by simp"], ["proof (state)\nthis:\n  ord_spmf (=) (return_pmf None) (spmf_of_set B)\n\ngoal (1 subgoal):\n 1. \\<And>Ba.\n       ord_spmf (=) (Ba A B) (spmf_of_set B) \\<Longrightarrow>\n       ord_spmf (=)\n        (spmf_of_set A \\<bind>\n         (\\<lambda>x. if x \\<in> B then return_spmf x else Ba A B))\n        (spmf_of_set B)", "case (step resample')"], ["proof (state)\nthis:\n  ord_spmf (=) (resample' A B) (spmf_of_set B)\n\ngoal (1 subgoal):\n 1. \\<And>Ba.\n       ord_spmf (=) (Ba A B) (spmf_of_set B) \\<Longrightarrow>\n       ord_spmf (=)\n        (spmf_of_set A \\<bind>\n         (\\<lambda>x. if x \\<in> B then return_spmf x else Ba A B))\n        (spmf_of_set B)", "note [simp] = B_finite A"], ["proof (state)\nthis:\n  finite B\n  finite A\n\ngoal (1 subgoal):\n 1. \\<And>Ba.\n       ord_spmf (=) (Ba A B) (spmf_of_set B) \\<Longrightarrow>\n       ord_spmf (=)\n        (spmf_of_set A \\<bind>\n         (\\<lambda>x. if x \\<in> B then return_spmf x else Ba A B))\n        (spmf_of_set B)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. ord_spmf (=)\n     (spmf_of_set A \\<bind>\n      (\\<lambda>x. if x \\<in> B then return_spmf x else resample' A B))\n     (spmf_of_set B)", "proof(rule ord_pmf_increaseI)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       spmf\n        (spmf_of_set A \\<bind>\n         (\\<lambda>x. if x \\<in> B then return_spmf x else resample' A B))\n        x\n       \\<le> spmf (spmf_of_set B) x\n 2. \\<And>x.\n       x \\<in> set_spmf\n                (spmf_of_set A \\<bind>\n                 (\\<lambda>x.\n                     if x \\<in> B then return_spmf x\n                     else resample' A B)) \\<Longrightarrow>\n       x = x", "fix x"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       spmf\n        (spmf_of_set A \\<bind>\n         (\\<lambda>x. if x \\<in> B then return_spmf x else resample' A B))\n        x\n       \\<le> spmf (spmf_of_set B) x\n 2. \\<And>x.\n       x \\<in> set_spmf\n                (spmf_of_set A \\<bind>\n                 (\\<lambda>x.\n                     if x \\<in> B then return_spmf x\n                     else resample' A B)) \\<Longrightarrow>\n       x = x", "let ?f = \"\\<lambda>x. if x \\<in> B then return_spmf x else resample' A B\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       spmf\n        (spmf_of_set A \\<bind>\n         (\\<lambda>x. if x \\<in> B then return_spmf x else resample' A B))\n        x\n       \\<le> spmf (spmf_of_set B) x\n 2. \\<And>x.\n       x \\<in> set_spmf\n                (spmf_of_set A \\<bind>\n                 (\\<lambda>x.\n                     if x \\<in> B then return_spmf x\n                     else resample' A B)) \\<Longrightarrow>\n       x = x", "have \"spmf (bind_spmf (spmf_of_set A) ?f) x =\n      (\\<Sum>n\\<in>B \\<union> (A - B). if n \\<in> B then (if n = x then 1 else 0) / card A else spmf (resample' A B) x / card A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. spmf\n     (spmf_of_set A \\<bind>\n      (\\<lambda>x. if x \\<in> B then return_spmf x else resample' A B))\n     x =\n    (\\<Sum>n\\<in>B \\<union> (A - B).\n       if n \\<in> B then (if n = x then 1 else 0) / real (card A)\n       else spmf (resample' A B) x / real (card A))", "using B"], ["proof (prove)\nusing this:\n  B \\<subseteq> A\n  B \\<noteq> {}\n\ngoal (1 subgoal):\n 1. spmf\n     (spmf_of_set A \\<bind>\n      (\\<lambda>x. if x \\<in> B then return_spmf x else resample' A B))\n     x =\n    (\\<Sum>n\\<in>B \\<union> (A - B).\n       if n \\<in> B then (if n = x then 1 else 0) / real (card A)\n       else spmf (resample' A B) x / real (card A))", "by(auto simp add: spmf_bind integral_spmf_of_set sum_divide_distrib if_distrib[where f=\"\\<lambda>p. spmf p _ / _\"] cong: if_cong intro!: sum.cong split: split_indicator_asm)"], ["proof (state)\nthis:\n  spmf\n   (spmf_of_set A \\<bind>\n    (\\<lambda>x. if x \\<in> B then return_spmf x else resample' A B))\n   x =\n  (\\<Sum>n\\<in>B \\<union> (A - B).\n     if n \\<in> B then (if n = x then 1 else 0) / real (card A)\n     else spmf (resample' A B) x / real (card A))\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       spmf\n        (spmf_of_set A \\<bind>\n         (\\<lambda>x. if x \\<in> B then return_spmf x else resample' A B))\n        x\n       \\<le> spmf (spmf_of_set B) x\n 2. \\<And>x.\n       x \\<in> set_spmf\n                (spmf_of_set A \\<bind>\n                 (\\<lambda>x.\n                     if x \\<in> B then return_spmf x\n                     else resample' A B)) \\<Longrightarrow>\n       x = x", "also"], ["proof (state)\nthis:\n  spmf\n   (spmf_of_set A \\<bind>\n    (\\<lambda>x. if x \\<in> B then return_spmf x else resample' A B))\n   x =\n  (\\<Sum>n\\<in>B \\<union> (A - B).\n     if n \\<in> B then (if n = x then 1 else 0) / real (card A)\n     else spmf (resample' A B) x / real (card A))\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       spmf\n        (spmf_of_set A \\<bind>\n         (\\<lambda>x. if x \\<in> B then return_spmf x else resample' A B))\n        x\n       \\<le> spmf (spmf_of_set B) x\n 2. \\<And>x.\n       x \\<in> set_spmf\n                (spmf_of_set A \\<bind>\n                 (\\<lambda>x.\n                     if x \\<in> B then return_spmf x\n                     else resample' A B)) \\<Longrightarrow>\n       x = x", "have \"\\<dots> = (\\<Sum>n\\<in>B. (if n = x then 1 else 0) / card A) + (\\<Sum>n\\<in>A - B. spmf (resample' A B) x / card A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>n\\<in>B \\<union> (A - B).\n       if n \\<in> B then (if n = x then 1 else 0) / real (card A)\n       else spmf (resample' A B) x / real (card A)) =\n    (\\<Sum>n\\<in>B. (if n = x then 1 else 0) / real (card A)) +\n    (\\<Sum>n\\<in>A - B. spmf (resample' A B) x / real (card A))", "by(subst sum.union_disjoint)(auto)"], ["proof (state)\nthis:\n  (\\<Sum>n\\<in>B \\<union> (A - B).\n     if n \\<in> B then (if n = x then 1 else 0) / real (card A)\n     else spmf (resample' A B) x / real (card A)) =\n  (\\<Sum>n\\<in>B. (if n = x then 1 else 0) / real (card A)) +\n  (\\<Sum>n\\<in>A - B. spmf (resample' A B) x / real (card A))\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       spmf\n        (spmf_of_set A \\<bind>\n         (\\<lambda>x. if x \\<in> B then return_spmf x else resample' A B))\n        x\n       \\<le> spmf (spmf_of_set B) x\n 2. \\<And>x.\n       x \\<in> set_spmf\n                (spmf_of_set A \\<bind>\n                 (\\<lambda>x.\n                     if x \\<in> B then return_spmf x\n                     else resample' A B)) \\<Longrightarrow>\n       x = x", "also"], ["proof (state)\nthis:\n  (\\<Sum>n\\<in>B \\<union> (A - B).\n     if n \\<in> B then (if n = x then 1 else 0) / real (card A)\n     else spmf (resample' A B) x / real (card A)) =\n  (\\<Sum>n\\<in>B. (if n = x then 1 else 0) / real (card A)) +\n  (\\<Sum>n\\<in>A - B. spmf (resample' A B) x / real (card A))\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       spmf\n        (spmf_of_set A \\<bind>\n         (\\<lambda>x. if x \\<in> B then return_spmf x else resample' A B))\n        x\n       \\<le> spmf (spmf_of_set B) x\n 2. \\<And>x.\n       x \\<in> set_spmf\n                (spmf_of_set A \\<bind>\n                 (\\<lambda>x.\n                     if x \\<in> B then return_spmf x\n                     else resample' A B)) \\<Longrightarrow>\n       x = x", "have \"\\<dots> = (if x \\<in> B then 1 / card A else 0) + card (A - B) / card A * spmf (resample' A B) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>n\\<in>B. (if n = x then 1 else 0) / real (card A)) +\n    (\\<Sum>n\\<in>A - B. spmf (resample' A B) x / real (card A)) =\n    (if x \\<in> B then 1 / real (card A) else 0) +\n    real (card (A - B)) / real (card A) * spmf (resample' A B) x", "by(simp cong: sum.cong add: if_distrib[where f=\"\\<lambda>x. x / _\"] cong: if_cong)"], ["proof (state)\nthis:\n  (\\<Sum>n\\<in>B. (if n = x then 1 else 0) / real (card A)) +\n  (\\<Sum>n\\<in>A - B. spmf (resample' A B) x / real (card A)) =\n  (if x \\<in> B then 1 / real (card A) else 0) +\n  real (card (A - B)) / real (card A) * spmf (resample' A B) x\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       spmf\n        (spmf_of_set A \\<bind>\n         (\\<lambda>x. if x \\<in> B then return_spmf x else resample' A B))\n        x\n       \\<le> spmf (spmf_of_set B) x\n 2. \\<And>x.\n       x \\<in> set_spmf\n                (spmf_of_set A \\<bind>\n                 (\\<lambda>x.\n                     if x \\<in> B then return_spmf x\n                     else resample' A B)) \\<Longrightarrow>\n       x = x", "also"], ["proof (state)\nthis:\n  (\\<Sum>n\\<in>B. (if n = x then 1 else 0) / real (card A)) +\n  (\\<Sum>n\\<in>A - B. spmf (resample' A B) x / real (card A)) =\n  (if x \\<in> B then 1 / real (card A) else 0) +\n  real (card (A - B)) / real (card A) * spmf (resample' A B) x\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       spmf\n        (spmf_of_set A \\<bind>\n         (\\<lambda>x. if x \\<in> B then return_spmf x else resample' A B))\n        x\n       \\<le> spmf (spmf_of_set B) x\n 2. \\<And>x.\n       x \\<in> set_spmf\n                (spmf_of_set A \\<bind>\n                 (\\<lambda>x.\n                     if x \\<in> B then return_spmf x\n                     else resample' A B)) \\<Longrightarrow>\n       x = x", "have \"\\<dots> \\<le> (if x \\<in> B then 1 / card A else 0) + card (A - B) / card A * spmf (spmf_of_set B) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (if x \\<in> B then 1 / real (card A) else 0) +\n    real (card (A - B)) / real (card A) * spmf (resample' A B) x\n    \\<le> (if x \\<in> B then 1 / real (card A) else 0) +\n          real (card (A - B)) / real (card A) * spmf (spmf_of_set B) x", "by(intro add_left_mono mult_left_mono step.IH[THEN ord_spmf_eq_leD]) simp"], ["proof (state)\nthis:\n  (if x \\<in> B then 1 / real (card A) else 0) +\n  real (card (A - B)) / real (card A) * spmf (resample' A B) x\n  \\<le> (if x \\<in> B then 1 / real (card A) else 0) +\n        real (card (A - B)) / real (card A) * spmf (spmf_of_set B) x\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       spmf\n        (spmf_of_set A \\<bind>\n         (\\<lambda>x. if x \\<in> B then return_spmf x else resample' A B))\n        x\n       \\<le> spmf (spmf_of_set B) x\n 2. \\<And>x.\n       x \\<in> set_spmf\n                (spmf_of_set A \\<bind>\n                 (\\<lambda>x.\n                     if x \\<in> B then return_spmf x\n                     else resample' A B)) \\<Longrightarrow>\n       x = x", "also"], ["proof (state)\nthis:\n  (if x \\<in> B then 1 / real (card A) else 0) +\n  real (card (A - B)) / real (card A) * spmf (resample' A B) x\n  \\<le> (if x \\<in> B then 1 / real (card A) else 0) +\n        real (card (A - B)) / real (card A) * spmf (spmf_of_set B) x\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       spmf\n        (spmf_of_set A \\<bind>\n         (\\<lambda>x. if x \\<in> B then return_spmf x else resample' A B))\n        x\n       \\<le> spmf (spmf_of_set B) x\n 2. \\<And>x.\n       x \\<in> set_spmf\n                (spmf_of_set A \\<bind>\n                 (\\<lambda>x.\n                     if x \\<in> B then return_spmf x\n                     else resample' A B)) \\<Longrightarrow>\n       x = x", "have \"\\<dots> = spmf (spmf_of_set B) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (if x \\<in> B then 1 / real (card A) else 0) +\n    real (card (A - B)) / real (card A) * spmf (spmf_of_set B) x =\n    spmf (spmf_of_set B) x", "using B"], ["proof (prove)\nusing this:\n  B \\<subseteq> A\n  B \\<noteq> {}\n\ngoal (1 subgoal):\n 1. (if x \\<in> B then 1 / real (card A) else 0) +\n    real (card (A - B)) / real (card A) * spmf (spmf_of_set B) x =\n    spmf (spmf_of_set B) x", "by(simp add: spmf_of_set field_simps A_nonempty card_Diff_subset card_mono of_nat_diff)"], ["proof (state)\nthis:\n  (if x \\<in> B then 1 / real (card A) else 0) +\n  real (card (A - B)) / real (card A) * spmf (spmf_of_set B) x =\n  spmf (spmf_of_set B) x\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       spmf\n        (spmf_of_set A \\<bind>\n         (\\<lambda>x. if x \\<in> B then return_spmf x else resample' A B))\n        x\n       \\<le> spmf (spmf_of_set B) x\n 2. \\<And>x.\n       x \\<in> set_spmf\n                (spmf_of_set A \\<bind>\n                 (\\<lambda>x.\n                     if x \\<in> B then return_spmf x\n                     else resample' A B)) \\<Longrightarrow>\n       x = x", "finally"], ["proof (chain)\npicking this:\n  spmf\n   (spmf_of_set A \\<bind>\n    (\\<lambda>x. if x \\<in> B then return_spmf x else resample' A B))\n   x\n  \\<le> spmf (spmf_of_set B) x", "show \"spmf (bind_spmf (spmf_of_set A) ?f) x \\<le> \\<dots>\""], ["proof (prove)\nusing this:\n  spmf\n   (spmf_of_set A \\<bind>\n    (\\<lambda>x. if x \\<in> B then return_spmf x else resample' A B))\n   x\n  \\<le> spmf (spmf_of_set B) x\n\ngoal (1 subgoal):\n 1. spmf\n     (spmf_of_set A \\<bind>\n      (\\<lambda>x. if x \\<in> B then return_spmf x else resample' A B))\n     x\n    \\<le> spmf (spmf_of_set B) x", "."], ["proof (state)\nthis:\n  spmf\n   (spmf_of_set A \\<bind>\n    (\\<lambda>x. if x \\<in> B then return_spmf x else resample' A B))\n   x\n  \\<le> spmf (spmf_of_set B) x\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set_spmf\n                (spmf_of_set A \\<bind>\n                 (\\<lambda>x.\n                     if x \\<in> B then return_spmf x\n                     else resample' A B)) \\<Longrightarrow>\n       x = x", "qed simp"], ["proof (state)\nthis:\n  ord_spmf (=)\n   (spmf_of_set A \\<bind>\n    (\\<lambda>x. if x \\<in> B then return_spmf x else resample' A B))\n   (spmf_of_set B)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma resample_eq_sample: \"resample A B = spmf_of_set B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. resample A B = spmf_of_set B", "using resample_le_sample lossless_resample"], ["proof (prove)\nusing this:\n  ord_spmf (=) (resample A B) (spmf_of_set B)\n  lossless_spmf (resample A B)\n\ngoal (1 subgoal):\n 1. resample A B = spmf_of_set B", "by(rule ord_spmf_lossless)"], ["", "end"], ["", "end"], ["", "end"]]}