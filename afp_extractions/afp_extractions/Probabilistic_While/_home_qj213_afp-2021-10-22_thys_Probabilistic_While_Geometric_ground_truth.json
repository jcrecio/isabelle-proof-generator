{"file_name": "/home/qj213/afp-2021-10-22/thys/Probabilistic_While/Geometric.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Probabilistic_While", "problem_names": ["lemma geometric_spmf_fixp_induct [case_names adm bottom step]:\n  assumes \"spmf.admissible P\"\n    and \"P (\\<lambda>geometric_spmf. return_pmf None)\"\n    and \"\\<And>geometric_spmf'. P geometric_spmf' \\<Longrightarrow> P (\\<lambda>p. bernoulli p \\<bind> (\\<lambda>b. if b then return_spmf 0 else map_spmf ((+) 1) (geometric_spmf' p)))\"\n  shows \"P geometric_spmf\"", "lemma spmf_geometric_nonpos: \"p \\<le> 0 \\<Longrightarrow> geometric_spmf p = return_pmf None\"", "lemma spmf_geometric_ge_1: \"1 \\<le> p \\<Longrightarrow> geometric_spmf p = return_spmf 0\"", "lemma geometric_spmf_conv_while:\n  shows \"geometric_spmf p = map_spmf snd (while (True, 0))\"", "lemma lossless_geometric [simp]: \"lossless_spmf (geometric_spmf p) \\<longleftrightarrow> p > 0\"", "lemma spmf_geometric:\n  assumes p: \"0 < p\" \"p < 1\"\n  shows \"spmf (geometric_spmf p) n = (1 - p) ^ n * p\" (is \"?lhs n = ?rhs n\")"], "translations": [["", "lemma geometric_spmf_fixp_induct [case_names adm bottom step]:\n  assumes \"spmf.admissible P\"\n    and \"P (\\<lambda>geometric_spmf. return_pmf None)\"\n    and \"\\<And>geometric_spmf'. P geometric_spmf' \\<Longrightarrow> P (\\<lambda>p. bernoulli p \\<bind> (\\<lambda>b. if b then return_spmf 0 else map_spmf ((+) 1) (geometric_spmf' p)))\"\n  shows \"P geometric_spmf\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P geometric_spmf", "using assms"], ["proof (prove)\nusing this:\n  spmf.admissible P\n  P (\\<lambda>geometric_spmf. return_pmf None)\n  P ?geometric_spmf' \\<Longrightarrow>\n  P (\\<lambda>p.\n        bernoulli p \\<bind>\n        (\\<lambda>b.\n            if b then return_spmf 0\n            else map_spmf ((+) 1) (?geometric_spmf' p)))\n\ngoal (1 subgoal):\n 1. P geometric_spmf", "by(rule geometric_spmf.fixp_induct)"], ["", "lemma spmf_geometric_nonpos: \"p \\<le> 0 \\<Longrightarrow> geometric_spmf p = return_pmf None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<le> 0 \\<Longrightarrow> geometric_spmf p = return_pmf None", "by(induction rule: geometric_spmf_fixp_induct) simp_all"], ["", "lemma spmf_geometric_ge_1: \"1 \\<le> p \\<Longrightarrow> geometric_spmf p = return_spmf 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 \\<le> p \\<Longrightarrow> geometric_spmf p = return_spmf 0", "by(simp add: geometric_spmf.simps)"], ["", "context\n  fixes p :: real \n  and body :: \"bool \\<times> nat \\<Rightarrow> (bool \\<times> nat) spmf\"\n  defines [simp]: \"body \\<equiv> \\<lambda>(b, x). map_spmf (\\<lambda>b'. (\\<not> b', x + (if b' then 0 else 1))) (bernoulli p)\"\nbegin"], ["", "interpretation loop_spmf fst body \n  rewrites \"body \\<equiv> \\<lambda>(b, x). map_spmf (\\<lambda>b'. (\\<not> b', x + (if b' then 0 else 1))) (bernoulli p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. body \\<equiv>\n    \\<lambda>(b, x).\n       map_spmf (\\<lambda>b'. (\\<not> b', x + (if b' then 0 else 1)))\n        (bernoulli p)", "by(fact body_def)"], ["", "lemma geometric_spmf_conv_while:\n  shows \"geometric_spmf p = map_spmf snd (while (True, 0))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. geometric_spmf p = map_spmf snd (local.while (True, 0))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. geometric_spmf p = map_spmf snd (local.while (True, 0))", "have \"map_spmf ((+) x) (geometric_spmf p) = map_spmf snd (while (True, x))\" (is \"?lhs = ?rhs\") for x"], ["proof (prove)\ngoal (1 subgoal):\n 1. map_spmf ((+) x) (geometric_spmf p) =\n    map_spmf snd (local.while (True, x))", "proof(rule spmf.leq_antisym)"], ["proof (state)\ngoal (2 subgoals):\n 1. ord_spmf (=) (map_spmf ((+) x) (geometric_spmf p))\n     (map_spmf snd (local.while (True, x)))\n 2. ord_spmf (=) (map_spmf snd (local.while (True, x)))\n     (map_spmf ((+) x) (geometric_spmf p))", "show \"ord_spmf (=) ?lhs ?rhs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ord_spmf (=) (map_spmf ((+) x) (geometric_spmf p))\n     (map_spmf snd (local.while (True, x)))", "proof(induction arbitrary: x rule: geometric_spmf_fixp_induct)"], ["proof (state)\ngoal (3 subgoals):\n 1. spmf.admissible\n     (\\<lambda>a.\n         \\<forall>x.\n            ord_spmf (=) (map_spmf ((+) x) (a p))\n             (map_spmf snd (local.while (True, x))))\n 2. \\<And>x.\n       ord_spmf (=) (map_spmf ((+) x) (return_pmf None))\n        (map_spmf snd (local.while (True, x)))\n 3. \\<And>geometric_spmf' x.\n       (\\<And>x.\n           ord_spmf (=) (map_spmf ((+) x) (geometric_spmf' p))\n            (map_spmf snd (local.while (True, x)))) \\<Longrightarrow>\n       ord_spmf (=)\n        (map_spmf ((+) x)\n          (bernoulli p \\<bind>\n           (\\<lambda>b.\n               if b then return_spmf 0\n               else map_spmf ((+) 1) (geometric_spmf' p))))\n        (map_spmf snd (local.while (True, x)))", "case adm"], ["proof (state)\nthis:\n  \n\ngoal (3 subgoals):\n 1. spmf.admissible\n     (\\<lambda>a.\n         \\<forall>x.\n            ord_spmf (=) (map_spmf ((+) x) (a p))\n             (map_spmf snd (local.while (True, x))))\n 2. \\<And>x.\n       ord_spmf (=) (map_spmf ((+) x) (return_pmf None))\n        (map_spmf snd (local.while (True, x)))\n 3. \\<And>geometric_spmf' x.\n       (\\<And>x.\n           ord_spmf (=) (map_spmf ((+) x) (geometric_spmf' p))\n            (map_spmf snd (local.while (True, x)))) \\<Longrightarrow>\n       ord_spmf (=)\n        (map_spmf ((+) x)\n          (bernoulli p \\<bind>\n           (\\<lambda>b.\n               if b then return_spmf 0\n               else map_spmf ((+) 1) (geometric_spmf' p))))\n        (map_spmf snd (local.while (True, x)))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. spmf.admissible\n     (\\<lambda>a.\n         \\<forall>x.\n            ord_spmf (=) (map_spmf ((+) x) (a p))\n             (map_spmf snd (local.while (True, x))))", "by simp"], ["proof (state)\nthis:\n  spmf.admissible\n   (\\<lambda>a.\n       \\<forall>x.\n          ord_spmf (=) (map_spmf ((+) x) (a p))\n           (map_spmf snd (local.while (True, x))))\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       ord_spmf (=) (map_spmf ((+) x) (return_pmf None))\n        (map_spmf snd (local.while (True, x)))\n 2. \\<And>geometric_spmf' x.\n       (\\<And>x.\n           ord_spmf (=) (map_spmf ((+) x) (geometric_spmf' p))\n            (map_spmf snd (local.while (True, x)))) \\<Longrightarrow>\n       ord_spmf (=)\n        (map_spmf ((+) x)\n          (bernoulli p \\<bind>\n           (\\<lambda>b.\n               if b then return_spmf 0\n               else map_spmf ((+) 1) (geometric_spmf' p))))\n        (map_spmf snd (local.while (True, x)))", "case bottom"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<And>x.\n       ord_spmf (=) (map_spmf ((+) x) (return_pmf None))\n        (map_spmf snd (local.while (True, x)))\n 2. \\<And>geometric_spmf' x.\n       (\\<And>x.\n           ord_spmf (=) (map_spmf ((+) x) (geometric_spmf' p))\n            (map_spmf snd (local.while (True, x)))) \\<Longrightarrow>\n       ord_spmf (=)\n        (map_spmf ((+) x)\n          (bernoulli p \\<bind>\n           (\\<lambda>b.\n               if b then return_spmf 0\n               else map_spmf ((+) 1) (geometric_spmf' p))))\n        (map_spmf snd (local.while (True, x)))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. ord_spmf (=) (map_spmf ((+) x) (return_pmf None))\n     (map_spmf snd (local.while (True, x)))", "by simp"], ["proof (state)\nthis:\n  ord_spmf (=) (map_spmf ((+) x) (return_pmf None))\n   (map_spmf snd (local.while (True, x)))\n\ngoal (1 subgoal):\n 1. \\<And>geometric_spmf' x.\n       (\\<And>x.\n           ord_spmf (=) (map_spmf ((+) x) (geometric_spmf' p))\n            (map_spmf snd (local.while (True, x)))) \\<Longrightarrow>\n       ord_spmf (=)\n        (map_spmf ((+) x)\n          (bernoulli p \\<bind>\n           (\\<lambda>b.\n               if b then return_spmf 0\n               else map_spmf ((+) 1) (geometric_spmf' p))))\n        (map_spmf snd (local.while (True, x)))", "case (step geometric')"], ["proof (state)\nthis:\n  ord_spmf (=) (map_spmf ((+) ?x) (geometric' p))\n   (map_spmf snd (local.while (True, ?x)))\n\ngoal (1 subgoal):\n 1. \\<And>geometric_spmf' x.\n       (\\<And>x.\n           ord_spmf (=) (map_spmf ((+) x) (geometric_spmf' p))\n            (map_spmf snd (local.while (True, x)))) \\<Longrightarrow>\n       ord_spmf (=)\n        (map_spmf ((+) x)\n          (bernoulli p \\<bind>\n           (\\<lambda>b.\n               if b then return_spmf 0\n               else map_spmf ((+) 1) (geometric_spmf' p))))\n        (map_spmf snd (local.while (True, x)))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. ord_spmf (=)\n     (map_spmf ((+) x)\n       (bernoulli p \\<bind>\n        (\\<lambda>b.\n            if b then return_spmf 0 else map_spmf ((+) 1) (geometric' p))))\n     (map_spmf snd (local.while (True, x)))", "using step.IH[of \"Suc x\"]"], ["proof (prove)\nusing this:\n  ord_spmf (=) (map_spmf ((+) (Suc x)) (geometric' p))\n   (map_spmf snd (local.while (True, Suc x)))\n\ngoal (1 subgoal):\n 1. ord_spmf (=)\n     (map_spmf ((+) x)\n       (bernoulli p \\<bind>\n        (\\<lambda>b.\n            if b then return_spmf 0 else map_spmf ((+) 1) (geometric' p))))\n     (map_spmf snd (local.while (True, x)))", "apply(rewrite while.simps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. ord_spmf (=) (map_spmf ((+) (Suc x)) (geometric' p))\n     (map_spmf snd (local.while (True, Suc x))) \\<Longrightarrow>\n    ord_spmf (=)\n     (map_spmf ((+) x)\n       (bernoulli p \\<bind>\n        (\\<lambda>b.\n            if b then return_spmf 0 else map_spmf ((+) 1) (geometric' p))))\n     (map_spmf snd\n       (if fst (True, x)\n        then (case (True, x) of\n              (b, x) \\<Rightarrow>\n                map_spmf\n                 (\\<lambda>b'. (\\<not> b', x + (if b' then 0 else 1)))\n                 (bernoulli p)) \\<bind>\n             local.while\n        else return_spmf (True, x)))", "apply(clarsimp simp add: map_spmf_bind_spmf bind_map_spmf intro!: ord_spmf_bind_reflI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>ord_spmf (=)\n                 (map_spmf (\\<lambda>a. Suc (x + a)) (geometric' p))\n                 (map_spmf snd (local.while (True, Suc x)));\n        x \\<in> set_spmf (bernoulli p)\\<rbrakk>\n       \\<Longrightarrow> (x \\<longrightarrow>\n                          ord_spmf (=) (return_spmf x)\n                           (map_spmf snd (local.while (False, x)))) \\<and>\n                         (\\<not> x \\<longrightarrow>\n                          ord_spmf (=)\n                           (map_spmf ((+) x)\n                             (map_spmf ((+) (Suc 0)) (geometric' p)))\n                           (map_spmf snd (local.while (True, Suc x))))", "apply(rewrite while.simps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>ord_spmf (=)\n                 (map_spmf (\\<lambda>a. Suc (x + a)) (geometric' p))\n                 (map_spmf snd (local.while (True, Suc x)));\n        x \\<in> set_spmf (bernoulli p)\\<rbrakk>\n       \\<Longrightarrow> (x \\<longrightarrow>\n                          ord_spmf (=) (return_spmf x)\n                           (map_spmf snd\n                             (if fst (False, x)\n                              then (case (False, x) of\n                                    (b, x) \\<Rightarrow>\nmap_spmf (\\<lambda>b'. (\\<not> b', x + (if b' then 0 else 1)))\n (bernoulli p)) \\<bind>\n                                   local.while\n                              else return_spmf (False, x)))) \\<and>\n                         (\\<not> x \\<longrightarrow>\n                          ord_spmf (=)\n                           (map_spmf ((+) x)\n                             (map_spmf ((+) (Suc 0)) (geometric' p)))\n                           (map_spmf snd (local.while (True, Suc x))))", "apply(clarsimp simp add: spmf.map_comp o_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  ord_spmf (=)\n   (map_spmf ((+) x)\n     (bernoulli p \\<bind>\n      (\\<lambda>b.\n          if b then return_spmf 0 else map_spmf ((+) 1) (geometric' p))))\n   (map_spmf snd (local.while (True, x)))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ord_spmf (=) (map_spmf ((+) x) (geometric_spmf p))\n   (map_spmf snd (local.while (True, x)))\n\ngoal (1 subgoal):\n 1. ord_spmf (=) (map_spmf snd (local.while (True, x)))\n     (map_spmf ((+) x) (geometric_spmf p))", "have \"ord_spmf (=) ?rhs ?lhs\"\n      and \"ord_spmf (=) (map_spmf snd (while (False, x))) (return_spmf x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ord_spmf (=) (map_spmf snd (local.while (True, x)))\n     (map_spmf ((+) x) (geometric_spmf p)) &&&\n    ord_spmf (=) (map_spmf snd (local.while (False, x))) (return_spmf x)", "proof(induction arbitrary: x and x rule: while_fixp_induct)"], ["proof (state)\ngoal (5 subgoals):\n 1. spmf.admissible\n     (\\<lambda>a.\n         \\<forall>x.\n            ord_spmf (=) (map_spmf snd (a (True, x)))\n             (map_spmf ((+) x) (geometric_spmf p)) \\<and>\n            ord_spmf (=) (map_spmf snd (a (False, x))) (return_spmf x))\n 2. \\<And>x.\n       ord_spmf (=) (map_spmf snd (return_pmf None))\n        (map_spmf ((+) x) (geometric_spmf p))\n 3. \\<And>x. ord_spmf (=) (map_spmf snd (return_pmf None)) (return_spmf x)\n 4. \\<And>while' x.\n       \\<lbrakk>\\<And>x.\n                   ord_spmf (=) (map_spmf snd (while' (True, x)))\n                    (map_spmf ((+) x) (geometric_spmf p));\n        \\<And>x.\n           ord_spmf (=) (map_spmf snd (while' (False, x)))\n            (return_spmf x)\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (map_spmf snd\n                            (if fst (True, x)\n                             then (case (True, x) of\n                                   (b, x) \\<Rightarrow>\n                                     map_spmf\n(\\<lambda>b'. (\\<not> b', x + (if b' then 0 else 1))) (bernoulli p)) \\<bind>\n                                  while'\n                             else return_spmf (True, x)))\n                          (map_spmf ((+) x) (geometric_spmf p))\n 5. \\<And>while' x.\n       \\<lbrakk>\\<And>x.\n                   ord_spmf (=) (map_spmf snd (while' (True, x)))\n                    (map_spmf ((+) x) (geometric_spmf p));\n        \\<And>x.\n           ord_spmf (=) (map_spmf snd (while' (False, x)))\n            (return_spmf x)\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (map_spmf snd\n                            (if fst (False, x)\n                             then (case (False, x) of\n                                   (b, x) \\<Rightarrow>\n                                     map_spmf\n(\\<lambda>b'. (\\<not> b', x + (if b' then 0 else 1))) (bernoulli p)) \\<bind>\n                                  while'\n                             else return_spmf (False, x)))\n                          (return_spmf x)", "case adm"], ["proof (state)\nthis:\n  \n\ngoal (5 subgoals):\n 1. spmf.admissible\n     (\\<lambda>a.\n         \\<forall>x.\n            ord_spmf (=) (map_spmf snd (a (True, x)))\n             (map_spmf ((+) x) (geometric_spmf p)) \\<and>\n            ord_spmf (=) (map_spmf snd (a (False, x))) (return_spmf x))\n 2. \\<And>x.\n       ord_spmf (=) (map_spmf snd (return_pmf None))\n        (map_spmf ((+) x) (geometric_spmf p))\n 3. \\<And>x. ord_spmf (=) (map_spmf snd (return_pmf None)) (return_spmf x)\n 4. \\<And>while' x.\n       \\<lbrakk>\\<And>x.\n                   ord_spmf (=) (map_spmf snd (while' (True, x)))\n                    (map_spmf ((+) x) (geometric_spmf p));\n        \\<And>x.\n           ord_spmf (=) (map_spmf snd (while' (False, x)))\n            (return_spmf x)\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (map_spmf snd\n                            (if fst (True, x)\n                             then (case (True, x) of\n                                   (b, x) \\<Rightarrow>\n                                     map_spmf\n(\\<lambda>b'. (\\<not> b', x + (if b' then 0 else 1))) (bernoulli p)) \\<bind>\n                                  while'\n                             else return_spmf (True, x)))\n                          (map_spmf ((+) x) (geometric_spmf p))\n 5. \\<And>while' x.\n       \\<lbrakk>\\<And>x.\n                   ord_spmf (=) (map_spmf snd (while' (True, x)))\n                    (map_spmf ((+) x) (geometric_spmf p));\n        \\<And>x.\n           ord_spmf (=) (map_spmf snd (while' (False, x)))\n            (return_spmf x)\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (map_spmf snd\n                            (if fst (False, x)\n                             then (case (False, x) of\n                                   (b, x) \\<Rightarrow>\n                                     map_spmf\n(\\<lambda>b'. (\\<not> b', x + (if b' then 0 else 1))) (bernoulli p)) \\<bind>\n                                  while'\n                             else return_spmf (False, x)))\n                          (return_spmf x)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. spmf.admissible\n     (\\<lambda>a.\n         \\<forall>x.\n            ord_spmf (=) (map_spmf snd (a (True, x)))\n             (map_spmf ((+) x) (geometric_spmf p)) \\<and>\n            ord_spmf (=) (map_spmf snd (a (False, x))) (return_spmf x))", "by simp"], ["proof (state)\nthis:\n  spmf.admissible\n   (\\<lambda>a.\n       \\<forall>x.\n          ord_spmf (=) (map_spmf snd (a (True, x)))\n           (map_spmf ((+) x) (geometric_spmf p)) \\<and>\n          ord_spmf (=) (map_spmf snd (a (False, x))) (return_spmf x))\n\ngoal (4 subgoals):\n 1. \\<And>x.\n       ord_spmf (=) (map_spmf snd (return_pmf None))\n        (map_spmf ((+) x) (geometric_spmf p))\n 2. \\<And>x. ord_spmf (=) (map_spmf snd (return_pmf None)) (return_spmf x)\n 3. \\<And>while' x.\n       \\<lbrakk>\\<And>x.\n                   ord_spmf (=) (map_spmf snd (while' (True, x)))\n                    (map_spmf ((+) x) (geometric_spmf p));\n        \\<And>x.\n           ord_spmf (=) (map_spmf snd (while' (False, x)))\n            (return_spmf x)\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (map_spmf snd\n                            (if fst (True, x)\n                             then (case (True, x) of\n                                   (b, x) \\<Rightarrow>\n                                     map_spmf\n(\\<lambda>b'. (\\<not> b', x + (if b' then 0 else 1))) (bernoulli p)) \\<bind>\n                                  while'\n                             else return_spmf (True, x)))\n                          (map_spmf ((+) x) (geometric_spmf p))\n 4. \\<And>while' x.\n       \\<lbrakk>\\<And>x.\n                   ord_spmf (=) (map_spmf snd (while' (True, x)))\n                    (map_spmf ((+) x) (geometric_spmf p));\n        \\<And>x.\n           ord_spmf (=) (map_spmf snd (while' (False, x)))\n            (return_spmf x)\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (map_spmf snd\n                            (if fst (False, x)\n                             then (case (False, x) of\n                                   (b, x) \\<Rightarrow>\n                                     map_spmf\n(\\<lambda>b'. (\\<not> b', x + (if b' then 0 else 1))) (bernoulli p)) \\<bind>\n                                  while'\n                             else return_spmf (False, x)))\n                          (return_spmf x)", "case bottom"], ["proof (state)\nthis:\n  \n\ngoal (4 subgoals):\n 1. \\<And>x.\n       ord_spmf (=) (map_spmf snd (return_pmf None))\n        (map_spmf ((+) x) (geometric_spmf p))\n 2. \\<And>x. ord_spmf (=) (map_spmf snd (return_pmf None)) (return_spmf x)\n 3. \\<And>while' x.\n       \\<lbrakk>\\<And>x.\n                   ord_spmf (=) (map_spmf snd (while' (True, x)))\n                    (map_spmf ((+) x) (geometric_spmf p));\n        \\<And>x.\n           ord_spmf (=) (map_spmf snd (while' (False, x)))\n            (return_spmf x)\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (map_spmf snd\n                            (if fst (True, x)\n                             then (case (True, x) of\n                                   (b, x) \\<Rightarrow>\n                                     map_spmf\n(\\<lambda>b'. (\\<not> b', x + (if b' then 0 else 1))) (bernoulli p)) \\<bind>\n                                  while'\n                             else return_spmf (True, x)))\n                          (map_spmf ((+) x) (geometric_spmf p))\n 4. \\<And>while' x.\n       \\<lbrakk>\\<And>x.\n                   ord_spmf (=) (map_spmf snd (while' (True, x)))\n                    (map_spmf ((+) x) (geometric_spmf p));\n        \\<And>x.\n           ord_spmf (=) (map_spmf snd (while' (False, x)))\n            (return_spmf x)\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (map_spmf snd\n                            (if fst (False, x)\n                             then (case (False, x) of\n                                   (b, x) \\<Rightarrow>\n                                     map_spmf\n(\\<lambda>b'. (\\<not> b', x + (if b' then 0 else 1))) (bernoulli p)) \\<bind>\n                                  while'\n                             else return_spmf (False, x)))\n                          (return_spmf x)", "case 1"], ["proof (state)\nthis:\n  \n\ngoal (4 subgoals):\n 1. \\<And>x.\n       ord_spmf (=) (map_spmf snd (return_pmf None))\n        (map_spmf ((+) x) (geometric_spmf p))\n 2. \\<And>x. ord_spmf (=) (map_spmf snd (return_pmf None)) (return_spmf x)\n 3. \\<And>while' x.\n       \\<lbrakk>\\<And>x.\n                   ord_spmf (=) (map_spmf snd (while' (True, x)))\n                    (map_spmf ((+) x) (geometric_spmf p));\n        \\<And>x.\n           ord_spmf (=) (map_spmf snd (while' (False, x)))\n            (return_spmf x)\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (map_spmf snd\n                            (if fst (True, x)\n                             then (case (True, x) of\n                                   (b, x) \\<Rightarrow>\n                                     map_spmf\n(\\<lambda>b'. (\\<not> b', x + (if b' then 0 else 1))) (bernoulli p)) \\<bind>\n                                  while'\n                             else return_spmf (True, x)))\n                          (map_spmf ((+) x) (geometric_spmf p))\n 4. \\<And>while' x.\n       \\<lbrakk>\\<And>x.\n                   ord_spmf (=) (map_spmf snd (while' (True, x)))\n                    (map_spmf ((+) x) (geometric_spmf p));\n        \\<And>x.\n           ord_spmf (=) (map_spmf snd (while' (False, x)))\n            (return_spmf x)\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (map_spmf snd\n                            (if fst (False, x)\n                             then (case (False, x) of\n                                   (b, x) \\<Rightarrow>\n                                     map_spmf\n(\\<lambda>b'. (\\<not> b', x + (if b' then 0 else 1))) (bernoulli p)) \\<bind>\n                                  while'\n                             else return_spmf (False, x)))\n                          (return_spmf x)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. ord_spmf (=) (map_spmf snd (return_pmf None))\n     (map_spmf ((+) x) (geometric_spmf p))", "by simp"], ["proof (state)\nthis:\n  ord_spmf (=) (map_spmf snd (return_pmf None))\n   (map_spmf ((+) x) (geometric_spmf p))\n\ngoal (3 subgoals):\n 1. \\<And>x. ord_spmf (=) (map_spmf snd (return_pmf None)) (return_spmf x)\n 2. \\<And>while' x.\n       \\<lbrakk>\\<And>x.\n                   ord_spmf (=) (map_spmf snd (while' (True, x)))\n                    (map_spmf ((+) x) (geometric_spmf p));\n        \\<And>x.\n           ord_spmf (=) (map_spmf snd (while' (False, x)))\n            (return_spmf x)\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (map_spmf snd\n                            (if fst (True, x)\n                             then (case (True, x) of\n                                   (b, x) \\<Rightarrow>\n                                     map_spmf\n(\\<lambda>b'. (\\<not> b', x + (if b' then 0 else 1))) (bernoulli p)) \\<bind>\n                                  while'\n                             else return_spmf (True, x)))\n                          (map_spmf ((+) x) (geometric_spmf p))\n 3. \\<And>while' x.\n       \\<lbrakk>\\<And>x.\n                   ord_spmf (=) (map_spmf snd (while' (True, x)))\n                    (map_spmf ((+) x) (geometric_spmf p));\n        \\<And>x.\n           ord_spmf (=) (map_spmf snd (while' (False, x)))\n            (return_spmf x)\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (map_spmf snd\n                            (if fst (False, x)\n                             then (case (False, x) of\n                                   (b, x) \\<Rightarrow>\n                                     map_spmf\n(\\<lambda>b'. (\\<not> b', x + (if b' then 0 else 1))) (bernoulli p)) \\<bind>\n                                  while'\n                             else return_spmf (False, x)))\n                          (return_spmf x)", "case bottom"], ["proof (state)\nthis:\n  \n\ngoal (3 subgoals):\n 1. \\<And>x. ord_spmf (=) (map_spmf snd (return_pmf None)) (return_spmf x)\n 2. \\<And>while' x.\n       \\<lbrakk>\\<And>x.\n                   ord_spmf (=) (map_spmf snd (while' (True, x)))\n                    (map_spmf ((+) x) (geometric_spmf p));\n        \\<And>x.\n           ord_spmf (=) (map_spmf snd (while' (False, x)))\n            (return_spmf x)\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (map_spmf snd\n                            (if fst (True, x)\n                             then (case (True, x) of\n                                   (b, x) \\<Rightarrow>\n                                     map_spmf\n(\\<lambda>b'. (\\<not> b', x + (if b' then 0 else 1))) (bernoulli p)) \\<bind>\n                                  while'\n                             else return_spmf (True, x)))\n                          (map_spmf ((+) x) (geometric_spmf p))\n 3. \\<And>while' x.\n       \\<lbrakk>\\<And>x.\n                   ord_spmf (=) (map_spmf snd (while' (True, x)))\n                    (map_spmf ((+) x) (geometric_spmf p));\n        \\<And>x.\n           ord_spmf (=) (map_spmf snd (while' (False, x)))\n            (return_spmf x)\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (map_spmf snd\n                            (if fst (False, x)\n                             then (case (False, x) of\n                                   (b, x) \\<Rightarrow>\n                                     map_spmf\n(\\<lambda>b'. (\\<not> b', x + (if b' then 0 else 1))) (bernoulli p)) \\<bind>\n                                  while'\n                             else return_spmf (False, x)))\n                          (return_spmf x)", "case 2"], ["proof (state)\nthis:\n  \n\ngoal (3 subgoals):\n 1. \\<And>x. ord_spmf (=) (map_spmf snd (return_pmf None)) (return_spmf x)\n 2. \\<And>while' x.\n       \\<lbrakk>\\<And>x.\n                   ord_spmf (=) (map_spmf snd (while' (True, x)))\n                    (map_spmf ((+) x) (geometric_spmf p));\n        \\<And>x.\n           ord_spmf (=) (map_spmf snd (while' (False, x)))\n            (return_spmf x)\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (map_spmf snd\n                            (if fst (True, x)\n                             then (case (True, x) of\n                                   (b, x) \\<Rightarrow>\n                                     map_spmf\n(\\<lambda>b'. (\\<not> b', x + (if b' then 0 else 1))) (bernoulli p)) \\<bind>\n                                  while'\n                             else return_spmf (True, x)))\n                          (map_spmf ((+) x) (geometric_spmf p))\n 3. \\<And>while' x.\n       \\<lbrakk>\\<And>x.\n                   ord_spmf (=) (map_spmf snd (while' (True, x)))\n                    (map_spmf ((+) x) (geometric_spmf p));\n        \\<And>x.\n           ord_spmf (=) (map_spmf snd (while' (False, x)))\n            (return_spmf x)\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (map_spmf snd\n                            (if fst (False, x)\n                             then (case (False, x) of\n                                   (b, x) \\<Rightarrow>\n                                     map_spmf\n(\\<lambda>b'. (\\<not> b', x + (if b' then 0 else 1))) (bernoulli p)) \\<bind>\n                                  while'\n                             else return_spmf (False, x)))\n                          (return_spmf x)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. ord_spmf (=) (map_spmf snd (return_pmf None)) (return_spmf x)", "by simp"], ["proof (state)\nthis:\n  ord_spmf (=) (map_spmf snd (return_pmf None)) (return_spmf x)\n\ngoal (2 subgoals):\n 1. \\<And>while' x.\n       \\<lbrakk>\\<And>x.\n                   ord_spmf (=) (map_spmf snd (while' (True, x)))\n                    (map_spmf ((+) x) (geometric_spmf p));\n        \\<And>x.\n           ord_spmf (=) (map_spmf snd (while' (False, x)))\n            (return_spmf x)\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (map_spmf snd\n                            (if fst (True, x)\n                             then (case (True, x) of\n                                   (b, x) \\<Rightarrow>\n                                     map_spmf\n(\\<lambda>b'. (\\<not> b', x + (if b' then 0 else 1))) (bernoulli p)) \\<bind>\n                                  while'\n                             else return_spmf (True, x)))\n                          (map_spmf ((+) x) (geometric_spmf p))\n 2. \\<And>while' x.\n       \\<lbrakk>\\<And>x.\n                   ord_spmf (=) (map_spmf snd (while' (True, x)))\n                    (map_spmf ((+) x) (geometric_spmf p));\n        \\<And>x.\n           ord_spmf (=) (map_spmf snd (while' (False, x)))\n            (return_spmf x)\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (map_spmf snd\n                            (if fst (False, x)\n                             then (case (False, x) of\n                                   (b, x) \\<Rightarrow>\n                                     map_spmf\n(\\<lambda>b'. (\\<not> b', x + (if b' then 0 else 1))) (bernoulli p)) \\<bind>\n                                  while'\n                             else return_spmf (False, x)))\n                          (return_spmf x)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>while' x.\n       \\<lbrakk>\\<And>x.\n                   ord_spmf (=) (map_spmf snd (while' (True, x)))\n                    (map_spmf ((+) x) (geometric_spmf p));\n        \\<And>x.\n           ord_spmf (=) (map_spmf snd (while' (False, x)))\n            (return_spmf x)\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (map_spmf snd\n                            (if fst (True, x)\n                             then (case (True, x) of\n                                   (b, x) \\<Rightarrow>\n                                     map_spmf\n(\\<lambda>b'. (\\<not> b', x + (if b' then 0 else 1))) (bernoulli p)) \\<bind>\n                                  while'\n                             else return_spmf (True, x)))\n                          (map_spmf ((+) x) (geometric_spmf p))\n 2. \\<And>while' x.\n       \\<lbrakk>\\<And>x.\n                   ord_spmf (=) (map_spmf snd (while' (True, x)))\n                    (map_spmf ((+) x) (geometric_spmf p));\n        \\<And>x.\n           ord_spmf (=) (map_spmf snd (while' (False, x)))\n            (return_spmf x)\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (map_spmf snd\n                            (if fst (False, x)\n                             then (case (False, x) of\n                                   (b, x) \\<Rightarrow>\n                                     map_spmf\n(\\<lambda>b'. (\\<not> b', x + (if b' then 0 else 1))) (bernoulli p)) \\<bind>\n                                  while'\n                             else return_spmf (False, x)))\n                          (return_spmf x)", "case (step while')"], ["proof (state)\nthis:\n  ord_spmf (=) (map_spmf snd (while' (True, ?x)))\n   (map_spmf ((+) ?x) (geometric_spmf p))\n  ord_spmf (=) (map_spmf snd (while' (False, ?x))) (return_spmf ?x)\n\ngoal (2 subgoals):\n 1. \\<And>while' x.\n       \\<lbrakk>\\<And>x.\n                   ord_spmf (=) (map_spmf snd (while' (True, x)))\n                    (map_spmf ((+) x) (geometric_spmf p));\n        \\<And>x.\n           ord_spmf (=) (map_spmf snd (while' (False, x)))\n            (return_spmf x)\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (map_spmf snd\n                            (if fst (True, x)\n                             then (case (True, x) of\n                                   (b, x) \\<Rightarrow>\n                                     map_spmf\n(\\<lambda>b'. (\\<not> b', x + (if b' then 0 else 1))) (bernoulli p)) \\<bind>\n                                  while'\n                             else return_spmf (True, x)))\n                          (map_spmf ((+) x) (geometric_spmf p))\n 2. \\<And>while' x.\n       \\<lbrakk>\\<And>x.\n                   ord_spmf (=) (map_spmf snd (while' (True, x)))\n                    (map_spmf ((+) x) (geometric_spmf p));\n        \\<And>x.\n           ord_spmf (=) (map_spmf snd (while' (False, x)))\n            (return_spmf x)\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (map_spmf snd\n                            (if fst (False, x)\n                             then (case (False, x) of\n                                   (b, x) \\<Rightarrow>\n                                     map_spmf\n(\\<lambda>b'. (\\<not> b', x + (if b' then 0 else 1))) (bernoulli p)) \\<bind>\n                                  while'\n                             else return_spmf (False, x)))\n                          (return_spmf x)", "case 1"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<And>while' x.\n       \\<lbrakk>\\<And>x.\n                   ord_spmf (=) (map_spmf snd (while' (True, x)))\n                    (map_spmf ((+) x) (geometric_spmf p));\n        \\<And>x.\n           ord_spmf (=) (map_spmf snd (while' (False, x)))\n            (return_spmf x)\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (map_spmf snd\n                            (if fst (True, x)\n                             then (case (True, x) of\n                                   (b, x) \\<Rightarrow>\n                                     map_spmf\n(\\<lambda>b'. (\\<not> b', x + (if b' then 0 else 1))) (bernoulli p)) \\<bind>\n                                  while'\n                             else return_spmf (True, x)))\n                          (map_spmf ((+) x) (geometric_spmf p))\n 2. \\<And>while' x.\n       \\<lbrakk>\\<And>x.\n                   ord_spmf (=) (map_spmf snd (while' (True, x)))\n                    (map_spmf ((+) x) (geometric_spmf p));\n        \\<And>x.\n           ord_spmf (=) (map_spmf snd (while' (False, x)))\n            (return_spmf x)\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (map_spmf snd\n                            (if fst (False, x)\n                             then (case (False, x) of\n                                   (b, x) \\<Rightarrow>\n                                     map_spmf\n(\\<lambda>b'. (\\<not> b', x + (if b' then 0 else 1))) (bernoulli p)) \\<bind>\n                                  while'\n                             else return_spmf (False, x)))\n                          (return_spmf x)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. ord_spmf (=)\n     (map_spmf snd\n       (if fst (True, x)\n        then (case (True, x) of\n              (b, x) \\<Rightarrow>\n                map_spmf\n                 (\\<lambda>b'. (\\<not> b', x + (if b' then 0 else 1)))\n                 (bernoulli p)) \\<bind>\n             while'\n        else return_spmf (True, x)))\n     (map_spmf ((+) x) (geometric_spmf p))", "using step.IH(1)[of \"Suc x\"] step.IH(2)[of x]"], ["proof (prove)\nusing this:\n  ord_spmf (=) (map_spmf snd (while' (True, Suc x)))\n   (map_spmf ((+) (Suc x)) (geometric_spmf p))\n  ord_spmf (=) (map_spmf snd (while' (False, x))) (return_spmf x)\n\ngoal (1 subgoal):\n 1. ord_spmf (=)\n     (map_spmf snd\n       (if fst (True, x)\n        then (case (True, x) of\n              (b, x) \\<Rightarrow>\n                map_spmf\n                 (\\<lambda>b'. (\\<not> b', x + (if b' then 0 else 1)))\n                 (bernoulli p)) \\<bind>\n             while'\n        else return_spmf (True, x)))\n     (map_spmf ((+) x) (geometric_spmf p))", "by(rewrite geometric_spmf.simps)(clarsimp simp add: map_spmf_bind_spmf bind_map_spmf spmf.map_comp o_def intro!: ord_spmf_bind_reflI)"], ["proof (state)\nthis:\n  ord_spmf (=)\n   (map_spmf snd\n     (if fst (True, x)\n      then (case (True, x) of\n            (b, x) \\<Rightarrow>\n              map_spmf (\\<lambda>b'. (\\<not> b', x + (if b' then 0 else 1)))\n               (bernoulli p)) \\<bind>\n           while'\n      else return_spmf (True, x)))\n   (map_spmf ((+) x) (geometric_spmf p))\n\ngoal (1 subgoal):\n 1. \\<And>while' x.\n       \\<lbrakk>\\<And>x.\n                   ord_spmf (=) (map_spmf snd (while' (True, x)))\n                    (map_spmf ((+) x) (geometric_spmf p));\n        \\<And>x.\n           ord_spmf (=) (map_spmf snd (while' (False, x)))\n            (return_spmf x)\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (map_spmf snd\n                            (if fst (False, x)\n                             then (case (False, x) of\n                                   (b, x) \\<Rightarrow>\n                                     map_spmf\n(\\<lambda>b'. (\\<not> b', x + (if b' then 0 else 1))) (bernoulli p)) \\<bind>\n                                  while'\n                             else return_spmf (False, x)))\n                          (return_spmf x)", "case 2"], ["proof (state)\nthis:\n  \n\ngoal (1 subgoal):\n 1. \\<And>while' x.\n       \\<lbrakk>\\<And>x.\n                   ord_spmf (=) (map_spmf snd (while' (True, x)))\n                    (map_spmf ((+) x) (geometric_spmf p));\n        \\<And>x.\n           ord_spmf (=) (map_spmf snd (while' (False, x)))\n            (return_spmf x)\\<rbrakk>\n       \\<Longrightarrow> ord_spmf (=)\n                          (map_spmf snd\n                            (if fst (False, x)\n                             then (case (False, x) of\n                                   (b, x) \\<Rightarrow>\n                                     map_spmf\n(\\<lambda>b'. (\\<not> b', x + (if b' then 0 else 1))) (bernoulli p)) \\<bind>\n                                  while'\n                             else return_spmf (False, x)))\n                          (return_spmf x)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. ord_spmf (=)\n     (map_spmf snd\n       (if fst (False, x)\n        then (case (False, x) of\n              (b, x) \\<Rightarrow>\n                map_spmf\n                 (\\<lambda>b'. (\\<not> b', x + (if b' then 0 else 1)))\n                 (bernoulli p)) \\<bind>\n             while'\n        else return_spmf (False, x)))\n     (return_spmf x)", "by simp"], ["proof (state)\nthis:\n  ord_spmf (=)\n   (map_spmf snd\n     (if fst (False, x)\n      then (case (False, x) of\n            (b, x) \\<Rightarrow>\n              map_spmf (\\<lambda>b'. (\\<not> b', x + (if b' then 0 else 1)))\n               (bernoulli p)) \\<bind>\n           while'\n      else return_spmf (False, x)))\n   (return_spmf x)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ord_spmf (=) (map_spmf snd (local.while (True, x)))\n   (map_spmf ((+) x) (geometric_spmf p))\n  ord_spmf (=) (map_spmf snd (local.while (False, x))) (return_spmf x)\n\ngoal (1 subgoal):\n 1. ord_spmf (=) (map_spmf snd (local.while (True, x)))\n     (map_spmf ((+) x) (geometric_spmf p))", "then"], ["proof (chain)\npicking this:\n  ord_spmf (=) (map_spmf snd (local.while (True, x)))\n   (map_spmf ((+) x) (geometric_spmf p))\n  ord_spmf (=) (map_spmf snd (local.while (False, x))) (return_spmf x)", "show \"ord_spmf (=) ?rhs ?lhs\""], ["proof (prove)\nusing this:\n  ord_spmf (=) (map_spmf snd (local.while (True, x)))\n   (map_spmf ((+) x) (geometric_spmf p))\n  ord_spmf (=) (map_spmf snd (local.while (False, x))) (return_spmf x)\n\ngoal (1 subgoal):\n 1. ord_spmf (=) (map_spmf snd (local.while (True, x)))\n     (map_spmf ((+) x) (geometric_spmf p))", "by -"], ["proof (state)\nthis:\n  ord_spmf (=) (map_spmf snd (local.while (True, x)))\n   (map_spmf ((+) x) (geometric_spmf p))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  map_spmf ((+) ?x) (geometric_spmf p) =\n  map_spmf snd (local.while (True, ?x))\n\ngoal (1 subgoal):\n 1. geometric_spmf p = map_spmf snd (local.while (True, 0))", "from this[of 0]"], ["proof (chain)\npicking this:\n  map_spmf ((+) 0) (geometric_spmf p) = map_spmf snd (local.while (True, 0))", "show ?thesis"], ["proof (prove)\nusing this:\n  map_spmf ((+) 0) (geometric_spmf p) = map_spmf snd (local.while (True, 0))\n\ngoal (1 subgoal):\n 1. geometric_spmf p = map_spmf snd (local.while (True, 0))", "by(simp cong: map_spmf_cong)"], ["proof (state)\nthis:\n  geometric_spmf p = map_spmf snd (local.while (True, 0))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lossless_geometric [simp]: \"lossless_spmf (geometric_spmf p) \\<longleftrightarrow> p > 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lossless_spmf (geometric_spmf p) = (0 < p)", "proof(cases \"0 < p \\<and> p < 1\")"], ["proof (state)\ngoal (2 subgoals):\n 1. 0 < p \\<and> p < 1 \\<Longrightarrow>\n    lossless_spmf (geometric_spmf p) = (0 < p)\n 2. \\<not> (0 < p \\<and> p < 1) \\<Longrightarrow>\n    lossless_spmf (geometric_spmf p) = (0 < p)", "case True"], ["proof (state)\nthis:\n  0 < p \\<and> p < 1\n\ngoal (2 subgoals):\n 1. 0 < p \\<and> p < 1 \\<Longrightarrow>\n    lossless_spmf (geometric_spmf p) = (0 < p)\n 2. \\<not> (0 < p \\<and> p < 1) \\<Longrightarrow>\n    lossless_spmf (geometric_spmf p) = (0 < p)", "let ?body = \"\\<lambda>(b, x :: nat). map_spmf (\\<lambda>b'. (\\<not> b', x + (if b' then 0 else 1))) (bernoulli p)\""], ["proof (state)\ngoal (2 subgoals):\n 1. 0 < p \\<and> p < 1 \\<Longrightarrow>\n    lossless_spmf (geometric_spmf p) = (0 < p)\n 2. \\<not> (0 < p \\<and> p < 1) \\<Longrightarrow>\n    lossless_spmf (geometric_spmf p) = (0 < p)", "have \"lossless_spmf (while (True, 0))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lossless_spmf (local.while (True, 0))", "proof(rule termination_0_1_immediate)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>s.\n       fst s \\<Longrightarrow>\n       ?p \\<le> spmf\n                 (map_spmf fst\n                   (case s of\n                    (b, x) \\<Rightarrow>\n                      map_spmf\n                       (\\<lambda>b'. (\\<not> b', x + (if b' then 0 else 1)))\n                       (bernoulli p)))\n                 False\n 2. 0 < ?p\n 3. \\<And>s.\n       fst s \\<Longrightarrow>\n       lossless_spmf\n        (case s of\n         (b, x) \\<Rightarrow>\n           map_spmf (\\<lambda>b'. (\\<not> b', x + (if b' then 0 else 1)))\n            (bernoulli p))", "have \"{x. x} = {True}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {x. x} = {True}", "by auto"], ["proof (state)\nthis:\n  {x. x} = {True}\n\ngoal (3 subgoals):\n 1. \\<And>s.\n       fst s \\<Longrightarrow>\n       ?p \\<le> spmf\n                 (map_spmf fst\n                   (case s of\n                    (b, x) \\<Rightarrow>\n                      map_spmf\n                       (\\<lambda>b'. (\\<not> b', x + (if b' then 0 else 1)))\n                       (bernoulli p)))\n                 False\n 2. 0 < ?p\n 3. \\<And>s.\n       fst s \\<Longrightarrow>\n       lossless_spmf\n        (case s of\n         (b, x) \\<Rightarrow>\n           map_spmf (\\<lambda>b'. (\\<not> b', x + (if b' then 0 else 1)))\n            (bernoulli p))", "then"], ["proof (chain)\npicking this:\n  {x. x} = {True}", "show \"p \\<le> spmf (map_spmf fst (?body s)) False\" for s :: \"bool \\<times> nat\""], ["proof (prove)\nusing this:\n  {x. x} = {True}\n\ngoal (1 subgoal):\n 1. p \\<le> spmf\n             (map_spmf fst\n               (case s of\n                (b, x) \\<Rightarrow>\n                  map_spmf\n                   (\\<lambda>b'. (\\<not> b', x + (if b' then 0 else 1)))\n                   (bernoulli p)))\n             False", "using True"], ["proof (prove)\nusing this:\n  {x. x} = {True}\n  0 < p \\<and> p < 1\n\ngoal (1 subgoal):\n 1. p \\<le> spmf\n             (map_spmf fst\n               (case s of\n                (b, x) \\<Rightarrow>\n                  map_spmf\n                   (\\<lambda>b'. (\\<not> b', x + (if b' then 0 else 1)))\n                   (bernoulli p)))\n             False", "by(cases s)(simp add: spmf.map_comp o_def spmf_map vimage_def spmf_conv_measure_spmf[symmetric])"], ["proof (state)\nthis:\n  p \\<le> spmf\n           (map_spmf fst\n             (case ?s1 of\n              (b, x) \\<Rightarrow>\n                map_spmf\n                 (\\<lambda>b'. (\\<not> b', x + (if b' then 0 else 1)))\n                 (bernoulli p)))\n           False\n\ngoal (2 subgoals):\n 1. 0 < p\n 2. \\<And>s.\n       fst s \\<Longrightarrow>\n       lossless_spmf\n        (case s of\n         (b, x) \\<Rightarrow>\n           map_spmf (\\<lambda>b'. (\\<not> b', x + (if b' then 0 else 1)))\n            (bernoulli p))", "show \"0 < p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < p", "using True"], ["proof (prove)\nusing this:\n  0 < p \\<and> p < 1\n\ngoal (1 subgoal):\n 1. 0 < p", "by simp"], ["proof (state)\nthis:\n  0 < p\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       fst s \\<Longrightarrow>\n       lossless_spmf\n        (case s of\n         (b, x) \\<Rightarrow>\n           map_spmf (\\<lambda>b'. (\\<not> b', x + (if b' then 0 else 1)))\n            (bernoulli p))", "qed(clarsimp)"], ["proof (state)\nthis:\n  lossless_spmf (local.while (True, 0))\n\ngoal (2 subgoals):\n 1. 0 < p \\<and> p < 1 \\<Longrightarrow>\n    lossless_spmf (geometric_spmf p) = (0 < p)\n 2. \\<not> (0 < p \\<and> p < 1) \\<Longrightarrow>\n    lossless_spmf (geometric_spmf p) = (0 < p)", "with True"], ["proof (chain)\npicking this:\n  0 < p \\<and> p < 1\n  lossless_spmf (local.while (True, 0))", "show ?thesis"], ["proof (prove)\nusing this:\n  0 < p \\<and> p < 1\n  lossless_spmf (local.while (True, 0))\n\ngoal (1 subgoal):\n 1. lossless_spmf (geometric_spmf p) = (0 < p)", "by(simp add: geometric_spmf_conv_while)"], ["proof (state)\nthis:\n  lossless_spmf (geometric_spmf p) = (0 < p)\n\ngoal (1 subgoal):\n 1. \\<not> (0 < p \\<and> p < 1) \\<Longrightarrow>\n    lossless_spmf (geometric_spmf p) = (0 < p)", "qed(auto simp add: spmf_geometric_nonpos spmf_geometric_ge_1)"], ["", "end"], ["", "lemma spmf_geometric:\n  assumes p: \"0 < p\" \"p < 1\"\n  shows \"spmf (geometric_spmf p) n = (1 - p) ^ n * p\" (is \"?lhs n = ?rhs n\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. spmf (geometric_spmf p) n = (1 - p) ^ n * p", "proof(rule spmf_ub_tight)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x. spmf (geometric_spmf p) x \\<le> (1 - p) ^ x * p\n 2. (\\<Sum>\\<^sup>+ x. ennreal ((1 - p) ^ x * p)) =\n    ennreal (weight_spmf (geometric_spmf p))", "fix n"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x. spmf (geometric_spmf p) x \\<le> (1 - p) ^ x * p\n 2. (\\<Sum>\\<^sup>+ x. ennreal ((1 - p) ^ x * p)) =\n    ennreal (weight_spmf (geometric_spmf p))", "have \"ennreal (?lhs n) \\<le> ennreal (?rhs n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ennreal (spmf (geometric_spmf p) n) \\<le> ennreal ((1 - p) ^ n * p)", "using p"], ["proof (prove)\nusing this:\n  0 < p\n  p < 1\n\ngoal (1 subgoal):\n 1. ennreal (spmf (geometric_spmf p) n) \\<le> ennreal ((1 - p) ^ n * p)", "proof(induction arbitrary: n rule: geometric_spmf_fixp_induct)"], ["proof (state)\ngoal (3 subgoals):\n 1. spmf.admissible\n     (\\<lambda>a.\n         0 < p \\<longrightarrow>\n         p < 1 \\<longrightarrow>\n         (\\<forall>x.\n             ennreal (spmf (a p) x) \\<le> ennreal ((1 - p) ^ x * p)))\n 2. \\<And>n.\n       \\<lbrakk>0 < p; p < 1\\<rbrakk>\n       \\<Longrightarrow> ennreal (spmf (return_pmf None) n)\n                         \\<le> ennreal ((1 - p) ^ n * p)\n 3. \\<And>geometric_spmf' n.\n       \\<lbrakk>\\<And>n.\n                   \\<lbrakk>0 < p; p < 1\\<rbrakk>\n                   \\<Longrightarrow> ennreal (spmf (geometric_spmf' p) n)\n                                     \\<le> ennreal ((1 - p) ^ n * p);\n        0 < p; p < 1\\<rbrakk>\n       \\<Longrightarrow> ennreal\n                          (spmf\n                            (bernoulli p \\<bind>\n                             (\\<lambda>b.\n                                 if b then return_spmf 0\n                                 else map_spmf ((+) 1) (geometric_spmf' p)))\n                            n)\n                         \\<le> ennreal ((1 - p) ^ n * p)", "case adm"], ["proof (state)\nthis:\n  \n\ngoal (3 subgoals):\n 1. spmf.admissible\n     (\\<lambda>a.\n         0 < p \\<longrightarrow>\n         p < 1 \\<longrightarrow>\n         (\\<forall>x.\n             ennreal (spmf (a p) x) \\<le> ennreal ((1 - p) ^ x * p)))\n 2. \\<And>n.\n       \\<lbrakk>0 < p; p < 1\\<rbrakk>\n       \\<Longrightarrow> ennreal (spmf (return_pmf None) n)\n                         \\<le> ennreal ((1 - p) ^ n * p)\n 3. \\<And>geometric_spmf' n.\n       \\<lbrakk>\\<And>n.\n                   \\<lbrakk>0 < p; p < 1\\<rbrakk>\n                   \\<Longrightarrow> ennreal (spmf (geometric_spmf' p) n)\n                                     \\<le> ennreal ((1 - p) ^ n * p);\n        0 < p; p < 1\\<rbrakk>\n       \\<Longrightarrow> ennreal\n                          (spmf\n                            (bernoulli p \\<bind>\n                             (\\<lambda>b.\n                                 if b then return_spmf 0\n                                 else map_spmf ((+) 1) (geometric_spmf' p)))\n                            n)\n                         \\<le> ennreal ((1 - p) ^ n * p)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. spmf.admissible\n     (\\<lambda>a.\n         0 < p \\<longrightarrow>\n         p < 1 \\<longrightarrow>\n         (\\<forall>x.\n             ennreal (spmf (a p) x) \\<le> ennreal ((1 - p) ^ x * p)))", "by(rule cont_intro)+"], ["proof (state)\nthis:\n  spmf.admissible\n   (\\<lambda>a.\n       0 < p \\<longrightarrow>\n       p < 1 \\<longrightarrow>\n       (\\<forall>x. ennreal (spmf (a p) x) \\<le> ennreal ((1 - p) ^ x * p)))\n\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>0 < p; p < 1\\<rbrakk>\n       \\<Longrightarrow> ennreal (spmf (return_pmf None) n)\n                         \\<le> ennreal ((1 - p) ^ n * p)\n 2. \\<And>geometric_spmf' n.\n       \\<lbrakk>\\<And>n.\n                   \\<lbrakk>0 < p; p < 1\\<rbrakk>\n                   \\<Longrightarrow> ennreal (spmf (geometric_spmf' p) n)\n                                     \\<le> ennreal ((1 - p) ^ n * p);\n        0 < p; p < 1\\<rbrakk>\n       \\<Longrightarrow> ennreal\n                          (spmf\n                            (bernoulli p \\<bind>\n                             (\\<lambda>b.\n                                 if b then return_spmf 0\n                                 else map_spmf ((+) 1) (geometric_spmf' p)))\n                            n)\n                         \\<le> ennreal ((1 - p) ^ n * p)", "case bottom"], ["proof (state)\nthis:\n  0 < p\n  p < 1\n\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>0 < p; p < 1\\<rbrakk>\n       \\<Longrightarrow> ennreal (spmf (return_pmf None) n)\n                         \\<le> ennreal ((1 - p) ^ n * p)\n 2. \\<And>geometric_spmf' n.\n       \\<lbrakk>\\<And>n.\n                   \\<lbrakk>0 < p; p < 1\\<rbrakk>\n                   \\<Longrightarrow> ennreal (spmf (geometric_spmf' p) n)\n                                     \\<le> ennreal ((1 - p) ^ n * p);\n        0 < p; p < 1\\<rbrakk>\n       \\<Longrightarrow> ennreal\n                          (spmf\n                            (bernoulli p \\<bind>\n                             (\\<lambda>b.\n                                 if b then return_spmf 0\n                                 else map_spmf ((+) 1) (geometric_spmf' p)))\n                            n)\n                         \\<le> ennreal ((1 - p) ^ n * p)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. ennreal (spmf (return_pmf None) n) \\<le> ennreal ((1 - p) ^ n * p)", "by simp"], ["proof (state)\nthis:\n  ennreal (spmf (return_pmf None) n) \\<le> ennreal ((1 - p) ^ n * p)\n\ngoal (1 subgoal):\n 1. \\<And>geometric_spmf' n.\n       \\<lbrakk>\\<And>n.\n                   \\<lbrakk>0 < p; p < 1\\<rbrakk>\n                   \\<Longrightarrow> ennreal (spmf (geometric_spmf' p) n)\n                                     \\<le> ennreal ((1 - p) ^ n * p);\n        0 < p; p < 1\\<rbrakk>\n       \\<Longrightarrow> ennreal\n                          (spmf\n                            (bernoulli p \\<bind>\n                             (\\<lambda>b.\n                                 if b then return_spmf 0\n                                 else map_spmf ((+) 1) (geometric_spmf' p)))\n                            n)\n                         \\<le> ennreal ((1 - p) ^ n * p)", "case (step geometric_spmf')"], ["proof (state)\nthis:\n  \\<lbrakk>0 < p; p < 1\\<rbrakk>\n  \\<Longrightarrow> ennreal (spmf (geometric_spmf' p) ?n)\n                    \\<le> ennreal ((1 - p) ^ ?n * p)\n  0 < p\n  p < 1\n\ngoal (1 subgoal):\n 1. \\<And>geometric_spmf' n.\n       \\<lbrakk>\\<And>n.\n                   \\<lbrakk>0 < p; p < 1\\<rbrakk>\n                   \\<Longrightarrow> ennreal (spmf (geometric_spmf' p) n)\n                                     \\<le> ennreal ((1 - p) ^ n * p);\n        0 < p; p < 1\\<rbrakk>\n       \\<Longrightarrow> ennreal\n                          (spmf\n                            (bernoulli p \\<bind>\n                             (\\<lambda>b.\n                                 if b then return_spmf 0\n                                 else map_spmf ((+) 1) (geometric_spmf' p)))\n                            n)\n                         \\<le> ennreal ((1 - p) ^ n * p)", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>0 < p; p < 1\\<rbrakk>\n  \\<Longrightarrow> ennreal (spmf (geometric_spmf' p) ?n)\n                    \\<le> ennreal ((1 - p) ^ ?n * p)\n  0 < p\n  p < 1", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>0 < p; p < 1\\<rbrakk>\n  \\<Longrightarrow> ennreal (spmf (geometric_spmf' p) ?n)\n                    \\<le> ennreal ((1 - p) ^ ?n * p)\n  0 < p\n  p < 1\n\ngoal (1 subgoal):\n 1. ennreal\n     (spmf\n       (bernoulli p \\<bind>\n        (\\<lambda>b.\n            if b then return_spmf 0\n            else map_spmf ((+) 1) (geometric_spmf' p)))\n       n)\n    \\<le> ennreal ((1 - p) ^ n * p)", "by(cases n)(simp_all add: ennreal_spmf_bind nn_integral_measure_spmf UNIV_bool nn_integral_count_space_finite ennreal_mult spmf_map vimage_def mult.assoc spmf_conv_measure_spmf[symmetric] mult_mono split: split_indicator)"], ["proof (state)\nthis:\n  ennreal\n   (spmf\n     (bernoulli p \\<bind>\n      (\\<lambda>b.\n          if b then return_spmf 0\n          else map_spmf ((+) 1) (geometric_spmf' p)))\n     n)\n  \\<le> ennreal ((1 - p) ^ n * p)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ennreal (spmf (geometric_spmf p) n) \\<le> ennreal ((1 - p) ^ n * p)\n\ngoal (2 subgoals):\n 1. \\<And>x. spmf (geometric_spmf p) x \\<le> (1 - p) ^ x * p\n 2. (\\<Sum>\\<^sup>+ x. ennreal ((1 - p) ^ x * p)) =\n    ennreal (weight_spmf (geometric_spmf p))", "then"], ["proof (chain)\npicking this:\n  ennreal (spmf (geometric_spmf p) n) \\<le> ennreal ((1 - p) ^ n * p)", "show \"?lhs n \\<le> ?rhs n\""], ["proof (prove)\nusing this:\n  ennreal (spmf (geometric_spmf p) n) \\<le> ennreal ((1 - p) ^ n * p)\n\ngoal (1 subgoal):\n 1. spmf (geometric_spmf p) n \\<le> (1 - p) ^ n * p", "using p"], ["proof (prove)\nusing this:\n  ennreal (spmf (geometric_spmf p) n) \\<le> ennreal ((1 - p) ^ n * p)\n  0 < p\n  p < 1\n\ngoal (1 subgoal):\n 1. spmf (geometric_spmf p) n \\<le> (1 - p) ^ n * p", "by(simp)"], ["proof (state)\nthis:\n  spmf (geometric_spmf p) n \\<le> (1 - p) ^ n * p\n\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^sup>+ x. ennreal ((1 - p) ^ x * p)) =\n    ennreal (weight_spmf (geometric_spmf p))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^sup>+ x. ennreal ((1 - p) ^ x * p)) =\n    ennreal (weight_spmf (geometric_spmf p))", "have \"(\\<Sum>i. ennreal (p * (1 - p) ^ i)) = ennreal (p * (1 / (1 - (1 - p))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i. ennreal (p * (1 - p) ^ i)) = ennreal (p * (1 / (1 - (1 - p))))", "using p"], ["proof (prove)\nusing this:\n  0 < p\n  p < 1\n\ngoal (1 subgoal):\n 1. (\\<Sum>i. ennreal (p * (1 - p) ^ i)) = ennreal (p * (1 / (1 - (1 - p))))", "by (intro suminf_ennreal_eq sums_mult geometric_sums) auto"], ["proof (state)\nthis:\n  (\\<Sum>i. ennreal (p * (1 - p) ^ i)) = ennreal (p * (1 / (1 - (1 - p))))\n\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^sup>+ x. ennreal ((1 - p) ^ x * p)) =\n    ennreal (weight_spmf (geometric_spmf p))", "then"], ["proof (chain)\npicking this:\n  (\\<Sum>i. ennreal (p * (1 - p) ^ i)) = ennreal (p * (1 / (1 - (1 - p))))", "show \"(\\<Sum>\\<^sup>+ x. ennreal ((1 - p) ^ x * p)) = weight_spmf (geometric_spmf p)\""], ["proof (prove)\nusing this:\n  (\\<Sum>i. ennreal (p * (1 - p) ^ i)) = ennreal (p * (1 / (1 - (1 - p))))\n\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^sup>+ x. ennreal ((1 - p) ^ x * p)) =\n    ennreal (weight_spmf (geometric_spmf p))", "using lossless_geometric[of p] p"], ["proof (prove)\nusing this:\n  (\\<Sum>i. ennreal (p * (1 - p) ^ i)) = ennreal (p * (1 / (1 - (1 - p))))\n  lossless_spmf (geometric_spmf p) = (0 < p)\n  0 < p\n  p < 1\n\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^sup>+ x. ennreal ((1 - p) ^ x * p)) =\n    ennreal (weight_spmf (geometric_spmf p))", "unfolding lossless_spmf_def"], ["proof (prove)\nusing this:\n  (\\<Sum>i. ennreal (p * (1 - p) ^ i)) = ennreal (p * (1 / (1 - (1 - p))))\n  (weight_spmf (geometric_spmf p) = 1) = (0 < p)\n  0 < p\n  p < 1\n\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^sup>+ x. ennreal ((1 - p) ^ x * p)) =\n    ennreal (weight_spmf (geometric_spmf p))", "by (simp add: nn_integral_count_space_nat field_simps)"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sup>+ x. ennreal ((1 - p) ^ x * p)) =\n  ennreal (weight_spmf (geometric_spmf p))\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}