{"file_name": "/home/qj213/afp-2021-10-22/thys/Noninterference_Sequential_Composition/SequentialComposition.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Noninterference_Sequential_Composition", "problem_names": ["lemma seq_implies_weakly_seq:\n \"sequential P \\<Longrightarrow> weakly_sequential P\"", "lemma weakly_seq_sentences_none:\n  assumes\n    WS: \"weakly_sequential P\" and\n    A: \"xs \\<in> sentences P\"\n  shows \"None \\<notin> set xs\"", "lemma seq_sentences_none:\n  assumes\n    S: \"sequential P\" and\n    A: \"xs \\<in> sentences P\" and\n    B: \"xs @ y # ys \\<in> traces P\"\n  shows \"y = None\"", "lemma seq_sentences_ref:\n  assumes\n    A: \"ref_union_closed P\" and\n    B: \"sequential P\" and\n    C: \"xs \\<in> sentences P\"\n  shows \"(xs, {x. x \\<noteq> None}) \\<in> failures P\"\n    (is \"(_, ?X) \\<in> _\")", "lemma seq_comp_prop_1:\n \"([], {}) \\<in> seq_comp_failures P Q\"", "lemma seq_comp_prop_2_aux [rule_format]:\n  assumes WS: \"weakly_sequential P\"\n  shows \"(ws, X) \\<in> seq_comp_failures P Q \\<Longrightarrow>\n    ws = xs @ [x] \\<longrightarrow> (xs, {}) \\<in> seq_comp_failures P Q\"", "lemma seq_comp_prop_2:\n  assumes WS: \"weakly_sequential P\"\n  shows \"(xs @ [x], X) \\<in> seq_comp_failures P Q \\<Longrightarrow>\n    (xs, {}) \\<in> seq_comp_failures P Q\"", "lemma seq_comp_prop_3 [rule_format]:\n \"(xs, Y) \\<in> seq_comp_failures P Q \\<Longrightarrow> X \\<subseteq> Y \\<longrightarrow>\n    (xs, X) \\<in> seq_comp_failures P Q\"", "lemma seq_comp_prop_4:\n  assumes WS: \"weakly_sequential P\"\n  shows \"(xs, X) \\<in> seq_comp_failures P Q \\<Longrightarrow>\n    (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n    (xs, insert x X) \\<in> seq_comp_failures P Q\"", "lemma seq_comp_rep:\n  assumes WS: \"weakly_sequential P\"\n  shows \"Rep_process (P ; Q) = (seq_comp_failures P Q, {})\"", "lemma seq_comp_failures:\n \"weakly_sequential P \\<Longrightarrow>\n    failures (P ; Q) = seq_comp_failures P Q\"", "lemma seq_comp_divergences:\n \"weakly_sequential P \\<Longrightarrow>\n    divergences (P ; Q) = {}\"", "lemma seq_comp_futures:\n \"weakly_sequential P \\<Longrightarrow>\n    futures (P ; Q) xs = {(ys, Y). (xs @ ys, Y) \\<in> seq_comp_failures P Q}\"", "lemma seq_comp_traces:\n \"weakly_sequential P \\<Longrightarrow>\n    traces (P ; Q) = Domain (seq_comp_failures P Q)\"", "lemma seq_comp_refusals:\n \"weakly_sequential P \\<Longrightarrow>\n    refusals (P ; Q) xs \\<equiv> seq_comp_failures P Q `` {xs}\"", "lemma seq_comp_next_events:\n \"weakly_sequential P \\<Longrightarrow>\n    next_events (P ; Q) xs = {x. xs @ [x] \\<in> Domain (seq_comp_failures P Q)}\"", "lemma seq_comp_refusals_1:\n \"(xs, X) \\<in> seq_comp_failures P Q \\<Longrightarrow> \\<exists>R.\n    X = (\\<Union>n \\<in> {..length xs}. \\<Union>W \\<in> R n. W) \\<and>\n    (\\<forall>W \\<in> R 0.\n      xs \\<notin> sentences P \\<and> None \\<notin> set xs \\<and> (xs, W) \\<in> failures P \\<or>\n      xs \\<in> sentences P \\<and> (\\<exists>U V. (xs, U) \\<in> failures P \\<and> ([], V) \\<in> failures Q \\<and>\n        W = insert None U \\<inter> V)) \\<and>\n    (\\<forall>n \\<in> {0<..length xs}. \\<forall>W \\<in> R n.\n      take (length xs - n) xs \\<in> sentences P \\<and>\n      (drop (length xs - n) xs, W) \\<in> failures Q) \\<and>\n    (\\<exists>n \\<in> {..length xs}. \\<exists>W. W \\<in> R n)\"\n  (is \"_ \\<Longrightarrow> \\<exists>R. ?T R xs X\")", "lemma seq_comp_refusals_finite [rule_format]:\n  assumes A: \"xs \\<in> Domain (seq_comp_failures P Q)\"\n  shows \"finite A \\<Longrightarrow> (\\<forall>x \\<in> A. (xs, F x) \\<in> seq_comp_failures P Q) \\<longrightarrow>\n    (xs, \\<Union>x \\<in> A. F x) \\<in> seq_comp_failures P Q\"", "lemma seq_comp_refusals_2:\n  assumes\n    A: \"ref_union_closed P\" and\n    B: \"ref_union_closed Q\" and\n    C: \"xs \\<in> Domain (seq_comp_failures P Q)\" and\n    D: \"X = (\\<Union>n \\<in> {..length xs}. \\<Union>W \\<in> R n. W) \\<and>\n      (\\<forall>W \\<in> R 0.\n        xs \\<notin> sentences P \\<and> None \\<notin> set xs \\<and> (xs, W) \\<in> failures P \\<or>\n        xs \\<in> sentences P \\<and> (\\<exists>U V. (xs, U) \\<in> failures P \\<and> ([], V) \\<in> failures Q \\<and>\n          W = insert None U \\<inter> V)) \\<and>\n      (\\<forall>n \\<in> {0<..length xs}. \\<forall>W \\<in> R n.\n        take (length xs - n) xs \\<in> sentences P \\<and>\n        (drop (length xs - n) xs, W) \\<in> failures Q)\"\n  shows \"(xs, X) \\<in> seq_comp_failures P Q\"", "lemma seq_comp_ref_union_closed:\n  assumes\n    WS: \"weakly_sequential P\" and\n    A: \"ref_union_closed P\" and\n    B: \"ref_union_closed Q\"\n  shows \"ref_union_closed (P ; Q)\"", "lemma seq_comp_weakly_sequential:\n  assumes\n    A: \"weakly_sequential P\" and\n    B: \"weakly_sequential Q\"\n  shows \"weakly_sequential (P ; Q)\"", "lemma seq_comp_sequential:\n  assumes\n    A: \"sequential P\" and\n    B: \"sequential Q\"\n  shows \"sequential (P ; Q)\"", "lemma seq_comp_secure_aux_1_case_1:\n  assumes\n    A: \"secure_termination I D\" and\n    B: \"sequential P\" and\n    C: \"secure P I D\" and\n    D: \"xs @ y # ys \\<notin> sentences P\" and\n    E: \"(xs @ y # ys, X) \\<in> failures P\" and\n    F: \"None \\<noteq> y\" and\n    G: \"None \\<notin> set xs\" and\n    H: \"None \\<notin> set ys\"\n  shows \"(xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys X)\n    \\<in> seq_comp_failures P Q\"", "lemma seq_comp_secure_aux_1_case_2:\n  assumes\n    A: \"secure_termination I D\" and\n    B: \"sequential P\" and\n    C: \"secure P I D\" and\n    D: \"secure Q I D\" and\n    E: \"xs @ y # ys \\<in> sentences P\" and\n    F: \"(xs @ y # ys, X) \\<in> failures P\" and\n    G: \"([], Y) \\<in> failures Q\"\n  shows \"(xs @ ipurge_tr I D (D y) ys,\n    ipurge_ref I D (D y) ys (insert None X \\<inter> Y)) \\<in> seq_comp_failures P Q\"", "lemma seq_comp_secure_aux_1_case_3:\n  assumes\n    A: \"secure_termination I D\" and\n    B: \"ref_union_closed Q\" and\n    C: \"sequential Q\" and\n    D: \"secure Q I D\" and\n    E: \"secure R I D\" and\n    F: \"ws \\<in> sentences Q\" and\n    G: \"(ys', Y) \\<in> failures R\" and\n    H: \"ws @ ys' = xs @ y # ys\"\n  shows \"(xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys Y)\n    \\<in> seq_comp_failures Q R\"", "lemma seq_comp_secure_aux_1 [rule_format]:\n  assumes\n    A: \"secure_termination I D\" and\n    B: \"ref_union_closed P\" and\n    C: \"sequential P\" and\n    D: \"secure P I D\" and\n    E: \"secure Q I D\"\n  shows \"(ws, Y) \\<in> seq_comp_failures P Q \\<Longrightarrow>\n    ws = xs @ y # ys \\<longrightarrow>\n    (xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys Y)\n      \\<in> seq_comp_failures P Q\"", "lemma seq_comp_secure_1:\n  assumes\n    A: \"secure_termination I D\" and\n    B: \"ref_union_closed P\" and\n    C: \"sequential P\" and\n    D: \"secure P I D\" and\n    E: \"secure Q I D\"\n  shows \"(xs @ y # ys, Y) \\<in> seq_comp_failures P Q \\<Longrightarrow>\n    (xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys Y)\n      \\<in> seq_comp_failures P Q\"", "lemma seq_comp_secure_aux_2_case_1:\n  assumes\n    A: \"secure_termination I D\" and\n    B: \"sequential P\" and\n    C: \"secure P I D\" and\n    D: \"xs @ zs \\<notin> sentences P\" and\n    E: \"(xs @ zs, X) \\<in> failures P\" and\n    F: \"None \\<notin> set xs\" and\n    G: \"None \\<notin> set zs\" and\n    H: \"(xs @ [y], {}) \\<in> seq_comp_failures P Q\"\n  shows \"(xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs X)\n    \\<in> seq_comp_failures P Q\"", "lemma seq_comp_secure_aux_2_case_2:\n  assumes\n    A: \"secure_termination I D\" and\n    B: \"sequential P\" and\n    C: \"secure P I D\" and\n    D: \"secure Q I D\" and\n    E: \"xs @ zs \\<in> sentences P\" and\n    F: \"(xs @ zs, X) \\<in> failures P\" and\n    G: \"([], Y) \\<in> failures Q\" and\n    H: \"(xs @ [y], {}) \\<in> seq_comp_failures P Q\"\n  shows \"(xs @ y # ipurge_tr I D (D y) zs,\n    ipurge_ref I D (D y) zs (insert None X \\<inter> Y)) \\<in> seq_comp_failures P Q\"", "lemma seq_comp_secure_aux_2_case_3:\n  assumes\n    A: \"secure_termination I D\" and\n    B: \"ref_union_closed P\" and\n    C: \"sequential P\" and\n    D: \"secure P I D\" and\n    E: \"secure Q I D\" and\n    F: \"ws \\<in> sentences P\" and\n    G: \"(ys, Y) \\<in> failures Q\" and\n    H: \"ys \\<noteq> []\" and\n    I: \"ws @ ys = xs @ zs\" and\n    J: \"(xs @ [y], {}) \\<in> seq_comp_failures P Q\"\n  shows \"(xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs Y)\n    \\<in> seq_comp_failures P Q\"", "lemma seq_comp_secure_aux_2 [rule_format]:\n  assumes\n    A: \"secure_termination I D\" and\n    B: \"ref_union_closed P\" and\n    C: \"sequential P\" and\n    D: \"secure P I D\" and\n    E: \"secure Q I D\"\n  shows \"(ws, Z) \\<in> seq_comp_failures P Q \\<Longrightarrow>\n    ws = xs @ zs \\<longrightarrow>\n    (xs @ [y], {}) \\<in> seq_comp_failures P Q \\<longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs Z)\n      \\<in> seq_comp_failures P Q\"", "lemma seq_comp_secure_2:\n  assumes\n    A: \"secure_termination I D\" and\n    B: \"ref_union_closed P\" and\n    C: \"sequential P\" and\n    D: \"secure P I D\" and\n    E: \"secure Q I D\"\n  shows \"(xs @ zs, Z) \\<in> seq_comp_failures P Q \\<Longrightarrow>\n    (xs @ [y], {}) \\<in> seq_comp_failures P Q \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs Z)\n      \\<in> seq_comp_failures P Q\"", "theorem seq_comp_secure:\n  assumes\n    A: \"secure_termination I D\" and\n    B: \"ref_union_closed P\" and\n    C: \"sequential P\" and\n    D: \"secure P I D\" and\n    E: \"secure Q I D\"\n  shows \"secure (P ; Q) I D\"", "lemma seq_comp_list_weakly_sequential [rule_format]:\n \"(\\<forall>X \\<in> set (P # PS). weakly_sequential X) \\<longrightarrow>\n    weakly_sequential (foldl (;) P PS)\"", "lemma seq_comp_list_ref_union_closed [rule_format]:\n \"(\\<forall>X \\<in> set (butlast (P # PS)). weakly_sequential X) \\<longrightarrow>\n  (\\<forall>X \\<in> set (P # PS). ref_union_closed X) \\<longrightarrow>\n    ref_union_closed (foldl (;) P PS)\"", "lemma seq_comp_list_sequential [rule_format]:\n \"(\\<forall>X \\<in> set (P # PS). sequential X) \\<longrightarrow>\n    sequential (foldl (;) P PS)\"", "theorem seq_comp_list_secure [rule_format]:\n  assumes A: \"secure_termination I D\"\n  shows\n   \"(\\<forall>X \\<in> set (butlast (P # PS)). ref_union_closed X \\<and> sequential X) \\<longrightarrow>\n    (\\<forall>X \\<in> set (P # PS). secure X I D) \\<longrightarrow>\n      secure (foldl (;) P PS) I D\""], "translations": [["", "lemma seq_implies_weakly_seq:\n \"sequential P \\<Longrightarrow> weakly_sequential P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sequential P \\<Longrightarrow> weakly_sequential P", "by (simp add: weakly_sequential_def sequential_def)"], ["", "lemma weakly_seq_sentences_none:\n  assumes\n    WS: \"weakly_sequential P\" and\n    A: \"xs \\<in> sentences P\"\n  shows \"None \\<notin> set xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. None \\<notin> set xs", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. None \\<notin> set xs", "have \"\\<forall>xs \\<in> traces P. None \\<notin> set (butlast xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>xs\\<in>traces P. None \\<notin> set (butlast xs)", "using WS"], ["proof (prove)\nusing this:\n  weakly_sequential P\n\ngoal (1 subgoal):\n 1. \\<forall>xs\\<in>traces P. None \\<notin> set (butlast xs)", "by (simp add: weakly_sequential_def)"], ["proof (state)\nthis:\n  \\<forall>xs\\<in>traces P. None \\<notin> set (butlast xs)\n\ngoal (1 subgoal):\n 1. None \\<notin> set xs", "moreover"], ["proof (state)\nthis:\n  \\<forall>xs\\<in>traces P. None \\<notin> set (butlast xs)\n\ngoal (1 subgoal):\n 1. None \\<notin> set xs", "have \"xs @ [None] \\<in> traces P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs @ [None] \\<in> traces P", "using A"], ["proof (prove)\nusing this:\n  xs \\<in> sentences P\n\ngoal (1 subgoal):\n 1. xs @ [None] \\<in> traces P", "by (simp add: sentences_def)"], ["proof (state)\nthis:\n  xs @ [None] \\<in> traces P\n\ngoal (1 subgoal):\n 1. None \\<notin> set xs", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>xs\\<in>traces P. None \\<notin> set (butlast xs)\n  xs @ [None] \\<in> traces P", "have \"None \\<notin> set (butlast (xs @ [None]))\""], ["proof (prove)\nusing this:\n  \\<forall>xs\\<in>traces P. None \\<notin> set (butlast xs)\n  xs @ [None] \\<in> traces P\n\ngoal (1 subgoal):\n 1. None \\<notin> set (butlast (xs @ [None]))", ".."], ["proof (state)\nthis:\n  None \\<notin> set (butlast (xs @ [None]))\n\ngoal (1 subgoal):\n 1. None \\<notin> set xs", "thus ?thesis"], ["proof (prove)\nusing this:\n  None \\<notin> set (butlast (xs @ [None]))\n\ngoal (1 subgoal):\n 1. None \\<notin> set xs", "by simp"], ["proof (state)\nthis:\n  None \\<notin> set xs\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma seq_sentences_none:\n  assumes\n    S: \"sequential P\" and\n    A: \"xs \\<in> sentences P\" and\n    B: \"xs @ y # ys \\<in> traces P\"\n  shows \"y = None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y = None", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. y = None", "have \"\\<forall>xs \\<in> sentences P. next_events P xs = {None}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>xs\\<in>sentences P. next_events P xs = {None}", "using S"], ["proof (prove)\nusing this:\n  sequential P\n\ngoal (1 subgoal):\n 1. \\<forall>xs\\<in>sentences P. next_events P xs = {None}", "by (simp add: sequential_def)"], ["proof (state)\nthis:\n  \\<forall>xs\\<in>sentences P. next_events P xs = {None}\n\ngoal (1 subgoal):\n 1. y = None", "hence \"next_events P xs = {None}\""], ["proof (prove)\nusing this:\n  \\<forall>xs\\<in>sentences P. next_events P xs = {None}\n\ngoal (1 subgoal):\n 1. next_events P xs = {None}", "using A"], ["proof (prove)\nusing this:\n  \\<forall>xs\\<in>sentences P. next_events P xs = {None}\n  xs \\<in> sentences P\n\ngoal (1 subgoal):\n 1. next_events P xs = {None}", ".."], ["proof (state)\nthis:\n  next_events P xs = {None}\n\ngoal (1 subgoal):\n 1. y = None", "moreover"], ["proof (state)\nthis:\n  next_events P xs = {None}\n\ngoal (1 subgoal):\n 1. y = None", "have \"(xs @ [y]) @ ys \\<in> traces P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (xs @ [y]) @ ys \\<in> traces P", "using B"], ["proof (prove)\nusing this:\n  xs @ y # ys \\<in> traces P\n\ngoal (1 subgoal):\n 1. (xs @ [y]) @ ys \\<in> traces P", "by simp"], ["proof (state)\nthis:\n  (xs @ [y]) @ ys \\<in> traces P\n\ngoal (1 subgoal):\n 1. y = None", "hence \"xs @ [y] \\<in> traces P\""], ["proof (prove)\nusing this:\n  (xs @ [y]) @ ys \\<in> traces P\n\ngoal (1 subgoal):\n 1. xs @ [y] \\<in> traces P", "by (rule process_rule_2_traces)"], ["proof (state)\nthis:\n  xs @ [y] \\<in> traces P\n\ngoal (1 subgoal):\n 1. y = None", "hence \"y \\<in> next_events P xs\""], ["proof (prove)\nusing this:\n  xs @ [y] \\<in> traces P\n\ngoal (1 subgoal):\n 1. y \\<in> next_events P xs", "by (simp add: next_events_def)"], ["proof (state)\nthis:\n  y \\<in> next_events P xs\n\ngoal (1 subgoal):\n 1. y = None", "ultimately"], ["proof (chain)\npicking this:\n  next_events P xs = {None}\n  y \\<in> next_events P xs", "show ?thesis"], ["proof (prove)\nusing this:\n  next_events P xs = {None}\n  y \\<in> next_events P xs\n\ngoal (1 subgoal):\n 1. y = None", "by simp"], ["proof (state)\nthis:\n  y = None\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma seq_sentences_ref:\n  assumes\n    A: \"ref_union_closed P\" and\n    B: \"sequential P\" and\n    C: \"xs \\<in> sentences P\"\n  shows \"(xs, {x. x \\<noteq> None}) \\<in> failures P\"\n    (is \"(_, ?X) \\<in> _\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (xs, {x. x \\<noteq> None}) \\<in> failures P", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (xs, {x. x \\<noteq> None}) \\<in> failures P", "have \"(\\<exists>X. X \\<in> singleton_set ?X) \\<longrightarrow>\n    (\\<forall>X \\<in> singleton_set ?X. (xs, X) \\<in> failures P) \\<longrightarrow>\n    (xs, \\<Union>X \\<in> singleton_set ?X. X) \\<in> failures P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>X.\n        X \\<in> singleton_set {x. x \\<noteq> None}) \\<longrightarrow>\n    (\\<forall>X\\<in>singleton_set {x. x \\<noteq> None}.\n        (xs, X) \\<in> failures P) \\<longrightarrow>\n    (xs, \\<Union>X\\<in>singleton_set {x. x \\<noteq> None}. X)\n    \\<in> failures P", "using A"], ["proof (prove)\nusing this:\n  ref_union_closed P\n\ngoal (1 subgoal):\n 1. (\\<exists>X.\n        X \\<in> singleton_set {x. x \\<noteq> None}) \\<longrightarrow>\n    (\\<forall>X\\<in>singleton_set {x. x \\<noteq> None}.\n        (xs, X) \\<in> failures P) \\<longrightarrow>\n    (xs, \\<Union>X\\<in>singleton_set {x. x \\<noteq> None}. X)\n    \\<in> failures P", "by (simp add: ref_union_closed_def)"], ["proof (state)\nthis:\n  (\\<exists>X. X \\<in> singleton_set {x. x \\<noteq> None}) \\<longrightarrow>\n  (\\<forall>X\\<in>singleton_set {x. x \\<noteq> None}.\n      (xs, X) \\<in> failures P) \\<longrightarrow>\n  (xs, \\<Union>X\\<in>singleton_set {x. x \\<noteq> None}. X) \\<in> failures P\n\ngoal (1 subgoal):\n 1. (xs, {x. x \\<noteq> None}) \\<in> failures P", "moreover"], ["proof (state)\nthis:\n  (\\<exists>X. X \\<in> singleton_set {x. x \\<noteq> None}) \\<longrightarrow>\n  (\\<forall>X\\<in>singleton_set {x. x \\<noteq> None}.\n      (xs, X) \\<in> failures P) \\<longrightarrow>\n  (xs, \\<Union>X\\<in>singleton_set {x. x \\<noteq> None}. X) \\<in> failures P\n\ngoal (1 subgoal):\n 1. (xs, {x. x \\<noteq> None}) \\<in> failures P", "have \"\\<exists>x. x \\<in> ?X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x. x \\<in> {x. x \\<noteq> None}", "by blast"], ["proof (state)\nthis:\n  \\<exists>x. x \\<in> {x. x \\<noteq> None}\n\ngoal (1 subgoal):\n 1. (xs, {x. x \\<noteq> None}) \\<in> failures P", "hence \"\\<exists>X. X \\<in> singleton_set ?X\""], ["proof (prove)\nusing this:\n  \\<exists>x. x \\<in> {x. x \\<noteq> None}\n\ngoal (1 subgoal):\n 1. \\<exists>X. X \\<in> singleton_set {x. x \\<noteq> None}", "by (simp add: singleton_set_some)"], ["proof (state)\nthis:\n  \\<exists>X. X \\<in> singleton_set {x. x \\<noteq> None}\n\ngoal (1 subgoal):\n 1. (xs, {x. x \\<noteq> None}) \\<in> failures P", "ultimately"], ["proof (chain)\npicking this:\n  (\\<exists>X. X \\<in> singleton_set {x. x \\<noteq> None}) \\<longrightarrow>\n  (\\<forall>X\\<in>singleton_set {x. x \\<noteq> None}.\n      (xs, X) \\<in> failures P) \\<longrightarrow>\n  (xs, \\<Union>X\\<in>singleton_set {x. x \\<noteq> None}. X) \\<in> failures P\n  \\<exists>X. X \\<in> singleton_set {x. x \\<noteq> None}", "have \"(\\<forall>X \\<in> singleton_set ?X. (xs, X) \\<in> failures P) \\<longrightarrow>\n    (xs, \\<Union>X \\<in> singleton_set ?X. X) \\<in> failures P\""], ["proof (prove)\nusing this:\n  (\\<exists>X. X \\<in> singleton_set {x. x \\<noteq> None}) \\<longrightarrow>\n  (\\<forall>X\\<in>singleton_set {x. x \\<noteq> None}.\n      (xs, X) \\<in> failures P) \\<longrightarrow>\n  (xs, \\<Union>X\\<in>singleton_set {x. x \\<noteq> None}. X) \\<in> failures P\n  \\<exists>X. X \\<in> singleton_set {x. x \\<noteq> None}\n\ngoal (1 subgoal):\n 1. (\\<forall>X\\<in>singleton_set {x. x \\<noteq> None}.\n        (xs, X) \\<in> failures P) \\<longrightarrow>\n    (xs, \\<Union>X\\<in>singleton_set {x. x \\<noteq> None}. X)\n    \\<in> failures P", ".."], ["proof (state)\nthis:\n  (\\<forall>X\\<in>singleton_set {x. x \\<noteq> None}.\n      (xs, X) \\<in> failures P) \\<longrightarrow>\n  (xs, \\<Union>X\\<in>singleton_set {x. x \\<noteq> None}. X) \\<in> failures P\n\ngoal (1 subgoal):\n 1. (xs, {x. x \\<noteq> None}) \\<in> failures P", "moreover"], ["proof (state)\nthis:\n  (\\<forall>X\\<in>singleton_set {x. x \\<noteq> None}.\n      (xs, X) \\<in> failures P) \\<longrightarrow>\n  (xs, \\<Union>X\\<in>singleton_set {x. x \\<noteq> None}. X) \\<in> failures P\n\ngoal (1 subgoal):\n 1. (xs, {x. x \\<noteq> None}) \\<in> failures P", "have \"\\<forall>X \\<in> singleton_set ?X. (xs, X) \\<in> failures P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>X\\<in>singleton_set {x. x \\<noteq> None}.\n       (xs, X) \\<in> failures P", "proof (rule ballI, simp add: singleton_set_def del: not_None_eq,\n   erule exE, erule conjE, simp (no_asm_simp))"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>X x.\n       \\<lbrakk>x \\<noteq> None; X = {x}\\<rbrakk>\n       \\<Longrightarrow> (xs, {x}) \\<in> failures P", "fix x :: \"'a option\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>X x.\n       \\<lbrakk>x \\<noteq> None; X = {x}\\<rbrakk>\n       \\<Longrightarrow> (xs, {x}) \\<in> failures P", "assume D: \"x \\<noteq> None\""], ["proof (state)\nthis:\n  x \\<noteq> None\n\ngoal (1 subgoal):\n 1. \\<And>X x.\n       \\<lbrakk>x \\<noteq> None; X = {x}\\<rbrakk>\n       \\<Longrightarrow> (xs, {x}) \\<in> failures P", "have \"xs @ [None] \\<in> traces P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs @ [None] \\<in> traces P", "using C"], ["proof (prove)\nusing this:\n  xs \\<in> sentences P\n\ngoal (1 subgoal):\n 1. xs @ [None] \\<in> traces P", "by (simp add: sentences_def)"], ["proof (state)\nthis:\n  xs @ [None] \\<in> traces P\n\ngoal (1 subgoal):\n 1. \\<And>X x.\n       \\<lbrakk>x \\<noteq> None; X = {x}\\<rbrakk>\n       \\<Longrightarrow> (xs, {x}) \\<in> failures P", "hence \"xs \\<in> traces P\""], ["proof (prove)\nusing this:\n  xs @ [None] \\<in> traces P\n\ngoal (1 subgoal):\n 1. xs \\<in> traces P", "by (rule process_rule_2_traces)"], ["proof (state)\nthis:\n  xs \\<in> traces P\n\ngoal (1 subgoal):\n 1. \\<And>X x.\n       \\<lbrakk>x \\<noteq> None; X = {x}\\<rbrakk>\n       \\<Longrightarrow> (xs, {x}) \\<in> failures P", "hence \"(xs, {}) \\<in> failures P\""], ["proof (prove)\nusing this:\n  xs \\<in> traces P\n\ngoal (1 subgoal):\n 1. (xs, {}) \\<in> failures P", "by (rule traces_failures)"], ["proof (state)\nthis:\n  (xs, {}) \\<in> failures P\n\ngoal (1 subgoal):\n 1. \\<And>X x.\n       \\<lbrakk>x \\<noteq> None; X = {x}\\<rbrakk>\n       \\<Longrightarrow> (xs, {x}) \\<in> failures P", "hence \"(xs @ [x], {}) \\<in> failures P \\<or> (xs, {x}) \\<in> failures P\""], ["proof (prove)\nusing this:\n  (xs, {}) \\<in> failures P\n\ngoal (1 subgoal):\n 1. (xs @ [x], {}) \\<in> failures P \\<or> (xs, {x}) \\<in> failures P", "by (rule process_rule_4)"], ["proof (state)\nthis:\n  (xs @ [x], {}) \\<in> failures P \\<or> (xs, {x}) \\<in> failures P\n\ngoal (1 subgoal):\n 1. \\<And>X x.\n       \\<lbrakk>x \\<noteq> None; X = {x}\\<rbrakk>\n       \\<Longrightarrow> (xs, {x}) \\<in> failures P", "thus \"(xs, {x}) \\<in> failures P\""], ["proof (prove)\nusing this:\n  (xs @ [x], {}) \\<in> failures P \\<or> (xs, {x}) \\<in> failures P\n\ngoal (1 subgoal):\n 1. (xs, {x}) \\<in> failures P", "proof (rule disjE, rule_tac ccontr, simp_all)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>(xs @ [x], {}) \\<in> failures P;\n     (xs, {x}) \\<notin> failures P\\<rbrakk>\n    \\<Longrightarrow> False", "assume \"(xs @ [x], {}) \\<in> failures P\""], ["proof (state)\nthis:\n  (xs @ [x], {}) \\<in> failures P\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(xs @ [x], {}) \\<in> failures P;\n     (xs, {x}) \\<notin> failures P\\<rbrakk>\n    \\<Longrightarrow> False", "hence \"xs @ [x] \\<in> traces P\""], ["proof (prove)\nusing this:\n  (xs @ [x], {}) \\<in> failures P\n\ngoal (1 subgoal):\n 1. xs @ [x] \\<in> traces P", "by (rule failures_traces)"], ["proof (state)\nthis:\n  xs @ [x] \\<in> traces P\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(xs @ [x], {}) \\<in> failures P;\n     (xs, {x}) \\<notin> failures P\\<rbrakk>\n    \\<Longrightarrow> False", "with B and C"], ["proof (chain)\npicking this:\n  sequential P\n  xs \\<in> sentences P\n  xs @ [x] \\<in> traces P", "have \"x = None\""], ["proof (prove)\nusing this:\n  sequential P\n  xs \\<in> sentences P\n  xs @ [x] \\<in> traces P\n\ngoal (1 subgoal):\n 1. x = None", "by (rule seq_sentences_none)"], ["proof (state)\nthis:\n  x = None\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(xs @ [x], {}) \\<in> failures P;\n     (xs, {x}) \\<notin> failures P\\<rbrakk>\n    \\<Longrightarrow> False", "thus False"], ["proof (prove)\nusing this:\n  x = None\n\ngoal (1 subgoal):\n 1. False", "using D"], ["proof (prove)\nusing this:\n  x = None\n  x \\<noteq> None\n\ngoal (1 subgoal):\n 1. False", "by contradiction"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (xs, {x}) \\<in> failures P\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>X\\<in>singleton_set {x. x \\<noteq> None}.\n     (xs, X) \\<in> failures P\n\ngoal (1 subgoal):\n 1. (xs, {x. x \\<noteq> None}) \\<in> failures P", "ultimately"], ["proof (chain)\npicking this:\n  (\\<forall>X\\<in>singleton_set {x. x \\<noteq> None}.\n      (xs, X) \\<in> failures P) \\<longrightarrow>\n  (xs, \\<Union>X\\<in>singleton_set {x. x \\<noteq> None}. X) \\<in> failures P\n  \\<forall>X\\<in>singleton_set {x. x \\<noteq> None}.\n     (xs, X) \\<in> failures P", "have \"(xs, \\<Union>X \\<in> singleton_set ?X. X) \\<in> failures P\""], ["proof (prove)\nusing this:\n  (\\<forall>X\\<in>singleton_set {x. x \\<noteq> None}.\n      (xs, X) \\<in> failures P) \\<longrightarrow>\n  (xs, \\<Union>X\\<in>singleton_set {x. x \\<noteq> None}. X) \\<in> failures P\n  \\<forall>X\\<in>singleton_set {x. x \\<noteq> None}.\n     (xs, X) \\<in> failures P\n\ngoal (1 subgoal):\n 1. (xs, \\<Union>X\\<in>singleton_set {x. x \\<noteq> None}. X)\n    \\<in> failures P", ".."], ["proof (state)\nthis:\n  (xs, \\<Union>X\\<in>singleton_set {x. x \\<noteq> None}. X) \\<in> failures P\n\ngoal (1 subgoal):\n 1. (xs, {x. x \\<noteq> None}) \\<in> failures P", "thus ?thesis"], ["proof (prove)\nusing this:\n  (xs, \\<Union>X\\<in>singleton_set {x. x \\<noteq> None}. X) \\<in> failures P\n\ngoal (1 subgoal):\n 1. (xs, {x. x \\<noteq> None}) \\<in> failures P", "by (simp only: singleton_set_union)"], ["proof (state)\nthis:\n  (xs, {x. x \\<noteq> None}) \\<in> failures P\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \"Sequential composition\""], ["", "text \\<open>\nIn what follows, the definition of the failures resulting from the sequential composition of two\nprocesses @{term P}, @{term Q} given in \\cite{R4} is formalized as the inductive definition of set\n\\<open>seq_comp_failures P Q\\<close>. Then, the sequential composition of @{term P} and @{term Q},\ndenoted by means of notation \\<open>P ; Q\\<close> following \\cite{R4}, is defined as the process having\n\\<open>seq_comp_failures P Q\\<close> as failures set and the empty set as divergences set.\n\nFor the sake of generality, this definition is based on the mere implicit assumption that the input\nprocesses be weakly sequential, rather than sequential. This slightly complicates things, since the\nsentences of process @{term P} may number further events in addition to @{term None} in their\nfuture.\n\nTherefore, the resulting refusals of a sentence @{term xs} of @{term P} will have the form\n@{term \"insert None X \\<inter> Y\"}, where @{term X} is a refusal of @{term xs} in @{term P} and @{term Y}\nis an initial refusal of @{term Q} (cf. rule \\<open>SCF_R2\\<close>). In fact, after @{term xs}, process\n\\<open>P ; Q\\<close> must be able to refuse @{term None} if @{term Q} is, whereas it cannot refuse an\nordinary event unless both @{term P} and @{term Q}, in their respective states, can.\n\nMoreover, a trace @{term xs} of \\<open>P ; Q\\<close> may result from different combinations of a sentence\nof @{term P} with a trace of @{term Q}. Thus, in order that the refusals of \\<open>P ; Q\\<close> be\nclosed under set union, the union of any two refusals of @{term xs} must still be a refusal (cf.\nrule \\<open>SCF_R4\\<close>). Indeed, this property will prove to be sufficient to ensure that for any two\nprocesses whose refusals are closed under set union, their sequential composition still be such,\nwhich is what is expected for any process of practical significance (cf. \\cite{R3}).\n\nAccording to the definition given in \\cite{R4}, a divergence of \\<open>P ; Q\\<close> is either a\ndivergence of @{term P}, or the concatenation of a sentence of @{term P} with a divergence of\n@{term Q}. Apparently, this definition does not match the formal one stated here below, which\nidentifies the divergences set of \\<open>P ; Q\\<close> with the empty set. Nonetheless, as remarked\nabove, sequential composition does not make sense unless the input processes are weakly sequential,\nsince this is the minimum required to confer the meaning of successful termination on the\ncorresponding alphabet symbol. But a weakly sequential process cannot have any divergence, so that\nthe two definitions are actually equivalent. In fact, a divergence is a trace such that, however it\nis extended with arbitrary additional events, the resulting event list is still a trace (cf. process\nproperties @{term process_prop_5} and @{term process_prop_6} in \\cite{R2}). Therefore, if @{term xs}\nwere a divergence, then @{term \"xs @ [None, None]\"} would be a trace, which is impossible in case\nthe process satisfies predicate @{term weakly_sequential}.\n\n\\null\n\\<close>"], ["", "inductive_set seq_comp_failures ::\n \"'a option process \\<Rightarrow> 'a option process \\<Rightarrow> 'a option failure set\"\nfor P :: \"'a option process\" and Q :: \"'a option process\" where\n\nSCF_R1: \"\\<lbrakk>xs \\<notin> sentences P; (xs, X) \\<in> failures P; None \\<notin> set xs\\<rbrakk> \\<Longrightarrow>\n  (xs, X) \\<in> seq_comp_failures P Q\" |\n\nSCF_R2: \"\\<lbrakk>xs \\<in> sentences P; (xs, X) \\<in> failures P; ([], Y) \\<in> failures Q\\<rbrakk> \\<Longrightarrow>\n  (xs, insert None X \\<inter> Y) \\<in> seq_comp_failures P Q\" |\n\nSCF_R3: \"\\<lbrakk>xs \\<in> sentences P; (ys, Y) \\<in> failures Q; ys \\<noteq> []\\<rbrakk> \\<Longrightarrow>\n  (xs @ ys, Y) \\<in> seq_comp_failures P Q\" |\n\nSCF_R4: \"\\<lbrakk>(xs, X) \\<in> seq_comp_failures P Q; (xs, Y) \\<in> seq_comp_failures P Q\\<rbrakk> \\<Longrightarrow>\n  (xs, X \\<union> Y) \\<in> seq_comp_failures P Q\""], ["", "definition seq_comp ::\n \"'a option process \\<Rightarrow> 'a option process \\<Rightarrow> 'a option process\" (infixl \";\" 60)\nwhere\n\"P ; Q \\<equiv> Abs_process (seq_comp_failures P Q, {})\""], ["", "text \\<open>\n\\null\n\nHere below is the proof that, for any two processes @{term P}, @{term Q} defined over the same\nalphabet containing successful termination, set @{term \"seq_comp_failures P Q\"} indeed enjoys the\ncharacteristic properties of the failures set of a process as defined in \\cite{R2} provided that\n@{term P} is weakly sequential, which is what happens in any meaningful case.\n\n\\null\n\\<close>"], ["", "lemma seq_comp_prop_1:\n \"([], {}) \\<in> seq_comp_failures P Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ([], {}) \\<in> seq_comp_failures P Q", "proof (cases \"[] \\<in> sentences P\")"], ["proof (state)\ngoal (2 subgoals):\n 1. [] \\<in> sentences P \\<Longrightarrow>\n    ([], {}) \\<in> seq_comp_failures P Q\n 2. [] \\<notin> sentences P \\<Longrightarrow>\n    ([], {}) \\<in> seq_comp_failures P Q", "case False"], ["proof (state)\nthis:\n  [] \\<notin> sentences P\n\ngoal (2 subgoals):\n 1. [] \\<in> sentences P \\<Longrightarrow>\n    ([], {}) \\<in> seq_comp_failures P Q\n 2. [] \\<notin> sentences P \\<Longrightarrow>\n    ([], {}) \\<in> seq_comp_failures P Q", "moreover"], ["proof (state)\nthis:\n  [] \\<notin> sentences P\n\ngoal (2 subgoals):\n 1. [] \\<in> sentences P \\<Longrightarrow>\n    ([], {}) \\<in> seq_comp_failures P Q\n 2. [] \\<notin> sentences P \\<Longrightarrow>\n    ([], {}) \\<in> seq_comp_failures P Q", "have \"([], {}) \\<in> failures P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ([], {}) \\<in> failures P", "by (rule process_rule_1)"], ["proof (state)\nthis:\n  ([], {}) \\<in> failures P\n\ngoal (2 subgoals):\n 1. [] \\<in> sentences P \\<Longrightarrow>\n    ([], {}) \\<in> seq_comp_failures P Q\n 2. [] \\<notin> sentences P \\<Longrightarrow>\n    ([], {}) \\<in> seq_comp_failures P Q", "moreover"], ["proof (state)\nthis:\n  ([], {}) \\<in> failures P\n\ngoal (2 subgoals):\n 1. [] \\<in> sentences P \\<Longrightarrow>\n    ([], {}) \\<in> seq_comp_failures P Q\n 2. [] \\<notin> sentences P \\<Longrightarrow>\n    ([], {}) \\<in> seq_comp_failures P Q", "have \"None \\<notin> set []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. None \\<notin> set []", "by simp"], ["proof (state)\nthis:\n  None \\<notin> set []\n\ngoal (2 subgoals):\n 1. [] \\<in> sentences P \\<Longrightarrow>\n    ([], {}) \\<in> seq_comp_failures P Q\n 2. [] \\<notin> sentences P \\<Longrightarrow>\n    ([], {}) \\<in> seq_comp_failures P Q", "ultimately"], ["proof (chain)\npicking this:\n  [] \\<notin> sentences P\n  ([], {}) \\<in> failures P\n  None \\<notin> set []", "show ?thesis"], ["proof (prove)\nusing this:\n  [] \\<notin> sentences P\n  ([], {}) \\<in> failures P\n  None \\<notin> set []\n\ngoal (1 subgoal):\n 1. ([], {}) \\<in> seq_comp_failures P Q", "by (rule SCF_R1)"], ["proof (state)\nthis:\n  ([], {}) \\<in> seq_comp_failures P Q\n\ngoal (1 subgoal):\n 1. [] \\<in> sentences P \\<Longrightarrow>\n    ([], {}) \\<in> seq_comp_failures P Q", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. [] \\<in> sentences P \\<Longrightarrow>\n    ([], {}) \\<in> seq_comp_failures P Q", "case True"], ["proof (state)\nthis:\n  [] \\<in> sentences P\n\ngoal (1 subgoal):\n 1. [] \\<in> sentences P \\<Longrightarrow>\n    ([], {}) \\<in> seq_comp_failures P Q", "moreover"], ["proof (state)\nthis:\n  [] \\<in> sentences P\n\ngoal (1 subgoal):\n 1. [] \\<in> sentences P \\<Longrightarrow>\n    ([], {}) \\<in> seq_comp_failures P Q", "have \"([], {}) \\<in> failures P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ([], {}) \\<in> failures P", "by (rule process_rule_1)"], ["proof (state)\nthis:\n  ([], {}) \\<in> failures P\n\ngoal (1 subgoal):\n 1. [] \\<in> sentences P \\<Longrightarrow>\n    ([], {}) \\<in> seq_comp_failures P Q", "moreover"], ["proof (state)\nthis:\n  ([], {}) \\<in> failures P\n\ngoal (1 subgoal):\n 1. [] \\<in> sentences P \\<Longrightarrow>\n    ([], {}) \\<in> seq_comp_failures P Q", "have \"([], {}) \\<in> failures Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ([], {}) \\<in> failures Q", "by (rule process_rule_1)"], ["proof (state)\nthis:\n  ([], {}) \\<in> failures Q\n\ngoal (1 subgoal):\n 1. [] \\<in> sentences P \\<Longrightarrow>\n    ([], {}) \\<in> seq_comp_failures P Q", "ultimately"], ["proof (chain)\npicking this:\n  [] \\<in> sentences P\n  ([], {}) \\<in> failures P\n  ([], {}) \\<in> failures Q", "have \"([], {None} \\<inter> {}) \\<in> seq_comp_failures P Q\""], ["proof (prove)\nusing this:\n  [] \\<in> sentences P\n  ([], {}) \\<in> failures P\n  ([], {}) \\<in> failures Q\n\ngoal (1 subgoal):\n 1. ([], {None} \\<inter> {}) \\<in> seq_comp_failures P Q", "by (rule SCF_R2)"], ["proof (state)\nthis:\n  ([], {None} \\<inter> {}) \\<in> seq_comp_failures P Q\n\ngoal (1 subgoal):\n 1. [] \\<in> sentences P \\<Longrightarrow>\n    ([], {}) \\<in> seq_comp_failures P Q", "thus ?thesis"], ["proof (prove)\nusing this:\n  ([], {None} \\<inter> {}) \\<in> seq_comp_failures P Q\n\ngoal (1 subgoal):\n 1. ([], {}) \\<in> seq_comp_failures P Q", "by simp"], ["proof (state)\nthis:\n  ([], {}) \\<in> seq_comp_failures P Q\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma seq_comp_prop_2_aux [rule_format]:\n  assumes WS: \"weakly_sequential P\"\n  shows \"(ws, X) \\<in> seq_comp_failures P Q \\<Longrightarrow>\n    ws = xs @ [x] \\<longrightarrow> (xs, {}) \\<in> seq_comp_failures P Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (ws, X) \\<in> seq_comp_failures P Q \\<Longrightarrow>\n    ws = xs @ [x] \\<longrightarrow> (xs, {}) \\<in> seq_comp_failures P Q", "proof (erule seq_comp_failures.induct, rule_tac [!] impI, simp_all, erule conjE)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>xsa X.\n       \\<lbrakk>xs @ [x] \\<notin> sentences P;\n        (xs @ [x], X) \\<in> failures P; xsa = xs @ [x]; None \\<noteq> x;\n        None \\<notin> set xs\\<rbrakk>\n       \\<Longrightarrow> (xs, {}) \\<in> seq_comp_failures P Q\n 2. \\<And>xsa X Y.\n       \\<lbrakk>xs @ [x] \\<in> sentences P; (xs @ [x], X) \\<in> failures P;\n        ([], Y) \\<in> failures Q; xsa = xs @ [x]\\<rbrakk>\n       \\<Longrightarrow> (xs, {}) \\<in> seq_comp_failures P Q\n 3. \\<And>xsa ys Y.\n       \\<lbrakk>xsa \\<in> sentences P; (ys, Y) \\<in> failures Q;\n        ys \\<noteq> []; xsa @ ys = xs @ [x]\\<rbrakk>\n       \\<Longrightarrow> (xs, {}) \\<in> seq_comp_failures P Q", "fix X'"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>xsa X.\n       \\<lbrakk>xs @ [x] \\<notin> sentences P;\n        (xs @ [x], X) \\<in> failures P; xsa = xs @ [x]; None \\<noteq> x;\n        None \\<notin> set xs\\<rbrakk>\n       \\<Longrightarrow> (xs, {}) \\<in> seq_comp_failures P Q\n 2. \\<And>xsa X Y.\n       \\<lbrakk>xs @ [x] \\<in> sentences P; (xs @ [x], X) \\<in> failures P;\n        ([], Y) \\<in> failures Q; xsa = xs @ [x]\\<rbrakk>\n       \\<Longrightarrow> (xs, {}) \\<in> seq_comp_failures P Q\n 3. \\<And>xsa ys Y.\n       \\<lbrakk>xsa \\<in> sentences P; (ys, Y) \\<in> failures Q;\n        ys \\<noteq> []; xsa @ ys = xs @ [x]\\<rbrakk>\n       \\<Longrightarrow> (xs, {}) \\<in> seq_comp_failures P Q", "assume\n    A: \"(xs @ [x], X') \\<in> failures P\" and\n    B: \"None \\<notin> set xs\""], ["proof (state)\nthis:\n  (xs @ [x], X') \\<in> failures P\n  None \\<notin> set xs\n\ngoal (3 subgoals):\n 1. \\<And>xsa X.\n       \\<lbrakk>xs @ [x] \\<notin> sentences P;\n        (xs @ [x], X) \\<in> failures P; xsa = xs @ [x]; None \\<noteq> x;\n        None \\<notin> set xs\\<rbrakk>\n       \\<Longrightarrow> (xs, {}) \\<in> seq_comp_failures P Q\n 2. \\<And>xsa X Y.\n       \\<lbrakk>xs @ [x] \\<in> sentences P; (xs @ [x], X) \\<in> failures P;\n        ([], Y) \\<in> failures Q; xsa = xs @ [x]\\<rbrakk>\n       \\<Longrightarrow> (xs, {}) \\<in> seq_comp_failures P Q\n 3. \\<And>xsa ys Y.\n       \\<lbrakk>xsa \\<in> sentences P; (ys, Y) \\<in> failures Q;\n        ys \\<noteq> []; xsa @ ys = xs @ [x]\\<rbrakk>\n       \\<Longrightarrow> (xs, {}) \\<in> seq_comp_failures P Q", "have A': \"(xs, {}) \\<in> failures P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (xs, {}) \\<in> failures P", "using A"], ["proof (prove)\nusing this:\n  (xs @ [x], X') \\<in> failures P\n\ngoal (1 subgoal):\n 1. (xs, {}) \\<in> failures P", "by (rule process_rule_2)"], ["proof (state)\nthis:\n  (xs, {}) \\<in> failures P\n\ngoal (3 subgoals):\n 1. \\<And>xsa X.\n       \\<lbrakk>xs @ [x] \\<notin> sentences P;\n        (xs @ [x], X) \\<in> failures P; xsa = xs @ [x]; None \\<noteq> x;\n        None \\<notin> set xs\\<rbrakk>\n       \\<Longrightarrow> (xs, {}) \\<in> seq_comp_failures P Q\n 2. \\<And>xsa X Y.\n       \\<lbrakk>xs @ [x] \\<in> sentences P; (xs @ [x], X) \\<in> failures P;\n        ([], Y) \\<in> failures Q; xsa = xs @ [x]\\<rbrakk>\n       \\<Longrightarrow> (xs, {}) \\<in> seq_comp_failures P Q\n 3. \\<And>xsa ys Y.\n       \\<lbrakk>xsa \\<in> sentences P; (ys, Y) \\<in> failures Q;\n        ys \\<noteq> []; xsa @ ys = xs @ [x]\\<rbrakk>\n       \\<Longrightarrow> (xs, {}) \\<in> seq_comp_failures P Q", "show \"(xs, {}) \\<in> seq_comp_failures P Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (xs, {}) \\<in> seq_comp_failures P Q", "proof (cases \"xs \\<in> sentences P\")"], ["proof (state)\ngoal (2 subgoals):\n 1. xs \\<in> sentences P \\<Longrightarrow>\n    (xs, {}) \\<in> seq_comp_failures P Q\n 2. xs \\<notin> sentences P \\<Longrightarrow>\n    (xs, {}) \\<in> seq_comp_failures P Q", "case False"], ["proof (state)\nthis:\n  xs \\<notin> sentences P\n\ngoal (2 subgoals):\n 1. xs \\<in> sentences P \\<Longrightarrow>\n    (xs, {}) \\<in> seq_comp_failures P Q\n 2. xs \\<notin> sentences P \\<Longrightarrow>\n    (xs, {}) \\<in> seq_comp_failures P Q", "thus ?thesis"], ["proof (prove)\nusing this:\n  xs \\<notin> sentences P\n\ngoal (1 subgoal):\n 1. (xs, {}) \\<in> seq_comp_failures P Q", "using A' and B"], ["proof (prove)\nusing this:\n  xs \\<notin> sentences P\n  (xs, {}) \\<in> failures P\n  None \\<notin> set xs\n\ngoal (1 subgoal):\n 1. (xs, {}) \\<in> seq_comp_failures P Q", "by (rule SCF_R1)"], ["proof (state)\nthis:\n  (xs, {}) \\<in> seq_comp_failures P Q\n\ngoal (1 subgoal):\n 1. xs \\<in> sentences P \\<Longrightarrow>\n    (xs, {}) \\<in> seq_comp_failures P Q", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. xs \\<in> sentences P \\<Longrightarrow>\n    (xs, {}) \\<in> seq_comp_failures P Q", "case True"], ["proof (state)\nthis:\n  xs \\<in> sentences P\n\ngoal (1 subgoal):\n 1. xs \\<in> sentences P \\<Longrightarrow>\n    (xs, {}) \\<in> seq_comp_failures P Q", "have \"([], {}) \\<in> failures Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ([], {}) \\<in> failures Q", "by (rule process_rule_1)"], ["proof (state)\nthis:\n  ([], {}) \\<in> failures Q\n\ngoal (1 subgoal):\n 1. xs \\<in> sentences P \\<Longrightarrow>\n    (xs, {}) \\<in> seq_comp_failures P Q", "with True and A'"], ["proof (chain)\npicking this:\n  xs \\<in> sentences P\n  (xs, {}) \\<in> failures P\n  ([], {}) \\<in> failures Q", "have \"(xs, {None} \\<inter> {}) \\<in> seq_comp_failures P Q\""], ["proof (prove)\nusing this:\n  xs \\<in> sentences P\n  (xs, {}) \\<in> failures P\n  ([], {}) \\<in> failures Q\n\ngoal (1 subgoal):\n 1. (xs, {None} \\<inter> {}) \\<in> seq_comp_failures P Q", "by (rule SCF_R2)"], ["proof (state)\nthis:\n  (xs, {None} \\<inter> {}) \\<in> seq_comp_failures P Q\n\ngoal (1 subgoal):\n 1. xs \\<in> sentences P \\<Longrightarrow>\n    (xs, {}) \\<in> seq_comp_failures P Q", "thus ?thesis"], ["proof (prove)\nusing this:\n  (xs, {None} \\<inter> {}) \\<in> seq_comp_failures P Q\n\ngoal (1 subgoal):\n 1. (xs, {}) \\<in> seq_comp_failures P Q", "by simp"], ["proof (state)\nthis:\n  (xs, {}) \\<in> seq_comp_failures P Q\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (xs, {}) \\<in> seq_comp_failures P Q\n\ngoal (2 subgoals):\n 1. \\<And>xsa X Y.\n       \\<lbrakk>xs @ [x] \\<in> sentences P; (xs @ [x], X) \\<in> failures P;\n        ([], Y) \\<in> failures Q; xsa = xs @ [x]\\<rbrakk>\n       \\<Longrightarrow> (xs, {}) \\<in> seq_comp_failures P Q\n 2. \\<And>xsa ys Y.\n       \\<lbrakk>xsa \\<in> sentences P; (ys, Y) \\<in> failures Q;\n        ys \\<noteq> []; xsa @ ys = xs @ [x]\\<rbrakk>\n       \\<Longrightarrow> (xs, {}) \\<in> seq_comp_failures P Q", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>xsa X Y.\n       \\<lbrakk>xs @ [x] \\<in> sentences P; (xs @ [x], X) \\<in> failures P;\n        ([], Y) \\<in> failures Q; xsa = xs @ [x]\\<rbrakk>\n       \\<Longrightarrow> (xs, {}) \\<in> seq_comp_failures P Q\n 2. \\<And>xsa ys Y.\n       \\<lbrakk>xsa \\<in> sentences P; (ys, Y) \\<in> failures Q;\n        ys \\<noteq> []; xsa @ ys = xs @ [x]\\<rbrakk>\n       \\<Longrightarrow> (xs, {}) \\<in> seq_comp_failures P Q", "fix X'"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>xsa X Y.\n       \\<lbrakk>xs @ [x] \\<in> sentences P; (xs @ [x], X) \\<in> failures P;\n        ([], Y) \\<in> failures Q; xsa = xs @ [x]\\<rbrakk>\n       \\<Longrightarrow> (xs, {}) \\<in> seq_comp_failures P Q\n 2. \\<And>xsa ys Y.\n       \\<lbrakk>xsa \\<in> sentences P; (ys, Y) \\<in> failures Q;\n        ys \\<noteq> []; xsa @ ys = xs @ [x]\\<rbrakk>\n       \\<Longrightarrow> (xs, {}) \\<in> seq_comp_failures P Q", "assume A: \"(xs @ [x], X') \\<in> failures P\""], ["proof (state)\nthis:\n  (xs @ [x], X') \\<in> failures P\n\ngoal (2 subgoals):\n 1. \\<And>xsa X Y.\n       \\<lbrakk>xs @ [x] \\<in> sentences P; (xs @ [x], X) \\<in> failures P;\n        ([], Y) \\<in> failures Q; xsa = xs @ [x]\\<rbrakk>\n       \\<Longrightarrow> (xs, {}) \\<in> seq_comp_failures P Q\n 2. \\<And>xsa ys Y.\n       \\<lbrakk>xsa \\<in> sentences P; (ys, Y) \\<in> failures Q;\n        ys \\<noteq> []; xsa @ ys = xs @ [x]\\<rbrakk>\n       \\<Longrightarrow> (xs, {}) \\<in> seq_comp_failures P Q", "hence A': \"(xs, {}) \\<in> failures P\""], ["proof (prove)\nusing this:\n  (xs @ [x], X') \\<in> failures P\n\ngoal (1 subgoal):\n 1. (xs, {}) \\<in> failures P", "by (rule process_rule_2)"], ["proof (state)\nthis:\n  (xs, {}) \\<in> failures P\n\ngoal (2 subgoals):\n 1. \\<And>xsa X Y.\n       \\<lbrakk>xs @ [x] \\<in> sentences P; (xs @ [x], X) \\<in> failures P;\n        ([], Y) \\<in> failures Q; xsa = xs @ [x]\\<rbrakk>\n       \\<Longrightarrow> (xs, {}) \\<in> seq_comp_failures P Q\n 2. \\<And>xsa ys Y.\n       \\<lbrakk>xsa \\<in> sentences P; (ys, Y) \\<in> failures Q;\n        ys \\<noteq> []; xsa @ ys = xs @ [x]\\<rbrakk>\n       \\<Longrightarrow> (xs, {}) \\<in> seq_comp_failures P Q", "show \"(xs, {}) \\<in> seq_comp_failures P Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (xs, {}) \\<in> seq_comp_failures P Q", "proof (cases \"xs \\<in> sentences P\")"], ["proof (state)\ngoal (2 subgoals):\n 1. xs \\<in> sentences P \\<Longrightarrow>\n    (xs, {}) \\<in> seq_comp_failures P Q\n 2. xs \\<notin> sentences P \\<Longrightarrow>\n    (xs, {}) \\<in> seq_comp_failures P Q", "case False"], ["proof (state)\nthis:\n  xs \\<notin> sentences P\n\ngoal (2 subgoals):\n 1. xs \\<in> sentences P \\<Longrightarrow>\n    (xs, {}) \\<in> seq_comp_failures P Q\n 2. xs \\<notin> sentences P \\<Longrightarrow>\n    (xs, {}) \\<in> seq_comp_failures P Q", "have \"\\<forall>xs \\<in> traces P. None \\<notin> set (butlast xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>xs\\<in>traces P. None \\<notin> set (butlast xs)", "using WS"], ["proof (prove)\nusing this:\n  weakly_sequential P\n\ngoal (1 subgoal):\n 1. \\<forall>xs\\<in>traces P. None \\<notin> set (butlast xs)", "by (simp add: weakly_sequential_def)"], ["proof (state)\nthis:\n  \\<forall>xs\\<in>traces P. None \\<notin> set (butlast xs)\n\ngoal (2 subgoals):\n 1. xs \\<in> sentences P \\<Longrightarrow>\n    (xs, {}) \\<in> seq_comp_failures P Q\n 2. xs \\<notin> sentences P \\<Longrightarrow>\n    (xs, {}) \\<in> seq_comp_failures P Q", "moreover"], ["proof (state)\nthis:\n  \\<forall>xs\\<in>traces P. None \\<notin> set (butlast xs)\n\ngoal (2 subgoals):\n 1. xs \\<in> sentences P \\<Longrightarrow>\n    (xs, {}) \\<in> seq_comp_failures P Q\n 2. xs \\<notin> sentences P \\<Longrightarrow>\n    (xs, {}) \\<in> seq_comp_failures P Q", "have \"xs @ [x] \\<in> traces P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs @ [x] \\<in> traces P", "using A"], ["proof (prove)\nusing this:\n  (xs @ [x], X') \\<in> failures P\n\ngoal (1 subgoal):\n 1. xs @ [x] \\<in> traces P", "by (rule failures_traces)"], ["proof (state)\nthis:\n  xs @ [x] \\<in> traces P\n\ngoal (2 subgoals):\n 1. xs \\<in> sentences P \\<Longrightarrow>\n    (xs, {}) \\<in> seq_comp_failures P Q\n 2. xs \\<notin> sentences P \\<Longrightarrow>\n    (xs, {}) \\<in> seq_comp_failures P Q", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>xs\\<in>traces P. None \\<notin> set (butlast xs)\n  xs @ [x] \\<in> traces P", "have \"None \\<notin> set (butlast (xs @ [x]))\""], ["proof (prove)\nusing this:\n  \\<forall>xs\\<in>traces P. None \\<notin> set (butlast xs)\n  xs @ [x] \\<in> traces P\n\ngoal (1 subgoal):\n 1. None \\<notin> set (butlast (xs @ [x]))", ".."], ["proof (state)\nthis:\n  None \\<notin> set (butlast (xs @ [x]))\n\ngoal (2 subgoals):\n 1. xs \\<in> sentences P \\<Longrightarrow>\n    (xs, {}) \\<in> seq_comp_failures P Q\n 2. xs \\<notin> sentences P \\<Longrightarrow>\n    (xs, {}) \\<in> seq_comp_failures P Q", "hence \"None \\<notin> set xs\""], ["proof (prove)\nusing this:\n  None \\<notin> set (butlast (xs @ [x]))\n\ngoal (1 subgoal):\n 1. None \\<notin> set xs", "by simp"], ["proof (state)\nthis:\n  None \\<notin> set xs\n\ngoal (2 subgoals):\n 1. xs \\<in> sentences P \\<Longrightarrow>\n    (xs, {}) \\<in> seq_comp_failures P Q\n 2. xs \\<notin> sentences P \\<Longrightarrow>\n    (xs, {}) \\<in> seq_comp_failures P Q", "with False and A'"], ["proof (chain)\npicking this:\n  xs \\<notin> sentences P\n  (xs, {}) \\<in> failures P\n  None \\<notin> set xs", "show ?thesis"], ["proof (prove)\nusing this:\n  xs \\<notin> sentences P\n  (xs, {}) \\<in> failures P\n  None \\<notin> set xs\n\ngoal (1 subgoal):\n 1. (xs, {}) \\<in> seq_comp_failures P Q", "by (rule SCF_R1)"], ["proof (state)\nthis:\n  (xs, {}) \\<in> seq_comp_failures P Q\n\ngoal (1 subgoal):\n 1. xs \\<in> sentences P \\<Longrightarrow>\n    (xs, {}) \\<in> seq_comp_failures P Q", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. xs \\<in> sentences P \\<Longrightarrow>\n    (xs, {}) \\<in> seq_comp_failures P Q", "case True"], ["proof (state)\nthis:\n  xs \\<in> sentences P\n\ngoal (1 subgoal):\n 1. xs \\<in> sentences P \\<Longrightarrow>\n    (xs, {}) \\<in> seq_comp_failures P Q", "have \"([], {}) \\<in> failures Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ([], {}) \\<in> failures Q", "by (rule process_rule_1)"], ["proof (state)\nthis:\n  ([], {}) \\<in> failures Q\n\ngoal (1 subgoal):\n 1. xs \\<in> sentences P \\<Longrightarrow>\n    (xs, {}) \\<in> seq_comp_failures P Q", "with True and A'"], ["proof (chain)\npicking this:\n  xs \\<in> sentences P\n  (xs, {}) \\<in> failures P\n  ([], {}) \\<in> failures Q", "have \"(xs, {None} \\<inter> {}) \\<in> seq_comp_failures P Q\""], ["proof (prove)\nusing this:\n  xs \\<in> sentences P\n  (xs, {}) \\<in> failures P\n  ([], {}) \\<in> failures Q\n\ngoal (1 subgoal):\n 1. (xs, {None} \\<inter> {}) \\<in> seq_comp_failures P Q", "by (rule SCF_R2)"], ["proof (state)\nthis:\n  (xs, {None} \\<inter> {}) \\<in> seq_comp_failures P Q\n\ngoal (1 subgoal):\n 1. xs \\<in> sentences P \\<Longrightarrow>\n    (xs, {}) \\<in> seq_comp_failures P Q", "thus ?thesis"], ["proof (prove)\nusing this:\n  (xs, {None} \\<inter> {}) \\<in> seq_comp_failures P Q\n\ngoal (1 subgoal):\n 1. (xs, {}) \\<in> seq_comp_failures P Q", "by simp"], ["proof (state)\nthis:\n  (xs, {}) \\<in> seq_comp_failures P Q\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (xs, {}) \\<in> seq_comp_failures P Q\n\ngoal (1 subgoal):\n 1. \\<And>xsa ys Y.\n       \\<lbrakk>xsa \\<in> sentences P; (ys, Y) \\<in> failures Q;\n        ys \\<noteq> []; xsa @ ys = xs @ [x]\\<rbrakk>\n       \\<Longrightarrow> (xs, {}) \\<in> seq_comp_failures P Q", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xsa ys Y.\n       \\<lbrakk>xsa \\<in> sentences P; (ys, Y) \\<in> failures Q;\n        ys \\<noteq> []; xsa @ ys = xs @ [x]\\<rbrakk>\n       \\<Longrightarrow> (xs, {}) \\<in> seq_comp_failures P Q", "fix xs' ys Y"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xsa ys Y.\n       \\<lbrakk>xsa \\<in> sentences P; (ys, Y) \\<in> failures Q;\n        ys \\<noteq> []; xsa @ ys = xs @ [x]\\<rbrakk>\n       \\<Longrightarrow> (xs, {}) \\<in> seq_comp_failures P Q", "assume\n    A: \"xs' @ ys = xs @ [x]\" and\n    B: \"xs' \\<in> sentences P\" and\n    C: \"(ys, Y) \\<in> failures Q\" and\n    D: \"ys \\<noteq> []\""], ["proof (state)\nthis:\n  xs' @ ys = xs @ [x]\n  xs' \\<in> sentences P\n  (ys, Y) \\<in> failures Q\n  ys \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<And>xsa ys Y.\n       \\<lbrakk>xsa \\<in> sentences P; (ys, Y) \\<in> failures Q;\n        ys \\<noteq> []; xsa @ ys = xs @ [x]\\<rbrakk>\n       \\<Longrightarrow> (xs, {}) \\<in> seq_comp_failures P Q", "have \"\\<exists>y ys'. ys = ys' @ [y]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>y ys'. ys = ys' @ [y]", "using D"], ["proof (prove)\nusing this:\n  ys \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<exists>y ys'. ys = ys' @ [y]", "by (rule_tac xs = ys in rev_cases, simp_all)"], ["proof (state)\nthis:\n  \\<exists>y ys'. ys = ys' @ [y]\n\ngoal (1 subgoal):\n 1. \\<And>xsa ys Y.\n       \\<lbrakk>xsa \\<in> sentences P; (ys, Y) \\<in> failures Q;\n        ys \\<noteq> []; xsa @ ys = xs @ [x]\\<rbrakk>\n       \\<Longrightarrow> (xs, {}) \\<in> seq_comp_failures P Q", "then"], ["proof (chain)\npicking this:\n  \\<exists>y ys'. ys = ys' @ [y]", "obtain y and ys' where D': \"ys = ys' @ [y]\""], ["proof (prove)\nusing this:\n  \\<exists>y ys'. ys = ys' @ [y]\n\ngoal (1 subgoal):\n 1. (\\<And>ys' y. ys = ys' @ [y] \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  ys = ys' @ [y]\n\ngoal (1 subgoal):\n 1. \\<And>xsa ys Y.\n       \\<lbrakk>xsa \\<in> sentences P; (ys, Y) \\<in> failures Q;\n        ys \\<noteq> []; xsa @ ys = xs @ [x]\\<rbrakk>\n       \\<Longrightarrow> (xs, {}) \\<in> seq_comp_failures P Q", "hence \"xs = xs' @ ys'\""], ["proof (prove)\nusing this:\n  ys = ys' @ [y]\n\ngoal (1 subgoal):\n 1. xs = xs' @ ys'", "using A"], ["proof (prove)\nusing this:\n  ys = ys' @ [y]\n  xs' @ ys = xs @ [x]\n\ngoal (1 subgoal):\n 1. xs = xs' @ ys'", "by simp"], ["proof (state)\nthis:\n  xs = xs' @ ys'\n\ngoal (1 subgoal):\n 1. \\<And>xsa ys Y.\n       \\<lbrakk>xsa \\<in> sentences P; (ys, Y) \\<in> failures Q;\n        ys \\<noteq> []; xsa @ ys = xs @ [x]\\<rbrakk>\n       \\<Longrightarrow> (xs, {}) \\<in> seq_comp_failures P Q", "thus \"(xs, {}) \\<in> seq_comp_failures P Q\""], ["proof (prove)\nusing this:\n  xs = xs' @ ys'\n\ngoal (1 subgoal):\n 1. (xs, {}) \\<in> seq_comp_failures P Q", "proof (cases \"ys' = []\", simp_all)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>ys' = []; xs = xs'\\<rbrakk>\n    \\<Longrightarrow> (xs', {}) \\<in> seq_comp_failures P Q\n 2. \\<lbrakk>ys' \\<noteq> []; xs = xs' @ ys'\\<rbrakk>\n    \\<Longrightarrow> (xs' @ ys', {}) \\<in> seq_comp_failures P Q", "case True"], ["proof (state)\nthis:\n  ys' = []\n\ngoal (2 subgoals):\n 1. \\<lbrakk>ys' = []; xs = xs'\\<rbrakk>\n    \\<Longrightarrow> (xs', {}) \\<in> seq_comp_failures P Q\n 2. \\<lbrakk>ys' \\<noteq> []; xs = xs' @ ys'\\<rbrakk>\n    \\<Longrightarrow> (xs' @ ys', {}) \\<in> seq_comp_failures P Q", "have \"xs' @ [None] \\<in> traces P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs' @ [None] \\<in> traces P", "using B"], ["proof (prove)\nusing this:\n  xs' \\<in> sentences P\n\ngoal (1 subgoal):\n 1. xs' @ [None] \\<in> traces P", "by (simp add: sentences_def)"], ["proof (state)\nthis:\n  xs' @ [None] \\<in> traces P\n\ngoal (2 subgoals):\n 1. \\<lbrakk>ys' = []; xs = xs'\\<rbrakk>\n    \\<Longrightarrow> (xs', {}) \\<in> seq_comp_failures P Q\n 2. \\<lbrakk>ys' \\<noteq> []; xs = xs' @ ys'\\<rbrakk>\n    \\<Longrightarrow> (xs' @ ys', {}) \\<in> seq_comp_failures P Q", "hence \"xs' \\<in> traces P\""], ["proof (prove)\nusing this:\n  xs' @ [None] \\<in> traces P\n\ngoal (1 subgoal):\n 1. xs' \\<in> traces P", "by (rule process_rule_2_traces)"], ["proof (state)\nthis:\n  xs' \\<in> traces P\n\ngoal (2 subgoals):\n 1. \\<lbrakk>ys' = []; xs = xs'\\<rbrakk>\n    \\<Longrightarrow> (xs', {}) \\<in> seq_comp_failures P Q\n 2. \\<lbrakk>ys' \\<noteq> []; xs = xs' @ ys'\\<rbrakk>\n    \\<Longrightarrow> (xs' @ ys', {}) \\<in> seq_comp_failures P Q", "hence \"(xs', {}) \\<in> failures P\""], ["proof (prove)\nusing this:\n  xs' \\<in> traces P\n\ngoal (1 subgoal):\n 1. (xs', {}) \\<in> failures P", "by (rule traces_failures)"], ["proof (state)\nthis:\n  (xs', {}) \\<in> failures P\n\ngoal (2 subgoals):\n 1. \\<lbrakk>ys' = []; xs = xs'\\<rbrakk>\n    \\<Longrightarrow> (xs', {}) \\<in> seq_comp_failures P Q\n 2. \\<lbrakk>ys' \\<noteq> []; xs = xs' @ ys'\\<rbrakk>\n    \\<Longrightarrow> (xs' @ ys', {}) \\<in> seq_comp_failures P Q", "moreover"], ["proof (state)\nthis:\n  (xs', {}) \\<in> failures P\n\ngoal (2 subgoals):\n 1. \\<lbrakk>ys' = []; xs = xs'\\<rbrakk>\n    \\<Longrightarrow> (xs', {}) \\<in> seq_comp_failures P Q\n 2. \\<lbrakk>ys' \\<noteq> []; xs = xs' @ ys'\\<rbrakk>\n    \\<Longrightarrow> (xs' @ ys', {}) \\<in> seq_comp_failures P Q", "have \"([], {}) \\<in> failures Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ([], {}) \\<in> failures Q", "by (rule process_rule_1)"], ["proof (state)\nthis:\n  ([], {}) \\<in> failures Q\n\ngoal (2 subgoals):\n 1. \\<lbrakk>ys' = []; xs = xs'\\<rbrakk>\n    \\<Longrightarrow> (xs', {}) \\<in> seq_comp_failures P Q\n 2. \\<lbrakk>ys' \\<noteq> []; xs = xs' @ ys'\\<rbrakk>\n    \\<Longrightarrow> (xs' @ ys', {}) \\<in> seq_comp_failures P Q", "ultimately"], ["proof (chain)\npicking this:\n  (xs', {}) \\<in> failures P\n  ([], {}) \\<in> failures Q", "have \"(xs', {None} \\<inter> {}) \\<in> seq_comp_failures P Q\""], ["proof (prove)\nusing this:\n  (xs', {}) \\<in> failures P\n  ([], {}) \\<in> failures Q\n\ngoal (1 subgoal):\n 1. (xs', {None} \\<inter> {}) \\<in> seq_comp_failures P Q", "by (rule SCF_R2 [OF B])"], ["proof (state)\nthis:\n  (xs', {None} \\<inter> {}) \\<in> seq_comp_failures P Q\n\ngoal (2 subgoals):\n 1. \\<lbrakk>ys' = []; xs = xs'\\<rbrakk>\n    \\<Longrightarrow> (xs', {}) \\<in> seq_comp_failures P Q\n 2. \\<lbrakk>ys' \\<noteq> []; xs = xs' @ ys'\\<rbrakk>\n    \\<Longrightarrow> (xs' @ ys', {}) \\<in> seq_comp_failures P Q", "thus \"(xs', {}) \\<in> seq_comp_failures P Q\""], ["proof (prove)\nusing this:\n  (xs', {None} \\<inter> {}) \\<in> seq_comp_failures P Q\n\ngoal (1 subgoal):\n 1. (xs', {}) \\<in> seq_comp_failures P Q", "by simp"], ["proof (state)\nthis:\n  (xs', {}) \\<in> seq_comp_failures P Q\n\ngoal (1 subgoal):\n 1. \\<lbrakk>ys' \\<noteq> []; xs = xs' @ ys'\\<rbrakk>\n    \\<Longrightarrow> (xs' @ ys', {}) \\<in> seq_comp_failures P Q", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>ys' \\<noteq> []; xs = xs' @ ys'\\<rbrakk>\n    \\<Longrightarrow> (xs' @ ys', {}) \\<in> seq_comp_failures P Q", "case False"], ["proof (state)\nthis:\n  ys' \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<lbrakk>ys' \\<noteq> []; xs = xs' @ ys'\\<rbrakk>\n    \\<Longrightarrow> (xs' @ ys', {}) \\<in> seq_comp_failures P Q", "have \"(ys' @ [y], Y) \\<in> failures Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (ys' @ [y], Y) \\<in> failures Q", "using C and D'"], ["proof (prove)\nusing this:\n  (ys, Y) \\<in> failures Q\n  ys = ys' @ [y]\n\ngoal (1 subgoal):\n 1. (ys' @ [y], Y) \\<in> failures Q", "by simp"], ["proof (state)\nthis:\n  (ys' @ [y], Y) \\<in> failures Q\n\ngoal (1 subgoal):\n 1. \\<lbrakk>ys' \\<noteq> []; xs = xs' @ ys'\\<rbrakk>\n    \\<Longrightarrow> (xs' @ ys', {}) \\<in> seq_comp_failures P Q", "hence C': \"(ys', {}) \\<in> failures Q\""], ["proof (prove)\nusing this:\n  (ys' @ [y], Y) \\<in> failures Q\n\ngoal (1 subgoal):\n 1. (ys', {}) \\<in> failures Q", "by (rule process_rule_2)"], ["proof (state)\nthis:\n  (ys', {}) \\<in> failures Q\n\ngoal (1 subgoal):\n 1. \\<lbrakk>ys' \\<noteq> []; xs = xs' @ ys'\\<rbrakk>\n    \\<Longrightarrow> (xs' @ ys', {}) \\<in> seq_comp_failures P Q", "with B"], ["proof (chain)\npicking this:\n  xs' \\<in> sentences P\n  (ys', {}) \\<in> failures Q", "show \"(xs' @ ys', {}) \\<in> seq_comp_failures P Q\""], ["proof (prove)\nusing this:\n  xs' \\<in> sentences P\n  (ys', {}) \\<in> failures Q\n\ngoal (1 subgoal):\n 1. (xs' @ ys', {}) \\<in> seq_comp_failures P Q", "using False"], ["proof (prove)\nusing this:\n  xs' \\<in> sentences P\n  (ys', {}) \\<in> failures Q\n  ys' \\<noteq> []\n\ngoal (1 subgoal):\n 1. (xs' @ ys', {}) \\<in> seq_comp_failures P Q", "by (rule SCF_R3)"], ["proof (state)\nthis:\n  (xs' @ ys', {}) \\<in> seq_comp_failures P Q\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (xs, {}) \\<in> seq_comp_failures P Q\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma seq_comp_prop_2:\n  assumes WS: \"weakly_sequential P\"\n  shows \"(xs @ [x], X) \\<in> seq_comp_failures P Q \\<Longrightarrow>\n    (xs, {}) \\<in> seq_comp_failures P Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (xs @ [x], X) \\<in> seq_comp_failures P Q \\<Longrightarrow>\n    (xs, {}) \\<in> seq_comp_failures P Q", "by (erule seq_comp_prop_2_aux [OF WS], simp)"], ["", "lemma seq_comp_prop_3 [rule_format]:\n \"(xs, Y) \\<in> seq_comp_failures P Q \\<Longrightarrow> X \\<subseteq> Y \\<longrightarrow>\n    (xs, X) \\<in> seq_comp_failures P Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (xs, Y) \\<in> seq_comp_failures P Q \\<Longrightarrow>\n    X \\<subseteq> Y \\<longrightarrow> (xs, X) \\<in> seq_comp_failures P Q", "proof (induction arbitrary: X rule: seq_comp_failures.induct, rule_tac [!] impI)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>xs X Xa.\n       \\<lbrakk>xs \\<notin> sentences P; (xs, X) \\<in> failures P;\n        None \\<notin> set xs; Xa \\<subseteq> X\\<rbrakk>\n       \\<Longrightarrow> (xs, Xa) \\<in> seq_comp_failures P Q\n 2. \\<And>xs X Y Xa.\n       \\<lbrakk>xs \\<in> sentences P; (xs, X) \\<in> failures P;\n        ([], Y) \\<in> failures Q;\n        Xa \\<subseteq> insert None X \\<inter> Y\\<rbrakk>\n       \\<Longrightarrow> (xs, Xa) \\<in> seq_comp_failures P Q\n 3. \\<And>xs ys Y X.\n       \\<lbrakk>xs \\<in> sentences P; (ys, Y) \\<in> failures Q;\n        ys \\<noteq> []; X \\<subseteq> Y\\<rbrakk>\n       \\<Longrightarrow> (xs @ ys, X) \\<in> seq_comp_failures P Q\n 4. \\<And>xs X Y Xa.\n       \\<lbrakk>(xs, X) \\<in> seq_comp_failures P Q;\n        \\<And>Xa.\n           Xa \\<subseteq> X \\<longrightarrow>\n           (xs, Xa) \\<in> seq_comp_failures P Q;\n        (xs, Y) \\<in> seq_comp_failures P Q;\n        \\<And>X.\n           X \\<subseteq> Y \\<longrightarrow>\n           (xs, X) \\<in> seq_comp_failures P Q;\n        Xa \\<subseteq> X \\<union> Y\\<rbrakk>\n       \\<Longrightarrow> (xs, Xa) \\<in> seq_comp_failures P Q", "fix xs X Y"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>xs X Xa.\n       \\<lbrakk>xs \\<notin> sentences P; (xs, X) \\<in> failures P;\n        None \\<notin> set xs; Xa \\<subseteq> X\\<rbrakk>\n       \\<Longrightarrow> (xs, Xa) \\<in> seq_comp_failures P Q\n 2. \\<And>xs X Y Xa.\n       \\<lbrakk>xs \\<in> sentences P; (xs, X) \\<in> failures P;\n        ([], Y) \\<in> failures Q;\n        Xa \\<subseteq> insert None X \\<inter> Y\\<rbrakk>\n       \\<Longrightarrow> (xs, Xa) \\<in> seq_comp_failures P Q\n 3. \\<And>xs ys Y X.\n       \\<lbrakk>xs \\<in> sentences P; (ys, Y) \\<in> failures Q;\n        ys \\<noteq> []; X \\<subseteq> Y\\<rbrakk>\n       \\<Longrightarrow> (xs @ ys, X) \\<in> seq_comp_failures P Q\n 4. \\<And>xs X Y Xa.\n       \\<lbrakk>(xs, X) \\<in> seq_comp_failures P Q;\n        \\<And>Xa.\n           Xa \\<subseteq> X \\<longrightarrow>\n           (xs, Xa) \\<in> seq_comp_failures P Q;\n        (xs, Y) \\<in> seq_comp_failures P Q;\n        \\<And>X.\n           X \\<subseteq> Y \\<longrightarrow>\n           (xs, X) \\<in> seq_comp_failures P Q;\n        Xa \\<subseteq> X \\<union> Y\\<rbrakk>\n       \\<Longrightarrow> (xs, Xa) \\<in> seq_comp_failures P Q", "assume\n    A: \"xs \\<notin> sentences P\" and\n    B: \"(xs, X) \\<in> failures P\" and\n    C: \"None \\<notin> set xs\" and\n    D: \"Y \\<subseteq> X\""], ["proof (state)\nthis:\n  xs \\<notin> sentences P\n  (xs, X) \\<in> failures P\n  None \\<notin> set xs\n  Y \\<subseteq> X\n\ngoal (4 subgoals):\n 1. \\<And>xs X Xa.\n       \\<lbrakk>xs \\<notin> sentences P; (xs, X) \\<in> failures P;\n        None \\<notin> set xs; Xa \\<subseteq> X\\<rbrakk>\n       \\<Longrightarrow> (xs, Xa) \\<in> seq_comp_failures P Q\n 2. \\<And>xs X Y Xa.\n       \\<lbrakk>xs \\<in> sentences P; (xs, X) \\<in> failures P;\n        ([], Y) \\<in> failures Q;\n        Xa \\<subseteq> insert None X \\<inter> Y\\<rbrakk>\n       \\<Longrightarrow> (xs, Xa) \\<in> seq_comp_failures P Q\n 3. \\<And>xs ys Y X.\n       \\<lbrakk>xs \\<in> sentences P; (ys, Y) \\<in> failures Q;\n        ys \\<noteq> []; X \\<subseteq> Y\\<rbrakk>\n       \\<Longrightarrow> (xs @ ys, X) \\<in> seq_comp_failures P Q\n 4. \\<And>xs X Y Xa.\n       \\<lbrakk>(xs, X) \\<in> seq_comp_failures P Q;\n        \\<And>Xa.\n           Xa \\<subseteq> X \\<longrightarrow>\n           (xs, Xa) \\<in> seq_comp_failures P Q;\n        (xs, Y) \\<in> seq_comp_failures P Q;\n        \\<And>X.\n           X \\<subseteq> Y \\<longrightarrow>\n           (xs, X) \\<in> seq_comp_failures P Q;\n        Xa \\<subseteq> X \\<union> Y\\<rbrakk>\n       \\<Longrightarrow> (xs, Xa) \\<in> seq_comp_failures P Q", "have \"(xs, Y) \\<in> failures P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (xs, Y) \\<in> failures P", "using B and D"], ["proof (prove)\nusing this:\n  (xs, X) \\<in> failures P\n  Y \\<subseteq> X\n\ngoal (1 subgoal):\n 1. (xs, Y) \\<in> failures P", "by (rule process_rule_3)"], ["proof (state)\nthis:\n  (xs, Y) \\<in> failures P\n\ngoal (4 subgoals):\n 1. \\<And>xs X Xa.\n       \\<lbrakk>xs \\<notin> sentences P; (xs, X) \\<in> failures P;\n        None \\<notin> set xs; Xa \\<subseteq> X\\<rbrakk>\n       \\<Longrightarrow> (xs, Xa) \\<in> seq_comp_failures P Q\n 2. \\<And>xs X Y Xa.\n       \\<lbrakk>xs \\<in> sentences P; (xs, X) \\<in> failures P;\n        ([], Y) \\<in> failures Q;\n        Xa \\<subseteq> insert None X \\<inter> Y\\<rbrakk>\n       \\<Longrightarrow> (xs, Xa) \\<in> seq_comp_failures P Q\n 3. \\<And>xs ys Y X.\n       \\<lbrakk>xs \\<in> sentences P; (ys, Y) \\<in> failures Q;\n        ys \\<noteq> []; X \\<subseteq> Y\\<rbrakk>\n       \\<Longrightarrow> (xs @ ys, X) \\<in> seq_comp_failures P Q\n 4. \\<And>xs X Y Xa.\n       \\<lbrakk>(xs, X) \\<in> seq_comp_failures P Q;\n        \\<And>Xa.\n           Xa \\<subseteq> X \\<longrightarrow>\n           (xs, Xa) \\<in> seq_comp_failures P Q;\n        (xs, Y) \\<in> seq_comp_failures P Q;\n        \\<And>X.\n           X \\<subseteq> Y \\<longrightarrow>\n           (xs, X) \\<in> seq_comp_failures P Q;\n        Xa \\<subseteq> X \\<union> Y\\<rbrakk>\n       \\<Longrightarrow> (xs, Xa) \\<in> seq_comp_failures P Q", "with A"], ["proof (chain)\npicking this:\n  xs \\<notin> sentences P\n  (xs, Y) \\<in> failures P", "show \"(xs, Y) \\<in> seq_comp_failures P Q\""], ["proof (prove)\nusing this:\n  xs \\<notin> sentences P\n  (xs, Y) \\<in> failures P\n\ngoal (1 subgoal):\n 1. (xs, Y) \\<in> seq_comp_failures P Q", "using C"], ["proof (prove)\nusing this:\n  xs \\<notin> sentences P\n  (xs, Y) \\<in> failures P\n  None \\<notin> set xs\n\ngoal (1 subgoal):\n 1. (xs, Y) \\<in> seq_comp_failures P Q", "by (rule SCF_R1)"], ["proof (state)\nthis:\n  (xs, Y) \\<in> seq_comp_failures P Q\n\ngoal (3 subgoals):\n 1. \\<And>xs X Y Xa.\n       \\<lbrakk>xs \\<in> sentences P; (xs, X) \\<in> failures P;\n        ([], Y) \\<in> failures Q;\n        Xa \\<subseteq> insert None X \\<inter> Y\\<rbrakk>\n       \\<Longrightarrow> (xs, Xa) \\<in> seq_comp_failures P Q\n 2. \\<And>xs ys Y X.\n       \\<lbrakk>xs \\<in> sentences P; (ys, Y) \\<in> failures Q;\n        ys \\<noteq> []; X \\<subseteq> Y\\<rbrakk>\n       \\<Longrightarrow> (xs @ ys, X) \\<in> seq_comp_failures P Q\n 3. \\<And>xs X Y Xa.\n       \\<lbrakk>(xs, X) \\<in> seq_comp_failures P Q;\n        \\<And>Xa.\n           Xa \\<subseteq> X \\<longrightarrow>\n           (xs, Xa) \\<in> seq_comp_failures P Q;\n        (xs, Y) \\<in> seq_comp_failures P Q;\n        \\<And>X.\n           X \\<subseteq> Y \\<longrightarrow>\n           (xs, X) \\<in> seq_comp_failures P Q;\n        Xa \\<subseteq> X \\<union> Y\\<rbrakk>\n       \\<Longrightarrow> (xs, Xa) \\<in> seq_comp_failures P Q", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>xs X Y Xa.\n       \\<lbrakk>xs \\<in> sentences P; (xs, X) \\<in> failures P;\n        ([], Y) \\<in> failures Q;\n        Xa \\<subseteq> insert None X \\<inter> Y\\<rbrakk>\n       \\<Longrightarrow> (xs, Xa) \\<in> seq_comp_failures P Q\n 2. \\<And>xs ys Y X.\n       \\<lbrakk>xs \\<in> sentences P; (ys, Y) \\<in> failures Q;\n        ys \\<noteq> []; X \\<subseteq> Y\\<rbrakk>\n       \\<Longrightarrow> (xs @ ys, X) \\<in> seq_comp_failures P Q\n 3. \\<And>xs X Y Xa.\n       \\<lbrakk>(xs, X) \\<in> seq_comp_failures P Q;\n        \\<And>Xa.\n           Xa \\<subseteq> X \\<longrightarrow>\n           (xs, Xa) \\<in> seq_comp_failures P Q;\n        (xs, Y) \\<in> seq_comp_failures P Q;\n        \\<And>X.\n           X \\<subseteq> Y \\<longrightarrow>\n           (xs, X) \\<in> seq_comp_failures P Q;\n        Xa \\<subseteq> X \\<union> Y\\<rbrakk>\n       \\<Longrightarrow> (xs, Xa) \\<in> seq_comp_failures P Q", "fix xs X Y Z"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>xs X Y Xa.\n       \\<lbrakk>xs \\<in> sentences P; (xs, X) \\<in> failures P;\n        ([], Y) \\<in> failures Q;\n        Xa \\<subseteq> insert None X \\<inter> Y\\<rbrakk>\n       \\<Longrightarrow> (xs, Xa) \\<in> seq_comp_failures P Q\n 2. \\<And>xs ys Y X.\n       \\<lbrakk>xs \\<in> sentences P; (ys, Y) \\<in> failures Q;\n        ys \\<noteq> []; X \\<subseteq> Y\\<rbrakk>\n       \\<Longrightarrow> (xs @ ys, X) \\<in> seq_comp_failures P Q\n 3. \\<And>xs X Y Xa.\n       \\<lbrakk>(xs, X) \\<in> seq_comp_failures P Q;\n        \\<And>Xa.\n           Xa \\<subseteq> X \\<longrightarrow>\n           (xs, Xa) \\<in> seq_comp_failures P Q;\n        (xs, Y) \\<in> seq_comp_failures P Q;\n        \\<And>X.\n           X \\<subseteq> Y \\<longrightarrow>\n           (xs, X) \\<in> seq_comp_failures P Q;\n        Xa \\<subseteq> X \\<union> Y\\<rbrakk>\n       \\<Longrightarrow> (xs, Xa) \\<in> seq_comp_failures P Q", "assume\n    A: \"xs \\<in> sentences P\" and\n    B: \"(xs, X) \\<in> failures P\" and\n    C: \"([], Y) \\<in> failures Q\" and\n    D: \"Z \\<subseteq> insert None X \\<inter> Y\""], ["proof (state)\nthis:\n  xs \\<in> sentences P\n  (xs, X) \\<in> failures P\n  ([], Y) \\<in> failures Q\n  Z \\<subseteq> insert None X \\<inter> Y\n\ngoal (3 subgoals):\n 1. \\<And>xs X Y Xa.\n       \\<lbrakk>xs \\<in> sentences P; (xs, X) \\<in> failures P;\n        ([], Y) \\<in> failures Q;\n        Xa \\<subseteq> insert None X \\<inter> Y\\<rbrakk>\n       \\<Longrightarrow> (xs, Xa) \\<in> seq_comp_failures P Q\n 2. \\<And>xs ys Y X.\n       \\<lbrakk>xs \\<in> sentences P; (ys, Y) \\<in> failures Q;\n        ys \\<noteq> []; X \\<subseteq> Y\\<rbrakk>\n       \\<Longrightarrow> (xs @ ys, X) \\<in> seq_comp_failures P Q\n 3. \\<And>xs X Y Xa.\n       \\<lbrakk>(xs, X) \\<in> seq_comp_failures P Q;\n        \\<And>Xa.\n           Xa \\<subseteq> X \\<longrightarrow>\n           (xs, Xa) \\<in> seq_comp_failures P Q;\n        (xs, Y) \\<in> seq_comp_failures P Q;\n        \\<And>X.\n           X \\<subseteq> Y \\<longrightarrow>\n           (xs, X) \\<in> seq_comp_failures P Q;\n        Xa \\<subseteq> X \\<union> Y\\<rbrakk>\n       \\<Longrightarrow> (xs, Xa) \\<in> seq_comp_failures P Q", "have \"Z - {None} \\<subseteq> X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Z - {None} \\<subseteq> X", "using D"], ["proof (prove)\nusing this:\n  Z \\<subseteq> insert None X \\<inter> Y\n\ngoal (1 subgoal):\n 1. Z - {None} \\<subseteq> X", "by blast"], ["proof (state)\nthis:\n  Z - {None} \\<subseteq> X\n\ngoal (3 subgoals):\n 1. \\<And>xs X Y Xa.\n       \\<lbrakk>xs \\<in> sentences P; (xs, X) \\<in> failures P;\n        ([], Y) \\<in> failures Q;\n        Xa \\<subseteq> insert None X \\<inter> Y\\<rbrakk>\n       \\<Longrightarrow> (xs, Xa) \\<in> seq_comp_failures P Q\n 2. \\<And>xs ys Y X.\n       \\<lbrakk>xs \\<in> sentences P; (ys, Y) \\<in> failures Q;\n        ys \\<noteq> []; X \\<subseteq> Y\\<rbrakk>\n       \\<Longrightarrow> (xs @ ys, X) \\<in> seq_comp_failures P Q\n 3. \\<And>xs X Y Xa.\n       \\<lbrakk>(xs, X) \\<in> seq_comp_failures P Q;\n        \\<And>Xa.\n           Xa \\<subseteq> X \\<longrightarrow>\n           (xs, Xa) \\<in> seq_comp_failures P Q;\n        (xs, Y) \\<in> seq_comp_failures P Q;\n        \\<And>X.\n           X \\<subseteq> Y \\<longrightarrow>\n           (xs, X) \\<in> seq_comp_failures P Q;\n        Xa \\<subseteq> X \\<union> Y\\<rbrakk>\n       \\<Longrightarrow> (xs, Xa) \\<in> seq_comp_failures P Q", "with B"], ["proof (chain)\npicking this:\n  (xs, X) \\<in> failures P\n  Z - {None} \\<subseteq> X", "have \"(xs, Z - {None}) \\<in> failures P\""], ["proof (prove)\nusing this:\n  (xs, X) \\<in> failures P\n  Z - {None} \\<subseteq> X\n\ngoal (1 subgoal):\n 1. (xs, Z - {None}) \\<in> failures P", "by (rule process_rule_3)"], ["proof (state)\nthis:\n  (xs, Z - {None}) \\<in> failures P\n\ngoal (3 subgoals):\n 1. \\<And>xs X Y Xa.\n       \\<lbrakk>xs \\<in> sentences P; (xs, X) \\<in> failures P;\n        ([], Y) \\<in> failures Q;\n        Xa \\<subseteq> insert None X \\<inter> Y\\<rbrakk>\n       \\<Longrightarrow> (xs, Xa) \\<in> seq_comp_failures P Q\n 2. \\<And>xs ys Y X.\n       \\<lbrakk>xs \\<in> sentences P; (ys, Y) \\<in> failures Q;\n        ys \\<noteq> []; X \\<subseteq> Y\\<rbrakk>\n       \\<Longrightarrow> (xs @ ys, X) \\<in> seq_comp_failures P Q\n 3. \\<And>xs X Y Xa.\n       \\<lbrakk>(xs, X) \\<in> seq_comp_failures P Q;\n        \\<And>Xa.\n           Xa \\<subseteq> X \\<longrightarrow>\n           (xs, Xa) \\<in> seq_comp_failures P Q;\n        (xs, Y) \\<in> seq_comp_failures P Q;\n        \\<And>X.\n           X \\<subseteq> Y \\<longrightarrow>\n           (xs, X) \\<in> seq_comp_failures P Q;\n        Xa \\<subseteq> X \\<union> Y\\<rbrakk>\n       \\<Longrightarrow> (xs, Xa) \\<in> seq_comp_failures P Q", "moreover"], ["proof (state)\nthis:\n  (xs, Z - {None}) \\<in> failures P\n\ngoal (3 subgoals):\n 1. \\<And>xs X Y Xa.\n       \\<lbrakk>xs \\<in> sentences P; (xs, X) \\<in> failures P;\n        ([], Y) \\<in> failures Q;\n        Xa \\<subseteq> insert None X \\<inter> Y\\<rbrakk>\n       \\<Longrightarrow> (xs, Xa) \\<in> seq_comp_failures P Q\n 2. \\<And>xs ys Y X.\n       \\<lbrakk>xs \\<in> sentences P; (ys, Y) \\<in> failures Q;\n        ys \\<noteq> []; X \\<subseteq> Y\\<rbrakk>\n       \\<Longrightarrow> (xs @ ys, X) \\<in> seq_comp_failures P Q\n 3. \\<And>xs X Y Xa.\n       \\<lbrakk>(xs, X) \\<in> seq_comp_failures P Q;\n        \\<And>Xa.\n           Xa \\<subseteq> X \\<longrightarrow>\n           (xs, Xa) \\<in> seq_comp_failures P Q;\n        (xs, Y) \\<in> seq_comp_failures P Q;\n        \\<And>X.\n           X \\<subseteq> Y \\<longrightarrow>\n           (xs, X) \\<in> seq_comp_failures P Q;\n        Xa \\<subseteq> X \\<union> Y\\<rbrakk>\n       \\<Longrightarrow> (xs, Xa) \\<in> seq_comp_failures P Q", "have \"Z \\<subseteq> Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Z \\<subseteq> Y", "using D"], ["proof (prove)\nusing this:\n  Z \\<subseteq> insert None X \\<inter> Y\n\ngoal (1 subgoal):\n 1. Z \\<subseteq> Y", "by simp"], ["proof (state)\nthis:\n  Z \\<subseteq> Y\n\ngoal (3 subgoals):\n 1. \\<And>xs X Y Xa.\n       \\<lbrakk>xs \\<in> sentences P; (xs, X) \\<in> failures P;\n        ([], Y) \\<in> failures Q;\n        Xa \\<subseteq> insert None X \\<inter> Y\\<rbrakk>\n       \\<Longrightarrow> (xs, Xa) \\<in> seq_comp_failures P Q\n 2. \\<And>xs ys Y X.\n       \\<lbrakk>xs \\<in> sentences P; (ys, Y) \\<in> failures Q;\n        ys \\<noteq> []; X \\<subseteq> Y\\<rbrakk>\n       \\<Longrightarrow> (xs @ ys, X) \\<in> seq_comp_failures P Q\n 3. \\<And>xs X Y Xa.\n       \\<lbrakk>(xs, X) \\<in> seq_comp_failures P Q;\n        \\<And>Xa.\n           Xa \\<subseteq> X \\<longrightarrow>\n           (xs, Xa) \\<in> seq_comp_failures P Q;\n        (xs, Y) \\<in> seq_comp_failures P Q;\n        \\<And>X.\n           X \\<subseteq> Y \\<longrightarrow>\n           (xs, X) \\<in> seq_comp_failures P Q;\n        Xa \\<subseteq> X \\<union> Y\\<rbrakk>\n       \\<Longrightarrow> (xs, Xa) \\<in> seq_comp_failures P Q", "with C"], ["proof (chain)\npicking this:\n  ([], Y) \\<in> failures Q\n  Z \\<subseteq> Y", "have \"([], Z) \\<in> failures Q\""], ["proof (prove)\nusing this:\n  ([], Y) \\<in> failures Q\n  Z \\<subseteq> Y\n\ngoal (1 subgoal):\n 1. ([], Z) \\<in> failures Q", "by (rule process_rule_3)"], ["proof (state)\nthis:\n  ([], Z) \\<in> failures Q\n\ngoal (3 subgoals):\n 1. \\<And>xs X Y Xa.\n       \\<lbrakk>xs \\<in> sentences P; (xs, X) \\<in> failures P;\n        ([], Y) \\<in> failures Q;\n        Xa \\<subseteq> insert None X \\<inter> Y\\<rbrakk>\n       \\<Longrightarrow> (xs, Xa) \\<in> seq_comp_failures P Q\n 2. \\<And>xs ys Y X.\n       \\<lbrakk>xs \\<in> sentences P; (ys, Y) \\<in> failures Q;\n        ys \\<noteq> []; X \\<subseteq> Y\\<rbrakk>\n       \\<Longrightarrow> (xs @ ys, X) \\<in> seq_comp_failures P Q\n 3. \\<And>xs X Y Xa.\n       \\<lbrakk>(xs, X) \\<in> seq_comp_failures P Q;\n        \\<And>Xa.\n           Xa \\<subseteq> X \\<longrightarrow>\n           (xs, Xa) \\<in> seq_comp_failures P Q;\n        (xs, Y) \\<in> seq_comp_failures P Q;\n        \\<And>X.\n           X \\<subseteq> Y \\<longrightarrow>\n           (xs, X) \\<in> seq_comp_failures P Q;\n        Xa \\<subseteq> X \\<union> Y\\<rbrakk>\n       \\<Longrightarrow> (xs, Xa) \\<in> seq_comp_failures P Q", "ultimately"], ["proof (chain)\npicking this:\n  (xs, Z - {None}) \\<in> failures P\n  ([], Z) \\<in> failures Q", "have \"(xs, insert None (Z - {None}) \\<inter> Z) \\<in> seq_comp_failures P Q\""], ["proof (prove)\nusing this:\n  (xs, Z - {None}) \\<in> failures P\n  ([], Z) \\<in> failures Q\n\ngoal (1 subgoal):\n 1. (xs, insert None (Z - {None}) \\<inter> Z) \\<in> seq_comp_failures P Q", "by (rule SCF_R2 [OF A])"], ["proof (state)\nthis:\n  (xs, insert None (Z - {None}) \\<inter> Z) \\<in> seq_comp_failures P Q\n\ngoal (3 subgoals):\n 1. \\<And>xs X Y Xa.\n       \\<lbrakk>xs \\<in> sentences P; (xs, X) \\<in> failures P;\n        ([], Y) \\<in> failures Q;\n        Xa \\<subseteq> insert None X \\<inter> Y\\<rbrakk>\n       \\<Longrightarrow> (xs, Xa) \\<in> seq_comp_failures P Q\n 2. \\<And>xs ys Y X.\n       \\<lbrakk>xs \\<in> sentences P; (ys, Y) \\<in> failures Q;\n        ys \\<noteq> []; X \\<subseteq> Y\\<rbrakk>\n       \\<Longrightarrow> (xs @ ys, X) \\<in> seq_comp_failures P Q\n 3. \\<And>xs X Y Xa.\n       \\<lbrakk>(xs, X) \\<in> seq_comp_failures P Q;\n        \\<And>Xa.\n           Xa \\<subseteq> X \\<longrightarrow>\n           (xs, Xa) \\<in> seq_comp_failures P Q;\n        (xs, Y) \\<in> seq_comp_failures P Q;\n        \\<And>X.\n           X \\<subseteq> Y \\<longrightarrow>\n           (xs, X) \\<in> seq_comp_failures P Q;\n        Xa \\<subseteq> X \\<union> Y\\<rbrakk>\n       \\<Longrightarrow> (xs, Xa) \\<in> seq_comp_failures P Q", "moreover"], ["proof (state)\nthis:\n  (xs, insert None (Z - {None}) \\<inter> Z) \\<in> seq_comp_failures P Q\n\ngoal (3 subgoals):\n 1. \\<And>xs X Y Xa.\n       \\<lbrakk>xs \\<in> sentences P; (xs, X) \\<in> failures P;\n        ([], Y) \\<in> failures Q;\n        Xa \\<subseteq> insert None X \\<inter> Y\\<rbrakk>\n       \\<Longrightarrow> (xs, Xa) \\<in> seq_comp_failures P Q\n 2. \\<And>xs ys Y X.\n       \\<lbrakk>xs \\<in> sentences P; (ys, Y) \\<in> failures Q;\n        ys \\<noteq> []; X \\<subseteq> Y\\<rbrakk>\n       \\<Longrightarrow> (xs @ ys, X) \\<in> seq_comp_failures P Q\n 3. \\<And>xs X Y Xa.\n       \\<lbrakk>(xs, X) \\<in> seq_comp_failures P Q;\n        \\<And>Xa.\n           Xa \\<subseteq> X \\<longrightarrow>\n           (xs, Xa) \\<in> seq_comp_failures P Q;\n        (xs, Y) \\<in> seq_comp_failures P Q;\n        \\<And>X.\n           X \\<subseteq> Y \\<longrightarrow>\n           (xs, X) \\<in> seq_comp_failures P Q;\n        Xa \\<subseteq> X \\<union> Y\\<rbrakk>\n       \\<Longrightarrow> (xs, Xa) \\<in> seq_comp_failures P Q", "have \"insert None (Z - {None}) \\<inter> Z = Z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. insert None (Z - {None}) \\<inter> Z = Z", "by blast"], ["proof (state)\nthis:\n  insert None (Z - {None}) \\<inter> Z = Z\n\ngoal (3 subgoals):\n 1. \\<And>xs X Y Xa.\n       \\<lbrakk>xs \\<in> sentences P; (xs, X) \\<in> failures P;\n        ([], Y) \\<in> failures Q;\n        Xa \\<subseteq> insert None X \\<inter> Y\\<rbrakk>\n       \\<Longrightarrow> (xs, Xa) \\<in> seq_comp_failures P Q\n 2. \\<And>xs ys Y X.\n       \\<lbrakk>xs \\<in> sentences P; (ys, Y) \\<in> failures Q;\n        ys \\<noteq> []; X \\<subseteq> Y\\<rbrakk>\n       \\<Longrightarrow> (xs @ ys, X) \\<in> seq_comp_failures P Q\n 3. \\<And>xs X Y Xa.\n       \\<lbrakk>(xs, X) \\<in> seq_comp_failures P Q;\n        \\<And>Xa.\n           Xa \\<subseteq> X \\<longrightarrow>\n           (xs, Xa) \\<in> seq_comp_failures P Q;\n        (xs, Y) \\<in> seq_comp_failures P Q;\n        \\<And>X.\n           X \\<subseteq> Y \\<longrightarrow>\n           (xs, X) \\<in> seq_comp_failures P Q;\n        Xa \\<subseteq> X \\<union> Y\\<rbrakk>\n       \\<Longrightarrow> (xs, Xa) \\<in> seq_comp_failures P Q", "ultimately"], ["proof (chain)\npicking this:\n  (xs, insert None (Z - {None}) \\<inter> Z) \\<in> seq_comp_failures P Q\n  insert None (Z - {None}) \\<inter> Z = Z", "show \"(xs, Z) \\<in> seq_comp_failures P Q\""], ["proof (prove)\nusing this:\n  (xs, insert None (Z - {None}) \\<inter> Z) \\<in> seq_comp_failures P Q\n  insert None (Z - {None}) \\<inter> Z = Z\n\ngoal (1 subgoal):\n 1. (xs, Z) \\<in> seq_comp_failures P Q", "by simp"], ["proof (state)\nthis:\n  (xs, Z) \\<in> seq_comp_failures P Q\n\ngoal (2 subgoals):\n 1. \\<And>xs ys Y X.\n       \\<lbrakk>xs \\<in> sentences P; (ys, Y) \\<in> failures Q;\n        ys \\<noteq> []; X \\<subseteq> Y\\<rbrakk>\n       \\<Longrightarrow> (xs @ ys, X) \\<in> seq_comp_failures P Q\n 2. \\<And>xs X Y Xa.\n       \\<lbrakk>(xs, X) \\<in> seq_comp_failures P Q;\n        \\<And>Xa.\n           Xa \\<subseteq> X \\<longrightarrow>\n           (xs, Xa) \\<in> seq_comp_failures P Q;\n        (xs, Y) \\<in> seq_comp_failures P Q;\n        \\<And>X.\n           X \\<subseteq> Y \\<longrightarrow>\n           (xs, X) \\<in> seq_comp_failures P Q;\n        Xa \\<subseteq> X \\<union> Y\\<rbrakk>\n       \\<Longrightarrow> (xs, Xa) \\<in> seq_comp_failures P Q", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>xs ys Y X.\n       \\<lbrakk>xs \\<in> sentences P; (ys, Y) \\<in> failures Q;\n        ys \\<noteq> []; X \\<subseteq> Y\\<rbrakk>\n       \\<Longrightarrow> (xs @ ys, X) \\<in> seq_comp_failures P Q\n 2. \\<And>xs X Y Xa.\n       \\<lbrakk>(xs, X) \\<in> seq_comp_failures P Q;\n        \\<And>Xa.\n           Xa \\<subseteq> X \\<longrightarrow>\n           (xs, Xa) \\<in> seq_comp_failures P Q;\n        (xs, Y) \\<in> seq_comp_failures P Q;\n        \\<And>X.\n           X \\<subseteq> Y \\<longrightarrow>\n           (xs, X) \\<in> seq_comp_failures P Q;\n        Xa \\<subseteq> X \\<union> Y\\<rbrakk>\n       \\<Longrightarrow> (xs, Xa) \\<in> seq_comp_failures P Q", "fix xs ys X Y"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>xs ys Y X.\n       \\<lbrakk>xs \\<in> sentences P; (ys, Y) \\<in> failures Q;\n        ys \\<noteq> []; X \\<subseteq> Y\\<rbrakk>\n       \\<Longrightarrow> (xs @ ys, X) \\<in> seq_comp_failures P Q\n 2. \\<And>xs X Y Xa.\n       \\<lbrakk>(xs, X) \\<in> seq_comp_failures P Q;\n        \\<And>Xa.\n           Xa \\<subseteq> X \\<longrightarrow>\n           (xs, Xa) \\<in> seq_comp_failures P Q;\n        (xs, Y) \\<in> seq_comp_failures P Q;\n        \\<And>X.\n           X \\<subseteq> Y \\<longrightarrow>\n           (xs, X) \\<in> seq_comp_failures P Q;\n        Xa \\<subseteq> X \\<union> Y\\<rbrakk>\n       \\<Longrightarrow> (xs, Xa) \\<in> seq_comp_failures P Q", "assume\n    A: \"xs \\<in> sentences P\" and\n    B: \"(ys, Y) \\<in> failures Q\" and\n    C: \"ys \\<noteq> []\" and\n    D: \"X \\<subseteq> Y\""], ["proof (state)\nthis:\n  xs \\<in> sentences P\n  (ys, Y) \\<in> failures Q\n  ys \\<noteq> []\n  X \\<subseteq> Y\n\ngoal (2 subgoals):\n 1. \\<And>xs ys Y X.\n       \\<lbrakk>xs \\<in> sentences P; (ys, Y) \\<in> failures Q;\n        ys \\<noteq> []; X \\<subseteq> Y\\<rbrakk>\n       \\<Longrightarrow> (xs @ ys, X) \\<in> seq_comp_failures P Q\n 2. \\<And>xs X Y Xa.\n       \\<lbrakk>(xs, X) \\<in> seq_comp_failures P Q;\n        \\<And>Xa.\n           Xa \\<subseteq> X \\<longrightarrow>\n           (xs, Xa) \\<in> seq_comp_failures P Q;\n        (xs, Y) \\<in> seq_comp_failures P Q;\n        \\<And>X.\n           X \\<subseteq> Y \\<longrightarrow>\n           (xs, X) \\<in> seq_comp_failures P Q;\n        Xa \\<subseteq> X \\<union> Y\\<rbrakk>\n       \\<Longrightarrow> (xs, Xa) \\<in> seq_comp_failures P Q", "have \"(ys, X) \\<in> failures Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (ys, X) \\<in> failures Q", "using B and D"], ["proof (prove)\nusing this:\n  (ys, Y) \\<in> failures Q\n  X \\<subseteq> Y\n\ngoal (1 subgoal):\n 1. (ys, X) \\<in> failures Q", "by (rule process_rule_3)"], ["proof (state)\nthis:\n  (ys, X) \\<in> failures Q\n\ngoal (2 subgoals):\n 1. \\<And>xs ys Y X.\n       \\<lbrakk>xs \\<in> sentences P; (ys, Y) \\<in> failures Q;\n        ys \\<noteq> []; X \\<subseteq> Y\\<rbrakk>\n       \\<Longrightarrow> (xs @ ys, X) \\<in> seq_comp_failures P Q\n 2. \\<And>xs X Y Xa.\n       \\<lbrakk>(xs, X) \\<in> seq_comp_failures P Q;\n        \\<And>Xa.\n           Xa \\<subseteq> X \\<longrightarrow>\n           (xs, Xa) \\<in> seq_comp_failures P Q;\n        (xs, Y) \\<in> seq_comp_failures P Q;\n        \\<And>X.\n           X \\<subseteq> Y \\<longrightarrow>\n           (xs, X) \\<in> seq_comp_failures P Q;\n        Xa \\<subseteq> X \\<union> Y\\<rbrakk>\n       \\<Longrightarrow> (xs, Xa) \\<in> seq_comp_failures P Q", "with A"], ["proof (chain)\npicking this:\n  xs \\<in> sentences P\n  (ys, X) \\<in> failures Q", "show \"(xs @ ys, X) \\<in> seq_comp_failures P Q\""], ["proof (prove)\nusing this:\n  xs \\<in> sentences P\n  (ys, X) \\<in> failures Q\n\ngoal (1 subgoal):\n 1. (xs @ ys, X) \\<in> seq_comp_failures P Q", "using C"], ["proof (prove)\nusing this:\n  xs \\<in> sentences P\n  (ys, X) \\<in> failures Q\n  ys \\<noteq> []\n\ngoal (1 subgoal):\n 1. (xs @ ys, X) \\<in> seq_comp_failures P Q", "by (rule SCF_R3)"], ["proof (state)\nthis:\n  (xs @ ys, X) \\<in> seq_comp_failures P Q\n\ngoal (1 subgoal):\n 1. \\<And>xs X Y Xa.\n       \\<lbrakk>(xs, X) \\<in> seq_comp_failures P Q;\n        \\<And>Xa.\n           Xa \\<subseteq> X \\<longrightarrow>\n           (xs, Xa) \\<in> seq_comp_failures P Q;\n        (xs, Y) \\<in> seq_comp_failures P Q;\n        \\<And>X.\n           X \\<subseteq> Y \\<longrightarrow>\n           (xs, X) \\<in> seq_comp_failures P Q;\n        Xa \\<subseteq> X \\<union> Y\\<rbrakk>\n       \\<Longrightarrow> (xs, Xa) \\<in> seq_comp_failures P Q", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xs X Y Xa.\n       \\<lbrakk>(xs, X) \\<in> seq_comp_failures P Q;\n        \\<And>Xa.\n           Xa \\<subseteq> X \\<longrightarrow>\n           (xs, Xa) \\<in> seq_comp_failures P Q;\n        (xs, Y) \\<in> seq_comp_failures P Q;\n        \\<And>X.\n           X \\<subseteq> Y \\<longrightarrow>\n           (xs, X) \\<in> seq_comp_failures P Q;\n        Xa \\<subseteq> X \\<union> Y\\<rbrakk>\n       \\<Longrightarrow> (xs, Xa) \\<in> seq_comp_failures P Q", "fix xs X Y Z"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xs X Y Xa.\n       \\<lbrakk>(xs, X) \\<in> seq_comp_failures P Q;\n        \\<And>Xa.\n           Xa \\<subseteq> X \\<longrightarrow>\n           (xs, Xa) \\<in> seq_comp_failures P Q;\n        (xs, Y) \\<in> seq_comp_failures P Q;\n        \\<And>X.\n           X \\<subseteq> Y \\<longrightarrow>\n           (xs, X) \\<in> seq_comp_failures P Q;\n        Xa \\<subseteq> X \\<union> Y\\<rbrakk>\n       \\<Longrightarrow> (xs, Xa) \\<in> seq_comp_failures P Q", "assume\n    A: \"\\<And>W. W \\<subseteq> X \\<longrightarrow> (xs, W) \\<in> seq_comp_failures P Q\" and\n    B: \"\\<And>W. W \\<subseteq> Y \\<longrightarrow> (xs, W) \\<in> seq_comp_failures P Q\" and\n    C: \"Z \\<subseteq> X \\<union> Y\""], ["proof (state)\nthis:\n  ?W \\<subseteq> X \\<longrightarrow> (xs, ?W) \\<in> seq_comp_failures P Q\n  ?W \\<subseteq> Y \\<longrightarrow> (xs, ?W) \\<in> seq_comp_failures P Q\n  Z \\<subseteq> X \\<union> Y\n\ngoal (1 subgoal):\n 1. \\<And>xs X Y Xa.\n       \\<lbrakk>(xs, X) \\<in> seq_comp_failures P Q;\n        \\<And>Xa.\n           Xa \\<subseteq> X \\<longrightarrow>\n           (xs, Xa) \\<in> seq_comp_failures P Q;\n        (xs, Y) \\<in> seq_comp_failures P Q;\n        \\<And>X.\n           X \\<subseteq> Y \\<longrightarrow>\n           (xs, X) \\<in> seq_comp_failures P Q;\n        Xa \\<subseteq> X \\<union> Y\\<rbrakk>\n       \\<Longrightarrow> (xs, Xa) \\<in> seq_comp_failures P Q", "have \"Z \\<inter> X \\<subseteq> X \\<longrightarrow> (xs, Z \\<inter> X) \\<in> seq_comp_failures P Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Z \\<inter> X \\<subseteq> X \\<longrightarrow>\n    (xs, Z \\<inter> X) \\<in> seq_comp_failures P Q", "using A"], ["proof (prove)\nusing this:\n  ?W \\<subseteq> X \\<longrightarrow> (xs, ?W) \\<in> seq_comp_failures P Q\n\ngoal (1 subgoal):\n 1. Z \\<inter> X \\<subseteq> X \\<longrightarrow>\n    (xs, Z \\<inter> X) \\<in> seq_comp_failures P Q", "."], ["proof (state)\nthis:\n  Z \\<inter> X \\<subseteq> X \\<longrightarrow>\n  (xs, Z \\<inter> X) \\<in> seq_comp_failures P Q\n\ngoal (1 subgoal):\n 1. \\<And>xs X Y Xa.\n       \\<lbrakk>(xs, X) \\<in> seq_comp_failures P Q;\n        \\<And>Xa.\n           Xa \\<subseteq> X \\<longrightarrow>\n           (xs, Xa) \\<in> seq_comp_failures P Q;\n        (xs, Y) \\<in> seq_comp_failures P Q;\n        \\<And>X.\n           X \\<subseteq> Y \\<longrightarrow>\n           (xs, X) \\<in> seq_comp_failures P Q;\n        Xa \\<subseteq> X \\<union> Y\\<rbrakk>\n       \\<Longrightarrow> (xs, Xa) \\<in> seq_comp_failures P Q", "hence \"(xs, Z \\<inter> X) \\<in> seq_comp_failures P Q\""], ["proof (prove)\nusing this:\n  Z \\<inter> X \\<subseteq> X \\<longrightarrow>\n  (xs, Z \\<inter> X) \\<in> seq_comp_failures P Q\n\ngoal (1 subgoal):\n 1. (xs, Z \\<inter> X) \\<in> seq_comp_failures P Q", "by simp"], ["proof (state)\nthis:\n  (xs, Z \\<inter> X) \\<in> seq_comp_failures P Q\n\ngoal (1 subgoal):\n 1. \\<And>xs X Y Xa.\n       \\<lbrakk>(xs, X) \\<in> seq_comp_failures P Q;\n        \\<And>Xa.\n           Xa \\<subseteq> X \\<longrightarrow>\n           (xs, Xa) \\<in> seq_comp_failures P Q;\n        (xs, Y) \\<in> seq_comp_failures P Q;\n        \\<And>X.\n           X \\<subseteq> Y \\<longrightarrow>\n           (xs, X) \\<in> seq_comp_failures P Q;\n        Xa \\<subseteq> X \\<union> Y\\<rbrakk>\n       \\<Longrightarrow> (xs, Xa) \\<in> seq_comp_failures P Q", "moreover"], ["proof (state)\nthis:\n  (xs, Z \\<inter> X) \\<in> seq_comp_failures P Q\n\ngoal (1 subgoal):\n 1. \\<And>xs X Y Xa.\n       \\<lbrakk>(xs, X) \\<in> seq_comp_failures P Q;\n        \\<And>Xa.\n           Xa \\<subseteq> X \\<longrightarrow>\n           (xs, Xa) \\<in> seq_comp_failures P Q;\n        (xs, Y) \\<in> seq_comp_failures P Q;\n        \\<And>X.\n           X \\<subseteq> Y \\<longrightarrow>\n           (xs, X) \\<in> seq_comp_failures P Q;\n        Xa \\<subseteq> X \\<union> Y\\<rbrakk>\n       \\<Longrightarrow> (xs, Xa) \\<in> seq_comp_failures P Q", "have \"Z \\<inter> Y \\<subseteq> Y \\<longrightarrow> (xs, Z \\<inter> Y) \\<in> seq_comp_failures P Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Z \\<inter> Y \\<subseteq> Y \\<longrightarrow>\n    (xs, Z \\<inter> Y) \\<in> seq_comp_failures P Q", "using B"], ["proof (prove)\nusing this:\n  ?W \\<subseteq> Y \\<longrightarrow> (xs, ?W) \\<in> seq_comp_failures P Q\n\ngoal (1 subgoal):\n 1. Z \\<inter> Y \\<subseteq> Y \\<longrightarrow>\n    (xs, Z \\<inter> Y) \\<in> seq_comp_failures P Q", "."], ["proof (state)\nthis:\n  Z \\<inter> Y \\<subseteq> Y \\<longrightarrow>\n  (xs, Z \\<inter> Y) \\<in> seq_comp_failures P Q\n\ngoal (1 subgoal):\n 1. \\<And>xs X Y Xa.\n       \\<lbrakk>(xs, X) \\<in> seq_comp_failures P Q;\n        \\<And>Xa.\n           Xa \\<subseteq> X \\<longrightarrow>\n           (xs, Xa) \\<in> seq_comp_failures P Q;\n        (xs, Y) \\<in> seq_comp_failures P Q;\n        \\<And>X.\n           X \\<subseteq> Y \\<longrightarrow>\n           (xs, X) \\<in> seq_comp_failures P Q;\n        Xa \\<subseteq> X \\<union> Y\\<rbrakk>\n       \\<Longrightarrow> (xs, Xa) \\<in> seq_comp_failures P Q", "hence \"(xs, Z \\<inter> Y) \\<in> seq_comp_failures P Q\""], ["proof (prove)\nusing this:\n  Z \\<inter> Y \\<subseteq> Y \\<longrightarrow>\n  (xs, Z \\<inter> Y) \\<in> seq_comp_failures P Q\n\ngoal (1 subgoal):\n 1. (xs, Z \\<inter> Y) \\<in> seq_comp_failures P Q", "by simp"], ["proof (state)\nthis:\n  (xs, Z \\<inter> Y) \\<in> seq_comp_failures P Q\n\ngoal (1 subgoal):\n 1. \\<And>xs X Y Xa.\n       \\<lbrakk>(xs, X) \\<in> seq_comp_failures P Q;\n        \\<And>Xa.\n           Xa \\<subseteq> X \\<longrightarrow>\n           (xs, Xa) \\<in> seq_comp_failures P Q;\n        (xs, Y) \\<in> seq_comp_failures P Q;\n        \\<And>X.\n           X \\<subseteq> Y \\<longrightarrow>\n           (xs, X) \\<in> seq_comp_failures P Q;\n        Xa \\<subseteq> X \\<union> Y\\<rbrakk>\n       \\<Longrightarrow> (xs, Xa) \\<in> seq_comp_failures P Q", "ultimately"], ["proof (chain)\npicking this:\n  (xs, Z \\<inter> X) \\<in> seq_comp_failures P Q\n  (xs, Z \\<inter> Y) \\<in> seq_comp_failures P Q", "have \"(xs, Z \\<inter> X \\<union> Z \\<inter> Y) \\<in> seq_comp_failures P Q\""], ["proof (prove)\nusing this:\n  (xs, Z \\<inter> X) \\<in> seq_comp_failures P Q\n  (xs, Z \\<inter> Y) \\<in> seq_comp_failures P Q\n\ngoal (1 subgoal):\n 1. (xs, Z \\<inter> X \\<union> Z \\<inter> Y) \\<in> seq_comp_failures P Q", "by (rule SCF_R4)"], ["proof (state)\nthis:\n  (xs, Z \\<inter> X \\<union> Z \\<inter> Y) \\<in> seq_comp_failures P Q\n\ngoal (1 subgoal):\n 1. \\<And>xs X Y Xa.\n       \\<lbrakk>(xs, X) \\<in> seq_comp_failures P Q;\n        \\<And>Xa.\n           Xa \\<subseteq> X \\<longrightarrow>\n           (xs, Xa) \\<in> seq_comp_failures P Q;\n        (xs, Y) \\<in> seq_comp_failures P Q;\n        \\<And>X.\n           X \\<subseteq> Y \\<longrightarrow>\n           (xs, X) \\<in> seq_comp_failures P Q;\n        Xa \\<subseteq> X \\<union> Y\\<rbrakk>\n       \\<Longrightarrow> (xs, Xa) \\<in> seq_comp_failures P Q", "hence \"(xs, Z \\<inter> (X \\<union> Y)) \\<in> seq_comp_failures P Q\""], ["proof (prove)\nusing this:\n  (xs, Z \\<inter> X \\<union> Z \\<inter> Y) \\<in> seq_comp_failures P Q\n\ngoal (1 subgoal):\n 1. (xs, Z \\<inter> (X \\<union> Y)) \\<in> seq_comp_failures P Q", "by (simp add: Int_Un_distrib)"], ["proof (state)\nthis:\n  (xs, Z \\<inter> (X \\<union> Y)) \\<in> seq_comp_failures P Q\n\ngoal (1 subgoal):\n 1. \\<And>xs X Y Xa.\n       \\<lbrakk>(xs, X) \\<in> seq_comp_failures P Q;\n        \\<And>Xa.\n           Xa \\<subseteq> X \\<longrightarrow>\n           (xs, Xa) \\<in> seq_comp_failures P Q;\n        (xs, Y) \\<in> seq_comp_failures P Q;\n        \\<And>X.\n           X \\<subseteq> Y \\<longrightarrow>\n           (xs, X) \\<in> seq_comp_failures P Q;\n        Xa \\<subseteq> X \\<union> Y\\<rbrakk>\n       \\<Longrightarrow> (xs, Xa) \\<in> seq_comp_failures P Q", "moreover"], ["proof (state)\nthis:\n  (xs, Z \\<inter> (X \\<union> Y)) \\<in> seq_comp_failures P Q\n\ngoal (1 subgoal):\n 1. \\<And>xs X Y Xa.\n       \\<lbrakk>(xs, X) \\<in> seq_comp_failures P Q;\n        \\<And>Xa.\n           Xa \\<subseteq> X \\<longrightarrow>\n           (xs, Xa) \\<in> seq_comp_failures P Q;\n        (xs, Y) \\<in> seq_comp_failures P Q;\n        \\<And>X.\n           X \\<subseteq> Y \\<longrightarrow>\n           (xs, X) \\<in> seq_comp_failures P Q;\n        Xa \\<subseteq> X \\<union> Y\\<rbrakk>\n       \\<Longrightarrow> (xs, Xa) \\<in> seq_comp_failures P Q", "have \"Z \\<inter> (X \\<union> Y) = Z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Z \\<inter> (X \\<union> Y) = Z", "using C"], ["proof (prove)\nusing this:\n  Z \\<subseteq> X \\<union> Y\n\ngoal (1 subgoal):\n 1. Z \\<inter> (X \\<union> Y) = Z", "by (rule Int_absorb2)"], ["proof (state)\nthis:\n  Z \\<inter> (X \\<union> Y) = Z\n\ngoal (1 subgoal):\n 1. \\<And>xs X Y Xa.\n       \\<lbrakk>(xs, X) \\<in> seq_comp_failures P Q;\n        \\<And>Xa.\n           Xa \\<subseteq> X \\<longrightarrow>\n           (xs, Xa) \\<in> seq_comp_failures P Q;\n        (xs, Y) \\<in> seq_comp_failures P Q;\n        \\<And>X.\n           X \\<subseteq> Y \\<longrightarrow>\n           (xs, X) \\<in> seq_comp_failures P Q;\n        Xa \\<subseteq> X \\<union> Y\\<rbrakk>\n       \\<Longrightarrow> (xs, Xa) \\<in> seq_comp_failures P Q", "ultimately"], ["proof (chain)\npicking this:\n  (xs, Z \\<inter> (X \\<union> Y)) \\<in> seq_comp_failures P Q\n  Z \\<inter> (X \\<union> Y) = Z", "show \"(xs, Z) \\<in> seq_comp_failures P Q\""], ["proof (prove)\nusing this:\n  (xs, Z \\<inter> (X \\<union> Y)) \\<in> seq_comp_failures P Q\n  Z \\<inter> (X \\<union> Y) = Z\n\ngoal (1 subgoal):\n 1. (xs, Z) \\<in> seq_comp_failures P Q", "by simp"], ["proof (state)\nthis:\n  (xs, Z) \\<in> seq_comp_failures P Q\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma seq_comp_prop_4:\n  assumes WS: \"weakly_sequential P\"\n  shows \"(xs, X) \\<in> seq_comp_failures P Q \\<Longrightarrow>\n    (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n    (xs, insert x X) \\<in> seq_comp_failures P Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (xs, X) \\<in> seq_comp_failures P Q \\<Longrightarrow>\n    (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n    (xs, insert x X) \\<in> seq_comp_failures P Q", "proof (erule seq_comp_failures.induct, simp_all)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>xs X.\n       \\<lbrakk>xs \\<notin> sentences P; (xs, X) \\<in> failures P;\n        None \\<notin> set xs\\<rbrakk>\n       \\<Longrightarrow> (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n                         (xs, insert x X) \\<in> seq_comp_failures P Q\n 2. \\<And>xs X Y.\n       \\<lbrakk>xs \\<in> sentences P; (xs, X) \\<in> failures P;\n        ([], Y) \\<in> failures Q\\<rbrakk>\n       \\<Longrightarrow> (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n                         (xs, insert x (insert None X \\<inter> Y))\n                         \\<in> seq_comp_failures P Q\n 3. \\<And>xs ys Y.\n       \\<lbrakk>xs \\<in> sentences P; (ys, Y) \\<in> failures Q;\n        ys \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> (xs @ ys @ [x], {})\n                         \\<in> seq_comp_failures P Q \\<or>\n                         (xs @ ys, insert x Y) \\<in> seq_comp_failures P Q\n 4. \\<And>xs X Y.\n       \\<lbrakk>(xs, X) \\<in> seq_comp_failures P Q;\n        (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n        (xs, insert x X) \\<in> seq_comp_failures P Q;\n        (xs, Y) \\<in> seq_comp_failures P Q;\n        (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n        (xs, insert x Y) \\<in> seq_comp_failures P Q\\<rbrakk>\n       \\<Longrightarrow> (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n                         (xs, insert x (X \\<union> Y))\n                         \\<in> seq_comp_failures P Q", "fix xs X"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>xs X.\n       \\<lbrakk>xs \\<notin> sentences P; (xs, X) \\<in> failures P;\n        None \\<notin> set xs\\<rbrakk>\n       \\<Longrightarrow> (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n                         (xs, insert x X) \\<in> seq_comp_failures P Q\n 2. \\<And>xs X Y.\n       \\<lbrakk>xs \\<in> sentences P; (xs, X) \\<in> failures P;\n        ([], Y) \\<in> failures Q\\<rbrakk>\n       \\<Longrightarrow> (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n                         (xs, insert x (insert None X \\<inter> Y))\n                         \\<in> seq_comp_failures P Q\n 3. \\<And>xs ys Y.\n       \\<lbrakk>xs \\<in> sentences P; (ys, Y) \\<in> failures Q;\n        ys \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> (xs @ ys @ [x], {})\n                         \\<in> seq_comp_failures P Q \\<or>\n                         (xs @ ys, insert x Y) \\<in> seq_comp_failures P Q\n 4. \\<And>xs X Y.\n       \\<lbrakk>(xs, X) \\<in> seq_comp_failures P Q;\n        (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n        (xs, insert x X) \\<in> seq_comp_failures P Q;\n        (xs, Y) \\<in> seq_comp_failures P Q;\n        (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n        (xs, insert x Y) \\<in> seq_comp_failures P Q\\<rbrakk>\n       \\<Longrightarrow> (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n                         (xs, insert x (X \\<union> Y))\n                         \\<in> seq_comp_failures P Q", "assume\n    A: \"xs \\<notin> sentences P\" and\n    B: \"(xs, X) \\<in> failures P\" and\n    C: \"None \\<notin> set xs\""], ["proof (state)\nthis:\n  xs \\<notin> sentences P\n  (xs, X) \\<in> failures P\n  None \\<notin> set xs\n\ngoal (4 subgoals):\n 1. \\<And>xs X.\n       \\<lbrakk>xs \\<notin> sentences P; (xs, X) \\<in> failures P;\n        None \\<notin> set xs\\<rbrakk>\n       \\<Longrightarrow> (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n                         (xs, insert x X) \\<in> seq_comp_failures P Q\n 2. \\<And>xs X Y.\n       \\<lbrakk>xs \\<in> sentences P; (xs, X) \\<in> failures P;\n        ([], Y) \\<in> failures Q\\<rbrakk>\n       \\<Longrightarrow> (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n                         (xs, insert x (insert None X \\<inter> Y))\n                         \\<in> seq_comp_failures P Q\n 3. \\<And>xs ys Y.\n       \\<lbrakk>xs \\<in> sentences P; (ys, Y) \\<in> failures Q;\n        ys \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> (xs @ ys @ [x], {})\n                         \\<in> seq_comp_failures P Q \\<or>\n                         (xs @ ys, insert x Y) \\<in> seq_comp_failures P Q\n 4. \\<And>xs X Y.\n       \\<lbrakk>(xs, X) \\<in> seq_comp_failures P Q;\n        (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n        (xs, insert x X) \\<in> seq_comp_failures P Q;\n        (xs, Y) \\<in> seq_comp_failures P Q;\n        (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n        (xs, insert x Y) \\<in> seq_comp_failures P Q\\<rbrakk>\n       \\<Longrightarrow> (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n                         (xs, insert x (X \\<union> Y))\n                         \\<in> seq_comp_failures P Q", "have \"(xs @ [x], {}) \\<in> failures P \\<or>\n    (xs, insert x X) \\<in> failures P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (xs @ [x], {}) \\<in> failures P \\<or> (xs, insert x X) \\<in> failures P", "using B"], ["proof (prove)\nusing this:\n  (xs, X) \\<in> failures P\n\ngoal (1 subgoal):\n 1. (xs @ [x], {}) \\<in> failures P \\<or> (xs, insert x X) \\<in> failures P", "by (rule process_rule_4)"], ["proof (state)\nthis:\n  (xs @ [x], {}) \\<in> failures P \\<or> (xs, insert x X) \\<in> failures P\n\ngoal (4 subgoals):\n 1. \\<And>xs X.\n       \\<lbrakk>xs \\<notin> sentences P; (xs, X) \\<in> failures P;\n        None \\<notin> set xs\\<rbrakk>\n       \\<Longrightarrow> (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n                         (xs, insert x X) \\<in> seq_comp_failures P Q\n 2. \\<And>xs X Y.\n       \\<lbrakk>xs \\<in> sentences P; (xs, X) \\<in> failures P;\n        ([], Y) \\<in> failures Q\\<rbrakk>\n       \\<Longrightarrow> (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n                         (xs, insert x (insert None X \\<inter> Y))\n                         \\<in> seq_comp_failures P Q\n 3. \\<And>xs ys Y.\n       \\<lbrakk>xs \\<in> sentences P; (ys, Y) \\<in> failures Q;\n        ys \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> (xs @ ys @ [x], {})\n                         \\<in> seq_comp_failures P Q \\<or>\n                         (xs @ ys, insert x Y) \\<in> seq_comp_failures P Q\n 4. \\<And>xs X Y.\n       \\<lbrakk>(xs, X) \\<in> seq_comp_failures P Q;\n        (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n        (xs, insert x X) \\<in> seq_comp_failures P Q;\n        (xs, Y) \\<in> seq_comp_failures P Q;\n        (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n        (xs, insert x Y) \\<in> seq_comp_failures P Q\\<rbrakk>\n       \\<Longrightarrow> (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n                         (xs, insert x (X \\<union> Y))\n                         \\<in> seq_comp_failures P Q", "thus \"(xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n    (xs, insert x X) \\<in> seq_comp_failures P Q\""], ["proof (prove)\nusing this:\n  (xs @ [x], {}) \\<in> failures P \\<or> (xs, insert x X) \\<in> failures P\n\ngoal (1 subgoal):\n 1. (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n    (xs, insert x X) \\<in> seq_comp_failures P Q", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. (xs @ [x], {}) \\<in> failures P \\<Longrightarrow>\n    (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n    (xs, insert x X) \\<in> seq_comp_failures P Q\n 2. (xs, insert x X) \\<in> failures P \\<Longrightarrow>\n    (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n    (xs, insert x X) \\<in> seq_comp_failures P Q", "assume D: \"(xs @ [x], {}) \\<in> failures P\""], ["proof (state)\nthis:\n  (xs @ [x], {}) \\<in> failures P\n\ngoal (2 subgoals):\n 1. (xs @ [x], {}) \\<in> failures P \\<Longrightarrow>\n    (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n    (xs, insert x X) \\<in> seq_comp_failures P Q\n 2. (xs, insert x X) \\<in> failures P \\<Longrightarrow>\n    (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n    (xs, insert x X) \\<in> seq_comp_failures P Q", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n    (xs, insert x X) \\<in> seq_comp_failures P Q", "proof (cases \"xs @ [x] \\<in> sentences P\")"], ["proof (state)\ngoal (2 subgoals):\n 1. xs @ [x] \\<in> sentences P \\<Longrightarrow>\n    (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n    (xs, insert x X) \\<in> seq_comp_failures P Q\n 2. xs @ [x] \\<notin> sentences P \\<Longrightarrow>\n    (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n    (xs, insert x X) \\<in> seq_comp_failures P Q", "case False"], ["proof (state)\nthis:\n  xs @ [x] \\<notin> sentences P\n\ngoal (2 subgoals):\n 1. xs @ [x] \\<in> sentences P \\<Longrightarrow>\n    (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n    (xs, insert x X) \\<in> seq_comp_failures P Q\n 2. xs @ [x] \\<notin> sentences P \\<Longrightarrow>\n    (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n    (xs, insert x X) \\<in> seq_comp_failures P Q", "have \"None \\<notin> set (xs @ [x])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. None \\<notin> set (xs @ [x])", "proof (simp add: C, rule notI)"], ["proof (state)\ngoal (1 subgoal):\n 1. None = x \\<Longrightarrow> False", "assume \"None = x\""], ["proof (state)\nthis:\n  None = x\n\ngoal (1 subgoal):\n 1. None = x \\<Longrightarrow> False", "hence \"(xs @ [None], {}) \\<in> failures P\""], ["proof (prove)\nusing this:\n  None = x\n\ngoal (1 subgoal):\n 1. (xs @ [None], {}) \\<in> failures P", "using D"], ["proof (prove)\nusing this:\n  None = x\n  (xs @ [x], {}) \\<in> failures P\n\ngoal (1 subgoal):\n 1. (xs @ [None], {}) \\<in> failures P", "by simp"], ["proof (state)\nthis:\n  (xs @ [None], {}) \\<in> failures P\n\ngoal (1 subgoal):\n 1. None = x \\<Longrightarrow> False", "hence \"xs @ [None] \\<in> traces P\""], ["proof (prove)\nusing this:\n  (xs @ [None], {}) \\<in> failures P\n\ngoal (1 subgoal):\n 1. xs @ [None] \\<in> traces P", "by (rule failures_traces)"], ["proof (state)\nthis:\n  xs @ [None] \\<in> traces P\n\ngoal (1 subgoal):\n 1. None = x \\<Longrightarrow> False", "hence \"xs \\<in> sentences P\""], ["proof (prove)\nusing this:\n  xs @ [None] \\<in> traces P\n\ngoal (1 subgoal):\n 1. xs \\<in> sentences P", "by (simp add: sentences_def)"], ["proof (state)\nthis:\n  xs \\<in> sentences P\n\ngoal (1 subgoal):\n 1. None = x \\<Longrightarrow> False", "thus False"], ["proof (prove)\nusing this:\n  xs \\<in> sentences P\n\ngoal (1 subgoal):\n 1. False", "using A"], ["proof (prove)\nusing this:\n  xs \\<in> sentences P\n  xs \\<notin> sentences P\n\ngoal (1 subgoal):\n 1. False", "by contradiction"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  None \\<notin> set (xs @ [x])\n\ngoal (2 subgoals):\n 1. xs @ [x] \\<in> sentences P \\<Longrightarrow>\n    (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n    (xs, insert x X) \\<in> seq_comp_failures P Q\n 2. xs @ [x] \\<notin> sentences P \\<Longrightarrow>\n    (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n    (xs, insert x X) \\<in> seq_comp_failures P Q", "with False and D"], ["proof (chain)\npicking this:\n  xs @ [x] \\<notin> sentences P\n  (xs @ [x], {}) \\<in> failures P\n  None \\<notin> set (xs @ [x])", "have \"(xs @ [x], {}) \\<in> seq_comp_failures P Q\""], ["proof (prove)\nusing this:\n  xs @ [x] \\<notin> sentences P\n  (xs @ [x], {}) \\<in> failures P\n  None \\<notin> set (xs @ [x])\n\ngoal (1 subgoal):\n 1. (xs @ [x], {}) \\<in> seq_comp_failures P Q", "by (rule SCF_R1)"], ["proof (state)\nthis:\n  (xs @ [x], {}) \\<in> seq_comp_failures P Q\n\ngoal (2 subgoals):\n 1. xs @ [x] \\<in> sentences P \\<Longrightarrow>\n    (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n    (xs, insert x X) \\<in> seq_comp_failures P Q\n 2. xs @ [x] \\<notin> sentences P \\<Longrightarrow>\n    (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n    (xs, insert x X) \\<in> seq_comp_failures P Q", "thus ?thesis"], ["proof (prove)\nusing this:\n  (xs @ [x], {}) \\<in> seq_comp_failures P Q\n\ngoal (1 subgoal):\n 1. (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n    (xs, insert x X) \\<in> seq_comp_failures P Q", ".."], ["proof (state)\nthis:\n  (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n  (xs, insert x X) \\<in> seq_comp_failures P Q\n\ngoal (1 subgoal):\n 1. xs @ [x] \\<in> sentences P \\<Longrightarrow>\n    (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n    (xs, insert x X) \\<in> seq_comp_failures P Q", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. xs @ [x] \\<in> sentences P \\<Longrightarrow>\n    (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n    (xs, insert x X) \\<in> seq_comp_failures P Q", "case True"], ["proof (state)\nthis:\n  xs @ [x] \\<in> sentences P\n\ngoal (1 subgoal):\n 1. xs @ [x] \\<in> sentences P \\<Longrightarrow>\n    (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n    (xs, insert x X) \\<in> seq_comp_failures P Q", "have \"([], {}) \\<in> failures Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ([], {}) \\<in> failures Q", "by (rule process_rule_1)"], ["proof (state)\nthis:\n  ([], {}) \\<in> failures Q\n\ngoal (1 subgoal):\n 1. xs @ [x] \\<in> sentences P \\<Longrightarrow>\n    (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n    (xs, insert x X) \\<in> seq_comp_failures P Q", "with True and D"], ["proof (chain)\npicking this:\n  xs @ [x] \\<in> sentences P\n  (xs @ [x], {}) \\<in> failures P\n  ([], {}) \\<in> failures Q", "have \"(xs @ [x], {None} \\<inter> {}) \\<in> seq_comp_failures P Q\""], ["proof (prove)\nusing this:\n  xs @ [x] \\<in> sentences P\n  (xs @ [x], {}) \\<in> failures P\n  ([], {}) \\<in> failures Q\n\ngoal (1 subgoal):\n 1. (xs @ [x], {None} \\<inter> {}) \\<in> seq_comp_failures P Q", "by (rule SCF_R2)"], ["proof (state)\nthis:\n  (xs @ [x], {None} \\<inter> {}) \\<in> seq_comp_failures P Q\n\ngoal (1 subgoal):\n 1. xs @ [x] \\<in> sentences P \\<Longrightarrow>\n    (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n    (xs, insert x X) \\<in> seq_comp_failures P Q", "thus ?thesis"], ["proof (prove)\nusing this:\n  (xs @ [x], {None} \\<inter> {}) \\<in> seq_comp_failures P Q\n\ngoal (1 subgoal):\n 1. (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n    (xs, insert x X) \\<in> seq_comp_failures P Q", "by simp"], ["proof (state)\nthis:\n  (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n  (xs, insert x X) \\<in> seq_comp_failures P Q\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n  (xs, insert x X) \\<in> seq_comp_failures P Q\n\ngoal (1 subgoal):\n 1. (xs, insert x X) \\<in> failures P \\<Longrightarrow>\n    (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n    (xs, insert x X) \\<in> seq_comp_failures P Q", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. (xs, insert x X) \\<in> failures P \\<Longrightarrow>\n    (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n    (xs, insert x X) \\<in> seq_comp_failures P Q", "assume \"(xs, insert x X) \\<in> failures P\""], ["proof (state)\nthis:\n  (xs, insert x X) \\<in> failures P\n\ngoal (1 subgoal):\n 1. (xs, insert x X) \\<in> failures P \\<Longrightarrow>\n    (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n    (xs, insert x X) \\<in> seq_comp_failures P Q", "with A"], ["proof (chain)\npicking this:\n  xs \\<notin> sentences P\n  (xs, insert x X) \\<in> failures P", "have \"(xs, insert x X) \\<in> seq_comp_failures P Q\""], ["proof (prove)\nusing this:\n  xs \\<notin> sentences P\n  (xs, insert x X) \\<in> failures P\n\ngoal (1 subgoal):\n 1. (xs, insert x X) \\<in> seq_comp_failures P Q", "using C"], ["proof (prove)\nusing this:\n  xs \\<notin> sentences P\n  (xs, insert x X) \\<in> failures P\n  None \\<notin> set xs\n\ngoal (1 subgoal):\n 1. (xs, insert x X) \\<in> seq_comp_failures P Q", "by (rule SCF_R1)"], ["proof (state)\nthis:\n  (xs, insert x X) \\<in> seq_comp_failures P Q\n\ngoal (1 subgoal):\n 1. (xs, insert x X) \\<in> failures P \\<Longrightarrow>\n    (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n    (xs, insert x X) \\<in> seq_comp_failures P Q", "thus ?thesis"], ["proof (prove)\nusing this:\n  (xs, insert x X) \\<in> seq_comp_failures P Q\n\ngoal (1 subgoal):\n 1. (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n    (xs, insert x X) \\<in> seq_comp_failures P Q", ".."], ["proof (state)\nthis:\n  (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n  (xs, insert x X) \\<in> seq_comp_failures P Q\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n  (xs, insert x X) \\<in> seq_comp_failures P Q\n\ngoal (3 subgoals):\n 1. \\<And>xs X Y.\n       \\<lbrakk>xs \\<in> sentences P; (xs, X) \\<in> failures P;\n        ([], Y) \\<in> failures Q\\<rbrakk>\n       \\<Longrightarrow> (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n                         (xs, insert x (insert None X \\<inter> Y))\n                         \\<in> seq_comp_failures P Q\n 2. \\<And>xs ys Y.\n       \\<lbrakk>xs \\<in> sentences P; (ys, Y) \\<in> failures Q;\n        ys \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> (xs @ ys @ [x], {})\n                         \\<in> seq_comp_failures P Q \\<or>\n                         (xs @ ys, insert x Y) \\<in> seq_comp_failures P Q\n 3. \\<And>xs X Y.\n       \\<lbrakk>(xs, X) \\<in> seq_comp_failures P Q;\n        (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n        (xs, insert x X) \\<in> seq_comp_failures P Q;\n        (xs, Y) \\<in> seq_comp_failures P Q;\n        (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n        (xs, insert x Y) \\<in> seq_comp_failures P Q\\<rbrakk>\n       \\<Longrightarrow> (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n                         (xs, insert x (X \\<union> Y))\n                         \\<in> seq_comp_failures P Q", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>xs X Y.\n       \\<lbrakk>xs \\<in> sentences P; (xs, X) \\<in> failures P;\n        ([], Y) \\<in> failures Q\\<rbrakk>\n       \\<Longrightarrow> (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n                         (xs, insert x (insert None X \\<inter> Y))\n                         \\<in> seq_comp_failures P Q\n 2. \\<And>xs ys Y.\n       \\<lbrakk>xs \\<in> sentences P; (ys, Y) \\<in> failures Q;\n        ys \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> (xs @ ys @ [x], {})\n                         \\<in> seq_comp_failures P Q \\<or>\n                         (xs @ ys, insert x Y) \\<in> seq_comp_failures P Q\n 3. \\<And>xs X Y.\n       \\<lbrakk>(xs, X) \\<in> seq_comp_failures P Q;\n        (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n        (xs, insert x X) \\<in> seq_comp_failures P Q;\n        (xs, Y) \\<in> seq_comp_failures P Q;\n        (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n        (xs, insert x Y) \\<in> seq_comp_failures P Q\\<rbrakk>\n       \\<Longrightarrow> (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n                         (xs, insert x (X \\<union> Y))\n                         \\<in> seq_comp_failures P Q", "fix xs X Y"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>xs X Y.\n       \\<lbrakk>xs \\<in> sentences P; (xs, X) \\<in> failures P;\n        ([], Y) \\<in> failures Q\\<rbrakk>\n       \\<Longrightarrow> (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n                         (xs, insert x (insert None X \\<inter> Y))\n                         \\<in> seq_comp_failures P Q\n 2. \\<And>xs ys Y.\n       \\<lbrakk>xs \\<in> sentences P; (ys, Y) \\<in> failures Q;\n        ys \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> (xs @ ys @ [x], {})\n                         \\<in> seq_comp_failures P Q \\<or>\n                         (xs @ ys, insert x Y) \\<in> seq_comp_failures P Q\n 3. \\<And>xs X Y.\n       \\<lbrakk>(xs, X) \\<in> seq_comp_failures P Q;\n        (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n        (xs, insert x X) \\<in> seq_comp_failures P Q;\n        (xs, Y) \\<in> seq_comp_failures P Q;\n        (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n        (xs, insert x Y) \\<in> seq_comp_failures P Q\\<rbrakk>\n       \\<Longrightarrow> (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n                         (xs, insert x (X \\<union> Y))\n                         \\<in> seq_comp_failures P Q", "assume\n    A: \"xs \\<in> sentences P\" and\n    B: \"(xs, X) \\<in> failures P\" and\n    C: \"([], Y) \\<in> failures Q\""], ["proof (state)\nthis:\n  xs \\<in> sentences P\n  (xs, X) \\<in> failures P\n  ([], Y) \\<in> failures Q\n\ngoal (3 subgoals):\n 1. \\<And>xs X Y.\n       \\<lbrakk>xs \\<in> sentences P; (xs, X) \\<in> failures P;\n        ([], Y) \\<in> failures Q\\<rbrakk>\n       \\<Longrightarrow> (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n                         (xs, insert x (insert None X \\<inter> Y))\n                         \\<in> seq_comp_failures P Q\n 2. \\<And>xs ys Y.\n       \\<lbrakk>xs \\<in> sentences P; (ys, Y) \\<in> failures Q;\n        ys \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> (xs @ ys @ [x], {})\n                         \\<in> seq_comp_failures P Q \\<or>\n                         (xs @ ys, insert x Y) \\<in> seq_comp_failures P Q\n 3. \\<And>xs X Y.\n       \\<lbrakk>(xs, X) \\<in> seq_comp_failures P Q;\n        (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n        (xs, insert x X) \\<in> seq_comp_failures P Q;\n        (xs, Y) \\<in> seq_comp_failures P Q;\n        (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n        (xs, insert x Y) \\<in> seq_comp_failures P Q\\<rbrakk>\n       \\<Longrightarrow> (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n                         (xs, insert x (X \\<union> Y))\n                         \\<in> seq_comp_failures P Q", "show \"(xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n    (xs, insert x (insert None X \\<inter> Y)) \\<in> seq_comp_failures P Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n    (xs, insert x (insert None X \\<inter> Y)) \\<in> seq_comp_failures P Q", "proof (cases \"x = None\", simp)"], ["proof (state)\ngoal (2 subgoals):\n 1. x = None \\<Longrightarrow>\n    (xs @ [None], {}) \\<in> seq_comp_failures P Q \\<or>\n    (xs, insert None (insert None X \\<inter> Y)) \\<in> seq_comp_failures P Q\n 2. x \\<noteq> None \\<Longrightarrow>\n    (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n    (xs, insert x (insert None X \\<inter> Y)) \\<in> seq_comp_failures P Q", "case True"], ["proof (state)\nthis:\n  x = None\n\ngoal (2 subgoals):\n 1. x = None \\<Longrightarrow>\n    (xs @ [None], {}) \\<in> seq_comp_failures P Q \\<or>\n    (xs, insert None (insert None X \\<inter> Y)) \\<in> seq_comp_failures P Q\n 2. x \\<noteq> None \\<Longrightarrow>\n    (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n    (xs, insert x (insert None X \\<inter> Y)) \\<in> seq_comp_failures P Q", "have \"([] @ [None], {}) \\<in> failures Q \\<or> ([], insert None Y) \\<in> failures Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ([] @ [None], {}) \\<in> failures Q \\<or>\n    ([], insert None Y) \\<in> failures Q", "using C"], ["proof (prove)\nusing this:\n  ([], Y) \\<in> failures Q\n\ngoal (1 subgoal):\n 1. ([] @ [None], {}) \\<in> failures Q \\<or>\n    ([], insert None Y) \\<in> failures Q", "by (rule process_rule_4)"], ["proof (state)\nthis:\n  ([] @ [None], {}) \\<in> failures Q \\<or>\n  ([], insert None Y) \\<in> failures Q\n\ngoal (2 subgoals):\n 1. x = None \\<Longrightarrow>\n    (xs @ [None], {}) \\<in> seq_comp_failures P Q \\<or>\n    (xs, insert None (insert None X \\<inter> Y)) \\<in> seq_comp_failures P Q\n 2. x \\<noteq> None \\<Longrightarrow>\n    (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n    (xs, insert x (insert None X \\<inter> Y)) \\<in> seq_comp_failures P Q", "thus \"(xs @ [None], {}) \\<in> seq_comp_failures P Q \\<or>\n      (xs, insert None (insert None X \\<inter> Y)) \\<in> seq_comp_failures P Q\""], ["proof (prove)\nusing this:\n  ([] @ [None], {}) \\<in> failures Q \\<or>\n  ([], insert None Y) \\<in> failures Q\n\ngoal (1 subgoal):\n 1. (xs @ [None], {}) \\<in> seq_comp_failures P Q \\<or>\n    (xs, insert None (insert None X \\<inter> Y)) \\<in> seq_comp_failures P Q", "proof (rule disjE, simp)"], ["proof (state)\ngoal (2 subgoals):\n 1. ([None], {}) \\<in> failures Q \\<Longrightarrow>\n    (xs @ [None], {}) \\<in> seq_comp_failures P Q \\<or>\n    (xs, insert None (insert None X \\<inter> Y)) \\<in> seq_comp_failures P Q\n 2. ([], insert None Y) \\<in> failures Q \\<Longrightarrow>\n    (xs @ [None], {}) \\<in> seq_comp_failures P Q \\<or>\n    (xs, insert None (insert None X \\<inter> Y)) \\<in> seq_comp_failures P Q", "assume \"([None], {}) \\<in> failures Q\""], ["proof (state)\nthis:\n  ([None], {}) \\<in> failures Q\n\ngoal (2 subgoals):\n 1. ([None], {}) \\<in> failures Q \\<Longrightarrow>\n    (xs @ [None], {}) \\<in> seq_comp_failures P Q \\<or>\n    (xs, insert None (insert None X \\<inter> Y)) \\<in> seq_comp_failures P Q\n 2. ([], insert None Y) \\<in> failures Q \\<Longrightarrow>\n    (xs @ [None], {}) \\<in> seq_comp_failures P Q \\<or>\n    (xs, insert None (insert None X \\<inter> Y)) \\<in> seq_comp_failures P Q", "moreover"], ["proof (state)\nthis:\n  ([None], {}) \\<in> failures Q\n\ngoal (2 subgoals):\n 1. ([None], {}) \\<in> failures Q \\<Longrightarrow>\n    (xs @ [None], {}) \\<in> seq_comp_failures P Q \\<or>\n    (xs, insert None (insert None X \\<inter> Y)) \\<in> seq_comp_failures P Q\n 2. ([], insert None Y) \\<in> failures Q \\<Longrightarrow>\n    (xs @ [None], {}) \\<in> seq_comp_failures P Q \\<or>\n    (xs, insert None (insert None X \\<inter> Y)) \\<in> seq_comp_failures P Q", "have \"[None] \\<noteq> []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [None] \\<noteq> []", "by simp"], ["proof (state)\nthis:\n  [None] \\<noteq> []\n\ngoal (2 subgoals):\n 1. ([None], {}) \\<in> failures Q \\<Longrightarrow>\n    (xs @ [None], {}) \\<in> seq_comp_failures P Q \\<or>\n    (xs, insert None (insert None X \\<inter> Y)) \\<in> seq_comp_failures P Q\n 2. ([], insert None Y) \\<in> failures Q \\<Longrightarrow>\n    (xs @ [None], {}) \\<in> seq_comp_failures P Q \\<or>\n    (xs, insert None (insert None X \\<inter> Y)) \\<in> seq_comp_failures P Q", "ultimately"], ["proof (chain)\npicking this:\n  ([None], {}) \\<in> failures Q\n  [None] \\<noteq> []", "have \"(xs @ [None], {}) \\<in> seq_comp_failures P Q\""], ["proof (prove)\nusing this:\n  ([None], {}) \\<in> failures Q\n  [None] \\<noteq> []\n\ngoal (1 subgoal):\n 1. (xs @ [None], {}) \\<in> seq_comp_failures P Q", "by (rule SCF_R3 [OF A])"], ["proof (state)\nthis:\n  (xs @ [None], {}) \\<in> seq_comp_failures P Q\n\ngoal (2 subgoals):\n 1. ([None], {}) \\<in> failures Q \\<Longrightarrow>\n    (xs @ [None], {}) \\<in> seq_comp_failures P Q \\<or>\n    (xs, insert None (insert None X \\<inter> Y)) \\<in> seq_comp_failures P Q\n 2. ([], insert None Y) \\<in> failures Q \\<Longrightarrow>\n    (xs @ [None], {}) \\<in> seq_comp_failures P Q \\<or>\n    (xs, insert None (insert None X \\<inter> Y)) \\<in> seq_comp_failures P Q", "thus ?thesis"], ["proof (prove)\nusing this:\n  (xs @ [None], {}) \\<in> seq_comp_failures P Q\n\ngoal (1 subgoal):\n 1. (xs @ [None], {}) \\<in> seq_comp_failures P Q \\<or>\n    (xs, insert None (insert None X \\<inter> Y)) \\<in> seq_comp_failures P Q", ".."], ["proof (state)\nthis:\n  (xs @ [None], {}) \\<in> seq_comp_failures P Q \\<or>\n  (xs, insert None (insert None X \\<inter> Y)) \\<in> seq_comp_failures P Q\n\ngoal (1 subgoal):\n 1. ([], insert None Y) \\<in> failures Q \\<Longrightarrow>\n    (xs @ [None], {}) \\<in> seq_comp_failures P Q \\<or>\n    (xs, insert None (insert None X \\<inter> Y)) \\<in> seq_comp_failures P Q", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. ([], insert None Y) \\<in> failures Q \\<Longrightarrow>\n    (xs @ [None], {}) \\<in> seq_comp_failures P Q \\<or>\n    (xs, insert None (insert None X \\<inter> Y)) \\<in> seq_comp_failures P Q", "assume \"([], insert None Y) \\<in> failures Q\""], ["proof (state)\nthis:\n  ([], insert None Y) \\<in> failures Q\n\ngoal (1 subgoal):\n 1. ([], insert None Y) \\<in> failures Q \\<Longrightarrow>\n    (xs @ [None], {}) \\<in> seq_comp_failures P Q \\<or>\n    (xs, insert None (insert None X \\<inter> Y)) \\<in> seq_comp_failures P Q", "with A and B"], ["proof (chain)\npicking this:\n  xs \\<in> sentences P\n  (xs, X) \\<in> failures P\n  ([], insert None Y) \\<in> failures Q", "have \"(xs, insert None X \\<inter> insert None Y)\n        \\<in> seq_comp_failures P Q\""], ["proof (prove)\nusing this:\n  xs \\<in> sentences P\n  (xs, X) \\<in> failures P\n  ([], insert None Y) \\<in> failures Q\n\ngoal (1 subgoal):\n 1. (xs, insert None X \\<inter> insert None Y) \\<in> seq_comp_failures P Q", "by (rule SCF_R2)"], ["proof (state)\nthis:\n  (xs, insert None X \\<inter> insert None Y) \\<in> seq_comp_failures P Q\n\ngoal (1 subgoal):\n 1. ([], insert None Y) \\<in> failures Q \\<Longrightarrow>\n    (xs @ [None], {}) \\<in> seq_comp_failures P Q \\<or>\n    (xs, insert None (insert None X \\<inter> Y)) \\<in> seq_comp_failures P Q", "moreover"], ["proof (state)\nthis:\n  (xs, insert None X \\<inter> insert None Y) \\<in> seq_comp_failures P Q\n\ngoal (1 subgoal):\n 1. ([], insert None Y) \\<in> failures Q \\<Longrightarrow>\n    (xs @ [None], {}) \\<in> seq_comp_failures P Q \\<or>\n    (xs, insert None (insert None X \\<inter> Y)) \\<in> seq_comp_failures P Q", "have \"insert None X \\<inter> insert None Y =\n        insert None (insert None X \\<inter> Y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. insert None X \\<inter> insert None Y =\n    insert None (insert None X \\<inter> Y)", "by blast"], ["proof (state)\nthis:\n  insert None X \\<inter> insert None Y =\n  insert None (insert None X \\<inter> Y)\n\ngoal (1 subgoal):\n 1. ([], insert None Y) \\<in> failures Q \\<Longrightarrow>\n    (xs @ [None], {}) \\<in> seq_comp_failures P Q \\<or>\n    (xs, insert None (insert None X \\<inter> Y)) \\<in> seq_comp_failures P Q", "ultimately"], ["proof (chain)\npicking this:\n  (xs, insert None X \\<inter> insert None Y) \\<in> seq_comp_failures P Q\n  insert None X \\<inter> insert None Y =\n  insert None (insert None X \\<inter> Y)", "have \"(xs, insert None (insert None X \\<inter> Y))\n        \\<in> seq_comp_failures P Q\""], ["proof (prove)\nusing this:\n  (xs, insert None X \\<inter> insert None Y) \\<in> seq_comp_failures P Q\n  insert None X \\<inter> insert None Y =\n  insert None (insert None X \\<inter> Y)\n\ngoal (1 subgoal):\n 1. (xs, insert None (insert None X \\<inter> Y)) \\<in> seq_comp_failures P Q", "by simp"], ["proof (state)\nthis:\n  (xs, insert None (insert None X \\<inter> Y)) \\<in> seq_comp_failures P Q\n\ngoal (1 subgoal):\n 1. ([], insert None Y) \\<in> failures Q \\<Longrightarrow>\n    (xs @ [None], {}) \\<in> seq_comp_failures P Q \\<or>\n    (xs, insert None (insert None X \\<inter> Y)) \\<in> seq_comp_failures P Q", "thus ?thesis"], ["proof (prove)\nusing this:\n  (xs, insert None (insert None X \\<inter> Y)) \\<in> seq_comp_failures P Q\n\ngoal (1 subgoal):\n 1. (xs @ [None], {}) \\<in> seq_comp_failures P Q \\<or>\n    (xs, insert None (insert None X \\<inter> Y)) \\<in> seq_comp_failures P Q", ".."], ["proof (state)\nthis:\n  (xs @ [None], {}) \\<in> seq_comp_failures P Q \\<or>\n  (xs, insert None (insert None X \\<inter> Y)) \\<in> seq_comp_failures P Q\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (xs @ [None], {}) \\<in> seq_comp_failures P Q \\<or>\n  (xs, insert None (insert None X \\<inter> Y)) \\<in> seq_comp_failures P Q\n\ngoal (1 subgoal):\n 1. x \\<noteq> None \\<Longrightarrow>\n    (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n    (xs, insert x (insert None X \\<inter> Y)) \\<in> seq_comp_failures P Q", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<noteq> None \\<Longrightarrow>\n    (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n    (xs, insert x (insert None X \\<inter> Y)) \\<in> seq_comp_failures P Q", "case False"], ["proof (state)\nthis:\n  x \\<noteq> None\n\ngoal (1 subgoal):\n 1. x \\<noteq> None \\<Longrightarrow>\n    (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n    (xs, insert x (insert None X \\<inter> Y)) \\<in> seq_comp_failures P Q", "have \"(xs @ [x], {}) \\<in> failures P \\<or> (xs, insert x X) \\<in> failures P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (xs @ [x], {}) \\<in> failures P \\<or> (xs, insert x X) \\<in> failures P", "using B"], ["proof (prove)\nusing this:\n  (xs, X) \\<in> failures P\n\ngoal (1 subgoal):\n 1. (xs @ [x], {}) \\<in> failures P \\<or> (xs, insert x X) \\<in> failures P", "by (rule process_rule_4)"], ["proof (state)\nthis:\n  (xs @ [x], {}) \\<in> failures P \\<or> (xs, insert x X) \\<in> failures P\n\ngoal (1 subgoal):\n 1. x \\<noteq> None \\<Longrightarrow>\n    (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n    (xs, insert x (insert None X \\<inter> Y)) \\<in> seq_comp_failures P Q", "thus ?thesis"], ["proof (prove)\nusing this:\n  (xs @ [x], {}) \\<in> failures P \\<or> (xs, insert x X) \\<in> failures P\n\ngoal (1 subgoal):\n 1. (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n    (xs, insert x (insert None X \\<inter> Y)) \\<in> seq_comp_failures P Q", "proof (rule disjE, cases \"xs @ [x] \\<in> sentences P\")"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<lbrakk>(xs @ [x], {}) \\<in> failures P;\n     (xs @ [x], {}) \\<in> failures P \\<or>\n     (xs, insert x X) \\<in> failures P;\n     xs @ [x] \\<in> sentences P\\<rbrakk>\n    \\<Longrightarrow> (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n                      (xs, insert x (insert None X \\<inter> Y))\n                      \\<in> seq_comp_failures P Q\n 2. \\<lbrakk>(xs @ [x], {}) \\<in> failures P;\n     (xs @ [x], {}) \\<in> failures P \\<or>\n     (xs, insert x X) \\<in> failures P;\n     xs @ [x] \\<notin> sentences P\\<rbrakk>\n    \\<Longrightarrow> (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n                      (xs, insert x (insert None X \\<inter> Y))\n                      \\<in> seq_comp_failures P Q\n 3. (xs, insert x X) \\<in> failures P \\<Longrightarrow>\n    (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n    (xs, insert x (insert None X \\<inter> Y)) \\<in> seq_comp_failures P Q", "assume\n        D: \"xs @ [x] \\<notin> sentences P\" and\n        E: \"(xs @ [x], {}) \\<in> failures P\""], ["proof (state)\nthis:\n  xs @ [x] \\<notin> sentences P\n  (xs @ [x], {}) \\<in> failures P\n\ngoal (3 subgoals):\n 1. \\<lbrakk>(xs @ [x], {}) \\<in> failures P;\n     (xs @ [x], {}) \\<in> failures P \\<or>\n     (xs, insert x X) \\<in> failures P;\n     xs @ [x] \\<in> sentences P\\<rbrakk>\n    \\<Longrightarrow> (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n                      (xs, insert x (insert None X \\<inter> Y))\n                      \\<in> seq_comp_failures P Q\n 2. \\<lbrakk>(xs @ [x], {}) \\<in> failures P;\n     (xs @ [x], {}) \\<in> failures P \\<or>\n     (xs, insert x X) \\<in> failures P;\n     xs @ [x] \\<notin> sentences P\\<rbrakk>\n    \\<Longrightarrow> (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n                      (xs, insert x (insert None X \\<inter> Y))\n                      \\<in> seq_comp_failures P Q\n 3. (xs, insert x X) \\<in> failures P \\<Longrightarrow>\n    (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n    (xs, insert x (insert None X \\<inter> Y)) \\<in> seq_comp_failures P Q", "have \"None \\<notin> set xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. None \\<notin> set xs", "using WS and A"], ["proof (prove)\nusing this:\n  weakly_sequential P\n  xs \\<in> sentences P\n\ngoal (1 subgoal):\n 1. None \\<notin> set xs", "by (rule weakly_seq_sentences_none)"], ["proof (state)\nthis:\n  None \\<notin> set xs\n\ngoal (3 subgoals):\n 1. \\<lbrakk>(xs @ [x], {}) \\<in> failures P;\n     (xs @ [x], {}) \\<in> failures P \\<or>\n     (xs, insert x X) \\<in> failures P;\n     xs @ [x] \\<in> sentences P\\<rbrakk>\n    \\<Longrightarrow> (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n                      (xs, insert x (insert None X \\<inter> Y))\n                      \\<in> seq_comp_failures P Q\n 2. \\<lbrakk>(xs @ [x], {}) \\<in> failures P;\n     (xs @ [x], {}) \\<in> failures P \\<or>\n     (xs, insert x X) \\<in> failures P;\n     xs @ [x] \\<notin> sentences P\\<rbrakk>\n    \\<Longrightarrow> (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n                      (xs, insert x (insert None X \\<inter> Y))\n                      \\<in> seq_comp_failures P Q\n 3. (xs, insert x X) \\<in> failures P \\<Longrightarrow>\n    (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n    (xs, insert x (insert None X \\<inter> Y)) \\<in> seq_comp_failures P Q", "hence \"None \\<notin> set (xs @ [x])\""], ["proof (prove)\nusing this:\n  None \\<notin> set xs\n\ngoal (1 subgoal):\n 1. None \\<notin> set (xs @ [x])", "using False"], ["proof (prove)\nusing this:\n  None \\<notin> set xs\n  x \\<noteq> None\n\ngoal (1 subgoal):\n 1. None \\<notin> set (xs @ [x])", "by (simp del: not_None_eq)"], ["proof (state)\nthis:\n  None \\<notin> set (xs @ [x])\n\ngoal (3 subgoals):\n 1. \\<lbrakk>(xs @ [x], {}) \\<in> failures P;\n     (xs @ [x], {}) \\<in> failures P \\<or>\n     (xs, insert x X) \\<in> failures P;\n     xs @ [x] \\<in> sentences P\\<rbrakk>\n    \\<Longrightarrow> (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n                      (xs, insert x (insert None X \\<inter> Y))\n                      \\<in> seq_comp_failures P Q\n 2. \\<lbrakk>(xs @ [x], {}) \\<in> failures P;\n     (xs @ [x], {}) \\<in> failures P \\<or>\n     (xs, insert x X) \\<in> failures P;\n     xs @ [x] \\<notin> sentences P\\<rbrakk>\n    \\<Longrightarrow> (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n                      (xs, insert x (insert None X \\<inter> Y))\n                      \\<in> seq_comp_failures P Q\n 3. (xs, insert x X) \\<in> failures P \\<Longrightarrow>\n    (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n    (xs, insert x (insert None X \\<inter> Y)) \\<in> seq_comp_failures P Q", "with D and E"], ["proof (chain)\npicking this:\n  xs @ [x] \\<notin> sentences P\n  (xs @ [x], {}) \\<in> failures P\n  None \\<notin> set (xs @ [x])", "have \"(xs @ [x], {}) \\<in> seq_comp_failures P Q\""], ["proof (prove)\nusing this:\n  xs @ [x] \\<notin> sentences P\n  (xs @ [x], {}) \\<in> failures P\n  None \\<notin> set (xs @ [x])\n\ngoal (1 subgoal):\n 1. (xs @ [x], {}) \\<in> seq_comp_failures P Q", "by (rule SCF_R1)"], ["proof (state)\nthis:\n  (xs @ [x], {}) \\<in> seq_comp_failures P Q\n\ngoal (3 subgoals):\n 1. \\<lbrakk>(xs @ [x], {}) \\<in> failures P;\n     (xs @ [x], {}) \\<in> failures P \\<or>\n     (xs, insert x X) \\<in> failures P;\n     xs @ [x] \\<in> sentences P\\<rbrakk>\n    \\<Longrightarrow> (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n                      (xs, insert x (insert None X \\<inter> Y))\n                      \\<in> seq_comp_failures P Q\n 2. \\<lbrakk>(xs @ [x], {}) \\<in> failures P;\n     (xs @ [x], {}) \\<in> failures P \\<or>\n     (xs, insert x X) \\<in> failures P;\n     xs @ [x] \\<notin> sentences P\\<rbrakk>\n    \\<Longrightarrow> (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n                      (xs, insert x (insert None X \\<inter> Y))\n                      \\<in> seq_comp_failures P Q\n 3. (xs, insert x X) \\<in> failures P \\<Longrightarrow>\n    (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n    (xs, insert x (insert None X \\<inter> Y)) \\<in> seq_comp_failures P Q", "thus ?thesis"], ["proof (prove)\nusing this:\n  (xs @ [x], {}) \\<in> seq_comp_failures P Q\n\ngoal (1 subgoal):\n 1. (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n    (xs, insert x (insert None X \\<inter> Y)) \\<in> seq_comp_failures P Q", ".."], ["proof (state)\nthis:\n  (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n  (xs, insert x (insert None X \\<inter> Y)) \\<in> seq_comp_failures P Q\n\ngoal (2 subgoals):\n 1. \\<lbrakk>(xs @ [x], {}) \\<in> failures P;\n     (xs @ [x], {}) \\<in> failures P \\<or>\n     (xs, insert x X) \\<in> failures P;\n     xs @ [x] \\<in> sentences P\\<rbrakk>\n    \\<Longrightarrow> (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n                      (xs, insert x (insert None X \\<inter> Y))\n                      \\<in> seq_comp_failures P Q\n 2. (xs, insert x X) \\<in> failures P \\<Longrightarrow>\n    (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n    (xs, insert x (insert None X \\<inter> Y)) \\<in> seq_comp_failures P Q", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>(xs @ [x], {}) \\<in> failures P;\n     (xs @ [x], {}) \\<in> failures P \\<or>\n     (xs, insert x X) \\<in> failures P;\n     xs @ [x] \\<in> sentences P\\<rbrakk>\n    \\<Longrightarrow> (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n                      (xs, insert x (insert None X \\<inter> Y))\n                      \\<in> seq_comp_failures P Q\n 2. (xs, insert x X) \\<in> failures P \\<Longrightarrow>\n    (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n    (xs, insert x (insert None X \\<inter> Y)) \\<in> seq_comp_failures P Q", "assume\n        \"xs @ [x] \\<in> sentences P\" and\n        \"(xs @ [x], {}) \\<in> failures P\""], ["proof (state)\nthis:\n  xs @ [x] \\<in> sentences P\n  (xs @ [x], {}) \\<in> failures P\n\ngoal (2 subgoals):\n 1. \\<lbrakk>(xs @ [x], {}) \\<in> failures P;\n     (xs @ [x], {}) \\<in> failures P \\<or>\n     (xs, insert x X) \\<in> failures P;\n     xs @ [x] \\<in> sentences P\\<rbrakk>\n    \\<Longrightarrow> (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n                      (xs, insert x (insert None X \\<inter> Y))\n                      \\<in> seq_comp_failures P Q\n 2. (xs, insert x X) \\<in> failures P \\<Longrightarrow>\n    (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n    (xs, insert x (insert None X \\<inter> Y)) \\<in> seq_comp_failures P Q", "moreover"], ["proof (state)\nthis:\n  xs @ [x] \\<in> sentences P\n  (xs @ [x], {}) \\<in> failures P\n\ngoal (2 subgoals):\n 1. \\<lbrakk>(xs @ [x], {}) \\<in> failures P;\n     (xs @ [x], {}) \\<in> failures P \\<or>\n     (xs, insert x X) \\<in> failures P;\n     xs @ [x] \\<in> sentences P\\<rbrakk>\n    \\<Longrightarrow> (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n                      (xs, insert x (insert None X \\<inter> Y))\n                      \\<in> seq_comp_failures P Q\n 2. (xs, insert x X) \\<in> failures P \\<Longrightarrow>\n    (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n    (xs, insert x (insert None X \\<inter> Y)) \\<in> seq_comp_failures P Q", "have \"([], {}) \\<in> failures Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ([], {}) \\<in> failures Q", "by (rule process_rule_1)"], ["proof (state)\nthis:\n  ([], {}) \\<in> failures Q\n\ngoal (2 subgoals):\n 1. \\<lbrakk>(xs @ [x], {}) \\<in> failures P;\n     (xs @ [x], {}) \\<in> failures P \\<or>\n     (xs, insert x X) \\<in> failures P;\n     xs @ [x] \\<in> sentences P\\<rbrakk>\n    \\<Longrightarrow> (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n                      (xs, insert x (insert None X \\<inter> Y))\n                      \\<in> seq_comp_failures P Q\n 2. (xs, insert x X) \\<in> failures P \\<Longrightarrow>\n    (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n    (xs, insert x (insert None X \\<inter> Y)) \\<in> seq_comp_failures P Q", "ultimately"], ["proof (chain)\npicking this:\n  xs @ [x] \\<in> sentences P\n  (xs @ [x], {}) \\<in> failures P\n  ([], {}) \\<in> failures Q", "have \"(xs @ [x], {None} \\<inter> {}) \\<in> seq_comp_failures P Q\""], ["proof (prove)\nusing this:\n  xs @ [x] \\<in> sentences P\n  (xs @ [x], {}) \\<in> failures P\n  ([], {}) \\<in> failures Q\n\ngoal (1 subgoal):\n 1. (xs @ [x], {None} \\<inter> {}) \\<in> seq_comp_failures P Q", "by (rule SCF_R2)"], ["proof (state)\nthis:\n  (xs @ [x], {None} \\<inter> {}) \\<in> seq_comp_failures P Q\n\ngoal (2 subgoals):\n 1. \\<lbrakk>(xs @ [x], {}) \\<in> failures P;\n     (xs @ [x], {}) \\<in> failures P \\<or>\n     (xs, insert x X) \\<in> failures P;\n     xs @ [x] \\<in> sentences P\\<rbrakk>\n    \\<Longrightarrow> (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n                      (xs, insert x (insert None X \\<inter> Y))\n                      \\<in> seq_comp_failures P Q\n 2. (xs, insert x X) \\<in> failures P \\<Longrightarrow>\n    (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n    (xs, insert x (insert None X \\<inter> Y)) \\<in> seq_comp_failures P Q", "thus ?thesis"], ["proof (prove)\nusing this:\n  (xs @ [x], {None} \\<inter> {}) \\<in> seq_comp_failures P Q\n\ngoal (1 subgoal):\n 1. (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n    (xs, insert x (insert None X \\<inter> Y)) \\<in> seq_comp_failures P Q", "by simp"], ["proof (state)\nthis:\n  (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n  (xs, insert x (insert None X \\<inter> Y)) \\<in> seq_comp_failures P Q\n\ngoal (1 subgoal):\n 1. (xs, insert x X) \\<in> failures P \\<Longrightarrow>\n    (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n    (xs, insert x (insert None X \\<inter> Y)) \\<in> seq_comp_failures P Q", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. (xs, insert x X) \\<in> failures P \\<Longrightarrow>\n    (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n    (xs, insert x (insert None X \\<inter> Y)) \\<in> seq_comp_failures P Q", "assume D: \"(xs, insert x X) \\<in> failures P\""], ["proof (state)\nthis:\n  (xs, insert x X) \\<in> failures P\n\ngoal (1 subgoal):\n 1. (xs, insert x X) \\<in> failures P \\<Longrightarrow>\n    (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n    (xs, insert x (insert None X \\<inter> Y)) \\<in> seq_comp_failures P Q", "have \"([] @ [x], {}) \\<in> failures Q \\<or> ([], insert x Y) \\<in> failures Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ([] @ [x], {}) \\<in> failures Q \\<or> ([], insert x Y) \\<in> failures Q", "using C"], ["proof (prove)\nusing this:\n  ([], Y) \\<in> failures Q\n\ngoal (1 subgoal):\n 1. ([] @ [x], {}) \\<in> failures Q \\<or> ([], insert x Y) \\<in> failures Q", "by (rule process_rule_4)"], ["proof (state)\nthis:\n  ([] @ [x], {}) \\<in> failures Q \\<or> ([], insert x Y) \\<in> failures Q\n\ngoal (1 subgoal):\n 1. (xs, insert x X) \\<in> failures P \\<Longrightarrow>\n    (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n    (xs, insert x (insert None X \\<inter> Y)) \\<in> seq_comp_failures P Q", "thus ?thesis"], ["proof (prove)\nusing this:\n  ([] @ [x], {}) \\<in> failures Q \\<or> ([], insert x Y) \\<in> failures Q\n\ngoal (1 subgoal):\n 1. (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n    (xs, insert x (insert None X \\<inter> Y)) \\<in> seq_comp_failures P Q", "proof (rule disjE, simp)"], ["proof (state)\ngoal (2 subgoals):\n 1. ([x], {}) \\<in> failures Q \\<Longrightarrow>\n    (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n    (xs, insert x (insert None X \\<inter> Y)) \\<in> seq_comp_failures P Q\n 2. ([], insert x Y) \\<in> failures Q \\<Longrightarrow>\n    (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n    (xs, insert x (insert None X \\<inter> Y)) \\<in> seq_comp_failures P Q", "assume \"([x], {}) \\<in> failures Q\""], ["proof (state)\nthis:\n  ([x], {}) \\<in> failures Q\n\ngoal (2 subgoals):\n 1. ([x], {}) \\<in> failures Q \\<Longrightarrow>\n    (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n    (xs, insert x (insert None X \\<inter> Y)) \\<in> seq_comp_failures P Q\n 2. ([], insert x Y) \\<in> failures Q \\<Longrightarrow>\n    (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n    (xs, insert x (insert None X \\<inter> Y)) \\<in> seq_comp_failures P Q", "moreover"], ["proof (state)\nthis:\n  ([x], {}) \\<in> failures Q\n\ngoal (2 subgoals):\n 1. ([x], {}) \\<in> failures Q \\<Longrightarrow>\n    (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n    (xs, insert x (insert None X \\<inter> Y)) \\<in> seq_comp_failures P Q\n 2. ([], insert x Y) \\<in> failures Q \\<Longrightarrow>\n    (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n    (xs, insert x (insert None X \\<inter> Y)) \\<in> seq_comp_failures P Q", "have \"[x] \\<noteq> []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [x] \\<noteq> []", "by simp"], ["proof (state)\nthis:\n  [x] \\<noteq> []\n\ngoal (2 subgoals):\n 1. ([x], {}) \\<in> failures Q \\<Longrightarrow>\n    (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n    (xs, insert x (insert None X \\<inter> Y)) \\<in> seq_comp_failures P Q\n 2. ([], insert x Y) \\<in> failures Q \\<Longrightarrow>\n    (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n    (xs, insert x (insert None X \\<inter> Y)) \\<in> seq_comp_failures P Q", "ultimately"], ["proof (chain)\npicking this:\n  ([x], {}) \\<in> failures Q\n  [x] \\<noteq> []", "have \"(xs @ [x], {}) \\<in> seq_comp_failures P Q\""], ["proof (prove)\nusing this:\n  ([x], {}) \\<in> failures Q\n  [x] \\<noteq> []\n\ngoal (1 subgoal):\n 1. (xs @ [x], {}) \\<in> seq_comp_failures P Q", "by (rule SCF_R3 [OF A])"], ["proof (state)\nthis:\n  (xs @ [x], {}) \\<in> seq_comp_failures P Q\n\ngoal (2 subgoals):\n 1. ([x], {}) \\<in> failures Q \\<Longrightarrow>\n    (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n    (xs, insert x (insert None X \\<inter> Y)) \\<in> seq_comp_failures P Q\n 2. ([], insert x Y) \\<in> failures Q \\<Longrightarrow>\n    (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n    (xs, insert x (insert None X \\<inter> Y)) \\<in> seq_comp_failures P Q", "thus ?thesis"], ["proof (prove)\nusing this:\n  (xs @ [x], {}) \\<in> seq_comp_failures P Q\n\ngoal (1 subgoal):\n 1. (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n    (xs, insert x (insert None X \\<inter> Y)) \\<in> seq_comp_failures P Q", ".."], ["proof (state)\nthis:\n  (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n  (xs, insert x (insert None X \\<inter> Y)) \\<in> seq_comp_failures P Q\n\ngoal (1 subgoal):\n 1. ([], insert x Y) \\<in> failures Q \\<Longrightarrow>\n    (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n    (xs, insert x (insert None X \\<inter> Y)) \\<in> seq_comp_failures P Q", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. ([], insert x Y) \\<in> failures Q \\<Longrightarrow>\n    (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n    (xs, insert x (insert None X \\<inter> Y)) \\<in> seq_comp_failures P Q", "assume \"([], insert x Y) \\<in> failures Q\""], ["proof (state)\nthis:\n  ([], insert x Y) \\<in> failures Q\n\ngoal (1 subgoal):\n 1. ([], insert x Y) \\<in> failures Q \\<Longrightarrow>\n    (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n    (xs, insert x (insert None X \\<inter> Y)) \\<in> seq_comp_failures P Q", "with A and D"], ["proof (chain)\npicking this:\n  xs \\<in> sentences P\n  (xs, insert x X) \\<in> failures P\n  ([], insert x Y) \\<in> failures Q", "have \"(xs, insert None (insert x X) \\<inter> insert x Y)\n          \\<in> seq_comp_failures P Q\""], ["proof (prove)\nusing this:\n  xs \\<in> sentences P\n  (xs, insert x X) \\<in> failures P\n  ([], insert x Y) \\<in> failures Q\n\ngoal (1 subgoal):\n 1. (xs, insert None (insert x X) \\<inter> insert x Y)\n    \\<in> seq_comp_failures P Q", "by (rule SCF_R2)"], ["proof (state)\nthis:\n  (xs, insert None (insert x X) \\<inter> insert x Y)\n  \\<in> seq_comp_failures P Q\n\ngoal (1 subgoal):\n 1. ([], insert x Y) \\<in> failures Q \\<Longrightarrow>\n    (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n    (xs, insert x (insert None X \\<inter> Y)) \\<in> seq_comp_failures P Q", "moreover"], ["proof (state)\nthis:\n  (xs, insert None (insert x X) \\<inter> insert x Y)\n  \\<in> seq_comp_failures P Q\n\ngoal (1 subgoal):\n 1. ([], insert x Y) \\<in> failures Q \\<Longrightarrow>\n    (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n    (xs, insert x (insert None X \\<inter> Y)) \\<in> seq_comp_failures P Q", "have \"insert None (insert x X) \\<inter> insert x Y =\n          insert x (insert None X \\<inter> Y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. insert None (insert x X) \\<inter> insert x Y =\n    insert x (insert None X \\<inter> Y)", "by blast"], ["proof (state)\nthis:\n  insert None (insert x X) \\<inter> insert x Y =\n  insert x (insert None X \\<inter> Y)\n\ngoal (1 subgoal):\n 1. ([], insert x Y) \\<in> failures Q \\<Longrightarrow>\n    (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n    (xs, insert x (insert None X \\<inter> Y)) \\<in> seq_comp_failures P Q", "ultimately"], ["proof (chain)\npicking this:\n  (xs, insert None (insert x X) \\<inter> insert x Y)\n  \\<in> seq_comp_failures P Q\n  insert None (insert x X) \\<inter> insert x Y =\n  insert x (insert None X \\<inter> Y)", "have \"(xs, insert x (insert None X \\<inter> Y))\n          \\<in> seq_comp_failures P Q\""], ["proof (prove)\nusing this:\n  (xs, insert None (insert x X) \\<inter> insert x Y)\n  \\<in> seq_comp_failures P Q\n  insert None (insert x X) \\<inter> insert x Y =\n  insert x (insert None X \\<inter> Y)\n\ngoal (1 subgoal):\n 1. (xs, insert x (insert None X \\<inter> Y)) \\<in> seq_comp_failures P Q", "by simp"], ["proof (state)\nthis:\n  (xs, insert x (insert None X \\<inter> Y)) \\<in> seq_comp_failures P Q\n\ngoal (1 subgoal):\n 1. ([], insert x Y) \\<in> failures Q \\<Longrightarrow>\n    (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n    (xs, insert x (insert None X \\<inter> Y)) \\<in> seq_comp_failures P Q", "thus ?thesis"], ["proof (prove)\nusing this:\n  (xs, insert x (insert None X \\<inter> Y)) \\<in> seq_comp_failures P Q\n\ngoal (1 subgoal):\n 1. (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n    (xs, insert x (insert None X \\<inter> Y)) \\<in> seq_comp_failures P Q", ".."], ["proof (state)\nthis:\n  (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n  (xs, insert x (insert None X \\<inter> Y)) \\<in> seq_comp_failures P Q\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n  (xs, insert x (insert None X \\<inter> Y)) \\<in> seq_comp_failures P Q\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n  (xs, insert x (insert None X \\<inter> Y)) \\<in> seq_comp_failures P Q\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n  (xs, insert x (insert None X \\<inter> Y)) \\<in> seq_comp_failures P Q\n\ngoal (2 subgoals):\n 1. \\<And>xs ys Y.\n       \\<lbrakk>xs \\<in> sentences P; (ys, Y) \\<in> failures Q;\n        ys \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> (xs @ ys @ [x], {})\n                         \\<in> seq_comp_failures P Q \\<or>\n                         (xs @ ys, insert x Y) \\<in> seq_comp_failures P Q\n 2. \\<And>xs X Y.\n       \\<lbrakk>(xs, X) \\<in> seq_comp_failures P Q;\n        (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n        (xs, insert x X) \\<in> seq_comp_failures P Q;\n        (xs, Y) \\<in> seq_comp_failures P Q;\n        (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n        (xs, insert x Y) \\<in> seq_comp_failures P Q\\<rbrakk>\n       \\<Longrightarrow> (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n                         (xs, insert x (X \\<union> Y))\n                         \\<in> seq_comp_failures P Q", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>xs ys Y.\n       \\<lbrakk>xs \\<in> sentences P; (ys, Y) \\<in> failures Q;\n        ys \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> (xs @ ys @ [x], {})\n                         \\<in> seq_comp_failures P Q \\<or>\n                         (xs @ ys, insert x Y) \\<in> seq_comp_failures P Q\n 2. \\<And>xs X Y.\n       \\<lbrakk>(xs, X) \\<in> seq_comp_failures P Q;\n        (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n        (xs, insert x X) \\<in> seq_comp_failures P Q;\n        (xs, Y) \\<in> seq_comp_failures P Q;\n        (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n        (xs, insert x Y) \\<in> seq_comp_failures P Q\\<rbrakk>\n       \\<Longrightarrow> (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n                         (xs, insert x (X \\<union> Y))\n                         \\<in> seq_comp_failures P Q", "fix xs ys Y"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>xs ys Y.\n       \\<lbrakk>xs \\<in> sentences P; (ys, Y) \\<in> failures Q;\n        ys \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> (xs @ ys @ [x], {})\n                         \\<in> seq_comp_failures P Q \\<or>\n                         (xs @ ys, insert x Y) \\<in> seq_comp_failures P Q\n 2. \\<And>xs X Y.\n       \\<lbrakk>(xs, X) \\<in> seq_comp_failures P Q;\n        (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n        (xs, insert x X) \\<in> seq_comp_failures P Q;\n        (xs, Y) \\<in> seq_comp_failures P Q;\n        (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n        (xs, insert x Y) \\<in> seq_comp_failures P Q\\<rbrakk>\n       \\<Longrightarrow> (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n                         (xs, insert x (X \\<union> Y))\n                         \\<in> seq_comp_failures P Q", "assume\n    A: \"xs \\<in> sentences P\" and\n    B: \"(ys, Y) \\<in> failures Q\" and\n    C: \"ys \\<noteq> []\""], ["proof (state)\nthis:\n  xs \\<in> sentences P\n  (ys, Y) \\<in> failures Q\n  ys \\<noteq> []\n\ngoal (2 subgoals):\n 1. \\<And>xs ys Y.\n       \\<lbrakk>xs \\<in> sentences P; (ys, Y) \\<in> failures Q;\n        ys \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> (xs @ ys @ [x], {})\n                         \\<in> seq_comp_failures P Q \\<or>\n                         (xs @ ys, insert x Y) \\<in> seq_comp_failures P Q\n 2. \\<And>xs X Y.\n       \\<lbrakk>(xs, X) \\<in> seq_comp_failures P Q;\n        (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n        (xs, insert x X) \\<in> seq_comp_failures P Q;\n        (xs, Y) \\<in> seq_comp_failures P Q;\n        (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n        (xs, insert x Y) \\<in> seq_comp_failures P Q\\<rbrakk>\n       \\<Longrightarrow> (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n                         (xs, insert x (X \\<union> Y))\n                         \\<in> seq_comp_failures P Q", "have \"(ys @ [x], {}) \\<in> failures Q \\<or> (ys, insert x Y) \\<in> failures Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (ys @ [x], {}) \\<in> failures Q \\<or> (ys, insert x Y) \\<in> failures Q", "using B"], ["proof (prove)\nusing this:\n  (ys, Y) \\<in> failures Q\n\ngoal (1 subgoal):\n 1. (ys @ [x], {}) \\<in> failures Q \\<or> (ys, insert x Y) \\<in> failures Q", "by (rule process_rule_4)"], ["proof (state)\nthis:\n  (ys @ [x], {}) \\<in> failures Q \\<or> (ys, insert x Y) \\<in> failures Q\n\ngoal (2 subgoals):\n 1. \\<And>xs ys Y.\n       \\<lbrakk>xs \\<in> sentences P; (ys, Y) \\<in> failures Q;\n        ys \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> (xs @ ys @ [x], {})\n                         \\<in> seq_comp_failures P Q \\<or>\n                         (xs @ ys, insert x Y) \\<in> seq_comp_failures P Q\n 2. \\<And>xs X Y.\n       \\<lbrakk>(xs, X) \\<in> seq_comp_failures P Q;\n        (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n        (xs, insert x X) \\<in> seq_comp_failures P Q;\n        (xs, Y) \\<in> seq_comp_failures P Q;\n        (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n        (xs, insert x Y) \\<in> seq_comp_failures P Q\\<rbrakk>\n       \\<Longrightarrow> (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n                         (xs, insert x (X \\<union> Y))\n                         \\<in> seq_comp_failures P Q", "thus \"(xs @ ys @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n    (xs @ ys, insert x Y) \\<in> seq_comp_failures P Q\""], ["proof (prove)\nusing this:\n  (ys @ [x], {}) \\<in> failures Q \\<or> (ys, insert x Y) \\<in> failures Q\n\ngoal (1 subgoal):\n 1. (xs @ ys @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n    (xs @ ys, insert x Y) \\<in> seq_comp_failures P Q", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. (ys @ [x], {}) \\<in> failures Q \\<Longrightarrow>\n    (xs @ ys @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n    (xs @ ys, insert x Y) \\<in> seq_comp_failures P Q\n 2. (ys, insert x Y) \\<in> failures Q \\<Longrightarrow>\n    (xs @ ys @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n    (xs @ ys, insert x Y) \\<in> seq_comp_failures P Q", "assume \"(ys @ [x], {}) \\<in> failures Q\""], ["proof (state)\nthis:\n  (ys @ [x], {}) \\<in> failures Q\n\ngoal (2 subgoals):\n 1. (ys @ [x], {}) \\<in> failures Q \\<Longrightarrow>\n    (xs @ ys @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n    (xs @ ys, insert x Y) \\<in> seq_comp_failures P Q\n 2. (ys, insert x Y) \\<in> failures Q \\<Longrightarrow>\n    (xs @ ys @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n    (xs @ ys, insert x Y) \\<in> seq_comp_failures P Q", "moreover"], ["proof (state)\nthis:\n  (ys @ [x], {}) \\<in> failures Q\n\ngoal (2 subgoals):\n 1. (ys @ [x], {}) \\<in> failures Q \\<Longrightarrow>\n    (xs @ ys @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n    (xs @ ys, insert x Y) \\<in> seq_comp_failures P Q\n 2. (ys, insert x Y) \\<in> failures Q \\<Longrightarrow>\n    (xs @ ys @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n    (xs @ ys, insert x Y) \\<in> seq_comp_failures P Q", "have \"ys @ [x] \\<noteq> []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ys @ [x] \\<noteq> []", "by simp"], ["proof (state)\nthis:\n  ys @ [x] \\<noteq> []\n\ngoal (2 subgoals):\n 1. (ys @ [x], {}) \\<in> failures Q \\<Longrightarrow>\n    (xs @ ys @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n    (xs @ ys, insert x Y) \\<in> seq_comp_failures P Q\n 2. (ys, insert x Y) \\<in> failures Q \\<Longrightarrow>\n    (xs @ ys @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n    (xs @ ys, insert x Y) \\<in> seq_comp_failures P Q", "ultimately"], ["proof (chain)\npicking this:\n  (ys @ [x], {}) \\<in> failures Q\n  ys @ [x] \\<noteq> []", "have \"(xs @ ys @ [x], {}) \\<in> seq_comp_failures P Q\""], ["proof (prove)\nusing this:\n  (ys @ [x], {}) \\<in> failures Q\n  ys @ [x] \\<noteq> []\n\ngoal (1 subgoal):\n 1. (xs @ ys @ [x], {}) \\<in> seq_comp_failures P Q", "by (rule SCF_R3 [OF A])"], ["proof (state)\nthis:\n  (xs @ ys @ [x], {}) \\<in> seq_comp_failures P Q\n\ngoal (2 subgoals):\n 1. (ys @ [x], {}) \\<in> failures Q \\<Longrightarrow>\n    (xs @ ys @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n    (xs @ ys, insert x Y) \\<in> seq_comp_failures P Q\n 2. (ys, insert x Y) \\<in> failures Q \\<Longrightarrow>\n    (xs @ ys @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n    (xs @ ys, insert x Y) \\<in> seq_comp_failures P Q", "thus ?thesis"], ["proof (prove)\nusing this:\n  (xs @ ys @ [x], {}) \\<in> seq_comp_failures P Q\n\ngoal (1 subgoal):\n 1. (xs @ ys @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n    (xs @ ys, insert x Y) \\<in> seq_comp_failures P Q", ".."], ["proof (state)\nthis:\n  (xs @ ys @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n  (xs @ ys, insert x Y) \\<in> seq_comp_failures P Q\n\ngoal (1 subgoal):\n 1. (ys, insert x Y) \\<in> failures Q \\<Longrightarrow>\n    (xs @ ys @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n    (xs @ ys, insert x Y) \\<in> seq_comp_failures P Q", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. (ys, insert x Y) \\<in> failures Q \\<Longrightarrow>\n    (xs @ ys @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n    (xs @ ys, insert x Y) \\<in> seq_comp_failures P Q", "assume \"(ys, insert x Y) \\<in> failures Q\""], ["proof (state)\nthis:\n  (ys, insert x Y) \\<in> failures Q\n\ngoal (1 subgoal):\n 1. (ys, insert x Y) \\<in> failures Q \\<Longrightarrow>\n    (xs @ ys @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n    (xs @ ys, insert x Y) \\<in> seq_comp_failures P Q", "with A"], ["proof (chain)\npicking this:\n  xs \\<in> sentences P\n  (ys, insert x Y) \\<in> failures Q", "have \"(xs @ ys, insert x Y) \\<in> seq_comp_failures P Q\""], ["proof (prove)\nusing this:\n  xs \\<in> sentences P\n  (ys, insert x Y) \\<in> failures Q\n\ngoal (1 subgoal):\n 1. (xs @ ys, insert x Y) \\<in> seq_comp_failures P Q", "using C"], ["proof (prove)\nusing this:\n  xs \\<in> sentences P\n  (ys, insert x Y) \\<in> failures Q\n  ys \\<noteq> []\n\ngoal (1 subgoal):\n 1. (xs @ ys, insert x Y) \\<in> seq_comp_failures P Q", "by (rule SCF_R3)"], ["proof (state)\nthis:\n  (xs @ ys, insert x Y) \\<in> seq_comp_failures P Q\n\ngoal (1 subgoal):\n 1. (ys, insert x Y) \\<in> failures Q \\<Longrightarrow>\n    (xs @ ys @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n    (xs @ ys, insert x Y) \\<in> seq_comp_failures P Q", "thus ?thesis"], ["proof (prove)\nusing this:\n  (xs @ ys, insert x Y) \\<in> seq_comp_failures P Q\n\ngoal (1 subgoal):\n 1. (xs @ ys @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n    (xs @ ys, insert x Y) \\<in> seq_comp_failures P Q", ".."], ["proof (state)\nthis:\n  (xs @ ys @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n  (xs @ ys, insert x Y) \\<in> seq_comp_failures P Q\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (xs @ ys @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n  (xs @ ys, insert x Y) \\<in> seq_comp_failures P Q\n\ngoal (1 subgoal):\n 1. \\<And>xs X Y.\n       \\<lbrakk>(xs, X) \\<in> seq_comp_failures P Q;\n        (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n        (xs, insert x X) \\<in> seq_comp_failures P Q;\n        (xs, Y) \\<in> seq_comp_failures P Q;\n        (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n        (xs, insert x Y) \\<in> seq_comp_failures P Q\\<rbrakk>\n       \\<Longrightarrow> (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n                         (xs, insert x (X \\<union> Y))\n                         \\<in> seq_comp_failures P Q", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xs X Y.\n       \\<lbrakk>(xs, X) \\<in> seq_comp_failures P Q;\n        (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n        (xs, insert x X) \\<in> seq_comp_failures P Q;\n        (xs, Y) \\<in> seq_comp_failures P Q;\n        (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n        (xs, insert x Y) \\<in> seq_comp_failures P Q\\<rbrakk>\n       \\<Longrightarrow> (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n                         (xs, insert x (X \\<union> Y))\n                         \\<in> seq_comp_failures P Q", "fix xs X Y"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xs X Y.\n       \\<lbrakk>(xs, X) \\<in> seq_comp_failures P Q;\n        (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n        (xs, insert x X) \\<in> seq_comp_failures P Q;\n        (xs, Y) \\<in> seq_comp_failures P Q;\n        (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n        (xs, insert x Y) \\<in> seq_comp_failures P Q\\<rbrakk>\n       \\<Longrightarrow> (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n                         (xs, insert x (X \\<union> Y))\n                         \\<in> seq_comp_failures P Q", "assume\n    \"(xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n      (xs, insert x X) \\<in> seq_comp_failures P Q\" and\n    \"(xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n      (xs, insert x Y) \\<in> seq_comp_failures P Q\""], ["proof (state)\nthis:\n  (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n  (xs, insert x X) \\<in> seq_comp_failures P Q\n  (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n  (xs, insert x Y) \\<in> seq_comp_failures P Q\n\ngoal (1 subgoal):\n 1. \\<And>xs X Y.\n       \\<lbrakk>(xs, X) \\<in> seq_comp_failures P Q;\n        (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n        (xs, insert x X) \\<in> seq_comp_failures P Q;\n        (xs, Y) \\<in> seq_comp_failures P Q;\n        (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n        (xs, insert x Y) \\<in> seq_comp_failures P Q\\<rbrakk>\n       \\<Longrightarrow> (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n                         (xs, insert x (X \\<union> Y))\n                         \\<in> seq_comp_failures P Q", "thus \"(xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n    (xs, insert x (X \\<union> Y)) \\<in> seq_comp_failures P Q\""], ["proof (prove)\nusing this:\n  (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n  (xs, insert x X) \\<in> seq_comp_failures P Q\n  (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n  (xs, insert x Y) \\<in> seq_comp_failures P Q\n\ngoal (1 subgoal):\n 1. (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n    (xs, insert x (X \\<union> Y)) \\<in> seq_comp_failures P Q", "proof (cases \"(xs @ [x], {}) \\<in> seq_comp_failures P Q\", simp_all)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>(xs, insert x X) \\<in> seq_comp_failures P Q;\n     (xs, insert x Y) \\<in> seq_comp_failures P Q;\n     (xs @ [x], {}) \\<notin> seq_comp_failures P Q\\<rbrakk>\n    \\<Longrightarrow> (xs, insert x (X \\<union> Y))\n                      \\<in> seq_comp_failures P Q", "assume\n      \"(xs, insert x X) \\<in> seq_comp_failures P Q\" and\n      \"(xs, insert x Y) \\<in> seq_comp_failures P Q\""], ["proof (state)\nthis:\n  (xs, insert x X) \\<in> seq_comp_failures P Q\n  (xs, insert x Y) \\<in> seq_comp_failures P Q\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(xs, insert x X) \\<in> seq_comp_failures P Q;\n     (xs, insert x Y) \\<in> seq_comp_failures P Q;\n     (xs @ [x], {}) \\<notin> seq_comp_failures P Q\\<rbrakk>\n    \\<Longrightarrow> (xs, insert x (X \\<union> Y))\n                      \\<in> seq_comp_failures P Q", "hence \"(xs, insert x X \\<union> insert x Y) \\<in> seq_comp_failures P Q\""], ["proof (prove)\nusing this:\n  (xs, insert x X) \\<in> seq_comp_failures P Q\n  (xs, insert x Y) \\<in> seq_comp_failures P Q\n\ngoal (1 subgoal):\n 1. (xs, insert x X \\<union> insert x Y) \\<in> seq_comp_failures P Q", "by (rule SCF_R4)"], ["proof (state)\nthis:\n  (xs, insert x X \\<union> insert x Y) \\<in> seq_comp_failures P Q\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(xs, insert x X) \\<in> seq_comp_failures P Q;\n     (xs, insert x Y) \\<in> seq_comp_failures P Q;\n     (xs @ [x], {}) \\<notin> seq_comp_failures P Q\\<rbrakk>\n    \\<Longrightarrow> (xs, insert x (X \\<union> Y))\n                      \\<in> seq_comp_failures P Q", "thus \"(xs, insert x (X \\<union> Y)) \\<in> seq_comp_failures P Q\""], ["proof (prove)\nusing this:\n  (xs, insert x X \\<union> insert x Y) \\<in> seq_comp_failures P Q\n\ngoal (1 subgoal):\n 1. (xs, insert x (X \\<union> Y)) \\<in> seq_comp_failures P Q", "by simp"], ["proof (state)\nthis:\n  (xs, insert x (X \\<union> Y)) \\<in> seq_comp_failures P Q\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n  (xs, insert x (X \\<union> Y)) \\<in> seq_comp_failures P Q\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma seq_comp_rep:\n  assumes WS: \"weakly_sequential P\"\n  shows \"Rep_process (P ; Q) = (seq_comp_failures P Q, {})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Rep_process (P ; Q) = (seq_comp_failures P Q, {})", "proof (subst seq_comp_def, rule Abs_process_inverse, simp add: process_set_def,\n (subst conj_assoc [symmetric])+, (rule conjI)+)"], ["proof (state)\ngoal (6 subgoals):\n 1. process_prop_1 (seq_comp_failures P Q, {})\n 2. process_prop_2 (seq_comp_failures P Q, {})\n 3. process_prop_3 (seq_comp_failures P Q, {})\n 4. process_prop_4 (seq_comp_failures P Q, {})\n 5. process_prop_5 (seq_comp_failures P Q, {})\n 6. process_prop_6 (seq_comp_failures P Q, {})", "show \"process_prop_1 (seq_comp_failures P Q, {})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. process_prop_1 (seq_comp_failures P Q, {})", "proof (simp add: process_prop_1_def)"], ["proof (state)\ngoal (1 subgoal):\n 1. ([], {}) \\<in> seq_comp_failures P Q", "qed (rule seq_comp_prop_1)"], ["proof (state)\nthis:\n  process_prop_1 (seq_comp_failures P Q, {})\n\ngoal (5 subgoals):\n 1. process_prop_2 (seq_comp_failures P Q, {})\n 2. process_prop_3 (seq_comp_failures P Q, {})\n 3. process_prop_4 (seq_comp_failures P Q, {})\n 4. process_prop_5 (seq_comp_failures P Q, {})\n 5. process_prop_6 (seq_comp_failures P Q, {})", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. process_prop_2 (seq_comp_failures P Q, {})\n 2. process_prop_3 (seq_comp_failures P Q, {})\n 3. process_prop_4 (seq_comp_failures P Q, {})\n 4. process_prop_5 (seq_comp_failures P Q, {})\n 5. process_prop_6 (seq_comp_failures P Q, {})", "show \"process_prop_2 (seq_comp_failures P Q, {})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. process_prop_2 (seq_comp_failures P Q, {})", "proof (simp add: process_prop_2_def del: all_simps, (rule allI)+, rule impI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xs x X.\n       (xs @ [x], X) \\<in> seq_comp_failures P Q \\<Longrightarrow>\n       (xs, {}) \\<in> seq_comp_failures P Q", "qed (rule seq_comp_prop_2 [OF WS])"], ["proof (state)\nthis:\n  process_prop_2 (seq_comp_failures P Q, {})\n\ngoal (4 subgoals):\n 1. process_prop_3 (seq_comp_failures P Q, {})\n 2. process_prop_4 (seq_comp_failures P Q, {})\n 3. process_prop_5 (seq_comp_failures P Q, {})\n 4. process_prop_6 (seq_comp_failures P Q, {})", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. process_prop_3 (seq_comp_failures P Q, {})\n 2. process_prop_4 (seq_comp_failures P Q, {})\n 3. process_prop_5 (seq_comp_failures P Q, {})\n 4. process_prop_6 (seq_comp_failures P Q, {})", "show \"process_prop_3 (seq_comp_failures P Q, {})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. process_prop_3 (seq_comp_failures P Q, {})", "proof (simp add: process_prop_3_def del: all_simps, (rule allI)+, rule impI,\n   erule conjE)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xs X Y.\n       \\<lbrakk>(xs, Y) \\<in> seq_comp_failures P Q;\n        X \\<subseteq> Y\\<rbrakk>\n       \\<Longrightarrow> (xs, X) \\<in> seq_comp_failures P Q", "qed (rule seq_comp_prop_3)"], ["proof (state)\nthis:\n  process_prop_3 (seq_comp_failures P Q, {})\n\ngoal (3 subgoals):\n 1. process_prop_4 (seq_comp_failures P Q, {})\n 2. process_prop_5 (seq_comp_failures P Q, {})\n 3. process_prop_6 (seq_comp_failures P Q, {})", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. process_prop_4 (seq_comp_failures P Q, {})\n 2. process_prop_5 (seq_comp_failures P Q, {})\n 3. process_prop_6 (seq_comp_failures P Q, {})", "show \"process_prop_4 (seq_comp_failures P Q, {})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. process_prop_4 (seq_comp_failures P Q, {})", "proof (simp add: process_prop_4_def, (rule allI)+, rule impI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xs x X.\n       (xs, X) \\<in> seq_comp_failures P Q \\<Longrightarrow>\n       (xs @ [x], {}) \\<in> seq_comp_failures P Q \\<or>\n       (xs, insert x X) \\<in> seq_comp_failures P Q", "qed (rule seq_comp_prop_4 [OF WS])"], ["proof (state)\nthis:\n  process_prop_4 (seq_comp_failures P Q, {})\n\ngoal (2 subgoals):\n 1. process_prop_5 (seq_comp_failures P Q, {})\n 2. process_prop_6 (seq_comp_failures P Q, {})", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. process_prop_5 (seq_comp_failures P Q, {})\n 2. process_prop_6 (seq_comp_failures P Q, {})", "show \"process_prop_5 (seq_comp_failures P Q, {})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. process_prop_5 (seq_comp_failures P Q, {})", "by (simp add: process_prop_5_def)"], ["proof (state)\nthis:\n  process_prop_5 (seq_comp_failures P Q, {})\n\ngoal (1 subgoal):\n 1. process_prop_6 (seq_comp_failures P Q, {})", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. process_prop_6 (seq_comp_failures P Q, {})", "show \"process_prop_6 (seq_comp_failures P Q, {})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. process_prop_6 (seq_comp_failures P Q, {})", "by (simp add: process_prop_6_def)"], ["proof (state)\nthis:\n  process_prop_6 (seq_comp_failures P Q, {})\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>\n\\null\n\nHere below, the previous result is applied to derive useful expressions for the outputs of the\nfunctions returning the elements of a process, as defined in \\cite{R2} and \\cite{R3}, when acting on\nthe sequential composition of a pair of processes.\n\n\\null\n\\<close>"], ["", "lemma seq_comp_failures:\n \"weakly_sequential P \\<Longrightarrow>\n    failures (P ; Q) = seq_comp_failures P Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. weakly_sequential P \\<Longrightarrow>\n    failures (P ; Q) = seq_comp_failures P Q", "by (drule seq_comp_rep [where Q = Q], simp add: failures_def)"], ["", "lemma seq_comp_divergences:\n \"weakly_sequential P \\<Longrightarrow>\n    divergences (P ; Q) = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. weakly_sequential P \\<Longrightarrow> divergences (P ; Q) = {}", "by (drule seq_comp_rep [where Q = Q], simp add: divergences_def)"], ["", "lemma seq_comp_futures:\n \"weakly_sequential P \\<Longrightarrow>\n    futures (P ; Q) xs = {(ys, Y). (xs @ ys, Y) \\<in> seq_comp_failures P Q}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. weakly_sequential P \\<Longrightarrow>\n    futures (P ; Q) xs = {(ys, Y). (xs @ ys, Y) \\<in> seq_comp_failures P Q}", "by (simp add: futures_def seq_comp_failures)"], ["", "lemma seq_comp_traces:\n \"weakly_sequential P \\<Longrightarrow>\n    traces (P ; Q) = Domain (seq_comp_failures P Q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. weakly_sequential P \\<Longrightarrow>\n    traces (P ; Q) = Domain (seq_comp_failures P Q)", "by (simp add: traces_def seq_comp_failures)"], ["", "lemma seq_comp_refusals:\n \"weakly_sequential P \\<Longrightarrow>\n    refusals (P ; Q) xs \\<equiv> seq_comp_failures P Q `` {xs}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. weakly_sequential P \\<Longrightarrow>\n    refusals (P ; Q) xs \\<equiv> seq_comp_failures P Q `` {xs}", "by (simp add: refusals_def seq_comp_failures)"], ["", "lemma seq_comp_next_events:\n \"weakly_sequential P \\<Longrightarrow>\n    next_events (P ; Q) xs = {x. xs @ [x] \\<in> Domain (seq_comp_failures P Q)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. weakly_sequential P \\<Longrightarrow>\n    next_events (P ; Q) xs =\n    {x. xs @ [x] \\<in> Domain (seq_comp_failures P Q)}", "by (simp add: next_events_def seq_comp_traces)"], ["", "subsection \"Conservation of refusals union closure and sequentiality under sequential composition\""], ["", "text \\<open>\nHere below is the proof that, for any two processes @{term P}, @{term Q} and any failure\n@{term \"(xs, X)\"} of @{term \"P ; Q\"}, the refusal @{term X} is the union of a set of refusals where,\nfor any such refusal @{term W}, @{term \"(xs, W)\"} is a failure of @{term \"P ; Q\"} by virtue of one\nof rules \\<open>SCF_R1\\<close>, \\<open>SCF_R2\\<close>, or \\<open>SCF_R3\\<close>.\n\nThe converse is also proven, under the assumption that the refusals of both @{term P} and @{term Q}\nbe closed under union: namely, for any trace @{term xs} of @{term \"P ; Q\"} and any set of refusals\nwhere, for any such refusal @{term W}, @{term \"(xs, W)\"} is a failure of the aforesaid kind, the\nunion of these refusals is still a refusal of @{term xs}.\n\nThe proof of the latter lemma makes use of the axiom of choice.\n\n\\null\n\\<close>"], ["", "lemma seq_comp_refusals_1:\n \"(xs, X) \\<in> seq_comp_failures P Q \\<Longrightarrow> \\<exists>R.\n    X = (\\<Union>n \\<in> {..length xs}. \\<Union>W \\<in> R n. W) \\<and>\n    (\\<forall>W \\<in> R 0.\n      xs \\<notin> sentences P \\<and> None \\<notin> set xs \\<and> (xs, W) \\<in> failures P \\<or>\n      xs \\<in> sentences P \\<and> (\\<exists>U V. (xs, U) \\<in> failures P \\<and> ([], V) \\<in> failures Q \\<and>\n        W = insert None U \\<inter> V)) \\<and>\n    (\\<forall>n \\<in> {0<..length xs}. \\<forall>W \\<in> R n.\n      take (length xs - n) xs \\<in> sentences P \\<and>\n      (drop (length xs - n) xs, W) \\<in> failures Q) \\<and>\n    (\\<exists>n \\<in> {..length xs}. \\<exists>W. W \\<in> R n)\"\n  (is \"_ \\<Longrightarrow> \\<exists>R. ?T R xs X\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (xs, X) \\<in> seq_comp_failures P Q \\<Longrightarrow>\n    \\<exists>R.\n       X = (\\<Union>n\\<le>length xs. \\<Union>W\\<in>R n. W) \\<and>\n       (\\<forall>W\\<in>R 0.\n           xs \\<notin> sentences P \\<and>\n           None \\<notin> set xs \\<and> (xs, W) \\<in> failures P \\<or>\n           xs \\<in> sentences P \\<and>\n           (\\<exists>U V.\n               (xs, U) \\<in> failures P \\<and>\n               ([], V) \\<in> failures Q \\<and>\n               W = insert None U \\<inter> V)) \\<and>\n       (\\<forall>n\\<in>{0<..length xs}.\n           \\<forall>W\\<in>R n.\n              take (length xs - n) xs \\<in> sentences P \\<and>\n              (drop (length xs - n) xs, W) \\<in> failures Q) \\<and>\n       (\\<exists>n\\<in>{..length xs}. \\<exists>W. W \\<in> R n)", "proof (erule seq_comp_failures.induct, (erule_tac [4] exE)+)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>xs X.\n       \\<lbrakk>xs \\<notin> sentences P; (xs, X) \\<in> failures P;\n        None \\<notin> set xs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>R.\n                            X =\n                            (\\<Union>n\\<le>length xs.\n                                \\<Union>W\\<in>R n. W) \\<and>\n                            (\\<forall>W\\<in>R 0.\n                                xs \\<notin> sentences P \\<and>\n                                None \\<notin> set xs \\<and>\n                                (xs, W) \\<in> failures P \\<or>\n                                xs \\<in> sentences P \\<and>\n                                (\\<exists>U V.\n                                    (xs, U) \\<in> failures P \\<and>\n                                    ([], V) \\<in> failures Q \\<and>\n                                    W = insert None U \\<inter> V)) \\<and>\n                            (\\<forall>n\\<in>{0<..length xs}.\n                                \\<forall>W\\<in>R n.\n                                   take (length xs - n) xs\n                                   \\<in> sentences P \\<and>\n                                   (drop (length xs - n) xs, W)\n                                   \\<in> failures Q) \\<and>\n                            (\\<exists>n\\<in>{..length xs}.\n                                \\<exists>W. W \\<in> R n)\n 2. \\<And>xs X Y.\n       \\<lbrakk>xs \\<in> sentences P; (xs, X) \\<in> failures P;\n        ([], Y) \\<in> failures Q\\<rbrakk>\n       \\<Longrightarrow> \\<exists>R.\n                            insert None X \\<inter> Y =\n                            (\\<Union>n\\<le>length xs.\n                                \\<Union>W\\<in>R n. W) \\<and>\n                            (\\<forall>W\\<in>R 0.\n                                xs \\<notin> sentences P \\<and>\n                                None \\<notin> set xs \\<and>\n                                (xs, W) \\<in> failures P \\<or>\n                                xs \\<in> sentences P \\<and>\n                                (\\<exists>U V.\n                                    (xs, U) \\<in> failures P \\<and>\n                                    ([], V) \\<in> failures Q \\<and>\n                                    W = insert None U \\<inter> V)) \\<and>\n                            (\\<forall>n\\<in>{0<..length xs}.\n                                \\<forall>W\\<in>R n.\n                                   take (length xs - n) xs\n                                   \\<in> sentences P \\<and>\n                                   (drop (length xs - n) xs, W)\n                                   \\<in> failures Q) \\<and>\n                            (\\<exists>n\\<in>{..length xs}.\n                                \\<exists>W. W \\<in> R n)\n 3. \\<And>xs ys Y.\n       \\<lbrakk>xs \\<in> sentences P; (ys, Y) \\<in> failures Q;\n        ys \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> \\<exists>R.\n                            Y =\n                            (\\<Union>n\\<le>length (xs @ ys).\n                                \\<Union>W\\<in>R n. W) \\<and>\n                            (\\<forall>W\\<in>R 0.\n                                xs @ ys \\<notin> sentences P \\<and>\n                                None \\<notin> set (xs @ ys) \\<and>\n                                (xs @ ys, W) \\<in> failures P \\<or>\n                                xs @ ys \\<in> sentences P \\<and>\n                                (\\<exists>U V.\n                                    (xs @ ys, U) \\<in> failures P \\<and>\n                                    ([], V) \\<in> failures Q \\<and>\n                                    W = insert None U \\<inter> V)) \\<and>\n                            (\\<forall>n\\<in>{0<..length (xs @ ys)}.\n                                \\<forall>W\\<in>R n.\n                                   take (length (xs @ ys) - n) (xs @ ys)\n                                   \\<in> sentences P \\<and>\n                                   (drop (length (xs @ ys) - n) (xs @ ys),\n                                    W)\n                                   \\<in> failures Q) \\<and>\n                            (\\<exists>n\\<in>{..length (xs @ ys)}.\n                                \\<exists>W. W \\<in> R n)\n 4. \\<And>xs X Y R Ra.\n       \\<lbrakk>(xs, X) \\<in> seq_comp_failures P Q;\n        (xs, Y) \\<in> seq_comp_failures P Q;\n        X = (\\<Union>n\\<le>length xs. \\<Union>W\\<in>R n. W) \\<and>\n        (\\<forall>W\\<in>R 0.\n            xs \\<notin> sentences P \\<and>\n            None \\<notin> set xs \\<and> (xs, W) \\<in> failures P \\<or>\n            xs \\<in> sentences P \\<and>\n            (\\<exists>U V.\n                (xs, U) \\<in> failures P \\<and>\n                ([], V) \\<in> failures Q \\<and>\n                W = insert None U \\<inter> V)) \\<and>\n        (\\<forall>n\\<in>{0<..length xs}.\n            \\<forall>W\\<in>R n.\n               take (length xs - n) xs \\<in> sentences P \\<and>\n               (drop (length xs - n) xs, W) \\<in> failures Q) \\<and>\n        (\\<exists>n\\<in>{..length xs}. \\<exists>W. W \\<in> R n);\n        Y = (\\<Union>n\\<le>length xs. \\<Union>W\\<in>Ra n. W) \\<and>\n        (\\<forall>W\\<in>Ra 0.\n            xs \\<notin> sentences P \\<and>\n            None \\<notin> set xs \\<and> (xs, W) \\<in> failures P \\<or>\n            xs \\<in> sentences P \\<and>\n            (\\<exists>U V.\n                (xs, U) \\<in> failures P \\<and>\n                ([], V) \\<in> failures Q \\<and>\n                W = insert None U \\<inter> V)) \\<and>\n        (\\<forall>n\\<in>{0<..length xs}.\n            \\<forall>W\\<in>Ra n.\n               take (length xs - n) xs \\<in> sentences P \\<and>\n               (drop (length xs - n) xs, W) \\<in> failures Q) \\<and>\n        (\\<exists>n\\<in>{..length xs}. \\<exists>W. W \\<in> Ra n)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>R.\n                            X \\<union> Y =\n                            (\\<Union>n\\<le>length xs.\n                                \\<Union>W\\<in>R n. W) \\<and>\n                            (\\<forall>W\\<in>R 0.\n                                xs \\<notin> sentences P \\<and>\n                                None \\<notin> set xs \\<and>\n                                (xs, W) \\<in> failures P \\<or>\n                                xs \\<in> sentences P \\<and>\n                                (\\<exists>U V.\n                                    (xs, U) \\<in> failures P \\<and>\n                                    ([], V) \\<in> failures Q \\<and>\n                                    W = insert None U \\<inter> V)) \\<and>\n                            (\\<forall>n\\<in>{0<..length xs}.\n                                \\<forall>W\\<in>R n.\n                                   take (length xs - n) xs\n                                   \\<in> sentences P \\<and>\n                                   (drop (length xs - n) xs, W)\n                                   \\<in> failures Q) \\<and>\n                            (\\<exists>n\\<in>{..length xs}.\n                                \\<exists>W. W \\<in> R n)", "fix xs X"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>xs X.\n       \\<lbrakk>xs \\<notin> sentences P; (xs, X) \\<in> failures P;\n        None \\<notin> set xs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>R.\n                            X =\n                            (\\<Union>n\\<le>length xs.\n                                \\<Union>W\\<in>R n. W) \\<and>\n                            (\\<forall>W\\<in>R 0.\n                                xs \\<notin> sentences P \\<and>\n                                None \\<notin> set xs \\<and>\n                                (xs, W) \\<in> failures P \\<or>\n                                xs \\<in> sentences P \\<and>\n                                (\\<exists>U V.\n                                    (xs, U) \\<in> failures P \\<and>\n                                    ([], V) \\<in> failures Q \\<and>\n                                    W = insert None U \\<inter> V)) \\<and>\n                            (\\<forall>n\\<in>{0<..length xs}.\n                                \\<forall>W\\<in>R n.\n                                   take (length xs - n) xs\n                                   \\<in> sentences P \\<and>\n                                   (drop (length xs - n) xs, W)\n                                   \\<in> failures Q) \\<and>\n                            (\\<exists>n\\<in>{..length xs}.\n                                \\<exists>W. W \\<in> R n)\n 2. \\<And>xs X Y.\n       \\<lbrakk>xs \\<in> sentences P; (xs, X) \\<in> failures P;\n        ([], Y) \\<in> failures Q\\<rbrakk>\n       \\<Longrightarrow> \\<exists>R.\n                            insert None X \\<inter> Y =\n                            (\\<Union>n\\<le>length xs.\n                                \\<Union>W\\<in>R n. W) \\<and>\n                            (\\<forall>W\\<in>R 0.\n                                xs \\<notin> sentences P \\<and>\n                                None \\<notin> set xs \\<and>\n                                (xs, W) \\<in> failures P \\<or>\n                                xs \\<in> sentences P \\<and>\n                                (\\<exists>U V.\n                                    (xs, U) \\<in> failures P \\<and>\n                                    ([], V) \\<in> failures Q \\<and>\n                                    W = insert None U \\<inter> V)) \\<and>\n                            (\\<forall>n\\<in>{0<..length xs}.\n                                \\<forall>W\\<in>R n.\n                                   take (length xs - n) xs\n                                   \\<in> sentences P \\<and>\n                                   (drop (length xs - n) xs, W)\n                                   \\<in> failures Q) \\<and>\n                            (\\<exists>n\\<in>{..length xs}.\n                                \\<exists>W. W \\<in> R n)\n 3. \\<And>xs ys Y.\n       \\<lbrakk>xs \\<in> sentences P; (ys, Y) \\<in> failures Q;\n        ys \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> \\<exists>R.\n                            Y =\n                            (\\<Union>n\\<le>length (xs @ ys).\n                                \\<Union>W\\<in>R n. W) \\<and>\n                            (\\<forall>W\\<in>R 0.\n                                xs @ ys \\<notin> sentences P \\<and>\n                                None \\<notin> set (xs @ ys) \\<and>\n                                (xs @ ys, W) \\<in> failures P \\<or>\n                                xs @ ys \\<in> sentences P \\<and>\n                                (\\<exists>U V.\n                                    (xs @ ys, U) \\<in> failures P \\<and>\n                                    ([], V) \\<in> failures Q \\<and>\n                                    W = insert None U \\<inter> V)) \\<and>\n                            (\\<forall>n\\<in>{0<..length (xs @ ys)}.\n                                \\<forall>W\\<in>R n.\n                                   take (length (xs @ ys) - n) (xs @ ys)\n                                   \\<in> sentences P \\<and>\n                                   (drop (length (xs @ ys) - n) (xs @ ys),\n                                    W)\n                                   \\<in> failures Q) \\<and>\n                            (\\<exists>n\\<in>{..length (xs @ ys)}.\n                                \\<exists>W. W \\<in> R n)\n 4. \\<And>xs X Y R Ra.\n       \\<lbrakk>(xs, X) \\<in> seq_comp_failures P Q;\n        (xs, Y) \\<in> seq_comp_failures P Q;\n        X = (\\<Union>n\\<le>length xs. \\<Union>W\\<in>R n. W) \\<and>\n        (\\<forall>W\\<in>R 0.\n            xs \\<notin> sentences P \\<and>\n            None \\<notin> set xs \\<and> (xs, W) \\<in> failures P \\<or>\n            xs \\<in> sentences P \\<and>\n            (\\<exists>U V.\n                (xs, U) \\<in> failures P \\<and>\n                ([], V) \\<in> failures Q \\<and>\n                W = insert None U \\<inter> V)) \\<and>\n        (\\<forall>n\\<in>{0<..length xs}.\n            \\<forall>W\\<in>R n.\n               take (length xs - n) xs \\<in> sentences P \\<and>\n               (drop (length xs - n) xs, W) \\<in> failures Q) \\<and>\n        (\\<exists>n\\<in>{..length xs}. \\<exists>W. W \\<in> R n);\n        Y = (\\<Union>n\\<le>length xs. \\<Union>W\\<in>Ra n. W) \\<and>\n        (\\<forall>W\\<in>Ra 0.\n            xs \\<notin> sentences P \\<and>\n            None \\<notin> set xs \\<and> (xs, W) \\<in> failures P \\<or>\n            xs \\<in> sentences P \\<and>\n            (\\<exists>U V.\n                (xs, U) \\<in> failures P \\<and>\n                ([], V) \\<in> failures Q \\<and>\n                W = insert None U \\<inter> V)) \\<and>\n        (\\<forall>n\\<in>{0<..length xs}.\n            \\<forall>W\\<in>Ra n.\n               take (length xs - n) xs \\<in> sentences P \\<and>\n               (drop (length xs - n) xs, W) \\<in> failures Q) \\<and>\n        (\\<exists>n\\<in>{..length xs}. \\<exists>W. W \\<in> Ra n)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>R.\n                            X \\<union> Y =\n                            (\\<Union>n\\<le>length xs.\n                                \\<Union>W\\<in>R n. W) \\<and>\n                            (\\<forall>W\\<in>R 0.\n                                xs \\<notin> sentences P \\<and>\n                                None \\<notin> set xs \\<and>\n                                (xs, W) \\<in> failures P \\<or>\n                                xs \\<in> sentences P \\<and>\n                                (\\<exists>U V.\n                                    (xs, U) \\<in> failures P \\<and>\n                                    ([], V) \\<in> failures Q \\<and>\n                                    W = insert None U \\<inter> V)) \\<and>\n                            (\\<forall>n\\<in>{0<..length xs}.\n                                \\<forall>W\\<in>R n.\n                                   take (length xs - n) xs\n                                   \\<in> sentences P \\<and>\n                                   (drop (length xs - n) xs, W)\n                                   \\<in> failures Q) \\<and>\n                            (\\<exists>n\\<in>{..length xs}.\n                                \\<exists>W. W \\<in> R n)", "assume\n    A: \"xs \\<notin> sentences P\" and\n    B: \"(xs, X) \\<in> failures P\" and\n    C: \"None \\<notin> set xs\""], ["proof (state)\nthis:\n  xs \\<notin> sentences P\n  (xs, X) \\<in> failures P\n  None \\<notin> set xs\n\ngoal (4 subgoals):\n 1. \\<And>xs X.\n       \\<lbrakk>xs \\<notin> sentences P; (xs, X) \\<in> failures P;\n        None \\<notin> set xs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>R.\n                            X =\n                            (\\<Union>n\\<le>length xs.\n                                \\<Union>W\\<in>R n. W) \\<and>\n                            (\\<forall>W\\<in>R 0.\n                                xs \\<notin> sentences P \\<and>\n                                None \\<notin> set xs \\<and>\n                                (xs, W) \\<in> failures P \\<or>\n                                xs \\<in> sentences P \\<and>\n                                (\\<exists>U V.\n                                    (xs, U) \\<in> failures P \\<and>\n                                    ([], V) \\<in> failures Q \\<and>\n                                    W = insert None U \\<inter> V)) \\<and>\n                            (\\<forall>n\\<in>{0<..length xs}.\n                                \\<forall>W\\<in>R n.\n                                   take (length xs - n) xs\n                                   \\<in> sentences P \\<and>\n                                   (drop (length xs - n) xs, W)\n                                   \\<in> failures Q) \\<and>\n                            (\\<exists>n\\<in>{..length xs}.\n                                \\<exists>W. W \\<in> R n)\n 2. \\<And>xs X Y.\n       \\<lbrakk>xs \\<in> sentences P; (xs, X) \\<in> failures P;\n        ([], Y) \\<in> failures Q\\<rbrakk>\n       \\<Longrightarrow> \\<exists>R.\n                            insert None X \\<inter> Y =\n                            (\\<Union>n\\<le>length xs.\n                                \\<Union>W\\<in>R n. W) \\<and>\n                            (\\<forall>W\\<in>R 0.\n                                xs \\<notin> sentences P \\<and>\n                                None \\<notin> set xs \\<and>\n                                (xs, W) \\<in> failures P \\<or>\n                                xs \\<in> sentences P \\<and>\n                                (\\<exists>U V.\n                                    (xs, U) \\<in> failures P \\<and>\n                                    ([], V) \\<in> failures Q \\<and>\n                                    W = insert None U \\<inter> V)) \\<and>\n                            (\\<forall>n\\<in>{0<..length xs}.\n                                \\<forall>W\\<in>R n.\n                                   take (length xs - n) xs\n                                   \\<in> sentences P \\<and>\n                                   (drop (length xs - n) xs, W)\n                                   \\<in> failures Q) \\<and>\n                            (\\<exists>n\\<in>{..length xs}.\n                                \\<exists>W. W \\<in> R n)\n 3. \\<And>xs ys Y.\n       \\<lbrakk>xs \\<in> sentences P; (ys, Y) \\<in> failures Q;\n        ys \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> \\<exists>R.\n                            Y =\n                            (\\<Union>n\\<le>length (xs @ ys).\n                                \\<Union>W\\<in>R n. W) \\<and>\n                            (\\<forall>W\\<in>R 0.\n                                xs @ ys \\<notin> sentences P \\<and>\n                                None \\<notin> set (xs @ ys) \\<and>\n                                (xs @ ys, W) \\<in> failures P \\<or>\n                                xs @ ys \\<in> sentences P \\<and>\n                                (\\<exists>U V.\n                                    (xs @ ys, U) \\<in> failures P \\<and>\n                                    ([], V) \\<in> failures Q \\<and>\n                                    W = insert None U \\<inter> V)) \\<and>\n                            (\\<forall>n\\<in>{0<..length (xs @ ys)}.\n                                \\<forall>W\\<in>R n.\n                                   take (length (xs @ ys) - n) (xs @ ys)\n                                   \\<in> sentences P \\<and>\n                                   (drop (length (xs @ ys) - n) (xs @ ys),\n                                    W)\n                                   \\<in> failures Q) \\<and>\n                            (\\<exists>n\\<in>{..length (xs @ ys)}.\n                                \\<exists>W. W \\<in> R n)\n 4. \\<And>xs X Y R Ra.\n       \\<lbrakk>(xs, X) \\<in> seq_comp_failures P Q;\n        (xs, Y) \\<in> seq_comp_failures P Q;\n        X = (\\<Union>n\\<le>length xs. \\<Union>W\\<in>R n. W) \\<and>\n        (\\<forall>W\\<in>R 0.\n            xs \\<notin> sentences P \\<and>\n            None \\<notin> set xs \\<and> (xs, W) \\<in> failures P \\<or>\n            xs \\<in> sentences P \\<and>\n            (\\<exists>U V.\n                (xs, U) \\<in> failures P \\<and>\n                ([], V) \\<in> failures Q \\<and>\n                W = insert None U \\<inter> V)) \\<and>\n        (\\<forall>n\\<in>{0<..length xs}.\n            \\<forall>W\\<in>R n.\n               take (length xs - n) xs \\<in> sentences P \\<and>\n               (drop (length xs - n) xs, W) \\<in> failures Q) \\<and>\n        (\\<exists>n\\<in>{..length xs}. \\<exists>W. W \\<in> R n);\n        Y = (\\<Union>n\\<le>length xs. \\<Union>W\\<in>Ra n. W) \\<and>\n        (\\<forall>W\\<in>Ra 0.\n            xs \\<notin> sentences P \\<and>\n            None \\<notin> set xs \\<and> (xs, W) \\<in> failures P \\<or>\n            xs \\<in> sentences P \\<and>\n            (\\<exists>U V.\n                (xs, U) \\<in> failures P \\<and>\n                ([], V) \\<in> failures Q \\<and>\n                W = insert None U \\<inter> V)) \\<and>\n        (\\<forall>n\\<in>{0<..length xs}.\n            \\<forall>W\\<in>Ra n.\n               take (length xs - n) xs \\<in> sentences P \\<and>\n               (drop (length xs - n) xs, W) \\<in> failures Q) \\<and>\n        (\\<exists>n\\<in>{..length xs}. \\<exists>W. W \\<in> Ra n)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>R.\n                            X \\<union> Y =\n                            (\\<Union>n\\<le>length xs.\n                                \\<Union>W\\<in>R n. W) \\<and>\n                            (\\<forall>W\\<in>R 0.\n                                xs \\<notin> sentences P \\<and>\n                                None \\<notin> set xs \\<and>\n                                (xs, W) \\<in> failures P \\<or>\n                                xs \\<in> sentences P \\<and>\n                                (\\<exists>U V.\n                                    (xs, U) \\<in> failures P \\<and>\n                                    ([], V) \\<in> failures Q \\<and>\n                                    W = insert None U \\<inter> V)) \\<and>\n                            (\\<forall>n\\<in>{0<..length xs}.\n                                \\<forall>W\\<in>R n.\n                                   take (length xs - n) xs\n                                   \\<in> sentences P \\<and>\n                                   (drop (length xs - n) xs, W)\n                                   \\<in> failures Q) \\<and>\n                            (\\<exists>n\\<in>{..length xs}.\n                                \\<exists>W. W \\<in> R n)", "show \"\\<exists>R. ?T R xs X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>R.\n       X = (\\<Union>n\\<le>length xs. \\<Union>W\\<in>R n. W) \\<and>\n       (\\<forall>W\\<in>R 0.\n           xs \\<notin> sentences P \\<and>\n           None \\<notin> set xs \\<and> (xs, W) \\<in> failures P \\<or>\n           xs \\<in> sentences P \\<and>\n           (\\<exists>U V.\n               (xs, U) \\<in> failures P \\<and>\n               ([], V) \\<in> failures Q \\<and>\n               W = insert None U \\<inter> V)) \\<and>\n       (\\<forall>n\\<in>{0<..length xs}.\n           \\<forall>W\\<in>R n.\n              take (length xs - n) xs \\<in> sentences P \\<and>\n              (drop (length xs - n) xs, W) \\<in> failures Q) \\<and>\n       (\\<exists>n\\<in>{..length xs}. \\<exists>W. W \\<in> R n)", "proof (rule_tac x = \"\\<lambda>n. if n = 0 then {X} else {}\" in exI,\n   simp add: A B C, rule equalityI, rule_tac [!] subsetI, simp_all)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<exists>xa\\<in>{..length xs}.\n          \\<exists>X\\<in>if xa = 0 then {X} else {}.\n             x \\<in> X \\<Longrightarrow>\n       x \\<in> X", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<exists>xa\\<in>{..length xs}.\n          \\<exists>X\\<in>if xa = 0 then {X} else {}.\n             x \\<in> X \\<Longrightarrow>\n       x \\<in> X", "assume \"\\<exists>n \\<in> {..length xs}.\n      \\<exists>W \\<in> if n = 0 then {X} else {}. x \\<in> W\""], ["proof (state)\nthis:\n  \\<exists>n\\<in>{..length xs}.\n     \\<exists>W\\<in>if n = 0 then {X} else {}. x \\<in> W\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<exists>xa\\<in>{..length xs}.\n          \\<exists>X\\<in>if xa = 0 then {X} else {}.\n             x \\<in> X \\<Longrightarrow>\n       x \\<in> X", "thus \"x \\<in> X\""], ["proof (prove)\nusing this:\n  \\<exists>n\\<in>{..length xs}.\n     \\<exists>W\\<in>if n = 0 then {X} else {}. x \\<in> W\n\ngoal (1 subgoal):\n 1. x \\<in> X", "by (simp split: if_split_asm)"], ["proof (state)\nthis:\n  x \\<in> X\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>R.\n     X = (\\<Union>n\\<le>length xs. \\<Union>W\\<in>R n. W) \\<and>\n     (\\<forall>W\\<in>R 0.\n         xs \\<notin> sentences P \\<and>\n         None \\<notin> set xs \\<and> (xs, W) \\<in> failures P \\<or>\n         xs \\<in> sentences P \\<and>\n         (\\<exists>U V.\n             (xs, U) \\<in> failures P \\<and>\n             ([], V) \\<in> failures Q \\<and>\n             W = insert None U \\<inter> V)) \\<and>\n     (\\<forall>n\\<in>{0<..length xs}.\n         \\<forall>W\\<in>R n.\n            take (length xs - n) xs \\<in> sentences P \\<and>\n            (drop (length xs - n) xs, W) \\<in> failures Q) \\<and>\n     (\\<exists>n\\<in>{..length xs}. \\<exists>W. W \\<in> R n)\n\ngoal (3 subgoals):\n 1. \\<And>xs X Y.\n       \\<lbrakk>xs \\<in> sentences P; (xs, X) \\<in> failures P;\n        ([], Y) \\<in> failures Q\\<rbrakk>\n       \\<Longrightarrow> \\<exists>R.\n                            insert None X \\<inter> Y =\n                            (\\<Union>n\\<le>length xs.\n                                \\<Union>W\\<in>R n. W) \\<and>\n                            (\\<forall>W\\<in>R 0.\n                                xs \\<notin> sentences P \\<and>\n                                None \\<notin> set xs \\<and>\n                                (xs, W) \\<in> failures P \\<or>\n                                xs \\<in> sentences P \\<and>\n                                (\\<exists>U V.\n                                    (xs, U) \\<in> failures P \\<and>\n                                    ([], V) \\<in> failures Q \\<and>\n                                    W = insert None U \\<inter> V)) \\<and>\n                            (\\<forall>n\\<in>{0<..length xs}.\n                                \\<forall>W\\<in>R n.\n                                   take (length xs - n) xs\n                                   \\<in> sentences P \\<and>\n                                   (drop (length xs - n) xs, W)\n                                   \\<in> failures Q) \\<and>\n                            (\\<exists>n\\<in>{..length xs}.\n                                \\<exists>W. W \\<in> R n)\n 2. \\<And>xs ys Y.\n       \\<lbrakk>xs \\<in> sentences P; (ys, Y) \\<in> failures Q;\n        ys \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> \\<exists>R.\n                            Y =\n                            (\\<Union>n\\<le>length (xs @ ys).\n                                \\<Union>W\\<in>R n. W) \\<and>\n                            (\\<forall>W\\<in>R 0.\n                                xs @ ys \\<notin> sentences P \\<and>\n                                None \\<notin> set (xs @ ys) \\<and>\n                                (xs @ ys, W) \\<in> failures P \\<or>\n                                xs @ ys \\<in> sentences P \\<and>\n                                (\\<exists>U V.\n                                    (xs @ ys, U) \\<in> failures P \\<and>\n                                    ([], V) \\<in> failures Q \\<and>\n                                    W = insert None U \\<inter> V)) \\<and>\n                            (\\<forall>n\\<in>{0<..length (xs @ ys)}.\n                                \\<forall>W\\<in>R n.\n                                   take (length (xs @ ys) - n) (xs @ ys)\n                                   \\<in> sentences P \\<and>\n                                   (drop (length (xs @ ys) - n) (xs @ ys),\n                                    W)\n                                   \\<in> failures Q) \\<and>\n                            (\\<exists>n\\<in>{..length (xs @ ys)}.\n                                \\<exists>W. W \\<in> R n)\n 3. \\<And>xs X Y R Ra.\n       \\<lbrakk>(xs, X) \\<in> seq_comp_failures P Q;\n        (xs, Y) \\<in> seq_comp_failures P Q;\n        X = (\\<Union>n\\<le>length xs. \\<Union>W\\<in>R n. W) \\<and>\n        (\\<forall>W\\<in>R 0.\n            xs \\<notin> sentences P \\<and>\n            None \\<notin> set xs \\<and> (xs, W) \\<in> failures P \\<or>\n            xs \\<in> sentences P \\<and>\n            (\\<exists>U V.\n                (xs, U) \\<in> failures P \\<and>\n                ([], V) \\<in> failures Q \\<and>\n                W = insert None U \\<inter> V)) \\<and>\n        (\\<forall>n\\<in>{0<..length xs}.\n            \\<forall>W\\<in>R n.\n               take (length xs - n) xs \\<in> sentences P \\<and>\n               (drop (length xs - n) xs, W) \\<in> failures Q) \\<and>\n        (\\<exists>n\\<in>{..length xs}. \\<exists>W. W \\<in> R n);\n        Y = (\\<Union>n\\<le>length xs. \\<Union>W\\<in>Ra n. W) \\<and>\n        (\\<forall>W\\<in>Ra 0.\n            xs \\<notin> sentences P \\<and>\n            None \\<notin> set xs \\<and> (xs, W) \\<in> failures P \\<or>\n            xs \\<in> sentences P \\<and>\n            (\\<exists>U V.\n                (xs, U) \\<in> failures P \\<and>\n                ([], V) \\<in> failures Q \\<and>\n                W = insert None U \\<inter> V)) \\<and>\n        (\\<forall>n\\<in>{0<..length xs}.\n            \\<forall>W\\<in>Ra n.\n               take (length xs - n) xs \\<in> sentences P \\<and>\n               (drop (length xs - n) xs, W) \\<in> failures Q) \\<and>\n        (\\<exists>n\\<in>{..length xs}. \\<exists>W. W \\<in> Ra n)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>R.\n                            X \\<union> Y =\n                            (\\<Union>n\\<le>length xs.\n                                \\<Union>W\\<in>R n. W) \\<and>\n                            (\\<forall>W\\<in>R 0.\n                                xs \\<notin> sentences P \\<and>\n                                None \\<notin> set xs \\<and>\n                                (xs, W) \\<in> failures P \\<or>\n                                xs \\<in> sentences P \\<and>\n                                (\\<exists>U V.\n                                    (xs, U) \\<in> failures P \\<and>\n                                    ([], V) \\<in> failures Q \\<and>\n                                    W = insert None U \\<inter> V)) \\<and>\n                            (\\<forall>n\\<in>{0<..length xs}.\n                                \\<forall>W\\<in>R n.\n                                   take (length xs - n) xs\n                                   \\<in> sentences P \\<and>\n                                   (drop (length xs - n) xs, W)\n                                   \\<in> failures Q) \\<and>\n                            (\\<exists>n\\<in>{..length xs}.\n                                \\<exists>W. W \\<in> R n)", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>xs X Y.\n       \\<lbrakk>xs \\<in> sentences P; (xs, X) \\<in> failures P;\n        ([], Y) \\<in> failures Q\\<rbrakk>\n       \\<Longrightarrow> \\<exists>R.\n                            insert None X \\<inter> Y =\n                            (\\<Union>n\\<le>length xs.\n                                \\<Union>W\\<in>R n. W) \\<and>\n                            (\\<forall>W\\<in>R 0.\n                                xs \\<notin> sentences P \\<and>\n                                None \\<notin> set xs \\<and>\n                                (xs, W) \\<in> failures P \\<or>\n                                xs \\<in> sentences P \\<and>\n                                (\\<exists>U V.\n                                    (xs, U) \\<in> failures P \\<and>\n                                    ([], V) \\<in> failures Q \\<and>\n                                    W = insert None U \\<inter> V)) \\<and>\n                            (\\<forall>n\\<in>{0<..length xs}.\n                                \\<forall>W\\<in>R n.\n                                   take (length xs - n) xs\n                                   \\<in> sentences P \\<and>\n                                   (drop (length xs - n) xs, W)\n                                   \\<in> failures Q) \\<and>\n                            (\\<exists>n\\<in>{..length xs}.\n                                \\<exists>W. W \\<in> R n)\n 2. \\<And>xs ys Y.\n       \\<lbrakk>xs \\<in> sentences P; (ys, Y) \\<in> failures Q;\n        ys \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> \\<exists>R.\n                            Y =\n                            (\\<Union>n\\<le>length (xs @ ys).\n                                \\<Union>W\\<in>R n. W) \\<and>\n                            (\\<forall>W\\<in>R 0.\n                                xs @ ys \\<notin> sentences P \\<and>\n                                None \\<notin> set (xs @ ys) \\<and>\n                                (xs @ ys, W) \\<in> failures P \\<or>\n                                xs @ ys \\<in> sentences P \\<and>\n                                (\\<exists>U V.\n                                    (xs @ ys, U) \\<in> failures P \\<and>\n                                    ([], V) \\<in> failures Q \\<and>\n                                    W = insert None U \\<inter> V)) \\<and>\n                            (\\<forall>n\\<in>{0<..length (xs @ ys)}.\n                                \\<forall>W\\<in>R n.\n                                   take (length (xs @ ys) - n) (xs @ ys)\n                                   \\<in> sentences P \\<and>\n                                   (drop (length (xs @ ys) - n) (xs @ ys),\n                                    W)\n                                   \\<in> failures Q) \\<and>\n                            (\\<exists>n\\<in>{..length (xs @ ys)}.\n                                \\<exists>W. W \\<in> R n)\n 3. \\<And>xs X Y R Ra.\n       \\<lbrakk>(xs, X) \\<in> seq_comp_failures P Q;\n        (xs, Y) \\<in> seq_comp_failures P Q;\n        X = (\\<Union>n\\<le>length xs. \\<Union>W\\<in>R n. W) \\<and>\n        (\\<forall>W\\<in>R 0.\n            xs \\<notin> sentences P \\<and>\n            None \\<notin> set xs \\<and> (xs, W) \\<in> failures P \\<or>\n            xs \\<in> sentences P \\<and>\n            (\\<exists>U V.\n                (xs, U) \\<in> failures P \\<and>\n                ([], V) \\<in> failures Q \\<and>\n                W = insert None U \\<inter> V)) \\<and>\n        (\\<forall>n\\<in>{0<..length xs}.\n            \\<forall>W\\<in>R n.\n               take (length xs - n) xs \\<in> sentences P \\<and>\n               (drop (length xs - n) xs, W) \\<in> failures Q) \\<and>\n        (\\<exists>n\\<in>{..length xs}. \\<exists>W. W \\<in> R n);\n        Y = (\\<Union>n\\<le>length xs. \\<Union>W\\<in>Ra n. W) \\<and>\n        (\\<forall>W\\<in>Ra 0.\n            xs \\<notin> sentences P \\<and>\n            None \\<notin> set xs \\<and> (xs, W) \\<in> failures P \\<or>\n            xs \\<in> sentences P \\<and>\n            (\\<exists>U V.\n                (xs, U) \\<in> failures P \\<and>\n                ([], V) \\<in> failures Q \\<and>\n                W = insert None U \\<inter> V)) \\<and>\n        (\\<forall>n\\<in>{0<..length xs}.\n            \\<forall>W\\<in>Ra n.\n               take (length xs - n) xs \\<in> sentences P \\<and>\n               (drop (length xs - n) xs, W) \\<in> failures Q) \\<and>\n        (\\<exists>n\\<in>{..length xs}. \\<exists>W. W \\<in> Ra n)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>R.\n                            X \\<union> Y =\n                            (\\<Union>n\\<le>length xs.\n                                \\<Union>W\\<in>R n. W) \\<and>\n                            (\\<forall>W\\<in>R 0.\n                                xs \\<notin> sentences P \\<and>\n                                None \\<notin> set xs \\<and>\n                                (xs, W) \\<in> failures P \\<or>\n                                xs \\<in> sentences P \\<and>\n                                (\\<exists>U V.\n                                    (xs, U) \\<in> failures P \\<and>\n                                    ([], V) \\<in> failures Q \\<and>\n                                    W = insert None U \\<inter> V)) \\<and>\n                            (\\<forall>n\\<in>{0<..length xs}.\n                                \\<forall>W\\<in>R n.\n                                   take (length xs - n) xs\n                                   \\<in> sentences P \\<and>\n                                   (drop (length xs - n) xs, W)\n                                   \\<in> failures Q) \\<and>\n                            (\\<exists>n\\<in>{..length xs}.\n                                \\<exists>W. W \\<in> R n)", "fix xs X Y"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>xs X Y.\n       \\<lbrakk>xs \\<in> sentences P; (xs, X) \\<in> failures P;\n        ([], Y) \\<in> failures Q\\<rbrakk>\n       \\<Longrightarrow> \\<exists>R.\n                            insert None X \\<inter> Y =\n                            (\\<Union>n\\<le>length xs.\n                                \\<Union>W\\<in>R n. W) \\<and>\n                            (\\<forall>W\\<in>R 0.\n                                xs \\<notin> sentences P \\<and>\n                                None \\<notin> set xs \\<and>\n                                (xs, W) \\<in> failures P \\<or>\n                                xs \\<in> sentences P \\<and>\n                                (\\<exists>U V.\n                                    (xs, U) \\<in> failures P \\<and>\n                                    ([], V) \\<in> failures Q \\<and>\n                                    W = insert None U \\<inter> V)) \\<and>\n                            (\\<forall>n\\<in>{0<..length xs}.\n                                \\<forall>W\\<in>R n.\n                                   take (length xs - n) xs\n                                   \\<in> sentences P \\<and>\n                                   (drop (length xs - n) xs, W)\n                                   \\<in> failures Q) \\<and>\n                            (\\<exists>n\\<in>{..length xs}.\n                                \\<exists>W. W \\<in> R n)\n 2. \\<And>xs ys Y.\n       \\<lbrakk>xs \\<in> sentences P; (ys, Y) \\<in> failures Q;\n        ys \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> \\<exists>R.\n                            Y =\n                            (\\<Union>n\\<le>length (xs @ ys).\n                                \\<Union>W\\<in>R n. W) \\<and>\n                            (\\<forall>W\\<in>R 0.\n                                xs @ ys \\<notin> sentences P \\<and>\n                                None \\<notin> set (xs @ ys) \\<and>\n                                (xs @ ys, W) \\<in> failures P \\<or>\n                                xs @ ys \\<in> sentences P \\<and>\n                                (\\<exists>U V.\n                                    (xs @ ys, U) \\<in> failures P \\<and>\n                                    ([], V) \\<in> failures Q \\<and>\n                                    W = insert None U \\<inter> V)) \\<and>\n                            (\\<forall>n\\<in>{0<..length (xs @ ys)}.\n                                \\<forall>W\\<in>R n.\n                                   take (length (xs @ ys) - n) (xs @ ys)\n                                   \\<in> sentences P \\<and>\n                                   (drop (length (xs @ ys) - n) (xs @ ys),\n                                    W)\n                                   \\<in> failures Q) \\<and>\n                            (\\<exists>n\\<in>{..length (xs @ ys)}.\n                                \\<exists>W. W \\<in> R n)\n 3. \\<And>xs X Y R Ra.\n       \\<lbrakk>(xs, X) \\<in> seq_comp_failures P Q;\n        (xs, Y) \\<in> seq_comp_failures P Q;\n        X = (\\<Union>n\\<le>length xs. \\<Union>W\\<in>R n. W) \\<and>\n        (\\<forall>W\\<in>R 0.\n            xs \\<notin> sentences P \\<and>\n            None \\<notin> set xs \\<and> (xs, W) \\<in> failures P \\<or>\n            xs \\<in> sentences P \\<and>\n            (\\<exists>U V.\n                (xs, U) \\<in> failures P \\<and>\n                ([], V) \\<in> failures Q \\<and>\n                W = insert None U \\<inter> V)) \\<and>\n        (\\<forall>n\\<in>{0<..length xs}.\n            \\<forall>W\\<in>R n.\n               take (length xs - n) xs \\<in> sentences P \\<and>\n               (drop (length xs - n) xs, W) \\<in> failures Q) \\<and>\n        (\\<exists>n\\<in>{..length xs}. \\<exists>W. W \\<in> R n);\n        Y = (\\<Union>n\\<le>length xs. \\<Union>W\\<in>Ra n. W) \\<and>\n        (\\<forall>W\\<in>Ra 0.\n            xs \\<notin> sentences P \\<and>\n            None \\<notin> set xs \\<and> (xs, W) \\<in> failures P \\<or>\n            xs \\<in> sentences P \\<and>\n            (\\<exists>U V.\n                (xs, U) \\<in> failures P \\<and>\n                ([], V) \\<in> failures Q \\<and>\n                W = insert None U \\<inter> V)) \\<and>\n        (\\<forall>n\\<in>{0<..length xs}.\n            \\<forall>W\\<in>Ra n.\n               take (length xs - n) xs \\<in> sentences P \\<and>\n               (drop (length xs - n) xs, W) \\<in> failures Q) \\<and>\n        (\\<exists>n\\<in>{..length xs}. \\<exists>W. W \\<in> Ra n)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>R.\n                            X \\<union> Y =\n                            (\\<Union>n\\<le>length xs.\n                                \\<Union>W\\<in>R n. W) \\<and>\n                            (\\<forall>W\\<in>R 0.\n                                xs \\<notin> sentences P \\<and>\n                                None \\<notin> set xs \\<and>\n                                (xs, W) \\<in> failures P \\<or>\n                                xs \\<in> sentences P \\<and>\n                                (\\<exists>U V.\n                                    (xs, U) \\<in> failures P \\<and>\n                                    ([], V) \\<in> failures Q \\<and>\n                                    W = insert None U \\<inter> V)) \\<and>\n                            (\\<forall>n\\<in>{0<..length xs}.\n                                \\<forall>W\\<in>R n.\n                                   take (length xs - n) xs\n                                   \\<in> sentences P \\<and>\n                                   (drop (length xs - n) xs, W)\n                                   \\<in> failures Q) \\<and>\n                            (\\<exists>n\\<in>{..length xs}.\n                                \\<exists>W. W \\<in> R n)", "assume\n    A: \"xs \\<in> sentences P\" and\n    B: \"(xs, X) \\<in> failures P\" and\n    C: \"([], Y) \\<in> failures Q\""], ["proof (state)\nthis:\n  xs \\<in> sentences P\n  (xs, X) \\<in> failures P\n  ([], Y) \\<in> failures Q\n\ngoal (3 subgoals):\n 1. \\<And>xs X Y.\n       \\<lbrakk>xs \\<in> sentences P; (xs, X) \\<in> failures P;\n        ([], Y) \\<in> failures Q\\<rbrakk>\n       \\<Longrightarrow> \\<exists>R.\n                            insert None X \\<inter> Y =\n                            (\\<Union>n\\<le>length xs.\n                                \\<Union>W\\<in>R n. W) \\<and>\n                            (\\<forall>W\\<in>R 0.\n                                xs \\<notin> sentences P \\<and>\n                                None \\<notin> set xs \\<and>\n                                (xs, W) \\<in> failures P \\<or>\n                                xs \\<in> sentences P \\<and>\n                                (\\<exists>U V.\n                                    (xs, U) \\<in> failures P \\<and>\n                                    ([], V) \\<in> failures Q \\<and>\n                                    W = insert None U \\<inter> V)) \\<and>\n                            (\\<forall>n\\<in>{0<..length xs}.\n                                \\<forall>W\\<in>R n.\n                                   take (length xs - n) xs\n                                   \\<in> sentences P \\<and>\n                                   (drop (length xs - n) xs, W)\n                                   \\<in> failures Q) \\<and>\n                            (\\<exists>n\\<in>{..length xs}.\n                                \\<exists>W. W \\<in> R n)\n 2. \\<And>xs ys Y.\n       \\<lbrakk>xs \\<in> sentences P; (ys, Y) \\<in> failures Q;\n        ys \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> \\<exists>R.\n                            Y =\n                            (\\<Union>n\\<le>length (xs @ ys).\n                                \\<Union>W\\<in>R n. W) \\<and>\n                            (\\<forall>W\\<in>R 0.\n                                xs @ ys \\<notin> sentences P \\<and>\n                                None \\<notin> set (xs @ ys) \\<and>\n                                (xs @ ys, W) \\<in> failures P \\<or>\n                                xs @ ys \\<in> sentences P \\<and>\n                                (\\<exists>U V.\n                                    (xs @ ys, U) \\<in> failures P \\<and>\n                                    ([], V) \\<in> failures Q \\<and>\n                                    W = insert None U \\<inter> V)) \\<and>\n                            (\\<forall>n\\<in>{0<..length (xs @ ys)}.\n                                \\<forall>W\\<in>R n.\n                                   take (length (xs @ ys) - n) (xs @ ys)\n                                   \\<in> sentences P \\<and>\n                                   (drop (length (xs @ ys) - n) (xs @ ys),\n                                    W)\n                                   \\<in> failures Q) \\<and>\n                            (\\<exists>n\\<in>{..length (xs @ ys)}.\n                                \\<exists>W. W \\<in> R n)\n 3. \\<And>xs X Y R Ra.\n       \\<lbrakk>(xs, X) \\<in> seq_comp_failures P Q;\n        (xs, Y) \\<in> seq_comp_failures P Q;\n        X = (\\<Union>n\\<le>length xs. \\<Union>W\\<in>R n. W) \\<and>\n        (\\<forall>W\\<in>R 0.\n            xs \\<notin> sentences P \\<and>\n            None \\<notin> set xs \\<and> (xs, W) \\<in> failures P \\<or>\n            xs \\<in> sentences P \\<and>\n            (\\<exists>U V.\n                (xs, U) \\<in> failures P \\<and>\n                ([], V) \\<in> failures Q \\<and>\n                W = insert None U \\<inter> V)) \\<and>\n        (\\<forall>n\\<in>{0<..length xs}.\n            \\<forall>W\\<in>R n.\n               take (length xs - n) xs \\<in> sentences P \\<and>\n               (drop (length xs - n) xs, W) \\<in> failures Q) \\<and>\n        (\\<exists>n\\<in>{..length xs}. \\<exists>W. W \\<in> R n);\n        Y = (\\<Union>n\\<le>length xs. \\<Union>W\\<in>Ra n. W) \\<and>\n        (\\<forall>W\\<in>Ra 0.\n            xs \\<notin> sentences P \\<and>\n            None \\<notin> set xs \\<and> (xs, W) \\<in> failures P \\<or>\n            xs \\<in> sentences P \\<and>\n            (\\<exists>U V.\n                (xs, U) \\<in> failures P \\<and>\n                ([], V) \\<in> failures Q \\<and>\n                W = insert None U \\<inter> V)) \\<and>\n        (\\<forall>n\\<in>{0<..length xs}.\n            \\<forall>W\\<in>Ra n.\n               take (length xs - n) xs \\<in> sentences P \\<and>\n               (drop (length xs - n) xs, W) \\<in> failures Q) \\<and>\n        (\\<exists>n\\<in>{..length xs}. \\<exists>W. W \\<in> Ra n)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>R.\n                            X \\<union> Y =\n                            (\\<Union>n\\<le>length xs.\n                                \\<Union>W\\<in>R n. W) \\<and>\n                            (\\<forall>W\\<in>R 0.\n                                xs \\<notin> sentences P \\<and>\n                                None \\<notin> set xs \\<and>\n                                (xs, W) \\<in> failures P \\<or>\n                                xs \\<in> sentences P \\<and>\n                                (\\<exists>U V.\n                                    (xs, U) \\<in> failures P \\<and>\n                                    ([], V) \\<in> failures Q \\<and>\n                                    W = insert None U \\<inter> V)) \\<and>\n                            (\\<forall>n\\<in>{0<..length xs}.\n                                \\<forall>W\\<in>R n.\n                                   take (length xs - n) xs\n                                   \\<in> sentences P \\<and>\n                                   (drop (length xs - n) xs, W)\n                                   \\<in> failures Q) \\<and>\n                            (\\<exists>n\\<in>{..length xs}.\n                                \\<exists>W. W \\<in> R n)", "show \"\\<exists>R. ?T R xs (insert None X \\<inter> Y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>R.\n       insert None X \\<inter> Y =\n       (\\<Union>n\\<le>length xs. \\<Union>W\\<in>R n. W) \\<and>\n       (\\<forall>W\\<in>R 0.\n           xs \\<notin> sentences P \\<and>\n           None \\<notin> set xs \\<and> (xs, W) \\<in> failures P \\<or>\n           xs \\<in> sentences P \\<and>\n           (\\<exists>U V.\n               (xs, U) \\<in> failures P \\<and>\n               ([], V) \\<in> failures Q \\<and>\n               W = insert None U \\<inter> V)) \\<and>\n       (\\<forall>n\\<in>{0<..length xs}.\n           \\<forall>W\\<in>R n.\n              take (length xs - n) xs \\<in> sentences P \\<and>\n              (drop (length xs - n) xs, W) \\<in> failures Q) \\<and>\n       (\\<exists>n\\<in>{..length xs}. \\<exists>W. W \\<in> R n)", "proof (rule_tac x = \"\\<lambda>n. if n = 0 then {insert None X \\<inter> Y} else {}\" in exI,\n   simp add: A, rule conjI, rule equalityI, rule_tac [1-2] subsetI, simp_all)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<exists>xa\\<in>{..length xs}.\n          \\<exists>X\\<in>if xa = 0 then {insert None X \\<inter> Y} else {}.\n             x \\<in> X \\<Longrightarrow>\n       (x = None \\<or> x \\<in> X) \\<and> x \\<in> Y\n 2. \\<exists>U.\n       (xs, U) \\<in> failures P \\<and>\n       (\\<exists>V.\n           ([], V) \\<in> failures Q \\<and>\n           insert None X \\<inter> Y = insert None U \\<inter> V)", "fix x"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<exists>xa\\<in>{..length xs}.\n          \\<exists>X\\<in>if xa = 0 then {insert None X \\<inter> Y} else {}.\n             x \\<in> X \\<Longrightarrow>\n       (x = None \\<or> x \\<in> X) \\<and> x \\<in> Y\n 2. \\<exists>U.\n       (xs, U) \\<in> failures P \\<and>\n       (\\<exists>V.\n           ([], V) \\<in> failures Q \\<and>\n           insert None X \\<inter> Y = insert None U \\<inter> V)", "assume \"\\<exists>n \\<in> {..length xs}.\n      \\<exists>W \\<in> if n = 0 then {insert None X \\<inter> Y} else {}. x \\<in> W\""], ["proof (state)\nthis:\n  \\<exists>n\\<in>{..length xs}.\n     \\<exists>W\\<in>if n = 0 then {insert None X \\<inter> Y} else {}.\n        x \\<in> W\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<exists>xa\\<in>{..length xs}.\n          \\<exists>X\\<in>if xa = 0 then {insert None X \\<inter> Y} else {}.\n             x \\<in> X \\<Longrightarrow>\n       (x = None \\<or> x \\<in> X) \\<and> x \\<in> Y\n 2. \\<exists>U.\n       (xs, U) \\<in> failures P \\<and>\n       (\\<exists>V.\n           ([], V) \\<in> failures Q \\<and>\n           insert None X \\<inter> Y = insert None U \\<inter> V)", "thus \"(x = None \\<or> x \\<in> X) \\<and> x \\<in> Y\""], ["proof (prove)\nusing this:\n  \\<exists>n\\<in>{..length xs}.\n     \\<exists>W\\<in>if n = 0 then {insert None X \\<inter> Y} else {}.\n        x \\<in> W\n\ngoal (1 subgoal):\n 1. (x = None \\<or> x \\<in> X) \\<and> x \\<in> Y", "by (simp split: if_split_asm)"], ["proof (state)\nthis:\n  (x = None \\<or> x \\<in> X) \\<and> x \\<in> Y\n\ngoal (1 subgoal):\n 1. \\<exists>U.\n       (xs, U) \\<in> failures P \\<and>\n       (\\<exists>V.\n           ([], V) \\<in> failures Q \\<and>\n           insert None X \\<inter> Y = insert None U \\<inter> V)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>U.\n       (xs, U) \\<in> failures P \\<and>\n       (\\<exists>V.\n           ([], V) \\<in> failures Q \\<and>\n           insert None X \\<inter> Y = insert None U \\<inter> V)", "show \"\\<exists>U. (xs, U) \\<in> failures P \\<and> (\\<exists>V. ([], V) \\<in> failures Q \\<and>\n      insert None X \\<inter> Y = insert None U \\<inter> V)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>U.\n       (xs, U) \\<in> failures P \\<and>\n       (\\<exists>V.\n           ([], V) \\<in> failures Q \\<and>\n           insert None X \\<inter> Y = insert None U \\<inter> V)", "proof (rule_tac x = X in exI, rule conjI, simp add: B)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>V.\n       ([], V) \\<in> failures Q \\<and>\n       insert None X \\<inter> Y = insert None X \\<inter> V", "qed (rule_tac x = Y in exI, rule conjI, simp_all add: C)"], ["proof (state)\nthis:\n  \\<exists>U.\n     (xs, U) \\<in> failures P \\<and>\n     (\\<exists>V.\n         ([], V) \\<in> failures Q \\<and>\n         insert None X \\<inter> Y = insert None U \\<inter> V)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>R.\n     insert None X \\<inter> Y =\n     (\\<Union>n\\<le>length xs. \\<Union>W\\<in>R n. W) \\<and>\n     (\\<forall>W\\<in>R 0.\n         xs \\<notin> sentences P \\<and>\n         None \\<notin> set xs \\<and> (xs, W) \\<in> failures P \\<or>\n         xs \\<in> sentences P \\<and>\n         (\\<exists>U V.\n             (xs, U) \\<in> failures P \\<and>\n             ([], V) \\<in> failures Q \\<and>\n             W = insert None U \\<inter> V)) \\<and>\n     (\\<forall>n\\<in>{0<..length xs}.\n         \\<forall>W\\<in>R n.\n            take (length xs - n) xs \\<in> sentences P \\<and>\n            (drop (length xs - n) xs, W) \\<in> failures Q) \\<and>\n     (\\<exists>n\\<in>{..length xs}. \\<exists>W. W \\<in> R n)\n\ngoal (2 subgoals):\n 1. \\<And>xs ys Y.\n       \\<lbrakk>xs \\<in> sentences P; (ys, Y) \\<in> failures Q;\n        ys \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> \\<exists>R.\n                            Y =\n                            (\\<Union>n\\<le>length (xs @ ys).\n                                \\<Union>W\\<in>R n. W) \\<and>\n                            (\\<forall>W\\<in>R 0.\n                                xs @ ys \\<notin> sentences P \\<and>\n                                None \\<notin> set (xs @ ys) \\<and>\n                                (xs @ ys, W) \\<in> failures P \\<or>\n                                xs @ ys \\<in> sentences P \\<and>\n                                (\\<exists>U V.\n                                    (xs @ ys, U) \\<in> failures P \\<and>\n                                    ([], V) \\<in> failures Q \\<and>\n                                    W = insert None U \\<inter> V)) \\<and>\n                            (\\<forall>n\\<in>{0<..length (xs @ ys)}.\n                                \\<forall>W\\<in>R n.\n                                   take (length (xs @ ys) - n) (xs @ ys)\n                                   \\<in> sentences P \\<and>\n                                   (drop (length (xs @ ys) - n) (xs @ ys),\n                                    W)\n                                   \\<in> failures Q) \\<and>\n                            (\\<exists>n\\<in>{..length (xs @ ys)}.\n                                \\<exists>W. W \\<in> R n)\n 2. \\<And>xs X Y R Ra.\n       \\<lbrakk>(xs, X) \\<in> seq_comp_failures P Q;\n        (xs, Y) \\<in> seq_comp_failures P Q;\n        X = (\\<Union>n\\<le>length xs. \\<Union>W\\<in>R n. W) \\<and>\n        (\\<forall>W\\<in>R 0.\n            xs \\<notin> sentences P \\<and>\n            None \\<notin> set xs \\<and> (xs, W) \\<in> failures P \\<or>\n            xs \\<in> sentences P \\<and>\n            (\\<exists>U V.\n                (xs, U) \\<in> failures P \\<and>\n                ([], V) \\<in> failures Q \\<and>\n                W = insert None U \\<inter> V)) \\<and>\n        (\\<forall>n\\<in>{0<..length xs}.\n            \\<forall>W\\<in>R n.\n               take (length xs - n) xs \\<in> sentences P \\<and>\n               (drop (length xs - n) xs, W) \\<in> failures Q) \\<and>\n        (\\<exists>n\\<in>{..length xs}. \\<exists>W. W \\<in> R n);\n        Y = (\\<Union>n\\<le>length xs. \\<Union>W\\<in>Ra n. W) \\<and>\n        (\\<forall>W\\<in>Ra 0.\n            xs \\<notin> sentences P \\<and>\n            None \\<notin> set xs \\<and> (xs, W) \\<in> failures P \\<or>\n            xs \\<in> sentences P \\<and>\n            (\\<exists>U V.\n                (xs, U) \\<in> failures P \\<and>\n                ([], V) \\<in> failures Q \\<and>\n                W = insert None U \\<inter> V)) \\<and>\n        (\\<forall>n\\<in>{0<..length xs}.\n            \\<forall>W\\<in>Ra n.\n               take (length xs - n) xs \\<in> sentences P \\<and>\n               (drop (length xs - n) xs, W) \\<in> failures Q) \\<and>\n        (\\<exists>n\\<in>{..length xs}. \\<exists>W. W \\<in> Ra n)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>R.\n                            X \\<union> Y =\n                            (\\<Union>n\\<le>length xs.\n                                \\<Union>W\\<in>R n. W) \\<and>\n                            (\\<forall>W\\<in>R 0.\n                                xs \\<notin> sentences P \\<and>\n                                None \\<notin> set xs \\<and>\n                                (xs, W) \\<in> failures P \\<or>\n                                xs \\<in> sentences P \\<and>\n                                (\\<exists>U V.\n                                    (xs, U) \\<in> failures P \\<and>\n                                    ([], V) \\<in> failures Q \\<and>\n                                    W = insert None U \\<inter> V)) \\<and>\n                            (\\<forall>n\\<in>{0<..length xs}.\n                                \\<forall>W\\<in>R n.\n                                   take (length xs - n) xs\n                                   \\<in> sentences P \\<and>\n                                   (drop (length xs - n) xs, W)\n                                   \\<in> failures Q) \\<and>\n                            (\\<exists>n\\<in>{..length xs}.\n                                \\<exists>W. W \\<in> R n)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>xs ys Y.\n       \\<lbrakk>xs \\<in> sentences P; (ys, Y) \\<in> failures Q;\n        ys \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> \\<exists>R.\n                            Y =\n                            (\\<Union>n\\<le>length (xs @ ys).\n                                \\<Union>W\\<in>R n. W) \\<and>\n                            (\\<forall>W\\<in>R 0.\n                                xs @ ys \\<notin> sentences P \\<and>\n                                None \\<notin> set (xs @ ys) \\<and>\n                                (xs @ ys, W) \\<in> failures P \\<or>\n                                xs @ ys \\<in> sentences P \\<and>\n                                (\\<exists>U V.\n                                    (xs @ ys, U) \\<in> failures P \\<and>\n                                    ([], V) \\<in> failures Q \\<and>\n                                    W = insert None U \\<inter> V)) \\<and>\n                            (\\<forall>n\\<in>{0<..length (xs @ ys)}.\n                                \\<forall>W\\<in>R n.\n                                   take (length (xs @ ys) - n) (xs @ ys)\n                                   \\<in> sentences P \\<and>\n                                   (drop (length (xs @ ys) - n) (xs @ ys),\n                                    W)\n                                   \\<in> failures Q) \\<and>\n                            (\\<exists>n\\<in>{..length (xs @ ys)}.\n                                \\<exists>W. W \\<in> R n)\n 2. \\<And>xs X Y R Ra.\n       \\<lbrakk>(xs, X) \\<in> seq_comp_failures P Q;\n        (xs, Y) \\<in> seq_comp_failures P Q;\n        X = (\\<Union>n\\<le>length xs. \\<Union>W\\<in>R n. W) \\<and>\n        (\\<forall>W\\<in>R 0.\n            xs \\<notin> sentences P \\<and>\n            None \\<notin> set xs \\<and> (xs, W) \\<in> failures P \\<or>\n            xs \\<in> sentences P \\<and>\n            (\\<exists>U V.\n                (xs, U) \\<in> failures P \\<and>\n                ([], V) \\<in> failures Q \\<and>\n                W = insert None U \\<inter> V)) \\<and>\n        (\\<forall>n\\<in>{0<..length xs}.\n            \\<forall>W\\<in>R n.\n               take (length xs - n) xs \\<in> sentences P \\<and>\n               (drop (length xs - n) xs, W) \\<in> failures Q) \\<and>\n        (\\<exists>n\\<in>{..length xs}. \\<exists>W. W \\<in> R n);\n        Y = (\\<Union>n\\<le>length xs. \\<Union>W\\<in>Ra n. W) \\<and>\n        (\\<forall>W\\<in>Ra 0.\n            xs \\<notin> sentences P \\<and>\n            None \\<notin> set xs \\<and> (xs, W) \\<in> failures P \\<or>\n            xs \\<in> sentences P \\<and>\n            (\\<exists>U V.\n                (xs, U) \\<in> failures P \\<and>\n                ([], V) \\<in> failures Q \\<and>\n                W = insert None U \\<inter> V)) \\<and>\n        (\\<forall>n\\<in>{0<..length xs}.\n            \\<forall>W\\<in>Ra n.\n               take (length xs - n) xs \\<in> sentences P \\<and>\n               (drop (length xs - n) xs, W) \\<in> failures Q) \\<and>\n        (\\<exists>n\\<in>{..length xs}. \\<exists>W. W \\<in> Ra n)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>R.\n                            X \\<union> Y =\n                            (\\<Union>n\\<le>length xs.\n                                \\<Union>W\\<in>R n. W) \\<and>\n                            (\\<forall>W\\<in>R 0.\n                                xs \\<notin> sentences P \\<and>\n                                None \\<notin> set xs \\<and>\n                                (xs, W) \\<in> failures P \\<or>\n                                xs \\<in> sentences P \\<and>\n                                (\\<exists>U V.\n                                    (xs, U) \\<in> failures P \\<and>\n                                    ([], V) \\<in> failures Q \\<and>\n                                    W = insert None U \\<inter> V)) \\<and>\n                            (\\<forall>n\\<in>{0<..length xs}.\n                                \\<forall>W\\<in>R n.\n                                   take (length xs - n) xs\n                                   \\<in> sentences P \\<and>\n                                   (drop (length xs - n) xs, W)\n                                   \\<in> failures Q) \\<and>\n                            (\\<exists>n\\<in>{..length xs}.\n                                \\<exists>W. W \\<in> R n)", "fix xs ys Y"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>xs ys Y.\n       \\<lbrakk>xs \\<in> sentences P; (ys, Y) \\<in> failures Q;\n        ys \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> \\<exists>R.\n                            Y =\n                            (\\<Union>n\\<le>length (xs @ ys).\n                                \\<Union>W\\<in>R n. W) \\<and>\n                            (\\<forall>W\\<in>R 0.\n                                xs @ ys \\<notin> sentences P \\<and>\n                                None \\<notin> set (xs @ ys) \\<and>\n                                (xs @ ys, W) \\<in> failures P \\<or>\n                                xs @ ys \\<in> sentences P \\<and>\n                                (\\<exists>U V.\n                                    (xs @ ys, U) \\<in> failures P \\<and>\n                                    ([], V) \\<in> failures Q \\<and>\n                                    W = insert None U \\<inter> V)) \\<and>\n                            (\\<forall>n\\<in>{0<..length (xs @ ys)}.\n                                \\<forall>W\\<in>R n.\n                                   take (length (xs @ ys) - n) (xs @ ys)\n                                   \\<in> sentences P \\<and>\n                                   (drop (length (xs @ ys) - n) (xs @ ys),\n                                    W)\n                                   \\<in> failures Q) \\<and>\n                            (\\<exists>n\\<in>{..length (xs @ ys)}.\n                                \\<exists>W. W \\<in> R n)\n 2. \\<And>xs X Y R Ra.\n       \\<lbrakk>(xs, X) \\<in> seq_comp_failures P Q;\n        (xs, Y) \\<in> seq_comp_failures P Q;\n        X = (\\<Union>n\\<le>length xs. \\<Union>W\\<in>R n. W) \\<and>\n        (\\<forall>W\\<in>R 0.\n            xs \\<notin> sentences P \\<and>\n            None \\<notin> set xs \\<and> (xs, W) \\<in> failures P \\<or>\n            xs \\<in> sentences P \\<and>\n            (\\<exists>U V.\n                (xs, U) \\<in> failures P \\<and>\n                ([], V) \\<in> failures Q \\<and>\n                W = insert None U \\<inter> V)) \\<and>\n        (\\<forall>n\\<in>{0<..length xs}.\n            \\<forall>W\\<in>R n.\n               take (length xs - n) xs \\<in> sentences P \\<and>\n               (drop (length xs - n) xs, W) \\<in> failures Q) \\<and>\n        (\\<exists>n\\<in>{..length xs}. \\<exists>W. W \\<in> R n);\n        Y = (\\<Union>n\\<le>length xs. \\<Union>W\\<in>Ra n. W) \\<and>\n        (\\<forall>W\\<in>Ra 0.\n            xs \\<notin> sentences P \\<and>\n            None \\<notin> set xs \\<and> (xs, W) \\<in> failures P \\<or>\n            xs \\<in> sentences P \\<and>\n            (\\<exists>U V.\n                (xs, U) \\<in> failures P \\<and>\n                ([], V) \\<in> failures Q \\<and>\n                W = insert None U \\<inter> V)) \\<and>\n        (\\<forall>n\\<in>{0<..length xs}.\n            \\<forall>W\\<in>Ra n.\n               take (length xs - n) xs \\<in> sentences P \\<and>\n               (drop (length xs - n) xs, W) \\<in> failures Q) \\<and>\n        (\\<exists>n\\<in>{..length xs}. \\<exists>W. W \\<in> Ra n)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>R.\n                            X \\<union> Y =\n                            (\\<Union>n\\<le>length xs.\n                                \\<Union>W\\<in>R n. W) \\<and>\n                            (\\<forall>W\\<in>R 0.\n                                xs \\<notin> sentences P \\<and>\n                                None \\<notin> set xs \\<and>\n                                (xs, W) \\<in> failures P \\<or>\n                                xs \\<in> sentences P \\<and>\n                                (\\<exists>U V.\n                                    (xs, U) \\<in> failures P \\<and>\n                                    ([], V) \\<in> failures Q \\<and>\n                                    W = insert None U \\<inter> V)) \\<and>\n                            (\\<forall>n\\<in>{0<..length xs}.\n                                \\<forall>W\\<in>R n.\n                                   take (length xs - n) xs\n                                   \\<in> sentences P \\<and>\n                                   (drop (length xs - n) xs, W)\n                                   \\<in> failures Q) \\<and>\n                            (\\<exists>n\\<in>{..length xs}.\n                                \\<exists>W. W \\<in> R n)", "assume\n    A: \"xs \\<in> sentences P\" and\n    B: \"(ys, Y) \\<in> failures Q\" and\n    C: \"ys \\<noteq> []\""], ["proof (state)\nthis:\n  xs \\<in> sentences P\n  (ys, Y) \\<in> failures Q\n  ys \\<noteq> []\n\ngoal (2 subgoals):\n 1. \\<And>xs ys Y.\n       \\<lbrakk>xs \\<in> sentences P; (ys, Y) \\<in> failures Q;\n        ys \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> \\<exists>R.\n                            Y =\n                            (\\<Union>n\\<le>length (xs @ ys).\n                                \\<Union>W\\<in>R n. W) \\<and>\n                            (\\<forall>W\\<in>R 0.\n                                xs @ ys \\<notin> sentences P \\<and>\n                                None \\<notin> set (xs @ ys) \\<and>\n                                (xs @ ys, W) \\<in> failures P \\<or>\n                                xs @ ys \\<in> sentences P \\<and>\n                                (\\<exists>U V.\n                                    (xs @ ys, U) \\<in> failures P \\<and>\n                                    ([], V) \\<in> failures Q \\<and>\n                                    W = insert None U \\<inter> V)) \\<and>\n                            (\\<forall>n\\<in>{0<..length (xs @ ys)}.\n                                \\<forall>W\\<in>R n.\n                                   take (length (xs @ ys) - n) (xs @ ys)\n                                   \\<in> sentences P \\<and>\n                                   (drop (length (xs @ ys) - n) (xs @ ys),\n                                    W)\n                                   \\<in> failures Q) \\<and>\n                            (\\<exists>n\\<in>{..length (xs @ ys)}.\n                                \\<exists>W. W \\<in> R n)\n 2. \\<And>xs X Y R Ra.\n       \\<lbrakk>(xs, X) \\<in> seq_comp_failures P Q;\n        (xs, Y) \\<in> seq_comp_failures P Q;\n        X = (\\<Union>n\\<le>length xs. \\<Union>W\\<in>R n. W) \\<and>\n        (\\<forall>W\\<in>R 0.\n            xs \\<notin> sentences P \\<and>\n            None \\<notin> set xs \\<and> (xs, W) \\<in> failures P \\<or>\n            xs \\<in> sentences P \\<and>\n            (\\<exists>U V.\n                (xs, U) \\<in> failures P \\<and>\n                ([], V) \\<in> failures Q \\<and>\n                W = insert None U \\<inter> V)) \\<and>\n        (\\<forall>n\\<in>{0<..length xs}.\n            \\<forall>W\\<in>R n.\n               take (length xs - n) xs \\<in> sentences P \\<and>\n               (drop (length xs - n) xs, W) \\<in> failures Q) \\<and>\n        (\\<exists>n\\<in>{..length xs}. \\<exists>W. W \\<in> R n);\n        Y = (\\<Union>n\\<le>length xs. \\<Union>W\\<in>Ra n. W) \\<and>\n        (\\<forall>W\\<in>Ra 0.\n            xs \\<notin> sentences P \\<and>\n            None \\<notin> set xs \\<and> (xs, W) \\<in> failures P \\<or>\n            xs \\<in> sentences P \\<and>\n            (\\<exists>U V.\n                (xs, U) \\<in> failures P \\<and>\n                ([], V) \\<in> failures Q \\<and>\n                W = insert None U \\<inter> V)) \\<and>\n        (\\<forall>n\\<in>{0<..length xs}.\n            \\<forall>W\\<in>Ra n.\n               take (length xs - n) xs \\<in> sentences P \\<and>\n               (drop (length xs - n) xs, W) \\<in> failures Q) \\<and>\n        (\\<exists>n\\<in>{..length xs}. \\<exists>W. W \\<in> Ra n)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>R.\n                            X \\<union> Y =\n                            (\\<Union>n\\<le>length xs.\n                                \\<Union>W\\<in>R n. W) \\<and>\n                            (\\<forall>W\\<in>R 0.\n                                xs \\<notin> sentences P \\<and>\n                                None \\<notin> set xs \\<and>\n                                (xs, W) \\<in> failures P \\<or>\n                                xs \\<in> sentences P \\<and>\n                                (\\<exists>U V.\n                                    (xs, U) \\<in> failures P \\<and>\n                                    ([], V) \\<in> failures Q \\<and>\n                                    W = insert None U \\<inter> V)) \\<and>\n                            (\\<forall>n\\<in>{0<..length xs}.\n                                \\<forall>W\\<in>R n.\n                                   take (length xs - n) xs\n                                   \\<in> sentences P \\<and>\n                                   (drop (length xs - n) xs, W)\n                                   \\<in> failures Q) \\<and>\n                            (\\<exists>n\\<in>{..length xs}.\n                                \\<exists>W. W \\<in> R n)", "show \"\\<exists>R. ?T R (xs @ ys) Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>R.\n       Y = (\\<Union>n\\<le>length (xs @ ys). \\<Union>W\\<in>R n. W) \\<and>\n       (\\<forall>W\\<in>R 0.\n           xs @ ys \\<notin> sentences P \\<and>\n           None \\<notin> set (xs @ ys) \\<and>\n           (xs @ ys, W) \\<in> failures P \\<or>\n           xs @ ys \\<in> sentences P \\<and>\n           (\\<exists>U V.\n               (xs @ ys, U) \\<in> failures P \\<and>\n               ([], V) \\<in> failures Q \\<and>\n               W = insert None U \\<inter> V)) \\<and>\n       (\\<forall>n\\<in>{0<..length (xs @ ys)}.\n           \\<forall>W\\<in>R n.\n              take (length (xs @ ys) - n) (xs @ ys) \\<in> sentences P \\<and>\n              (drop (length (xs @ ys) - n) (xs @ ys), W)\n              \\<in> failures Q) \\<and>\n       (\\<exists>n\\<in>{..length (xs @ ys)}. \\<exists>W. W \\<in> R n)", "proof (rule_tac x = \"\\<lambda>n. if n = length ys then {Y} else {}\" in exI,\n   simp add: A B C, rule equalityI, rule_tac [!] subsetI, simp_all)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<exists>xa\\<in>{..length xs + length ys}.\n          \\<exists>X\\<in>if xa = length ys then {Y} else {}.\n             x \\<in> X \\<Longrightarrow>\n       x \\<in> Y", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<exists>xa\\<in>{..length xs + length ys}.\n          \\<exists>X\\<in>if xa = length ys then {Y} else {}.\n             x \\<in> X \\<Longrightarrow>\n       x \\<in> Y", "assume \"\\<exists>n \\<in> {..length xs + length ys}.\n      \\<exists>W \\<in> if n = length ys then {Y} else {}. x \\<in> W\""], ["proof (state)\nthis:\n  \\<exists>n\\<in>{..length xs + length ys}.\n     \\<exists>W\\<in>if n = length ys then {Y} else {}. x \\<in> W\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<exists>xa\\<in>{..length xs + length ys}.\n          \\<exists>X\\<in>if xa = length ys then {Y} else {}.\n             x \\<in> X \\<Longrightarrow>\n       x \\<in> Y", "thus \"x \\<in> Y\""], ["proof (prove)\nusing this:\n  \\<exists>n\\<in>{..length xs + length ys}.\n     \\<exists>W\\<in>if n = length ys then {Y} else {}. x \\<in> W\n\ngoal (1 subgoal):\n 1. x \\<in> Y", "by (simp split: if_split_asm)"], ["proof (state)\nthis:\n  x \\<in> Y\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>R.\n     Y = (\\<Union>n\\<le>length (xs @ ys). \\<Union>W\\<in>R n. W) \\<and>\n     (\\<forall>W\\<in>R 0.\n         xs @ ys \\<notin> sentences P \\<and>\n         None \\<notin> set (xs @ ys) \\<and>\n         (xs @ ys, W) \\<in> failures P \\<or>\n         xs @ ys \\<in> sentences P \\<and>\n         (\\<exists>U V.\n             (xs @ ys, U) \\<in> failures P \\<and>\n             ([], V) \\<in> failures Q \\<and>\n             W = insert None U \\<inter> V)) \\<and>\n     (\\<forall>n\\<in>{0<..length (xs @ ys)}.\n         \\<forall>W\\<in>R n.\n            take (length (xs @ ys) - n) (xs @ ys) \\<in> sentences P \\<and>\n            (drop (length (xs @ ys) - n) (xs @ ys), W)\n            \\<in> failures Q) \\<and>\n     (\\<exists>n\\<in>{..length (xs @ ys)}. \\<exists>W. W \\<in> R n)\n\ngoal (1 subgoal):\n 1. \\<And>xs X Y R Ra.\n       \\<lbrakk>(xs, X) \\<in> seq_comp_failures P Q;\n        (xs, Y) \\<in> seq_comp_failures P Q;\n        X = (\\<Union>n\\<le>length xs. \\<Union>W\\<in>R n. W) \\<and>\n        (\\<forall>W\\<in>R 0.\n            xs \\<notin> sentences P \\<and>\n            None \\<notin> set xs \\<and> (xs, W) \\<in> failures P \\<or>\n            xs \\<in> sentences P \\<and>\n            (\\<exists>U V.\n                (xs, U) \\<in> failures P \\<and>\n                ([], V) \\<in> failures Q \\<and>\n                W = insert None U \\<inter> V)) \\<and>\n        (\\<forall>n\\<in>{0<..length xs}.\n            \\<forall>W\\<in>R n.\n               take (length xs - n) xs \\<in> sentences P \\<and>\n               (drop (length xs - n) xs, W) \\<in> failures Q) \\<and>\n        (\\<exists>n\\<in>{..length xs}. \\<exists>W. W \\<in> R n);\n        Y = (\\<Union>n\\<le>length xs. \\<Union>W\\<in>Ra n. W) \\<and>\n        (\\<forall>W\\<in>Ra 0.\n            xs \\<notin> sentences P \\<and>\n            None \\<notin> set xs \\<and> (xs, W) \\<in> failures P \\<or>\n            xs \\<in> sentences P \\<and>\n            (\\<exists>U V.\n                (xs, U) \\<in> failures P \\<and>\n                ([], V) \\<in> failures Q \\<and>\n                W = insert None U \\<inter> V)) \\<and>\n        (\\<forall>n\\<in>{0<..length xs}.\n            \\<forall>W\\<in>Ra n.\n               take (length xs - n) xs \\<in> sentences P \\<and>\n               (drop (length xs - n) xs, W) \\<in> failures Q) \\<and>\n        (\\<exists>n\\<in>{..length xs}. \\<exists>W. W \\<in> Ra n)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>R.\n                            X \\<union> Y =\n                            (\\<Union>n\\<le>length xs.\n                                \\<Union>W\\<in>R n. W) \\<and>\n                            (\\<forall>W\\<in>R 0.\n                                xs \\<notin> sentences P \\<and>\n                                None \\<notin> set xs \\<and>\n                                (xs, W) \\<in> failures P \\<or>\n                                xs \\<in> sentences P \\<and>\n                                (\\<exists>U V.\n                                    (xs, U) \\<in> failures P \\<and>\n                                    ([], V) \\<in> failures Q \\<and>\n                                    W = insert None U \\<inter> V)) \\<and>\n                            (\\<forall>n\\<in>{0<..length xs}.\n                                \\<forall>W\\<in>R n.\n                                   take (length xs - n) xs\n                                   \\<in> sentences P \\<and>\n                                   (drop (length xs - n) xs, W)\n                                   \\<in> failures Q) \\<and>\n                            (\\<exists>n\\<in>{..length xs}.\n                                \\<exists>W. W \\<in> R n)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xs X Y R Ra.\n       \\<lbrakk>(xs, X) \\<in> seq_comp_failures P Q;\n        (xs, Y) \\<in> seq_comp_failures P Q;\n        X = (\\<Union>n\\<le>length xs. \\<Union>W\\<in>R n. W) \\<and>\n        (\\<forall>W\\<in>R 0.\n            xs \\<notin> sentences P \\<and>\n            None \\<notin> set xs \\<and> (xs, W) \\<in> failures P \\<or>\n            xs \\<in> sentences P \\<and>\n            (\\<exists>U V.\n                (xs, U) \\<in> failures P \\<and>\n                ([], V) \\<in> failures Q \\<and>\n                W = insert None U \\<inter> V)) \\<and>\n        (\\<forall>n\\<in>{0<..length xs}.\n            \\<forall>W\\<in>R n.\n               take (length xs - n) xs \\<in> sentences P \\<and>\n               (drop (length xs - n) xs, W) \\<in> failures Q) \\<and>\n        (\\<exists>n\\<in>{..length xs}. \\<exists>W. W \\<in> R n);\n        Y = (\\<Union>n\\<le>length xs. \\<Union>W\\<in>Ra n. W) \\<and>\n        (\\<forall>W\\<in>Ra 0.\n            xs \\<notin> sentences P \\<and>\n            None \\<notin> set xs \\<and> (xs, W) \\<in> failures P \\<or>\n            xs \\<in> sentences P \\<and>\n            (\\<exists>U V.\n                (xs, U) \\<in> failures P \\<and>\n                ([], V) \\<in> failures Q \\<and>\n                W = insert None U \\<inter> V)) \\<and>\n        (\\<forall>n\\<in>{0<..length xs}.\n            \\<forall>W\\<in>Ra n.\n               take (length xs - n) xs \\<in> sentences P \\<and>\n               (drop (length xs - n) xs, W) \\<in> failures Q) \\<and>\n        (\\<exists>n\\<in>{..length xs}. \\<exists>W. W \\<in> Ra n)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>R.\n                            X \\<union> Y =\n                            (\\<Union>n\\<le>length xs.\n                                \\<Union>W\\<in>R n. W) \\<and>\n                            (\\<forall>W\\<in>R 0.\n                                xs \\<notin> sentences P \\<and>\n                                None \\<notin> set xs \\<and>\n                                (xs, W) \\<in> failures P \\<or>\n                                xs \\<in> sentences P \\<and>\n                                (\\<exists>U V.\n                                    (xs, U) \\<in> failures P \\<and>\n                                    ([], V) \\<in> failures Q \\<and>\n                                    W = insert None U \\<inter> V)) \\<and>\n                            (\\<forall>n\\<in>{0<..length xs}.\n                                \\<forall>W\\<in>R n.\n                                   take (length xs - n) xs\n                                   \\<in> sentences P \\<and>\n                                   (drop (length xs - n) xs, W)\n                                   \\<in> failures Q) \\<and>\n                            (\\<exists>n\\<in>{..length xs}.\n                                \\<exists>W. W \\<in> R n)", "fix xs X Y Rx Ry"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xs X Y R Ra.\n       \\<lbrakk>(xs, X) \\<in> seq_comp_failures P Q;\n        (xs, Y) \\<in> seq_comp_failures P Q;\n        X = (\\<Union>n\\<le>length xs. \\<Union>W\\<in>R n. W) \\<and>\n        (\\<forall>W\\<in>R 0.\n            xs \\<notin> sentences P \\<and>\n            None \\<notin> set xs \\<and> (xs, W) \\<in> failures P \\<or>\n            xs \\<in> sentences P \\<and>\n            (\\<exists>U V.\n                (xs, U) \\<in> failures P \\<and>\n                ([], V) \\<in> failures Q \\<and>\n                W = insert None U \\<inter> V)) \\<and>\n        (\\<forall>n\\<in>{0<..length xs}.\n            \\<forall>W\\<in>R n.\n               take (length xs - n) xs \\<in> sentences P \\<and>\n               (drop (length xs - n) xs, W) \\<in> failures Q) \\<and>\n        (\\<exists>n\\<in>{..length xs}. \\<exists>W. W \\<in> R n);\n        Y = (\\<Union>n\\<le>length xs. \\<Union>W\\<in>Ra n. W) \\<and>\n        (\\<forall>W\\<in>Ra 0.\n            xs \\<notin> sentences P \\<and>\n            None \\<notin> set xs \\<and> (xs, W) \\<in> failures P \\<or>\n            xs \\<in> sentences P \\<and>\n            (\\<exists>U V.\n                (xs, U) \\<in> failures P \\<and>\n                ([], V) \\<in> failures Q \\<and>\n                W = insert None U \\<inter> V)) \\<and>\n        (\\<forall>n\\<in>{0<..length xs}.\n            \\<forall>W\\<in>Ra n.\n               take (length xs - n) xs \\<in> sentences P \\<and>\n               (drop (length xs - n) xs, W) \\<in> failures Q) \\<and>\n        (\\<exists>n\\<in>{..length xs}. \\<exists>W. W \\<in> Ra n)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>R.\n                            X \\<union> Y =\n                            (\\<Union>n\\<le>length xs.\n                                \\<Union>W\\<in>R n. W) \\<and>\n                            (\\<forall>W\\<in>R 0.\n                                xs \\<notin> sentences P \\<and>\n                                None \\<notin> set xs \\<and>\n                                (xs, W) \\<in> failures P \\<or>\n                                xs \\<in> sentences P \\<and>\n                                (\\<exists>U V.\n                                    (xs, U) \\<in> failures P \\<and>\n                                    ([], V) \\<in> failures Q \\<and>\n                                    W = insert None U \\<inter> V)) \\<and>\n                            (\\<forall>n\\<in>{0<..length xs}.\n                                \\<forall>W\\<in>R n.\n                                   take (length xs - n) xs\n                                   \\<in> sentences P \\<and>\n                                   (drop (length xs - n) xs, W)\n                                   \\<in> failures Q) \\<and>\n                            (\\<exists>n\\<in>{..length xs}.\n                                \\<exists>W. W \\<in> R n)", "assume\n    A: \"?T Rx xs X\" and\n    B: \"?T Ry xs Y\""], ["proof (state)\nthis:\n  X = (\\<Union>n\\<le>length xs. \\<Union>W\\<in>Rx n. W) \\<and>\n  (\\<forall>W\\<in>Rx 0.\n      xs \\<notin> sentences P \\<and>\n      None \\<notin> set xs \\<and> (xs, W) \\<in> failures P \\<or>\n      xs \\<in> sentences P \\<and>\n      (\\<exists>U V.\n          (xs, U) \\<in> failures P \\<and>\n          ([], V) \\<in> failures Q \\<and>\n          W = insert None U \\<inter> V)) \\<and>\n  (\\<forall>n\\<in>{0<..length xs}.\n      \\<forall>W\\<in>Rx n.\n         take (length xs - n) xs \\<in> sentences P \\<and>\n         (drop (length xs - n) xs, W) \\<in> failures Q) \\<and>\n  (\\<exists>n\\<in>{..length xs}. \\<exists>W. W \\<in> Rx n)\n  Y = (\\<Union>n\\<le>length xs. \\<Union>W\\<in>Ry n. W) \\<and>\n  (\\<forall>W\\<in>Ry 0.\n      xs \\<notin> sentences P \\<and>\n      None \\<notin> set xs \\<and> (xs, W) \\<in> failures P \\<or>\n      xs \\<in> sentences P \\<and>\n      (\\<exists>U V.\n          (xs, U) \\<in> failures P \\<and>\n          ([], V) \\<in> failures Q \\<and>\n          W = insert None U \\<inter> V)) \\<and>\n  (\\<forall>n\\<in>{0<..length xs}.\n      \\<forall>W\\<in>Ry n.\n         take (length xs - n) xs \\<in> sentences P \\<and>\n         (drop (length xs - n) xs, W) \\<in> failures Q) \\<and>\n  (\\<exists>n\\<in>{..length xs}. \\<exists>W. W \\<in> Ry n)\n\ngoal (1 subgoal):\n 1. \\<And>xs X Y R Ra.\n       \\<lbrakk>(xs, X) \\<in> seq_comp_failures P Q;\n        (xs, Y) \\<in> seq_comp_failures P Q;\n        X = (\\<Union>n\\<le>length xs. \\<Union>W\\<in>R n. W) \\<and>\n        (\\<forall>W\\<in>R 0.\n            xs \\<notin> sentences P \\<and>\n            None \\<notin> set xs \\<and> (xs, W) \\<in> failures P \\<or>\n            xs \\<in> sentences P \\<and>\n            (\\<exists>U V.\n                (xs, U) \\<in> failures P \\<and>\n                ([], V) \\<in> failures Q \\<and>\n                W = insert None U \\<inter> V)) \\<and>\n        (\\<forall>n\\<in>{0<..length xs}.\n            \\<forall>W\\<in>R n.\n               take (length xs - n) xs \\<in> sentences P \\<and>\n               (drop (length xs - n) xs, W) \\<in> failures Q) \\<and>\n        (\\<exists>n\\<in>{..length xs}. \\<exists>W. W \\<in> R n);\n        Y = (\\<Union>n\\<le>length xs. \\<Union>W\\<in>Ra n. W) \\<and>\n        (\\<forall>W\\<in>Ra 0.\n            xs \\<notin> sentences P \\<and>\n            None \\<notin> set xs \\<and> (xs, W) \\<in> failures P \\<or>\n            xs \\<in> sentences P \\<and>\n            (\\<exists>U V.\n                (xs, U) \\<in> failures P \\<and>\n                ([], V) \\<in> failures Q \\<and>\n                W = insert None U \\<inter> V)) \\<and>\n        (\\<forall>n\\<in>{0<..length xs}.\n            \\<forall>W\\<in>Ra n.\n               take (length xs - n) xs \\<in> sentences P \\<and>\n               (drop (length xs - n) xs, W) \\<in> failures Q) \\<and>\n        (\\<exists>n\\<in>{..length xs}. \\<exists>W. W \\<in> Ra n)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>R.\n                            X \\<union> Y =\n                            (\\<Union>n\\<le>length xs.\n                                \\<Union>W\\<in>R n. W) \\<and>\n                            (\\<forall>W\\<in>R 0.\n                                xs \\<notin> sentences P \\<and>\n                                None \\<notin> set xs \\<and>\n                                (xs, W) \\<in> failures P \\<or>\n                                xs \\<in> sentences P \\<and>\n                                (\\<exists>U V.\n                                    (xs, U) \\<in> failures P \\<and>\n                                    ([], V) \\<in> failures Q \\<and>\n                                    W = insert None U \\<inter> V)) \\<and>\n                            (\\<forall>n\\<in>{0<..length xs}.\n                                \\<forall>W\\<in>R n.\n                                   take (length xs - n) xs\n                                   \\<in> sentences P \\<and>\n                                   (drop (length xs - n) xs, W)\n                                   \\<in> failures Q) \\<and>\n                            (\\<exists>n\\<in>{..length xs}.\n                                \\<exists>W. W \\<in> R n)", "show \"\\<exists>R. ?T R xs (X \\<union> Y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>R.\n       X \\<union> Y = (\\<Union>n\\<le>length xs. \\<Union>W\\<in>R n. W) \\<and>\n       (\\<forall>W\\<in>R 0.\n           xs \\<notin> sentences P \\<and>\n           None \\<notin> set xs \\<and> (xs, W) \\<in> failures P \\<or>\n           xs \\<in> sentences P \\<and>\n           (\\<exists>U V.\n               (xs, U) \\<in> failures P \\<and>\n               ([], V) \\<in> failures Q \\<and>\n               W = insert None U \\<inter> V)) \\<and>\n       (\\<forall>n\\<in>{0<..length xs}.\n           \\<forall>W\\<in>R n.\n              take (length xs - n) xs \\<in> sentences P \\<and>\n              (drop (length xs - n) xs, W) \\<in> failures Q) \\<and>\n       (\\<exists>n\\<in>{..length xs}. \\<exists>W. W \\<in> R n)", "proof (rule_tac x = \"\\<lambda>n. Rx n \\<union> Ry n\" in exI, rule conjI, rule_tac [2] conjI,\n   rule_tac [3] conjI, rule_tac [2] ballI, (rule_tac [3] ballI)+)"], ["proof (state)\ngoal (4 subgoals):\n 1. X \\<union> Y =\n    (\\<Union>n\\<le>length xs. \\<Union>W\\<in>Rx n \\<union> Ry n. W)\n 2. \\<And>W.\n       W \\<in> Rx 0 \\<union> Ry 0 \\<Longrightarrow>\n       xs \\<notin> sentences P \\<and>\n       None \\<notin> set xs \\<and> (xs, W) \\<in> failures P \\<or>\n       xs \\<in> sentences P \\<and>\n       (\\<exists>U V.\n           (xs, U) \\<in> failures P \\<and>\n           ([], V) \\<in> failures Q \\<and> W = insert None U \\<inter> V)\n 3. \\<And>n W.\n       \\<lbrakk>n \\<in> {0<..length xs}; W \\<in> Rx n \\<union> Ry n\\<rbrakk>\n       \\<Longrightarrow> take (length xs - n) xs \\<in> sentences P \\<and>\n                         (drop (length xs - n) xs, W) \\<in> failures Q\n 4. \\<exists>n\\<in>{..length xs}. \\<exists>W. W \\<in> Rx n \\<union> Ry n", "have \"X \\<union> Y = (\\<Union>n \\<le> length xs. \\<Union>W \\<in> Rx n. W) \\<union>\n      (\\<Union>n \\<le> length xs. \\<Union>W \\<in> Ry n. W)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X \\<union> Y =\n    (\\<Union>n\\<le>length xs. \\<Union>W\\<in>Rx n. W) \\<union>\n    (\\<Union>n\\<le>length xs. \\<Union>W\\<in>Ry n. W)", "using A and B"], ["proof (prove)\nusing this:\n  X = (\\<Union>n\\<le>length xs. \\<Union>W\\<in>Rx n. W) \\<and>\n  (\\<forall>W\\<in>Rx 0.\n      xs \\<notin> sentences P \\<and>\n      None \\<notin> set xs \\<and> (xs, W) \\<in> failures P \\<or>\n      xs \\<in> sentences P \\<and>\n      (\\<exists>U V.\n          (xs, U) \\<in> failures P \\<and>\n          ([], V) \\<in> failures Q \\<and>\n          W = insert None U \\<inter> V)) \\<and>\n  (\\<forall>n\\<in>{0<..length xs}.\n      \\<forall>W\\<in>Rx n.\n         take (length xs - n) xs \\<in> sentences P \\<and>\n         (drop (length xs - n) xs, W) \\<in> failures Q) \\<and>\n  (\\<exists>n\\<in>{..length xs}. \\<exists>W. W \\<in> Rx n)\n  Y = (\\<Union>n\\<le>length xs. \\<Union>W\\<in>Ry n. W) \\<and>\n  (\\<forall>W\\<in>Ry 0.\n      xs \\<notin> sentences P \\<and>\n      None \\<notin> set xs \\<and> (xs, W) \\<in> failures P \\<or>\n      xs \\<in> sentences P \\<and>\n      (\\<exists>U V.\n          (xs, U) \\<in> failures P \\<and>\n          ([], V) \\<in> failures Q \\<and>\n          W = insert None U \\<inter> V)) \\<and>\n  (\\<forall>n\\<in>{0<..length xs}.\n      \\<forall>W\\<in>Ry n.\n         take (length xs - n) xs \\<in> sentences P \\<and>\n         (drop (length xs - n) xs, W) \\<in> failures Q) \\<and>\n  (\\<exists>n\\<in>{..length xs}. \\<exists>W. W \\<in> Ry n)\n\ngoal (1 subgoal):\n 1. X \\<union> Y =\n    (\\<Union>n\\<le>length xs. \\<Union>W\\<in>Rx n. W) \\<union>\n    (\\<Union>n\\<le>length xs. \\<Union>W\\<in>Ry n. W)", "by simp"], ["proof (state)\nthis:\n  X \\<union> Y =\n  (\\<Union>n\\<le>length xs. \\<Union>W\\<in>Rx n. W) \\<union>\n  (\\<Union>n\\<le>length xs. \\<Union>W\\<in>Ry n. W)\n\ngoal (4 subgoals):\n 1. X \\<union> Y =\n    (\\<Union>n\\<le>length xs. \\<Union>W\\<in>Rx n \\<union> Ry n. W)\n 2. \\<And>W.\n       W \\<in> Rx 0 \\<union> Ry 0 \\<Longrightarrow>\n       xs \\<notin> sentences P \\<and>\n       None \\<notin> set xs \\<and> (xs, W) \\<in> failures P \\<or>\n       xs \\<in> sentences P \\<and>\n       (\\<exists>U V.\n           (xs, U) \\<in> failures P \\<and>\n           ([], V) \\<in> failures Q \\<and> W = insert None U \\<inter> V)\n 3. \\<And>n W.\n       \\<lbrakk>n \\<in> {0<..length xs}; W \\<in> Rx n \\<union> Ry n\\<rbrakk>\n       \\<Longrightarrow> take (length xs - n) xs \\<in> sentences P \\<and>\n                         (drop (length xs - n) xs, W) \\<in> failures Q\n 4. \\<exists>n\\<in>{..length xs}. \\<exists>W. W \\<in> Rx n \\<union> Ry n", "also"], ["proof (state)\nthis:\n  X \\<union> Y =\n  (\\<Union>n\\<le>length xs. \\<Union>W\\<in>Rx n. W) \\<union>\n  (\\<Union>n\\<le>length xs. \\<Union>W\\<in>Ry n. W)\n\ngoal (4 subgoals):\n 1. X \\<union> Y =\n    (\\<Union>n\\<le>length xs. \\<Union>W\\<in>Rx n \\<union> Ry n. W)\n 2. \\<And>W.\n       W \\<in> Rx 0 \\<union> Ry 0 \\<Longrightarrow>\n       xs \\<notin> sentences P \\<and>\n       None \\<notin> set xs \\<and> (xs, W) \\<in> failures P \\<or>\n       xs \\<in> sentences P \\<and>\n       (\\<exists>U V.\n           (xs, U) \\<in> failures P \\<and>\n           ([], V) \\<in> failures Q \\<and> W = insert None U \\<inter> V)\n 3. \\<And>n W.\n       \\<lbrakk>n \\<in> {0<..length xs}; W \\<in> Rx n \\<union> Ry n\\<rbrakk>\n       \\<Longrightarrow> take (length xs - n) xs \\<in> sentences P \\<and>\n                         (drop (length xs - n) xs, W) \\<in> failures Q\n 4. \\<exists>n\\<in>{..length xs}. \\<exists>W. W \\<in> Rx n \\<union> Ry n", "have \"\\<dots> = (\\<Union>n \\<le> length xs. (\\<Union>W \\<in> Rx n. W) \\<union> (\\<Union>W \\<in> Ry n. W))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Union>n\\<le>length xs. \\<Union>W\\<in>Rx n. W) \\<union>\n    (\\<Union>n\\<le>length xs. \\<Union>W\\<in>Ry n. W) =\n    (\\<Union>n\\<le>length xs.\n        (\\<Union>W\\<in>Rx n. W) \\<union> (\\<Union>W\\<in>Ry n. W))", "by blast"], ["proof (state)\nthis:\n  (\\<Union>n\\<le>length xs. \\<Union>W\\<in>Rx n. W) \\<union>\n  (\\<Union>n\\<le>length xs. \\<Union>W\\<in>Ry n. W) =\n  (\\<Union>n\\<le>length xs.\n      (\\<Union>W\\<in>Rx n. W) \\<union> (\\<Union>W\\<in>Ry n. W))\n\ngoal (4 subgoals):\n 1. X \\<union> Y =\n    (\\<Union>n\\<le>length xs. \\<Union>W\\<in>Rx n \\<union> Ry n. W)\n 2. \\<And>W.\n       W \\<in> Rx 0 \\<union> Ry 0 \\<Longrightarrow>\n       xs \\<notin> sentences P \\<and>\n       None \\<notin> set xs \\<and> (xs, W) \\<in> failures P \\<or>\n       xs \\<in> sentences P \\<and>\n       (\\<exists>U V.\n           (xs, U) \\<in> failures P \\<and>\n           ([], V) \\<in> failures Q \\<and> W = insert None U \\<inter> V)\n 3. \\<And>n W.\n       \\<lbrakk>n \\<in> {0<..length xs}; W \\<in> Rx n \\<union> Ry n\\<rbrakk>\n       \\<Longrightarrow> take (length xs - n) xs \\<in> sentences P \\<and>\n                         (drop (length xs - n) xs, W) \\<in> failures Q\n 4. \\<exists>n\\<in>{..length xs}. \\<exists>W. W \\<in> Rx n \\<union> Ry n", "also"], ["proof (state)\nthis:\n  (\\<Union>n\\<le>length xs. \\<Union>W\\<in>Rx n. W) \\<union>\n  (\\<Union>n\\<le>length xs. \\<Union>W\\<in>Ry n. W) =\n  (\\<Union>n\\<le>length xs.\n      (\\<Union>W\\<in>Rx n. W) \\<union> (\\<Union>W\\<in>Ry n. W))\n\ngoal (4 subgoals):\n 1. X \\<union> Y =\n    (\\<Union>n\\<le>length xs. \\<Union>W\\<in>Rx n \\<union> Ry n. W)\n 2. \\<And>W.\n       W \\<in> Rx 0 \\<union> Ry 0 \\<Longrightarrow>\n       xs \\<notin> sentences P \\<and>\n       None \\<notin> set xs \\<and> (xs, W) \\<in> failures P \\<or>\n       xs \\<in> sentences P \\<and>\n       (\\<exists>U V.\n           (xs, U) \\<in> failures P \\<and>\n           ([], V) \\<in> failures Q \\<and> W = insert None U \\<inter> V)\n 3. \\<And>n W.\n       \\<lbrakk>n \\<in> {0<..length xs}; W \\<in> Rx n \\<union> Ry n\\<rbrakk>\n       \\<Longrightarrow> take (length xs - n) xs \\<in> sentences P \\<and>\n                         (drop (length xs - n) xs, W) \\<in> failures Q\n 4. \\<exists>n\\<in>{..length xs}. \\<exists>W. W \\<in> Rx n \\<union> Ry n", "have \"\\<dots> = (\\<Union>n \\<le> length xs. \\<Union>W \\<in> Rx n \\<union> Ry n. W)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Union>n\\<le>length xs.\n        (\\<Union>W\\<in>Rx n. W) \\<union> (\\<Union>W\\<in>Ry n. W)) =\n    (\\<Union>n\\<le>length xs. \\<Union>W\\<in>Rx n \\<union> Ry n. W)", "by simp"], ["proof (state)\nthis:\n  (\\<Union>n\\<le>length xs.\n      (\\<Union>W\\<in>Rx n. W) \\<union> (\\<Union>W\\<in>Ry n. W)) =\n  (\\<Union>n\\<le>length xs. \\<Union>W\\<in>Rx n \\<union> Ry n. W)\n\ngoal (4 subgoals):\n 1. X \\<union> Y =\n    (\\<Union>n\\<le>length xs. \\<Union>W\\<in>Rx n \\<union> Ry n. W)\n 2. \\<And>W.\n       W \\<in> Rx 0 \\<union> Ry 0 \\<Longrightarrow>\n       xs \\<notin> sentences P \\<and>\n       None \\<notin> set xs \\<and> (xs, W) \\<in> failures P \\<or>\n       xs \\<in> sentences P \\<and>\n       (\\<exists>U V.\n           (xs, U) \\<in> failures P \\<and>\n           ([], V) \\<in> failures Q \\<and> W = insert None U \\<inter> V)\n 3. \\<And>n W.\n       \\<lbrakk>n \\<in> {0<..length xs}; W \\<in> Rx n \\<union> Ry n\\<rbrakk>\n       \\<Longrightarrow> take (length xs - n) xs \\<in> sentences P \\<and>\n                         (drop (length xs - n) xs, W) \\<in> failures Q\n 4. \\<exists>n\\<in>{..length xs}. \\<exists>W. W \\<in> Rx n \\<union> Ry n", "finally"], ["proof (chain)\npicking this:\n  X \\<union> Y =\n  (\\<Union>n\\<le>length xs. \\<Union>W\\<in>Rx n \\<union> Ry n. W)", "show \"X \\<union> Y = (\\<Union>n \\<le> length xs. \\<Union>W \\<in> Rx n \\<union> Ry n. W)\""], ["proof (prove)\nusing this:\n  X \\<union> Y =\n  (\\<Union>n\\<le>length xs. \\<Union>W\\<in>Rx n \\<union> Ry n. W)\n\ngoal (1 subgoal):\n 1. X \\<union> Y =\n    (\\<Union>n\\<le>length xs. \\<Union>W\\<in>Rx n \\<union> Ry n. W)", "."], ["proof (state)\nthis:\n  X \\<union> Y =\n  (\\<Union>n\\<le>length xs. \\<Union>W\\<in>Rx n \\<union> Ry n. W)\n\ngoal (3 subgoals):\n 1. \\<And>W.\n       W \\<in> Rx 0 \\<union> Ry 0 \\<Longrightarrow>\n       xs \\<notin> sentences P \\<and>\n       None \\<notin> set xs \\<and> (xs, W) \\<in> failures P \\<or>\n       xs \\<in> sentences P \\<and>\n       (\\<exists>U V.\n           (xs, U) \\<in> failures P \\<and>\n           ([], V) \\<in> failures Q \\<and> W = insert None U \\<inter> V)\n 2. \\<And>n W.\n       \\<lbrakk>n \\<in> {0<..length xs}; W \\<in> Rx n \\<union> Ry n\\<rbrakk>\n       \\<Longrightarrow> take (length xs - n) xs \\<in> sentences P \\<and>\n                         (drop (length xs - n) xs, W) \\<in> failures Q\n 3. \\<exists>n\\<in>{..length xs}. \\<exists>W. W \\<in> Rx n \\<union> Ry n", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>W.\n       W \\<in> Rx 0 \\<union> Ry 0 \\<Longrightarrow>\n       xs \\<notin> sentences P \\<and>\n       None \\<notin> set xs \\<and> (xs, W) \\<in> failures P \\<or>\n       xs \\<in> sentences P \\<and>\n       (\\<exists>U V.\n           (xs, U) \\<in> failures P \\<and>\n           ([], V) \\<in> failures Q \\<and> W = insert None U \\<inter> V)\n 2. \\<And>n W.\n       \\<lbrakk>n \\<in> {0<..length xs}; W \\<in> Rx n \\<union> Ry n\\<rbrakk>\n       \\<Longrightarrow> take (length xs - n) xs \\<in> sentences P \\<and>\n                         (drop (length xs - n) xs, W) \\<in> failures Q\n 3. \\<exists>n\\<in>{..length xs}. \\<exists>W. W \\<in> Rx n \\<union> Ry n", "fix W"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>W.\n       W \\<in> Rx 0 \\<union> Ry 0 \\<Longrightarrow>\n       xs \\<notin> sentences P \\<and>\n       None \\<notin> set xs \\<and> (xs, W) \\<in> failures P \\<or>\n       xs \\<in> sentences P \\<and>\n       (\\<exists>U V.\n           (xs, U) \\<in> failures P \\<and>\n           ([], V) \\<in> failures Q \\<and> W = insert None U \\<inter> V)\n 2. \\<And>n W.\n       \\<lbrakk>n \\<in> {0<..length xs}; W \\<in> Rx n \\<union> Ry n\\<rbrakk>\n       \\<Longrightarrow> take (length xs - n) xs \\<in> sentences P \\<and>\n                         (drop (length xs - n) xs, W) \\<in> failures Q\n 3. \\<exists>n\\<in>{..length xs}. \\<exists>W. W \\<in> Rx n \\<union> Ry n", "assume \"W \\<in> Rx 0 \\<union> Ry 0\""], ["proof (state)\nthis:\n  W \\<in> Rx 0 \\<union> Ry 0\n\ngoal (3 subgoals):\n 1. \\<And>W.\n       W \\<in> Rx 0 \\<union> Ry 0 \\<Longrightarrow>\n       xs \\<notin> sentences P \\<and>\n       None \\<notin> set xs \\<and> (xs, W) \\<in> failures P \\<or>\n       xs \\<in> sentences P \\<and>\n       (\\<exists>U V.\n           (xs, U) \\<in> failures P \\<and>\n           ([], V) \\<in> failures Q \\<and> W = insert None U \\<inter> V)\n 2. \\<And>n W.\n       \\<lbrakk>n \\<in> {0<..length xs}; W \\<in> Rx n \\<union> Ry n\\<rbrakk>\n       \\<Longrightarrow> take (length xs - n) xs \\<in> sentences P \\<and>\n                         (drop (length xs - n) xs, W) \\<in> failures Q\n 3. \\<exists>n\\<in>{..length xs}. \\<exists>W. W \\<in> Rx n \\<union> Ry n", "thus\n     \"xs \\<notin> sentences P \\<and> None \\<notin> set xs \\<and> (xs, W) \\<in> failures P \\<or>\n      xs \\<in> sentences P \\<and> (\\<exists>U V. (xs, U) \\<in> failures P \\<and> ([], V) \\<in> failures Q \\<and>\n        W = insert None U \\<inter> V)\"\n      (is \"?T' W\")"], ["proof (prove)\nusing this:\n  W \\<in> Rx 0 \\<union> Ry 0\n\ngoal (1 subgoal):\n 1. xs \\<notin> sentences P \\<and>\n    None \\<notin> set xs \\<and> (xs, W) \\<in> failures P \\<or>\n    xs \\<in> sentences P \\<and>\n    (\\<exists>U V.\n        (xs, U) \\<in> failures P \\<and>\n        ([], V) \\<in> failures Q \\<and> W = insert None U \\<inter> V)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. W \\<in> Rx 0 \\<Longrightarrow>\n    xs \\<notin> sentences P \\<and>\n    None \\<notin> set xs \\<and> (xs, W) \\<in> failures P \\<or>\n    xs \\<in> sentences P \\<and>\n    (\\<exists>U V.\n        (xs, U) \\<in> failures P \\<and>\n        ([], V) \\<in> failures Q \\<and> W = insert None U \\<inter> V)\n 2. W \\<in> Ry 0 \\<Longrightarrow>\n    xs \\<notin> sentences P \\<and>\n    None \\<notin> set xs \\<and> (xs, W) \\<in> failures P \\<or>\n    xs \\<in> sentences P \\<and>\n    (\\<exists>U V.\n        (xs, U) \\<in> failures P \\<and>\n        ([], V) \\<in> failures Q \\<and> W = insert None U \\<inter> V)", "have \"\\<forall>W \\<in> Rx 0. ?T' W\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>W\\<in>Rx 0.\n       xs \\<notin> sentences P \\<and>\n       None \\<notin> set xs \\<and> (xs, W) \\<in> failures P \\<or>\n       xs \\<in> sentences P \\<and>\n       (\\<exists>U V.\n           (xs, U) \\<in> failures P \\<and>\n           ([], V) \\<in> failures Q \\<and> W = insert None U \\<inter> V)", "using A"], ["proof (prove)\nusing this:\n  X = (\\<Union>n\\<le>length xs. \\<Union>W\\<in>Rx n. W) \\<and>\n  (\\<forall>W\\<in>Rx 0.\n      xs \\<notin> sentences P \\<and>\n      None \\<notin> set xs \\<and> (xs, W) \\<in> failures P \\<or>\n      xs \\<in> sentences P \\<and>\n      (\\<exists>U V.\n          (xs, U) \\<in> failures P \\<and>\n          ([], V) \\<in> failures Q \\<and>\n          W = insert None U \\<inter> V)) \\<and>\n  (\\<forall>n\\<in>{0<..length xs}.\n      \\<forall>W\\<in>Rx n.\n         take (length xs - n) xs \\<in> sentences P \\<and>\n         (drop (length xs - n) xs, W) \\<in> failures Q) \\<and>\n  (\\<exists>n\\<in>{..length xs}. \\<exists>W. W \\<in> Rx n)\n\ngoal (1 subgoal):\n 1. \\<forall>W\\<in>Rx 0.\n       xs \\<notin> sentences P \\<and>\n       None \\<notin> set xs \\<and> (xs, W) \\<in> failures P \\<or>\n       xs \\<in> sentences P \\<and>\n       (\\<exists>U V.\n           (xs, U) \\<in> failures P \\<and>\n           ([], V) \\<in> failures Q \\<and> W = insert None U \\<inter> V)", "by simp"], ["proof (state)\nthis:\n  \\<forall>W\\<in>Rx 0.\n     xs \\<notin> sentences P \\<and>\n     None \\<notin> set xs \\<and> (xs, W) \\<in> failures P \\<or>\n     xs \\<in> sentences P \\<and>\n     (\\<exists>U V.\n         (xs, U) \\<in> failures P \\<and>\n         ([], V) \\<in> failures Q \\<and> W = insert None U \\<inter> V)\n\ngoal (2 subgoals):\n 1. W \\<in> Rx 0 \\<Longrightarrow>\n    xs \\<notin> sentences P \\<and>\n    None \\<notin> set xs \\<and> (xs, W) \\<in> failures P \\<or>\n    xs \\<in> sentences P \\<and>\n    (\\<exists>U V.\n        (xs, U) \\<in> failures P \\<and>\n        ([], V) \\<in> failures Q \\<and> W = insert None U \\<inter> V)\n 2. W \\<in> Ry 0 \\<Longrightarrow>\n    xs \\<notin> sentences P \\<and>\n    None \\<notin> set xs \\<and> (xs, W) \\<in> failures P \\<or>\n    xs \\<in> sentences P \\<and>\n    (\\<exists>U V.\n        (xs, U) \\<in> failures P \\<and>\n        ([], V) \\<in> failures Q \\<and> W = insert None U \\<inter> V)", "moreover"], ["proof (state)\nthis:\n  \\<forall>W\\<in>Rx 0.\n     xs \\<notin> sentences P \\<and>\n     None \\<notin> set xs \\<and> (xs, W) \\<in> failures P \\<or>\n     xs \\<in> sentences P \\<and>\n     (\\<exists>U V.\n         (xs, U) \\<in> failures P \\<and>\n         ([], V) \\<in> failures Q \\<and> W = insert None U \\<inter> V)\n\ngoal (2 subgoals):\n 1. W \\<in> Rx 0 \\<Longrightarrow>\n    xs \\<notin> sentences P \\<and>\n    None \\<notin> set xs \\<and> (xs, W) \\<in> failures P \\<or>\n    xs \\<in> sentences P \\<and>\n    (\\<exists>U V.\n        (xs, U) \\<in> failures P \\<and>\n        ([], V) \\<in> failures Q \\<and> W = insert None U \\<inter> V)\n 2. W \\<in> Ry 0 \\<Longrightarrow>\n    xs \\<notin> sentences P \\<and>\n    None \\<notin> set xs \\<and> (xs, W) \\<in> failures P \\<or>\n    xs \\<in> sentences P \\<and>\n    (\\<exists>U V.\n        (xs, U) \\<in> failures P \\<and>\n        ([], V) \\<in> failures Q \\<and> W = insert None U \\<inter> V)", "assume \"W \\<in> Rx 0\""], ["proof (state)\nthis:\n  W \\<in> Rx 0\n\ngoal (2 subgoals):\n 1. W \\<in> Rx 0 \\<Longrightarrow>\n    xs \\<notin> sentences P \\<and>\n    None \\<notin> set xs \\<and> (xs, W) \\<in> failures P \\<or>\n    xs \\<in> sentences P \\<and>\n    (\\<exists>U V.\n        (xs, U) \\<in> failures P \\<and>\n        ([], V) \\<in> failures Q \\<and> W = insert None U \\<inter> V)\n 2. W \\<in> Ry 0 \\<Longrightarrow>\n    xs \\<notin> sentences P \\<and>\n    None \\<notin> set xs \\<and> (xs, W) \\<in> failures P \\<or>\n    xs \\<in> sentences P \\<and>\n    (\\<exists>U V.\n        (xs, U) \\<in> failures P \\<and>\n        ([], V) \\<in> failures Q \\<and> W = insert None U \\<inter> V)", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>W\\<in>Rx 0.\n     xs \\<notin> sentences P \\<and>\n     None \\<notin> set xs \\<and> (xs, W) \\<in> failures P \\<or>\n     xs \\<in> sentences P \\<and>\n     (\\<exists>U V.\n         (xs, U) \\<in> failures P \\<and>\n         ([], V) \\<in> failures Q \\<and> W = insert None U \\<inter> V)\n  W \\<in> Rx 0", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>W\\<in>Rx 0.\n     xs \\<notin> sentences P \\<and>\n     None \\<notin> set xs \\<and> (xs, W) \\<in> failures P \\<or>\n     xs \\<in> sentences P \\<and>\n     (\\<exists>U V.\n         (xs, U) \\<in> failures P \\<and>\n         ([], V) \\<in> failures Q \\<and> W = insert None U \\<inter> V)\n  W \\<in> Rx 0\n\ngoal (1 subgoal):\n 1. xs \\<notin> sentences P \\<and>\n    None \\<notin> set xs \\<and> (xs, W) \\<in> failures P \\<or>\n    xs \\<in> sentences P \\<and>\n    (\\<exists>U V.\n        (xs, U) \\<in> failures P \\<and>\n        ([], V) \\<in> failures Q \\<and> W = insert None U \\<inter> V)", ".."], ["proof (state)\nthis:\n  xs \\<notin> sentences P \\<and>\n  None \\<notin> set xs \\<and> (xs, W) \\<in> failures P \\<or>\n  xs \\<in> sentences P \\<and>\n  (\\<exists>U V.\n      (xs, U) \\<in> failures P \\<and>\n      ([], V) \\<in> failures Q \\<and> W = insert None U \\<inter> V)\n\ngoal (1 subgoal):\n 1. W \\<in> Ry 0 \\<Longrightarrow>\n    xs \\<notin> sentences P \\<and>\n    None \\<notin> set xs \\<and> (xs, W) \\<in> failures P \\<or>\n    xs \\<in> sentences P \\<and>\n    (\\<exists>U V.\n        (xs, U) \\<in> failures P \\<and>\n        ([], V) \\<in> failures Q \\<and> W = insert None U \\<inter> V)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. W \\<in> Ry 0 \\<Longrightarrow>\n    xs \\<notin> sentences P \\<and>\n    None \\<notin> set xs \\<and> (xs, W) \\<in> failures P \\<or>\n    xs \\<in> sentences P \\<and>\n    (\\<exists>U V.\n        (xs, U) \\<in> failures P \\<and>\n        ([], V) \\<in> failures Q \\<and> W = insert None U \\<inter> V)", "have \"\\<forall>W \\<in> Ry 0. ?T' W\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>W\\<in>Ry 0.\n       xs \\<notin> sentences P \\<and>\n       None \\<notin> set xs \\<and> (xs, W) \\<in> failures P \\<or>\n       xs \\<in> sentences P \\<and>\n       (\\<exists>U V.\n           (xs, U) \\<in> failures P \\<and>\n           ([], V) \\<in> failures Q \\<and> W = insert None U \\<inter> V)", "using B"], ["proof (prove)\nusing this:\n  Y = (\\<Union>n\\<le>length xs. \\<Union>W\\<in>Ry n. W) \\<and>\n  (\\<forall>W\\<in>Ry 0.\n      xs \\<notin> sentences P \\<and>\n      None \\<notin> set xs \\<and> (xs, W) \\<in> failures P \\<or>\n      xs \\<in> sentences P \\<and>\n      (\\<exists>U V.\n          (xs, U) \\<in> failures P \\<and>\n          ([], V) \\<in> failures Q \\<and>\n          W = insert None U \\<inter> V)) \\<and>\n  (\\<forall>n\\<in>{0<..length xs}.\n      \\<forall>W\\<in>Ry n.\n         take (length xs - n) xs \\<in> sentences P \\<and>\n         (drop (length xs - n) xs, W) \\<in> failures Q) \\<and>\n  (\\<exists>n\\<in>{..length xs}. \\<exists>W. W \\<in> Ry n)\n\ngoal (1 subgoal):\n 1. \\<forall>W\\<in>Ry 0.\n       xs \\<notin> sentences P \\<and>\n       None \\<notin> set xs \\<and> (xs, W) \\<in> failures P \\<or>\n       xs \\<in> sentences P \\<and>\n       (\\<exists>U V.\n           (xs, U) \\<in> failures P \\<and>\n           ([], V) \\<in> failures Q \\<and> W = insert None U \\<inter> V)", "by simp"], ["proof (state)\nthis:\n  \\<forall>W\\<in>Ry 0.\n     xs \\<notin> sentences P \\<and>\n     None \\<notin> set xs \\<and> (xs, W) \\<in> failures P \\<or>\n     xs \\<in> sentences P \\<and>\n     (\\<exists>U V.\n         (xs, U) \\<in> failures P \\<and>\n         ([], V) \\<in> failures Q \\<and> W = insert None U \\<inter> V)\n\ngoal (1 subgoal):\n 1. W \\<in> Ry 0 \\<Longrightarrow>\n    xs \\<notin> sentences P \\<and>\n    None \\<notin> set xs \\<and> (xs, W) \\<in> failures P \\<or>\n    xs \\<in> sentences P \\<and>\n    (\\<exists>U V.\n        (xs, U) \\<in> failures P \\<and>\n        ([], V) \\<in> failures Q \\<and> W = insert None U \\<inter> V)", "moreover"], ["proof (state)\nthis:\n  \\<forall>W\\<in>Ry 0.\n     xs \\<notin> sentences P \\<and>\n     None \\<notin> set xs \\<and> (xs, W) \\<in> failures P \\<or>\n     xs \\<in> sentences P \\<and>\n     (\\<exists>U V.\n         (xs, U) \\<in> failures P \\<and>\n         ([], V) \\<in> failures Q \\<and> W = insert None U \\<inter> V)\n\ngoal (1 subgoal):\n 1. W \\<in> Ry 0 \\<Longrightarrow>\n    xs \\<notin> sentences P \\<and>\n    None \\<notin> set xs \\<and> (xs, W) \\<in> failures P \\<or>\n    xs \\<in> sentences P \\<and>\n    (\\<exists>U V.\n        (xs, U) \\<in> failures P \\<and>\n        ([], V) \\<in> failures Q \\<and> W = insert None U \\<inter> V)", "assume \"W \\<in> Ry 0\""], ["proof (state)\nthis:\n  W \\<in> Ry 0\n\ngoal (1 subgoal):\n 1. W \\<in> Ry 0 \\<Longrightarrow>\n    xs \\<notin> sentences P \\<and>\n    None \\<notin> set xs \\<and> (xs, W) \\<in> failures P \\<or>\n    xs \\<in> sentences P \\<and>\n    (\\<exists>U V.\n        (xs, U) \\<in> failures P \\<and>\n        ([], V) \\<in> failures Q \\<and> W = insert None U \\<inter> V)", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>W\\<in>Ry 0.\n     xs \\<notin> sentences P \\<and>\n     None \\<notin> set xs \\<and> (xs, W) \\<in> failures P \\<or>\n     xs \\<in> sentences P \\<and>\n     (\\<exists>U V.\n         (xs, U) \\<in> failures P \\<and>\n         ([], V) \\<in> failures Q \\<and> W = insert None U \\<inter> V)\n  W \\<in> Ry 0", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>W\\<in>Ry 0.\n     xs \\<notin> sentences P \\<and>\n     None \\<notin> set xs \\<and> (xs, W) \\<in> failures P \\<or>\n     xs \\<in> sentences P \\<and>\n     (\\<exists>U V.\n         (xs, U) \\<in> failures P \\<and>\n         ([], V) \\<in> failures Q \\<and> W = insert None U \\<inter> V)\n  W \\<in> Ry 0\n\ngoal (1 subgoal):\n 1. xs \\<notin> sentences P \\<and>\n    None \\<notin> set xs \\<and> (xs, W) \\<in> failures P \\<or>\n    xs \\<in> sentences P \\<and>\n    (\\<exists>U V.\n        (xs, U) \\<in> failures P \\<and>\n        ([], V) \\<in> failures Q \\<and> W = insert None U \\<inter> V)", ".."], ["proof (state)\nthis:\n  xs \\<notin> sentences P \\<and>\n  None \\<notin> set xs \\<and> (xs, W) \\<in> failures P \\<or>\n  xs \\<in> sentences P \\<and>\n  (\\<exists>U V.\n      (xs, U) \\<in> failures P \\<and>\n      ([], V) \\<in> failures Q \\<and> W = insert None U \\<inter> V)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  xs \\<notin> sentences P \\<and>\n  None \\<notin> set xs \\<and> (xs, W) \\<in> failures P \\<or>\n  xs \\<in> sentences P \\<and>\n  (\\<exists>U V.\n      (xs, U) \\<in> failures P \\<and>\n      ([], V) \\<in> failures Q \\<and> W = insert None U \\<inter> V)\n\ngoal (2 subgoals):\n 1. \\<And>n W.\n       \\<lbrakk>n \\<in> {0<..length xs}; W \\<in> Rx n \\<union> Ry n\\<rbrakk>\n       \\<Longrightarrow> take (length xs - n) xs \\<in> sentences P \\<and>\n                         (drop (length xs - n) xs, W) \\<in> failures Q\n 2. \\<exists>n\\<in>{..length xs}. \\<exists>W. W \\<in> Rx n \\<union> Ry n", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>n W.\n       \\<lbrakk>n \\<in> {0<..length xs}; W \\<in> Rx n \\<union> Ry n\\<rbrakk>\n       \\<Longrightarrow> take (length xs - n) xs \\<in> sentences P \\<and>\n                         (drop (length xs - n) xs, W) \\<in> failures Q\n 2. \\<exists>n\\<in>{..length xs}. \\<exists>W. W \\<in> Rx n \\<union> Ry n", "fix n W"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>n W.\n       \\<lbrakk>n \\<in> {0<..length xs}; W \\<in> Rx n \\<union> Ry n\\<rbrakk>\n       \\<Longrightarrow> take (length xs - n) xs \\<in> sentences P \\<and>\n                         (drop (length xs - n) xs, W) \\<in> failures Q\n 2. \\<exists>n\\<in>{..length xs}. \\<exists>W. W \\<in> Rx n \\<union> Ry n", "assume C: \"n \\<in> {0<..length xs}\""], ["proof (state)\nthis:\n  n \\<in> {0<..length xs}\n\ngoal (2 subgoals):\n 1. \\<And>n W.\n       \\<lbrakk>n \\<in> {0<..length xs}; W \\<in> Rx n \\<union> Ry n\\<rbrakk>\n       \\<Longrightarrow> take (length xs - n) xs \\<in> sentences P \\<and>\n                         (drop (length xs - n) xs, W) \\<in> failures Q\n 2. \\<exists>n\\<in>{..length xs}. \\<exists>W. W \\<in> Rx n \\<union> Ry n", "assume \"W \\<in> Rx n \\<union> Ry n\""], ["proof (state)\nthis:\n  W \\<in> Rx n \\<union> Ry n\n\ngoal (2 subgoals):\n 1. \\<And>n W.\n       \\<lbrakk>n \\<in> {0<..length xs}; W \\<in> Rx n \\<union> Ry n\\<rbrakk>\n       \\<Longrightarrow> take (length xs - n) xs \\<in> sentences P \\<and>\n                         (drop (length xs - n) xs, W) \\<in> failures Q\n 2. \\<exists>n\\<in>{..length xs}. \\<exists>W. W \\<in> Rx n \\<union> Ry n", "thus\n     \"take (length xs - n) xs \\<in> sentences P \\<and>\n      (drop (length xs - n) xs, W) \\<in> failures Q\"\n      (is \"?T' n W\")"], ["proof (prove)\nusing this:\n  W \\<in> Rx n \\<union> Ry n\n\ngoal (1 subgoal):\n 1. take (length xs - n) xs \\<in> sentences P \\<and>\n    (drop (length xs - n) xs, W) \\<in> failures Q", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. W \\<in> Rx n \\<Longrightarrow>\n    take (length xs - n) xs \\<in> sentences P \\<and>\n    (drop (length xs - n) xs, W) \\<in> failures Q\n 2. W \\<in> Ry n \\<Longrightarrow>\n    take (length xs - n) xs \\<in> sentences P \\<and>\n    (drop (length xs - n) xs, W) \\<in> failures Q", "have \"\\<forall>n \\<in> {0<..length xs}. \\<forall>W \\<in> Rx n. ?T' n W\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n\\<in>{0<..length xs}.\n       \\<forall>W\\<in>Rx n.\n          take (length xs - n) xs \\<in> sentences P \\<and>\n          (drop (length xs - n) xs, W) \\<in> failures Q", "using A"], ["proof (prove)\nusing this:\n  X = (\\<Union>n\\<le>length xs. \\<Union>W\\<in>Rx n. W) \\<and>\n  (\\<forall>W\\<in>Rx 0.\n      xs \\<notin> sentences P \\<and>\n      None \\<notin> set xs \\<and> (xs, W) \\<in> failures P \\<or>\n      xs \\<in> sentences P \\<and>\n      (\\<exists>U V.\n          (xs, U) \\<in> failures P \\<and>\n          ([], V) \\<in> failures Q \\<and>\n          W = insert None U \\<inter> V)) \\<and>\n  (\\<forall>n\\<in>{0<..length xs}.\n      \\<forall>W\\<in>Rx n.\n         take (length xs - n) xs \\<in> sentences P \\<and>\n         (drop (length xs - n) xs, W) \\<in> failures Q) \\<and>\n  (\\<exists>n\\<in>{..length xs}. \\<exists>W. W \\<in> Rx n)\n\ngoal (1 subgoal):\n 1. \\<forall>n\\<in>{0<..length xs}.\n       \\<forall>W\\<in>Rx n.\n          take (length xs - n) xs \\<in> sentences P \\<and>\n          (drop (length xs - n) xs, W) \\<in> failures Q", "by simp"], ["proof (state)\nthis:\n  \\<forall>n\\<in>{0<..length xs}.\n     \\<forall>W\\<in>Rx n.\n        take (length xs - n) xs \\<in> sentences P \\<and>\n        (drop (length xs - n) xs, W) \\<in> failures Q\n\ngoal (2 subgoals):\n 1. W \\<in> Rx n \\<Longrightarrow>\n    take (length xs - n) xs \\<in> sentences P \\<and>\n    (drop (length xs - n) xs, W) \\<in> failures Q\n 2. W \\<in> Ry n \\<Longrightarrow>\n    take (length xs - n) xs \\<in> sentences P \\<and>\n    (drop (length xs - n) xs, W) \\<in> failures Q", "hence \"\\<forall>W \\<in> Rx n. ?T' n W\""], ["proof (prove)\nusing this:\n  \\<forall>n\\<in>{0<..length xs}.\n     \\<forall>W\\<in>Rx n.\n        take (length xs - n) xs \\<in> sentences P \\<and>\n        (drop (length xs - n) xs, W) \\<in> failures Q\n\ngoal (1 subgoal):\n 1. \\<forall>W\\<in>Rx n.\n       take (length xs - n) xs \\<in> sentences P \\<and>\n       (drop (length xs - n) xs, W) \\<in> failures Q", "using C"], ["proof (prove)\nusing this:\n  \\<forall>n\\<in>{0<..length xs}.\n     \\<forall>W\\<in>Rx n.\n        take (length xs - n) xs \\<in> sentences P \\<and>\n        (drop (length xs - n) xs, W) \\<in> failures Q\n  n \\<in> {0<..length xs}\n\ngoal (1 subgoal):\n 1. \\<forall>W\\<in>Rx n.\n       take (length xs - n) xs \\<in> sentences P \\<and>\n       (drop (length xs - n) xs, W) \\<in> failures Q", ".."], ["proof (state)\nthis:\n  \\<forall>W\\<in>Rx n.\n     take (length xs - n) xs \\<in> sentences P \\<and>\n     (drop (length xs - n) xs, W) \\<in> failures Q\n\ngoal (2 subgoals):\n 1. W \\<in> Rx n \\<Longrightarrow>\n    take (length xs - n) xs \\<in> sentences P \\<and>\n    (drop (length xs - n) xs, W) \\<in> failures Q\n 2. W \\<in> Ry n \\<Longrightarrow>\n    take (length xs - n) xs \\<in> sentences P \\<and>\n    (drop (length xs - n) xs, W) \\<in> failures Q", "moreover"], ["proof (state)\nthis:\n  \\<forall>W\\<in>Rx n.\n     take (length xs - n) xs \\<in> sentences P \\<and>\n     (drop (length xs - n) xs, W) \\<in> failures Q\n\ngoal (2 subgoals):\n 1. W \\<in> Rx n \\<Longrightarrow>\n    take (length xs - n) xs \\<in> sentences P \\<and>\n    (drop (length xs - n) xs, W) \\<in> failures Q\n 2. W \\<in> Ry n \\<Longrightarrow>\n    take (length xs - n) xs \\<in> sentences P \\<and>\n    (drop (length xs - n) xs, W) \\<in> failures Q", "assume \"W \\<in> Rx n\""], ["proof (state)\nthis:\n  W \\<in> Rx n\n\ngoal (2 subgoals):\n 1. W \\<in> Rx n \\<Longrightarrow>\n    take (length xs - n) xs \\<in> sentences P \\<and>\n    (drop (length xs - n) xs, W) \\<in> failures Q\n 2. W \\<in> Ry n \\<Longrightarrow>\n    take (length xs - n) xs \\<in> sentences P \\<and>\n    (drop (length xs - n) xs, W) \\<in> failures Q", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>W\\<in>Rx n.\n     take (length xs - n) xs \\<in> sentences P \\<and>\n     (drop (length xs - n) xs, W) \\<in> failures Q\n  W \\<in> Rx n", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>W\\<in>Rx n.\n     take (length xs - n) xs \\<in> sentences P \\<and>\n     (drop (length xs - n) xs, W) \\<in> failures Q\n  W \\<in> Rx n\n\ngoal (1 subgoal):\n 1. take (length xs - n) xs \\<in> sentences P \\<and>\n    (drop (length xs - n) xs, W) \\<in> failures Q", ".."], ["proof (state)\nthis:\n  take (length xs - n) xs \\<in> sentences P \\<and>\n  (drop (length xs - n) xs, W) \\<in> failures Q\n\ngoal (1 subgoal):\n 1. W \\<in> Ry n \\<Longrightarrow>\n    take (length xs - n) xs \\<in> sentences P \\<and>\n    (drop (length xs - n) xs, W) \\<in> failures Q", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. W \\<in> Ry n \\<Longrightarrow>\n    take (length xs - n) xs \\<in> sentences P \\<and>\n    (drop (length xs - n) xs, W) \\<in> failures Q", "have \"\\<forall>n \\<in> {0<..length xs}. \\<forall>W \\<in> Ry n. ?T' n W\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n\\<in>{0<..length xs}.\n       \\<forall>W\\<in>Ry n.\n          take (length xs - n) xs \\<in> sentences P \\<and>\n          (drop (length xs - n) xs, W) \\<in> failures Q", "using B"], ["proof (prove)\nusing this:\n  Y = (\\<Union>n\\<le>length xs. \\<Union>W\\<in>Ry n. W) \\<and>\n  (\\<forall>W\\<in>Ry 0.\n      xs \\<notin> sentences P \\<and>\n      None \\<notin> set xs \\<and> (xs, W) \\<in> failures P \\<or>\n      xs \\<in> sentences P \\<and>\n      (\\<exists>U V.\n          (xs, U) \\<in> failures P \\<and>\n          ([], V) \\<in> failures Q \\<and>\n          W = insert None U \\<inter> V)) \\<and>\n  (\\<forall>n\\<in>{0<..length xs}.\n      \\<forall>W\\<in>Ry n.\n         take (length xs - n) xs \\<in> sentences P \\<and>\n         (drop (length xs - n) xs, W) \\<in> failures Q) \\<and>\n  (\\<exists>n\\<in>{..length xs}. \\<exists>W. W \\<in> Ry n)\n\ngoal (1 subgoal):\n 1. \\<forall>n\\<in>{0<..length xs}.\n       \\<forall>W\\<in>Ry n.\n          take (length xs - n) xs \\<in> sentences P \\<and>\n          (drop (length xs - n) xs, W) \\<in> failures Q", "by simp"], ["proof (state)\nthis:\n  \\<forall>n\\<in>{0<..length xs}.\n     \\<forall>W\\<in>Ry n.\n        take (length xs - n) xs \\<in> sentences P \\<and>\n        (drop (length xs - n) xs, W) \\<in> failures Q\n\ngoal (1 subgoal):\n 1. W \\<in> Ry n \\<Longrightarrow>\n    take (length xs - n) xs \\<in> sentences P \\<and>\n    (drop (length xs - n) xs, W) \\<in> failures Q", "hence \"\\<forall>W \\<in> Ry n. ?T' n W\""], ["proof (prove)\nusing this:\n  \\<forall>n\\<in>{0<..length xs}.\n     \\<forall>W\\<in>Ry n.\n        take (length xs - n) xs \\<in> sentences P \\<and>\n        (drop (length xs - n) xs, W) \\<in> failures Q\n\ngoal (1 subgoal):\n 1. \\<forall>W\\<in>Ry n.\n       take (length xs - n) xs \\<in> sentences P \\<and>\n       (drop (length xs - n) xs, W) \\<in> failures Q", "using C"], ["proof (prove)\nusing this:\n  \\<forall>n\\<in>{0<..length xs}.\n     \\<forall>W\\<in>Ry n.\n        take (length xs - n) xs \\<in> sentences P \\<and>\n        (drop (length xs - n) xs, W) \\<in> failures Q\n  n \\<in> {0<..length xs}\n\ngoal (1 subgoal):\n 1. \\<forall>W\\<in>Ry n.\n       take (length xs - n) xs \\<in> sentences P \\<and>\n       (drop (length xs - n) xs, W) \\<in> failures Q", ".."], ["proof (state)\nthis:\n  \\<forall>W\\<in>Ry n.\n     take (length xs - n) xs \\<in> sentences P \\<and>\n     (drop (length xs - n) xs, W) \\<in> failures Q\n\ngoal (1 subgoal):\n 1. W \\<in> Ry n \\<Longrightarrow>\n    take (length xs - n) xs \\<in> sentences P \\<and>\n    (drop (length xs - n) xs, W) \\<in> failures Q", "moreover"], ["proof (state)\nthis:\n  \\<forall>W\\<in>Ry n.\n     take (length xs - n) xs \\<in> sentences P \\<and>\n     (drop (length xs - n) xs, W) \\<in> failures Q\n\ngoal (1 subgoal):\n 1. W \\<in> Ry n \\<Longrightarrow>\n    take (length xs - n) xs \\<in> sentences P \\<and>\n    (drop (length xs - n) xs, W) \\<in> failures Q", "assume \"W \\<in> Ry n\""], ["proof (state)\nthis:\n  W \\<in> Ry n\n\ngoal (1 subgoal):\n 1. W \\<in> Ry n \\<Longrightarrow>\n    take (length xs - n) xs \\<in> sentences P \\<and>\n    (drop (length xs - n) xs, W) \\<in> failures Q", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>W\\<in>Ry n.\n     take (length xs - n) xs \\<in> sentences P \\<and>\n     (drop (length xs - n) xs, W) \\<in> failures Q\n  W \\<in> Ry n", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>W\\<in>Ry n.\n     take (length xs - n) xs \\<in> sentences P \\<and>\n     (drop (length xs - n) xs, W) \\<in> failures Q\n  W \\<in> Ry n\n\ngoal (1 subgoal):\n 1. take (length xs - n) xs \\<in> sentences P \\<and>\n    (drop (length xs - n) xs, W) \\<in> failures Q", ".."], ["proof (state)\nthis:\n  take (length xs - n) xs \\<in> sentences P \\<and>\n  (drop (length xs - n) xs, W) \\<in> failures Q\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  take (length xs - n) xs \\<in> sentences P \\<and>\n  (drop (length xs - n) xs, W) \\<in> failures Q\n\ngoal (1 subgoal):\n 1. \\<exists>n\\<in>{..length xs}. \\<exists>W. W \\<in> Rx n \\<union> Ry n", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>n\\<in>{..length xs}. \\<exists>W. W \\<in> Rx n \\<union> Ry n", "have \"\\<exists>n \\<in> {..length xs}. \\<exists>W. W \\<in> Rx n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>n\\<in>{..length xs}. \\<exists>W. W \\<in> Rx n", "using A"], ["proof (prove)\nusing this:\n  X = (\\<Union>n\\<le>length xs. \\<Union>W\\<in>Rx n. W) \\<and>\n  (\\<forall>W\\<in>Rx 0.\n      xs \\<notin> sentences P \\<and>\n      None \\<notin> set xs \\<and> (xs, W) \\<in> failures P \\<or>\n      xs \\<in> sentences P \\<and>\n      (\\<exists>U V.\n          (xs, U) \\<in> failures P \\<and>\n          ([], V) \\<in> failures Q \\<and>\n          W = insert None U \\<inter> V)) \\<and>\n  (\\<forall>n\\<in>{0<..length xs}.\n      \\<forall>W\\<in>Rx n.\n         take (length xs - n) xs \\<in> sentences P \\<and>\n         (drop (length xs - n) xs, W) \\<in> failures Q) \\<and>\n  (\\<exists>n\\<in>{..length xs}. \\<exists>W. W \\<in> Rx n)\n\ngoal (1 subgoal):\n 1. \\<exists>n\\<in>{..length xs}. \\<exists>W. W \\<in> Rx n", "by simp"], ["proof (state)\nthis:\n  \\<exists>n\\<in>{..length xs}. \\<exists>W. W \\<in> Rx n\n\ngoal (1 subgoal):\n 1. \\<exists>n\\<in>{..length xs}. \\<exists>W. W \\<in> Rx n \\<union> Ry n", "then"], ["proof (chain)\npicking this:\n  \\<exists>n\\<in>{..length xs}. \\<exists>W. W \\<in> Rx n", "obtain n where C: \"n \\<in> {..length xs}\" and D: \"\\<exists>W. W \\<in> Rx n\""], ["proof (prove)\nusing this:\n  \\<exists>n\\<in>{..length xs}. \\<exists>W. W \\<in> Rx n\n\ngoal (1 subgoal):\n 1. (\\<And>n.\n        \\<lbrakk>n \\<in> {..length xs}; \\<exists>W. W \\<in> Rx n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  n \\<in> {..length xs}\n  \\<exists>W. W \\<in> Rx n\n\ngoal (1 subgoal):\n 1. \\<exists>n\\<in>{..length xs}. \\<exists>W. W \\<in> Rx n \\<union> Ry n", "obtain W where \"W \\<in> Rx n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>W. W \\<in> Rx n \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using D"], ["proof (prove)\nusing this:\n  \\<exists>W. W \\<in> Rx n\n\ngoal (1 subgoal):\n 1. (\\<And>W. W \\<in> Rx n \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  W \\<in> Rx n\n\ngoal (1 subgoal):\n 1. \\<exists>n\\<in>{..length xs}. \\<exists>W. W \\<in> Rx n \\<union> Ry n", "hence \"W \\<in> Rx n \\<union> Ry n\""], ["proof (prove)\nusing this:\n  W \\<in> Rx n\n\ngoal (1 subgoal):\n 1. W \\<in> Rx n \\<union> Ry n", ".."], ["proof (state)\nthis:\n  W \\<in> Rx n \\<union> Ry n\n\ngoal (1 subgoal):\n 1. \\<exists>n\\<in>{..length xs}. \\<exists>W. W \\<in> Rx n \\<union> Ry n", "hence \"\\<exists>W. W \\<in> Rx n \\<union> Ry n\""], ["proof (prove)\nusing this:\n  W \\<in> Rx n \\<union> Ry n\n\ngoal (1 subgoal):\n 1. \\<exists>W. W \\<in> Rx n \\<union> Ry n", ".."], ["proof (state)\nthis:\n  \\<exists>W. W \\<in> Rx n \\<union> Ry n\n\ngoal (1 subgoal):\n 1. \\<exists>n\\<in>{..length xs}. \\<exists>W. W \\<in> Rx n \\<union> Ry n", "thus \"\\<exists>n \\<in> {..length xs}. \\<exists>W. W \\<in> Rx n \\<union> Ry n\""], ["proof (prove)\nusing this:\n  \\<exists>W. W \\<in> Rx n \\<union> Ry n\n\ngoal (1 subgoal):\n 1. \\<exists>n\\<in>{..length xs}. \\<exists>W. W \\<in> Rx n \\<union> Ry n", "using C"], ["proof (prove)\nusing this:\n  \\<exists>W. W \\<in> Rx n \\<union> Ry n\n  n \\<in> {..length xs}\n\ngoal (1 subgoal):\n 1. \\<exists>n\\<in>{..length xs}. \\<exists>W. W \\<in> Rx n \\<union> Ry n", ".."], ["proof (state)\nthis:\n  \\<exists>n\\<in>{..length xs}. \\<exists>W. W \\<in> Rx n \\<union> Ry n\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>R.\n     X \\<union> Y = (\\<Union>n\\<le>length xs. \\<Union>W\\<in>R n. W) \\<and>\n     (\\<forall>W\\<in>R 0.\n         xs \\<notin> sentences P \\<and>\n         None \\<notin> set xs \\<and> (xs, W) \\<in> failures P \\<or>\n         xs \\<in> sentences P \\<and>\n         (\\<exists>U V.\n             (xs, U) \\<in> failures P \\<and>\n             ([], V) \\<in> failures Q \\<and>\n             W = insert None U \\<inter> V)) \\<and>\n     (\\<forall>n\\<in>{0<..length xs}.\n         \\<forall>W\\<in>R n.\n            take (length xs - n) xs \\<in> sentences P \\<and>\n            (drop (length xs - n) xs, W) \\<in> failures Q) \\<and>\n     (\\<exists>n\\<in>{..length xs}. \\<exists>W. W \\<in> R n)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma seq_comp_refusals_finite [rule_format]:\n  assumes A: \"xs \\<in> Domain (seq_comp_failures P Q)\"\n  shows \"finite A \\<Longrightarrow> (\\<forall>x \\<in> A. (xs, F x) \\<in> seq_comp_failures P Q) \\<longrightarrow>\n    (xs, \\<Union>x \\<in> A. F x) \\<in> seq_comp_failures P Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite A \\<Longrightarrow>\n    (\\<forall>x\\<in>A.\n        (xs, F x) \\<in> seq_comp_failures P Q) \\<longrightarrow>\n    (xs, \\<Union> (F ` A)) \\<in> seq_comp_failures P Q", "proof (erule finite_induct, simp, rule_tac [2] impI)"], ["proof (state)\ngoal (2 subgoals):\n 1. (xs, {}) \\<in> seq_comp_failures P Q\n 2. \\<And>x Fa.\n       \\<lbrakk>finite Fa; x \\<notin> Fa;\n        (\\<forall>x\\<in>Fa.\n            (xs, F x) \\<in> seq_comp_failures P Q) \\<longrightarrow>\n        (xs, \\<Union> (F ` Fa)) \\<in> seq_comp_failures P Q;\n        \\<forall>x\\<in>insert x Fa.\n           (xs, F x) \\<in> seq_comp_failures P Q\\<rbrakk>\n       \\<Longrightarrow> (xs, \\<Union> (F ` insert x Fa))\n                         \\<in> seq_comp_failures P Q", "have \"\\<exists>X. (xs, X) \\<in> seq_comp_failures P Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>X. (xs, X) \\<in> seq_comp_failures P Q", "using A"], ["proof (prove)\nusing this:\n  xs \\<in> Domain (seq_comp_failures P Q)\n\ngoal (1 subgoal):\n 1. \\<exists>X. (xs, X) \\<in> seq_comp_failures P Q", "by (simp add: Domain_iff)"], ["proof (state)\nthis:\n  \\<exists>X. (xs, X) \\<in> seq_comp_failures P Q\n\ngoal (2 subgoals):\n 1. (xs, {}) \\<in> seq_comp_failures P Q\n 2. \\<And>x Fa.\n       \\<lbrakk>finite Fa; x \\<notin> Fa;\n        (\\<forall>x\\<in>Fa.\n            (xs, F x) \\<in> seq_comp_failures P Q) \\<longrightarrow>\n        (xs, \\<Union> (F ` Fa)) \\<in> seq_comp_failures P Q;\n        \\<forall>x\\<in>insert x Fa.\n           (xs, F x) \\<in> seq_comp_failures P Q\\<rbrakk>\n       \\<Longrightarrow> (xs, \\<Union> (F ` insert x Fa))\n                         \\<in> seq_comp_failures P Q", "then"], ["proof (chain)\npicking this:\n  \\<exists>X. (xs, X) \\<in> seq_comp_failures P Q", "obtain X where \"(xs, X) \\<in> seq_comp_failures P Q\""], ["proof (prove)\nusing this:\n  \\<exists>X. (xs, X) \\<in> seq_comp_failures P Q\n\ngoal (1 subgoal):\n 1. (\\<And>X.\n        (xs, X) \\<in> seq_comp_failures P Q \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  (xs, X) \\<in> seq_comp_failures P Q\n\ngoal (2 subgoals):\n 1. (xs, {}) \\<in> seq_comp_failures P Q\n 2. \\<And>x Fa.\n       \\<lbrakk>finite Fa; x \\<notin> Fa;\n        (\\<forall>x\\<in>Fa.\n            (xs, F x) \\<in> seq_comp_failures P Q) \\<longrightarrow>\n        (xs, \\<Union> (F ` Fa)) \\<in> seq_comp_failures P Q;\n        \\<forall>x\\<in>insert x Fa.\n           (xs, F x) \\<in> seq_comp_failures P Q\\<rbrakk>\n       \\<Longrightarrow> (xs, \\<Union> (F ` insert x Fa))\n                         \\<in> seq_comp_failures P Q", "moreover"], ["proof (state)\nthis:\n  (xs, X) \\<in> seq_comp_failures P Q\n\ngoal (2 subgoals):\n 1. (xs, {}) \\<in> seq_comp_failures P Q\n 2. \\<And>x Fa.\n       \\<lbrakk>finite Fa; x \\<notin> Fa;\n        (\\<forall>x\\<in>Fa.\n            (xs, F x) \\<in> seq_comp_failures P Q) \\<longrightarrow>\n        (xs, \\<Union> (F ` Fa)) \\<in> seq_comp_failures P Q;\n        \\<forall>x\\<in>insert x Fa.\n           (xs, F x) \\<in> seq_comp_failures P Q\\<rbrakk>\n       \\<Longrightarrow> (xs, \\<Union> (F ` insert x Fa))\n                         \\<in> seq_comp_failures P Q", "have \"{} \\<subseteq> X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {} \\<subseteq> X", ".."], ["proof (state)\nthis:\n  {} \\<subseteq> X\n\ngoal (2 subgoals):\n 1. (xs, {}) \\<in> seq_comp_failures P Q\n 2. \\<And>x Fa.\n       \\<lbrakk>finite Fa; x \\<notin> Fa;\n        (\\<forall>x\\<in>Fa.\n            (xs, F x) \\<in> seq_comp_failures P Q) \\<longrightarrow>\n        (xs, \\<Union> (F ` Fa)) \\<in> seq_comp_failures P Q;\n        \\<forall>x\\<in>insert x Fa.\n           (xs, F x) \\<in> seq_comp_failures P Q\\<rbrakk>\n       \\<Longrightarrow> (xs, \\<Union> (F ` insert x Fa))\n                         \\<in> seq_comp_failures P Q", "ultimately"], ["proof (chain)\npicking this:\n  (xs, X) \\<in> seq_comp_failures P Q\n  {} \\<subseteq> X", "show \"(xs, {}) \\<in> seq_comp_failures P Q\""], ["proof (prove)\nusing this:\n  (xs, X) \\<in> seq_comp_failures P Q\n  {} \\<subseteq> X\n\ngoal (1 subgoal):\n 1. (xs, {}) \\<in> seq_comp_failures P Q", "by (rule seq_comp_prop_3)"], ["proof (state)\nthis:\n  (xs, {}) \\<in> seq_comp_failures P Q\n\ngoal (1 subgoal):\n 1. \\<And>x Fa.\n       \\<lbrakk>finite Fa; x \\<notin> Fa;\n        (\\<forall>x\\<in>Fa.\n            (xs, F x) \\<in> seq_comp_failures P Q) \\<longrightarrow>\n        (xs, \\<Union> (F ` Fa)) \\<in> seq_comp_failures P Q;\n        \\<forall>x\\<in>insert x Fa.\n           (xs, F x) \\<in> seq_comp_failures P Q\\<rbrakk>\n       \\<Longrightarrow> (xs, \\<Union> (F ` insert x Fa))\n                         \\<in> seq_comp_failures P Q", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x Fa.\n       \\<lbrakk>finite Fa; x \\<notin> Fa;\n        (\\<forall>x\\<in>Fa.\n            (xs, F x) \\<in> seq_comp_failures P Q) \\<longrightarrow>\n        (xs, \\<Union> (F ` Fa)) \\<in> seq_comp_failures P Q;\n        \\<forall>x\\<in>insert x Fa.\n           (xs, F x) \\<in> seq_comp_failures P Q\\<rbrakk>\n       \\<Longrightarrow> (xs, \\<Union> (F ` insert x Fa))\n                         \\<in> seq_comp_failures P Q", "fix x' A"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x Fa.\n       \\<lbrakk>finite Fa; x \\<notin> Fa;\n        (\\<forall>x\\<in>Fa.\n            (xs, F x) \\<in> seq_comp_failures P Q) \\<longrightarrow>\n        (xs, \\<Union> (F ` Fa)) \\<in> seq_comp_failures P Q;\n        \\<forall>x\\<in>insert x Fa.\n           (xs, F x) \\<in> seq_comp_failures P Q\\<rbrakk>\n       \\<Longrightarrow> (xs, \\<Union> (F ` insert x Fa))\n                         \\<in> seq_comp_failures P Q", "assume B: \"\\<forall>x \\<in> insert x' A. (xs, F x) \\<in> seq_comp_failures P Q\""], ["proof (state)\nthis:\n  \\<forall>x\\<in>insert x' A. (xs, F x) \\<in> seq_comp_failures P Q\n\ngoal (1 subgoal):\n 1. \\<And>x Fa.\n       \\<lbrakk>finite Fa; x \\<notin> Fa;\n        (\\<forall>x\\<in>Fa.\n            (xs, F x) \\<in> seq_comp_failures P Q) \\<longrightarrow>\n        (xs, \\<Union> (F ` Fa)) \\<in> seq_comp_failures P Q;\n        \\<forall>x\\<in>insert x Fa.\n           (xs, F x) \\<in> seq_comp_failures P Q\\<rbrakk>\n       \\<Longrightarrow> (xs, \\<Union> (F ` insert x Fa))\n                         \\<in> seq_comp_failures P Q", "hence \"(xs, F x') \\<in> seq_comp_failures P Q\""], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>insert x' A. (xs, F x) \\<in> seq_comp_failures P Q\n\ngoal (1 subgoal):\n 1. (xs, F x') \\<in> seq_comp_failures P Q", "by simp"], ["proof (state)\nthis:\n  (xs, F x') \\<in> seq_comp_failures P Q\n\ngoal (1 subgoal):\n 1. \\<And>x Fa.\n       \\<lbrakk>finite Fa; x \\<notin> Fa;\n        (\\<forall>x\\<in>Fa.\n            (xs, F x) \\<in> seq_comp_failures P Q) \\<longrightarrow>\n        (xs, \\<Union> (F ` Fa)) \\<in> seq_comp_failures P Q;\n        \\<forall>x\\<in>insert x Fa.\n           (xs, F x) \\<in> seq_comp_failures P Q\\<rbrakk>\n       \\<Longrightarrow> (xs, \\<Union> (F ` insert x Fa))\n                         \\<in> seq_comp_failures P Q", "moreover"], ["proof (state)\nthis:\n  (xs, F x') \\<in> seq_comp_failures P Q\n\ngoal (1 subgoal):\n 1. \\<And>x Fa.\n       \\<lbrakk>finite Fa; x \\<notin> Fa;\n        (\\<forall>x\\<in>Fa.\n            (xs, F x) \\<in> seq_comp_failures P Q) \\<longrightarrow>\n        (xs, \\<Union> (F ` Fa)) \\<in> seq_comp_failures P Q;\n        \\<forall>x\\<in>insert x Fa.\n           (xs, F x) \\<in> seq_comp_failures P Q\\<rbrakk>\n       \\<Longrightarrow> (xs, \\<Union> (F ` insert x Fa))\n                         \\<in> seq_comp_failures P Q", "assume \"(\\<forall>x \\<in> A. (xs, F x) \\<in> seq_comp_failures P Q) \\<longrightarrow>\n    (xs, \\<Union>x \\<in> A. F x) \\<in> seq_comp_failures P Q\""], ["proof (state)\nthis:\n  (\\<forall>x\\<in>A.\n      (xs, F x) \\<in> seq_comp_failures P Q) \\<longrightarrow>\n  (xs, \\<Union> (F ` A)) \\<in> seq_comp_failures P Q\n\ngoal (1 subgoal):\n 1. \\<And>x Fa.\n       \\<lbrakk>finite Fa; x \\<notin> Fa;\n        (\\<forall>x\\<in>Fa.\n            (xs, F x) \\<in> seq_comp_failures P Q) \\<longrightarrow>\n        (xs, \\<Union> (F ` Fa)) \\<in> seq_comp_failures P Q;\n        \\<forall>x\\<in>insert x Fa.\n           (xs, F x) \\<in> seq_comp_failures P Q\\<rbrakk>\n       \\<Longrightarrow> (xs, \\<Union> (F ` insert x Fa))\n                         \\<in> seq_comp_failures P Q", "hence \"(xs, \\<Union>x \\<in> A. F x) \\<in> seq_comp_failures P Q\""], ["proof (prove)\nusing this:\n  (\\<forall>x\\<in>A.\n      (xs, F x) \\<in> seq_comp_failures P Q) \\<longrightarrow>\n  (xs, \\<Union> (F ` A)) \\<in> seq_comp_failures P Q\n\ngoal (1 subgoal):\n 1. (xs, \\<Union> (F ` A)) \\<in> seq_comp_failures P Q", "using B"], ["proof (prove)\nusing this:\n  (\\<forall>x\\<in>A.\n      (xs, F x) \\<in> seq_comp_failures P Q) \\<longrightarrow>\n  (xs, \\<Union> (F ` A)) \\<in> seq_comp_failures P Q\n  \\<forall>x\\<in>insert x' A. (xs, F x) \\<in> seq_comp_failures P Q\n\ngoal (1 subgoal):\n 1. (xs, \\<Union> (F ` A)) \\<in> seq_comp_failures P Q", "by simp"], ["proof (state)\nthis:\n  (xs, \\<Union> (F ` A)) \\<in> seq_comp_failures P Q\n\ngoal (1 subgoal):\n 1. \\<And>x Fa.\n       \\<lbrakk>finite Fa; x \\<notin> Fa;\n        (\\<forall>x\\<in>Fa.\n            (xs, F x) \\<in> seq_comp_failures P Q) \\<longrightarrow>\n        (xs, \\<Union> (F ` Fa)) \\<in> seq_comp_failures P Q;\n        \\<forall>x\\<in>insert x Fa.\n           (xs, F x) \\<in> seq_comp_failures P Q\\<rbrakk>\n       \\<Longrightarrow> (xs, \\<Union> (F ` insert x Fa))\n                         \\<in> seq_comp_failures P Q", "ultimately"], ["proof (chain)\npicking this:\n  (xs, F x') \\<in> seq_comp_failures P Q\n  (xs, \\<Union> (F ` A)) \\<in> seq_comp_failures P Q", "have \"(xs, F x' \\<union> (\\<Union>x \\<in> A. F x)) \\<in> seq_comp_failures P Q\""], ["proof (prove)\nusing this:\n  (xs, F x') \\<in> seq_comp_failures P Q\n  (xs, \\<Union> (F ` A)) \\<in> seq_comp_failures P Q\n\ngoal (1 subgoal):\n 1. (xs, F x' \\<union> \\<Union> (F ` A)) \\<in> seq_comp_failures P Q", "by (rule SCF_R4)"], ["proof (state)\nthis:\n  (xs, F x' \\<union> \\<Union> (F ` A)) \\<in> seq_comp_failures P Q\n\ngoal (1 subgoal):\n 1. \\<And>x Fa.\n       \\<lbrakk>finite Fa; x \\<notin> Fa;\n        (\\<forall>x\\<in>Fa.\n            (xs, F x) \\<in> seq_comp_failures P Q) \\<longrightarrow>\n        (xs, \\<Union> (F ` Fa)) \\<in> seq_comp_failures P Q;\n        \\<forall>x\\<in>insert x Fa.\n           (xs, F x) \\<in> seq_comp_failures P Q\\<rbrakk>\n       \\<Longrightarrow> (xs, \\<Union> (F ` insert x Fa))\n                         \\<in> seq_comp_failures P Q", "thus \"(xs, \\<Union>x \\<in> insert x' A. F x) \\<in> seq_comp_failures P Q\""], ["proof (prove)\nusing this:\n  (xs, F x' \\<union> \\<Union> (F ` A)) \\<in> seq_comp_failures P Q\n\ngoal (1 subgoal):\n 1. (xs, \\<Union> (F ` insert x' A)) \\<in> seq_comp_failures P Q", "by simp"], ["proof (state)\nthis:\n  (xs, \\<Union> (F ` insert x' A)) \\<in> seq_comp_failures P Q\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma seq_comp_refusals_2:\n  assumes\n    A: \"ref_union_closed P\" and\n    B: \"ref_union_closed Q\" and\n    C: \"xs \\<in> Domain (seq_comp_failures P Q)\" and\n    D: \"X = (\\<Union>n \\<in> {..length xs}. \\<Union>W \\<in> R n. W) \\<and>\n      (\\<forall>W \\<in> R 0.\n        xs \\<notin> sentences P \\<and> None \\<notin> set xs \\<and> (xs, W) \\<in> failures P \\<or>\n        xs \\<in> sentences P \\<and> (\\<exists>U V. (xs, U) \\<in> failures P \\<and> ([], V) \\<in> failures Q \\<and>\n          W = insert None U \\<inter> V)) \\<and>\n      (\\<forall>n \\<in> {0<..length xs}. \\<forall>W \\<in> R n.\n        take (length xs - n) xs \\<in> sentences P \\<and>\n        (drop (length xs - n) xs, W) \\<in> failures Q)\"\n  shows \"(xs, X) \\<in> seq_comp_failures P Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (xs, X) \\<in> seq_comp_failures P Q", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (xs, X) \\<in> seq_comp_failures P Q", "have \"\\<exists>Y. (xs, Y) \\<in> seq_comp_failures P Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>Y. (xs, Y) \\<in> seq_comp_failures P Q", "using C"], ["proof (prove)\nusing this:\n  xs \\<in> Domain (seq_comp_failures P Q)\n\ngoal (1 subgoal):\n 1. \\<exists>Y. (xs, Y) \\<in> seq_comp_failures P Q", "by (simp add: Domain_iff)"], ["proof (state)\nthis:\n  \\<exists>Y. (xs, Y) \\<in> seq_comp_failures P Q\n\ngoal (1 subgoal):\n 1. (xs, X) \\<in> seq_comp_failures P Q", "then"], ["proof (chain)\npicking this:\n  \\<exists>Y. (xs, Y) \\<in> seq_comp_failures P Q", "obtain Y where \"(xs, Y) \\<in> seq_comp_failures P Q\""], ["proof (prove)\nusing this:\n  \\<exists>Y. (xs, Y) \\<in> seq_comp_failures P Q\n\ngoal (1 subgoal):\n 1. (\\<And>Y.\n        (xs, Y) \\<in> seq_comp_failures P Q \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  (xs, Y) \\<in> seq_comp_failures P Q\n\ngoal (1 subgoal):\n 1. (xs, X) \\<in> seq_comp_failures P Q", "moreover"], ["proof (state)\nthis:\n  (xs, Y) \\<in> seq_comp_failures P Q\n\ngoal (1 subgoal):\n 1. (xs, X) \\<in> seq_comp_failures P Q", "have \"{} \\<subseteq> Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {} \\<subseteq> Y", ".."], ["proof (state)\nthis:\n  {} \\<subseteq> Y\n\ngoal (1 subgoal):\n 1. (xs, X) \\<in> seq_comp_failures P Q", "ultimately"], ["proof (chain)\npicking this:\n  (xs, Y) \\<in> seq_comp_failures P Q\n  {} \\<subseteq> Y", "have E: \"(xs, {}) \\<in> seq_comp_failures P Q\""], ["proof (prove)\nusing this:\n  (xs, Y) \\<in> seq_comp_failures P Q\n  {} \\<subseteq> Y\n\ngoal (1 subgoal):\n 1. (xs, {}) \\<in> seq_comp_failures P Q", "by (rule seq_comp_prop_3)"], ["proof (state)\nthis:\n  (xs, {}) \\<in> seq_comp_failures P Q\n\ngoal (1 subgoal):\n 1. (xs, X) \\<in> seq_comp_failures P Q", "have \"(xs, \\<Union>W \\<in> R 0. W) \\<in> seq_comp_failures P Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (xs, \\<Union>W\\<in>R 0. W) \\<in> seq_comp_failures P Q", "proof (cases \"\\<exists>W. W \\<in> R 0\", cases \"xs \\<in> sentences P\")"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<lbrakk>\\<exists>W. W \\<in> R 0; xs \\<in> sentences P\\<rbrakk>\n    \\<Longrightarrow> (xs, \\<Union>W\\<in>R 0. W) \\<in> seq_comp_failures P Q\n 2. \\<lbrakk>\\<exists>W. W \\<in> R 0; xs \\<notin> sentences P\\<rbrakk>\n    \\<Longrightarrow> (xs, \\<Union>W\\<in>R 0. W) \\<in> seq_comp_failures P Q\n 3. \\<nexists>W. W \\<in> R 0 \\<Longrightarrow>\n    (xs, \\<Union>W\\<in>R 0. W) \\<in> seq_comp_failures P Q", "assume \"\\<not> (\\<exists>W. W \\<in> R 0)\""], ["proof (state)\nthis:\n  \\<nexists>W. W \\<in> R 0\n\ngoal (3 subgoals):\n 1. \\<lbrakk>\\<exists>W. W \\<in> R 0; xs \\<in> sentences P\\<rbrakk>\n    \\<Longrightarrow> (xs, \\<Union>W\\<in>R 0. W) \\<in> seq_comp_failures P Q\n 2. \\<lbrakk>\\<exists>W. W \\<in> R 0; xs \\<notin> sentences P\\<rbrakk>\n    \\<Longrightarrow> (xs, \\<Union>W\\<in>R 0. W) \\<in> seq_comp_failures P Q\n 3. \\<nexists>W. W \\<in> R 0 \\<Longrightarrow>\n    (xs, \\<Union>W\\<in>R 0. W) \\<in> seq_comp_failures P Q", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<nexists>W. W \\<in> R 0\n\ngoal (1 subgoal):\n 1. (xs, \\<Union>W\\<in>R 0. W) \\<in> seq_comp_failures P Q", "using E"], ["proof (prove)\nusing this:\n  \\<nexists>W. W \\<in> R 0\n  (xs, {}) \\<in> seq_comp_failures P Q\n\ngoal (1 subgoal):\n 1. (xs, \\<Union>W\\<in>R 0. W) \\<in> seq_comp_failures P Q", "by simp"], ["proof (state)\nthis:\n  (xs, \\<Union>W\\<in>R 0. W) \\<in> seq_comp_failures P Q\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<exists>W. W \\<in> R 0; xs \\<in> sentences P\\<rbrakk>\n    \\<Longrightarrow> (xs, \\<Union>W\\<in>R 0. W) \\<in> seq_comp_failures P Q\n 2. \\<lbrakk>\\<exists>W. W \\<in> R 0; xs \\<notin> sentences P\\<rbrakk>\n    \\<Longrightarrow> (xs, \\<Union>W\\<in>R 0. W) \\<in> seq_comp_failures P Q", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<exists>W. W \\<in> R 0; xs \\<in> sentences P\\<rbrakk>\n    \\<Longrightarrow> (xs, \\<Union>W\\<in>R 0. W) \\<in> seq_comp_failures P Q\n 2. \\<lbrakk>\\<exists>W. W \\<in> R 0; xs \\<notin> sentences P\\<rbrakk>\n    \\<Longrightarrow> (xs, \\<Union>W\\<in>R 0. W) \\<in> seq_comp_failures P Q", "assume\n      F: \"\\<exists>W. W \\<in> R 0\" and\n      G: \"xs \\<notin> sentences P\""], ["proof (state)\nthis:\n  \\<exists>W. W \\<in> R 0\n  xs \\<notin> sentences P\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<exists>W. W \\<in> R 0; xs \\<in> sentences P\\<rbrakk>\n    \\<Longrightarrow> (xs, \\<Union>W\\<in>R 0. W) \\<in> seq_comp_failures P Q\n 2. \\<lbrakk>\\<exists>W. W \\<in> R 0; xs \\<notin> sentences P\\<rbrakk>\n    \\<Longrightarrow> (xs, \\<Union>W\\<in>R 0. W) \\<in> seq_comp_failures P Q", "have H: \"\\<forall>W \\<in> R 0. None \\<notin> set xs \\<and> (xs, W) \\<in> failures P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>W\\<in>R 0. None \\<notin> set xs \\<and> (xs, W) \\<in> failures P", "using D and G"], ["proof (prove)\nusing this:\n  X = (\\<Union>n\\<le>length xs. \\<Union>W\\<in>R n. W) \\<and>\n  (\\<forall>W\\<in>R 0.\n      xs \\<notin> sentences P \\<and>\n      None \\<notin> set xs \\<and> (xs, W) \\<in> failures P \\<or>\n      xs \\<in> sentences P \\<and>\n      (\\<exists>U V.\n          (xs, U) \\<in> failures P \\<and>\n          ([], V) \\<in> failures Q \\<and>\n          W = insert None U \\<inter> V)) \\<and>\n  (\\<forall>n\\<in>{0<..length xs}.\n      \\<forall>W\\<in>R n.\n         take (length xs - n) xs \\<in> sentences P \\<and>\n         (drop (length xs - n) xs, W) \\<in> failures Q)\n  xs \\<notin> sentences P\n\ngoal (1 subgoal):\n 1. \\<forall>W\\<in>R 0. None \\<notin> set xs \\<and> (xs, W) \\<in> failures P", "by simp"], ["proof (state)\nthis:\n  \\<forall>W\\<in>R 0. None \\<notin> set xs \\<and> (xs, W) \\<in> failures P\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<exists>W. W \\<in> R 0; xs \\<in> sentences P\\<rbrakk>\n    \\<Longrightarrow> (xs, \\<Union>W\\<in>R 0. W) \\<in> seq_comp_failures P Q\n 2. \\<lbrakk>\\<exists>W. W \\<in> R 0; xs \\<notin> sentences P\\<rbrakk>\n    \\<Longrightarrow> (xs, \\<Union>W\\<in>R 0. W) \\<in> seq_comp_failures P Q", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (xs, \\<Union>W\\<in>R 0. W) \\<in> seq_comp_failures P Q", "proof (rule SCF_R1 [OF G])"], ["proof (state)\ngoal (2 subgoals):\n 1. (xs, \\<Union>W\\<in>R 0. W) \\<in> failures P\n 2. None \\<notin> set xs", "have \"\\<forall>xs A. (\\<exists>W. W \\<in> A) \\<longrightarrow> (\\<forall>W \\<in> A. (xs, W) \\<in> failures P) \\<longrightarrow>\n        (xs, \\<Union>W \\<in> A. W) \\<in> failures P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>xs A.\n       (\\<exists>W. W \\<in> A) \\<longrightarrow>\n       (\\<forall>W\\<in>A. (xs, W) \\<in> failures P) \\<longrightarrow>\n       (xs, \\<Union>W\\<in>A. W) \\<in> failures P", "using A"], ["proof (prove)\nusing this:\n  ref_union_closed P\n\ngoal (1 subgoal):\n 1. \\<forall>xs A.\n       (\\<exists>W. W \\<in> A) \\<longrightarrow>\n       (\\<forall>W\\<in>A. (xs, W) \\<in> failures P) \\<longrightarrow>\n       (xs, \\<Union>W\\<in>A. W) \\<in> failures P", "by (simp add: ref_union_closed_def)"], ["proof (state)\nthis:\n  \\<forall>xs A.\n     (\\<exists>W. W \\<in> A) \\<longrightarrow>\n     (\\<forall>W\\<in>A. (xs, W) \\<in> failures P) \\<longrightarrow>\n     (xs, \\<Union>W\\<in>A. W) \\<in> failures P\n\ngoal (2 subgoals):\n 1. (xs, \\<Union>W\\<in>R 0. W) \\<in> failures P\n 2. None \\<notin> set xs", "hence \"(\\<exists>W. W \\<in> R 0) \\<longrightarrow> (\\<forall>W \\<in> R 0. (xs, W) \\<in> failures P) \\<longrightarrow>\n        (xs, \\<Union>W \\<in> R 0. W) \\<in> failures P\""], ["proof (prove)\nusing this:\n  \\<forall>xs A.\n     (\\<exists>W. W \\<in> A) \\<longrightarrow>\n     (\\<forall>W\\<in>A. (xs, W) \\<in> failures P) \\<longrightarrow>\n     (xs, \\<Union>W\\<in>A. W) \\<in> failures P\n\ngoal (1 subgoal):\n 1. (\\<exists>W. W \\<in> R 0) \\<longrightarrow>\n    (\\<forall>W\\<in>R 0. (xs, W) \\<in> failures P) \\<longrightarrow>\n    (xs, \\<Union>W\\<in>R 0. W) \\<in> failures P", "by blast"], ["proof (state)\nthis:\n  (\\<exists>W. W \\<in> R 0) \\<longrightarrow>\n  (\\<forall>W\\<in>R 0. (xs, W) \\<in> failures P) \\<longrightarrow>\n  (xs, \\<Union>W\\<in>R 0. W) \\<in> failures P\n\ngoal (2 subgoals):\n 1. (xs, \\<Union>W\\<in>R 0. W) \\<in> failures P\n 2. None \\<notin> set xs", "thus \"(xs, \\<Union>W \\<in> R 0. W) \\<in> failures P\""], ["proof (prove)\nusing this:\n  (\\<exists>W. W \\<in> R 0) \\<longrightarrow>\n  (\\<forall>W\\<in>R 0. (xs, W) \\<in> failures P) \\<longrightarrow>\n  (xs, \\<Union>W\\<in>R 0. W) \\<in> failures P\n\ngoal (1 subgoal):\n 1. (xs, \\<Union>W\\<in>R 0. W) \\<in> failures P", "using F and H"], ["proof (prove)\nusing this:\n  (\\<exists>W. W \\<in> R 0) \\<longrightarrow>\n  (\\<forall>W\\<in>R 0. (xs, W) \\<in> failures P) \\<longrightarrow>\n  (xs, \\<Union>W\\<in>R 0. W) \\<in> failures P\n  \\<exists>W. W \\<in> R 0\n  \\<forall>W\\<in>R 0. None \\<notin> set xs \\<and> (xs, W) \\<in> failures P\n\ngoal (1 subgoal):\n 1. (xs, \\<Union>W\\<in>R 0. W) \\<in> failures P", "by simp"], ["proof (state)\nthis:\n  (xs, \\<Union>W\\<in>R 0. W) \\<in> failures P\n\ngoal (1 subgoal):\n 1. None \\<notin> set xs", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. None \\<notin> set xs", "obtain W where \"W \\<in> R 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>W. W \\<in> R 0 \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "using F"], ["proof (prove)\nusing this:\n  \\<exists>W. W \\<in> R 0\n\ngoal (1 subgoal):\n 1. (\\<And>W. W \\<in> R 0 \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", ".."], ["proof (state)\nthis:\n  W \\<in> R 0\n\ngoal (1 subgoal):\n 1. None \\<notin> set xs", "thus \"None \\<notin> set xs\""], ["proof (prove)\nusing this:\n  W \\<in> R 0\n\ngoal (1 subgoal):\n 1. None \\<notin> set xs", "using H"], ["proof (prove)\nusing this:\n  W \\<in> R 0\n  \\<forall>W\\<in>R 0. None \\<notin> set xs \\<and> (xs, W) \\<in> failures P\n\ngoal (1 subgoal):\n 1. None \\<notin> set xs", "by simp"], ["proof (state)\nthis:\n  None \\<notin> set xs\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (xs, \\<Union>W\\<in>R 0. W) \\<in> seq_comp_failures P Q\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<exists>W. W \\<in> R 0; xs \\<in> sentences P\\<rbrakk>\n    \\<Longrightarrow> (xs, \\<Union>W\\<in>R 0. W) \\<in> seq_comp_failures P Q", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<exists>W. W \\<in> R 0; xs \\<in> sentences P\\<rbrakk>\n    \\<Longrightarrow> (xs, \\<Union>W\\<in>R 0. W) \\<in> seq_comp_failures P Q", "assume\n      F: \"\\<exists>W. W \\<in> R 0\" and\n      G: \"xs \\<in> sentences P\""], ["proof (state)\nthis:\n  \\<exists>W. W \\<in> R 0\n  xs \\<in> sentences P\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<exists>W. W \\<in> R 0; xs \\<in> sentences P\\<rbrakk>\n    \\<Longrightarrow> (xs, \\<Union>W\\<in>R 0. W) \\<in> seq_comp_failures P Q", "have \"\\<forall>W \\<in> R 0. \\<exists>U V. (xs, U) \\<in> failures P \\<and> ([], V) \\<in> failures Q \\<and>\n      W = insert None U \\<inter> V\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>W\\<in>R 0.\n       \\<exists>U V.\n          (xs, U) \\<in> failures P \\<and>\n          ([], V) \\<in> failures Q \\<and> W = insert None U \\<inter> V", "using D and G"], ["proof (prove)\nusing this:\n  X = (\\<Union>n\\<le>length xs. \\<Union>W\\<in>R n. W) \\<and>\n  (\\<forall>W\\<in>R 0.\n      xs \\<notin> sentences P \\<and>\n      None \\<notin> set xs \\<and> (xs, W) \\<in> failures P \\<or>\n      xs \\<in> sentences P \\<and>\n      (\\<exists>U V.\n          (xs, U) \\<in> failures P \\<and>\n          ([], V) \\<in> failures Q \\<and>\n          W = insert None U \\<inter> V)) \\<and>\n  (\\<forall>n\\<in>{0<..length xs}.\n      \\<forall>W\\<in>R n.\n         take (length xs - n) xs \\<in> sentences P \\<and>\n         (drop (length xs - n) xs, W) \\<in> failures Q)\n  xs \\<in> sentences P\n\ngoal (1 subgoal):\n 1. \\<forall>W\\<in>R 0.\n       \\<exists>U V.\n          (xs, U) \\<in> failures P \\<and>\n          ([], V) \\<in> failures Q \\<and> W = insert None U \\<inter> V", "by simp"], ["proof (state)\nthis:\n  \\<forall>W\\<in>R 0.\n     \\<exists>U V.\n        (xs, U) \\<in> failures P \\<and>\n        ([], V) \\<in> failures Q \\<and> W = insert None U \\<inter> V\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<exists>W. W \\<in> R 0; xs \\<in> sentences P\\<rbrakk>\n    \\<Longrightarrow> (xs, \\<Union>W\\<in>R 0. W) \\<in> seq_comp_failures P Q", "hence \"\\<exists>F. \\<forall>W \\<in> R 0. \\<exists>V. (xs, F W) \\<in> failures P \\<and> ([], V) \\<in> failures Q \\<and>\n      W = insert None (F W) \\<inter> V\""], ["proof (prove)\nusing this:\n  \\<forall>W\\<in>R 0.\n     \\<exists>U V.\n        (xs, U) \\<in> failures P \\<and>\n        ([], V) \\<in> failures Q \\<and> W = insert None U \\<inter> V\n\ngoal (1 subgoal):\n 1. \\<exists>F.\n       \\<forall>W\\<in>R 0.\n          \\<exists>V.\n             (xs, F W) \\<in> failures P \\<and>\n             ([], V) \\<in> failures Q \\<and>\n             W = insert None (F W) \\<inter> V", "by (rule bchoice)"], ["proof (state)\nthis:\n  \\<exists>F.\n     \\<forall>W\\<in>R 0.\n        \\<exists>V.\n           (xs, F W) \\<in> failures P \\<and>\n           ([], V) \\<in> failures Q \\<and> W = insert None (F W) \\<inter> V\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<exists>W. W \\<in> R 0; xs \\<in> sentences P\\<rbrakk>\n    \\<Longrightarrow> (xs, \\<Union>W\\<in>R 0. W) \\<in> seq_comp_failures P Q", "then"], ["proof (chain)\npicking this:\n  \\<exists>F.\n     \\<forall>W\\<in>R 0.\n        \\<exists>V.\n           (xs, F W) \\<in> failures P \\<and>\n           ([], V) \\<in> failures Q \\<and> W = insert None (F W) \\<inter> V", "obtain F where \"\\<forall>W \\<in> R 0.\n      \\<exists>V. (xs, F W) \\<in> failures P \\<and> ([], V) \\<in> failures Q \\<and>\n        W = insert None (F W) \\<inter> V\""], ["proof (prove)\nusing this:\n  \\<exists>F.\n     \\<forall>W\\<in>R 0.\n        \\<exists>V.\n           (xs, F W) \\<in> failures P \\<and>\n           ([], V) \\<in> failures Q \\<and> W = insert None (F W) \\<inter> V\n\ngoal (1 subgoal):\n 1. (\\<And>F.\n        \\<forall>W\\<in>R 0.\n           \\<exists>V.\n              (xs, F W) \\<in> failures P \\<and>\n              ([], V) \\<in> failures Q \\<and>\n              W = insert None (F W) \\<inter> V \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  \\<forall>W\\<in>R 0.\n     \\<exists>V.\n        (xs, F W) \\<in> failures P \\<and>\n        ([], V) \\<in> failures Q \\<and> W = insert None (F W) \\<inter> V\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<exists>W. W \\<in> R 0; xs \\<in> sentences P\\<rbrakk>\n    \\<Longrightarrow> (xs, \\<Union>W\\<in>R 0. W) \\<in> seq_comp_failures P Q", "hence \"\\<exists>G. \\<forall>W \\<in> R 0. (xs, F W) \\<in> failures P \\<and> ([], G W) \\<in> failures Q \\<and>\n      W = insert None (F W) \\<inter> G W\""], ["proof (prove)\nusing this:\n  \\<forall>W\\<in>R 0.\n     \\<exists>V.\n        (xs, F W) \\<in> failures P \\<and>\n        ([], V) \\<in> failures Q \\<and> W = insert None (F W) \\<inter> V\n\ngoal (1 subgoal):\n 1. \\<exists>G.\n       \\<forall>W\\<in>R 0.\n          (xs, F W) \\<in> failures P \\<and>\n          ([], G W) \\<in> failures Q \\<and>\n          W = insert None (F W) \\<inter> G W", "by (rule bchoice)"], ["proof (state)\nthis:\n  \\<exists>G.\n     \\<forall>W\\<in>R 0.\n        (xs, F W) \\<in> failures P \\<and>\n        ([], G W) \\<in> failures Q \\<and> W = insert None (F W) \\<inter> G W\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<exists>W. W \\<in> R 0; xs \\<in> sentences P\\<rbrakk>\n    \\<Longrightarrow> (xs, \\<Union>W\\<in>R 0. W) \\<in> seq_comp_failures P Q", "then"], ["proof (chain)\npicking this:\n  \\<exists>G.\n     \\<forall>W\\<in>R 0.\n        (xs, F W) \\<in> failures P \\<and>\n        ([], G W) \\<in> failures Q \\<and> W = insert None (F W) \\<inter> G W", "obtain G where H: \"\\<forall>W \\<in> R 0.\n      (xs, F W) \\<in> failures P \\<and> ([], G W) \\<in> failures Q \\<and>\n        W = insert None (F W) \\<inter> G W\""], ["proof (prove)\nusing this:\n  \\<exists>G.\n     \\<forall>W\\<in>R 0.\n        (xs, F W) \\<in> failures P \\<and>\n        ([], G W) \\<in> failures Q \\<and> W = insert None (F W) \\<inter> G W\n\ngoal (1 subgoal):\n 1. (\\<And>G.\n        \\<forall>W\\<in>R 0.\n           (xs, F W) \\<in> failures P \\<and>\n           ([], G W) \\<in> failures Q \\<and>\n           W = insert None (F W) \\<inter> G W \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  \\<forall>W\\<in>R 0.\n     (xs, F W) \\<in> failures P \\<and>\n     ([], G W) \\<in> failures Q \\<and> W = insert None (F W) \\<inter> G W\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<exists>W. W \\<in> R 0; xs \\<in> sentences P\\<rbrakk>\n    \\<Longrightarrow> (xs, \\<Union>W\\<in>R 0. W) \\<in> seq_comp_failures P Q", "have \"(xs, insert None (\\<Union>W \\<in> R 0. F W) \\<inter> (\\<Union>W \\<in> R 0. G W))\n      \\<in> seq_comp_failures P Q\"\n      (is \"(_, ?S) \\<in> _\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (xs, insert None (\\<Union> (F ` R 0)) \\<inter> \\<Union> (G ` R 0))\n    \\<in> seq_comp_failures P Q", "proof (rule SCF_R2 [OF G])"], ["proof (state)\ngoal (2 subgoals):\n 1. (xs, \\<Union> (F ` R 0)) \\<in> failures P\n 2. ([], \\<Union> (G ` R 0)) \\<in> failures Q", "have \"\\<forall>xs A. (\\<exists>X. X \\<in> A) \\<longrightarrow> (\\<forall>X \\<in> A. (xs, X) \\<in> failures P) \\<longrightarrow>\n        (xs, \\<Union>X \\<in> A. X) \\<in> failures P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>xs A.\n       (\\<exists>X. X \\<in> A) \\<longrightarrow>\n       (\\<forall>X\\<in>A. (xs, X) \\<in> failures P) \\<longrightarrow>\n       (xs, \\<Union>X\\<in>A. X) \\<in> failures P", "using A"], ["proof (prove)\nusing this:\n  ref_union_closed P\n\ngoal (1 subgoal):\n 1. \\<forall>xs A.\n       (\\<exists>X. X \\<in> A) \\<longrightarrow>\n       (\\<forall>X\\<in>A. (xs, X) \\<in> failures P) \\<longrightarrow>\n       (xs, \\<Union>X\\<in>A. X) \\<in> failures P", "by (simp add: ref_union_closed_def)"], ["proof (state)\nthis:\n  \\<forall>xs A.\n     (\\<exists>X. X \\<in> A) \\<longrightarrow>\n     (\\<forall>X\\<in>A. (xs, X) \\<in> failures P) \\<longrightarrow>\n     (xs, \\<Union>X\\<in>A. X) \\<in> failures P\n\ngoal (2 subgoals):\n 1. (xs, \\<Union> (F ` R 0)) \\<in> failures P\n 2. ([], \\<Union> (G ` R 0)) \\<in> failures Q", "hence \"(\\<exists>X. X \\<in> F ` R 0) \\<longrightarrow> (\\<forall>X \\<in> F ` R 0. (xs, X) \\<in> failures P) \\<longrightarrow>\n        (xs, \\<Union>X \\<in> F ` R 0. X) \\<in> failures P\"\n        (is \"?A \\<longrightarrow> ?B \\<longrightarrow> ?C\")"], ["proof (prove)\nusing this:\n  \\<forall>xs A.\n     (\\<exists>X. X \\<in> A) \\<longrightarrow>\n     (\\<forall>X\\<in>A. (xs, X) \\<in> failures P) \\<longrightarrow>\n     (xs, \\<Union>X\\<in>A. X) \\<in> failures P\n\ngoal (1 subgoal):\n 1. (\\<exists>X. X \\<in> F ` R 0) \\<longrightarrow>\n    (\\<forall>X\\<in>F ` R 0. (xs, X) \\<in> failures P) \\<longrightarrow>\n    (xs, \\<Union>X\\<in>F ` R 0. X) \\<in> failures P", "by (erule_tac x = xs in allE, erule_tac x = \"F ` R 0\" in allE)"], ["proof (state)\nthis:\n  (\\<exists>X. X \\<in> F ` R 0) \\<longrightarrow>\n  (\\<forall>X\\<in>F ` R 0. (xs, X) \\<in> failures P) \\<longrightarrow>\n  (xs, \\<Union>X\\<in>F ` R 0. X) \\<in> failures P\n\ngoal (2 subgoals):\n 1. (xs, \\<Union> (F ` R 0)) \\<in> failures P\n 2. ([], \\<Union> (G ` R 0)) \\<in> failures Q", "moreover"], ["proof (state)\nthis:\n  (\\<exists>X. X \\<in> F ` R 0) \\<longrightarrow>\n  (\\<forall>X\\<in>F ` R 0. (xs, X) \\<in> failures P) \\<longrightarrow>\n  (xs, \\<Union>X\\<in>F ` R 0. X) \\<in> failures P\n\ngoal (2 subgoals):\n 1. (xs, \\<Union> (F ` R 0)) \\<in> failures P\n 2. ([], \\<Union> (G ` R 0)) \\<in> failures Q", "obtain W where \"W \\<in> R 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>W. W \\<in> R 0 \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "using F"], ["proof (prove)\nusing this:\n  \\<exists>W. W \\<in> R 0\n\ngoal (1 subgoal):\n 1. (\\<And>W. W \\<in> R 0 \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", ".."], ["proof (state)\nthis:\n  W \\<in> R 0\n\ngoal (2 subgoals):\n 1. (xs, \\<Union> (F ` R 0)) \\<in> failures P\n 2. ([], \\<Union> (G ` R 0)) \\<in> failures Q", "hence ?A"], ["proof (prove)\nusing this:\n  W \\<in> R 0\n\ngoal (1 subgoal):\n 1. \\<exists>X. X \\<in> F ` R 0", "proof (simp add: image_def, rule_tac x = \"F W\" in exI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>W \\<in> R 0; W \\<in> R 0\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x\\<in>R 0. F W = F x", "qed (rule bexI, simp)"], ["proof (state)\nthis:\n  \\<exists>X. X \\<in> F ` R 0\n\ngoal (2 subgoals):\n 1. (xs, \\<Union> (F ` R 0)) \\<in> failures P\n 2. ([], \\<Union> (G ` R 0)) \\<in> failures Q", "ultimately"], ["proof (chain)\npicking this:\n  (\\<exists>X. X \\<in> F ` R 0) \\<longrightarrow>\n  (\\<forall>X\\<in>F ` R 0. (xs, X) \\<in> failures P) \\<longrightarrow>\n  (xs, \\<Union>X\\<in>F ` R 0. X) \\<in> failures P\n  \\<exists>X. X \\<in> F ` R 0", "have \"?B \\<longrightarrow> ?C\""], ["proof (prove)\nusing this:\n  (\\<exists>X. X \\<in> F ` R 0) \\<longrightarrow>\n  (\\<forall>X\\<in>F ` R 0. (xs, X) \\<in> failures P) \\<longrightarrow>\n  (xs, \\<Union>X\\<in>F ` R 0. X) \\<in> failures P\n  \\<exists>X. X \\<in> F ` R 0\n\ngoal (1 subgoal):\n 1. (\\<forall>X\\<in>F ` R 0. (xs, X) \\<in> failures P) \\<longrightarrow>\n    (xs, \\<Union>X\\<in>F ` R 0. X) \\<in> failures P", ".."], ["proof (state)\nthis:\n  (\\<forall>X\\<in>F ` R 0. (xs, X) \\<in> failures P) \\<longrightarrow>\n  (xs, \\<Union>X\\<in>F ` R 0. X) \\<in> failures P\n\ngoal (2 subgoals):\n 1. (xs, \\<Union> (F ` R 0)) \\<in> failures P\n 2. ([], \\<Union> (G ` R 0)) \\<in> failures Q", "moreover"], ["proof (state)\nthis:\n  (\\<forall>X\\<in>F ` R 0. (xs, X) \\<in> failures P) \\<longrightarrow>\n  (xs, \\<Union>X\\<in>F ` R 0. X) \\<in> failures P\n\ngoal (2 subgoals):\n 1. (xs, \\<Union> (F ` R 0)) \\<in> failures P\n 2. ([], \\<Union> (G ` R 0)) \\<in> failures Q", "have ?B"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>X\\<in>F ` R 0. (xs, X) \\<in> failures P", "proof (rule ballI, simp add: image_def, erule bexE)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>X x.\n       \\<lbrakk>x \\<in> R 0; X = F x\\<rbrakk>\n       \\<Longrightarrow> (xs, X) \\<in> failures P", "fix W X"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>X x.\n       \\<lbrakk>x \\<in> R 0; X = F x\\<rbrakk>\n       \\<Longrightarrow> (xs, X) \\<in> failures P", "assume \"W \\<in> R 0\""], ["proof (state)\nthis:\n  W \\<in> R 0\n\ngoal (1 subgoal):\n 1. \\<And>X x.\n       \\<lbrakk>x \\<in> R 0; X = F x\\<rbrakk>\n       \\<Longrightarrow> (xs, X) \\<in> failures P", "hence \"(xs, F W) \\<in> failures P\""], ["proof (prove)\nusing this:\n  W \\<in> R 0\n\ngoal (1 subgoal):\n 1. (xs, F W) \\<in> failures P", "using H"], ["proof (prove)\nusing this:\n  W \\<in> R 0\n  \\<forall>W\\<in>R 0.\n     (xs, F W) \\<in> failures P \\<and>\n     ([], G W) \\<in> failures Q \\<and> W = insert None (F W) \\<inter> G W\n\ngoal (1 subgoal):\n 1. (xs, F W) \\<in> failures P", "by simp"], ["proof (state)\nthis:\n  (xs, F W) \\<in> failures P\n\ngoal (1 subgoal):\n 1. \\<And>X x.\n       \\<lbrakk>x \\<in> R 0; X = F x\\<rbrakk>\n       \\<Longrightarrow> (xs, X) \\<in> failures P", "moreover"], ["proof (state)\nthis:\n  (xs, F W) \\<in> failures P\n\ngoal (1 subgoal):\n 1. \\<And>X x.\n       \\<lbrakk>x \\<in> R 0; X = F x\\<rbrakk>\n       \\<Longrightarrow> (xs, X) \\<in> failures P", "assume \"X = F W\""], ["proof (state)\nthis:\n  X = F W\n\ngoal (1 subgoal):\n 1. \\<And>X x.\n       \\<lbrakk>x \\<in> R 0; X = F x\\<rbrakk>\n       \\<Longrightarrow> (xs, X) \\<in> failures P", "ultimately"], ["proof (chain)\npicking this:\n  (xs, F W) \\<in> failures P\n  X = F W", "show \"(xs, X) \\<in> failures P\""], ["proof (prove)\nusing this:\n  (xs, F W) \\<in> failures P\n  X = F W\n\ngoal (1 subgoal):\n 1. (xs, X) \\<in> failures P", "by simp"], ["proof (state)\nthis:\n  (xs, X) \\<in> failures P\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>X\\<in>F ` R 0. (xs, X) \\<in> failures P\n\ngoal (2 subgoals):\n 1. (xs, \\<Union> (F ` R 0)) \\<in> failures P\n 2. ([], \\<Union> (G ` R 0)) \\<in> failures Q", "ultimately"], ["proof (chain)\npicking this:\n  (\\<forall>X\\<in>F ` R 0. (xs, X) \\<in> failures P) \\<longrightarrow>\n  (xs, \\<Union>X\\<in>F ` R 0. X) \\<in> failures P\n  \\<forall>X\\<in>F ` R 0. (xs, X) \\<in> failures P", "have ?C"], ["proof (prove)\nusing this:\n  (\\<forall>X\\<in>F ` R 0. (xs, X) \\<in> failures P) \\<longrightarrow>\n  (xs, \\<Union>X\\<in>F ` R 0. X) \\<in> failures P\n  \\<forall>X\\<in>F ` R 0. (xs, X) \\<in> failures P\n\ngoal (1 subgoal):\n 1. (xs, \\<Union>X\\<in>F ` R 0. X) \\<in> failures P", ".."], ["proof (state)\nthis:\n  (xs, \\<Union>X\\<in>F ` R 0. X) \\<in> failures P\n\ngoal (2 subgoals):\n 1. (xs, \\<Union> (F ` R 0)) \\<in> failures P\n 2. ([], \\<Union> (G ` R 0)) \\<in> failures Q", "thus \"(xs, \\<Union>W \\<in> R 0. F W) \\<in> failures P\""], ["proof (prove)\nusing this:\n  (xs, \\<Union>X\\<in>F ` R 0. X) \\<in> failures P\n\ngoal (1 subgoal):\n 1. (xs, \\<Union> (F ` R 0)) \\<in> failures P", "by simp"], ["proof (state)\nthis:\n  (xs, \\<Union> (F ` R 0)) \\<in> failures P\n\ngoal (1 subgoal):\n 1. ([], \\<Union> (G ` R 0)) \\<in> failures Q", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. ([], \\<Union> (G ` R 0)) \\<in> failures Q", "have \"\\<forall>xs A. (\\<exists>Y. Y \\<in> A) \\<longrightarrow> (\\<forall>Y \\<in> A. (xs, Y) \\<in> failures Q) \\<longrightarrow>\n        (xs, \\<Union>Y \\<in> A. Y) \\<in> failures Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>xs A.\n       (\\<exists>Y. Y \\<in> A) \\<longrightarrow>\n       (\\<forall>Y\\<in>A. (xs, Y) \\<in> failures Q) \\<longrightarrow>\n       (xs, \\<Union>Y\\<in>A. Y) \\<in> failures Q", "using B"], ["proof (prove)\nusing this:\n  ref_union_closed Q\n\ngoal (1 subgoal):\n 1. \\<forall>xs A.\n       (\\<exists>Y. Y \\<in> A) \\<longrightarrow>\n       (\\<forall>Y\\<in>A. (xs, Y) \\<in> failures Q) \\<longrightarrow>\n       (xs, \\<Union>Y\\<in>A. Y) \\<in> failures Q", "by (simp add: ref_union_closed_def)"], ["proof (state)\nthis:\n  \\<forall>xs A.\n     (\\<exists>Y. Y \\<in> A) \\<longrightarrow>\n     (\\<forall>Y\\<in>A. (xs, Y) \\<in> failures Q) \\<longrightarrow>\n     (xs, \\<Union>Y\\<in>A. Y) \\<in> failures Q\n\ngoal (1 subgoal):\n 1. ([], \\<Union> (G ` R 0)) \\<in> failures Q", "hence \"(\\<exists>Y. Y \\<in> G ` R 0) \\<longrightarrow> (\\<forall>Y \\<in> G ` R 0. ([], Y) \\<in> failures Q) \\<longrightarrow>\n        ([], \\<Union>Y \\<in> G ` R 0. Y) \\<in> failures Q\"\n        (is \"?A \\<longrightarrow> ?B \\<longrightarrow> ?C\")"], ["proof (prove)\nusing this:\n  \\<forall>xs A.\n     (\\<exists>Y. Y \\<in> A) \\<longrightarrow>\n     (\\<forall>Y\\<in>A. (xs, Y) \\<in> failures Q) \\<longrightarrow>\n     (xs, \\<Union>Y\\<in>A. Y) \\<in> failures Q\n\ngoal (1 subgoal):\n 1. (\\<exists>Y. Y \\<in> G ` R 0) \\<longrightarrow>\n    (\\<forall>Y\\<in>G ` R 0. ([], Y) \\<in> failures Q) \\<longrightarrow>\n    ([], \\<Union>Y\\<in>G ` R 0. Y) \\<in> failures Q", "by (erule_tac x = \"[]\" in allE, erule_tac x = \"G ` R 0\" in allE)"], ["proof (state)\nthis:\n  (\\<exists>Y. Y \\<in> G ` R 0) \\<longrightarrow>\n  (\\<forall>Y\\<in>G ` R 0. ([], Y) \\<in> failures Q) \\<longrightarrow>\n  ([], \\<Union>Y\\<in>G ` R 0. Y) \\<in> failures Q\n\ngoal (1 subgoal):\n 1. ([], \\<Union> (G ` R 0)) \\<in> failures Q", "moreover"], ["proof (state)\nthis:\n  (\\<exists>Y. Y \\<in> G ` R 0) \\<longrightarrow>\n  (\\<forall>Y\\<in>G ` R 0. ([], Y) \\<in> failures Q) \\<longrightarrow>\n  ([], \\<Union>Y\\<in>G ` R 0. Y) \\<in> failures Q\n\ngoal (1 subgoal):\n 1. ([], \\<Union> (G ` R 0)) \\<in> failures Q", "obtain W where \"W \\<in> R 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>W. W \\<in> R 0 \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "using F"], ["proof (prove)\nusing this:\n  \\<exists>W. W \\<in> R 0\n\ngoal (1 subgoal):\n 1. (\\<And>W. W \\<in> R 0 \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", ".."], ["proof (state)\nthis:\n  W \\<in> R 0\n\ngoal (1 subgoal):\n 1. ([], \\<Union> (G ` R 0)) \\<in> failures Q", "hence ?A"], ["proof (prove)\nusing this:\n  W \\<in> R 0\n\ngoal (1 subgoal):\n 1. \\<exists>Y. Y \\<in> G ` R 0", "proof (simp add: image_def, rule_tac x = \"G W\" in exI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>W \\<in> R 0; W \\<in> R 0\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x\\<in>R 0. G W = G x", "qed (rule bexI, simp)"], ["proof (state)\nthis:\n  \\<exists>Y. Y \\<in> G ` R 0\n\ngoal (1 subgoal):\n 1. ([], \\<Union> (G ` R 0)) \\<in> failures Q", "ultimately"], ["proof (chain)\npicking this:\n  (\\<exists>Y. Y \\<in> G ` R 0) \\<longrightarrow>\n  (\\<forall>Y\\<in>G ` R 0. ([], Y) \\<in> failures Q) \\<longrightarrow>\n  ([], \\<Union>Y\\<in>G ` R 0. Y) \\<in> failures Q\n  \\<exists>Y. Y \\<in> G ` R 0", "have \"?B \\<longrightarrow> ?C\""], ["proof (prove)\nusing this:\n  (\\<exists>Y. Y \\<in> G ` R 0) \\<longrightarrow>\n  (\\<forall>Y\\<in>G ` R 0. ([], Y) \\<in> failures Q) \\<longrightarrow>\n  ([], \\<Union>Y\\<in>G ` R 0. Y) \\<in> failures Q\n  \\<exists>Y. Y \\<in> G ` R 0\n\ngoal (1 subgoal):\n 1. (\\<forall>Y\\<in>G ` R 0. ([], Y) \\<in> failures Q) \\<longrightarrow>\n    ([], \\<Union>Y\\<in>G ` R 0. Y) \\<in> failures Q", ".."], ["proof (state)\nthis:\n  (\\<forall>Y\\<in>G ` R 0. ([], Y) \\<in> failures Q) \\<longrightarrow>\n  ([], \\<Union>Y\\<in>G ` R 0. Y) \\<in> failures Q\n\ngoal (1 subgoal):\n 1. ([], \\<Union> (G ` R 0)) \\<in> failures Q", "moreover"], ["proof (state)\nthis:\n  (\\<forall>Y\\<in>G ` R 0. ([], Y) \\<in> failures Q) \\<longrightarrow>\n  ([], \\<Union>Y\\<in>G ` R 0. Y) \\<in> failures Q\n\ngoal (1 subgoal):\n 1. ([], \\<Union> (G ` R 0)) \\<in> failures Q", "have ?B"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>Y\\<in>G ` R 0. ([], Y) \\<in> failures Q", "proof (rule ballI, simp add: image_def, erule bexE)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>Y x.\n       \\<lbrakk>x \\<in> R 0; Y = G x\\<rbrakk>\n       \\<Longrightarrow> ([], Y) \\<in> failures Q", "fix W Y"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>Y x.\n       \\<lbrakk>x \\<in> R 0; Y = G x\\<rbrakk>\n       \\<Longrightarrow> ([], Y) \\<in> failures Q", "assume \"W \\<in> R 0\""], ["proof (state)\nthis:\n  W \\<in> R 0\n\ngoal (1 subgoal):\n 1. \\<And>Y x.\n       \\<lbrakk>x \\<in> R 0; Y = G x\\<rbrakk>\n       \\<Longrightarrow> ([], Y) \\<in> failures Q", "hence \"([], G W) \\<in> failures Q\""], ["proof (prove)\nusing this:\n  W \\<in> R 0\n\ngoal (1 subgoal):\n 1. ([], G W) \\<in> failures Q", "using H"], ["proof (prove)\nusing this:\n  W \\<in> R 0\n  \\<forall>W\\<in>R 0.\n     (xs, F W) \\<in> failures P \\<and>\n     ([], G W) \\<in> failures Q \\<and> W = insert None (F W) \\<inter> G W\n\ngoal (1 subgoal):\n 1. ([], G W) \\<in> failures Q", "by simp"], ["proof (state)\nthis:\n  ([], G W) \\<in> failures Q\n\ngoal (1 subgoal):\n 1. \\<And>Y x.\n       \\<lbrakk>x \\<in> R 0; Y = G x\\<rbrakk>\n       \\<Longrightarrow> ([], Y) \\<in> failures Q", "moreover"], ["proof (state)\nthis:\n  ([], G W) \\<in> failures Q\n\ngoal (1 subgoal):\n 1. \\<And>Y x.\n       \\<lbrakk>x \\<in> R 0; Y = G x\\<rbrakk>\n       \\<Longrightarrow> ([], Y) \\<in> failures Q", "assume \"Y = G W\""], ["proof (state)\nthis:\n  Y = G W\n\ngoal (1 subgoal):\n 1. \\<And>Y x.\n       \\<lbrakk>x \\<in> R 0; Y = G x\\<rbrakk>\n       \\<Longrightarrow> ([], Y) \\<in> failures Q", "ultimately"], ["proof (chain)\npicking this:\n  ([], G W) \\<in> failures Q\n  Y = G W", "show \"([], Y) \\<in> failures Q\""], ["proof (prove)\nusing this:\n  ([], G W) \\<in> failures Q\n  Y = G W\n\ngoal (1 subgoal):\n 1. ([], Y) \\<in> failures Q", "by simp"], ["proof (state)\nthis:\n  ([], Y) \\<in> failures Q\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>Y\\<in>G ` R 0. ([], Y) \\<in> failures Q\n\ngoal (1 subgoal):\n 1. ([], \\<Union> (G ` R 0)) \\<in> failures Q", "ultimately"], ["proof (chain)\npicking this:\n  (\\<forall>Y\\<in>G ` R 0. ([], Y) \\<in> failures Q) \\<longrightarrow>\n  ([], \\<Union>Y\\<in>G ` R 0. Y) \\<in> failures Q\n  \\<forall>Y\\<in>G ` R 0. ([], Y) \\<in> failures Q", "have ?C"], ["proof (prove)\nusing this:\n  (\\<forall>Y\\<in>G ` R 0. ([], Y) \\<in> failures Q) \\<longrightarrow>\n  ([], \\<Union>Y\\<in>G ` R 0. Y) \\<in> failures Q\n  \\<forall>Y\\<in>G ` R 0. ([], Y) \\<in> failures Q\n\ngoal (1 subgoal):\n 1. ([], \\<Union>Y\\<in>G ` R 0. Y) \\<in> failures Q", ".."], ["proof (state)\nthis:\n  ([], \\<Union>Y\\<in>G ` R 0. Y) \\<in> failures Q\n\ngoal (1 subgoal):\n 1. ([], \\<Union> (G ` R 0)) \\<in> failures Q", "thus \"([], \\<Union>W \\<in> R 0. G W) \\<in> failures Q\""], ["proof (prove)\nusing this:\n  ([], \\<Union>Y\\<in>G ` R 0. Y) \\<in> failures Q\n\ngoal (1 subgoal):\n 1. ([], \\<Union> (G ` R 0)) \\<in> failures Q", "by simp"], ["proof (state)\nthis:\n  ([], \\<Union> (G ` R 0)) \\<in> failures Q\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (xs, insert None (\\<Union> (F ` R 0)) \\<inter> \\<Union> (G ` R 0))\n  \\<in> seq_comp_failures P Q\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<exists>W. W \\<in> R 0; xs \\<in> sentences P\\<rbrakk>\n    \\<Longrightarrow> (xs, \\<Union>W\\<in>R 0. W) \\<in> seq_comp_failures P Q", "moreover"], ["proof (state)\nthis:\n  (xs, insert None (\\<Union> (F ` R 0)) \\<inter> \\<Union> (G ` R 0))\n  \\<in> seq_comp_failures P Q\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<exists>W. W \\<in> R 0; xs \\<in> sentences P\\<rbrakk>\n    \\<Longrightarrow> (xs, \\<Union>W\\<in>R 0. W) \\<in> seq_comp_failures P Q", "have \"(\\<Union>W \\<in> R 0. W) \\<subseteq> ?S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Union>W\\<in>R 0. W)\n    \\<subseteq> insert None (\\<Union> (F ` R 0)) \\<inter> \\<Union> (G ` R 0)", "proof (rule subsetI, simp, erule bexE)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x X.\n       \\<lbrakk>X \\<in> R 0; x \\<in> X\\<rbrakk>\n       \\<Longrightarrow> (x = None \\<or>\n                          (\\<exists>xa\\<in>R 0. x \\<in> F xa)) \\<and>\n                         (\\<exists>xa\\<in>R 0. x \\<in> G xa)", "fix x W"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x X.\n       \\<lbrakk>X \\<in> R 0; x \\<in> X\\<rbrakk>\n       \\<Longrightarrow> (x = None \\<or>\n                          (\\<exists>xa\\<in>R 0. x \\<in> F xa)) \\<and>\n                         (\\<exists>xa\\<in>R 0. x \\<in> G xa)", "assume I: \"W \\<in> R 0\""], ["proof (state)\nthis:\n  W \\<in> R 0\n\ngoal (1 subgoal):\n 1. \\<And>x X.\n       \\<lbrakk>X \\<in> R 0; x \\<in> X\\<rbrakk>\n       \\<Longrightarrow> (x = None \\<or>\n                          (\\<exists>xa\\<in>R 0. x \\<in> F xa)) \\<and>\n                         (\\<exists>xa\\<in>R 0. x \\<in> G xa)", "hence \"W = insert None (F W) \\<inter> G W\""], ["proof (prove)\nusing this:\n  W \\<in> R 0\n\ngoal (1 subgoal):\n 1. W = insert None (F W) \\<inter> G W", "using H"], ["proof (prove)\nusing this:\n  W \\<in> R 0\n  \\<forall>W\\<in>R 0.\n     (xs, F W) \\<in> failures P \\<and>\n     ([], G W) \\<in> failures Q \\<and> W = insert None (F W) \\<inter> G W\n\ngoal (1 subgoal):\n 1. W = insert None (F W) \\<inter> G W", "by simp"], ["proof (state)\nthis:\n  W = insert None (F W) \\<inter> G W\n\ngoal (1 subgoal):\n 1. \\<And>x X.\n       \\<lbrakk>X \\<in> R 0; x \\<in> X\\<rbrakk>\n       \\<Longrightarrow> (x = None \\<or>\n                          (\\<exists>xa\\<in>R 0. x \\<in> F xa)) \\<and>\n                         (\\<exists>xa\\<in>R 0. x \\<in> G xa)", "moreover"], ["proof (state)\nthis:\n  W = insert None (F W) \\<inter> G W\n\ngoal (1 subgoal):\n 1. \\<And>x X.\n       \\<lbrakk>X \\<in> R 0; x \\<in> X\\<rbrakk>\n       \\<Longrightarrow> (x = None \\<or>\n                          (\\<exists>xa\\<in>R 0. x \\<in> F xa)) \\<and>\n                         (\\<exists>xa\\<in>R 0. x \\<in> G xa)", "assume \"x \\<in> W\""], ["proof (state)\nthis:\n  x \\<in> W\n\ngoal (1 subgoal):\n 1. \\<And>x X.\n       \\<lbrakk>X \\<in> R 0; x \\<in> X\\<rbrakk>\n       \\<Longrightarrow> (x = None \\<or>\n                          (\\<exists>xa\\<in>R 0. x \\<in> F xa)) \\<and>\n                         (\\<exists>xa\\<in>R 0. x \\<in> G xa)", "ultimately"], ["proof (chain)\npicking this:\n  W = insert None (F W) \\<inter> G W\n  x \\<in> W", "have \"x \\<in> insert None (F W) \\<inter> G W\""], ["proof (prove)\nusing this:\n  W = insert None (F W) \\<inter> G W\n  x \\<in> W\n\ngoal (1 subgoal):\n 1. x \\<in> insert None (F W) \\<inter> G W", "by simp"], ["proof (state)\nthis:\n  x \\<in> insert None (F W) \\<inter> G W\n\ngoal (1 subgoal):\n 1. \\<And>x X.\n       \\<lbrakk>X \\<in> R 0; x \\<in> X\\<rbrakk>\n       \\<Longrightarrow> (x = None \\<or>\n                          (\\<exists>xa\\<in>R 0. x \\<in> F xa)) \\<and>\n                         (\\<exists>xa\\<in>R 0. x \\<in> G xa)", "thus \"(x = None \\<or> (\\<exists>W \\<in> R 0. x \\<in> F W)) \\<and> (\\<exists>W \\<in> R 0. x \\<in> G W)\"\n        (is \"?A \\<and> ?B\")"], ["proof (prove)\nusing this:\n  x \\<in> insert None (F W) \\<inter> G W\n\ngoal (1 subgoal):\n 1. (x = None \\<or> (\\<exists>W\\<in>R 0. x \\<in> F W)) \\<and>\n    (\\<exists>W\\<in>R 0. x \\<in> G W)", "proof (rule IntE, simp)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>x = None \\<or> x \\<in> F W; x \\<in> G W\\<rbrakk>\n    \\<Longrightarrow> (x = None \\<or>\n                       (\\<exists>W\\<in>R 0. x \\<in> F W)) \\<and>\n                      (\\<exists>W\\<in>R 0. x \\<in> G W)", "assume \"x = None \\<or> x \\<in> F W\""], ["proof (state)\nthis:\n  x = None \\<or> x \\<in> F W\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x = None \\<or> x \\<in> F W; x \\<in> G W\\<rbrakk>\n    \\<Longrightarrow> (x = None \\<or>\n                       (\\<exists>W\\<in>R 0. x \\<in> F W)) \\<and>\n                      (\\<exists>W\\<in>R 0. x \\<in> G W)", "moreover"], ["proof (state)\nthis:\n  x = None \\<or> x \\<in> F W\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x = None \\<or> x \\<in> F W; x \\<in> G W\\<rbrakk>\n    \\<Longrightarrow> (x = None \\<or>\n                       (\\<exists>W\\<in>R 0. x \\<in> F W)) \\<and>\n                      (\\<exists>W\\<in>R 0. x \\<in> G W)", "{"], ["proof (state)\nthis:\n  x = None \\<or> x \\<in> F W\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x = None \\<or> x \\<in> F W; x \\<in> G W\\<rbrakk>\n    \\<Longrightarrow> (x = None \\<or>\n                       (\\<exists>W\\<in>R 0. x \\<in> F W)) \\<and>\n                      (\\<exists>W\\<in>R 0. x \\<in> G W)", "assume \"x = None\""], ["proof (state)\nthis:\n  x = None\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x = None \\<or> x \\<in> F W; x \\<in> G W\\<rbrakk>\n    \\<Longrightarrow> (x = None \\<or>\n                       (\\<exists>W\\<in>R 0. x \\<in> F W)) \\<and>\n                      (\\<exists>W\\<in>R 0. x \\<in> G W)", "hence ?A"], ["proof (prove)\nusing this:\n  x = None\n\ngoal (1 subgoal):\n 1. x = None \\<or> (\\<exists>W\\<in>R 0. x \\<in> F W)", ".."], ["proof (state)\nthis:\n  x = None \\<or> (\\<exists>W\\<in>R 0. x \\<in> F W)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x = None \\<or> x \\<in> F W; x \\<in> G W\\<rbrakk>\n    \\<Longrightarrow> (x = None \\<or>\n                       (\\<exists>W\\<in>R 0. x \\<in> F W)) \\<and>\n                      (\\<exists>W\\<in>R 0. x \\<in> G W)", "}"], ["proof (state)\nthis:\n  x = None \\<Longrightarrow>\n  x = None \\<or> (\\<exists>W\\<in>R 0. x \\<in> F W)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x = None \\<or> x \\<in> F W; x \\<in> G W\\<rbrakk>\n    \\<Longrightarrow> (x = None \\<or>\n                       (\\<exists>W\\<in>R 0. x \\<in> F W)) \\<and>\n                      (\\<exists>W\\<in>R 0. x \\<in> G W)", "moreover"], ["proof (state)\nthis:\n  x = None \\<Longrightarrow>\n  x = None \\<or> (\\<exists>W\\<in>R 0. x \\<in> F W)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x = None \\<or> x \\<in> F W; x \\<in> G W\\<rbrakk>\n    \\<Longrightarrow> (x = None \\<or>\n                       (\\<exists>W\\<in>R 0. x \\<in> F W)) \\<and>\n                      (\\<exists>W\\<in>R 0. x \\<in> G W)", "{"], ["proof (state)\nthis:\n  x = None \\<Longrightarrow>\n  x = None \\<or> (\\<exists>W\\<in>R 0. x \\<in> F W)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x = None \\<or> x \\<in> F W; x \\<in> G W\\<rbrakk>\n    \\<Longrightarrow> (x = None \\<or>\n                       (\\<exists>W\\<in>R 0. x \\<in> F W)) \\<and>\n                      (\\<exists>W\\<in>R 0. x \\<in> G W)", "assume \"x \\<in> F W\""], ["proof (state)\nthis:\n  x \\<in> F W\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x = None \\<or> x \\<in> F W; x \\<in> G W\\<rbrakk>\n    \\<Longrightarrow> (x = None \\<or>\n                       (\\<exists>W\\<in>R 0. x \\<in> F W)) \\<and>\n                      (\\<exists>W\\<in>R 0. x \\<in> G W)", "hence \"\\<exists>W \\<in> R 0. x \\<in> F W\""], ["proof (prove)\nusing this:\n  x \\<in> F W\n\ngoal (1 subgoal):\n 1. \\<exists>W\\<in>R 0. x \\<in> F W", "using I"], ["proof (prove)\nusing this:\n  x \\<in> F W\n  W \\<in> R 0\n\ngoal (1 subgoal):\n 1. \\<exists>W\\<in>R 0. x \\<in> F W", ".."], ["proof (state)\nthis:\n  \\<exists>W\\<in>R 0. x \\<in> F W\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x = None \\<or> x \\<in> F W; x \\<in> G W\\<rbrakk>\n    \\<Longrightarrow> (x = None \\<or>\n                       (\\<exists>W\\<in>R 0. x \\<in> F W)) \\<and>\n                      (\\<exists>W\\<in>R 0. x \\<in> G W)", "hence ?A"], ["proof (prove)\nusing this:\n  \\<exists>W\\<in>R 0. x \\<in> F W\n\ngoal (1 subgoal):\n 1. x = None \\<or> (\\<exists>W\\<in>R 0. x \\<in> F W)", ".."], ["proof (state)\nthis:\n  x = None \\<or> (\\<exists>W\\<in>R 0. x \\<in> F W)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x = None \\<or> x \\<in> F W; x \\<in> G W\\<rbrakk>\n    \\<Longrightarrow> (x = None \\<or>\n                       (\\<exists>W\\<in>R 0. x \\<in> F W)) \\<and>\n                      (\\<exists>W\\<in>R 0. x \\<in> G W)", "}"], ["proof (state)\nthis:\n  x \\<in> F W \\<Longrightarrow>\n  x = None \\<or> (\\<exists>W\\<in>R 0. x \\<in> F W)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x = None \\<or> x \\<in> F W; x \\<in> G W\\<rbrakk>\n    \\<Longrightarrow> (x = None \\<or>\n                       (\\<exists>W\\<in>R 0. x \\<in> F W)) \\<and>\n                      (\\<exists>W\\<in>R 0. x \\<in> G W)", "ultimately"], ["proof (chain)\npicking this:\n  x = None \\<or> x \\<in> F W\n  x = None \\<Longrightarrow>\n  x = None \\<or> (\\<exists>W\\<in>R 0. x \\<in> F W)\n  x \\<in> F W \\<Longrightarrow>\n  x = None \\<or> (\\<exists>W\\<in>R 0. x \\<in> F W)", "have ?A"], ["proof (prove)\nusing this:\n  x = None \\<or> x \\<in> F W\n  x = None \\<Longrightarrow>\n  x = None \\<or> (\\<exists>W\\<in>R 0. x \\<in> F W)\n  x \\<in> F W \\<Longrightarrow>\n  x = None \\<or> (\\<exists>W\\<in>R 0. x \\<in> F W)\n\ngoal (1 subgoal):\n 1. x = None \\<or> (\\<exists>W\\<in>R 0. x \\<in> F W)", ".."], ["proof (state)\nthis:\n  x = None \\<or> (\\<exists>W\\<in>R 0. x \\<in> F W)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x = None \\<or> x \\<in> F W; x \\<in> G W\\<rbrakk>\n    \\<Longrightarrow> (x = None \\<or>\n                       (\\<exists>W\\<in>R 0. x \\<in> F W)) \\<and>\n                      (\\<exists>W\\<in>R 0. x \\<in> G W)", "moreover"], ["proof (state)\nthis:\n  x = None \\<or> (\\<exists>W\\<in>R 0. x \\<in> F W)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x = None \\<or> x \\<in> F W; x \\<in> G W\\<rbrakk>\n    \\<Longrightarrow> (x = None \\<or>\n                       (\\<exists>W\\<in>R 0. x \\<in> F W)) \\<and>\n                      (\\<exists>W\\<in>R 0. x \\<in> G W)", "assume \"x \\<in> G W\""], ["proof (state)\nthis:\n  x \\<in> G W\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x = None \\<or> x \\<in> F W; x \\<in> G W\\<rbrakk>\n    \\<Longrightarrow> (x = None \\<or>\n                       (\\<exists>W\\<in>R 0. x \\<in> F W)) \\<and>\n                      (\\<exists>W\\<in>R 0. x \\<in> G W)", "hence ?B"], ["proof (prove)\nusing this:\n  x \\<in> G W\n\ngoal (1 subgoal):\n 1. \\<exists>W\\<in>R 0. x \\<in> G W", "using I"], ["proof (prove)\nusing this:\n  x \\<in> G W\n  W \\<in> R 0\n\ngoal (1 subgoal):\n 1. \\<exists>W\\<in>R 0. x \\<in> G W", ".."], ["proof (state)\nthis:\n  \\<exists>W\\<in>R 0. x \\<in> G W\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x = None \\<or> x \\<in> F W; x \\<in> G W\\<rbrakk>\n    \\<Longrightarrow> (x = None \\<or>\n                       (\\<exists>W\\<in>R 0. x \\<in> F W)) \\<and>\n                      (\\<exists>W\\<in>R 0. x \\<in> G W)", "ultimately"], ["proof (chain)\npicking this:\n  x = None \\<or> (\\<exists>W\\<in>R 0. x \\<in> F W)\n  \\<exists>W\\<in>R 0. x \\<in> G W", "show ?thesis"], ["proof (prove)\nusing this:\n  x = None \\<or> (\\<exists>W\\<in>R 0. x \\<in> F W)\n  \\<exists>W\\<in>R 0. x \\<in> G W\n\ngoal (1 subgoal):\n 1. (x = None \\<or> (\\<exists>W\\<in>R 0. x \\<in> F W)) \\<and>\n    (\\<exists>W\\<in>R 0. x \\<in> G W)", ".."], ["proof (state)\nthis:\n  (x = None \\<or> (\\<exists>W\\<in>R 0. x \\<in> F W)) \\<and>\n  (\\<exists>W\\<in>R 0. x \\<in> G W)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (x = None \\<or> (\\<exists>W\\<in>R 0. x \\<in> F W)) \\<and>\n  (\\<exists>W\\<in>R 0. x \\<in> G W)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<Union>W\\<in>R 0. W)\n  \\<subseteq> insert None (\\<Union> (F ` R 0)) \\<inter> \\<Union> (G ` R 0)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<exists>W. W \\<in> R 0; xs \\<in> sentences P\\<rbrakk>\n    \\<Longrightarrow> (xs, \\<Union>W\\<in>R 0. W) \\<in> seq_comp_failures P Q", "ultimately"], ["proof (chain)\npicking this:\n  (xs, insert None (\\<Union> (F ` R 0)) \\<inter> \\<Union> (G ` R 0))\n  \\<in> seq_comp_failures P Q\n  (\\<Union>W\\<in>R 0. W)\n  \\<subseteq> insert None (\\<Union> (F ` R 0)) \\<inter> \\<Union> (G ` R 0)", "show ?thesis"], ["proof (prove)\nusing this:\n  (xs, insert None (\\<Union> (F ` R 0)) \\<inter> \\<Union> (G ` R 0))\n  \\<in> seq_comp_failures P Q\n  (\\<Union>W\\<in>R 0. W)\n  \\<subseteq> insert None (\\<Union> (F ` R 0)) \\<inter> \\<Union> (G ` R 0)\n\ngoal (1 subgoal):\n 1. (xs, \\<Union>W\\<in>R 0. W) \\<in> seq_comp_failures P Q", "by (rule seq_comp_prop_3)"], ["proof (state)\nthis:\n  (xs, \\<Union>W\\<in>R 0. W) \\<in> seq_comp_failures P Q\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (xs, \\<Union>W\\<in>R 0. W) \\<in> seq_comp_failures P Q\n\ngoal (1 subgoal):\n 1. (xs, X) \\<in> seq_comp_failures P Q", "moreover"], ["proof (state)\nthis:\n  (xs, \\<Union>W\\<in>R 0. W) \\<in> seq_comp_failures P Q\n\ngoal (1 subgoal):\n 1. (xs, X) \\<in> seq_comp_failures P Q", "have \"\\<forall>n \\<in> {0<..length xs}.\n    (xs, \\<Union>W \\<in> R n. W) \\<in> seq_comp_failures P Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n\\<in>{0<..length xs}.\n       (xs, \\<Union>W\\<in>R n. W) \\<in> seq_comp_failures P Q", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       n \\<in> {0<..length xs} \\<Longrightarrow>\n       (xs, \\<Union>W\\<in>R n. W) \\<in> seq_comp_failures P Q", "fix n"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       n \\<in> {0<..length xs} \\<Longrightarrow>\n       (xs, \\<Union>W\\<in>R n. W) \\<in> seq_comp_failures P Q", "assume F: \"n \\<in> {0<..length xs}\""], ["proof (state)\nthis:\n  n \\<in> {0<..length xs}\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       n \\<in> {0<..length xs} \\<Longrightarrow>\n       (xs, \\<Union>W\\<in>R n. W) \\<in> seq_comp_failures P Q", "hence G: \"\\<forall>W \\<in> R n.\n      take (length xs - n) xs \\<in> sentences P \\<and>\n      (drop (length xs - n) xs, W) \\<in> failures Q\""], ["proof (prove)\nusing this:\n  n \\<in> {0<..length xs}\n\ngoal (1 subgoal):\n 1. \\<forall>W\\<in>R n.\n       take (length xs - n) xs \\<in> sentences P \\<and>\n       (drop (length xs - n) xs, W) \\<in> failures Q", "using D"], ["proof (prove)\nusing this:\n  n \\<in> {0<..length xs}\n  X = (\\<Union>n\\<le>length xs. \\<Union>W\\<in>R n. W) \\<and>\n  (\\<forall>W\\<in>R 0.\n      xs \\<notin> sentences P \\<and>\n      None \\<notin> set xs \\<and> (xs, W) \\<in> failures P \\<or>\n      xs \\<in> sentences P \\<and>\n      (\\<exists>U V.\n          (xs, U) \\<in> failures P \\<and>\n          ([], V) \\<in> failures Q \\<and>\n          W = insert None U \\<inter> V)) \\<and>\n  (\\<forall>n\\<in>{0<..length xs}.\n      \\<forall>W\\<in>R n.\n         take (length xs - n) xs \\<in> sentences P \\<and>\n         (drop (length xs - n) xs, W) \\<in> failures Q)\n\ngoal (1 subgoal):\n 1. \\<forall>W\\<in>R n.\n       take (length xs - n) xs \\<in> sentences P \\<and>\n       (drop (length xs - n) xs, W) \\<in> failures Q", "by simp"], ["proof (state)\nthis:\n  \\<forall>W\\<in>R n.\n     take (length xs - n) xs \\<in> sentences P \\<and>\n     (drop (length xs - n) xs, W) \\<in> failures Q\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       n \\<in> {0<..length xs} \\<Longrightarrow>\n       (xs, \\<Union>W\\<in>R n. W) \\<in> seq_comp_failures P Q", "show \"(xs, \\<Union>W \\<in> R n. W) \\<in> seq_comp_failures P Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (xs, \\<Union>W\\<in>R n. W) \\<in> seq_comp_failures P Q", "proof (cases \"\\<exists>W. W \\<in> R n\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>W. W \\<in> R n \\<Longrightarrow>\n    (xs, \\<Union>W\\<in>R n. W) \\<in> seq_comp_failures P Q\n 2. \\<nexists>W. W \\<in> R n \\<Longrightarrow>\n    (xs, \\<Union>W\\<in>R n. W) \\<in> seq_comp_failures P Q", "case False"], ["proof (state)\nthis:\n  \\<nexists>W. W \\<in> R n\n\ngoal (2 subgoals):\n 1. \\<exists>W. W \\<in> R n \\<Longrightarrow>\n    (xs, \\<Union>W\\<in>R n. W) \\<in> seq_comp_failures P Q\n 2. \\<nexists>W. W \\<in> R n \\<Longrightarrow>\n    (xs, \\<Union>W\\<in>R n. W) \\<in> seq_comp_failures P Q", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<nexists>W. W \\<in> R n\n\ngoal (1 subgoal):\n 1. (xs, \\<Union>W\\<in>R n. W) \\<in> seq_comp_failures P Q", "using E"], ["proof (prove)\nusing this:\n  \\<nexists>W. W \\<in> R n\n  (xs, {}) \\<in> seq_comp_failures P Q\n\ngoal (1 subgoal):\n 1. (xs, \\<Union>W\\<in>R n. W) \\<in> seq_comp_failures P Q", "by simp"], ["proof (state)\nthis:\n  (xs, \\<Union>W\\<in>R n. W) \\<in> seq_comp_failures P Q\n\ngoal (1 subgoal):\n 1. \\<exists>W. W \\<in> R n \\<Longrightarrow>\n    (xs, \\<Union>W\\<in>R n. W) \\<in> seq_comp_failures P Q", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>W. W \\<in> R n \\<Longrightarrow>\n    (xs, \\<Union>W\\<in>R n. W) \\<in> seq_comp_failures P Q", "case True"], ["proof (state)\nthis:\n  \\<exists>W. W \\<in> R n\n\ngoal (1 subgoal):\n 1. \\<exists>W. W \\<in> R n \\<Longrightarrow>\n    (xs, \\<Union>W\\<in>R n. W) \\<in> seq_comp_failures P Q", "have \"(take (length xs - n) xs @ drop (length xs - n) xs, \\<Union>W \\<in> R n. W)\n        \\<in> seq_comp_failures P Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (take (length xs - n) xs @ drop (length xs - n) xs,\n     \\<Union>W\\<in>R n. W)\n    \\<in> seq_comp_failures P Q", "proof (rule SCF_R3)"], ["proof (state)\ngoal (3 subgoals):\n 1. take (length xs - n) xs \\<in> sentences P\n 2. (drop (length xs - n) xs, \\<Union>W\\<in>R n. W) \\<in> failures Q\n 3. drop (length xs - n) xs \\<noteq> []", "obtain W where \"W \\<in> R n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>W. W \\<in> R n \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "using True"], ["proof (prove)\nusing this:\n  \\<exists>W. W \\<in> R n\n\ngoal (1 subgoal):\n 1. (\\<And>W. W \\<in> R n \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", ".."], ["proof (state)\nthis:\n  W \\<in> R n\n\ngoal (3 subgoals):\n 1. take (length xs - n) xs \\<in> sentences P\n 2. (drop (length xs - n) xs, \\<Union>W\\<in>R n. W) \\<in> failures Q\n 3. drop (length xs - n) xs \\<noteq> []", "thus \"take (length xs - n) xs \\<in> sentences P\""], ["proof (prove)\nusing this:\n  W \\<in> R n\n\ngoal (1 subgoal):\n 1. take (length xs - n) xs \\<in> sentences P", "using G"], ["proof (prove)\nusing this:\n  W \\<in> R n\n  \\<forall>W\\<in>R n.\n     take (length xs - n) xs \\<in> sentences P \\<and>\n     (drop (length xs - n) xs, W) \\<in> failures Q\n\ngoal (1 subgoal):\n 1. take (length xs - n) xs \\<in> sentences P", "by simp"], ["proof (state)\nthis:\n  take (length xs - n) xs \\<in> sentences P\n\ngoal (2 subgoals):\n 1. (drop (length xs - n) xs, \\<Union>W\\<in>R n. W) \\<in> failures Q\n 2. drop (length xs - n) xs \\<noteq> []", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. (drop (length xs - n) xs, \\<Union>W\\<in>R n. W) \\<in> failures Q\n 2. drop (length xs - n) xs \\<noteq> []", "have \"\\<forall>xs A. (\\<exists>W. W \\<in> A) \\<longrightarrow> (\\<forall>W \\<in> A. (xs, W) \\<in> failures Q) \\<longrightarrow>\n          (xs, \\<Union>W \\<in> A. W) \\<in> failures Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>xs A.\n       (\\<exists>W. W \\<in> A) \\<longrightarrow>\n       (\\<forall>W\\<in>A. (xs, W) \\<in> failures Q) \\<longrightarrow>\n       (xs, \\<Union>W\\<in>A. W) \\<in> failures Q", "using B"], ["proof (prove)\nusing this:\n  ref_union_closed Q\n\ngoal (1 subgoal):\n 1. \\<forall>xs A.\n       (\\<exists>W. W \\<in> A) \\<longrightarrow>\n       (\\<forall>W\\<in>A. (xs, W) \\<in> failures Q) \\<longrightarrow>\n       (xs, \\<Union>W\\<in>A. W) \\<in> failures Q", "by (simp add: ref_union_closed_def)"], ["proof (state)\nthis:\n  \\<forall>xs A.\n     (\\<exists>W. W \\<in> A) \\<longrightarrow>\n     (\\<forall>W\\<in>A. (xs, W) \\<in> failures Q) \\<longrightarrow>\n     (xs, \\<Union>W\\<in>A. W) \\<in> failures Q\n\ngoal (2 subgoals):\n 1. (drop (length xs - n) xs, \\<Union>W\\<in>R n. W) \\<in> failures Q\n 2. drop (length xs - n) xs \\<noteq> []", "hence \"(\\<exists>W. W \\<in> R n) \\<longrightarrow>\n          (\\<forall>W \\<in> R n. (drop (length xs - n) xs, W) \\<in> failures Q) \\<longrightarrow>\n          (drop (length xs - n) xs, \\<Union>W \\<in> R n. W) \\<in> failures Q\""], ["proof (prove)\nusing this:\n  \\<forall>xs A.\n     (\\<exists>W. W \\<in> A) \\<longrightarrow>\n     (\\<forall>W\\<in>A. (xs, W) \\<in> failures Q) \\<longrightarrow>\n     (xs, \\<Union>W\\<in>A. W) \\<in> failures Q\n\ngoal (1 subgoal):\n 1. (\\<exists>W. W \\<in> R n) \\<longrightarrow>\n    (\\<forall>W\\<in>R n.\n        (drop (length xs - n) xs, W) \\<in> failures Q) \\<longrightarrow>\n    (drop (length xs - n) xs, \\<Union>W\\<in>R n. W) \\<in> failures Q", "by blast"], ["proof (state)\nthis:\n  (\\<exists>W. W \\<in> R n) \\<longrightarrow>\n  (\\<forall>W\\<in>R n.\n      (drop (length xs - n) xs, W) \\<in> failures Q) \\<longrightarrow>\n  (drop (length xs - n) xs, \\<Union>W\\<in>R n. W) \\<in> failures Q\n\ngoal (2 subgoals):\n 1. (drop (length xs - n) xs, \\<Union>W\\<in>R n. W) \\<in> failures Q\n 2. drop (length xs - n) xs \\<noteq> []", "thus \"(drop (length xs - n) xs, \\<Union>W \\<in> R n. W) \\<in> failures Q\""], ["proof (prove)\nusing this:\n  (\\<exists>W. W \\<in> R n) \\<longrightarrow>\n  (\\<forall>W\\<in>R n.\n      (drop (length xs - n) xs, W) \\<in> failures Q) \\<longrightarrow>\n  (drop (length xs - n) xs, \\<Union>W\\<in>R n. W) \\<in> failures Q\n\ngoal (1 subgoal):\n 1. (drop (length xs - n) xs, \\<Union>W\\<in>R n. W) \\<in> failures Q", "using G and True"], ["proof (prove)\nusing this:\n  (\\<exists>W. W \\<in> R n) \\<longrightarrow>\n  (\\<forall>W\\<in>R n.\n      (drop (length xs - n) xs, W) \\<in> failures Q) \\<longrightarrow>\n  (drop (length xs - n) xs, \\<Union>W\\<in>R n. W) \\<in> failures Q\n  \\<forall>W\\<in>R n.\n     take (length xs - n) xs \\<in> sentences P \\<and>\n     (drop (length xs - n) xs, W) \\<in> failures Q\n  \\<exists>W. W \\<in> R n\n\ngoal (1 subgoal):\n 1. (drop (length xs - n) xs, \\<Union>W\\<in>R n. W) \\<in> failures Q", "by simp"], ["proof (state)\nthis:\n  (drop (length xs - n) xs, \\<Union>W\\<in>R n. W) \\<in> failures Q\n\ngoal (1 subgoal):\n 1. drop (length xs - n) xs \\<noteq> []", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. drop (length xs - n) xs \\<noteq> []", "show \"drop (length xs - n) xs \\<noteq> []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. drop (length xs - n) xs \\<noteq> []", "using F"], ["proof (prove)\nusing this:\n  n \\<in> {0<..length xs}\n\ngoal (1 subgoal):\n 1. drop (length xs - n) xs \\<noteq> []", "by (simp, arith)"], ["proof (state)\nthis:\n  drop (length xs - n) xs \\<noteq> []\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (take (length xs - n) xs @ drop (length xs - n) xs, \\<Union>W\\<in>R n. W)\n  \\<in> seq_comp_failures P Q\n\ngoal (1 subgoal):\n 1. \\<exists>W. W \\<in> R n \\<Longrightarrow>\n    (xs, \\<Union>W\\<in>R n. W) \\<in> seq_comp_failures P Q", "thus ?thesis"], ["proof (prove)\nusing this:\n  (take (length xs - n) xs @ drop (length xs - n) xs, \\<Union>W\\<in>R n. W)\n  \\<in> seq_comp_failures P Q\n\ngoal (1 subgoal):\n 1. (xs, \\<Union>W\\<in>R n. W) \\<in> seq_comp_failures P Q", "by simp"], ["proof (state)\nthis:\n  (xs, \\<Union>W\\<in>R n. W) \\<in> seq_comp_failures P Q\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (xs, \\<Union>W\\<in>R n. W) \\<in> seq_comp_failures P Q\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>n\\<in>{0<..length xs}.\n     (xs, \\<Union>W\\<in>R n. W) \\<in> seq_comp_failures P Q\n\ngoal (1 subgoal):\n 1. (xs, X) \\<in> seq_comp_failures P Q", "ultimately"], ["proof (chain)\npicking this:\n  (xs, \\<Union>W\\<in>R 0. W) \\<in> seq_comp_failures P Q\n  \\<forall>n\\<in>{0<..length xs}.\n     (xs, \\<Union>W\\<in>R n. W) \\<in> seq_comp_failures P Q", "have F: \"\\<forall>n \\<in> {..length xs}.\n    (xs, \\<Union>W \\<in> R n. W) \\<in> seq_comp_failures P Q\""], ["proof (prove)\nusing this:\n  (xs, \\<Union>W\\<in>R 0. W) \\<in> seq_comp_failures P Q\n  \\<forall>n\\<in>{0<..length xs}.\n     (xs, \\<Union>W\\<in>R n. W) \\<in> seq_comp_failures P Q\n\ngoal (1 subgoal):\n 1. \\<forall>n\\<in>{..length xs}.\n       (xs, \\<Union>W\\<in>R n. W) \\<in> seq_comp_failures P Q", "by auto"], ["proof (state)\nthis:\n  \\<forall>n\\<in>{..length xs}.\n     (xs, \\<Union>W\\<in>R n. W) \\<in> seq_comp_failures P Q\n\ngoal (1 subgoal):\n 1. (xs, X) \\<in> seq_comp_failures P Q", "have \"(xs, \\<Union>n \\<in> {..length xs}. \\<Union>W \\<in> R n. W) \\<in> seq_comp_failures P Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (xs, \\<Union>n\\<le>length xs. \\<Union>W\\<in>R n. W)\n    \\<in> seq_comp_failures P Q", "proof (rule seq_comp_refusals_finite [OF C], simp)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {..length xs} \\<Longrightarrow>\n       (xs, \\<Union>W\\<in>R x. W) \\<in> seq_comp_failures P Q", "fix n"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {..length xs} \\<Longrightarrow>\n       (xs, \\<Union>W\\<in>R x. W) \\<in> seq_comp_failures P Q", "assume \"n \\<in> {..length xs}\""], ["proof (state)\nthis:\n  n \\<in> {..length xs}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {..length xs} \\<Longrightarrow>\n       (xs, \\<Union>W\\<in>R x. W) \\<in> seq_comp_failures P Q", "with F"], ["proof (chain)\npicking this:\n  \\<forall>n\\<in>{..length xs}.\n     (xs, \\<Union>W\\<in>R n. W) \\<in> seq_comp_failures P Q\n  n \\<in> {..length xs}", "show \"(xs, \\<Union>W \\<in> R n. W) \\<in> seq_comp_failures P Q\""], ["proof (prove)\nusing this:\n  \\<forall>n\\<in>{..length xs}.\n     (xs, \\<Union>W\\<in>R n. W) \\<in> seq_comp_failures P Q\n  n \\<in> {..length xs}\n\ngoal (1 subgoal):\n 1. (xs, \\<Union>W\\<in>R n. W) \\<in> seq_comp_failures P Q", ".."], ["proof (state)\nthis:\n  (xs, \\<Union>W\\<in>R n. W) \\<in> seq_comp_failures P Q\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (xs, \\<Union>n\\<le>length xs. \\<Union>W\\<in>R n. W)\n  \\<in> seq_comp_failures P Q\n\ngoal (1 subgoal):\n 1. (xs, X) \\<in> seq_comp_failures P Q", "moreover"], ["proof (state)\nthis:\n  (xs, \\<Union>n\\<le>length xs. \\<Union>W\\<in>R n. W)\n  \\<in> seq_comp_failures P Q\n\ngoal (1 subgoal):\n 1. (xs, X) \\<in> seq_comp_failures P Q", "have \"X = (\\<Union>n \\<in> {..length xs}. \\<Union>W \\<in> R n. W)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X = (\\<Union>n\\<le>length xs. \\<Union>W\\<in>R n. W)", "using D"], ["proof (prove)\nusing this:\n  X = (\\<Union>n\\<le>length xs. \\<Union>W\\<in>R n. W) \\<and>\n  (\\<forall>W\\<in>R 0.\n      xs \\<notin> sentences P \\<and>\n      None \\<notin> set xs \\<and> (xs, W) \\<in> failures P \\<or>\n      xs \\<in> sentences P \\<and>\n      (\\<exists>U V.\n          (xs, U) \\<in> failures P \\<and>\n          ([], V) \\<in> failures Q \\<and>\n          W = insert None U \\<inter> V)) \\<and>\n  (\\<forall>n\\<in>{0<..length xs}.\n      \\<forall>W\\<in>R n.\n         take (length xs - n) xs \\<in> sentences P \\<and>\n         (drop (length xs - n) xs, W) \\<in> failures Q)\n\ngoal (1 subgoal):\n 1. X = (\\<Union>n\\<le>length xs. \\<Union>W\\<in>R n. W)", "by simp"], ["proof (state)\nthis:\n  X = (\\<Union>n\\<le>length xs. \\<Union>W\\<in>R n. W)\n\ngoal (1 subgoal):\n 1. (xs, X) \\<in> seq_comp_failures P Q", "ultimately"], ["proof (chain)\npicking this:\n  (xs, \\<Union>n\\<le>length xs. \\<Union>W\\<in>R n. W)\n  \\<in> seq_comp_failures P Q\n  X = (\\<Union>n\\<le>length xs. \\<Union>W\\<in>R n. W)", "show ?thesis"], ["proof (prove)\nusing this:\n  (xs, \\<Union>n\\<le>length xs. \\<Union>W\\<in>R n. W)\n  \\<in> seq_comp_failures P Q\n  X = (\\<Union>n\\<le>length xs. \\<Union>W\\<in>R n. W)\n\ngoal (1 subgoal):\n 1. (xs, X) \\<in> seq_comp_failures P Q", "by simp"], ["proof (state)\nthis:\n  (xs, X) \\<in> seq_comp_failures P Q\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>\n\\null\n\nIn what follows, the previous results are used to prove that refusals union closure, weak\nsequentiality, and sequentiality are conserved under sequential composition. The proof of the first\nof these lemmas makes use of the axiom of choice.\n\nSince the target security conservation theorem, in addition to the security of both of the processes\nto be composed, also requires to assume that the first process be refusals union closed and\nsequential (cf. below), these further conservation lemmas will permit to generalize the theorem to\nthe sequential composition of an arbitrary list of processes.\n\n\\null\n\\<close>"], ["", "lemma seq_comp_ref_union_closed:\n  assumes\n    WS: \"weakly_sequential P\" and\n    A: \"ref_union_closed P\" and\n    B: \"ref_union_closed Q\"\n  shows \"ref_union_closed (P ; Q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ref_union_closed (P ; Q)", "proof (simp only: ref_union_closed_def seq_comp_failures [OF WS],\n (rule allI)+, (rule impI)+, erule exE)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xs A X.\n       \\<lbrakk>\\<forall>X\\<in>A. (xs, X) \\<in> seq_comp_failures P Q;\n        X \\<in> A\\<rbrakk>\n       \\<Longrightarrow> (xs, \\<Union>X\\<in>A. X)\n                         \\<in> seq_comp_failures P Q", "fix xs A X'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xs A X.\n       \\<lbrakk>\\<forall>X\\<in>A. (xs, X) \\<in> seq_comp_failures P Q;\n        X \\<in> A\\<rbrakk>\n       \\<Longrightarrow> (xs, \\<Union>X\\<in>A. X)\n                         \\<in> seq_comp_failures P Q", "assume\n    C: \"\\<forall>X \\<in> A. (xs, X) \\<in> seq_comp_failures P Q\" and\n    D: \"X' \\<in> A\""], ["proof (state)\nthis:\n  \\<forall>X\\<in>A. (xs, X) \\<in> seq_comp_failures P Q\n  X' \\<in> A\n\ngoal (1 subgoal):\n 1. \\<And>xs A X.\n       \\<lbrakk>\\<forall>X\\<in>A. (xs, X) \\<in> seq_comp_failures P Q;\n        X \\<in> A\\<rbrakk>\n       \\<Longrightarrow> (xs, \\<Union>X\\<in>A. X)\n                         \\<in> seq_comp_failures P Q", "have \"\\<forall>X \\<in> A. \\<exists>R.\n    X = (\\<Union>n \\<in> {..length xs}. \\<Union>W \\<in> R n. W) \\<and>\n    (\\<forall>W \\<in> R 0.\n      xs \\<notin> sentences P \\<and> None \\<notin> set xs \\<and> (xs, W) \\<in> failures P \\<or>\n      xs \\<in> sentences P \\<and> (\\<exists>U V. (xs, U) \\<in> failures P \\<and> ([], V) \\<in> failures Q \\<and>\n        W = insert None U \\<inter> V)) \\<and>\n    (\\<forall>n \\<in> {0<..length xs}. \\<forall>W \\<in> R n.\n      take (length xs - n) xs \\<in> sentences P \\<and>\n      (drop (length xs - n) xs, W) \\<in> failures Q)\"\n    (is \"\\<forall>X \\<in> A. \\<exists>R. ?T R X\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>X\\<in>A.\n       \\<exists>R.\n          X = (\\<Union>n\\<le>length xs. \\<Union>W\\<in>R n. W) \\<and>\n          (\\<forall>W\\<in>R 0.\n              xs \\<notin> sentences P \\<and>\n              None \\<notin> set xs \\<and> (xs, W) \\<in> failures P \\<or>\n              xs \\<in> sentences P \\<and>\n              (\\<exists>U V.\n                  (xs, U) \\<in> failures P \\<and>\n                  ([], V) \\<in> failures Q \\<and>\n                  W = insert None U \\<inter> V)) \\<and>\n          (\\<forall>n\\<in>{0<..length xs}.\n              \\<forall>W\\<in>R n.\n                 take (length xs - n) xs \\<in> sentences P \\<and>\n                 (drop (length xs - n) xs, W) \\<in> failures Q)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>X.\n       X \\<in> A \\<Longrightarrow>\n       \\<exists>R.\n          X = (\\<Union>n\\<le>length xs. \\<Union>W\\<in>R n. W) \\<and>\n          (\\<forall>W\\<in>R 0.\n              xs \\<notin> sentences P \\<and>\n              None \\<notin> set xs \\<and> (xs, W) \\<in> failures P \\<or>\n              xs \\<in> sentences P \\<and>\n              (\\<exists>U V.\n                  (xs, U) \\<in> failures P \\<and>\n                  ([], V) \\<in> failures Q \\<and>\n                  W = insert None U \\<inter> V)) \\<and>\n          (\\<forall>n\\<in>{0<..length xs}.\n              \\<forall>W\\<in>R n.\n                 take (length xs - n) xs \\<in> sentences P \\<and>\n                 (drop (length xs - n) xs, W) \\<in> failures Q)", "fix X"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>X.\n       X \\<in> A \\<Longrightarrow>\n       \\<exists>R.\n          X = (\\<Union>n\\<le>length xs. \\<Union>W\\<in>R n. W) \\<and>\n          (\\<forall>W\\<in>R 0.\n              xs \\<notin> sentences P \\<and>\n              None \\<notin> set xs \\<and> (xs, W) \\<in> failures P \\<or>\n              xs \\<in> sentences P \\<and>\n              (\\<exists>U V.\n                  (xs, U) \\<in> failures P \\<and>\n                  ([], V) \\<in> failures Q \\<and>\n                  W = insert None U \\<inter> V)) \\<and>\n          (\\<forall>n\\<in>{0<..length xs}.\n              \\<forall>W\\<in>R n.\n                 take (length xs - n) xs \\<in> sentences P \\<and>\n                 (drop (length xs - n) xs, W) \\<in> failures Q)", "assume \"X \\<in> A\""], ["proof (state)\nthis:\n  X \\<in> A\n\ngoal (1 subgoal):\n 1. \\<And>X.\n       X \\<in> A \\<Longrightarrow>\n       \\<exists>R.\n          X = (\\<Union>n\\<le>length xs. \\<Union>W\\<in>R n. W) \\<and>\n          (\\<forall>W\\<in>R 0.\n              xs \\<notin> sentences P \\<and>\n              None \\<notin> set xs \\<and> (xs, W) \\<in> failures P \\<or>\n              xs \\<in> sentences P \\<and>\n              (\\<exists>U V.\n                  (xs, U) \\<in> failures P \\<and>\n                  ([], V) \\<in> failures Q \\<and>\n                  W = insert None U \\<inter> V)) \\<and>\n          (\\<forall>n\\<in>{0<..length xs}.\n              \\<forall>W\\<in>R n.\n                 take (length xs - n) xs \\<in> sentences P \\<and>\n                 (drop (length xs - n) xs, W) \\<in> failures Q)", "with C"], ["proof (chain)\npicking this:\n  \\<forall>X\\<in>A. (xs, X) \\<in> seq_comp_failures P Q\n  X \\<in> A", "have \"(xs, X) \\<in> seq_comp_failures P Q\""], ["proof (prove)\nusing this:\n  \\<forall>X\\<in>A. (xs, X) \\<in> seq_comp_failures P Q\n  X \\<in> A\n\ngoal (1 subgoal):\n 1. (xs, X) \\<in> seq_comp_failures P Q", ".."], ["proof (state)\nthis:\n  (xs, X) \\<in> seq_comp_failures P Q\n\ngoal (1 subgoal):\n 1. \\<And>X.\n       X \\<in> A \\<Longrightarrow>\n       \\<exists>R.\n          X = (\\<Union>n\\<le>length xs. \\<Union>W\\<in>R n. W) \\<and>\n          (\\<forall>W\\<in>R 0.\n              xs \\<notin> sentences P \\<and>\n              None \\<notin> set xs \\<and> (xs, W) \\<in> failures P \\<or>\n              xs \\<in> sentences P \\<and>\n              (\\<exists>U V.\n                  (xs, U) \\<in> failures P \\<and>\n                  ([], V) \\<in> failures Q \\<and>\n                  W = insert None U \\<inter> V)) \\<and>\n          (\\<forall>n\\<in>{0<..length xs}.\n              \\<forall>W\\<in>R n.\n                 take (length xs - n) xs \\<in> sentences P \\<and>\n                 (drop (length xs - n) xs, W) \\<in> failures Q)", "hence \"\\<exists>R. X = (\\<Union>n \\<in> {..length xs}. \\<Union>W \\<in> R n. W) \\<and>\n      (\\<forall>W \\<in> R 0.\n        xs \\<notin> sentences P \\<and> None \\<notin> set xs \\<and> (xs, W) \\<in> failures P \\<or>\n        xs \\<in> sentences P \\<and> (\\<exists>U V. (xs, U) \\<in> failures P \\<and> ([], V) \\<in> failures Q \\<and>\n          W = insert None U \\<inter> V)) \\<and>\n      (\\<forall>n \\<in> {0<..length xs}. \\<forall>W \\<in> R n.\n        take (length xs - n) xs \\<in> sentences P \\<and>\n        (drop (length xs - n) xs, W) \\<in> failures Q) \\<and>\n      (\\<exists>n \\<in> {..length xs}. \\<exists>W. W \\<in> R n)\""], ["proof (prove)\nusing this:\n  (xs, X) \\<in> seq_comp_failures P Q\n\ngoal (1 subgoal):\n 1. \\<exists>R.\n       X = (\\<Union>n\\<le>length xs. \\<Union>W\\<in>R n. W) \\<and>\n       (\\<forall>W\\<in>R 0.\n           xs \\<notin> sentences P \\<and>\n           None \\<notin> set xs \\<and> (xs, W) \\<in> failures P \\<or>\n           xs \\<in> sentences P \\<and>\n           (\\<exists>U V.\n               (xs, U) \\<in> failures P \\<and>\n               ([], V) \\<in> failures Q \\<and>\n               W = insert None U \\<inter> V)) \\<and>\n       (\\<forall>n\\<in>{0<..length xs}.\n           \\<forall>W\\<in>R n.\n              take (length xs - n) xs \\<in> sentences P \\<and>\n              (drop (length xs - n) xs, W) \\<in> failures Q) \\<and>\n       (\\<exists>n\\<in>{..length xs}. \\<exists>W. W \\<in> R n)", "by (rule seq_comp_refusals_1)"], ["proof (state)\nthis:\n  \\<exists>R.\n     X = (\\<Union>n\\<le>length xs. \\<Union>W\\<in>R n. W) \\<and>\n     (\\<forall>W\\<in>R 0.\n         xs \\<notin> sentences P \\<and>\n         None \\<notin> set xs \\<and> (xs, W) \\<in> failures P \\<or>\n         xs \\<in> sentences P \\<and>\n         (\\<exists>U V.\n             (xs, U) \\<in> failures P \\<and>\n             ([], V) \\<in> failures Q \\<and>\n             W = insert None U \\<inter> V)) \\<and>\n     (\\<forall>n\\<in>{0<..length xs}.\n         \\<forall>W\\<in>R n.\n            take (length xs - n) xs \\<in> sentences P \\<and>\n            (drop (length xs - n) xs, W) \\<in> failures Q) \\<and>\n     (\\<exists>n\\<in>{..length xs}. \\<exists>W. W \\<in> R n)\n\ngoal (1 subgoal):\n 1. \\<And>X.\n       X \\<in> A \\<Longrightarrow>\n       \\<exists>R.\n          X = (\\<Union>n\\<le>length xs. \\<Union>W\\<in>R n. W) \\<and>\n          (\\<forall>W\\<in>R 0.\n              xs \\<notin> sentences P \\<and>\n              None \\<notin> set xs \\<and> (xs, W) \\<in> failures P \\<or>\n              xs \\<in> sentences P \\<and>\n              (\\<exists>U V.\n                  (xs, U) \\<in> failures P \\<and>\n                  ([], V) \\<in> failures Q \\<and>\n                  W = insert None U \\<inter> V)) \\<and>\n          (\\<forall>n\\<in>{0<..length xs}.\n              \\<forall>W\\<in>R n.\n                 take (length xs - n) xs \\<in> sentences P \\<and>\n                 (drop (length xs - n) xs, W) \\<in> failures Q)", "thus \"\\<exists>R. ?T R X\""], ["proof (prove)\nusing this:\n  \\<exists>R.\n     X = (\\<Union>n\\<le>length xs. \\<Union>W\\<in>R n. W) \\<and>\n     (\\<forall>W\\<in>R 0.\n         xs \\<notin> sentences P \\<and>\n         None \\<notin> set xs \\<and> (xs, W) \\<in> failures P \\<or>\n         xs \\<in> sentences P \\<and>\n         (\\<exists>U V.\n             (xs, U) \\<in> failures P \\<and>\n             ([], V) \\<in> failures Q \\<and>\n             W = insert None U \\<inter> V)) \\<and>\n     (\\<forall>n\\<in>{0<..length xs}.\n         \\<forall>W\\<in>R n.\n            take (length xs - n) xs \\<in> sentences P \\<and>\n            (drop (length xs - n) xs, W) \\<in> failures Q) \\<and>\n     (\\<exists>n\\<in>{..length xs}. \\<exists>W. W \\<in> R n)\n\ngoal (1 subgoal):\n 1. \\<exists>R.\n       X = (\\<Union>n\\<le>length xs. \\<Union>W\\<in>R n. W) \\<and>\n       (\\<forall>W\\<in>R 0.\n           xs \\<notin> sentences P \\<and>\n           None \\<notin> set xs \\<and> (xs, W) \\<in> failures P \\<or>\n           xs \\<in> sentences P \\<and>\n           (\\<exists>U V.\n               (xs, U) \\<in> failures P \\<and>\n               ([], V) \\<in> failures Q \\<and>\n               W = insert None U \\<inter> V)) \\<and>\n       (\\<forall>n\\<in>{0<..length xs}.\n           \\<forall>W\\<in>R n.\n              take (length xs - n) xs \\<in> sentences P \\<and>\n              (drop (length xs - n) xs, W) \\<in> failures Q)", "by blast"], ["proof (state)\nthis:\n  \\<exists>R.\n     X = (\\<Union>n\\<le>length xs. \\<Union>W\\<in>R n. W) \\<and>\n     (\\<forall>W\\<in>R 0.\n         xs \\<notin> sentences P \\<and>\n         None \\<notin> set xs \\<and> (xs, W) \\<in> failures P \\<or>\n         xs \\<in> sentences P \\<and>\n         (\\<exists>U V.\n             (xs, U) \\<in> failures P \\<and>\n             ([], V) \\<in> failures Q \\<and>\n             W = insert None U \\<inter> V)) \\<and>\n     (\\<forall>n\\<in>{0<..length xs}.\n         \\<forall>W\\<in>R n.\n            take (length xs - n) xs \\<in> sentences P \\<and>\n            (drop (length xs - n) xs, W) \\<in> failures Q)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>X\\<in>A.\n     \\<exists>R.\n        X = (\\<Union>n\\<le>length xs. \\<Union>W\\<in>R n. W) \\<and>\n        (\\<forall>W\\<in>R 0.\n            xs \\<notin> sentences P \\<and>\n            None \\<notin> set xs \\<and> (xs, W) \\<in> failures P \\<or>\n            xs \\<in> sentences P \\<and>\n            (\\<exists>U V.\n                (xs, U) \\<in> failures P \\<and>\n                ([], V) \\<in> failures Q \\<and>\n                W = insert None U \\<inter> V)) \\<and>\n        (\\<forall>n\\<in>{0<..length xs}.\n            \\<forall>W\\<in>R n.\n               take (length xs - n) xs \\<in> sentences P \\<and>\n               (drop (length xs - n) xs, W) \\<in> failures Q)\n\ngoal (1 subgoal):\n 1. \\<And>xs A X.\n       \\<lbrakk>\\<forall>X\\<in>A. (xs, X) \\<in> seq_comp_failures P Q;\n        X \\<in> A\\<rbrakk>\n       \\<Longrightarrow> (xs, \\<Union>X\\<in>A. X)\n                         \\<in> seq_comp_failures P Q", "hence \"\\<exists>R. \\<forall>X \\<in> A. ?T (R X) X\""], ["proof (prove)\nusing this:\n  \\<forall>X\\<in>A.\n     \\<exists>R.\n        X = (\\<Union>n\\<le>length xs. \\<Union>W\\<in>R n. W) \\<and>\n        (\\<forall>W\\<in>R 0.\n            xs \\<notin> sentences P \\<and>\n            None \\<notin> set xs \\<and> (xs, W) \\<in> failures P \\<or>\n            xs \\<in> sentences P \\<and>\n            (\\<exists>U V.\n                (xs, U) \\<in> failures P \\<and>\n                ([], V) \\<in> failures Q \\<and>\n                W = insert None U \\<inter> V)) \\<and>\n        (\\<forall>n\\<in>{0<..length xs}.\n            \\<forall>W\\<in>R n.\n               take (length xs - n) xs \\<in> sentences P \\<and>\n               (drop (length xs - n) xs, W) \\<in> failures Q)\n\ngoal (1 subgoal):\n 1. \\<exists>R.\n       \\<forall>X\\<in>A.\n          X = (\\<Union>n\\<le>length xs. \\<Union>W\\<in>R X n. W) \\<and>\n          (\\<forall>W\\<in>R X 0.\n              xs \\<notin> sentences P \\<and>\n              None \\<notin> set xs \\<and> (xs, W) \\<in> failures P \\<or>\n              xs \\<in> sentences P \\<and>\n              (\\<exists>U V.\n                  (xs, U) \\<in> failures P \\<and>\n                  ([], V) \\<in> failures Q \\<and>\n                  W = insert None U \\<inter> V)) \\<and>\n          (\\<forall>n\\<in>{0<..length xs}.\n              \\<forall>W\\<in>R X n.\n                 take (length xs - n) xs \\<in> sentences P \\<and>\n                 (drop (length xs - n) xs, W) \\<in> failures Q)", "by (rule bchoice)"], ["proof (state)\nthis:\n  \\<exists>R.\n     \\<forall>X\\<in>A.\n        X = (\\<Union>n\\<le>length xs. \\<Union>W\\<in>R X n. W) \\<and>\n        (\\<forall>W\\<in>R X 0.\n            xs \\<notin> sentences P \\<and>\n            None \\<notin> set xs \\<and> (xs, W) \\<in> failures P \\<or>\n            xs \\<in> sentences P \\<and>\n            (\\<exists>U V.\n                (xs, U) \\<in> failures P \\<and>\n                ([], V) \\<in> failures Q \\<and>\n                W = insert None U \\<inter> V)) \\<and>\n        (\\<forall>n\\<in>{0<..length xs}.\n            \\<forall>W\\<in>R X n.\n               take (length xs - n) xs \\<in> sentences P \\<and>\n               (drop (length xs - n) xs, W) \\<in> failures Q)\n\ngoal (1 subgoal):\n 1. \\<And>xs A X.\n       \\<lbrakk>\\<forall>X\\<in>A. (xs, X) \\<in> seq_comp_failures P Q;\n        X \\<in> A\\<rbrakk>\n       \\<Longrightarrow> (xs, \\<Union>X\\<in>A. X)\n                         \\<in> seq_comp_failures P Q", "then"], ["proof (chain)\npicking this:\n  \\<exists>R.\n     \\<forall>X\\<in>A.\n        X = (\\<Union>n\\<le>length xs. \\<Union>W\\<in>R X n. W) \\<and>\n        (\\<forall>W\\<in>R X 0.\n            xs \\<notin> sentences P \\<and>\n            None \\<notin> set xs \\<and> (xs, W) \\<in> failures P \\<or>\n            xs \\<in> sentences P \\<and>\n            (\\<exists>U V.\n                (xs, U) \\<in> failures P \\<and>\n                ([], V) \\<in> failures Q \\<and>\n                W = insert None U \\<inter> V)) \\<and>\n        (\\<forall>n\\<in>{0<..length xs}.\n            \\<forall>W\\<in>R X n.\n               take (length xs - n) xs \\<in> sentences P \\<and>\n               (drop (length xs - n) xs, W) \\<in> failures Q)", "obtain R where E: \"\\<forall>X \\<in> A. ?T (R X) X\""], ["proof (prove)\nusing this:\n  \\<exists>R.\n     \\<forall>X\\<in>A.\n        X = (\\<Union>n\\<le>length xs. \\<Union>W\\<in>R X n. W) \\<and>\n        (\\<forall>W\\<in>R X 0.\n            xs \\<notin> sentences P \\<and>\n            None \\<notin> set xs \\<and> (xs, W) \\<in> failures P \\<or>\n            xs \\<in> sentences P \\<and>\n            (\\<exists>U V.\n                (xs, U) \\<in> failures P \\<and>\n                ([], V) \\<in> failures Q \\<and>\n                W = insert None U \\<inter> V)) \\<and>\n        (\\<forall>n\\<in>{0<..length xs}.\n            \\<forall>W\\<in>R X n.\n               take (length xs - n) xs \\<in> sentences P \\<and>\n               (drop (length xs - n) xs, W) \\<in> failures Q)\n\ngoal (1 subgoal):\n 1. (\\<And>R.\n        \\<forall>X\\<in>A.\n           X = (\\<Union>n\\<le>length xs. \\<Union>W\\<in>R X n. W) \\<and>\n           (\\<forall>W\\<in>R X 0.\n               xs \\<notin> sentences P \\<and>\n               None \\<notin> set xs \\<and> (xs, W) \\<in> failures P \\<or>\n               xs \\<in> sentences P \\<and>\n               (\\<exists>U V.\n                   (xs, U) \\<in> failures P \\<and>\n                   ([], V) \\<in> failures Q \\<and>\n                   W = insert None U \\<inter> V)) \\<and>\n           (\\<forall>n\\<in>{0<..length xs}.\n               \\<forall>W\\<in>R X n.\n                  take (length xs - n) xs \\<in> sentences P \\<and>\n                  (drop (length xs - n) xs, W)\n                  \\<in> failures Q) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  \\<forall>X\\<in>A.\n     X = (\\<Union>n\\<le>length xs. \\<Union>W\\<in>R X n. W) \\<and>\n     (\\<forall>W\\<in>R X 0.\n         xs \\<notin> sentences P \\<and>\n         None \\<notin> set xs \\<and> (xs, W) \\<in> failures P \\<or>\n         xs \\<in> sentences P \\<and>\n         (\\<exists>U V.\n             (xs, U) \\<in> failures P \\<and>\n             ([], V) \\<in> failures Q \\<and>\n             W = insert None U \\<inter> V)) \\<and>\n     (\\<forall>n\\<in>{0<..length xs}.\n         \\<forall>W\\<in>R X n.\n            take (length xs - n) xs \\<in> sentences P \\<and>\n            (drop (length xs - n) xs, W) \\<in> failures Q)\n\ngoal (1 subgoal):\n 1. \\<And>xs A X.\n       \\<lbrakk>\\<forall>X\\<in>A. (xs, X) \\<in> seq_comp_failures P Q;\n        X \\<in> A\\<rbrakk>\n       \\<Longrightarrow> (xs, \\<Union>X\\<in>A. X)\n                         \\<in> seq_comp_failures P Q", "have \"xs \\<in> Domain (seq_comp_failures P Q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<in> Domain (seq_comp_failures P Q)", "proof (simp add: Domain_iff)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>y. (xs, y) \\<in> seq_comp_failures P Q", "have \"(xs, X') \\<in> seq_comp_failures P Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (xs, X') \\<in> seq_comp_failures P Q", "using C and D"], ["proof (prove)\nusing this:\n  \\<forall>X\\<in>A. (xs, X) \\<in> seq_comp_failures P Q\n  X' \\<in> A\n\ngoal (1 subgoal):\n 1. (xs, X') \\<in> seq_comp_failures P Q", ".."], ["proof (state)\nthis:\n  (xs, X') \\<in> seq_comp_failures P Q\n\ngoal (1 subgoal):\n 1. \\<exists>y. (xs, y) \\<in> seq_comp_failures P Q", "thus \"\\<exists>X. (xs, X) \\<in> seq_comp_failures P Q\""], ["proof (prove)\nusing this:\n  (xs, X') \\<in> seq_comp_failures P Q\n\ngoal (1 subgoal):\n 1. \\<exists>X. (xs, X) \\<in> seq_comp_failures P Q", ".."], ["proof (state)\nthis:\n  \\<exists>X. (xs, X) \\<in> seq_comp_failures P Q\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  xs \\<in> Domain (seq_comp_failures P Q)\n\ngoal (1 subgoal):\n 1. \\<And>xs A X.\n       \\<lbrakk>\\<forall>X\\<in>A. (xs, X) \\<in> seq_comp_failures P Q;\n        X \\<in> A\\<rbrakk>\n       \\<Longrightarrow> (xs, \\<Union>X\\<in>A. X)\n                         \\<in> seq_comp_failures P Q", "moreover"], ["proof (state)\nthis:\n  xs \\<in> Domain (seq_comp_failures P Q)\n\ngoal (1 subgoal):\n 1. \\<And>xs A X.\n       \\<lbrakk>\\<forall>X\\<in>A. (xs, X) \\<in> seq_comp_failures P Q;\n        X \\<in> A\\<rbrakk>\n       \\<Longrightarrow> (xs, \\<Union>X\\<in>A. X)\n                         \\<in> seq_comp_failures P Q", "have \"?T (\\<lambda>n. \\<Union>X \\<in> A. R X n) (\\<Union>X \\<in> A. X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Union>X\\<in>A. X) =\n    (\\<Union>n\\<le>length xs.\n        \\<Union>W\\<in>\\<Union>X\\<in>A. R X n. W) \\<and>\n    (\\<forall>W\\<in>\\<Union>X\\<in>A. R X 0.\n        xs \\<notin> sentences P \\<and>\n        None \\<notin> set xs \\<and> (xs, W) \\<in> failures P \\<or>\n        xs \\<in> sentences P \\<and>\n        (\\<exists>U V.\n            (xs, U) \\<in> failures P \\<and>\n            ([], V) \\<in> failures Q \\<and>\n            W = insert None U \\<inter> V)) \\<and>\n    (\\<forall>n\\<in>{0<..length xs}.\n        \\<forall>W\\<in>\\<Union>X\\<in>A. R X n.\n           take (length xs - n) xs \\<in> sentences P \\<and>\n           (drop (length xs - n) xs, W) \\<in> failures Q)", "proof (rule conjI, rule_tac [2] conjI)"], ["proof (state)\ngoal (3 subgoals):\n 1. (\\<Union>X\\<in>A. X) =\n    (\\<Union>n\\<le>length xs. \\<Union>W\\<in>\\<Union>X\\<in>A. R X n. W)\n 2. \\<forall>W\\<in>\\<Union>X\\<in>A. R X 0.\n       xs \\<notin> sentences P \\<and>\n       None \\<notin> set xs \\<and> (xs, W) \\<in> failures P \\<or>\n       xs \\<in> sentences P \\<and>\n       (\\<exists>U V.\n           (xs, U) \\<in> failures P \\<and>\n           ([], V) \\<in> failures Q \\<and> W = insert None U \\<inter> V)\n 3. \\<forall>n\\<in>{0<..length xs}.\n       \\<forall>W\\<in>\\<Union>X\\<in>A. R X n.\n          take (length xs - n) xs \\<in> sentences P \\<and>\n          (drop (length xs - n) xs, W) \\<in> failures Q", "show \"(\\<Union>X \\<in> A. X) = (\\<Union>n \\<in> {..length xs}. \\<Union>W \\<in> \\<Union>X \\<in> A. R X n. W)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Union>X\\<in>A. X) =\n    (\\<Union>n\\<le>length xs. \\<Union>W\\<in>\\<Union>X\\<in>A. R X n. W)", "proof (rule equalityI, rule_tac [!] subsetI, simp_all,\n     erule bexE, (erule_tac [2] bexE)+)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x X.\n       \\<lbrakk>X \\<in> A; x \\<in> X\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa\\<in>{..length xs}.\n                            \\<exists>y\\<in>A.\n                               \\<exists>xa\\<in>R y xa. x \\<in> xa\n 2. \\<And>x xa y xb.\n       \\<lbrakk>xa \\<in> {..length xs}; y \\<in> A; xb \\<in> R y xa;\n        x \\<in> xb\\<rbrakk>\n       \\<Longrightarrow> \\<exists>X\\<in>A. x \\<in> X", "fix x X"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x X.\n       \\<lbrakk>X \\<in> A; x \\<in> X\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa\\<in>{..length xs}.\n                            \\<exists>y\\<in>A.\n                               \\<exists>xa\\<in>R y xa. x \\<in> xa\n 2. \\<And>x xa y xb.\n       \\<lbrakk>xa \\<in> {..length xs}; y \\<in> A; xb \\<in> R y xa;\n        x \\<in> xb\\<rbrakk>\n       \\<Longrightarrow> \\<exists>X\\<in>A. x \\<in> X", "assume F: \"X \\<in> A\""], ["proof (state)\nthis:\n  X \\<in> A\n\ngoal (2 subgoals):\n 1. \\<And>x X.\n       \\<lbrakk>X \\<in> A; x \\<in> X\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa\\<in>{..length xs}.\n                            \\<exists>y\\<in>A.\n                               \\<exists>xa\\<in>R y xa. x \\<in> xa\n 2. \\<And>x xa y xb.\n       \\<lbrakk>xa \\<in> {..length xs}; y \\<in> A; xb \\<in> R y xa;\n        x \\<in> xb\\<rbrakk>\n       \\<Longrightarrow> \\<exists>X\\<in>A. x \\<in> X", "hence \"X = (\\<Union>n \\<in> {..length xs}. \\<Union>W \\<in> R X n. W)\""], ["proof (prove)\nusing this:\n  X \\<in> A\n\ngoal (1 subgoal):\n 1. X = (\\<Union>n\\<le>length xs. \\<Union>W\\<in>R X n. W)", "using E"], ["proof (prove)\nusing this:\n  X \\<in> A\n  \\<forall>X\\<in>A.\n     X = (\\<Union>n\\<le>length xs. \\<Union>W\\<in>R X n. W) \\<and>\n     (\\<forall>W\\<in>R X 0.\n         xs \\<notin> sentences P \\<and>\n         None \\<notin> set xs \\<and> (xs, W) \\<in> failures P \\<or>\n         xs \\<in> sentences P \\<and>\n         (\\<exists>U V.\n             (xs, U) \\<in> failures P \\<and>\n             ([], V) \\<in> failures Q \\<and>\n             W = insert None U \\<inter> V)) \\<and>\n     (\\<forall>n\\<in>{0<..length xs}.\n         \\<forall>W\\<in>R X n.\n            take (length xs - n) xs \\<in> sentences P \\<and>\n            (drop (length xs - n) xs, W) \\<in> failures Q)\n\ngoal (1 subgoal):\n 1. X = (\\<Union>n\\<le>length xs. \\<Union>W\\<in>R X n. W)", "by simp"], ["proof (state)\nthis:\n  X = (\\<Union>n\\<le>length xs. \\<Union>W\\<in>R X n. W)\n\ngoal (2 subgoals):\n 1. \\<And>x X.\n       \\<lbrakk>X \\<in> A; x \\<in> X\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa\\<in>{..length xs}.\n                            \\<exists>y\\<in>A.\n                               \\<exists>xa\\<in>R y xa. x \\<in> xa\n 2. \\<And>x xa y xb.\n       \\<lbrakk>xa \\<in> {..length xs}; y \\<in> A; xb \\<in> R y xa;\n        x \\<in> xb\\<rbrakk>\n       \\<Longrightarrow> \\<exists>X\\<in>A. x \\<in> X", "moreover"], ["proof (state)\nthis:\n  X = (\\<Union>n\\<le>length xs. \\<Union>W\\<in>R X n. W)\n\ngoal (2 subgoals):\n 1. \\<And>x X.\n       \\<lbrakk>X \\<in> A; x \\<in> X\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa\\<in>{..length xs}.\n                            \\<exists>y\\<in>A.\n                               \\<exists>xa\\<in>R y xa. x \\<in> xa\n 2. \\<And>x xa y xb.\n       \\<lbrakk>xa \\<in> {..length xs}; y \\<in> A; xb \\<in> R y xa;\n        x \\<in> xb\\<rbrakk>\n       \\<Longrightarrow> \\<exists>X\\<in>A. x \\<in> X", "assume \"x \\<in> X\""], ["proof (state)\nthis:\n  x \\<in> X\n\ngoal (2 subgoals):\n 1. \\<And>x X.\n       \\<lbrakk>X \\<in> A; x \\<in> X\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa\\<in>{..length xs}.\n                            \\<exists>y\\<in>A.\n                               \\<exists>xa\\<in>R y xa. x \\<in> xa\n 2. \\<And>x xa y xb.\n       \\<lbrakk>xa \\<in> {..length xs}; y \\<in> A; xb \\<in> R y xa;\n        x \\<in> xb\\<rbrakk>\n       \\<Longrightarrow> \\<exists>X\\<in>A. x \\<in> X", "ultimately"], ["proof (chain)\npicking this:\n  X = (\\<Union>n\\<le>length xs. \\<Union>W\\<in>R X n. W)\n  x \\<in> X", "have \"x \\<in> (\\<Union>n \\<in> {..length xs}. \\<Union>W \\<in> R X n. W)\""], ["proof (prove)\nusing this:\n  X = (\\<Union>n\\<le>length xs. \\<Union>W\\<in>R X n. W)\n  x \\<in> X\n\ngoal (1 subgoal):\n 1. x \\<in> (\\<Union>n\\<le>length xs. \\<Union>W\\<in>R X n. W)", "by simp"], ["proof (state)\nthis:\n  x \\<in> (\\<Union>n\\<le>length xs. \\<Union>W\\<in>R X n. W)\n\ngoal (2 subgoals):\n 1. \\<And>x X.\n       \\<lbrakk>X \\<in> A; x \\<in> X\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa\\<in>{..length xs}.\n                            \\<exists>y\\<in>A.\n                               \\<exists>xa\\<in>R y xa. x \\<in> xa\n 2. \\<And>x xa y xb.\n       \\<lbrakk>xa \\<in> {..length xs}; y \\<in> A; xb \\<in> R y xa;\n        x \\<in> xb\\<rbrakk>\n       \\<Longrightarrow> \\<exists>X\\<in>A. x \\<in> X", "hence \"\\<exists>n \\<in> {..length xs}. \\<exists>W \\<in> R X n. x \\<in> W\""], ["proof (prove)\nusing this:\n  x \\<in> (\\<Union>n\\<le>length xs. \\<Union>W\\<in>R X n. W)\n\ngoal (1 subgoal):\n 1. \\<exists>n\\<in>{..length xs}. \\<exists>W\\<in>R X n. x \\<in> W", "by simp"], ["proof (state)\nthis:\n  \\<exists>n\\<in>{..length xs}. \\<exists>W\\<in>R X n. x \\<in> W\n\ngoal (2 subgoals):\n 1. \\<And>x X.\n       \\<lbrakk>X \\<in> A; x \\<in> X\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa\\<in>{..length xs}.\n                            \\<exists>y\\<in>A.\n                               \\<exists>xa\\<in>R y xa. x \\<in> xa\n 2. \\<And>x xa y xb.\n       \\<lbrakk>xa \\<in> {..length xs}; y \\<in> A; xb \\<in> R y xa;\n        x \\<in> xb\\<rbrakk>\n       \\<Longrightarrow> \\<exists>X\\<in>A. x \\<in> X", "hence \"\\<exists>X \\<in> A. \\<exists>n \\<in> {..length xs}. \\<exists>W \\<in> R X n. x \\<in> W\""], ["proof (prove)\nusing this:\n  \\<exists>n\\<in>{..length xs}. \\<exists>W\\<in>R X n. x \\<in> W\n\ngoal (1 subgoal):\n 1. \\<exists>X\\<in>A.\n       \\<exists>n\\<in>{..length xs}. \\<exists>W\\<in>R X n. x \\<in> W", "using F"], ["proof (prove)\nusing this:\n  \\<exists>n\\<in>{..length xs}. \\<exists>W\\<in>R X n. x \\<in> W\n  X \\<in> A\n\ngoal (1 subgoal):\n 1. \\<exists>X\\<in>A.\n       \\<exists>n\\<in>{..length xs}. \\<exists>W\\<in>R X n. x \\<in> W", ".."], ["proof (state)\nthis:\n  \\<exists>X\\<in>A.\n     \\<exists>n\\<in>{..length xs}. \\<exists>W\\<in>R X n. x \\<in> W\n\ngoal (2 subgoals):\n 1. \\<And>x X.\n       \\<lbrakk>X \\<in> A; x \\<in> X\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa\\<in>{..length xs}.\n                            \\<exists>y\\<in>A.\n                               \\<exists>xa\\<in>R y xa. x \\<in> xa\n 2. \\<And>x xa y xb.\n       \\<lbrakk>xa \\<in> {..length xs}; y \\<in> A; xb \\<in> R y xa;\n        x \\<in> xb\\<rbrakk>\n       \\<Longrightarrow> \\<exists>X\\<in>A. x \\<in> X", "thus \"\\<exists>n \\<in> {..length xs}. \\<exists>X \\<in> A. \\<exists>W \\<in> R X n. x \\<in> W\""], ["proof (prove)\nusing this:\n  \\<exists>X\\<in>A.\n     \\<exists>n\\<in>{..length xs}. \\<exists>W\\<in>R X n. x \\<in> W\n\ngoal (1 subgoal):\n 1. \\<exists>n\\<in>{..length xs}.\n       \\<exists>X\\<in>A. \\<exists>W\\<in>R X n. x \\<in> W", "by blast"], ["proof (state)\nthis:\n  \\<exists>n\\<in>{..length xs}.\n     \\<exists>X\\<in>A. \\<exists>W\\<in>R X n. x \\<in> W\n\ngoal (1 subgoal):\n 1. \\<And>x xa y xb.\n       \\<lbrakk>xa \\<in> {..length xs}; y \\<in> A; xb \\<in> R y xa;\n        x \\<in> xb\\<rbrakk>\n       \\<Longrightarrow> \\<exists>X\\<in>A. x \\<in> X", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xa y xb.\n       \\<lbrakk>xa \\<in> {..length xs}; y \\<in> A; xb \\<in> R y xa;\n        x \\<in> xb\\<rbrakk>\n       \\<Longrightarrow> \\<exists>X\\<in>A. x \\<in> X", "fix x n X W"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xa y xb.\n       \\<lbrakk>xa \\<in> {..length xs}; y \\<in> A; xb \\<in> R y xa;\n        x \\<in> xb\\<rbrakk>\n       \\<Longrightarrow> \\<exists>X\\<in>A. x \\<in> X", "assume F: \"X \\<in> A\""], ["proof (state)\nthis:\n  X \\<in> A\n\ngoal (1 subgoal):\n 1. \\<And>x xa y xb.\n       \\<lbrakk>xa \\<in> {..length xs}; y \\<in> A; xb \\<in> R y xa;\n        x \\<in> xb\\<rbrakk>\n       \\<Longrightarrow> \\<exists>X\\<in>A. x \\<in> X", "hence G: \"X = (\\<Union>n \\<in> {..length xs}. \\<Union>W \\<in> R X n. W)\""], ["proof (prove)\nusing this:\n  X \\<in> A\n\ngoal (1 subgoal):\n 1. X = (\\<Union>n\\<le>length xs. \\<Union>W\\<in>R X n. W)", "using E"], ["proof (prove)\nusing this:\n  X \\<in> A\n  \\<forall>X\\<in>A.\n     X = (\\<Union>n\\<le>length xs. \\<Union>W\\<in>R X n. W) \\<and>\n     (\\<forall>W\\<in>R X 0.\n         xs \\<notin> sentences P \\<and>\n         None \\<notin> set xs \\<and> (xs, W) \\<in> failures P \\<or>\n         xs \\<in> sentences P \\<and>\n         (\\<exists>U V.\n             (xs, U) \\<in> failures P \\<and>\n             ([], V) \\<in> failures Q \\<and>\n             W = insert None U \\<inter> V)) \\<and>\n     (\\<forall>n\\<in>{0<..length xs}.\n         \\<forall>W\\<in>R X n.\n            take (length xs - n) xs \\<in> sentences P \\<and>\n            (drop (length xs - n) xs, W) \\<in> failures Q)\n\ngoal (1 subgoal):\n 1. X = (\\<Union>n\\<le>length xs. \\<Union>W\\<in>R X n. W)", "by simp"], ["proof (state)\nthis:\n  X = (\\<Union>n\\<le>length xs. \\<Union>W\\<in>R X n. W)\n\ngoal (1 subgoal):\n 1. \\<And>x xa y xb.\n       \\<lbrakk>xa \\<in> {..length xs}; y \\<in> A; xb \\<in> R y xa;\n        x \\<in> xb\\<rbrakk>\n       \\<Longrightarrow> \\<exists>X\\<in>A. x \\<in> X", "assume \"x \\<in> W\" and \"W \\<in> R X n\""], ["proof (state)\nthis:\n  x \\<in> W\n  W \\<in> R X n\n\ngoal (1 subgoal):\n 1. \\<And>x xa y xb.\n       \\<lbrakk>xa \\<in> {..length xs}; y \\<in> A; xb \\<in> R y xa;\n        x \\<in> xb\\<rbrakk>\n       \\<Longrightarrow> \\<exists>X\\<in>A. x \\<in> X", "hence \"\\<exists>W \\<in> R X n. x \\<in> W\""], ["proof (prove)\nusing this:\n  x \\<in> W\n  W \\<in> R X n\n\ngoal (1 subgoal):\n 1. \\<exists>W\\<in>R X n. x \\<in> W", ".."], ["proof (state)\nthis:\n  \\<exists>W\\<in>R X n. x \\<in> W\n\ngoal (1 subgoal):\n 1. \\<And>x xa y xb.\n       \\<lbrakk>xa \\<in> {..length xs}; y \\<in> A; xb \\<in> R y xa;\n        x \\<in> xb\\<rbrakk>\n       \\<Longrightarrow> \\<exists>X\\<in>A. x \\<in> X", "moreover"], ["proof (state)\nthis:\n  \\<exists>W\\<in>R X n. x \\<in> W\n\ngoal (1 subgoal):\n 1. \\<And>x xa y xb.\n       \\<lbrakk>xa \\<in> {..length xs}; y \\<in> A; xb \\<in> R y xa;\n        x \\<in> xb\\<rbrakk>\n       \\<Longrightarrow> \\<exists>X\\<in>A. x \\<in> X", "assume \"n \\<in> {..length xs}\""], ["proof (state)\nthis:\n  n \\<in> {..length xs}\n\ngoal (1 subgoal):\n 1. \\<And>x xa y xb.\n       \\<lbrakk>xa \\<in> {..length xs}; y \\<in> A; xb \\<in> R y xa;\n        x \\<in> xb\\<rbrakk>\n       \\<Longrightarrow> \\<exists>X\\<in>A. x \\<in> X", "ultimately"], ["proof (chain)\npicking this:\n  \\<exists>W\\<in>R X n. x \\<in> W\n  n \\<in> {..length xs}", "have \"\\<exists>n \\<in> {..length xs}. \\<exists>W \\<in> R X n. x \\<in> W\""], ["proof (prove)\nusing this:\n  \\<exists>W\\<in>R X n. x \\<in> W\n  n \\<in> {..length xs}\n\ngoal (1 subgoal):\n 1. \\<exists>n\\<in>{..length xs}. \\<exists>W\\<in>R X n. x \\<in> W", ".."], ["proof (state)\nthis:\n  \\<exists>n\\<in>{..length xs}. \\<exists>W\\<in>R X n. x \\<in> W\n\ngoal (1 subgoal):\n 1. \\<And>x xa y xb.\n       \\<lbrakk>xa \\<in> {..length xs}; y \\<in> A; xb \\<in> R y xa;\n        x \\<in> xb\\<rbrakk>\n       \\<Longrightarrow> \\<exists>X\\<in>A. x \\<in> X", "hence \"x \\<in> (\\<Union>n \\<in> {..length xs}. \\<Union>W \\<in> R X n. W)\""], ["proof (prove)\nusing this:\n  \\<exists>n\\<in>{..length xs}. \\<exists>W\\<in>R X n. x \\<in> W\n\ngoal (1 subgoal):\n 1. x \\<in> (\\<Union>n\\<le>length xs. \\<Union>W\\<in>R X n. W)", "by simp"], ["proof (state)\nthis:\n  x \\<in> (\\<Union>n\\<le>length xs. \\<Union>W\\<in>R X n. W)\n\ngoal (1 subgoal):\n 1. \\<And>x xa y xb.\n       \\<lbrakk>xa \\<in> {..length xs}; y \\<in> A; xb \\<in> R y xa;\n        x \\<in> xb\\<rbrakk>\n       \\<Longrightarrow> \\<exists>X\\<in>A. x \\<in> X", "hence \"x \\<in> X\""], ["proof (prove)\nusing this:\n  x \\<in> (\\<Union>n\\<le>length xs. \\<Union>W\\<in>R X n. W)\n\ngoal (1 subgoal):\n 1. x \\<in> X", "by (subst G)"], ["proof (state)\nthis:\n  x \\<in> X\n\ngoal (1 subgoal):\n 1. \\<And>x xa y xb.\n       \\<lbrakk>xa \\<in> {..length xs}; y \\<in> A; xb \\<in> R y xa;\n        x \\<in> xb\\<rbrakk>\n       \\<Longrightarrow> \\<exists>X\\<in>A. x \\<in> X", "thus \"\\<exists>X \\<in> A. x \\<in> X\""], ["proof (prove)\nusing this:\n  x \\<in> X\n\ngoal (1 subgoal):\n 1. \\<exists>X\\<in>A. x \\<in> X", "using F"], ["proof (prove)\nusing this:\n  x \\<in> X\n  X \\<in> A\n\ngoal (1 subgoal):\n 1. \\<exists>X\\<in>A. x \\<in> X", ".."], ["proof (state)\nthis:\n  \\<exists>X\\<in>A. x \\<in> X\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<Union>X\\<in>A. X) =\n  (\\<Union>n\\<le>length xs. \\<Union>W\\<in>\\<Union>X\\<in>A. R X n. W)\n\ngoal (2 subgoals):\n 1. \\<forall>W\\<in>\\<Union>X\\<in>A. R X 0.\n       xs \\<notin> sentences P \\<and>\n       None \\<notin> set xs \\<and> (xs, W) \\<in> failures P \\<or>\n       xs \\<in> sentences P \\<and>\n       (\\<exists>U V.\n           (xs, U) \\<in> failures P \\<and>\n           ([], V) \\<in> failures Q \\<and> W = insert None U \\<inter> V)\n 2. \\<forall>n\\<in>{0<..length xs}.\n       \\<forall>W\\<in>\\<Union>X\\<in>A. R X n.\n          take (length xs - n) xs \\<in> sentences P \\<and>\n          (drop (length xs - n) xs, W) \\<in> failures Q", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<forall>W\\<in>\\<Union>X\\<in>A. R X 0.\n       xs \\<notin> sentences P \\<and>\n       None \\<notin> set xs \\<and> (xs, W) \\<in> failures P \\<or>\n       xs \\<in> sentences P \\<and>\n       (\\<exists>U V.\n           (xs, U) \\<in> failures P \\<and>\n           ([], V) \\<in> failures Q \\<and> W = insert None U \\<inter> V)\n 2. \\<forall>n\\<in>{0<..length xs}.\n       \\<forall>W\\<in>\\<Union>X\\<in>A. R X n.\n          take (length xs - n) xs \\<in> sentences P \\<and>\n          (drop (length xs - n) xs, W) \\<in> failures Q", "show \"\\<forall>W \\<in> \\<Union>X \\<in> A. R X 0.\n      xs \\<notin> sentences P \\<and> None \\<notin> set xs \\<and> (xs, W) \\<in> failures P \\<or>\n      xs \\<in> sentences P \\<and> (\\<exists>U V. (xs, U) \\<in> failures P \\<and> ([], V) \\<in> failures Q \\<and>\n        W = insert None U \\<inter> V)\"\n      (is \"\\<forall>W \\<in> _. ?T W\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>W\\<in>\\<Union>X\\<in>A. R X 0.\n       xs \\<notin> sentences P \\<and>\n       None \\<notin> set xs \\<and> (xs, W) \\<in> failures P \\<or>\n       xs \\<in> sentences P \\<and>\n       (\\<exists>U V.\n           (xs, U) \\<in> failures P \\<and>\n           ([], V) \\<in> failures Q \\<and> W = insert None U \\<inter> V)", "proof (rule ballI, simp only: UN_iff, erule bexE)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>W X.\n       \\<lbrakk>X \\<in> A; W \\<in> R X 0\\<rbrakk>\n       \\<Longrightarrow> xs \\<notin> sentences P \\<and>\n                         None \\<notin> set xs \\<and>\n                         (xs, W) \\<in> failures P \\<or>\n                         xs \\<in> sentences P \\<and>\n                         (\\<exists>U V.\n                             (xs, U) \\<in> failures P \\<and>\n                             ([], V) \\<in> failures Q \\<and>\n                             W = insert None U \\<inter> V)", "fix W X"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>W X.\n       \\<lbrakk>X \\<in> A; W \\<in> R X 0\\<rbrakk>\n       \\<Longrightarrow> xs \\<notin> sentences P \\<and>\n                         None \\<notin> set xs \\<and>\n                         (xs, W) \\<in> failures P \\<or>\n                         xs \\<in> sentences P \\<and>\n                         (\\<exists>U V.\n                             (xs, U) \\<in> failures P \\<and>\n                             ([], V) \\<in> failures Q \\<and>\n                             W = insert None U \\<inter> V)", "assume \"X \\<in> A\""], ["proof (state)\nthis:\n  X \\<in> A\n\ngoal (1 subgoal):\n 1. \\<And>W X.\n       \\<lbrakk>X \\<in> A; W \\<in> R X 0\\<rbrakk>\n       \\<Longrightarrow> xs \\<notin> sentences P \\<and>\n                         None \\<notin> set xs \\<and>\n                         (xs, W) \\<in> failures P \\<or>\n                         xs \\<in> sentences P \\<and>\n                         (\\<exists>U V.\n                             (xs, U) \\<in> failures P \\<and>\n                             ([], V) \\<in> failures Q \\<and>\n                             W = insert None U \\<inter> V)", "hence \"\\<forall>W \\<in> R X 0. ?T W\""], ["proof (prove)\nusing this:\n  X \\<in> A\n\ngoal (1 subgoal):\n 1. \\<forall>W\\<in>R X 0.\n       xs \\<notin> sentences P \\<and>\n       None \\<notin> set xs \\<and> (xs, W) \\<in> failures P \\<or>\n       xs \\<in> sentences P \\<and>\n       (\\<exists>U V.\n           (xs, U) \\<in> failures P \\<and>\n           ([], V) \\<in> failures Q \\<and> W = insert None U \\<inter> V)", "using E"], ["proof (prove)\nusing this:\n  X \\<in> A\n  \\<forall>X\\<in>A.\n     X = (\\<Union>n\\<le>length xs. \\<Union>W\\<in>R X n. W) \\<and>\n     (\\<forall>W\\<in>R X 0.\n         xs \\<notin> sentences P \\<and>\n         None \\<notin> set xs \\<and> (xs, W) \\<in> failures P \\<or>\n         xs \\<in> sentences P \\<and>\n         (\\<exists>U V.\n             (xs, U) \\<in> failures P \\<and>\n             ([], V) \\<in> failures Q \\<and>\n             W = insert None U \\<inter> V)) \\<and>\n     (\\<forall>n\\<in>{0<..length xs}.\n         \\<forall>W\\<in>R X n.\n            take (length xs - n) xs \\<in> sentences P \\<and>\n            (drop (length xs - n) xs, W) \\<in> failures Q)\n\ngoal (1 subgoal):\n 1. \\<forall>W\\<in>R X 0.\n       xs \\<notin> sentences P \\<and>\n       None \\<notin> set xs \\<and> (xs, W) \\<in> failures P \\<or>\n       xs \\<in> sentences P \\<and>\n       (\\<exists>U V.\n           (xs, U) \\<in> failures P \\<and>\n           ([], V) \\<in> failures Q \\<and> W = insert None U \\<inter> V)", "by simp"], ["proof (state)\nthis:\n  \\<forall>W\\<in>R X 0.\n     xs \\<notin> sentences P \\<and>\n     None \\<notin> set xs \\<and> (xs, W) \\<in> failures P \\<or>\n     xs \\<in> sentences P \\<and>\n     (\\<exists>U V.\n         (xs, U) \\<in> failures P \\<and>\n         ([], V) \\<in> failures Q \\<and> W = insert None U \\<inter> V)\n\ngoal (1 subgoal):\n 1. \\<And>W X.\n       \\<lbrakk>X \\<in> A; W \\<in> R X 0\\<rbrakk>\n       \\<Longrightarrow> xs \\<notin> sentences P \\<and>\n                         None \\<notin> set xs \\<and>\n                         (xs, W) \\<in> failures P \\<or>\n                         xs \\<in> sentences P \\<and>\n                         (\\<exists>U V.\n                             (xs, U) \\<in> failures P \\<and>\n                             ([], V) \\<in> failures Q \\<and>\n                             W = insert None U \\<inter> V)", "moreover"], ["proof (state)\nthis:\n  \\<forall>W\\<in>R X 0.\n     xs \\<notin> sentences P \\<and>\n     None \\<notin> set xs \\<and> (xs, W) \\<in> failures P \\<or>\n     xs \\<in> sentences P \\<and>\n     (\\<exists>U V.\n         (xs, U) \\<in> failures P \\<and>\n         ([], V) \\<in> failures Q \\<and> W = insert None U \\<inter> V)\n\ngoal (1 subgoal):\n 1. \\<And>W X.\n       \\<lbrakk>X \\<in> A; W \\<in> R X 0\\<rbrakk>\n       \\<Longrightarrow> xs \\<notin> sentences P \\<and>\n                         None \\<notin> set xs \\<and>\n                         (xs, W) \\<in> failures P \\<or>\n                         xs \\<in> sentences P \\<and>\n                         (\\<exists>U V.\n                             (xs, U) \\<in> failures P \\<and>\n                             ([], V) \\<in> failures Q \\<and>\n                             W = insert None U \\<inter> V)", "assume \"W \\<in> R X 0\""], ["proof (state)\nthis:\n  W \\<in> R X 0\n\ngoal (1 subgoal):\n 1. \\<And>W X.\n       \\<lbrakk>X \\<in> A; W \\<in> R X 0\\<rbrakk>\n       \\<Longrightarrow> xs \\<notin> sentences P \\<and>\n                         None \\<notin> set xs \\<and>\n                         (xs, W) \\<in> failures P \\<or>\n                         xs \\<in> sentences P \\<and>\n                         (\\<exists>U V.\n                             (xs, U) \\<in> failures P \\<and>\n                             ([], V) \\<in> failures Q \\<and>\n                             W = insert None U \\<inter> V)", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>W\\<in>R X 0.\n     xs \\<notin> sentences P \\<and>\n     None \\<notin> set xs \\<and> (xs, W) \\<in> failures P \\<or>\n     xs \\<in> sentences P \\<and>\n     (\\<exists>U V.\n         (xs, U) \\<in> failures P \\<and>\n         ([], V) \\<in> failures Q \\<and> W = insert None U \\<inter> V)\n  W \\<in> R X 0", "show \"?T W\""], ["proof (prove)\nusing this:\n  \\<forall>W\\<in>R X 0.\n     xs \\<notin> sentences P \\<and>\n     None \\<notin> set xs \\<and> (xs, W) \\<in> failures P \\<or>\n     xs \\<in> sentences P \\<and>\n     (\\<exists>U V.\n         (xs, U) \\<in> failures P \\<and>\n         ([], V) \\<in> failures Q \\<and> W = insert None U \\<inter> V)\n  W \\<in> R X 0\n\ngoal (1 subgoal):\n 1. xs \\<notin> sentences P \\<and>\n    None \\<notin> set xs \\<and> (xs, W) \\<in> failures P \\<or>\n    xs \\<in> sentences P \\<and>\n    (\\<exists>U V.\n        (xs, U) \\<in> failures P \\<and>\n        ([], V) \\<in> failures Q \\<and> W = insert None U \\<inter> V)", ".."], ["proof (state)\nthis:\n  xs \\<notin> sentences P \\<and>\n  None \\<notin> set xs \\<and> (xs, W) \\<in> failures P \\<or>\n  xs \\<in> sentences P \\<and>\n  (\\<exists>U V.\n      (xs, U) \\<in> failures P \\<and>\n      ([], V) \\<in> failures Q \\<and> W = insert None U \\<inter> V)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>W\\<in>\\<Union>X\\<in>A. R X 0.\n     xs \\<notin> sentences P \\<and>\n     None \\<notin> set xs \\<and> (xs, W) \\<in> failures P \\<or>\n     xs \\<in> sentences P \\<and>\n     (\\<exists>U V.\n         (xs, U) \\<in> failures P \\<and>\n         ([], V) \\<in> failures Q \\<and> W = insert None U \\<inter> V)\n\ngoal (1 subgoal):\n 1. \\<forall>n\\<in>{0<..length xs}.\n       \\<forall>W\\<in>\\<Union>X\\<in>A. R X n.\n          take (length xs - n) xs \\<in> sentences P \\<and>\n          (drop (length xs - n) xs, W) \\<in> failures Q", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>n\\<in>{0<..length xs}.\n       \\<forall>W\\<in>\\<Union>X\\<in>A. R X n.\n          take (length xs - n) xs \\<in> sentences P \\<and>\n          (drop (length xs - n) xs, W) \\<in> failures Q", "show \"\\<forall>n \\<in> {0<..length xs}. \\<forall>W \\<in> \\<Union>X \\<in> A. R X n.\n      take (length xs - n) xs \\<in> sentences P \\<and>\n      (drop (length xs - n) xs, W) \\<in> failures Q\"\n      (is \"\\<forall>n \\<in> _. \\<forall>W \\<in> _. ?T n W\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n\\<in>{0<..length xs}.\n       \\<forall>W\\<in>\\<Union>X\\<in>A. R X n.\n          take (length xs - n) xs \\<in> sentences P \\<and>\n          (drop (length xs - n) xs, W) \\<in> failures Q", "proof ((rule ballI)+, simp only: UN_iff, erule bexE)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n W X.\n       \\<lbrakk>n \\<in> {0<..length xs}; X \\<in> A; W \\<in> R X n\\<rbrakk>\n       \\<Longrightarrow> take (length xs - n) xs \\<in> sentences P \\<and>\n                         (drop (length xs - n) xs, W) \\<in> failures Q", "fix n W X"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n W X.\n       \\<lbrakk>n \\<in> {0<..length xs}; X \\<in> A; W \\<in> R X n\\<rbrakk>\n       \\<Longrightarrow> take (length xs - n) xs \\<in> sentences P \\<and>\n                         (drop (length xs - n) xs, W) \\<in> failures Q", "assume \"X \\<in> A\""], ["proof (state)\nthis:\n  X \\<in> A\n\ngoal (1 subgoal):\n 1. \\<And>n W X.\n       \\<lbrakk>n \\<in> {0<..length xs}; X \\<in> A; W \\<in> R X n\\<rbrakk>\n       \\<Longrightarrow> take (length xs - n) xs \\<in> sentences P \\<and>\n                         (drop (length xs - n) xs, W) \\<in> failures Q", "hence \"\\<forall>n \\<in> {0<..length xs}. \\<forall>W \\<in> R X n. ?T n W\""], ["proof (prove)\nusing this:\n  X \\<in> A\n\ngoal (1 subgoal):\n 1. \\<forall>n\\<in>{0<..length xs}.\n       \\<forall>W\\<in>R X n.\n          take (length xs - n) xs \\<in> sentences P \\<and>\n          (drop (length xs - n) xs, W) \\<in> failures Q", "using E"], ["proof (prove)\nusing this:\n  X \\<in> A\n  \\<forall>X\\<in>A.\n     X = (\\<Union>n\\<le>length xs. \\<Union>W\\<in>R X n. W) \\<and>\n     (\\<forall>W\\<in>R X 0.\n         xs \\<notin> sentences P \\<and>\n         None \\<notin> set xs \\<and> (xs, W) \\<in> failures P \\<or>\n         xs \\<in> sentences P \\<and>\n         (\\<exists>U V.\n             (xs, U) \\<in> failures P \\<and>\n             ([], V) \\<in> failures Q \\<and>\n             W = insert None U \\<inter> V)) \\<and>\n     (\\<forall>n\\<in>{0<..length xs}.\n         \\<forall>W\\<in>R X n.\n            take (length xs - n) xs \\<in> sentences P \\<and>\n            (drop (length xs - n) xs, W) \\<in> failures Q)\n\ngoal (1 subgoal):\n 1. \\<forall>n\\<in>{0<..length xs}.\n       \\<forall>W\\<in>R X n.\n          take (length xs - n) xs \\<in> sentences P \\<and>\n          (drop (length xs - n) xs, W) \\<in> failures Q", "by simp"], ["proof (state)\nthis:\n  \\<forall>n\\<in>{0<..length xs}.\n     \\<forall>W\\<in>R X n.\n        take (length xs - n) xs \\<in> sentences P \\<and>\n        (drop (length xs - n) xs, W) \\<in> failures Q\n\ngoal (1 subgoal):\n 1. \\<And>n W X.\n       \\<lbrakk>n \\<in> {0<..length xs}; X \\<in> A; W \\<in> R X n\\<rbrakk>\n       \\<Longrightarrow> take (length xs - n) xs \\<in> sentences P \\<and>\n                         (drop (length xs - n) xs, W) \\<in> failures Q", "moreover"], ["proof (state)\nthis:\n  \\<forall>n\\<in>{0<..length xs}.\n     \\<forall>W\\<in>R X n.\n        take (length xs - n) xs \\<in> sentences P \\<and>\n        (drop (length xs - n) xs, W) \\<in> failures Q\n\ngoal (1 subgoal):\n 1. \\<And>n W X.\n       \\<lbrakk>n \\<in> {0<..length xs}; X \\<in> A; W \\<in> R X n\\<rbrakk>\n       \\<Longrightarrow> take (length xs - n) xs \\<in> sentences P \\<and>\n                         (drop (length xs - n) xs, W) \\<in> failures Q", "assume \"n \\<in> {0<..length xs}\""], ["proof (state)\nthis:\n  n \\<in> {0<..length xs}\n\ngoal (1 subgoal):\n 1. \\<And>n W X.\n       \\<lbrakk>n \\<in> {0<..length xs}; X \\<in> A; W \\<in> R X n\\<rbrakk>\n       \\<Longrightarrow> take (length xs - n) xs \\<in> sentences P \\<and>\n                         (drop (length xs - n) xs, W) \\<in> failures Q", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>n\\<in>{0<..length xs}.\n     \\<forall>W\\<in>R X n.\n        take (length xs - n) xs \\<in> sentences P \\<and>\n        (drop (length xs - n) xs, W) \\<in> failures Q\n  n \\<in> {0<..length xs}", "have \"\\<forall>W \\<in> R X n. ?T n W\""], ["proof (prove)\nusing this:\n  \\<forall>n\\<in>{0<..length xs}.\n     \\<forall>W\\<in>R X n.\n        take (length xs - n) xs \\<in> sentences P \\<and>\n        (drop (length xs - n) xs, W) \\<in> failures Q\n  n \\<in> {0<..length xs}\n\ngoal (1 subgoal):\n 1. \\<forall>W\\<in>R X n.\n       take (length xs - n) xs \\<in> sentences P \\<and>\n       (drop (length xs - n) xs, W) \\<in> failures Q", ".."], ["proof (state)\nthis:\n  \\<forall>W\\<in>R X n.\n     take (length xs - n) xs \\<in> sentences P \\<and>\n     (drop (length xs - n) xs, W) \\<in> failures Q\n\ngoal (1 subgoal):\n 1. \\<And>n W X.\n       \\<lbrakk>n \\<in> {0<..length xs}; X \\<in> A; W \\<in> R X n\\<rbrakk>\n       \\<Longrightarrow> take (length xs - n) xs \\<in> sentences P \\<and>\n                         (drop (length xs - n) xs, W) \\<in> failures Q", "moreover"], ["proof (state)\nthis:\n  \\<forall>W\\<in>R X n.\n     take (length xs - n) xs \\<in> sentences P \\<and>\n     (drop (length xs - n) xs, W) \\<in> failures Q\n\ngoal (1 subgoal):\n 1. \\<And>n W X.\n       \\<lbrakk>n \\<in> {0<..length xs}; X \\<in> A; W \\<in> R X n\\<rbrakk>\n       \\<Longrightarrow> take (length xs - n) xs \\<in> sentences P \\<and>\n                         (drop (length xs - n) xs, W) \\<in> failures Q", "assume \"W \\<in> R X n\""], ["proof (state)\nthis:\n  W \\<in> R X n\n\ngoal (1 subgoal):\n 1. \\<And>n W X.\n       \\<lbrakk>n \\<in> {0<..length xs}; X \\<in> A; W \\<in> R X n\\<rbrakk>\n       \\<Longrightarrow> take (length xs - n) xs \\<in> sentences P \\<and>\n                         (drop (length xs - n) xs, W) \\<in> failures Q", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>W\\<in>R X n.\n     take (length xs - n) xs \\<in> sentences P \\<and>\n     (drop (length xs - n) xs, W) \\<in> failures Q\n  W \\<in> R X n", "show \"?T n W\""], ["proof (prove)\nusing this:\n  \\<forall>W\\<in>R X n.\n     take (length xs - n) xs \\<in> sentences P \\<and>\n     (drop (length xs - n) xs, W) \\<in> failures Q\n  W \\<in> R X n\n\ngoal (1 subgoal):\n 1. take (length xs - n) xs \\<in> sentences P \\<and>\n    (drop (length xs - n) xs, W) \\<in> failures Q", ".."], ["proof (state)\nthis:\n  take (length xs - n) xs \\<in> sentences P \\<and>\n  (drop (length xs - n) xs, W) \\<in> failures Q\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>n\\<in>{0<..length xs}.\n     \\<forall>W\\<in>\\<Union>X\\<in>A. R X n.\n        take (length xs - n) xs \\<in> sentences P \\<and>\n        (drop (length xs - n) xs, W) \\<in> failures Q\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<Union>X\\<in>A. X) =\n  (\\<Union>n\\<le>length xs. \\<Union>W\\<in>\\<Union>X\\<in>A. R X n. W) \\<and>\n  (\\<forall>W\\<in>\\<Union>X\\<in>A. R X 0.\n      xs \\<notin> sentences P \\<and>\n      None \\<notin> set xs \\<and> (xs, W) \\<in> failures P \\<or>\n      xs \\<in> sentences P \\<and>\n      (\\<exists>U V.\n          (xs, U) \\<in> failures P \\<and>\n          ([], V) \\<in> failures Q \\<and>\n          W = insert None U \\<inter> V)) \\<and>\n  (\\<forall>n\\<in>{0<..length xs}.\n      \\<forall>W\\<in>\\<Union>X\\<in>A. R X n.\n         take (length xs - n) xs \\<in> sentences P \\<and>\n         (drop (length xs - n) xs, W) \\<in> failures Q)\n\ngoal (1 subgoal):\n 1. \\<And>xs A X.\n       \\<lbrakk>\\<forall>X\\<in>A. (xs, X) \\<in> seq_comp_failures P Q;\n        X \\<in> A\\<rbrakk>\n       \\<Longrightarrow> (xs, \\<Union>X\\<in>A. X)\n                         \\<in> seq_comp_failures P Q", "ultimately"], ["proof (chain)\npicking this:\n  xs \\<in> Domain (seq_comp_failures P Q)\n  (\\<Union>X\\<in>A. X) =\n  (\\<Union>n\\<le>length xs. \\<Union>W\\<in>\\<Union>X\\<in>A. R X n. W) \\<and>\n  (\\<forall>W\\<in>\\<Union>X\\<in>A. R X 0.\n      xs \\<notin> sentences P \\<and>\n      None \\<notin> set xs \\<and> (xs, W) \\<in> failures P \\<or>\n      xs \\<in> sentences P \\<and>\n      (\\<exists>U V.\n          (xs, U) \\<in> failures P \\<and>\n          ([], V) \\<in> failures Q \\<and>\n          W = insert None U \\<inter> V)) \\<and>\n  (\\<forall>n\\<in>{0<..length xs}.\n      \\<forall>W\\<in>\\<Union>X\\<in>A. R X n.\n         take (length xs - n) xs \\<in> sentences P \\<and>\n         (drop (length xs - n) xs, W) \\<in> failures Q)", "show \"(xs, \\<Union>X \\<in> A. X) \\<in> seq_comp_failures P Q\""], ["proof (prove)\nusing this:\n  xs \\<in> Domain (seq_comp_failures P Q)\n  (\\<Union>X\\<in>A. X) =\n  (\\<Union>n\\<le>length xs. \\<Union>W\\<in>\\<Union>X\\<in>A. R X n. W) \\<and>\n  (\\<forall>W\\<in>\\<Union>X\\<in>A. R X 0.\n      xs \\<notin> sentences P \\<and>\n      None \\<notin> set xs \\<and> (xs, W) \\<in> failures P \\<or>\n      xs \\<in> sentences P \\<and>\n      (\\<exists>U V.\n          (xs, U) \\<in> failures P \\<and>\n          ([], V) \\<in> failures Q \\<and>\n          W = insert None U \\<inter> V)) \\<and>\n  (\\<forall>n\\<in>{0<..length xs}.\n      \\<forall>W\\<in>\\<Union>X\\<in>A. R X n.\n         take (length xs - n) xs \\<in> sentences P \\<and>\n         (drop (length xs - n) xs, W) \\<in> failures Q)\n\ngoal (1 subgoal):\n 1. (xs, \\<Union>X\\<in>A. X) \\<in> seq_comp_failures P Q", "by (rule seq_comp_refusals_2 [OF A B])"], ["proof (state)\nthis:\n  (xs, \\<Union>X\\<in>A. X) \\<in> seq_comp_failures P Q\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma seq_comp_weakly_sequential:\n  assumes\n    A: \"weakly_sequential P\" and\n    B: \"weakly_sequential Q\"\n  shows \"weakly_sequential (P ; Q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. weakly_sequential (P ; Q)", "proof (subst weakly_sequential_def, rule ballI, drule traces_failures,\n subst (asm) seq_comp_failures [OF A], erule seq_comp_failures.induct, simp_all)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>xsa X.\n       \\<lbrakk>xsa \\<notin> sentences P; (xsa, X) \\<in> failures P;\n        None \\<notin> set xsa\\<rbrakk>\n       \\<Longrightarrow> None \\<notin> set (butlast xsa)\n 2. \\<And>xsa X Y.\n       \\<lbrakk>xsa \\<in> sentences P; (xsa, X) \\<in> failures P;\n        ([], Y) \\<in> failures Q\\<rbrakk>\n       \\<Longrightarrow> None \\<notin> set (butlast xsa)\n 3. \\<And>xsa ys Y.\n       \\<lbrakk>xsa \\<in> sentences P; (ys, Y) \\<in> failures Q;\n        ys \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> None \\<notin> set (butlast (xsa @ ys))", "fix xs :: \"'a option list\""], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>xsa X.\n       \\<lbrakk>xsa \\<notin> sentences P; (xsa, X) \\<in> failures P;\n        None \\<notin> set xsa\\<rbrakk>\n       \\<Longrightarrow> None \\<notin> set (butlast xsa)\n 2. \\<And>xsa X Y.\n       \\<lbrakk>xsa \\<in> sentences P; (xsa, X) \\<in> failures P;\n        ([], Y) \\<in> failures Q\\<rbrakk>\n       \\<Longrightarrow> None \\<notin> set (butlast xsa)\n 3. \\<And>xsa ys Y.\n       \\<lbrakk>xsa \\<in> sentences P; (ys, Y) \\<in> failures Q;\n        ys \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> None \\<notin> set (butlast (xsa @ ys))", "assume C: \"None \\<notin> set xs\""], ["proof (state)\nthis:\n  None \\<notin> set xs\n\ngoal (3 subgoals):\n 1. \\<And>xsa X.\n       \\<lbrakk>xsa \\<notin> sentences P; (xsa, X) \\<in> failures P;\n        None \\<notin> set xsa\\<rbrakk>\n       \\<Longrightarrow> None \\<notin> set (butlast xsa)\n 2. \\<And>xsa X Y.\n       \\<lbrakk>xsa \\<in> sentences P; (xsa, X) \\<in> failures P;\n        ([], Y) \\<in> failures Q\\<rbrakk>\n       \\<Longrightarrow> None \\<notin> set (butlast xsa)\n 3. \\<And>xsa ys Y.\n       \\<lbrakk>xsa \\<in> sentences P; (ys, Y) \\<in> failures Q;\n        ys \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> None \\<notin> set (butlast (xsa @ ys))", "show \"None \\<notin> set (butlast xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. None \\<notin> set (butlast xs)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. None \\<in> set (butlast xs) \\<Longrightarrow> False", "assume \"None \\<in> set (butlast xs)\""], ["proof (state)\nthis:\n  None \\<in> set (butlast xs)\n\ngoal (1 subgoal):\n 1. None \\<in> set (butlast xs) \\<Longrightarrow> False", "hence \"None \\<in> set xs\""], ["proof (prove)\nusing this:\n  None \\<in> set (butlast xs)\n\ngoal (1 subgoal):\n 1. None \\<in> set xs", "by (rule in_set_butlastD)"], ["proof (state)\nthis:\n  None \\<in> set xs\n\ngoal (1 subgoal):\n 1. None \\<in> set (butlast xs) \\<Longrightarrow> False", "thus False"], ["proof (prove)\nusing this:\n  None \\<in> set xs\n\ngoal (1 subgoal):\n 1. False", "using C"], ["proof (prove)\nusing this:\n  None \\<in> set xs\n  None \\<notin> set xs\n\ngoal (1 subgoal):\n 1. False", "by contradiction"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  None \\<notin> set (butlast xs)\n\ngoal (2 subgoals):\n 1. \\<And>xsa X Y.\n       \\<lbrakk>xsa \\<in> sentences P; (xsa, X) \\<in> failures P;\n        ([], Y) \\<in> failures Q\\<rbrakk>\n       \\<Longrightarrow> None \\<notin> set (butlast xsa)\n 2. \\<And>xsa ys Y.\n       \\<lbrakk>xsa \\<in> sentences P; (ys, Y) \\<in> failures Q;\n        ys \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> None \\<notin> set (butlast (xsa @ ys))", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>xsa X Y.\n       \\<lbrakk>xsa \\<in> sentences P; (xsa, X) \\<in> failures P;\n        ([], Y) \\<in> failures Q\\<rbrakk>\n       \\<Longrightarrow> None \\<notin> set (butlast xsa)\n 2. \\<And>xsa ys Y.\n       \\<lbrakk>xsa \\<in> sentences P; (ys, Y) \\<in> failures Q;\n        ys \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> None \\<notin> set (butlast (xsa @ ys))", "fix xs"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>xsa X Y.\n       \\<lbrakk>xsa \\<in> sentences P; (xsa, X) \\<in> failures P;\n        ([], Y) \\<in> failures Q\\<rbrakk>\n       \\<Longrightarrow> None \\<notin> set (butlast xsa)\n 2. \\<And>xsa ys Y.\n       \\<lbrakk>xsa \\<in> sentences P; (ys, Y) \\<in> failures Q;\n        ys \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> None \\<notin> set (butlast (xsa @ ys))", "assume \"xs \\<in> sentences P\""], ["proof (state)\nthis:\n  xs \\<in> sentences P\n\ngoal (2 subgoals):\n 1. \\<And>xsa X Y.\n       \\<lbrakk>xsa \\<in> sentences P; (xsa, X) \\<in> failures P;\n        ([], Y) \\<in> failures Q\\<rbrakk>\n       \\<Longrightarrow> None \\<notin> set (butlast xsa)\n 2. \\<And>xsa ys Y.\n       \\<lbrakk>xsa \\<in> sentences P; (ys, Y) \\<in> failures Q;\n        ys \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> None \\<notin> set (butlast (xsa @ ys))", "with A"], ["proof (chain)\npicking this:\n  weakly_sequential P\n  xs \\<in> sentences P", "have C: \"None \\<notin> set xs\""], ["proof (prove)\nusing this:\n  weakly_sequential P\n  xs \\<in> sentences P\n\ngoal (1 subgoal):\n 1. None \\<notin> set xs", "by (rule weakly_seq_sentences_none)"], ["proof (state)\nthis:\n  None \\<notin> set xs\n\ngoal (2 subgoals):\n 1. \\<And>xsa X Y.\n       \\<lbrakk>xsa \\<in> sentences P; (xsa, X) \\<in> failures P;\n        ([], Y) \\<in> failures Q\\<rbrakk>\n       \\<Longrightarrow> None \\<notin> set (butlast xsa)\n 2. \\<And>xsa ys Y.\n       \\<lbrakk>xsa \\<in> sentences P; (ys, Y) \\<in> failures Q;\n        ys \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> None \\<notin> set (butlast (xsa @ ys))", "show \"None \\<notin> set (butlast xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. None \\<notin> set (butlast xs)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. None \\<in> set (butlast xs) \\<Longrightarrow> False", "assume \"None \\<in> set (butlast xs)\""], ["proof (state)\nthis:\n  None \\<in> set (butlast xs)\n\ngoal (1 subgoal):\n 1. None \\<in> set (butlast xs) \\<Longrightarrow> False", "hence \"None \\<in> set xs\""], ["proof (prove)\nusing this:\n  None \\<in> set (butlast xs)\n\ngoal (1 subgoal):\n 1. None \\<in> set xs", "by (rule in_set_butlastD)"], ["proof (state)\nthis:\n  None \\<in> set xs\n\ngoal (1 subgoal):\n 1. None \\<in> set (butlast xs) \\<Longrightarrow> False", "thus False"], ["proof (prove)\nusing this:\n  None \\<in> set xs\n\ngoal (1 subgoal):\n 1. False", "using C"], ["proof (prove)\nusing this:\n  None \\<in> set xs\n  None \\<notin> set xs\n\ngoal (1 subgoal):\n 1. False", "by contradiction"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  None \\<notin> set (butlast xs)\n\ngoal (1 subgoal):\n 1. \\<And>xsa ys Y.\n       \\<lbrakk>xsa \\<in> sentences P; (ys, Y) \\<in> failures Q;\n        ys \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> None \\<notin> set (butlast (xsa @ ys))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xsa ys Y.\n       \\<lbrakk>xsa \\<in> sentences P; (ys, Y) \\<in> failures Q;\n        ys \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> None \\<notin> set (butlast (xsa @ ys))", "fix xs ys Y"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xsa ys Y.\n       \\<lbrakk>xsa \\<in> sentences P; (ys, Y) \\<in> failures Q;\n        ys \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> None \\<notin> set (butlast (xsa @ ys))", "assume \"xs \\<in> sentences P\""], ["proof (state)\nthis:\n  xs \\<in> sentences P\n\ngoal (1 subgoal):\n 1. \\<And>xsa ys Y.\n       \\<lbrakk>xsa \\<in> sentences P; (ys, Y) \\<in> failures Q;\n        ys \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> None \\<notin> set (butlast (xsa @ ys))", "with A"], ["proof (chain)\npicking this:\n  weakly_sequential P\n  xs \\<in> sentences P", "have C: \"None \\<notin> set xs\""], ["proof (prove)\nusing this:\n  weakly_sequential P\n  xs \\<in> sentences P\n\ngoal (1 subgoal):\n 1. None \\<notin> set xs", "by (rule weakly_seq_sentences_none)"], ["proof (state)\nthis:\n  None \\<notin> set xs\n\ngoal (1 subgoal):\n 1. \\<And>xsa ys Y.\n       \\<lbrakk>xsa \\<in> sentences P; (ys, Y) \\<in> failures Q;\n        ys \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> None \\<notin> set (butlast (xsa @ ys))", "have \"\\<forall>xs \\<in> traces Q. None \\<notin> set (butlast xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>xs\\<in>traces Q. None \\<notin> set (butlast xs)", "using B"], ["proof (prove)\nusing this:\n  weakly_sequential Q\n\ngoal (1 subgoal):\n 1. \\<forall>xs\\<in>traces Q. None \\<notin> set (butlast xs)", "by (simp add: weakly_sequential_def)"], ["proof (state)\nthis:\n  \\<forall>xs\\<in>traces Q. None \\<notin> set (butlast xs)\n\ngoal (1 subgoal):\n 1. \\<And>xsa ys Y.\n       \\<lbrakk>xsa \\<in> sentences P; (ys, Y) \\<in> failures Q;\n        ys \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> None \\<notin> set (butlast (xsa @ ys))", "moreover"], ["proof (state)\nthis:\n  \\<forall>xs\\<in>traces Q. None \\<notin> set (butlast xs)\n\ngoal (1 subgoal):\n 1. \\<And>xsa ys Y.\n       \\<lbrakk>xsa \\<in> sentences P; (ys, Y) \\<in> failures Q;\n        ys \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> None \\<notin> set (butlast (xsa @ ys))", "assume \"(ys, Y) \\<in> failures Q\""], ["proof (state)\nthis:\n  (ys, Y) \\<in> failures Q\n\ngoal (1 subgoal):\n 1. \\<And>xsa ys Y.\n       \\<lbrakk>xsa \\<in> sentences P; (ys, Y) \\<in> failures Q;\n        ys \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> None \\<notin> set (butlast (xsa @ ys))", "hence \"ys \\<in> traces Q\""], ["proof (prove)\nusing this:\n  (ys, Y) \\<in> failures Q\n\ngoal (1 subgoal):\n 1. ys \\<in> traces Q", "by (rule failures_traces)"], ["proof (state)\nthis:\n  ys \\<in> traces Q\n\ngoal (1 subgoal):\n 1. \\<And>xsa ys Y.\n       \\<lbrakk>xsa \\<in> sentences P; (ys, Y) \\<in> failures Q;\n        ys \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> None \\<notin> set (butlast (xsa @ ys))", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>xs\\<in>traces Q. None \\<notin> set (butlast xs)\n  ys \\<in> traces Q", "have \"None \\<notin> set (butlast ys)\""], ["proof (prove)\nusing this:\n  \\<forall>xs\\<in>traces Q. None \\<notin> set (butlast xs)\n  ys \\<in> traces Q\n\ngoal (1 subgoal):\n 1. None \\<notin> set (butlast ys)", ".."], ["proof (state)\nthis:\n  None \\<notin> set (butlast ys)\n\ngoal (1 subgoal):\n 1. \\<And>xsa ys Y.\n       \\<lbrakk>xsa \\<in> sentences P; (ys, Y) \\<in> failures Q;\n        ys \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> None \\<notin> set (butlast (xsa @ ys))", "hence \"None \\<notin> set (xs @ butlast ys)\""], ["proof (prove)\nusing this:\n  None \\<notin> set (butlast ys)\n\ngoal (1 subgoal):\n 1. None \\<notin> set (xs @ butlast ys)", "using C"], ["proof (prove)\nusing this:\n  None \\<notin> set (butlast ys)\n  None \\<notin> set xs\n\ngoal (1 subgoal):\n 1. None \\<notin> set (xs @ butlast ys)", "by simp"], ["proof (state)\nthis:\n  None \\<notin> set (xs @ butlast ys)\n\ngoal (1 subgoal):\n 1. \\<And>xsa ys Y.\n       \\<lbrakk>xsa \\<in> sentences P; (ys, Y) \\<in> failures Q;\n        ys \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> None \\<notin> set (butlast (xsa @ ys))", "moreover"], ["proof (state)\nthis:\n  None \\<notin> set (xs @ butlast ys)\n\ngoal (1 subgoal):\n 1. \\<And>xsa ys Y.\n       \\<lbrakk>xsa \\<in> sentences P; (ys, Y) \\<in> failures Q;\n        ys \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> None \\<notin> set (butlast (xsa @ ys))", "assume \"ys \\<noteq> []\""], ["proof (state)\nthis:\n  ys \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<And>xsa ys Y.\n       \\<lbrakk>xsa \\<in> sentences P; (ys, Y) \\<in> failures Q;\n        ys \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> None \\<notin> set (butlast (xsa @ ys))", "hence \"butlast (xs @ ys) = xs @ butlast ys\""], ["proof (prove)\nusing this:\n  ys \\<noteq> []\n\ngoal (1 subgoal):\n 1. butlast (xs @ ys) = xs @ butlast ys", "by (simp add: butlast_append)"], ["proof (state)\nthis:\n  butlast (xs @ ys) = xs @ butlast ys\n\ngoal (1 subgoal):\n 1. \\<And>xsa ys Y.\n       \\<lbrakk>xsa \\<in> sentences P; (ys, Y) \\<in> failures Q;\n        ys \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> None \\<notin> set (butlast (xsa @ ys))", "ultimately"], ["proof (chain)\npicking this:\n  None \\<notin> set (xs @ butlast ys)\n  butlast (xs @ ys) = xs @ butlast ys", "show \"None \\<notin> set (butlast (xs @ ys))\""], ["proof (prove)\nusing this:\n  None \\<notin> set (xs @ butlast ys)\n  butlast (xs @ ys) = xs @ butlast ys\n\ngoal (1 subgoal):\n 1. None \\<notin> set (butlast (xs @ ys))", "by simp"], ["proof (state)\nthis:\n  None \\<notin> set (butlast (xs @ ys))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma seq_comp_sequential:\n  assumes\n    A: \"sequential P\" and\n    B: \"sequential Q\"\n  shows \"sequential (P ; Q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sequential (P ; Q)", "proof (subst sequential_def, rule conjI)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<forall>xs\\<in>traces (P ; Q). None \\<notin> set (butlast xs)\n 2. \\<forall>xs\\<in>sentences (P ; Q). next_events (P ; Q) xs = {None}", "have \"weakly_sequential P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. weakly_sequential P", "using A"], ["proof (prove)\nusing this:\n  sequential P\n\ngoal (1 subgoal):\n 1. weakly_sequential P", "by (rule seq_implies_weakly_seq)"], ["proof (state)\nthis:\n  weakly_sequential P\n\ngoal (2 subgoals):\n 1. \\<forall>xs\\<in>traces (P ; Q). None \\<notin> set (butlast xs)\n 2. \\<forall>xs\\<in>sentences (P ; Q). next_events (P ; Q) xs = {None}", "moreover"], ["proof (state)\nthis:\n  weakly_sequential P\n\ngoal (2 subgoals):\n 1. \\<forall>xs\\<in>traces (P ; Q). None \\<notin> set (butlast xs)\n 2. \\<forall>xs\\<in>sentences (P ; Q). next_events (P ; Q) xs = {None}", "have \"weakly_sequential Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. weakly_sequential Q", "using B"], ["proof (prove)\nusing this:\n  sequential Q\n\ngoal (1 subgoal):\n 1. weakly_sequential Q", "by (rule seq_implies_weakly_seq)"], ["proof (state)\nthis:\n  weakly_sequential Q\n\ngoal (2 subgoals):\n 1. \\<forall>xs\\<in>traces (P ; Q). None \\<notin> set (butlast xs)\n 2. \\<forall>xs\\<in>sentences (P ; Q). next_events (P ; Q) xs = {None}", "ultimately"], ["proof (chain)\npicking this:\n  weakly_sequential P\n  weakly_sequential Q", "have \"weakly_sequential (P ; Q)\""], ["proof (prove)\nusing this:\n  weakly_sequential P\n  weakly_sequential Q\n\ngoal (1 subgoal):\n 1. weakly_sequential (P ; Q)", "by (rule seq_comp_weakly_sequential)"], ["proof (state)\nthis:\n  weakly_sequential (P ; Q)\n\ngoal (2 subgoals):\n 1. \\<forall>xs\\<in>traces (P ; Q). None \\<notin> set (butlast xs)\n 2. \\<forall>xs\\<in>sentences (P ; Q). next_events (P ; Q) xs = {None}", "thus \"\\<forall>xs \\<in> traces (P ; Q). None \\<notin> set (butlast xs)\""], ["proof (prove)\nusing this:\n  weakly_sequential (P ; Q)\n\ngoal (1 subgoal):\n 1. \\<forall>xs\\<in>traces (P ; Q). None \\<notin> set (butlast xs)", "by (simp add: weakly_sequential_def)"], ["proof (state)\nthis:\n  \\<forall>xs\\<in>traces (P ; Q). None \\<notin> set (butlast xs)\n\ngoal (1 subgoal):\n 1. \\<forall>xs\\<in>sentences (P ; Q). next_events (P ; Q) xs = {None}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>xs\\<in>sentences (P ; Q). next_events (P ; Q) xs = {None}", "have C: \"weakly_sequential P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. weakly_sequential P", "using A"], ["proof (prove)\nusing this:\n  sequential P\n\ngoal (1 subgoal):\n 1. weakly_sequential P", "by (rule seq_implies_weakly_seq)"], ["proof (state)\nthis:\n  weakly_sequential P\n\ngoal (1 subgoal):\n 1. \\<forall>xs\\<in>sentences (P ; Q). next_events (P ; Q) xs = {None}", "show \"\\<forall>xs \\<in> sentences (P ; Q). next_events (P ; Q) xs = {None}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>xs\\<in>sentences (P ; Q). next_events (P ; Q) xs = {None}", "proof (rule ballI, simp add: sentences_def next_events_def, rule equalityI,\n   rule_tac [!] subsetI, simp_all, (drule traces_failures)+,\n   simp add: seq_comp_failures [OF C])"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xs x.\n       \\<lbrakk>(xs @ [None], {}) \\<in> seq_comp_failures P Q;\n        (xs @ [x], {}) \\<in> seq_comp_failures P Q\\<rbrakk>\n       \\<Longrightarrow> x = None", "fix xs x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xs x.\n       \\<lbrakk>(xs @ [None], {}) \\<in> seq_comp_failures P Q;\n        (xs @ [x], {}) \\<in> seq_comp_failures P Q\\<rbrakk>\n       \\<Longrightarrow> x = None", "assume\n      D: \"(xs @ [None], {}) \\<in> seq_comp_failures P Q\" and\n      E: \"(xs @ [x], {}) \\<in> seq_comp_failures P Q\""], ["proof (state)\nthis:\n  (xs @ [None], {}) \\<in> seq_comp_failures P Q\n  (xs @ [x], {}) \\<in> seq_comp_failures P Q\n\ngoal (1 subgoal):\n 1. \\<And>xs x.\n       \\<lbrakk>(xs @ [None], {}) \\<in> seq_comp_failures P Q;\n        (xs @ [x], {}) \\<in> seq_comp_failures P Q\\<rbrakk>\n       \\<Longrightarrow> x = None", "have \"\\<exists>R. {} = (\\<Union>n \\<in> {..length (xs @ [None])}. \\<Union>W \\<in> R n. W) \\<and>\n      (\\<forall>W \\<in> R 0.\n        xs @ [None] \\<notin> sentences P \\<and>\n          None \\<notin> set (xs @ [None]) \\<and> (xs @ [None], W) \\<in> failures P \\<or>\n        xs @ [None] \\<in> sentences P \\<and>\n          (\\<exists>U V. (xs @ [None], U) \\<in> failures P \\<and> ([], V) \\<in> failures Q \\<and>\n            W = insert None U \\<inter> V)) \\<and>\n      (\\<forall>n \\<in> {0<..length (xs @ [None])}. \\<forall>W \\<in> R n.\n        take (length (xs @ [None]) - n) (xs @ [None]) \\<in> sentences P \\<and>\n        (drop (length (xs @ [None]) - n) (xs @ [None]), W) \\<in> failures Q) \\<and>\n      (\\<exists>n \\<in> {..length (xs @ [None])}. \\<exists>W. W \\<in> R n)\"\n      (is \"\\<exists>R. ?T R\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>R.\n       {} =\n       (\\<Union>n\\<le>length (xs @ [None]). \\<Union>W\\<in>R n. W) \\<and>\n       (\\<forall>W\\<in>R 0.\n           xs @ [None] \\<notin> sentences P \\<and>\n           None \\<notin> set (xs @ [None]) \\<and>\n           (xs @ [None], W) \\<in> failures P \\<or>\n           xs @ [None] \\<in> sentences P \\<and>\n           (\\<exists>U V.\n               (xs @ [None], U) \\<in> failures P \\<and>\n               ([], V) \\<in> failures Q \\<and>\n               W = insert None U \\<inter> V)) \\<and>\n       (\\<forall>n\\<in>{0<..length (xs @ [None])}.\n           \\<forall>W\\<in>R n.\n              take (length (xs @ [None]) - n) (xs @ [None])\n              \\<in> sentences P \\<and>\n              (drop (length (xs @ [None]) - n) (xs @ [None]), W)\n              \\<in> failures Q) \\<and>\n       (\\<exists>n\\<in>{..length (xs @ [None])}. \\<exists>W. W \\<in> R n)", "using D"], ["proof (prove)\nusing this:\n  (xs @ [None], {}) \\<in> seq_comp_failures P Q\n\ngoal (1 subgoal):\n 1. \\<exists>R.\n       {} =\n       (\\<Union>n\\<le>length (xs @ [None]). \\<Union>W\\<in>R n. W) \\<and>\n       (\\<forall>W\\<in>R 0.\n           xs @ [None] \\<notin> sentences P \\<and>\n           None \\<notin> set (xs @ [None]) \\<and>\n           (xs @ [None], W) \\<in> failures P \\<or>\n           xs @ [None] \\<in> sentences P \\<and>\n           (\\<exists>U V.\n               (xs @ [None], U) \\<in> failures P \\<and>\n               ([], V) \\<in> failures Q \\<and>\n               W = insert None U \\<inter> V)) \\<and>\n       (\\<forall>n\\<in>{0<..length (xs @ [None])}.\n           \\<forall>W\\<in>R n.\n              take (length (xs @ [None]) - n) (xs @ [None])\n              \\<in> sentences P \\<and>\n              (drop (length (xs @ [None]) - n) (xs @ [None]), W)\n              \\<in> failures Q) \\<and>\n       (\\<exists>n\\<in>{..length (xs @ [None])}. \\<exists>W. W \\<in> R n)", "by (rule seq_comp_refusals_1)"], ["proof (state)\nthis:\n  \\<exists>R.\n     {} = (\\<Union>n\\<le>length (xs @ [None]). \\<Union>W\\<in>R n. W) \\<and>\n     (\\<forall>W\\<in>R 0.\n         xs @ [None] \\<notin> sentences P \\<and>\n         None \\<notin> set (xs @ [None]) \\<and>\n         (xs @ [None], W) \\<in> failures P \\<or>\n         xs @ [None] \\<in> sentences P \\<and>\n         (\\<exists>U V.\n             (xs @ [None], U) \\<in> failures P \\<and>\n             ([], V) \\<in> failures Q \\<and>\n             W = insert None U \\<inter> V)) \\<and>\n     (\\<forall>n\\<in>{0<..length (xs @ [None])}.\n         \\<forall>W\\<in>R n.\n            take (length (xs @ [None]) - n) (xs @ [None])\n            \\<in> sentences P \\<and>\n            (drop (length (xs @ [None]) - n) (xs @ [None]), W)\n            \\<in> failures Q) \\<and>\n     (\\<exists>n\\<in>{..length (xs @ [None])}. \\<exists>W. W \\<in> R n)\n\ngoal (1 subgoal):\n 1. \\<And>xs x.\n       \\<lbrakk>(xs @ [None], {}) \\<in> seq_comp_failures P Q;\n        (xs @ [x], {}) \\<in> seq_comp_failures P Q\\<rbrakk>\n       \\<Longrightarrow> x = None", "then"], ["proof (chain)\npicking this:\n  \\<exists>R.\n     {} = (\\<Union>n\\<le>length (xs @ [None]). \\<Union>W\\<in>R n. W) \\<and>\n     (\\<forall>W\\<in>R 0.\n         xs @ [None] \\<notin> sentences P \\<and>\n         None \\<notin> set (xs @ [None]) \\<and>\n         (xs @ [None], W) \\<in> failures P \\<or>\n         xs @ [None] \\<in> sentences P \\<and>\n         (\\<exists>U V.\n             (xs @ [None], U) \\<in> failures P \\<and>\n             ([], V) \\<in> failures Q \\<and>\n             W = insert None U \\<inter> V)) \\<and>\n     (\\<forall>n\\<in>{0<..length (xs @ [None])}.\n         \\<forall>W\\<in>R n.\n            take (length (xs @ [None]) - n) (xs @ [None])\n            \\<in> sentences P \\<and>\n            (drop (length (xs @ [None]) - n) (xs @ [None]), W)\n            \\<in> failures Q) \\<and>\n     (\\<exists>n\\<in>{..length (xs @ [None])}. \\<exists>W. W \\<in> R n)", "obtain R where F: \"?T R\""], ["proof (prove)\nusing this:\n  \\<exists>R.\n     {} = (\\<Union>n\\<le>length (xs @ [None]). \\<Union>W\\<in>R n. W) \\<and>\n     (\\<forall>W\\<in>R 0.\n         xs @ [None] \\<notin> sentences P \\<and>\n         None \\<notin> set (xs @ [None]) \\<and>\n         (xs @ [None], W) \\<in> failures P \\<or>\n         xs @ [None] \\<in> sentences P \\<and>\n         (\\<exists>U V.\n             (xs @ [None], U) \\<in> failures P \\<and>\n             ([], V) \\<in> failures Q \\<and>\n             W = insert None U \\<inter> V)) \\<and>\n     (\\<forall>n\\<in>{0<..length (xs @ [None])}.\n         \\<forall>W\\<in>R n.\n            take (length (xs @ [None]) - n) (xs @ [None])\n            \\<in> sentences P \\<and>\n            (drop (length (xs @ [None]) - n) (xs @ [None]), W)\n            \\<in> failures Q) \\<and>\n     (\\<exists>n\\<in>{..length (xs @ [None])}. \\<exists>W. W \\<in> R n)\n\ngoal (1 subgoal):\n 1. (\\<And>R.\n        {} =\n        (\\<Union>n\\<le>length (xs @ [None]). \\<Union>W\\<in>R n. W) \\<and>\n        (\\<forall>W\\<in>R 0.\n            xs @ [None] \\<notin> sentences P \\<and>\n            None \\<notin> set (xs @ [None]) \\<and>\n            (xs @ [None], W) \\<in> failures P \\<or>\n            xs @ [None] \\<in> sentences P \\<and>\n            (\\<exists>U V.\n                (xs @ [None], U) \\<in> failures P \\<and>\n                ([], V) \\<in> failures Q \\<and>\n                W = insert None U \\<inter> V)) \\<and>\n        (\\<forall>n\\<in>{0<..length (xs @ [None])}.\n            \\<forall>W\\<in>R n.\n               take (length (xs @ [None]) - n) (xs @ [None])\n               \\<in> sentences P \\<and>\n               (drop (length (xs @ [None]) - n) (xs @ [None]), W)\n               \\<in> failures Q) \\<and>\n        (\\<exists>n\\<in>{..length (xs @ [None])}.\n            \\<exists>W. W \\<in> R n) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  {} = (\\<Union>n\\<le>length (xs @ [None]). \\<Union>W\\<in>R n. W) \\<and>\n  (\\<forall>W\\<in>R 0.\n      xs @ [None] \\<notin> sentences P \\<and>\n      None \\<notin> set (xs @ [None]) \\<and>\n      (xs @ [None], W) \\<in> failures P \\<or>\n      xs @ [None] \\<in> sentences P \\<and>\n      (\\<exists>U V.\n          (xs @ [None], U) \\<in> failures P \\<and>\n          ([], V) \\<in> failures Q \\<and>\n          W = insert None U \\<inter> V)) \\<and>\n  (\\<forall>n\\<in>{0<..length (xs @ [None])}.\n      \\<forall>W\\<in>R n.\n         take (length (xs @ [None]) - n) (xs @ [None])\n         \\<in> sentences P \\<and>\n         (drop (length (xs @ [None]) - n) (xs @ [None]), W)\n         \\<in> failures Q) \\<and>\n  (\\<exists>n\\<in>{..length (xs @ [None])}. \\<exists>W. W \\<in> R n)\n\ngoal (1 subgoal):\n 1. \\<And>xs x.\n       \\<lbrakk>(xs @ [None], {}) \\<in> seq_comp_failures P Q;\n        (xs @ [x], {}) \\<in> seq_comp_failures P Q\\<rbrakk>\n       \\<Longrightarrow> x = None", "hence \"\\<exists>n \\<in> {..Suc (length xs)}. \\<exists>W. W \\<in> R n\""], ["proof (prove)\nusing this:\n  {} = (\\<Union>n\\<le>length (xs @ [None]). \\<Union>W\\<in>R n. W) \\<and>\n  (\\<forall>W\\<in>R 0.\n      xs @ [None] \\<notin> sentences P \\<and>\n      None \\<notin> set (xs @ [None]) \\<and>\n      (xs @ [None], W) \\<in> failures P \\<or>\n      xs @ [None] \\<in> sentences P \\<and>\n      (\\<exists>U V.\n          (xs @ [None], U) \\<in> failures P \\<and>\n          ([], V) \\<in> failures Q \\<and>\n          W = insert None U \\<inter> V)) \\<and>\n  (\\<forall>n\\<in>{0<..length (xs @ [None])}.\n      \\<forall>W\\<in>R n.\n         take (length (xs @ [None]) - n) (xs @ [None])\n         \\<in> sentences P \\<and>\n         (drop (length (xs @ [None]) - n) (xs @ [None]), W)\n         \\<in> failures Q) \\<and>\n  (\\<exists>n\\<in>{..length (xs @ [None])}. \\<exists>W. W \\<in> R n)\n\ngoal (1 subgoal):\n 1. \\<exists>n\\<in>{..Suc (length xs)}. \\<exists>W. W \\<in> R n", "by simp"], ["proof (state)\nthis:\n  \\<exists>n\\<in>{..Suc (length xs)}. \\<exists>W. W \\<in> R n\n\ngoal (1 subgoal):\n 1. \\<And>xs x.\n       \\<lbrakk>(xs @ [None], {}) \\<in> seq_comp_failures P Q;\n        (xs @ [x], {}) \\<in> seq_comp_failures P Q\\<rbrakk>\n       \\<Longrightarrow> x = None", "moreover"], ["proof (state)\nthis:\n  \\<exists>n\\<in>{..Suc (length xs)}. \\<exists>W. W \\<in> R n\n\ngoal (1 subgoal):\n 1. \\<And>xs x.\n       \\<lbrakk>(xs @ [None], {}) \\<in> seq_comp_failures P Q;\n        (xs @ [x], {}) \\<in> seq_comp_failures P Q\\<rbrakk>\n       \\<Longrightarrow> x = None", "have \"R 0 = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. R 0 = {}", "proof (rule equals0I)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y. y \\<in> R 0 \\<Longrightarrow> False", "fix W"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y. y \\<in> R 0 \\<Longrightarrow> False", "assume \"W \\<in> R 0\""], ["proof (state)\nthis:\n  W \\<in> R 0\n\ngoal (1 subgoal):\n 1. \\<And>y. y \\<in> R 0 \\<Longrightarrow> False", "hence \"xs @ [None] \\<in> sentences P\""], ["proof (prove)\nusing this:\n  W \\<in> R 0\n\ngoal (1 subgoal):\n 1. xs @ [None] \\<in> sentences P", "using F"], ["proof (prove)\nusing this:\n  W \\<in> R 0\n  {} = (\\<Union>n\\<le>length (xs @ [None]). \\<Union>W\\<in>R n. W) \\<and>\n  (\\<forall>W\\<in>R 0.\n      xs @ [None] \\<notin> sentences P \\<and>\n      None \\<notin> set (xs @ [None]) \\<and>\n      (xs @ [None], W) \\<in> failures P \\<or>\n      xs @ [None] \\<in> sentences P \\<and>\n      (\\<exists>U V.\n          (xs @ [None], U) \\<in> failures P \\<and>\n          ([], V) \\<in> failures Q \\<and>\n          W = insert None U \\<inter> V)) \\<and>\n  (\\<forall>n\\<in>{0<..length (xs @ [None])}.\n      \\<forall>W\\<in>R n.\n         take (length (xs @ [None]) - n) (xs @ [None])\n         \\<in> sentences P \\<and>\n         (drop (length (xs @ [None]) - n) (xs @ [None]), W)\n         \\<in> failures Q) \\<and>\n  (\\<exists>n\\<in>{..length (xs @ [None])}. \\<exists>W. W \\<in> R n)\n\ngoal (1 subgoal):\n 1. xs @ [None] \\<in> sentences P", "by simp"], ["proof (state)\nthis:\n  xs @ [None] \\<in> sentences P\n\ngoal (1 subgoal):\n 1. \\<And>y. y \\<in> R 0 \\<Longrightarrow> False", "with C"], ["proof (chain)\npicking this:\n  weakly_sequential P\n  xs @ [None] \\<in> sentences P", "have \"None \\<notin> set (xs @ [None])\""], ["proof (prove)\nusing this:\n  weakly_sequential P\n  xs @ [None] \\<in> sentences P\n\ngoal (1 subgoal):\n 1. None \\<notin> set (xs @ [None])", "by (rule weakly_seq_sentences_none)"], ["proof (state)\nthis:\n  None \\<notin> set (xs @ [None])\n\ngoal (1 subgoal):\n 1. \\<And>y. y \\<in> R 0 \\<Longrightarrow> False", "thus False"], ["proof (prove)\nusing this:\n  None \\<notin> set (xs @ [None])\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  R 0 = {}\n\ngoal (1 subgoal):\n 1. \\<And>xs x.\n       \\<lbrakk>(xs @ [None], {}) \\<in> seq_comp_failures P Q;\n        (xs @ [x], {}) \\<in> seq_comp_failures P Q\\<rbrakk>\n       \\<Longrightarrow> x = None", "ultimately"], ["proof (chain)\npicking this:\n  \\<exists>n\\<in>{..Suc (length xs)}. \\<exists>W. W \\<in> R n\n  R 0 = {}", "have \"\\<exists>n \\<in> {0<..Suc (length xs)}. \\<exists>W. W \\<in> R n\""], ["proof (prove)\nusing this:\n  \\<exists>n\\<in>{..Suc (length xs)}. \\<exists>W. W \\<in> R n\n  R 0 = {}\n\ngoal (1 subgoal):\n 1. \\<exists>n\\<in>{0<..Suc (length xs)}. \\<exists>W. W \\<in> R n", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<exists>n\\<in>{..Suc (length xs)}. \\<exists>W. W \\<in> R n;\n     R 0 = {}\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n\\<in>{0<..Suc (length xs)}.\n                         \\<exists>W. W \\<in> R n", "assume \"\\<exists>n \\<in> {..Suc (length xs)}. \\<exists>W. W \\<in> R n\""], ["proof (state)\nthis:\n  \\<exists>n\\<in>{..Suc (length xs)}. \\<exists>W. W \\<in> R n\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<exists>n\\<in>{..Suc (length xs)}. \\<exists>W. W \\<in> R n;\n     R 0 = {}\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n\\<in>{0<..Suc (length xs)}.\n                         \\<exists>W. W \\<in> R n", "then"], ["proof (chain)\npicking this:\n  \\<exists>n\\<in>{..Suc (length xs)}. \\<exists>W. W \\<in> R n", "obtain n where G: \"n \\<in> {..Suc (length xs)}\" and H: \"\\<exists>W. W \\<in> R n\""], ["proof (prove)\nusing this:\n  \\<exists>n\\<in>{..Suc (length xs)}. \\<exists>W. W \\<in> R n\n\ngoal (1 subgoal):\n 1. (\\<And>n.\n        \\<lbrakk>n \\<in> {..Suc (length xs)};\n         \\<exists>W. W \\<in> R n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  n \\<in> {..Suc (length xs)}\n  \\<exists>W. W \\<in> R n\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<exists>n\\<in>{..Suc (length xs)}. \\<exists>W. W \\<in> R n;\n     R 0 = {}\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n\\<in>{0<..Suc (length xs)}.\n                         \\<exists>W. W \\<in> R n", "assume I: \"R 0 = {}\""], ["proof (state)\nthis:\n  R 0 = {}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<exists>n\\<in>{..Suc (length xs)}. \\<exists>W. W \\<in> R n;\n     R 0 = {}\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n\\<in>{0<..Suc (length xs)}.\n                         \\<exists>W. W \\<in> R n", "show \"\\<exists>n \\<in> {0<..Suc (length xs)}. \\<exists>W. W \\<in> R n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>n\\<in>{0<..Suc (length xs)}. \\<exists>W. W \\<in> R n", "proof (cases n)"], ["proof (state)\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>n\\<in>{0<..Suc (length xs)}. \\<exists>W. W \\<in> R n\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>n\\<in>{0<..Suc (length xs)}. \\<exists>W. W \\<in> R n", "case 0"], ["proof (state)\nthis:\n  n = 0\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>n\\<in>{0<..Suc (length xs)}. \\<exists>W. W \\<in> R n\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>n\\<in>{0<..Suc (length xs)}. \\<exists>W. W \\<in> R n", "hence \"\\<exists>W. W \\<in> R 0\""], ["proof (prove)\nusing this:\n  n = 0\n\ngoal (1 subgoal):\n 1. \\<exists>W. W \\<in> R 0", "using H"], ["proof (prove)\nusing this:\n  n = 0\n  \\<exists>W. W \\<in> R n\n\ngoal (1 subgoal):\n 1. \\<exists>W. W \\<in> R 0", "by simp"], ["proof (state)\nthis:\n  \\<exists>W. W \\<in> R 0\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>n\\<in>{0<..Suc (length xs)}. \\<exists>W. W \\<in> R n\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>n\\<in>{0<..Suc (length xs)}. \\<exists>W. W \\<in> R n", "then"], ["proof (chain)\npicking this:\n  \\<exists>W. W \\<in> R 0", "obtain W where \"W \\<in> R 0\""], ["proof (prove)\nusing this:\n  \\<exists>W. W \\<in> R 0\n\ngoal (1 subgoal):\n 1. (\\<And>W. W \\<in> R 0 \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", ".."], ["proof (state)\nthis:\n  W \\<in> R 0\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>n\\<in>{0<..Suc (length xs)}. \\<exists>W. W \\<in> R n\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>n\\<in>{0<..Suc (length xs)}. \\<exists>W. W \\<in> R n", "moreover"], ["proof (state)\nthis:\n  W \\<in> R 0\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>n\\<in>{0<..Suc (length xs)}. \\<exists>W. W \\<in> R n\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>n\\<in>{0<..Suc (length xs)}. \\<exists>W. W \\<in> R n", "have \"W \\<notin> R 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. W \\<notin> R 0", "using I"], ["proof (prove)\nusing this:\n  R 0 = {}\n\ngoal (1 subgoal):\n 1. W \\<notin> R 0", "by (rule equals0D)"], ["proof (state)\nthis:\n  W \\<notin> R 0\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>n\\<in>{0<..Suc (length xs)}. \\<exists>W. W \\<in> R n\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>n\\<in>{0<..Suc (length xs)}. \\<exists>W. W \\<in> R n", "ultimately"], ["proof (chain)\npicking this:\n  W \\<in> R 0\n  W \\<notin> R 0", "show ?thesis"], ["proof (prove)\nusing this:\n  W \\<in> R 0\n  W \\<notin> R 0\n\ngoal (1 subgoal):\n 1. \\<exists>n\\<in>{0<..Suc (length xs)}. \\<exists>W. W \\<in> R n", "by contradiction"], ["proof (state)\nthis:\n  \\<exists>n\\<in>{0<..Suc (length xs)}. \\<exists>W. W \\<in> R n\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>n\\<in>{0<..Suc (length xs)}. \\<exists>W. W \\<in> R n", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>n\\<in>{0<..Suc (length xs)}. \\<exists>W. W \\<in> R n", "case (Suc m)"], ["proof (state)\nthis:\n  n = Suc m\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>n\\<in>{0<..Suc (length xs)}. \\<exists>W. W \\<in> R n", "hence \"n \\<in> {0<..Suc (length xs)}\""], ["proof (prove)\nusing this:\n  n = Suc m\n\ngoal (1 subgoal):\n 1. n \\<in> {0<..Suc (length xs)}", "using G"], ["proof (prove)\nusing this:\n  n = Suc m\n  n \\<in> {..Suc (length xs)}\n\ngoal (1 subgoal):\n 1. n \\<in> {0<..Suc (length xs)}", "by simp"], ["proof (state)\nthis:\n  n \\<in> {0<..Suc (length xs)}\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       \\<exists>n\\<in>{0<..Suc (length xs)}. \\<exists>W. W \\<in> R n", "with H"], ["proof (chain)\npicking this:\n  \\<exists>W. W \\<in> R n\n  n \\<in> {0<..Suc (length xs)}", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>W. W \\<in> R n\n  n \\<in> {0<..Suc (length xs)}\n\ngoal (1 subgoal):\n 1. \\<exists>n\\<in>{0<..Suc (length xs)}. \\<exists>W. W \\<in> R n", ".."], ["proof (state)\nthis:\n  \\<exists>n\\<in>{0<..Suc (length xs)}. \\<exists>W. W \\<in> R n\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>n\\<in>{0<..Suc (length xs)}. \\<exists>W. W \\<in> R n\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>n\\<in>{0<..Suc (length xs)}. \\<exists>W. W \\<in> R n\n\ngoal (1 subgoal):\n 1. \\<And>xs x.\n       \\<lbrakk>(xs @ [None], {}) \\<in> seq_comp_failures P Q;\n        (xs @ [x], {}) \\<in> seq_comp_failures P Q\\<rbrakk>\n       \\<Longrightarrow> x = None", "then"], ["proof (chain)\npicking this:\n  \\<exists>n\\<in>{0<..Suc (length xs)}. \\<exists>W. W \\<in> R n", "obtain n and W where G: \"n \\<in> {0<..Suc (length xs)}\" and \"W \\<in> R n\""], ["proof (prove)\nusing this:\n  \\<exists>n\\<in>{0<..Suc (length xs)}. \\<exists>W. W \\<in> R n\n\ngoal (1 subgoal):\n 1. (\\<And>n W.\n        \\<lbrakk>n \\<in> {0<..Suc (length xs)}; W \\<in> R n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  n \\<in> {0<..Suc (length xs)}\n  W \\<in> R n\n\ngoal (1 subgoal):\n 1. \\<And>xs x.\n       \\<lbrakk>(xs @ [None], {}) \\<in> seq_comp_failures P Q;\n        (xs @ [x], {}) \\<in> seq_comp_failures P Q\\<rbrakk>\n       \\<Longrightarrow> x = None", "hence\n     \"take (Suc (length xs) - n) (xs @ [None]) \\<in> sentences P \\<and>\n      (drop (Suc (length xs) - n) (xs @ [None]), W) \\<in> failures Q\""], ["proof (prove)\nusing this:\n  n \\<in> {0<..Suc (length xs)}\n  W \\<in> R n\n\ngoal (1 subgoal):\n 1. take (Suc (length xs) - n) (xs @ [None]) \\<in> sentences P \\<and>\n    (drop (Suc (length xs) - n) (xs @ [None]), W) \\<in> failures Q", "using F"], ["proof (prove)\nusing this:\n  n \\<in> {0<..Suc (length xs)}\n  W \\<in> R n\n  {} = (\\<Union>n\\<le>length (xs @ [None]). \\<Union>W\\<in>R n. W) \\<and>\n  (\\<forall>W\\<in>R 0.\n      xs @ [None] \\<notin> sentences P \\<and>\n      None \\<notin> set (xs @ [None]) \\<and>\n      (xs @ [None], W) \\<in> failures P \\<or>\n      xs @ [None] \\<in> sentences P \\<and>\n      (\\<exists>U V.\n          (xs @ [None], U) \\<in> failures P \\<and>\n          ([], V) \\<in> failures Q \\<and>\n          W = insert None U \\<inter> V)) \\<and>\n  (\\<forall>n\\<in>{0<..length (xs @ [None])}.\n      \\<forall>W\\<in>R n.\n         take (length (xs @ [None]) - n) (xs @ [None])\n         \\<in> sentences P \\<and>\n         (drop (length (xs @ [None]) - n) (xs @ [None]), W)\n         \\<in> failures Q) \\<and>\n  (\\<exists>n\\<in>{..length (xs @ [None])}. \\<exists>W. W \\<in> R n)\n\ngoal (1 subgoal):\n 1. take (Suc (length xs) - n) (xs @ [None]) \\<in> sentences P \\<and>\n    (drop (Suc (length xs) - n) (xs @ [None]), W) \\<in> failures Q", "by simp"], ["proof (state)\nthis:\n  take (Suc (length xs) - n) (xs @ [None]) \\<in> sentences P \\<and>\n  (drop (Suc (length xs) - n) (xs @ [None]), W) \\<in> failures Q\n\ngoal (1 subgoal):\n 1. \\<And>xs x.\n       \\<lbrakk>(xs @ [None], {}) \\<in> seq_comp_failures P Q;\n        (xs @ [x], {}) \\<in> seq_comp_failures P Q\\<rbrakk>\n       \\<Longrightarrow> x = None", "moreover"], ["proof (state)\nthis:\n  take (Suc (length xs) - n) (xs @ [None]) \\<in> sentences P \\<and>\n  (drop (Suc (length xs) - n) (xs @ [None]), W) \\<in> failures Q\n\ngoal (1 subgoal):\n 1. \\<And>xs x.\n       \\<lbrakk>(xs @ [None], {}) \\<in> seq_comp_failures P Q;\n        (xs @ [x], {}) \\<in> seq_comp_failures P Q\\<rbrakk>\n       \\<Longrightarrow> x = None", "have H: \"Suc (length xs) - n \\<le> length xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Suc (length xs) - n \\<le> length xs", "using G"], ["proof (prove)\nusing this:\n  n \\<in> {0<..Suc (length xs)}\n\ngoal (1 subgoal):\n 1. Suc (length xs) - n \\<le> length xs", "by (simp, arith)"], ["proof (state)\nthis:\n  Suc (length xs) - n \\<le> length xs\n\ngoal (1 subgoal):\n 1. \\<And>xs x.\n       \\<lbrakk>(xs @ [None], {}) \\<in> seq_comp_failures P Q;\n        (xs @ [x], {}) \\<in> seq_comp_failures P Q\\<rbrakk>\n       \\<Longrightarrow> x = None", "ultimately"], ["proof (chain)\npicking this:\n  take (Suc (length xs) - n) (xs @ [None]) \\<in> sentences P \\<and>\n  (drop (Suc (length xs) - n) (xs @ [None]), W) \\<in> failures Q\n  Suc (length xs) - n \\<le> length xs", "have I:\n     \"take (Suc (length xs) - n) xs \\<in> sentences P \\<and>\n      (drop (Suc (length xs) - n) xs @ [None], W) \\<in> failures Q\""], ["proof (prove)\nusing this:\n  take (Suc (length xs) - n) (xs @ [None]) \\<in> sentences P \\<and>\n  (drop (Suc (length xs) - n) (xs @ [None]), W) \\<in> failures Q\n  Suc (length xs) - n \\<le> length xs\n\ngoal (1 subgoal):\n 1. take (Suc (length xs) - n) xs \\<in> sentences P \\<and>\n    (drop (Suc (length xs) - n) xs @ [None], W) \\<in> failures Q", "by simp"], ["proof (state)\nthis:\n  take (Suc (length xs) - n) xs \\<in> sentences P \\<and>\n  (drop (Suc (length xs) - n) xs @ [None], W) \\<in> failures Q\n\ngoal (1 subgoal):\n 1. \\<And>xs x.\n       \\<lbrakk>(xs @ [None], {}) \\<in> seq_comp_failures P Q;\n        (xs @ [x], {}) \\<in> seq_comp_failures P Q\\<rbrakk>\n       \\<Longrightarrow> x = None", "have \"\\<exists>R. {} = (\\<Union>n \\<in> {..length (xs @ [x])}. \\<Union>W \\<in> R n. W) \\<and>\n      (\\<forall>W \\<in> R 0.\n        xs @ [x] \\<notin> sentences P \\<and>\n          None \\<notin> set (xs @ [x]) \\<and> (xs @ [x], W) \\<in> failures P \\<or>\n        xs @ [x] \\<in> sentences P \\<and>\n          (\\<exists>U V. (xs @ [x], U) \\<in> failures P \\<and> ([], V) \\<in> failures Q \\<and>\n            W = insert None U \\<inter> V)) \\<and>\n      (\\<forall>n \\<in> {0<..length (xs @ [x])}. \\<forall>W \\<in> R n.\n        take (length (xs @ [x]) - n) (xs @ [x]) \\<in> sentences P \\<and>\n        (drop (length (xs @ [x]) - n) (xs @ [x]), W) \\<in> failures Q) \\<and>\n      (\\<exists>n \\<in> {..length (xs @ [x])}. \\<exists>W. W \\<in> R n)\"\n      (is \"\\<exists>R. ?T R\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>R.\n       {} = (\\<Union>n\\<le>length (xs @ [x]). \\<Union>W\\<in>R n. W) \\<and>\n       (\\<forall>W\\<in>R 0.\n           xs @ [x] \\<notin> sentences P \\<and>\n           None \\<notin> set (xs @ [x]) \\<and>\n           (xs @ [x], W) \\<in> failures P \\<or>\n           xs @ [x] \\<in> sentences P \\<and>\n           (\\<exists>U V.\n               (xs @ [x], U) \\<in> failures P \\<and>\n               ([], V) \\<in> failures Q \\<and>\n               W = insert None U \\<inter> V)) \\<and>\n       (\\<forall>n\\<in>{0<..length (xs @ [x])}.\n           \\<forall>W\\<in>R n.\n              take (length (xs @ [x]) - n) (xs @ [x])\n              \\<in> sentences P \\<and>\n              (drop (length (xs @ [x]) - n) (xs @ [x]), W)\n              \\<in> failures Q) \\<and>\n       (\\<exists>n\\<in>{..length (xs @ [x])}. \\<exists>W. W \\<in> R n)", "using E"], ["proof (prove)\nusing this:\n  (xs @ [x], {}) \\<in> seq_comp_failures P Q\n\ngoal (1 subgoal):\n 1. \\<exists>R.\n       {} = (\\<Union>n\\<le>length (xs @ [x]). \\<Union>W\\<in>R n. W) \\<and>\n       (\\<forall>W\\<in>R 0.\n           xs @ [x] \\<notin> sentences P \\<and>\n           None \\<notin> set (xs @ [x]) \\<and>\n           (xs @ [x], W) \\<in> failures P \\<or>\n           xs @ [x] \\<in> sentences P \\<and>\n           (\\<exists>U V.\n               (xs @ [x], U) \\<in> failures P \\<and>\n               ([], V) \\<in> failures Q \\<and>\n               W = insert None U \\<inter> V)) \\<and>\n       (\\<forall>n\\<in>{0<..length (xs @ [x])}.\n           \\<forall>W\\<in>R n.\n              take (length (xs @ [x]) - n) (xs @ [x])\n              \\<in> sentences P \\<and>\n              (drop (length (xs @ [x]) - n) (xs @ [x]), W)\n              \\<in> failures Q) \\<and>\n       (\\<exists>n\\<in>{..length (xs @ [x])}. \\<exists>W. W \\<in> R n)", "by (rule seq_comp_refusals_1)"], ["proof (state)\nthis:\n  \\<exists>R.\n     {} = (\\<Union>n\\<le>length (xs @ [x]). \\<Union>W\\<in>R n. W) \\<and>\n     (\\<forall>W\\<in>R 0.\n         xs @ [x] \\<notin> sentences P \\<and>\n         None \\<notin> set (xs @ [x]) \\<and>\n         (xs @ [x], W) \\<in> failures P \\<or>\n         xs @ [x] \\<in> sentences P \\<and>\n         (\\<exists>U V.\n             (xs @ [x], U) \\<in> failures P \\<and>\n             ([], V) \\<in> failures Q \\<and>\n             W = insert None U \\<inter> V)) \\<and>\n     (\\<forall>n\\<in>{0<..length (xs @ [x])}.\n         \\<forall>W\\<in>R n.\n            take (length (xs @ [x]) - n) (xs @ [x]) \\<in> sentences P \\<and>\n            (drop (length (xs @ [x]) - n) (xs @ [x]), W)\n            \\<in> failures Q) \\<and>\n     (\\<exists>n\\<in>{..length (xs @ [x])}. \\<exists>W. W \\<in> R n)\n\ngoal (1 subgoal):\n 1. \\<And>xs x.\n       \\<lbrakk>(xs @ [None], {}) \\<in> seq_comp_failures P Q;\n        (xs @ [x], {}) \\<in> seq_comp_failures P Q\\<rbrakk>\n       \\<Longrightarrow> x = None", "then"], ["proof (chain)\npicking this:\n  \\<exists>R.\n     {} = (\\<Union>n\\<le>length (xs @ [x]). \\<Union>W\\<in>R n. W) \\<and>\n     (\\<forall>W\\<in>R 0.\n         xs @ [x] \\<notin> sentences P \\<and>\n         None \\<notin> set (xs @ [x]) \\<and>\n         (xs @ [x], W) \\<in> failures P \\<or>\n         xs @ [x] \\<in> sentences P \\<and>\n         (\\<exists>U V.\n             (xs @ [x], U) \\<in> failures P \\<and>\n             ([], V) \\<in> failures Q \\<and>\n             W = insert None U \\<inter> V)) \\<and>\n     (\\<forall>n\\<in>{0<..length (xs @ [x])}.\n         \\<forall>W\\<in>R n.\n            take (length (xs @ [x]) - n) (xs @ [x]) \\<in> sentences P \\<and>\n            (drop (length (xs @ [x]) - n) (xs @ [x]), W)\n            \\<in> failures Q) \\<and>\n     (\\<exists>n\\<in>{..length (xs @ [x])}. \\<exists>W. W \\<in> R n)", "obtain R' where J: \"?T R'\""], ["proof (prove)\nusing this:\n  \\<exists>R.\n     {} = (\\<Union>n\\<le>length (xs @ [x]). \\<Union>W\\<in>R n. W) \\<and>\n     (\\<forall>W\\<in>R 0.\n         xs @ [x] \\<notin> sentences P \\<and>\n         None \\<notin> set (xs @ [x]) \\<and>\n         (xs @ [x], W) \\<in> failures P \\<or>\n         xs @ [x] \\<in> sentences P \\<and>\n         (\\<exists>U V.\n             (xs @ [x], U) \\<in> failures P \\<and>\n             ([], V) \\<in> failures Q \\<and>\n             W = insert None U \\<inter> V)) \\<and>\n     (\\<forall>n\\<in>{0<..length (xs @ [x])}.\n         \\<forall>W\\<in>R n.\n            take (length (xs @ [x]) - n) (xs @ [x]) \\<in> sentences P \\<and>\n            (drop (length (xs @ [x]) - n) (xs @ [x]), W)\n            \\<in> failures Q) \\<and>\n     (\\<exists>n\\<in>{..length (xs @ [x])}. \\<exists>W. W \\<in> R n)\n\ngoal (1 subgoal):\n 1. (\\<And>R'.\n        {} = (\\<Union>n\\<le>length (xs @ [x]). \\<Union>W\\<in>R' n. W) \\<and>\n        (\\<forall>W\\<in>R' 0.\n            xs @ [x] \\<notin> sentences P \\<and>\n            None \\<notin> set (xs @ [x]) \\<and>\n            (xs @ [x], W) \\<in> failures P \\<or>\n            xs @ [x] \\<in> sentences P \\<and>\n            (\\<exists>U V.\n                (xs @ [x], U) \\<in> failures P \\<and>\n                ([], V) \\<in> failures Q \\<and>\n                W = insert None U \\<inter> V)) \\<and>\n        (\\<forall>n\\<in>{0<..length (xs @ [x])}.\n            \\<forall>W\\<in>R' n.\n               take (length (xs @ [x]) - n) (xs @ [x])\n               \\<in> sentences P \\<and>\n               (drop (length (xs @ [x]) - n) (xs @ [x]), W)\n               \\<in> failures Q) \\<and>\n        (\\<exists>n\\<in>{..length (xs @ [x])}.\n            \\<exists>W. W \\<in> R' n) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  {} = (\\<Union>n\\<le>length (xs @ [x]). \\<Union>W\\<in>R' n. W) \\<and>\n  (\\<forall>W\\<in>R' 0.\n      xs @ [x] \\<notin> sentences P \\<and>\n      None \\<notin> set (xs @ [x]) \\<and>\n      (xs @ [x], W) \\<in> failures P \\<or>\n      xs @ [x] \\<in> sentences P \\<and>\n      (\\<exists>U V.\n          (xs @ [x], U) \\<in> failures P \\<and>\n          ([], V) \\<in> failures Q \\<and>\n          W = insert None U \\<inter> V)) \\<and>\n  (\\<forall>n\\<in>{0<..length (xs @ [x])}.\n      \\<forall>W\\<in>R' n.\n         take (length (xs @ [x]) - n) (xs @ [x]) \\<in> sentences P \\<and>\n         (drop (length (xs @ [x]) - n) (xs @ [x]), W)\n         \\<in> failures Q) \\<and>\n  (\\<exists>n\\<in>{..length (xs @ [x])}. \\<exists>W. W \\<in> R' n)\n\ngoal (1 subgoal):\n 1. \\<And>xs x.\n       \\<lbrakk>(xs @ [None], {}) \\<in> seq_comp_failures P Q;\n        (xs @ [x], {}) \\<in> seq_comp_failures P Q\\<rbrakk>\n       \\<Longrightarrow> x = None", "hence \"\\<exists>n \\<in> {..Suc (length xs)}. \\<exists>W. W \\<in> R' n\""], ["proof (prove)\nusing this:\n  {} = (\\<Union>n\\<le>length (xs @ [x]). \\<Union>W\\<in>R' n. W) \\<and>\n  (\\<forall>W\\<in>R' 0.\n      xs @ [x] \\<notin> sentences P \\<and>\n      None \\<notin> set (xs @ [x]) \\<and>\n      (xs @ [x], W) \\<in> failures P \\<or>\n      xs @ [x] \\<in> sentences P \\<and>\n      (\\<exists>U V.\n          (xs @ [x], U) \\<in> failures P \\<and>\n          ([], V) \\<in> failures Q \\<and>\n          W = insert None U \\<inter> V)) \\<and>\n  (\\<forall>n\\<in>{0<..length (xs @ [x])}.\n      \\<forall>W\\<in>R' n.\n         take (length (xs @ [x]) - n) (xs @ [x]) \\<in> sentences P \\<and>\n         (drop (length (xs @ [x]) - n) (xs @ [x]), W)\n         \\<in> failures Q) \\<and>\n  (\\<exists>n\\<in>{..length (xs @ [x])}. \\<exists>W. W \\<in> R' n)\n\ngoal (1 subgoal):\n 1. \\<exists>n\\<in>{..Suc (length xs)}. \\<exists>W. W \\<in> R' n", "by simp"], ["proof (state)\nthis:\n  \\<exists>n\\<in>{..Suc (length xs)}. \\<exists>W. W \\<in> R' n\n\ngoal (1 subgoal):\n 1. \\<And>xs x.\n       \\<lbrakk>(xs @ [None], {}) \\<in> seq_comp_failures P Q;\n        (xs @ [x], {}) \\<in> seq_comp_failures P Q\\<rbrakk>\n       \\<Longrightarrow> x = None", "then"], ["proof (chain)\npicking this:\n  \\<exists>n\\<in>{..Suc (length xs)}. \\<exists>W. W \\<in> R' n", "obtain n' where K: \"n' \\<in> {..Suc (length xs)}\" and L: \"\\<exists>W. W \\<in> R' n'\""], ["proof (prove)\nusing this:\n  \\<exists>n\\<in>{..Suc (length xs)}. \\<exists>W. W \\<in> R' n\n\ngoal (1 subgoal):\n 1. (\\<And>n'.\n        \\<lbrakk>n' \\<in> {..Suc (length xs)};\n         \\<exists>W. W \\<in> R' n'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  n' \\<in> {..Suc (length xs)}\n  \\<exists>W. W \\<in> R' n'\n\ngoal (1 subgoal):\n 1. \\<And>xs x.\n       \\<lbrakk>(xs @ [None], {}) \\<in> seq_comp_failures P Q;\n        (xs @ [x], {}) \\<in> seq_comp_failures P Q\\<rbrakk>\n       \\<Longrightarrow> x = None", "have \"n' = 0 \\<or> n' \\<in> {0<..Suc (length xs)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n' = 0 \\<or> n' \\<in> {0<..Suc (length xs)}", "using K"], ["proof (prove)\nusing this:\n  n' \\<in> {..Suc (length xs)}\n\ngoal (1 subgoal):\n 1. n' = 0 \\<or> n' \\<in> {0<..Suc (length xs)}", "by auto"], ["proof (state)\nthis:\n  n' = 0 \\<or> n' \\<in> {0<..Suc (length xs)}\n\ngoal (1 subgoal):\n 1. \\<And>xs x.\n       \\<lbrakk>(xs @ [None], {}) \\<in> seq_comp_failures P Q;\n        (xs @ [x], {}) \\<in> seq_comp_failures P Q\\<rbrakk>\n       \\<Longrightarrow> x = None", "thus \"x = None\""], ["proof (prove)\nusing this:\n  n' = 0 \\<or> n' \\<in> {0<..Suc (length xs)}\n\ngoal (1 subgoal):\n 1. x = None", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. n' = 0 \\<Longrightarrow> x = None\n 2. n' \\<in> {0<..Suc (length xs)} \\<Longrightarrow> x = None", "assume \"n' = 0\""], ["proof (state)\nthis:\n  n' = 0\n\ngoal (2 subgoals):\n 1. n' = 0 \\<Longrightarrow> x = None\n 2. n' \\<in> {0<..Suc (length xs)} \\<Longrightarrow> x = None", "hence \"\\<exists>W. W \\<in> R' 0\""], ["proof (prove)\nusing this:\n  n' = 0\n\ngoal (1 subgoal):\n 1. \\<exists>W. W \\<in> R' 0", "using L"], ["proof (prove)\nusing this:\n  n' = 0\n  \\<exists>W. W \\<in> R' n'\n\ngoal (1 subgoal):\n 1. \\<exists>W. W \\<in> R' 0", "by simp"], ["proof (state)\nthis:\n  \\<exists>W. W \\<in> R' 0\n\ngoal (2 subgoals):\n 1. n' = 0 \\<Longrightarrow> x = None\n 2. n' \\<in> {0<..Suc (length xs)} \\<Longrightarrow> x = None", "then"], ["proof (chain)\npicking this:\n  \\<exists>W. W \\<in> R' 0", "obtain W' where \"W' \\<in> R' 0\""], ["proof (prove)\nusing this:\n  \\<exists>W. W \\<in> R' 0\n\ngoal (1 subgoal):\n 1. (\\<And>W'. W' \\<in> R' 0 \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  W' \\<in> R' 0\n\ngoal (2 subgoals):\n 1. n' = 0 \\<Longrightarrow> x = None\n 2. n' \\<in> {0<..Suc (length xs)} \\<Longrightarrow> x = None", "hence\n       \"xs @ [x] \\<notin> sentences P \\<and>\n          None \\<notin> set (xs @ [x]) \\<and> (xs @ [x], W') \\<in> failures P \\<or>\n        xs @ [x] \\<in> sentences P \\<and>\n          (\\<exists>U V. (xs @ [x], U) \\<in> failures P \\<and> ([], V) \\<in> failures Q \\<and>\n            W' = insert None U \\<inter> V)\""], ["proof (prove)\nusing this:\n  W' \\<in> R' 0\n\ngoal (1 subgoal):\n 1. xs @ [x] \\<notin> sentences P \\<and>\n    None \\<notin> set (xs @ [x]) \\<and>\n    (xs @ [x], W') \\<in> failures P \\<or>\n    xs @ [x] \\<in> sentences P \\<and>\n    (\\<exists>U V.\n        (xs @ [x], U) \\<in> failures P \\<and>\n        ([], V) \\<in> failures Q \\<and> W' = insert None U \\<inter> V)", "using J"], ["proof (prove)\nusing this:\n  W' \\<in> R' 0\n  {} = (\\<Union>n\\<le>length (xs @ [x]). \\<Union>W\\<in>R' n. W) \\<and>\n  (\\<forall>W\\<in>R' 0.\n      xs @ [x] \\<notin> sentences P \\<and>\n      None \\<notin> set (xs @ [x]) \\<and>\n      (xs @ [x], W) \\<in> failures P \\<or>\n      xs @ [x] \\<in> sentences P \\<and>\n      (\\<exists>U V.\n          (xs @ [x], U) \\<in> failures P \\<and>\n          ([], V) \\<in> failures Q \\<and>\n          W = insert None U \\<inter> V)) \\<and>\n  (\\<forall>n\\<in>{0<..length (xs @ [x])}.\n      \\<forall>W\\<in>R' n.\n         take (length (xs @ [x]) - n) (xs @ [x]) \\<in> sentences P \\<and>\n         (drop (length (xs @ [x]) - n) (xs @ [x]), W)\n         \\<in> failures Q) \\<and>\n  (\\<exists>n\\<in>{..length (xs @ [x])}. \\<exists>W. W \\<in> R' n)\n\ngoal (1 subgoal):\n 1. xs @ [x] \\<notin> sentences P \\<and>\n    None \\<notin> set (xs @ [x]) \\<and>\n    (xs @ [x], W') \\<in> failures P \\<or>\n    xs @ [x] \\<in> sentences P \\<and>\n    (\\<exists>U V.\n        (xs @ [x], U) \\<in> failures P \\<and>\n        ([], V) \\<in> failures Q \\<and> W' = insert None U \\<inter> V)", "by simp"], ["proof (state)\nthis:\n  xs @ [x] \\<notin> sentences P \\<and>\n  None \\<notin> set (xs @ [x]) \\<and> (xs @ [x], W') \\<in> failures P \\<or>\n  xs @ [x] \\<in> sentences P \\<and>\n  (\\<exists>U V.\n      (xs @ [x], U) \\<in> failures P \\<and>\n      ([], V) \\<in> failures Q \\<and> W' = insert None U \\<inter> V)\n\ngoal (2 subgoals):\n 1. n' = 0 \\<Longrightarrow> x = None\n 2. n' \\<in> {0<..Suc (length xs)} \\<Longrightarrow> x = None", "hence M: \"xs @ [x] \\<in> traces P \\<and> None \\<notin> set (xs @ [x])\""], ["proof (prove)\nusing this:\n  xs @ [x] \\<notin> sentences P \\<and>\n  None \\<notin> set (xs @ [x]) \\<and> (xs @ [x], W') \\<in> failures P \\<or>\n  xs @ [x] \\<in> sentences P \\<and>\n  (\\<exists>U V.\n      (xs @ [x], U) \\<in> failures P \\<and>\n      ([], V) \\<in> failures Q \\<and> W' = insert None U \\<inter> V)\n\ngoal (1 subgoal):\n 1. xs @ [x] \\<in> traces P \\<and> None \\<notin> set (xs @ [x])", "proof (cases \"xs @ [x] \\<in> sentences P\", simp_all, (erule_tac [2] conjE)+,\n       simp_all)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<exists>U.\n                (xs @ [x], U) \\<in> failures P \\<and>\n                (\\<exists>V.\n                    ([], V) \\<in> failures Q \\<and>\n                    W' = insert None U \\<inter> V);\n     xs @ [x] \\<in> sentences P\\<rbrakk>\n    \\<Longrightarrow> xs @ [x] \\<in> traces P \\<and>\n                      None \\<noteq> x \\<and> None \\<notin> set xs\n 2. \\<lbrakk>xs @ [x] \\<notin> sentences P; None \\<noteq> x;\n     None \\<notin> set xs; (xs @ [x], W') \\<in> failures P\\<rbrakk>\n    \\<Longrightarrow> xs @ [x] \\<in> traces P", "case False"], ["proof (state)\nthis:\n  xs @ [x] \\<notin> sentences P\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<exists>U.\n                (xs @ [x], U) \\<in> failures P \\<and>\n                (\\<exists>V.\n                    ([], V) \\<in> failures Q \\<and>\n                    W' = insert None U \\<inter> V);\n     xs @ [x] \\<in> sentences P\\<rbrakk>\n    \\<Longrightarrow> xs @ [x] \\<in> traces P \\<and>\n                      None \\<noteq> x \\<and> None \\<notin> set xs\n 2. \\<lbrakk>xs @ [x] \\<notin> sentences P; None \\<noteq> x;\n     None \\<notin> set xs; (xs @ [x], W') \\<in> failures P\\<rbrakk>\n    \\<Longrightarrow> xs @ [x] \\<in> traces P", "assume \"(xs @ [x], W') \\<in> failures P\""], ["proof (state)\nthis:\n  (xs @ [x], W') \\<in> failures P\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<exists>U.\n                (xs @ [x], U) \\<in> failures P \\<and>\n                (\\<exists>V.\n                    ([], V) \\<in> failures Q \\<and>\n                    W' = insert None U \\<inter> V);\n     xs @ [x] \\<in> sentences P\\<rbrakk>\n    \\<Longrightarrow> xs @ [x] \\<in> traces P \\<and>\n                      None \\<noteq> x \\<and> None \\<notin> set xs\n 2. \\<lbrakk>xs @ [x] \\<notin> sentences P; None \\<noteq> x;\n     None \\<notin> set xs; (xs @ [x], W') \\<in> failures P\\<rbrakk>\n    \\<Longrightarrow> xs @ [x] \\<in> traces P", "thus \"xs @ [x] \\<in> traces P\""], ["proof (prove)\nusing this:\n  (xs @ [x], W') \\<in> failures P\n\ngoal (1 subgoal):\n 1. xs @ [x] \\<in> traces P", "by (rule failures_traces)"], ["proof (state)\nthis:\n  xs @ [x] \\<in> traces P\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<exists>U.\n                (xs @ [x], U) \\<in> failures P \\<and>\n                (\\<exists>V.\n                    ([], V) \\<in> failures Q \\<and>\n                    W' = insert None U \\<inter> V);\n     xs @ [x] \\<in> sentences P\\<rbrakk>\n    \\<Longrightarrow> xs @ [x] \\<in> traces P \\<and>\n                      None \\<noteq> x \\<and> None \\<notin> set xs", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<exists>U.\n                (xs @ [x], U) \\<in> failures P \\<and>\n                (\\<exists>V.\n                    ([], V) \\<in> failures Q \\<and>\n                    W' = insert None U \\<inter> V);\n     xs @ [x] \\<in> sentences P\\<rbrakk>\n    \\<Longrightarrow> xs @ [x] \\<in> traces P \\<and>\n                      None \\<noteq> x \\<and> None \\<notin> set xs", "case True"], ["proof (state)\nthis:\n  xs @ [x] \\<in> sentences P\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<exists>U.\n                (xs @ [x], U) \\<in> failures P \\<and>\n                (\\<exists>V.\n                    ([], V) \\<in> failures Q \\<and>\n                    W' = insert None U \\<inter> V);\n     xs @ [x] \\<in> sentences P\\<rbrakk>\n    \\<Longrightarrow> xs @ [x] \\<in> traces P \\<and>\n                      None \\<noteq> x \\<and> None \\<notin> set xs", "hence \"(xs @ [x]) @ [None] \\<in> traces P\""], ["proof (prove)\nusing this:\n  xs @ [x] \\<in> sentences P\n\ngoal (1 subgoal):\n 1. (xs @ [x]) @ [None] \\<in> traces P", "by (simp add: sentences_def)"], ["proof (state)\nthis:\n  (xs @ [x]) @ [None] \\<in> traces P\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<exists>U.\n                (xs @ [x], U) \\<in> failures P \\<and>\n                (\\<exists>V.\n                    ([], V) \\<in> failures Q \\<and>\n                    W' = insert None U \\<inter> V);\n     xs @ [x] \\<in> sentences P\\<rbrakk>\n    \\<Longrightarrow> xs @ [x] \\<in> traces P \\<and>\n                      None \\<noteq> x \\<and> None \\<notin> set xs", "hence \"xs @ [x] \\<in> traces P\""], ["proof (prove)\nusing this:\n  (xs @ [x]) @ [None] \\<in> traces P\n\ngoal (1 subgoal):\n 1. xs @ [x] \\<in> traces P", "by (rule process_rule_2_traces)"], ["proof (state)\nthis:\n  xs @ [x] \\<in> traces P\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<exists>U.\n                (xs @ [x], U) \\<in> failures P \\<and>\n                (\\<exists>V.\n                    ([], V) \\<in> failures Q \\<and>\n                    W' = insert None U \\<inter> V);\n     xs @ [x] \\<in> sentences P\\<rbrakk>\n    \\<Longrightarrow> xs @ [x] \\<in> traces P \\<and>\n                      None \\<noteq> x \\<and> None \\<notin> set xs", "moreover"], ["proof (state)\nthis:\n  xs @ [x] \\<in> traces P\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<exists>U.\n                (xs @ [x], U) \\<in> failures P \\<and>\n                (\\<exists>V.\n                    ([], V) \\<in> failures Q \\<and>\n                    W' = insert None U \\<inter> V);\n     xs @ [x] \\<in> sentences P\\<rbrakk>\n    \\<Longrightarrow> xs @ [x] \\<in> traces P \\<and>\n                      None \\<noteq> x \\<and> None \\<notin> set xs", "have \"None \\<notin> set (xs @ [x])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. None \\<notin> set (xs @ [x])", "using C and True"], ["proof (prove)\nusing this:\n  weakly_sequential P\n  xs @ [x] \\<in> sentences P\n\ngoal (1 subgoal):\n 1. None \\<notin> set (xs @ [x])", "by (rule weakly_seq_sentences_none)"], ["proof (state)\nthis:\n  None \\<notin> set (xs @ [x])\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<exists>U.\n                (xs @ [x], U) \\<in> failures P \\<and>\n                (\\<exists>V.\n                    ([], V) \\<in> failures Q \\<and>\n                    W' = insert None U \\<inter> V);\n     xs @ [x] \\<in> sentences P\\<rbrakk>\n    \\<Longrightarrow> xs @ [x] \\<in> traces P \\<and>\n                      None \\<noteq> x \\<and> None \\<notin> set xs", "ultimately"], ["proof (chain)\npicking this:\n  xs @ [x] \\<in> traces P\n  None \\<notin> set (xs @ [x])", "show \"xs @ [x] \\<in> traces P \\<and> None \\<noteq> x \\<and> None \\<notin> set xs\""], ["proof (prove)\nusing this:\n  xs @ [x] \\<in> traces P\n  None \\<notin> set (xs @ [x])\n\ngoal (1 subgoal):\n 1. xs @ [x] \\<in> traces P \\<and>\n    None \\<noteq> x \\<and> None \\<notin> set xs", "by simp"], ["proof (state)\nthis:\n  xs @ [x] \\<in> traces P \\<and> None \\<noteq> x \\<and> None \\<notin> set xs\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  xs @ [x] \\<in> traces P \\<and> None \\<notin> set (xs @ [x])\n\ngoal (2 subgoals):\n 1. n' = 0 \\<Longrightarrow> x = None\n 2. n' \\<in> {0<..Suc (length xs)} \\<Longrightarrow> x = None", "have \"xs @ [x] = take (Suc (length xs) - n) (xs @ [x]) @\n        drop (Suc (length xs) - n) (xs @ [x])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs @ [x] =\n    take (Suc (length xs) - n) (xs @ [x]) @\n    drop (Suc (length xs) - n) (xs @ [x])", "by (simp only: append_take_drop_id)"], ["proof (state)\nthis:\n  xs @ [x] =\n  take (Suc (length xs) - n) (xs @ [x]) @\n  drop (Suc (length xs) - n) (xs @ [x])\n\ngoal (2 subgoals):\n 1. n' = 0 \\<Longrightarrow> x = None\n 2. n' \\<in> {0<..Suc (length xs)} \\<Longrightarrow> x = None", "hence \"xs @ [x] = take (Suc (length xs) - n) xs @\n        drop (Suc (length xs) - n) xs @ [x]\""], ["proof (prove)\nusing this:\n  xs @ [x] =\n  take (Suc (length xs) - n) (xs @ [x]) @\n  drop (Suc (length xs) - n) (xs @ [x])\n\ngoal (1 subgoal):\n 1. xs @ [x] =\n    take (Suc (length xs) - n) xs @ drop (Suc (length xs) - n) xs @ [x]", "using H"], ["proof (prove)\nusing this:\n  xs @ [x] =\n  take (Suc (length xs) - n) (xs @ [x]) @\n  drop (Suc (length xs) - n) (xs @ [x])\n  Suc (length xs) - n \\<le> length xs\n\ngoal (1 subgoal):\n 1. xs @ [x] =\n    take (Suc (length xs) - n) xs @ drop (Suc (length xs) - n) xs @ [x]", "by simp"], ["proof (state)\nthis:\n  xs @ [x] =\n  take (Suc (length xs) - n) xs @ drop (Suc (length xs) - n) xs @ [x]\n\ngoal (2 subgoals):\n 1. n' = 0 \\<Longrightarrow> x = None\n 2. n' \\<in> {0<..Suc (length xs)} \\<Longrightarrow> x = None", "moreover"], ["proof (state)\nthis:\n  xs @ [x] =\n  take (Suc (length xs) - n) xs @ drop (Suc (length xs) - n) xs @ [x]\n\ngoal (2 subgoals):\n 1. n' = 0 \\<Longrightarrow> x = None\n 2. n' \\<in> {0<..Suc (length xs)} \\<Longrightarrow> x = None", "have \"\\<exists>y ys. drop (Suc (length xs) - n) xs @ [x] = y # ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>y ys. drop (Suc (length xs) - n) xs @ [x] = y # ys", "by (cases \"drop (Suc (length xs) - n) xs @ [x]\", simp_all)"], ["proof (state)\nthis:\n  \\<exists>y ys. drop (Suc (length xs) - n) xs @ [x] = y # ys\n\ngoal (2 subgoals):\n 1. n' = 0 \\<Longrightarrow> x = None\n 2. n' \\<in> {0<..Suc (length xs)} \\<Longrightarrow> x = None", "then"], ["proof (chain)\npicking this:\n  \\<exists>y ys. drop (Suc (length xs) - n) xs @ [x] = y # ys", "obtain y and ys where \"drop (Suc (length xs) - n) xs @ [x] = y # ys\""], ["proof (prove)\nusing this:\n  \\<exists>y ys. drop (Suc (length xs) - n) xs @ [x] = y # ys\n\ngoal (1 subgoal):\n 1. (\\<And>y ys.\n        drop (Suc (length xs) - n) xs @ [x] = y # ys \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  drop (Suc (length xs) - n) xs @ [x] = y # ys\n\ngoal (2 subgoals):\n 1. n' = 0 \\<Longrightarrow> x = None\n 2. n' \\<in> {0<..Suc (length xs)} \\<Longrightarrow> x = None", "ultimately"], ["proof (chain)\npicking this:\n  xs @ [x] =\n  take (Suc (length xs) - n) xs @ drop (Suc (length xs) - n) xs @ [x]\n  drop (Suc (length xs) - n) xs @ [x] = y # ys", "have N: \"xs @ [x] = take (Suc (length xs) - n) xs @ y # ys\""], ["proof (prove)\nusing this:\n  xs @ [x] =\n  take (Suc (length xs) - n) xs @ drop (Suc (length xs) - n) xs @ [x]\n  drop (Suc (length xs) - n) xs @ [x] = y # ys\n\ngoal (1 subgoal):\n 1. xs @ [x] = take (Suc (length xs) - n) xs @ y # ys", "by simp"], ["proof (state)\nthis:\n  xs @ [x] = take (Suc (length xs) - n) xs @ y # ys\n\ngoal (2 subgoals):\n 1. n' = 0 \\<Longrightarrow> x = None\n 2. n' \\<in> {0<..Suc (length xs)} \\<Longrightarrow> x = None", "have \"take (Suc (length xs) - n) xs \\<in> sentences P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. take (Suc (length xs) - n) xs \\<in> sentences P", "using I"], ["proof (prove)\nusing this:\n  take (Suc (length xs) - n) xs \\<in> sentences P \\<and>\n  (drop (Suc (length xs) - n) xs @ [None], W) \\<in> failures Q\n\ngoal (1 subgoal):\n 1. take (Suc (length xs) - n) xs \\<in> sentences P", ".."], ["proof (state)\nthis:\n  take (Suc (length xs) - n) xs \\<in> sentences P\n\ngoal (2 subgoals):\n 1. n' = 0 \\<Longrightarrow> x = None\n 2. n' \\<in> {0<..Suc (length xs)} \\<Longrightarrow> x = None", "moreover"], ["proof (state)\nthis:\n  take (Suc (length xs) - n) xs \\<in> sentences P\n\ngoal (2 subgoals):\n 1. n' = 0 \\<Longrightarrow> x = None\n 2. n' \\<in> {0<..Suc (length xs)} \\<Longrightarrow> x = None", "have \"take (Suc (length xs) - n) xs @ y # ys \\<in> traces P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. take (Suc (length xs) - n) xs @ y # ys \\<in> traces P", "using M and N"], ["proof (prove)\nusing this:\n  xs @ [x] \\<in> traces P \\<and> None \\<notin> set (xs @ [x])\n  xs @ [x] = take (Suc (length xs) - n) xs @ y # ys\n\ngoal (1 subgoal):\n 1. take (Suc (length xs) - n) xs @ y # ys \\<in> traces P", "by simp"], ["proof (state)\nthis:\n  take (Suc (length xs) - n) xs @ y # ys \\<in> traces P\n\ngoal (2 subgoals):\n 1. n' = 0 \\<Longrightarrow> x = None\n 2. n' \\<in> {0<..Suc (length xs)} \\<Longrightarrow> x = None", "ultimately"], ["proof (chain)\npicking this:\n  take (Suc (length xs) - n) xs \\<in> sentences P\n  take (Suc (length xs) - n) xs @ y # ys \\<in> traces P", "have \"y = None\""], ["proof (prove)\nusing this:\n  take (Suc (length xs) - n) xs \\<in> sentences P\n  take (Suc (length xs) - n) xs @ y # ys \\<in> traces P\n\ngoal (1 subgoal):\n 1. y = None", "by (rule seq_sentences_none [OF A])"], ["proof (state)\nthis:\n  y = None\n\ngoal (2 subgoals):\n 1. n' = 0 \\<Longrightarrow> x = None\n 2. n' \\<in> {0<..Suc (length xs)} \\<Longrightarrow> x = None", "moreover"], ["proof (state)\nthis:\n  y = None\n\ngoal (2 subgoals):\n 1. n' = 0 \\<Longrightarrow> x = None\n 2. n' \\<in> {0<..Suc (length xs)} \\<Longrightarrow> x = None", "have \"y \\<noteq> None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y \\<noteq> None", "using M and N"], ["proof (prove)\nusing this:\n  xs @ [x] \\<in> traces P \\<and> None \\<notin> set (xs @ [x])\n  xs @ [x] = take (Suc (length xs) - n) xs @ y # ys\n\ngoal (1 subgoal):\n 1. y \\<noteq> None", "by (rule_tac not_sym, simp)"], ["proof (state)\nthis:\n  y \\<noteq> None\n\ngoal (2 subgoals):\n 1. n' = 0 \\<Longrightarrow> x = None\n 2. n' \\<in> {0<..Suc (length xs)} \\<Longrightarrow> x = None", "ultimately"], ["proof (chain)\npicking this:\n  y = None\n  y \\<noteq> None", "show ?thesis"], ["proof (prove)\nusing this:\n  y = None\n  y \\<noteq> None\n\ngoal (1 subgoal):\n 1. x = None", "by contradiction"], ["proof (state)\nthis:\n  x = None\n\ngoal (1 subgoal):\n 1. n' \\<in> {0<..Suc (length xs)} \\<Longrightarrow> x = None", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. n' \\<in> {0<..Suc (length xs)} \\<Longrightarrow> x = None", "assume M: \"n' \\<in> {0<..Suc (length xs)}\""], ["proof (state)\nthis:\n  n' \\<in> {0<..Suc (length xs)}\n\ngoal (1 subgoal):\n 1. n' \\<in> {0<..Suc (length xs)} \\<Longrightarrow> x = None", "moreover"], ["proof (state)\nthis:\n  n' \\<in> {0<..Suc (length xs)}\n\ngoal (1 subgoal):\n 1. n' \\<in> {0<..Suc (length xs)} \\<Longrightarrow> x = None", "obtain W' where \"W' \\<in> R' n'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>W'. W' \\<in> R' n' \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using L"], ["proof (prove)\nusing this:\n  \\<exists>W. W \\<in> R' n'\n\ngoal (1 subgoal):\n 1. (\\<And>W'. W' \\<in> R' n' \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  W' \\<in> R' n'\n\ngoal (1 subgoal):\n 1. n' \\<in> {0<..Suc (length xs)} \\<Longrightarrow> x = None", "ultimately"], ["proof (chain)\npicking this:\n  n' \\<in> {0<..Suc (length xs)}\n  W' \\<in> R' n'", "have\n       \"take (Suc (length xs) - n') (xs @ [x]) \\<in> sentences P \\<and>\n        (drop (Suc (length xs) - n') (xs @ [x]), W') \\<in> failures Q\""], ["proof (prove)\nusing this:\n  n' \\<in> {0<..Suc (length xs)}\n  W' \\<in> R' n'\n\ngoal (1 subgoal):\n 1. take (Suc (length xs) - n') (xs @ [x]) \\<in> sentences P \\<and>\n    (drop (Suc (length xs) - n') (xs @ [x]), W') \\<in> failures Q", "using J"], ["proof (prove)\nusing this:\n  n' \\<in> {0<..Suc (length xs)}\n  W' \\<in> R' n'\n  {} = (\\<Union>n\\<le>length (xs @ [x]). \\<Union>W\\<in>R' n. W) \\<and>\n  (\\<forall>W\\<in>R' 0.\n      xs @ [x] \\<notin> sentences P \\<and>\n      None \\<notin> set (xs @ [x]) \\<and>\n      (xs @ [x], W) \\<in> failures P \\<or>\n      xs @ [x] \\<in> sentences P \\<and>\n      (\\<exists>U V.\n          (xs @ [x], U) \\<in> failures P \\<and>\n          ([], V) \\<in> failures Q \\<and>\n          W = insert None U \\<inter> V)) \\<and>\n  (\\<forall>n\\<in>{0<..length (xs @ [x])}.\n      \\<forall>W\\<in>R' n.\n         take (length (xs @ [x]) - n) (xs @ [x]) \\<in> sentences P \\<and>\n         (drop (length (xs @ [x]) - n) (xs @ [x]), W)\n         \\<in> failures Q) \\<and>\n  (\\<exists>n\\<in>{..length (xs @ [x])}. \\<exists>W. W \\<in> R' n)\n\ngoal (1 subgoal):\n 1. take (Suc (length xs) - n') (xs @ [x]) \\<in> sentences P \\<and>\n    (drop (Suc (length xs) - n') (xs @ [x]), W') \\<in> failures Q", "by simp"], ["proof (state)\nthis:\n  take (Suc (length xs) - n') (xs @ [x]) \\<in> sentences P \\<and>\n  (drop (Suc (length xs) - n') (xs @ [x]), W') \\<in> failures Q\n\ngoal (1 subgoal):\n 1. n' \\<in> {0<..Suc (length xs)} \\<Longrightarrow> x = None", "moreover"], ["proof (state)\nthis:\n  take (Suc (length xs) - n') (xs @ [x]) \\<in> sentences P \\<and>\n  (drop (Suc (length xs) - n') (xs @ [x]), W') \\<in> failures Q\n\ngoal (1 subgoal):\n 1. n' \\<in> {0<..Suc (length xs)} \\<Longrightarrow> x = None", "have N: \"Suc (length xs) - n' \\<le> length xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Suc (length xs) - n' \\<le> length xs", "using M"], ["proof (prove)\nusing this:\n  n' \\<in> {0<..Suc (length xs)}\n\ngoal (1 subgoal):\n 1. Suc (length xs) - n' \\<le> length xs", "by (simp, arith)"], ["proof (state)\nthis:\n  Suc (length xs) - n' \\<le> length xs\n\ngoal (1 subgoal):\n 1. n' \\<in> {0<..Suc (length xs)} \\<Longrightarrow> x = None", "ultimately"], ["proof (chain)\npicking this:\n  take (Suc (length xs) - n') (xs @ [x]) \\<in> sentences P \\<and>\n  (drop (Suc (length xs) - n') (xs @ [x]), W') \\<in> failures Q\n  Suc (length xs) - n' \\<le> length xs", "have O:\n       \"take (Suc (length xs) - n') xs \\<in> sentences P \\<and>\n        (drop (Suc (length xs) - n') xs @ [x], W') \\<in> failures Q\""], ["proof (prove)\nusing this:\n  take (Suc (length xs) - n') (xs @ [x]) \\<in> sentences P \\<and>\n  (drop (Suc (length xs) - n') (xs @ [x]), W') \\<in> failures Q\n  Suc (length xs) - n' \\<le> length xs\n\ngoal (1 subgoal):\n 1. take (Suc (length xs) - n') xs \\<in> sentences P \\<and>\n    (drop (Suc (length xs) - n') xs @ [x], W') \\<in> failures Q", "by simp"], ["proof (state)\nthis:\n  take (Suc (length xs) - n') xs \\<in> sentences P \\<and>\n  (drop (Suc (length xs) - n') xs @ [x], W') \\<in> failures Q\n\ngoal (1 subgoal):\n 1. n' \\<in> {0<..Suc (length xs)} \\<Longrightarrow> x = None", "moreover"], ["proof (state)\nthis:\n  take (Suc (length xs) - n') xs \\<in> sentences P \\<and>\n  (drop (Suc (length xs) - n') xs @ [x], W') \\<in> failures Q\n\ngoal (1 subgoal):\n 1. n' \\<in> {0<..Suc (length xs)} \\<Longrightarrow> x = None", "have \"n = n'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n = n'", "proof (rule ccontr, simp add: neq_iff, erule disjE)"], ["proof (state)\ngoal (2 subgoals):\n 1. n < n' \\<Longrightarrow> False\n 2. n' < n \\<Longrightarrow> False", "assume P: \"n < n'\""], ["proof (state)\nthis:\n  n < n'\n\ngoal (2 subgoals):\n 1. n < n' \\<Longrightarrow> False\n 2. n' < n \\<Longrightarrow> False", "have \"take (Suc (length xs) - n) xs =\n          take (Suc (length xs) - n') (take (Suc (length xs) - n) xs) @\n          drop (Suc (length xs) - n') (take (Suc (length xs) - n) xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. take (Suc (length xs) - n) xs =\n    take (Suc (length xs) - n') (take (Suc (length xs) - n) xs) @\n    drop (Suc (length xs) - n') (take (Suc (length xs) - n) xs)", "by (simp only: append_take_drop_id)"], ["proof (state)\nthis:\n  take (Suc (length xs) - n) xs =\n  take (Suc (length xs) - n') (take (Suc (length xs) - n) xs) @\n  drop (Suc (length xs) - n') (take (Suc (length xs) - n) xs)\n\ngoal (2 subgoals):\n 1. n < n' \\<Longrightarrow> False\n 2. n' < n \\<Longrightarrow> False", "also"], ["proof (state)\nthis:\n  take (Suc (length xs) - n) xs =\n  take (Suc (length xs) - n') (take (Suc (length xs) - n) xs) @\n  drop (Suc (length xs) - n') (take (Suc (length xs) - n) xs)\n\ngoal (2 subgoals):\n 1. n < n' \\<Longrightarrow> False\n 2. n' < n \\<Longrightarrow> False", "have \"\\<dots> =\n          take (Suc (length xs) - n') xs @\n          drop (Suc (length xs) - n') (take (Suc (length xs) - n) xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. take (Suc (length xs) - n') (take (Suc (length xs) - n) xs) @\n    drop (Suc (length xs) - n') (take (Suc (length xs) - n) xs) =\n    take (Suc (length xs) - n') xs @\n    drop (Suc (length xs) - n') (take (Suc (length xs) - n) xs)", "using P"], ["proof (prove)\nusing this:\n  n < n'\n\ngoal (1 subgoal):\n 1. take (Suc (length xs) - n') (take (Suc (length xs) - n) xs) @\n    drop (Suc (length xs) - n') (take (Suc (length xs) - n) xs) =\n    take (Suc (length xs) - n') xs @\n    drop (Suc (length xs) - n') (take (Suc (length xs) - n) xs)", "by (simp add: min_def)"], ["proof (state)\nthis:\n  take (Suc (length xs) - n') (take (Suc (length xs) - n) xs) @\n  drop (Suc (length xs) - n') (take (Suc (length xs) - n) xs) =\n  take (Suc (length xs) - n') xs @\n  drop (Suc (length xs) - n') (take (Suc (length xs) - n) xs)\n\ngoal (2 subgoals):\n 1. n < n' \\<Longrightarrow> False\n 2. n' < n \\<Longrightarrow> False", "also"], ["proof (state)\nthis:\n  take (Suc (length xs) - n') (take (Suc (length xs) - n) xs) @\n  drop (Suc (length xs) - n') (take (Suc (length xs) - n) xs) =\n  take (Suc (length xs) - n') xs @\n  drop (Suc (length xs) - n') (take (Suc (length xs) - n) xs)\n\ngoal (2 subgoals):\n 1. n < n' \\<Longrightarrow> False\n 2. n' < n \\<Longrightarrow> False", "have \"\\<dots> =\n          take (Suc (length xs) - n') xs @\n          take (n' - n) (drop (Suc (length xs) - n') xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. take (Suc (length xs) - n') xs @\n    drop (Suc (length xs) - n') (take (Suc (length xs) - n) xs) =\n    take (Suc (length xs) - n') xs @\n    take (n' - n) (drop (Suc (length xs) - n') xs)", "using M"], ["proof (prove)\nusing this:\n  n' \\<in> {0<..Suc (length xs)}\n\ngoal (1 subgoal):\n 1. take (Suc (length xs) - n') xs @\n    drop (Suc (length xs) - n') (take (Suc (length xs) - n) xs) =\n    take (Suc (length xs) - n') xs @\n    take (n' - n) (drop (Suc (length xs) - n') xs)", "by (subst drop_take, simp)"], ["proof (state)\nthis:\n  take (Suc (length xs) - n') xs @\n  drop (Suc (length xs) - n') (take (Suc (length xs) - n) xs) =\n  take (Suc (length xs) - n') xs @\n  take (n' - n) (drop (Suc (length xs) - n') xs)\n\ngoal (2 subgoals):\n 1. n < n' \\<Longrightarrow> False\n 2. n' < n \\<Longrightarrow> False", "finally"], ["proof (chain)\npicking this:\n  take (Suc (length xs) - n) xs =\n  take (Suc (length xs) - n') xs @\n  take (n' - n) (drop (Suc (length xs) - n') xs)", "have \"take (Suc (length xs) - n) xs =\n          take (Suc (length xs) - n') xs @\n          take (n' - n) (drop (Suc (length xs) - n') xs)\""], ["proof (prove)\nusing this:\n  take (Suc (length xs) - n) xs =\n  take (Suc (length xs) - n') xs @\n  take (n' - n) (drop (Suc (length xs) - n') xs)\n\ngoal (1 subgoal):\n 1. take (Suc (length xs) - n) xs =\n    take (Suc (length xs) - n') xs @\n    take (n' - n) (drop (Suc (length xs) - n') xs)", "."], ["proof (state)\nthis:\n  take (Suc (length xs) - n) xs =\n  take (Suc (length xs) - n') xs @\n  take (n' - n) (drop (Suc (length xs) - n') xs)\n\ngoal (2 subgoals):\n 1. n < n' \\<Longrightarrow> False\n 2. n' < n \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  take (Suc (length xs) - n) xs =\n  take (Suc (length xs) - n') xs @\n  take (n' - n) (drop (Suc (length xs) - n') xs)\n\ngoal (2 subgoals):\n 1. n < n' \\<Longrightarrow> False\n 2. n' < n \\<Longrightarrow> False", "have \"take (n' - n) (drop (Suc (length xs) - n') xs) \\<noteq> []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. take (n' - n) (drop (Suc (length xs) - n') xs) \\<noteq> []", "proof (rule_tac notI, simp, erule disjE)"], ["proof (state)\ngoal (2 subgoals):\n 1. n' \\<le> n \\<Longrightarrow> False\n 2. length xs \\<le> Suc (length xs) - n' \\<Longrightarrow> False", "assume \"n' \\<le> n\""], ["proof (state)\nthis:\n  n' \\<le> n\n\ngoal (2 subgoals):\n 1. n' \\<le> n \\<Longrightarrow> False\n 2. length xs \\<le> Suc (length xs) - n' \\<Longrightarrow> False", "thus False"], ["proof (prove)\nusing this:\n  n' \\<le> n\n\ngoal (1 subgoal):\n 1. False", "using P"], ["proof (prove)\nusing this:\n  n' \\<le> n\n  n < n'\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. length xs \\<le> Suc (length xs) - n' \\<Longrightarrow> False", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. length xs \\<le> Suc (length xs) - n' \\<Longrightarrow> False", "assume \"length xs \\<le> Suc (length xs) - n'\""], ["proof (state)\nthis:\n  length xs \\<le> Suc (length xs) - n'\n\ngoal (1 subgoal):\n 1. length xs \\<le> Suc (length xs) - n' \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  length xs \\<le> Suc (length xs) - n'\n\ngoal (1 subgoal):\n 1. length xs \\<le> Suc (length xs) - n' \\<Longrightarrow> False", "have \"Suc (length xs) - n' < Suc (length xs) - n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Suc (length xs) - n' < Suc (length xs) - n", "using M and P"], ["proof (prove)\nusing this:\n  n' \\<in> {0<..Suc (length xs)}\n  n < n'\n\ngoal (1 subgoal):\n 1. Suc (length xs) - n' < Suc (length xs) - n", "by simp"], ["proof (state)\nthis:\n  Suc (length xs) - n' < Suc (length xs) - n\n\ngoal (1 subgoal):\n 1. length xs \\<le> Suc (length xs) - n' \\<Longrightarrow> False", "hence \"Suc (length xs) - n' < length xs\""], ["proof (prove)\nusing this:\n  Suc (length xs) - n' < Suc (length xs) - n\n\ngoal (1 subgoal):\n 1. Suc (length xs) - n' < length xs", "using H"], ["proof (prove)\nusing this:\n  Suc (length xs) - n' < Suc (length xs) - n\n  Suc (length xs) - n \\<le> length xs\n\ngoal (1 subgoal):\n 1. Suc (length xs) - n' < length xs", "by simp"], ["proof (state)\nthis:\n  Suc (length xs) - n' < length xs\n\ngoal (1 subgoal):\n 1. length xs \\<le> Suc (length xs) - n' \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  length xs \\<le> Suc (length xs) - n'\n  Suc (length xs) - n' < length xs", "show False"], ["proof (prove)\nusing this:\n  length xs \\<le> Suc (length xs) - n'\n  Suc (length xs) - n' < length xs\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  take (n' - n) (drop (Suc (length xs) - n') xs) \\<noteq> []\n\ngoal (2 subgoals):\n 1. n < n' \\<Longrightarrow> False\n 2. n' < n \\<Longrightarrow> False", "hence \"\\<exists>y ys. take (n' - n) (drop (Suc (length xs) - n') xs) = y # ys\""], ["proof (prove)\nusing this:\n  take (n' - n) (drop (Suc (length xs) - n') xs) \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<exists>y ys. take (n' - n) (drop (Suc (length xs) - n') xs) = y # ys", "by (cases \"take (n' - n) (drop (Suc (length xs) - n') xs)\", simp_all)"], ["proof (state)\nthis:\n  \\<exists>y ys. take (n' - n) (drop (Suc (length xs) - n') xs) = y # ys\n\ngoal (2 subgoals):\n 1. n < n' \\<Longrightarrow> False\n 2. n' < n \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  \\<exists>y ys. take (n' - n) (drop (Suc (length xs) - n') xs) = y # ys", "obtain y and ys where\n         \"take (n' - n) (drop (Suc (length xs) - n') xs) = y # ys\""], ["proof (prove)\nusing this:\n  \\<exists>y ys. take (n' - n) (drop (Suc (length xs) - n') xs) = y # ys\n\ngoal (1 subgoal):\n 1. (\\<And>y ys.\n        take (n' - n) (drop (Suc (length xs) - n') xs) =\n        y # ys \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  take (n' - n) (drop (Suc (length xs) - n') xs) = y # ys\n\ngoal (2 subgoals):\n 1. n < n' \\<Longrightarrow> False\n 2. n' < n \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  take (Suc (length xs) - n) xs =\n  take (Suc (length xs) - n') xs @\n  take (n' - n) (drop (Suc (length xs) - n') xs)\n  take (n' - n) (drop (Suc (length xs) - n') xs) = y # ys", "have Q: \"take (Suc (length xs) - n) xs =\n          take (Suc (length xs) - n') xs @ y # ys\""], ["proof (prove)\nusing this:\n  take (Suc (length xs) - n) xs =\n  take (Suc (length xs) - n') xs @\n  take (n' - n) (drop (Suc (length xs) - n') xs)\n  take (n' - n) (drop (Suc (length xs) - n') xs) = y # ys\n\ngoal (1 subgoal):\n 1. take (Suc (length xs) - n) xs = take (Suc (length xs) - n') xs @ y # ys", "by simp"], ["proof (state)\nthis:\n  take (Suc (length xs) - n) xs = take (Suc (length xs) - n') xs @ y # ys\n\ngoal (2 subgoals):\n 1. n < n' \\<Longrightarrow> False\n 2. n' < n \\<Longrightarrow> False", "have \"take (Suc (length xs) - n') xs \\<in> sentences P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. take (Suc (length xs) - n') xs \\<in> sentences P", "using O"], ["proof (prove)\nusing this:\n  take (Suc (length xs) - n') xs \\<in> sentences P \\<and>\n  (drop (Suc (length xs) - n') xs @ [x], W') \\<in> failures Q\n\ngoal (1 subgoal):\n 1. take (Suc (length xs) - n') xs \\<in> sentences P", ".."], ["proof (state)\nthis:\n  take (Suc (length xs) - n') xs \\<in> sentences P\n\ngoal (2 subgoals):\n 1. n < n' \\<Longrightarrow> False\n 2. n' < n \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  take (Suc (length xs) - n') xs \\<in> sentences P\n\ngoal (2 subgoals):\n 1. n < n' \\<Longrightarrow> False\n 2. n' < n \\<Longrightarrow> False", "have R: \"take (Suc (length xs) - n) xs \\<in> sentences P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. take (Suc (length xs) - n) xs \\<in> sentences P", "using I"], ["proof (prove)\nusing this:\n  take (Suc (length xs) - n) xs \\<in> sentences P \\<and>\n  (drop (Suc (length xs) - n) xs @ [None], W) \\<in> failures Q\n\ngoal (1 subgoal):\n 1. take (Suc (length xs) - n) xs \\<in> sentences P", ".."], ["proof (state)\nthis:\n  take (Suc (length xs) - n) xs \\<in> sentences P\n\ngoal (2 subgoals):\n 1. n < n' \\<Longrightarrow> False\n 2. n' < n \\<Longrightarrow> False", "hence \"take (Suc (length xs) - n) xs @ [None] \\<in> traces P\""], ["proof (prove)\nusing this:\n  take (Suc (length xs) - n) xs \\<in> sentences P\n\ngoal (1 subgoal):\n 1. take (Suc (length xs) - n) xs @ [None] \\<in> traces P", "by (simp add: sentences_def)"], ["proof (state)\nthis:\n  take (Suc (length xs) - n) xs @ [None] \\<in> traces P\n\ngoal (2 subgoals):\n 1. n < n' \\<Longrightarrow> False\n 2. n' < n \\<Longrightarrow> False", "hence \"take (Suc (length xs) - n) xs \\<in> traces P\""], ["proof (prove)\nusing this:\n  take (Suc (length xs) - n) xs @ [None] \\<in> traces P\n\ngoal (1 subgoal):\n 1. take (Suc (length xs) - n) xs \\<in> traces P", "by (rule process_rule_2_traces)"], ["proof (state)\nthis:\n  take (Suc (length xs) - n) xs \\<in> traces P\n\ngoal (2 subgoals):\n 1. n < n' \\<Longrightarrow> False\n 2. n' < n \\<Longrightarrow> False", "hence \"take (Suc (length xs) - n') xs @ y # ys \\<in> traces P\""], ["proof (prove)\nusing this:\n  take (Suc (length xs) - n) xs \\<in> traces P\n\ngoal (1 subgoal):\n 1. take (Suc (length xs) - n') xs @ y # ys \\<in> traces P", "using Q"], ["proof (prove)\nusing this:\n  take (Suc (length xs) - n) xs \\<in> traces P\n  take (Suc (length xs) - n) xs = take (Suc (length xs) - n') xs @ y # ys\n\ngoal (1 subgoal):\n 1. take (Suc (length xs) - n') xs @ y # ys \\<in> traces P", "by simp"], ["proof (state)\nthis:\n  take (Suc (length xs) - n') xs @ y # ys \\<in> traces P\n\ngoal (2 subgoals):\n 1. n < n' \\<Longrightarrow> False\n 2. n' < n \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  take (Suc (length xs) - n') xs \\<in> sentences P\n  take (Suc (length xs) - n') xs @ y # ys \\<in> traces P", "have \"y = None\""], ["proof (prove)\nusing this:\n  take (Suc (length xs) - n') xs \\<in> sentences P\n  take (Suc (length xs) - n') xs @ y # ys \\<in> traces P\n\ngoal (1 subgoal):\n 1. y = None", "by (rule seq_sentences_none [OF A])"], ["proof (state)\nthis:\n  y = None\n\ngoal (2 subgoals):\n 1. n < n' \\<Longrightarrow> False\n 2. n' < n \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  y = None\n\ngoal (2 subgoals):\n 1. n < n' \\<Longrightarrow> False\n 2. n' < n \\<Longrightarrow> False", "have \"None \\<notin> set (take (Suc (length xs) - n) xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. None \\<notin> set (take (Suc (length xs) - n) xs)", "using C and R"], ["proof (prove)\nusing this:\n  weakly_sequential P\n  take (Suc (length xs) - n) xs \\<in> sentences P\n\ngoal (1 subgoal):\n 1. None \\<notin> set (take (Suc (length xs) - n) xs)", "by (rule weakly_seq_sentences_none)"], ["proof (state)\nthis:\n  None \\<notin> set (take (Suc (length xs) - n) xs)\n\ngoal (2 subgoals):\n 1. n < n' \\<Longrightarrow> False\n 2. n' < n \\<Longrightarrow> False", "hence \"y \\<noteq> None\""], ["proof (prove)\nusing this:\n  None \\<notin> set (take (Suc (length xs) - n) xs)\n\ngoal (1 subgoal):\n 1. y \\<noteq> None", "using Q"], ["proof (prove)\nusing this:\n  None \\<notin> set (take (Suc (length xs) - n) xs)\n  take (Suc (length xs) - n) xs = take (Suc (length xs) - n') xs @ y # ys\n\ngoal (1 subgoal):\n 1. y \\<noteq> None", "by (rule_tac not_sym, simp)"], ["proof (state)\nthis:\n  y \\<noteq> None\n\ngoal (2 subgoals):\n 1. n < n' \\<Longrightarrow> False\n 2. n' < n \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  y = None\n  y \\<noteq> None", "show False"], ["proof (prove)\nusing this:\n  y = None\n  y \\<noteq> None\n\ngoal (1 subgoal):\n 1. False", "by contradiction"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. n' < n \\<Longrightarrow> False", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. n' < n \\<Longrightarrow> False", "assume P: \"n' < n\""], ["proof (state)\nthis:\n  n' < n\n\ngoal (1 subgoal):\n 1. n' < n \\<Longrightarrow> False", "have \"take (Suc (length xs) - n') xs =\n          take (Suc (length xs) - n) (take (Suc (length xs) - n') xs) @\n          drop (Suc (length xs) - n) (take (Suc (length xs) - n') xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. take (Suc (length xs) - n') xs =\n    take (Suc (length xs) - n) (take (Suc (length xs) - n') xs) @\n    drop (Suc (length xs) - n) (take (Suc (length xs) - n') xs)", "by (simp only: append_take_drop_id)"], ["proof (state)\nthis:\n  take (Suc (length xs) - n') xs =\n  take (Suc (length xs) - n) (take (Suc (length xs) - n') xs) @\n  drop (Suc (length xs) - n) (take (Suc (length xs) - n') xs)\n\ngoal (1 subgoal):\n 1. n' < n \\<Longrightarrow> False", "also"], ["proof (state)\nthis:\n  take (Suc (length xs) - n') xs =\n  take (Suc (length xs) - n) (take (Suc (length xs) - n') xs) @\n  drop (Suc (length xs) - n) (take (Suc (length xs) - n') xs)\n\ngoal (1 subgoal):\n 1. n' < n \\<Longrightarrow> False", "have \"\\<dots> =\n          take (Suc (length xs) - n) xs @\n          drop (Suc (length xs) - n) (take (Suc (length xs) - n') xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. take (Suc (length xs) - n) (take (Suc (length xs) - n') xs) @\n    drop (Suc (length xs) - n) (take (Suc (length xs) - n') xs) =\n    take (Suc (length xs) - n) xs @\n    drop (Suc (length xs) - n) (take (Suc (length xs) - n') xs)", "using P"], ["proof (prove)\nusing this:\n  n' < n\n\ngoal (1 subgoal):\n 1. take (Suc (length xs) - n) (take (Suc (length xs) - n') xs) @\n    drop (Suc (length xs) - n) (take (Suc (length xs) - n') xs) =\n    take (Suc (length xs) - n) xs @\n    drop (Suc (length xs) - n) (take (Suc (length xs) - n') xs)", "by (simp add: min_def)"], ["proof (state)\nthis:\n  take (Suc (length xs) - n) (take (Suc (length xs) - n') xs) @\n  drop (Suc (length xs) - n) (take (Suc (length xs) - n') xs) =\n  take (Suc (length xs) - n) xs @\n  drop (Suc (length xs) - n) (take (Suc (length xs) - n') xs)\n\ngoal (1 subgoal):\n 1. n' < n \\<Longrightarrow> False", "also"], ["proof (state)\nthis:\n  take (Suc (length xs) - n) (take (Suc (length xs) - n') xs) @\n  drop (Suc (length xs) - n) (take (Suc (length xs) - n') xs) =\n  take (Suc (length xs) - n) xs @\n  drop (Suc (length xs) - n) (take (Suc (length xs) - n') xs)\n\ngoal (1 subgoal):\n 1. n' < n \\<Longrightarrow> False", "have \"\\<dots> =\n          take (Suc (length xs) - n) xs @\n          take (n - n') (drop (Suc (length xs) - n) xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. take (Suc (length xs) - n) xs @\n    drop (Suc (length xs) - n) (take (Suc (length xs) - n') xs) =\n    take (Suc (length xs) - n) xs @\n    take (n - n') (drop (Suc (length xs) - n) xs)", "using G"], ["proof (prove)\nusing this:\n  n \\<in> {0<..Suc (length xs)}\n\ngoal (1 subgoal):\n 1. take (Suc (length xs) - n) xs @\n    drop (Suc (length xs) - n) (take (Suc (length xs) - n') xs) =\n    take (Suc (length xs) - n) xs @\n    take (n - n') (drop (Suc (length xs) - n) xs)", "by (subst drop_take, simp)"], ["proof (state)\nthis:\n  take (Suc (length xs) - n) xs @\n  drop (Suc (length xs) - n) (take (Suc (length xs) - n') xs) =\n  take (Suc (length xs) - n) xs @\n  take (n - n') (drop (Suc (length xs) - n) xs)\n\ngoal (1 subgoal):\n 1. n' < n \\<Longrightarrow> False", "finally"], ["proof (chain)\npicking this:\n  take (Suc (length xs) - n') xs =\n  take (Suc (length xs) - n) xs @\n  take (n - n') (drop (Suc (length xs) - n) xs)", "have \"take (Suc (length xs) - n') xs =\n          take (Suc (length xs) - n) xs @\n          take (n - n') (drop (Suc (length xs) - n) xs)\""], ["proof (prove)\nusing this:\n  take (Suc (length xs) - n') xs =\n  take (Suc (length xs) - n) xs @\n  take (n - n') (drop (Suc (length xs) - n) xs)\n\ngoal (1 subgoal):\n 1. take (Suc (length xs) - n') xs =\n    take (Suc (length xs) - n) xs @\n    take (n - n') (drop (Suc (length xs) - n) xs)", "."], ["proof (state)\nthis:\n  take (Suc (length xs) - n') xs =\n  take (Suc (length xs) - n) xs @\n  take (n - n') (drop (Suc (length xs) - n) xs)\n\ngoal (1 subgoal):\n 1. n' < n \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  take (Suc (length xs) - n') xs =\n  take (Suc (length xs) - n) xs @\n  take (n - n') (drop (Suc (length xs) - n) xs)\n\ngoal (1 subgoal):\n 1. n' < n \\<Longrightarrow> False", "have \"take (n - n') (drop (Suc (length xs) - n) xs) \\<noteq> []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. take (n - n') (drop (Suc (length xs) - n) xs) \\<noteq> []", "proof (rule_tac notI, simp, erule disjE)"], ["proof (state)\ngoal (2 subgoals):\n 1. n \\<le> n' \\<Longrightarrow> False\n 2. length xs \\<le> Suc (length xs) - n \\<Longrightarrow> False", "assume \"n \\<le> n'\""], ["proof (state)\nthis:\n  n \\<le> n'\n\ngoal (2 subgoals):\n 1. n \\<le> n' \\<Longrightarrow> False\n 2. length xs \\<le> Suc (length xs) - n \\<Longrightarrow> False", "thus False"], ["proof (prove)\nusing this:\n  n \\<le> n'\n\ngoal (1 subgoal):\n 1. False", "using P"], ["proof (prove)\nusing this:\n  n \\<le> n'\n  n' < n\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. length xs \\<le> Suc (length xs) - n \\<Longrightarrow> False", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. length xs \\<le> Suc (length xs) - n \\<Longrightarrow> False", "assume \"length xs \\<le> Suc (length xs) - n\""], ["proof (state)\nthis:\n  length xs \\<le> Suc (length xs) - n\n\ngoal (1 subgoal):\n 1. length xs \\<le> Suc (length xs) - n \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  length xs \\<le> Suc (length xs) - n\n\ngoal (1 subgoal):\n 1. length xs \\<le> Suc (length xs) - n \\<Longrightarrow> False", "have \"Suc (length xs) - n < Suc (length xs) - n'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Suc (length xs) - n < Suc (length xs) - n'", "using G and P"], ["proof (prove)\nusing this:\n  n \\<in> {0<..Suc (length xs)}\n  n' < n\n\ngoal (1 subgoal):\n 1. Suc (length xs) - n < Suc (length xs) - n'", "by simp"], ["proof (state)\nthis:\n  Suc (length xs) - n < Suc (length xs) - n'\n\ngoal (1 subgoal):\n 1. length xs \\<le> Suc (length xs) - n \\<Longrightarrow> False", "hence \"Suc (length xs) - n < length xs\""], ["proof (prove)\nusing this:\n  Suc (length xs) - n < Suc (length xs) - n'\n\ngoal (1 subgoal):\n 1. Suc (length xs) - n < length xs", "using N"], ["proof (prove)\nusing this:\n  Suc (length xs) - n < Suc (length xs) - n'\n  Suc (length xs) - n' \\<le> length xs\n\ngoal (1 subgoal):\n 1. Suc (length xs) - n < length xs", "by simp"], ["proof (state)\nthis:\n  Suc (length xs) - n < length xs\n\ngoal (1 subgoal):\n 1. length xs \\<le> Suc (length xs) - n \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  length xs \\<le> Suc (length xs) - n\n  Suc (length xs) - n < length xs", "show False"], ["proof (prove)\nusing this:\n  length xs \\<le> Suc (length xs) - n\n  Suc (length xs) - n < length xs\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  take (n - n') (drop (Suc (length xs) - n) xs) \\<noteq> []\n\ngoal (1 subgoal):\n 1. n' < n \\<Longrightarrow> False", "hence \"\\<exists>y ys. take (n - n') (drop (Suc (length xs) - n) xs) = y # ys\""], ["proof (prove)\nusing this:\n  take (n - n') (drop (Suc (length xs) - n) xs) \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<exists>y ys. take (n - n') (drop (Suc (length xs) - n) xs) = y # ys", "by (cases \"take (n - n') (drop (Suc (length xs) - n) xs)\", simp_all)"], ["proof (state)\nthis:\n  \\<exists>y ys. take (n - n') (drop (Suc (length xs) - n) xs) = y # ys\n\ngoal (1 subgoal):\n 1. n' < n \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  \\<exists>y ys. take (n - n') (drop (Suc (length xs) - n) xs) = y # ys", "obtain y and ys where\n         \"take (n - n') (drop (Suc (length xs) - n) xs) = y # ys\""], ["proof (prove)\nusing this:\n  \\<exists>y ys. take (n - n') (drop (Suc (length xs) - n) xs) = y # ys\n\ngoal (1 subgoal):\n 1. (\\<And>y ys.\n        take (n - n') (drop (Suc (length xs) - n) xs) =\n        y # ys \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  take (n - n') (drop (Suc (length xs) - n) xs) = y # ys\n\ngoal (1 subgoal):\n 1. n' < n \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  take (Suc (length xs) - n') xs =\n  take (Suc (length xs) - n) xs @\n  take (n - n') (drop (Suc (length xs) - n) xs)\n  take (n - n') (drop (Suc (length xs) - n) xs) = y # ys", "have Q: \"take (Suc (length xs) - n') xs =\n          take (Suc (length xs) - n) xs @ y # ys\""], ["proof (prove)\nusing this:\n  take (Suc (length xs) - n') xs =\n  take (Suc (length xs) - n) xs @\n  take (n - n') (drop (Suc (length xs) - n) xs)\n  take (n - n') (drop (Suc (length xs) - n) xs) = y # ys\n\ngoal (1 subgoal):\n 1. take (Suc (length xs) - n') xs = take (Suc (length xs) - n) xs @ y # ys", "by simp"], ["proof (state)\nthis:\n  take (Suc (length xs) - n') xs = take (Suc (length xs) - n) xs @ y # ys\n\ngoal (1 subgoal):\n 1. n' < n \\<Longrightarrow> False", "have \"take (Suc (length xs) - n) xs \\<in> sentences P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. take (Suc (length xs) - n) xs \\<in> sentences P", "using I"], ["proof (prove)\nusing this:\n  take (Suc (length xs) - n) xs \\<in> sentences P \\<and>\n  (drop (Suc (length xs) - n) xs @ [None], W) \\<in> failures Q\n\ngoal (1 subgoal):\n 1. take (Suc (length xs) - n) xs \\<in> sentences P", ".."], ["proof (state)\nthis:\n  take (Suc (length xs) - n) xs \\<in> sentences P\n\ngoal (1 subgoal):\n 1. n' < n \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  take (Suc (length xs) - n) xs \\<in> sentences P\n\ngoal (1 subgoal):\n 1. n' < n \\<Longrightarrow> False", "have R: \"take (Suc (length xs) - n') xs \\<in> sentences P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. take (Suc (length xs) - n') xs \\<in> sentences P", "using O"], ["proof (prove)\nusing this:\n  take (Suc (length xs) - n') xs \\<in> sentences P \\<and>\n  (drop (Suc (length xs) - n') xs @ [x], W') \\<in> failures Q\n\ngoal (1 subgoal):\n 1. take (Suc (length xs) - n') xs \\<in> sentences P", ".."], ["proof (state)\nthis:\n  take (Suc (length xs) - n') xs \\<in> sentences P\n\ngoal (1 subgoal):\n 1. n' < n \\<Longrightarrow> False", "hence \"take (Suc (length xs) - n') xs @ [None] \\<in> traces P\""], ["proof (prove)\nusing this:\n  take (Suc (length xs) - n') xs \\<in> sentences P\n\ngoal (1 subgoal):\n 1. take (Suc (length xs) - n') xs @ [None] \\<in> traces P", "by (simp add: sentences_def)"], ["proof (state)\nthis:\n  take (Suc (length xs) - n') xs @ [None] \\<in> traces P\n\ngoal (1 subgoal):\n 1. n' < n \\<Longrightarrow> False", "hence \"take (Suc (length xs) - n') xs \\<in> traces P\""], ["proof (prove)\nusing this:\n  take (Suc (length xs) - n') xs @ [None] \\<in> traces P\n\ngoal (1 subgoal):\n 1. take (Suc (length xs) - n') xs \\<in> traces P", "by (rule process_rule_2_traces)"], ["proof (state)\nthis:\n  take (Suc (length xs) - n') xs \\<in> traces P\n\ngoal (1 subgoal):\n 1. n' < n \\<Longrightarrow> False", "hence \"take (Suc (length xs) - n) xs @ y # ys \\<in> traces P\""], ["proof (prove)\nusing this:\n  take (Suc (length xs) - n') xs \\<in> traces P\n\ngoal (1 subgoal):\n 1. take (Suc (length xs) - n) xs @ y # ys \\<in> traces P", "using Q"], ["proof (prove)\nusing this:\n  take (Suc (length xs) - n') xs \\<in> traces P\n  take (Suc (length xs) - n') xs = take (Suc (length xs) - n) xs @ y # ys\n\ngoal (1 subgoal):\n 1. take (Suc (length xs) - n) xs @ y # ys \\<in> traces P", "by simp"], ["proof (state)\nthis:\n  take (Suc (length xs) - n) xs @ y # ys \\<in> traces P\n\ngoal (1 subgoal):\n 1. n' < n \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  take (Suc (length xs) - n) xs \\<in> sentences P\n  take (Suc (length xs) - n) xs @ y # ys \\<in> traces P", "have \"y = None\""], ["proof (prove)\nusing this:\n  take (Suc (length xs) - n) xs \\<in> sentences P\n  take (Suc (length xs) - n) xs @ y # ys \\<in> traces P\n\ngoal (1 subgoal):\n 1. y = None", "by (rule seq_sentences_none [OF A])"], ["proof (state)\nthis:\n  y = None\n\ngoal (1 subgoal):\n 1. n' < n \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  y = None\n\ngoal (1 subgoal):\n 1. n' < n \\<Longrightarrow> False", "have \"None \\<notin> set (take (Suc (length xs) - n') xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. None \\<notin> set (take (Suc (length xs) - n') xs)", "using C and R"], ["proof (prove)\nusing this:\n  weakly_sequential P\n  take (Suc (length xs) - n') xs \\<in> sentences P\n\ngoal (1 subgoal):\n 1. None \\<notin> set (take (Suc (length xs) - n') xs)", "by (rule weakly_seq_sentences_none)"], ["proof (state)\nthis:\n  None \\<notin> set (take (Suc (length xs) - n') xs)\n\ngoal (1 subgoal):\n 1. n' < n \\<Longrightarrow> False", "hence \"y \\<noteq> None\""], ["proof (prove)\nusing this:\n  None \\<notin> set (take (Suc (length xs) - n') xs)\n\ngoal (1 subgoal):\n 1. y \\<noteq> None", "using Q"], ["proof (prove)\nusing this:\n  None \\<notin> set (take (Suc (length xs) - n') xs)\n  take (Suc (length xs) - n') xs = take (Suc (length xs) - n) xs @ y # ys\n\ngoal (1 subgoal):\n 1. y \\<noteq> None", "by (rule_tac not_sym, simp)"], ["proof (state)\nthis:\n  y \\<noteq> None\n\ngoal (1 subgoal):\n 1. n' < n \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  y = None\n  y \\<noteq> None", "show False"], ["proof (prove)\nusing this:\n  y = None\n  y \\<noteq> None\n\ngoal (1 subgoal):\n 1. False", "by contradiction"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  n = n'\n\ngoal (1 subgoal):\n 1. n' \\<in> {0<..Suc (length xs)} \\<Longrightarrow> x = None", "ultimately"], ["proof (chain)\npicking this:\n  take (Suc (length xs) - n') xs \\<in> sentences P \\<and>\n  (drop (Suc (length xs) - n') xs @ [x], W') \\<in> failures Q\n  n = n'", "have \"(drop (Suc (length xs) - n) xs @ [x], W') \\<in> failures Q\""], ["proof (prove)\nusing this:\n  take (Suc (length xs) - n') xs \\<in> sentences P \\<and>\n  (drop (Suc (length xs) - n') xs @ [x], W') \\<in> failures Q\n  n = n'\n\ngoal (1 subgoal):\n 1. (drop (Suc (length xs) - n) xs @ [x], W') \\<in> failures Q", "by simp"], ["proof (state)\nthis:\n  (drop (Suc (length xs) - n) xs @ [x], W') \\<in> failures Q\n\ngoal (1 subgoal):\n 1. n' \\<in> {0<..Suc (length xs)} \\<Longrightarrow> x = None", "hence P: \"drop (Suc (length xs) - n) xs @ [x] \\<in> traces Q\""], ["proof (prove)\nusing this:\n  (drop (Suc (length xs) - n) xs @ [x], W') \\<in> failures Q\n\ngoal (1 subgoal):\n 1. drop (Suc (length xs) - n) xs @ [x] \\<in> traces Q", "by (rule failures_traces)"], ["proof (state)\nthis:\n  drop (Suc (length xs) - n) xs @ [x] \\<in> traces Q\n\ngoal (1 subgoal):\n 1. n' \\<in> {0<..Suc (length xs)} \\<Longrightarrow> x = None", "have \"(drop (Suc (length xs) - n) xs @ [None], W) \\<in> failures Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (drop (Suc (length xs) - n) xs @ [None], W) \\<in> failures Q", "using I"], ["proof (prove)\nusing this:\n  take (Suc (length xs) - n) xs \\<in> sentences P \\<and>\n  (drop (Suc (length xs) - n) xs @ [None], W) \\<in> failures Q\n\ngoal (1 subgoal):\n 1. (drop (Suc (length xs) - n) xs @ [None], W) \\<in> failures Q", ".."], ["proof (state)\nthis:\n  (drop (Suc (length xs) - n) xs @ [None], W) \\<in> failures Q\n\ngoal (1 subgoal):\n 1. n' \\<in> {0<..Suc (length xs)} \\<Longrightarrow> x = None", "hence \"drop (Suc (length xs) - n) xs @ [None] \\<in> traces Q\""], ["proof (prove)\nusing this:\n  (drop (Suc (length xs) - n) xs @ [None], W) \\<in> failures Q\n\ngoal (1 subgoal):\n 1. drop (Suc (length xs) - n) xs @ [None] \\<in> traces Q", "by (rule failures_traces)"], ["proof (state)\nthis:\n  drop (Suc (length xs) - n) xs @ [None] \\<in> traces Q\n\ngoal (1 subgoal):\n 1. n' \\<in> {0<..Suc (length xs)} \\<Longrightarrow> x = None", "hence \"drop (Suc (length xs) - n) xs \\<in> sentences Q\""], ["proof (prove)\nusing this:\n  drop (Suc (length xs) - n) xs @ [None] \\<in> traces Q\n\ngoal (1 subgoal):\n 1. drop (Suc (length xs) - n) xs \\<in> sentences Q", "by (simp add: sentences_def)"], ["proof (state)\nthis:\n  drop (Suc (length xs) - n) xs \\<in> sentences Q\n\ngoal (1 subgoal):\n 1. n' \\<in> {0<..Suc (length xs)} \\<Longrightarrow> x = None", "with B"], ["proof (chain)\npicking this:\n  sequential Q\n  drop (Suc (length xs) - n) xs \\<in> sentences Q", "show ?thesis"], ["proof (prove)\nusing this:\n  sequential Q\n  drop (Suc (length xs) - n) xs \\<in> sentences Q\n\ngoal (1 subgoal):\n 1. x = None", "using P"], ["proof (prove)\nusing this:\n  sequential Q\n  drop (Suc (length xs) - n) xs \\<in> sentences Q\n  drop (Suc (length xs) - n) xs @ [x] \\<in> traces Q\n\ngoal (1 subgoal):\n 1. x = None", "by (rule seq_sentences_none)"], ["proof (state)\nthis:\n  x = None\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  x = None\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>xs\\<in>sentences (P ; Q). next_events (P ; Q) xs = {None}\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \"Conservation of noninterference security under sequential composition\""], ["", "text \\<open>\nEverything is now ready for proving the target security conservation theorem. The two closure\nproperties that the definition of noninterference security requires process futures to satisfy, one\nfor the addition of events into traces and the other for the deletion of events from traces (cf.\n\\cite{R2}), will be faced separately; here below is the proof of the former property.\nUnsurprisingly, rule induction on set @{term seq_comp_failures} is applied, and the closure of the\nfailures of a secure process under intransitive purge (proven in the previous section) is used to\nmeet the proof obligations arising from rule \\<open>SCF_R3\\<close>.\n\n\\null\n\\<close>"], ["", "lemma seq_comp_secure_aux_1_case_1:\n  assumes\n    A: \"secure_termination I D\" and\n    B: \"sequential P\" and\n    C: \"secure P I D\" and\n    D: \"xs @ y # ys \\<notin> sentences P\" and\n    E: \"(xs @ y # ys, X) \\<in> failures P\" and\n    F: \"None \\<noteq> y\" and\n    G: \"None \\<notin> set xs\" and\n    H: \"None \\<notin> set ys\"\n  shows \"(xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys X)\n    \\<in> seq_comp_failures P Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys X)\n    \\<in> seq_comp_failures P Q", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys X)\n    \\<in> seq_comp_failures P Q", "have \"(y # ys, X) \\<in> futures P xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (y # ys, X) \\<in> futures P xs", "using E"], ["proof (prove)\nusing this:\n  (xs @ y # ys, X) \\<in> failures P\n\ngoal (1 subgoal):\n 1. (y # ys, X) \\<in> futures P xs", "by (simp add: futures_def)"], ["proof (state)\nthis:\n  (y # ys, X) \\<in> futures P xs\n\ngoal (1 subgoal):\n 1. (xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys X)\n    \\<in> seq_comp_failures P Q", "hence \"(ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys X) \\<in>\n    futures P xs\""], ["proof (prove)\nusing this:\n  (y # ys, X) \\<in> futures P xs\n\ngoal (1 subgoal):\n 1. (ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys X) \\<in> futures P xs", "using C"], ["proof (prove)\nusing this:\n  (y # ys, X) \\<in> futures P xs\n  secure P I D\n\ngoal (1 subgoal):\n 1. (ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys X) \\<in> futures P xs", "by (simp add: secure_def)"], ["proof (state)\nthis:\n  (ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys X) \\<in> futures P xs\n\ngoal (1 subgoal):\n 1. (xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys X)\n    \\<in> seq_comp_failures P Q", "hence I: \"(xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys X) \\<in>\n    failures P\""], ["proof (prove)\nusing this:\n  (ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys X) \\<in> futures P xs\n\ngoal (1 subgoal):\n 1. (xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys X)\n    \\<in> failures P", "by (simp add: futures_def)"], ["proof (state)\nthis:\n  (xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys X) \\<in> failures P\n\ngoal (1 subgoal):\n 1. (xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys X)\n    \\<in> seq_comp_failures P Q", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys X)\n    \\<in> seq_comp_failures P Q", "proof (cases \"xs @ ipurge_tr I D (D y) ys \\<in> sentences P\",\n   cases \"(D y, D None) \\<in> I \\<or> (\\<exists>u \\<in> sinks I D (D y) ys. (u, D None) \\<in> I)\",\n   simp_all)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<lbrakk>xs @ ipurge_tr I D (D y) ys \\<in> sentences P;\n     (D y, D None) \\<in> I \\<or>\n     (\\<exists>u\\<in>sinks I D (D y) ys. (u, D None) \\<in> I)\\<rbrakk>\n    \\<Longrightarrow> (xs @ ipurge_tr I D (D y) ys,\n                       ipurge_ref I D (D y) ys X)\n                      \\<in> seq_comp_failures P Q\n 2. \\<lbrakk>xs @ ipurge_tr I D (D y) ys \\<in> sentences P;\n     (D y, D None) \\<notin> I \\<and>\n     (\\<forall>u\\<in>sinks I D (D y) ys. (u, D None) \\<notin> I)\\<rbrakk>\n    \\<Longrightarrow> (xs @ ipurge_tr I D (D y) ys,\n                       ipurge_ref I D (D y) ys X)\n                      \\<in> seq_comp_failures P Q\n 3. xs @ ipurge_tr I D (D y) ys \\<notin> sentences P \\<Longrightarrow>\n    (xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys X)\n    \\<in> seq_comp_failures P Q", "assume \"xs @ ipurge_tr I D (D y) ys \\<notin> sentences P\""], ["proof (state)\nthis:\n  xs @ ipurge_tr I D (D y) ys \\<notin> sentences P\n\ngoal (3 subgoals):\n 1. \\<lbrakk>xs @ ipurge_tr I D (D y) ys \\<in> sentences P;\n     (D y, D None) \\<in> I \\<or>\n     (\\<exists>u\\<in>sinks I D (D y) ys. (u, D None) \\<in> I)\\<rbrakk>\n    \\<Longrightarrow> (xs @ ipurge_tr I D (D y) ys,\n                       ipurge_ref I D (D y) ys X)\n                      \\<in> seq_comp_failures P Q\n 2. \\<lbrakk>xs @ ipurge_tr I D (D y) ys \\<in> sentences P;\n     (D y, D None) \\<notin> I \\<and>\n     (\\<forall>u\\<in>sinks I D (D y) ys. (u, D None) \\<notin> I)\\<rbrakk>\n    \\<Longrightarrow> (xs @ ipurge_tr I D (D y) ys,\n                       ipurge_ref I D (D y) ys X)\n                      \\<in> seq_comp_failures P Q\n 3. xs @ ipurge_tr I D (D y) ys \\<notin> sentences P \\<Longrightarrow>\n    (xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys X)\n    \\<in> seq_comp_failures P Q", "thus ?thesis"], ["proof (prove)\nusing this:\n  xs @ ipurge_tr I D (D y) ys \\<notin> sentences P\n\ngoal (1 subgoal):\n 1. (xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys X)\n    \\<in> seq_comp_failures P Q", "using I"], ["proof (prove)\nusing this:\n  xs @ ipurge_tr I D (D y) ys \\<notin> sentences P\n  (xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys X) \\<in> failures P\n\ngoal (1 subgoal):\n 1. (xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys X)\n    \\<in> seq_comp_failures P Q", "proof (rule SCF_R1, simp add: F G)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>xs @ ipurge_tr I D (D y) ys \\<notin> sentences P;\n     (xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys X)\n     \\<in> failures P\\<rbrakk>\n    \\<Longrightarrow> None \\<notin> set (ipurge_tr I D (D y) ys)", "have \"set (ipurge_tr I D (D y) ys) \\<subseteq> set ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (ipurge_tr I D (D y) ys) \\<subseteq> set ys", "by (rule ipurge_tr_set)"], ["proof (state)\nthis:\n  set (ipurge_tr I D (D y) ys) \\<subseteq> set ys\n\ngoal (1 subgoal):\n 1. \\<lbrakk>xs @ ipurge_tr I D (D y) ys \\<notin> sentences P;\n     (xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys X)\n     \\<in> failures P\\<rbrakk>\n    \\<Longrightarrow> None \\<notin> set (ipurge_tr I D (D y) ys)", "thus \"None \\<notin> set (ipurge_tr I D (D y) ys)\""], ["proof (prove)\nusing this:\n  set (ipurge_tr I D (D y) ys) \\<subseteq> set ys\n\ngoal (1 subgoal):\n 1. None \\<notin> set (ipurge_tr I D (D y) ys)", "using H"], ["proof (prove)\nusing this:\n  set (ipurge_tr I D (D y) ys) \\<subseteq> set ys\n  None \\<notin> set ys\n\ngoal (1 subgoal):\n 1. None \\<notin> set (ipurge_tr I D (D y) ys)", "by (rule contra_subsetD)"], ["proof (state)\nthis:\n  None \\<notin> set (ipurge_tr I D (D y) ys)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys X)\n  \\<in> seq_comp_failures P Q\n\ngoal (2 subgoals):\n 1. \\<lbrakk>xs @ ipurge_tr I D (D y) ys \\<in> sentences P;\n     (D y, D None) \\<in> I \\<or>\n     (\\<exists>u\\<in>sinks I D (D y) ys. (u, D None) \\<in> I)\\<rbrakk>\n    \\<Longrightarrow> (xs @ ipurge_tr I D (D y) ys,\n                       ipurge_ref I D (D y) ys X)\n                      \\<in> seq_comp_failures P Q\n 2. \\<lbrakk>xs @ ipurge_tr I D (D y) ys \\<in> sentences P;\n     (D y, D None) \\<notin> I \\<and>\n     (\\<forall>u\\<in>sinks I D (D y) ys. (u, D None) \\<notin> I)\\<rbrakk>\n    \\<Longrightarrow> (xs @ ipurge_tr I D (D y) ys,\n                       ipurge_ref I D (D y) ys X)\n                      \\<in> seq_comp_failures P Q", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>xs @ ipurge_tr I D (D y) ys \\<in> sentences P;\n     (D y, D None) \\<in> I \\<or>\n     (\\<exists>u\\<in>sinks I D (D y) ys. (u, D None) \\<in> I)\\<rbrakk>\n    \\<Longrightarrow> (xs @ ipurge_tr I D (D y) ys,\n                       ipurge_ref I D (D y) ys X)\n                      \\<in> seq_comp_failures P Q\n 2. \\<lbrakk>xs @ ipurge_tr I D (D y) ys \\<in> sentences P;\n     (D y, D None) \\<notin> I \\<and>\n     (\\<forall>u\\<in>sinks I D (D y) ys. (u, D None) \\<notin> I)\\<rbrakk>\n    \\<Longrightarrow> (xs @ ipurge_tr I D (D y) ys,\n                       ipurge_ref I D (D y) ys X)\n                      \\<in> seq_comp_failures P Q", "assume\n      J: \"xs @ ipurge_tr I D (D y) ys \\<in> sentences P\" and\n      K: \"(D y, D None) \\<in> I \\<or> (\\<exists>u \\<in> sinks I D (D y) ys. (u, D None) \\<in> I)\""], ["proof (state)\nthis:\n  xs @ ipurge_tr I D (D y) ys \\<in> sentences P\n  (D y, D None) \\<in> I \\<or>\n  (\\<exists>u\\<in>sinks I D (D y) ys. (u, D None) \\<in> I)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>xs @ ipurge_tr I D (D y) ys \\<in> sentences P;\n     (D y, D None) \\<in> I \\<or>\n     (\\<exists>u\\<in>sinks I D (D y) ys. (u, D None) \\<in> I)\\<rbrakk>\n    \\<Longrightarrow> (xs @ ipurge_tr I D (D y) ys,\n                       ipurge_ref I D (D y) ys X)\n                      \\<in> seq_comp_failures P Q\n 2. \\<lbrakk>xs @ ipurge_tr I D (D y) ys \\<in> sentences P;\n     (D y, D None) \\<notin> I \\<and>\n     (\\<forall>u\\<in>sinks I D (D y) ys. (u, D None) \\<notin> I)\\<rbrakk>\n    \\<Longrightarrow> (xs @ ipurge_tr I D (D y) ys,\n                       ipurge_ref I D (D y) ys X)\n                      \\<in> seq_comp_failures P Q", "have \"ipurge_ref I D (D y) ys X = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ipurge_ref I D (D y) ys X = {}", "proof (rule disjE [OF K], erule_tac [2] bexE)"], ["proof (state)\ngoal (2 subgoals):\n 1. (D y, D None) \\<in> I \\<Longrightarrow> ipurge_ref I D (D y) ys X = {}\n 2. \\<And>u.\n       \\<lbrakk>u \\<in> sinks I D (D y) ys; (u, D None) \\<in> I\\<rbrakk>\n       \\<Longrightarrow> ipurge_ref I D (D y) ys X = {}", "assume L: \"(D y, D None) \\<in> I\""], ["proof (state)\nthis:\n  (D y, D None) \\<in> I\n\ngoal (2 subgoals):\n 1. (D y, D None) \\<in> I \\<Longrightarrow> ipurge_ref I D (D y) ys X = {}\n 2. \\<And>u.\n       \\<lbrakk>u \\<in> sinks I D (D y) ys; (u, D None) \\<in> I\\<rbrakk>\n       \\<Longrightarrow> ipurge_ref I D (D y) ys X = {}", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. ipurge_ref I D (D y) ys X = {}", "proof (rule ipurge_ref_empty [of \"D y\"], simp)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> X \\<Longrightarrow> (D y, D x) \\<in> I", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> X \\<Longrightarrow> (D y, D x) \\<in> I", "have \"(D y, D None) \\<in> I \\<and> y \\<noteq> None \\<longrightarrow> (\\<forall>u \\<in> range D. (D y, u) \\<in> I)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (D y, D None) \\<in> I \\<and> y \\<noteq> None \\<longrightarrow>\n    (\\<forall>u\\<in>range D. (D y, u) \\<in> I)", "using A"], ["proof (prove)\nusing this:\n  secure_termination I D\n\ngoal (1 subgoal):\n 1. (D y, D None) \\<in> I \\<and> y \\<noteq> None \\<longrightarrow>\n    (\\<forall>u\\<in>range D. (D y, u) \\<in> I)", "by (simp add: secure_termination_def)"], ["proof (state)\nthis:\n  (D y, D None) \\<in> I \\<and> y \\<noteq> None \\<longrightarrow>\n  (\\<forall>u\\<in>range D. (D y, u) \\<in> I)\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> X \\<Longrightarrow> (D y, D x) \\<in> I", "hence \"\\<forall>u \\<in> range D. (D y, u) \\<in> I\""], ["proof (prove)\nusing this:\n  (D y, D None) \\<in> I \\<and> y \\<noteq> None \\<longrightarrow>\n  (\\<forall>u\\<in>range D. (D y, u) \\<in> I)\n\ngoal (1 subgoal):\n 1. \\<forall>u\\<in>range D. (D y, u) \\<in> I", "using F and L"], ["proof (prove)\nusing this:\n  (D y, D None) \\<in> I \\<and> y \\<noteq> None \\<longrightarrow>\n  (\\<forall>u\\<in>range D. (D y, u) \\<in> I)\n  None \\<noteq> y\n  (D y, D None) \\<in> I\n\ngoal (1 subgoal):\n 1. \\<forall>u\\<in>range D. (D y, u) \\<in> I", "by simp"], ["proof (state)\nthis:\n  \\<forall>u\\<in>range D. (D y, u) \\<in> I\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> X \\<Longrightarrow> (D y, D x) \\<in> I", "thus \"(D y, D x) \\<in> I\""], ["proof (prove)\nusing this:\n  \\<forall>u\\<in>range D. (D y, u) \\<in> I\n\ngoal (1 subgoal):\n 1. (D y, D x) \\<in> I", "by simp"], ["proof (state)\nthis:\n  (D y, D x) \\<in> I\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ipurge_ref I D (D y) ys X = {}\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<lbrakk>u \\<in> sinks I D (D y) ys; (u, D None) \\<in> I\\<rbrakk>\n       \\<Longrightarrow> ipurge_ref I D (D y) ys X = {}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<lbrakk>u \\<in> sinks I D (D y) ys; (u, D None) \\<in> I\\<rbrakk>\n       \\<Longrightarrow> ipurge_ref I D (D y) ys X = {}", "fix u"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<lbrakk>u \\<in> sinks I D (D y) ys; (u, D None) \\<in> I\\<rbrakk>\n       \\<Longrightarrow> ipurge_ref I D (D y) ys X = {}", "assume\n        L: \"u \\<in> sinks I D (D y) ys\" and\n        M: \"(u, D None) \\<in> I\""], ["proof (state)\nthis:\n  u \\<in> sinks I D (D y) ys\n  (u, D None) \\<in> I\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<lbrakk>u \\<in> sinks I D (D y) ys; (u, D None) \\<in> I\\<rbrakk>\n       \\<Longrightarrow> ipurge_ref I D (D y) ys X = {}", "have \"\\<exists>y' \\<in> set ys. u = D y'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>y'\\<in>set ys. u = D y'", "using L"], ["proof (prove)\nusing this:\n  u \\<in> sinks I D (D y) ys\n\ngoal (1 subgoal):\n 1. \\<exists>y'\\<in>set ys. u = D y'", "by (rule sinks_elem)"], ["proof (state)\nthis:\n  \\<exists>y'\\<in>set ys. u = D y'\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<lbrakk>u \\<in> sinks I D (D y) ys; (u, D None) \\<in> I\\<rbrakk>\n       \\<Longrightarrow> ipurge_ref I D (D y) ys X = {}", "then"], ["proof (chain)\npicking this:\n  \\<exists>y'\\<in>set ys. u = D y'", "obtain y' where N: \"y' \\<in> set ys\" and O: \"u = D y'\""], ["proof (prove)\nusing this:\n  \\<exists>y'\\<in>set ys. u = D y'\n\ngoal (1 subgoal):\n 1. (\\<And>y'.\n        \\<lbrakk>y' \\<in> set ys; u = D y'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  y' \\<in> set ys\n  u = D y'\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<lbrakk>u \\<in> sinks I D (D y) ys; (u, D None) \\<in> I\\<rbrakk>\n       \\<Longrightarrow> ipurge_ref I D (D y) ys X = {}", "have P: \"y' \\<noteq> None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y' \\<noteq> None", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. y' = None \\<Longrightarrow> False", "assume \"y' = None\""], ["proof (state)\nthis:\n  y' = None\n\ngoal (1 subgoal):\n 1. y' = None \\<Longrightarrow> False", "hence \"None \\<in> set ys\""], ["proof (prove)\nusing this:\n  y' = None\n\ngoal (1 subgoal):\n 1. None \\<in> set ys", "using N"], ["proof (prove)\nusing this:\n  y' = None\n  y' \\<in> set ys\n\ngoal (1 subgoal):\n 1. None \\<in> set ys", "by simp"], ["proof (state)\nthis:\n  None \\<in> set ys\n\ngoal (1 subgoal):\n 1. y' = None \\<Longrightarrow> False", "thus False"], ["proof (prove)\nusing this:\n  None \\<in> set ys\n\ngoal (1 subgoal):\n 1. False", "using H"], ["proof (prove)\nusing this:\n  None \\<in> set ys\n  None \\<notin> set ys\n\ngoal (1 subgoal):\n 1. False", "by contradiction"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  y' \\<noteq> None\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<lbrakk>u \\<in> sinks I D (D y) ys; (u, D None) \\<in> I\\<rbrakk>\n       \\<Longrightarrow> ipurge_ref I D (D y) ys X = {}", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. ipurge_ref I D (D y) ys X = {}", "proof (rule ipurge_ref_empty [of u], simp add: L)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> X \\<Longrightarrow> (u, D x) \\<in> I", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> X \\<Longrightarrow> (u, D x) \\<in> I", "have \"(D y', D None) \\<in> I \\<and> y' \\<noteq> None \\<longrightarrow> (\\<forall>v \\<in> range D. (D y', v) \\<in> I)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (D y', D None) \\<in> I \\<and> y' \\<noteq> None \\<longrightarrow>\n    (\\<forall>v\\<in>range D. (D y', v) \\<in> I)", "using A"], ["proof (prove)\nusing this:\n  secure_termination I D\n\ngoal (1 subgoal):\n 1. (D y', D None) \\<in> I \\<and> y' \\<noteq> None \\<longrightarrow>\n    (\\<forall>v\\<in>range D. (D y', v) \\<in> I)", "by (simp add: secure_termination_def)"], ["proof (state)\nthis:\n  (D y', D None) \\<in> I \\<and> y' \\<noteq> None \\<longrightarrow>\n  (\\<forall>v\\<in>range D. (D y', v) \\<in> I)\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> X \\<Longrightarrow> (u, D x) \\<in> I", "moreover"], ["proof (state)\nthis:\n  (D y', D None) \\<in> I \\<and> y' \\<noteq> None \\<longrightarrow>\n  (\\<forall>v\\<in>range D. (D y', v) \\<in> I)\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> X \\<Longrightarrow> (u, D x) \\<in> I", "have \"(D y', D None) \\<in> I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (D y', D None) \\<in> I", "using M and O"], ["proof (prove)\nusing this:\n  (u, D None) \\<in> I\n  u = D y'\n\ngoal (1 subgoal):\n 1. (D y', D None) \\<in> I", "by simp"], ["proof (state)\nthis:\n  (D y', D None) \\<in> I\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> X \\<Longrightarrow> (u, D x) \\<in> I", "ultimately"], ["proof (chain)\npicking this:\n  (D y', D None) \\<in> I \\<and> y' \\<noteq> None \\<longrightarrow>\n  (\\<forall>v\\<in>range D. (D y', v) \\<in> I)\n  (D y', D None) \\<in> I", "have \"\\<forall>v \\<in> range D. (D y', v) \\<in> I\""], ["proof (prove)\nusing this:\n  (D y', D None) \\<in> I \\<and> y' \\<noteq> None \\<longrightarrow>\n  (\\<forall>v\\<in>range D. (D y', v) \\<in> I)\n  (D y', D None) \\<in> I\n\ngoal (1 subgoal):\n 1. \\<forall>v\\<in>range D. (D y', v) \\<in> I", "using P"], ["proof (prove)\nusing this:\n  (D y', D None) \\<in> I \\<and> y' \\<noteq> None \\<longrightarrow>\n  (\\<forall>v\\<in>range D. (D y', v) \\<in> I)\n  (D y', D None) \\<in> I\n  y' \\<noteq> None\n\ngoal (1 subgoal):\n 1. \\<forall>v\\<in>range D. (D y', v) \\<in> I", "by simp"], ["proof (state)\nthis:\n  \\<forall>v\\<in>range D. (D y', v) \\<in> I\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> X \\<Longrightarrow> (u, D x) \\<in> I", "thus \"(u, D x) \\<in> I\""], ["proof (prove)\nusing this:\n  \\<forall>v\\<in>range D. (D y', v) \\<in> I\n\ngoal (1 subgoal):\n 1. (u, D x) \\<in> I", "using O"], ["proof (prove)\nusing this:\n  \\<forall>v\\<in>range D. (D y', v) \\<in> I\n  u = D y'\n\ngoal (1 subgoal):\n 1. (u, D x) \\<in> I", "by simp"], ["proof (state)\nthis:\n  (u, D x) \\<in> I\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ipurge_ref I D (D y) ys X = {}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ipurge_ref I D (D y) ys X = {}\n\ngoal (2 subgoals):\n 1. \\<lbrakk>xs @ ipurge_tr I D (D y) ys \\<in> sentences P;\n     (D y, D None) \\<in> I \\<or>\n     (\\<exists>u\\<in>sinks I D (D y) ys. (u, D None) \\<in> I)\\<rbrakk>\n    \\<Longrightarrow> (xs @ ipurge_tr I D (D y) ys,\n                       ipurge_ref I D (D y) ys X)\n                      \\<in> seq_comp_failures P Q\n 2. \\<lbrakk>xs @ ipurge_tr I D (D y) ys \\<in> sentences P;\n     (D y, D None) \\<notin> I \\<and>\n     (\\<forall>u\\<in>sinks I D (D y) ys. (u, D None) \\<notin> I)\\<rbrakk>\n    \\<Longrightarrow> (xs @ ipurge_tr I D (D y) ys,\n                       ipurge_ref I D (D y) ys X)\n                      \\<in> seq_comp_failures P Q", "thus ?thesis"], ["proof (prove)\nusing this:\n  ipurge_ref I D (D y) ys X = {}\n\ngoal (1 subgoal):\n 1. (xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys X)\n    \\<in> seq_comp_failures P Q", "proof simp"], ["proof (state)\ngoal (1 subgoal):\n 1. ipurge_ref I D (D y) ys X = {} \\<Longrightarrow>\n    (xs @ ipurge_tr I D (D y) ys, {}) \\<in> seq_comp_failures P Q", "have \"([], {}) \\<in> failures Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ([], {}) \\<in> failures Q", "by (rule process_rule_1)"], ["proof (state)\nthis:\n  ([], {}) \\<in> failures Q\n\ngoal (1 subgoal):\n 1. ipurge_ref I D (D y) ys X = {} \\<Longrightarrow>\n    (xs @ ipurge_tr I D (D y) ys, {}) \\<in> seq_comp_failures P Q", "with J and I"], ["proof (chain)\npicking this:\n  xs @ ipurge_tr I D (D y) ys \\<in> sentences P\n  (xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys X) \\<in> failures P\n  ([], {}) \\<in> failures Q", "have \"(xs @ ipurge_tr I D (D y) ys,\n        insert None (ipurge_ref I D (D y) ys X) \\<inter> {}) \\<in> seq_comp_failures P Q\""], ["proof (prove)\nusing this:\n  xs @ ipurge_tr I D (D y) ys \\<in> sentences P\n  (xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys X) \\<in> failures P\n  ([], {}) \\<in> failures Q\n\ngoal (1 subgoal):\n 1. (xs @ ipurge_tr I D (D y) ys,\n     insert None (ipurge_ref I D (D y) ys X) \\<inter> {})\n    \\<in> seq_comp_failures P Q", "by (rule SCF_R2)"], ["proof (state)\nthis:\n  (xs @ ipurge_tr I D (D y) ys,\n   insert None (ipurge_ref I D (D y) ys X) \\<inter> {})\n  \\<in> seq_comp_failures P Q\n\ngoal (1 subgoal):\n 1. ipurge_ref I D (D y) ys X = {} \\<Longrightarrow>\n    (xs @ ipurge_tr I D (D y) ys, {}) \\<in> seq_comp_failures P Q", "thus \"(xs @ ipurge_tr I D (D y) ys, {}) \\<in> seq_comp_failures P Q\""], ["proof (prove)\nusing this:\n  (xs @ ipurge_tr I D (D y) ys,\n   insert None (ipurge_ref I D (D y) ys X) \\<inter> {})\n  \\<in> seq_comp_failures P Q\n\ngoal (1 subgoal):\n 1. (xs @ ipurge_tr I D (D y) ys, {}) \\<in> seq_comp_failures P Q", "by simp"], ["proof (state)\nthis:\n  (xs @ ipurge_tr I D (D y) ys, {}) \\<in> seq_comp_failures P Q\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys X)\n  \\<in> seq_comp_failures P Q\n\ngoal (1 subgoal):\n 1. \\<lbrakk>xs @ ipurge_tr I D (D y) ys \\<in> sentences P;\n     (D y, D None) \\<notin> I \\<and>\n     (\\<forall>u\\<in>sinks I D (D y) ys. (u, D None) \\<notin> I)\\<rbrakk>\n    \\<Longrightarrow> (xs @ ipurge_tr I D (D y) ys,\n                       ipurge_ref I D (D y) ys X)\n                      \\<in> seq_comp_failures P Q", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>xs @ ipurge_tr I D (D y) ys \\<in> sentences P;\n     (D y, D None) \\<notin> I \\<and>\n     (\\<forall>u\\<in>sinks I D (D y) ys. (u, D None) \\<notin> I)\\<rbrakk>\n    \\<Longrightarrow> (xs @ ipurge_tr I D (D y) ys,\n                       ipurge_ref I D (D y) ys X)\n                      \\<in> seq_comp_failures P Q", "assume\n      J: \"xs @ ipurge_tr I D (D y) ys \\<in> sentences P\" and\n      K: \"(D y, D None) \\<notin> I \\<and> (\\<forall>u \\<in> sinks I D (D y) ys. (u, D None) \\<notin> I)\""], ["proof (state)\nthis:\n  xs @ ipurge_tr I D (D y) ys \\<in> sentences P\n  (D y, D None) \\<notin> I \\<and>\n  (\\<forall>u\\<in>sinks I D (D y) ys. (u, D None) \\<notin> I)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>xs @ ipurge_tr I D (D y) ys \\<in> sentences P;\n     (D y, D None) \\<notin> I \\<and>\n     (\\<forall>u\\<in>sinks I D (D y) ys. (u, D None) \\<notin> I)\\<rbrakk>\n    \\<Longrightarrow> (xs @ ipurge_tr I D (D y) ys,\n                       ipurge_ref I D (D y) ys X)\n                      \\<in> seq_comp_failures P Q", "have \"(xs @ [y]) @ ys \\<in> sentences P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (xs @ [y]) @ ys \\<in> sentences P", "proof (simp add: sentences_def del: append_assoc, subst (2) append_assoc,\n     rule ipurge_tr_del_traces [OF C, where u = \"D y\"], simp_all add: K)"], ["proof (state)\ngoal (2 subgoals):\n 1. xs @ y # ipurge_tr I D (D y) ys @ [None] \\<in> traces P\n 2. xs @ y # ys \\<in> traces P", "have \"(y # ys, X) \\<in> futures P xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (y # ys, X) \\<in> futures P xs", "using E"], ["proof (prove)\nusing this:\n  (xs @ y # ys, X) \\<in> failures P\n\ngoal (1 subgoal):\n 1. (y # ys, X) \\<in> futures P xs", "by (simp add: futures_def)"], ["proof (state)\nthis:\n  (y # ys, X) \\<in> futures P xs\n\ngoal (2 subgoals):\n 1. xs @ y # ipurge_tr I D (D y) ys @ [None] \\<in> traces P\n 2. xs @ y # ys \\<in> traces P", "moreover"], ["proof (state)\nthis:\n  (y # ys, X) \\<in> futures P xs\n\ngoal (2 subgoals):\n 1. xs @ y # ipurge_tr I D (D y) ys @ [None] \\<in> traces P\n 2. xs @ y # ys \\<in> traces P", "have \"xs @ ipurge_tr I D (D y) ys @ [None] \\<in> traces P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs @ ipurge_tr I D (D y) ys @ [None] \\<in> traces P", "using J"], ["proof (prove)\nusing this:\n  xs @ ipurge_tr I D (D y) ys \\<in> sentences P\n\ngoal (1 subgoal):\n 1. xs @ ipurge_tr I D (D y) ys @ [None] \\<in> traces P", "by (simp add: sentences_def)"], ["proof (state)\nthis:\n  xs @ ipurge_tr I D (D y) ys @ [None] \\<in> traces P\n\ngoal (2 subgoals):\n 1. xs @ y # ipurge_tr I D (D y) ys @ [None] \\<in> traces P\n 2. xs @ y # ys \\<in> traces P", "hence \"(xs @ ipurge_tr I D (D y) ys @ [None], {}) \\<in> failures P\""], ["proof (prove)\nusing this:\n  xs @ ipurge_tr I D (D y) ys @ [None] \\<in> traces P\n\ngoal (1 subgoal):\n 1. (xs @ ipurge_tr I D (D y) ys @ [None], {}) \\<in> failures P", "by (rule traces_failures)"], ["proof (state)\nthis:\n  (xs @ ipurge_tr I D (D y) ys @ [None], {}) \\<in> failures P\n\ngoal (2 subgoals):\n 1. xs @ y # ipurge_tr I D (D y) ys @ [None] \\<in> traces P\n 2. xs @ y # ys \\<in> traces P", "hence \"(ipurge_tr I D (D y) ys @ [None], {}) \\<in> futures P xs\""], ["proof (prove)\nusing this:\n  (xs @ ipurge_tr I D (D y) ys @ [None], {}) \\<in> failures P\n\ngoal (1 subgoal):\n 1. (ipurge_tr I D (D y) ys @ [None], {}) \\<in> futures P xs", "by (simp add: futures_def)"], ["proof (state)\nthis:\n  (ipurge_tr I D (D y) ys @ [None], {}) \\<in> futures P xs\n\ngoal (2 subgoals):\n 1. xs @ y # ipurge_tr I D (D y) ys @ [None] \\<in> traces P\n 2. xs @ y # ys \\<in> traces P", "ultimately"], ["proof (chain)\npicking this:\n  (y # ys, X) \\<in> futures P xs\n  (ipurge_tr I D (D y) ys @ [None], {}) \\<in> futures P xs", "have \"(y # ipurge_tr I D (D y) (ipurge_tr I D (D y) ys @ [None]),\n        ipurge_ref I D (D y) (ipurge_tr I D (D y) ys @ [None]) {}) \\<in> futures P xs\""], ["proof (prove)\nusing this:\n  (y # ys, X) \\<in> futures P xs\n  (ipurge_tr I D (D y) ys @ [None], {}) \\<in> futures P xs\n\ngoal (1 subgoal):\n 1. (y # ipurge_tr I D (D y) (ipurge_tr I D (D y) ys @ [None]),\n     ipurge_ref I D (D y) (ipurge_tr I D (D y) ys @ [None]) {})\n    \\<in> futures P xs", "using C"], ["proof (prove)\nusing this:\n  (y # ys, X) \\<in> futures P xs\n  (ipurge_tr I D (D y) ys @ [None], {}) \\<in> futures P xs\n  secure P I D\n\ngoal (1 subgoal):\n 1. (y # ipurge_tr I D (D y) (ipurge_tr I D (D y) ys @ [None]),\n     ipurge_ref I D (D y) (ipurge_tr I D (D y) ys @ [None]) {})\n    \\<in> futures P xs", "by (simp add: secure_def del: ipurge_tr.simps)"], ["proof (state)\nthis:\n  (y # ipurge_tr I D (D y) (ipurge_tr I D (D y) ys @ [None]),\n   ipurge_ref I D (D y) (ipurge_tr I D (D y) ys @ [None]) {})\n  \\<in> futures P xs\n\ngoal (2 subgoals):\n 1. xs @ y # ipurge_tr I D (D y) ys @ [None] \\<in> traces P\n 2. xs @ y # ys \\<in> traces P", "hence \"(xs @ y # ipurge_tr I D (D y) (ipurge_tr I D (D y) ys @ [None]), {})\n        \\<in> failures P\""], ["proof (prove)\nusing this:\n  (y # ipurge_tr I D (D y) (ipurge_tr I D (D y) ys @ [None]),\n   ipurge_ref I D (D y) (ipurge_tr I D (D y) ys @ [None]) {})\n  \\<in> futures P xs\n\ngoal (1 subgoal):\n 1. (xs @ y # ipurge_tr I D (D y) (ipurge_tr I D (D y) ys @ [None]), {})\n    \\<in> failures P", "by (simp add: futures_def ipurge_ref_def)"], ["proof (state)\nthis:\n  (xs @ y # ipurge_tr I D (D y) (ipurge_tr I D (D y) ys @ [None]), {})\n  \\<in> failures P\n\ngoal (2 subgoals):\n 1. xs @ y # ipurge_tr I D (D y) ys @ [None] \\<in> traces P\n 2. xs @ y # ys \\<in> traces P", "moreover"], ["proof (state)\nthis:\n  (xs @ y # ipurge_tr I D (D y) (ipurge_tr I D (D y) ys @ [None]), {})\n  \\<in> failures P\n\ngoal (2 subgoals):\n 1. xs @ y # ipurge_tr I D (D y) ys @ [None] \\<in> traces P\n 2. xs @ y # ys \\<in> traces P", "have \"sinks I D (D y) (ipurge_tr I D (D y) ys) = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sinks I D (D y) (ipurge_tr I D (D y) ys) = {}", "by (rule sinks_idem)"], ["proof (state)\nthis:\n  sinks I D (D y) (ipurge_tr I D (D y) ys) = {}\n\ngoal (2 subgoals):\n 1. xs @ y # ipurge_tr I D (D y) ys @ [None] \\<in> traces P\n 2. xs @ y # ys \\<in> traces P", "hence \"\\<not> ((D y, D None) \\<in> I \\<or>\n        (\\<exists>u \\<in> sinks I D (D y) (ipurge_tr I D (D y) ys). (u, D None) \\<in> I))\""], ["proof (prove)\nusing this:\n  sinks I D (D y) (ipurge_tr I D (D y) ys) = {}\n\ngoal (1 subgoal):\n 1. \\<not> ((D y, D None) \\<in> I \\<or>\n            (\\<exists>u\\<in>sinks I D (D y) (ipurge_tr I D (D y) ys).\n                (u, D None) \\<in> I))", "using K"], ["proof (prove)\nusing this:\n  sinks I D (D y) (ipurge_tr I D (D y) ys) = {}\n  (D y, D None) \\<notin> I \\<and>\n  (\\<forall>u\\<in>sinks I D (D y) ys. (u, D None) \\<notin> I)\n\ngoal (1 subgoal):\n 1. \\<not> ((D y, D None) \\<in> I \\<or>\n            (\\<exists>u\\<in>sinks I D (D y) (ipurge_tr I D (D y) ys).\n                (u, D None) \\<in> I))", "by simp"], ["proof (state)\nthis:\n  \\<not> ((D y, D None) \\<in> I \\<or>\n          (\\<exists>u\\<in>sinks I D (D y) (ipurge_tr I D (D y) ys).\n              (u, D None) \\<in> I))\n\ngoal (2 subgoals):\n 1. xs @ y # ipurge_tr I D (D y) ys @ [None] \\<in> traces P\n 2. xs @ y # ys \\<in> traces P", "hence \"D None \\<notin> sinks I D (D y) (ipurge_tr I D (D y) ys @ [None])\""], ["proof (prove)\nusing this:\n  \\<not> ((D y, D None) \\<in> I \\<or>\n          (\\<exists>u\\<in>sinks I D (D y) (ipurge_tr I D (D y) ys).\n              (u, D None) \\<in> I))\n\ngoal (1 subgoal):\n 1. D None \\<notin> sinks I D (D y) (ipurge_tr I D (D y) ys @ [None])", "by (simp only: sinks_interference_eq, simp)"], ["proof (state)\nthis:\n  D None \\<notin> sinks I D (D y) (ipurge_tr I D (D y) ys @ [None])\n\ngoal (2 subgoals):\n 1. xs @ y # ipurge_tr I D (D y) ys @ [None] \\<in> traces P\n 2. xs @ y # ys \\<in> traces P", "ultimately"], ["proof (chain)\npicking this:\n  (xs @ y # ipurge_tr I D (D y) (ipurge_tr I D (D y) ys @ [None]), {})\n  \\<in> failures P\n  D None \\<notin> sinks I D (D y) (ipurge_tr I D (D y) ys @ [None])", "have \"(xs @ y # ipurge_tr I D (D y) (ipurge_tr I D (D y) ys)\n        @ [None], {}) \\<in> failures P\""], ["proof (prove)\nusing this:\n  (xs @ y # ipurge_tr I D (D y) (ipurge_tr I D (D y) ys @ [None]), {})\n  \\<in> failures P\n  D None \\<notin> sinks I D (D y) (ipurge_tr I D (D y) ys @ [None])\n\ngoal (1 subgoal):\n 1. (xs @ y # ipurge_tr I D (D y) (ipurge_tr I D (D y) ys) @ [None], {})\n    \\<in> failures P", "by simp"], ["proof (state)\nthis:\n  (xs @ y # ipurge_tr I D (D y) (ipurge_tr I D (D y) ys) @ [None], {})\n  \\<in> failures P\n\ngoal (2 subgoals):\n 1. xs @ y # ipurge_tr I D (D y) ys @ [None] \\<in> traces P\n 2. xs @ y # ys \\<in> traces P", "hence \"(xs @ y # ipurge_tr I D (D y) ys @ [None], {}) \\<in> failures P\""], ["proof (prove)\nusing this:\n  (xs @ y # ipurge_tr I D (D y) (ipurge_tr I D (D y) ys) @ [None], {})\n  \\<in> failures P\n\ngoal (1 subgoal):\n 1. (xs @ y # ipurge_tr I D (D y) ys @ [None], {}) \\<in> failures P", "by (simp add: ipurge_tr_idem)"], ["proof (state)\nthis:\n  (xs @ y # ipurge_tr I D (D y) ys @ [None], {}) \\<in> failures P\n\ngoal (2 subgoals):\n 1. xs @ y # ipurge_tr I D (D y) ys @ [None] \\<in> traces P\n 2. xs @ y # ys \\<in> traces P", "thus \"xs @ y # ipurge_tr I D (D y) ys @ [None] \\<in> traces P\""], ["proof (prove)\nusing this:\n  (xs @ y # ipurge_tr I D (D y) ys @ [None], {}) \\<in> failures P\n\ngoal (1 subgoal):\n 1. xs @ y # ipurge_tr I D (D y) ys @ [None] \\<in> traces P", "by (rule failures_traces)"], ["proof (state)\nthis:\n  xs @ y # ipurge_tr I D (D y) ys @ [None] \\<in> traces P\n\ngoal (1 subgoal):\n 1. xs @ y # ys \\<in> traces P", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. xs @ y # ys \\<in> traces P", "show \"xs @ y # ys \\<in> traces P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs @ y # ys \\<in> traces P", "using E"], ["proof (prove)\nusing this:\n  (xs @ y # ys, X) \\<in> failures P\n\ngoal (1 subgoal):\n 1. xs @ y # ys \\<in> traces P", "by (rule failures_traces)"], ["proof (state)\nthis:\n  xs @ y # ys \\<in> traces P\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (xs @ [y]) @ ys \\<in> sentences P\n\ngoal (1 subgoal):\n 1. \\<lbrakk>xs @ ipurge_tr I D (D y) ys \\<in> sentences P;\n     (D y, D None) \\<notin> I \\<and>\n     (\\<forall>u\\<in>sinks I D (D y) ys. (u, D None) \\<notin> I)\\<rbrakk>\n    \\<Longrightarrow> (xs @ ipurge_tr I D (D y) ys,\n                       ipurge_ref I D (D y) ys X)\n                      \\<in> seq_comp_failures P Q", "hence \"xs @ y # ys \\<in> sentences P\""], ["proof (prove)\nusing this:\n  (xs @ [y]) @ ys \\<in> sentences P\n\ngoal (1 subgoal):\n 1. xs @ y # ys \\<in> sentences P", "by simp"], ["proof (state)\nthis:\n  xs @ y # ys \\<in> sentences P\n\ngoal (1 subgoal):\n 1. \\<lbrakk>xs @ ipurge_tr I D (D y) ys \\<in> sentences P;\n     (D y, D None) \\<notin> I \\<and>\n     (\\<forall>u\\<in>sinks I D (D y) ys. (u, D None) \\<notin> I)\\<rbrakk>\n    \\<Longrightarrow> (xs @ ipurge_tr I D (D y) ys,\n                       ipurge_ref I D (D y) ys X)\n                      \\<in> seq_comp_failures P Q", "thus ?thesis"], ["proof (prove)\nusing this:\n  xs @ y # ys \\<in> sentences P\n\ngoal (1 subgoal):\n 1. (xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys X)\n    \\<in> seq_comp_failures P Q", "using D"], ["proof (prove)\nusing this:\n  xs @ y # ys \\<in> sentences P\n  xs @ y # ys \\<notin> sentences P\n\ngoal (1 subgoal):\n 1. (xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys X)\n    \\<in> seq_comp_failures P Q", "by contradiction"], ["proof (state)\nthis:\n  (xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys X)\n  \\<in> seq_comp_failures P Q\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys X)\n  \\<in> seq_comp_failures P Q\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma seq_comp_secure_aux_1_case_2:\n  assumes\n    A: \"secure_termination I D\" and\n    B: \"sequential P\" and\n    C: \"secure P I D\" and\n    D: \"secure Q I D\" and\n    E: \"xs @ y # ys \\<in> sentences P\" and\n    F: \"(xs @ y # ys, X) \\<in> failures P\" and\n    G: \"([], Y) \\<in> failures Q\"\n  shows \"(xs @ ipurge_tr I D (D y) ys,\n    ipurge_ref I D (D y) ys (insert None X \\<inter> Y)) \\<in> seq_comp_failures P Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (xs @ ipurge_tr I D (D y) ys,\n     ipurge_ref I D (D y) ys (insert None X \\<inter> Y))\n    \\<in> seq_comp_failures P Q", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (xs @ ipurge_tr I D (D y) ys,\n     ipurge_ref I D (D y) ys (insert None X \\<inter> Y))\n    \\<in> seq_comp_failures P Q", "have \"(y # ys, X) \\<in> futures P xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (y # ys, X) \\<in> futures P xs", "using F"], ["proof (prove)\nusing this:\n  (xs @ y # ys, X) \\<in> failures P\n\ngoal (1 subgoal):\n 1. (y # ys, X) \\<in> futures P xs", "by (simp add: futures_def)"], ["proof (state)\nthis:\n  (y # ys, X) \\<in> futures P xs\n\ngoal (1 subgoal):\n 1. (xs @ ipurge_tr I D (D y) ys,\n     ipurge_ref I D (D y) ys (insert None X \\<inter> Y))\n    \\<in> seq_comp_failures P Q", "hence \"(ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys X)\n    \\<in> futures P xs\""], ["proof (prove)\nusing this:\n  (y # ys, X) \\<in> futures P xs\n\ngoal (1 subgoal):\n 1. (ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys X) \\<in> futures P xs", "using C"], ["proof (prove)\nusing this:\n  (y # ys, X) \\<in> futures P xs\n  secure P I D\n\ngoal (1 subgoal):\n 1. (ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys X) \\<in> futures P xs", "by (simp add: secure_def)"], ["proof (state)\nthis:\n  (ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys X) \\<in> futures P xs\n\ngoal (1 subgoal):\n 1. (xs @ ipurge_tr I D (D y) ys,\n     ipurge_ref I D (D y) ys (insert None X \\<inter> Y))\n    \\<in> seq_comp_failures P Q", "hence H: \"(xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys X)\n    \\<in> failures P\""], ["proof (prove)\nusing this:\n  (ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys X) \\<in> futures P xs\n\ngoal (1 subgoal):\n 1. (xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys X)\n    \\<in> failures P", "by (simp add: futures_def)"], ["proof (state)\nthis:\n  (xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys X) \\<in> failures P\n\ngoal (1 subgoal):\n 1. (xs @ ipurge_tr I D (D y) ys,\n     ipurge_ref I D (D y) ys (insert None X \\<inter> Y))\n    \\<in> seq_comp_failures P Q", "have \"weakly_sequential P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. weakly_sequential P", "using B"], ["proof (prove)\nusing this:\n  sequential P\n\ngoal (1 subgoal):\n 1. weakly_sequential P", "by (rule seq_implies_weakly_seq)"], ["proof (state)\nthis:\n  weakly_sequential P\n\ngoal (1 subgoal):\n 1. (xs @ ipurge_tr I D (D y) ys,\n     ipurge_ref I D (D y) ys (insert None X \\<inter> Y))\n    \\<in> seq_comp_failures P Q", "hence I: \"None \\<notin> set (xs @ y # ys)\""], ["proof (prove)\nusing this:\n  weakly_sequential P\n\ngoal (1 subgoal):\n 1. None \\<notin> set (xs @ y # ys)", "using E"], ["proof (prove)\nusing this:\n  weakly_sequential P\n  xs @ y # ys \\<in> sentences P\n\ngoal (1 subgoal):\n 1. None \\<notin> set (xs @ y # ys)", "by (rule weakly_seq_sentences_none)"], ["proof (state)\nthis:\n  None \\<notin> set (xs @ y # ys)\n\ngoal (1 subgoal):\n 1. (xs @ ipurge_tr I D (D y) ys,\n     ipurge_ref I D (D y) ys (insert None X \\<inter> Y))\n    \\<in> seq_comp_failures P Q", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (xs @ ipurge_tr I D (D y) ys,\n     ipurge_ref I D (D y) ys (insert None X \\<inter> Y))\n    \\<in> seq_comp_failures P Q", "proof (cases \"xs @ ipurge_tr I D (D y) ys \\<in> sentences P\",\n   case_tac [2] \"(D y, D None) \\<in> I \\<or> (\\<exists>u \\<in> sinks I D (D y) ys. (u, D None) \\<in> I)\",\n   simp_all)"], ["proof (state)\ngoal (3 subgoals):\n 1. xs @ ipurge_tr I D (D y) ys \\<in> sentences P \\<Longrightarrow>\n    (xs @ ipurge_tr I D (D y) ys,\n     ipurge_ref I D (D y) ys (insert None X \\<inter> Y))\n    \\<in> seq_comp_failures P Q\n 2. \\<lbrakk>xs @ ipurge_tr I D (D y) ys \\<notin> sentences P;\n     (D y, D None) \\<in> I \\<or>\n     (\\<exists>u\\<in>sinks I D (D y) ys. (u, D None) \\<in> I)\\<rbrakk>\n    \\<Longrightarrow> (xs @ ipurge_tr I D (D y) ys,\n                       ipurge_ref I D (D y) ys (insert None X \\<inter> Y))\n                      \\<in> seq_comp_failures P Q\n 3. \\<lbrakk>xs @ ipurge_tr I D (D y) ys \\<notin> sentences P;\n     (D y, D None) \\<notin> I \\<and>\n     (\\<forall>u\\<in>sinks I D (D y) ys. (u, D None) \\<notin> I)\\<rbrakk>\n    \\<Longrightarrow> (xs @ ipurge_tr I D (D y) ys,\n                       ipurge_ref I D (D y) ys (insert None X \\<inter> Y))\n                      \\<in> seq_comp_failures P Q", "assume J: \"xs @ ipurge_tr I D (D y) ys \\<in> sentences P\""], ["proof (state)\nthis:\n  xs @ ipurge_tr I D (D y) ys \\<in> sentences P\n\ngoal (3 subgoals):\n 1. xs @ ipurge_tr I D (D y) ys \\<in> sentences P \\<Longrightarrow>\n    (xs @ ipurge_tr I D (D y) ys,\n     ipurge_ref I D (D y) ys (insert None X \\<inter> Y))\n    \\<in> seq_comp_failures P Q\n 2. \\<lbrakk>xs @ ipurge_tr I D (D y) ys \\<notin> sentences P;\n     (D y, D None) \\<in> I \\<or>\n     (\\<exists>u\\<in>sinks I D (D y) ys. (u, D None) \\<in> I)\\<rbrakk>\n    \\<Longrightarrow> (xs @ ipurge_tr I D (D y) ys,\n                       ipurge_ref I D (D y) ys (insert None X \\<inter> Y))\n                      \\<in> seq_comp_failures P Q\n 3. \\<lbrakk>xs @ ipurge_tr I D (D y) ys \\<notin> sentences P;\n     (D y, D None) \\<notin> I \\<and>\n     (\\<forall>u\\<in>sinks I D (D y) ys. (u, D None) \\<notin> I)\\<rbrakk>\n    \\<Longrightarrow> (xs @ ipurge_tr I D (D y) ys,\n                       ipurge_ref I D (D y) ys (insert None X \\<inter> Y))\n                      \\<in> seq_comp_failures P Q", "have \"ipurge_ref I D (D y) ys Y \\<subseteq> Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ipurge_ref I D (D y) ys Y \\<subseteq> Y", "by (rule ipurge_ref_subset)"], ["proof (state)\nthis:\n  ipurge_ref I D (D y) ys Y \\<subseteq> Y\n\ngoal (3 subgoals):\n 1. xs @ ipurge_tr I D (D y) ys \\<in> sentences P \\<Longrightarrow>\n    (xs @ ipurge_tr I D (D y) ys,\n     ipurge_ref I D (D y) ys (insert None X \\<inter> Y))\n    \\<in> seq_comp_failures P Q\n 2. \\<lbrakk>xs @ ipurge_tr I D (D y) ys \\<notin> sentences P;\n     (D y, D None) \\<in> I \\<or>\n     (\\<exists>u\\<in>sinks I D (D y) ys. (u, D None) \\<in> I)\\<rbrakk>\n    \\<Longrightarrow> (xs @ ipurge_tr I D (D y) ys,\n                       ipurge_ref I D (D y) ys (insert None X \\<inter> Y))\n                      \\<in> seq_comp_failures P Q\n 3. \\<lbrakk>xs @ ipurge_tr I D (D y) ys \\<notin> sentences P;\n     (D y, D None) \\<notin> I \\<and>\n     (\\<forall>u\\<in>sinks I D (D y) ys. (u, D None) \\<notin> I)\\<rbrakk>\n    \\<Longrightarrow> (xs @ ipurge_tr I D (D y) ys,\n                       ipurge_ref I D (D y) ys (insert None X \\<inter> Y))\n                      \\<in> seq_comp_failures P Q", "with G"], ["proof (chain)\npicking this:\n  ([], Y) \\<in> failures Q\n  ipurge_ref I D (D y) ys Y \\<subseteq> Y", "have \"([], ipurge_ref I D (D y) ys Y) \\<in> failures Q\""], ["proof (prove)\nusing this:\n  ([], Y) \\<in> failures Q\n  ipurge_ref I D (D y) ys Y \\<subseteq> Y\n\ngoal (1 subgoal):\n 1. ([], ipurge_ref I D (D y) ys Y) \\<in> failures Q", "by (rule process_rule_3)"], ["proof (state)\nthis:\n  ([], ipurge_ref I D (D y) ys Y) \\<in> failures Q\n\ngoal (3 subgoals):\n 1. xs @ ipurge_tr I D (D y) ys \\<in> sentences P \\<Longrightarrow>\n    (xs @ ipurge_tr I D (D y) ys,\n     ipurge_ref I D (D y) ys (insert None X \\<inter> Y))\n    \\<in> seq_comp_failures P Q\n 2. \\<lbrakk>xs @ ipurge_tr I D (D y) ys \\<notin> sentences P;\n     (D y, D None) \\<in> I \\<or>\n     (\\<exists>u\\<in>sinks I D (D y) ys. (u, D None) \\<in> I)\\<rbrakk>\n    \\<Longrightarrow> (xs @ ipurge_tr I D (D y) ys,\n                       ipurge_ref I D (D y) ys (insert None X \\<inter> Y))\n                      \\<in> seq_comp_failures P Q\n 3. \\<lbrakk>xs @ ipurge_tr I D (D y) ys \\<notin> sentences P;\n     (D y, D None) \\<notin> I \\<and>\n     (\\<forall>u\\<in>sinks I D (D y) ys. (u, D None) \\<notin> I)\\<rbrakk>\n    \\<Longrightarrow> (xs @ ipurge_tr I D (D y) ys,\n                       ipurge_ref I D (D y) ys (insert None X \\<inter> Y))\n                      \\<in> seq_comp_failures P Q", "with J and H"], ["proof (chain)\npicking this:\n  xs @ ipurge_tr I D (D y) ys \\<in> sentences P\n  (xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys X) \\<in> failures P\n  ([], ipurge_ref I D (D y) ys Y) \\<in> failures Q", "have \"(xs @ ipurge_tr I D (D y) ys,\n      insert None (ipurge_ref I D (D y) ys X) \\<inter> ipurge_ref I D (D y) ys Y)\n      \\<in> seq_comp_failures P Q\""], ["proof (prove)\nusing this:\n  xs @ ipurge_tr I D (D y) ys \\<in> sentences P\n  (xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys X) \\<in> failures P\n  ([], ipurge_ref I D (D y) ys Y) \\<in> failures Q\n\ngoal (1 subgoal):\n 1. (xs @ ipurge_tr I D (D y) ys,\n     insert None (ipurge_ref I D (D y) ys X) \\<inter>\n     ipurge_ref I D (D y) ys Y)\n    \\<in> seq_comp_failures P Q", "by (rule SCF_R2)"], ["proof (state)\nthis:\n  (xs @ ipurge_tr I D (D y) ys,\n   insert None (ipurge_ref I D (D y) ys X) \\<inter>\n   ipurge_ref I D (D y) ys Y)\n  \\<in> seq_comp_failures P Q\n\ngoal (3 subgoals):\n 1. xs @ ipurge_tr I D (D y) ys \\<in> sentences P \\<Longrightarrow>\n    (xs @ ipurge_tr I D (D y) ys,\n     ipurge_ref I D (D y) ys (insert None X \\<inter> Y))\n    \\<in> seq_comp_failures P Q\n 2. \\<lbrakk>xs @ ipurge_tr I D (D y) ys \\<notin> sentences P;\n     (D y, D None) \\<in> I \\<or>\n     (\\<exists>u\\<in>sinks I D (D y) ys. (u, D None) \\<in> I)\\<rbrakk>\n    \\<Longrightarrow> (xs @ ipurge_tr I D (D y) ys,\n                       ipurge_ref I D (D y) ys (insert None X \\<inter> Y))\n                      \\<in> seq_comp_failures P Q\n 3. \\<lbrakk>xs @ ipurge_tr I D (D y) ys \\<notin> sentences P;\n     (D y, D None) \\<notin> I \\<and>\n     (\\<forall>u\\<in>sinks I D (D y) ys. (u, D None) \\<notin> I)\\<rbrakk>\n    \\<Longrightarrow> (xs @ ipurge_tr I D (D y) ys,\n                       ipurge_ref I D (D y) ys (insert None X \\<inter> Y))\n                      \\<in> seq_comp_failures P Q", "moreover"], ["proof (state)\nthis:\n  (xs @ ipurge_tr I D (D y) ys,\n   insert None (ipurge_ref I D (D y) ys X) \\<inter>\n   ipurge_ref I D (D y) ys Y)\n  \\<in> seq_comp_failures P Q\n\ngoal (3 subgoals):\n 1. xs @ ipurge_tr I D (D y) ys \\<in> sentences P \\<Longrightarrow>\n    (xs @ ipurge_tr I D (D y) ys,\n     ipurge_ref I D (D y) ys (insert None X \\<inter> Y))\n    \\<in> seq_comp_failures P Q\n 2. \\<lbrakk>xs @ ipurge_tr I D (D y) ys \\<notin> sentences P;\n     (D y, D None) \\<in> I \\<or>\n     (\\<exists>u\\<in>sinks I D (D y) ys. (u, D None) \\<in> I)\\<rbrakk>\n    \\<Longrightarrow> (xs @ ipurge_tr I D (D y) ys,\n                       ipurge_ref I D (D y) ys (insert None X \\<inter> Y))\n                      \\<in> seq_comp_failures P Q\n 3. \\<lbrakk>xs @ ipurge_tr I D (D y) ys \\<notin> sentences P;\n     (D y, D None) \\<notin> I \\<and>\n     (\\<forall>u\\<in>sinks I D (D y) ys. (u, D None) \\<notin> I)\\<rbrakk>\n    \\<Longrightarrow> (xs @ ipurge_tr I D (D y) ys,\n                       ipurge_ref I D (D y) ys (insert None X \\<inter> Y))\n                      \\<in> seq_comp_failures P Q", "have\n     \"ipurge_ref I D (D y) ys (insert None X) \\<inter> ipurge_ref I D (D y) ys Y \\<subseteq>\n      insert None (ipurge_ref I D (D y) ys X) \\<inter> ipurge_ref I D (D y) ys Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ipurge_ref I D (D y) ys (insert None X) \\<inter>\n    ipurge_ref I D (D y) ys Y\n    \\<subseteq> insert None (ipurge_ref I D (D y) ys X) \\<inter>\n                ipurge_ref I D (D y) ys Y", "proof (rule subsetI, simp del: insert_iff, erule conjE)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> ipurge_ref I D (D y) ys (insert None X);\n        x \\<in> ipurge_ref I D (D y) ys Y\\<rbrakk>\n       \\<Longrightarrow> x \\<in> insert None (ipurge_ref I D (D y) ys X)", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> ipurge_ref I D (D y) ys (insert None X);\n        x \\<in> ipurge_ref I D (D y) ys Y\\<rbrakk>\n       \\<Longrightarrow> x \\<in> insert None (ipurge_ref I D (D y) ys X)", "have \"ipurge_ref I D (D y) ys (insert None X) \\<subseteq>\n        insert None (ipurge_ref I D (D y) ys X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ipurge_ref I D (D y) ys (insert None X)\n    \\<subseteq> insert None (ipurge_ref I D (D y) ys X)", "by (rule ipurge_ref_subset_insert)"], ["proof (state)\nthis:\n  ipurge_ref I D (D y) ys (insert None X)\n  \\<subseteq> insert None (ipurge_ref I D (D y) ys X)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> ipurge_ref I D (D y) ys (insert None X);\n        x \\<in> ipurge_ref I D (D y) ys Y\\<rbrakk>\n       \\<Longrightarrow> x \\<in> insert None (ipurge_ref I D (D y) ys X)", "moreover"], ["proof (state)\nthis:\n  ipurge_ref I D (D y) ys (insert None X)\n  \\<subseteq> insert None (ipurge_ref I D (D y) ys X)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> ipurge_ref I D (D y) ys (insert None X);\n        x \\<in> ipurge_ref I D (D y) ys Y\\<rbrakk>\n       \\<Longrightarrow> x \\<in> insert None (ipurge_ref I D (D y) ys X)", "assume \"x \\<in> ipurge_ref I D (D y) ys (insert None X)\""], ["proof (state)\nthis:\n  x \\<in> ipurge_ref I D (D y) ys (insert None X)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> ipurge_ref I D (D y) ys (insert None X);\n        x \\<in> ipurge_ref I D (D y) ys Y\\<rbrakk>\n       \\<Longrightarrow> x \\<in> insert None (ipurge_ref I D (D y) ys X)", "ultimately"], ["proof (chain)\npicking this:\n  ipurge_ref I D (D y) ys (insert None X)\n  \\<subseteq> insert None (ipurge_ref I D (D y) ys X)\n  x \\<in> ipurge_ref I D (D y) ys (insert None X)", "show \"x \\<in> insert None (ipurge_ref I D (D y) ys X)\""], ["proof (prove)\nusing this:\n  ipurge_ref I D (D y) ys (insert None X)\n  \\<subseteq> insert None (ipurge_ref I D (D y) ys X)\n  x \\<in> ipurge_ref I D (D y) ys (insert None X)\n\ngoal (1 subgoal):\n 1. x \\<in> insert None (ipurge_ref I D (D y) ys X)", ".."], ["proof (state)\nthis:\n  x \\<in> insert None (ipurge_ref I D (D y) ys X)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ipurge_ref I D (D y) ys (insert None X) \\<inter> ipurge_ref I D (D y) ys Y\n  \\<subseteq> insert None (ipurge_ref I D (D y) ys X) \\<inter>\n              ipurge_ref I D (D y) ys Y\n\ngoal (3 subgoals):\n 1. xs @ ipurge_tr I D (D y) ys \\<in> sentences P \\<Longrightarrow>\n    (xs @ ipurge_tr I D (D y) ys,\n     ipurge_ref I D (D y) ys (insert None X \\<inter> Y))\n    \\<in> seq_comp_failures P Q\n 2. \\<lbrakk>xs @ ipurge_tr I D (D y) ys \\<notin> sentences P;\n     (D y, D None) \\<in> I \\<or>\n     (\\<exists>u\\<in>sinks I D (D y) ys. (u, D None) \\<in> I)\\<rbrakk>\n    \\<Longrightarrow> (xs @ ipurge_tr I D (D y) ys,\n                       ipurge_ref I D (D y) ys (insert None X \\<inter> Y))\n                      \\<in> seq_comp_failures P Q\n 3. \\<lbrakk>xs @ ipurge_tr I D (D y) ys \\<notin> sentences P;\n     (D y, D None) \\<notin> I \\<and>\n     (\\<forall>u\\<in>sinks I D (D y) ys. (u, D None) \\<notin> I)\\<rbrakk>\n    \\<Longrightarrow> (xs @ ipurge_tr I D (D y) ys,\n                       ipurge_ref I D (D y) ys (insert None X \\<inter> Y))\n                      \\<in> seq_comp_failures P Q", "ultimately"], ["proof (chain)\npicking this:\n  (xs @ ipurge_tr I D (D y) ys,\n   insert None (ipurge_ref I D (D y) ys X) \\<inter>\n   ipurge_ref I D (D y) ys Y)\n  \\<in> seq_comp_failures P Q\n  ipurge_ref I D (D y) ys (insert None X) \\<inter> ipurge_ref I D (D y) ys Y\n  \\<subseteq> insert None (ipurge_ref I D (D y) ys X) \\<inter>\n              ipurge_ref I D (D y) ys Y", "have \"(xs @ ipurge_tr I D (D y) ys,\n      ipurge_ref I D (D y) ys (insert None X) \\<inter> ipurge_ref I D (D y) ys Y)\n      \\<in> seq_comp_failures P Q\""], ["proof (prove)\nusing this:\n  (xs @ ipurge_tr I D (D y) ys,\n   insert None (ipurge_ref I D (D y) ys X) \\<inter>\n   ipurge_ref I D (D y) ys Y)\n  \\<in> seq_comp_failures P Q\n  ipurge_ref I D (D y) ys (insert None X) \\<inter> ipurge_ref I D (D y) ys Y\n  \\<subseteq> insert None (ipurge_ref I D (D y) ys X) \\<inter>\n              ipurge_ref I D (D y) ys Y\n\ngoal (1 subgoal):\n 1. (xs @ ipurge_tr I D (D y) ys,\n     ipurge_ref I D (D y) ys (insert None X) \\<inter>\n     ipurge_ref I D (D y) ys Y)\n    \\<in> seq_comp_failures P Q", "by (rule seq_comp_prop_3)"], ["proof (state)\nthis:\n  (xs @ ipurge_tr I D (D y) ys,\n   ipurge_ref I D (D y) ys (insert None X) \\<inter>\n   ipurge_ref I D (D y) ys Y)\n  \\<in> seq_comp_failures P Q\n\ngoal (3 subgoals):\n 1. xs @ ipurge_tr I D (D y) ys \\<in> sentences P \\<Longrightarrow>\n    (xs @ ipurge_tr I D (D y) ys,\n     ipurge_ref I D (D y) ys (insert None X \\<inter> Y))\n    \\<in> seq_comp_failures P Q\n 2. \\<lbrakk>xs @ ipurge_tr I D (D y) ys \\<notin> sentences P;\n     (D y, D None) \\<in> I \\<or>\n     (\\<exists>u\\<in>sinks I D (D y) ys. (u, D None) \\<in> I)\\<rbrakk>\n    \\<Longrightarrow> (xs @ ipurge_tr I D (D y) ys,\n                       ipurge_ref I D (D y) ys (insert None X \\<inter> Y))\n                      \\<in> seq_comp_failures P Q\n 3. \\<lbrakk>xs @ ipurge_tr I D (D y) ys \\<notin> sentences P;\n     (D y, D None) \\<notin> I \\<and>\n     (\\<forall>u\\<in>sinks I D (D y) ys. (u, D None) \\<notin> I)\\<rbrakk>\n    \\<Longrightarrow> (xs @ ipurge_tr I D (D y) ys,\n                       ipurge_ref I D (D y) ys (insert None X \\<inter> Y))\n                      \\<in> seq_comp_failures P Q", "thus ?thesis"], ["proof (prove)\nusing this:\n  (xs @ ipurge_tr I D (D y) ys,\n   ipurge_ref I D (D y) ys (insert None X) \\<inter>\n   ipurge_ref I D (D y) ys Y)\n  \\<in> seq_comp_failures P Q\n\ngoal (1 subgoal):\n 1. (xs @ ipurge_tr I D (D y) ys,\n     ipurge_ref I D (D y) ys (insert None X \\<inter> Y))\n    \\<in> seq_comp_failures P Q", "by (simp add: ipurge_ref_distrib_inter)"], ["proof (state)\nthis:\n  (xs @ ipurge_tr I D (D y) ys,\n   ipurge_ref I D (D y) ys (insert None X \\<inter> Y))\n  \\<in> seq_comp_failures P Q\n\ngoal (2 subgoals):\n 1. \\<lbrakk>xs @ ipurge_tr I D (D y) ys \\<notin> sentences P;\n     (D y, D None) \\<in> I \\<or>\n     (\\<exists>u\\<in>sinks I D (D y) ys. (u, D None) \\<in> I)\\<rbrakk>\n    \\<Longrightarrow> (xs @ ipurge_tr I D (D y) ys,\n                       ipurge_ref I D (D y) ys (insert None X \\<inter> Y))\n                      \\<in> seq_comp_failures P Q\n 2. \\<lbrakk>xs @ ipurge_tr I D (D y) ys \\<notin> sentences P;\n     (D y, D None) \\<notin> I \\<and>\n     (\\<forall>u\\<in>sinks I D (D y) ys. (u, D None) \\<notin> I)\\<rbrakk>\n    \\<Longrightarrow> (xs @ ipurge_tr I D (D y) ys,\n                       ipurge_ref I D (D y) ys (insert None X \\<inter> Y))\n                      \\<in> seq_comp_failures P Q", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>xs @ ipurge_tr I D (D y) ys \\<notin> sentences P;\n     (D y, D None) \\<in> I \\<or>\n     (\\<exists>u\\<in>sinks I D (D y) ys. (u, D None) \\<in> I)\\<rbrakk>\n    \\<Longrightarrow> (xs @ ipurge_tr I D (D y) ys,\n                       ipurge_ref I D (D y) ys (insert None X \\<inter> Y))\n                      \\<in> seq_comp_failures P Q\n 2. \\<lbrakk>xs @ ipurge_tr I D (D y) ys \\<notin> sentences P;\n     (D y, D None) \\<notin> I \\<and>\n     (\\<forall>u\\<in>sinks I D (D y) ys. (u, D None) \\<notin> I)\\<rbrakk>\n    \\<Longrightarrow> (xs @ ipurge_tr I D (D y) ys,\n                       ipurge_ref I D (D y) ys (insert None X \\<inter> Y))\n                      \\<in> seq_comp_failures P Q", "assume\n      J: \"xs @ ipurge_tr I D (D y) ys \\<notin> sentences P\" and\n      K: \"(D y, D None) \\<in> I \\<or> (\\<exists>u \\<in> sinks I D (D y) ys. (u, D None) \\<in> I)\""], ["proof (state)\nthis:\n  xs @ ipurge_tr I D (D y) ys \\<notin> sentences P\n  (D y, D None) \\<in> I \\<or>\n  (\\<exists>u\\<in>sinks I D (D y) ys. (u, D None) \\<in> I)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>xs @ ipurge_tr I D (D y) ys \\<notin> sentences P;\n     (D y, D None) \\<in> I \\<or>\n     (\\<exists>u\\<in>sinks I D (D y) ys. (u, D None) \\<in> I)\\<rbrakk>\n    \\<Longrightarrow> (xs @ ipurge_tr I D (D y) ys,\n                       ipurge_ref I D (D y) ys (insert None X \\<inter> Y))\n                      \\<in> seq_comp_failures P Q\n 2. \\<lbrakk>xs @ ipurge_tr I D (D y) ys \\<notin> sentences P;\n     (D y, D None) \\<notin> I \\<and>\n     (\\<forall>u\\<in>sinks I D (D y) ys. (u, D None) \\<notin> I)\\<rbrakk>\n    \\<Longrightarrow> (xs @ ipurge_tr I D (D y) ys,\n                       ipurge_ref I D (D y) ys (insert None X \\<inter> Y))\n                      \\<in> seq_comp_failures P Q", "have \"ipurge_ref I D (D y) ys (insert None X \\<inter> Y) = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ipurge_ref I D (D y) ys (insert None X \\<inter> Y) = {}", "proof (rule disjE [OF K], erule_tac [2] bexE)"], ["proof (state)\ngoal (2 subgoals):\n 1. (D y, D None) \\<in> I \\<Longrightarrow>\n    ipurge_ref I D (D y) ys (insert None X \\<inter> Y) = {}\n 2. \\<And>u.\n       \\<lbrakk>u \\<in> sinks I D (D y) ys; (u, D None) \\<in> I\\<rbrakk>\n       \\<Longrightarrow> ipurge_ref I D (D y) ys\n                          (insert None X \\<inter> Y) =\n                         {}", "assume L: \"(D y, D None) \\<in> I\""], ["proof (state)\nthis:\n  (D y, D None) \\<in> I\n\ngoal (2 subgoals):\n 1. (D y, D None) \\<in> I \\<Longrightarrow>\n    ipurge_ref I D (D y) ys (insert None X \\<inter> Y) = {}\n 2. \\<And>u.\n       \\<lbrakk>u \\<in> sinks I D (D y) ys; (u, D None) \\<in> I\\<rbrakk>\n       \\<Longrightarrow> ipurge_ref I D (D y) ys\n                          (insert None X \\<inter> Y) =\n                         {}", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. ipurge_ref I D (D y) ys (insert None X \\<inter> Y) = {}", "proof (rule ipurge_ref_empty [of \"D y\"], simp)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> insert None X \\<inter> Y \\<Longrightarrow> (D y, D x) \\<in> I", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> insert None X \\<inter> Y \\<Longrightarrow> (D y, D x) \\<in> I", "have \"(D y, D None) \\<in> I \\<and> y \\<noteq> None \\<longrightarrow> (\\<forall>u \\<in> range D. (D y, u) \\<in> I)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (D y, D None) \\<in> I \\<and> y \\<noteq> None \\<longrightarrow>\n    (\\<forall>u\\<in>range D. (D y, u) \\<in> I)", "using A"], ["proof (prove)\nusing this:\n  secure_termination I D\n\ngoal (1 subgoal):\n 1. (D y, D None) \\<in> I \\<and> y \\<noteq> None \\<longrightarrow>\n    (\\<forall>u\\<in>range D. (D y, u) \\<in> I)", "by (simp add: secure_termination_def)"], ["proof (state)\nthis:\n  (D y, D None) \\<in> I \\<and> y \\<noteq> None \\<longrightarrow>\n  (\\<forall>u\\<in>range D. (D y, u) \\<in> I)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> insert None X \\<inter> Y \\<Longrightarrow> (D y, D x) \\<in> I", "moreover"], ["proof (state)\nthis:\n  (D y, D None) \\<in> I \\<and> y \\<noteq> None \\<longrightarrow>\n  (\\<forall>u\\<in>range D. (D y, u) \\<in> I)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> insert None X \\<inter> Y \\<Longrightarrow> (D y, D x) \\<in> I", "have \"y \\<noteq> None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y \\<noteq> None", "using I"], ["proof (prove)\nusing this:\n  None \\<notin> set (xs @ y # ys)\n\ngoal (1 subgoal):\n 1. y \\<noteq> None", "by (rule_tac not_sym, simp)"], ["proof (state)\nthis:\n  y \\<noteq> None\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> insert None X \\<inter> Y \\<Longrightarrow> (D y, D x) \\<in> I", "ultimately"], ["proof (chain)\npicking this:\n  (D y, D None) \\<in> I \\<and> y \\<noteq> None \\<longrightarrow>\n  (\\<forall>u\\<in>range D. (D y, u) \\<in> I)\n  y \\<noteq> None", "have \"\\<forall>u \\<in> range D. (D y, u) \\<in> I\""], ["proof (prove)\nusing this:\n  (D y, D None) \\<in> I \\<and> y \\<noteq> None \\<longrightarrow>\n  (\\<forall>u\\<in>range D. (D y, u) \\<in> I)\n  y \\<noteq> None\n\ngoal (1 subgoal):\n 1. \\<forall>u\\<in>range D. (D y, u) \\<in> I", "using L"], ["proof (prove)\nusing this:\n  (D y, D None) \\<in> I \\<and> y \\<noteq> None \\<longrightarrow>\n  (\\<forall>u\\<in>range D. (D y, u) \\<in> I)\n  y \\<noteq> None\n  (D y, D None) \\<in> I\n\ngoal (1 subgoal):\n 1. \\<forall>u\\<in>range D. (D y, u) \\<in> I", "by simp"], ["proof (state)\nthis:\n  \\<forall>u\\<in>range D. (D y, u) \\<in> I\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> insert None X \\<inter> Y \\<Longrightarrow> (D y, D x) \\<in> I", "thus \"(D y, D x) \\<in> I\""], ["proof (prove)\nusing this:\n  \\<forall>u\\<in>range D. (D y, u) \\<in> I\n\ngoal (1 subgoal):\n 1. (D y, D x) \\<in> I", "by simp"], ["proof (state)\nthis:\n  (D y, D x) \\<in> I\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ipurge_ref I D (D y) ys (insert None X \\<inter> Y) = {}\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<lbrakk>u \\<in> sinks I D (D y) ys; (u, D None) \\<in> I\\<rbrakk>\n       \\<Longrightarrow> ipurge_ref I D (D y) ys\n                          (insert None X \\<inter> Y) =\n                         {}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<lbrakk>u \\<in> sinks I D (D y) ys; (u, D None) \\<in> I\\<rbrakk>\n       \\<Longrightarrow> ipurge_ref I D (D y) ys\n                          (insert None X \\<inter> Y) =\n                         {}", "fix u"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<lbrakk>u \\<in> sinks I D (D y) ys; (u, D None) \\<in> I\\<rbrakk>\n       \\<Longrightarrow> ipurge_ref I D (D y) ys\n                          (insert None X \\<inter> Y) =\n                         {}", "assume\n        L: \"u \\<in> sinks I D (D y) ys\" and\n        M: \"(u, D None) \\<in> I\""], ["proof (state)\nthis:\n  u \\<in> sinks I D (D y) ys\n  (u, D None) \\<in> I\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<lbrakk>u \\<in> sinks I D (D y) ys; (u, D None) \\<in> I\\<rbrakk>\n       \\<Longrightarrow> ipurge_ref I D (D y) ys\n                          (insert None X \\<inter> Y) =\n                         {}", "have \"\\<exists>y' \\<in> set ys. u = D y'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>y'\\<in>set ys. u = D y'", "using L"], ["proof (prove)\nusing this:\n  u \\<in> sinks I D (D y) ys\n\ngoal (1 subgoal):\n 1. \\<exists>y'\\<in>set ys. u = D y'", "by (rule sinks_elem)"], ["proof (state)\nthis:\n  \\<exists>y'\\<in>set ys. u = D y'\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<lbrakk>u \\<in> sinks I D (D y) ys; (u, D None) \\<in> I\\<rbrakk>\n       \\<Longrightarrow> ipurge_ref I D (D y) ys\n                          (insert None X \\<inter> Y) =\n                         {}", "then"], ["proof (chain)\npicking this:\n  \\<exists>y'\\<in>set ys. u = D y'", "obtain y' where N: \"y' \\<in> set ys\" and O: \"u = D y'\""], ["proof (prove)\nusing this:\n  \\<exists>y'\\<in>set ys. u = D y'\n\ngoal (1 subgoal):\n 1. (\\<And>y'.\n        \\<lbrakk>y' \\<in> set ys; u = D y'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  y' \\<in> set ys\n  u = D y'\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<lbrakk>u \\<in> sinks I D (D y) ys; (u, D None) \\<in> I\\<rbrakk>\n       \\<Longrightarrow> ipurge_ref I D (D y) ys\n                          (insert None X \\<inter> Y) =\n                         {}", "have P: \"y' \\<noteq> None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y' \\<noteq> None", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. y' = None \\<Longrightarrow> False", "assume \"y' = None\""], ["proof (state)\nthis:\n  y' = None\n\ngoal (1 subgoal):\n 1. y' = None \\<Longrightarrow> False", "hence \"None \\<in> set ys\""], ["proof (prove)\nusing this:\n  y' = None\n\ngoal (1 subgoal):\n 1. None \\<in> set ys", "using N"], ["proof (prove)\nusing this:\n  y' = None\n  y' \\<in> set ys\n\ngoal (1 subgoal):\n 1. None \\<in> set ys", "by simp"], ["proof (state)\nthis:\n  None \\<in> set ys\n\ngoal (1 subgoal):\n 1. y' = None \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  None \\<in> set ys\n\ngoal (1 subgoal):\n 1. y' = None \\<Longrightarrow> False", "have \"None \\<notin> set ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. None \\<notin> set ys", "using I"], ["proof (prove)\nusing this:\n  None \\<notin> set (xs @ y # ys)\n\ngoal (1 subgoal):\n 1. None \\<notin> set ys", "by simp"], ["proof (state)\nthis:\n  None \\<notin> set ys\n\ngoal (1 subgoal):\n 1. y' = None \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  None \\<in> set ys\n  None \\<notin> set ys", "show False"], ["proof (prove)\nusing this:\n  None \\<in> set ys\n  None \\<notin> set ys\n\ngoal (1 subgoal):\n 1. False", "by contradiction"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  y' \\<noteq> None\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<lbrakk>u \\<in> sinks I D (D y) ys; (u, D None) \\<in> I\\<rbrakk>\n       \\<Longrightarrow> ipurge_ref I D (D y) ys\n                          (insert None X \\<inter> Y) =\n                         {}", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. ipurge_ref I D (D y) ys (insert None X \\<inter> Y) = {}", "proof (rule ipurge_ref_empty [of u], simp add: L)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> insert None X \\<inter> Y \\<Longrightarrow> (u, D x) \\<in> I", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> insert None X \\<inter> Y \\<Longrightarrow> (u, D x) \\<in> I", "have \"(D y', D None) \\<in> I \\<and> y' \\<noteq> None \\<longrightarrow> (\\<forall>v \\<in> range D. (D y', v) \\<in> I)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (D y', D None) \\<in> I \\<and> y' \\<noteq> None \\<longrightarrow>\n    (\\<forall>v\\<in>range D. (D y', v) \\<in> I)", "using A"], ["proof (prove)\nusing this:\n  secure_termination I D\n\ngoal (1 subgoal):\n 1. (D y', D None) \\<in> I \\<and> y' \\<noteq> None \\<longrightarrow>\n    (\\<forall>v\\<in>range D. (D y', v) \\<in> I)", "by (simp add: secure_termination_def)"], ["proof (state)\nthis:\n  (D y', D None) \\<in> I \\<and> y' \\<noteq> None \\<longrightarrow>\n  (\\<forall>v\\<in>range D. (D y', v) \\<in> I)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> insert None X \\<inter> Y \\<Longrightarrow> (u, D x) \\<in> I", "moreover"], ["proof (state)\nthis:\n  (D y', D None) \\<in> I \\<and> y' \\<noteq> None \\<longrightarrow>\n  (\\<forall>v\\<in>range D. (D y', v) \\<in> I)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> insert None X \\<inter> Y \\<Longrightarrow> (u, D x) \\<in> I", "have \"(D y', D None) \\<in> I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (D y', D None) \\<in> I", "using M and O"], ["proof (prove)\nusing this:\n  (u, D None) \\<in> I\n  u = D y'\n\ngoal (1 subgoal):\n 1. (D y', D None) \\<in> I", "by simp"], ["proof (state)\nthis:\n  (D y', D None) \\<in> I\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> insert None X \\<inter> Y \\<Longrightarrow> (u, D x) \\<in> I", "ultimately"], ["proof (chain)\npicking this:\n  (D y', D None) \\<in> I \\<and> y' \\<noteq> None \\<longrightarrow>\n  (\\<forall>v\\<in>range D. (D y', v) \\<in> I)\n  (D y', D None) \\<in> I", "have \"\\<forall>v \\<in> range D. (D y', v) \\<in> I\""], ["proof (prove)\nusing this:\n  (D y', D None) \\<in> I \\<and> y' \\<noteq> None \\<longrightarrow>\n  (\\<forall>v\\<in>range D. (D y', v) \\<in> I)\n  (D y', D None) \\<in> I\n\ngoal (1 subgoal):\n 1. \\<forall>v\\<in>range D. (D y', v) \\<in> I", "using P"], ["proof (prove)\nusing this:\n  (D y', D None) \\<in> I \\<and> y' \\<noteq> None \\<longrightarrow>\n  (\\<forall>v\\<in>range D. (D y', v) \\<in> I)\n  (D y', D None) \\<in> I\n  y' \\<noteq> None\n\ngoal (1 subgoal):\n 1. \\<forall>v\\<in>range D. (D y', v) \\<in> I", "by simp"], ["proof (state)\nthis:\n  \\<forall>v\\<in>range D. (D y', v) \\<in> I\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> insert None X \\<inter> Y \\<Longrightarrow> (u, D x) \\<in> I", "thus \"(u, D x) \\<in> I\""], ["proof (prove)\nusing this:\n  \\<forall>v\\<in>range D. (D y', v) \\<in> I\n\ngoal (1 subgoal):\n 1. (u, D x) \\<in> I", "using O"], ["proof (prove)\nusing this:\n  \\<forall>v\\<in>range D. (D y', v) \\<in> I\n  u = D y'\n\ngoal (1 subgoal):\n 1. (u, D x) \\<in> I", "by simp"], ["proof (state)\nthis:\n  (u, D x) \\<in> I\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ipurge_ref I D (D y) ys (insert None X \\<inter> Y) = {}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ipurge_ref I D (D y) ys (insert None X \\<inter> Y) = {}\n\ngoal (2 subgoals):\n 1. \\<lbrakk>xs @ ipurge_tr I D (D y) ys \\<notin> sentences P;\n     (D y, D None) \\<in> I \\<or>\n     (\\<exists>u\\<in>sinks I D (D y) ys. (u, D None) \\<in> I)\\<rbrakk>\n    \\<Longrightarrow> (xs @ ipurge_tr I D (D y) ys,\n                       ipurge_ref I D (D y) ys (insert None X \\<inter> Y))\n                      \\<in> seq_comp_failures P Q\n 2. \\<lbrakk>xs @ ipurge_tr I D (D y) ys \\<notin> sentences P;\n     (D y, D None) \\<notin> I \\<and>\n     (\\<forall>u\\<in>sinks I D (D y) ys. (u, D None) \\<notin> I)\\<rbrakk>\n    \\<Longrightarrow> (xs @ ipurge_tr I D (D y) ys,\n                       ipurge_ref I D (D y) ys (insert None X \\<inter> Y))\n                      \\<in> seq_comp_failures P Q", "thus ?thesis"], ["proof (prove)\nusing this:\n  ipurge_ref I D (D y) ys (insert None X \\<inter> Y) = {}\n\ngoal (1 subgoal):\n 1. (xs @ ipurge_tr I D (D y) ys,\n     ipurge_ref I D (D y) ys (insert None X \\<inter> Y))\n    \\<in> seq_comp_failures P Q", "proof simp"], ["proof (state)\ngoal (1 subgoal):\n 1. ipurge_ref I D (D y) ys (insert None X \\<inter> Y) =\n    {} \\<Longrightarrow>\n    (xs @ ipurge_tr I D (D y) ys, {}) \\<in> seq_comp_failures P Q", "have \"{} \\<subseteq> ipurge_ref I D (D y) ys X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {} \\<subseteq> ipurge_ref I D (D y) ys X", ".."], ["proof (state)\nthis:\n  {} \\<subseteq> ipurge_ref I D (D y) ys X\n\ngoal (1 subgoal):\n 1. ipurge_ref I D (D y) ys (insert None X \\<inter> Y) =\n    {} \\<Longrightarrow>\n    (xs @ ipurge_tr I D (D y) ys, {}) \\<in> seq_comp_failures P Q", "with H"], ["proof (chain)\npicking this:\n  (xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys X) \\<in> failures P\n  {} \\<subseteq> ipurge_ref I D (D y) ys X", "have \"(xs @ ipurge_tr I D (D y) ys, {}) \\<in> failures P\""], ["proof (prove)\nusing this:\n  (xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys X) \\<in> failures P\n  {} \\<subseteq> ipurge_ref I D (D y) ys X\n\ngoal (1 subgoal):\n 1. (xs @ ipurge_tr I D (D y) ys, {}) \\<in> failures P", "by (rule process_rule_3)"], ["proof (state)\nthis:\n  (xs @ ipurge_tr I D (D y) ys, {}) \\<in> failures P\n\ngoal (1 subgoal):\n 1. ipurge_ref I D (D y) ys (insert None X \\<inter> Y) =\n    {} \\<Longrightarrow>\n    (xs @ ipurge_tr I D (D y) ys, {}) \\<in> seq_comp_failures P Q", "with J"], ["proof (chain)\npicking this:\n  xs @ ipurge_tr I D (D y) ys \\<notin> sentences P\n  (xs @ ipurge_tr I D (D y) ys, {}) \\<in> failures P", "show \"(xs @ ipurge_tr I D (D y) ys, {}) \\<in> seq_comp_failures P Q\""], ["proof (prove)\nusing this:\n  xs @ ipurge_tr I D (D y) ys \\<notin> sentences P\n  (xs @ ipurge_tr I D (D y) ys, {}) \\<in> failures P\n\ngoal (1 subgoal):\n 1. (xs @ ipurge_tr I D (D y) ys, {}) \\<in> seq_comp_failures P Q", "proof (rule SCF_R1)"], ["proof (state)\ngoal (1 subgoal):\n 1. None \\<notin> set (xs @ ipurge_tr I D (D y) ys)", "show \"None \\<notin> set (xs @ ipurge_tr I D (D y) ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. None \\<notin> set (xs @ ipurge_tr I D (D y) ys)", "using I"], ["proof (prove)\nusing this:\n  None \\<notin> set (xs @ y # ys)\n\ngoal (1 subgoal):\n 1. None \\<notin> set (xs @ ipurge_tr I D (D y) ys)", "proof (simp, (erule_tac conjE)+)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>None \\<notin> set (xs @ y # ys); None \\<noteq> y;\n     None \\<notin> set (xs @ y # ys); None \\<notin> set xs;\n     None \\<notin> set ys\\<rbrakk>\n    \\<Longrightarrow> None \\<notin> set (ipurge_tr I D (D y) ys)", "have \"set (ipurge_tr I D (D y) ys) \\<subseteq> set ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (ipurge_tr I D (D y) ys) \\<subseteq> set ys", "by (rule ipurge_tr_set)"], ["proof (state)\nthis:\n  set (ipurge_tr I D (D y) ys) \\<subseteq> set ys\n\ngoal (1 subgoal):\n 1. \\<lbrakk>None \\<notin> set (xs @ y # ys); None \\<noteq> y;\n     None \\<notin> set (xs @ y # ys); None \\<notin> set xs;\n     None \\<notin> set ys\\<rbrakk>\n    \\<Longrightarrow> None \\<notin> set (ipurge_tr I D (D y) ys)", "moreover"], ["proof (state)\nthis:\n  set (ipurge_tr I D (D y) ys) \\<subseteq> set ys\n\ngoal (1 subgoal):\n 1. \\<lbrakk>None \\<notin> set (xs @ y # ys); None \\<noteq> y;\n     None \\<notin> set (xs @ y # ys); None \\<notin> set xs;\n     None \\<notin> set ys\\<rbrakk>\n    \\<Longrightarrow> None \\<notin> set (ipurge_tr I D (D y) ys)", "assume \"None \\<notin> set ys\""], ["proof (state)\nthis:\n  None \\<notin> set ys\n\ngoal (1 subgoal):\n 1. \\<lbrakk>None \\<notin> set (xs @ y # ys); None \\<noteq> y;\n     None \\<notin> set (xs @ y # ys); None \\<notin> set xs;\n     None \\<notin> set ys\\<rbrakk>\n    \\<Longrightarrow> None \\<notin> set (ipurge_tr I D (D y) ys)", "ultimately"], ["proof (chain)\npicking this:\n  set (ipurge_tr I D (D y) ys) \\<subseteq> set ys\n  None \\<notin> set ys", "show \"None \\<notin> set (ipurge_tr I D (D y) ys)\""], ["proof (prove)\nusing this:\n  set (ipurge_tr I D (D y) ys) \\<subseteq> set ys\n  None \\<notin> set ys\n\ngoal (1 subgoal):\n 1. None \\<notin> set (ipurge_tr I D (D y) ys)", "by (rule contra_subsetD)"], ["proof (state)\nthis:\n  None \\<notin> set (ipurge_tr I D (D y) ys)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  None \\<notin> set (xs @ ipurge_tr I D (D y) ys)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (xs @ ipurge_tr I D (D y) ys, {}) \\<in> seq_comp_failures P Q\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (xs @ ipurge_tr I D (D y) ys,\n   ipurge_ref I D (D y) ys (insert None X \\<inter> Y))\n  \\<in> seq_comp_failures P Q\n\ngoal (1 subgoal):\n 1. \\<lbrakk>xs @ ipurge_tr I D (D y) ys \\<notin> sentences P;\n     (D y, D None) \\<notin> I \\<and>\n     (\\<forall>u\\<in>sinks I D (D y) ys. (u, D None) \\<notin> I)\\<rbrakk>\n    \\<Longrightarrow> (xs @ ipurge_tr I D (D y) ys,\n                       ipurge_ref I D (D y) ys (insert None X \\<inter> Y))\n                      \\<in> seq_comp_failures P Q", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>xs @ ipurge_tr I D (D y) ys \\<notin> sentences P;\n     (D y, D None) \\<notin> I \\<and>\n     (\\<forall>u\\<in>sinks I D (D y) ys. (u, D None) \\<notin> I)\\<rbrakk>\n    \\<Longrightarrow> (xs @ ipurge_tr I D (D y) ys,\n                       ipurge_ref I D (D y) ys (insert None X \\<inter> Y))\n                      \\<in> seq_comp_failures P Q", "assume\n      J: \"xs @ ipurge_tr I D (D y) ys \\<notin> sentences P\" and\n      K: \"(D y, D None) \\<notin> I \\<and> (\\<forall>u \\<in> sinks I D (D y) ys. (u, D None) \\<notin> I)\""], ["proof (state)\nthis:\n  xs @ ipurge_tr I D (D y) ys \\<notin> sentences P\n  (D y, D None) \\<notin> I \\<and>\n  (\\<forall>u\\<in>sinks I D (D y) ys. (u, D None) \\<notin> I)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>xs @ ipurge_tr I D (D y) ys \\<notin> sentences P;\n     (D y, D None) \\<notin> I \\<and>\n     (\\<forall>u\\<in>sinks I D (D y) ys. (u, D None) \\<notin> I)\\<rbrakk>\n    \\<Longrightarrow> (xs @ ipurge_tr I D (D y) ys,\n                       ipurge_ref I D (D y) ys (insert None X \\<inter> Y))\n                      \\<in> seq_comp_failures P Q", "have \"xs @ y # ys @ [None] \\<in> traces P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs @ y # ys @ [None] \\<in> traces P", "using E"], ["proof (prove)\nusing this:\n  xs @ y # ys \\<in> sentences P\n\ngoal (1 subgoal):\n 1. xs @ y # ys @ [None] \\<in> traces P", "by (simp add: sentences_def)"], ["proof (state)\nthis:\n  xs @ y # ys @ [None] \\<in> traces P\n\ngoal (1 subgoal):\n 1. \\<lbrakk>xs @ ipurge_tr I D (D y) ys \\<notin> sentences P;\n     (D y, D None) \\<notin> I \\<and>\n     (\\<forall>u\\<in>sinks I D (D y) ys. (u, D None) \\<notin> I)\\<rbrakk>\n    \\<Longrightarrow> (xs @ ipurge_tr I D (D y) ys,\n                       ipurge_ref I D (D y) ys (insert None X \\<inter> Y))\n                      \\<in> seq_comp_failures P Q", "hence \"(xs @ y # ys @ [None], {}) \\<in> failures P\""], ["proof (prove)\nusing this:\n  xs @ y # ys @ [None] \\<in> traces P\n\ngoal (1 subgoal):\n 1. (xs @ y # ys @ [None], {}) \\<in> failures P", "by (rule traces_failures)"], ["proof (state)\nthis:\n  (xs @ y # ys @ [None], {}) \\<in> failures P\n\ngoal (1 subgoal):\n 1. \\<lbrakk>xs @ ipurge_tr I D (D y) ys \\<notin> sentences P;\n     (D y, D None) \\<notin> I \\<and>\n     (\\<forall>u\\<in>sinks I D (D y) ys. (u, D None) \\<notin> I)\\<rbrakk>\n    \\<Longrightarrow> (xs @ ipurge_tr I D (D y) ys,\n                       ipurge_ref I D (D y) ys (insert None X \\<inter> Y))\n                      \\<in> seq_comp_failures P Q", "hence \"(y # ys @ [None], {}) \\<in> futures P xs\""], ["proof (prove)\nusing this:\n  (xs @ y # ys @ [None], {}) \\<in> failures P\n\ngoal (1 subgoal):\n 1. (y # ys @ [None], {}) \\<in> futures P xs", "by (simp add: futures_def)"], ["proof (state)\nthis:\n  (y # ys @ [None], {}) \\<in> futures P xs\n\ngoal (1 subgoal):\n 1. \\<lbrakk>xs @ ipurge_tr I D (D y) ys \\<notin> sentences P;\n     (D y, D None) \\<notin> I \\<and>\n     (\\<forall>u\\<in>sinks I D (D y) ys. (u, D None) \\<notin> I)\\<rbrakk>\n    \\<Longrightarrow> (xs @ ipurge_tr I D (D y) ys,\n                       ipurge_ref I D (D y) ys (insert None X \\<inter> Y))\n                      \\<in> seq_comp_failures P Q", "hence \"(ipurge_tr I D (D y) (ys @ [None]),\n      ipurge_ref I D (D y) (ys @ [None]) {}) \\<in> futures P xs\"\n      (is \"(_, ?Y) \\<in> _\")"], ["proof (prove)\nusing this:\n  (y # ys @ [None], {}) \\<in> futures P xs\n\ngoal (1 subgoal):\n 1. (ipurge_tr I D (D y) (ys @ [None]),\n     ipurge_ref I D (D y) (ys @ [None]) {})\n    \\<in> futures P xs", "using C"], ["proof (prove)\nusing this:\n  (y # ys @ [None], {}) \\<in> futures P xs\n  secure P I D\n\ngoal (1 subgoal):\n 1. (ipurge_tr I D (D y) (ys @ [None]),\n     ipurge_ref I D (D y) (ys @ [None]) {})\n    \\<in> futures P xs", "by (simp add: secure_def del: ipurge_tr.simps)"], ["proof (state)\nthis:\n  (ipurge_tr I D (D y) (ys @ [None]), ipurge_ref I D (D y) (ys @ [None]) {})\n  \\<in> futures P xs\n\ngoal (1 subgoal):\n 1. \\<lbrakk>xs @ ipurge_tr I D (D y) ys \\<notin> sentences P;\n     (D y, D None) \\<notin> I \\<and>\n     (\\<forall>u\\<in>sinks I D (D y) ys. (u, D None) \\<notin> I)\\<rbrakk>\n    \\<Longrightarrow> (xs @ ipurge_tr I D (D y) ys,\n                       ipurge_ref I D (D y) ys (insert None X \\<inter> Y))\n                      \\<in> seq_comp_failures P Q", "hence \"(xs @ ipurge_tr I D (D y) (ys @ [None]), ?Y) \\<in> failures P\""], ["proof (prove)\nusing this:\n  (ipurge_tr I D (D y) (ys @ [None]), ipurge_ref I D (D y) (ys @ [None]) {})\n  \\<in> futures P xs\n\ngoal (1 subgoal):\n 1. (xs @ ipurge_tr I D (D y) (ys @ [None]),\n     ipurge_ref I D (D y) (ys @ [None]) {})\n    \\<in> failures P", "by (simp add: futures_def)"], ["proof (state)\nthis:\n  (xs @ ipurge_tr I D (D y) (ys @ [None]),\n   ipurge_ref I D (D y) (ys @ [None]) {})\n  \\<in> failures P\n\ngoal (1 subgoal):\n 1. \\<lbrakk>xs @ ipurge_tr I D (D y) ys \\<notin> sentences P;\n     (D y, D None) \\<notin> I \\<and>\n     (\\<forall>u\\<in>sinks I D (D y) ys. (u, D None) \\<notin> I)\\<rbrakk>\n    \\<Longrightarrow> (xs @ ipurge_tr I D (D y) ys,\n                       ipurge_ref I D (D y) ys (insert None X \\<inter> Y))\n                      \\<in> seq_comp_failures P Q", "hence \"xs @ ipurge_tr I D (D y) (ys @ [None]) \\<in> traces P\""], ["proof (prove)\nusing this:\n  (xs @ ipurge_tr I D (D y) (ys @ [None]),\n   ipurge_ref I D (D y) (ys @ [None]) {})\n  \\<in> failures P\n\ngoal (1 subgoal):\n 1. xs @ ipurge_tr I D (D y) (ys @ [None]) \\<in> traces P", "by (rule failures_traces)"], ["proof (state)\nthis:\n  xs @ ipurge_tr I D (D y) (ys @ [None]) \\<in> traces P\n\ngoal (1 subgoal):\n 1. \\<lbrakk>xs @ ipurge_tr I D (D y) ys \\<notin> sentences P;\n     (D y, D None) \\<notin> I \\<and>\n     (\\<forall>u\\<in>sinks I D (D y) ys. (u, D None) \\<notin> I)\\<rbrakk>\n    \\<Longrightarrow> (xs @ ipurge_tr I D (D y) ys,\n                       ipurge_ref I D (D y) ys (insert None X \\<inter> Y))\n                      \\<in> seq_comp_failures P Q", "moreover"], ["proof (state)\nthis:\n  xs @ ipurge_tr I D (D y) (ys @ [None]) \\<in> traces P\n\ngoal (1 subgoal):\n 1. \\<lbrakk>xs @ ipurge_tr I D (D y) ys \\<notin> sentences P;\n     (D y, D None) \\<notin> I \\<and>\n     (\\<forall>u\\<in>sinks I D (D y) ys. (u, D None) \\<notin> I)\\<rbrakk>\n    \\<Longrightarrow> (xs @ ipurge_tr I D (D y) ys,\n                       ipurge_ref I D (D y) ys (insert None X \\<inter> Y))\n                      \\<in> seq_comp_failures P Q", "have \"\\<not> ((D y, D None) \\<in> I \\<or>\n      (\\<exists>u \\<in> sinks I D (D y) ys. (u, D None) \\<in> I))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> ((D y, D None) \\<in> I \\<or>\n            (\\<exists>u\\<in>sinks I D (D y) ys. (u, D None) \\<in> I))", "using K"], ["proof (prove)\nusing this:\n  (D y, D None) \\<notin> I \\<and>\n  (\\<forall>u\\<in>sinks I D (D y) ys. (u, D None) \\<notin> I)\n\ngoal (1 subgoal):\n 1. \\<not> ((D y, D None) \\<in> I \\<or>\n            (\\<exists>u\\<in>sinks I D (D y) ys. (u, D None) \\<in> I))", "by simp"], ["proof (state)\nthis:\n  \\<not> ((D y, D None) \\<in> I \\<or>\n          (\\<exists>u\\<in>sinks I D (D y) ys. (u, D None) \\<in> I))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>xs @ ipurge_tr I D (D y) ys \\<notin> sentences P;\n     (D y, D None) \\<notin> I \\<and>\n     (\\<forall>u\\<in>sinks I D (D y) ys. (u, D None) \\<notin> I)\\<rbrakk>\n    \\<Longrightarrow> (xs @ ipurge_tr I D (D y) ys,\n                       ipurge_ref I D (D y) ys (insert None X \\<inter> Y))\n                      \\<in> seq_comp_failures P Q", "hence \"D None \\<notin> sinks I D (D y) (ys @ [None])\""], ["proof (prove)\nusing this:\n  \\<not> ((D y, D None) \\<in> I \\<or>\n          (\\<exists>u\\<in>sinks I D (D y) ys. (u, D None) \\<in> I))\n\ngoal (1 subgoal):\n 1. D None \\<notin> sinks I D (D y) (ys @ [None])", "by (simp only: sinks_interference_eq, simp)"], ["proof (state)\nthis:\n  D None \\<notin> sinks I D (D y) (ys @ [None])\n\ngoal (1 subgoal):\n 1. \\<lbrakk>xs @ ipurge_tr I D (D y) ys \\<notin> sentences P;\n     (D y, D None) \\<notin> I \\<and>\n     (\\<forall>u\\<in>sinks I D (D y) ys. (u, D None) \\<notin> I)\\<rbrakk>\n    \\<Longrightarrow> (xs @ ipurge_tr I D (D y) ys,\n                       ipurge_ref I D (D y) ys (insert None X \\<inter> Y))\n                      \\<in> seq_comp_failures P Q", "ultimately"], ["proof (chain)\npicking this:\n  xs @ ipurge_tr I D (D y) (ys @ [None]) \\<in> traces P\n  D None \\<notin> sinks I D (D y) (ys @ [None])", "have \"xs @ ipurge_tr I D (D y) ys @ [None] \\<in> traces P\""], ["proof (prove)\nusing this:\n  xs @ ipurge_tr I D (D y) (ys @ [None]) \\<in> traces P\n  D None \\<notin> sinks I D (D y) (ys @ [None])\n\ngoal (1 subgoal):\n 1. xs @ ipurge_tr I D (D y) ys @ [None] \\<in> traces P", "by simp"], ["proof (state)\nthis:\n  xs @ ipurge_tr I D (D y) ys @ [None] \\<in> traces P\n\ngoal (1 subgoal):\n 1. \\<lbrakk>xs @ ipurge_tr I D (D y) ys \\<notin> sentences P;\n     (D y, D None) \\<notin> I \\<and>\n     (\\<forall>u\\<in>sinks I D (D y) ys. (u, D None) \\<notin> I)\\<rbrakk>\n    \\<Longrightarrow> (xs @ ipurge_tr I D (D y) ys,\n                       ipurge_ref I D (D y) ys (insert None X \\<inter> Y))\n                      \\<in> seq_comp_failures P Q", "hence \"xs @ ipurge_tr I D (D y) ys \\<in> sentences P\""], ["proof (prove)\nusing this:\n  xs @ ipurge_tr I D (D y) ys @ [None] \\<in> traces P\n\ngoal (1 subgoal):\n 1. xs @ ipurge_tr I D (D y) ys \\<in> sentences P", "by (simp add: sentences_def)"], ["proof (state)\nthis:\n  xs @ ipurge_tr I D (D y) ys \\<in> sentences P\n\ngoal (1 subgoal):\n 1. \\<lbrakk>xs @ ipurge_tr I D (D y) ys \\<notin> sentences P;\n     (D y, D None) \\<notin> I \\<and>\n     (\\<forall>u\\<in>sinks I D (D y) ys. (u, D None) \\<notin> I)\\<rbrakk>\n    \\<Longrightarrow> (xs @ ipurge_tr I D (D y) ys,\n                       ipurge_ref I D (D y) ys (insert None X \\<inter> Y))\n                      \\<in> seq_comp_failures P Q", "thus ?thesis"], ["proof (prove)\nusing this:\n  xs @ ipurge_tr I D (D y) ys \\<in> sentences P\n\ngoal (1 subgoal):\n 1. (xs @ ipurge_tr I D (D y) ys,\n     ipurge_ref I D (D y) ys (insert None X \\<inter> Y))\n    \\<in> seq_comp_failures P Q", "using J"], ["proof (prove)\nusing this:\n  xs @ ipurge_tr I D (D y) ys \\<in> sentences P\n  xs @ ipurge_tr I D (D y) ys \\<notin> sentences P\n\ngoal (1 subgoal):\n 1. (xs @ ipurge_tr I D (D y) ys,\n     ipurge_ref I D (D y) ys (insert None X \\<inter> Y))\n    \\<in> seq_comp_failures P Q", "by contradiction"], ["proof (state)\nthis:\n  (xs @ ipurge_tr I D (D y) ys,\n   ipurge_ref I D (D y) ys (insert None X \\<inter> Y))\n  \\<in> seq_comp_failures P Q\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (xs @ ipurge_tr I D (D y) ys,\n   ipurge_ref I D (D y) ys (insert None X \\<inter> Y))\n  \\<in> seq_comp_failures P Q\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma seq_comp_secure_aux_1_case_3:\n  assumes\n    A: \"secure_termination I D\" and\n    B: \"ref_union_closed Q\" and\n    C: \"sequential Q\" and\n    D: \"secure Q I D\" and\n    E: \"secure R I D\" and\n    F: \"ws \\<in> sentences Q\" and\n    G: \"(ys', Y) \\<in> failures R\" and\n    H: \"ws @ ys' = xs @ y # ys\"\n  shows \"(xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys Y)\n    \\<in> seq_comp_failures Q R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys Y)\n    \\<in> seq_comp_failures Q R", "proof (cases \"length xs < length ws\")"], ["proof (state)\ngoal (2 subgoals):\n 1. length xs < length ws \\<Longrightarrow>\n    (xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys Y)\n    \\<in> seq_comp_failures Q R\n 2. \\<not> length xs < length ws \\<Longrightarrow>\n    (xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys Y)\n    \\<in> seq_comp_failures Q R", "case True"], ["proof (state)\nthis:\n  length xs < length ws\n\ngoal (2 subgoals):\n 1. length xs < length ws \\<Longrightarrow>\n    (xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys Y)\n    \\<in> seq_comp_failures Q R\n 2. \\<not> length xs < length ws \\<Longrightarrow>\n    (xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys Y)\n    \\<in> seq_comp_failures Q R", "have \"drop (Suc (length xs)) (xs @ y # ys) = drop (Suc (length xs)) (ws @ ys')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. drop (Suc (length xs)) (xs @ y # ys) = drop (Suc (length xs)) (ws @ ys')", "using H"], ["proof (prove)\nusing this:\n  ws @ ys' = xs @ y # ys\n\ngoal (1 subgoal):\n 1. drop (Suc (length xs)) (xs @ y # ys) = drop (Suc (length xs)) (ws @ ys')", "by simp"], ["proof (state)\nthis:\n  drop (Suc (length xs)) (xs @ y # ys) = drop (Suc (length xs)) (ws @ ys')\n\ngoal (2 subgoals):\n 1. length xs < length ws \\<Longrightarrow>\n    (xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys Y)\n    \\<in> seq_comp_failures Q R\n 2. \\<not> length xs < length ws \\<Longrightarrow>\n    (xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys Y)\n    \\<in> seq_comp_failures Q R", "hence I: \"ys = drop (Suc (length xs)) ws @ ys'\"\n    (is \"_ = ?ws' @ _\")"], ["proof (prove)\nusing this:\n  drop (Suc (length xs)) (xs @ y # ys) = drop (Suc (length xs)) (ws @ ys')\n\ngoal (1 subgoal):\n 1. ys = drop (Suc (length xs)) ws @ ys'", "using True"], ["proof (prove)\nusing this:\n  drop (Suc (length xs)) (xs @ y # ys) = drop (Suc (length xs)) (ws @ ys')\n  length xs < length ws\n\ngoal (1 subgoal):\n 1. ys = drop (Suc (length xs)) ws @ ys'", "by simp"], ["proof (state)\nthis:\n  ys = drop (Suc (length xs)) ws @ ys'\n\ngoal (2 subgoals):\n 1. length xs < length ws \\<Longrightarrow>\n    (xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys Y)\n    \\<in> seq_comp_failures Q R\n 2. \\<not> length xs < length ws \\<Longrightarrow>\n    (xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys Y)\n    \\<in> seq_comp_failures Q R", "let ?U = \"insert (D y) (sinks I D (D y) ?ws')\""], ["proof (state)\ngoal (2 subgoals):\n 1. length xs < length ws \\<Longrightarrow>\n    (xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys Y)\n    \\<in> seq_comp_failures Q R\n 2. \\<not> length xs < length ws \\<Longrightarrow>\n    (xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys Y)\n    \\<in> seq_comp_failures Q R", "have \"ipurge_tr I D (D y) ys =\n    ipurge_tr I D (D y) ?ws' @ ipurge_tr_aux I D ?U ys'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ipurge_tr I D (D y) ys =\n    ipurge_tr I D (D y) (drop (Suc (length xs)) ws) @\n    ipurge_tr_aux I D\n     (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys'", "using I"], ["proof (prove)\nusing this:\n  ys = drop (Suc (length xs)) ws @ ys'\n\ngoal (1 subgoal):\n 1. ipurge_tr I D (D y) ys =\n    ipurge_tr I D (D y) (drop (Suc (length xs)) ws) @\n    ipurge_tr_aux I D\n     (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys'", "by (simp add: ipurge_tr_append)"], ["proof (state)\nthis:\n  ipurge_tr I D (D y) ys =\n  ipurge_tr I D (D y) (drop (Suc (length xs)) ws) @\n  ipurge_tr_aux I D\n   (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys'\n\ngoal (2 subgoals):\n 1. length xs < length ws \\<Longrightarrow>\n    (xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys Y)\n    \\<in> seq_comp_failures Q R\n 2. \\<not> length xs < length ws \\<Longrightarrow>\n    (xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys Y)\n    \\<in> seq_comp_failures Q R", "moreover"], ["proof (state)\nthis:\n  ipurge_tr I D (D y) ys =\n  ipurge_tr I D (D y) (drop (Suc (length xs)) ws) @\n  ipurge_tr_aux I D\n   (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys'\n\ngoal (2 subgoals):\n 1. length xs < length ws \\<Longrightarrow>\n    (xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys Y)\n    \\<in> seq_comp_failures Q R\n 2. \\<not> length xs < length ws \\<Longrightarrow>\n    (xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys Y)\n    \\<in> seq_comp_failures Q R", "have \"ipurge_ref I D (D y) ys Y = ipurge_ref_aux I D ?U ys' Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ipurge_ref I D (D y) ys Y =\n    ipurge_ref_aux I D\n     (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys' Y", "using I"], ["proof (prove)\nusing this:\n  ys = drop (Suc (length xs)) ws @ ys'\n\ngoal (1 subgoal):\n 1. ipurge_ref I D (D y) ys Y =\n    ipurge_ref_aux I D\n     (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys' Y", "by (simp add: ipurge_ref_append)"], ["proof (state)\nthis:\n  ipurge_ref I D (D y) ys Y =\n  ipurge_ref_aux I D\n   (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys' Y\n\ngoal (2 subgoals):\n 1. length xs < length ws \\<Longrightarrow>\n    (xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys Y)\n    \\<in> seq_comp_failures Q R\n 2. \\<not> length xs < length ws \\<Longrightarrow>\n    (xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys Y)\n    \\<in> seq_comp_failures Q R", "ultimately"], ["proof (chain)\npicking this:\n  ipurge_tr I D (D y) ys =\n  ipurge_tr I D (D y) (drop (Suc (length xs)) ws) @\n  ipurge_tr_aux I D\n   (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys'\n  ipurge_ref I D (D y) ys Y =\n  ipurge_ref_aux I D\n   (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys' Y", "show ?thesis"], ["proof (prove)\nusing this:\n  ipurge_tr I D (D y) ys =\n  ipurge_tr I D (D y) (drop (Suc (length xs)) ws) @\n  ipurge_tr_aux I D\n   (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys'\n  ipurge_ref I D (D y) ys Y =\n  ipurge_ref_aux I D\n   (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys' Y\n\ngoal (1 subgoal):\n 1. (xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys Y)\n    \\<in> seq_comp_failures Q R", "proof (cases \"xs @ ipurge_tr I D (D y) ?ws' \\<in> sentences Q\", simp_all)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>xs @ ipurge_tr I D (D y) (drop (Suc (length xs)) ws)\n             \\<in> sentences Q;\n     ipurge_tr I D (D y) ys =\n     ipurge_tr I D (D y) (drop (Suc (length xs)) ws) @\n     ipurge_tr_aux I D\n      (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys';\n     ipurge_ref I D (D y) ys Y =\n     ipurge_ref_aux I D\n      (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys'\n      Y\\<rbrakk>\n    \\<Longrightarrow> (xs @\n                       ipurge_tr I D (D y) (drop (Suc (length xs)) ws) @\n                       ipurge_tr_aux I D\n                        (insert (D y)\n                          (sinks I D (D y) (drop (Suc (length xs)) ws)))\n                        ys',\n                       ipurge_ref_aux I D\n                        (insert (D y)\n                          (sinks I D (D y) (drop (Suc (length xs)) ws)))\n                        ys' Y)\n                      \\<in> seq_comp_failures Q R\n 2. \\<lbrakk>xs @ ipurge_tr I D (D y) (drop (Suc (length xs)) ws)\n             \\<notin> sentences Q;\n     ipurge_tr I D (D y) ys =\n     ipurge_tr I D (D y) (drop (Suc (length xs)) ws) @\n     ipurge_tr_aux I D\n      (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys';\n     ipurge_ref I D (D y) ys Y =\n     ipurge_ref_aux I D\n      (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys'\n      Y\\<rbrakk>\n    \\<Longrightarrow> (xs @\n                       ipurge_tr I D (D y) (drop (Suc (length xs)) ws) @\n                       ipurge_tr_aux I D\n                        (insert (D y)\n                          (sinks I D (D y) (drop (Suc (length xs)) ws)))\n                        ys',\n                       ipurge_ref_aux I D\n                        (insert (D y)\n                          (sinks I D (D y) (drop (Suc (length xs)) ws)))\n                        ys' Y)\n                      \\<in> seq_comp_failures Q R", "assume J: \"xs @ ipurge_tr I D (D y) ?ws' \\<in> sentences Q\""], ["proof (state)\nthis:\n  xs @ ipurge_tr I D (D y) (drop (Suc (length xs)) ws) \\<in> sentences Q\n\ngoal (2 subgoals):\n 1. \\<lbrakk>xs @ ipurge_tr I D (D y) (drop (Suc (length xs)) ws)\n             \\<in> sentences Q;\n     ipurge_tr I D (D y) ys =\n     ipurge_tr I D (D y) (drop (Suc (length xs)) ws) @\n     ipurge_tr_aux I D\n      (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys';\n     ipurge_ref I D (D y) ys Y =\n     ipurge_ref_aux I D\n      (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys'\n      Y\\<rbrakk>\n    \\<Longrightarrow> (xs @\n                       ipurge_tr I D (D y) (drop (Suc (length xs)) ws) @\n                       ipurge_tr_aux I D\n                        (insert (D y)\n                          (sinks I D (D y) (drop (Suc (length xs)) ws)))\n                        ys',\n                       ipurge_ref_aux I D\n                        (insert (D y)\n                          (sinks I D (D y) (drop (Suc (length xs)) ws)))\n                        ys' Y)\n                      \\<in> seq_comp_failures Q R\n 2. \\<lbrakk>xs @ ipurge_tr I D (D y) (drop (Suc (length xs)) ws)\n             \\<notin> sentences Q;\n     ipurge_tr I D (D y) ys =\n     ipurge_tr I D (D y) (drop (Suc (length xs)) ws) @\n     ipurge_tr_aux I D\n      (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys';\n     ipurge_ref I D (D y) ys Y =\n     ipurge_ref_aux I D\n      (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys'\n      Y\\<rbrakk>\n    \\<Longrightarrow> (xs @\n                       ipurge_tr I D (D y) (drop (Suc (length xs)) ws) @\n                       ipurge_tr_aux I D\n                        (insert (D y)\n                          (sinks I D (D y) (drop (Suc (length xs)) ws)))\n                        ys',\n                       ipurge_ref_aux I D\n                        (insert (D y)\n                          (sinks I D (D y) (drop (Suc (length xs)) ws)))\n                        ys' Y)\n                      \\<in> seq_comp_failures Q R", "have K: \"(ipurge_tr_aux I D ?U ys', ipurge_ref_aux I D ?U ys' Y) \\<in> failures R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (ipurge_tr_aux I D\n      (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys',\n     ipurge_ref_aux I D\n      (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys' Y)\n    \\<in> failures R", "using E and G"], ["proof (prove)\nusing this:\n  secure R I D\n  (ys', Y) \\<in> failures R\n\ngoal (1 subgoal):\n 1. (ipurge_tr_aux I D\n      (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys',\n     ipurge_ref_aux I D\n      (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys' Y)\n    \\<in> failures R", "by (rule ipurge_tr_ref_aux_failures)"], ["proof (state)\nthis:\n  (ipurge_tr_aux I D\n    (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys',\n   ipurge_ref_aux I D\n    (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys' Y)\n  \\<in> failures R\n\ngoal (2 subgoals):\n 1. \\<lbrakk>xs @ ipurge_tr I D (D y) (drop (Suc (length xs)) ws)\n             \\<in> sentences Q;\n     ipurge_tr I D (D y) ys =\n     ipurge_tr I D (D y) (drop (Suc (length xs)) ws) @\n     ipurge_tr_aux I D\n      (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys';\n     ipurge_ref I D (D y) ys Y =\n     ipurge_ref_aux I D\n      (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys'\n      Y\\<rbrakk>\n    \\<Longrightarrow> (xs @\n                       ipurge_tr I D (D y) (drop (Suc (length xs)) ws) @\n                       ipurge_tr_aux I D\n                        (insert (D y)\n                          (sinks I D (D y) (drop (Suc (length xs)) ws)))\n                        ys',\n                       ipurge_ref_aux I D\n                        (insert (D y)\n                          (sinks I D (D y) (drop (Suc (length xs)) ws)))\n                        ys' Y)\n                      \\<in> seq_comp_failures Q R\n 2. \\<lbrakk>xs @ ipurge_tr I D (D y) (drop (Suc (length xs)) ws)\n             \\<notin> sentences Q;\n     ipurge_tr I D (D y) ys =\n     ipurge_tr I D (D y) (drop (Suc (length xs)) ws) @\n     ipurge_tr_aux I D\n      (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys';\n     ipurge_ref I D (D y) ys Y =\n     ipurge_ref_aux I D\n      (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys'\n      Y\\<rbrakk>\n    \\<Longrightarrow> (xs @\n                       ipurge_tr I D (D y) (drop (Suc (length xs)) ws) @\n                       ipurge_tr_aux I D\n                        (insert (D y)\n                          (sinks I D (D y) (drop (Suc (length xs)) ws)))\n                        ys',\n                       ipurge_ref_aux I D\n                        (insert (D y)\n                          (sinks I D (D y) (drop (Suc (length xs)) ws)))\n                        ys' Y)\n                      \\<in> seq_comp_failures Q R", "show \"(xs @ ipurge_tr I D (D y) ?ws' @ ipurge_tr_aux I D ?U ys',\n      ipurge_ref_aux I D ?U ys' Y) \\<in> seq_comp_failures Q R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (xs @\n     ipurge_tr I D (D y) (drop (Suc (length xs)) ws) @\n     ipurge_tr_aux I D\n      (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys',\n     ipurge_ref_aux I D\n      (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys' Y)\n    \\<in> seq_comp_failures Q R", "proof (cases \"ipurge_tr_aux I D ?U ys'\")"], ["proof (state)\ngoal (2 subgoals):\n 1. ipurge_tr_aux I D\n     (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys' =\n    [] \\<Longrightarrow>\n    (xs @\n     ipurge_tr I D (D y) (drop (Suc (length xs)) ws) @\n     ipurge_tr_aux I D\n      (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys',\n     ipurge_ref_aux I D\n      (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys' Y)\n    \\<in> seq_comp_failures Q R\n 2. \\<And>a list.\n       ipurge_tr_aux I D\n        (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys' =\n       a # list \\<Longrightarrow>\n       (xs @\n        ipurge_tr I D (D y) (drop (Suc (length xs)) ws) @\n        ipurge_tr_aux I D\n         (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys',\n        ipurge_ref_aux I D\n         (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys' Y)\n       \\<in> seq_comp_failures Q R", "case Nil"], ["proof (state)\nthis:\n  ipurge_tr_aux I D\n   (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys' =\n  []\n\ngoal (2 subgoals):\n 1. ipurge_tr_aux I D\n     (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys' =\n    [] \\<Longrightarrow>\n    (xs @\n     ipurge_tr I D (D y) (drop (Suc (length xs)) ws) @\n     ipurge_tr_aux I D\n      (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys',\n     ipurge_ref_aux I D\n      (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys' Y)\n    \\<in> seq_comp_failures Q R\n 2. \\<And>a list.\n       ipurge_tr_aux I D\n        (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys' =\n       a # list \\<Longrightarrow>\n       (xs @\n        ipurge_tr I D (D y) (drop (Suc (length xs)) ws) @\n        ipurge_tr_aux I D\n         (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys',\n        ipurge_ref_aux I D\n         (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys' Y)\n       \\<in> seq_comp_failures Q R", "have \"(xs @ ipurge_tr I D (D y) ?ws', {x. x \\<noteq> None}) \\<in> failures Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (xs @ ipurge_tr I D (D y) (drop (Suc (length xs)) ws),\n     {x. x \\<noteq> None})\n    \\<in> failures Q", "using B and C and J"], ["proof (prove)\nusing this:\n  ref_union_closed Q\n  sequential Q\n  xs @ ipurge_tr I D (D y) (drop (Suc (length xs)) ws) \\<in> sentences Q\n\ngoal (1 subgoal):\n 1. (xs @ ipurge_tr I D (D y) (drop (Suc (length xs)) ws),\n     {x. x \\<noteq> None})\n    \\<in> failures Q", "by (rule seq_sentences_ref)"], ["proof (state)\nthis:\n  (xs @ ipurge_tr I D (D y) (drop (Suc (length xs)) ws),\n   {x. x \\<noteq> None})\n  \\<in> failures Q\n\ngoal (2 subgoals):\n 1. ipurge_tr_aux I D\n     (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys' =\n    [] \\<Longrightarrow>\n    (xs @\n     ipurge_tr I D (D y) (drop (Suc (length xs)) ws) @\n     ipurge_tr_aux I D\n      (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys',\n     ipurge_ref_aux I D\n      (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys' Y)\n    \\<in> seq_comp_failures Q R\n 2. \\<And>a list.\n       ipurge_tr_aux I D\n        (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys' =\n       a # list \\<Longrightarrow>\n       (xs @\n        ipurge_tr I D (D y) (drop (Suc (length xs)) ws) @\n        ipurge_tr_aux I D\n         (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys',\n        ipurge_ref_aux I D\n         (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys' Y)\n       \\<in> seq_comp_failures Q R", "moreover"], ["proof (state)\nthis:\n  (xs @ ipurge_tr I D (D y) (drop (Suc (length xs)) ws),\n   {x. x \\<noteq> None})\n  \\<in> failures Q\n\ngoal (2 subgoals):\n 1. ipurge_tr_aux I D\n     (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys' =\n    [] \\<Longrightarrow>\n    (xs @\n     ipurge_tr I D (D y) (drop (Suc (length xs)) ws) @\n     ipurge_tr_aux I D\n      (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys',\n     ipurge_ref_aux I D\n      (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys' Y)\n    \\<in> seq_comp_failures Q R\n 2. \\<And>a list.\n       ipurge_tr_aux I D\n        (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys' =\n       a # list \\<Longrightarrow>\n       (xs @\n        ipurge_tr I D (D y) (drop (Suc (length xs)) ws) @\n        ipurge_tr_aux I D\n         (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys',\n        ipurge_ref_aux I D\n         (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys' Y)\n       \\<in> seq_comp_failures Q R", "have \"([], ipurge_ref_aux I D ?U ys' Y) \\<in> failures R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ([],\n     ipurge_ref_aux I D\n      (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys' Y)\n    \\<in> failures R", "using K and Nil"], ["proof (prove)\nusing this:\n  (ipurge_tr_aux I D\n    (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys',\n   ipurge_ref_aux I D\n    (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys' Y)\n  \\<in> failures R\n  ipurge_tr_aux I D\n   (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys' =\n  []\n\ngoal (1 subgoal):\n 1. ([],\n     ipurge_ref_aux I D\n      (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys' Y)\n    \\<in> failures R", "by simp"], ["proof (state)\nthis:\n  ([],\n   ipurge_ref_aux I D\n    (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys' Y)\n  \\<in> failures R\n\ngoal (2 subgoals):\n 1. ipurge_tr_aux I D\n     (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys' =\n    [] \\<Longrightarrow>\n    (xs @\n     ipurge_tr I D (D y) (drop (Suc (length xs)) ws) @\n     ipurge_tr_aux I D\n      (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys',\n     ipurge_ref_aux I D\n      (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys' Y)\n    \\<in> seq_comp_failures Q R\n 2. \\<And>a list.\n       ipurge_tr_aux I D\n        (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys' =\n       a # list \\<Longrightarrow>\n       (xs @\n        ipurge_tr I D (D y) (drop (Suc (length xs)) ws) @\n        ipurge_tr_aux I D\n         (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys',\n        ipurge_ref_aux I D\n         (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys' Y)\n       \\<in> seq_comp_failures Q R", "ultimately"], ["proof (chain)\npicking this:\n  (xs @ ipurge_tr I D (D y) (drop (Suc (length xs)) ws),\n   {x. x \\<noteq> None})\n  \\<in> failures Q\n  ([],\n   ipurge_ref_aux I D\n    (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys' Y)\n  \\<in> failures R", "have \"(xs @ ipurge_tr I D (D y) ?ws',\n        insert None {x. x \\<noteq> None} \\<inter> ipurge_ref_aux I D ?U ys' Y)\n        \\<in> seq_comp_failures Q R\""], ["proof (prove)\nusing this:\n  (xs @ ipurge_tr I D (D y) (drop (Suc (length xs)) ws),\n   {x. x \\<noteq> None})\n  \\<in> failures Q\n  ([],\n   ipurge_ref_aux I D\n    (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys' Y)\n  \\<in> failures R\n\ngoal (1 subgoal):\n 1. (xs @ ipurge_tr I D (D y) (drop (Suc (length xs)) ws),\n     insert None {x. x \\<noteq> None} \\<inter>\n     ipurge_ref_aux I D\n      (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys' Y)\n    \\<in> seq_comp_failures Q R", "by (rule SCF_R2 [OF J])"], ["proof (state)\nthis:\n  (xs @ ipurge_tr I D (D y) (drop (Suc (length xs)) ws),\n   insert None {x. x \\<noteq> None} \\<inter>\n   ipurge_ref_aux I D\n    (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys' Y)\n  \\<in> seq_comp_failures Q R\n\ngoal (2 subgoals):\n 1. ipurge_tr_aux I D\n     (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys' =\n    [] \\<Longrightarrow>\n    (xs @\n     ipurge_tr I D (D y) (drop (Suc (length xs)) ws) @\n     ipurge_tr_aux I D\n      (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys',\n     ipurge_ref_aux I D\n      (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys' Y)\n    \\<in> seq_comp_failures Q R\n 2. \\<And>a list.\n       ipurge_tr_aux I D\n        (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys' =\n       a # list \\<Longrightarrow>\n       (xs @\n        ipurge_tr I D (D y) (drop (Suc (length xs)) ws) @\n        ipurge_tr_aux I D\n         (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys',\n        ipurge_ref_aux I D\n         (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys' Y)\n       \\<in> seq_comp_failures Q R", "moreover"], ["proof (state)\nthis:\n  (xs @ ipurge_tr I D (D y) (drop (Suc (length xs)) ws),\n   insert None {x. x \\<noteq> None} \\<inter>\n   ipurge_ref_aux I D\n    (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys' Y)\n  \\<in> seq_comp_failures Q R\n\ngoal (2 subgoals):\n 1. ipurge_tr_aux I D\n     (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys' =\n    [] \\<Longrightarrow>\n    (xs @\n     ipurge_tr I D (D y) (drop (Suc (length xs)) ws) @\n     ipurge_tr_aux I D\n      (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys',\n     ipurge_ref_aux I D\n      (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys' Y)\n    \\<in> seq_comp_failures Q R\n 2. \\<And>a list.\n       ipurge_tr_aux I D\n        (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys' =\n       a # list \\<Longrightarrow>\n       (xs @\n        ipurge_tr I D (D y) (drop (Suc (length xs)) ws) @\n        ipurge_tr_aux I D\n         (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys',\n        ipurge_ref_aux I D\n         (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys' Y)\n       \\<in> seq_comp_failures Q R", "have \"insert None {x. x \\<noteq> None} \\<inter>\n        ipurge_ref_aux I D ?U ys' Y = ipurge_ref_aux I D ?U ys' Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. insert None {x. x \\<noteq> None} \\<inter>\n    ipurge_ref_aux I D\n     (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys' Y =\n    ipurge_ref_aux I D\n     (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys' Y", "by blast"], ["proof (state)\nthis:\n  insert None {x. x \\<noteq> None} \\<inter>\n  ipurge_ref_aux I D\n   (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys' Y =\n  ipurge_ref_aux I D\n   (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys' Y\n\ngoal (2 subgoals):\n 1. ipurge_tr_aux I D\n     (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys' =\n    [] \\<Longrightarrow>\n    (xs @\n     ipurge_tr I D (D y) (drop (Suc (length xs)) ws) @\n     ipurge_tr_aux I D\n      (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys',\n     ipurge_ref_aux I D\n      (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys' Y)\n    \\<in> seq_comp_failures Q R\n 2. \\<And>a list.\n       ipurge_tr_aux I D\n        (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys' =\n       a # list \\<Longrightarrow>\n       (xs @\n        ipurge_tr I D (D y) (drop (Suc (length xs)) ws) @\n        ipurge_tr_aux I D\n         (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys',\n        ipurge_ref_aux I D\n         (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys' Y)\n       \\<in> seq_comp_failures Q R", "ultimately"], ["proof (chain)\npicking this:\n  (xs @ ipurge_tr I D (D y) (drop (Suc (length xs)) ws),\n   insert None {x. x \\<noteq> None} \\<inter>\n   ipurge_ref_aux I D\n    (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys' Y)\n  \\<in> seq_comp_failures Q R\n  insert None {x. x \\<noteq> None} \\<inter>\n  ipurge_ref_aux I D\n   (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys' Y =\n  ipurge_ref_aux I D\n   (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys' Y", "show ?thesis"], ["proof (prove)\nusing this:\n  (xs @ ipurge_tr I D (D y) (drop (Suc (length xs)) ws),\n   insert None {x. x \\<noteq> None} \\<inter>\n   ipurge_ref_aux I D\n    (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys' Y)\n  \\<in> seq_comp_failures Q R\n  insert None {x. x \\<noteq> None} \\<inter>\n  ipurge_ref_aux I D\n   (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys' Y =\n  ipurge_ref_aux I D\n   (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys' Y\n\ngoal (1 subgoal):\n 1. (xs @\n     ipurge_tr I D (D y) (drop (Suc (length xs)) ws) @\n     ipurge_tr_aux I D\n      (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys',\n     ipurge_ref_aux I D\n      (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys' Y)\n    \\<in> seq_comp_failures Q R", "using Nil"], ["proof (prove)\nusing this:\n  (xs @ ipurge_tr I D (D y) (drop (Suc (length xs)) ws),\n   insert None {x. x \\<noteq> None} \\<inter>\n   ipurge_ref_aux I D\n    (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys' Y)\n  \\<in> seq_comp_failures Q R\n  insert None {x. x \\<noteq> None} \\<inter>\n  ipurge_ref_aux I D\n   (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys' Y =\n  ipurge_ref_aux I D\n   (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys' Y\n  ipurge_tr_aux I D\n   (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys' =\n  []\n\ngoal (1 subgoal):\n 1. (xs @\n     ipurge_tr I D (D y) (drop (Suc (length xs)) ws) @\n     ipurge_tr_aux I D\n      (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys',\n     ipurge_ref_aux I D\n      (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys' Y)\n    \\<in> seq_comp_failures Q R", "by simp"], ["proof (state)\nthis:\n  (xs @\n   ipurge_tr I D (D y) (drop (Suc (length xs)) ws) @\n   ipurge_tr_aux I D\n    (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys',\n   ipurge_ref_aux I D\n    (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys' Y)\n  \\<in> seq_comp_failures Q R\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       ipurge_tr_aux I D\n        (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys' =\n       a # list \\<Longrightarrow>\n       (xs @\n        ipurge_tr I D (D y) (drop (Suc (length xs)) ws) @\n        ipurge_tr_aux I D\n         (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys',\n        ipurge_ref_aux I D\n         (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys' Y)\n       \\<in> seq_comp_failures Q R", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a list.\n       ipurge_tr_aux I D\n        (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys' =\n       a # list \\<Longrightarrow>\n       (xs @\n        ipurge_tr I D (D y) (drop (Suc (length xs)) ws) @\n        ipurge_tr_aux I D\n         (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys',\n        ipurge_ref_aux I D\n         (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys' Y)\n       \\<in> seq_comp_failures Q R", "case Cons"], ["proof (state)\nthis:\n  ipurge_tr_aux I D\n   (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys' =\n  a_ # list_\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       ipurge_tr_aux I D\n        (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys' =\n       a # list \\<Longrightarrow>\n       (xs @\n        ipurge_tr I D (D y) (drop (Suc (length xs)) ws) @\n        ipurge_tr_aux I D\n         (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys',\n        ipurge_ref_aux I D\n         (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys' Y)\n       \\<in> seq_comp_failures Q R", "hence \"ipurge_tr_aux I D ?U ys' \\<noteq> []\""], ["proof (prove)\nusing this:\n  ipurge_tr_aux I D\n   (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys' =\n  a_ # list_\n\ngoal (1 subgoal):\n 1. ipurge_tr_aux I D\n     (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws)))\n     ys' \\<noteq>\n    []", "by simp"], ["proof (state)\nthis:\n  ipurge_tr_aux I D\n   (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys' \\<noteq>\n  []\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       ipurge_tr_aux I D\n        (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys' =\n       a # list \\<Longrightarrow>\n       (xs @\n        ipurge_tr I D (D y) (drop (Suc (length xs)) ws) @\n        ipurge_tr_aux I D\n         (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys',\n        ipurge_ref_aux I D\n         (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys' Y)\n       \\<in> seq_comp_failures Q R", "with J and K"], ["proof (chain)\npicking this:\n  xs @ ipurge_tr I D (D y) (drop (Suc (length xs)) ws) \\<in> sentences Q\n  (ipurge_tr_aux I D\n    (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys',\n   ipurge_ref_aux I D\n    (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys' Y)\n  \\<in> failures R\n  ipurge_tr_aux I D\n   (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys' \\<noteq>\n  []", "have\n       \"((xs @ ipurge_tr I D (D y) ?ws') @ ipurge_tr_aux I D ?U ys',\n          ipurge_ref_aux I D ?U ys' Y) \\<in> seq_comp_failures Q R\""], ["proof (prove)\nusing this:\n  xs @ ipurge_tr I D (D y) (drop (Suc (length xs)) ws) \\<in> sentences Q\n  (ipurge_tr_aux I D\n    (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys',\n   ipurge_ref_aux I D\n    (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys' Y)\n  \\<in> failures R\n  ipurge_tr_aux I D\n   (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys' \\<noteq>\n  []\n\ngoal (1 subgoal):\n 1. ((xs @ ipurge_tr I D (D y) (drop (Suc (length xs)) ws)) @\n     ipurge_tr_aux I D\n      (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys',\n     ipurge_ref_aux I D\n      (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys' Y)\n    \\<in> seq_comp_failures Q R", "by (rule SCF_R3)"], ["proof (state)\nthis:\n  ((xs @ ipurge_tr I D (D y) (drop (Suc (length xs)) ws)) @\n   ipurge_tr_aux I D\n    (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys',\n   ipurge_ref_aux I D\n    (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys' Y)\n  \\<in> seq_comp_failures Q R\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       ipurge_tr_aux I D\n        (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys' =\n       a # list \\<Longrightarrow>\n       (xs @\n        ipurge_tr I D (D y) (drop (Suc (length xs)) ws) @\n        ipurge_tr_aux I D\n         (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys',\n        ipurge_ref_aux I D\n         (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys' Y)\n       \\<in> seq_comp_failures Q R", "thus ?thesis"], ["proof (prove)\nusing this:\n  ((xs @ ipurge_tr I D (D y) (drop (Suc (length xs)) ws)) @\n   ipurge_tr_aux I D\n    (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys',\n   ipurge_ref_aux I D\n    (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys' Y)\n  \\<in> seq_comp_failures Q R\n\ngoal (1 subgoal):\n 1. (xs @\n     ipurge_tr I D (D y) (drop (Suc (length xs)) ws) @\n     ipurge_tr_aux I D\n      (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys',\n     ipurge_ref_aux I D\n      (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys' Y)\n    \\<in> seq_comp_failures Q R", "by simp"], ["proof (state)\nthis:\n  (xs @\n   ipurge_tr I D (D y) (drop (Suc (length xs)) ws) @\n   ipurge_tr_aux I D\n    (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys',\n   ipurge_ref_aux I D\n    (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys' Y)\n  \\<in> seq_comp_failures Q R\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (xs @\n   ipurge_tr I D (D y) (drop (Suc (length xs)) ws) @\n   ipurge_tr_aux I D\n    (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys',\n   ipurge_ref_aux I D\n    (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys' Y)\n  \\<in> seq_comp_failures Q R\n\ngoal (1 subgoal):\n 1. \\<lbrakk>xs @ ipurge_tr I D (D y) (drop (Suc (length xs)) ws)\n             \\<notin> sentences Q;\n     ipurge_tr I D (D y) ys =\n     ipurge_tr I D (D y) (drop (Suc (length xs)) ws) @\n     ipurge_tr_aux I D\n      (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys';\n     ipurge_ref I D (D y) ys Y =\n     ipurge_ref_aux I D\n      (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys'\n      Y\\<rbrakk>\n    \\<Longrightarrow> (xs @\n                       ipurge_tr I D (D y) (drop (Suc (length xs)) ws) @\n                       ipurge_tr_aux I D\n                        (insert (D y)\n                          (sinks I D (D y) (drop (Suc (length xs)) ws)))\n                        ys',\n                       ipurge_ref_aux I D\n                        (insert (D y)\n                          (sinks I D (D y) (drop (Suc (length xs)) ws)))\n                        ys' Y)\n                      \\<in> seq_comp_failures Q R", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>xs @ ipurge_tr I D (D y) (drop (Suc (length xs)) ws)\n             \\<notin> sentences Q;\n     ipurge_tr I D (D y) ys =\n     ipurge_tr I D (D y) (drop (Suc (length xs)) ws) @\n     ipurge_tr_aux I D\n      (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys';\n     ipurge_ref I D (D y) ys Y =\n     ipurge_ref_aux I D\n      (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys'\n      Y\\<rbrakk>\n    \\<Longrightarrow> (xs @\n                       ipurge_tr I D (D y) (drop (Suc (length xs)) ws) @\n                       ipurge_tr_aux I D\n                        (insert (D y)\n                          (sinks I D (D y) (drop (Suc (length xs)) ws)))\n                        ys',\n                       ipurge_ref_aux I D\n                        (insert (D y)\n                          (sinks I D (D y) (drop (Suc (length xs)) ws)))\n                        ys' Y)\n                      \\<in> seq_comp_failures Q R", "assume J: \"xs @ ipurge_tr I D (D y) ?ws' \\<notin> sentences Q\""], ["proof (state)\nthis:\n  xs @ ipurge_tr I D (D y) (drop (Suc (length xs)) ws) \\<notin> sentences Q\n\ngoal (1 subgoal):\n 1. \\<lbrakk>xs @ ipurge_tr I D (D y) (drop (Suc (length xs)) ws)\n             \\<notin> sentences Q;\n     ipurge_tr I D (D y) ys =\n     ipurge_tr I D (D y) (drop (Suc (length xs)) ws) @\n     ipurge_tr_aux I D\n      (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys';\n     ipurge_ref I D (D y) ys Y =\n     ipurge_ref_aux I D\n      (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys'\n      Y\\<rbrakk>\n    \\<Longrightarrow> (xs @\n                       ipurge_tr I D (D y) (drop (Suc (length xs)) ws) @\n                       ipurge_tr_aux I D\n                        (insert (D y)\n                          (sinks I D (D y) (drop (Suc (length xs)) ws)))\n                        ys',\n                       ipurge_ref_aux I D\n                        (insert (D y)\n                          (sinks I D (D y) (drop (Suc (length xs)) ws)))\n                        ys' Y)\n                      \\<in> seq_comp_failures Q R", "have \"ws = take (Suc (length xs)) ws @ ?ws'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ws = take (Suc (length xs)) ws @ drop (Suc (length xs)) ws", "by simp"], ["proof (state)\nthis:\n  ws = take (Suc (length xs)) ws @ drop (Suc (length xs)) ws\n\ngoal (1 subgoal):\n 1. \\<lbrakk>xs @ ipurge_tr I D (D y) (drop (Suc (length xs)) ws)\n             \\<notin> sentences Q;\n     ipurge_tr I D (D y) ys =\n     ipurge_tr I D (D y) (drop (Suc (length xs)) ws) @\n     ipurge_tr_aux I D\n      (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys';\n     ipurge_ref I D (D y) ys Y =\n     ipurge_ref_aux I D\n      (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys'\n      Y\\<rbrakk>\n    \\<Longrightarrow> (xs @\n                       ipurge_tr I D (D y) (drop (Suc (length xs)) ws) @\n                       ipurge_tr_aux I D\n                        (insert (D y)\n                          (sinks I D (D y) (drop (Suc (length xs)) ws)))\n                        ys',\n                       ipurge_ref_aux I D\n                        (insert (D y)\n                          (sinks I D (D y) (drop (Suc (length xs)) ws)))\n                        ys' Y)\n                      \\<in> seq_comp_failures Q R", "moreover"], ["proof (state)\nthis:\n  ws = take (Suc (length xs)) ws @ drop (Suc (length xs)) ws\n\ngoal (1 subgoal):\n 1. \\<lbrakk>xs @ ipurge_tr I D (D y) (drop (Suc (length xs)) ws)\n             \\<notin> sentences Q;\n     ipurge_tr I D (D y) ys =\n     ipurge_tr I D (D y) (drop (Suc (length xs)) ws) @\n     ipurge_tr_aux I D\n      (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys';\n     ipurge_ref I D (D y) ys Y =\n     ipurge_ref_aux I D\n      (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys'\n      Y\\<rbrakk>\n    \\<Longrightarrow> (xs @\n                       ipurge_tr I D (D y) (drop (Suc (length xs)) ws) @\n                       ipurge_tr_aux I D\n                        (insert (D y)\n                          (sinks I D (D y) (drop (Suc (length xs)) ws)))\n                        ys',\n                       ipurge_ref_aux I D\n                        (insert (D y)\n                          (sinks I D (D y) (drop (Suc (length xs)) ws)))\n                        ys' Y)\n                      \\<in> seq_comp_failures Q R", "have \"take (Suc (length xs)) (ws @ ys') =\n      take (Suc (length xs)) (xs @ y # ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. take (Suc (length xs)) (ws @ ys') = take (Suc (length xs)) (xs @ y # ys)", "using H"], ["proof (prove)\nusing this:\n  ws @ ys' = xs @ y # ys\n\ngoal (1 subgoal):\n 1. take (Suc (length xs)) (ws @ ys') = take (Suc (length xs)) (xs @ y # ys)", "by simp"], ["proof (state)\nthis:\n  take (Suc (length xs)) (ws @ ys') = take (Suc (length xs)) (xs @ y # ys)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>xs @ ipurge_tr I D (D y) (drop (Suc (length xs)) ws)\n             \\<notin> sentences Q;\n     ipurge_tr I D (D y) ys =\n     ipurge_tr I D (D y) (drop (Suc (length xs)) ws) @\n     ipurge_tr_aux I D\n      (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys';\n     ipurge_ref I D (D y) ys Y =\n     ipurge_ref_aux I D\n      (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys'\n      Y\\<rbrakk>\n    \\<Longrightarrow> (xs @\n                       ipurge_tr I D (D y) (drop (Suc (length xs)) ws) @\n                       ipurge_tr_aux I D\n                        (insert (D y)\n                          (sinks I D (D y) (drop (Suc (length xs)) ws)))\n                        ys',\n                       ipurge_ref_aux I D\n                        (insert (D y)\n                          (sinks I D (D y) (drop (Suc (length xs)) ws)))\n                        ys' Y)\n                      \\<in> seq_comp_failures Q R", "hence \"take (Suc (length xs)) ws = xs @ [y]\""], ["proof (prove)\nusing this:\n  take (Suc (length xs)) (ws @ ys') = take (Suc (length xs)) (xs @ y # ys)\n\ngoal (1 subgoal):\n 1. take (Suc (length xs)) ws = xs @ [y]", "using True"], ["proof (prove)\nusing this:\n  take (Suc (length xs)) (ws @ ys') = take (Suc (length xs)) (xs @ y # ys)\n  length xs < length ws\n\ngoal (1 subgoal):\n 1. take (Suc (length xs)) ws = xs @ [y]", "by simp"], ["proof (state)\nthis:\n  take (Suc (length xs)) ws = xs @ [y]\n\ngoal (1 subgoal):\n 1. \\<lbrakk>xs @ ipurge_tr I D (D y) (drop (Suc (length xs)) ws)\n             \\<notin> sentences Q;\n     ipurge_tr I D (D y) ys =\n     ipurge_tr I D (D y) (drop (Suc (length xs)) ws) @\n     ipurge_tr_aux I D\n      (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys';\n     ipurge_ref I D (D y) ys Y =\n     ipurge_ref_aux I D\n      (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys'\n      Y\\<rbrakk>\n    \\<Longrightarrow> (xs @\n                       ipurge_tr I D (D y) (drop (Suc (length xs)) ws) @\n                       ipurge_tr_aux I D\n                        (insert (D y)\n                          (sinks I D (D y) (drop (Suc (length xs)) ws)))\n                        ys',\n                       ipurge_ref_aux I D\n                        (insert (D y)\n                          (sinks I D (D y) (drop (Suc (length xs)) ws)))\n                        ys' Y)\n                      \\<in> seq_comp_failures Q R", "ultimately"], ["proof (chain)\npicking this:\n  ws = take (Suc (length xs)) ws @ drop (Suc (length xs)) ws\n  take (Suc (length xs)) ws = xs @ [y]", "have K: \"xs @ y # ?ws' \\<in> sentences Q\""], ["proof (prove)\nusing this:\n  ws = take (Suc (length xs)) ws @ drop (Suc (length xs)) ws\n  take (Suc (length xs)) ws = xs @ [y]\n\ngoal (1 subgoal):\n 1. xs @ y # drop (Suc (length xs)) ws \\<in> sentences Q", "using F"], ["proof (prove)\nusing this:\n  ws = take (Suc (length xs)) ws @ drop (Suc (length xs)) ws\n  take (Suc (length xs)) ws = xs @ [y]\n  ws \\<in> sentences Q\n\ngoal (1 subgoal):\n 1. xs @ y # drop (Suc (length xs)) ws \\<in> sentences Q", "by simp"], ["proof (state)\nthis:\n  xs @ y # drop (Suc (length xs)) ws \\<in> sentences Q\n\ngoal (1 subgoal):\n 1. \\<lbrakk>xs @ ipurge_tr I D (D y) (drop (Suc (length xs)) ws)\n             \\<notin> sentences Q;\n     ipurge_tr I D (D y) ys =\n     ipurge_tr I D (D y) (drop (Suc (length xs)) ws) @\n     ipurge_tr_aux I D\n      (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys';\n     ipurge_ref I D (D y) ys Y =\n     ipurge_ref_aux I D\n      (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys'\n      Y\\<rbrakk>\n    \\<Longrightarrow> (xs @\n                       ipurge_tr I D (D y) (drop (Suc (length xs)) ws) @\n                       ipurge_tr_aux I D\n                        (insert (D y)\n                          (sinks I D (D y) (drop (Suc (length xs)) ws)))\n                        ys',\n                       ipurge_ref_aux I D\n                        (insert (D y)\n                          (sinks I D (D y) (drop (Suc (length xs)) ws)))\n                        ys' Y)\n                      \\<in> seq_comp_failures Q R", "hence \"xs @ y # ?ws' @ [None] \\<in> traces Q\""], ["proof (prove)\nusing this:\n  xs @ y # drop (Suc (length xs)) ws \\<in> sentences Q\n\ngoal (1 subgoal):\n 1. xs @ y # drop (Suc (length xs)) ws @ [None] \\<in> traces Q", "by (simp add: sentences_def)"], ["proof (state)\nthis:\n  xs @ y # drop (Suc (length xs)) ws @ [None] \\<in> traces Q\n\ngoal (1 subgoal):\n 1. \\<lbrakk>xs @ ipurge_tr I D (D y) (drop (Suc (length xs)) ws)\n             \\<notin> sentences Q;\n     ipurge_tr I D (D y) ys =\n     ipurge_tr I D (D y) (drop (Suc (length xs)) ws) @\n     ipurge_tr_aux I D\n      (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys';\n     ipurge_ref I D (D y) ys Y =\n     ipurge_ref_aux I D\n      (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys'\n      Y\\<rbrakk>\n    \\<Longrightarrow> (xs @\n                       ipurge_tr I D (D y) (drop (Suc (length xs)) ws) @\n                       ipurge_tr_aux I D\n                        (insert (D y)\n                          (sinks I D (D y) (drop (Suc (length xs)) ws)))\n                        ys',\n                       ipurge_ref_aux I D\n                        (insert (D y)\n                          (sinks I D (D y) (drop (Suc (length xs)) ws)))\n                        ys' Y)\n                      \\<in> seq_comp_failures Q R", "hence \"(xs @ y # ?ws' @ [None], {}) \\<in> failures Q\""], ["proof (prove)\nusing this:\n  xs @ y # drop (Suc (length xs)) ws @ [None] \\<in> traces Q\n\ngoal (1 subgoal):\n 1. (xs @ y # drop (Suc (length xs)) ws @ [None], {}) \\<in> failures Q", "by (rule traces_failures)"], ["proof (state)\nthis:\n  (xs @ y # drop (Suc (length xs)) ws @ [None], {}) \\<in> failures Q\n\ngoal (1 subgoal):\n 1. \\<lbrakk>xs @ ipurge_tr I D (D y) (drop (Suc (length xs)) ws)\n             \\<notin> sentences Q;\n     ipurge_tr I D (D y) ys =\n     ipurge_tr I D (D y) (drop (Suc (length xs)) ws) @\n     ipurge_tr_aux I D\n      (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys';\n     ipurge_ref I D (D y) ys Y =\n     ipurge_ref_aux I D\n      (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys'\n      Y\\<rbrakk>\n    \\<Longrightarrow> (xs @\n                       ipurge_tr I D (D y) (drop (Suc (length xs)) ws) @\n                       ipurge_tr_aux I D\n                        (insert (D y)\n                          (sinks I D (D y) (drop (Suc (length xs)) ws)))\n                        ys',\n                       ipurge_ref_aux I D\n                        (insert (D y)\n                          (sinks I D (D y) (drop (Suc (length xs)) ws)))\n                        ys' Y)\n                      \\<in> seq_comp_failures Q R", "hence \"(y # ?ws' @ [None], {}) \\<in> futures Q xs\""], ["proof (prove)\nusing this:\n  (xs @ y # drop (Suc (length xs)) ws @ [None], {}) \\<in> failures Q\n\ngoal (1 subgoal):\n 1. (y # drop (Suc (length xs)) ws @ [None], {}) \\<in> futures Q xs", "by (simp add: futures_def)"], ["proof (state)\nthis:\n  (y # drop (Suc (length xs)) ws @ [None], {}) \\<in> futures Q xs\n\ngoal (1 subgoal):\n 1. \\<lbrakk>xs @ ipurge_tr I D (D y) (drop (Suc (length xs)) ws)\n             \\<notin> sentences Q;\n     ipurge_tr I D (D y) ys =\n     ipurge_tr I D (D y) (drop (Suc (length xs)) ws) @\n     ipurge_tr_aux I D\n      (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys';\n     ipurge_ref I D (D y) ys Y =\n     ipurge_ref_aux I D\n      (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys'\n      Y\\<rbrakk>\n    \\<Longrightarrow> (xs @\n                       ipurge_tr I D (D y) (drop (Suc (length xs)) ws) @\n                       ipurge_tr_aux I D\n                        (insert (D y)\n                          (sinks I D (D y) (drop (Suc (length xs)) ws)))\n                        ys',\n                       ipurge_ref_aux I D\n                        (insert (D y)\n                          (sinks I D (D y) (drop (Suc (length xs)) ws)))\n                        ys' Y)\n                      \\<in> seq_comp_failures Q R", "hence \"(ipurge_tr I D (D y) (?ws' @ [None]),\n      ipurge_ref I D (D y) (?ws' @ [None]) {}) \\<in> futures Q xs\""], ["proof (prove)\nusing this:\n  (y # drop (Suc (length xs)) ws @ [None], {}) \\<in> futures Q xs\n\ngoal (1 subgoal):\n 1. (ipurge_tr I D (D y) (drop (Suc (length xs)) ws @ [None]),\n     ipurge_ref I D (D y) (drop (Suc (length xs)) ws @ [None]) {})\n    \\<in> futures Q xs", "using D"], ["proof (prove)\nusing this:\n  (y # drop (Suc (length xs)) ws @ [None], {}) \\<in> futures Q xs\n  secure Q I D\n\ngoal (1 subgoal):\n 1. (ipurge_tr I D (D y) (drop (Suc (length xs)) ws @ [None]),\n     ipurge_ref I D (D y) (drop (Suc (length xs)) ws @ [None]) {})\n    \\<in> futures Q xs", "by (simp add: secure_def del: ipurge_tr.simps)"], ["proof (state)\nthis:\n  (ipurge_tr I D (D y) (drop (Suc (length xs)) ws @ [None]),\n   ipurge_ref I D (D y) (drop (Suc (length xs)) ws @ [None]) {})\n  \\<in> futures Q xs\n\ngoal (1 subgoal):\n 1. \\<lbrakk>xs @ ipurge_tr I D (D y) (drop (Suc (length xs)) ws)\n             \\<notin> sentences Q;\n     ipurge_tr I D (D y) ys =\n     ipurge_tr I D (D y) (drop (Suc (length xs)) ws) @\n     ipurge_tr_aux I D\n      (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys';\n     ipurge_ref I D (D y) ys Y =\n     ipurge_ref_aux I D\n      (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys'\n      Y\\<rbrakk>\n    \\<Longrightarrow> (xs @\n                       ipurge_tr I D (D y) (drop (Suc (length xs)) ws) @\n                       ipurge_tr_aux I D\n                        (insert (D y)\n                          (sinks I D (D y) (drop (Suc (length xs)) ws)))\n                        ys',\n                       ipurge_ref_aux I D\n                        (insert (D y)\n                          (sinks I D (D y) (drop (Suc (length xs)) ws)))\n                        ys' Y)\n                      \\<in> seq_comp_failures Q R", "hence L: \"(xs @ ipurge_tr I D (D y) (?ws' @ [None]), {}) \\<in> failures Q\""], ["proof (prove)\nusing this:\n  (ipurge_tr I D (D y) (drop (Suc (length xs)) ws @ [None]),\n   ipurge_ref I D (D y) (drop (Suc (length xs)) ws @ [None]) {})\n  \\<in> futures Q xs\n\ngoal (1 subgoal):\n 1. (xs @ ipurge_tr I D (D y) (drop (Suc (length xs)) ws @ [None]), {})\n    \\<in> failures Q", "by (simp add: futures_def ipurge_ref_def)"], ["proof (state)\nthis:\n  (xs @ ipurge_tr I D (D y) (drop (Suc (length xs)) ws @ [None]), {})\n  \\<in> failures Q\n\ngoal (1 subgoal):\n 1. \\<lbrakk>xs @ ipurge_tr I D (D y) (drop (Suc (length xs)) ws)\n             \\<notin> sentences Q;\n     ipurge_tr I D (D y) ys =\n     ipurge_tr I D (D y) (drop (Suc (length xs)) ws) @\n     ipurge_tr_aux I D\n      (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys';\n     ipurge_ref I D (D y) ys Y =\n     ipurge_ref_aux I D\n      (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys'\n      Y\\<rbrakk>\n    \\<Longrightarrow> (xs @\n                       ipurge_tr I D (D y) (drop (Suc (length xs)) ws) @\n                       ipurge_tr_aux I D\n                        (insert (D y)\n                          (sinks I D (D y) (drop (Suc (length xs)) ws)))\n                        ys',\n                       ipurge_ref_aux I D\n                        (insert (D y)\n                          (sinks I D (D y) (drop (Suc (length xs)) ws)))\n                        ys' Y)\n                      \\<in> seq_comp_failures Q R", "have \"weakly_sequential Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. weakly_sequential Q", "using C"], ["proof (prove)\nusing this:\n  sequential Q\n\ngoal (1 subgoal):\n 1. weakly_sequential Q", "by (rule seq_implies_weakly_seq)"], ["proof (state)\nthis:\n  weakly_sequential Q\n\ngoal (1 subgoal):\n 1. \\<lbrakk>xs @ ipurge_tr I D (D y) (drop (Suc (length xs)) ws)\n             \\<notin> sentences Q;\n     ipurge_tr I D (D y) ys =\n     ipurge_tr I D (D y) (drop (Suc (length xs)) ws) @\n     ipurge_tr_aux I D\n      (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys';\n     ipurge_ref I D (D y) ys Y =\n     ipurge_ref_aux I D\n      (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys'\n      Y\\<rbrakk>\n    \\<Longrightarrow> (xs @\n                       ipurge_tr I D (D y) (drop (Suc (length xs)) ws) @\n                       ipurge_tr_aux I D\n                        (insert (D y)\n                          (sinks I D (D y) (drop (Suc (length xs)) ws)))\n                        ys',\n                       ipurge_ref_aux I D\n                        (insert (D y)\n                          (sinks I D (D y) (drop (Suc (length xs)) ws)))\n                        ys' Y)\n                      \\<in> seq_comp_failures Q R", "hence N: \"None \\<notin> set (xs @ y # ?ws')\""], ["proof (prove)\nusing this:\n  weakly_sequential Q\n\ngoal (1 subgoal):\n 1. None \\<notin> set (xs @ y # drop (Suc (length xs)) ws)", "using K"], ["proof (prove)\nusing this:\n  weakly_sequential Q\n  xs @ y # drop (Suc (length xs)) ws \\<in> sentences Q\n\ngoal (1 subgoal):\n 1. None \\<notin> set (xs @ y # drop (Suc (length xs)) ws)", "by (rule weakly_seq_sentences_none)"], ["proof (state)\nthis:\n  None \\<notin> set (xs @ y # drop (Suc (length xs)) ws)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>xs @ ipurge_tr I D (D y) (drop (Suc (length xs)) ws)\n             \\<notin> sentences Q;\n     ipurge_tr I D (D y) ys =\n     ipurge_tr I D (D y) (drop (Suc (length xs)) ws) @\n     ipurge_tr_aux I D\n      (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys';\n     ipurge_ref I D (D y) ys Y =\n     ipurge_ref_aux I D\n      (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys'\n      Y\\<rbrakk>\n    \\<Longrightarrow> (xs @\n                       ipurge_tr I D (D y) (drop (Suc (length xs)) ws) @\n                       ipurge_tr_aux I D\n                        (insert (D y)\n                          (sinks I D (D y) (drop (Suc (length xs)) ws)))\n                        ys',\n                       ipurge_ref_aux I D\n                        (insert (D y)\n                          (sinks I D (D y) (drop (Suc (length xs)) ws)))\n                        ys' Y)\n                      \\<in> seq_comp_failures Q R", "show \"(xs @ ipurge_tr I D (D y) ?ws' @ ipurge_tr_aux I D ?U ys',\n      ipurge_ref_aux I D ?U ys' Y) \\<in> seq_comp_failures Q R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (xs @\n     ipurge_tr I D (D y) (drop (Suc (length xs)) ws) @\n     ipurge_tr_aux I D\n      (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys',\n     ipurge_ref_aux I D\n      (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys' Y)\n    \\<in> seq_comp_failures Q R", "proof (cases \"(D y, D None) \\<in> I \\<or>\n     (\\<exists>u \\<in> sinks I D (D y) ?ws'. (u, D None) \\<in> I)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. (D y, D None) \\<in> I \\<or>\n    (\\<exists>u\\<in>sinks I D (D y) (drop (Suc (length xs)) ws).\n        (u, D None) \\<in> I) \\<Longrightarrow>\n    (xs @\n     ipurge_tr I D (D y) (drop (Suc (length xs)) ws) @\n     ipurge_tr_aux I D\n      (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys',\n     ipurge_ref_aux I D\n      (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys' Y)\n    \\<in> seq_comp_failures Q R\n 2. \\<not> ((D y, D None) \\<in> I \\<or>\n            (\\<exists>u\\<in>sinks I D (D y) (drop (Suc (length xs)) ws).\n                (u, D None) \\<in> I)) \\<Longrightarrow>\n    (xs @\n     ipurge_tr I D (D y) (drop (Suc (length xs)) ws) @\n     ipurge_tr_aux I D\n      (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys',\n     ipurge_ref_aux I D\n      (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys' Y)\n    \\<in> seq_comp_failures Q R", "assume M: \"(D y, D None) \\<in> I \\<or>\n        (\\<exists>u \\<in> sinks I D (D y) ?ws'. (u, D None) \\<in> I)\""], ["proof (state)\nthis:\n  (D y, D None) \\<in> I \\<or>\n  (\\<exists>u\\<in>sinks I D (D y) (drop (Suc (length xs)) ws).\n      (u, D None) \\<in> I)\n\ngoal (2 subgoals):\n 1. (D y, D None) \\<in> I \\<or>\n    (\\<exists>u\\<in>sinks I D (D y) (drop (Suc (length xs)) ws).\n        (u, D None) \\<in> I) \\<Longrightarrow>\n    (xs @\n     ipurge_tr I D (D y) (drop (Suc (length xs)) ws) @\n     ipurge_tr_aux I D\n      (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys',\n     ipurge_ref_aux I D\n      (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys' Y)\n    \\<in> seq_comp_failures Q R\n 2. \\<not> ((D y, D None) \\<in> I \\<or>\n            (\\<exists>u\\<in>sinks I D (D y) (drop (Suc (length xs)) ws).\n                (u, D None) \\<in> I)) \\<Longrightarrow>\n    (xs @\n     ipurge_tr I D (D y) (drop (Suc (length xs)) ws) @\n     ipurge_tr_aux I D\n      (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys',\n     ipurge_ref_aux I D\n      (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys' Y)\n    \\<in> seq_comp_failures Q R", "have \"ipurge_tr_aux I D ?U ys' = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ipurge_tr_aux I D\n     (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys' =\n    []", "proof (rule disjE [OF M], erule_tac [2] bexE)"], ["proof (state)\ngoal (2 subgoals):\n 1. (D y, D None) \\<in> I \\<Longrightarrow>\n    ipurge_tr_aux I D\n     (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys' =\n    []\n 2. \\<And>u.\n       \\<lbrakk>u \\<in> sinks I D (D y) (drop (Suc (length xs)) ws);\n        (u, D None) \\<in> I\\<rbrakk>\n       \\<Longrightarrow> ipurge_tr_aux I D\n                          (insert (D y)\n                            (sinks I D (D y) (drop (Suc (length xs)) ws)))\n                          ys' =\n                         []", "assume O: \"(D y, D None) \\<in> I\""], ["proof (state)\nthis:\n  (D y, D None) \\<in> I\n\ngoal (2 subgoals):\n 1. (D y, D None) \\<in> I \\<Longrightarrow>\n    ipurge_tr_aux I D\n     (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys' =\n    []\n 2. \\<And>u.\n       \\<lbrakk>u \\<in> sinks I D (D y) (drop (Suc (length xs)) ws);\n        (u, D None) \\<in> I\\<rbrakk>\n       \\<Longrightarrow> ipurge_tr_aux I D\n                          (insert (D y)\n                            (sinks I D (D y) (drop (Suc (length xs)) ws)))\n                          ys' =\n                         []", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. ipurge_tr_aux I D\n     (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys' =\n    []", "proof (rule ipurge_tr_aux_nil [of \"D y\"], simp)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> set ys' \\<Longrightarrow> (D y, D x) \\<in> I", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> set ys' \\<Longrightarrow> (D y, D x) \\<in> I", "have \"(D y, D None) \\<in> I \\<and> y \\<noteq> None \\<longrightarrow> (\\<forall>u \\<in> range D. (D y, u) \\<in> I)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (D y, D None) \\<in> I \\<and> y \\<noteq> None \\<longrightarrow>\n    (\\<forall>u\\<in>range D. (D y, u) \\<in> I)", "using A"], ["proof (prove)\nusing this:\n  secure_termination I D\n\ngoal (1 subgoal):\n 1. (D y, D None) \\<in> I \\<and> y \\<noteq> None \\<longrightarrow>\n    (\\<forall>u\\<in>range D. (D y, u) \\<in> I)", "by (simp add: secure_termination_def)"], ["proof (state)\nthis:\n  (D y, D None) \\<in> I \\<and> y \\<noteq> None \\<longrightarrow>\n  (\\<forall>u\\<in>range D. (D y, u) \\<in> I)\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> set ys' \\<Longrightarrow> (D y, D x) \\<in> I", "moreover"], ["proof (state)\nthis:\n  (D y, D None) \\<in> I \\<and> y \\<noteq> None \\<longrightarrow>\n  (\\<forall>u\\<in>range D. (D y, u) \\<in> I)\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> set ys' \\<Longrightarrow> (D y, D x) \\<in> I", "have \"y \\<noteq> None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y \\<noteq> None", "using N"], ["proof (prove)\nusing this:\n  None \\<notin> set (xs @ y # drop (Suc (length xs)) ws)\n\ngoal (1 subgoal):\n 1. y \\<noteq> None", "by (rule_tac not_sym, simp)"], ["proof (state)\nthis:\n  y \\<noteq> None\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> set ys' \\<Longrightarrow> (D y, D x) \\<in> I", "ultimately"], ["proof (chain)\npicking this:\n  (D y, D None) \\<in> I \\<and> y \\<noteq> None \\<longrightarrow>\n  (\\<forall>u\\<in>range D. (D y, u) \\<in> I)\n  y \\<noteq> None", "have \"\\<forall>u \\<in> range D. (D y, u) \\<in> I\""], ["proof (prove)\nusing this:\n  (D y, D None) \\<in> I \\<and> y \\<noteq> None \\<longrightarrow>\n  (\\<forall>u\\<in>range D. (D y, u) \\<in> I)\n  y \\<noteq> None\n\ngoal (1 subgoal):\n 1. \\<forall>u\\<in>range D. (D y, u) \\<in> I", "using O"], ["proof (prove)\nusing this:\n  (D y, D None) \\<in> I \\<and> y \\<noteq> None \\<longrightarrow>\n  (\\<forall>u\\<in>range D. (D y, u) \\<in> I)\n  y \\<noteq> None\n  (D y, D None) \\<in> I\n\ngoal (1 subgoal):\n 1. \\<forall>u\\<in>range D. (D y, u) \\<in> I", "by simp"], ["proof (state)\nthis:\n  \\<forall>u\\<in>range D. (D y, u) \\<in> I\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> set ys' \\<Longrightarrow> (D y, D x) \\<in> I", "thus \"(D y, D x) \\<in> I\""], ["proof (prove)\nusing this:\n  \\<forall>u\\<in>range D. (D y, u) \\<in> I\n\ngoal (1 subgoal):\n 1. (D y, D x) \\<in> I", "by simp"], ["proof (state)\nthis:\n  (D y, D x) \\<in> I\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ipurge_tr_aux I D\n   (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys' =\n  []\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<lbrakk>u \\<in> sinks I D (D y) (drop (Suc (length xs)) ws);\n        (u, D None) \\<in> I\\<rbrakk>\n       \\<Longrightarrow> ipurge_tr_aux I D\n                          (insert (D y)\n                            (sinks I D (D y) (drop (Suc (length xs)) ws)))\n                          ys' =\n                         []", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<lbrakk>u \\<in> sinks I D (D y) (drop (Suc (length xs)) ws);\n        (u, D None) \\<in> I\\<rbrakk>\n       \\<Longrightarrow> ipurge_tr_aux I D\n                          (insert (D y)\n                            (sinks I D (D y) (drop (Suc (length xs)) ws)))\n                          ys' =\n                         []", "fix u"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<lbrakk>u \\<in> sinks I D (D y) (drop (Suc (length xs)) ws);\n        (u, D None) \\<in> I\\<rbrakk>\n       \\<Longrightarrow> ipurge_tr_aux I D\n                          (insert (D y)\n                            (sinks I D (D y) (drop (Suc (length xs)) ws)))\n                          ys' =\n                         []", "assume\n          O: \"u \\<in> sinks I D (D y) ?ws'\" and\n          P: \"(u, D None) \\<in> I\""], ["proof (state)\nthis:\n  u \\<in> sinks I D (D y) (drop (Suc (length xs)) ws)\n  (u, D None) \\<in> I\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<lbrakk>u \\<in> sinks I D (D y) (drop (Suc (length xs)) ws);\n        (u, D None) \\<in> I\\<rbrakk>\n       \\<Longrightarrow> ipurge_tr_aux I D\n                          (insert (D y)\n                            (sinks I D (D y) (drop (Suc (length xs)) ws)))\n                          ys' =\n                         []", "have \"\\<exists>w \\<in> set ?ws'. u = D w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>w\\<in>set (drop (Suc (length xs)) ws). u = D w", "using O"], ["proof (prove)\nusing this:\n  u \\<in> sinks I D (D y) (drop (Suc (length xs)) ws)\n\ngoal (1 subgoal):\n 1. \\<exists>w\\<in>set (drop (Suc (length xs)) ws). u = D w", "by (rule sinks_elem)"], ["proof (state)\nthis:\n  \\<exists>w\\<in>set (drop (Suc (length xs)) ws). u = D w\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<lbrakk>u \\<in> sinks I D (D y) (drop (Suc (length xs)) ws);\n        (u, D None) \\<in> I\\<rbrakk>\n       \\<Longrightarrow> ipurge_tr_aux I D\n                          (insert (D y)\n                            (sinks I D (D y) (drop (Suc (length xs)) ws)))\n                          ys' =\n                         []", "then"], ["proof (chain)\npicking this:\n  \\<exists>w\\<in>set (drop (Suc (length xs)) ws). u = D w", "obtain w where Q: \"w \\<in> set ?ws'\" and R: \"u = D w\""], ["proof (prove)\nusing this:\n  \\<exists>w\\<in>set (drop (Suc (length xs)) ws). u = D w\n\ngoal (1 subgoal):\n 1. (\\<And>w.\n        \\<lbrakk>w \\<in> set (drop (Suc (length xs)) ws); u = D w\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  w \\<in> set (drop (Suc (length xs)) ws)\n  u = D w\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<lbrakk>u \\<in> sinks I D (D y) (drop (Suc (length xs)) ws);\n        (u, D None) \\<in> I\\<rbrakk>\n       \\<Longrightarrow> ipurge_tr_aux I D\n                          (insert (D y)\n                            (sinks I D (D y) (drop (Suc (length xs)) ws)))\n                          ys' =\n                         []", "have S: \"w \\<noteq> None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. w \\<noteq> None", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. w = None \\<Longrightarrow> False", "assume \"w = None\""], ["proof (state)\nthis:\n  w = None\n\ngoal (1 subgoal):\n 1. w = None \\<Longrightarrow> False", "hence \"None \\<in> set ?ws'\""], ["proof (prove)\nusing this:\n  w = None\n\ngoal (1 subgoal):\n 1. None \\<in> set (drop (Suc (length xs)) ws)", "using Q"], ["proof (prove)\nusing this:\n  w = None\n  w \\<in> set (drop (Suc (length xs)) ws)\n\ngoal (1 subgoal):\n 1. None \\<in> set (drop (Suc (length xs)) ws)", "by simp"], ["proof (state)\nthis:\n  None \\<in> set (drop (Suc (length xs)) ws)\n\ngoal (1 subgoal):\n 1. w = None \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  None \\<in> set (drop (Suc (length xs)) ws)\n\ngoal (1 subgoal):\n 1. w = None \\<Longrightarrow> False", "have \"None \\<notin> set ?ws'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. None \\<notin> set (drop (Suc (length xs)) ws)", "using N"], ["proof (prove)\nusing this:\n  None \\<notin> set (xs @ y # drop (Suc (length xs)) ws)\n\ngoal (1 subgoal):\n 1. None \\<notin> set (drop (Suc (length xs)) ws)", "by simp"], ["proof (state)\nthis:\n  None \\<notin> set (drop (Suc (length xs)) ws)\n\ngoal (1 subgoal):\n 1. w = None \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  None \\<in> set (drop (Suc (length xs)) ws)\n  None \\<notin> set (drop (Suc (length xs)) ws)", "show False"], ["proof (prove)\nusing this:\n  None \\<in> set (drop (Suc (length xs)) ws)\n  None \\<notin> set (drop (Suc (length xs)) ws)\n\ngoal (1 subgoal):\n 1. False", "by contradiction"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  w \\<noteq> None\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<lbrakk>u \\<in> sinks I D (D y) (drop (Suc (length xs)) ws);\n        (u, D None) \\<in> I\\<rbrakk>\n       \\<Longrightarrow> ipurge_tr_aux I D\n                          (insert (D y)\n                            (sinks I D (D y) (drop (Suc (length xs)) ws)))\n                          ys' =\n                         []", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. ipurge_tr_aux I D\n     (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys' =\n    []", "proof (rule ipurge_tr_aux_nil [of u], simp add: O)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> set ys' \\<Longrightarrow> (u, D x) \\<in> I", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> set ys' \\<Longrightarrow> (u, D x) \\<in> I", "have \"(D w, D None) \\<in> I \\<and> w \\<noteq> None \\<longrightarrow> (\\<forall>v \\<in> range D. (D w, v) \\<in> I)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (D w, D None) \\<in> I \\<and> w \\<noteq> None \\<longrightarrow>\n    (\\<forall>v\\<in>range D. (D w, v) \\<in> I)", "using A"], ["proof (prove)\nusing this:\n  secure_termination I D\n\ngoal (1 subgoal):\n 1. (D w, D None) \\<in> I \\<and> w \\<noteq> None \\<longrightarrow>\n    (\\<forall>v\\<in>range D. (D w, v) \\<in> I)", "by (simp add: secure_termination_def)"], ["proof (state)\nthis:\n  (D w, D None) \\<in> I \\<and> w \\<noteq> None \\<longrightarrow>\n  (\\<forall>v\\<in>range D. (D w, v) \\<in> I)\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> set ys' \\<Longrightarrow> (u, D x) \\<in> I", "moreover"], ["proof (state)\nthis:\n  (D w, D None) \\<in> I \\<and> w \\<noteq> None \\<longrightarrow>\n  (\\<forall>v\\<in>range D. (D w, v) \\<in> I)\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> set ys' \\<Longrightarrow> (u, D x) \\<in> I", "have \"(D w, D None) \\<in> I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (D w, D None) \\<in> I", "using P and R"], ["proof (prove)\nusing this:\n  (u, D None) \\<in> I\n  u = D w\n\ngoal (1 subgoal):\n 1. (D w, D None) \\<in> I", "by simp"], ["proof (state)\nthis:\n  (D w, D None) \\<in> I\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> set ys' \\<Longrightarrow> (u, D x) \\<in> I", "ultimately"], ["proof (chain)\npicking this:\n  (D w, D None) \\<in> I \\<and> w \\<noteq> None \\<longrightarrow>\n  (\\<forall>v\\<in>range D. (D w, v) \\<in> I)\n  (D w, D None) \\<in> I", "have \"\\<forall>v \\<in> range D. (D w, v) \\<in> I\""], ["proof (prove)\nusing this:\n  (D w, D None) \\<in> I \\<and> w \\<noteq> None \\<longrightarrow>\n  (\\<forall>v\\<in>range D. (D w, v) \\<in> I)\n  (D w, D None) \\<in> I\n\ngoal (1 subgoal):\n 1. \\<forall>v\\<in>range D. (D w, v) \\<in> I", "using S"], ["proof (prove)\nusing this:\n  (D w, D None) \\<in> I \\<and> w \\<noteq> None \\<longrightarrow>\n  (\\<forall>v\\<in>range D. (D w, v) \\<in> I)\n  (D w, D None) \\<in> I\n  w \\<noteq> None\n\ngoal (1 subgoal):\n 1. \\<forall>v\\<in>range D. (D w, v) \\<in> I", "by simp"], ["proof (state)\nthis:\n  \\<forall>v\\<in>range D. (D w, v) \\<in> I\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> set ys' \\<Longrightarrow> (u, D x) \\<in> I", "thus \"(u, D x) \\<in> I\""], ["proof (prove)\nusing this:\n  \\<forall>v\\<in>range D. (D w, v) \\<in> I\n\ngoal (1 subgoal):\n 1. (u, D x) \\<in> I", "using R"], ["proof (prove)\nusing this:\n  \\<forall>v\\<in>range D. (D w, v) \\<in> I\n  u = D w\n\ngoal (1 subgoal):\n 1. (u, D x) \\<in> I", "by simp"], ["proof (state)\nthis:\n  (u, D x) \\<in> I\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ipurge_tr_aux I D\n   (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys' =\n  []\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ipurge_tr_aux I D\n   (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys' =\n  []\n\ngoal (2 subgoals):\n 1. (D y, D None) \\<in> I \\<or>\n    (\\<exists>u\\<in>sinks I D (D y) (drop (Suc (length xs)) ws).\n        (u, D None) \\<in> I) \\<Longrightarrow>\n    (xs @\n     ipurge_tr I D (D y) (drop (Suc (length xs)) ws) @\n     ipurge_tr_aux I D\n      (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys',\n     ipurge_ref_aux I D\n      (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys' Y)\n    \\<in> seq_comp_failures Q R\n 2. \\<not> ((D y, D None) \\<in> I \\<or>\n            (\\<exists>u\\<in>sinks I D (D y) (drop (Suc (length xs)) ws).\n                (u, D None) \\<in> I)) \\<Longrightarrow>\n    (xs @\n     ipurge_tr I D (D y) (drop (Suc (length xs)) ws) @\n     ipurge_tr_aux I D\n      (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys',\n     ipurge_ref_aux I D\n      (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys' Y)\n    \\<in> seq_comp_failures Q R", "moreover"], ["proof (state)\nthis:\n  ipurge_tr_aux I D\n   (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys' =\n  []\n\ngoal (2 subgoals):\n 1. (D y, D None) \\<in> I \\<or>\n    (\\<exists>u\\<in>sinks I D (D y) (drop (Suc (length xs)) ws).\n        (u, D None) \\<in> I) \\<Longrightarrow>\n    (xs @\n     ipurge_tr I D (D y) (drop (Suc (length xs)) ws) @\n     ipurge_tr_aux I D\n      (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys',\n     ipurge_ref_aux I D\n      (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys' Y)\n    \\<in> seq_comp_failures Q R\n 2. \\<not> ((D y, D None) \\<in> I \\<or>\n            (\\<exists>u\\<in>sinks I D (D y) (drop (Suc (length xs)) ws).\n                (u, D None) \\<in> I)) \\<Longrightarrow>\n    (xs @\n     ipurge_tr I D (D y) (drop (Suc (length xs)) ws) @\n     ipurge_tr_aux I D\n      (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys',\n     ipurge_ref_aux I D\n      (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys' Y)\n    \\<in> seq_comp_failures Q R", "have \"ipurge_ref_aux I D ?U ys' Y = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ipurge_ref_aux I D\n     (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys' Y =\n    {}", "proof (rule disjE [OF M], erule_tac [2] bexE)"], ["proof (state)\ngoal (2 subgoals):\n 1. (D y, D None) \\<in> I \\<Longrightarrow>\n    ipurge_ref_aux I D\n     (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys' Y =\n    {}\n 2. \\<And>u.\n       \\<lbrakk>u \\<in> sinks I D (D y) (drop (Suc (length xs)) ws);\n        (u, D None) \\<in> I\\<rbrakk>\n       \\<Longrightarrow> ipurge_ref_aux I D\n                          (insert (D y)\n                            (sinks I D (D y) (drop (Suc (length xs)) ws)))\n                          ys' Y =\n                         {}", "assume O: \"(D y, D None) \\<in> I\""], ["proof (state)\nthis:\n  (D y, D None) \\<in> I\n\ngoal (2 subgoals):\n 1. (D y, D None) \\<in> I \\<Longrightarrow>\n    ipurge_ref_aux I D\n     (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys' Y =\n    {}\n 2. \\<And>u.\n       \\<lbrakk>u \\<in> sinks I D (D y) (drop (Suc (length xs)) ws);\n        (u, D None) \\<in> I\\<rbrakk>\n       \\<Longrightarrow> ipurge_ref_aux I D\n                          (insert (D y)\n                            (sinks I D (D y) (drop (Suc (length xs)) ws)))\n                          ys' Y =\n                         {}", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. ipurge_ref_aux I D\n     (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys' Y =\n    {}", "proof (rule ipurge_ref_aux_empty [of \"D y\"])"], ["proof (state)\ngoal (2 subgoals):\n 1. D y\n    \\<in> sinks_aux I D\n           (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys'\n 2. \\<And>x. x \\<in> Y \\<Longrightarrow> (D y, D x) \\<in> I", "have \"?U \\<subseteq> sinks_aux I D ?U ys'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))\n    \\<subseteq> sinks_aux I D\n                 (insert (D y)\n                   (sinks I D (D y) (drop (Suc (length xs)) ws)))\n                 ys'", "by (rule sinks_aux_subset)"], ["proof (state)\nthis:\n  insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))\n  \\<subseteq> sinks_aux I D\n               (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws)))\n               ys'\n\ngoal (2 subgoals):\n 1. D y\n    \\<in> sinks_aux I D\n           (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys'\n 2. \\<And>x. x \\<in> Y \\<Longrightarrow> (D y, D x) \\<in> I", "moreover"], ["proof (state)\nthis:\n  insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))\n  \\<subseteq> sinks_aux I D\n               (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws)))\n               ys'\n\ngoal (2 subgoals):\n 1. D y\n    \\<in> sinks_aux I D\n           (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys'\n 2. \\<And>x. x \\<in> Y \\<Longrightarrow> (D y, D x) \\<in> I", "have \"D y \\<in> ?U\""], ["proof (prove)\ngoal (1 subgoal):\n 1. D y \\<in> insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))", "by simp"], ["proof (state)\nthis:\n  D y \\<in> insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))\n\ngoal (2 subgoals):\n 1. D y\n    \\<in> sinks_aux I D\n           (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys'\n 2. \\<And>x. x \\<in> Y \\<Longrightarrow> (D y, D x) \\<in> I", "ultimately"], ["proof (chain)\npicking this:\n  insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))\n  \\<subseteq> sinks_aux I D\n               (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws)))\n               ys'\n  D y \\<in> insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))", "show \"D y \\<in> sinks_aux I D ?U ys'\""], ["proof (prove)\nusing this:\n  insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))\n  \\<subseteq> sinks_aux I D\n               (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws)))\n               ys'\n  D y \\<in> insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))\n\ngoal (1 subgoal):\n 1. D y\n    \\<in> sinks_aux I D\n           (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys'", ".."], ["proof (state)\nthis:\n  D y\n  \\<in> sinks_aux I D\n         (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys'\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> Y \\<Longrightarrow> (D y, D x) \\<in> I", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> Y \\<Longrightarrow> (D y, D x) \\<in> I", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> Y \\<Longrightarrow> (D y, D x) \\<in> I", "have \"(D y, D None) \\<in> I \\<and> y \\<noteq> None \\<longrightarrow> (\\<forall>u \\<in> range D. (D y, u) \\<in> I)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (D y, D None) \\<in> I \\<and> y \\<noteq> None \\<longrightarrow>\n    (\\<forall>u\\<in>range D. (D y, u) \\<in> I)", "using A"], ["proof (prove)\nusing this:\n  secure_termination I D\n\ngoal (1 subgoal):\n 1. (D y, D None) \\<in> I \\<and> y \\<noteq> None \\<longrightarrow>\n    (\\<forall>u\\<in>range D. (D y, u) \\<in> I)", "by (simp add: secure_termination_def)"], ["proof (state)\nthis:\n  (D y, D None) \\<in> I \\<and> y \\<noteq> None \\<longrightarrow>\n  (\\<forall>u\\<in>range D. (D y, u) \\<in> I)\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> Y \\<Longrightarrow> (D y, D x) \\<in> I", "moreover"], ["proof (state)\nthis:\n  (D y, D None) \\<in> I \\<and> y \\<noteq> None \\<longrightarrow>\n  (\\<forall>u\\<in>range D. (D y, u) \\<in> I)\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> Y \\<Longrightarrow> (D y, D x) \\<in> I", "have \"y \\<noteq> None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y \\<noteq> None", "using N"], ["proof (prove)\nusing this:\n  None \\<notin> set (xs @ y # drop (Suc (length xs)) ws)\n\ngoal (1 subgoal):\n 1. y \\<noteq> None", "by (rule_tac not_sym, simp)"], ["proof (state)\nthis:\n  y \\<noteq> None\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> Y \\<Longrightarrow> (D y, D x) \\<in> I", "ultimately"], ["proof (chain)\npicking this:\n  (D y, D None) \\<in> I \\<and> y \\<noteq> None \\<longrightarrow>\n  (\\<forall>u\\<in>range D. (D y, u) \\<in> I)\n  y \\<noteq> None", "have \"\\<forall>u \\<in> range D. (D y, u) \\<in> I\""], ["proof (prove)\nusing this:\n  (D y, D None) \\<in> I \\<and> y \\<noteq> None \\<longrightarrow>\n  (\\<forall>u\\<in>range D. (D y, u) \\<in> I)\n  y \\<noteq> None\n\ngoal (1 subgoal):\n 1. \\<forall>u\\<in>range D. (D y, u) \\<in> I", "using O"], ["proof (prove)\nusing this:\n  (D y, D None) \\<in> I \\<and> y \\<noteq> None \\<longrightarrow>\n  (\\<forall>u\\<in>range D. (D y, u) \\<in> I)\n  y \\<noteq> None\n  (D y, D None) \\<in> I\n\ngoal (1 subgoal):\n 1. \\<forall>u\\<in>range D. (D y, u) \\<in> I", "by simp"], ["proof (state)\nthis:\n  \\<forall>u\\<in>range D. (D y, u) \\<in> I\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> Y \\<Longrightarrow> (D y, D x) \\<in> I", "thus \"(D y, D x) \\<in> I\""], ["proof (prove)\nusing this:\n  \\<forall>u\\<in>range D. (D y, u) \\<in> I\n\ngoal (1 subgoal):\n 1. (D y, D x) \\<in> I", "by simp"], ["proof (state)\nthis:\n  (D y, D x) \\<in> I\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ipurge_ref_aux I D\n   (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys' Y =\n  {}\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<lbrakk>u \\<in> sinks I D (D y) (drop (Suc (length xs)) ws);\n        (u, D None) \\<in> I\\<rbrakk>\n       \\<Longrightarrow> ipurge_ref_aux I D\n                          (insert (D y)\n                            (sinks I D (D y) (drop (Suc (length xs)) ws)))\n                          ys' Y =\n                         {}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<lbrakk>u \\<in> sinks I D (D y) (drop (Suc (length xs)) ws);\n        (u, D None) \\<in> I\\<rbrakk>\n       \\<Longrightarrow> ipurge_ref_aux I D\n                          (insert (D y)\n                            (sinks I D (D y) (drop (Suc (length xs)) ws)))\n                          ys' Y =\n                         {}", "fix u"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<lbrakk>u \\<in> sinks I D (D y) (drop (Suc (length xs)) ws);\n        (u, D None) \\<in> I\\<rbrakk>\n       \\<Longrightarrow> ipurge_ref_aux I D\n                          (insert (D y)\n                            (sinks I D (D y) (drop (Suc (length xs)) ws)))\n                          ys' Y =\n                         {}", "assume\n          O: \"u \\<in> sinks I D (D y) ?ws'\" and\n          P: \"(u, D None) \\<in> I\""], ["proof (state)\nthis:\n  u \\<in> sinks I D (D y) (drop (Suc (length xs)) ws)\n  (u, D None) \\<in> I\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<lbrakk>u \\<in> sinks I D (D y) (drop (Suc (length xs)) ws);\n        (u, D None) \\<in> I\\<rbrakk>\n       \\<Longrightarrow> ipurge_ref_aux I D\n                          (insert (D y)\n                            (sinks I D (D y) (drop (Suc (length xs)) ws)))\n                          ys' Y =\n                         {}", "have \"\\<exists>w \\<in> set ?ws'. u = D w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>w\\<in>set (drop (Suc (length xs)) ws). u = D w", "using O"], ["proof (prove)\nusing this:\n  u \\<in> sinks I D (D y) (drop (Suc (length xs)) ws)\n\ngoal (1 subgoal):\n 1. \\<exists>w\\<in>set (drop (Suc (length xs)) ws). u = D w", "by (rule sinks_elem)"], ["proof (state)\nthis:\n  \\<exists>w\\<in>set (drop (Suc (length xs)) ws). u = D w\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<lbrakk>u \\<in> sinks I D (D y) (drop (Suc (length xs)) ws);\n        (u, D None) \\<in> I\\<rbrakk>\n       \\<Longrightarrow> ipurge_ref_aux I D\n                          (insert (D y)\n                            (sinks I D (D y) (drop (Suc (length xs)) ws)))\n                          ys' Y =\n                         {}", "then"], ["proof (chain)\npicking this:\n  \\<exists>w\\<in>set (drop (Suc (length xs)) ws). u = D w", "obtain w where Q: \"w \\<in> set ?ws'\" and R: \"u = D w\""], ["proof (prove)\nusing this:\n  \\<exists>w\\<in>set (drop (Suc (length xs)) ws). u = D w\n\ngoal (1 subgoal):\n 1. (\\<And>w.\n        \\<lbrakk>w \\<in> set (drop (Suc (length xs)) ws); u = D w\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  w \\<in> set (drop (Suc (length xs)) ws)\n  u = D w\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<lbrakk>u \\<in> sinks I D (D y) (drop (Suc (length xs)) ws);\n        (u, D None) \\<in> I\\<rbrakk>\n       \\<Longrightarrow> ipurge_ref_aux I D\n                          (insert (D y)\n                            (sinks I D (D y) (drop (Suc (length xs)) ws)))\n                          ys' Y =\n                         {}", "have S: \"w \\<noteq> None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. w \\<noteq> None", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. w = None \\<Longrightarrow> False", "assume \"w = None\""], ["proof (state)\nthis:\n  w = None\n\ngoal (1 subgoal):\n 1. w = None \\<Longrightarrow> False", "hence \"None \\<in> set ?ws'\""], ["proof (prove)\nusing this:\n  w = None\n\ngoal (1 subgoal):\n 1. None \\<in> set (drop (Suc (length xs)) ws)", "using Q"], ["proof (prove)\nusing this:\n  w = None\n  w \\<in> set (drop (Suc (length xs)) ws)\n\ngoal (1 subgoal):\n 1. None \\<in> set (drop (Suc (length xs)) ws)", "by simp"], ["proof (state)\nthis:\n  None \\<in> set (drop (Suc (length xs)) ws)\n\ngoal (1 subgoal):\n 1. w = None \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  None \\<in> set (drop (Suc (length xs)) ws)\n\ngoal (1 subgoal):\n 1. w = None \\<Longrightarrow> False", "have \"None \\<notin> set ?ws'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. None \\<notin> set (drop (Suc (length xs)) ws)", "using N"], ["proof (prove)\nusing this:\n  None \\<notin> set (xs @ y # drop (Suc (length xs)) ws)\n\ngoal (1 subgoal):\n 1. None \\<notin> set (drop (Suc (length xs)) ws)", "by simp"], ["proof (state)\nthis:\n  None \\<notin> set (drop (Suc (length xs)) ws)\n\ngoal (1 subgoal):\n 1. w = None \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  None \\<in> set (drop (Suc (length xs)) ws)\n  None \\<notin> set (drop (Suc (length xs)) ws)", "show False"], ["proof (prove)\nusing this:\n  None \\<in> set (drop (Suc (length xs)) ws)\n  None \\<notin> set (drop (Suc (length xs)) ws)\n\ngoal (1 subgoal):\n 1. False", "by contradiction"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  w \\<noteq> None\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<lbrakk>u \\<in> sinks I D (D y) (drop (Suc (length xs)) ws);\n        (u, D None) \\<in> I\\<rbrakk>\n       \\<Longrightarrow> ipurge_ref_aux I D\n                          (insert (D y)\n                            (sinks I D (D y) (drop (Suc (length xs)) ws)))\n                          ys' Y =\n                         {}", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. ipurge_ref_aux I D\n     (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys' Y =\n    {}", "proof (rule ipurge_ref_aux_empty [of u])"], ["proof (state)\ngoal (2 subgoals):\n 1. u \\<in> sinks_aux I D\n             (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws)))\n             ys'\n 2. \\<And>x. x \\<in> Y \\<Longrightarrow> (u, D x) \\<in> I", "have \"?U \\<subseteq> sinks_aux I D ?U ys'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))\n    \\<subseteq> sinks_aux I D\n                 (insert (D y)\n                   (sinks I D (D y) (drop (Suc (length xs)) ws)))\n                 ys'", "by (rule sinks_aux_subset)"], ["proof (state)\nthis:\n  insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))\n  \\<subseteq> sinks_aux I D\n               (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws)))\n               ys'\n\ngoal (2 subgoals):\n 1. u \\<in> sinks_aux I D\n             (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws)))\n             ys'\n 2. \\<And>x. x \\<in> Y \\<Longrightarrow> (u, D x) \\<in> I", "moreover"], ["proof (state)\nthis:\n  insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))\n  \\<subseteq> sinks_aux I D\n               (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws)))\n               ys'\n\ngoal (2 subgoals):\n 1. u \\<in> sinks_aux I D\n             (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws)))\n             ys'\n 2. \\<And>x. x \\<in> Y \\<Longrightarrow> (u, D x) \\<in> I", "have \"u \\<in> ?U\""], ["proof (prove)\ngoal (1 subgoal):\n 1. u \\<in> insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))", "using O"], ["proof (prove)\nusing this:\n  u \\<in> sinks I D (D y) (drop (Suc (length xs)) ws)\n\ngoal (1 subgoal):\n 1. u \\<in> insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))", "by simp"], ["proof (state)\nthis:\n  u \\<in> insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))\n\ngoal (2 subgoals):\n 1. u \\<in> sinks_aux I D\n             (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws)))\n             ys'\n 2. \\<And>x. x \\<in> Y \\<Longrightarrow> (u, D x) \\<in> I", "ultimately"], ["proof (chain)\npicking this:\n  insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))\n  \\<subseteq> sinks_aux I D\n               (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws)))\n               ys'\n  u \\<in> insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))", "show \"u \\<in> sinks_aux I D ?U ys'\""], ["proof (prove)\nusing this:\n  insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))\n  \\<subseteq> sinks_aux I D\n               (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws)))\n               ys'\n  u \\<in> insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))\n\ngoal (1 subgoal):\n 1. u \\<in> sinks_aux I D\n             (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws)))\n             ys'", ".."], ["proof (state)\nthis:\n  u \\<in> sinks_aux I D\n           (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys'\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> Y \\<Longrightarrow> (u, D x) \\<in> I", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> Y \\<Longrightarrow> (u, D x) \\<in> I", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> Y \\<Longrightarrow> (u, D x) \\<in> I", "have \"(D w, D None) \\<in> I \\<and> w \\<noteq> None \\<longrightarrow> (\\<forall>v \\<in> range D. (D w, v) \\<in> I)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (D w, D None) \\<in> I \\<and> w \\<noteq> None \\<longrightarrow>\n    (\\<forall>v\\<in>range D. (D w, v) \\<in> I)", "using A"], ["proof (prove)\nusing this:\n  secure_termination I D\n\ngoal (1 subgoal):\n 1. (D w, D None) \\<in> I \\<and> w \\<noteq> None \\<longrightarrow>\n    (\\<forall>v\\<in>range D. (D w, v) \\<in> I)", "by (simp add: secure_termination_def)"], ["proof (state)\nthis:\n  (D w, D None) \\<in> I \\<and> w \\<noteq> None \\<longrightarrow>\n  (\\<forall>v\\<in>range D. (D w, v) \\<in> I)\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> Y \\<Longrightarrow> (u, D x) \\<in> I", "moreover"], ["proof (state)\nthis:\n  (D w, D None) \\<in> I \\<and> w \\<noteq> None \\<longrightarrow>\n  (\\<forall>v\\<in>range D. (D w, v) \\<in> I)\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> Y \\<Longrightarrow> (u, D x) \\<in> I", "have \"(D w, D None) \\<in> I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (D w, D None) \\<in> I", "using P and R"], ["proof (prove)\nusing this:\n  (u, D None) \\<in> I\n  u = D w\n\ngoal (1 subgoal):\n 1. (D w, D None) \\<in> I", "by simp"], ["proof (state)\nthis:\n  (D w, D None) \\<in> I\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> Y \\<Longrightarrow> (u, D x) \\<in> I", "ultimately"], ["proof (chain)\npicking this:\n  (D w, D None) \\<in> I \\<and> w \\<noteq> None \\<longrightarrow>\n  (\\<forall>v\\<in>range D. (D w, v) \\<in> I)\n  (D w, D None) \\<in> I", "have \"\\<forall>v \\<in> range D. (D w, v) \\<in> I\""], ["proof (prove)\nusing this:\n  (D w, D None) \\<in> I \\<and> w \\<noteq> None \\<longrightarrow>\n  (\\<forall>v\\<in>range D. (D w, v) \\<in> I)\n  (D w, D None) \\<in> I\n\ngoal (1 subgoal):\n 1. \\<forall>v\\<in>range D. (D w, v) \\<in> I", "using S"], ["proof (prove)\nusing this:\n  (D w, D None) \\<in> I \\<and> w \\<noteq> None \\<longrightarrow>\n  (\\<forall>v\\<in>range D. (D w, v) \\<in> I)\n  (D w, D None) \\<in> I\n  w \\<noteq> None\n\ngoal (1 subgoal):\n 1. \\<forall>v\\<in>range D. (D w, v) \\<in> I", "by simp"], ["proof (state)\nthis:\n  \\<forall>v\\<in>range D. (D w, v) \\<in> I\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> Y \\<Longrightarrow> (u, D x) \\<in> I", "thus \"(u, D x) \\<in> I\""], ["proof (prove)\nusing this:\n  \\<forall>v\\<in>range D. (D w, v) \\<in> I\n\ngoal (1 subgoal):\n 1. (u, D x) \\<in> I", "using R"], ["proof (prove)\nusing this:\n  \\<forall>v\\<in>range D. (D w, v) \\<in> I\n  u = D w\n\ngoal (1 subgoal):\n 1. (u, D x) \\<in> I", "by simp"], ["proof (state)\nthis:\n  (u, D x) \\<in> I\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ipurge_ref_aux I D\n   (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys' Y =\n  {}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ipurge_ref_aux I D\n   (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys' Y =\n  {}\n\ngoal (2 subgoals):\n 1. (D y, D None) \\<in> I \\<or>\n    (\\<exists>u\\<in>sinks I D (D y) (drop (Suc (length xs)) ws).\n        (u, D None) \\<in> I) \\<Longrightarrow>\n    (xs @\n     ipurge_tr I D (D y) (drop (Suc (length xs)) ws) @\n     ipurge_tr_aux I D\n      (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys',\n     ipurge_ref_aux I D\n      (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys' Y)\n    \\<in> seq_comp_failures Q R\n 2. \\<not> ((D y, D None) \\<in> I \\<or>\n            (\\<exists>u\\<in>sinks I D (D y) (drop (Suc (length xs)) ws).\n                (u, D None) \\<in> I)) \\<Longrightarrow>\n    (xs @\n     ipurge_tr I D (D y) (drop (Suc (length xs)) ws) @\n     ipurge_tr_aux I D\n      (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys',\n     ipurge_ref_aux I D\n      (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys' Y)\n    \\<in> seq_comp_failures Q R", "ultimately"], ["proof (chain)\npicking this:\n  ipurge_tr_aux I D\n   (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys' =\n  []\n  ipurge_ref_aux I D\n   (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys' Y =\n  {}", "show ?thesis"], ["proof (prove)\nusing this:\n  ipurge_tr_aux I D\n   (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys' =\n  []\n  ipurge_ref_aux I D\n   (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys' Y =\n  {}\n\ngoal (1 subgoal):\n 1. (xs @\n     ipurge_tr I D (D y) (drop (Suc (length xs)) ws) @\n     ipurge_tr_aux I D\n      (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys',\n     ipurge_ref_aux I D\n      (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys' Y)\n    \\<in> seq_comp_failures Q R", "proof simp"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>ipurge_tr_aux I D\n              (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws)))\n              ys' =\n             [];\n     ipurge_ref_aux I D\n      (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys' Y =\n     {}\\<rbrakk>\n    \\<Longrightarrow> (xs @ ipurge_tr I D (D y) (drop (Suc (length xs)) ws),\n                       {})\n                      \\<in> seq_comp_failures Q R", "have \"D None \\<in> sinks I D (D y) (?ws' @ [None])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. D None \\<in> sinks I D (D y) (drop (Suc (length xs)) ws @ [None])", "using M"], ["proof (prove)\nusing this:\n  (D y, D None) \\<in> I \\<or>\n  (\\<exists>u\\<in>sinks I D (D y) (drop (Suc (length xs)) ws).\n      (u, D None) \\<in> I)\n\ngoal (1 subgoal):\n 1. D None \\<in> sinks I D (D y) (drop (Suc (length xs)) ws @ [None])", "by (simp only: sinks_interference_eq)"], ["proof (state)\nthis:\n  D None \\<in> sinks I D (D y) (drop (Suc (length xs)) ws @ [None])\n\ngoal (1 subgoal):\n 1. \\<lbrakk>ipurge_tr_aux I D\n              (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws)))\n              ys' =\n             [];\n     ipurge_ref_aux I D\n      (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys' Y =\n     {}\\<rbrakk>\n    \\<Longrightarrow> (xs @ ipurge_tr I D (D y) (drop (Suc (length xs)) ws),\n                       {})\n                      \\<in> seq_comp_failures Q R", "hence \"(xs @ ipurge_tr I D (D y) ?ws', {}) \\<in> failures Q\""], ["proof (prove)\nusing this:\n  D None \\<in> sinks I D (D y) (drop (Suc (length xs)) ws @ [None])\n\ngoal (1 subgoal):\n 1. (xs @ ipurge_tr I D (D y) (drop (Suc (length xs)) ws), {})\n    \\<in> failures Q", "using L"], ["proof (prove)\nusing this:\n  D None \\<in> sinks I D (D y) (drop (Suc (length xs)) ws @ [None])\n  (xs @ ipurge_tr I D (D y) (drop (Suc (length xs)) ws @ [None]), {})\n  \\<in> failures Q\n\ngoal (1 subgoal):\n 1. (xs @ ipurge_tr I D (D y) (drop (Suc (length xs)) ws), {})\n    \\<in> failures Q", "by simp"], ["proof (state)\nthis:\n  (xs @ ipurge_tr I D (D y) (drop (Suc (length xs)) ws), {})\n  \\<in> failures Q\n\ngoal (1 subgoal):\n 1. \\<lbrakk>ipurge_tr_aux I D\n              (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws)))\n              ys' =\n             [];\n     ipurge_ref_aux I D\n      (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys' Y =\n     {}\\<rbrakk>\n    \\<Longrightarrow> (xs @ ipurge_tr I D (D y) (drop (Suc (length xs)) ws),\n                       {})\n                      \\<in> seq_comp_failures Q R", "moreover"], ["proof (state)\nthis:\n  (xs @ ipurge_tr I D (D y) (drop (Suc (length xs)) ws), {})\n  \\<in> failures Q\n\ngoal (1 subgoal):\n 1. \\<lbrakk>ipurge_tr_aux I D\n              (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws)))\n              ys' =\n             [];\n     ipurge_ref_aux I D\n      (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys' Y =\n     {}\\<rbrakk>\n    \\<Longrightarrow> (xs @ ipurge_tr I D (D y) (drop (Suc (length xs)) ws),\n                       {})\n                      \\<in> seq_comp_failures Q R", "have \"None \\<notin> set (xs @ ipurge_tr I D (D y) ?ws')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. None \\<notin> set (xs @ ipurge_tr I D (D y) (drop (Suc (length xs)) ws))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. None \\<notin> set (xs @ ipurge_tr I D (D y) (drop (Suc (length xs)) ws))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. None \\<notin> set (xs @ ipurge_tr I D (D y) (drop (Suc (length xs)) ws))", "using N"], ["proof (prove)\nusing this:\n  None \\<notin> set (xs @ y # drop (Suc (length xs)) ws)\n\ngoal (1 subgoal):\n 1. None \\<notin> set (xs @ ipurge_tr I D (D y) (drop (Suc (length xs)) ws))", "proof (simp, (erule_tac conjE)+)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>None \\<notin> set (xs @ y # drop (Suc (length xs)) ws);\n     None \\<noteq> y;\n     None \\<notin> set (xs @ y # drop (Suc (length xs)) ws);\n     None \\<notin> set xs;\n     None \\<notin> set (drop (Suc (length xs)) ws)\\<rbrakk>\n    \\<Longrightarrow> None\n                      \\<notin> set (ipurge_tr I D (D y)\n                                     (drop (Suc (length xs)) ws))", "have \"set (ipurge_tr I D (D y) ?ws') \\<subseteq> set ?ws'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (ipurge_tr I D (D y) (drop (Suc (length xs)) ws))\n    \\<subseteq> set (drop (Suc (length xs)) ws)", "by (rule ipurge_tr_set)"], ["proof (state)\nthis:\n  set (ipurge_tr I D (D y) (drop (Suc (length xs)) ws))\n  \\<subseteq> set (drop (Suc (length xs)) ws)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>None \\<notin> set (xs @ y # drop (Suc (length xs)) ws);\n     None \\<noteq> y;\n     None \\<notin> set (xs @ y # drop (Suc (length xs)) ws);\n     None \\<notin> set xs;\n     None \\<notin> set (drop (Suc (length xs)) ws)\\<rbrakk>\n    \\<Longrightarrow> None\n                      \\<notin> set (ipurge_tr I D (D y)\n                                     (drop (Suc (length xs)) ws))", "moreover"], ["proof (state)\nthis:\n  set (ipurge_tr I D (D y) (drop (Suc (length xs)) ws))\n  \\<subseteq> set (drop (Suc (length xs)) ws)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>None \\<notin> set (xs @ y # drop (Suc (length xs)) ws);\n     None \\<noteq> y;\n     None \\<notin> set (xs @ y # drop (Suc (length xs)) ws);\n     None \\<notin> set xs;\n     None \\<notin> set (drop (Suc (length xs)) ws)\\<rbrakk>\n    \\<Longrightarrow> None\n                      \\<notin> set (ipurge_tr I D (D y)\n                                     (drop (Suc (length xs)) ws))", "assume \"None \\<notin> set ?ws'\""], ["proof (state)\nthis:\n  None \\<notin> set (drop (Suc (length xs)) ws)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>None \\<notin> set (xs @ y # drop (Suc (length xs)) ws);\n     None \\<noteq> y;\n     None \\<notin> set (xs @ y # drop (Suc (length xs)) ws);\n     None \\<notin> set xs;\n     None \\<notin> set (drop (Suc (length xs)) ws)\\<rbrakk>\n    \\<Longrightarrow> None\n                      \\<notin> set (ipurge_tr I D (D y)\n                                     (drop (Suc (length xs)) ws))", "ultimately"], ["proof (chain)\npicking this:\n  set (ipurge_tr I D (D y) (drop (Suc (length xs)) ws))\n  \\<subseteq> set (drop (Suc (length xs)) ws)\n  None \\<notin> set (drop (Suc (length xs)) ws)", "show \"None \\<notin> set (ipurge_tr I D (D y) ?ws')\""], ["proof (prove)\nusing this:\n  set (ipurge_tr I D (D y) (drop (Suc (length xs)) ws))\n  \\<subseteq> set (drop (Suc (length xs)) ws)\n  None \\<notin> set (drop (Suc (length xs)) ws)\n\ngoal (1 subgoal):\n 1. None \\<notin> set (ipurge_tr I D (D y) (drop (Suc (length xs)) ws))", "by (rule contra_subsetD)"], ["proof (state)\nthis:\n  None \\<notin> set (ipurge_tr I D (D y) (drop (Suc (length xs)) ws))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  None \\<notin> set (xs @ ipurge_tr I D (D y) (drop (Suc (length xs)) ws))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  None \\<notin> set (xs @ ipurge_tr I D (D y) (drop (Suc (length xs)) ws))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>ipurge_tr_aux I D\n              (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws)))\n              ys' =\n             [];\n     ipurge_ref_aux I D\n      (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys' Y =\n     {}\\<rbrakk>\n    \\<Longrightarrow> (xs @ ipurge_tr I D (D y) (drop (Suc (length xs)) ws),\n                       {})\n                      \\<in> seq_comp_failures Q R", "ultimately"], ["proof (chain)\npicking this:\n  (xs @ ipurge_tr I D (D y) (drop (Suc (length xs)) ws), {})\n  \\<in> failures Q\n  None \\<notin> set (xs @ ipurge_tr I D (D y) (drop (Suc (length xs)) ws))", "show \"(xs @ ipurge_tr I D (D y) ?ws', {})\n          \\<in> seq_comp_failures Q R\""], ["proof (prove)\nusing this:\n  (xs @ ipurge_tr I D (D y) (drop (Suc (length xs)) ws), {})\n  \\<in> failures Q\n  None \\<notin> set (xs @ ipurge_tr I D (D y) (drop (Suc (length xs)) ws))\n\ngoal (1 subgoal):\n 1. (xs @ ipurge_tr I D (D y) (drop (Suc (length xs)) ws), {})\n    \\<in> seq_comp_failures Q R", "by (rule SCF_R1 [OF J])"], ["proof (state)\nthis:\n  (xs @ ipurge_tr I D (D y) (drop (Suc (length xs)) ws), {})\n  \\<in> seq_comp_failures Q R\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (xs @\n   ipurge_tr I D (D y) (drop (Suc (length xs)) ws) @\n   ipurge_tr_aux I D\n    (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys',\n   ipurge_ref_aux I D\n    (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys' Y)\n  \\<in> seq_comp_failures Q R\n\ngoal (1 subgoal):\n 1. \\<not> ((D y, D None) \\<in> I \\<or>\n            (\\<exists>u\\<in>sinks I D (D y) (drop (Suc (length xs)) ws).\n                (u, D None) \\<in> I)) \\<Longrightarrow>\n    (xs @\n     ipurge_tr I D (D y) (drop (Suc (length xs)) ws) @\n     ipurge_tr_aux I D\n      (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys',\n     ipurge_ref_aux I D\n      (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys' Y)\n    \\<in> seq_comp_failures Q R", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> ((D y, D None) \\<in> I \\<or>\n            (\\<exists>u\\<in>sinks I D (D y) (drop (Suc (length xs)) ws).\n                (u, D None) \\<in> I)) \\<Longrightarrow>\n    (xs @\n     ipurge_tr I D (D y) (drop (Suc (length xs)) ws) @\n     ipurge_tr_aux I D\n      (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys',\n     ipurge_ref_aux I D\n      (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys' Y)\n    \\<in> seq_comp_failures Q R", "assume \"\\<not> ((D y, D None) \\<in> I \\<or>\n        (\\<exists>u \\<in> sinks I D (D y) ?ws'. (u, D None) \\<in> I))\""], ["proof (state)\nthis:\n  \\<not> ((D y, D None) \\<in> I \\<or>\n          (\\<exists>u\\<in>sinks I D (D y) (drop (Suc (length xs)) ws).\n              (u, D None) \\<in> I))\n\ngoal (1 subgoal):\n 1. \\<not> ((D y, D None) \\<in> I \\<or>\n            (\\<exists>u\\<in>sinks I D (D y) (drop (Suc (length xs)) ws).\n                (u, D None) \\<in> I)) \\<Longrightarrow>\n    (xs @\n     ipurge_tr I D (D y) (drop (Suc (length xs)) ws) @\n     ipurge_tr_aux I D\n      (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys',\n     ipurge_ref_aux I D\n      (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys' Y)\n    \\<in> seq_comp_failures Q R", "hence \"D None \\<notin> sinks I D (D y) (?ws' @ [None])\""], ["proof (prove)\nusing this:\n  \\<not> ((D y, D None) \\<in> I \\<or>\n          (\\<exists>u\\<in>sinks I D (D y) (drop (Suc (length xs)) ws).\n              (u, D None) \\<in> I))\n\ngoal (1 subgoal):\n 1. D None \\<notin> sinks I D (D y) (drop (Suc (length xs)) ws @ [None])", "by (simp only: sinks_interference_eq, simp)"], ["proof (state)\nthis:\n  D None \\<notin> sinks I D (D y) (drop (Suc (length xs)) ws @ [None])\n\ngoal (1 subgoal):\n 1. \\<not> ((D y, D None) \\<in> I \\<or>\n            (\\<exists>u\\<in>sinks I D (D y) (drop (Suc (length xs)) ws).\n                (u, D None) \\<in> I)) \\<Longrightarrow>\n    (xs @\n     ipurge_tr I D (D y) (drop (Suc (length xs)) ws) @\n     ipurge_tr_aux I D\n      (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys',\n     ipurge_ref_aux I D\n      (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys' Y)\n    \\<in> seq_comp_failures Q R", "hence \"(xs @ ipurge_tr I D (D y) ?ws' @ [None], {}) \\<in> failures Q\""], ["proof (prove)\nusing this:\n  D None \\<notin> sinks I D (D y) (drop (Suc (length xs)) ws @ [None])\n\ngoal (1 subgoal):\n 1. (xs @ ipurge_tr I D (D y) (drop (Suc (length xs)) ws) @ [None], {})\n    \\<in> failures Q", "using L"], ["proof (prove)\nusing this:\n  D None \\<notin> sinks I D (D y) (drop (Suc (length xs)) ws @ [None])\n  (xs @ ipurge_tr I D (D y) (drop (Suc (length xs)) ws @ [None]), {})\n  \\<in> failures Q\n\ngoal (1 subgoal):\n 1. (xs @ ipurge_tr I D (D y) (drop (Suc (length xs)) ws) @ [None], {})\n    \\<in> failures Q", "by simp"], ["proof (state)\nthis:\n  (xs @ ipurge_tr I D (D y) (drop (Suc (length xs)) ws) @ [None], {})\n  \\<in> failures Q\n\ngoal (1 subgoal):\n 1. \\<not> ((D y, D None) \\<in> I \\<or>\n            (\\<exists>u\\<in>sinks I D (D y) (drop (Suc (length xs)) ws).\n                (u, D None) \\<in> I)) \\<Longrightarrow>\n    (xs @\n     ipurge_tr I D (D y) (drop (Suc (length xs)) ws) @\n     ipurge_tr_aux I D\n      (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys',\n     ipurge_ref_aux I D\n      (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys' Y)\n    \\<in> seq_comp_failures Q R", "hence \"xs @ ipurge_tr I D (D y) ?ws' @ [None] \\<in> traces Q\""], ["proof (prove)\nusing this:\n  (xs @ ipurge_tr I D (D y) (drop (Suc (length xs)) ws) @ [None], {})\n  \\<in> failures Q\n\ngoal (1 subgoal):\n 1. xs @ ipurge_tr I D (D y) (drop (Suc (length xs)) ws) @ [None]\n    \\<in> traces Q", "by (rule failures_traces)"], ["proof (state)\nthis:\n  xs @ ipurge_tr I D (D y) (drop (Suc (length xs)) ws) @ [None]\n  \\<in> traces Q\n\ngoal (1 subgoal):\n 1. \\<not> ((D y, D None) \\<in> I \\<or>\n            (\\<exists>u\\<in>sinks I D (D y) (drop (Suc (length xs)) ws).\n                (u, D None) \\<in> I)) \\<Longrightarrow>\n    (xs @\n     ipurge_tr I D (D y) (drop (Suc (length xs)) ws) @\n     ipurge_tr_aux I D\n      (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys',\n     ipurge_ref_aux I D\n      (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys' Y)\n    \\<in> seq_comp_failures Q R", "hence \"xs @ ipurge_tr I D (D y) ?ws' \\<in> sentences Q\""], ["proof (prove)\nusing this:\n  xs @ ipurge_tr I D (D y) (drop (Suc (length xs)) ws) @ [None]\n  \\<in> traces Q\n\ngoal (1 subgoal):\n 1. xs @ ipurge_tr I D (D y) (drop (Suc (length xs)) ws) \\<in> sentences Q", "by (simp add: sentences_def)"], ["proof (state)\nthis:\n  xs @ ipurge_tr I D (D y) (drop (Suc (length xs)) ws) \\<in> sentences Q\n\ngoal (1 subgoal):\n 1. \\<not> ((D y, D None) \\<in> I \\<or>\n            (\\<exists>u\\<in>sinks I D (D y) (drop (Suc (length xs)) ws).\n                (u, D None) \\<in> I)) \\<Longrightarrow>\n    (xs @\n     ipurge_tr I D (D y) (drop (Suc (length xs)) ws) @\n     ipurge_tr_aux I D\n      (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys',\n     ipurge_ref_aux I D\n      (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys' Y)\n    \\<in> seq_comp_failures Q R", "thus ?thesis"], ["proof (prove)\nusing this:\n  xs @ ipurge_tr I D (D y) (drop (Suc (length xs)) ws) \\<in> sentences Q\n\ngoal (1 subgoal):\n 1. (xs @\n     ipurge_tr I D (D y) (drop (Suc (length xs)) ws) @\n     ipurge_tr_aux I D\n      (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys',\n     ipurge_ref_aux I D\n      (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys' Y)\n    \\<in> seq_comp_failures Q R", "using J"], ["proof (prove)\nusing this:\n  xs @ ipurge_tr I D (D y) (drop (Suc (length xs)) ws) \\<in> sentences Q\n  xs @ ipurge_tr I D (D y) (drop (Suc (length xs)) ws) \\<notin> sentences Q\n\ngoal (1 subgoal):\n 1. (xs @\n     ipurge_tr I D (D y) (drop (Suc (length xs)) ws) @\n     ipurge_tr_aux I D\n      (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys',\n     ipurge_ref_aux I D\n      (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys' Y)\n    \\<in> seq_comp_failures Q R", "by contradiction"], ["proof (state)\nthis:\n  (xs @\n   ipurge_tr I D (D y) (drop (Suc (length xs)) ws) @\n   ipurge_tr_aux I D\n    (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys',\n   ipurge_ref_aux I D\n    (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys' Y)\n  \\<in> seq_comp_failures Q R\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (xs @\n   ipurge_tr I D (D y) (drop (Suc (length xs)) ws) @\n   ipurge_tr_aux I D\n    (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys',\n   ipurge_ref_aux I D\n    (insert (D y) (sinks I D (D y) (drop (Suc (length xs)) ws))) ys' Y)\n  \\<in> seq_comp_failures Q R\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys Y)\n  \\<in> seq_comp_failures Q R\n\ngoal (1 subgoal):\n 1. \\<not> length xs < length ws \\<Longrightarrow>\n    (xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys Y)\n    \\<in> seq_comp_failures Q R", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> length xs < length ws \\<Longrightarrow>\n    (xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys Y)\n    \\<in> seq_comp_failures Q R", "case False"], ["proof (state)\nthis:\n  \\<not> length xs < length ws\n\ngoal (1 subgoal):\n 1. \\<not> length xs < length ws \\<Longrightarrow>\n    (xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys Y)\n    \\<in> seq_comp_failures Q R", "have \"drop (length ws) (ws @ ys') = drop (length ws) (xs @ y # ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. drop (length ws) (ws @ ys') = drop (length ws) (xs @ y # ys)", "using H"], ["proof (prove)\nusing this:\n  ws @ ys' = xs @ y # ys\n\ngoal (1 subgoal):\n 1. drop (length ws) (ws @ ys') = drop (length ws) (xs @ y # ys)", "by simp"], ["proof (state)\nthis:\n  drop (length ws) (ws @ ys') = drop (length ws) (xs @ y # ys)\n\ngoal (1 subgoal):\n 1. \\<not> length xs < length ws \\<Longrightarrow>\n    (xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys Y)\n    \\<in> seq_comp_failures Q R", "hence \"ys' = drop (length ws) xs @ y # ys\"\n    (is \"_ = ?xs' @ _\")"], ["proof (prove)\nusing this:\n  drop (length ws) (ws @ ys') = drop (length ws) (xs @ y # ys)\n\ngoal (1 subgoal):\n 1. ys' = drop (length ws) xs @ y # ys", "using False"], ["proof (prove)\nusing this:\n  drop (length ws) (ws @ ys') = drop (length ws) (xs @ y # ys)\n  \\<not> length xs < length ws\n\ngoal (1 subgoal):\n 1. ys' = drop (length ws) xs @ y # ys", "by simp"], ["proof (state)\nthis:\n  ys' = drop (length ws) xs @ y # ys\n\ngoal (1 subgoal):\n 1. \\<not> length xs < length ws \\<Longrightarrow>\n    (xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys Y)\n    \\<in> seq_comp_failures Q R", "hence \"(?xs' @ y # ys, Y) \\<in> failures R\""], ["proof (prove)\nusing this:\n  ys' = drop (length ws) xs @ y # ys\n\ngoal (1 subgoal):\n 1. (drop (length ws) xs @ y # ys, Y) \\<in> failures R", "using G"], ["proof (prove)\nusing this:\n  ys' = drop (length ws) xs @ y # ys\n  (ys', Y) \\<in> failures R\n\ngoal (1 subgoal):\n 1. (drop (length ws) xs @ y # ys, Y) \\<in> failures R", "by simp"], ["proof (state)\nthis:\n  (drop (length ws) xs @ y # ys, Y) \\<in> failures R\n\ngoal (1 subgoal):\n 1. \\<not> length xs < length ws \\<Longrightarrow>\n    (xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys Y)\n    \\<in> seq_comp_failures Q R", "hence \"(y # ys, Y) \\<in> futures R ?xs'\""], ["proof (prove)\nusing this:\n  (drop (length ws) xs @ y # ys, Y) \\<in> failures R\n\ngoal (1 subgoal):\n 1. (y # ys, Y) \\<in> futures R (drop (length ws) xs)", "by (simp add: futures_def)"], ["proof (state)\nthis:\n  (y # ys, Y) \\<in> futures R (drop (length ws) xs)\n\ngoal (1 subgoal):\n 1. \\<not> length xs < length ws \\<Longrightarrow>\n    (xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys Y)\n    \\<in> seq_comp_failures Q R", "hence \"(ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys Y)\n    \\<in> futures R ?xs'\""], ["proof (prove)\nusing this:\n  (y # ys, Y) \\<in> futures R (drop (length ws) xs)\n\ngoal (1 subgoal):\n 1. (ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys Y)\n    \\<in> futures R (drop (length ws) xs)", "using E"], ["proof (prove)\nusing this:\n  (y # ys, Y) \\<in> futures R (drop (length ws) xs)\n  secure R I D\n\ngoal (1 subgoal):\n 1. (ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys Y)\n    \\<in> futures R (drop (length ws) xs)", "by (simp add: secure_def)"], ["proof (state)\nthis:\n  (ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys Y)\n  \\<in> futures R (drop (length ws) xs)\n\ngoal (1 subgoal):\n 1. \\<not> length xs < length ws \\<Longrightarrow>\n    (xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys Y)\n    \\<in> seq_comp_failures Q R", "hence I: \"(?xs' @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys Y)\n    \\<in> failures R\""], ["proof (prove)\nusing this:\n  (ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys Y)\n  \\<in> futures R (drop (length ws) xs)\n\ngoal (1 subgoal):\n 1. (drop (length ws) xs @ ipurge_tr I D (D y) ys,\n     ipurge_ref I D (D y) ys Y)\n    \\<in> failures R", "by (simp add: futures_def)"], ["proof (state)\nthis:\n  (drop (length ws) xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys Y)\n  \\<in> failures R\n\ngoal (1 subgoal):\n 1. \\<not> length xs < length ws \\<Longrightarrow>\n    (xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys Y)\n    \\<in> seq_comp_failures Q R", "have \"xs = take (length ws) xs @ ?xs'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs = take (length ws) xs @ drop (length ws) xs", "by simp"], ["proof (state)\nthis:\n  xs = take (length ws) xs @ drop (length ws) xs\n\ngoal (1 subgoal):\n 1. \\<not> length xs < length ws \\<Longrightarrow>\n    (xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys Y)\n    \\<in> seq_comp_failures Q R", "hence \"xs = take (length ws) (xs @ y # ys) @ ?xs'\""], ["proof (prove)\nusing this:\n  xs = take (length ws) xs @ drop (length ws) xs\n\ngoal (1 subgoal):\n 1. xs = take (length ws) (xs @ y # ys) @ drop (length ws) xs", "using False"], ["proof (prove)\nusing this:\n  xs = take (length ws) xs @ drop (length ws) xs\n  \\<not> length xs < length ws\n\ngoal (1 subgoal):\n 1. xs = take (length ws) (xs @ y # ys) @ drop (length ws) xs", "by simp"], ["proof (state)\nthis:\n  xs = take (length ws) (xs @ y # ys) @ drop (length ws) xs\n\ngoal (1 subgoal):\n 1. \\<not> length xs < length ws \\<Longrightarrow>\n    (xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys Y)\n    \\<in> seq_comp_failures Q R", "hence \"xs = take (length ws) (ws @ ys') @ ?xs'\""], ["proof (prove)\nusing this:\n  xs = take (length ws) (xs @ y # ys) @ drop (length ws) xs\n\ngoal (1 subgoal):\n 1. xs = take (length ws) (ws @ ys') @ drop (length ws) xs", "using H"], ["proof (prove)\nusing this:\n  xs = take (length ws) (xs @ y # ys) @ drop (length ws) xs\n  ws @ ys' = xs @ y # ys\n\ngoal (1 subgoal):\n 1. xs = take (length ws) (ws @ ys') @ drop (length ws) xs", "by simp"], ["proof (state)\nthis:\n  xs = take (length ws) (ws @ ys') @ drop (length ws) xs\n\ngoal (1 subgoal):\n 1. \\<not> length xs < length ws \\<Longrightarrow>\n    (xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys Y)\n    \\<in> seq_comp_failures Q R", "hence J: \"xs = ws @ ?xs'\""], ["proof (prove)\nusing this:\n  xs = take (length ws) (ws @ ys') @ drop (length ws) xs\n\ngoal (1 subgoal):\n 1. xs = ws @ drop (length ws) xs", "by simp"], ["proof (state)\nthis:\n  xs = ws @ drop (length ws) xs\n\ngoal (1 subgoal):\n 1. \\<not> length xs < length ws \\<Longrightarrow>\n    (xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys Y)\n    \\<in> seq_comp_failures Q R", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys Y)\n    \\<in> seq_comp_failures Q R", "proof (cases \"?xs' @ ipurge_tr I D (D y) ys = []\", insert I, subst J, simp)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>length xs \\<le> length ws \\<and> ipurge_tr I D (D y) ys = [];\n     ([], ipurge_ref I D (D y) ys Y) \\<in> failures R\\<rbrakk>\n    \\<Longrightarrow> (ws, ipurge_ref I D (D y) ys Y)\n                      \\<in> seq_comp_failures Q R\n 2. \\<lbrakk>drop (length ws) xs @ ipurge_tr I D (D y) ys \\<noteq> [];\n     (drop (length ws) xs @ ipurge_tr I D (D y) ys,\n      ipurge_ref I D (D y) ys Y)\n     \\<in> failures R\\<rbrakk>\n    \\<Longrightarrow> (xs @ ipurge_tr I D (D y) ys,\n                       ipurge_ref I D (D y) ys Y)\n                      \\<in> seq_comp_failures Q R", "have \"(ws, {x. x \\<noteq> None}) \\<in> failures Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (ws, {x. x \\<noteq> None}) \\<in> failures Q", "using B and C and F"], ["proof (prove)\nusing this:\n  ref_union_closed Q\n  sequential Q\n  ws \\<in> sentences Q\n\ngoal (1 subgoal):\n 1. (ws, {x. x \\<noteq> None}) \\<in> failures Q", "by (rule seq_sentences_ref)"], ["proof (state)\nthis:\n  (ws, {x. x \\<noteq> None}) \\<in> failures Q\n\ngoal (2 subgoals):\n 1. \\<lbrakk>length xs \\<le> length ws \\<and> ipurge_tr I D (D y) ys = [];\n     ([], ipurge_ref I D (D y) ys Y) \\<in> failures R\\<rbrakk>\n    \\<Longrightarrow> (ws, ipurge_ref I D (D y) ys Y)\n                      \\<in> seq_comp_failures Q R\n 2. \\<lbrakk>drop (length ws) xs @ ipurge_tr I D (D y) ys \\<noteq> [];\n     (drop (length ws) xs @ ipurge_tr I D (D y) ys,\n      ipurge_ref I D (D y) ys Y)\n     \\<in> failures R\\<rbrakk>\n    \\<Longrightarrow> (xs @ ipurge_tr I D (D y) ys,\n                       ipurge_ref I D (D y) ys Y)\n                      \\<in> seq_comp_failures Q R", "moreover"], ["proof (state)\nthis:\n  (ws, {x. x \\<noteq> None}) \\<in> failures Q\n\ngoal (2 subgoals):\n 1. \\<lbrakk>length xs \\<le> length ws \\<and> ipurge_tr I D (D y) ys = [];\n     ([], ipurge_ref I D (D y) ys Y) \\<in> failures R\\<rbrakk>\n    \\<Longrightarrow> (ws, ipurge_ref I D (D y) ys Y)\n                      \\<in> seq_comp_failures Q R\n 2. \\<lbrakk>drop (length ws) xs @ ipurge_tr I D (D y) ys \\<noteq> [];\n     (drop (length ws) xs @ ipurge_tr I D (D y) ys,\n      ipurge_ref I D (D y) ys Y)\n     \\<in> failures R\\<rbrakk>\n    \\<Longrightarrow> (xs @ ipurge_tr I D (D y) ys,\n                       ipurge_ref I D (D y) ys Y)\n                      \\<in> seq_comp_failures Q R", "assume \"([], ipurge_ref I D (D y) ys Y) \\<in> failures R\""], ["proof (state)\nthis:\n  ([], ipurge_ref I D (D y) ys Y) \\<in> failures R\n\ngoal (2 subgoals):\n 1. \\<lbrakk>length xs \\<le> length ws \\<and> ipurge_tr I D (D y) ys = [];\n     ([], ipurge_ref I D (D y) ys Y) \\<in> failures R\\<rbrakk>\n    \\<Longrightarrow> (ws, ipurge_ref I D (D y) ys Y)\n                      \\<in> seq_comp_failures Q R\n 2. \\<lbrakk>drop (length ws) xs @ ipurge_tr I D (D y) ys \\<noteq> [];\n     (drop (length ws) xs @ ipurge_tr I D (D y) ys,\n      ipurge_ref I D (D y) ys Y)\n     \\<in> failures R\\<rbrakk>\n    \\<Longrightarrow> (xs @ ipurge_tr I D (D y) ys,\n                       ipurge_ref I D (D y) ys Y)\n                      \\<in> seq_comp_failures Q R", "ultimately"], ["proof (chain)\npicking this:\n  (ws, {x. x \\<noteq> None}) \\<in> failures Q\n  ([], ipurge_ref I D (D y) ys Y) \\<in> failures R", "have \"(ws, insert None {x. x \\<noteq> None} \\<inter>\n      ipurge_ref I D (D y) ys Y) \\<in> seq_comp_failures Q R\""], ["proof (prove)\nusing this:\n  (ws, {x. x \\<noteq> None}) \\<in> failures Q\n  ([], ipurge_ref I D (D y) ys Y) \\<in> failures R\n\ngoal (1 subgoal):\n 1. (ws,\n     insert None {x. x \\<noteq> None} \\<inter> ipurge_ref I D (D y) ys Y)\n    \\<in> seq_comp_failures Q R", "by (rule SCF_R2 [OF F])"], ["proof (state)\nthis:\n  (ws, insert None {x. x \\<noteq> None} \\<inter> ipurge_ref I D (D y) ys Y)\n  \\<in> seq_comp_failures Q R\n\ngoal (2 subgoals):\n 1. \\<lbrakk>length xs \\<le> length ws \\<and> ipurge_tr I D (D y) ys = [];\n     ([], ipurge_ref I D (D y) ys Y) \\<in> failures R\\<rbrakk>\n    \\<Longrightarrow> (ws, ipurge_ref I D (D y) ys Y)\n                      \\<in> seq_comp_failures Q R\n 2. \\<lbrakk>drop (length ws) xs @ ipurge_tr I D (D y) ys \\<noteq> [];\n     (drop (length ws) xs @ ipurge_tr I D (D y) ys,\n      ipurge_ref I D (D y) ys Y)\n     \\<in> failures R\\<rbrakk>\n    \\<Longrightarrow> (xs @ ipurge_tr I D (D y) ys,\n                       ipurge_ref I D (D y) ys Y)\n                      \\<in> seq_comp_failures Q R", "moreover"], ["proof (state)\nthis:\n  (ws, insert None {x. x \\<noteq> None} \\<inter> ipurge_ref I D (D y) ys Y)\n  \\<in> seq_comp_failures Q R\n\ngoal (2 subgoals):\n 1. \\<lbrakk>length xs \\<le> length ws \\<and> ipurge_tr I D (D y) ys = [];\n     ([], ipurge_ref I D (D y) ys Y) \\<in> failures R\\<rbrakk>\n    \\<Longrightarrow> (ws, ipurge_ref I D (D y) ys Y)\n                      \\<in> seq_comp_failures Q R\n 2. \\<lbrakk>drop (length ws) xs @ ipurge_tr I D (D y) ys \\<noteq> [];\n     (drop (length ws) xs @ ipurge_tr I D (D y) ys,\n      ipurge_ref I D (D y) ys Y)\n     \\<in> failures R\\<rbrakk>\n    \\<Longrightarrow> (xs @ ipurge_tr I D (D y) ys,\n                       ipurge_ref I D (D y) ys Y)\n                      \\<in> seq_comp_failures Q R", "have \"insert None {x. x \\<noteq> None} \\<inter> ipurge_ref I D (D y) ys Y =\n      ipurge_ref I D (D y) ys Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. insert None {x. x \\<noteq> None} \\<inter> ipurge_ref I D (D y) ys Y =\n    ipurge_ref I D (D y) ys Y", "by blast"], ["proof (state)\nthis:\n  insert None {x. x \\<noteq> None} \\<inter> ipurge_ref I D (D y) ys Y =\n  ipurge_ref I D (D y) ys Y\n\ngoal (2 subgoals):\n 1. \\<lbrakk>length xs \\<le> length ws \\<and> ipurge_tr I D (D y) ys = [];\n     ([], ipurge_ref I D (D y) ys Y) \\<in> failures R\\<rbrakk>\n    \\<Longrightarrow> (ws, ipurge_ref I D (D y) ys Y)\n                      \\<in> seq_comp_failures Q R\n 2. \\<lbrakk>drop (length ws) xs @ ipurge_tr I D (D y) ys \\<noteq> [];\n     (drop (length ws) xs @ ipurge_tr I D (D y) ys,\n      ipurge_ref I D (D y) ys Y)\n     \\<in> failures R\\<rbrakk>\n    \\<Longrightarrow> (xs @ ipurge_tr I D (D y) ys,\n                       ipurge_ref I D (D y) ys Y)\n                      \\<in> seq_comp_failures Q R", "ultimately"], ["proof (chain)\npicking this:\n  (ws, insert None {x. x \\<noteq> None} \\<inter> ipurge_ref I D (D y) ys Y)\n  \\<in> seq_comp_failures Q R\n  insert None {x. x \\<noteq> None} \\<inter> ipurge_ref I D (D y) ys Y =\n  ipurge_ref I D (D y) ys Y", "show \"(ws, ipurge_ref I D (D y) ys Y) \\<in> seq_comp_failures Q R\""], ["proof (prove)\nusing this:\n  (ws, insert None {x. x \\<noteq> None} \\<inter> ipurge_ref I D (D y) ys Y)\n  \\<in> seq_comp_failures Q R\n  insert None {x. x \\<noteq> None} \\<inter> ipurge_ref I D (D y) ys Y =\n  ipurge_ref I D (D y) ys Y\n\ngoal (1 subgoal):\n 1. (ws, ipurge_ref I D (D y) ys Y) \\<in> seq_comp_failures Q R", "by simp"], ["proof (state)\nthis:\n  (ws, ipurge_ref I D (D y) ys Y) \\<in> seq_comp_failures Q R\n\ngoal (1 subgoal):\n 1. \\<lbrakk>drop (length ws) xs @ ipurge_tr I D (D y) ys \\<noteq> [];\n     (drop (length ws) xs @ ipurge_tr I D (D y) ys,\n      ipurge_ref I D (D y) ys Y)\n     \\<in> failures R\\<rbrakk>\n    \\<Longrightarrow> (xs @ ipurge_tr I D (D y) ys,\n                       ipurge_ref I D (D y) ys Y)\n                      \\<in> seq_comp_failures Q R", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>drop (length ws) xs @ ipurge_tr I D (D y) ys \\<noteq> [];\n     (drop (length ws) xs @ ipurge_tr I D (D y) ys,\n      ipurge_ref I D (D y) ys Y)\n     \\<in> failures R\\<rbrakk>\n    \\<Longrightarrow> (xs @ ipurge_tr I D (D y) ys,\n                       ipurge_ref I D (D y) ys Y)\n                      \\<in> seq_comp_failures Q R", "assume \"?xs' @ ipurge_tr I D (D y) ys \\<noteq> []\""], ["proof (state)\nthis:\n  drop (length ws) xs @ ipurge_tr I D (D y) ys \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<lbrakk>drop (length ws) xs @ ipurge_tr I D (D y) ys \\<noteq> [];\n     (drop (length ws) xs @ ipurge_tr I D (D y) ys,\n      ipurge_ref I D (D y) ys Y)\n     \\<in> failures R\\<rbrakk>\n    \\<Longrightarrow> (xs @ ipurge_tr I D (D y) ys,\n                       ipurge_ref I D (D y) ys Y)\n                      \\<in> seq_comp_failures Q R", "with F and I"], ["proof (chain)\npicking this:\n  ws \\<in> sentences Q\n  (drop (length ws) xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys Y)\n  \\<in> failures R\n  drop (length ws) xs @ ipurge_tr I D (D y) ys \\<noteq> []", "have\n     \"(ws @ ?xs' @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys Y)\n      \\<in> seq_comp_failures Q R\""], ["proof (prove)\nusing this:\n  ws \\<in> sentences Q\n  (drop (length ws) xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys Y)\n  \\<in> failures R\n  drop (length ws) xs @ ipurge_tr I D (D y) ys \\<noteq> []\n\ngoal (1 subgoal):\n 1. (ws @ drop (length ws) xs @ ipurge_tr I D (D y) ys,\n     ipurge_ref I D (D y) ys Y)\n    \\<in> seq_comp_failures Q R", "by (rule SCF_R3)"], ["proof (state)\nthis:\n  (ws @ drop (length ws) xs @ ipurge_tr I D (D y) ys,\n   ipurge_ref I D (D y) ys Y)\n  \\<in> seq_comp_failures Q R\n\ngoal (1 subgoal):\n 1. \\<lbrakk>drop (length ws) xs @ ipurge_tr I D (D y) ys \\<noteq> [];\n     (drop (length ws) xs @ ipurge_tr I D (D y) ys,\n      ipurge_ref I D (D y) ys Y)\n     \\<in> failures R\\<rbrakk>\n    \\<Longrightarrow> (xs @ ipurge_tr I D (D y) ys,\n                       ipurge_ref I D (D y) ys Y)\n                      \\<in> seq_comp_failures Q R", "hence \"((ws @ ?xs') @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys Y)\n      \\<in> seq_comp_failures Q R\""], ["proof (prove)\nusing this:\n  (ws @ drop (length ws) xs @ ipurge_tr I D (D y) ys,\n   ipurge_ref I D (D y) ys Y)\n  \\<in> seq_comp_failures Q R\n\ngoal (1 subgoal):\n 1. ((ws @ drop (length ws) xs) @ ipurge_tr I D (D y) ys,\n     ipurge_ref I D (D y) ys Y)\n    \\<in> seq_comp_failures Q R", "by simp"], ["proof (state)\nthis:\n  ((ws @ drop (length ws) xs) @ ipurge_tr I D (D y) ys,\n   ipurge_ref I D (D y) ys Y)\n  \\<in> seq_comp_failures Q R\n\ngoal (1 subgoal):\n 1. \\<lbrakk>drop (length ws) xs @ ipurge_tr I D (D y) ys \\<noteq> [];\n     (drop (length ws) xs @ ipurge_tr I D (D y) ys,\n      ipurge_ref I D (D y) ys Y)\n     \\<in> failures R\\<rbrakk>\n    \\<Longrightarrow> (xs @ ipurge_tr I D (D y) ys,\n                       ipurge_ref I D (D y) ys Y)\n                      \\<in> seq_comp_failures Q R", "thus ?thesis"], ["proof (prove)\nusing this:\n  ((ws @ drop (length ws) xs) @ ipurge_tr I D (D y) ys,\n   ipurge_ref I D (D y) ys Y)\n  \\<in> seq_comp_failures Q R\n\ngoal (1 subgoal):\n 1. (xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys Y)\n    \\<in> seq_comp_failures Q R", "using J"], ["proof (prove)\nusing this:\n  ((ws @ drop (length ws) xs) @ ipurge_tr I D (D y) ys,\n   ipurge_ref I D (D y) ys Y)\n  \\<in> seq_comp_failures Q R\n  xs = ws @ drop (length ws) xs\n\ngoal (1 subgoal):\n 1. (xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys Y)\n    \\<in> seq_comp_failures Q R", "by simp"], ["proof (state)\nthis:\n  (xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys Y)\n  \\<in> seq_comp_failures Q R\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys Y)\n  \\<in> seq_comp_failures Q R\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma seq_comp_secure_aux_1 [rule_format]:\n  assumes\n    A: \"secure_termination I D\" and\n    B: \"ref_union_closed P\" and\n    C: \"sequential P\" and\n    D: \"secure P I D\" and\n    E: \"secure Q I D\"\n  shows \"(ws, Y) \\<in> seq_comp_failures P Q \\<Longrightarrow>\n    ws = xs @ y # ys \\<longrightarrow>\n    (xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys Y)\n      \\<in> seq_comp_failures P Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (ws, Y) \\<in> seq_comp_failures P Q \\<Longrightarrow>\n    ws = xs @ y # ys \\<longrightarrow>\n    (xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys Y)\n    \\<in> seq_comp_failures P Q", "proof (erule seq_comp_failures.induct, rule_tac [!] impI, simp_all, (erule conjE)+)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>xsa X.\n       \\<lbrakk>xs @ y # ys \\<notin> sentences P;\n        (xs @ y # ys, X) \\<in> failures P; xsa = xs @ y # ys;\n        None \\<noteq> y; None \\<notin> set xs; None \\<notin> set ys\\<rbrakk>\n       \\<Longrightarrow> (xs @ ipurge_tr I D (D y) ys,\n                          ipurge_ref I D (D y) ys X)\n                         \\<in> seq_comp_failures P Q\n 2. \\<And>xsa X Y.\n       \\<lbrakk>xs @ y # ys \\<in> sentences P;\n        (xs @ y # ys, X) \\<in> failures P; ([], Y) \\<in> failures Q;\n        xsa = xs @ y # ys\\<rbrakk>\n       \\<Longrightarrow> (xs @ ipurge_tr I D (D y) ys,\n                          ipurge_ref I D (D y) ys\n                           (insert None X \\<inter> Y))\n                         \\<in> seq_comp_failures P Q\n 3. \\<And>xsa ysa Y.\n       \\<lbrakk>xsa \\<in> sentences P; (ysa, Y) \\<in> failures Q;\n        ysa \\<noteq> []; xsa @ ysa = xs @ y # ys\\<rbrakk>\n       \\<Longrightarrow> (xs @ ipurge_tr I D (D y) ys,\n                          ipurge_ref I D (D y) ys Y)\n                         \\<in> seq_comp_failures P Q\n 4. \\<And>xsa X Y.\n       \\<lbrakk>(xs @ y # ys, X) \\<in> seq_comp_failures P Q;\n        (xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys X)\n        \\<in> seq_comp_failures P Q;\n        (xs @ y # ys, Y) \\<in> seq_comp_failures P Q;\n        (xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys Y)\n        \\<in> seq_comp_failures P Q;\n        xsa = xs @ y # ys\\<rbrakk>\n       \\<Longrightarrow> (xs @ ipurge_tr I D (D y) ys,\n                          ipurge_ref I D (D y) ys (X \\<union> Y))\n                         \\<in> seq_comp_failures P Q", "fix X"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>xsa X.\n       \\<lbrakk>xs @ y # ys \\<notin> sentences P;\n        (xs @ y # ys, X) \\<in> failures P; xsa = xs @ y # ys;\n        None \\<noteq> y; None \\<notin> set xs; None \\<notin> set ys\\<rbrakk>\n       \\<Longrightarrow> (xs @ ipurge_tr I D (D y) ys,\n                          ipurge_ref I D (D y) ys X)\n                         \\<in> seq_comp_failures P Q\n 2. \\<And>xsa X Y.\n       \\<lbrakk>xs @ y # ys \\<in> sentences P;\n        (xs @ y # ys, X) \\<in> failures P; ([], Y) \\<in> failures Q;\n        xsa = xs @ y # ys\\<rbrakk>\n       \\<Longrightarrow> (xs @ ipurge_tr I D (D y) ys,\n                          ipurge_ref I D (D y) ys\n                           (insert None X \\<inter> Y))\n                         \\<in> seq_comp_failures P Q\n 3. \\<And>xsa ysa Y.\n       \\<lbrakk>xsa \\<in> sentences P; (ysa, Y) \\<in> failures Q;\n        ysa \\<noteq> []; xsa @ ysa = xs @ y # ys\\<rbrakk>\n       \\<Longrightarrow> (xs @ ipurge_tr I D (D y) ys,\n                          ipurge_ref I D (D y) ys Y)\n                         \\<in> seq_comp_failures P Q\n 4. \\<And>xsa X Y.\n       \\<lbrakk>(xs @ y # ys, X) \\<in> seq_comp_failures P Q;\n        (xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys X)\n        \\<in> seq_comp_failures P Q;\n        (xs @ y # ys, Y) \\<in> seq_comp_failures P Q;\n        (xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys Y)\n        \\<in> seq_comp_failures P Q;\n        xsa = xs @ y # ys\\<rbrakk>\n       \\<Longrightarrow> (xs @ ipurge_tr I D (D y) ys,\n                          ipurge_ref I D (D y) ys (X \\<union> Y))\n                         \\<in> seq_comp_failures P Q", "assume\n   \"xs @ y # ys \\<notin> sentences P\" and\n   \"(xs @ y # ys, X) \\<in> failures P\" and\n   \"None \\<noteq> y\" and\n   \"None \\<notin> set xs\" and\n   \"None \\<notin> set ys\""], ["proof (state)\nthis:\n  xs @ y # ys \\<notin> sentences P\n  (xs @ y # ys, X) \\<in> failures P\n  None \\<noteq> y\n  None \\<notin> set xs\n  None \\<notin> set ys\n\ngoal (4 subgoals):\n 1. \\<And>xsa X.\n       \\<lbrakk>xs @ y # ys \\<notin> sentences P;\n        (xs @ y # ys, X) \\<in> failures P; xsa = xs @ y # ys;\n        None \\<noteq> y; None \\<notin> set xs; None \\<notin> set ys\\<rbrakk>\n       \\<Longrightarrow> (xs @ ipurge_tr I D (D y) ys,\n                          ipurge_ref I D (D y) ys X)\n                         \\<in> seq_comp_failures P Q\n 2. \\<And>xsa X Y.\n       \\<lbrakk>xs @ y # ys \\<in> sentences P;\n        (xs @ y # ys, X) \\<in> failures P; ([], Y) \\<in> failures Q;\n        xsa = xs @ y # ys\\<rbrakk>\n       \\<Longrightarrow> (xs @ ipurge_tr I D (D y) ys,\n                          ipurge_ref I D (D y) ys\n                           (insert None X \\<inter> Y))\n                         \\<in> seq_comp_failures P Q\n 3. \\<And>xsa ysa Y.\n       \\<lbrakk>xsa \\<in> sentences P; (ysa, Y) \\<in> failures Q;\n        ysa \\<noteq> []; xsa @ ysa = xs @ y # ys\\<rbrakk>\n       \\<Longrightarrow> (xs @ ipurge_tr I D (D y) ys,\n                          ipurge_ref I D (D y) ys Y)\n                         \\<in> seq_comp_failures P Q\n 4. \\<And>xsa X Y.\n       \\<lbrakk>(xs @ y # ys, X) \\<in> seq_comp_failures P Q;\n        (xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys X)\n        \\<in> seq_comp_failures P Q;\n        (xs @ y # ys, Y) \\<in> seq_comp_failures P Q;\n        (xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys Y)\n        \\<in> seq_comp_failures P Q;\n        xsa = xs @ y # ys\\<rbrakk>\n       \\<Longrightarrow> (xs @ ipurge_tr I D (D y) ys,\n                          ipurge_ref I D (D y) ys (X \\<union> Y))\n                         \\<in> seq_comp_failures P Q", "thus \"(xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys X)\n    \\<in> seq_comp_failures P Q\""], ["proof (prove)\nusing this:\n  xs @ y # ys \\<notin> sentences P\n  (xs @ y # ys, X) \\<in> failures P\n  None \\<noteq> y\n  None \\<notin> set xs\n  None \\<notin> set ys\n\ngoal (1 subgoal):\n 1. (xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys X)\n    \\<in> seq_comp_failures P Q", "by (rule seq_comp_secure_aux_1_case_1 [OF A C D])"], ["proof (state)\nthis:\n  (xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys X)\n  \\<in> seq_comp_failures P Q\n\ngoal (3 subgoals):\n 1. \\<And>xsa X Y.\n       \\<lbrakk>xs @ y # ys \\<in> sentences P;\n        (xs @ y # ys, X) \\<in> failures P; ([], Y) \\<in> failures Q;\n        xsa = xs @ y # ys\\<rbrakk>\n       \\<Longrightarrow> (xs @ ipurge_tr I D (D y) ys,\n                          ipurge_ref I D (D y) ys\n                           (insert None X \\<inter> Y))\n                         \\<in> seq_comp_failures P Q\n 2. \\<And>xsa ysa Y.\n       \\<lbrakk>xsa \\<in> sentences P; (ysa, Y) \\<in> failures Q;\n        ysa \\<noteq> []; xsa @ ysa = xs @ y # ys\\<rbrakk>\n       \\<Longrightarrow> (xs @ ipurge_tr I D (D y) ys,\n                          ipurge_ref I D (D y) ys Y)\n                         \\<in> seq_comp_failures P Q\n 3. \\<And>xsa X Y.\n       \\<lbrakk>(xs @ y # ys, X) \\<in> seq_comp_failures P Q;\n        (xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys X)\n        \\<in> seq_comp_failures P Q;\n        (xs @ y # ys, Y) \\<in> seq_comp_failures P Q;\n        (xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys Y)\n        \\<in> seq_comp_failures P Q;\n        xsa = xs @ y # ys\\<rbrakk>\n       \\<Longrightarrow> (xs @ ipurge_tr I D (D y) ys,\n                          ipurge_ref I D (D y) ys (X \\<union> Y))\n                         \\<in> seq_comp_failures P Q", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>xsa X Y.\n       \\<lbrakk>xs @ y # ys \\<in> sentences P;\n        (xs @ y # ys, X) \\<in> failures P; ([], Y) \\<in> failures Q;\n        xsa = xs @ y # ys\\<rbrakk>\n       \\<Longrightarrow> (xs @ ipurge_tr I D (D y) ys,\n                          ipurge_ref I D (D y) ys\n                           (insert None X \\<inter> Y))\n                         \\<in> seq_comp_failures P Q\n 2. \\<And>xsa ysa Y.\n       \\<lbrakk>xsa \\<in> sentences P; (ysa, Y) \\<in> failures Q;\n        ysa \\<noteq> []; xsa @ ysa = xs @ y # ys\\<rbrakk>\n       \\<Longrightarrow> (xs @ ipurge_tr I D (D y) ys,\n                          ipurge_ref I D (D y) ys Y)\n                         \\<in> seq_comp_failures P Q\n 3. \\<And>xsa X Y.\n       \\<lbrakk>(xs @ y # ys, X) \\<in> seq_comp_failures P Q;\n        (xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys X)\n        \\<in> seq_comp_failures P Q;\n        (xs @ y # ys, Y) \\<in> seq_comp_failures P Q;\n        (xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys Y)\n        \\<in> seq_comp_failures P Q;\n        xsa = xs @ y # ys\\<rbrakk>\n       \\<Longrightarrow> (xs @ ipurge_tr I D (D y) ys,\n                          ipurge_ref I D (D y) ys (X \\<union> Y))\n                         \\<in> seq_comp_failures P Q", "fix X Y"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>xsa X Y.\n       \\<lbrakk>xs @ y # ys \\<in> sentences P;\n        (xs @ y # ys, X) \\<in> failures P; ([], Y) \\<in> failures Q;\n        xsa = xs @ y # ys\\<rbrakk>\n       \\<Longrightarrow> (xs @ ipurge_tr I D (D y) ys,\n                          ipurge_ref I D (D y) ys\n                           (insert None X \\<inter> Y))\n                         \\<in> seq_comp_failures P Q\n 2. \\<And>xsa ysa Y.\n       \\<lbrakk>xsa \\<in> sentences P; (ysa, Y) \\<in> failures Q;\n        ysa \\<noteq> []; xsa @ ysa = xs @ y # ys\\<rbrakk>\n       \\<Longrightarrow> (xs @ ipurge_tr I D (D y) ys,\n                          ipurge_ref I D (D y) ys Y)\n                         \\<in> seq_comp_failures P Q\n 3. \\<And>xsa X Y.\n       \\<lbrakk>(xs @ y # ys, X) \\<in> seq_comp_failures P Q;\n        (xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys X)\n        \\<in> seq_comp_failures P Q;\n        (xs @ y # ys, Y) \\<in> seq_comp_failures P Q;\n        (xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys Y)\n        \\<in> seq_comp_failures P Q;\n        xsa = xs @ y # ys\\<rbrakk>\n       \\<Longrightarrow> (xs @ ipurge_tr I D (D y) ys,\n                          ipurge_ref I D (D y) ys (X \\<union> Y))\n                         \\<in> seq_comp_failures P Q", "assume\n   \"xs @ y # ys \\<in> sentences P\" and\n   \"(xs @ y # ys, X) \\<in> failures P\" and\n   \"([], Y) \\<in> failures Q\""], ["proof (state)\nthis:\n  xs @ y # ys \\<in> sentences P\n  (xs @ y # ys, X) \\<in> failures P\n  ([], Y) \\<in> failures Q\n\ngoal (3 subgoals):\n 1. \\<And>xsa X Y.\n       \\<lbrakk>xs @ y # ys \\<in> sentences P;\n        (xs @ y # ys, X) \\<in> failures P; ([], Y) \\<in> failures Q;\n        xsa = xs @ y # ys\\<rbrakk>\n       \\<Longrightarrow> (xs @ ipurge_tr I D (D y) ys,\n                          ipurge_ref I D (D y) ys\n                           (insert None X \\<inter> Y))\n                         \\<in> seq_comp_failures P Q\n 2. \\<And>xsa ysa Y.\n       \\<lbrakk>xsa \\<in> sentences P; (ysa, Y) \\<in> failures Q;\n        ysa \\<noteq> []; xsa @ ysa = xs @ y # ys\\<rbrakk>\n       \\<Longrightarrow> (xs @ ipurge_tr I D (D y) ys,\n                          ipurge_ref I D (D y) ys Y)\n                         \\<in> seq_comp_failures P Q\n 3. \\<And>xsa X Y.\n       \\<lbrakk>(xs @ y # ys, X) \\<in> seq_comp_failures P Q;\n        (xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys X)\n        \\<in> seq_comp_failures P Q;\n        (xs @ y # ys, Y) \\<in> seq_comp_failures P Q;\n        (xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys Y)\n        \\<in> seq_comp_failures P Q;\n        xsa = xs @ y # ys\\<rbrakk>\n       \\<Longrightarrow> (xs @ ipurge_tr I D (D y) ys,\n                          ipurge_ref I D (D y) ys (X \\<union> Y))\n                         \\<in> seq_comp_failures P Q", "thus \"(xs @ ipurge_tr I D (D y) ys,\n    ipurge_ref I D (D y) ys (insert None X \\<inter> Y)) \\<in> seq_comp_failures P Q\""], ["proof (prove)\nusing this:\n  xs @ y # ys \\<in> sentences P\n  (xs @ y # ys, X) \\<in> failures P\n  ([], Y) \\<in> failures Q\n\ngoal (1 subgoal):\n 1. (xs @ ipurge_tr I D (D y) ys,\n     ipurge_ref I D (D y) ys (insert None X \\<inter> Y))\n    \\<in> seq_comp_failures P Q", "by (rule seq_comp_secure_aux_1_case_2 [OF A C D E])"], ["proof (state)\nthis:\n  (xs @ ipurge_tr I D (D y) ys,\n   ipurge_ref I D (D y) ys (insert None X \\<inter> Y))\n  \\<in> seq_comp_failures P Q\n\ngoal (2 subgoals):\n 1. \\<And>xsa ysa Y.\n       \\<lbrakk>xsa \\<in> sentences P; (ysa, Y) \\<in> failures Q;\n        ysa \\<noteq> []; xsa @ ysa = xs @ y # ys\\<rbrakk>\n       \\<Longrightarrow> (xs @ ipurge_tr I D (D y) ys,\n                          ipurge_ref I D (D y) ys Y)\n                         \\<in> seq_comp_failures P Q\n 2. \\<And>xsa X Y.\n       \\<lbrakk>(xs @ y # ys, X) \\<in> seq_comp_failures P Q;\n        (xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys X)\n        \\<in> seq_comp_failures P Q;\n        (xs @ y # ys, Y) \\<in> seq_comp_failures P Q;\n        (xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys Y)\n        \\<in> seq_comp_failures P Q;\n        xsa = xs @ y # ys\\<rbrakk>\n       \\<Longrightarrow> (xs @ ipurge_tr I D (D y) ys,\n                          ipurge_ref I D (D y) ys (X \\<union> Y))\n                         \\<in> seq_comp_failures P Q", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>xsa ysa Y.\n       \\<lbrakk>xsa \\<in> sentences P; (ysa, Y) \\<in> failures Q;\n        ysa \\<noteq> []; xsa @ ysa = xs @ y # ys\\<rbrakk>\n       \\<Longrightarrow> (xs @ ipurge_tr I D (D y) ys,\n                          ipurge_ref I D (D y) ys Y)\n                         \\<in> seq_comp_failures P Q\n 2. \\<And>xsa X Y.\n       \\<lbrakk>(xs @ y # ys, X) \\<in> seq_comp_failures P Q;\n        (xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys X)\n        \\<in> seq_comp_failures P Q;\n        (xs @ y # ys, Y) \\<in> seq_comp_failures P Q;\n        (xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys Y)\n        \\<in> seq_comp_failures P Q;\n        xsa = xs @ y # ys\\<rbrakk>\n       \\<Longrightarrow> (xs @ ipurge_tr I D (D y) ys,\n                          ipurge_ref I D (D y) ys (X \\<union> Y))\n                         \\<in> seq_comp_failures P Q", "fix ws ys' Y"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>xsa ysa Y.\n       \\<lbrakk>xsa \\<in> sentences P; (ysa, Y) \\<in> failures Q;\n        ysa \\<noteq> []; xsa @ ysa = xs @ y # ys\\<rbrakk>\n       \\<Longrightarrow> (xs @ ipurge_tr I D (D y) ys,\n                          ipurge_ref I D (D y) ys Y)\n                         \\<in> seq_comp_failures P Q\n 2. \\<And>xsa X Y.\n       \\<lbrakk>(xs @ y # ys, X) \\<in> seq_comp_failures P Q;\n        (xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys X)\n        \\<in> seq_comp_failures P Q;\n        (xs @ y # ys, Y) \\<in> seq_comp_failures P Q;\n        (xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys Y)\n        \\<in> seq_comp_failures P Q;\n        xsa = xs @ y # ys\\<rbrakk>\n       \\<Longrightarrow> (xs @ ipurge_tr I D (D y) ys,\n                          ipurge_ref I D (D y) ys (X \\<union> Y))\n                         \\<in> seq_comp_failures P Q", "assume\n   \"ws \\<in> sentences P\" and\n   \"(ys', Y) \\<in> failures Q\" and\n   \"ws @ ys' = xs @ y # ys\""], ["proof (state)\nthis:\n  ws \\<in> sentences P\n  (ys', Y) \\<in> failures Q\n  ws @ ys' = xs @ y # ys\n\ngoal (2 subgoals):\n 1. \\<And>xsa ysa Y.\n       \\<lbrakk>xsa \\<in> sentences P; (ysa, Y) \\<in> failures Q;\n        ysa \\<noteq> []; xsa @ ysa = xs @ y # ys\\<rbrakk>\n       \\<Longrightarrow> (xs @ ipurge_tr I D (D y) ys,\n                          ipurge_ref I D (D y) ys Y)\n                         \\<in> seq_comp_failures P Q\n 2. \\<And>xsa X Y.\n       \\<lbrakk>(xs @ y # ys, X) \\<in> seq_comp_failures P Q;\n        (xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys X)\n        \\<in> seq_comp_failures P Q;\n        (xs @ y # ys, Y) \\<in> seq_comp_failures P Q;\n        (xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys Y)\n        \\<in> seq_comp_failures P Q;\n        xsa = xs @ y # ys\\<rbrakk>\n       \\<Longrightarrow> (xs @ ipurge_tr I D (D y) ys,\n                          ipurge_ref I D (D y) ys (X \\<union> Y))\n                         \\<in> seq_comp_failures P Q", "thus \"(xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys Y)\n    \\<in> seq_comp_failures P Q\""], ["proof (prove)\nusing this:\n  ws \\<in> sentences P\n  (ys', Y) \\<in> failures Q\n  ws @ ys' = xs @ y # ys\n\ngoal (1 subgoal):\n 1. (xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys Y)\n    \\<in> seq_comp_failures P Q", "by (rule seq_comp_secure_aux_1_case_3 [OF A B C D E])"], ["proof (state)\nthis:\n  (xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys Y)\n  \\<in> seq_comp_failures P Q\n\ngoal (1 subgoal):\n 1. \\<And>xsa X Y.\n       \\<lbrakk>(xs @ y # ys, X) \\<in> seq_comp_failures P Q;\n        (xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys X)\n        \\<in> seq_comp_failures P Q;\n        (xs @ y # ys, Y) \\<in> seq_comp_failures P Q;\n        (xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys Y)\n        \\<in> seq_comp_failures P Q;\n        xsa = xs @ y # ys\\<rbrakk>\n       \\<Longrightarrow> (xs @ ipurge_tr I D (D y) ys,\n                          ipurge_ref I D (D y) ys (X \\<union> Y))\n                         \\<in> seq_comp_failures P Q", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xsa X Y.\n       \\<lbrakk>(xs @ y # ys, X) \\<in> seq_comp_failures P Q;\n        (xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys X)\n        \\<in> seq_comp_failures P Q;\n        (xs @ y # ys, Y) \\<in> seq_comp_failures P Q;\n        (xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys Y)\n        \\<in> seq_comp_failures P Q;\n        xsa = xs @ y # ys\\<rbrakk>\n       \\<Longrightarrow> (xs @ ipurge_tr I D (D y) ys,\n                          ipurge_ref I D (D y) ys (X \\<union> Y))\n                         \\<in> seq_comp_failures P Q", "fix X Y"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xsa X Y.\n       \\<lbrakk>(xs @ y # ys, X) \\<in> seq_comp_failures P Q;\n        (xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys X)\n        \\<in> seq_comp_failures P Q;\n        (xs @ y # ys, Y) \\<in> seq_comp_failures P Q;\n        (xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys Y)\n        \\<in> seq_comp_failures P Q;\n        xsa = xs @ y # ys\\<rbrakk>\n       \\<Longrightarrow> (xs @ ipurge_tr I D (D y) ys,\n                          ipurge_ref I D (D y) ys (X \\<union> Y))\n                         \\<in> seq_comp_failures P Q", "assume\n   \"(xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys X)\n      \\<in> seq_comp_failures P Q\" and\n   \"(xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys Y)\n      \\<in> seq_comp_failures P Q\""], ["proof (state)\nthis:\n  (xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys X)\n  \\<in> seq_comp_failures P Q\n  (xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys Y)\n  \\<in> seq_comp_failures P Q\n\ngoal (1 subgoal):\n 1. \\<And>xsa X Y.\n       \\<lbrakk>(xs @ y # ys, X) \\<in> seq_comp_failures P Q;\n        (xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys X)\n        \\<in> seq_comp_failures P Q;\n        (xs @ y # ys, Y) \\<in> seq_comp_failures P Q;\n        (xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys Y)\n        \\<in> seq_comp_failures P Q;\n        xsa = xs @ y # ys\\<rbrakk>\n       \\<Longrightarrow> (xs @ ipurge_tr I D (D y) ys,\n                          ipurge_ref I D (D y) ys (X \\<union> Y))\n                         \\<in> seq_comp_failures P Q", "hence \"(xs @ ipurge_tr I D (D y) ys,\n    ipurge_ref I D (D y) ys X \\<union> ipurge_ref I D (D y) ys Y)\n    \\<in> seq_comp_failures P Q\""], ["proof (prove)\nusing this:\n  (xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys X)\n  \\<in> seq_comp_failures P Q\n  (xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys Y)\n  \\<in> seq_comp_failures P Q\n\ngoal (1 subgoal):\n 1. (xs @ ipurge_tr I D (D y) ys,\n     ipurge_ref I D (D y) ys X \\<union> ipurge_ref I D (D y) ys Y)\n    \\<in> seq_comp_failures P Q", "by (rule SCF_R4)"], ["proof (state)\nthis:\n  (xs @ ipurge_tr I D (D y) ys,\n   ipurge_ref I D (D y) ys X \\<union> ipurge_ref I D (D y) ys Y)\n  \\<in> seq_comp_failures P Q\n\ngoal (1 subgoal):\n 1. \\<And>xsa X Y.\n       \\<lbrakk>(xs @ y # ys, X) \\<in> seq_comp_failures P Q;\n        (xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys X)\n        \\<in> seq_comp_failures P Q;\n        (xs @ y # ys, Y) \\<in> seq_comp_failures P Q;\n        (xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys Y)\n        \\<in> seq_comp_failures P Q;\n        xsa = xs @ y # ys\\<rbrakk>\n       \\<Longrightarrow> (xs @ ipurge_tr I D (D y) ys,\n                          ipurge_ref I D (D y) ys (X \\<union> Y))\n                         \\<in> seq_comp_failures P Q", "thus \"(xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys (X \\<union> Y))\n    \\<in> seq_comp_failures P Q\""], ["proof (prove)\nusing this:\n  (xs @ ipurge_tr I D (D y) ys,\n   ipurge_ref I D (D y) ys X \\<union> ipurge_ref I D (D y) ys Y)\n  \\<in> seq_comp_failures P Q\n\ngoal (1 subgoal):\n 1. (xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys (X \\<union> Y))\n    \\<in> seq_comp_failures P Q", "by (simp add: ipurge_ref_distrib_union)"], ["proof (state)\nthis:\n  (xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys (X \\<union> Y))\n  \\<in> seq_comp_failures P Q\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma seq_comp_secure_1:\n  assumes\n    A: \"secure_termination I D\" and\n    B: \"ref_union_closed P\" and\n    C: \"sequential P\" and\n    D: \"secure P I D\" and\n    E: \"secure Q I D\"\n  shows \"(xs @ y # ys, Y) \\<in> seq_comp_failures P Q \\<Longrightarrow>\n    (xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys Y)\n      \\<in> seq_comp_failures P Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (xs @ y # ys, Y) \\<in> seq_comp_failures P Q \\<Longrightarrow>\n    (xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys Y)\n    \\<in> seq_comp_failures P Q", "by (rule seq_comp_secure_aux_1 [OF A B C D E, where ws = \"xs @ y # ys\"],\n simp_all)"], ["", "text \\<open>\n\\null\n\nThis completes the proof that the former requirement for noninterference security is satisfied, so\nit is the turn of the latter one. Again, rule induction on set @{term seq_comp_failures} is applied,\nand the closure of the failures of a secure process under intransitive purge is used to meet the\nproof obligations arising from rule \\<open>SCF_R3\\<close>. In more detail, rule induction is applied to the\ntrace into which the event is inserted, and then a case distinction is performed on the trace from\nwhich the event is extracted, using the expression of its refusal as union of a set of refusals\nderived previously.\n\n\\null\n\\<close>"], ["", "lemma seq_comp_secure_aux_2_case_1:\n  assumes\n    A: \"secure_termination I D\" and\n    B: \"sequential P\" and\n    C: \"secure P I D\" and\n    D: \"xs @ zs \\<notin> sentences P\" and\n    E: \"(xs @ zs, X) \\<in> failures P\" and\n    F: \"None \\<notin> set xs\" and\n    G: \"None \\<notin> set zs\" and\n    H: \"(xs @ [y], {}) \\<in> seq_comp_failures P Q\"\n  shows \"(xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs X)\n    \\<in> seq_comp_failures P Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs X)\n    \\<in> seq_comp_failures P Q", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs X)\n    \\<in> seq_comp_failures P Q", "have \"\\<exists>R. {} = (\\<Union>n \\<in> {..length (xs @ [y])}. \\<Union>W \\<in> R n. W) \\<and>\n    (\\<forall>W \\<in> R 0.\n      xs @ [y] \\<notin> sentences P \\<and> None \\<notin> set (xs @ [y]) \\<and>\n        (xs @ [y], W) \\<in> failures P \\<or>\n      xs @ [y] \\<in> sentences P \\<and> (\\<exists>U V. (xs @ [y], U) \\<in> failures P \\<and>\n        ([], V) \\<in> failures Q \\<and> W = insert None U \\<inter> V)) \\<and>\n    (\\<forall>n \\<in> {0<..length (xs @ [y])}. \\<forall>W \\<in> R n.\n      take (length (xs @ [y]) - n) (xs @ [y]) \\<in> sentences P \\<and>\n      (drop (length (xs @ [y]) - n) (xs @ [y]), W) \\<in> failures Q) \\<and>\n    (\\<exists>n \\<in> {..length (xs @ [y])}. \\<exists>W. W \\<in> R n)\"\n    (is \"\\<exists>R. ?T R\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>R.\n       {} = (\\<Union>n\\<le>length (xs @ [y]). \\<Union>W\\<in>R n. W) \\<and>\n       (\\<forall>W\\<in>R 0.\n           xs @ [y] \\<notin> sentences P \\<and>\n           None \\<notin> set (xs @ [y]) \\<and>\n           (xs @ [y], W) \\<in> failures P \\<or>\n           xs @ [y] \\<in> sentences P \\<and>\n           (\\<exists>U V.\n               (xs @ [y], U) \\<in> failures P \\<and>\n               ([], V) \\<in> failures Q \\<and>\n               W = insert None U \\<inter> V)) \\<and>\n       (\\<forall>n\\<in>{0<..length (xs @ [y])}.\n           \\<forall>W\\<in>R n.\n              take (length (xs @ [y]) - n) (xs @ [y])\n              \\<in> sentences P \\<and>\n              (drop (length (xs @ [y]) - n) (xs @ [y]), W)\n              \\<in> failures Q) \\<and>\n       (\\<exists>n\\<in>{..length (xs @ [y])}. \\<exists>W. W \\<in> R n)", "using H"], ["proof (prove)\nusing this:\n  (xs @ [y], {}) \\<in> seq_comp_failures P Q\n\ngoal (1 subgoal):\n 1. \\<exists>R.\n       {} = (\\<Union>n\\<le>length (xs @ [y]). \\<Union>W\\<in>R n. W) \\<and>\n       (\\<forall>W\\<in>R 0.\n           xs @ [y] \\<notin> sentences P \\<and>\n           None \\<notin> set (xs @ [y]) \\<and>\n           (xs @ [y], W) \\<in> failures P \\<or>\n           xs @ [y] \\<in> sentences P \\<and>\n           (\\<exists>U V.\n               (xs @ [y], U) \\<in> failures P \\<and>\n               ([], V) \\<in> failures Q \\<and>\n               W = insert None U \\<inter> V)) \\<and>\n       (\\<forall>n\\<in>{0<..length (xs @ [y])}.\n           \\<forall>W\\<in>R n.\n              take (length (xs @ [y]) - n) (xs @ [y])\n              \\<in> sentences P \\<and>\n              (drop (length (xs @ [y]) - n) (xs @ [y]), W)\n              \\<in> failures Q) \\<and>\n       (\\<exists>n\\<in>{..length (xs @ [y])}. \\<exists>W. W \\<in> R n)", "by (rule seq_comp_refusals_1)"], ["proof (state)\nthis:\n  \\<exists>R.\n     {} = (\\<Union>n\\<le>length (xs @ [y]). \\<Union>W\\<in>R n. W) \\<and>\n     (\\<forall>W\\<in>R 0.\n         xs @ [y] \\<notin> sentences P \\<and>\n         None \\<notin> set (xs @ [y]) \\<and>\n         (xs @ [y], W) \\<in> failures P \\<or>\n         xs @ [y] \\<in> sentences P \\<and>\n         (\\<exists>U V.\n             (xs @ [y], U) \\<in> failures P \\<and>\n             ([], V) \\<in> failures Q \\<and>\n             W = insert None U \\<inter> V)) \\<and>\n     (\\<forall>n\\<in>{0<..length (xs @ [y])}.\n         \\<forall>W\\<in>R n.\n            take (length (xs @ [y]) - n) (xs @ [y]) \\<in> sentences P \\<and>\n            (drop (length (xs @ [y]) - n) (xs @ [y]), W)\n            \\<in> failures Q) \\<and>\n     (\\<exists>n\\<in>{..length (xs @ [y])}. \\<exists>W. W \\<in> R n)\n\ngoal (1 subgoal):\n 1. (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs X)\n    \\<in> seq_comp_failures P Q", "then"], ["proof (chain)\npicking this:\n  \\<exists>R.\n     {} = (\\<Union>n\\<le>length (xs @ [y]). \\<Union>W\\<in>R n. W) \\<and>\n     (\\<forall>W\\<in>R 0.\n         xs @ [y] \\<notin> sentences P \\<and>\n         None \\<notin> set (xs @ [y]) \\<and>\n         (xs @ [y], W) \\<in> failures P \\<or>\n         xs @ [y] \\<in> sentences P \\<and>\n         (\\<exists>U V.\n             (xs @ [y], U) \\<in> failures P \\<and>\n             ([], V) \\<in> failures Q \\<and>\n             W = insert None U \\<inter> V)) \\<and>\n     (\\<forall>n\\<in>{0<..length (xs @ [y])}.\n         \\<forall>W\\<in>R n.\n            take (length (xs @ [y]) - n) (xs @ [y]) \\<in> sentences P \\<and>\n            (drop (length (xs @ [y]) - n) (xs @ [y]), W)\n            \\<in> failures Q) \\<and>\n     (\\<exists>n\\<in>{..length (xs @ [y])}. \\<exists>W. W \\<in> R n)", "obtain R where I: \"?T R\""], ["proof (prove)\nusing this:\n  \\<exists>R.\n     {} = (\\<Union>n\\<le>length (xs @ [y]). \\<Union>W\\<in>R n. W) \\<and>\n     (\\<forall>W\\<in>R 0.\n         xs @ [y] \\<notin> sentences P \\<and>\n         None \\<notin> set (xs @ [y]) \\<and>\n         (xs @ [y], W) \\<in> failures P \\<or>\n         xs @ [y] \\<in> sentences P \\<and>\n         (\\<exists>U V.\n             (xs @ [y], U) \\<in> failures P \\<and>\n             ([], V) \\<in> failures Q \\<and>\n             W = insert None U \\<inter> V)) \\<and>\n     (\\<forall>n\\<in>{0<..length (xs @ [y])}.\n         \\<forall>W\\<in>R n.\n            take (length (xs @ [y]) - n) (xs @ [y]) \\<in> sentences P \\<and>\n            (drop (length (xs @ [y]) - n) (xs @ [y]), W)\n            \\<in> failures Q) \\<and>\n     (\\<exists>n\\<in>{..length (xs @ [y])}. \\<exists>W. W \\<in> R n)\n\ngoal (1 subgoal):\n 1. (\\<And>R.\n        {} = (\\<Union>n\\<le>length (xs @ [y]). \\<Union>W\\<in>R n. W) \\<and>\n        (\\<forall>W\\<in>R 0.\n            xs @ [y] \\<notin> sentences P \\<and>\n            None \\<notin> set (xs @ [y]) \\<and>\n            (xs @ [y], W) \\<in> failures P \\<or>\n            xs @ [y] \\<in> sentences P \\<and>\n            (\\<exists>U V.\n                (xs @ [y], U) \\<in> failures P \\<and>\n                ([], V) \\<in> failures Q \\<and>\n                W = insert None U \\<inter> V)) \\<and>\n        (\\<forall>n\\<in>{0<..length (xs @ [y])}.\n            \\<forall>W\\<in>R n.\n               take (length (xs @ [y]) - n) (xs @ [y])\n               \\<in> sentences P \\<and>\n               (drop (length (xs @ [y]) - n) (xs @ [y]), W)\n               \\<in> failures Q) \\<and>\n        (\\<exists>n\\<in>{..length (xs @ [y])}.\n            \\<exists>W. W \\<in> R n) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  {} = (\\<Union>n\\<le>length (xs @ [y]). \\<Union>W\\<in>R n. W) \\<and>\n  (\\<forall>W\\<in>R 0.\n      xs @ [y] \\<notin> sentences P \\<and>\n      None \\<notin> set (xs @ [y]) \\<and>\n      (xs @ [y], W) \\<in> failures P \\<or>\n      xs @ [y] \\<in> sentences P \\<and>\n      (\\<exists>U V.\n          (xs @ [y], U) \\<in> failures P \\<and>\n          ([], V) \\<in> failures Q \\<and>\n          W = insert None U \\<inter> V)) \\<and>\n  (\\<forall>n\\<in>{0<..length (xs @ [y])}.\n      \\<forall>W\\<in>R n.\n         take (length (xs @ [y]) - n) (xs @ [y]) \\<in> sentences P \\<and>\n         (drop (length (xs @ [y]) - n) (xs @ [y]), W)\n         \\<in> failures Q) \\<and>\n  (\\<exists>n\\<in>{..length (xs @ [y])}. \\<exists>W. W \\<in> R n)\n\ngoal (1 subgoal):\n 1. (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs X)\n    \\<in> seq_comp_failures P Q", "hence \"\\<exists>n \\<in> {..length (xs @ [y])}. \\<exists>W. W \\<in> R n\""], ["proof (prove)\nusing this:\n  {} = (\\<Union>n\\<le>length (xs @ [y]). \\<Union>W\\<in>R n. W) \\<and>\n  (\\<forall>W\\<in>R 0.\n      xs @ [y] \\<notin> sentences P \\<and>\n      None \\<notin> set (xs @ [y]) \\<and>\n      (xs @ [y], W) \\<in> failures P \\<or>\n      xs @ [y] \\<in> sentences P \\<and>\n      (\\<exists>U V.\n          (xs @ [y], U) \\<in> failures P \\<and>\n          ([], V) \\<in> failures Q \\<and>\n          W = insert None U \\<inter> V)) \\<and>\n  (\\<forall>n\\<in>{0<..length (xs @ [y])}.\n      \\<forall>W\\<in>R n.\n         take (length (xs @ [y]) - n) (xs @ [y]) \\<in> sentences P \\<and>\n         (drop (length (xs @ [y]) - n) (xs @ [y]), W)\n         \\<in> failures Q) \\<and>\n  (\\<exists>n\\<in>{..length (xs @ [y])}. \\<exists>W. W \\<in> R n)\n\ngoal (1 subgoal):\n 1. \\<exists>n\\<in>{..length (xs @ [y])}. \\<exists>W. W \\<in> R n", "by simp"], ["proof (state)\nthis:\n  \\<exists>n\\<in>{..length (xs @ [y])}. \\<exists>W. W \\<in> R n\n\ngoal (1 subgoal):\n 1. (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs X)\n    \\<in> seq_comp_failures P Q", "moreover"], ["proof (state)\nthis:\n  \\<exists>n\\<in>{..length (xs @ [y])}. \\<exists>W. W \\<in> R n\n\ngoal (1 subgoal):\n 1. (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs X)\n    \\<in> seq_comp_failures P Q", "have \"\\<forall>n \\<in> {0<..length (xs @ [y])}. R n = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n\\<in>{0<..length (xs @ [y])}. R n = {}", "proof (rule ballI, rule equals0I)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n ya.\n       \\<lbrakk>n \\<in> {0<..length (xs @ [y])}; ya \\<in> R n\\<rbrakk>\n       \\<Longrightarrow> False", "fix n W"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n ya.\n       \\<lbrakk>n \\<in> {0<..length (xs @ [y])}; ya \\<in> R n\\<rbrakk>\n       \\<Longrightarrow> False", "assume J: \"n \\<in> {0<..length (xs @ [y])}\""], ["proof (state)\nthis:\n  n \\<in> {0<..length (xs @ [y])}\n\ngoal (1 subgoal):\n 1. \\<And>n ya.\n       \\<lbrakk>n \\<in> {0<..length (xs @ [y])}; ya \\<in> R n\\<rbrakk>\n       \\<Longrightarrow> False", "hence \"\\<forall>W \\<in> R n. take (length (xs @ [y]) - n) (xs @ [y]) \\<in> sentences P\""], ["proof (prove)\nusing this:\n  n \\<in> {0<..length (xs @ [y])}\n\ngoal (1 subgoal):\n 1. \\<forall>W\\<in>R n.\n       take (length (xs @ [y]) - n) (xs @ [y]) \\<in> sentences P", "using I"], ["proof (prove)\nusing this:\n  n \\<in> {0<..length (xs @ [y])}\n  {} = (\\<Union>n\\<le>length (xs @ [y]). \\<Union>W\\<in>R n. W) \\<and>\n  (\\<forall>W\\<in>R 0.\n      xs @ [y] \\<notin> sentences P \\<and>\n      None \\<notin> set (xs @ [y]) \\<and>\n      (xs @ [y], W) \\<in> failures P \\<or>\n      xs @ [y] \\<in> sentences P \\<and>\n      (\\<exists>U V.\n          (xs @ [y], U) \\<in> failures P \\<and>\n          ([], V) \\<in> failures Q \\<and>\n          W = insert None U \\<inter> V)) \\<and>\n  (\\<forall>n\\<in>{0<..length (xs @ [y])}.\n      \\<forall>W\\<in>R n.\n         take (length (xs @ [y]) - n) (xs @ [y]) \\<in> sentences P \\<and>\n         (drop (length (xs @ [y]) - n) (xs @ [y]), W)\n         \\<in> failures Q) \\<and>\n  (\\<exists>n\\<in>{..length (xs @ [y])}. \\<exists>W. W \\<in> R n)\n\ngoal (1 subgoal):\n 1. \\<forall>W\\<in>R n.\n       take (length (xs @ [y]) - n) (xs @ [y]) \\<in> sentences P", "by simp"], ["proof (state)\nthis:\n  \\<forall>W\\<in>R n.\n     take (length (xs @ [y]) - n) (xs @ [y]) \\<in> sentences P\n\ngoal (1 subgoal):\n 1. \\<And>n ya.\n       \\<lbrakk>n \\<in> {0<..length (xs @ [y])}; ya \\<in> R n\\<rbrakk>\n       \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  \\<forall>W\\<in>R n.\n     take (length (xs @ [y]) - n) (xs @ [y]) \\<in> sentences P\n\ngoal (1 subgoal):\n 1. \\<And>n ya.\n       \\<lbrakk>n \\<in> {0<..length (xs @ [y])}; ya \\<in> R n\\<rbrakk>\n       \\<Longrightarrow> False", "assume \"W \\<in> R n\""], ["proof (state)\nthis:\n  W \\<in> R n\n\ngoal (1 subgoal):\n 1. \\<And>n ya.\n       \\<lbrakk>n \\<in> {0<..length (xs @ [y])}; ya \\<in> R n\\<rbrakk>\n       \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>W\\<in>R n.\n     take (length (xs @ [y]) - n) (xs @ [y]) \\<in> sentences P\n  W \\<in> R n", "have \"take (length (xs @ [y]) - n) (xs @ [y]) \\<in> sentences P\""], ["proof (prove)\nusing this:\n  \\<forall>W\\<in>R n.\n     take (length (xs @ [y]) - n) (xs @ [y]) \\<in> sentences P\n  W \\<in> R n\n\ngoal (1 subgoal):\n 1. take (length (xs @ [y]) - n) (xs @ [y]) \\<in> sentences P", ".."], ["proof (state)\nthis:\n  take (length (xs @ [y]) - n) (xs @ [y]) \\<in> sentences P\n\ngoal (1 subgoal):\n 1. \\<And>n ya.\n       \\<lbrakk>n \\<in> {0<..length (xs @ [y])}; ya \\<in> R n\\<rbrakk>\n       \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  take (length (xs @ [y]) - n) (xs @ [y]) \\<in> sentences P\n\ngoal (1 subgoal):\n 1. \\<And>n ya.\n       \\<lbrakk>n \\<in> {0<..length (xs @ [y])}; ya \\<in> R n\\<rbrakk>\n       \\<Longrightarrow> False", "have \"take (length (xs @ [y]) - n) (xs @ [y]) =\n      take (length (xs @ [y]) - n) (xs @ zs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. take (length (xs @ [y]) - n) (xs @ [y]) =\n    take (length (xs @ [y]) - n) (xs @ zs)", "using J"], ["proof (prove)\nusing this:\n  n \\<in> {0<..length (xs @ [y])}\n\ngoal (1 subgoal):\n 1. take (length (xs @ [y]) - n) (xs @ [y]) =\n    take (length (xs @ [y]) - n) (xs @ zs)", "by simp"], ["proof (state)\nthis:\n  take (length (xs @ [y]) - n) (xs @ [y]) =\n  take (length (xs @ [y]) - n) (xs @ zs)\n\ngoal (1 subgoal):\n 1. \\<And>n ya.\n       \\<lbrakk>n \\<in> {0<..length (xs @ [y])}; ya \\<in> R n\\<rbrakk>\n       \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  take (length (xs @ [y]) - n) (xs @ [y]) \\<in> sentences P\n  take (length (xs @ [y]) - n) (xs @ [y]) =\n  take (length (xs @ [y]) - n) (xs @ zs)", "have K: \"take (length (xs @ [y]) - n) (xs @ zs) \\<in> sentences P\""], ["proof (prove)\nusing this:\n  take (length (xs @ [y]) - n) (xs @ [y]) \\<in> sentences P\n  take (length (xs @ [y]) - n) (xs @ [y]) =\n  take (length (xs @ [y]) - n) (xs @ zs)\n\ngoal (1 subgoal):\n 1. take (length (xs @ [y]) - n) (xs @ zs) \\<in> sentences P", "by simp"], ["proof (state)\nthis:\n  take (length (xs @ [y]) - n) (xs @ zs) \\<in> sentences P\n\ngoal (1 subgoal):\n 1. \\<And>n ya.\n       \\<lbrakk>n \\<in> {0<..length (xs @ [y])}; ya \\<in> R n\\<rbrakk>\n       \\<Longrightarrow> False", "show False"], ["proof (prove)\ngoal (1 subgoal):\n 1. False", "proof (cases \"drop (length (xs @ [y]) - n) (xs @ zs)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. drop (length (xs @ [y]) - n) (xs @ zs) = [] \\<Longrightarrow> False\n 2. \\<And>a list.\n       drop (length (xs @ [y]) - n) (xs @ zs) = a # list \\<Longrightarrow>\n       False", "case Nil"], ["proof (state)\nthis:\n  drop (length (xs @ [y]) - n) (xs @ zs) = []\n\ngoal (2 subgoals):\n 1. drop (length (xs @ [y]) - n) (xs @ zs) = [] \\<Longrightarrow> False\n 2. \\<And>a list.\n       drop (length (xs @ [y]) - n) (xs @ zs) = a # list \\<Longrightarrow>\n       False", "hence \"xs @ zs \\<in> sentences P\""], ["proof (prove)\nusing this:\n  drop (length (xs @ [y]) - n) (xs @ zs) = []\n\ngoal (1 subgoal):\n 1. xs @ zs \\<in> sentences P", "using K"], ["proof (prove)\nusing this:\n  drop (length (xs @ [y]) - n) (xs @ zs) = []\n  take (length (xs @ [y]) - n) (xs @ zs) \\<in> sentences P\n\ngoal (1 subgoal):\n 1. xs @ zs \\<in> sentences P", "by simp"], ["proof (state)\nthis:\n  xs @ zs \\<in> sentences P\n\ngoal (2 subgoals):\n 1. drop (length (xs @ [y]) - n) (xs @ zs) = [] \\<Longrightarrow> False\n 2. \\<And>a list.\n       drop (length (xs @ [y]) - n) (xs @ zs) = a # list \\<Longrightarrow>\n       False", "thus False"], ["proof (prove)\nusing this:\n  xs @ zs \\<in> sentences P\n\ngoal (1 subgoal):\n 1. False", "using D"], ["proof (prove)\nusing this:\n  xs @ zs \\<in> sentences P\n  xs @ zs \\<notin> sentences P\n\ngoal (1 subgoal):\n 1. False", "by contradiction"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       drop (length (xs @ [y]) - n) (xs @ zs) = a # list \\<Longrightarrow>\n       False", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a list.\n       drop (length (xs @ [y]) - n) (xs @ zs) = a # list \\<Longrightarrow>\n       False", "case (Cons v vs)"], ["proof (state)\nthis:\n  drop (length (xs @ [y]) - n) (xs @ zs) = v # vs\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       drop (length (xs @ [y]) - n) (xs @ zs) = a # list \\<Longrightarrow>\n       False", "moreover"], ["proof (state)\nthis:\n  drop (length (xs @ [y]) - n) (xs @ zs) = v # vs\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       drop (length (xs @ [y]) - n) (xs @ zs) = a # list \\<Longrightarrow>\n       False", "have \"xs @ zs = take (length (xs @ [y]) - n) (xs @ zs) @\n        drop (length (xs @ [y]) - n) (xs @ zs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs @ zs =\n    take (length (xs @ [y]) - n) (xs @ zs) @\n    drop (length (xs @ [y]) - n) (xs @ zs)", "by (simp only: append_take_drop_id)"], ["proof (state)\nthis:\n  xs @ zs =\n  take (length (xs @ [y]) - n) (xs @ zs) @\n  drop (length (xs @ [y]) - n) (xs @ zs)\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       drop (length (xs @ [y]) - n) (xs @ zs) = a # list \\<Longrightarrow>\n       False", "ultimately"], ["proof (chain)\npicking this:\n  drop (length (xs @ [y]) - n) (xs @ zs) = v # vs\n  xs @ zs =\n  take (length (xs @ [y]) - n) (xs @ zs) @\n  drop (length (xs @ [y]) - n) (xs @ zs)", "have L: \"xs @ zs =\n        take (length (xs @ [y]) - n) (xs @ zs) @ v # vs\""], ["proof (prove)\nusing this:\n  drop (length (xs @ [y]) - n) (xs @ zs) = v # vs\n  xs @ zs =\n  take (length (xs @ [y]) - n) (xs @ zs) @\n  drop (length (xs @ [y]) - n) (xs @ zs)\n\ngoal (1 subgoal):\n 1. xs @ zs = take (length (xs @ [y]) - n) (xs @ zs) @ v # vs", "by (simp del: take_append)"], ["proof (state)\nthis:\n  xs @ zs = take (length (xs @ [y]) - n) (xs @ zs) @ v # vs\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       drop (length (xs @ [y]) - n) (xs @ zs) = a # list \\<Longrightarrow>\n       False", "hence \"(take (length (xs @ [y]) - n) (xs @ zs) @ v # vs, X)\n        \\<in> failures P\""], ["proof (prove)\nusing this:\n  xs @ zs = take (length (xs @ [y]) - n) (xs @ zs) @ v # vs\n\ngoal (1 subgoal):\n 1. (take (length (xs @ [y]) - n) (xs @ zs) @ v # vs, X) \\<in> failures P", "using E"], ["proof (prove)\nusing this:\n  xs @ zs = take (length (xs @ [y]) - n) (xs @ zs) @ v # vs\n  (xs @ zs, X) \\<in> failures P\n\ngoal (1 subgoal):\n 1. (take (length (xs @ [y]) - n) (xs @ zs) @ v # vs, X) \\<in> failures P", "by (simp del: take_append)"], ["proof (state)\nthis:\n  (take (length (xs @ [y]) - n) (xs @ zs) @ v # vs, X) \\<in> failures P\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       drop (length (xs @ [y]) - n) (xs @ zs) = a # list \\<Longrightarrow>\n       False", "hence \"take (length (xs @ [y]) - n) (xs @ zs) @ v # vs \\<in> traces P\""], ["proof (prove)\nusing this:\n  (take (length (xs @ [y]) - n) (xs @ zs) @ v # vs, X) \\<in> failures P\n\ngoal (1 subgoal):\n 1. take (length (xs @ [y]) - n) (xs @ zs) @ v # vs \\<in> traces P", "by (rule failures_traces)"], ["proof (state)\nthis:\n  take (length (xs @ [y]) - n) (xs @ zs) @ v # vs \\<in> traces P\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       drop (length (xs @ [y]) - n) (xs @ zs) = a # list \\<Longrightarrow>\n       False", "with B and K"], ["proof (chain)\npicking this:\n  sequential P\n  take (length (xs @ [y]) - n) (xs @ zs) \\<in> sentences P\n  take (length (xs @ [y]) - n) (xs @ zs) @ v # vs \\<in> traces P", "have \"v = None\""], ["proof (prove)\nusing this:\n  sequential P\n  take (length (xs @ [y]) - n) (xs @ zs) \\<in> sentences P\n  take (length (xs @ [y]) - n) (xs @ zs) @ v # vs \\<in> traces P\n\ngoal (1 subgoal):\n 1. v = None", "by (rule seq_sentences_none)"], ["proof (state)\nthis:\n  v = None\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       drop (length (xs @ [y]) - n) (xs @ zs) = a # list \\<Longrightarrow>\n       False", "moreover"], ["proof (state)\nthis:\n  v = None\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       drop (length (xs @ [y]) - n) (xs @ zs) = a # list \\<Longrightarrow>\n       False", "have \"None \\<notin> set (xs @ zs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. None \\<notin> set (xs @ zs)", "using F and G"], ["proof (prove)\nusing this:\n  None \\<notin> set xs\n  None \\<notin> set zs\n\ngoal (1 subgoal):\n 1. None \\<notin> set (xs @ zs)", "by simp"], ["proof (state)\nthis:\n  None \\<notin> set (xs @ zs)\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       drop (length (xs @ [y]) - n) (xs @ zs) = a # list \\<Longrightarrow>\n       False", "hence \"None \\<notin> set (take (length (xs @ [y]) - n) (xs @ zs) @ v # vs)\""], ["proof (prove)\nusing this:\n  None \\<notin> set (xs @ zs)\n\ngoal (1 subgoal):\n 1. None \\<notin> set (take (length (xs @ [y]) - n) (xs @ zs) @ v # vs)", "by (subst (asm) L)"], ["proof (state)\nthis:\n  None \\<notin> set (take (length (xs @ [y]) - n) (xs @ zs) @ v # vs)\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       drop (length (xs @ [y]) - n) (xs @ zs) = a # list \\<Longrightarrow>\n       False", "hence \"v \\<noteq> None\""], ["proof (prove)\nusing this:\n  None \\<notin> set (take (length (xs @ [y]) - n) (xs @ zs) @ v # vs)\n\ngoal (1 subgoal):\n 1. v \\<noteq> None", "by (rule_tac not_sym, simp)"], ["proof (state)\nthis:\n  v \\<noteq> None\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       drop (length (xs @ [y]) - n) (xs @ zs) = a # list \\<Longrightarrow>\n       False", "ultimately"], ["proof (chain)\npicking this:\n  v = None\n  v \\<noteq> None", "show False"], ["proof (prove)\nusing this:\n  v = None\n  v \\<noteq> None\n\ngoal (1 subgoal):\n 1. False", "by contradiction"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>n\\<in>{0<..length (xs @ [y])}. R n = {}\n\ngoal (1 subgoal):\n 1. (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs X)\n    \\<in> seq_comp_failures P Q", "ultimately"], ["proof (chain)\npicking this:\n  \\<exists>n\\<in>{..length (xs @ [y])}. \\<exists>W. W \\<in> R n\n  \\<forall>n\\<in>{0<..length (xs @ [y])}. R n = {}", "have \"\\<exists>W. W \\<in> R 0\""], ["proof (prove)\nusing this:\n  \\<exists>n\\<in>{..length (xs @ [y])}. \\<exists>W. W \\<in> R n\n  \\<forall>n\\<in>{0<..length (xs @ [y])}. R n = {}\n\ngoal (1 subgoal):\n 1. \\<exists>W. W \\<in> R 0", "proof simp"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<exists>n\\<in>{..Suc (length xs)}. \\<exists>W. W \\<in> R n;\n     \\<forall>n\\<in>{0<..Suc (length xs)}. R n = {}\\<rbrakk>\n    \\<Longrightarrow> \\<exists>W. W \\<in> R 0", "assume \"\\<exists>n \\<in> {..Suc (length xs)}. \\<exists>W. W \\<in> R n\""], ["proof (state)\nthis:\n  \\<exists>n\\<in>{..Suc (length xs)}. \\<exists>W. W \\<in> R n\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<exists>n\\<in>{..Suc (length xs)}. \\<exists>W. W \\<in> R n;\n     \\<forall>n\\<in>{0<..Suc (length xs)}. R n = {}\\<rbrakk>\n    \\<Longrightarrow> \\<exists>W. W \\<in> R 0", "then"], ["proof (chain)\npicking this:\n  \\<exists>n\\<in>{..Suc (length xs)}. \\<exists>W. W \\<in> R n", "obtain n where J: \"n \\<in> {..Suc (length xs)}\" and K: \"\\<exists>W. W \\<in> R n\""], ["proof (prove)\nusing this:\n  \\<exists>n\\<in>{..Suc (length xs)}. \\<exists>W. W \\<in> R n\n\ngoal (1 subgoal):\n 1. (\\<And>n.\n        \\<lbrakk>n \\<in> {..Suc (length xs)};\n         \\<exists>W. W \\<in> R n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  n \\<in> {..Suc (length xs)}\n  \\<exists>W. W \\<in> R n\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<exists>n\\<in>{..Suc (length xs)}. \\<exists>W. W \\<in> R n;\n     \\<forall>n\\<in>{0<..Suc (length xs)}. R n = {}\\<rbrakk>\n    \\<Longrightarrow> \\<exists>W. W \\<in> R 0", "assume L: \"\\<forall>n \\<in> {0<..Suc (length xs)}. R n = {}\""], ["proof (state)\nthis:\n  \\<forall>n\\<in>{0<..Suc (length xs)}. R n = {}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<exists>n\\<in>{..Suc (length xs)}. \\<exists>W. W \\<in> R n;\n     \\<forall>n\\<in>{0<..Suc (length xs)}. R n = {}\\<rbrakk>\n    \\<Longrightarrow> \\<exists>W. W \\<in> R 0", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>W. W \\<in> R 0", "proof (cases n)"], ["proof (state)\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow> \\<exists>W. W \\<in> R 0\n 2. \\<And>nat. n = Suc nat \\<Longrightarrow> \\<exists>W. W \\<in> R 0", "case 0"], ["proof (state)\nthis:\n  n = 0\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow> \\<exists>W. W \\<in> R 0\n 2. \\<And>nat. n = Suc nat \\<Longrightarrow> \\<exists>W. W \\<in> R 0", "thus ?thesis"], ["proof (prove)\nusing this:\n  n = 0\n\ngoal (1 subgoal):\n 1. \\<exists>W. W \\<in> R 0", "using K"], ["proof (prove)\nusing this:\n  n = 0\n  \\<exists>W. W \\<in> R n\n\ngoal (1 subgoal):\n 1. \\<exists>W. W \\<in> R 0", "by simp"], ["proof (state)\nthis:\n  \\<exists>W. W \\<in> R 0\n\ngoal (1 subgoal):\n 1. \\<And>nat. n = Suc nat \\<Longrightarrow> \\<exists>W. W \\<in> R 0", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>nat. n = Suc nat \\<Longrightarrow> \\<exists>W. W \\<in> R 0", "case (Suc m)"], ["proof (state)\nthis:\n  n = Suc m\n\ngoal (1 subgoal):\n 1. \\<And>nat. n = Suc nat \\<Longrightarrow> \\<exists>W. W \\<in> R 0", "obtain W where \"W \\<in> R n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>W. W \\<in> R n \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "using K"], ["proof (prove)\nusing this:\n  \\<exists>W. W \\<in> R n\n\ngoal (1 subgoal):\n 1. (\\<And>W. W \\<in> R n \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", ".."], ["proof (state)\nthis:\n  W \\<in> R n\n\ngoal (1 subgoal):\n 1. \\<And>nat. n = Suc nat \\<Longrightarrow> \\<exists>W. W \\<in> R 0", "moreover"], ["proof (state)\nthis:\n  W \\<in> R n\n\ngoal (1 subgoal):\n 1. \\<And>nat. n = Suc nat \\<Longrightarrow> \\<exists>W. W \\<in> R 0", "have \"0 < n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < n", "using Suc"], ["proof (prove)\nusing this:\n  n = Suc m\n\ngoal (1 subgoal):\n 1. 0 < n", "by simp"], ["proof (state)\nthis:\n  0 < n\n\ngoal (1 subgoal):\n 1. \\<And>nat. n = Suc nat \\<Longrightarrow> \\<exists>W. W \\<in> R 0", "hence \"n \\<in> {0<..Suc (length xs)}\""], ["proof (prove)\nusing this:\n  0 < n\n\ngoal (1 subgoal):\n 1. n \\<in> {0<..Suc (length xs)}", "using J"], ["proof (prove)\nusing this:\n  0 < n\n  n \\<in> {..Suc (length xs)}\n\ngoal (1 subgoal):\n 1. n \\<in> {0<..Suc (length xs)}", "by simp"], ["proof (state)\nthis:\n  n \\<in> {0<..Suc (length xs)}\n\ngoal (1 subgoal):\n 1. \\<And>nat. n = Suc nat \\<Longrightarrow> \\<exists>W. W \\<in> R 0", "with L"], ["proof (chain)\npicking this:\n  \\<forall>n\\<in>{0<..Suc (length xs)}. R n = {}\n  n \\<in> {0<..Suc (length xs)}", "have \"R n = {}\""], ["proof (prove)\nusing this:\n  \\<forall>n\\<in>{0<..Suc (length xs)}. R n = {}\n  n \\<in> {0<..Suc (length xs)}\n\ngoal (1 subgoal):\n 1. R n = {}", ".."], ["proof (state)\nthis:\n  R n = {}\n\ngoal (1 subgoal):\n 1. \\<And>nat. n = Suc nat \\<Longrightarrow> \\<exists>W. W \\<in> R 0", "hence \"W \\<notin> R n\""], ["proof (prove)\nusing this:\n  R n = {}\n\ngoal (1 subgoal):\n 1. W \\<notin> R n", "by (rule equals0D)"], ["proof (state)\nthis:\n  W \\<notin> R n\n\ngoal (1 subgoal):\n 1. \\<And>nat. n = Suc nat \\<Longrightarrow> \\<exists>W. W \\<in> R 0", "ultimately"], ["proof (chain)\npicking this:\n  W \\<in> R n\n  W \\<notin> R n", "show ?thesis"], ["proof (prove)\nusing this:\n  W \\<in> R n\n  W \\<notin> R n\n\ngoal (1 subgoal):\n 1. \\<exists>W. W \\<in> R 0", "by contradiction"], ["proof (state)\nthis:\n  \\<exists>W. W \\<in> R 0\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>W. W \\<in> R 0\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>W. W \\<in> R 0\n\ngoal (1 subgoal):\n 1. (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs X)\n    \\<in> seq_comp_failures P Q", "then"], ["proof (chain)\npicking this:\n  \\<exists>W. W \\<in> R 0", "obtain W where J: \"W \\<in> R 0\""], ["proof (prove)\nusing this:\n  \\<exists>W. W \\<in> R 0\n\ngoal (1 subgoal):\n 1. (\\<And>W. W \\<in> R 0 \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", ".."], ["proof (state)\nthis:\n  W \\<in> R 0\n\ngoal (1 subgoal):\n 1. (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs X)\n    \\<in> seq_comp_failures P Q", "have \"\\<forall>W \\<in> R 0.\n    xs @ [y] \\<notin> sentences P \\<and>\n      None \\<notin> set (xs @ [y]) \\<and> (xs @ [y], W) \\<in> failures P \\<or>\n    xs @ [y] \\<in> sentences P \\<and>\n      (\\<exists>U V. (xs @ [y], U) \\<in> failures P \\<and> ([], V) \\<in> failures Q \\<and>\n        W = insert None U \\<inter> V)\"\n    (is \"\\<forall>W \\<in> R 0. ?T W\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>W\\<in>R 0.\n       xs @ [y] \\<notin> sentences P \\<and>\n       None \\<notin> set (xs @ [y]) \\<and>\n       (xs @ [y], W) \\<in> failures P \\<or>\n       xs @ [y] \\<in> sentences P \\<and>\n       (\\<exists>U V.\n           (xs @ [y], U) \\<in> failures P \\<and>\n           ([], V) \\<in> failures Q \\<and> W = insert None U \\<inter> V)", "using I"], ["proof (prove)\nusing this:\n  {} = (\\<Union>n\\<le>length (xs @ [y]). \\<Union>W\\<in>R n. W) \\<and>\n  (\\<forall>W\\<in>R 0.\n      xs @ [y] \\<notin> sentences P \\<and>\n      None \\<notin> set (xs @ [y]) \\<and>\n      (xs @ [y], W) \\<in> failures P \\<or>\n      xs @ [y] \\<in> sentences P \\<and>\n      (\\<exists>U V.\n          (xs @ [y], U) \\<in> failures P \\<and>\n          ([], V) \\<in> failures Q \\<and>\n          W = insert None U \\<inter> V)) \\<and>\n  (\\<forall>n\\<in>{0<..length (xs @ [y])}.\n      \\<forall>W\\<in>R n.\n         take (length (xs @ [y]) - n) (xs @ [y]) \\<in> sentences P \\<and>\n         (drop (length (xs @ [y]) - n) (xs @ [y]), W)\n         \\<in> failures Q) \\<and>\n  (\\<exists>n\\<in>{..length (xs @ [y])}. \\<exists>W. W \\<in> R n)\n\ngoal (1 subgoal):\n 1. \\<forall>W\\<in>R 0.\n       xs @ [y] \\<notin> sentences P \\<and>\n       None \\<notin> set (xs @ [y]) \\<and>\n       (xs @ [y], W) \\<in> failures P \\<or>\n       xs @ [y] \\<in> sentences P \\<and>\n       (\\<exists>U V.\n           (xs @ [y], U) \\<in> failures P \\<and>\n           ([], V) \\<in> failures Q \\<and> W = insert None U \\<inter> V)", "by simp"], ["proof (state)\nthis:\n  \\<forall>W\\<in>R 0.\n     xs @ [y] \\<notin> sentences P \\<and>\n     None \\<notin> set (xs @ [y]) \\<and>\n     (xs @ [y], W) \\<in> failures P \\<or>\n     xs @ [y] \\<in> sentences P \\<and>\n     (\\<exists>U V.\n         (xs @ [y], U) \\<in> failures P \\<and>\n         ([], V) \\<in> failures Q \\<and> W = insert None U \\<inter> V)\n\ngoal (1 subgoal):\n 1. (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs X)\n    \\<in> seq_comp_failures P Q", "hence \"?T W\""], ["proof (prove)\nusing this:\n  \\<forall>W\\<in>R 0.\n     xs @ [y] \\<notin> sentences P \\<and>\n     None \\<notin> set (xs @ [y]) \\<and>\n     (xs @ [y], W) \\<in> failures P \\<or>\n     xs @ [y] \\<in> sentences P \\<and>\n     (\\<exists>U V.\n         (xs @ [y], U) \\<in> failures P \\<and>\n         ([], V) \\<in> failures Q \\<and> W = insert None U \\<inter> V)\n\ngoal (1 subgoal):\n 1. xs @ [y] \\<notin> sentences P \\<and>\n    None \\<notin> set (xs @ [y]) \\<and> (xs @ [y], W) \\<in> failures P \\<or>\n    xs @ [y] \\<in> sentences P \\<and>\n    (\\<exists>U V.\n        (xs @ [y], U) \\<in> failures P \\<and>\n        ([], V) \\<in> failures Q \\<and> W = insert None U \\<inter> V)", "using J"], ["proof (prove)\nusing this:\n  \\<forall>W\\<in>R 0.\n     xs @ [y] \\<notin> sentences P \\<and>\n     None \\<notin> set (xs @ [y]) \\<and>\n     (xs @ [y], W) \\<in> failures P \\<or>\n     xs @ [y] \\<in> sentences P \\<and>\n     (\\<exists>U V.\n         (xs @ [y], U) \\<in> failures P \\<and>\n         ([], V) \\<in> failures Q \\<and> W = insert None U \\<inter> V)\n  W \\<in> R 0\n\ngoal (1 subgoal):\n 1. xs @ [y] \\<notin> sentences P \\<and>\n    None \\<notin> set (xs @ [y]) \\<and> (xs @ [y], W) \\<in> failures P \\<or>\n    xs @ [y] \\<in> sentences P \\<and>\n    (\\<exists>U V.\n        (xs @ [y], U) \\<in> failures P \\<and>\n        ([], V) \\<in> failures Q \\<and> W = insert None U \\<inter> V)", ".."], ["proof (state)\nthis:\n  xs @ [y] \\<notin> sentences P \\<and>\n  None \\<notin> set (xs @ [y]) \\<and> (xs @ [y], W) \\<in> failures P \\<or>\n  xs @ [y] \\<in> sentences P \\<and>\n  (\\<exists>U V.\n      (xs @ [y], U) \\<in> failures P \\<and>\n      ([], V) \\<in> failures Q \\<and> W = insert None U \\<inter> V)\n\ngoal (1 subgoal):\n 1. (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs X)\n    \\<in> seq_comp_failures P Q", "hence K: \"(xs @ [y], {}) \\<in> failures P \\<and> None \\<noteq> y\""], ["proof (prove)\nusing this:\n  xs @ [y] \\<notin> sentences P \\<and>\n  None \\<notin> set (xs @ [y]) \\<and> (xs @ [y], W) \\<in> failures P \\<or>\n  xs @ [y] \\<in> sentences P \\<and>\n  (\\<exists>U V.\n      (xs @ [y], U) \\<in> failures P \\<and>\n      ([], V) \\<in> failures Q \\<and> W = insert None U \\<inter> V)\n\ngoal (1 subgoal):\n 1. (xs @ [y], {}) \\<in> failures P \\<and> None \\<noteq> y", "proof (cases \"xs @ [y] \\<in> sentences P\", simp_all del: ex_simps,\n   (erule_tac exE)+, (erule_tac [!] conjE)+, simp_all)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>U V.\n       \\<lbrakk>xs @ [y] \\<in> sentences P;\n        \\<exists>Ua.\n           (xs @ [y], Ua) \\<in> failures P \\<and>\n           (\\<exists>Va.\n               ([], Va) \\<in> failures Q \\<and>\n               insert None U \\<inter> V = insert None Ua \\<inter> Va);\n        (xs @ [y], U) \\<in> failures P; ([], V) \\<in> failures Q;\n        W = insert None U \\<inter> V\\<rbrakk>\n       \\<Longrightarrow> (xs @ [y], {}) \\<in> failures P \\<and>\n                         None \\<noteq> y\n 2. \\<lbrakk>xs @ [y] \\<notin> sentences P; None \\<noteq> y;\n     None \\<notin> set xs; (xs @ [y], W) \\<in> failures P\\<rbrakk>\n    \\<Longrightarrow> (xs @ [y], {}) \\<in> failures P", "case False"], ["proof (state)\nthis:\n  xs @ [y] \\<notin> sentences P\n\ngoal (2 subgoals):\n 1. \\<And>U V.\n       \\<lbrakk>xs @ [y] \\<in> sentences P;\n        \\<exists>Ua.\n           (xs @ [y], Ua) \\<in> failures P \\<and>\n           (\\<exists>Va.\n               ([], Va) \\<in> failures Q \\<and>\n               insert None U \\<inter> V = insert None Ua \\<inter> Va);\n        (xs @ [y], U) \\<in> failures P; ([], V) \\<in> failures Q;\n        W = insert None U \\<inter> V\\<rbrakk>\n       \\<Longrightarrow> (xs @ [y], {}) \\<in> failures P \\<and>\n                         None \\<noteq> y\n 2. \\<lbrakk>xs @ [y] \\<notin> sentences P; None \\<noteq> y;\n     None \\<notin> set xs; (xs @ [y], W) \\<in> failures P\\<rbrakk>\n    \\<Longrightarrow> (xs @ [y], {}) \\<in> failures P", "assume \"(xs @ [y], W) \\<in> failures P\""], ["proof (state)\nthis:\n  (xs @ [y], W) \\<in> failures P\n\ngoal (2 subgoals):\n 1. \\<And>U V.\n       \\<lbrakk>xs @ [y] \\<in> sentences P;\n        \\<exists>Ua.\n           (xs @ [y], Ua) \\<in> failures P \\<and>\n           (\\<exists>Va.\n               ([], Va) \\<in> failures Q \\<and>\n               insert None U \\<inter> V = insert None Ua \\<inter> Va);\n        (xs @ [y], U) \\<in> failures P; ([], V) \\<in> failures Q;\n        W = insert None U \\<inter> V\\<rbrakk>\n       \\<Longrightarrow> (xs @ [y], {}) \\<in> failures P \\<and>\n                         None \\<noteq> y\n 2. \\<lbrakk>xs @ [y] \\<notin> sentences P; None \\<noteq> y;\n     None \\<notin> set xs; (xs @ [y], W) \\<in> failures P\\<rbrakk>\n    \\<Longrightarrow> (xs @ [y], {}) \\<in> failures P", "moreover"], ["proof (state)\nthis:\n  (xs @ [y], W) \\<in> failures P\n\ngoal (2 subgoals):\n 1. \\<And>U V.\n       \\<lbrakk>xs @ [y] \\<in> sentences P;\n        \\<exists>Ua.\n           (xs @ [y], Ua) \\<in> failures P \\<and>\n           (\\<exists>Va.\n               ([], Va) \\<in> failures Q \\<and>\n               insert None U \\<inter> V = insert None Ua \\<inter> Va);\n        (xs @ [y], U) \\<in> failures P; ([], V) \\<in> failures Q;\n        W = insert None U \\<inter> V\\<rbrakk>\n       \\<Longrightarrow> (xs @ [y], {}) \\<in> failures P \\<and>\n                         None \\<noteq> y\n 2. \\<lbrakk>xs @ [y] \\<notin> sentences P; None \\<noteq> y;\n     None \\<notin> set xs; (xs @ [y], W) \\<in> failures P\\<rbrakk>\n    \\<Longrightarrow> (xs @ [y], {}) \\<in> failures P", "have \"{} \\<subseteq> W\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {} \\<subseteq> W", ".."], ["proof (state)\nthis:\n  {} \\<subseteq> W\n\ngoal (2 subgoals):\n 1. \\<And>U V.\n       \\<lbrakk>xs @ [y] \\<in> sentences P;\n        \\<exists>Ua.\n           (xs @ [y], Ua) \\<in> failures P \\<and>\n           (\\<exists>Va.\n               ([], Va) \\<in> failures Q \\<and>\n               insert None U \\<inter> V = insert None Ua \\<inter> Va);\n        (xs @ [y], U) \\<in> failures P; ([], V) \\<in> failures Q;\n        W = insert None U \\<inter> V\\<rbrakk>\n       \\<Longrightarrow> (xs @ [y], {}) \\<in> failures P \\<and>\n                         None \\<noteq> y\n 2. \\<lbrakk>xs @ [y] \\<notin> sentences P; None \\<noteq> y;\n     None \\<notin> set xs; (xs @ [y], W) \\<in> failures P\\<rbrakk>\n    \\<Longrightarrow> (xs @ [y], {}) \\<in> failures P", "ultimately"], ["proof (chain)\npicking this:\n  (xs @ [y], W) \\<in> failures P\n  {} \\<subseteq> W", "show \"(xs @ [y], {}) \\<in> failures P\""], ["proof (prove)\nusing this:\n  (xs @ [y], W) \\<in> failures P\n  {} \\<subseteq> W\n\ngoal (1 subgoal):\n 1. (xs @ [y], {}) \\<in> failures P", "by (rule process_rule_3)"], ["proof (state)\nthis:\n  (xs @ [y], {}) \\<in> failures P\n\ngoal (1 subgoal):\n 1. \\<And>U V.\n       \\<lbrakk>xs @ [y] \\<in> sentences P;\n        \\<exists>Ua.\n           (xs @ [y], Ua) \\<in> failures P \\<and>\n           (\\<exists>Va.\n               ([], Va) \\<in> failures Q \\<and>\n               insert None U \\<inter> V = insert None Ua \\<inter> Va);\n        (xs @ [y], U) \\<in> failures P; ([], V) \\<in> failures Q;\n        W = insert None U \\<inter> V\\<rbrakk>\n       \\<Longrightarrow> (xs @ [y], {}) \\<in> failures P \\<and>\n                         None \\<noteq> y", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>U V.\n       \\<lbrakk>xs @ [y] \\<in> sentences P;\n        \\<exists>Ua.\n           (xs @ [y], Ua) \\<in> failures P \\<and>\n           (\\<exists>Va.\n               ([], Va) \\<in> failures Q \\<and>\n               insert None U \\<inter> V = insert None Ua \\<inter> Va);\n        (xs @ [y], U) \\<in> failures P; ([], V) \\<in> failures Q;\n        W = insert None U \\<inter> V\\<rbrakk>\n       \\<Longrightarrow> (xs @ [y], {}) \\<in> failures P \\<and>\n                         None \\<noteq> y", "fix U"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>U V.\n       \\<lbrakk>xs @ [y] \\<in> sentences P;\n        \\<exists>Ua.\n           (xs @ [y], Ua) \\<in> failures P \\<and>\n           (\\<exists>Va.\n               ([], Va) \\<in> failures Q \\<and>\n               insert None U \\<inter> V = insert None Ua \\<inter> Va);\n        (xs @ [y], U) \\<in> failures P; ([], V) \\<in> failures Q;\n        W = insert None U \\<inter> V\\<rbrakk>\n       \\<Longrightarrow> (xs @ [y], {}) \\<in> failures P \\<and>\n                         None \\<noteq> y", "case True"], ["proof (state)\nthis:\n  xs @ [y] \\<in> sentences P\n\ngoal (1 subgoal):\n 1. \\<And>U V.\n       \\<lbrakk>xs @ [y] \\<in> sentences P;\n        \\<exists>Ua.\n           (xs @ [y], Ua) \\<in> failures P \\<and>\n           (\\<exists>Va.\n               ([], Va) \\<in> failures Q \\<and>\n               insert None U \\<inter> V = insert None Ua \\<inter> Va);\n        (xs @ [y], U) \\<in> failures P; ([], V) \\<in> failures Q;\n        W = insert None U \\<inter> V\\<rbrakk>\n       \\<Longrightarrow> (xs @ [y], {}) \\<in> failures P \\<and>\n                         None \\<noteq> y", "assume \"(xs @ [y], U) \\<in> failures P\""], ["proof (state)\nthis:\n  (xs @ [y], U) \\<in> failures P\n\ngoal (1 subgoal):\n 1. \\<And>U V.\n       \\<lbrakk>xs @ [y] \\<in> sentences P;\n        \\<exists>Ua.\n           (xs @ [y], Ua) \\<in> failures P \\<and>\n           (\\<exists>Va.\n               ([], Va) \\<in> failures Q \\<and>\n               insert None U \\<inter> V = insert None Ua \\<inter> Va);\n        (xs @ [y], U) \\<in> failures P; ([], V) \\<in> failures Q;\n        W = insert None U \\<inter> V\\<rbrakk>\n       \\<Longrightarrow> (xs @ [y], {}) \\<in> failures P \\<and>\n                         None \\<noteq> y", "moreover"], ["proof (state)\nthis:\n  (xs @ [y], U) \\<in> failures P\n\ngoal (1 subgoal):\n 1. \\<And>U V.\n       \\<lbrakk>xs @ [y] \\<in> sentences P;\n        \\<exists>Ua.\n           (xs @ [y], Ua) \\<in> failures P \\<and>\n           (\\<exists>Va.\n               ([], Va) \\<in> failures Q \\<and>\n               insert None U \\<inter> V = insert None Ua \\<inter> Va);\n        (xs @ [y], U) \\<in> failures P; ([], V) \\<in> failures Q;\n        W = insert None U \\<inter> V\\<rbrakk>\n       \\<Longrightarrow> (xs @ [y], {}) \\<in> failures P \\<and>\n                         None \\<noteq> y", "have \"{} \\<subseteq> U\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {} \\<subseteq> U", ".."], ["proof (state)\nthis:\n  {} \\<subseteq> U\n\ngoal (1 subgoal):\n 1. \\<And>U V.\n       \\<lbrakk>xs @ [y] \\<in> sentences P;\n        \\<exists>Ua.\n           (xs @ [y], Ua) \\<in> failures P \\<and>\n           (\\<exists>Va.\n               ([], Va) \\<in> failures Q \\<and>\n               insert None U \\<inter> V = insert None Ua \\<inter> Va);\n        (xs @ [y], U) \\<in> failures P; ([], V) \\<in> failures Q;\n        W = insert None U \\<inter> V\\<rbrakk>\n       \\<Longrightarrow> (xs @ [y], {}) \\<in> failures P \\<and>\n                         None \\<noteq> y", "ultimately"], ["proof (chain)\npicking this:\n  (xs @ [y], U) \\<in> failures P\n  {} \\<subseteq> U", "have \"(xs @ [y], {}) \\<in> failures P\""], ["proof (prove)\nusing this:\n  (xs @ [y], U) \\<in> failures P\n  {} \\<subseteq> U\n\ngoal (1 subgoal):\n 1. (xs @ [y], {}) \\<in> failures P", "by (rule process_rule_3)"], ["proof (state)\nthis:\n  (xs @ [y], {}) \\<in> failures P\n\ngoal (1 subgoal):\n 1. \\<And>U V.\n       \\<lbrakk>xs @ [y] \\<in> sentences P;\n        \\<exists>Ua.\n           (xs @ [y], Ua) \\<in> failures P \\<and>\n           (\\<exists>Va.\n               ([], Va) \\<in> failures Q \\<and>\n               insert None U \\<inter> V = insert None Ua \\<inter> Va);\n        (xs @ [y], U) \\<in> failures P; ([], V) \\<in> failures Q;\n        W = insert None U \\<inter> V\\<rbrakk>\n       \\<Longrightarrow> (xs @ [y], {}) \\<in> failures P \\<and>\n                         None \\<noteq> y", "moreover"], ["proof (state)\nthis:\n  (xs @ [y], {}) \\<in> failures P\n\ngoal (1 subgoal):\n 1. \\<And>U V.\n       \\<lbrakk>xs @ [y] \\<in> sentences P;\n        \\<exists>Ua.\n           (xs @ [y], Ua) \\<in> failures P \\<and>\n           (\\<exists>Va.\n               ([], Va) \\<in> failures Q \\<and>\n               insert None U \\<inter> V = insert None Ua \\<inter> Va);\n        (xs @ [y], U) \\<in> failures P; ([], V) \\<in> failures Q;\n        W = insert None U \\<inter> V\\<rbrakk>\n       \\<Longrightarrow> (xs @ [y], {}) \\<in> failures P \\<and>\n                         None \\<noteq> y", "have \"weakly_sequential P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. weakly_sequential P", "using B"], ["proof (prove)\nusing this:\n  sequential P\n\ngoal (1 subgoal):\n 1. weakly_sequential P", "by (rule seq_implies_weakly_seq)"], ["proof (state)\nthis:\n  weakly_sequential P\n\ngoal (1 subgoal):\n 1. \\<And>U V.\n       \\<lbrakk>xs @ [y] \\<in> sentences P;\n        \\<exists>Ua.\n           (xs @ [y], Ua) \\<in> failures P \\<and>\n           (\\<exists>Va.\n               ([], Va) \\<in> failures Q \\<and>\n               insert None U \\<inter> V = insert None Ua \\<inter> Va);\n        (xs @ [y], U) \\<in> failures P; ([], V) \\<in> failures Q;\n        W = insert None U \\<inter> V\\<rbrakk>\n       \\<Longrightarrow> (xs @ [y], {}) \\<in> failures P \\<and>\n                         None \\<noteq> y", "hence \"None \\<notin> set (xs @ [y])\""], ["proof (prove)\nusing this:\n  weakly_sequential P\n\ngoal (1 subgoal):\n 1. None \\<notin> set (xs @ [y])", "using True"], ["proof (prove)\nusing this:\n  weakly_sequential P\n  xs @ [y] \\<in> sentences P\n\ngoal (1 subgoal):\n 1. None \\<notin> set (xs @ [y])", "by (rule weakly_seq_sentences_none)"], ["proof (state)\nthis:\n  None \\<notin> set (xs @ [y])\n\ngoal (1 subgoal):\n 1. \\<And>U V.\n       \\<lbrakk>xs @ [y] \\<in> sentences P;\n        \\<exists>Ua.\n           (xs @ [y], Ua) \\<in> failures P \\<and>\n           (\\<exists>Va.\n               ([], Va) \\<in> failures Q \\<and>\n               insert None U \\<inter> V = insert None Ua \\<inter> Va);\n        (xs @ [y], U) \\<in> failures P; ([], V) \\<in> failures Q;\n        W = insert None U \\<inter> V\\<rbrakk>\n       \\<Longrightarrow> (xs @ [y], {}) \\<in> failures P \\<and>\n                         None \\<noteq> y", "hence \"None \\<noteq> y\""], ["proof (prove)\nusing this:\n  None \\<notin> set (xs @ [y])\n\ngoal (1 subgoal):\n 1. None \\<noteq> y", "by simp"], ["proof (state)\nthis:\n  None \\<noteq> y\n\ngoal (1 subgoal):\n 1. \\<And>U V.\n       \\<lbrakk>xs @ [y] \\<in> sentences P;\n        \\<exists>Ua.\n           (xs @ [y], Ua) \\<in> failures P \\<and>\n           (\\<exists>Va.\n               ([], Va) \\<in> failures Q \\<and>\n               insert None U \\<inter> V = insert None Ua \\<inter> Va);\n        (xs @ [y], U) \\<in> failures P; ([], V) \\<in> failures Q;\n        W = insert None U \\<inter> V\\<rbrakk>\n       \\<Longrightarrow> (xs @ [y], {}) \\<in> failures P \\<and>\n                         None \\<noteq> y", "ultimately"], ["proof (chain)\npicking this:\n  (xs @ [y], {}) \\<in> failures P\n  None \\<noteq> y", "show ?thesis"], ["proof (prove)\nusing this:\n  (xs @ [y], {}) \\<in> failures P\n  None \\<noteq> y\n\ngoal (1 subgoal):\n 1. (xs @ [y], {}) \\<in> failures P \\<and> None \\<noteq> y", ".."], ["proof (state)\nthis:\n  (xs @ [y], {}) \\<in> failures P \\<and> None \\<noteq> y\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (xs @ [y], {}) \\<in> failures P \\<and> None \\<noteq> y\n\ngoal (1 subgoal):\n 1. (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs X)\n    \\<in> seq_comp_failures P Q", "have \"(zs, X) \\<in> futures P xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (zs, X) \\<in> futures P xs", "using E"], ["proof (prove)\nusing this:\n  (xs @ zs, X) \\<in> failures P\n\ngoal (1 subgoal):\n 1. (zs, X) \\<in> futures P xs", "by (simp add: futures_def)"], ["proof (state)\nthis:\n  (zs, X) \\<in> futures P xs\n\ngoal (1 subgoal):\n 1. (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs X)\n    \\<in> seq_comp_failures P Q", "moreover"], ["proof (state)\nthis:\n  (zs, X) \\<in> futures P xs\n\ngoal (1 subgoal):\n 1. (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs X)\n    \\<in> seq_comp_failures P Q", "have \"([y], {}) \\<in> futures P xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ([y], {}) \\<in> futures P xs", "using K"], ["proof (prove)\nusing this:\n  (xs @ [y], {}) \\<in> failures P \\<and> None \\<noteq> y\n\ngoal (1 subgoal):\n 1. ([y], {}) \\<in> futures P xs", "by (simp add: futures_def)"], ["proof (state)\nthis:\n  ([y], {}) \\<in> futures P xs\n\ngoal (1 subgoal):\n 1. (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs X)\n    \\<in> seq_comp_failures P Q", "ultimately"], ["proof (chain)\npicking this:\n  (zs, X) \\<in> futures P xs\n  ([y], {}) \\<in> futures P xs", "have \"(y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs X) \\<in>\n    futures P xs\""], ["proof (prove)\nusing this:\n  (zs, X) \\<in> futures P xs\n  ([y], {}) \\<in> futures P xs\n\ngoal (1 subgoal):\n 1. (y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs X)\n    \\<in> futures P xs", "using C"], ["proof (prove)\nusing this:\n  (zs, X) \\<in> futures P xs\n  ([y], {}) \\<in> futures P xs\n  secure P I D\n\ngoal (1 subgoal):\n 1. (y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs X)\n    \\<in> futures P xs", "by (simp add: secure_def)"], ["proof (state)\nthis:\n  (y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs X) \\<in> futures P xs\n\ngoal (1 subgoal):\n 1. (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs X)\n    \\<in> seq_comp_failures P Q", "hence L: \"(xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs X) \\<in>\n    failures P\""], ["proof (prove)\nusing this:\n  (y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs X) \\<in> futures P xs\n\ngoal (1 subgoal):\n 1. (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs X)\n    \\<in> failures P", "by (simp add: futures_def)"], ["proof (state)\nthis:\n  (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs X)\n  \\<in> failures P\n\ngoal (1 subgoal):\n 1. (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs X)\n    \\<in> seq_comp_failures P Q", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs X)\n    \\<in> seq_comp_failures P Q", "proof (cases \"xs @ y # ipurge_tr I D (D y) zs \\<in> sentences P\",\n   cases \"(D y, D None) \\<in> I \\<or> (\\<exists>u \\<in> sinks I D (D y) zs. (u, D None) \\<in> I)\",\n   simp_all)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<lbrakk>xs @ y # ipurge_tr I D (D y) zs \\<in> sentences P;\n     (D y, D None) \\<in> I \\<or>\n     (\\<exists>u\\<in>sinks I D (D y) zs. (u, D None) \\<in> I)\\<rbrakk>\n    \\<Longrightarrow> (xs @ y # ipurge_tr I D (D y) zs,\n                       ipurge_ref I D (D y) zs X)\n                      \\<in> seq_comp_failures P Q\n 2. \\<lbrakk>xs @ y # ipurge_tr I D (D y) zs \\<in> sentences P;\n     (D y, D None) \\<notin> I \\<and>\n     (\\<forall>u\\<in>sinks I D (D y) zs. (u, D None) \\<notin> I)\\<rbrakk>\n    \\<Longrightarrow> (xs @ y # ipurge_tr I D (D y) zs,\n                       ipurge_ref I D (D y) zs X)\n                      \\<in> seq_comp_failures P Q\n 3. xs @ y # ipurge_tr I D (D y) zs \\<notin> sentences P \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs X)\n    \\<in> seq_comp_failures P Q", "assume \"xs @ y # ipurge_tr I D (D y) zs \\<notin> sentences P\""], ["proof (state)\nthis:\n  xs @ y # ipurge_tr I D (D y) zs \\<notin> sentences P\n\ngoal (3 subgoals):\n 1. \\<lbrakk>xs @ y # ipurge_tr I D (D y) zs \\<in> sentences P;\n     (D y, D None) \\<in> I \\<or>\n     (\\<exists>u\\<in>sinks I D (D y) zs. (u, D None) \\<in> I)\\<rbrakk>\n    \\<Longrightarrow> (xs @ y # ipurge_tr I D (D y) zs,\n                       ipurge_ref I D (D y) zs X)\n                      \\<in> seq_comp_failures P Q\n 2. \\<lbrakk>xs @ y # ipurge_tr I D (D y) zs \\<in> sentences P;\n     (D y, D None) \\<notin> I \\<and>\n     (\\<forall>u\\<in>sinks I D (D y) zs. (u, D None) \\<notin> I)\\<rbrakk>\n    \\<Longrightarrow> (xs @ y # ipurge_tr I D (D y) zs,\n                       ipurge_ref I D (D y) zs X)\n                      \\<in> seq_comp_failures P Q\n 3. xs @ y # ipurge_tr I D (D y) zs \\<notin> sentences P \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs X)\n    \\<in> seq_comp_failures P Q", "thus ?thesis"], ["proof (prove)\nusing this:\n  xs @ y # ipurge_tr I D (D y) zs \\<notin> sentences P\n\ngoal (1 subgoal):\n 1. (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs X)\n    \\<in> seq_comp_failures P Q", "using L"], ["proof (prove)\nusing this:\n  xs @ y # ipurge_tr I D (D y) zs \\<notin> sentences P\n  (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs X)\n  \\<in> failures P\n\ngoal (1 subgoal):\n 1. (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs X)\n    \\<in> seq_comp_failures P Q", "proof (rule SCF_R1, simp add: F K)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>xs @ y # ipurge_tr I D (D y) zs \\<notin> sentences P;\n     (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs X)\n     \\<in> failures P\\<rbrakk>\n    \\<Longrightarrow> None \\<notin> set (ipurge_tr I D (D y) zs)", "have \"set (ipurge_tr I D (D y) zs) \\<subseteq> set zs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (ipurge_tr I D (D y) zs) \\<subseteq> set zs", "by (rule ipurge_tr_set)"], ["proof (state)\nthis:\n  set (ipurge_tr I D (D y) zs) \\<subseteq> set zs\n\ngoal (1 subgoal):\n 1. \\<lbrakk>xs @ y # ipurge_tr I D (D y) zs \\<notin> sentences P;\n     (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs X)\n     \\<in> failures P\\<rbrakk>\n    \\<Longrightarrow> None \\<notin> set (ipurge_tr I D (D y) zs)", "thus \"None \\<notin> set (ipurge_tr I D (D y) zs)\""], ["proof (prove)\nusing this:\n  set (ipurge_tr I D (D y) zs) \\<subseteq> set zs\n\ngoal (1 subgoal):\n 1. None \\<notin> set (ipurge_tr I D (D y) zs)", "using G"], ["proof (prove)\nusing this:\n  set (ipurge_tr I D (D y) zs) \\<subseteq> set zs\n  None \\<notin> set zs\n\ngoal (1 subgoal):\n 1. None \\<notin> set (ipurge_tr I D (D y) zs)", "by (rule contra_subsetD)"], ["proof (state)\nthis:\n  None \\<notin> set (ipurge_tr I D (D y) zs)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs X)\n  \\<in> seq_comp_failures P Q\n\ngoal (2 subgoals):\n 1. \\<lbrakk>xs @ y # ipurge_tr I D (D y) zs \\<in> sentences P;\n     (D y, D None) \\<in> I \\<or>\n     (\\<exists>u\\<in>sinks I D (D y) zs. (u, D None) \\<in> I)\\<rbrakk>\n    \\<Longrightarrow> (xs @ y # ipurge_tr I D (D y) zs,\n                       ipurge_ref I D (D y) zs X)\n                      \\<in> seq_comp_failures P Q\n 2. \\<lbrakk>xs @ y # ipurge_tr I D (D y) zs \\<in> sentences P;\n     (D y, D None) \\<notin> I \\<and>\n     (\\<forall>u\\<in>sinks I D (D y) zs. (u, D None) \\<notin> I)\\<rbrakk>\n    \\<Longrightarrow> (xs @ y # ipurge_tr I D (D y) zs,\n                       ipurge_ref I D (D y) zs X)\n                      \\<in> seq_comp_failures P Q", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>xs @ y # ipurge_tr I D (D y) zs \\<in> sentences P;\n     (D y, D None) \\<in> I \\<or>\n     (\\<exists>u\\<in>sinks I D (D y) zs. (u, D None) \\<in> I)\\<rbrakk>\n    \\<Longrightarrow> (xs @ y # ipurge_tr I D (D y) zs,\n                       ipurge_ref I D (D y) zs X)\n                      \\<in> seq_comp_failures P Q\n 2. \\<lbrakk>xs @ y # ipurge_tr I D (D y) zs \\<in> sentences P;\n     (D y, D None) \\<notin> I \\<and>\n     (\\<forall>u\\<in>sinks I D (D y) zs. (u, D None) \\<notin> I)\\<rbrakk>\n    \\<Longrightarrow> (xs @ y # ipurge_tr I D (D y) zs,\n                       ipurge_ref I D (D y) zs X)\n                      \\<in> seq_comp_failures P Q", "assume\n      M: \"xs @ y # ipurge_tr I D (D y) zs \\<in> sentences P\" and\n      N: \"(D y, D None) \\<in> I \\<or> (\\<exists>u \\<in> sinks I D (D y) zs. (u, D None) \\<in> I)\""], ["proof (state)\nthis:\n  xs @ y # ipurge_tr I D (D y) zs \\<in> sentences P\n  (D y, D None) \\<in> I \\<or>\n  (\\<exists>u\\<in>sinks I D (D y) zs. (u, D None) \\<in> I)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>xs @ y # ipurge_tr I D (D y) zs \\<in> sentences P;\n     (D y, D None) \\<in> I \\<or>\n     (\\<exists>u\\<in>sinks I D (D y) zs. (u, D None) \\<in> I)\\<rbrakk>\n    \\<Longrightarrow> (xs @ y # ipurge_tr I D (D y) zs,\n                       ipurge_ref I D (D y) zs X)\n                      \\<in> seq_comp_failures P Q\n 2. \\<lbrakk>xs @ y # ipurge_tr I D (D y) zs \\<in> sentences P;\n     (D y, D None) \\<notin> I \\<and>\n     (\\<forall>u\\<in>sinks I D (D y) zs. (u, D None) \\<notin> I)\\<rbrakk>\n    \\<Longrightarrow> (xs @ y # ipurge_tr I D (D y) zs,\n                       ipurge_ref I D (D y) zs X)\n                      \\<in> seq_comp_failures P Q", "have \"ipurge_ref I D (D y) zs X = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ipurge_ref I D (D y) zs X = {}", "proof (rule disjE [OF N], erule_tac [2] bexE)"], ["proof (state)\ngoal (2 subgoals):\n 1. (D y, D None) \\<in> I \\<Longrightarrow> ipurge_ref I D (D y) zs X = {}\n 2. \\<And>u.\n       \\<lbrakk>u \\<in> sinks I D (D y) zs; (u, D None) \\<in> I\\<rbrakk>\n       \\<Longrightarrow> ipurge_ref I D (D y) zs X = {}", "assume O: \"(D y, D None) \\<in> I\""], ["proof (state)\nthis:\n  (D y, D None) \\<in> I\n\ngoal (2 subgoals):\n 1. (D y, D None) \\<in> I \\<Longrightarrow> ipurge_ref I D (D y) zs X = {}\n 2. \\<And>u.\n       \\<lbrakk>u \\<in> sinks I D (D y) zs; (u, D None) \\<in> I\\<rbrakk>\n       \\<Longrightarrow> ipurge_ref I D (D y) zs X = {}", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. ipurge_ref I D (D y) zs X = {}", "proof (rule ipurge_ref_empty [of \"D y\"], simp)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> X \\<Longrightarrow> (D y, D x) \\<in> I", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> X \\<Longrightarrow> (D y, D x) \\<in> I", "have \"(D y, D None) \\<in> I \\<and> y \\<noteq> None \\<longrightarrow> (\\<forall>u \\<in> range D. (D y, u) \\<in> I)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (D y, D None) \\<in> I \\<and> y \\<noteq> None \\<longrightarrow>\n    (\\<forall>u\\<in>range D. (D y, u) \\<in> I)", "using A"], ["proof (prove)\nusing this:\n  secure_termination I D\n\ngoal (1 subgoal):\n 1. (D y, D None) \\<in> I \\<and> y \\<noteq> None \\<longrightarrow>\n    (\\<forall>u\\<in>range D. (D y, u) \\<in> I)", "by (simp add: secure_termination_def)"], ["proof (state)\nthis:\n  (D y, D None) \\<in> I \\<and> y \\<noteq> None \\<longrightarrow>\n  (\\<forall>u\\<in>range D. (D y, u) \\<in> I)\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> X \\<Longrightarrow> (D y, D x) \\<in> I", "moreover"], ["proof (state)\nthis:\n  (D y, D None) \\<in> I \\<and> y \\<noteq> None \\<longrightarrow>\n  (\\<forall>u\\<in>range D. (D y, u) \\<in> I)\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> X \\<Longrightarrow> (D y, D x) \\<in> I", "have \"y \\<noteq> None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y \\<noteq> None", "using K"], ["proof (prove)\nusing this:\n  (xs @ [y], {}) \\<in> failures P \\<and> None \\<noteq> y\n\ngoal (1 subgoal):\n 1. y \\<noteq> None", "by (rule_tac not_sym, simp)"], ["proof (state)\nthis:\n  y \\<noteq> None\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> X \\<Longrightarrow> (D y, D x) \\<in> I", "ultimately"], ["proof (chain)\npicking this:\n  (D y, D None) \\<in> I \\<and> y \\<noteq> None \\<longrightarrow>\n  (\\<forall>u\\<in>range D. (D y, u) \\<in> I)\n  y \\<noteq> None", "have \"\\<forall>u \\<in> range D. (D y, u) \\<in> I\""], ["proof (prove)\nusing this:\n  (D y, D None) \\<in> I \\<and> y \\<noteq> None \\<longrightarrow>\n  (\\<forall>u\\<in>range D. (D y, u) \\<in> I)\n  y \\<noteq> None\n\ngoal (1 subgoal):\n 1. \\<forall>u\\<in>range D. (D y, u) \\<in> I", "using O"], ["proof (prove)\nusing this:\n  (D y, D None) \\<in> I \\<and> y \\<noteq> None \\<longrightarrow>\n  (\\<forall>u\\<in>range D. (D y, u) \\<in> I)\n  y \\<noteq> None\n  (D y, D None) \\<in> I\n\ngoal (1 subgoal):\n 1. \\<forall>u\\<in>range D. (D y, u) \\<in> I", "by simp"], ["proof (state)\nthis:\n  \\<forall>u\\<in>range D. (D y, u) \\<in> I\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> X \\<Longrightarrow> (D y, D x) \\<in> I", "thus \"(D y, D x) \\<in> I\""], ["proof (prove)\nusing this:\n  \\<forall>u\\<in>range D. (D y, u) \\<in> I\n\ngoal (1 subgoal):\n 1. (D y, D x) \\<in> I", "by simp"], ["proof (state)\nthis:\n  (D y, D x) \\<in> I\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ipurge_ref I D (D y) zs X = {}\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<lbrakk>u \\<in> sinks I D (D y) zs; (u, D None) \\<in> I\\<rbrakk>\n       \\<Longrightarrow> ipurge_ref I D (D y) zs X = {}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<lbrakk>u \\<in> sinks I D (D y) zs; (u, D None) \\<in> I\\<rbrakk>\n       \\<Longrightarrow> ipurge_ref I D (D y) zs X = {}", "fix u"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<lbrakk>u \\<in> sinks I D (D y) zs; (u, D None) \\<in> I\\<rbrakk>\n       \\<Longrightarrow> ipurge_ref I D (D y) zs X = {}", "assume\n        O: \"u \\<in> sinks I D (D y) zs\" and\n        P: \"(u, D None) \\<in> I\""], ["proof (state)\nthis:\n  u \\<in> sinks I D (D y) zs\n  (u, D None) \\<in> I\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<lbrakk>u \\<in> sinks I D (D y) zs; (u, D None) \\<in> I\\<rbrakk>\n       \\<Longrightarrow> ipurge_ref I D (D y) zs X = {}", "have \"\\<exists>z \\<in> set zs. u = D z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>z\\<in>set zs. u = D z", "using O"], ["proof (prove)\nusing this:\n  u \\<in> sinks I D (D y) zs\n\ngoal (1 subgoal):\n 1. \\<exists>z\\<in>set zs. u = D z", "by (rule sinks_elem)"], ["proof (state)\nthis:\n  \\<exists>z\\<in>set zs. u = D z\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<lbrakk>u \\<in> sinks I D (D y) zs; (u, D None) \\<in> I\\<rbrakk>\n       \\<Longrightarrow> ipurge_ref I D (D y) zs X = {}", "then"], ["proof (chain)\npicking this:\n  \\<exists>z\\<in>set zs. u = D z", "obtain z where Q: \"z \\<in> set zs\" and R: \"u = D z\""], ["proof (prove)\nusing this:\n  \\<exists>z\\<in>set zs. u = D z\n\ngoal (1 subgoal):\n 1. (\\<And>z.\n        \\<lbrakk>z \\<in> set zs; u = D z\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  z \\<in> set zs\n  u = D z\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<lbrakk>u \\<in> sinks I D (D y) zs; (u, D None) \\<in> I\\<rbrakk>\n       \\<Longrightarrow> ipurge_ref I D (D y) zs X = {}", "have S: \"z \\<noteq> None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. z \\<noteq> None", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. z = None \\<Longrightarrow> False", "assume \"z = None\""], ["proof (state)\nthis:\n  z = None\n\ngoal (1 subgoal):\n 1. z = None \\<Longrightarrow> False", "hence \"None \\<in> set zs\""], ["proof (prove)\nusing this:\n  z = None\n\ngoal (1 subgoal):\n 1. None \\<in> set zs", "using Q"], ["proof (prove)\nusing this:\n  z = None\n  z \\<in> set zs\n\ngoal (1 subgoal):\n 1. None \\<in> set zs", "by simp"], ["proof (state)\nthis:\n  None \\<in> set zs\n\ngoal (1 subgoal):\n 1. z = None \\<Longrightarrow> False", "thus False"], ["proof (prove)\nusing this:\n  None \\<in> set zs\n\ngoal (1 subgoal):\n 1. False", "using G"], ["proof (prove)\nusing this:\n  None \\<in> set zs\n  None \\<notin> set zs\n\ngoal (1 subgoal):\n 1. False", "by contradiction"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  z \\<noteq> None\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<lbrakk>u \\<in> sinks I D (D y) zs; (u, D None) \\<in> I\\<rbrakk>\n       \\<Longrightarrow> ipurge_ref I D (D y) zs X = {}", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. ipurge_ref I D (D y) zs X = {}", "proof (rule ipurge_ref_empty [of u], simp add: O)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> X \\<Longrightarrow> (u, D x) \\<in> I", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> X \\<Longrightarrow> (u, D x) \\<in> I", "have \"(D z, D None) \\<in> I \\<and> z \\<noteq> None \\<longrightarrow> (\\<forall>v \\<in> range D. (D z, v) \\<in> I)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (D z, D None) \\<in> I \\<and> z \\<noteq> None \\<longrightarrow>\n    (\\<forall>v\\<in>range D. (D z, v) \\<in> I)", "using A"], ["proof (prove)\nusing this:\n  secure_termination I D\n\ngoal (1 subgoal):\n 1. (D z, D None) \\<in> I \\<and> z \\<noteq> None \\<longrightarrow>\n    (\\<forall>v\\<in>range D. (D z, v) \\<in> I)", "by (simp add: secure_termination_def)"], ["proof (state)\nthis:\n  (D z, D None) \\<in> I \\<and> z \\<noteq> None \\<longrightarrow>\n  (\\<forall>v\\<in>range D. (D z, v) \\<in> I)\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> X \\<Longrightarrow> (u, D x) \\<in> I", "moreover"], ["proof (state)\nthis:\n  (D z, D None) \\<in> I \\<and> z \\<noteq> None \\<longrightarrow>\n  (\\<forall>v\\<in>range D. (D z, v) \\<in> I)\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> X \\<Longrightarrow> (u, D x) \\<in> I", "have \"(D z, D None) \\<in> I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (D z, D None) \\<in> I", "using P and R"], ["proof (prove)\nusing this:\n  (u, D None) \\<in> I\n  u = D z\n\ngoal (1 subgoal):\n 1. (D z, D None) \\<in> I", "by simp"], ["proof (state)\nthis:\n  (D z, D None) \\<in> I\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> X \\<Longrightarrow> (u, D x) \\<in> I", "ultimately"], ["proof (chain)\npicking this:\n  (D z, D None) \\<in> I \\<and> z \\<noteq> None \\<longrightarrow>\n  (\\<forall>v\\<in>range D. (D z, v) \\<in> I)\n  (D z, D None) \\<in> I", "have \"\\<forall>v \\<in> range D. (D z, v) \\<in> I\""], ["proof (prove)\nusing this:\n  (D z, D None) \\<in> I \\<and> z \\<noteq> None \\<longrightarrow>\n  (\\<forall>v\\<in>range D. (D z, v) \\<in> I)\n  (D z, D None) \\<in> I\n\ngoal (1 subgoal):\n 1. \\<forall>v\\<in>range D. (D z, v) \\<in> I", "using S"], ["proof (prove)\nusing this:\n  (D z, D None) \\<in> I \\<and> z \\<noteq> None \\<longrightarrow>\n  (\\<forall>v\\<in>range D. (D z, v) \\<in> I)\n  (D z, D None) \\<in> I\n  z \\<noteq> None\n\ngoal (1 subgoal):\n 1. \\<forall>v\\<in>range D. (D z, v) \\<in> I", "by simp"], ["proof (state)\nthis:\n  \\<forall>v\\<in>range D. (D z, v) \\<in> I\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> X \\<Longrightarrow> (u, D x) \\<in> I", "thus \"(u, D x) \\<in> I\""], ["proof (prove)\nusing this:\n  \\<forall>v\\<in>range D. (D z, v) \\<in> I\n\ngoal (1 subgoal):\n 1. (u, D x) \\<in> I", "using R"], ["proof (prove)\nusing this:\n  \\<forall>v\\<in>range D. (D z, v) \\<in> I\n  u = D z\n\ngoal (1 subgoal):\n 1. (u, D x) \\<in> I", "by simp"], ["proof (state)\nthis:\n  (u, D x) \\<in> I\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ipurge_ref I D (D y) zs X = {}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ipurge_ref I D (D y) zs X = {}\n\ngoal (2 subgoals):\n 1. \\<lbrakk>xs @ y # ipurge_tr I D (D y) zs \\<in> sentences P;\n     (D y, D None) \\<in> I \\<or>\n     (\\<exists>u\\<in>sinks I D (D y) zs. (u, D None) \\<in> I)\\<rbrakk>\n    \\<Longrightarrow> (xs @ y # ipurge_tr I D (D y) zs,\n                       ipurge_ref I D (D y) zs X)\n                      \\<in> seq_comp_failures P Q\n 2. \\<lbrakk>xs @ y # ipurge_tr I D (D y) zs \\<in> sentences P;\n     (D y, D None) \\<notin> I \\<and>\n     (\\<forall>u\\<in>sinks I D (D y) zs. (u, D None) \\<notin> I)\\<rbrakk>\n    \\<Longrightarrow> (xs @ y # ipurge_tr I D (D y) zs,\n                       ipurge_ref I D (D y) zs X)\n                      \\<in> seq_comp_failures P Q", "thus ?thesis"], ["proof (prove)\nusing this:\n  ipurge_ref I D (D y) zs X = {}\n\ngoal (1 subgoal):\n 1. (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs X)\n    \\<in> seq_comp_failures P Q", "proof simp"], ["proof (state)\ngoal (1 subgoal):\n 1. ipurge_ref I D (D y) zs X = {} \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) zs, {}) \\<in> seq_comp_failures P Q", "have \"([], {}) \\<in> failures Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ([], {}) \\<in> failures Q", "by (rule process_rule_1)"], ["proof (state)\nthis:\n  ([], {}) \\<in> failures Q\n\ngoal (1 subgoal):\n 1. ipurge_ref I D (D y) zs X = {} \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) zs, {}) \\<in> seq_comp_failures P Q", "with M and L"], ["proof (chain)\npicking this:\n  xs @ y # ipurge_tr I D (D y) zs \\<in> sentences P\n  (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs X)\n  \\<in> failures P\n  ([], {}) \\<in> failures Q", "have \"(xs @ y # ipurge_tr I D (D y) zs,\n        insert None (ipurge_ref I D (D y) zs X) \\<inter> {}) \\<in> seq_comp_failures P Q\""], ["proof (prove)\nusing this:\n  xs @ y # ipurge_tr I D (D y) zs \\<in> sentences P\n  (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs X)\n  \\<in> failures P\n  ([], {}) \\<in> failures Q\n\ngoal (1 subgoal):\n 1. (xs @ y # ipurge_tr I D (D y) zs,\n     insert None (ipurge_ref I D (D y) zs X) \\<inter> {})\n    \\<in> seq_comp_failures P Q", "by (rule SCF_R2)"], ["proof (state)\nthis:\n  (xs @ y # ipurge_tr I D (D y) zs,\n   insert None (ipurge_ref I D (D y) zs X) \\<inter> {})\n  \\<in> seq_comp_failures P Q\n\ngoal (1 subgoal):\n 1. ipurge_ref I D (D y) zs X = {} \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) zs, {}) \\<in> seq_comp_failures P Q", "thus \"(xs @ y # ipurge_tr I D (D y) zs, {}) \\<in> seq_comp_failures P Q\""], ["proof (prove)\nusing this:\n  (xs @ y # ipurge_tr I D (D y) zs,\n   insert None (ipurge_ref I D (D y) zs X) \\<inter> {})\n  \\<in> seq_comp_failures P Q\n\ngoal (1 subgoal):\n 1. (xs @ y # ipurge_tr I D (D y) zs, {}) \\<in> seq_comp_failures P Q", "by simp"], ["proof (state)\nthis:\n  (xs @ y # ipurge_tr I D (D y) zs, {}) \\<in> seq_comp_failures P Q\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs X)\n  \\<in> seq_comp_failures P Q\n\ngoal (1 subgoal):\n 1. \\<lbrakk>xs @ y # ipurge_tr I D (D y) zs \\<in> sentences P;\n     (D y, D None) \\<notin> I \\<and>\n     (\\<forall>u\\<in>sinks I D (D y) zs. (u, D None) \\<notin> I)\\<rbrakk>\n    \\<Longrightarrow> (xs @ y # ipurge_tr I D (D y) zs,\n                       ipurge_ref I D (D y) zs X)\n                      \\<in> seq_comp_failures P Q", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>xs @ y # ipurge_tr I D (D y) zs \\<in> sentences P;\n     (D y, D None) \\<notin> I \\<and>\n     (\\<forall>u\\<in>sinks I D (D y) zs. (u, D None) \\<notin> I)\\<rbrakk>\n    \\<Longrightarrow> (xs @ y # ipurge_tr I D (D y) zs,\n                       ipurge_ref I D (D y) zs X)\n                      \\<in> seq_comp_failures P Q", "assume\n      M: \"xs @ y # ipurge_tr I D (D y) zs \\<in> sentences P\" and\n      N: \"(D y, D None) \\<notin> I \\<and> (\\<forall>u \\<in> sinks I D (D y) zs. (u, D None) \\<notin> I)\""], ["proof (state)\nthis:\n  xs @ y # ipurge_tr I D (D y) zs \\<in> sentences P\n  (D y, D None) \\<notin> I \\<and>\n  (\\<forall>u\\<in>sinks I D (D y) zs. (u, D None) \\<notin> I)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>xs @ y # ipurge_tr I D (D y) zs \\<in> sentences P;\n     (D y, D None) \\<notin> I \\<and>\n     (\\<forall>u\\<in>sinks I D (D y) zs. (u, D None) \\<notin> I)\\<rbrakk>\n    \\<Longrightarrow> (xs @ y # ipurge_tr I D (D y) zs,\n                       ipurge_ref I D (D y) zs X)\n                      \\<in> seq_comp_failures P Q", "have \"xs @ zs \\<in> sentences P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs @ zs \\<in> sentences P", "proof (simp add: sentences_def,\n     rule ipurge_tr_del_traces [OF C, where u = \"D y\"], simp add: N)"], ["proof (state)\ngoal (2 subgoals):\n 1. xs @ ipurge_tr I D (D y) zs @ [None] \\<in> traces P\n 2. xs @ zs \\<in> traces P", "have \"xs @ y # ipurge_tr I D (D y) zs @ [None] \\<in> traces P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs @ y # ipurge_tr I D (D y) zs @ [None] \\<in> traces P", "using M"], ["proof (prove)\nusing this:\n  xs @ y # ipurge_tr I D (D y) zs \\<in> sentences P\n\ngoal (1 subgoal):\n 1. xs @ y # ipurge_tr I D (D y) zs @ [None] \\<in> traces P", "by (simp add: sentences_def)"], ["proof (state)\nthis:\n  xs @ y # ipurge_tr I D (D y) zs @ [None] \\<in> traces P\n\ngoal (2 subgoals):\n 1. xs @ ipurge_tr I D (D y) zs @ [None] \\<in> traces P\n 2. xs @ zs \\<in> traces P", "hence \"(xs @ y # ipurge_tr I D (D y) zs @ [None], {}) \\<in> failures P\""], ["proof (prove)\nusing this:\n  xs @ y # ipurge_tr I D (D y) zs @ [None] \\<in> traces P\n\ngoal (1 subgoal):\n 1. (xs @ y # ipurge_tr I D (D y) zs @ [None], {}) \\<in> failures P", "by (rule traces_failures)"], ["proof (state)\nthis:\n  (xs @ y # ipurge_tr I D (D y) zs @ [None], {}) \\<in> failures P\n\ngoal (2 subgoals):\n 1. xs @ ipurge_tr I D (D y) zs @ [None] \\<in> traces P\n 2. xs @ zs \\<in> traces P", "hence \"(y # ipurge_tr I D (D y) zs @ [None], {}) \\<in> futures P xs\""], ["proof (prove)\nusing this:\n  (xs @ y # ipurge_tr I D (D y) zs @ [None], {}) \\<in> failures P\n\ngoal (1 subgoal):\n 1. (y # ipurge_tr I D (D y) zs @ [None], {}) \\<in> futures P xs", "by (simp add: futures_def)"], ["proof (state)\nthis:\n  (y # ipurge_tr I D (D y) zs @ [None], {}) \\<in> futures P xs\n\ngoal (2 subgoals):\n 1. xs @ ipurge_tr I D (D y) zs @ [None] \\<in> traces P\n 2. xs @ zs \\<in> traces P", "hence \"(ipurge_tr I D (D y) (ipurge_tr I D (D y) zs @ [None]),\n        ipurge_ref I D (D y) (ipurge_tr I D (D y) zs @ [None]) {}) \\<in> futures P xs\""], ["proof (prove)\nusing this:\n  (y # ipurge_tr I D (D y) zs @ [None], {}) \\<in> futures P xs\n\ngoal (1 subgoal):\n 1. (ipurge_tr I D (D y) (ipurge_tr I D (D y) zs @ [None]),\n     ipurge_ref I D (D y) (ipurge_tr I D (D y) zs @ [None]) {})\n    \\<in> futures P xs", "using C"], ["proof (prove)\nusing this:\n  (y # ipurge_tr I D (D y) zs @ [None], {}) \\<in> futures P xs\n  secure P I D\n\ngoal (1 subgoal):\n 1. (ipurge_tr I D (D y) (ipurge_tr I D (D y) zs @ [None]),\n     ipurge_ref I D (D y) (ipurge_tr I D (D y) zs @ [None]) {})\n    \\<in> futures P xs", "by (simp add: secure_def del: ipurge_tr.simps)"], ["proof (state)\nthis:\n  (ipurge_tr I D (D y) (ipurge_tr I D (D y) zs @ [None]),\n   ipurge_ref I D (D y) (ipurge_tr I D (D y) zs @ [None]) {})\n  \\<in> futures P xs\n\ngoal (2 subgoals):\n 1. xs @ ipurge_tr I D (D y) zs @ [None] \\<in> traces P\n 2. xs @ zs \\<in> traces P", "hence \"(xs @ ipurge_tr I D (D y) (ipurge_tr I D (D y) zs @ [None]), {})\n        \\<in> failures P\""], ["proof (prove)\nusing this:\n  (ipurge_tr I D (D y) (ipurge_tr I D (D y) zs @ [None]),\n   ipurge_ref I D (D y) (ipurge_tr I D (D y) zs @ [None]) {})\n  \\<in> futures P xs\n\ngoal (1 subgoal):\n 1. (xs @ ipurge_tr I D (D y) (ipurge_tr I D (D y) zs @ [None]), {})\n    \\<in> failures P", "by (simp add: futures_def ipurge_ref_def)"], ["proof (state)\nthis:\n  (xs @ ipurge_tr I D (D y) (ipurge_tr I D (D y) zs @ [None]), {})\n  \\<in> failures P\n\ngoal (2 subgoals):\n 1. xs @ ipurge_tr I D (D y) zs @ [None] \\<in> traces P\n 2. xs @ zs \\<in> traces P", "moreover"], ["proof (state)\nthis:\n  (xs @ ipurge_tr I D (D y) (ipurge_tr I D (D y) zs @ [None]), {})\n  \\<in> failures P\n\ngoal (2 subgoals):\n 1. xs @ ipurge_tr I D (D y) zs @ [None] \\<in> traces P\n 2. xs @ zs \\<in> traces P", "have \"sinks I D (D y) (ipurge_tr I D (D y) zs) = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sinks I D (D y) (ipurge_tr I D (D y) zs) = {}", "by (rule sinks_idem)"], ["proof (state)\nthis:\n  sinks I D (D y) (ipurge_tr I D (D y) zs) = {}\n\ngoal (2 subgoals):\n 1. xs @ ipurge_tr I D (D y) zs @ [None] \\<in> traces P\n 2. xs @ zs \\<in> traces P", "hence \"\\<not> ((D y, D None) \\<in> I \\<or>\n        (\\<exists>u \\<in> sinks I D (D y) (ipurge_tr I D (D y) zs). (u, D None) \\<in> I))\""], ["proof (prove)\nusing this:\n  sinks I D (D y) (ipurge_tr I D (D y) zs) = {}\n\ngoal (1 subgoal):\n 1. \\<not> ((D y, D None) \\<in> I \\<or>\n            (\\<exists>u\\<in>sinks I D (D y) (ipurge_tr I D (D y) zs).\n                (u, D None) \\<in> I))", "using N"], ["proof (prove)\nusing this:\n  sinks I D (D y) (ipurge_tr I D (D y) zs) = {}\n  (D y, D None) \\<notin> I \\<and>\n  (\\<forall>u\\<in>sinks I D (D y) zs. (u, D None) \\<notin> I)\n\ngoal (1 subgoal):\n 1. \\<not> ((D y, D None) \\<in> I \\<or>\n            (\\<exists>u\\<in>sinks I D (D y) (ipurge_tr I D (D y) zs).\n                (u, D None) \\<in> I))", "by simp"], ["proof (state)\nthis:\n  \\<not> ((D y, D None) \\<in> I \\<or>\n          (\\<exists>u\\<in>sinks I D (D y) (ipurge_tr I D (D y) zs).\n              (u, D None) \\<in> I))\n\ngoal (2 subgoals):\n 1. xs @ ipurge_tr I D (D y) zs @ [None] \\<in> traces P\n 2. xs @ zs \\<in> traces P", "hence \"D None \\<notin> sinks I D (D y) (ipurge_tr I D (D y) zs @ [None])\""], ["proof (prove)\nusing this:\n  \\<not> ((D y, D None) \\<in> I \\<or>\n          (\\<exists>u\\<in>sinks I D (D y) (ipurge_tr I D (D y) zs).\n              (u, D None) \\<in> I))\n\ngoal (1 subgoal):\n 1. D None \\<notin> sinks I D (D y) (ipurge_tr I D (D y) zs @ [None])", "by (simp only: sinks_interference_eq, simp)"], ["proof (state)\nthis:\n  D None \\<notin> sinks I D (D y) (ipurge_tr I D (D y) zs @ [None])\n\ngoal (2 subgoals):\n 1. xs @ ipurge_tr I D (D y) zs @ [None] \\<in> traces P\n 2. xs @ zs \\<in> traces P", "ultimately"], ["proof (chain)\npicking this:\n  (xs @ ipurge_tr I D (D y) (ipurge_tr I D (D y) zs @ [None]), {})\n  \\<in> failures P\n  D None \\<notin> sinks I D (D y) (ipurge_tr I D (D y) zs @ [None])", "have \"(xs @ ipurge_tr I D (D y) (ipurge_tr I D (D y) zs)\n        @ [None], {}) \\<in> failures P\""], ["proof (prove)\nusing this:\n  (xs @ ipurge_tr I D (D y) (ipurge_tr I D (D y) zs @ [None]), {})\n  \\<in> failures P\n  D None \\<notin> sinks I D (D y) (ipurge_tr I D (D y) zs @ [None])\n\ngoal (1 subgoal):\n 1. (xs @ ipurge_tr I D (D y) (ipurge_tr I D (D y) zs) @ [None], {})\n    \\<in> failures P", "by simp"], ["proof (state)\nthis:\n  (xs @ ipurge_tr I D (D y) (ipurge_tr I D (D y) zs) @ [None], {})\n  \\<in> failures P\n\ngoal (2 subgoals):\n 1. xs @ ipurge_tr I D (D y) zs @ [None] \\<in> traces P\n 2. xs @ zs \\<in> traces P", "hence \"(xs @ ipurge_tr I D (D y) zs @ [None], {}) \\<in> failures P\""], ["proof (prove)\nusing this:\n  (xs @ ipurge_tr I D (D y) (ipurge_tr I D (D y) zs) @ [None], {})\n  \\<in> failures P\n\ngoal (1 subgoal):\n 1. (xs @ ipurge_tr I D (D y) zs @ [None], {}) \\<in> failures P", "by (simp add: ipurge_tr_idem)"], ["proof (state)\nthis:\n  (xs @ ipurge_tr I D (D y) zs @ [None], {}) \\<in> failures P\n\ngoal (2 subgoals):\n 1. xs @ ipurge_tr I D (D y) zs @ [None] \\<in> traces P\n 2. xs @ zs \\<in> traces P", "thus \"xs @ ipurge_tr I D (D y) zs @ [None] \\<in> traces P\""], ["proof (prove)\nusing this:\n  (xs @ ipurge_tr I D (D y) zs @ [None], {}) \\<in> failures P\n\ngoal (1 subgoal):\n 1. xs @ ipurge_tr I D (D y) zs @ [None] \\<in> traces P", "by (rule failures_traces)"], ["proof (state)\nthis:\n  xs @ ipurge_tr I D (D y) zs @ [None] \\<in> traces P\n\ngoal (1 subgoal):\n 1. xs @ zs \\<in> traces P", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. xs @ zs \\<in> traces P", "show \"xs @ zs \\<in> traces P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs @ zs \\<in> traces P", "using E"], ["proof (prove)\nusing this:\n  (xs @ zs, X) \\<in> failures P\n\ngoal (1 subgoal):\n 1. xs @ zs \\<in> traces P", "by (rule failures_traces)"], ["proof (state)\nthis:\n  xs @ zs \\<in> traces P\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  xs @ zs \\<in> sentences P\n\ngoal (1 subgoal):\n 1. \\<lbrakk>xs @ y # ipurge_tr I D (D y) zs \\<in> sentences P;\n     (D y, D None) \\<notin> I \\<and>\n     (\\<forall>u\\<in>sinks I D (D y) zs. (u, D None) \\<notin> I)\\<rbrakk>\n    \\<Longrightarrow> (xs @ y # ipurge_tr I D (D y) zs,\n                       ipurge_ref I D (D y) zs X)\n                      \\<in> seq_comp_failures P Q", "thus ?thesis"], ["proof (prove)\nusing this:\n  xs @ zs \\<in> sentences P\n\ngoal (1 subgoal):\n 1. (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs X)\n    \\<in> seq_comp_failures P Q", "using D"], ["proof (prove)\nusing this:\n  xs @ zs \\<in> sentences P\n  xs @ zs \\<notin> sentences P\n\ngoal (1 subgoal):\n 1. (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs X)\n    \\<in> seq_comp_failures P Q", "by contradiction"], ["proof (state)\nthis:\n  (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs X)\n  \\<in> seq_comp_failures P Q\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs X)\n  \\<in> seq_comp_failures P Q\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma seq_comp_secure_aux_2_case_2:\n  assumes\n    A: \"secure_termination I D\" and\n    B: \"sequential P\" and\n    C: \"secure P I D\" and\n    D: \"secure Q I D\" and\n    E: \"xs @ zs \\<in> sentences P\" and\n    F: \"(xs @ zs, X) \\<in> failures P\" and\n    G: \"([], Y) \\<in> failures Q\" and\n    H: \"(xs @ [y], {}) \\<in> seq_comp_failures P Q\"\n  shows \"(xs @ y # ipurge_tr I D (D y) zs,\n    ipurge_ref I D (D y) zs (insert None X \\<inter> Y)) \\<in> seq_comp_failures P Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (xs @ y # ipurge_tr I D (D y) zs,\n     ipurge_ref I D (D y) zs (insert None X \\<inter> Y))\n    \\<in> seq_comp_failures P Q", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (xs @ y # ipurge_tr I D (D y) zs,\n     ipurge_ref I D (D y) zs (insert None X \\<inter> Y))\n    \\<in> seq_comp_failures P Q", "have \"\\<exists>R. {} = (\\<Union>n \\<in> {..length (xs @ [y])}. \\<Union>W \\<in> R n. W) \\<and>\n    (\\<forall>W \\<in> R 0.\n      xs @ [y] \\<notin> sentences P \\<and> None \\<notin> set (xs @ [y]) \\<and>\n        (xs @ [y], W) \\<in> failures P \\<or>\n      xs @ [y] \\<in> sentences P \\<and> (\\<exists>U V. (xs @ [y], U) \\<in> failures P \\<and>\n        ([], V) \\<in> failures Q \\<and> W = insert None U \\<inter> V)) \\<and>\n    (\\<forall>n \\<in> {0<..length (xs @ [y])}. \\<forall>W \\<in> R n.\n      take (length (xs @ [y]) - n) (xs @ [y]) \\<in> sentences P \\<and>\n      (drop (length (xs @ [y]) - n) (xs @ [y]), W) \\<in> failures Q) \\<and>\n    (\\<exists>n \\<in> {..length (xs @ [y])}. \\<exists>W. W \\<in> R n)\"\n    (is \"\\<exists>R. ?T R\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>R.\n       {} = (\\<Union>n\\<le>length (xs @ [y]). \\<Union>W\\<in>R n. W) \\<and>\n       (\\<forall>W\\<in>R 0.\n           xs @ [y] \\<notin> sentences P \\<and>\n           None \\<notin> set (xs @ [y]) \\<and>\n           (xs @ [y], W) \\<in> failures P \\<or>\n           xs @ [y] \\<in> sentences P \\<and>\n           (\\<exists>U V.\n               (xs @ [y], U) \\<in> failures P \\<and>\n               ([], V) \\<in> failures Q \\<and>\n               W = insert None U \\<inter> V)) \\<and>\n       (\\<forall>n\\<in>{0<..length (xs @ [y])}.\n           \\<forall>W\\<in>R n.\n              take (length (xs @ [y]) - n) (xs @ [y])\n              \\<in> sentences P \\<and>\n              (drop (length (xs @ [y]) - n) (xs @ [y]), W)\n              \\<in> failures Q) \\<and>\n       (\\<exists>n\\<in>{..length (xs @ [y])}. \\<exists>W. W \\<in> R n)", "using H"], ["proof (prove)\nusing this:\n  (xs @ [y], {}) \\<in> seq_comp_failures P Q\n\ngoal (1 subgoal):\n 1. \\<exists>R.\n       {} = (\\<Union>n\\<le>length (xs @ [y]). \\<Union>W\\<in>R n. W) \\<and>\n       (\\<forall>W\\<in>R 0.\n           xs @ [y] \\<notin> sentences P \\<and>\n           None \\<notin> set (xs @ [y]) \\<and>\n           (xs @ [y], W) \\<in> failures P \\<or>\n           xs @ [y] \\<in> sentences P \\<and>\n           (\\<exists>U V.\n               (xs @ [y], U) \\<in> failures P \\<and>\n               ([], V) \\<in> failures Q \\<and>\n               W = insert None U \\<inter> V)) \\<and>\n       (\\<forall>n\\<in>{0<..length (xs @ [y])}.\n           \\<forall>W\\<in>R n.\n              take (length (xs @ [y]) - n) (xs @ [y])\n              \\<in> sentences P \\<and>\n              (drop (length (xs @ [y]) - n) (xs @ [y]), W)\n              \\<in> failures Q) \\<and>\n       (\\<exists>n\\<in>{..length (xs @ [y])}. \\<exists>W. W \\<in> R n)", "by (rule seq_comp_refusals_1)"], ["proof (state)\nthis:\n  \\<exists>R.\n     {} = (\\<Union>n\\<le>length (xs @ [y]). \\<Union>W\\<in>R n. W) \\<and>\n     (\\<forall>W\\<in>R 0.\n         xs @ [y] \\<notin> sentences P \\<and>\n         None \\<notin> set (xs @ [y]) \\<and>\n         (xs @ [y], W) \\<in> failures P \\<or>\n         xs @ [y] \\<in> sentences P \\<and>\n         (\\<exists>U V.\n             (xs @ [y], U) \\<in> failures P \\<and>\n             ([], V) \\<in> failures Q \\<and>\n             W = insert None U \\<inter> V)) \\<and>\n     (\\<forall>n\\<in>{0<..length (xs @ [y])}.\n         \\<forall>W\\<in>R n.\n            take (length (xs @ [y]) - n) (xs @ [y]) \\<in> sentences P \\<and>\n            (drop (length (xs @ [y]) - n) (xs @ [y]), W)\n            \\<in> failures Q) \\<and>\n     (\\<exists>n\\<in>{..length (xs @ [y])}. \\<exists>W. W \\<in> R n)\n\ngoal (1 subgoal):\n 1. (xs @ y # ipurge_tr I D (D y) zs,\n     ipurge_ref I D (D y) zs (insert None X \\<inter> Y))\n    \\<in> seq_comp_failures P Q", "then"], ["proof (chain)\npicking this:\n  \\<exists>R.\n     {} = (\\<Union>n\\<le>length (xs @ [y]). \\<Union>W\\<in>R n. W) \\<and>\n     (\\<forall>W\\<in>R 0.\n         xs @ [y] \\<notin> sentences P \\<and>\n         None \\<notin> set (xs @ [y]) \\<and>\n         (xs @ [y], W) \\<in> failures P \\<or>\n         xs @ [y] \\<in> sentences P \\<and>\n         (\\<exists>U V.\n             (xs @ [y], U) \\<in> failures P \\<and>\n             ([], V) \\<in> failures Q \\<and>\n             W = insert None U \\<inter> V)) \\<and>\n     (\\<forall>n\\<in>{0<..length (xs @ [y])}.\n         \\<forall>W\\<in>R n.\n            take (length (xs @ [y]) - n) (xs @ [y]) \\<in> sentences P \\<and>\n            (drop (length (xs @ [y]) - n) (xs @ [y]), W)\n            \\<in> failures Q) \\<and>\n     (\\<exists>n\\<in>{..length (xs @ [y])}. \\<exists>W. W \\<in> R n)", "obtain R where I: \"?T R\""], ["proof (prove)\nusing this:\n  \\<exists>R.\n     {} = (\\<Union>n\\<le>length (xs @ [y]). \\<Union>W\\<in>R n. W) \\<and>\n     (\\<forall>W\\<in>R 0.\n         xs @ [y] \\<notin> sentences P \\<and>\n         None \\<notin> set (xs @ [y]) \\<and>\n         (xs @ [y], W) \\<in> failures P \\<or>\n         xs @ [y] \\<in> sentences P \\<and>\n         (\\<exists>U V.\n             (xs @ [y], U) \\<in> failures P \\<and>\n             ([], V) \\<in> failures Q \\<and>\n             W = insert None U \\<inter> V)) \\<and>\n     (\\<forall>n\\<in>{0<..length (xs @ [y])}.\n         \\<forall>W\\<in>R n.\n            take (length (xs @ [y]) - n) (xs @ [y]) \\<in> sentences P \\<and>\n            (drop (length (xs @ [y]) - n) (xs @ [y]), W)\n            \\<in> failures Q) \\<and>\n     (\\<exists>n\\<in>{..length (xs @ [y])}. \\<exists>W. W \\<in> R n)\n\ngoal (1 subgoal):\n 1. (\\<And>R.\n        {} = (\\<Union>n\\<le>length (xs @ [y]). \\<Union>W\\<in>R n. W) \\<and>\n        (\\<forall>W\\<in>R 0.\n            xs @ [y] \\<notin> sentences P \\<and>\n            None \\<notin> set (xs @ [y]) \\<and>\n            (xs @ [y], W) \\<in> failures P \\<or>\n            xs @ [y] \\<in> sentences P \\<and>\n            (\\<exists>U V.\n                (xs @ [y], U) \\<in> failures P \\<and>\n                ([], V) \\<in> failures Q \\<and>\n                W = insert None U \\<inter> V)) \\<and>\n        (\\<forall>n\\<in>{0<..length (xs @ [y])}.\n            \\<forall>W\\<in>R n.\n               take (length (xs @ [y]) - n) (xs @ [y])\n               \\<in> sentences P \\<and>\n               (drop (length (xs @ [y]) - n) (xs @ [y]), W)\n               \\<in> failures Q) \\<and>\n        (\\<exists>n\\<in>{..length (xs @ [y])}.\n            \\<exists>W. W \\<in> R n) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  {} = (\\<Union>n\\<le>length (xs @ [y]). \\<Union>W\\<in>R n. W) \\<and>\n  (\\<forall>W\\<in>R 0.\n      xs @ [y] \\<notin> sentences P \\<and>\n      None \\<notin> set (xs @ [y]) \\<and>\n      (xs @ [y], W) \\<in> failures P \\<or>\n      xs @ [y] \\<in> sentences P \\<and>\n      (\\<exists>U V.\n          (xs @ [y], U) \\<in> failures P \\<and>\n          ([], V) \\<in> failures Q \\<and>\n          W = insert None U \\<inter> V)) \\<and>\n  (\\<forall>n\\<in>{0<..length (xs @ [y])}.\n      \\<forall>W\\<in>R n.\n         take (length (xs @ [y]) - n) (xs @ [y]) \\<in> sentences P \\<and>\n         (drop (length (xs @ [y]) - n) (xs @ [y]), W)\n         \\<in> failures Q) \\<and>\n  (\\<exists>n\\<in>{..length (xs @ [y])}. \\<exists>W. W \\<in> R n)\n\ngoal (1 subgoal):\n 1. (xs @ y # ipurge_tr I D (D y) zs,\n     ipurge_ref I D (D y) zs (insert None X \\<inter> Y))\n    \\<in> seq_comp_failures P Q", "hence \"\\<exists>n \\<in> {..length (xs @ [y])}. \\<exists>W. W \\<in> R n\""], ["proof (prove)\nusing this:\n  {} = (\\<Union>n\\<le>length (xs @ [y]). \\<Union>W\\<in>R n. W) \\<and>\n  (\\<forall>W\\<in>R 0.\n      xs @ [y] \\<notin> sentences P \\<and>\n      None \\<notin> set (xs @ [y]) \\<and>\n      (xs @ [y], W) \\<in> failures P \\<or>\n      xs @ [y] \\<in> sentences P \\<and>\n      (\\<exists>U V.\n          (xs @ [y], U) \\<in> failures P \\<and>\n          ([], V) \\<in> failures Q \\<and>\n          W = insert None U \\<inter> V)) \\<and>\n  (\\<forall>n\\<in>{0<..length (xs @ [y])}.\n      \\<forall>W\\<in>R n.\n         take (length (xs @ [y]) - n) (xs @ [y]) \\<in> sentences P \\<and>\n         (drop (length (xs @ [y]) - n) (xs @ [y]), W)\n         \\<in> failures Q) \\<and>\n  (\\<exists>n\\<in>{..length (xs @ [y])}. \\<exists>W. W \\<in> R n)\n\ngoal (1 subgoal):\n 1. \\<exists>n\\<in>{..length (xs @ [y])}. \\<exists>W. W \\<in> R n", "by simp"], ["proof (state)\nthis:\n  \\<exists>n\\<in>{..length (xs @ [y])}. \\<exists>W. W \\<in> R n\n\ngoal (1 subgoal):\n 1. (xs @ y # ipurge_tr I D (D y) zs,\n     ipurge_ref I D (D y) zs (insert None X \\<inter> Y))\n    \\<in> seq_comp_failures P Q", "then"], ["proof (chain)\npicking this:\n  \\<exists>n\\<in>{..length (xs @ [y])}. \\<exists>W. W \\<in> R n", "obtain n where J: \"n \\<in> {..length (xs @ [y])}\" and K: \"\\<exists>W. W \\<in> R n\""], ["proof (prove)\nusing this:\n  \\<exists>n\\<in>{..length (xs @ [y])}. \\<exists>W. W \\<in> R n\n\ngoal (1 subgoal):\n 1. (\\<And>n.\n        \\<lbrakk>n \\<in> {..length (xs @ [y])};\n         \\<exists>W. W \\<in> R n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  n \\<in> {..length (xs @ [y])}\n  \\<exists>W. W \\<in> R n\n\ngoal (1 subgoal):\n 1. (xs @ y # ipurge_tr I D (D y) zs,\n     ipurge_ref I D (D y) zs (insert None X \\<inter> Y))\n    \\<in> seq_comp_failures P Q", "have \"weakly_sequential P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. weakly_sequential P", "using B"], ["proof (prove)\nusing this:\n  sequential P\n\ngoal (1 subgoal):\n 1. weakly_sequential P", "by (rule seq_implies_weakly_seq)"], ["proof (state)\nthis:\n  weakly_sequential P\n\ngoal (1 subgoal):\n 1. (xs @ y # ipurge_tr I D (D y) zs,\n     ipurge_ref I D (D y) zs (insert None X \\<inter> Y))\n    \\<in> seq_comp_failures P Q", "hence L: \"None \\<notin> set (xs @ zs)\""], ["proof (prove)\nusing this:\n  weakly_sequential P\n\ngoal (1 subgoal):\n 1. None \\<notin> set (xs @ zs)", "using E"], ["proof (prove)\nusing this:\n  weakly_sequential P\n  xs @ zs \\<in> sentences P\n\ngoal (1 subgoal):\n 1. None \\<notin> set (xs @ zs)", "by (rule weakly_seq_sentences_none)"], ["proof (state)\nthis:\n  None \\<notin> set (xs @ zs)\n\ngoal (1 subgoal):\n 1. (xs @ y # ipurge_tr I D (D y) zs,\n     ipurge_ref I D (D y) zs (insert None X \\<inter> Y))\n    \\<in> seq_comp_failures P Q", "have \"n = 0 \\<or> n \\<in> {0<..length (xs @ [y])}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n = 0 \\<or> n \\<in> {0<..length (xs @ [y])}", "using J"], ["proof (prove)\nusing this:\n  n \\<in> {..length (xs @ [y])}\n\ngoal (1 subgoal):\n 1. n = 0 \\<or> n \\<in> {0<..length (xs @ [y])}", "by auto"], ["proof (state)\nthis:\n  n = 0 \\<or> n \\<in> {0<..length (xs @ [y])}\n\ngoal (1 subgoal):\n 1. (xs @ y # ipurge_tr I D (D y) zs,\n     ipurge_ref I D (D y) zs (insert None X \\<inter> Y))\n    \\<in> seq_comp_failures P Q", "thus ?thesis"], ["proof (prove)\nusing this:\n  n = 0 \\<or> n \\<in> {0<..length (xs @ [y])}\n\ngoal (1 subgoal):\n 1. (xs @ y # ipurge_tr I D (D y) zs,\n     ipurge_ref I D (D y) zs (insert None X \\<inter> Y))\n    \\<in> seq_comp_failures P Q", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) zs,\n     ipurge_ref I D (D y) zs (insert None X \\<inter> Y))\n    \\<in> seq_comp_failures P Q\n 2. n \\<in> {0<..length (xs @ [y])} \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) zs,\n     ipurge_ref I D (D y) zs (insert None X \\<inter> Y))\n    \\<in> seq_comp_failures P Q", "assume \"n = 0\""], ["proof (state)\nthis:\n  n = 0\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) zs,\n     ipurge_ref I D (D y) zs (insert None X \\<inter> Y))\n    \\<in> seq_comp_failures P Q\n 2. n \\<in> {0<..length (xs @ [y])} \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) zs,\n     ipurge_ref I D (D y) zs (insert None X \\<inter> Y))\n    \\<in> seq_comp_failures P Q", "hence \"\\<exists>W. W \\<in> R 0\""], ["proof (prove)\nusing this:\n  n = 0\n\ngoal (1 subgoal):\n 1. \\<exists>W. W \\<in> R 0", "using K"], ["proof (prove)\nusing this:\n  n = 0\n  \\<exists>W. W \\<in> R n\n\ngoal (1 subgoal):\n 1. \\<exists>W. W \\<in> R 0", "by simp"], ["proof (state)\nthis:\n  \\<exists>W. W \\<in> R 0\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) zs,\n     ipurge_ref I D (D y) zs (insert None X \\<inter> Y))\n    \\<in> seq_comp_failures P Q\n 2. n \\<in> {0<..length (xs @ [y])} \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) zs,\n     ipurge_ref I D (D y) zs (insert None X \\<inter> Y))\n    \\<in> seq_comp_failures P Q", "then"], ["proof (chain)\npicking this:\n  \\<exists>W. W \\<in> R 0", "obtain W where M: \"W \\<in> R 0\""], ["proof (prove)\nusing this:\n  \\<exists>W. W \\<in> R 0\n\ngoal (1 subgoal):\n 1. (\\<And>W. W \\<in> R 0 \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", ".."], ["proof (state)\nthis:\n  W \\<in> R 0\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) zs,\n     ipurge_ref I D (D y) zs (insert None X \\<inter> Y))\n    \\<in> seq_comp_failures P Q\n 2. n \\<in> {0<..length (xs @ [y])} \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) zs,\n     ipurge_ref I D (D y) zs (insert None X \\<inter> Y))\n    \\<in> seq_comp_failures P Q", "have \"\\<forall>W \\<in> R 0.\n      xs @ [y] \\<notin> sentences P \\<and>\n        None \\<notin> set (xs @ [y]) \\<and> (xs @ [y], W) \\<in> failures P \\<or>\n      xs @ [y] \\<in> sentences P \\<and>\n        (\\<exists>U V. (xs @ [y], U) \\<in> failures P \\<and> ([], V) \\<in> failures Q \\<and>\n          W = insert None U \\<inter> V)\"\n      (is \"\\<forall>W \\<in> R 0. ?T W\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>W\\<in>R 0.\n       xs @ [y] \\<notin> sentences P \\<and>\n       None \\<notin> set (xs @ [y]) \\<and>\n       (xs @ [y], W) \\<in> failures P \\<or>\n       xs @ [y] \\<in> sentences P \\<and>\n       (\\<exists>U V.\n           (xs @ [y], U) \\<in> failures P \\<and>\n           ([], V) \\<in> failures Q \\<and> W = insert None U \\<inter> V)", "using I"], ["proof (prove)\nusing this:\n  {} = (\\<Union>n\\<le>length (xs @ [y]). \\<Union>W\\<in>R n. W) \\<and>\n  (\\<forall>W\\<in>R 0.\n      xs @ [y] \\<notin> sentences P \\<and>\n      None \\<notin> set (xs @ [y]) \\<and>\n      (xs @ [y], W) \\<in> failures P \\<or>\n      xs @ [y] \\<in> sentences P \\<and>\n      (\\<exists>U V.\n          (xs @ [y], U) \\<in> failures P \\<and>\n          ([], V) \\<in> failures Q \\<and>\n          W = insert None U \\<inter> V)) \\<and>\n  (\\<forall>n\\<in>{0<..length (xs @ [y])}.\n      \\<forall>W\\<in>R n.\n         take (length (xs @ [y]) - n) (xs @ [y]) \\<in> sentences P \\<and>\n         (drop (length (xs @ [y]) - n) (xs @ [y]), W)\n         \\<in> failures Q) \\<and>\n  (\\<exists>n\\<in>{..length (xs @ [y])}. \\<exists>W. W \\<in> R n)\n\ngoal (1 subgoal):\n 1. \\<forall>W\\<in>R 0.\n       xs @ [y] \\<notin> sentences P \\<and>\n       None \\<notin> set (xs @ [y]) \\<and>\n       (xs @ [y], W) \\<in> failures P \\<or>\n       xs @ [y] \\<in> sentences P \\<and>\n       (\\<exists>U V.\n           (xs @ [y], U) \\<in> failures P \\<and>\n           ([], V) \\<in> failures Q \\<and> W = insert None U \\<inter> V)", "by simp"], ["proof (state)\nthis:\n  \\<forall>W\\<in>R 0.\n     xs @ [y] \\<notin> sentences P \\<and>\n     None \\<notin> set (xs @ [y]) \\<and>\n     (xs @ [y], W) \\<in> failures P \\<or>\n     xs @ [y] \\<in> sentences P \\<and>\n     (\\<exists>U V.\n         (xs @ [y], U) \\<in> failures P \\<and>\n         ([], V) \\<in> failures Q \\<and> W = insert None U \\<inter> V)\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) zs,\n     ipurge_ref I D (D y) zs (insert None X \\<inter> Y))\n    \\<in> seq_comp_failures P Q\n 2. n \\<in> {0<..length (xs @ [y])} \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) zs,\n     ipurge_ref I D (D y) zs (insert None X \\<inter> Y))\n    \\<in> seq_comp_failures P Q", "hence \"?T W\""], ["proof (prove)\nusing this:\n  \\<forall>W\\<in>R 0.\n     xs @ [y] \\<notin> sentences P \\<and>\n     None \\<notin> set (xs @ [y]) \\<and>\n     (xs @ [y], W) \\<in> failures P \\<or>\n     xs @ [y] \\<in> sentences P \\<and>\n     (\\<exists>U V.\n         (xs @ [y], U) \\<in> failures P \\<and>\n         ([], V) \\<in> failures Q \\<and> W = insert None U \\<inter> V)\n\ngoal (1 subgoal):\n 1. xs @ [y] \\<notin> sentences P \\<and>\n    None \\<notin> set (xs @ [y]) \\<and> (xs @ [y], W) \\<in> failures P \\<or>\n    xs @ [y] \\<in> sentences P \\<and>\n    (\\<exists>U V.\n        (xs @ [y], U) \\<in> failures P \\<and>\n        ([], V) \\<in> failures Q \\<and> W = insert None U \\<inter> V)", "using M"], ["proof (prove)\nusing this:\n  \\<forall>W\\<in>R 0.\n     xs @ [y] \\<notin> sentences P \\<and>\n     None \\<notin> set (xs @ [y]) \\<and>\n     (xs @ [y], W) \\<in> failures P \\<or>\n     xs @ [y] \\<in> sentences P \\<and>\n     (\\<exists>U V.\n         (xs @ [y], U) \\<in> failures P \\<and>\n         ([], V) \\<in> failures Q \\<and> W = insert None U \\<inter> V)\n  W \\<in> R 0\n\ngoal (1 subgoal):\n 1. xs @ [y] \\<notin> sentences P \\<and>\n    None \\<notin> set (xs @ [y]) \\<and> (xs @ [y], W) \\<in> failures P \\<or>\n    xs @ [y] \\<in> sentences P \\<and>\n    (\\<exists>U V.\n        (xs @ [y], U) \\<in> failures P \\<and>\n        ([], V) \\<in> failures Q \\<and> W = insert None U \\<inter> V)", ".."], ["proof (state)\nthis:\n  xs @ [y] \\<notin> sentences P \\<and>\n  None \\<notin> set (xs @ [y]) \\<and> (xs @ [y], W) \\<in> failures P \\<or>\n  xs @ [y] \\<in> sentences P \\<and>\n  (\\<exists>U V.\n      (xs @ [y], U) \\<in> failures P \\<and>\n      ([], V) \\<in> failures Q \\<and> W = insert None U \\<inter> V)\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) zs,\n     ipurge_ref I D (D y) zs (insert None X \\<inter> Y))\n    \\<in> seq_comp_failures P Q\n 2. n \\<in> {0<..length (xs @ [y])} \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) zs,\n     ipurge_ref I D (D y) zs (insert None X \\<inter> Y))\n    \\<in> seq_comp_failures P Q", "hence N: \"(xs @ [y], {}) \\<in> failures P \\<and> None \\<notin> set xs \\<and> None \\<noteq> y\""], ["proof (prove)\nusing this:\n  xs @ [y] \\<notin> sentences P \\<and>\n  None \\<notin> set (xs @ [y]) \\<and> (xs @ [y], W) \\<in> failures P \\<or>\n  xs @ [y] \\<in> sentences P \\<and>\n  (\\<exists>U V.\n      (xs @ [y], U) \\<in> failures P \\<and>\n      ([], V) \\<in> failures Q \\<and> W = insert None U \\<inter> V)\n\ngoal (1 subgoal):\n 1. (xs @ [y], {}) \\<in> failures P \\<and>\n    None \\<notin> set xs \\<and> None \\<noteq> y", "proof (cases \"xs @ [y] \\<in> sentences P\", simp_all del: ex_simps,\n     (erule_tac exE)+, (erule_tac [!] conjE)+, simp_all)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>U V.\n       \\<lbrakk>xs @ [y] \\<in> sentences P;\n        \\<exists>Ua.\n           (xs @ [y], Ua) \\<in> failures P \\<and>\n           (\\<exists>Va.\n               ([], Va) \\<in> failures Q \\<and>\n               insert None U \\<inter> V = insert None Ua \\<inter> Va);\n        (xs @ [y], U) \\<in> failures P; ([], V) \\<in> failures Q;\n        W = insert None U \\<inter> V\\<rbrakk>\n       \\<Longrightarrow> (xs @ [y], {}) \\<in> failures P \\<and>\n                         None \\<notin> set xs \\<and> None \\<noteq> y\n 2. \\<lbrakk>xs @ [y] \\<notin> sentences P; None \\<noteq> y;\n     None \\<notin> set xs; (xs @ [y], W) \\<in> failures P\\<rbrakk>\n    \\<Longrightarrow> (xs @ [y], {}) \\<in> failures P", "case False"], ["proof (state)\nthis:\n  xs @ [y] \\<notin> sentences P\n\ngoal (2 subgoals):\n 1. \\<And>U V.\n       \\<lbrakk>xs @ [y] \\<in> sentences P;\n        \\<exists>Ua.\n           (xs @ [y], Ua) \\<in> failures P \\<and>\n           (\\<exists>Va.\n               ([], Va) \\<in> failures Q \\<and>\n               insert None U \\<inter> V = insert None Ua \\<inter> Va);\n        (xs @ [y], U) \\<in> failures P; ([], V) \\<in> failures Q;\n        W = insert None U \\<inter> V\\<rbrakk>\n       \\<Longrightarrow> (xs @ [y], {}) \\<in> failures P \\<and>\n                         None \\<notin> set xs \\<and> None \\<noteq> y\n 2. \\<lbrakk>xs @ [y] \\<notin> sentences P; None \\<noteq> y;\n     None \\<notin> set xs; (xs @ [y], W) \\<in> failures P\\<rbrakk>\n    \\<Longrightarrow> (xs @ [y], {}) \\<in> failures P", "assume \"(xs @ [y], W) \\<in> failures P\""], ["proof (state)\nthis:\n  (xs @ [y], W) \\<in> failures P\n\ngoal (2 subgoals):\n 1. \\<And>U V.\n       \\<lbrakk>xs @ [y] \\<in> sentences P;\n        \\<exists>Ua.\n           (xs @ [y], Ua) \\<in> failures P \\<and>\n           (\\<exists>Va.\n               ([], Va) \\<in> failures Q \\<and>\n               insert None U \\<inter> V = insert None Ua \\<inter> Va);\n        (xs @ [y], U) \\<in> failures P; ([], V) \\<in> failures Q;\n        W = insert None U \\<inter> V\\<rbrakk>\n       \\<Longrightarrow> (xs @ [y], {}) \\<in> failures P \\<and>\n                         None \\<notin> set xs \\<and> None \\<noteq> y\n 2. \\<lbrakk>xs @ [y] \\<notin> sentences P; None \\<noteq> y;\n     None \\<notin> set xs; (xs @ [y], W) \\<in> failures P\\<rbrakk>\n    \\<Longrightarrow> (xs @ [y], {}) \\<in> failures P", "moreover"], ["proof (state)\nthis:\n  (xs @ [y], W) \\<in> failures P\n\ngoal (2 subgoals):\n 1. \\<And>U V.\n       \\<lbrakk>xs @ [y] \\<in> sentences P;\n        \\<exists>Ua.\n           (xs @ [y], Ua) \\<in> failures P \\<and>\n           (\\<exists>Va.\n               ([], Va) \\<in> failures Q \\<and>\n               insert None U \\<inter> V = insert None Ua \\<inter> Va);\n        (xs @ [y], U) \\<in> failures P; ([], V) \\<in> failures Q;\n        W = insert None U \\<inter> V\\<rbrakk>\n       \\<Longrightarrow> (xs @ [y], {}) \\<in> failures P \\<and>\n                         None \\<notin> set xs \\<and> None \\<noteq> y\n 2. \\<lbrakk>xs @ [y] \\<notin> sentences P; None \\<noteq> y;\n     None \\<notin> set xs; (xs @ [y], W) \\<in> failures P\\<rbrakk>\n    \\<Longrightarrow> (xs @ [y], {}) \\<in> failures P", "have \"{} \\<subseteq> W\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {} \\<subseteq> W", ".."], ["proof (state)\nthis:\n  {} \\<subseteq> W\n\ngoal (2 subgoals):\n 1. \\<And>U V.\n       \\<lbrakk>xs @ [y] \\<in> sentences P;\n        \\<exists>Ua.\n           (xs @ [y], Ua) \\<in> failures P \\<and>\n           (\\<exists>Va.\n               ([], Va) \\<in> failures Q \\<and>\n               insert None U \\<inter> V = insert None Ua \\<inter> Va);\n        (xs @ [y], U) \\<in> failures P; ([], V) \\<in> failures Q;\n        W = insert None U \\<inter> V\\<rbrakk>\n       \\<Longrightarrow> (xs @ [y], {}) \\<in> failures P \\<and>\n                         None \\<notin> set xs \\<and> None \\<noteq> y\n 2. \\<lbrakk>xs @ [y] \\<notin> sentences P; None \\<noteq> y;\n     None \\<notin> set xs; (xs @ [y], W) \\<in> failures P\\<rbrakk>\n    \\<Longrightarrow> (xs @ [y], {}) \\<in> failures P", "ultimately"], ["proof (chain)\npicking this:\n  (xs @ [y], W) \\<in> failures P\n  {} \\<subseteq> W", "show \"(xs @ [y], {}) \\<in> failures P\""], ["proof (prove)\nusing this:\n  (xs @ [y], W) \\<in> failures P\n  {} \\<subseteq> W\n\ngoal (1 subgoal):\n 1. (xs @ [y], {}) \\<in> failures P", "by (rule process_rule_3)"], ["proof (state)\nthis:\n  (xs @ [y], {}) \\<in> failures P\n\ngoal (1 subgoal):\n 1. \\<And>U V.\n       \\<lbrakk>xs @ [y] \\<in> sentences P;\n        \\<exists>Ua.\n           (xs @ [y], Ua) \\<in> failures P \\<and>\n           (\\<exists>Va.\n               ([], Va) \\<in> failures Q \\<and>\n               insert None U \\<inter> V = insert None Ua \\<inter> Va);\n        (xs @ [y], U) \\<in> failures P; ([], V) \\<in> failures Q;\n        W = insert None U \\<inter> V\\<rbrakk>\n       \\<Longrightarrow> (xs @ [y], {}) \\<in> failures P \\<and>\n                         None \\<notin> set xs \\<and> None \\<noteq> y", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>U V.\n       \\<lbrakk>xs @ [y] \\<in> sentences P;\n        \\<exists>Ua.\n           (xs @ [y], Ua) \\<in> failures P \\<and>\n           (\\<exists>Va.\n               ([], Va) \\<in> failures Q \\<and>\n               insert None U \\<inter> V = insert None Ua \\<inter> Va);\n        (xs @ [y], U) \\<in> failures P; ([], V) \\<in> failures Q;\n        W = insert None U \\<inter> V\\<rbrakk>\n       \\<Longrightarrow> (xs @ [y], {}) \\<in> failures P \\<and>\n                         None \\<notin> set xs \\<and> None \\<noteq> y", "fix U"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>U V.\n       \\<lbrakk>xs @ [y] \\<in> sentences P;\n        \\<exists>Ua.\n           (xs @ [y], Ua) \\<in> failures P \\<and>\n           (\\<exists>Va.\n               ([], Va) \\<in> failures Q \\<and>\n               insert None U \\<inter> V = insert None Ua \\<inter> Va);\n        (xs @ [y], U) \\<in> failures P; ([], V) \\<in> failures Q;\n        W = insert None U \\<inter> V\\<rbrakk>\n       \\<Longrightarrow> (xs @ [y], {}) \\<in> failures P \\<and>\n                         None \\<notin> set xs \\<and> None \\<noteq> y", "case True"], ["proof (state)\nthis:\n  xs @ [y] \\<in> sentences P\n\ngoal (1 subgoal):\n 1. \\<And>U V.\n       \\<lbrakk>xs @ [y] \\<in> sentences P;\n        \\<exists>Ua.\n           (xs @ [y], Ua) \\<in> failures P \\<and>\n           (\\<exists>Va.\n               ([], Va) \\<in> failures Q \\<and>\n               insert None U \\<inter> V = insert None Ua \\<inter> Va);\n        (xs @ [y], U) \\<in> failures P; ([], V) \\<in> failures Q;\n        W = insert None U \\<inter> V\\<rbrakk>\n       \\<Longrightarrow> (xs @ [y], {}) \\<in> failures P \\<and>\n                         None \\<notin> set xs \\<and> None \\<noteq> y", "assume \"(xs @ [y], U) \\<in> failures P\""], ["proof (state)\nthis:\n  (xs @ [y], U) \\<in> failures P\n\ngoal (1 subgoal):\n 1. \\<And>U V.\n       \\<lbrakk>xs @ [y] \\<in> sentences P;\n        \\<exists>Ua.\n           (xs @ [y], Ua) \\<in> failures P \\<and>\n           (\\<exists>Va.\n               ([], Va) \\<in> failures Q \\<and>\n               insert None U \\<inter> V = insert None Ua \\<inter> Va);\n        (xs @ [y], U) \\<in> failures P; ([], V) \\<in> failures Q;\n        W = insert None U \\<inter> V\\<rbrakk>\n       \\<Longrightarrow> (xs @ [y], {}) \\<in> failures P \\<and>\n                         None \\<notin> set xs \\<and> None \\<noteq> y", "moreover"], ["proof (state)\nthis:\n  (xs @ [y], U) \\<in> failures P\n\ngoal (1 subgoal):\n 1. \\<And>U V.\n       \\<lbrakk>xs @ [y] \\<in> sentences P;\n        \\<exists>Ua.\n           (xs @ [y], Ua) \\<in> failures P \\<and>\n           (\\<exists>Va.\n               ([], Va) \\<in> failures Q \\<and>\n               insert None U \\<inter> V = insert None Ua \\<inter> Va);\n        (xs @ [y], U) \\<in> failures P; ([], V) \\<in> failures Q;\n        W = insert None U \\<inter> V\\<rbrakk>\n       \\<Longrightarrow> (xs @ [y], {}) \\<in> failures P \\<and>\n                         None \\<notin> set xs \\<and> None \\<noteq> y", "have \"{} \\<subseteq> U\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {} \\<subseteq> U", ".."], ["proof (state)\nthis:\n  {} \\<subseteq> U\n\ngoal (1 subgoal):\n 1. \\<And>U V.\n       \\<lbrakk>xs @ [y] \\<in> sentences P;\n        \\<exists>Ua.\n           (xs @ [y], Ua) \\<in> failures P \\<and>\n           (\\<exists>Va.\n               ([], Va) \\<in> failures Q \\<and>\n               insert None U \\<inter> V = insert None Ua \\<inter> Va);\n        (xs @ [y], U) \\<in> failures P; ([], V) \\<in> failures Q;\n        W = insert None U \\<inter> V\\<rbrakk>\n       \\<Longrightarrow> (xs @ [y], {}) \\<in> failures P \\<and>\n                         None \\<notin> set xs \\<and> None \\<noteq> y", "ultimately"], ["proof (chain)\npicking this:\n  (xs @ [y], U) \\<in> failures P\n  {} \\<subseteq> U", "have \"(xs @ [y], {}) \\<in> failures P\""], ["proof (prove)\nusing this:\n  (xs @ [y], U) \\<in> failures P\n  {} \\<subseteq> U\n\ngoal (1 subgoal):\n 1. (xs @ [y], {}) \\<in> failures P", "by (rule process_rule_3)"], ["proof (state)\nthis:\n  (xs @ [y], {}) \\<in> failures P\n\ngoal (1 subgoal):\n 1. \\<And>U V.\n       \\<lbrakk>xs @ [y] \\<in> sentences P;\n        \\<exists>Ua.\n           (xs @ [y], Ua) \\<in> failures P \\<and>\n           (\\<exists>Va.\n               ([], Va) \\<in> failures Q \\<and>\n               insert None U \\<inter> V = insert None Ua \\<inter> Va);\n        (xs @ [y], U) \\<in> failures P; ([], V) \\<in> failures Q;\n        W = insert None U \\<inter> V\\<rbrakk>\n       \\<Longrightarrow> (xs @ [y], {}) \\<in> failures P \\<and>\n                         None \\<notin> set xs \\<and> None \\<noteq> y", "moreover"], ["proof (state)\nthis:\n  (xs @ [y], {}) \\<in> failures P\n\ngoal (1 subgoal):\n 1. \\<And>U V.\n       \\<lbrakk>xs @ [y] \\<in> sentences P;\n        \\<exists>Ua.\n           (xs @ [y], Ua) \\<in> failures P \\<and>\n           (\\<exists>Va.\n               ([], Va) \\<in> failures Q \\<and>\n               insert None U \\<inter> V = insert None Ua \\<inter> Va);\n        (xs @ [y], U) \\<in> failures P; ([], V) \\<in> failures Q;\n        W = insert None U \\<inter> V\\<rbrakk>\n       \\<Longrightarrow> (xs @ [y], {}) \\<in> failures P \\<and>\n                         None \\<notin> set xs \\<and> None \\<noteq> y", "have \"weakly_sequential P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. weakly_sequential P", "using B"], ["proof (prove)\nusing this:\n  sequential P\n\ngoal (1 subgoal):\n 1. weakly_sequential P", "by (rule seq_implies_weakly_seq)"], ["proof (state)\nthis:\n  weakly_sequential P\n\ngoal (1 subgoal):\n 1. \\<And>U V.\n       \\<lbrakk>xs @ [y] \\<in> sentences P;\n        \\<exists>Ua.\n           (xs @ [y], Ua) \\<in> failures P \\<and>\n           (\\<exists>Va.\n               ([], Va) \\<in> failures Q \\<and>\n               insert None U \\<inter> V = insert None Ua \\<inter> Va);\n        (xs @ [y], U) \\<in> failures P; ([], V) \\<in> failures Q;\n        W = insert None U \\<inter> V\\<rbrakk>\n       \\<Longrightarrow> (xs @ [y], {}) \\<in> failures P \\<and>\n                         None \\<notin> set xs \\<and> None \\<noteq> y", "hence \"None \\<notin> set (xs @ [y])\""], ["proof (prove)\nusing this:\n  weakly_sequential P\n\ngoal (1 subgoal):\n 1. None \\<notin> set (xs @ [y])", "using True"], ["proof (prove)\nusing this:\n  weakly_sequential P\n  xs @ [y] \\<in> sentences P\n\ngoal (1 subgoal):\n 1. None \\<notin> set (xs @ [y])", "by (rule weakly_seq_sentences_none)"], ["proof (state)\nthis:\n  None \\<notin> set (xs @ [y])\n\ngoal (1 subgoal):\n 1. \\<And>U V.\n       \\<lbrakk>xs @ [y] \\<in> sentences P;\n        \\<exists>Ua.\n           (xs @ [y], Ua) \\<in> failures P \\<and>\n           (\\<exists>Va.\n               ([], Va) \\<in> failures Q \\<and>\n               insert None U \\<inter> V = insert None Ua \\<inter> Va);\n        (xs @ [y], U) \\<in> failures P; ([], V) \\<in> failures Q;\n        W = insert None U \\<inter> V\\<rbrakk>\n       \\<Longrightarrow> (xs @ [y], {}) \\<in> failures P \\<and>\n                         None \\<notin> set xs \\<and> None \\<noteq> y", "hence \"None \\<notin> set xs \\<and> None \\<noteq> y\""], ["proof (prove)\nusing this:\n  None \\<notin> set (xs @ [y])\n\ngoal (1 subgoal):\n 1. None \\<notin> set xs \\<and> None \\<noteq> y", "by simp"], ["proof (state)\nthis:\n  None \\<notin> set xs \\<and> None \\<noteq> y\n\ngoal (1 subgoal):\n 1. \\<And>U V.\n       \\<lbrakk>xs @ [y] \\<in> sentences P;\n        \\<exists>Ua.\n           (xs @ [y], Ua) \\<in> failures P \\<and>\n           (\\<exists>Va.\n               ([], Va) \\<in> failures Q \\<and>\n               insert None U \\<inter> V = insert None Ua \\<inter> Va);\n        (xs @ [y], U) \\<in> failures P; ([], V) \\<in> failures Q;\n        W = insert None U \\<inter> V\\<rbrakk>\n       \\<Longrightarrow> (xs @ [y], {}) \\<in> failures P \\<and>\n                         None \\<notin> set xs \\<and> None \\<noteq> y", "ultimately"], ["proof (chain)\npicking this:\n  (xs @ [y], {}) \\<in> failures P\n  None \\<notin> set xs \\<and> None \\<noteq> y", "show ?thesis"], ["proof (prove)\nusing this:\n  (xs @ [y], {}) \\<in> failures P\n  None \\<notin> set xs \\<and> None \\<noteq> y\n\ngoal (1 subgoal):\n 1. (xs @ [y], {}) \\<in> failures P \\<and>\n    None \\<notin> set xs \\<and> None \\<noteq> y", ".."], ["proof (state)\nthis:\n  (xs @ [y], {}) \\<in> failures P \\<and>\n  None \\<notin> set xs \\<and> None \\<noteq> y\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (xs @ [y], {}) \\<in> failures P \\<and>\n  None \\<notin> set xs \\<and> None \\<noteq> y\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) zs,\n     ipurge_ref I D (D y) zs (insert None X \\<inter> Y))\n    \\<in> seq_comp_failures P Q\n 2. n \\<in> {0<..length (xs @ [y])} \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) zs,\n     ipurge_ref I D (D y) zs (insert None X \\<inter> Y))\n    \\<in> seq_comp_failures P Q", "have \"(zs, X) \\<in> futures P xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (zs, X) \\<in> futures P xs", "using F"], ["proof (prove)\nusing this:\n  (xs @ zs, X) \\<in> failures P\n\ngoal (1 subgoal):\n 1. (zs, X) \\<in> futures P xs", "by (simp add: futures_def)"], ["proof (state)\nthis:\n  (zs, X) \\<in> futures P xs\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) zs,\n     ipurge_ref I D (D y) zs (insert None X \\<inter> Y))\n    \\<in> seq_comp_failures P Q\n 2. n \\<in> {0<..length (xs @ [y])} \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) zs,\n     ipurge_ref I D (D y) zs (insert None X \\<inter> Y))\n    \\<in> seq_comp_failures P Q", "moreover"], ["proof (state)\nthis:\n  (zs, X) \\<in> futures P xs\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) zs,\n     ipurge_ref I D (D y) zs (insert None X \\<inter> Y))\n    \\<in> seq_comp_failures P Q\n 2. n \\<in> {0<..length (xs @ [y])} \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) zs,\n     ipurge_ref I D (D y) zs (insert None X \\<inter> Y))\n    \\<in> seq_comp_failures P Q", "have \"([y], {}) \\<in> futures P xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ([y], {}) \\<in> futures P xs", "using N"], ["proof (prove)\nusing this:\n  (xs @ [y], {}) \\<in> failures P \\<and>\n  None \\<notin> set xs \\<and> None \\<noteq> y\n\ngoal (1 subgoal):\n 1. ([y], {}) \\<in> futures P xs", "by (simp add: futures_def)"], ["proof (state)\nthis:\n  ([y], {}) \\<in> futures P xs\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) zs,\n     ipurge_ref I D (D y) zs (insert None X \\<inter> Y))\n    \\<in> seq_comp_failures P Q\n 2. n \\<in> {0<..length (xs @ [y])} \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) zs,\n     ipurge_ref I D (D y) zs (insert None X \\<inter> Y))\n    \\<in> seq_comp_failures P Q", "ultimately"], ["proof (chain)\npicking this:\n  (zs, X) \\<in> futures P xs\n  ([y], {}) \\<in> futures P xs", "have \"(y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs X)\n      \\<in> futures P xs\""], ["proof (prove)\nusing this:\n  (zs, X) \\<in> futures P xs\n  ([y], {}) \\<in> futures P xs\n\ngoal (1 subgoal):\n 1. (y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs X)\n    \\<in> futures P xs", "using C"], ["proof (prove)\nusing this:\n  (zs, X) \\<in> futures P xs\n  ([y], {}) \\<in> futures P xs\n  secure P I D\n\ngoal (1 subgoal):\n 1. (y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs X)\n    \\<in> futures P xs", "by (simp add: secure_def)"], ["proof (state)\nthis:\n  (y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs X) \\<in> futures P xs\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) zs,\n     ipurge_ref I D (D y) zs (insert None X \\<inter> Y))\n    \\<in> seq_comp_failures P Q\n 2. n \\<in> {0<..length (xs @ [y])} \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) zs,\n     ipurge_ref I D (D y) zs (insert None X \\<inter> Y))\n    \\<in> seq_comp_failures P Q", "hence O: \"(xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs X)\n      \\<in> failures P\""], ["proof (prove)\nusing this:\n  (y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs X) \\<in> futures P xs\n\ngoal (1 subgoal):\n 1. (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs X)\n    \\<in> failures P", "by (simp add: futures_def)"], ["proof (state)\nthis:\n  (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs X)\n  \\<in> failures P\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) zs,\n     ipurge_ref I D (D y) zs (insert None X \\<inter> Y))\n    \\<in> seq_comp_failures P Q\n 2. n \\<in> {0<..length (xs @ [y])} \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) zs,\n     ipurge_ref I D (D y) zs (insert None X \\<inter> Y))\n    \\<in> seq_comp_failures P Q", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (xs @ y # ipurge_tr I D (D y) zs,\n     ipurge_ref I D (D y) zs (insert None X \\<inter> Y))\n    \\<in> seq_comp_failures P Q", "proof (cases \"xs @ y # ipurge_tr I D (D y) zs \\<in> sentences P\",\n     case_tac [2] \"(D y, D None) \\<in> I \\<or>\n      (\\<exists>u \\<in> sinks I D (D y) zs. (u, D None) \\<in> I)\",\n     simp_all)"], ["proof (state)\ngoal (3 subgoals):\n 1. xs @ y # ipurge_tr I D (D y) zs \\<in> sentences P \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) zs,\n     ipurge_ref I D (D y) zs (insert None X \\<inter> Y))\n    \\<in> seq_comp_failures P Q\n 2. \\<lbrakk>xs @ y # ipurge_tr I D (D y) zs \\<notin> sentences P;\n     (D y, D None) \\<in> I \\<or>\n     (\\<exists>u\\<in>sinks I D (D y) zs. (u, D None) \\<in> I)\\<rbrakk>\n    \\<Longrightarrow> (xs @ y # ipurge_tr I D (D y) zs,\n                       ipurge_ref I D (D y) zs (insert None X \\<inter> Y))\n                      \\<in> seq_comp_failures P Q\n 3. \\<lbrakk>xs @ y # ipurge_tr I D (D y) zs \\<notin> sentences P;\n     (D y, D None) \\<notin> I \\<and>\n     (\\<forall>u\\<in>sinks I D (D y) zs. (u, D None) \\<notin> I)\\<rbrakk>\n    \\<Longrightarrow> (xs @ y # ipurge_tr I D (D y) zs,\n                       ipurge_ref I D (D y) zs (insert None X \\<inter> Y))\n                      \\<in> seq_comp_failures P Q", "assume P: \"xs @ y # ipurge_tr I D (D y) zs \\<in> sentences P\""], ["proof (state)\nthis:\n  xs @ y # ipurge_tr I D (D y) zs \\<in> sentences P\n\ngoal (3 subgoals):\n 1. xs @ y # ipurge_tr I D (D y) zs \\<in> sentences P \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) zs,\n     ipurge_ref I D (D y) zs (insert None X \\<inter> Y))\n    \\<in> seq_comp_failures P Q\n 2. \\<lbrakk>xs @ y # ipurge_tr I D (D y) zs \\<notin> sentences P;\n     (D y, D None) \\<in> I \\<or>\n     (\\<exists>u\\<in>sinks I D (D y) zs. (u, D None) \\<in> I)\\<rbrakk>\n    \\<Longrightarrow> (xs @ y # ipurge_tr I D (D y) zs,\n                       ipurge_ref I D (D y) zs (insert None X \\<inter> Y))\n                      \\<in> seq_comp_failures P Q\n 3. \\<lbrakk>xs @ y # ipurge_tr I D (D y) zs \\<notin> sentences P;\n     (D y, D None) \\<notin> I \\<and>\n     (\\<forall>u\\<in>sinks I D (D y) zs. (u, D None) \\<notin> I)\\<rbrakk>\n    \\<Longrightarrow> (xs @ y # ipurge_tr I D (D y) zs,\n                       ipurge_ref I D (D y) zs (insert None X \\<inter> Y))\n                      \\<in> seq_comp_failures P Q", "have \"ipurge_ref I D (D y) zs Y \\<subseteq> Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ipurge_ref I D (D y) zs Y \\<subseteq> Y", "by (rule ipurge_ref_subset)"], ["proof (state)\nthis:\n  ipurge_ref I D (D y) zs Y \\<subseteq> Y\n\ngoal (3 subgoals):\n 1. xs @ y # ipurge_tr I D (D y) zs \\<in> sentences P \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) zs,\n     ipurge_ref I D (D y) zs (insert None X \\<inter> Y))\n    \\<in> seq_comp_failures P Q\n 2. \\<lbrakk>xs @ y # ipurge_tr I D (D y) zs \\<notin> sentences P;\n     (D y, D None) \\<in> I \\<or>\n     (\\<exists>u\\<in>sinks I D (D y) zs. (u, D None) \\<in> I)\\<rbrakk>\n    \\<Longrightarrow> (xs @ y # ipurge_tr I D (D y) zs,\n                       ipurge_ref I D (D y) zs (insert None X \\<inter> Y))\n                      \\<in> seq_comp_failures P Q\n 3. \\<lbrakk>xs @ y # ipurge_tr I D (D y) zs \\<notin> sentences P;\n     (D y, D None) \\<notin> I \\<and>\n     (\\<forall>u\\<in>sinks I D (D y) zs. (u, D None) \\<notin> I)\\<rbrakk>\n    \\<Longrightarrow> (xs @ y # ipurge_tr I D (D y) zs,\n                       ipurge_ref I D (D y) zs (insert None X \\<inter> Y))\n                      \\<in> seq_comp_failures P Q", "with G"], ["proof (chain)\npicking this:\n  ([], Y) \\<in> failures Q\n  ipurge_ref I D (D y) zs Y \\<subseteq> Y", "have \"([], ipurge_ref I D (D y) zs Y) \\<in> failures Q\""], ["proof (prove)\nusing this:\n  ([], Y) \\<in> failures Q\n  ipurge_ref I D (D y) zs Y \\<subseteq> Y\n\ngoal (1 subgoal):\n 1. ([], ipurge_ref I D (D y) zs Y) \\<in> failures Q", "by (rule process_rule_3)"], ["proof (state)\nthis:\n  ([], ipurge_ref I D (D y) zs Y) \\<in> failures Q\n\ngoal (3 subgoals):\n 1. xs @ y # ipurge_tr I D (D y) zs \\<in> sentences P \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) zs,\n     ipurge_ref I D (D y) zs (insert None X \\<inter> Y))\n    \\<in> seq_comp_failures P Q\n 2. \\<lbrakk>xs @ y # ipurge_tr I D (D y) zs \\<notin> sentences P;\n     (D y, D None) \\<in> I \\<or>\n     (\\<exists>u\\<in>sinks I D (D y) zs. (u, D None) \\<in> I)\\<rbrakk>\n    \\<Longrightarrow> (xs @ y # ipurge_tr I D (D y) zs,\n                       ipurge_ref I D (D y) zs (insert None X \\<inter> Y))\n                      \\<in> seq_comp_failures P Q\n 3. \\<lbrakk>xs @ y # ipurge_tr I D (D y) zs \\<notin> sentences P;\n     (D y, D None) \\<notin> I \\<and>\n     (\\<forall>u\\<in>sinks I D (D y) zs. (u, D None) \\<notin> I)\\<rbrakk>\n    \\<Longrightarrow> (xs @ y # ipurge_tr I D (D y) zs,\n                       ipurge_ref I D (D y) zs (insert None X \\<inter> Y))\n                      \\<in> seq_comp_failures P Q", "with P and O"], ["proof (chain)\npicking this:\n  xs @ y # ipurge_tr I D (D y) zs \\<in> sentences P\n  (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs X)\n  \\<in> failures P\n  ([], ipurge_ref I D (D y) zs Y) \\<in> failures Q", "have \"(xs @ y # ipurge_tr I D (D y) zs,\n        insert None (ipurge_ref I D (D y) zs X) \\<inter> ipurge_ref I D (D y) zs Y)\n        \\<in> seq_comp_failures P Q\""], ["proof (prove)\nusing this:\n  xs @ y # ipurge_tr I D (D y) zs \\<in> sentences P\n  (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs X)\n  \\<in> failures P\n  ([], ipurge_ref I D (D y) zs Y) \\<in> failures Q\n\ngoal (1 subgoal):\n 1. (xs @ y # ipurge_tr I D (D y) zs,\n     insert None (ipurge_ref I D (D y) zs X) \\<inter>\n     ipurge_ref I D (D y) zs Y)\n    \\<in> seq_comp_failures P Q", "by (rule SCF_R2)"], ["proof (state)\nthis:\n  (xs @ y # ipurge_tr I D (D y) zs,\n   insert None (ipurge_ref I D (D y) zs X) \\<inter>\n   ipurge_ref I D (D y) zs Y)\n  \\<in> seq_comp_failures P Q\n\ngoal (3 subgoals):\n 1. xs @ y # ipurge_tr I D (D y) zs \\<in> sentences P \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) zs,\n     ipurge_ref I D (D y) zs (insert None X \\<inter> Y))\n    \\<in> seq_comp_failures P Q\n 2. \\<lbrakk>xs @ y # ipurge_tr I D (D y) zs \\<notin> sentences P;\n     (D y, D None) \\<in> I \\<or>\n     (\\<exists>u\\<in>sinks I D (D y) zs. (u, D None) \\<in> I)\\<rbrakk>\n    \\<Longrightarrow> (xs @ y # ipurge_tr I D (D y) zs,\n                       ipurge_ref I D (D y) zs (insert None X \\<inter> Y))\n                      \\<in> seq_comp_failures P Q\n 3. \\<lbrakk>xs @ y # ipurge_tr I D (D y) zs \\<notin> sentences P;\n     (D y, D None) \\<notin> I \\<and>\n     (\\<forall>u\\<in>sinks I D (D y) zs. (u, D None) \\<notin> I)\\<rbrakk>\n    \\<Longrightarrow> (xs @ y # ipurge_tr I D (D y) zs,\n                       ipurge_ref I D (D y) zs (insert None X \\<inter> Y))\n                      \\<in> seq_comp_failures P Q", "moreover"], ["proof (state)\nthis:\n  (xs @ y # ipurge_tr I D (D y) zs,\n   insert None (ipurge_ref I D (D y) zs X) \\<inter>\n   ipurge_ref I D (D y) zs Y)\n  \\<in> seq_comp_failures P Q\n\ngoal (3 subgoals):\n 1. xs @ y # ipurge_tr I D (D y) zs \\<in> sentences P \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) zs,\n     ipurge_ref I D (D y) zs (insert None X \\<inter> Y))\n    \\<in> seq_comp_failures P Q\n 2. \\<lbrakk>xs @ y # ipurge_tr I D (D y) zs \\<notin> sentences P;\n     (D y, D None) \\<in> I \\<or>\n     (\\<exists>u\\<in>sinks I D (D y) zs. (u, D None) \\<in> I)\\<rbrakk>\n    \\<Longrightarrow> (xs @ y # ipurge_tr I D (D y) zs,\n                       ipurge_ref I D (D y) zs (insert None X \\<inter> Y))\n                      \\<in> seq_comp_failures P Q\n 3. \\<lbrakk>xs @ y # ipurge_tr I D (D y) zs \\<notin> sentences P;\n     (D y, D None) \\<notin> I \\<and>\n     (\\<forall>u\\<in>sinks I D (D y) zs. (u, D None) \\<notin> I)\\<rbrakk>\n    \\<Longrightarrow> (xs @ y # ipurge_tr I D (D y) zs,\n                       ipurge_ref I D (D y) zs (insert None X \\<inter> Y))\n                      \\<in> seq_comp_failures P Q", "have\n       \"ipurge_ref I D (D y) zs (insert None X) \\<inter> ipurge_ref I D (D y) zs Y \\<subseteq>\n        insert None (ipurge_ref I D (D y) zs X) \\<inter> ipurge_ref I D (D y) zs Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ipurge_ref I D (D y) zs (insert None X) \\<inter>\n    ipurge_ref I D (D y) zs Y\n    \\<subseteq> insert None (ipurge_ref I D (D y) zs X) \\<inter>\n                ipurge_ref I D (D y) zs Y", "proof (rule subsetI, simp del: insert_iff, erule conjE)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> ipurge_ref I D (D y) zs (insert None X);\n        x \\<in> ipurge_ref I D (D y) zs Y\\<rbrakk>\n       \\<Longrightarrow> x \\<in> insert None (ipurge_ref I D (D y) zs X)", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> ipurge_ref I D (D y) zs (insert None X);\n        x \\<in> ipurge_ref I D (D y) zs Y\\<rbrakk>\n       \\<Longrightarrow> x \\<in> insert None (ipurge_ref I D (D y) zs X)", "have \"ipurge_ref I D (D y) zs (insert None X) \\<subseteq>\n          insert None (ipurge_ref I D (D y) zs X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ipurge_ref I D (D y) zs (insert None X)\n    \\<subseteq> insert None (ipurge_ref I D (D y) zs X)", "by (rule ipurge_ref_subset_insert)"], ["proof (state)\nthis:\n  ipurge_ref I D (D y) zs (insert None X)\n  \\<subseteq> insert None (ipurge_ref I D (D y) zs X)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> ipurge_ref I D (D y) zs (insert None X);\n        x \\<in> ipurge_ref I D (D y) zs Y\\<rbrakk>\n       \\<Longrightarrow> x \\<in> insert None (ipurge_ref I D (D y) zs X)", "moreover"], ["proof (state)\nthis:\n  ipurge_ref I D (D y) zs (insert None X)\n  \\<subseteq> insert None (ipurge_ref I D (D y) zs X)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> ipurge_ref I D (D y) zs (insert None X);\n        x \\<in> ipurge_ref I D (D y) zs Y\\<rbrakk>\n       \\<Longrightarrow> x \\<in> insert None (ipurge_ref I D (D y) zs X)", "assume \"x \\<in> ipurge_ref I D (D y) zs (insert None X)\""], ["proof (state)\nthis:\n  x \\<in> ipurge_ref I D (D y) zs (insert None X)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> ipurge_ref I D (D y) zs (insert None X);\n        x \\<in> ipurge_ref I D (D y) zs Y\\<rbrakk>\n       \\<Longrightarrow> x \\<in> insert None (ipurge_ref I D (D y) zs X)", "ultimately"], ["proof (chain)\npicking this:\n  ipurge_ref I D (D y) zs (insert None X)\n  \\<subseteq> insert None (ipurge_ref I D (D y) zs X)\n  x \\<in> ipurge_ref I D (D y) zs (insert None X)", "show \"x \\<in> insert None (ipurge_ref I D (D y) zs X)\""], ["proof (prove)\nusing this:\n  ipurge_ref I D (D y) zs (insert None X)\n  \\<subseteq> insert None (ipurge_ref I D (D y) zs X)\n  x \\<in> ipurge_ref I D (D y) zs (insert None X)\n\ngoal (1 subgoal):\n 1. x \\<in> insert None (ipurge_ref I D (D y) zs X)", ".."], ["proof (state)\nthis:\n  x \\<in> insert None (ipurge_ref I D (D y) zs X)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ipurge_ref I D (D y) zs (insert None X) \\<inter> ipurge_ref I D (D y) zs Y\n  \\<subseteq> insert None (ipurge_ref I D (D y) zs X) \\<inter>\n              ipurge_ref I D (D y) zs Y\n\ngoal (3 subgoals):\n 1. xs @ y # ipurge_tr I D (D y) zs \\<in> sentences P \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) zs,\n     ipurge_ref I D (D y) zs (insert None X \\<inter> Y))\n    \\<in> seq_comp_failures P Q\n 2. \\<lbrakk>xs @ y # ipurge_tr I D (D y) zs \\<notin> sentences P;\n     (D y, D None) \\<in> I \\<or>\n     (\\<exists>u\\<in>sinks I D (D y) zs. (u, D None) \\<in> I)\\<rbrakk>\n    \\<Longrightarrow> (xs @ y # ipurge_tr I D (D y) zs,\n                       ipurge_ref I D (D y) zs (insert None X \\<inter> Y))\n                      \\<in> seq_comp_failures P Q\n 3. \\<lbrakk>xs @ y # ipurge_tr I D (D y) zs \\<notin> sentences P;\n     (D y, D None) \\<notin> I \\<and>\n     (\\<forall>u\\<in>sinks I D (D y) zs. (u, D None) \\<notin> I)\\<rbrakk>\n    \\<Longrightarrow> (xs @ y # ipurge_tr I D (D y) zs,\n                       ipurge_ref I D (D y) zs (insert None X \\<inter> Y))\n                      \\<in> seq_comp_failures P Q", "ultimately"], ["proof (chain)\npicking this:\n  (xs @ y # ipurge_tr I D (D y) zs,\n   insert None (ipurge_ref I D (D y) zs X) \\<inter>\n   ipurge_ref I D (D y) zs Y)\n  \\<in> seq_comp_failures P Q\n  ipurge_ref I D (D y) zs (insert None X) \\<inter> ipurge_ref I D (D y) zs Y\n  \\<subseteq> insert None (ipurge_ref I D (D y) zs X) \\<inter>\n              ipurge_ref I D (D y) zs Y", "have \"(xs @ y # ipurge_tr I D (D y) zs,\n        ipurge_ref I D (D y) zs (insert None X) \\<inter> ipurge_ref I D (D y) zs Y)\n        \\<in> seq_comp_failures P Q\""], ["proof (prove)\nusing this:\n  (xs @ y # ipurge_tr I D (D y) zs,\n   insert None (ipurge_ref I D (D y) zs X) \\<inter>\n   ipurge_ref I D (D y) zs Y)\n  \\<in> seq_comp_failures P Q\n  ipurge_ref I D (D y) zs (insert None X) \\<inter> ipurge_ref I D (D y) zs Y\n  \\<subseteq> insert None (ipurge_ref I D (D y) zs X) \\<inter>\n              ipurge_ref I D (D y) zs Y\n\ngoal (1 subgoal):\n 1. (xs @ y # ipurge_tr I D (D y) zs,\n     ipurge_ref I D (D y) zs (insert None X) \\<inter>\n     ipurge_ref I D (D y) zs Y)\n    \\<in> seq_comp_failures P Q", "by (rule seq_comp_prop_3)"], ["proof (state)\nthis:\n  (xs @ y # ipurge_tr I D (D y) zs,\n   ipurge_ref I D (D y) zs (insert None X) \\<inter>\n   ipurge_ref I D (D y) zs Y)\n  \\<in> seq_comp_failures P Q\n\ngoal (3 subgoals):\n 1. xs @ y # ipurge_tr I D (D y) zs \\<in> sentences P \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) zs,\n     ipurge_ref I D (D y) zs (insert None X \\<inter> Y))\n    \\<in> seq_comp_failures P Q\n 2. \\<lbrakk>xs @ y # ipurge_tr I D (D y) zs \\<notin> sentences P;\n     (D y, D None) \\<in> I \\<or>\n     (\\<exists>u\\<in>sinks I D (D y) zs. (u, D None) \\<in> I)\\<rbrakk>\n    \\<Longrightarrow> (xs @ y # ipurge_tr I D (D y) zs,\n                       ipurge_ref I D (D y) zs (insert None X \\<inter> Y))\n                      \\<in> seq_comp_failures P Q\n 3. \\<lbrakk>xs @ y # ipurge_tr I D (D y) zs \\<notin> sentences P;\n     (D y, D None) \\<notin> I \\<and>\n     (\\<forall>u\\<in>sinks I D (D y) zs. (u, D None) \\<notin> I)\\<rbrakk>\n    \\<Longrightarrow> (xs @ y # ipurge_tr I D (D y) zs,\n                       ipurge_ref I D (D y) zs (insert None X \\<inter> Y))\n                      \\<in> seq_comp_failures P Q", "thus ?thesis"], ["proof (prove)\nusing this:\n  (xs @ y # ipurge_tr I D (D y) zs,\n   ipurge_ref I D (D y) zs (insert None X) \\<inter>\n   ipurge_ref I D (D y) zs Y)\n  \\<in> seq_comp_failures P Q\n\ngoal (1 subgoal):\n 1. (xs @ y # ipurge_tr I D (D y) zs,\n     ipurge_ref I D (D y) zs (insert None X \\<inter> Y))\n    \\<in> seq_comp_failures P Q", "by (simp add: ipurge_ref_distrib_inter)"], ["proof (state)\nthis:\n  (xs @ y # ipurge_tr I D (D y) zs,\n   ipurge_ref I D (D y) zs (insert None X \\<inter> Y))\n  \\<in> seq_comp_failures P Q\n\ngoal (2 subgoals):\n 1. \\<lbrakk>xs @ y # ipurge_tr I D (D y) zs \\<notin> sentences P;\n     (D y, D None) \\<in> I \\<or>\n     (\\<exists>u\\<in>sinks I D (D y) zs. (u, D None) \\<in> I)\\<rbrakk>\n    \\<Longrightarrow> (xs @ y # ipurge_tr I D (D y) zs,\n                       ipurge_ref I D (D y) zs (insert None X \\<inter> Y))\n                      \\<in> seq_comp_failures P Q\n 2. \\<lbrakk>xs @ y # ipurge_tr I D (D y) zs \\<notin> sentences P;\n     (D y, D None) \\<notin> I \\<and>\n     (\\<forall>u\\<in>sinks I D (D y) zs. (u, D None) \\<notin> I)\\<rbrakk>\n    \\<Longrightarrow> (xs @ y # ipurge_tr I D (D y) zs,\n                       ipurge_ref I D (D y) zs (insert None X \\<inter> Y))\n                      \\<in> seq_comp_failures P Q", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>xs @ y # ipurge_tr I D (D y) zs \\<notin> sentences P;\n     (D y, D None) \\<in> I \\<or>\n     (\\<exists>u\\<in>sinks I D (D y) zs. (u, D None) \\<in> I)\\<rbrakk>\n    \\<Longrightarrow> (xs @ y # ipurge_tr I D (D y) zs,\n                       ipurge_ref I D (D y) zs (insert None X \\<inter> Y))\n                      \\<in> seq_comp_failures P Q\n 2. \\<lbrakk>xs @ y # ipurge_tr I D (D y) zs \\<notin> sentences P;\n     (D y, D None) \\<notin> I \\<and>\n     (\\<forall>u\\<in>sinks I D (D y) zs. (u, D None) \\<notin> I)\\<rbrakk>\n    \\<Longrightarrow> (xs @ y # ipurge_tr I D (D y) zs,\n                       ipurge_ref I D (D y) zs (insert None X \\<inter> Y))\n                      \\<in> seq_comp_failures P Q", "assume\n        P: \"xs @ y # ipurge_tr I D (D y) zs \\<notin> sentences P\" and\n        Q: \"(D y, D None) \\<in> I \\<or> (\\<exists>u \\<in> sinks I D (D y) zs. (u, D None) \\<in> I)\""], ["proof (state)\nthis:\n  xs @ y # ipurge_tr I D (D y) zs \\<notin> sentences P\n  (D y, D None) \\<in> I \\<or>\n  (\\<exists>u\\<in>sinks I D (D y) zs. (u, D None) \\<in> I)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>xs @ y # ipurge_tr I D (D y) zs \\<notin> sentences P;\n     (D y, D None) \\<in> I \\<or>\n     (\\<exists>u\\<in>sinks I D (D y) zs. (u, D None) \\<in> I)\\<rbrakk>\n    \\<Longrightarrow> (xs @ y # ipurge_tr I D (D y) zs,\n                       ipurge_ref I D (D y) zs (insert None X \\<inter> Y))\n                      \\<in> seq_comp_failures P Q\n 2. \\<lbrakk>xs @ y # ipurge_tr I D (D y) zs \\<notin> sentences P;\n     (D y, D None) \\<notin> I \\<and>\n     (\\<forall>u\\<in>sinks I D (D y) zs. (u, D None) \\<notin> I)\\<rbrakk>\n    \\<Longrightarrow> (xs @ y # ipurge_tr I D (D y) zs,\n                       ipurge_ref I D (D y) zs (insert None X \\<inter> Y))\n                      \\<in> seq_comp_failures P Q", "have \"ipurge_ref I D (D y) zs (insert None X \\<inter> Y) = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ipurge_ref I D (D y) zs (insert None X \\<inter> Y) = {}", "proof (rule disjE [OF Q], erule_tac [2] bexE)"], ["proof (state)\ngoal (2 subgoals):\n 1. (D y, D None) \\<in> I \\<Longrightarrow>\n    ipurge_ref I D (D y) zs (insert None X \\<inter> Y) = {}\n 2. \\<And>u.\n       \\<lbrakk>u \\<in> sinks I D (D y) zs; (u, D None) \\<in> I\\<rbrakk>\n       \\<Longrightarrow> ipurge_ref I D (D y) zs\n                          (insert None X \\<inter> Y) =\n                         {}", "assume R: \"(D y, D None) \\<in> I\""], ["proof (state)\nthis:\n  (D y, D None) \\<in> I\n\ngoal (2 subgoals):\n 1. (D y, D None) \\<in> I \\<Longrightarrow>\n    ipurge_ref I D (D y) zs (insert None X \\<inter> Y) = {}\n 2. \\<And>u.\n       \\<lbrakk>u \\<in> sinks I D (D y) zs; (u, D None) \\<in> I\\<rbrakk>\n       \\<Longrightarrow> ipurge_ref I D (D y) zs\n                          (insert None X \\<inter> Y) =\n                         {}", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. ipurge_ref I D (D y) zs (insert None X \\<inter> Y) = {}", "proof (rule ipurge_ref_empty [of \"D y\"], simp)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> insert None X \\<inter> Y \\<Longrightarrow> (D y, D x) \\<in> I", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> insert None X \\<inter> Y \\<Longrightarrow> (D y, D x) \\<in> I", "have \"(D y, D None) \\<in> I \\<and> y \\<noteq> None \\<longrightarrow> (\\<forall>u \\<in> range D. (D y, u) \\<in> I)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (D y, D None) \\<in> I \\<and> y \\<noteq> None \\<longrightarrow>\n    (\\<forall>u\\<in>range D. (D y, u) \\<in> I)", "using A"], ["proof (prove)\nusing this:\n  secure_termination I D\n\ngoal (1 subgoal):\n 1. (D y, D None) \\<in> I \\<and> y \\<noteq> None \\<longrightarrow>\n    (\\<forall>u\\<in>range D. (D y, u) \\<in> I)", "by (simp add: secure_termination_def)"], ["proof (state)\nthis:\n  (D y, D None) \\<in> I \\<and> y \\<noteq> None \\<longrightarrow>\n  (\\<forall>u\\<in>range D. (D y, u) \\<in> I)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> insert None X \\<inter> Y \\<Longrightarrow> (D y, D x) \\<in> I", "moreover"], ["proof (state)\nthis:\n  (D y, D None) \\<in> I \\<and> y \\<noteq> None \\<longrightarrow>\n  (\\<forall>u\\<in>range D. (D y, u) \\<in> I)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> insert None X \\<inter> Y \\<Longrightarrow> (D y, D x) \\<in> I", "have \"y \\<noteq> None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y \\<noteq> None", "using N"], ["proof (prove)\nusing this:\n  (xs @ [y], {}) \\<in> failures P \\<and>\n  None \\<notin> set xs \\<and> None \\<noteq> y\n\ngoal (1 subgoal):\n 1. y \\<noteq> None", "by (rule_tac not_sym, simp)"], ["proof (state)\nthis:\n  y \\<noteq> None\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> insert None X \\<inter> Y \\<Longrightarrow> (D y, D x) \\<in> I", "ultimately"], ["proof (chain)\npicking this:\n  (D y, D None) \\<in> I \\<and> y \\<noteq> None \\<longrightarrow>\n  (\\<forall>u\\<in>range D. (D y, u) \\<in> I)\n  y \\<noteq> None", "have \"\\<forall>u \\<in> range D. (D y, u) \\<in> I\""], ["proof (prove)\nusing this:\n  (D y, D None) \\<in> I \\<and> y \\<noteq> None \\<longrightarrow>\n  (\\<forall>u\\<in>range D. (D y, u) \\<in> I)\n  y \\<noteq> None\n\ngoal (1 subgoal):\n 1. \\<forall>u\\<in>range D. (D y, u) \\<in> I", "using R"], ["proof (prove)\nusing this:\n  (D y, D None) \\<in> I \\<and> y \\<noteq> None \\<longrightarrow>\n  (\\<forall>u\\<in>range D. (D y, u) \\<in> I)\n  y \\<noteq> None\n  (D y, D None) \\<in> I\n\ngoal (1 subgoal):\n 1. \\<forall>u\\<in>range D. (D y, u) \\<in> I", "by simp"], ["proof (state)\nthis:\n  \\<forall>u\\<in>range D. (D y, u) \\<in> I\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> insert None X \\<inter> Y \\<Longrightarrow> (D y, D x) \\<in> I", "thus \"(D y, D x) \\<in> I\""], ["proof (prove)\nusing this:\n  \\<forall>u\\<in>range D. (D y, u) \\<in> I\n\ngoal (1 subgoal):\n 1. (D y, D x) \\<in> I", "by simp"], ["proof (state)\nthis:\n  (D y, D x) \\<in> I\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ipurge_ref I D (D y) zs (insert None X \\<inter> Y) = {}\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<lbrakk>u \\<in> sinks I D (D y) zs; (u, D None) \\<in> I\\<rbrakk>\n       \\<Longrightarrow> ipurge_ref I D (D y) zs\n                          (insert None X \\<inter> Y) =\n                         {}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<lbrakk>u \\<in> sinks I D (D y) zs; (u, D None) \\<in> I\\<rbrakk>\n       \\<Longrightarrow> ipurge_ref I D (D y) zs\n                          (insert None X \\<inter> Y) =\n                         {}", "fix u"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<lbrakk>u \\<in> sinks I D (D y) zs; (u, D None) \\<in> I\\<rbrakk>\n       \\<Longrightarrow> ipurge_ref I D (D y) zs\n                          (insert None X \\<inter> Y) =\n                         {}", "assume\n          R: \"u \\<in> sinks I D (D y) zs\" and\n          S: \"(u, D None) \\<in> I\""], ["proof (state)\nthis:\n  u \\<in> sinks I D (D y) zs\n  (u, D None) \\<in> I\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<lbrakk>u \\<in> sinks I D (D y) zs; (u, D None) \\<in> I\\<rbrakk>\n       \\<Longrightarrow> ipurge_ref I D (D y) zs\n                          (insert None X \\<inter> Y) =\n                         {}", "have \"\\<exists>z \\<in> set zs. u = D z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>z\\<in>set zs. u = D z", "using R"], ["proof (prove)\nusing this:\n  u \\<in> sinks I D (D y) zs\n\ngoal (1 subgoal):\n 1. \\<exists>z\\<in>set zs. u = D z", "by (rule sinks_elem)"], ["proof (state)\nthis:\n  \\<exists>z\\<in>set zs. u = D z\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<lbrakk>u \\<in> sinks I D (D y) zs; (u, D None) \\<in> I\\<rbrakk>\n       \\<Longrightarrow> ipurge_ref I D (D y) zs\n                          (insert None X \\<inter> Y) =\n                         {}", "then"], ["proof (chain)\npicking this:\n  \\<exists>z\\<in>set zs. u = D z", "obtain z where T: \"z \\<in> set zs\" and U: \"u = D z\""], ["proof (prove)\nusing this:\n  \\<exists>z\\<in>set zs. u = D z\n\ngoal (1 subgoal):\n 1. (\\<And>z.\n        \\<lbrakk>z \\<in> set zs; u = D z\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  z \\<in> set zs\n  u = D z\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<lbrakk>u \\<in> sinks I D (D y) zs; (u, D None) \\<in> I\\<rbrakk>\n       \\<Longrightarrow> ipurge_ref I D (D y) zs\n                          (insert None X \\<inter> Y) =\n                         {}", "have V: \"z \\<noteq> None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. z \\<noteq> None", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. z = None \\<Longrightarrow> False", "assume \"z = None\""], ["proof (state)\nthis:\n  z = None\n\ngoal (1 subgoal):\n 1. z = None \\<Longrightarrow> False", "hence \"None \\<in> set zs\""], ["proof (prove)\nusing this:\n  z = None\n\ngoal (1 subgoal):\n 1. None \\<in> set zs", "using T"], ["proof (prove)\nusing this:\n  z = None\n  z \\<in> set zs\n\ngoal (1 subgoal):\n 1. None \\<in> set zs", "by simp"], ["proof (state)\nthis:\n  None \\<in> set zs\n\ngoal (1 subgoal):\n 1. z = None \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  None \\<in> set zs\n\ngoal (1 subgoal):\n 1. z = None \\<Longrightarrow> False", "have \"None \\<notin> set zs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. None \\<notin> set zs", "using L"], ["proof (prove)\nusing this:\n  None \\<notin> set (xs @ zs)\n\ngoal (1 subgoal):\n 1. None \\<notin> set zs", "by simp"], ["proof (state)\nthis:\n  None \\<notin> set zs\n\ngoal (1 subgoal):\n 1. z = None \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  None \\<in> set zs\n  None \\<notin> set zs", "show False"], ["proof (prove)\nusing this:\n  None \\<in> set zs\n  None \\<notin> set zs\n\ngoal (1 subgoal):\n 1. False", "by contradiction"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  z \\<noteq> None\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<lbrakk>u \\<in> sinks I D (D y) zs; (u, D None) \\<in> I\\<rbrakk>\n       \\<Longrightarrow> ipurge_ref I D (D y) zs\n                          (insert None X \\<inter> Y) =\n                         {}", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. ipurge_ref I D (D y) zs (insert None X \\<inter> Y) = {}", "proof (rule ipurge_ref_empty [of u], simp add: R)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> insert None X \\<inter> Y \\<Longrightarrow> (u, D x) \\<in> I", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> insert None X \\<inter> Y \\<Longrightarrow> (u, D x) \\<in> I", "have \"(D z, D None) \\<in> I \\<and> z \\<noteq> None \\<longrightarrow> (\\<forall>v \\<in> range D. (D z, v) \\<in> I)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (D z, D None) \\<in> I \\<and> z \\<noteq> None \\<longrightarrow>\n    (\\<forall>v\\<in>range D. (D z, v) \\<in> I)", "using A"], ["proof (prove)\nusing this:\n  secure_termination I D\n\ngoal (1 subgoal):\n 1. (D z, D None) \\<in> I \\<and> z \\<noteq> None \\<longrightarrow>\n    (\\<forall>v\\<in>range D. (D z, v) \\<in> I)", "by (simp add: secure_termination_def)"], ["proof (state)\nthis:\n  (D z, D None) \\<in> I \\<and> z \\<noteq> None \\<longrightarrow>\n  (\\<forall>v\\<in>range D. (D z, v) \\<in> I)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> insert None X \\<inter> Y \\<Longrightarrow> (u, D x) \\<in> I", "moreover"], ["proof (state)\nthis:\n  (D z, D None) \\<in> I \\<and> z \\<noteq> None \\<longrightarrow>\n  (\\<forall>v\\<in>range D. (D z, v) \\<in> I)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> insert None X \\<inter> Y \\<Longrightarrow> (u, D x) \\<in> I", "have \"(D z, D None) \\<in> I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (D z, D None) \\<in> I", "using S and U"], ["proof (prove)\nusing this:\n  (u, D None) \\<in> I\n  u = D z\n\ngoal (1 subgoal):\n 1. (D z, D None) \\<in> I", "by simp"], ["proof (state)\nthis:\n  (D z, D None) \\<in> I\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> insert None X \\<inter> Y \\<Longrightarrow> (u, D x) \\<in> I", "ultimately"], ["proof (chain)\npicking this:\n  (D z, D None) \\<in> I \\<and> z \\<noteq> None \\<longrightarrow>\n  (\\<forall>v\\<in>range D. (D z, v) \\<in> I)\n  (D z, D None) \\<in> I", "have \"\\<forall>v \\<in> range D. (D z, v) \\<in> I\""], ["proof (prove)\nusing this:\n  (D z, D None) \\<in> I \\<and> z \\<noteq> None \\<longrightarrow>\n  (\\<forall>v\\<in>range D. (D z, v) \\<in> I)\n  (D z, D None) \\<in> I\n\ngoal (1 subgoal):\n 1. \\<forall>v\\<in>range D. (D z, v) \\<in> I", "using V"], ["proof (prove)\nusing this:\n  (D z, D None) \\<in> I \\<and> z \\<noteq> None \\<longrightarrow>\n  (\\<forall>v\\<in>range D. (D z, v) \\<in> I)\n  (D z, D None) \\<in> I\n  z \\<noteq> None\n\ngoal (1 subgoal):\n 1. \\<forall>v\\<in>range D. (D z, v) \\<in> I", "by simp"], ["proof (state)\nthis:\n  \\<forall>v\\<in>range D. (D z, v) \\<in> I\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> insert None X \\<inter> Y \\<Longrightarrow> (u, D x) \\<in> I", "thus \"(u, D x) \\<in> I\""], ["proof (prove)\nusing this:\n  \\<forall>v\\<in>range D. (D z, v) \\<in> I\n\ngoal (1 subgoal):\n 1. (u, D x) \\<in> I", "using U"], ["proof (prove)\nusing this:\n  \\<forall>v\\<in>range D. (D z, v) \\<in> I\n  u = D z\n\ngoal (1 subgoal):\n 1. (u, D x) \\<in> I", "by simp"], ["proof (state)\nthis:\n  (u, D x) \\<in> I\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ipurge_ref I D (D y) zs (insert None X \\<inter> Y) = {}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ipurge_ref I D (D y) zs (insert None X \\<inter> Y) = {}\n\ngoal (2 subgoals):\n 1. \\<lbrakk>xs @ y # ipurge_tr I D (D y) zs \\<notin> sentences P;\n     (D y, D None) \\<in> I \\<or>\n     (\\<exists>u\\<in>sinks I D (D y) zs. (u, D None) \\<in> I)\\<rbrakk>\n    \\<Longrightarrow> (xs @ y # ipurge_tr I D (D y) zs,\n                       ipurge_ref I D (D y) zs (insert None X \\<inter> Y))\n                      \\<in> seq_comp_failures P Q\n 2. \\<lbrakk>xs @ y # ipurge_tr I D (D y) zs \\<notin> sentences P;\n     (D y, D None) \\<notin> I \\<and>\n     (\\<forall>u\\<in>sinks I D (D y) zs. (u, D None) \\<notin> I)\\<rbrakk>\n    \\<Longrightarrow> (xs @ y # ipurge_tr I D (D y) zs,\n                       ipurge_ref I D (D y) zs (insert None X \\<inter> Y))\n                      \\<in> seq_comp_failures P Q", "thus ?thesis"], ["proof (prove)\nusing this:\n  ipurge_ref I D (D y) zs (insert None X \\<inter> Y) = {}\n\ngoal (1 subgoal):\n 1. (xs @ y # ipurge_tr I D (D y) zs,\n     ipurge_ref I D (D y) zs (insert None X \\<inter> Y))\n    \\<in> seq_comp_failures P Q", "proof simp"], ["proof (state)\ngoal (1 subgoal):\n 1. ipurge_ref I D (D y) zs (insert None X \\<inter> Y) =\n    {} \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) zs, {}) \\<in> seq_comp_failures P Q", "have \"{} \\<subseteq> ipurge_ref I D (D y) zs X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {} \\<subseteq> ipurge_ref I D (D y) zs X", ".."], ["proof (state)\nthis:\n  {} \\<subseteq> ipurge_ref I D (D y) zs X\n\ngoal (1 subgoal):\n 1. ipurge_ref I D (D y) zs (insert None X \\<inter> Y) =\n    {} \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) zs, {}) \\<in> seq_comp_failures P Q", "with O"], ["proof (chain)\npicking this:\n  (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs X)\n  \\<in> failures P\n  {} \\<subseteq> ipurge_ref I D (D y) zs X", "have \"(xs @ y # ipurge_tr I D (D y) zs, {}) \\<in> failures P\""], ["proof (prove)\nusing this:\n  (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs X)\n  \\<in> failures P\n  {} \\<subseteq> ipurge_ref I D (D y) zs X\n\ngoal (1 subgoal):\n 1. (xs @ y # ipurge_tr I D (D y) zs, {}) \\<in> failures P", "by (rule process_rule_3)"], ["proof (state)\nthis:\n  (xs @ y # ipurge_tr I D (D y) zs, {}) \\<in> failures P\n\ngoal (1 subgoal):\n 1. ipurge_ref I D (D y) zs (insert None X \\<inter> Y) =\n    {} \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) zs, {}) \\<in> seq_comp_failures P Q", "with P"], ["proof (chain)\npicking this:\n  xs @ y # ipurge_tr I D (D y) zs \\<notin> sentences P\n  (xs @ y # ipurge_tr I D (D y) zs, {}) \\<in> failures P", "show \"(xs @ y # ipurge_tr I D (D y) zs, {})\n          \\<in> seq_comp_failures P Q\""], ["proof (prove)\nusing this:\n  xs @ y # ipurge_tr I D (D y) zs \\<notin> sentences P\n  (xs @ y # ipurge_tr I D (D y) zs, {}) \\<in> failures P\n\ngoal (1 subgoal):\n 1. (xs @ y # ipurge_tr I D (D y) zs, {}) \\<in> seq_comp_failures P Q", "proof (rule SCF_R1, simp add: N)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>xs @ y # ipurge_tr I D (D y) zs \\<notin> sentences P;\n     (xs @ y # ipurge_tr I D (D y) zs, {}) \\<in> failures P\\<rbrakk>\n    \\<Longrightarrow> None \\<notin> set (ipurge_tr I D (D y) zs)", "have \"set (ipurge_tr I D (D y) zs) \\<subseteq> set zs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (ipurge_tr I D (D y) zs) \\<subseteq> set zs", "by (rule ipurge_tr_set)"], ["proof (state)\nthis:\n  set (ipurge_tr I D (D y) zs) \\<subseteq> set zs\n\ngoal (1 subgoal):\n 1. \\<lbrakk>xs @ y # ipurge_tr I D (D y) zs \\<notin> sentences P;\n     (xs @ y # ipurge_tr I D (D y) zs, {}) \\<in> failures P\\<rbrakk>\n    \\<Longrightarrow> None \\<notin> set (ipurge_tr I D (D y) zs)", "moreover"], ["proof (state)\nthis:\n  set (ipurge_tr I D (D y) zs) \\<subseteq> set zs\n\ngoal (1 subgoal):\n 1. \\<lbrakk>xs @ y # ipurge_tr I D (D y) zs \\<notin> sentences P;\n     (xs @ y # ipurge_tr I D (D y) zs, {}) \\<in> failures P\\<rbrakk>\n    \\<Longrightarrow> None \\<notin> set (ipurge_tr I D (D y) zs)", "have \"None \\<notin> set zs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. None \\<notin> set zs", "using L"], ["proof (prove)\nusing this:\n  None \\<notin> set (xs @ zs)\n\ngoal (1 subgoal):\n 1. None \\<notin> set zs", "by simp"], ["proof (state)\nthis:\n  None \\<notin> set zs\n\ngoal (1 subgoal):\n 1. \\<lbrakk>xs @ y # ipurge_tr I D (D y) zs \\<notin> sentences P;\n     (xs @ y # ipurge_tr I D (D y) zs, {}) \\<in> failures P\\<rbrakk>\n    \\<Longrightarrow> None \\<notin> set (ipurge_tr I D (D y) zs)", "ultimately"], ["proof (chain)\npicking this:\n  set (ipurge_tr I D (D y) zs) \\<subseteq> set zs\n  None \\<notin> set zs", "show \"None \\<notin> set (ipurge_tr I D (D y) zs)\""], ["proof (prove)\nusing this:\n  set (ipurge_tr I D (D y) zs) \\<subseteq> set zs\n  None \\<notin> set zs\n\ngoal (1 subgoal):\n 1. None \\<notin> set (ipurge_tr I D (D y) zs)", "by (rule contra_subsetD)"], ["proof (state)\nthis:\n  None \\<notin> set (ipurge_tr I D (D y) zs)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (xs @ y # ipurge_tr I D (D y) zs, {}) \\<in> seq_comp_failures P Q\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (xs @ y # ipurge_tr I D (D y) zs,\n   ipurge_ref I D (D y) zs (insert None X \\<inter> Y))\n  \\<in> seq_comp_failures P Q\n\ngoal (1 subgoal):\n 1. \\<lbrakk>xs @ y # ipurge_tr I D (D y) zs \\<notin> sentences P;\n     (D y, D None) \\<notin> I \\<and>\n     (\\<forall>u\\<in>sinks I D (D y) zs. (u, D None) \\<notin> I)\\<rbrakk>\n    \\<Longrightarrow> (xs @ y # ipurge_tr I D (D y) zs,\n                       ipurge_ref I D (D y) zs (insert None X \\<inter> Y))\n                      \\<in> seq_comp_failures P Q", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>xs @ y # ipurge_tr I D (D y) zs \\<notin> sentences P;\n     (D y, D None) \\<notin> I \\<and>\n     (\\<forall>u\\<in>sinks I D (D y) zs. (u, D None) \\<notin> I)\\<rbrakk>\n    \\<Longrightarrow> (xs @ y # ipurge_tr I D (D y) zs,\n                       ipurge_ref I D (D y) zs (insert None X \\<inter> Y))\n                      \\<in> seq_comp_failures P Q", "assume\n        P: \"xs @ y # ipurge_tr I D (D y) zs \\<notin> sentences P\" and\n        Q: \"(D y, D None) \\<notin> I \\<and> (\\<forall>u \\<in> sinks I D (D y) zs. (u, D None) \\<notin> I)\""], ["proof (state)\nthis:\n  xs @ y # ipurge_tr I D (D y) zs \\<notin> sentences P\n  (D y, D None) \\<notin> I \\<and>\n  (\\<forall>u\\<in>sinks I D (D y) zs. (u, D None) \\<notin> I)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>xs @ y # ipurge_tr I D (D y) zs \\<notin> sentences P;\n     (D y, D None) \\<notin> I \\<and>\n     (\\<forall>u\\<in>sinks I D (D y) zs. (u, D None) \\<notin> I)\\<rbrakk>\n    \\<Longrightarrow> (xs @ y # ipurge_tr I D (D y) zs,\n                       ipurge_ref I D (D y) zs (insert None X \\<inter> Y))\n                      \\<in> seq_comp_failures P Q", "have \"xs @ zs @ [None] \\<in> traces P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs @ zs @ [None] \\<in> traces P", "using E"], ["proof (prove)\nusing this:\n  xs @ zs \\<in> sentences P\n\ngoal (1 subgoal):\n 1. xs @ zs @ [None] \\<in> traces P", "by (simp add: sentences_def)"], ["proof (state)\nthis:\n  xs @ zs @ [None] \\<in> traces P\n\ngoal (1 subgoal):\n 1. \\<lbrakk>xs @ y # ipurge_tr I D (D y) zs \\<notin> sentences P;\n     (D y, D None) \\<notin> I \\<and>\n     (\\<forall>u\\<in>sinks I D (D y) zs. (u, D None) \\<notin> I)\\<rbrakk>\n    \\<Longrightarrow> (xs @ y # ipurge_tr I D (D y) zs,\n                       ipurge_ref I D (D y) zs (insert None X \\<inter> Y))\n                      \\<in> seq_comp_failures P Q", "hence \"(xs @ zs @ [None], {}) \\<in> failures P\""], ["proof (prove)\nusing this:\n  xs @ zs @ [None] \\<in> traces P\n\ngoal (1 subgoal):\n 1. (xs @ zs @ [None], {}) \\<in> failures P", "by (rule traces_failures)"], ["proof (state)\nthis:\n  (xs @ zs @ [None], {}) \\<in> failures P\n\ngoal (1 subgoal):\n 1. \\<lbrakk>xs @ y # ipurge_tr I D (D y) zs \\<notin> sentences P;\n     (D y, D None) \\<notin> I \\<and>\n     (\\<forall>u\\<in>sinks I D (D y) zs. (u, D None) \\<notin> I)\\<rbrakk>\n    \\<Longrightarrow> (xs @ y # ipurge_tr I D (D y) zs,\n                       ipurge_ref I D (D y) zs (insert None X \\<inter> Y))\n                      \\<in> seq_comp_failures P Q", "hence \"(zs @ [None], {}) \\<in> futures P xs\""], ["proof (prove)\nusing this:\n  (xs @ zs @ [None], {}) \\<in> failures P\n\ngoal (1 subgoal):\n 1. (zs @ [None], {}) \\<in> futures P xs", "by (simp add: futures_def)"], ["proof (state)\nthis:\n  (zs @ [None], {}) \\<in> futures P xs\n\ngoal (1 subgoal):\n 1. \\<lbrakk>xs @ y # ipurge_tr I D (D y) zs \\<notin> sentences P;\n     (D y, D None) \\<notin> I \\<and>\n     (\\<forall>u\\<in>sinks I D (D y) zs. (u, D None) \\<notin> I)\\<rbrakk>\n    \\<Longrightarrow> (xs @ y # ipurge_tr I D (D y) zs,\n                       ipurge_ref I D (D y) zs (insert None X \\<inter> Y))\n                      \\<in> seq_comp_failures P Q", "moreover"], ["proof (state)\nthis:\n  (zs @ [None], {}) \\<in> futures P xs\n\ngoal (1 subgoal):\n 1. \\<lbrakk>xs @ y # ipurge_tr I D (D y) zs \\<notin> sentences P;\n     (D y, D None) \\<notin> I \\<and>\n     (\\<forall>u\\<in>sinks I D (D y) zs. (u, D None) \\<notin> I)\\<rbrakk>\n    \\<Longrightarrow> (xs @ y # ipurge_tr I D (D y) zs,\n                       ipurge_ref I D (D y) zs (insert None X \\<inter> Y))\n                      \\<in> seq_comp_failures P Q", "have \"([y], {}) \\<in> futures P xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ([y], {}) \\<in> futures P xs", "using N"], ["proof (prove)\nusing this:\n  (xs @ [y], {}) \\<in> failures P \\<and>\n  None \\<notin> set xs \\<and> None \\<noteq> y\n\ngoal (1 subgoal):\n 1. ([y], {}) \\<in> futures P xs", "by (simp add: futures_def)"], ["proof (state)\nthis:\n  ([y], {}) \\<in> futures P xs\n\ngoal (1 subgoal):\n 1. \\<lbrakk>xs @ y # ipurge_tr I D (D y) zs \\<notin> sentences P;\n     (D y, D None) \\<notin> I \\<and>\n     (\\<forall>u\\<in>sinks I D (D y) zs. (u, D None) \\<notin> I)\\<rbrakk>\n    \\<Longrightarrow> (xs @ y # ipurge_tr I D (D y) zs,\n                       ipurge_ref I D (D y) zs (insert None X \\<inter> Y))\n                      \\<in> seq_comp_failures P Q", "ultimately"], ["proof (chain)\npicking this:\n  (zs @ [None], {}) \\<in> futures P xs\n  ([y], {}) \\<in> futures P xs", "have \"(y # ipurge_tr I D (D y) (zs @ [None]),\n        ipurge_ref I D (D y) (zs @ [None]) {}) \\<in> futures P xs\"\n        (is \"(_, ?Z) \\<in> _\")"], ["proof (prove)\nusing this:\n  (zs @ [None], {}) \\<in> futures P xs\n  ([y], {}) \\<in> futures P xs\n\ngoal (1 subgoal):\n 1. (y # ipurge_tr I D (D y) (zs @ [None]),\n     ipurge_ref I D (D y) (zs @ [None]) {})\n    \\<in> futures P xs", "using C"], ["proof (prove)\nusing this:\n  (zs @ [None], {}) \\<in> futures P xs\n  ([y], {}) \\<in> futures P xs\n  secure P I D\n\ngoal (1 subgoal):\n 1. (y # ipurge_tr I D (D y) (zs @ [None]),\n     ipurge_ref I D (D y) (zs @ [None]) {})\n    \\<in> futures P xs", "by (simp add: secure_def del: ipurge_tr.simps)"], ["proof (state)\nthis:\n  (y # ipurge_tr I D (D y) (zs @ [None]),\n   ipurge_ref I D (D y) (zs @ [None]) {})\n  \\<in> futures P xs\n\ngoal (1 subgoal):\n 1. \\<lbrakk>xs @ y # ipurge_tr I D (D y) zs \\<notin> sentences P;\n     (D y, D None) \\<notin> I \\<and>\n     (\\<forall>u\\<in>sinks I D (D y) zs. (u, D None) \\<notin> I)\\<rbrakk>\n    \\<Longrightarrow> (xs @ y # ipurge_tr I D (D y) zs,\n                       ipurge_ref I D (D y) zs (insert None X \\<inter> Y))\n                      \\<in> seq_comp_failures P Q", "hence \"(xs @ y # ipurge_tr I D (D y) (zs @ [None]), ?Z) \\<in> failures P\""], ["proof (prove)\nusing this:\n  (y # ipurge_tr I D (D y) (zs @ [None]),\n   ipurge_ref I D (D y) (zs @ [None]) {})\n  \\<in> futures P xs\n\ngoal (1 subgoal):\n 1. (xs @ y # ipurge_tr I D (D y) (zs @ [None]),\n     ipurge_ref I D (D y) (zs @ [None]) {})\n    \\<in> failures P", "by (simp add: futures_def)"], ["proof (state)\nthis:\n  (xs @ y # ipurge_tr I D (D y) (zs @ [None]),\n   ipurge_ref I D (D y) (zs @ [None]) {})\n  \\<in> failures P\n\ngoal (1 subgoal):\n 1. \\<lbrakk>xs @ y # ipurge_tr I D (D y) zs \\<notin> sentences P;\n     (D y, D None) \\<notin> I \\<and>\n     (\\<forall>u\\<in>sinks I D (D y) zs. (u, D None) \\<notin> I)\\<rbrakk>\n    \\<Longrightarrow> (xs @ y # ipurge_tr I D (D y) zs,\n                       ipurge_ref I D (D y) zs (insert None X \\<inter> Y))\n                      \\<in> seq_comp_failures P Q", "hence \"xs @ y # ipurge_tr I D (D y) (zs @ [None]) \\<in> traces P\""], ["proof (prove)\nusing this:\n  (xs @ y # ipurge_tr I D (D y) (zs @ [None]),\n   ipurge_ref I D (D y) (zs @ [None]) {})\n  \\<in> failures P\n\ngoal (1 subgoal):\n 1. xs @ y # ipurge_tr I D (D y) (zs @ [None]) \\<in> traces P", "by (rule failures_traces)"], ["proof (state)\nthis:\n  xs @ y # ipurge_tr I D (D y) (zs @ [None]) \\<in> traces P\n\ngoal (1 subgoal):\n 1. \\<lbrakk>xs @ y # ipurge_tr I D (D y) zs \\<notin> sentences P;\n     (D y, D None) \\<notin> I \\<and>\n     (\\<forall>u\\<in>sinks I D (D y) zs. (u, D None) \\<notin> I)\\<rbrakk>\n    \\<Longrightarrow> (xs @ y # ipurge_tr I D (D y) zs,\n                       ipurge_ref I D (D y) zs (insert None X \\<inter> Y))\n                      \\<in> seq_comp_failures P Q", "moreover"], ["proof (state)\nthis:\n  xs @ y # ipurge_tr I D (D y) (zs @ [None]) \\<in> traces P\n\ngoal (1 subgoal):\n 1. \\<lbrakk>xs @ y # ipurge_tr I D (D y) zs \\<notin> sentences P;\n     (D y, D None) \\<notin> I \\<and>\n     (\\<forall>u\\<in>sinks I D (D y) zs. (u, D None) \\<notin> I)\\<rbrakk>\n    \\<Longrightarrow> (xs @ y # ipurge_tr I D (D y) zs,\n                       ipurge_ref I D (D y) zs (insert None X \\<inter> Y))\n                      \\<in> seq_comp_failures P Q", "have \"\\<not> ((D y, D None) \\<in> I \\<or>\n        (\\<exists>u \\<in> sinks I D (D y) zs. (u, D None) \\<in> I))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> ((D y, D None) \\<in> I \\<or>\n            (\\<exists>u\\<in>sinks I D (D y) zs. (u, D None) \\<in> I))", "using Q"], ["proof (prove)\nusing this:\n  (D y, D None) \\<notin> I \\<and>\n  (\\<forall>u\\<in>sinks I D (D y) zs. (u, D None) \\<notin> I)\n\ngoal (1 subgoal):\n 1. \\<not> ((D y, D None) \\<in> I \\<or>\n            (\\<exists>u\\<in>sinks I D (D y) zs. (u, D None) \\<in> I))", "by simp"], ["proof (state)\nthis:\n  \\<not> ((D y, D None) \\<in> I \\<or>\n          (\\<exists>u\\<in>sinks I D (D y) zs. (u, D None) \\<in> I))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>xs @ y # ipurge_tr I D (D y) zs \\<notin> sentences P;\n     (D y, D None) \\<notin> I \\<and>\n     (\\<forall>u\\<in>sinks I D (D y) zs. (u, D None) \\<notin> I)\\<rbrakk>\n    \\<Longrightarrow> (xs @ y # ipurge_tr I D (D y) zs,\n                       ipurge_ref I D (D y) zs (insert None X \\<inter> Y))\n                      \\<in> seq_comp_failures P Q", "hence \"D None \\<notin> sinks I D (D y) (zs @ [None])\""], ["proof (prove)\nusing this:\n  \\<not> ((D y, D None) \\<in> I \\<or>\n          (\\<exists>u\\<in>sinks I D (D y) zs. (u, D None) \\<in> I))\n\ngoal (1 subgoal):\n 1. D None \\<notin> sinks I D (D y) (zs @ [None])", "by (simp only: sinks_interference_eq, simp)"], ["proof (state)\nthis:\n  D None \\<notin> sinks I D (D y) (zs @ [None])\n\ngoal (1 subgoal):\n 1. \\<lbrakk>xs @ y # ipurge_tr I D (D y) zs \\<notin> sentences P;\n     (D y, D None) \\<notin> I \\<and>\n     (\\<forall>u\\<in>sinks I D (D y) zs. (u, D None) \\<notin> I)\\<rbrakk>\n    \\<Longrightarrow> (xs @ y # ipurge_tr I D (D y) zs,\n                       ipurge_ref I D (D y) zs (insert None X \\<inter> Y))\n                      \\<in> seq_comp_failures P Q", "ultimately"], ["proof (chain)\npicking this:\n  xs @ y # ipurge_tr I D (D y) (zs @ [None]) \\<in> traces P\n  D None \\<notin> sinks I D (D y) (zs @ [None])", "have \"xs @ y # ipurge_tr I D (D y) zs @ [None] \\<in> traces P\""], ["proof (prove)\nusing this:\n  xs @ y # ipurge_tr I D (D y) (zs @ [None]) \\<in> traces P\n  D None \\<notin> sinks I D (D y) (zs @ [None])\n\ngoal (1 subgoal):\n 1. xs @ y # ipurge_tr I D (D y) zs @ [None] \\<in> traces P", "by simp"], ["proof (state)\nthis:\n  xs @ y # ipurge_tr I D (D y) zs @ [None] \\<in> traces P\n\ngoal (1 subgoal):\n 1. \\<lbrakk>xs @ y # ipurge_tr I D (D y) zs \\<notin> sentences P;\n     (D y, D None) \\<notin> I \\<and>\n     (\\<forall>u\\<in>sinks I D (D y) zs. (u, D None) \\<notin> I)\\<rbrakk>\n    \\<Longrightarrow> (xs @ y # ipurge_tr I D (D y) zs,\n                       ipurge_ref I D (D y) zs (insert None X \\<inter> Y))\n                      \\<in> seq_comp_failures P Q", "hence \"xs @ y # ipurge_tr I D (D y) zs \\<in> sentences P\""], ["proof (prove)\nusing this:\n  xs @ y # ipurge_tr I D (D y) zs @ [None] \\<in> traces P\n\ngoal (1 subgoal):\n 1. xs @ y # ipurge_tr I D (D y) zs \\<in> sentences P", "by (simp add: sentences_def)"], ["proof (state)\nthis:\n  xs @ y # ipurge_tr I D (D y) zs \\<in> sentences P\n\ngoal (1 subgoal):\n 1. \\<lbrakk>xs @ y # ipurge_tr I D (D y) zs \\<notin> sentences P;\n     (D y, D None) \\<notin> I \\<and>\n     (\\<forall>u\\<in>sinks I D (D y) zs. (u, D None) \\<notin> I)\\<rbrakk>\n    \\<Longrightarrow> (xs @ y # ipurge_tr I D (D y) zs,\n                       ipurge_ref I D (D y) zs (insert None X \\<inter> Y))\n                      \\<in> seq_comp_failures P Q", "thus ?thesis"], ["proof (prove)\nusing this:\n  xs @ y # ipurge_tr I D (D y) zs \\<in> sentences P\n\ngoal (1 subgoal):\n 1. (xs @ y # ipurge_tr I D (D y) zs,\n     ipurge_ref I D (D y) zs (insert None X \\<inter> Y))\n    \\<in> seq_comp_failures P Q", "using P"], ["proof (prove)\nusing this:\n  xs @ y # ipurge_tr I D (D y) zs \\<in> sentences P\n  xs @ y # ipurge_tr I D (D y) zs \\<notin> sentences P\n\ngoal (1 subgoal):\n 1. (xs @ y # ipurge_tr I D (D y) zs,\n     ipurge_ref I D (D y) zs (insert None X \\<inter> Y))\n    \\<in> seq_comp_failures P Q", "by contradiction"], ["proof (state)\nthis:\n  (xs @ y # ipurge_tr I D (D y) zs,\n   ipurge_ref I D (D y) zs (insert None X \\<inter> Y))\n  \\<in> seq_comp_failures P Q\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (xs @ y # ipurge_tr I D (D y) zs,\n   ipurge_ref I D (D y) zs (insert None X \\<inter> Y))\n  \\<in> seq_comp_failures P Q\n\ngoal (1 subgoal):\n 1. n \\<in> {0<..length (xs @ [y])} \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) zs,\n     ipurge_ref I D (D y) zs (insert None X \\<inter> Y))\n    \\<in> seq_comp_failures P Q", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. n \\<in> {0<..length (xs @ [y])} \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) zs,\n     ipurge_ref I D (D y) zs (insert None X \\<inter> Y))\n    \\<in> seq_comp_failures P Q", "assume M: \"n \\<in> {0<..length (xs @ [y])}\""], ["proof (state)\nthis:\n  n \\<in> {0<..length (xs @ [y])}\n\ngoal (1 subgoal):\n 1. n \\<in> {0<..length (xs @ [y])} \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) zs,\n     ipurge_ref I D (D y) zs (insert None X \\<inter> Y))\n    \\<in> seq_comp_failures P Q", "have \"\\<forall>n \\<in> {0<..length (xs @ [y])}. \\<forall>W \\<in> R n.\n      take (length (xs @ [y]) - n) (xs @ [y]) \\<in> sentences P \\<and>\n      (drop (length (xs @ [y]) - n) (xs @ [y]), W) \\<in> failures Q\"\n      (is \"\\<forall>n \\<in> _. \\<forall>W \\<in> _. ?T n W\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n\\<in>{0<..length (xs @ [y])}.\n       \\<forall>W\\<in>R n.\n          take (length (xs @ [y]) - n) (xs @ [y]) \\<in> sentences P \\<and>\n          (drop (length (xs @ [y]) - n) (xs @ [y]), W) \\<in> failures Q", "using I"], ["proof (prove)\nusing this:\n  {} = (\\<Union>n\\<le>length (xs @ [y]). \\<Union>W\\<in>R n. W) \\<and>\n  (\\<forall>W\\<in>R 0.\n      xs @ [y] \\<notin> sentences P \\<and>\n      None \\<notin> set (xs @ [y]) \\<and>\n      (xs @ [y], W) \\<in> failures P \\<or>\n      xs @ [y] \\<in> sentences P \\<and>\n      (\\<exists>U V.\n          (xs @ [y], U) \\<in> failures P \\<and>\n          ([], V) \\<in> failures Q \\<and>\n          W = insert None U \\<inter> V)) \\<and>\n  (\\<forall>n\\<in>{0<..length (xs @ [y])}.\n      \\<forall>W\\<in>R n.\n         take (length (xs @ [y]) - n) (xs @ [y]) \\<in> sentences P \\<and>\n         (drop (length (xs @ [y]) - n) (xs @ [y]), W)\n         \\<in> failures Q) \\<and>\n  (\\<exists>n\\<in>{..length (xs @ [y])}. \\<exists>W. W \\<in> R n)\n\ngoal (1 subgoal):\n 1. \\<forall>n\\<in>{0<..length (xs @ [y])}.\n       \\<forall>W\\<in>R n.\n          take (length (xs @ [y]) - n) (xs @ [y]) \\<in> sentences P \\<and>\n          (drop (length (xs @ [y]) - n) (xs @ [y]), W) \\<in> failures Q", "by simp"], ["proof (state)\nthis:\n  \\<forall>n\\<in>{0<..length (xs @ [y])}.\n     \\<forall>W\\<in>R n.\n        take (length (xs @ [y]) - n) (xs @ [y]) \\<in> sentences P \\<and>\n        (drop (length (xs @ [y]) - n) (xs @ [y]), W) \\<in> failures Q\n\ngoal (1 subgoal):\n 1. n \\<in> {0<..length (xs @ [y])} \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) zs,\n     ipurge_ref I D (D y) zs (insert None X \\<inter> Y))\n    \\<in> seq_comp_failures P Q", "hence \"\\<forall>W \\<in> R n. ?T n W\""], ["proof (prove)\nusing this:\n  \\<forall>n\\<in>{0<..length (xs @ [y])}.\n     \\<forall>W\\<in>R n.\n        take (length (xs @ [y]) - n) (xs @ [y]) \\<in> sentences P \\<and>\n        (drop (length (xs @ [y]) - n) (xs @ [y]), W) \\<in> failures Q\n\ngoal (1 subgoal):\n 1. \\<forall>W\\<in>R n.\n       take (length (xs @ [y]) - n) (xs @ [y]) \\<in> sentences P \\<and>\n       (drop (length (xs @ [y]) - n) (xs @ [y]), W) \\<in> failures Q", "using M"], ["proof (prove)\nusing this:\n  \\<forall>n\\<in>{0<..length (xs @ [y])}.\n     \\<forall>W\\<in>R n.\n        take (length (xs @ [y]) - n) (xs @ [y]) \\<in> sentences P \\<and>\n        (drop (length (xs @ [y]) - n) (xs @ [y]), W) \\<in> failures Q\n  n \\<in> {0<..length (xs @ [y])}\n\ngoal (1 subgoal):\n 1. \\<forall>W\\<in>R n.\n       take (length (xs @ [y]) - n) (xs @ [y]) \\<in> sentences P \\<and>\n       (drop (length (xs @ [y]) - n) (xs @ [y]), W) \\<in> failures Q", ".."], ["proof (state)\nthis:\n  \\<forall>W\\<in>R n.\n     take (length (xs @ [y]) - n) (xs @ [y]) \\<in> sentences P \\<and>\n     (drop (length (xs @ [y]) - n) (xs @ [y]), W) \\<in> failures Q\n\ngoal (1 subgoal):\n 1. n \\<in> {0<..length (xs @ [y])} \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) zs,\n     ipurge_ref I D (D y) zs (insert None X \\<inter> Y))\n    \\<in> seq_comp_failures P Q", "moreover"], ["proof (state)\nthis:\n  \\<forall>W\\<in>R n.\n     take (length (xs @ [y]) - n) (xs @ [y]) \\<in> sentences P \\<and>\n     (drop (length (xs @ [y]) - n) (xs @ [y]), W) \\<in> failures Q\n\ngoal (1 subgoal):\n 1. n \\<in> {0<..length (xs @ [y])} \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) zs,\n     ipurge_ref I D (D y) zs (insert None X \\<inter> Y))\n    \\<in> seq_comp_failures P Q", "obtain W where \"W \\<in> R n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>W. W \\<in> R n \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "using K"], ["proof (prove)\nusing this:\n  \\<exists>W. W \\<in> R n\n\ngoal (1 subgoal):\n 1. (\\<And>W. W \\<in> R n \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", ".."], ["proof (state)\nthis:\n  W \\<in> R n\n\ngoal (1 subgoal):\n 1. n \\<in> {0<..length (xs @ [y])} \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) zs,\n     ipurge_ref I D (D y) zs (insert None X \\<inter> Y))\n    \\<in> seq_comp_failures P Q", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>W\\<in>R n.\n     take (length (xs @ [y]) - n) (xs @ [y]) \\<in> sentences P \\<and>\n     (drop (length (xs @ [y]) - n) (xs @ [y]), W) \\<in> failures Q\n  W \\<in> R n", "have N: \"?T n W\""], ["proof (prove)\nusing this:\n  \\<forall>W\\<in>R n.\n     take (length (xs @ [y]) - n) (xs @ [y]) \\<in> sentences P \\<and>\n     (drop (length (xs @ [y]) - n) (xs @ [y]), W) \\<in> failures Q\n  W \\<in> R n\n\ngoal (1 subgoal):\n 1. take (length (xs @ [y]) - n) (xs @ [y]) \\<in> sentences P \\<and>\n    (drop (length (xs @ [y]) - n) (xs @ [y]), W) \\<in> failures Q", ".."], ["proof (state)\nthis:\n  take (length (xs @ [y]) - n) (xs @ [y]) \\<in> sentences P \\<and>\n  (drop (length (xs @ [y]) - n) (xs @ [y]), W) \\<in> failures Q\n\ngoal (1 subgoal):\n 1. n \\<in> {0<..length (xs @ [y])} \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) zs,\n     ipurge_ref I D (D y) zs (insert None X \\<inter> Y))\n    \\<in> seq_comp_failures P Q", "moreover"], ["proof (state)\nthis:\n  take (length (xs @ [y]) - n) (xs @ [y]) \\<in> sentences P \\<and>\n  (drop (length (xs @ [y]) - n) (xs @ [y]), W) \\<in> failures Q\n\ngoal (1 subgoal):\n 1. n \\<in> {0<..length (xs @ [y])} \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) zs,\n     ipurge_ref I D (D y) zs (insert None X \\<inter> Y))\n    \\<in> seq_comp_failures P Q", "have O: \"take (length (xs @ [y]) - n) (xs @ [y]) =\n      take (length (xs @ [y]) - n) (xs @ zs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. take (length (xs @ [y]) - n) (xs @ [y]) =\n    take (length (xs @ [y]) - n) (xs @ zs)", "using M"], ["proof (prove)\nusing this:\n  n \\<in> {0<..length (xs @ [y])}\n\ngoal (1 subgoal):\n 1. take (length (xs @ [y]) - n) (xs @ [y]) =\n    take (length (xs @ [y]) - n) (xs @ zs)", "by simp"], ["proof (state)\nthis:\n  take (length (xs @ [y]) - n) (xs @ [y]) =\n  take (length (xs @ [y]) - n) (xs @ zs)\n\ngoal (1 subgoal):\n 1. n \\<in> {0<..length (xs @ [y])} \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) zs,\n     ipurge_ref I D (D y) zs (insert None X \\<inter> Y))\n    \\<in> seq_comp_failures P Q", "ultimately"], ["proof (chain)\npicking this:\n  take (length (xs @ [y]) - n) (xs @ [y]) \\<in> sentences P \\<and>\n  (drop (length (xs @ [y]) - n) (xs @ [y]), W) \\<in> failures Q\n  take (length (xs @ [y]) - n) (xs @ [y]) =\n  take (length (xs @ [y]) - n) (xs @ zs)", "have P: \"take (length (xs @ [y]) - n) (xs @ zs) \\<in> sentences P\""], ["proof (prove)\nusing this:\n  take (length (xs @ [y]) - n) (xs @ [y]) \\<in> sentences P \\<and>\n  (drop (length (xs @ [y]) - n) (xs @ [y]), W) \\<in> failures Q\n  take (length (xs @ [y]) - n) (xs @ [y]) =\n  take (length (xs @ [y]) - n) (xs @ zs)\n\ngoal (1 subgoal):\n 1. take (length (xs @ [y]) - n) (xs @ zs) \\<in> sentences P", "by simp"], ["proof (state)\nthis:\n  take (length (xs @ [y]) - n) (xs @ zs) \\<in> sentences P\n\ngoal (1 subgoal):\n 1. n \\<in> {0<..length (xs @ [y])} \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) zs,\n     ipurge_ref I D (D y) zs (insert None X \\<inter> Y))\n    \\<in> seq_comp_failures P Q", "have Q: \"drop (length (xs @ [y]) - n) (xs @ zs) = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. drop (length (xs @ [y]) - n) (xs @ zs) = []", "proof (cases \"drop (length (xs @ [y]) - n) (xs @ zs)\", simp)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a list.\n       drop (length (xs @ [y]) - n) (xs @ zs) = a # list \\<Longrightarrow>\n       drop (length (xs @ [y]) - n) (xs @ zs) = []", "case (Cons v vs)"], ["proof (state)\nthis:\n  drop (length (xs @ [y]) - n) (xs @ zs) = v # vs\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       drop (length (xs @ [y]) - n) (xs @ zs) = a # list \\<Longrightarrow>\n       drop (length (xs @ [y]) - n) (xs @ zs) = []", "moreover"], ["proof (state)\nthis:\n  drop (length (xs @ [y]) - n) (xs @ zs) = v # vs\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       drop (length (xs @ [y]) - n) (xs @ zs) = a # list \\<Longrightarrow>\n       drop (length (xs @ [y]) - n) (xs @ zs) = []", "have \"xs @ zs = take (length (xs @ [y]) - n) (xs @ zs) @\n        drop (length (xs @ [y]) - n) (xs @ zs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs @ zs =\n    take (length (xs @ [y]) - n) (xs @ zs) @\n    drop (length (xs @ [y]) - n) (xs @ zs)", "by (simp only: append_take_drop_id)"], ["proof (state)\nthis:\n  xs @ zs =\n  take (length (xs @ [y]) - n) (xs @ zs) @\n  drop (length (xs @ [y]) - n) (xs @ zs)\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       drop (length (xs @ [y]) - n) (xs @ zs) = a # list \\<Longrightarrow>\n       drop (length (xs @ [y]) - n) (xs @ zs) = []", "ultimately"], ["proof (chain)\npicking this:\n  drop (length (xs @ [y]) - n) (xs @ zs) = v # vs\n  xs @ zs =\n  take (length (xs @ [y]) - n) (xs @ zs) @\n  drop (length (xs @ [y]) - n) (xs @ zs)", "have R: \"xs @ zs =\n        take (length (xs @ [y]) - n) (xs @ zs) @ v # vs\""], ["proof (prove)\nusing this:\n  drop (length (xs @ [y]) - n) (xs @ zs) = v # vs\n  xs @ zs =\n  take (length (xs @ [y]) - n) (xs @ zs) @\n  drop (length (xs @ [y]) - n) (xs @ zs)\n\ngoal (1 subgoal):\n 1. xs @ zs = take (length (xs @ [y]) - n) (xs @ zs) @ v # vs", "by (simp del: take_append)"], ["proof (state)\nthis:\n  xs @ zs = take (length (xs @ [y]) - n) (xs @ zs) @ v # vs\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       drop (length (xs @ [y]) - n) (xs @ zs) = a # list \\<Longrightarrow>\n       drop (length (xs @ [y]) - n) (xs @ zs) = []", "hence \"(take (length (xs @ [y]) - n) (xs @ zs) @ v # vs, X)\n        \\<in> failures P\""], ["proof (prove)\nusing this:\n  xs @ zs = take (length (xs @ [y]) - n) (xs @ zs) @ v # vs\n\ngoal (1 subgoal):\n 1. (take (length (xs @ [y]) - n) (xs @ zs) @ v # vs, X) \\<in> failures P", "using F"], ["proof (prove)\nusing this:\n  xs @ zs = take (length (xs @ [y]) - n) (xs @ zs) @ v # vs\n  (xs @ zs, X) \\<in> failures P\n\ngoal (1 subgoal):\n 1. (take (length (xs @ [y]) - n) (xs @ zs) @ v # vs, X) \\<in> failures P", "by (simp del: take_append)"], ["proof (state)\nthis:\n  (take (length (xs @ [y]) - n) (xs @ zs) @ v # vs, X) \\<in> failures P\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       drop (length (xs @ [y]) - n) (xs @ zs) = a # list \\<Longrightarrow>\n       drop (length (xs @ [y]) - n) (xs @ zs) = []", "hence \"take (length (xs @ [y]) - n) (xs @ zs) @ v # vs \\<in> traces P\""], ["proof (prove)\nusing this:\n  (take (length (xs @ [y]) - n) (xs @ zs) @ v # vs, X) \\<in> failures P\n\ngoal (1 subgoal):\n 1. take (length (xs @ [y]) - n) (xs @ zs) @ v # vs \\<in> traces P", "by (rule failures_traces)"], ["proof (state)\nthis:\n  take (length (xs @ [y]) - n) (xs @ zs) @ v # vs \\<in> traces P\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       drop (length (xs @ [y]) - n) (xs @ zs) = a # list \\<Longrightarrow>\n       drop (length (xs @ [y]) - n) (xs @ zs) = []", "with B and P"], ["proof (chain)\npicking this:\n  sequential P\n  take (length (xs @ [y]) - n) (xs @ zs) \\<in> sentences P\n  take (length (xs @ [y]) - n) (xs @ zs) @ v # vs \\<in> traces P", "have \"v = None\""], ["proof (prove)\nusing this:\n  sequential P\n  take (length (xs @ [y]) - n) (xs @ zs) \\<in> sentences P\n  take (length (xs @ [y]) - n) (xs @ zs) @ v # vs \\<in> traces P\n\ngoal (1 subgoal):\n 1. v = None", "by (rule seq_sentences_none)"], ["proof (state)\nthis:\n  v = None\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       drop (length (xs @ [y]) - n) (xs @ zs) = a # list \\<Longrightarrow>\n       drop (length (xs @ [y]) - n) (xs @ zs) = []", "moreover"], ["proof (state)\nthis:\n  v = None\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       drop (length (xs @ [y]) - n) (xs @ zs) = a # list \\<Longrightarrow>\n       drop (length (xs @ [y]) - n) (xs @ zs) = []", "have\n       \"None \\<notin> set (take (length (xs @ [y]) - n) (xs @ zs) @ v # vs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. None \\<notin> set (take (length (xs @ [y]) - n) (xs @ zs) @ v # vs)", "using L"], ["proof (prove)\nusing this:\n  None \\<notin> set (xs @ zs)\n\ngoal (1 subgoal):\n 1. None \\<notin> set (take (length (xs @ [y]) - n) (xs @ zs) @ v # vs)", "by (subst (asm) R)"], ["proof (state)\nthis:\n  None \\<notin> set (take (length (xs @ [y]) - n) (xs @ zs) @ v # vs)\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       drop (length (xs @ [y]) - n) (xs @ zs) = a # list \\<Longrightarrow>\n       drop (length (xs @ [y]) - n) (xs @ zs) = []", "hence \"v \\<noteq> None\""], ["proof (prove)\nusing this:\n  None \\<notin> set (take (length (xs @ [y]) - n) (xs @ zs) @ v # vs)\n\ngoal (1 subgoal):\n 1. v \\<noteq> None", "by (rule_tac not_sym, simp)"], ["proof (state)\nthis:\n  v \\<noteq> None\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       drop (length (xs @ [y]) - n) (xs @ zs) = a # list \\<Longrightarrow>\n       drop (length (xs @ [y]) - n) (xs @ zs) = []", "ultimately"], ["proof (chain)\npicking this:\n  v = None\n  v \\<noteq> None", "show ?thesis"], ["proof (prove)\nusing this:\n  v = None\n  v \\<noteq> None\n\ngoal (1 subgoal):\n 1. drop (length (xs @ [y]) - n) (xs @ zs) = []", "by contradiction"], ["proof (state)\nthis:\n  drop (length (xs @ [y]) - n) (xs @ zs) = []\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  drop (length (xs @ [y]) - n) (xs @ zs) = []\n\ngoal (1 subgoal):\n 1. n \\<in> {0<..length (xs @ [y])} \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) zs,\n     ipurge_ref I D (D y) zs (insert None X \\<inter> Y))\n    \\<in> seq_comp_failures P Q", "hence R: \"zs = []\""], ["proof (prove)\nusing this:\n  drop (length (xs @ [y]) - n) (xs @ zs) = []\n\ngoal (1 subgoal):\n 1. zs = []", "using M"], ["proof (prove)\nusing this:\n  drop (length (xs @ [y]) - n) (xs @ zs) = []\n  n \\<in> {0<..length (xs @ [y])}\n\ngoal (1 subgoal):\n 1. zs = []", "by simp"], ["proof (state)\nthis:\n  zs = []\n\ngoal (1 subgoal):\n 1. n \\<in> {0<..length (xs @ [y])} \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) zs,\n     ipurge_ref I D (D y) zs (insert None X \\<inter> Y))\n    \\<in> seq_comp_failures P Q", "moreover"], ["proof (state)\nthis:\n  zs = []\n\ngoal (1 subgoal):\n 1. n \\<in> {0<..length (xs @ [y])} \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) zs,\n     ipurge_ref I D (D y) zs (insert None X \\<inter> Y))\n    \\<in> seq_comp_failures P Q", "have \"xs @ zs = take (length (xs @ [y]) - n) (xs @ zs) @\n      drop (length (xs @ [y]) - n) (xs @ zs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs @ zs =\n    take (length (xs @ [y]) - n) (xs @ zs) @\n    drop (length (xs @ [y]) - n) (xs @ zs)", "by (simp only: append_take_drop_id)"], ["proof (state)\nthis:\n  xs @ zs =\n  take (length (xs @ [y]) - n) (xs @ zs) @\n  drop (length (xs @ [y]) - n) (xs @ zs)\n\ngoal (1 subgoal):\n 1. n \\<in> {0<..length (xs @ [y])} \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) zs,\n     ipurge_ref I D (D y) zs (insert None X \\<inter> Y))\n    \\<in> seq_comp_failures P Q", "ultimately"], ["proof (chain)\npicking this:\n  zs = []\n  xs @ zs =\n  take (length (xs @ [y]) - n) (xs @ zs) @\n  drop (length (xs @ [y]) - n) (xs @ zs)", "have \"take (length (xs @ [y]) - n) (xs @ zs) = xs\""], ["proof (prove)\nusing this:\n  zs = []\n  xs @ zs =\n  take (length (xs @ [y]) - n) (xs @ zs) @\n  drop (length (xs @ [y]) - n) (xs @ zs)\n\ngoal (1 subgoal):\n 1. take (length (xs @ [y]) - n) (xs @ zs) = xs", "using Q"], ["proof (prove)\nusing this:\n  zs = []\n  xs @ zs =\n  take (length (xs @ [y]) - n) (xs @ zs) @\n  drop (length (xs @ [y]) - n) (xs @ zs)\n  drop (length (xs @ [y]) - n) (xs @ zs) = []\n\ngoal (1 subgoal):\n 1. take (length (xs @ [y]) - n) (xs @ zs) = xs", "by simp"], ["proof (state)\nthis:\n  take (length (xs @ [y]) - n) (xs @ zs) = xs\n\ngoal (1 subgoal):\n 1. n \\<in> {0<..length (xs @ [y])} \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) zs,\n     ipurge_ref I D (D y) zs (insert None X \\<inter> Y))\n    \\<in> seq_comp_failures P Q", "hence \"take (length (xs @ [y]) - n) (xs @ [y]) = xs\""], ["proof (prove)\nusing this:\n  take (length (xs @ [y]) - n) (xs @ zs) = xs\n\ngoal (1 subgoal):\n 1. take (length (xs @ [y]) - n) (xs @ [y]) = xs", "using O"], ["proof (prove)\nusing this:\n  take (length (xs @ [y]) - n) (xs @ zs) = xs\n  take (length (xs @ [y]) - n) (xs @ [y]) =\n  take (length (xs @ [y]) - n) (xs @ zs)\n\ngoal (1 subgoal):\n 1. take (length (xs @ [y]) - n) (xs @ [y]) = xs", "by simp"], ["proof (state)\nthis:\n  take (length (xs @ [y]) - n) (xs @ [y]) = xs\n\ngoal (1 subgoal):\n 1. n \\<in> {0<..length (xs @ [y])} \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) zs,\n     ipurge_ref I D (D y) zs (insert None X \\<inter> Y))\n    \\<in> seq_comp_failures P Q", "moreover"], ["proof (state)\nthis:\n  take (length (xs @ [y]) - n) (xs @ [y]) = xs\n\ngoal (1 subgoal):\n 1. n \\<in> {0<..length (xs @ [y])} \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) zs,\n     ipurge_ref I D (D y) zs (insert None X \\<inter> Y))\n    \\<in> seq_comp_failures P Q", "have \"xs @ [y] = take (length (xs @ [y]) - n) (xs @ [y]) @\n      drop (length (xs @ [y]) - n) (xs @ [y])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs @ [y] =\n    take (length (xs @ [y]) - n) (xs @ [y]) @\n    drop (length (xs @ [y]) - n) (xs @ [y])", "by (simp only: append_take_drop_id)"], ["proof (state)\nthis:\n  xs @ [y] =\n  take (length (xs @ [y]) - n) (xs @ [y]) @\n  drop (length (xs @ [y]) - n) (xs @ [y])\n\ngoal (1 subgoal):\n 1. n \\<in> {0<..length (xs @ [y])} \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) zs,\n     ipurge_ref I D (D y) zs (insert None X \\<inter> Y))\n    \\<in> seq_comp_failures P Q", "ultimately"], ["proof (chain)\npicking this:\n  take (length (xs @ [y]) - n) (xs @ [y]) = xs\n  xs @ [y] =\n  take (length (xs @ [y]) - n) (xs @ [y]) @\n  drop (length (xs @ [y]) - n) (xs @ [y])", "have \"drop (length (xs @ [y]) - n) (xs @ [y]) = [y]\""], ["proof (prove)\nusing this:\n  take (length (xs @ [y]) - n) (xs @ [y]) = xs\n  xs @ [y] =\n  take (length (xs @ [y]) - n) (xs @ [y]) @\n  drop (length (xs @ [y]) - n) (xs @ [y])\n\ngoal (1 subgoal):\n 1. drop (length (xs @ [y]) - n) (xs @ [y]) = [y]", "by simp"], ["proof (state)\nthis:\n  drop (length (xs @ [y]) - n) (xs @ [y]) = [y]\n\ngoal (1 subgoal):\n 1. n \\<in> {0<..length (xs @ [y])} \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) zs,\n     ipurge_ref I D (D y) zs (insert None X \\<inter> Y))\n    \\<in> seq_comp_failures P Q", "hence S: \"([y], W) \\<in> failures Q\""], ["proof (prove)\nusing this:\n  drop (length (xs @ [y]) - n) (xs @ [y]) = [y]\n\ngoal (1 subgoal):\n 1. ([y], W) \\<in> failures Q", "using N"], ["proof (prove)\nusing this:\n  drop (length (xs @ [y]) - n) (xs @ [y]) = [y]\n  take (length (xs @ [y]) - n) (xs @ [y]) \\<in> sentences P \\<and>\n  (drop (length (xs @ [y]) - n) (xs @ [y]), W) \\<in> failures Q\n\ngoal (1 subgoal):\n 1. ([y], W) \\<in> failures Q", "by simp"], ["proof (state)\nthis:\n  ([y], W) \\<in> failures Q\n\ngoal (1 subgoal):\n 1. n \\<in> {0<..length (xs @ [y])} \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) zs,\n     ipurge_ref I D (D y) zs (insert None X \\<inter> Y))\n    \\<in> seq_comp_failures P Q", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (xs @ y # ipurge_tr I D (D y) zs,\n     ipurge_ref I D (D y) zs (insert None X \\<inter> Y))\n    \\<in> seq_comp_failures P Q", "using E and R"], ["proof (prove)\nusing this:\n  xs @ zs \\<in> sentences P\n  zs = []\n\ngoal (1 subgoal):\n 1. (xs @ y # ipurge_tr I D (D y) zs,\n     ipurge_ref I D (D y) zs (insert None X \\<inter> Y))\n    \\<in> seq_comp_failures P Q", "proof (rule_tac SCF_R3, simp_all)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>xs \\<in> sentences P; zs = []\\<rbrakk>\n    \\<Longrightarrow> ([y],\n                       ipurge_ref I D (D y) [] (insert None X \\<inter> Y))\n                      \\<in> failures Q", "have \"\\<forall>xs y ys Y zs Z.\n        (y # ys, Y) \\<in> futures Q xs \\<and> (zs, Z) \\<in> futures Q xs \\<longrightarrow>\n        (ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys Y) \\<in> futures Q xs \\<and>\n        (y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs Z) \\<in> futures Q xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>xs y ys Y zs Z.\n       (y # ys, Y) \\<in> futures Q xs \\<and>\n       (zs, Z) \\<in> futures Q xs \\<longrightarrow>\n       (ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys Y)\n       \\<in> futures Q xs \\<and>\n       (y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs Z)\n       \\<in> futures Q xs", "using D"], ["proof (prove)\nusing this:\n  secure Q I D\n\ngoal (1 subgoal):\n 1. \\<forall>xs y ys Y zs Z.\n       (y # ys, Y) \\<in> futures Q xs \\<and>\n       (zs, Z) \\<in> futures Q xs \\<longrightarrow>\n       (ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys Y)\n       \\<in> futures Q xs \\<and>\n       (y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs Z)\n       \\<in> futures Q xs", "by (simp add: secure_def)"], ["proof (state)\nthis:\n  \\<forall>xs y ys Y zs Z.\n     (y # ys, Y) \\<in> futures Q xs \\<and>\n     (zs, Z) \\<in> futures Q xs \\<longrightarrow>\n     (ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys Y)\n     \\<in> futures Q xs \\<and>\n     (y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs Z)\n     \\<in> futures Q xs\n\ngoal (1 subgoal):\n 1. \\<lbrakk>xs \\<in> sentences P; zs = []\\<rbrakk>\n    \\<Longrightarrow> ([y],\n                       ipurge_ref I D (D y) [] (insert None X \\<inter> Y))\n                      \\<in> failures Q", "hence \"([y], W) \\<in> futures Q [] \\<and> ([], Y) \\<in> futures Q [] \\<longrightarrow>\n        (ipurge_tr I D (D y) [], ipurge_ref I D (D y) [] W) \\<in> futures Q [] \\<and>\n        (y # ipurge_tr I D (D y) [], ipurge_ref I D (D y) [] Y) \\<in> futures Q []\""], ["proof (prove)\nusing this:\n  \\<forall>xs y ys Y zs Z.\n     (y # ys, Y) \\<in> futures Q xs \\<and>\n     (zs, Z) \\<in> futures Q xs \\<longrightarrow>\n     (ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys Y)\n     \\<in> futures Q xs \\<and>\n     (y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs Z)\n     \\<in> futures Q xs\n\ngoal (1 subgoal):\n 1. ([y], W) \\<in> futures Q [] \\<and>\n    ([], Y) \\<in> futures Q [] \\<longrightarrow>\n    (ipurge_tr I D (D y) [], ipurge_ref I D (D y) [] W)\n    \\<in> futures Q [] \\<and>\n    (y # ipurge_tr I D (D y) [], ipurge_ref I D (D y) [] Y)\n    \\<in> futures Q []", "by blast"], ["proof (state)\nthis:\n  ([y], W) \\<in> futures Q [] \\<and>\n  ([], Y) \\<in> futures Q [] \\<longrightarrow>\n  (ipurge_tr I D (D y) [], ipurge_ref I D (D y) [] W)\n  \\<in> futures Q [] \\<and>\n  (y # ipurge_tr I D (D y) [], ipurge_ref I D (D y) [] Y) \\<in> futures Q []\n\ngoal (1 subgoal):\n 1. \\<lbrakk>xs \\<in> sentences P; zs = []\\<rbrakk>\n    \\<Longrightarrow> ([y],\n                       ipurge_ref I D (D y) [] (insert None X \\<inter> Y))\n                      \\<in> failures Q", "moreover"], ["proof (state)\nthis:\n  ([y], W) \\<in> futures Q [] \\<and>\n  ([], Y) \\<in> futures Q [] \\<longrightarrow>\n  (ipurge_tr I D (D y) [], ipurge_ref I D (D y) [] W)\n  \\<in> futures Q [] \\<and>\n  (y # ipurge_tr I D (D y) [], ipurge_ref I D (D y) [] Y) \\<in> futures Q []\n\ngoal (1 subgoal):\n 1. \\<lbrakk>xs \\<in> sentences P; zs = []\\<rbrakk>\n    \\<Longrightarrow> ([y],\n                       ipurge_ref I D (D y) [] (insert None X \\<inter> Y))\n                      \\<in> failures Q", "have \"([y], W) \\<in> futures Q []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ([y], W) \\<in> futures Q []", "using S"], ["proof (prove)\nusing this:\n  ([y], W) \\<in> failures Q\n\ngoal (1 subgoal):\n 1. ([y], W) \\<in> futures Q []", "by (simp add: futures_def)"], ["proof (state)\nthis:\n  ([y], W) \\<in> futures Q []\n\ngoal (1 subgoal):\n 1. \\<lbrakk>xs \\<in> sentences P; zs = []\\<rbrakk>\n    \\<Longrightarrow> ([y],\n                       ipurge_ref I D (D y) [] (insert None X \\<inter> Y))\n                      \\<in> failures Q", "moreover"], ["proof (state)\nthis:\n  ([y], W) \\<in> futures Q []\n\ngoal (1 subgoal):\n 1. \\<lbrakk>xs \\<in> sentences P; zs = []\\<rbrakk>\n    \\<Longrightarrow> ([y],\n                       ipurge_ref I D (D y) [] (insert None X \\<inter> Y))\n                      \\<in> failures Q", "have \"([], Y) \\<in> futures Q []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ([], Y) \\<in> futures Q []", "using G"], ["proof (prove)\nusing this:\n  ([], Y) \\<in> failures Q\n\ngoal (1 subgoal):\n 1. ([], Y) \\<in> futures Q []", "by (simp add: futures_def)"], ["proof (state)\nthis:\n  ([], Y) \\<in> futures Q []\n\ngoal (1 subgoal):\n 1. \\<lbrakk>xs \\<in> sentences P; zs = []\\<rbrakk>\n    \\<Longrightarrow> ([y],\n                       ipurge_ref I D (D y) [] (insert None X \\<inter> Y))\n                      \\<in> failures Q", "ultimately"], ["proof (chain)\npicking this:\n  ([y], W) \\<in> futures Q [] \\<and>\n  ([], Y) \\<in> futures Q [] \\<longrightarrow>\n  (ipurge_tr I D (D y) [], ipurge_ref I D (D y) [] W)\n  \\<in> futures Q [] \\<and>\n  (y # ipurge_tr I D (D y) [], ipurge_ref I D (D y) [] Y) \\<in> futures Q []\n  ([y], W) \\<in> futures Q []\n  ([], Y) \\<in> futures Q []", "have \"([y], ipurge_ref I D (D y) [] Y) \\<in> failures Q\"\n        (is \"(_, ?Y') \\<in> _\")"], ["proof (prove)\nusing this:\n  ([y], W) \\<in> futures Q [] \\<and>\n  ([], Y) \\<in> futures Q [] \\<longrightarrow>\n  (ipurge_tr I D (D y) [], ipurge_ref I D (D y) [] W)\n  \\<in> futures Q [] \\<and>\n  (y # ipurge_tr I D (D y) [], ipurge_ref I D (D y) [] Y) \\<in> futures Q []\n  ([y], W) \\<in> futures Q []\n  ([], Y) \\<in> futures Q []\n\ngoal (1 subgoal):\n 1. ([y], ipurge_ref I D (D y) [] Y) \\<in> failures Q", "by (simp add: futures_def)"], ["proof (state)\nthis:\n  ([y], ipurge_ref I D (D y) [] Y) \\<in> failures Q\n\ngoal (1 subgoal):\n 1. \\<lbrakk>xs \\<in> sentences P; zs = []\\<rbrakk>\n    \\<Longrightarrow> ([y],\n                       ipurge_ref I D (D y) [] (insert None X \\<inter> Y))\n                      \\<in> failures Q", "moreover"], ["proof (state)\nthis:\n  ([y], ipurge_ref I D (D y) [] Y) \\<in> failures Q\n\ngoal (1 subgoal):\n 1. \\<lbrakk>xs \\<in> sentences P; zs = []\\<rbrakk>\n    \\<Longrightarrow> ([y],\n                       ipurge_ref I D (D y) [] (insert None X \\<inter> Y))\n                      \\<in> failures Q", "have \"ipurge_ref I D (D y) [] (insert None X) \\<inter> ?Y' \\<subseteq> ?Y'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ipurge_ref I D (D y) [] (insert None X) \\<inter>\n    ipurge_ref I D (D y) [] Y\n    \\<subseteq> ipurge_ref I D (D y) [] Y", "by simp"], ["proof (state)\nthis:\n  ipurge_ref I D (D y) [] (insert None X) \\<inter> ipurge_ref I D (D y) [] Y\n  \\<subseteq> ipurge_ref I D (D y) [] Y\n\ngoal (1 subgoal):\n 1. \\<lbrakk>xs \\<in> sentences P; zs = []\\<rbrakk>\n    \\<Longrightarrow> ([y],\n                       ipurge_ref I D (D y) [] (insert None X \\<inter> Y))\n                      \\<in> failures Q", "ultimately"], ["proof (chain)\npicking this:\n  ([y], ipurge_ref I D (D y) [] Y) \\<in> failures Q\n  ipurge_ref I D (D y) [] (insert None X) \\<inter> ipurge_ref I D (D y) [] Y\n  \\<subseteq> ipurge_ref I D (D y) [] Y", "have \"([y], ipurge_ref I D (D y) [] (insert None X) \\<inter> ?Y')\n        \\<in> failures Q\""], ["proof (prove)\nusing this:\n  ([y], ipurge_ref I D (D y) [] Y) \\<in> failures Q\n  ipurge_ref I D (D y) [] (insert None X) \\<inter> ipurge_ref I D (D y) [] Y\n  \\<subseteq> ipurge_ref I D (D y) [] Y\n\ngoal (1 subgoal):\n 1. ([y],\n     ipurge_ref I D (D y) [] (insert None X) \\<inter>\n     ipurge_ref I D (D y) [] Y)\n    \\<in> failures Q", "by (rule process_rule_3)"], ["proof (state)\nthis:\n  ([y],\n   ipurge_ref I D (D y) [] (insert None X) \\<inter>\n   ipurge_ref I D (D y) [] Y)\n  \\<in> failures Q\n\ngoal (1 subgoal):\n 1. \\<lbrakk>xs \\<in> sentences P; zs = []\\<rbrakk>\n    \\<Longrightarrow> ([y],\n                       ipurge_ref I D (D y) [] (insert None X \\<inter> Y))\n                      \\<in> failures Q", "thus \"([y], ipurge_ref I D (D y) [] (insert None X \\<inter> Y)) \\<in> failures Q\""], ["proof (prove)\nusing this:\n  ([y],\n   ipurge_ref I D (D y) [] (insert None X) \\<inter>\n   ipurge_ref I D (D y) [] Y)\n  \\<in> failures Q\n\ngoal (1 subgoal):\n 1. ([y], ipurge_ref I D (D y) [] (insert None X \\<inter> Y))\n    \\<in> failures Q", "by (simp add: ipurge_ref_distrib_inter)"], ["proof (state)\nthis:\n  ([y], ipurge_ref I D (D y) [] (insert None X \\<inter> Y)) \\<in> failures Q\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (xs @ y # ipurge_tr I D (D y) zs,\n   ipurge_ref I D (D y) zs (insert None X \\<inter> Y))\n  \\<in> seq_comp_failures P Q\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (xs @ y # ipurge_tr I D (D y) zs,\n   ipurge_ref I D (D y) zs (insert None X \\<inter> Y))\n  \\<in> seq_comp_failures P Q\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma seq_comp_secure_aux_2_case_3:\n  assumes\n    A: \"secure_termination I D\" and\n    B: \"ref_union_closed P\" and\n    C: \"sequential P\" and\n    D: \"secure P I D\" and\n    E: \"secure Q I D\" and\n    F: \"ws \\<in> sentences P\" and\n    G: \"(ys, Y) \\<in> failures Q\" and\n    H: \"ys \\<noteq> []\" and\n    I: \"ws @ ys = xs @ zs\" and\n    J: \"(xs @ [y], {}) \\<in> seq_comp_failures P Q\"\n  shows \"(xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs Y)\n    \\<in> seq_comp_failures P Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs Y)\n    \\<in> seq_comp_failures P Q", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs Y)\n    \\<in> seq_comp_failures P Q", "have \"\\<exists>R. {} = (\\<Union>n \\<in> {..length (xs @ [y])}. \\<Union>W \\<in> R n. W) \\<and>\n    (\\<forall>W \\<in> R 0.\n      xs @ [y] \\<notin> sentences P \\<and> None \\<notin> set (xs @ [y]) \\<and>\n        (xs @ [y], W) \\<in> failures P \\<or>\n      xs @ [y] \\<in> sentences P \\<and> (\\<exists>U V. (xs @ [y], U) \\<in> failures P \\<and>\n        ([], V) \\<in> failures Q \\<and> W = insert None U \\<inter> V)) \\<and>\n    (\\<forall>n \\<in> {0<..length (xs @ [y])}. \\<forall>W \\<in> R n.\n      take (length (xs @ [y]) - n) (xs @ [y]) \\<in> sentences P \\<and>\n      (drop (length (xs @ [y]) - n) (xs @ [y]), W) \\<in> failures Q) \\<and>\n    (\\<exists>n \\<in> {..length (xs @ [y])}. \\<exists>W. W \\<in> R n)\"\n    (is \"\\<exists>R. ?T R\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>R.\n       {} = (\\<Union>n\\<le>length (xs @ [y]). \\<Union>W\\<in>R n. W) \\<and>\n       (\\<forall>W\\<in>R 0.\n           xs @ [y] \\<notin> sentences P \\<and>\n           None \\<notin> set (xs @ [y]) \\<and>\n           (xs @ [y], W) \\<in> failures P \\<or>\n           xs @ [y] \\<in> sentences P \\<and>\n           (\\<exists>U V.\n               (xs @ [y], U) \\<in> failures P \\<and>\n               ([], V) \\<in> failures Q \\<and>\n               W = insert None U \\<inter> V)) \\<and>\n       (\\<forall>n\\<in>{0<..length (xs @ [y])}.\n           \\<forall>W\\<in>R n.\n              take (length (xs @ [y]) - n) (xs @ [y])\n              \\<in> sentences P \\<and>\n              (drop (length (xs @ [y]) - n) (xs @ [y]), W)\n              \\<in> failures Q) \\<and>\n       (\\<exists>n\\<in>{..length (xs @ [y])}. \\<exists>W. W \\<in> R n)", "using J"], ["proof (prove)\nusing this:\n  (xs @ [y], {}) \\<in> seq_comp_failures P Q\n\ngoal (1 subgoal):\n 1. \\<exists>R.\n       {} = (\\<Union>n\\<le>length (xs @ [y]). \\<Union>W\\<in>R n. W) \\<and>\n       (\\<forall>W\\<in>R 0.\n           xs @ [y] \\<notin> sentences P \\<and>\n           None \\<notin> set (xs @ [y]) \\<and>\n           (xs @ [y], W) \\<in> failures P \\<or>\n           xs @ [y] \\<in> sentences P \\<and>\n           (\\<exists>U V.\n               (xs @ [y], U) \\<in> failures P \\<and>\n               ([], V) \\<in> failures Q \\<and>\n               W = insert None U \\<inter> V)) \\<and>\n       (\\<forall>n\\<in>{0<..length (xs @ [y])}.\n           \\<forall>W\\<in>R n.\n              take (length (xs @ [y]) - n) (xs @ [y])\n              \\<in> sentences P \\<and>\n              (drop (length (xs @ [y]) - n) (xs @ [y]), W)\n              \\<in> failures Q) \\<and>\n       (\\<exists>n\\<in>{..length (xs @ [y])}. \\<exists>W. W \\<in> R n)", "by (rule seq_comp_refusals_1)"], ["proof (state)\nthis:\n  \\<exists>R.\n     {} = (\\<Union>n\\<le>length (xs @ [y]). \\<Union>W\\<in>R n. W) \\<and>\n     (\\<forall>W\\<in>R 0.\n         xs @ [y] \\<notin> sentences P \\<and>\n         None \\<notin> set (xs @ [y]) \\<and>\n         (xs @ [y], W) \\<in> failures P \\<or>\n         xs @ [y] \\<in> sentences P \\<and>\n         (\\<exists>U V.\n             (xs @ [y], U) \\<in> failures P \\<and>\n             ([], V) \\<in> failures Q \\<and>\n             W = insert None U \\<inter> V)) \\<and>\n     (\\<forall>n\\<in>{0<..length (xs @ [y])}.\n         \\<forall>W\\<in>R n.\n            take (length (xs @ [y]) - n) (xs @ [y]) \\<in> sentences P \\<and>\n            (drop (length (xs @ [y]) - n) (xs @ [y]), W)\n            \\<in> failures Q) \\<and>\n     (\\<exists>n\\<in>{..length (xs @ [y])}. \\<exists>W. W \\<in> R n)\n\ngoal (1 subgoal):\n 1. (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs Y)\n    \\<in> seq_comp_failures P Q", "then"], ["proof (chain)\npicking this:\n  \\<exists>R.\n     {} = (\\<Union>n\\<le>length (xs @ [y]). \\<Union>W\\<in>R n. W) \\<and>\n     (\\<forall>W\\<in>R 0.\n         xs @ [y] \\<notin> sentences P \\<and>\n         None \\<notin> set (xs @ [y]) \\<and>\n         (xs @ [y], W) \\<in> failures P \\<or>\n         xs @ [y] \\<in> sentences P \\<and>\n         (\\<exists>U V.\n             (xs @ [y], U) \\<in> failures P \\<and>\n             ([], V) \\<in> failures Q \\<and>\n             W = insert None U \\<inter> V)) \\<and>\n     (\\<forall>n\\<in>{0<..length (xs @ [y])}.\n         \\<forall>W\\<in>R n.\n            take (length (xs @ [y]) - n) (xs @ [y]) \\<in> sentences P \\<and>\n            (drop (length (xs @ [y]) - n) (xs @ [y]), W)\n            \\<in> failures Q) \\<and>\n     (\\<exists>n\\<in>{..length (xs @ [y])}. \\<exists>W. W \\<in> R n)", "obtain R where J: \"?T R\""], ["proof (prove)\nusing this:\n  \\<exists>R.\n     {} = (\\<Union>n\\<le>length (xs @ [y]). \\<Union>W\\<in>R n. W) \\<and>\n     (\\<forall>W\\<in>R 0.\n         xs @ [y] \\<notin> sentences P \\<and>\n         None \\<notin> set (xs @ [y]) \\<and>\n         (xs @ [y], W) \\<in> failures P \\<or>\n         xs @ [y] \\<in> sentences P \\<and>\n         (\\<exists>U V.\n             (xs @ [y], U) \\<in> failures P \\<and>\n             ([], V) \\<in> failures Q \\<and>\n             W = insert None U \\<inter> V)) \\<and>\n     (\\<forall>n\\<in>{0<..length (xs @ [y])}.\n         \\<forall>W\\<in>R n.\n            take (length (xs @ [y]) - n) (xs @ [y]) \\<in> sentences P \\<and>\n            (drop (length (xs @ [y]) - n) (xs @ [y]), W)\n            \\<in> failures Q) \\<and>\n     (\\<exists>n\\<in>{..length (xs @ [y])}. \\<exists>W. W \\<in> R n)\n\ngoal (1 subgoal):\n 1. (\\<And>R.\n        {} = (\\<Union>n\\<le>length (xs @ [y]). \\<Union>W\\<in>R n. W) \\<and>\n        (\\<forall>W\\<in>R 0.\n            xs @ [y] \\<notin> sentences P \\<and>\n            None \\<notin> set (xs @ [y]) \\<and>\n            (xs @ [y], W) \\<in> failures P \\<or>\n            xs @ [y] \\<in> sentences P \\<and>\n            (\\<exists>U V.\n                (xs @ [y], U) \\<in> failures P \\<and>\n                ([], V) \\<in> failures Q \\<and>\n                W = insert None U \\<inter> V)) \\<and>\n        (\\<forall>n\\<in>{0<..length (xs @ [y])}.\n            \\<forall>W\\<in>R n.\n               take (length (xs @ [y]) - n) (xs @ [y])\n               \\<in> sentences P \\<and>\n               (drop (length (xs @ [y]) - n) (xs @ [y]), W)\n               \\<in> failures Q) \\<and>\n        (\\<exists>n\\<in>{..length (xs @ [y])}.\n            \\<exists>W. W \\<in> R n) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  {} = (\\<Union>n\\<le>length (xs @ [y]). \\<Union>W\\<in>R n. W) \\<and>\n  (\\<forall>W\\<in>R 0.\n      xs @ [y] \\<notin> sentences P \\<and>\n      None \\<notin> set (xs @ [y]) \\<and>\n      (xs @ [y], W) \\<in> failures P \\<or>\n      xs @ [y] \\<in> sentences P \\<and>\n      (\\<exists>U V.\n          (xs @ [y], U) \\<in> failures P \\<and>\n          ([], V) \\<in> failures Q \\<and>\n          W = insert None U \\<inter> V)) \\<and>\n  (\\<forall>n\\<in>{0<..length (xs @ [y])}.\n      \\<forall>W\\<in>R n.\n         take (length (xs @ [y]) - n) (xs @ [y]) \\<in> sentences P \\<and>\n         (drop (length (xs @ [y]) - n) (xs @ [y]), W)\n         \\<in> failures Q) \\<and>\n  (\\<exists>n\\<in>{..length (xs @ [y])}. \\<exists>W. W \\<in> R n)\n\ngoal (1 subgoal):\n 1. (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs Y)\n    \\<in> seq_comp_failures P Q", "hence \"\\<exists>n \\<in> {..length (xs @ [y])}. \\<exists>W. W \\<in> R n\""], ["proof (prove)\nusing this:\n  {} = (\\<Union>n\\<le>length (xs @ [y]). \\<Union>W\\<in>R n. W) \\<and>\n  (\\<forall>W\\<in>R 0.\n      xs @ [y] \\<notin> sentences P \\<and>\n      None \\<notin> set (xs @ [y]) \\<and>\n      (xs @ [y], W) \\<in> failures P \\<or>\n      xs @ [y] \\<in> sentences P \\<and>\n      (\\<exists>U V.\n          (xs @ [y], U) \\<in> failures P \\<and>\n          ([], V) \\<in> failures Q \\<and>\n          W = insert None U \\<inter> V)) \\<and>\n  (\\<forall>n\\<in>{0<..length (xs @ [y])}.\n      \\<forall>W\\<in>R n.\n         take (length (xs @ [y]) - n) (xs @ [y]) \\<in> sentences P \\<and>\n         (drop (length (xs @ [y]) - n) (xs @ [y]), W)\n         \\<in> failures Q) \\<and>\n  (\\<exists>n\\<in>{..length (xs @ [y])}. \\<exists>W. W \\<in> R n)\n\ngoal (1 subgoal):\n 1. \\<exists>n\\<in>{..length (xs @ [y])}. \\<exists>W. W \\<in> R n", "by simp"], ["proof (state)\nthis:\n  \\<exists>n\\<in>{..length (xs @ [y])}. \\<exists>W. W \\<in> R n\n\ngoal (1 subgoal):\n 1. (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs Y)\n    \\<in> seq_comp_failures P Q", "then"], ["proof (chain)\npicking this:\n  \\<exists>n\\<in>{..length (xs @ [y])}. \\<exists>W. W \\<in> R n", "obtain n where K: \"n \\<in> {..length (xs @ [y])}\" and L: \"\\<exists>W. W \\<in> R n\""], ["proof (prove)\nusing this:\n  \\<exists>n\\<in>{..length (xs @ [y])}. \\<exists>W. W \\<in> R n\n\ngoal (1 subgoal):\n 1. (\\<And>n.\n        \\<lbrakk>n \\<in> {..length (xs @ [y])};\n         \\<exists>W. W \\<in> R n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  n \\<in> {..length (xs @ [y])}\n  \\<exists>W. W \\<in> R n\n\ngoal (1 subgoal):\n 1. (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs Y)\n    \\<in> seq_comp_failures P Q", "have M: \"n = 0 \\<or> n \\<in> {0<..length (xs @ [y])}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n = 0 \\<or> n \\<in> {0<..length (xs @ [y])}", "using K"], ["proof (prove)\nusing this:\n  n \\<in> {..length (xs @ [y])}\n\ngoal (1 subgoal):\n 1. n = 0 \\<or> n \\<in> {0<..length (xs @ [y])}", "by auto"], ["proof (state)\nthis:\n  n = 0 \\<or> n \\<in> {0<..length (xs @ [y])}\n\ngoal (1 subgoal):\n 1. (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs Y)\n    \\<in> seq_comp_failures P Q", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs Y)\n    \\<in> seq_comp_failures P Q", "proof (cases \"length xs < length ws\")"], ["proof (state)\ngoal (2 subgoals):\n 1. length xs < length ws \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs Y)\n    \\<in> seq_comp_failures P Q\n 2. \\<not> length xs < length ws \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs Y)\n    \\<in> seq_comp_failures P Q", "case True"], ["proof (state)\nthis:\n  length xs < length ws\n\ngoal (2 subgoals):\n 1. length xs < length ws \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs Y)\n    \\<in> seq_comp_failures P Q\n 2. \\<not> length xs < length ws \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs Y)\n    \\<in> seq_comp_failures P Q", "have \"\\<forall>W \\<in> R 0.\n      xs @ [y] \\<notin> sentences P \\<and>\n        None \\<notin> set (xs @ [y]) \\<and> (xs @ [y], W) \\<in> failures P \\<or>\n      xs @ [y] \\<in> sentences P \\<and>\n        (\\<exists>U V. (xs @ [y], U) \\<in> failures P \\<and> ([], V) \\<in> failures Q \\<and>\n          W = insert None U \\<inter> V)\"\n      (is \"\\<forall>W \\<in> _. ?T W\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>W\\<in>R 0.\n       xs @ [y] \\<notin> sentences P \\<and>\n       None \\<notin> set (xs @ [y]) \\<and>\n       (xs @ [y], W) \\<in> failures P \\<or>\n       xs @ [y] \\<in> sentences P \\<and>\n       (\\<exists>U V.\n           (xs @ [y], U) \\<in> failures P \\<and>\n           ([], V) \\<in> failures Q \\<and> W = insert None U \\<inter> V)", "using J"], ["proof (prove)\nusing this:\n  {} = (\\<Union>n\\<le>length (xs @ [y]). \\<Union>W\\<in>R n. W) \\<and>\n  (\\<forall>W\\<in>R 0.\n      xs @ [y] \\<notin> sentences P \\<and>\n      None \\<notin> set (xs @ [y]) \\<and>\n      (xs @ [y], W) \\<in> failures P \\<or>\n      xs @ [y] \\<in> sentences P \\<and>\n      (\\<exists>U V.\n          (xs @ [y], U) \\<in> failures P \\<and>\n          ([], V) \\<in> failures Q \\<and>\n          W = insert None U \\<inter> V)) \\<and>\n  (\\<forall>n\\<in>{0<..length (xs @ [y])}.\n      \\<forall>W\\<in>R n.\n         take (length (xs @ [y]) - n) (xs @ [y]) \\<in> sentences P \\<and>\n         (drop (length (xs @ [y]) - n) (xs @ [y]), W)\n         \\<in> failures Q) \\<and>\n  (\\<exists>n\\<in>{..length (xs @ [y])}. \\<exists>W. W \\<in> R n)\n\ngoal (1 subgoal):\n 1. \\<forall>W\\<in>R 0.\n       xs @ [y] \\<notin> sentences P \\<and>\n       None \\<notin> set (xs @ [y]) \\<and>\n       (xs @ [y], W) \\<in> failures P \\<or>\n       xs @ [y] \\<in> sentences P \\<and>\n       (\\<exists>U V.\n           (xs @ [y], U) \\<in> failures P \\<and>\n           ([], V) \\<in> failures Q \\<and> W = insert None U \\<inter> V)", "by simp"], ["proof (state)\nthis:\n  \\<forall>W\\<in>R 0.\n     xs @ [y] \\<notin> sentences P \\<and>\n     None \\<notin> set (xs @ [y]) \\<and>\n     (xs @ [y], W) \\<in> failures P \\<or>\n     xs @ [y] \\<in> sentences P \\<and>\n     (\\<exists>U V.\n         (xs @ [y], U) \\<in> failures P \\<and>\n         ([], V) \\<in> failures Q \\<and> W = insert None U \\<inter> V)\n\ngoal (2 subgoals):\n 1. length xs < length ws \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs Y)\n    \\<in> seq_comp_failures P Q\n 2. \\<not> length xs < length ws \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs Y)\n    \\<in> seq_comp_failures P Q", "moreover"], ["proof (state)\nthis:\n  \\<forall>W\\<in>R 0.\n     xs @ [y] \\<notin> sentences P \\<and>\n     None \\<notin> set (xs @ [y]) \\<and>\n     (xs @ [y], W) \\<in> failures P \\<or>\n     xs @ [y] \\<in> sentences P \\<and>\n     (\\<exists>U V.\n         (xs @ [y], U) \\<in> failures P \\<and>\n         ([], V) \\<in> failures Q \\<and> W = insert None U \\<inter> V)\n\ngoal (2 subgoals):\n 1. length xs < length ws \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs Y)\n    \\<in> seq_comp_failures P Q\n 2. \\<not> length xs < length ws \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs Y)\n    \\<in> seq_comp_failures P Q", "have \"n \\<notin> {0<..length (xs @ [y])}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n \\<notin> {0<..length (xs @ [y])}", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. n \\<in> {0<..length (xs @ [y])} \\<Longrightarrow> False", "assume N: \"n \\<in> {0<..length (xs @ [y])}\""], ["proof (state)\nthis:\n  n \\<in> {0<..length (xs @ [y])}\n\ngoal (1 subgoal):\n 1. n \\<in> {0<..length (xs @ [y])} \\<Longrightarrow> False", "hence \"\\<forall>W \\<in> R n. take (length (xs @ [y]) - n) (xs @ [y]) \\<in> sentences P\""], ["proof (prove)\nusing this:\n  n \\<in> {0<..length (xs @ [y])}\n\ngoal (1 subgoal):\n 1. \\<forall>W\\<in>R n.\n       take (length (xs @ [y]) - n) (xs @ [y]) \\<in> sentences P", "using J"], ["proof (prove)\nusing this:\n  n \\<in> {0<..length (xs @ [y])}\n  {} = (\\<Union>n\\<le>length (xs @ [y]). \\<Union>W\\<in>R n. W) \\<and>\n  (\\<forall>W\\<in>R 0.\n      xs @ [y] \\<notin> sentences P \\<and>\n      None \\<notin> set (xs @ [y]) \\<and>\n      (xs @ [y], W) \\<in> failures P \\<or>\n      xs @ [y] \\<in> sentences P \\<and>\n      (\\<exists>U V.\n          (xs @ [y], U) \\<in> failures P \\<and>\n          ([], V) \\<in> failures Q \\<and>\n          W = insert None U \\<inter> V)) \\<and>\n  (\\<forall>n\\<in>{0<..length (xs @ [y])}.\n      \\<forall>W\\<in>R n.\n         take (length (xs @ [y]) - n) (xs @ [y]) \\<in> sentences P \\<and>\n         (drop (length (xs @ [y]) - n) (xs @ [y]), W)\n         \\<in> failures Q) \\<and>\n  (\\<exists>n\\<in>{..length (xs @ [y])}. \\<exists>W. W \\<in> R n)\n\ngoal (1 subgoal):\n 1. \\<forall>W\\<in>R n.\n       take (length (xs @ [y]) - n) (xs @ [y]) \\<in> sentences P", "by simp"], ["proof (state)\nthis:\n  \\<forall>W\\<in>R n.\n     take (length (xs @ [y]) - n) (xs @ [y]) \\<in> sentences P\n\ngoal (1 subgoal):\n 1. n \\<in> {0<..length (xs @ [y])} \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  \\<forall>W\\<in>R n.\n     take (length (xs @ [y]) - n) (xs @ [y]) \\<in> sentences P\n\ngoal (1 subgoal):\n 1. n \\<in> {0<..length (xs @ [y])} \\<Longrightarrow> False", "obtain W where \"W \\<in> R n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>W. W \\<in> R n \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "using L"], ["proof (prove)\nusing this:\n  \\<exists>W. W \\<in> R n\n\ngoal (1 subgoal):\n 1. (\\<And>W. W \\<in> R n \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", ".."], ["proof (state)\nthis:\n  W \\<in> R n\n\ngoal (1 subgoal):\n 1. n \\<in> {0<..length (xs @ [y])} \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>W\\<in>R n.\n     take (length (xs @ [y]) - n) (xs @ [y]) \\<in> sentences P\n  W \\<in> R n", "have \"take (length (xs @ [y]) - n) (xs @ [y]) \\<in> sentences P\""], ["proof (prove)\nusing this:\n  \\<forall>W\\<in>R n.\n     take (length (xs @ [y]) - n) (xs @ [y]) \\<in> sentences P\n  W \\<in> R n\n\ngoal (1 subgoal):\n 1. take (length (xs @ [y]) - n) (xs @ [y]) \\<in> sentences P", ".."], ["proof (state)\nthis:\n  take (length (xs @ [y]) - n) (xs @ [y]) \\<in> sentences P\n\ngoal (1 subgoal):\n 1. n \\<in> {0<..length (xs @ [y])} \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  take (length (xs @ [y]) - n) (xs @ [y]) \\<in> sentences P\n\ngoal (1 subgoal):\n 1. n \\<in> {0<..length (xs @ [y])} \\<Longrightarrow> False", "have \"take (length (xs @ [y]) - n) (xs @ [y]) =\n        take (length (xs @ [y]) - n) (xs @ zs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. take (length (xs @ [y]) - n) (xs @ [y]) =\n    take (length (xs @ [y]) - n) (xs @ zs)", "using N"], ["proof (prove)\nusing this:\n  n \\<in> {0<..length (xs @ [y])}\n\ngoal (1 subgoal):\n 1. take (length (xs @ [y]) - n) (xs @ [y]) =\n    take (length (xs @ [y]) - n) (xs @ zs)", "by simp"], ["proof (state)\nthis:\n  take (length (xs @ [y]) - n) (xs @ [y]) =\n  take (length (xs @ [y]) - n) (xs @ zs)\n\ngoal (1 subgoal):\n 1. n \\<in> {0<..length (xs @ [y])} \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  take (length (xs @ [y]) - n) (xs @ [y]) \\<in> sentences P\n  take (length (xs @ [y]) - n) (xs @ [y]) =\n  take (length (xs @ [y]) - n) (xs @ zs)", "have \"take (length (xs @ [y]) - n) (xs @ zs) \\<in> sentences P\""], ["proof (prove)\nusing this:\n  take (length (xs @ [y]) - n) (xs @ [y]) \\<in> sentences P\n  take (length (xs @ [y]) - n) (xs @ [y]) =\n  take (length (xs @ [y]) - n) (xs @ zs)\n\ngoal (1 subgoal):\n 1. take (length (xs @ [y]) - n) (xs @ zs) \\<in> sentences P", "by simp"], ["proof (state)\nthis:\n  take (length (xs @ [y]) - n) (xs @ zs) \\<in> sentences P\n\ngoal (1 subgoal):\n 1. n \\<in> {0<..length (xs @ [y])} \\<Longrightarrow> False", "hence \"take (length (xs @ [y]) - n) (ws @ ys) \\<in> sentences P\""], ["proof (prove)\nusing this:\n  take (length (xs @ [y]) - n) (xs @ zs) \\<in> sentences P\n\ngoal (1 subgoal):\n 1. take (length (xs @ [y]) - n) (ws @ ys) \\<in> sentences P", "using I"], ["proof (prove)\nusing this:\n  take (length (xs @ [y]) - n) (xs @ zs) \\<in> sentences P\n  ws @ ys = xs @ zs\n\ngoal (1 subgoal):\n 1. take (length (xs @ [y]) - n) (ws @ ys) \\<in> sentences P", "by simp"], ["proof (state)\nthis:\n  take (length (xs @ [y]) - n) (ws @ ys) \\<in> sentences P\n\ngoal (1 subgoal):\n 1. n \\<in> {0<..length (xs @ [y])} \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  take (length (xs @ [y]) - n) (ws @ ys) \\<in> sentences P\n\ngoal (1 subgoal):\n 1. n \\<in> {0<..length (xs @ [y])} \\<Longrightarrow> False", "have \"length (xs @ [y]) - n \\<le> length xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (xs @ [y]) - n \\<le> length xs", "using N"], ["proof (prove)\nusing this:\n  n \\<in> {0<..length (xs @ [y])}\n\ngoal (1 subgoal):\n 1. length (xs @ [y]) - n \\<le> length xs", "by (simp, arith)"], ["proof (state)\nthis:\n  length (xs @ [y]) - n \\<le> length xs\n\ngoal (1 subgoal):\n 1. n \\<in> {0<..length (xs @ [y])} \\<Longrightarrow> False", "hence O: \"length (xs @ [y]) - n < length ws\""], ["proof (prove)\nusing this:\n  length (xs @ [y]) - n \\<le> length xs\n\ngoal (1 subgoal):\n 1. length (xs @ [y]) - n < length ws", "using True"], ["proof (prove)\nusing this:\n  length (xs @ [y]) - n \\<le> length xs\n  length xs < length ws\n\ngoal (1 subgoal):\n 1. length (xs @ [y]) - n < length ws", "by simp"], ["proof (state)\nthis:\n  length (xs @ [y]) - n < length ws\n\ngoal (1 subgoal):\n 1. n \\<in> {0<..length (xs @ [y])} \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  take (length (xs @ [y]) - n) (ws @ ys) \\<in> sentences P\n  length (xs @ [y]) - n < length ws", "have P: \"take (length (xs @ [y]) - n) ws \\<in> sentences P\""], ["proof (prove)\nusing this:\n  take (length (xs @ [y]) - n) (ws @ ys) \\<in> sentences P\n  length (xs @ [y]) - n < length ws\n\ngoal (1 subgoal):\n 1. take (length (xs @ [y]) - n) ws \\<in> sentences P", "by simp"], ["proof (state)\nthis:\n  take (length (xs @ [y]) - n) ws \\<in> sentences P\n\ngoal (1 subgoal):\n 1. n \\<in> {0<..length (xs @ [y])} \\<Longrightarrow> False", "show False"], ["proof (prove)\ngoal (1 subgoal):\n 1. False", "proof (cases \"drop (length (xs @ [y]) - n) ws\")"], ["proof (state)\ngoal (2 subgoals):\n 1. drop (length (xs @ [y]) - n) ws = [] \\<Longrightarrow> False\n 2. \\<And>a list.\n       drop (length (xs @ [y]) - n) ws = a # list \\<Longrightarrow> False", "case Nil"], ["proof (state)\nthis:\n  drop (length (xs @ [y]) - n) ws = []\n\ngoal (2 subgoals):\n 1. drop (length (xs @ [y]) - n) ws = [] \\<Longrightarrow> False\n 2. \\<And>a list.\n       drop (length (xs @ [y]) - n) ws = a # list \\<Longrightarrow> False", "thus False"], ["proof (prove)\nusing this:\n  drop (length (xs @ [y]) - n) ws = []\n\ngoal (1 subgoal):\n 1. False", "using O"], ["proof (prove)\nusing this:\n  drop (length (xs @ [y]) - n) ws = []\n  length (xs @ [y]) - n < length ws\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       drop (length (xs @ [y]) - n) ws = a # list \\<Longrightarrow> False", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a list.\n       drop (length (xs @ [y]) - n) ws = a # list \\<Longrightarrow> False", "case (Cons v vs)"], ["proof (state)\nthis:\n  drop (length (xs @ [y]) - n) ws = v # vs\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       drop (length (xs @ [y]) - n) ws = a # list \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  drop (length (xs @ [y]) - n) ws = v # vs\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       drop (length (xs @ [y]) - n) ws = a # list \\<Longrightarrow> False", "have \"ws = take (length (xs @ [y]) - n) ws @\n          drop (length (xs @ [y]) - n) ws\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ws = take (length (xs @ [y]) - n) ws @ drop (length (xs @ [y]) - n) ws", "by simp"], ["proof (state)\nthis:\n  ws = take (length (xs @ [y]) - n) ws @ drop (length (xs @ [y]) - n) ws\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       drop (length (xs @ [y]) - n) ws = a # list \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  drop (length (xs @ [y]) - n) ws = v # vs\n  ws = take (length (xs @ [y]) - n) ws @ drop (length (xs @ [y]) - n) ws", "have Q: \"ws = take (length (xs @ [y]) - n) ws @ v # vs\""], ["proof (prove)\nusing this:\n  drop (length (xs @ [y]) - n) ws = v # vs\n  ws = take (length (xs @ [y]) - n) ws @ drop (length (xs @ [y]) - n) ws\n\ngoal (1 subgoal):\n 1. ws = take (length (xs @ [y]) - n) ws @ v # vs", "by simp"], ["proof (state)\nthis:\n  ws = take (length (xs @ [y]) - n) ws @ v # vs\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       drop (length (xs @ [y]) - n) ws = a # list \\<Longrightarrow> False", "hence \"take (length (xs @ [y]) - n) ws @ v # vs \\<in> sentences P\""], ["proof (prove)\nusing this:\n  ws = take (length (xs @ [y]) - n) ws @ v # vs\n\ngoal (1 subgoal):\n 1. take (length (xs @ [y]) - n) ws @ v # vs \\<in> sentences P", "using F"], ["proof (prove)\nusing this:\n  ws = take (length (xs @ [y]) - n) ws @ v # vs\n  ws \\<in> sentences P\n\ngoal (1 subgoal):\n 1. take (length (xs @ [y]) - n) ws @ v # vs \\<in> sentences P", "by simp"], ["proof (state)\nthis:\n  take (length (xs @ [y]) - n) ws @ v # vs \\<in> sentences P\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       drop (length (xs @ [y]) - n) ws = a # list \\<Longrightarrow> False", "hence \"(take (length (xs @ [y]) - n) ws @ v # vs) @ [None] \\<in> traces P\""], ["proof (prove)\nusing this:\n  take (length (xs @ [y]) - n) ws @ v # vs \\<in> sentences P\n\ngoal (1 subgoal):\n 1. (take (length (xs @ [y]) - n) ws @ v # vs) @ [None] \\<in> traces P", "by (simp add: sentences_def)"], ["proof (state)\nthis:\n  (take (length (xs @ [y]) - n) ws @ v # vs) @ [None] \\<in> traces P\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       drop (length (xs @ [y]) - n) ws = a # list \\<Longrightarrow> False", "hence \"take (length (xs @ [y]) - n) ws @ v # vs \\<in> traces P\""], ["proof (prove)\nusing this:\n  (take (length (xs @ [y]) - n) ws @ v # vs) @ [None] \\<in> traces P\n\ngoal (1 subgoal):\n 1. take (length (xs @ [y]) - n) ws @ v # vs \\<in> traces P", "by (rule process_rule_2_traces)"], ["proof (state)\nthis:\n  take (length (xs @ [y]) - n) ws @ v # vs \\<in> traces P\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       drop (length (xs @ [y]) - n) ws = a # list \\<Longrightarrow> False", "with C and P"], ["proof (chain)\npicking this:\n  sequential P\n  take (length (xs @ [y]) - n) ws \\<in> sentences P\n  take (length (xs @ [y]) - n) ws @ v # vs \\<in> traces P", "have \"v = None\""], ["proof (prove)\nusing this:\n  sequential P\n  take (length (xs @ [y]) - n) ws \\<in> sentences P\n  take (length (xs @ [y]) - n) ws @ v # vs \\<in> traces P\n\ngoal (1 subgoal):\n 1. v = None", "by (rule seq_sentences_none)"], ["proof (state)\nthis:\n  v = None\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       drop (length (xs @ [y]) - n) ws = a # list \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  v = None\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       drop (length (xs @ [y]) - n) ws = a # list \\<Longrightarrow> False", "have \"weakly_sequential P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. weakly_sequential P", "using C"], ["proof (prove)\nusing this:\n  sequential P\n\ngoal (1 subgoal):\n 1. weakly_sequential P", "by (rule seq_implies_weakly_seq)"], ["proof (state)\nthis:\n  weakly_sequential P\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       drop (length (xs @ [y]) - n) ws = a # list \\<Longrightarrow> False", "hence \"None \\<notin> set ws\""], ["proof (prove)\nusing this:\n  weakly_sequential P\n\ngoal (1 subgoal):\n 1. None \\<notin> set ws", "using F"], ["proof (prove)\nusing this:\n  weakly_sequential P\n  ws \\<in> sentences P\n\ngoal (1 subgoal):\n 1. None \\<notin> set ws", "by (rule weakly_seq_sentences_none)"], ["proof (state)\nthis:\n  None \\<notin> set ws\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       drop (length (xs @ [y]) - n) ws = a # list \\<Longrightarrow> False", "hence \"None \\<notin> set (take (length (xs @ [y]) - n) ws @ v # vs)\""], ["proof (prove)\nusing this:\n  None \\<notin> set ws\n\ngoal (1 subgoal):\n 1. None \\<notin> set (take (length (xs @ [y]) - n) ws @ v # vs)", "by (subst (asm) Q)"], ["proof (state)\nthis:\n  None \\<notin> set (take (length (xs @ [y]) - n) ws @ v # vs)\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       drop (length (xs @ [y]) - n) ws = a # list \\<Longrightarrow> False", "hence \"v \\<noteq> None\""], ["proof (prove)\nusing this:\n  None \\<notin> set (take (length (xs @ [y]) - n) ws @ v # vs)\n\ngoal (1 subgoal):\n 1. v \\<noteq> None", "by (rule_tac not_sym, simp)"], ["proof (state)\nthis:\n  v \\<noteq> None\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       drop (length (xs @ [y]) - n) ws = a # list \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  v = None\n  v \\<noteq> None", "show False"], ["proof (prove)\nusing this:\n  v = None\n  v \\<noteq> None\n\ngoal (1 subgoal):\n 1. False", "by contradiction"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  n \\<notin> {0<..length (xs @ [y])}\n\ngoal (2 subgoals):\n 1. length xs < length ws \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs Y)\n    \\<in> seq_comp_failures P Q\n 2. \\<not> length xs < length ws \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs Y)\n    \\<in> seq_comp_failures P Q", "hence \"n = 0\""], ["proof (prove)\nusing this:\n  n \\<notin> {0<..length (xs @ [y])}\n\ngoal (1 subgoal):\n 1. n = 0", "using M"], ["proof (prove)\nusing this:\n  n \\<notin> {0<..length (xs @ [y])}\n  n = 0 \\<or> n \\<in> {0<..length (xs @ [y])}\n\ngoal (1 subgoal):\n 1. n = 0", "by blast"], ["proof (state)\nthis:\n  n = 0\n\ngoal (2 subgoals):\n 1. length xs < length ws \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs Y)\n    \\<in> seq_comp_failures P Q\n 2. \\<not> length xs < length ws \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs Y)\n    \\<in> seq_comp_failures P Q", "hence \"\\<exists>W. W \\<in> R 0\""], ["proof (prove)\nusing this:\n  n = 0\n\ngoal (1 subgoal):\n 1. \\<exists>W. W \\<in> R 0", "using L"], ["proof (prove)\nusing this:\n  n = 0\n  \\<exists>W. W \\<in> R n\n\ngoal (1 subgoal):\n 1. \\<exists>W. W \\<in> R 0", "by simp"], ["proof (state)\nthis:\n  \\<exists>W. W \\<in> R 0\n\ngoal (2 subgoals):\n 1. length xs < length ws \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs Y)\n    \\<in> seq_comp_failures P Q\n 2. \\<not> length xs < length ws \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs Y)\n    \\<in> seq_comp_failures P Q", "then"], ["proof (chain)\npicking this:\n  \\<exists>W. W \\<in> R 0", "obtain W where \"W \\<in> R 0\""], ["proof (prove)\nusing this:\n  \\<exists>W. W \\<in> R 0\n\ngoal (1 subgoal):\n 1. (\\<And>W. W \\<in> R 0 \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", ".."], ["proof (state)\nthis:\n  W \\<in> R 0\n\ngoal (2 subgoals):\n 1. length xs < length ws \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs Y)\n    \\<in> seq_comp_failures P Q\n 2. \\<not> length xs < length ws \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs Y)\n    \\<in> seq_comp_failures P Q", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>W\\<in>R 0.\n     xs @ [y] \\<notin> sentences P \\<and>\n     None \\<notin> set (xs @ [y]) \\<and>\n     (xs @ [y], W) \\<in> failures P \\<or>\n     xs @ [y] \\<in> sentences P \\<and>\n     (\\<exists>U V.\n         (xs @ [y], U) \\<in> failures P \\<and>\n         ([], V) \\<in> failures Q \\<and> W = insert None U \\<inter> V)\n  W \\<in> R 0", "have \"?T W\""], ["proof (prove)\nusing this:\n  \\<forall>W\\<in>R 0.\n     xs @ [y] \\<notin> sentences P \\<and>\n     None \\<notin> set (xs @ [y]) \\<and>\n     (xs @ [y], W) \\<in> failures P \\<or>\n     xs @ [y] \\<in> sentences P \\<and>\n     (\\<exists>U V.\n         (xs @ [y], U) \\<in> failures P \\<and>\n         ([], V) \\<in> failures Q \\<and> W = insert None U \\<inter> V)\n  W \\<in> R 0\n\ngoal (1 subgoal):\n 1. xs @ [y] \\<notin> sentences P \\<and>\n    None \\<notin> set (xs @ [y]) \\<and> (xs @ [y], W) \\<in> failures P \\<or>\n    xs @ [y] \\<in> sentences P \\<and>\n    (\\<exists>U V.\n        (xs @ [y], U) \\<in> failures P \\<and>\n        ([], V) \\<in> failures Q \\<and> W = insert None U \\<inter> V)", ".."], ["proof (state)\nthis:\n  xs @ [y] \\<notin> sentences P \\<and>\n  None \\<notin> set (xs @ [y]) \\<and> (xs @ [y], W) \\<in> failures P \\<or>\n  xs @ [y] \\<in> sentences P \\<and>\n  (\\<exists>U V.\n      (xs @ [y], U) \\<in> failures P \\<and>\n      ([], V) \\<in> failures Q \\<and> W = insert None U \\<inter> V)\n\ngoal (2 subgoals):\n 1. length xs < length ws \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs Y)\n    \\<in> seq_comp_failures P Q\n 2. \\<not> length xs < length ws \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs Y)\n    \\<in> seq_comp_failures P Q", "hence N: \"(xs @ [y], {}) \\<in> failures P \\<and> None \\<notin> set xs \\<and> None \\<noteq> y\""], ["proof (prove)\nusing this:\n  xs @ [y] \\<notin> sentences P \\<and>\n  None \\<notin> set (xs @ [y]) \\<and> (xs @ [y], W) \\<in> failures P \\<or>\n  xs @ [y] \\<in> sentences P \\<and>\n  (\\<exists>U V.\n      (xs @ [y], U) \\<in> failures P \\<and>\n      ([], V) \\<in> failures Q \\<and> W = insert None U \\<inter> V)\n\ngoal (1 subgoal):\n 1. (xs @ [y], {}) \\<in> failures P \\<and>\n    None \\<notin> set xs \\<and> None \\<noteq> y", "proof (cases \"xs @ [y] \\<in> sentences P\", simp_all del: ex_simps,\n     (erule_tac exE)+, (erule_tac [!] conjE)+, simp_all)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>U V.\n       \\<lbrakk>xs @ [y] \\<in> sentences P;\n        \\<exists>Ua.\n           (xs @ [y], Ua) \\<in> failures P \\<and>\n           (\\<exists>Va.\n               ([], Va) \\<in> failures Q \\<and>\n               insert None U \\<inter> V = insert None Ua \\<inter> Va);\n        (xs @ [y], U) \\<in> failures P; ([], V) \\<in> failures Q;\n        W = insert None U \\<inter> V\\<rbrakk>\n       \\<Longrightarrow> (xs @ [y], {}) \\<in> failures P \\<and>\n                         None \\<notin> set xs \\<and> None \\<noteq> y\n 2. \\<lbrakk>xs @ [y] \\<notin> sentences P; None \\<noteq> y;\n     None \\<notin> set xs; (xs @ [y], W) \\<in> failures P\\<rbrakk>\n    \\<Longrightarrow> (xs @ [y], {}) \\<in> failures P", "case False"], ["proof (state)\nthis:\n  xs @ [y] \\<notin> sentences P\n\ngoal (2 subgoals):\n 1. \\<And>U V.\n       \\<lbrakk>xs @ [y] \\<in> sentences P;\n        \\<exists>Ua.\n           (xs @ [y], Ua) \\<in> failures P \\<and>\n           (\\<exists>Va.\n               ([], Va) \\<in> failures Q \\<and>\n               insert None U \\<inter> V = insert None Ua \\<inter> Va);\n        (xs @ [y], U) \\<in> failures P; ([], V) \\<in> failures Q;\n        W = insert None U \\<inter> V\\<rbrakk>\n       \\<Longrightarrow> (xs @ [y], {}) \\<in> failures P \\<and>\n                         None \\<notin> set xs \\<and> None \\<noteq> y\n 2. \\<lbrakk>xs @ [y] \\<notin> sentences P; None \\<noteq> y;\n     None \\<notin> set xs; (xs @ [y], W) \\<in> failures P\\<rbrakk>\n    \\<Longrightarrow> (xs @ [y], {}) \\<in> failures P", "assume \"(xs @ [y], W) \\<in> failures P\""], ["proof (state)\nthis:\n  (xs @ [y], W) \\<in> failures P\n\ngoal (2 subgoals):\n 1. \\<And>U V.\n       \\<lbrakk>xs @ [y] \\<in> sentences P;\n        \\<exists>Ua.\n           (xs @ [y], Ua) \\<in> failures P \\<and>\n           (\\<exists>Va.\n               ([], Va) \\<in> failures Q \\<and>\n               insert None U \\<inter> V = insert None Ua \\<inter> Va);\n        (xs @ [y], U) \\<in> failures P; ([], V) \\<in> failures Q;\n        W = insert None U \\<inter> V\\<rbrakk>\n       \\<Longrightarrow> (xs @ [y], {}) \\<in> failures P \\<and>\n                         None \\<notin> set xs \\<and> None \\<noteq> y\n 2. \\<lbrakk>xs @ [y] \\<notin> sentences P; None \\<noteq> y;\n     None \\<notin> set xs; (xs @ [y], W) \\<in> failures P\\<rbrakk>\n    \\<Longrightarrow> (xs @ [y], {}) \\<in> failures P", "moreover"], ["proof (state)\nthis:\n  (xs @ [y], W) \\<in> failures P\n\ngoal (2 subgoals):\n 1. \\<And>U V.\n       \\<lbrakk>xs @ [y] \\<in> sentences P;\n        \\<exists>Ua.\n           (xs @ [y], Ua) \\<in> failures P \\<and>\n           (\\<exists>Va.\n               ([], Va) \\<in> failures Q \\<and>\n               insert None U \\<inter> V = insert None Ua \\<inter> Va);\n        (xs @ [y], U) \\<in> failures P; ([], V) \\<in> failures Q;\n        W = insert None U \\<inter> V\\<rbrakk>\n       \\<Longrightarrow> (xs @ [y], {}) \\<in> failures P \\<and>\n                         None \\<notin> set xs \\<and> None \\<noteq> y\n 2. \\<lbrakk>xs @ [y] \\<notin> sentences P; None \\<noteq> y;\n     None \\<notin> set xs; (xs @ [y], W) \\<in> failures P\\<rbrakk>\n    \\<Longrightarrow> (xs @ [y], {}) \\<in> failures P", "have \"{} \\<subseteq> W\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {} \\<subseteq> W", ".."], ["proof (state)\nthis:\n  {} \\<subseteq> W\n\ngoal (2 subgoals):\n 1. \\<And>U V.\n       \\<lbrakk>xs @ [y] \\<in> sentences P;\n        \\<exists>Ua.\n           (xs @ [y], Ua) \\<in> failures P \\<and>\n           (\\<exists>Va.\n               ([], Va) \\<in> failures Q \\<and>\n               insert None U \\<inter> V = insert None Ua \\<inter> Va);\n        (xs @ [y], U) \\<in> failures P; ([], V) \\<in> failures Q;\n        W = insert None U \\<inter> V\\<rbrakk>\n       \\<Longrightarrow> (xs @ [y], {}) \\<in> failures P \\<and>\n                         None \\<notin> set xs \\<and> None \\<noteq> y\n 2. \\<lbrakk>xs @ [y] \\<notin> sentences P; None \\<noteq> y;\n     None \\<notin> set xs; (xs @ [y], W) \\<in> failures P\\<rbrakk>\n    \\<Longrightarrow> (xs @ [y], {}) \\<in> failures P", "ultimately"], ["proof (chain)\npicking this:\n  (xs @ [y], W) \\<in> failures P\n  {} \\<subseteq> W", "show \"(xs @ [y], {}) \\<in> failures P\""], ["proof (prove)\nusing this:\n  (xs @ [y], W) \\<in> failures P\n  {} \\<subseteq> W\n\ngoal (1 subgoal):\n 1. (xs @ [y], {}) \\<in> failures P", "by (rule process_rule_3)"], ["proof (state)\nthis:\n  (xs @ [y], {}) \\<in> failures P\n\ngoal (1 subgoal):\n 1. \\<And>U V.\n       \\<lbrakk>xs @ [y] \\<in> sentences P;\n        \\<exists>Ua.\n           (xs @ [y], Ua) \\<in> failures P \\<and>\n           (\\<exists>Va.\n               ([], Va) \\<in> failures Q \\<and>\n               insert None U \\<inter> V = insert None Ua \\<inter> Va);\n        (xs @ [y], U) \\<in> failures P; ([], V) \\<in> failures Q;\n        W = insert None U \\<inter> V\\<rbrakk>\n       \\<Longrightarrow> (xs @ [y], {}) \\<in> failures P \\<and>\n                         None \\<notin> set xs \\<and> None \\<noteq> y", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>U V.\n       \\<lbrakk>xs @ [y] \\<in> sentences P;\n        \\<exists>Ua.\n           (xs @ [y], Ua) \\<in> failures P \\<and>\n           (\\<exists>Va.\n               ([], Va) \\<in> failures Q \\<and>\n               insert None U \\<inter> V = insert None Ua \\<inter> Va);\n        (xs @ [y], U) \\<in> failures P; ([], V) \\<in> failures Q;\n        W = insert None U \\<inter> V\\<rbrakk>\n       \\<Longrightarrow> (xs @ [y], {}) \\<in> failures P \\<and>\n                         None \\<notin> set xs \\<and> None \\<noteq> y", "fix U"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>U V.\n       \\<lbrakk>xs @ [y] \\<in> sentences P;\n        \\<exists>Ua.\n           (xs @ [y], Ua) \\<in> failures P \\<and>\n           (\\<exists>Va.\n               ([], Va) \\<in> failures Q \\<and>\n               insert None U \\<inter> V = insert None Ua \\<inter> Va);\n        (xs @ [y], U) \\<in> failures P; ([], V) \\<in> failures Q;\n        W = insert None U \\<inter> V\\<rbrakk>\n       \\<Longrightarrow> (xs @ [y], {}) \\<in> failures P \\<and>\n                         None \\<notin> set xs \\<and> None \\<noteq> y", "case True"], ["proof (state)\nthis:\n  xs @ [y] \\<in> sentences P\n\ngoal (1 subgoal):\n 1. \\<And>U V.\n       \\<lbrakk>xs @ [y] \\<in> sentences P;\n        \\<exists>Ua.\n           (xs @ [y], Ua) \\<in> failures P \\<and>\n           (\\<exists>Va.\n               ([], Va) \\<in> failures Q \\<and>\n               insert None U \\<inter> V = insert None Ua \\<inter> Va);\n        (xs @ [y], U) \\<in> failures P; ([], V) \\<in> failures Q;\n        W = insert None U \\<inter> V\\<rbrakk>\n       \\<Longrightarrow> (xs @ [y], {}) \\<in> failures P \\<and>\n                         None \\<notin> set xs \\<and> None \\<noteq> y", "assume \"(xs @ [y], U) \\<in> failures P\""], ["proof (state)\nthis:\n  (xs @ [y], U) \\<in> failures P\n\ngoal (1 subgoal):\n 1. \\<And>U V.\n       \\<lbrakk>xs @ [y] \\<in> sentences P;\n        \\<exists>Ua.\n           (xs @ [y], Ua) \\<in> failures P \\<and>\n           (\\<exists>Va.\n               ([], Va) \\<in> failures Q \\<and>\n               insert None U \\<inter> V = insert None Ua \\<inter> Va);\n        (xs @ [y], U) \\<in> failures P; ([], V) \\<in> failures Q;\n        W = insert None U \\<inter> V\\<rbrakk>\n       \\<Longrightarrow> (xs @ [y], {}) \\<in> failures P \\<and>\n                         None \\<notin> set xs \\<and> None \\<noteq> y", "moreover"], ["proof (state)\nthis:\n  (xs @ [y], U) \\<in> failures P\n\ngoal (1 subgoal):\n 1. \\<And>U V.\n       \\<lbrakk>xs @ [y] \\<in> sentences P;\n        \\<exists>Ua.\n           (xs @ [y], Ua) \\<in> failures P \\<and>\n           (\\<exists>Va.\n               ([], Va) \\<in> failures Q \\<and>\n               insert None U \\<inter> V = insert None Ua \\<inter> Va);\n        (xs @ [y], U) \\<in> failures P; ([], V) \\<in> failures Q;\n        W = insert None U \\<inter> V\\<rbrakk>\n       \\<Longrightarrow> (xs @ [y], {}) \\<in> failures P \\<and>\n                         None \\<notin> set xs \\<and> None \\<noteq> y", "have \"{} \\<subseteq> U\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {} \\<subseteq> U", ".."], ["proof (state)\nthis:\n  {} \\<subseteq> U\n\ngoal (1 subgoal):\n 1. \\<And>U V.\n       \\<lbrakk>xs @ [y] \\<in> sentences P;\n        \\<exists>Ua.\n           (xs @ [y], Ua) \\<in> failures P \\<and>\n           (\\<exists>Va.\n               ([], Va) \\<in> failures Q \\<and>\n               insert None U \\<inter> V = insert None Ua \\<inter> Va);\n        (xs @ [y], U) \\<in> failures P; ([], V) \\<in> failures Q;\n        W = insert None U \\<inter> V\\<rbrakk>\n       \\<Longrightarrow> (xs @ [y], {}) \\<in> failures P \\<and>\n                         None \\<notin> set xs \\<and> None \\<noteq> y", "ultimately"], ["proof (chain)\npicking this:\n  (xs @ [y], U) \\<in> failures P\n  {} \\<subseteq> U", "have \"(xs @ [y], {}) \\<in> failures P\""], ["proof (prove)\nusing this:\n  (xs @ [y], U) \\<in> failures P\n  {} \\<subseteq> U\n\ngoal (1 subgoal):\n 1. (xs @ [y], {}) \\<in> failures P", "by (rule process_rule_3)"], ["proof (state)\nthis:\n  (xs @ [y], {}) \\<in> failures P\n\ngoal (1 subgoal):\n 1. \\<And>U V.\n       \\<lbrakk>xs @ [y] \\<in> sentences P;\n        \\<exists>Ua.\n           (xs @ [y], Ua) \\<in> failures P \\<and>\n           (\\<exists>Va.\n               ([], Va) \\<in> failures Q \\<and>\n               insert None U \\<inter> V = insert None Ua \\<inter> Va);\n        (xs @ [y], U) \\<in> failures P; ([], V) \\<in> failures Q;\n        W = insert None U \\<inter> V\\<rbrakk>\n       \\<Longrightarrow> (xs @ [y], {}) \\<in> failures P \\<and>\n                         None \\<notin> set xs \\<and> None \\<noteq> y", "moreover"], ["proof (state)\nthis:\n  (xs @ [y], {}) \\<in> failures P\n\ngoal (1 subgoal):\n 1. \\<And>U V.\n       \\<lbrakk>xs @ [y] \\<in> sentences P;\n        \\<exists>Ua.\n           (xs @ [y], Ua) \\<in> failures P \\<and>\n           (\\<exists>Va.\n               ([], Va) \\<in> failures Q \\<and>\n               insert None U \\<inter> V = insert None Ua \\<inter> Va);\n        (xs @ [y], U) \\<in> failures P; ([], V) \\<in> failures Q;\n        W = insert None U \\<inter> V\\<rbrakk>\n       \\<Longrightarrow> (xs @ [y], {}) \\<in> failures P \\<and>\n                         None \\<notin> set xs \\<and> None \\<noteq> y", "have \"weakly_sequential P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. weakly_sequential P", "using C"], ["proof (prove)\nusing this:\n  sequential P\n\ngoal (1 subgoal):\n 1. weakly_sequential P", "by (rule seq_implies_weakly_seq)"], ["proof (state)\nthis:\n  weakly_sequential P\n\ngoal (1 subgoal):\n 1. \\<And>U V.\n       \\<lbrakk>xs @ [y] \\<in> sentences P;\n        \\<exists>Ua.\n           (xs @ [y], Ua) \\<in> failures P \\<and>\n           (\\<exists>Va.\n               ([], Va) \\<in> failures Q \\<and>\n               insert None U \\<inter> V = insert None Ua \\<inter> Va);\n        (xs @ [y], U) \\<in> failures P; ([], V) \\<in> failures Q;\n        W = insert None U \\<inter> V\\<rbrakk>\n       \\<Longrightarrow> (xs @ [y], {}) \\<in> failures P \\<and>\n                         None \\<notin> set xs \\<and> None \\<noteq> y", "hence \"None \\<notin> set (xs @ [y])\""], ["proof (prove)\nusing this:\n  weakly_sequential P\n\ngoal (1 subgoal):\n 1. None \\<notin> set (xs @ [y])", "using True"], ["proof (prove)\nusing this:\n  weakly_sequential P\n  xs @ [y] \\<in> sentences P\n\ngoal (1 subgoal):\n 1. None \\<notin> set (xs @ [y])", "by (rule weakly_seq_sentences_none)"], ["proof (state)\nthis:\n  None \\<notin> set (xs @ [y])\n\ngoal (1 subgoal):\n 1. \\<And>U V.\n       \\<lbrakk>xs @ [y] \\<in> sentences P;\n        \\<exists>Ua.\n           (xs @ [y], Ua) \\<in> failures P \\<and>\n           (\\<exists>Va.\n               ([], Va) \\<in> failures Q \\<and>\n               insert None U \\<inter> V = insert None Ua \\<inter> Va);\n        (xs @ [y], U) \\<in> failures P; ([], V) \\<in> failures Q;\n        W = insert None U \\<inter> V\\<rbrakk>\n       \\<Longrightarrow> (xs @ [y], {}) \\<in> failures P \\<and>\n                         None \\<notin> set xs \\<and> None \\<noteq> y", "hence \"None \\<notin> set xs \\<and> None \\<noteq> y\""], ["proof (prove)\nusing this:\n  None \\<notin> set (xs @ [y])\n\ngoal (1 subgoal):\n 1. None \\<notin> set xs \\<and> None \\<noteq> y", "by simp"], ["proof (state)\nthis:\n  None \\<notin> set xs \\<and> None \\<noteq> y\n\ngoal (1 subgoal):\n 1. \\<And>U V.\n       \\<lbrakk>xs @ [y] \\<in> sentences P;\n        \\<exists>Ua.\n           (xs @ [y], Ua) \\<in> failures P \\<and>\n           (\\<exists>Va.\n               ([], Va) \\<in> failures Q \\<and>\n               insert None U \\<inter> V = insert None Ua \\<inter> Va);\n        (xs @ [y], U) \\<in> failures P; ([], V) \\<in> failures Q;\n        W = insert None U \\<inter> V\\<rbrakk>\n       \\<Longrightarrow> (xs @ [y], {}) \\<in> failures P \\<and>\n                         None \\<notin> set xs \\<and> None \\<noteq> y", "ultimately"], ["proof (chain)\npicking this:\n  (xs @ [y], {}) \\<in> failures P\n  None \\<notin> set xs \\<and> None \\<noteq> y", "show ?thesis"], ["proof (prove)\nusing this:\n  (xs @ [y], {}) \\<in> failures P\n  None \\<notin> set xs \\<and> None \\<noteq> y\n\ngoal (1 subgoal):\n 1. (xs @ [y], {}) \\<in> failures P \\<and>\n    None \\<notin> set xs \\<and> None \\<noteq> y", ".."], ["proof (state)\nthis:\n  (xs @ [y], {}) \\<in> failures P \\<and>\n  None \\<notin> set xs \\<and> None \\<noteq> y\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (xs @ [y], {}) \\<in> failures P \\<and>\n  None \\<notin> set xs \\<and> None \\<noteq> y\n\ngoal (2 subgoals):\n 1. length xs < length ws \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs Y)\n    \\<in> seq_comp_failures P Q\n 2. \\<not> length xs < length ws \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs Y)\n    \\<in> seq_comp_failures P Q", "have \"drop (length xs) (xs @ zs) = drop (length xs) (ws @ ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. drop (length xs) (xs @ zs) = drop (length xs) (ws @ ys)", "using I"], ["proof (prove)\nusing this:\n  ws @ ys = xs @ zs\n\ngoal (1 subgoal):\n 1. drop (length xs) (xs @ zs) = drop (length xs) (ws @ ys)", "by simp"], ["proof (state)\nthis:\n  drop (length xs) (xs @ zs) = drop (length xs) (ws @ ys)\n\ngoal (2 subgoals):\n 1. length xs < length ws \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs Y)\n    \\<in> seq_comp_failures P Q\n 2. \\<not> length xs < length ws \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs Y)\n    \\<in> seq_comp_failures P Q", "hence O: \"zs = drop (length xs) ws @ ys\"\n      (is \"_ = ?ws' @ _\")"], ["proof (prove)\nusing this:\n  drop (length xs) (xs @ zs) = drop (length xs) (ws @ ys)\n\ngoal (1 subgoal):\n 1. zs = drop (length xs) ws @ ys", "using True"], ["proof (prove)\nusing this:\n  drop (length xs) (xs @ zs) = drop (length xs) (ws @ ys)\n  length xs < length ws\n\ngoal (1 subgoal):\n 1. zs = drop (length xs) ws @ ys", "by simp"], ["proof (state)\nthis:\n  zs = drop (length xs) ws @ ys\n\ngoal (2 subgoals):\n 1. length xs < length ws \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs Y)\n    \\<in> seq_comp_failures P Q\n 2. \\<not> length xs < length ws \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs Y)\n    \\<in> seq_comp_failures P Q", "let ?U = \"insert (D y) (sinks I D (D y) ?ws')\""], ["proof (state)\ngoal (2 subgoals):\n 1. length xs < length ws \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs Y)\n    \\<in> seq_comp_failures P Q\n 2. \\<not> length xs < length ws \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs Y)\n    \\<in> seq_comp_failures P Q", "have \"ipurge_tr I D (D y) zs =\n      ipurge_tr I D (D y) ?ws' @ ipurge_tr_aux I D ?U ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ipurge_tr I D (D y) zs =\n    ipurge_tr I D (D y) (drop (length xs) ws) @\n    ipurge_tr_aux I D (insert (D y) (sinks I D (D y) (drop (length xs) ws)))\n     ys", "using O"], ["proof (prove)\nusing this:\n  zs = drop (length xs) ws @ ys\n\ngoal (1 subgoal):\n 1. ipurge_tr I D (D y) zs =\n    ipurge_tr I D (D y) (drop (length xs) ws) @\n    ipurge_tr_aux I D (insert (D y) (sinks I D (D y) (drop (length xs) ws)))\n     ys", "by (simp add: ipurge_tr_append)"], ["proof (state)\nthis:\n  ipurge_tr I D (D y) zs =\n  ipurge_tr I D (D y) (drop (length xs) ws) @\n  ipurge_tr_aux I D (insert (D y) (sinks I D (D y) (drop (length xs) ws)))\n   ys\n\ngoal (2 subgoals):\n 1. length xs < length ws \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs Y)\n    \\<in> seq_comp_failures P Q\n 2. \\<not> length xs < length ws \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs Y)\n    \\<in> seq_comp_failures P Q", "moreover"], ["proof (state)\nthis:\n  ipurge_tr I D (D y) zs =\n  ipurge_tr I D (D y) (drop (length xs) ws) @\n  ipurge_tr_aux I D (insert (D y) (sinks I D (D y) (drop (length xs) ws)))\n   ys\n\ngoal (2 subgoals):\n 1. length xs < length ws \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs Y)\n    \\<in> seq_comp_failures P Q\n 2. \\<not> length xs < length ws \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs Y)\n    \\<in> seq_comp_failures P Q", "have \"ipurge_ref I D (D y) zs Y = ipurge_ref_aux I D ?U ys Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ipurge_ref I D (D y) zs Y =\n    ipurge_ref_aux I D\n     (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys Y", "using O"], ["proof (prove)\nusing this:\n  zs = drop (length xs) ws @ ys\n\ngoal (1 subgoal):\n 1. ipurge_ref I D (D y) zs Y =\n    ipurge_ref_aux I D\n     (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys Y", "by (simp add: ipurge_ref_append)"], ["proof (state)\nthis:\n  ipurge_ref I D (D y) zs Y =\n  ipurge_ref_aux I D (insert (D y) (sinks I D (D y) (drop (length xs) ws)))\n   ys Y\n\ngoal (2 subgoals):\n 1. length xs < length ws \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs Y)\n    \\<in> seq_comp_failures P Q\n 2. \\<not> length xs < length ws \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs Y)\n    \\<in> seq_comp_failures P Q", "ultimately"], ["proof (chain)\npicking this:\n  ipurge_tr I D (D y) zs =\n  ipurge_tr I D (D y) (drop (length xs) ws) @\n  ipurge_tr_aux I D (insert (D y) (sinks I D (D y) (drop (length xs) ws)))\n   ys\n  ipurge_ref I D (D y) zs Y =\n  ipurge_ref_aux I D (insert (D y) (sinks I D (D y) (drop (length xs) ws)))\n   ys Y", "show ?thesis"], ["proof (prove)\nusing this:\n  ipurge_tr I D (D y) zs =\n  ipurge_tr I D (D y) (drop (length xs) ws) @\n  ipurge_tr_aux I D (insert (D y) (sinks I D (D y) (drop (length xs) ws)))\n   ys\n  ipurge_ref I D (D y) zs Y =\n  ipurge_ref_aux I D (insert (D y) (sinks I D (D y) (drop (length xs) ws)))\n   ys Y\n\ngoal (1 subgoal):\n 1. (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs Y)\n    \\<in> seq_comp_failures P Q", "proof (cases \"xs @ y # ipurge_tr I D (D y) ?ws' \\<in> sentences P\", simp_all)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>xs @ y # ipurge_tr I D (D y) (drop (length xs) ws)\n             \\<in> sentences P;\n     ipurge_tr I D (D y) zs =\n     ipurge_tr I D (D y) (drop (length xs) ws) @\n     ipurge_tr_aux I D\n      (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys;\n     ipurge_ref I D (D y) zs Y =\n     ipurge_ref_aux I D\n      (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys Y\\<rbrakk>\n    \\<Longrightarrow> (xs @\n                       y #\n                       ipurge_tr I D (D y) (drop (length xs) ws) @\n                       ipurge_tr_aux I D\n                        (insert (D y)\n                          (sinks I D (D y) (drop (length xs) ws)))\n                        ys,\n                       ipurge_ref_aux I D\n                        (insert (D y)\n                          (sinks I D (D y) (drop (length xs) ws)))\n                        ys Y)\n                      \\<in> seq_comp_failures P Q\n 2. \\<lbrakk>xs @ y # ipurge_tr I D (D y) (drop (length xs) ws)\n             \\<notin> sentences P;\n     ipurge_tr I D (D y) zs =\n     ipurge_tr I D (D y) (drop (length xs) ws) @\n     ipurge_tr_aux I D\n      (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys;\n     ipurge_ref I D (D y) zs Y =\n     ipurge_ref_aux I D\n      (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys Y\\<rbrakk>\n    \\<Longrightarrow> (xs @\n                       y #\n                       ipurge_tr I D (D y) (drop (length xs) ws) @\n                       ipurge_tr_aux I D\n                        (insert (D y)\n                          (sinks I D (D y) (drop (length xs) ws)))\n                        ys,\n                       ipurge_ref_aux I D\n                        (insert (D y)\n                          (sinks I D (D y) (drop (length xs) ws)))\n                        ys Y)\n                      \\<in> seq_comp_failures P Q", "assume P: \"xs @ y # ipurge_tr I D (D y) ?ws' \\<in> sentences P\""], ["proof (state)\nthis:\n  xs @ y # ipurge_tr I D (D y) (drop (length xs) ws) \\<in> sentences P\n\ngoal (2 subgoals):\n 1. \\<lbrakk>xs @ y # ipurge_tr I D (D y) (drop (length xs) ws)\n             \\<in> sentences P;\n     ipurge_tr I D (D y) zs =\n     ipurge_tr I D (D y) (drop (length xs) ws) @\n     ipurge_tr_aux I D\n      (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys;\n     ipurge_ref I D (D y) zs Y =\n     ipurge_ref_aux I D\n      (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys Y\\<rbrakk>\n    \\<Longrightarrow> (xs @\n                       y #\n                       ipurge_tr I D (D y) (drop (length xs) ws) @\n                       ipurge_tr_aux I D\n                        (insert (D y)\n                          (sinks I D (D y) (drop (length xs) ws)))\n                        ys,\n                       ipurge_ref_aux I D\n                        (insert (D y)\n                          (sinks I D (D y) (drop (length xs) ws)))\n                        ys Y)\n                      \\<in> seq_comp_failures P Q\n 2. \\<lbrakk>xs @ y # ipurge_tr I D (D y) (drop (length xs) ws)\n             \\<notin> sentences P;\n     ipurge_tr I D (D y) zs =\n     ipurge_tr I D (D y) (drop (length xs) ws) @\n     ipurge_tr_aux I D\n      (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys;\n     ipurge_ref I D (D y) zs Y =\n     ipurge_ref_aux I D\n      (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys Y\\<rbrakk>\n    \\<Longrightarrow> (xs @\n                       y #\n                       ipurge_tr I D (D y) (drop (length xs) ws) @\n                       ipurge_tr_aux I D\n                        (insert (D y)\n                          (sinks I D (D y) (drop (length xs) ws)))\n                        ys,\n                       ipurge_ref_aux I D\n                        (insert (D y)\n                          (sinks I D (D y) (drop (length xs) ws)))\n                        ys Y)\n                      \\<in> seq_comp_failures P Q", "have Q: \"(ipurge_tr_aux I D ?U ys, ipurge_ref_aux I D ?U ys Y) \\<in> failures Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (ipurge_tr_aux I D\n      (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys,\n     ipurge_ref_aux I D\n      (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys Y)\n    \\<in> failures Q", "using E and G"], ["proof (prove)\nusing this:\n  secure Q I D\n  (ys, Y) \\<in> failures Q\n\ngoal (1 subgoal):\n 1. (ipurge_tr_aux I D\n      (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys,\n     ipurge_ref_aux I D\n      (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys Y)\n    \\<in> failures Q", "by (rule ipurge_tr_ref_aux_failures)"], ["proof (state)\nthis:\n  (ipurge_tr_aux I D (insert (D y) (sinks I D (D y) (drop (length xs) ws)))\n    ys,\n   ipurge_ref_aux I D (insert (D y) (sinks I D (D y) (drop (length xs) ws)))\n    ys Y)\n  \\<in> failures Q\n\ngoal (2 subgoals):\n 1. \\<lbrakk>xs @ y # ipurge_tr I D (D y) (drop (length xs) ws)\n             \\<in> sentences P;\n     ipurge_tr I D (D y) zs =\n     ipurge_tr I D (D y) (drop (length xs) ws) @\n     ipurge_tr_aux I D\n      (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys;\n     ipurge_ref I D (D y) zs Y =\n     ipurge_ref_aux I D\n      (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys Y\\<rbrakk>\n    \\<Longrightarrow> (xs @\n                       y #\n                       ipurge_tr I D (D y) (drop (length xs) ws) @\n                       ipurge_tr_aux I D\n                        (insert (D y)\n                          (sinks I D (D y) (drop (length xs) ws)))\n                        ys,\n                       ipurge_ref_aux I D\n                        (insert (D y)\n                          (sinks I D (D y) (drop (length xs) ws)))\n                        ys Y)\n                      \\<in> seq_comp_failures P Q\n 2. \\<lbrakk>xs @ y # ipurge_tr I D (D y) (drop (length xs) ws)\n             \\<notin> sentences P;\n     ipurge_tr I D (D y) zs =\n     ipurge_tr I D (D y) (drop (length xs) ws) @\n     ipurge_tr_aux I D\n      (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys;\n     ipurge_ref I D (D y) zs Y =\n     ipurge_ref_aux I D\n      (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys Y\\<rbrakk>\n    \\<Longrightarrow> (xs @\n                       y #\n                       ipurge_tr I D (D y) (drop (length xs) ws) @\n                       ipurge_tr_aux I D\n                        (insert (D y)\n                          (sinks I D (D y) (drop (length xs) ws)))\n                        ys,\n                       ipurge_ref_aux I D\n                        (insert (D y)\n                          (sinks I D (D y) (drop (length xs) ws)))\n                        ys Y)\n                      \\<in> seq_comp_failures P Q", "show \"(xs @ y # ipurge_tr I D (D y) ?ws' @ ipurge_tr_aux I D ?U ys,\n        ipurge_ref_aux I D ?U ys Y) \\<in> seq_comp_failures P Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (xs @\n     y #\n     ipurge_tr I D (D y) (drop (length xs) ws) @\n     ipurge_tr_aux I D\n      (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys,\n     ipurge_ref_aux I D\n      (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys Y)\n    \\<in> seq_comp_failures P Q", "proof (cases \"ipurge_tr_aux I D ?U ys\")"], ["proof (state)\ngoal (2 subgoals):\n 1. ipurge_tr_aux I D (insert (D y) (sinks I D (D y) (drop (length xs) ws)))\n     ys =\n    [] \\<Longrightarrow>\n    (xs @\n     y #\n     ipurge_tr I D (D y) (drop (length xs) ws) @\n     ipurge_tr_aux I D\n      (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys,\n     ipurge_ref_aux I D\n      (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys Y)\n    \\<in> seq_comp_failures P Q\n 2. \\<And>a list.\n       ipurge_tr_aux I D\n        (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys =\n       a # list \\<Longrightarrow>\n       (xs @\n        y #\n        ipurge_tr I D (D y) (drop (length xs) ws) @\n        ipurge_tr_aux I D\n         (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys,\n        ipurge_ref_aux I D\n         (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys Y)\n       \\<in> seq_comp_failures P Q", "case Nil"], ["proof (state)\nthis:\n  ipurge_tr_aux I D (insert (D y) (sinks I D (D y) (drop (length xs) ws)))\n   ys =\n  []\n\ngoal (2 subgoals):\n 1. ipurge_tr_aux I D (insert (D y) (sinks I D (D y) (drop (length xs) ws)))\n     ys =\n    [] \\<Longrightarrow>\n    (xs @\n     y #\n     ipurge_tr I D (D y) (drop (length xs) ws) @\n     ipurge_tr_aux I D\n      (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys,\n     ipurge_ref_aux I D\n      (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys Y)\n    \\<in> seq_comp_failures P Q\n 2. \\<And>a list.\n       ipurge_tr_aux I D\n        (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys =\n       a # list \\<Longrightarrow>\n       (xs @\n        y #\n        ipurge_tr I D (D y) (drop (length xs) ws) @\n        ipurge_tr_aux I D\n         (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys,\n        ipurge_ref_aux I D\n         (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys Y)\n       \\<in> seq_comp_failures P Q", "have \"(xs @ y # ipurge_tr I D (D y) ?ws', {x. x \\<noteq> None}) \\<in> failures P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (xs @ y # ipurge_tr I D (D y) (drop (length xs) ws),\n     {x. x \\<noteq> None})\n    \\<in> failures P", "using B and C and P"], ["proof (prove)\nusing this:\n  ref_union_closed P\n  sequential P\n  xs @ y # ipurge_tr I D (D y) (drop (length xs) ws) \\<in> sentences P\n\ngoal (1 subgoal):\n 1. (xs @ y # ipurge_tr I D (D y) (drop (length xs) ws),\n     {x. x \\<noteq> None})\n    \\<in> failures P", "by (rule seq_sentences_ref)"], ["proof (state)\nthis:\n  (xs @ y # ipurge_tr I D (D y) (drop (length xs) ws), {x. x \\<noteq> None})\n  \\<in> failures P\n\ngoal (2 subgoals):\n 1. ipurge_tr_aux I D (insert (D y) (sinks I D (D y) (drop (length xs) ws)))\n     ys =\n    [] \\<Longrightarrow>\n    (xs @\n     y #\n     ipurge_tr I D (D y) (drop (length xs) ws) @\n     ipurge_tr_aux I D\n      (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys,\n     ipurge_ref_aux I D\n      (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys Y)\n    \\<in> seq_comp_failures P Q\n 2. \\<And>a list.\n       ipurge_tr_aux I D\n        (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys =\n       a # list \\<Longrightarrow>\n       (xs @\n        y #\n        ipurge_tr I D (D y) (drop (length xs) ws) @\n        ipurge_tr_aux I D\n         (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys,\n        ipurge_ref_aux I D\n         (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys Y)\n       \\<in> seq_comp_failures P Q", "moreover"], ["proof (state)\nthis:\n  (xs @ y # ipurge_tr I D (D y) (drop (length xs) ws), {x. x \\<noteq> None})\n  \\<in> failures P\n\ngoal (2 subgoals):\n 1. ipurge_tr_aux I D (insert (D y) (sinks I D (D y) (drop (length xs) ws)))\n     ys =\n    [] \\<Longrightarrow>\n    (xs @\n     y #\n     ipurge_tr I D (D y) (drop (length xs) ws) @\n     ipurge_tr_aux I D\n      (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys,\n     ipurge_ref_aux I D\n      (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys Y)\n    \\<in> seq_comp_failures P Q\n 2. \\<And>a list.\n       ipurge_tr_aux I D\n        (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys =\n       a # list \\<Longrightarrow>\n       (xs @\n        y #\n        ipurge_tr I D (D y) (drop (length xs) ws) @\n        ipurge_tr_aux I D\n         (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys,\n        ipurge_ref_aux I D\n         (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys Y)\n       \\<in> seq_comp_failures P Q", "have \"([], ipurge_ref_aux I D ?U ys Y) \\<in> failures Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ([],\n     ipurge_ref_aux I D\n      (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys Y)\n    \\<in> failures Q", "using Q and Nil"], ["proof (prove)\nusing this:\n  (ipurge_tr_aux I D (insert (D y) (sinks I D (D y) (drop (length xs) ws)))\n    ys,\n   ipurge_ref_aux I D (insert (D y) (sinks I D (D y) (drop (length xs) ws)))\n    ys Y)\n  \\<in> failures Q\n  ipurge_tr_aux I D (insert (D y) (sinks I D (D y) (drop (length xs) ws)))\n   ys =\n  []\n\ngoal (1 subgoal):\n 1. ([],\n     ipurge_ref_aux I D\n      (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys Y)\n    \\<in> failures Q", "by simp"], ["proof (state)\nthis:\n  ([],\n   ipurge_ref_aux I D (insert (D y) (sinks I D (D y) (drop (length xs) ws)))\n    ys Y)\n  \\<in> failures Q\n\ngoal (2 subgoals):\n 1. ipurge_tr_aux I D (insert (D y) (sinks I D (D y) (drop (length xs) ws)))\n     ys =\n    [] \\<Longrightarrow>\n    (xs @\n     y #\n     ipurge_tr I D (D y) (drop (length xs) ws) @\n     ipurge_tr_aux I D\n      (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys,\n     ipurge_ref_aux I D\n      (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys Y)\n    \\<in> seq_comp_failures P Q\n 2. \\<And>a list.\n       ipurge_tr_aux I D\n        (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys =\n       a # list \\<Longrightarrow>\n       (xs @\n        y #\n        ipurge_tr I D (D y) (drop (length xs) ws) @\n        ipurge_tr_aux I D\n         (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys,\n        ipurge_ref_aux I D\n         (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys Y)\n       \\<in> seq_comp_failures P Q", "ultimately"], ["proof (chain)\npicking this:\n  (xs @ y # ipurge_tr I D (D y) (drop (length xs) ws), {x. x \\<noteq> None})\n  \\<in> failures P\n  ([],\n   ipurge_ref_aux I D (insert (D y) (sinks I D (D y) (drop (length xs) ws)))\n    ys Y)\n  \\<in> failures Q", "have \"(xs @ y # ipurge_tr I D (D y) ?ws',\n          insert None {x. x \\<noteq> None} \\<inter> ipurge_ref_aux I D ?U ys Y)\n          \\<in> seq_comp_failures P Q\""], ["proof (prove)\nusing this:\n  (xs @ y # ipurge_tr I D (D y) (drop (length xs) ws), {x. x \\<noteq> None})\n  \\<in> failures P\n  ([],\n   ipurge_ref_aux I D (insert (D y) (sinks I D (D y) (drop (length xs) ws)))\n    ys Y)\n  \\<in> failures Q\n\ngoal (1 subgoal):\n 1. (xs @ y # ipurge_tr I D (D y) (drop (length xs) ws),\n     insert None {x. x \\<noteq> None} \\<inter>\n     ipurge_ref_aux I D\n      (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys Y)\n    \\<in> seq_comp_failures P Q", "by (rule SCF_R2 [OF P])"], ["proof (state)\nthis:\n  (xs @ y # ipurge_tr I D (D y) (drop (length xs) ws),\n   insert None {x. x \\<noteq> None} \\<inter>\n   ipurge_ref_aux I D (insert (D y) (sinks I D (D y) (drop (length xs) ws)))\n    ys Y)\n  \\<in> seq_comp_failures P Q\n\ngoal (2 subgoals):\n 1. ipurge_tr_aux I D (insert (D y) (sinks I D (D y) (drop (length xs) ws)))\n     ys =\n    [] \\<Longrightarrow>\n    (xs @\n     y #\n     ipurge_tr I D (D y) (drop (length xs) ws) @\n     ipurge_tr_aux I D\n      (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys,\n     ipurge_ref_aux I D\n      (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys Y)\n    \\<in> seq_comp_failures P Q\n 2. \\<And>a list.\n       ipurge_tr_aux I D\n        (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys =\n       a # list \\<Longrightarrow>\n       (xs @\n        y #\n        ipurge_tr I D (D y) (drop (length xs) ws) @\n        ipurge_tr_aux I D\n         (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys,\n        ipurge_ref_aux I D\n         (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys Y)\n       \\<in> seq_comp_failures P Q", "moreover"], ["proof (state)\nthis:\n  (xs @ y # ipurge_tr I D (D y) (drop (length xs) ws),\n   insert None {x. x \\<noteq> None} \\<inter>\n   ipurge_ref_aux I D (insert (D y) (sinks I D (D y) (drop (length xs) ws)))\n    ys Y)\n  \\<in> seq_comp_failures P Q\n\ngoal (2 subgoals):\n 1. ipurge_tr_aux I D (insert (D y) (sinks I D (D y) (drop (length xs) ws)))\n     ys =\n    [] \\<Longrightarrow>\n    (xs @\n     y #\n     ipurge_tr I D (D y) (drop (length xs) ws) @\n     ipurge_tr_aux I D\n      (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys,\n     ipurge_ref_aux I D\n      (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys Y)\n    \\<in> seq_comp_failures P Q\n 2. \\<And>a list.\n       ipurge_tr_aux I D\n        (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys =\n       a # list \\<Longrightarrow>\n       (xs @\n        y #\n        ipurge_tr I D (D y) (drop (length xs) ws) @\n        ipurge_tr_aux I D\n         (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys,\n        ipurge_ref_aux I D\n         (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys Y)\n       \\<in> seq_comp_failures P Q", "have \"insert None {x. x \\<noteq> None} \\<inter>\n          ipurge_ref_aux I D ?U ys Y = ipurge_ref_aux I D ?U ys Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. insert None {x. x \\<noteq> None} \\<inter>\n    ipurge_ref_aux I D\n     (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys Y =\n    ipurge_ref_aux I D\n     (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys Y", "by blast"], ["proof (state)\nthis:\n  insert None {x. x \\<noteq> None} \\<inter>\n  ipurge_ref_aux I D (insert (D y) (sinks I D (D y) (drop (length xs) ws)))\n   ys Y =\n  ipurge_ref_aux I D (insert (D y) (sinks I D (D y) (drop (length xs) ws)))\n   ys Y\n\ngoal (2 subgoals):\n 1. ipurge_tr_aux I D (insert (D y) (sinks I D (D y) (drop (length xs) ws)))\n     ys =\n    [] \\<Longrightarrow>\n    (xs @\n     y #\n     ipurge_tr I D (D y) (drop (length xs) ws) @\n     ipurge_tr_aux I D\n      (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys,\n     ipurge_ref_aux I D\n      (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys Y)\n    \\<in> seq_comp_failures P Q\n 2. \\<And>a list.\n       ipurge_tr_aux I D\n        (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys =\n       a # list \\<Longrightarrow>\n       (xs @\n        y #\n        ipurge_tr I D (D y) (drop (length xs) ws) @\n        ipurge_tr_aux I D\n         (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys,\n        ipurge_ref_aux I D\n         (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys Y)\n       \\<in> seq_comp_failures P Q", "ultimately"], ["proof (chain)\npicking this:\n  (xs @ y # ipurge_tr I D (D y) (drop (length xs) ws),\n   insert None {x. x \\<noteq> None} \\<inter>\n   ipurge_ref_aux I D (insert (D y) (sinks I D (D y) (drop (length xs) ws)))\n    ys Y)\n  \\<in> seq_comp_failures P Q\n  insert None {x. x \\<noteq> None} \\<inter>\n  ipurge_ref_aux I D (insert (D y) (sinks I D (D y) (drop (length xs) ws)))\n   ys Y =\n  ipurge_ref_aux I D (insert (D y) (sinks I D (D y) (drop (length xs) ws)))\n   ys Y", "show ?thesis"], ["proof (prove)\nusing this:\n  (xs @ y # ipurge_tr I D (D y) (drop (length xs) ws),\n   insert None {x. x \\<noteq> None} \\<inter>\n   ipurge_ref_aux I D (insert (D y) (sinks I D (D y) (drop (length xs) ws)))\n    ys Y)\n  \\<in> seq_comp_failures P Q\n  insert None {x. x \\<noteq> None} \\<inter>\n  ipurge_ref_aux I D (insert (D y) (sinks I D (D y) (drop (length xs) ws)))\n   ys Y =\n  ipurge_ref_aux I D (insert (D y) (sinks I D (D y) (drop (length xs) ws)))\n   ys Y\n\ngoal (1 subgoal):\n 1. (xs @\n     y #\n     ipurge_tr I D (D y) (drop (length xs) ws) @\n     ipurge_tr_aux I D\n      (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys,\n     ipurge_ref_aux I D\n      (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys Y)\n    \\<in> seq_comp_failures P Q", "using Nil"], ["proof (prove)\nusing this:\n  (xs @ y # ipurge_tr I D (D y) (drop (length xs) ws),\n   insert None {x. x \\<noteq> None} \\<inter>\n   ipurge_ref_aux I D (insert (D y) (sinks I D (D y) (drop (length xs) ws)))\n    ys Y)\n  \\<in> seq_comp_failures P Q\n  insert None {x. x \\<noteq> None} \\<inter>\n  ipurge_ref_aux I D (insert (D y) (sinks I D (D y) (drop (length xs) ws)))\n   ys Y =\n  ipurge_ref_aux I D (insert (D y) (sinks I D (D y) (drop (length xs) ws)))\n   ys Y\n  ipurge_tr_aux I D (insert (D y) (sinks I D (D y) (drop (length xs) ws)))\n   ys =\n  []\n\ngoal (1 subgoal):\n 1. (xs @\n     y #\n     ipurge_tr I D (D y) (drop (length xs) ws) @\n     ipurge_tr_aux I D\n      (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys,\n     ipurge_ref_aux I D\n      (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys Y)\n    \\<in> seq_comp_failures P Q", "by simp"], ["proof (state)\nthis:\n  (xs @\n   y #\n   ipurge_tr I D (D y) (drop (length xs) ws) @\n   ipurge_tr_aux I D (insert (D y) (sinks I D (D y) (drop (length xs) ws)))\n    ys,\n   ipurge_ref_aux I D (insert (D y) (sinks I D (D y) (drop (length xs) ws)))\n    ys Y)\n  \\<in> seq_comp_failures P Q\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       ipurge_tr_aux I D\n        (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys =\n       a # list \\<Longrightarrow>\n       (xs @\n        y #\n        ipurge_tr I D (D y) (drop (length xs) ws) @\n        ipurge_tr_aux I D\n         (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys,\n        ipurge_ref_aux I D\n         (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys Y)\n       \\<in> seq_comp_failures P Q", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a list.\n       ipurge_tr_aux I D\n        (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys =\n       a # list \\<Longrightarrow>\n       (xs @\n        y #\n        ipurge_tr I D (D y) (drop (length xs) ws) @\n        ipurge_tr_aux I D\n         (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys,\n        ipurge_ref_aux I D\n         (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys Y)\n       \\<in> seq_comp_failures P Q", "case Cons"], ["proof (state)\nthis:\n  ipurge_tr_aux I D (insert (D y) (sinks I D (D y) (drop (length xs) ws)))\n   ys =\n  a_ # list_\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       ipurge_tr_aux I D\n        (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys =\n       a # list \\<Longrightarrow>\n       (xs @\n        y #\n        ipurge_tr I D (D y) (drop (length xs) ws) @\n        ipurge_tr_aux I D\n         (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys,\n        ipurge_ref_aux I D\n         (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys Y)\n       \\<in> seq_comp_failures P Q", "hence \"ipurge_tr_aux I D ?U ys \\<noteq> []\""], ["proof (prove)\nusing this:\n  ipurge_tr_aux I D (insert (D y) (sinks I D (D y) (drop (length xs) ws)))\n   ys =\n  a_ # list_\n\ngoal (1 subgoal):\n 1. ipurge_tr_aux I D (insert (D y) (sinks I D (D y) (drop (length xs) ws)))\n     ys \\<noteq>\n    []", "by simp"], ["proof (state)\nthis:\n  ipurge_tr_aux I D (insert (D y) (sinks I D (D y) (drop (length xs) ws)))\n   ys \\<noteq>\n  []\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       ipurge_tr_aux I D\n        (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys =\n       a # list \\<Longrightarrow>\n       (xs @\n        y #\n        ipurge_tr I D (D y) (drop (length xs) ws) @\n        ipurge_tr_aux I D\n         (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys,\n        ipurge_ref_aux I D\n         (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys Y)\n       \\<in> seq_comp_failures P Q", "with P and Q"], ["proof (chain)\npicking this:\n  xs @ y # ipurge_tr I D (D y) (drop (length xs) ws) \\<in> sentences P\n  (ipurge_tr_aux I D (insert (D y) (sinks I D (D y) (drop (length xs) ws)))\n    ys,\n   ipurge_ref_aux I D (insert (D y) (sinks I D (D y) (drop (length xs) ws)))\n    ys Y)\n  \\<in> failures Q\n  ipurge_tr_aux I D (insert (D y) (sinks I D (D y) (drop (length xs) ws)))\n   ys \\<noteq>\n  []", "have\n         \"((xs @ y # ipurge_tr I D (D y) ?ws') @ ipurge_tr_aux I D ?U ys,\n            ipurge_ref_aux I D ?U ys Y) \\<in> seq_comp_failures P Q\""], ["proof (prove)\nusing this:\n  xs @ y # ipurge_tr I D (D y) (drop (length xs) ws) \\<in> sentences P\n  (ipurge_tr_aux I D (insert (D y) (sinks I D (D y) (drop (length xs) ws)))\n    ys,\n   ipurge_ref_aux I D (insert (D y) (sinks I D (D y) (drop (length xs) ws)))\n    ys Y)\n  \\<in> failures Q\n  ipurge_tr_aux I D (insert (D y) (sinks I D (D y) (drop (length xs) ws)))\n   ys \\<noteq>\n  []\n\ngoal (1 subgoal):\n 1. ((xs @ y # ipurge_tr I D (D y) (drop (length xs) ws)) @\n     ipurge_tr_aux I D\n      (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys,\n     ipurge_ref_aux I D\n      (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys Y)\n    \\<in> seq_comp_failures P Q", "by (rule SCF_R3)"], ["proof (state)\nthis:\n  ((xs @ y # ipurge_tr I D (D y) (drop (length xs) ws)) @\n   ipurge_tr_aux I D (insert (D y) (sinks I D (D y) (drop (length xs) ws)))\n    ys,\n   ipurge_ref_aux I D (insert (D y) (sinks I D (D y) (drop (length xs) ws)))\n    ys Y)\n  \\<in> seq_comp_failures P Q\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       ipurge_tr_aux I D\n        (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys =\n       a # list \\<Longrightarrow>\n       (xs @\n        y #\n        ipurge_tr I D (D y) (drop (length xs) ws) @\n        ipurge_tr_aux I D\n         (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys,\n        ipurge_ref_aux I D\n         (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys Y)\n       \\<in> seq_comp_failures P Q", "thus ?thesis"], ["proof (prove)\nusing this:\n  ((xs @ y # ipurge_tr I D (D y) (drop (length xs) ws)) @\n   ipurge_tr_aux I D (insert (D y) (sinks I D (D y) (drop (length xs) ws)))\n    ys,\n   ipurge_ref_aux I D (insert (D y) (sinks I D (D y) (drop (length xs) ws)))\n    ys Y)\n  \\<in> seq_comp_failures P Q\n\ngoal (1 subgoal):\n 1. (xs @\n     y #\n     ipurge_tr I D (D y) (drop (length xs) ws) @\n     ipurge_tr_aux I D\n      (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys,\n     ipurge_ref_aux I D\n      (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys Y)\n    \\<in> seq_comp_failures P Q", "by simp"], ["proof (state)\nthis:\n  (xs @\n   y #\n   ipurge_tr I D (D y) (drop (length xs) ws) @\n   ipurge_tr_aux I D (insert (D y) (sinks I D (D y) (drop (length xs) ws)))\n    ys,\n   ipurge_ref_aux I D (insert (D y) (sinks I D (D y) (drop (length xs) ws)))\n    ys Y)\n  \\<in> seq_comp_failures P Q\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (xs @\n   y #\n   ipurge_tr I D (D y) (drop (length xs) ws) @\n   ipurge_tr_aux I D (insert (D y) (sinks I D (D y) (drop (length xs) ws)))\n    ys,\n   ipurge_ref_aux I D (insert (D y) (sinks I D (D y) (drop (length xs) ws)))\n    ys Y)\n  \\<in> seq_comp_failures P Q\n\ngoal (1 subgoal):\n 1. \\<lbrakk>xs @ y # ipurge_tr I D (D y) (drop (length xs) ws)\n             \\<notin> sentences P;\n     ipurge_tr I D (D y) zs =\n     ipurge_tr I D (D y) (drop (length xs) ws) @\n     ipurge_tr_aux I D\n      (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys;\n     ipurge_ref I D (D y) zs Y =\n     ipurge_ref_aux I D\n      (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys Y\\<rbrakk>\n    \\<Longrightarrow> (xs @\n                       y #\n                       ipurge_tr I D (D y) (drop (length xs) ws) @\n                       ipurge_tr_aux I D\n                        (insert (D y)\n                          (sinks I D (D y) (drop (length xs) ws)))\n                        ys,\n                       ipurge_ref_aux I D\n                        (insert (D y)\n                          (sinks I D (D y) (drop (length xs) ws)))\n                        ys Y)\n                      \\<in> seq_comp_failures P Q", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>xs @ y # ipurge_tr I D (D y) (drop (length xs) ws)\n             \\<notin> sentences P;\n     ipurge_tr I D (D y) zs =\n     ipurge_tr I D (D y) (drop (length xs) ws) @\n     ipurge_tr_aux I D\n      (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys;\n     ipurge_ref I D (D y) zs Y =\n     ipurge_ref_aux I D\n      (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys Y\\<rbrakk>\n    \\<Longrightarrow> (xs @\n                       y #\n                       ipurge_tr I D (D y) (drop (length xs) ws) @\n                       ipurge_tr_aux I D\n                        (insert (D y)\n                          (sinks I D (D y) (drop (length xs) ws)))\n                        ys,\n                       ipurge_ref_aux I D\n                        (insert (D y)\n                          (sinks I D (D y) (drop (length xs) ws)))\n                        ys Y)\n                      \\<in> seq_comp_failures P Q", "assume P: \"xs @ y # ipurge_tr I D (D y) ?ws' \\<notin> sentences P\""], ["proof (state)\nthis:\n  xs @ y # ipurge_tr I D (D y) (drop (length xs) ws) \\<notin> sentences P\n\ngoal (1 subgoal):\n 1. \\<lbrakk>xs @ y # ipurge_tr I D (D y) (drop (length xs) ws)\n             \\<notin> sentences P;\n     ipurge_tr I D (D y) zs =\n     ipurge_tr I D (D y) (drop (length xs) ws) @\n     ipurge_tr_aux I D\n      (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys;\n     ipurge_ref I D (D y) zs Y =\n     ipurge_ref_aux I D\n      (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys Y\\<rbrakk>\n    \\<Longrightarrow> (xs @\n                       y #\n                       ipurge_tr I D (D y) (drop (length xs) ws) @\n                       ipurge_tr_aux I D\n                        (insert (D y)\n                          (sinks I D (D y) (drop (length xs) ws)))\n                        ys,\n                       ipurge_ref_aux I D\n                        (insert (D y)\n                          (sinks I D (D y) (drop (length xs) ws)))\n                        ys Y)\n                      \\<in> seq_comp_failures P Q", "have \"ws = take (length xs) ws @ ?ws'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ws = take (length xs) ws @ drop (length xs) ws", "by simp"], ["proof (state)\nthis:\n  ws = take (length xs) ws @ drop (length xs) ws\n\ngoal (1 subgoal):\n 1. \\<lbrakk>xs @ y # ipurge_tr I D (D y) (drop (length xs) ws)\n             \\<notin> sentences P;\n     ipurge_tr I D (D y) zs =\n     ipurge_tr I D (D y) (drop (length xs) ws) @\n     ipurge_tr_aux I D\n      (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys;\n     ipurge_ref I D (D y) zs Y =\n     ipurge_ref_aux I D\n      (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys Y\\<rbrakk>\n    \\<Longrightarrow> (xs @\n                       y #\n                       ipurge_tr I D (D y) (drop (length xs) ws) @\n                       ipurge_tr_aux I D\n                        (insert (D y)\n                          (sinks I D (D y) (drop (length xs) ws)))\n                        ys,\n                       ipurge_ref_aux I D\n                        (insert (D y)\n                          (sinks I D (D y) (drop (length xs) ws)))\n                        ys Y)\n                      \\<in> seq_comp_failures P Q", "moreover"], ["proof (state)\nthis:\n  ws = take (length xs) ws @ drop (length xs) ws\n\ngoal (1 subgoal):\n 1. \\<lbrakk>xs @ y # ipurge_tr I D (D y) (drop (length xs) ws)\n             \\<notin> sentences P;\n     ipurge_tr I D (D y) zs =\n     ipurge_tr I D (D y) (drop (length xs) ws) @\n     ipurge_tr_aux I D\n      (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys;\n     ipurge_ref I D (D y) zs Y =\n     ipurge_ref_aux I D\n      (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys Y\\<rbrakk>\n    \\<Longrightarrow> (xs @\n                       y #\n                       ipurge_tr I D (D y) (drop (length xs) ws) @\n                       ipurge_tr_aux I D\n                        (insert (D y)\n                          (sinks I D (D y) (drop (length xs) ws)))\n                        ys,\n                       ipurge_ref_aux I D\n                        (insert (D y)\n                          (sinks I D (D y) (drop (length xs) ws)))\n                        ys Y)\n                      \\<in> seq_comp_failures P Q", "have \"take (length xs) (ws @ ys) = take (length xs) (xs @ zs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. take (length xs) (ws @ ys) = take (length xs) (xs @ zs)", "using I"], ["proof (prove)\nusing this:\n  ws @ ys = xs @ zs\n\ngoal (1 subgoal):\n 1. take (length xs) (ws @ ys) = take (length xs) (xs @ zs)", "by simp"], ["proof (state)\nthis:\n  take (length xs) (ws @ ys) = take (length xs) (xs @ zs)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>xs @ y # ipurge_tr I D (D y) (drop (length xs) ws)\n             \\<notin> sentences P;\n     ipurge_tr I D (D y) zs =\n     ipurge_tr I D (D y) (drop (length xs) ws) @\n     ipurge_tr_aux I D\n      (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys;\n     ipurge_ref I D (D y) zs Y =\n     ipurge_ref_aux I D\n      (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys Y\\<rbrakk>\n    \\<Longrightarrow> (xs @\n                       y #\n                       ipurge_tr I D (D y) (drop (length xs) ws) @\n                       ipurge_tr_aux I D\n                        (insert (D y)\n                          (sinks I D (D y) (drop (length xs) ws)))\n                        ys,\n                       ipurge_ref_aux I D\n                        (insert (D y)\n                          (sinks I D (D y) (drop (length xs) ws)))\n                        ys Y)\n                      \\<in> seq_comp_failures P Q", "hence \"take (length xs) ws = xs\""], ["proof (prove)\nusing this:\n  take (length xs) (ws @ ys) = take (length xs) (xs @ zs)\n\ngoal (1 subgoal):\n 1. take (length xs) ws = xs", "using True"], ["proof (prove)\nusing this:\n  take (length xs) (ws @ ys) = take (length xs) (xs @ zs)\n  length xs < length ws\n\ngoal (1 subgoal):\n 1. take (length xs) ws = xs", "by simp"], ["proof (state)\nthis:\n  take (length xs) ws = xs\n\ngoal (1 subgoal):\n 1. \\<lbrakk>xs @ y # ipurge_tr I D (D y) (drop (length xs) ws)\n             \\<notin> sentences P;\n     ipurge_tr I D (D y) zs =\n     ipurge_tr I D (D y) (drop (length xs) ws) @\n     ipurge_tr_aux I D\n      (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys;\n     ipurge_ref I D (D y) zs Y =\n     ipurge_ref_aux I D\n      (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys Y\\<rbrakk>\n    \\<Longrightarrow> (xs @\n                       y #\n                       ipurge_tr I D (D y) (drop (length xs) ws) @\n                       ipurge_tr_aux I D\n                        (insert (D y)\n                          (sinks I D (D y) (drop (length xs) ws)))\n                        ys,\n                       ipurge_ref_aux I D\n                        (insert (D y)\n                          (sinks I D (D y) (drop (length xs) ws)))\n                        ys Y)\n                      \\<in> seq_comp_failures P Q", "ultimately"], ["proof (chain)\npicking this:\n  ws = take (length xs) ws @ drop (length xs) ws\n  take (length xs) ws = xs", "have \"xs @ ?ws' \\<in> sentences P\""], ["proof (prove)\nusing this:\n  ws = take (length xs) ws @ drop (length xs) ws\n  take (length xs) ws = xs\n\ngoal (1 subgoal):\n 1. xs @ drop (length xs) ws \\<in> sentences P", "using F"], ["proof (prove)\nusing this:\n  ws = take (length xs) ws @ drop (length xs) ws\n  take (length xs) ws = xs\n  ws \\<in> sentences P\n\ngoal (1 subgoal):\n 1. xs @ drop (length xs) ws \\<in> sentences P", "by simp"], ["proof (state)\nthis:\n  xs @ drop (length xs) ws \\<in> sentences P\n\ngoal (1 subgoal):\n 1. \\<lbrakk>xs @ y # ipurge_tr I D (D y) (drop (length xs) ws)\n             \\<notin> sentences P;\n     ipurge_tr I D (D y) zs =\n     ipurge_tr I D (D y) (drop (length xs) ws) @\n     ipurge_tr_aux I D\n      (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys;\n     ipurge_ref I D (D y) zs Y =\n     ipurge_ref_aux I D\n      (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys Y\\<rbrakk>\n    \\<Longrightarrow> (xs @\n                       y #\n                       ipurge_tr I D (D y) (drop (length xs) ws) @\n                       ipurge_tr_aux I D\n                        (insert (D y)\n                          (sinks I D (D y) (drop (length xs) ws)))\n                        ys,\n                       ipurge_ref_aux I D\n                        (insert (D y)\n                          (sinks I D (D y) (drop (length xs) ws)))\n                        ys Y)\n                      \\<in> seq_comp_failures P Q", "hence \"xs @ ?ws' @ [None] \\<in> traces P\""], ["proof (prove)\nusing this:\n  xs @ drop (length xs) ws \\<in> sentences P\n\ngoal (1 subgoal):\n 1. xs @ drop (length xs) ws @ [None] \\<in> traces P", "by (simp add: sentences_def)"], ["proof (state)\nthis:\n  xs @ drop (length xs) ws @ [None] \\<in> traces P\n\ngoal (1 subgoal):\n 1. \\<lbrakk>xs @ y # ipurge_tr I D (D y) (drop (length xs) ws)\n             \\<notin> sentences P;\n     ipurge_tr I D (D y) zs =\n     ipurge_tr I D (D y) (drop (length xs) ws) @\n     ipurge_tr_aux I D\n      (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys;\n     ipurge_ref I D (D y) zs Y =\n     ipurge_ref_aux I D\n      (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys Y\\<rbrakk>\n    \\<Longrightarrow> (xs @\n                       y #\n                       ipurge_tr I D (D y) (drop (length xs) ws) @\n                       ipurge_tr_aux I D\n                        (insert (D y)\n                          (sinks I D (D y) (drop (length xs) ws)))\n                        ys,\n                       ipurge_ref_aux I D\n                        (insert (D y)\n                          (sinks I D (D y) (drop (length xs) ws)))\n                        ys Y)\n                      \\<in> seq_comp_failures P Q", "hence \"(xs @ ?ws' @ [None], {}) \\<in> failures P\""], ["proof (prove)\nusing this:\n  xs @ drop (length xs) ws @ [None] \\<in> traces P\n\ngoal (1 subgoal):\n 1. (xs @ drop (length xs) ws @ [None], {}) \\<in> failures P", "by (rule traces_failures)"], ["proof (state)\nthis:\n  (xs @ drop (length xs) ws @ [None], {}) \\<in> failures P\n\ngoal (1 subgoal):\n 1. \\<lbrakk>xs @ y # ipurge_tr I D (D y) (drop (length xs) ws)\n             \\<notin> sentences P;\n     ipurge_tr I D (D y) zs =\n     ipurge_tr I D (D y) (drop (length xs) ws) @\n     ipurge_tr_aux I D\n      (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys;\n     ipurge_ref I D (D y) zs Y =\n     ipurge_ref_aux I D\n      (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys Y\\<rbrakk>\n    \\<Longrightarrow> (xs @\n                       y #\n                       ipurge_tr I D (D y) (drop (length xs) ws) @\n                       ipurge_tr_aux I D\n                        (insert (D y)\n                          (sinks I D (D y) (drop (length xs) ws)))\n                        ys,\n                       ipurge_ref_aux I D\n                        (insert (D y)\n                          (sinks I D (D y) (drop (length xs) ws)))\n                        ys Y)\n                      \\<in> seq_comp_failures P Q", "hence \"(?ws' @ [None], {}) \\<in> futures P xs\""], ["proof (prove)\nusing this:\n  (xs @ drop (length xs) ws @ [None], {}) \\<in> failures P\n\ngoal (1 subgoal):\n 1. (drop (length xs) ws @ [None], {}) \\<in> futures P xs", "by (simp add: futures_def)"], ["proof (state)\nthis:\n  (drop (length xs) ws @ [None], {}) \\<in> futures P xs\n\ngoal (1 subgoal):\n 1. \\<lbrakk>xs @ y # ipurge_tr I D (D y) (drop (length xs) ws)\n             \\<notin> sentences P;\n     ipurge_tr I D (D y) zs =\n     ipurge_tr I D (D y) (drop (length xs) ws) @\n     ipurge_tr_aux I D\n      (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys;\n     ipurge_ref I D (D y) zs Y =\n     ipurge_ref_aux I D\n      (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys Y\\<rbrakk>\n    \\<Longrightarrow> (xs @\n                       y #\n                       ipurge_tr I D (D y) (drop (length xs) ws) @\n                       ipurge_tr_aux I D\n                        (insert (D y)\n                          (sinks I D (D y) (drop (length xs) ws)))\n                        ys,\n                       ipurge_ref_aux I D\n                        (insert (D y)\n                          (sinks I D (D y) (drop (length xs) ws)))\n                        ys Y)\n                      \\<in> seq_comp_failures P Q", "moreover"], ["proof (state)\nthis:\n  (drop (length xs) ws @ [None], {}) \\<in> futures P xs\n\ngoal (1 subgoal):\n 1. \\<lbrakk>xs @ y # ipurge_tr I D (D y) (drop (length xs) ws)\n             \\<notin> sentences P;\n     ipurge_tr I D (D y) zs =\n     ipurge_tr I D (D y) (drop (length xs) ws) @\n     ipurge_tr_aux I D\n      (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys;\n     ipurge_ref I D (D y) zs Y =\n     ipurge_ref_aux I D\n      (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys Y\\<rbrakk>\n    \\<Longrightarrow> (xs @\n                       y #\n                       ipurge_tr I D (D y) (drop (length xs) ws) @\n                       ipurge_tr_aux I D\n                        (insert (D y)\n                          (sinks I D (D y) (drop (length xs) ws)))\n                        ys,\n                       ipurge_ref_aux I D\n                        (insert (D y)\n                          (sinks I D (D y) (drop (length xs) ws)))\n                        ys Y)\n                      \\<in> seq_comp_failures P Q", "have \"([y], {}) \\<in> futures P xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ([y], {}) \\<in> futures P xs", "using N"], ["proof (prove)\nusing this:\n  (xs @ [y], {}) \\<in> failures P \\<and>\n  None \\<notin> set xs \\<and> None \\<noteq> y\n\ngoal (1 subgoal):\n 1. ([y], {}) \\<in> futures P xs", "by (simp add: futures_def)"], ["proof (state)\nthis:\n  ([y], {}) \\<in> futures P xs\n\ngoal (1 subgoal):\n 1. \\<lbrakk>xs @ y # ipurge_tr I D (D y) (drop (length xs) ws)\n             \\<notin> sentences P;\n     ipurge_tr I D (D y) zs =\n     ipurge_tr I D (D y) (drop (length xs) ws) @\n     ipurge_tr_aux I D\n      (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys;\n     ipurge_ref I D (D y) zs Y =\n     ipurge_ref_aux I D\n      (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys Y\\<rbrakk>\n    \\<Longrightarrow> (xs @\n                       y #\n                       ipurge_tr I D (D y) (drop (length xs) ws) @\n                       ipurge_tr_aux I D\n                        (insert (D y)\n                          (sinks I D (D y) (drop (length xs) ws)))\n                        ys,\n                       ipurge_ref_aux I D\n                        (insert (D y)\n                          (sinks I D (D y) (drop (length xs) ws)))\n                        ys Y)\n                      \\<in> seq_comp_failures P Q", "ultimately"], ["proof (chain)\npicking this:\n  (drop (length xs) ws @ [None], {}) \\<in> futures P xs\n  ([y], {}) \\<in> futures P xs", "have \"(y # ipurge_tr I D (D y) (?ws' @ [None]),\n        ipurge_ref I D (D y) (?ws' @ [None]) {}) \\<in> futures P xs\""], ["proof (prove)\nusing this:\n  (drop (length xs) ws @ [None], {}) \\<in> futures P xs\n  ([y], {}) \\<in> futures P xs\n\ngoal (1 subgoal):\n 1. (y # ipurge_tr I D (D y) (drop (length xs) ws @ [None]),\n     ipurge_ref I D (D y) (drop (length xs) ws @ [None]) {})\n    \\<in> futures P xs", "using D"], ["proof (prove)\nusing this:\n  (drop (length xs) ws @ [None], {}) \\<in> futures P xs\n  ([y], {}) \\<in> futures P xs\n  secure P I D\n\ngoal (1 subgoal):\n 1. (y # ipurge_tr I D (D y) (drop (length xs) ws @ [None]),\n     ipurge_ref I D (D y) (drop (length xs) ws @ [None]) {})\n    \\<in> futures P xs", "by (simp add: secure_def del: ipurge_tr.simps)"], ["proof (state)\nthis:\n  (y # ipurge_tr I D (D y) (drop (length xs) ws @ [None]),\n   ipurge_ref I D (D y) (drop (length xs) ws @ [None]) {})\n  \\<in> futures P xs\n\ngoal (1 subgoal):\n 1. \\<lbrakk>xs @ y # ipurge_tr I D (D y) (drop (length xs) ws)\n             \\<notin> sentences P;\n     ipurge_tr I D (D y) zs =\n     ipurge_tr I D (D y) (drop (length xs) ws) @\n     ipurge_tr_aux I D\n      (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys;\n     ipurge_ref I D (D y) zs Y =\n     ipurge_ref_aux I D\n      (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys Y\\<rbrakk>\n    \\<Longrightarrow> (xs @\n                       y #\n                       ipurge_tr I D (D y) (drop (length xs) ws) @\n                       ipurge_tr_aux I D\n                        (insert (D y)\n                          (sinks I D (D y) (drop (length xs) ws)))\n                        ys,\n                       ipurge_ref_aux I D\n                        (insert (D y)\n                          (sinks I D (D y) (drop (length xs) ws)))\n                        ys Y)\n                      \\<in> seq_comp_failures P Q", "hence Q: \"(xs @ y # ipurge_tr I D (D y) (?ws' @ [None]), {}) \\<in> failures P\""], ["proof (prove)\nusing this:\n  (y # ipurge_tr I D (D y) (drop (length xs) ws @ [None]),\n   ipurge_ref I D (D y) (drop (length xs) ws @ [None]) {})\n  \\<in> futures P xs\n\ngoal (1 subgoal):\n 1. (xs @ y # ipurge_tr I D (D y) (drop (length xs) ws @ [None]), {})\n    \\<in> failures P", "by (simp add: futures_def ipurge_ref_def)"], ["proof (state)\nthis:\n  (xs @ y # ipurge_tr I D (D y) (drop (length xs) ws @ [None]), {})\n  \\<in> failures P\n\ngoal (1 subgoal):\n 1. \\<lbrakk>xs @ y # ipurge_tr I D (D y) (drop (length xs) ws)\n             \\<notin> sentences P;\n     ipurge_tr I D (D y) zs =\n     ipurge_tr I D (D y) (drop (length xs) ws) @\n     ipurge_tr_aux I D\n      (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys;\n     ipurge_ref I D (D y) zs Y =\n     ipurge_ref_aux I D\n      (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys Y\\<rbrakk>\n    \\<Longrightarrow> (xs @\n                       y #\n                       ipurge_tr I D (D y) (drop (length xs) ws) @\n                       ipurge_tr_aux I D\n                        (insert (D y)\n                          (sinks I D (D y) (drop (length xs) ws)))\n                        ys,\n                       ipurge_ref_aux I D\n                        (insert (D y)\n                          (sinks I D (D y) (drop (length xs) ws)))\n                        ys Y)\n                      \\<in> seq_comp_failures P Q", "have \"set ?ws' \\<subseteq> set ws\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (drop (length xs) ws) \\<subseteq> set ws", "by (rule set_drop_subset)"], ["proof (state)\nthis:\n  set (drop (length xs) ws) \\<subseteq> set ws\n\ngoal (1 subgoal):\n 1. \\<lbrakk>xs @ y # ipurge_tr I D (D y) (drop (length xs) ws)\n             \\<notin> sentences P;\n     ipurge_tr I D (D y) zs =\n     ipurge_tr I D (D y) (drop (length xs) ws) @\n     ipurge_tr_aux I D\n      (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys;\n     ipurge_ref I D (D y) zs Y =\n     ipurge_ref_aux I D\n      (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys Y\\<rbrakk>\n    \\<Longrightarrow> (xs @\n                       y #\n                       ipurge_tr I D (D y) (drop (length xs) ws) @\n                       ipurge_tr_aux I D\n                        (insert (D y)\n                          (sinks I D (D y) (drop (length xs) ws)))\n                        ys,\n                       ipurge_ref_aux I D\n                        (insert (D y)\n                          (sinks I D (D y) (drop (length xs) ws)))\n                        ys Y)\n                      \\<in> seq_comp_failures P Q", "moreover"], ["proof (state)\nthis:\n  set (drop (length xs) ws) \\<subseteq> set ws\n\ngoal (1 subgoal):\n 1. \\<lbrakk>xs @ y # ipurge_tr I D (D y) (drop (length xs) ws)\n             \\<notin> sentences P;\n     ipurge_tr I D (D y) zs =\n     ipurge_tr I D (D y) (drop (length xs) ws) @\n     ipurge_tr_aux I D\n      (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys;\n     ipurge_ref I D (D y) zs Y =\n     ipurge_ref_aux I D\n      (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys Y\\<rbrakk>\n    \\<Longrightarrow> (xs @\n                       y #\n                       ipurge_tr I D (D y) (drop (length xs) ws) @\n                       ipurge_tr_aux I D\n                        (insert (D y)\n                          (sinks I D (D y) (drop (length xs) ws)))\n                        ys,\n                       ipurge_ref_aux I D\n                        (insert (D y)\n                          (sinks I D (D y) (drop (length xs) ws)))\n                        ys Y)\n                      \\<in> seq_comp_failures P Q", "have \"weakly_sequential P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. weakly_sequential P", "using C"], ["proof (prove)\nusing this:\n  sequential P\n\ngoal (1 subgoal):\n 1. weakly_sequential P", "by (rule seq_implies_weakly_seq)"], ["proof (state)\nthis:\n  weakly_sequential P\n\ngoal (1 subgoal):\n 1. \\<lbrakk>xs @ y # ipurge_tr I D (D y) (drop (length xs) ws)\n             \\<notin> sentences P;\n     ipurge_tr I D (D y) zs =\n     ipurge_tr I D (D y) (drop (length xs) ws) @\n     ipurge_tr_aux I D\n      (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys;\n     ipurge_ref I D (D y) zs Y =\n     ipurge_ref_aux I D\n      (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys Y\\<rbrakk>\n    \\<Longrightarrow> (xs @\n                       y #\n                       ipurge_tr I D (D y) (drop (length xs) ws) @\n                       ipurge_tr_aux I D\n                        (insert (D y)\n                          (sinks I D (D y) (drop (length xs) ws)))\n                        ys,\n                       ipurge_ref_aux I D\n                        (insert (D y)\n                          (sinks I D (D y) (drop (length xs) ws)))\n                        ys Y)\n                      \\<in> seq_comp_failures P Q", "hence \"None \\<notin> set ws\""], ["proof (prove)\nusing this:\n  weakly_sequential P\n\ngoal (1 subgoal):\n 1. None \\<notin> set ws", "using F"], ["proof (prove)\nusing this:\n  weakly_sequential P\n  ws \\<in> sentences P\n\ngoal (1 subgoal):\n 1. None \\<notin> set ws", "by (rule weakly_seq_sentences_none)"], ["proof (state)\nthis:\n  None \\<notin> set ws\n\ngoal (1 subgoal):\n 1. \\<lbrakk>xs @ y # ipurge_tr I D (D y) (drop (length xs) ws)\n             \\<notin> sentences P;\n     ipurge_tr I D (D y) zs =\n     ipurge_tr I D (D y) (drop (length xs) ws) @\n     ipurge_tr_aux I D\n      (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys;\n     ipurge_ref I D (D y) zs Y =\n     ipurge_ref_aux I D\n      (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys Y\\<rbrakk>\n    \\<Longrightarrow> (xs @\n                       y #\n                       ipurge_tr I D (D y) (drop (length xs) ws) @\n                       ipurge_tr_aux I D\n                        (insert (D y)\n                          (sinks I D (D y) (drop (length xs) ws)))\n                        ys,\n                       ipurge_ref_aux I D\n                        (insert (D y)\n                          (sinks I D (D y) (drop (length xs) ws)))\n                        ys Y)\n                      \\<in> seq_comp_failures P Q", "ultimately"], ["proof (chain)\npicking this:\n  set (drop (length xs) ws) \\<subseteq> set ws\n  None \\<notin> set ws", "have R: \"None \\<notin> set ?ws'\""], ["proof (prove)\nusing this:\n  set (drop (length xs) ws) \\<subseteq> set ws\n  None \\<notin> set ws\n\ngoal (1 subgoal):\n 1. None \\<notin> set (drop (length xs) ws)", "by (rule contra_subsetD)"], ["proof (state)\nthis:\n  None \\<notin> set (drop (length xs) ws)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>xs @ y # ipurge_tr I D (D y) (drop (length xs) ws)\n             \\<notin> sentences P;\n     ipurge_tr I D (D y) zs =\n     ipurge_tr I D (D y) (drop (length xs) ws) @\n     ipurge_tr_aux I D\n      (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys;\n     ipurge_ref I D (D y) zs Y =\n     ipurge_ref_aux I D\n      (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys Y\\<rbrakk>\n    \\<Longrightarrow> (xs @\n                       y #\n                       ipurge_tr I D (D y) (drop (length xs) ws) @\n                       ipurge_tr_aux I D\n                        (insert (D y)\n                          (sinks I D (D y) (drop (length xs) ws)))\n                        ys,\n                       ipurge_ref_aux I D\n                        (insert (D y)\n                          (sinks I D (D y) (drop (length xs) ws)))\n                        ys Y)\n                      \\<in> seq_comp_failures P Q", "show \"(xs @ y # ipurge_tr I D (D y) ?ws' @ ipurge_tr_aux I D ?U ys,\n        ipurge_ref_aux I D ?U ys Y) \\<in> seq_comp_failures P Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (xs @\n     y #\n     ipurge_tr I D (D y) (drop (length xs) ws) @\n     ipurge_tr_aux I D\n      (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys,\n     ipurge_ref_aux I D\n      (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys Y)\n    \\<in> seq_comp_failures P Q", "proof (cases \"(D y, D None) \\<in> I \\<or>\n       (\\<exists>u \\<in> sinks I D (D y) ?ws'. (u, D None) \\<in> I)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. (D y, D None) \\<in> I \\<or>\n    (\\<exists>u\\<in>sinks I D (D y) (drop (length xs) ws).\n        (u, D None) \\<in> I) \\<Longrightarrow>\n    (xs @\n     y #\n     ipurge_tr I D (D y) (drop (length xs) ws) @\n     ipurge_tr_aux I D\n      (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys,\n     ipurge_ref_aux I D\n      (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys Y)\n    \\<in> seq_comp_failures P Q\n 2. \\<not> ((D y, D None) \\<in> I \\<or>\n            (\\<exists>u\\<in>sinks I D (D y) (drop (length xs) ws).\n                (u, D None) \\<in> I)) \\<Longrightarrow>\n    (xs @\n     y #\n     ipurge_tr I D (D y) (drop (length xs) ws) @\n     ipurge_tr_aux I D\n      (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys,\n     ipurge_ref_aux I D\n      (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys Y)\n    \\<in> seq_comp_failures P Q", "assume S: \"(D y, D None) \\<in> I \\<or>\n          (\\<exists>u \\<in> sinks I D (D y) ?ws'. (u, D None) \\<in> I)\""], ["proof (state)\nthis:\n  (D y, D None) \\<in> I \\<or>\n  (\\<exists>u\\<in>sinks I D (D y) (drop (length xs) ws).\n      (u, D None) \\<in> I)\n\ngoal (2 subgoals):\n 1. (D y, D None) \\<in> I \\<or>\n    (\\<exists>u\\<in>sinks I D (D y) (drop (length xs) ws).\n        (u, D None) \\<in> I) \\<Longrightarrow>\n    (xs @\n     y #\n     ipurge_tr I D (D y) (drop (length xs) ws) @\n     ipurge_tr_aux I D\n      (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys,\n     ipurge_ref_aux I D\n      (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys Y)\n    \\<in> seq_comp_failures P Q\n 2. \\<not> ((D y, D None) \\<in> I \\<or>\n            (\\<exists>u\\<in>sinks I D (D y) (drop (length xs) ws).\n                (u, D None) \\<in> I)) \\<Longrightarrow>\n    (xs @\n     y #\n     ipurge_tr I D (D y) (drop (length xs) ws) @\n     ipurge_tr_aux I D\n      (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys,\n     ipurge_ref_aux I D\n      (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys Y)\n    \\<in> seq_comp_failures P Q", "have \"ipurge_tr_aux I D ?U ys = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ipurge_tr_aux I D (insert (D y) (sinks I D (D y) (drop (length xs) ws)))\n     ys =\n    []", "proof (rule disjE [OF S], erule_tac [2] bexE)"], ["proof (state)\ngoal (2 subgoals):\n 1. (D y, D None) \\<in> I \\<Longrightarrow>\n    ipurge_tr_aux I D (insert (D y) (sinks I D (D y) (drop (length xs) ws)))\n     ys =\n    []\n 2. \\<And>u.\n       \\<lbrakk>u \\<in> sinks I D (D y) (drop (length xs) ws);\n        (u, D None) \\<in> I\\<rbrakk>\n       \\<Longrightarrow> ipurge_tr_aux I D\n                          (insert (D y)\n                            (sinks I D (D y) (drop (length xs) ws)))\n                          ys =\n                         []", "assume T: \"(D y, D None) \\<in> I\""], ["proof (state)\nthis:\n  (D y, D None) \\<in> I\n\ngoal (2 subgoals):\n 1. (D y, D None) \\<in> I \\<Longrightarrow>\n    ipurge_tr_aux I D (insert (D y) (sinks I D (D y) (drop (length xs) ws)))\n     ys =\n    []\n 2. \\<And>u.\n       \\<lbrakk>u \\<in> sinks I D (D y) (drop (length xs) ws);\n        (u, D None) \\<in> I\\<rbrakk>\n       \\<Longrightarrow> ipurge_tr_aux I D\n                          (insert (D y)\n                            (sinks I D (D y) (drop (length xs) ws)))\n                          ys =\n                         []", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. ipurge_tr_aux I D (insert (D y) (sinks I D (D y) (drop (length xs) ws)))\n     ys =\n    []", "proof (rule ipurge_tr_aux_nil [of \"D y\"], simp)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> set ys \\<Longrightarrow> (D y, D x) \\<in> I", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> set ys \\<Longrightarrow> (D y, D x) \\<in> I", "have \"(D y, D None) \\<in> I \\<and> y \\<noteq> None \\<longrightarrow> (\\<forall>u \\<in> range D. (D y, u) \\<in> I)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (D y, D None) \\<in> I \\<and> y \\<noteq> None \\<longrightarrow>\n    (\\<forall>u\\<in>range D. (D y, u) \\<in> I)", "using A"], ["proof (prove)\nusing this:\n  secure_termination I D\n\ngoal (1 subgoal):\n 1. (D y, D None) \\<in> I \\<and> y \\<noteq> None \\<longrightarrow>\n    (\\<forall>u\\<in>range D. (D y, u) \\<in> I)", "by (simp add: secure_termination_def)"], ["proof (state)\nthis:\n  (D y, D None) \\<in> I \\<and> y \\<noteq> None \\<longrightarrow>\n  (\\<forall>u\\<in>range D. (D y, u) \\<in> I)\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> set ys \\<Longrightarrow> (D y, D x) \\<in> I", "moreover"], ["proof (state)\nthis:\n  (D y, D None) \\<in> I \\<and> y \\<noteq> None \\<longrightarrow>\n  (\\<forall>u\\<in>range D. (D y, u) \\<in> I)\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> set ys \\<Longrightarrow> (D y, D x) \\<in> I", "have \"y \\<noteq> None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y \\<noteq> None", "using N"], ["proof (prove)\nusing this:\n  (xs @ [y], {}) \\<in> failures P \\<and>\n  None \\<notin> set xs \\<and> None \\<noteq> y\n\ngoal (1 subgoal):\n 1. y \\<noteq> None", "by (rule_tac not_sym, simp)"], ["proof (state)\nthis:\n  y \\<noteq> None\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> set ys \\<Longrightarrow> (D y, D x) \\<in> I", "ultimately"], ["proof (chain)\npicking this:\n  (D y, D None) \\<in> I \\<and> y \\<noteq> None \\<longrightarrow>\n  (\\<forall>u\\<in>range D. (D y, u) \\<in> I)\n  y \\<noteq> None", "have \"\\<forall>u \\<in> range D. (D y, u) \\<in> I\""], ["proof (prove)\nusing this:\n  (D y, D None) \\<in> I \\<and> y \\<noteq> None \\<longrightarrow>\n  (\\<forall>u\\<in>range D. (D y, u) \\<in> I)\n  y \\<noteq> None\n\ngoal (1 subgoal):\n 1. \\<forall>u\\<in>range D. (D y, u) \\<in> I", "using T"], ["proof (prove)\nusing this:\n  (D y, D None) \\<in> I \\<and> y \\<noteq> None \\<longrightarrow>\n  (\\<forall>u\\<in>range D. (D y, u) \\<in> I)\n  y \\<noteq> None\n  (D y, D None) \\<in> I\n\ngoal (1 subgoal):\n 1. \\<forall>u\\<in>range D. (D y, u) \\<in> I", "by simp"], ["proof (state)\nthis:\n  \\<forall>u\\<in>range D. (D y, u) \\<in> I\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> set ys \\<Longrightarrow> (D y, D x) \\<in> I", "thus \"(D y, D x) \\<in> I\""], ["proof (prove)\nusing this:\n  \\<forall>u\\<in>range D. (D y, u) \\<in> I\n\ngoal (1 subgoal):\n 1. (D y, D x) \\<in> I", "by simp"], ["proof (state)\nthis:\n  (D y, D x) \\<in> I\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ipurge_tr_aux I D (insert (D y) (sinks I D (D y) (drop (length xs) ws)))\n   ys =\n  []\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<lbrakk>u \\<in> sinks I D (D y) (drop (length xs) ws);\n        (u, D None) \\<in> I\\<rbrakk>\n       \\<Longrightarrow> ipurge_tr_aux I D\n                          (insert (D y)\n                            (sinks I D (D y) (drop (length xs) ws)))\n                          ys =\n                         []", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<lbrakk>u \\<in> sinks I D (D y) (drop (length xs) ws);\n        (u, D None) \\<in> I\\<rbrakk>\n       \\<Longrightarrow> ipurge_tr_aux I D\n                          (insert (D y)\n                            (sinks I D (D y) (drop (length xs) ws)))\n                          ys =\n                         []", "fix u"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<lbrakk>u \\<in> sinks I D (D y) (drop (length xs) ws);\n        (u, D None) \\<in> I\\<rbrakk>\n       \\<Longrightarrow> ipurge_tr_aux I D\n                          (insert (D y)\n                            (sinks I D (D y) (drop (length xs) ws)))\n                          ys =\n                         []", "assume\n            T: \"u \\<in> sinks I D (D y) ?ws'\" and\n            U: \"(u, D None) \\<in> I\""], ["proof (state)\nthis:\n  u \\<in> sinks I D (D y) (drop (length xs) ws)\n  (u, D None) \\<in> I\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<lbrakk>u \\<in> sinks I D (D y) (drop (length xs) ws);\n        (u, D None) \\<in> I\\<rbrakk>\n       \\<Longrightarrow> ipurge_tr_aux I D\n                          (insert (D y)\n                            (sinks I D (D y) (drop (length xs) ws)))\n                          ys =\n                         []", "have \"\\<exists>w \\<in> set ?ws'. u = D w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>w\\<in>set (drop (length xs) ws). u = D w", "using T"], ["proof (prove)\nusing this:\n  u \\<in> sinks I D (D y) (drop (length xs) ws)\n\ngoal (1 subgoal):\n 1. \\<exists>w\\<in>set (drop (length xs) ws). u = D w", "by (rule sinks_elem)"], ["proof (state)\nthis:\n  \\<exists>w\\<in>set (drop (length xs) ws). u = D w\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<lbrakk>u \\<in> sinks I D (D y) (drop (length xs) ws);\n        (u, D None) \\<in> I\\<rbrakk>\n       \\<Longrightarrow> ipurge_tr_aux I D\n                          (insert (D y)\n                            (sinks I D (D y) (drop (length xs) ws)))\n                          ys =\n                         []", "then"], ["proof (chain)\npicking this:\n  \\<exists>w\\<in>set (drop (length xs) ws). u = D w", "obtain w where V: \"w \\<in> set ?ws'\" and W: \"u = D w\""], ["proof (prove)\nusing this:\n  \\<exists>w\\<in>set (drop (length xs) ws). u = D w\n\ngoal (1 subgoal):\n 1. (\\<And>w.\n        \\<lbrakk>w \\<in> set (drop (length xs) ws); u = D w\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  w \\<in> set (drop (length xs) ws)\n  u = D w\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<lbrakk>u \\<in> sinks I D (D y) (drop (length xs) ws);\n        (u, D None) \\<in> I\\<rbrakk>\n       \\<Longrightarrow> ipurge_tr_aux I D\n                          (insert (D y)\n                            (sinks I D (D y) (drop (length xs) ws)))\n                          ys =\n                         []", "have X: \"w \\<noteq> None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. w \\<noteq> None", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. w = None \\<Longrightarrow> False", "assume \"w = None\""], ["proof (state)\nthis:\n  w = None\n\ngoal (1 subgoal):\n 1. w = None \\<Longrightarrow> False", "hence \"None \\<in> set ?ws'\""], ["proof (prove)\nusing this:\n  w = None\n\ngoal (1 subgoal):\n 1. None \\<in> set (drop (length xs) ws)", "using V"], ["proof (prove)\nusing this:\n  w = None\n  w \\<in> set (drop (length xs) ws)\n\ngoal (1 subgoal):\n 1. None \\<in> set (drop (length xs) ws)", "by simp"], ["proof (state)\nthis:\n  None \\<in> set (drop (length xs) ws)\n\ngoal (1 subgoal):\n 1. w = None \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  None \\<in> set (drop (length xs) ws)\n\ngoal (1 subgoal):\n 1. w = None \\<Longrightarrow> False", "have \"None \\<notin> set ?ws'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. None \\<notin> set (drop (length xs) ws)", "using R"], ["proof (prove)\nusing this:\n  None \\<notin> set (drop (length xs) ws)\n\ngoal (1 subgoal):\n 1. None \\<notin> set (drop (length xs) ws)", "by simp"], ["proof (state)\nthis:\n  None \\<notin> set (drop (length xs) ws)\n\ngoal (1 subgoal):\n 1. w = None \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  None \\<in> set (drop (length xs) ws)\n  None \\<notin> set (drop (length xs) ws)", "show False"], ["proof (prove)\nusing this:\n  None \\<in> set (drop (length xs) ws)\n  None \\<notin> set (drop (length xs) ws)\n\ngoal (1 subgoal):\n 1. False", "by contradiction"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  w \\<noteq> None\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<lbrakk>u \\<in> sinks I D (D y) (drop (length xs) ws);\n        (u, D None) \\<in> I\\<rbrakk>\n       \\<Longrightarrow> ipurge_tr_aux I D\n                          (insert (D y)\n                            (sinks I D (D y) (drop (length xs) ws)))\n                          ys =\n                         []", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. ipurge_tr_aux I D (insert (D y) (sinks I D (D y) (drop (length xs) ws)))\n     ys =\n    []", "proof (rule ipurge_tr_aux_nil [of u], simp add: T)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> set ys \\<Longrightarrow> (u, D x) \\<in> I", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> set ys \\<Longrightarrow> (u, D x) \\<in> I", "have \"(D w, D None) \\<in> I \\<and> w \\<noteq> None \\<longrightarrow>\n              (\\<forall>v \\<in> range D. (D w, v) \\<in> I)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (D w, D None) \\<in> I \\<and> w \\<noteq> None \\<longrightarrow>\n    (\\<forall>v\\<in>range D. (D w, v) \\<in> I)", "using A"], ["proof (prove)\nusing this:\n  secure_termination I D\n\ngoal (1 subgoal):\n 1. (D w, D None) \\<in> I \\<and> w \\<noteq> None \\<longrightarrow>\n    (\\<forall>v\\<in>range D. (D w, v) \\<in> I)", "by (simp add: secure_termination_def)"], ["proof (state)\nthis:\n  (D w, D None) \\<in> I \\<and> w \\<noteq> None \\<longrightarrow>\n  (\\<forall>v\\<in>range D. (D w, v) \\<in> I)\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> set ys \\<Longrightarrow> (u, D x) \\<in> I", "moreover"], ["proof (state)\nthis:\n  (D w, D None) \\<in> I \\<and> w \\<noteq> None \\<longrightarrow>\n  (\\<forall>v\\<in>range D. (D w, v) \\<in> I)\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> set ys \\<Longrightarrow> (u, D x) \\<in> I", "have \"(D w, D None) \\<in> I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (D w, D None) \\<in> I", "using U and W"], ["proof (prove)\nusing this:\n  (u, D None) \\<in> I\n  u = D w\n\ngoal (1 subgoal):\n 1. (D w, D None) \\<in> I", "by simp"], ["proof (state)\nthis:\n  (D w, D None) \\<in> I\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> set ys \\<Longrightarrow> (u, D x) \\<in> I", "ultimately"], ["proof (chain)\npicking this:\n  (D w, D None) \\<in> I \\<and> w \\<noteq> None \\<longrightarrow>\n  (\\<forall>v\\<in>range D. (D w, v) \\<in> I)\n  (D w, D None) \\<in> I", "have \"\\<forall>v \\<in> range D. (D w, v) \\<in> I\""], ["proof (prove)\nusing this:\n  (D w, D None) \\<in> I \\<and> w \\<noteq> None \\<longrightarrow>\n  (\\<forall>v\\<in>range D. (D w, v) \\<in> I)\n  (D w, D None) \\<in> I\n\ngoal (1 subgoal):\n 1. \\<forall>v\\<in>range D. (D w, v) \\<in> I", "using X"], ["proof (prove)\nusing this:\n  (D w, D None) \\<in> I \\<and> w \\<noteq> None \\<longrightarrow>\n  (\\<forall>v\\<in>range D. (D w, v) \\<in> I)\n  (D w, D None) \\<in> I\n  w \\<noteq> None\n\ngoal (1 subgoal):\n 1. \\<forall>v\\<in>range D. (D w, v) \\<in> I", "by simp"], ["proof (state)\nthis:\n  \\<forall>v\\<in>range D. (D w, v) \\<in> I\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> set ys \\<Longrightarrow> (u, D x) \\<in> I", "thus \"(u, D x) \\<in> I\""], ["proof (prove)\nusing this:\n  \\<forall>v\\<in>range D. (D w, v) \\<in> I\n\ngoal (1 subgoal):\n 1. (u, D x) \\<in> I", "using W"], ["proof (prove)\nusing this:\n  \\<forall>v\\<in>range D. (D w, v) \\<in> I\n  u = D w\n\ngoal (1 subgoal):\n 1. (u, D x) \\<in> I", "by simp"], ["proof (state)\nthis:\n  (u, D x) \\<in> I\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ipurge_tr_aux I D (insert (D y) (sinks I D (D y) (drop (length xs) ws)))\n   ys =\n  []\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ipurge_tr_aux I D (insert (D y) (sinks I D (D y) (drop (length xs) ws)))\n   ys =\n  []\n\ngoal (2 subgoals):\n 1. (D y, D None) \\<in> I \\<or>\n    (\\<exists>u\\<in>sinks I D (D y) (drop (length xs) ws).\n        (u, D None) \\<in> I) \\<Longrightarrow>\n    (xs @\n     y #\n     ipurge_tr I D (D y) (drop (length xs) ws) @\n     ipurge_tr_aux I D\n      (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys,\n     ipurge_ref_aux I D\n      (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys Y)\n    \\<in> seq_comp_failures P Q\n 2. \\<not> ((D y, D None) \\<in> I \\<or>\n            (\\<exists>u\\<in>sinks I D (D y) (drop (length xs) ws).\n                (u, D None) \\<in> I)) \\<Longrightarrow>\n    (xs @\n     y #\n     ipurge_tr I D (D y) (drop (length xs) ws) @\n     ipurge_tr_aux I D\n      (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys,\n     ipurge_ref_aux I D\n      (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys Y)\n    \\<in> seq_comp_failures P Q", "moreover"], ["proof (state)\nthis:\n  ipurge_tr_aux I D (insert (D y) (sinks I D (D y) (drop (length xs) ws)))\n   ys =\n  []\n\ngoal (2 subgoals):\n 1. (D y, D None) \\<in> I \\<or>\n    (\\<exists>u\\<in>sinks I D (D y) (drop (length xs) ws).\n        (u, D None) \\<in> I) \\<Longrightarrow>\n    (xs @\n     y #\n     ipurge_tr I D (D y) (drop (length xs) ws) @\n     ipurge_tr_aux I D\n      (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys,\n     ipurge_ref_aux I D\n      (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys Y)\n    \\<in> seq_comp_failures P Q\n 2. \\<not> ((D y, D None) \\<in> I \\<or>\n            (\\<exists>u\\<in>sinks I D (D y) (drop (length xs) ws).\n                (u, D None) \\<in> I)) \\<Longrightarrow>\n    (xs @\n     y #\n     ipurge_tr I D (D y) (drop (length xs) ws) @\n     ipurge_tr_aux I D\n      (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys,\n     ipurge_ref_aux I D\n      (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys Y)\n    \\<in> seq_comp_failures P Q", "have \"ipurge_ref_aux I D ?U ys Y = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ipurge_ref_aux I D\n     (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys Y =\n    {}", "proof (rule disjE [OF S], erule_tac [2] bexE)"], ["proof (state)\ngoal (2 subgoals):\n 1. (D y, D None) \\<in> I \\<Longrightarrow>\n    ipurge_ref_aux I D\n     (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys Y =\n    {}\n 2. \\<And>u.\n       \\<lbrakk>u \\<in> sinks I D (D y) (drop (length xs) ws);\n        (u, D None) \\<in> I\\<rbrakk>\n       \\<Longrightarrow> ipurge_ref_aux I D\n                          (insert (D y)\n                            (sinks I D (D y) (drop (length xs) ws)))\n                          ys Y =\n                         {}", "assume T: \"(D y, D None) \\<in> I\""], ["proof (state)\nthis:\n  (D y, D None) \\<in> I\n\ngoal (2 subgoals):\n 1. (D y, D None) \\<in> I \\<Longrightarrow>\n    ipurge_ref_aux I D\n     (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys Y =\n    {}\n 2. \\<And>u.\n       \\<lbrakk>u \\<in> sinks I D (D y) (drop (length xs) ws);\n        (u, D None) \\<in> I\\<rbrakk>\n       \\<Longrightarrow> ipurge_ref_aux I D\n                          (insert (D y)\n                            (sinks I D (D y) (drop (length xs) ws)))\n                          ys Y =\n                         {}", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. ipurge_ref_aux I D\n     (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys Y =\n    {}", "proof (rule ipurge_ref_aux_empty [of \"D y\"])"], ["proof (state)\ngoal (2 subgoals):\n 1. D y\n    \\<in> sinks_aux I D\n           (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys\n 2. \\<And>x. x \\<in> Y \\<Longrightarrow> (D y, D x) \\<in> I", "have \"?U \\<subseteq> sinks_aux I D ?U ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. insert (D y) (sinks I D (D y) (drop (length xs) ws))\n    \\<subseteq> sinks_aux I D\n                 (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys", "by (rule sinks_aux_subset)"], ["proof (state)\nthis:\n  insert (D y) (sinks I D (D y) (drop (length xs) ws))\n  \\<subseteq> sinks_aux I D\n               (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys\n\ngoal (2 subgoals):\n 1. D y\n    \\<in> sinks_aux I D\n           (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys\n 2. \\<And>x. x \\<in> Y \\<Longrightarrow> (D y, D x) \\<in> I", "moreover"], ["proof (state)\nthis:\n  insert (D y) (sinks I D (D y) (drop (length xs) ws))\n  \\<subseteq> sinks_aux I D\n               (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys\n\ngoal (2 subgoals):\n 1. D y\n    \\<in> sinks_aux I D\n           (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys\n 2. \\<And>x. x \\<in> Y \\<Longrightarrow> (D y, D x) \\<in> I", "have \"D y \\<in> ?U\""], ["proof (prove)\ngoal (1 subgoal):\n 1. D y \\<in> insert (D y) (sinks I D (D y) (drop (length xs) ws))", "by simp"], ["proof (state)\nthis:\n  D y \\<in> insert (D y) (sinks I D (D y) (drop (length xs) ws))\n\ngoal (2 subgoals):\n 1. D y\n    \\<in> sinks_aux I D\n           (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys\n 2. \\<And>x. x \\<in> Y \\<Longrightarrow> (D y, D x) \\<in> I", "ultimately"], ["proof (chain)\npicking this:\n  insert (D y) (sinks I D (D y) (drop (length xs) ws))\n  \\<subseteq> sinks_aux I D\n               (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys\n  D y \\<in> insert (D y) (sinks I D (D y) (drop (length xs) ws))", "show \"D y \\<in> sinks_aux I D ?U ys\""], ["proof (prove)\nusing this:\n  insert (D y) (sinks I D (D y) (drop (length xs) ws))\n  \\<subseteq> sinks_aux I D\n               (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys\n  D y \\<in> insert (D y) (sinks I D (D y) (drop (length xs) ws))\n\ngoal (1 subgoal):\n 1. D y\n    \\<in> sinks_aux I D\n           (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys", ".."], ["proof (state)\nthis:\n  D y\n  \\<in> sinks_aux I D (insert (D y) (sinks I D (D y) (drop (length xs) ws)))\n         ys\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> Y \\<Longrightarrow> (D y, D x) \\<in> I", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> Y \\<Longrightarrow> (D y, D x) \\<in> I", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> Y \\<Longrightarrow> (D y, D x) \\<in> I", "have \"(D y, D None) \\<in> I \\<and> y \\<noteq> None \\<longrightarrow> (\\<forall>u \\<in> range D. (D y, u) \\<in> I)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (D y, D None) \\<in> I \\<and> y \\<noteq> None \\<longrightarrow>\n    (\\<forall>u\\<in>range D. (D y, u) \\<in> I)", "using A"], ["proof (prove)\nusing this:\n  secure_termination I D\n\ngoal (1 subgoal):\n 1. (D y, D None) \\<in> I \\<and> y \\<noteq> None \\<longrightarrow>\n    (\\<forall>u\\<in>range D. (D y, u) \\<in> I)", "by (simp add: secure_termination_def)"], ["proof (state)\nthis:\n  (D y, D None) \\<in> I \\<and> y \\<noteq> None \\<longrightarrow>\n  (\\<forall>u\\<in>range D. (D y, u) \\<in> I)\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> Y \\<Longrightarrow> (D y, D x) \\<in> I", "moreover"], ["proof (state)\nthis:\n  (D y, D None) \\<in> I \\<and> y \\<noteq> None \\<longrightarrow>\n  (\\<forall>u\\<in>range D. (D y, u) \\<in> I)\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> Y \\<Longrightarrow> (D y, D x) \\<in> I", "have \"y \\<noteq> None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y \\<noteq> None", "using N"], ["proof (prove)\nusing this:\n  (xs @ [y], {}) \\<in> failures P \\<and>\n  None \\<notin> set xs \\<and> None \\<noteq> y\n\ngoal (1 subgoal):\n 1. y \\<noteq> None", "by (rule_tac not_sym, simp)"], ["proof (state)\nthis:\n  y \\<noteq> None\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> Y \\<Longrightarrow> (D y, D x) \\<in> I", "ultimately"], ["proof (chain)\npicking this:\n  (D y, D None) \\<in> I \\<and> y \\<noteq> None \\<longrightarrow>\n  (\\<forall>u\\<in>range D. (D y, u) \\<in> I)\n  y \\<noteq> None", "have \"\\<forall>u \\<in> range D. (D y, u) \\<in> I\""], ["proof (prove)\nusing this:\n  (D y, D None) \\<in> I \\<and> y \\<noteq> None \\<longrightarrow>\n  (\\<forall>u\\<in>range D. (D y, u) \\<in> I)\n  y \\<noteq> None\n\ngoal (1 subgoal):\n 1. \\<forall>u\\<in>range D. (D y, u) \\<in> I", "using T"], ["proof (prove)\nusing this:\n  (D y, D None) \\<in> I \\<and> y \\<noteq> None \\<longrightarrow>\n  (\\<forall>u\\<in>range D. (D y, u) \\<in> I)\n  y \\<noteq> None\n  (D y, D None) \\<in> I\n\ngoal (1 subgoal):\n 1. \\<forall>u\\<in>range D. (D y, u) \\<in> I", "by simp"], ["proof (state)\nthis:\n  \\<forall>u\\<in>range D. (D y, u) \\<in> I\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> Y \\<Longrightarrow> (D y, D x) \\<in> I", "thus \"(D y, D x) \\<in> I\""], ["proof (prove)\nusing this:\n  \\<forall>u\\<in>range D. (D y, u) \\<in> I\n\ngoal (1 subgoal):\n 1. (D y, D x) \\<in> I", "by simp"], ["proof (state)\nthis:\n  (D y, D x) \\<in> I\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ipurge_ref_aux I D (insert (D y) (sinks I D (D y) (drop (length xs) ws)))\n   ys Y =\n  {}\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<lbrakk>u \\<in> sinks I D (D y) (drop (length xs) ws);\n        (u, D None) \\<in> I\\<rbrakk>\n       \\<Longrightarrow> ipurge_ref_aux I D\n                          (insert (D y)\n                            (sinks I D (D y) (drop (length xs) ws)))\n                          ys Y =\n                         {}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<lbrakk>u \\<in> sinks I D (D y) (drop (length xs) ws);\n        (u, D None) \\<in> I\\<rbrakk>\n       \\<Longrightarrow> ipurge_ref_aux I D\n                          (insert (D y)\n                            (sinks I D (D y) (drop (length xs) ws)))\n                          ys Y =\n                         {}", "fix u"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<lbrakk>u \\<in> sinks I D (D y) (drop (length xs) ws);\n        (u, D None) \\<in> I\\<rbrakk>\n       \\<Longrightarrow> ipurge_ref_aux I D\n                          (insert (D y)\n                            (sinks I D (D y) (drop (length xs) ws)))\n                          ys Y =\n                         {}", "assume\n            T: \"u \\<in> sinks I D (D y) ?ws'\" and\n            U: \"(u, D None) \\<in> I\""], ["proof (state)\nthis:\n  u \\<in> sinks I D (D y) (drop (length xs) ws)\n  (u, D None) \\<in> I\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<lbrakk>u \\<in> sinks I D (D y) (drop (length xs) ws);\n        (u, D None) \\<in> I\\<rbrakk>\n       \\<Longrightarrow> ipurge_ref_aux I D\n                          (insert (D y)\n                            (sinks I D (D y) (drop (length xs) ws)))\n                          ys Y =\n                         {}", "have \"\\<exists>w \\<in> set ?ws'. u = D w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>w\\<in>set (drop (length xs) ws). u = D w", "using T"], ["proof (prove)\nusing this:\n  u \\<in> sinks I D (D y) (drop (length xs) ws)\n\ngoal (1 subgoal):\n 1. \\<exists>w\\<in>set (drop (length xs) ws). u = D w", "by (rule sinks_elem)"], ["proof (state)\nthis:\n  \\<exists>w\\<in>set (drop (length xs) ws). u = D w\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<lbrakk>u \\<in> sinks I D (D y) (drop (length xs) ws);\n        (u, D None) \\<in> I\\<rbrakk>\n       \\<Longrightarrow> ipurge_ref_aux I D\n                          (insert (D y)\n                            (sinks I D (D y) (drop (length xs) ws)))\n                          ys Y =\n                         {}", "then"], ["proof (chain)\npicking this:\n  \\<exists>w\\<in>set (drop (length xs) ws). u = D w", "obtain w where V: \"w \\<in> set ?ws'\" and W: \"u = D w\""], ["proof (prove)\nusing this:\n  \\<exists>w\\<in>set (drop (length xs) ws). u = D w\n\ngoal (1 subgoal):\n 1. (\\<And>w.\n        \\<lbrakk>w \\<in> set (drop (length xs) ws); u = D w\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  w \\<in> set (drop (length xs) ws)\n  u = D w\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<lbrakk>u \\<in> sinks I D (D y) (drop (length xs) ws);\n        (u, D None) \\<in> I\\<rbrakk>\n       \\<Longrightarrow> ipurge_ref_aux I D\n                          (insert (D y)\n                            (sinks I D (D y) (drop (length xs) ws)))\n                          ys Y =\n                         {}", "have X: \"w \\<noteq> None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. w \\<noteq> None", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. w = None \\<Longrightarrow> False", "assume \"w = None\""], ["proof (state)\nthis:\n  w = None\n\ngoal (1 subgoal):\n 1. w = None \\<Longrightarrow> False", "hence \"None \\<in> set ?ws'\""], ["proof (prove)\nusing this:\n  w = None\n\ngoal (1 subgoal):\n 1. None \\<in> set (drop (length xs) ws)", "using V"], ["proof (prove)\nusing this:\n  w = None\n  w \\<in> set (drop (length xs) ws)\n\ngoal (1 subgoal):\n 1. None \\<in> set (drop (length xs) ws)", "by simp"], ["proof (state)\nthis:\n  None \\<in> set (drop (length xs) ws)\n\ngoal (1 subgoal):\n 1. w = None \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  None \\<in> set (drop (length xs) ws)\n\ngoal (1 subgoal):\n 1. w = None \\<Longrightarrow> False", "have \"None \\<notin> set ?ws'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. None \\<notin> set (drop (length xs) ws)", "using R"], ["proof (prove)\nusing this:\n  None \\<notin> set (drop (length xs) ws)\n\ngoal (1 subgoal):\n 1. None \\<notin> set (drop (length xs) ws)", "by simp"], ["proof (state)\nthis:\n  None \\<notin> set (drop (length xs) ws)\n\ngoal (1 subgoal):\n 1. w = None \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  None \\<in> set (drop (length xs) ws)\n  None \\<notin> set (drop (length xs) ws)", "show False"], ["proof (prove)\nusing this:\n  None \\<in> set (drop (length xs) ws)\n  None \\<notin> set (drop (length xs) ws)\n\ngoal (1 subgoal):\n 1. False", "by contradiction"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  w \\<noteq> None\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<lbrakk>u \\<in> sinks I D (D y) (drop (length xs) ws);\n        (u, D None) \\<in> I\\<rbrakk>\n       \\<Longrightarrow> ipurge_ref_aux I D\n                          (insert (D y)\n                            (sinks I D (D y) (drop (length xs) ws)))\n                          ys Y =\n                         {}", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. ipurge_ref_aux I D\n     (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys Y =\n    {}", "proof (rule ipurge_ref_aux_empty [of u])"], ["proof (state)\ngoal (2 subgoals):\n 1. u \\<in> sinks_aux I D\n             (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys\n 2. \\<And>x. x \\<in> Y \\<Longrightarrow> (u, D x) \\<in> I", "have \"?U \\<subseteq> sinks_aux I D ?U ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. insert (D y) (sinks I D (D y) (drop (length xs) ws))\n    \\<subseteq> sinks_aux I D\n                 (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys", "by (rule sinks_aux_subset)"], ["proof (state)\nthis:\n  insert (D y) (sinks I D (D y) (drop (length xs) ws))\n  \\<subseteq> sinks_aux I D\n               (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys\n\ngoal (2 subgoals):\n 1. u \\<in> sinks_aux I D\n             (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys\n 2. \\<And>x. x \\<in> Y \\<Longrightarrow> (u, D x) \\<in> I", "moreover"], ["proof (state)\nthis:\n  insert (D y) (sinks I D (D y) (drop (length xs) ws))\n  \\<subseteq> sinks_aux I D\n               (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys\n\ngoal (2 subgoals):\n 1. u \\<in> sinks_aux I D\n             (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys\n 2. \\<And>x. x \\<in> Y \\<Longrightarrow> (u, D x) \\<in> I", "have \"u \\<in> ?U\""], ["proof (prove)\ngoal (1 subgoal):\n 1. u \\<in> insert (D y) (sinks I D (D y) (drop (length xs) ws))", "using T"], ["proof (prove)\nusing this:\n  u \\<in> sinks I D (D y) (drop (length xs) ws)\n\ngoal (1 subgoal):\n 1. u \\<in> insert (D y) (sinks I D (D y) (drop (length xs) ws))", "by simp"], ["proof (state)\nthis:\n  u \\<in> insert (D y) (sinks I D (D y) (drop (length xs) ws))\n\ngoal (2 subgoals):\n 1. u \\<in> sinks_aux I D\n             (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys\n 2. \\<And>x. x \\<in> Y \\<Longrightarrow> (u, D x) \\<in> I", "ultimately"], ["proof (chain)\npicking this:\n  insert (D y) (sinks I D (D y) (drop (length xs) ws))\n  \\<subseteq> sinks_aux I D\n               (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys\n  u \\<in> insert (D y) (sinks I D (D y) (drop (length xs) ws))", "show \"u \\<in> sinks_aux I D ?U ys\""], ["proof (prove)\nusing this:\n  insert (D y) (sinks I D (D y) (drop (length xs) ws))\n  \\<subseteq> sinks_aux I D\n               (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys\n  u \\<in> insert (D y) (sinks I D (D y) (drop (length xs) ws))\n\ngoal (1 subgoal):\n 1. u \\<in> sinks_aux I D\n             (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys", ".."], ["proof (state)\nthis:\n  u \\<in> sinks_aux I D\n           (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> Y \\<Longrightarrow> (u, D x) \\<in> I", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> Y \\<Longrightarrow> (u, D x) \\<in> I", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> Y \\<Longrightarrow> (u, D x) \\<in> I", "have \"(D w, D None) \\<in> I \\<and> w \\<noteq> None \\<longrightarrow>\n              (\\<forall>v \\<in> range D. (D w, v) \\<in> I)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (D w, D None) \\<in> I \\<and> w \\<noteq> None \\<longrightarrow>\n    (\\<forall>v\\<in>range D. (D w, v) \\<in> I)", "using A"], ["proof (prove)\nusing this:\n  secure_termination I D\n\ngoal (1 subgoal):\n 1. (D w, D None) \\<in> I \\<and> w \\<noteq> None \\<longrightarrow>\n    (\\<forall>v\\<in>range D. (D w, v) \\<in> I)", "by (simp add: secure_termination_def)"], ["proof (state)\nthis:\n  (D w, D None) \\<in> I \\<and> w \\<noteq> None \\<longrightarrow>\n  (\\<forall>v\\<in>range D. (D w, v) \\<in> I)\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> Y \\<Longrightarrow> (u, D x) \\<in> I", "moreover"], ["proof (state)\nthis:\n  (D w, D None) \\<in> I \\<and> w \\<noteq> None \\<longrightarrow>\n  (\\<forall>v\\<in>range D. (D w, v) \\<in> I)\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> Y \\<Longrightarrow> (u, D x) \\<in> I", "have \"(D w, D None) \\<in> I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (D w, D None) \\<in> I", "using U and W"], ["proof (prove)\nusing this:\n  (u, D None) \\<in> I\n  u = D w\n\ngoal (1 subgoal):\n 1. (D w, D None) \\<in> I", "by simp"], ["proof (state)\nthis:\n  (D w, D None) \\<in> I\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> Y \\<Longrightarrow> (u, D x) \\<in> I", "ultimately"], ["proof (chain)\npicking this:\n  (D w, D None) \\<in> I \\<and> w \\<noteq> None \\<longrightarrow>\n  (\\<forall>v\\<in>range D. (D w, v) \\<in> I)\n  (D w, D None) \\<in> I", "have \"\\<forall>v \\<in> range D. (D w, v) \\<in> I\""], ["proof (prove)\nusing this:\n  (D w, D None) \\<in> I \\<and> w \\<noteq> None \\<longrightarrow>\n  (\\<forall>v\\<in>range D. (D w, v) \\<in> I)\n  (D w, D None) \\<in> I\n\ngoal (1 subgoal):\n 1. \\<forall>v\\<in>range D. (D w, v) \\<in> I", "using X"], ["proof (prove)\nusing this:\n  (D w, D None) \\<in> I \\<and> w \\<noteq> None \\<longrightarrow>\n  (\\<forall>v\\<in>range D. (D w, v) \\<in> I)\n  (D w, D None) \\<in> I\n  w \\<noteq> None\n\ngoal (1 subgoal):\n 1. \\<forall>v\\<in>range D. (D w, v) \\<in> I", "by simp"], ["proof (state)\nthis:\n  \\<forall>v\\<in>range D. (D w, v) \\<in> I\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> Y \\<Longrightarrow> (u, D x) \\<in> I", "thus \"(u, D x) \\<in> I\""], ["proof (prove)\nusing this:\n  \\<forall>v\\<in>range D. (D w, v) \\<in> I\n\ngoal (1 subgoal):\n 1. (u, D x) \\<in> I", "using W"], ["proof (prove)\nusing this:\n  \\<forall>v\\<in>range D. (D w, v) \\<in> I\n  u = D w\n\ngoal (1 subgoal):\n 1. (u, D x) \\<in> I", "by simp"], ["proof (state)\nthis:\n  (u, D x) \\<in> I\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ipurge_ref_aux I D (insert (D y) (sinks I D (D y) (drop (length xs) ws)))\n   ys Y =\n  {}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ipurge_ref_aux I D (insert (D y) (sinks I D (D y) (drop (length xs) ws)))\n   ys Y =\n  {}\n\ngoal (2 subgoals):\n 1. (D y, D None) \\<in> I \\<or>\n    (\\<exists>u\\<in>sinks I D (D y) (drop (length xs) ws).\n        (u, D None) \\<in> I) \\<Longrightarrow>\n    (xs @\n     y #\n     ipurge_tr I D (D y) (drop (length xs) ws) @\n     ipurge_tr_aux I D\n      (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys,\n     ipurge_ref_aux I D\n      (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys Y)\n    \\<in> seq_comp_failures P Q\n 2. \\<not> ((D y, D None) \\<in> I \\<or>\n            (\\<exists>u\\<in>sinks I D (D y) (drop (length xs) ws).\n                (u, D None) \\<in> I)) \\<Longrightarrow>\n    (xs @\n     y #\n     ipurge_tr I D (D y) (drop (length xs) ws) @\n     ipurge_tr_aux I D\n      (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys,\n     ipurge_ref_aux I D\n      (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys Y)\n    \\<in> seq_comp_failures P Q", "ultimately"], ["proof (chain)\npicking this:\n  ipurge_tr_aux I D (insert (D y) (sinks I D (D y) (drop (length xs) ws)))\n   ys =\n  []\n  ipurge_ref_aux I D (insert (D y) (sinks I D (D y) (drop (length xs) ws)))\n   ys Y =\n  {}", "show ?thesis"], ["proof (prove)\nusing this:\n  ipurge_tr_aux I D (insert (D y) (sinks I D (D y) (drop (length xs) ws)))\n   ys =\n  []\n  ipurge_ref_aux I D (insert (D y) (sinks I D (D y) (drop (length xs) ws)))\n   ys Y =\n  {}\n\ngoal (1 subgoal):\n 1. (xs @\n     y #\n     ipurge_tr I D (D y) (drop (length xs) ws) @\n     ipurge_tr_aux I D\n      (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys,\n     ipurge_ref_aux I D\n      (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys Y)\n    \\<in> seq_comp_failures P Q", "proof simp"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>ipurge_tr_aux I D\n              (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys =\n             [];\n     ipurge_ref_aux I D\n      (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys Y =\n     {}\\<rbrakk>\n    \\<Longrightarrow> (xs @ y # ipurge_tr I D (D y) (drop (length xs) ws),\n                       {})\n                      \\<in> seq_comp_failures P Q", "have \"D None \\<in> sinks I D (D y) (?ws' @ [None])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. D None \\<in> sinks I D (D y) (drop (length xs) ws @ [None])", "using S"], ["proof (prove)\nusing this:\n  (D y, D None) \\<in> I \\<or>\n  (\\<exists>u\\<in>sinks I D (D y) (drop (length xs) ws).\n      (u, D None) \\<in> I)\n\ngoal (1 subgoal):\n 1. D None \\<in> sinks I D (D y) (drop (length xs) ws @ [None])", "by (simp only: sinks_interference_eq)"], ["proof (state)\nthis:\n  D None \\<in> sinks I D (D y) (drop (length xs) ws @ [None])\n\ngoal (1 subgoal):\n 1. \\<lbrakk>ipurge_tr_aux I D\n              (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys =\n             [];\n     ipurge_ref_aux I D\n      (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys Y =\n     {}\\<rbrakk>\n    \\<Longrightarrow> (xs @ y # ipurge_tr I D (D y) (drop (length xs) ws),\n                       {})\n                      \\<in> seq_comp_failures P Q", "hence \"(xs @ y # ipurge_tr I D (D y) ?ws', {}) \\<in> failures P\""], ["proof (prove)\nusing this:\n  D None \\<in> sinks I D (D y) (drop (length xs) ws @ [None])\n\ngoal (1 subgoal):\n 1. (xs @ y # ipurge_tr I D (D y) (drop (length xs) ws), {})\n    \\<in> failures P", "using Q"], ["proof (prove)\nusing this:\n  D None \\<in> sinks I D (D y) (drop (length xs) ws @ [None])\n  (xs @ y # ipurge_tr I D (D y) (drop (length xs) ws @ [None]), {})\n  \\<in> failures P\n\ngoal (1 subgoal):\n 1. (xs @ y # ipurge_tr I D (D y) (drop (length xs) ws), {})\n    \\<in> failures P", "by simp"], ["proof (state)\nthis:\n  (xs @ y # ipurge_tr I D (D y) (drop (length xs) ws), {}) \\<in> failures P\n\ngoal (1 subgoal):\n 1. \\<lbrakk>ipurge_tr_aux I D\n              (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys =\n             [];\n     ipurge_ref_aux I D\n      (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys Y =\n     {}\\<rbrakk>\n    \\<Longrightarrow> (xs @ y # ipurge_tr I D (D y) (drop (length xs) ws),\n                       {})\n                      \\<in> seq_comp_failures P Q", "moreover"], ["proof (state)\nthis:\n  (xs @ y # ipurge_tr I D (D y) (drop (length xs) ws), {}) \\<in> failures P\n\ngoal (1 subgoal):\n 1. \\<lbrakk>ipurge_tr_aux I D\n              (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys =\n             [];\n     ipurge_ref_aux I D\n      (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys Y =\n     {}\\<rbrakk>\n    \\<Longrightarrow> (xs @ y # ipurge_tr I D (D y) (drop (length xs) ws),\n                       {})\n                      \\<in> seq_comp_failures P Q", "have \"None \\<notin> set (xs @ y # ipurge_tr I D (D y) ?ws')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. None \\<notin> set (xs @ y # ipurge_tr I D (D y) (drop (length xs) ws))", "proof (simp add: N)"], ["proof (state)\ngoal (1 subgoal):\n 1. None \\<notin> set (ipurge_tr I D (D y) (drop (length xs) ws))", "have \"set (ipurge_tr I D (D y) ?ws') \\<subseteq> set ?ws'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (ipurge_tr I D (D y) (drop (length xs) ws))\n    \\<subseteq> set (drop (length xs) ws)", "by (rule ipurge_tr_set)"], ["proof (state)\nthis:\n  set (ipurge_tr I D (D y) (drop (length xs) ws))\n  \\<subseteq> set (drop (length xs) ws)\n\ngoal (1 subgoal):\n 1. None \\<notin> set (ipurge_tr I D (D y) (drop (length xs) ws))", "thus \"None \\<notin> set (ipurge_tr I D (D y) ?ws')\""], ["proof (prove)\nusing this:\n  set (ipurge_tr I D (D y) (drop (length xs) ws))\n  \\<subseteq> set (drop (length xs) ws)\n\ngoal (1 subgoal):\n 1. None \\<notin> set (ipurge_tr I D (D y) (drop (length xs) ws))", "using R"], ["proof (prove)\nusing this:\n  set (ipurge_tr I D (D y) (drop (length xs) ws))\n  \\<subseteq> set (drop (length xs) ws)\n  None \\<notin> set (drop (length xs) ws)\n\ngoal (1 subgoal):\n 1. None \\<notin> set (ipurge_tr I D (D y) (drop (length xs) ws))", "by (rule contra_subsetD)"], ["proof (state)\nthis:\n  None \\<notin> set (ipurge_tr I D (D y) (drop (length xs) ws))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  None \\<notin> set (xs @ y # ipurge_tr I D (D y) (drop (length xs) ws))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>ipurge_tr_aux I D\n              (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys =\n             [];\n     ipurge_ref_aux I D\n      (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys Y =\n     {}\\<rbrakk>\n    \\<Longrightarrow> (xs @ y # ipurge_tr I D (D y) (drop (length xs) ws),\n                       {})\n                      \\<in> seq_comp_failures P Q", "ultimately"], ["proof (chain)\npicking this:\n  (xs @ y # ipurge_tr I D (D y) (drop (length xs) ws), {}) \\<in> failures P\n  None \\<notin> set (xs @ y # ipurge_tr I D (D y) (drop (length xs) ws))", "show \"(xs @ y # ipurge_tr I D (D y) ?ws', {})\n            \\<in> seq_comp_failures P Q\""], ["proof (prove)\nusing this:\n  (xs @ y # ipurge_tr I D (D y) (drop (length xs) ws), {}) \\<in> failures P\n  None \\<notin> set (xs @ y # ipurge_tr I D (D y) (drop (length xs) ws))\n\ngoal (1 subgoal):\n 1. (xs @ y # ipurge_tr I D (D y) (drop (length xs) ws), {})\n    \\<in> seq_comp_failures P Q", "by (rule SCF_R1 [OF P])"], ["proof (state)\nthis:\n  (xs @ y # ipurge_tr I D (D y) (drop (length xs) ws), {})\n  \\<in> seq_comp_failures P Q\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (xs @\n   y #\n   ipurge_tr I D (D y) (drop (length xs) ws) @\n   ipurge_tr_aux I D (insert (D y) (sinks I D (D y) (drop (length xs) ws)))\n    ys,\n   ipurge_ref_aux I D (insert (D y) (sinks I D (D y) (drop (length xs) ws)))\n    ys Y)\n  \\<in> seq_comp_failures P Q\n\ngoal (1 subgoal):\n 1. \\<not> ((D y, D None) \\<in> I \\<or>\n            (\\<exists>u\\<in>sinks I D (D y) (drop (length xs) ws).\n                (u, D None) \\<in> I)) \\<Longrightarrow>\n    (xs @\n     y #\n     ipurge_tr I D (D y) (drop (length xs) ws) @\n     ipurge_tr_aux I D\n      (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys,\n     ipurge_ref_aux I D\n      (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys Y)\n    \\<in> seq_comp_failures P Q", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> ((D y, D None) \\<in> I \\<or>\n            (\\<exists>u\\<in>sinks I D (D y) (drop (length xs) ws).\n                (u, D None) \\<in> I)) \\<Longrightarrow>\n    (xs @\n     y #\n     ipurge_tr I D (D y) (drop (length xs) ws) @\n     ipurge_tr_aux I D\n      (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys,\n     ipurge_ref_aux I D\n      (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys Y)\n    \\<in> seq_comp_failures P Q", "assume \"\\<not> ((D y, D None) \\<in> I \\<or>\n          (\\<exists>u \\<in> sinks I D (D y) ?ws'. (u, D None) \\<in> I))\""], ["proof (state)\nthis:\n  \\<not> ((D y, D None) \\<in> I \\<or>\n          (\\<exists>u\\<in>sinks I D (D y) (drop (length xs) ws).\n              (u, D None) \\<in> I))\n\ngoal (1 subgoal):\n 1. \\<not> ((D y, D None) \\<in> I \\<or>\n            (\\<exists>u\\<in>sinks I D (D y) (drop (length xs) ws).\n                (u, D None) \\<in> I)) \\<Longrightarrow>\n    (xs @\n     y #\n     ipurge_tr I D (D y) (drop (length xs) ws) @\n     ipurge_tr_aux I D\n      (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys,\n     ipurge_ref_aux I D\n      (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys Y)\n    \\<in> seq_comp_failures P Q", "hence \"D None \\<notin> sinks I D (D y) (?ws' @ [None])\""], ["proof (prove)\nusing this:\n  \\<not> ((D y, D None) \\<in> I \\<or>\n          (\\<exists>u\\<in>sinks I D (D y) (drop (length xs) ws).\n              (u, D None) \\<in> I))\n\ngoal (1 subgoal):\n 1. D None \\<notin> sinks I D (D y) (drop (length xs) ws @ [None])", "by (simp only: sinks_interference_eq, simp)"], ["proof (state)\nthis:\n  D None \\<notin> sinks I D (D y) (drop (length xs) ws @ [None])\n\ngoal (1 subgoal):\n 1. \\<not> ((D y, D None) \\<in> I \\<or>\n            (\\<exists>u\\<in>sinks I D (D y) (drop (length xs) ws).\n                (u, D None) \\<in> I)) \\<Longrightarrow>\n    (xs @\n     y #\n     ipurge_tr I D (D y) (drop (length xs) ws) @\n     ipurge_tr_aux I D\n      (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys,\n     ipurge_ref_aux I D\n      (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys Y)\n    \\<in> seq_comp_failures P Q", "hence \"(xs @ y # ipurge_tr I D (D y) ?ws' @ [None], {}) \\<in> failures P\""], ["proof (prove)\nusing this:\n  D None \\<notin> sinks I D (D y) (drop (length xs) ws @ [None])\n\ngoal (1 subgoal):\n 1. (xs @ y # ipurge_tr I D (D y) (drop (length xs) ws) @ [None], {})\n    \\<in> failures P", "using Q"], ["proof (prove)\nusing this:\n  D None \\<notin> sinks I D (D y) (drop (length xs) ws @ [None])\n  (xs @ y # ipurge_tr I D (D y) (drop (length xs) ws @ [None]), {})\n  \\<in> failures P\n\ngoal (1 subgoal):\n 1. (xs @ y # ipurge_tr I D (D y) (drop (length xs) ws) @ [None], {})\n    \\<in> failures P", "by simp"], ["proof (state)\nthis:\n  (xs @ y # ipurge_tr I D (D y) (drop (length xs) ws) @ [None], {})\n  \\<in> failures P\n\ngoal (1 subgoal):\n 1. \\<not> ((D y, D None) \\<in> I \\<or>\n            (\\<exists>u\\<in>sinks I D (D y) (drop (length xs) ws).\n                (u, D None) \\<in> I)) \\<Longrightarrow>\n    (xs @\n     y #\n     ipurge_tr I D (D y) (drop (length xs) ws) @\n     ipurge_tr_aux I D\n      (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys,\n     ipurge_ref_aux I D\n      (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys Y)\n    \\<in> seq_comp_failures P Q", "hence \"xs @ y # ipurge_tr I D (D y) ?ws' @ [None] \\<in> traces P\""], ["proof (prove)\nusing this:\n  (xs @ y # ipurge_tr I D (D y) (drop (length xs) ws) @ [None], {})\n  \\<in> failures P\n\ngoal (1 subgoal):\n 1. xs @ y # ipurge_tr I D (D y) (drop (length xs) ws) @ [None]\n    \\<in> traces P", "by (rule failures_traces)"], ["proof (state)\nthis:\n  xs @ y # ipurge_tr I D (D y) (drop (length xs) ws) @ [None] \\<in> traces P\n\ngoal (1 subgoal):\n 1. \\<not> ((D y, D None) \\<in> I \\<or>\n            (\\<exists>u\\<in>sinks I D (D y) (drop (length xs) ws).\n                (u, D None) \\<in> I)) \\<Longrightarrow>\n    (xs @\n     y #\n     ipurge_tr I D (D y) (drop (length xs) ws) @\n     ipurge_tr_aux I D\n      (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys,\n     ipurge_ref_aux I D\n      (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys Y)\n    \\<in> seq_comp_failures P Q", "hence \"xs @ y # ipurge_tr I D (D y) ?ws' \\<in> sentences P\""], ["proof (prove)\nusing this:\n  xs @ y # ipurge_tr I D (D y) (drop (length xs) ws) @ [None] \\<in> traces P\n\ngoal (1 subgoal):\n 1. xs @ y # ipurge_tr I D (D y) (drop (length xs) ws) \\<in> sentences P", "by (simp add: sentences_def)"], ["proof (state)\nthis:\n  xs @ y # ipurge_tr I D (D y) (drop (length xs) ws) \\<in> sentences P\n\ngoal (1 subgoal):\n 1. \\<not> ((D y, D None) \\<in> I \\<or>\n            (\\<exists>u\\<in>sinks I D (D y) (drop (length xs) ws).\n                (u, D None) \\<in> I)) \\<Longrightarrow>\n    (xs @\n     y #\n     ipurge_tr I D (D y) (drop (length xs) ws) @\n     ipurge_tr_aux I D\n      (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys,\n     ipurge_ref_aux I D\n      (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys Y)\n    \\<in> seq_comp_failures P Q", "thus ?thesis"], ["proof (prove)\nusing this:\n  xs @ y # ipurge_tr I D (D y) (drop (length xs) ws) \\<in> sentences P\n\ngoal (1 subgoal):\n 1. (xs @\n     y #\n     ipurge_tr I D (D y) (drop (length xs) ws) @\n     ipurge_tr_aux I D\n      (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys,\n     ipurge_ref_aux I D\n      (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys Y)\n    \\<in> seq_comp_failures P Q", "using P"], ["proof (prove)\nusing this:\n  xs @ y # ipurge_tr I D (D y) (drop (length xs) ws) \\<in> sentences P\n  xs @ y # ipurge_tr I D (D y) (drop (length xs) ws) \\<notin> sentences P\n\ngoal (1 subgoal):\n 1. (xs @\n     y #\n     ipurge_tr I D (D y) (drop (length xs) ws) @\n     ipurge_tr_aux I D\n      (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys,\n     ipurge_ref_aux I D\n      (insert (D y) (sinks I D (D y) (drop (length xs) ws))) ys Y)\n    \\<in> seq_comp_failures P Q", "by contradiction"], ["proof (state)\nthis:\n  (xs @\n   y #\n   ipurge_tr I D (D y) (drop (length xs) ws) @\n   ipurge_tr_aux I D (insert (D y) (sinks I D (D y) (drop (length xs) ws)))\n    ys,\n   ipurge_ref_aux I D (insert (D y) (sinks I D (D y) (drop (length xs) ws)))\n    ys Y)\n  \\<in> seq_comp_failures P Q\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (xs @\n   y #\n   ipurge_tr I D (D y) (drop (length xs) ws) @\n   ipurge_tr_aux I D (insert (D y) (sinks I D (D y) (drop (length xs) ws)))\n    ys,\n   ipurge_ref_aux I D (insert (D y) (sinks I D (D y) (drop (length xs) ws)))\n    ys Y)\n  \\<in> seq_comp_failures P Q\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs Y)\n  \\<in> seq_comp_failures P Q\n\ngoal (1 subgoal):\n 1. \\<not> length xs < length ws \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs Y)\n    \\<in> seq_comp_failures P Q", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> length xs < length ws \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs Y)\n    \\<in> seq_comp_failures P Q", "case False"], ["proof (state)\nthis:\n  \\<not> length xs < length ws\n\ngoal (1 subgoal):\n 1. \\<not> length xs < length ws \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs Y)\n    \\<in> seq_comp_failures P Q", "have \"\\<forall>n \\<in> {0<..length (xs @ [y])}. \\<forall>W \\<in> R n.\n      take (length (xs @ [y]) - n) (xs @ [y]) \\<in> sentences P \\<and>\n      (drop (length (xs @ [y]) - n) (xs @ [y]), W) \\<in> failures Q\"\n      (is \"\\<forall>n \\<in> _. \\<forall>W \\<in> _. ?T n W\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n\\<in>{0<..length (xs @ [y])}.\n       \\<forall>W\\<in>R n.\n          take (length (xs @ [y]) - n) (xs @ [y]) \\<in> sentences P \\<and>\n          (drop (length (xs @ [y]) - n) (xs @ [y]), W) \\<in> failures Q", "using J"], ["proof (prove)\nusing this:\n  {} = (\\<Union>n\\<le>length (xs @ [y]). \\<Union>W\\<in>R n. W) \\<and>\n  (\\<forall>W\\<in>R 0.\n      xs @ [y] \\<notin> sentences P \\<and>\n      None \\<notin> set (xs @ [y]) \\<and>\n      (xs @ [y], W) \\<in> failures P \\<or>\n      xs @ [y] \\<in> sentences P \\<and>\n      (\\<exists>U V.\n          (xs @ [y], U) \\<in> failures P \\<and>\n          ([], V) \\<in> failures Q \\<and>\n          W = insert None U \\<inter> V)) \\<and>\n  (\\<forall>n\\<in>{0<..length (xs @ [y])}.\n      \\<forall>W\\<in>R n.\n         take (length (xs @ [y]) - n) (xs @ [y]) \\<in> sentences P \\<and>\n         (drop (length (xs @ [y]) - n) (xs @ [y]), W)\n         \\<in> failures Q) \\<and>\n  (\\<exists>n\\<in>{..length (xs @ [y])}. \\<exists>W. W \\<in> R n)\n\ngoal (1 subgoal):\n 1. \\<forall>n\\<in>{0<..length (xs @ [y])}.\n       \\<forall>W\\<in>R n.\n          take (length (xs @ [y]) - n) (xs @ [y]) \\<in> sentences P \\<and>\n          (drop (length (xs @ [y]) - n) (xs @ [y]), W) \\<in> failures Q", "by simp"], ["proof (state)\nthis:\n  \\<forall>n\\<in>{0<..length (xs @ [y])}.\n     \\<forall>W\\<in>R n.\n        take (length (xs @ [y]) - n) (xs @ [y]) \\<in> sentences P \\<and>\n        (drop (length (xs @ [y]) - n) (xs @ [y]), W) \\<in> failures Q\n\ngoal (1 subgoal):\n 1. \\<not> length xs < length ws \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs Y)\n    \\<in> seq_comp_failures P Q", "moreover"], ["proof (state)\nthis:\n  \\<forall>n\\<in>{0<..length (xs @ [y])}.\n     \\<forall>W\\<in>R n.\n        take (length (xs @ [y]) - n) (xs @ [y]) \\<in> sentences P \\<and>\n        (drop (length (xs @ [y]) - n) (xs @ [y]), W) \\<in> failures Q\n\ngoal (1 subgoal):\n 1. \\<not> length xs < length ws \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs Y)\n    \\<in> seq_comp_failures P Q", "have \"n \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n \\<noteq> 0", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. n = 0 \\<Longrightarrow> False", "have \"\\<forall>W \\<in> R 0.\n        xs @ [y] \\<notin> sentences P \\<and>\n          None \\<notin> set (xs @ [y]) \\<and> (xs @ [y], W) \\<in> failures P \\<or>\n        xs @ [y] \\<in> sentences P \\<and>\n          (\\<exists>U V. (xs @ [y], U) \\<in> failures P \\<and> ([], V) \\<in> failures Q \\<and>\n            W = insert None U \\<inter> V)\"\n        (is \"\\<forall>W \\<in> _. ?T' W\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>W\\<in>R 0.\n       xs @ [y] \\<notin> sentences P \\<and>\n       None \\<notin> set (xs @ [y]) \\<and>\n       (xs @ [y], W) \\<in> failures P \\<or>\n       xs @ [y] \\<in> sentences P \\<and>\n       (\\<exists>U V.\n           (xs @ [y], U) \\<in> failures P \\<and>\n           ([], V) \\<in> failures Q \\<and> W = insert None U \\<inter> V)", "using J"], ["proof (prove)\nusing this:\n  {} = (\\<Union>n\\<le>length (xs @ [y]). \\<Union>W\\<in>R n. W) \\<and>\n  (\\<forall>W\\<in>R 0.\n      xs @ [y] \\<notin> sentences P \\<and>\n      None \\<notin> set (xs @ [y]) \\<and>\n      (xs @ [y], W) \\<in> failures P \\<or>\n      xs @ [y] \\<in> sentences P \\<and>\n      (\\<exists>U V.\n          (xs @ [y], U) \\<in> failures P \\<and>\n          ([], V) \\<in> failures Q \\<and>\n          W = insert None U \\<inter> V)) \\<and>\n  (\\<forall>n\\<in>{0<..length (xs @ [y])}.\n      \\<forall>W\\<in>R n.\n         take (length (xs @ [y]) - n) (xs @ [y]) \\<in> sentences P \\<and>\n         (drop (length (xs @ [y]) - n) (xs @ [y]), W)\n         \\<in> failures Q) \\<and>\n  (\\<exists>n\\<in>{..length (xs @ [y])}. \\<exists>W. W \\<in> R n)\n\ngoal (1 subgoal):\n 1. \\<forall>W\\<in>R 0.\n       xs @ [y] \\<notin> sentences P \\<and>\n       None \\<notin> set (xs @ [y]) \\<and>\n       (xs @ [y], W) \\<in> failures P \\<or>\n       xs @ [y] \\<in> sentences P \\<and>\n       (\\<exists>U V.\n           (xs @ [y], U) \\<in> failures P \\<and>\n           ([], V) \\<in> failures Q \\<and> W = insert None U \\<inter> V)", "by blast"], ["proof (state)\nthis:\n  \\<forall>W\\<in>R 0.\n     xs @ [y] \\<notin> sentences P \\<and>\n     None \\<notin> set (xs @ [y]) \\<and>\n     (xs @ [y], W) \\<in> failures P \\<or>\n     xs @ [y] \\<in> sentences P \\<and>\n     (\\<exists>U V.\n         (xs @ [y], U) \\<in> failures P \\<and>\n         ([], V) \\<in> failures Q \\<and> W = insert None U \\<inter> V)\n\ngoal (1 subgoal):\n 1. n = 0 \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  \\<forall>W\\<in>R 0.\n     xs @ [y] \\<notin> sentences P \\<and>\n     None \\<notin> set (xs @ [y]) \\<and>\n     (xs @ [y], W) \\<in> failures P \\<or>\n     xs @ [y] \\<in> sentences P \\<and>\n     (\\<exists>U V.\n         (xs @ [y], U) \\<in> failures P \\<and>\n         ([], V) \\<in> failures Q \\<and> W = insert None U \\<inter> V)\n\ngoal (1 subgoal):\n 1. n = 0 \\<Longrightarrow> False", "assume \"n = 0\""], ["proof (state)\nthis:\n  n = 0\n\ngoal (1 subgoal):\n 1. n = 0 \\<Longrightarrow> False", "hence \"\\<exists>W. W \\<in> R 0\""], ["proof (prove)\nusing this:\n  n = 0\n\ngoal (1 subgoal):\n 1. \\<exists>W. W \\<in> R 0", "using L"], ["proof (prove)\nusing this:\n  n = 0\n  \\<exists>W. W \\<in> R n\n\ngoal (1 subgoal):\n 1. \\<exists>W. W \\<in> R 0", "by simp"], ["proof (state)\nthis:\n  \\<exists>W. W \\<in> R 0\n\ngoal (1 subgoal):\n 1. n = 0 \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  \\<exists>W. W \\<in> R 0", "obtain W where \"W \\<in> R 0\""], ["proof (prove)\nusing this:\n  \\<exists>W. W \\<in> R 0\n\ngoal (1 subgoal):\n 1. (\\<And>W. W \\<in> R 0 \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", ".."], ["proof (state)\nthis:\n  W \\<in> R 0\n\ngoal (1 subgoal):\n 1. n = 0 \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>W\\<in>R 0.\n     xs @ [y] \\<notin> sentences P \\<and>\n     None \\<notin> set (xs @ [y]) \\<and>\n     (xs @ [y], W) \\<in> failures P \\<or>\n     xs @ [y] \\<in> sentences P \\<and>\n     (\\<exists>U V.\n         (xs @ [y], U) \\<in> failures P \\<and>\n         ([], V) \\<in> failures Q \\<and> W = insert None U \\<inter> V)\n  W \\<in> R 0", "have \"?T' W\""], ["proof (prove)\nusing this:\n  \\<forall>W\\<in>R 0.\n     xs @ [y] \\<notin> sentences P \\<and>\n     None \\<notin> set (xs @ [y]) \\<and>\n     (xs @ [y], W) \\<in> failures P \\<or>\n     xs @ [y] \\<in> sentences P \\<and>\n     (\\<exists>U V.\n         (xs @ [y], U) \\<in> failures P \\<and>\n         ([], V) \\<in> failures Q \\<and> W = insert None U \\<inter> V)\n  W \\<in> R 0\n\ngoal (1 subgoal):\n 1. xs @ [y] \\<notin> sentences P \\<and>\n    None \\<notin> set (xs @ [y]) \\<and> (xs @ [y], W) \\<in> failures P \\<or>\n    xs @ [y] \\<in> sentences P \\<and>\n    (\\<exists>U V.\n        (xs @ [y], U) \\<in> failures P \\<and>\n        ([], V) \\<in> failures Q \\<and> W = insert None U \\<inter> V)", ".."], ["proof (state)\nthis:\n  xs @ [y] \\<notin> sentences P \\<and>\n  None \\<notin> set (xs @ [y]) \\<and> (xs @ [y], W) \\<in> failures P \\<or>\n  xs @ [y] \\<in> sentences P \\<and>\n  (\\<exists>U V.\n      (xs @ [y], U) \\<in> failures P \\<and>\n      ([], V) \\<in> failures Q \\<and> W = insert None U \\<inter> V)\n\ngoal (1 subgoal):\n 1. n = 0 \\<Longrightarrow> False", "hence N: \"xs @ [y] \\<in> traces P \\<and> None \\<notin> set (xs @ [y])\""], ["proof (prove)\nusing this:\n  xs @ [y] \\<notin> sentences P \\<and>\n  None \\<notin> set (xs @ [y]) \\<and> (xs @ [y], W) \\<in> failures P \\<or>\n  xs @ [y] \\<in> sentences P \\<and>\n  (\\<exists>U V.\n      (xs @ [y], U) \\<in> failures P \\<and>\n      ([], V) \\<in> failures Q \\<and> W = insert None U \\<inter> V)\n\ngoal (1 subgoal):\n 1. xs @ [y] \\<in> traces P \\<and> None \\<notin> set (xs @ [y])", "proof (cases \"xs @ [y] \\<in> sentences P\", simp_all del: ex_simps,\n       (erule_tac exE)+, (erule_tac [!] conjE)+, simp_all)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>U V.\n       \\<lbrakk>xs @ [y] \\<in> sentences P;\n        \\<exists>Ua.\n           (xs @ [y], Ua) \\<in> failures P \\<and>\n           (\\<exists>Va.\n               ([], Va) \\<in> failures Q \\<and>\n               insert None U \\<inter> V = insert None Ua \\<inter> Va);\n        (xs @ [y], U) \\<in> failures P; ([], V) \\<in> failures Q;\n        W = insert None U \\<inter> V\\<rbrakk>\n       \\<Longrightarrow> xs @ [y] \\<in> traces P \\<and>\n                         None \\<noteq> y \\<and> None \\<notin> set xs\n 2. \\<lbrakk>xs @ [y] \\<notin> sentences P; None \\<noteq> y;\n     None \\<notin> set xs; (xs @ [y], W) \\<in> failures P\\<rbrakk>\n    \\<Longrightarrow> xs @ [y] \\<in> traces P", "case False"], ["proof (state)\nthis:\n  xs @ [y] \\<notin> sentences P\n\ngoal (2 subgoals):\n 1. \\<And>U V.\n       \\<lbrakk>xs @ [y] \\<in> sentences P;\n        \\<exists>Ua.\n           (xs @ [y], Ua) \\<in> failures P \\<and>\n           (\\<exists>Va.\n               ([], Va) \\<in> failures Q \\<and>\n               insert None U \\<inter> V = insert None Ua \\<inter> Va);\n        (xs @ [y], U) \\<in> failures P; ([], V) \\<in> failures Q;\n        W = insert None U \\<inter> V\\<rbrakk>\n       \\<Longrightarrow> xs @ [y] \\<in> traces P \\<and>\n                         None \\<noteq> y \\<and> None \\<notin> set xs\n 2. \\<lbrakk>xs @ [y] \\<notin> sentences P; None \\<noteq> y;\n     None \\<notin> set xs; (xs @ [y], W) \\<in> failures P\\<rbrakk>\n    \\<Longrightarrow> xs @ [y] \\<in> traces P", "assume \"(xs @ [y], W) \\<in> failures P\""], ["proof (state)\nthis:\n  (xs @ [y], W) \\<in> failures P\n\ngoal (2 subgoals):\n 1. \\<And>U V.\n       \\<lbrakk>xs @ [y] \\<in> sentences P;\n        \\<exists>Ua.\n           (xs @ [y], Ua) \\<in> failures P \\<and>\n           (\\<exists>Va.\n               ([], Va) \\<in> failures Q \\<and>\n               insert None U \\<inter> V = insert None Ua \\<inter> Va);\n        (xs @ [y], U) \\<in> failures P; ([], V) \\<in> failures Q;\n        W = insert None U \\<inter> V\\<rbrakk>\n       \\<Longrightarrow> xs @ [y] \\<in> traces P \\<and>\n                         None \\<noteq> y \\<and> None \\<notin> set xs\n 2. \\<lbrakk>xs @ [y] \\<notin> sentences P; None \\<noteq> y;\n     None \\<notin> set xs; (xs @ [y], W) \\<in> failures P\\<rbrakk>\n    \\<Longrightarrow> xs @ [y] \\<in> traces P", "moreover"], ["proof (state)\nthis:\n  (xs @ [y], W) \\<in> failures P\n\ngoal (2 subgoals):\n 1. \\<And>U V.\n       \\<lbrakk>xs @ [y] \\<in> sentences P;\n        \\<exists>Ua.\n           (xs @ [y], Ua) \\<in> failures P \\<and>\n           (\\<exists>Va.\n               ([], Va) \\<in> failures Q \\<and>\n               insert None U \\<inter> V = insert None Ua \\<inter> Va);\n        (xs @ [y], U) \\<in> failures P; ([], V) \\<in> failures Q;\n        W = insert None U \\<inter> V\\<rbrakk>\n       \\<Longrightarrow> xs @ [y] \\<in> traces P \\<and>\n                         None \\<noteq> y \\<and> None \\<notin> set xs\n 2. \\<lbrakk>xs @ [y] \\<notin> sentences P; None \\<noteq> y;\n     None \\<notin> set xs; (xs @ [y], W) \\<in> failures P\\<rbrakk>\n    \\<Longrightarrow> xs @ [y] \\<in> traces P", "have \"{} \\<subseteq> W\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {} \\<subseteq> W", ".."], ["proof (state)\nthis:\n  {} \\<subseteq> W\n\ngoal (2 subgoals):\n 1. \\<And>U V.\n       \\<lbrakk>xs @ [y] \\<in> sentences P;\n        \\<exists>Ua.\n           (xs @ [y], Ua) \\<in> failures P \\<and>\n           (\\<exists>Va.\n               ([], Va) \\<in> failures Q \\<and>\n               insert None U \\<inter> V = insert None Ua \\<inter> Va);\n        (xs @ [y], U) \\<in> failures P; ([], V) \\<in> failures Q;\n        W = insert None U \\<inter> V\\<rbrakk>\n       \\<Longrightarrow> xs @ [y] \\<in> traces P \\<and>\n                         None \\<noteq> y \\<and> None \\<notin> set xs\n 2. \\<lbrakk>xs @ [y] \\<notin> sentences P; None \\<noteq> y;\n     None \\<notin> set xs; (xs @ [y], W) \\<in> failures P\\<rbrakk>\n    \\<Longrightarrow> xs @ [y] \\<in> traces P", "ultimately"], ["proof (chain)\npicking this:\n  (xs @ [y], W) \\<in> failures P\n  {} \\<subseteq> W", "have \"(xs @ [y], {}) \\<in> failures P\""], ["proof (prove)\nusing this:\n  (xs @ [y], W) \\<in> failures P\n  {} \\<subseteq> W\n\ngoal (1 subgoal):\n 1. (xs @ [y], {}) \\<in> failures P", "by (rule process_rule_3)"], ["proof (state)\nthis:\n  (xs @ [y], {}) \\<in> failures P\n\ngoal (2 subgoals):\n 1. \\<And>U V.\n       \\<lbrakk>xs @ [y] \\<in> sentences P;\n        \\<exists>Ua.\n           (xs @ [y], Ua) \\<in> failures P \\<and>\n           (\\<exists>Va.\n               ([], Va) \\<in> failures Q \\<and>\n               insert None U \\<inter> V = insert None Ua \\<inter> Va);\n        (xs @ [y], U) \\<in> failures P; ([], V) \\<in> failures Q;\n        W = insert None U \\<inter> V\\<rbrakk>\n       \\<Longrightarrow> xs @ [y] \\<in> traces P \\<and>\n                         None \\<noteq> y \\<and> None \\<notin> set xs\n 2. \\<lbrakk>xs @ [y] \\<notin> sentences P; None \\<noteq> y;\n     None \\<notin> set xs; (xs @ [y], W) \\<in> failures P\\<rbrakk>\n    \\<Longrightarrow> xs @ [y] \\<in> traces P", "thus \"xs @ [y] \\<in> traces P\""], ["proof (prove)\nusing this:\n  (xs @ [y], {}) \\<in> failures P\n\ngoal (1 subgoal):\n 1. xs @ [y] \\<in> traces P", "by (rule failures_traces)"], ["proof (state)\nthis:\n  xs @ [y] \\<in> traces P\n\ngoal (1 subgoal):\n 1. \\<And>U V.\n       \\<lbrakk>xs @ [y] \\<in> sentences P;\n        \\<exists>Ua.\n           (xs @ [y], Ua) \\<in> failures P \\<and>\n           (\\<exists>Va.\n               ([], Va) \\<in> failures Q \\<and>\n               insert None U \\<inter> V = insert None Ua \\<inter> Va);\n        (xs @ [y], U) \\<in> failures P; ([], V) \\<in> failures Q;\n        W = insert None U \\<inter> V\\<rbrakk>\n       \\<Longrightarrow> xs @ [y] \\<in> traces P \\<and>\n                         None \\<noteq> y \\<and> None \\<notin> set xs", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>U V.\n       \\<lbrakk>xs @ [y] \\<in> sentences P;\n        \\<exists>Ua.\n           (xs @ [y], Ua) \\<in> failures P \\<and>\n           (\\<exists>Va.\n               ([], Va) \\<in> failures Q \\<and>\n               insert None U \\<inter> V = insert None Ua \\<inter> Va);\n        (xs @ [y], U) \\<in> failures P; ([], V) \\<in> failures Q;\n        W = insert None U \\<inter> V\\<rbrakk>\n       \\<Longrightarrow> xs @ [y] \\<in> traces P \\<and>\n                         None \\<noteq> y \\<and> None \\<notin> set xs", "fix U"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>U V.\n       \\<lbrakk>xs @ [y] \\<in> sentences P;\n        \\<exists>Ua.\n           (xs @ [y], Ua) \\<in> failures P \\<and>\n           (\\<exists>Va.\n               ([], Va) \\<in> failures Q \\<and>\n               insert None U \\<inter> V = insert None Ua \\<inter> Va);\n        (xs @ [y], U) \\<in> failures P; ([], V) \\<in> failures Q;\n        W = insert None U \\<inter> V\\<rbrakk>\n       \\<Longrightarrow> xs @ [y] \\<in> traces P \\<and>\n                         None \\<noteq> y \\<and> None \\<notin> set xs", "case True"], ["proof (state)\nthis:\n  xs @ [y] \\<in> sentences P\n\ngoal (1 subgoal):\n 1. \\<And>U V.\n       \\<lbrakk>xs @ [y] \\<in> sentences P;\n        \\<exists>Ua.\n           (xs @ [y], Ua) \\<in> failures P \\<and>\n           (\\<exists>Va.\n               ([], Va) \\<in> failures Q \\<and>\n               insert None U \\<inter> V = insert None Ua \\<inter> Va);\n        (xs @ [y], U) \\<in> failures P; ([], V) \\<in> failures Q;\n        W = insert None U \\<inter> V\\<rbrakk>\n       \\<Longrightarrow> xs @ [y] \\<in> traces P \\<and>\n                         None \\<noteq> y \\<and> None \\<notin> set xs", "assume \"(xs @ [y], U) \\<in> failures P\""], ["proof (state)\nthis:\n  (xs @ [y], U) \\<in> failures P\n\ngoal (1 subgoal):\n 1. \\<And>U V.\n       \\<lbrakk>xs @ [y] \\<in> sentences P;\n        \\<exists>Ua.\n           (xs @ [y], Ua) \\<in> failures P \\<and>\n           (\\<exists>Va.\n               ([], Va) \\<in> failures Q \\<and>\n               insert None U \\<inter> V = insert None Ua \\<inter> Va);\n        (xs @ [y], U) \\<in> failures P; ([], V) \\<in> failures Q;\n        W = insert None U \\<inter> V\\<rbrakk>\n       \\<Longrightarrow> xs @ [y] \\<in> traces P \\<and>\n                         None \\<noteq> y \\<and> None \\<notin> set xs", "moreover"], ["proof (state)\nthis:\n  (xs @ [y], U) \\<in> failures P\n\ngoal (1 subgoal):\n 1. \\<And>U V.\n       \\<lbrakk>xs @ [y] \\<in> sentences P;\n        \\<exists>Ua.\n           (xs @ [y], Ua) \\<in> failures P \\<and>\n           (\\<exists>Va.\n               ([], Va) \\<in> failures Q \\<and>\n               insert None U \\<inter> V = insert None Ua \\<inter> Va);\n        (xs @ [y], U) \\<in> failures P; ([], V) \\<in> failures Q;\n        W = insert None U \\<inter> V\\<rbrakk>\n       \\<Longrightarrow> xs @ [y] \\<in> traces P \\<and>\n                         None \\<noteq> y \\<and> None \\<notin> set xs", "have \"{} \\<subseteq> U\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {} \\<subseteq> U", ".."], ["proof (state)\nthis:\n  {} \\<subseteq> U\n\ngoal (1 subgoal):\n 1. \\<And>U V.\n       \\<lbrakk>xs @ [y] \\<in> sentences P;\n        \\<exists>Ua.\n           (xs @ [y], Ua) \\<in> failures P \\<and>\n           (\\<exists>Va.\n               ([], Va) \\<in> failures Q \\<and>\n               insert None U \\<inter> V = insert None Ua \\<inter> Va);\n        (xs @ [y], U) \\<in> failures P; ([], V) \\<in> failures Q;\n        W = insert None U \\<inter> V\\<rbrakk>\n       \\<Longrightarrow> xs @ [y] \\<in> traces P \\<and>\n                         None \\<noteq> y \\<and> None \\<notin> set xs", "ultimately"], ["proof (chain)\npicking this:\n  (xs @ [y], U) \\<in> failures P\n  {} \\<subseteq> U", "have \"(xs @ [y], {}) \\<in> failures P\""], ["proof (prove)\nusing this:\n  (xs @ [y], U) \\<in> failures P\n  {} \\<subseteq> U\n\ngoal (1 subgoal):\n 1. (xs @ [y], {}) \\<in> failures P", "by (rule process_rule_3)"], ["proof (state)\nthis:\n  (xs @ [y], {}) \\<in> failures P\n\ngoal (1 subgoal):\n 1. \\<And>U V.\n       \\<lbrakk>xs @ [y] \\<in> sentences P;\n        \\<exists>Ua.\n           (xs @ [y], Ua) \\<in> failures P \\<and>\n           (\\<exists>Va.\n               ([], Va) \\<in> failures Q \\<and>\n               insert None U \\<inter> V = insert None Ua \\<inter> Va);\n        (xs @ [y], U) \\<in> failures P; ([], V) \\<in> failures Q;\n        W = insert None U \\<inter> V\\<rbrakk>\n       \\<Longrightarrow> xs @ [y] \\<in> traces P \\<and>\n                         None \\<noteq> y \\<and> None \\<notin> set xs", "hence \"xs @ [y] \\<in> traces P\""], ["proof (prove)\nusing this:\n  (xs @ [y], {}) \\<in> failures P\n\ngoal (1 subgoal):\n 1. xs @ [y] \\<in> traces P", "by (rule failures_traces)"], ["proof (state)\nthis:\n  xs @ [y] \\<in> traces P\n\ngoal (1 subgoal):\n 1. \\<And>U V.\n       \\<lbrakk>xs @ [y] \\<in> sentences P;\n        \\<exists>Ua.\n           (xs @ [y], Ua) \\<in> failures P \\<and>\n           (\\<exists>Va.\n               ([], Va) \\<in> failures Q \\<and>\n               insert None U \\<inter> V = insert None Ua \\<inter> Va);\n        (xs @ [y], U) \\<in> failures P; ([], V) \\<in> failures Q;\n        W = insert None U \\<inter> V\\<rbrakk>\n       \\<Longrightarrow> xs @ [y] \\<in> traces P \\<and>\n                         None \\<noteq> y \\<and> None \\<notin> set xs", "moreover"], ["proof (state)\nthis:\n  xs @ [y] \\<in> traces P\n\ngoal (1 subgoal):\n 1. \\<And>U V.\n       \\<lbrakk>xs @ [y] \\<in> sentences P;\n        \\<exists>Ua.\n           (xs @ [y], Ua) \\<in> failures P \\<and>\n           (\\<exists>Va.\n               ([], Va) \\<in> failures Q \\<and>\n               insert None U \\<inter> V = insert None Ua \\<inter> Va);\n        (xs @ [y], U) \\<in> failures P; ([], V) \\<in> failures Q;\n        W = insert None U \\<inter> V\\<rbrakk>\n       \\<Longrightarrow> xs @ [y] \\<in> traces P \\<and>\n                         None \\<noteq> y \\<and> None \\<notin> set xs", "have \"weakly_sequential P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. weakly_sequential P", "using C"], ["proof (prove)\nusing this:\n  sequential P\n\ngoal (1 subgoal):\n 1. weakly_sequential P", "by (rule seq_implies_weakly_seq)"], ["proof (state)\nthis:\n  weakly_sequential P\n\ngoal (1 subgoal):\n 1. \\<And>U V.\n       \\<lbrakk>xs @ [y] \\<in> sentences P;\n        \\<exists>Ua.\n           (xs @ [y], Ua) \\<in> failures P \\<and>\n           (\\<exists>Va.\n               ([], Va) \\<in> failures Q \\<and>\n               insert None U \\<inter> V = insert None Ua \\<inter> Va);\n        (xs @ [y], U) \\<in> failures P; ([], V) \\<in> failures Q;\n        W = insert None U \\<inter> V\\<rbrakk>\n       \\<Longrightarrow> xs @ [y] \\<in> traces P \\<and>\n                         None \\<noteq> y \\<and> None \\<notin> set xs", "hence \"None \\<notin> set (xs @ [y])\""], ["proof (prove)\nusing this:\n  weakly_sequential P\n\ngoal (1 subgoal):\n 1. None \\<notin> set (xs @ [y])", "using True"], ["proof (prove)\nusing this:\n  weakly_sequential P\n  xs @ [y] \\<in> sentences P\n\ngoal (1 subgoal):\n 1. None \\<notin> set (xs @ [y])", "by (rule weakly_seq_sentences_none)"], ["proof (state)\nthis:\n  None \\<notin> set (xs @ [y])\n\ngoal (1 subgoal):\n 1. \\<And>U V.\n       \\<lbrakk>xs @ [y] \\<in> sentences P;\n        \\<exists>Ua.\n           (xs @ [y], Ua) \\<in> failures P \\<and>\n           (\\<exists>Va.\n               ([], Va) \\<in> failures Q \\<and>\n               insert None U \\<inter> V = insert None Ua \\<inter> Va);\n        (xs @ [y], U) \\<in> failures P; ([], V) \\<in> failures Q;\n        W = insert None U \\<inter> V\\<rbrakk>\n       \\<Longrightarrow> xs @ [y] \\<in> traces P \\<and>\n                         None \\<noteq> y \\<and> None \\<notin> set xs", "hence \"None \\<noteq> y \\<and> None \\<notin> set xs\""], ["proof (prove)\nusing this:\n  None \\<notin> set (xs @ [y])\n\ngoal (1 subgoal):\n 1. None \\<noteq> y \\<and> None \\<notin> set xs", "by simp"], ["proof (state)\nthis:\n  None \\<noteq> y \\<and> None \\<notin> set xs\n\ngoal (1 subgoal):\n 1. \\<And>U V.\n       \\<lbrakk>xs @ [y] \\<in> sentences P;\n        \\<exists>Ua.\n           (xs @ [y], Ua) \\<in> failures P \\<and>\n           (\\<exists>Va.\n               ([], Va) \\<in> failures Q \\<and>\n               insert None U \\<inter> V = insert None Ua \\<inter> Va);\n        (xs @ [y], U) \\<in> failures P; ([], V) \\<in> failures Q;\n        W = insert None U \\<inter> V\\<rbrakk>\n       \\<Longrightarrow> xs @ [y] \\<in> traces P \\<and>\n                         None \\<noteq> y \\<and> None \\<notin> set xs", "ultimately"], ["proof (chain)\npicking this:\n  xs @ [y] \\<in> traces P\n  None \\<noteq> y \\<and> None \\<notin> set xs", "show \"xs @ [y] \\<in> traces P \\<and> None \\<noteq> y \\<and> None \\<notin> set xs\""], ["proof (prove)\nusing this:\n  xs @ [y] \\<in> traces P\n  None \\<noteq> y \\<and> None \\<notin> set xs\n\ngoal (1 subgoal):\n 1. xs @ [y] \\<in> traces P \\<and>\n    None \\<noteq> y \\<and> None \\<notin> set xs", ".."], ["proof (state)\nthis:\n  xs @ [y] \\<in> traces P \\<and> None \\<noteq> y \\<and> None \\<notin> set xs\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  xs @ [y] \\<in> traces P \\<and> None \\<notin> set (xs @ [y])\n\ngoal (1 subgoal):\n 1. n = 0 \\<Longrightarrow> False", "have \"take (length xs) (xs @ zs) @ [y] = take (length xs) (ws @ ys) @ [y]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. take (length xs) (xs @ zs) @ [y] = take (length xs) (ws @ ys) @ [y]", "using I"], ["proof (prove)\nusing this:\n  ws @ ys = xs @ zs\n\ngoal (1 subgoal):\n 1. take (length xs) (xs @ zs) @ [y] = take (length xs) (ws @ ys) @ [y]", "by simp"], ["proof (state)\nthis:\n  take (length xs) (xs @ zs) @ [y] = take (length xs) (ws @ ys) @ [y]\n\ngoal (1 subgoal):\n 1. n = 0 \\<Longrightarrow> False", "hence \"xs @ [y] = ws @ take (length xs - length ws) ys @ [y]\""], ["proof (prove)\nusing this:\n  take (length xs) (xs @ zs) @ [y] = take (length xs) (ws @ ys) @ [y]\n\ngoal (1 subgoal):\n 1. xs @ [y] = ws @ take (length xs - length ws) ys @ [y]", "using False"], ["proof (prove)\nusing this:\n  take (length xs) (xs @ zs) @ [y] = take (length xs) (ws @ ys) @ [y]\n  \\<not> length xs < length ws\n\ngoal (1 subgoal):\n 1. xs @ [y] = ws @ take (length xs - length ws) ys @ [y]", "by simp"], ["proof (state)\nthis:\n  xs @ [y] = ws @ take (length xs - length ws) ys @ [y]\n\ngoal (1 subgoal):\n 1. n = 0 \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  xs @ [y] = ws @ take (length xs - length ws) ys @ [y]\n\ngoal (1 subgoal):\n 1. n = 0 \\<Longrightarrow> False", "have \"\\<exists>v vs. take (length xs - length ws) ys @ [y] = v # vs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>v vs. take (length xs - length ws) ys @ [y] = v # vs", "by (cases \"take (length xs - length ws) ys @ [y]\", simp_all)"], ["proof (state)\nthis:\n  \\<exists>v vs. take (length xs - length ws) ys @ [y] = v # vs\n\ngoal (1 subgoal):\n 1. n = 0 \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  \\<exists>v vs. take (length xs - length ws) ys @ [y] = v # vs", "obtain v and vs where\n       \"take (length xs - length ws) ys @ [y] = v # vs\""], ["proof (prove)\nusing this:\n  \\<exists>v vs. take (length xs - length ws) ys @ [y] = v # vs\n\ngoal (1 subgoal):\n 1. (\\<And>v vs.\n        take (length xs - length ws) ys @ [y] = v # vs \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  take (length xs - length ws) ys @ [y] = v # vs\n\ngoal (1 subgoal):\n 1. n = 0 \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  xs @ [y] = ws @ take (length xs - length ws) ys @ [y]\n  take (length xs - length ws) ys @ [y] = v # vs", "have O: \"xs @ [y] = ws @ v # vs\""], ["proof (prove)\nusing this:\n  xs @ [y] = ws @ take (length xs - length ws) ys @ [y]\n  take (length xs - length ws) ys @ [y] = v # vs\n\ngoal (1 subgoal):\n 1. xs @ [y] = ws @ v # vs", "by simp"], ["proof (state)\nthis:\n  xs @ [y] = ws @ v # vs\n\ngoal (1 subgoal):\n 1. n = 0 \\<Longrightarrow> False", "hence \"ws @ v # vs \\<in> traces P\""], ["proof (prove)\nusing this:\n  xs @ [y] = ws @ v # vs\n\ngoal (1 subgoal):\n 1. ws @ v # vs \\<in> traces P", "using N"], ["proof (prove)\nusing this:\n  xs @ [y] = ws @ v # vs\n  xs @ [y] \\<in> traces P \\<and> None \\<notin> set (xs @ [y])\n\ngoal (1 subgoal):\n 1. ws @ v # vs \\<in> traces P", "by simp"], ["proof (state)\nthis:\n  ws @ v # vs \\<in> traces P\n\ngoal (1 subgoal):\n 1. n = 0 \\<Longrightarrow> False", "with C and F"], ["proof (chain)\npicking this:\n  sequential P\n  ws \\<in> sentences P\n  ws @ v # vs \\<in> traces P", "have \"v = None\""], ["proof (prove)\nusing this:\n  sequential P\n  ws \\<in> sentences P\n  ws @ v # vs \\<in> traces P\n\ngoal (1 subgoal):\n 1. v = None", "by (rule seq_sentences_none)"], ["proof (state)\nthis:\n  v = None\n\ngoal (1 subgoal):\n 1. n = 0 \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  v = None\n\ngoal (1 subgoal):\n 1. n = 0 \\<Longrightarrow> False", "have \"v \\<noteq> None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<noteq> None", "using N and O"], ["proof (prove)\nusing this:\n  xs @ [y] \\<in> traces P \\<and> None \\<notin> set (xs @ [y])\n  xs @ [y] = ws @ v # vs\n\ngoal (1 subgoal):\n 1. v \\<noteq> None", "by (rule_tac not_sym, simp)"], ["proof (state)\nthis:\n  v \\<noteq> None\n\ngoal (1 subgoal):\n 1. n = 0 \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  v = None\n  v \\<noteq> None", "show False"], ["proof (prove)\nusing this:\n  v = None\n  v \\<noteq> None\n\ngoal (1 subgoal):\n 1. False", "by contradiction"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  n \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<not> length xs < length ws \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs Y)\n    \\<in> seq_comp_failures P Q", "hence N: \"n \\<in> {0<..length (xs @ [y])}\""], ["proof (prove)\nusing this:\n  n \\<noteq> 0\n\ngoal (1 subgoal):\n 1. n \\<in> {0<..length (xs @ [y])}", "using M"], ["proof (prove)\nusing this:\n  n \\<noteq> 0\n  n = 0 \\<or> n \\<in> {0<..length (xs @ [y])}\n\ngoal (1 subgoal):\n 1. n \\<in> {0<..length (xs @ [y])}", "by blast"], ["proof (state)\nthis:\n  n \\<in> {0<..length (xs @ [y])}\n\ngoal (1 subgoal):\n 1. \\<not> length xs < length ws \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs Y)\n    \\<in> seq_comp_failures P Q", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>n\\<in>{0<..length (xs @ [y])}.\n     \\<forall>W\\<in>R n.\n        take (length (xs @ [y]) - n) (xs @ [y]) \\<in> sentences P \\<and>\n        (drop (length (xs @ [y]) - n) (xs @ [y]), W) \\<in> failures Q\n  n \\<in> {0<..length (xs @ [y])}", "have \"\\<forall>W \\<in> R n. ?T n W\""], ["proof (prove)\nusing this:\n  \\<forall>n\\<in>{0<..length (xs @ [y])}.\n     \\<forall>W\\<in>R n.\n        take (length (xs @ [y]) - n) (xs @ [y]) \\<in> sentences P \\<and>\n        (drop (length (xs @ [y]) - n) (xs @ [y]), W) \\<in> failures Q\n  n \\<in> {0<..length (xs @ [y])}\n\ngoal (1 subgoal):\n 1. \\<forall>W\\<in>R n.\n       take (length (xs @ [y]) - n) (xs @ [y]) \\<in> sentences P \\<and>\n       (drop (length (xs @ [y]) - n) (xs @ [y]), W) \\<in> failures Q", ".."], ["proof (state)\nthis:\n  \\<forall>W\\<in>R n.\n     take (length (xs @ [y]) - n) (xs @ [y]) \\<in> sentences P \\<and>\n     (drop (length (xs @ [y]) - n) (xs @ [y]), W) \\<in> failures Q\n\ngoal (1 subgoal):\n 1. \\<not> length xs < length ws \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs Y)\n    \\<in> seq_comp_failures P Q", "moreover"], ["proof (state)\nthis:\n  \\<forall>W\\<in>R n.\n     take (length (xs @ [y]) - n) (xs @ [y]) \\<in> sentences P \\<and>\n     (drop (length (xs @ [y]) - n) (xs @ [y]), W) \\<in> failures Q\n\ngoal (1 subgoal):\n 1. \\<not> length xs < length ws \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs Y)\n    \\<in> seq_comp_failures P Q", "obtain W where \"W \\<in> R n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>W. W \\<in> R n \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "using L"], ["proof (prove)\nusing this:\n  \\<exists>W. W \\<in> R n\n\ngoal (1 subgoal):\n 1. (\\<And>W. W \\<in> R n \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", ".."], ["proof (state)\nthis:\n  W \\<in> R n\n\ngoal (1 subgoal):\n 1. \\<not> length xs < length ws \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs Y)\n    \\<in> seq_comp_failures P Q", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>W\\<in>R n.\n     take (length (xs @ [y]) - n) (xs @ [y]) \\<in> sentences P \\<and>\n     (drop (length (xs @ [y]) - n) (xs @ [y]), W) \\<in> failures Q\n  W \\<in> R n", "have O: \"?T n W\""], ["proof (prove)\nusing this:\n  \\<forall>W\\<in>R n.\n     take (length (xs @ [y]) - n) (xs @ [y]) \\<in> sentences P \\<and>\n     (drop (length (xs @ [y]) - n) (xs @ [y]), W) \\<in> failures Q\n  W \\<in> R n\n\ngoal (1 subgoal):\n 1. take (length (xs @ [y]) - n) (xs @ [y]) \\<in> sentences P \\<and>\n    (drop (length (xs @ [y]) - n) (xs @ [y]), W) \\<in> failures Q", ".."], ["proof (state)\nthis:\n  take (length (xs @ [y]) - n) (xs @ [y]) \\<in> sentences P \\<and>\n  (drop (length (xs @ [y]) - n) (xs @ [y]), W) \\<in> failures Q\n\ngoal (1 subgoal):\n 1. \\<not> length xs < length ws \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs Y)\n    \\<in> seq_comp_failures P Q", "have P: \"length (xs @ [y]) - n \\<le> length xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (xs @ [y]) - n \\<le> length xs", "using N"], ["proof (prove)\nusing this:\n  n \\<in> {0<..length (xs @ [y])}\n\ngoal (1 subgoal):\n 1. length (xs @ [y]) - n \\<le> length xs", "by (simp, arith)"], ["proof (state)\nthis:\n  length (xs @ [y]) - n \\<le> length xs\n\ngoal (1 subgoal):\n 1. \\<not> length xs < length ws \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs Y)\n    \\<in> seq_comp_failures P Q", "have \"length (xs @ [y]) - n = length ws\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (xs @ [y]) - n = length ws", "proof (rule ccontr, simp only: neq_iff, erule disjE)"], ["proof (state)\ngoal (2 subgoals):\n 1. length (xs @ [y]) - n < length ws \\<Longrightarrow> False\n 2. length ws < length (xs @ [y]) - n \\<Longrightarrow> False", "assume Q: \"length (xs @ [y]) - n < length ws\""], ["proof (state)\nthis:\n  length (xs @ [y]) - n < length ws\n\ngoal (2 subgoals):\n 1. length (xs @ [y]) - n < length ws \\<Longrightarrow> False\n 2. length ws < length (xs @ [y]) - n \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  length (xs @ [y]) - n < length ws\n\ngoal (2 subgoals):\n 1. length (xs @ [y]) - n < length ws \\<Longrightarrow> False\n 2. length ws < length (xs @ [y]) - n \\<Longrightarrow> False", "have \"ws = take (length (xs @ [y]) - n) ws @\n        drop (length (xs @ [y]) - n) ws\"\n        (is \"_ = _ @ ?ws'\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. ws = take (length (xs @ [y]) - n) ws @ drop (length (xs @ [y]) - n) ws", "by simp"], ["proof (state)\nthis:\n  ws = take (length (xs @ [y]) - n) ws @ drop (length (xs @ [y]) - n) ws\n\ngoal (2 subgoals):\n 1. length (xs @ [y]) - n < length ws \\<Longrightarrow> False\n 2. length ws < length (xs @ [y]) - n \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  length (xs @ [y]) - n < length ws\n  ws = take (length (xs @ [y]) - n) ws @ drop (length (xs @ [y]) - n) ws", "have \"ws = take (length (xs @ [y]) - n) (ws @ ys) @ ?ws'\""], ["proof (prove)\nusing this:\n  length (xs @ [y]) - n < length ws\n  ws = take (length (xs @ [y]) - n) ws @ drop (length (xs @ [y]) - n) ws\n\ngoal (1 subgoal):\n 1. ws =\n    take (length (xs @ [y]) - n) (ws @ ys) @ drop (length (xs @ [y]) - n) ws", "by simp"], ["proof (state)\nthis:\n  ws =\n  take (length (xs @ [y]) - n) (ws @ ys) @ drop (length (xs @ [y]) - n) ws\n\ngoal (2 subgoals):\n 1. length (xs @ [y]) - n < length ws \\<Longrightarrow> False\n 2. length ws < length (xs @ [y]) - n \\<Longrightarrow> False", "hence \"ws = take (length (xs @ [y]) - n) (xs @ zs) @ ?ws'\""], ["proof (prove)\nusing this:\n  ws =\n  take (length (xs @ [y]) - n) (ws @ ys) @ drop (length (xs @ [y]) - n) ws\n\ngoal (1 subgoal):\n 1. ws =\n    take (length (xs @ [y]) - n) (xs @ zs) @ drop (length (xs @ [y]) - n) ws", "using I"], ["proof (prove)\nusing this:\n  ws =\n  take (length (xs @ [y]) - n) (ws @ ys) @ drop (length (xs @ [y]) - n) ws\n  ws @ ys = xs @ zs\n\ngoal (1 subgoal):\n 1. ws =\n    take (length (xs @ [y]) - n) (xs @ zs) @ drop (length (xs @ [y]) - n) ws", "by simp"], ["proof (state)\nthis:\n  ws =\n  take (length (xs @ [y]) - n) (xs @ zs) @ drop (length (xs @ [y]) - n) ws\n\ngoal (2 subgoals):\n 1. length (xs @ [y]) - n < length ws \\<Longrightarrow> False\n 2. length ws < length (xs @ [y]) - n \\<Longrightarrow> False", "hence \"ws = take (length (xs @ [y]) - n) (xs @ [y]) @ ?ws'\""], ["proof (prove)\nusing this:\n  ws =\n  take (length (xs @ [y]) - n) (xs @ zs) @ drop (length (xs @ [y]) - n) ws\n\ngoal (1 subgoal):\n 1. ws =\n    take (length (xs @ [y]) - n) (xs @ [y]) @\n    drop (length (xs @ [y]) - n) ws", "using P"], ["proof (prove)\nusing this:\n  ws =\n  take (length (xs @ [y]) - n) (xs @ zs) @ drop (length (xs @ [y]) - n) ws\n  length (xs @ [y]) - n \\<le> length xs\n\ngoal (1 subgoal):\n 1. ws =\n    take (length (xs @ [y]) - n) (xs @ [y]) @\n    drop (length (xs @ [y]) - n) ws", "by simp"], ["proof (state)\nthis:\n  ws =\n  take (length (xs @ [y]) - n) (xs @ [y]) @ drop (length (xs @ [y]) - n) ws\n\ngoal (2 subgoals):\n 1. length (xs @ [y]) - n < length ws \\<Longrightarrow> False\n 2. length ws < length (xs @ [y]) - n \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  ws =\n  take (length (xs @ [y]) - n) (xs @ [y]) @ drop (length (xs @ [y]) - n) ws\n\ngoal (2 subgoals):\n 1. length (xs @ [y]) - n < length ws \\<Longrightarrow> False\n 2. length ws < length (xs @ [y]) - n \\<Longrightarrow> False", "have \"?ws' \\<noteq> []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. drop (length (xs @ [y]) - n) ws \\<noteq> []", "using Q"], ["proof (prove)\nusing this:\n  length (xs @ [y]) - n < length ws\n\ngoal (1 subgoal):\n 1. drop (length (xs @ [y]) - n) ws \\<noteq> []", "by simp"], ["proof (state)\nthis:\n  drop (length (xs @ [y]) - n) ws \\<noteq> []\n\ngoal (2 subgoals):\n 1. length (xs @ [y]) - n < length ws \\<Longrightarrow> False\n 2. length ws < length (xs @ [y]) - n \\<Longrightarrow> False", "hence \"\\<exists>v vs. ?ws' = v # vs\""], ["proof (prove)\nusing this:\n  drop (length (xs @ [y]) - n) ws \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<exists>v vs. drop (length (xs @ [y]) - n) ws = v # vs", "by (cases ?ws', simp_all)"], ["proof (state)\nthis:\n  \\<exists>v vs. drop (length (xs @ [y]) - n) ws = v # vs\n\ngoal (2 subgoals):\n 1. length (xs @ [y]) - n < length ws \\<Longrightarrow> False\n 2. length ws < length (xs @ [y]) - n \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  \\<exists>v vs. drop (length (xs @ [y]) - n) ws = v # vs", "obtain v and vs where \"?ws' = v # vs\""], ["proof (prove)\nusing this:\n  \\<exists>v vs. drop (length (xs @ [y]) - n) ws = v # vs\n\ngoal (1 subgoal):\n 1. (\\<And>v vs.\n        drop (length (xs @ [y]) - n) ws = v # vs \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  drop (length (xs @ [y]) - n) ws = v # vs\n\ngoal (2 subgoals):\n 1. length (xs @ [y]) - n < length ws \\<Longrightarrow> False\n 2. length ws < length (xs @ [y]) - n \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  ws =\n  take (length (xs @ [y]) - n) (xs @ [y]) @ drop (length (xs @ [y]) - n) ws\n  drop (length (xs @ [y]) - n) ws = v # vs", "have S: \"ws = take (length (xs @ [y]) - n) (xs @ [y]) @ v # vs\""], ["proof (prove)\nusing this:\n  ws =\n  take (length (xs @ [y]) - n) (xs @ [y]) @ drop (length (xs @ [y]) - n) ws\n  drop (length (xs @ [y]) - n) ws = v # vs\n\ngoal (1 subgoal):\n 1. ws = take (length (xs @ [y]) - n) (xs @ [y]) @ v # vs", "by simp"], ["proof (state)\nthis:\n  ws = take (length (xs @ [y]) - n) (xs @ [y]) @ v # vs\n\ngoal (2 subgoals):\n 1. length (xs @ [y]) - n < length ws \\<Longrightarrow> False\n 2. length ws < length (xs @ [y]) - n \\<Longrightarrow> False", "hence \"(take (length (xs @ [y]) - n) (xs @ [y]) @ v # vs) @ [None]\n        \\<in> traces P\""], ["proof (prove)\nusing this:\n  ws = take (length (xs @ [y]) - n) (xs @ [y]) @ v # vs\n\ngoal (1 subgoal):\n 1. (take (length (xs @ [y]) - n) (xs @ [y]) @ v # vs) @ [None]\n    \\<in> traces P", "using F"], ["proof (prove)\nusing this:\n  ws = take (length (xs @ [y]) - n) (xs @ [y]) @ v # vs\n  ws \\<in> sentences P\n\ngoal (1 subgoal):\n 1. (take (length (xs @ [y]) - n) (xs @ [y]) @ v # vs) @ [None]\n    \\<in> traces P", "by (simp add: sentences_def)"], ["proof (state)\nthis:\n  (take (length (xs @ [y]) - n) (xs @ [y]) @ v # vs) @ [None] \\<in> traces P\n\ngoal (2 subgoals):\n 1. length (xs @ [y]) - n < length ws \\<Longrightarrow> False\n 2. length ws < length (xs @ [y]) - n \\<Longrightarrow> False", "hence T: \"take (length (xs @ [y]) - n) (xs @ [y]) @ v # vs \\<in> traces P\""], ["proof (prove)\nusing this:\n  (take (length (xs @ [y]) - n) (xs @ [y]) @ v # vs) @ [None] \\<in> traces P\n\ngoal (1 subgoal):\n 1. take (length (xs @ [y]) - n) (xs @ [y]) @ v # vs \\<in> traces P", "by (rule process_rule_2_traces)"], ["proof (state)\nthis:\n  take (length (xs @ [y]) - n) (xs @ [y]) @ v # vs \\<in> traces P\n\ngoal (2 subgoals):\n 1. length (xs @ [y]) - n < length ws \\<Longrightarrow> False\n 2. length ws < length (xs @ [y]) - n \\<Longrightarrow> False", "have \"take (length (xs @ [y]) - n) (xs @ [y]) \\<in> sentences P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. take (length (xs @ [y]) - n) (xs @ [y]) \\<in> sentences P", "using O"], ["proof (prove)\nusing this:\n  take (length (xs @ [y]) - n) (xs @ [y]) \\<in> sentences P \\<and>\n  (drop (length (xs @ [y]) - n) (xs @ [y]), W) \\<in> failures Q\n\ngoal (1 subgoal):\n 1. take (length (xs @ [y]) - n) (xs @ [y]) \\<in> sentences P", ".."], ["proof (state)\nthis:\n  take (length (xs @ [y]) - n) (xs @ [y]) \\<in> sentences P\n\ngoal (2 subgoals):\n 1. length (xs @ [y]) - n < length ws \\<Longrightarrow> False\n 2. length ws < length (xs @ [y]) - n \\<Longrightarrow> False", "with C"], ["proof (chain)\npicking this:\n  sequential P\n  take (length (xs @ [y]) - n) (xs @ [y]) \\<in> sentences P", "have \"v = None\""], ["proof (prove)\nusing this:\n  sequential P\n  take (length (xs @ [y]) - n) (xs @ [y]) \\<in> sentences P\n\ngoal (1 subgoal):\n 1. v = None", "using T"], ["proof (prove)\nusing this:\n  sequential P\n  take (length (xs @ [y]) - n) (xs @ [y]) \\<in> sentences P\n  take (length (xs @ [y]) - n) (xs @ [y]) @ v # vs \\<in> traces P\n\ngoal (1 subgoal):\n 1. v = None", "by (rule seq_sentences_none)"], ["proof (state)\nthis:\n  v = None\n\ngoal (2 subgoals):\n 1. length (xs @ [y]) - n < length ws \\<Longrightarrow> False\n 2. length ws < length (xs @ [y]) - n \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  v = None\n\ngoal (2 subgoals):\n 1. length (xs @ [y]) - n < length ws \\<Longrightarrow> False\n 2. length ws < length (xs @ [y]) - n \\<Longrightarrow> False", "have \"weakly_sequential P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. weakly_sequential P", "using C"], ["proof (prove)\nusing this:\n  sequential P\n\ngoal (1 subgoal):\n 1. weakly_sequential P", "by (rule seq_implies_weakly_seq)"], ["proof (state)\nthis:\n  weakly_sequential P\n\ngoal (2 subgoals):\n 1. length (xs @ [y]) - n < length ws \\<Longrightarrow> False\n 2. length ws < length (xs @ [y]) - n \\<Longrightarrow> False", "hence \"None \\<notin> set ws\""], ["proof (prove)\nusing this:\n  weakly_sequential P\n\ngoal (1 subgoal):\n 1. None \\<notin> set ws", "using F"], ["proof (prove)\nusing this:\n  weakly_sequential P\n  ws \\<in> sentences P\n\ngoal (1 subgoal):\n 1. None \\<notin> set ws", "by (rule weakly_seq_sentences_none)"], ["proof (state)\nthis:\n  None \\<notin> set ws\n\ngoal (2 subgoals):\n 1. length (xs @ [y]) - n < length ws \\<Longrightarrow> False\n 2. length ws < length (xs @ [y]) - n \\<Longrightarrow> False", "hence \"v \\<noteq> None\""], ["proof (prove)\nusing this:\n  None \\<notin> set ws\n\ngoal (1 subgoal):\n 1. v \\<noteq> None", "using S"], ["proof (prove)\nusing this:\n  None \\<notin> set ws\n  ws = take (length (xs @ [y]) - n) (xs @ [y]) @ v # vs\n\ngoal (1 subgoal):\n 1. v \\<noteq> None", "by (rule_tac not_sym, simp)"], ["proof (state)\nthis:\n  v \\<noteq> None\n\ngoal (2 subgoals):\n 1. length (xs @ [y]) - n < length ws \\<Longrightarrow> False\n 2. length ws < length (xs @ [y]) - n \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  v = None\n  v \\<noteq> None", "show False"], ["proof (prove)\nusing this:\n  v = None\n  v \\<noteq> None\n\ngoal (1 subgoal):\n 1. False", "by contradiction"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. length ws < length (xs @ [y]) - n \\<Longrightarrow> False", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. length ws < length (xs @ [y]) - n \\<Longrightarrow> False", "assume Q: \"length ws < length (xs @ [y]) - n\""], ["proof (state)\nthis:\n  length ws < length (xs @ [y]) - n\n\ngoal (1 subgoal):\n 1. length ws < length (xs @ [y]) - n \\<Longrightarrow> False", "have \"take (length (xs @ [y]) - n) (xs @ [y]) =\n        take (length (xs @ [y]) - n) (xs @ zs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. take (length (xs @ [y]) - n) (xs @ [y]) =\n    take (length (xs @ [y]) - n) (xs @ zs)", "using P"], ["proof (prove)\nusing this:\n  length (xs @ [y]) - n \\<le> length xs\n\ngoal (1 subgoal):\n 1. take (length (xs @ [y]) - n) (xs @ [y]) =\n    take (length (xs @ [y]) - n) (xs @ zs)", "by simp"], ["proof (state)\nthis:\n  take (length (xs @ [y]) - n) (xs @ [y]) =\n  take (length (xs @ [y]) - n) (xs @ zs)\n\ngoal (1 subgoal):\n 1. length ws < length (xs @ [y]) - n \\<Longrightarrow> False", "also"], ["proof (state)\nthis:\n  take (length (xs @ [y]) - n) (xs @ [y]) =\n  take (length (xs @ [y]) - n) (xs @ zs)\n\ngoal (1 subgoal):\n 1. length ws < length (xs @ [y]) - n \\<Longrightarrow> False", "have \"\\<dots> = take (length (xs @ [y]) - n) (ws @ ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. take (length (xs @ [y]) - n) (xs @ zs) =\n    take (length (xs @ [y]) - n) (ws @ ys)", "using I"], ["proof (prove)\nusing this:\n  ws @ ys = xs @ zs\n\ngoal (1 subgoal):\n 1. take (length (xs @ [y]) - n) (xs @ zs) =\n    take (length (xs @ [y]) - n) (ws @ ys)", "by simp"], ["proof (state)\nthis:\n  take (length (xs @ [y]) - n) (xs @ zs) =\n  take (length (xs @ [y]) - n) (ws @ ys)\n\ngoal (1 subgoal):\n 1. length ws < length (xs @ [y]) - n \\<Longrightarrow> False", "also"], ["proof (state)\nthis:\n  take (length (xs @ [y]) - n) (xs @ zs) =\n  take (length (xs @ [y]) - n) (ws @ ys)\n\ngoal (1 subgoal):\n 1. length ws < length (xs @ [y]) - n \\<Longrightarrow> False", "have \"\\<dots> = take (length (xs @ [y]) - n) ws @\n        take (length (xs @ [y]) - n - length ws) ys\"\n        (is \"_ = _ @ ?ys'\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. take (length (xs @ [y]) - n) (ws @ ys) =\n    take (length (xs @ [y]) - n) ws @\n    take (length (xs @ [y]) - n - length ws) ys", "by simp"], ["proof (state)\nthis:\n  take (length (xs @ [y]) - n) (ws @ ys) =\n  take (length (xs @ [y]) - n) ws @\n  take (length (xs @ [y]) - n - length ws) ys\n\ngoal (1 subgoal):\n 1. length ws < length (xs @ [y]) - n \\<Longrightarrow> False", "also"], ["proof (state)\nthis:\n  take (length (xs @ [y]) - n) (ws @ ys) =\n  take (length (xs @ [y]) - n) ws @\n  take (length (xs @ [y]) - n - length ws) ys\n\ngoal (1 subgoal):\n 1. length ws < length (xs @ [y]) - n \\<Longrightarrow> False", "have \"\\<dots> = ws @ ?ys'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. take (length (xs @ [y]) - n) ws @\n    take (length (xs @ [y]) - n - length ws) ys =\n    ws @ take (length (xs @ [y]) - n - length ws) ys", "using Q"], ["proof (prove)\nusing this:\n  length ws < length (xs @ [y]) - n\n\ngoal (1 subgoal):\n 1. take (length (xs @ [y]) - n) ws @\n    take (length (xs @ [y]) - n - length ws) ys =\n    ws @ take (length (xs @ [y]) - n - length ws) ys", "by simp"], ["proof (state)\nthis:\n  take (length (xs @ [y]) - n) ws @\n  take (length (xs @ [y]) - n - length ws) ys =\n  ws @ take (length (xs @ [y]) - n - length ws) ys\n\ngoal (1 subgoal):\n 1. length ws < length (xs @ [y]) - n \\<Longrightarrow> False", "finally"], ["proof (chain)\npicking this:\n  take (length (xs @ [y]) - n) (xs @ [y]) =\n  ws @ take (length (xs @ [y]) - n - length ws) ys", "have \"take (length (xs @ [y]) - n) (xs @ [y]) = ws @ ?ys'\""], ["proof (prove)\nusing this:\n  take (length (xs @ [y]) - n) (xs @ [y]) =\n  ws @ take (length (xs @ [y]) - n - length ws) ys\n\ngoal (1 subgoal):\n 1. take (length (xs @ [y]) - n) (xs @ [y]) =\n    ws @ take (length (xs @ [y]) - n - length ws) ys", "."], ["proof (state)\nthis:\n  take (length (xs @ [y]) - n) (xs @ [y]) =\n  ws @ take (length (xs @ [y]) - n - length ws) ys\n\ngoal (1 subgoal):\n 1. length ws < length (xs @ [y]) - n \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  take (length (xs @ [y]) - n) (xs @ [y]) =\n  ws @ take (length (xs @ [y]) - n - length ws) ys\n\ngoal (1 subgoal):\n 1. length ws < length (xs @ [y]) - n \\<Longrightarrow> False", "have \"?ys' \\<noteq> []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. take (length (xs @ [y]) - n - length ws) ys \\<noteq> []", "using Q and H"], ["proof (prove)\nusing this:\n  length ws < length (xs @ [y]) - n\n  ys \\<noteq> []\n\ngoal (1 subgoal):\n 1. take (length (xs @ [y]) - n - length ws) ys \\<noteq> []", "by simp"], ["proof (state)\nthis:\n  take (length (xs @ [y]) - n - length ws) ys \\<noteq> []\n\ngoal (1 subgoal):\n 1. length ws < length (xs @ [y]) - n \\<Longrightarrow> False", "hence \"\\<exists>v vs. ?ys' = v # vs\""], ["proof (prove)\nusing this:\n  take (length (xs @ [y]) - n - length ws) ys \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<exists>v vs. take (length (xs @ [y]) - n - length ws) ys = v # vs", "by (cases ?ys', simp_all)"], ["proof (state)\nthis:\n  \\<exists>v vs. take (length (xs @ [y]) - n - length ws) ys = v # vs\n\ngoal (1 subgoal):\n 1. length ws < length (xs @ [y]) - n \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  \\<exists>v vs. take (length (xs @ [y]) - n - length ws) ys = v # vs", "obtain v and vs where \"?ys' = v # vs\""], ["proof (prove)\nusing this:\n  \\<exists>v vs. take (length (xs @ [y]) - n - length ws) ys = v # vs\n\ngoal (1 subgoal):\n 1. (\\<And>v vs.\n        take (length (xs @ [y]) - n - length ws) ys =\n        v # vs \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  take (length (xs @ [y]) - n - length ws) ys = v # vs\n\ngoal (1 subgoal):\n 1. length ws < length (xs @ [y]) - n \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  take (length (xs @ [y]) - n) (xs @ [y]) =\n  ws @ take (length (xs @ [y]) - n - length ws) ys\n  take (length (xs @ [y]) - n - length ws) ys = v # vs", "have S: \"take (length (xs @ [y]) - n) (xs @ [y]) = ws @ v # vs\""], ["proof (prove)\nusing this:\n  take (length (xs @ [y]) - n) (xs @ [y]) =\n  ws @ take (length (xs @ [y]) - n - length ws) ys\n  take (length (xs @ [y]) - n - length ws) ys = v # vs\n\ngoal (1 subgoal):\n 1. take (length (xs @ [y]) - n) (xs @ [y]) = ws @ v # vs", "by simp"], ["proof (state)\nthis:\n  take (length (xs @ [y]) - n) (xs @ [y]) = ws @ v # vs\n\ngoal (1 subgoal):\n 1. length ws < length (xs @ [y]) - n \\<Longrightarrow> False", "hence \"(ws @ v # vs) @ [None] \\<in> traces P\""], ["proof (prove)\nusing this:\n  take (length (xs @ [y]) - n) (xs @ [y]) = ws @ v # vs\n\ngoal (1 subgoal):\n 1. (ws @ v # vs) @ [None] \\<in> traces P", "using O"], ["proof (prove)\nusing this:\n  take (length (xs @ [y]) - n) (xs @ [y]) = ws @ v # vs\n  take (length (xs @ [y]) - n) (xs @ [y]) \\<in> sentences P \\<and>\n  (drop (length (xs @ [y]) - n) (xs @ [y]), W) \\<in> failures Q\n\ngoal (1 subgoal):\n 1. (ws @ v # vs) @ [None] \\<in> traces P", "by (simp add: sentences_def)"], ["proof (state)\nthis:\n  (ws @ v # vs) @ [None] \\<in> traces P\n\ngoal (1 subgoal):\n 1. length ws < length (xs @ [y]) - n \\<Longrightarrow> False", "hence \"ws @ v # vs \\<in> traces P\""], ["proof (prove)\nusing this:\n  (ws @ v # vs) @ [None] \\<in> traces P\n\ngoal (1 subgoal):\n 1. ws @ v # vs \\<in> traces P", "by (rule process_rule_2_traces)"], ["proof (state)\nthis:\n  ws @ v # vs \\<in> traces P\n\ngoal (1 subgoal):\n 1. length ws < length (xs @ [y]) - n \\<Longrightarrow> False", "with C and F"], ["proof (chain)\npicking this:\n  sequential P\n  ws \\<in> sentences P\n  ws @ v # vs \\<in> traces P", "have T: \"v = None\""], ["proof (prove)\nusing this:\n  sequential P\n  ws \\<in> sentences P\n  ws @ v # vs \\<in> traces P\n\ngoal (1 subgoal):\n 1. v = None", "by (rule seq_sentences_none)"], ["proof (state)\nthis:\n  v = None\n\ngoal (1 subgoal):\n 1. length ws < length (xs @ [y]) - n \\<Longrightarrow> False", "have \"weakly_sequential P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. weakly_sequential P", "using C"], ["proof (prove)\nusing this:\n  sequential P\n\ngoal (1 subgoal):\n 1. weakly_sequential P", "by (rule seq_implies_weakly_seq)"], ["proof (state)\nthis:\n  weakly_sequential P\n\ngoal (1 subgoal):\n 1. length ws < length (xs @ [y]) - n \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  weakly_sequential P\n\ngoal (1 subgoal):\n 1. length ws < length (xs @ [y]) - n \\<Longrightarrow> False", "have \"take (length (xs @ [y]) - n) (xs @ [y]) \\<in> sentences P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. take (length (xs @ [y]) - n) (xs @ [y]) \\<in> sentences P", "using O"], ["proof (prove)\nusing this:\n  take (length (xs @ [y]) - n) (xs @ [y]) \\<in> sentences P \\<and>\n  (drop (length (xs @ [y]) - n) (xs @ [y]), W) \\<in> failures Q\n\ngoal (1 subgoal):\n 1. take (length (xs @ [y]) - n) (xs @ [y]) \\<in> sentences P", ".."], ["proof (state)\nthis:\n  take (length (xs @ [y]) - n) (xs @ [y]) \\<in> sentences P\n\ngoal (1 subgoal):\n 1. length ws < length (xs @ [y]) - n \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  weakly_sequential P\n  take (length (xs @ [y]) - n) (xs @ [y]) \\<in> sentences P", "have \"None \\<notin> set (take (length (xs @ [y]) - n) (xs @ [y]))\""], ["proof (prove)\nusing this:\n  weakly_sequential P\n  take (length (xs @ [y]) - n) (xs @ [y]) \\<in> sentences P\n\ngoal (1 subgoal):\n 1. None \\<notin> set (take (length (xs @ [y]) - n) (xs @ [y]))", "by (rule weakly_seq_sentences_none)"], ["proof (state)\nthis:\n  None \\<notin> set (take (length (xs @ [y]) - n) (xs @ [y]))\n\ngoal (1 subgoal):\n 1. length ws < length (xs @ [y]) - n \\<Longrightarrow> False", "hence \"v \\<noteq> None\""], ["proof (prove)\nusing this:\n  None \\<notin> set (take (length (xs @ [y]) - n) (xs @ [y]))\n\ngoal (1 subgoal):\n 1. v \\<noteq> None", "using S"], ["proof (prove)\nusing this:\n  None \\<notin> set (take (length (xs @ [y]) - n) (xs @ [y]))\n  take (length (xs @ [y]) - n) (xs @ [y]) = ws @ v # vs\n\ngoal (1 subgoal):\n 1. v \\<noteq> None", "by (rule_tac not_sym, simp)"], ["proof (state)\nthis:\n  v \\<noteq> None\n\ngoal (1 subgoal):\n 1. length ws < length (xs @ [y]) - n \\<Longrightarrow> False", "thus False"], ["proof (prove)\nusing this:\n  v \\<noteq> None\n\ngoal (1 subgoal):\n 1. False", "using T"], ["proof (prove)\nusing this:\n  v \\<noteq> None\n  v = None\n\ngoal (1 subgoal):\n 1. False", "by contradiction"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  length (xs @ [y]) - n = length ws\n\ngoal (1 subgoal):\n 1. \\<not> length xs < length ws \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs Y)\n    \\<in> seq_comp_failures P Q", "hence \"(drop (length ws) (xs @ [y]), W) \\<in> failures Q\""], ["proof (prove)\nusing this:\n  length (xs @ [y]) - n = length ws\n\ngoal (1 subgoal):\n 1. (drop (length ws) (xs @ [y]), W) \\<in> failures Q", "using O"], ["proof (prove)\nusing this:\n  length (xs @ [y]) - n = length ws\n  take (length (xs @ [y]) - n) (xs @ [y]) \\<in> sentences P \\<and>\n  (drop (length (xs @ [y]) - n) (xs @ [y]), W) \\<in> failures Q\n\ngoal (1 subgoal):\n 1. (drop (length ws) (xs @ [y]), W) \\<in> failures Q", "by simp"], ["proof (state)\nthis:\n  (drop (length ws) (xs @ [y]), W) \\<in> failures Q\n\ngoal (1 subgoal):\n 1. \\<not> length xs < length ws \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs Y)\n    \\<in> seq_comp_failures P Q", "hence \"(drop (length ws) xs @ [y], W) \\<in> failures Q\"\n      (is \"(?xs' @ _, _) \\<in> _\")"], ["proof (prove)\nusing this:\n  (drop (length ws) (xs @ [y]), W) \\<in> failures Q\n\ngoal (1 subgoal):\n 1. (drop (length ws) xs @ [y], W) \\<in> failures Q", "using False"], ["proof (prove)\nusing this:\n  (drop (length ws) (xs @ [y]), W) \\<in> failures Q\n  \\<not> length xs < length ws\n\ngoal (1 subgoal):\n 1. (drop (length ws) xs @ [y], W) \\<in> failures Q", "by simp"], ["proof (state)\nthis:\n  (drop (length ws) xs @ [y], W) \\<in> failures Q\n\ngoal (1 subgoal):\n 1. \\<not> length xs < length ws \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs Y)\n    \\<in> seq_comp_failures P Q", "hence \"([y], W) \\<in> futures Q ?xs'\""], ["proof (prove)\nusing this:\n  (drop (length ws) xs @ [y], W) \\<in> failures Q\n\ngoal (1 subgoal):\n 1. ([y], W) \\<in> futures Q (drop (length ws) xs)", "by (simp add: futures_def)"], ["proof (state)\nthis:\n  ([y], W) \\<in> futures Q (drop (length ws) xs)\n\ngoal (1 subgoal):\n 1. \\<not> length xs < length ws \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs Y)\n    \\<in> seq_comp_failures P Q", "moreover"], ["proof (state)\nthis:\n  ([y], W) \\<in> futures Q (drop (length ws) xs)\n\ngoal (1 subgoal):\n 1. \\<not> length xs < length ws \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs Y)\n    \\<in> seq_comp_failures P Q", "have \"drop (length ws) (ws @ ys) = drop (length ws) (xs @ zs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. drop (length ws) (ws @ ys) = drop (length ws) (xs @ zs)", "using I"], ["proof (prove)\nusing this:\n  ws @ ys = xs @ zs\n\ngoal (1 subgoal):\n 1. drop (length ws) (ws @ ys) = drop (length ws) (xs @ zs)", "by simp"], ["proof (state)\nthis:\n  drop (length ws) (ws @ ys) = drop (length ws) (xs @ zs)\n\ngoal (1 subgoal):\n 1. \\<not> length xs < length ws \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs Y)\n    \\<in> seq_comp_failures P Q", "hence \"ys = ?xs' @ zs\""], ["proof (prove)\nusing this:\n  drop (length ws) (ws @ ys) = drop (length ws) (xs @ zs)\n\ngoal (1 subgoal):\n 1. ys = drop (length ws) xs @ zs", "using False"], ["proof (prove)\nusing this:\n  drop (length ws) (ws @ ys) = drop (length ws) (xs @ zs)\n  \\<not> length xs < length ws\n\ngoal (1 subgoal):\n 1. ys = drop (length ws) xs @ zs", "by simp"], ["proof (state)\nthis:\n  ys = drop (length ws) xs @ zs\n\ngoal (1 subgoal):\n 1. \\<not> length xs < length ws \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs Y)\n    \\<in> seq_comp_failures P Q", "hence \"(?xs' @ zs, Y) \\<in> failures Q\""], ["proof (prove)\nusing this:\n  ys = drop (length ws) xs @ zs\n\ngoal (1 subgoal):\n 1. (drop (length ws) xs @ zs, Y) \\<in> failures Q", "using G"], ["proof (prove)\nusing this:\n  ys = drop (length ws) xs @ zs\n  (ys, Y) \\<in> failures Q\n\ngoal (1 subgoal):\n 1. (drop (length ws) xs @ zs, Y) \\<in> failures Q", "by simp"], ["proof (state)\nthis:\n  (drop (length ws) xs @ zs, Y) \\<in> failures Q\n\ngoal (1 subgoal):\n 1. \\<not> length xs < length ws \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs Y)\n    \\<in> seq_comp_failures P Q", "hence \"(zs, Y) \\<in> futures Q ?xs'\""], ["proof (prove)\nusing this:\n  (drop (length ws) xs @ zs, Y) \\<in> failures Q\n\ngoal (1 subgoal):\n 1. (zs, Y) \\<in> futures Q (drop (length ws) xs)", "by (simp add: futures_def)"], ["proof (state)\nthis:\n  (zs, Y) \\<in> futures Q (drop (length ws) xs)\n\ngoal (1 subgoal):\n 1. \\<not> length xs < length ws \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs Y)\n    \\<in> seq_comp_failures P Q", "ultimately"], ["proof (chain)\npicking this:\n  ([y], W) \\<in> futures Q (drop (length ws) xs)\n  (zs, Y) \\<in> futures Q (drop (length ws) xs)", "have \"(y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs Y)\n      \\<in> futures Q ?xs'\""], ["proof (prove)\nusing this:\n  ([y], W) \\<in> futures Q (drop (length ws) xs)\n  (zs, Y) \\<in> futures Q (drop (length ws) xs)\n\ngoal (1 subgoal):\n 1. (y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs Y)\n    \\<in> futures Q (drop (length ws) xs)", "using E"], ["proof (prove)\nusing this:\n  ([y], W) \\<in> futures Q (drop (length ws) xs)\n  (zs, Y) \\<in> futures Q (drop (length ws) xs)\n  secure Q I D\n\ngoal (1 subgoal):\n 1. (y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs Y)\n    \\<in> futures Q (drop (length ws) xs)", "by (simp add: secure_def)"], ["proof (state)\nthis:\n  (y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs Y)\n  \\<in> futures Q (drop (length ws) xs)\n\ngoal (1 subgoal):\n 1. \\<not> length xs < length ws \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs Y)\n    \\<in> seq_comp_failures P Q", "hence \"(?xs' @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs Y)\n      \\<in> failures Q\""], ["proof (prove)\nusing this:\n  (y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs Y)\n  \\<in> futures Q (drop (length ws) xs)\n\ngoal (1 subgoal):\n 1. (drop (length ws) xs @ y # ipurge_tr I D (D y) zs,\n     ipurge_ref I D (D y) zs Y)\n    \\<in> failures Q", "by (simp add: futures_def)"], ["proof (state)\nthis:\n  (drop (length ws) xs @ y # ipurge_tr I D (D y) zs,\n   ipurge_ref I D (D y) zs Y)\n  \\<in> failures Q\n\ngoal (1 subgoal):\n 1. \\<not> length xs < length ws \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs Y)\n    \\<in> seq_comp_failures P Q", "moreover"], ["proof (state)\nthis:\n  (drop (length ws) xs @ y # ipurge_tr I D (D y) zs,\n   ipurge_ref I D (D y) zs Y)\n  \\<in> failures Q\n\ngoal (1 subgoal):\n 1. \\<not> length xs < length ws \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs Y)\n    \\<in> seq_comp_failures P Q", "have \"?xs' @ y # ipurge_tr I D (D y) zs \\<noteq> []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. drop (length ws) xs @ y # ipurge_tr I D (D y) zs \\<noteq> []", "by simp"], ["proof (state)\nthis:\n  drop (length ws) xs @ y # ipurge_tr I D (D y) zs \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<not> length xs < length ws \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs Y)\n    \\<in> seq_comp_failures P Q", "ultimately"], ["proof (chain)\npicking this:\n  (drop (length ws) xs @ y # ipurge_tr I D (D y) zs,\n   ipurge_ref I D (D y) zs Y)\n  \\<in> failures Q\n  drop (length ws) xs @ y # ipurge_tr I D (D y) zs \\<noteq> []", "have \"(ws @ ?xs' @ y # ipurge_tr I D (D y) zs,\n      ipurge_ref I D (D y) zs Y) \\<in> seq_comp_failures P Q\""], ["proof (prove)\nusing this:\n  (drop (length ws) xs @ y # ipurge_tr I D (D y) zs,\n   ipurge_ref I D (D y) zs Y)\n  \\<in> failures Q\n  drop (length ws) xs @ y # ipurge_tr I D (D y) zs \\<noteq> []\n\ngoal (1 subgoal):\n 1. (ws @ drop (length ws) xs @ y # ipurge_tr I D (D y) zs,\n     ipurge_ref I D (D y) zs Y)\n    \\<in> seq_comp_failures P Q", "by (rule SCF_R3 [OF F])"], ["proof (state)\nthis:\n  (ws @ drop (length ws) xs @ y # ipurge_tr I D (D y) zs,\n   ipurge_ref I D (D y) zs Y)\n  \\<in> seq_comp_failures P Q\n\ngoal (1 subgoal):\n 1. \\<not> length xs < length ws \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs Y)\n    \\<in> seq_comp_failures P Q", "hence \"((ws @ ?xs') @ y # ipurge_tr I D (D y) zs,\n      ipurge_ref I D (D y) zs Y) \\<in> seq_comp_failures P Q\""], ["proof (prove)\nusing this:\n  (ws @ drop (length ws) xs @ y # ipurge_tr I D (D y) zs,\n   ipurge_ref I D (D y) zs Y)\n  \\<in> seq_comp_failures P Q\n\ngoal (1 subgoal):\n 1. ((ws @ drop (length ws) xs) @ y # ipurge_tr I D (D y) zs,\n     ipurge_ref I D (D y) zs Y)\n    \\<in> seq_comp_failures P Q", "by simp"], ["proof (state)\nthis:\n  ((ws @ drop (length ws) xs) @ y # ipurge_tr I D (D y) zs,\n   ipurge_ref I D (D y) zs Y)\n  \\<in> seq_comp_failures P Q\n\ngoal (1 subgoal):\n 1. \\<not> length xs < length ws \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs Y)\n    \\<in> seq_comp_failures P Q", "moreover"], ["proof (state)\nthis:\n  ((ws @ drop (length ws) xs) @ y # ipurge_tr I D (D y) zs,\n   ipurge_ref I D (D y) zs Y)\n  \\<in> seq_comp_failures P Q\n\ngoal (1 subgoal):\n 1. \\<not> length xs < length ws \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs Y)\n    \\<in> seq_comp_failures P Q", "have \"xs = take (length ws) xs @ ?xs'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs = take (length ws) xs @ drop (length ws) xs", "by simp"], ["proof (state)\nthis:\n  xs = take (length ws) xs @ drop (length ws) xs\n\ngoal (1 subgoal):\n 1. \\<not> length xs < length ws \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs Y)\n    \\<in> seq_comp_failures P Q", "hence \"xs = take (length ws) (xs @ zs) @ ?xs'\""], ["proof (prove)\nusing this:\n  xs = take (length ws) xs @ drop (length ws) xs\n\ngoal (1 subgoal):\n 1. xs = take (length ws) (xs @ zs) @ drop (length ws) xs", "using False"], ["proof (prove)\nusing this:\n  xs = take (length ws) xs @ drop (length ws) xs\n  \\<not> length xs < length ws\n\ngoal (1 subgoal):\n 1. xs = take (length ws) (xs @ zs) @ drop (length ws) xs", "by simp"], ["proof (state)\nthis:\n  xs = take (length ws) (xs @ zs) @ drop (length ws) xs\n\ngoal (1 subgoal):\n 1. \\<not> length xs < length ws \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs Y)\n    \\<in> seq_comp_failures P Q", "hence \"xs = take (length ws) (ws @ ys) @ ?xs'\""], ["proof (prove)\nusing this:\n  xs = take (length ws) (xs @ zs) @ drop (length ws) xs\n\ngoal (1 subgoal):\n 1. xs = take (length ws) (ws @ ys) @ drop (length ws) xs", "using I"], ["proof (prove)\nusing this:\n  xs = take (length ws) (xs @ zs) @ drop (length ws) xs\n  ws @ ys = xs @ zs\n\ngoal (1 subgoal):\n 1. xs = take (length ws) (ws @ ys) @ drop (length ws) xs", "by simp"], ["proof (state)\nthis:\n  xs = take (length ws) (ws @ ys) @ drop (length ws) xs\n\ngoal (1 subgoal):\n 1. \\<not> length xs < length ws \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs Y)\n    \\<in> seq_comp_failures P Q", "hence \"xs = ws @ ?xs'\""], ["proof (prove)\nusing this:\n  xs = take (length ws) (ws @ ys) @ drop (length ws) xs\n\ngoal (1 subgoal):\n 1. xs = ws @ drop (length ws) xs", "by simp"], ["proof (state)\nthis:\n  xs = ws @ drop (length ws) xs\n\ngoal (1 subgoal):\n 1. \\<not> length xs < length ws \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs Y)\n    \\<in> seq_comp_failures P Q", "ultimately"], ["proof (chain)\npicking this:\n  ((ws @ drop (length ws) xs) @ y # ipurge_tr I D (D y) zs,\n   ipurge_ref I D (D y) zs Y)\n  \\<in> seq_comp_failures P Q\n  xs = ws @ drop (length ws) xs", "show ?thesis"], ["proof (prove)\nusing this:\n  ((ws @ drop (length ws) xs) @ y # ipurge_tr I D (D y) zs,\n   ipurge_ref I D (D y) zs Y)\n  \\<in> seq_comp_failures P Q\n  xs = ws @ drop (length ws) xs\n\ngoal (1 subgoal):\n 1. (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs Y)\n    \\<in> seq_comp_failures P Q", "by simp"], ["proof (state)\nthis:\n  (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs Y)\n  \\<in> seq_comp_failures P Q\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs Y)\n  \\<in> seq_comp_failures P Q\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma seq_comp_secure_aux_2 [rule_format]:\n  assumes\n    A: \"secure_termination I D\" and\n    B: \"ref_union_closed P\" and\n    C: \"sequential P\" and\n    D: \"secure P I D\" and\n    E: \"secure Q I D\"\n  shows \"(ws, Z) \\<in> seq_comp_failures P Q \\<Longrightarrow>\n    ws = xs @ zs \\<longrightarrow>\n    (xs @ [y], {}) \\<in> seq_comp_failures P Q \\<longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs Z)\n      \\<in> seq_comp_failures P Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (ws, Z) \\<in> seq_comp_failures P Q \\<Longrightarrow>\n    ws = xs @ zs \\<longrightarrow>\n    (xs @ [y], {}) \\<in> seq_comp_failures P Q \\<longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs Z)\n    \\<in> seq_comp_failures P Q", "proof (erule seq_comp_failures.induct, (rule_tac [!] impI)+, simp_all, (erule conjE)+)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>xsa X.\n       \\<lbrakk>xs @ zs \\<notin> sentences P; (xs @ zs, X) \\<in> failures P;\n        xsa = xs @ zs; (xs @ [y], {}) \\<in> seq_comp_failures P Q;\n        None \\<notin> set xs; None \\<notin> set zs\\<rbrakk>\n       \\<Longrightarrow> (xs @ y # ipurge_tr I D (D y) zs,\n                          ipurge_ref I D (D y) zs X)\n                         \\<in> seq_comp_failures P Q\n 2. \\<And>xsa X Y.\n       \\<lbrakk>xs @ zs \\<in> sentences P; (xs @ zs, X) \\<in> failures P;\n        ([], Y) \\<in> failures Q; xsa = xs @ zs;\n        (xs @ [y], {}) \\<in> seq_comp_failures P Q\\<rbrakk>\n       \\<Longrightarrow> (xs @ y # ipurge_tr I D (D y) zs,\n                          ipurge_ref I D (D y) zs\n                           (insert None X \\<inter> Y))\n                         \\<in> seq_comp_failures P Q\n 3. \\<And>xsa ys Y.\n       \\<lbrakk>xsa \\<in> sentences P; (ys, Y) \\<in> failures Q;\n        ys \\<noteq> []; xsa @ ys = xs @ zs;\n        (xs @ [y], {}) \\<in> seq_comp_failures P Q\\<rbrakk>\n       \\<Longrightarrow> (xs @ y # ipurge_tr I D (D y) zs,\n                          ipurge_ref I D (D y) zs Y)\n                         \\<in> seq_comp_failures P Q\n 4. \\<And>xsa X Y.\n       \\<lbrakk>(xs @ zs, X) \\<in> seq_comp_failures P Q;\n        (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs X)\n        \\<in> seq_comp_failures P Q;\n        (xs @ zs, Y) \\<in> seq_comp_failures P Q;\n        (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs Y)\n        \\<in> seq_comp_failures P Q;\n        xsa = xs @ zs; (xs @ [y], {}) \\<in> seq_comp_failures P Q\\<rbrakk>\n       \\<Longrightarrow> (xs @ y # ipurge_tr I D (D y) zs,\n                          ipurge_ref I D (D y) zs (X \\<union> Y))\n                         \\<in> seq_comp_failures P Q", "fix X"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>xsa X.\n       \\<lbrakk>xs @ zs \\<notin> sentences P; (xs @ zs, X) \\<in> failures P;\n        xsa = xs @ zs; (xs @ [y], {}) \\<in> seq_comp_failures P Q;\n        None \\<notin> set xs; None \\<notin> set zs\\<rbrakk>\n       \\<Longrightarrow> (xs @ y # ipurge_tr I D (D y) zs,\n                          ipurge_ref I D (D y) zs X)\n                         \\<in> seq_comp_failures P Q\n 2. \\<And>xsa X Y.\n       \\<lbrakk>xs @ zs \\<in> sentences P; (xs @ zs, X) \\<in> failures P;\n        ([], Y) \\<in> failures Q; xsa = xs @ zs;\n        (xs @ [y], {}) \\<in> seq_comp_failures P Q\\<rbrakk>\n       \\<Longrightarrow> (xs @ y # ipurge_tr I D (D y) zs,\n                          ipurge_ref I D (D y) zs\n                           (insert None X \\<inter> Y))\n                         \\<in> seq_comp_failures P Q\n 3. \\<And>xsa ys Y.\n       \\<lbrakk>xsa \\<in> sentences P; (ys, Y) \\<in> failures Q;\n        ys \\<noteq> []; xsa @ ys = xs @ zs;\n        (xs @ [y], {}) \\<in> seq_comp_failures P Q\\<rbrakk>\n       \\<Longrightarrow> (xs @ y # ipurge_tr I D (D y) zs,\n                          ipurge_ref I D (D y) zs Y)\n                         \\<in> seq_comp_failures P Q\n 4. \\<And>xsa X Y.\n       \\<lbrakk>(xs @ zs, X) \\<in> seq_comp_failures P Q;\n        (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs X)\n        \\<in> seq_comp_failures P Q;\n        (xs @ zs, Y) \\<in> seq_comp_failures P Q;\n        (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs Y)\n        \\<in> seq_comp_failures P Q;\n        xsa = xs @ zs; (xs @ [y], {}) \\<in> seq_comp_failures P Q\\<rbrakk>\n       \\<Longrightarrow> (xs @ y # ipurge_tr I D (D y) zs,\n                          ipurge_ref I D (D y) zs (X \\<union> Y))\n                         \\<in> seq_comp_failures P Q", "assume\n   \"xs @ zs \\<notin> sentences P\" and\n   \"(xs @ zs, X) \\<in> failures P\" and\n   \"None \\<notin> set xs\" and\n   \"None \\<notin> set zs\" and\n   \"(xs @ [y], {}) \\<in> seq_comp_failures P Q\""], ["proof (state)\nthis:\n  xs @ zs \\<notin> sentences P\n  (xs @ zs, X) \\<in> failures P\n  None \\<notin> set xs\n  None \\<notin> set zs\n  (xs @ [y], {}) \\<in> seq_comp_failures P Q\n\ngoal (4 subgoals):\n 1. \\<And>xsa X.\n       \\<lbrakk>xs @ zs \\<notin> sentences P; (xs @ zs, X) \\<in> failures P;\n        xsa = xs @ zs; (xs @ [y], {}) \\<in> seq_comp_failures P Q;\n        None \\<notin> set xs; None \\<notin> set zs\\<rbrakk>\n       \\<Longrightarrow> (xs @ y # ipurge_tr I D (D y) zs,\n                          ipurge_ref I D (D y) zs X)\n                         \\<in> seq_comp_failures P Q\n 2. \\<And>xsa X Y.\n       \\<lbrakk>xs @ zs \\<in> sentences P; (xs @ zs, X) \\<in> failures P;\n        ([], Y) \\<in> failures Q; xsa = xs @ zs;\n        (xs @ [y], {}) \\<in> seq_comp_failures P Q\\<rbrakk>\n       \\<Longrightarrow> (xs @ y # ipurge_tr I D (D y) zs,\n                          ipurge_ref I D (D y) zs\n                           (insert None X \\<inter> Y))\n                         \\<in> seq_comp_failures P Q\n 3. \\<And>xsa ys Y.\n       \\<lbrakk>xsa \\<in> sentences P; (ys, Y) \\<in> failures Q;\n        ys \\<noteq> []; xsa @ ys = xs @ zs;\n        (xs @ [y], {}) \\<in> seq_comp_failures P Q\\<rbrakk>\n       \\<Longrightarrow> (xs @ y # ipurge_tr I D (D y) zs,\n                          ipurge_ref I D (D y) zs Y)\n                         \\<in> seq_comp_failures P Q\n 4. \\<And>xsa X Y.\n       \\<lbrakk>(xs @ zs, X) \\<in> seq_comp_failures P Q;\n        (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs X)\n        \\<in> seq_comp_failures P Q;\n        (xs @ zs, Y) \\<in> seq_comp_failures P Q;\n        (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs Y)\n        \\<in> seq_comp_failures P Q;\n        xsa = xs @ zs; (xs @ [y], {}) \\<in> seq_comp_failures P Q\\<rbrakk>\n       \\<Longrightarrow> (xs @ y # ipurge_tr I D (D y) zs,\n                          ipurge_ref I D (D y) zs (X \\<union> Y))\n                         \\<in> seq_comp_failures P Q", "thus \"(xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs X)\n    \\<in> seq_comp_failures P Q\""], ["proof (prove)\nusing this:\n  xs @ zs \\<notin> sentences P\n  (xs @ zs, X) \\<in> failures P\n  None \\<notin> set xs\n  None \\<notin> set zs\n  (xs @ [y], {}) \\<in> seq_comp_failures P Q\n\ngoal (1 subgoal):\n 1. (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs X)\n    \\<in> seq_comp_failures P Q", "by (rule seq_comp_secure_aux_2_case_1 [OF A C D])"], ["proof (state)\nthis:\n  (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs X)\n  \\<in> seq_comp_failures P Q\n\ngoal (3 subgoals):\n 1. \\<And>xsa X Y.\n       \\<lbrakk>xs @ zs \\<in> sentences P; (xs @ zs, X) \\<in> failures P;\n        ([], Y) \\<in> failures Q; xsa = xs @ zs;\n        (xs @ [y], {}) \\<in> seq_comp_failures P Q\\<rbrakk>\n       \\<Longrightarrow> (xs @ y # ipurge_tr I D (D y) zs,\n                          ipurge_ref I D (D y) zs\n                           (insert None X \\<inter> Y))\n                         \\<in> seq_comp_failures P Q\n 2. \\<And>xsa ys Y.\n       \\<lbrakk>xsa \\<in> sentences P; (ys, Y) \\<in> failures Q;\n        ys \\<noteq> []; xsa @ ys = xs @ zs;\n        (xs @ [y], {}) \\<in> seq_comp_failures P Q\\<rbrakk>\n       \\<Longrightarrow> (xs @ y # ipurge_tr I D (D y) zs,\n                          ipurge_ref I D (D y) zs Y)\n                         \\<in> seq_comp_failures P Q\n 3. \\<And>xsa X Y.\n       \\<lbrakk>(xs @ zs, X) \\<in> seq_comp_failures P Q;\n        (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs X)\n        \\<in> seq_comp_failures P Q;\n        (xs @ zs, Y) \\<in> seq_comp_failures P Q;\n        (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs Y)\n        \\<in> seq_comp_failures P Q;\n        xsa = xs @ zs; (xs @ [y], {}) \\<in> seq_comp_failures P Q\\<rbrakk>\n       \\<Longrightarrow> (xs @ y # ipurge_tr I D (D y) zs,\n                          ipurge_ref I D (D y) zs (X \\<union> Y))\n                         \\<in> seq_comp_failures P Q", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>xsa X Y.\n       \\<lbrakk>xs @ zs \\<in> sentences P; (xs @ zs, X) \\<in> failures P;\n        ([], Y) \\<in> failures Q; xsa = xs @ zs;\n        (xs @ [y], {}) \\<in> seq_comp_failures P Q\\<rbrakk>\n       \\<Longrightarrow> (xs @ y # ipurge_tr I D (D y) zs,\n                          ipurge_ref I D (D y) zs\n                           (insert None X \\<inter> Y))\n                         \\<in> seq_comp_failures P Q\n 2. \\<And>xsa ys Y.\n       \\<lbrakk>xsa \\<in> sentences P; (ys, Y) \\<in> failures Q;\n        ys \\<noteq> []; xsa @ ys = xs @ zs;\n        (xs @ [y], {}) \\<in> seq_comp_failures P Q\\<rbrakk>\n       \\<Longrightarrow> (xs @ y # ipurge_tr I D (D y) zs,\n                          ipurge_ref I D (D y) zs Y)\n                         \\<in> seq_comp_failures P Q\n 3. \\<And>xsa X Y.\n       \\<lbrakk>(xs @ zs, X) \\<in> seq_comp_failures P Q;\n        (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs X)\n        \\<in> seq_comp_failures P Q;\n        (xs @ zs, Y) \\<in> seq_comp_failures P Q;\n        (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs Y)\n        \\<in> seq_comp_failures P Q;\n        xsa = xs @ zs; (xs @ [y], {}) \\<in> seq_comp_failures P Q\\<rbrakk>\n       \\<Longrightarrow> (xs @ y # ipurge_tr I D (D y) zs,\n                          ipurge_ref I D (D y) zs (X \\<union> Y))\n                         \\<in> seq_comp_failures P Q", "fix X Y"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>xsa X Y.\n       \\<lbrakk>xs @ zs \\<in> sentences P; (xs @ zs, X) \\<in> failures P;\n        ([], Y) \\<in> failures Q; xsa = xs @ zs;\n        (xs @ [y], {}) \\<in> seq_comp_failures P Q\\<rbrakk>\n       \\<Longrightarrow> (xs @ y # ipurge_tr I D (D y) zs,\n                          ipurge_ref I D (D y) zs\n                           (insert None X \\<inter> Y))\n                         \\<in> seq_comp_failures P Q\n 2. \\<And>xsa ys Y.\n       \\<lbrakk>xsa \\<in> sentences P; (ys, Y) \\<in> failures Q;\n        ys \\<noteq> []; xsa @ ys = xs @ zs;\n        (xs @ [y], {}) \\<in> seq_comp_failures P Q\\<rbrakk>\n       \\<Longrightarrow> (xs @ y # ipurge_tr I D (D y) zs,\n                          ipurge_ref I D (D y) zs Y)\n                         \\<in> seq_comp_failures P Q\n 3. \\<And>xsa X Y.\n       \\<lbrakk>(xs @ zs, X) \\<in> seq_comp_failures P Q;\n        (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs X)\n        \\<in> seq_comp_failures P Q;\n        (xs @ zs, Y) \\<in> seq_comp_failures P Q;\n        (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs Y)\n        \\<in> seq_comp_failures P Q;\n        xsa = xs @ zs; (xs @ [y], {}) \\<in> seq_comp_failures P Q\\<rbrakk>\n       \\<Longrightarrow> (xs @ y # ipurge_tr I D (D y) zs,\n                          ipurge_ref I D (D y) zs (X \\<union> Y))\n                         \\<in> seq_comp_failures P Q", "assume\n   \"xs @ zs \\<in> sentences P\" and\n   \"(xs @ zs, X) \\<in> failures P\" and\n   \"([], Y) \\<in> failures Q\" and\n   \"(xs @ [y], {}) \\<in> seq_comp_failures P Q\""], ["proof (state)\nthis:\n  xs @ zs \\<in> sentences P\n  (xs @ zs, X) \\<in> failures P\n  ([], Y) \\<in> failures Q\n  (xs @ [y], {}) \\<in> seq_comp_failures P Q\n\ngoal (3 subgoals):\n 1. \\<And>xsa X Y.\n       \\<lbrakk>xs @ zs \\<in> sentences P; (xs @ zs, X) \\<in> failures P;\n        ([], Y) \\<in> failures Q; xsa = xs @ zs;\n        (xs @ [y], {}) \\<in> seq_comp_failures P Q\\<rbrakk>\n       \\<Longrightarrow> (xs @ y # ipurge_tr I D (D y) zs,\n                          ipurge_ref I D (D y) zs\n                           (insert None X \\<inter> Y))\n                         \\<in> seq_comp_failures P Q\n 2. \\<And>xsa ys Y.\n       \\<lbrakk>xsa \\<in> sentences P; (ys, Y) \\<in> failures Q;\n        ys \\<noteq> []; xsa @ ys = xs @ zs;\n        (xs @ [y], {}) \\<in> seq_comp_failures P Q\\<rbrakk>\n       \\<Longrightarrow> (xs @ y # ipurge_tr I D (D y) zs,\n                          ipurge_ref I D (D y) zs Y)\n                         \\<in> seq_comp_failures P Q\n 3. \\<And>xsa X Y.\n       \\<lbrakk>(xs @ zs, X) \\<in> seq_comp_failures P Q;\n        (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs X)\n        \\<in> seq_comp_failures P Q;\n        (xs @ zs, Y) \\<in> seq_comp_failures P Q;\n        (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs Y)\n        \\<in> seq_comp_failures P Q;\n        xsa = xs @ zs; (xs @ [y], {}) \\<in> seq_comp_failures P Q\\<rbrakk>\n       \\<Longrightarrow> (xs @ y # ipurge_tr I D (D y) zs,\n                          ipurge_ref I D (D y) zs (X \\<union> Y))\n                         \\<in> seq_comp_failures P Q", "thus \"(xs @ y # ipurge_tr I D (D y) zs,\n    ipurge_ref I D (D y) zs (insert None X \\<inter> Y)) \\<in> seq_comp_failures P Q\""], ["proof (prove)\nusing this:\n  xs @ zs \\<in> sentences P\n  (xs @ zs, X) \\<in> failures P\n  ([], Y) \\<in> failures Q\n  (xs @ [y], {}) \\<in> seq_comp_failures P Q\n\ngoal (1 subgoal):\n 1. (xs @ y # ipurge_tr I D (D y) zs,\n     ipurge_ref I D (D y) zs (insert None X \\<inter> Y))\n    \\<in> seq_comp_failures P Q", "by (rule seq_comp_secure_aux_2_case_2 [OF A C D E])"], ["proof (state)\nthis:\n  (xs @ y # ipurge_tr I D (D y) zs,\n   ipurge_ref I D (D y) zs (insert None X \\<inter> Y))\n  \\<in> seq_comp_failures P Q\n\ngoal (2 subgoals):\n 1. \\<And>xsa ys Y.\n       \\<lbrakk>xsa \\<in> sentences P; (ys, Y) \\<in> failures Q;\n        ys \\<noteq> []; xsa @ ys = xs @ zs;\n        (xs @ [y], {}) \\<in> seq_comp_failures P Q\\<rbrakk>\n       \\<Longrightarrow> (xs @ y # ipurge_tr I D (D y) zs,\n                          ipurge_ref I D (D y) zs Y)\n                         \\<in> seq_comp_failures P Q\n 2. \\<And>xsa X Y.\n       \\<lbrakk>(xs @ zs, X) \\<in> seq_comp_failures P Q;\n        (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs X)\n        \\<in> seq_comp_failures P Q;\n        (xs @ zs, Y) \\<in> seq_comp_failures P Q;\n        (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs Y)\n        \\<in> seq_comp_failures P Q;\n        xsa = xs @ zs; (xs @ [y], {}) \\<in> seq_comp_failures P Q\\<rbrakk>\n       \\<Longrightarrow> (xs @ y # ipurge_tr I D (D y) zs,\n                          ipurge_ref I D (D y) zs (X \\<union> Y))\n                         \\<in> seq_comp_failures P Q", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>xsa ys Y.\n       \\<lbrakk>xsa \\<in> sentences P; (ys, Y) \\<in> failures Q;\n        ys \\<noteq> []; xsa @ ys = xs @ zs;\n        (xs @ [y], {}) \\<in> seq_comp_failures P Q\\<rbrakk>\n       \\<Longrightarrow> (xs @ y # ipurge_tr I D (D y) zs,\n                          ipurge_ref I D (D y) zs Y)\n                         \\<in> seq_comp_failures P Q\n 2. \\<And>xsa X Y.\n       \\<lbrakk>(xs @ zs, X) \\<in> seq_comp_failures P Q;\n        (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs X)\n        \\<in> seq_comp_failures P Q;\n        (xs @ zs, Y) \\<in> seq_comp_failures P Q;\n        (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs Y)\n        \\<in> seq_comp_failures P Q;\n        xsa = xs @ zs; (xs @ [y], {}) \\<in> seq_comp_failures P Q\\<rbrakk>\n       \\<Longrightarrow> (xs @ y # ipurge_tr I D (D y) zs,\n                          ipurge_ref I D (D y) zs (X \\<union> Y))\n                         \\<in> seq_comp_failures P Q", "fix ws ys Y"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>xsa ys Y.\n       \\<lbrakk>xsa \\<in> sentences P; (ys, Y) \\<in> failures Q;\n        ys \\<noteq> []; xsa @ ys = xs @ zs;\n        (xs @ [y], {}) \\<in> seq_comp_failures P Q\\<rbrakk>\n       \\<Longrightarrow> (xs @ y # ipurge_tr I D (D y) zs,\n                          ipurge_ref I D (D y) zs Y)\n                         \\<in> seq_comp_failures P Q\n 2. \\<And>xsa X Y.\n       \\<lbrakk>(xs @ zs, X) \\<in> seq_comp_failures P Q;\n        (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs X)\n        \\<in> seq_comp_failures P Q;\n        (xs @ zs, Y) \\<in> seq_comp_failures P Q;\n        (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs Y)\n        \\<in> seq_comp_failures P Q;\n        xsa = xs @ zs; (xs @ [y], {}) \\<in> seq_comp_failures P Q\\<rbrakk>\n       \\<Longrightarrow> (xs @ y # ipurge_tr I D (D y) zs,\n                          ipurge_ref I D (D y) zs (X \\<union> Y))\n                         \\<in> seq_comp_failures P Q", "assume\n   \"ws \\<in> sentences P\" and\n   \"(ys, Y) \\<in> failures Q\" and\n   \"ys \\<noteq> []\" and\n   \"ws @ ys = xs @ zs\" and\n   \"(xs @ [y], {}) \\<in> seq_comp_failures P Q\""], ["proof (state)\nthis:\n  ws \\<in> sentences P\n  (ys, Y) \\<in> failures Q\n  ys \\<noteq> []\n  ws @ ys = xs @ zs\n  (xs @ [y], {}) \\<in> seq_comp_failures P Q\n\ngoal (2 subgoals):\n 1. \\<And>xsa ys Y.\n       \\<lbrakk>xsa \\<in> sentences P; (ys, Y) \\<in> failures Q;\n        ys \\<noteq> []; xsa @ ys = xs @ zs;\n        (xs @ [y], {}) \\<in> seq_comp_failures P Q\\<rbrakk>\n       \\<Longrightarrow> (xs @ y # ipurge_tr I D (D y) zs,\n                          ipurge_ref I D (D y) zs Y)\n                         \\<in> seq_comp_failures P Q\n 2. \\<And>xsa X Y.\n       \\<lbrakk>(xs @ zs, X) \\<in> seq_comp_failures P Q;\n        (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs X)\n        \\<in> seq_comp_failures P Q;\n        (xs @ zs, Y) \\<in> seq_comp_failures P Q;\n        (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs Y)\n        \\<in> seq_comp_failures P Q;\n        xsa = xs @ zs; (xs @ [y], {}) \\<in> seq_comp_failures P Q\\<rbrakk>\n       \\<Longrightarrow> (xs @ y # ipurge_tr I D (D y) zs,\n                          ipurge_ref I D (D y) zs (X \\<union> Y))\n                         \\<in> seq_comp_failures P Q", "thus \"(xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs Y)\n    \\<in> seq_comp_failures P Q\""], ["proof (prove)\nusing this:\n  ws \\<in> sentences P\n  (ys, Y) \\<in> failures Q\n  ys \\<noteq> []\n  ws @ ys = xs @ zs\n  (xs @ [y], {}) \\<in> seq_comp_failures P Q\n\ngoal (1 subgoal):\n 1. (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs Y)\n    \\<in> seq_comp_failures P Q", "by (rule seq_comp_secure_aux_2_case_3 [OF A B C D E])"], ["proof (state)\nthis:\n  (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs Y)\n  \\<in> seq_comp_failures P Q\n\ngoal (1 subgoal):\n 1. \\<And>xsa X Y.\n       \\<lbrakk>(xs @ zs, X) \\<in> seq_comp_failures P Q;\n        (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs X)\n        \\<in> seq_comp_failures P Q;\n        (xs @ zs, Y) \\<in> seq_comp_failures P Q;\n        (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs Y)\n        \\<in> seq_comp_failures P Q;\n        xsa = xs @ zs; (xs @ [y], {}) \\<in> seq_comp_failures P Q\\<rbrakk>\n       \\<Longrightarrow> (xs @ y # ipurge_tr I D (D y) zs,\n                          ipurge_ref I D (D y) zs (X \\<union> Y))\n                         \\<in> seq_comp_failures P Q", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xsa X Y.\n       \\<lbrakk>(xs @ zs, X) \\<in> seq_comp_failures P Q;\n        (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs X)\n        \\<in> seq_comp_failures P Q;\n        (xs @ zs, Y) \\<in> seq_comp_failures P Q;\n        (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs Y)\n        \\<in> seq_comp_failures P Q;\n        xsa = xs @ zs; (xs @ [y], {}) \\<in> seq_comp_failures P Q\\<rbrakk>\n       \\<Longrightarrow> (xs @ y # ipurge_tr I D (D y) zs,\n                          ipurge_ref I D (D y) zs (X \\<union> Y))\n                         \\<in> seq_comp_failures P Q", "fix X Y"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xsa X Y.\n       \\<lbrakk>(xs @ zs, X) \\<in> seq_comp_failures P Q;\n        (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs X)\n        \\<in> seq_comp_failures P Q;\n        (xs @ zs, Y) \\<in> seq_comp_failures P Q;\n        (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs Y)\n        \\<in> seq_comp_failures P Q;\n        xsa = xs @ zs; (xs @ [y], {}) \\<in> seq_comp_failures P Q\\<rbrakk>\n       \\<Longrightarrow> (xs @ y # ipurge_tr I D (D y) zs,\n                          ipurge_ref I D (D y) zs (X \\<union> Y))\n                         \\<in> seq_comp_failures P Q", "assume\n   \"(xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs X)\n      \\<in> seq_comp_failures P Q\" and\n   \"(xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs Y)\n      \\<in> seq_comp_failures P Q\""], ["proof (state)\nthis:\n  (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs X)\n  \\<in> seq_comp_failures P Q\n  (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs Y)\n  \\<in> seq_comp_failures P Q\n\ngoal (1 subgoal):\n 1. \\<And>xsa X Y.\n       \\<lbrakk>(xs @ zs, X) \\<in> seq_comp_failures P Q;\n        (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs X)\n        \\<in> seq_comp_failures P Q;\n        (xs @ zs, Y) \\<in> seq_comp_failures P Q;\n        (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs Y)\n        \\<in> seq_comp_failures P Q;\n        xsa = xs @ zs; (xs @ [y], {}) \\<in> seq_comp_failures P Q\\<rbrakk>\n       \\<Longrightarrow> (xs @ y # ipurge_tr I D (D y) zs,\n                          ipurge_ref I D (D y) zs (X \\<union> Y))\n                         \\<in> seq_comp_failures P Q", "hence \"(xs @ y # ipurge_tr I D (D y) zs,\n    ipurge_ref I D (D y) zs X \\<union> ipurge_ref I D (D y) zs Y)\n    \\<in> seq_comp_failures P Q\""], ["proof (prove)\nusing this:\n  (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs X)\n  \\<in> seq_comp_failures P Q\n  (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs Y)\n  \\<in> seq_comp_failures P Q\n\ngoal (1 subgoal):\n 1. (xs @ y # ipurge_tr I D (D y) zs,\n     ipurge_ref I D (D y) zs X \\<union> ipurge_ref I D (D y) zs Y)\n    \\<in> seq_comp_failures P Q", "by (rule SCF_R4)"], ["proof (state)\nthis:\n  (xs @ y # ipurge_tr I D (D y) zs,\n   ipurge_ref I D (D y) zs X \\<union> ipurge_ref I D (D y) zs Y)\n  \\<in> seq_comp_failures P Q\n\ngoal (1 subgoal):\n 1. \\<And>xsa X Y.\n       \\<lbrakk>(xs @ zs, X) \\<in> seq_comp_failures P Q;\n        (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs X)\n        \\<in> seq_comp_failures P Q;\n        (xs @ zs, Y) \\<in> seq_comp_failures P Q;\n        (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs Y)\n        \\<in> seq_comp_failures P Q;\n        xsa = xs @ zs; (xs @ [y], {}) \\<in> seq_comp_failures P Q\\<rbrakk>\n       \\<Longrightarrow> (xs @ y # ipurge_tr I D (D y) zs,\n                          ipurge_ref I D (D y) zs (X \\<union> Y))\n                         \\<in> seq_comp_failures P Q", "thus \"(xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs (X \\<union> Y))\n    \\<in> seq_comp_failures P Q\""], ["proof (prove)\nusing this:\n  (xs @ y # ipurge_tr I D (D y) zs,\n   ipurge_ref I D (D y) zs X \\<union> ipurge_ref I D (D y) zs Y)\n  \\<in> seq_comp_failures P Q\n\ngoal (1 subgoal):\n 1. (xs @ y # ipurge_tr I D (D y) zs,\n     ipurge_ref I D (D y) zs (X \\<union> Y))\n    \\<in> seq_comp_failures P Q", "by (simp add: ipurge_ref_distrib_union)"], ["proof (state)\nthis:\n  (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs (X \\<union> Y))\n  \\<in> seq_comp_failures P Q\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma seq_comp_secure_2:\n  assumes\n    A: \"secure_termination I D\" and\n    B: \"ref_union_closed P\" and\n    C: \"sequential P\" and\n    D: \"secure P I D\" and\n    E: \"secure Q I D\"\n  shows \"(xs @ zs, Z) \\<in> seq_comp_failures P Q \\<Longrightarrow>\n    (xs @ [y], {}) \\<in> seq_comp_failures P Q \\<Longrightarrow>\n    (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs Z)\n      \\<in> seq_comp_failures P Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(xs @ zs, Z) \\<in> seq_comp_failures P Q;\n     (xs @ [y], {}) \\<in> seq_comp_failures P Q\\<rbrakk>\n    \\<Longrightarrow> (xs @ y # ipurge_tr I D (D y) zs,\n                       ipurge_ref I D (D y) zs Z)\n                      \\<in> seq_comp_failures P Q", "by (rule seq_comp_secure_aux_2 [OF A B C D E, where ws = \"xs @ zs\"], simp_all)"], ["", "text \\<open>\n\\null\n\nFinally, the target security conservation theorem can be enunciated and proven, which is done here\nbelow. The theorem states that for any two processes @{term P}, @{term Q} defined over the same\nalphabet containing successful termination, to which the noninterference policy @{term I} and the\nevent-domain map @{term D} apply, if:\n\n\\begin{itemize}\n\n\\item\n@{term I} and @{term D} enforce termination security,\n\n\\item\n@{term P} is refusals union closed and sequential, and\n\n\\item\nboth @{term P} and @{term Q} are secure with respect to @{term I} and @{term D},\n\n\\end{itemize}\n\nthen @{term \"P ; Q\"} is secure as well.\n\n\\null\n\\<close>"], ["", "theorem seq_comp_secure:\n  assumes\n    A: \"secure_termination I D\" and\n    B: \"ref_union_closed P\" and\n    C: \"sequential P\" and\n    D: \"secure P I D\" and\n    E: \"secure Q I D\"\n  shows \"secure (P ; Q) I D\""], ["proof (prove)\ngoal (1 subgoal):\n 1. secure (P ; Q) I D", "proof (simp add: secure_def seq_comp_futures seq_implies_weakly_seq [OF C],\n (rule allI)+, rule impI, erule conjE)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xs y ys Y zs Z.\n       \\<lbrakk>(xs @ y # ys, Y) \\<in> seq_comp_failures P Q;\n        (xs @ zs, Z) \\<in> seq_comp_failures P Q\\<rbrakk>\n       \\<Longrightarrow> (xs @ ipurge_tr I D (D y) ys,\n                          ipurge_ref I D (D y) ys Y)\n                         \\<in> seq_comp_failures P Q \\<and>\n                         (xs @ y # ipurge_tr I D (D y) zs,\n                          ipurge_ref I D (D y) zs Z)\n                         \\<in> seq_comp_failures P Q", "fix xs y ys Y zs Z"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xs y ys Y zs Z.\n       \\<lbrakk>(xs @ y # ys, Y) \\<in> seq_comp_failures P Q;\n        (xs @ zs, Z) \\<in> seq_comp_failures P Q\\<rbrakk>\n       \\<Longrightarrow> (xs @ ipurge_tr I D (D y) ys,\n                          ipurge_ref I D (D y) ys Y)\n                         \\<in> seq_comp_failures P Q \\<and>\n                         (xs @ y # ipurge_tr I D (D y) zs,\n                          ipurge_ref I D (D y) zs Z)\n                         \\<in> seq_comp_failures P Q", "assume\n    F: \"(xs @ y # ys, Y) \\<in> seq_comp_failures P Q\" and\n    G: \"(xs @ zs, Z) \\<in> seq_comp_failures P Q\""], ["proof (state)\nthis:\n  (xs @ y # ys, Y) \\<in> seq_comp_failures P Q\n  (xs @ zs, Z) \\<in> seq_comp_failures P Q\n\ngoal (1 subgoal):\n 1. \\<And>xs y ys Y zs Z.\n       \\<lbrakk>(xs @ y # ys, Y) \\<in> seq_comp_failures P Q;\n        (xs @ zs, Z) \\<in> seq_comp_failures P Q\\<rbrakk>\n       \\<Longrightarrow> (xs @ ipurge_tr I D (D y) ys,\n                          ipurge_ref I D (D y) ys Y)\n                         \\<in> seq_comp_failures P Q \\<and>\n                         (xs @ y # ipurge_tr I D (D y) zs,\n                          ipurge_ref I D (D y) zs Z)\n                         \\<in> seq_comp_failures P Q", "show\n   \"(xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys Y)\n      \\<in> seq_comp_failures P Q \\<and>\n    (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs Z)\n      \\<in> seq_comp_failures P Q\"\n    (is \"?A \\<and> ?B\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys Y)\n    \\<in> seq_comp_failures P Q \\<and>\n    (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs Z)\n    \\<in> seq_comp_failures P Q", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. (xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys Y)\n    \\<in> seq_comp_failures P Q\n 2. (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs Z)\n    \\<in> seq_comp_failures P Q", "show ?A"], ["proof (prove)\ngoal (1 subgoal):\n 1. (xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys Y)\n    \\<in> seq_comp_failures P Q", "by (rule seq_comp_secure_1 [OF A B C D E F])"], ["proof (state)\nthis:\n  (xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys Y)\n  \\<in> seq_comp_failures P Q\n\ngoal (1 subgoal):\n 1. (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs Z)\n    \\<in> seq_comp_failures P Q", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs Z)\n    \\<in> seq_comp_failures P Q", "have H: \"weakly_sequential P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. weakly_sequential P", "using C"], ["proof (prove)\nusing this:\n  sequential P\n\ngoal (1 subgoal):\n 1. weakly_sequential P", "by (rule seq_implies_weakly_seq)"], ["proof (state)\nthis:\n  weakly_sequential P\n\ngoal (1 subgoal):\n 1. (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs Z)\n    \\<in> seq_comp_failures P Q", "hence \"((xs @ [y]) @ ys, Y) \\<in> failures (P ; Q)\""], ["proof (prove)\nusing this:\n  weakly_sequential P\n\ngoal (1 subgoal):\n 1. ((xs @ [y]) @ ys, Y) \\<in> failures (P ; Q)", "using F"], ["proof (prove)\nusing this:\n  weakly_sequential P\n  (xs @ y # ys, Y) \\<in> seq_comp_failures P Q\n\ngoal (1 subgoal):\n 1. ((xs @ [y]) @ ys, Y) \\<in> failures (P ; Q)", "by (simp add: seq_comp_failures)"], ["proof (state)\nthis:\n  ((xs @ [y]) @ ys, Y) \\<in> failures (P ; Q)\n\ngoal (1 subgoal):\n 1. (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs Z)\n    \\<in> seq_comp_failures P Q", "hence \"(xs @ [y], {}) \\<in> failures (P ; Q)\""], ["proof (prove)\nusing this:\n  ((xs @ [y]) @ ys, Y) \\<in> failures (P ; Q)\n\ngoal (1 subgoal):\n 1. (xs @ [y], {}) \\<in> failures (P ; Q)", "by (rule process_rule_2_failures)"], ["proof (state)\nthis:\n  (xs @ [y], {}) \\<in> failures (P ; Q)\n\ngoal (1 subgoal):\n 1. (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs Z)\n    \\<in> seq_comp_failures P Q", "hence \"(xs @ [y], {}) \\<in> seq_comp_failures P Q\""], ["proof (prove)\nusing this:\n  (xs @ [y], {}) \\<in> failures (P ; Q)\n\ngoal (1 subgoal):\n 1. (xs @ [y], {}) \\<in> seq_comp_failures P Q", "using H"], ["proof (prove)\nusing this:\n  (xs @ [y], {}) \\<in> failures (P ; Q)\n  weakly_sequential P\n\ngoal (1 subgoal):\n 1. (xs @ [y], {}) \\<in> seq_comp_failures P Q", "by (simp add: seq_comp_failures)"], ["proof (state)\nthis:\n  (xs @ [y], {}) \\<in> seq_comp_failures P Q\n\ngoal (1 subgoal):\n 1. (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs Z)\n    \\<in> seq_comp_failures P Q", "thus ?B"], ["proof (prove)\nusing this:\n  (xs @ [y], {}) \\<in> seq_comp_failures P Q\n\ngoal (1 subgoal):\n 1. (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs Z)\n    \\<in> seq_comp_failures P Q", "by (rule seq_comp_secure_2 [OF A B C D E G])"], ["proof (state)\nthis:\n  (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs Z)\n  \\<in> seq_comp_failures P Q\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (xs @ ipurge_tr I D (D y) ys, ipurge_ref I D (D y) ys Y)\n  \\<in> seq_comp_failures P Q \\<and>\n  (xs @ y # ipurge_tr I D (D y) zs, ipurge_ref I D (D y) zs Z)\n  \\<in> seq_comp_failures P Q\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \"Generalization of the security conservation theorem to lists of processes\""], ["", "text \\<open>\nThe target security conservation theorem, in the basic version just proven, applies to the\nsequential composition of a pair of processes. However, given an arbitrary list of processes where\neach process satisfies its assumptions, the theorem could be orderly applied to the composition of\nthe first two processes in the list, then to the composition of the resulting process with the third\nprocess in the list, and so on, until the last process is reached. The final outcome would be that\nthe sequential composition of all the processes in the list is secure.\n\nOf course, this argument works provided that the assumptions of the theorem keep being satisfied by\nthe composed processes produced in each step of the recursion. But this is what indeed happens, by\nvirtue of the conservation of refusals union closure and sequentiality under sequential composition,\nproven previously, and of the conservation of security under sequential composition, ensured by the\ntarget theorem itself.\n\nTherefore, the target security conservation theorem can be generalized to an arbitrary list of\nprocesses, which is done here below. The resulting theorem states that for any nonempty list of\nprocesses defined over the same alphabet containing successful termination, to which the\nnoninterference policy @{term I} and the event-domain map @{term D} apply, if:\n\n\\begin{itemize}\n\n\\item\n@{term I} and @{term D} enforce termination security,\n\n\\item\neach process in the list, with the possible exception of the last one, is refusals union closed and\nsequential, and\n\n\\item\neach process in the list is secure with respect to @{term I} and @{term D},\n\n\\end{itemize}\n\nthen the sequential composition of all the processes in the list is secure as well.\n\nAs a precondition, the above conservation lemmas for weak sequentiality, refusals union closure, and\nsequentiality are generalized, too.\n\n\\null\n\\<close>"], ["", "lemma seq_comp_list_weakly_sequential [rule_format]:\n \"(\\<forall>X \\<in> set (P # PS). weakly_sequential X) \\<longrightarrow>\n    weakly_sequential (foldl (;) P PS)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>X\\<in>set (P # PS). weakly_sequential X) \\<longrightarrow>\n    weakly_sequential (foldl (;) P PS)", "proof (induction PS rule: rev_induct, simp, rule impI, simp, (erule conjE)+)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>weakly_sequential (foldl (;) P xs); weakly_sequential P;\n        weakly_sequential x;\n        \\<forall>x\\<in>set xs. weakly_sequential x\\<rbrakk>\n       \\<Longrightarrow> weakly_sequential (foldl (;) P xs ; x)", "qed (rule seq_comp_weakly_sequential)"], ["", "lemma seq_comp_list_ref_union_closed [rule_format]:\n \"(\\<forall>X \\<in> set (butlast (P # PS)). weakly_sequential X) \\<longrightarrow>\n  (\\<forall>X \\<in> set (P # PS). ref_union_closed X) \\<longrightarrow>\n    ref_union_closed (foldl (;) P PS)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>X\\<in>set (butlast (P # PS)).\n        weakly_sequential X) \\<longrightarrow>\n    (\\<forall>X\\<in>set (P # PS). ref_union_closed X) \\<longrightarrow>\n    ref_union_closed (foldl (;) P PS)", "proof (induction PS rule: rev_induct, simp, (rule impI)+, simp, split if_split_asm,\n simp, rule seq_comp_ref_union_closed, assumption+)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>xs \\<noteq> []; weakly_sequential P;\n        \\<forall>x\\<in>set xs. weakly_sequential x; ref_union_closed P;\n        ref_union_closed x; \\<forall>x\\<in>set xs. ref_union_closed x;\n        (\\<forall>X\\<in>set (P # butlast xs).\n            weakly_sequential X) \\<longrightarrow>\n        ref_union_closed (foldl (;) P xs)\\<rbrakk>\n       \\<Longrightarrow> ref_union_closed (foldl (;) P xs ; x)", "fix PS and Q :: \"'a option process\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>xs \\<noteq> []; weakly_sequential P;\n        \\<forall>x\\<in>set xs. weakly_sequential x; ref_union_closed P;\n        ref_union_closed x; \\<forall>x\\<in>set xs. ref_union_closed x;\n        (\\<forall>X\\<in>set (P # butlast xs).\n            weakly_sequential X) \\<longrightarrow>\n        ref_union_closed (foldl (;) P xs)\\<rbrakk>\n       \\<Longrightarrow> ref_union_closed (foldl (;) P xs ; x)", "assume\n    A: \"weakly_sequential P\" and\n    B: \"\\<forall>X \\<in> set PS. weakly_sequential X\" and\n    C: \"ref_union_closed Q\" and\n    D: \"(\\<forall>X \\<in> set (P # butlast PS). weakly_sequential X) \\<longrightarrow>\n      ref_union_closed (foldl (;) P PS)\""], ["proof (state)\nthis:\n  weakly_sequential P\n  \\<forall>X\\<in>set PS. weakly_sequential X\n  ref_union_closed Q\n  (\\<forall>X\\<in>set (P # butlast PS).\n      weakly_sequential X) \\<longrightarrow>\n  ref_union_closed (foldl (;) P PS)\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>xs \\<noteq> []; weakly_sequential P;\n        \\<forall>x\\<in>set xs. weakly_sequential x; ref_union_closed P;\n        ref_union_closed x; \\<forall>x\\<in>set xs. ref_union_closed x;\n        (\\<forall>X\\<in>set (P # butlast xs).\n            weakly_sequential X) \\<longrightarrow>\n        ref_union_closed (foldl (;) P xs)\\<rbrakk>\n       \\<Longrightarrow> ref_union_closed (foldl (;) P xs ; x)", "have \"weakly_sequential (foldl (;) P PS)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. weakly_sequential (foldl (;) P PS)", "proof (rule seq_comp_list_weakly_sequential, simp, erule disjE, simp add: A)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> set PS \\<Longrightarrow> weakly_sequential x", "fix X"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> set PS \\<Longrightarrow> weakly_sequential x", "assume \"X \\<in> set PS\""], ["proof (state)\nthis:\n  X \\<in> set PS\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> set PS \\<Longrightarrow> weakly_sequential x", "with B"], ["proof (chain)\npicking this:\n  \\<forall>X\\<in>set PS. weakly_sequential X\n  X \\<in> set PS", "show \"weakly_sequential X\""], ["proof (prove)\nusing this:\n  \\<forall>X\\<in>set PS. weakly_sequential X\n  X \\<in> set PS\n\ngoal (1 subgoal):\n 1. weakly_sequential X", ".."], ["proof (state)\nthis:\n  weakly_sequential X\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  weakly_sequential (foldl (;) P PS)\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>xs \\<noteq> []; weakly_sequential P;\n        \\<forall>x\\<in>set xs. weakly_sequential x; ref_union_closed P;\n        ref_union_closed x; \\<forall>x\\<in>set xs. ref_union_closed x;\n        (\\<forall>X\\<in>set (P # butlast xs).\n            weakly_sequential X) \\<longrightarrow>\n        ref_union_closed (foldl (;) P xs)\\<rbrakk>\n       \\<Longrightarrow> ref_union_closed (foldl (;) P xs ; x)", "moreover"], ["proof (state)\nthis:\n  weakly_sequential (foldl (;) P PS)\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>xs \\<noteq> []; weakly_sequential P;\n        \\<forall>x\\<in>set xs. weakly_sequential x; ref_union_closed P;\n        ref_union_closed x; \\<forall>x\\<in>set xs. ref_union_closed x;\n        (\\<forall>X\\<in>set (P # butlast xs).\n            weakly_sequential X) \\<longrightarrow>\n        ref_union_closed (foldl (;) P xs)\\<rbrakk>\n       \\<Longrightarrow> ref_union_closed (foldl (;) P xs ; x)", "have \"\\<forall>X \\<in> set (P # butlast PS). weakly_sequential X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>X\\<in>set (P # butlast PS). weakly_sequential X", "proof (rule ballI, simp, erule disjE, simp add: A)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>X. X \\<in> set (butlast PS) \\<Longrightarrow> weakly_sequential X", "fix X"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>X. X \\<in> set (butlast PS) \\<Longrightarrow> weakly_sequential X", "assume \"X \\<in> set (butlast PS)\""], ["proof (state)\nthis:\n  X \\<in> set (butlast PS)\n\ngoal (1 subgoal):\n 1. \\<And>X. X \\<in> set (butlast PS) \\<Longrightarrow> weakly_sequential X", "hence \"X \\<in> set PS\""], ["proof (prove)\nusing this:\n  X \\<in> set (butlast PS)\n\ngoal (1 subgoal):\n 1. X \\<in> set PS", "by (rule in_set_butlastD)"], ["proof (state)\nthis:\n  X \\<in> set PS\n\ngoal (1 subgoal):\n 1. \\<And>X. X \\<in> set (butlast PS) \\<Longrightarrow> weakly_sequential X", "with B"], ["proof (chain)\npicking this:\n  \\<forall>X\\<in>set PS. weakly_sequential X\n  X \\<in> set PS", "show \"weakly_sequential X\""], ["proof (prove)\nusing this:\n  \\<forall>X\\<in>set PS. weakly_sequential X\n  X \\<in> set PS\n\ngoal (1 subgoal):\n 1. weakly_sequential X", ".."], ["proof (state)\nthis:\n  weakly_sequential X\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>X\\<in>set (P # butlast PS). weakly_sequential X\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>xs \\<noteq> []; weakly_sequential P;\n        \\<forall>x\\<in>set xs. weakly_sequential x; ref_union_closed P;\n        ref_union_closed x; \\<forall>x\\<in>set xs. ref_union_closed x;\n        (\\<forall>X\\<in>set (P # butlast xs).\n            weakly_sequential X) \\<longrightarrow>\n        ref_union_closed (foldl (;) P xs)\\<rbrakk>\n       \\<Longrightarrow> ref_union_closed (foldl (;) P xs ; x)", "with D"], ["proof (chain)\npicking this:\n  (\\<forall>X\\<in>set (P # butlast PS).\n      weakly_sequential X) \\<longrightarrow>\n  ref_union_closed (foldl (;) P PS)\n  \\<forall>X\\<in>set (P # butlast PS). weakly_sequential X", "have \"ref_union_closed (foldl (;) P PS)\""], ["proof (prove)\nusing this:\n  (\\<forall>X\\<in>set (P # butlast PS).\n      weakly_sequential X) \\<longrightarrow>\n  ref_union_closed (foldl (;) P PS)\n  \\<forall>X\\<in>set (P # butlast PS). weakly_sequential X\n\ngoal (1 subgoal):\n 1. ref_union_closed (foldl (;) P PS)", ".."], ["proof (state)\nthis:\n  ref_union_closed (foldl (;) P PS)\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>xs \\<noteq> []; weakly_sequential P;\n        \\<forall>x\\<in>set xs. weakly_sequential x; ref_union_closed P;\n        ref_union_closed x; \\<forall>x\\<in>set xs. ref_union_closed x;\n        (\\<forall>X\\<in>set (P # butlast xs).\n            weakly_sequential X) \\<longrightarrow>\n        ref_union_closed (foldl (;) P xs)\\<rbrakk>\n       \\<Longrightarrow> ref_union_closed (foldl (;) P xs ; x)", "ultimately"], ["proof (chain)\npicking this:\n  weakly_sequential (foldl (;) P PS)\n  ref_union_closed (foldl (;) P PS)", "show \"ref_union_closed (foldl (;) P PS ; Q)\""], ["proof (prove)\nusing this:\n  weakly_sequential (foldl (;) P PS)\n  ref_union_closed (foldl (;) P PS)\n\ngoal (1 subgoal):\n 1. ref_union_closed (foldl (;) P PS ; Q)", "using C"], ["proof (prove)\nusing this:\n  weakly_sequential (foldl (;) P PS)\n  ref_union_closed (foldl (;) P PS)\n  ref_union_closed Q\n\ngoal (1 subgoal):\n 1. ref_union_closed (foldl (;) P PS ; Q)", "by (rule seq_comp_ref_union_closed)"], ["proof (state)\nthis:\n  ref_union_closed (foldl (;) P PS ; Q)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma seq_comp_list_sequential [rule_format]:\n \"(\\<forall>X \\<in> set (P # PS). sequential X) \\<longrightarrow>\n    sequential (foldl (;) P PS)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>X\\<in>set (P # PS). sequential X) \\<longrightarrow>\n    sequential (foldl (;) P PS)", "proof (induction PS rule: rev_induct, simp, rule impI, simp, (erule conjE)+)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>sequential (foldl (;) P xs); sequential P; sequential x;\n        \\<forall>x\\<in>set xs. sequential x\\<rbrakk>\n       \\<Longrightarrow> sequential (foldl (;) P xs ; x)", "qed (rule seq_comp_sequential)"], ["", "theorem seq_comp_list_secure [rule_format]:\n  assumes A: \"secure_termination I D\"\n  shows\n   \"(\\<forall>X \\<in> set (butlast (P # PS)). ref_union_closed X \\<and> sequential X) \\<longrightarrow>\n    (\\<forall>X \\<in> set (P # PS). secure X I D) \\<longrightarrow>\n      secure (foldl (;) P PS) I D\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>X\\<in>set (butlast (P # PS)).\n        ref_union_closed X \\<and> sequential X) \\<longrightarrow>\n    (\\<forall>X\\<in>set (P # PS). secure X I D) \\<longrightarrow>\n    secure (foldl (;) P PS) I D", "proof (induction PS rule: rev_induct, simp, (rule impI)+, simp, split if_split_asm,\n simp, rule seq_comp_secure [OF A], assumption+)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>xs \\<noteq> []; ref_union_closed P; secure P I D;\n        sequential P;\n        \\<forall>X\\<in>set xs. ref_union_closed X \\<and> sequential X;\n        secure x I D; \\<forall>X\\<in>set xs. secure X I D;\n        (\\<forall>X\\<in>set (P # butlast xs).\n            ref_union_closed X \\<and> sequential X) \\<longrightarrow>\n        secure (foldl (;) P xs) I D\\<rbrakk>\n       \\<Longrightarrow> secure (foldl (;) P xs ; x) I D", "fix PS Q"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>xs \\<noteq> []; ref_union_closed P; secure P I D;\n        sequential P;\n        \\<forall>X\\<in>set xs. ref_union_closed X \\<and> sequential X;\n        secure x I D; \\<forall>X\\<in>set xs. secure X I D;\n        (\\<forall>X\\<in>set (P # butlast xs).\n            ref_union_closed X \\<and> sequential X) \\<longrightarrow>\n        secure (foldl (;) P xs) I D\\<rbrakk>\n       \\<Longrightarrow> secure (foldl (;) P xs ; x) I D", "assume\n    B: \"PS \\<noteq> []\" and\n    C: \"ref_union_closed P\" and\n    D: \"sequential P\" and\n    E: \"\\<forall>X \\<in> set PS. ref_union_closed X \\<and> sequential X\" and\n    F: \"secure Q I D\" and\n    G: \"(\\<forall>X \\<in> set (P # butlast PS). ref_union_closed X \\<and> sequential X) \\<longrightarrow>\n      secure (foldl (;) P PS) I D\""], ["proof (state)\nthis:\n  PS \\<noteq> []\n  ref_union_closed P\n  sequential P\n  \\<forall>X\\<in>set PS. ref_union_closed X \\<and> sequential X\n  secure Q I D\n  (\\<forall>X\\<in>set (P # butlast PS).\n      ref_union_closed X \\<and> sequential X) \\<longrightarrow>\n  secure (foldl (;) P PS) I D\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>xs \\<noteq> []; ref_union_closed P; secure P I D;\n        sequential P;\n        \\<forall>X\\<in>set xs. ref_union_closed X \\<and> sequential X;\n        secure x I D; \\<forall>X\\<in>set xs. secure X I D;\n        (\\<forall>X\\<in>set (P # butlast xs).\n            ref_union_closed X \\<and> sequential X) \\<longrightarrow>\n        secure (foldl (;) P xs) I D\\<rbrakk>\n       \\<Longrightarrow> secure (foldl (;) P xs ; x) I D", "have \"ref_union_closed (foldl (;) P PS)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ref_union_closed (foldl (;) P PS)", "proof (rule seq_comp_list_ref_union_closed, simp_all add: B, erule_tac [!] disjE,\n   simp_all add: C)"], ["proof (state)\ngoal (3 subgoals):\n 1. weakly_sequential P\n 2. \\<And>x. x \\<in> set (butlast PS) \\<Longrightarrow> weakly_sequential x\n 3. \\<And>x. x \\<in> set PS \\<Longrightarrow> ref_union_closed x", "show \"weakly_sequential P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. weakly_sequential P", "using D"], ["proof (prove)\nusing this:\n  sequential P\n\ngoal (1 subgoal):\n 1. weakly_sequential P", "by (rule seq_implies_weakly_seq)"], ["proof (state)\nthis:\n  weakly_sequential P\n\ngoal (2 subgoals):\n 1. \\<And>x. x \\<in> set (butlast PS) \\<Longrightarrow> weakly_sequential x\n 2. \\<And>x. x \\<in> set PS \\<Longrightarrow> ref_union_closed x", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x. x \\<in> set (butlast PS) \\<Longrightarrow> weakly_sequential x\n 2. \\<And>x. x \\<in> set PS \\<Longrightarrow> ref_union_closed x", "fix X"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x. x \\<in> set (butlast PS) \\<Longrightarrow> weakly_sequential x\n 2. \\<And>x. x \\<in> set PS \\<Longrightarrow> ref_union_closed x", "assume \"X \\<in> set (butlast PS)\""], ["proof (state)\nthis:\n  X \\<in> set (butlast PS)\n\ngoal (2 subgoals):\n 1. \\<And>x. x \\<in> set (butlast PS) \\<Longrightarrow> weakly_sequential x\n 2. \\<And>x. x \\<in> set PS \\<Longrightarrow> ref_union_closed x", "hence \"X \\<in> set PS\""], ["proof (prove)\nusing this:\n  X \\<in> set (butlast PS)\n\ngoal (1 subgoal):\n 1. X \\<in> set PS", "by (rule in_set_butlastD)"], ["proof (state)\nthis:\n  X \\<in> set PS\n\ngoal (2 subgoals):\n 1. \\<And>x. x \\<in> set (butlast PS) \\<Longrightarrow> weakly_sequential x\n 2. \\<And>x. x \\<in> set PS \\<Longrightarrow> ref_union_closed x", "with E"], ["proof (chain)\npicking this:\n  \\<forall>X\\<in>set PS. ref_union_closed X \\<and> sequential X\n  X \\<in> set PS", "have \"ref_union_closed X \\<and> sequential X\""], ["proof (prove)\nusing this:\n  \\<forall>X\\<in>set PS. ref_union_closed X \\<and> sequential X\n  X \\<in> set PS\n\ngoal (1 subgoal):\n 1. ref_union_closed X \\<and> sequential X", ".."], ["proof (state)\nthis:\n  ref_union_closed X \\<and> sequential X\n\ngoal (2 subgoals):\n 1. \\<And>x. x \\<in> set (butlast PS) \\<Longrightarrow> weakly_sequential x\n 2. \\<And>x. x \\<in> set PS \\<Longrightarrow> ref_union_closed x", "hence \"sequential X\""], ["proof (prove)\nusing this:\n  ref_union_closed X \\<and> sequential X\n\ngoal (1 subgoal):\n 1. sequential X", ".."], ["proof (state)\nthis:\n  sequential X\n\ngoal (2 subgoals):\n 1. \\<And>x. x \\<in> set (butlast PS) \\<Longrightarrow> weakly_sequential x\n 2. \\<And>x. x \\<in> set PS \\<Longrightarrow> ref_union_closed x", "thus \"weakly_sequential X\""], ["proof (prove)\nusing this:\n  sequential X\n\ngoal (1 subgoal):\n 1. weakly_sequential X", "by (rule seq_implies_weakly_seq)"], ["proof (state)\nthis:\n  weakly_sequential X\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> set PS \\<Longrightarrow> ref_union_closed x", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> set PS \\<Longrightarrow> ref_union_closed x", "fix X"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> set PS \\<Longrightarrow> ref_union_closed x", "assume \"X \\<in> set PS\""], ["proof (state)\nthis:\n  X \\<in> set PS\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> set PS \\<Longrightarrow> ref_union_closed x", "with E"], ["proof (chain)\npicking this:\n  \\<forall>X\\<in>set PS. ref_union_closed X \\<and> sequential X\n  X \\<in> set PS", "have \"ref_union_closed X \\<and> sequential X\""], ["proof (prove)\nusing this:\n  \\<forall>X\\<in>set PS. ref_union_closed X \\<and> sequential X\n  X \\<in> set PS\n\ngoal (1 subgoal):\n 1. ref_union_closed X \\<and> sequential X", ".."], ["proof (state)\nthis:\n  ref_union_closed X \\<and> sequential X\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> set PS \\<Longrightarrow> ref_union_closed x", "thus \"ref_union_closed X\""], ["proof (prove)\nusing this:\n  ref_union_closed X \\<and> sequential X\n\ngoal (1 subgoal):\n 1. ref_union_closed X", ".."], ["proof (state)\nthis:\n  ref_union_closed X\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ref_union_closed (foldl (;) P PS)\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>xs \\<noteq> []; ref_union_closed P; secure P I D;\n        sequential P;\n        \\<forall>X\\<in>set xs. ref_union_closed X \\<and> sequential X;\n        secure x I D; \\<forall>X\\<in>set xs. secure X I D;\n        (\\<forall>X\\<in>set (P # butlast xs).\n            ref_union_closed X \\<and> sequential X) \\<longrightarrow>\n        secure (foldl (;) P xs) I D\\<rbrakk>\n       \\<Longrightarrow> secure (foldl (;) P xs ; x) I D", "moreover"], ["proof (state)\nthis:\n  ref_union_closed (foldl (;) P PS)\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>xs \\<noteq> []; ref_union_closed P; secure P I D;\n        sequential P;\n        \\<forall>X\\<in>set xs. ref_union_closed X \\<and> sequential X;\n        secure x I D; \\<forall>X\\<in>set xs. secure X I D;\n        (\\<forall>X\\<in>set (P # butlast xs).\n            ref_union_closed X \\<and> sequential X) \\<longrightarrow>\n        secure (foldl (;) P xs) I D\\<rbrakk>\n       \\<Longrightarrow> secure (foldl (;) P xs ; x) I D", "have \"sequential (foldl (;) P PS)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sequential (foldl (;) P PS)", "proof (rule seq_comp_list_sequential, simp, erule disjE, simp add: D)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> set PS \\<Longrightarrow> sequential x", "fix X"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> set PS \\<Longrightarrow> sequential x", "assume \"X \\<in> set PS\""], ["proof (state)\nthis:\n  X \\<in> set PS\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> set PS \\<Longrightarrow> sequential x", "with E"], ["proof (chain)\npicking this:\n  \\<forall>X\\<in>set PS. ref_union_closed X \\<and> sequential X\n  X \\<in> set PS", "have \"ref_union_closed X \\<and> sequential X\""], ["proof (prove)\nusing this:\n  \\<forall>X\\<in>set PS. ref_union_closed X \\<and> sequential X\n  X \\<in> set PS\n\ngoal (1 subgoal):\n 1. ref_union_closed X \\<and> sequential X", ".."], ["proof (state)\nthis:\n  ref_union_closed X \\<and> sequential X\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> set PS \\<Longrightarrow> sequential x", "thus \"sequential X\""], ["proof (prove)\nusing this:\n  ref_union_closed X \\<and> sequential X\n\ngoal (1 subgoal):\n 1. sequential X", ".."], ["proof (state)\nthis:\n  sequential X\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  sequential (foldl (;) P PS)\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>xs \\<noteq> []; ref_union_closed P; secure P I D;\n        sequential P;\n        \\<forall>X\\<in>set xs. ref_union_closed X \\<and> sequential X;\n        secure x I D; \\<forall>X\\<in>set xs. secure X I D;\n        (\\<forall>X\\<in>set (P # butlast xs).\n            ref_union_closed X \\<and> sequential X) \\<longrightarrow>\n        secure (foldl (;) P xs) I D\\<rbrakk>\n       \\<Longrightarrow> secure (foldl (;) P xs ; x) I D", "moreover"], ["proof (state)\nthis:\n  sequential (foldl (;) P PS)\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>xs \\<noteq> []; ref_union_closed P; secure P I D;\n        sequential P;\n        \\<forall>X\\<in>set xs. ref_union_closed X \\<and> sequential X;\n        secure x I D; \\<forall>X\\<in>set xs. secure X I D;\n        (\\<forall>X\\<in>set (P # butlast xs).\n            ref_union_closed X \\<and> sequential X) \\<longrightarrow>\n        secure (foldl (;) P xs) I D\\<rbrakk>\n       \\<Longrightarrow> secure (foldl (;) P xs ; x) I D", "have \"\\<forall>X \\<in> set (P # butlast PS). ref_union_closed X \\<and> sequential X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>X\\<in>set (P # butlast PS).\n       ref_union_closed X \\<and> sequential X", "proof (rule ballI, simp, erule disjE, simp add: C D)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>X.\n       X \\<in> set (butlast PS) \\<Longrightarrow>\n       ref_union_closed X \\<and> sequential X", "fix X"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>X.\n       X \\<in> set (butlast PS) \\<Longrightarrow>\n       ref_union_closed X \\<and> sequential X", "assume \"X \\<in> set (butlast PS)\""], ["proof (state)\nthis:\n  X \\<in> set (butlast PS)\n\ngoal (1 subgoal):\n 1. \\<And>X.\n       X \\<in> set (butlast PS) \\<Longrightarrow>\n       ref_union_closed X \\<and> sequential X", "hence \"X \\<in> set PS\""], ["proof (prove)\nusing this:\n  X \\<in> set (butlast PS)\n\ngoal (1 subgoal):\n 1. X \\<in> set PS", "by (rule in_set_butlastD)"], ["proof (state)\nthis:\n  X \\<in> set PS\n\ngoal (1 subgoal):\n 1. \\<And>X.\n       X \\<in> set (butlast PS) \\<Longrightarrow>\n       ref_union_closed X \\<and> sequential X", "with E"], ["proof (chain)\npicking this:\n  \\<forall>X\\<in>set PS. ref_union_closed X \\<and> sequential X\n  X \\<in> set PS", "show \"ref_union_closed X \\<and> sequential X\""], ["proof (prove)\nusing this:\n  \\<forall>X\\<in>set PS. ref_union_closed X \\<and> sequential X\n  X \\<in> set PS\n\ngoal (1 subgoal):\n 1. ref_union_closed X \\<and> sequential X", ".."], ["proof (state)\nthis:\n  ref_union_closed X \\<and> sequential X\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>X\\<in>set (P # butlast PS).\n     ref_union_closed X \\<and> sequential X\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>xs \\<noteq> []; ref_union_closed P; secure P I D;\n        sequential P;\n        \\<forall>X\\<in>set xs. ref_union_closed X \\<and> sequential X;\n        secure x I D; \\<forall>X\\<in>set xs. secure X I D;\n        (\\<forall>X\\<in>set (P # butlast xs).\n            ref_union_closed X \\<and> sequential X) \\<longrightarrow>\n        secure (foldl (;) P xs) I D\\<rbrakk>\n       \\<Longrightarrow> secure (foldl (;) P xs ; x) I D", "with G"], ["proof (chain)\npicking this:\n  (\\<forall>X\\<in>set (P # butlast PS).\n      ref_union_closed X \\<and> sequential X) \\<longrightarrow>\n  secure (foldl (;) P PS) I D\n  \\<forall>X\\<in>set (P # butlast PS).\n     ref_union_closed X \\<and> sequential X", "have \"secure (foldl (;) P PS) I D\""], ["proof (prove)\nusing this:\n  (\\<forall>X\\<in>set (P # butlast PS).\n      ref_union_closed X \\<and> sequential X) \\<longrightarrow>\n  secure (foldl (;) P PS) I D\n  \\<forall>X\\<in>set (P # butlast PS).\n     ref_union_closed X \\<and> sequential X\n\ngoal (1 subgoal):\n 1. secure (foldl (;) P PS) I D", ".."], ["proof (state)\nthis:\n  secure (foldl (;) P PS) I D\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>xs \\<noteq> []; ref_union_closed P; secure P I D;\n        sequential P;\n        \\<forall>X\\<in>set xs. ref_union_closed X \\<and> sequential X;\n        secure x I D; \\<forall>X\\<in>set xs. secure X I D;\n        (\\<forall>X\\<in>set (P # butlast xs).\n            ref_union_closed X \\<and> sequential X) \\<longrightarrow>\n        secure (foldl (;) P xs) I D\\<rbrakk>\n       \\<Longrightarrow> secure (foldl (;) P xs ; x) I D", "ultimately"], ["proof (chain)\npicking this:\n  ref_union_closed (foldl (;) P PS)\n  sequential (foldl (;) P PS)\n  secure (foldl (;) P PS) I D", "show \"secure (foldl (;) P PS ; Q) I D\""], ["proof (prove)\nusing this:\n  ref_union_closed (foldl (;) P PS)\n  sequential (foldl (;) P PS)\n  secure (foldl (;) P PS) I D\n\ngoal (1 subgoal):\n 1. secure (foldl (;) P PS ; Q) I D", "using F"], ["proof (prove)\nusing this:\n  ref_union_closed (foldl (;) P PS)\n  sequential (foldl (;) P PS)\n  secure (foldl (;) P PS) I D\n  secure Q I D\n\ngoal (1 subgoal):\n 1. secure (foldl (;) P PS ; Q) I D", "by (rule seq_comp_secure [OF A])"], ["proof (state)\nthis:\n  secure (foldl (;) P PS ; Q) I D\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}